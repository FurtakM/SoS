// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 10232 0 2
// PrepareArabian ;
  32: CALL 501 0 0
// PrepareRussian ;
  36: CALL 11023 0 0
// Action ;
  40: CALL 19214 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin , buildingsFromPrev , gameActive , rolfAttack , collectedOil ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// buildingsFromPrev := LoadVariable ( 05_Buildings , [ ] ) ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_STRING 05_Buildings
 116: PPUSH
 117: EMPTY
 118: PPUSH
 119: CALL_OW 30
 123: ST_TO_ADDR
// bergkampfArrived := false ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// omarArrived := false ;
 132: LD_ADDR_EXP 6
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// outpostDestroyed := false ;
 140: LD_ADDR_EXP 4
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// ruLoseCounter := 0 ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// rolfScriptBase := false ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// omarScriptBase := false ;
 164: LD_ADDR_EXP 10
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// linkedWithRolf := 0 ;
 172: LD_ADDR_EXP 12
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 180: LD_ADDR_EXP 26
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// rolfDied := false ;
 188: LD_ADDR_EXP 13
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// leninSpotted := false ;
 196: LD_ADDR_EXP 14
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// mortarConstructed := false ;
 204: LD_ADDR_EXP 15
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// rolfHasVehicles := false ;
 212: LD_ADDR_EXP 16
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// leninScriptBase := true ;
 220: LD_ADDR_EXP 11
 224: PUSH
 225: LD_INT 1
 227: ST_TO_ADDR
// rolfWantVehicles := false ;
 228: LD_ADDR_EXP 17
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// omarWantVehicles := false ;
 236: LD_ADDR_EXP 18
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// omarHasVehicles := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// escapeAllowed := false ;
 252: LD_ADDR_EXP 24
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 19
 264: PUSH
 265: LD_INT 31500
 267: PUSH
 268: LD_INT 28350
 270: PUSH
 271: LD_INT 25900
 273: PUSH
 274: LD_INT 24150
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 289: LD_ADDR_EXP 20
 293: PUSH
 294: LD_INT 31500
 296: PUSH
 297: LD_INT 28350
 299: PUSH
 300: LD_INT 25900
 302: PUSH
 303: LD_INT 24150
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: LD_OWVAR 67
 316: ARRAY
 317: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 318: LD_ADDR_EXP 21
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: LD_INT 5
 328: PUSH
 329: LD_INT 6
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_OWVAR 67
 345: ARRAY
 346: ST_TO_ADDR
// omarAttack := false ;
 347: LD_ADDR_EXP 23
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// disableAttackOnHeike := false ;
 355: LD_ADDR_EXP 27
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// escapeTimer := 8 8$30 ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 17850
 370: ST_TO_ADDR
// firstAttack := true ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// canRolfJoin := true ;
 379: LD_ADDR_EXP 29
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// gameActive := false ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 0
 394: ST_TO_ADDR
// rolfAttack := false ;
 395: LD_ADDR_EXP 32
 399: PUSH
 400: LD_INT 0
 402: ST_TO_ADDR
// collectedOil := 0 ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 0
 410: ST_TO_ADDR
// end ;
 411: LD_VAR 0 1
 415: RET
// every 0 0$2 trigger GetSide ( Rolf ) = 2 and IsOk ( Rolf ) and not omarArrived do
 416: LD_EXP 47
 420: PPUSH
 421: CALL_OW 255
 425: PUSH
 426: LD_INT 2
 428: EQUAL
 429: PUSH
 430: LD_EXP 47
 434: PPUSH
 435: CALL_OW 302
 439: AND
 440: PUSH
 441: LD_EXP 6
 445: NOT
 446: AND
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_ROLF ) ;
 452: LD_STRING ACH_ROLF
 454: PPUSH
 455: CALL_OW 543
 459: END
// every 0 0$2 trigger collectedOil >= 300 do
 460: LD_EXP 33
 464: PUSH
 465: LD_INT 300
 467: GREATEREQUAL
 468: IFFALSE 480
 470: GO 472
 472: DISABLE
// SetAchievement ( ACH_OIL ) ;
 473: LD_STRING ACH_OIL
 475: PPUSH
 476: CALL_OW 543
 480: END
// every 0 0$2 trigger IsDead ( ruLenin ) do
 481: LD_INT 52
 483: PPUSH
 484: CALL_OW 301
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_LENIN ) ; end_of_file
 493: LD_STRING ACH_LENIN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , veh , tmp , limiter ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
 506: PPUSH
 507: PPUSH
 508: PPUSH
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
 515: PPUSH
 516: PPUSH
// uc_nation := 2 ;
 517: LD_ADDR_OWVAR 21
 521: PUSH
 522: LD_INT 2
 524: ST_TO_ADDR
// uc_side := 5 ;
 525: LD_ADDR_OWVAR 20
 529: PUSH
 530: LD_INT 5
 532: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 533: LD_ADDR_EXP 42
 537: PUSH
 538: LD_STRING Abdul
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: LD_STRING 
 546: PPUSH
 547: CALL 29421 0 3
 551: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 552: LD_ADDR_EXP 44
 556: PUSH
 557: LD_STRING Omar
 559: PPUSH
 560: LD_INT 0
 562: PPUSH
 563: LD_STRING 
 565: PPUSH
 566: CALL 29421 0 3
 570: ST_TO_ADDR
// uc_side := 2 ;
 571: LD_ADDR_OWVAR 20
 575: PUSH
 576: LD_INT 2
 578: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 579: LD_ADDR_EXP 34
 583: PUSH
 584: LD_STRING Heike
 586: PPUSH
 587: LD_EXP 1
 591: NOT
 592: PPUSH
 593: LD_EXP 2
 597: PPUSH
 598: CALL 29421 0 3
 602: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 603: LD_ADDR_EXP 37
 607: PUSH
 608: LD_STRING Ibrahim
 610: PPUSH
 611: LD_EXP 1
 615: NOT
 616: PPUSH
 617: LD_EXP 2
 621: PPUSH
 622: CALL 29421 0 3
 626: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 627: LD_ADDR_EXP 35
 631: PUSH
 632: LD_STRING Givi
 634: PPUSH
 635: LD_EXP 1
 639: NOT
 640: PPUSH
 641: LD_EXP 2
 645: PPUSH
 646: CALL 29421 0 3
 650: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 651: LD_ADDR_EXP 38
 655: PUSH
 656: LD_STRING Kamil
 658: PPUSH
 659: LD_EXP 1
 663: NOT
 664: PPUSH
 665: LD_EXP 2
 669: PPUSH
 670: CALL 29421 0 3
 674: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 675: LD_ADDR_EXP 39
 679: PUSH
 680: LD_STRING Kaia
 682: PPUSH
 683: LD_EXP 1
 687: NOT
 688: PPUSH
 689: LD_EXP 2
 693: PPUSH
 694: CALL 29421 0 3
 698: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 699: LD_ADDR_EXP 40
 703: PUSH
 704: LD_STRING Sophia
 706: PPUSH
 707: LD_EXP 1
 711: NOT
 712: PPUSH
 713: LD_EXP 2
 717: PPUSH
 718: CALL 29421 0 3
 722: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 723: LD_ADDR_EXP 41
 727: PUSH
 728: LD_STRING Markov
 730: PPUSH
 731: LD_EXP 1
 735: NOT
 736: PPUSH
 737: LD_EXP 2
 741: PPUSH
 742: CALL 29421 0 3
 746: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 747: LD_ADDR_EXP 46
 751: PUSH
 752: LD_STRING Aviradze
 754: PPUSH
 755: LD_EXP 1
 759: NOT
 760: PPUSH
 761: LD_EXP 2
 765: PPUSH
 766: CALL 29421 0 3
 770: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 771: LD_ADDR_EXP 45
 775: PUSH
 776: LD_STRING Kurt
 778: PPUSH
 779: LD_EXP 1
 783: NOT
 784: PPUSH
 785: LD_EXP 2
 789: PPUSH
 790: CALL 29421 0 3
 794: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 795: LD_ADDR_EXP 36
 799: PUSH
 800: LD_STRING Mike
 802: PPUSH
 803: LD_EXP 1
 807: NOT
 808: PPUSH
 809: LD_EXP 2
 813: PPUSH
 814: CALL 29421 0 3
 818: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 819: LD_ADDR_EXP 43
 823: PUSH
 824: LD_STRING Olaf
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_STRING 
 832: PPUSH
 833: CALL 29421 0 3
 837: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 838: LD_ADDR_EXP 49
 842: PUSH
 843: LD_STRING 05_others
 845: PPUSH
 846: CALL_OW 31
 850: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 851: LD_ADDR_EXP 50
 855: PUSH
 856: LD_STRING 05_apes
 858: PPUSH
 859: CALL_OW 31
 863: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_STRING 05_Radar
 871: PPUSH
 872: LD_EXP 1
 876: PPUSH
 877: CALL_OW 30
 881: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 882: LD_ADDR_VAR 0 6
 886: PUSH
 887: LD_STRING 05_RemoteControl
 889: PPUSH
 890: LD_EXP 1
 894: PPUSH
 895: CALL_OW 30
 899: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 900: LD_ADDR_VAR 0 7
 904: PUSH
 905: LD_STRING 05_DrugsTested
 907: PPUSH
 908: LD_EXP 1
 912: PPUSH
 913: CALL_OW 30
 917: ST_TO_ADDR
// if hasDrugs then
 918: LD_VAR 0 7
 922: IFFALSE 937
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 924: LD_INT 5
 926: PPUSH
 927: LD_INT 2
 929: PPUSH
 930: LD_INT 2
 932: PPUSH
 933: CALL_OW 322
// if hasRadar then
 937: LD_VAR 0 5
 941: IFFALSE 956
// SetTech ( tech_radar , 2 , state_researched ) ;
 943: LD_INT 6
 945: PPUSH
 946: LD_INT 2
 948: PPUSH
 949: LD_INT 2
 951: PPUSH
 952: CALL_OW 322
// if hasRemote then
 956: LD_VAR 0 6
 960: IFFALSE 975
// SetTech ( tech_remCont , 2 , state_researched ) ;
 962: LD_INT 15
 964: PPUSH
 965: LD_INT 2
 967: PPUSH
 968: LD_INT 2
 970: PPUSH
 971: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 975: LD_ADDR_VAR 0 13
 979: PUSH
 980: LD_INT 5
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 517
 990: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 991: LD_ADDR_VAR 0 2
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 13
1005: PUSH
1006: LD_INT 1
1008: ARRAY
1009: PUSH
1010: FOR_TO
1011: IFFALSE 1088
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
1013: LD_VAR 0 13
1017: PUSH
1018: LD_INT 1
1020: ARRAY
1021: PUSH
1022: LD_VAR 0 2
1026: ARRAY
1027: PPUSH
1028: LD_VAR 0 13
1032: PUSH
1033: LD_INT 2
1035: ARRAY
1036: PUSH
1037: LD_VAR 0 2
1041: ARRAY
1042: PPUSH
1043: CALL_OW 351
1047: IFFALSE 1086
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
1049: LD_VAR 0 13
1053: PUSH
1054: LD_INT 1
1056: ARRAY
1057: PUSH
1058: LD_VAR 0 2
1062: ARRAY
1063: PPUSH
1064: LD_VAR 0 13
1068: PUSH
1069: LD_INT 2
1071: ARRAY
1072: PUSH
1073: LD_VAR 0 2
1077: ARRAY
1078: PPUSH
1079: LD_INT 2
1081: PPUSH
1082: CALL_OW 244
1086: GO 1010
1088: POP
1089: POP
// base := [ ] ;
1090: LD_ADDR_VAR 0 4
1094: PUSH
1095: EMPTY
1096: ST_TO_ADDR
// if debug then
1097: LD_EXP 1
1101: IFFALSE 1151
// begin base := [ [ b_warehouse , 51 , 77 , 1 , nation_russian , 3 , 0 , 0 , 0 ] , ] ;
1103: LD_ADDR_VAR 0 4
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 51
1113: PUSH
1114: LD_INT 77
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 3
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: LD_INT 0
1128: PUSH
1129: LD_INT 0
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: ST_TO_ADDR
// end else
1149: GO 1167
// if buildingsFromPrev then
1151: LD_EXP 30
1155: IFFALSE 1167
// base := buildingsFromPrev ;
1157: LD_ADDR_VAR 0 4
1161: PUSH
1162: LD_EXP 30
1166: ST_TO_ADDR
// if base then
1167: LD_VAR 0 4
1171: IFFALSE 1369
// for i := 1 to base do
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: DOUBLE
1179: LD_INT 1
1181: DEC
1182: ST_TO_ADDR
1183: LD_VAR 0 4
1187: PUSH
1188: FOR_TO
1189: IFFALSE 1367
// base := Replace ( base , i , [ base [ i ] [ 1 ] , base [ i ] [ 2 ] + 155 , base [ i ] [ 3 ] + 3 , base [ i ] [ 4 ] , base [ i ] [ 5 ] , base [ i ] [ 6 ] , base [ i ] [ 7 ] , base [ i ] [ 8 ] , base [ i ] [ 9 ] ] ) ;
1191: LD_ADDR_VAR 0 4
1195: PUSH
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_VAR 0 2
1205: PPUSH
1206: LD_VAR 0 4
1210: PUSH
1211: LD_VAR 0 2
1215: ARRAY
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_VAR 0 2
1230: ARRAY
1231: PUSH
1232: LD_INT 2
1234: ARRAY
1235: PUSH
1236: LD_INT 155
1238: PLUS
1239: PUSH
1240: LD_VAR 0 4
1244: PUSH
1245: LD_VAR 0 2
1249: ARRAY
1250: PUSH
1251: LD_INT 3
1253: ARRAY
1254: PUSH
1255: LD_INT 3
1257: PLUS
1258: PUSH
1259: LD_VAR 0 4
1263: PUSH
1264: LD_VAR 0 2
1268: ARRAY
1269: PUSH
1270: LD_INT 4
1272: ARRAY
1273: PUSH
1274: LD_VAR 0 4
1278: PUSH
1279: LD_VAR 0 2
1283: ARRAY
1284: PUSH
1285: LD_INT 5
1287: ARRAY
1288: PUSH
1289: LD_VAR 0 4
1293: PUSH
1294: LD_VAR 0 2
1298: ARRAY
1299: PUSH
1300: LD_INT 6
1302: ARRAY
1303: PUSH
1304: LD_VAR 0 4
1308: PUSH
1309: LD_VAR 0 2
1313: ARRAY
1314: PUSH
1315: LD_INT 7
1317: ARRAY
1318: PUSH
1319: LD_VAR 0 4
1323: PUSH
1324: LD_VAR 0 2
1328: ARRAY
1329: PUSH
1330: LD_INT 8
1332: ARRAY
1333: PUSH
1334: LD_VAR 0 4
1338: PUSH
1339: LD_VAR 0 2
1343: ARRAY
1344: PUSH
1345: LD_INT 9
1347: ARRAY
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: PPUSH
1360: CALL_OW 1
1364: ST_TO_ADDR
1365: GO 1188
1367: POP
1368: POP
// base := base ^ [ [ b_depot , 206 , 80 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_bunker , 221 , 95 , 5 , nation_arabian , 3 , 0 , 0 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , nation_arabian , 3 , 0 , 0 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , nation_arabian , 3 , 0 , 0 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_lab_full , 217 , 78 , 4 , nation_arabian , 3 , b_lab_weapon , 0 , 0 ] , [ b_solar_power , 220 , 99 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 103 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 216 , 102 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_gun , 203 , 94 , 0 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_track , 199 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 81 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 78 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ] ;
1369: LD_ADDR_VAR 0 4
1373: PUSH
1374: LD_VAR 0 4
1378: PUSH
1379: LD_INT 0
1381: PUSH
1382: LD_INT 206
1384: PUSH
1385: LD_INT 80
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 2
1393: PUSH
1394: LD_INT 3
1396: PUSH
1397: LD_INT 0
1399: PUSH
1400: LD_INT 0
1402: PUSH
1403: LD_INT 0
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 32
1419: PUSH
1420: LD_INT 221
1422: PUSH
1423: LD_INT 95
1425: PUSH
1426: LD_INT 5
1428: PUSH
1429: LD_INT 2
1431: PUSH
1432: LD_INT 3
1434: PUSH
1435: LD_INT 0
1437: PUSH
1438: LD_INT 0
1440: PUSH
1441: LD_INT 23
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 32
1457: PUSH
1458: LD_INT 223
1460: PUSH
1461: LD_INT 88
1463: PUSH
1464: LD_INT 5
1466: PUSH
1467: LD_INT 2
1469: PUSH
1470: LD_INT 3
1472: PUSH
1473: LD_INT 0
1475: PUSH
1476: LD_INT 0
1478: PUSH
1479: LD_INT 24
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: PUSH
1493: LD_INT 32
1495: PUSH
1496: LD_INT 202
1498: PUSH
1499: LD_INT 64
1501: PUSH
1502: LD_INT 2
1504: PUSH
1505: LD_INT 2
1507: PUSH
1508: LD_INT 3
1510: PUSH
1511: LD_INT 0
1513: PUSH
1514: LD_INT 0
1516: PUSH
1517: LD_INT 25
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 3
1533: PUSH
1534: LD_INT 203
1536: PUSH
1537: LD_INT 91
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 3
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: LD_INT 0
1554: PUSH
1555: LD_INT 0
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 8
1571: PUSH
1572: LD_INT 217
1574: PUSH
1575: LD_INT 78
1577: PUSH
1578: LD_INT 4
1580: PUSH
1581: LD_INT 2
1583: PUSH
1584: LD_INT 3
1586: PUSH
1587: LD_INT 10
1589: PUSH
1590: LD_INT 0
1592: PUSH
1593: LD_INT 0
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 27
1609: PUSH
1610: LD_INT 220
1612: PUSH
1613: LD_INT 99
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 2
1621: PUSH
1622: LD_INT 3
1624: PUSH
1625: LD_INT 0
1627: PUSH
1628: LD_INT 0
1630: PUSH
1631: LD_INT 0
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 27
1647: PUSH
1648: LD_INT 220
1650: PUSH
1651: LD_INT 103
1653: PUSH
1654: LD_INT 1
1656: PUSH
1657: LD_INT 2
1659: PUSH
1660: LD_INT 3
1662: PUSH
1663: LD_INT 0
1665: PUSH
1666: LD_INT 0
1668: PUSH
1669: LD_INT 0
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: PUSH
1683: LD_INT 27
1685: PUSH
1686: LD_INT 216
1688: PUSH
1689: LD_INT 102
1691: PUSH
1692: LD_INT 1
1694: PUSH
1695: LD_INT 2
1697: PUSH
1698: LD_INT 3
1700: PUSH
1701: LD_INT 0
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: LD_INT 0
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 17
1723: PUSH
1724: LD_INT 203
1726: PUSH
1727: LD_INT 94
1729: PUSH
1730: LD_INT 0
1732: PUSH
1733: LD_INT 2
1735: PUSH
1736: LD_INT 3
1738: PUSH
1739: LD_INT 0
1741: PUSH
1742: LD_INT 0
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: LD_INT 23
1761: PUSH
1762: LD_INT 200
1764: PUSH
1765: LD_INT 88
1767: PUSH
1768: LD_INT 2
1770: PUSH
1771: LD_INT 2
1773: PUSH
1774: LD_INT 3
1776: PUSH
1777: LD_INT 0
1779: PUSH
1780: LD_INT 0
1782: PUSH
1783: LD_INT 0
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 16
1799: PUSH
1800: LD_INT 199
1802: PUSH
1803: LD_INT 91
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: LD_INT 2
1811: PUSH
1812: LD_INT 3
1814: PUSH
1815: LD_INT 0
1817: PUSH
1818: LD_INT 0
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 26
1837: PUSH
1838: LD_INT 197
1840: PUSH
1841: LD_INT 81
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 2
1849: PUSH
1850: LD_INT 3
1852: PUSH
1853: LD_INT 0
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 0
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 26
1875: PUSH
1876: LD_INT 197
1878: PUSH
1879: LD_INT 78
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: LD_INT 3
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: LD_INT 0
1896: PUSH
1897: LD_INT 0
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: ADD
1927: ST_TO_ADDR
// if hasRadar then
1928: LD_VAR 0 5
1932: IFFALSE 1996
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1934: LD_ADDR_VAR 0 4
1938: PUSH
1939: LD_VAR 0 4
1943: PPUSH
1944: LD_VAR 0 4
1948: PUSH
1949: LD_INT 1
1951: PLUS
1952: PPUSH
1953: LD_INT 20
1955: PUSH
1956: LD_INT 203
1958: PUSH
1959: LD_INT 87
1961: PUSH
1962: LD_INT 3
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: LD_INT 3
1970: PUSH
1971: LD_INT 0
1973: PUSH
1974: LD_INT 0
1976: PUSH
1977: LD_INT 0
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 1
1995: ST_TO_ADDR
// if hasRemote then
1996: LD_VAR 0 6
2000: IFFALSE 2064
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
2002: LD_ADDR_VAR 0 4
2006: PUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_VAR 0 4
2016: PUSH
2017: LD_INT 1
2019: PLUS
2020: PPUSH
2021: LD_INT 22
2023: PUSH
2024: LD_INT 207
2026: PUSH
2027: LD_INT 95
2029: PUSH
2030: LD_INT 5
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 3
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: LD_INT 0
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: PPUSH
2059: CALL_OW 1
2063: ST_TO_ADDR
// for i in base do
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: LD_VAR 0 4
2073: PUSH
2074: FOR_IN
2075: IFFALSE 2413
// begin if HexInfo ( i [ 2 ] , i [ 3 ] ) then
2077: LD_VAR 0 2
2081: PUSH
2082: LD_INT 2
2084: ARRAY
2085: PPUSH
2086: LD_VAR 0 2
2090: PUSH
2091: LD_INT 3
2093: ARRAY
2094: PPUSH
2095: CALL_OW 428
2099: IFFALSE 2103
// continue ;
2101: GO 2074
// uc_nation := i [ 5 ] ;
2103: LD_ADDR_OWVAR 21
2107: PUSH
2108: LD_VAR 0 2
2112: PUSH
2113: LD_INT 5
2115: ARRAY
2116: ST_TO_ADDR
// InitBc ;
2117: CALL_OW 21
// bc_type := i [ 1 ] ;
2121: LD_ADDR_OWVAR 42
2125: PUSH
2126: LD_VAR 0 2
2130: PUSH
2131: LD_INT 1
2133: ARRAY
2134: ST_TO_ADDR
// bc_level := i [ 6 ] ;
2135: LD_ADDR_OWVAR 43
2139: PUSH
2140: LD_VAR 0 2
2144: PUSH
2145: LD_INT 6
2147: ARRAY
2148: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 5 ] = nation_arabian and not i [ 8 ] then
2149: LD_VAR 0 2
2153: PUSH
2154: LD_INT 1
2156: ARRAY
2157: PUSH
2158: LD_INT 8
2160: EQUAL
2161: PUSH
2162: LD_VAR 0 2
2166: PUSH
2167: LD_INT 5
2169: ARRAY
2170: PUSH
2171: LD_INT 2
2173: EQUAL
2174: AND
2175: PUSH
2176: LD_VAR 0 2
2180: PUSH
2181: LD_INT 8
2183: ARRAY
2184: NOT
2185: AND
2186: IFFALSE 2220
// begin bc_kind1 := b_lab_weapon ;
2188: LD_ADDR_OWVAR 44
2192: PUSH
2193: LD_INT 10
2195: ST_TO_ADDR
// if hasRadar then
2196: LD_VAR 0 5
2200: IFFALSE 2212
// bc_kind2 := b_lab_opto else
2202: LD_ADDR_OWVAR 45
2206: PUSH
2207: LD_INT 15
2209: ST_TO_ADDR
2210: GO 2220
// bc_kind2 := b_lab_basic ;
2212: LD_ADDR_OWVAR 45
2216: PUSH
2217: LD_INT 9
2219: ST_TO_ADDR
// end ; if i [ 1 ] in [ b_lab_half , b_lab_full ] and i [ 7 ] then
2220: LD_VAR 0 2
2224: PUSH
2225: LD_INT 1
2227: ARRAY
2228: PUSH
2229: LD_INT 7
2231: PUSH
2232: LD_INT 8
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: IN
2239: PUSH
2240: LD_VAR 0 2
2244: PUSH
2245: LD_INT 7
2247: ARRAY
2248: AND
2249: IFFALSE 2265
// bc_kind1 := i [ 7 ] ;
2251: LD_ADDR_OWVAR 44
2255: PUSH
2256: LD_VAR 0 2
2260: PUSH
2261: LD_INT 7
2263: ARRAY
2264: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 8 ] then
2265: LD_VAR 0 2
2269: PUSH
2270: LD_INT 1
2272: ARRAY
2273: PUSH
2274: LD_INT 8
2276: EQUAL
2277: PUSH
2278: LD_VAR 0 2
2282: PUSH
2283: LD_INT 8
2285: ARRAY
2286: AND
2287: IFFALSE 2303
// bc_kind1 := i [ 8 ] ;
2289: LD_ADDR_OWVAR 44
2293: PUSH
2294: LD_VAR 0 2
2298: PUSH
2299: LD_INT 8
2301: ARRAY
2302: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2303: LD_ADDR_VAR 0 3
2307: PUSH
2308: LD_VAR 0 2
2312: PUSH
2313: LD_INT 2
2315: ARRAY
2316: PPUSH
2317: LD_VAR 0 2
2321: PUSH
2322: LD_INT 3
2324: ARRAY
2325: PPUSH
2326: LD_VAR 0 2
2330: PUSH
2331: LD_INT 4
2333: ARRAY
2334: PPUSH
2335: CALL_OW 47
2339: ST_TO_ADDR
// if i [ 9 ] then
2340: LD_VAR 0 2
2344: PUSH
2345: LD_INT 9
2347: ARRAY
2348: IFFALSE 2368
// PlaceWeaponTurret ( b , i [ 9 ] ) ;
2350: LD_VAR 0 3
2354: PPUSH
2355: LD_VAR 0 2
2359: PUSH
2360: LD_INT 9
2362: ARRAY
2363: PPUSH
2364: CALL_OW 431
// if i [ 1 ] = b_bunker then
2368: LD_VAR 0 2
2372: PUSH
2373: LD_INT 1
2375: ARRAY
2376: PUSH
2377: LD_INT 32
2379: EQUAL
2380: IFFALSE 2411
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
2382: LD_ADDR_VAR 0 11
2386: PUSH
2387: LD_VAR 0 11
2391: PPUSH
2392: LD_VAR 0 11
2396: PUSH
2397: LD_INT 1
2399: PLUS
2400: PPUSH
2401: LD_VAR 0 3
2405: PPUSH
2406: CALL_OW 1
2410: ST_TO_ADDR
// end ;
2411: GO 2074
2413: POP
2414: POP
// depot := HexInfo ( 206 , 80 ) ;
2415: LD_ADDR_VAR 0 9
2419: PUSH
2420: LD_INT 206
2422: PPUSH
2423: LD_INT 80
2425: PPUSH
2426: CALL_OW 428
2430: ST_TO_ADDR
// factory := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) ;
2431: LD_ADDR_VAR 0 8
2435: PUSH
2436: LD_INT 22
2438: PUSH
2439: LD_INT 2
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: PUSH
2446: LD_INT 30
2448: PUSH
2449: LD_INT 3
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: PPUSH
2460: CALL_OW 69
2464: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2465: LD_ADDR_VAR 0 10
2469: PUSH
2470: LD_INT 22
2472: PUSH
2473: LD_INT 2
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 2
2482: PUSH
2483: LD_INT 30
2485: PUSH
2486: LD_INT 6
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 30
2495: PUSH
2496: LD_INT 7
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PUSH
2503: LD_INT 30
2505: PUSH
2506: LD_INT 8
2508: PUSH
2509: EMPTY
2510: LIST
2511: LIST
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: LIST
2517: LIST
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: ST_TO_ADDR
// arDepot := depot ;
2528: LD_ADDR_EXP 48
2532: PUSH
2533: LD_VAR 0 9
2537: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 190 , 150 ] [ Difficulty ] ) ;
2538: LD_VAR 0 9
2542: PPUSH
2543: CALL_OW 274
2547: PPUSH
2548: LD_INT 1
2550: PPUSH
2551: LD_INT 360
2553: PUSH
2554: LD_INT 260
2556: PUSH
2557: LD_INT 190
2559: PUSH
2560: LD_INT 150
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: PUSH
2569: LD_OWVAR 67
2573: ARRAY
2574: PPUSH
2575: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 150 , 120 ] [ Difficulty ] ) ;
2579: LD_VAR 0 9
2583: PPUSH
2584: CALL_OW 274
2588: PPUSH
2589: LD_INT 2
2591: PPUSH
2592: LD_INT 200
2594: PUSH
2595: LD_INT 170
2597: PUSH
2598: LD_INT 150
2600: PUSH
2601: LD_INT 120
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: PUSH
2610: LD_OWVAR 67
2614: ARRAY
2615: PPUSH
2616: CALL_OW 277
// uc_nation := 2 ;
2620: LD_ADDR_OWVAR 21
2624: PUSH
2625: LD_INT 2
2627: ST_TO_ADDR
// uc_side := 2 ;
2628: LD_ADDR_OWVAR 20
2632: PUSH
2633: LD_INT 2
2635: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
2636: LD_INT 13
2638: PPUSH
2639: LD_INT 1
2641: PPUSH
2642: LD_INT 1
2644: PPUSH
2645: LD_INT 27
2647: PPUSH
2648: LD_INT 33
2650: PPUSH
2651: CALL 34436 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
2655: CALL_OW 45
2659: PPUSH
2660: LD_INT 190
2662: PPUSH
2663: LD_INT 64
2665: PPUSH
2666: LD_INT 5
2668: PPUSH
2669: LD_INT 0
2671: PPUSH
2672: CALL 69029 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
2676: LD_INT 13
2678: PPUSH
2679: LD_INT 1
2681: PPUSH
2682: LD_INT 1
2684: PPUSH
2685: LD_INT 25
2687: PPUSH
2688: LD_INT 22
2690: PPUSH
2691: CALL 34436 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
2695: CALL_OW 45
2699: PPUSH
2700: LD_INT 188
2702: PPUSH
2703: LD_INT 67
2705: PPUSH
2706: LD_INT 5
2708: PPUSH
2709: LD_INT 0
2711: PPUSH
2712: CALL 69029 0 5
// PlaceUnitXY ( Heike , 213 , 87 , false ) ;
2716: LD_EXP 34
2720: PPUSH
2721: LD_INT 213
2723: PPUSH
2724: LD_INT 87
2726: PPUSH
2727: LD_INT 0
2729: PPUSH
2730: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
2734: LD_EXP 34
2738: PPUSH
2739: LD_INT 214
2741: PPUSH
2742: LD_INT 87
2744: PPUSH
2745: CALL_OW 118
// if Kaia then
2749: LD_EXP 39
2753: IFFALSE 2788
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
2755: LD_EXP 39
2759: PPUSH
2760: LD_INT 213
2762: PPUSH
2763: LD_INT 85
2765: PPUSH
2766: LD_INT 0
2768: PPUSH
2769: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
2773: LD_EXP 39
2777: PPUSH
2778: LD_INT 215
2780: PPUSH
2781: LD_INT 87
2783: PPUSH
2784: CALL_OW 118
// end ; if Olaf and Kaia then
2788: LD_EXP 43
2792: PUSH
2793: LD_EXP 39
2797: AND
2798: IFFALSE 2835
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
2800: LD_EXP 43
2804: PPUSH
2805: LD_INT 215
2807: PPUSH
2808: LD_INT 87
2810: PPUSH
2811: LD_INT 0
2813: PPUSH
2814: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
2818: LD_EXP 43
2822: PPUSH
2823: LD_INT 213
2825: PPUSH
2826: LD_INT 85
2828: PPUSH
2829: CALL_OW 118
// end else
2833: GO 2855
// if Olaf then
2835: LD_EXP 43
2839: IFFALSE 2855
// PlaceHumanInUnit ( Olaf , factory ) ;
2841: LD_EXP 43
2845: PPUSH
2846: LD_VAR 0 8
2850: PPUSH
2851: CALL_OW 52
// if Givi then
2855: LD_EXP 35
2859: IFFALSE 2940
// begin if Kaia and Olaf then
2861: LD_EXP 39
2865: PUSH
2866: LD_EXP 43
2870: AND
2871: IFFALSE 2908
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2873: LD_EXP 35
2877: PPUSH
2878: LD_INT 247
2880: PPUSH
2881: LD_INT 117
2883: PPUSH
2884: LD_INT 0
2886: PPUSH
2887: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2891: LD_EXP 35
2895: PPUSH
2896: LD_INT 248
2898: PPUSH
2899: LD_INT 118
2901: PPUSH
2902: CALL_OW 118
// end else
2906: GO 2940
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2908: LD_EXP 35
2912: PPUSH
2913: LD_INT 216
2915: PPUSH
2916: LD_INT 88
2918: PPUSH
2919: LD_INT 0
2921: PPUSH
2922: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2926: LD_EXP 35
2930: PPUSH
2931: LD_EXP 34
2935: PPUSH
2936: CALL_OW 119
// end ; end ; if Kurt then
2940: LD_EXP 45
2944: IFFALSE 2964
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2946: LD_EXP 45
2950: PPUSH
2951: LD_VAR 0 11
2955: PUSH
2956: LD_INT 2
2958: ARRAY
2959: PPUSH
2960: CALL_OW 52
// if Mike then
2964: LD_EXP 36
2968: IFFALSE 2988
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2970: LD_EXP 36
2974: PPUSH
2975: LD_VAR 0 11
2979: PUSH
2980: LD_INT 3
2982: ARRAY
2983: PPUSH
2984: CALL_OW 52
// if Kamil then
2988: LD_EXP 38
2992: IFFALSE 3054
// begin if Kaia and Olaf then
2994: LD_EXP 39
2998: PUSH
2999: LD_EXP 43
3003: AND
3004: IFFALSE 3022
// PlaceHumanInUnit ( Kamil , depot ) else
3006: LD_EXP 38
3010: PPUSH
3011: LD_VAR 0 9
3015: PPUSH
3016: CALL_OW 52
3020: GO 3054
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
3022: LD_EXP 38
3026: PPUSH
3027: LD_INT 213
3029: PPUSH
3030: LD_INT 87
3032: PPUSH
3033: LD_INT 0
3035: PPUSH
3036: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
3040: LD_EXP 38
3044: PPUSH
3045: LD_EXP 34
3049: PPUSH
3050: CALL_OW 119
// end ; end ; if Sophia then
3054: LD_EXP 40
3058: IFFALSE 3074
// PlaceHumanInUnit ( Sophia , depot ) ;
3060: LD_EXP 40
3064: PPUSH
3065: LD_VAR 0 9
3069: PPUSH
3070: CALL_OW 52
// if Aviradze then
3074: LD_EXP 46
3078: IFFALSE 3127
// if lab then
3080: LD_VAR 0 10
3084: IFFALSE 3106
// PlaceHumanInUnit ( Aviradze , lab [ 1 ] ) else
3086: LD_EXP 46
3090: PPUSH
3091: LD_VAR 0 10
3095: PUSH
3096: LD_INT 1
3098: ARRAY
3099: PPUSH
3100: CALL_OW 52
3104: GO 3127
// PlaceUnitXYR ( Aviradze , 210 , 87 , 3 , false ) ;
3106: LD_EXP 46
3110: PPUSH
3111: LD_INT 210
3113: PPUSH
3114: LD_INT 87
3116: PPUSH
3117: LD_INT 3
3119: PPUSH
3120: LD_INT 0
3122: PPUSH
3123: CALL_OW 50
// if Ibrahim then
3127: LD_EXP 37
3131: IFFALSE 3180
// if lab then
3133: LD_VAR 0 10
3137: IFFALSE 3159
// PlaceHumanInUnit ( Ibrahim , lab [ 1 ] ) else
3139: LD_EXP 37
3143: PPUSH
3144: LD_VAR 0 10
3148: PUSH
3149: LD_INT 1
3151: ARRAY
3152: PPUSH
3153: CALL_OW 52
3157: GO 3180
// PlaceUnitXYR ( Ibrahim , 210 , 87 , 3 , false ) ;
3159: LD_EXP 37
3163: PPUSH
3164: LD_INT 210
3166: PPUSH
3167: LD_INT 87
3169: PPUSH
3170: LD_INT 3
3172: PPUSH
3173: LD_INT 0
3175: PPUSH
3176: CALL_OW 50
// if Markov then
3180: LD_EXP 41
3184: IFFALSE 3233
// if factory then
3186: LD_VAR 0 8
3190: IFFALSE 3212
// PlaceHumanInUnit ( Markov , factory [ 1 ] ) else
3192: LD_EXP 41
3196: PPUSH
3197: LD_VAR 0 8
3201: PUSH
3202: LD_INT 1
3204: ARRAY
3205: PPUSH
3206: CALL_OW 52
3210: GO 3233
// PlaceUnitXYR ( Markov , 210 , 87 , 3 , false ) ;
3212: LD_EXP 41
3216: PPUSH
3217: LD_INT 210
3219: PPUSH
3220: LD_INT 87
3222: PPUSH
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 0
3228: PPUSH
3229: CALL_OW 50
// if heikeSecondSquad then
3233: LD_EXP 49
3237: IFFALSE 3277
// for i in heikeSecondSquad do
3239: LD_ADDR_VAR 0 2
3243: PUSH
3244: LD_EXP 49
3248: PUSH
3249: FOR_IN
3250: IFFALSE 3275
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
3252: LD_VAR 0 2
3256: PPUSH
3257: LD_INT 190
3259: PPUSH
3260: LD_INT 65
3262: PPUSH
3263: LD_INT 5
3265: PPUSH
3266: LD_INT 0
3268: PPUSH
3269: CALL_OW 50
3273: GO 3249
3275: POP
3276: POP
// if heikeApes then
3277: LD_EXP 50
3281: IFFALSE 3321
// for i in heikeApes do
3283: LD_ADDR_VAR 0 2
3287: PUSH
3288: LD_EXP 50
3292: PUSH
3293: FOR_IN
3294: IFFALSE 3319
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
3296: LD_VAR 0 2
3300: PPUSH
3301: LD_INT 190
3303: PPUSH
3304: LD_INT 70
3306: PPUSH
3307: LD_INT 5
3309: PPUSH
3310: LD_INT 0
3312: PPUSH
3313: CALL_OW 50
3317: GO 3293
3319: POP
3320: POP
// tmp := LoadVariable ( 05_Vehicles , [ ] ) ;
3321: LD_ADDR_VAR 0 13
3325: PUSH
3326: LD_STRING 05_Vehicles
3328: PPUSH
3329: EMPTY
3330: PPUSH
3331: CALL_OW 30
3335: ST_TO_ADDR
// if tmp then
3336: LD_VAR 0 13
3340: IFFALSE 3510
// begin limiter := 10 ;
3342: LD_ADDR_VAR 0 14
3346: PUSH
3347: LD_INT 10
3349: ST_TO_ADDR
// for i in tmp do
3350: LD_ADDR_VAR 0 2
3354: PUSH
3355: LD_VAR 0 13
3359: PUSH
3360: FOR_IN
3361: IFFALSE 3508
// begin limiter := Dec ( limiter ) ;
3363: LD_ADDR_VAR 0 14
3367: PUSH
3368: LD_VAR 0 14
3372: PPUSH
3373: CALL 68272 0 1
3377: ST_TO_ADDR
// if limiter = 0 then
3378: LD_VAR 0 14
3382: PUSH
3383: LD_INT 0
3385: EQUAL
3386: IFFALSE 3390
// break ;
3388: GO 3508
// uc_side := 2 ;
3390: LD_ADDR_OWVAR 20
3394: PUSH
3395: LD_INT 2
3397: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
3398: LD_ADDR_OWVAR 21
3402: PUSH
3403: LD_VAR 0 2
3407: PUSH
3408: LD_INT 5
3410: ARRAY
3411: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 20 ) ;
3412: LD_VAR 0 2
3416: PUSH
3417: LD_INT 1
3419: ARRAY
3420: PPUSH
3421: LD_VAR 0 2
3425: PUSH
3426: LD_INT 2
3428: ARRAY
3429: PPUSH
3430: LD_VAR 0 2
3434: PUSH
3435: LD_INT 3
3437: ARRAY
3438: PPUSH
3439: LD_VAR 0 2
3443: PUSH
3444: LD_INT 4
3446: ARRAY
3447: PPUSH
3448: LD_INT 20
3450: PPUSH
3451: CALL 34436 0 5
// veh := CreateVehicle ;
3455: LD_ADDR_VAR 0 12
3459: PUSH
3460: CALL_OW 45
3464: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
3465: LD_VAR 0 12
3469: PPUSH
3470: LD_INT 0
3472: PPUSH
3473: LD_INT 5
3475: PPUSH
3476: CALL_OW 12
3480: PPUSH
3481: CALL_OW 233
// PlaceUnitXYR ( veh , 252 , 111 , 8 , false ) ;
3485: LD_VAR 0 12
3489: PPUSH
3490: LD_INT 252
3492: PPUSH
3493: LD_INT 111
3495: PPUSH
3496: LD_INT 8
3498: PPUSH
3499: LD_INT 0
3501: PPUSH
3502: CALL_OW 50
// end ;
3506: GO 3360
3508: POP
3509: POP
// end ; end ;
3510: LD_VAR 0 1
3514: RET
// export function PrepareRolfSquad ; var i , j ; begin
3515: LD_INT 0
3517: PPUSH
3518: PPUSH
3519: PPUSH
// uc_side := 8 ;
3520: LD_ADDR_OWVAR 20
3524: PUSH
3525: LD_INT 8
3527: ST_TO_ADDR
// uc_nation := 2 ;
3528: LD_ADDR_OWVAR 21
3532: PUSH
3533: LD_INT 2
3535: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
3536: LD_ADDR_EXP 47
3540: PUSH
3541: LD_STRING Bergkamp
3543: PPUSH
3544: CALL_OW 25
3548: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
3549: LD_ADDR_EXP 51
3553: PUSH
3554: LD_EXP 47
3558: PUSH
3559: EMPTY
3560: LIST
3561: ST_TO_ADDR
// for i := 1 to 4 do
3562: LD_ADDR_VAR 0 2
3566: PUSH
3567: DOUBLE
3568: LD_INT 1
3570: DEC
3571: ST_TO_ADDR
3572: LD_INT 4
3574: PUSH
3575: FOR_TO
3576: IFFALSE 3656
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
3578: LD_ADDR_VAR 0 3
3582: PUSH
3583: DOUBLE
3584: LD_INT 1
3586: DEC
3587: ST_TO_ADDR
3588: LD_INT 5
3590: PUSH
3591: LD_INT 2
3593: PUSH
3594: LD_INT 3
3596: PUSH
3597: LD_INT 1
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: PUSH
3606: LD_VAR 0 2
3610: ARRAY
3611: PUSH
3612: FOR_TO
3613: IFFALSE 3652
// begin PrepareHuman ( false , i , 5 ) ;
3615: LD_INT 0
3617: PPUSH
3618: LD_VAR 0 2
3622: PPUSH
3623: LD_INT 5
3625: PPUSH
3626: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
3630: LD_ADDR_EXP 51
3634: PUSH
3635: LD_EXP 51
3639: PPUSH
3640: CALL_OW 44
3644: PPUSH
3645: CALL 66889 0 2
3649: ST_TO_ADDR
// end ;
3650: GO 3612
3652: POP
3653: POP
// end ;
3654: GO 3575
3656: POP
3657: POP
// if HexInfo ( 5 , 3 ) then
3658: LD_INT 5
3660: PPUSH
3661: LD_INT 3
3663: PPUSH
3664: CALL_OW 428
3668: IFFALSE 3685
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
3670: LD_INT 5
3672: PPUSH
3673: LD_INT 3
3675: PPUSH
3676: CALL_OW 428
3680: PPUSH
3681: CALL_OW 64
// for i in rolfSquad do
3685: LD_ADDR_VAR 0 2
3689: PUSH
3690: LD_EXP 51
3694: PUSH
3695: FOR_IN
3696: IFFALSE 3832
// begin uc_direction := 2 ;
3698: LD_ADDR_OWVAR 24
3702: PUSH
3703: LD_INT 2
3705: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
3706: LD_VAR 0 2
3710: PPUSH
3711: CALL_OW 257
3715: PUSH
3716: LD_INT 3
3718: EQUAL
3719: IFFALSE 3793
// begin uc_side := 8 ;
3721: LD_ADDR_OWVAR 20
3725: PUSH
3726: LD_INT 8
3728: ST_TO_ADDR
// uc_nation := 2 ;
3729: LD_ADDR_OWVAR 21
3733: PUSH
3734: LD_INT 2
3736: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
3737: LD_INT 13
3739: PPUSH
3740: LD_INT 1
3742: PPUSH
3743: LD_INT 1
3745: PPUSH
3746: LD_INT 27
3748: PPUSH
3749: LD_INT 88
3751: PPUSH
3752: CALL 34436 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
3756: CALL_OW 45
3760: PPUSH
3761: LD_INT 11
3763: PPUSH
3764: LD_INT 0
3766: PPUSH
3767: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
3771: LD_VAR 0 2
3775: PPUSH
3776: LD_INT 5
3778: PPUSH
3779: LD_INT 3
3781: PPUSH
3782: CALL_OW 428
3786: PPUSH
3787: CALL_OW 52
// end else
3791: GO 3808
// PlaceUnitArea ( i , northSpawn , false ) ;
3793: LD_VAR 0 2
3797: PPUSH
3798: LD_INT 11
3800: PPUSH
3801: LD_INT 0
3803: PPUSH
3804: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
3808: LD_VAR 0 2
3812: PPUSH
3813: LD_INT 29
3815: PPUSH
3816: LD_INT 10
3818: PPUSH
3819: CALL_OW 111
// wait ( 0 0$2 ) ;
3823: LD_INT 70
3825: PPUSH
3826: CALL_OW 67
// end ;
3830: GO 3695
3832: POP
3833: POP
// wait ( 0 0$5 ) ;
3834: LD_INT 175
3836: PPUSH
3837: CALL_OW 67
// end ;
3841: LD_VAR 0 1
3845: RET
// export function PrepareRolfBase ; var i , tmp ; begin
3846: LD_INT 0
3848: PPUSH
3849: PPUSH
3850: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
3851: LD_EXP 47
3855: PPUSH
3856: LD_INT 94
3858: PPUSH
3859: LD_INT 63
3861: PPUSH
3862: CALL_OW 428
3866: PPUSH
3867: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
3871: LD_ADDR_VAR 0 3
3875: PUSH
3876: LD_INT 4
3878: PUSH
3879: LD_INT 82
3881: PUSH
3882: LD_INT 64
3884: PUSH
3885: LD_INT 1
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: PUSH
3894: LD_INT 31
3896: PUSH
3897: LD_INT 73
3899: PUSH
3900: LD_INT 58
3902: PUSH
3903: LD_INT 0
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// for i in tmp do
3916: LD_ADDR_VAR 0 2
3920: PUSH
3921: LD_VAR 0 3
3925: PUSH
3926: FOR_IN
3927: IFFALSE 3991
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3929: LD_EXP 51
3933: PPUSH
3934: LD_INT 25
3936: PUSH
3937: LD_INT 2
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PPUSH
3944: CALL_OW 72
3948: PPUSH
3949: LD_VAR 0 2
3953: PUSH
3954: LD_INT 1
3956: ARRAY
3957: PPUSH
3958: LD_VAR 0 2
3962: PUSH
3963: LD_INT 2
3965: ARRAY
3966: PPUSH
3967: LD_VAR 0 2
3971: PUSH
3972: LD_INT 3
3974: ARRAY
3975: PPUSH
3976: LD_VAR 0 2
3980: PUSH
3981: LD_INT 4
3983: ARRAY
3984: PPUSH
3985: CALL_OW 205
3989: GO 3926
3991: POP
3992: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
3993: LD_EXP 51
3997: PUSH
3998: LD_INT 2
4000: ARRAY
4001: PPUSH
4002: LD_INT 63
4004: PPUSH
4005: LD_INT 42
4007: PPUSH
4008: CALL_OW 428
4012: PPUSH
4013: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
4017: LD_EXP 51
4021: PUSH
4022: LD_INT 3
4024: ARRAY
4025: PPUSH
4026: LD_INT 94
4028: PPUSH
4029: LD_INT 63
4031: PPUSH
4032: CALL_OW 428
4036: PPUSH
4037: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4041: LD_INT 35
4043: PPUSH
4044: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
4048: LD_EXP 51
4052: PPUSH
4053: LD_INT 25
4055: PUSH
4056: LD_INT 2
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: PUSH
4063: LD_INT 3
4065: PUSH
4066: LD_INT 60
4068: PUSH
4069: EMPTY
4070: LIST
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: PPUSH
4080: CALL_OW 72
4084: IFFALSE 4041
// rolfScriptBase := true ;
4086: LD_ADDR_EXP 9
4090: PUSH
4091: LD_INT 1
4093: ST_TO_ADDR
// end ;
4094: LD_VAR 0 1
4098: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4099: LD_EXP 9
4103: PUSH
4104: LD_EXP 47
4108: PPUSH
4109: CALL_OW 255
4113: PUSH
4114: LD_INT 8
4116: EQUAL
4117: AND
4118: IFFALSE 5125
4120: GO 4122
4122: DISABLE
4123: LD_INT 0
4125: PPUSH
4126: PPUSH
4127: PPUSH
4128: PPUSH
4129: PPUSH
4130: PPUSH
4131: PPUSH
4132: PPUSH
4133: PPUSH
4134: PPUSH
// begin enable ;
4135: ENABLE
// if not rolfSquad then
4136: LD_EXP 51
4140: NOT
4141: IFFALSE 4145
// exit ;
4143: GO 5125
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
4145: LD_ADDR_VAR 0 9
4149: PUSH
4150: LD_INT 12
4152: PPUSH
4153: LD_INT 81
4155: PUSH
4156: LD_INT 8
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PPUSH
4163: CALL_OW 70
4167: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
4168: LD_ADDR_VAR 0 5
4172: PUSH
4173: LD_EXP 51
4177: PPUSH
4178: LD_INT 25
4180: PUSH
4181: LD_INT 1
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PPUSH
4188: CALL_OW 72
4192: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
4193: LD_ADDR_VAR 0 6
4197: PUSH
4198: LD_EXP 51
4202: PPUSH
4203: LD_INT 25
4205: PUSH
4206: LD_INT 2
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 72
4217: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
4218: LD_ADDR_VAR 0 8
4222: PUSH
4223: LD_EXP 51
4227: PPUSH
4228: LD_INT 25
4230: PUSH
4231: LD_INT 3
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL_OW 72
4242: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
4243: LD_ADDR_VAR 0 7
4247: PUSH
4248: LD_EXP 51
4252: PPUSH
4253: LD_INT 25
4255: PUSH
4256: LD_INT 4
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PPUSH
4263: CALL_OW 72
4267: ST_TO_ADDR
// if sol then
4268: LD_VAR 0 5
4272: IFFALSE 4570
// for i in sol union Rolf do
4274: LD_ADDR_VAR 0 1
4278: PUSH
4279: LD_VAR 0 5
4283: PUSH
4284: LD_EXP 47
4288: UNION
4289: PUSH
4290: FOR_IN
4291: IFFALSE 4568
// if not IsInUnit ( i ) and not HasTask ( i ) then
4293: LD_VAR 0 1
4297: PPUSH
4298: CALL_OW 310
4302: NOT
4303: PUSH
4304: LD_VAR 0 1
4308: PPUSH
4309: CALL_OW 314
4313: NOT
4314: AND
4315: IFFALSE 4566
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
4317: LD_VAR 0 1
4321: PPUSH
4322: CALL_OW 256
4326: PUSH
4327: LD_INT 500
4329: LESS
4330: PUSH
4331: LD_VAR 0 1
4335: PPUSH
4336: LD_INT 80
4338: PPUSH
4339: LD_INT 49
4341: PPUSH
4342: CALL_OW 297
4346: PUSH
4347: LD_INT 6
4349: GREATER
4350: AND
4351: IFFALSE 4370
// begin ComMoveXY ( i , 80 , 49 ) ;
4353: LD_VAR 0 1
4357: PPUSH
4358: LD_INT 80
4360: PPUSH
4361: LD_INT 49
4363: PPUSH
4364: CALL_OW 111
// continue ;
4368: GO 4290
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4370: LD_ADDR_VAR 0 4
4374: PUSH
4375: LD_INT 22
4377: PUSH
4378: LD_INT 8
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PUSH
4385: LD_INT 50
4387: PUSH
4388: EMPTY
4389: LIST
4390: PUSH
4391: LD_INT 2
4393: PUSH
4394: LD_INT 30
4396: PUSH
4397: LD_INT 4
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PUSH
4404: LD_INT 30
4406: PUSH
4407: LD_INT 5
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: PUSH
4414: LD_INT 30
4416: PUSH
4417: LD_INT 32
4419: PUSH
4420: EMPTY
4421: LIST
4422: LIST
4423: PUSH
4424: LD_INT 30
4426: PUSH
4427: LD_INT 31
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: PPUSH
4446: CALL_OW 69
4450: ST_TO_ADDR
// if tmp then
4451: LD_VAR 0 4
4455: IFFALSE 4566
// begin for b in tmp do
4457: LD_ADDR_VAR 0 2
4461: PUSH
4462: LD_VAR 0 4
4466: PUSH
4467: FOR_IN
4468: IFFALSE 4564
// begin case GetBType ( b ) of b_armoury , b_barracks :
4470: LD_VAR 0 2
4474: PPUSH
4475: CALL_OW 266
4479: PUSH
4480: LD_INT 4
4482: DOUBLE
4483: EQUAL
4484: IFTRUE 4494
4486: LD_INT 5
4488: DOUBLE
4489: EQUAL
4490: IFTRUE 4494
4492: GO 4505
4494: POP
// p := 6 ; b_breastwork , b_bunker :
4495: LD_ADDR_VAR 0 3
4499: PUSH
4500: LD_INT 6
4502: ST_TO_ADDR
4503: GO 4531
4505: LD_INT 31
4507: DOUBLE
4508: EQUAL
4509: IFTRUE 4519
4511: LD_INT 32
4513: DOUBLE
4514: EQUAL
4515: IFTRUE 4519
4517: GO 4530
4519: POP
// p := 1 ; end ;
4520: LD_ADDR_VAR 0 3
4524: PUSH
4525: LD_INT 1
4527: ST_TO_ADDR
4528: GO 4531
4530: POP
// if UnitsInside ( b ) < p then
4531: LD_VAR 0 2
4535: PPUSH
4536: CALL_OW 313
4540: PUSH
4541: LD_VAR 0 3
4545: LESS
4546: IFFALSE 4562
// ComEnterUnit ( i , b ) ;
4548: LD_VAR 0 1
4552: PPUSH
4553: LD_VAR 0 2
4557: PPUSH
4558: CALL_OW 120
// end ;
4562: GO 4467
4564: POP
4565: POP
// end ; end ;
4566: GO 4290
4568: POP
4569: POP
// if sci then
4570: LD_VAR 0 7
4574: IFFALSE 4629
// for i in sci do
4576: LD_ADDR_VAR 0 1
4580: PUSH
4581: LD_VAR 0 7
4585: PUSH
4586: FOR_IN
4587: IFFALSE 4627
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
4589: LD_VAR 0 1
4593: PPUSH
4594: LD_INT 80
4596: PPUSH
4597: LD_INT 49
4599: PPUSH
4600: CALL_OW 297
4604: PUSH
4605: LD_INT 9
4607: GREATER
4608: IFFALSE 4625
// ComMoveXY ( i , 80 , 49 ) ;
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_INT 80
4617: PPUSH
4618: LD_INT 49
4620: PPUSH
4621: CALL_OW 111
// end ;
4625: GO 4586
4627: POP
4628: POP
// if mech then
4629: LD_VAR 0 8
4633: IFFALSE 4847
// for i in mech do
4635: LD_ADDR_VAR 0 1
4639: PUSH
4640: LD_VAR 0 8
4644: PUSH
4645: FOR_IN
4646: IFFALSE 4845
// begin hasVehicle := IsInUnit ( i ) ;
4648: LD_ADDR_VAR 0 10
4652: PUSH
4653: LD_VAR 0 1
4657: PPUSH
4658: CALL_OW 310
4662: ST_TO_ADDR
// if enemyInBase then
4663: LD_VAR 0 9
4667: IFFALSE 4763
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4669: LD_VAR 0 10
4673: PUSH
4674: LD_VAR 0 10
4678: PPUSH
4679: CALL_OW 256
4683: PUSH
4684: LD_INT 500
4686: GREATER
4687: AND
4688: IFFALSE 4716
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4690: LD_VAR 0 10
4694: PPUSH
4695: LD_VAR 0 9
4699: PPUSH
4700: LD_VAR 0 10
4704: PPUSH
4705: CALL_OW 74
4709: PPUSH
4710: CALL_OW 115
4714: GO 4761
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
4716: LD_VAR 0 10
4720: PPUSH
4721: LD_INT 86
4723: PPUSH
4724: LD_INT 49
4726: PPUSH
4727: CALL_OW 297
4731: PUSH
4732: LD_INT 8
4734: GREATER
4735: IFFALSE 4761
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
4737: LD_VAR 0 10
4741: PPUSH
4742: LD_INT 86
4744: PPUSH
4745: LD_INT 49
4747: PPUSH
4748: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
4752: LD_VAR 0 1
4756: PPUSH
4757: CALL 68709 0 1
// end end else
4761: GO 4843
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
4763: LD_VAR 0 1
4767: PPUSH
4768: LD_INT 86
4770: PPUSH
4771: LD_INT 49
4773: PPUSH
4774: CALL_OW 297
4778: PUSH
4779: LD_INT 8
4781: GREATER
4782: IFFALSE 4801
// ComMoveXY ( i , 86 , 49 ) else
4784: LD_VAR 0 1
4788: PPUSH
4789: LD_INT 86
4791: PPUSH
4792: LD_INT 49
4794: PPUSH
4795: CALL_OW 111
4799: GO 4843
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4801: LD_VAR 0 10
4805: PUSH
4806: LD_VAR 0 10
4810: PPUSH
4811: CALL_OW 256
4815: PUSH
4816: LD_INT 1000
4818: LESS
4819: AND
4820: IFFALSE 4843
// begin SetFuel ( hasVehicle , 100 ) ;
4822: LD_VAR 0 10
4826: PPUSH
4827: LD_INT 100
4829: PPUSH
4830: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4834: LD_VAR 0 1
4838: PPUSH
4839: CALL 68589 0 1
// end ; end ; end ;
4843: GO 4645
4845: POP
4846: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4847: LD_ADDR_VAR 0 4
4851: PUSH
4852: LD_INT 12
4854: PPUSH
4855: LD_INT 3
4857: PUSH
4858: LD_INT 24
4860: PUSH
4861: LD_INT 1000
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 21
4874: PUSH
4875: LD_INT 3
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PPUSH
4886: CALL_OW 70
4890: ST_TO_ADDR
// if tmp and eng then
4891: LD_VAR 0 4
4895: PUSH
4896: LD_VAR 0 6
4900: AND
4901: IFFALSE 5007
// begin for i in eng do
4903: LD_ADDR_VAR 0 1
4907: PUSH
4908: LD_VAR 0 6
4912: PUSH
4913: FOR_IN
4914: IFFALSE 5005
// if IsInUnit ( i ) then
4916: LD_VAR 0 1
4920: PPUSH
4921: CALL_OW 310
4925: IFFALSE 4938
// ComExitBuilding ( i ) else
4927: LD_VAR 0 1
4931: PPUSH
4932: CALL_OW 122
4936: GO 5003
// if GetLives ( i ) = 1000 then
4938: LD_VAR 0 1
4942: PPUSH
4943: CALL_OW 256
4947: PUSH
4948: LD_INT 1000
4950: EQUAL
4951: IFFALSE 4973
// ComRepairBuilding ( i , tmp [ 1 ] ) else
4953: LD_VAR 0 1
4957: PPUSH
4958: LD_VAR 0 4
4962: PUSH
4963: LD_INT 1
4965: ARRAY
4966: PPUSH
4967: CALL_OW 130
4971: GO 5003
// if GetLives ( i ) < 700 then
4973: LD_VAR 0 1
4977: PPUSH
4978: CALL_OW 256
4982: PUSH
4983: LD_INT 700
4985: LESS
4986: IFFALSE 5003
// ComMoveXY ( i , 80 , 49 ) ;
4988: LD_VAR 0 1
4992: PPUSH
4993: LD_INT 80
4995: PPUSH
4996: LD_INT 49
4998: PPUSH
4999: CALL_OW 111
5003: GO 4913
5005: POP
5006: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5007: LD_VAR 0 4
5011: NOT
5012: PUSH
5013: LD_VAR 0 6
5017: PPUSH
5018: LD_INT 3
5020: PUSH
5021: LD_INT 54
5023: PUSH
5024: EMPTY
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PPUSH
5031: CALL_OW 72
5035: AND
5036: IFFALSE 5125
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5038: LD_ADDR_VAR 0 1
5042: PUSH
5043: LD_VAR 0 6
5047: PPUSH
5048: LD_INT 3
5050: PUSH
5051: LD_INT 54
5053: PUSH
5054: EMPTY
5055: LIST
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PPUSH
5061: CALL_OW 72
5065: PUSH
5066: FOR_IN
5067: IFFALSE 5123
// if GetLives ( i ) < 1000 then
5069: LD_VAR 0 1
5073: PPUSH
5074: CALL_OW 256
5078: PUSH
5079: LD_INT 1000
5081: LESS
5082: IFFALSE 5101
// ComMoveXY ( i , 80 , 49 ) else
5084: LD_VAR 0 1
5088: PPUSH
5089: LD_INT 80
5091: PPUSH
5092: LD_INT 49
5094: PPUSH
5095: CALL_OW 111
5099: GO 5121
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
5101: LD_VAR 0 1
5105: PPUSH
5106: LD_INT 86
5108: PPUSH
5109: LD_INT 54
5111: PPUSH
5112: CALL_OW 428
5116: PPUSH
5117: CALL_OW 120
5121: GO 5066
5123: POP
5124: POP
// end ;
5125: PPOPN 10
5127: END
// export function PrepareOmarSquad ; var i , j , p ; begin
5128: LD_INT 0
5130: PPUSH
5131: PPUSH
5132: PPUSH
5133: PPUSH
// uc_side := 5 ;
5134: LD_ADDR_OWVAR 20
5138: PUSH
5139: LD_INT 5
5141: ST_TO_ADDR
// uc_nation := 2 ;
5142: LD_ADDR_OWVAR 21
5146: PUSH
5147: LD_INT 2
5149: ST_TO_ADDR
// omarSquad := [ ] ;
5150: LD_ADDR_EXP 52
5154: PUSH
5155: EMPTY
5156: ST_TO_ADDR
// for i := 1 to 4 do
5157: LD_ADDR_VAR 0 2
5161: PUSH
5162: DOUBLE
5163: LD_INT 1
5165: DEC
5166: ST_TO_ADDR
5167: LD_INT 4
5169: PUSH
5170: FOR_TO
5171: IFFALSE 5294
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
5173: LD_ADDR_VAR 0 3
5177: PUSH
5178: DOUBLE
5179: LD_INT 1
5181: DEC
5182: ST_TO_ADDR
5183: LD_INT 6
5185: PUSH
5186: LD_INT 2
5188: PUSH
5189: LD_INT 2
5191: PUSH
5192: LD_EXP 21
5196: PLUS
5197: PUSH
5198: LD_INT 2
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: PUSH
5207: LD_VAR 0 2
5211: ARRAY
5212: PUSH
5213: FOR_TO
5214: IFFALSE 5290
// begin PrepareHuman ( false , i , 5 ) ;
5216: LD_INT 0
5218: PPUSH
5219: LD_VAR 0 2
5223: PPUSH
5224: LD_INT 5
5226: PPUSH
5227: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
5231: LD_ADDR_EXP 52
5235: PUSH
5236: LD_EXP 52
5240: PPUSH
5241: CALL_OW 44
5245: PPUSH
5246: CALL 66889 0 2
5250: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
5251: LD_VAR 0 2
5255: PUSH
5256: LD_INT 1
5258: EQUAL
5259: PUSH
5260: LD_INT 50
5262: PPUSH
5263: CALL_OW 13
5267: AND
5268: IFFALSE 5288
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
5270: LD_EXP 52
5274: PUSH
5275: LD_EXP 52
5279: ARRAY
5280: PPUSH
5281: LD_INT 8
5283: PPUSH
5284: CALL_OW 336
// end ;
5288: GO 5213
5290: POP
5291: POP
// end ;
5292: GO 5170
5294: POP
5295: POP
// if HexInfo ( 340 , 205 ) then
5296: LD_INT 340
5298: PPUSH
5299: LD_INT 205
5301: PPUSH
5302: CALL_OW 428
5306: IFFALSE 5323
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
5308: LD_INT 340
5310: PPUSH
5311: LD_INT 205
5313: PPUSH
5314: CALL_OW 428
5318: PPUSH
5319: CALL_OW 64
// p := 0 ;
5323: LD_ADDR_VAR 0 4
5327: PUSH
5328: LD_INT 0
5330: ST_TO_ADDR
// for i in omarSquad do
5331: LD_ADDR_VAR 0 2
5335: PUSH
5336: LD_EXP 52
5340: PUSH
5341: FOR_IN
5342: IFFALSE 5543
// begin uc_direction := 4 ;
5344: LD_ADDR_OWVAR 24
5348: PUSH
5349: LD_INT 4
5351: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
5352: LD_VAR 0 2
5356: PPUSH
5357: CALL_OW 257
5361: PUSH
5362: LD_INT 3
5364: EQUAL
5365: PUSH
5366: LD_VAR 0 4
5370: PUSH
5371: LD_INT 2
5373: LESS
5374: AND
5375: IFFALSE 5504
// begin p := p + 1 ;
5377: LD_ADDR_VAR 0 4
5381: PUSH
5382: LD_VAR 0 4
5386: PUSH
5387: LD_INT 1
5389: PLUS
5390: ST_TO_ADDR
// uc_side := 5 ;
5391: LD_ADDR_OWVAR 20
5395: PUSH
5396: LD_INT 5
5398: ST_TO_ADDR
// if rand ( 0 , 1 ) then
5399: LD_INT 0
5401: PPUSH
5402: LD_INT 1
5404: PPUSH
5405: CALL_OW 12
5409: IFFALSE 5440
// begin uc_nation := 2 ;
5411: LD_ADDR_OWVAR 21
5415: PUSH
5416: LD_INT 2
5418: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
5419: LD_INT 13
5421: PPUSH
5422: LD_INT 1
5424: PPUSH
5425: LD_INT 1
5427: PPUSH
5428: LD_INT 27
5430: PPUSH
5431: LD_INT 88
5433: PPUSH
5434: CALL 34436 0 5
// end else
5438: GO 5467
// begin uc_nation := 3 ;
5440: LD_ADDR_OWVAR 21
5444: PUSH
5445: LD_INT 3
5447: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
5448: LD_INT 22
5450: PPUSH
5451: LD_INT 1
5453: PPUSH
5454: LD_INT 1
5456: PPUSH
5457: LD_INT 45
5459: PPUSH
5460: LD_INT 88
5462: PPUSH
5463: CALL 34436 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
5467: CALL_OW 45
5471: PPUSH
5472: LD_INT 13
5474: PPUSH
5475: LD_INT 0
5477: PPUSH
5478: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
5482: LD_VAR 0 2
5486: PPUSH
5487: LD_INT 340
5489: PPUSH
5490: LD_INT 205
5492: PPUSH
5493: CALL_OW 428
5497: PPUSH
5498: CALL_OW 52
// end else
5502: GO 5519
// PlaceUnitArea ( i , southSpawn , false ) ;
5504: LD_VAR 0 2
5508: PPUSH
5509: LD_INT 13
5511: PPUSH
5512: LD_INT 0
5514: PPUSH
5515: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
5519: LD_VAR 0 2
5523: PPUSH
5524: LD_INT 333
5526: PPUSH
5527: LD_INT 210
5529: PPUSH
5530: CALL_OW 111
// wait ( 0 0$2 ) ;
5534: LD_INT 70
5536: PPUSH
5537: CALL_OW 67
// end ;
5541: GO 5341
5543: POP
5544: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
5545: LD_EXP 44
5549: PPUSH
5550: LD_INT 340
5552: PPUSH
5553: LD_INT 205
5555: PPUSH
5556: LD_INT 0
5558: PPUSH
5559: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
5563: LD_EXP 44
5567: PPUSH
5568: LD_INT 333
5570: PPUSH
5571: LD_INT 206
5573: PPUSH
5574: CALL_OW 111
// wait ( 0 0$2 ) ;
5578: LD_INT 70
5580: PPUSH
5581: CALL_OW 67
// ComHold ( omarSquad ) ;
5585: LD_EXP 52
5589: PPUSH
5590: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
5594: LD_EXP 44
5598: PUSH
5599: LD_EXP 52
5603: PPUSH
5604: LD_INT 2
5606: PUSH
5607: LD_INT 25
5609: PUSH
5610: LD_INT 1
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: PUSH
5617: LD_INT 25
5619: PUSH
5620: LD_INT 8
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: LIST
5631: PPUSH
5632: CALL_OW 72
5636: UNION
5637: PUSH
5638: LD_INT 22
5640: PUSH
5641: LD_INT 5
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: PUSH
5648: LD_INT 21
5650: PUSH
5651: LD_INT 2
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: PPUSH
5662: CALL_OW 69
5666: UNION
5667: PPUSH
5668: LD_INT 315
5670: PPUSH
5671: LD_INT 214
5673: PPUSH
5674: CALL_OW 114
// wait ( 0 0$22 ) ;
5678: LD_INT 770
5680: PPUSH
5681: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
5685: LD_EXP 52
5689: PUSH
5690: LD_EXP 44
5694: UNION
5695: PPUSH
5696: LD_INT 329
5698: PPUSH
5699: LD_INT 231
5701: PPUSH
5702: CALL_OW 114
// end ;
5706: LD_VAR 0 1
5710: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
5711: LD_EXP 10
5715: IFFALSE 6798
5717: GO 5719
5719: DISABLE
5720: LD_INT 0
5722: PPUSH
5723: PPUSH
5724: PPUSH
5725: PPUSH
5726: PPUSH
5727: PPUSH
5728: PPUSH
5729: PPUSH
5730: PPUSH
5731: PPUSH
5732: PPUSH
// begin enable ;
5733: ENABLE
// if not omarSquad then
5734: LD_EXP 52
5738: NOT
5739: IFFALSE 5743
// exit ;
5741: GO 6798
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
5743: LD_ADDR_VAR 0 10
5747: PUSH
5748: LD_INT 14
5750: PPUSH
5751: LD_INT 81
5753: PUSH
5754: LD_INT 5
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PPUSH
5761: CALL_OW 70
5765: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
5766: LD_ADDR_VAR 0 6
5770: PUSH
5771: LD_EXP 52
5775: PPUSH
5776: LD_INT 2
5778: PUSH
5779: LD_INT 25
5781: PUSH
5782: LD_INT 1
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 25
5791: PUSH
5792: LD_INT 8
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: LIST
5803: PPUSH
5804: CALL_OW 72
5808: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
5809: LD_ADDR_VAR 0 7
5813: PUSH
5814: LD_EXP 52
5818: PPUSH
5819: LD_INT 25
5821: PUSH
5822: LD_INT 2
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: PPUSH
5829: CALL_OW 72
5833: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
5834: LD_ADDR_VAR 0 9
5838: PUSH
5839: LD_EXP 52
5843: PPUSH
5844: LD_INT 25
5846: PUSH
5847: LD_INT 3
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: PPUSH
5854: CALL_OW 72
5858: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
5859: LD_ADDR_VAR 0 8
5863: PUSH
5864: LD_EXP 52
5868: PPUSH
5869: LD_INT 25
5871: PUSH
5872: LD_INT 4
5874: PUSH
5875: EMPTY
5876: LIST
5877: LIST
5878: PPUSH
5879: CALL_OW 72
5883: ST_TO_ADDR
// if sol then
5884: LD_VAR 0 6
5888: IFFALSE 6252
// for i in sol do
5890: LD_ADDR_VAR 0 1
5894: PUSH
5895: LD_VAR 0 6
5899: PUSH
5900: FOR_IN
5901: IFFALSE 6250
// if not HasTask ( i ) then
5903: LD_VAR 0 1
5907: PPUSH
5908: CALL_OW 314
5912: NOT
5913: IFFALSE 6248
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
5915: LD_VAR 0 1
5919: PPUSH
5920: CALL_OW 310
5924: NOT
5925: PUSH
5926: LD_VAR 0 1
5930: PPUSH
5931: CALL_OW 256
5935: PUSH
5936: LD_INT 500
5938: LESS
5939: AND
5940: PUSH
5941: LD_VAR 0 1
5945: PPUSH
5946: LD_INT 333
5948: PPUSH
5949: LD_INT 234
5951: PPUSH
5952: CALL_OW 297
5956: PUSH
5957: LD_INT 6
5959: GREATER
5960: AND
5961: IFFALSE 5980
// begin ComMoveXY ( i , 333 , 234 ) ;
5963: LD_VAR 0 1
5967: PPUSH
5968: LD_INT 333
5970: PPUSH
5971: LD_INT 234
5973: PPUSH
5974: CALL_OW 111
// continue ;
5978: GO 5900
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
5980: LD_ADDR_VAR 0 5
5984: PUSH
5985: LD_INT 22
5987: PUSH
5988: LD_INT 5
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: LD_INT 58
5997: PUSH
5998: EMPTY
5999: LIST
6000: PUSH
6001: LD_INT 50
6003: PUSH
6004: EMPTY
6005: LIST
6006: PUSH
6007: LD_INT 2
6009: PUSH
6010: LD_INT 30
6012: PUSH
6013: LD_INT 32
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: PUSH
6020: LD_INT 30
6022: PUSH
6023: LD_INT 31
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: PPUSH
6041: CALL_OW 69
6045: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
6046: LD_VAR 0 5
6050: PUSH
6051: LD_VAR 0 1
6055: PPUSH
6056: CALL_OW 310
6060: PPUSH
6061: CALL_OW 266
6065: PUSH
6066: LD_INT 31
6068: NONEQUAL
6069: AND
6070: IFFALSE 6152
// begin for j in tmp do
6072: LD_ADDR_VAR 0 2
6076: PUSH
6077: LD_VAR 0 5
6081: PUSH
6082: FOR_IN
6083: IFFALSE 6148
// if GetTag ( j ) <> 1 then
6085: LD_VAR 0 2
6089: PPUSH
6090: CALL_OW 110
6094: PUSH
6095: LD_INT 1
6097: NONEQUAL
6098: IFFALSE 6146
// begin SetTag ( j , 1 ) ;
6100: LD_VAR 0 2
6104: PPUSH
6105: LD_INT 1
6107: PPUSH
6108: CALL_OW 109
// if IsInUnit ( i ) then
6112: LD_VAR 0 1
6116: PPUSH
6117: CALL_OW 310
6121: IFFALSE 6132
// ComExit ( i ) ;
6123: LD_VAR 0 1
6127: PPUSH
6128: CALL 67287 0 1
// AddComEnterUnit ( i , j ) ;
6132: LD_VAR 0 1
6136: PPUSH
6137: LD_VAR 0 2
6141: PPUSH
6142: CALL_OW 180
// end ;
6146: GO 6082
6148: POP
6149: POP
// end else
6150: GO 6248
// if not IsInUnit ( i ) then
6152: LD_VAR 0 1
6156: PPUSH
6157: CALL_OW 310
6161: NOT
6162: IFFALSE 6248
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
6164: LD_ADDR_VAR 0 5
6168: PUSH
6169: LD_INT 22
6171: PUSH
6172: LD_INT 5
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 50
6181: PUSH
6182: EMPTY
6183: LIST
6184: PUSH
6185: LD_INT 30
6187: PUSH
6188: LD_INT 4
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: PPUSH
6200: CALL_OW 69
6204: ST_TO_ADDR
// if tmp then
6205: LD_VAR 0 5
6209: IFFALSE 6248
// if UnitsInside ( tmp [ 1 ] ) < 6 then
6211: LD_VAR 0 5
6215: PUSH
6216: LD_INT 1
6218: ARRAY
6219: PPUSH
6220: CALL_OW 313
6224: PUSH
6225: LD_INT 6
6227: LESS
6228: IFFALSE 6248
// ComEnterUnit ( i , tmp [ 1 ] ) ;
6230: LD_VAR 0 1
6234: PPUSH
6235: LD_VAR 0 5
6239: PUSH
6240: LD_INT 1
6242: ARRAY
6243: PPUSH
6244: CALL_OW 120
// end ; end ;
6248: GO 5900
6250: POP
6251: POP
// if sci then
6252: LD_VAR 0 8
6256: IFFALSE 6311
// for i in sci do
6258: LD_ADDR_VAR 0 1
6262: PUSH
6263: LD_VAR 0 8
6267: PUSH
6268: FOR_IN
6269: IFFALSE 6309
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
6271: LD_VAR 0 1
6275: PPUSH
6276: LD_INT 333
6278: PPUSH
6279: LD_INT 234
6281: PPUSH
6282: CALL_OW 297
6286: PUSH
6287: LD_INT 9
6289: GREATER
6290: IFFALSE 6307
// ComMoveXY ( i , 333 , 234 ) ;
6292: LD_VAR 0 1
6296: PPUSH
6297: LD_INT 333
6299: PPUSH
6300: LD_INT 234
6302: PPUSH
6303: CALL_OW 111
// end ;
6307: GO 6268
6309: POP
6310: POP
// if mech then
6311: LD_VAR 0 9
6315: IFFALSE 6520
// for i in mech do
6317: LD_ADDR_VAR 0 1
6321: PUSH
6322: LD_VAR 0 9
6326: PUSH
6327: FOR_IN
6328: IFFALSE 6518
// begin hasVehicle := IsInUnit ( i ) ;
6330: LD_ADDR_VAR 0 11
6334: PUSH
6335: LD_VAR 0 1
6339: PPUSH
6340: CALL_OW 310
6344: ST_TO_ADDR
// if enemyInBase then
6345: LD_VAR 0 10
6349: IFFALSE 6436
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
6351: LD_VAR 0 11
6355: PUSH
6356: LD_VAR 0 11
6360: PPUSH
6361: CALL_OW 256
6365: PUSH
6366: LD_INT 500
6368: GREATER
6369: AND
6370: IFFALSE 6398
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
6372: LD_VAR 0 11
6376: PPUSH
6377: LD_VAR 0 10
6381: PPUSH
6382: LD_VAR 0 11
6386: PPUSH
6387: CALL_OW 74
6391: PPUSH
6392: CALL_OW 115
6396: GO 6434
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
6398: LD_VAR 0 11
6402: PPUSH
6403: LD_INT 333
6405: PPUSH
6406: LD_INT 234
6408: PPUSH
6409: CALL_OW 297
6413: PUSH
6414: LD_INT 6
6416: GREATER
6417: IFFALSE 6434
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
6419: LD_VAR 0 11
6423: PPUSH
6424: LD_INT 333
6426: PPUSH
6427: LD_INT 234
6429: PPUSH
6430: CALL_OW 111
// end else
6434: GO 6516
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
6436: LD_VAR 0 1
6440: PPUSH
6441: LD_INT 333
6443: PPUSH
6444: LD_INT 234
6446: PPUSH
6447: CALL_OW 297
6451: PUSH
6452: LD_INT 6
6454: GREATER
6455: IFFALSE 6474
// ComMoveXY ( i , 333 , 234 ) else
6457: LD_VAR 0 1
6461: PPUSH
6462: LD_INT 333
6464: PPUSH
6465: LD_INT 234
6467: PPUSH
6468: CALL_OW 111
6472: GO 6516
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
6474: LD_VAR 0 11
6478: PUSH
6479: LD_VAR 0 11
6483: PPUSH
6484: CALL_OW 256
6488: PUSH
6489: LD_INT 1000
6491: LESS
6492: AND
6493: IFFALSE 6516
// begin SetFuel ( hasVehicle , 100 ) ;
6495: LD_VAR 0 11
6499: PPUSH
6500: LD_INT 100
6502: PPUSH
6503: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
6507: LD_VAR 0 1
6511: PPUSH
6512: CALL 68589 0 1
// end ; end ; end ;
6516: GO 6327
6518: POP
6519: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6520: LD_ADDR_VAR 0 5
6524: PUSH
6525: LD_INT 14
6527: PPUSH
6528: LD_INT 3
6530: PUSH
6531: LD_INT 24
6533: PUSH
6534: LD_INT 1000
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: EMPTY
6542: LIST
6543: LIST
6544: PUSH
6545: LD_INT 21
6547: PUSH
6548: LD_INT 3
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PPUSH
6559: CALL_OW 70
6563: ST_TO_ADDR
// if tmp and eng then
6564: LD_VAR 0 5
6568: PUSH
6569: LD_VAR 0 7
6573: AND
6574: IFFALSE 6680
// begin for i in eng do
6576: LD_ADDR_VAR 0 1
6580: PUSH
6581: LD_VAR 0 7
6585: PUSH
6586: FOR_IN
6587: IFFALSE 6678
// if IsInUnit ( i ) then
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL_OW 310
6598: IFFALSE 6611
// ComExitBuilding ( i ) else
6600: LD_VAR 0 1
6604: PPUSH
6605: CALL_OW 122
6609: GO 6676
// if GetLives ( i ) = 1000 then
6611: LD_VAR 0 1
6615: PPUSH
6616: CALL_OW 256
6620: PUSH
6621: LD_INT 1000
6623: EQUAL
6624: IFFALSE 6646
// ComRepairBuilding ( i , tmp [ 1 ] ) else
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_VAR 0 5
6635: PUSH
6636: LD_INT 1
6638: ARRAY
6639: PPUSH
6640: CALL_OW 130
6644: GO 6676
// if GetLives ( i ) < 700 then
6646: LD_VAR 0 1
6650: PPUSH
6651: CALL_OW 256
6655: PUSH
6656: LD_INT 700
6658: LESS
6659: IFFALSE 6676
// ComMoveXY ( i , 333 , 234 ) ;
6661: LD_VAR 0 1
6665: PPUSH
6666: LD_INT 333
6668: PPUSH
6669: LD_INT 234
6671: PPUSH
6672: CALL_OW 111
6676: GO 6586
6678: POP
6679: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
6680: LD_VAR 0 5
6684: NOT
6685: PUSH
6686: LD_VAR 0 7
6690: PPUSH
6691: LD_INT 3
6693: PUSH
6694: LD_INT 54
6696: PUSH
6697: EMPTY
6698: LIST
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PPUSH
6704: CALL_OW 72
6708: AND
6709: IFFALSE 6798
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6711: LD_ADDR_VAR 0 1
6715: PUSH
6716: LD_VAR 0 7
6720: PPUSH
6721: LD_INT 3
6723: PUSH
6724: LD_INT 54
6726: PUSH
6727: EMPTY
6728: LIST
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: PPUSH
6734: CALL_OW 72
6738: PUSH
6739: FOR_IN
6740: IFFALSE 6796
// if GetLives ( i ) < 1000 then
6742: LD_VAR 0 1
6746: PPUSH
6747: CALL_OW 256
6751: PUSH
6752: LD_INT 1000
6754: LESS
6755: IFFALSE 6774
// ComMoveXY ( i , 333 , 234 ) else
6757: LD_VAR 0 1
6761: PPUSH
6762: LD_INT 333
6764: PPUSH
6765: LD_INT 234
6767: PPUSH
6768: CALL_OW 111
6772: GO 6794
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
6774: LD_VAR 0 1
6778: PPUSH
6779: LD_INT 341
6781: PPUSH
6782: LD_INT 232
6784: PPUSH
6785: CALL_OW 428
6789: PPUSH
6790: CALL_OW 120
6794: GO 6739
6796: POP
6797: POP
// end ;
6798: PPOPN 11
6800: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
6801: LD_EXP 44
6805: PPUSH
6806: CALL_OW 256
6810: PUSH
6811: LD_INT 1000
6813: LESS
6814: IFFALSE 6832
6816: GO 6818
6818: DISABLE
// begin enable ;
6819: ENABLE
// SetLives ( Omar , 1000 ) ;
6820: LD_EXP 44
6824: PPUSH
6825: LD_INT 1000
6827: PPUSH
6828: CALL_OW 234
// end ;
6832: END
// every 0 0$1 trigger GetLives ( Rolf ) < 1000 and rolfAttack do
6833: LD_EXP 47
6837: PPUSH
6838: CALL_OW 256
6842: PUSH
6843: LD_INT 1000
6845: LESS
6846: PUSH
6847: LD_EXP 32
6851: AND
6852: IFFALSE 6870
6854: GO 6856
6856: DISABLE
// begin enable ;
6857: ENABLE
// SetLives ( Rolf , 1000 ) ;
6858: LD_EXP 47
6862: PPUSH
6863: LD_INT 1000
6865: PPUSH
6866: CALL_OW 234
// end ;
6870: END
// every 0 0$1 trigger rolfAttack do var i , tmp , mech , path , tag , rolfCoords ;
6871: LD_EXP 32
6875: IFFALSE 7555
6877: GO 6879
6879: DISABLE
6880: LD_INT 0
6882: PPUSH
6883: PPUSH
6884: PPUSH
6885: PPUSH
6886: PPUSH
6887: PPUSH
// begin path := [ [ 215 , 162 ] , [ 195 , 163 ] , [ 174 , 162 ] , [ 145 , 163 ] , [ 127 , 163 ] ] ;
6888: LD_ADDR_VAR 0 4
6892: PUSH
6893: LD_INT 215
6895: PUSH
6896: LD_INT 162
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: LD_INT 195
6905: PUSH
6906: LD_INT 163
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PUSH
6913: LD_INT 174
6915: PUSH
6916: LD_INT 162
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PUSH
6923: LD_INT 145
6925: PUSH
6926: LD_INT 163
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 127
6935: PUSH
6936: LD_INT 163
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: ST_TO_ADDR
// rolfCoords := [ 221 , 161 ] ;
6950: LD_ADDR_VAR 0 6
6954: PUSH
6955: LD_INT 221
6957: PUSH
6958: LD_INT 161
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: ST_TO_ADDR
// tmp := Rolf union rolfSquad ;
6965: LD_ADDR_VAR 0 2
6969: PUSH
6970: LD_EXP 47
6974: PUSH
6975: LD_EXP 51
6979: UNION
6980: ST_TO_ADDR
// if not tmp then
6981: LD_VAR 0 2
6985: NOT
6986: IFFALSE 6990
// exit ;
6988: GO 7555
// ComMoveXY ( tmp , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
6990: LD_VAR 0 2
6994: PPUSH
6995: LD_VAR 0 6
6999: PUSH
7000: LD_INT 1
7002: ARRAY
7003: PPUSH
7004: LD_VAR 0 6
7008: PUSH
7009: LD_INT 2
7011: ARRAY
7012: PPUSH
7013: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7017: LD_INT 35
7019: PPUSH
7020: CALL_OW 67
// tmp := UnitFilter ( rolfSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
7024: LD_ADDR_VAR 0 2
7028: PUSH
7029: LD_EXP 51
7033: PPUSH
7034: LD_INT 3
7036: PUSH
7037: LD_INT 55
7039: PUSH
7040: EMPTY
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: LD_INT 25
7052: PUSH
7053: LD_INT 1
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 25
7062: PUSH
7063: LD_INT 8
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: LIST
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PPUSH
7079: CALL_OW 72
7083: ST_TO_ADDR
// if tmp then
7084: LD_VAR 0 2
7088: IFFALSE 7241
// begin for i in tmp do
7090: LD_ADDR_VAR 0 1
7094: PUSH
7095: LD_VAR 0 2
7099: PUSH
7100: FOR_IN
7101: IFFALSE 7239
// begin tag := GetTag ( i ) ;
7103: LD_ADDR_VAR 0 5
7107: PUSH
7108: LD_VAR 0 1
7112: PPUSH
7113: CALL_OW 110
7117: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
7118: LD_VAR 0 1
7122: PPUSH
7123: CALL_OW 256
7127: PUSH
7128: LD_INT 800
7130: LESS
7131: PUSH
7132: LD_VAR 0 5
7136: PUSH
7137: LD_INT 101
7139: LESS
7140: AND
7141: IFFALSE 7184
// begin SetTag ( i , 101 ) ;
7143: LD_VAR 0 1
7147: PPUSH
7148: LD_INT 101
7150: PPUSH
7151: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7155: LD_VAR 0 1
7159: PPUSH
7160: LD_VAR 0 6
7164: PUSH
7165: LD_INT 1
7167: ARRAY
7168: PPUSH
7169: LD_VAR 0 6
7173: PUSH
7174: LD_INT 2
7176: ARRAY
7177: PPUSH
7178: CALL_OW 111
// end else
7182: GO 7237
// if tag = 101 then
7184: LD_VAR 0 5
7188: PUSH
7189: LD_INT 101
7191: EQUAL
7192: IFFALSE 7223
// begin if GetLives ( i ) = 1000 then
7194: LD_VAR 0 1
7198: PPUSH
7199: CALL_OW 256
7203: PUSH
7204: LD_INT 1000
7206: EQUAL
7207: IFFALSE 7221
// SetTag ( i , 0 ) ;
7209: LD_VAR 0 1
7213: PPUSH
7214: LD_INT 0
7216: PPUSH
7217: CALL_OW 109
// end else
7221: GO 7237
// AgressiveMove ( i , path ) ;
7223: LD_VAR 0 1
7227: PPUSH
7228: LD_VAR 0 4
7232: PPUSH
7233: CALL 69493 0 2
// end ;
7237: GO 7100
7239: POP
7240: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
7241: LD_ADDR_VAR 0 2
7245: PUSH
7246: LD_INT 22
7248: PUSH
7249: LD_INT 8
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: LD_INT 21
7258: PUSH
7259: LD_INT 2
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 3
7268: PUSH
7269: LD_INT 34
7271: PUSH
7272: LD_INT 32
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: LIST
7287: PPUSH
7288: CALL_OW 69
7292: ST_TO_ADDR
// if not tmp then
7293: LD_VAR 0 2
7297: NOT
7298: IFFALSE 7302
// continue ;
7300: GO 7017
// for i in tmp do
7302: LD_ADDR_VAR 0 1
7306: PUSH
7307: LD_VAR 0 2
7311: PUSH
7312: FOR_IN
7313: IFFALSE 7546
// begin mech := IsDrivenBy ( i ) ;
7315: LD_ADDR_VAR 0 3
7319: PUSH
7320: LD_VAR 0 1
7324: PPUSH
7325: CALL_OW 311
7329: ST_TO_ADDR
// if not mech then
7330: LD_VAR 0 3
7334: NOT
7335: IFFALSE 7339
// continue ;
7337: GO 7312
// tag := GetTag ( i ) ;
7339: LD_ADDR_VAR 0 5
7343: PUSH
7344: LD_VAR 0 1
7348: PPUSH
7349: CALL_OW 110
7353: ST_TO_ADDR
// if GetLives ( i ) >= 600 and tag < 101 then
7354: LD_VAR 0 1
7358: PPUSH
7359: CALL_OW 256
7363: PUSH
7364: LD_INT 600
7366: GREATEREQUAL
7367: PUSH
7368: LD_VAR 0 5
7372: PUSH
7373: LD_INT 101
7375: LESS
7376: AND
7377: IFFALSE 7393
// AgressiveMove ( i , path ) ;
7379: LD_VAR 0 1
7383: PPUSH
7384: LD_VAR 0 4
7388: PPUSH
7389: CALL 69493 0 2
// if GetLives ( i ) < 600 and tag < 101 then
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 256
7402: PUSH
7403: LD_INT 600
7405: LESS
7406: PUSH
7407: LD_VAR 0 5
7411: PUSH
7412: LD_INT 101
7414: LESS
7415: AND
7416: IFFALSE 7457
// begin SetTag ( i , 101 ) ;
7418: LD_VAR 0 1
7422: PPUSH
7423: LD_INT 101
7425: PPUSH
7426: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7430: LD_VAR 0 1
7434: PPUSH
7435: LD_VAR 0 6
7439: PUSH
7440: LD_INT 1
7442: ARRAY
7443: PPUSH
7444: LD_VAR 0 6
7448: PUSH
7449: LD_INT 2
7451: ARRAY
7452: PPUSH
7453: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) < 9 and mech then
7457: LD_VAR 0 5
7461: PUSH
7462: LD_INT 101
7464: EQUAL
7465: PUSH
7466: LD_VAR 0 1
7470: PPUSH
7471: LD_VAR 0 6
7475: PUSH
7476: LD_INT 1
7478: ARRAY
7479: PPUSH
7480: LD_VAR 0 6
7484: PUSH
7485: LD_INT 2
7487: ARRAY
7488: PPUSH
7489: CALL_OW 297
7493: PUSH
7494: LD_INT 9
7496: LESS
7497: AND
7498: PUSH
7499: LD_VAR 0 3
7503: AND
7504: IFFALSE 7544
// begin if GetLives ( i ) < 1000 then
7506: LD_VAR 0 1
7510: PPUSH
7511: CALL_OW 256
7515: PUSH
7516: LD_INT 1000
7518: LESS
7519: IFFALSE 7532
// AddComRepairVehicleAndReturn ( mech ) else
7521: LD_VAR 0 3
7525: PPUSH
7526: CALL 68709 0 1
7530: GO 7544
// SetTag ( i , 0 ) ;
7532: LD_VAR 0 1
7536: PPUSH
7537: LD_INT 0
7539: PPUSH
7540: CALL_OW 109
// end ; end ;
7544: GO 7312
7546: POP
7547: POP
// until not tmp ;
7548: LD_VAR 0 2
7552: NOT
7553: IFFALSE 7017
// end ;
7555: PPOPN 6
7557: END
// every 0 0$1 trigger omarAttack do var i , cargo , tmp , tag , mech , x , path , omarAttackCoords ;
7558: LD_EXP 23
7562: IFFALSE 8867
7564: GO 7566
7566: DISABLE
7567: LD_INT 0
7569: PPUSH
7570: PPUSH
7571: PPUSH
7572: PPUSH
7573: PPUSH
7574: PPUSH
7575: PPUSH
7576: PPUSH
// begin path := [ [ 209 , 221 ] , [ 190 , 220 ] , [ 177 , 220 ] , [ 168 , 223 ] , [ 150 , 206 ] ] ;
7577: LD_ADDR_VAR 0 7
7581: PUSH
7582: LD_INT 209
7584: PUSH
7585: LD_INT 221
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: PUSH
7592: LD_INT 190
7594: PUSH
7595: LD_INT 220
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PUSH
7602: LD_INT 177
7604: PUSH
7605: LD_INT 220
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: PUSH
7612: LD_INT 168
7614: PUSH
7615: LD_INT 223
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 150
7624: PUSH
7625: LD_INT 206
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: ST_TO_ADDR
// omarAttackCoords := [ 219 , 225 , 0 ] ;
7639: LD_ADDR_VAR 0 8
7643: PUSH
7644: LD_INT 219
7646: PUSH
7647: LD_INT 225
7649: PUSH
7650: LD_INT 0
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: LIST
7657: ST_TO_ADDR
// for i := 1 to 2 do
7658: LD_ADDR_VAR 0 1
7662: PUSH
7663: DOUBLE
7664: LD_INT 1
7666: DEC
7667: ST_TO_ADDR
7668: LD_INT 2
7670: PUSH
7671: FOR_TO
7672: IFFALSE 7821
// begin uc_side := 5 ;
7674: LD_ADDR_OWVAR 20
7678: PUSH
7679: LD_INT 5
7681: ST_TO_ADDR
// uc_nation := 2 ;
7682: LD_ADDR_OWVAR 21
7686: PUSH
7687: LD_INT 2
7689: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
7690: LD_INT 14
7692: PPUSH
7693: LD_INT 1
7695: PPUSH
7696: LD_INT 1
7698: PPUSH
7699: LD_INT 32
7701: PPUSH
7702: LD_INT 80
7704: PPUSH
7705: CALL 34436 0 5
// cargo := Join ( cargo , CreateVehicle ) ;
7709: LD_ADDR_VAR 0 2
7713: PUSH
7714: LD_VAR 0 2
7718: PPUSH
7719: CALL_OW 45
7723: PPUSH
7724: CALL 66889 0 2
7728: ST_TO_ADDR
// SetDir ( cargo [ i ] , 4 ) ;
7729: LD_VAR 0 2
7733: PUSH
7734: LD_VAR 0 1
7738: ARRAY
7739: PPUSH
7740: LD_INT 4
7742: PPUSH
7743: CALL_OW 233
// PlaceUnitArea ( cargo [ i ] , omarVehiclesArea , false ) ;
7747: LD_VAR 0 2
7751: PUSH
7752: LD_VAR 0 1
7756: ARRAY
7757: PPUSH
7758: LD_INT 16
7760: PPUSH
7761: LD_INT 0
7763: PPUSH
7764: CALL_OW 49
// PrepareMechanic ( false , 4 ) ;
7768: LD_INT 0
7770: PPUSH
7771: LD_INT 4
7773: PPUSH
7774: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo [ i ] ) ;
7778: CALL_OW 44
7782: PPUSH
7783: LD_VAR 0 2
7787: PUSH
7788: LD_VAR 0 1
7792: ARRAY
7793: PPUSH
7794: CALL_OW 52
// ComMoveXY ( cargo [ i ] , 337 , 232 ) ;
7798: LD_VAR 0 2
7802: PUSH
7803: LD_VAR 0 1
7807: ARRAY
7808: PPUSH
7809: LD_INT 337
7811: PPUSH
7812: LD_INT 232
7814: PPUSH
7815: CALL_OW 111
// end ;
7819: GO 7671
7821: POP
7822: POP
// wait ( 0 0$25 ) ;
7823: LD_INT 875
7825: PPUSH
7826: CALL_OW 67
// for i := 1 to 2 do
7830: LD_ADDR_VAR 0 1
7834: PUSH
7835: DOUBLE
7836: LD_INT 1
7838: DEC
7839: ST_TO_ADDR
7840: LD_INT 2
7842: PUSH
7843: FOR_TO
7844: IFFALSE 7869
// SetCargo ( cargo [ i ] , mat_oil , 100 ) ;
7846: LD_VAR 0 2
7850: PUSH
7851: LD_VAR 0 1
7855: ARRAY
7856: PPUSH
7857: LD_INT 2
7859: PPUSH
7860: LD_INT 100
7862: PPUSH
7863: CALL_OW 290
7867: GO 7843
7869: POP
7870: POP
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
7871: LD_EXP 52
7875: PPUSH
7876: LD_INT 2
7878: PUSH
7879: LD_INT 25
7881: PUSH
7882: LD_INT 1
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 25
7891: PUSH
7892: LD_INT 8
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 72
7908: PPUSH
7909: CALL_OW 122
// wait ( 0 0$3 ) ;
7913: LD_INT 105
7915: PPUSH
7916: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
7920: LD_EXP 52
7924: PUSH
7925: LD_EXP 44
7929: UNION
7930: PPUSH
7931: LD_VAR 0 8
7935: PUSH
7936: LD_INT 1
7938: ARRAY
7939: PPUSH
7940: LD_VAR 0 8
7944: PUSH
7945: LD_INT 2
7947: ARRAY
7948: PPUSH
7949: CALL_OW 174
// wait ( 0 0$3 ) ;
7953: LD_INT 105
7955: PPUSH
7956: CALL_OW 67
// AddComMoveXY ( cargo , 218 , 217 ) ;
7960: LD_VAR 0 2
7964: PPUSH
7965: LD_INT 218
7967: PPUSH
7968: LD_INT 217
7970: PPUSH
7971: CALL_OW 171
// wait ( 1 1$00 ) ;
7975: LD_INT 2100
7977: PPUSH
7978: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7982: LD_INT 35
7984: PPUSH
7985: CALL_OW 67
// if omarAttackCoords [ 3 ] = 0 then
7989: LD_VAR 0 8
7993: PUSH
7994: LD_INT 3
7996: ARRAY
7997: PUSH
7998: LD_INT 0
8000: EQUAL
8001: IFFALSE 8106
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 168 , 229 , 12 ] ] ) = 0 then
8003: LD_INT 22
8005: PUSH
8006: LD_INT 3
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PUSH
8013: LD_INT 92
8015: PUSH
8016: LD_INT 168
8018: PUSH
8019: LD_INT 229
8021: PUSH
8022: LD_INT 12
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PPUSH
8035: CALL_OW 69
8039: PUSH
8040: LD_INT 0
8042: EQUAL
8043: IFFALSE 8106
// begin omarAttackCoords := [ 167 , 222 , 1 ] ;
8045: LD_ADDR_VAR 0 8
8049: PUSH
8050: LD_INT 167
8052: PUSH
8053: LD_INT 222
8055: PUSH
8056: LD_INT 1
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: ST_TO_ADDR
// AddComMoveXY ( Omar ^ cargo ^ UnitFilter ( omarSquad , [ f_class , 4 ] ) , 167 , 222 ) ;
8064: LD_EXP 44
8068: PUSH
8069: LD_VAR 0 2
8073: ADD
8074: PUSH
8075: LD_EXP 52
8079: PPUSH
8080: LD_INT 25
8082: PUSH
8083: LD_INT 4
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 72
8094: ADD
8095: PPUSH
8096: LD_INT 167
8098: PPUSH
8099: LD_INT 222
8101: PPUSH
8102: CALL_OW 171
// end ; tmp := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
8106: LD_ADDR_VAR 0 3
8110: PUSH
8111: LD_EXP 52
8115: PPUSH
8116: LD_INT 3
8118: PUSH
8119: LD_INT 55
8121: PUSH
8122: EMPTY
8123: LIST
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: PUSH
8129: LD_INT 2
8131: PUSH
8132: LD_INT 25
8134: PUSH
8135: LD_INT 1
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: LD_INT 25
8144: PUSH
8145: LD_INT 8
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: LIST
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PPUSH
8161: CALL_OW 72
8165: ST_TO_ADDR
// if tmp then
8166: LD_VAR 0 3
8170: IFFALSE 8383
// begin for i in tmp do
8172: LD_ADDR_VAR 0 1
8176: PUSH
8177: LD_VAR 0 3
8181: PUSH
8182: FOR_IN
8183: IFFALSE 8381
// begin tag := GetTag ( i ) ;
8185: LD_ADDR_VAR 0 4
8189: PUSH
8190: LD_VAR 0 1
8194: PPUSH
8195: CALL_OW 110
8199: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
8200: LD_VAR 0 1
8204: PPUSH
8205: CALL_OW 256
8209: PUSH
8210: LD_INT 800
8212: LESS
8213: PUSH
8214: LD_VAR 0 4
8218: PUSH
8219: LD_INT 101
8221: LESS
8222: AND
8223: IFFALSE 8266
// begin SetTag ( i , 101 ) ;
8225: LD_VAR 0 1
8229: PPUSH
8230: LD_INT 101
8232: PPUSH
8233: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8237: LD_VAR 0 1
8241: PPUSH
8242: LD_VAR 0 8
8246: PUSH
8247: LD_INT 1
8249: ARRAY
8250: PPUSH
8251: LD_VAR 0 8
8255: PUSH
8256: LD_INT 2
8258: ARRAY
8259: PPUSH
8260: CALL_OW 111
// end else
8264: GO 8379
// if tag = 101 then
8266: LD_VAR 0 4
8270: PUSH
8271: LD_INT 101
8273: EQUAL
8274: IFFALSE 8365
// begin if GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) > 10 then
8276: LD_VAR 0 1
8280: PPUSH
8281: LD_VAR 0 8
8285: PUSH
8286: LD_INT 1
8288: ARRAY
8289: PPUSH
8290: LD_VAR 0 8
8294: PUSH
8295: LD_INT 2
8297: ARRAY
8298: PPUSH
8299: CALL_OW 297
8303: PUSH
8304: LD_INT 10
8306: GREATER
8307: IFFALSE 8336
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8309: LD_VAR 0 1
8313: PPUSH
8314: LD_VAR 0 8
8318: PUSH
8319: LD_INT 1
8321: ARRAY
8322: PPUSH
8323: LD_VAR 0 8
8327: PUSH
8328: LD_INT 2
8330: ARRAY
8331: PPUSH
8332: CALL_OW 111
// if GetLives ( i ) = 1000 then
8336: LD_VAR 0 1
8340: PPUSH
8341: CALL_OW 256
8345: PUSH
8346: LD_INT 1000
8348: EQUAL
8349: IFFALSE 8363
// SetTag ( i , 0 ) ;
8351: LD_VAR 0 1
8355: PPUSH
8356: LD_INT 0
8358: PPUSH
8359: CALL_OW 109
// end else
8363: GO 8379
// AgressiveMove ( i , path ) ;
8365: LD_VAR 0 1
8369: PPUSH
8370: LD_VAR 0 7
8374: PPUSH
8375: CALL 69493 0 2
// end ;
8379: GO 8182
8381: POP
8382: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
8383: LD_ADDR_VAR 0 3
8387: PUSH
8388: LD_INT 22
8390: PUSH
8391: LD_INT 5
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: LD_INT 21
8400: PUSH
8401: LD_INT 2
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: LD_INT 3
8410: PUSH
8411: LD_INT 34
8413: PUSH
8414: LD_INT 32
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: LIST
8429: PPUSH
8430: CALL_OW 69
8434: ST_TO_ADDR
// if not tmp then
8435: LD_VAR 0 3
8439: NOT
8440: IFFALSE 8444
// continue ;
8442: GO 7982
// for i in tmp do
8444: LD_ADDR_VAR 0 1
8448: PUSH
8449: LD_VAR 0 3
8453: PUSH
8454: FOR_IN
8455: IFFALSE 8858
// begin mech := IsDrivenBy ( i ) ;
8457: LD_ADDR_VAR 0 5
8461: PUSH
8462: LD_VAR 0 1
8466: PPUSH
8467: CALL_OW 311
8471: ST_TO_ADDR
// if not mech then
8472: LD_VAR 0 5
8476: NOT
8477: IFFALSE 8481
// continue ;
8479: GO 8454
// tag := GetTag ( i ) ;
8481: LD_ADDR_VAR 0 4
8485: PUSH
8486: LD_VAR 0 1
8490: PPUSH
8491: CALL_OW 110
8495: ST_TO_ADDR
// if GetFuel ( i ) > 90 and tag = 102 then
8496: LD_VAR 0 1
8500: PPUSH
8501: CALL_OW 261
8505: PUSH
8506: LD_INT 90
8508: GREATER
8509: PUSH
8510: LD_VAR 0 4
8514: PUSH
8515: LD_INT 102
8517: EQUAL
8518: AND
8519: IFFALSE 8535
// SetTag ( i , 0 ) else
8521: LD_VAR 0 1
8525: PPUSH
8526: LD_INT 0
8528: PPUSH
8529: CALL_OW 109
8533: GO 8631
// if GetTag ( i ) = 102 then
8535: LD_VAR 0 1
8539: PPUSH
8540: CALL_OW 110
8544: PUSH
8545: LD_INT 102
8547: EQUAL
8548: IFFALSE 8631
// begin x := rand ( 1 , 2 ) ;
8550: LD_ADDR_VAR 0 6
8554: PUSH
8555: LD_INT 1
8557: PPUSH
8558: LD_INT 2
8560: PPUSH
8561: CALL_OW 12
8565: ST_TO_ADDR
// AddComMoveUnit ( i , cargo [ x ] ) ;
8566: LD_VAR 0 1
8570: PPUSH
8571: LD_VAR 0 2
8575: PUSH
8576: LD_VAR 0 6
8580: ARRAY
8581: PPUSH
8582: CALL_OW 172
// if GetCargo ( cargo [ x ] , mat_oil ) < 20 then
8586: LD_VAR 0 2
8590: PUSH
8591: LD_VAR 0 6
8595: ARRAY
8596: PPUSH
8597: LD_INT 2
8599: PPUSH
8600: CALL_OW 289
8604: PUSH
8605: LD_INT 20
8607: LESS
8608: IFFALSE 8631
// SetCargo ( cargo [ x ] , mat_oil , 100 ) ;
8610: LD_VAR 0 2
8614: PUSH
8615: LD_VAR 0 6
8619: ARRAY
8620: PPUSH
8621: LD_INT 2
8623: PPUSH
8624: LD_INT 100
8626: PPUSH
8627: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and tag < 101 then
8631: LD_VAR 0 1
8635: PPUSH
8636: CALL_OW 256
8640: PUSH
8641: LD_INT 600
8643: GREATEREQUAL
8644: PUSH
8645: LD_VAR 0 4
8649: PUSH
8650: LD_INT 101
8652: LESS
8653: AND
8654: IFFALSE 8670
// AgressiveMove ( i , path ) ;
8656: LD_VAR 0 1
8660: PPUSH
8661: LD_VAR 0 7
8665: PPUSH
8666: CALL 69493 0 2
// if GetLives ( i ) < 600 and tag < 101 then
8670: LD_VAR 0 1
8674: PPUSH
8675: CALL_OW 256
8679: PUSH
8680: LD_INT 600
8682: LESS
8683: PUSH
8684: LD_VAR 0 4
8688: PUSH
8689: LD_INT 101
8691: LESS
8692: AND
8693: IFFALSE 8734
// begin SetTag ( i , 101 ) ;
8695: LD_VAR 0 1
8699: PPUSH
8700: LD_INT 101
8702: PPUSH
8703: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8707: LD_VAR 0 1
8711: PPUSH
8712: LD_VAR 0 8
8716: PUSH
8717: LD_INT 1
8719: ARRAY
8720: PPUSH
8721: LD_VAR 0 8
8725: PUSH
8726: LD_INT 2
8728: ARRAY
8729: PPUSH
8730: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) < 9 and mech then
8734: LD_VAR 0 4
8738: PUSH
8739: LD_INT 101
8741: EQUAL
8742: PUSH
8743: LD_VAR 0 1
8747: PPUSH
8748: LD_VAR 0 8
8752: PUSH
8753: LD_INT 1
8755: ARRAY
8756: PPUSH
8757: LD_VAR 0 8
8761: PUSH
8762: LD_INT 2
8764: ARRAY
8765: PPUSH
8766: CALL_OW 297
8770: PUSH
8771: LD_INT 9
8773: LESS
8774: AND
8775: PUSH
8776: LD_VAR 0 5
8780: AND
8781: IFFALSE 8856
// begin if GetLives ( i ) < 1000 then
8783: LD_VAR 0 1
8787: PPUSH
8788: CALL_OW 256
8792: PUSH
8793: LD_INT 1000
8795: LESS
8796: IFFALSE 8809
// AddComRepairVehicleAndReturn ( mech ) else
8798: LD_VAR 0 5
8802: PPUSH
8803: CALL 68709 0 1
8807: GO 8856
// if GetFuel ( i ) <= 50 and cargo then
8809: LD_VAR 0 1
8813: PPUSH
8814: CALL_OW 261
8818: PUSH
8819: LD_INT 50
8821: LESSEQUAL
8822: PUSH
8823: LD_VAR 0 2
8827: AND
8828: IFFALSE 8844
// SetTag ( i , 102 ) else
8830: LD_VAR 0 1
8834: PPUSH
8835: LD_INT 102
8837: PPUSH
8838: CALL_OW 109
8842: GO 8856
// SetTag ( i , 0 ) ;
8844: LD_VAR 0 1
8848: PPUSH
8849: LD_INT 0
8851: PPUSH
8852: CALL_OW 109
// end ; end ;
8856: GO 8454
8858: POP
8859: POP
// until not tmp ;
8860: LD_VAR 0 3
8864: NOT
8865: IFFALSE 7982
// end ;
8867: PPOPN 8
8869: END
// export function GoForOil ; var i , tmp , data , chance , vehicle , needOil , heikeInConvoy , success ; begin
8870: LD_INT 0
8872: PPUSH
8873: PPUSH
8874: PPUSH
8875: PPUSH
8876: PPUSH
8877: PPUSH
8878: PPUSH
8879: PPUSH
8880: PPUSH
// SetAreaMapShow ( oilArea , 1 ) ;
8881: LD_INT 20
8883: PPUSH
8884: LD_INT 1
8886: PPUSH
8887: CALL_OW 424
// repeat wait ( 0 0$5 ) ;
8891: LD_INT 175
8893: PPUSH
8894: CALL_OW 67
// heikeInConvoy := false ;
8898: LD_ADDR_VAR 0 8
8902: PUSH
8903: LD_INT 0
8905: ST_TO_ADDR
// needOil := false ;
8906: LD_ADDR_VAR 0 7
8910: PUSH
8911: LD_INT 0
8913: ST_TO_ADDR
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] ] ) ;
8914: LD_ADDR_VAR 0 3
8918: PUSH
8919: LD_INT 20
8921: PPUSH
8922: LD_INT 22
8924: PUSH
8925: LD_INT 2
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PUSH
8932: LD_INT 3
8934: PUSH
8935: LD_INT 2
8937: PUSH
8938: LD_INT 34
8940: PUSH
8941: LD_INT 88
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 34
8950: PUSH
8951: LD_INT 31
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PUSH
8967: LD_INT 33
8969: PUSH
8970: LD_INT 1
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: LIST
8981: PPUSH
8982: CALL_OW 70
8986: ST_TO_ADDR
// for i in tmp do
8987: LD_ADDR_VAR 0 2
8991: PUSH
8992: LD_VAR 0 3
8996: PUSH
8997: FOR_IN
8998: IFFALSE 9083
// begin if IsDrivenBy ( i ) = Heike then
9000: LD_VAR 0 2
9004: PPUSH
9005: CALL_OW 311
9009: PUSH
9010: LD_EXP 34
9014: EQUAL
9015: IFFALSE 9034
// begin heikeInConvoy := true ;
9017: LD_ADDR_VAR 0 8
9021: PUSH
9022: LD_INT 1
9024: ST_TO_ADDR
// Query ( QHeikeConvoy ) ;
9025: LD_STRING QHeikeConvoy
9027: PPUSH
9028: CALL_OW 97
// break ;
9032: GO 9083
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 10 then
9034: LD_VAR 0 2
9038: PPUSH
9039: CALL_OW 262
9043: PUSH
9044: LD_INT 1
9046: EQUAL
9047: PUSH
9048: LD_VAR 0 2
9052: PPUSH
9053: CALL_OW 261
9057: PUSH
9058: LD_INT 10
9060: LESS
9061: AND
9062: IFFALSE 9081
// begin needOil := true ;
9064: LD_ADDR_VAR 0 7
9068: PUSH
9069: LD_INT 1
9071: ST_TO_ADDR
// Query ( QNeedOil ) ;
9072: LD_STRING QNeedOil
9074: PPUSH
9075: CALL_OW 97
// break ;
9079: GO 9083
// end ; end ;
9081: GO 8997
9083: POP
9084: POP
// if not needOil and not heikeInConvoy and UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
9085: LD_VAR 0 7
9089: NOT
9090: PUSH
9091: LD_VAR 0 8
9095: NOT
9096: AND
9097: PUSH
9098: LD_VAR 0 3
9102: PPUSH
9103: LD_INT 2
9105: PUSH
9106: LD_INT 34
9108: PUSH
9109: LD_INT 32
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: LD_INT 34
9118: PUSH
9119: LD_INT 51
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: LIST
9130: PPUSH
9131: CALL_OW 72
9135: AND
9136: IFFALSE 9153
// if Query ( QConvoy ) = 1 then
9138: LD_STRING QConvoy
9140: PPUSH
9141: CALL_OW 97
9145: PUSH
9146: LD_INT 1
9148: EQUAL
9149: IFFALSE 9153
// break ;
9151: GO 9157
// until false ;
9153: LD_INT 0
9155: IFFALSE 8891
// SetAreaMapShow ( oilArea , 0 ) ;
9157: LD_INT 20
9159: PPUSH
9160: LD_INT 0
9162: PPUSH
9163: CALL_OW 424
// data := [ ] ;
9167: LD_ADDR_VAR 0 4
9171: PUSH
9172: EMPTY
9173: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
9174: LD_ADDR_VAR 0 5
9178: PUSH
9179: LD_INT 60
9181: PUSH
9182: LD_INT 50
9184: PUSH
9185: LD_INT 40
9187: PUSH
9188: LD_INT 30
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: PUSH
9197: LD_OWVAR 67
9201: ARRAY
9202: ST_TO_ADDR
// for i in tmp do
9203: LD_ADDR_VAR 0 2
9207: PUSH
9208: LD_VAR 0 3
9212: PUSH
9213: FOR_IN
9214: IFFALSE 9311
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , GetFuel ( i ) , ] ) ;
9216: LD_ADDR_VAR 0 4
9220: PUSH
9221: LD_VAR 0 4
9225: PPUSH
9226: LD_VAR 0 2
9230: PUSH
9231: LD_VAR 0 2
9235: PPUSH
9236: CALL_OW 311
9240: PUSH
9241: LD_VAR 0 2
9245: PPUSH
9246: CALL_OW 256
9250: PUSH
9251: LD_VAR 0 2
9255: PPUSH
9256: CALL_OW 261
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: PPUSH
9267: CALL 66889 0 2
9271: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
9272: LD_VAR 0 2
9276: PPUSH
9277: CALL_OW 311
9281: PPUSH
9282: CALL_OW 64
// RemoveUnit ( i ) ;
9286: LD_VAR 0 2
9290: PPUSH
9291: CALL_OW 64
// chance := chance + 20 ;
9295: LD_ADDR_VAR 0 5
9299: PUSH
9300: LD_VAR 0 5
9304: PUSH
9305: LD_INT 20
9307: PLUS
9308: ST_TO_ADDR
// end ;
9309: GO 9213
9311: POP
9312: POP
// wait ( rand ( 0 0$45 , 2 2$30 ) ) ;
9313: LD_INT 1575
9315: PPUSH
9316: LD_INT 5250
9318: PPUSH
9319: CALL_OW 12
9323: PPUSH
9324: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9328: LD_INT 35
9330: PPUSH
9331: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
9335: LD_INT 22
9337: PUSH
9338: LD_INT 3
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: PUSH
9345: LD_INT 92
9347: PUSH
9348: LD_INT 261
9350: PUSH
9351: LD_INT 71
9353: PUSH
9354: LD_INT 12
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: PPUSH
9367: CALL_OW 69
9371: NOT
9372: PUSH
9373: LD_INT 277
9375: PPUSH
9376: LD_INT 80
9378: PPUSH
9379: CALL_OW 428
9383: NOT
9384: AND
9385: IFFALSE 9328
// for i in data do
9387: LD_ADDR_VAR 0 2
9391: PUSH
9392: LD_VAR 0 4
9396: PUSH
9397: FOR_IN
9398: IFFALSE 9799
// begin uc_nation := GetNation ( i [ 1 ] ) ;
9400: LD_ADDR_OWVAR 21
9404: PUSH
9405: LD_VAR 0 2
9409: PUSH
9410: LD_INT 1
9412: ARRAY
9413: PPUSH
9414: CALL_OW 248
9418: ST_TO_ADDR
// uc_side := 2 ;
9419: LD_ADDR_OWVAR 20
9423: PUSH
9424: LD_INT 2
9426: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
9427: LD_VAR 0 2
9431: PUSH
9432: LD_INT 1
9434: ARRAY
9435: PPUSH
9436: CALL_OW 265
9440: PPUSH
9441: LD_VAR 0 2
9445: PUSH
9446: LD_INT 1
9448: ARRAY
9449: PPUSH
9450: CALL_OW 262
9454: PPUSH
9455: LD_VAR 0 2
9459: PUSH
9460: LD_INT 1
9462: ARRAY
9463: PPUSH
9464: CALL_OW 263
9468: PPUSH
9469: LD_VAR 0 2
9473: PUSH
9474: LD_INT 1
9476: ARRAY
9477: PPUSH
9478: CALL_OW 264
9482: PPUSH
9483: LD_INT 66
9485: PPUSH
9486: CALL 34436 0 5
// vehicle := CreateVehicle ;
9490: LD_ADDR_VAR 0 6
9494: PUSH
9495: CALL_OW 45
9499: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
9500: LD_VAR 0 6
9504: PPUSH
9505: LD_INT 277
9507: PPUSH
9508: LD_INT 80
9510: PPUSH
9511: LD_INT 4
9513: PPUSH
9514: LD_INT 0
9516: PPUSH
9517: CALL 69029 0 5
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
9521: LD_VAR 0 2
9525: PUSH
9526: LD_INT 2
9528: ARRAY
9529: PPUSH
9530: LD_VAR 0 6
9534: PPUSH
9535: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
9539: LD_VAR 0 6
9543: PPUSH
9544: LD_VAR 0 2
9548: PUSH
9549: LD_INT 3
9551: ARRAY
9552: PPUSH
9553: CALL_OW 234
// success := Prob ( chance ) ;
9557: LD_ADDR_VAR 0 9
9561: PUSH
9562: LD_VAR 0 5
9566: PPUSH
9567: CALL_OW 13
9571: ST_TO_ADDR
// if success then
9572: LD_VAR 0 9
9576: IFFALSE 9658
// begin if GetEngine ( vehicle ) = engine_combustion then
9578: LD_VAR 0 6
9582: PPUSH
9583: CALL_OW 262
9587: PUSH
9588: LD_INT 1
9590: EQUAL
9591: IFFALSE 9605
// SetFuel ( vehicle , 90 ) ;
9593: LD_VAR 0 6
9597: PPUSH
9598: LD_INT 90
9600: PPUSH
9601: CALL_OW 240
// if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
9605: LD_VAR 0 6
9609: PPUSH
9610: CALL_OW 264
9614: PUSH
9615: LD_INT 32
9617: PUSH
9618: LD_INT 51
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: IN
9625: IFFALSE 9656
// begin collectedOil := collectedOil + 100 ;
9627: LD_ADDR_EXP 33
9631: PUSH
9632: LD_EXP 33
9636: PUSH
9637: LD_INT 100
9639: PLUS
9640: ST_TO_ADDR
// SetCargo ( vehicle , mat_oil , 100 ) ;
9641: LD_VAR 0 6
9645: PPUSH
9646: LD_INT 2
9648: PPUSH
9649: LD_INT 100
9651: PPUSH
9652: CALL_OW 290
// end ; end else
9656: GO 9730
// begin if i [ 3 ] > 333 then
9658: LD_VAR 0 2
9662: PUSH
9663: LD_INT 3
9665: ARRAY
9666: PUSH
9667: LD_INT 333
9669: GREATER
9670: IFFALSE 9684
// SetLives ( vehicle , 333 ) ;
9672: LD_VAR 0 6
9676: PPUSH
9677: LD_INT 333
9679: PPUSH
9680: CALL_OW 234
// if i [ 4 ] > 20 then
9684: LD_VAR 0 2
9688: PUSH
9689: LD_INT 4
9691: ARRAY
9692: PUSH
9693: LD_INT 20
9695: GREATER
9696: IFFALSE 9712
// SetFuel ( vehicle , 20 ) else
9698: LD_VAR 0 6
9702: PPUSH
9703: LD_INT 20
9705: PPUSH
9706: CALL_OW 240
9710: GO 9730
// SetFuel ( vehicle , i [ 4 ] ) ;
9712: LD_VAR 0 6
9716: PPUSH
9717: LD_VAR 0 2
9721: PUSH
9722: LD_INT 4
9724: ARRAY
9725: PPUSH
9726: CALL_OW 240
// end ; ComMoveXY ( vehicle , 250 , 119 ) ;
9730: LD_VAR 0 6
9734: PPUSH
9735: LD_INT 250
9737: PPUSH
9738: LD_INT 119
9740: PPUSH
9741: CALL_OW 111
// AddComMoveXY ( vehicle , 211 , 80 ) ;
9745: LD_VAR 0 6
9749: PPUSH
9750: LD_INT 211
9752: PPUSH
9753: LD_INT 80
9755: PPUSH
9756: CALL_OW 171
// repeat wait ( 0 0$5 ) ;
9760: LD_INT 175
9762: PPUSH
9763: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_placed ] ] ) ;
9767: LD_INT 20
9769: PPUSH
9770: LD_INT 22
9772: PUSH
9773: LD_INT 2
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: LD_INT 52
9782: PUSH
9783: EMPTY
9784: LIST
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: PPUSH
9790: CALL_OW 70
9794: NOT
9795: IFFALSE 9760
// end ;
9797: GO 9397
9799: POP
9800: POP
// wait ( 0 0$10 ) ;
9801: LD_INT 350
9803: PPUSH
9804: CALL_OW 67
// GoForOil ;
9808: CALL 8870 0 0
// end ;
9812: LD_VAR 0 1
9816: RET
// every 0 0$2 trigger FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do var i ;
9817: LD_INT 22
9819: PPUSH
9820: LD_INT 21
9822: PUSH
9823: LD_INT 2
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PUSH
9830: LD_INT 22
9832: PUSH
9833: LD_INT 5
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 58
9842: PUSH
9843: EMPTY
9844: LIST
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: LIST
9850: PPUSH
9851: CALL_OW 70
9855: IFFALSE 9924
9857: GO 9859
9859: DISABLE
9860: LD_INT 0
9862: PPUSH
// begin enable ;
9863: ENABLE
// for i in FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do
9864: LD_ADDR_VAR 0 1
9868: PUSH
9869: LD_INT 22
9871: PPUSH
9872: LD_INT 21
9874: PUSH
9875: LD_INT 2
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: LD_INT 22
9884: PUSH
9885: LD_INT 5
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 58
9894: PUSH
9895: EMPTY
9896: LIST
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: PPUSH
9903: CALL_OW 70
9907: PUSH
9908: FOR_IN
9909: IFFALSE 9922
// KillUnit ( i ) ;
9911: LD_VAR 0 1
9915: PPUSH
9916: CALL_OW 66
9920: GO 9908
9922: POP
9923: POP
// end ; end_of_file
9924: PPOPN 1
9926: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
9927: LD_INT 0
9929: PPUSH
// uc_side := side ;
9930: LD_ADDR_OWVAR 20
9934: PUSH
9935: LD_VAR 0 1
9939: ST_TO_ADDR
// uc_nation := nation ;
9940: LD_ADDR_OWVAR 21
9944: PUSH
9945: LD_VAR 0 2
9949: ST_TO_ADDR
// vc_chassis := chassis ;
9950: LD_ADDR_OWVAR 37
9954: PUSH
9955: LD_VAR 0 3
9959: ST_TO_ADDR
// vc_engine := engine ;
9960: LD_ADDR_OWVAR 39
9964: PUSH
9965: LD_VAR 0 4
9969: ST_TO_ADDR
// vc_control := control ;
9970: LD_ADDR_OWVAR 38
9974: PUSH
9975: LD_VAR 0 5
9979: ST_TO_ADDR
// vc_weapon := weapon ;
9980: LD_ADDR_OWVAR 40
9984: PUSH
9985: LD_VAR 0 6
9989: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9990: LD_ADDR_OWVAR 41
9994: PUSH
9995: LD_VAR 0 7
9999: ST_TO_ADDR
// result := CreateVehicle ;
10000: LD_ADDR_VAR 0 8
10004: PUSH
10005: CALL_OW 45
10009: ST_TO_ADDR
// end ;
10010: LD_VAR 0 8
10014: RET
// export function SayX ( units , ident ) ; var i ; begin
10015: LD_INT 0
10017: PPUSH
10018: PPUSH
// result := false ;
10019: LD_ADDR_VAR 0 3
10023: PUSH
10024: LD_INT 0
10026: ST_TO_ADDR
// if not units then
10027: LD_VAR 0 1
10031: NOT
10032: IFFALSE 10036
// exit ;
10034: GO 10090
// for i in units do
10036: LD_ADDR_VAR 0 4
10040: PUSH
10041: LD_VAR 0 1
10045: PUSH
10046: FOR_IN
10047: IFFALSE 10088
// if IsOk ( i ) then
10049: LD_VAR 0 4
10053: PPUSH
10054: CALL_OW 302
10058: IFFALSE 10086
// begin Say ( i , ident ) ;
10060: LD_VAR 0 4
10064: PPUSH
10065: LD_VAR 0 2
10069: PPUSH
10070: CALL_OW 88
// result := i ;
10074: LD_ADDR_VAR 0 3
10078: PUSH
10079: LD_VAR 0 4
10083: ST_TO_ADDR
// break ;
10084: GO 10088
// end ;
10086: GO 10046
10088: POP
10089: POP
// end ;
10090: LD_VAR 0 3
10094: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
10095: LD_INT 0
10097: PPUSH
10098: PPUSH
// InitUc ;
10099: CALL_OW 18
// InitHc ;
10103: CALL_OW 19
// uc_side := 0 ;
10107: LD_ADDR_OWVAR 20
10111: PUSH
10112: LD_INT 0
10114: ST_TO_ADDR
// uc_nation := 0 ;
10115: LD_ADDR_OWVAR 21
10119: PUSH
10120: LD_INT 0
10122: ST_TO_ADDR
// for i = 1 to amount do
10123: LD_ADDR_VAR 0 4
10127: PUSH
10128: DOUBLE
10129: LD_INT 1
10131: DEC
10132: ST_TO_ADDR
10133: LD_VAR 0 2
10137: PUSH
10138: FOR_TO
10139: IFFALSE 10221
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
10141: LD_ADDR_OWVAR 29
10145: PUSH
10146: LD_INT 9
10148: PPUSH
10149: LD_INT 12
10151: PPUSH
10152: CALL_OW 12
10156: PUSH
10157: LD_INT 9
10159: PPUSH
10160: LD_INT 12
10162: PPUSH
10163: CALL_OW 12
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
10172: LD_ADDR_OWVAR 35
10176: PUSH
10177: LD_INT 1
10179: NEG
10180: PPUSH
10181: LD_INT 1
10183: PPUSH
10184: CALL_OW 12
10188: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
10189: LD_INT 0
10191: PPUSH
10192: LD_INT 12
10194: PPUSH
10195: LD_INT 1
10197: PPUSH
10198: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
10202: CALL_OW 44
10206: PPUSH
10207: LD_VAR 0 1
10211: PPUSH
10212: LD_INT 0
10214: PPUSH
10215: CALL_OW 49
// end ;
10219: GO 10138
10221: POP
10222: POP
// InitHc ;
10223: CALL_OW 19
// end ;
10227: LD_VAR 0 3
10231: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
10232: LD_INT 0
10234: PPUSH
10235: PPUSH
// uc_side := 0 ;
10236: LD_ADDR_OWVAR 20
10240: PUSH
10241: LD_INT 0
10243: ST_TO_ADDR
// uc_nation := 0 ;
10244: LD_ADDR_OWVAR 21
10248: PUSH
10249: LD_INT 0
10251: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
10252: LD_INT 7
10254: PPUSH
10255: LD_INT 6
10257: PUSH
10258: LD_INT 5
10260: PUSH
10261: LD_INT 4
10263: PUSH
10264: LD_INT 3
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: PUSH
10273: LD_OWVAR 67
10277: ARRAY
10278: PPUSH
10279: CALL 10095 0 2
// for i = 1 to 2 do
10283: LD_ADDR_VAR 0 4
10287: PUSH
10288: DOUBLE
10289: LD_INT 1
10291: DEC
10292: ST_TO_ADDR
10293: LD_INT 2
10295: PUSH
10296: FOR_TO
10297: IFFALSE 10334
// begin vc_chassis := class_mastodont ;
10299: LD_ADDR_OWVAR 37
10303: PUSH
10304: LD_INT 31
10306: ST_TO_ADDR
// vc_control := control_rider ;
10307: LD_ADDR_OWVAR 38
10311: PUSH
10312: LD_INT 4
10314: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
10315: CALL_OW 45
10319: PPUSH
10320: LD_VAR 0 1
10324: PPUSH
10325: LD_INT 0
10327: PPUSH
10328: CALL 65806 0 3
// end ;
10332: GO 10296
10334: POP
10335: POP
// InitHc ;
10336: CALL_OW 19
// for i := 1 to 3 do
10340: LD_ADDR_VAR 0 4
10344: PUSH
10345: DOUBLE
10346: LD_INT 1
10348: DEC
10349: ST_TO_ADDR
10350: LD_INT 3
10352: PUSH
10353: FOR_TO
10354: IFFALSE 10391
// begin hc_class := class_horse ;
10356: LD_ADDR_OWVAR 28
10360: PUSH
10361: LD_INT 21
10363: ST_TO_ADDR
// hc_gallery :=  ;
10364: LD_ADDR_OWVAR 33
10368: PUSH
10369: LD_STRING 
10371: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10372: CALL_OW 44
10376: PPUSH
10377: LD_VAR 0 1
10381: PPUSH
10382: LD_INT 0
10384: PPUSH
10385: CALL_OW 49
// end ;
10389: GO 10353
10391: POP
10392: POP
// InitHc ;
10393: CALL_OW 19
// for i = 1 to 3 do
10397: LD_ADDR_VAR 0 4
10401: PUSH
10402: DOUBLE
10403: LD_INT 1
10405: DEC
10406: ST_TO_ADDR
10407: LD_INT 3
10409: PUSH
10410: FOR_TO
10411: IFFALSE 10465
// begin hc_class = class_tiger ;
10413: LD_ADDR_OWVAR 28
10417: PUSH
10418: LD_INT 14
10420: ST_TO_ADDR
// hc_gallery =  ;
10421: LD_ADDR_OWVAR 33
10425: PUSH
10426: LD_STRING 
10428: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
10429: LD_ADDR_OWVAR 35
10433: PUSH
10434: LD_INT 7
10436: NEG
10437: PPUSH
10438: LD_INT 7
10440: PPUSH
10441: CALL_OW 12
10445: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
10446: CALL_OW 44
10450: PPUSH
10451: LD_VAR 0 1
10455: PPUSH
10456: LD_INT 0
10458: PPUSH
10459: CALL 65806 0 3
// end ;
10463: GO 10410
10465: POP
10466: POP
// InitHc ;
10467: CALL_OW 19
// for i := 1 to 4 do
10471: LD_ADDR_VAR 0 4
10475: PUSH
10476: DOUBLE
10477: LD_INT 1
10479: DEC
10480: ST_TO_ADDR
10481: LD_INT 4
10483: PUSH
10484: FOR_TO
10485: IFFALSE 10522
// begin hc_class := class_phororhacos ;
10487: LD_ADDR_OWVAR 28
10491: PUSH
10492: LD_INT 18
10494: ST_TO_ADDR
// hc_gallery :=  ;
10495: LD_ADDR_OWVAR 33
10499: PUSH
10500: LD_STRING 
10502: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10503: CALL_OW 44
10507: PPUSH
10508: LD_VAR 0 1
10512: PPUSH
10513: LD_INT 0
10515: PPUSH
10516: CALL_OW 49
// end ;
10520: GO 10484
10522: POP
10523: POP
// InitHc ;
10524: CALL_OW 19
// for i := 1 to 4 do
10528: LD_ADDR_VAR 0 4
10532: PUSH
10533: DOUBLE
10534: LD_INT 1
10536: DEC
10537: ST_TO_ADDR
10538: LD_INT 4
10540: PUSH
10541: FOR_TO
10542: IFFALSE 10579
// begin hc_class := class_baggie ;
10544: LD_ADDR_OWVAR 28
10548: PUSH
10549: LD_INT 13
10551: ST_TO_ADDR
// hc_gallery :=  ;
10552: LD_ADDR_OWVAR 33
10556: PUSH
10557: LD_STRING 
10559: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10560: CALL_OW 44
10564: PPUSH
10565: LD_VAR 0 1
10569: PPUSH
10570: LD_INT 0
10572: PPUSH
10573: CALL_OW 49
// end ;
10577: GO 10541
10579: POP
10580: POP
// InitHc ;
10581: CALL_OW 19
// for i := 1 to 7 do
10585: LD_ADDR_VAR 0 4
10589: PUSH
10590: DOUBLE
10591: LD_INT 1
10593: DEC
10594: ST_TO_ADDR
10595: LD_INT 7
10597: PUSH
10598: FOR_TO
10599: IFFALSE 10636
// begin hc_class := class_frog ;
10601: LD_ADDR_OWVAR 28
10605: PUSH
10606: LD_INT 19
10608: ST_TO_ADDR
// hc_gallery :=  ;
10609: LD_ADDR_OWVAR 33
10613: PUSH
10614: LD_STRING 
10616: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
10617: CALL_OW 44
10621: PPUSH
10622: LD_VAR 0 2
10626: PPUSH
10627: LD_INT 0
10629: PPUSH
10630: CALL_OW 49
// end ;
10634: GO 10598
10636: POP
10637: POP
// end ;
10638: LD_VAR 0 3
10642: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
10643: LD_INT 0
10645: PPUSH
10646: PPUSH
10647: PPUSH
// if not observer or not unit then
10648: LD_VAR 0 1
10652: NOT
10653: PUSH
10654: LD_VAR 0 2
10658: NOT
10659: OR
10660: IFFALSE 10664
// exit ;
10662: GO 10712
// if not See ( GetSide ( observer ) , unit ) then
10664: LD_VAR 0 1
10668: PPUSH
10669: CALL_OW 255
10673: PPUSH
10674: LD_VAR 0 2
10678: PPUSH
10679: CALL_OW 292
10683: NOT
10684: IFFALSE 10688
// exit ;
10686: GO 10712
// result := GetDistUnits ( observer , unit ) < 12 ;
10688: LD_ADDR_VAR 0 3
10692: PUSH
10693: LD_VAR 0 1
10697: PPUSH
10698: LD_VAR 0 2
10702: PPUSH
10703: CALL_OW 296
10707: PUSH
10708: LD_INT 12
10710: LESS
10711: ST_TO_ADDR
// end ;
10712: LD_VAR 0 3
10716: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
10717: LD_INT 0
10719: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
10720: LD_VAR 0 2
10724: PUSH
10725: LD_INT 1
10727: ARRAY
10728: PPUSH
10729: LD_VAR 0 2
10733: PUSH
10734: LD_INT 2
10736: ARRAY
10737: PPUSH
10738: CALL_OW 488
10742: PUSH
10743: LD_VAR 0 2
10747: PUSH
10748: LD_INT 1
10750: ARRAY
10751: PPUSH
10752: LD_VAR 0 2
10756: PUSH
10757: LD_INT 2
10759: ARRAY
10760: PPUSH
10761: CALL_OW 428
10765: PUSH
10766: LD_INT 0
10768: EQUAL
10769: AND
10770: IFFALSE 10804
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
10772: LD_VAR 0 1
10776: PPUSH
10777: LD_VAR 0 2
10781: PUSH
10782: LD_INT 1
10784: ARRAY
10785: PPUSH
10786: LD_VAR 0 2
10790: PUSH
10791: LD_INT 2
10793: ARRAY
10794: PPUSH
10795: LD_VAR 0 3
10799: PPUSH
10800: CALL_OW 48
// end ;
10804: LD_VAR 0 4
10808: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
10809: LD_INT 0
10811: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
10812: LD_VAR 0 1
10816: PPUSH
10817: LD_VAR 0 2
10821: PPUSH
10822: LD_VAR 0 3
10826: PPUSH
10827: LD_VAR 0 4
10831: PPUSH
10832: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
10836: LD_VAR 0 1
10840: PPUSH
10841: LD_VAR 0 2
10845: PPUSH
10846: LD_VAR 0 3
10850: PPUSH
10851: CALL_OW 331
// end ;
10855: LD_VAR 0 5
10859: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
10860: LD_INT 0
10862: PPUSH
// if not units then
10863: LD_VAR 0 1
10867: NOT
10868: IFFALSE 10872
// exit ;
10870: GO 10955
// result := true ;
10872: LD_ADDR_VAR 0 4
10876: PUSH
10877: LD_INT 1
10879: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
10880: LD_VAR 0 1
10884: PPUSH
10885: LD_INT 26
10887: PUSH
10888: LD_INT 1
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 72
10899: PUSH
10900: LD_INT 1
10902: ARRAY
10903: PPUSH
10904: LD_VAR 0 2
10908: PPUSH
10909: CALL_OW 88
10913: NOT
10914: IFFALSE 10955
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
10916: LD_ADDR_VAR 0 4
10920: PUSH
10921: LD_VAR 0 1
10925: PPUSH
10926: LD_INT 26
10928: PUSH
10929: LD_INT 2
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PPUSH
10936: CALL_OW 72
10940: PUSH
10941: LD_INT 1
10943: ARRAY
10944: PPUSH
10945: LD_VAR 0 3
10949: PPUSH
10950: CALL_OW 88
10954: ST_TO_ADDR
// end ;
10955: LD_VAR 0 4
10959: RET
// export function SeeGroup ( side , group ) ; var i ; begin
10960: LD_INT 0
10962: PPUSH
10963: PPUSH
// if not group then
10964: LD_VAR 0 2
10968: NOT
10969: IFFALSE 10973
// exit ;
10971: GO 11018
// for i in group do
10973: LD_ADDR_VAR 0 4
10977: PUSH
10978: LD_VAR 0 2
10982: PUSH
10983: FOR_IN
10984: IFFALSE 11016
// if See ( side , i ) then
10986: LD_VAR 0 1
10990: PPUSH
10991: LD_VAR 0 4
10995: PPUSH
10996: CALL_OW 292
11000: IFFALSE 11014
// begin result := true ;
11002: LD_ADDR_VAR 0 3
11006: PUSH
11007: LD_INT 1
11009: ST_TO_ADDR
// exit ;
11010: POP
11011: POP
11012: GO 11018
// end ;
11014: GO 10983
11016: POP
11017: POP
// end ; end_of_file
11018: LD_VAR 0 3
11022: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
11023: LD_INT 0
11025: PPUSH
11026: PPUSH
11027: PPUSH
11028: PPUSH
11029: PPUSH
11030: PPUSH
11031: PPUSH
// uc_side := 3 ;
11032: LD_ADDR_OWVAR 20
11036: PUSH
11037: LD_INT 3
11039: ST_TO_ADDR
// uc_nation := 3 ;
11040: LD_ADDR_OWVAR 21
11044: PUSH
11045: LD_INT 3
11047: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
11048: LD_ADDR_EXP 53
11052: PUSH
11053: LD_STRING Morozov
11055: PPUSH
11056: CALL_OW 25
11060: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
11061: LD_EXP 53
11065: PPUSH
11066: LD_INT 52
11068: PPUSH
11069: CALL_OW 52
// if not gaidarKilled then
11073: LD_EXP 7
11077: NOT
11078: IFFALSE 11111
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
11080: LD_ADDR_EXP 54
11084: PUSH
11085: LD_STRING Gaydar
11087: PPUSH
11088: LD_INT 0
11090: PPUSH
11091: LD_STRING 
11093: PPUSH
11094: CALL 29421 0 3
11098: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
11099: LD_EXP 54
11103: PPUSH
11104: LD_INT 52
11106: PPUSH
11107: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
11111: LD_INT 52
11113: PPUSH
11114: LD_STRING lenin
11116: PPUSH
11117: CALL_OW 500
// ruOutsiders := [ ] ;
11121: LD_ADDR_EXP 56
11125: PUSH
11126: EMPTY
11127: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
11128: LD_ADDR_EXP 58
11132: PUSH
11133: EMPTY
11134: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
11135: LD_ADDR_EXP 59
11139: PUSH
11140: EMPTY
11141: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
11142: LD_ADDR_EXP 60
11146: PUSH
11147: EMPTY
11148: ST_TO_ADDR
// ruAttackers := [ ] ;
11149: LD_ADDR_EXP 61
11153: PUSH
11154: EMPTY
11155: ST_TO_ADDR
// waveStrength := 0 ;
11156: LD_ADDR_EXP 62
11160: PUSH
11161: LD_INT 0
11163: ST_TO_ADDR
// if not gaidarKilled then
11164: LD_EXP 7
11168: NOT
11169: IFFALSE 11179
// waveStrength := 2 ;
11171: LD_ADDR_EXP 62
11175: PUSH
11176: LD_INT 2
11178: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
11179: LD_ADDR_VAR 0 7
11183: PUSH
11184: LD_INT 22
11186: PUSH
11187: LD_INT 3
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: LD_INT 21
11196: PUSH
11197: LD_INT 3
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PPUSH
11208: CALL_OW 69
11212: ST_TO_ADDR
// for i in tmp do
11213: LD_ADDR_VAR 0 2
11217: PUSH
11218: LD_VAR 0 7
11222: PUSH
11223: FOR_IN
11224: IFFALSE 11261
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
11226: LD_VAR 0 2
11230: PPUSH
11231: LD_INT 5
11233: PUSH
11234: LD_INT 6
11236: PUSH
11237: LD_INT 7
11239: PUSH
11240: LD_INT 8
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: PUSH
11249: LD_OWVAR 67
11253: ARRAY
11254: PPUSH
11255: CALL_OW 241
11259: GO 11223
11261: POP
11262: POP
// for i := 1 to 3 do
11263: LD_ADDR_VAR 0 2
11267: PUSH
11268: DOUBLE
11269: LD_INT 1
11271: DEC
11272: ST_TO_ADDR
11273: LD_INT 3
11275: PUSH
11276: FOR_TO
11277: IFFALSE 11315
// begin PrepareHuman ( false , 1 , 0 ) ;
11279: LD_INT 0
11281: PPUSH
11282: LD_INT 1
11284: PPUSH
11285: LD_INT 0
11287: PPUSH
11288: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
11292: CALL_OW 44
11296: PPUSH
11297: LD_INT 75
11299: PPUSH
11300: LD_INT 49
11302: PPUSH
11303: LD_INT 3
11305: PPUSH
11306: LD_INT 0
11308: PPUSH
11309: CALL_OW 50
// end ;
11313: GO 11276
11315: POP
11316: POP
// for i := 1 to 4 do
11317: LD_ADDR_VAR 0 2
11321: PUSH
11322: DOUBLE
11323: LD_INT 1
11325: DEC
11326: ST_TO_ADDR
11327: LD_INT 4
11329: PUSH
11330: FOR_TO
11331: IFFALSE 11377
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
11333: LD_INT 0
11335: PPUSH
11336: LD_INT 1
11338: PPUSH
11339: LD_INT 2
11341: PPUSH
11342: CALL_OW 12
11346: PPUSH
11347: LD_INT 0
11349: PPUSH
11350: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
11354: CALL_OW 44
11358: PPUSH
11359: LD_INT 330
11361: PPUSH
11362: LD_INT 231
11364: PPUSH
11365: LD_INT 5
11367: PPUSH
11368: LD_INT 0
11370: PPUSH
11371: CALL_OW 50
// end ;
11375: GO 11330
11377: POP
11378: POP
// hc_class := 1 ;
11379: LD_ADDR_OWVAR 28
11383: PUSH
11384: LD_INT 1
11386: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
11387: CALL_OW 44
11391: PPUSH
11392: LD_INT 324
11394: PPUSH
11395: LD_INT 219
11397: PPUSH
11398: CALL_OW 428
11402: PPUSH
11403: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
11407: CALL_OW 44
11411: PPUSH
11412: LD_INT 316
11414: PPUSH
11415: LD_INT 223
11417: PPUSH
11418: CALL_OW 428
11422: PPUSH
11423: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
11427: LD_ADDR_VAR 0 7
11431: PUSH
11432: LD_INT 172
11434: PPUSH
11435: LD_INT 198
11437: PPUSH
11438: CALL_OW 428
11442: PPUSH
11443: CALL_OW 274
11447: PUSH
11448: LD_INT 189
11450: PPUSH
11451: LD_INT 156
11453: PPUSH
11454: CALL_OW 428
11458: PPUSH
11459: CALL_OW 274
11463: PUSH
11464: LD_INT 341
11466: PPUSH
11467: LD_INT 232
11469: PPUSH
11470: CALL_OW 428
11474: PPUSH
11475: CALL_OW 274
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: ST_TO_ADDR
// for i in tmp do
11485: LD_ADDR_VAR 0 2
11489: PUSH
11490: LD_VAR 0 7
11494: PUSH
11495: FOR_IN
11496: IFFALSE 11530
// begin SetResourceType ( i , mat_cans , 200 ) ;
11498: LD_VAR 0 2
11502: PPUSH
11503: LD_INT 1
11505: PPUSH
11506: LD_INT 200
11508: PPUSH
11509: CALL_OW 277
// SetResourceType ( i , mat_oil , 300 ) ;
11513: LD_VAR 0 2
11517: PPUSH
11518: LD_INT 2
11520: PPUSH
11521: LD_INT 300
11523: PPUSH
11524: CALL_OW 277
// end ;
11528: GO 11495
11530: POP
11531: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
11532: LD_ADDR_VAR 0 7
11536: PUSH
11537: LD_INT 177
11539: PUSH
11540: LD_INT 114
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: LD_INT 138
11549: PUSH
11550: LD_INT 96
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: ST_TO_ADDR
// for i := 1 to tmp do
11561: LD_ADDR_VAR 0 2
11565: PUSH
11566: DOUBLE
11567: LD_INT 1
11569: DEC
11570: ST_TO_ADDR
11571: LD_VAR 0 7
11575: PUSH
11576: FOR_TO
11577: IFFALSE 11660
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
11579: LD_INT 0
11581: PPUSH
11582: LD_INT 9
11584: PPUSH
11585: LD_INT 6
11587: PPUSH
11588: CALL_OW 380
// un := CreateHuman ;
11592: LD_ADDR_VAR 0 5
11596: PUSH
11597: CALL_OW 44
11601: ST_TO_ADDR
// SetDir ( un , 2 ) ;
11602: LD_VAR 0 5
11606: PPUSH
11607: LD_INT 2
11609: PPUSH
11610: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
11614: LD_VAR 0 5
11618: PPUSH
11619: LD_VAR 0 7
11623: PUSH
11624: LD_VAR 0 2
11628: ARRAY
11629: PUSH
11630: LD_INT 1
11632: ARRAY
11633: PPUSH
11634: LD_VAR 0 7
11638: PUSH
11639: LD_VAR 0 2
11643: ARRAY
11644: PUSH
11645: LD_INT 2
11647: ARRAY
11648: PPUSH
11649: CALL_OW 428
11653: PPUSH
11654: CALL_OW 52
// end ;
11658: GO 11576
11660: POP
11661: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
11662: LD_ADDR_VAR 0 7
11666: PUSH
11667: LD_INT 198
11669: PUSH
11670: LD_INT 158
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 203
11679: PUSH
11680: LD_INT 166
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 181
11689: PUSH
11690: LD_INT 209
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 178
11699: PUSH
11700: LD_INT 196
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 181
11709: PUSH
11710: LD_INT 212
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: ST_TO_ADDR
// for i := 1 to tmp do
11724: LD_ADDR_VAR 0 2
11728: PUSH
11729: DOUBLE
11730: LD_INT 1
11732: DEC
11733: ST_TO_ADDR
11734: LD_VAR 0 7
11738: PUSH
11739: FOR_TO
11740: IFFALSE 11861
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
11742: LD_INT 0
11744: PPUSH
11745: LD_INT 1
11747: PPUSH
11748: LD_INT 4
11750: PUSH
11751: LD_INT 5
11753: PUSH
11754: LD_INT 6
11756: PUSH
11757: LD_INT 7
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: PUSH
11766: LD_OWVAR 67
11770: ARRAY
11771: PPUSH
11772: CALL_OW 380
// un := CreateHuman ;
11776: LD_ADDR_VAR 0 5
11780: PUSH
11781: CALL_OW 44
11785: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
11786: LD_ADDR_VAR 0 4
11790: PUSH
11791: LD_VAR 0 7
11795: PUSH
11796: LD_VAR 0 2
11800: ARRAY
11801: PUSH
11802: LD_INT 1
11804: ARRAY
11805: PPUSH
11806: LD_VAR 0 7
11810: PUSH
11811: LD_VAR 0 2
11815: ARRAY
11816: PUSH
11817: LD_INT 2
11819: ARRAY
11820: PPUSH
11821: CALL_OW 428
11825: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
11826: LD_VAR 0 5
11830: PPUSH
11831: LD_VAR 0 4
11835: PPUSH
11836: CALL 62137 0 1
11840: PPUSH
11841: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
11845: LD_VAR 0 5
11849: PPUSH
11850: LD_VAR 0 4
11854: PPUSH
11855: CALL_OW 52
// end ;
11859: GO 11739
11861: POP
11862: POP
// for i := 1 to 3 do
11863: LD_ADDR_VAR 0 2
11867: PUSH
11868: DOUBLE
11869: LD_INT 1
11871: DEC
11872: ST_TO_ADDR
11873: LD_INT 3
11875: PUSH
11876: FOR_TO
11877: IFFALSE 11932
// begin InitHc ;
11879: CALL_OW 19
// uc_nation := 0 ;
11883: LD_ADDR_OWVAR 21
11887: PUSH
11888: LD_INT 0
11890: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
11891: LD_ADDR_OWVAR 28
11895: PUSH
11896: LD_INT 16
11898: ST_TO_ADDR
// un := CreateHuman ;
11899: LD_ADDR_VAR 0 5
11903: PUSH
11904: CALL_OW 44
11908: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
11909: LD_VAR 0 5
11913: PPUSH
11914: LD_INT 194
11916: PPUSH
11917: LD_INT 164
11919: PPUSH
11920: LD_INT 6
11922: PPUSH
11923: LD_INT 0
11925: PPUSH
11926: CALL_OW 50
// end ;
11930: GO 11876
11932: POP
11933: POP
// uc_nation := 3 ;
11934: LD_ADDR_OWVAR 21
11938: PUSH
11939: LD_INT 3
11941: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
11942: LD_INT 24
11944: PPUSH
11945: LD_INT 1
11947: PPUSH
11948: LD_INT 1
11950: PPUSH
11951: LD_INT 44
11953: PPUSH
11954: LD_INT 10
11956: PPUSH
11957: CALL 34436 0 5
// un := CreateVehicle ;
11961: LD_ADDR_VAR 0 5
11965: PUSH
11966: CALL_OW 45
11970: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 166 , 1 , false ) ;
11971: LD_VAR 0 5
11975: PPUSH
11976: LD_INT 199
11978: PPUSH
11979: LD_INT 166
11981: PPUSH
11982: LD_INT 1
11984: PPUSH
11985: LD_INT 0
11987: PPUSH
11988: CALL 69029 0 5
// ComHold ( un ) ;
11992: LD_VAR 0 5
11996: PPUSH
11997: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
12001: LD_INT 0
12003: PPUSH
12004: LD_INT 3
12006: PPUSH
12007: LD_INT 4
12009: PPUSH
12010: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12014: CALL_OW 44
12018: PPUSH
12019: LD_VAR 0 5
12023: PPUSH
12024: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12028: LD_INT 24
12030: PPUSH
12031: LD_INT 1
12033: PPUSH
12034: LD_INT 1
12036: PPUSH
12037: LD_INT 45
12039: PPUSH
12040: LD_INT 10
12042: PPUSH
12043: CALL 34436 0 5
// un := CreateVehicle ;
12047: LD_ADDR_VAR 0 5
12051: PUSH
12052: CALL_OW 45
12056: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
12057: LD_VAR 0 5
12061: PPUSH
12062: LD_INT 129
12064: PPUSH
12065: LD_INT 93
12067: PPUSH
12068: LD_INT 1
12070: PPUSH
12071: LD_INT 0
12073: PPUSH
12074: CALL 69029 0 5
// ComHold ( un ) ;
12078: LD_VAR 0 5
12082: PPUSH
12083: CALL_OW 140
// if Difficulty > 1 then
12087: LD_OWVAR 67
12091: PUSH
12092: LD_INT 1
12094: GREATER
12095: IFFALSE 12183
// begin PrepareHuman ( false , 3 , 4 ) ;
12097: LD_INT 0
12099: PPUSH
12100: LD_INT 3
12102: PPUSH
12103: LD_INT 4
12105: PPUSH
12106: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12110: CALL_OW 44
12114: PPUSH
12115: LD_VAR 0 5
12119: PPUSH
12120: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12124: LD_INT 24
12126: PPUSH
12127: LD_INT 1
12129: PPUSH
12130: LD_INT 1
12132: PPUSH
12133: LD_INT 45
12135: PPUSH
12136: LD_INT 10
12138: PPUSH
12139: CALL 34436 0 5
// un := CreateVehicle ;
12143: LD_ADDR_VAR 0 5
12147: PUSH
12148: CALL_OW 45
12152: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
12153: LD_VAR 0 5
12157: PPUSH
12158: LD_INT 200
12160: PPUSH
12161: LD_INT 173
12163: PPUSH
12164: LD_INT 1
12166: PPUSH
12167: LD_INT 0
12169: PPUSH
12170: CALL 69029 0 5
// ComHold ( un ) ;
12174: LD_VAR 0 5
12178: PPUSH
12179: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
12183: LD_INT 0
12185: PPUSH
12186: LD_INT 3
12188: PPUSH
12189: LD_INT 4
12191: PPUSH
12192: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12196: CALL_OW 44
12200: PPUSH
12201: LD_VAR 0 5
12205: PPUSH
12206: CALL_OW 52
// bc_type := b_armoury ;
12210: LD_ADDR_OWVAR 42
12214: PUSH
12215: LD_INT 4
12217: ST_TO_ADDR
// if Difficulty > 1 then
12218: LD_OWVAR 67
12222: PUSH
12223: LD_INT 1
12225: GREATER
12226: IFFALSE 12236
// bc_type := b_barracks ;
12228: LD_ADDR_OWVAR 42
12232: PUSH
12233: LD_INT 5
12235: ST_TO_ADDR
// bc_level := 6 ;
12236: LD_ADDR_OWVAR 43
12240: PUSH
12241: LD_INT 6
12243: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
12244: LD_INT 120
12246: PPUSH
12247: LD_INT 100
12249: PPUSH
12250: LD_INT 5
12252: PPUSH
12253: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
12257: LD_ADDR_VAR 0 2
12261: PUSH
12262: DOUBLE
12263: LD_INT 1
12265: DEC
12266: ST_TO_ADDR
12267: LD_INT 3
12269: PUSH
12270: LD_INT 3
12272: PUSH
12273: LD_INT 4
12275: PUSH
12276: LD_INT 4
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: PUSH
12285: LD_OWVAR 67
12289: ARRAY
12290: PUSH
12291: FOR_TO
12292: IFFALSE 12350
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
12294: LD_INT 0
12296: PPUSH
12297: LD_INT 1
12299: PUSH
12300: LD_INT 1
12302: PUSH
12303: LD_INT 9
12305: PUSH
12306: LD_INT 9
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: PUSH
12315: LD_OWVAR 67
12319: ARRAY
12320: PPUSH
12321: LD_INT 5
12323: PPUSH
12324: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
12328: CALL_OW 44
12332: PPUSH
12333: LD_INT 120
12335: PPUSH
12336: LD_INT 100
12338: PPUSH
12339: CALL_OW 428
12343: PPUSH
12344: CALL_OW 52
// end ;
12348: GO 12291
12350: POP
12351: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
12352: LD_ADDR_VAR 0 7
12356: PUSH
12357: LD_INT 135
12359: PUSH
12360: LD_INT 100
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 137
12369: PUSH
12370: LD_INT 92
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: ST_TO_ADDR
// for i := 1 to tmp do
12381: LD_ADDR_VAR 0 2
12385: PUSH
12386: DOUBLE
12387: LD_INT 1
12389: DEC
12390: ST_TO_ADDR
12391: LD_VAR 0 7
12395: PUSH
12396: FOR_TO
12397: IFFALSE 12567
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
12399: LD_INT 22
12401: PUSH
12402: LD_INT 22
12404: PUSH
12405: LD_INT 24
12407: PUSH
12408: LD_INT 24
12410: PUSH
12411: LD_INT 24
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: PUSH
12421: LD_OWVAR 67
12425: PUSH
12426: LD_INT 0
12428: PPUSH
12429: LD_INT 1
12431: PPUSH
12432: CALL_OW 12
12436: PLUS
12437: ARRAY
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: LD_INT 44
12447: PPUSH
12448: LD_INT 25
12450: PPUSH
12451: CALL 34436 0 5
// veh := CreateVehicle ;
12455: LD_ADDR_VAR 0 6
12459: PUSH
12460: CALL_OW 45
12464: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12465: LD_VAR 0 6
12469: PPUSH
12470: LD_INT 2
12472: PPUSH
12473: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
12477: LD_VAR 0 6
12481: PPUSH
12482: LD_VAR 0 7
12486: PUSH
12487: LD_VAR 0 2
12491: ARRAY
12492: PUSH
12493: LD_INT 1
12495: ARRAY
12496: PPUSH
12497: LD_VAR 0 7
12501: PUSH
12502: LD_VAR 0 2
12506: ARRAY
12507: PUSH
12508: LD_INT 2
12510: ARRAY
12511: PPUSH
12512: LD_INT 0
12514: PPUSH
12515: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
12519: LD_INT 0
12521: PPUSH
12522: LD_INT 3
12524: PPUSH
12525: LD_INT 6
12527: PPUSH
12528: CALL_OW 380
// un := CreateHuman ;
12532: LD_ADDR_VAR 0 5
12536: PUSH
12537: CALL_OW 44
12541: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12542: LD_VAR 0 5
12546: PPUSH
12547: LD_VAR 0 6
12551: PPUSH
12552: CALL_OW 52
// ComHold ( veh ) ;
12556: LD_VAR 0 6
12560: PPUSH
12561: CALL_OW 140
// end ;
12565: GO 12396
12567: POP
12568: POP
// tmp := [ 191 , 122 ] ;
12569: LD_ADDR_VAR 0 7
12573: PUSH
12574: LD_INT 191
12576: PUSH
12577: LD_INT 122
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
12584: LD_INT 24
12586: PPUSH
12587: LD_INT 1
12589: PPUSH
12590: LD_INT 1
12592: PPUSH
12593: LD_INT 44
12595: PPUSH
12596: LD_INT 30
12598: PPUSH
12599: CALL 34436 0 5
// ruBlockadeTank := CreateVehicle ;
12603: LD_ADDR_EXP 55
12607: PUSH
12608: CALL_OW 45
12612: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
12613: LD_EXP 55
12617: PPUSH
12618: LD_INT 2
12620: PPUSH
12621: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
12625: LD_EXP 55
12629: PPUSH
12630: LD_INT 191
12632: PPUSH
12633: LD_INT 122
12635: PPUSH
12636: LD_INT 0
12638: PPUSH
12639: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
12643: LD_INT 1
12645: PPUSH
12646: LD_INT 5
12648: PUSH
12649: LD_INT 6
12651: PUSH
12652: LD_INT 7
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: LIST
12659: PUSH
12660: LD_OWVAR 67
12664: PUSH
12665: LD_INT 1
12667: MINUS
12668: ARRAY
12669: PPUSH
12670: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
12674: CALL_OW 44
12678: PPUSH
12679: LD_EXP 55
12683: PPUSH
12684: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
12688: LD_EXP 55
12692: PPUSH
12693: CALL_OW 140
// ruBlockadeSquad := [ ] ;
12697: LD_ADDR_EXP 57
12701: PUSH
12702: EMPTY
12703: ST_TO_ADDR
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
12704: LD_ADDR_VAR 0 2
12708: PUSH
12709: DOUBLE
12710: LD_INT 1
12712: DEC
12713: ST_TO_ADDR
12714: LD_INT 2
12716: PUSH
12717: LD_INT 2
12719: PUSH
12720: LD_INT 3
12722: PUSH
12723: LD_INT 3
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: PUSH
12732: LD_OWVAR 67
12736: ARRAY
12737: PUSH
12738: FOR_TO
12739: IFFALSE 12855
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
12741: LD_INT 0
12743: PPUSH
12744: LD_INT 1
12746: PPUSH
12747: LD_INT 4
12749: PUSH
12750: LD_INT 5
12752: PUSH
12753: LD_INT 6
12755: PUSH
12756: LD_INT 7
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: PUSH
12765: LD_OWVAR 67
12769: ARRAY
12770: PPUSH
12771: CALL_OW 380
// un := CreateHuman ;
12775: LD_ADDR_VAR 0 5
12779: PUSH
12780: CALL_OW 44
12784: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
12785: LD_VAR 0 5
12789: PPUSH
12790: LD_INT 9
12792: PPUSH
12793: LD_INT 0
12795: PPUSH
12796: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
12800: LD_VAR 0 5
12804: PPUSH
12805: LD_INT 198
12807: PPUSH
12808: LD_INT 129
12810: PPUSH
12811: CALL_OW 118
// AddComCrawl ( un ) ;
12815: LD_VAR 0 5
12819: PPUSH
12820: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12824: LD_ADDR_EXP 57
12828: PUSH
12829: LD_EXP 57
12833: PPUSH
12834: LD_EXP 57
12838: PUSH
12839: LD_INT 1
12841: PLUS
12842: PPUSH
12843: LD_VAR 0 5
12847: PPUSH
12848: CALL_OW 1
12852: ST_TO_ADDR
// end ;
12853: GO 12738
12855: POP
12856: POP
// PrepareHuman ( false , 4 , 5 ) ;
12857: LD_INT 0
12859: PPUSH
12860: LD_INT 4
12862: PPUSH
12863: LD_INT 5
12865: PPUSH
12866: CALL_OW 380
// un := CreateHuman ;
12870: LD_ADDR_VAR 0 5
12874: PUSH
12875: CALL_OW 44
12879: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
12880: LD_VAR 0 5
12884: PPUSH
12885: LD_INT 179
12887: PPUSH
12888: LD_INT 113
12890: PPUSH
12891: LD_INT 0
12893: PPUSH
12894: CALL_OW 48
// ComHold ( un ) ;
12898: LD_VAR 0 5
12902: PPUSH
12903: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12907: LD_ADDR_EXP 57
12911: PUSH
12912: LD_EXP 57
12916: PPUSH
12917: LD_EXP 57
12921: PUSH
12922: LD_INT 1
12924: PLUS
12925: PPUSH
12926: LD_VAR 0 5
12930: PPUSH
12931: CALL_OW 1
12935: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
12936: LD_ADDR_VAR 0 7
12940: PUSH
12941: LD_INT 167
12943: PPUSH
12944: LD_INT 243
12946: PPUSH
12947: CALL_OW 428
12951: PPUSH
12952: CALL_OW 274
12956: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
12957: LD_VAR 0 7
12961: PPUSH
12962: LD_INT 1
12964: PPUSH
12965: LD_INT 1000
12967: PPUSH
12968: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
12972: LD_VAR 0 7
12976: PPUSH
12977: LD_INT 2
12979: PPUSH
12980: LD_INT 400
12982: PPUSH
12983: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
12987: LD_ADDR_VAR 0 7
12991: PUSH
12992: LD_INT 169
12994: PPUSH
12995: LD_INT 229
12997: PPUSH
12998: CALL_OW 428
13002: ST_TO_ADDR
// for i := 1 to 3 do
13003: LD_ADDR_VAR 0 2
13007: PUSH
13008: DOUBLE
13009: LD_INT 1
13011: DEC
13012: ST_TO_ADDR
13013: LD_INT 3
13015: PUSH
13016: FOR_TO
13017: IFFALSE 13108
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13019: LD_INT 0
13021: PPUSH
13022: LD_INT 1
13024: PPUSH
13025: LD_INT 4
13027: PUSH
13028: LD_INT 5
13030: PUSH
13031: LD_INT 5
13033: PUSH
13034: LD_INT 6
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: PUSH
13043: LD_OWVAR 67
13047: ARRAY
13048: PPUSH
13049: CALL_OW 380
// un := CreateHuman ;
13053: LD_ADDR_VAR 0 5
13057: PUSH
13058: CALL_OW 44
13062: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
13063: LD_VAR 0 5
13067: PPUSH
13068: LD_VAR 0 7
13072: PPUSH
13073: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13077: LD_ADDR_EXP 58
13081: PUSH
13082: LD_EXP 58
13086: PPUSH
13087: LD_EXP 58
13091: PUSH
13092: LD_INT 1
13094: PLUS
13095: PPUSH
13096: LD_VAR 0 5
13100: PPUSH
13101: CALL_OW 1
13105: ST_TO_ADDR
// end ;
13106: GO 13016
13108: POP
13109: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
13110: LD_ADDR_VAR 0 7
13114: PUSH
13115: LD_INT 165
13117: PUSH
13118: LD_INT 227
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: LD_INT 173
13127: PUSH
13128: LD_INT 231
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: ST_TO_ADDR
// for i := 1 to tmp do
13139: LD_ADDR_VAR 0 2
13143: PUSH
13144: DOUBLE
13145: LD_INT 1
13147: DEC
13148: ST_TO_ADDR
13149: LD_VAR 0 7
13153: PUSH
13154: FOR_TO
13155: IFFALSE 13276
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13157: LD_INT 0
13159: PPUSH
13160: LD_INT 1
13162: PPUSH
13163: LD_INT 4
13165: PUSH
13166: LD_INT 5
13168: PUSH
13169: LD_INT 5
13171: PUSH
13172: LD_INT 6
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: PUSH
13181: LD_OWVAR 67
13185: ARRAY
13186: PPUSH
13187: CALL_OW 380
// un := CreateHuman ;
13191: LD_ADDR_VAR 0 5
13195: PUSH
13196: CALL_OW 44
13200: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
13201: LD_VAR 0 5
13205: PPUSH
13206: LD_VAR 0 7
13210: PUSH
13211: LD_VAR 0 2
13215: ARRAY
13216: PUSH
13217: LD_INT 1
13219: ARRAY
13220: PPUSH
13221: LD_VAR 0 7
13225: PUSH
13226: LD_VAR 0 2
13230: ARRAY
13231: PUSH
13232: LD_INT 2
13234: ARRAY
13235: PPUSH
13236: CALL_OW 428
13240: PPUSH
13241: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13245: LD_ADDR_EXP 58
13249: PUSH
13250: LD_EXP 58
13254: PPUSH
13255: LD_EXP 58
13259: PUSH
13260: LD_INT 1
13262: PLUS
13263: PPUSH
13264: LD_VAR 0 5
13268: PPUSH
13269: CALL_OW 1
13273: ST_TO_ADDR
// end ;
13274: GO 13154
13276: POP
13277: POP
// for i := 1 to 2 do
13278: LD_ADDR_VAR 0 2
13282: PUSH
13283: DOUBLE
13284: LD_INT 1
13286: DEC
13287: ST_TO_ADDR
13288: LD_INT 2
13290: PUSH
13291: FOR_TO
13292: IFFALSE 13347
// begin InitHc ;
13294: CALL_OW 19
// uc_nation := 0 ;
13298: LD_ADDR_OWVAR 21
13302: PUSH
13303: LD_INT 0
13305: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
13306: LD_ADDR_OWVAR 28
13310: PUSH
13311: LD_INT 16
13313: ST_TO_ADDR
// un := CreateHuman ;
13314: LD_ADDR_VAR 0 5
13318: PUSH
13319: CALL_OW 44
13323: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
13324: LD_VAR 0 5
13328: PPUSH
13329: LD_INT 166
13331: PPUSH
13332: LD_INT 233
13334: PPUSH
13335: LD_INT 2
13337: PPUSH
13338: LD_INT 0
13340: PPUSH
13341: CALL_OW 50
// end ;
13345: GO 13291
13347: POP
13348: POP
// uc_nation := 3 ;
13349: LD_ADDR_OWVAR 21
13353: PUSH
13354: LD_INT 3
13356: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
13357: LD_ADDR_VAR 0 7
13361: PUSH
13362: LD_INT 71
13364: PUSH
13365: LD_INT 52
13367: PUSH
13368: LD_INT 11
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: LIST
13375: ST_TO_ADDR
// for i in tmp do
13376: LD_ADDR_VAR 0 2
13380: PUSH
13381: LD_VAR 0 7
13385: PUSH
13386: FOR_IN
13387: IFFALSE 13431
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
13389: LD_VAR 0 2
13393: PPUSH
13394: CALL_OW 274
13398: PPUSH
13399: LD_INT 1
13401: PPUSH
13402: LD_INT 3000
13404: PPUSH
13405: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
13409: LD_VAR 0 2
13413: PPUSH
13414: CALL_OW 274
13418: PPUSH
13419: LD_INT 2
13421: PPUSH
13422: LD_INT 600
13424: PPUSH
13425: CALL_OW 277
// end ;
13429: GO 13386
13431: POP
13432: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
13433: LD_ADDR_VAR 0 7
13437: PUSH
13438: LD_INT 41
13440: PUSH
13441: LD_INT 57
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 38
13450: PUSH
13451: LD_INT 55
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 50
13460: PUSH
13461: LD_INT 73
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: LD_INT 51
13470: PUSH
13471: LD_INT 65
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 82
13480: PUSH
13481: LD_INT 93
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 87
13490: PUSH
13491: LD_INT 100
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: LD_INT 91
13500: PUSH
13501: LD_INT 109
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 84
13510: PUSH
13511: LD_INT 120
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 113
13520: PUSH
13521: LD_INT 153
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 123
13530: PUSH
13531: LD_INT 171
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 125
13540: PUSH
13541: LD_INT 178
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 125
13550: PUSH
13551: LD_INT 188
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: LD_INT 125
13560: PUSH
13561: LD_INT 201
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: LD_INT 33
13570: PUSH
13571: LD_INT 60
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 76
13580: PUSH
13581: LD_INT 95
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: LD_INT 84
13590: PUSH
13591: LD_INT 111
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 112
13600: PUSH
13601: LD_INT 165
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: ST_TO_ADDR
// for i := 1 to tmp do
13627: LD_ADDR_VAR 0 2
13631: PUSH
13632: DOUBLE
13633: LD_INT 1
13635: DEC
13636: ST_TO_ADDR
13637: LD_VAR 0 7
13641: PUSH
13642: FOR_TO
13643: IFFALSE 13890
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
13645: LD_ADDR_VAR 0 4
13649: PUSH
13650: LD_VAR 0 7
13654: PUSH
13655: LD_VAR 0 2
13659: ARRAY
13660: PUSH
13661: LD_INT 1
13663: ARRAY
13664: PPUSH
13665: LD_VAR 0 7
13669: PUSH
13670: LD_VAR 0 2
13674: ARRAY
13675: PUSH
13676: LD_INT 2
13678: ARRAY
13679: PPUSH
13680: CALL_OW 428
13684: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
13685: LD_VAR 0 4
13689: PPUSH
13690: CALL_OW 266
13694: PUSH
13695: LD_INT 4
13697: PUSH
13698: LD_INT 5
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: IN
13705: IFFALSE 13801
// begin for j := 1 to Difficulty do
13707: LD_ADDR_VAR 0 3
13711: PUSH
13712: DOUBLE
13713: LD_INT 1
13715: DEC
13716: ST_TO_ADDR
13717: LD_OWVAR 67
13721: PUSH
13722: FOR_TO
13723: IFFALSE 13797
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13725: LD_INT 0
13727: PPUSH
13728: LD_INT 1
13730: PPUSH
13731: LD_INT 4
13733: PUSH
13734: LD_INT 5
13736: PUSH
13737: LD_INT 5
13739: PUSH
13740: LD_INT 6
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: PUSH
13749: LD_OWVAR 67
13753: ARRAY
13754: PPUSH
13755: CALL_OW 380
// un := CreateHuman ;
13759: LD_ADDR_VAR 0 5
13763: PUSH
13764: CALL_OW 44
13768: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13769: LD_VAR 0 5
13773: PPUSH
13774: LD_VAR 0 4
13778: PPUSH
13779: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
13783: LD_VAR 0 5
13787: PPUSH
13788: LD_INT 9
13790: PPUSH
13791: CALL_OW 336
// end ;
13795: GO 13722
13797: POP
13798: POP
// end else
13799: GO 13859
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13801: LD_INT 0
13803: PPUSH
13804: LD_INT 1
13806: PPUSH
13807: LD_INT 4
13809: PUSH
13810: LD_INT 5
13812: PUSH
13813: LD_INT 5
13815: PUSH
13816: LD_INT 6
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: PUSH
13825: LD_OWVAR 67
13829: ARRAY
13830: PPUSH
13831: CALL_OW 380
// un := CreateHuman ;
13835: LD_ADDR_VAR 0 5
13839: PUSH
13840: CALL_OW 44
13844: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13845: LD_VAR 0 5
13849: PPUSH
13850: LD_VAR 0 4
13854: PPUSH
13855: CALL_OW 52
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13859: LD_ADDR_EXP 59
13863: PUSH
13864: LD_EXP 59
13868: PPUSH
13869: LD_EXP 59
13873: PUSH
13874: LD_INT 1
13876: PLUS
13877: PPUSH
13878: LD_VAR 0 5
13882: PPUSH
13883: CALL_OW 1
13887: ST_TO_ADDR
// end ;
13888: GO 13642
13890: POP
13891: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
13892: LD_ADDR_VAR 0 4
13896: PUSH
13897: LD_INT 10
13899: PPUSH
13900: LD_INT 22
13902: PUSH
13903: LD_INT 3
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 30
13912: PUSH
13913: LD_INT 32
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 58
13922: PUSH
13923: EMPTY
13924: LIST
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: LIST
13930: PPUSH
13931: CALL_OW 70
13935: PUSH
13936: FOR_IN
13937: IFFALSE 14071
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
13939: LD_INT 40
13941: PUSH
13942: LD_INT 50
13944: PUSH
13945: LD_INT 75
13947: PUSH
13948: LD_INT 80
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: PUSH
13957: LD_OWVAR 67
13961: ARRAY
13962: PUSH
13963: LD_EXP 7
13967: PUSH
13968: LD_INT 10
13970: MUL
13971: MINUS
13972: PPUSH
13973: CALL_OW 13
13977: NOT
13978: IFFALSE 13982
// continue ;
13980: GO 13936
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13982: LD_INT 0
13984: PPUSH
13985: LD_INT 1
13987: PPUSH
13988: LD_INT 4
13990: PUSH
13991: LD_INT 5
13993: PUSH
13994: LD_INT 5
13996: PUSH
13997: LD_INT 6
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: PUSH
14006: LD_OWVAR 67
14010: ARRAY
14011: PPUSH
14012: CALL_OW 380
// un := CreateHuman ;
14016: LD_ADDR_VAR 0 5
14020: PUSH
14021: CALL_OW 44
14025: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
14026: LD_VAR 0 5
14030: PPUSH
14031: LD_VAR 0 4
14035: PPUSH
14036: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14040: LD_ADDR_EXP 59
14044: PUSH
14045: LD_EXP 59
14049: PPUSH
14050: LD_EXP 59
14054: PUSH
14055: LD_INT 1
14057: PLUS
14058: PPUSH
14059: LD_VAR 0 5
14063: PPUSH
14064: CALL_OW 1
14068: ST_TO_ADDR
// end ;
14069: GO 13936
14071: POP
14072: POP
// for i := 1 to 5 do
14073: LD_ADDR_VAR 0 2
14077: PUSH
14078: DOUBLE
14079: LD_INT 1
14081: DEC
14082: ST_TO_ADDR
14083: LD_INT 5
14085: PUSH
14086: FOR_TO
14087: IFFALSE 14185
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14089: LD_INT 0
14091: PPUSH
14092: LD_INT 2
14094: PPUSH
14095: LD_INT 4
14097: PUSH
14098: LD_INT 5
14100: PUSH
14101: LD_INT 5
14103: PUSH
14104: LD_INT 6
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: PUSH
14113: LD_OWVAR 67
14117: ARRAY
14118: PPUSH
14119: CALL_OW 380
// un := CreateHuman ;
14123: LD_ADDR_VAR 0 5
14127: PUSH
14128: CALL_OW 44
14132: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
14133: LD_VAR 0 5
14137: PPUSH
14138: LD_INT 66
14140: PPUSH
14141: LD_INT 101
14143: PPUSH
14144: LD_INT 3
14146: PPUSH
14147: LD_INT 0
14149: PPUSH
14150: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14154: LD_ADDR_EXP 59
14158: PUSH
14159: LD_EXP 59
14163: PPUSH
14164: LD_EXP 59
14168: PUSH
14169: LD_INT 1
14171: PLUS
14172: PPUSH
14173: LD_VAR 0 5
14177: PPUSH
14178: CALL_OW 1
14182: ST_TO_ADDR
// end ;
14183: GO 14086
14185: POP
14186: POP
// tmp := [ ruFac1 , ruFac2 ] ;
14187: LD_ADDR_VAR 0 7
14191: PUSH
14192: LD_INT 72
14194: PUSH
14195: LD_INT 12
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: ST_TO_ADDR
// for i := 1 to tmp do
14202: LD_ADDR_VAR 0 2
14206: PUSH
14207: DOUBLE
14208: LD_INT 1
14210: DEC
14211: ST_TO_ADDR
14212: LD_VAR 0 7
14216: PUSH
14217: FOR_TO
14218: IFFALSE 14335
// for j := 1 to 6 do
14220: LD_ADDR_VAR 0 3
14224: PUSH
14225: DOUBLE
14226: LD_INT 1
14228: DEC
14229: ST_TO_ADDR
14230: LD_INT 6
14232: PUSH
14233: FOR_TO
14234: IFFALSE 14331
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14236: LD_INT 0
14238: PPUSH
14239: LD_INT 3
14241: PPUSH
14242: LD_INT 4
14244: PUSH
14245: LD_INT 5
14247: PUSH
14248: LD_INT 5
14250: PUSH
14251: LD_INT 6
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: PUSH
14260: LD_OWVAR 67
14264: ARRAY
14265: PPUSH
14266: CALL_OW 380
// un := CreateHuman ;
14270: LD_ADDR_VAR 0 5
14274: PUSH
14275: CALL_OW 44
14279: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
14280: LD_VAR 0 5
14284: PPUSH
14285: LD_VAR 0 7
14289: PUSH
14290: LD_VAR 0 2
14294: ARRAY
14295: PPUSH
14296: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14300: LD_ADDR_EXP 59
14304: PUSH
14305: LD_EXP 59
14309: PPUSH
14310: LD_EXP 59
14314: PUSH
14315: LD_INT 1
14317: PLUS
14318: PPUSH
14319: LD_VAR 0 5
14323: PPUSH
14324: CALL_OW 1
14328: ST_TO_ADDR
// end ;
14329: GO 14233
14331: POP
14332: POP
14333: GO 14217
14335: POP
14336: POP
// for i := 1 to 3 do
14337: LD_ADDR_VAR 0 2
14341: PUSH
14342: DOUBLE
14343: LD_INT 1
14345: DEC
14346: ST_TO_ADDR
14347: LD_INT 3
14349: PUSH
14350: FOR_TO
14351: IFFALSE 14440
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14353: LD_INT 0
14355: PPUSH
14356: LD_INT 4
14358: PPUSH
14359: LD_INT 4
14361: PUSH
14362: LD_INT 5
14364: PUSH
14365: LD_INT 5
14367: PUSH
14368: LD_INT 6
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: PUSH
14377: LD_OWVAR 67
14381: ARRAY
14382: PPUSH
14383: CALL_OW 380
// un := CreateHuman ;
14387: LD_ADDR_VAR 0 5
14391: PUSH
14392: CALL_OW 44
14396: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
14397: LD_VAR 0 5
14401: PPUSH
14402: LD_INT 17
14404: PPUSH
14405: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14409: LD_ADDR_EXP 59
14413: PUSH
14414: LD_EXP 59
14418: PPUSH
14419: LD_EXP 59
14423: PUSH
14424: LD_INT 1
14426: PLUS
14427: PPUSH
14428: LD_VAR 0 5
14432: PPUSH
14433: CALL_OW 1
14437: ST_TO_ADDR
// end ;
14438: GO 14350
14440: POP
14441: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
14442: LD_ADDR_VAR 0 2
14446: PUSH
14447: DOUBLE
14448: LD_INT 1
14450: DEC
14451: ST_TO_ADDR
14452: LD_INT 2
14454: PUSH
14455: LD_INT 3
14457: PUSH
14458: LD_INT 3
14460: PUSH
14461: LD_INT 3
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: PUSH
14470: LD_OWVAR 67
14474: ARRAY
14475: PUSH
14476: FOR_TO
14477: IFFALSE 14597
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
14479: LD_INT 22
14481: PPUSH
14482: LD_INT 1
14484: PPUSH
14485: LD_INT 1
14487: PPUSH
14488: LD_INT 52
14490: PPUSH
14491: LD_INT 100
14493: PPUSH
14494: CALL 34436 0 5
// veh := CreateVehicle ;
14498: LD_ADDR_VAR 0 6
14502: PUSH
14503: CALL_OW 45
14507: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
14508: LD_INT 0
14510: PPUSH
14511: LD_INT 3
14513: PPUSH
14514: LD_INT 4
14516: PPUSH
14517: CALL_OW 380
// un := CreateHuman ;
14521: LD_ADDR_VAR 0 5
14525: PUSH
14526: CALL_OW 44
14530: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
14531: LD_VAR 0 6
14535: PPUSH
14536: LD_INT 107
14538: PPUSH
14539: LD_INT 182
14541: PPUSH
14542: LD_INT 4
14544: PPUSH
14545: LD_INT 0
14547: PPUSH
14548: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
14552: LD_VAR 0 5
14556: PPUSH
14557: LD_VAR 0 6
14561: PPUSH
14562: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14566: LD_ADDR_EXP 59
14570: PUSH
14571: LD_EXP 59
14575: PPUSH
14576: LD_EXP 59
14580: PUSH
14581: LD_INT 1
14583: PLUS
14584: PPUSH
14585: LD_VAR 0 5
14589: PPUSH
14590: CALL_OW 1
14594: ST_TO_ADDR
// end ;
14595: GO 14476
14597: POP
14598: POP
// InitHc ;
14599: CALL_OW 19
// for i := 1 to [ 3 , 5 , 6 , 8 ] [ Difficulty ] do
14603: LD_ADDR_VAR 0 2
14607: PUSH
14608: DOUBLE
14609: LD_INT 1
14611: DEC
14612: ST_TO_ADDR
14613: LD_INT 3
14615: PUSH
14616: LD_INT 5
14618: PUSH
14619: LD_INT 6
14621: PUSH
14622: LD_INT 8
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: PUSH
14631: LD_OWVAR 67
14635: ARRAY
14636: PUSH
14637: FOR_TO
14638: IFFALSE 14733
// begin uc_nation := 0 ;
14640: LD_ADDR_OWVAR 21
14644: PUSH
14645: LD_INT 0
14647: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
14648: LD_ADDR_OWVAR 28
14652: PUSH
14653: LD_INT 15
14655: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
14656: LD_ADDR_OWVAR 31
14660: PUSH
14661: LD_INT 3
14663: PUSH
14664: LD_INT 0
14666: PUSH
14667: LD_INT 0
14669: PUSH
14670: LD_INT 0
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: ST_TO_ADDR
// un := CreateHuman ;
14679: LD_ADDR_VAR 0 5
14683: PUSH
14684: CALL_OW 44
14688: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
14689: LD_VAR 0 5
14693: PPUSH
14694: LD_INT 269
14696: PUSH
14697: LD_INT 300
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: LD_VAR 0 2
14708: PUSH
14709: LD_INT 2
14711: MOD
14712: PUSH
14713: LD_INT 1
14715: PLUS
14716: ARRAY
14717: PPUSH
14718: LD_INT 182
14720: PPUSH
14721: LD_INT 4
14723: PPUSH
14724: LD_INT 0
14726: PPUSH
14727: CALL_OW 50
// end ;
14731: GO 14637
14733: POP
14734: POP
// uc_nation := 3 ;
14735: LD_ADDR_OWVAR 21
14739: PUSH
14740: LD_INT 3
14742: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14743: LD_EXP 8
14747: PUSH
14748: LD_INT 10
14750: PUSH
14751: LD_INT 8
14753: PUSH
14754: LD_INT 6
14756: PUSH
14757: LD_INT 5
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: PUSH
14766: LD_OWVAR 67
14770: ARRAY
14771: LESS
14772: IFFALSE 14851
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
14774: LD_INT 21
14776: PPUSH
14777: LD_INT 1
14779: PPUSH
14780: LD_INT 1
14782: PPUSH
14783: LD_INT 51
14785: PPUSH
14786: LD_INT 12
14788: PPUSH
14789: CALL 34436 0 5
// veh := CreateVehicle ;
14793: LD_ADDR_VAR 0 6
14797: PUSH
14798: CALL_OW 45
14802: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
14803: LD_VAR 0 6
14807: PPUSH
14808: LD_INT 269
14810: PPUSH
14811: LD_INT 66
14813: PPUSH
14814: LD_INT 4
14816: PPUSH
14817: LD_INT 0
14819: PPUSH
14820: CALL 69029 0 5
// SetLives ( veh , 333 ) ;
14824: LD_VAR 0 6
14828: PPUSH
14829: LD_INT 333
14831: PPUSH
14832: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
14836: LD_VAR 0 6
14840: PPUSH
14841: LD_INT 2
14843: PPUSH
14844: LD_INT 100
14846: PPUSH
14847: CALL_OW 290
// end ; end ;
14851: LD_VAR 0 1
14855: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
14856: LD_EXP 55
14860: PUSH
14861: LD_EXP 55
14865: PPUSH
14866: CALL_OW 255
14870: PUSH
14871: LD_INT 3
14873: EQUAL
14874: AND
14875: IFFALSE 15038
14877: GO 14879
14879: DISABLE
14880: LD_INT 0
14882: PPUSH
// begin enable ;
14883: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
14884: LD_INT 81
14886: PUSH
14887: LD_INT 3
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: LD_INT 91
14896: PUSH
14897: LD_EXP 55
14901: PUSH
14902: LD_INT 15
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: LIST
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PPUSH
14914: CALL_OW 69
14918: IFFALSE 14998
// begin if not IsDrivenBy ( ruBlockadeTank ) then
14920: LD_EXP 55
14924: PPUSH
14925: CALL_OW 311
14929: NOT
14930: IFFALSE 14996
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
14932: LD_ADDR_VAR 0 1
14936: PUSH
14937: LD_INT 22
14939: PUSH
14940: LD_INT 3
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 21
14949: PUSH
14950: LD_INT 1
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PPUSH
14961: CALL_OW 69
14965: PPUSH
14966: LD_EXP 55
14970: PPUSH
14971: CALL_OW 74
14975: ST_TO_ADDR
// if driver then
14976: LD_VAR 0 1
14980: IFFALSE 14996
// ComEnterUnit ( driver , ruBlockadeTank ) ;
14982: LD_VAR 0 1
14986: PPUSH
14987: LD_EXP 55
14991: PPUSH
14992: CALL_OW 120
// end ; exit ;
14996: GO 15038
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
14998: LD_EXP 55
15002: PPUSH
15003: CALL_OW 256
15007: PUSH
15008: LD_INT 1000
15010: LESS
15011: PUSH
15012: LD_EXP 55
15016: PPUSH
15017: CALL_OW 311
15021: AND
15022: IFFALSE 15038
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
15024: LD_EXP 55
15028: PPUSH
15029: CALL_OW 311
15033: PPUSH
15034: CALL 68589 0 1
// end ;
15038: PPOPN 1
15040: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
15041: LD_EXP 57
15045: PPUSH
15046: LD_INT 3
15048: PUSH
15049: LD_INT 24
15051: PUSH
15052: LD_INT 1000
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PPUSH
15063: CALL_OW 72
15067: PUSH
15068: LD_EXP 57
15072: PPUSH
15073: LD_INT 25
15075: PUSH
15076: LD_INT 4
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 50
15085: PUSH
15086: EMPTY
15087: LIST
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PPUSH
15093: CALL_OW 72
15097: AND
15098: IFFALSE 15286
15100: GO 15102
15102: DISABLE
15103: LD_INT 0
15105: PPUSH
15106: PPUSH
15107: PPUSH
// begin enable ;
15108: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
15109: LD_ADDR_VAR 0 3
15113: PUSH
15114: LD_EXP 57
15118: PPUSH
15119: LD_INT 3
15121: PUSH
15122: LD_INT 24
15124: PUSH
15125: LD_INT 1000
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PUSH
15132: EMPTY
15133: LIST
15134: LIST
15135: PPUSH
15136: CALL_OW 72
15140: PPUSH
15141: LD_INT 1
15143: PPUSH
15144: CALL 68829 0 2
15148: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
15149: LD_ADDR_VAR 0 2
15153: PUSH
15154: LD_EXP 57
15158: PPUSH
15159: LD_INT 25
15161: PUSH
15162: LD_INT 4
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PUSH
15169: LD_INT 50
15171: PUSH
15172: EMPTY
15173: LIST
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: PPUSH
15179: CALL_OW 72
15183: PUSH
15184: LD_INT 1
15186: ARRAY
15187: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
15188: LD_VAR 0 2
15192: PPUSH
15193: LD_VAR 0 3
15197: PUSH
15198: LD_INT 1
15200: ARRAY
15201: PPUSH
15202: CALL 64182 0 2
15206: NOT
15207: IFFALSE 15286
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
15209: LD_VAR 0 3
15213: PUSH
15214: LD_INT 1
15216: ARRAY
15217: PPUSH
15218: LD_INT 9
15220: PPUSH
15221: CALL_OW 308
15225: NOT
15226: IFFALSE 15244
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
15228: LD_VAR 0 3
15232: PUSH
15233: LD_INT 1
15235: ARRAY
15236: PPUSH
15237: LD_INT 9
15239: PPUSH
15240: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
15244: LD_VAR 0 2
15248: PPUSH
15249: LD_VAR 0 3
15253: PUSH
15254: LD_INT 1
15256: ARRAY
15257: PPUSH
15258: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
15262: LD_VAR 0 2
15266: PPUSH
15267: LD_INT 179
15269: PPUSH
15270: LD_INT 113
15272: PPUSH
15273: CALL_OW 171
// AddComHold ( sci ) ;
15277: LD_VAR 0 2
15281: PPUSH
15282: CALL_OW 200
// end ; end ;
15286: PPOPN 3
15288: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
15289: LD_INT 2
15291: PPUSH
15292: LD_INT 52
15294: PPUSH
15295: CALL_OW 292
15299: IFFALSE 15404
15301: GO 15303
15303: DISABLE
15304: LD_INT 0
15306: PPUSH
15307: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
15308: LD_ADDR_VAR 0 2
15312: PUSH
15313: LD_EXP 59
15317: PPUSH
15318: LD_INT 25
15320: PUSH
15321: LD_INT 1
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 50
15330: PUSH
15331: EMPTY
15332: LIST
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PPUSH
15338: CALL_OW 72
15342: ST_TO_ADDR
// if not tmp then
15343: LD_VAR 0 2
15347: NOT
15348: IFFALSE 15352
// exit ;
15350: GO 15404
// for i in tmp do
15352: LD_ADDR_VAR 0 1
15356: PUSH
15357: LD_VAR 0 2
15361: PUSH
15362: FOR_IN
15363: IFFALSE 15402
// begin if IsInUnit ( i ) then
15365: LD_VAR 0 1
15369: PPUSH
15370: CALL_OW 310
15374: IFFALSE 15385
// ComExitBuilding ( i ) ;
15376: LD_VAR 0 1
15380: PPUSH
15381: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
15385: LD_VAR 0 1
15389: PPUSH
15390: LD_INT 84
15392: PPUSH
15393: LD_INT 133
15395: PPUSH
15396: CALL_OW 174
// end ;
15400: GO 15362
15402: POP
15403: POP
// end ;
15404: PPOPN 2
15406: END
// every 0 0$10 trigger leninSpotted do var i , tmp , weapon ;
15407: LD_EXP 14
15411: IFFALSE 15592
15413: GO 15415
15415: DISABLE
15416: LD_INT 0
15418: PPUSH
15419: PPUSH
15420: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
15421: LD_ADDR_VAR 0 2
15425: PUSH
15426: LD_INT 72
15428: PUSH
15429: LD_INT 12
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
15436: LD_ADDR_VAR 0 3
15440: PUSH
15441: LD_INT 44
15443: PUSH
15444: LD_INT 43
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: LD_INT 45
15453: PUSH
15454: LD_INT 44
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: LD_INT 45
15463: PUSH
15464: LD_INT 46
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 45
15473: PUSH
15474: LD_INT 46
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: PUSH
15487: LD_OWVAR 67
15491: ARRAY
15492: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
15493: LD_ADDR_VAR 0 1
15497: PUSH
15498: DOUBLE
15499: LD_INT 1
15501: DEC
15502: ST_TO_ADDR
15503: LD_INT 1
15505: PUSH
15506: LD_INT 2
15508: PUSH
15509: LD_INT 2
15511: PUSH
15512: LD_INT 3
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: PUSH
15521: LD_OWVAR 67
15525: ARRAY
15526: PUSH
15527: FOR_TO
15528: IFFALSE 15590
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
15530: LD_VAR 0 2
15534: PPUSH
15535: LD_INT 22
15537: PUSH
15538: LD_INT 23
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: LD_VAR 0 1
15549: PUSH
15550: LD_INT 2
15552: MOD
15553: PUSH
15554: LD_INT 1
15556: PLUS
15557: ARRAY
15558: PPUSH
15559: LD_INT 1
15561: PPUSH
15562: LD_INT 1
15564: PPUSH
15565: LD_VAR 0 3
15569: PUSH
15570: LD_VAR 0 1
15574: PUSH
15575: LD_INT 2
15577: MOD
15578: PUSH
15579: LD_INT 1
15581: PLUS
15582: ARRAY
15583: PPUSH
15584: CALL_OW 185
15588: GO 15527
15590: POP
15591: POP
// end ;
15592: PPOPN 3
15594: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
15595: LD_EXP 11
15599: IFFALSE 16748
15601: GO 15603
15603: DISABLE
15604: LD_INT 0
15606: PPUSH
15607: PPUSH
15608: PPUSH
15609: PPUSH
15610: PPUSH
15611: PPUSH
// begin enable ;
15612: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
15613: LD_ADDR_VAR 0 6
15617: PUSH
15618: LD_INT 10
15620: PPUSH
15621: LD_INT 81
15623: PUSH
15624: LD_INT 3
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PPUSH
15631: CALL_OW 70
15635: ST_TO_ADDR
// if ruSpecialVehicleGroup then
15636: LD_EXP 60
15640: IFFALSE 15906
// begin for i in ruSpecialVehicleGroup do
15642: LD_ADDR_VAR 0 1
15646: PUSH
15647: LD_EXP 60
15651: PUSH
15652: FOR_IN
15653: IFFALSE 15904
// begin if enemyInBase then
15655: LD_VAR 0 6
15659: IFFALSE 15902
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
15661: LD_VAR 0 1
15665: PPUSH
15666: CALL_OW 256
15670: PUSH
15671: LD_INT 500
15673: GREATER
15674: PUSH
15675: LD_VAR 0 1
15679: PPUSH
15680: CALL_OW 110
15684: PUSH
15685: LD_INT 0
15687: EQUAL
15688: AND
15689: IFFALSE 15715
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
15691: LD_VAR 0 1
15695: PPUSH
15696: LD_VAR 0 6
15700: PPUSH
15701: LD_VAR 0 1
15705: PPUSH
15706: CALL_OW 74
15710: PPUSH
15711: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15715: LD_VAR 0 1
15719: PPUSH
15720: CALL_OW 256
15724: PUSH
15725: LD_INT 500
15727: LESSEQUAL
15728: PUSH
15729: LD_VAR 0 1
15733: PPUSH
15734: CALL_OW 110
15738: PUSH
15739: LD_INT 0
15741: EQUAL
15742: AND
15743: IFFALSE 15772
// begin SetTag ( i , 1 ) ;
15745: LD_VAR 0 1
15749: PPUSH
15750: LD_INT 1
15752: PPUSH
15753: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
15757: LD_VAR 0 1
15761: PPUSH
15762: LD_INT 83
15764: PPUSH
15765: LD_INT 134
15767: PPUSH
15768: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
15772: LD_VAR 0 1
15776: PPUSH
15777: CALL_OW 256
15781: PUSH
15782: LD_INT 1000
15784: LESS
15785: PUSH
15786: LD_VAR 0 1
15790: PPUSH
15791: CALL_OW 110
15795: PUSH
15796: LD_INT 1
15798: EQUAL
15799: AND
15800: PUSH
15801: LD_VAR 0 1
15805: PPUSH
15806: LD_INT 83
15808: PPUSH
15809: LD_INT 134
15811: PPUSH
15812: CALL_OW 297
15816: PUSH
15817: LD_INT 6
15819: LESS
15820: AND
15821: IFFALSE 15849
// begin SetFuel ( i , 100 ) ;
15823: LD_VAR 0 1
15827: PPUSH
15828: LD_INT 100
15830: PPUSH
15831: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
15835: LD_VAR 0 1
15839: PPUSH
15840: CALL_OW 310
15844: PPUSH
15845: CALL 68709 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
15849: LD_VAR 0 1
15853: PPUSH
15854: CALL_OW 256
15858: PUSH
15859: LD_INT 1000
15861: EQUAL
15862: PUSH
15863: LD_VAR 0 1
15867: PPUSH
15868: CALL_OW 110
15872: PUSH
15873: LD_INT 1
15875: EQUAL
15876: AND
15877: PUSH
15878: LD_VAR 0 1
15882: PPUSH
15883: CALL_OW 311
15887: AND
15888: IFFALSE 15902
// SetTag ( i , 0 ) ;
15890: LD_VAR 0 1
15894: PPUSH
15895: LD_INT 0
15897: PPUSH
15898: CALL_OW 109
// end ; end ;
15902: GO 15652
15904: POP
15905: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
15906: LD_ADDR_VAR 0 5
15910: PUSH
15911: LD_EXP 59
15915: PPUSH
15916: LD_INT 25
15918: PUSH
15919: LD_INT 4
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PPUSH
15926: CALL_OW 72
15930: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15931: LD_ADDR_VAR 0 4
15935: PUSH
15936: LD_EXP 59
15940: PPUSH
15941: LD_INT 92
15943: PUSH
15944: LD_INT 92
15946: PUSH
15947: LD_INT 155
15949: PUSH
15950: LD_INT 12
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 3
15961: PUSH
15962: LD_INT 24
15964: PUSH
15965: LD_INT 1000
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PPUSH
15980: CALL_OW 72
15984: ST_TO_ADDR
// if sci then
15985: LD_VAR 0 5
15989: IFFALSE 16122
// begin if hurt then
15991: LD_VAR 0 4
15995: IFFALSE 16068
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
15997: LD_VAR 0 5
16001: PPUSH
16002: LD_INT 3
16004: PUSH
16005: LD_INT 54
16007: PUSH
16008: EMPTY
16009: LIST
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PPUSH
16015: CALL_OW 72
16019: IFFALSE 16048
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
16021: LD_VAR 0 5
16025: PPUSH
16026: LD_INT 3
16028: PUSH
16029: LD_INT 54
16031: PUSH
16032: EMPTY
16033: LIST
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PPUSH
16039: CALL_OW 72
16043: PPUSH
16044: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
16048: LD_VAR 0 5
16052: PPUSH
16053: LD_VAR 0 4
16057: PUSH
16058: LD_INT 1
16060: ARRAY
16061: PPUSH
16062: CALL_OW 188
// end else
16066: GO 16122
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16068: LD_VAR 0 5
16072: PPUSH
16073: LD_INT 3
16075: PUSH
16076: LD_INT 54
16078: PUSH
16079: EMPTY
16080: LIST
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PPUSH
16086: CALL_OW 72
16090: IFFALSE 16122
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
16092: LD_VAR 0 5
16096: PPUSH
16097: LD_INT 3
16099: PUSH
16100: LD_INT 54
16102: PUSH
16103: EMPTY
16104: LIST
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PPUSH
16110: CALL_OW 72
16114: PPUSH
16115: LD_INT 17
16117: PPUSH
16118: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16122: LD_ADDR_VAR 0 3
16126: PUSH
16127: LD_INT 10
16129: PPUSH
16130: LD_INT 21
16132: PUSH
16133: LD_INT 3
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 3
16142: PUSH
16143: LD_INT 24
16145: PUSH
16146: LD_INT 1000
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PPUSH
16161: CALL_OW 70
16165: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
16166: LD_ADDR_VAR 0 2
16170: PUSH
16171: LD_EXP 59
16175: PPUSH
16176: LD_INT 25
16178: PUSH
16179: LD_INT 2
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PPUSH
16186: CALL_OW 72
16190: PUSH
16191: LD_INT 22
16193: PUSH
16194: LD_INT 3
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 34
16203: PUSH
16204: LD_INT 52
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: PPUSH
16215: CALL_OW 69
16219: UNION
16220: ST_TO_ADDR
// if not tmp then
16221: LD_VAR 0 2
16225: NOT
16226: IFFALSE 16230
// exit ;
16228: GO 16748
// for i in tmp do
16230: LD_ADDR_VAR 0 1
16234: PUSH
16235: LD_VAR 0 2
16239: PUSH
16240: FOR_IN
16241: IFFALSE 16746
// begin if GetClass ( i ) = 2 then
16243: LD_VAR 0 1
16247: PPUSH
16248: CALL_OW 257
16252: PUSH
16253: LD_INT 2
16255: EQUAL
16256: IFFALSE 16479
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16258: LD_VAR 0 1
16262: PPUSH
16263: CALL_OW 256
16267: PUSH
16268: LD_INT 1000
16270: EQUAL
16271: PUSH
16272: LD_VAR 0 1
16276: PPUSH
16277: CALL_OW 110
16281: PUSH
16282: LD_INT 1
16284: EQUAL
16285: AND
16286: IFFALSE 16300
// SetTag ( i , 0 ) ;
16288: LD_VAR 0 1
16292: PPUSH
16293: LD_INT 0
16295: PPUSH
16296: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16300: LD_VAR 0 1
16304: PPUSH
16305: CALL_OW 256
16309: PUSH
16310: LD_INT 500
16312: LESSEQUAL
16313: PUSH
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 110
16323: PUSH
16324: LD_INT 0
16326: EQUAL
16327: AND
16328: IFFALSE 16357
// begin SetTag ( i , 1 ) ;
16330: LD_VAR 0 1
16334: PPUSH
16335: LD_INT 1
16337: PPUSH
16338: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
16342: LD_VAR 0 1
16346: PPUSH
16347: LD_INT 92
16349: PPUSH
16350: LD_INT 155
16352: PPUSH
16353: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
16357: LD_VAR 0 3
16361: PUSH
16362: LD_VAR 0 1
16366: PPUSH
16367: CALL_OW 256
16371: PUSH
16372: LD_INT 500
16374: GREATER
16375: AND
16376: PUSH
16377: LD_VAR 0 1
16381: PPUSH
16382: CALL_OW 110
16386: PUSH
16387: LD_INT 0
16389: EQUAL
16390: AND
16391: PUSH
16392: LD_VAR 0 1
16396: PPUSH
16397: CALL_OW 314
16401: NOT
16402: AND
16403: IFFALSE 16477
// begin if b then
16405: LD_VAR 0 3
16409: IFFALSE 16441
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16411: LD_VAR 0 1
16415: PPUSH
16416: LD_VAR 0 3
16420: PUSH
16421: LD_INT 1
16423: PPUSH
16424: LD_VAR 0 3
16428: PPUSH
16429: CALL_OW 12
16433: ARRAY
16434: PPUSH
16435: CALL_OW 130
16439: GO 16477
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16441: LD_VAR 0 1
16445: PPUSH
16446: LD_INT 94
16448: PPUSH
16449: LD_INT 165
16451: PPUSH
16452: CALL_OW 297
16456: PUSH
16457: LD_INT 8
16459: GREATER
16460: IFFALSE 16477
// ComMoveXY ( i , 94 , 165 ) ;
16462: LD_VAR 0 1
16466: PPUSH
16467: LD_INT 94
16469: PPUSH
16470: LD_INT 165
16472: PPUSH
16473: CALL_OW 111
// end ; end else
16477: GO 16744
// if GetWeapon ( i ) = ru_crane then
16479: LD_VAR 0 1
16483: PPUSH
16484: CALL_OW 264
16488: PUSH
16489: LD_INT 52
16491: EQUAL
16492: IFFALSE 16744
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16494: LD_VAR 0 1
16498: PPUSH
16499: CALL_OW 256
16503: PUSH
16504: LD_INT 1000
16506: EQUAL
16507: PUSH
16508: LD_VAR 0 1
16512: PPUSH
16513: CALL_OW 110
16517: PUSH
16518: LD_INT 1
16520: EQUAL
16521: AND
16522: IFFALSE 16548
// begin SetTag ( i , 0 ) ;
16524: LD_VAR 0 1
16528: PPUSH
16529: LD_INT 0
16531: PPUSH
16532: CALL_OW 109
// SetFuel ( i , 100 ) ;
16536: LD_VAR 0 1
16540: PPUSH
16541: LD_INT 100
16543: PPUSH
16544: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16548: LD_VAR 0 1
16552: PPUSH
16553: CALL_OW 256
16557: PUSH
16558: LD_INT 500
16560: LESSEQUAL
16561: PUSH
16562: LD_VAR 0 1
16566: PPUSH
16567: CALL_OW 110
16571: PUSH
16572: LD_INT 0
16574: EQUAL
16575: AND
16576: IFFALSE 16619
// begin SetTag ( i , 1 ) ;
16578: LD_VAR 0 1
16582: PPUSH
16583: LD_INT 1
16585: PPUSH
16586: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
16590: LD_VAR 0 1
16594: PPUSH
16595: LD_INT 83
16597: PPUSH
16598: LD_INT 135
16600: PPUSH
16601: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
16605: LD_VAR 0 1
16609: PPUSH
16610: CALL_OW 310
16614: PPUSH
16615: CALL 68709 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
16619: LD_VAR 0 1
16623: PPUSH
16624: CALL_OW 256
16628: PUSH
16629: LD_INT 500
16631: GREATER
16632: PUSH
16633: LD_VAR 0 1
16637: PPUSH
16638: CALL_OW 110
16642: PUSH
16643: LD_INT 0
16645: EQUAL
16646: AND
16647: PUSH
16648: LD_VAR 0 1
16652: PPUSH
16653: CALL_OW 311
16657: AND
16658: PUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: CALL_OW 314
16668: NOT
16669: AND
16670: IFFALSE 16744
// begin if b then
16672: LD_VAR 0 3
16676: IFFALSE 16708
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16678: LD_VAR 0 1
16682: PPUSH
16683: LD_VAR 0 3
16687: PUSH
16688: LD_INT 1
16690: PPUSH
16691: LD_VAR 0 3
16695: PPUSH
16696: CALL_OW 12
16700: ARRAY
16701: PPUSH
16702: CALL_OW 130
16706: GO 16744
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16708: LD_VAR 0 1
16712: PPUSH
16713: LD_INT 94
16715: PPUSH
16716: LD_INT 165
16718: PPUSH
16719: CALL_OW 297
16723: PUSH
16724: LD_INT 8
16726: GREATER
16727: IFFALSE 16744
// ComMoveXY ( i , 94 , 165 ) ;
16729: LD_VAR 0 1
16733: PPUSH
16734: LD_INT 94
16736: PPUSH
16737: LD_INT 165
16739: PPUSH
16740: CALL_OW 111
// end ; end ; end ;
16744: GO 16240
16746: POP
16747: POP
// end ;
16748: PPOPN 6
16750: END
// every 10 10$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp , tmp2 ;
16751: LD_EXP 23
16755: NOT
16756: PUSH
16757: LD_EXP 27
16761: NOT
16762: AND
16763: IFFALSE 17678
16765: GO 16767
16767: DISABLE
16768: LD_INT 0
16770: PPUSH
16771: PPUSH
16772: PPUSH
16773: PPUSH
16774: PPUSH
// begin enable ;
16775: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
16776: LD_INT 35
16778: PUSH
16779: LD_INT 45
16781: PUSH
16782: LD_INT 55
16784: PUSH
16785: LD_INT 60
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: PUSH
16794: LD_OWVAR 67
16798: ARRAY
16799: PPUSH
16800: CALL_OW 13
16804: IFFALSE 16820
// waveStrength := waveStrength + 1 ;
16806: LD_ADDR_EXP 62
16810: PUSH
16811: LD_EXP 62
16815: PUSH
16816: LD_INT 1
16818: PLUS
16819: ST_TO_ADDR
// if waveStrength > [ 2 , 3 , 4 , 4 ] [ Difficulty ] then
16820: LD_EXP 62
16824: PUSH
16825: LD_INT 2
16827: PUSH
16828: LD_INT 3
16830: PUSH
16831: LD_INT 4
16833: PUSH
16834: LD_INT 4
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: PUSH
16843: LD_OWVAR 67
16847: ARRAY
16848: GREATER
16849: IFFALSE 16881
// begin waveStrength := waveStrength + 2 ;
16851: LD_ADDR_EXP 62
16855: PUSH
16856: LD_EXP 62
16860: PUSH
16861: LD_INT 2
16863: PLUS
16864: ST_TO_ADDR
// disableAttackOnHeike := true ;
16865: LD_ADDR_EXP 27
16869: PUSH
16870: LD_INT 1
16872: ST_TO_ADDR
// disable ;
16873: DISABLE
// wait ( 3 3$00 ) ;
16874: LD_INT 6300
16876: PPUSH
16877: CALL_OW 67
// end ; for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
16881: LD_ADDR_VAR 0 1
16885: PUSH
16886: DOUBLE
16887: LD_INT 1
16889: DEC
16890: ST_TO_ADDR
16891: LD_INT 2
16893: PUSH
16894: LD_INT 2
16896: PUSH
16897: LD_INT 3
16899: PUSH
16900: LD_INT 4
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: PUSH
16909: LD_OWVAR 67
16913: ARRAY
16914: PUSH
16915: FOR_TO
16916: IFFALSE 17077
// begin InitHc ;
16918: CALL_OW 19
// InitVc ;
16922: CALL_OW 20
// uc_side := 3 ;
16926: LD_ADDR_OWVAR 20
16930: PUSH
16931: LD_INT 3
16933: ST_TO_ADDR
// uc_nation := 3 ;
16934: LD_ADDR_OWVAR 21
16938: PUSH
16939: LD_INT 3
16941: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
16942: LD_INT 0
16944: PPUSH
16945: LD_INT 1
16947: PPUSH
16948: LD_OWVAR 67
16952: PUSH
16953: LD_INT 2
16955: PLUS
16956: PPUSH
16957: CALL_OW 380
// un := CreateHuman ;
16961: LD_ADDR_VAR 0 2
16965: PUSH
16966: CALL_OW 44
16970: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
16971: LD_VAR 0 2
16975: PPUSH
16976: LD_INT 160
16978: PPUSH
16979: LD_INT 3
16981: PPUSH
16982: LD_INT 2
16984: PPUSH
16985: LD_INT 0
16987: PPUSH
16988: CALL 69029 0 5
// SetClass ( un , class_bazooker ) ;
16992: LD_VAR 0 2
16996: PPUSH
16997: LD_INT 9
16999: PPUSH
17000: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17004: LD_ADDR_EXP 61
17008: PUSH
17009: LD_EXP 61
17013: PPUSH
17014: LD_EXP 61
17018: PUSH
17019: LD_INT 1
17021: PLUS
17022: PPUSH
17023: LD_VAR 0 2
17027: PPUSH
17028: CALL_OW 1
17032: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17033: LD_VAR 0 2
17037: PPUSH
17038: LD_INT 177
17040: PPUSH
17041: LD_INT 17
17043: PPUSH
17044: CALL_OW 111
// wait ( 0 0$2 ) ;
17048: LD_INT 70
17050: PPUSH
17051: CALL_OW 67
// tmp2 := Join ( tmp2 , un ) ;
17055: LD_ADDR_VAR 0 5
17059: PUSH
17060: LD_VAR 0 5
17064: PPUSH
17065: LD_VAR 0 2
17069: PPUSH
17070: CALL 66889 0 2
17074: ST_TO_ADDR
// end ;
17075: GO 16915
17077: POP
17078: POP
// AddComAgressiveMove ( tmp2 , 196 , 53 ) ;
17079: LD_VAR 0 5
17083: PPUSH
17084: LD_INT 196
17086: PPUSH
17087: LD_INT 53
17089: PPUSH
17090: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 199 , 62 ) ;
17094: LD_VAR 0 5
17098: PPUSH
17099: LD_INT 199
17101: PPUSH
17102: LD_INT 62
17104: PPUSH
17105: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 205 , 75 ) ;
17109: LD_VAR 0 5
17113: PPUSH
17114: LD_INT 205
17116: PPUSH
17117: LD_INT 75
17119: PPUSH
17120: CALL_OW 174
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + waveStrength do
17124: LD_ADDR_VAR 0 1
17128: PUSH
17129: DOUBLE
17130: LD_INT 1
17132: DEC
17133: ST_TO_ADDR
17134: LD_INT 2
17136: PUSH
17137: LD_INT 3
17139: PUSH
17140: LD_INT 3
17142: PUSH
17143: LD_INT 4
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: PUSH
17152: LD_OWVAR 67
17156: ARRAY
17157: PUSH
17158: LD_EXP 62
17162: PLUS
17163: PUSH
17164: FOR_TO
17165: IFFALSE 17474
// begin InitHc ;
17167: CALL_OW 19
// InitVc ;
17171: CALL_OW 20
// uc_side := 3 ;
17175: LD_ADDR_OWVAR 20
17179: PUSH
17180: LD_INT 3
17182: ST_TO_ADDR
// uc_nation := 3 ;
17183: LD_ADDR_OWVAR 21
17187: PUSH
17188: LD_INT 3
17190: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
17191: LD_INT 22
17193: PUSH
17194: LD_INT 23
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 1
17203: PPUSH
17204: LD_INT 2
17206: PPUSH
17207: CALL_OW 12
17211: ARRAY
17212: PPUSH
17213: LD_INT 1
17215: PPUSH
17216: LD_INT 1
17218: PPUSH
17219: LD_INT 44
17221: PUSH
17222: LD_INT 45
17224: PUSH
17225: LD_INT 43
17227: PUSH
17228: LD_INT 42
17230: PUSH
17231: LD_INT 44
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: PUSH
17241: LD_INT 1
17243: PPUSH
17244: LD_INT 5
17246: PPUSH
17247: CALL_OW 12
17251: ARRAY
17252: PPUSH
17253: LD_INT 99
17255: PPUSH
17256: CALL 34436 0 5
// veh := CreateVehicle ;
17260: LD_ADDR_VAR 0 3
17264: PUSH
17265: CALL_OW 45
17269: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
17270: LD_VAR 0 3
17274: PPUSH
17275: LD_INT 160
17277: PPUSH
17278: LD_INT 3
17280: PPUSH
17281: LD_INT 2
17283: PPUSH
17284: LD_INT 0
17286: PPUSH
17287: CALL 69029 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17291: LD_ADDR_EXP 61
17295: PUSH
17296: LD_EXP 61
17300: PPUSH
17301: LD_EXP 61
17305: PUSH
17306: LD_INT 1
17308: PLUS
17309: PPUSH
17310: LD_VAR 0 3
17314: PPUSH
17315: CALL_OW 1
17319: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
17320: LD_INT 0
17322: PPUSH
17323: LD_INT 3
17325: PPUSH
17326: LD_OWVAR 67
17330: PUSH
17331: LD_INT 2
17333: PLUS
17334: PPUSH
17335: CALL_OW 380
// un := CreateHuman ;
17339: LD_ADDR_VAR 0 2
17343: PUSH
17344: CALL_OW 44
17348: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17349: LD_VAR 0 2
17353: PPUSH
17354: LD_VAR 0 3
17358: PPUSH
17359: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17363: LD_ADDR_EXP 61
17367: PUSH
17368: LD_EXP 61
17372: PPUSH
17373: LD_EXP 61
17377: PUSH
17378: LD_INT 1
17380: PLUS
17381: PPUSH
17382: LD_VAR 0 2
17386: PPUSH
17387: CALL_OW 1
17391: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17392: LD_VAR 0 2
17396: PPUSH
17397: LD_INT 177
17399: PPUSH
17400: LD_INT 17
17402: PPUSH
17403: CALL_OW 111
// wait ( 0 0$2 ) ;
17407: LD_INT 70
17409: PPUSH
17410: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17414: LD_ADDR_VAR 0 4
17418: PUSH
17419: LD_VAR 0 4
17423: PPUSH
17424: LD_VAR 0 4
17428: PUSH
17429: LD_INT 1
17431: PLUS
17432: PPUSH
17433: LD_VAR 0 3
17437: PPUSH
17438: CALL_OW 1
17442: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17443: LD_ADDR_VAR 0 4
17447: PUSH
17448: LD_VAR 0 4
17452: PPUSH
17453: LD_VAR 0 4
17457: PUSH
17458: LD_INT 1
17460: PLUS
17461: PPUSH
17462: LD_VAR 0 2
17466: PPUSH
17467: CALL_OW 1
17471: ST_TO_ADDR
// end ;
17472: GO 17164
17474: POP
17475: POP
// for i in tmp do
17476: LD_ADDR_VAR 0 1
17480: PUSH
17481: LD_VAR 0 4
17485: PUSH
17486: FOR_IN
17487: IFFALSE 17568
// AgressiveMove ( i , [ [ 206 , 37 ] , [ 239 , 53 ] , [ 260 , 67 ] , [ 263 , 79 ] , [ 257 , 105 ] , [ 227 , 97 ] ] ) ;
17489: LD_VAR 0 1
17493: PPUSH
17494: LD_INT 206
17496: PUSH
17497: LD_INT 37
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 239
17506: PUSH
17507: LD_INT 53
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 260
17516: PUSH
17517: LD_INT 67
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 263
17526: PUSH
17527: LD_INT 79
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 257
17536: PUSH
17537: LD_INT 105
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 227
17546: PUSH
17547: LD_INT 97
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: PPUSH
17562: CALL 69493 0 2
17566: GO 17486
17568: POP
17569: POP
// repeat wait ( 0 0$2 ) ;
17570: LD_INT 70
17572: PPUSH
17573: CALL_OW 67
// for i in tmp do
17577: LD_ADDR_VAR 0 1
17581: PUSH
17582: LD_VAR 0 4
17586: PUSH
17587: FOR_IN
17588: IFFALSE 17655
// if IsDead ( i ) then
17590: LD_VAR 0 1
17594: PPUSH
17595: CALL_OW 301
17599: IFFALSE 17619
// tmp := tmp diff i else
17601: LD_ADDR_VAR 0 4
17605: PUSH
17606: LD_VAR 0 4
17610: PUSH
17611: LD_VAR 0 1
17615: DIFF
17616: ST_TO_ADDR
17617: GO 17653
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
17619: LD_VAR 0 1
17623: PPUSH
17624: LD_INT 81
17626: PUSH
17627: LD_INT 3
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PPUSH
17634: CALL_OW 69
17638: PPUSH
17639: LD_VAR 0 1
17643: PPUSH
17644: CALL_OW 74
17648: PPUSH
17649: CALL_OW 115
17653: GO 17587
17655: POP
17656: POP
// until not tmp ;
17657: LD_VAR 0 4
17661: NOT
17662: IFFALSE 17570
// if firstAttack then
17664: LD_EXP 28
17668: IFFALSE 17678
// firstAttack := false ;
17670: LD_ADDR_EXP 28
17674: PUSH
17675: LD_INT 0
17677: ST_TO_ADDR
// end ;
17678: PPOPN 5
17680: END
// every 12 12$00 + 3 3$00 trigger not omarAttack and not rolfAttack and bergkampfArrived and not disableAttackOnHeike do var i , un , veh , tmp ;
17681: LD_EXP 23
17685: NOT
17686: PUSH
17687: LD_EXP 32
17691: NOT
17692: AND
17693: PUSH
17694: LD_EXP 3
17698: AND
17699: PUSH
17700: LD_EXP 27
17704: NOT
17705: AND
17706: IFFALSE 18623
17708: GO 17710
17710: DISABLE
17711: LD_INT 0
17713: PPUSH
17714: PPUSH
17715: PPUSH
17716: PPUSH
// begin enable ;
17717: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
17718: LD_ADDR_VAR 0 1
17722: PUSH
17723: DOUBLE
17724: LD_INT 1
17726: DEC
17727: ST_TO_ADDR
17728: LD_INT 1
17730: PUSH
17731: LD_INT 2
17733: PUSH
17734: LD_INT 2
17736: PUSH
17737: LD_INT 3
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: PUSH
17746: LD_OWVAR 67
17750: ARRAY
17751: PUSH
17752: FOR_TO
17753: IFFALSE 18054
// begin InitHc ;
17755: CALL_OW 19
// InitVc ;
17759: CALL_OW 20
// uc_side := 3 ;
17763: LD_ADDR_OWVAR 20
17767: PUSH
17768: LD_INT 3
17770: ST_TO_ADDR
// uc_nation := 3 ;
17771: LD_ADDR_OWVAR 21
17775: PUSH
17776: LD_INT 3
17778: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
17779: LD_INT 22
17781: PUSH
17782: LD_INT 23
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 1
17791: PPUSH
17792: LD_INT 2
17794: PPUSH
17795: CALL_OW 12
17799: ARRAY
17800: PPUSH
17801: LD_INT 1
17803: PPUSH
17804: LD_INT 1
17806: PPUSH
17807: LD_INT 44
17809: PUSH
17810: LD_INT 43
17812: PUSH
17813: LD_INT 42
17815: PUSH
17816: LD_INT 44
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 1
17827: PPUSH
17828: LD_INT 4
17830: PPUSH
17831: CALL_OW 12
17835: ARRAY
17836: PPUSH
17837: LD_INT 99
17839: PPUSH
17840: CALL 34436 0 5
// veh := CreateVehicle ;
17844: LD_ADDR_VAR 0 3
17848: PUSH
17849: CALL_OW 45
17853: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
17854: LD_VAR 0 3
17858: PPUSH
17859: LD_INT 5
17861: PPUSH
17862: LD_INT 3
17864: PPUSH
17865: LD_INT 2
17867: PPUSH
17868: LD_INT 0
17870: PPUSH
17871: CALL 69029 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17875: LD_ADDR_EXP 61
17879: PUSH
17880: LD_EXP 61
17884: PPUSH
17885: LD_EXP 61
17889: PUSH
17890: LD_INT 1
17892: PLUS
17893: PPUSH
17894: LD_VAR 0 3
17898: PPUSH
17899: CALL_OW 1
17903: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
17904: LD_INT 0
17906: PPUSH
17907: LD_INT 3
17909: PPUSH
17910: LD_OWVAR 67
17914: PPUSH
17915: CALL_OW 380
// un := CreateHuman ;
17919: LD_ADDR_VAR 0 2
17923: PUSH
17924: CALL_OW 44
17928: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17929: LD_VAR 0 2
17933: PPUSH
17934: LD_VAR 0 3
17938: PPUSH
17939: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17943: LD_ADDR_EXP 61
17947: PUSH
17948: LD_EXP 61
17952: PPUSH
17953: LD_EXP 61
17957: PUSH
17958: LD_INT 1
17960: PLUS
17961: PPUSH
17962: LD_VAR 0 2
17966: PPUSH
17967: CALL_OW 1
17971: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
17972: LD_VAR 0 2
17976: PPUSH
17977: LD_INT 23
17979: PPUSH
17980: LD_INT 7
17982: PPUSH
17983: CALL_OW 111
// wait ( 0 0$2 ) ;
17987: LD_INT 70
17989: PPUSH
17990: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17994: LD_ADDR_VAR 0 4
17998: PUSH
17999: LD_VAR 0 4
18003: PPUSH
18004: LD_VAR 0 4
18008: PUSH
18009: LD_INT 1
18011: PLUS
18012: PPUSH
18013: LD_VAR 0 3
18017: PPUSH
18018: CALL_OW 1
18022: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18023: LD_ADDR_VAR 0 4
18027: PUSH
18028: LD_VAR 0 4
18032: PPUSH
18033: LD_VAR 0 4
18037: PUSH
18038: LD_INT 1
18040: PLUS
18041: PPUSH
18042: LD_VAR 0 2
18046: PPUSH
18047: CALL_OW 1
18051: ST_TO_ADDR
// end ;
18052: GO 17752
18054: POP
18055: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
18056: LD_ADDR_VAR 0 1
18060: PUSH
18061: DOUBLE
18062: LD_INT 1
18064: DEC
18065: ST_TO_ADDR
18066: LD_INT 2
18068: PUSH
18069: LD_INT 3
18071: PUSH
18072: LD_INT 3
18074: PUSH
18075: LD_INT 4
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: PUSH
18084: LD_OWVAR 67
18088: ARRAY
18089: PUSH
18090: FOR_TO
18091: IFFALSE 18400
// begin InitHc ;
18093: CALL_OW 19
// InitVc ;
18097: CALL_OW 20
// uc_side := 3 ;
18101: LD_ADDR_OWVAR 20
18105: PUSH
18106: LD_INT 3
18108: ST_TO_ADDR
// uc_nation := 3 ;
18109: LD_ADDR_OWVAR 21
18113: PUSH
18114: LD_INT 3
18116: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
18117: LD_INT 22
18119: PUSH
18120: LD_INT 23
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 1
18129: PPUSH
18130: LD_INT 2
18132: PPUSH
18133: CALL_OW 12
18137: ARRAY
18138: PPUSH
18139: LD_INT 1
18141: PPUSH
18142: LD_INT 1
18144: PPUSH
18145: LD_INT 44
18147: PUSH
18148: LD_INT 45
18150: PUSH
18151: LD_INT 43
18153: PUSH
18154: LD_INT 42
18156: PUSH
18157: LD_INT 44
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 1
18169: PPUSH
18170: LD_INT 5
18172: PPUSH
18173: CALL_OW 12
18177: ARRAY
18178: PPUSH
18179: LD_INT 99
18181: PPUSH
18182: CALL 34436 0 5
// veh := CreateVehicle ;
18186: LD_ADDR_VAR 0 3
18190: PUSH
18191: CALL_OW 45
18195: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
18196: LD_VAR 0 3
18200: PPUSH
18201: LD_INT 127
18203: PPUSH
18204: LD_INT 243
18206: PPUSH
18207: LD_INT 0
18209: PPUSH
18210: LD_INT 0
18212: PPUSH
18213: CALL 69029 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18217: LD_ADDR_EXP 61
18221: PUSH
18222: LD_EXP 61
18226: PPUSH
18227: LD_EXP 61
18231: PUSH
18232: LD_INT 1
18234: PLUS
18235: PPUSH
18236: LD_VAR 0 3
18240: PPUSH
18241: CALL_OW 1
18245: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
18246: LD_INT 0
18248: PPUSH
18249: LD_INT 3
18251: PPUSH
18252: LD_OWVAR 67
18256: PUSH
18257: LD_INT 2
18259: PLUS
18260: PPUSH
18261: CALL_OW 380
// un := CreateHuman ;
18265: LD_ADDR_VAR 0 2
18269: PUSH
18270: CALL_OW 44
18274: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18275: LD_VAR 0 2
18279: PPUSH
18280: LD_VAR 0 3
18284: PPUSH
18285: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18289: LD_ADDR_EXP 61
18293: PUSH
18294: LD_EXP 61
18298: PPUSH
18299: LD_EXP 61
18303: PUSH
18304: LD_INT 1
18306: PLUS
18307: PPUSH
18308: LD_VAR 0 2
18312: PPUSH
18313: CALL_OW 1
18317: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
18318: LD_VAR 0 2
18322: PPUSH
18323: LD_INT 130
18325: PPUSH
18326: LD_INT 233
18328: PPUSH
18329: CALL_OW 111
// wait ( 0 0$2 ) ;
18333: LD_INT 70
18335: PPUSH
18336: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18340: LD_ADDR_VAR 0 4
18344: PUSH
18345: LD_VAR 0 4
18349: PPUSH
18350: LD_VAR 0 4
18354: PUSH
18355: LD_INT 1
18357: PLUS
18358: PPUSH
18359: LD_VAR 0 3
18363: PPUSH
18364: CALL_OW 1
18368: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18369: LD_ADDR_VAR 0 4
18373: PUSH
18374: LD_VAR 0 4
18378: PPUSH
18379: LD_VAR 0 4
18383: PUSH
18384: LD_INT 1
18386: PLUS
18387: PPUSH
18388: LD_VAR 0 2
18392: PPUSH
18393: CALL_OW 1
18397: ST_TO_ADDR
// end ;
18398: GO 18090
18400: POP
18401: POP
// for i in tmp do
18402: LD_ADDR_VAR 0 1
18406: PUSH
18407: LD_VAR 0 4
18411: PUSH
18412: FOR_IN
18413: IFFALSE 18527
// AgressiveMove ( i , [ [ 130 , 229 ] , [ 137 , 216 ] , [ 142 , 194 ] , [ 140 , 169 ] , [ 146 , 162 ] , [ 174 , 161 ] , [ 158 , 134 ] , [ 136 , 107 ] , [ 115 , 89 ] ] ) ;
18415: LD_VAR 0 1
18419: PPUSH
18420: LD_INT 130
18422: PUSH
18423: LD_INT 229
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 137
18432: PUSH
18433: LD_INT 216
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 142
18442: PUSH
18443: LD_INT 194
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 140
18452: PUSH
18453: LD_INT 169
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 146
18462: PUSH
18463: LD_INT 162
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: LD_INT 174
18472: PUSH
18473: LD_INT 161
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 158
18482: PUSH
18483: LD_INT 134
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 136
18492: PUSH
18493: LD_INT 107
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 115
18502: PUSH
18503: LD_INT 89
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: PPUSH
18521: CALL 69493 0 2
18525: GO 18412
18527: POP
18528: POP
// repeat wait ( 0 0$2 ) ;
18529: LD_INT 70
18531: PPUSH
18532: CALL_OW 67
// for i in tmp do
18536: LD_ADDR_VAR 0 1
18540: PUSH
18541: LD_VAR 0 4
18545: PUSH
18546: FOR_IN
18547: IFFALSE 18614
// if IsDead ( i ) then
18549: LD_VAR 0 1
18553: PPUSH
18554: CALL_OW 301
18558: IFFALSE 18578
// tmp := tmp diff i else
18560: LD_ADDR_VAR 0 4
18564: PUSH
18565: LD_VAR 0 4
18569: PUSH
18570: LD_VAR 0 1
18574: DIFF
18575: ST_TO_ADDR
18576: GO 18612
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18578: LD_VAR 0 1
18582: PPUSH
18583: LD_INT 81
18585: PUSH
18586: LD_INT 3
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PPUSH
18593: CALL_OW 69
18597: PPUSH
18598: LD_VAR 0 1
18602: PPUSH
18603: CALL_OW 74
18607: PPUSH
18608: CALL_OW 115
18612: GO 18546
18614: POP
18615: POP
// until not tmp ;
18616: LD_VAR 0 4
18620: NOT
18621: IFFALSE 18529
// end ;
18623: PPOPN 4
18625: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
18626: LD_EXP 6
18630: IFFALSE 19089
18632: GO 18634
18634: DISABLE
18635: LD_INT 0
18637: PPUSH
18638: PPUSH
18639: PPUSH
18640: PPUSH
// begin wait ( 3 3$00 ) ;
18641: LD_INT 6300
18643: PPUSH
18644: CALL_OW 67
// for i := 1 to 3 do
18648: LD_ADDR_VAR 0 1
18652: PUSH
18653: DOUBLE
18654: LD_INT 1
18656: DEC
18657: ST_TO_ADDR
18658: LD_INT 3
18660: PUSH
18661: FOR_TO
18662: IFFALSE 18961
// begin InitHc ;
18664: CALL_OW 19
// InitVc ;
18668: CALL_OW 20
// uc_side := 3 ;
18672: LD_ADDR_OWVAR 20
18676: PUSH
18677: LD_INT 3
18679: ST_TO_ADDR
// uc_nation := 3 ;
18680: LD_ADDR_OWVAR 21
18684: PUSH
18685: LD_INT 3
18687: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
18688: LD_INT 22
18690: PUSH
18691: LD_INT 23
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 1
18700: PPUSH
18701: LD_INT 2
18703: PPUSH
18704: CALL_OW 12
18708: ARRAY
18709: PPUSH
18710: LD_INT 1
18712: PPUSH
18713: LD_INT 1
18715: PPUSH
18716: LD_INT 44
18718: PUSH
18719: LD_INT 43
18721: PUSH
18722: LD_INT 42
18724: PUSH
18725: LD_INT 44
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 1
18736: PPUSH
18737: LD_INT 4
18739: PPUSH
18740: CALL_OW 12
18744: ARRAY
18745: PPUSH
18746: LD_INT 99
18748: PPUSH
18749: CALL 34436 0 5
// veh := CreateVehicle ;
18753: LD_ADDR_VAR 0 3
18757: PUSH
18758: CALL_OW 45
18762: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
18763: LD_VAR 0 3
18767: PPUSH
18768: LD_INT 293
18770: PPUSH
18771: LD_INT 246
18773: PPUSH
18774: LD_INT 5
18776: PPUSH
18777: LD_INT 0
18779: PPUSH
18780: CALL 69029 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18784: LD_ADDR_EXP 61
18788: PUSH
18789: LD_EXP 61
18793: PPUSH
18794: LD_EXP 61
18798: PUSH
18799: LD_INT 1
18801: PLUS
18802: PPUSH
18803: LD_VAR 0 3
18807: PPUSH
18808: CALL_OW 1
18812: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
18813: LD_INT 0
18815: PPUSH
18816: LD_INT 3
18818: PPUSH
18819: LD_INT 3
18821: PPUSH
18822: CALL_OW 380
// un := CreateHuman ;
18826: LD_ADDR_VAR 0 2
18830: PUSH
18831: CALL_OW 44
18835: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18836: LD_VAR 0 2
18840: PPUSH
18841: LD_VAR 0 3
18845: PPUSH
18846: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18850: LD_ADDR_EXP 61
18854: PUSH
18855: LD_EXP 61
18859: PPUSH
18860: LD_EXP 61
18864: PUSH
18865: LD_INT 1
18867: PLUS
18868: PPUSH
18869: LD_VAR 0 2
18873: PPUSH
18874: CALL_OW 1
18878: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
18879: LD_VAR 0 2
18883: PPUSH
18884: LD_INT 273
18886: PPUSH
18887: LD_INT 227
18889: PPUSH
18890: CALL_OW 111
// wait ( 0 0$2 ) ;
18894: LD_INT 70
18896: PPUSH
18897: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18901: LD_ADDR_VAR 0 4
18905: PUSH
18906: LD_VAR 0 4
18910: PPUSH
18911: LD_VAR 0 4
18915: PUSH
18916: LD_INT 1
18918: PLUS
18919: PPUSH
18920: LD_VAR 0 3
18924: PPUSH
18925: CALL_OW 1
18929: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18930: LD_ADDR_VAR 0 4
18934: PUSH
18935: LD_VAR 0 4
18939: PPUSH
18940: LD_VAR 0 4
18944: PUSH
18945: LD_INT 1
18947: PLUS
18948: PPUSH
18949: LD_VAR 0 2
18953: PPUSH
18954: CALL_OW 1
18958: ST_TO_ADDR
// end ;
18959: GO 18661
18961: POP
18962: POP
// for i in tmp do
18963: LD_ADDR_VAR 0 1
18967: PUSH
18968: LD_VAR 0 4
18972: PUSH
18973: FOR_IN
18974: IFFALSE 18993
// ComAgressiveMove ( i , 330 , 231 ) ;
18976: LD_VAR 0 1
18980: PPUSH
18981: LD_INT 330
18983: PPUSH
18984: LD_INT 231
18986: PPUSH
18987: CALL_OW 114
18991: GO 18973
18993: POP
18994: POP
// repeat wait ( 0 0$2 ) ;
18995: LD_INT 70
18997: PPUSH
18998: CALL_OW 67
// for i in tmp do
19002: LD_ADDR_VAR 0 1
19006: PUSH
19007: LD_VAR 0 4
19011: PUSH
19012: FOR_IN
19013: IFFALSE 19080
// if IsDead ( i ) then
19015: LD_VAR 0 1
19019: PPUSH
19020: CALL_OW 301
19024: IFFALSE 19044
// tmp := tmp diff i else
19026: LD_ADDR_VAR 0 4
19030: PUSH
19031: LD_VAR 0 4
19035: PUSH
19036: LD_VAR 0 1
19040: DIFF
19041: ST_TO_ADDR
19042: GO 19078
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
19044: LD_VAR 0 1
19048: PPUSH
19049: LD_INT 81
19051: PUSH
19052: LD_INT 3
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PPUSH
19059: CALL_OW 69
19063: PPUSH
19064: LD_VAR 0 1
19068: PPUSH
19069: CALL_OW 74
19073: PPUSH
19074: CALL_OW 115
19078: GO 19012
19080: POP
19081: POP
// until not tmp ;
19082: LD_VAR 0 4
19086: NOT
19087: IFFALSE 18995
// end ;
19089: PPOPN 4
19091: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19092: LD_INT 3
19094: PUSH
19095: LD_INT 22
19097: PUSH
19098: LD_INT 2
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 32
19111: PUSH
19112: LD_INT 1
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PPUSH
19123: CALL_OW 69
19127: IFFALSE 19211
19129: GO 19131
19131: DISABLE
19132: LD_INT 0
19134: PPUSH
// begin enable ;
19135: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19136: LD_ADDR_VAR 0 1
19140: PUSH
19141: LD_INT 3
19143: PUSH
19144: LD_INT 22
19146: PUSH
19147: LD_INT 2
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 32
19160: PUSH
19161: LD_INT 1
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PPUSH
19172: CALL_OW 69
19176: PUSH
19177: FOR_IN
19178: IFFALSE 19209
// if GetFuel ( i ) < 3 then
19180: LD_VAR 0 1
19184: PPUSH
19185: CALL_OW 261
19189: PUSH
19190: LD_INT 3
19192: LESS
19193: IFFALSE 19207
// SetFuel ( i , 3 ) ;
19195: LD_VAR 0 1
19199: PPUSH
19200: LD_INT 3
19202: PPUSH
19203: CALL_OW 240
19207: GO 19177
19209: POP
19210: POP
// end ; end_of_file
19211: PPOPN 1
19213: END
// export function Action ; begin
19214: LD_INT 0
19216: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
19217: LD_INT 2
19219: PPUSH
19220: LD_INT 4
19222: PPUSH
19223: CALL_OW 332
// Video ( true ) ;
19227: LD_INT 1
19229: PPUSH
19230: CALL 66861 0 1
// music_nat := 3 ;
19234: LD_ADDR_OWVAR 71
19238: PUSH
19239: LD_INT 3
19241: ST_TO_ADDR
// music_class := music_recon ;
19242: LD_ADDR_OWVAR 72
19246: PUSH
19247: LD_INT 3
19249: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
19250: LD_INT 213
19252: PPUSH
19253: LD_INT 89
19255: PPUSH
19256: CALL_OW 86
// if Kaia and Olaf then
19260: LD_EXP 39
19264: PUSH
19265: LD_EXP 43
19269: AND
19270: IFFALSE 19276
// SceneKaiaWithOlaf ;
19272: CALL 19354 0 0
// if Givi and Kamil then
19276: LD_EXP 35
19280: PUSH
19281: LD_EXP 38
19285: AND
19286: IFFALSE 19292
// SceneWithGiviAndKamil ;
19288: CALL 19925 0 0
// tick := 0 ;
19292: LD_ADDR_OWVAR 1
19296: PUSH
19297: LD_INT 0
19299: ST_TO_ADDR
// wait ( 3 ) ;
19300: LD_INT 3
19302: PPUSH
19303: CALL_OW 67
// Video ( false ) ;
19307: LD_INT 0
19309: PPUSH
19310: CALL 66861 0 1
// ChangeMissionObjectives ( M1 ) ;
19314: LD_STRING M1
19316: PPUSH
19317: CALL_OW 337
// music_nat := music_auto ;
19321: LD_ADDR_OWVAR 71
19325: PUSH
19326: LD_INT 0
19328: ST_TO_ADDR
// music_class := music_auto ;
19329: LD_ADDR_OWVAR 72
19333: PUSH
19334: LD_INT 0
19336: ST_TO_ADDR
// SaveForQuickRestart ;
19337: CALL_OW 22
// gameActive := true ;
19341: LD_ADDR_EXP 31
19345: PUSH
19346: LD_INT 1
19348: ST_TO_ADDR
// end ;
19349: LD_VAR 0 1
19353: RET
// export function SceneKaiaWithOlaf ; begin
19354: LD_INT 0
19356: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
19357: LD_INT 22
19359: PUSH
19360: LD_INT 2
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: LD_INT 30
19369: PUSH
19370: LD_INT 3
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PPUSH
19381: CALL_OW 69
19385: PPUSH
19386: LD_INT 14
19388: PPUSH
19389: LD_INT 1
19391: PPUSH
19392: LD_INT 1
19394: PPUSH
19395: LD_INT 26
19397: PPUSH
19398: CALL_OW 125
// wait ( 0 0$1 ) ;
19402: LD_INT 35
19404: PPUSH
19405: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
19409: LD_EXP 39
19413: PPUSH
19414: LD_STRING DK-Mem-1
19416: PPUSH
19417: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
19421: LD_EXP 39
19425: PPUSH
19426: LD_STRING DK-Mem-2
19428: PPUSH
19429: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
19433: LD_EXP 43
19437: PPUSH
19438: LD_STRING DO-Mem-3
19440: PPUSH
19441: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
19445: LD_EXP 39
19449: PPUSH
19450: LD_STRING DK-Mem-4
19452: PPUSH
19453: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
19457: LD_EXP 43
19461: PPUSH
19462: LD_STRING DO-Mem-5
19464: PPUSH
19465: CALL_OW 88
// wait ( 0 0$2 ) ;
19469: LD_INT 70
19471: PPUSH
19472: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
19476: LD_INT 22
19478: PUSH
19479: LD_INT 2
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 30
19488: PUSH
19489: LD_INT 3
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PPUSH
19500: CALL_OW 69
19504: PPUSH
19505: LD_INT 90
19507: PPUSH
19508: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
19512: LD_EXP 43
19516: PPUSH
19517: LD_STRING DO-Mem-6
19519: PPUSH
19520: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
19524: LD_EXP 39
19528: PPUSH
19529: LD_STRING DK-Mem-7
19531: PPUSH
19532: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
19536: LD_EXP 34
19540: PPUSH
19541: LD_EXP 39
19545: PPUSH
19546: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
19550: LD_EXP 34
19554: PPUSH
19555: LD_STRING DH-Mem-8
19557: PPUSH
19558: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
19562: LD_EXP 39
19566: PUSH
19567: LD_EXP 43
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PPUSH
19576: LD_EXP 34
19580: PPUSH
19581: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
19585: LD_EXP 43
19589: PPUSH
19590: LD_STRING DO-Mem-9
19592: PPUSH
19593: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
19597: LD_EXP 43
19601: PPUSH
19602: LD_STRING DO-Mem-10
19604: PPUSH
19605: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
19609: LD_EXP 43
19613: PPUSH
19614: LD_STRING DO-Mem-11
19616: PPUSH
19617: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
19621: LD_EXP 43
19625: PPUSH
19626: LD_STRING DO-Mem-12
19628: PPUSH
19629: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
19633: LD_EXP 39
19637: PPUSH
19638: LD_STRING DK-Mem-13
19640: PPUSH
19641: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
19645: LD_EXP 39
19649: PPUSH
19650: LD_STRING DK-Mem-14
19652: PPUSH
19653: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
19657: LD_EXP 39
19661: PPUSH
19662: LD_STRING DK-Mem-15
19664: PPUSH
19665: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
19669: LD_EXP 39
19673: PPUSH
19674: LD_STRING DK-Mem-16
19676: PPUSH
19677: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
19681: LD_EXP 39
19685: PPUSH
19686: LD_STRING DK-Mem-17
19688: PPUSH
19689: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
19693: LD_EXP 43
19697: PPUSH
19698: LD_EXP 39
19702: PPUSH
19703: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
19707: LD_EXP 43
19711: PPUSH
19712: LD_STRING DO-Mem-18
19714: PPUSH
19715: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
19719: LD_EXP 39
19723: PPUSH
19724: LD_EXP 43
19728: PPUSH
19729: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
19733: LD_EXP 39
19737: PPUSH
19738: LD_STRING DK-Mem-19
19740: PPUSH
19741: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
19745: LD_EXP 43
19749: PPUSH
19750: LD_INT 214
19752: PPUSH
19753: LD_INT 86
19755: PPUSH
19756: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19760: LD_EXP 43
19764: PPUSH
19765: LD_EXP 39
19769: PPUSH
19770: CALL_OW 179
// if Givi then
19774: LD_EXP 35
19778: IFFALSE 19809
// begin ComMoveXY ( Givi , 217 , 86 ) ;
19780: LD_EXP 35
19784: PPUSH
19785: LD_INT 217
19787: PPUSH
19788: LD_INT 86
19790: PPUSH
19791: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
19795: LD_EXP 35
19799: PPUSH
19800: LD_EXP 34
19804: PPUSH
19805: CALL_OW 179
// end ; if Kamil then
19809: LD_EXP 38
19813: IFFALSE 19853
// begin ComExit ( Kamil ) ;
19815: LD_EXP 38
19819: PPUSH
19820: CALL 67287 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
19824: LD_EXP 38
19828: PPUSH
19829: LD_INT 212
19831: PPUSH
19832: LD_INT 86
19834: PPUSH
19835: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
19839: LD_EXP 38
19843: PPUSH
19844: LD_EXP 34
19848: PPUSH
19849: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
19853: LD_INT 70
19855: PPUSH
19856: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
19860: LD_EXP 34
19864: PPUSH
19865: LD_STRING DH-Mem-20
19867: PPUSH
19868: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
19872: LD_EXP 43
19876: PPUSH
19877: LD_INT 215
19879: PPUSH
19880: LD_INT 87
19882: PPUSH
19883: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19887: LD_EXP 43
19891: PPUSH
19892: LD_EXP 39
19896: PPUSH
19897: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
19901: LD_EXP 39
19905: PPUSH
19906: LD_STRING DK-Mem-21
19908: PPUSH
19909: CALL_OW 88
// wait ( 0 0$2 ) ;
19913: LD_INT 70
19915: PPUSH
19916: CALL_OW 67
// end ;
19920: LD_VAR 0 1
19924: RET
// export function SceneWithGiviAndKamil ; var p ; begin
19925: LD_INT 0
19927: PPUSH
19928: PPUSH
// if Markov then
19929: LD_EXP 41
19933: IFFALSE 20051
// begin p := 0 ;
19935: LD_ADDR_VAR 0 2
19939: PUSH
19940: LD_INT 0
19942: ST_TO_ADDR
// if IsInUnit ( Markov ) then
19943: LD_EXP 41
19947: PPUSH
19948: CALL_OW 310
19952: IFFALSE 19963
// ComExit ( Markov ) ;
19954: LD_EXP 41
19958: PPUSH
19959: CALL 67287 0 1
// wait ( 0 0$1 ) ;
19963: LD_INT 35
19965: PPUSH
19966: CALL_OW 67
// ComMoveXY ( Markov , 212 , 88 ) ;
19970: LD_EXP 41
19974: PPUSH
19975: LD_INT 212
19977: PPUSH
19978: LD_INT 88
19980: PPUSH
19981: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19985: LD_INT 35
19987: PPUSH
19988: CALL_OW 67
// p := Inc ( p ) ;
19992: LD_ADDR_VAR 0 2
19996: PUSH
19997: LD_VAR 0 2
20001: PPUSH
20002: CALL 68250 0 1
20006: ST_TO_ADDR
// until GetDistUnits ( Markov , Heike ) < 6 or p > 12 ;
20007: LD_EXP 41
20011: PPUSH
20012: LD_EXP 34
20016: PPUSH
20017: CALL_OW 296
20021: PUSH
20022: LD_INT 6
20024: LESS
20025: PUSH
20026: LD_VAR 0 2
20030: PUSH
20031: LD_INT 12
20033: GREATER
20034: OR
20035: IFFALSE 19985
// AddComTurnUnit ( Markov , Heike ) ;
20037: LD_EXP 41
20041: PPUSH
20042: LD_EXP 34
20046: PPUSH
20047: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
20051: LD_EXP 35
20055: PPUSH
20056: LD_STRING DG-Obj-1
20058: PPUSH
20059: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
20063: LD_EXP 38
20067: PPUSH
20068: LD_STRING DKam-Obj-2
20070: PPUSH
20071: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
20075: LD_EXP 34
20079: PPUSH
20080: LD_EXP 38
20084: PPUSH
20085: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
20089: LD_EXP 38
20093: PPUSH
20094: LD_STRING DKam-Obj-3
20096: PPUSH
20097: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
20101: LD_EXP 41
20105: PPUSH
20106: LD_STRING DMar-Obj-4
20108: PPUSH
20109: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
20113: LD_EXP 38
20117: PPUSH
20118: LD_STRING DKam-Obj-6
20120: PPUSH
20121: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
20125: LD_EXP 38
20129: PPUSH
20130: LD_STRING DKam-Obj-7
20132: PPUSH
20133: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
20137: LD_EXP 38
20141: PPUSH
20142: LD_STRING DKam-Obj-8
20144: PPUSH
20145: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
20149: LD_EXP 34
20153: PPUSH
20154: LD_STRING DH-Obj-9
20156: PPUSH
20157: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
20161: LD_EXP 38
20165: PPUSH
20166: LD_STRING DKam-Obj-10
20168: PPUSH
20169: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
20173: LD_EXP 38
20177: PPUSH
20178: LD_STRING DKam-Obj-11
20180: PPUSH
20181: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
20185: LD_EXP 41
20189: PPUSH
20190: LD_STRING DMar-Obj-12
20192: PPUSH
20193: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
20197: LD_EXP 41
20201: PPUSH
20202: LD_STRING DMar-Obj-13
20204: PPUSH
20205: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
20209: LD_EXP 41
20213: PPUSH
20214: LD_STRING DMar-Obj-14
20216: PPUSH
20217: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
20221: LD_EXP 43
20225: PPUSH
20226: LD_STRING DO-Obj-15
20228: PPUSH
20229: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
20233: LD_EXP 43
20237: PPUSH
20238: LD_STRING DO-Obj-16
20240: PPUSH
20241: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
20245: LD_EXP 34
20249: PPUSH
20250: LD_STRING DH-Obj-17
20252: PPUSH
20253: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
20257: LD_EXP 43
20261: PPUSH
20262: LD_STRING DO-Obj-18
20264: PPUSH
20265: CALL_OW 88
// end ;
20269: LD_VAR 0 1
20273: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
20274: LD_INT 34
20276: PUSH
20277: LD_INT 92
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PPUSH
20284: CALL_OW 69
20288: IFFALSE 20483
20290: GO 20292
20292: DISABLE
20293: LD_INT 0
20295: PPUSH
// begin wait ( 0 0$2 ) ;
20296: LD_INT 70
20298: PPUSH
20299: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
20303: LD_INT 34
20305: PUSH
20306: LD_INT 92
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PPUSH
20313: CALL_OW 69
20317: PPUSH
20318: CALL_OW 87
// DialogueOn ;
20322: CALL_OW 6
// if Markov then
20326: LD_EXP 41
20330: IFFALSE 20358
// begin Say ( Markov , DMar-Grn-1 ) ;
20332: LD_EXP 41
20336: PPUSH
20337: LD_STRING DMar-Grn-1
20339: PPUSH
20340: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
20344: LD_EXP 34
20348: PPUSH
20349: LD_STRING DH-Grn-2
20351: PPUSH
20352: CALL_OW 88
// end else
20356: GO 20457
// if heikeSecondSquad then
20358: LD_EXP 49
20362: IFFALSE 20457
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20364: LD_ADDR_VAR 0 1
20368: PUSH
20369: LD_EXP 49
20373: PUSH
20374: LD_INT 1
20376: PPUSH
20377: LD_EXP 49
20381: PPUSH
20382: CALL_OW 12
20386: ARRAY
20387: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20388: LD_VAR 0 1
20392: PPUSH
20393: CALL_OW 258
20397: PUSH
20398: LD_INT 1
20400: DOUBLE
20401: EQUAL
20402: IFTRUE 20406
20404: GO 20421
20406: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
20407: LD_VAR 0 1
20411: PPUSH
20412: LD_STRING DArm-Grn-1
20414: PPUSH
20415: CALL_OW 88
20419: GO 20445
20421: LD_INT 2
20423: DOUBLE
20424: EQUAL
20425: IFTRUE 20429
20427: GO 20444
20429: POP
// Say ( random , DArf-Grn-1 ) ; end ;
20430: LD_VAR 0 1
20434: PPUSH
20435: LD_STRING DArf-Grn-1
20437: PPUSH
20438: CALL_OW 88
20442: GO 20445
20444: POP
// Say ( Heike , DH-Grn-2 ) ;
20445: LD_EXP 34
20449: PPUSH
20450: LD_STRING DH-Grn-2
20452: PPUSH
20453: CALL_OW 88
// end ; DialogueOff ;
20457: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
20461: LD_STRING MortarConstructed
20463: PPUSH
20464: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
20468: LD_STRING SelfPropelledMortar
20470: PPUSH
20471: CALL_OW 339
// mortarConstructed := true ;
20475: LD_ADDR_EXP 15
20479: PUSH
20480: LD_INT 1
20482: ST_TO_ADDR
// end ;
20483: PPOPN 1
20485: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
20486: LD_INT 2
20488: PPUSH
20489: LD_INT 8
20491: PPUSH
20492: CALL_OW 294
20496: IFFALSE 20639
20498: GO 20500
20500: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
20501: LD_INT 200
20503: PPUSH
20504: LD_INT 162
20506: PPUSH
20507: LD_INT 2
20509: PPUSH
20510: LD_INT 6
20512: NEG
20513: PPUSH
20514: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
20518: LD_INT 200
20520: PPUSH
20521: LD_INT 162
20523: PPUSH
20524: LD_INT 2
20526: PPUSH
20527: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
20531: LD_INT 200
20533: PPUSH
20534: LD_INT 162
20536: PPUSH
20537: CALL_OW 84
// if not IsOk ( Kurt ) then
20541: LD_EXP 45
20545: PPUSH
20546: CALL_OW 302
20550: NOT
20551: IFFALSE 20555
// exit ;
20553: GO 20639
// Say ( Kurt , DKs-Otpst-2-1 ) ;
20555: LD_EXP 45
20559: PPUSH
20560: LD_STRING DKs-Otpst-2-1
20562: PPUSH
20563: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
20567: LD_EXP 39
20571: PPUSH
20572: LD_STRING DK-Otpst-2-2
20574: PPUSH
20575: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
20579: LD_EXP 45
20583: PPUSH
20584: LD_STRING DKs-Otpst-2-3
20586: PPUSH
20587: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
20591: LD_EXP 45
20595: PPUSH
20596: LD_STRING DKs-Otpst-2-4
20598: PPUSH
20599: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
20603: LD_EXP 45
20607: PPUSH
20608: LD_STRING DKs-Otpst-2-5
20610: PPUSH
20611: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
20615: LD_EXP 38
20619: PPUSH
20620: LD_STRING DKam-Otpst-2-6
20622: PPUSH
20623: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
20627: LD_EXP 45
20631: PPUSH
20632: LD_STRING DKs-Otpst-2-7
20634: PPUSH
20635: CALL_OW 88
// end ;
20639: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
20640: LD_INT 8
20642: PPUSH
20643: LD_INT 22
20645: PUSH
20646: LD_INT 3
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 21
20655: PUSH
20656: LD_INT 3
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PPUSH
20667: CALL_OW 70
20671: NOT
20672: PUSH
20673: LD_EXP 3
20677: NOT
20678: AND
20679: IFFALSE 20927
20681: GO 20683
20683: DISABLE
20684: LD_INT 0
20686: PPUSH
// begin outpostDestroyed := true ;
20687: LD_ADDR_EXP 4
20691: PUSH
20692: LD_INT 1
20694: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
20695: LD_INT 22
20697: PUSH
20698: LD_INT 2
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 34
20707: PUSH
20708: LD_INT 92
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 92
20717: PUSH
20718: LD_INT 195
20720: PUSH
20721: LD_INT 164
20723: PUSH
20724: LD_INT 12
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: LIST
20737: PPUSH
20738: CALL_OW 69
20742: NOT
20743: IFFALSE 20747
// exit ;
20745: GO 20927
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
20747: LD_EXP 35
20751: PPUSH
20752: CALL_OW 302
20756: NOT
20757: PUSH
20758: LD_EXP 39
20762: PPUSH
20763: CALL_OW 302
20767: NOT
20768: OR
20769: IFFALSE 20773
// exit ;
20771: GO 20927
// Say ( Givi , DG-Otpst-1-1 ) ;
20773: LD_EXP 35
20777: PPUSH
20778: LD_STRING DG-Otpst-1-1
20780: PPUSH
20781: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
20785: LD_EXP 39
20789: PPUSH
20790: LD_STRING DK-Otpst-1-2
20792: PPUSH
20793: CALL_OW 88
// if IsOk ( Markov ) then
20797: LD_EXP 41
20801: PPUSH
20802: CALL_OW 302
20806: IFFALSE 20834
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
20808: LD_EXP 41
20812: PPUSH
20813: LD_STRING DMar-Otpst-1-3
20815: PPUSH
20816: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
20820: LD_EXP 41
20824: PPUSH
20825: LD_STRING DMar-Otpst-1-4
20827: PPUSH
20828: CALL_OW 88
// end else
20832: GO 20915
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20834: LD_ADDR_VAR 0 1
20838: PUSH
20839: LD_EXP 49
20843: PUSH
20844: LD_INT 1
20846: PPUSH
20847: LD_EXP 49
20851: PPUSH
20852: CALL_OW 12
20856: ARRAY
20857: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20858: LD_VAR 0 1
20862: PPUSH
20863: CALL_OW 258
20867: PUSH
20868: LD_INT 1
20870: DOUBLE
20871: EQUAL
20872: IFTRUE 20876
20874: GO 20891
20876: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
20877: LD_VAR 0 1
20881: PPUSH
20882: LD_STRING DArm-Otpst-1-a-3
20884: PPUSH
20885: CALL_OW 88
20889: GO 20915
20891: LD_INT 2
20893: DOUBLE
20894: EQUAL
20895: IFTRUE 20899
20897: GO 20914
20899: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
20900: LD_VAR 0 1
20904: PPUSH
20905: LD_STRING DArf-Otpst-1-a-3
20907: PPUSH
20908: CALL_OW 88
20912: GO 20915
20914: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
20915: LD_EXP 35
20919: PPUSH
20920: LD_STRING DG-Otpst-1-5
20922: PPUSH
20923: CALL_OW 88
// end ;
20927: PPOPN 1
20929: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
20930: LD_EXP 39
20934: PPUSH
20935: CALL_OW 256
20939: PUSH
20940: LD_INT 10
20942: LESS
20943: IFFALSE 21057
20945: GO 20947
20947: DISABLE
// begin DialogueOn ;
20948: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
20952: LD_EXP 39
20956: PPUSH
20957: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
20961: LD_EXP 39
20965: PPUSH
20966: LD_STRING DK-Dead-1
20968: PPUSH
20969: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
20973: LD_EXP 34
20977: PPUSH
20978: LD_STRING DH-Dead-2
20980: PPUSH
20981: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
20985: LD_EXP 39
20989: PPUSH
20990: LD_STRING DK-Dead-3
20992: PPUSH
20993: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
20997: LD_EXP 34
21001: PPUSH
21002: LD_STRING DH-Dead-4
21004: PPUSH
21005: CALL_OW 88
// if IsOk ( Mike ) then
21009: LD_EXP 36
21013: PPUSH
21014: CALL_OW 302
21018: IFFALSE 21044
// begin Say ( Mike , DM-Dead-5 ) ;
21020: LD_EXP 36
21024: PPUSH
21025: LD_STRING DM-Dead-5
21027: PPUSH
21028: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
21032: LD_EXP 34
21036: PPUSH
21037: LD_STRING DH-Dead-6
21039: PPUSH
21040: CALL_OW 88
// end ; DialogueOff ;
21044: CALL_OW 7
// KillUnit ( Kaia ) ;
21048: LD_EXP 39
21052: PPUSH
21053: CALL_OW 66
// end ;
21057: END
// every 0 0$1 trigger tick >= 15 15$00 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
21058: LD_OWVAR 1
21062: PUSH
21063: LD_INT 31500
21065: GREATEREQUAL
21066: PUSH
21067: LD_EXP 5
21071: PUSH
21072: LD_INT 5
21074: GREATER
21075: OR
21076: PUSH
21077: LD_INT 22
21079: PUSH
21080: LD_INT 2
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 92
21089: PUSH
21090: LD_INT 103
21092: PUSH
21093: LD_INT 81
21095: PUSH
21096: LD_INT 20
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PPUSH
21109: CALL_OW 69
21113: OR
21114: IFFALSE 21554
21116: GO 21118
21118: DISABLE
21119: LD_INT 0
21121: PPUSH
21122: PPUSH
21123: PPUSH
// begin PrepareRolfSquad ;
21124: CALL 3515 0 0
// dep := HexInfo ( 86 , 54 ) ;
21128: LD_ADDR_VAR 0 3
21132: PUSH
21133: LD_INT 86
21135: PPUSH
21136: LD_INT 54
21138: PPUSH
21139: CALL_OW 428
21143: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
21144: LD_VAR 0 3
21148: PPUSH
21149: CALL_OW 274
21153: PPUSH
21154: LD_INT 1
21156: PPUSH
21157: LD_INT 300
21159: PPUSH
21160: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
21164: LD_VAR 0 3
21168: PPUSH
21169: CALL_OW 274
21173: PPUSH
21174: LD_INT 2
21176: PPUSH
21177: LD_INT 300
21179: PPUSH
21180: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
21184: LD_EXP 51
21188: PPUSH
21189: LD_INT 79
21191: PPUSH
21192: LD_INT 52
21194: PPUSH
21195: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
21199: LD_INT 35
21201: PPUSH
21202: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( rolfSquad , [ f_not , [ f_hastask ] ] ) , 79 , 52 ) ;
21206: LD_EXP 51
21210: PPUSH
21211: LD_INT 3
21213: PUSH
21214: LD_INT 60
21216: PUSH
21217: EMPTY
21218: LIST
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PPUSH
21224: CALL_OW 72
21228: PPUSH
21229: LD_INT 79
21231: PPUSH
21232: LD_INT 52
21234: PPUSH
21235: CALL_OW 114
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
21239: LD_INT 12
21241: PPUSH
21242: LD_INT 22
21244: PUSH
21245: LD_INT 3
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 21
21254: PUSH
21255: LD_INT 1
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PPUSH
21266: CALL_OW 70
21270: NOT
21271: IFFALSE 21199
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
21273: LD_ADDR_VAR 0 2
21277: PUSH
21278: LD_INT 12
21280: PPUSH
21281: LD_INT 21
21283: PUSH
21284: LD_INT 3
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PPUSH
21291: CALL_OW 70
21295: ST_TO_ADDR
// for i in tmp do
21296: LD_ADDR_VAR 0 1
21300: PUSH
21301: LD_VAR 0 2
21305: PUSH
21306: FOR_IN
21307: IFFALSE 21323
// SetSide ( i , 8 ) ;
21309: LD_VAR 0 1
21313: PPUSH
21314: LD_INT 8
21316: PPUSH
21317: CALL_OW 235
21321: GO 21306
21323: POP
21324: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
21325: LD_INT 63
21327: PPUSH
21328: LD_INT 42
21330: PPUSH
21331: CALL_OW 428
21335: PPUSH
21336: LD_INT 320
21338: PPUSH
21339: CALL_OW 234
// wait ( 0 0$10 ) ;
21343: LD_INT 350
21345: PPUSH
21346: CALL_OW 67
// DialogueOn ;
21350: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
21354: LD_INT 8
21356: PPUSH
21357: LD_INT 2
21359: PPUSH
21360: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
21364: LD_INT 86
21366: PPUSH
21367: LD_INT 54
21369: PPUSH
21370: CALL_OW 428
21374: PPUSH
21375: LD_STRING antwerp
21377: PPUSH
21378: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
21382: LD_EXP 47
21386: PPUSH
21387: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
21391: LD_EXP 47
21395: PPUSH
21396: LD_STRING DRf-rast-1
21398: PPUSH
21399: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
21403: LD_EXP 34
21407: PPUSH
21408: LD_STRING DH-rast-2
21410: PPUSH
21411: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
21415: LD_EXP 47
21419: PPUSH
21420: LD_STRING DRf-rast-3
21422: PPUSH
21423: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
21427: LD_EXP 47
21431: PPUSH
21432: LD_STRING DRf-rast-4
21434: PPUSH
21435: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
21439: LD_EXP 47
21443: PPUSH
21444: LD_STRING DRf-rast-5
21446: PPUSH
21447: CALL_OW 94
// if IsOk ( Aviradze ) then
21451: LD_EXP 46
21455: PPUSH
21456: CALL_OW 302
21460: IFFALSE 21519
// begin CenterNowOnUnits ( Aviradze ) ;
21462: LD_EXP 46
21466: PPUSH
21467: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
21471: LD_EXP 46
21475: PPUSH
21476: LD_STRING DA-rast-6
21478: PPUSH
21479: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
21483: LD_EXP 34
21487: PPUSH
21488: LD_STRING DH-rast-7
21490: PPUSH
21491: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
21495: LD_EXP 35
21499: PPUSH
21500: LD_STRING DG-rast-8
21502: PPUSH
21503: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
21507: LD_EXP 35
21511: PPUSH
21512: LD_STRING DG-rast-9
21514: PPUSH
21515: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
21519: LD_EXP 34
21523: PPUSH
21524: LD_STRING DH-rast-10
21526: PPUSH
21527: CALL_OW 88
// DialogueOff ;
21531: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
21535: LD_STRING M2
21537: PPUSH
21538: CALL_OW 337
// bergkampfArrived := true ;
21542: LD_ADDR_EXP 3
21546: PUSH
21547: LD_INT 1
21549: ST_TO_ADDR
// PrepareRolfBase ;
21550: CALL 3846 0 0
// end ;
21554: PPOPN 3
21556: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
21557: LD_INT 12
21559: PPUSH
21560: LD_INT 22
21562: PUSH
21563: LD_INT 2
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PPUSH
21570: CALL_OW 70
21574: PUSH
21575: LD_EXP 47
21579: PPUSH
21580: CALL_OW 302
21584: AND
21585: PUSH
21586: LD_EXP 29
21590: AND
21591: IFFALSE 22151
21593: GO 21595
21595: DISABLE
21596: LD_INT 0
21598: PPUSH
// begin rolfScriptBase := false ;
21599: LD_ADDR_EXP 9
21603: PUSH
21604: LD_INT 0
21606: ST_TO_ADDR
// DialogueOn ;
21607: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
21611: LD_EXP 47
21615: PPUSH
21616: CALL_OW 87
// if rolfSquad >= 10 then
21620: LD_EXP 51
21624: PUSH
21625: LD_INT 10
21627: GREATEREQUAL
21628: IFFALSE 21807
// begin linkedWithRolf := 2 ;
21630: LD_ADDR_EXP 12
21634: PUSH
21635: LD_INT 2
21637: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
21638: LD_EXP 47
21642: PPUSH
21643: LD_STRING DRf-rast-11
21645: PPUSH
21646: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
21650: LD_EXP 34
21654: PPUSH
21655: LD_STRING DH-rast-12
21657: PPUSH
21658: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
21662: LD_EXP 47
21666: PPUSH
21667: LD_STRING DRf-rast-13
21669: PPUSH
21670: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
21674: LD_EXP 34
21678: PPUSH
21679: LD_STRING DH-rast-14
21681: PPUSH
21682: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
21686: LD_EXP 47
21690: PPUSH
21691: LD_STRING DRf-rast-15
21693: PPUSH
21694: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
21698: LD_EXP 34
21702: PPUSH
21703: LD_STRING DH-rast-16
21705: PPUSH
21706: CALL_OW 88
// if IsOk ( Mike ) then
21710: LD_EXP 36
21714: PPUSH
21715: CALL_OW 302
21719: IFFALSE 21793
// begin Say ( Mike , DM-rast-17 ) ;
21721: LD_EXP 36
21725: PPUSH
21726: LD_STRING DM-rast-17
21728: PPUSH
21729: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
21733: LD_EXP 34
21737: PPUSH
21738: LD_STRING DH-rast-18
21740: PPUSH
21741: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
21745: LD_EXP 36
21749: PPUSH
21750: LD_STRING DM-rast-19
21752: PPUSH
21753: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
21757: LD_EXP 34
21761: PPUSH
21762: LD_STRING DH-rast-20
21764: PPUSH
21765: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
21769: LD_EXP 36
21773: PPUSH
21774: LD_STRING DM-rast-21
21776: PPUSH
21777: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
21781: LD_EXP 34
21785: PPUSH
21786: LD_STRING DH-rast-22
21788: PPUSH
21789: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
21793: LD_EXP 34
21797: PPUSH
21798: LD_STRING DH-rast-23
21800: PPUSH
21801: CALL_OW 88
// end else
21805: GO 21957
// begin linkedWithRolf := 1 ;
21807: LD_ADDR_EXP 12
21811: PUSH
21812: LD_INT 1
21814: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
21815: LD_EXP 47
21819: PPUSH
21820: LD_STRING DRf-rast-a-11
21822: PPUSH
21823: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
21827: LD_EXP 34
21831: PPUSH
21832: LD_STRING DH-rast-a-12
21834: PPUSH
21835: CALL_OW 88
// if IsOk ( Kurt ) then
21839: LD_EXP 45
21843: PPUSH
21844: CALL_OW 302
21848: IFFALSE 21945
// begin Say ( Kurt , DKs-rast-a-13 ) ;
21850: LD_EXP 45
21854: PPUSH
21855: LD_STRING DKs-rast-a-13
21857: PPUSH
21858: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
21862: LD_EXP 47
21866: PPUSH
21867: LD_STRING DRf-rast-a-14
21869: PPUSH
21870: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
21874: LD_EXP 47
21878: PPUSH
21879: LD_STRING DRf-rast-a-15
21881: PPUSH
21882: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
21886: LD_EXP 45
21890: PPUSH
21891: LD_STRING DKs-rast-a-16
21893: PPUSH
21894: CALL_OW 88
// if IsOk ( Givi ) then
21898: LD_EXP 35
21902: PPUSH
21903: CALL_OW 302
21907: IFFALSE 21945
// begin Say ( Givi , DG-rast-a-17 ) ;
21909: LD_EXP 35
21913: PPUSH
21914: LD_STRING DG-rast-a-17
21916: PPUSH
21917: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
21921: LD_EXP 35
21925: PPUSH
21926: LD_STRING DG-rast-a-18
21928: PPUSH
21929: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
21933: LD_EXP 45
21937: PPUSH
21938: LD_STRING DKs-rast-a-19
21940: PPUSH
21941: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
21945: LD_EXP 34
21949: PPUSH
21950: LD_STRING DH-rast-a-20
21952: PPUSH
21953: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
21957: LD_EXP 47
21961: PPUSH
21962: LD_STRING DRf-rast-24
21964: PPUSH
21965: CALL_OW 88
// if IsOk ( Aviradze ) then
21969: LD_EXP 46
21973: PPUSH
21974: CALL_OW 302
21978: IFFALSE 22078
// begin Say ( Aviradze , DA-rast-25 ) ;
21980: LD_EXP 46
21984: PPUSH
21985: LD_STRING DA-rast-25
21987: PPUSH
21988: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
21992: LD_EXP 34
21996: PPUSH
21997: LD_STRING DH-rast-26
21999: PPUSH
22000: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
22004: LD_EXP 46
22008: PPUSH
22009: LD_STRING DA-rast-27
22011: PPUSH
22012: CALL_OW 88
// if IsOk ( Markov ) then
22016: LD_EXP 41
22020: PPUSH
22021: CALL_OW 302
22025: IFFALSE 22053
// begin Say ( Markov , DMar-rast-28 ) ;
22027: LD_EXP 41
22031: PPUSH
22032: LD_STRING DMar-rast-28
22034: PPUSH
22035: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
22039: LD_EXP 41
22043: PPUSH
22044: LD_STRING DMar-rast-29
22046: PPUSH
22047: CALL_OW 88
// end else
22051: GO 22076
// if IsOk ( Sophia ) then
22053: LD_EXP 40
22057: PPUSH
22058: CALL_OW 302
22062: IFFALSE 22076
// begin Say ( Sophia , DS-rast-28 ) ;
22064: LD_EXP 40
22068: PPUSH
22069: LD_STRING DS-rast-28
22071: PPUSH
22072: CALL_OW 88
// end ; end else
22076: GO 22101
// if IsOk ( Sophia ) then
22078: LD_EXP 40
22082: PPUSH
22083: CALL_OW 302
22087: IFFALSE 22101
// Say ( Sophia , DS-rast-29 ) ;
22089: LD_EXP 40
22093: PPUSH
22094: LD_STRING DS-rast-29
22096: PPUSH
22097: CALL_OW 88
// DialogueOff ;
22101: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
22105: LD_STRING M3
22107: PPUSH
22108: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
22112: LD_ADDR_VAR 0 1
22116: PUSH
22117: LD_INT 22
22119: PUSH
22120: LD_INT 8
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PPUSH
22127: CALL_OW 69
22131: PUSH
22132: FOR_IN
22133: IFFALSE 22149
// SetSide ( i , 2 ) ;
22135: LD_VAR 0 1
22139: PPUSH
22140: LD_INT 2
22142: PPUSH
22143: CALL_OW 235
22147: GO 22132
22149: POP
22150: POP
// end ;
22151: PPOPN 1
22153: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
22154: LD_EXP 23
22158: PUSH
22159: LD_EXP 12
22163: NOT
22164: AND
22165: PUSH
22166: LD_EXP 29
22170: AND
22171: IFFALSE 22262
22173: GO 22175
22175: DISABLE
22176: LD_INT 0
22178: PPUSH
// begin canRolfJoin := false ;
22179: LD_ADDR_EXP 29
22183: PUSH
22184: LD_INT 0
22186: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
22187: LD_STRING M3
22189: PPUSH
22190: CALL_OW 337
// for i in rolfSquad do
22194: LD_ADDR_VAR 0 1
22198: PUSH
22199: LD_EXP 51
22203: PUSH
22204: FOR_IN
22205: IFFALSE 22260
// begin ComExit ( i ) ;
22207: LD_VAR 0 1
22211: PPUSH
22212: CALL 67287 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
22216: LD_VAR 0 1
22220: PPUSH
22221: LD_INT 147
22223: PPUSH
22224: LD_INT 162
22226: PPUSH
22227: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
22231: LD_VAR 0 1
22235: PPUSH
22236: LD_INT 1050
22238: PPUSH
22239: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
22243: LD_VAR 0 1
22247: PPUSH
22248: LD_INT 103
22250: PPUSH
22251: LD_INT 162
22253: PPUSH
22254: CALL_OW 174
// end ;
22258: GO 22204
22260: POP
22261: POP
// end ;
22262: PPOPN 1
22264: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
22265: LD_EXP 3
22269: PUSH
22270: LD_EXP 47
22274: PPUSH
22275: CALL_OW 256
22279: PUSH
22280: LD_INT 400
22282: LESS
22283: AND
22284: PUSH
22285: LD_EXP 12
22289: NOT
22290: AND
22291: PUSH
22292: LD_EXP 29
22296: AND
22297: IFFALSE 22571
22299: GO 22301
22301: DISABLE
22302: LD_INT 0
22304: PPUSH
// begin DialogueOn ;
22305: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
22309: LD_EXP 47
22313: PPUSH
22314: LD_STRING DRf-rast-f-11
22316: PPUSH
22317: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
22321: LD_EXP 47
22325: PPUSH
22326: LD_STRING DRf-rast-f-12
22328: PPUSH
22329: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
22333: LD_EXP 47
22337: PPUSH
22338: LD_STRING DRf-rast-f-13
22340: PPUSH
22341: CALL_OW 94
// DialogueOff ;
22345: CALL_OW 7
// KillUnit ( Rolf ) ;
22349: LD_EXP 47
22353: PPUSH
22354: CALL_OW 66
// wait ( 0 0$1 ) ;
22358: LD_INT 35
22360: PPUSH
22361: CALL_OW 67
// if not IsOk ( Givi ) then
22365: LD_EXP 35
22369: PPUSH
22370: CALL_OW 302
22374: NOT
22375: IFFALSE 22379
// exit ;
22377: GO 22571
// DialogueOn ;
22379: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
22383: LD_EXP 35
22387: PPUSH
22388: LD_STRING DG-rast-f-14
22390: PPUSH
22391: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
22395: LD_EXP 35
22399: PPUSH
22400: LD_STRING DG-rast-f-15
22402: PPUSH
22403: CALL_OW 88
// if IsOk ( Kaia ) then
22407: LD_EXP 39
22411: PPUSH
22412: CALL_OW 302
22416: IFFALSE 22432
// Say ( Kaia , DK-rast-f-16 ) else
22418: LD_EXP 39
22422: PPUSH
22423: LD_STRING DK-rast-f-16
22425: PPUSH
22426: CALL_OW 88
22430: GO 22519
// if heikeSecondSquad then
22432: LD_EXP 49
22436: IFFALSE 22519
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
22438: LD_ADDR_VAR 0 1
22442: PUSH
22443: LD_EXP 49
22447: PUSH
22448: LD_INT 1
22450: PPUSH
22451: LD_EXP 49
22455: PPUSH
22456: CALL_OW 12
22460: ARRAY
22461: ST_TO_ADDR
// case GetSex ( random ) of 1 :
22462: LD_VAR 0 1
22466: PPUSH
22467: CALL_OW 258
22471: PUSH
22472: LD_INT 1
22474: DOUBLE
22475: EQUAL
22476: IFTRUE 22480
22478: GO 22495
22480: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
22481: LD_VAR 0 1
22485: PPUSH
22486: LD_STRING DArm-rast-f-a-16
22488: PPUSH
22489: CALL_OW 88
22493: GO 22519
22495: LD_INT 2
22497: DOUBLE
22498: EQUAL
22499: IFTRUE 22503
22501: GO 22518
22503: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
22504: LD_VAR 0 1
22508: PPUSH
22509: LD_STRING DArf-rast-f-a-16
22511: PPUSH
22512: CALL_OW 88
22516: GO 22519
22518: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
22519: LD_EXP 35
22523: PPUSH
22524: LD_STRING DG-rast-f-17
22526: PPUSH
22527: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
22531: LD_EXP 35
22535: PPUSH
22536: LD_STRING DG-rast-f-18
22538: PPUSH
22539: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
22543: LD_EXP 35
22547: PPUSH
22548: LD_STRING DG-rast-f-19
22550: PPUSH
22551: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
22555: LD_EXP 35
22559: PPUSH
22560: LD_STRING DG-rast-f-20
22562: PPUSH
22563: CALL_OW 88
// DialogueOff ;
22567: CALL_OW 7
// end ;
22571: PPOPN 1
22573: END
// every 0 0$1 trigger gameActive and SeeArea ( 2 , ruMainBase ) do
22574: LD_EXP 31
22578: PUSH
22579: LD_INT 2
22581: PPUSH
22582: LD_INT 10
22584: PPUSH
22585: CALL_OW 294
22589: AND
22590: IFFALSE 22663
22592: GO 22594
22594: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
22595: LD_EXP 35
22599: PPUSH
22600: LD_STRING DG-Len-1
22602: PPUSH
22603: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
22607: LD_EXP 45
22611: PPUSH
22612: LD_STRING DKs-Len-2
22614: PPUSH
22615: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
22619: LD_EXP 45
22623: PPUSH
22624: LD_STRING DKs-Len-3
22626: PPUSH
22627: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
22631: LD_EXP 34
22635: PPUSH
22636: LD_STRING DH-Len-4
22638: PPUSH
22639: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
22643: LD_EXP 39
22647: PPUSH
22648: LD_STRING DK-Len-5
22650: PPUSH
22651: CALL_OW 88
// leninSpotted := true ;
22655: LD_ADDR_EXP 14
22659: PUSH
22660: LD_INT 1
22662: ST_TO_ADDR
// end ;
22663: END
// every 0 0$1 trigger debug or ( bergkampfArrived and tick > [ 32 32$00 , 30 30$00 , 28 28$00 , 26 26$00 ] [ Difficulty ] ) do var i , tmp , inOmarBase , heikeNearbyOmar ;
22664: LD_EXP 1
22668: PUSH
22669: LD_EXP 3
22673: PUSH
22674: LD_OWVAR 1
22678: PUSH
22679: LD_INT 67200
22681: PUSH
22682: LD_INT 63000
22684: PUSH
22685: LD_INT 58800
22687: PUSH
22688: LD_INT 54600
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: PUSH
22697: LD_OWVAR 67
22701: ARRAY
22702: GREATER
22703: AND
22704: OR
22705: IFFALSE 23442
22707: GO 22709
22709: DISABLE
22710: LD_INT 0
22712: PPUSH
22713: PPUSH
22714: PPUSH
22715: PPUSH
// begin PrepareOmarSquad ;
22716: CALL 5128 0 0
// repeat wait ( 0 0$1 ) ;
22720: LD_INT 35
22722: PPUSH
22723: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
22727: LD_INT 14
22729: PPUSH
22730: LD_INT 22
22732: PUSH
22733: LD_INT 3
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 2
22742: PUSH
22743: LD_INT 21
22745: PUSH
22746: LD_INT 1
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 59
22755: PUSH
22756: EMPTY
22757: LIST
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: LIST
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PPUSH
22768: CALL_OW 70
22772: NOT
22773: IFFALSE 22720
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
22775: LD_ADDR_VAR 0 2
22779: PUSH
22780: LD_INT 14
22782: PPUSH
22783: LD_INT 22
22785: PUSH
22786: LD_INT 2
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PPUSH
22793: CALL_OW 70
22797: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
22798: LD_ADDR_VAR 0 3
22802: PUSH
22803: LD_VAR 0 2
22807: PUSH
22808: LD_INT 0
22810: GREATER
22811: ST_TO_ADDR
// heikeNearbyOmar := IsInArea ( Heike , ruOmarBase ) ;
22812: LD_ADDR_VAR 0 4
22816: PUSH
22817: LD_EXP 34
22821: PPUSH
22822: LD_INT 14
22824: PPUSH
22825: CALL_OW 308
22829: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
22830: LD_VAR 0 2
22834: PPUSH
22835: LD_INT 21
22837: PUSH
22838: LD_INT 3
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PPUSH
22845: CALL_OW 72
22849: IFFALSE 22954
// begin if heikeNearbyOmar then
22851: LD_VAR 0 4
22855: IFFALSE 22871
// Say ( Omar , DOm-Base-1b ) else
22857: LD_EXP 44
22861: PPUSH
22862: LD_STRING DOm-Base-1b
22864: PPUSH
22865: CALL_OW 88
22869: GO 22883
// SayRadio ( Omar , DOm-Base-1br ) ;
22871: LD_EXP 44
22875: PPUSH
22876: LD_STRING DOm-Base-1br
22878: PPUSH
22879: CALL_OW 94
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
22883: LD_ADDR_VAR 0 1
22887: PUSH
22888: LD_VAR 0 2
22892: PPUSH
22893: LD_INT 21
22895: PUSH
22896: LD_INT 3
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PPUSH
22903: CALL_OW 72
22907: PUSH
22908: FOR_IN
22909: IFFALSE 22950
// begin if UnitsInside ( i ) then
22911: LD_VAR 0 1
22915: PPUSH
22916: CALL_OW 313
22920: IFFALSE 22936
// ComExitBuilding ( UnitsInside ( i ) ) ;
22922: LD_VAR 0 1
22926: PPUSH
22927: CALL_OW 313
22931: PPUSH
22932: CALL_OW 122
// SetSide ( i , 5 ) ;
22936: LD_VAR 0 1
22940: PPUSH
22941: LD_INT 5
22943: PPUSH
22944: CALL_OW 235
// end ;
22948: GO 22908
22950: POP
22951: POP
// end else
22952: GO 23047
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
22954: LD_VAR 0 2
22958: PPUSH
22959: LD_INT 21
22961: PUSH
22962: LD_INT 2
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PPUSH
22969: CALL_OW 72
22973: IFFALSE 23009
// begin if heikeNearbyOmar then
22975: LD_VAR 0 4
22979: IFFALSE 22995
// Say ( Omar , DOm-Base-1v ) else
22981: LD_EXP 44
22985: PPUSH
22986: LD_STRING DOm-Base-1v
22988: PPUSH
22989: CALL_OW 88
22993: GO 23007
// SayRadio ( Omar , DOm-Base-1vr ) end else
22995: LD_EXP 44
22999: PPUSH
23000: LD_STRING DOm-Base-1vr
23002: PPUSH
23003: CALL_OW 94
23007: GO 23047
// if inOmarBase then
23009: LD_VAR 0 3
23013: IFFALSE 23047
// begin if heikeNearbyOmar then
23015: LD_VAR 0 4
23019: IFFALSE 23035
// Say ( Omar , DOm-Base-1h ) else
23021: LD_EXP 44
23025: PPUSH
23026: LD_STRING DOm-Base-1h
23028: PPUSH
23029: CALL_OW 88
23033: GO 23047
// SayRadio ( Omar , DOm-Base-1hr ) end ;
23035: LD_EXP 44
23039: PPUSH
23040: LD_STRING DOm-Base-1hr
23042: PPUSH
23043: CALL_OW 94
// for i in omarSquad do
23047: LD_ADDR_VAR 0 1
23051: PUSH
23052: LD_EXP 52
23056: PUSH
23057: FOR_IN
23058: IFFALSE 23089
// if GetLives ( i ) < 750 then
23060: LD_VAR 0 1
23064: PPUSH
23065: CALL_OW 256
23069: PUSH
23070: LD_INT 750
23072: LESS
23073: IFFALSE 23087
// SetLives ( i , 1000 ) ;
23075: LD_VAR 0 1
23079: PPUSH
23080: LD_INT 1000
23082: PPUSH
23083: CALL_OW 234
23087: GO 23057
23089: POP
23090: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
23091: LD_ADDR_VAR 0 1
23095: PUSH
23096: LD_INT 14
23098: PPUSH
23099: LD_INT 21
23101: PUSH
23102: LD_INT 3
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PPUSH
23109: CALL_OW 70
23113: PUSH
23114: FOR_IN
23115: IFFALSE 23131
// SetSide ( i , 5 ) ;
23117: LD_VAR 0 1
23121: PPUSH
23122: LD_INT 5
23124: PPUSH
23125: CALL_OW 235
23129: GO 23114
23131: POP
23132: POP
// wait ( 0 0$3 ) ;
23133: LD_INT 105
23135: PPUSH
23136: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
23140: LD_INT 5
23142: PPUSH
23143: LD_INT 2
23145: PPUSH
23146: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
23150: LD_EXP 44
23154: PPUSH
23155: CALL_OW 87
// DialogueOn ;
23159: CALL_OW 6
// if heikeNearbyOmar then
23163: LD_VAR 0 4
23167: IFFALSE 23225
// begin Say ( Omar , DOm-Veh-1a ) ;
23169: LD_EXP 44
23173: PPUSH
23174: LD_STRING DOm-Veh-1a
23176: PPUSH
23177: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
23181: LD_EXP 44
23185: PPUSH
23186: LD_STRING DOm-Veh-2a
23188: PPUSH
23189: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
23193: LD_EXP 44
23197: PPUSH
23198: LD_STRING DOm-Veh-3a
23200: PPUSH
23201: CALL_OW 88
// if mortarConstructed then
23205: LD_EXP 15
23209: IFFALSE 23223
// Say ( Omar , DOm-Veh-4a ) ;
23211: LD_EXP 44
23215: PPUSH
23216: LD_STRING DOm-Veh-4a
23218: PPUSH
23219: CALL_OW 88
// end else
23223: GO 23279
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
23225: LD_EXP 44
23229: PPUSH
23230: LD_STRING DOm-Veh-1
23232: PPUSH
23233: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
23237: LD_EXP 44
23241: PPUSH
23242: LD_STRING DOm-Veh-2
23244: PPUSH
23245: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
23249: LD_EXP 44
23253: PPUSH
23254: LD_STRING DOm-Veh-3
23256: PPUSH
23257: CALL_OW 94
// if mortarConstructed then
23261: LD_EXP 15
23265: IFFALSE 23279
// SayRadio ( Omar , DOm-Veh-4 ) ;
23267: LD_EXP 44
23271: PPUSH
23272: LD_STRING DOm-Veh-4
23274: PPUSH
23275: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
23279: LD_EXP 34
23283: PPUSH
23284: LD_STRING DH-Veh-5
23286: PPUSH
23287: CALL_OW 88
// if IsOk ( Kurt ) then
23291: LD_EXP 45
23295: PPUSH
23296: CALL_OW 302
23300: IFFALSE 23350
// begin Say ( Kurt , DKs-Veh-6 ) ;
23302: LD_EXP 45
23306: PPUSH
23307: LD_STRING DKs-Veh-6
23309: PPUSH
23310: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
23314: LD_EXP 45
23318: PPUSH
23319: LD_STRING DKs-Veh-7
23321: PPUSH
23322: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
23326: LD_EXP 35
23330: PPUSH
23331: LD_STRING DG-Veh-8
23333: PPUSH
23334: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
23338: LD_EXP 36
23342: PPUSH
23343: LD_STRING DM-Veh-9
23345: PPUSH
23346: CALL_OW 88
// end ; DialogueOff ;
23350: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23354: LD_STRING M4
23356: PPUSH
23357: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
23361: LD_EXP 44
23365: PPUSH
23366: LD_INT 341
23368: PPUSH
23369: LD_INT 232
23371: PPUSH
23372: CALL_OW 428
23376: PPUSH
23377: CALL_OW 120
// omarArrived := true ;
23381: LD_ADDR_EXP 6
23385: PUSH
23386: LD_INT 1
23388: ST_TO_ADDR
// omarScriptBase := true ;
23389: LD_ADDR_EXP 10
23393: PUSH
23394: LD_INT 1
23396: ST_TO_ADDR
// omarWantVehicles := true ;
23397: LD_ADDR_EXP 18
23401: PUSH
23402: LD_INT 1
23404: ST_TO_ADDR
// if debug then
23405: LD_EXP 1
23409: IFFALSE 23442
// begin wait ( 0 0$25 ) ;
23411: LD_INT 875
23413: PPUSH
23414: CALL_OW 67
// omarScriptBase := false ;
23418: LD_ADDR_EXP 10
23422: PUSH
23423: LD_INT 0
23425: ST_TO_ADDR
// omarWantVehicles := false ;
23426: LD_ADDR_EXP 18
23430: PUSH
23431: LD_INT 0
23433: ST_TO_ADDR
// omarAttack := true ;
23434: LD_ADDR_EXP 23
23438: PUSH
23439: LD_INT 1
23441: ST_TO_ADDR
// end ; end ;
23442: PPOPN 4
23444: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
23445: LD_INT 10
23447: PPUSH
23448: LD_INT 22
23450: PUSH
23451: LD_INT 2
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PPUSH
23458: CALL_OW 70
23462: PUSH
23463: LD_EXP 6
23467: AND
23468: PUSH
23469: LD_EXP 44
23473: PPUSH
23474: CALL_OW 302
23478: AND
23479: PUSH
23480: LD_EXP 23
23484: NOT
23485: AND
23486: IFFALSE 23503
23488: GO 23490
23490: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
23491: LD_EXP 44
23495: PPUSH
23496: LD_STRING DOm-Lenin
23498: PPUSH
23499: CALL_OW 94
23503: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
23504: LD_EXP 47
23508: PPUSH
23509: CALL_OW 302
23513: PUSH
23514: LD_EXP 12
23518: AND
23519: PUSH
23520: LD_EXP 6
23524: AND
23525: IFFALSE 23629
23527: GO 23529
23529: DISABLE
// begin wait ( 1 1$00 ) ;
23530: LD_INT 2100
23532: PPUSH
23533: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
23537: LD_EXP 47
23541: PPUSH
23542: CALL_OW 87
// DialogueOn ;
23546: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
23550: LD_EXP 47
23554: PPUSH
23555: LD_STRING DRf-Veh-10
23557: PPUSH
23558: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
23562: LD_EXP 47
23566: PPUSH
23567: LD_STRING DRf-Veh-11
23569: PPUSH
23570: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
23574: LD_EXP 34
23578: PPUSH
23579: LD_STRING DH-Veh-12
23581: PPUSH
23582: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
23586: LD_EXP 34
23590: PPUSH
23591: LD_STRING DH-Veh-13
23593: PPUSH
23594: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
23598: LD_EXP 47
23602: PPUSH
23603: LD_STRING DRf-Veh-14
23605: PPUSH
23606: CALL_OW 88
// DialogueOff ;
23610: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
23614: LD_STRING M5
23616: PPUSH
23617: CALL_OW 337
// rolfWantVehicles := true ;
23621: LD_ADDR_EXP 17
23625: PUSH
23626: LD_INT 1
23628: ST_TO_ADDR
// end ;
23629: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
23630: LD_EXP 18
23634: IFFALSE 24397
23636: GO 23638
23638: DISABLE
23639: LD_INT 0
23641: PPUSH
23642: PPUSH
23643: PPUSH
23644: PPUSH
23645: PPUSH
23646: PPUSH
// begin wait ( 0 0$3 ) ;
23647: LD_INT 105
23649: PPUSH
23650: CALL_OW 67
// Hint ( OmarVehicles ) ;
23654: LD_STRING OmarVehicles
23656: PPUSH
23657: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
23661: LD_INT 16
23663: PPUSH
23664: LD_INT 1
23666: PPUSH
23667: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
23671: LD_INT 35
23673: PPUSH
23674: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
23678: LD_ADDR_EXP 20
23682: PUSH
23683: LD_EXP 20
23687: PUSH
23688: LD_INT 35
23690: MINUS
23691: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
23692: LD_EXP 20
23696: PUSH
23697: LD_INT 0
23699: LESSEQUAL
23700: IFFALSE 23800
// begin display_strings := [ ] ;
23702: LD_ADDR_OWVAR 47
23706: PUSH
23707: EMPTY
23708: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
23709: LD_STRING M4a
23711: PPUSH
23712: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23716: LD_INT 16
23718: PPUSH
23719: LD_INT 0
23721: PPUSH
23722: CALL_OW 424
// DialogueOn ;
23726: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
23730: LD_EXP 44
23734: PPUSH
23735: LD_STRING DOm-Veh-b-15
23737: PPUSH
23738: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
23742: LD_EXP 34
23746: PPUSH
23747: LD_STRING DH-Veh-b-16
23749: PPUSH
23750: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
23754: LD_EXP 44
23758: PPUSH
23759: LD_STRING DOm-Veh-b-17
23761: PPUSH
23762: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
23766: LD_EXP 39
23770: PPUSH
23771: LD_STRING DK-Veh-b-18
23773: PPUSH
23774: CALL_OW 88
// DialogueOff ;
23778: CALL_OW 7
// omarAttack := true ;
23782: LD_ADDR_EXP 23
23786: PUSH
23787: LD_INT 1
23789: ST_TO_ADDR
// omarScriptBase := false ;
23790: LD_ADDR_EXP 10
23794: PUSH
23795: LD_INT 0
23797: ST_TO_ADDR
// exit ;
23798: GO 24397
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
23800: LD_EXP 21
23804: PUSH
23805: LD_INT 16
23807: PPUSH
23808: LD_INT 22
23810: PUSH
23811: LD_INT 2
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 21
23820: PUSH
23821: LD_INT 2
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 3
23830: PUSH
23831: LD_INT 2
23833: PUSH
23834: LD_INT 34
23836: PUSH
23837: LD_INT 32
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 34
23846: PUSH
23847: LD_INT 88
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 34
23856: PUSH
23857: LD_INT 31
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 33
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 58
23886: PUSH
23887: EMPTY
23888: LIST
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: PPUSH
23897: CALL_OW 70
23901: LESSEQUAL
23902: IFFALSE 23671
// omarWaitingForVehiclesTimer := 0 0$00 ;
23904: LD_ADDR_EXP 20
23908: PUSH
23909: LD_INT 0
23911: ST_TO_ADDR
// display_strings := [ ] ;
23912: LD_ADDR_OWVAR 47
23916: PUSH
23917: EMPTY
23918: ST_TO_ADDR
// DialogueOn ;
23919: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
23923: LD_EXP 44
23927: PPUSH
23928: LD_STRING DOm-Veh-a-15
23930: PPUSH
23931: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
23935: LD_EXP 39
23939: PPUSH
23940: LD_STRING DK-Veh-a-16
23942: PPUSH
23943: CALL_OW 88
// DialogueOff ;
23947: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
23951: LD_STRING M4a
23953: PPUSH
23954: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23958: LD_INT 16
23960: PPUSH
23961: LD_INT 0
23963: PPUSH
23964: CALL_OW 424
// omarHasVehicles := true ;
23968: LD_ADDR_EXP 22
23972: PUSH
23973: LD_INT 1
23975: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23976: LD_INT 35
23978: PPUSH
23979: CALL_OW 67
// until rolfWaitingForVehiclesTimer = 0 0$00 ;
23983: LD_EXP 19
23987: PUSH
23988: LD_INT 0
23990: EQUAL
23991: IFFALSE 23976
// wait ( 1 1$00 ) ;
23993: LD_INT 2100
23995: PPUSH
23996: CALL_OW 67
// omarAttack := true ;
24000: LD_ADDR_EXP 23
24004: PUSH
24005: LD_INT 1
24007: ST_TO_ADDR
// omarScriptBase := false ;
24008: LD_ADDR_EXP 10
24012: PUSH
24013: LD_INT 0
24015: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
24016: LD_ADDR_VAR 0 2
24020: PUSH
24021: LD_INT 16
24023: PPUSH
24024: LD_INT 22
24026: PUSH
24027: LD_INT 2
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 21
24036: PUSH
24037: LD_INT 2
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 33
24046: PUSH
24047: LD_INT 1
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 58
24056: PUSH
24057: EMPTY
24058: LIST
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: PPUSH
24066: CALL_OW 70
24070: ST_TO_ADDR
// for i in tmp do
24071: LD_ADDR_VAR 0 1
24075: PUSH
24076: LD_VAR 0 2
24080: PUSH
24081: FOR_IN
24082: IFFALSE 24110
// begin SetFuel ( i , 100 ) ;
24084: LD_VAR 0 1
24088: PPUSH
24089: LD_INT 100
24091: PPUSH
24092: CALL_OW 240
// SetSide ( i , 5 ) ;
24096: LD_VAR 0 1
24100: PPUSH
24101: LD_INT 5
24103: PPUSH
24104: CALL_OW 235
// end ;
24108: GO 24081
24110: POP
24111: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
24112: LD_ADDR_VAR 0 3
24116: PUSH
24117: LD_EXP 52
24121: PPUSH
24122: LD_INT 25
24124: PUSH
24125: LD_INT 2
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PPUSH
24132: CALL_OW 72
24136: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
24137: LD_ADDR_VAR 0 4
24141: PUSH
24142: LD_EXP 52
24146: PPUSH
24147: LD_INT 3
24149: PUSH
24150: LD_INT 55
24152: PUSH
24153: EMPTY
24154: LIST
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 25
24162: PUSH
24163: LD_INT 3
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PPUSH
24174: CALL_OW 72
24178: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
24179: LD_ADDR_VAR 0 5
24183: PUSH
24184: LD_INT 324
24186: PPUSH
24187: LD_INT 234
24189: PPUSH
24190: CALL_OW 428
24194: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
24195: LD_ADDR_VAR 0 6
24199: PUSH
24200: LD_INT 334
24202: PPUSH
24203: LD_INT 241
24205: PPUSH
24206: CALL_OW 428
24210: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
24211: LD_VAR 0 6
24215: PPUSH
24216: CALL_OW 313
24220: PPUSH
24221: CALL_OW 122
// if eng then
24225: LD_VAR 0 3
24229: IFFALSE 24337
// begin if eng + mech <= tmp then
24231: LD_VAR 0 3
24235: PUSH
24236: LD_VAR 0 4
24240: PLUS
24241: PUSH
24242: LD_VAR 0 2
24246: LESSEQUAL
24247: IFFALSE 24302
// begin ComEnterUnit ( eng , workshop ) ;
24249: LD_VAR 0 3
24253: PPUSH
24254: LD_VAR 0 5
24258: PPUSH
24259: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
24263: LD_VAR 0 3
24267: PPUSH
24268: LD_INT 3
24270: PPUSH
24271: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24275: LD_VAR 0 3
24279: PPUSH
24280: CALL_OW 182
// mech := mech union eng ;
24284: LD_ADDR_VAR 0 4
24288: PUSH
24289: LD_VAR 0 4
24293: PUSH
24294: LD_VAR 0 3
24298: UNION
24299: ST_TO_ADDR
// end else
24300: GO 24337
// begin ComEnterUnit ( eng , armoury ) ;
24302: LD_VAR 0 3
24306: PPUSH
24307: LD_VAR 0 6
24311: PPUSH
24312: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
24316: LD_VAR 0 3
24320: PPUSH
24321: LD_INT 1
24323: PPUSH
24324: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24328: LD_VAR 0 3
24332: PPUSH
24333: CALL_OW 182
// end ; end ; for i := 1 to tmp do
24337: LD_ADDR_VAR 0 1
24341: PUSH
24342: DOUBLE
24343: LD_INT 1
24345: DEC
24346: ST_TO_ADDR
24347: LD_VAR 0 2
24351: PUSH
24352: FOR_TO
24353: IFFALSE 24395
// if i <= mech then
24355: LD_VAR 0 1
24359: PUSH
24360: LD_VAR 0 4
24364: LESSEQUAL
24365: IFFALSE 24393
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
24367: LD_VAR 0 4
24371: PUSH
24372: LD_VAR 0 1
24376: ARRAY
24377: PPUSH
24378: LD_VAR 0 2
24382: PUSH
24383: LD_VAR 0 1
24387: ARRAY
24388: PPUSH
24389: CALL_OW 180
24393: GO 24352
24395: POP
24396: POP
// end ;
24397: PPOPN 6
24399: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i , hasBadWeapons ;
24400: LD_EXP 47
24404: PPUSH
24405: CALL_OW 302
24409: PUSH
24410: LD_EXP 17
24414: AND
24415: IFFALSE 25039
24417: GO 24419
24419: DISABLE
24420: LD_INT 0
24422: PPUSH
24423: PPUSH
// begin repeat wait ( 0 0$1 ) ;
24424: LD_INT 35
24426: PPUSH
24427: CALL_OW 67
// hasBadWeapons := false ;
24431: LD_ADDR_VAR 0 2
24435: PUSH
24436: LD_INT 0
24438: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
24439: LD_ADDR_EXP 19
24443: PUSH
24444: LD_EXP 19
24448: PUSH
24449: LD_INT 35
24451: MINUS
24452: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 then
24453: LD_EXP 19
24457: PUSH
24458: LD_INT 0
24460: LESSEQUAL
24461: IFFALSE 24723
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
24463: LD_ADDR_EXP 19
24467: PUSH
24468: LD_INT 0
24470: ST_TO_ADDR
// display_strings := [ ] ;
24471: LD_ADDR_OWVAR 47
24475: PUSH
24476: EMPTY
24477: ST_TO_ADDR
// DialogueOn ;
24478: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
24482: LD_EXP 47
24486: PPUSH
24487: LD_STRING DRf-Veh-b-19
24489: PPUSH
24490: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
24494: LD_EXP 47
24498: PPUSH
24499: LD_STRING DRf-Veh-b-20
24501: PPUSH
24502: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
24506: LD_EXP 34
24510: PPUSH
24511: LD_STRING DH-Veh-b-21
24513: PPUSH
24514: CALL_OW 88
// if IsOk ( Givi ) then
24518: LD_EXP 35
24522: PPUSH
24523: CALL_OW 302
24527: IFFALSE 24565
// begin Say ( Givi , DG-Veh-b-22 ) ;
24529: LD_EXP 35
24533: PPUSH
24534: LD_STRING DG-Veh-b-22
24536: PPUSH
24537: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
24541: LD_EXP 34
24545: PPUSH
24546: LD_STRING DH-Veh-b-23
24548: PPUSH
24549: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
24553: LD_EXP 35
24557: PPUSH
24558: LD_STRING DG-Veh-b-24
24560: PPUSH
24561: CALL_OW 88
// end ; DialogueOff ;
24565: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24569: LD_STRING M5a
24571: PPUSH
24572: CALL_OW 337
// for i in rolfSquad do
24576: LD_ADDR_VAR 0 1
24580: PUSH
24581: LD_EXP 51
24585: PUSH
24586: FOR_IN
24587: IFFALSE 24704
// begin SetSide ( i , 8 ) ;
24589: LD_VAR 0 1
24593: PPUSH
24594: LD_INT 8
24596: PPUSH
24597: CALL_OW 235
// if IsDriver ( i ) then
24601: LD_VAR 0 1
24605: PPUSH
24606: CALL 64505 0 1
24610: IFFALSE 24682
// begin if not GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24612: LD_VAR 0 1
24616: PPUSH
24617: CALL_OW 310
24621: PPUSH
24622: CALL_OW 264
24626: PUSH
24627: LD_INT 51
24629: PUSH
24630: LD_INT 52
24632: PUSH
24633: LD_INT 32
24635: PUSH
24636: LD_INT 88
24638: PUSH
24639: LD_INT 31
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: IN
24649: NOT
24650: IFFALSE 24671
// SetSide ( IsInUnit ( i ) , 8 ) else
24652: LD_VAR 0 1
24656: PPUSH
24657: CALL_OW 310
24661: PPUSH
24662: LD_INT 8
24664: PPUSH
24665: CALL_OW 235
24669: GO 24680
// ComExitVehicle ( i ) ;
24671: LD_VAR 0 1
24675: PPUSH
24676: CALL_OW 121
// end else
24680: GO 24702
// if IsInUnit ( i ) then
24682: LD_VAR 0 1
24686: PPUSH
24687: CALL_OW 310
24691: IFFALSE 24702
// ComExitBuilding ( i ) ;
24693: LD_VAR 0 1
24697: PPUSH
24698: CALL_OW 122
// end ;
24702: GO 24586
24704: POP
24705: POP
// wait ( 0 0$10 ) ;
24706: LD_INT 350
24708: PPUSH
24709: CALL_OW 67
// rolfAttack := true ;
24713: LD_ADDR_EXP 32
24717: PUSH
24718: LD_INT 1
24720: ST_TO_ADDR
// exit ;
24721: GO 25039
// end ; if IsDead ( Rolf ) then
24723: LD_EXP 47
24727: PPUSH
24728: CALL_OW 301
24732: IFFALSE 24743
// begin ChangeMissionObjectives ( M5a ) ;
24734: LD_STRING M5a
24736: PPUSH
24737: CALL_OW 337
// exit ;
24741: GO 25039
// end ; if Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) then
24743: LD_EXP 51
24747: PPUSH
24748: LD_INT 55
24750: PUSH
24751: EMPTY
24752: LIST
24753: PPUSH
24754: CALL_OW 72
24758: PPUSH
24759: CALL 31523 0 1
24763: PUSH
24764: LD_EXP 51
24768: PPUSH
24769: CALL 31523 0 1
24773: EQUAL
24774: IFFALSE 24891
// begin for i in UnitFilter ( rolfSquad , [ f_driving ] ) do
24776: LD_ADDR_VAR 0 1
24780: PUSH
24781: LD_EXP 51
24785: PPUSH
24786: LD_INT 55
24788: PUSH
24789: EMPTY
24790: LIST
24791: PPUSH
24792: CALL_OW 72
24796: PUSH
24797: FOR_IN
24798: IFFALSE 24858
// if GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24800: LD_VAR 0 1
24804: PPUSH
24805: CALL_OW 310
24809: PPUSH
24810: CALL_OW 264
24814: PUSH
24815: LD_INT 51
24817: PUSH
24818: LD_INT 52
24820: PUSH
24821: LD_INT 32
24823: PUSH
24824: LD_INT 88
24826: PUSH
24827: LD_INT 31
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: IN
24837: IFFALSE 24856
// begin hasBadWeapons := true ;
24839: LD_ADDR_VAR 0 2
24843: PUSH
24844: LD_INT 1
24846: ST_TO_ADDR
// Query ( QBadWeapon ) ;
24847: LD_STRING QBadWeapon
24849: PPUSH
24850: CALL_OW 97
// break ;
24854: GO 24858
// end ;
24856: GO 24797
24858: POP
24859: POP
// if not hasBadWeapons then
24860: LD_VAR 0 2
24864: NOT
24865: IFFALSE 24891
// if Query ( QRolf ) = 1 then
24867: LD_STRING QRolf
24869: PPUSH
24870: CALL_OW 97
24874: PUSH
24875: LD_INT 1
24877: EQUAL
24878: IFFALSE 24884
// break else
24880: GO 24895
24882: GO 24891
// wait ( 0 0$15 ) ;
24884: LD_INT 525
24886: PPUSH
24887: CALL_OW 67
// end ; until false ;
24891: LD_INT 0
24893: IFFALSE 24424
// rolfWaitingForVehiclesTimer := 0 0$00 ;
24895: LD_ADDR_EXP 19
24899: PUSH
24900: LD_INT 0
24902: ST_TO_ADDR
// display_strings := [ ] ;
24903: LD_ADDR_OWVAR 47
24907: PUSH
24908: EMPTY
24909: ST_TO_ADDR
// DialogueOn ;
24910: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
24914: LD_EXP 47
24918: PPUSH
24919: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
24923: LD_EXP 47
24927: PPUSH
24928: LD_STRING DRf-Veh-a-17
24930: PPUSH
24931: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
24935: LD_EXP 34
24939: PPUSH
24940: LD_STRING DH-08-Veh-a-18
24942: PPUSH
24943: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
24947: LD_EXP 47
24951: PPUSH
24952: LD_STRING DRf-Veh-a-19
24954: PPUSH
24955: CALL_OW 88
// DialogueOff ;
24959: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24963: LD_STRING M5a
24965: PPUSH
24966: CALL_OW 337
// rolfHasVehicles := true ;
24970: LD_ADDR_EXP 16
24974: PUSH
24975: LD_INT 1
24977: ST_TO_ADDR
// for i in rolfSquad do
24978: LD_ADDR_VAR 0 1
24982: PUSH
24983: LD_EXP 51
24987: PUSH
24988: FOR_IN
24989: IFFALSE 25022
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
24991: LD_VAR 0 1
24995: PPUSH
24996: CALL_OW 310
25000: PPUSH
25001: LD_INT 8
25003: PPUSH
25004: CALL_OW 235
// SetSide ( i , 8 ) ;
25008: LD_VAR 0 1
25012: PPUSH
25013: LD_INT 8
25015: PPUSH
25016: CALL_OW 235
// end ;
25020: GO 24988
25022: POP
25023: POP
// wait ( 0 0$10 ) ;
25024: LD_INT 350
25026: PPUSH
25027: CALL_OW 67
// rolfAttack := true ;
25031: LD_ADDR_EXP 32
25035: PUSH
25036: LD_INT 1
25038: ST_TO_ADDR
// end ;
25039: PPOPN 2
25041: END
// every 0 0$1 trigger rolfAttack and omarAttack do
25042: LD_EXP 32
25046: PUSH
25047: LD_EXP 23
25051: AND
25052: IFFALSE 25064
25054: GO 25056
25056: DISABLE
// ChangeMissionObjectives ( M6a ) ;
25057: LD_STRING M6a
25059: PPUSH
25060: CALL_OW 337
25064: END
// every 0 0$1 trigger leninSpotted do
25065: LD_EXP 14
25069: IFFALSE 25157
25071: GO 25073
25073: DISABLE
// begin wait ( 0 0$10 ) ;
25074: LD_INT 350
25076: PPUSH
25077: CALL_OW 67
// DialogueOn ;
25081: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
25085: LD_EXP 46
25089: PPUSH
25090: LD_STRING DA-Transmission-1
25092: PPUSH
25093: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
25097: LD_EXP 53
25101: PPUSH
25102: LD_STRING DMzw-Transmission-2
25104: PPUSH
25105: CALL_OW 94
// if gaidarKilled then
25109: LD_EXP 7
25113: IFFALSE 25129
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
25115: LD_EXP 53
25119: PPUSH
25120: LD_STRING DMzw-Transmission-3
25122: PPUSH
25123: CALL_OW 94
25127: GO 25141
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
25129: LD_EXP 53
25133: PPUSH
25134: LD_STRING DMzw-Transmission-a-3
25136: PPUSH
25137: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
25141: LD_EXP 34
25145: PPUSH
25146: LD_STRING DH-Transmission-4
25148: PPUSH
25149: CALL_OW 88
// DialogueOff ;
25153: CALL_OW 7
// end ;
25157: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
25158: LD_INT 22
25160: PUSH
25161: LD_INT 3
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 25
25170: PUSH
25171: LD_INT 9
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 101
25180: PUSH
25181: LD_INT 2
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: LIST
25192: PPUSH
25193: CALL_OW 69
25197: PUSH
25198: LD_EXP 34
25202: PPUSH
25203: CALL_OW 302
25207: AND
25208: IFFALSE 25288
25210: GO 25212
25212: DISABLE
// begin wait ( 0 0$3 ) ;
25213: LD_INT 105
25215: PPUSH
25216: CALL_OW 67
// DialogueOn ;
25220: CALL_OW 6
// CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
25224: LD_INT 22
25226: PUSH
25227: LD_INT 3
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 25
25236: PUSH
25237: LD_INT 9
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 101
25246: PUSH
25247: LD_INT 2
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: LIST
25258: PPUSH
25259: CALL_OW 69
25263: PUSH
25264: LD_INT 1
25266: ARRAY
25267: PPUSH
25268: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
25272: LD_EXP 34
25276: PPUSH
25277: LD_STRING DH-Rubazooka-1
25279: PPUSH
25280: CALL_OW 88
// DialogueOff ;
25284: CALL_OW 7
// end ;
25288: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
25289: LD_INT 19
25291: PPUSH
25292: LD_INT 22
25294: PUSH
25295: LD_INT 3
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PPUSH
25302: CALL_OW 70
25306: PUSH
25307: LD_EXP 28
25311: AND
25312: IFFALSE 25371
25314: GO 25316
25316: DISABLE
// begin DialogueOn ;
25317: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25321: LD_INT 19
25323: PPUSH
25324: LD_INT 22
25326: PUSH
25327: LD_INT 3
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PPUSH
25334: CALL_OW 70
25338: PPUSH
25339: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
25343: LD_EXP 34
25347: PPUSH
25348: LD_STRING DH-Ruattfirst-1
25350: PPUSH
25351: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
25355: LD_EXP 34
25359: PPUSH
25360: LD_STRING DH-Ruattfirst-2
25362: PPUSH
25363: CALL_OW 88
// DialogueOff ;
25367: CALL_OW 7
// end ;
25371: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
25372: LD_INT 19
25374: PPUSH
25375: LD_INT 22
25377: PUSH
25378: LD_INT 3
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PPUSH
25385: CALL_OW 70
25389: PUSH
25390: LD_EXP 28
25394: NOT
25395: AND
25396: IFFALSE 25443
25398: GO 25400
25400: DISABLE
// begin DialogueOn ;
25401: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25405: LD_INT 19
25407: PPUSH
25408: LD_INT 22
25410: PUSH
25411: LD_INT 3
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PPUSH
25418: CALL_OW 70
25422: PPUSH
25423: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
25427: LD_EXP 34
25431: PPUSH
25432: LD_STRING DH-Ruattnext-1
25434: PPUSH
25435: CALL_OW 88
// DialogueOff ;
25439: CALL_OW 7
// end ;
25443: END
// every 0 0$3 trigger IsDead ( Morozov ) and IsOk ( Omar ) do
25444: LD_EXP 53
25448: PPUSH
25449: CALL_OW 301
25453: PUSH
25454: LD_EXP 44
25458: PPUSH
25459: CALL_OW 302
25463: AND
25464: IFFALSE 25481
25466: GO 25468
25468: DISABLE
// SayRadio ( Omar , DOm-Morozov ) ;
25469: LD_EXP 44
25473: PPUSH
25474: LD_STRING DOm-Morozov
25476: PPUSH
25477: CALL_OW 94
25481: END
// every 0 0$1 trigger gameActive and GetResourceType ( GetBase ( arDepot ) , mat_oil ) <= 30 do
25482: LD_EXP 31
25486: PUSH
25487: LD_EXP 48
25491: PPUSH
25492: CALL_OW 274
25496: PPUSH
25497: LD_INT 2
25499: PPUSH
25500: CALL_OW 275
25504: PUSH
25505: LD_INT 30
25507: LESSEQUAL
25508: AND
25509: IFFALSE 25599
25511: GO 25513
25513: DISABLE
// begin wait ( 0 0$10 ) ;
25514: LD_INT 350
25516: PPUSH
25517: CALL_OW 67
// DialogueOn ;
25521: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
25525: LD_EXP 34
25529: PPUSH
25530: LD_STRING DH-Fuel-1
25532: PPUSH
25533: CALL_OW 88
// if IsOk ( Givi ) then
25537: LD_EXP 35
25541: PPUSH
25542: CALL_OW 302
25546: IFFALSE 25584
// begin Say ( Givi , DG-Fuel-2 ) ;
25548: LD_EXP 35
25552: PPUSH
25553: LD_STRING DG-Fuel-2
25555: PPUSH
25556: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
25560: LD_EXP 35
25564: PPUSH
25565: LD_STRING DG-Fuel-3
25567: PPUSH
25568: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
25572: LD_EXP 35
25576: PPUSH
25577: LD_STRING DG-Fuel-4
25579: PPUSH
25580: CALL_OW 88
// end ; DialogueOff ;
25584: CALL_OW 7
// Query ( QOil ) ;
25588: LD_STRING QOil
25590: PPUSH
25591: CALL_OW 97
// GoForOil ( ) ;
25595: CALL 8870 0 0
// end ;
25599: END
// every 0 0$1 trigger ( leninSpotted and omarAttack ) or IsDead ( Morozov ) do
25600: LD_EXP 14
25604: PUSH
25605: LD_EXP 23
25609: AND
25610: PUSH
25611: LD_EXP 53
25615: PPUSH
25616: CALL_OW 301
25620: OR
25621: IFFALSE 25962
25623: GO 25625
25625: DISABLE
// begin if IsDead ( Morozov ) then
25626: LD_EXP 53
25630: PPUSH
25631: CALL_OW 301
25635: IFFALSE 25646
// wait ( 1 1$45 ) else
25637: LD_INT 3675
25639: PPUSH
25640: CALL_OW 67
25644: GO 25674
// wait ( [ 9 9$30 , 8 8$00 , 7 7$40 , 6 6$30 ] [ Difficulty ] ) ;
25646: LD_INT 19950
25648: PUSH
25649: LD_INT 16800
25651: PUSH
25652: LD_INT 16100
25654: PUSH
25655: LD_INT 13650
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: PUSH
25664: LD_OWVAR 67
25668: ARRAY
25669: PPUSH
25670: CALL_OW 67
// DialogueOn ;
25674: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
25678: LD_EXP 42
25682: PPUSH
25683: LD_STRING DShar-End-1
25685: PPUSH
25686: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
25690: LD_EXP 34
25694: PPUSH
25695: LD_STRING DH-End-2
25697: PPUSH
25698: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
25702: LD_EXP 42
25706: PPUSH
25707: LD_STRING DShar-End-3
25709: PPUSH
25710: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
25714: LD_EXP 34
25718: PPUSH
25719: LD_STRING DH-End-4
25721: PPUSH
25722: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
25726: LD_EXP 42
25730: PPUSH
25731: LD_STRING DShar-End-5
25733: PPUSH
25734: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
25738: LD_EXP 42
25742: PPUSH
25743: LD_STRING DShar-End-6
25745: PPUSH
25746: CALL_OW 94
// dwait ( 0 0$2 ) ;
25750: LD_INT 70
25752: PPUSH
25753: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
25757: LD_EXP 34
25761: PPUSH
25762: LD_STRING DH-End-7
25764: PPUSH
25765: CALL_OW 88
// DialogueOff ;
25769: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
25773: LD_STRING M6
25775: PPUSH
25776: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
25780: LD_INT 17
25782: PPUSH
25783: LD_INT 1
25785: PPUSH
25786: CALL_OW 424
// escapeAllowed := true ;
25790: LD_ADDR_EXP 24
25794: PUSH
25795: LD_INT 1
25797: ST_TO_ADDR
// wait ( 0 0$2 ) ;
25798: LD_INT 70
25800: PPUSH
25801: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
25805: LD_EXP 45
25809: PPUSH
25810: LD_STRING DKs-End-8
25812: PPUSH
25813: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
25817: LD_EXP 39
25821: PPUSH
25822: LD_STRING DK-End-10
25824: PPUSH
25825: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
25829: LD_EXP 45
25833: PPUSH
25834: LD_STRING DKs-End-9
25836: PPUSH
25837: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
25841: LD_EXP 41
25845: PPUSH
25846: LD_STRING DMar-End-11
25848: PPUSH
25849: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
25853: LD_STRING 05_DrugsTested
25855: PPUSH
25856: LD_EXP 1
25860: PPUSH
25861: CALL_OW 30
25865: IFFALSE 25879
// Say ( Mike , DM-End-12 ) ;
25867: LD_EXP 36
25871: PPUSH
25872: LD_STRING DM-End-12
25874: PPUSH
25875: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
25879: LD_EXP 43
25883: PPUSH
25884: LD_STRING DO-End-13
25886: PPUSH
25887: CALL_OW 88
// if IsOk ( Sophia ) then
25891: LD_EXP 40
25895: PPUSH
25896: CALL_OW 302
25900: IFFALSE 25926
// begin Say ( Sophia , DS-End-15 ) ;
25902: LD_EXP 40
25906: PPUSH
25907: LD_STRING DS-End-15
25909: PPUSH
25910: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
25914: LD_EXP 39
25918: PPUSH
25919: LD_STRING DK-End-16
25921: PPUSH
25922: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
25926: LD_EXP 35
25930: PPUSH
25931: LD_STRING DG-End-17
25933: PPUSH
25934: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
25938: LD_EXP 35
25942: PPUSH
25943: LD_STRING DG-End-18
25945: PPUSH
25946: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
25950: LD_EXP 35
25954: PPUSH
25955: LD_STRING DG-End-19
25957: PPUSH
25958: CALL_OW 88
// end ;
25962: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
25963: LD_EXP 24
25967: IFFALSE 26106
25969: GO 25971
25971: DISABLE
25972: LD_INT 0
25974: PPUSH
25975: PPUSH
// begin repeat wait ( 0 0$1 ) ;
25976: LD_INT 35
25978: PPUSH
25979: CALL_OW 67
// display_strings := [ #X106-2 , escapeTimer ] ;
25983: LD_ADDR_OWVAR 47
25987: PUSH
25988: LD_STRING #X106-2
25990: PUSH
25991: LD_EXP 25
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
26000: LD_ADDR_EXP 25
26004: PUSH
26005: LD_EXP 25
26009: PUSH
26010: LD_INT 35
26012: MINUS
26013: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
26014: LD_ADDR_VAR 0 2
26018: PUSH
26019: LD_INT 17
26021: PPUSH
26022: LD_INT 22
26024: PUSH
26025: LD_INT 2
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 21
26034: PUSH
26035: LD_INT 1
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 23
26044: PUSH
26045: LD_INT 2
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: LIST
26056: PPUSH
26057: CALL_OW 71
26061: ST_TO_ADDR
// if not outsiders then
26062: LD_VAR 0 2
26066: NOT
26067: IFFALSE 26083
// begin escapeAllowed := false ;
26069: LD_ADDR_EXP 24
26073: PUSH
26074: LD_INT 0
26076: ST_TO_ADDR
// MissionWin ;
26077: CALL 26109 0 0
// exit ;
26081: GO 26106
// end ; if escapeTimer <= 0 0$00 then
26083: LD_EXP 25
26087: PUSH
26088: LD_INT 0
26090: LESSEQUAL
26091: IFFALSE 26102
// begin YouLost ( TimeOut ) ;
26093: LD_STRING TimeOut
26095: PPUSH
26096: CALL_OW 104
// exit ;
26100: GO 26106
// end ; until false ;
26102: LD_INT 0
26104: IFFALSE 25976
// end ;
26106: PPOPN 2
26108: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
26109: LD_INT 0
26111: PPUSH
26112: PPUSH
26113: PPUSH
26114: PPUSH
26115: PPUSH
// if tick <= 55 55$00 then
26116: LD_OWVAR 1
26120: PUSH
26121: LD_INT 115500
26123: LESSEQUAL
26124: IFFALSE 26133
// SetAchievement ( ACH_HSPEED_6 ) ;
26126: LD_STRING ACH_HSPEED_6
26128: PPUSH
26129: CALL_OW 543
// Say ( Heike , DH-End-20 ) ;
26133: LD_EXP 34
26137: PPUSH
26138: LD_STRING DH-End-20
26140: PPUSH
26141: CALL_OW 88
// if rolfDied then
26145: LD_EXP 13
26149: IFFALSE 26164
// AddMedal ( med1 , - 1 ) else
26151: LD_STRING med1
26153: PPUSH
26154: LD_INT 1
26156: NEG
26157: PPUSH
26158: CALL_OW 101
26162: GO 26194
// if not canRolfJoin then
26164: LD_EXP 29
26168: NOT
26169: IFFALSE 26184
// AddMedal ( med1 , - 2 ) else
26171: LD_STRING med1
26173: PPUSH
26174: LD_INT 2
26176: NEG
26177: PPUSH
26178: CALL_OW 101
26182: GO 26194
// AddMedal ( med1 , 1 ) ;
26184: LD_STRING med1
26186: PPUSH
26187: LD_INT 1
26189: PPUSH
26190: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
26194: LD_EXP 22
26198: PUSH
26199: LD_EXP 16
26203: AND
26204: IFFALSE 26218
// AddMedal ( med2 , 1 ) else
26206: LD_STRING med2
26208: PPUSH
26209: LD_INT 1
26211: PPUSH
26212: CALL_OW 101
26216: GO 26267
// if omarHasVehicles then
26218: LD_EXP 22
26222: IFFALSE 26237
// AddMedal ( med2 , - 1 ) else
26224: LD_STRING med2
26226: PPUSH
26227: LD_INT 1
26229: NEG
26230: PPUSH
26231: CALL_OW 101
26235: GO 26267
// if rolfHasVehicles then
26237: LD_EXP 16
26241: IFFALSE 26256
// AddMedal ( med2 , - 2 ) else
26243: LD_STRING med2
26245: PPUSH
26246: LD_INT 2
26248: NEG
26249: PPUSH
26250: CALL_OW 101
26254: GO 26267
// AddMedal ( med2 , - 3 ) ;
26256: LD_STRING med2
26258: PPUSH
26259: LD_INT 3
26261: NEG
26262: PPUSH
26263: CALL_OW 101
// if ruLoseCounter >= [ 20 , 30 , 40 , 50 ] [ Difficulty ] and heikeLoseCounter = 0 then
26267: LD_EXP 5
26271: PUSH
26272: LD_INT 20
26274: PUSH
26275: LD_INT 30
26277: PUSH
26278: LD_INT 40
26280: PUSH
26281: LD_INT 50
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: PUSH
26290: LD_OWVAR 67
26294: ARRAY
26295: GREATEREQUAL
26296: PUSH
26297: LD_EXP 26
26301: PUSH
26302: LD_INT 0
26304: EQUAL
26305: AND
26306: IFFALSE 26320
// AddMedal ( med3 , 1 ) else
26308: LD_STRING med3
26310: PPUSH
26311: LD_INT 1
26313: PPUSH
26314: CALL_OW 101
26318: GO 26350
// if heikeLoseCounter then
26320: LD_EXP 26
26324: IFFALSE 26339
// AddMedal ( med3 , - 2 ) else
26326: LD_STRING med3
26328: PPUSH
26329: LD_INT 2
26331: NEG
26332: PPUSH
26333: CALL_OW 101
26337: GO 26350
// AddMedal ( med3 , - 1 ) ;
26339: LD_STRING med3
26341: PPUSH
26342: LD_INT 1
26344: NEG
26345: PPUSH
26346: CALL_OW 101
// GiveMedals ( MAIN ) ;
26350: LD_STRING MAIN
26352: PPUSH
26353: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
26357: LD_INT 22
26359: PUSH
26360: LD_INT 2
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 23
26369: PUSH
26370: LD_INT 2
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 21
26379: PUSH
26380: LD_INT 1
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: LIST
26391: PPUSH
26392: CALL_OW 69
26396: PPUSH
26397: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
26401: LD_EXP 34
26405: PPUSH
26406: LD_STRING 06_Heike
26408: PPUSH
26409: CALL_OW 38
// if Aviradze then
26413: LD_EXP 46
26417: IFFALSE 26431
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
26419: LD_EXP 46
26423: PPUSH
26424: LD_STRING 06_Aviradze
26426: PPUSH
26427: CALL_OW 38
// if Ibrahim then
26431: LD_EXP 37
26435: IFFALSE 26449
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
26437: LD_EXP 37
26441: PPUSH
26442: LD_STRING 06_Ibrahim
26444: PPUSH
26445: CALL_OW 38
// if Kamil then
26449: LD_EXP 38
26453: IFFALSE 26467
// SaveCharacters ( Kamil , 06_Kamil ) ;
26455: LD_EXP 38
26459: PPUSH
26460: LD_STRING 06_Kamil
26462: PPUSH
26463: CALL_OW 38
// if Sophia then
26467: LD_EXP 40
26471: IFFALSE 26485
// SaveCharacters ( Sophia , 06_Sophia ) ;
26473: LD_EXP 40
26477: PPUSH
26478: LD_STRING 06_Sophia
26480: PPUSH
26481: CALL_OW 38
// if Kaia then
26485: LD_EXP 39
26489: IFFALSE 26503
// SaveCharacters ( Kaia , 06_Kaia ) ;
26491: LD_EXP 39
26495: PPUSH
26496: LD_STRING 06_Kaia
26498: PPUSH
26499: CALL_OW 38
// if Givi then
26503: LD_EXP 35
26507: IFFALSE 26521
// SaveCharacters ( Givi , 06_Givi ) ;
26509: LD_EXP 35
26513: PPUSH
26514: LD_STRING 06_Givi
26516: PPUSH
26517: CALL_OW 38
// if Olaf then
26521: LD_EXP 43
26525: IFFALSE 26539
// SaveCharacters ( Olaf , 06_Olaf ) ;
26527: LD_EXP 43
26531: PPUSH
26532: LD_STRING 06_Olaf
26534: PPUSH
26535: CALL_OW 38
// if Mike then
26539: LD_EXP 36
26543: IFFALSE 26557
// SaveCharacters ( Mike , 06_Mike ) ;
26545: LD_EXP 36
26549: PPUSH
26550: LD_STRING 06_Mike
26552: PPUSH
26553: CALL_OW 38
// if Markov then
26557: LD_EXP 41
26561: IFFALSE 26575
// SaveCharacters ( Markov , 06_Markov ) ;
26563: LD_EXP 41
26567: PPUSH
26568: LD_STRING 06_Markov
26570: PPUSH
26571: CALL_OW 38
// if Kurt then
26575: LD_EXP 45
26579: IFFALSE 26593
// SaveCharacters ( Kurt , 06_Kurt ) ;
26581: LD_EXP 45
26585: PPUSH
26586: LD_STRING 06_Kurt
26588: PPUSH
26589: CALL_OW 38
// if heikeSecondSquad then
26593: LD_EXP 49
26597: IFFALSE 26611
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
26599: LD_EXP 49
26603: PPUSH
26604: LD_STRING 06_others
26606: PPUSH
26607: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
26611: LD_ADDR_VAR 0 3
26615: PUSH
26616: LD_INT 22
26618: PUSH
26619: LD_INT 2
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 23
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PPUSH
26640: CALL_OW 69
26644: ST_TO_ADDR
// if tmp then
26645: LD_VAR 0 3
26649: IFFALSE 26663
// SaveCharacters ( tmp , 06_apes ) ;
26651: LD_VAR 0 3
26655: PPUSH
26656: LD_STRING 06_apes
26658: PPUSH
26659: CALL_OW 38
// if Rolf then
26663: LD_EXP 47
26667: IFFALSE 26718
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
26669: LD_EXP 47
26673: PPUSH
26674: LD_STRING 06_Rolf
26676: PPUSH
26677: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
26681: LD_STRING enableBioCharacter(BIO_ROLF)
26683: PPUSH
26684: CALL_OW 559
// if rolfSquad diff Rolf then
26688: LD_EXP 51
26692: PUSH
26693: LD_EXP 47
26697: DIFF
26698: IFFALSE 26718
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
26700: LD_EXP 51
26704: PUSH
26705: LD_EXP 47
26709: DIFF
26710: PPUSH
26711: LD_STRING 06_RolfSquad
26713: PPUSH
26714: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
26718: LD_ADDR_VAR 0 3
26722: PUSH
26723: LD_INT 17
26725: PPUSH
26726: LD_INT 21
26728: PUSH
26729: LD_INT 2
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PPUSH
26736: CALL_OW 70
26740: ST_TO_ADDR
// if tmp then
26741: LD_VAR 0 3
26745: IFFALSE 27039
// begin tmp2 := [ ] ;
26747: LD_ADDR_VAR 0 4
26751: PUSH
26752: EMPTY
26753: ST_TO_ADDR
// for i in tmp do
26754: LD_ADDR_VAR 0 2
26758: PUSH
26759: LD_VAR 0 3
26763: PUSH
26764: FOR_IN
26765: IFFALSE 27025
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
26767: LD_VAR 0 2
26771: PPUSH
26772: CALL_OW 264
26776: PUSH
26777: LD_INT 32
26779: PUSH
26780: LD_INT 12
26782: PUSH
26783: LD_INT 51
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: LIST
26790: IN
26791: IFFALSE 26928
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
26793: LD_ADDR_VAR 0 5
26797: PUSH
26798: LD_VAR 0 2
26802: PPUSH
26803: LD_INT 1
26805: PPUSH
26806: CALL_OW 289
26810: PUSH
26811: LD_VAR 0 2
26815: PPUSH
26816: LD_INT 2
26818: PPUSH
26819: CALL_OW 289
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
26828: LD_ADDR_VAR 0 4
26832: PUSH
26833: LD_VAR 0 4
26837: PPUSH
26838: LD_VAR 0 4
26842: PUSH
26843: LD_INT 1
26845: PLUS
26846: PPUSH
26847: LD_VAR 0 2
26851: PPUSH
26852: CALL_OW 265
26856: PUSH
26857: LD_VAR 0 2
26861: PPUSH
26862: CALL_OW 262
26866: PUSH
26867: LD_VAR 0 2
26871: PPUSH
26872: CALL_OW 263
26876: PUSH
26877: LD_VAR 0 2
26881: PPUSH
26882: CALL_OW 264
26886: PUSH
26887: LD_VAR 0 2
26891: PPUSH
26892: CALL_OW 248
26896: PUSH
26897: LD_VAR 0 2
26901: PPUSH
26902: CALL_OW 256
26906: PUSH
26907: LD_VAR 0 5
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: PPUSH
26921: CALL_OW 1
26925: ST_TO_ADDR
// end else
26926: GO 27023
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
26928: LD_ADDR_VAR 0 4
26932: PUSH
26933: LD_VAR 0 4
26937: PPUSH
26938: LD_VAR 0 4
26942: PUSH
26943: LD_INT 1
26945: PLUS
26946: PPUSH
26947: LD_VAR 0 2
26951: PPUSH
26952: CALL_OW 265
26956: PUSH
26957: LD_VAR 0 2
26961: PPUSH
26962: CALL_OW 262
26966: PUSH
26967: LD_VAR 0 2
26971: PPUSH
26972: CALL_OW 263
26976: PUSH
26977: LD_VAR 0 2
26981: PPUSH
26982: CALL_OW 264
26986: PUSH
26987: LD_VAR 0 2
26991: PPUSH
26992: CALL_OW 248
26996: PUSH
26997: LD_VAR 0 2
27001: PPUSH
27002: CALL_OW 256
27006: PUSH
27007: EMPTY
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: PPUSH
27018: CALL_OW 1
27022: ST_TO_ADDR
27023: GO 26764
27025: POP
27026: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
27027: LD_VAR 0 4
27031: PPUSH
27032: LD_STRING 06_Vehicles
27034: PPUSH
27035: CALL_OW 39
// end ; YouWin ;
27039: CALL_OW 103
// end ; end_of_file
27043: LD_VAR 0 1
27047: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
27048: LD_INT 0
27050: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
27051: LD_VAR 0 1
27055: PPUSH
27056: LD_VAR 0 2
27060: PPUSH
27061: CALL 86919 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
27065: LD_VAR 0 1
27069: PPUSH
27070: CALL_OW 255
27074: PUSH
27075: LD_INT 2
27077: EQUAL
27078: PUSH
27079: LD_OWVAR 52
27083: AND
27084: PUSH
27085: LD_VAR 0 1
27089: PPUSH
27090: CALL_OW 263
27094: PUSH
27095: LD_INT 1
27097: EQUAL
27098: AND
27099: IFFALSE 27154
// begin driver := IsDrivenBy ( vehicle ) ;
27101: LD_ADDR_VAR 0 3
27105: PUSH
27106: LD_VAR 0 1
27110: PPUSH
27111: CALL_OW 311
27115: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
27116: LD_VAR 0 1
27120: PPUSH
27121: LD_INT 211
27123: PPUSH
27124: LD_INT 101
27126: PPUSH
27127: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27131: LD_VAR 0 3
27135: PPUSH
27136: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27140: LD_VAR 0 3
27144: PPUSH
27145: LD_VAR 0 2
27149: PPUSH
27150: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
27154: LD_VAR 0 1
27158: PPUSH
27159: CALL_OW 255
27163: PUSH
27164: LD_INT 3
27166: EQUAL
27167: IFFALSE 27198
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
27169: LD_ADDR_EXP 60
27173: PUSH
27174: LD_EXP 60
27178: PPUSH
27179: LD_EXP 60
27183: PUSH
27184: LD_INT 1
27186: PLUS
27187: PPUSH
27188: LD_VAR 0 1
27192: PPUSH
27193: CALL_OW 1
27197: ST_TO_ADDR
// end ;
27198: PPOPN 3
27200: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
27201: LD_VAR 0 1
27205: PPUSH
27206: CALL_OW 255
27210: PUSH
27211: LD_INT 8
27213: EQUAL
27214: PUSH
27215: LD_VAR 0 1
27219: PPUSH
27220: CALL_OW 266
27224: PUSH
27225: LD_INT 4
27227: EQUAL
27228: AND
27229: IFFALSE 27240
// ComUpgrade ( b ) ;
27231: LD_VAR 0 1
27235: PPUSH
27236: CALL_OW 146
// end ;
27240: PPOPN 1
27242: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
27243: LD_VAR 0 1
27247: PPUSH
27248: CALL 86799 0 1
// if un = Heike then
27252: LD_VAR 0 1
27256: PUSH
27257: LD_EXP 34
27261: EQUAL
27262: IFFALSE 27271
// YouLost ( Heike ) ;
27264: LD_STRING Heike
27266: PPUSH
27267: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
27271: LD_VAR 0 1
27275: PUSH
27276: LD_INT 22
27278: PUSH
27279: LD_INT 2
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 23
27288: PUSH
27289: LD_INT 2
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PPUSH
27300: CALL_OW 69
27304: IN
27305: IFFALSE 27321
// heikeLoseCounter := heikeLoseCounter + 1 ;
27307: LD_ADDR_EXP 26
27311: PUSH
27312: LD_EXP 26
27316: PUSH
27317: LD_INT 1
27319: PLUS
27320: ST_TO_ADDR
// if un = arDepot then
27321: LD_VAR 0 1
27325: PUSH
27326: LD_EXP 48
27330: EQUAL
27331: IFFALSE 27340
// YouLost ( Base ) ;
27333: LD_STRING Base
27335: PPUSH
27336: CALL_OW 104
// if un = Rolf then
27340: LD_VAR 0 1
27344: PUSH
27345: LD_EXP 47
27349: EQUAL
27350: IFFALSE 27360
// rolfDied := true ;
27352: LD_ADDR_EXP 13
27356: PUSH
27357: LD_INT 1
27359: ST_TO_ADDR
// if un in rolfSquad then
27360: LD_VAR 0 1
27364: PUSH
27365: LD_EXP 51
27369: IN
27370: IFFALSE 27388
// rolfSquad := rolfSquad diff un ;
27372: LD_ADDR_EXP 51
27376: PUSH
27377: LD_EXP 51
27381: PUSH
27382: LD_VAR 0 1
27386: DIFF
27387: ST_TO_ADDR
// if un in omarSquad then
27388: LD_VAR 0 1
27392: PUSH
27393: LD_EXP 52
27397: IN
27398: IFFALSE 27416
// omarSquad := omarSquad diff un ;
27400: LD_ADDR_EXP 52
27404: PUSH
27405: LD_EXP 52
27409: PUSH
27410: LD_VAR 0 1
27414: DIFF
27415: ST_TO_ADDR
// if GetSide ( un ) = 3 then
27416: LD_VAR 0 1
27420: PPUSH
27421: CALL_OW 255
27425: PUSH
27426: LD_INT 3
27428: EQUAL
27429: IFFALSE 27445
// ruLoseCounter := ruLoseCounter + 1 ;
27431: LD_ADDR_EXP 5
27435: PUSH
27436: LD_EXP 5
27440: PUSH
27441: LD_INT 1
27443: PLUS
27444: ST_TO_ADDR
// if un in ruAttackers then
27445: LD_VAR 0 1
27449: PUSH
27450: LD_EXP 61
27454: IN
27455: IFFALSE 27473
// ruAttackers := ruAttackers diff un ;
27457: LD_ADDR_EXP 61
27461: PUSH
27462: LD_EXP 61
27466: PUSH
27467: LD_VAR 0 1
27471: DIFF
27472: ST_TO_ADDR
// end ;
27473: PPOPN 1
27475: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) in [ 5 , 8 ] and GetLives ( unit ) < 1000 then
27476: LD_VAR 0 2
27480: PPUSH
27481: CALL_OW 255
27485: PUSH
27486: LD_INT 5
27488: PUSH
27489: LD_INT 8
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: IN
27496: PUSH
27497: LD_VAR 0 2
27501: PPUSH
27502: CALL_OW 256
27506: PUSH
27507: LD_INT 1000
27509: LESS
27510: AND
27511: IFFALSE 27525
// SetLives ( unit , 1000 ) ;
27513: LD_VAR 0 2
27517: PPUSH
27518: LD_INT 1000
27520: PPUSH
27521: CALL_OW 234
// end ;
27525: PPOPN 2
27527: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
27528: LD_INT 0
27530: PPUSH
27531: PPUSH
27532: PPUSH
27533: PPUSH
// begin if GetSide ( vehicle ) = 8 and rolfAttack then
27534: LD_VAR 0 2
27538: PPUSH
27539: CALL_OW 255
27543: PUSH
27544: LD_INT 8
27546: EQUAL
27547: PUSH
27548: LD_EXP 32
27552: AND
27553: IFFALSE 27570
// ComMoveXY ( un , 221 , 161 ) ;
27555: LD_VAR 0 1
27559: PPUSH
27560: LD_INT 221
27562: PPUSH
27563: LD_INT 161
27565: PPUSH
27566: CALL_OW 111
// if GetSide ( vehicle ) = 5 and omarAttack then
27570: LD_VAR 0 2
27574: PPUSH
27575: CALL_OW 255
27579: PUSH
27580: LD_INT 5
27582: EQUAL
27583: PUSH
27584: LD_EXP 23
27588: AND
27589: IFFALSE 27698
// begin ComMoveXY ( un , 333 , 233 ) ;
27591: LD_VAR 0 1
27595: PPUSH
27596: LD_INT 333
27598: PPUSH
27599: LD_INT 233
27601: PPUSH
27602: CALL_OW 111
// if not HexInfo ( 334 , 241 ) or not GetBType ( HexInfo ( 334 , 241 ) ) = b_armoury then
27606: LD_INT 334
27608: PPUSH
27609: LD_INT 241
27611: PPUSH
27612: CALL_OW 428
27616: NOT
27617: PUSH
27618: LD_INT 334
27620: PPUSH
27621: LD_INT 241
27623: PPUSH
27624: CALL_OW 428
27628: PPUSH
27629: CALL_OW 266
27633: PUSH
27634: LD_INT 4
27636: EQUAL
27637: NOT
27638: OR
27639: IFFALSE 27643
// exit ;
27641: GO 28223
// AddComEnterUnit ( un , HexInfo ( 334 , 241 ) ) ;
27643: LD_VAR 0 1
27647: PPUSH
27648: LD_INT 334
27650: PPUSH
27651: LD_INT 241
27653: PPUSH
27654: CALL_OW 428
27658: PPUSH
27659: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
27663: LD_VAR 0 1
27667: PPUSH
27668: LD_INT 1
27670: PPUSH
27671: CALL_OW 183
// AddComExitBuilding ( un ) ;
27675: LD_VAR 0 1
27679: PPUSH
27680: CALL_OW 182
// AddComMoveUnit ( un , Omar ) ;
27684: LD_VAR 0 1
27688: PPUSH
27689: LD_EXP 44
27693: PPUSH
27694: CALL_OW 172
// end ; if GetSide ( un ) = 3 and not un in ruAttackers then
27698: LD_VAR 0 1
27702: PPUSH
27703: CALL_OW 255
27707: PUSH
27708: LD_INT 3
27710: EQUAL
27711: PUSH
27712: LD_VAR 0 1
27716: PUSH
27717: LD_EXP 61
27721: IN
27722: NOT
27723: AND
27724: IFFALSE 28223
// begin if not IsInArea ( un , ruMainBase ) then
27726: LD_VAR 0 1
27730: PPUSH
27731: LD_INT 10
27733: PPUSH
27734: CALL_OW 308
27738: NOT
27739: IFFALSE 27756
// ComMoveXY ( un , 62 , 98 ) ;
27741: LD_VAR 0 1
27745: PPUSH
27746: LD_INT 62
27748: PPUSH
27749: LD_INT 98
27751: PPUSH
27752: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27756: LD_INT 35
27758: PPUSH
27759: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
27763: LD_VAR 0 1
27767: PPUSH
27768: CALL_OW 302
27772: NOT
27773: PUSH
27774: LD_VAR 0 1
27778: PPUSH
27779: LD_INT 10
27781: PPUSH
27782: CALL_OW 308
27786: OR
27787: IFFALSE 27756
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
27789: LD_ADDR_EXP 59
27793: PUSH
27794: LD_EXP 59
27798: PPUSH
27799: LD_EXP 59
27803: PUSH
27804: LD_INT 1
27806: PLUS
27807: PPUSH
27808: LD_VAR 0 1
27812: PPUSH
27813: CALL_OW 1
27817: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
27818: LD_ADDR_VAR 0 8
27822: PUSH
27823: LD_INT 72
27825: PUSH
27826: LD_INT 12
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: ST_TO_ADDR
// if tmp then
27833: LD_VAR 0 8
27837: IFFALSE 27952
// for i in tmp do
27839: LD_ADDR_VAR 0 5
27843: PUSH
27844: LD_VAR 0 8
27848: PUSH
27849: FOR_IN
27850: IFFALSE 27950
// if UnitsInside ( i ) < 6 then
27852: LD_VAR 0 5
27856: PPUSH
27857: CALL_OW 313
27861: PUSH
27862: LD_INT 6
27864: LESS
27865: IFFALSE 27948
// begin AddComEnterUnit ( un , i ) ;
27867: LD_VAR 0 1
27871: PPUSH
27872: LD_VAR 0 5
27876: PPUSH
27877: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
27881: LD_VAR 0 8
27885: PPUSH
27886: LD_INT 22
27888: PUSH
27889: LD_INT 23
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 1
27898: PPUSH
27899: LD_INT 2
27901: PPUSH
27902: CALL_OW 12
27906: ARRAY
27907: PPUSH
27908: LD_INT 1
27910: PPUSH
27911: LD_INT 1
27913: PPUSH
27914: LD_INT 44
27916: PUSH
27917: LD_INT 46
27919: PUSH
27920: LD_INT 47
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 1
27930: PPUSH
27931: LD_INT 3
27933: PPUSH
27934: CALL_OW 12
27938: ARRAY
27939: PPUSH
27940: CALL_OW 185
// exit ;
27944: POP
27945: POP
27946: GO 28223
// end ;
27948: GO 27849
27950: POP
27951: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
27952: LD_ADDR_VAR 0 8
27956: PUSH
27957: LD_INT 10
27959: PPUSH
27960: LD_INT 22
27962: PUSH
27963: LD_INT 3
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 50
27972: PUSH
27973: EMPTY
27974: LIST
27975: PUSH
27976: LD_INT 2
27978: PUSH
27979: LD_INT 30
27981: PUSH
27982: LD_INT 4
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 30
27991: PUSH
27992: LD_INT 5
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 30
28001: PUSH
28002: LD_INT 32
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 30
28011: PUSH
28012: LD_INT 31
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: LIST
28030: PPUSH
28031: CALL_OW 70
28035: ST_TO_ADDR
// if not tmp then
28036: LD_VAR 0 8
28040: NOT
28041: IFFALSE 28060
// begin ComMoveXY ( un , 83 , 133 ) ;
28043: LD_VAR 0 1
28047: PPUSH
28048: LD_INT 83
28050: PPUSH
28051: LD_INT 133
28053: PPUSH
28054: CALL_OW 111
// exit ;
28058: GO 28223
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28060: LD_ADDR_VAR 0 6
28064: PUSH
28065: LD_VAR 0 1
28069: PPUSH
28070: LD_VAR 0 8
28074: PPUSH
28075: LD_INT 1
28077: PPUSH
28078: LD_INT 1
28080: PPUSH
28081: CALL 34993 0 4
28085: PUSH
28086: FOR_IN
28087: IFFALSE 28221
// begin case GetBType ( b ) of b_armoury , b_barracks :
28089: LD_VAR 0 6
28093: PPUSH
28094: CALL_OW 266
28098: PUSH
28099: LD_INT 4
28101: DOUBLE
28102: EQUAL
28103: IFTRUE 28113
28105: LD_INT 5
28107: DOUBLE
28108: EQUAL
28109: IFTRUE 28113
28111: GO 28124
28113: POP
// p := 6 ; b_breastwork , b_bunker :
28114: LD_ADDR_VAR 0 7
28118: PUSH
28119: LD_INT 6
28121: ST_TO_ADDR
28122: GO 28150
28124: LD_INT 31
28126: DOUBLE
28127: EQUAL
28128: IFTRUE 28138
28130: LD_INT 32
28132: DOUBLE
28133: EQUAL
28134: IFTRUE 28138
28136: GO 28149
28138: POP
// p := 1 ; end ;
28139: LD_ADDR_VAR 0 7
28143: PUSH
28144: LD_INT 1
28146: ST_TO_ADDR
28147: GO 28150
28149: POP
// if UnitsInside ( b ) < p then
28150: LD_VAR 0 6
28154: PPUSH
28155: CALL_OW 313
28159: PUSH
28160: LD_VAR 0 7
28164: LESS
28165: IFFALSE 28219
// begin ComEnterUnit ( un , b ) ;
28167: LD_VAR 0 1
28171: PPUSH
28172: LD_VAR 0 6
28176: PPUSH
28177: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
28181: LD_VAR 0 6
28185: PPUSH
28186: CALL_OW 266
28190: PUSH
28191: LD_INT 4
28193: PUSH
28194: LD_INT 5
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: IN
28201: IFFALSE 28215
// AddComChangeProfession ( un , class_soldier ) ;
28203: LD_VAR 0 1
28207: PPUSH
28208: LD_INT 1
28210: PPUSH
28211: CALL_OW 183
// exit ;
28215: POP
28216: POP
28217: GO 28223
// end ; end ;
28219: GO 28086
28221: POP
28222: POP
// end ; end ;
28223: PPOPN 8
28225: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
28226: LD_INT 0
28228: PPUSH
28229: PPUSH
28230: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
28231: LD_VAR 0 2
28235: PPUSH
28236: CALL_OW 255
28240: PUSH
28241: LD_INT 3
28243: EQUAL
28244: PUSH
28245: LD_VAR 0 2
28249: PPUSH
28250: CALL_OW 257
28254: PUSH
28255: LD_INT 1
28257: EQUAL
28258: AND
28259: PUSH
28260: LD_VAR 0 2
28264: PUSH
28265: LD_EXP 59
28269: IN
28270: NOT
28271: AND
28272: IFFALSE 28585
// begin ComMoveToArea ( un , ruMainBase ) ;
28274: LD_VAR 0 2
28278: PPUSH
28279: LD_INT 10
28281: PPUSH
28282: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
28286: LD_INT 35
28288: PPUSH
28289: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
28293: LD_VAR 0 2
28297: PPUSH
28298: CALL_OW 302
28302: NOT
28303: PUSH
28304: LD_VAR 0 2
28308: PPUSH
28309: LD_INT 10
28311: PPUSH
28312: CALL_OW 308
28316: OR
28317: IFFALSE 28286
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
28319: LD_ADDR_EXP 59
28323: PUSH
28324: LD_EXP 59
28328: PPUSH
28329: LD_EXP 59
28333: PUSH
28334: LD_INT 1
28336: PLUS
28337: PPUSH
28338: LD_VAR 0 2
28342: PPUSH
28343: CALL_OW 1
28347: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28348: LD_ADDR_VAR 0 4
28352: PUSH
28353: LD_INT 10
28355: PPUSH
28356: LD_INT 22
28358: PUSH
28359: LD_INT 3
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 50
28368: PUSH
28369: EMPTY
28370: LIST
28371: PUSH
28372: LD_INT 2
28374: PUSH
28375: LD_INT 30
28377: PUSH
28378: LD_INT 4
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 30
28387: PUSH
28388: LD_INT 5
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 30
28397: PUSH
28398: LD_INT 32
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 30
28407: PUSH
28408: LD_INT 31
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: LIST
28426: PPUSH
28427: CALL_OW 70
28431: ST_TO_ADDR
// if not tmp then
28432: LD_VAR 0 4
28436: NOT
28437: IFFALSE 28456
// begin ComMoveXY ( un , 83 , 133 ) ;
28439: LD_VAR 0 2
28443: PPUSH
28444: LD_INT 83
28446: PPUSH
28447: LD_INT 133
28449: PPUSH
28450: CALL_OW 111
// exit ;
28454: GO 28834
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28456: LD_ADDR_VAR 0 5
28460: PUSH
28461: LD_VAR 0 2
28465: PPUSH
28466: LD_VAR 0 4
28470: PPUSH
28471: LD_INT 1
28473: PPUSH
28474: LD_INT 1
28476: PPUSH
28477: CALL 34993 0 4
28481: PUSH
28482: FOR_IN
28483: IFFALSE 28583
// begin case GetBType ( b ) of b_armoury , b_barracks :
28485: LD_VAR 0 5
28489: PPUSH
28490: CALL_OW 266
28494: PUSH
28495: LD_INT 4
28497: DOUBLE
28498: EQUAL
28499: IFTRUE 28509
28501: LD_INT 5
28503: DOUBLE
28504: EQUAL
28505: IFTRUE 28509
28507: GO 28520
28509: POP
// p := 6 ; b_breastwork , b_bunker :
28510: LD_ADDR_VAR 0 3
28514: PUSH
28515: LD_INT 6
28517: ST_TO_ADDR
28518: GO 28546
28520: LD_INT 31
28522: DOUBLE
28523: EQUAL
28524: IFTRUE 28534
28526: LD_INT 32
28528: DOUBLE
28529: EQUAL
28530: IFTRUE 28534
28532: GO 28545
28534: POP
// p := 1 ; end ;
28535: LD_ADDR_VAR 0 3
28539: PUSH
28540: LD_INT 1
28542: ST_TO_ADDR
28543: GO 28546
28545: POP
// if UnitsInside ( b ) < p then
28546: LD_VAR 0 5
28550: PPUSH
28551: CALL_OW 313
28555: PUSH
28556: LD_VAR 0 3
28560: LESS
28561: IFFALSE 28581
// begin ComEnterUnit ( un , b ) ;
28563: LD_VAR 0 2
28567: PPUSH
28568: LD_VAR 0 5
28572: PPUSH
28573: CALL_OW 120
// exit ;
28577: POP
28578: POP
28579: GO 28834
// end ; end ;
28581: GO 28482
28583: POP
28584: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
28585: LD_VAR 0 2
28589: PUSH
28590: LD_EXP 59
28594: IN
28595: PUSH
28596: LD_VAR 0 2
28600: PPUSH
28601: CALL_OW 257
28605: PUSH
28606: LD_INT 1
28608: EQUAL
28609: AND
28610: IFFALSE 28834
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28612: LD_ADDR_VAR 0 4
28616: PUSH
28617: LD_INT 10
28619: PPUSH
28620: LD_INT 22
28622: PUSH
28623: LD_INT 3
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 50
28632: PUSH
28633: EMPTY
28634: LIST
28635: PUSH
28636: LD_INT 2
28638: PUSH
28639: LD_INT 30
28641: PUSH
28642: LD_INT 4
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 30
28651: PUSH
28652: LD_INT 5
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 30
28661: PUSH
28662: LD_INT 32
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 30
28671: PUSH
28672: LD_INT 31
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: LIST
28690: PPUSH
28691: CALL_OW 70
28695: ST_TO_ADDR
// if not tmp then
28696: LD_VAR 0 4
28700: NOT
28701: IFFALSE 28705
// exit ;
28703: GO 28834
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
28705: LD_ADDR_VAR 0 5
28709: PUSH
28710: LD_VAR 0 2
28714: PPUSH
28715: LD_VAR 0 4
28719: PPUSH
28720: LD_INT 1
28722: PPUSH
28723: LD_INT 1
28725: PPUSH
28726: CALL 34993 0 4
28730: PUSH
28731: FOR_IN
28732: IFFALSE 28832
// begin case GetBType ( b ) of b_armoury , b_barracks :
28734: LD_VAR 0 5
28738: PPUSH
28739: CALL_OW 266
28743: PUSH
28744: LD_INT 4
28746: DOUBLE
28747: EQUAL
28748: IFTRUE 28758
28750: LD_INT 5
28752: DOUBLE
28753: EQUAL
28754: IFTRUE 28758
28756: GO 28769
28758: POP
// p := 6 ; b_breastwork , b_bunker :
28759: LD_ADDR_VAR 0 3
28763: PUSH
28764: LD_INT 6
28766: ST_TO_ADDR
28767: GO 28795
28769: LD_INT 31
28771: DOUBLE
28772: EQUAL
28773: IFTRUE 28783
28775: LD_INT 32
28777: DOUBLE
28778: EQUAL
28779: IFTRUE 28783
28781: GO 28794
28783: POP
// p := 1 ; end ;
28784: LD_ADDR_VAR 0 3
28788: PUSH
28789: LD_INT 1
28791: ST_TO_ADDR
28792: GO 28795
28794: POP
// if UnitsInside ( b ) < p then
28795: LD_VAR 0 5
28799: PPUSH
28800: CALL_OW 313
28804: PUSH
28805: LD_VAR 0 3
28809: LESS
28810: IFFALSE 28830
// begin ComEnterUnit ( un , b ) ;
28812: LD_VAR 0 2
28816: PPUSH
28817: LD_VAR 0 5
28821: PPUSH
28822: CALL_OW 120
// exit ;
28826: POP
28827: POP
28828: GO 28834
// end ; end ;
28830: GO 28731
28832: POP
28833: POP
// end ; end ;
28834: PPOPN 5
28836: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
28837: LD_VAR 0 1
28841: PUSH
28842: LD_INT 2
28844: EQUAL
28845: PUSH
28846: LD_VAR 0 2
28850: PUSH
28851: LD_INT 5
28853: PUSH
28854: LD_INT 8
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: IN
28861: AND
28862: IFFALSE 28871
// YouLost ( FriendlyFire ) ;
28864: LD_STRING FriendlyFire
28866: PPUSH
28867: CALL_OW 104
// end ;
28871: PPOPN 2
28873: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
28874: LD_VAR 0 1
28878: PPUSH
28879: CALL_OW 255
28883: PUSH
28884: LD_INT 8
28886: EQUAL
28887: PUSH
28888: LD_VAR 0 1
28892: PPUSH
28893: CALL_OW 266
28897: PUSH
28898: LD_INT 5
28900: EQUAL
28901: AND
28902: IFFALSE 28916
// SetClass ( unit , class_mortar ) ;
28904: LD_VAR 0 2
28908: PPUSH
28909: LD_INT 8
28911: PPUSH
28912: CALL_OW 336
// end ; end_of_file
28916: PPOPN 2
28918: END
// every 0 0$35 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 20 , 18 , 16 , 12 ] [ Difficulty ] do
28919: LD_INT 6
28921: PPUSH
28922: LD_INT 1
28924: PPUSH
28925: CALL_OW 287
28929: PUSH
28930: LD_INT 20
28932: PUSH
28933: LD_INT 18
28935: PUSH
28936: LD_INT 16
28938: PUSH
28939: LD_INT 12
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: PUSH
28948: LD_OWVAR 67
28952: ARRAY
28953: LESS
28954: IFFALSE 28981
28956: GO 28958
28958: DISABLE
// begin enable ;
28959: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
28960: LD_INT 1
28962: PPUSH
28963: LD_INT 5
28965: PPUSH
28966: CALL_OW 12
28970: PPUSH
28971: LD_INT 6
28973: PPUSH
28974: LD_INT 1
28976: PPUSH
28977: CALL_OW 55
// end ;
28981: END
// every 0 0$25 trigger Prob ( 50 ) and tick < [ 28 28$00 , 27 27$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] and GetResourceArea ( southCrates , mat_cans ) < 10 do
28982: LD_INT 50
28984: PPUSH
28985: CALL_OW 13
28989: PUSH
28990: LD_OWVAR 1
28994: PUSH
28995: LD_INT 58800
28997: PUSH
28998: LD_INT 56700
29000: PUSH
29001: LD_INT 54600
29003: PUSH
29004: LD_INT 52500
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: PUSH
29013: LD_OWVAR 67
29017: ARRAY
29018: LESS
29019: AND
29020: PUSH
29021: LD_INT 21
29023: PPUSH
29024: LD_INT 1
29026: PPUSH
29027: CALL_OW 287
29031: PUSH
29032: LD_INT 10
29034: LESS
29035: AND
29036: IFFALSE 29078
29038: GO 29040
29040: DISABLE
// begin enable ;
29041: ENABLE
// wait ( rand ( 0 0$1 , 0 0$10 ) ) ;
29042: LD_INT 35
29044: PPUSH
29045: LD_INT 350
29047: PPUSH
29048: CALL_OW 12
29052: PPUSH
29053: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , southCrates , true ) ;
29057: LD_INT 1
29059: PPUSH
29060: LD_INT 5
29062: PPUSH
29063: CALL_OW 12
29067: PPUSH
29068: LD_INT 21
29070: PPUSH
29071: LD_INT 1
29073: PPUSH
29074: CALL_OW 55
// end ; end_of_file
29078: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
29079: LD_EXP 18
29083: PUSH
29084: LD_EXP 20
29088: AND
29089: PUSH
29090: LD_EXP 17
29094: PUSH
29095: LD_EXP 19
29099: AND
29100: OR
29101: IFFALSE 29420
29103: GO 29105
29105: DISABLE
// begin enable ;
29106: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
29107: LD_EXP 18
29111: PUSH
29112: LD_EXP 20
29116: AND
29117: PUSH
29118: LD_EXP 17
29122: PUSH
29123: LD_EXP 19
29127: AND
29128: AND
29129: IFFALSE 29266
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29131: LD_ADDR_OWVAR 47
29135: PUSH
29136: LD_STRING #X106-1a
29138: PUSH
29139: LD_EXP 21
29143: PUSH
29144: LD_INT 16
29146: PPUSH
29147: LD_INT 22
29149: PUSH
29150: LD_INT 2
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: LD_INT 21
29159: PUSH
29160: LD_INT 2
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 33
29169: PUSH
29170: LD_INT 1
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 58
29179: PUSH
29180: EMPTY
29181: LIST
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: PPUSH
29189: CALL_OW 70
29193: MINUS
29194: PPUSH
29195: CALL 69075 0 1
29199: PUSH
29200: LD_STRING #X106-3a
29202: PUSH
29203: LD_EXP 20
29207: PUSH
29208: LD_STRING #X106-1
29210: PUSH
29211: LD_EXP 51
29215: PUSH
29216: LD_INT 0
29218: PLUS
29219: PUSH
29220: LD_EXP 51
29224: PPUSH
29225: LD_INT 55
29227: PUSH
29228: EMPTY
29229: LIST
29230: PPUSH
29231: CALL_OW 72
29235: PUSH
29236: LD_INT 0
29238: PLUS
29239: MINUS
29240: PPUSH
29241: CALL 69075 0 1
29245: PUSH
29246: LD_STRING #X106-3
29248: PUSH
29249: LD_EXP 19
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: ST_TO_ADDR
// end else
29264: GO 29420
// if omarWantVehicles and omarWaitingForVehiclesTimer then
29266: LD_EXP 18
29270: PUSH
29271: LD_EXP 20
29275: AND
29276: IFFALSE 29363
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
29278: LD_ADDR_OWVAR 47
29282: PUSH
29283: LD_STRING #X106-1a
29285: PUSH
29286: LD_EXP 21
29290: PUSH
29291: LD_INT 16
29293: PPUSH
29294: LD_INT 22
29296: PUSH
29297: LD_INT 2
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 21
29306: PUSH
29307: LD_INT 2
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 33
29316: PUSH
29317: LD_INT 1
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 58
29326: PUSH
29327: EMPTY
29328: LIST
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: PPUSH
29336: CALL_OW 70
29340: MINUS
29341: PPUSH
29342: CALL 69075 0 1
29346: PUSH
29347: LD_STRING #X106-3a
29349: PUSH
29350: LD_EXP 20
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: ST_TO_ADDR
// end else
29361: GO 29420
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29363: LD_ADDR_OWVAR 47
29367: PUSH
29368: LD_STRING #X106-1
29370: PUSH
29371: LD_EXP 51
29375: PUSH
29376: LD_INT 0
29378: PLUS
29379: PUSH
29380: LD_EXP 51
29384: PPUSH
29385: LD_INT 55
29387: PUSH
29388: EMPTY
29389: LIST
29390: PPUSH
29391: CALL_OW 72
29395: PUSH
29396: LD_INT 0
29398: PLUS
29399: MINUS
29400: PPUSH
29401: CALL 69075 0 1
29405: PUSH
29406: LD_STRING #X106-3
29408: PUSH
29409: LD_EXP 19
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: ST_TO_ADDR
// end ; end ; end_of_file
29420: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29421: LD_INT 0
29423: PPUSH
29424: PPUSH
// if exist_mode then
29425: LD_VAR 0 2
29429: IFFALSE 29454
// unit := CreateCharacter ( prefix & ident ) else
29431: LD_ADDR_VAR 0 5
29435: PUSH
29436: LD_VAR 0 3
29440: PUSH
29441: LD_VAR 0 1
29445: STR
29446: PPUSH
29447: CALL_OW 34
29451: ST_TO_ADDR
29452: GO 29469
// unit := NewCharacter ( ident ) ;
29454: LD_ADDR_VAR 0 5
29458: PUSH
29459: LD_VAR 0 1
29463: PPUSH
29464: CALL_OW 25
29468: ST_TO_ADDR
// result := unit ;
29469: LD_ADDR_VAR 0 4
29473: PUSH
29474: LD_VAR 0 5
29478: ST_TO_ADDR
// end ;
29479: LD_VAR 0 4
29483: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29484: LD_INT 0
29486: PPUSH
29487: PPUSH
// if not side or not nation then
29488: LD_VAR 0 1
29492: NOT
29493: PUSH
29494: LD_VAR 0 2
29498: NOT
29499: OR
29500: IFFALSE 29504
// exit ;
29502: GO 30272
// case nation of nation_american :
29504: LD_VAR 0 2
29508: PUSH
29509: LD_INT 1
29511: DOUBLE
29512: EQUAL
29513: IFTRUE 29517
29515: GO 29731
29517: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29518: LD_ADDR_VAR 0 4
29522: PUSH
29523: LD_INT 35
29525: PUSH
29526: LD_INT 45
29528: PUSH
29529: LD_INT 46
29531: PUSH
29532: LD_INT 47
29534: PUSH
29535: LD_INT 82
29537: PUSH
29538: LD_INT 83
29540: PUSH
29541: LD_INT 84
29543: PUSH
29544: LD_INT 85
29546: PUSH
29547: LD_INT 86
29549: PUSH
29550: LD_INT 1
29552: PUSH
29553: LD_INT 2
29555: PUSH
29556: LD_INT 6
29558: PUSH
29559: LD_INT 15
29561: PUSH
29562: LD_INT 16
29564: PUSH
29565: LD_INT 7
29567: PUSH
29568: LD_INT 12
29570: PUSH
29571: LD_INT 13
29573: PUSH
29574: LD_INT 10
29576: PUSH
29577: LD_INT 14
29579: PUSH
29580: LD_INT 20
29582: PUSH
29583: LD_INT 21
29585: PUSH
29586: LD_INT 22
29588: PUSH
29589: LD_INT 25
29591: PUSH
29592: LD_INT 32
29594: PUSH
29595: LD_INT 27
29597: PUSH
29598: LD_INT 36
29600: PUSH
29601: LD_INT 69
29603: PUSH
29604: LD_INT 39
29606: PUSH
29607: LD_INT 34
29609: PUSH
29610: LD_INT 40
29612: PUSH
29613: LD_INT 48
29615: PUSH
29616: LD_INT 49
29618: PUSH
29619: LD_INT 50
29621: PUSH
29622: LD_INT 51
29624: PUSH
29625: LD_INT 52
29627: PUSH
29628: LD_INT 53
29630: PUSH
29631: LD_INT 54
29633: PUSH
29634: LD_INT 55
29636: PUSH
29637: LD_INT 56
29639: PUSH
29640: LD_INT 57
29642: PUSH
29643: LD_INT 58
29645: PUSH
29646: LD_INT 59
29648: PUSH
29649: LD_INT 60
29651: PUSH
29652: LD_INT 61
29654: PUSH
29655: LD_INT 62
29657: PUSH
29658: LD_INT 80
29660: PUSH
29661: LD_INT 82
29663: PUSH
29664: LD_INT 83
29666: PUSH
29667: LD_INT 84
29669: PUSH
29670: LD_INT 85
29672: PUSH
29673: LD_INT 86
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: ST_TO_ADDR
29729: GO 30196
29731: LD_INT 2
29733: DOUBLE
29734: EQUAL
29735: IFTRUE 29739
29737: GO 29965
29739: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29740: LD_ADDR_VAR 0 4
29744: PUSH
29745: LD_INT 35
29747: PUSH
29748: LD_INT 45
29750: PUSH
29751: LD_INT 46
29753: PUSH
29754: LD_INT 47
29756: PUSH
29757: LD_INT 82
29759: PUSH
29760: LD_INT 83
29762: PUSH
29763: LD_INT 84
29765: PUSH
29766: LD_INT 85
29768: PUSH
29769: LD_INT 87
29771: PUSH
29772: LD_INT 70
29774: PUSH
29775: LD_INT 1
29777: PUSH
29778: LD_INT 11
29780: PUSH
29781: LD_INT 3
29783: PUSH
29784: LD_INT 4
29786: PUSH
29787: LD_INT 5
29789: PUSH
29790: LD_INT 6
29792: PUSH
29793: LD_INT 15
29795: PUSH
29796: LD_INT 18
29798: PUSH
29799: LD_INT 7
29801: PUSH
29802: LD_INT 17
29804: PUSH
29805: LD_INT 8
29807: PUSH
29808: LD_INT 20
29810: PUSH
29811: LD_INT 21
29813: PUSH
29814: LD_INT 22
29816: PUSH
29817: LD_INT 72
29819: PUSH
29820: LD_INT 26
29822: PUSH
29823: LD_INT 69
29825: PUSH
29826: LD_INT 39
29828: PUSH
29829: LD_INT 40
29831: PUSH
29832: LD_INT 41
29834: PUSH
29835: LD_INT 42
29837: PUSH
29838: LD_INT 43
29840: PUSH
29841: LD_INT 48
29843: PUSH
29844: LD_INT 49
29846: PUSH
29847: LD_INT 50
29849: PUSH
29850: LD_INT 51
29852: PUSH
29853: LD_INT 52
29855: PUSH
29856: LD_INT 53
29858: PUSH
29859: LD_INT 54
29861: PUSH
29862: LD_INT 55
29864: PUSH
29865: LD_INT 56
29867: PUSH
29868: LD_INT 60
29870: PUSH
29871: LD_INT 61
29873: PUSH
29874: LD_INT 62
29876: PUSH
29877: LD_INT 66
29879: PUSH
29880: LD_INT 67
29882: PUSH
29883: LD_INT 68
29885: PUSH
29886: LD_INT 81
29888: PUSH
29889: LD_INT 82
29891: PUSH
29892: LD_INT 83
29894: PUSH
29895: LD_INT 84
29897: PUSH
29898: LD_INT 85
29900: PUSH
29901: LD_INT 87
29903: PUSH
29904: LD_INT 88
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: ST_TO_ADDR
29963: GO 30196
29965: LD_INT 3
29967: DOUBLE
29968: EQUAL
29969: IFTRUE 29973
29971: GO 30195
29973: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29974: LD_ADDR_VAR 0 4
29978: PUSH
29979: LD_INT 46
29981: PUSH
29982: LD_INT 47
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: LD_INT 2
29990: PUSH
29991: LD_INT 82
29993: PUSH
29994: LD_INT 83
29996: PUSH
29997: LD_INT 84
29999: PUSH
30000: LD_INT 85
30002: PUSH
30003: LD_INT 86
30005: PUSH
30006: LD_INT 11
30008: PUSH
30009: LD_INT 9
30011: PUSH
30012: LD_INT 20
30014: PUSH
30015: LD_INT 19
30017: PUSH
30018: LD_INT 21
30020: PUSH
30021: LD_INT 24
30023: PUSH
30024: LD_INT 22
30026: PUSH
30027: LD_INT 25
30029: PUSH
30030: LD_INT 28
30032: PUSH
30033: LD_INT 29
30035: PUSH
30036: LD_INT 30
30038: PUSH
30039: LD_INT 31
30041: PUSH
30042: LD_INT 37
30044: PUSH
30045: LD_INT 38
30047: PUSH
30048: LD_INT 32
30050: PUSH
30051: LD_INT 27
30053: PUSH
30054: LD_INT 33
30056: PUSH
30057: LD_INT 69
30059: PUSH
30060: LD_INT 39
30062: PUSH
30063: LD_INT 34
30065: PUSH
30066: LD_INT 40
30068: PUSH
30069: LD_INT 71
30071: PUSH
30072: LD_INT 23
30074: PUSH
30075: LD_INT 44
30077: PUSH
30078: LD_INT 48
30080: PUSH
30081: LD_INT 49
30083: PUSH
30084: LD_INT 50
30086: PUSH
30087: LD_INT 51
30089: PUSH
30090: LD_INT 52
30092: PUSH
30093: LD_INT 53
30095: PUSH
30096: LD_INT 54
30098: PUSH
30099: LD_INT 55
30101: PUSH
30102: LD_INT 56
30104: PUSH
30105: LD_INT 57
30107: PUSH
30108: LD_INT 58
30110: PUSH
30111: LD_INT 59
30113: PUSH
30114: LD_INT 63
30116: PUSH
30117: LD_INT 64
30119: PUSH
30120: LD_INT 65
30122: PUSH
30123: LD_INT 82
30125: PUSH
30126: LD_INT 83
30128: PUSH
30129: LD_INT 84
30131: PUSH
30132: LD_INT 85
30134: PUSH
30135: LD_INT 86
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: ST_TO_ADDR
30193: GO 30196
30195: POP
// if state > - 1 and state < 3 then
30196: LD_VAR 0 3
30200: PUSH
30201: LD_INT 1
30203: NEG
30204: GREATER
30205: PUSH
30206: LD_VAR 0 3
30210: PUSH
30211: LD_INT 3
30213: LESS
30214: AND
30215: IFFALSE 30272
// for i in result do
30217: LD_ADDR_VAR 0 5
30221: PUSH
30222: LD_VAR 0 4
30226: PUSH
30227: FOR_IN
30228: IFFALSE 30270
// if GetTech ( i , side ) <> state then
30230: LD_VAR 0 5
30234: PPUSH
30235: LD_VAR 0 1
30239: PPUSH
30240: CALL_OW 321
30244: PUSH
30245: LD_VAR 0 3
30249: NONEQUAL
30250: IFFALSE 30268
// result := result diff i ;
30252: LD_ADDR_VAR 0 4
30256: PUSH
30257: LD_VAR 0 4
30261: PUSH
30262: LD_VAR 0 5
30266: DIFF
30267: ST_TO_ADDR
30268: GO 30227
30270: POP
30271: POP
// end ;
30272: LD_VAR 0 4
30276: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30277: LD_INT 0
30279: PPUSH
30280: PPUSH
30281: PPUSH
// result := true ;
30282: LD_ADDR_VAR 0 3
30286: PUSH
30287: LD_INT 1
30289: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30290: LD_ADDR_VAR 0 5
30294: PUSH
30295: LD_VAR 0 2
30299: PPUSH
30300: CALL_OW 480
30304: ST_TO_ADDR
// if not tmp then
30305: LD_VAR 0 5
30309: NOT
30310: IFFALSE 30314
// exit ;
30312: GO 30363
// for i in tmp do
30314: LD_ADDR_VAR 0 4
30318: PUSH
30319: LD_VAR 0 5
30323: PUSH
30324: FOR_IN
30325: IFFALSE 30361
// if GetTech ( i , side ) <> state_researched then
30327: LD_VAR 0 4
30331: PPUSH
30332: LD_VAR 0 1
30336: PPUSH
30337: CALL_OW 321
30341: PUSH
30342: LD_INT 2
30344: NONEQUAL
30345: IFFALSE 30359
// begin result := false ;
30347: LD_ADDR_VAR 0 3
30351: PUSH
30352: LD_INT 0
30354: ST_TO_ADDR
// exit ;
30355: POP
30356: POP
30357: GO 30363
// end ;
30359: GO 30324
30361: POP
30362: POP
// end ;
30363: LD_VAR 0 3
30367: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30368: LD_INT 0
30370: PPUSH
30371: PPUSH
30372: PPUSH
30373: PPUSH
30374: PPUSH
30375: PPUSH
30376: PPUSH
30377: PPUSH
30378: PPUSH
30379: PPUSH
30380: PPUSH
30381: PPUSH
30382: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30383: LD_VAR 0 1
30387: NOT
30388: PUSH
30389: LD_VAR 0 1
30393: PPUSH
30394: CALL_OW 257
30398: PUSH
30399: LD_INT 9
30401: NONEQUAL
30402: OR
30403: IFFALSE 30407
// exit ;
30405: GO 30980
// side := GetSide ( unit ) ;
30407: LD_ADDR_VAR 0 9
30411: PUSH
30412: LD_VAR 0 1
30416: PPUSH
30417: CALL_OW 255
30421: ST_TO_ADDR
// tech_space := tech_spacanom ;
30422: LD_ADDR_VAR 0 12
30426: PUSH
30427: LD_INT 29
30429: ST_TO_ADDR
// tech_time := tech_taurad ;
30430: LD_ADDR_VAR 0 13
30434: PUSH
30435: LD_INT 28
30437: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30438: LD_ADDR_VAR 0 11
30442: PUSH
30443: LD_VAR 0 1
30447: PPUSH
30448: CALL_OW 310
30452: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30453: LD_VAR 0 11
30457: PPUSH
30458: CALL_OW 247
30462: PUSH
30463: LD_INT 2
30465: EQUAL
30466: IFFALSE 30470
// exit ;
30468: GO 30980
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30470: LD_ADDR_VAR 0 8
30474: PUSH
30475: LD_INT 81
30477: PUSH
30478: LD_VAR 0 9
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 3
30489: PUSH
30490: LD_INT 21
30492: PUSH
30493: LD_INT 3
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PPUSH
30508: CALL_OW 69
30512: ST_TO_ADDR
// if not tmp then
30513: LD_VAR 0 8
30517: NOT
30518: IFFALSE 30522
// exit ;
30520: GO 30980
// if in_unit then
30522: LD_VAR 0 11
30526: IFFALSE 30550
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30528: LD_ADDR_VAR 0 10
30532: PUSH
30533: LD_VAR 0 8
30537: PPUSH
30538: LD_VAR 0 11
30542: PPUSH
30543: CALL_OW 74
30547: ST_TO_ADDR
30548: GO 30570
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30550: LD_ADDR_VAR 0 10
30554: PUSH
30555: LD_VAR 0 8
30559: PPUSH
30560: LD_VAR 0 1
30564: PPUSH
30565: CALL_OW 74
30569: ST_TO_ADDR
// if not enemy then
30570: LD_VAR 0 10
30574: NOT
30575: IFFALSE 30579
// exit ;
30577: GO 30980
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30579: LD_VAR 0 11
30583: PUSH
30584: LD_VAR 0 11
30588: PPUSH
30589: LD_VAR 0 10
30593: PPUSH
30594: CALL_OW 296
30598: PUSH
30599: LD_INT 13
30601: GREATER
30602: AND
30603: PUSH
30604: LD_VAR 0 1
30608: PPUSH
30609: LD_VAR 0 10
30613: PPUSH
30614: CALL_OW 296
30618: PUSH
30619: LD_INT 12
30621: GREATER
30622: OR
30623: IFFALSE 30627
// exit ;
30625: GO 30980
// missile := [ 1 ] ;
30627: LD_ADDR_VAR 0 14
30631: PUSH
30632: LD_INT 1
30634: PUSH
30635: EMPTY
30636: LIST
30637: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30638: LD_VAR 0 9
30642: PPUSH
30643: LD_VAR 0 12
30647: PPUSH
30648: CALL_OW 325
30652: IFFALSE 30681
// missile := Replace ( missile , missile + 1 , 2 ) ;
30654: LD_ADDR_VAR 0 14
30658: PUSH
30659: LD_VAR 0 14
30663: PPUSH
30664: LD_VAR 0 14
30668: PUSH
30669: LD_INT 1
30671: PLUS
30672: PPUSH
30673: LD_INT 2
30675: PPUSH
30676: CALL_OW 1
30680: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30681: LD_VAR 0 9
30685: PPUSH
30686: LD_VAR 0 13
30690: PPUSH
30691: CALL_OW 325
30695: PUSH
30696: LD_VAR 0 10
30700: PPUSH
30701: CALL_OW 255
30705: PPUSH
30706: LD_VAR 0 13
30710: PPUSH
30711: CALL_OW 325
30715: NOT
30716: AND
30717: IFFALSE 30746
// missile := Replace ( missile , missile + 1 , 3 ) ;
30719: LD_ADDR_VAR 0 14
30723: PUSH
30724: LD_VAR 0 14
30728: PPUSH
30729: LD_VAR 0 14
30733: PUSH
30734: LD_INT 1
30736: PLUS
30737: PPUSH
30738: LD_INT 3
30740: PPUSH
30741: CALL_OW 1
30745: ST_TO_ADDR
// if missile < 2 then
30746: LD_VAR 0 14
30750: PUSH
30751: LD_INT 2
30753: LESS
30754: IFFALSE 30758
// exit ;
30756: GO 30980
// x := GetX ( enemy ) ;
30758: LD_ADDR_VAR 0 4
30762: PUSH
30763: LD_VAR 0 10
30767: PPUSH
30768: CALL_OW 250
30772: ST_TO_ADDR
// y := GetY ( enemy ) ;
30773: LD_ADDR_VAR 0 5
30777: PUSH
30778: LD_VAR 0 10
30782: PPUSH
30783: CALL_OW 251
30787: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30788: LD_ADDR_VAR 0 6
30792: PUSH
30793: LD_VAR 0 4
30797: PUSH
30798: LD_INT 1
30800: NEG
30801: PPUSH
30802: LD_INT 1
30804: PPUSH
30805: CALL_OW 12
30809: PLUS
30810: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30811: LD_ADDR_VAR 0 7
30815: PUSH
30816: LD_VAR 0 5
30820: PUSH
30821: LD_INT 1
30823: NEG
30824: PPUSH
30825: LD_INT 1
30827: PPUSH
30828: CALL_OW 12
30832: PLUS
30833: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30834: LD_VAR 0 6
30838: PPUSH
30839: LD_VAR 0 7
30843: PPUSH
30844: CALL_OW 488
30848: NOT
30849: IFFALSE 30871
// begin _x := x ;
30851: LD_ADDR_VAR 0 6
30855: PUSH
30856: LD_VAR 0 4
30860: ST_TO_ADDR
// _y := y ;
30861: LD_ADDR_VAR 0 7
30865: PUSH
30866: LD_VAR 0 5
30870: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30871: LD_ADDR_VAR 0 3
30875: PUSH
30876: LD_INT 1
30878: PPUSH
30879: LD_VAR 0 14
30883: PPUSH
30884: CALL_OW 12
30888: ST_TO_ADDR
// case i of 1 :
30889: LD_VAR 0 3
30893: PUSH
30894: LD_INT 1
30896: DOUBLE
30897: EQUAL
30898: IFTRUE 30902
30900: GO 30919
30902: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30903: LD_VAR 0 1
30907: PPUSH
30908: LD_VAR 0 10
30912: PPUSH
30913: CALL_OW 115
30917: GO 30980
30919: LD_INT 2
30921: DOUBLE
30922: EQUAL
30923: IFTRUE 30927
30925: GO 30949
30927: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30928: LD_VAR 0 1
30932: PPUSH
30933: LD_VAR 0 6
30937: PPUSH
30938: LD_VAR 0 7
30942: PPUSH
30943: CALL_OW 153
30947: GO 30980
30949: LD_INT 3
30951: DOUBLE
30952: EQUAL
30953: IFTRUE 30957
30955: GO 30979
30957: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30958: LD_VAR 0 1
30962: PPUSH
30963: LD_VAR 0 6
30967: PPUSH
30968: LD_VAR 0 7
30972: PPUSH
30973: CALL_OW 154
30977: GO 30980
30979: POP
// end ;
30980: LD_VAR 0 2
30984: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30985: LD_INT 0
30987: PPUSH
30988: PPUSH
30989: PPUSH
30990: PPUSH
30991: PPUSH
30992: PPUSH
// if not unit or not building then
30993: LD_VAR 0 1
30997: NOT
30998: PUSH
30999: LD_VAR 0 2
31003: NOT
31004: OR
31005: IFFALSE 31009
// exit ;
31007: GO 31167
// x := GetX ( building ) ;
31009: LD_ADDR_VAR 0 5
31013: PUSH
31014: LD_VAR 0 2
31018: PPUSH
31019: CALL_OW 250
31023: ST_TO_ADDR
// y := GetY ( building ) ;
31024: LD_ADDR_VAR 0 6
31028: PUSH
31029: LD_VAR 0 2
31033: PPUSH
31034: CALL_OW 251
31038: ST_TO_ADDR
// for i = 0 to 5 do
31039: LD_ADDR_VAR 0 4
31043: PUSH
31044: DOUBLE
31045: LD_INT 0
31047: DEC
31048: ST_TO_ADDR
31049: LD_INT 5
31051: PUSH
31052: FOR_TO
31053: IFFALSE 31165
// begin _x := ShiftX ( x , i , 3 ) ;
31055: LD_ADDR_VAR 0 7
31059: PUSH
31060: LD_VAR 0 5
31064: PPUSH
31065: LD_VAR 0 4
31069: PPUSH
31070: LD_INT 3
31072: PPUSH
31073: CALL_OW 272
31077: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31078: LD_ADDR_VAR 0 8
31082: PUSH
31083: LD_VAR 0 6
31087: PPUSH
31088: LD_VAR 0 4
31092: PPUSH
31093: LD_INT 3
31095: PPUSH
31096: CALL_OW 273
31100: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31101: LD_VAR 0 7
31105: PPUSH
31106: LD_VAR 0 8
31110: PPUSH
31111: CALL_OW 488
31115: NOT
31116: IFFALSE 31120
// continue ;
31118: GO 31052
// if HexInfo ( _x , _y ) = 0 then
31120: LD_VAR 0 7
31124: PPUSH
31125: LD_VAR 0 8
31129: PPUSH
31130: CALL_OW 428
31134: PUSH
31135: LD_INT 0
31137: EQUAL
31138: IFFALSE 31163
// begin ComMoveXY ( unit , _x , _y ) ;
31140: LD_VAR 0 1
31144: PPUSH
31145: LD_VAR 0 7
31149: PPUSH
31150: LD_VAR 0 8
31154: PPUSH
31155: CALL_OW 111
// exit ;
31159: POP
31160: POP
31161: GO 31167
// end ; end ;
31163: GO 31052
31165: POP
31166: POP
// end ;
31167: LD_VAR 0 3
31171: RET
// export function ScanBase ( side , base_area ) ; begin
31172: LD_INT 0
31174: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31175: LD_ADDR_VAR 0 3
31179: PUSH
31180: LD_VAR 0 2
31184: PPUSH
31185: LD_INT 81
31187: PUSH
31188: LD_VAR 0 1
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PPUSH
31197: CALL_OW 70
31201: ST_TO_ADDR
// end ;
31202: LD_VAR 0 3
31206: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31207: LD_INT 0
31209: PPUSH
31210: PPUSH
31211: PPUSH
31212: PPUSH
// result := false ;
31213: LD_ADDR_VAR 0 2
31217: PUSH
31218: LD_INT 0
31220: ST_TO_ADDR
// side := GetSide ( unit ) ;
31221: LD_ADDR_VAR 0 3
31225: PUSH
31226: LD_VAR 0 1
31230: PPUSH
31231: CALL_OW 255
31235: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31236: LD_ADDR_VAR 0 4
31240: PUSH
31241: LD_VAR 0 1
31245: PPUSH
31246: CALL_OW 248
31250: ST_TO_ADDR
// case nat of 1 :
31251: LD_VAR 0 4
31255: PUSH
31256: LD_INT 1
31258: DOUBLE
31259: EQUAL
31260: IFTRUE 31264
31262: GO 31275
31264: POP
// tech := tech_lassight ; 2 :
31265: LD_ADDR_VAR 0 5
31269: PUSH
31270: LD_INT 12
31272: ST_TO_ADDR
31273: GO 31314
31275: LD_INT 2
31277: DOUBLE
31278: EQUAL
31279: IFTRUE 31283
31281: GO 31294
31283: POP
// tech := tech_mortar ; 3 :
31284: LD_ADDR_VAR 0 5
31288: PUSH
31289: LD_INT 41
31291: ST_TO_ADDR
31292: GO 31314
31294: LD_INT 3
31296: DOUBLE
31297: EQUAL
31298: IFTRUE 31302
31300: GO 31313
31302: POP
// tech := tech_bazooka ; end ;
31303: LD_ADDR_VAR 0 5
31307: PUSH
31308: LD_INT 44
31310: ST_TO_ADDR
31311: GO 31314
31313: POP
// if Researched ( side , tech ) then
31314: LD_VAR 0 3
31318: PPUSH
31319: LD_VAR 0 5
31323: PPUSH
31324: CALL_OW 325
31328: IFFALSE 31355
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31330: LD_ADDR_VAR 0 2
31334: PUSH
31335: LD_INT 5
31337: PUSH
31338: LD_INT 8
31340: PUSH
31341: LD_INT 9
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: LIST
31348: PUSH
31349: LD_VAR 0 4
31353: ARRAY
31354: ST_TO_ADDR
// end ;
31355: LD_VAR 0 2
31359: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31360: LD_INT 0
31362: PPUSH
31363: PPUSH
31364: PPUSH
// if not mines then
31365: LD_VAR 0 2
31369: NOT
31370: IFFALSE 31374
// exit ;
31372: GO 31518
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31374: LD_ADDR_VAR 0 5
31378: PUSH
31379: LD_INT 81
31381: PUSH
31382: LD_VAR 0 1
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 3
31393: PUSH
31394: LD_INT 21
31396: PUSH
31397: LD_INT 3
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PPUSH
31412: CALL_OW 69
31416: ST_TO_ADDR
// for i in mines do
31417: LD_ADDR_VAR 0 4
31421: PUSH
31422: LD_VAR 0 2
31426: PUSH
31427: FOR_IN
31428: IFFALSE 31516
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31430: LD_VAR 0 4
31434: PUSH
31435: LD_INT 1
31437: ARRAY
31438: PPUSH
31439: LD_VAR 0 4
31443: PUSH
31444: LD_INT 2
31446: ARRAY
31447: PPUSH
31448: CALL_OW 458
31452: NOT
31453: IFFALSE 31457
// continue ;
31455: GO 31427
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31457: LD_VAR 0 4
31461: PUSH
31462: LD_INT 1
31464: ARRAY
31465: PPUSH
31466: LD_VAR 0 4
31470: PUSH
31471: LD_INT 2
31473: ARRAY
31474: PPUSH
31475: CALL_OW 428
31479: PUSH
31480: LD_VAR 0 5
31484: IN
31485: IFFALSE 31514
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31487: LD_VAR 0 4
31491: PUSH
31492: LD_INT 1
31494: ARRAY
31495: PPUSH
31496: LD_VAR 0 4
31500: PUSH
31501: LD_INT 2
31503: ARRAY
31504: PPUSH
31505: LD_VAR 0 1
31509: PPUSH
31510: CALL_OW 456
// end ;
31514: GO 31427
31516: POP
31517: POP
// end ;
31518: LD_VAR 0 3
31522: RET
// export function Count ( array ) ; var i ; begin
31523: LD_INT 0
31525: PPUSH
31526: PPUSH
// result := 0 ;
31527: LD_ADDR_VAR 0 2
31531: PUSH
31532: LD_INT 0
31534: ST_TO_ADDR
// for i in array do
31535: LD_ADDR_VAR 0 3
31539: PUSH
31540: LD_VAR 0 1
31544: PUSH
31545: FOR_IN
31546: IFFALSE 31570
// if i then
31548: LD_VAR 0 3
31552: IFFALSE 31568
// result := result + 1 ;
31554: LD_ADDR_VAR 0 2
31558: PUSH
31559: LD_VAR 0 2
31563: PUSH
31564: LD_INT 1
31566: PLUS
31567: ST_TO_ADDR
31568: GO 31545
31570: POP
31571: POP
// end ;
31572: LD_VAR 0 2
31576: RET
// export function IsEmpty ( building ) ; begin
31577: LD_INT 0
31579: PPUSH
// if not building then
31580: LD_VAR 0 1
31584: NOT
31585: IFFALSE 31589
// exit ;
31587: GO 31632
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31589: LD_ADDR_VAR 0 2
31593: PUSH
31594: LD_VAR 0 1
31598: PUSH
31599: LD_INT 22
31601: PUSH
31602: LD_VAR 0 1
31606: PPUSH
31607: CALL_OW 255
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 58
31618: PUSH
31619: EMPTY
31620: LIST
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PPUSH
31626: CALL_OW 69
31630: IN
31631: ST_TO_ADDR
// end ;
31632: LD_VAR 0 2
31636: RET
// export function IsNotFull ( building ) ; var places ; begin
31637: LD_INT 0
31639: PPUSH
31640: PPUSH
// if not building then
31641: LD_VAR 0 1
31645: NOT
31646: IFFALSE 31650
// exit ;
31648: GO 31821
// result := false ;
31650: LD_ADDR_VAR 0 2
31654: PUSH
31655: LD_INT 0
31657: ST_TO_ADDR
// places := 0 ;
31658: LD_ADDR_VAR 0 3
31662: PUSH
31663: LD_INT 0
31665: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
31666: LD_VAR 0 1
31670: PPUSH
31671: CALL_OW 266
31675: PUSH
31676: LD_INT 0
31678: DOUBLE
31679: EQUAL
31680: IFTRUE 31738
31682: LD_INT 1
31684: DOUBLE
31685: EQUAL
31686: IFTRUE 31738
31688: LD_INT 6
31690: DOUBLE
31691: EQUAL
31692: IFTRUE 31738
31694: LD_INT 7
31696: DOUBLE
31697: EQUAL
31698: IFTRUE 31738
31700: LD_INT 8
31702: DOUBLE
31703: EQUAL
31704: IFTRUE 31738
31706: LD_INT 4
31708: DOUBLE
31709: EQUAL
31710: IFTRUE 31738
31712: LD_INT 5
31714: DOUBLE
31715: EQUAL
31716: IFTRUE 31738
31718: LD_INT 2
31720: DOUBLE
31721: EQUAL
31722: IFTRUE 31738
31724: LD_INT 3
31726: DOUBLE
31727: EQUAL
31728: IFTRUE 31738
31730: LD_INT 35
31732: DOUBLE
31733: EQUAL
31734: IFTRUE 31738
31736: GO 31749
31738: POP
// places := 6 ; b_bunker , b_breastwork :
31739: LD_ADDR_VAR 0 3
31743: PUSH
31744: LD_INT 6
31746: ST_TO_ADDR
31747: GO 31794
31749: LD_INT 32
31751: DOUBLE
31752: EQUAL
31753: IFTRUE 31763
31755: LD_INT 31
31757: DOUBLE
31758: EQUAL
31759: IFTRUE 31763
31761: GO 31774
31763: POP
// places := 1 ; b_control_tower :
31764: LD_ADDR_VAR 0 3
31768: PUSH
31769: LD_INT 1
31771: ST_TO_ADDR
31772: GO 31794
31774: LD_INT 36
31776: DOUBLE
31777: EQUAL
31778: IFTRUE 31782
31780: GO 31793
31782: POP
// places := 3 ; end ;
31783: LD_ADDR_VAR 0 3
31787: PUSH
31788: LD_INT 3
31790: ST_TO_ADDR
31791: GO 31794
31793: POP
// if places then
31794: LD_VAR 0 3
31798: IFFALSE 31821
// result := UnitsInside ( building ) < places ;
31800: LD_ADDR_VAR 0 2
31804: PUSH
31805: LD_VAR 0 1
31809: PPUSH
31810: CALL_OW 313
31814: PUSH
31815: LD_VAR 0 3
31819: LESS
31820: ST_TO_ADDR
// end ;
31821: LD_VAR 0 2
31825: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31826: LD_INT 0
31828: PPUSH
31829: PPUSH
31830: PPUSH
31831: PPUSH
// tmp := [ ] ;
31832: LD_ADDR_VAR 0 3
31836: PUSH
31837: EMPTY
31838: ST_TO_ADDR
// list := [ ] ;
31839: LD_ADDR_VAR 0 5
31843: PUSH
31844: EMPTY
31845: ST_TO_ADDR
// for i = 16 to 25 do
31846: LD_ADDR_VAR 0 4
31850: PUSH
31851: DOUBLE
31852: LD_INT 16
31854: DEC
31855: ST_TO_ADDR
31856: LD_INT 25
31858: PUSH
31859: FOR_TO
31860: IFFALSE 31933
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31862: LD_ADDR_VAR 0 3
31866: PUSH
31867: LD_VAR 0 3
31871: PUSH
31872: LD_INT 22
31874: PUSH
31875: LD_VAR 0 1
31879: PPUSH
31880: CALL_OW 255
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 91
31891: PUSH
31892: LD_VAR 0 1
31896: PUSH
31897: LD_INT 6
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 30
31907: PUSH
31908: LD_VAR 0 4
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: LIST
31921: PUSH
31922: EMPTY
31923: LIST
31924: PPUSH
31925: CALL_OW 69
31929: ADD
31930: ST_TO_ADDR
31931: GO 31859
31933: POP
31934: POP
// for i = 1 to tmp do
31935: LD_ADDR_VAR 0 4
31939: PUSH
31940: DOUBLE
31941: LD_INT 1
31943: DEC
31944: ST_TO_ADDR
31945: LD_VAR 0 3
31949: PUSH
31950: FOR_TO
31951: IFFALSE 32039
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31953: LD_ADDR_VAR 0 5
31957: PUSH
31958: LD_VAR 0 5
31962: PUSH
31963: LD_VAR 0 3
31967: PUSH
31968: LD_VAR 0 4
31972: ARRAY
31973: PPUSH
31974: CALL_OW 266
31978: PUSH
31979: LD_VAR 0 3
31983: PUSH
31984: LD_VAR 0 4
31988: ARRAY
31989: PPUSH
31990: CALL_OW 250
31994: PUSH
31995: LD_VAR 0 3
31999: PUSH
32000: LD_VAR 0 4
32004: ARRAY
32005: PPUSH
32006: CALL_OW 251
32010: PUSH
32011: LD_VAR 0 3
32015: PUSH
32016: LD_VAR 0 4
32020: ARRAY
32021: PPUSH
32022: CALL_OW 254
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: PUSH
32033: EMPTY
32034: LIST
32035: ADD
32036: ST_TO_ADDR
32037: GO 31950
32039: POP
32040: POP
// result := list ;
32041: LD_ADDR_VAR 0 2
32045: PUSH
32046: LD_VAR 0 5
32050: ST_TO_ADDR
// end ;
32051: LD_VAR 0 2
32055: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32056: LD_INT 0
32058: PPUSH
32059: PPUSH
32060: PPUSH
32061: PPUSH
32062: PPUSH
32063: PPUSH
32064: PPUSH
// if not factory then
32065: LD_VAR 0 1
32069: NOT
32070: IFFALSE 32074
// exit ;
32072: GO 32667
// if control = control_apeman then
32074: LD_VAR 0 4
32078: PUSH
32079: LD_INT 5
32081: EQUAL
32082: IFFALSE 32191
// begin tmp := UnitsInside ( factory ) ;
32084: LD_ADDR_VAR 0 8
32088: PUSH
32089: LD_VAR 0 1
32093: PPUSH
32094: CALL_OW 313
32098: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32099: LD_VAR 0 8
32103: PPUSH
32104: LD_INT 25
32106: PUSH
32107: LD_INT 12
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PPUSH
32114: CALL_OW 72
32118: NOT
32119: IFFALSE 32129
// control := control_manual ;
32121: LD_ADDR_VAR 0 4
32125: PUSH
32126: LD_INT 1
32128: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32129: LD_ADDR_VAR 0 8
32133: PUSH
32134: LD_VAR 0 1
32138: PPUSH
32139: CALL 31826 0 1
32143: ST_TO_ADDR
// if tmp then
32144: LD_VAR 0 8
32148: IFFALSE 32191
// begin for i in tmp do
32150: LD_ADDR_VAR 0 7
32154: PUSH
32155: LD_VAR 0 8
32159: PUSH
32160: FOR_IN
32161: IFFALSE 32189
// if i [ 1 ] = b_ext_radio then
32163: LD_VAR 0 7
32167: PUSH
32168: LD_INT 1
32170: ARRAY
32171: PUSH
32172: LD_INT 22
32174: EQUAL
32175: IFFALSE 32187
// begin control := control_remote ;
32177: LD_ADDR_VAR 0 4
32181: PUSH
32182: LD_INT 2
32184: ST_TO_ADDR
// break ;
32185: GO 32189
// end ;
32187: GO 32160
32189: POP
32190: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32191: LD_VAR 0 1
32195: PPUSH
32196: LD_VAR 0 2
32200: PPUSH
32201: LD_VAR 0 3
32205: PPUSH
32206: LD_VAR 0 4
32210: PPUSH
32211: LD_VAR 0 5
32215: PPUSH
32216: CALL_OW 448
32220: IFFALSE 32255
// begin result := [ chassis , engine , control , weapon ] ;
32222: LD_ADDR_VAR 0 6
32226: PUSH
32227: LD_VAR 0 2
32231: PUSH
32232: LD_VAR 0 3
32236: PUSH
32237: LD_VAR 0 4
32241: PUSH
32242: LD_VAR 0 5
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: ST_TO_ADDR
// exit ;
32253: GO 32667
// end ; _chassis := AvailableChassisList ( factory ) ;
32255: LD_ADDR_VAR 0 9
32259: PUSH
32260: LD_VAR 0 1
32264: PPUSH
32265: CALL_OW 475
32269: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32270: LD_ADDR_VAR 0 11
32274: PUSH
32275: LD_VAR 0 1
32279: PPUSH
32280: CALL_OW 476
32284: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32285: LD_ADDR_VAR 0 12
32289: PUSH
32290: LD_VAR 0 1
32294: PPUSH
32295: CALL_OW 477
32299: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32300: LD_ADDR_VAR 0 10
32304: PUSH
32305: LD_VAR 0 1
32309: PPUSH
32310: CALL_OW 478
32314: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32315: LD_VAR 0 9
32319: NOT
32320: PUSH
32321: LD_VAR 0 11
32325: NOT
32326: OR
32327: PUSH
32328: LD_VAR 0 12
32332: NOT
32333: OR
32334: PUSH
32335: LD_VAR 0 10
32339: NOT
32340: OR
32341: IFFALSE 32376
// begin result := [ chassis , engine , control , weapon ] ;
32343: LD_ADDR_VAR 0 6
32347: PUSH
32348: LD_VAR 0 2
32352: PUSH
32353: LD_VAR 0 3
32357: PUSH
32358: LD_VAR 0 4
32362: PUSH
32363: LD_VAR 0 5
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: ST_TO_ADDR
// exit ;
32374: GO 32667
// end ; if not chassis in _chassis then
32376: LD_VAR 0 2
32380: PUSH
32381: LD_VAR 0 9
32385: IN
32386: NOT
32387: IFFALSE 32413
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32389: LD_ADDR_VAR 0 2
32393: PUSH
32394: LD_VAR 0 9
32398: PUSH
32399: LD_INT 1
32401: PPUSH
32402: LD_VAR 0 9
32406: PPUSH
32407: CALL_OW 12
32411: ARRAY
32412: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32413: LD_VAR 0 2
32417: PPUSH
32418: LD_VAR 0 3
32422: PPUSH
32423: CALL 32672 0 2
32427: NOT
32428: IFFALSE 32487
// repeat engine := _engine [ 1 ] ;
32430: LD_ADDR_VAR 0 3
32434: PUSH
32435: LD_VAR 0 11
32439: PUSH
32440: LD_INT 1
32442: ARRAY
32443: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32444: LD_ADDR_VAR 0 11
32448: PUSH
32449: LD_VAR 0 11
32453: PPUSH
32454: LD_INT 1
32456: PPUSH
32457: CALL_OW 3
32461: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32462: LD_VAR 0 2
32466: PPUSH
32467: LD_VAR 0 3
32471: PPUSH
32472: CALL 32672 0 2
32476: PUSH
32477: LD_VAR 0 11
32481: PUSH
32482: EMPTY
32483: EQUAL
32484: OR
32485: IFFALSE 32430
// if not control in _control then
32487: LD_VAR 0 4
32491: PUSH
32492: LD_VAR 0 12
32496: IN
32497: NOT
32498: IFFALSE 32524
// control := _control [ rand ( 1 , _control ) ] ;
32500: LD_ADDR_VAR 0 4
32504: PUSH
32505: LD_VAR 0 12
32509: PUSH
32510: LD_INT 1
32512: PPUSH
32513: LD_VAR 0 12
32517: PPUSH
32518: CALL_OW 12
32522: ARRAY
32523: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32524: LD_VAR 0 2
32528: PPUSH
32529: LD_VAR 0 5
32533: PPUSH
32534: CALL 32892 0 2
32538: NOT
32539: IFFALSE 32598
// repeat weapon := _weapon [ 1 ] ;
32541: LD_ADDR_VAR 0 5
32545: PUSH
32546: LD_VAR 0 10
32550: PUSH
32551: LD_INT 1
32553: ARRAY
32554: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32555: LD_ADDR_VAR 0 10
32559: PUSH
32560: LD_VAR 0 10
32564: PPUSH
32565: LD_INT 1
32567: PPUSH
32568: CALL_OW 3
32572: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32573: LD_VAR 0 2
32577: PPUSH
32578: LD_VAR 0 5
32582: PPUSH
32583: CALL 32892 0 2
32587: PUSH
32588: LD_VAR 0 10
32592: PUSH
32593: EMPTY
32594: EQUAL
32595: OR
32596: IFFALSE 32541
// result := [ ] ;
32598: LD_ADDR_VAR 0 6
32602: PUSH
32603: EMPTY
32604: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32605: LD_VAR 0 1
32609: PPUSH
32610: LD_VAR 0 2
32614: PPUSH
32615: LD_VAR 0 3
32619: PPUSH
32620: LD_VAR 0 4
32624: PPUSH
32625: LD_VAR 0 5
32629: PPUSH
32630: CALL_OW 448
32634: IFFALSE 32667
// result := [ chassis , engine , control , weapon ] ;
32636: LD_ADDR_VAR 0 6
32640: PUSH
32641: LD_VAR 0 2
32645: PUSH
32646: LD_VAR 0 3
32650: PUSH
32651: LD_VAR 0 4
32655: PUSH
32656: LD_VAR 0 5
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: ST_TO_ADDR
// end ;
32667: LD_VAR 0 6
32671: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32672: LD_INT 0
32674: PPUSH
// if not chassis or not engine then
32675: LD_VAR 0 1
32679: NOT
32680: PUSH
32681: LD_VAR 0 2
32685: NOT
32686: OR
32687: IFFALSE 32691
// exit ;
32689: GO 32887
// case engine of engine_solar :
32691: LD_VAR 0 2
32695: PUSH
32696: LD_INT 2
32698: DOUBLE
32699: EQUAL
32700: IFTRUE 32704
32702: GO 32742
32704: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32705: LD_ADDR_VAR 0 3
32709: PUSH
32710: LD_INT 11
32712: PUSH
32713: LD_INT 12
32715: PUSH
32716: LD_INT 13
32718: PUSH
32719: LD_INT 14
32721: PUSH
32722: LD_INT 1
32724: PUSH
32725: LD_INT 2
32727: PUSH
32728: LD_INT 3
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: ST_TO_ADDR
32740: GO 32871
32742: LD_INT 1
32744: DOUBLE
32745: EQUAL
32746: IFTRUE 32750
32748: GO 32812
32750: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32751: LD_ADDR_VAR 0 3
32755: PUSH
32756: LD_INT 11
32758: PUSH
32759: LD_INT 12
32761: PUSH
32762: LD_INT 13
32764: PUSH
32765: LD_INT 14
32767: PUSH
32768: LD_INT 1
32770: PUSH
32771: LD_INT 2
32773: PUSH
32774: LD_INT 3
32776: PUSH
32777: LD_INT 4
32779: PUSH
32780: LD_INT 5
32782: PUSH
32783: LD_INT 21
32785: PUSH
32786: LD_INT 23
32788: PUSH
32789: LD_INT 22
32791: PUSH
32792: LD_INT 24
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: ST_TO_ADDR
32810: GO 32871
32812: LD_INT 3
32814: DOUBLE
32815: EQUAL
32816: IFTRUE 32820
32818: GO 32870
32820: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32821: LD_ADDR_VAR 0 3
32825: PUSH
32826: LD_INT 13
32828: PUSH
32829: LD_INT 14
32831: PUSH
32832: LD_INT 2
32834: PUSH
32835: LD_INT 3
32837: PUSH
32838: LD_INT 4
32840: PUSH
32841: LD_INT 5
32843: PUSH
32844: LD_INT 21
32846: PUSH
32847: LD_INT 22
32849: PUSH
32850: LD_INT 23
32852: PUSH
32853: LD_INT 24
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: ST_TO_ADDR
32868: GO 32871
32870: POP
// result := ( chassis in result ) ;
32871: LD_ADDR_VAR 0 3
32875: PUSH
32876: LD_VAR 0 1
32880: PUSH
32881: LD_VAR 0 3
32885: IN
32886: ST_TO_ADDR
// end ;
32887: LD_VAR 0 3
32891: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32892: LD_INT 0
32894: PPUSH
// if not chassis or not weapon then
32895: LD_VAR 0 1
32899: NOT
32900: PUSH
32901: LD_VAR 0 2
32905: NOT
32906: OR
32907: IFFALSE 32911
// exit ;
32909: GO 33971
// case weapon of us_machine_gun :
32911: LD_VAR 0 2
32915: PUSH
32916: LD_INT 2
32918: DOUBLE
32919: EQUAL
32920: IFTRUE 32924
32922: GO 32954
32924: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32925: LD_ADDR_VAR 0 3
32929: PUSH
32930: LD_INT 1
32932: PUSH
32933: LD_INT 2
32935: PUSH
32936: LD_INT 3
32938: PUSH
32939: LD_INT 4
32941: PUSH
32942: LD_INT 5
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: ST_TO_ADDR
32952: GO 33955
32954: LD_INT 3
32956: DOUBLE
32957: EQUAL
32958: IFTRUE 32962
32960: GO 32992
32962: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32963: LD_ADDR_VAR 0 3
32967: PUSH
32968: LD_INT 1
32970: PUSH
32971: LD_INT 2
32973: PUSH
32974: LD_INT 3
32976: PUSH
32977: LD_INT 4
32979: PUSH
32980: LD_INT 5
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: ST_TO_ADDR
32990: GO 33955
32992: LD_INT 11
32994: DOUBLE
32995: EQUAL
32996: IFTRUE 33000
32998: GO 33030
33000: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33001: LD_ADDR_VAR 0 3
33005: PUSH
33006: LD_INT 1
33008: PUSH
33009: LD_INT 2
33011: PUSH
33012: LD_INT 3
33014: PUSH
33015: LD_INT 4
33017: PUSH
33018: LD_INT 5
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: ST_TO_ADDR
33028: GO 33955
33030: LD_INT 4
33032: DOUBLE
33033: EQUAL
33034: IFTRUE 33038
33036: GO 33064
33038: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33039: LD_ADDR_VAR 0 3
33043: PUSH
33044: LD_INT 2
33046: PUSH
33047: LD_INT 3
33049: PUSH
33050: LD_INT 4
33052: PUSH
33053: LD_INT 5
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: ST_TO_ADDR
33062: GO 33955
33064: LD_INT 5
33066: DOUBLE
33067: EQUAL
33068: IFTRUE 33072
33070: GO 33098
33072: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33073: LD_ADDR_VAR 0 3
33077: PUSH
33078: LD_INT 2
33080: PUSH
33081: LD_INT 3
33083: PUSH
33084: LD_INT 4
33086: PUSH
33087: LD_INT 5
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: ST_TO_ADDR
33096: GO 33955
33098: LD_INT 9
33100: DOUBLE
33101: EQUAL
33102: IFTRUE 33106
33104: GO 33132
33106: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33107: LD_ADDR_VAR 0 3
33111: PUSH
33112: LD_INT 2
33114: PUSH
33115: LD_INT 3
33117: PUSH
33118: LD_INT 4
33120: PUSH
33121: LD_INT 5
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: ST_TO_ADDR
33130: GO 33955
33132: LD_INT 7
33134: DOUBLE
33135: EQUAL
33136: IFTRUE 33140
33138: GO 33166
33140: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33141: LD_ADDR_VAR 0 3
33145: PUSH
33146: LD_INT 2
33148: PUSH
33149: LD_INT 3
33151: PUSH
33152: LD_INT 4
33154: PUSH
33155: LD_INT 5
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: ST_TO_ADDR
33164: GO 33955
33166: LD_INT 12
33168: DOUBLE
33169: EQUAL
33170: IFTRUE 33174
33172: GO 33200
33174: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33175: LD_ADDR_VAR 0 3
33179: PUSH
33180: LD_INT 2
33182: PUSH
33183: LD_INT 3
33185: PUSH
33186: LD_INT 4
33188: PUSH
33189: LD_INT 5
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: ST_TO_ADDR
33198: GO 33955
33200: LD_INT 13
33202: DOUBLE
33203: EQUAL
33204: IFTRUE 33208
33206: GO 33234
33208: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33209: LD_ADDR_VAR 0 3
33213: PUSH
33214: LD_INT 2
33216: PUSH
33217: LD_INT 3
33219: PUSH
33220: LD_INT 4
33222: PUSH
33223: LD_INT 5
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: ST_TO_ADDR
33232: GO 33955
33234: LD_INT 14
33236: DOUBLE
33237: EQUAL
33238: IFTRUE 33242
33240: GO 33260
33242: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33243: LD_ADDR_VAR 0 3
33247: PUSH
33248: LD_INT 4
33250: PUSH
33251: LD_INT 5
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: ST_TO_ADDR
33258: GO 33955
33260: LD_INT 6
33262: DOUBLE
33263: EQUAL
33264: IFTRUE 33268
33266: GO 33286
33268: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33269: LD_ADDR_VAR 0 3
33273: PUSH
33274: LD_INT 4
33276: PUSH
33277: LD_INT 5
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: ST_TO_ADDR
33284: GO 33955
33286: LD_INT 10
33288: DOUBLE
33289: EQUAL
33290: IFTRUE 33294
33292: GO 33312
33294: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33295: LD_ADDR_VAR 0 3
33299: PUSH
33300: LD_INT 4
33302: PUSH
33303: LD_INT 5
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: ST_TO_ADDR
33310: GO 33955
33312: LD_INT 22
33314: DOUBLE
33315: EQUAL
33316: IFTRUE 33320
33318: GO 33346
33320: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33321: LD_ADDR_VAR 0 3
33325: PUSH
33326: LD_INT 11
33328: PUSH
33329: LD_INT 12
33331: PUSH
33332: LD_INT 13
33334: PUSH
33335: LD_INT 14
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: ST_TO_ADDR
33344: GO 33955
33346: LD_INT 23
33348: DOUBLE
33349: EQUAL
33350: IFTRUE 33354
33352: GO 33380
33354: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33355: LD_ADDR_VAR 0 3
33359: PUSH
33360: LD_INT 11
33362: PUSH
33363: LD_INT 12
33365: PUSH
33366: LD_INT 13
33368: PUSH
33369: LD_INT 14
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: ST_TO_ADDR
33378: GO 33955
33380: LD_INT 24
33382: DOUBLE
33383: EQUAL
33384: IFTRUE 33388
33386: GO 33414
33388: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33389: LD_ADDR_VAR 0 3
33393: PUSH
33394: LD_INT 11
33396: PUSH
33397: LD_INT 12
33399: PUSH
33400: LD_INT 13
33402: PUSH
33403: LD_INT 14
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: ST_TO_ADDR
33412: GO 33955
33414: LD_INT 30
33416: DOUBLE
33417: EQUAL
33418: IFTRUE 33422
33420: GO 33448
33422: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33423: LD_ADDR_VAR 0 3
33427: PUSH
33428: LD_INT 11
33430: PUSH
33431: LD_INT 12
33433: PUSH
33434: LD_INT 13
33436: PUSH
33437: LD_INT 14
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: ST_TO_ADDR
33446: GO 33955
33448: LD_INT 25
33450: DOUBLE
33451: EQUAL
33452: IFTRUE 33456
33454: GO 33474
33456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33457: LD_ADDR_VAR 0 3
33461: PUSH
33462: LD_INT 13
33464: PUSH
33465: LD_INT 14
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: ST_TO_ADDR
33472: GO 33955
33474: LD_INT 27
33476: DOUBLE
33477: EQUAL
33478: IFTRUE 33482
33480: GO 33500
33482: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33483: LD_ADDR_VAR 0 3
33487: PUSH
33488: LD_INT 13
33490: PUSH
33491: LD_INT 14
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: ST_TO_ADDR
33498: GO 33955
33500: LD_INT 92
33502: DOUBLE
33503: EQUAL
33504: IFTRUE 33508
33506: GO 33534
33508: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33509: LD_ADDR_VAR 0 3
33513: PUSH
33514: LD_INT 11
33516: PUSH
33517: LD_INT 12
33519: PUSH
33520: LD_INT 13
33522: PUSH
33523: LD_INT 14
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: ST_TO_ADDR
33532: GO 33955
33534: LD_INT 28
33536: DOUBLE
33537: EQUAL
33538: IFTRUE 33542
33540: GO 33560
33542: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33543: LD_ADDR_VAR 0 3
33547: PUSH
33548: LD_INT 13
33550: PUSH
33551: LD_INT 14
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: ST_TO_ADDR
33558: GO 33955
33560: LD_INT 29
33562: DOUBLE
33563: EQUAL
33564: IFTRUE 33568
33566: GO 33586
33568: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33569: LD_ADDR_VAR 0 3
33573: PUSH
33574: LD_INT 13
33576: PUSH
33577: LD_INT 14
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: ST_TO_ADDR
33584: GO 33955
33586: LD_INT 31
33588: DOUBLE
33589: EQUAL
33590: IFTRUE 33594
33592: GO 33612
33594: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33595: LD_ADDR_VAR 0 3
33599: PUSH
33600: LD_INT 13
33602: PUSH
33603: LD_INT 14
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: ST_TO_ADDR
33610: GO 33955
33612: LD_INT 26
33614: DOUBLE
33615: EQUAL
33616: IFTRUE 33620
33618: GO 33638
33620: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33621: LD_ADDR_VAR 0 3
33625: PUSH
33626: LD_INT 13
33628: PUSH
33629: LD_INT 14
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: ST_TO_ADDR
33636: GO 33955
33638: LD_INT 42
33640: DOUBLE
33641: EQUAL
33642: IFTRUE 33646
33644: GO 33672
33646: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33647: LD_ADDR_VAR 0 3
33651: PUSH
33652: LD_INT 21
33654: PUSH
33655: LD_INT 22
33657: PUSH
33658: LD_INT 23
33660: PUSH
33661: LD_INT 24
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: ST_TO_ADDR
33670: GO 33955
33672: LD_INT 43
33674: DOUBLE
33675: EQUAL
33676: IFTRUE 33680
33678: GO 33706
33680: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33681: LD_ADDR_VAR 0 3
33685: PUSH
33686: LD_INT 21
33688: PUSH
33689: LD_INT 22
33691: PUSH
33692: LD_INT 23
33694: PUSH
33695: LD_INT 24
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: ST_TO_ADDR
33704: GO 33955
33706: LD_INT 44
33708: DOUBLE
33709: EQUAL
33710: IFTRUE 33714
33712: GO 33740
33714: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33715: LD_ADDR_VAR 0 3
33719: PUSH
33720: LD_INT 21
33722: PUSH
33723: LD_INT 22
33725: PUSH
33726: LD_INT 23
33728: PUSH
33729: LD_INT 24
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: ST_TO_ADDR
33738: GO 33955
33740: LD_INT 45
33742: DOUBLE
33743: EQUAL
33744: IFTRUE 33748
33746: GO 33774
33748: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33749: LD_ADDR_VAR 0 3
33753: PUSH
33754: LD_INT 21
33756: PUSH
33757: LD_INT 22
33759: PUSH
33760: LD_INT 23
33762: PUSH
33763: LD_INT 24
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: ST_TO_ADDR
33772: GO 33955
33774: LD_INT 49
33776: DOUBLE
33777: EQUAL
33778: IFTRUE 33782
33780: GO 33808
33782: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33783: LD_ADDR_VAR 0 3
33787: PUSH
33788: LD_INT 21
33790: PUSH
33791: LD_INT 22
33793: PUSH
33794: LD_INT 23
33796: PUSH
33797: LD_INT 24
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: ST_TO_ADDR
33806: GO 33955
33808: LD_INT 51
33810: DOUBLE
33811: EQUAL
33812: IFTRUE 33816
33814: GO 33842
33816: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33817: LD_ADDR_VAR 0 3
33821: PUSH
33822: LD_INT 21
33824: PUSH
33825: LD_INT 22
33827: PUSH
33828: LD_INT 23
33830: PUSH
33831: LD_INT 24
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: ST_TO_ADDR
33840: GO 33955
33842: LD_INT 52
33844: DOUBLE
33845: EQUAL
33846: IFTRUE 33850
33848: GO 33876
33850: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33851: LD_ADDR_VAR 0 3
33855: PUSH
33856: LD_INT 21
33858: PUSH
33859: LD_INT 22
33861: PUSH
33862: LD_INT 23
33864: PUSH
33865: LD_INT 24
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: ST_TO_ADDR
33874: GO 33955
33876: LD_INT 53
33878: DOUBLE
33879: EQUAL
33880: IFTRUE 33884
33882: GO 33902
33884: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33885: LD_ADDR_VAR 0 3
33889: PUSH
33890: LD_INT 23
33892: PUSH
33893: LD_INT 24
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: ST_TO_ADDR
33900: GO 33955
33902: LD_INT 46
33904: DOUBLE
33905: EQUAL
33906: IFTRUE 33910
33908: GO 33928
33910: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33911: LD_ADDR_VAR 0 3
33915: PUSH
33916: LD_INT 23
33918: PUSH
33919: LD_INT 24
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: ST_TO_ADDR
33926: GO 33955
33928: LD_INT 47
33930: DOUBLE
33931: EQUAL
33932: IFTRUE 33936
33934: GO 33954
33936: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33937: LD_ADDR_VAR 0 3
33941: PUSH
33942: LD_INT 23
33944: PUSH
33945: LD_INT 24
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: ST_TO_ADDR
33952: GO 33955
33954: POP
// result := ( chassis in result ) ;
33955: LD_ADDR_VAR 0 3
33959: PUSH
33960: LD_VAR 0 1
33964: PUSH
33965: LD_VAR 0 3
33969: IN
33970: ST_TO_ADDR
// end ;
33971: LD_VAR 0 3
33975: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33976: LD_INT 0
33978: PPUSH
33979: PPUSH
33980: PPUSH
33981: PPUSH
33982: PPUSH
33983: PPUSH
33984: PPUSH
// result := array ;
33985: LD_ADDR_VAR 0 5
33989: PUSH
33990: LD_VAR 0 1
33994: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33995: LD_VAR 0 1
33999: NOT
34000: PUSH
34001: LD_VAR 0 2
34005: NOT
34006: OR
34007: PUSH
34008: LD_VAR 0 3
34012: NOT
34013: OR
34014: PUSH
34015: LD_VAR 0 2
34019: PUSH
34020: LD_VAR 0 1
34024: GREATER
34025: OR
34026: PUSH
34027: LD_VAR 0 3
34031: PUSH
34032: LD_VAR 0 1
34036: GREATER
34037: OR
34038: IFFALSE 34042
// exit ;
34040: GO 34338
// if direction then
34042: LD_VAR 0 4
34046: IFFALSE 34110
// begin d := 1 ;
34048: LD_ADDR_VAR 0 9
34052: PUSH
34053: LD_INT 1
34055: ST_TO_ADDR
// if i_from > i_to then
34056: LD_VAR 0 2
34060: PUSH
34061: LD_VAR 0 3
34065: GREATER
34066: IFFALSE 34092
// length := ( array - i_from ) + i_to else
34068: LD_ADDR_VAR 0 11
34072: PUSH
34073: LD_VAR 0 1
34077: PUSH
34078: LD_VAR 0 2
34082: MINUS
34083: PUSH
34084: LD_VAR 0 3
34088: PLUS
34089: ST_TO_ADDR
34090: GO 34108
// length := i_to - i_from ;
34092: LD_ADDR_VAR 0 11
34096: PUSH
34097: LD_VAR 0 3
34101: PUSH
34102: LD_VAR 0 2
34106: MINUS
34107: ST_TO_ADDR
// end else
34108: GO 34171
// begin d := - 1 ;
34110: LD_ADDR_VAR 0 9
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: ST_TO_ADDR
// if i_from > i_to then
34119: LD_VAR 0 2
34123: PUSH
34124: LD_VAR 0 3
34128: GREATER
34129: IFFALSE 34149
// length := i_from - i_to else
34131: LD_ADDR_VAR 0 11
34135: PUSH
34136: LD_VAR 0 2
34140: PUSH
34141: LD_VAR 0 3
34145: MINUS
34146: ST_TO_ADDR
34147: GO 34171
// length := ( array - i_to ) + i_from ;
34149: LD_ADDR_VAR 0 11
34153: PUSH
34154: LD_VAR 0 1
34158: PUSH
34159: LD_VAR 0 3
34163: MINUS
34164: PUSH
34165: LD_VAR 0 2
34169: PLUS
34170: ST_TO_ADDR
// end ; if not length then
34171: LD_VAR 0 11
34175: NOT
34176: IFFALSE 34180
// exit ;
34178: GO 34338
// tmp := array ;
34180: LD_ADDR_VAR 0 10
34184: PUSH
34185: LD_VAR 0 1
34189: ST_TO_ADDR
// for i = 1 to length do
34190: LD_ADDR_VAR 0 6
34194: PUSH
34195: DOUBLE
34196: LD_INT 1
34198: DEC
34199: ST_TO_ADDR
34200: LD_VAR 0 11
34204: PUSH
34205: FOR_TO
34206: IFFALSE 34326
// begin for j = 1 to array do
34208: LD_ADDR_VAR 0 7
34212: PUSH
34213: DOUBLE
34214: LD_INT 1
34216: DEC
34217: ST_TO_ADDR
34218: LD_VAR 0 1
34222: PUSH
34223: FOR_TO
34224: IFFALSE 34312
// begin k := j + d ;
34226: LD_ADDR_VAR 0 8
34230: PUSH
34231: LD_VAR 0 7
34235: PUSH
34236: LD_VAR 0 9
34240: PLUS
34241: ST_TO_ADDR
// if k > array then
34242: LD_VAR 0 8
34246: PUSH
34247: LD_VAR 0 1
34251: GREATER
34252: IFFALSE 34262
// k := 1 ;
34254: LD_ADDR_VAR 0 8
34258: PUSH
34259: LD_INT 1
34261: ST_TO_ADDR
// if not k then
34262: LD_VAR 0 8
34266: NOT
34267: IFFALSE 34279
// k := array ;
34269: LD_ADDR_VAR 0 8
34273: PUSH
34274: LD_VAR 0 1
34278: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34279: LD_ADDR_VAR 0 10
34283: PUSH
34284: LD_VAR 0 10
34288: PPUSH
34289: LD_VAR 0 8
34293: PPUSH
34294: LD_VAR 0 1
34298: PUSH
34299: LD_VAR 0 7
34303: ARRAY
34304: PPUSH
34305: CALL_OW 1
34309: ST_TO_ADDR
// end ;
34310: GO 34223
34312: POP
34313: POP
// array := tmp ;
34314: LD_ADDR_VAR 0 1
34318: PUSH
34319: LD_VAR 0 10
34323: ST_TO_ADDR
// end ;
34324: GO 34205
34326: POP
34327: POP
// result := array ;
34328: LD_ADDR_VAR 0 5
34332: PUSH
34333: LD_VAR 0 1
34337: ST_TO_ADDR
// end ;
34338: LD_VAR 0 5
34342: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34343: LD_INT 0
34345: PPUSH
34346: PPUSH
// result := 0 ;
34347: LD_ADDR_VAR 0 3
34351: PUSH
34352: LD_INT 0
34354: ST_TO_ADDR
// if not array or not value in array then
34355: LD_VAR 0 1
34359: NOT
34360: PUSH
34361: LD_VAR 0 2
34365: PUSH
34366: LD_VAR 0 1
34370: IN
34371: NOT
34372: OR
34373: IFFALSE 34377
// exit ;
34375: GO 34431
// for i = 1 to array do
34377: LD_ADDR_VAR 0 4
34381: PUSH
34382: DOUBLE
34383: LD_INT 1
34385: DEC
34386: ST_TO_ADDR
34387: LD_VAR 0 1
34391: PUSH
34392: FOR_TO
34393: IFFALSE 34429
// if value = array [ i ] then
34395: LD_VAR 0 2
34399: PUSH
34400: LD_VAR 0 1
34404: PUSH
34405: LD_VAR 0 4
34409: ARRAY
34410: EQUAL
34411: IFFALSE 34427
// begin result := i ;
34413: LD_ADDR_VAR 0 3
34417: PUSH
34418: LD_VAR 0 4
34422: ST_TO_ADDR
// exit ;
34423: POP
34424: POP
34425: GO 34431
// end ;
34427: GO 34392
34429: POP
34430: POP
// end ;
34431: LD_VAR 0 3
34435: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34436: LD_INT 0
34438: PPUSH
// vc_chassis := chassis ;
34439: LD_ADDR_OWVAR 37
34443: PUSH
34444: LD_VAR 0 1
34448: ST_TO_ADDR
// vc_engine := engine ;
34449: LD_ADDR_OWVAR 39
34453: PUSH
34454: LD_VAR 0 2
34458: ST_TO_ADDR
// vc_control := control ;
34459: LD_ADDR_OWVAR 38
34463: PUSH
34464: LD_VAR 0 3
34468: ST_TO_ADDR
// vc_weapon := weapon ;
34469: LD_ADDR_OWVAR 40
34473: PUSH
34474: LD_VAR 0 4
34478: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34479: LD_ADDR_OWVAR 41
34483: PUSH
34484: LD_VAR 0 5
34488: ST_TO_ADDR
// end ;
34489: LD_VAR 0 6
34493: RET
// export function WantPlant ( unit ) ; var task ; begin
34494: LD_INT 0
34496: PPUSH
34497: PPUSH
// result := false ;
34498: LD_ADDR_VAR 0 2
34502: PUSH
34503: LD_INT 0
34505: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34506: LD_ADDR_VAR 0 3
34510: PUSH
34511: LD_VAR 0 1
34515: PPUSH
34516: CALL_OW 437
34520: ST_TO_ADDR
// if task then
34521: LD_VAR 0 3
34525: IFFALSE 34553
// if task [ 1 ] [ 1 ] = p then
34527: LD_VAR 0 3
34531: PUSH
34532: LD_INT 1
34534: ARRAY
34535: PUSH
34536: LD_INT 1
34538: ARRAY
34539: PUSH
34540: LD_STRING p
34542: EQUAL
34543: IFFALSE 34553
// result := true ;
34545: LD_ADDR_VAR 0 2
34549: PUSH
34550: LD_INT 1
34552: ST_TO_ADDR
// end ;
34553: LD_VAR 0 2
34557: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34558: LD_INT 0
34560: PPUSH
34561: PPUSH
34562: PPUSH
34563: PPUSH
// if pos < 1 then
34564: LD_VAR 0 2
34568: PUSH
34569: LD_INT 1
34571: LESS
34572: IFFALSE 34576
// exit ;
34574: GO 34879
// if pos = 1 then
34576: LD_VAR 0 2
34580: PUSH
34581: LD_INT 1
34583: EQUAL
34584: IFFALSE 34617
// result := Replace ( arr , pos [ 1 ] , value ) else
34586: LD_ADDR_VAR 0 4
34590: PUSH
34591: LD_VAR 0 1
34595: PPUSH
34596: LD_VAR 0 2
34600: PUSH
34601: LD_INT 1
34603: ARRAY
34604: PPUSH
34605: LD_VAR 0 3
34609: PPUSH
34610: CALL_OW 1
34614: ST_TO_ADDR
34615: GO 34879
// begin tmp := arr ;
34617: LD_ADDR_VAR 0 6
34621: PUSH
34622: LD_VAR 0 1
34626: ST_TO_ADDR
// s_arr := [ tmp ] ;
34627: LD_ADDR_VAR 0 7
34631: PUSH
34632: LD_VAR 0 6
34636: PUSH
34637: EMPTY
34638: LIST
34639: ST_TO_ADDR
// for i = 1 to pos - 1 do
34640: LD_ADDR_VAR 0 5
34644: PUSH
34645: DOUBLE
34646: LD_INT 1
34648: DEC
34649: ST_TO_ADDR
34650: LD_VAR 0 2
34654: PUSH
34655: LD_INT 1
34657: MINUS
34658: PUSH
34659: FOR_TO
34660: IFFALSE 34705
// begin tmp := tmp [ pos [ i ] ] ;
34662: LD_ADDR_VAR 0 6
34666: PUSH
34667: LD_VAR 0 6
34671: PUSH
34672: LD_VAR 0 2
34676: PUSH
34677: LD_VAR 0 5
34681: ARRAY
34682: ARRAY
34683: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34684: LD_ADDR_VAR 0 7
34688: PUSH
34689: LD_VAR 0 7
34693: PUSH
34694: LD_VAR 0 6
34698: PUSH
34699: EMPTY
34700: LIST
34701: ADD
34702: ST_TO_ADDR
// end ;
34703: GO 34659
34705: POP
34706: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34707: LD_ADDR_VAR 0 6
34711: PUSH
34712: LD_VAR 0 6
34716: PPUSH
34717: LD_VAR 0 2
34721: PUSH
34722: LD_VAR 0 2
34726: ARRAY
34727: PPUSH
34728: LD_VAR 0 3
34732: PPUSH
34733: CALL_OW 1
34737: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34738: LD_ADDR_VAR 0 7
34742: PUSH
34743: LD_VAR 0 7
34747: PPUSH
34748: LD_VAR 0 7
34752: PPUSH
34753: LD_VAR 0 6
34757: PPUSH
34758: CALL_OW 1
34762: ST_TO_ADDR
// for i = s_arr downto 2 do
34763: LD_ADDR_VAR 0 5
34767: PUSH
34768: DOUBLE
34769: LD_VAR 0 7
34773: INC
34774: ST_TO_ADDR
34775: LD_INT 2
34777: PUSH
34778: FOR_DOWNTO
34779: IFFALSE 34863
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34781: LD_ADDR_VAR 0 6
34785: PUSH
34786: LD_VAR 0 7
34790: PUSH
34791: LD_VAR 0 5
34795: PUSH
34796: LD_INT 1
34798: MINUS
34799: ARRAY
34800: PPUSH
34801: LD_VAR 0 2
34805: PUSH
34806: LD_VAR 0 5
34810: PUSH
34811: LD_INT 1
34813: MINUS
34814: ARRAY
34815: PPUSH
34816: LD_VAR 0 7
34820: PUSH
34821: LD_VAR 0 5
34825: ARRAY
34826: PPUSH
34827: CALL_OW 1
34831: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34832: LD_ADDR_VAR 0 7
34836: PUSH
34837: LD_VAR 0 7
34841: PPUSH
34842: LD_VAR 0 5
34846: PUSH
34847: LD_INT 1
34849: MINUS
34850: PPUSH
34851: LD_VAR 0 6
34855: PPUSH
34856: CALL_OW 1
34860: ST_TO_ADDR
// end ;
34861: GO 34778
34863: POP
34864: POP
// result := s_arr [ 1 ] ;
34865: LD_ADDR_VAR 0 4
34869: PUSH
34870: LD_VAR 0 7
34874: PUSH
34875: LD_INT 1
34877: ARRAY
34878: ST_TO_ADDR
// end ; end ;
34879: LD_VAR 0 4
34883: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34884: LD_INT 0
34886: PPUSH
34887: PPUSH
// if not list then
34888: LD_VAR 0 1
34892: NOT
34893: IFFALSE 34897
// exit ;
34895: GO 34988
// i := list [ pos1 ] ;
34897: LD_ADDR_VAR 0 5
34901: PUSH
34902: LD_VAR 0 1
34906: PUSH
34907: LD_VAR 0 2
34911: ARRAY
34912: ST_TO_ADDR
// if not i then
34913: LD_VAR 0 5
34917: NOT
34918: IFFALSE 34922
// exit ;
34920: GO 34988
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34922: LD_ADDR_VAR 0 1
34926: PUSH
34927: LD_VAR 0 1
34931: PPUSH
34932: LD_VAR 0 2
34936: PPUSH
34937: LD_VAR 0 1
34941: PUSH
34942: LD_VAR 0 3
34946: ARRAY
34947: PPUSH
34948: CALL_OW 1
34952: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34953: LD_ADDR_VAR 0 1
34957: PUSH
34958: LD_VAR 0 1
34962: PPUSH
34963: LD_VAR 0 3
34967: PPUSH
34968: LD_VAR 0 5
34972: PPUSH
34973: CALL_OW 1
34977: ST_TO_ADDR
// result := list ;
34978: LD_ADDR_VAR 0 4
34982: PUSH
34983: LD_VAR 0 1
34987: ST_TO_ADDR
// end ;
34988: LD_VAR 0 4
34992: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34993: LD_INT 0
34995: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34996: LD_ADDR_VAR 0 5
35000: PUSH
35001: LD_VAR 0 1
35005: PPUSH
35006: CALL_OW 250
35010: PPUSH
35011: LD_VAR 0 1
35015: PPUSH
35016: CALL_OW 251
35020: PPUSH
35021: LD_VAR 0 2
35025: PPUSH
35026: LD_VAR 0 3
35030: PPUSH
35031: LD_VAR 0 4
35035: PPUSH
35036: CALL 35046 0 5
35040: ST_TO_ADDR
// end ;
35041: LD_VAR 0 5
35045: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35046: LD_INT 0
35048: PPUSH
35049: PPUSH
35050: PPUSH
35051: PPUSH
// if not list then
35052: LD_VAR 0 3
35056: NOT
35057: IFFALSE 35061
// exit ;
35059: GO 35449
// result := [ ] ;
35061: LD_ADDR_VAR 0 6
35065: PUSH
35066: EMPTY
35067: ST_TO_ADDR
// for i in list do
35068: LD_ADDR_VAR 0 7
35072: PUSH
35073: LD_VAR 0 3
35077: PUSH
35078: FOR_IN
35079: IFFALSE 35281
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35081: LD_ADDR_VAR 0 9
35085: PUSH
35086: LD_VAR 0 7
35090: PPUSH
35091: LD_VAR 0 1
35095: PPUSH
35096: LD_VAR 0 2
35100: PPUSH
35101: CALL_OW 297
35105: ST_TO_ADDR
// if not result then
35106: LD_VAR 0 6
35110: NOT
35111: IFFALSE 35137
// result := [ [ i , tmp ] ] else
35113: LD_ADDR_VAR 0 6
35117: PUSH
35118: LD_VAR 0 7
35122: PUSH
35123: LD_VAR 0 9
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: EMPTY
35133: LIST
35134: ST_TO_ADDR
35135: GO 35279
// begin if result [ result ] [ 2 ] < tmp then
35137: LD_VAR 0 6
35141: PUSH
35142: LD_VAR 0 6
35146: ARRAY
35147: PUSH
35148: LD_INT 2
35150: ARRAY
35151: PUSH
35152: LD_VAR 0 9
35156: LESS
35157: IFFALSE 35199
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35159: LD_ADDR_VAR 0 6
35163: PUSH
35164: LD_VAR 0 6
35168: PPUSH
35169: LD_VAR 0 6
35173: PUSH
35174: LD_INT 1
35176: PLUS
35177: PPUSH
35178: LD_VAR 0 7
35182: PUSH
35183: LD_VAR 0 9
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PPUSH
35192: CALL_OW 2
35196: ST_TO_ADDR
35197: GO 35279
// for j = 1 to result do
35199: LD_ADDR_VAR 0 8
35203: PUSH
35204: DOUBLE
35205: LD_INT 1
35207: DEC
35208: ST_TO_ADDR
35209: LD_VAR 0 6
35213: PUSH
35214: FOR_TO
35215: IFFALSE 35277
// begin if tmp < result [ j ] [ 2 ] then
35217: LD_VAR 0 9
35221: PUSH
35222: LD_VAR 0 6
35226: PUSH
35227: LD_VAR 0 8
35231: ARRAY
35232: PUSH
35233: LD_INT 2
35235: ARRAY
35236: LESS
35237: IFFALSE 35275
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35239: LD_ADDR_VAR 0 6
35243: PUSH
35244: LD_VAR 0 6
35248: PPUSH
35249: LD_VAR 0 8
35253: PPUSH
35254: LD_VAR 0 7
35258: PUSH
35259: LD_VAR 0 9
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PPUSH
35268: CALL_OW 2
35272: ST_TO_ADDR
// break ;
35273: GO 35277
// end ; end ;
35275: GO 35214
35277: POP
35278: POP
// end ; end ;
35279: GO 35078
35281: POP
35282: POP
// if result and not asc then
35283: LD_VAR 0 6
35287: PUSH
35288: LD_VAR 0 4
35292: NOT
35293: AND
35294: IFFALSE 35369
// begin tmp := result ;
35296: LD_ADDR_VAR 0 9
35300: PUSH
35301: LD_VAR 0 6
35305: ST_TO_ADDR
// for i = tmp downto 1 do
35306: LD_ADDR_VAR 0 7
35310: PUSH
35311: DOUBLE
35312: LD_VAR 0 9
35316: INC
35317: ST_TO_ADDR
35318: LD_INT 1
35320: PUSH
35321: FOR_DOWNTO
35322: IFFALSE 35367
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35324: LD_ADDR_VAR 0 6
35328: PUSH
35329: LD_VAR 0 6
35333: PPUSH
35334: LD_VAR 0 9
35338: PUSH
35339: LD_VAR 0 7
35343: MINUS
35344: PUSH
35345: LD_INT 1
35347: PLUS
35348: PPUSH
35349: LD_VAR 0 9
35353: PUSH
35354: LD_VAR 0 7
35358: ARRAY
35359: PPUSH
35360: CALL_OW 1
35364: ST_TO_ADDR
35365: GO 35321
35367: POP
35368: POP
// end ; tmp := [ ] ;
35369: LD_ADDR_VAR 0 9
35373: PUSH
35374: EMPTY
35375: ST_TO_ADDR
// if mode then
35376: LD_VAR 0 5
35380: IFFALSE 35449
// begin for i = 1 to result do
35382: LD_ADDR_VAR 0 7
35386: PUSH
35387: DOUBLE
35388: LD_INT 1
35390: DEC
35391: ST_TO_ADDR
35392: LD_VAR 0 6
35396: PUSH
35397: FOR_TO
35398: IFFALSE 35437
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35400: LD_ADDR_VAR 0 9
35404: PUSH
35405: LD_VAR 0 9
35409: PPUSH
35410: LD_VAR 0 7
35414: PPUSH
35415: LD_VAR 0 6
35419: PUSH
35420: LD_VAR 0 7
35424: ARRAY
35425: PUSH
35426: LD_INT 1
35428: ARRAY
35429: PPUSH
35430: CALL_OW 1
35434: ST_TO_ADDR
35435: GO 35397
35437: POP
35438: POP
// result := tmp ;
35439: LD_ADDR_VAR 0 6
35443: PUSH
35444: LD_VAR 0 9
35448: ST_TO_ADDR
// end ; end ;
35449: LD_VAR 0 6
35453: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35454: LD_INT 0
35456: PPUSH
35457: PPUSH
35458: PPUSH
35459: PPUSH
35460: PPUSH
35461: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35462: LD_ADDR_VAR 0 5
35466: PUSH
35467: LD_INT 0
35469: PUSH
35470: LD_INT 0
35472: PUSH
35473: LD_INT 0
35475: PUSH
35476: EMPTY
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: ST_TO_ADDR
// if not x or not y then
35484: LD_VAR 0 2
35488: NOT
35489: PUSH
35490: LD_VAR 0 3
35494: NOT
35495: OR
35496: IFFALSE 35500
// exit ;
35498: GO 37150
// if not range then
35500: LD_VAR 0 4
35504: NOT
35505: IFFALSE 35515
// range := 10 ;
35507: LD_ADDR_VAR 0 4
35511: PUSH
35512: LD_INT 10
35514: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35515: LD_ADDR_VAR 0 8
35519: PUSH
35520: LD_INT 81
35522: PUSH
35523: LD_VAR 0 1
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 92
35534: PUSH
35535: LD_VAR 0 2
35539: PUSH
35540: LD_VAR 0 3
35544: PUSH
35545: LD_VAR 0 4
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 3
35558: PUSH
35559: LD_INT 21
35561: PUSH
35562: LD_INT 3
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: LIST
35577: PPUSH
35578: CALL_OW 69
35582: ST_TO_ADDR
// if not tmp then
35583: LD_VAR 0 8
35587: NOT
35588: IFFALSE 35592
// exit ;
35590: GO 37150
// for i in tmp do
35592: LD_ADDR_VAR 0 6
35596: PUSH
35597: LD_VAR 0 8
35601: PUSH
35602: FOR_IN
35603: IFFALSE 37125
// begin points := [ 0 , 0 , 0 ] ;
35605: LD_ADDR_VAR 0 9
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: LD_INT 0
35615: PUSH
35616: LD_INT 0
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: LIST
35623: ST_TO_ADDR
// bpoints := 1 ;
35624: LD_ADDR_VAR 0 10
35628: PUSH
35629: LD_INT 1
35631: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35632: LD_VAR 0 6
35636: PPUSH
35637: CALL_OW 247
35641: PUSH
35642: LD_INT 1
35644: DOUBLE
35645: EQUAL
35646: IFTRUE 35650
35648: GO 36228
35650: POP
// begin if GetClass ( i ) = 1 then
35651: LD_VAR 0 6
35655: PPUSH
35656: CALL_OW 257
35660: PUSH
35661: LD_INT 1
35663: EQUAL
35664: IFFALSE 35685
// points := [ 10 , 5 , 3 ] ;
35666: LD_ADDR_VAR 0 9
35670: PUSH
35671: LD_INT 10
35673: PUSH
35674: LD_INT 5
35676: PUSH
35677: LD_INT 3
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: LIST
35684: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35685: LD_VAR 0 6
35689: PPUSH
35690: CALL_OW 257
35694: PUSH
35695: LD_INT 2
35697: PUSH
35698: LD_INT 3
35700: PUSH
35701: LD_INT 4
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: LIST
35708: IN
35709: IFFALSE 35730
// points := [ 3 , 2 , 1 ] ;
35711: LD_ADDR_VAR 0 9
35715: PUSH
35716: LD_INT 3
35718: PUSH
35719: LD_INT 2
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: LIST
35729: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35730: LD_VAR 0 6
35734: PPUSH
35735: CALL_OW 257
35739: PUSH
35740: LD_INT 5
35742: EQUAL
35743: IFFALSE 35764
// points := [ 130 , 5 , 2 ] ;
35745: LD_ADDR_VAR 0 9
35749: PUSH
35750: LD_INT 130
35752: PUSH
35753: LD_INT 5
35755: PUSH
35756: LD_INT 2
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: LIST
35763: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35764: LD_VAR 0 6
35768: PPUSH
35769: CALL_OW 257
35773: PUSH
35774: LD_INT 8
35776: EQUAL
35777: IFFALSE 35798
// points := [ 35 , 35 , 30 ] ;
35779: LD_ADDR_VAR 0 9
35783: PUSH
35784: LD_INT 35
35786: PUSH
35787: LD_INT 35
35789: PUSH
35790: LD_INT 30
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: LIST
35797: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35798: LD_VAR 0 6
35802: PPUSH
35803: CALL_OW 257
35807: PUSH
35808: LD_INT 9
35810: EQUAL
35811: IFFALSE 35832
// points := [ 20 , 55 , 40 ] ;
35813: LD_ADDR_VAR 0 9
35817: PUSH
35818: LD_INT 20
35820: PUSH
35821: LD_INT 55
35823: PUSH
35824: LD_INT 40
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: LIST
35831: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35832: LD_VAR 0 6
35836: PPUSH
35837: CALL_OW 257
35841: PUSH
35842: LD_INT 12
35844: PUSH
35845: LD_INT 16
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: IN
35852: IFFALSE 35873
// points := [ 5 , 3 , 2 ] ;
35854: LD_ADDR_VAR 0 9
35858: PUSH
35859: LD_INT 5
35861: PUSH
35862: LD_INT 3
35864: PUSH
35865: LD_INT 2
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: LIST
35872: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35873: LD_VAR 0 6
35877: PPUSH
35878: CALL_OW 257
35882: PUSH
35883: LD_INT 17
35885: EQUAL
35886: IFFALSE 35907
// points := [ 100 , 50 , 75 ] ;
35888: LD_ADDR_VAR 0 9
35892: PUSH
35893: LD_INT 100
35895: PUSH
35896: LD_INT 50
35898: PUSH
35899: LD_INT 75
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: LIST
35906: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35907: LD_VAR 0 6
35911: PPUSH
35912: CALL_OW 257
35916: PUSH
35917: LD_INT 15
35919: EQUAL
35920: IFFALSE 35941
// points := [ 10 , 5 , 3 ] ;
35922: LD_ADDR_VAR 0 9
35926: PUSH
35927: LD_INT 10
35929: PUSH
35930: LD_INT 5
35932: PUSH
35933: LD_INT 3
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: LIST
35940: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35941: LD_VAR 0 6
35945: PPUSH
35946: CALL_OW 257
35950: PUSH
35951: LD_INT 14
35953: EQUAL
35954: IFFALSE 35975
// points := [ 10 , 0 , 0 ] ;
35956: LD_ADDR_VAR 0 9
35960: PUSH
35961: LD_INT 10
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: LD_INT 0
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: LIST
35974: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35975: LD_VAR 0 6
35979: PPUSH
35980: CALL_OW 257
35984: PUSH
35985: LD_INT 11
35987: EQUAL
35988: IFFALSE 36009
// points := [ 30 , 10 , 5 ] ;
35990: LD_ADDR_VAR 0 9
35994: PUSH
35995: LD_INT 30
35997: PUSH
35998: LD_INT 10
36000: PUSH
36001: LD_INT 5
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: LIST
36008: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36009: LD_VAR 0 1
36013: PPUSH
36014: LD_INT 5
36016: PPUSH
36017: CALL_OW 321
36021: PUSH
36022: LD_INT 2
36024: EQUAL
36025: IFFALSE 36042
// bpoints := bpoints * 1.8 ;
36027: LD_ADDR_VAR 0 10
36031: PUSH
36032: LD_VAR 0 10
36036: PUSH
36037: LD_REAL  1.80000000000000E+0000
36040: MUL
36041: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36042: LD_VAR 0 6
36046: PPUSH
36047: CALL_OW 257
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: LD_INT 2
36057: PUSH
36058: LD_INT 3
36060: PUSH
36061: LD_INT 4
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: IN
36070: PUSH
36071: LD_VAR 0 1
36075: PPUSH
36076: LD_INT 51
36078: PPUSH
36079: CALL_OW 321
36083: PUSH
36084: LD_INT 2
36086: EQUAL
36087: AND
36088: IFFALSE 36105
// bpoints := bpoints * 1.2 ;
36090: LD_ADDR_VAR 0 10
36094: PUSH
36095: LD_VAR 0 10
36099: PUSH
36100: LD_REAL  1.20000000000000E+0000
36103: MUL
36104: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36105: LD_VAR 0 6
36109: PPUSH
36110: CALL_OW 257
36114: PUSH
36115: LD_INT 5
36117: PUSH
36118: LD_INT 7
36120: PUSH
36121: LD_INT 9
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: LIST
36128: IN
36129: PUSH
36130: LD_VAR 0 1
36134: PPUSH
36135: LD_INT 52
36137: PPUSH
36138: CALL_OW 321
36142: PUSH
36143: LD_INT 2
36145: EQUAL
36146: AND
36147: IFFALSE 36164
// bpoints := bpoints * 1.5 ;
36149: LD_ADDR_VAR 0 10
36153: PUSH
36154: LD_VAR 0 10
36158: PUSH
36159: LD_REAL  1.50000000000000E+0000
36162: MUL
36163: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36164: LD_VAR 0 1
36168: PPUSH
36169: LD_INT 66
36171: PPUSH
36172: CALL_OW 321
36176: PUSH
36177: LD_INT 2
36179: EQUAL
36180: IFFALSE 36197
// bpoints := bpoints * 1.1 ;
36182: LD_ADDR_VAR 0 10
36186: PUSH
36187: LD_VAR 0 10
36191: PUSH
36192: LD_REAL  1.10000000000000E+0000
36195: MUL
36196: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36197: LD_ADDR_VAR 0 10
36201: PUSH
36202: LD_VAR 0 10
36206: PUSH
36207: LD_VAR 0 6
36211: PPUSH
36212: LD_INT 1
36214: PPUSH
36215: CALL_OW 259
36219: PUSH
36220: LD_REAL  1.15000000000000E+0000
36223: MUL
36224: MUL
36225: ST_TO_ADDR
// end ; unit_vehicle :
36226: GO 37054
36228: LD_INT 2
36230: DOUBLE
36231: EQUAL
36232: IFTRUE 36236
36234: GO 37042
36236: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36237: LD_VAR 0 6
36241: PPUSH
36242: CALL_OW 264
36246: PUSH
36247: LD_INT 2
36249: PUSH
36250: LD_INT 42
36252: PUSH
36253: LD_INT 24
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: LIST
36260: IN
36261: IFFALSE 36282
// points := [ 25 , 5 , 3 ] ;
36263: LD_ADDR_VAR 0 9
36267: PUSH
36268: LD_INT 25
36270: PUSH
36271: LD_INT 5
36273: PUSH
36274: LD_INT 3
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: LIST
36281: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36282: LD_VAR 0 6
36286: PPUSH
36287: CALL_OW 264
36291: PUSH
36292: LD_INT 4
36294: PUSH
36295: LD_INT 43
36297: PUSH
36298: LD_INT 25
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: LIST
36305: IN
36306: IFFALSE 36327
// points := [ 40 , 15 , 5 ] ;
36308: LD_ADDR_VAR 0 9
36312: PUSH
36313: LD_INT 40
36315: PUSH
36316: LD_INT 15
36318: PUSH
36319: LD_INT 5
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: LIST
36326: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36327: LD_VAR 0 6
36331: PPUSH
36332: CALL_OW 264
36336: PUSH
36337: LD_INT 3
36339: PUSH
36340: LD_INT 23
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: IN
36347: IFFALSE 36368
// points := [ 7 , 25 , 8 ] ;
36349: LD_ADDR_VAR 0 9
36353: PUSH
36354: LD_INT 7
36356: PUSH
36357: LD_INT 25
36359: PUSH
36360: LD_INT 8
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: LIST
36367: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36368: LD_VAR 0 6
36372: PPUSH
36373: CALL_OW 264
36377: PUSH
36378: LD_INT 5
36380: PUSH
36381: LD_INT 27
36383: PUSH
36384: LD_INT 44
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: LIST
36391: IN
36392: IFFALSE 36413
// points := [ 14 , 50 , 16 ] ;
36394: LD_ADDR_VAR 0 9
36398: PUSH
36399: LD_INT 14
36401: PUSH
36402: LD_INT 50
36404: PUSH
36405: LD_INT 16
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: LIST
36412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36413: LD_VAR 0 6
36417: PPUSH
36418: CALL_OW 264
36422: PUSH
36423: LD_INT 6
36425: PUSH
36426: LD_INT 46
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: IN
36433: IFFALSE 36454
// points := [ 32 , 120 , 70 ] ;
36435: LD_ADDR_VAR 0 9
36439: PUSH
36440: LD_INT 32
36442: PUSH
36443: LD_INT 120
36445: PUSH
36446: LD_INT 70
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36454: LD_VAR 0 6
36458: PPUSH
36459: CALL_OW 264
36463: PUSH
36464: LD_INT 7
36466: PUSH
36467: LD_INT 28
36469: PUSH
36470: LD_INT 45
36472: PUSH
36473: LD_INT 92
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: IN
36482: IFFALSE 36503
// points := [ 35 , 20 , 45 ] ;
36484: LD_ADDR_VAR 0 9
36488: PUSH
36489: LD_INT 35
36491: PUSH
36492: LD_INT 20
36494: PUSH
36495: LD_INT 45
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: LIST
36502: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36503: LD_VAR 0 6
36507: PPUSH
36508: CALL_OW 264
36512: PUSH
36513: LD_INT 47
36515: PUSH
36516: EMPTY
36517: LIST
36518: IN
36519: IFFALSE 36540
// points := [ 67 , 45 , 75 ] ;
36521: LD_ADDR_VAR 0 9
36525: PUSH
36526: LD_INT 67
36528: PUSH
36529: LD_INT 45
36531: PUSH
36532: LD_INT 75
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: LIST
36539: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36540: LD_VAR 0 6
36544: PPUSH
36545: CALL_OW 264
36549: PUSH
36550: LD_INT 26
36552: PUSH
36553: EMPTY
36554: LIST
36555: IN
36556: IFFALSE 36577
// points := [ 120 , 30 , 80 ] ;
36558: LD_ADDR_VAR 0 9
36562: PUSH
36563: LD_INT 120
36565: PUSH
36566: LD_INT 30
36568: PUSH
36569: LD_INT 80
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: LIST
36576: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36577: LD_VAR 0 6
36581: PPUSH
36582: CALL_OW 264
36586: PUSH
36587: LD_INT 22
36589: PUSH
36590: EMPTY
36591: LIST
36592: IN
36593: IFFALSE 36614
// points := [ 40 , 1 , 1 ] ;
36595: LD_ADDR_VAR 0 9
36599: PUSH
36600: LD_INT 40
36602: PUSH
36603: LD_INT 1
36605: PUSH
36606: LD_INT 1
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: LIST
36613: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36614: LD_VAR 0 6
36618: PPUSH
36619: CALL_OW 264
36623: PUSH
36624: LD_INT 29
36626: PUSH
36627: EMPTY
36628: LIST
36629: IN
36630: IFFALSE 36651
// points := [ 70 , 200 , 400 ] ;
36632: LD_ADDR_VAR 0 9
36636: PUSH
36637: LD_INT 70
36639: PUSH
36640: LD_INT 200
36642: PUSH
36643: LD_INT 400
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: LIST
36650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36651: LD_VAR 0 6
36655: PPUSH
36656: CALL_OW 264
36660: PUSH
36661: LD_INT 14
36663: PUSH
36664: LD_INT 53
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: IN
36671: IFFALSE 36692
// points := [ 40 , 10 , 20 ] ;
36673: LD_ADDR_VAR 0 9
36677: PUSH
36678: LD_INT 40
36680: PUSH
36681: LD_INT 10
36683: PUSH
36684: LD_INT 20
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: LIST
36691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36692: LD_VAR 0 6
36696: PPUSH
36697: CALL_OW 264
36701: PUSH
36702: LD_INT 9
36704: PUSH
36705: EMPTY
36706: LIST
36707: IN
36708: IFFALSE 36729
// points := [ 5 , 70 , 20 ] ;
36710: LD_ADDR_VAR 0 9
36714: PUSH
36715: LD_INT 5
36717: PUSH
36718: LD_INT 70
36720: PUSH
36721: LD_INT 20
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: LIST
36728: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36729: LD_VAR 0 6
36733: PPUSH
36734: CALL_OW 264
36738: PUSH
36739: LD_INT 10
36741: PUSH
36742: EMPTY
36743: LIST
36744: IN
36745: IFFALSE 36766
// points := [ 35 , 110 , 70 ] ;
36747: LD_ADDR_VAR 0 9
36751: PUSH
36752: LD_INT 35
36754: PUSH
36755: LD_INT 110
36757: PUSH
36758: LD_INT 70
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: LIST
36765: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36766: LD_VAR 0 6
36770: PPUSH
36771: CALL_OW 265
36775: PUSH
36776: LD_INT 25
36778: EQUAL
36779: IFFALSE 36800
// points := [ 80 , 65 , 100 ] ;
36781: LD_ADDR_VAR 0 9
36785: PUSH
36786: LD_INT 80
36788: PUSH
36789: LD_INT 65
36791: PUSH
36792: LD_INT 100
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: LIST
36799: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36800: LD_VAR 0 6
36804: PPUSH
36805: CALL_OW 263
36809: PUSH
36810: LD_INT 1
36812: EQUAL
36813: IFFALSE 36848
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36815: LD_ADDR_VAR 0 10
36819: PUSH
36820: LD_VAR 0 10
36824: PUSH
36825: LD_VAR 0 6
36829: PPUSH
36830: CALL_OW 311
36834: PPUSH
36835: LD_INT 3
36837: PPUSH
36838: CALL_OW 259
36842: PUSH
36843: LD_INT 4
36845: MUL
36846: MUL
36847: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36848: LD_VAR 0 6
36852: PPUSH
36853: CALL_OW 263
36857: PUSH
36858: LD_INT 2
36860: EQUAL
36861: IFFALSE 36912
// begin j := IsControledBy ( i ) ;
36863: LD_ADDR_VAR 0 7
36867: PUSH
36868: LD_VAR 0 6
36872: PPUSH
36873: CALL_OW 312
36877: ST_TO_ADDR
// if j then
36878: LD_VAR 0 7
36882: IFFALSE 36912
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36884: LD_ADDR_VAR 0 10
36888: PUSH
36889: LD_VAR 0 10
36893: PUSH
36894: LD_VAR 0 7
36898: PPUSH
36899: LD_INT 3
36901: PPUSH
36902: CALL_OW 259
36906: PUSH
36907: LD_INT 3
36909: MUL
36910: MUL
36911: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36912: LD_VAR 0 6
36916: PPUSH
36917: CALL_OW 264
36921: PUSH
36922: LD_INT 5
36924: PUSH
36925: LD_INT 6
36927: PUSH
36928: LD_INT 46
36930: PUSH
36931: LD_INT 44
36933: PUSH
36934: LD_INT 47
36936: PUSH
36937: LD_INT 45
36939: PUSH
36940: LD_INT 28
36942: PUSH
36943: LD_INT 7
36945: PUSH
36946: LD_INT 27
36948: PUSH
36949: LD_INT 29
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: IN
36964: PUSH
36965: LD_VAR 0 1
36969: PPUSH
36970: LD_INT 52
36972: PPUSH
36973: CALL_OW 321
36977: PUSH
36978: LD_INT 2
36980: EQUAL
36981: AND
36982: IFFALSE 36999
// bpoints := bpoints * 1.2 ;
36984: LD_ADDR_VAR 0 10
36988: PUSH
36989: LD_VAR 0 10
36993: PUSH
36994: LD_REAL  1.20000000000000E+0000
36997: MUL
36998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36999: LD_VAR 0 6
37003: PPUSH
37004: CALL_OW 264
37008: PUSH
37009: LD_INT 6
37011: PUSH
37012: LD_INT 46
37014: PUSH
37015: LD_INT 47
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: LIST
37022: IN
37023: IFFALSE 37040
// bpoints := bpoints * 1.2 ;
37025: LD_ADDR_VAR 0 10
37029: PUSH
37030: LD_VAR 0 10
37034: PUSH
37035: LD_REAL  1.20000000000000E+0000
37038: MUL
37039: ST_TO_ADDR
// end ; unit_building :
37040: GO 37054
37042: LD_INT 3
37044: DOUBLE
37045: EQUAL
37046: IFTRUE 37050
37048: GO 37053
37050: POP
// ; end ;
37051: GO 37054
37053: POP
// for j = 1 to 3 do
37054: LD_ADDR_VAR 0 7
37058: PUSH
37059: DOUBLE
37060: LD_INT 1
37062: DEC
37063: ST_TO_ADDR
37064: LD_INT 3
37066: PUSH
37067: FOR_TO
37068: IFFALSE 37121
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37070: LD_ADDR_VAR 0 5
37074: PUSH
37075: LD_VAR 0 5
37079: PPUSH
37080: LD_VAR 0 7
37084: PPUSH
37085: LD_VAR 0 5
37089: PUSH
37090: LD_VAR 0 7
37094: ARRAY
37095: PUSH
37096: LD_VAR 0 9
37100: PUSH
37101: LD_VAR 0 7
37105: ARRAY
37106: PUSH
37107: LD_VAR 0 10
37111: MUL
37112: PLUS
37113: PPUSH
37114: CALL_OW 1
37118: ST_TO_ADDR
37119: GO 37067
37121: POP
37122: POP
// end ;
37123: GO 35602
37125: POP
37126: POP
// result := Replace ( result , 4 , tmp ) ;
37127: LD_ADDR_VAR 0 5
37131: PUSH
37132: LD_VAR 0 5
37136: PPUSH
37137: LD_INT 4
37139: PPUSH
37140: LD_VAR 0 8
37144: PPUSH
37145: CALL_OW 1
37149: ST_TO_ADDR
// end ;
37150: LD_VAR 0 5
37154: RET
// export function DangerAtRange ( unit , range ) ; begin
37155: LD_INT 0
37157: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37158: LD_ADDR_VAR 0 3
37162: PUSH
37163: LD_VAR 0 1
37167: PPUSH
37168: CALL_OW 255
37172: PPUSH
37173: LD_VAR 0 1
37177: PPUSH
37178: CALL_OW 250
37182: PPUSH
37183: LD_VAR 0 1
37187: PPUSH
37188: CALL_OW 251
37192: PPUSH
37193: LD_VAR 0 2
37197: PPUSH
37198: CALL 35454 0 4
37202: ST_TO_ADDR
// end ;
37203: LD_VAR 0 3
37207: RET
// export function DangerInArea ( side , area ) ; begin
37208: LD_INT 0
37210: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37211: LD_ADDR_VAR 0 3
37215: PUSH
37216: LD_VAR 0 2
37220: PPUSH
37221: LD_INT 81
37223: PUSH
37224: LD_VAR 0 1
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PPUSH
37233: CALL_OW 70
37237: ST_TO_ADDR
// end ;
37238: LD_VAR 0 3
37242: RET
// export function IsExtension ( b ) ; begin
37243: LD_INT 0
37245: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37246: LD_ADDR_VAR 0 2
37250: PUSH
37251: LD_VAR 0 1
37255: PUSH
37256: LD_INT 23
37258: PUSH
37259: LD_INT 20
37261: PUSH
37262: LD_INT 22
37264: PUSH
37265: LD_INT 17
37267: PUSH
37268: LD_INT 24
37270: PUSH
37271: LD_INT 21
37273: PUSH
37274: LD_INT 19
37276: PUSH
37277: LD_INT 16
37279: PUSH
37280: LD_INT 25
37282: PUSH
37283: LD_INT 18
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: IN
37298: ST_TO_ADDR
// end ;
37299: LD_VAR 0 2
37303: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37304: LD_INT 0
37306: PPUSH
37307: PPUSH
37308: PPUSH
// result := [ ] ;
37309: LD_ADDR_VAR 0 4
37313: PUSH
37314: EMPTY
37315: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37316: LD_ADDR_VAR 0 5
37320: PUSH
37321: LD_VAR 0 2
37325: PPUSH
37326: LD_INT 21
37328: PUSH
37329: LD_INT 3
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PPUSH
37336: CALL_OW 70
37340: ST_TO_ADDR
// if not tmp then
37341: LD_VAR 0 5
37345: NOT
37346: IFFALSE 37350
// exit ;
37348: GO 37414
// if checkLink then
37350: LD_VAR 0 3
37354: IFFALSE 37404
// begin for i in tmp do
37356: LD_ADDR_VAR 0 6
37360: PUSH
37361: LD_VAR 0 5
37365: PUSH
37366: FOR_IN
37367: IFFALSE 37402
// if GetBase ( i ) <> base then
37369: LD_VAR 0 6
37373: PPUSH
37374: CALL_OW 274
37378: PUSH
37379: LD_VAR 0 1
37383: NONEQUAL
37384: IFFALSE 37400
// ComLinkToBase ( base , i ) ;
37386: LD_VAR 0 1
37390: PPUSH
37391: LD_VAR 0 6
37395: PPUSH
37396: CALL_OW 169
37400: GO 37366
37402: POP
37403: POP
// end ; result := tmp ;
37404: LD_ADDR_VAR 0 4
37408: PUSH
37409: LD_VAR 0 5
37413: ST_TO_ADDR
// end ;
37414: LD_VAR 0 4
37418: RET
// export function ComComplete ( units , b ) ; var i ; begin
37419: LD_INT 0
37421: PPUSH
37422: PPUSH
// if not units then
37423: LD_VAR 0 1
37427: NOT
37428: IFFALSE 37432
// exit ;
37430: GO 37522
// for i in units do
37432: LD_ADDR_VAR 0 4
37436: PUSH
37437: LD_VAR 0 1
37441: PUSH
37442: FOR_IN
37443: IFFALSE 37520
// if BuildingStatus ( b ) = bs_build then
37445: LD_VAR 0 2
37449: PPUSH
37450: CALL_OW 461
37454: PUSH
37455: LD_INT 1
37457: EQUAL
37458: IFFALSE 37518
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37460: LD_VAR 0 4
37464: PPUSH
37465: LD_STRING h
37467: PUSH
37468: LD_VAR 0 2
37472: PPUSH
37473: CALL_OW 250
37477: PUSH
37478: LD_VAR 0 2
37482: PPUSH
37483: CALL_OW 251
37487: PUSH
37488: LD_VAR 0 2
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: LD_INT 0
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: PUSH
37511: EMPTY
37512: LIST
37513: PPUSH
37514: CALL_OW 446
37518: GO 37442
37520: POP
37521: POP
// end ;
37522: LD_VAR 0 3
37526: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37527: LD_INT 0
37529: PPUSH
37530: PPUSH
37531: PPUSH
37532: PPUSH
37533: PPUSH
37534: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37535: LD_VAR 0 1
37539: NOT
37540: PUSH
37541: LD_VAR 0 1
37545: PPUSH
37546: CALL_OW 263
37550: PUSH
37551: LD_INT 2
37553: NONEQUAL
37554: OR
37555: IFFALSE 37559
// exit ;
37557: GO 37875
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37559: LD_ADDR_VAR 0 6
37563: PUSH
37564: LD_INT 22
37566: PUSH
37567: LD_VAR 0 1
37571: PPUSH
37572: CALL_OW 255
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 2
37583: PUSH
37584: LD_INT 30
37586: PUSH
37587: LD_INT 36
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 34
37596: PUSH
37597: LD_INT 31
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: LIST
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PPUSH
37613: CALL_OW 69
37617: ST_TO_ADDR
// if not tmp then
37618: LD_VAR 0 6
37622: NOT
37623: IFFALSE 37627
// exit ;
37625: GO 37875
// result := [ ] ;
37627: LD_ADDR_VAR 0 2
37631: PUSH
37632: EMPTY
37633: ST_TO_ADDR
// for i in tmp do
37634: LD_ADDR_VAR 0 3
37638: PUSH
37639: LD_VAR 0 6
37643: PUSH
37644: FOR_IN
37645: IFFALSE 37716
// begin t := UnitsInside ( i ) ;
37647: LD_ADDR_VAR 0 4
37651: PUSH
37652: LD_VAR 0 3
37656: PPUSH
37657: CALL_OW 313
37661: ST_TO_ADDR
// if t then
37662: LD_VAR 0 4
37666: IFFALSE 37714
// for j in t do
37668: LD_ADDR_VAR 0 7
37672: PUSH
37673: LD_VAR 0 4
37677: PUSH
37678: FOR_IN
37679: IFFALSE 37712
// result := Replace ( result , result + 1 , j ) ;
37681: LD_ADDR_VAR 0 2
37685: PUSH
37686: LD_VAR 0 2
37690: PPUSH
37691: LD_VAR 0 2
37695: PUSH
37696: LD_INT 1
37698: PLUS
37699: PPUSH
37700: LD_VAR 0 7
37704: PPUSH
37705: CALL_OW 1
37709: ST_TO_ADDR
37710: GO 37678
37712: POP
37713: POP
// end ;
37714: GO 37644
37716: POP
37717: POP
// if not result then
37718: LD_VAR 0 2
37722: NOT
37723: IFFALSE 37727
// exit ;
37725: GO 37875
// mech := result [ 1 ] ;
37727: LD_ADDR_VAR 0 5
37731: PUSH
37732: LD_VAR 0 2
37736: PUSH
37737: LD_INT 1
37739: ARRAY
37740: ST_TO_ADDR
// if result > 1 then
37741: LD_VAR 0 2
37745: PUSH
37746: LD_INT 1
37748: GREATER
37749: IFFALSE 37861
// begin for i = 2 to result do
37751: LD_ADDR_VAR 0 3
37755: PUSH
37756: DOUBLE
37757: LD_INT 2
37759: DEC
37760: ST_TO_ADDR
37761: LD_VAR 0 2
37765: PUSH
37766: FOR_TO
37767: IFFALSE 37859
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37769: LD_ADDR_VAR 0 4
37773: PUSH
37774: LD_VAR 0 2
37778: PUSH
37779: LD_VAR 0 3
37783: ARRAY
37784: PPUSH
37785: LD_INT 3
37787: PPUSH
37788: CALL_OW 259
37792: PUSH
37793: LD_VAR 0 2
37797: PUSH
37798: LD_VAR 0 3
37802: ARRAY
37803: PPUSH
37804: CALL_OW 432
37808: MINUS
37809: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37810: LD_VAR 0 4
37814: PUSH
37815: LD_VAR 0 5
37819: PPUSH
37820: LD_INT 3
37822: PPUSH
37823: CALL_OW 259
37827: PUSH
37828: LD_VAR 0 5
37832: PPUSH
37833: CALL_OW 432
37837: MINUS
37838: GREATEREQUAL
37839: IFFALSE 37857
// mech := result [ i ] ;
37841: LD_ADDR_VAR 0 5
37845: PUSH
37846: LD_VAR 0 2
37850: PUSH
37851: LD_VAR 0 3
37855: ARRAY
37856: ST_TO_ADDR
// end ;
37857: GO 37766
37859: POP
37860: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37861: LD_VAR 0 1
37865: PPUSH
37866: LD_VAR 0 5
37870: PPUSH
37871: CALL_OW 135
// end ;
37875: LD_VAR 0 2
37879: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37880: LD_INT 0
37882: PPUSH
37883: PPUSH
37884: PPUSH
37885: PPUSH
37886: PPUSH
37887: PPUSH
37888: PPUSH
37889: PPUSH
37890: PPUSH
37891: PPUSH
37892: PPUSH
37893: PPUSH
37894: PPUSH
// result := [ ] ;
37895: LD_ADDR_VAR 0 7
37899: PUSH
37900: EMPTY
37901: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37902: LD_VAR 0 1
37906: PPUSH
37907: CALL_OW 266
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: LD_INT 1
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: IN
37922: NOT
37923: IFFALSE 37927
// exit ;
37925: GO 39561
// if name then
37927: LD_VAR 0 3
37931: IFFALSE 37947
// SetBName ( base_dep , name ) ;
37933: LD_VAR 0 1
37937: PPUSH
37938: LD_VAR 0 3
37942: PPUSH
37943: CALL_OW 500
// base := GetBase ( base_dep ) ;
37947: LD_ADDR_VAR 0 15
37951: PUSH
37952: LD_VAR 0 1
37956: PPUSH
37957: CALL_OW 274
37961: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37962: LD_ADDR_VAR 0 16
37966: PUSH
37967: LD_VAR 0 1
37971: PPUSH
37972: CALL_OW 255
37976: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37977: LD_ADDR_VAR 0 17
37981: PUSH
37982: LD_VAR 0 1
37986: PPUSH
37987: CALL_OW 248
37991: ST_TO_ADDR
// if sources then
37992: LD_VAR 0 5
37996: IFFALSE 38043
// for i = 1 to 3 do
37998: LD_ADDR_VAR 0 8
38002: PUSH
38003: DOUBLE
38004: LD_INT 1
38006: DEC
38007: ST_TO_ADDR
38008: LD_INT 3
38010: PUSH
38011: FOR_TO
38012: IFFALSE 38041
// AddResourceType ( base , i , sources [ i ] ) ;
38014: LD_VAR 0 15
38018: PPUSH
38019: LD_VAR 0 8
38023: PPUSH
38024: LD_VAR 0 5
38028: PUSH
38029: LD_VAR 0 8
38033: ARRAY
38034: PPUSH
38035: CALL_OW 276
38039: GO 38011
38041: POP
38042: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38043: LD_ADDR_VAR 0 18
38047: PUSH
38048: LD_VAR 0 15
38052: PPUSH
38053: LD_VAR 0 2
38057: PPUSH
38058: LD_INT 1
38060: PPUSH
38061: CALL 37304 0 3
38065: ST_TO_ADDR
// InitHc ;
38066: CALL_OW 19
// InitUc ;
38070: CALL_OW 18
// uc_side := side ;
38074: LD_ADDR_OWVAR 20
38078: PUSH
38079: LD_VAR 0 16
38083: ST_TO_ADDR
// uc_nation := nation ;
38084: LD_ADDR_OWVAR 21
38088: PUSH
38089: LD_VAR 0 17
38093: ST_TO_ADDR
// if buildings then
38094: LD_VAR 0 18
38098: IFFALSE 39420
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38100: LD_ADDR_VAR 0 19
38104: PUSH
38105: LD_VAR 0 18
38109: PPUSH
38110: LD_INT 2
38112: PUSH
38113: LD_INT 30
38115: PUSH
38116: LD_INT 29
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 30
38125: PUSH
38126: LD_INT 30
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: LIST
38137: PPUSH
38138: CALL_OW 72
38142: ST_TO_ADDR
// if tmp then
38143: LD_VAR 0 19
38147: IFFALSE 38195
// for i in tmp do
38149: LD_ADDR_VAR 0 8
38153: PUSH
38154: LD_VAR 0 19
38158: PUSH
38159: FOR_IN
38160: IFFALSE 38193
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38162: LD_VAR 0 8
38166: PPUSH
38167: CALL_OW 250
38171: PPUSH
38172: LD_VAR 0 8
38176: PPUSH
38177: CALL_OW 251
38181: PPUSH
38182: LD_VAR 0 16
38186: PPUSH
38187: CALL_OW 441
38191: GO 38159
38193: POP
38194: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38195: LD_VAR 0 18
38199: PPUSH
38200: LD_INT 2
38202: PUSH
38203: LD_INT 30
38205: PUSH
38206: LD_INT 32
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 30
38215: PUSH
38216: LD_INT 33
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: LIST
38227: PPUSH
38228: CALL_OW 72
38232: IFFALSE 38320
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38234: LD_ADDR_VAR 0 8
38238: PUSH
38239: LD_VAR 0 18
38243: PPUSH
38244: LD_INT 2
38246: PUSH
38247: LD_INT 30
38249: PUSH
38250: LD_INT 32
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 30
38259: PUSH
38260: LD_INT 33
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: LIST
38271: PPUSH
38272: CALL_OW 72
38276: PUSH
38277: FOR_IN
38278: IFFALSE 38318
// begin if not GetBWeapon ( i ) then
38280: LD_VAR 0 8
38284: PPUSH
38285: CALL_OW 269
38289: NOT
38290: IFFALSE 38316
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38292: LD_VAR 0 8
38296: PPUSH
38297: LD_VAR 0 8
38301: PPUSH
38302: LD_VAR 0 2
38306: PPUSH
38307: CALL 39566 0 2
38311: PPUSH
38312: CALL_OW 431
// end ;
38316: GO 38277
38318: POP
38319: POP
// end ; for i = 1 to personel do
38320: LD_ADDR_VAR 0 8
38324: PUSH
38325: DOUBLE
38326: LD_INT 1
38328: DEC
38329: ST_TO_ADDR
38330: LD_VAR 0 6
38334: PUSH
38335: FOR_TO
38336: IFFALSE 39400
// begin if i > 4 then
38338: LD_VAR 0 8
38342: PUSH
38343: LD_INT 4
38345: GREATER
38346: IFFALSE 38350
// break ;
38348: GO 39400
// case i of 1 :
38350: LD_VAR 0 8
38354: PUSH
38355: LD_INT 1
38357: DOUBLE
38358: EQUAL
38359: IFTRUE 38363
38361: GO 38443
38363: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38364: LD_ADDR_VAR 0 12
38368: PUSH
38369: LD_VAR 0 18
38373: PPUSH
38374: LD_INT 22
38376: PUSH
38377: LD_VAR 0 16
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 58
38388: PUSH
38389: EMPTY
38390: LIST
38391: PUSH
38392: LD_INT 2
38394: PUSH
38395: LD_INT 30
38397: PUSH
38398: LD_INT 32
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 30
38407: PUSH
38408: LD_INT 4
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 30
38417: PUSH
38418: LD_INT 5
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: LIST
38435: PPUSH
38436: CALL_OW 72
38440: ST_TO_ADDR
38441: GO 38665
38443: LD_INT 2
38445: DOUBLE
38446: EQUAL
38447: IFTRUE 38451
38449: GO 38513
38451: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38452: LD_ADDR_VAR 0 12
38456: PUSH
38457: LD_VAR 0 18
38461: PPUSH
38462: LD_INT 22
38464: PUSH
38465: LD_VAR 0 16
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 2
38476: PUSH
38477: LD_INT 30
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 30
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PPUSH
38506: CALL_OW 72
38510: ST_TO_ADDR
38511: GO 38665
38513: LD_INT 3
38515: DOUBLE
38516: EQUAL
38517: IFTRUE 38521
38519: GO 38583
38521: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38522: LD_ADDR_VAR 0 12
38526: PUSH
38527: LD_VAR 0 18
38531: PPUSH
38532: LD_INT 22
38534: PUSH
38535: LD_VAR 0 16
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 2
38546: PUSH
38547: LD_INT 30
38549: PUSH
38550: LD_INT 2
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 30
38559: PUSH
38560: LD_INT 3
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: LIST
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PPUSH
38576: CALL_OW 72
38580: ST_TO_ADDR
38581: GO 38665
38583: LD_INT 4
38585: DOUBLE
38586: EQUAL
38587: IFTRUE 38591
38589: GO 38664
38591: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38592: LD_ADDR_VAR 0 12
38596: PUSH
38597: LD_VAR 0 18
38601: PPUSH
38602: LD_INT 22
38604: PUSH
38605: LD_VAR 0 16
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 2
38616: PUSH
38617: LD_INT 30
38619: PUSH
38620: LD_INT 6
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 30
38629: PUSH
38630: LD_INT 7
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 30
38639: PUSH
38640: LD_INT 8
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PPUSH
38657: CALL_OW 72
38661: ST_TO_ADDR
38662: GO 38665
38664: POP
// if i = 1 then
38665: LD_VAR 0 8
38669: PUSH
38670: LD_INT 1
38672: EQUAL
38673: IFFALSE 38784
// begin tmp := [ ] ;
38675: LD_ADDR_VAR 0 19
38679: PUSH
38680: EMPTY
38681: ST_TO_ADDR
// for j in f do
38682: LD_ADDR_VAR 0 9
38686: PUSH
38687: LD_VAR 0 12
38691: PUSH
38692: FOR_IN
38693: IFFALSE 38766
// if GetBType ( j ) = b_bunker then
38695: LD_VAR 0 9
38699: PPUSH
38700: CALL_OW 266
38704: PUSH
38705: LD_INT 32
38707: EQUAL
38708: IFFALSE 38735
// tmp := Insert ( tmp , 1 , j ) else
38710: LD_ADDR_VAR 0 19
38714: PUSH
38715: LD_VAR 0 19
38719: PPUSH
38720: LD_INT 1
38722: PPUSH
38723: LD_VAR 0 9
38727: PPUSH
38728: CALL_OW 2
38732: ST_TO_ADDR
38733: GO 38764
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38735: LD_ADDR_VAR 0 19
38739: PUSH
38740: LD_VAR 0 19
38744: PPUSH
38745: LD_VAR 0 19
38749: PUSH
38750: LD_INT 1
38752: PLUS
38753: PPUSH
38754: LD_VAR 0 9
38758: PPUSH
38759: CALL_OW 2
38763: ST_TO_ADDR
38764: GO 38692
38766: POP
38767: POP
// if tmp then
38768: LD_VAR 0 19
38772: IFFALSE 38784
// f := tmp ;
38774: LD_ADDR_VAR 0 12
38778: PUSH
38779: LD_VAR 0 19
38783: ST_TO_ADDR
// end ; x := personel [ i ] ;
38784: LD_ADDR_VAR 0 13
38788: PUSH
38789: LD_VAR 0 6
38793: PUSH
38794: LD_VAR 0 8
38798: ARRAY
38799: ST_TO_ADDR
// if x = - 1 then
38800: LD_VAR 0 13
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: EQUAL
38809: IFFALSE 39018
// begin for j in f do
38811: LD_ADDR_VAR 0 9
38815: PUSH
38816: LD_VAR 0 12
38820: PUSH
38821: FOR_IN
38822: IFFALSE 39014
// repeat InitHc ;
38824: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38828: LD_VAR 0 9
38832: PPUSH
38833: CALL_OW 266
38837: PUSH
38838: LD_INT 5
38840: EQUAL
38841: IFFALSE 38911
// begin if UnitsInside ( j ) < 3 then
38843: LD_VAR 0 9
38847: PPUSH
38848: CALL_OW 313
38852: PUSH
38853: LD_INT 3
38855: LESS
38856: IFFALSE 38892
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38858: LD_INT 0
38860: PPUSH
38861: LD_INT 5
38863: PUSH
38864: LD_INT 8
38866: PUSH
38867: LD_INT 9
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: LIST
38874: PUSH
38875: LD_VAR 0 17
38879: ARRAY
38880: PPUSH
38881: LD_VAR 0 4
38885: PPUSH
38886: CALL_OW 380
38890: GO 38909
// PrepareHuman ( false , i , skill ) ;
38892: LD_INT 0
38894: PPUSH
38895: LD_VAR 0 8
38899: PPUSH
38900: LD_VAR 0 4
38904: PPUSH
38905: CALL_OW 380
// end else
38909: GO 38928
// PrepareHuman ( false , i , skill ) ;
38911: LD_INT 0
38913: PPUSH
38914: LD_VAR 0 8
38918: PPUSH
38919: LD_VAR 0 4
38923: PPUSH
38924: CALL_OW 380
// un := CreateHuman ;
38928: LD_ADDR_VAR 0 14
38932: PUSH
38933: CALL_OW 44
38937: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38938: LD_ADDR_VAR 0 7
38942: PUSH
38943: LD_VAR 0 7
38947: PPUSH
38948: LD_INT 1
38950: PPUSH
38951: LD_VAR 0 14
38955: PPUSH
38956: CALL_OW 2
38960: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38961: LD_VAR 0 14
38965: PPUSH
38966: LD_VAR 0 9
38970: PPUSH
38971: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38975: LD_VAR 0 9
38979: PPUSH
38980: CALL_OW 313
38984: PUSH
38985: LD_INT 6
38987: EQUAL
38988: PUSH
38989: LD_VAR 0 9
38993: PPUSH
38994: CALL_OW 266
38998: PUSH
38999: LD_INT 32
39001: PUSH
39002: LD_INT 31
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: IN
39009: OR
39010: IFFALSE 38824
39012: GO 38821
39014: POP
39015: POP
// end else
39016: GO 39398
// for j = 1 to x do
39018: LD_ADDR_VAR 0 9
39022: PUSH
39023: DOUBLE
39024: LD_INT 1
39026: DEC
39027: ST_TO_ADDR
39028: LD_VAR 0 13
39032: PUSH
39033: FOR_TO
39034: IFFALSE 39396
// begin InitHc ;
39036: CALL_OW 19
// if not f then
39040: LD_VAR 0 12
39044: NOT
39045: IFFALSE 39134
// begin PrepareHuman ( false , i , skill ) ;
39047: LD_INT 0
39049: PPUSH
39050: LD_VAR 0 8
39054: PPUSH
39055: LD_VAR 0 4
39059: PPUSH
39060: CALL_OW 380
// un := CreateHuman ;
39064: LD_ADDR_VAR 0 14
39068: PUSH
39069: CALL_OW 44
39073: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39074: LD_ADDR_VAR 0 7
39078: PUSH
39079: LD_VAR 0 7
39083: PPUSH
39084: LD_INT 1
39086: PPUSH
39087: LD_VAR 0 14
39091: PPUSH
39092: CALL_OW 2
39096: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39097: LD_VAR 0 14
39101: PPUSH
39102: LD_VAR 0 1
39106: PPUSH
39107: CALL_OW 250
39111: PPUSH
39112: LD_VAR 0 1
39116: PPUSH
39117: CALL_OW 251
39121: PPUSH
39122: LD_INT 10
39124: PPUSH
39125: LD_INT 0
39127: PPUSH
39128: CALL_OW 50
// continue ;
39132: GO 39033
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39134: LD_VAR 0 12
39138: PUSH
39139: LD_INT 1
39141: ARRAY
39142: PPUSH
39143: CALL_OW 313
39147: PUSH
39148: LD_VAR 0 12
39152: PUSH
39153: LD_INT 1
39155: ARRAY
39156: PPUSH
39157: CALL_OW 266
39161: PUSH
39162: LD_INT 32
39164: PUSH
39165: LD_INT 31
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: IN
39172: AND
39173: PUSH
39174: LD_VAR 0 12
39178: PUSH
39179: LD_INT 1
39181: ARRAY
39182: PPUSH
39183: CALL_OW 313
39187: PUSH
39188: LD_INT 6
39190: EQUAL
39191: OR
39192: IFFALSE 39212
// f := Delete ( f , 1 ) ;
39194: LD_ADDR_VAR 0 12
39198: PUSH
39199: LD_VAR 0 12
39203: PPUSH
39204: LD_INT 1
39206: PPUSH
39207: CALL_OW 3
39211: ST_TO_ADDR
// if not f then
39212: LD_VAR 0 12
39216: NOT
39217: IFFALSE 39235
// begin x := x + 2 ;
39219: LD_ADDR_VAR 0 13
39223: PUSH
39224: LD_VAR 0 13
39228: PUSH
39229: LD_INT 2
39231: PLUS
39232: ST_TO_ADDR
// continue ;
39233: GO 39033
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39235: LD_VAR 0 12
39239: PUSH
39240: LD_INT 1
39242: ARRAY
39243: PPUSH
39244: CALL_OW 266
39248: PUSH
39249: LD_INT 5
39251: EQUAL
39252: IFFALSE 39326
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39254: LD_VAR 0 12
39258: PUSH
39259: LD_INT 1
39261: ARRAY
39262: PPUSH
39263: CALL_OW 313
39267: PUSH
39268: LD_INT 3
39270: LESS
39271: IFFALSE 39307
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39273: LD_INT 0
39275: PPUSH
39276: LD_INT 5
39278: PUSH
39279: LD_INT 8
39281: PUSH
39282: LD_INT 9
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: LIST
39289: PUSH
39290: LD_VAR 0 17
39294: ARRAY
39295: PPUSH
39296: LD_VAR 0 4
39300: PPUSH
39301: CALL_OW 380
39305: GO 39324
// PrepareHuman ( false , i , skill ) ;
39307: LD_INT 0
39309: PPUSH
39310: LD_VAR 0 8
39314: PPUSH
39315: LD_VAR 0 4
39319: PPUSH
39320: CALL_OW 380
// end else
39324: GO 39343
// PrepareHuman ( false , i , skill ) ;
39326: LD_INT 0
39328: PPUSH
39329: LD_VAR 0 8
39333: PPUSH
39334: LD_VAR 0 4
39338: PPUSH
39339: CALL_OW 380
// un := CreateHuman ;
39343: LD_ADDR_VAR 0 14
39347: PUSH
39348: CALL_OW 44
39352: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39353: LD_ADDR_VAR 0 7
39357: PUSH
39358: LD_VAR 0 7
39362: PPUSH
39363: LD_INT 1
39365: PPUSH
39366: LD_VAR 0 14
39370: PPUSH
39371: CALL_OW 2
39375: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39376: LD_VAR 0 14
39380: PPUSH
39381: LD_VAR 0 12
39385: PUSH
39386: LD_INT 1
39388: ARRAY
39389: PPUSH
39390: CALL_OW 52
// end ;
39394: GO 39033
39396: POP
39397: POP
// end ;
39398: GO 38335
39400: POP
39401: POP
// result := result ^ buildings ;
39402: LD_ADDR_VAR 0 7
39406: PUSH
39407: LD_VAR 0 7
39411: PUSH
39412: LD_VAR 0 18
39416: ADD
39417: ST_TO_ADDR
// end else
39418: GO 39561
// begin for i = 1 to personel do
39420: LD_ADDR_VAR 0 8
39424: PUSH
39425: DOUBLE
39426: LD_INT 1
39428: DEC
39429: ST_TO_ADDR
39430: LD_VAR 0 6
39434: PUSH
39435: FOR_TO
39436: IFFALSE 39559
// begin if i > 4 then
39438: LD_VAR 0 8
39442: PUSH
39443: LD_INT 4
39445: GREATER
39446: IFFALSE 39450
// break ;
39448: GO 39559
// x := personel [ i ] ;
39450: LD_ADDR_VAR 0 13
39454: PUSH
39455: LD_VAR 0 6
39459: PUSH
39460: LD_VAR 0 8
39464: ARRAY
39465: ST_TO_ADDR
// if x = - 1 then
39466: LD_VAR 0 13
39470: PUSH
39471: LD_INT 1
39473: NEG
39474: EQUAL
39475: IFFALSE 39479
// continue ;
39477: GO 39435
// PrepareHuman ( false , i , skill ) ;
39479: LD_INT 0
39481: PPUSH
39482: LD_VAR 0 8
39486: PPUSH
39487: LD_VAR 0 4
39491: PPUSH
39492: CALL_OW 380
// un := CreateHuman ;
39496: LD_ADDR_VAR 0 14
39500: PUSH
39501: CALL_OW 44
39505: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39506: LD_VAR 0 14
39510: PPUSH
39511: LD_VAR 0 1
39515: PPUSH
39516: CALL_OW 250
39520: PPUSH
39521: LD_VAR 0 1
39525: PPUSH
39526: CALL_OW 251
39530: PPUSH
39531: LD_INT 10
39533: PPUSH
39534: LD_INT 0
39536: PPUSH
39537: CALL_OW 50
// result := result ^ un ;
39541: LD_ADDR_VAR 0 7
39545: PUSH
39546: LD_VAR 0 7
39550: PUSH
39551: LD_VAR 0 14
39555: ADD
39556: ST_TO_ADDR
// end ;
39557: GO 39435
39559: POP
39560: POP
// end ; end ;
39561: LD_VAR 0 7
39565: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39566: LD_INT 0
39568: PPUSH
39569: PPUSH
39570: PPUSH
39571: PPUSH
39572: PPUSH
39573: PPUSH
39574: PPUSH
39575: PPUSH
39576: PPUSH
39577: PPUSH
39578: PPUSH
39579: PPUSH
39580: PPUSH
39581: PPUSH
39582: PPUSH
39583: PPUSH
// result := false ;
39584: LD_ADDR_VAR 0 3
39588: PUSH
39589: LD_INT 0
39591: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39592: LD_VAR 0 1
39596: NOT
39597: PUSH
39598: LD_VAR 0 1
39602: PPUSH
39603: CALL_OW 266
39607: PUSH
39608: LD_INT 32
39610: PUSH
39611: LD_INT 33
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: IN
39618: NOT
39619: OR
39620: IFFALSE 39624
// exit ;
39622: GO 40733
// nat := GetNation ( tower ) ;
39624: LD_ADDR_VAR 0 12
39628: PUSH
39629: LD_VAR 0 1
39633: PPUSH
39634: CALL_OW 248
39638: ST_TO_ADDR
// side := GetSide ( tower ) ;
39639: LD_ADDR_VAR 0 16
39643: PUSH
39644: LD_VAR 0 1
39648: PPUSH
39649: CALL_OW 255
39653: ST_TO_ADDR
// x := GetX ( tower ) ;
39654: LD_ADDR_VAR 0 10
39658: PUSH
39659: LD_VAR 0 1
39663: PPUSH
39664: CALL_OW 250
39668: ST_TO_ADDR
// y := GetY ( tower ) ;
39669: LD_ADDR_VAR 0 11
39673: PUSH
39674: LD_VAR 0 1
39678: PPUSH
39679: CALL_OW 251
39683: ST_TO_ADDR
// if not x or not y then
39684: LD_VAR 0 10
39688: NOT
39689: PUSH
39690: LD_VAR 0 11
39694: NOT
39695: OR
39696: IFFALSE 39700
// exit ;
39698: GO 40733
// weapon := 0 ;
39700: LD_ADDR_VAR 0 18
39704: PUSH
39705: LD_INT 0
39707: ST_TO_ADDR
// fac_list := [ ] ;
39708: LD_ADDR_VAR 0 17
39712: PUSH
39713: EMPTY
39714: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39715: LD_ADDR_VAR 0 6
39719: PUSH
39720: LD_VAR 0 1
39724: PPUSH
39725: CALL_OW 274
39729: PPUSH
39730: LD_VAR 0 2
39734: PPUSH
39735: LD_INT 0
39737: PPUSH
39738: CALL 37304 0 3
39742: PPUSH
39743: LD_INT 30
39745: PUSH
39746: LD_INT 3
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PPUSH
39753: CALL_OW 72
39757: ST_TO_ADDR
// if not factories then
39758: LD_VAR 0 6
39762: NOT
39763: IFFALSE 39767
// exit ;
39765: GO 40733
// for i in factories do
39767: LD_ADDR_VAR 0 8
39771: PUSH
39772: LD_VAR 0 6
39776: PUSH
39777: FOR_IN
39778: IFFALSE 39803
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39780: LD_ADDR_VAR 0 17
39784: PUSH
39785: LD_VAR 0 17
39789: PUSH
39790: LD_VAR 0 8
39794: PPUSH
39795: CALL_OW 478
39799: UNION
39800: ST_TO_ADDR
39801: GO 39777
39803: POP
39804: POP
// if not fac_list then
39805: LD_VAR 0 17
39809: NOT
39810: IFFALSE 39814
// exit ;
39812: GO 40733
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39814: LD_ADDR_VAR 0 5
39818: PUSH
39819: LD_INT 4
39821: PUSH
39822: LD_INT 5
39824: PUSH
39825: LD_INT 9
39827: PUSH
39828: LD_INT 10
39830: PUSH
39831: LD_INT 6
39833: PUSH
39834: LD_INT 7
39836: PUSH
39837: LD_INT 11
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 27
39851: PUSH
39852: LD_INT 28
39854: PUSH
39855: LD_INT 26
39857: PUSH
39858: LD_INT 30
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 43
39869: PUSH
39870: LD_INT 44
39872: PUSH
39873: LD_INT 46
39875: PUSH
39876: LD_INT 45
39878: PUSH
39879: LD_INT 47
39881: PUSH
39882: LD_INT 49
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: LIST
39897: PUSH
39898: LD_VAR 0 12
39902: ARRAY
39903: ST_TO_ADDR
// list := list isect fac_list ;
39904: LD_ADDR_VAR 0 5
39908: PUSH
39909: LD_VAR 0 5
39913: PUSH
39914: LD_VAR 0 17
39918: ISECT
39919: ST_TO_ADDR
// if not list then
39920: LD_VAR 0 5
39924: NOT
39925: IFFALSE 39929
// exit ;
39927: GO 40733
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39929: LD_VAR 0 12
39933: PUSH
39934: LD_INT 3
39936: EQUAL
39937: PUSH
39938: LD_INT 49
39940: PUSH
39941: LD_VAR 0 5
39945: IN
39946: AND
39947: PUSH
39948: LD_INT 31
39950: PPUSH
39951: LD_VAR 0 16
39955: PPUSH
39956: CALL_OW 321
39960: PUSH
39961: LD_INT 2
39963: EQUAL
39964: AND
39965: IFFALSE 40025
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39967: LD_INT 22
39969: PUSH
39970: LD_VAR 0 16
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 35
39981: PUSH
39982: LD_INT 49
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 91
39991: PUSH
39992: LD_VAR 0 1
39996: PUSH
39997: LD_INT 10
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: LIST
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: LIST
40009: PPUSH
40010: CALL_OW 69
40014: NOT
40015: IFFALSE 40025
// weapon := ru_time_lapser ;
40017: LD_ADDR_VAR 0 18
40021: PUSH
40022: LD_INT 49
40024: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40025: LD_VAR 0 12
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: IN
40040: PUSH
40041: LD_INT 11
40043: PUSH
40044: LD_VAR 0 5
40048: IN
40049: PUSH
40050: LD_INT 30
40052: PUSH
40053: LD_VAR 0 5
40057: IN
40058: OR
40059: AND
40060: PUSH
40061: LD_INT 6
40063: PPUSH
40064: LD_VAR 0 16
40068: PPUSH
40069: CALL_OW 321
40073: PUSH
40074: LD_INT 2
40076: EQUAL
40077: AND
40078: IFFALSE 40243
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40080: LD_INT 22
40082: PUSH
40083: LD_VAR 0 16
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 2
40094: PUSH
40095: LD_INT 35
40097: PUSH
40098: LD_INT 11
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 35
40107: PUSH
40108: LD_INT 30
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 91
40122: PUSH
40123: LD_VAR 0 1
40127: PUSH
40128: LD_INT 18
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: LIST
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: LIST
40140: PPUSH
40141: CALL_OW 69
40145: NOT
40146: PUSH
40147: LD_INT 22
40149: PUSH
40150: LD_VAR 0 16
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 2
40161: PUSH
40162: LD_INT 30
40164: PUSH
40165: LD_INT 32
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 30
40174: PUSH
40175: LD_INT 33
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 91
40189: PUSH
40190: LD_VAR 0 1
40194: PUSH
40195: LD_INT 12
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: LIST
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: LIST
40207: PUSH
40208: EMPTY
40209: LIST
40210: PPUSH
40211: CALL_OW 69
40215: PUSH
40216: LD_INT 2
40218: GREATER
40219: AND
40220: IFFALSE 40243
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40222: LD_ADDR_VAR 0 18
40226: PUSH
40227: LD_INT 11
40229: PUSH
40230: LD_INT 30
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_VAR 0 12
40241: ARRAY
40242: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40243: LD_VAR 0 18
40247: NOT
40248: PUSH
40249: LD_INT 40
40251: PPUSH
40252: LD_VAR 0 16
40256: PPUSH
40257: CALL_OW 321
40261: PUSH
40262: LD_INT 2
40264: EQUAL
40265: AND
40266: PUSH
40267: LD_INT 7
40269: PUSH
40270: LD_VAR 0 5
40274: IN
40275: PUSH
40276: LD_INT 28
40278: PUSH
40279: LD_VAR 0 5
40283: IN
40284: OR
40285: PUSH
40286: LD_INT 45
40288: PUSH
40289: LD_VAR 0 5
40293: IN
40294: OR
40295: AND
40296: IFFALSE 40550
// begin hex := GetHexInfo ( x , y ) ;
40298: LD_ADDR_VAR 0 4
40302: PUSH
40303: LD_VAR 0 10
40307: PPUSH
40308: LD_VAR 0 11
40312: PPUSH
40313: CALL_OW 546
40317: ST_TO_ADDR
// if hex [ 1 ] then
40318: LD_VAR 0 4
40322: PUSH
40323: LD_INT 1
40325: ARRAY
40326: IFFALSE 40330
// exit ;
40328: GO 40733
// height := hex [ 2 ] ;
40330: LD_ADDR_VAR 0 15
40334: PUSH
40335: LD_VAR 0 4
40339: PUSH
40340: LD_INT 2
40342: ARRAY
40343: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40344: LD_ADDR_VAR 0 14
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: LD_INT 2
40354: PUSH
40355: LD_INT 3
40357: PUSH
40358: LD_INT 5
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: ST_TO_ADDR
// for i in tmp do
40367: LD_ADDR_VAR 0 8
40371: PUSH
40372: LD_VAR 0 14
40376: PUSH
40377: FOR_IN
40378: IFFALSE 40548
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40380: LD_ADDR_VAR 0 9
40384: PUSH
40385: LD_VAR 0 10
40389: PPUSH
40390: LD_VAR 0 8
40394: PPUSH
40395: LD_INT 5
40397: PPUSH
40398: CALL_OW 272
40402: PUSH
40403: LD_VAR 0 11
40407: PPUSH
40408: LD_VAR 0 8
40412: PPUSH
40413: LD_INT 5
40415: PPUSH
40416: CALL_OW 273
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40425: LD_VAR 0 9
40429: PUSH
40430: LD_INT 1
40432: ARRAY
40433: PPUSH
40434: LD_VAR 0 9
40438: PUSH
40439: LD_INT 2
40441: ARRAY
40442: PPUSH
40443: CALL_OW 488
40447: IFFALSE 40546
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40449: LD_ADDR_VAR 0 4
40453: PUSH
40454: LD_VAR 0 9
40458: PUSH
40459: LD_INT 1
40461: ARRAY
40462: PPUSH
40463: LD_VAR 0 9
40467: PUSH
40468: LD_INT 2
40470: ARRAY
40471: PPUSH
40472: CALL_OW 546
40476: ST_TO_ADDR
// if hex [ 1 ] then
40477: LD_VAR 0 4
40481: PUSH
40482: LD_INT 1
40484: ARRAY
40485: IFFALSE 40489
// continue ;
40487: GO 40377
// h := hex [ 2 ] ;
40489: LD_ADDR_VAR 0 13
40493: PUSH
40494: LD_VAR 0 4
40498: PUSH
40499: LD_INT 2
40501: ARRAY
40502: ST_TO_ADDR
// if h + 7 < height then
40503: LD_VAR 0 13
40507: PUSH
40508: LD_INT 7
40510: PLUS
40511: PUSH
40512: LD_VAR 0 15
40516: LESS
40517: IFFALSE 40546
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40519: LD_ADDR_VAR 0 18
40523: PUSH
40524: LD_INT 7
40526: PUSH
40527: LD_INT 28
40529: PUSH
40530: LD_INT 45
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: LIST
40537: PUSH
40538: LD_VAR 0 12
40542: ARRAY
40543: ST_TO_ADDR
// break ;
40544: GO 40548
// end ; end ; end ;
40546: GO 40377
40548: POP
40549: POP
// end ; if not weapon then
40550: LD_VAR 0 18
40554: NOT
40555: IFFALSE 40615
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40557: LD_ADDR_VAR 0 5
40561: PUSH
40562: LD_VAR 0 5
40566: PUSH
40567: LD_INT 11
40569: PUSH
40570: LD_INT 30
40572: PUSH
40573: LD_INT 49
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: LIST
40580: DIFF
40581: ST_TO_ADDR
// if not list then
40582: LD_VAR 0 5
40586: NOT
40587: IFFALSE 40591
// exit ;
40589: GO 40733
// weapon := list [ rand ( 1 , list ) ] ;
40591: LD_ADDR_VAR 0 18
40595: PUSH
40596: LD_VAR 0 5
40600: PUSH
40601: LD_INT 1
40603: PPUSH
40604: LD_VAR 0 5
40608: PPUSH
40609: CALL_OW 12
40613: ARRAY
40614: ST_TO_ADDR
// end ; if weapon then
40615: LD_VAR 0 18
40619: IFFALSE 40733
// begin tmp := CostOfWeapon ( weapon ) ;
40621: LD_ADDR_VAR 0 14
40625: PUSH
40626: LD_VAR 0 18
40630: PPUSH
40631: CALL_OW 451
40635: ST_TO_ADDR
// j := GetBase ( tower ) ;
40636: LD_ADDR_VAR 0 9
40640: PUSH
40641: LD_VAR 0 1
40645: PPUSH
40646: CALL_OW 274
40650: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40651: LD_VAR 0 9
40655: PPUSH
40656: LD_INT 1
40658: PPUSH
40659: CALL_OW 275
40663: PUSH
40664: LD_VAR 0 14
40668: PUSH
40669: LD_INT 1
40671: ARRAY
40672: GREATEREQUAL
40673: PUSH
40674: LD_VAR 0 9
40678: PPUSH
40679: LD_INT 2
40681: PPUSH
40682: CALL_OW 275
40686: PUSH
40687: LD_VAR 0 14
40691: PUSH
40692: LD_INT 2
40694: ARRAY
40695: GREATEREQUAL
40696: AND
40697: PUSH
40698: LD_VAR 0 9
40702: PPUSH
40703: LD_INT 3
40705: PPUSH
40706: CALL_OW 275
40710: PUSH
40711: LD_VAR 0 14
40715: PUSH
40716: LD_INT 3
40718: ARRAY
40719: GREATEREQUAL
40720: AND
40721: IFFALSE 40733
// result := weapon ;
40723: LD_ADDR_VAR 0 3
40727: PUSH
40728: LD_VAR 0 18
40732: ST_TO_ADDR
// end ; end ;
40733: LD_VAR 0 3
40737: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40738: LD_INT 0
40740: PPUSH
40741: PPUSH
// result := true ;
40742: LD_ADDR_VAR 0 3
40746: PUSH
40747: LD_INT 1
40749: ST_TO_ADDR
// if array1 = array2 then
40750: LD_VAR 0 1
40754: PUSH
40755: LD_VAR 0 2
40759: EQUAL
40760: IFFALSE 40820
// begin for i = 1 to array1 do
40762: LD_ADDR_VAR 0 4
40766: PUSH
40767: DOUBLE
40768: LD_INT 1
40770: DEC
40771: ST_TO_ADDR
40772: LD_VAR 0 1
40776: PUSH
40777: FOR_TO
40778: IFFALSE 40816
// if array1 [ i ] <> array2 [ i ] then
40780: LD_VAR 0 1
40784: PUSH
40785: LD_VAR 0 4
40789: ARRAY
40790: PUSH
40791: LD_VAR 0 2
40795: PUSH
40796: LD_VAR 0 4
40800: ARRAY
40801: NONEQUAL
40802: IFFALSE 40814
// begin result := false ;
40804: LD_ADDR_VAR 0 3
40808: PUSH
40809: LD_INT 0
40811: ST_TO_ADDR
// break ;
40812: GO 40816
// end ;
40814: GO 40777
40816: POP
40817: POP
// end else
40818: GO 40828
// result := false ;
40820: LD_ADDR_VAR 0 3
40824: PUSH
40825: LD_INT 0
40827: ST_TO_ADDR
// end ;
40828: LD_VAR 0 3
40832: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40833: LD_INT 0
40835: PPUSH
40836: PPUSH
// if not array1 or not array2 then
40837: LD_VAR 0 1
40841: NOT
40842: PUSH
40843: LD_VAR 0 2
40847: NOT
40848: OR
40849: IFFALSE 40853
// exit ;
40851: GO 40917
// result := true ;
40853: LD_ADDR_VAR 0 3
40857: PUSH
40858: LD_INT 1
40860: ST_TO_ADDR
// for i = 1 to array1 do
40861: LD_ADDR_VAR 0 4
40865: PUSH
40866: DOUBLE
40867: LD_INT 1
40869: DEC
40870: ST_TO_ADDR
40871: LD_VAR 0 1
40875: PUSH
40876: FOR_TO
40877: IFFALSE 40915
// if array1 [ i ] <> array2 [ i ] then
40879: LD_VAR 0 1
40883: PUSH
40884: LD_VAR 0 4
40888: ARRAY
40889: PUSH
40890: LD_VAR 0 2
40894: PUSH
40895: LD_VAR 0 4
40899: ARRAY
40900: NONEQUAL
40901: IFFALSE 40913
// begin result := false ;
40903: LD_ADDR_VAR 0 3
40907: PUSH
40908: LD_INT 0
40910: ST_TO_ADDR
// break ;
40911: GO 40915
// end ;
40913: GO 40876
40915: POP
40916: POP
// end ;
40917: LD_VAR 0 3
40921: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40922: LD_INT 0
40924: PPUSH
40925: PPUSH
40926: PPUSH
// pom := GetBase ( fac ) ;
40927: LD_ADDR_VAR 0 5
40931: PUSH
40932: LD_VAR 0 1
40936: PPUSH
40937: CALL_OW 274
40941: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40942: LD_ADDR_VAR 0 4
40946: PUSH
40947: LD_VAR 0 2
40951: PUSH
40952: LD_INT 1
40954: ARRAY
40955: PPUSH
40956: LD_VAR 0 2
40960: PUSH
40961: LD_INT 2
40963: ARRAY
40964: PPUSH
40965: LD_VAR 0 2
40969: PUSH
40970: LD_INT 3
40972: ARRAY
40973: PPUSH
40974: LD_VAR 0 2
40978: PUSH
40979: LD_INT 4
40981: ARRAY
40982: PPUSH
40983: CALL_OW 449
40987: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40988: LD_ADDR_VAR 0 3
40992: PUSH
40993: LD_VAR 0 5
40997: PPUSH
40998: LD_INT 1
41000: PPUSH
41001: CALL_OW 275
41005: PUSH
41006: LD_VAR 0 4
41010: PUSH
41011: LD_INT 1
41013: ARRAY
41014: GREATEREQUAL
41015: PUSH
41016: LD_VAR 0 5
41020: PPUSH
41021: LD_INT 2
41023: PPUSH
41024: CALL_OW 275
41028: PUSH
41029: LD_VAR 0 4
41033: PUSH
41034: LD_INT 2
41036: ARRAY
41037: GREATEREQUAL
41038: AND
41039: PUSH
41040: LD_VAR 0 5
41044: PPUSH
41045: LD_INT 3
41047: PPUSH
41048: CALL_OW 275
41052: PUSH
41053: LD_VAR 0 4
41057: PUSH
41058: LD_INT 3
41060: ARRAY
41061: GREATEREQUAL
41062: AND
41063: ST_TO_ADDR
// end ;
41064: LD_VAR 0 3
41068: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41069: LD_INT 0
41071: PPUSH
41072: PPUSH
41073: PPUSH
41074: PPUSH
// pom := GetBase ( building ) ;
41075: LD_ADDR_VAR 0 3
41079: PUSH
41080: LD_VAR 0 1
41084: PPUSH
41085: CALL_OW 274
41089: ST_TO_ADDR
// if not pom then
41090: LD_VAR 0 3
41094: NOT
41095: IFFALSE 41099
// exit ;
41097: GO 41269
// btype := GetBType ( building ) ;
41099: LD_ADDR_VAR 0 5
41103: PUSH
41104: LD_VAR 0 1
41108: PPUSH
41109: CALL_OW 266
41113: ST_TO_ADDR
// if btype = b_armoury then
41114: LD_VAR 0 5
41118: PUSH
41119: LD_INT 4
41121: EQUAL
41122: IFFALSE 41132
// btype := b_barracks ;
41124: LD_ADDR_VAR 0 5
41128: PUSH
41129: LD_INT 5
41131: ST_TO_ADDR
// if btype = b_depot then
41132: LD_VAR 0 5
41136: PUSH
41137: LD_INT 0
41139: EQUAL
41140: IFFALSE 41150
// btype := b_warehouse ;
41142: LD_ADDR_VAR 0 5
41146: PUSH
41147: LD_INT 1
41149: ST_TO_ADDR
// if btype = b_workshop then
41150: LD_VAR 0 5
41154: PUSH
41155: LD_INT 2
41157: EQUAL
41158: IFFALSE 41168
// btype := b_factory ;
41160: LD_ADDR_VAR 0 5
41164: PUSH
41165: LD_INT 3
41167: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41168: LD_ADDR_VAR 0 4
41172: PUSH
41173: LD_VAR 0 5
41177: PPUSH
41178: LD_VAR 0 1
41182: PPUSH
41183: CALL_OW 248
41187: PPUSH
41188: CALL_OW 450
41192: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41193: LD_ADDR_VAR 0 2
41197: PUSH
41198: LD_VAR 0 3
41202: PPUSH
41203: LD_INT 1
41205: PPUSH
41206: CALL_OW 275
41210: PUSH
41211: LD_VAR 0 4
41215: PUSH
41216: LD_INT 1
41218: ARRAY
41219: GREATEREQUAL
41220: PUSH
41221: LD_VAR 0 3
41225: PPUSH
41226: LD_INT 2
41228: PPUSH
41229: CALL_OW 275
41233: PUSH
41234: LD_VAR 0 4
41238: PUSH
41239: LD_INT 2
41241: ARRAY
41242: GREATEREQUAL
41243: AND
41244: PUSH
41245: LD_VAR 0 3
41249: PPUSH
41250: LD_INT 3
41252: PPUSH
41253: CALL_OW 275
41257: PUSH
41258: LD_VAR 0 4
41262: PUSH
41263: LD_INT 3
41265: ARRAY
41266: GREATEREQUAL
41267: AND
41268: ST_TO_ADDR
// end ;
41269: LD_VAR 0 2
41273: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41274: LD_INT 0
41276: PPUSH
41277: PPUSH
41278: PPUSH
// pom := GetBase ( building ) ;
41279: LD_ADDR_VAR 0 4
41283: PUSH
41284: LD_VAR 0 1
41288: PPUSH
41289: CALL_OW 274
41293: ST_TO_ADDR
// if not pom then
41294: LD_VAR 0 4
41298: NOT
41299: IFFALSE 41303
// exit ;
41301: GO 41404
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41303: LD_ADDR_VAR 0 5
41307: PUSH
41308: LD_VAR 0 2
41312: PPUSH
41313: LD_VAR 0 1
41317: PPUSH
41318: CALL_OW 248
41322: PPUSH
41323: CALL_OW 450
41327: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41328: LD_ADDR_VAR 0 3
41332: PUSH
41333: LD_VAR 0 4
41337: PPUSH
41338: LD_INT 1
41340: PPUSH
41341: CALL_OW 275
41345: PUSH
41346: LD_VAR 0 5
41350: PUSH
41351: LD_INT 1
41353: ARRAY
41354: GREATEREQUAL
41355: PUSH
41356: LD_VAR 0 4
41360: PPUSH
41361: LD_INT 2
41363: PPUSH
41364: CALL_OW 275
41368: PUSH
41369: LD_VAR 0 5
41373: PUSH
41374: LD_INT 2
41376: ARRAY
41377: GREATEREQUAL
41378: AND
41379: PUSH
41380: LD_VAR 0 4
41384: PPUSH
41385: LD_INT 3
41387: PPUSH
41388: CALL_OW 275
41392: PUSH
41393: LD_VAR 0 5
41397: PUSH
41398: LD_INT 3
41400: ARRAY
41401: GREATEREQUAL
41402: AND
41403: ST_TO_ADDR
// end ;
41404: LD_VAR 0 3
41408: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41409: LD_INT 0
41411: PPUSH
41412: PPUSH
41413: PPUSH
41414: PPUSH
41415: PPUSH
41416: PPUSH
41417: PPUSH
41418: PPUSH
41419: PPUSH
41420: PPUSH
41421: PPUSH
// result := false ;
41422: LD_ADDR_VAR 0 8
41426: PUSH
41427: LD_INT 0
41429: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41430: LD_VAR 0 5
41434: NOT
41435: PUSH
41436: LD_VAR 0 1
41440: NOT
41441: OR
41442: PUSH
41443: LD_VAR 0 2
41447: NOT
41448: OR
41449: PUSH
41450: LD_VAR 0 3
41454: NOT
41455: OR
41456: IFFALSE 41460
// exit ;
41458: GO 42274
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41460: LD_ADDR_VAR 0 14
41464: PUSH
41465: LD_VAR 0 1
41469: PPUSH
41470: LD_VAR 0 2
41474: PPUSH
41475: LD_VAR 0 3
41479: PPUSH
41480: LD_VAR 0 4
41484: PPUSH
41485: LD_VAR 0 5
41489: PUSH
41490: LD_INT 1
41492: ARRAY
41493: PPUSH
41494: CALL_OW 248
41498: PPUSH
41499: LD_INT 0
41501: PPUSH
41502: CALL 43507 0 6
41506: ST_TO_ADDR
// if not hexes then
41507: LD_VAR 0 14
41511: NOT
41512: IFFALSE 41516
// exit ;
41514: GO 42274
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41516: LD_ADDR_VAR 0 17
41520: PUSH
41521: LD_VAR 0 5
41525: PPUSH
41526: LD_INT 22
41528: PUSH
41529: LD_VAR 0 13
41533: PPUSH
41534: CALL_OW 255
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 2
41545: PUSH
41546: LD_INT 30
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 30
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: LIST
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PPUSH
41575: CALL_OW 72
41579: ST_TO_ADDR
// for i = 1 to hexes do
41580: LD_ADDR_VAR 0 9
41584: PUSH
41585: DOUBLE
41586: LD_INT 1
41588: DEC
41589: ST_TO_ADDR
41590: LD_VAR 0 14
41594: PUSH
41595: FOR_TO
41596: IFFALSE 42272
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41598: LD_ADDR_VAR 0 13
41602: PUSH
41603: LD_VAR 0 14
41607: PUSH
41608: LD_VAR 0 9
41612: ARRAY
41613: PUSH
41614: LD_INT 1
41616: ARRAY
41617: PPUSH
41618: LD_VAR 0 14
41622: PUSH
41623: LD_VAR 0 9
41627: ARRAY
41628: PUSH
41629: LD_INT 2
41631: ARRAY
41632: PPUSH
41633: CALL_OW 428
41637: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41638: LD_VAR 0 14
41642: PUSH
41643: LD_VAR 0 9
41647: ARRAY
41648: PUSH
41649: LD_INT 1
41651: ARRAY
41652: PPUSH
41653: LD_VAR 0 14
41657: PUSH
41658: LD_VAR 0 9
41662: ARRAY
41663: PUSH
41664: LD_INT 2
41666: ARRAY
41667: PPUSH
41668: CALL_OW 351
41672: PUSH
41673: LD_VAR 0 14
41677: PUSH
41678: LD_VAR 0 9
41682: ARRAY
41683: PUSH
41684: LD_INT 1
41686: ARRAY
41687: PPUSH
41688: LD_VAR 0 14
41692: PUSH
41693: LD_VAR 0 9
41697: ARRAY
41698: PUSH
41699: LD_INT 2
41701: ARRAY
41702: PPUSH
41703: CALL_OW 488
41707: NOT
41708: OR
41709: PUSH
41710: LD_VAR 0 13
41714: PPUSH
41715: CALL_OW 247
41719: PUSH
41720: LD_INT 3
41722: EQUAL
41723: OR
41724: IFFALSE 41730
// exit ;
41726: POP
41727: POP
41728: GO 42274
// if not tmp then
41730: LD_VAR 0 13
41734: NOT
41735: IFFALSE 41739
// continue ;
41737: GO 41595
// result := true ;
41739: LD_ADDR_VAR 0 8
41743: PUSH
41744: LD_INT 1
41746: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41747: LD_VAR 0 6
41751: PUSH
41752: LD_VAR 0 13
41756: PPUSH
41757: CALL_OW 247
41761: PUSH
41762: LD_INT 2
41764: EQUAL
41765: AND
41766: PUSH
41767: LD_VAR 0 13
41771: PPUSH
41772: CALL_OW 263
41776: PUSH
41777: LD_INT 1
41779: EQUAL
41780: AND
41781: IFFALSE 41945
// begin if IsDrivenBy ( tmp ) then
41783: LD_VAR 0 13
41787: PPUSH
41788: CALL_OW 311
41792: IFFALSE 41796
// continue ;
41794: GO 41595
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41796: LD_VAR 0 6
41800: PPUSH
41801: LD_INT 3
41803: PUSH
41804: LD_INT 60
41806: PUSH
41807: EMPTY
41808: LIST
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 3
41816: PUSH
41817: LD_INT 55
41819: PUSH
41820: EMPTY
41821: LIST
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PPUSH
41831: CALL_OW 72
41835: IFFALSE 41943
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41837: LD_ADDR_VAR 0 18
41841: PUSH
41842: LD_VAR 0 6
41846: PPUSH
41847: LD_INT 3
41849: PUSH
41850: LD_INT 60
41852: PUSH
41853: EMPTY
41854: LIST
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 3
41862: PUSH
41863: LD_INT 55
41865: PUSH
41866: EMPTY
41867: LIST
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PPUSH
41877: CALL_OW 72
41881: PUSH
41882: LD_INT 1
41884: ARRAY
41885: ST_TO_ADDR
// if IsInUnit ( driver ) then
41886: LD_VAR 0 18
41890: PPUSH
41891: CALL_OW 310
41895: IFFALSE 41906
// ComExit ( driver ) ;
41897: LD_VAR 0 18
41901: PPUSH
41902: CALL 67287 0 1
// AddComEnterUnit ( driver , tmp ) ;
41906: LD_VAR 0 18
41910: PPUSH
41911: LD_VAR 0 13
41915: PPUSH
41916: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41920: LD_VAR 0 18
41924: PPUSH
41925: LD_VAR 0 7
41929: PPUSH
41930: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41934: LD_VAR 0 18
41938: PPUSH
41939: CALL_OW 181
// end ; continue ;
41943: GO 41595
// end ; if not cleaners or not tmp in cleaners then
41945: LD_VAR 0 6
41949: NOT
41950: PUSH
41951: LD_VAR 0 13
41955: PUSH
41956: LD_VAR 0 6
41960: IN
41961: NOT
41962: OR
41963: IFFALSE 42270
// begin if dep then
41965: LD_VAR 0 17
41969: IFFALSE 42105
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41971: LD_ADDR_VAR 0 16
41975: PUSH
41976: LD_VAR 0 17
41980: PUSH
41981: LD_INT 1
41983: ARRAY
41984: PPUSH
41985: CALL_OW 250
41989: PPUSH
41990: LD_VAR 0 17
41994: PUSH
41995: LD_INT 1
41997: ARRAY
41998: PPUSH
41999: CALL_OW 254
42003: PPUSH
42004: LD_INT 5
42006: PPUSH
42007: CALL_OW 272
42011: PUSH
42012: LD_VAR 0 17
42016: PUSH
42017: LD_INT 1
42019: ARRAY
42020: PPUSH
42021: CALL_OW 251
42025: PPUSH
42026: LD_VAR 0 17
42030: PUSH
42031: LD_INT 1
42033: ARRAY
42034: PPUSH
42035: CALL_OW 254
42039: PPUSH
42040: LD_INT 5
42042: PPUSH
42043: CALL_OW 273
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42052: LD_VAR 0 16
42056: PUSH
42057: LD_INT 1
42059: ARRAY
42060: PPUSH
42061: LD_VAR 0 16
42065: PUSH
42066: LD_INT 2
42068: ARRAY
42069: PPUSH
42070: CALL_OW 488
42074: IFFALSE 42105
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42076: LD_VAR 0 13
42080: PPUSH
42081: LD_VAR 0 16
42085: PUSH
42086: LD_INT 1
42088: ARRAY
42089: PPUSH
42090: LD_VAR 0 16
42094: PUSH
42095: LD_INT 2
42097: ARRAY
42098: PPUSH
42099: CALL_OW 111
// continue ;
42103: GO 41595
// end ; end ; r := GetDir ( tmp ) ;
42105: LD_ADDR_VAR 0 15
42109: PUSH
42110: LD_VAR 0 13
42114: PPUSH
42115: CALL_OW 254
42119: ST_TO_ADDR
// if r = 5 then
42120: LD_VAR 0 15
42124: PUSH
42125: LD_INT 5
42127: EQUAL
42128: IFFALSE 42138
// r := 0 ;
42130: LD_ADDR_VAR 0 15
42134: PUSH
42135: LD_INT 0
42137: ST_TO_ADDR
// for j = r to 5 do
42138: LD_ADDR_VAR 0 10
42142: PUSH
42143: DOUBLE
42144: LD_VAR 0 15
42148: DEC
42149: ST_TO_ADDR
42150: LD_INT 5
42152: PUSH
42153: FOR_TO
42154: IFFALSE 42268
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42156: LD_ADDR_VAR 0 11
42160: PUSH
42161: LD_VAR 0 13
42165: PPUSH
42166: CALL_OW 250
42170: PPUSH
42171: LD_VAR 0 10
42175: PPUSH
42176: LD_INT 2
42178: PPUSH
42179: CALL_OW 272
42183: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42184: LD_ADDR_VAR 0 12
42188: PUSH
42189: LD_VAR 0 13
42193: PPUSH
42194: CALL_OW 251
42198: PPUSH
42199: LD_VAR 0 10
42203: PPUSH
42204: LD_INT 2
42206: PPUSH
42207: CALL_OW 273
42211: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42212: LD_VAR 0 11
42216: PPUSH
42217: LD_VAR 0 12
42221: PPUSH
42222: CALL_OW 488
42226: PUSH
42227: LD_VAR 0 11
42231: PPUSH
42232: LD_VAR 0 12
42236: PPUSH
42237: CALL_OW 428
42241: NOT
42242: AND
42243: IFFALSE 42266
// begin ComMoveXY ( tmp , _x , _y ) ;
42245: LD_VAR 0 13
42249: PPUSH
42250: LD_VAR 0 11
42254: PPUSH
42255: LD_VAR 0 12
42259: PPUSH
42260: CALL_OW 111
// break ;
42264: GO 42268
// end ; end ;
42266: GO 42153
42268: POP
42269: POP
// end ; end ;
42270: GO 41595
42272: POP
42273: POP
// end ;
42274: LD_VAR 0 8
42278: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42279: LD_INT 0
42281: PPUSH
// result := true ;
42282: LD_ADDR_VAR 0 3
42286: PUSH
42287: LD_INT 1
42289: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42290: LD_VAR 0 2
42294: PUSH
42295: LD_INT 24
42297: DOUBLE
42298: EQUAL
42299: IFTRUE 42309
42301: LD_INT 33
42303: DOUBLE
42304: EQUAL
42305: IFTRUE 42309
42307: GO 42334
42309: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42310: LD_ADDR_VAR 0 3
42314: PUSH
42315: LD_INT 32
42317: PPUSH
42318: LD_VAR 0 1
42322: PPUSH
42323: CALL_OW 321
42327: PUSH
42328: LD_INT 2
42330: EQUAL
42331: ST_TO_ADDR
42332: GO 42650
42334: LD_INT 20
42336: DOUBLE
42337: EQUAL
42338: IFTRUE 42342
42340: GO 42367
42342: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42343: LD_ADDR_VAR 0 3
42347: PUSH
42348: LD_INT 6
42350: PPUSH
42351: LD_VAR 0 1
42355: PPUSH
42356: CALL_OW 321
42360: PUSH
42361: LD_INT 2
42363: EQUAL
42364: ST_TO_ADDR
42365: GO 42650
42367: LD_INT 22
42369: DOUBLE
42370: EQUAL
42371: IFTRUE 42381
42373: LD_INT 36
42375: DOUBLE
42376: EQUAL
42377: IFTRUE 42381
42379: GO 42406
42381: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42382: LD_ADDR_VAR 0 3
42386: PUSH
42387: LD_INT 15
42389: PPUSH
42390: LD_VAR 0 1
42394: PPUSH
42395: CALL_OW 321
42399: PUSH
42400: LD_INT 2
42402: EQUAL
42403: ST_TO_ADDR
42404: GO 42650
42406: LD_INT 30
42408: DOUBLE
42409: EQUAL
42410: IFTRUE 42414
42412: GO 42439
42414: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42415: LD_ADDR_VAR 0 3
42419: PUSH
42420: LD_INT 20
42422: PPUSH
42423: LD_VAR 0 1
42427: PPUSH
42428: CALL_OW 321
42432: PUSH
42433: LD_INT 2
42435: EQUAL
42436: ST_TO_ADDR
42437: GO 42650
42439: LD_INT 28
42441: DOUBLE
42442: EQUAL
42443: IFTRUE 42453
42445: LD_INT 21
42447: DOUBLE
42448: EQUAL
42449: IFTRUE 42453
42451: GO 42478
42453: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42454: LD_ADDR_VAR 0 3
42458: PUSH
42459: LD_INT 21
42461: PPUSH
42462: LD_VAR 0 1
42466: PPUSH
42467: CALL_OW 321
42471: PUSH
42472: LD_INT 2
42474: EQUAL
42475: ST_TO_ADDR
42476: GO 42650
42478: LD_INT 16
42480: DOUBLE
42481: EQUAL
42482: IFTRUE 42486
42484: GO 42511
42486: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42487: LD_ADDR_VAR 0 3
42491: PUSH
42492: LD_INT 84
42494: PPUSH
42495: LD_VAR 0 1
42499: PPUSH
42500: CALL_OW 321
42504: PUSH
42505: LD_INT 2
42507: EQUAL
42508: ST_TO_ADDR
42509: GO 42650
42511: LD_INT 19
42513: DOUBLE
42514: EQUAL
42515: IFTRUE 42525
42517: LD_INT 23
42519: DOUBLE
42520: EQUAL
42521: IFTRUE 42525
42523: GO 42550
42525: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42526: LD_ADDR_VAR 0 3
42530: PUSH
42531: LD_INT 83
42533: PPUSH
42534: LD_VAR 0 1
42538: PPUSH
42539: CALL_OW 321
42543: PUSH
42544: LD_INT 2
42546: EQUAL
42547: ST_TO_ADDR
42548: GO 42650
42550: LD_INT 17
42552: DOUBLE
42553: EQUAL
42554: IFTRUE 42558
42556: GO 42583
42558: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42559: LD_ADDR_VAR 0 3
42563: PUSH
42564: LD_INT 39
42566: PPUSH
42567: LD_VAR 0 1
42571: PPUSH
42572: CALL_OW 321
42576: PUSH
42577: LD_INT 2
42579: EQUAL
42580: ST_TO_ADDR
42581: GO 42650
42583: LD_INT 18
42585: DOUBLE
42586: EQUAL
42587: IFTRUE 42591
42589: GO 42616
42591: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42592: LD_ADDR_VAR 0 3
42596: PUSH
42597: LD_INT 40
42599: PPUSH
42600: LD_VAR 0 1
42604: PPUSH
42605: CALL_OW 321
42609: PUSH
42610: LD_INT 2
42612: EQUAL
42613: ST_TO_ADDR
42614: GO 42650
42616: LD_INT 27
42618: DOUBLE
42619: EQUAL
42620: IFTRUE 42624
42622: GO 42649
42624: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42625: LD_ADDR_VAR 0 3
42629: PUSH
42630: LD_INT 35
42632: PPUSH
42633: LD_VAR 0 1
42637: PPUSH
42638: CALL_OW 321
42642: PUSH
42643: LD_INT 2
42645: EQUAL
42646: ST_TO_ADDR
42647: GO 42650
42649: POP
// end ;
42650: LD_VAR 0 3
42654: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42655: LD_INT 0
42657: PPUSH
42658: PPUSH
42659: PPUSH
42660: PPUSH
42661: PPUSH
42662: PPUSH
42663: PPUSH
42664: PPUSH
42665: PPUSH
42666: PPUSH
42667: PPUSH
// result := false ;
42668: LD_ADDR_VAR 0 6
42672: PUSH
42673: LD_INT 0
42675: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42676: LD_VAR 0 1
42680: NOT
42681: PUSH
42682: LD_VAR 0 1
42686: PPUSH
42687: CALL_OW 266
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: IN
42702: NOT
42703: OR
42704: PUSH
42705: LD_VAR 0 2
42709: NOT
42710: OR
42711: PUSH
42712: LD_VAR 0 5
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: LD_INT 2
42725: PUSH
42726: LD_INT 3
42728: PUSH
42729: LD_INT 4
42731: PUSH
42732: LD_INT 5
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: IN
42743: NOT
42744: OR
42745: PUSH
42746: LD_VAR 0 3
42750: PPUSH
42751: LD_VAR 0 4
42755: PPUSH
42756: CALL_OW 488
42760: NOT
42761: OR
42762: IFFALSE 42766
// exit ;
42764: GO 43502
// side := GetSide ( depot ) ;
42766: LD_ADDR_VAR 0 9
42770: PUSH
42771: LD_VAR 0 1
42775: PPUSH
42776: CALL_OW 255
42780: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42781: LD_VAR 0 9
42785: PPUSH
42786: LD_VAR 0 2
42790: PPUSH
42791: CALL 42279 0 2
42795: NOT
42796: IFFALSE 42800
// exit ;
42798: GO 43502
// pom := GetBase ( depot ) ;
42800: LD_ADDR_VAR 0 10
42804: PUSH
42805: LD_VAR 0 1
42809: PPUSH
42810: CALL_OW 274
42814: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42815: LD_ADDR_VAR 0 11
42819: PUSH
42820: LD_VAR 0 2
42824: PPUSH
42825: LD_VAR 0 1
42829: PPUSH
42830: CALL_OW 248
42834: PPUSH
42835: CALL_OW 450
42839: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42840: LD_VAR 0 10
42844: PPUSH
42845: LD_INT 1
42847: PPUSH
42848: CALL_OW 275
42852: PUSH
42853: LD_VAR 0 11
42857: PUSH
42858: LD_INT 1
42860: ARRAY
42861: GREATEREQUAL
42862: PUSH
42863: LD_VAR 0 10
42867: PPUSH
42868: LD_INT 2
42870: PPUSH
42871: CALL_OW 275
42875: PUSH
42876: LD_VAR 0 11
42880: PUSH
42881: LD_INT 2
42883: ARRAY
42884: GREATEREQUAL
42885: AND
42886: PUSH
42887: LD_VAR 0 10
42891: PPUSH
42892: LD_INT 3
42894: PPUSH
42895: CALL_OW 275
42899: PUSH
42900: LD_VAR 0 11
42904: PUSH
42905: LD_INT 3
42907: ARRAY
42908: GREATEREQUAL
42909: AND
42910: NOT
42911: IFFALSE 42915
// exit ;
42913: GO 43502
// if GetBType ( depot ) = b_depot then
42915: LD_VAR 0 1
42919: PPUSH
42920: CALL_OW 266
42924: PUSH
42925: LD_INT 0
42927: EQUAL
42928: IFFALSE 42940
// dist := 28 else
42930: LD_ADDR_VAR 0 14
42934: PUSH
42935: LD_INT 28
42937: ST_TO_ADDR
42938: GO 42948
// dist := 36 ;
42940: LD_ADDR_VAR 0 14
42944: PUSH
42945: LD_INT 36
42947: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42948: LD_VAR 0 1
42952: PPUSH
42953: LD_VAR 0 3
42957: PPUSH
42958: LD_VAR 0 4
42962: PPUSH
42963: CALL_OW 297
42967: PUSH
42968: LD_VAR 0 14
42972: GREATER
42973: IFFALSE 42977
// exit ;
42975: GO 43502
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42977: LD_ADDR_VAR 0 12
42981: PUSH
42982: LD_VAR 0 2
42986: PPUSH
42987: LD_VAR 0 3
42991: PPUSH
42992: LD_VAR 0 4
42996: PPUSH
42997: LD_VAR 0 5
43001: PPUSH
43002: LD_VAR 0 1
43006: PPUSH
43007: CALL_OW 248
43011: PPUSH
43012: LD_INT 0
43014: PPUSH
43015: CALL 43507 0 6
43019: ST_TO_ADDR
// if not hexes then
43020: LD_VAR 0 12
43024: NOT
43025: IFFALSE 43029
// exit ;
43027: GO 43502
// hex := GetHexInfo ( x , y ) ;
43029: LD_ADDR_VAR 0 15
43033: PUSH
43034: LD_VAR 0 3
43038: PPUSH
43039: LD_VAR 0 4
43043: PPUSH
43044: CALL_OW 546
43048: ST_TO_ADDR
// if hex [ 1 ] then
43049: LD_VAR 0 15
43053: PUSH
43054: LD_INT 1
43056: ARRAY
43057: IFFALSE 43061
// exit ;
43059: GO 43502
// height := hex [ 2 ] ;
43061: LD_ADDR_VAR 0 13
43065: PUSH
43066: LD_VAR 0 15
43070: PUSH
43071: LD_INT 2
43073: ARRAY
43074: ST_TO_ADDR
// for i = 1 to hexes do
43075: LD_ADDR_VAR 0 7
43079: PUSH
43080: DOUBLE
43081: LD_INT 1
43083: DEC
43084: ST_TO_ADDR
43085: LD_VAR 0 12
43089: PUSH
43090: FOR_TO
43091: IFFALSE 43421
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43093: LD_VAR 0 12
43097: PUSH
43098: LD_VAR 0 7
43102: ARRAY
43103: PUSH
43104: LD_INT 1
43106: ARRAY
43107: PPUSH
43108: LD_VAR 0 12
43112: PUSH
43113: LD_VAR 0 7
43117: ARRAY
43118: PUSH
43119: LD_INT 2
43121: ARRAY
43122: PPUSH
43123: CALL_OW 488
43127: NOT
43128: PUSH
43129: LD_VAR 0 12
43133: PUSH
43134: LD_VAR 0 7
43138: ARRAY
43139: PUSH
43140: LD_INT 1
43142: ARRAY
43143: PPUSH
43144: LD_VAR 0 12
43148: PUSH
43149: LD_VAR 0 7
43153: ARRAY
43154: PUSH
43155: LD_INT 2
43157: ARRAY
43158: PPUSH
43159: CALL_OW 428
43163: PUSH
43164: LD_INT 0
43166: GREATER
43167: OR
43168: PUSH
43169: LD_VAR 0 12
43173: PUSH
43174: LD_VAR 0 7
43178: ARRAY
43179: PUSH
43180: LD_INT 1
43182: ARRAY
43183: PPUSH
43184: LD_VAR 0 12
43188: PUSH
43189: LD_VAR 0 7
43193: ARRAY
43194: PUSH
43195: LD_INT 2
43197: ARRAY
43198: PPUSH
43199: CALL_OW 351
43203: OR
43204: IFFALSE 43210
// exit ;
43206: POP
43207: POP
43208: GO 43502
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43210: LD_ADDR_VAR 0 8
43214: PUSH
43215: LD_VAR 0 12
43219: PUSH
43220: LD_VAR 0 7
43224: ARRAY
43225: PUSH
43226: LD_INT 1
43228: ARRAY
43229: PPUSH
43230: LD_VAR 0 12
43234: PUSH
43235: LD_VAR 0 7
43239: ARRAY
43240: PUSH
43241: LD_INT 2
43243: ARRAY
43244: PPUSH
43245: CALL_OW 546
43249: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43250: LD_VAR 0 8
43254: PUSH
43255: LD_INT 1
43257: ARRAY
43258: PUSH
43259: LD_VAR 0 8
43263: PUSH
43264: LD_INT 2
43266: ARRAY
43267: PUSH
43268: LD_VAR 0 13
43272: PUSH
43273: LD_INT 2
43275: PLUS
43276: GREATER
43277: OR
43278: PUSH
43279: LD_VAR 0 8
43283: PUSH
43284: LD_INT 2
43286: ARRAY
43287: PUSH
43288: LD_VAR 0 13
43292: PUSH
43293: LD_INT 2
43295: MINUS
43296: LESS
43297: OR
43298: PUSH
43299: LD_VAR 0 8
43303: PUSH
43304: LD_INT 3
43306: ARRAY
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: LD_INT 8
43313: PUSH
43314: LD_INT 9
43316: PUSH
43317: LD_INT 10
43319: PUSH
43320: LD_INT 11
43322: PUSH
43323: LD_INT 12
43325: PUSH
43326: LD_INT 13
43328: PUSH
43329: LD_INT 16
43331: PUSH
43332: LD_INT 17
43334: PUSH
43335: LD_INT 18
43337: PUSH
43338: LD_INT 19
43340: PUSH
43341: LD_INT 20
43343: PUSH
43344: LD_INT 21
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: IN
43362: NOT
43363: OR
43364: PUSH
43365: LD_VAR 0 8
43369: PUSH
43370: LD_INT 5
43372: ARRAY
43373: NOT
43374: OR
43375: PUSH
43376: LD_VAR 0 8
43380: PUSH
43381: LD_INT 6
43383: ARRAY
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: LD_INT 7
43393: PUSH
43394: LD_INT 9
43396: PUSH
43397: LD_INT 10
43399: PUSH
43400: LD_INT 11
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: IN
43411: NOT
43412: OR
43413: IFFALSE 43419
// exit ;
43415: POP
43416: POP
43417: GO 43502
// end ;
43419: GO 43090
43421: POP
43422: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43423: LD_VAR 0 9
43427: PPUSH
43428: LD_VAR 0 3
43432: PPUSH
43433: LD_VAR 0 4
43437: PPUSH
43438: LD_INT 20
43440: PPUSH
43441: CALL 35454 0 4
43445: PUSH
43446: LD_INT 4
43448: ARRAY
43449: IFFALSE 43453
// exit ;
43451: GO 43502
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43453: LD_VAR 0 2
43457: PUSH
43458: LD_INT 29
43460: PUSH
43461: LD_INT 30
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: IN
43468: PUSH
43469: LD_VAR 0 3
43473: PPUSH
43474: LD_VAR 0 4
43478: PPUSH
43479: LD_VAR 0 9
43483: PPUSH
43484: CALL_OW 440
43488: NOT
43489: AND
43490: IFFALSE 43494
// exit ;
43492: GO 43502
// result := true ;
43494: LD_ADDR_VAR 0 6
43498: PUSH
43499: LD_INT 1
43501: ST_TO_ADDR
// end ;
43502: LD_VAR 0 6
43506: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43507: LD_INT 0
43509: PPUSH
43510: PPUSH
43511: PPUSH
43512: PPUSH
43513: PPUSH
43514: PPUSH
43515: PPUSH
43516: PPUSH
43517: PPUSH
43518: PPUSH
43519: PPUSH
43520: PPUSH
43521: PPUSH
43522: PPUSH
43523: PPUSH
43524: PPUSH
43525: PPUSH
43526: PPUSH
43527: PPUSH
43528: PPUSH
43529: PPUSH
43530: PPUSH
43531: PPUSH
43532: PPUSH
43533: PPUSH
43534: PPUSH
43535: PPUSH
43536: PPUSH
43537: PPUSH
43538: PPUSH
43539: PPUSH
43540: PPUSH
43541: PPUSH
43542: PPUSH
43543: PPUSH
43544: PPUSH
43545: PPUSH
43546: PPUSH
43547: PPUSH
43548: PPUSH
43549: PPUSH
43550: PPUSH
43551: PPUSH
43552: PPUSH
43553: PPUSH
43554: PPUSH
43555: PPUSH
43556: PPUSH
43557: PPUSH
43558: PPUSH
43559: PPUSH
43560: PPUSH
43561: PPUSH
43562: PPUSH
43563: PPUSH
43564: PPUSH
43565: PPUSH
43566: PPUSH
// result = [ ] ;
43567: LD_ADDR_VAR 0 7
43571: PUSH
43572: EMPTY
43573: ST_TO_ADDR
// temp_list = [ ] ;
43574: LD_ADDR_VAR 0 9
43578: PUSH
43579: EMPTY
43580: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43581: LD_VAR 0 4
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: LD_INT 2
43594: PUSH
43595: LD_INT 3
43597: PUSH
43598: LD_INT 4
43600: PUSH
43601: LD_INT 5
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: IN
43612: NOT
43613: PUSH
43614: LD_VAR 0 1
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: IN
43629: PUSH
43630: LD_VAR 0 5
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: LD_INT 2
43640: PUSH
43641: LD_INT 3
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: LIST
43648: IN
43649: NOT
43650: AND
43651: OR
43652: IFFALSE 43656
// exit ;
43654: GO 62047
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43656: LD_VAR 0 1
43660: PUSH
43661: LD_INT 6
43663: PUSH
43664: LD_INT 7
43666: PUSH
43667: LD_INT 8
43669: PUSH
43670: LD_INT 13
43672: PUSH
43673: LD_INT 12
43675: PUSH
43676: LD_INT 15
43678: PUSH
43679: LD_INT 11
43681: PUSH
43682: LD_INT 14
43684: PUSH
43685: LD_INT 10
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: IN
43699: IFFALSE 43709
// btype = b_lab ;
43701: LD_ADDR_VAR 0 1
43705: PUSH
43706: LD_INT 6
43708: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43709: LD_VAR 0 6
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: LD_INT 2
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: LIST
43727: IN
43728: NOT
43729: PUSH
43730: LD_VAR 0 1
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: LD_INT 2
43743: PUSH
43744: LD_INT 3
43746: PUSH
43747: LD_INT 6
43749: PUSH
43750: LD_INT 36
43752: PUSH
43753: LD_INT 4
43755: PUSH
43756: LD_INT 5
43758: PUSH
43759: LD_INT 31
43761: PUSH
43762: LD_INT 32
43764: PUSH
43765: LD_INT 33
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: IN
43781: NOT
43782: PUSH
43783: LD_VAR 0 6
43787: PUSH
43788: LD_INT 1
43790: EQUAL
43791: AND
43792: OR
43793: PUSH
43794: LD_VAR 0 1
43798: PUSH
43799: LD_INT 2
43801: PUSH
43802: LD_INT 3
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: IN
43809: NOT
43810: PUSH
43811: LD_VAR 0 6
43815: PUSH
43816: LD_INT 2
43818: EQUAL
43819: AND
43820: OR
43821: IFFALSE 43831
// mode = 0 ;
43823: LD_ADDR_VAR 0 6
43827: PUSH
43828: LD_INT 0
43830: ST_TO_ADDR
// case mode of 0 :
43831: LD_VAR 0 6
43835: PUSH
43836: LD_INT 0
43838: DOUBLE
43839: EQUAL
43840: IFTRUE 43844
43842: GO 55297
43844: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43845: LD_ADDR_VAR 0 11
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: LD_INT 2
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: LD_INT 1
43952: NEG
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: LD_INT 2
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 1
43980: NEG
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: LD_INT 3
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: LD_INT 3
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44038: LD_ADDR_VAR 0 12
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: NEG
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 2
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: NEG
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 2
44172: NEG
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 2
44184: NEG
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 3
44195: NEG
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 3
44206: NEG
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44234: LD_ADDR_VAR 0 13
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: LD_INT 2
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 2
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 2
44337: PUSH
44338: LD_INT 2
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: LD_INT 2
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 2
44357: NEG
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 2
44369: NEG
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 2
44381: NEG
44382: PUSH
44383: LD_INT 3
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 3
44393: NEG
44394: PUSH
44395: LD_INT 2
44397: NEG
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 3
44405: NEG
44406: PUSH
44407: LD_INT 3
44409: NEG
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44433: LD_ADDR_VAR 0 14
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: NEG
44515: PUSH
44516: LD_INT 2
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: LD_INT 2
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: LD_INT 2
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: LD_INT 3
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: LD_INT 3
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44629: LD_ADDR_VAR 0 15
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 2
44752: NEG
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 3
44786: PUSH
44787: LD_INT 0
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 3
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44822: LD_ADDR_VAR 0 16
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: LD_INT 1
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 2
44945: NEG
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 2
44957: NEG
44958: PUSH
44959: LD_INT 2
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 3
44969: PUSH
44970: LD_INT 2
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 3
44979: PUSH
44980: LD_INT 3
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: LD_INT 3
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45015: LD_ADDR_VAR 0 17
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: LD_INT 2
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: LD_INT 2
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 2
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 2
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 2
45150: PUSH
45151: LD_INT 2
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: PUSH
45161: LD_INT 2
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: LD_INT 2
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 1
45180: NEG
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 2
45191: NEG
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 2
45202: NEG
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 2
45214: NEG
45215: PUSH
45216: LD_INT 2
45218: NEG
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45245: LD_ADDR_VAR 0 18
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 2
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: LD_INT 2
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 2
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: NEG
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: LD_INT 2
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45475: LD_ADDR_VAR 0 19
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: LD_INT 2
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 2
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 2
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 2
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: LD_INT 2
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: LD_INT 2
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 2
45651: NEG
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: NEG
45675: PUSH
45676: LD_INT 2
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45705: LD_ADDR_VAR 0 20
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: LD_INT 2
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 2
45840: PUSH
45841: LD_INT 2
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: LD_INT 2
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: LD_INT 2
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 2
45892: NEG
45893: PUSH
45894: LD_INT 1
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: NEG
45905: PUSH
45906: LD_INT 2
45908: NEG
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45935: LD_ADDR_VAR 0 21
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: LD_INT 1
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: LD_INT 2
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: LD_INT 2
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 2
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 2
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 2
46070: PUSH
46071: LD_INT 2
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: LD_INT 2
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: LD_INT 2
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: NEG
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: LD_INT 2
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46165: LD_ADDR_VAR 0 22
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 2
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: LD_INT 2
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 2
46341: NEG
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 2
46352: NEG
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: LD_INT 2
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46395: LD_ADDR_VAR 0 23
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: LD_INT 2
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 2
46530: PUSH
46531: LD_INT 2
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 2
46571: NEG
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 2
46582: NEG
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: LD_INT 2
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 2
46606: NEG
46607: PUSH
46608: LD_INT 3
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: LD_INT 3
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 1
46630: PUSH
46631: LD_INT 2
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 2
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46675: LD_ADDR_VAR 0 24
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: LD_INT 2
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: LD_INT 2
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 2
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 2
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 2
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: LD_INT 2
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: LD_INT 2
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 2
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 3
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 3
46918: PUSH
46919: LD_INT 2
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46951: LD_ADDR_VAR 0 25
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: LD_INT 2
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: LD_INT 2
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 2
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 2
47086: PUSH
47087: LD_INT 2
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: NEG
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: NEG
47151: PUSH
47152: LD_INT 2
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 3
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 3
47172: PUSH
47173: LD_INT 2
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 2
47182: PUSH
47183: LD_INT 3
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: LD_INT 3
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47225: LD_ADDR_VAR 0 26
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: LD_INT 2
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 2
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 2
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 2
47360: PUSH
47361: LD_INT 2
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 2
47401: NEG
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 2
47412: NEG
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: LD_INT 2
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 2
47436: PUSH
47437: LD_INT 3
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: LD_INT 3
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: NEG
47468: PUSH
47469: LD_INT 1
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47501: LD_ADDR_VAR 0 27
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 0
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: PUSH
47637: LD_INT 2
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: LD_INT 2
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: LD_INT 1
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 2
47677: NEG
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 2
47688: NEG
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 2
47700: NEG
47701: PUSH
47702: LD_INT 2
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 3
47734: NEG
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 3
47746: NEG
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47781: LD_ADDR_VAR 0 28
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 2
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 2
47957: NEG
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: LD_INT 3
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: LD_INT 3
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 3
48016: NEG
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 3
48028: NEG
48029: PUSH
48030: LD_INT 2
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48063: LD_ADDR_VAR 0 29
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: LD_INT 2
48148: NEG
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: LD_INT 2
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: LD_INT 1
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 2
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: LD_INT 2
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 2
48229: NEG
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 2
48241: NEG
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: NEG
48254: PUSH
48255: LD_INT 3
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 2
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 3
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: LD_INT 3
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: LD_INT 2
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 3
48307: NEG
48308: PUSH
48309: LD_INT 2
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48342: LD_ADDR_VAR 0 30
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 2
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 2
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 2
48508: NEG
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: NEG
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: LD_INT 3
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 3
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: LD_INT 3
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 3
48585: NEG
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48620: LD_ADDR_VAR 0 31
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: LD_INT 2
48705: NEG
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 2
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 2
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: LD_INT 2
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 2
48785: NEG
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: NEG
48798: PUSH
48799: LD_INT 2
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: LD_INT 3
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 3
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: LD_INT 3
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: LD_INT 2
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 3
48863: NEG
48864: PUSH
48865: LD_INT 2
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48898: LD_ADDR_VAR 0 32
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: PUSH
49024: LD_INT 2
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: LD_INT 2
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 2
49064: NEG
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: LD_INT 3
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 3
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 2
49120: PUSH
49121: LD_INT 3
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 2
49130: NEG
49131: PUSH
49132: LD_INT 1
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 3
49141: NEG
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49176: LD_ADDR_VAR 0 33
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: LD_INT 0
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: LD_INT 2
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 2
49354: NEG
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 2
49366: NEG
49367: PUSH
49368: LD_INT 3
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 3
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 3
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 3
49420: NEG
49421: PUSH
49422: LD_INT 2
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49455: LD_ADDR_VAR 0 34
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: LD_INT 2
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: LD_INT 2
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 2
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 2
49580: PUSH
49581: LD_INT 2
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: LD_INT 2
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 2
49611: NEG
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: NEG
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 2
49634: NEG
49635: PUSH
49636: LD_INT 2
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 3
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 3
49669: PUSH
49670: LD_INT 2
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: LD_INT 3
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 3
49700: NEG
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49735: LD_ADDR_VAR 0 35
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 2
49816: PUSH
49817: LD_INT 1
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 2
49826: NEG
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49847: LD_ADDR_VAR 0 36
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49959: LD_ADDR_VAR 0 37
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: LD_INT 1
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50071: LD_ADDR_VAR 0 38
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 1
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: LD_INT 1
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: LD_INT 1
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50183: LD_ADDR_VAR 0 39
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 1
50241: NEG
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 1
50252: NEG
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: LD_INT 2
50268: NEG
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: LD_INT 2
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50295: LD_ADDR_VAR 0 40
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: LD_INT 1
50379: NEG
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50407: LD_ADDR_VAR 0 41
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: LD_INT 2
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 2
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 2
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 2
50531: PUSH
50532: LD_INT 2
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: LD_INT 2
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 2
50562: NEG
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: LD_INT 2
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: LD_INT 3
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 3
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 3
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 3
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 3
50650: PUSH
50651: LD_INT 3
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: LD_INT 3
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 2
50670: NEG
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 3
50681: NEG
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 3
50692: NEG
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 3
50704: NEG
50705: PUSH
50706: LD_INT 2
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 3
50716: NEG
50717: PUSH
50718: LD_INT 3
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50757: LD_ADDR_VAR 0 42
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: LD_INT 2
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: LD_INT 2
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 2
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: NEG
50924: PUSH
50925: LD_INT 1
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 2
50935: NEG
50936: PUSH
50937: LD_INT 2
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: LD_INT 3
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: LD_INT 3
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: LD_INT 3
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: LD_INT 2
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 3
50993: PUSH
50994: LD_INT 2
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 3
51003: PUSH
51004: LD_INT 3
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 2
51013: PUSH
51014: LD_INT 3
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: LD_INT 3
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: LD_INT 3
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 3
51054: NEG
51055: PUSH
51056: LD_INT 2
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 3
51066: NEG
51067: PUSH
51068: LD_INT 3
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51107: LD_ADDR_VAR 0 43
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 1
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 2
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 2
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 2
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: LD_INT 2
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 2
51284: NEG
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: LD_INT 3
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: LD_INT 3
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: LD_INT 2
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 3
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 3
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 3
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: LD_INT 3
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: NEG
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 3
51403: NEG
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 3
51414: NEG
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51455: LD_ADDR_VAR 0 44
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: LD_INT 2
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 2
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 2
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: LD_INT 2
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 2
51610: NEG
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 2
51621: NEG
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: LD_INT 2
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 2
51645: NEG
51646: PUSH
51647: LD_INT 3
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 3
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 3
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 3
51688: PUSH
51689: LD_INT 2
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 3
51698: PUSH
51699: LD_INT 3
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 2
51708: PUSH
51709: LD_INT 3
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 2
51718: NEG
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 3
51729: NEG
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 3
51740: NEG
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 3
51752: NEG
51753: PUSH
51754: LD_INT 2
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 3
51764: NEG
51765: PUSH
51766: LD_INT 3
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51805: LD_ADDR_VAR 0 45
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: LD_INT 2
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: LD_INT 2
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 2
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 2
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: LD_INT 2
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: LD_INT 2
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 2
51971: NEG
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: LD_INT 2
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 2
51995: NEG
51996: PUSH
51997: LD_INT 3
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: LD_INT 3
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: LD_INT 3
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: LD_INT 2
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 3
52041: PUSH
52042: LD_INT 2
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 3
52051: PUSH
52052: LD_INT 3
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 2
52061: PUSH
52062: LD_INT 3
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: LD_INT 3
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: LD_INT 3
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: LD_INT 2
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 3
52102: NEG
52103: PUSH
52104: LD_INT 2
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 3
52114: NEG
52115: PUSH
52116: LD_INT 3
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52155: LD_ADDR_VAR 0 46
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: LD_INT 2
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: LD_INT 2
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 2
52321: NEG
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 2
52332: NEG
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 3
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 3
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: LD_INT 2
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 3
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 3
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: LD_INT 3
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: LD_INT 3
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 2
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 3
52451: NEG
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 3
52462: NEG
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52503: LD_ADDR_VAR 0 47
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: LD_INT 2
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 2
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 2
52630: NEG
52631: PUSH
52632: LD_INT 2
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52654: LD_ADDR_VAR 0 48
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: LD_INT 2
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 2
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52801: LD_ADDR_VAR 0 49
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 2
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 2
52913: PUSH
52914: LD_INT 2
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: LD_INT 2
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52945: LD_ADDR_VAR 0 50
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 2
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: LD_INT 2
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: LD_INT 2
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: LD_INT 1
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53089: LD_ADDR_VAR 0 51
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: LD_INT 2
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 2
53201: NEG
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 2
53212: NEG
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53236: LD_ADDR_VAR 0 52
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: LD_INT 2
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 2
53340: NEG
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 2
53351: NEG
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: LD_INT 2
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53387: LD_ADDR_VAR 0 53
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 2
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 2
53522: PUSH
53523: LD_INT 2
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: LD_INT 2
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: LD_INT 2
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 2
53563: NEG
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 2
53574: NEG
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: LD_INT 2
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53617: LD_ADDR_VAR 0 54
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: LD_INT 2
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: LD_INT 2
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 2
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: NEG
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: LD_INT 2
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53847: LD_ADDR_VAR 0 55
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 2
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 2
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: LD_INT 2
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: NEG
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 2
54046: NEG
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54077: LD_ADDR_VAR 0 56
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: LD_INT 2
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: LD_INT 2
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 2
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 2
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 2
54212: PUSH
54213: LD_INT 2
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 2
54253: NEG
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 2
54264: NEG
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 2
54276: NEG
54277: PUSH
54278: LD_INT 2
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54307: LD_ADDR_VAR 0 57
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: LD_INT 2
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: LD_INT 2
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 2
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 2
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 2
54442: PUSH
54443: LD_INT 2
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 1
54472: NEG
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 2
54494: NEG
54495: PUSH
54496: LD_INT 1
54498: NEG
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: LD_INT 2
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54537: LD_ADDR_VAR 0 58
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: LD_INT 2
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 0
54630: PUSH
54631: LD_INT 2
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 2
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 2
54672: PUSH
54673: LD_INT 2
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: LD_INT 2
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: NEG
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: NEG
54737: PUSH
54738: LD_INT 2
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54767: LD_ADDR_VAR 0 59
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54855: LD_ADDR_VAR 0 60
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54943: LD_ADDR_VAR 0 61
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 1
55012: NEG
55013: PUSH
55014: LD_INT 1
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55031: LD_ADDR_VAR 0 62
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55119: LD_ADDR_VAR 0 63
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55207: LD_ADDR_VAR 0 64
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: ST_TO_ADDR
// end ; 1 :
55295: GO 61192
55297: LD_INT 1
55299: DOUBLE
55300: EQUAL
55301: IFTRUE 55305
55303: GO 57928
55305: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55306: LD_ADDR_VAR 0 11
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: LD_INT 3
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: LD_INT 3
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: LD_INT 2
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: LIST
55349: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55350: LD_ADDR_VAR 0 12
55354: PUSH
55355: LD_INT 2
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 3
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 3
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: LIST
55390: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55391: LD_ADDR_VAR 0 13
55395: PUSH
55396: LD_INT 3
55398: PUSH
55399: LD_INT 2
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 3
55408: PUSH
55409: LD_INT 3
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 2
55418: PUSH
55419: LD_INT 3
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: LIST
55430: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55431: LD_ADDR_VAR 0 14
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: LD_INT 3
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: LD_INT 3
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: LIST
55471: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55472: LD_ADDR_VAR 0 15
55476: PUSH
55477: LD_INT 2
55479: NEG
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 3
55490: NEG
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 3
55501: NEG
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: LIST
55515: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55516: LD_ADDR_VAR 0 16
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: LD_INT 3
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 3
55535: NEG
55536: PUSH
55537: LD_INT 2
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 3
55547: NEG
55548: PUSH
55549: LD_INT 3
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: LIST
55561: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55562: LD_ADDR_VAR 0 17
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: LD_INT 3
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: LD_INT 3
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: LD_INT 2
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: LIST
55605: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55606: LD_ADDR_VAR 0 18
55610: PUSH
55611: LD_INT 2
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 3
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 3
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: LIST
55646: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55647: LD_ADDR_VAR 0 19
55651: PUSH
55652: LD_INT 3
55654: PUSH
55655: LD_INT 2
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 3
55664: PUSH
55665: LD_INT 3
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: LD_INT 3
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: LIST
55686: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55687: LD_ADDR_VAR 0 20
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: LD_INT 3
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: LD_INT 3
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: LIST
55727: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55728: LD_ADDR_VAR 0 21
55732: PUSH
55733: LD_INT 2
55735: NEG
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 3
55746: NEG
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 3
55757: NEG
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: LIST
55771: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55772: LD_ADDR_VAR 0 22
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: LD_INT 3
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 3
55791: NEG
55792: PUSH
55793: LD_INT 2
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 3
55803: NEG
55804: PUSH
55805: LD_INT 3
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: LIST
55817: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55818: LD_ADDR_VAR 0 23
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 3
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: LD_INT 4
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: LD_INT 3
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: LIST
55861: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55862: LD_ADDR_VAR 0 24
55866: PUSH
55867: LD_INT 3
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 3
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 4
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: LIST
55902: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55903: LD_ADDR_VAR 0 25
55907: PUSH
55908: LD_INT 3
55910: PUSH
55911: LD_INT 3
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 4
55920: PUSH
55921: LD_INT 3
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 3
55930: PUSH
55931: LD_INT 4
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: LIST
55942: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55943: LD_ADDR_VAR 0 26
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 3
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: LD_INT 4
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: LD_INT 3
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: LIST
55983: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55984: LD_ADDR_VAR 0 27
55988: PUSH
55989: LD_INT 3
55991: NEG
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 3
56002: NEG
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 4
56013: NEG
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: LIST
56027: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56028: LD_ADDR_VAR 0 28
56032: PUSH
56033: LD_INT 3
56035: NEG
56036: PUSH
56037: LD_INT 3
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 3
56047: NEG
56048: PUSH
56049: LD_INT 4
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 4
56059: NEG
56060: PUSH
56061: LD_INT 3
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: LIST
56073: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56074: LD_ADDR_VAR 0 29
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: LD_INT 3
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: LD_INT 3
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: LD_INT 2
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: LD_INT 4
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: LD_INT 4
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: LD_INT 5
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: LD_INT 5
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: LD_INT 4
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: NEG
56184: PUSH
56185: LD_INT 6
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: LD_INT 6
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: LD_INT 5
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56229: LD_ADDR_VAR 0 30
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 3
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 3
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 4
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 4
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 4
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 5
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 5
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 5
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 6
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 6
56350: PUSH
56351: LD_INT 1
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56372: LD_ADDR_VAR 0 31
56376: PUSH
56377: LD_INT 3
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 3
56389: PUSH
56390: LD_INT 3
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 2
56399: PUSH
56400: LD_INT 3
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 4
56409: PUSH
56410: LD_INT 3
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 4
56419: PUSH
56420: LD_INT 4
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 3
56429: PUSH
56430: LD_INT 4
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 5
56439: PUSH
56440: LD_INT 4
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 5
56449: PUSH
56450: LD_INT 5
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 4
56459: PUSH
56460: LD_INT 5
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 6
56469: PUSH
56470: LD_INT 5
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 6
56479: PUSH
56480: LD_INT 6
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 5
56489: PUSH
56490: LD_INT 6
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56511: LD_ADDR_VAR 0 32
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: LD_INT 3
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: LD_INT 3
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: LD_INT 4
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: LD_INT 4
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: LD_INT 3
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: LD_INT 5
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: LD_INT 5
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: LD_INT 4
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: LD_INT 6
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: LD_INT 6
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: LD_INT 5
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56654: LD_ADDR_VAR 0 33
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 3
56672: NEG
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 3
56683: NEG
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 3
56695: NEG
56696: PUSH
56697: LD_INT 1
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 4
56706: NEG
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 4
56717: NEG
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 4
56729: NEG
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 5
56740: NEG
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 5
56751: NEG
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 5
56763: NEG
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 6
56774: NEG
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 6
56785: NEG
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56809: LD_ADDR_VAR 0 34
56813: PUSH
56814: LD_INT 2
56816: NEG
56817: PUSH
56818: LD_INT 3
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 3
56828: NEG
56829: PUSH
56830: LD_INT 2
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 3
56840: NEG
56841: PUSH
56842: LD_INT 3
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 3
56852: NEG
56853: PUSH
56854: LD_INT 4
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 4
56864: NEG
56865: PUSH
56866: LD_INT 3
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 4
56876: NEG
56877: PUSH
56878: LD_INT 4
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 4
56888: NEG
56889: PUSH
56890: LD_INT 5
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 5
56900: NEG
56901: PUSH
56902: LD_INT 4
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 5
56912: NEG
56913: PUSH
56914: LD_INT 5
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 5
56924: NEG
56925: PUSH
56926: LD_INT 6
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 6
56936: NEG
56937: PUSH
56938: LD_INT 5
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 6
56948: NEG
56949: PUSH
56950: LD_INT 6
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56972: LD_ADDR_VAR 0 41
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 2
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: LD_INT 3
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: LD_INT 2
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: LIST
57015: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57016: LD_ADDR_VAR 0 42
57020: PUSH
57021: LD_INT 2
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 3
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: LIST
57056: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57057: LD_ADDR_VAR 0 43
57061: PUSH
57062: LD_INT 2
57064: PUSH
57065: LD_INT 2
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 3
57074: PUSH
57075: LD_INT 2
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: LD_INT 3
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: LIST
57096: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57097: LD_ADDR_VAR 0 44
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: LD_INT 3
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: LIST
57137: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57138: LD_ADDR_VAR 0 45
57142: PUSH
57143: LD_INT 2
57145: NEG
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: NEG
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 3
57167: NEG
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: LIST
57181: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57182: LD_ADDR_VAR 0 46
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: LD_INT 2
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: LD_INT 3
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 3
57213: NEG
57214: PUSH
57215: LD_INT 2
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: LIST
57227: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57228: LD_ADDR_VAR 0 47
57232: PUSH
57233: LD_INT 2
57235: NEG
57236: PUSH
57237: LD_INT 3
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: LD_INT 3
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57261: LD_ADDR_VAR 0 48
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: LD_INT 2
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 2
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57292: LD_ADDR_VAR 0 49
57296: PUSH
57297: LD_INT 3
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 3
57309: PUSH
57310: LD_INT 2
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57321: LD_ADDR_VAR 0 50
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: LD_INT 3
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: LD_INT 3
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57350: LD_ADDR_VAR 0 51
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 2
57368: NEG
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57381: LD_ADDR_VAR 0 52
57385: PUSH
57386: LD_INT 3
57388: NEG
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 3
57400: NEG
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57414: LD_ADDR_VAR 0 53
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: LD_INT 3
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 3
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: LD_INT 2
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: LIST
57457: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57458: LD_ADDR_VAR 0 54
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 3
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 3
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: LIST
57498: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57499: LD_ADDR_VAR 0 55
57503: PUSH
57504: LD_INT 3
57506: PUSH
57507: LD_INT 2
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 3
57516: PUSH
57517: LD_INT 3
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 2
57526: PUSH
57527: LD_INT 3
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: LIST
57538: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57539: LD_ADDR_VAR 0 56
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: LD_INT 3
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 3
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: LIST
57579: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57580: LD_ADDR_VAR 0 57
57584: PUSH
57585: LD_INT 2
57587: NEG
57588: PUSH
57589: LD_INT 1
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 3
57598: NEG
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 3
57609: NEG
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: LIST
57623: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57624: LD_ADDR_VAR 0 58
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: LD_INT 3
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 3
57643: NEG
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 3
57655: NEG
57656: PUSH
57657: LD_INT 3
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: LIST
57669: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57670: LD_ADDR_VAR 0 59
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: LD_INT 2
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: LD_INT 2
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: LIST
57713: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57714: LD_ADDR_VAR 0 60
57718: PUSH
57719: LD_INT 1
57721: PUSH
57722: LD_INT 1
57724: NEG
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 2
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: LIST
57754: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57755: LD_ADDR_VAR 0 61
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 2
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: LD_INT 2
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: LIST
57794: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57795: LD_ADDR_VAR 0 62
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: LD_INT 2
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: LIST
57835: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57836: LD_ADDR_VAR 0 63
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 2
57865: NEG
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: LIST
57879: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57880: LD_ADDR_VAR 0 64
57884: PUSH
57885: LD_INT 1
57887: NEG
57888: PUSH
57889: LD_INT 2
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 2
57899: NEG
57900: PUSH
57901: LD_INT 1
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 2
57911: NEG
57912: PUSH
57913: LD_INT 2
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: LIST
57925: ST_TO_ADDR
// end ; 2 :
57926: GO 61192
57928: LD_INT 2
57930: DOUBLE
57931: EQUAL
57932: IFTRUE 57936
57934: GO 61191
57936: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57937: LD_ADDR_VAR 0 29
57941: PUSH
57942: LD_INT 4
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 4
57954: PUSH
57955: LD_INT 1
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 5
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 5
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 4
57985: PUSH
57986: LD_INT 1
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 3
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 3
58005: PUSH
58006: LD_INT 1
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 3
58016: PUSH
58017: LD_INT 2
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 5
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 3
58037: PUSH
58038: LD_INT 3
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 3
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 4
58057: PUSH
58058: LD_INT 3
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 4
58067: PUSH
58068: LD_INT 4
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 3
58077: PUSH
58078: LD_INT 4
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 2
58087: PUSH
58088: LD_INT 3
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 2
58097: PUSH
58098: LD_INT 2
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 4
58107: PUSH
58108: LD_INT 2
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 2
58117: PUSH
58118: LD_INT 4
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: LD_INT 4
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: LD_INT 3
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: LD_INT 4
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 1
58157: PUSH
58158: LD_INT 5
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: LD_INT 5
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 1
58177: NEG
58178: PUSH
58179: LD_INT 4
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: NEG
58189: PUSH
58190: LD_INT 3
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 2
58199: PUSH
58200: LD_INT 5
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: LD_INT 3
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 3
58220: NEG
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 3
58231: NEG
58232: PUSH
58233: LD_INT 1
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 3
58265: NEG
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 4
58276: NEG
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 4
58287: NEG
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 4
58299: NEG
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 2
58311: NEG
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 4
58322: NEG
58323: PUSH
58324: LD_INT 4
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 4
58334: NEG
58335: PUSH
58336: LD_INT 5
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 3
58346: NEG
58347: PUSH
58348: LD_INT 4
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 3
58358: NEG
58359: PUSH
58360: LD_INT 3
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 4
58370: NEG
58371: PUSH
58372: LD_INT 3
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 5
58382: NEG
58383: PUSH
58384: LD_INT 4
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 5
58394: NEG
58395: PUSH
58396: LD_INT 5
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 3
58406: NEG
58407: PUSH
58408: LD_INT 5
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 5
58418: NEG
58419: PUSH
58420: LD_INT 3
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58475: LD_ADDR_VAR 0 30
58479: PUSH
58480: LD_INT 4
58482: PUSH
58483: LD_INT 4
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 4
58492: PUSH
58493: LD_INT 3
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 5
58502: PUSH
58503: LD_INT 4
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 5
58512: PUSH
58513: LD_INT 5
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 4
58522: PUSH
58523: LD_INT 5
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 3
58532: PUSH
58533: LD_INT 4
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 3
58542: PUSH
58543: LD_INT 3
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 5
58552: PUSH
58553: LD_INT 3
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 3
58562: PUSH
58563: LD_INT 5
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: LD_INT 3
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: LD_INT 2
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 3
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: LD_INT 4
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: LD_INT 4
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: LD_INT 3
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: LD_INT 2
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 2
58644: PUSH
58645: LD_INT 4
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 2
58654: NEG
58655: PUSH
58656: LD_INT 2
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 4
58665: NEG
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 4
58676: NEG
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 3
58688: NEG
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 3
58699: NEG
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 4
58710: NEG
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 5
58721: NEG
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 5
58732: NEG
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 5
58744: NEG
58745: PUSH
58746: LD_INT 2
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 3
58756: NEG
58757: PUSH
58758: LD_INT 2
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 3
58767: NEG
58768: PUSH
58769: LD_INT 3
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 3
58779: NEG
58780: PUSH
58781: LD_INT 4
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 2
58791: NEG
58792: PUSH
58793: LD_INT 3
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: LD_INT 2
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 3
58815: NEG
58816: PUSH
58817: LD_INT 2
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 4
58827: NEG
58828: PUSH
58829: LD_INT 3
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 4
58839: NEG
58840: PUSH
58841: LD_INT 4
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 2
58851: NEG
58852: PUSH
58853: LD_INT 4
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 4
58863: NEG
58864: PUSH
58865: LD_INT 2
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: LD_INT 4
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 0
58886: PUSH
58887: LD_INT 5
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: LD_INT 4
58900: NEG
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: LD_INT 3
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: LD_INT 3
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: LD_INT 4
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: LD_INT 5
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: LD_INT 3
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: LD_INT 5
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59022: LD_ADDR_VAR 0 31
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: LD_INT 4
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 0
59039: PUSH
59040: LD_INT 3
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: LD_INT 4
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 1
59059: PUSH
59060: LD_INT 5
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: LD_INT 5
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: LD_INT 4
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 1
59090: NEG
59091: PUSH
59092: LD_INT 3
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 2
59101: PUSH
59102: LD_INT 5
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 2
59111: NEG
59112: PUSH
59113: LD_INT 3
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 3
59122: NEG
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 3
59133: NEG
59134: PUSH
59135: LD_INT 1
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 2
59145: NEG
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 3
59167: NEG
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 4
59178: NEG
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 4
59189: NEG
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 4
59201: NEG
59202: PUSH
59203: LD_INT 2
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 2
59213: NEG
59214: PUSH
59215: LD_INT 2
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 4
59224: NEG
59225: PUSH
59226: LD_INT 4
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 4
59236: NEG
59237: PUSH
59238: LD_INT 5
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 3
59248: NEG
59249: PUSH
59250: LD_INT 4
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 3
59260: NEG
59261: PUSH
59262: LD_INT 3
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 4
59272: NEG
59273: PUSH
59274: LD_INT 3
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 5
59284: NEG
59285: PUSH
59286: LD_INT 4
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 5
59296: NEG
59297: PUSH
59298: LD_INT 5
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 3
59308: NEG
59309: PUSH
59310: LD_INT 5
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 5
59320: NEG
59321: PUSH
59322: LD_INT 3
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: LD_INT 3
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: LD_INT 4
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: LD_INT 3
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 1
59387: NEG
59388: PUSH
59389: LD_INT 3
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: LD_INT 4
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 2
59411: PUSH
59412: LD_INT 2
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 2
59422: NEG
59423: PUSH
59424: LD_INT 4
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 4
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 4
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 5
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 5
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 4
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 3
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 3
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 3
59506: PUSH
59507: LD_INT 2
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 5
59517: PUSH
59518: LD_INT 2
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59572: LD_ADDR_VAR 0 32
59576: PUSH
59577: LD_INT 4
59579: NEG
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 4
59590: NEG
59591: PUSH
59592: LD_INT 1
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 3
59602: NEG
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 3
59613: NEG
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 4
59624: NEG
59625: PUSH
59626: LD_INT 1
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 5
59635: NEG
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 5
59646: NEG
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 5
59658: NEG
59659: PUSH
59660: LD_INT 2
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 3
59670: NEG
59671: PUSH
59672: LD_INT 2
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 3
59681: NEG
59682: PUSH
59683: LD_INT 3
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 3
59693: NEG
59694: PUSH
59695: LD_INT 4
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 2
59705: NEG
59706: PUSH
59707: LD_INT 3
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 2
59717: NEG
59718: PUSH
59719: LD_INT 2
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 3
59729: NEG
59730: PUSH
59731: LD_INT 2
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 4
59741: NEG
59742: PUSH
59743: LD_INT 3
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 4
59753: NEG
59754: PUSH
59755: LD_INT 4
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: LD_INT 4
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 4
59777: NEG
59778: PUSH
59779: LD_INT 2
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: LD_INT 4
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: LD_INT 5
59803: NEG
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: PUSH
59812: LD_INT 4
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 1
59822: PUSH
59823: LD_INT 3
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 0
59833: PUSH
59834: LD_INT 3
59836: NEG
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: LD_INT 4
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 1
59856: NEG
59857: PUSH
59858: LD_INT 5
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 2
59868: PUSH
59869: LD_INT 3
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 2
59879: NEG
59880: PUSH
59881: LD_INT 5
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 3
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 3
59901: PUSH
59902: LD_INT 1
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 4
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 4
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 3
59932: PUSH
59933: LD_INT 1
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 2
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 2
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 2
59963: PUSH
59964: LD_INT 2
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 4
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 4
59984: PUSH
59985: LD_INT 4
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 4
59994: PUSH
59995: LD_INT 3
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 5
60004: PUSH
60005: LD_INT 4
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 5
60014: PUSH
60015: LD_INT 5
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 4
60024: PUSH
60025: LD_INT 5
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 3
60034: PUSH
60035: LD_INT 4
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 3
60044: PUSH
60045: LD_INT 3
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 5
60054: PUSH
60055: LD_INT 3
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 3
60064: PUSH
60065: LD_INT 5
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60119: LD_ADDR_VAR 0 33
60123: PUSH
60124: LD_INT 4
60126: NEG
60127: PUSH
60128: LD_INT 4
60130: NEG
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 4
60138: NEG
60139: PUSH
60140: LD_INT 5
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 3
60150: NEG
60151: PUSH
60152: LD_INT 4
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 3
60162: NEG
60163: PUSH
60164: LD_INT 3
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 4
60174: NEG
60175: PUSH
60176: LD_INT 3
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 5
60186: NEG
60187: PUSH
60188: LD_INT 4
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 5
60198: NEG
60199: PUSH
60200: LD_INT 5
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 3
60210: NEG
60211: PUSH
60212: LD_INT 5
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 5
60222: NEG
60223: PUSH
60224: LD_INT 3
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: LD_INT 3
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: LD_INT 4
60248: NEG
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: LD_INT 3
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: LD_INT 2
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: LD_INT 2
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: LD_INT 3
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: LD_INT 4
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 2
60313: PUSH
60314: LD_INT 2
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 2
60324: NEG
60325: PUSH
60326: LD_INT 4
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 4
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 4
60346: PUSH
60347: LD_INT 1
60349: NEG
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 5
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 5
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 4
60377: PUSH
60378: LD_INT 1
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 3
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 3
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 3
60408: PUSH
60409: LD_INT 2
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 5
60419: PUSH
60420: LD_INT 2
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 3
60429: PUSH
60430: LD_INT 3
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 3
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 4
60449: PUSH
60450: LD_INT 3
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 4
60459: PUSH
60460: LD_INT 4
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 3
60469: PUSH
60470: LD_INT 4
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 2
60479: PUSH
60480: LD_INT 3
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 2
60489: PUSH
60490: LD_INT 2
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 4
60499: PUSH
60500: LD_INT 2
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 2
60509: PUSH
60510: LD_INT 4
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 0
60519: PUSH
60520: LD_INT 4
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: LD_INT 3
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: PUSH
60540: LD_INT 4
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: PUSH
60550: LD_INT 5
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 0
60559: PUSH
60560: LD_INT 5
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 1
60569: NEG
60570: PUSH
60571: LD_INT 4
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: LD_INT 3
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 2
60591: PUSH
60592: LD_INT 5
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 2
60601: NEG
60602: PUSH
60603: LD_INT 3
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60657: LD_ADDR_VAR 0 34
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: LD_INT 4
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: LD_INT 5
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: LD_INT 4
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: LD_INT 3
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 0
60708: PUSH
60709: LD_INT 3
60711: NEG
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: LD_INT 4
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: NEG
60732: PUSH
60733: LD_INT 5
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: LD_INT 3
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 2
60754: NEG
60755: PUSH
60756: LD_INT 5
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 3
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 3
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 4
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 4
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 3
60807: PUSH
60808: LD_INT 1
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 2
60817: PUSH
60818: LD_INT 0
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 2
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 2
60838: PUSH
60839: LD_INT 2
60841: NEG
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 4
60849: PUSH
60850: LD_INT 2
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 4
60859: PUSH
60860: LD_INT 4
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 4
60869: PUSH
60870: LD_INT 3
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 5
60879: PUSH
60880: LD_INT 4
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 5
60889: PUSH
60890: LD_INT 5
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 4
60899: PUSH
60900: LD_INT 5
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 3
60909: PUSH
60910: LD_INT 4
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 3
60919: PUSH
60920: LD_INT 3
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 5
60929: PUSH
60930: LD_INT 3
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 3
60939: PUSH
60940: LD_INT 5
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: LD_INT 3
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: LD_INT 2
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: LD_INT 3
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 1
60979: PUSH
60980: LD_INT 4
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: LD_INT 4
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: LD_INT 3
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: LD_INT 2
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 2
61021: PUSH
61022: LD_INT 4
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 2
61031: NEG
61032: PUSH
61033: LD_INT 2
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 4
61042: NEG
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 4
61053: NEG
61054: PUSH
61055: LD_INT 1
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 3
61065: NEG
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 3
61076: NEG
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 4
61087: NEG
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 5
61098: NEG
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 5
61109: NEG
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 5
61121: NEG
61122: PUSH
61123: LD_INT 2
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 3
61133: NEG
61134: PUSH
61135: LD_INT 2
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: ST_TO_ADDR
// end ; end ;
61189: GO 61192
61191: POP
// case btype of b_depot , b_warehouse :
61192: LD_VAR 0 1
61196: PUSH
61197: LD_INT 0
61199: DOUBLE
61200: EQUAL
61201: IFTRUE 61211
61203: LD_INT 1
61205: DOUBLE
61206: EQUAL
61207: IFTRUE 61211
61209: GO 61412
61211: POP
// case nation of nation_american :
61212: LD_VAR 0 5
61216: PUSH
61217: LD_INT 1
61219: DOUBLE
61220: EQUAL
61221: IFTRUE 61225
61223: GO 61281
61225: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61226: LD_ADDR_VAR 0 9
61230: PUSH
61231: LD_VAR 0 11
61235: PUSH
61236: LD_VAR 0 12
61240: PUSH
61241: LD_VAR 0 13
61245: PUSH
61246: LD_VAR 0 14
61250: PUSH
61251: LD_VAR 0 15
61255: PUSH
61256: LD_VAR 0 16
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: PUSH
61269: LD_VAR 0 4
61273: PUSH
61274: LD_INT 1
61276: PLUS
61277: ARRAY
61278: ST_TO_ADDR
61279: GO 61410
61281: LD_INT 2
61283: DOUBLE
61284: EQUAL
61285: IFTRUE 61289
61287: GO 61345
61289: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61290: LD_ADDR_VAR 0 9
61294: PUSH
61295: LD_VAR 0 17
61299: PUSH
61300: LD_VAR 0 18
61304: PUSH
61305: LD_VAR 0 19
61309: PUSH
61310: LD_VAR 0 20
61314: PUSH
61315: LD_VAR 0 21
61319: PUSH
61320: LD_VAR 0 22
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: PUSH
61333: LD_VAR 0 4
61337: PUSH
61338: LD_INT 1
61340: PLUS
61341: ARRAY
61342: ST_TO_ADDR
61343: GO 61410
61345: LD_INT 3
61347: DOUBLE
61348: EQUAL
61349: IFTRUE 61353
61351: GO 61409
61353: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61354: LD_ADDR_VAR 0 9
61358: PUSH
61359: LD_VAR 0 23
61363: PUSH
61364: LD_VAR 0 24
61368: PUSH
61369: LD_VAR 0 25
61373: PUSH
61374: LD_VAR 0 26
61378: PUSH
61379: LD_VAR 0 27
61383: PUSH
61384: LD_VAR 0 28
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: PUSH
61397: LD_VAR 0 4
61401: PUSH
61402: LD_INT 1
61404: PLUS
61405: ARRAY
61406: ST_TO_ADDR
61407: GO 61410
61409: POP
61410: GO 61965
61412: LD_INT 2
61414: DOUBLE
61415: EQUAL
61416: IFTRUE 61426
61418: LD_INT 3
61420: DOUBLE
61421: EQUAL
61422: IFTRUE 61426
61424: GO 61482
61426: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61427: LD_ADDR_VAR 0 9
61431: PUSH
61432: LD_VAR 0 29
61436: PUSH
61437: LD_VAR 0 30
61441: PUSH
61442: LD_VAR 0 31
61446: PUSH
61447: LD_VAR 0 32
61451: PUSH
61452: LD_VAR 0 33
61456: PUSH
61457: LD_VAR 0 34
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: PUSH
61470: LD_VAR 0 4
61474: PUSH
61475: LD_INT 1
61477: PLUS
61478: ARRAY
61479: ST_TO_ADDR
61480: GO 61965
61482: LD_INT 16
61484: DOUBLE
61485: EQUAL
61486: IFTRUE 61544
61488: LD_INT 17
61490: DOUBLE
61491: EQUAL
61492: IFTRUE 61544
61494: LD_INT 18
61496: DOUBLE
61497: EQUAL
61498: IFTRUE 61544
61500: LD_INT 19
61502: DOUBLE
61503: EQUAL
61504: IFTRUE 61544
61506: LD_INT 22
61508: DOUBLE
61509: EQUAL
61510: IFTRUE 61544
61512: LD_INT 20
61514: DOUBLE
61515: EQUAL
61516: IFTRUE 61544
61518: LD_INT 21
61520: DOUBLE
61521: EQUAL
61522: IFTRUE 61544
61524: LD_INT 23
61526: DOUBLE
61527: EQUAL
61528: IFTRUE 61544
61530: LD_INT 24
61532: DOUBLE
61533: EQUAL
61534: IFTRUE 61544
61536: LD_INT 25
61538: DOUBLE
61539: EQUAL
61540: IFTRUE 61544
61542: GO 61600
61544: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61545: LD_ADDR_VAR 0 9
61549: PUSH
61550: LD_VAR 0 35
61554: PUSH
61555: LD_VAR 0 36
61559: PUSH
61560: LD_VAR 0 37
61564: PUSH
61565: LD_VAR 0 38
61569: PUSH
61570: LD_VAR 0 39
61574: PUSH
61575: LD_VAR 0 40
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: PUSH
61588: LD_VAR 0 4
61592: PUSH
61593: LD_INT 1
61595: PLUS
61596: ARRAY
61597: ST_TO_ADDR
61598: GO 61965
61600: LD_INT 6
61602: DOUBLE
61603: EQUAL
61604: IFTRUE 61656
61606: LD_INT 7
61608: DOUBLE
61609: EQUAL
61610: IFTRUE 61656
61612: LD_INT 8
61614: DOUBLE
61615: EQUAL
61616: IFTRUE 61656
61618: LD_INT 13
61620: DOUBLE
61621: EQUAL
61622: IFTRUE 61656
61624: LD_INT 12
61626: DOUBLE
61627: EQUAL
61628: IFTRUE 61656
61630: LD_INT 15
61632: DOUBLE
61633: EQUAL
61634: IFTRUE 61656
61636: LD_INT 11
61638: DOUBLE
61639: EQUAL
61640: IFTRUE 61656
61642: LD_INT 14
61644: DOUBLE
61645: EQUAL
61646: IFTRUE 61656
61648: LD_INT 10
61650: DOUBLE
61651: EQUAL
61652: IFTRUE 61656
61654: GO 61712
61656: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61657: LD_ADDR_VAR 0 9
61661: PUSH
61662: LD_VAR 0 41
61666: PUSH
61667: LD_VAR 0 42
61671: PUSH
61672: LD_VAR 0 43
61676: PUSH
61677: LD_VAR 0 44
61681: PUSH
61682: LD_VAR 0 45
61686: PUSH
61687: LD_VAR 0 46
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: PUSH
61700: LD_VAR 0 4
61704: PUSH
61705: LD_INT 1
61707: PLUS
61708: ARRAY
61709: ST_TO_ADDR
61710: GO 61965
61712: LD_INT 36
61714: DOUBLE
61715: EQUAL
61716: IFTRUE 61720
61718: GO 61776
61720: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61721: LD_ADDR_VAR 0 9
61725: PUSH
61726: LD_VAR 0 47
61730: PUSH
61731: LD_VAR 0 48
61735: PUSH
61736: LD_VAR 0 49
61740: PUSH
61741: LD_VAR 0 50
61745: PUSH
61746: LD_VAR 0 51
61750: PUSH
61751: LD_VAR 0 52
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: PUSH
61764: LD_VAR 0 4
61768: PUSH
61769: LD_INT 1
61771: PLUS
61772: ARRAY
61773: ST_TO_ADDR
61774: GO 61965
61776: LD_INT 4
61778: DOUBLE
61779: EQUAL
61780: IFTRUE 61802
61782: LD_INT 5
61784: DOUBLE
61785: EQUAL
61786: IFTRUE 61802
61788: LD_INT 34
61790: DOUBLE
61791: EQUAL
61792: IFTRUE 61802
61794: LD_INT 37
61796: DOUBLE
61797: EQUAL
61798: IFTRUE 61802
61800: GO 61858
61802: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61803: LD_ADDR_VAR 0 9
61807: PUSH
61808: LD_VAR 0 53
61812: PUSH
61813: LD_VAR 0 54
61817: PUSH
61818: LD_VAR 0 55
61822: PUSH
61823: LD_VAR 0 56
61827: PUSH
61828: LD_VAR 0 57
61832: PUSH
61833: LD_VAR 0 58
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: PUSH
61846: LD_VAR 0 4
61850: PUSH
61851: LD_INT 1
61853: PLUS
61854: ARRAY
61855: ST_TO_ADDR
61856: GO 61965
61858: LD_INT 31
61860: DOUBLE
61861: EQUAL
61862: IFTRUE 61908
61864: LD_INT 32
61866: DOUBLE
61867: EQUAL
61868: IFTRUE 61908
61870: LD_INT 33
61872: DOUBLE
61873: EQUAL
61874: IFTRUE 61908
61876: LD_INT 27
61878: DOUBLE
61879: EQUAL
61880: IFTRUE 61908
61882: LD_INT 26
61884: DOUBLE
61885: EQUAL
61886: IFTRUE 61908
61888: LD_INT 28
61890: DOUBLE
61891: EQUAL
61892: IFTRUE 61908
61894: LD_INT 29
61896: DOUBLE
61897: EQUAL
61898: IFTRUE 61908
61900: LD_INT 30
61902: DOUBLE
61903: EQUAL
61904: IFTRUE 61908
61906: GO 61964
61908: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61909: LD_ADDR_VAR 0 9
61913: PUSH
61914: LD_VAR 0 59
61918: PUSH
61919: LD_VAR 0 60
61923: PUSH
61924: LD_VAR 0 61
61928: PUSH
61929: LD_VAR 0 62
61933: PUSH
61934: LD_VAR 0 63
61938: PUSH
61939: LD_VAR 0 64
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: PUSH
61952: LD_VAR 0 4
61956: PUSH
61957: LD_INT 1
61959: PLUS
61960: ARRAY
61961: ST_TO_ADDR
61962: GO 61965
61964: POP
// temp_list2 = [ ] ;
61965: LD_ADDR_VAR 0 10
61969: PUSH
61970: EMPTY
61971: ST_TO_ADDR
// for i in temp_list do
61972: LD_ADDR_VAR 0 8
61976: PUSH
61977: LD_VAR 0 9
61981: PUSH
61982: FOR_IN
61983: IFFALSE 62035
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61985: LD_ADDR_VAR 0 10
61989: PUSH
61990: LD_VAR 0 10
61994: PUSH
61995: LD_VAR 0 8
61999: PUSH
62000: LD_INT 1
62002: ARRAY
62003: PUSH
62004: LD_VAR 0 2
62008: PLUS
62009: PUSH
62010: LD_VAR 0 8
62014: PUSH
62015: LD_INT 2
62017: ARRAY
62018: PUSH
62019: LD_VAR 0 3
62023: PLUS
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: EMPTY
62030: LIST
62031: ADD
62032: ST_TO_ADDR
62033: GO 61982
62035: POP
62036: POP
// result = temp_list2 ;
62037: LD_ADDR_VAR 0 7
62041: PUSH
62042: LD_VAR 0 10
62046: ST_TO_ADDR
// end ;
62047: LD_VAR 0 7
62051: RET
// export function EnemyInRange ( unit , dist ) ; begin
62052: LD_INT 0
62054: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62055: LD_ADDR_VAR 0 3
62059: PUSH
62060: LD_VAR 0 1
62064: PPUSH
62065: CALL_OW 255
62069: PPUSH
62070: LD_VAR 0 1
62074: PPUSH
62075: CALL_OW 250
62079: PPUSH
62080: LD_VAR 0 1
62084: PPUSH
62085: CALL_OW 251
62089: PPUSH
62090: LD_VAR 0 2
62094: PPUSH
62095: CALL 35454 0 4
62099: PUSH
62100: LD_INT 4
62102: ARRAY
62103: ST_TO_ADDR
// end ;
62104: LD_VAR 0 3
62108: RET
// export function PlayerSeeMe ( unit ) ; begin
62109: LD_INT 0
62111: PPUSH
// result := See ( your_side , unit ) ;
62112: LD_ADDR_VAR 0 2
62116: PUSH
62117: LD_OWVAR 2
62121: PPUSH
62122: LD_VAR 0 1
62126: PPUSH
62127: CALL_OW 292
62131: ST_TO_ADDR
// end ;
62132: LD_VAR 0 2
62136: RET
// export function ReverseDir ( unit ) ; begin
62137: LD_INT 0
62139: PPUSH
// if not unit then
62140: LD_VAR 0 1
62144: NOT
62145: IFFALSE 62149
// exit ;
62147: GO 62172
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62149: LD_ADDR_VAR 0 2
62153: PUSH
62154: LD_VAR 0 1
62158: PPUSH
62159: CALL_OW 254
62163: PUSH
62164: LD_INT 3
62166: PLUS
62167: PUSH
62168: LD_INT 6
62170: MOD
62171: ST_TO_ADDR
// end ;
62172: LD_VAR 0 2
62176: RET
// export function ReverseArray ( array ) ; var i ; begin
62177: LD_INT 0
62179: PPUSH
62180: PPUSH
// if not array then
62181: LD_VAR 0 1
62185: NOT
62186: IFFALSE 62190
// exit ;
62188: GO 62245
// result := [ ] ;
62190: LD_ADDR_VAR 0 2
62194: PUSH
62195: EMPTY
62196: ST_TO_ADDR
// for i := array downto 1 do
62197: LD_ADDR_VAR 0 3
62201: PUSH
62202: DOUBLE
62203: LD_VAR 0 1
62207: INC
62208: ST_TO_ADDR
62209: LD_INT 1
62211: PUSH
62212: FOR_DOWNTO
62213: IFFALSE 62243
// result := Join ( result , array [ i ] ) ;
62215: LD_ADDR_VAR 0 2
62219: PUSH
62220: LD_VAR 0 2
62224: PPUSH
62225: LD_VAR 0 1
62229: PUSH
62230: LD_VAR 0 3
62234: ARRAY
62235: PPUSH
62236: CALL 66889 0 2
62240: ST_TO_ADDR
62241: GO 62212
62243: POP
62244: POP
// end ;
62245: LD_VAR 0 2
62249: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62250: LD_INT 0
62252: PPUSH
62253: PPUSH
62254: PPUSH
62255: PPUSH
62256: PPUSH
62257: PPUSH
// if not unit or not hexes then
62258: LD_VAR 0 1
62262: NOT
62263: PUSH
62264: LD_VAR 0 2
62268: NOT
62269: OR
62270: IFFALSE 62274
// exit ;
62272: GO 62397
// dist := 9999 ;
62274: LD_ADDR_VAR 0 5
62278: PUSH
62279: LD_INT 9999
62281: ST_TO_ADDR
// for i = 1 to hexes do
62282: LD_ADDR_VAR 0 4
62286: PUSH
62287: DOUBLE
62288: LD_INT 1
62290: DEC
62291: ST_TO_ADDR
62292: LD_VAR 0 2
62296: PUSH
62297: FOR_TO
62298: IFFALSE 62385
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62300: LD_ADDR_VAR 0 6
62304: PUSH
62305: LD_VAR 0 1
62309: PPUSH
62310: LD_VAR 0 2
62314: PUSH
62315: LD_VAR 0 4
62319: ARRAY
62320: PUSH
62321: LD_INT 1
62323: ARRAY
62324: PPUSH
62325: LD_VAR 0 2
62329: PUSH
62330: LD_VAR 0 4
62334: ARRAY
62335: PUSH
62336: LD_INT 2
62338: ARRAY
62339: PPUSH
62340: CALL_OW 297
62344: ST_TO_ADDR
// if tdist < dist then
62345: LD_VAR 0 6
62349: PUSH
62350: LD_VAR 0 5
62354: LESS
62355: IFFALSE 62383
// begin hex := hexes [ i ] ;
62357: LD_ADDR_VAR 0 8
62361: PUSH
62362: LD_VAR 0 2
62366: PUSH
62367: LD_VAR 0 4
62371: ARRAY
62372: ST_TO_ADDR
// dist := tdist ;
62373: LD_ADDR_VAR 0 5
62377: PUSH
62378: LD_VAR 0 6
62382: ST_TO_ADDR
// end ; end ;
62383: GO 62297
62385: POP
62386: POP
// result := hex ;
62387: LD_ADDR_VAR 0 3
62391: PUSH
62392: LD_VAR 0 8
62396: ST_TO_ADDR
// end ;
62397: LD_VAR 0 3
62401: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62402: LD_INT 0
62404: PPUSH
62405: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62406: LD_VAR 0 1
62410: NOT
62411: PUSH
62412: LD_VAR 0 1
62416: PUSH
62417: LD_INT 21
62419: PUSH
62420: LD_INT 2
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 23
62429: PUSH
62430: LD_INT 2
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PPUSH
62441: CALL_OW 69
62445: IN
62446: NOT
62447: OR
62448: IFFALSE 62452
// exit ;
62450: GO 62499
// for i = 1 to 3 do
62452: LD_ADDR_VAR 0 3
62456: PUSH
62457: DOUBLE
62458: LD_INT 1
62460: DEC
62461: ST_TO_ADDR
62462: LD_INT 3
62464: PUSH
62465: FOR_TO
62466: IFFALSE 62497
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62468: LD_VAR 0 1
62472: PPUSH
62473: CALL_OW 250
62477: PPUSH
62478: LD_VAR 0 1
62482: PPUSH
62483: CALL_OW 251
62487: PPUSH
62488: LD_INT 1
62490: PPUSH
62491: CALL_OW 453
62495: GO 62465
62497: POP
62498: POP
// end ;
62499: LD_VAR 0 2
62503: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62504: LD_INT 0
62506: PPUSH
62507: PPUSH
62508: PPUSH
62509: PPUSH
62510: PPUSH
62511: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62512: LD_VAR 0 1
62516: NOT
62517: PUSH
62518: LD_VAR 0 2
62522: NOT
62523: OR
62524: PUSH
62525: LD_VAR 0 1
62529: PPUSH
62530: CALL_OW 314
62534: OR
62535: IFFALSE 62539
// exit ;
62537: GO 63006
// if GetLives ( i ) < 250 then
62539: LD_VAR 0 4
62543: PPUSH
62544: CALL_OW 256
62548: PUSH
62549: LD_INT 250
62551: LESS
62552: IFFALSE 62565
// begin ComAutodestruct ( i ) ;
62554: LD_VAR 0 4
62558: PPUSH
62559: CALL 62402 0 1
// exit ;
62563: GO 63006
// end ; x := GetX ( enemy_unit ) ;
62565: LD_ADDR_VAR 0 7
62569: PUSH
62570: LD_VAR 0 2
62574: PPUSH
62575: CALL_OW 250
62579: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62580: LD_ADDR_VAR 0 8
62584: PUSH
62585: LD_VAR 0 2
62589: PPUSH
62590: CALL_OW 251
62594: ST_TO_ADDR
// if not x or not y then
62595: LD_VAR 0 7
62599: NOT
62600: PUSH
62601: LD_VAR 0 8
62605: NOT
62606: OR
62607: IFFALSE 62611
// exit ;
62609: GO 63006
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62611: LD_ADDR_VAR 0 6
62615: PUSH
62616: LD_VAR 0 7
62620: PPUSH
62621: LD_INT 0
62623: PPUSH
62624: LD_INT 4
62626: PPUSH
62627: CALL_OW 272
62631: PUSH
62632: LD_VAR 0 8
62636: PPUSH
62637: LD_INT 0
62639: PPUSH
62640: LD_INT 4
62642: PPUSH
62643: CALL_OW 273
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_VAR 0 7
62656: PPUSH
62657: LD_INT 1
62659: PPUSH
62660: LD_INT 4
62662: PPUSH
62663: CALL_OW 272
62667: PUSH
62668: LD_VAR 0 8
62672: PPUSH
62673: LD_INT 1
62675: PPUSH
62676: LD_INT 4
62678: PPUSH
62679: CALL_OW 273
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_VAR 0 7
62692: PPUSH
62693: LD_INT 2
62695: PPUSH
62696: LD_INT 4
62698: PPUSH
62699: CALL_OW 272
62703: PUSH
62704: LD_VAR 0 8
62708: PPUSH
62709: LD_INT 2
62711: PPUSH
62712: LD_INT 4
62714: PPUSH
62715: CALL_OW 273
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_VAR 0 7
62728: PPUSH
62729: LD_INT 3
62731: PPUSH
62732: LD_INT 4
62734: PPUSH
62735: CALL_OW 272
62739: PUSH
62740: LD_VAR 0 8
62744: PPUSH
62745: LD_INT 3
62747: PPUSH
62748: LD_INT 4
62750: PPUSH
62751: CALL_OW 273
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_VAR 0 7
62764: PPUSH
62765: LD_INT 4
62767: PPUSH
62768: LD_INT 4
62770: PPUSH
62771: CALL_OW 272
62775: PUSH
62776: LD_VAR 0 8
62780: PPUSH
62781: LD_INT 4
62783: PPUSH
62784: LD_INT 4
62786: PPUSH
62787: CALL_OW 273
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_VAR 0 7
62800: PPUSH
62801: LD_INT 5
62803: PPUSH
62804: LD_INT 4
62806: PPUSH
62807: CALL_OW 272
62811: PUSH
62812: LD_VAR 0 8
62816: PPUSH
62817: LD_INT 5
62819: PPUSH
62820: LD_INT 4
62822: PPUSH
62823: CALL_OW 273
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: ST_TO_ADDR
// for i = tmp downto 1 do
62840: LD_ADDR_VAR 0 4
62844: PUSH
62845: DOUBLE
62846: LD_VAR 0 6
62850: INC
62851: ST_TO_ADDR
62852: LD_INT 1
62854: PUSH
62855: FOR_DOWNTO
62856: IFFALSE 62957
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62858: LD_VAR 0 6
62862: PUSH
62863: LD_VAR 0 4
62867: ARRAY
62868: PUSH
62869: LD_INT 1
62871: ARRAY
62872: PPUSH
62873: LD_VAR 0 6
62877: PUSH
62878: LD_VAR 0 4
62882: ARRAY
62883: PUSH
62884: LD_INT 2
62886: ARRAY
62887: PPUSH
62888: CALL_OW 488
62892: NOT
62893: PUSH
62894: LD_VAR 0 6
62898: PUSH
62899: LD_VAR 0 4
62903: ARRAY
62904: PUSH
62905: LD_INT 1
62907: ARRAY
62908: PPUSH
62909: LD_VAR 0 6
62913: PUSH
62914: LD_VAR 0 4
62918: ARRAY
62919: PUSH
62920: LD_INT 2
62922: ARRAY
62923: PPUSH
62924: CALL_OW 428
62928: PUSH
62929: LD_INT 0
62931: NONEQUAL
62932: OR
62933: IFFALSE 62955
// tmp := Delete ( tmp , i ) ;
62935: LD_ADDR_VAR 0 6
62939: PUSH
62940: LD_VAR 0 6
62944: PPUSH
62945: LD_VAR 0 4
62949: PPUSH
62950: CALL_OW 3
62954: ST_TO_ADDR
62955: GO 62855
62957: POP
62958: POP
// j := GetClosestHex ( unit , tmp ) ;
62959: LD_ADDR_VAR 0 5
62963: PUSH
62964: LD_VAR 0 1
62968: PPUSH
62969: LD_VAR 0 6
62973: PPUSH
62974: CALL 62250 0 2
62978: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62979: LD_VAR 0 1
62983: PPUSH
62984: LD_VAR 0 5
62988: PUSH
62989: LD_INT 1
62991: ARRAY
62992: PPUSH
62993: LD_VAR 0 5
62997: PUSH
62998: LD_INT 2
63000: ARRAY
63001: PPUSH
63002: CALL_OW 111
// end ;
63006: LD_VAR 0 3
63010: RET
// export function PrepareApemanSoldier ( ) ; begin
63011: LD_INT 0
63013: PPUSH
// uc_nation := 0 ;
63014: LD_ADDR_OWVAR 21
63018: PUSH
63019: LD_INT 0
63021: ST_TO_ADDR
// hc_sex := sex_male ;
63022: LD_ADDR_OWVAR 27
63026: PUSH
63027: LD_INT 1
63029: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63030: LD_ADDR_OWVAR 28
63034: PUSH
63035: LD_INT 15
63037: ST_TO_ADDR
// hc_gallery :=  ;
63038: LD_ADDR_OWVAR 33
63042: PUSH
63043: LD_STRING 
63045: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63046: LD_ADDR_OWVAR 31
63050: PUSH
63051: LD_INT 0
63053: PPUSH
63054: LD_INT 3
63056: PPUSH
63057: CALL_OW 12
63061: PUSH
63062: LD_INT 0
63064: PPUSH
63065: LD_INT 3
63067: PPUSH
63068: CALL_OW 12
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: LD_INT 0
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: ST_TO_ADDR
// end ;
63085: LD_VAR 0 1
63089: RET
// export function PrepareApemanEngineer ( ) ; begin
63090: LD_INT 0
63092: PPUSH
// uc_nation := 0 ;
63093: LD_ADDR_OWVAR 21
63097: PUSH
63098: LD_INT 0
63100: ST_TO_ADDR
// hc_sex := sex_male ;
63101: LD_ADDR_OWVAR 27
63105: PUSH
63106: LD_INT 1
63108: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63109: LD_ADDR_OWVAR 28
63113: PUSH
63114: LD_INT 16
63116: ST_TO_ADDR
// hc_gallery :=  ;
63117: LD_ADDR_OWVAR 33
63121: PUSH
63122: LD_STRING 
63124: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63125: LD_ADDR_OWVAR 31
63129: PUSH
63130: LD_INT 0
63132: PPUSH
63133: LD_INT 3
63135: PPUSH
63136: CALL_OW 12
63140: PUSH
63141: LD_INT 0
63143: PPUSH
63144: LD_INT 3
63146: PPUSH
63147: CALL_OW 12
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: LD_INT 0
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: ST_TO_ADDR
// end ;
63164: LD_VAR 0 1
63168: RET
// export function PrepareApeman ( agressivity ) ; begin
63169: LD_INT 0
63171: PPUSH
// uc_side := 0 ;
63172: LD_ADDR_OWVAR 20
63176: PUSH
63177: LD_INT 0
63179: ST_TO_ADDR
// uc_nation := 0 ;
63180: LD_ADDR_OWVAR 21
63184: PUSH
63185: LD_INT 0
63187: ST_TO_ADDR
// hc_sex := sex_male ;
63188: LD_ADDR_OWVAR 27
63192: PUSH
63193: LD_INT 1
63195: ST_TO_ADDR
// hc_class := class_apeman ;
63196: LD_ADDR_OWVAR 28
63200: PUSH
63201: LD_INT 12
63203: ST_TO_ADDR
// hc_gallery :=  ;
63204: LD_ADDR_OWVAR 33
63208: PUSH
63209: LD_STRING 
63211: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63212: LD_ADDR_OWVAR 35
63216: PUSH
63217: LD_VAR 0 1
63221: NEG
63222: PPUSH
63223: LD_VAR 0 1
63227: PPUSH
63228: CALL_OW 12
63232: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63233: LD_ADDR_OWVAR 31
63237: PUSH
63238: LD_INT 0
63240: PPUSH
63241: LD_INT 3
63243: PPUSH
63244: CALL_OW 12
63248: PUSH
63249: LD_INT 0
63251: PPUSH
63252: LD_INT 3
63254: PPUSH
63255: CALL_OW 12
63259: PUSH
63260: LD_INT 0
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: ST_TO_ADDR
// end ;
63272: LD_VAR 0 2
63276: RET
// export function PrepareTiger ( agressivity ) ; begin
63277: LD_INT 0
63279: PPUSH
// uc_side := 0 ;
63280: LD_ADDR_OWVAR 20
63284: PUSH
63285: LD_INT 0
63287: ST_TO_ADDR
// uc_nation := 0 ;
63288: LD_ADDR_OWVAR 21
63292: PUSH
63293: LD_INT 0
63295: ST_TO_ADDR
// hc_class := class_tiger ;
63296: LD_ADDR_OWVAR 28
63300: PUSH
63301: LD_INT 14
63303: ST_TO_ADDR
// hc_gallery :=  ;
63304: LD_ADDR_OWVAR 33
63308: PUSH
63309: LD_STRING 
63311: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63312: LD_ADDR_OWVAR 35
63316: PUSH
63317: LD_VAR 0 1
63321: NEG
63322: PPUSH
63323: LD_VAR 0 1
63327: PPUSH
63328: CALL_OW 12
63332: ST_TO_ADDR
// end ;
63333: LD_VAR 0 2
63337: RET
// export function PrepareEnchidna ( ) ; begin
63338: LD_INT 0
63340: PPUSH
// uc_side := 0 ;
63341: LD_ADDR_OWVAR 20
63345: PUSH
63346: LD_INT 0
63348: ST_TO_ADDR
// uc_nation := 0 ;
63349: LD_ADDR_OWVAR 21
63353: PUSH
63354: LD_INT 0
63356: ST_TO_ADDR
// hc_class := class_baggie ;
63357: LD_ADDR_OWVAR 28
63361: PUSH
63362: LD_INT 13
63364: ST_TO_ADDR
// hc_gallery :=  ;
63365: LD_ADDR_OWVAR 33
63369: PUSH
63370: LD_STRING 
63372: ST_TO_ADDR
// end ;
63373: LD_VAR 0 1
63377: RET
// export function PrepareFrog ( ) ; begin
63378: LD_INT 0
63380: PPUSH
// uc_side := 0 ;
63381: LD_ADDR_OWVAR 20
63385: PUSH
63386: LD_INT 0
63388: ST_TO_ADDR
// uc_nation := 0 ;
63389: LD_ADDR_OWVAR 21
63393: PUSH
63394: LD_INT 0
63396: ST_TO_ADDR
// hc_class := class_frog ;
63397: LD_ADDR_OWVAR 28
63401: PUSH
63402: LD_INT 19
63404: ST_TO_ADDR
// hc_gallery :=  ;
63405: LD_ADDR_OWVAR 33
63409: PUSH
63410: LD_STRING 
63412: ST_TO_ADDR
// end ;
63413: LD_VAR 0 1
63417: RET
// export function PrepareFish ( ) ; begin
63418: LD_INT 0
63420: PPUSH
// uc_side := 0 ;
63421: LD_ADDR_OWVAR 20
63425: PUSH
63426: LD_INT 0
63428: ST_TO_ADDR
// uc_nation := 0 ;
63429: LD_ADDR_OWVAR 21
63433: PUSH
63434: LD_INT 0
63436: ST_TO_ADDR
// hc_class := class_fish ;
63437: LD_ADDR_OWVAR 28
63441: PUSH
63442: LD_INT 20
63444: ST_TO_ADDR
// hc_gallery :=  ;
63445: LD_ADDR_OWVAR 33
63449: PUSH
63450: LD_STRING 
63452: ST_TO_ADDR
// end ;
63453: LD_VAR 0 1
63457: RET
// export function PrepareBird ( ) ; begin
63458: LD_INT 0
63460: PPUSH
// uc_side := 0 ;
63461: LD_ADDR_OWVAR 20
63465: PUSH
63466: LD_INT 0
63468: ST_TO_ADDR
// uc_nation := 0 ;
63469: LD_ADDR_OWVAR 21
63473: PUSH
63474: LD_INT 0
63476: ST_TO_ADDR
// hc_class := class_phororhacos ;
63477: LD_ADDR_OWVAR 28
63481: PUSH
63482: LD_INT 18
63484: ST_TO_ADDR
// hc_gallery :=  ;
63485: LD_ADDR_OWVAR 33
63489: PUSH
63490: LD_STRING 
63492: ST_TO_ADDR
// end ;
63493: LD_VAR 0 1
63497: RET
// export function PrepareHorse ( ) ; begin
63498: LD_INT 0
63500: PPUSH
// uc_side := 0 ;
63501: LD_ADDR_OWVAR 20
63505: PUSH
63506: LD_INT 0
63508: ST_TO_ADDR
// uc_nation := 0 ;
63509: LD_ADDR_OWVAR 21
63513: PUSH
63514: LD_INT 0
63516: ST_TO_ADDR
// hc_class := class_horse ;
63517: LD_ADDR_OWVAR 28
63521: PUSH
63522: LD_INT 21
63524: ST_TO_ADDR
// hc_gallery :=  ;
63525: LD_ADDR_OWVAR 33
63529: PUSH
63530: LD_STRING 
63532: ST_TO_ADDR
// end ;
63533: LD_VAR 0 1
63537: RET
// export function PrepareMastodont ( ) ; begin
63538: LD_INT 0
63540: PPUSH
// uc_side := 0 ;
63541: LD_ADDR_OWVAR 20
63545: PUSH
63546: LD_INT 0
63548: ST_TO_ADDR
// uc_nation := 0 ;
63549: LD_ADDR_OWVAR 21
63553: PUSH
63554: LD_INT 0
63556: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63557: LD_ADDR_OWVAR 37
63561: PUSH
63562: LD_INT 31
63564: ST_TO_ADDR
// vc_control := control_rider ;
63565: LD_ADDR_OWVAR 38
63569: PUSH
63570: LD_INT 4
63572: ST_TO_ADDR
// end ;
63573: LD_VAR 0 1
63577: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63578: LD_INT 0
63580: PPUSH
63581: PPUSH
63582: PPUSH
// uc_side = 0 ;
63583: LD_ADDR_OWVAR 20
63587: PUSH
63588: LD_INT 0
63590: ST_TO_ADDR
// uc_nation = 0 ;
63591: LD_ADDR_OWVAR 21
63595: PUSH
63596: LD_INT 0
63598: ST_TO_ADDR
// InitHc_All ( ) ;
63599: CALL_OW 584
// InitVc ;
63603: CALL_OW 20
// if mastodonts then
63607: LD_VAR 0 6
63611: IFFALSE 63678
// for i = 1 to mastodonts do
63613: LD_ADDR_VAR 0 11
63617: PUSH
63618: DOUBLE
63619: LD_INT 1
63621: DEC
63622: ST_TO_ADDR
63623: LD_VAR 0 6
63627: PUSH
63628: FOR_TO
63629: IFFALSE 63676
// begin vc_chassis := 31 ;
63631: LD_ADDR_OWVAR 37
63635: PUSH
63636: LD_INT 31
63638: ST_TO_ADDR
// vc_control := control_rider ;
63639: LD_ADDR_OWVAR 38
63643: PUSH
63644: LD_INT 4
63646: ST_TO_ADDR
// animal := CreateVehicle ;
63647: LD_ADDR_VAR 0 12
63651: PUSH
63652: CALL_OW 45
63656: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63657: LD_VAR 0 12
63661: PPUSH
63662: LD_VAR 0 8
63666: PPUSH
63667: LD_INT 0
63669: PPUSH
63670: CALL 65806 0 3
// end ;
63674: GO 63628
63676: POP
63677: POP
// if horses then
63678: LD_VAR 0 5
63682: IFFALSE 63749
// for i = 1 to horses do
63684: LD_ADDR_VAR 0 11
63688: PUSH
63689: DOUBLE
63690: LD_INT 1
63692: DEC
63693: ST_TO_ADDR
63694: LD_VAR 0 5
63698: PUSH
63699: FOR_TO
63700: IFFALSE 63747
// begin hc_class := 21 ;
63702: LD_ADDR_OWVAR 28
63706: PUSH
63707: LD_INT 21
63709: ST_TO_ADDR
// hc_gallery :=  ;
63710: LD_ADDR_OWVAR 33
63714: PUSH
63715: LD_STRING 
63717: ST_TO_ADDR
// animal := CreateHuman ;
63718: LD_ADDR_VAR 0 12
63722: PUSH
63723: CALL_OW 44
63727: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63728: LD_VAR 0 12
63732: PPUSH
63733: LD_VAR 0 8
63737: PPUSH
63738: LD_INT 0
63740: PPUSH
63741: CALL 65806 0 3
// end ;
63745: GO 63699
63747: POP
63748: POP
// if birds then
63749: LD_VAR 0 1
63753: IFFALSE 63820
// for i = 1 to birds do
63755: LD_ADDR_VAR 0 11
63759: PUSH
63760: DOUBLE
63761: LD_INT 1
63763: DEC
63764: ST_TO_ADDR
63765: LD_VAR 0 1
63769: PUSH
63770: FOR_TO
63771: IFFALSE 63818
// begin hc_class = 18 ;
63773: LD_ADDR_OWVAR 28
63777: PUSH
63778: LD_INT 18
63780: ST_TO_ADDR
// hc_gallery =  ;
63781: LD_ADDR_OWVAR 33
63785: PUSH
63786: LD_STRING 
63788: ST_TO_ADDR
// animal := CreateHuman ;
63789: LD_ADDR_VAR 0 12
63793: PUSH
63794: CALL_OW 44
63798: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63799: LD_VAR 0 12
63803: PPUSH
63804: LD_VAR 0 8
63808: PPUSH
63809: LD_INT 0
63811: PPUSH
63812: CALL 65806 0 3
// end ;
63816: GO 63770
63818: POP
63819: POP
// if tigers then
63820: LD_VAR 0 2
63824: IFFALSE 63908
// for i = 1 to tigers do
63826: LD_ADDR_VAR 0 11
63830: PUSH
63831: DOUBLE
63832: LD_INT 1
63834: DEC
63835: ST_TO_ADDR
63836: LD_VAR 0 2
63840: PUSH
63841: FOR_TO
63842: IFFALSE 63906
// begin hc_class = class_tiger ;
63844: LD_ADDR_OWVAR 28
63848: PUSH
63849: LD_INT 14
63851: ST_TO_ADDR
// hc_gallery =  ;
63852: LD_ADDR_OWVAR 33
63856: PUSH
63857: LD_STRING 
63859: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63860: LD_ADDR_OWVAR 35
63864: PUSH
63865: LD_INT 7
63867: NEG
63868: PPUSH
63869: LD_INT 7
63871: PPUSH
63872: CALL_OW 12
63876: ST_TO_ADDR
// animal := CreateHuman ;
63877: LD_ADDR_VAR 0 12
63881: PUSH
63882: CALL_OW 44
63886: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63887: LD_VAR 0 12
63891: PPUSH
63892: LD_VAR 0 8
63896: PPUSH
63897: LD_INT 0
63899: PPUSH
63900: CALL 65806 0 3
// end ;
63904: GO 63841
63906: POP
63907: POP
// if apemans then
63908: LD_VAR 0 3
63912: IFFALSE 64035
// for i = 1 to apemans do
63914: LD_ADDR_VAR 0 11
63918: PUSH
63919: DOUBLE
63920: LD_INT 1
63922: DEC
63923: ST_TO_ADDR
63924: LD_VAR 0 3
63928: PUSH
63929: FOR_TO
63930: IFFALSE 64033
// begin hc_class = class_apeman ;
63932: LD_ADDR_OWVAR 28
63936: PUSH
63937: LD_INT 12
63939: ST_TO_ADDR
// hc_gallery =  ;
63940: LD_ADDR_OWVAR 33
63944: PUSH
63945: LD_STRING 
63947: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63948: LD_ADDR_OWVAR 35
63952: PUSH
63953: LD_INT 2
63955: NEG
63956: PPUSH
63957: LD_INT 2
63959: PPUSH
63960: CALL_OW 12
63964: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63965: LD_ADDR_OWVAR 31
63969: PUSH
63970: LD_INT 1
63972: PPUSH
63973: LD_INT 3
63975: PPUSH
63976: CALL_OW 12
63980: PUSH
63981: LD_INT 1
63983: PPUSH
63984: LD_INT 3
63986: PPUSH
63987: CALL_OW 12
63991: PUSH
63992: LD_INT 0
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: ST_TO_ADDR
// animal := CreateHuman ;
64004: LD_ADDR_VAR 0 12
64008: PUSH
64009: CALL_OW 44
64013: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64014: LD_VAR 0 12
64018: PPUSH
64019: LD_VAR 0 8
64023: PPUSH
64024: LD_INT 0
64026: PPUSH
64027: CALL 65806 0 3
// end ;
64031: GO 63929
64033: POP
64034: POP
// if enchidnas then
64035: LD_VAR 0 4
64039: IFFALSE 64106
// for i = 1 to enchidnas do
64041: LD_ADDR_VAR 0 11
64045: PUSH
64046: DOUBLE
64047: LD_INT 1
64049: DEC
64050: ST_TO_ADDR
64051: LD_VAR 0 4
64055: PUSH
64056: FOR_TO
64057: IFFALSE 64104
// begin hc_class = 13 ;
64059: LD_ADDR_OWVAR 28
64063: PUSH
64064: LD_INT 13
64066: ST_TO_ADDR
// hc_gallery =  ;
64067: LD_ADDR_OWVAR 33
64071: PUSH
64072: LD_STRING 
64074: ST_TO_ADDR
// animal := CreateHuman ;
64075: LD_ADDR_VAR 0 12
64079: PUSH
64080: CALL_OW 44
64084: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64085: LD_VAR 0 12
64089: PPUSH
64090: LD_VAR 0 8
64094: PPUSH
64095: LD_INT 0
64097: PPUSH
64098: CALL 65806 0 3
// end ;
64102: GO 64056
64104: POP
64105: POP
// if fishes then
64106: LD_VAR 0 7
64110: IFFALSE 64177
// for i = 1 to fishes do
64112: LD_ADDR_VAR 0 11
64116: PUSH
64117: DOUBLE
64118: LD_INT 1
64120: DEC
64121: ST_TO_ADDR
64122: LD_VAR 0 7
64126: PUSH
64127: FOR_TO
64128: IFFALSE 64175
// begin hc_class = 20 ;
64130: LD_ADDR_OWVAR 28
64134: PUSH
64135: LD_INT 20
64137: ST_TO_ADDR
// hc_gallery =  ;
64138: LD_ADDR_OWVAR 33
64142: PUSH
64143: LD_STRING 
64145: ST_TO_ADDR
// animal := CreateHuman ;
64146: LD_ADDR_VAR 0 12
64150: PUSH
64151: CALL_OW 44
64155: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64156: LD_VAR 0 12
64160: PPUSH
64161: LD_VAR 0 9
64165: PPUSH
64166: LD_INT 0
64168: PPUSH
64169: CALL 65806 0 3
// end ;
64173: GO 64127
64175: POP
64176: POP
// end ;
64177: LD_VAR 0 10
64181: RET
// export function WantHeal ( sci , unit ) ; begin
64182: LD_INT 0
64184: PPUSH
// if GetTaskList ( sci ) > 0 then
64185: LD_VAR 0 1
64189: PPUSH
64190: CALL_OW 437
64194: PUSH
64195: LD_INT 0
64197: GREATER
64198: IFFALSE 64268
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64200: LD_VAR 0 1
64204: PPUSH
64205: CALL_OW 437
64209: PUSH
64210: LD_INT 1
64212: ARRAY
64213: PUSH
64214: LD_INT 1
64216: ARRAY
64217: PUSH
64218: LD_STRING l
64220: EQUAL
64221: PUSH
64222: LD_VAR 0 1
64226: PPUSH
64227: CALL_OW 437
64231: PUSH
64232: LD_INT 1
64234: ARRAY
64235: PUSH
64236: LD_INT 4
64238: ARRAY
64239: PUSH
64240: LD_VAR 0 2
64244: EQUAL
64245: AND
64246: IFFALSE 64258
// result := true else
64248: LD_ADDR_VAR 0 3
64252: PUSH
64253: LD_INT 1
64255: ST_TO_ADDR
64256: GO 64266
// result := false ;
64258: LD_ADDR_VAR 0 3
64262: PUSH
64263: LD_INT 0
64265: ST_TO_ADDR
// end else
64266: GO 64276
// result := false ;
64268: LD_ADDR_VAR 0 3
64272: PUSH
64273: LD_INT 0
64275: ST_TO_ADDR
// end ;
64276: LD_VAR 0 3
64280: RET
// export function HealTarget ( sci ) ; begin
64281: LD_INT 0
64283: PPUSH
// if not sci then
64284: LD_VAR 0 1
64288: NOT
64289: IFFALSE 64293
// exit ;
64291: GO 64358
// result := 0 ;
64293: LD_ADDR_VAR 0 2
64297: PUSH
64298: LD_INT 0
64300: ST_TO_ADDR
// if GetTaskList ( sci ) then
64301: LD_VAR 0 1
64305: PPUSH
64306: CALL_OW 437
64310: IFFALSE 64358
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64312: LD_VAR 0 1
64316: PPUSH
64317: CALL_OW 437
64321: PUSH
64322: LD_INT 1
64324: ARRAY
64325: PUSH
64326: LD_INT 1
64328: ARRAY
64329: PUSH
64330: LD_STRING l
64332: EQUAL
64333: IFFALSE 64358
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64335: LD_ADDR_VAR 0 2
64339: PUSH
64340: LD_VAR 0 1
64344: PPUSH
64345: CALL_OW 437
64349: PUSH
64350: LD_INT 1
64352: ARRAY
64353: PUSH
64354: LD_INT 4
64356: ARRAY
64357: ST_TO_ADDR
// end ;
64358: LD_VAR 0 2
64362: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64363: LD_INT 0
64365: PPUSH
64366: PPUSH
64367: PPUSH
64368: PPUSH
// if not base_units then
64369: LD_VAR 0 1
64373: NOT
64374: IFFALSE 64378
// exit ;
64376: GO 64465
// result := false ;
64378: LD_ADDR_VAR 0 2
64382: PUSH
64383: LD_INT 0
64385: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64386: LD_ADDR_VAR 0 5
64390: PUSH
64391: LD_VAR 0 1
64395: PPUSH
64396: LD_INT 21
64398: PUSH
64399: LD_INT 3
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PPUSH
64406: CALL_OW 72
64410: ST_TO_ADDR
// if not tmp then
64411: LD_VAR 0 5
64415: NOT
64416: IFFALSE 64420
// exit ;
64418: GO 64465
// for i in tmp do
64420: LD_ADDR_VAR 0 3
64424: PUSH
64425: LD_VAR 0 5
64429: PUSH
64430: FOR_IN
64431: IFFALSE 64463
// begin result := EnemyInRange ( i , 22 ) ;
64433: LD_ADDR_VAR 0 2
64437: PUSH
64438: LD_VAR 0 3
64442: PPUSH
64443: LD_INT 22
64445: PPUSH
64446: CALL 62052 0 2
64450: ST_TO_ADDR
// if result then
64451: LD_VAR 0 2
64455: IFFALSE 64461
// exit ;
64457: POP
64458: POP
64459: GO 64465
// end ;
64461: GO 64430
64463: POP
64464: POP
// end ;
64465: LD_VAR 0 2
64469: RET
// export function FilterByTag ( units , tag ) ; begin
64470: LD_INT 0
64472: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64473: LD_ADDR_VAR 0 3
64477: PUSH
64478: LD_VAR 0 1
64482: PPUSH
64483: LD_INT 120
64485: PUSH
64486: LD_VAR 0 2
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PPUSH
64495: CALL_OW 72
64499: ST_TO_ADDR
// end ;
64500: LD_VAR 0 3
64504: RET
// export function IsDriver ( un ) ; begin
64505: LD_INT 0
64507: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64508: LD_ADDR_VAR 0 2
64512: PUSH
64513: LD_VAR 0 1
64517: PUSH
64518: LD_INT 55
64520: PUSH
64521: EMPTY
64522: LIST
64523: PPUSH
64524: CALL_OW 69
64528: IN
64529: ST_TO_ADDR
// end ;
64530: LD_VAR 0 2
64534: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64535: LD_INT 0
64537: PPUSH
64538: PPUSH
// list := [ ] ;
64539: LD_ADDR_VAR 0 5
64543: PUSH
64544: EMPTY
64545: ST_TO_ADDR
// case d of 0 :
64546: LD_VAR 0 3
64550: PUSH
64551: LD_INT 0
64553: DOUBLE
64554: EQUAL
64555: IFTRUE 64559
64557: GO 64692
64559: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64560: LD_ADDR_VAR 0 5
64564: PUSH
64565: LD_VAR 0 1
64569: PUSH
64570: LD_INT 4
64572: MINUS
64573: PUSH
64574: LD_VAR 0 2
64578: PUSH
64579: LD_INT 4
64581: MINUS
64582: PUSH
64583: LD_INT 2
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: LIST
64590: PUSH
64591: LD_VAR 0 1
64595: PUSH
64596: LD_INT 3
64598: MINUS
64599: PUSH
64600: LD_VAR 0 2
64604: PUSH
64605: LD_INT 1
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: LIST
64612: PUSH
64613: LD_VAR 0 1
64617: PUSH
64618: LD_INT 4
64620: PLUS
64621: PUSH
64622: LD_VAR 0 2
64626: PUSH
64627: LD_INT 4
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: LIST
64634: PUSH
64635: LD_VAR 0 1
64639: PUSH
64640: LD_INT 3
64642: PLUS
64643: PUSH
64644: LD_VAR 0 2
64648: PUSH
64649: LD_INT 3
64651: PLUS
64652: PUSH
64653: LD_INT 5
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: LIST
64660: PUSH
64661: LD_VAR 0 1
64665: PUSH
64666: LD_VAR 0 2
64670: PUSH
64671: LD_INT 4
64673: PLUS
64674: PUSH
64675: LD_INT 0
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: LIST
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: ST_TO_ADDR
// end ; 1 :
64690: GO 65390
64692: LD_INT 1
64694: DOUBLE
64695: EQUAL
64696: IFTRUE 64700
64698: GO 64833
64700: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64701: LD_ADDR_VAR 0 5
64705: PUSH
64706: LD_VAR 0 1
64710: PUSH
64711: LD_VAR 0 2
64715: PUSH
64716: LD_INT 4
64718: MINUS
64719: PUSH
64720: LD_INT 3
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: LIST
64727: PUSH
64728: LD_VAR 0 1
64732: PUSH
64733: LD_INT 3
64735: MINUS
64736: PUSH
64737: LD_VAR 0 2
64741: PUSH
64742: LD_INT 3
64744: MINUS
64745: PUSH
64746: LD_INT 2
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: LIST
64753: PUSH
64754: LD_VAR 0 1
64758: PUSH
64759: LD_INT 4
64761: MINUS
64762: PUSH
64763: LD_VAR 0 2
64767: PUSH
64768: LD_INT 1
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: LIST
64775: PUSH
64776: LD_VAR 0 1
64780: PUSH
64781: LD_VAR 0 2
64785: PUSH
64786: LD_INT 3
64788: PLUS
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: LIST
64797: PUSH
64798: LD_VAR 0 1
64802: PUSH
64803: LD_INT 4
64805: PLUS
64806: PUSH
64807: LD_VAR 0 2
64811: PUSH
64812: LD_INT 4
64814: PLUS
64815: PUSH
64816: LD_INT 5
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: LIST
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: ST_TO_ADDR
// end ; 2 :
64831: GO 65390
64833: LD_INT 2
64835: DOUBLE
64836: EQUAL
64837: IFTRUE 64841
64839: GO 64970
64841: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64842: LD_ADDR_VAR 0 5
64846: PUSH
64847: LD_VAR 0 1
64851: PUSH
64852: LD_VAR 0 2
64856: PUSH
64857: LD_INT 3
64859: MINUS
64860: PUSH
64861: LD_INT 3
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: LIST
64868: PUSH
64869: LD_VAR 0 1
64873: PUSH
64874: LD_INT 4
64876: PLUS
64877: PUSH
64878: LD_VAR 0 2
64882: PUSH
64883: LD_INT 4
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: LIST
64890: PUSH
64891: LD_VAR 0 1
64895: PUSH
64896: LD_VAR 0 2
64900: PUSH
64901: LD_INT 4
64903: PLUS
64904: PUSH
64905: LD_INT 0
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: LIST
64912: PUSH
64913: LD_VAR 0 1
64917: PUSH
64918: LD_INT 3
64920: MINUS
64921: PUSH
64922: LD_VAR 0 2
64926: PUSH
64927: LD_INT 1
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: LIST
64934: PUSH
64935: LD_VAR 0 1
64939: PUSH
64940: LD_INT 4
64942: MINUS
64943: PUSH
64944: LD_VAR 0 2
64948: PUSH
64949: LD_INT 4
64951: MINUS
64952: PUSH
64953: LD_INT 2
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: LIST
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: ST_TO_ADDR
// end ; 3 :
64968: GO 65390
64970: LD_INT 3
64972: DOUBLE
64973: EQUAL
64974: IFTRUE 64978
64976: GO 65111
64978: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64979: LD_ADDR_VAR 0 5
64983: PUSH
64984: LD_VAR 0 1
64988: PUSH
64989: LD_INT 3
64991: PLUS
64992: PUSH
64993: LD_VAR 0 2
64997: PUSH
64998: LD_INT 4
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: LIST
65005: PUSH
65006: LD_VAR 0 1
65010: PUSH
65011: LD_INT 4
65013: PLUS
65014: PUSH
65015: LD_VAR 0 2
65019: PUSH
65020: LD_INT 4
65022: PLUS
65023: PUSH
65024: LD_INT 5
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: LIST
65031: PUSH
65032: LD_VAR 0 1
65036: PUSH
65037: LD_INT 4
65039: MINUS
65040: PUSH
65041: LD_VAR 0 2
65045: PUSH
65046: LD_INT 1
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: LIST
65053: PUSH
65054: LD_VAR 0 1
65058: PUSH
65059: LD_VAR 0 2
65063: PUSH
65064: LD_INT 4
65066: MINUS
65067: PUSH
65068: LD_INT 3
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: LIST
65075: PUSH
65076: LD_VAR 0 1
65080: PUSH
65081: LD_INT 3
65083: MINUS
65084: PUSH
65085: LD_VAR 0 2
65089: PUSH
65090: LD_INT 3
65092: MINUS
65093: PUSH
65094: LD_INT 2
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: LIST
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: ST_TO_ADDR
// end ; 4 :
65109: GO 65390
65111: LD_INT 4
65113: DOUBLE
65114: EQUAL
65115: IFTRUE 65119
65117: GO 65252
65119: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65120: LD_ADDR_VAR 0 5
65124: PUSH
65125: LD_VAR 0 1
65129: PUSH
65130: LD_VAR 0 2
65134: PUSH
65135: LD_INT 4
65137: PLUS
65138: PUSH
65139: LD_INT 0
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: LIST
65146: PUSH
65147: LD_VAR 0 1
65151: PUSH
65152: LD_INT 3
65154: PLUS
65155: PUSH
65156: LD_VAR 0 2
65160: PUSH
65161: LD_INT 3
65163: PLUS
65164: PUSH
65165: LD_INT 5
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: LIST
65172: PUSH
65173: LD_VAR 0 1
65177: PUSH
65178: LD_INT 4
65180: PLUS
65181: PUSH
65182: LD_VAR 0 2
65186: PUSH
65187: LD_INT 4
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: LIST
65194: PUSH
65195: LD_VAR 0 1
65199: PUSH
65200: LD_VAR 0 2
65204: PUSH
65205: LD_INT 3
65207: MINUS
65208: PUSH
65209: LD_INT 3
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: LIST
65216: PUSH
65217: LD_VAR 0 1
65221: PUSH
65222: LD_INT 4
65224: MINUS
65225: PUSH
65226: LD_VAR 0 2
65230: PUSH
65231: LD_INT 4
65233: MINUS
65234: PUSH
65235: LD_INT 2
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: LIST
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: ST_TO_ADDR
// end ; 5 :
65250: GO 65390
65252: LD_INT 5
65254: DOUBLE
65255: EQUAL
65256: IFTRUE 65260
65258: GO 65389
65260: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65261: LD_ADDR_VAR 0 5
65265: PUSH
65266: LD_VAR 0 1
65270: PUSH
65271: LD_INT 4
65273: MINUS
65274: PUSH
65275: LD_VAR 0 2
65279: PUSH
65280: LD_INT 1
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: LIST
65287: PUSH
65288: LD_VAR 0 1
65292: PUSH
65293: LD_VAR 0 2
65297: PUSH
65298: LD_INT 4
65300: MINUS
65301: PUSH
65302: LD_INT 3
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: LIST
65309: PUSH
65310: LD_VAR 0 1
65314: PUSH
65315: LD_INT 4
65317: PLUS
65318: PUSH
65319: LD_VAR 0 2
65323: PUSH
65324: LD_INT 4
65326: PLUS
65327: PUSH
65328: LD_INT 5
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: LIST
65335: PUSH
65336: LD_VAR 0 1
65340: PUSH
65341: LD_INT 3
65343: PLUS
65344: PUSH
65345: LD_VAR 0 2
65349: PUSH
65350: LD_INT 4
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: LIST
65357: PUSH
65358: LD_VAR 0 1
65362: PUSH
65363: LD_VAR 0 2
65367: PUSH
65368: LD_INT 3
65370: PLUS
65371: PUSH
65372: LD_INT 0
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: LIST
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: ST_TO_ADDR
// end ; end ;
65387: GO 65390
65389: POP
// result := list ;
65390: LD_ADDR_VAR 0 4
65394: PUSH
65395: LD_VAR 0 5
65399: ST_TO_ADDR
// end ;
65400: LD_VAR 0 4
65404: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65405: LD_INT 0
65407: PPUSH
65408: PPUSH
65409: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65410: LD_VAR 0 1
65414: NOT
65415: PUSH
65416: LD_VAR 0 2
65420: PUSH
65421: LD_INT 1
65423: PUSH
65424: LD_INT 2
65426: PUSH
65427: LD_INT 3
65429: PUSH
65430: LD_INT 4
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: IN
65439: NOT
65440: OR
65441: IFFALSE 65445
// exit ;
65443: GO 65528
// tmp := [ ] ;
65445: LD_ADDR_VAR 0 5
65449: PUSH
65450: EMPTY
65451: ST_TO_ADDR
// for i in units do
65452: LD_ADDR_VAR 0 4
65456: PUSH
65457: LD_VAR 0 1
65461: PUSH
65462: FOR_IN
65463: IFFALSE 65497
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65465: LD_ADDR_VAR 0 5
65469: PUSH
65470: LD_VAR 0 5
65474: PPUSH
65475: LD_VAR 0 4
65479: PPUSH
65480: LD_VAR 0 2
65484: PPUSH
65485: CALL_OW 259
65489: PPUSH
65490: CALL 66889 0 2
65494: ST_TO_ADDR
65495: GO 65462
65497: POP
65498: POP
// if not tmp then
65499: LD_VAR 0 5
65503: NOT
65504: IFFALSE 65508
// exit ;
65506: GO 65528
// result := SortListByListDesc ( units , tmp ) ;
65508: LD_ADDR_VAR 0 3
65512: PUSH
65513: LD_VAR 0 1
65517: PPUSH
65518: LD_VAR 0 5
65522: PPUSH
65523: CALL_OW 77
65527: ST_TO_ADDR
// end ;
65528: LD_VAR 0 3
65532: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65533: LD_INT 0
65535: PPUSH
65536: PPUSH
65537: PPUSH
// result := false ;
65538: LD_ADDR_VAR 0 3
65542: PUSH
65543: LD_INT 0
65545: ST_TO_ADDR
// if not building then
65546: LD_VAR 0 2
65550: NOT
65551: IFFALSE 65555
// exit ;
65553: GO 65693
// x := GetX ( building ) ;
65555: LD_ADDR_VAR 0 4
65559: PUSH
65560: LD_VAR 0 2
65564: PPUSH
65565: CALL_OW 250
65569: ST_TO_ADDR
// y := GetY ( building ) ;
65570: LD_ADDR_VAR 0 5
65574: PUSH
65575: LD_VAR 0 2
65579: PPUSH
65580: CALL_OW 251
65584: ST_TO_ADDR
// if not x or not y then
65585: LD_VAR 0 4
65589: NOT
65590: PUSH
65591: LD_VAR 0 5
65595: NOT
65596: OR
65597: IFFALSE 65601
// exit ;
65599: GO 65693
// if GetTaskList ( unit ) then
65601: LD_VAR 0 1
65605: PPUSH
65606: CALL_OW 437
65610: IFFALSE 65693
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65612: LD_STRING e
65614: PUSH
65615: LD_VAR 0 1
65619: PPUSH
65620: CALL_OW 437
65624: PUSH
65625: LD_INT 1
65627: ARRAY
65628: PUSH
65629: LD_INT 1
65631: ARRAY
65632: EQUAL
65633: PUSH
65634: LD_VAR 0 4
65638: PUSH
65639: LD_VAR 0 1
65643: PPUSH
65644: CALL_OW 437
65648: PUSH
65649: LD_INT 1
65651: ARRAY
65652: PUSH
65653: LD_INT 2
65655: ARRAY
65656: EQUAL
65657: AND
65658: PUSH
65659: LD_VAR 0 5
65663: PUSH
65664: LD_VAR 0 1
65668: PPUSH
65669: CALL_OW 437
65673: PUSH
65674: LD_INT 1
65676: ARRAY
65677: PUSH
65678: LD_INT 3
65680: ARRAY
65681: EQUAL
65682: AND
65683: IFFALSE 65693
// result := true end ;
65685: LD_ADDR_VAR 0 3
65689: PUSH
65690: LD_INT 1
65692: ST_TO_ADDR
// end ;
65693: LD_VAR 0 3
65697: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65698: LD_INT 0
65700: PPUSH
// result := false ;
65701: LD_ADDR_VAR 0 4
65705: PUSH
65706: LD_INT 0
65708: ST_TO_ADDR
// if GetTaskList ( unit ) then
65709: LD_VAR 0 1
65713: PPUSH
65714: CALL_OW 437
65718: IFFALSE 65801
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65720: LD_STRING M
65722: PUSH
65723: LD_VAR 0 1
65727: PPUSH
65728: CALL_OW 437
65732: PUSH
65733: LD_INT 1
65735: ARRAY
65736: PUSH
65737: LD_INT 1
65739: ARRAY
65740: EQUAL
65741: PUSH
65742: LD_VAR 0 2
65746: PUSH
65747: LD_VAR 0 1
65751: PPUSH
65752: CALL_OW 437
65756: PUSH
65757: LD_INT 1
65759: ARRAY
65760: PUSH
65761: LD_INT 2
65763: ARRAY
65764: EQUAL
65765: AND
65766: PUSH
65767: LD_VAR 0 3
65771: PUSH
65772: LD_VAR 0 1
65776: PPUSH
65777: CALL_OW 437
65781: PUSH
65782: LD_INT 1
65784: ARRAY
65785: PUSH
65786: LD_INT 3
65788: ARRAY
65789: EQUAL
65790: AND
65791: IFFALSE 65801
// result := true ;
65793: LD_ADDR_VAR 0 4
65797: PUSH
65798: LD_INT 1
65800: ST_TO_ADDR
// end ; end ;
65801: LD_VAR 0 4
65805: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65806: LD_INT 0
65808: PPUSH
65809: PPUSH
65810: PPUSH
65811: PPUSH
// if not unit or not area then
65812: LD_VAR 0 1
65816: NOT
65817: PUSH
65818: LD_VAR 0 2
65822: NOT
65823: OR
65824: IFFALSE 65828
// exit ;
65826: GO 65992
// tmp := AreaToList ( area , i ) ;
65828: LD_ADDR_VAR 0 6
65832: PUSH
65833: LD_VAR 0 2
65837: PPUSH
65838: LD_VAR 0 5
65842: PPUSH
65843: CALL_OW 517
65847: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65848: LD_ADDR_VAR 0 5
65852: PUSH
65853: DOUBLE
65854: LD_INT 1
65856: DEC
65857: ST_TO_ADDR
65858: LD_VAR 0 6
65862: PUSH
65863: LD_INT 1
65865: ARRAY
65866: PUSH
65867: FOR_TO
65868: IFFALSE 65990
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65870: LD_ADDR_VAR 0 7
65874: PUSH
65875: LD_VAR 0 6
65879: PUSH
65880: LD_INT 1
65882: ARRAY
65883: PUSH
65884: LD_VAR 0 5
65888: ARRAY
65889: PUSH
65890: LD_VAR 0 6
65894: PUSH
65895: LD_INT 2
65897: ARRAY
65898: PUSH
65899: LD_VAR 0 5
65903: ARRAY
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65909: LD_VAR 0 7
65913: PUSH
65914: LD_INT 1
65916: ARRAY
65917: PPUSH
65918: LD_VAR 0 7
65922: PUSH
65923: LD_INT 2
65925: ARRAY
65926: PPUSH
65927: CALL_OW 428
65931: PUSH
65932: LD_INT 0
65934: EQUAL
65935: IFFALSE 65988
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65937: LD_VAR 0 1
65941: PPUSH
65942: LD_VAR 0 7
65946: PUSH
65947: LD_INT 1
65949: ARRAY
65950: PPUSH
65951: LD_VAR 0 7
65955: PUSH
65956: LD_INT 2
65958: ARRAY
65959: PPUSH
65960: LD_VAR 0 3
65964: PPUSH
65965: CALL_OW 48
// result := IsPlaced ( unit ) ;
65969: LD_ADDR_VAR 0 4
65973: PUSH
65974: LD_VAR 0 1
65978: PPUSH
65979: CALL_OW 305
65983: ST_TO_ADDR
// exit ;
65984: POP
65985: POP
65986: GO 65992
// end ; end ;
65988: GO 65867
65990: POP
65991: POP
// end ;
65992: LD_VAR 0 4
65996: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65997: LD_INT 0
65999: PPUSH
66000: PPUSH
66001: PPUSH
// if not side or side > 8 then
66002: LD_VAR 0 1
66006: NOT
66007: PUSH
66008: LD_VAR 0 1
66012: PUSH
66013: LD_INT 8
66015: GREATER
66016: OR
66017: IFFALSE 66021
// exit ;
66019: GO 66208
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66021: LD_ADDR_VAR 0 4
66025: PUSH
66026: LD_INT 22
66028: PUSH
66029: LD_VAR 0 1
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 21
66040: PUSH
66041: LD_INT 3
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PPUSH
66052: CALL_OW 69
66056: ST_TO_ADDR
// if not tmp then
66057: LD_VAR 0 4
66061: NOT
66062: IFFALSE 66066
// exit ;
66064: GO 66208
// enable_addtolog := true ;
66066: LD_ADDR_OWVAR 81
66070: PUSH
66071: LD_INT 1
66073: ST_TO_ADDR
// AddToLog ( [ ) ;
66074: LD_STRING [
66076: PPUSH
66077: CALL_OW 561
// for i in tmp do
66081: LD_ADDR_VAR 0 3
66085: PUSH
66086: LD_VAR 0 4
66090: PUSH
66091: FOR_IN
66092: IFFALSE 66199
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66094: LD_STRING [
66096: PUSH
66097: LD_VAR 0 3
66101: PPUSH
66102: CALL_OW 266
66106: STR
66107: PUSH
66108: LD_STRING , 
66110: STR
66111: PUSH
66112: LD_VAR 0 3
66116: PPUSH
66117: CALL_OW 250
66121: STR
66122: PUSH
66123: LD_STRING , 
66125: STR
66126: PUSH
66127: LD_VAR 0 3
66131: PPUSH
66132: CALL_OW 251
66136: STR
66137: PUSH
66138: LD_STRING , 
66140: STR
66141: PUSH
66142: LD_VAR 0 3
66146: PPUSH
66147: CALL_OW 254
66151: STR
66152: PUSH
66153: LD_STRING , 
66155: STR
66156: PUSH
66157: LD_VAR 0 3
66161: PPUSH
66162: LD_INT 1
66164: PPUSH
66165: CALL_OW 268
66169: STR
66170: PUSH
66171: LD_STRING , 
66173: STR
66174: PUSH
66175: LD_VAR 0 3
66179: PPUSH
66180: LD_INT 2
66182: PPUSH
66183: CALL_OW 268
66187: STR
66188: PUSH
66189: LD_STRING ],
66191: STR
66192: PPUSH
66193: CALL_OW 561
// end ;
66197: GO 66091
66199: POP
66200: POP
// AddToLog ( ]; ) ;
66201: LD_STRING ];
66203: PPUSH
66204: CALL_OW 561
// end ;
66208: LD_VAR 0 2
66212: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66213: LD_INT 0
66215: PPUSH
66216: PPUSH
66217: PPUSH
66218: PPUSH
66219: PPUSH
// if not area or not rate or not max then
66220: LD_VAR 0 1
66224: NOT
66225: PUSH
66226: LD_VAR 0 2
66230: NOT
66231: OR
66232: PUSH
66233: LD_VAR 0 4
66237: NOT
66238: OR
66239: IFFALSE 66243
// exit ;
66241: GO 66432
// while 1 do
66243: LD_INT 1
66245: IFFALSE 66432
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66247: LD_ADDR_VAR 0 9
66251: PUSH
66252: LD_VAR 0 1
66256: PPUSH
66257: LD_INT 1
66259: PPUSH
66260: CALL_OW 287
66264: PUSH
66265: LD_INT 10
66267: MUL
66268: ST_TO_ADDR
// r := rate / 10 ;
66269: LD_ADDR_VAR 0 7
66273: PUSH
66274: LD_VAR 0 2
66278: PUSH
66279: LD_INT 10
66281: DIVREAL
66282: ST_TO_ADDR
// time := 1 1$00 ;
66283: LD_ADDR_VAR 0 8
66287: PUSH
66288: LD_INT 2100
66290: ST_TO_ADDR
// if amount < min then
66291: LD_VAR 0 9
66295: PUSH
66296: LD_VAR 0 3
66300: LESS
66301: IFFALSE 66319
// r := r * 2 else
66303: LD_ADDR_VAR 0 7
66307: PUSH
66308: LD_VAR 0 7
66312: PUSH
66313: LD_INT 2
66315: MUL
66316: ST_TO_ADDR
66317: GO 66345
// if amount > max then
66319: LD_VAR 0 9
66323: PUSH
66324: LD_VAR 0 4
66328: GREATER
66329: IFFALSE 66345
// r := r / 2 ;
66331: LD_ADDR_VAR 0 7
66335: PUSH
66336: LD_VAR 0 7
66340: PUSH
66341: LD_INT 2
66343: DIVREAL
66344: ST_TO_ADDR
// time := time / r ;
66345: LD_ADDR_VAR 0 8
66349: PUSH
66350: LD_VAR 0 8
66354: PUSH
66355: LD_VAR 0 7
66359: DIVREAL
66360: ST_TO_ADDR
// if time < 0 then
66361: LD_VAR 0 8
66365: PUSH
66366: LD_INT 0
66368: LESS
66369: IFFALSE 66386
// time := time * - 1 ;
66371: LD_ADDR_VAR 0 8
66375: PUSH
66376: LD_VAR 0 8
66380: PUSH
66381: LD_INT 1
66383: NEG
66384: MUL
66385: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66386: LD_VAR 0 8
66390: PUSH
66391: LD_INT 35
66393: PPUSH
66394: LD_INT 875
66396: PPUSH
66397: CALL_OW 12
66401: PLUS
66402: PPUSH
66403: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66407: LD_INT 1
66409: PPUSH
66410: LD_INT 5
66412: PPUSH
66413: CALL_OW 12
66417: PPUSH
66418: LD_VAR 0 1
66422: PPUSH
66423: LD_INT 1
66425: PPUSH
66426: CALL_OW 55
// end ;
66430: GO 66243
// end ;
66432: LD_VAR 0 5
66436: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66437: LD_INT 0
66439: PPUSH
66440: PPUSH
66441: PPUSH
66442: PPUSH
66443: PPUSH
66444: PPUSH
66445: PPUSH
66446: PPUSH
// if not turrets or not factories then
66447: LD_VAR 0 1
66451: NOT
66452: PUSH
66453: LD_VAR 0 2
66457: NOT
66458: OR
66459: IFFALSE 66463
// exit ;
66461: GO 66770
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66463: LD_ADDR_VAR 0 10
66467: PUSH
66468: LD_INT 5
66470: PUSH
66471: LD_INT 6
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 2
66480: PUSH
66481: LD_INT 4
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 3
66490: PUSH
66491: LD_INT 5
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 24
66505: PUSH
66506: LD_INT 25
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 23
66515: PUSH
66516: LD_INT 27
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 42
66529: PUSH
66530: LD_INT 43
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 44
66539: PUSH
66540: LD_INT 46
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 45
66549: PUSH
66550: LD_INT 47
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: LIST
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: LIST
66566: ST_TO_ADDR
// result := [ ] ;
66567: LD_ADDR_VAR 0 3
66571: PUSH
66572: EMPTY
66573: ST_TO_ADDR
// for i in turrets do
66574: LD_ADDR_VAR 0 4
66578: PUSH
66579: LD_VAR 0 1
66583: PUSH
66584: FOR_IN
66585: IFFALSE 66768
// begin nat := GetNation ( i ) ;
66587: LD_ADDR_VAR 0 7
66591: PUSH
66592: LD_VAR 0 4
66596: PPUSH
66597: CALL_OW 248
66601: ST_TO_ADDR
// weapon := 0 ;
66602: LD_ADDR_VAR 0 8
66606: PUSH
66607: LD_INT 0
66609: ST_TO_ADDR
// if not nat then
66610: LD_VAR 0 7
66614: NOT
66615: IFFALSE 66619
// continue ;
66617: GO 66584
// for j in list [ nat ] do
66619: LD_ADDR_VAR 0 5
66623: PUSH
66624: LD_VAR 0 10
66628: PUSH
66629: LD_VAR 0 7
66633: ARRAY
66634: PUSH
66635: FOR_IN
66636: IFFALSE 66677
// if GetBWeapon ( i ) = j [ 1 ] then
66638: LD_VAR 0 4
66642: PPUSH
66643: CALL_OW 269
66647: PUSH
66648: LD_VAR 0 5
66652: PUSH
66653: LD_INT 1
66655: ARRAY
66656: EQUAL
66657: IFFALSE 66675
// begin weapon := j [ 2 ] ;
66659: LD_ADDR_VAR 0 8
66663: PUSH
66664: LD_VAR 0 5
66668: PUSH
66669: LD_INT 2
66671: ARRAY
66672: ST_TO_ADDR
// break ;
66673: GO 66677
// end ;
66675: GO 66635
66677: POP
66678: POP
// if not weapon then
66679: LD_VAR 0 8
66683: NOT
66684: IFFALSE 66688
// continue ;
66686: GO 66584
// for k in factories do
66688: LD_ADDR_VAR 0 6
66692: PUSH
66693: LD_VAR 0 2
66697: PUSH
66698: FOR_IN
66699: IFFALSE 66764
// begin weapons := AvailableWeaponList ( k ) ;
66701: LD_ADDR_VAR 0 9
66705: PUSH
66706: LD_VAR 0 6
66710: PPUSH
66711: CALL_OW 478
66715: ST_TO_ADDR
// if not weapons then
66716: LD_VAR 0 9
66720: NOT
66721: IFFALSE 66725
// continue ;
66723: GO 66698
// if weapon in weapons then
66725: LD_VAR 0 8
66729: PUSH
66730: LD_VAR 0 9
66734: IN
66735: IFFALSE 66762
// begin result := [ i , weapon ] ;
66737: LD_ADDR_VAR 0 3
66741: PUSH
66742: LD_VAR 0 4
66746: PUSH
66747: LD_VAR 0 8
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: ST_TO_ADDR
// exit ;
66756: POP
66757: POP
66758: POP
66759: POP
66760: GO 66770
// end ; end ;
66762: GO 66698
66764: POP
66765: POP
// end ;
66766: GO 66584
66768: POP
66769: POP
// end ;
66770: LD_VAR 0 3
66774: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66775: LD_INT 0
66777: PPUSH
// if not side or side > 8 then
66778: LD_VAR 0 3
66782: NOT
66783: PUSH
66784: LD_VAR 0 3
66788: PUSH
66789: LD_INT 8
66791: GREATER
66792: OR
66793: IFFALSE 66797
// exit ;
66795: GO 66856
// if not range then
66797: LD_VAR 0 4
66801: NOT
66802: IFFALSE 66813
// range := - 12 ;
66804: LD_ADDR_VAR 0 4
66808: PUSH
66809: LD_INT 12
66811: NEG
66812: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66813: LD_VAR 0 1
66817: PPUSH
66818: LD_VAR 0 2
66822: PPUSH
66823: LD_VAR 0 3
66827: PPUSH
66828: LD_VAR 0 4
66832: PPUSH
66833: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66837: LD_VAR 0 1
66841: PPUSH
66842: LD_VAR 0 2
66846: PPUSH
66847: LD_VAR 0 3
66851: PPUSH
66852: CALL_OW 331
// end ;
66856: LD_VAR 0 5
66860: RET
// export function Video ( mode ) ; begin
66861: LD_INT 0
66863: PPUSH
// ingame_video = mode ;
66864: LD_ADDR_OWVAR 52
66868: PUSH
66869: LD_VAR 0 1
66873: ST_TO_ADDR
// interface_hidden = mode ;
66874: LD_ADDR_OWVAR 54
66878: PUSH
66879: LD_VAR 0 1
66883: ST_TO_ADDR
// end ;
66884: LD_VAR 0 2
66888: RET
// export function Join ( array , element ) ; begin
66889: LD_INT 0
66891: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66892: LD_ADDR_VAR 0 3
66896: PUSH
66897: LD_VAR 0 1
66901: PPUSH
66902: LD_VAR 0 1
66906: PUSH
66907: LD_INT 1
66909: PLUS
66910: PPUSH
66911: LD_VAR 0 2
66915: PPUSH
66916: CALL_OW 1
66920: ST_TO_ADDR
// end ;
66921: LD_VAR 0 3
66925: RET
// export function JoinUnion ( array , element ) ; begin
66926: LD_INT 0
66928: PPUSH
// result := array union element ;
66929: LD_ADDR_VAR 0 3
66933: PUSH
66934: LD_VAR 0 1
66938: PUSH
66939: LD_VAR 0 2
66943: UNION
66944: ST_TO_ADDR
// end ;
66945: LD_VAR 0 3
66949: RET
// export function GetBehemoths ( side ) ; begin
66950: LD_INT 0
66952: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66953: LD_ADDR_VAR 0 2
66957: PUSH
66958: LD_INT 22
66960: PUSH
66961: LD_VAR 0 1
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 31
66972: PUSH
66973: LD_INT 25
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PPUSH
66984: CALL_OW 69
66988: ST_TO_ADDR
// end ;
66989: LD_VAR 0 2
66993: RET
// export function Shuffle ( array ) ; var i , index ; begin
66994: LD_INT 0
66996: PPUSH
66997: PPUSH
66998: PPUSH
// result := [ ] ;
66999: LD_ADDR_VAR 0 2
67003: PUSH
67004: EMPTY
67005: ST_TO_ADDR
// if not array then
67006: LD_VAR 0 1
67010: NOT
67011: IFFALSE 67015
// exit ;
67013: GO 67114
// Randomize ;
67015: CALL_OW 10
// for i = array downto 1 do
67019: LD_ADDR_VAR 0 3
67023: PUSH
67024: DOUBLE
67025: LD_VAR 0 1
67029: INC
67030: ST_TO_ADDR
67031: LD_INT 1
67033: PUSH
67034: FOR_DOWNTO
67035: IFFALSE 67112
// begin index := rand ( 1 , array ) ;
67037: LD_ADDR_VAR 0 4
67041: PUSH
67042: LD_INT 1
67044: PPUSH
67045: LD_VAR 0 1
67049: PPUSH
67050: CALL_OW 12
67054: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67055: LD_ADDR_VAR 0 2
67059: PUSH
67060: LD_VAR 0 2
67064: PPUSH
67065: LD_VAR 0 2
67069: PUSH
67070: LD_INT 1
67072: PLUS
67073: PPUSH
67074: LD_VAR 0 1
67078: PUSH
67079: LD_VAR 0 4
67083: ARRAY
67084: PPUSH
67085: CALL_OW 2
67089: ST_TO_ADDR
// array := Delete ( array , index ) ;
67090: LD_ADDR_VAR 0 1
67094: PUSH
67095: LD_VAR 0 1
67099: PPUSH
67100: LD_VAR 0 4
67104: PPUSH
67105: CALL_OW 3
67109: ST_TO_ADDR
// end ;
67110: GO 67034
67112: POP
67113: POP
// end ;
67114: LD_VAR 0 2
67118: RET
// export function GetBaseMaterials ( base ) ; begin
67119: LD_INT 0
67121: PPUSH
// result := [ 0 , 0 , 0 ] ;
67122: LD_ADDR_VAR 0 2
67126: PUSH
67127: LD_INT 0
67129: PUSH
67130: LD_INT 0
67132: PUSH
67133: LD_INT 0
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: LIST
67140: ST_TO_ADDR
// if not base then
67141: LD_VAR 0 1
67145: NOT
67146: IFFALSE 67150
// exit ;
67148: GO 67199
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67150: LD_ADDR_VAR 0 2
67154: PUSH
67155: LD_VAR 0 1
67159: PPUSH
67160: LD_INT 1
67162: PPUSH
67163: CALL_OW 275
67167: PUSH
67168: LD_VAR 0 1
67172: PPUSH
67173: LD_INT 2
67175: PPUSH
67176: CALL_OW 275
67180: PUSH
67181: LD_VAR 0 1
67185: PPUSH
67186: LD_INT 3
67188: PPUSH
67189: CALL_OW 275
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: LIST
67198: ST_TO_ADDR
// end ;
67199: LD_VAR 0 2
67203: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67204: LD_INT 0
67206: PPUSH
67207: PPUSH
// result := array ;
67208: LD_ADDR_VAR 0 3
67212: PUSH
67213: LD_VAR 0 1
67217: ST_TO_ADDR
// if size >= result then
67218: LD_VAR 0 2
67222: PUSH
67223: LD_VAR 0 3
67227: GREATEREQUAL
67228: IFFALSE 67232
// exit ;
67230: GO 67282
// if size then
67232: LD_VAR 0 2
67236: IFFALSE 67282
// for i := array downto size do
67238: LD_ADDR_VAR 0 4
67242: PUSH
67243: DOUBLE
67244: LD_VAR 0 1
67248: INC
67249: ST_TO_ADDR
67250: LD_VAR 0 2
67254: PUSH
67255: FOR_DOWNTO
67256: IFFALSE 67280
// result := Delete ( result , result ) ;
67258: LD_ADDR_VAR 0 3
67262: PUSH
67263: LD_VAR 0 3
67267: PPUSH
67268: LD_VAR 0 3
67272: PPUSH
67273: CALL_OW 3
67277: ST_TO_ADDR
67278: GO 67255
67280: POP
67281: POP
// end ;
67282: LD_VAR 0 3
67286: RET
// export function ComExit ( unit ) ; var tmp ; begin
67287: LD_INT 0
67289: PPUSH
67290: PPUSH
// if not IsInUnit ( unit ) then
67291: LD_VAR 0 1
67295: PPUSH
67296: CALL_OW 310
67300: NOT
67301: IFFALSE 67305
// exit ;
67303: GO 67365
// tmp := IsInUnit ( unit ) ;
67305: LD_ADDR_VAR 0 3
67309: PUSH
67310: LD_VAR 0 1
67314: PPUSH
67315: CALL_OW 310
67319: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67320: LD_VAR 0 3
67324: PPUSH
67325: CALL_OW 247
67329: PUSH
67330: LD_INT 2
67332: EQUAL
67333: IFFALSE 67346
// ComExitVehicle ( unit ) else
67335: LD_VAR 0 1
67339: PPUSH
67340: CALL_OW 121
67344: GO 67355
// ComExitBuilding ( unit ) ;
67346: LD_VAR 0 1
67350: PPUSH
67351: CALL_OW 122
// result := tmp ;
67355: LD_ADDR_VAR 0 2
67359: PUSH
67360: LD_VAR 0 3
67364: ST_TO_ADDR
// end ;
67365: LD_VAR 0 2
67369: RET
// export function ComExitAll ( units ) ; var i ; begin
67370: LD_INT 0
67372: PPUSH
67373: PPUSH
// if not units then
67374: LD_VAR 0 1
67378: NOT
67379: IFFALSE 67383
// exit ;
67381: GO 67409
// for i in units do
67383: LD_ADDR_VAR 0 3
67387: PUSH
67388: LD_VAR 0 1
67392: PUSH
67393: FOR_IN
67394: IFFALSE 67407
// ComExit ( i ) ;
67396: LD_VAR 0 3
67400: PPUSH
67401: CALL 67287 0 1
67405: GO 67393
67407: POP
67408: POP
// end ;
67409: LD_VAR 0 2
67413: RET
// export function ResetHc ; begin
67414: LD_INT 0
67416: PPUSH
// InitHc ;
67417: CALL_OW 19
// hc_importance := 0 ;
67421: LD_ADDR_OWVAR 32
67425: PUSH
67426: LD_INT 0
67428: ST_TO_ADDR
// end ;
67429: LD_VAR 0 1
67433: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67434: LD_INT 0
67436: PPUSH
67437: PPUSH
67438: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67439: LD_ADDR_VAR 0 6
67443: PUSH
67444: LD_VAR 0 1
67448: PUSH
67449: LD_VAR 0 3
67453: PLUS
67454: PUSH
67455: LD_INT 2
67457: DIV
67458: ST_TO_ADDR
// if _x < 0 then
67459: LD_VAR 0 6
67463: PUSH
67464: LD_INT 0
67466: LESS
67467: IFFALSE 67484
// _x := _x * - 1 ;
67469: LD_ADDR_VAR 0 6
67473: PUSH
67474: LD_VAR 0 6
67478: PUSH
67479: LD_INT 1
67481: NEG
67482: MUL
67483: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67484: LD_ADDR_VAR 0 7
67488: PUSH
67489: LD_VAR 0 2
67493: PUSH
67494: LD_VAR 0 4
67498: PLUS
67499: PUSH
67500: LD_INT 2
67502: DIV
67503: ST_TO_ADDR
// if _y < 0 then
67504: LD_VAR 0 7
67508: PUSH
67509: LD_INT 0
67511: LESS
67512: IFFALSE 67529
// _y := _y * - 1 ;
67514: LD_ADDR_VAR 0 7
67518: PUSH
67519: LD_VAR 0 7
67523: PUSH
67524: LD_INT 1
67526: NEG
67527: MUL
67528: ST_TO_ADDR
// result := [ _x , _y ] ;
67529: LD_ADDR_VAR 0 5
67533: PUSH
67534: LD_VAR 0 6
67538: PUSH
67539: LD_VAR 0 7
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: ST_TO_ADDR
// end ;
67548: LD_VAR 0 5
67552: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67553: LD_INT 0
67555: PPUSH
67556: PPUSH
67557: PPUSH
67558: PPUSH
// task := GetTaskList ( unit ) ;
67559: LD_ADDR_VAR 0 7
67563: PUSH
67564: LD_VAR 0 1
67568: PPUSH
67569: CALL_OW 437
67573: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67574: LD_VAR 0 7
67578: NOT
67579: PUSH
67580: LD_VAR 0 1
67584: PPUSH
67585: LD_VAR 0 2
67589: PPUSH
67590: CALL_OW 308
67594: NOT
67595: AND
67596: IFFALSE 67600
// exit ;
67598: GO 67718
// if IsInArea ( unit , area ) then
67600: LD_VAR 0 1
67604: PPUSH
67605: LD_VAR 0 2
67609: PPUSH
67610: CALL_OW 308
67614: IFFALSE 67632
// begin ComMoveToArea ( unit , goAway ) ;
67616: LD_VAR 0 1
67620: PPUSH
67621: LD_VAR 0 3
67625: PPUSH
67626: CALL_OW 113
// exit ;
67630: GO 67718
// end ; if task [ 1 ] [ 1 ] <> M then
67632: LD_VAR 0 7
67636: PUSH
67637: LD_INT 1
67639: ARRAY
67640: PUSH
67641: LD_INT 1
67643: ARRAY
67644: PUSH
67645: LD_STRING M
67647: NONEQUAL
67648: IFFALSE 67652
// exit ;
67650: GO 67718
// x := task [ 1 ] [ 2 ] ;
67652: LD_ADDR_VAR 0 5
67656: PUSH
67657: LD_VAR 0 7
67661: PUSH
67662: LD_INT 1
67664: ARRAY
67665: PUSH
67666: LD_INT 2
67668: ARRAY
67669: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67670: LD_ADDR_VAR 0 6
67674: PUSH
67675: LD_VAR 0 7
67679: PUSH
67680: LD_INT 1
67682: ARRAY
67683: PUSH
67684: LD_INT 3
67686: ARRAY
67687: ST_TO_ADDR
// if InArea ( x , y , area ) then
67688: LD_VAR 0 5
67692: PPUSH
67693: LD_VAR 0 6
67697: PPUSH
67698: LD_VAR 0 2
67702: PPUSH
67703: CALL_OW 309
67707: IFFALSE 67718
// ComStop ( unit ) ;
67709: LD_VAR 0 1
67713: PPUSH
67714: CALL_OW 141
// end ;
67718: LD_VAR 0 4
67722: RET
// export function Abs ( value ) ; begin
67723: LD_INT 0
67725: PPUSH
// result := value ;
67726: LD_ADDR_VAR 0 2
67730: PUSH
67731: LD_VAR 0 1
67735: ST_TO_ADDR
// if value < 0 then
67736: LD_VAR 0 1
67740: PUSH
67741: LD_INT 0
67743: LESS
67744: IFFALSE 67761
// result := value * - 1 ;
67746: LD_ADDR_VAR 0 2
67750: PUSH
67751: LD_VAR 0 1
67755: PUSH
67756: LD_INT 1
67758: NEG
67759: MUL
67760: ST_TO_ADDR
// end ;
67761: LD_VAR 0 2
67765: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67766: LD_INT 0
67768: PPUSH
67769: PPUSH
67770: PPUSH
67771: PPUSH
67772: PPUSH
67773: PPUSH
67774: PPUSH
67775: PPUSH
// if not unit or not building then
67776: LD_VAR 0 1
67780: NOT
67781: PUSH
67782: LD_VAR 0 2
67786: NOT
67787: OR
67788: IFFALSE 67792
// exit ;
67790: GO 68018
// x := GetX ( building ) ;
67792: LD_ADDR_VAR 0 4
67796: PUSH
67797: LD_VAR 0 2
67801: PPUSH
67802: CALL_OW 250
67806: ST_TO_ADDR
// y := GetY ( building ) ;
67807: LD_ADDR_VAR 0 6
67811: PUSH
67812: LD_VAR 0 2
67816: PPUSH
67817: CALL_OW 251
67821: ST_TO_ADDR
// d := GetDir ( building ) ;
67822: LD_ADDR_VAR 0 8
67826: PUSH
67827: LD_VAR 0 2
67831: PPUSH
67832: CALL_OW 254
67836: ST_TO_ADDR
// r := 4 ;
67837: LD_ADDR_VAR 0 9
67841: PUSH
67842: LD_INT 4
67844: ST_TO_ADDR
// for i := 1 to 5 do
67845: LD_ADDR_VAR 0 10
67849: PUSH
67850: DOUBLE
67851: LD_INT 1
67853: DEC
67854: ST_TO_ADDR
67855: LD_INT 5
67857: PUSH
67858: FOR_TO
67859: IFFALSE 68016
// begin _x := ShiftX ( x , d , r + i ) ;
67861: LD_ADDR_VAR 0 5
67865: PUSH
67866: LD_VAR 0 4
67870: PPUSH
67871: LD_VAR 0 8
67875: PPUSH
67876: LD_VAR 0 9
67880: PUSH
67881: LD_VAR 0 10
67885: PLUS
67886: PPUSH
67887: CALL_OW 272
67891: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67892: LD_ADDR_VAR 0 7
67896: PUSH
67897: LD_VAR 0 6
67901: PPUSH
67902: LD_VAR 0 8
67906: PPUSH
67907: LD_VAR 0 9
67911: PUSH
67912: LD_VAR 0 10
67916: PLUS
67917: PPUSH
67918: CALL_OW 273
67922: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67923: LD_VAR 0 5
67927: PPUSH
67928: LD_VAR 0 7
67932: PPUSH
67933: CALL_OW 488
67937: PUSH
67938: LD_VAR 0 5
67942: PPUSH
67943: LD_VAR 0 7
67947: PPUSH
67948: CALL_OW 428
67952: PPUSH
67953: CALL_OW 247
67957: PUSH
67958: LD_INT 3
67960: PUSH
67961: LD_INT 2
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: IN
67968: NOT
67969: AND
67970: IFFALSE 68014
// begin ComMoveXY ( unit , _x , _y ) ;
67972: LD_VAR 0 1
67976: PPUSH
67977: LD_VAR 0 5
67981: PPUSH
67982: LD_VAR 0 7
67986: PPUSH
67987: CALL_OW 111
// result := [ _x , _y ] ;
67991: LD_ADDR_VAR 0 3
67995: PUSH
67996: LD_VAR 0 5
68000: PUSH
68001: LD_VAR 0 7
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: ST_TO_ADDR
// exit ;
68010: POP
68011: POP
68012: GO 68018
// end ; end ;
68014: GO 67858
68016: POP
68017: POP
// end ;
68018: LD_VAR 0 3
68022: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68023: LD_INT 0
68025: PPUSH
68026: PPUSH
68027: PPUSH
// result := 0 ;
68028: LD_ADDR_VAR 0 3
68032: PUSH
68033: LD_INT 0
68035: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68036: LD_VAR 0 1
68040: PUSH
68041: LD_INT 0
68043: LESS
68044: PUSH
68045: LD_VAR 0 1
68049: PUSH
68050: LD_INT 8
68052: GREATER
68053: OR
68054: PUSH
68055: LD_VAR 0 2
68059: PUSH
68060: LD_INT 0
68062: LESS
68063: OR
68064: PUSH
68065: LD_VAR 0 2
68069: PUSH
68070: LD_INT 8
68072: GREATER
68073: OR
68074: IFFALSE 68078
// exit ;
68076: GO 68153
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68078: LD_ADDR_VAR 0 4
68082: PUSH
68083: LD_INT 22
68085: PUSH
68086: LD_VAR 0 2
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PPUSH
68095: CALL_OW 69
68099: PUSH
68100: FOR_IN
68101: IFFALSE 68151
// begin un := UnitShoot ( i ) ;
68103: LD_ADDR_VAR 0 5
68107: PUSH
68108: LD_VAR 0 4
68112: PPUSH
68113: CALL_OW 504
68117: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68118: LD_VAR 0 5
68122: PPUSH
68123: CALL_OW 255
68127: PUSH
68128: LD_VAR 0 1
68132: EQUAL
68133: IFFALSE 68149
// begin result := un ;
68135: LD_ADDR_VAR 0 3
68139: PUSH
68140: LD_VAR 0 5
68144: ST_TO_ADDR
// exit ;
68145: POP
68146: POP
68147: GO 68153
// end ; end ;
68149: GO 68100
68151: POP
68152: POP
// end ;
68153: LD_VAR 0 3
68157: RET
// export function GetCargoBay ( units ) ; begin
68158: LD_INT 0
68160: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68161: LD_ADDR_VAR 0 2
68165: PUSH
68166: LD_VAR 0 1
68170: PPUSH
68171: LD_INT 2
68173: PUSH
68174: LD_INT 34
68176: PUSH
68177: LD_INT 12
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 34
68186: PUSH
68187: LD_INT 51
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 34
68196: PUSH
68197: LD_INT 32
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 34
68206: PUSH
68207: LD_INT 89
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: PPUSH
68221: CALL_OW 72
68225: ST_TO_ADDR
// end ;
68226: LD_VAR 0 2
68230: RET
// export function Negate ( value ) ; begin
68231: LD_INT 0
68233: PPUSH
// result := not value ;
68234: LD_ADDR_VAR 0 2
68238: PUSH
68239: LD_VAR 0 1
68243: NOT
68244: ST_TO_ADDR
// end ;
68245: LD_VAR 0 2
68249: RET
// export function Inc ( value ) ; begin
68250: LD_INT 0
68252: PPUSH
// result := value + 1 ;
68253: LD_ADDR_VAR 0 2
68257: PUSH
68258: LD_VAR 0 1
68262: PUSH
68263: LD_INT 1
68265: PLUS
68266: ST_TO_ADDR
// end ;
68267: LD_VAR 0 2
68271: RET
// export function Dec ( value ) ; begin
68272: LD_INT 0
68274: PPUSH
// result := value - 1 ;
68275: LD_ADDR_VAR 0 2
68279: PUSH
68280: LD_VAR 0 1
68284: PUSH
68285: LD_INT 1
68287: MINUS
68288: ST_TO_ADDR
// end ;
68289: LD_VAR 0 2
68293: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68294: LD_INT 0
68296: PPUSH
68297: PPUSH
68298: PPUSH
68299: PPUSH
68300: PPUSH
68301: PPUSH
68302: PPUSH
68303: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68304: LD_VAR 0 1
68308: PPUSH
68309: LD_VAR 0 2
68313: PPUSH
68314: CALL_OW 488
68318: NOT
68319: PUSH
68320: LD_VAR 0 3
68324: PPUSH
68325: LD_VAR 0 4
68329: PPUSH
68330: CALL_OW 488
68334: NOT
68335: OR
68336: IFFALSE 68349
// begin result := - 1 ;
68338: LD_ADDR_VAR 0 5
68342: PUSH
68343: LD_INT 1
68345: NEG
68346: ST_TO_ADDR
// exit ;
68347: GO 68584
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68349: LD_ADDR_VAR 0 12
68353: PUSH
68354: LD_VAR 0 1
68358: PPUSH
68359: LD_VAR 0 2
68363: PPUSH
68364: LD_VAR 0 3
68368: PPUSH
68369: LD_VAR 0 4
68373: PPUSH
68374: CALL 67434 0 4
68378: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68379: LD_ADDR_VAR 0 11
68383: PUSH
68384: LD_VAR 0 1
68388: PPUSH
68389: LD_VAR 0 2
68393: PPUSH
68394: LD_VAR 0 12
68398: PUSH
68399: LD_INT 1
68401: ARRAY
68402: PPUSH
68403: LD_VAR 0 12
68407: PUSH
68408: LD_INT 2
68410: ARRAY
68411: PPUSH
68412: CALL_OW 298
68416: ST_TO_ADDR
// distance := 9999 ;
68417: LD_ADDR_VAR 0 10
68421: PUSH
68422: LD_INT 9999
68424: ST_TO_ADDR
// for i := 0 to 5 do
68425: LD_ADDR_VAR 0 6
68429: PUSH
68430: DOUBLE
68431: LD_INT 0
68433: DEC
68434: ST_TO_ADDR
68435: LD_INT 5
68437: PUSH
68438: FOR_TO
68439: IFFALSE 68582
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68441: LD_ADDR_VAR 0 7
68445: PUSH
68446: LD_VAR 0 1
68450: PPUSH
68451: LD_VAR 0 6
68455: PPUSH
68456: LD_VAR 0 11
68460: PPUSH
68461: CALL_OW 272
68465: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68466: LD_ADDR_VAR 0 8
68470: PUSH
68471: LD_VAR 0 2
68475: PPUSH
68476: LD_VAR 0 6
68480: PPUSH
68481: LD_VAR 0 11
68485: PPUSH
68486: CALL_OW 273
68490: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68491: LD_VAR 0 7
68495: PPUSH
68496: LD_VAR 0 8
68500: PPUSH
68501: CALL_OW 488
68505: NOT
68506: IFFALSE 68510
// continue ;
68508: GO 68438
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68510: LD_ADDR_VAR 0 9
68514: PUSH
68515: LD_VAR 0 12
68519: PUSH
68520: LD_INT 1
68522: ARRAY
68523: PPUSH
68524: LD_VAR 0 12
68528: PUSH
68529: LD_INT 2
68531: ARRAY
68532: PPUSH
68533: LD_VAR 0 7
68537: PPUSH
68538: LD_VAR 0 8
68542: PPUSH
68543: CALL_OW 298
68547: ST_TO_ADDR
// if tmp < distance then
68548: LD_VAR 0 9
68552: PUSH
68553: LD_VAR 0 10
68557: LESS
68558: IFFALSE 68580
// begin result := i ;
68560: LD_ADDR_VAR 0 5
68564: PUSH
68565: LD_VAR 0 6
68569: ST_TO_ADDR
// distance := tmp ;
68570: LD_ADDR_VAR 0 10
68574: PUSH
68575: LD_VAR 0 9
68579: ST_TO_ADDR
// end ; end ;
68580: GO 68438
68582: POP
68583: POP
// end ;
68584: LD_VAR 0 5
68588: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68589: LD_INT 0
68591: PPUSH
68592: PPUSH
// if not driver or not IsInUnit ( driver ) then
68593: LD_VAR 0 1
68597: NOT
68598: PUSH
68599: LD_VAR 0 1
68603: PPUSH
68604: CALL_OW 310
68608: NOT
68609: OR
68610: IFFALSE 68614
// exit ;
68612: GO 68704
// vehicle := IsInUnit ( driver ) ;
68614: LD_ADDR_VAR 0 3
68618: PUSH
68619: LD_VAR 0 1
68623: PPUSH
68624: CALL_OW 310
68628: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68629: LD_VAR 0 1
68633: PPUSH
68634: LD_STRING \
68636: PUSH
68637: LD_INT 0
68639: PUSH
68640: LD_INT 0
68642: PUSH
68643: LD_INT 0
68645: PUSH
68646: LD_INT 0
68648: PUSH
68649: LD_INT 0
68651: PUSH
68652: LD_INT 0
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: PUSH
68664: LD_STRING E
68666: PUSH
68667: LD_INT 0
68669: PUSH
68670: LD_INT 0
68672: PUSH
68673: LD_VAR 0 3
68677: PUSH
68678: LD_INT 0
68680: PUSH
68681: LD_INT 0
68683: PUSH
68684: LD_INT 0
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PPUSH
68700: CALL_OW 446
// end ;
68704: LD_VAR 0 2
68708: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68709: LD_INT 0
68711: PPUSH
68712: PPUSH
// if not driver or not IsInUnit ( driver ) then
68713: LD_VAR 0 1
68717: NOT
68718: PUSH
68719: LD_VAR 0 1
68723: PPUSH
68724: CALL_OW 310
68728: NOT
68729: OR
68730: IFFALSE 68734
// exit ;
68732: GO 68824
// vehicle := IsInUnit ( driver ) ;
68734: LD_ADDR_VAR 0 3
68738: PUSH
68739: LD_VAR 0 1
68743: PPUSH
68744: CALL_OW 310
68748: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68749: LD_VAR 0 1
68753: PPUSH
68754: LD_STRING \
68756: PUSH
68757: LD_INT 0
68759: PUSH
68760: LD_INT 0
68762: PUSH
68763: LD_INT 0
68765: PUSH
68766: LD_INT 0
68768: PUSH
68769: LD_INT 0
68771: PUSH
68772: LD_INT 0
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: PUSH
68784: LD_STRING E
68786: PUSH
68787: LD_INT 0
68789: PUSH
68790: LD_INT 0
68792: PUSH
68793: LD_VAR 0 3
68797: PUSH
68798: LD_INT 0
68800: PUSH
68801: LD_INT 0
68803: PUSH
68804: LD_INT 0
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PPUSH
68820: CALL_OW 447
// end ;
68824: LD_VAR 0 2
68828: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68829: LD_INT 0
68831: PPUSH
68832: PPUSH
68833: PPUSH
// tmp := [ ] ;
68834: LD_ADDR_VAR 0 5
68838: PUSH
68839: EMPTY
68840: ST_TO_ADDR
// for i in units do
68841: LD_ADDR_VAR 0 4
68845: PUSH
68846: LD_VAR 0 1
68850: PUSH
68851: FOR_IN
68852: IFFALSE 68890
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68854: LD_ADDR_VAR 0 5
68858: PUSH
68859: LD_VAR 0 5
68863: PPUSH
68864: LD_VAR 0 5
68868: PUSH
68869: LD_INT 1
68871: PLUS
68872: PPUSH
68873: LD_VAR 0 4
68877: PPUSH
68878: CALL_OW 256
68882: PPUSH
68883: CALL_OW 2
68887: ST_TO_ADDR
68888: GO 68851
68890: POP
68891: POP
// if not tmp then
68892: LD_VAR 0 5
68896: NOT
68897: IFFALSE 68901
// exit ;
68899: GO 68949
// if asc then
68901: LD_VAR 0 2
68905: IFFALSE 68929
// result := SortListByListAsc ( units , tmp ) else
68907: LD_ADDR_VAR 0 3
68911: PUSH
68912: LD_VAR 0 1
68916: PPUSH
68917: LD_VAR 0 5
68921: PPUSH
68922: CALL_OW 76
68926: ST_TO_ADDR
68927: GO 68949
// result := SortListByListDesc ( units , tmp ) ;
68929: LD_ADDR_VAR 0 3
68933: PUSH
68934: LD_VAR 0 1
68938: PPUSH
68939: LD_VAR 0 5
68943: PPUSH
68944: CALL_OW 77
68948: ST_TO_ADDR
// end ;
68949: LD_VAR 0 3
68953: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68954: LD_INT 0
68956: PPUSH
68957: PPUSH
// task := GetTaskList ( mech ) ;
68958: LD_ADDR_VAR 0 4
68962: PUSH
68963: LD_VAR 0 1
68967: PPUSH
68968: CALL_OW 437
68972: ST_TO_ADDR
// if not task then
68973: LD_VAR 0 4
68977: NOT
68978: IFFALSE 68982
// exit ;
68980: GO 69024
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68982: LD_ADDR_VAR 0 3
68986: PUSH
68987: LD_VAR 0 4
68991: PUSH
68992: LD_INT 1
68994: ARRAY
68995: PUSH
68996: LD_INT 1
68998: ARRAY
68999: PUSH
69000: LD_STRING r
69002: EQUAL
69003: PUSH
69004: LD_VAR 0 4
69008: PUSH
69009: LD_INT 1
69011: ARRAY
69012: PUSH
69013: LD_INT 4
69015: ARRAY
69016: PUSH
69017: LD_VAR 0 2
69021: EQUAL
69022: AND
69023: ST_TO_ADDR
// end ;
69024: LD_VAR 0 3
69028: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69029: LD_INT 0
69031: PPUSH
// SetDir ( unit , d ) ;
69032: LD_VAR 0 1
69036: PPUSH
69037: LD_VAR 0 4
69041: PPUSH
69042: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69046: LD_VAR 0 1
69050: PPUSH
69051: LD_VAR 0 2
69055: PPUSH
69056: LD_VAR 0 3
69060: PPUSH
69061: LD_VAR 0 5
69065: PPUSH
69066: CALL_OW 48
// end ;
69070: LD_VAR 0 6
69074: RET
// export function ToNaturalNumber ( number ) ; begin
69075: LD_INT 0
69077: PPUSH
// result := number div 1 ;
69078: LD_ADDR_VAR 0 2
69082: PUSH
69083: LD_VAR 0 1
69087: PUSH
69088: LD_INT 1
69090: DIV
69091: ST_TO_ADDR
// if number < 0 then
69092: LD_VAR 0 1
69096: PUSH
69097: LD_INT 0
69099: LESS
69100: IFFALSE 69110
// result := 0 ;
69102: LD_ADDR_VAR 0 2
69106: PUSH
69107: LD_INT 0
69109: ST_TO_ADDR
// end ;
69110: LD_VAR 0 2
69114: RET
// export function SortByClass ( units , class ) ; var un ; begin
69115: LD_INT 0
69117: PPUSH
69118: PPUSH
// if not units or not class then
69119: LD_VAR 0 1
69123: NOT
69124: PUSH
69125: LD_VAR 0 2
69129: NOT
69130: OR
69131: IFFALSE 69135
// exit ;
69133: GO 69230
// result := [ ] ;
69135: LD_ADDR_VAR 0 3
69139: PUSH
69140: EMPTY
69141: ST_TO_ADDR
// for un in units do
69142: LD_ADDR_VAR 0 4
69146: PUSH
69147: LD_VAR 0 1
69151: PUSH
69152: FOR_IN
69153: IFFALSE 69228
// if GetClass ( un ) = class then
69155: LD_VAR 0 4
69159: PPUSH
69160: CALL_OW 257
69164: PUSH
69165: LD_VAR 0 2
69169: EQUAL
69170: IFFALSE 69197
// result := Insert ( result , 1 , un ) else
69172: LD_ADDR_VAR 0 3
69176: PUSH
69177: LD_VAR 0 3
69181: PPUSH
69182: LD_INT 1
69184: PPUSH
69185: LD_VAR 0 4
69189: PPUSH
69190: CALL_OW 2
69194: ST_TO_ADDR
69195: GO 69226
// result := Replace ( result , result + 1 , un ) ;
69197: LD_ADDR_VAR 0 3
69201: PUSH
69202: LD_VAR 0 3
69206: PPUSH
69207: LD_VAR 0 3
69211: PUSH
69212: LD_INT 1
69214: PLUS
69215: PPUSH
69216: LD_VAR 0 4
69220: PPUSH
69221: CALL_OW 1
69225: ST_TO_ADDR
69226: GO 69152
69228: POP
69229: POP
// end ;
69230: LD_VAR 0 3
69234: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69235: LD_INT 0
69237: PPUSH
69238: PPUSH
69239: PPUSH
69240: PPUSH
69241: PPUSH
69242: PPUSH
69243: PPUSH
// result := [ ] ;
69244: LD_ADDR_VAR 0 4
69248: PUSH
69249: EMPTY
69250: ST_TO_ADDR
// if x - r < 0 then
69251: LD_VAR 0 1
69255: PUSH
69256: LD_VAR 0 3
69260: MINUS
69261: PUSH
69262: LD_INT 0
69264: LESS
69265: IFFALSE 69277
// min_x := 0 else
69267: LD_ADDR_VAR 0 8
69271: PUSH
69272: LD_INT 0
69274: ST_TO_ADDR
69275: GO 69293
// min_x := x - r ;
69277: LD_ADDR_VAR 0 8
69281: PUSH
69282: LD_VAR 0 1
69286: PUSH
69287: LD_VAR 0 3
69291: MINUS
69292: ST_TO_ADDR
// if y - r < 0 then
69293: LD_VAR 0 2
69297: PUSH
69298: LD_VAR 0 3
69302: MINUS
69303: PUSH
69304: LD_INT 0
69306: LESS
69307: IFFALSE 69319
// min_y := 0 else
69309: LD_ADDR_VAR 0 7
69313: PUSH
69314: LD_INT 0
69316: ST_TO_ADDR
69317: GO 69335
// min_y := y - r ;
69319: LD_ADDR_VAR 0 7
69323: PUSH
69324: LD_VAR 0 2
69328: PUSH
69329: LD_VAR 0 3
69333: MINUS
69334: ST_TO_ADDR
// max_x := x + r ;
69335: LD_ADDR_VAR 0 9
69339: PUSH
69340: LD_VAR 0 1
69344: PUSH
69345: LD_VAR 0 3
69349: PLUS
69350: ST_TO_ADDR
// max_y := y + r ;
69351: LD_ADDR_VAR 0 10
69355: PUSH
69356: LD_VAR 0 2
69360: PUSH
69361: LD_VAR 0 3
69365: PLUS
69366: ST_TO_ADDR
// for _x = min_x to max_x do
69367: LD_ADDR_VAR 0 5
69371: PUSH
69372: DOUBLE
69373: LD_VAR 0 8
69377: DEC
69378: ST_TO_ADDR
69379: LD_VAR 0 9
69383: PUSH
69384: FOR_TO
69385: IFFALSE 69486
// for _y = min_y to max_y do
69387: LD_ADDR_VAR 0 6
69391: PUSH
69392: DOUBLE
69393: LD_VAR 0 7
69397: DEC
69398: ST_TO_ADDR
69399: LD_VAR 0 10
69403: PUSH
69404: FOR_TO
69405: IFFALSE 69482
// begin if not ValidHex ( _x , _y ) then
69407: LD_VAR 0 5
69411: PPUSH
69412: LD_VAR 0 6
69416: PPUSH
69417: CALL_OW 488
69421: NOT
69422: IFFALSE 69426
// continue ;
69424: GO 69404
// if GetResourceTypeXY ( _x , _y ) then
69426: LD_VAR 0 5
69430: PPUSH
69431: LD_VAR 0 6
69435: PPUSH
69436: CALL_OW 283
69440: IFFALSE 69480
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69442: LD_ADDR_VAR 0 4
69446: PUSH
69447: LD_VAR 0 4
69451: PPUSH
69452: LD_VAR 0 4
69456: PUSH
69457: LD_INT 1
69459: PLUS
69460: PPUSH
69461: LD_VAR 0 5
69465: PUSH
69466: LD_VAR 0 6
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PPUSH
69475: CALL_OW 1
69479: ST_TO_ADDR
// end ;
69480: GO 69404
69482: POP
69483: POP
69484: GO 69384
69486: POP
69487: POP
// end ;
69488: LD_VAR 0 4
69492: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69493: LD_INT 0
69495: PPUSH
69496: PPUSH
69497: PPUSH
69498: PPUSH
69499: PPUSH
69500: PPUSH
69501: PPUSH
69502: PPUSH
// if not units then
69503: LD_VAR 0 1
69507: NOT
69508: IFFALSE 69512
// exit ;
69510: GO 70036
// result := UnitFilter ( units , [ f_ok ] ) ;
69512: LD_ADDR_VAR 0 3
69516: PUSH
69517: LD_VAR 0 1
69521: PPUSH
69522: LD_INT 50
69524: PUSH
69525: EMPTY
69526: LIST
69527: PPUSH
69528: CALL_OW 72
69532: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69533: LD_ADDR_VAR 0 8
69537: PUSH
69538: LD_VAR 0 1
69542: PUSH
69543: LD_INT 1
69545: ARRAY
69546: PPUSH
69547: CALL_OW 255
69551: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69552: LD_ADDR_VAR 0 10
69556: PUSH
69557: LD_INT 29
69559: PUSH
69560: LD_INT 91
69562: PUSH
69563: LD_INT 49
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: LIST
69570: ST_TO_ADDR
// if not result then
69571: LD_VAR 0 3
69575: NOT
69576: IFFALSE 69580
// exit ;
69578: GO 70036
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69580: LD_ADDR_VAR 0 5
69584: PUSH
69585: LD_INT 81
69587: PUSH
69588: LD_VAR 0 8
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PPUSH
69597: CALL_OW 69
69601: ST_TO_ADDR
// for i in result do
69602: LD_ADDR_VAR 0 4
69606: PUSH
69607: LD_VAR 0 3
69611: PUSH
69612: FOR_IN
69613: IFFALSE 70034
// begin tag := GetTag ( i ) + 1 ;
69615: LD_ADDR_VAR 0 9
69619: PUSH
69620: LD_VAR 0 4
69624: PPUSH
69625: CALL_OW 110
69629: PUSH
69630: LD_INT 1
69632: PLUS
69633: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69634: LD_ADDR_VAR 0 7
69638: PUSH
69639: LD_VAR 0 4
69643: PPUSH
69644: CALL_OW 250
69648: PPUSH
69649: LD_VAR 0 4
69653: PPUSH
69654: CALL_OW 251
69658: PPUSH
69659: LD_INT 6
69661: PPUSH
69662: CALL 69235 0 3
69666: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69667: LD_VAR 0 4
69671: PPUSH
69672: CALL_OW 247
69676: PUSH
69677: LD_INT 2
69679: EQUAL
69680: PUSH
69681: LD_VAR 0 7
69685: AND
69686: PUSH
69687: LD_VAR 0 4
69691: PPUSH
69692: CALL_OW 264
69696: PUSH
69697: LD_VAR 0 10
69701: IN
69702: NOT
69703: AND
69704: IFFALSE 69743
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69706: LD_VAR 0 4
69710: PPUSH
69711: LD_VAR 0 7
69715: PUSH
69716: LD_INT 1
69718: ARRAY
69719: PUSH
69720: LD_INT 1
69722: ARRAY
69723: PPUSH
69724: LD_VAR 0 7
69728: PUSH
69729: LD_INT 1
69731: ARRAY
69732: PUSH
69733: LD_INT 2
69735: ARRAY
69736: PPUSH
69737: CALL_OW 116
69741: GO 70032
// if path > tag then
69743: LD_VAR 0 2
69747: PUSH
69748: LD_VAR 0 9
69752: GREATER
69753: IFFALSE 69961
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69755: LD_ADDR_VAR 0 6
69759: PUSH
69760: LD_VAR 0 5
69764: PPUSH
69765: LD_INT 91
69767: PUSH
69768: LD_VAR 0 4
69772: PUSH
69773: LD_INT 8
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: LIST
69780: PPUSH
69781: CALL_OW 72
69785: ST_TO_ADDR
// if nearEnemy then
69786: LD_VAR 0 6
69790: IFFALSE 69859
// begin if GetWeapon ( i ) = ru_time_lapser then
69792: LD_VAR 0 4
69796: PPUSH
69797: CALL_OW 264
69801: PUSH
69802: LD_INT 49
69804: EQUAL
69805: IFFALSE 69833
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69807: LD_VAR 0 4
69811: PPUSH
69812: LD_VAR 0 6
69816: PPUSH
69817: LD_VAR 0 4
69821: PPUSH
69822: CALL_OW 74
69826: PPUSH
69827: CALL_OW 112
69831: GO 69857
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69833: LD_VAR 0 4
69837: PPUSH
69838: LD_VAR 0 6
69842: PPUSH
69843: LD_VAR 0 4
69847: PPUSH
69848: CALL_OW 74
69852: PPUSH
69853: CALL_OW 115
// end else
69857: GO 69959
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69859: LD_VAR 0 4
69863: PPUSH
69864: LD_VAR 0 2
69868: PUSH
69869: LD_VAR 0 9
69873: ARRAY
69874: PUSH
69875: LD_INT 1
69877: ARRAY
69878: PPUSH
69879: LD_VAR 0 2
69883: PUSH
69884: LD_VAR 0 9
69888: ARRAY
69889: PUSH
69890: LD_INT 2
69892: ARRAY
69893: PPUSH
69894: CALL_OW 297
69898: PUSH
69899: LD_INT 6
69901: GREATER
69902: IFFALSE 69945
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69904: LD_VAR 0 4
69908: PPUSH
69909: LD_VAR 0 2
69913: PUSH
69914: LD_VAR 0 9
69918: ARRAY
69919: PUSH
69920: LD_INT 1
69922: ARRAY
69923: PPUSH
69924: LD_VAR 0 2
69928: PUSH
69929: LD_VAR 0 9
69933: ARRAY
69934: PUSH
69935: LD_INT 2
69937: ARRAY
69938: PPUSH
69939: CALL_OW 114
69943: GO 69959
// SetTag ( i , tag ) ;
69945: LD_VAR 0 4
69949: PPUSH
69950: LD_VAR 0 9
69954: PPUSH
69955: CALL_OW 109
// end else
69959: GO 70032
// if enemy then
69961: LD_VAR 0 5
69965: IFFALSE 70032
// begin if GetWeapon ( i ) = ru_time_lapser then
69967: LD_VAR 0 4
69971: PPUSH
69972: CALL_OW 264
69976: PUSH
69977: LD_INT 49
69979: EQUAL
69980: IFFALSE 70008
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69982: LD_VAR 0 4
69986: PPUSH
69987: LD_VAR 0 5
69991: PPUSH
69992: LD_VAR 0 4
69996: PPUSH
69997: CALL_OW 74
70001: PPUSH
70002: CALL_OW 112
70006: GO 70032
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70008: LD_VAR 0 4
70012: PPUSH
70013: LD_VAR 0 5
70017: PPUSH
70018: LD_VAR 0 4
70022: PPUSH
70023: CALL_OW 74
70027: PPUSH
70028: CALL_OW 115
// end ; end ;
70032: GO 69612
70034: POP
70035: POP
// end ;
70036: LD_VAR 0 3
70040: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70041: LD_INT 0
70043: PPUSH
70044: PPUSH
70045: PPUSH
// if not unit or IsInUnit ( unit ) then
70046: LD_VAR 0 1
70050: NOT
70051: PUSH
70052: LD_VAR 0 1
70056: PPUSH
70057: CALL_OW 310
70061: OR
70062: IFFALSE 70066
// exit ;
70064: GO 70157
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70066: LD_ADDR_VAR 0 4
70070: PUSH
70071: LD_VAR 0 1
70075: PPUSH
70076: CALL_OW 250
70080: PPUSH
70081: LD_VAR 0 2
70085: PPUSH
70086: LD_INT 1
70088: PPUSH
70089: CALL_OW 272
70093: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70094: LD_ADDR_VAR 0 5
70098: PUSH
70099: LD_VAR 0 1
70103: PPUSH
70104: CALL_OW 251
70108: PPUSH
70109: LD_VAR 0 2
70113: PPUSH
70114: LD_INT 1
70116: PPUSH
70117: CALL_OW 273
70121: ST_TO_ADDR
// if ValidHex ( x , y ) then
70122: LD_VAR 0 4
70126: PPUSH
70127: LD_VAR 0 5
70131: PPUSH
70132: CALL_OW 488
70136: IFFALSE 70157
// ComTurnXY ( unit , x , y ) ;
70138: LD_VAR 0 1
70142: PPUSH
70143: LD_VAR 0 4
70147: PPUSH
70148: LD_VAR 0 5
70152: PPUSH
70153: CALL_OW 118
// end ;
70157: LD_VAR 0 3
70161: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70162: LD_INT 0
70164: PPUSH
70165: PPUSH
// result := false ;
70166: LD_ADDR_VAR 0 3
70170: PUSH
70171: LD_INT 0
70173: ST_TO_ADDR
// if not units then
70174: LD_VAR 0 2
70178: NOT
70179: IFFALSE 70183
// exit ;
70181: GO 70228
// for i in units do
70183: LD_ADDR_VAR 0 4
70187: PUSH
70188: LD_VAR 0 2
70192: PUSH
70193: FOR_IN
70194: IFFALSE 70226
// if See ( side , i ) then
70196: LD_VAR 0 1
70200: PPUSH
70201: LD_VAR 0 4
70205: PPUSH
70206: CALL_OW 292
70210: IFFALSE 70224
// begin result := true ;
70212: LD_ADDR_VAR 0 3
70216: PUSH
70217: LD_INT 1
70219: ST_TO_ADDR
// exit ;
70220: POP
70221: POP
70222: GO 70228
// end ;
70224: GO 70193
70226: POP
70227: POP
// end ;
70228: LD_VAR 0 3
70232: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70233: LD_INT 0
70235: PPUSH
70236: PPUSH
70237: PPUSH
70238: PPUSH
// if not unit or not points then
70239: LD_VAR 0 1
70243: NOT
70244: PUSH
70245: LD_VAR 0 2
70249: NOT
70250: OR
70251: IFFALSE 70255
// exit ;
70253: GO 70345
// dist := 99999 ;
70255: LD_ADDR_VAR 0 5
70259: PUSH
70260: LD_INT 99999
70262: ST_TO_ADDR
// for i in points do
70263: LD_ADDR_VAR 0 4
70267: PUSH
70268: LD_VAR 0 2
70272: PUSH
70273: FOR_IN
70274: IFFALSE 70343
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70276: LD_ADDR_VAR 0 6
70280: PUSH
70281: LD_VAR 0 1
70285: PPUSH
70286: LD_VAR 0 4
70290: PUSH
70291: LD_INT 1
70293: ARRAY
70294: PPUSH
70295: LD_VAR 0 4
70299: PUSH
70300: LD_INT 2
70302: ARRAY
70303: PPUSH
70304: CALL_OW 297
70308: ST_TO_ADDR
// if tmpDist < dist then
70309: LD_VAR 0 6
70313: PUSH
70314: LD_VAR 0 5
70318: LESS
70319: IFFALSE 70341
// begin result := i ;
70321: LD_ADDR_VAR 0 3
70325: PUSH
70326: LD_VAR 0 4
70330: ST_TO_ADDR
// dist := tmpDist ;
70331: LD_ADDR_VAR 0 5
70335: PUSH
70336: LD_VAR 0 6
70340: ST_TO_ADDR
// end ; end ;
70341: GO 70273
70343: POP
70344: POP
// end ;
70345: LD_VAR 0 3
70349: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70350: LD_INT 0
70352: PPUSH
// uc_side := side ;
70353: LD_ADDR_OWVAR 20
70357: PUSH
70358: LD_VAR 0 1
70362: ST_TO_ADDR
// uc_nation := 3 ;
70363: LD_ADDR_OWVAR 21
70367: PUSH
70368: LD_INT 3
70370: ST_TO_ADDR
// vc_chassis := 25 ;
70371: LD_ADDR_OWVAR 37
70375: PUSH
70376: LD_INT 25
70378: ST_TO_ADDR
// vc_engine := engine_siberite ;
70379: LD_ADDR_OWVAR 39
70383: PUSH
70384: LD_INT 3
70386: ST_TO_ADDR
// vc_control := control_computer ;
70387: LD_ADDR_OWVAR 38
70391: PUSH
70392: LD_INT 3
70394: ST_TO_ADDR
// vc_weapon := 59 ;
70395: LD_ADDR_OWVAR 40
70399: PUSH
70400: LD_INT 59
70402: ST_TO_ADDR
// result := CreateVehicle ;
70403: LD_ADDR_VAR 0 5
70407: PUSH
70408: CALL_OW 45
70412: ST_TO_ADDR
// SetDir ( result , d ) ;
70413: LD_VAR 0 5
70417: PPUSH
70418: LD_VAR 0 4
70422: PPUSH
70423: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70427: LD_VAR 0 5
70431: PPUSH
70432: LD_VAR 0 2
70436: PPUSH
70437: LD_VAR 0 3
70441: PPUSH
70442: LD_INT 0
70444: PPUSH
70445: CALL_OW 48
// end ;
70449: LD_VAR 0 5
70453: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70454: LD_INT 0
70456: PPUSH
70457: PPUSH
70458: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70459: LD_ADDR_VAR 0 2
70463: PUSH
70464: LD_INT 0
70466: PUSH
70467: LD_INT 0
70469: PUSH
70470: LD_INT 0
70472: PUSH
70473: LD_INT 0
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70482: LD_VAR 0 1
70486: NOT
70487: PUSH
70488: LD_VAR 0 1
70492: PPUSH
70493: CALL_OW 264
70497: PUSH
70498: LD_INT 12
70500: PUSH
70501: LD_INT 51
70503: PUSH
70504: LD_INT 32
70506: PUSH
70507: LD_INT 89
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: IN
70516: NOT
70517: OR
70518: IFFALSE 70522
// exit ;
70520: GO 70620
// for i := 1 to 3 do
70522: LD_ADDR_VAR 0 3
70526: PUSH
70527: DOUBLE
70528: LD_INT 1
70530: DEC
70531: ST_TO_ADDR
70532: LD_INT 3
70534: PUSH
70535: FOR_TO
70536: IFFALSE 70618
// begin tmp := GetCargo ( cargo , i ) ;
70538: LD_ADDR_VAR 0 4
70542: PUSH
70543: LD_VAR 0 1
70547: PPUSH
70548: LD_VAR 0 3
70552: PPUSH
70553: CALL_OW 289
70557: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70558: LD_ADDR_VAR 0 2
70562: PUSH
70563: LD_VAR 0 2
70567: PPUSH
70568: LD_VAR 0 3
70572: PPUSH
70573: LD_VAR 0 4
70577: PPUSH
70578: CALL_OW 1
70582: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70583: LD_ADDR_VAR 0 2
70587: PUSH
70588: LD_VAR 0 2
70592: PPUSH
70593: LD_INT 4
70595: PPUSH
70596: LD_VAR 0 2
70600: PUSH
70601: LD_INT 4
70603: ARRAY
70604: PUSH
70605: LD_VAR 0 4
70609: PLUS
70610: PPUSH
70611: CALL_OW 1
70615: ST_TO_ADDR
// end ;
70616: GO 70535
70618: POP
70619: POP
// end ;
70620: LD_VAR 0 2
70624: RET
// export function Length ( array ) ; begin
70625: LD_INT 0
70627: PPUSH
// result := array + 0 ;
70628: LD_ADDR_VAR 0 2
70632: PUSH
70633: LD_VAR 0 1
70637: PUSH
70638: LD_INT 0
70640: PLUS
70641: ST_TO_ADDR
// end ;
70642: LD_VAR 0 2
70646: RET
// export function PrepareArray ( array ) ; begin
70647: LD_INT 0
70649: PPUSH
// result := array diff 0 ;
70650: LD_ADDR_VAR 0 2
70654: PUSH
70655: LD_VAR 0 1
70659: PUSH
70660: LD_INT 0
70662: DIFF
70663: ST_TO_ADDR
// if not result [ 1 ] then
70664: LD_VAR 0 2
70668: PUSH
70669: LD_INT 1
70671: ARRAY
70672: NOT
70673: IFFALSE 70693
// result := Delete ( result , 1 ) ;
70675: LD_ADDR_VAR 0 2
70679: PUSH
70680: LD_VAR 0 2
70684: PPUSH
70685: LD_INT 1
70687: PPUSH
70688: CALL_OW 3
70692: ST_TO_ADDR
// end ;
70693: LD_VAR 0 2
70697: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70698: LD_INT 0
70700: PPUSH
70701: PPUSH
70702: PPUSH
70703: PPUSH
// sibRocketRange := 25 ;
70704: LD_ADDR_VAR 0 6
70708: PUSH
70709: LD_INT 25
70711: ST_TO_ADDR
// result := false ;
70712: LD_ADDR_VAR 0 4
70716: PUSH
70717: LD_INT 0
70719: ST_TO_ADDR
// for i := 0 to 5 do
70720: LD_ADDR_VAR 0 5
70724: PUSH
70725: DOUBLE
70726: LD_INT 0
70728: DEC
70729: ST_TO_ADDR
70730: LD_INT 5
70732: PUSH
70733: FOR_TO
70734: IFFALSE 70801
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70736: LD_VAR 0 1
70740: PPUSH
70741: LD_VAR 0 5
70745: PPUSH
70746: LD_VAR 0 6
70750: PPUSH
70751: CALL_OW 272
70755: PPUSH
70756: LD_VAR 0 2
70760: PPUSH
70761: LD_VAR 0 5
70765: PPUSH
70766: LD_VAR 0 6
70770: PPUSH
70771: CALL_OW 273
70775: PPUSH
70776: LD_VAR 0 3
70780: PPUSH
70781: CALL_OW 309
70785: IFFALSE 70799
// begin result := true ;
70787: LD_ADDR_VAR 0 4
70791: PUSH
70792: LD_INT 1
70794: ST_TO_ADDR
// exit ;
70795: POP
70796: POP
70797: GO 70803
// end ;
70799: GO 70733
70801: POP
70802: POP
// end ;
70803: LD_VAR 0 4
70807: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70808: LD_INT 0
70810: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70811: LD_VAR 0 1
70815: PPUSH
70816: LD_VAR 0 2
70820: PPUSH
70821: LD_INT 0
70823: PPUSH
70824: LD_INT 0
70826: PPUSH
70827: LD_INT 1
70829: PPUSH
70830: LD_INT 0
70832: PPUSH
70833: CALL_OW 587
// end ; end_of_file end_of_file
70837: LD_VAR 0 3
70841: RET
// export globalGameSaveCounter ; every 0 0$1 do
70842: GO 70844
70844: DISABLE
// begin enable ;
70845: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
70846: LD_STRING updateTimer(
70848: PUSH
70849: LD_OWVAR 1
70853: STR
70854: PUSH
70855: LD_STRING );
70857: STR
70858: PPUSH
70859: CALL_OW 559
// end ;
70863: END
// every 0 0$1 do
70864: GO 70866
70866: DISABLE
// begin globalGameSaveCounter := 0 ;
70867: LD_ADDR_EXP 63
70871: PUSH
70872: LD_INT 0
70874: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
70875: LD_STRING setGameSaveCounter(0)
70877: PPUSH
70878: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
70882: LD_STRING initStreamRollete();
70884: PPUSH
70885: CALL_OW 559
// InitStreamMode ;
70889: CALL 72215 0 0
// DefineStreamItems ( false ) ;
70893: LD_INT 0
70895: PPUSH
70896: CALL 72679 0 1
// end ;
70900: END
// export function SOS_MapStart ( ) ; begin
70901: LD_INT 0
70903: PPUSH
// if streamModeActive then
70904: LD_EXP 64
70908: IFFALSE 70917
// DefineStreamItems ( true ) ;
70910: LD_INT 1
70912: PPUSH
70913: CALL 72679 0 1
// UpdateLuaVariables ( ) ;
70917: CALL 70934 0 0
// UpdateFactoryWaypoints ( ) ;
70921: CALL 85540 0 0
// UpdateWarehouseGatheringPoints ( ) ;
70925: CALL 85797 0 0
// end ;
70929: LD_VAR 0 1
70933: RET
// function UpdateLuaVariables ( ) ; begin
70934: LD_INT 0
70936: PPUSH
// if globalGameSaveCounter then
70937: LD_EXP 63
70941: IFFALSE 70975
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
70943: LD_ADDR_EXP 63
70947: PUSH
70948: LD_EXP 63
70952: PPUSH
70953: CALL 68250 0 1
70957: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
70958: LD_STRING setGameSaveCounter(
70960: PUSH
70961: LD_EXP 63
70965: STR
70966: PUSH
70967: LD_STRING )
70969: STR
70970: PPUSH
70971: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
70975: LD_STRING setGameDifficulty(
70977: PUSH
70978: LD_OWVAR 67
70982: STR
70983: PUSH
70984: LD_STRING )
70986: STR
70987: PPUSH
70988: CALL_OW 559
// end ;
70992: LD_VAR 0 1
70996: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70997: LD_INT 0
70999: PPUSH
// if p2 = stream_mode then
71000: LD_VAR 0 2
71004: PUSH
71005: LD_INT 100
71007: EQUAL
71008: IFFALSE 72011
// begin if not StreamModeActive then
71010: LD_EXP 64
71014: NOT
71015: IFFALSE 71025
// StreamModeActive := true ;
71017: LD_ADDR_EXP 64
71021: PUSH
71022: LD_INT 1
71024: ST_TO_ADDR
// if p3 = 0 then
71025: LD_VAR 0 3
71029: PUSH
71030: LD_INT 0
71032: EQUAL
71033: IFFALSE 71039
// InitStreamMode ;
71035: CALL 72215 0 0
// if p3 = 1 then
71039: LD_VAR 0 3
71043: PUSH
71044: LD_INT 1
71046: EQUAL
71047: IFFALSE 71057
// sRocket := true ;
71049: LD_ADDR_EXP 69
71053: PUSH
71054: LD_INT 1
71056: ST_TO_ADDR
// if p3 = 2 then
71057: LD_VAR 0 3
71061: PUSH
71062: LD_INT 2
71064: EQUAL
71065: IFFALSE 71075
// sSpeed := true ;
71067: LD_ADDR_EXP 68
71071: PUSH
71072: LD_INT 1
71074: ST_TO_ADDR
// if p3 = 3 then
71075: LD_VAR 0 3
71079: PUSH
71080: LD_INT 3
71082: EQUAL
71083: IFFALSE 71093
// sEngine := true ;
71085: LD_ADDR_EXP 70
71089: PUSH
71090: LD_INT 1
71092: ST_TO_ADDR
// if p3 = 4 then
71093: LD_VAR 0 3
71097: PUSH
71098: LD_INT 4
71100: EQUAL
71101: IFFALSE 71111
// sSpec := true ;
71103: LD_ADDR_EXP 67
71107: PUSH
71108: LD_INT 1
71110: ST_TO_ADDR
// if p3 = 5 then
71111: LD_VAR 0 3
71115: PUSH
71116: LD_INT 5
71118: EQUAL
71119: IFFALSE 71129
// sLevel := true ;
71121: LD_ADDR_EXP 71
71125: PUSH
71126: LD_INT 1
71128: ST_TO_ADDR
// if p3 = 6 then
71129: LD_VAR 0 3
71133: PUSH
71134: LD_INT 6
71136: EQUAL
71137: IFFALSE 71147
// sArmoury := true ;
71139: LD_ADDR_EXP 72
71143: PUSH
71144: LD_INT 1
71146: ST_TO_ADDR
// if p3 = 7 then
71147: LD_VAR 0 3
71151: PUSH
71152: LD_INT 7
71154: EQUAL
71155: IFFALSE 71165
// sRadar := true ;
71157: LD_ADDR_EXP 73
71161: PUSH
71162: LD_INT 1
71164: ST_TO_ADDR
// if p3 = 8 then
71165: LD_VAR 0 3
71169: PUSH
71170: LD_INT 8
71172: EQUAL
71173: IFFALSE 71183
// sBunker := true ;
71175: LD_ADDR_EXP 74
71179: PUSH
71180: LD_INT 1
71182: ST_TO_ADDR
// if p3 = 9 then
71183: LD_VAR 0 3
71187: PUSH
71188: LD_INT 9
71190: EQUAL
71191: IFFALSE 71201
// sHack := true ;
71193: LD_ADDR_EXP 75
71197: PUSH
71198: LD_INT 1
71200: ST_TO_ADDR
// if p3 = 10 then
71201: LD_VAR 0 3
71205: PUSH
71206: LD_INT 10
71208: EQUAL
71209: IFFALSE 71219
// sFire := true ;
71211: LD_ADDR_EXP 76
71215: PUSH
71216: LD_INT 1
71218: ST_TO_ADDR
// if p3 = 11 then
71219: LD_VAR 0 3
71223: PUSH
71224: LD_INT 11
71226: EQUAL
71227: IFFALSE 71237
// sRefresh := true ;
71229: LD_ADDR_EXP 77
71233: PUSH
71234: LD_INT 1
71236: ST_TO_ADDR
// if p3 = 12 then
71237: LD_VAR 0 3
71241: PUSH
71242: LD_INT 12
71244: EQUAL
71245: IFFALSE 71255
// sExp := true ;
71247: LD_ADDR_EXP 78
71251: PUSH
71252: LD_INT 1
71254: ST_TO_ADDR
// if p3 = 13 then
71255: LD_VAR 0 3
71259: PUSH
71260: LD_INT 13
71262: EQUAL
71263: IFFALSE 71273
// sDepot := true ;
71265: LD_ADDR_EXP 79
71269: PUSH
71270: LD_INT 1
71272: ST_TO_ADDR
// if p3 = 14 then
71273: LD_VAR 0 3
71277: PUSH
71278: LD_INT 14
71280: EQUAL
71281: IFFALSE 71291
// sFlag := true ;
71283: LD_ADDR_EXP 80
71287: PUSH
71288: LD_INT 1
71290: ST_TO_ADDR
// if p3 = 15 then
71291: LD_VAR 0 3
71295: PUSH
71296: LD_INT 15
71298: EQUAL
71299: IFFALSE 71309
// sKamikadze := true ;
71301: LD_ADDR_EXP 88
71305: PUSH
71306: LD_INT 1
71308: ST_TO_ADDR
// if p3 = 16 then
71309: LD_VAR 0 3
71313: PUSH
71314: LD_INT 16
71316: EQUAL
71317: IFFALSE 71327
// sTroll := true ;
71319: LD_ADDR_EXP 89
71323: PUSH
71324: LD_INT 1
71326: ST_TO_ADDR
// if p3 = 17 then
71327: LD_VAR 0 3
71331: PUSH
71332: LD_INT 17
71334: EQUAL
71335: IFFALSE 71345
// sSlow := true ;
71337: LD_ADDR_EXP 90
71341: PUSH
71342: LD_INT 1
71344: ST_TO_ADDR
// if p3 = 18 then
71345: LD_VAR 0 3
71349: PUSH
71350: LD_INT 18
71352: EQUAL
71353: IFFALSE 71363
// sLack := true ;
71355: LD_ADDR_EXP 91
71359: PUSH
71360: LD_INT 1
71362: ST_TO_ADDR
// if p3 = 19 then
71363: LD_VAR 0 3
71367: PUSH
71368: LD_INT 19
71370: EQUAL
71371: IFFALSE 71381
// sTank := true ;
71373: LD_ADDR_EXP 93
71377: PUSH
71378: LD_INT 1
71380: ST_TO_ADDR
// if p3 = 20 then
71381: LD_VAR 0 3
71385: PUSH
71386: LD_INT 20
71388: EQUAL
71389: IFFALSE 71399
// sRemote := true ;
71391: LD_ADDR_EXP 94
71395: PUSH
71396: LD_INT 1
71398: ST_TO_ADDR
// if p3 = 21 then
71399: LD_VAR 0 3
71403: PUSH
71404: LD_INT 21
71406: EQUAL
71407: IFFALSE 71417
// sPowell := true ;
71409: LD_ADDR_EXP 95
71413: PUSH
71414: LD_INT 1
71416: ST_TO_ADDR
// if p3 = 22 then
71417: LD_VAR 0 3
71421: PUSH
71422: LD_INT 22
71424: EQUAL
71425: IFFALSE 71435
// sTeleport := true ;
71427: LD_ADDR_EXP 98
71431: PUSH
71432: LD_INT 1
71434: ST_TO_ADDR
// if p3 = 23 then
71435: LD_VAR 0 3
71439: PUSH
71440: LD_INT 23
71442: EQUAL
71443: IFFALSE 71453
// sOilTower := true ;
71445: LD_ADDR_EXP 100
71449: PUSH
71450: LD_INT 1
71452: ST_TO_ADDR
// if p3 = 24 then
71453: LD_VAR 0 3
71457: PUSH
71458: LD_INT 24
71460: EQUAL
71461: IFFALSE 71471
// sShovel := true ;
71463: LD_ADDR_EXP 101
71467: PUSH
71468: LD_INT 1
71470: ST_TO_ADDR
// if p3 = 25 then
71471: LD_VAR 0 3
71475: PUSH
71476: LD_INT 25
71478: EQUAL
71479: IFFALSE 71489
// sSheik := true ;
71481: LD_ADDR_EXP 102
71485: PUSH
71486: LD_INT 1
71488: ST_TO_ADDR
// if p3 = 26 then
71489: LD_VAR 0 3
71493: PUSH
71494: LD_INT 26
71496: EQUAL
71497: IFFALSE 71507
// sEarthquake := true ;
71499: LD_ADDR_EXP 104
71503: PUSH
71504: LD_INT 1
71506: ST_TO_ADDR
// if p3 = 27 then
71507: LD_VAR 0 3
71511: PUSH
71512: LD_INT 27
71514: EQUAL
71515: IFFALSE 71525
// sAI := true ;
71517: LD_ADDR_EXP 105
71521: PUSH
71522: LD_INT 1
71524: ST_TO_ADDR
// if p3 = 28 then
71525: LD_VAR 0 3
71529: PUSH
71530: LD_INT 28
71532: EQUAL
71533: IFFALSE 71543
// sCargo := true ;
71535: LD_ADDR_EXP 108
71539: PUSH
71540: LD_INT 1
71542: ST_TO_ADDR
// if p3 = 29 then
71543: LD_VAR 0 3
71547: PUSH
71548: LD_INT 29
71550: EQUAL
71551: IFFALSE 71561
// sDLaser := true ;
71553: LD_ADDR_EXP 109
71557: PUSH
71558: LD_INT 1
71560: ST_TO_ADDR
// if p3 = 30 then
71561: LD_VAR 0 3
71565: PUSH
71566: LD_INT 30
71568: EQUAL
71569: IFFALSE 71579
// sExchange := true ;
71571: LD_ADDR_EXP 110
71575: PUSH
71576: LD_INT 1
71578: ST_TO_ADDR
// if p3 = 31 then
71579: LD_VAR 0 3
71583: PUSH
71584: LD_INT 31
71586: EQUAL
71587: IFFALSE 71597
// sFac := true ;
71589: LD_ADDR_EXP 111
71593: PUSH
71594: LD_INT 1
71596: ST_TO_ADDR
// if p3 = 32 then
71597: LD_VAR 0 3
71601: PUSH
71602: LD_INT 32
71604: EQUAL
71605: IFFALSE 71615
// sPower := true ;
71607: LD_ADDR_EXP 112
71611: PUSH
71612: LD_INT 1
71614: ST_TO_ADDR
// if p3 = 33 then
71615: LD_VAR 0 3
71619: PUSH
71620: LD_INT 33
71622: EQUAL
71623: IFFALSE 71633
// sRandom := true ;
71625: LD_ADDR_EXP 113
71629: PUSH
71630: LD_INT 1
71632: ST_TO_ADDR
// if p3 = 34 then
71633: LD_VAR 0 3
71637: PUSH
71638: LD_INT 34
71640: EQUAL
71641: IFFALSE 71651
// sShield := true ;
71643: LD_ADDR_EXP 114
71647: PUSH
71648: LD_INT 1
71650: ST_TO_ADDR
// if p3 = 35 then
71651: LD_VAR 0 3
71655: PUSH
71656: LD_INT 35
71658: EQUAL
71659: IFFALSE 71669
// sTime := true ;
71661: LD_ADDR_EXP 115
71665: PUSH
71666: LD_INT 1
71668: ST_TO_ADDR
// if p3 = 36 then
71669: LD_VAR 0 3
71673: PUSH
71674: LD_INT 36
71676: EQUAL
71677: IFFALSE 71687
// sTools := true ;
71679: LD_ADDR_EXP 116
71683: PUSH
71684: LD_INT 1
71686: ST_TO_ADDR
// if p3 = 101 then
71687: LD_VAR 0 3
71691: PUSH
71692: LD_INT 101
71694: EQUAL
71695: IFFALSE 71705
// sSold := true ;
71697: LD_ADDR_EXP 81
71701: PUSH
71702: LD_INT 1
71704: ST_TO_ADDR
// if p3 = 102 then
71705: LD_VAR 0 3
71709: PUSH
71710: LD_INT 102
71712: EQUAL
71713: IFFALSE 71723
// sDiff := true ;
71715: LD_ADDR_EXP 82
71719: PUSH
71720: LD_INT 1
71722: ST_TO_ADDR
// if p3 = 103 then
71723: LD_VAR 0 3
71727: PUSH
71728: LD_INT 103
71730: EQUAL
71731: IFFALSE 71741
// sFog := true ;
71733: LD_ADDR_EXP 85
71737: PUSH
71738: LD_INT 1
71740: ST_TO_ADDR
// if p3 = 104 then
71741: LD_VAR 0 3
71745: PUSH
71746: LD_INT 104
71748: EQUAL
71749: IFFALSE 71759
// sReset := true ;
71751: LD_ADDR_EXP 86
71755: PUSH
71756: LD_INT 1
71758: ST_TO_ADDR
// if p3 = 105 then
71759: LD_VAR 0 3
71763: PUSH
71764: LD_INT 105
71766: EQUAL
71767: IFFALSE 71777
// sSun := true ;
71769: LD_ADDR_EXP 87
71773: PUSH
71774: LD_INT 1
71776: ST_TO_ADDR
// if p3 = 106 then
71777: LD_VAR 0 3
71781: PUSH
71782: LD_INT 106
71784: EQUAL
71785: IFFALSE 71795
// sTiger := true ;
71787: LD_ADDR_EXP 83
71791: PUSH
71792: LD_INT 1
71794: ST_TO_ADDR
// if p3 = 107 then
71795: LD_VAR 0 3
71799: PUSH
71800: LD_INT 107
71802: EQUAL
71803: IFFALSE 71813
// sBomb := true ;
71805: LD_ADDR_EXP 84
71809: PUSH
71810: LD_INT 1
71812: ST_TO_ADDR
// if p3 = 108 then
71813: LD_VAR 0 3
71817: PUSH
71818: LD_INT 108
71820: EQUAL
71821: IFFALSE 71831
// sWound := true ;
71823: LD_ADDR_EXP 92
71827: PUSH
71828: LD_INT 1
71830: ST_TO_ADDR
// if p3 = 109 then
71831: LD_VAR 0 3
71835: PUSH
71836: LD_INT 109
71838: EQUAL
71839: IFFALSE 71849
// sBetray := true ;
71841: LD_ADDR_EXP 96
71845: PUSH
71846: LD_INT 1
71848: ST_TO_ADDR
// if p3 = 110 then
71849: LD_VAR 0 3
71853: PUSH
71854: LD_INT 110
71856: EQUAL
71857: IFFALSE 71867
// sContamin := true ;
71859: LD_ADDR_EXP 97
71863: PUSH
71864: LD_INT 1
71866: ST_TO_ADDR
// if p3 = 111 then
71867: LD_VAR 0 3
71871: PUSH
71872: LD_INT 111
71874: EQUAL
71875: IFFALSE 71885
// sOil := true ;
71877: LD_ADDR_EXP 99
71881: PUSH
71882: LD_INT 1
71884: ST_TO_ADDR
// if p3 = 112 then
71885: LD_VAR 0 3
71889: PUSH
71890: LD_INT 112
71892: EQUAL
71893: IFFALSE 71903
// sStu := true ;
71895: LD_ADDR_EXP 103
71899: PUSH
71900: LD_INT 1
71902: ST_TO_ADDR
// if p3 = 113 then
71903: LD_VAR 0 3
71907: PUSH
71908: LD_INT 113
71910: EQUAL
71911: IFFALSE 71921
// sBazooka := true ;
71913: LD_ADDR_EXP 106
71917: PUSH
71918: LD_INT 1
71920: ST_TO_ADDR
// if p3 = 114 then
71921: LD_VAR 0 3
71925: PUSH
71926: LD_INT 114
71928: EQUAL
71929: IFFALSE 71939
// sMortar := true ;
71931: LD_ADDR_EXP 107
71935: PUSH
71936: LD_INT 1
71938: ST_TO_ADDR
// if p3 = 115 then
71939: LD_VAR 0 3
71943: PUSH
71944: LD_INT 115
71946: EQUAL
71947: IFFALSE 71957
// sRanger := true ;
71949: LD_ADDR_EXP 117
71953: PUSH
71954: LD_INT 1
71956: ST_TO_ADDR
// if p3 = 116 then
71957: LD_VAR 0 3
71961: PUSH
71962: LD_INT 116
71964: EQUAL
71965: IFFALSE 71975
// sComputer := true ;
71967: LD_ADDR_EXP 118
71971: PUSH
71972: LD_INT 1
71974: ST_TO_ADDR
// if p3 = 117 then
71975: LD_VAR 0 3
71979: PUSH
71980: LD_INT 117
71982: EQUAL
71983: IFFALSE 71993
// s30 := true ;
71985: LD_ADDR_EXP 119
71989: PUSH
71990: LD_INT 1
71992: ST_TO_ADDR
// if p3 = 118 then
71993: LD_VAR 0 3
71997: PUSH
71998: LD_INT 118
72000: EQUAL
72001: IFFALSE 72011
// s60 := true ;
72003: LD_ADDR_EXP 120
72007: PUSH
72008: LD_INT 1
72010: ST_TO_ADDR
// end ; if p2 = hack_mode then
72011: LD_VAR 0 2
72015: PUSH
72016: LD_INT 101
72018: EQUAL
72019: IFFALSE 72147
// begin case p3 of 1 :
72021: LD_VAR 0 3
72025: PUSH
72026: LD_INT 1
72028: DOUBLE
72029: EQUAL
72030: IFTRUE 72034
72032: GO 72041
72034: POP
// hHackUnlimitedResources ; 2 :
72035: CALL 84286 0 0
72039: GO 72147
72041: LD_INT 2
72043: DOUBLE
72044: EQUAL
72045: IFTRUE 72049
72047: GO 72056
72049: POP
// hHackSetLevel10 ; 3 :
72050: CALL 84419 0 0
72054: GO 72147
72056: LD_INT 3
72058: DOUBLE
72059: EQUAL
72060: IFTRUE 72064
72062: GO 72071
72064: POP
// hHackSetLevel10YourUnits ; 4 :
72065: CALL 84504 0 0
72069: GO 72147
72071: LD_INT 4
72073: DOUBLE
72074: EQUAL
72075: IFTRUE 72079
72077: GO 72086
72079: POP
// hHackInvincible ; 5 :
72080: CALL 84952 0 0
72084: GO 72147
72086: LD_INT 5
72088: DOUBLE
72089: EQUAL
72090: IFTRUE 72094
72092: GO 72101
72094: POP
// hHackInvisible ; 6 :
72095: CALL 85063 0 0
72099: GO 72147
72101: LD_INT 6
72103: DOUBLE
72104: EQUAL
72105: IFTRUE 72109
72107: GO 72116
72109: POP
// hHackChangeYourSide ; 7 :
72110: CALL 85120 0 0
72114: GO 72147
72116: LD_INT 7
72118: DOUBLE
72119: EQUAL
72120: IFTRUE 72124
72122: GO 72131
72124: POP
// hHackChangeUnitSide ; 8 :
72125: CALL 85162 0 0
72129: GO 72147
72131: LD_INT 8
72133: DOUBLE
72134: EQUAL
72135: IFTRUE 72139
72137: GO 72146
72139: POP
// hHackFog ; end ;
72140: CALL 85263 0 0
72144: GO 72147
72146: POP
// end ; if p2 = game_save_mode then
72147: LD_VAR 0 2
72151: PUSH
72152: LD_INT 102
72154: EQUAL
72155: IFFALSE 72210
// begin if p3 = 1 then
72157: LD_VAR 0 3
72161: PUSH
72162: LD_INT 1
72164: EQUAL
72165: IFFALSE 72177
// globalGameSaveCounter := p4 ;
72167: LD_ADDR_EXP 63
72171: PUSH
72172: LD_VAR 0 4
72176: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
72177: LD_VAR 0 3
72181: PUSH
72182: LD_INT 2
72184: EQUAL
72185: PUSH
72186: LD_EXP 63
72190: AND
72191: IFFALSE 72210
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
72193: LD_STRING setGameSaveCounter(
72195: PUSH
72196: LD_EXP 63
72200: STR
72201: PUSH
72202: LD_STRING )
72204: STR
72205: PPUSH
72206: CALL_OW 559
// end ; end ;
72210: LD_VAR 0 7
72214: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
72215: LD_INT 0
72217: PPUSH
// streamModeActive := false ;
72218: LD_ADDR_EXP 64
72222: PUSH
72223: LD_INT 0
72225: ST_TO_ADDR
// normalCounter := 36 ;
72226: LD_ADDR_EXP 65
72230: PUSH
72231: LD_INT 36
72233: ST_TO_ADDR
// hardcoreCounter := 18 ;
72234: LD_ADDR_EXP 66
72238: PUSH
72239: LD_INT 18
72241: ST_TO_ADDR
// sRocket := false ;
72242: LD_ADDR_EXP 69
72246: PUSH
72247: LD_INT 0
72249: ST_TO_ADDR
// sSpeed := false ;
72250: LD_ADDR_EXP 68
72254: PUSH
72255: LD_INT 0
72257: ST_TO_ADDR
// sEngine := false ;
72258: LD_ADDR_EXP 70
72262: PUSH
72263: LD_INT 0
72265: ST_TO_ADDR
// sSpec := false ;
72266: LD_ADDR_EXP 67
72270: PUSH
72271: LD_INT 0
72273: ST_TO_ADDR
// sLevel := false ;
72274: LD_ADDR_EXP 71
72278: PUSH
72279: LD_INT 0
72281: ST_TO_ADDR
// sArmoury := false ;
72282: LD_ADDR_EXP 72
72286: PUSH
72287: LD_INT 0
72289: ST_TO_ADDR
// sRadar := false ;
72290: LD_ADDR_EXP 73
72294: PUSH
72295: LD_INT 0
72297: ST_TO_ADDR
// sBunker := false ;
72298: LD_ADDR_EXP 74
72302: PUSH
72303: LD_INT 0
72305: ST_TO_ADDR
// sHack := false ;
72306: LD_ADDR_EXP 75
72310: PUSH
72311: LD_INT 0
72313: ST_TO_ADDR
// sFire := false ;
72314: LD_ADDR_EXP 76
72318: PUSH
72319: LD_INT 0
72321: ST_TO_ADDR
// sRefresh := false ;
72322: LD_ADDR_EXP 77
72326: PUSH
72327: LD_INT 0
72329: ST_TO_ADDR
// sExp := false ;
72330: LD_ADDR_EXP 78
72334: PUSH
72335: LD_INT 0
72337: ST_TO_ADDR
// sDepot := false ;
72338: LD_ADDR_EXP 79
72342: PUSH
72343: LD_INT 0
72345: ST_TO_ADDR
// sFlag := false ;
72346: LD_ADDR_EXP 80
72350: PUSH
72351: LD_INT 0
72353: ST_TO_ADDR
// sKamikadze := false ;
72354: LD_ADDR_EXP 88
72358: PUSH
72359: LD_INT 0
72361: ST_TO_ADDR
// sTroll := false ;
72362: LD_ADDR_EXP 89
72366: PUSH
72367: LD_INT 0
72369: ST_TO_ADDR
// sSlow := false ;
72370: LD_ADDR_EXP 90
72374: PUSH
72375: LD_INT 0
72377: ST_TO_ADDR
// sLack := false ;
72378: LD_ADDR_EXP 91
72382: PUSH
72383: LD_INT 0
72385: ST_TO_ADDR
// sTank := false ;
72386: LD_ADDR_EXP 93
72390: PUSH
72391: LD_INT 0
72393: ST_TO_ADDR
// sRemote := false ;
72394: LD_ADDR_EXP 94
72398: PUSH
72399: LD_INT 0
72401: ST_TO_ADDR
// sPowell := false ;
72402: LD_ADDR_EXP 95
72406: PUSH
72407: LD_INT 0
72409: ST_TO_ADDR
// sTeleport := false ;
72410: LD_ADDR_EXP 98
72414: PUSH
72415: LD_INT 0
72417: ST_TO_ADDR
// sOilTower := false ;
72418: LD_ADDR_EXP 100
72422: PUSH
72423: LD_INT 0
72425: ST_TO_ADDR
// sShovel := false ;
72426: LD_ADDR_EXP 101
72430: PUSH
72431: LD_INT 0
72433: ST_TO_ADDR
// sSheik := false ;
72434: LD_ADDR_EXP 102
72438: PUSH
72439: LD_INT 0
72441: ST_TO_ADDR
// sEarthquake := false ;
72442: LD_ADDR_EXP 104
72446: PUSH
72447: LD_INT 0
72449: ST_TO_ADDR
// sAI := false ;
72450: LD_ADDR_EXP 105
72454: PUSH
72455: LD_INT 0
72457: ST_TO_ADDR
// sCargo := false ;
72458: LD_ADDR_EXP 108
72462: PUSH
72463: LD_INT 0
72465: ST_TO_ADDR
// sDLaser := false ;
72466: LD_ADDR_EXP 109
72470: PUSH
72471: LD_INT 0
72473: ST_TO_ADDR
// sExchange := false ;
72474: LD_ADDR_EXP 110
72478: PUSH
72479: LD_INT 0
72481: ST_TO_ADDR
// sFac := false ;
72482: LD_ADDR_EXP 111
72486: PUSH
72487: LD_INT 0
72489: ST_TO_ADDR
// sPower := false ;
72490: LD_ADDR_EXP 112
72494: PUSH
72495: LD_INT 0
72497: ST_TO_ADDR
// sRandom := false ;
72498: LD_ADDR_EXP 113
72502: PUSH
72503: LD_INT 0
72505: ST_TO_ADDR
// sShield := false ;
72506: LD_ADDR_EXP 114
72510: PUSH
72511: LD_INT 0
72513: ST_TO_ADDR
// sTime := false ;
72514: LD_ADDR_EXP 115
72518: PUSH
72519: LD_INT 0
72521: ST_TO_ADDR
// sTools := false ;
72522: LD_ADDR_EXP 116
72526: PUSH
72527: LD_INT 0
72529: ST_TO_ADDR
// sSold := false ;
72530: LD_ADDR_EXP 81
72534: PUSH
72535: LD_INT 0
72537: ST_TO_ADDR
// sDiff := false ;
72538: LD_ADDR_EXP 82
72542: PUSH
72543: LD_INT 0
72545: ST_TO_ADDR
// sFog := false ;
72546: LD_ADDR_EXP 85
72550: PUSH
72551: LD_INT 0
72553: ST_TO_ADDR
// sReset := false ;
72554: LD_ADDR_EXP 86
72558: PUSH
72559: LD_INT 0
72561: ST_TO_ADDR
// sSun := false ;
72562: LD_ADDR_EXP 87
72566: PUSH
72567: LD_INT 0
72569: ST_TO_ADDR
// sTiger := false ;
72570: LD_ADDR_EXP 83
72574: PUSH
72575: LD_INT 0
72577: ST_TO_ADDR
// sBomb := false ;
72578: LD_ADDR_EXP 84
72582: PUSH
72583: LD_INT 0
72585: ST_TO_ADDR
// sWound := false ;
72586: LD_ADDR_EXP 92
72590: PUSH
72591: LD_INT 0
72593: ST_TO_ADDR
// sBetray := false ;
72594: LD_ADDR_EXP 96
72598: PUSH
72599: LD_INT 0
72601: ST_TO_ADDR
// sContamin := false ;
72602: LD_ADDR_EXP 97
72606: PUSH
72607: LD_INT 0
72609: ST_TO_ADDR
// sOil := false ;
72610: LD_ADDR_EXP 99
72614: PUSH
72615: LD_INT 0
72617: ST_TO_ADDR
// sStu := false ;
72618: LD_ADDR_EXP 103
72622: PUSH
72623: LD_INT 0
72625: ST_TO_ADDR
// sBazooka := false ;
72626: LD_ADDR_EXP 106
72630: PUSH
72631: LD_INT 0
72633: ST_TO_ADDR
// sMortar := false ;
72634: LD_ADDR_EXP 107
72638: PUSH
72639: LD_INT 0
72641: ST_TO_ADDR
// sRanger := false ;
72642: LD_ADDR_EXP 117
72646: PUSH
72647: LD_INT 0
72649: ST_TO_ADDR
// sComputer := false ;
72650: LD_ADDR_EXP 118
72654: PUSH
72655: LD_INT 0
72657: ST_TO_ADDR
// s30 := false ;
72658: LD_ADDR_EXP 119
72662: PUSH
72663: LD_INT 0
72665: ST_TO_ADDR
// s60 := false ;
72666: LD_ADDR_EXP 120
72670: PUSH
72671: LD_INT 0
72673: ST_TO_ADDR
// end ;
72674: LD_VAR 0 1
72678: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
72679: LD_INT 0
72681: PPUSH
72682: PPUSH
72683: PPUSH
72684: PPUSH
72685: PPUSH
72686: PPUSH
72687: PPUSH
// result := [ ] ;
72688: LD_ADDR_VAR 0 2
72692: PUSH
72693: EMPTY
72694: ST_TO_ADDR
// if campaign_id = 1 then
72695: LD_OWVAR 69
72699: PUSH
72700: LD_INT 1
72702: EQUAL
72703: IFFALSE 75869
// begin case mission_number of 1 :
72705: LD_OWVAR 70
72709: PUSH
72710: LD_INT 1
72712: DOUBLE
72713: EQUAL
72714: IFTRUE 72718
72716: GO 72794
72718: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
72719: LD_ADDR_VAR 0 2
72723: PUSH
72724: LD_INT 2
72726: PUSH
72727: LD_INT 4
72729: PUSH
72730: LD_INT 11
72732: PUSH
72733: LD_INT 12
72735: PUSH
72736: LD_INT 15
72738: PUSH
72739: LD_INT 16
72741: PUSH
72742: LD_INT 22
72744: PUSH
72745: LD_INT 23
72747: PUSH
72748: LD_INT 26
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: PUSH
72762: LD_INT 101
72764: PUSH
72765: LD_INT 102
72767: PUSH
72768: LD_INT 106
72770: PUSH
72771: LD_INT 116
72773: PUSH
72774: LD_INT 117
72776: PUSH
72777: LD_INT 118
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: ST_TO_ADDR
72792: GO 75867
72794: LD_INT 2
72796: DOUBLE
72797: EQUAL
72798: IFTRUE 72802
72800: GO 72886
72802: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
72803: LD_ADDR_VAR 0 2
72807: PUSH
72808: LD_INT 2
72810: PUSH
72811: LD_INT 4
72813: PUSH
72814: LD_INT 11
72816: PUSH
72817: LD_INT 12
72819: PUSH
72820: LD_INT 15
72822: PUSH
72823: LD_INT 16
72825: PUSH
72826: LD_INT 22
72828: PUSH
72829: LD_INT 23
72831: PUSH
72832: LD_INT 26
72834: PUSH
72835: EMPTY
72836: LIST
72837: LIST
72838: LIST
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: PUSH
72846: LD_INT 101
72848: PUSH
72849: LD_INT 102
72851: PUSH
72852: LD_INT 105
72854: PUSH
72855: LD_INT 106
72857: PUSH
72858: LD_INT 108
72860: PUSH
72861: LD_INT 116
72863: PUSH
72864: LD_INT 117
72866: PUSH
72867: LD_INT 118
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: PUSH
72880: EMPTY
72881: LIST
72882: LIST
72883: ST_TO_ADDR
72884: GO 75867
72886: LD_INT 3
72888: DOUBLE
72889: EQUAL
72890: IFTRUE 72894
72892: GO 72982
72894: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
72895: LD_ADDR_VAR 0 2
72899: PUSH
72900: LD_INT 2
72902: PUSH
72903: LD_INT 4
72905: PUSH
72906: LD_INT 5
72908: PUSH
72909: LD_INT 11
72911: PUSH
72912: LD_INT 12
72914: PUSH
72915: LD_INT 15
72917: PUSH
72918: LD_INT 16
72920: PUSH
72921: LD_INT 22
72923: PUSH
72924: LD_INT 26
72926: PUSH
72927: LD_INT 36
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: LIST
72934: LIST
72935: LIST
72936: LIST
72937: LIST
72938: LIST
72939: LIST
72940: LIST
72941: PUSH
72942: LD_INT 101
72944: PUSH
72945: LD_INT 102
72947: PUSH
72948: LD_INT 105
72950: PUSH
72951: LD_INT 106
72953: PUSH
72954: LD_INT 108
72956: PUSH
72957: LD_INT 116
72959: PUSH
72960: LD_INT 117
72962: PUSH
72963: LD_INT 118
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: LIST
72970: LIST
72971: LIST
72972: LIST
72973: LIST
72974: LIST
72975: PUSH
72976: EMPTY
72977: LIST
72978: LIST
72979: ST_TO_ADDR
72980: GO 75867
72982: LD_INT 4
72984: DOUBLE
72985: EQUAL
72986: IFTRUE 72990
72988: GO 73086
72990: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
72991: LD_ADDR_VAR 0 2
72995: PUSH
72996: LD_INT 2
72998: PUSH
72999: LD_INT 4
73001: PUSH
73002: LD_INT 5
73004: PUSH
73005: LD_INT 8
73007: PUSH
73008: LD_INT 11
73010: PUSH
73011: LD_INT 12
73013: PUSH
73014: LD_INT 15
73016: PUSH
73017: LD_INT 16
73019: PUSH
73020: LD_INT 22
73022: PUSH
73023: LD_INT 23
73025: PUSH
73026: LD_INT 26
73028: PUSH
73029: LD_INT 36
73031: PUSH
73032: EMPTY
73033: LIST
73034: LIST
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: LIST
73040: LIST
73041: LIST
73042: LIST
73043: LIST
73044: LIST
73045: PUSH
73046: LD_INT 101
73048: PUSH
73049: LD_INT 102
73051: PUSH
73052: LD_INT 105
73054: PUSH
73055: LD_INT 106
73057: PUSH
73058: LD_INT 108
73060: PUSH
73061: LD_INT 116
73063: PUSH
73064: LD_INT 117
73066: PUSH
73067: LD_INT 118
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: LIST
73074: LIST
73075: LIST
73076: LIST
73077: LIST
73078: LIST
73079: PUSH
73080: EMPTY
73081: LIST
73082: LIST
73083: ST_TO_ADDR
73084: GO 75867
73086: LD_INT 5
73088: DOUBLE
73089: EQUAL
73090: IFTRUE 73094
73092: GO 73206
73094: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
73095: LD_ADDR_VAR 0 2
73099: PUSH
73100: LD_INT 2
73102: PUSH
73103: LD_INT 4
73105: PUSH
73106: LD_INT 5
73108: PUSH
73109: LD_INT 6
73111: PUSH
73112: LD_INT 8
73114: PUSH
73115: LD_INT 11
73117: PUSH
73118: LD_INT 12
73120: PUSH
73121: LD_INT 15
73123: PUSH
73124: LD_INT 16
73126: PUSH
73127: LD_INT 22
73129: PUSH
73130: LD_INT 23
73132: PUSH
73133: LD_INT 25
73135: PUSH
73136: LD_INT 26
73138: PUSH
73139: LD_INT 36
73141: PUSH
73142: EMPTY
73143: LIST
73144: LIST
73145: LIST
73146: LIST
73147: LIST
73148: LIST
73149: LIST
73150: LIST
73151: LIST
73152: LIST
73153: LIST
73154: LIST
73155: LIST
73156: LIST
73157: PUSH
73158: LD_INT 101
73160: PUSH
73161: LD_INT 102
73163: PUSH
73164: LD_INT 105
73166: PUSH
73167: LD_INT 106
73169: PUSH
73170: LD_INT 108
73172: PUSH
73173: LD_INT 109
73175: PUSH
73176: LD_INT 112
73178: PUSH
73179: LD_INT 116
73181: PUSH
73182: LD_INT 117
73184: PUSH
73185: LD_INT 118
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: PUSH
73200: EMPTY
73201: LIST
73202: LIST
73203: ST_TO_ADDR
73204: GO 75867
73206: LD_INT 6
73208: DOUBLE
73209: EQUAL
73210: IFTRUE 73214
73212: GO 73346
73214: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
73215: LD_ADDR_VAR 0 2
73219: PUSH
73220: LD_INT 2
73222: PUSH
73223: LD_INT 4
73225: PUSH
73226: LD_INT 5
73228: PUSH
73229: LD_INT 6
73231: PUSH
73232: LD_INT 8
73234: PUSH
73235: LD_INT 11
73237: PUSH
73238: LD_INT 12
73240: PUSH
73241: LD_INT 15
73243: PUSH
73244: LD_INT 16
73246: PUSH
73247: LD_INT 20
73249: PUSH
73250: LD_INT 21
73252: PUSH
73253: LD_INT 22
73255: PUSH
73256: LD_INT 23
73258: PUSH
73259: LD_INT 25
73261: PUSH
73262: LD_INT 26
73264: PUSH
73265: LD_INT 30
73267: PUSH
73268: LD_INT 31
73270: PUSH
73271: LD_INT 32
73273: PUSH
73274: LD_INT 36
73276: PUSH
73277: EMPTY
73278: LIST
73279: LIST
73280: LIST
73281: LIST
73282: LIST
73283: LIST
73284: LIST
73285: LIST
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: LIST
73294: LIST
73295: LIST
73296: LIST
73297: PUSH
73298: LD_INT 101
73300: PUSH
73301: LD_INT 102
73303: PUSH
73304: LD_INT 105
73306: PUSH
73307: LD_INT 106
73309: PUSH
73310: LD_INT 108
73312: PUSH
73313: LD_INT 109
73315: PUSH
73316: LD_INT 112
73318: PUSH
73319: LD_INT 116
73321: PUSH
73322: LD_INT 117
73324: PUSH
73325: LD_INT 118
73327: PUSH
73328: EMPTY
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: LIST
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: ST_TO_ADDR
73344: GO 75867
73346: LD_INT 7
73348: DOUBLE
73349: EQUAL
73350: IFTRUE 73354
73352: GO 73466
73354: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
73355: LD_ADDR_VAR 0 2
73359: PUSH
73360: LD_INT 2
73362: PUSH
73363: LD_INT 4
73365: PUSH
73366: LD_INT 5
73368: PUSH
73369: LD_INT 7
73371: PUSH
73372: LD_INT 11
73374: PUSH
73375: LD_INT 12
73377: PUSH
73378: LD_INT 15
73380: PUSH
73381: LD_INT 16
73383: PUSH
73384: LD_INT 20
73386: PUSH
73387: LD_INT 21
73389: PUSH
73390: LD_INT 22
73392: PUSH
73393: LD_INT 23
73395: PUSH
73396: LD_INT 25
73398: PUSH
73399: LD_INT 26
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: LIST
73406: LIST
73407: LIST
73408: LIST
73409: LIST
73410: LIST
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: PUSH
73418: LD_INT 101
73420: PUSH
73421: LD_INT 102
73423: PUSH
73424: LD_INT 103
73426: PUSH
73427: LD_INT 105
73429: PUSH
73430: LD_INT 106
73432: PUSH
73433: LD_INT 108
73435: PUSH
73436: LD_INT 112
73438: PUSH
73439: LD_INT 116
73441: PUSH
73442: LD_INT 117
73444: PUSH
73445: LD_INT 118
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: LIST
73452: LIST
73453: LIST
73454: LIST
73455: LIST
73456: LIST
73457: LIST
73458: LIST
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: ST_TO_ADDR
73464: GO 75867
73466: LD_INT 8
73468: DOUBLE
73469: EQUAL
73470: IFTRUE 73474
73472: GO 73614
73474: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
73475: LD_ADDR_VAR 0 2
73479: PUSH
73480: LD_INT 2
73482: PUSH
73483: LD_INT 4
73485: PUSH
73486: LD_INT 5
73488: PUSH
73489: LD_INT 6
73491: PUSH
73492: LD_INT 7
73494: PUSH
73495: LD_INT 8
73497: PUSH
73498: LD_INT 11
73500: PUSH
73501: LD_INT 12
73503: PUSH
73504: LD_INT 15
73506: PUSH
73507: LD_INT 16
73509: PUSH
73510: LD_INT 20
73512: PUSH
73513: LD_INT 21
73515: PUSH
73516: LD_INT 22
73518: PUSH
73519: LD_INT 23
73521: PUSH
73522: LD_INT 25
73524: PUSH
73525: LD_INT 26
73527: PUSH
73528: LD_INT 30
73530: PUSH
73531: LD_INT 31
73533: PUSH
73534: LD_INT 32
73536: PUSH
73537: LD_INT 36
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: LIST
73544: LIST
73545: LIST
73546: LIST
73547: LIST
73548: LIST
73549: LIST
73550: LIST
73551: LIST
73552: LIST
73553: LIST
73554: LIST
73555: LIST
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: PUSH
73562: LD_INT 101
73564: PUSH
73565: LD_INT 102
73567: PUSH
73568: LD_INT 103
73570: PUSH
73571: LD_INT 105
73573: PUSH
73574: LD_INT 106
73576: PUSH
73577: LD_INT 108
73579: PUSH
73580: LD_INT 109
73582: PUSH
73583: LD_INT 112
73585: PUSH
73586: LD_INT 116
73588: PUSH
73589: LD_INT 117
73591: PUSH
73592: LD_INT 118
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: LIST
73599: LIST
73600: LIST
73601: LIST
73602: LIST
73603: LIST
73604: LIST
73605: LIST
73606: LIST
73607: PUSH
73608: EMPTY
73609: LIST
73610: LIST
73611: ST_TO_ADDR
73612: GO 75867
73614: LD_INT 9
73616: DOUBLE
73617: EQUAL
73618: IFTRUE 73622
73620: GO 73770
73622: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
73623: LD_ADDR_VAR 0 2
73627: PUSH
73628: LD_INT 2
73630: PUSH
73631: LD_INT 4
73633: PUSH
73634: LD_INT 5
73636: PUSH
73637: LD_INT 6
73639: PUSH
73640: LD_INT 7
73642: PUSH
73643: LD_INT 8
73645: PUSH
73646: LD_INT 11
73648: PUSH
73649: LD_INT 12
73651: PUSH
73652: LD_INT 15
73654: PUSH
73655: LD_INT 16
73657: PUSH
73658: LD_INT 20
73660: PUSH
73661: LD_INT 21
73663: PUSH
73664: LD_INT 22
73666: PUSH
73667: LD_INT 23
73669: PUSH
73670: LD_INT 25
73672: PUSH
73673: LD_INT 26
73675: PUSH
73676: LD_INT 28
73678: PUSH
73679: LD_INT 30
73681: PUSH
73682: LD_INT 31
73684: PUSH
73685: LD_INT 32
73687: PUSH
73688: LD_INT 36
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: LIST
73705: LIST
73706: LIST
73707: LIST
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: LIST
73713: PUSH
73714: LD_INT 101
73716: PUSH
73717: LD_INT 102
73719: PUSH
73720: LD_INT 103
73722: PUSH
73723: LD_INT 105
73725: PUSH
73726: LD_INT 106
73728: PUSH
73729: LD_INT 108
73731: PUSH
73732: LD_INT 109
73734: PUSH
73735: LD_INT 112
73737: PUSH
73738: LD_INT 114
73740: PUSH
73741: LD_INT 116
73743: PUSH
73744: LD_INT 117
73746: PUSH
73747: LD_INT 118
73749: PUSH
73750: EMPTY
73751: LIST
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: LIST
73760: LIST
73761: LIST
73762: LIST
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: ST_TO_ADDR
73768: GO 75867
73770: LD_INT 10
73772: DOUBLE
73773: EQUAL
73774: IFTRUE 73778
73776: GO 73974
73778: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
73779: LD_ADDR_VAR 0 2
73783: PUSH
73784: LD_INT 2
73786: PUSH
73787: LD_INT 4
73789: PUSH
73790: LD_INT 5
73792: PUSH
73793: LD_INT 6
73795: PUSH
73796: LD_INT 7
73798: PUSH
73799: LD_INT 8
73801: PUSH
73802: LD_INT 9
73804: PUSH
73805: LD_INT 10
73807: PUSH
73808: LD_INT 11
73810: PUSH
73811: LD_INT 12
73813: PUSH
73814: LD_INT 13
73816: PUSH
73817: LD_INT 14
73819: PUSH
73820: LD_INT 15
73822: PUSH
73823: LD_INT 16
73825: PUSH
73826: LD_INT 17
73828: PUSH
73829: LD_INT 18
73831: PUSH
73832: LD_INT 19
73834: PUSH
73835: LD_INT 20
73837: PUSH
73838: LD_INT 21
73840: PUSH
73841: LD_INT 22
73843: PUSH
73844: LD_INT 23
73846: PUSH
73847: LD_INT 24
73849: PUSH
73850: LD_INT 25
73852: PUSH
73853: LD_INT 26
73855: PUSH
73856: LD_INT 28
73858: PUSH
73859: LD_INT 30
73861: PUSH
73862: LD_INT 31
73864: PUSH
73865: LD_INT 32
73867: PUSH
73868: LD_INT 36
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: LIST
73875: LIST
73876: LIST
73877: LIST
73878: LIST
73879: LIST
73880: LIST
73881: LIST
73882: LIST
73883: LIST
73884: LIST
73885: LIST
73886: LIST
73887: LIST
73888: LIST
73889: LIST
73890: LIST
73891: LIST
73892: LIST
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: LIST
73900: LIST
73901: PUSH
73902: LD_INT 101
73904: PUSH
73905: LD_INT 102
73907: PUSH
73908: LD_INT 103
73910: PUSH
73911: LD_INT 104
73913: PUSH
73914: LD_INT 105
73916: PUSH
73917: LD_INT 106
73919: PUSH
73920: LD_INT 107
73922: PUSH
73923: LD_INT 108
73925: PUSH
73926: LD_INT 109
73928: PUSH
73929: LD_INT 110
73931: PUSH
73932: LD_INT 111
73934: PUSH
73935: LD_INT 112
73937: PUSH
73938: LD_INT 114
73940: PUSH
73941: LD_INT 116
73943: PUSH
73944: LD_INT 117
73946: PUSH
73947: LD_INT 118
73949: PUSH
73950: EMPTY
73951: LIST
73952: LIST
73953: LIST
73954: LIST
73955: LIST
73956: LIST
73957: LIST
73958: LIST
73959: LIST
73960: LIST
73961: LIST
73962: LIST
73963: LIST
73964: LIST
73965: LIST
73966: LIST
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: ST_TO_ADDR
73972: GO 75867
73974: LD_INT 11
73976: DOUBLE
73977: EQUAL
73978: IFTRUE 73982
73980: GO 74186
73982: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
73983: LD_ADDR_VAR 0 2
73987: PUSH
73988: LD_INT 2
73990: PUSH
73991: LD_INT 3
73993: PUSH
73994: LD_INT 4
73996: PUSH
73997: LD_INT 5
73999: PUSH
74000: LD_INT 6
74002: PUSH
74003: LD_INT 7
74005: PUSH
74006: LD_INT 8
74008: PUSH
74009: LD_INT 9
74011: PUSH
74012: LD_INT 10
74014: PUSH
74015: LD_INT 11
74017: PUSH
74018: LD_INT 12
74020: PUSH
74021: LD_INT 13
74023: PUSH
74024: LD_INT 14
74026: PUSH
74027: LD_INT 15
74029: PUSH
74030: LD_INT 16
74032: PUSH
74033: LD_INT 17
74035: PUSH
74036: LD_INT 18
74038: PUSH
74039: LD_INT 19
74041: PUSH
74042: LD_INT 20
74044: PUSH
74045: LD_INT 21
74047: PUSH
74048: LD_INT 22
74050: PUSH
74051: LD_INT 23
74053: PUSH
74054: LD_INT 24
74056: PUSH
74057: LD_INT 25
74059: PUSH
74060: LD_INT 26
74062: PUSH
74063: LD_INT 28
74065: PUSH
74066: LD_INT 30
74068: PUSH
74069: LD_INT 31
74071: PUSH
74072: LD_INT 32
74074: PUSH
74075: LD_INT 34
74077: PUSH
74078: LD_INT 36
74080: PUSH
74081: EMPTY
74082: LIST
74083: LIST
74084: LIST
74085: LIST
74086: LIST
74087: LIST
74088: LIST
74089: LIST
74090: LIST
74091: LIST
74092: LIST
74093: LIST
74094: LIST
74095: LIST
74096: LIST
74097: LIST
74098: LIST
74099: LIST
74100: LIST
74101: LIST
74102: LIST
74103: LIST
74104: LIST
74105: LIST
74106: LIST
74107: LIST
74108: LIST
74109: LIST
74110: LIST
74111: LIST
74112: LIST
74113: PUSH
74114: LD_INT 101
74116: PUSH
74117: LD_INT 102
74119: PUSH
74120: LD_INT 103
74122: PUSH
74123: LD_INT 104
74125: PUSH
74126: LD_INT 105
74128: PUSH
74129: LD_INT 106
74131: PUSH
74132: LD_INT 107
74134: PUSH
74135: LD_INT 108
74137: PUSH
74138: LD_INT 109
74140: PUSH
74141: LD_INT 110
74143: PUSH
74144: LD_INT 111
74146: PUSH
74147: LD_INT 112
74149: PUSH
74150: LD_INT 114
74152: PUSH
74153: LD_INT 116
74155: PUSH
74156: LD_INT 117
74158: PUSH
74159: LD_INT 118
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: LIST
74166: LIST
74167: LIST
74168: LIST
74169: LIST
74170: LIST
74171: LIST
74172: LIST
74173: LIST
74174: LIST
74175: LIST
74176: LIST
74177: LIST
74178: LIST
74179: PUSH
74180: EMPTY
74181: LIST
74182: LIST
74183: ST_TO_ADDR
74184: GO 75867
74186: LD_INT 12
74188: DOUBLE
74189: EQUAL
74190: IFTRUE 74194
74192: GO 74414
74194: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
74195: LD_ADDR_VAR 0 2
74199: PUSH
74200: LD_INT 1
74202: PUSH
74203: LD_INT 2
74205: PUSH
74206: LD_INT 3
74208: PUSH
74209: LD_INT 4
74211: PUSH
74212: LD_INT 5
74214: PUSH
74215: LD_INT 6
74217: PUSH
74218: LD_INT 7
74220: PUSH
74221: LD_INT 8
74223: PUSH
74224: LD_INT 9
74226: PUSH
74227: LD_INT 10
74229: PUSH
74230: LD_INT 11
74232: PUSH
74233: LD_INT 12
74235: PUSH
74236: LD_INT 13
74238: PUSH
74239: LD_INT 14
74241: PUSH
74242: LD_INT 15
74244: PUSH
74245: LD_INT 16
74247: PUSH
74248: LD_INT 17
74250: PUSH
74251: LD_INT 18
74253: PUSH
74254: LD_INT 19
74256: PUSH
74257: LD_INT 20
74259: PUSH
74260: LD_INT 21
74262: PUSH
74263: LD_INT 22
74265: PUSH
74266: LD_INT 23
74268: PUSH
74269: LD_INT 24
74271: PUSH
74272: LD_INT 25
74274: PUSH
74275: LD_INT 26
74277: PUSH
74278: LD_INT 27
74280: PUSH
74281: LD_INT 28
74283: PUSH
74284: LD_INT 30
74286: PUSH
74287: LD_INT 31
74289: PUSH
74290: LD_INT 32
74292: PUSH
74293: LD_INT 33
74295: PUSH
74296: LD_INT 34
74298: PUSH
74299: LD_INT 36
74301: PUSH
74302: EMPTY
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: LIST
74313: LIST
74314: LIST
74315: LIST
74316: LIST
74317: LIST
74318: LIST
74319: LIST
74320: LIST
74321: LIST
74322: LIST
74323: LIST
74324: LIST
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: LIST
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: PUSH
74338: LD_INT 101
74340: PUSH
74341: LD_INT 102
74343: PUSH
74344: LD_INT 103
74346: PUSH
74347: LD_INT 104
74349: PUSH
74350: LD_INT 105
74352: PUSH
74353: LD_INT 106
74355: PUSH
74356: LD_INT 107
74358: PUSH
74359: LD_INT 108
74361: PUSH
74362: LD_INT 109
74364: PUSH
74365: LD_INT 110
74367: PUSH
74368: LD_INT 111
74370: PUSH
74371: LD_INT 112
74373: PUSH
74374: LD_INT 113
74376: PUSH
74377: LD_INT 114
74379: PUSH
74380: LD_INT 116
74382: PUSH
74383: LD_INT 117
74385: PUSH
74386: LD_INT 118
74388: PUSH
74389: EMPTY
74390: LIST
74391: LIST
74392: LIST
74393: LIST
74394: LIST
74395: LIST
74396: LIST
74397: LIST
74398: LIST
74399: LIST
74400: LIST
74401: LIST
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: PUSH
74408: EMPTY
74409: LIST
74410: LIST
74411: ST_TO_ADDR
74412: GO 75867
74414: LD_INT 13
74416: DOUBLE
74417: EQUAL
74418: IFTRUE 74422
74420: GO 74630
74422: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
74423: LD_ADDR_VAR 0 2
74427: PUSH
74428: LD_INT 1
74430: PUSH
74431: LD_INT 2
74433: PUSH
74434: LD_INT 3
74436: PUSH
74437: LD_INT 4
74439: PUSH
74440: LD_INT 5
74442: PUSH
74443: LD_INT 8
74445: PUSH
74446: LD_INT 9
74448: PUSH
74449: LD_INT 10
74451: PUSH
74452: LD_INT 11
74454: PUSH
74455: LD_INT 12
74457: PUSH
74458: LD_INT 14
74460: PUSH
74461: LD_INT 15
74463: PUSH
74464: LD_INT 16
74466: PUSH
74467: LD_INT 17
74469: PUSH
74470: LD_INT 18
74472: PUSH
74473: LD_INT 19
74475: PUSH
74476: LD_INT 20
74478: PUSH
74479: LD_INT 21
74481: PUSH
74482: LD_INT 22
74484: PUSH
74485: LD_INT 23
74487: PUSH
74488: LD_INT 24
74490: PUSH
74491: LD_INT 25
74493: PUSH
74494: LD_INT 26
74496: PUSH
74497: LD_INT 27
74499: PUSH
74500: LD_INT 28
74502: PUSH
74503: LD_INT 30
74505: PUSH
74506: LD_INT 31
74508: PUSH
74509: LD_INT 32
74511: PUSH
74512: LD_INT 33
74514: PUSH
74515: LD_INT 34
74517: PUSH
74518: LD_INT 36
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: LIST
74525: LIST
74526: LIST
74527: LIST
74528: LIST
74529: LIST
74530: LIST
74531: LIST
74532: LIST
74533: LIST
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: LIST
74539: LIST
74540: LIST
74541: LIST
74542: LIST
74543: LIST
74544: LIST
74545: LIST
74546: LIST
74547: LIST
74548: LIST
74549: LIST
74550: LIST
74551: LIST
74552: LIST
74553: PUSH
74554: LD_INT 101
74556: PUSH
74557: LD_INT 102
74559: PUSH
74560: LD_INT 103
74562: PUSH
74563: LD_INT 104
74565: PUSH
74566: LD_INT 105
74568: PUSH
74569: LD_INT 106
74571: PUSH
74572: LD_INT 107
74574: PUSH
74575: LD_INT 108
74577: PUSH
74578: LD_INT 109
74580: PUSH
74581: LD_INT 110
74583: PUSH
74584: LD_INT 111
74586: PUSH
74587: LD_INT 112
74589: PUSH
74590: LD_INT 113
74592: PUSH
74593: LD_INT 114
74595: PUSH
74596: LD_INT 116
74598: PUSH
74599: LD_INT 117
74601: PUSH
74602: LD_INT 118
74604: PUSH
74605: EMPTY
74606: LIST
74607: LIST
74608: LIST
74609: LIST
74610: LIST
74611: LIST
74612: LIST
74613: LIST
74614: LIST
74615: LIST
74616: LIST
74617: LIST
74618: LIST
74619: LIST
74620: LIST
74621: LIST
74622: LIST
74623: PUSH
74624: EMPTY
74625: LIST
74626: LIST
74627: ST_TO_ADDR
74628: GO 75867
74630: LD_INT 14
74632: DOUBLE
74633: EQUAL
74634: IFTRUE 74638
74636: GO 74862
74638: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
74639: LD_ADDR_VAR 0 2
74643: PUSH
74644: LD_INT 1
74646: PUSH
74647: LD_INT 2
74649: PUSH
74650: LD_INT 3
74652: PUSH
74653: LD_INT 4
74655: PUSH
74656: LD_INT 5
74658: PUSH
74659: LD_INT 6
74661: PUSH
74662: LD_INT 7
74664: PUSH
74665: LD_INT 8
74667: PUSH
74668: LD_INT 9
74670: PUSH
74671: LD_INT 10
74673: PUSH
74674: LD_INT 11
74676: PUSH
74677: LD_INT 12
74679: PUSH
74680: LD_INT 13
74682: PUSH
74683: LD_INT 14
74685: PUSH
74686: LD_INT 15
74688: PUSH
74689: LD_INT 16
74691: PUSH
74692: LD_INT 17
74694: PUSH
74695: LD_INT 18
74697: PUSH
74698: LD_INT 19
74700: PUSH
74701: LD_INT 20
74703: PUSH
74704: LD_INT 21
74706: PUSH
74707: LD_INT 22
74709: PUSH
74710: LD_INT 23
74712: PUSH
74713: LD_INT 24
74715: PUSH
74716: LD_INT 25
74718: PUSH
74719: LD_INT 26
74721: PUSH
74722: LD_INT 27
74724: PUSH
74725: LD_INT 28
74727: PUSH
74728: LD_INT 29
74730: PUSH
74731: LD_INT 30
74733: PUSH
74734: LD_INT 31
74736: PUSH
74737: LD_INT 32
74739: PUSH
74740: LD_INT 33
74742: PUSH
74743: LD_INT 34
74745: PUSH
74746: LD_INT 36
74748: PUSH
74749: EMPTY
74750: LIST
74751: LIST
74752: LIST
74753: LIST
74754: LIST
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: LIST
74760: LIST
74761: LIST
74762: LIST
74763: LIST
74764: LIST
74765: LIST
74766: LIST
74767: LIST
74768: LIST
74769: LIST
74770: LIST
74771: LIST
74772: LIST
74773: LIST
74774: LIST
74775: LIST
74776: LIST
74777: LIST
74778: LIST
74779: LIST
74780: LIST
74781: LIST
74782: LIST
74783: LIST
74784: LIST
74785: PUSH
74786: LD_INT 101
74788: PUSH
74789: LD_INT 102
74791: PUSH
74792: LD_INT 103
74794: PUSH
74795: LD_INT 104
74797: PUSH
74798: LD_INT 105
74800: PUSH
74801: LD_INT 106
74803: PUSH
74804: LD_INT 107
74806: PUSH
74807: LD_INT 108
74809: PUSH
74810: LD_INT 109
74812: PUSH
74813: LD_INT 110
74815: PUSH
74816: LD_INT 111
74818: PUSH
74819: LD_INT 112
74821: PUSH
74822: LD_INT 113
74824: PUSH
74825: LD_INT 114
74827: PUSH
74828: LD_INT 116
74830: PUSH
74831: LD_INT 117
74833: PUSH
74834: LD_INT 118
74836: PUSH
74837: EMPTY
74838: LIST
74839: LIST
74840: LIST
74841: LIST
74842: LIST
74843: LIST
74844: LIST
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: LIST
74851: LIST
74852: LIST
74853: LIST
74854: LIST
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: ST_TO_ADDR
74860: GO 75867
74862: LD_INT 15
74864: DOUBLE
74865: EQUAL
74866: IFTRUE 74870
74868: GO 75094
74870: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
74871: LD_ADDR_VAR 0 2
74875: PUSH
74876: LD_INT 1
74878: PUSH
74879: LD_INT 2
74881: PUSH
74882: LD_INT 3
74884: PUSH
74885: LD_INT 4
74887: PUSH
74888: LD_INT 5
74890: PUSH
74891: LD_INT 6
74893: PUSH
74894: LD_INT 7
74896: PUSH
74897: LD_INT 8
74899: PUSH
74900: LD_INT 9
74902: PUSH
74903: LD_INT 10
74905: PUSH
74906: LD_INT 11
74908: PUSH
74909: LD_INT 12
74911: PUSH
74912: LD_INT 13
74914: PUSH
74915: LD_INT 14
74917: PUSH
74918: LD_INT 15
74920: PUSH
74921: LD_INT 16
74923: PUSH
74924: LD_INT 17
74926: PUSH
74927: LD_INT 18
74929: PUSH
74930: LD_INT 19
74932: PUSH
74933: LD_INT 20
74935: PUSH
74936: LD_INT 21
74938: PUSH
74939: LD_INT 22
74941: PUSH
74942: LD_INT 23
74944: PUSH
74945: LD_INT 24
74947: PUSH
74948: LD_INT 25
74950: PUSH
74951: LD_INT 26
74953: PUSH
74954: LD_INT 27
74956: PUSH
74957: LD_INT 28
74959: PUSH
74960: LD_INT 29
74962: PUSH
74963: LD_INT 30
74965: PUSH
74966: LD_INT 31
74968: PUSH
74969: LD_INT 32
74971: PUSH
74972: LD_INT 33
74974: PUSH
74975: LD_INT 34
74977: PUSH
74978: LD_INT 36
74980: PUSH
74981: EMPTY
74982: LIST
74983: LIST
74984: LIST
74985: LIST
74986: LIST
74987: LIST
74988: LIST
74989: LIST
74990: LIST
74991: LIST
74992: LIST
74993: LIST
74994: LIST
74995: LIST
74996: LIST
74997: LIST
74998: LIST
74999: LIST
75000: LIST
75001: LIST
75002: LIST
75003: LIST
75004: LIST
75005: LIST
75006: LIST
75007: LIST
75008: LIST
75009: LIST
75010: LIST
75011: LIST
75012: LIST
75013: LIST
75014: LIST
75015: LIST
75016: LIST
75017: PUSH
75018: LD_INT 101
75020: PUSH
75021: LD_INT 102
75023: PUSH
75024: LD_INT 103
75026: PUSH
75027: LD_INT 104
75029: PUSH
75030: LD_INT 105
75032: PUSH
75033: LD_INT 106
75035: PUSH
75036: LD_INT 107
75038: PUSH
75039: LD_INT 108
75041: PUSH
75042: LD_INT 109
75044: PUSH
75045: LD_INT 110
75047: PUSH
75048: LD_INT 111
75050: PUSH
75051: LD_INT 112
75053: PUSH
75054: LD_INT 113
75056: PUSH
75057: LD_INT 114
75059: PUSH
75060: LD_INT 116
75062: PUSH
75063: LD_INT 117
75065: PUSH
75066: LD_INT 118
75068: PUSH
75069: EMPTY
75070: LIST
75071: LIST
75072: LIST
75073: LIST
75074: LIST
75075: LIST
75076: LIST
75077: LIST
75078: LIST
75079: LIST
75080: LIST
75081: LIST
75082: LIST
75083: LIST
75084: LIST
75085: LIST
75086: LIST
75087: PUSH
75088: EMPTY
75089: LIST
75090: LIST
75091: ST_TO_ADDR
75092: GO 75867
75094: LD_INT 16
75096: DOUBLE
75097: EQUAL
75098: IFTRUE 75102
75100: GO 75238
75102: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
75103: LD_ADDR_VAR 0 2
75107: PUSH
75108: LD_INT 2
75110: PUSH
75111: LD_INT 4
75113: PUSH
75114: LD_INT 5
75116: PUSH
75117: LD_INT 7
75119: PUSH
75120: LD_INT 11
75122: PUSH
75123: LD_INT 12
75125: PUSH
75126: LD_INT 15
75128: PUSH
75129: LD_INT 16
75131: PUSH
75132: LD_INT 20
75134: PUSH
75135: LD_INT 21
75137: PUSH
75138: LD_INT 22
75140: PUSH
75141: LD_INT 23
75143: PUSH
75144: LD_INT 25
75146: PUSH
75147: LD_INT 26
75149: PUSH
75150: LD_INT 30
75152: PUSH
75153: LD_INT 31
75155: PUSH
75156: LD_INT 32
75158: PUSH
75159: LD_INT 33
75161: PUSH
75162: LD_INT 34
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: LIST
75169: LIST
75170: LIST
75171: LIST
75172: LIST
75173: LIST
75174: LIST
75175: LIST
75176: LIST
75177: LIST
75178: LIST
75179: LIST
75180: LIST
75181: LIST
75182: LIST
75183: LIST
75184: LIST
75185: PUSH
75186: LD_INT 101
75188: PUSH
75189: LD_INT 102
75191: PUSH
75192: LD_INT 103
75194: PUSH
75195: LD_INT 106
75197: PUSH
75198: LD_INT 108
75200: PUSH
75201: LD_INT 112
75203: PUSH
75204: LD_INT 113
75206: PUSH
75207: LD_INT 114
75209: PUSH
75210: LD_INT 116
75212: PUSH
75213: LD_INT 117
75215: PUSH
75216: LD_INT 118
75218: PUSH
75219: EMPTY
75220: LIST
75221: LIST
75222: LIST
75223: LIST
75224: LIST
75225: LIST
75226: LIST
75227: LIST
75228: LIST
75229: LIST
75230: LIST
75231: PUSH
75232: EMPTY
75233: LIST
75234: LIST
75235: ST_TO_ADDR
75236: GO 75867
75238: LD_INT 17
75240: DOUBLE
75241: EQUAL
75242: IFTRUE 75246
75244: GO 75470
75246: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
75247: LD_ADDR_VAR 0 2
75251: PUSH
75252: LD_INT 1
75254: PUSH
75255: LD_INT 2
75257: PUSH
75258: LD_INT 3
75260: PUSH
75261: LD_INT 4
75263: PUSH
75264: LD_INT 5
75266: PUSH
75267: LD_INT 6
75269: PUSH
75270: LD_INT 7
75272: PUSH
75273: LD_INT 8
75275: PUSH
75276: LD_INT 9
75278: PUSH
75279: LD_INT 10
75281: PUSH
75282: LD_INT 11
75284: PUSH
75285: LD_INT 12
75287: PUSH
75288: LD_INT 13
75290: PUSH
75291: LD_INT 14
75293: PUSH
75294: LD_INT 15
75296: PUSH
75297: LD_INT 16
75299: PUSH
75300: LD_INT 17
75302: PUSH
75303: LD_INT 18
75305: PUSH
75306: LD_INT 19
75308: PUSH
75309: LD_INT 20
75311: PUSH
75312: LD_INT 21
75314: PUSH
75315: LD_INT 22
75317: PUSH
75318: LD_INT 23
75320: PUSH
75321: LD_INT 24
75323: PUSH
75324: LD_INT 25
75326: PUSH
75327: LD_INT 26
75329: PUSH
75330: LD_INT 27
75332: PUSH
75333: LD_INT 28
75335: PUSH
75336: LD_INT 29
75338: PUSH
75339: LD_INT 30
75341: PUSH
75342: LD_INT 31
75344: PUSH
75345: LD_INT 32
75347: PUSH
75348: LD_INT 33
75350: PUSH
75351: LD_INT 34
75353: PUSH
75354: LD_INT 36
75356: PUSH
75357: EMPTY
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: LIST
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: LIST
75375: LIST
75376: LIST
75377: LIST
75378: LIST
75379: LIST
75380: LIST
75381: LIST
75382: LIST
75383: LIST
75384: LIST
75385: LIST
75386: LIST
75387: LIST
75388: LIST
75389: LIST
75390: LIST
75391: LIST
75392: LIST
75393: PUSH
75394: LD_INT 101
75396: PUSH
75397: LD_INT 102
75399: PUSH
75400: LD_INT 103
75402: PUSH
75403: LD_INT 104
75405: PUSH
75406: LD_INT 105
75408: PUSH
75409: LD_INT 106
75411: PUSH
75412: LD_INT 107
75414: PUSH
75415: LD_INT 108
75417: PUSH
75418: LD_INT 109
75420: PUSH
75421: LD_INT 110
75423: PUSH
75424: LD_INT 111
75426: PUSH
75427: LD_INT 112
75429: PUSH
75430: LD_INT 113
75432: PUSH
75433: LD_INT 114
75435: PUSH
75436: LD_INT 116
75438: PUSH
75439: LD_INT 117
75441: PUSH
75442: LD_INT 118
75444: PUSH
75445: EMPTY
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: LIST
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: LIST
75457: LIST
75458: LIST
75459: LIST
75460: LIST
75461: LIST
75462: LIST
75463: PUSH
75464: EMPTY
75465: LIST
75466: LIST
75467: ST_TO_ADDR
75468: GO 75867
75470: LD_INT 18
75472: DOUBLE
75473: EQUAL
75474: IFTRUE 75478
75476: GO 75626
75478: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
75479: LD_ADDR_VAR 0 2
75483: PUSH
75484: LD_INT 2
75486: PUSH
75487: LD_INT 4
75489: PUSH
75490: LD_INT 5
75492: PUSH
75493: LD_INT 7
75495: PUSH
75496: LD_INT 11
75498: PUSH
75499: LD_INT 12
75501: PUSH
75502: LD_INT 15
75504: PUSH
75505: LD_INT 16
75507: PUSH
75508: LD_INT 20
75510: PUSH
75511: LD_INT 21
75513: PUSH
75514: LD_INT 22
75516: PUSH
75517: LD_INT 23
75519: PUSH
75520: LD_INT 25
75522: PUSH
75523: LD_INT 26
75525: PUSH
75526: LD_INT 30
75528: PUSH
75529: LD_INT 31
75531: PUSH
75532: LD_INT 32
75534: PUSH
75535: LD_INT 33
75537: PUSH
75538: LD_INT 34
75540: PUSH
75541: LD_INT 35
75543: PUSH
75544: LD_INT 36
75546: PUSH
75547: EMPTY
75548: LIST
75549: LIST
75550: LIST
75551: LIST
75552: LIST
75553: LIST
75554: LIST
75555: LIST
75556: LIST
75557: LIST
75558: LIST
75559: LIST
75560: LIST
75561: LIST
75562: LIST
75563: LIST
75564: LIST
75565: LIST
75566: LIST
75567: LIST
75568: LIST
75569: PUSH
75570: LD_INT 101
75572: PUSH
75573: LD_INT 102
75575: PUSH
75576: LD_INT 103
75578: PUSH
75579: LD_INT 106
75581: PUSH
75582: LD_INT 108
75584: PUSH
75585: LD_INT 112
75587: PUSH
75588: LD_INT 113
75590: PUSH
75591: LD_INT 114
75593: PUSH
75594: LD_INT 115
75596: PUSH
75597: LD_INT 116
75599: PUSH
75600: LD_INT 117
75602: PUSH
75603: LD_INT 118
75605: PUSH
75606: EMPTY
75607: LIST
75608: LIST
75609: LIST
75610: LIST
75611: LIST
75612: LIST
75613: LIST
75614: LIST
75615: LIST
75616: LIST
75617: LIST
75618: LIST
75619: PUSH
75620: EMPTY
75621: LIST
75622: LIST
75623: ST_TO_ADDR
75624: GO 75867
75626: LD_INT 19
75628: DOUBLE
75629: EQUAL
75630: IFTRUE 75634
75632: GO 75866
75634: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
75635: LD_ADDR_VAR 0 2
75639: PUSH
75640: LD_INT 1
75642: PUSH
75643: LD_INT 2
75645: PUSH
75646: LD_INT 3
75648: PUSH
75649: LD_INT 4
75651: PUSH
75652: LD_INT 5
75654: PUSH
75655: LD_INT 6
75657: PUSH
75658: LD_INT 7
75660: PUSH
75661: LD_INT 8
75663: PUSH
75664: LD_INT 9
75666: PUSH
75667: LD_INT 10
75669: PUSH
75670: LD_INT 11
75672: PUSH
75673: LD_INT 12
75675: PUSH
75676: LD_INT 13
75678: PUSH
75679: LD_INT 14
75681: PUSH
75682: LD_INT 15
75684: PUSH
75685: LD_INT 16
75687: PUSH
75688: LD_INT 17
75690: PUSH
75691: LD_INT 18
75693: PUSH
75694: LD_INT 19
75696: PUSH
75697: LD_INT 20
75699: PUSH
75700: LD_INT 21
75702: PUSH
75703: LD_INT 22
75705: PUSH
75706: LD_INT 23
75708: PUSH
75709: LD_INT 24
75711: PUSH
75712: LD_INT 25
75714: PUSH
75715: LD_INT 26
75717: PUSH
75718: LD_INT 27
75720: PUSH
75721: LD_INT 28
75723: PUSH
75724: LD_INT 29
75726: PUSH
75727: LD_INT 30
75729: PUSH
75730: LD_INT 31
75732: PUSH
75733: LD_INT 32
75735: PUSH
75736: LD_INT 33
75738: PUSH
75739: LD_INT 34
75741: PUSH
75742: LD_INT 35
75744: PUSH
75745: LD_INT 36
75747: PUSH
75748: EMPTY
75749: LIST
75750: LIST
75751: LIST
75752: LIST
75753: LIST
75754: LIST
75755: LIST
75756: LIST
75757: LIST
75758: LIST
75759: LIST
75760: LIST
75761: LIST
75762: LIST
75763: LIST
75764: LIST
75765: LIST
75766: LIST
75767: LIST
75768: LIST
75769: LIST
75770: LIST
75771: LIST
75772: LIST
75773: LIST
75774: LIST
75775: LIST
75776: LIST
75777: LIST
75778: LIST
75779: LIST
75780: LIST
75781: LIST
75782: LIST
75783: LIST
75784: LIST
75785: PUSH
75786: LD_INT 101
75788: PUSH
75789: LD_INT 102
75791: PUSH
75792: LD_INT 103
75794: PUSH
75795: LD_INT 104
75797: PUSH
75798: LD_INT 105
75800: PUSH
75801: LD_INT 106
75803: PUSH
75804: LD_INT 107
75806: PUSH
75807: LD_INT 108
75809: PUSH
75810: LD_INT 109
75812: PUSH
75813: LD_INT 110
75815: PUSH
75816: LD_INT 111
75818: PUSH
75819: LD_INT 112
75821: PUSH
75822: LD_INT 113
75824: PUSH
75825: LD_INT 114
75827: PUSH
75828: LD_INT 115
75830: PUSH
75831: LD_INT 116
75833: PUSH
75834: LD_INT 117
75836: PUSH
75837: LD_INT 118
75839: PUSH
75840: EMPTY
75841: LIST
75842: LIST
75843: LIST
75844: LIST
75845: LIST
75846: LIST
75847: LIST
75848: LIST
75849: LIST
75850: LIST
75851: LIST
75852: LIST
75853: LIST
75854: LIST
75855: LIST
75856: LIST
75857: LIST
75858: LIST
75859: PUSH
75860: EMPTY
75861: LIST
75862: LIST
75863: ST_TO_ADDR
75864: GO 75867
75866: POP
// end else
75867: GO 76098
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
75869: LD_ADDR_VAR 0 2
75873: PUSH
75874: LD_INT 1
75876: PUSH
75877: LD_INT 2
75879: PUSH
75880: LD_INT 3
75882: PUSH
75883: LD_INT 4
75885: PUSH
75886: LD_INT 5
75888: PUSH
75889: LD_INT 6
75891: PUSH
75892: LD_INT 7
75894: PUSH
75895: LD_INT 8
75897: PUSH
75898: LD_INT 9
75900: PUSH
75901: LD_INT 10
75903: PUSH
75904: LD_INT 11
75906: PUSH
75907: LD_INT 12
75909: PUSH
75910: LD_INT 13
75912: PUSH
75913: LD_INT 14
75915: PUSH
75916: LD_INT 15
75918: PUSH
75919: LD_INT 16
75921: PUSH
75922: LD_INT 17
75924: PUSH
75925: LD_INT 18
75927: PUSH
75928: LD_INT 19
75930: PUSH
75931: LD_INT 20
75933: PUSH
75934: LD_INT 21
75936: PUSH
75937: LD_INT 22
75939: PUSH
75940: LD_INT 23
75942: PUSH
75943: LD_INT 24
75945: PUSH
75946: LD_INT 25
75948: PUSH
75949: LD_INT 26
75951: PUSH
75952: LD_INT 27
75954: PUSH
75955: LD_INT 28
75957: PUSH
75958: LD_INT 29
75960: PUSH
75961: LD_INT 30
75963: PUSH
75964: LD_INT 31
75966: PUSH
75967: LD_INT 32
75969: PUSH
75970: LD_INT 33
75972: PUSH
75973: LD_INT 34
75975: PUSH
75976: LD_INT 35
75978: PUSH
75979: LD_INT 36
75981: PUSH
75982: EMPTY
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: LIST
75991: LIST
75992: LIST
75993: LIST
75994: LIST
75995: LIST
75996: LIST
75997: LIST
75998: LIST
75999: LIST
76000: LIST
76001: LIST
76002: LIST
76003: LIST
76004: LIST
76005: LIST
76006: LIST
76007: LIST
76008: LIST
76009: LIST
76010: LIST
76011: LIST
76012: LIST
76013: LIST
76014: LIST
76015: LIST
76016: LIST
76017: LIST
76018: LIST
76019: PUSH
76020: LD_INT 101
76022: PUSH
76023: LD_INT 102
76025: PUSH
76026: LD_INT 103
76028: PUSH
76029: LD_INT 104
76031: PUSH
76032: LD_INT 105
76034: PUSH
76035: LD_INT 106
76037: PUSH
76038: LD_INT 107
76040: PUSH
76041: LD_INT 108
76043: PUSH
76044: LD_INT 109
76046: PUSH
76047: LD_INT 110
76049: PUSH
76050: LD_INT 111
76052: PUSH
76053: LD_INT 112
76055: PUSH
76056: LD_INT 113
76058: PUSH
76059: LD_INT 114
76061: PUSH
76062: LD_INT 115
76064: PUSH
76065: LD_INT 116
76067: PUSH
76068: LD_INT 117
76070: PUSH
76071: LD_INT 118
76073: PUSH
76074: EMPTY
76075: LIST
76076: LIST
76077: LIST
76078: LIST
76079: LIST
76080: LIST
76081: LIST
76082: LIST
76083: LIST
76084: LIST
76085: LIST
76086: LIST
76087: LIST
76088: LIST
76089: LIST
76090: LIST
76091: LIST
76092: LIST
76093: PUSH
76094: EMPTY
76095: LIST
76096: LIST
76097: ST_TO_ADDR
// if result then
76098: LD_VAR 0 2
76102: IFFALSE 76888
// begin normal :=  ;
76104: LD_ADDR_VAR 0 5
76108: PUSH
76109: LD_STRING 
76111: ST_TO_ADDR
// hardcore :=  ;
76112: LD_ADDR_VAR 0 6
76116: PUSH
76117: LD_STRING 
76119: ST_TO_ADDR
// active :=  ;
76120: LD_ADDR_VAR 0 7
76124: PUSH
76125: LD_STRING 
76127: ST_TO_ADDR
// for i = 1 to normalCounter do
76128: LD_ADDR_VAR 0 8
76132: PUSH
76133: DOUBLE
76134: LD_INT 1
76136: DEC
76137: ST_TO_ADDR
76138: LD_EXP 65
76142: PUSH
76143: FOR_TO
76144: IFFALSE 76245
// begin tmp := 0 ;
76146: LD_ADDR_VAR 0 3
76150: PUSH
76151: LD_STRING 0
76153: ST_TO_ADDR
// if result [ 1 ] then
76154: LD_VAR 0 2
76158: PUSH
76159: LD_INT 1
76161: ARRAY
76162: IFFALSE 76227
// if result [ 1 ] [ 1 ] = i then
76164: LD_VAR 0 2
76168: PUSH
76169: LD_INT 1
76171: ARRAY
76172: PUSH
76173: LD_INT 1
76175: ARRAY
76176: PUSH
76177: LD_VAR 0 8
76181: EQUAL
76182: IFFALSE 76227
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
76184: LD_ADDR_VAR 0 2
76188: PUSH
76189: LD_VAR 0 2
76193: PPUSH
76194: LD_INT 1
76196: PPUSH
76197: LD_VAR 0 2
76201: PUSH
76202: LD_INT 1
76204: ARRAY
76205: PPUSH
76206: LD_INT 1
76208: PPUSH
76209: CALL_OW 3
76213: PPUSH
76214: CALL_OW 1
76218: ST_TO_ADDR
// tmp := 1 ;
76219: LD_ADDR_VAR 0 3
76223: PUSH
76224: LD_STRING 1
76226: ST_TO_ADDR
// end ; normal := normal & tmp ;
76227: LD_ADDR_VAR 0 5
76231: PUSH
76232: LD_VAR 0 5
76236: PUSH
76237: LD_VAR 0 3
76241: STR
76242: ST_TO_ADDR
// end ;
76243: GO 76143
76245: POP
76246: POP
// for i = 1 to hardcoreCounter do
76247: LD_ADDR_VAR 0 8
76251: PUSH
76252: DOUBLE
76253: LD_INT 1
76255: DEC
76256: ST_TO_ADDR
76257: LD_EXP 66
76261: PUSH
76262: FOR_TO
76263: IFFALSE 76368
// begin tmp := 0 ;
76265: LD_ADDR_VAR 0 3
76269: PUSH
76270: LD_STRING 0
76272: ST_TO_ADDR
// if result [ 2 ] then
76273: LD_VAR 0 2
76277: PUSH
76278: LD_INT 2
76280: ARRAY
76281: IFFALSE 76350
// if result [ 2 ] [ 1 ] = 100 + i then
76283: LD_VAR 0 2
76287: PUSH
76288: LD_INT 2
76290: ARRAY
76291: PUSH
76292: LD_INT 1
76294: ARRAY
76295: PUSH
76296: LD_INT 100
76298: PUSH
76299: LD_VAR 0 8
76303: PLUS
76304: EQUAL
76305: IFFALSE 76350
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
76307: LD_ADDR_VAR 0 2
76311: PUSH
76312: LD_VAR 0 2
76316: PPUSH
76317: LD_INT 2
76319: PPUSH
76320: LD_VAR 0 2
76324: PUSH
76325: LD_INT 2
76327: ARRAY
76328: PPUSH
76329: LD_INT 1
76331: PPUSH
76332: CALL_OW 3
76336: PPUSH
76337: CALL_OW 1
76341: ST_TO_ADDR
// tmp := 1 ;
76342: LD_ADDR_VAR 0 3
76346: PUSH
76347: LD_STRING 1
76349: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
76350: LD_ADDR_VAR 0 6
76354: PUSH
76355: LD_VAR 0 6
76359: PUSH
76360: LD_VAR 0 3
76364: STR
76365: ST_TO_ADDR
// end ;
76366: GO 76262
76368: POP
76369: POP
// if isGameLoad then
76370: LD_VAR 0 1
76374: IFFALSE 76849
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
76376: LD_ADDR_VAR 0 4
76380: PUSH
76381: LD_EXP 69
76385: PUSH
76386: LD_EXP 68
76390: PUSH
76391: LD_EXP 70
76395: PUSH
76396: LD_EXP 67
76400: PUSH
76401: LD_EXP 71
76405: PUSH
76406: LD_EXP 72
76410: PUSH
76411: LD_EXP 73
76415: PUSH
76416: LD_EXP 74
76420: PUSH
76421: LD_EXP 75
76425: PUSH
76426: LD_EXP 76
76430: PUSH
76431: LD_EXP 77
76435: PUSH
76436: LD_EXP 78
76440: PUSH
76441: LD_EXP 79
76445: PUSH
76446: LD_EXP 80
76450: PUSH
76451: LD_EXP 88
76455: PUSH
76456: LD_EXP 89
76460: PUSH
76461: LD_EXP 90
76465: PUSH
76466: LD_EXP 91
76470: PUSH
76471: LD_EXP 93
76475: PUSH
76476: LD_EXP 94
76480: PUSH
76481: LD_EXP 95
76485: PUSH
76486: LD_EXP 98
76490: PUSH
76491: LD_EXP 100
76495: PUSH
76496: LD_EXP 101
76500: PUSH
76501: LD_EXP 102
76505: PUSH
76506: LD_EXP 104
76510: PUSH
76511: LD_EXP 105
76515: PUSH
76516: LD_EXP 108
76520: PUSH
76521: LD_EXP 109
76525: PUSH
76526: LD_EXP 110
76530: PUSH
76531: LD_EXP 111
76535: PUSH
76536: LD_EXP 112
76540: PUSH
76541: LD_EXP 113
76545: PUSH
76546: LD_EXP 114
76550: PUSH
76551: LD_EXP 115
76555: PUSH
76556: LD_EXP 116
76560: PUSH
76561: LD_EXP 81
76565: PUSH
76566: LD_EXP 82
76570: PUSH
76571: LD_EXP 85
76575: PUSH
76576: LD_EXP 86
76580: PUSH
76581: LD_EXP 87
76585: PUSH
76586: LD_EXP 83
76590: PUSH
76591: LD_EXP 84
76595: PUSH
76596: LD_EXP 92
76600: PUSH
76601: LD_EXP 96
76605: PUSH
76606: LD_EXP 97
76610: PUSH
76611: LD_EXP 99
76615: PUSH
76616: LD_EXP 103
76620: PUSH
76621: LD_EXP 106
76625: PUSH
76626: LD_EXP 107
76630: PUSH
76631: LD_EXP 117
76635: PUSH
76636: LD_EXP 118
76640: PUSH
76641: LD_EXP 119
76645: PUSH
76646: LD_EXP 120
76650: PUSH
76651: EMPTY
76652: LIST
76653: LIST
76654: LIST
76655: LIST
76656: LIST
76657: LIST
76658: LIST
76659: LIST
76660: LIST
76661: LIST
76662: LIST
76663: LIST
76664: LIST
76665: LIST
76666: LIST
76667: LIST
76668: LIST
76669: LIST
76670: LIST
76671: LIST
76672: LIST
76673: LIST
76674: LIST
76675: LIST
76676: LIST
76677: LIST
76678: LIST
76679: LIST
76680: LIST
76681: LIST
76682: LIST
76683: LIST
76684: LIST
76685: LIST
76686: LIST
76687: LIST
76688: LIST
76689: LIST
76690: LIST
76691: LIST
76692: LIST
76693: LIST
76694: LIST
76695: LIST
76696: LIST
76697: LIST
76698: LIST
76699: LIST
76700: LIST
76701: LIST
76702: LIST
76703: LIST
76704: LIST
76705: LIST
76706: ST_TO_ADDR
// tmp :=  ;
76707: LD_ADDR_VAR 0 3
76711: PUSH
76712: LD_STRING 
76714: ST_TO_ADDR
// for i = 1 to normalCounter do
76715: LD_ADDR_VAR 0 8
76719: PUSH
76720: DOUBLE
76721: LD_INT 1
76723: DEC
76724: ST_TO_ADDR
76725: LD_EXP 65
76729: PUSH
76730: FOR_TO
76731: IFFALSE 76767
// begin if flags [ i ] then
76733: LD_VAR 0 4
76737: PUSH
76738: LD_VAR 0 8
76742: ARRAY
76743: IFFALSE 76765
// tmp := tmp & i & ; ;
76745: LD_ADDR_VAR 0 3
76749: PUSH
76750: LD_VAR 0 3
76754: PUSH
76755: LD_VAR 0 8
76759: STR
76760: PUSH
76761: LD_STRING ;
76763: STR
76764: ST_TO_ADDR
// end ;
76765: GO 76730
76767: POP
76768: POP
// for i = 1 to hardcoreCounter do
76769: LD_ADDR_VAR 0 8
76773: PUSH
76774: DOUBLE
76775: LD_INT 1
76777: DEC
76778: ST_TO_ADDR
76779: LD_EXP 66
76783: PUSH
76784: FOR_TO
76785: IFFALSE 76831
// begin if flags [ normalCounter + i ] then
76787: LD_VAR 0 4
76791: PUSH
76792: LD_EXP 65
76796: PUSH
76797: LD_VAR 0 8
76801: PLUS
76802: ARRAY
76803: IFFALSE 76829
// tmp := tmp & ( 100 + i ) & ; ;
76805: LD_ADDR_VAR 0 3
76809: PUSH
76810: LD_VAR 0 3
76814: PUSH
76815: LD_INT 100
76817: PUSH
76818: LD_VAR 0 8
76822: PLUS
76823: STR
76824: PUSH
76825: LD_STRING ;
76827: STR
76828: ST_TO_ADDR
// end ;
76829: GO 76784
76831: POP
76832: POP
// if tmp then
76833: LD_VAR 0 3
76837: IFFALSE 76849
// active := tmp ;
76839: LD_ADDR_VAR 0 7
76843: PUSH
76844: LD_VAR 0 3
76848: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
76849: LD_STRING getStreamItemsFromMission("
76851: PUSH
76852: LD_VAR 0 5
76856: STR
76857: PUSH
76858: LD_STRING ","
76860: STR
76861: PUSH
76862: LD_VAR 0 6
76866: STR
76867: PUSH
76868: LD_STRING ","
76870: STR
76871: PUSH
76872: LD_VAR 0 7
76876: STR
76877: PUSH
76878: LD_STRING ")
76880: STR
76881: PPUSH
76882: CALL_OW 559
// end else
76886: GO 76895
// ToLua ( getStreamItemsFromMission("","","") ) ;
76888: LD_STRING getStreamItemsFromMission("","","")
76890: PPUSH
76891: CALL_OW 559
// end ;
76895: LD_VAR 0 2
76899: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
76900: LD_EXP 64
76904: PUSH
76905: LD_EXP 69
76909: AND
76910: IFFALSE 77034
76912: GO 76914
76914: DISABLE
76915: LD_INT 0
76917: PPUSH
76918: PPUSH
// begin enable ;
76919: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
76920: LD_ADDR_VAR 0 2
76924: PUSH
76925: LD_INT 22
76927: PUSH
76928: LD_OWVAR 2
76932: PUSH
76933: EMPTY
76934: LIST
76935: LIST
76936: PUSH
76937: LD_INT 2
76939: PUSH
76940: LD_INT 34
76942: PUSH
76943: LD_INT 7
76945: PUSH
76946: EMPTY
76947: LIST
76948: LIST
76949: PUSH
76950: LD_INT 34
76952: PUSH
76953: LD_INT 45
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: PUSH
76960: LD_INT 34
76962: PUSH
76963: LD_INT 28
76965: PUSH
76966: EMPTY
76967: LIST
76968: LIST
76969: PUSH
76970: LD_INT 34
76972: PUSH
76973: LD_INT 47
76975: PUSH
76976: EMPTY
76977: LIST
76978: LIST
76979: PUSH
76980: EMPTY
76981: LIST
76982: LIST
76983: LIST
76984: LIST
76985: LIST
76986: PUSH
76987: EMPTY
76988: LIST
76989: LIST
76990: PPUSH
76991: CALL_OW 69
76995: ST_TO_ADDR
// if not tmp then
76996: LD_VAR 0 2
77000: NOT
77001: IFFALSE 77005
// exit ;
77003: GO 77034
// for i in tmp do
77005: LD_ADDR_VAR 0 1
77009: PUSH
77010: LD_VAR 0 2
77014: PUSH
77015: FOR_IN
77016: IFFALSE 77032
// begin SetLives ( i , 0 ) ;
77018: LD_VAR 0 1
77022: PPUSH
77023: LD_INT 0
77025: PPUSH
77026: CALL_OW 234
// end ;
77030: GO 77015
77032: POP
77033: POP
// end ;
77034: PPOPN 2
77036: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
77037: LD_EXP 64
77041: PUSH
77042: LD_EXP 70
77046: AND
77047: IFFALSE 77131
77049: GO 77051
77051: DISABLE
77052: LD_INT 0
77054: PPUSH
77055: PPUSH
// begin enable ;
77056: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
77057: LD_ADDR_VAR 0 2
77061: PUSH
77062: LD_INT 22
77064: PUSH
77065: LD_OWVAR 2
77069: PUSH
77070: EMPTY
77071: LIST
77072: LIST
77073: PUSH
77074: LD_INT 32
77076: PUSH
77077: LD_INT 3
77079: PUSH
77080: EMPTY
77081: LIST
77082: LIST
77083: PUSH
77084: EMPTY
77085: LIST
77086: LIST
77087: PPUSH
77088: CALL_OW 69
77092: ST_TO_ADDR
// if not tmp then
77093: LD_VAR 0 2
77097: NOT
77098: IFFALSE 77102
// exit ;
77100: GO 77131
// for i in tmp do
77102: LD_ADDR_VAR 0 1
77106: PUSH
77107: LD_VAR 0 2
77111: PUSH
77112: FOR_IN
77113: IFFALSE 77129
// begin SetLives ( i , 0 ) ;
77115: LD_VAR 0 1
77119: PPUSH
77120: LD_INT 0
77122: PPUSH
77123: CALL_OW 234
// end ;
77127: GO 77112
77129: POP
77130: POP
// end ;
77131: PPOPN 2
77133: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
77134: LD_EXP 64
77138: PUSH
77139: LD_EXP 67
77143: AND
77144: IFFALSE 77237
77146: GO 77148
77148: DISABLE
77149: LD_INT 0
77151: PPUSH
// begin enable ;
77152: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
77153: LD_ADDR_VAR 0 1
77157: PUSH
77158: LD_INT 22
77160: PUSH
77161: LD_OWVAR 2
77165: PUSH
77166: EMPTY
77167: LIST
77168: LIST
77169: PUSH
77170: LD_INT 2
77172: PUSH
77173: LD_INT 25
77175: PUSH
77176: LD_INT 5
77178: PUSH
77179: EMPTY
77180: LIST
77181: LIST
77182: PUSH
77183: LD_INT 25
77185: PUSH
77186: LD_INT 9
77188: PUSH
77189: EMPTY
77190: LIST
77191: LIST
77192: PUSH
77193: LD_INT 25
77195: PUSH
77196: LD_INT 8
77198: PUSH
77199: EMPTY
77200: LIST
77201: LIST
77202: PUSH
77203: EMPTY
77204: LIST
77205: LIST
77206: LIST
77207: LIST
77208: PUSH
77209: EMPTY
77210: LIST
77211: LIST
77212: PPUSH
77213: CALL_OW 69
77217: PUSH
77218: FOR_IN
77219: IFFALSE 77235
// begin SetClass ( i , 1 ) ;
77221: LD_VAR 0 1
77225: PPUSH
77226: LD_INT 1
77228: PPUSH
77229: CALL_OW 336
// end ;
77233: GO 77218
77235: POP
77236: POP
// end ;
77237: PPOPN 1
77239: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
77240: LD_EXP 64
77244: PUSH
77245: LD_EXP 68
77249: AND
77250: PUSH
77251: LD_OWVAR 65
77255: PUSH
77256: LD_INT 7
77258: LESS
77259: AND
77260: IFFALSE 77274
77262: GO 77264
77264: DISABLE
// begin enable ;
77265: ENABLE
// game_speed := 7 ;
77266: LD_ADDR_OWVAR 65
77270: PUSH
77271: LD_INT 7
77273: ST_TO_ADDR
// end ;
77274: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
77275: LD_EXP 64
77279: PUSH
77280: LD_EXP 71
77284: AND
77285: IFFALSE 77487
77287: GO 77289
77289: DISABLE
77290: LD_INT 0
77292: PPUSH
77293: PPUSH
77294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
77295: LD_ADDR_VAR 0 3
77299: PUSH
77300: LD_INT 81
77302: PUSH
77303: LD_OWVAR 2
77307: PUSH
77308: EMPTY
77309: LIST
77310: LIST
77311: PUSH
77312: LD_INT 21
77314: PUSH
77315: LD_INT 1
77317: PUSH
77318: EMPTY
77319: LIST
77320: LIST
77321: PUSH
77322: EMPTY
77323: LIST
77324: LIST
77325: PPUSH
77326: CALL_OW 69
77330: ST_TO_ADDR
// if not tmp then
77331: LD_VAR 0 3
77335: NOT
77336: IFFALSE 77340
// exit ;
77338: GO 77487
// if tmp > 5 then
77340: LD_VAR 0 3
77344: PUSH
77345: LD_INT 5
77347: GREATER
77348: IFFALSE 77360
// k := 5 else
77350: LD_ADDR_VAR 0 2
77354: PUSH
77355: LD_INT 5
77357: ST_TO_ADDR
77358: GO 77370
// k := tmp ;
77360: LD_ADDR_VAR 0 2
77364: PUSH
77365: LD_VAR 0 3
77369: ST_TO_ADDR
// for i := 1 to k do
77370: LD_ADDR_VAR 0 1
77374: PUSH
77375: DOUBLE
77376: LD_INT 1
77378: DEC
77379: ST_TO_ADDR
77380: LD_VAR 0 2
77384: PUSH
77385: FOR_TO
77386: IFFALSE 77485
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
77388: LD_VAR 0 3
77392: PUSH
77393: LD_VAR 0 1
77397: ARRAY
77398: PPUSH
77399: LD_VAR 0 1
77403: PUSH
77404: LD_INT 4
77406: MOD
77407: PUSH
77408: LD_INT 1
77410: PLUS
77411: PPUSH
77412: CALL_OW 259
77416: PUSH
77417: LD_INT 10
77419: LESS
77420: IFFALSE 77483
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
77422: LD_VAR 0 3
77426: PUSH
77427: LD_VAR 0 1
77431: ARRAY
77432: PPUSH
77433: LD_VAR 0 1
77437: PUSH
77438: LD_INT 4
77440: MOD
77441: PUSH
77442: LD_INT 1
77444: PLUS
77445: PPUSH
77446: LD_VAR 0 3
77450: PUSH
77451: LD_VAR 0 1
77455: ARRAY
77456: PPUSH
77457: LD_VAR 0 1
77461: PUSH
77462: LD_INT 4
77464: MOD
77465: PUSH
77466: LD_INT 1
77468: PLUS
77469: PPUSH
77470: CALL_OW 259
77474: PUSH
77475: LD_INT 1
77477: PLUS
77478: PPUSH
77479: CALL_OW 237
77483: GO 77385
77485: POP
77486: POP
// end ;
77487: PPOPN 3
77489: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
77490: LD_EXP 64
77494: PUSH
77495: LD_EXP 72
77499: AND
77500: IFFALSE 77520
77502: GO 77504
77504: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
77505: LD_INT 4
77507: PPUSH
77508: LD_OWVAR 2
77512: PPUSH
77513: LD_INT 0
77515: PPUSH
77516: CALL_OW 324
77520: END
// every 0 0$1 trigger StreamModeActive and sShovel do
77521: LD_EXP 64
77525: PUSH
77526: LD_EXP 101
77530: AND
77531: IFFALSE 77551
77533: GO 77535
77535: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
77536: LD_INT 19
77538: PPUSH
77539: LD_OWVAR 2
77543: PPUSH
77544: LD_INT 0
77546: PPUSH
77547: CALL_OW 324
77551: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
77552: LD_EXP 64
77556: PUSH
77557: LD_EXP 73
77561: AND
77562: IFFALSE 77664
77564: GO 77566
77566: DISABLE
77567: LD_INT 0
77569: PPUSH
77570: PPUSH
// begin enable ;
77571: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
77572: LD_ADDR_VAR 0 2
77576: PUSH
77577: LD_INT 22
77579: PUSH
77580: LD_OWVAR 2
77584: PUSH
77585: EMPTY
77586: LIST
77587: LIST
77588: PUSH
77589: LD_INT 2
77591: PUSH
77592: LD_INT 34
77594: PUSH
77595: LD_INT 11
77597: PUSH
77598: EMPTY
77599: LIST
77600: LIST
77601: PUSH
77602: LD_INT 34
77604: PUSH
77605: LD_INT 30
77607: PUSH
77608: EMPTY
77609: LIST
77610: LIST
77611: PUSH
77612: EMPTY
77613: LIST
77614: LIST
77615: LIST
77616: PUSH
77617: EMPTY
77618: LIST
77619: LIST
77620: PPUSH
77621: CALL_OW 69
77625: ST_TO_ADDR
// if not tmp then
77626: LD_VAR 0 2
77630: NOT
77631: IFFALSE 77635
// exit ;
77633: GO 77664
// for i in tmp do
77635: LD_ADDR_VAR 0 1
77639: PUSH
77640: LD_VAR 0 2
77644: PUSH
77645: FOR_IN
77646: IFFALSE 77662
// begin SetLives ( i , 0 ) ;
77648: LD_VAR 0 1
77652: PPUSH
77653: LD_INT 0
77655: PPUSH
77656: CALL_OW 234
// end ;
77660: GO 77645
77662: POP
77663: POP
// end ;
77664: PPOPN 2
77666: END
// every 0 0$1 trigger StreamModeActive and sBunker do
77667: LD_EXP 64
77671: PUSH
77672: LD_EXP 74
77676: AND
77677: IFFALSE 77697
77679: GO 77681
77681: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
77682: LD_INT 32
77684: PPUSH
77685: LD_OWVAR 2
77689: PPUSH
77690: LD_INT 0
77692: PPUSH
77693: CALL_OW 324
77697: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
77698: LD_EXP 64
77702: PUSH
77703: LD_EXP 75
77707: AND
77708: IFFALSE 77889
77710: GO 77712
77712: DISABLE
77713: LD_INT 0
77715: PPUSH
77716: PPUSH
77717: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
77718: LD_ADDR_VAR 0 2
77722: PUSH
77723: LD_INT 22
77725: PUSH
77726: LD_OWVAR 2
77730: PUSH
77731: EMPTY
77732: LIST
77733: LIST
77734: PUSH
77735: LD_INT 33
77737: PUSH
77738: LD_INT 3
77740: PUSH
77741: EMPTY
77742: LIST
77743: LIST
77744: PUSH
77745: EMPTY
77746: LIST
77747: LIST
77748: PPUSH
77749: CALL_OW 69
77753: ST_TO_ADDR
// if not tmp then
77754: LD_VAR 0 2
77758: NOT
77759: IFFALSE 77763
// exit ;
77761: GO 77889
// side := 0 ;
77763: LD_ADDR_VAR 0 3
77767: PUSH
77768: LD_INT 0
77770: ST_TO_ADDR
// for i := 1 to 8 do
77771: LD_ADDR_VAR 0 1
77775: PUSH
77776: DOUBLE
77777: LD_INT 1
77779: DEC
77780: ST_TO_ADDR
77781: LD_INT 8
77783: PUSH
77784: FOR_TO
77785: IFFALSE 77833
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
77787: LD_OWVAR 2
77791: PUSH
77792: LD_VAR 0 1
77796: NONEQUAL
77797: PUSH
77798: LD_OWVAR 2
77802: PPUSH
77803: LD_VAR 0 1
77807: PPUSH
77808: CALL_OW 81
77812: PUSH
77813: LD_INT 2
77815: EQUAL
77816: AND
77817: IFFALSE 77831
// begin side := i ;
77819: LD_ADDR_VAR 0 3
77823: PUSH
77824: LD_VAR 0 1
77828: ST_TO_ADDR
// break ;
77829: GO 77833
// end ;
77831: GO 77784
77833: POP
77834: POP
// if not side then
77835: LD_VAR 0 3
77839: NOT
77840: IFFALSE 77844
// exit ;
77842: GO 77889
// for i := 1 to tmp do
77844: LD_ADDR_VAR 0 1
77848: PUSH
77849: DOUBLE
77850: LD_INT 1
77852: DEC
77853: ST_TO_ADDR
77854: LD_VAR 0 2
77858: PUSH
77859: FOR_TO
77860: IFFALSE 77887
// if Prob ( 60 ) then
77862: LD_INT 60
77864: PPUSH
77865: CALL_OW 13
77869: IFFALSE 77885
// SetSide ( i , side ) ;
77871: LD_VAR 0 1
77875: PPUSH
77876: LD_VAR 0 3
77880: PPUSH
77881: CALL_OW 235
77885: GO 77859
77887: POP
77888: POP
// end ;
77889: PPOPN 3
77891: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
77892: LD_EXP 64
77896: PUSH
77897: LD_EXP 77
77901: AND
77902: IFFALSE 78021
77904: GO 77906
77906: DISABLE
77907: LD_INT 0
77909: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
77910: LD_ADDR_VAR 0 1
77914: PUSH
77915: LD_INT 22
77917: PUSH
77918: LD_OWVAR 2
77922: PUSH
77923: EMPTY
77924: LIST
77925: LIST
77926: PUSH
77927: LD_INT 21
77929: PUSH
77930: LD_INT 1
77932: PUSH
77933: EMPTY
77934: LIST
77935: LIST
77936: PUSH
77937: LD_INT 3
77939: PUSH
77940: LD_INT 23
77942: PUSH
77943: LD_INT 0
77945: PUSH
77946: EMPTY
77947: LIST
77948: LIST
77949: PUSH
77950: EMPTY
77951: LIST
77952: LIST
77953: PUSH
77954: EMPTY
77955: LIST
77956: LIST
77957: LIST
77958: PPUSH
77959: CALL_OW 69
77963: PUSH
77964: FOR_IN
77965: IFFALSE 78019
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
77967: LD_VAR 0 1
77971: PPUSH
77972: CALL_OW 257
77976: PUSH
77977: LD_INT 1
77979: PUSH
77980: LD_INT 2
77982: PUSH
77983: LD_INT 3
77985: PUSH
77986: LD_INT 4
77988: PUSH
77989: EMPTY
77990: LIST
77991: LIST
77992: LIST
77993: LIST
77994: IN
77995: IFFALSE 78017
// SetClass ( un , rand ( 1 , 4 ) ) ;
77997: LD_VAR 0 1
78001: PPUSH
78002: LD_INT 1
78004: PPUSH
78005: LD_INT 4
78007: PPUSH
78008: CALL_OW 12
78012: PPUSH
78013: CALL_OW 336
78017: GO 77964
78019: POP
78020: POP
// end ;
78021: PPOPN 1
78023: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
78024: LD_EXP 64
78028: PUSH
78029: LD_EXP 76
78033: AND
78034: IFFALSE 78113
78036: GO 78038
78038: DISABLE
78039: LD_INT 0
78041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78042: LD_ADDR_VAR 0 1
78046: PUSH
78047: LD_INT 22
78049: PUSH
78050: LD_OWVAR 2
78054: PUSH
78055: EMPTY
78056: LIST
78057: LIST
78058: PUSH
78059: LD_INT 21
78061: PUSH
78062: LD_INT 3
78064: PUSH
78065: EMPTY
78066: LIST
78067: LIST
78068: PUSH
78069: EMPTY
78070: LIST
78071: LIST
78072: PPUSH
78073: CALL_OW 69
78077: ST_TO_ADDR
// if not tmp then
78078: LD_VAR 0 1
78082: NOT
78083: IFFALSE 78087
// exit ;
78085: GO 78113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
78087: LD_VAR 0 1
78091: PUSH
78092: LD_INT 1
78094: PPUSH
78095: LD_VAR 0 1
78099: PPUSH
78100: CALL_OW 12
78104: ARRAY
78105: PPUSH
78106: LD_INT 100
78108: PPUSH
78109: CALL_OW 234
// end ;
78113: PPOPN 1
78115: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
78116: LD_EXP 64
78120: PUSH
78121: LD_EXP 78
78125: AND
78126: IFFALSE 78224
78128: GO 78130
78130: DISABLE
78131: LD_INT 0
78133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
78134: LD_ADDR_VAR 0 1
78138: PUSH
78139: LD_INT 22
78141: PUSH
78142: LD_OWVAR 2
78146: PUSH
78147: EMPTY
78148: LIST
78149: LIST
78150: PUSH
78151: LD_INT 21
78153: PUSH
78154: LD_INT 1
78156: PUSH
78157: EMPTY
78158: LIST
78159: LIST
78160: PUSH
78161: EMPTY
78162: LIST
78163: LIST
78164: PPUSH
78165: CALL_OW 69
78169: ST_TO_ADDR
// if not tmp then
78170: LD_VAR 0 1
78174: NOT
78175: IFFALSE 78179
// exit ;
78177: GO 78224
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
78179: LD_VAR 0 1
78183: PUSH
78184: LD_INT 1
78186: PPUSH
78187: LD_VAR 0 1
78191: PPUSH
78192: CALL_OW 12
78196: ARRAY
78197: PPUSH
78198: LD_INT 1
78200: PPUSH
78201: LD_INT 4
78203: PPUSH
78204: CALL_OW 12
78208: PPUSH
78209: LD_INT 3000
78211: PPUSH
78212: LD_INT 9000
78214: PPUSH
78215: CALL_OW 12
78219: PPUSH
78220: CALL_OW 492
// end ;
78224: PPOPN 1
78226: END
// every 0 0$1 trigger StreamModeActive and sDepot do
78227: LD_EXP 64
78231: PUSH
78232: LD_EXP 79
78236: AND
78237: IFFALSE 78257
78239: GO 78241
78241: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
78242: LD_INT 1
78244: PPUSH
78245: LD_OWVAR 2
78249: PPUSH
78250: LD_INT 0
78252: PPUSH
78253: CALL_OW 324
78257: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
78258: LD_EXP 64
78262: PUSH
78263: LD_EXP 80
78267: AND
78268: IFFALSE 78351
78270: GO 78272
78272: DISABLE
78273: LD_INT 0
78275: PPUSH
78276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78277: LD_ADDR_VAR 0 2
78281: PUSH
78282: LD_INT 22
78284: PUSH
78285: LD_OWVAR 2
78289: PUSH
78290: EMPTY
78291: LIST
78292: LIST
78293: PUSH
78294: LD_INT 21
78296: PUSH
78297: LD_INT 3
78299: PUSH
78300: EMPTY
78301: LIST
78302: LIST
78303: PUSH
78304: EMPTY
78305: LIST
78306: LIST
78307: PPUSH
78308: CALL_OW 69
78312: ST_TO_ADDR
// if not tmp then
78313: LD_VAR 0 2
78317: NOT
78318: IFFALSE 78322
// exit ;
78320: GO 78351
// for i in tmp do
78322: LD_ADDR_VAR 0 1
78326: PUSH
78327: LD_VAR 0 2
78331: PUSH
78332: FOR_IN
78333: IFFALSE 78349
// SetBLevel ( i , 10 ) ;
78335: LD_VAR 0 1
78339: PPUSH
78340: LD_INT 10
78342: PPUSH
78343: CALL_OW 241
78347: GO 78332
78349: POP
78350: POP
// end ;
78351: PPOPN 2
78353: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
78354: LD_EXP 64
78358: PUSH
78359: LD_EXP 81
78363: AND
78364: IFFALSE 78475
78366: GO 78368
78368: DISABLE
78369: LD_INT 0
78371: PPUSH
78372: PPUSH
78373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78374: LD_ADDR_VAR 0 3
78378: PUSH
78379: LD_INT 22
78381: PUSH
78382: LD_OWVAR 2
78386: PUSH
78387: EMPTY
78388: LIST
78389: LIST
78390: PUSH
78391: LD_INT 25
78393: PUSH
78394: LD_INT 1
78396: PUSH
78397: EMPTY
78398: LIST
78399: LIST
78400: PUSH
78401: EMPTY
78402: LIST
78403: LIST
78404: PPUSH
78405: CALL_OW 69
78409: ST_TO_ADDR
// if not tmp then
78410: LD_VAR 0 3
78414: NOT
78415: IFFALSE 78419
// exit ;
78417: GO 78475
// un := tmp [ rand ( 1 , tmp ) ] ;
78419: LD_ADDR_VAR 0 2
78423: PUSH
78424: LD_VAR 0 3
78428: PUSH
78429: LD_INT 1
78431: PPUSH
78432: LD_VAR 0 3
78436: PPUSH
78437: CALL_OW 12
78441: ARRAY
78442: ST_TO_ADDR
// if Crawls ( un ) then
78443: LD_VAR 0 2
78447: PPUSH
78448: CALL_OW 318
78452: IFFALSE 78463
// ComWalk ( un ) ;
78454: LD_VAR 0 2
78458: PPUSH
78459: CALL_OW 138
// SetClass ( un , class_sniper ) ;
78463: LD_VAR 0 2
78467: PPUSH
78468: LD_INT 5
78470: PPUSH
78471: CALL_OW 336
// end ;
78475: PPOPN 3
78477: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
78478: LD_EXP 64
78482: PUSH
78483: LD_EXP 82
78487: AND
78488: PUSH
78489: LD_OWVAR 67
78493: PUSH
78494: LD_INT 4
78496: LESS
78497: AND
78498: IFFALSE 78517
78500: GO 78502
78502: DISABLE
// begin Difficulty := Difficulty + 1 ;
78503: LD_ADDR_OWVAR 67
78507: PUSH
78508: LD_OWVAR 67
78512: PUSH
78513: LD_INT 1
78515: PLUS
78516: ST_TO_ADDR
// end ;
78517: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
78518: LD_EXP 64
78522: PUSH
78523: LD_EXP 83
78527: AND
78528: IFFALSE 78631
78530: GO 78532
78532: DISABLE
78533: LD_INT 0
78535: PPUSH
// begin for i := 1 to 5 do
78536: LD_ADDR_VAR 0 1
78540: PUSH
78541: DOUBLE
78542: LD_INT 1
78544: DEC
78545: ST_TO_ADDR
78546: LD_INT 5
78548: PUSH
78549: FOR_TO
78550: IFFALSE 78629
// begin uc_nation := nation_nature ;
78552: LD_ADDR_OWVAR 21
78556: PUSH
78557: LD_INT 0
78559: ST_TO_ADDR
// uc_side := 0 ;
78560: LD_ADDR_OWVAR 20
78564: PUSH
78565: LD_INT 0
78567: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78568: LD_ADDR_OWVAR 29
78572: PUSH
78573: LD_INT 12
78575: PUSH
78576: LD_INT 12
78578: PUSH
78579: EMPTY
78580: LIST
78581: LIST
78582: ST_TO_ADDR
// hc_agressivity := 20 ;
78583: LD_ADDR_OWVAR 35
78587: PUSH
78588: LD_INT 20
78590: ST_TO_ADDR
// hc_class := class_tiger ;
78591: LD_ADDR_OWVAR 28
78595: PUSH
78596: LD_INT 14
78598: ST_TO_ADDR
// hc_gallery :=  ;
78599: LD_ADDR_OWVAR 33
78603: PUSH
78604: LD_STRING 
78606: ST_TO_ADDR
// hc_name :=  ;
78607: LD_ADDR_OWVAR 26
78611: PUSH
78612: LD_STRING 
78614: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
78615: CALL_OW 44
78619: PPUSH
78620: LD_INT 0
78622: PPUSH
78623: CALL_OW 51
// end ;
78627: GO 78549
78629: POP
78630: POP
// end ;
78631: PPOPN 1
78633: END
// every 0 0$1 trigger StreamModeActive and sBomb do
78634: LD_EXP 64
78638: PUSH
78639: LD_EXP 84
78643: AND
78644: IFFALSE 78653
78646: GO 78648
78648: DISABLE
// StreamSibBomb ;
78649: CALL 78654 0 0
78653: END
// export function StreamSibBomb ; var i , x , y ; begin
78654: LD_INT 0
78656: PPUSH
78657: PPUSH
78658: PPUSH
78659: PPUSH
// result := false ;
78660: LD_ADDR_VAR 0 1
78664: PUSH
78665: LD_INT 0
78667: ST_TO_ADDR
// for i := 1 to 16 do
78668: LD_ADDR_VAR 0 2
78672: PUSH
78673: DOUBLE
78674: LD_INT 1
78676: DEC
78677: ST_TO_ADDR
78678: LD_INT 16
78680: PUSH
78681: FOR_TO
78682: IFFALSE 78881
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78684: LD_ADDR_VAR 0 3
78688: PUSH
78689: LD_INT 10
78691: PUSH
78692: LD_INT 20
78694: PUSH
78695: LD_INT 30
78697: PUSH
78698: LD_INT 40
78700: PUSH
78701: LD_INT 50
78703: PUSH
78704: LD_INT 60
78706: PUSH
78707: LD_INT 70
78709: PUSH
78710: LD_INT 80
78712: PUSH
78713: LD_INT 90
78715: PUSH
78716: LD_INT 100
78718: PUSH
78719: LD_INT 110
78721: PUSH
78722: LD_INT 120
78724: PUSH
78725: LD_INT 130
78727: PUSH
78728: LD_INT 140
78730: PUSH
78731: LD_INT 150
78733: PUSH
78734: EMPTY
78735: LIST
78736: LIST
78737: LIST
78738: LIST
78739: LIST
78740: LIST
78741: LIST
78742: LIST
78743: LIST
78744: LIST
78745: LIST
78746: LIST
78747: LIST
78748: LIST
78749: LIST
78750: PUSH
78751: LD_INT 1
78753: PPUSH
78754: LD_INT 15
78756: PPUSH
78757: CALL_OW 12
78761: ARRAY
78762: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78763: LD_ADDR_VAR 0 4
78767: PUSH
78768: LD_INT 10
78770: PUSH
78771: LD_INT 20
78773: PUSH
78774: LD_INT 30
78776: PUSH
78777: LD_INT 40
78779: PUSH
78780: LD_INT 50
78782: PUSH
78783: LD_INT 60
78785: PUSH
78786: LD_INT 70
78788: PUSH
78789: LD_INT 80
78791: PUSH
78792: LD_INT 90
78794: PUSH
78795: LD_INT 100
78797: PUSH
78798: LD_INT 110
78800: PUSH
78801: LD_INT 120
78803: PUSH
78804: LD_INT 130
78806: PUSH
78807: LD_INT 140
78809: PUSH
78810: LD_INT 150
78812: PUSH
78813: EMPTY
78814: LIST
78815: LIST
78816: LIST
78817: LIST
78818: LIST
78819: LIST
78820: LIST
78821: LIST
78822: LIST
78823: LIST
78824: LIST
78825: LIST
78826: LIST
78827: LIST
78828: LIST
78829: PUSH
78830: LD_INT 1
78832: PPUSH
78833: LD_INT 15
78835: PPUSH
78836: CALL_OW 12
78840: ARRAY
78841: ST_TO_ADDR
// if ValidHex ( x , y ) then
78842: LD_VAR 0 3
78846: PPUSH
78847: LD_VAR 0 4
78851: PPUSH
78852: CALL_OW 488
78856: IFFALSE 78879
// begin result := [ x , y ] ;
78858: LD_ADDR_VAR 0 1
78862: PUSH
78863: LD_VAR 0 3
78867: PUSH
78868: LD_VAR 0 4
78872: PUSH
78873: EMPTY
78874: LIST
78875: LIST
78876: ST_TO_ADDR
// break ;
78877: GO 78881
// end ; end ;
78879: GO 78681
78881: POP
78882: POP
// if result then
78883: LD_VAR 0 1
78887: IFFALSE 78947
// begin ToLua ( playSibBomb() ) ;
78889: LD_STRING playSibBomb()
78891: PPUSH
78892: CALL_OW 559
// wait ( 0 0$14 ) ;
78896: LD_INT 490
78898: PPUSH
78899: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
78903: LD_VAR 0 1
78907: PUSH
78908: LD_INT 1
78910: ARRAY
78911: PPUSH
78912: LD_VAR 0 1
78916: PUSH
78917: LD_INT 2
78919: ARRAY
78920: PPUSH
78921: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
78925: LD_VAR 0 1
78929: PUSH
78930: LD_INT 1
78932: ARRAY
78933: PPUSH
78934: LD_VAR 0 1
78938: PUSH
78939: LD_INT 2
78941: ARRAY
78942: PPUSH
78943: CALL_OW 429
// end ; end ;
78947: LD_VAR 0 1
78951: RET
// every 0 0$1 trigger StreamModeActive and sReset do
78952: LD_EXP 64
78956: PUSH
78957: LD_EXP 86
78961: AND
78962: IFFALSE 78974
78964: GO 78966
78966: DISABLE
// YouLost (  ) ;
78967: LD_STRING 
78969: PPUSH
78970: CALL_OW 104
78974: END
// every 0 0$1 trigger StreamModeActive and sFog do
78975: LD_EXP 64
78979: PUSH
78980: LD_EXP 85
78984: AND
78985: IFFALSE 78999
78987: GO 78989
78989: DISABLE
// FogOff ( your_side ) ;
78990: LD_OWVAR 2
78994: PPUSH
78995: CALL_OW 344
78999: END
// every 0 0$1 trigger StreamModeActive and sSun do
79000: LD_EXP 64
79004: PUSH
79005: LD_EXP 87
79009: AND
79010: IFFALSE 79038
79012: GO 79014
79014: DISABLE
// begin solar_recharge_percent := 0 ;
79015: LD_ADDR_OWVAR 79
79019: PUSH
79020: LD_INT 0
79022: ST_TO_ADDR
// wait ( 5 5$00 ) ;
79023: LD_INT 10500
79025: PPUSH
79026: CALL_OW 67
// solar_recharge_percent := 100 ;
79030: LD_ADDR_OWVAR 79
79034: PUSH
79035: LD_INT 100
79037: ST_TO_ADDR
// end ;
79038: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
79039: LD_EXP 64
79043: PUSH
79044: LD_EXP 88
79048: AND
79049: IFFALSE 79288
79051: GO 79053
79053: DISABLE
79054: LD_INT 0
79056: PPUSH
79057: PPUSH
79058: PPUSH
// begin tmp := [ ] ;
79059: LD_ADDR_VAR 0 3
79063: PUSH
79064: EMPTY
79065: ST_TO_ADDR
// for i := 1 to 6 do
79066: LD_ADDR_VAR 0 1
79070: PUSH
79071: DOUBLE
79072: LD_INT 1
79074: DEC
79075: ST_TO_ADDR
79076: LD_INT 6
79078: PUSH
79079: FOR_TO
79080: IFFALSE 79185
// begin uc_nation := nation_nature ;
79082: LD_ADDR_OWVAR 21
79086: PUSH
79087: LD_INT 0
79089: ST_TO_ADDR
// uc_side := 0 ;
79090: LD_ADDR_OWVAR 20
79094: PUSH
79095: LD_INT 0
79097: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
79098: LD_ADDR_OWVAR 29
79102: PUSH
79103: LD_INT 12
79105: PUSH
79106: LD_INT 12
79108: PUSH
79109: EMPTY
79110: LIST
79111: LIST
79112: ST_TO_ADDR
// hc_agressivity := 20 ;
79113: LD_ADDR_OWVAR 35
79117: PUSH
79118: LD_INT 20
79120: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
79121: LD_ADDR_OWVAR 28
79125: PUSH
79126: LD_INT 17
79128: ST_TO_ADDR
// hc_gallery :=  ;
79129: LD_ADDR_OWVAR 33
79133: PUSH
79134: LD_STRING 
79136: ST_TO_ADDR
// hc_name :=  ;
79137: LD_ADDR_OWVAR 26
79141: PUSH
79142: LD_STRING 
79144: ST_TO_ADDR
// un := CreateHuman ;
79145: LD_ADDR_VAR 0 2
79149: PUSH
79150: CALL_OW 44
79154: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
79155: LD_VAR 0 2
79159: PPUSH
79160: LD_INT 1
79162: PPUSH
79163: CALL_OW 51
// tmp := tmp ^ un ;
79167: LD_ADDR_VAR 0 3
79171: PUSH
79172: LD_VAR 0 3
79176: PUSH
79177: LD_VAR 0 2
79181: ADD
79182: ST_TO_ADDR
// end ;
79183: GO 79079
79185: POP
79186: POP
// repeat wait ( 0 0$1 ) ;
79187: LD_INT 35
79189: PPUSH
79190: CALL_OW 67
// for un in tmp do
79194: LD_ADDR_VAR 0 2
79198: PUSH
79199: LD_VAR 0 3
79203: PUSH
79204: FOR_IN
79205: IFFALSE 79279
// begin if IsDead ( un ) then
79207: LD_VAR 0 2
79211: PPUSH
79212: CALL_OW 301
79216: IFFALSE 79236
// begin tmp := tmp diff un ;
79218: LD_ADDR_VAR 0 3
79222: PUSH
79223: LD_VAR 0 3
79227: PUSH
79228: LD_VAR 0 2
79232: DIFF
79233: ST_TO_ADDR
// continue ;
79234: GO 79204
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
79236: LD_VAR 0 2
79240: PPUSH
79241: LD_INT 3
79243: PUSH
79244: LD_INT 22
79246: PUSH
79247: LD_INT 0
79249: PUSH
79250: EMPTY
79251: LIST
79252: LIST
79253: PUSH
79254: EMPTY
79255: LIST
79256: LIST
79257: PPUSH
79258: CALL_OW 69
79262: PPUSH
79263: LD_VAR 0 2
79267: PPUSH
79268: CALL_OW 74
79272: PPUSH
79273: CALL_OW 115
// end ;
79277: GO 79204
79279: POP
79280: POP
// until not tmp ;
79281: LD_VAR 0 3
79285: NOT
79286: IFFALSE 79187
// end ;
79288: PPOPN 3
79290: END
// every 0 0$1 trigger StreamModeActive and sTroll do
79291: LD_EXP 64
79295: PUSH
79296: LD_EXP 89
79300: AND
79301: IFFALSE 79355
79303: GO 79305
79305: DISABLE
// begin ToLua ( displayTroll(); ) ;
79306: LD_STRING displayTroll();
79308: PPUSH
79309: CALL_OW 559
// wait ( 3 3$00 ) ;
79313: LD_INT 6300
79315: PPUSH
79316: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79320: LD_STRING hideTroll();
79322: PPUSH
79323: CALL_OW 559
// wait ( 1 1$00 ) ;
79327: LD_INT 2100
79329: PPUSH
79330: CALL_OW 67
// ToLua ( displayTroll(); ) ;
79334: LD_STRING displayTroll();
79336: PPUSH
79337: CALL_OW 559
// wait ( 1 1$00 ) ;
79341: LD_INT 2100
79343: PPUSH
79344: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79348: LD_STRING hideTroll();
79350: PPUSH
79351: CALL_OW 559
// end ;
79355: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
79356: LD_EXP 64
79360: PUSH
79361: LD_EXP 90
79365: AND
79366: IFFALSE 79429
79368: GO 79370
79370: DISABLE
79371: LD_INT 0
79373: PPUSH
// begin p := 0 ;
79374: LD_ADDR_VAR 0 1
79378: PUSH
79379: LD_INT 0
79381: ST_TO_ADDR
// repeat game_speed := 1 ;
79382: LD_ADDR_OWVAR 65
79386: PUSH
79387: LD_INT 1
79389: ST_TO_ADDR
// wait ( 0 0$1 ) ;
79390: LD_INT 35
79392: PPUSH
79393: CALL_OW 67
// p := p + 1 ;
79397: LD_ADDR_VAR 0 1
79401: PUSH
79402: LD_VAR 0 1
79406: PUSH
79407: LD_INT 1
79409: PLUS
79410: ST_TO_ADDR
// until p >= 60 ;
79411: LD_VAR 0 1
79415: PUSH
79416: LD_INT 60
79418: GREATEREQUAL
79419: IFFALSE 79382
// game_speed := 4 ;
79421: LD_ADDR_OWVAR 65
79425: PUSH
79426: LD_INT 4
79428: ST_TO_ADDR
// end ;
79429: PPOPN 1
79431: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
79432: LD_EXP 64
79436: PUSH
79437: LD_EXP 91
79441: AND
79442: IFFALSE 79588
79444: GO 79446
79446: DISABLE
79447: LD_INT 0
79449: PPUSH
79450: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79451: LD_ADDR_VAR 0 1
79455: PUSH
79456: LD_INT 22
79458: PUSH
79459: LD_OWVAR 2
79463: PUSH
79464: EMPTY
79465: LIST
79466: LIST
79467: PUSH
79468: LD_INT 2
79470: PUSH
79471: LD_INT 30
79473: PUSH
79474: LD_INT 0
79476: PUSH
79477: EMPTY
79478: LIST
79479: LIST
79480: PUSH
79481: LD_INT 30
79483: PUSH
79484: LD_INT 1
79486: PUSH
79487: EMPTY
79488: LIST
79489: LIST
79490: PUSH
79491: EMPTY
79492: LIST
79493: LIST
79494: LIST
79495: PUSH
79496: EMPTY
79497: LIST
79498: LIST
79499: PPUSH
79500: CALL_OW 69
79504: ST_TO_ADDR
// if not depot then
79505: LD_VAR 0 1
79509: NOT
79510: IFFALSE 79514
// exit ;
79512: GO 79588
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
79514: LD_ADDR_VAR 0 2
79518: PUSH
79519: LD_VAR 0 1
79523: PUSH
79524: LD_INT 1
79526: PPUSH
79527: LD_VAR 0 1
79531: PPUSH
79532: CALL_OW 12
79536: ARRAY
79537: PPUSH
79538: CALL_OW 274
79542: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
79543: LD_VAR 0 2
79547: PPUSH
79548: LD_INT 1
79550: PPUSH
79551: LD_INT 0
79553: PPUSH
79554: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
79558: LD_VAR 0 2
79562: PPUSH
79563: LD_INT 2
79565: PPUSH
79566: LD_INT 0
79568: PPUSH
79569: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
79573: LD_VAR 0 2
79577: PPUSH
79578: LD_INT 3
79580: PPUSH
79581: LD_INT 0
79583: PPUSH
79584: CALL_OW 277
// end ;
79588: PPOPN 2
79590: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
79591: LD_EXP 64
79595: PUSH
79596: LD_EXP 92
79600: AND
79601: IFFALSE 79698
79603: GO 79605
79605: DISABLE
79606: LD_INT 0
79608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79609: LD_ADDR_VAR 0 1
79613: PUSH
79614: LD_INT 22
79616: PUSH
79617: LD_OWVAR 2
79621: PUSH
79622: EMPTY
79623: LIST
79624: LIST
79625: PUSH
79626: LD_INT 21
79628: PUSH
79629: LD_INT 1
79631: PUSH
79632: EMPTY
79633: LIST
79634: LIST
79635: PUSH
79636: LD_INT 3
79638: PUSH
79639: LD_INT 23
79641: PUSH
79642: LD_INT 0
79644: PUSH
79645: EMPTY
79646: LIST
79647: LIST
79648: PUSH
79649: EMPTY
79650: LIST
79651: LIST
79652: PUSH
79653: EMPTY
79654: LIST
79655: LIST
79656: LIST
79657: PPUSH
79658: CALL_OW 69
79662: ST_TO_ADDR
// if not tmp then
79663: LD_VAR 0 1
79667: NOT
79668: IFFALSE 79672
// exit ;
79670: GO 79698
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
79672: LD_VAR 0 1
79676: PUSH
79677: LD_INT 1
79679: PPUSH
79680: LD_VAR 0 1
79684: PPUSH
79685: CALL_OW 12
79689: ARRAY
79690: PPUSH
79691: LD_INT 200
79693: PPUSH
79694: CALL_OW 234
// end ;
79698: PPOPN 1
79700: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
79701: LD_EXP 64
79705: PUSH
79706: LD_EXP 93
79710: AND
79711: IFFALSE 79790
79713: GO 79715
79715: DISABLE
79716: LD_INT 0
79718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
79719: LD_ADDR_VAR 0 1
79723: PUSH
79724: LD_INT 22
79726: PUSH
79727: LD_OWVAR 2
79731: PUSH
79732: EMPTY
79733: LIST
79734: LIST
79735: PUSH
79736: LD_INT 21
79738: PUSH
79739: LD_INT 2
79741: PUSH
79742: EMPTY
79743: LIST
79744: LIST
79745: PUSH
79746: EMPTY
79747: LIST
79748: LIST
79749: PPUSH
79750: CALL_OW 69
79754: ST_TO_ADDR
// if not tmp then
79755: LD_VAR 0 1
79759: NOT
79760: IFFALSE 79764
// exit ;
79762: GO 79790
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
79764: LD_VAR 0 1
79768: PUSH
79769: LD_INT 1
79771: PPUSH
79772: LD_VAR 0 1
79776: PPUSH
79777: CALL_OW 12
79781: ARRAY
79782: PPUSH
79783: LD_INT 60
79785: PPUSH
79786: CALL_OW 234
// end ;
79790: PPOPN 1
79792: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
79793: LD_EXP 64
79797: PUSH
79798: LD_EXP 94
79802: AND
79803: IFFALSE 79902
79805: GO 79807
79807: DISABLE
79808: LD_INT 0
79810: PPUSH
79811: PPUSH
// begin enable ;
79812: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
79813: LD_ADDR_VAR 0 1
79817: PUSH
79818: LD_INT 22
79820: PUSH
79821: LD_OWVAR 2
79825: PUSH
79826: EMPTY
79827: LIST
79828: LIST
79829: PUSH
79830: LD_INT 61
79832: PUSH
79833: EMPTY
79834: LIST
79835: PUSH
79836: LD_INT 33
79838: PUSH
79839: LD_INT 2
79841: PUSH
79842: EMPTY
79843: LIST
79844: LIST
79845: PUSH
79846: EMPTY
79847: LIST
79848: LIST
79849: LIST
79850: PPUSH
79851: CALL_OW 69
79855: ST_TO_ADDR
// if not tmp then
79856: LD_VAR 0 1
79860: NOT
79861: IFFALSE 79865
// exit ;
79863: GO 79902
// for i in tmp do
79865: LD_ADDR_VAR 0 2
79869: PUSH
79870: LD_VAR 0 1
79874: PUSH
79875: FOR_IN
79876: IFFALSE 79900
// if IsControledBy ( i ) then
79878: LD_VAR 0 2
79882: PPUSH
79883: CALL_OW 312
79887: IFFALSE 79898
// ComUnlink ( i ) ;
79889: LD_VAR 0 2
79893: PPUSH
79894: CALL_OW 136
79898: GO 79875
79900: POP
79901: POP
// end ;
79902: PPOPN 2
79904: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
79905: LD_EXP 64
79909: PUSH
79910: LD_EXP 95
79914: AND
79915: IFFALSE 80055
79917: GO 79919
79919: DISABLE
79920: LD_INT 0
79922: PPUSH
79923: PPUSH
// begin ToLua ( displayPowell(); ) ;
79924: LD_STRING displayPowell();
79926: PPUSH
79927: CALL_OW 559
// uc_side := 0 ;
79931: LD_ADDR_OWVAR 20
79935: PUSH
79936: LD_INT 0
79938: ST_TO_ADDR
// uc_nation := 2 ;
79939: LD_ADDR_OWVAR 21
79943: PUSH
79944: LD_INT 2
79946: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
79947: LD_ADDR_OWVAR 37
79951: PUSH
79952: LD_INT 14
79954: ST_TO_ADDR
// vc_engine := engine_siberite ;
79955: LD_ADDR_OWVAR 39
79959: PUSH
79960: LD_INT 3
79962: ST_TO_ADDR
// vc_control := control_apeman ;
79963: LD_ADDR_OWVAR 38
79967: PUSH
79968: LD_INT 5
79970: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
79971: LD_ADDR_OWVAR 40
79975: PUSH
79976: LD_INT 29
79978: ST_TO_ADDR
// un := CreateVehicle ;
79979: LD_ADDR_VAR 0 2
79983: PUSH
79984: CALL_OW 45
79988: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79989: LD_VAR 0 2
79993: PPUSH
79994: LD_INT 1
79996: PPUSH
79997: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80001: LD_INT 35
80003: PPUSH
80004: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80008: LD_VAR 0 2
80012: PPUSH
80013: LD_INT 22
80015: PUSH
80016: LD_OWVAR 2
80020: PUSH
80021: EMPTY
80022: LIST
80023: LIST
80024: PPUSH
80025: CALL_OW 69
80029: PPUSH
80030: LD_VAR 0 2
80034: PPUSH
80035: CALL_OW 74
80039: PPUSH
80040: CALL_OW 115
// until IsDead ( un ) ;
80044: LD_VAR 0 2
80048: PPUSH
80049: CALL_OW 301
80053: IFFALSE 80001
// end ;
80055: PPOPN 2
80057: END
// every 0 0$1 trigger StreamModeActive and sStu do
80058: LD_EXP 64
80062: PUSH
80063: LD_EXP 103
80067: AND
80068: IFFALSE 80084
80070: GO 80072
80072: DISABLE
// begin ToLua ( displayStucuk(); ) ;
80073: LD_STRING displayStucuk();
80075: PPUSH
80076: CALL_OW 559
// ResetFog ;
80080: CALL_OW 335
// end ;
80084: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
80085: LD_EXP 64
80089: PUSH
80090: LD_EXP 96
80094: AND
80095: IFFALSE 80236
80097: GO 80099
80099: DISABLE
80100: LD_INT 0
80102: PPUSH
80103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80104: LD_ADDR_VAR 0 2
80108: PUSH
80109: LD_INT 22
80111: PUSH
80112: LD_OWVAR 2
80116: PUSH
80117: EMPTY
80118: LIST
80119: LIST
80120: PUSH
80121: LD_INT 21
80123: PUSH
80124: LD_INT 1
80126: PUSH
80127: EMPTY
80128: LIST
80129: LIST
80130: PUSH
80131: EMPTY
80132: LIST
80133: LIST
80134: PPUSH
80135: CALL_OW 69
80139: ST_TO_ADDR
// if not tmp then
80140: LD_VAR 0 2
80144: NOT
80145: IFFALSE 80149
// exit ;
80147: GO 80236
// un := tmp [ rand ( 1 , tmp ) ] ;
80149: LD_ADDR_VAR 0 1
80153: PUSH
80154: LD_VAR 0 2
80158: PUSH
80159: LD_INT 1
80161: PPUSH
80162: LD_VAR 0 2
80166: PPUSH
80167: CALL_OW 12
80171: ARRAY
80172: ST_TO_ADDR
// SetSide ( un , 0 ) ;
80173: LD_VAR 0 1
80177: PPUSH
80178: LD_INT 0
80180: PPUSH
80181: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
80185: LD_VAR 0 1
80189: PPUSH
80190: LD_OWVAR 3
80194: PUSH
80195: LD_VAR 0 1
80199: DIFF
80200: PPUSH
80201: LD_VAR 0 1
80205: PPUSH
80206: CALL_OW 74
80210: PPUSH
80211: CALL_OW 115
// wait ( 0 0$20 ) ;
80215: LD_INT 700
80217: PPUSH
80218: CALL_OW 67
// SetSide ( un , your_side ) ;
80222: LD_VAR 0 1
80226: PPUSH
80227: LD_OWVAR 2
80231: PPUSH
80232: CALL_OW 235
// end ;
80236: PPOPN 2
80238: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
80239: LD_EXP 64
80243: PUSH
80244: LD_EXP 97
80248: AND
80249: IFFALSE 80355
80251: GO 80253
80253: DISABLE
80254: LD_INT 0
80256: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80257: LD_ADDR_VAR 0 1
80261: PUSH
80262: LD_INT 22
80264: PUSH
80265: LD_OWVAR 2
80269: PUSH
80270: EMPTY
80271: LIST
80272: LIST
80273: PUSH
80274: LD_INT 2
80276: PUSH
80277: LD_INT 30
80279: PUSH
80280: LD_INT 0
80282: PUSH
80283: EMPTY
80284: LIST
80285: LIST
80286: PUSH
80287: LD_INT 30
80289: PUSH
80290: LD_INT 1
80292: PUSH
80293: EMPTY
80294: LIST
80295: LIST
80296: PUSH
80297: EMPTY
80298: LIST
80299: LIST
80300: LIST
80301: PUSH
80302: EMPTY
80303: LIST
80304: LIST
80305: PPUSH
80306: CALL_OW 69
80310: ST_TO_ADDR
// if not depot then
80311: LD_VAR 0 1
80315: NOT
80316: IFFALSE 80320
// exit ;
80318: GO 80355
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
80320: LD_VAR 0 1
80324: PUSH
80325: LD_INT 1
80327: ARRAY
80328: PPUSH
80329: CALL_OW 250
80333: PPUSH
80334: LD_VAR 0 1
80338: PUSH
80339: LD_INT 1
80341: ARRAY
80342: PPUSH
80343: CALL_OW 251
80347: PPUSH
80348: LD_INT 70
80350: PPUSH
80351: CALL_OW 495
// end ;
80355: PPOPN 1
80357: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
80358: LD_EXP 64
80362: PUSH
80363: LD_EXP 98
80367: AND
80368: IFFALSE 80579
80370: GO 80372
80372: DISABLE
80373: LD_INT 0
80375: PPUSH
80376: PPUSH
80377: PPUSH
80378: PPUSH
80379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80380: LD_ADDR_VAR 0 5
80384: PUSH
80385: LD_INT 22
80387: PUSH
80388: LD_OWVAR 2
80392: PUSH
80393: EMPTY
80394: LIST
80395: LIST
80396: PUSH
80397: LD_INT 21
80399: PUSH
80400: LD_INT 1
80402: PUSH
80403: EMPTY
80404: LIST
80405: LIST
80406: PUSH
80407: EMPTY
80408: LIST
80409: LIST
80410: PPUSH
80411: CALL_OW 69
80415: ST_TO_ADDR
// if not tmp then
80416: LD_VAR 0 5
80420: NOT
80421: IFFALSE 80425
// exit ;
80423: GO 80579
// for i in tmp do
80425: LD_ADDR_VAR 0 1
80429: PUSH
80430: LD_VAR 0 5
80434: PUSH
80435: FOR_IN
80436: IFFALSE 80577
// begin d := rand ( 0 , 5 ) ;
80438: LD_ADDR_VAR 0 4
80442: PUSH
80443: LD_INT 0
80445: PPUSH
80446: LD_INT 5
80448: PPUSH
80449: CALL_OW 12
80453: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
80454: LD_ADDR_VAR 0 2
80458: PUSH
80459: LD_VAR 0 1
80463: PPUSH
80464: CALL_OW 250
80468: PPUSH
80469: LD_VAR 0 4
80473: PPUSH
80474: LD_INT 3
80476: PPUSH
80477: LD_INT 12
80479: PPUSH
80480: CALL_OW 12
80484: PPUSH
80485: CALL_OW 272
80489: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
80490: LD_ADDR_VAR 0 3
80494: PUSH
80495: LD_VAR 0 1
80499: PPUSH
80500: CALL_OW 251
80504: PPUSH
80505: LD_VAR 0 4
80509: PPUSH
80510: LD_INT 3
80512: PPUSH
80513: LD_INT 12
80515: PPUSH
80516: CALL_OW 12
80520: PPUSH
80521: CALL_OW 273
80525: ST_TO_ADDR
// if ValidHex ( x , y ) then
80526: LD_VAR 0 2
80530: PPUSH
80531: LD_VAR 0 3
80535: PPUSH
80536: CALL_OW 488
80540: IFFALSE 80575
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
80542: LD_VAR 0 1
80546: PPUSH
80547: LD_VAR 0 2
80551: PPUSH
80552: LD_VAR 0 3
80556: PPUSH
80557: LD_INT 3
80559: PPUSH
80560: LD_INT 6
80562: PPUSH
80563: CALL_OW 12
80567: PPUSH
80568: LD_INT 1
80570: PPUSH
80571: CALL_OW 483
// end ;
80575: GO 80435
80577: POP
80578: POP
// end ;
80579: PPOPN 5
80581: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
80582: LD_EXP 64
80586: PUSH
80587: LD_EXP 99
80591: AND
80592: IFFALSE 80686
80594: GO 80596
80596: DISABLE
80597: LD_INT 0
80599: PPUSH
80600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
80601: LD_ADDR_VAR 0 2
80605: PUSH
80606: LD_INT 22
80608: PUSH
80609: LD_OWVAR 2
80613: PUSH
80614: EMPTY
80615: LIST
80616: LIST
80617: PUSH
80618: LD_INT 32
80620: PUSH
80621: LD_INT 1
80623: PUSH
80624: EMPTY
80625: LIST
80626: LIST
80627: PUSH
80628: LD_INT 21
80630: PUSH
80631: LD_INT 2
80633: PUSH
80634: EMPTY
80635: LIST
80636: LIST
80637: PUSH
80638: EMPTY
80639: LIST
80640: LIST
80641: LIST
80642: PPUSH
80643: CALL_OW 69
80647: ST_TO_ADDR
// if not tmp then
80648: LD_VAR 0 2
80652: NOT
80653: IFFALSE 80657
// exit ;
80655: GO 80686
// for i in tmp do
80657: LD_ADDR_VAR 0 1
80661: PUSH
80662: LD_VAR 0 2
80666: PUSH
80667: FOR_IN
80668: IFFALSE 80684
// SetFuel ( i , 0 ) ;
80670: LD_VAR 0 1
80674: PPUSH
80675: LD_INT 0
80677: PPUSH
80678: CALL_OW 240
80682: GO 80667
80684: POP
80685: POP
// end ;
80686: PPOPN 2
80688: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
80689: LD_EXP 64
80693: PUSH
80694: LD_EXP 100
80698: AND
80699: IFFALSE 80765
80701: GO 80703
80703: DISABLE
80704: LD_INT 0
80706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
80707: LD_ADDR_VAR 0 1
80711: PUSH
80712: LD_INT 22
80714: PUSH
80715: LD_OWVAR 2
80719: PUSH
80720: EMPTY
80721: LIST
80722: LIST
80723: PUSH
80724: LD_INT 30
80726: PUSH
80727: LD_INT 29
80729: PUSH
80730: EMPTY
80731: LIST
80732: LIST
80733: PUSH
80734: EMPTY
80735: LIST
80736: LIST
80737: PPUSH
80738: CALL_OW 69
80742: ST_TO_ADDR
// if not tmp then
80743: LD_VAR 0 1
80747: NOT
80748: IFFALSE 80752
// exit ;
80750: GO 80765
// DestroyUnit ( tmp [ 1 ] ) ;
80752: LD_VAR 0 1
80756: PUSH
80757: LD_INT 1
80759: ARRAY
80760: PPUSH
80761: CALL_OW 65
// end ;
80765: PPOPN 1
80767: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
80768: LD_EXP 64
80772: PUSH
80773: LD_EXP 102
80777: AND
80778: IFFALSE 80907
80780: GO 80782
80782: DISABLE
80783: LD_INT 0
80785: PPUSH
// begin uc_side := 0 ;
80786: LD_ADDR_OWVAR 20
80790: PUSH
80791: LD_INT 0
80793: ST_TO_ADDR
// uc_nation := nation_arabian ;
80794: LD_ADDR_OWVAR 21
80798: PUSH
80799: LD_INT 2
80801: ST_TO_ADDR
// hc_gallery :=  ;
80802: LD_ADDR_OWVAR 33
80806: PUSH
80807: LD_STRING 
80809: ST_TO_ADDR
// hc_name :=  ;
80810: LD_ADDR_OWVAR 26
80814: PUSH
80815: LD_STRING 
80817: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
80818: LD_INT 1
80820: PPUSH
80821: LD_INT 11
80823: PPUSH
80824: LD_INT 10
80826: PPUSH
80827: CALL_OW 380
// un := CreateHuman ;
80831: LD_ADDR_VAR 0 1
80835: PUSH
80836: CALL_OW 44
80840: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80841: LD_VAR 0 1
80845: PPUSH
80846: LD_INT 1
80848: PPUSH
80849: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80853: LD_INT 35
80855: PPUSH
80856: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80860: LD_VAR 0 1
80864: PPUSH
80865: LD_INT 22
80867: PUSH
80868: LD_OWVAR 2
80872: PUSH
80873: EMPTY
80874: LIST
80875: LIST
80876: PPUSH
80877: CALL_OW 69
80881: PPUSH
80882: LD_VAR 0 1
80886: PPUSH
80887: CALL_OW 74
80891: PPUSH
80892: CALL_OW 115
// until IsDead ( un ) ;
80896: LD_VAR 0 1
80900: PPUSH
80901: CALL_OW 301
80905: IFFALSE 80853
// end ;
80907: PPOPN 1
80909: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
80910: LD_EXP 64
80914: PUSH
80915: LD_EXP 104
80919: AND
80920: IFFALSE 80932
80922: GO 80924
80924: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
80925: LD_STRING earthquake(getX(game), 0, 32)
80927: PPUSH
80928: CALL_OW 559
80932: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
80933: LD_EXP 64
80937: PUSH
80938: LD_EXP 105
80942: AND
80943: IFFALSE 81034
80945: GO 80947
80947: DISABLE
80948: LD_INT 0
80950: PPUSH
// begin enable ;
80951: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
80952: LD_ADDR_VAR 0 1
80956: PUSH
80957: LD_INT 22
80959: PUSH
80960: LD_OWVAR 2
80964: PUSH
80965: EMPTY
80966: LIST
80967: LIST
80968: PUSH
80969: LD_INT 21
80971: PUSH
80972: LD_INT 2
80974: PUSH
80975: EMPTY
80976: LIST
80977: LIST
80978: PUSH
80979: LD_INT 33
80981: PUSH
80982: LD_INT 3
80984: PUSH
80985: EMPTY
80986: LIST
80987: LIST
80988: PUSH
80989: EMPTY
80990: LIST
80991: LIST
80992: LIST
80993: PPUSH
80994: CALL_OW 69
80998: ST_TO_ADDR
// if not tmp then
80999: LD_VAR 0 1
81003: NOT
81004: IFFALSE 81008
// exit ;
81006: GO 81034
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
81008: LD_VAR 0 1
81012: PUSH
81013: LD_INT 1
81015: PPUSH
81016: LD_VAR 0 1
81020: PPUSH
81021: CALL_OW 12
81025: ARRAY
81026: PPUSH
81027: LD_INT 1
81029: PPUSH
81030: CALL_OW 234
// end ;
81034: PPOPN 1
81036: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
81037: LD_EXP 64
81041: PUSH
81042: LD_EXP 106
81046: AND
81047: IFFALSE 81188
81049: GO 81051
81051: DISABLE
81052: LD_INT 0
81054: PPUSH
81055: PPUSH
81056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81057: LD_ADDR_VAR 0 3
81061: PUSH
81062: LD_INT 22
81064: PUSH
81065: LD_OWVAR 2
81069: PUSH
81070: EMPTY
81071: LIST
81072: LIST
81073: PUSH
81074: LD_INT 25
81076: PUSH
81077: LD_INT 1
81079: PUSH
81080: EMPTY
81081: LIST
81082: LIST
81083: PUSH
81084: EMPTY
81085: LIST
81086: LIST
81087: PPUSH
81088: CALL_OW 69
81092: ST_TO_ADDR
// if not tmp then
81093: LD_VAR 0 3
81097: NOT
81098: IFFALSE 81102
// exit ;
81100: GO 81188
// un := tmp [ rand ( 1 , tmp ) ] ;
81102: LD_ADDR_VAR 0 2
81106: PUSH
81107: LD_VAR 0 3
81111: PUSH
81112: LD_INT 1
81114: PPUSH
81115: LD_VAR 0 3
81119: PPUSH
81120: CALL_OW 12
81124: ARRAY
81125: ST_TO_ADDR
// if Crawls ( un ) then
81126: LD_VAR 0 2
81130: PPUSH
81131: CALL_OW 318
81135: IFFALSE 81146
// ComWalk ( un ) ;
81137: LD_VAR 0 2
81141: PPUSH
81142: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
81146: LD_VAR 0 2
81150: PPUSH
81151: LD_INT 9
81153: PPUSH
81154: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
81158: LD_INT 28
81160: PPUSH
81161: LD_OWVAR 2
81165: PPUSH
81166: LD_INT 2
81168: PPUSH
81169: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
81173: LD_INT 29
81175: PPUSH
81176: LD_OWVAR 2
81180: PPUSH
81181: LD_INT 2
81183: PPUSH
81184: CALL_OW 322
// end ;
81188: PPOPN 3
81190: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
81191: LD_EXP 64
81195: PUSH
81196: LD_EXP 107
81200: AND
81201: IFFALSE 81312
81203: GO 81205
81205: DISABLE
81206: LD_INT 0
81208: PPUSH
81209: PPUSH
81210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81211: LD_ADDR_VAR 0 3
81215: PUSH
81216: LD_INT 22
81218: PUSH
81219: LD_OWVAR 2
81223: PUSH
81224: EMPTY
81225: LIST
81226: LIST
81227: PUSH
81228: LD_INT 25
81230: PUSH
81231: LD_INT 1
81233: PUSH
81234: EMPTY
81235: LIST
81236: LIST
81237: PUSH
81238: EMPTY
81239: LIST
81240: LIST
81241: PPUSH
81242: CALL_OW 69
81246: ST_TO_ADDR
// if not tmp then
81247: LD_VAR 0 3
81251: NOT
81252: IFFALSE 81256
// exit ;
81254: GO 81312
// un := tmp [ rand ( 1 , tmp ) ] ;
81256: LD_ADDR_VAR 0 2
81260: PUSH
81261: LD_VAR 0 3
81265: PUSH
81266: LD_INT 1
81268: PPUSH
81269: LD_VAR 0 3
81273: PPUSH
81274: CALL_OW 12
81278: ARRAY
81279: ST_TO_ADDR
// if Crawls ( un ) then
81280: LD_VAR 0 2
81284: PPUSH
81285: CALL_OW 318
81289: IFFALSE 81300
// ComWalk ( un ) ;
81291: LD_VAR 0 2
81295: PPUSH
81296: CALL_OW 138
// SetClass ( un , class_mortar ) ;
81300: LD_VAR 0 2
81304: PPUSH
81305: LD_INT 8
81307: PPUSH
81308: CALL_OW 336
// end ;
81312: PPOPN 3
81314: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
81315: LD_EXP 64
81319: PUSH
81320: LD_EXP 108
81324: AND
81325: IFFALSE 81469
81327: GO 81329
81329: DISABLE
81330: LD_INT 0
81332: PPUSH
81333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
81334: LD_ADDR_VAR 0 2
81338: PUSH
81339: LD_INT 22
81341: PUSH
81342: LD_OWVAR 2
81346: PUSH
81347: EMPTY
81348: LIST
81349: LIST
81350: PUSH
81351: LD_INT 21
81353: PUSH
81354: LD_INT 2
81356: PUSH
81357: EMPTY
81358: LIST
81359: LIST
81360: PUSH
81361: LD_INT 2
81363: PUSH
81364: LD_INT 34
81366: PUSH
81367: LD_INT 12
81369: PUSH
81370: EMPTY
81371: LIST
81372: LIST
81373: PUSH
81374: LD_INT 34
81376: PUSH
81377: LD_INT 51
81379: PUSH
81380: EMPTY
81381: LIST
81382: LIST
81383: PUSH
81384: LD_INT 34
81386: PUSH
81387: LD_INT 32
81389: PUSH
81390: EMPTY
81391: LIST
81392: LIST
81393: PUSH
81394: EMPTY
81395: LIST
81396: LIST
81397: LIST
81398: LIST
81399: PUSH
81400: EMPTY
81401: LIST
81402: LIST
81403: LIST
81404: PPUSH
81405: CALL_OW 69
81409: ST_TO_ADDR
// if not tmp then
81410: LD_VAR 0 2
81414: NOT
81415: IFFALSE 81419
// exit ;
81417: GO 81469
// for i in tmp do
81419: LD_ADDR_VAR 0 1
81423: PUSH
81424: LD_VAR 0 2
81428: PUSH
81429: FOR_IN
81430: IFFALSE 81467
// if GetCargo ( i , mat_artifact ) = 0 then
81432: LD_VAR 0 1
81436: PPUSH
81437: LD_INT 4
81439: PPUSH
81440: CALL_OW 289
81444: PUSH
81445: LD_INT 0
81447: EQUAL
81448: IFFALSE 81465
// SetCargo ( i , mat_siberit , 100 ) ;
81450: LD_VAR 0 1
81454: PPUSH
81455: LD_INT 3
81457: PPUSH
81458: LD_INT 100
81460: PPUSH
81461: CALL_OW 290
81465: GO 81429
81467: POP
81468: POP
// end ;
81469: PPOPN 2
81471: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
81472: LD_EXP 64
81476: PUSH
81477: LD_EXP 109
81481: AND
81482: IFFALSE 81665
81484: GO 81486
81486: DISABLE
81487: LD_INT 0
81489: PPUSH
81490: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
81491: LD_ADDR_VAR 0 2
81495: PUSH
81496: LD_INT 22
81498: PUSH
81499: LD_OWVAR 2
81503: PUSH
81504: EMPTY
81505: LIST
81506: LIST
81507: PPUSH
81508: CALL_OW 69
81512: ST_TO_ADDR
// if not tmp then
81513: LD_VAR 0 2
81517: NOT
81518: IFFALSE 81522
// exit ;
81520: GO 81665
// for i := 1 to 2 do
81522: LD_ADDR_VAR 0 1
81526: PUSH
81527: DOUBLE
81528: LD_INT 1
81530: DEC
81531: ST_TO_ADDR
81532: LD_INT 2
81534: PUSH
81535: FOR_TO
81536: IFFALSE 81663
// begin uc_side := your_side ;
81538: LD_ADDR_OWVAR 20
81542: PUSH
81543: LD_OWVAR 2
81547: ST_TO_ADDR
// uc_nation := nation_american ;
81548: LD_ADDR_OWVAR 21
81552: PUSH
81553: LD_INT 1
81555: ST_TO_ADDR
// vc_chassis := us_morphling ;
81556: LD_ADDR_OWVAR 37
81560: PUSH
81561: LD_INT 5
81563: ST_TO_ADDR
// vc_engine := engine_siberite ;
81564: LD_ADDR_OWVAR 39
81568: PUSH
81569: LD_INT 3
81571: ST_TO_ADDR
// vc_control := control_computer ;
81572: LD_ADDR_OWVAR 38
81576: PUSH
81577: LD_INT 3
81579: ST_TO_ADDR
// vc_weapon := us_double_laser ;
81580: LD_ADDR_OWVAR 40
81584: PUSH
81585: LD_INT 10
81587: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
81588: LD_VAR 0 2
81592: PUSH
81593: LD_INT 1
81595: ARRAY
81596: PPUSH
81597: CALL_OW 310
81601: NOT
81602: IFFALSE 81649
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
81604: CALL_OW 45
81608: PPUSH
81609: LD_VAR 0 2
81613: PUSH
81614: LD_INT 1
81616: ARRAY
81617: PPUSH
81618: CALL_OW 250
81622: PPUSH
81623: LD_VAR 0 2
81627: PUSH
81628: LD_INT 1
81630: ARRAY
81631: PPUSH
81632: CALL_OW 251
81636: PPUSH
81637: LD_INT 12
81639: PPUSH
81640: LD_INT 1
81642: PPUSH
81643: CALL_OW 50
81647: GO 81661
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
81649: CALL_OW 45
81653: PPUSH
81654: LD_INT 1
81656: PPUSH
81657: CALL_OW 51
// end ;
81661: GO 81535
81663: POP
81664: POP
// end ;
81665: PPOPN 2
81667: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
81668: LD_EXP 64
81672: PUSH
81673: LD_EXP 110
81677: AND
81678: IFFALSE 81900
81680: GO 81682
81682: DISABLE
81683: LD_INT 0
81685: PPUSH
81686: PPUSH
81687: PPUSH
81688: PPUSH
81689: PPUSH
81690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81691: LD_ADDR_VAR 0 6
81695: PUSH
81696: LD_INT 22
81698: PUSH
81699: LD_OWVAR 2
81703: PUSH
81704: EMPTY
81705: LIST
81706: LIST
81707: PUSH
81708: LD_INT 21
81710: PUSH
81711: LD_INT 1
81713: PUSH
81714: EMPTY
81715: LIST
81716: LIST
81717: PUSH
81718: LD_INT 3
81720: PUSH
81721: LD_INT 23
81723: PUSH
81724: LD_INT 0
81726: PUSH
81727: EMPTY
81728: LIST
81729: LIST
81730: PUSH
81731: EMPTY
81732: LIST
81733: LIST
81734: PUSH
81735: EMPTY
81736: LIST
81737: LIST
81738: LIST
81739: PPUSH
81740: CALL_OW 69
81744: ST_TO_ADDR
// if not tmp then
81745: LD_VAR 0 6
81749: NOT
81750: IFFALSE 81754
// exit ;
81752: GO 81900
// s1 := rand ( 1 , 4 ) ;
81754: LD_ADDR_VAR 0 2
81758: PUSH
81759: LD_INT 1
81761: PPUSH
81762: LD_INT 4
81764: PPUSH
81765: CALL_OW 12
81769: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
81770: LD_ADDR_VAR 0 4
81774: PUSH
81775: LD_VAR 0 6
81779: PUSH
81780: LD_INT 1
81782: ARRAY
81783: PPUSH
81784: LD_VAR 0 2
81788: PPUSH
81789: CALL_OW 259
81793: ST_TO_ADDR
// if s1 = 1 then
81794: LD_VAR 0 2
81798: PUSH
81799: LD_INT 1
81801: EQUAL
81802: IFFALSE 81822
// s2 := rand ( 2 , 4 ) else
81804: LD_ADDR_VAR 0 3
81808: PUSH
81809: LD_INT 2
81811: PPUSH
81812: LD_INT 4
81814: PPUSH
81815: CALL_OW 12
81819: ST_TO_ADDR
81820: GO 81830
// s2 := 1 ;
81822: LD_ADDR_VAR 0 3
81826: PUSH
81827: LD_INT 1
81829: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
81830: LD_ADDR_VAR 0 5
81834: PUSH
81835: LD_VAR 0 6
81839: PUSH
81840: LD_INT 1
81842: ARRAY
81843: PPUSH
81844: LD_VAR 0 3
81848: PPUSH
81849: CALL_OW 259
81853: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
81854: LD_VAR 0 6
81858: PUSH
81859: LD_INT 1
81861: ARRAY
81862: PPUSH
81863: LD_VAR 0 2
81867: PPUSH
81868: LD_VAR 0 5
81872: PPUSH
81873: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
81877: LD_VAR 0 6
81881: PUSH
81882: LD_INT 1
81884: ARRAY
81885: PPUSH
81886: LD_VAR 0 3
81890: PPUSH
81891: LD_VAR 0 4
81895: PPUSH
81896: CALL_OW 237
// end ;
81900: PPOPN 6
81902: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
81903: LD_EXP 64
81907: PUSH
81908: LD_EXP 111
81912: AND
81913: IFFALSE 81992
81915: GO 81917
81917: DISABLE
81918: LD_INT 0
81920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
81921: LD_ADDR_VAR 0 1
81925: PUSH
81926: LD_INT 22
81928: PUSH
81929: LD_OWVAR 2
81933: PUSH
81934: EMPTY
81935: LIST
81936: LIST
81937: PUSH
81938: LD_INT 30
81940: PUSH
81941: LD_INT 3
81943: PUSH
81944: EMPTY
81945: LIST
81946: LIST
81947: PUSH
81948: EMPTY
81949: LIST
81950: LIST
81951: PPUSH
81952: CALL_OW 69
81956: ST_TO_ADDR
// if not tmp then
81957: LD_VAR 0 1
81961: NOT
81962: IFFALSE 81966
// exit ;
81964: GO 81992
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
81966: LD_VAR 0 1
81970: PUSH
81971: LD_INT 1
81973: PPUSH
81974: LD_VAR 0 1
81978: PPUSH
81979: CALL_OW 12
81983: ARRAY
81984: PPUSH
81985: LD_INT 1
81987: PPUSH
81988: CALL_OW 234
// end ;
81992: PPOPN 1
81994: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
81995: LD_EXP 64
81999: PUSH
82000: LD_EXP 112
82004: AND
82005: IFFALSE 82117
82007: GO 82009
82009: DISABLE
82010: LD_INT 0
82012: PPUSH
82013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
82014: LD_ADDR_VAR 0 2
82018: PUSH
82019: LD_INT 22
82021: PUSH
82022: LD_OWVAR 2
82026: PUSH
82027: EMPTY
82028: LIST
82029: LIST
82030: PUSH
82031: LD_INT 2
82033: PUSH
82034: LD_INT 30
82036: PUSH
82037: LD_INT 27
82039: PUSH
82040: EMPTY
82041: LIST
82042: LIST
82043: PUSH
82044: LD_INT 30
82046: PUSH
82047: LD_INT 26
82049: PUSH
82050: EMPTY
82051: LIST
82052: LIST
82053: PUSH
82054: LD_INT 30
82056: PUSH
82057: LD_INT 28
82059: PUSH
82060: EMPTY
82061: LIST
82062: LIST
82063: PUSH
82064: EMPTY
82065: LIST
82066: LIST
82067: LIST
82068: LIST
82069: PUSH
82070: EMPTY
82071: LIST
82072: LIST
82073: PPUSH
82074: CALL_OW 69
82078: ST_TO_ADDR
// if not tmp then
82079: LD_VAR 0 2
82083: NOT
82084: IFFALSE 82088
// exit ;
82086: GO 82117
// for i in tmp do
82088: LD_ADDR_VAR 0 1
82092: PUSH
82093: LD_VAR 0 2
82097: PUSH
82098: FOR_IN
82099: IFFALSE 82115
// SetLives ( i , 1 ) ;
82101: LD_VAR 0 1
82105: PPUSH
82106: LD_INT 1
82108: PPUSH
82109: CALL_OW 234
82113: GO 82098
82115: POP
82116: POP
// end ;
82117: PPOPN 2
82119: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
82120: LD_EXP 64
82124: PUSH
82125: LD_EXP 113
82129: AND
82130: IFFALSE 82417
82132: GO 82134
82134: DISABLE
82135: LD_INT 0
82137: PPUSH
82138: PPUSH
82139: PPUSH
// begin i := rand ( 1 , 7 ) ;
82140: LD_ADDR_VAR 0 1
82144: PUSH
82145: LD_INT 1
82147: PPUSH
82148: LD_INT 7
82150: PPUSH
82151: CALL_OW 12
82155: ST_TO_ADDR
// case i of 1 :
82156: LD_VAR 0 1
82160: PUSH
82161: LD_INT 1
82163: DOUBLE
82164: EQUAL
82165: IFTRUE 82169
82167: GO 82179
82169: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
82170: LD_STRING earthquake(getX(game), 0, 32)
82172: PPUSH
82173: CALL_OW 559
82177: GO 82417
82179: LD_INT 2
82181: DOUBLE
82182: EQUAL
82183: IFTRUE 82187
82185: GO 82201
82187: POP
// begin ToLua ( displayStucuk(); ) ;
82188: LD_STRING displayStucuk();
82190: PPUSH
82191: CALL_OW 559
// ResetFog ;
82195: CALL_OW 335
// end ; 3 :
82199: GO 82417
82201: LD_INT 3
82203: DOUBLE
82204: EQUAL
82205: IFTRUE 82209
82207: GO 82313
82209: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82210: LD_ADDR_VAR 0 2
82214: PUSH
82215: LD_INT 22
82217: PUSH
82218: LD_OWVAR 2
82222: PUSH
82223: EMPTY
82224: LIST
82225: LIST
82226: PUSH
82227: LD_INT 25
82229: PUSH
82230: LD_INT 1
82232: PUSH
82233: EMPTY
82234: LIST
82235: LIST
82236: PUSH
82237: EMPTY
82238: LIST
82239: LIST
82240: PPUSH
82241: CALL_OW 69
82245: ST_TO_ADDR
// if not tmp then
82246: LD_VAR 0 2
82250: NOT
82251: IFFALSE 82255
// exit ;
82253: GO 82417
// un := tmp [ rand ( 1 , tmp ) ] ;
82255: LD_ADDR_VAR 0 3
82259: PUSH
82260: LD_VAR 0 2
82264: PUSH
82265: LD_INT 1
82267: PPUSH
82268: LD_VAR 0 2
82272: PPUSH
82273: CALL_OW 12
82277: ARRAY
82278: ST_TO_ADDR
// if Crawls ( un ) then
82279: LD_VAR 0 3
82283: PPUSH
82284: CALL_OW 318
82288: IFFALSE 82299
// ComWalk ( un ) ;
82290: LD_VAR 0 3
82294: PPUSH
82295: CALL_OW 138
// SetClass ( un , class_mortar ) ;
82299: LD_VAR 0 3
82303: PPUSH
82304: LD_INT 8
82306: PPUSH
82307: CALL_OW 336
// end ; 4 :
82311: GO 82417
82313: LD_INT 4
82315: DOUBLE
82316: EQUAL
82317: IFTRUE 82321
82319: GO 82395
82321: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
82322: LD_ADDR_VAR 0 2
82326: PUSH
82327: LD_INT 22
82329: PUSH
82330: LD_OWVAR 2
82334: PUSH
82335: EMPTY
82336: LIST
82337: LIST
82338: PUSH
82339: LD_INT 30
82341: PUSH
82342: LD_INT 29
82344: PUSH
82345: EMPTY
82346: LIST
82347: LIST
82348: PUSH
82349: EMPTY
82350: LIST
82351: LIST
82352: PPUSH
82353: CALL_OW 69
82357: ST_TO_ADDR
// if not tmp then
82358: LD_VAR 0 2
82362: NOT
82363: IFFALSE 82367
// exit ;
82365: GO 82417
// CenterNowOnUnits ( tmp [ 1 ] ) ;
82367: LD_VAR 0 2
82371: PUSH
82372: LD_INT 1
82374: ARRAY
82375: PPUSH
82376: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
82380: LD_VAR 0 2
82384: PUSH
82385: LD_INT 1
82387: ARRAY
82388: PPUSH
82389: CALL_OW 65
// end ; 5 .. 7 :
82393: GO 82417
82395: LD_INT 5
82397: DOUBLE
82398: GREATEREQUAL
82399: IFFALSE 82407
82401: LD_INT 7
82403: DOUBLE
82404: LESSEQUAL
82405: IFTRUE 82409
82407: GO 82416
82409: POP
// StreamSibBomb ; end ;
82410: CALL 78654 0 0
82414: GO 82417
82416: POP
// end ;
82417: PPOPN 3
82419: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
82420: LD_EXP 64
82424: PUSH
82425: LD_EXP 114
82429: AND
82430: IFFALSE 82586
82432: GO 82434
82434: DISABLE
82435: LD_INT 0
82437: PPUSH
82438: PPUSH
82439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
82440: LD_ADDR_VAR 0 2
82444: PUSH
82445: LD_INT 81
82447: PUSH
82448: LD_OWVAR 2
82452: PUSH
82453: EMPTY
82454: LIST
82455: LIST
82456: PUSH
82457: LD_INT 2
82459: PUSH
82460: LD_INT 21
82462: PUSH
82463: LD_INT 1
82465: PUSH
82466: EMPTY
82467: LIST
82468: LIST
82469: PUSH
82470: LD_INT 21
82472: PUSH
82473: LD_INT 2
82475: PUSH
82476: EMPTY
82477: LIST
82478: LIST
82479: PUSH
82480: EMPTY
82481: LIST
82482: LIST
82483: LIST
82484: PUSH
82485: EMPTY
82486: LIST
82487: LIST
82488: PPUSH
82489: CALL_OW 69
82493: ST_TO_ADDR
// if not tmp then
82494: LD_VAR 0 2
82498: NOT
82499: IFFALSE 82503
// exit ;
82501: GO 82586
// p := 0 ;
82503: LD_ADDR_VAR 0 3
82507: PUSH
82508: LD_INT 0
82510: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82511: LD_INT 35
82513: PPUSH
82514: CALL_OW 67
// p := p + 1 ;
82518: LD_ADDR_VAR 0 3
82522: PUSH
82523: LD_VAR 0 3
82527: PUSH
82528: LD_INT 1
82530: PLUS
82531: ST_TO_ADDR
// for i in tmp do
82532: LD_ADDR_VAR 0 1
82536: PUSH
82537: LD_VAR 0 2
82541: PUSH
82542: FOR_IN
82543: IFFALSE 82574
// if GetLives ( i ) < 1000 then
82545: LD_VAR 0 1
82549: PPUSH
82550: CALL_OW 256
82554: PUSH
82555: LD_INT 1000
82557: LESS
82558: IFFALSE 82572
// SetLives ( i , 1000 ) ;
82560: LD_VAR 0 1
82564: PPUSH
82565: LD_INT 1000
82567: PPUSH
82568: CALL_OW 234
82572: GO 82542
82574: POP
82575: POP
// until p > 20 ;
82576: LD_VAR 0 3
82580: PUSH
82581: LD_INT 20
82583: GREATER
82584: IFFALSE 82511
// end ;
82586: PPOPN 3
82588: END
// every 0 0$1 trigger StreamModeActive and sTime do
82589: LD_EXP 64
82593: PUSH
82594: LD_EXP 115
82598: AND
82599: IFFALSE 82634
82601: GO 82603
82603: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
82604: LD_INT 28
82606: PPUSH
82607: LD_OWVAR 2
82611: PPUSH
82612: LD_INT 2
82614: PPUSH
82615: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
82619: LD_INT 30
82621: PPUSH
82622: LD_OWVAR 2
82626: PPUSH
82627: LD_INT 2
82629: PPUSH
82630: CALL_OW 322
// end ;
82634: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
82635: LD_EXP 64
82639: PUSH
82640: LD_EXP 116
82644: AND
82645: IFFALSE 82766
82647: GO 82649
82649: DISABLE
82650: LD_INT 0
82652: PPUSH
82653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82654: LD_ADDR_VAR 0 2
82658: PUSH
82659: LD_INT 22
82661: PUSH
82662: LD_OWVAR 2
82666: PUSH
82667: EMPTY
82668: LIST
82669: LIST
82670: PUSH
82671: LD_INT 21
82673: PUSH
82674: LD_INT 1
82676: PUSH
82677: EMPTY
82678: LIST
82679: LIST
82680: PUSH
82681: LD_INT 3
82683: PUSH
82684: LD_INT 23
82686: PUSH
82687: LD_INT 0
82689: PUSH
82690: EMPTY
82691: LIST
82692: LIST
82693: PUSH
82694: EMPTY
82695: LIST
82696: LIST
82697: PUSH
82698: EMPTY
82699: LIST
82700: LIST
82701: LIST
82702: PPUSH
82703: CALL_OW 69
82707: ST_TO_ADDR
// if not tmp then
82708: LD_VAR 0 2
82712: NOT
82713: IFFALSE 82717
// exit ;
82715: GO 82766
// for i in tmp do
82717: LD_ADDR_VAR 0 1
82721: PUSH
82722: LD_VAR 0 2
82726: PUSH
82727: FOR_IN
82728: IFFALSE 82764
// begin if Crawls ( i ) then
82730: LD_VAR 0 1
82734: PPUSH
82735: CALL_OW 318
82739: IFFALSE 82750
// ComWalk ( i ) ;
82741: LD_VAR 0 1
82745: PPUSH
82746: CALL_OW 138
// SetClass ( i , 2 ) ;
82750: LD_VAR 0 1
82754: PPUSH
82755: LD_INT 2
82757: PPUSH
82758: CALL_OW 336
// end ;
82762: GO 82727
82764: POP
82765: POP
// end ;
82766: PPOPN 2
82768: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
82769: LD_EXP 64
82773: PUSH
82774: LD_EXP 117
82778: AND
82779: IFFALSE 83067
82781: GO 82783
82783: DISABLE
82784: LD_INT 0
82786: PPUSH
82787: PPUSH
82788: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
82789: LD_OWVAR 2
82793: PPUSH
82794: LD_INT 9
82796: PPUSH
82797: LD_INT 1
82799: PPUSH
82800: LD_INT 1
82802: PPUSH
82803: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
82807: LD_INT 9
82809: PPUSH
82810: LD_OWVAR 2
82814: PPUSH
82815: CALL_OW 343
// uc_side := 9 ;
82819: LD_ADDR_OWVAR 20
82823: PUSH
82824: LD_INT 9
82826: ST_TO_ADDR
// uc_nation := 2 ;
82827: LD_ADDR_OWVAR 21
82831: PUSH
82832: LD_INT 2
82834: ST_TO_ADDR
// hc_name := Dark Warrior ;
82835: LD_ADDR_OWVAR 26
82839: PUSH
82840: LD_STRING Dark Warrior
82842: ST_TO_ADDR
// hc_gallery :=  ;
82843: LD_ADDR_OWVAR 33
82847: PUSH
82848: LD_STRING 
82850: ST_TO_ADDR
// hc_noskilllimit := true ;
82851: LD_ADDR_OWVAR 76
82855: PUSH
82856: LD_INT 1
82858: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
82859: LD_ADDR_OWVAR 31
82863: PUSH
82864: LD_INT 30
82866: PUSH
82867: LD_INT 30
82869: PUSH
82870: LD_INT 30
82872: PUSH
82873: LD_INT 30
82875: PUSH
82876: EMPTY
82877: LIST
82878: LIST
82879: LIST
82880: LIST
82881: ST_TO_ADDR
// un := CreateHuman ;
82882: LD_ADDR_VAR 0 3
82886: PUSH
82887: CALL_OW 44
82891: ST_TO_ADDR
// hc_noskilllimit := false ;
82892: LD_ADDR_OWVAR 76
82896: PUSH
82897: LD_INT 0
82899: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82900: LD_VAR 0 3
82904: PPUSH
82905: LD_INT 1
82907: PPUSH
82908: CALL_OW 51
// ToLua ( playRanger() ) ;
82912: LD_STRING playRanger()
82914: PPUSH
82915: CALL_OW 559
// p := 0 ;
82919: LD_ADDR_VAR 0 2
82923: PUSH
82924: LD_INT 0
82926: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82927: LD_INT 35
82929: PPUSH
82930: CALL_OW 67
// p := p + 1 ;
82934: LD_ADDR_VAR 0 2
82938: PUSH
82939: LD_VAR 0 2
82943: PUSH
82944: LD_INT 1
82946: PLUS
82947: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
82948: LD_VAR 0 3
82952: PPUSH
82953: CALL_OW 256
82957: PUSH
82958: LD_INT 1000
82960: LESS
82961: IFFALSE 82975
// SetLives ( un , 1000 ) ;
82963: LD_VAR 0 3
82967: PPUSH
82968: LD_INT 1000
82970: PPUSH
82971: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
82975: LD_VAR 0 3
82979: PPUSH
82980: LD_INT 81
82982: PUSH
82983: LD_OWVAR 2
82987: PUSH
82988: EMPTY
82989: LIST
82990: LIST
82991: PUSH
82992: LD_INT 91
82994: PUSH
82995: LD_VAR 0 3
82999: PUSH
83000: LD_INT 30
83002: PUSH
83003: EMPTY
83004: LIST
83005: LIST
83006: LIST
83007: PUSH
83008: EMPTY
83009: LIST
83010: LIST
83011: PPUSH
83012: CALL_OW 69
83016: PPUSH
83017: LD_VAR 0 3
83021: PPUSH
83022: CALL_OW 74
83026: PPUSH
83027: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
83031: LD_VAR 0 2
83035: PUSH
83036: LD_INT 80
83038: GREATER
83039: PUSH
83040: LD_VAR 0 3
83044: PPUSH
83045: CALL_OW 301
83049: OR
83050: IFFALSE 82927
// if un then
83052: LD_VAR 0 3
83056: IFFALSE 83067
// RemoveUnit ( un ) ;
83058: LD_VAR 0 3
83062: PPUSH
83063: CALL_OW 64
// end ;
83067: PPOPN 3
83069: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
83070: LD_EXP 118
83074: IFFALSE 83190
83076: GO 83078
83078: DISABLE
83079: LD_INT 0
83081: PPUSH
83082: PPUSH
83083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
83084: LD_ADDR_VAR 0 2
83088: PUSH
83089: LD_INT 81
83091: PUSH
83092: LD_OWVAR 2
83096: PUSH
83097: EMPTY
83098: LIST
83099: LIST
83100: PUSH
83101: LD_INT 21
83103: PUSH
83104: LD_INT 1
83106: PUSH
83107: EMPTY
83108: LIST
83109: LIST
83110: PUSH
83111: EMPTY
83112: LIST
83113: LIST
83114: PPUSH
83115: CALL_OW 69
83119: ST_TO_ADDR
// ToLua ( playComputer() ) ;
83120: LD_STRING playComputer()
83122: PPUSH
83123: CALL_OW 559
// if not tmp then
83127: LD_VAR 0 2
83131: NOT
83132: IFFALSE 83136
// exit ;
83134: GO 83190
// for i in tmp do
83136: LD_ADDR_VAR 0 1
83140: PUSH
83141: LD_VAR 0 2
83145: PUSH
83146: FOR_IN
83147: IFFALSE 83188
// for j := 1 to 4 do
83149: LD_ADDR_VAR 0 3
83153: PUSH
83154: DOUBLE
83155: LD_INT 1
83157: DEC
83158: ST_TO_ADDR
83159: LD_INT 4
83161: PUSH
83162: FOR_TO
83163: IFFALSE 83184
// SetSkill ( i , j , 10 ) ;
83165: LD_VAR 0 1
83169: PPUSH
83170: LD_VAR 0 3
83174: PPUSH
83175: LD_INT 10
83177: PPUSH
83178: CALL_OW 237
83182: GO 83162
83184: POP
83185: POP
83186: GO 83146
83188: POP
83189: POP
// end ;
83190: PPOPN 3
83192: END
// every 0 0$1 trigger s30 do var i , tmp ;
83193: LD_EXP 119
83197: IFFALSE 83266
83199: GO 83201
83201: DISABLE
83202: LD_INT 0
83204: PPUSH
83205: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83206: LD_ADDR_VAR 0 2
83210: PUSH
83211: LD_INT 22
83213: PUSH
83214: LD_OWVAR 2
83218: PUSH
83219: EMPTY
83220: LIST
83221: LIST
83222: PPUSH
83223: CALL_OW 69
83227: ST_TO_ADDR
// if not tmp then
83228: LD_VAR 0 2
83232: NOT
83233: IFFALSE 83237
// exit ;
83235: GO 83266
// for i in tmp do
83237: LD_ADDR_VAR 0 1
83241: PUSH
83242: LD_VAR 0 2
83246: PUSH
83247: FOR_IN
83248: IFFALSE 83264
// SetLives ( i , 300 ) ;
83250: LD_VAR 0 1
83254: PPUSH
83255: LD_INT 300
83257: PPUSH
83258: CALL_OW 234
83262: GO 83247
83264: POP
83265: POP
// end ;
83266: PPOPN 2
83268: END
// every 0 0$1 trigger s60 do var i , tmp ;
83269: LD_EXP 120
83273: IFFALSE 83342
83275: GO 83277
83277: DISABLE
83278: LD_INT 0
83280: PPUSH
83281: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83282: LD_ADDR_VAR 0 2
83286: PUSH
83287: LD_INT 22
83289: PUSH
83290: LD_OWVAR 2
83294: PUSH
83295: EMPTY
83296: LIST
83297: LIST
83298: PPUSH
83299: CALL_OW 69
83303: ST_TO_ADDR
// if not tmp then
83304: LD_VAR 0 2
83308: NOT
83309: IFFALSE 83313
// exit ;
83311: GO 83342
// for i in tmp do
83313: LD_ADDR_VAR 0 1
83317: PUSH
83318: LD_VAR 0 2
83322: PUSH
83323: FOR_IN
83324: IFFALSE 83340
// SetLives ( i , 600 ) ;
83326: LD_VAR 0 1
83330: PPUSH
83331: LD_INT 600
83333: PPUSH
83334: CALL_OW 234
83338: GO 83323
83340: POP
83341: POP
// end ;
83342: PPOPN 2
83344: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
83345: LD_INT 0
83347: PPUSH
// case cmd of 301 :
83348: LD_VAR 0 1
83352: PUSH
83353: LD_INT 301
83355: DOUBLE
83356: EQUAL
83357: IFTRUE 83361
83359: GO 83393
83361: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
83362: LD_VAR 0 6
83366: PPUSH
83367: LD_VAR 0 7
83371: PPUSH
83372: LD_VAR 0 8
83376: PPUSH
83377: LD_VAR 0 4
83381: PPUSH
83382: LD_VAR 0 5
83386: PPUSH
83387: CALL 84594 0 5
83391: GO 83514
83393: LD_INT 302
83395: DOUBLE
83396: EQUAL
83397: IFTRUE 83401
83399: GO 83438
83401: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
83402: LD_VAR 0 6
83406: PPUSH
83407: LD_VAR 0 7
83411: PPUSH
83412: LD_VAR 0 8
83416: PPUSH
83417: LD_VAR 0 9
83421: PPUSH
83422: LD_VAR 0 4
83426: PPUSH
83427: LD_VAR 0 5
83431: PPUSH
83432: CALL 84685 0 6
83436: GO 83514
83438: LD_INT 303
83440: DOUBLE
83441: EQUAL
83442: IFTRUE 83446
83444: GO 83483
83446: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
83447: LD_VAR 0 6
83451: PPUSH
83452: LD_VAR 0 7
83456: PPUSH
83457: LD_VAR 0 8
83461: PPUSH
83462: LD_VAR 0 9
83466: PPUSH
83467: LD_VAR 0 4
83471: PPUSH
83472: LD_VAR 0 5
83476: PPUSH
83477: CALL 83519 0 6
83481: GO 83514
83483: LD_INT 304
83485: DOUBLE
83486: EQUAL
83487: IFTRUE 83491
83489: GO 83513
83491: POP
// hHackTeleport ( unit , x , y ) ; end ;
83492: LD_VAR 0 2
83496: PPUSH
83497: LD_VAR 0 4
83501: PPUSH
83502: LD_VAR 0 5
83506: PPUSH
83507: CALL 85278 0 3
83511: GO 83514
83513: POP
// end ;
83514: LD_VAR 0 12
83518: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
83519: LD_INT 0
83521: PPUSH
83522: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
83523: LD_VAR 0 1
83527: PUSH
83528: LD_INT 1
83530: LESS
83531: PUSH
83532: LD_VAR 0 1
83536: PUSH
83537: LD_INT 3
83539: GREATER
83540: OR
83541: PUSH
83542: LD_VAR 0 5
83546: PPUSH
83547: LD_VAR 0 6
83551: PPUSH
83552: CALL_OW 428
83556: OR
83557: IFFALSE 83561
// exit ;
83559: GO 84281
// uc_side := your_side ;
83561: LD_ADDR_OWVAR 20
83565: PUSH
83566: LD_OWVAR 2
83570: ST_TO_ADDR
// uc_nation := nation ;
83571: LD_ADDR_OWVAR 21
83575: PUSH
83576: LD_VAR 0 1
83580: ST_TO_ADDR
// bc_level = 1 ;
83581: LD_ADDR_OWVAR 43
83585: PUSH
83586: LD_INT 1
83588: ST_TO_ADDR
// case btype of 1 :
83589: LD_VAR 0 2
83593: PUSH
83594: LD_INT 1
83596: DOUBLE
83597: EQUAL
83598: IFTRUE 83602
83600: GO 83613
83602: POP
// bc_type := b_depot ; 2 :
83603: LD_ADDR_OWVAR 42
83607: PUSH
83608: LD_INT 0
83610: ST_TO_ADDR
83611: GO 84225
83613: LD_INT 2
83615: DOUBLE
83616: EQUAL
83617: IFTRUE 83621
83619: GO 83632
83621: POP
// bc_type := b_warehouse ; 3 :
83622: LD_ADDR_OWVAR 42
83626: PUSH
83627: LD_INT 1
83629: ST_TO_ADDR
83630: GO 84225
83632: LD_INT 3
83634: DOUBLE
83635: EQUAL
83636: IFTRUE 83640
83638: GO 83651
83640: POP
// bc_type := b_lab ; 4 .. 9 :
83641: LD_ADDR_OWVAR 42
83645: PUSH
83646: LD_INT 6
83648: ST_TO_ADDR
83649: GO 84225
83651: LD_INT 4
83653: DOUBLE
83654: GREATEREQUAL
83655: IFFALSE 83663
83657: LD_INT 9
83659: DOUBLE
83660: LESSEQUAL
83661: IFTRUE 83665
83663: GO 83717
83665: POP
// begin bc_type := b_lab_half ;
83666: LD_ADDR_OWVAR 42
83670: PUSH
83671: LD_INT 7
83673: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
83674: LD_ADDR_OWVAR 44
83678: PUSH
83679: LD_INT 10
83681: PUSH
83682: LD_INT 11
83684: PUSH
83685: LD_INT 12
83687: PUSH
83688: LD_INT 15
83690: PUSH
83691: LD_INT 14
83693: PUSH
83694: LD_INT 13
83696: PUSH
83697: EMPTY
83698: LIST
83699: LIST
83700: LIST
83701: LIST
83702: LIST
83703: LIST
83704: PUSH
83705: LD_VAR 0 2
83709: PUSH
83710: LD_INT 3
83712: MINUS
83713: ARRAY
83714: ST_TO_ADDR
// end ; 10 .. 13 :
83715: GO 84225
83717: LD_INT 10
83719: DOUBLE
83720: GREATEREQUAL
83721: IFFALSE 83729
83723: LD_INT 13
83725: DOUBLE
83726: LESSEQUAL
83727: IFTRUE 83731
83729: GO 83808
83731: POP
// begin bc_type := b_lab_full ;
83732: LD_ADDR_OWVAR 42
83736: PUSH
83737: LD_INT 8
83739: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
83740: LD_ADDR_OWVAR 44
83744: PUSH
83745: LD_INT 10
83747: PUSH
83748: LD_INT 12
83750: PUSH
83751: LD_INT 14
83753: PUSH
83754: LD_INT 13
83756: PUSH
83757: EMPTY
83758: LIST
83759: LIST
83760: LIST
83761: LIST
83762: PUSH
83763: LD_VAR 0 2
83767: PUSH
83768: LD_INT 9
83770: MINUS
83771: ARRAY
83772: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
83773: LD_ADDR_OWVAR 45
83777: PUSH
83778: LD_INT 11
83780: PUSH
83781: LD_INT 15
83783: PUSH
83784: LD_INT 12
83786: PUSH
83787: LD_INT 15
83789: PUSH
83790: EMPTY
83791: LIST
83792: LIST
83793: LIST
83794: LIST
83795: PUSH
83796: LD_VAR 0 2
83800: PUSH
83801: LD_INT 9
83803: MINUS
83804: ARRAY
83805: ST_TO_ADDR
// end ; 14 :
83806: GO 84225
83808: LD_INT 14
83810: DOUBLE
83811: EQUAL
83812: IFTRUE 83816
83814: GO 83827
83816: POP
// bc_type := b_workshop ; 15 :
83817: LD_ADDR_OWVAR 42
83821: PUSH
83822: LD_INT 2
83824: ST_TO_ADDR
83825: GO 84225
83827: LD_INT 15
83829: DOUBLE
83830: EQUAL
83831: IFTRUE 83835
83833: GO 83846
83835: POP
// bc_type := b_factory ; 16 :
83836: LD_ADDR_OWVAR 42
83840: PUSH
83841: LD_INT 3
83843: ST_TO_ADDR
83844: GO 84225
83846: LD_INT 16
83848: DOUBLE
83849: EQUAL
83850: IFTRUE 83854
83852: GO 83865
83854: POP
// bc_type := b_ext_gun ; 17 :
83855: LD_ADDR_OWVAR 42
83859: PUSH
83860: LD_INT 17
83862: ST_TO_ADDR
83863: GO 84225
83865: LD_INT 17
83867: DOUBLE
83868: EQUAL
83869: IFTRUE 83873
83871: GO 83901
83873: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
83874: LD_ADDR_OWVAR 42
83878: PUSH
83879: LD_INT 19
83881: PUSH
83882: LD_INT 23
83884: PUSH
83885: LD_INT 19
83887: PUSH
83888: EMPTY
83889: LIST
83890: LIST
83891: LIST
83892: PUSH
83893: LD_VAR 0 1
83897: ARRAY
83898: ST_TO_ADDR
83899: GO 84225
83901: LD_INT 18
83903: DOUBLE
83904: EQUAL
83905: IFTRUE 83909
83907: GO 83920
83909: POP
// bc_type := b_ext_radar ; 19 :
83910: LD_ADDR_OWVAR 42
83914: PUSH
83915: LD_INT 20
83917: ST_TO_ADDR
83918: GO 84225
83920: LD_INT 19
83922: DOUBLE
83923: EQUAL
83924: IFTRUE 83928
83926: GO 83939
83928: POP
// bc_type := b_ext_radio ; 20 :
83929: LD_ADDR_OWVAR 42
83933: PUSH
83934: LD_INT 22
83936: ST_TO_ADDR
83937: GO 84225
83939: LD_INT 20
83941: DOUBLE
83942: EQUAL
83943: IFTRUE 83947
83945: GO 83958
83947: POP
// bc_type := b_ext_siberium ; 21 :
83948: LD_ADDR_OWVAR 42
83952: PUSH
83953: LD_INT 21
83955: ST_TO_ADDR
83956: GO 84225
83958: LD_INT 21
83960: DOUBLE
83961: EQUAL
83962: IFTRUE 83966
83964: GO 83977
83966: POP
// bc_type := b_ext_computer ; 22 :
83967: LD_ADDR_OWVAR 42
83971: PUSH
83972: LD_INT 24
83974: ST_TO_ADDR
83975: GO 84225
83977: LD_INT 22
83979: DOUBLE
83980: EQUAL
83981: IFTRUE 83985
83983: GO 83996
83985: POP
// bc_type := b_ext_track ; 23 :
83986: LD_ADDR_OWVAR 42
83990: PUSH
83991: LD_INT 16
83993: ST_TO_ADDR
83994: GO 84225
83996: LD_INT 23
83998: DOUBLE
83999: EQUAL
84000: IFTRUE 84004
84002: GO 84015
84004: POP
// bc_type := b_ext_laser ; 24 :
84005: LD_ADDR_OWVAR 42
84009: PUSH
84010: LD_INT 25
84012: ST_TO_ADDR
84013: GO 84225
84015: LD_INT 24
84017: DOUBLE
84018: EQUAL
84019: IFTRUE 84023
84021: GO 84034
84023: POP
// bc_type := b_control_tower ; 25 :
84024: LD_ADDR_OWVAR 42
84028: PUSH
84029: LD_INT 36
84031: ST_TO_ADDR
84032: GO 84225
84034: LD_INT 25
84036: DOUBLE
84037: EQUAL
84038: IFTRUE 84042
84040: GO 84053
84042: POP
// bc_type := b_breastwork ; 26 :
84043: LD_ADDR_OWVAR 42
84047: PUSH
84048: LD_INT 31
84050: ST_TO_ADDR
84051: GO 84225
84053: LD_INT 26
84055: DOUBLE
84056: EQUAL
84057: IFTRUE 84061
84059: GO 84072
84061: POP
// bc_type := b_bunker ; 27 :
84062: LD_ADDR_OWVAR 42
84066: PUSH
84067: LD_INT 32
84069: ST_TO_ADDR
84070: GO 84225
84072: LD_INT 27
84074: DOUBLE
84075: EQUAL
84076: IFTRUE 84080
84078: GO 84091
84080: POP
// bc_type := b_turret ; 28 :
84081: LD_ADDR_OWVAR 42
84085: PUSH
84086: LD_INT 33
84088: ST_TO_ADDR
84089: GO 84225
84091: LD_INT 28
84093: DOUBLE
84094: EQUAL
84095: IFTRUE 84099
84097: GO 84110
84099: POP
// bc_type := b_armoury ; 29 :
84100: LD_ADDR_OWVAR 42
84104: PUSH
84105: LD_INT 4
84107: ST_TO_ADDR
84108: GO 84225
84110: LD_INT 29
84112: DOUBLE
84113: EQUAL
84114: IFTRUE 84118
84116: GO 84129
84118: POP
// bc_type := b_barracks ; 30 :
84119: LD_ADDR_OWVAR 42
84123: PUSH
84124: LD_INT 5
84126: ST_TO_ADDR
84127: GO 84225
84129: LD_INT 30
84131: DOUBLE
84132: EQUAL
84133: IFTRUE 84137
84135: GO 84148
84137: POP
// bc_type := b_solar_power ; 31 :
84138: LD_ADDR_OWVAR 42
84142: PUSH
84143: LD_INT 27
84145: ST_TO_ADDR
84146: GO 84225
84148: LD_INT 31
84150: DOUBLE
84151: EQUAL
84152: IFTRUE 84156
84154: GO 84167
84156: POP
// bc_type := b_oil_power ; 32 :
84157: LD_ADDR_OWVAR 42
84161: PUSH
84162: LD_INT 26
84164: ST_TO_ADDR
84165: GO 84225
84167: LD_INT 32
84169: DOUBLE
84170: EQUAL
84171: IFTRUE 84175
84173: GO 84186
84175: POP
// bc_type := b_siberite_power ; 33 :
84176: LD_ADDR_OWVAR 42
84180: PUSH
84181: LD_INT 28
84183: ST_TO_ADDR
84184: GO 84225
84186: LD_INT 33
84188: DOUBLE
84189: EQUAL
84190: IFTRUE 84194
84192: GO 84205
84194: POP
// bc_type := b_oil_mine ; 34 :
84195: LD_ADDR_OWVAR 42
84199: PUSH
84200: LD_INT 29
84202: ST_TO_ADDR
84203: GO 84225
84205: LD_INT 34
84207: DOUBLE
84208: EQUAL
84209: IFTRUE 84213
84211: GO 84224
84213: POP
// bc_type := b_siberite_mine ; end ;
84214: LD_ADDR_OWVAR 42
84218: PUSH
84219: LD_INT 30
84221: ST_TO_ADDR
84222: GO 84225
84224: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
84225: LD_ADDR_VAR 0 8
84229: PUSH
84230: LD_VAR 0 5
84234: PPUSH
84235: LD_VAR 0 6
84239: PPUSH
84240: LD_VAR 0 3
84244: PPUSH
84245: CALL_OW 47
84249: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
84250: LD_OWVAR 42
84254: PUSH
84255: LD_INT 32
84257: PUSH
84258: LD_INT 33
84260: PUSH
84261: EMPTY
84262: LIST
84263: LIST
84264: IN
84265: IFFALSE 84281
// PlaceWeaponTurret ( b , weapon ) ;
84267: LD_VAR 0 8
84271: PPUSH
84272: LD_VAR 0 4
84276: PPUSH
84277: CALL_OW 431
// end ;
84281: LD_VAR 0 7
84285: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
84286: LD_INT 0
84288: PPUSH
84289: PPUSH
84290: PPUSH
84291: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
84292: LD_ADDR_VAR 0 4
84296: PUSH
84297: LD_INT 22
84299: PUSH
84300: LD_OWVAR 2
84304: PUSH
84305: EMPTY
84306: LIST
84307: LIST
84308: PUSH
84309: LD_INT 2
84311: PUSH
84312: LD_INT 30
84314: PUSH
84315: LD_INT 0
84317: PUSH
84318: EMPTY
84319: LIST
84320: LIST
84321: PUSH
84322: LD_INT 30
84324: PUSH
84325: LD_INT 1
84327: PUSH
84328: EMPTY
84329: LIST
84330: LIST
84331: PUSH
84332: EMPTY
84333: LIST
84334: LIST
84335: LIST
84336: PUSH
84337: EMPTY
84338: LIST
84339: LIST
84340: PPUSH
84341: CALL_OW 69
84345: ST_TO_ADDR
// if not tmp then
84346: LD_VAR 0 4
84350: NOT
84351: IFFALSE 84355
// exit ;
84353: GO 84414
// for i in tmp do
84355: LD_ADDR_VAR 0 2
84359: PUSH
84360: LD_VAR 0 4
84364: PUSH
84365: FOR_IN
84366: IFFALSE 84412
// for j = 1 to 3 do
84368: LD_ADDR_VAR 0 3
84372: PUSH
84373: DOUBLE
84374: LD_INT 1
84376: DEC
84377: ST_TO_ADDR
84378: LD_INT 3
84380: PUSH
84381: FOR_TO
84382: IFFALSE 84408
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
84384: LD_VAR 0 2
84388: PPUSH
84389: CALL_OW 274
84393: PPUSH
84394: LD_VAR 0 3
84398: PPUSH
84399: LD_INT 99999
84401: PPUSH
84402: CALL_OW 277
84406: GO 84381
84408: POP
84409: POP
84410: GO 84365
84412: POP
84413: POP
// end ;
84414: LD_VAR 0 1
84418: RET
// export function hHackSetLevel10 ; var i , j ; begin
84419: LD_INT 0
84421: PPUSH
84422: PPUSH
84423: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84424: LD_ADDR_VAR 0 2
84428: PUSH
84429: LD_INT 21
84431: PUSH
84432: LD_INT 1
84434: PUSH
84435: EMPTY
84436: LIST
84437: LIST
84438: PPUSH
84439: CALL_OW 69
84443: PUSH
84444: FOR_IN
84445: IFFALSE 84497
// if IsSelected ( i ) then
84447: LD_VAR 0 2
84451: PPUSH
84452: CALL_OW 306
84456: IFFALSE 84495
// begin for j := 1 to 4 do
84458: LD_ADDR_VAR 0 3
84462: PUSH
84463: DOUBLE
84464: LD_INT 1
84466: DEC
84467: ST_TO_ADDR
84468: LD_INT 4
84470: PUSH
84471: FOR_TO
84472: IFFALSE 84493
// SetSkill ( i , j , 10 ) ;
84474: LD_VAR 0 2
84478: PPUSH
84479: LD_VAR 0 3
84483: PPUSH
84484: LD_INT 10
84486: PPUSH
84487: CALL_OW 237
84491: GO 84471
84493: POP
84494: POP
// end ;
84495: GO 84444
84497: POP
84498: POP
// end ;
84499: LD_VAR 0 1
84503: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
84504: LD_INT 0
84506: PPUSH
84507: PPUSH
84508: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
84509: LD_ADDR_VAR 0 2
84513: PUSH
84514: LD_INT 22
84516: PUSH
84517: LD_OWVAR 2
84521: PUSH
84522: EMPTY
84523: LIST
84524: LIST
84525: PUSH
84526: LD_INT 21
84528: PUSH
84529: LD_INT 1
84531: PUSH
84532: EMPTY
84533: LIST
84534: LIST
84535: PUSH
84536: EMPTY
84537: LIST
84538: LIST
84539: PPUSH
84540: CALL_OW 69
84544: PUSH
84545: FOR_IN
84546: IFFALSE 84587
// begin for j := 1 to 4 do
84548: LD_ADDR_VAR 0 3
84552: PUSH
84553: DOUBLE
84554: LD_INT 1
84556: DEC
84557: ST_TO_ADDR
84558: LD_INT 4
84560: PUSH
84561: FOR_TO
84562: IFFALSE 84583
// SetSkill ( i , j , 10 ) ;
84564: LD_VAR 0 2
84568: PPUSH
84569: LD_VAR 0 3
84573: PPUSH
84574: LD_INT 10
84576: PPUSH
84577: CALL_OW 237
84581: GO 84561
84583: POP
84584: POP
// end ;
84585: GO 84545
84587: POP
84588: POP
// end ;
84589: LD_VAR 0 1
84593: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
84594: LD_INT 0
84596: PPUSH
// uc_side := your_side ;
84597: LD_ADDR_OWVAR 20
84601: PUSH
84602: LD_OWVAR 2
84606: ST_TO_ADDR
// uc_nation := nation ;
84607: LD_ADDR_OWVAR 21
84611: PUSH
84612: LD_VAR 0 1
84616: ST_TO_ADDR
// InitHc ;
84617: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
84621: LD_INT 0
84623: PPUSH
84624: LD_VAR 0 2
84628: PPUSH
84629: LD_VAR 0 3
84633: PPUSH
84634: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
84638: LD_VAR 0 4
84642: PPUSH
84643: LD_VAR 0 5
84647: PPUSH
84648: CALL_OW 428
84652: PUSH
84653: LD_INT 0
84655: EQUAL
84656: IFFALSE 84680
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
84658: CALL_OW 44
84662: PPUSH
84663: LD_VAR 0 4
84667: PPUSH
84668: LD_VAR 0 5
84672: PPUSH
84673: LD_INT 1
84675: PPUSH
84676: CALL_OW 48
// end ;
84680: LD_VAR 0 6
84684: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
84685: LD_INT 0
84687: PPUSH
84688: PPUSH
// uc_side := your_side ;
84689: LD_ADDR_OWVAR 20
84693: PUSH
84694: LD_OWVAR 2
84698: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
84699: LD_VAR 0 1
84703: PUSH
84704: LD_INT 1
84706: PUSH
84707: LD_INT 2
84709: PUSH
84710: LD_INT 3
84712: PUSH
84713: LD_INT 4
84715: PUSH
84716: LD_INT 5
84718: PUSH
84719: EMPTY
84720: LIST
84721: LIST
84722: LIST
84723: LIST
84724: LIST
84725: IN
84726: IFFALSE 84738
// uc_nation := nation_american else
84728: LD_ADDR_OWVAR 21
84732: PUSH
84733: LD_INT 1
84735: ST_TO_ADDR
84736: GO 84781
// if chassis in [ 11 , 12 , 13 , 14 ] then
84738: LD_VAR 0 1
84742: PUSH
84743: LD_INT 11
84745: PUSH
84746: LD_INT 12
84748: PUSH
84749: LD_INT 13
84751: PUSH
84752: LD_INT 14
84754: PUSH
84755: EMPTY
84756: LIST
84757: LIST
84758: LIST
84759: LIST
84760: IN
84761: IFFALSE 84773
// uc_nation := nation_arabian else
84763: LD_ADDR_OWVAR 21
84767: PUSH
84768: LD_INT 2
84770: ST_TO_ADDR
84771: GO 84781
// uc_nation := nation_russian ;
84773: LD_ADDR_OWVAR 21
84777: PUSH
84778: LD_INT 3
84780: ST_TO_ADDR
// vc_chassis := chassis ;
84781: LD_ADDR_OWVAR 37
84785: PUSH
84786: LD_VAR 0 1
84790: ST_TO_ADDR
// vc_engine := engine ;
84791: LD_ADDR_OWVAR 39
84795: PUSH
84796: LD_VAR 0 2
84800: ST_TO_ADDR
// vc_control := control ;
84801: LD_ADDR_OWVAR 38
84805: PUSH
84806: LD_VAR 0 3
84810: ST_TO_ADDR
// vc_weapon := weapon ;
84811: LD_ADDR_OWVAR 40
84815: PUSH
84816: LD_VAR 0 4
84820: ST_TO_ADDR
// un := CreateVehicle ;
84821: LD_ADDR_VAR 0 8
84825: PUSH
84826: CALL_OW 45
84830: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
84831: LD_VAR 0 8
84835: PPUSH
84836: LD_INT 0
84838: PPUSH
84839: LD_INT 5
84841: PPUSH
84842: CALL_OW 12
84846: PPUSH
84847: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
84851: LD_VAR 0 8
84855: PPUSH
84856: LD_VAR 0 5
84860: PPUSH
84861: LD_VAR 0 6
84865: PPUSH
84866: LD_INT 1
84868: PPUSH
84869: CALL_OW 48
// end ;
84873: LD_VAR 0 7
84877: RET
// export hInvincible ; every 1 do
84878: GO 84880
84880: DISABLE
// hInvincible := [ ] ;
84881: LD_ADDR_EXP 121
84885: PUSH
84886: EMPTY
84887: ST_TO_ADDR
84888: END
// every 10 do var i ;
84889: GO 84891
84891: DISABLE
84892: LD_INT 0
84894: PPUSH
// begin enable ;
84895: ENABLE
// if not hInvincible then
84896: LD_EXP 121
84900: NOT
84901: IFFALSE 84905
// exit ;
84903: GO 84949
// for i in hInvincible do
84905: LD_ADDR_VAR 0 1
84909: PUSH
84910: LD_EXP 121
84914: PUSH
84915: FOR_IN
84916: IFFALSE 84947
// if GetLives ( i ) < 1000 then
84918: LD_VAR 0 1
84922: PPUSH
84923: CALL_OW 256
84927: PUSH
84928: LD_INT 1000
84930: LESS
84931: IFFALSE 84945
// SetLives ( i , 1000 ) ;
84933: LD_VAR 0 1
84937: PPUSH
84938: LD_INT 1000
84940: PPUSH
84941: CALL_OW 234
84945: GO 84915
84947: POP
84948: POP
// end ;
84949: PPOPN 1
84951: END
// export function hHackInvincible ; var i ; begin
84952: LD_INT 0
84954: PPUSH
84955: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
84956: LD_ADDR_VAR 0 2
84960: PUSH
84961: LD_INT 2
84963: PUSH
84964: LD_INT 21
84966: PUSH
84967: LD_INT 1
84969: PUSH
84970: EMPTY
84971: LIST
84972: LIST
84973: PUSH
84974: LD_INT 21
84976: PUSH
84977: LD_INT 2
84979: PUSH
84980: EMPTY
84981: LIST
84982: LIST
84983: PUSH
84984: EMPTY
84985: LIST
84986: LIST
84987: LIST
84988: PPUSH
84989: CALL_OW 69
84993: PUSH
84994: FOR_IN
84995: IFFALSE 85056
// if IsSelected ( i ) then
84997: LD_VAR 0 2
85001: PPUSH
85002: CALL_OW 306
85006: IFFALSE 85054
// begin if i in hInvincible then
85008: LD_VAR 0 2
85012: PUSH
85013: LD_EXP 121
85017: IN
85018: IFFALSE 85038
// hInvincible := hInvincible diff i else
85020: LD_ADDR_EXP 121
85024: PUSH
85025: LD_EXP 121
85029: PUSH
85030: LD_VAR 0 2
85034: DIFF
85035: ST_TO_ADDR
85036: GO 85054
// hInvincible := hInvincible union i ;
85038: LD_ADDR_EXP 121
85042: PUSH
85043: LD_EXP 121
85047: PUSH
85048: LD_VAR 0 2
85052: UNION
85053: ST_TO_ADDR
// end ;
85054: GO 84994
85056: POP
85057: POP
// end ;
85058: LD_VAR 0 1
85062: RET
// export function hHackInvisible ; var i , j ; begin
85063: LD_INT 0
85065: PPUSH
85066: PPUSH
85067: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
85068: LD_ADDR_VAR 0 2
85072: PUSH
85073: LD_INT 21
85075: PUSH
85076: LD_INT 1
85078: PUSH
85079: EMPTY
85080: LIST
85081: LIST
85082: PPUSH
85083: CALL_OW 69
85087: PUSH
85088: FOR_IN
85089: IFFALSE 85113
// if IsSelected ( i ) then
85091: LD_VAR 0 2
85095: PPUSH
85096: CALL_OW 306
85100: IFFALSE 85111
// ComForceInvisible ( i ) ;
85102: LD_VAR 0 2
85106: PPUSH
85107: CALL_OW 496
85111: GO 85088
85113: POP
85114: POP
// end ;
85115: LD_VAR 0 1
85119: RET
// export function hHackChangeYourSide ; begin
85120: LD_INT 0
85122: PPUSH
// if your_side = 8 then
85123: LD_OWVAR 2
85127: PUSH
85128: LD_INT 8
85130: EQUAL
85131: IFFALSE 85143
// your_side := 0 else
85133: LD_ADDR_OWVAR 2
85137: PUSH
85138: LD_INT 0
85140: ST_TO_ADDR
85141: GO 85157
// your_side := your_side + 1 ;
85143: LD_ADDR_OWVAR 2
85147: PUSH
85148: LD_OWVAR 2
85152: PUSH
85153: LD_INT 1
85155: PLUS
85156: ST_TO_ADDR
// end ;
85157: LD_VAR 0 1
85161: RET
// export function hHackChangeUnitSide ; var i , j ; begin
85162: LD_INT 0
85164: PPUSH
85165: PPUSH
85166: PPUSH
// for i in all_units do
85167: LD_ADDR_VAR 0 2
85171: PUSH
85172: LD_OWVAR 3
85176: PUSH
85177: FOR_IN
85178: IFFALSE 85256
// if IsSelected ( i ) then
85180: LD_VAR 0 2
85184: PPUSH
85185: CALL_OW 306
85189: IFFALSE 85254
// begin j := GetSide ( i ) ;
85191: LD_ADDR_VAR 0 3
85195: PUSH
85196: LD_VAR 0 2
85200: PPUSH
85201: CALL_OW 255
85205: ST_TO_ADDR
// if j = 8 then
85206: LD_VAR 0 3
85210: PUSH
85211: LD_INT 8
85213: EQUAL
85214: IFFALSE 85226
// j := 0 else
85216: LD_ADDR_VAR 0 3
85220: PUSH
85221: LD_INT 0
85223: ST_TO_ADDR
85224: GO 85240
// j := j + 1 ;
85226: LD_ADDR_VAR 0 3
85230: PUSH
85231: LD_VAR 0 3
85235: PUSH
85236: LD_INT 1
85238: PLUS
85239: ST_TO_ADDR
// SetSide ( i , j ) ;
85240: LD_VAR 0 2
85244: PPUSH
85245: LD_VAR 0 3
85249: PPUSH
85250: CALL_OW 235
// end ;
85254: GO 85177
85256: POP
85257: POP
// end ;
85258: LD_VAR 0 1
85262: RET
// export function hHackFog ; begin
85263: LD_INT 0
85265: PPUSH
// FogOff ( true ) ;
85266: LD_INT 1
85268: PPUSH
85269: CALL_OW 344
// end ;
85273: LD_VAR 0 1
85277: RET
// export function hHackTeleport ( unit , x , y ) ; begin
85278: LD_INT 0
85280: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
85281: LD_VAR 0 1
85285: PPUSH
85286: LD_VAR 0 2
85290: PPUSH
85291: LD_VAR 0 3
85295: PPUSH
85296: LD_INT 1
85298: PPUSH
85299: LD_INT 1
85301: PPUSH
85302: CALL_OW 483
// CenterOnXY ( x , y ) ;
85306: LD_VAR 0 2
85310: PPUSH
85311: LD_VAR 0 3
85315: PPUSH
85316: CALL_OW 84
// end ;
85320: LD_VAR 0 4
85324: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
85325: LD_INT 0
85327: PPUSH
85328: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
85329: LD_VAR 0 1
85333: NOT
85334: PUSH
85335: LD_VAR 0 2
85339: PPUSH
85340: LD_VAR 0 3
85344: PPUSH
85345: CALL_OW 488
85349: NOT
85350: OR
85351: PUSH
85352: LD_VAR 0 1
85356: PPUSH
85357: CALL_OW 266
85361: PUSH
85362: LD_INT 3
85364: NONEQUAL
85365: PUSH
85366: LD_VAR 0 1
85370: PPUSH
85371: CALL_OW 247
85375: PUSH
85376: LD_INT 1
85378: EQUAL
85379: NOT
85380: AND
85381: OR
85382: IFFALSE 85386
// exit ;
85384: GO 85535
// if GetType ( factory ) = unit_human then
85386: LD_VAR 0 1
85390: PPUSH
85391: CALL_OW 247
85395: PUSH
85396: LD_INT 1
85398: EQUAL
85399: IFFALSE 85416
// factory := IsInUnit ( factory ) ;
85401: LD_ADDR_VAR 0 1
85405: PUSH
85406: LD_VAR 0 1
85410: PPUSH
85411: CALL_OW 310
85415: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
85416: LD_VAR 0 1
85420: PPUSH
85421: CALL_OW 266
85425: PUSH
85426: LD_INT 3
85428: NONEQUAL
85429: IFFALSE 85433
// exit ;
85431: GO 85535
// if HexInfo ( x , y ) = factory then
85433: LD_VAR 0 2
85437: PPUSH
85438: LD_VAR 0 3
85442: PPUSH
85443: CALL_OW 428
85447: PUSH
85448: LD_VAR 0 1
85452: EQUAL
85453: IFFALSE 85480
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
85455: LD_ADDR_EXP 122
85459: PUSH
85460: LD_EXP 122
85464: PPUSH
85465: LD_VAR 0 1
85469: PPUSH
85470: LD_INT 0
85472: PPUSH
85473: CALL_OW 1
85477: ST_TO_ADDR
85478: GO 85531
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
85480: LD_ADDR_EXP 122
85484: PUSH
85485: LD_EXP 122
85489: PPUSH
85490: LD_VAR 0 1
85494: PPUSH
85495: LD_VAR 0 1
85499: PPUSH
85500: CALL_OW 255
85504: PUSH
85505: LD_VAR 0 1
85509: PUSH
85510: LD_VAR 0 2
85514: PUSH
85515: LD_VAR 0 3
85519: PUSH
85520: EMPTY
85521: LIST
85522: LIST
85523: LIST
85524: LIST
85525: PPUSH
85526: CALL_OW 1
85530: ST_TO_ADDR
// UpdateFactoryWaypoints ;
85531: CALL 85540 0 0
// end ;
85535: LD_VAR 0 4
85539: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
85540: LD_INT 0
85542: PPUSH
85543: PPUSH
85544: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
85545: LD_STRING resetFactoryWaypoint();
85547: PPUSH
85548: CALL_OW 559
// if factoryWaypoints then
85552: LD_EXP 122
85556: IFFALSE 85682
// begin list := PrepareArray ( factoryWaypoints ) ;
85558: LD_ADDR_VAR 0 3
85562: PUSH
85563: LD_EXP 122
85567: PPUSH
85568: CALL 70647 0 1
85572: ST_TO_ADDR
// for i := 1 to list do
85573: LD_ADDR_VAR 0 2
85577: PUSH
85578: DOUBLE
85579: LD_INT 1
85581: DEC
85582: ST_TO_ADDR
85583: LD_VAR 0 3
85587: PUSH
85588: FOR_TO
85589: IFFALSE 85680
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85591: LD_STRING setFactoryWaypointXY(
85593: PUSH
85594: LD_VAR 0 3
85598: PUSH
85599: LD_VAR 0 2
85603: ARRAY
85604: PUSH
85605: LD_INT 1
85607: ARRAY
85608: STR
85609: PUSH
85610: LD_STRING ,
85612: STR
85613: PUSH
85614: LD_VAR 0 3
85618: PUSH
85619: LD_VAR 0 2
85623: ARRAY
85624: PUSH
85625: LD_INT 2
85627: ARRAY
85628: STR
85629: PUSH
85630: LD_STRING ,
85632: STR
85633: PUSH
85634: LD_VAR 0 3
85638: PUSH
85639: LD_VAR 0 2
85643: ARRAY
85644: PUSH
85645: LD_INT 3
85647: ARRAY
85648: STR
85649: PUSH
85650: LD_STRING ,
85652: STR
85653: PUSH
85654: LD_VAR 0 3
85658: PUSH
85659: LD_VAR 0 2
85663: ARRAY
85664: PUSH
85665: LD_INT 4
85667: ARRAY
85668: STR
85669: PUSH
85670: LD_STRING )
85672: STR
85673: PPUSH
85674: CALL_OW 559
85678: GO 85588
85680: POP
85681: POP
// end ; end ;
85682: LD_VAR 0 1
85686: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
85687: LD_INT 0
85689: PPUSH
// if HexInfo ( x , y ) = warehouse then
85690: LD_VAR 0 2
85694: PPUSH
85695: LD_VAR 0 3
85699: PPUSH
85700: CALL_OW 428
85704: PUSH
85705: LD_VAR 0 1
85709: EQUAL
85710: IFFALSE 85737
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
85712: LD_ADDR_EXP 123
85716: PUSH
85717: LD_EXP 123
85721: PPUSH
85722: LD_VAR 0 1
85726: PPUSH
85727: LD_INT 0
85729: PPUSH
85730: CALL_OW 1
85734: ST_TO_ADDR
85735: GO 85788
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
85737: LD_ADDR_EXP 123
85741: PUSH
85742: LD_EXP 123
85746: PPUSH
85747: LD_VAR 0 1
85751: PPUSH
85752: LD_VAR 0 1
85756: PPUSH
85757: CALL_OW 255
85761: PUSH
85762: LD_VAR 0 1
85766: PUSH
85767: LD_VAR 0 2
85771: PUSH
85772: LD_VAR 0 3
85776: PUSH
85777: EMPTY
85778: LIST
85779: LIST
85780: LIST
85781: LIST
85782: PPUSH
85783: CALL_OW 1
85787: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
85788: CALL 85797 0 0
// end ;
85792: LD_VAR 0 4
85796: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
85797: LD_INT 0
85799: PPUSH
85800: PPUSH
85801: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
85802: LD_STRING resetWarehouseGatheringPoints();
85804: PPUSH
85805: CALL_OW 559
// if warehouseGatheringPoints then
85809: LD_EXP 123
85813: IFFALSE 85939
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
85815: LD_ADDR_VAR 0 3
85819: PUSH
85820: LD_EXP 123
85824: PPUSH
85825: CALL 70647 0 1
85829: ST_TO_ADDR
// for i := 1 to list do
85830: LD_ADDR_VAR 0 2
85834: PUSH
85835: DOUBLE
85836: LD_INT 1
85838: DEC
85839: ST_TO_ADDR
85840: LD_VAR 0 3
85844: PUSH
85845: FOR_TO
85846: IFFALSE 85937
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85848: LD_STRING setWarehouseGatheringPointXY(
85850: PUSH
85851: LD_VAR 0 3
85855: PUSH
85856: LD_VAR 0 2
85860: ARRAY
85861: PUSH
85862: LD_INT 1
85864: ARRAY
85865: STR
85866: PUSH
85867: LD_STRING ,
85869: STR
85870: PUSH
85871: LD_VAR 0 3
85875: PUSH
85876: LD_VAR 0 2
85880: ARRAY
85881: PUSH
85882: LD_INT 2
85884: ARRAY
85885: STR
85886: PUSH
85887: LD_STRING ,
85889: STR
85890: PUSH
85891: LD_VAR 0 3
85895: PUSH
85896: LD_VAR 0 2
85900: ARRAY
85901: PUSH
85902: LD_INT 3
85904: ARRAY
85905: STR
85906: PUSH
85907: LD_STRING ,
85909: STR
85910: PUSH
85911: LD_VAR 0 3
85915: PUSH
85916: LD_VAR 0 2
85920: ARRAY
85921: PUSH
85922: LD_INT 4
85924: ARRAY
85925: STR
85926: PUSH
85927: LD_STRING )
85929: STR
85930: PPUSH
85931: CALL_OW 559
85935: GO 85845
85937: POP
85938: POP
// end ; end ;
85939: LD_VAR 0 1
85943: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
85944: LD_EXP 123
85948: IFFALSE 86633
85950: GO 85952
85952: DISABLE
85953: LD_INT 0
85955: PPUSH
85956: PPUSH
85957: PPUSH
85958: PPUSH
85959: PPUSH
85960: PPUSH
85961: PPUSH
85962: PPUSH
85963: PPUSH
// begin enable ;
85964: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
85965: LD_ADDR_VAR 0 3
85969: PUSH
85970: LD_EXP 123
85974: PPUSH
85975: CALL 70647 0 1
85979: ST_TO_ADDR
// if not list then
85980: LD_VAR 0 3
85984: NOT
85985: IFFALSE 85989
// exit ;
85987: GO 86633
// for i := 1 to list do
85989: LD_ADDR_VAR 0 1
85993: PUSH
85994: DOUBLE
85995: LD_INT 1
85997: DEC
85998: ST_TO_ADDR
85999: LD_VAR 0 3
86003: PUSH
86004: FOR_TO
86005: IFFALSE 86631
// begin depot := list [ i ] [ 2 ] ;
86007: LD_ADDR_VAR 0 8
86011: PUSH
86012: LD_VAR 0 3
86016: PUSH
86017: LD_VAR 0 1
86021: ARRAY
86022: PUSH
86023: LD_INT 2
86025: ARRAY
86026: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
86027: LD_ADDR_VAR 0 5
86031: PUSH
86032: LD_VAR 0 3
86036: PUSH
86037: LD_VAR 0 1
86041: ARRAY
86042: PUSH
86043: LD_INT 1
86045: ARRAY
86046: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
86047: LD_VAR 0 8
86051: PPUSH
86052: CALL_OW 301
86056: PUSH
86057: LD_VAR 0 5
86061: PUSH
86062: LD_VAR 0 8
86066: PPUSH
86067: CALL_OW 255
86071: NONEQUAL
86072: OR
86073: IFFALSE 86102
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
86075: LD_ADDR_EXP 123
86079: PUSH
86080: LD_EXP 123
86084: PPUSH
86085: LD_VAR 0 8
86089: PPUSH
86090: LD_INT 0
86092: PPUSH
86093: CALL_OW 1
86097: ST_TO_ADDR
// exit ;
86098: POP
86099: POP
86100: GO 86633
// end ; x := list [ i ] [ 3 ] ;
86102: LD_ADDR_VAR 0 6
86106: PUSH
86107: LD_VAR 0 3
86111: PUSH
86112: LD_VAR 0 1
86116: ARRAY
86117: PUSH
86118: LD_INT 3
86120: ARRAY
86121: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
86122: LD_ADDR_VAR 0 7
86126: PUSH
86127: LD_VAR 0 3
86131: PUSH
86132: LD_VAR 0 1
86136: ARRAY
86137: PUSH
86138: LD_INT 4
86140: ARRAY
86141: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
86142: LD_ADDR_VAR 0 9
86146: PUSH
86147: LD_VAR 0 6
86151: PPUSH
86152: LD_VAR 0 7
86156: PPUSH
86157: LD_INT 16
86159: PPUSH
86160: CALL 69235 0 3
86164: ST_TO_ADDR
// if not cratesNearbyPoint then
86165: LD_VAR 0 9
86169: NOT
86170: IFFALSE 86176
// exit ;
86172: POP
86173: POP
86174: GO 86633
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
86176: LD_ADDR_VAR 0 4
86180: PUSH
86181: LD_INT 22
86183: PUSH
86184: LD_VAR 0 5
86188: PUSH
86189: EMPTY
86190: LIST
86191: LIST
86192: PUSH
86193: LD_INT 3
86195: PUSH
86196: LD_INT 60
86198: PUSH
86199: EMPTY
86200: LIST
86201: PUSH
86202: EMPTY
86203: LIST
86204: LIST
86205: PUSH
86206: LD_INT 91
86208: PUSH
86209: LD_VAR 0 8
86213: PUSH
86214: LD_INT 6
86216: PUSH
86217: EMPTY
86218: LIST
86219: LIST
86220: LIST
86221: PUSH
86222: LD_INT 2
86224: PUSH
86225: LD_INT 25
86227: PUSH
86228: LD_INT 2
86230: PUSH
86231: EMPTY
86232: LIST
86233: LIST
86234: PUSH
86235: LD_INT 25
86237: PUSH
86238: LD_INT 16
86240: PUSH
86241: EMPTY
86242: LIST
86243: LIST
86244: PUSH
86245: EMPTY
86246: LIST
86247: LIST
86248: LIST
86249: PUSH
86250: EMPTY
86251: LIST
86252: LIST
86253: LIST
86254: LIST
86255: PPUSH
86256: CALL_OW 69
86260: PUSH
86261: LD_VAR 0 8
86265: PPUSH
86266: CALL_OW 313
86270: PPUSH
86271: LD_INT 3
86273: PUSH
86274: LD_INT 60
86276: PUSH
86277: EMPTY
86278: LIST
86279: PUSH
86280: EMPTY
86281: LIST
86282: LIST
86283: PUSH
86284: LD_INT 2
86286: PUSH
86287: LD_INT 25
86289: PUSH
86290: LD_INT 2
86292: PUSH
86293: EMPTY
86294: LIST
86295: LIST
86296: PUSH
86297: LD_INT 25
86299: PUSH
86300: LD_INT 16
86302: PUSH
86303: EMPTY
86304: LIST
86305: LIST
86306: PUSH
86307: EMPTY
86308: LIST
86309: LIST
86310: LIST
86311: PUSH
86312: EMPTY
86313: LIST
86314: LIST
86315: PPUSH
86316: CALL_OW 72
86320: UNION
86321: ST_TO_ADDR
// if tmp then
86322: LD_VAR 0 4
86326: IFFALSE 86406
// begin tmp := ShrinkArray ( tmp , 3 ) ;
86328: LD_ADDR_VAR 0 4
86332: PUSH
86333: LD_VAR 0 4
86337: PPUSH
86338: LD_INT 3
86340: PPUSH
86341: CALL 67204 0 2
86345: ST_TO_ADDR
// for j in tmp do
86346: LD_ADDR_VAR 0 2
86350: PUSH
86351: LD_VAR 0 4
86355: PUSH
86356: FOR_IN
86357: IFFALSE 86400
// begin if IsInUnit ( j ) then
86359: LD_VAR 0 2
86363: PPUSH
86364: CALL_OW 310
86368: IFFALSE 86379
// ComExit ( j ) ;
86370: LD_VAR 0 2
86374: PPUSH
86375: CALL 67287 0 1
// AddComCollect ( j , x , y ) ;
86379: LD_VAR 0 2
86383: PPUSH
86384: LD_VAR 0 6
86388: PPUSH
86389: LD_VAR 0 7
86393: PPUSH
86394: CALL_OW 177
// end ;
86398: GO 86356
86400: POP
86401: POP
// exit ;
86402: POP
86403: POP
86404: GO 86633
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
86406: LD_ADDR_VAR 0 4
86410: PUSH
86411: LD_INT 22
86413: PUSH
86414: LD_VAR 0 5
86418: PUSH
86419: EMPTY
86420: LIST
86421: LIST
86422: PUSH
86423: LD_INT 91
86425: PUSH
86426: LD_VAR 0 8
86430: PUSH
86431: LD_INT 8
86433: PUSH
86434: EMPTY
86435: LIST
86436: LIST
86437: LIST
86438: PUSH
86439: LD_INT 2
86441: PUSH
86442: LD_INT 34
86444: PUSH
86445: LD_INT 12
86447: PUSH
86448: EMPTY
86449: LIST
86450: LIST
86451: PUSH
86452: LD_INT 34
86454: PUSH
86455: LD_INT 51
86457: PUSH
86458: EMPTY
86459: LIST
86460: LIST
86461: PUSH
86462: LD_INT 34
86464: PUSH
86465: LD_INT 32
86467: PUSH
86468: EMPTY
86469: LIST
86470: LIST
86471: PUSH
86472: LD_INT 34
86474: PUSH
86475: LD_INT 89
86477: PUSH
86478: EMPTY
86479: LIST
86480: LIST
86481: PUSH
86482: EMPTY
86483: LIST
86484: LIST
86485: LIST
86486: LIST
86487: LIST
86488: PUSH
86489: EMPTY
86490: LIST
86491: LIST
86492: LIST
86493: PPUSH
86494: CALL_OW 69
86498: ST_TO_ADDR
// if tmp then
86499: LD_VAR 0 4
86503: IFFALSE 86629
// begin for j in tmp do
86505: LD_ADDR_VAR 0 2
86509: PUSH
86510: LD_VAR 0 4
86514: PUSH
86515: FOR_IN
86516: IFFALSE 86627
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
86518: LD_VAR 0 2
86522: PPUSH
86523: CALL_OW 262
86527: PUSH
86528: LD_INT 3
86530: EQUAL
86531: PUSH
86532: LD_VAR 0 2
86536: PPUSH
86537: CALL_OW 261
86541: PUSH
86542: LD_INT 20
86544: GREATER
86545: OR
86546: PUSH
86547: LD_VAR 0 2
86551: PPUSH
86552: CALL_OW 314
86556: NOT
86557: AND
86558: PUSH
86559: LD_VAR 0 2
86563: PPUSH
86564: CALL_OW 263
86568: PUSH
86569: LD_INT 1
86571: NONEQUAL
86572: PUSH
86573: LD_VAR 0 2
86577: PPUSH
86578: CALL_OW 311
86582: OR
86583: AND
86584: IFFALSE 86625
// begin ComCollect ( j , x , y ) ;
86586: LD_VAR 0 2
86590: PPUSH
86591: LD_VAR 0 6
86595: PPUSH
86596: LD_VAR 0 7
86600: PPUSH
86601: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
86605: LD_VAR 0 2
86609: PPUSH
86610: LD_VAR 0 8
86614: PPUSH
86615: CALL_OW 172
// exit ;
86619: POP
86620: POP
86621: POP
86622: POP
86623: GO 86633
// end ;
86625: GO 86515
86627: POP
86628: POP
// end ; end ;
86629: GO 86004
86631: POP
86632: POP
// end ; end_of_file
86633: PPOPN 9
86635: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86636: LD_VAR 0 1
86640: PUSH
86641: LD_INT 200
86643: DOUBLE
86644: GREATEREQUAL
86645: IFFALSE 86653
86647: LD_INT 299
86649: DOUBLE
86650: LESSEQUAL
86651: IFTRUE 86655
86653: GO 86687
86655: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86656: LD_VAR 0 1
86660: PPUSH
86661: LD_VAR 0 2
86665: PPUSH
86666: LD_VAR 0 3
86670: PPUSH
86671: LD_VAR 0 4
86675: PPUSH
86676: LD_VAR 0 5
86680: PPUSH
86681: CALL 87175 0 5
86685: GO 86764
86687: LD_INT 300
86689: DOUBLE
86690: GREATEREQUAL
86691: IFFALSE 86699
86693: LD_INT 399
86695: DOUBLE
86696: LESSEQUAL
86697: IFTRUE 86701
86699: GO 86763
86701: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86702: LD_VAR 0 1
86706: PPUSH
86707: LD_VAR 0 2
86711: PPUSH
86712: LD_VAR 0 3
86716: PPUSH
86717: LD_VAR 0 4
86721: PPUSH
86722: LD_VAR 0 5
86726: PPUSH
86727: LD_VAR 0 6
86731: PPUSH
86732: LD_VAR 0 7
86736: PPUSH
86737: LD_VAR 0 8
86741: PPUSH
86742: LD_VAR 0 9
86746: PPUSH
86747: LD_VAR 0 10
86751: PPUSH
86752: LD_VAR 0 11
86756: PPUSH
86757: CALL 83345 0 11
86761: GO 86764
86763: POP
// end ;
86764: PPOPN 11
86766: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86767: LD_VAR 0 1
86771: PPUSH
86772: LD_VAR 0 2
86776: PPUSH
86777: LD_VAR 0 3
86781: PPUSH
86782: LD_VAR 0 4
86786: PPUSH
86787: LD_VAR 0 5
86791: PPUSH
86792: CALL 86911 0 5
// end ; end_of_file
86796: PPOPN 5
86798: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
86799: LD_INT 0
86801: PPUSH
86802: PPUSH
86803: PPUSH
86804: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
86805: LD_VAR 0 1
86809: PPUSH
86810: CALL_OW 264
86814: PUSH
86815: LD_INT 91
86817: EQUAL
86818: IFFALSE 86890
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
86820: LD_INT 68
86822: PPUSH
86823: LD_VAR 0 1
86827: PPUSH
86828: CALL_OW 255
86832: PPUSH
86833: CALL_OW 321
86837: PUSH
86838: LD_INT 2
86840: EQUAL
86841: IFFALSE 86853
// eff := 70 else
86843: LD_ADDR_VAR 0 4
86847: PUSH
86848: LD_INT 70
86850: ST_TO_ADDR
86851: GO 86861
// eff := 30 ;
86853: LD_ADDR_VAR 0 4
86857: PUSH
86858: LD_INT 30
86860: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
86861: LD_VAR 0 1
86865: PPUSH
86866: CALL_OW 250
86870: PPUSH
86871: LD_VAR 0 1
86875: PPUSH
86876: CALL_OW 251
86880: PPUSH
86881: LD_VAR 0 4
86885: PPUSH
86886: CALL_OW 495
// end ; end ;
86890: LD_VAR 0 2
86894: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
86895: LD_INT 0
86897: PPUSH
// end ;
86898: LD_VAR 0 4
86902: RET
// export function SOS_Command ( cmd ) ; begin
86903: LD_INT 0
86905: PPUSH
// end ;
86906: LD_VAR 0 2
86910: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
86911: LD_INT 0
86913: PPUSH
// end ;
86914: LD_VAR 0 6
86918: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
86919: LD_INT 0
86921: PPUSH
86922: PPUSH
// if not vehicle or not factory then
86923: LD_VAR 0 1
86927: NOT
86928: PUSH
86929: LD_VAR 0 2
86933: NOT
86934: OR
86935: IFFALSE 86939
// exit ;
86937: GO 87170
// if factoryWaypoints >= factory then
86939: LD_EXP 122
86943: PUSH
86944: LD_VAR 0 2
86948: GREATEREQUAL
86949: IFFALSE 87170
// if factoryWaypoints [ factory ] then
86951: LD_EXP 122
86955: PUSH
86956: LD_VAR 0 2
86960: ARRAY
86961: IFFALSE 87170
// begin if GetControl ( vehicle ) = control_manual then
86963: LD_VAR 0 1
86967: PPUSH
86968: CALL_OW 263
86972: PUSH
86973: LD_INT 1
86975: EQUAL
86976: IFFALSE 87057
// begin driver := IsDrivenBy ( vehicle ) ;
86978: LD_ADDR_VAR 0 4
86982: PUSH
86983: LD_VAR 0 1
86987: PPUSH
86988: CALL_OW 311
86992: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86993: LD_VAR 0 4
86997: PPUSH
86998: LD_EXP 122
87002: PUSH
87003: LD_VAR 0 2
87007: ARRAY
87008: PUSH
87009: LD_INT 3
87011: ARRAY
87012: PPUSH
87013: LD_EXP 122
87017: PUSH
87018: LD_VAR 0 2
87022: ARRAY
87023: PUSH
87024: LD_INT 4
87026: ARRAY
87027: PPUSH
87028: CALL_OW 171
// AddComExitVehicle ( driver ) ;
87032: LD_VAR 0 4
87036: PPUSH
87037: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
87041: LD_VAR 0 4
87045: PPUSH
87046: LD_VAR 0 2
87050: PPUSH
87051: CALL_OW 180
// end else
87055: GO 87170
// if GetControl ( vehicle ) = control_remote then
87057: LD_VAR 0 1
87061: PPUSH
87062: CALL_OW 263
87066: PUSH
87067: LD_INT 2
87069: EQUAL
87070: IFFALSE 87131
// begin wait ( 0 0$2 ) ;
87072: LD_INT 70
87074: PPUSH
87075: CALL_OW 67
// if Connect ( vehicle ) then
87079: LD_VAR 0 1
87083: PPUSH
87084: CALL 37527 0 1
87088: IFFALSE 87129
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87090: LD_VAR 0 1
87094: PPUSH
87095: LD_EXP 122
87099: PUSH
87100: LD_VAR 0 2
87104: ARRAY
87105: PUSH
87106: LD_INT 3
87108: ARRAY
87109: PPUSH
87110: LD_EXP 122
87114: PUSH
87115: LD_VAR 0 2
87119: ARRAY
87120: PUSH
87121: LD_INT 4
87123: ARRAY
87124: PPUSH
87125: CALL_OW 171
// end else
87129: GO 87170
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87131: LD_VAR 0 1
87135: PPUSH
87136: LD_EXP 122
87140: PUSH
87141: LD_VAR 0 2
87145: ARRAY
87146: PUSH
87147: LD_INT 3
87149: ARRAY
87150: PPUSH
87151: LD_EXP 122
87155: PUSH
87156: LD_VAR 0 2
87160: ARRAY
87161: PUSH
87162: LD_INT 4
87164: ARRAY
87165: PPUSH
87166: CALL_OW 171
// end ; end ;
87170: LD_VAR 0 3
87174: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
87175: LD_INT 0
87177: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
87178: LD_VAR 0 1
87182: PUSH
87183: LD_INT 250
87185: EQUAL
87186: PUSH
87187: LD_VAR 0 2
87191: PPUSH
87192: CALL_OW 264
87196: PUSH
87197: LD_INT 81
87199: EQUAL
87200: AND
87201: IFFALSE 87222
// MinerPlaceMine ( unit , x , y ) ;
87203: LD_VAR 0 2
87207: PPUSH
87208: LD_VAR 0 4
87212: PPUSH
87213: LD_VAR 0 5
87217: PPUSH
87218: CALL 89607 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
87222: LD_VAR 0 1
87226: PUSH
87227: LD_INT 251
87229: EQUAL
87230: PUSH
87231: LD_VAR 0 2
87235: PPUSH
87236: CALL_OW 264
87240: PUSH
87241: LD_INT 81
87243: EQUAL
87244: AND
87245: IFFALSE 87266
// MinerDetonateMine ( unit , x , y ) ;
87247: LD_VAR 0 2
87251: PPUSH
87252: LD_VAR 0 4
87256: PPUSH
87257: LD_VAR 0 5
87261: PPUSH
87262: CALL 89882 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
87266: LD_VAR 0 1
87270: PUSH
87271: LD_INT 252
87273: EQUAL
87274: PUSH
87275: LD_VAR 0 2
87279: PPUSH
87280: CALL_OW 264
87284: PUSH
87285: LD_INT 81
87287: EQUAL
87288: AND
87289: IFFALSE 87310
// MinerCreateMinefield ( unit , x , y ) ;
87291: LD_VAR 0 2
87295: PPUSH
87296: LD_VAR 0 4
87300: PPUSH
87301: LD_VAR 0 5
87305: PPUSH
87306: CALL 90299 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
87310: LD_VAR 0 1
87314: PUSH
87315: LD_INT 253
87317: EQUAL
87318: PUSH
87319: LD_VAR 0 2
87323: PPUSH
87324: CALL_OW 257
87328: PUSH
87329: LD_INT 5
87331: EQUAL
87332: AND
87333: IFFALSE 87354
// ComBinocular ( unit , x , y ) ;
87335: LD_VAR 0 2
87339: PPUSH
87340: LD_VAR 0 4
87344: PPUSH
87345: LD_VAR 0 5
87349: PPUSH
87350: CALL 90668 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
87354: LD_VAR 0 1
87358: PUSH
87359: LD_INT 254
87361: EQUAL
87362: PUSH
87363: LD_VAR 0 2
87367: PPUSH
87368: CALL_OW 264
87372: PUSH
87373: LD_INT 99
87375: EQUAL
87376: AND
87377: PUSH
87378: LD_VAR 0 3
87382: PPUSH
87383: CALL_OW 263
87387: PUSH
87388: LD_INT 3
87390: EQUAL
87391: AND
87392: IFFALSE 87408
// HackDestroyVehicle ( unit , selectedUnit ) ;
87394: LD_VAR 0 2
87398: PPUSH
87399: LD_VAR 0 3
87403: PPUSH
87404: CALL 88971 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
87408: LD_VAR 0 1
87412: PUSH
87413: LD_INT 255
87415: EQUAL
87416: PUSH
87417: LD_VAR 0 2
87421: PPUSH
87422: CALL_OW 264
87426: PUSH
87427: LD_INT 14
87429: PUSH
87430: LD_INT 53
87432: PUSH
87433: EMPTY
87434: LIST
87435: LIST
87436: IN
87437: AND
87438: PUSH
87439: LD_VAR 0 4
87443: PPUSH
87444: LD_VAR 0 5
87448: PPUSH
87449: CALL_OW 488
87453: AND
87454: IFFALSE 87478
// CutTreeXYR ( unit , x , y , 12 ) ;
87456: LD_VAR 0 2
87460: PPUSH
87461: LD_VAR 0 4
87465: PPUSH
87466: LD_VAR 0 5
87470: PPUSH
87471: LD_INT 12
87473: PPUSH
87474: CALL 87541 0 4
// if cmd = 256 then
87478: LD_VAR 0 1
87482: PUSH
87483: LD_INT 256
87485: EQUAL
87486: IFFALSE 87507
// SetFactoryWaypoint ( unit , x , y ) ;
87488: LD_VAR 0 2
87492: PPUSH
87493: LD_VAR 0 4
87497: PPUSH
87498: LD_VAR 0 5
87502: PPUSH
87503: CALL 85325 0 3
// if cmd = 257 then
87507: LD_VAR 0 1
87511: PUSH
87512: LD_INT 257
87514: EQUAL
87515: IFFALSE 87536
// SetWarehouseGatheringPoint ( unit , x , y ) ;
87517: LD_VAR 0 2
87521: PPUSH
87522: LD_VAR 0 4
87526: PPUSH
87527: LD_VAR 0 5
87531: PPUSH
87532: CALL 85687 0 3
// end ;
87536: LD_VAR 0 6
87540: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
87541: LD_INT 0
87543: PPUSH
87544: PPUSH
87545: PPUSH
87546: PPUSH
87547: PPUSH
87548: PPUSH
87549: PPUSH
87550: PPUSH
87551: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
87552: LD_VAR 0 1
87556: NOT
87557: PUSH
87558: LD_VAR 0 2
87562: PPUSH
87563: LD_VAR 0 3
87567: PPUSH
87568: CALL_OW 488
87572: NOT
87573: OR
87574: PUSH
87575: LD_VAR 0 4
87579: NOT
87580: OR
87581: IFFALSE 87585
// exit ;
87583: GO 87925
// list := [ ] ;
87585: LD_ADDR_VAR 0 13
87589: PUSH
87590: EMPTY
87591: ST_TO_ADDR
// if x - r < 0 then
87592: LD_VAR 0 2
87596: PUSH
87597: LD_VAR 0 4
87601: MINUS
87602: PUSH
87603: LD_INT 0
87605: LESS
87606: IFFALSE 87618
// min_x := 0 else
87608: LD_ADDR_VAR 0 7
87612: PUSH
87613: LD_INT 0
87615: ST_TO_ADDR
87616: GO 87634
// min_x := x - r ;
87618: LD_ADDR_VAR 0 7
87622: PUSH
87623: LD_VAR 0 2
87627: PUSH
87628: LD_VAR 0 4
87632: MINUS
87633: ST_TO_ADDR
// if y - r < 0 then
87634: LD_VAR 0 3
87638: PUSH
87639: LD_VAR 0 4
87643: MINUS
87644: PUSH
87645: LD_INT 0
87647: LESS
87648: IFFALSE 87660
// min_y := 0 else
87650: LD_ADDR_VAR 0 8
87654: PUSH
87655: LD_INT 0
87657: ST_TO_ADDR
87658: GO 87676
// min_y := y - r ;
87660: LD_ADDR_VAR 0 8
87664: PUSH
87665: LD_VAR 0 3
87669: PUSH
87670: LD_VAR 0 4
87674: MINUS
87675: ST_TO_ADDR
// max_x := x + r ;
87676: LD_ADDR_VAR 0 9
87680: PUSH
87681: LD_VAR 0 2
87685: PUSH
87686: LD_VAR 0 4
87690: PLUS
87691: ST_TO_ADDR
// max_y := y + r ;
87692: LD_ADDR_VAR 0 10
87696: PUSH
87697: LD_VAR 0 3
87701: PUSH
87702: LD_VAR 0 4
87706: PLUS
87707: ST_TO_ADDR
// for _x = min_x to max_x do
87708: LD_ADDR_VAR 0 11
87712: PUSH
87713: DOUBLE
87714: LD_VAR 0 7
87718: DEC
87719: ST_TO_ADDR
87720: LD_VAR 0 9
87724: PUSH
87725: FOR_TO
87726: IFFALSE 87843
// for _y = min_y to max_y do
87728: LD_ADDR_VAR 0 12
87732: PUSH
87733: DOUBLE
87734: LD_VAR 0 8
87738: DEC
87739: ST_TO_ADDR
87740: LD_VAR 0 10
87744: PUSH
87745: FOR_TO
87746: IFFALSE 87839
// begin if not ValidHex ( _x , _y ) then
87748: LD_VAR 0 11
87752: PPUSH
87753: LD_VAR 0 12
87757: PPUSH
87758: CALL_OW 488
87762: NOT
87763: IFFALSE 87767
// continue ;
87765: GO 87745
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
87767: LD_VAR 0 11
87771: PPUSH
87772: LD_VAR 0 12
87776: PPUSH
87777: CALL_OW 351
87781: PUSH
87782: LD_VAR 0 11
87786: PPUSH
87787: LD_VAR 0 12
87791: PPUSH
87792: CALL_OW 554
87796: AND
87797: IFFALSE 87837
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
87799: LD_ADDR_VAR 0 13
87803: PUSH
87804: LD_VAR 0 13
87808: PPUSH
87809: LD_VAR 0 13
87813: PUSH
87814: LD_INT 1
87816: PLUS
87817: PPUSH
87818: LD_VAR 0 11
87822: PUSH
87823: LD_VAR 0 12
87827: PUSH
87828: EMPTY
87829: LIST
87830: LIST
87831: PPUSH
87832: CALL_OW 2
87836: ST_TO_ADDR
// end ;
87837: GO 87745
87839: POP
87840: POP
87841: GO 87725
87843: POP
87844: POP
// if not list then
87845: LD_VAR 0 13
87849: NOT
87850: IFFALSE 87854
// exit ;
87852: GO 87925
// for i in list do
87854: LD_ADDR_VAR 0 6
87858: PUSH
87859: LD_VAR 0 13
87863: PUSH
87864: FOR_IN
87865: IFFALSE 87923
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
87867: LD_VAR 0 1
87871: PPUSH
87872: LD_STRING M
87874: PUSH
87875: LD_VAR 0 6
87879: PUSH
87880: LD_INT 1
87882: ARRAY
87883: PUSH
87884: LD_VAR 0 6
87888: PUSH
87889: LD_INT 2
87891: ARRAY
87892: PUSH
87893: LD_INT 0
87895: PUSH
87896: LD_INT 0
87898: PUSH
87899: LD_INT 0
87901: PUSH
87902: LD_INT 0
87904: PUSH
87905: EMPTY
87906: LIST
87907: LIST
87908: LIST
87909: LIST
87910: LIST
87911: LIST
87912: LIST
87913: PUSH
87914: EMPTY
87915: LIST
87916: PPUSH
87917: CALL_OW 447
87921: GO 87864
87923: POP
87924: POP
// end ;
87925: LD_VAR 0 5
87929: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
87930: LD_EXP 125
87934: NOT
87935: IFFALSE 87985
87937: GO 87939
87939: DISABLE
// begin initHack := true ;
87940: LD_ADDR_EXP 125
87944: PUSH
87945: LD_INT 1
87947: ST_TO_ADDR
// hackTanks := [ ] ;
87948: LD_ADDR_EXP 126
87952: PUSH
87953: EMPTY
87954: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
87955: LD_ADDR_EXP 127
87959: PUSH
87960: EMPTY
87961: ST_TO_ADDR
// hackLimit := 3 ;
87962: LD_ADDR_EXP 128
87966: PUSH
87967: LD_INT 3
87969: ST_TO_ADDR
// hackDist := 12 ;
87970: LD_ADDR_EXP 129
87974: PUSH
87975: LD_INT 12
87977: ST_TO_ADDR
// hackCounter := [ ] ;
87978: LD_ADDR_EXP 130
87982: PUSH
87983: EMPTY
87984: ST_TO_ADDR
// end ;
87985: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
87986: LD_EXP 125
87990: PUSH
87991: LD_INT 34
87993: PUSH
87994: LD_INT 99
87996: PUSH
87997: EMPTY
87998: LIST
87999: LIST
88000: PPUSH
88001: CALL_OW 69
88005: AND
88006: IFFALSE 88259
88008: GO 88010
88010: DISABLE
88011: LD_INT 0
88013: PPUSH
88014: PPUSH
// begin enable ;
88015: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
88016: LD_ADDR_VAR 0 1
88020: PUSH
88021: LD_INT 34
88023: PUSH
88024: LD_INT 99
88026: PUSH
88027: EMPTY
88028: LIST
88029: LIST
88030: PPUSH
88031: CALL_OW 69
88035: PUSH
88036: FOR_IN
88037: IFFALSE 88257
// begin if not i in hackTanks then
88039: LD_VAR 0 1
88043: PUSH
88044: LD_EXP 126
88048: IN
88049: NOT
88050: IFFALSE 88133
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
88052: LD_ADDR_EXP 126
88056: PUSH
88057: LD_EXP 126
88061: PPUSH
88062: LD_EXP 126
88066: PUSH
88067: LD_INT 1
88069: PLUS
88070: PPUSH
88071: LD_VAR 0 1
88075: PPUSH
88076: CALL_OW 1
88080: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
88081: LD_ADDR_EXP 127
88085: PUSH
88086: LD_EXP 127
88090: PPUSH
88091: LD_EXP 127
88095: PUSH
88096: LD_INT 1
88098: PLUS
88099: PPUSH
88100: EMPTY
88101: PPUSH
88102: CALL_OW 1
88106: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
88107: LD_ADDR_EXP 130
88111: PUSH
88112: LD_EXP 130
88116: PPUSH
88117: LD_EXP 130
88121: PUSH
88122: LD_INT 1
88124: PLUS
88125: PPUSH
88126: EMPTY
88127: PPUSH
88128: CALL_OW 1
88132: ST_TO_ADDR
// end ; if not IsOk ( i ) then
88133: LD_VAR 0 1
88137: PPUSH
88138: CALL_OW 302
88142: NOT
88143: IFFALSE 88156
// begin HackUnlinkAll ( i ) ;
88145: LD_VAR 0 1
88149: PPUSH
88150: CALL 88262 0 1
// continue ;
88154: GO 88036
// end ; HackCheckCapturedStatus ( i ) ;
88156: LD_VAR 0 1
88160: PPUSH
88161: CALL 88705 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
88165: LD_ADDR_VAR 0 2
88169: PUSH
88170: LD_INT 81
88172: PUSH
88173: LD_VAR 0 1
88177: PPUSH
88178: CALL_OW 255
88182: PUSH
88183: EMPTY
88184: LIST
88185: LIST
88186: PUSH
88187: LD_INT 33
88189: PUSH
88190: LD_INT 3
88192: PUSH
88193: EMPTY
88194: LIST
88195: LIST
88196: PUSH
88197: LD_INT 91
88199: PUSH
88200: LD_VAR 0 1
88204: PUSH
88205: LD_EXP 129
88209: PUSH
88210: EMPTY
88211: LIST
88212: LIST
88213: LIST
88214: PUSH
88215: LD_INT 50
88217: PUSH
88218: EMPTY
88219: LIST
88220: PUSH
88221: EMPTY
88222: LIST
88223: LIST
88224: LIST
88225: LIST
88226: PPUSH
88227: CALL_OW 69
88231: ST_TO_ADDR
// if not tmp then
88232: LD_VAR 0 2
88236: NOT
88237: IFFALSE 88241
// continue ;
88239: GO 88036
// HackLink ( i , tmp ) ;
88241: LD_VAR 0 1
88245: PPUSH
88246: LD_VAR 0 2
88250: PPUSH
88251: CALL 88398 0 2
// end ;
88255: GO 88036
88257: POP
88258: POP
// end ;
88259: PPOPN 2
88261: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
88262: LD_INT 0
88264: PPUSH
88265: PPUSH
88266: PPUSH
// if not hack in hackTanks then
88267: LD_VAR 0 1
88271: PUSH
88272: LD_EXP 126
88276: IN
88277: NOT
88278: IFFALSE 88282
// exit ;
88280: GO 88393
// index := GetElementIndex ( hackTanks , hack ) ;
88282: LD_ADDR_VAR 0 4
88286: PUSH
88287: LD_EXP 126
88291: PPUSH
88292: LD_VAR 0 1
88296: PPUSH
88297: CALL 34343 0 2
88301: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
88302: LD_EXP 127
88306: PUSH
88307: LD_VAR 0 4
88311: ARRAY
88312: IFFALSE 88393
// begin for i in hackTanksCaptured [ index ] do
88314: LD_ADDR_VAR 0 3
88318: PUSH
88319: LD_EXP 127
88323: PUSH
88324: LD_VAR 0 4
88328: ARRAY
88329: PUSH
88330: FOR_IN
88331: IFFALSE 88357
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
88333: LD_VAR 0 3
88337: PUSH
88338: LD_INT 1
88340: ARRAY
88341: PPUSH
88342: LD_VAR 0 3
88346: PUSH
88347: LD_INT 2
88349: ARRAY
88350: PPUSH
88351: CALL_OW 235
88355: GO 88330
88357: POP
88358: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
88359: LD_ADDR_EXP 127
88363: PUSH
88364: LD_EXP 127
88368: PPUSH
88369: LD_VAR 0 4
88373: PPUSH
88374: EMPTY
88375: PPUSH
88376: CALL_OW 1
88380: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
88381: LD_VAR 0 1
88385: PPUSH
88386: LD_INT 0
88388: PPUSH
88389: CALL_OW 505
// end ; end ;
88393: LD_VAR 0 2
88397: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
88398: LD_INT 0
88400: PPUSH
88401: PPUSH
88402: PPUSH
// if not hack in hackTanks or not vehicles then
88403: LD_VAR 0 1
88407: PUSH
88408: LD_EXP 126
88412: IN
88413: NOT
88414: PUSH
88415: LD_VAR 0 2
88419: NOT
88420: OR
88421: IFFALSE 88425
// exit ;
88423: GO 88700
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
88425: LD_ADDR_VAR 0 2
88429: PUSH
88430: LD_VAR 0 1
88434: PPUSH
88435: LD_VAR 0 2
88439: PPUSH
88440: LD_INT 1
88442: PPUSH
88443: LD_INT 1
88445: PPUSH
88446: CALL 34993 0 4
88450: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
88451: LD_ADDR_VAR 0 5
88455: PUSH
88456: LD_EXP 126
88460: PPUSH
88461: LD_VAR 0 1
88465: PPUSH
88466: CALL 34343 0 2
88470: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
88471: LD_EXP 127
88475: PUSH
88476: LD_VAR 0 5
88480: ARRAY
88481: PUSH
88482: LD_EXP 128
88486: LESS
88487: IFFALSE 88676
// begin for i := 1 to vehicles do
88489: LD_ADDR_VAR 0 4
88493: PUSH
88494: DOUBLE
88495: LD_INT 1
88497: DEC
88498: ST_TO_ADDR
88499: LD_VAR 0 2
88503: PUSH
88504: FOR_TO
88505: IFFALSE 88674
// begin if hackTanksCaptured [ index ] = hackLimit then
88507: LD_EXP 127
88511: PUSH
88512: LD_VAR 0 5
88516: ARRAY
88517: PUSH
88518: LD_EXP 128
88522: EQUAL
88523: IFFALSE 88527
// break ;
88525: GO 88674
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
88527: LD_ADDR_EXP 130
88531: PUSH
88532: LD_EXP 130
88536: PPUSH
88537: LD_VAR 0 5
88541: PPUSH
88542: LD_EXP 130
88546: PUSH
88547: LD_VAR 0 5
88551: ARRAY
88552: PUSH
88553: LD_INT 1
88555: PLUS
88556: PPUSH
88557: CALL_OW 1
88561: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
88562: LD_ADDR_EXP 127
88566: PUSH
88567: LD_EXP 127
88571: PPUSH
88572: LD_VAR 0 5
88576: PUSH
88577: LD_EXP 127
88581: PUSH
88582: LD_VAR 0 5
88586: ARRAY
88587: PUSH
88588: LD_INT 1
88590: PLUS
88591: PUSH
88592: EMPTY
88593: LIST
88594: LIST
88595: PPUSH
88596: LD_VAR 0 2
88600: PUSH
88601: LD_VAR 0 4
88605: ARRAY
88606: PUSH
88607: LD_VAR 0 2
88611: PUSH
88612: LD_VAR 0 4
88616: ARRAY
88617: PPUSH
88618: CALL_OW 255
88622: PUSH
88623: EMPTY
88624: LIST
88625: LIST
88626: PPUSH
88627: CALL 34558 0 3
88631: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
88632: LD_VAR 0 2
88636: PUSH
88637: LD_VAR 0 4
88641: ARRAY
88642: PPUSH
88643: LD_VAR 0 1
88647: PPUSH
88648: CALL_OW 255
88652: PPUSH
88653: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
88657: LD_VAR 0 2
88661: PUSH
88662: LD_VAR 0 4
88666: ARRAY
88667: PPUSH
88668: CALL_OW 141
// end ;
88672: GO 88504
88674: POP
88675: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
88676: LD_VAR 0 1
88680: PPUSH
88681: LD_EXP 127
88685: PUSH
88686: LD_VAR 0 5
88690: ARRAY
88691: PUSH
88692: LD_INT 0
88694: PLUS
88695: PPUSH
88696: CALL_OW 505
// end ;
88700: LD_VAR 0 3
88704: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
88705: LD_INT 0
88707: PPUSH
88708: PPUSH
88709: PPUSH
88710: PPUSH
// if not hack in hackTanks then
88711: LD_VAR 0 1
88715: PUSH
88716: LD_EXP 126
88720: IN
88721: NOT
88722: IFFALSE 88726
// exit ;
88724: GO 88966
// index := GetElementIndex ( hackTanks , hack ) ;
88726: LD_ADDR_VAR 0 4
88730: PUSH
88731: LD_EXP 126
88735: PPUSH
88736: LD_VAR 0 1
88740: PPUSH
88741: CALL 34343 0 2
88745: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
88746: LD_ADDR_VAR 0 3
88750: PUSH
88751: DOUBLE
88752: LD_EXP 127
88756: PUSH
88757: LD_VAR 0 4
88761: ARRAY
88762: INC
88763: ST_TO_ADDR
88764: LD_INT 1
88766: PUSH
88767: FOR_DOWNTO
88768: IFFALSE 88940
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
88770: LD_ADDR_VAR 0 5
88774: PUSH
88775: LD_EXP 127
88779: PUSH
88780: LD_VAR 0 4
88784: ARRAY
88785: PUSH
88786: LD_VAR 0 3
88790: ARRAY
88791: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
88792: LD_VAR 0 5
88796: PUSH
88797: LD_INT 1
88799: ARRAY
88800: PPUSH
88801: CALL_OW 302
88805: NOT
88806: PUSH
88807: LD_VAR 0 5
88811: PUSH
88812: LD_INT 1
88814: ARRAY
88815: PPUSH
88816: CALL_OW 255
88820: PUSH
88821: LD_VAR 0 1
88825: PPUSH
88826: CALL_OW 255
88830: NONEQUAL
88831: OR
88832: IFFALSE 88938
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
88834: LD_VAR 0 5
88838: PUSH
88839: LD_INT 1
88841: ARRAY
88842: PPUSH
88843: CALL_OW 305
88847: PUSH
88848: LD_VAR 0 5
88852: PUSH
88853: LD_INT 1
88855: ARRAY
88856: PPUSH
88857: CALL_OW 255
88861: PUSH
88862: LD_VAR 0 1
88866: PPUSH
88867: CALL_OW 255
88871: EQUAL
88872: AND
88873: IFFALSE 88897
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
88875: LD_VAR 0 5
88879: PUSH
88880: LD_INT 1
88882: ARRAY
88883: PPUSH
88884: LD_VAR 0 5
88888: PUSH
88889: LD_INT 2
88891: ARRAY
88892: PPUSH
88893: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
88897: LD_ADDR_EXP 127
88901: PUSH
88902: LD_EXP 127
88906: PPUSH
88907: LD_VAR 0 4
88911: PPUSH
88912: LD_EXP 127
88916: PUSH
88917: LD_VAR 0 4
88921: ARRAY
88922: PPUSH
88923: LD_VAR 0 3
88927: PPUSH
88928: CALL_OW 3
88932: PPUSH
88933: CALL_OW 1
88937: ST_TO_ADDR
// end ; end ;
88938: GO 88767
88940: POP
88941: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
88942: LD_VAR 0 1
88946: PPUSH
88947: LD_EXP 127
88951: PUSH
88952: LD_VAR 0 4
88956: ARRAY
88957: PUSH
88958: LD_INT 0
88960: PLUS
88961: PPUSH
88962: CALL_OW 505
// end ;
88966: LD_VAR 0 2
88970: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
88971: LD_INT 0
88973: PPUSH
88974: PPUSH
88975: PPUSH
88976: PPUSH
// if not hack in hackTanks then
88977: LD_VAR 0 1
88981: PUSH
88982: LD_EXP 126
88986: IN
88987: NOT
88988: IFFALSE 88992
// exit ;
88990: GO 89077
// index := GetElementIndex ( hackTanks , hack ) ;
88992: LD_ADDR_VAR 0 5
88996: PUSH
88997: LD_EXP 126
89001: PPUSH
89002: LD_VAR 0 1
89006: PPUSH
89007: CALL 34343 0 2
89011: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
89012: LD_ADDR_VAR 0 4
89016: PUSH
89017: DOUBLE
89018: LD_INT 1
89020: DEC
89021: ST_TO_ADDR
89022: LD_EXP 127
89026: PUSH
89027: LD_VAR 0 5
89031: ARRAY
89032: PUSH
89033: FOR_TO
89034: IFFALSE 89075
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
89036: LD_EXP 127
89040: PUSH
89041: LD_VAR 0 5
89045: ARRAY
89046: PUSH
89047: LD_VAR 0 4
89051: ARRAY
89052: PUSH
89053: LD_INT 1
89055: ARRAY
89056: PUSH
89057: LD_VAR 0 2
89061: EQUAL
89062: IFFALSE 89073
// KillUnit ( vehicle ) ;
89064: LD_VAR 0 2
89068: PPUSH
89069: CALL_OW 66
89073: GO 89033
89075: POP
89076: POP
// end ;
89077: LD_VAR 0 3
89081: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
89082: LD_EXP 131
89086: NOT
89087: IFFALSE 89122
89089: GO 89091
89091: DISABLE
// begin initMiner := true ;
89092: LD_ADDR_EXP 131
89096: PUSH
89097: LD_INT 1
89099: ST_TO_ADDR
// minersList := [ ] ;
89100: LD_ADDR_EXP 132
89104: PUSH
89105: EMPTY
89106: ST_TO_ADDR
// minerMinesList := [ ] ;
89107: LD_ADDR_EXP 133
89111: PUSH
89112: EMPTY
89113: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
89114: LD_ADDR_EXP 134
89118: PUSH
89119: LD_INT 5
89121: ST_TO_ADDR
// end ;
89122: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
89123: LD_EXP 131
89127: PUSH
89128: LD_INT 34
89130: PUSH
89131: LD_INT 81
89133: PUSH
89134: EMPTY
89135: LIST
89136: LIST
89137: PPUSH
89138: CALL_OW 69
89142: AND
89143: IFFALSE 89604
89145: GO 89147
89147: DISABLE
89148: LD_INT 0
89150: PPUSH
89151: PPUSH
89152: PPUSH
89153: PPUSH
// begin enable ;
89154: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
89155: LD_ADDR_VAR 0 1
89159: PUSH
89160: LD_INT 34
89162: PUSH
89163: LD_INT 81
89165: PUSH
89166: EMPTY
89167: LIST
89168: LIST
89169: PPUSH
89170: CALL_OW 69
89174: PUSH
89175: FOR_IN
89176: IFFALSE 89248
// begin if not i in minersList then
89178: LD_VAR 0 1
89182: PUSH
89183: LD_EXP 132
89187: IN
89188: NOT
89189: IFFALSE 89246
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
89191: LD_ADDR_EXP 132
89195: PUSH
89196: LD_EXP 132
89200: PPUSH
89201: LD_EXP 132
89205: PUSH
89206: LD_INT 1
89208: PLUS
89209: PPUSH
89210: LD_VAR 0 1
89214: PPUSH
89215: CALL_OW 1
89219: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
89220: LD_ADDR_EXP 133
89224: PUSH
89225: LD_EXP 133
89229: PPUSH
89230: LD_EXP 133
89234: PUSH
89235: LD_INT 1
89237: PLUS
89238: PPUSH
89239: EMPTY
89240: PPUSH
89241: CALL_OW 1
89245: ST_TO_ADDR
// end end ;
89246: GO 89175
89248: POP
89249: POP
// for i := minerMinesList downto 1 do
89250: LD_ADDR_VAR 0 1
89254: PUSH
89255: DOUBLE
89256: LD_EXP 133
89260: INC
89261: ST_TO_ADDR
89262: LD_INT 1
89264: PUSH
89265: FOR_DOWNTO
89266: IFFALSE 89602
// begin if IsLive ( minersList [ i ] ) then
89268: LD_EXP 132
89272: PUSH
89273: LD_VAR 0 1
89277: ARRAY
89278: PPUSH
89279: CALL_OW 300
89283: IFFALSE 89311
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
89285: LD_EXP 132
89289: PUSH
89290: LD_VAR 0 1
89294: ARRAY
89295: PPUSH
89296: LD_EXP 133
89300: PUSH
89301: LD_VAR 0 1
89305: ARRAY
89306: PPUSH
89307: CALL_OW 505
// if not minerMinesList [ i ] then
89311: LD_EXP 133
89315: PUSH
89316: LD_VAR 0 1
89320: ARRAY
89321: NOT
89322: IFFALSE 89326
// continue ;
89324: GO 89265
// for j := minerMinesList [ i ] downto 1 do
89326: LD_ADDR_VAR 0 2
89330: PUSH
89331: DOUBLE
89332: LD_EXP 133
89336: PUSH
89337: LD_VAR 0 1
89341: ARRAY
89342: INC
89343: ST_TO_ADDR
89344: LD_INT 1
89346: PUSH
89347: FOR_DOWNTO
89348: IFFALSE 89598
// begin side := GetSide ( minersList [ i ] ) ;
89350: LD_ADDR_VAR 0 3
89354: PUSH
89355: LD_EXP 132
89359: PUSH
89360: LD_VAR 0 1
89364: ARRAY
89365: PPUSH
89366: CALL_OW 255
89370: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
89371: LD_ADDR_VAR 0 4
89375: PUSH
89376: LD_EXP 133
89380: PUSH
89381: LD_VAR 0 1
89385: ARRAY
89386: PUSH
89387: LD_VAR 0 2
89391: ARRAY
89392: PUSH
89393: LD_INT 1
89395: ARRAY
89396: PPUSH
89397: LD_EXP 133
89401: PUSH
89402: LD_VAR 0 1
89406: ARRAY
89407: PUSH
89408: LD_VAR 0 2
89412: ARRAY
89413: PUSH
89414: LD_INT 2
89416: ARRAY
89417: PPUSH
89418: CALL_OW 428
89422: ST_TO_ADDR
// if not tmp then
89423: LD_VAR 0 4
89427: NOT
89428: IFFALSE 89432
// continue ;
89430: GO 89347
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
89432: LD_VAR 0 4
89436: PUSH
89437: LD_INT 81
89439: PUSH
89440: LD_VAR 0 3
89444: PUSH
89445: EMPTY
89446: LIST
89447: LIST
89448: PPUSH
89449: CALL_OW 69
89453: IN
89454: PUSH
89455: LD_EXP 133
89459: PUSH
89460: LD_VAR 0 1
89464: ARRAY
89465: PUSH
89466: LD_VAR 0 2
89470: ARRAY
89471: PUSH
89472: LD_INT 1
89474: ARRAY
89475: PPUSH
89476: LD_EXP 133
89480: PUSH
89481: LD_VAR 0 1
89485: ARRAY
89486: PUSH
89487: LD_VAR 0 2
89491: ARRAY
89492: PUSH
89493: LD_INT 2
89495: ARRAY
89496: PPUSH
89497: CALL_OW 458
89501: AND
89502: IFFALSE 89596
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
89504: LD_EXP 133
89508: PUSH
89509: LD_VAR 0 1
89513: ARRAY
89514: PUSH
89515: LD_VAR 0 2
89519: ARRAY
89520: PUSH
89521: LD_INT 1
89523: ARRAY
89524: PPUSH
89525: LD_EXP 133
89529: PUSH
89530: LD_VAR 0 1
89534: ARRAY
89535: PUSH
89536: LD_VAR 0 2
89540: ARRAY
89541: PUSH
89542: LD_INT 2
89544: ARRAY
89545: PPUSH
89546: LD_VAR 0 3
89550: PPUSH
89551: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
89555: LD_ADDR_EXP 133
89559: PUSH
89560: LD_EXP 133
89564: PPUSH
89565: LD_VAR 0 1
89569: PPUSH
89570: LD_EXP 133
89574: PUSH
89575: LD_VAR 0 1
89579: ARRAY
89580: PPUSH
89581: LD_VAR 0 2
89585: PPUSH
89586: CALL_OW 3
89590: PPUSH
89591: CALL_OW 1
89595: ST_TO_ADDR
// end ; end ;
89596: GO 89347
89598: POP
89599: POP
// end ;
89600: GO 89265
89602: POP
89603: POP
// end ;
89604: PPOPN 4
89606: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
89607: LD_INT 0
89609: PPUSH
89610: PPUSH
// result := false ;
89611: LD_ADDR_VAR 0 4
89615: PUSH
89616: LD_INT 0
89618: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
89619: LD_VAR 0 1
89623: PPUSH
89624: CALL_OW 264
89628: PUSH
89629: LD_INT 81
89631: EQUAL
89632: NOT
89633: IFFALSE 89637
// exit ;
89635: GO 89877
// index := GetElementIndex ( minersList , unit ) ;
89637: LD_ADDR_VAR 0 5
89641: PUSH
89642: LD_EXP 132
89646: PPUSH
89647: LD_VAR 0 1
89651: PPUSH
89652: CALL 34343 0 2
89656: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
89657: LD_EXP 133
89661: PUSH
89662: LD_VAR 0 5
89666: ARRAY
89667: PUSH
89668: LD_EXP 134
89672: GREATEREQUAL
89673: IFFALSE 89677
// exit ;
89675: GO 89877
// ComMoveXY ( unit , x , y ) ;
89677: LD_VAR 0 1
89681: PPUSH
89682: LD_VAR 0 2
89686: PPUSH
89687: LD_VAR 0 3
89691: PPUSH
89692: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
89696: LD_INT 35
89698: PPUSH
89699: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
89703: LD_VAR 0 1
89707: PPUSH
89708: LD_VAR 0 2
89712: PPUSH
89713: LD_VAR 0 3
89717: PPUSH
89718: CALL 65698 0 3
89722: NOT
89723: PUSH
89724: LD_VAR 0 1
89728: PPUSH
89729: CALL_OW 314
89733: AND
89734: IFFALSE 89738
// exit ;
89736: GO 89877
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
89738: LD_VAR 0 2
89742: PPUSH
89743: LD_VAR 0 3
89747: PPUSH
89748: CALL_OW 428
89752: PUSH
89753: LD_VAR 0 1
89757: EQUAL
89758: PUSH
89759: LD_VAR 0 1
89763: PPUSH
89764: CALL_OW 314
89768: NOT
89769: AND
89770: IFFALSE 89696
// PlaySoundXY ( x , y , PlantMine ) ;
89772: LD_VAR 0 2
89776: PPUSH
89777: LD_VAR 0 3
89781: PPUSH
89782: LD_STRING PlantMine
89784: PPUSH
89785: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
89789: LD_VAR 0 2
89793: PPUSH
89794: LD_VAR 0 3
89798: PPUSH
89799: LD_VAR 0 1
89803: PPUSH
89804: CALL_OW 255
89808: PPUSH
89809: LD_INT 0
89811: PPUSH
89812: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
89816: LD_ADDR_EXP 133
89820: PUSH
89821: LD_EXP 133
89825: PPUSH
89826: LD_VAR 0 5
89830: PUSH
89831: LD_EXP 133
89835: PUSH
89836: LD_VAR 0 5
89840: ARRAY
89841: PUSH
89842: LD_INT 1
89844: PLUS
89845: PUSH
89846: EMPTY
89847: LIST
89848: LIST
89849: PPUSH
89850: LD_VAR 0 2
89854: PUSH
89855: LD_VAR 0 3
89859: PUSH
89860: EMPTY
89861: LIST
89862: LIST
89863: PPUSH
89864: CALL 34558 0 3
89868: ST_TO_ADDR
// result := true ;
89869: LD_ADDR_VAR 0 4
89873: PUSH
89874: LD_INT 1
89876: ST_TO_ADDR
// end ;
89877: LD_VAR 0 4
89881: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
89882: LD_INT 0
89884: PPUSH
89885: PPUSH
89886: PPUSH
// if not unit in minersList then
89887: LD_VAR 0 1
89891: PUSH
89892: LD_EXP 132
89896: IN
89897: NOT
89898: IFFALSE 89902
// exit ;
89900: GO 90294
// index := GetElementIndex ( minersList , unit ) ;
89902: LD_ADDR_VAR 0 6
89906: PUSH
89907: LD_EXP 132
89911: PPUSH
89912: LD_VAR 0 1
89916: PPUSH
89917: CALL 34343 0 2
89921: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
89922: LD_ADDR_VAR 0 5
89926: PUSH
89927: DOUBLE
89928: LD_EXP 133
89932: PUSH
89933: LD_VAR 0 6
89937: ARRAY
89938: INC
89939: ST_TO_ADDR
89940: LD_INT 1
89942: PUSH
89943: FOR_DOWNTO
89944: IFFALSE 90105
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
89946: LD_EXP 133
89950: PUSH
89951: LD_VAR 0 6
89955: ARRAY
89956: PUSH
89957: LD_VAR 0 5
89961: ARRAY
89962: PUSH
89963: LD_INT 1
89965: ARRAY
89966: PUSH
89967: LD_VAR 0 2
89971: EQUAL
89972: PUSH
89973: LD_EXP 133
89977: PUSH
89978: LD_VAR 0 6
89982: ARRAY
89983: PUSH
89984: LD_VAR 0 5
89988: ARRAY
89989: PUSH
89990: LD_INT 2
89992: ARRAY
89993: PUSH
89994: LD_VAR 0 3
89998: EQUAL
89999: AND
90000: IFFALSE 90103
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
90002: LD_EXP 133
90006: PUSH
90007: LD_VAR 0 6
90011: ARRAY
90012: PUSH
90013: LD_VAR 0 5
90017: ARRAY
90018: PUSH
90019: LD_INT 1
90021: ARRAY
90022: PPUSH
90023: LD_EXP 133
90027: PUSH
90028: LD_VAR 0 6
90032: ARRAY
90033: PUSH
90034: LD_VAR 0 5
90038: ARRAY
90039: PUSH
90040: LD_INT 2
90042: ARRAY
90043: PPUSH
90044: LD_VAR 0 1
90048: PPUSH
90049: CALL_OW 255
90053: PPUSH
90054: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
90058: LD_ADDR_EXP 133
90062: PUSH
90063: LD_EXP 133
90067: PPUSH
90068: LD_VAR 0 6
90072: PPUSH
90073: LD_EXP 133
90077: PUSH
90078: LD_VAR 0 6
90082: ARRAY
90083: PPUSH
90084: LD_VAR 0 5
90088: PPUSH
90089: CALL_OW 3
90093: PPUSH
90094: CALL_OW 1
90098: ST_TO_ADDR
// exit ;
90099: POP
90100: POP
90101: GO 90294
// end ; end ;
90103: GO 89943
90105: POP
90106: POP
// for i := minerMinesList [ index ] downto 1 do
90107: LD_ADDR_VAR 0 5
90111: PUSH
90112: DOUBLE
90113: LD_EXP 133
90117: PUSH
90118: LD_VAR 0 6
90122: ARRAY
90123: INC
90124: ST_TO_ADDR
90125: LD_INT 1
90127: PUSH
90128: FOR_DOWNTO
90129: IFFALSE 90292
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
90131: LD_EXP 133
90135: PUSH
90136: LD_VAR 0 6
90140: ARRAY
90141: PUSH
90142: LD_VAR 0 5
90146: ARRAY
90147: PUSH
90148: LD_INT 1
90150: ARRAY
90151: PPUSH
90152: LD_EXP 133
90156: PUSH
90157: LD_VAR 0 6
90161: ARRAY
90162: PUSH
90163: LD_VAR 0 5
90167: ARRAY
90168: PUSH
90169: LD_INT 2
90171: ARRAY
90172: PPUSH
90173: LD_VAR 0 2
90177: PPUSH
90178: LD_VAR 0 3
90182: PPUSH
90183: CALL_OW 298
90187: PUSH
90188: LD_INT 6
90190: LESS
90191: IFFALSE 90290
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
90193: LD_EXP 133
90197: PUSH
90198: LD_VAR 0 6
90202: ARRAY
90203: PUSH
90204: LD_VAR 0 5
90208: ARRAY
90209: PUSH
90210: LD_INT 1
90212: ARRAY
90213: PPUSH
90214: LD_EXP 133
90218: PUSH
90219: LD_VAR 0 6
90223: ARRAY
90224: PUSH
90225: LD_VAR 0 5
90229: ARRAY
90230: PUSH
90231: LD_INT 2
90233: ARRAY
90234: PPUSH
90235: LD_VAR 0 1
90239: PPUSH
90240: CALL_OW 255
90244: PPUSH
90245: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
90249: LD_ADDR_EXP 133
90253: PUSH
90254: LD_EXP 133
90258: PPUSH
90259: LD_VAR 0 6
90263: PPUSH
90264: LD_EXP 133
90268: PUSH
90269: LD_VAR 0 6
90273: ARRAY
90274: PPUSH
90275: LD_VAR 0 5
90279: PPUSH
90280: CALL_OW 3
90284: PPUSH
90285: CALL_OW 1
90289: ST_TO_ADDR
// end ; end ;
90290: GO 90128
90292: POP
90293: POP
// end ;
90294: LD_VAR 0 4
90298: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
90299: LD_INT 0
90301: PPUSH
90302: PPUSH
90303: PPUSH
90304: PPUSH
90305: PPUSH
90306: PPUSH
90307: PPUSH
90308: PPUSH
90309: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
90310: LD_VAR 0 1
90314: PPUSH
90315: CALL_OW 264
90319: PUSH
90320: LD_INT 81
90322: EQUAL
90323: NOT
90324: PUSH
90325: LD_VAR 0 1
90329: PUSH
90330: LD_EXP 132
90334: IN
90335: NOT
90336: OR
90337: IFFALSE 90341
// exit ;
90339: GO 90663
// index := GetElementIndex ( minersList , unit ) ;
90341: LD_ADDR_VAR 0 6
90345: PUSH
90346: LD_EXP 132
90350: PPUSH
90351: LD_VAR 0 1
90355: PPUSH
90356: CALL 34343 0 2
90360: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
90361: LD_ADDR_VAR 0 8
90365: PUSH
90366: LD_EXP 134
90370: PUSH
90371: LD_EXP 133
90375: PUSH
90376: LD_VAR 0 6
90380: ARRAY
90381: MINUS
90382: ST_TO_ADDR
// if not minesFreeAmount then
90383: LD_VAR 0 8
90387: NOT
90388: IFFALSE 90392
// exit ;
90390: GO 90663
// tmp := [ ] ;
90392: LD_ADDR_VAR 0 7
90396: PUSH
90397: EMPTY
90398: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
90399: LD_ADDR_VAR 0 5
90403: PUSH
90404: DOUBLE
90405: LD_INT 1
90407: DEC
90408: ST_TO_ADDR
90409: LD_VAR 0 8
90413: PUSH
90414: FOR_TO
90415: IFFALSE 90610
// begin _d := rand ( 0 , 5 ) ;
90417: LD_ADDR_VAR 0 11
90421: PUSH
90422: LD_INT 0
90424: PPUSH
90425: LD_INT 5
90427: PPUSH
90428: CALL_OW 12
90432: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
90433: LD_ADDR_VAR 0 12
90437: PUSH
90438: LD_INT 2
90440: PPUSH
90441: LD_INT 6
90443: PPUSH
90444: CALL_OW 12
90448: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
90449: LD_ADDR_VAR 0 9
90453: PUSH
90454: LD_VAR 0 2
90458: PPUSH
90459: LD_VAR 0 11
90463: PPUSH
90464: LD_VAR 0 12
90468: PPUSH
90469: CALL_OW 272
90473: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
90474: LD_ADDR_VAR 0 10
90478: PUSH
90479: LD_VAR 0 3
90483: PPUSH
90484: LD_VAR 0 11
90488: PPUSH
90489: LD_VAR 0 12
90493: PPUSH
90494: CALL_OW 273
90498: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
90499: LD_VAR 0 9
90503: PPUSH
90504: LD_VAR 0 10
90508: PPUSH
90509: CALL_OW 488
90513: PUSH
90514: LD_VAR 0 9
90518: PUSH
90519: LD_VAR 0 10
90523: PUSH
90524: EMPTY
90525: LIST
90526: LIST
90527: PUSH
90528: LD_VAR 0 7
90532: IN
90533: NOT
90534: AND
90535: PUSH
90536: LD_VAR 0 9
90540: PPUSH
90541: LD_VAR 0 10
90545: PPUSH
90546: CALL_OW 458
90550: NOT
90551: AND
90552: IFFALSE 90594
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
90554: LD_ADDR_VAR 0 7
90558: PUSH
90559: LD_VAR 0 7
90563: PPUSH
90564: LD_VAR 0 7
90568: PUSH
90569: LD_INT 1
90571: PLUS
90572: PPUSH
90573: LD_VAR 0 9
90577: PUSH
90578: LD_VAR 0 10
90582: PUSH
90583: EMPTY
90584: LIST
90585: LIST
90586: PPUSH
90587: CALL_OW 1
90591: ST_TO_ADDR
90592: GO 90608
// i := i - 1 ;
90594: LD_ADDR_VAR 0 5
90598: PUSH
90599: LD_VAR 0 5
90603: PUSH
90604: LD_INT 1
90606: MINUS
90607: ST_TO_ADDR
// end ;
90608: GO 90414
90610: POP
90611: POP
// for i in tmp do
90612: LD_ADDR_VAR 0 5
90616: PUSH
90617: LD_VAR 0 7
90621: PUSH
90622: FOR_IN
90623: IFFALSE 90661
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
90625: LD_VAR 0 1
90629: PPUSH
90630: LD_VAR 0 5
90634: PUSH
90635: LD_INT 1
90637: ARRAY
90638: PPUSH
90639: LD_VAR 0 5
90643: PUSH
90644: LD_INT 2
90646: ARRAY
90647: PPUSH
90648: CALL 89607 0 3
90652: NOT
90653: IFFALSE 90659
// exit ;
90655: POP
90656: POP
90657: GO 90663
90659: GO 90622
90661: POP
90662: POP
// end ;
90663: LD_VAR 0 4
90667: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
90668: LD_INT 0
90670: PPUSH
90671: PPUSH
90672: PPUSH
90673: PPUSH
90674: PPUSH
90675: PPUSH
90676: PPUSH
// if not GetClass ( unit ) = class_sniper then
90677: LD_VAR 0 1
90681: PPUSH
90682: CALL_OW 257
90686: PUSH
90687: LD_INT 5
90689: EQUAL
90690: NOT
90691: IFFALSE 90695
// exit ;
90693: GO 91083
// dist := 8 ;
90695: LD_ADDR_VAR 0 5
90699: PUSH
90700: LD_INT 8
90702: ST_TO_ADDR
// viewRange := 12 ;
90703: LD_ADDR_VAR 0 7
90707: PUSH
90708: LD_INT 12
90710: ST_TO_ADDR
// side := GetSide ( unit ) ;
90711: LD_ADDR_VAR 0 6
90715: PUSH
90716: LD_VAR 0 1
90720: PPUSH
90721: CALL_OW 255
90725: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
90726: LD_INT 61
90728: PPUSH
90729: LD_VAR 0 6
90733: PPUSH
90734: CALL_OW 321
90738: PUSH
90739: LD_INT 2
90741: EQUAL
90742: IFFALSE 90752
// viewRange := 16 ;
90744: LD_ADDR_VAR 0 7
90748: PUSH
90749: LD_INT 16
90751: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
90752: LD_VAR 0 1
90756: PPUSH
90757: LD_VAR 0 2
90761: PPUSH
90762: LD_VAR 0 3
90766: PPUSH
90767: CALL_OW 297
90771: PUSH
90772: LD_VAR 0 5
90776: GREATER
90777: IFFALSE 90856
// begin ComMoveXY ( unit , x , y ) ;
90779: LD_VAR 0 1
90783: PPUSH
90784: LD_VAR 0 2
90788: PPUSH
90789: LD_VAR 0 3
90793: PPUSH
90794: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
90798: LD_INT 35
90800: PPUSH
90801: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
90805: LD_VAR 0 1
90809: PPUSH
90810: LD_VAR 0 2
90814: PPUSH
90815: LD_VAR 0 3
90819: PPUSH
90820: CALL 65698 0 3
90824: NOT
90825: IFFALSE 90829
// exit ;
90827: GO 91083
// until GetDistUnitXY ( unit , x , y ) < dist ;
90829: LD_VAR 0 1
90833: PPUSH
90834: LD_VAR 0 2
90838: PPUSH
90839: LD_VAR 0 3
90843: PPUSH
90844: CALL_OW 297
90848: PUSH
90849: LD_VAR 0 5
90853: LESS
90854: IFFALSE 90798
// end ; ComTurnXY ( unit , x , y ) ;
90856: LD_VAR 0 1
90860: PPUSH
90861: LD_VAR 0 2
90865: PPUSH
90866: LD_VAR 0 3
90870: PPUSH
90871: CALL_OW 118
// wait ( 5 ) ;
90875: LD_INT 5
90877: PPUSH
90878: CALL_OW 67
// _d := GetDir ( unit ) ;
90882: LD_ADDR_VAR 0 10
90886: PUSH
90887: LD_VAR 0 1
90891: PPUSH
90892: CALL_OW 254
90896: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
90897: LD_ADDR_VAR 0 8
90901: PUSH
90902: LD_VAR 0 1
90906: PPUSH
90907: CALL_OW 250
90911: PPUSH
90912: LD_VAR 0 10
90916: PPUSH
90917: LD_VAR 0 5
90921: PPUSH
90922: CALL_OW 272
90926: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
90927: LD_ADDR_VAR 0 9
90931: PUSH
90932: LD_VAR 0 1
90936: PPUSH
90937: CALL_OW 251
90941: PPUSH
90942: LD_VAR 0 10
90946: PPUSH
90947: LD_VAR 0 5
90951: PPUSH
90952: CALL_OW 273
90956: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
90957: LD_VAR 0 8
90961: PPUSH
90962: LD_VAR 0 9
90966: PPUSH
90967: CALL_OW 488
90971: NOT
90972: IFFALSE 90976
// exit ;
90974: GO 91083
// ComAnimCustom ( unit , 1 ) ;
90976: LD_VAR 0 1
90980: PPUSH
90981: LD_INT 1
90983: PPUSH
90984: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
90988: LD_VAR 0 8
90992: PPUSH
90993: LD_VAR 0 9
90997: PPUSH
90998: LD_VAR 0 6
91002: PPUSH
91003: LD_VAR 0 7
91007: PPUSH
91008: CALL_OW 330
// repeat wait ( 1 ) ;
91012: LD_INT 1
91014: PPUSH
91015: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
91019: LD_VAR 0 1
91023: PPUSH
91024: CALL_OW 316
91028: PUSH
91029: LD_VAR 0 1
91033: PPUSH
91034: CALL_OW 314
91038: OR
91039: PUSH
91040: LD_VAR 0 1
91044: PPUSH
91045: CALL_OW 302
91049: NOT
91050: OR
91051: PUSH
91052: LD_VAR 0 1
91056: PPUSH
91057: CALL_OW 301
91061: OR
91062: IFFALSE 91012
// RemoveSeeing ( _x , _y , side ) ;
91064: LD_VAR 0 8
91068: PPUSH
91069: LD_VAR 0 9
91073: PPUSH
91074: LD_VAR 0 6
91078: PPUSH
91079: CALL_OW 331
// end ; end_of_file
91083: LD_VAR 0 4
91087: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
91088: LD_VAR 0 1
91092: PPUSH
91093: LD_VAR 0 2
91097: PPUSH
91098: LD_VAR 0 3
91102: PPUSH
91103: LD_VAR 0 4
91107: PPUSH
91108: LD_VAR 0 5
91112: PPUSH
91113: LD_VAR 0 6
91117: PPUSH
91118: CALL 70997 0 6
// end ;
91122: PPOPN 6
91124: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
91125: LD_INT 0
91127: PPUSH
// begin if not units then
91128: LD_VAR 0 1
91132: NOT
91133: IFFALSE 91137
// exit ;
91135: GO 91137
// end ;
91137: PPOPN 7
91139: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
91140: CALL 70901 0 0
// end ;
91144: PPOPN 1
91146: END
