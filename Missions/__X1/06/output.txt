// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 9212 0 2
// PrepareArabian ;
  32: CALL 408 0 0
// PrepareRussian ;
  36: CALL 10003 0 0
// Action ;
  40: CALL 18172 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin , buildingsFromPrev , gameActive , rolfAttack ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// buildingsFromPrev := LoadVariable ( 05_Buildings , [ ] ) ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_STRING 05_Buildings
 116: PPUSH
 117: EMPTY
 118: PPUSH
 119: CALL_OW 30
 123: ST_TO_ADDR
// bergkampfArrived := false ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// omarArrived := false ;
 132: LD_ADDR_EXP 6
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// outpostDestroyed := false ;
 140: LD_ADDR_EXP 4
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// ruLoseCounter := 0 ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// rolfScriptBase := false ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// omarScriptBase := false ;
 164: LD_ADDR_EXP 10
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// linkedWithRolf := 0 ;
 172: LD_ADDR_EXP 12
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 180: LD_ADDR_EXP 26
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// rolfDied := false ;
 188: LD_ADDR_EXP 13
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// leninSpotted := false ;
 196: LD_ADDR_EXP 14
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// mortarConstructed := false ;
 204: LD_ADDR_EXP 15
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// rolfHasVehicles := false ;
 212: LD_ADDR_EXP 16
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// leninScriptBase := true ;
 220: LD_ADDR_EXP 11
 224: PUSH
 225: LD_INT 1
 227: ST_TO_ADDR
// rolfWantVehicles := false ;
 228: LD_ADDR_EXP 17
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// omarWantVehicles := false ;
 236: LD_ADDR_EXP 18
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// omarHasVehicles := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// escapeAllowed := false ;
 252: LD_ADDR_EXP 24
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$00 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 19
 264: PUSH
 265: LD_INT 31500
 267: PUSH
 268: LD_INT 28350
 270: PUSH
 271: LD_INT 25900
 273: PUSH
 274: LD_INT 23100
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$00 ] [ Difficulty ] ;
 289: LD_ADDR_EXP 20
 293: PUSH
 294: LD_INT 31500
 296: PUSH
 297: LD_INT 28350
 299: PUSH
 300: LD_INT 25900
 302: PUSH
 303: LD_INT 23100
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: LD_OWVAR 67
 316: ARRAY
 317: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 318: LD_ADDR_EXP 21
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: LD_INT 5
 328: PUSH
 329: LD_INT 6
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_OWVAR 67
 345: ARRAY
 346: ST_TO_ADDR
// omarAttack := false ;
 347: LD_ADDR_EXP 23
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// disableAttackOnHeike := false ;
 355: LD_ADDR_EXP 27
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// escapeTimer := 6 6$00 ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 12600
 370: ST_TO_ADDR
// firstAttack := true ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// canRolfJoin := true ;
 379: LD_ADDR_EXP 29
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// gameActive := false ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 0
 394: ST_TO_ADDR
// rolfAttack := false ;
 395: LD_ADDR_EXP 32
 399: PUSH
 400: LD_INT 0
 402: ST_TO_ADDR
// end ; end_of_file
 403: LD_VAR 0 1
 407: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 408: LD_INT 0
 410: PPUSH
 411: PPUSH
 412: PPUSH
 413: PPUSH
 414: PPUSH
 415: PPUSH
 416: PPUSH
 417: PPUSH
 418: PPUSH
 419: PPUSH
 420: PPUSH
 421: PPUSH
// uc_nation := 2 ;
 422: LD_ADDR_OWVAR 21
 426: PUSH
 427: LD_INT 2
 429: ST_TO_ADDR
// uc_side := 5 ;
 430: LD_ADDR_OWVAR 20
 434: PUSH
 435: LD_INT 5
 437: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 438: LD_ADDR_EXP 41
 442: PUSH
 443: LD_STRING Abdul
 445: PPUSH
 446: LD_INT 0
 448: PPUSH
 449: LD_STRING 
 451: PPUSH
 452: CALL 27826 0 3
 456: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 457: LD_ADDR_EXP 43
 461: PUSH
 462: LD_STRING Omar
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: LD_STRING 
 470: PPUSH
 471: CALL 27826 0 3
 475: ST_TO_ADDR
// uc_side := 2 ;
 476: LD_ADDR_OWVAR 20
 480: PUSH
 481: LD_INT 2
 483: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 484: LD_ADDR_EXP 33
 488: PUSH
 489: LD_STRING Heike
 491: PPUSH
 492: LD_EXP 1
 496: NOT
 497: PPUSH
 498: LD_EXP 2
 502: PPUSH
 503: CALL 27826 0 3
 507: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 508: LD_ADDR_EXP 36
 512: PUSH
 513: LD_STRING Ibrahim
 515: PPUSH
 516: LD_EXP 1
 520: NOT
 521: PPUSH
 522: LD_EXP 2
 526: PPUSH
 527: CALL 27826 0 3
 531: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 532: LD_ADDR_EXP 34
 536: PUSH
 537: LD_STRING Givi
 539: PPUSH
 540: LD_EXP 1
 544: NOT
 545: PPUSH
 546: LD_EXP 2
 550: PPUSH
 551: CALL 27826 0 3
 555: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 556: LD_ADDR_EXP 37
 560: PUSH
 561: LD_STRING Kamil
 563: PPUSH
 564: LD_EXP 1
 568: NOT
 569: PPUSH
 570: LD_EXP 2
 574: PPUSH
 575: CALL 27826 0 3
 579: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 580: LD_ADDR_EXP 38
 584: PUSH
 585: LD_STRING Kaia
 587: PPUSH
 588: LD_EXP 1
 592: NOT
 593: PPUSH
 594: LD_EXP 2
 598: PPUSH
 599: CALL 27826 0 3
 603: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 604: LD_ADDR_EXP 39
 608: PUSH
 609: LD_STRING Sophia
 611: PPUSH
 612: LD_EXP 1
 616: NOT
 617: PPUSH
 618: LD_EXP 2
 622: PPUSH
 623: CALL 27826 0 3
 627: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 628: LD_ADDR_EXP 40
 632: PUSH
 633: LD_STRING Markov
 635: PPUSH
 636: LD_EXP 1
 640: NOT
 641: PPUSH
 642: LD_EXP 2
 646: PPUSH
 647: CALL 27826 0 3
 651: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 652: LD_ADDR_EXP 45
 656: PUSH
 657: LD_STRING Aviradze
 659: PPUSH
 660: LD_EXP 1
 664: NOT
 665: PPUSH
 666: LD_EXP 2
 670: PPUSH
 671: CALL 27826 0 3
 675: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 676: LD_ADDR_EXP 44
 680: PUSH
 681: LD_STRING Kurt
 683: PPUSH
 684: LD_EXP 1
 688: NOT
 689: PPUSH
 690: LD_EXP 2
 694: PPUSH
 695: CALL 27826 0 3
 699: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 700: LD_ADDR_EXP 35
 704: PUSH
 705: LD_STRING Mike
 707: PPUSH
 708: LD_EXP 1
 712: NOT
 713: PPUSH
 714: LD_EXP 2
 718: PPUSH
 719: CALL 27826 0 3
 723: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 724: LD_ADDR_EXP 42
 728: PUSH
 729: LD_STRING Olaf
 731: PPUSH
 732: LD_INT 0
 734: PPUSH
 735: LD_STRING 
 737: PPUSH
 738: CALL 27826 0 3
 742: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 743: LD_ADDR_EXP 48
 747: PUSH
 748: LD_STRING 05_others
 750: PPUSH
 751: CALL_OW 31
 755: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 756: LD_ADDR_EXP 49
 760: PUSH
 761: LD_STRING 05_apes
 763: PPUSH
 764: CALL_OW 31
 768: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 769: LD_ADDR_VAR 0 5
 773: PUSH
 774: LD_STRING 05_Radar
 776: PPUSH
 777: LD_EXP 1
 781: PPUSH
 782: CALL_OW 30
 786: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 787: LD_ADDR_VAR 0 6
 791: PUSH
 792: LD_STRING 05_RemoteControl
 794: PPUSH
 795: LD_EXP 1
 799: PPUSH
 800: CALL_OW 30
 804: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 805: LD_ADDR_VAR 0 7
 809: PUSH
 810: LD_STRING 05_DrugsTested
 812: PPUSH
 813: LD_EXP 1
 817: PPUSH
 818: CALL_OW 30
 822: ST_TO_ADDR
// if hasDrugs then
 823: LD_VAR 0 7
 827: IFFALSE 842
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 829: LD_INT 5
 831: PPUSH
 832: LD_INT 2
 834: PPUSH
 835: LD_INT 2
 837: PPUSH
 838: CALL_OW 322
// if hasRadar then
 842: LD_VAR 0 5
 846: IFFALSE 861
// SetTech ( tech_radar , 2 , state_researched ) ;
 848: LD_INT 6
 850: PPUSH
 851: LD_INT 2
 853: PPUSH
 854: LD_INT 2
 856: PPUSH
 857: CALL_OW 322
// if hasRemote then
 861: LD_VAR 0 6
 865: IFFALSE 880
// SetTech ( tech_remCont , 2 , state_researched ) ;
 867: LD_INT 15
 869: PPUSH
 870: LD_INT 2
 872: PPUSH
 873: LD_INT 2
 875: PPUSH
 876: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 880: LD_ADDR_VAR 0 12
 884: PUSH
 885: LD_INT 5
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 517
 895: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 896: LD_ADDR_VAR 0 2
 900: PUSH
 901: DOUBLE
 902: LD_INT 1
 904: DEC
 905: ST_TO_ADDR
 906: LD_VAR 0 12
 910: PUSH
 911: LD_INT 1
 913: ARRAY
 914: PUSH
 915: FOR_TO
 916: IFFALSE 993
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 918: LD_VAR 0 12
 922: PUSH
 923: LD_INT 1
 925: ARRAY
 926: PUSH
 927: LD_VAR 0 2
 931: ARRAY
 932: PPUSH
 933: LD_VAR 0 12
 937: PUSH
 938: LD_INT 2
 940: ARRAY
 941: PUSH
 942: LD_VAR 0 2
 946: ARRAY
 947: PPUSH
 948: CALL_OW 351
 952: IFFALSE 991
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 954: LD_VAR 0 12
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: PUSH
 963: LD_VAR 0 2
 967: ARRAY
 968: PPUSH
 969: LD_VAR 0 12
 973: PUSH
 974: LD_INT 2
 976: ARRAY
 977: PUSH
 978: LD_VAR 0 2
 982: ARRAY
 983: PPUSH
 984: LD_INT 2
 986: PPUSH
 987: CALL_OW 244
 991: GO 915
 993: POP
 994: POP
// base := [ ] ;
 995: LD_ADDR_VAR 0 4
 999: PUSH
1000: EMPTY
1001: ST_TO_ADDR
// if debug then
1002: LD_EXP 1
1006: IFFALSE 1056
// begin base := [ [ b_warehouse , 51 , 77 , 1 , nation_russian , 3 , 0 , 0 , 0 ] , ] ;
1008: LD_ADDR_VAR 0 4
1012: PUSH
1013: LD_INT 1
1015: PUSH
1016: LD_INT 51
1018: PUSH
1019: LD_INT 77
1021: PUSH
1022: LD_INT 1
1024: PUSH
1025: LD_INT 3
1027: PUSH
1028: LD_INT 3
1030: PUSH
1031: LD_INT 0
1033: PUSH
1034: LD_INT 0
1036: PUSH
1037: LD_INT 0
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: PUSH
1051: EMPTY
1052: LIST
1053: ST_TO_ADDR
// end else
1054: GO 1072
// if buildingsFromPrev then
1056: LD_EXP 30
1060: IFFALSE 1072
// base := buildingsFromPrev ;
1062: LD_ADDR_VAR 0 4
1066: PUSH
1067: LD_EXP 30
1071: ST_TO_ADDR
// if base then
1072: LD_VAR 0 4
1076: IFFALSE 1274
// for i := 1 to base do
1078: LD_ADDR_VAR 0 2
1082: PUSH
1083: DOUBLE
1084: LD_INT 1
1086: DEC
1087: ST_TO_ADDR
1088: LD_VAR 0 4
1092: PUSH
1093: FOR_TO
1094: IFFALSE 1272
// base := Replace ( base , i , [ base [ i ] [ 1 ] , base [ i ] [ 2 ] + 155 , base [ i ] [ 3 ] + 3 , base [ i ] [ 4 ] , base [ i ] [ 5 ] , base [ i ] [ 6 ] , base [ i ] [ 7 ] , base [ i ] [ 8 ] , base [ i ] [ 9 ] ] ) ;
1096: LD_ADDR_VAR 0 4
1100: PUSH
1101: LD_VAR 0 4
1105: PPUSH
1106: LD_VAR 0 2
1110: PPUSH
1111: LD_VAR 0 4
1115: PUSH
1116: LD_VAR 0 2
1120: ARRAY
1121: PUSH
1122: LD_INT 1
1124: ARRAY
1125: PUSH
1126: LD_VAR 0 4
1130: PUSH
1131: LD_VAR 0 2
1135: ARRAY
1136: PUSH
1137: LD_INT 2
1139: ARRAY
1140: PUSH
1141: LD_INT 155
1143: PLUS
1144: PUSH
1145: LD_VAR 0 4
1149: PUSH
1150: LD_VAR 0 2
1154: ARRAY
1155: PUSH
1156: LD_INT 3
1158: ARRAY
1159: PUSH
1160: LD_INT 3
1162: PLUS
1163: PUSH
1164: LD_VAR 0 4
1168: PUSH
1169: LD_VAR 0 2
1173: ARRAY
1174: PUSH
1175: LD_INT 4
1177: ARRAY
1178: PUSH
1179: LD_VAR 0 4
1183: PUSH
1184: LD_VAR 0 2
1188: ARRAY
1189: PUSH
1190: LD_INT 5
1192: ARRAY
1193: PUSH
1194: LD_VAR 0 4
1198: PUSH
1199: LD_VAR 0 2
1203: ARRAY
1204: PUSH
1205: LD_INT 6
1207: ARRAY
1208: PUSH
1209: LD_VAR 0 4
1213: PUSH
1214: LD_VAR 0 2
1218: ARRAY
1219: PUSH
1220: LD_INT 7
1222: ARRAY
1223: PUSH
1224: LD_VAR 0 4
1228: PUSH
1229: LD_VAR 0 2
1233: ARRAY
1234: PUSH
1235: LD_INT 8
1237: ARRAY
1238: PUSH
1239: LD_VAR 0 4
1243: PUSH
1244: LD_VAR 0 2
1248: ARRAY
1249: PUSH
1250: LD_INT 9
1252: ARRAY
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: PPUSH
1265: CALL_OW 1
1269: ST_TO_ADDR
1270: GO 1093
1272: POP
1273: POP
// base := base ^ [ [ b_depot , 206 , 80 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_bunker , 221 , 95 , 5 , nation_arabian , 3 , 0 , 0 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , nation_arabian , 3 , 0 , 0 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , nation_arabian , 3 , 0 , 0 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_lab_full , 217 , 78 , 4 , nation_arabian , 3 , b_lab_weapon , 0 , 0 ] , [ b_solar_power , 220 , 99 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 103 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 216 , 102 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_gun , 203 , 94 , 0 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_track , 199 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 81 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 78 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ] ;
1274: LD_ADDR_VAR 0 4
1278: PUSH
1279: LD_VAR 0 4
1283: PUSH
1284: LD_INT 0
1286: PUSH
1287: LD_INT 206
1289: PUSH
1290: LD_INT 80
1292: PUSH
1293: LD_INT 1
1295: PUSH
1296: LD_INT 2
1298: PUSH
1299: LD_INT 3
1301: PUSH
1302: LD_INT 0
1304: PUSH
1305: LD_INT 0
1307: PUSH
1308: LD_INT 0
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: PUSH
1322: LD_INT 32
1324: PUSH
1325: LD_INT 221
1327: PUSH
1328: LD_INT 95
1330: PUSH
1331: LD_INT 5
1333: PUSH
1334: LD_INT 2
1336: PUSH
1337: LD_INT 3
1339: PUSH
1340: LD_INT 0
1342: PUSH
1343: LD_INT 0
1345: PUSH
1346: LD_INT 23
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: PUSH
1360: LD_INT 32
1362: PUSH
1363: LD_INT 223
1365: PUSH
1366: LD_INT 88
1368: PUSH
1369: LD_INT 5
1371: PUSH
1372: LD_INT 2
1374: PUSH
1375: LD_INT 3
1377: PUSH
1378: LD_INT 0
1380: PUSH
1381: LD_INT 0
1383: PUSH
1384: LD_INT 24
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: PUSH
1398: LD_INT 32
1400: PUSH
1401: LD_INT 202
1403: PUSH
1404: LD_INT 64
1406: PUSH
1407: LD_INT 2
1409: PUSH
1410: LD_INT 2
1412: PUSH
1413: LD_INT 3
1415: PUSH
1416: LD_INT 0
1418: PUSH
1419: LD_INT 0
1421: PUSH
1422: LD_INT 25
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 203
1441: PUSH
1442: LD_INT 91
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 2
1450: PUSH
1451: LD_INT 3
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 0
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 8
1476: PUSH
1477: LD_INT 217
1479: PUSH
1480: LD_INT 78
1482: PUSH
1483: LD_INT 4
1485: PUSH
1486: LD_INT 2
1488: PUSH
1489: LD_INT 3
1491: PUSH
1492: LD_INT 10
1494: PUSH
1495: LD_INT 0
1497: PUSH
1498: LD_INT 0
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 27
1514: PUSH
1515: LD_INT 220
1517: PUSH
1518: LD_INT 99
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 3
1529: PUSH
1530: LD_INT 0
1532: PUSH
1533: LD_INT 0
1535: PUSH
1536: LD_INT 0
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: PUSH
1550: LD_INT 27
1552: PUSH
1553: LD_INT 220
1555: PUSH
1556: LD_INT 103
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 2
1564: PUSH
1565: LD_INT 3
1567: PUSH
1568: LD_INT 0
1570: PUSH
1571: LD_INT 0
1573: PUSH
1574: LD_INT 0
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: PUSH
1588: LD_INT 27
1590: PUSH
1591: LD_INT 216
1593: PUSH
1594: LD_INT 102
1596: PUSH
1597: LD_INT 1
1599: PUSH
1600: LD_INT 2
1602: PUSH
1603: LD_INT 3
1605: PUSH
1606: LD_INT 0
1608: PUSH
1609: LD_INT 0
1611: PUSH
1612: LD_INT 0
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 17
1628: PUSH
1629: LD_INT 203
1631: PUSH
1632: LD_INT 94
1634: PUSH
1635: LD_INT 0
1637: PUSH
1638: LD_INT 2
1640: PUSH
1641: LD_INT 3
1643: PUSH
1644: LD_INT 0
1646: PUSH
1647: LD_INT 0
1649: PUSH
1650: LD_INT 0
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 23
1666: PUSH
1667: LD_INT 200
1669: PUSH
1670: LD_INT 88
1672: PUSH
1673: LD_INT 2
1675: PUSH
1676: LD_INT 2
1678: PUSH
1679: LD_INT 3
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 0
1690: PUSH
1691: EMPTY
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 16
1704: PUSH
1705: LD_INT 199
1707: PUSH
1708: LD_INT 91
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: LD_INT 3
1719: PUSH
1720: LD_INT 0
1722: PUSH
1723: LD_INT 0
1725: PUSH
1726: LD_INT 0
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: PUSH
1740: LD_INT 26
1742: PUSH
1743: LD_INT 197
1745: PUSH
1746: LD_INT 81
1748: PUSH
1749: LD_INT 1
1751: PUSH
1752: LD_INT 2
1754: PUSH
1755: LD_INT 3
1757: PUSH
1758: LD_INT 0
1760: PUSH
1761: LD_INT 0
1763: PUSH
1764: LD_INT 0
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 26
1780: PUSH
1781: LD_INT 197
1783: PUSH
1784: LD_INT 78
1786: PUSH
1787: LD_INT 3
1789: PUSH
1790: LD_INT 2
1792: PUSH
1793: LD_INT 3
1795: PUSH
1796: LD_INT 0
1798: PUSH
1799: LD_INT 0
1801: PUSH
1802: LD_INT 0
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: ADD
1832: ST_TO_ADDR
// if hasRadar then
1833: LD_VAR 0 5
1837: IFFALSE 1901
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1839: LD_ADDR_VAR 0 4
1843: PUSH
1844: LD_VAR 0 4
1848: PPUSH
1849: LD_VAR 0 4
1853: PUSH
1854: LD_INT 1
1856: PLUS
1857: PPUSH
1858: LD_INT 20
1860: PUSH
1861: LD_INT 203
1863: PUSH
1864: LD_INT 87
1866: PUSH
1867: LD_INT 3
1869: PUSH
1870: LD_INT 2
1872: PUSH
1873: LD_INT 3
1875: PUSH
1876: LD_INT 0
1878: PUSH
1879: LD_INT 0
1881: PUSH
1882: LD_INT 0
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: PPUSH
1896: CALL_OW 1
1900: ST_TO_ADDR
// if hasRemote then
1901: LD_VAR 0 6
1905: IFFALSE 1969
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1907: LD_ADDR_VAR 0 4
1911: PUSH
1912: LD_VAR 0 4
1916: PPUSH
1917: LD_VAR 0 4
1921: PUSH
1922: LD_INT 1
1924: PLUS
1925: PPUSH
1926: LD_INT 22
1928: PUSH
1929: LD_INT 207
1931: PUSH
1932: LD_INT 95
1934: PUSH
1935: LD_INT 5
1937: PUSH
1938: LD_INT 2
1940: PUSH
1941: LD_INT 3
1943: PUSH
1944: LD_INT 0
1946: PUSH
1947: LD_INT 0
1949: PUSH
1950: LD_INT 0
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: PPUSH
1964: CALL_OW 1
1968: ST_TO_ADDR
// for i in base do
1969: LD_ADDR_VAR 0 2
1973: PUSH
1974: LD_VAR 0 4
1978: PUSH
1979: FOR_IN
1980: IFFALSE 2319
// begin if HexInfo ( i [ 2 ] , i [ 3 ] ) then
1982: LD_VAR 0 2
1986: PUSH
1987: LD_INT 2
1989: ARRAY
1990: PPUSH
1991: LD_VAR 0 2
1995: PUSH
1996: LD_INT 3
1998: ARRAY
1999: PPUSH
2000: CALL_OW 428
2004: IFFALSE 2008
// continue ;
2006: GO 1979
// uc_nation := i [ 5 ] ;
2008: LD_ADDR_OWVAR 21
2012: PUSH
2013: LD_VAR 0 2
2017: PUSH
2018: LD_INT 5
2020: ARRAY
2021: ST_TO_ADDR
// InitBc ;
2022: CALL_OW 21
// bc_type := i [ 1 ] ;
2026: LD_ADDR_OWVAR 42
2030: PUSH
2031: LD_VAR 0 2
2035: PUSH
2036: LD_INT 1
2038: ARRAY
2039: ST_TO_ADDR
// bc_level := i [ 6 ] ;
2040: LD_ADDR_OWVAR 43
2044: PUSH
2045: LD_VAR 0 2
2049: PUSH
2050: LD_INT 6
2052: ARRAY
2053: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 5 ] = nation_arabian and not i [ 8 ] then
2054: LD_VAR 0 2
2058: PUSH
2059: LD_INT 1
2061: ARRAY
2062: PUSH
2063: LD_INT 8
2065: EQUAL
2066: PUSH
2067: LD_VAR 0 2
2071: PUSH
2072: LD_INT 5
2074: ARRAY
2075: PUSH
2076: LD_INT 2
2078: EQUAL
2079: AND
2080: PUSH
2081: LD_VAR 0 2
2085: PUSH
2086: LD_INT 8
2088: ARRAY
2089: NOT
2090: AND
2091: IFFALSE 2126
// begin bc_kind1 := b_lab_weapon ;
2093: LD_ADDR_OWVAR 44
2097: PUSH
2098: LD_INT 10
2100: ST_TO_ADDR
// if hasRadar then
2101: LD_VAR 0 5
2105: IFFALSE 2117
// bc_kind2 := b_lab_opto else
2107: LD_ADDR_OWVAR 45
2111: PUSH
2112: LD_INT 15
2114: ST_TO_ADDR
2115: GO 2126
// bc_kind2 := - 1 ;
2117: LD_ADDR_OWVAR 45
2121: PUSH
2122: LD_INT 1
2124: NEG
2125: ST_TO_ADDR
// end ; if i [ 1 ] in [ b_lab_half , b_lab_full ] and i [ 7 ] then
2126: LD_VAR 0 2
2130: PUSH
2131: LD_INT 1
2133: ARRAY
2134: PUSH
2135: LD_INT 7
2137: PUSH
2138: LD_INT 8
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: IN
2145: PUSH
2146: LD_VAR 0 2
2150: PUSH
2151: LD_INT 7
2153: ARRAY
2154: AND
2155: IFFALSE 2171
// bc_kind1 := i [ 7 ] ;
2157: LD_ADDR_OWVAR 44
2161: PUSH
2162: LD_VAR 0 2
2166: PUSH
2167: LD_INT 7
2169: ARRAY
2170: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 8 ] then
2171: LD_VAR 0 2
2175: PUSH
2176: LD_INT 1
2178: ARRAY
2179: PUSH
2180: LD_INT 8
2182: EQUAL
2183: PUSH
2184: LD_VAR 0 2
2188: PUSH
2189: LD_INT 8
2191: ARRAY
2192: AND
2193: IFFALSE 2209
// bc_kind1 := i [ 8 ] ;
2195: LD_ADDR_OWVAR 44
2199: PUSH
2200: LD_VAR 0 2
2204: PUSH
2205: LD_INT 8
2207: ARRAY
2208: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2209: LD_ADDR_VAR 0 3
2213: PUSH
2214: LD_VAR 0 2
2218: PUSH
2219: LD_INT 2
2221: ARRAY
2222: PPUSH
2223: LD_VAR 0 2
2227: PUSH
2228: LD_INT 3
2230: ARRAY
2231: PPUSH
2232: LD_VAR 0 2
2236: PUSH
2237: LD_INT 4
2239: ARRAY
2240: PPUSH
2241: CALL_OW 47
2245: ST_TO_ADDR
// if i [ 9 ] then
2246: LD_VAR 0 2
2250: PUSH
2251: LD_INT 9
2253: ARRAY
2254: IFFALSE 2274
// PlaceWeaponTurret ( b , i [ 9 ] ) ;
2256: LD_VAR 0 3
2260: PPUSH
2261: LD_VAR 0 2
2265: PUSH
2266: LD_INT 9
2268: ARRAY
2269: PPUSH
2270: CALL_OW 431
// if i [ 1 ] = b_bunker then
2274: LD_VAR 0 2
2278: PUSH
2279: LD_INT 1
2281: ARRAY
2282: PUSH
2283: LD_INT 32
2285: EQUAL
2286: IFFALSE 2317
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
2288: LD_ADDR_VAR 0 11
2292: PUSH
2293: LD_VAR 0 11
2297: PPUSH
2298: LD_VAR 0 11
2302: PUSH
2303: LD_INT 1
2305: PLUS
2306: PPUSH
2307: LD_VAR 0 3
2311: PPUSH
2312: CALL_OW 1
2316: ST_TO_ADDR
// end ;
2317: GO 1979
2319: POP
2320: POP
// depot := HexInfo ( 206 , 80 ) ;
2321: LD_ADDR_VAR 0 9
2325: PUSH
2326: LD_INT 206
2328: PPUSH
2329: LD_INT 80
2331: PPUSH
2332: CALL_OW 428
2336: ST_TO_ADDR
// factory := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) ;
2337: LD_ADDR_VAR 0 8
2341: PUSH
2342: LD_INT 22
2344: PUSH
2345: LD_INT 2
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PUSH
2352: LD_INT 30
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PPUSH
2366: CALL_OW 69
2370: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2371: LD_ADDR_VAR 0 10
2375: PUSH
2376: LD_INT 22
2378: PUSH
2379: LD_INT 2
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: PUSH
2386: LD_INT 2
2388: PUSH
2389: LD_INT 30
2391: PUSH
2392: LD_INT 6
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: LD_INT 30
2401: PUSH
2402: LD_INT 7
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: PUSH
2409: LD_INT 30
2411: PUSH
2412: LD_INT 8
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PPUSH
2429: CALL_OW 69
2433: ST_TO_ADDR
// arDepot := depot ;
2434: LD_ADDR_EXP 47
2438: PUSH
2439: LD_VAR 0 9
2443: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 190 , 150 ] [ Difficulty ] ) ;
2444: LD_VAR 0 9
2448: PPUSH
2449: CALL_OW 274
2453: PPUSH
2454: LD_INT 1
2456: PPUSH
2457: LD_INT 360
2459: PUSH
2460: LD_INT 260
2462: PUSH
2463: LD_INT 190
2465: PUSH
2466: LD_INT 150
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: PUSH
2475: LD_OWVAR 67
2479: ARRAY
2480: PPUSH
2481: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 150 , 120 ] [ Difficulty ] ) ;
2485: LD_VAR 0 9
2489: PPUSH
2490: CALL_OW 274
2494: PPUSH
2495: LD_INT 2
2497: PPUSH
2498: LD_INT 200
2500: PUSH
2501: LD_INT 170
2503: PUSH
2504: LD_INT 150
2506: PUSH
2507: LD_INT 120
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: PUSH
2516: LD_OWVAR 67
2520: ARRAY
2521: PPUSH
2522: CALL_OW 277
// uc_nation := 2 ;
2526: LD_ADDR_OWVAR 21
2530: PUSH
2531: LD_INT 2
2533: ST_TO_ADDR
// uc_side := 2 ;
2534: LD_ADDR_OWVAR 20
2538: PUSH
2539: LD_INT 2
2541: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
2542: LD_INT 13
2544: PPUSH
2545: LD_INT 1
2547: PPUSH
2548: LD_INT 1
2550: PPUSH
2551: LD_INT 27
2553: PPUSH
2554: LD_INT 33
2556: PPUSH
2557: CALL 32841 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
2561: CALL_OW 45
2565: PPUSH
2566: LD_INT 190
2568: PPUSH
2569: LD_INT 64
2571: PPUSH
2572: LD_INT 5
2574: PPUSH
2575: LD_INT 0
2577: PPUSH
2578: CALL 67415 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
2582: LD_INT 13
2584: PPUSH
2585: LD_INT 1
2587: PPUSH
2588: LD_INT 1
2590: PPUSH
2591: LD_INT 25
2593: PPUSH
2594: LD_INT 22
2596: PPUSH
2597: CALL 32841 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
2601: CALL_OW 45
2605: PPUSH
2606: LD_INT 188
2608: PPUSH
2609: LD_INT 67
2611: PPUSH
2612: LD_INT 5
2614: PPUSH
2615: LD_INT 0
2617: PPUSH
2618: CALL 67415 0 5
// if hasRemote then
2622: LD_VAR 0 6
2626: IFFALSE 2708
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
2628: LD_INT 13
2630: PPUSH
2631: LD_INT 1
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 31
2639: PPUSH
2640: LD_INT 35
2642: PPUSH
2643: CALL 32841 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
2647: CALL_OW 45
2651: PPUSH
2652: LD_INT 191
2654: PPUSH
2655: LD_INT 71
2657: PPUSH
2658: LD_INT 5
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: CALL 67415 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
2668: LD_INT 14
2670: PPUSH
2671: LD_INT 1
2673: PPUSH
2674: LD_INT 2
2676: PPUSH
2677: LD_INT 27
2679: PPUSH
2680: LD_INT 55
2682: PPUSH
2683: CALL 32841 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
2687: CALL_OW 45
2691: PPUSH
2692: LD_INT 199
2694: PPUSH
2695: LD_INT 67
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: LD_INT 0
2703: PPUSH
2704: CALL 67415 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
2708: LD_EXP 33
2712: PPUSH
2713: LD_INT 213
2715: PPUSH
2716: LD_INT 87
2718: PPUSH
2719: LD_INT 0
2721: PPUSH
2722: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
2726: LD_EXP 33
2730: PPUSH
2731: LD_INT 214
2733: PPUSH
2734: LD_INT 87
2736: PPUSH
2737: CALL_OW 118
// if Kaia then
2741: LD_EXP 38
2745: IFFALSE 2780
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
2747: LD_EXP 38
2751: PPUSH
2752: LD_INT 213
2754: PPUSH
2755: LD_INT 85
2757: PPUSH
2758: LD_INT 0
2760: PPUSH
2761: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
2765: LD_EXP 38
2769: PPUSH
2770: LD_INT 215
2772: PPUSH
2773: LD_INT 87
2775: PPUSH
2776: CALL_OW 118
// end ; if Olaf and Kaia then
2780: LD_EXP 42
2784: PUSH
2785: LD_EXP 38
2789: AND
2790: IFFALSE 2827
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
2792: LD_EXP 42
2796: PPUSH
2797: LD_INT 215
2799: PPUSH
2800: LD_INT 87
2802: PPUSH
2803: LD_INT 0
2805: PPUSH
2806: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
2810: LD_EXP 42
2814: PPUSH
2815: LD_INT 213
2817: PPUSH
2818: LD_INT 85
2820: PPUSH
2821: CALL_OW 118
// end else
2825: GO 2847
// if Olaf then
2827: LD_EXP 42
2831: IFFALSE 2847
// PlaceHumanInUnit ( Olaf , factory ) ;
2833: LD_EXP 42
2837: PPUSH
2838: LD_VAR 0 8
2842: PPUSH
2843: CALL_OW 52
// if Givi then
2847: LD_EXP 34
2851: IFFALSE 2932
// begin if Kaia and Olaf then
2853: LD_EXP 38
2857: PUSH
2858: LD_EXP 42
2862: AND
2863: IFFALSE 2900
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2865: LD_EXP 34
2869: PPUSH
2870: LD_INT 247
2872: PPUSH
2873: LD_INT 117
2875: PPUSH
2876: LD_INT 0
2878: PPUSH
2879: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2883: LD_EXP 34
2887: PPUSH
2888: LD_INT 248
2890: PPUSH
2891: LD_INT 118
2893: PPUSH
2894: CALL_OW 118
// end else
2898: GO 2932
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2900: LD_EXP 34
2904: PPUSH
2905: LD_INT 216
2907: PPUSH
2908: LD_INT 88
2910: PPUSH
2911: LD_INT 0
2913: PPUSH
2914: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2918: LD_EXP 34
2922: PPUSH
2923: LD_EXP 33
2927: PPUSH
2928: CALL_OW 119
// end ; end ; if Kurt then
2932: LD_EXP 44
2936: IFFALSE 2956
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2938: LD_EXP 44
2942: PPUSH
2943: LD_VAR 0 11
2947: PUSH
2948: LD_INT 2
2950: ARRAY
2951: PPUSH
2952: CALL_OW 52
// if Mike then
2956: LD_EXP 35
2960: IFFALSE 2980
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2962: LD_EXP 35
2966: PPUSH
2967: LD_VAR 0 11
2971: PUSH
2972: LD_INT 3
2974: ARRAY
2975: PPUSH
2976: CALL_OW 52
// if Kamil then
2980: LD_EXP 37
2984: IFFALSE 3046
// begin if Kaia and Olaf then
2986: LD_EXP 38
2990: PUSH
2991: LD_EXP 42
2995: AND
2996: IFFALSE 3014
// PlaceHumanInUnit ( Kamil , depot ) else
2998: LD_EXP 37
3002: PPUSH
3003: LD_VAR 0 9
3007: PPUSH
3008: CALL_OW 52
3012: GO 3046
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
3014: LD_EXP 37
3018: PPUSH
3019: LD_INT 213
3021: PPUSH
3022: LD_INT 87
3024: PPUSH
3025: LD_INT 0
3027: PPUSH
3028: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
3032: LD_EXP 37
3036: PPUSH
3037: LD_EXP 33
3041: PPUSH
3042: CALL_OW 119
// end ; end ; if Sophia then
3046: LD_EXP 39
3050: IFFALSE 3066
// PlaceHumanInUnit ( Sophia , depot ) ;
3052: LD_EXP 39
3056: PPUSH
3057: LD_VAR 0 9
3061: PPUSH
3062: CALL_OW 52
// if Aviradze then
3066: LD_EXP 45
3070: IFFALSE 3119
// if lab then
3072: LD_VAR 0 10
3076: IFFALSE 3098
// PlaceHumanInUnit ( Aviradze , lab [ 1 ] ) else
3078: LD_EXP 45
3082: PPUSH
3083: LD_VAR 0 10
3087: PUSH
3088: LD_INT 1
3090: ARRAY
3091: PPUSH
3092: CALL_OW 52
3096: GO 3119
// PlaceUnitXYR ( Aviradze , 210 , 87 , 3 , false ) ;
3098: LD_EXP 45
3102: PPUSH
3103: LD_INT 210
3105: PPUSH
3106: LD_INT 87
3108: PPUSH
3109: LD_INT 3
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 50
// if Ibrahim then
3119: LD_EXP 36
3123: IFFALSE 3172
// if lab then
3125: LD_VAR 0 10
3129: IFFALSE 3151
// PlaceHumanInUnit ( Ibrahim , lab [ 1 ] ) else
3131: LD_EXP 36
3135: PPUSH
3136: LD_VAR 0 10
3140: PUSH
3141: LD_INT 1
3143: ARRAY
3144: PPUSH
3145: CALL_OW 52
3149: GO 3172
// PlaceUnitXYR ( Ibrahim , 210 , 87 , 3 , false ) ;
3151: LD_EXP 36
3155: PPUSH
3156: LD_INT 210
3158: PPUSH
3159: LD_INT 87
3161: PPUSH
3162: LD_INT 3
3164: PPUSH
3165: LD_INT 0
3167: PPUSH
3168: CALL_OW 50
// if Markov then
3172: LD_EXP 40
3176: IFFALSE 3225
// if factory then
3178: LD_VAR 0 8
3182: IFFALSE 3204
// PlaceHumanInUnit ( Markov , factory [ 1 ] ) else
3184: LD_EXP 40
3188: PPUSH
3189: LD_VAR 0 8
3193: PUSH
3194: LD_INT 1
3196: ARRAY
3197: PPUSH
3198: CALL_OW 52
3202: GO 3225
// PlaceUnitXYR ( Markov , 210 , 87 , 3 , false ) ;
3204: LD_EXP 40
3208: PPUSH
3209: LD_INT 210
3211: PPUSH
3212: LD_INT 87
3214: PPUSH
3215: LD_INT 3
3217: PPUSH
3218: LD_INT 0
3220: PPUSH
3221: CALL_OW 50
// if heikeSecondSquad then
3225: LD_EXP 48
3229: IFFALSE 3269
// for i in heikeSecondSquad do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: LD_EXP 48
3240: PUSH
3241: FOR_IN
3242: IFFALSE 3267
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
3244: LD_VAR 0 2
3248: PPUSH
3249: LD_INT 190
3251: PPUSH
3252: LD_INT 65
3254: PPUSH
3255: LD_INT 5
3257: PPUSH
3258: LD_INT 0
3260: PPUSH
3261: CALL_OW 50
3265: GO 3241
3267: POP
3268: POP
// if heikeApes then
3269: LD_EXP 49
3273: IFFALSE 3313
// for i in heikeApes do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: LD_EXP 49
3284: PUSH
3285: FOR_IN
3286: IFFALSE 3311
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
3288: LD_VAR 0 2
3292: PPUSH
3293: LD_INT 190
3295: PPUSH
3296: LD_INT 70
3298: PPUSH
3299: LD_INT 5
3301: PPUSH
3302: LD_INT 0
3304: PPUSH
3305: CALL_OW 50
3309: GO 3285
3311: POP
3312: POP
// end ;
3313: LD_VAR 0 1
3317: RET
// export function PrepareRolfSquad ; var i , j ; begin
3318: LD_INT 0
3320: PPUSH
3321: PPUSH
3322: PPUSH
// uc_side := 8 ;
3323: LD_ADDR_OWVAR 20
3327: PUSH
3328: LD_INT 8
3330: ST_TO_ADDR
// uc_nation := 2 ;
3331: LD_ADDR_OWVAR 21
3335: PUSH
3336: LD_INT 2
3338: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
3339: LD_ADDR_EXP 46
3343: PUSH
3344: LD_STRING Bergkamp
3346: PPUSH
3347: CALL_OW 25
3351: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
3352: LD_ADDR_EXP 50
3356: PUSH
3357: LD_EXP 46
3361: PUSH
3362: EMPTY
3363: LIST
3364: ST_TO_ADDR
// for i := 1 to 4 do
3365: LD_ADDR_VAR 0 2
3369: PUSH
3370: DOUBLE
3371: LD_INT 1
3373: DEC
3374: ST_TO_ADDR
3375: LD_INT 4
3377: PUSH
3378: FOR_TO
3379: IFFALSE 3459
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
3381: LD_ADDR_VAR 0 3
3385: PUSH
3386: DOUBLE
3387: LD_INT 1
3389: DEC
3390: ST_TO_ADDR
3391: LD_INT 5
3393: PUSH
3394: LD_INT 2
3396: PUSH
3397: LD_INT 3
3399: PUSH
3400: LD_INT 1
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: PUSH
3409: LD_VAR 0 2
3413: ARRAY
3414: PUSH
3415: FOR_TO
3416: IFFALSE 3455
// begin PrepareHuman ( false , i , 5 ) ;
3418: LD_INT 0
3420: PPUSH
3421: LD_VAR 0 2
3425: PPUSH
3426: LD_INT 5
3428: PPUSH
3429: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
3433: LD_ADDR_EXP 50
3437: PUSH
3438: LD_EXP 50
3442: PPUSH
3443: CALL_OW 44
3447: PPUSH
3448: CALL 65275 0 2
3452: ST_TO_ADDR
// end ;
3453: GO 3415
3455: POP
3456: POP
// end ;
3457: GO 3378
3459: POP
3460: POP
// if HexInfo ( 5 , 3 ) then
3461: LD_INT 5
3463: PPUSH
3464: LD_INT 3
3466: PPUSH
3467: CALL_OW 428
3471: IFFALSE 3488
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
3473: LD_INT 5
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: CALL_OW 428
3483: PPUSH
3484: CALL_OW 64
// for i in rolfSquad do
3488: LD_ADDR_VAR 0 2
3492: PUSH
3493: LD_EXP 50
3497: PUSH
3498: FOR_IN
3499: IFFALSE 3635
// begin uc_direction := 2 ;
3501: LD_ADDR_OWVAR 24
3505: PUSH
3506: LD_INT 2
3508: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
3509: LD_VAR 0 2
3513: PPUSH
3514: CALL_OW 257
3518: PUSH
3519: LD_INT 3
3521: EQUAL
3522: IFFALSE 3596
// begin uc_side := 8 ;
3524: LD_ADDR_OWVAR 20
3528: PUSH
3529: LD_INT 8
3531: ST_TO_ADDR
// uc_nation := 2 ;
3532: LD_ADDR_OWVAR 21
3536: PUSH
3537: LD_INT 2
3539: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
3540: LD_INT 13
3542: PPUSH
3543: LD_INT 1
3545: PPUSH
3546: LD_INT 1
3548: PPUSH
3549: LD_INT 27
3551: PPUSH
3552: LD_INT 88
3554: PPUSH
3555: CALL 32841 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
3559: CALL_OW 45
3563: PPUSH
3564: LD_INT 11
3566: PPUSH
3567: LD_INT 0
3569: PPUSH
3570: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
3574: LD_VAR 0 2
3578: PPUSH
3579: LD_INT 5
3581: PPUSH
3582: LD_INT 3
3584: PPUSH
3585: CALL_OW 428
3589: PPUSH
3590: CALL_OW 52
// end else
3594: GO 3611
// PlaceUnitArea ( i , northSpawn , false ) ;
3596: LD_VAR 0 2
3600: PPUSH
3601: LD_INT 11
3603: PPUSH
3604: LD_INT 0
3606: PPUSH
3607: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
3611: LD_VAR 0 2
3615: PPUSH
3616: LD_INT 29
3618: PPUSH
3619: LD_INT 10
3621: PPUSH
3622: CALL_OW 111
// wait ( 0 0$2 ) ;
3626: LD_INT 70
3628: PPUSH
3629: CALL_OW 67
// end ;
3633: GO 3498
3635: POP
3636: POP
// wait ( 0 0$5 ) ;
3637: LD_INT 175
3639: PPUSH
3640: CALL_OW 67
// end ;
3644: LD_VAR 0 1
3648: RET
// export function PrepareRolfBase ; var i , tmp ; begin
3649: LD_INT 0
3651: PPUSH
3652: PPUSH
3653: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
3654: LD_EXP 46
3658: PPUSH
3659: LD_INT 94
3661: PPUSH
3662: LD_INT 63
3664: PPUSH
3665: CALL_OW 428
3669: PPUSH
3670: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_INT 4
3681: PUSH
3682: LD_INT 82
3684: PUSH
3685: LD_INT 64
3687: PUSH
3688: LD_INT 1
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 31
3699: PUSH
3700: LD_INT 73
3702: PUSH
3703: LD_INT 58
3705: PUSH
3706: LD_INT 0
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: ST_TO_ADDR
// for i in tmp do
3719: LD_ADDR_VAR 0 2
3723: PUSH
3724: LD_VAR 0 3
3728: PUSH
3729: FOR_IN
3730: IFFALSE 3794
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3732: LD_EXP 50
3736: PPUSH
3737: LD_INT 25
3739: PUSH
3740: LD_INT 2
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: PPUSH
3747: CALL_OW 72
3751: PPUSH
3752: LD_VAR 0 2
3756: PUSH
3757: LD_INT 1
3759: ARRAY
3760: PPUSH
3761: LD_VAR 0 2
3765: PUSH
3766: LD_INT 2
3768: ARRAY
3769: PPUSH
3770: LD_VAR 0 2
3774: PUSH
3775: LD_INT 3
3777: ARRAY
3778: PPUSH
3779: LD_VAR 0 2
3783: PUSH
3784: LD_INT 4
3786: ARRAY
3787: PPUSH
3788: CALL_OW 205
3792: GO 3729
3794: POP
3795: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
3796: LD_EXP 50
3800: PUSH
3801: LD_INT 2
3803: ARRAY
3804: PPUSH
3805: LD_INT 63
3807: PPUSH
3808: LD_INT 42
3810: PPUSH
3811: CALL_OW 428
3815: PPUSH
3816: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
3820: LD_EXP 50
3824: PUSH
3825: LD_INT 3
3827: ARRAY
3828: PPUSH
3829: LD_INT 94
3831: PPUSH
3832: LD_INT 63
3834: PPUSH
3835: CALL_OW 428
3839: PPUSH
3840: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3844: LD_INT 35
3846: PPUSH
3847: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
3851: LD_EXP 50
3855: PPUSH
3856: LD_INT 25
3858: PUSH
3859: LD_INT 2
3861: PUSH
3862: EMPTY
3863: LIST
3864: LIST
3865: PUSH
3866: LD_INT 3
3868: PUSH
3869: LD_INT 60
3871: PUSH
3872: EMPTY
3873: LIST
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: PPUSH
3883: CALL_OW 72
3887: IFFALSE 3844
// rolfScriptBase := true ;
3889: LD_ADDR_EXP 9
3893: PUSH
3894: LD_INT 1
3896: ST_TO_ADDR
// end ;
3897: LD_VAR 0 1
3901: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
3902: LD_EXP 9
3906: PUSH
3907: LD_EXP 46
3911: PPUSH
3912: CALL_OW 255
3916: PUSH
3917: LD_INT 8
3919: EQUAL
3920: AND
3921: IFFALSE 4928
3923: GO 3925
3925: DISABLE
3926: LD_INT 0
3928: PPUSH
3929: PPUSH
3930: PPUSH
3931: PPUSH
3932: PPUSH
3933: PPUSH
3934: PPUSH
3935: PPUSH
3936: PPUSH
3937: PPUSH
// begin enable ;
3938: ENABLE
// if not rolfSquad then
3939: LD_EXP 50
3943: NOT
3944: IFFALSE 3948
// exit ;
3946: GO 4928
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
3948: LD_ADDR_VAR 0 9
3952: PUSH
3953: LD_INT 12
3955: PPUSH
3956: LD_INT 81
3958: PUSH
3959: LD_INT 8
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PPUSH
3966: CALL_OW 70
3970: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
3971: LD_ADDR_VAR 0 5
3975: PUSH
3976: LD_EXP 50
3980: PPUSH
3981: LD_INT 25
3983: PUSH
3984: LD_INT 1
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PPUSH
3991: CALL_OW 72
3995: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3996: LD_ADDR_VAR 0 6
4000: PUSH
4001: LD_EXP 50
4005: PPUSH
4006: LD_INT 25
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PPUSH
4016: CALL_OW 72
4020: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
4021: LD_ADDR_VAR 0 8
4025: PUSH
4026: LD_EXP 50
4030: PPUSH
4031: LD_INT 25
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: PPUSH
4041: CALL_OW 72
4045: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
4046: LD_ADDR_VAR 0 7
4050: PUSH
4051: LD_EXP 50
4055: PPUSH
4056: LD_INT 25
4058: PUSH
4059: LD_INT 4
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: PPUSH
4066: CALL_OW 72
4070: ST_TO_ADDR
// if sol then
4071: LD_VAR 0 5
4075: IFFALSE 4373
// for i in sol union Rolf do
4077: LD_ADDR_VAR 0 1
4081: PUSH
4082: LD_VAR 0 5
4086: PUSH
4087: LD_EXP 46
4091: UNION
4092: PUSH
4093: FOR_IN
4094: IFFALSE 4371
// if not IsInUnit ( i ) and not HasTask ( i ) then
4096: LD_VAR 0 1
4100: PPUSH
4101: CALL_OW 310
4105: NOT
4106: PUSH
4107: LD_VAR 0 1
4111: PPUSH
4112: CALL_OW 314
4116: NOT
4117: AND
4118: IFFALSE 4369
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
4120: LD_VAR 0 1
4124: PPUSH
4125: CALL_OW 256
4129: PUSH
4130: LD_INT 500
4132: LESS
4133: PUSH
4134: LD_VAR 0 1
4138: PPUSH
4139: LD_INT 80
4141: PPUSH
4142: LD_INT 49
4144: PPUSH
4145: CALL_OW 297
4149: PUSH
4150: LD_INT 6
4152: GREATER
4153: AND
4154: IFFALSE 4173
// begin ComMoveXY ( i , 80 , 49 ) ;
4156: LD_VAR 0 1
4160: PPUSH
4161: LD_INT 80
4163: PPUSH
4164: LD_INT 49
4166: PPUSH
4167: CALL_OW 111
// continue ;
4171: GO 4093
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4173: LD_ADDR_VAR 0 4
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 8
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 50
4190: PUSH
4191: EMPTY
4192: LIST
4193: PUSH
4194: LD_INT 2
4196: PUSH
4197: LD_INT 30
4199: PUSH
4200: LD_INT 4
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 30
4209: PUSH
4210: LD_INT 5
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 30
4219: PUSH
4220: LD_INT 32
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: LD_INT 30
4229: PUSH
4230: LD_INT 31
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: PPUSH
4249: CALL_OW 69
4253: ST_TO_ADDR
// if tmp then
4254: LD_VAR 0 4
4258: IFFALSE 4369
// begin for b in tmp do
4260: LD_ADDR_VAR 0 2
4264: PUSH
4265: LD_VAR 0 4
4269: PUSH
4270: FOR_IN
4271: IFFALSE 4367
// begin case GetBType ( b ) of b_armoury , b_barracks :
4273: LD_VAR 0 2
4277: PPUSH
4278: CALL_OW 266
4282: PUSH
4283: LD_INT 4
4285: DOUBLE
4286: EQUAL
4287: IFTRUE 4297
4289: LD_INT 5
4291: DOUBLE
4292: EQUAL
4293: IFTRUE 4297
4295: GO 4308
4297: POP
// p := 6 ; b_breastwork , b_bunker :
4298: LD_ADDR_VAR 0 3
4302: PUSH
4303: LD_INT 6
4305: ST_TO_ADDR
4306: GO 4334
4308: LD_INT 31
4310: DOUBLE
4311: EQUAL
4312: IFTRUE 4322
4314: LD_INT 32
4316: DOUBLE
4317: EQUAL
4318: IFTRUE 4322
4320: GO 4333
4322: POP
// p := 1 ; end ;
4323: LD_ADDR_VAR 0 3
4327: PUSH
4328: LD_INT 1
4330: ST_TO_ADDR
4331: GO 4334
4333: POP
// if UnitsInside ( b ) < p then
4334: LD_VAR 0 2
4338: PPUSH
4339: CALL_OW 313
4343: PUSH
4344: LD_VAR 0 3
4348: LESS
4349: IFFALSE 4365
// ComEnterUnit ( i , b ) ;
4351: LD_VAR 0 1
4355: PPUSH
4356: LD_VAR 0 2
4360: PPUSH
4361: CALL_OW 120
// end ;
4365: GO 4270
4367: POP
4368: POP
// end ; end ;
4369: GO 4093
4371: POP
4372: POP
// if sci then
4373: LD_VAR 0 7
4377: IFFALSE 4432
// for i in sci do
4379: LD_ADDR_VAR 0 1
4383: PUSH
4384: LD_VAR 0 7
4388: PUSH
4389: FOR_IN
4390: IFFALSE 4430
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
4392: LD_VAR 0 1
4396: PPUSH
4397: LD_INT 80
4399: PPUSH
4400: LD_INT 49
4402: PPUSH
4403: CALL_OW 297
4407: PUSH
4408: LD_INT 9
4410: GREATER
4411: IFFALSE 4428
// ComMoveXY ( i , 80 , 49 ) ;
4413: LD_VAR 0 1
4417: PPUSH
4418: LD_INT 80
4420: PPUSH
4421: LD_INT 49
4423: PPUSH
4424: CALL_OW 111
// end ;
4428: GO 4389
4430: POP
4431: POP
// if mech then
4432: LD_VAR 0 8
4436: IFFALSE 4650
// for i in mech do
4438: LD_ADDR_VAR 0 1
4442: PUSH
4443: LD_VAR 0 8
4447: PUSH
4448: FOR_IN
4449: IFFALSE 4648
// begin hasVehicle := IsInUnit ( i ) ;
4451: LD_ADDR_VAR 0 10
4455: PUSH
4456: LD_VAR 0 1
4460: PPUSH
4461: CALL_OW 310
4465: ST_TO_ADDR
// if enemyInBase then
4466: LD_VAR 0 9
4470: IFFALSE 4566
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4472: LD_VAR 0 10
4476: PUSH
4477: LD_VAR 0 10
4481: PPUSH
4482: CALL_OW 256
4486: PUSH
4487: LD_INT 500
4489: GREATER
4490: AND
4491: IFFALSE 4519
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4493: LD_VAR 0 10
4497: PPUSH
4498: LD_VAR 0 9
4502: PPUSH
4503: LD_VAR 0 10
4507: PPUSH
4508: CALL_OW 74
4512: PPUSH
4513: CALL_OW 115
4517: GO 4564
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
4519: LD_VAR 0 10
4523: PPUSH
4524: LD_INT 86
4526: PPUSH
4527: LD_INT 49
4529: PPUSH
4530: CALL_OW 297
4534: PUSH
4535: LD_INT 8
4537: GREATER
4538: IFFALSE 4564
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
4540: LD_VAR 0 10
4544: PPUSH
4545: LD_INT 86
4547: PPUSH
4548: LD_INT 49
4550: PPUSH
4551: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
4555: LD_VAR 0 1
4559: PPUSH
4560: CALL 67095 0 1
// end end else
4564: GO 4646
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
4566: LD_VAR 0 1
4570: PPUSH
4571: LD_INT 86
4573: PPUSH
4574: LD_INT 49
4576: PPUSH
4577: CALL_OW 297
4581: PUSH
4582: LD_INT 8
4584: GREATER
4585: IFFALSE 4604
// ComMoveXY ( i , 86 , 49 ) else
4587: LD_VAR 0 1
4591: PPUSH
4592: LD_INT 86
4594: PPUSH
4595: LD_INT 49
4597: PPUSH
4598: CALL_OW 111
4602: GO 4646
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4604: LD_VAR 0 10
4608: PUSH
4609: LD_VAR 0 10
4613: PPUSH
4614: CALL_OW 256
4618: PUSH
4619: LD_INT 1000
4621: LESS
4622: AND
4623: IFFALSE 4646
// begin SetFuel ( hasVehicle , 100 ) ;
4625: LD_VAR 0 10
4629: PPUSH
4630: LD_INT 100
4632: PPUSH
4633: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4637: LD_VAR 0 1
4641: PPUSH
4642: CALL 66975 0 1
// end ; end ; end ;
4646: GO 4448
4648: POP
4649: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4650: LD_ADDR_VAR 0 4
4654: PUSH
4655: LD_INT 12
4657: PPUSH
4658: LD_INT 3
4660: PUSH
4661: LD_INT 24
4663: PUSH
4664: LD_INT 1000
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 21
4677: PUSH
4678: LD_INT 3
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PPUSH
4689: CALL_OW 70
4693: ST_TO_ADDR
// if tmp and eng then
4694: LD_VAR 0 4
4698: PUSH
4699: LD_VAR 0 6
4703: AND
4704: IFFALSE 4810
// begin for i in eng do
4706: LD_ADDR_VAR 0 1
4710: PUSH
4711: LD_VAR 0 6
4715: PUSH
4716: FOR_IN
4717: IFFALSE 4808
// if IsInUnit ( i ) then
4719: LD_VAR 0 1
4723: PPUSH
4724: CALL_OW 310
4728: IFFALSE 4741
// ComExitBuilding ( i ) else
4730: LD_VAR 0 1
4734: PPUSH
4735: CALL_OW 122
4739: GO 4806
// if GetLives ( i ) = 1000 then
4741: LD_VAR 0 1
4745: PPUSH
4746: CALL_OW 256
4750: PUSH
4751: LD_INT 1000
4753: EQUAL
4754: IFFALSE 4776
// ComRepairBuilding ( i , tmp [ 1 ] ) else
4756: LD_VAR 0 1
4760: PPUSH
4761: LD_VAR 0 4
4765: PUSH
4766: LD_INT 1
4768: ARRAY
4769: PPUSH
4770: CALL_OW 130
4774: GO 4806
// if GetLives ( i ) < 700 then
4776: LD_VAR 0 1
4780: PPUSH
4781: CALL_OW 256
4785: PUSH
4786: LD_INT 700
4788: LESS
4789: IFFALSE 4806
// ComMoveXY ( i , 80 , 49 ) ;
4791: LD_VAR 0 1
4795: PPUSH
4796: LD_INT 80
4798: PPUSH
4799: LD_INT 49
4801: PPUSH
4802: CALL_OW 111
4806: GO 4716
4808: POP
4809: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
4810: LD_VAR 0 4
4814: NOT
4815: PUSH
4816: LD_VAR 0 6
4820: PPUSH
4821: LD_INT 3
4823: PUSH
4824: LD_INT 54
4826: PUSH
4827: EMPTY
4828: LIST
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PPUSH
4834: CALL_OW 72
4838: AND
4839: IFFALSE 4928
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
4841: LD_ADDR_VAR 0 1
4845: PUSH
4846: LD_VAR 0 6
4850: PPUSH
4851: LD_INT 3
4853: PUSH
4854: LD_INT 54
4856: PUSH
4857: EMPTY
4858: LIST
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PPUSH
4864: CALL_OW 72
4868: PUSH
4869: FOR_IN
4870: IFFALSE 4926
// if GetLives ( i ) < 1000 then
4872: LD_VAR 0 1
4876: PPUSH
4877: CALL_OW 256
4881: PUSH
4882: LD_INT 1000
4884: LESS
4885: IFFALSE 4904
// ComMoveXY ( i , 80 , 49 ) else
4887: LD_VAR 0 1
4891: PPUSH
4892: LD_INT 80
4894: PPUSH
4895: LD_INT 49
4897: PPUSH
4898: CALL_OW 111
4902: GO 4924
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
4904: LD_VAR 0 1
4908: PPUSH
4909: LD_INT 86
4911: PPUSH
4912: LD_INT 54
4914: PPUSH
4915: CALL_OW 428
4919: PPUSH
4920: CALL_OW 120
4924: GO 4869
4926: POP
4927: POP
// end ;
4928: PPOPN 10
4930: END
// export function PrepareOmarSquad ; var i , j , p ; begin
4931: LD_INT 0
4933: PPUSH
4934: PPUSH
4935: PPUSH
4936: PPUSH
// uc_side := 5 ;
4937: LD_ADDR_OWVAR 20
4941: PUSH
4942: LD_INT 5
4944: ST_TO_ADDR
// uc_nation := 2 ;
4945: LD_ADDR_OWVAR 21
4949: PUSH
4950: LD_INT 2
4952: ST_TO_ADDR
// omarSquad := [ ] ;
4953: LD_ADDR_EXP 51
4957: PUSH
4958: EMPTY
4959: ST_TO_ADDR
// for i := 1 to 4 do
4960: LD_ADDR_VAR 0 2
4964: PUSH
4965: DOUBLE
4966: LD_INT 1
4968: DEC
4969: ST_TO_ADDR
4970: LD_INT 4
4972: PUSH
4973: FOR_TO
4974: IFFALSE 5097
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
4976: LD_ADDR_VAR 0 3
4980: PUSH
4981: DOUBLE
4982: LD_INT 1
4984: DEC
4985: ST_TO_ADDR
4986: LD_INT 6
4988: PUSH
4989: LD_INT 2
4991: PUSH
4992: LD_INT 2
4994: PUSH
4995: LD_EXP 21
4999: PLUS
5000: PUSH
5001: LD_INT 2
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: PUSH
5010: LD_VAR 0 2
5014: ARRAY
5015: PUSH
5016: FOR_TO
5017: IFFALSE 5093
// begin PrepareHuman ( false , i , 5 ) ;
5019: LD_INT 0
5021: PPUSH
5022: LD_VAR 0 2
5026: PPUSH
5027: LD_INT 5
5029: PPUSH
5030: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
5034: LD_ADDR_EXP 51
5038: PUSH
5039: LD_EXP 51
5043: PPUSH
5044: CALL_OW 44
5048: PPUSH
5049: CALL 65275 0 2
5053: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
5054: LD_VAR 0 2
5058: PUSH
5059: LD_INT 1
5061: EQUAL
5062: PUSH
5063: LD_INT 50
5065: PPUSH
5066: CALL_OW 13
5070: AND
5071: IFFALSE 5091
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
5073: LD_EXP 51
5077: PUSH
5078: LD_EXP 51
5082: ARRAY
5083: PPUSH
5084: LD_INT 8
5086: PPUSH
5087: CALL_OW 336
// end ;
5091: GO 5016
5093: POP
5094: POP
// end ;
5095: GO 4973
5097: POP
5098: POP
// if HexInfo ( 340 , 205 ) then
5099: LD_INT 340
5101: PPUSH
5102: LD_INT 205
5104: PPUSH
5105: CALL_OW 428
5109: IFFALSE 5126
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
5111: LD_INT 340
5113: PPUSH
5114: LD_INT 205
5116: PPUSH
5117: CALL_OW 428
5121: PPUSH
5122: CALL_OW 64
// p := 0 ;
5126: LD_ADDR_VAR 0 4
5130: PUSH
5131: LD_INT 0
5133: ST_TO_ADDR
// for i in omarSquad do
5134: LD_ADDR_VAR 0 2
5138: PUSH
5139: LD_EXP 51
5143: PUSH
5144: FOR_IN
5145: IFFALSE 5346
// begin uc_direction := 4 ;
5147: LD_ADDR_OWVAR 24
5151: PUSH
5152: LD_INT 4
5154: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
5155: LD_VAR 0 2
5159: PPUSH
5160: CALL_OW 257
5164: PUSH
5165: LD_INT 3
5167: EQUAL
5168: PUSH
5169: LD_VAR 0 4
5173: PUSH
5174: LD_INT 2
5176: LESS
5177: AND
5178: IFFALSE 5307
// begin p := p + 1 ;
5180: LD_ADDR_VAR 0 4
5184: PUSH
5185: LD_VAR 0 4
5189: PUSH
5190: LD_INT 1
5192: PLUS
5193: ST_TO_ADDR
// uc_side := 5 ;
5194: LD_ADDR_OWVAR 20
5198: PUSH
5199: LD_INT 5
5201: ST_TO_ADDR
// if rand ( 0 , 1 ) then
5202: LD_INT 0
5204: PPUSH
5205: LD_INT 1
5207: PPUSH
5208: CALL_OW 12
5212: IFFALSE 5243
// begin uc_nation := 2 ;
5214: LD_ADDR_OWVAR 21
5218: PUSH
5219: LD_INT 2
5221: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
5222: LD_INT 13
5224: PPUSH
5225: LD_INT 1
5227: PPUSH
5228: LD_INT 1
5230: PPUSH
5231: LD_INT 27
5233: PPUSH
5234: LD_INT 88
5236: PPUSH
5237: CALL 32841 0 5
// end else
5241: GO 5270
// begin uc_nation := 3 ;
5243: LD_ADDR_OWVAR 21
5247: PUSH
5248: LD_INT 3
5250: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
5251: LD_INT 22
5253: PPUSH
5254: LD_INT 1
5256: PPUSH
5257: LD_INT 1
5259: PPUSH
5260: LD_INT 45
5262: PPUSH
5263: LD_INT 88
5265: PPUSH
5266: CALL 32841 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
5270: CALL_OW 45
5274: PPUSH
5275: LD_INT 13
5277: PPUSH
5278: LD_INT 0
5280: PPUSH
5281: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
5285: LD_VAR 0 2
5289: PPUSH
5290: LD_INT 340
5292: PPUSH
5293: LD_INT 205
5295: PPUSH
5296: CALL_OW 428
5300: PPUSH
5301: CALL_OW 52
// end else
5305: GO 5322
// PlaceUnitArea ( i , southSpawn , false ) ;
5307: LD_VAR 0 2
5311: PPUSH
5312: LD_INT 13
5314: PPUSH
5315: LD_INT 0
5317: PPUSH
5318: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
5322: LD_VAR 0 2
5326: PPUSH
5327: LD_INT 333
5329: PPUSH
5330: LD_INT 210
5332: PPUSH
5333: CALL_OW 111
// wait ( 0 0$2 ) ;
5337: LD_INT 70
5339: PPUSH
5340: CALL_OW 67
// end ;
5344: GO 5144
5346: POP
5347: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
5348: LD_EXP 43
5352: PPUSH
5353: LD_INT 340
5355: PPUSH
5356: LD_INT 205
5358: PPUSH
5359: LD_INT 0
5361: PPUSH
5362: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
5366: LD_EXP 43
5370: PPUSH
5371: LD_INT 333
5373: PPUSH
5374: LD_INT 206
5376: PPUSH
5377: CALL_OW 111
// wait ( 0 0$2 ) ;
5381: LD_INT 70
5383: PPUSH
5384: CALL_OW 67
// ComHold ( omarSquad ) ;
5388: LD_EXP 51
5392: PPUSH
5393: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
5397: LD_EXP 43
5401: PUSH
5402: LD_EXP 51
5406: PPUSH
5407: LD_INT 2
5409: PUSH
5410: LD_INT 25
5412: PUSH
5413: LD_INT 1
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: PUSH
5420: LD_INT 25
5422: PUSH
5423: LD_INT 8
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: LIST
5434: PPUSH
5435: CALL_OW 72
5439: UNION
5440: PUSH
5441: LD_INT 22
5443: PUSH
5444: LD_INT 5
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: PUSH
5451: LD_INT 21
5453: PUSH
5454: LD_INT 2
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PPUSH
5465: CALL_OW 69
5469: UNION
5470: PPUSH
5471: LD_INT 315
5473: PPUSH
5474: LD_INT 214
5476: PPUSH
5477: CALL_OW 114
// wait ( 0 0$22 ) ;
5481: LD_INT 770
5483: PPUSH
5484: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
5488: LD_EXP 51
5492: PUSH
5493: LD_EXP 43
5497: UNION
5498: PPUSH
5499: LD_INT 329
5501: PPUSH
5502: LD_INT 231
5504: PPUSH
5505: CALL_OW 114
// end ;
5509: LD_VAR 0 1
5513: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
5514: LD_EXP 10
5518: IFFALSE 6601
5520: GO 5522
5522: DISABLE
5523: LD_INT 0
5525: PPUSH
5526: PPUSH
5527: PPUSH
5528: PPUSH
5529: PPUSH
5530: PPUSH
5531: PPUSH
5532: PPUSH
5533: PPUSH
5534: PPUSH
5535: PPUSH
// begin enable ;
5536: ENABLE
// if not omarSquad then
5537: LD_EXP 51
5541: NOT
5542: IFFALSE 5546
// exit ;
5544: GO 6601
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
5546: LD_ADDR_VAR 0 10
5550: PUSH
5551: LD_INT 14
5553: PPUSH
5554: LD_INT 81
5556: PUSH
5557: LD_INT 5
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: PPUSH
5564: CALL_OW 70
5568: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
5569: LD_ADDR_VAR 0 6
5573: PUSH
5574: LD_EXP 51
5578: PPUSH
5579: LD_INT 2
5581: PUSH
5582: LD_INT 25
5584: PUSH
5585: LD_INT 1
5587: PUSH
5588: EMPTY
5589: LIST
5590: LIST
5591: PUSH
5592: LD_INT 25
5594: PUSH
5595: LD_INT 8
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: LIST
5606: PPUSH
5607: CALL_OW 72
5611: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
5612: LD_ADDR_VAR 0 7
5616: PUSH
5617: LD_EXP 51
5621: PPUSH
5622: LD_INT 25
5624: PUSH
5625: LD_INT 2
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: PPUSH
5632: CALL_OW 72
5636: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
5637: LD_ADDR_VAR 0 9
5641: PUSH
5642: LD_EXP 51
5646: PPUSH
5647: LD_INT 25
5649: PUSH
5650: LD_INT 3
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PPUSH
5657: CALL_OW 72
5661: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
5662: LD_ADDR_VAR 0 8
5666: PUSH
5667: LD_EXP 51
5671: PPUSH
5672: LD_INT 25
5674: PUSH
5675: LD_INT 4
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PPUSH
5682: CALL_OW 72
5686: ST_TO_ADDR
// if sol then
5687: LD_VAR 0 6
5691: IFFALSE 6055
// for i in sol do
5693: LD_ADDR_VAR 0 1
5697: PUSH
5698: LD_VAR 0 6
5702: PUSH
5703: FOR_IN
5704: IFFALSE 6053
// if not HasTask ( i ) then
5706: LD_VAR 0 1
5710: PPUSH
5711: CALL_OW 314
5715: NOT
5716: IFFALSE 6051
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 310
5727: NOT
5728: PUSH
5729: LD_VAR 0 1
5733: PPUSH
5734: CALL_OW 256
5738: PUSH
5739: LD_INT 500
5741: LESS
5742: AND
5743: PUSH
5744: LD_VAR 0 1
5748: PPUSH
5749: LD_INT 333
5751: PPUSH
5752: LD_INT 234
5754: PPUSH
5755: CALL_OW 297
5759: PUSH
5760: LD_INT 6
5762: GREATER
5763: AND
5764: IFFALSE 5783
// begin ComMoveXY ( i , 333 , 234 ) ;
5766: LD_VAR 0 1
5770: PPUSH
5771: LD_INT 333
5773: PPUSH
5774: LD_INT 234
5776: PPUSH
5777: CALL_OW 111
// continue ;
5781: GO 5703
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
5783: LD_ADDR_VAR 0 5
5787: PUSH
5788: LD_INT 22
5790: PUSH
5791: LD_INT 5
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 58
5800: PUSH
5801: EMPTY
5802: LIST
5803: PUSH
5804: LD_INT 50
5806: PUSH
5807: EMPTY
5808: LIST
5809: PUSH
5810: LD_INT 2
5812: PUSH
5813: LD_INT 30
5815: PUSH
5816: LD_INT 32
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: LD_INT 30
5825: PUSH
5826: LD_INT 31
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: LIST
5837: PUSH
5838: EMPTY
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: PPUSH
5844: CALL_OW 69
5848: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
5849: LD_VAR 0 5
5853: PUSH
5854: LD_VAR 0 1
5858: PPUSH
5859: CALL_OW 310
5863: PPUSH
5864: CALL_OW 266
5868: PUSH
5869: LD_INT 31
5871: NONEQUAL
5872: AND
5873: IFFALSE 5955
// begin for j in tmp do
5875: LD_ADDR_VAR 0 2
5879: PUSH
5880: LD_VAR 0 5
5884: PUSH
5885: FOR_IN
5886: IFFALSE 5951
// if GetTag ( j ) <> 1 then
5888: LD_VAR 0 2
5892: PPUSH
5893: CALL_OW 110
5897: PUSH
5898: LD_INT 1
5900: NONEQUAL
5901: IFFALSE 5949
// begin SetTag ( j , 1 ) ;
5903: LD_VAR 0 2
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: CALL_OW 109
// if IsInUnit ( i ) then
5915: LD_VAR 0 1
5919: PPUSH
5920: CALL_OW 310
5924: IFFALSE 5935
// ComExit ( i ) ;
5926: LD_VAR 0 1
5930: PPUSH
5931: CALL 65673 0 1
// AddComEnterUnit ( i , j ) ;
5935: LD_VAR 0 1
5939: PPUSH
5940: LD_VAR 0 2
5944: PPUSH
5945: CALL_OW 180
// end ;
5949: GO 5885
5951: POP
5952: POP
// end else
5953: GO 6051
// if not IsInUnit ( i ) then
5955: LD_VAR 0 1
5959: PPUSH
5960: CALL_OW 310
5964: NOT
5965: IFFALSE 6051
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
5967: LD_ADDR_VAR 0 5
5971: PUSH
5972: LD_INT 22
5974: PUSH
5975: LD_INT 5
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: PUSH
5982: LD_INT 50
5984: PUSH
5985: EMPTY
5986: LIST
5987: PUSH
5988: LD_INT 30
5990: PUSH
5991: LD_INT 4
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: EMPTY
5999: LIST
6000: LIST
6001: LIST
6002: PPUSH
6003: CALL_OW 69
6007: ST_TO_ADDR
// if tmp then
6008: LD_VAR 0 5
6012: IFFALSE 6051
// if UnitsInside ( tmp [ 1 ] ) < 6 then
6014: LD_VAR 0 5
6018: PUSH
6019: LD_INT 1
6021: ARRAY
6022: PPUSH
6023: CALL_OW 313
6027: PUSH
6028: LD_INT 6
6030: LESS
6031: IFFALSE 6051
// ComEnterUnit ( i , tmp [ 1 ] ) ;
6033: LD_VAR 0 1
6037: PPUSH
6038: LD_VAR 0 5
6042: PUSH
6043: LD_INT 1
6045: ARRAY
6046: PPUSH
6047: CALL_OW 120
// end ; end ;
6051: GO 5703
6053: POP
6054: POP
// if sci then
6055: LD_VAR 0 8
6059: IFFALSE 6114
// for i in sci do
6061: LD_ADDR_VAR 0 1
6065: PUSH
6066: LD_VAR 0 8
6070: PUSH
6071: FOR_IN
6072: IFFALSE 6112
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
6074: LD_VAR 0 1
6078: PPUSH
6079: LD_INT 333
6081: PPUSH
6082: LD_INT 234
6084: PPUSH
6085: CALL_OW 297
6089: PUSH
6090: LD_INT 9
6092: GREATER
6093: IFFALSE 6110
// ComMoveXY ( i , 333 , 234 ) ;
6095: LD_VAR 0 1
6099: PPUSH
6100: LD_INT 333
6102: PPUSH
6103: LD_INT 234
6105: PPUSH
6106: CALL_OW 111
// end ;
6110: GO 6071
6112: POP
6113: POP
// if mech then
6114: LD_VAR 0 9
6118: IFFALSE 6323
// for i in mech do
6120: LD_ADDR_VAR 0 1
6124: PUSH
6125: LD_VAR 0 9
6129: PUSH
6130: FOR_IN
6131: IFFALSE 6321
// begin hasVehicle := IsInUnit ( i ) ;
6133: LD_ADDR_VAR 0 11
6137: PUSH
6138: LD_VAR 0 1
6142: PPUSH
6143: CALL_OW 310
6147: ST_TO_ADDR
// if enemyInBase then
6148: LD_VAR 0 10
6152: IFFALSE 6239
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
6154: LD_VAR 0 11
6158: PUSH
6159: LD_VAR 0 11
6163: PPUSH
6164: CALL_OW 256
6168: PUSH
6169: LD_INT 500
6171: GREATER
6172: AND
6173: IFFALSE 6201
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
6175: LD_VAR 0 11
6179: PPUSH
6180: LD_VAR 0 10
6184: PPUSH
6185: LD_VAR 0 11
6189: PPUSH
6190: CALL_OW 74
6194: PPUSH
6195: CALL_OW 115
6199: GO 6237
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
6201: LD_VAR 0 11
6205: PPUSH
6206: LD_INT 333
6208: PPUSH
6209: LD_INT 234
6211: PPUSH
6212: CALL_OW 297
6216: PUSH
6217: LD_INT 6
6219: GREATER
6220: IFFALSE 6237
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
6222: LD_VAR 0 11
6226: PPUSH
6227: LD_INT 333
6229: PPUSH
6230: LD_INT 234
6232: PPUSH
6233: CALL_OW 111
// end else
6237: GO 6319
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
6239: LD_VAR 0 1
6243: PPUSH
6244: LD_INT 333
6246: PPUSH
6247: LD_INT 234
6249: PPUSH
6250: CALL_OW 297
6254: PUSH
6255: LD_INT 6
6257: GREATER
6258: IFFALSE 6277
// ComMoveXY ( i , 333 , 234 ) else
6260: LD_VAR 0 1
6264: PPUSH
6265: LD_INT 333
6267: PPUSH
6268: LD_INT 234
6270: PPUSH
6271: CALL_OW 111
6275: GO 6319
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
6277: LD_VAR 0 11
6281: PUSH
6282: LD_VAR 0 11
6286: PPUSH
6287: CALL_OW 256
6291: PUSH
6292: LD_INT 1000
6294: LESS
6295: AND
6296: IFFALSE 6319
// begin SetFuel ( hasVehicle , 100 ) ;
6298: LD_VAR 0 11
6302: PPUSH
6303: LD_INT 100
6305: PPUSH
6306: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
6310: LD_VAR 0 1
6314: PPUSH
6315: CALL 66975 0 1
// end ; end ; end ;
6319: GO 6130
6321: POP
6322: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6323: LD_ADDR_VAR 0 5
6327: PUSH
6328: LD_INT 14
6330: PPUSH
6331: LD_INT 3
6333: PUSH
6334: LD_INT 24
6336: PUSH
6337: LD_INT 1000
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: LD_INT 21
6350: PUSH
6351: LD_INT 3
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PPUSH
6362: CALL_OW 70
6366: ST_TO_ADDR
// if tmp and eng then
6367: LD_VAR 0 5
6371: PUSH
6372: LD_VAR 0 7
6376: AND
6377: IFFALSE 6483
// begin for i in eng do
6379: LD_ADDR_VAR 0 1
6383: PUSH
6384: LD_VAR 0 7
6388: PUSH
6389: FOR_IN
6390: IFFALSE 6481
// if IsInUnit ( i ) then
6392: LD_VAR 0 1
6396: PPUSH
6397: CALL_OW 310
6401: IFFALSE 6414
// ComExitBuilding ( i ) else
6403: LD_VAR 0 1
6407: PPUSH
6408: CALL_OW 122
6412: GO 6479
// if GetLives ( i ) = 1000 then
6414: LD_VAR 0 1
6418: PPUSH
6419: CALL_OW 256
6423: PUSH
6424: LD_INT 1000
6426: EQUAL
6427: IFFALSE 6449
// ComRepairBuilding ( i , tmp [ 1 ] ) else
6429: LD_VAR 0 1
6433: PPUSH
6434: LD_VAR 0 5
6438: PUSH
6439: LD_INT 1
6441: ARRAY
6442: PPUSH
6443: CALL_OW 130
6447: GO 6479
// if GetLives ( i ) < 700 then
6449: LD_VAR 0 1
6453: PPUSH
6454: CALL_OW 256
6458: PUSH
6459: LD_INT 700
6461: LESS
6462: IFFALSE 6479
// ComMoveXY ( i , 333 , 234 ) ;
6464: LD_VAR 0 1
6468: PPUSH
6469: LD_INT 333
6471: PPUSH
6472: LD_INT 234
6474: PPUSH
6475: CALL_OW 111
6479: GO 6389
6481: POP
6482: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
6483: LD_VAR 0 5
6487: NOT
6488: PUSH
6489: LD_VAR 0 7
6493: PPUSH
6494: LD_INT 3
6496: PUSH
6497: LD_INT 54
6499: PUSH
6500: EMPTY
6501: LIST
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PPUSH
6507: CALL_OW 72
6511: AND
6512: IFFALSE 6601
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6514: LD_ADDR_VAR 0 1
6518: PUSH
6519: LD_VAR 0 7
6523: PPUSH
6524: LD_INT 3
6526: PUSH
6527: LD_INT 54
6529: PUSH
6530: EMPTY
6531: LIST
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: PPUSH
6537: CALL_OW 72
6541: PUSH
6542: FOR_IN
6543: IFFALSE 6599
// if GetLives ( i ) < 1000 then
6545: LD_VAR 0 1
6549: PPUSH
6550: CALL_OW 256
6554: PUSH
6555: LD_INT 1000
6557: LESS
6558: IFFALSE 6577
// ComMoveXY ( i , 333 , 234 ) else
6560: LD_VAR 0 1
6564: PPUSH
6565: LD_INT 333
6567: PPUSH
6568: LD_INT 234
6570: PPUSH
6571: CALL_OW 111
6575: GO 6597
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
6577: LD_VAR 0 1
6581: PPUSH
6582: LD_INT 341
6584: PPUSH
6585: LD_INT 232
6587: PPUSH
6588: CALL_OW 428
6592: PPUSH
6593: CALL_OW 120
6597: GO 6542
6599: POP
6600: POP
// end ;
6601: PPOPN 11
6603: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
6604: LD_EXP 43
6608: PPUSH
6609: CALL_OW 256
6613: PUSH
6614: LD_INT 1000
6616: LESS
6617: IFFALSE 6635
6619: GO 6621
6621: DISABLE
// begin enable ;
6622: ENABLE
// SetLives ( Omar , 1000 ) ;
6623: LD_EXP 43
6627: PPUSH
6628: LD_INT 1000
6630: PPUSH
6631: CALL_OW 234
// end ;
6635: END
// every 0 0$1 trigger GetLives ( Rolf ) < 1000 and rolfAttack do
6636: LD_EXP 46
6640: PPUSH
6641: CALL_OW 256
6645: PUSH
6646: LD_INT 1000
6648: LESS
6649: PUSH
6650: LD_EXP 32
6654: AND
6655: IFFALSE 6673
6657: GO 6659
6659: DISABLE
// begin enable ;
6660: ENABLE
// SetLives ( Rolf , 1000 ) ;
6661: LD_EXP 46
6665: PPUSH
6666: LD_INT 1000
6668: PPUSH
6669: CALL_OW 234
// end ;
6673: END
// every 0 0$1 trigger rolfAttack do var i , tmp , un , path , ignore , tag , hasVeh ;
6674: LD_EXP 32
6678: IFFALSE 7246
6680: GO 6682
6682: DISABLE
6683: LD_INT 0
6685: PPUSH
6686: PPUSH
6687: PPUSH
6688: PPUSH
6689: PPUSH
6690: PPUSH
6691: PPUSH
// begin path := [ [ 114 , 105 ] , [ 98 , 106 ] , [ 67 , 102 ] , [ 60 , 88 ] ] ;
6692: LD_ADDR_VAR 0 4
6696: PUSH
6697: LD_INT 114
6699: PUSH
6700: LD_INT 105
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 98
6709: PUSH
6710: LD_INT 106
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 67
6719: PUSH
6720: LD_INT 102
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: LD_INT 60
6729: PUSH
6730: LD_INT 88
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: ST_TO_ADDR
// tmp := Rolf union rolfSquad ;
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: LD_EXP 46
6752: PUSH
6753: LD_EXP 50
6757: UNION
6758: ST_TO_ADDR
// ignore := [ ] ;
6759: LD_ADDR_VAR 0 5
6763: PUSH
6764: EMPTY
6765: ST_TO_ADDR
// for i in tmp do
6766: LD_ADDR_VAR 0 1
6770: PUSH
6771: LD_VAR 0 2
6775: PUSH
6776: FOR_IN
6777: IFFALSE 6898
// begin if GetClass ( i ) = 2 then
6779: LD_VAR 0 1
6783: PPUSH
6784: CALL_OW 257
6788: PUSH
6789: LD_INT 2
6791: EQUAL
6792: IFFALSE 6814
// ignore := Join ( ignore , i ) ;
6794: LD_ADDR_VAR 0 5
6798: PUSH
6799: LD_VAR 0 5
6803: PPUSH
6804: LD_VAR 0 1
6808: PPUSH
6809: CALL 65275 0 2
6813: ST_TO_ADDR
// if GetClass ( i ) = 3 and not IsInUnit ( i ) then
6814: LD_VAR 0 1
6818: PPUSH
6819: CALL_OW 257
6823: PUSH
6824: LD_INT 3
6826: EQUAL
6827: PUSH
6828: LD_VAR 0 1
6832: PPUSH
6833: CALL_OW 310
6837: NOT
6838: AND
6839: IFFALSE 6861
// ignore := Join ( ignore , i ) ;
6841: LD_ADDR_VAR 0 5
6845: PUSH
6846: LD_VAR 0 5
6850: PPUSH
6851: LD_VAR 0 1
6855: PPUSH
6856: CALL 65275 0 2
6860: ST_TO_ADDR
// if GetClass ( i ) = 4 then
6861: LD_VAR 0 1
6865: PPUSH
6866: CALL_OW 257
6870: PUSH
6871: LD_INT 4
6873: EQUAL
6874: IFFALSE 6896
// ignore := Join ( ignore , i ) ;
6876: LD_ADDR_VAR 0 5
6880: PUSH
6881: LD_VAR 0 5
6885: PPUSH
6886: LD_VAR 0 1
6890: PPUSH
6891: CALL 65275 0 2
6895: ST_TO_ADDR
// end ;
6896: GO 6776
6898: POP
6899: POP
// tmp := tmp diff ignore ;
6900: LD_ADDR_VAR 0 2
6904: PUSH
6905: LD_VAR 0 2
6909: PUSH
6910: LD_VAR 0 5
6914: DIFF
6915: ST_TO_ADDR
// if not tmp then
6916: LD_VAR 0 2
6920: NOT
6921: IFFALSE 6925
// exit ;
6923: GO 7246
// repeat wait ( 0 0$1 ) ;
6925: LD_INT 35
6927: PPUSH
6928: CALL_OW 67
// for i in tmp do
6932: LD_ADDR_VAR 0 1
6936: PUSH
6937: LD_VAR 0 2
6941: PUSH
6942: FOR_IN
6943: IFFALSE 7237
// begin if IsDead ( i ) then
6945: LD_VAR 0 1
6949: PPUSH
6950: CALL_OW 301
6954: IFFALSE 6974
// begin tmp := tmp diff i ;
6956: LD_ADDR_VAR 0 2
6960: PUSH
6961: LD_VAR 0 2
6965: PUSH
6966: LD_VAR 0 1
6970: DIFF
6971: ST_TO_ADDR
// continue ;
6972: GO 6942
// end ; tag := GetTag ( i ) ;
6974: LD_ADDR_VAR 0 6
6978: PUSH
6979: LD_VAR 0 1
6983: PPUSH
6984: CALL_OW 110
6988: ST_TO_ADDR
// hasVeh := IsInUnit ( i ) ;
6989: LD_ADDR_VAR 0 7
6993: PUSH
6994: LD_VAR 0 1
6998: PPUSH
6999: CALL_OW 310
7003: ST_TO_ADDR
// if hasVeh then
7004: LD_VAR 0 7
7008: IFFALSE 7022
// un := hasVeh else
7010: LD_ADDR_VAR 0 3
7014: PUSH
7015: LD_VAR 0 7
7019: ST_TO_ADDR
7020: GO 7032
// un := i ;
7022: LD_ADDR_VAR 0 3
7026: PUSH
7027: LD_VAR 0 1
7031: ST_TO_ADDR
// if hasVeh then
7032: LD_VAR 0 7
7036: IFFALSE 7051
// if IsEmpty ( hasVeh ) then
7038: LD_VAR 0 7
7042: PPUSH
7043: CALL 29982 0 1
7047: IFFALSE 7051
// continue ;
7049: GO 6942
// if tag < 100 then
7051: LD_VAR 0 6
7055: PUSH
7056: LD_INT 100
7058: LESS
7059: IFFALSE 7121
// begin if GetLives ( un ) > 600 then
7061: LD_VAR 0 3
7065: PPUSH
7066: CALL_OW 256
7070: PUSH
7071: LD_INT 600
7073: GREATER
7074: IFFALSE 7092
// AgressiveMove ( un , path ) else
7076: LD_VAR 0 3
7080: PPUSH
7081: LD_VAR 0 4
7085: PPUSH
7086: CALL 67879 0 2
7090: GO 7119
// begin SetTag ( un , 101 ) ;
7092: LD_VAR 0 3
7096: PPUSH
7097: LD_INT 101
7099: PPUSH
7100: CALL_OW 109
// ComMoveXY ( un , 122 , 102 ) ;
7104: LD_VAR 0 3
7108: PPUSH
7109: LD_INT 122
7111: PPUSH
7112: LD_INT 102
7114: PPUSH
7115: CALL_OW 111
// end ; end else
7119: GO 7235
// if tag = 101 then
7121: LD_VAR 0 6
7125: PUSH
7126: LD_INT 101
7128: EQUAL
7129: IFFALSE 7198
// begin if GetDistUnitXY ( un , 122 , 102 ) > 6 then
7131: LD_VAR 0 3
7135: PPUSH
7136: LD_INT 122
7138: PPUSH
7139: LD_INT 102
7141: PPUSH
7142: CALL_OW 297
7146: PUSH
7147: LD_INT 6
7149: GREATER
7150: IFFALSE 7184
// begin ComMoveXY ( un , 122 , 102 ) ;
7152: LD_VAR 0 3
7156: PPUSH
7157: LD_INT 122
7159: PPUSH
7160: LD_INT 102
7162: PPUSH
7163: CALL_OW 111
// if hasVeh then
7167: LD_VAR 0 7
7171: IFFALSE 7182
// AddComRepairVehicleAndReturn ( i ) ;
7173: LD_VAR 0 1
7177: PPUSH
7178: CALL 67095 0 1
// end else
7182: GO 7196
// SetTag ( un , 102 ) ;
7184: LD_VAR 0 3
7188: PPUSH
7189: LD_INT 102
7191: PPUSH
7192: CALL_OW 109
// end else
7196: GO 7235
// if tag = 102 then
7198: LD_VAR 0 6
7202: PUSH
7203: LD_INT 102
7205: EQUAL
7206: IFFALSE 7235
// begin if GetLives ( un ) = 1000 then
7208: LD_VAR 0 3
7212: PPUSH
7213: CALL_OW 256
7217: PUSH
7218: LD_INT 1000
7220: EQUAL
7221: IFFALSE 7235
// SetTag ( un , 0 ) ;
7223: LD_VAR 0 3
7227: PPUSH
7228: LD_INT 0
7230: PPUSH
7231: CALL_OW 109
// end ; end ;
7235: GO 6942
7237: POP
7238: POP
// until not tmp ;
7239: LD_VAR 0 2
7243: NOT
7244: IFFALSE 6925
// end ;
7246: PPOPN 7
7248: END
// every 0 0$1 trigger omarAttack do var i , nearestPoint ;
7249: LD_EXP 23
7253: IFFALSE 8129
7255: GO 7257
7257: DISABLE
7258: LD_INT 0
7260: PPUSH
7261: PPUSH
// begin wait ( 0 0$25 ) ;
7262: LD_INT 875
7264: PPUSH
7265: CALL_OW 67
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
7269: LD_EXP 51
7273: PPUSH
7274: LD_INT 2
7276: PUSH
7277: LD_INT 25
7279: PUSH
7280: LD_INT 1
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: LD_INT 25
7289: PUSH
7290: LD_INT 8
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: LIST
7301: PPUSH
7302: CALL_OW 72
7306: PPUSH
7307: CALL_OW 122
// wait ( 0 0$3 ) ;
7311: LD_INT 105
7313: PPUSH
7314: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , 225 , 223 ) ;
7318: LD_EXP 51
7322: PUSH
7323: LD_EXP 43
7327: UNION
7328: PPUSH
7329: LD_INT 225
7331: PPUSH
7332: LD_INT 223
7334: PPUSH
7335: CALL_OW 174
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_type , unit_vehicle ] ] ] ) , 167 , 231 ) ;
7339: LD_INT 22
7341: PUSH
7342: LD_INT 5
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 2
7351: PUSH
7352: LD_INT 25
7354: PUSH
7355: LD_INT 1
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: LD_INT 25
7364: PUSH
7365: LD_INT 8
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: LD_INT 21
7374: PUSH
7375: LD_INT 2
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PPUSH
7392: CALL_OW 69
7396: PPUSH
7397: LD_INT 167
7399: PPUSH
7400: LD_INT 231
7402: PPUSH
7403: CALL_OW 174
// AddComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 222 , 229 ) ;
7407: LD_EXP 51
7411: PPUSH
7412: LD_INT 25
7414: PUSH
7415: LD_INT 4
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PPUSH
7422: CALL_OW 72
7426: PPUSH
7427: LD_INT 222
7429: PPUSH
7430: LD_INT 229
7432: PPUSH
7433: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7437: LD_INT 35
7439: PPUSH
7440: CALL_OW 67
// for i in omarSquad union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
7444: LD_ADDR_VAR 0 1
7448: PUSH
7449: LD_EXP 51
7453: PUSH
7454: LD_INT 22
7456: PUSH
7457: LD_INT 5
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 21
7466: PUSH
7467: LD_INT 2
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: PPUSH
7478: CALL_OW 69
7482: UNION
7483: PUSH
7484: FOR_IN
7485: IFFALSE 8120
// begin if IsDead ( i ) then
7487: LD_VAR 0 1
7491: PPUSH
7492: CALL_OW 301
7496: IFFALSE 7516
// begin omarSquad := omarSquad diff i ;
7498: LD_ADDR_EXP 51
7502: PUSH
7503: LD_EXP 51
7507: PUSH
7508: LD_VAR 0 1
7512: DIFF
7513: ST_TO_ADDR
// continue ;
7514: GO 7484
// end ; if GetClass ( i ) in [ 1 , 8 ] then
7516: LD_VAR 0 1
7520: PPUSH
7521: CALL_OW 257
7525: PUSH
7526: LD_INT 1
7528: PUSH
7529: LD_INT 8
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: IN
7536: IFFALSE 7730
// begin if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
7538: LD_VAR 0 1
7542: PPUSH
7543: CALL_OW 256
7547: PUSH
7548: LD_INT 700
7550: LESS
7551: PUSH
7552: LD_VAR 0 1
7556: PPUSH
7557: CALL_OW 110
7561: PUSH
7562: LD_INT 0
7564: EQUAL
7565: AND
7566: IFFALSE 7595
// begin SetTag ( i , 1 ) ;
7568: LD_VAR 0 1
7572: PPUSH
7573: LD_INT 1
7575: PPUSH
7576: CALL_OW 109
// ComMoveXY ( i , 222 , 229 ) ;
7580: LD_VAR 0 1
7584: PPUSH
7585: LD_INT 222
7587: PPUSH
7588: LD_INT 229
7590: PPUSH
7591: CALL_OW 111
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
7595: LD_VAR 0 1
7599: PPUSH
7600: CALL_OW 256
7604: PUSH
7605: LD_INT 1000
7607: EQUAL
7608: PUSH
7609: LD_VAR 0 1
7613: PPUSH
7614: CALL_OW 110
7618: PUSH
7619: LD_INT 1
7621: EQUAL
7622: AND
7623: IFFALSE 7637
// SetTag ( i , 0 ) ;
7625: LD_VAR 0 1
7629: PPUSH
7630: LD_INT 0
7632: PPUSH
7633: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and not HasTask ( i ) then
7637: LD_VAR 0 1
7641: PPUSH
7642: CALL_OW 110
7646: PUSH
7647: LD_INT 0
7649: EQUAL
7650: PUSH
7651: LD_VAR 0 1
7655: PPUSH
7656: CALL_OW 256
7660: PUSH
7661: LD_INT 700
7663: GREATEREQUAL
7664: AND
7665: PUSH
7666: LD_VAR 0 1
7670: PPUSH
7671: CALL_OW 314
7675: NOT
7676: AND
7677: IFFALSE 7730
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
7679: LD_INT 18
7681: PPUSH
7682: LD_INT 22
7684: PUSH
7685: LD_INT 3
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PPUSH
7692: CALL_OW 70
7696: IFFALSE 7715
// ComAgressiveMove ( i , 167 , 231 ) else
7698: LD_VAR 0 1
7702: PPUSH
7703: LD_INT 167
7705: PPUSH
7706: LD_INT 231
7708: PPUSH
7709: CALL_OW 114
7713: GO 7730
// ComAgressiveMove ( i , 106 , 153 ) ;
7715: LD_VAR 0 1
7719: PPUSH
7720: LD_INT 106
7722: PPUSH
7723: LD_INT 153
7725: PPUSH
7726: CALL_OW 114
// end ; if GetType ( i ) = unit_vehicle then
7730: LD_VAR 0 1
7734: PPUSH
7735: CALL_OW 247
7739: PUSH
7740: LD_INT 2
7742: EQUAL
7743: IFFALSE 8118
// begin nearestPoint := [ 219 , 219 ] ;
7745: LD_ADDR_VAR 0 2
7749: PUSH
7750: LD_INT 219
7752: PUSH
7753: LD_INT 219
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: ST_TO_ADDR
// if GetDistUnitXY ( i , 156 , 202 ) < GetDistUnitXY ( i , 219 , 219 ) then
7760: LD_VAR 0 1
7764: PPUSH
7765: LD_INT 156
7767: PPUSH
7768: LD_INT 202
7770: PPUSH
7771: CALL_OW 297
7775: PUSH
7776: LD_VAR 0 1
7780: PPUSH
7781: LD_INT 219
7783: PPUSH
7784: LD_INT 219
7786: PPUSH
7787: CALL_OW 297
7791: LESS
7792: IFFALSE 7809
// nearestPoint := [ 156 , 202 ] ;
7794: LD_ADDR_VAR 0 2
7798: PUSH
7799: LD_INT 156
7801: PUSH
7802: LD_INT 202
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: ST_TO_ADDR
// if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
7809: LD_VAR 0 1
7813: PPUSH
7814: CALL_OW 256
7818: PUSH
7819: LD_INT 700
7821: LESS
7822: PUSH
7823: LD_VAR 0 1
7827: PPUSH
7828: CALL_OW 110
7832: PUSH
7833: LD_INT 0
7835: EQUAL
7836: AND
7837: IFFALSE 7878
// begin SetTag ( i , 1 ) ;
7839: LD_VAR 0 1
7843: PPUSH
7844: LD_INT 1
7846: PPUSH
7847: CALL_OW 109
// ComMoveXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) ;
7851: LD_VAR 0 1
7855: PPUSH
7856: LD_VAR 0 2
7860: PUSH
7861: LD_INT 1
7863: ARRAY
7864: PPUSH
7865: LD_VAR 0 2
7869: PUSH
7870: LD_INT 2
7872: ARRAY
7873: PPUSH
7874: CALL_OW 111
// end ; if GetLives ( i ) < 700 and GetTag ( i ) = 1 and IsDrivenBy ( i ) and GetDistUnitXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) < 10 then
7878: LD_VAR 0 1
7882: PPUSH
7883: CALL_OW 256
7887: PUSH
7888: LD_INT 700
7890: LESS
7891: PUSH
7892: LD_VAR 0 1
7896: PPUSH
7897: CALL_OW 110
7901: PUSH
7902: LD_INT 1
7904: EQUAL
7905: AND
7906: PUSH
7907: LD_VAR 0 1
7911: PPUSH
7912: CALL_OW 311
7916: AND
7917: PUSH
7918: LD_VAR 0 1
7922: PPUSH
7923: LD_VAR 0 2
7927: PUSH
7928: LD_INT 1
7930: ARRAY
7931: PPUSH
7932: LD_VAR 0 2
7936: PUSH
7937: LD_INT 2
7939: ARRAY
7940: PPUSH
7941: CALL_OW 297
7945: PUSH
7946: LD_INT 10
7948: LESS
7949: AND
7950: IFFALSE 7961
// ComRepairVehicleAndReturn ( i ) ;
7952: LD_VAR 0 1
7956: PPUSH
7957: CALL 66975 0 1
// if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
7961: LD_VAR 0 1
7965: PPUSH
7966: CALL_OW 256
7970: PUSH
7971: LD_INT 1000
7973: EQUAL
7974: PUSH
7975: LD_VAR 0 1
7979: PPUSH
7980: CALL_OW 110
7984: PUSH
7985: LD_INT 1
7987: EQUAL
7988: AND
7989: PUSH
7990: LD_VAR 0 1
7994: PPUSH
7995: CALL_OW 311
7999: AND
8000: IFFALSE 8014
// SetTag ( i , 0 ) ;
8002: LD_VAR 0 1
8006: PPUSH
8007: LD_INT 0
8009: PPUSH
8010: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and IsDrivenBy ( i ) and not HasTask ( i ) then
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 110
8023: PUSH
8024: LD_INT 0
8026: EQUAL
8027: PUSH
8028: LD_VAR 0 1
8032: PPUSH
8033: CALL_OW 256
8037: PUSH
8038: LD_INT 700
8040: GREATEREQUAL
8041: AND
8042: PUSH
8043: LD_VAR 0 1
8047: PPUSH
8048: CALL_OW 311
8052: AND
8053: PUSH
8054: LD_VAR 0 1
8058: PPUSH
8059: CALL_OW 314
8063: NOT
8064: AND
8065: IFFALSE 8118
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
8067: LD_INT 18
8069: PPUSH
8070: LD_INT 22
8072: PUSH
8073: LD_INT 3
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PPUSH
8080: CALL_OW 70
8084: IFFALSE 8103
// ComAgressiveMove ( i , 167 , 231 ) else
8086: LD_VAR 0 1
8090: PPUSH
8091: LD_INT 167
8093: PPUSH
8094: LD_INT 231
8096: PPUSH
8097: CALL_OW 114
8101: GO 8118
// ComAgressiveMove ( i , 106 , 153 ) ;
8103: LD_VAR 0 1
8107: PPUSH
8108: LD_INT 106
8110: PPUSH
8111: LD_INT 153
8113: PPUSH
8114: CALL_OW 114
// end ; end ;
8118: GO 7484
8120: POP
8121: POP
// until not omarSquad ;
8122: LD_EXP 51
8126: NOT
8127: IFFALSE 7437
// end ;
8129: PPOPN 2
8131: END
// export function GoForOil ; var i , tmp , data , chance , vehicle , heikeInConvoy ; begin
8132: LD_INT 0
8134: PPUSH
8135: PPUSH
8136: PPUSH
8137: PPUSH
8138: PPUSH
8139: PPUSH
8140: PPUSH
// SetAreaMapShow ( oilArea , 1 ) ;
8141: LD_INT 20
8143: PPUSH
8144: LD_INT 1
8146: PPUSH
8147: CALL_OW 424
// repeat wait ( 0 0$5 ) ;
8151: LD_INT 175
8153: PPUSH
8154: CALL_OW 67
// heikeInConvoy := false ;
8158: LD_ADDR_VAR 0 7
8162: PUSH
8163: LD_INT 0
8165: ST_TO_ADDR
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] ] ) ;
8166: LD_ADDR_VAR 0 3
8170: PUSH
8171: LD_INT 20
8173: PPUSH
8174: LD_INT 22
8176: PUSH
8177: LD_INT 2
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: LD_INT 3
8186: PUSH
8187: LD_INT 2
8189: PUSH
8190: LD_INT 34
8192: PUSH
8193: LD_INT 88
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PUSH
8200: LD_INT 34
8202: PUSH
8203: LD_INT 31
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: LD_INT 33
8221: PUSH
8222: LD_INT 1
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: PPUSH
8234: CALL_OW 70
8238: ST_TO_ADDR
// for i in tmp do
8239: LD_ADDR_VAR 0 2
8243: PUSH
8244: LD_VAR 0 3
8248: PUSH
8249: FOR_IN
8250: IFFALSE 8288
// if IsDrivenBy ( i ) = Heike then
8252: LD_VAR 0 2
8256: PPUSH
8257: CALL_OW 311
8261: PUSH
8262: LD_EXP 33
8266: EQUAL
8267: IFFALSE 8286
// begin heikeInConvoy := true ;
8269: LD_ADDR_VAR 0 7
8273: PUSH
8274: LD_INT 1
8276: ST_TO_ADDR
// Query ( QHeikeConvoy ) ;
8277: LD_STRING QHeikeConvoy
8279: PPUSH
8280: CALL_OW 97
// break ;
8284: GO 8288
// end ;
8286: GO 8249
8288: POP
8289: POP
// if not heikeInConvoy and UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
8290: LD_VAR 0 7
8294: NOT
8295: PUSH
8296: LD_VAR 0 3
8300: PPUSH
8301: LD_INT 2
8303: PUSH
8304: LD_INT 34
8306: PUSH
8307: LD_INT 32
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PUSH
8314: LD_INT 34
8316: PUSH
8317: LD_INT 51
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: LIST
8328: PPUSH
8329: CALL_OW 72
8333: AND
8334: IFFALSE 8351
// if Query ( QConvoy ) = 1 then
8336: LD_STRING QConvoy
8338: PPUSH
8339: CALL_OW 97
8343: PUSH
8344: LD_INT 1
8346: EQUAL
8347: IFFALSE 8351
// break ;
8349: GO 8355
// until false ;
8351: LD_INT 0
8353: IFFALSE 8151
// SetAreaMapShow ( oilArea , 0 ) ;
8355: LD_INT 20
8357: PPUSH
8358: LD_INT 0
8360: PPUSH
8361: CALL_OW 424
// data := [ ] ;
8365: LD_ADDR_VAR 0 4
8369: PUSH
8370: EMPTY
8371: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
8372: LD_ADDR_VAR 0 5
8376: PUSH
8377: LD_INT 60
8379: PUSH
8380: LD_INT 50
8382: PUSH
8383: LD_INT 40
8385: PUSH
8386: LD_INT 30
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: PUSH
8395: LD_OWVAR 67
8399: ARRAY
8400: ST_TO_ADDR
// for i in tmp do
8401: LD_ADDR_VAR 0 2
8405: PUSH
8406: LD_VAR 0 3
8410: PUSH
8411: FOR_IN
8412: IFFALSE 8498
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , ] ) ;
8414: LD_ADDR_VAR 0 4
8418: PUSH
8419: LD_VAR 0 4
8423: PPUSH
8424: LD_VAR 0 2
8428: PUSH
8429: LD_VAR 0 2
8433: PPUSH
8434: CALL_OW 311
8438: PUSH
8439: LD_VAR 0 2
8443: PPUSH
8444: CALL_OW 256
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: LIST
8453: PPUSH
8454: CALL 65275 0 2
8458: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
8459: LD_VAR 0 2
8463: PPUSH
8464: CALL_OW 311
8468: PPUSH
8469: CALL_OW 64
// RemoveUnit ( i ) ;
8473: LD_VAR 0 2
8477: PPUSH
8478: CALL_OW 64
// chance := chance + 20 ;
8482: LD_ADDR_VAR 0 5
8486: PUSH
8487: LD_VAR 0 5
8491: PUSH
8492: LD_INT 20
8494: PLUS
8495: ST_TO_ADDR
// end ;
8496: GO 8411
8498: POP
8499: POP
// wait ( rand ( 2 2$30 , 3 3$30 ) ) ;
8500: LD_INT 5250
8502: PPUSH
8503: LD_INT 7350
8505: PPUSH
8506: CALL_OW 12
8510: PPUSH
8511: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8515: LD_INT 35
8517: PPUSH
8518: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
8522: LD_INT 22
8524: PUSH
8525: LD_INT 3
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: PUSH
8532: LD_INT 92
8534: PUSH
8535: LD_INT 261
8537: PUSH
8538: LD_INT 71
8540: PUSH
8541: LD_INT 12
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: PPUSH
8554: CALL_OW 69
8558: NOT
8559: PUSH
8560: LD_INT 277
8562: PPUSH
8563: LD_INT 80
8565: PPUSH
8566: CALL_OW 428
8570: NOT
8571: AND
8572: IFFALSE 8515
// for i in data do
8574: LD_ADDR_VAR 0 2
8578: PUSH
8579: LD_VAR 0 4
8583: PUSH
8584: FOR_IN
8585: IFFALSE 8889
// begin uc_nation := GetNation ( i [ 1 ] ) ;
8587: LD_ADDR_OWVAR 21
8591: PUSH
8592: LD_VAR 0 2
8596: PUSH
8597: LD_INT 1
8599: ARRAY
8600: PPUSH
8601: CALL_OW 248
8605: ST_TO_ADDR
// uc_side := 2 ;
8606: LD_ADDR_OWVAR 20
8610: PUSH
8611: LD_INT 2
8613: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
8614: LD_VAR 0 2
8618: PUSH
8619: LD_INT 1
8621: ARRAY
8622: PPUSH
8623: CALL_OW 265
8627: PPUSH
8628: LD_VAR 0 2
8632: PUSH
8633: LD_INT 1
8635: ARRAY
8636: PPUSH
8637: CALL_OW 262
8641: PPUSH
8642: LD_VAR 0 2
8646: PUSH
8647: LD_INT 1
8649: ARRAY
8650: PPUSH
8651: CALL_OW 263
8655: PPUSH
8656: LD_VAR 0 2
8660: PUSH
8661: LD_INT 1
8663: ARRAY
8664: PPUSH
8665: CALL_OW 264
8669: PPUSH
8670: LD_INT 66
8672: PPUSH
8673: CALL 32841 0 5
// vehicle := CreateVehicle ;
8677: LD_ADDR_VAR 0 6
8681: PUSH
8682: CALL_OW 45
8686: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
8687: LD_VAR 0 6
8691: PPUSH
8692: LD_INT 277
8694: PPUSH
8695: LD_INT 80
8697: PPUSH
8698: LD_INT 4
8700: PPUSH
8701: LD_INT 0
8703: PPUSH
8704: CALL 67415 0 5
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
8708: LD_VAR 0 2
8712: PUSH
8713: LD_INT 2
8715: ARRAY
8716: PPUSH
8717: LD_VAR 0 6
8721: PPUSH
8722: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
8726: LD_VAR 0 6
8730: PPUSH
8731: LD_VAR 0 2
8735: PUSH
8736: LD_INT 3
8738: ARRAY
8739: PPUSH
8740: CALL_OW 234
// if Prob ( chance ) then
8744: LD_VAR 0 5
8748: PPUSH
8749: CALL_OW 13
8753: IFFALSE 8794
// begin if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
8755: LD_VAR 0 6
8759: PPUSH
8760: CALL_OW 264
8764: PUSH
8765: LD_INT 32
8767: PUSH
8768: LD_INT 51
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: IN
8775: IFFALSE 8792
// SetCargo ( vehicle , mat_oil , 100 ) ;
8777: LD_VAR 0 6
8781: PPUSH
8782: LD_INT 2
8784: PPUSH
8785: LD_INT 100
8787: PPUSH
8788: CALL_OW 290
// end else
8792: GO 8820
// if i [ 3 ] > 333 then
8794: LD_VAR 0 2
8798: PUSH
8799: LD_INT 3
8801: ARRAY
8802: PUSH
8803: LD_INT 333
8805: GREATER
8806: IFFALSE 8820
// SetLives ( vehicle , 333 ) ;
8808: LD_VAR 0 6
8812: PPUSH
8813: LD_INT 333
8815: PPUSH
8816: CALL_OW 234
// ComMoveXY ( vehicle , 250 , 119 ) ;
8820: LD_VAR 0 6
8824: PPUSH
8825: LD_INT 250
8827: PPUSH
8828: LD_INT 119
8830: PPUSH
8831: CALL_OW 111
// AddComMoveXY ( vehicle , 211 , 80 ) ;
8835: LD_VAR 0 6
8839: PPUSH
8840: LD_INT 211
8842: PPUSH
8843: LD_INT 80
8845: PPUSH
8846: CALL_OW 171
// repeat wait ( 0 0$5 ) ;
8850: LD_INT 175
8852: PPUSH
8853: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_placed ] ] ) ;
8857: LD_INT 20
8859: PPUSH
8860: LD_INT 22
8862: PUSH
8863: LD_INT 2
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: LD_INT 52
8872: PUSH
8873: EMPTY
8874: LIST
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PPUSH
8880: CALL_OW 70
8884: NOT
8885: IFFALSE 8850
// end ;
8887: GO 8584
8889: POP
8890: POP
// wait ( 0 0$30 ) ;
8891: LD_INT 1050
8893: PPUSH
8894: CALL_OW 67
// GoForOil ;
8898: CALL 8132 0 0
// end ; end_of_file
8902: LD_VAR 0 1
8906: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
8907: LD_INT 0
8909: PPUSH
// uc_side := side ;
8910: LD_ADDR_OWVAR 20
8914: PUSH
8915: LD_VAR 0 1
8919: ST_TO_ADDR
// uc_nation := nation ;
8920: LD_ADDR_OWVAR 21
8924: PUSH
8925: LD_VAR 0 2
8929: ST_TO_ADDR
// vc_chassis := chassis ;
8930: LD_ADDR_OWVAR 37
8934: PUSH
8935: LD_VAR 0 3
8939: ST_TO_ADDR
// vc_engine := engine ;
8940: LD_ADDR_OWVAR 39
8944: PUSH
8945: LD_VAR 0 4
8949: ST_TO_ADDR
// vc_control := control ;
8950: LD_ADDR_OWVAR 38
8954: PUSH
8955: LD_VAR 0 5
8959: ST_TO_ADDR
// vc_weapon := weapon ;
8960: LD_ADDR_OWVAR 40
8964: PUSH
8965: LD_VAR 0 6
8969: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8970: LD_ADDR_OWVAR 41
8974: PUSH
8975: LD_VAR 0 7
8979: ST_TO_ADDR
// result := CreateVehicle ;
8980: LD_ADDR_VAR 0 8
8984: PUSH
8985: CALL_OW 45
8989: ST_TO_ADDR
// end ;
8990: LD_VAR 0 8
8994: RET
// export function SayX ( units , ident ) ; var i ; begin
8995: LD_INT 0
8997: PPUSH
8998: PPUSH
// result := false ;
8999: LD_ADDR_VAR 0 3
9003: PUSH
9004: LD_INT 0
9006: ST_TO_ADDR
// if not units then
9007: LD_VAR 0 1
9011: NOT
9012: IFFALSE 9016
// exit ;
9014: GO 9070
// for i in units do
9016: LD_ADDR_VAR 0 4
9020: PUSH
9021: LD_VAR 0 1
9025: PUSH
9026: FOR_IN
9027: IFFALSE 9068
// if IsOk ( i ) then
9029: LD_VAR 0 4
9033: PPUSH
9034: CALL_OW 302
9038: IFFALSE 9066
// begin Say ( i , ident ) ;
9040: LD_VAR 0 4
9044: PPUSH
9045: LD_VAR 0 2
9049: PPUSH
9050: CALL_OW 88
// result := i ;
9054: LD_ADDR_VAR 0 3
9058: PUSH
9059: LD_VAR 0 4
9063: ST_TO_ADDR
// break ;
9064: GO 9068
// end ;
9066: GO 9026
9068: POP
9069: POP
// end ;
9070: LD_VAR 0 3
9074: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
9075: LD_INT 0
9077: PPUSH
9078: PPUSH
// InitUc ;
9079: CALL_OW 18
// InitHc ;
9083: CALL_OW 19
// uc_side := 0 ;
9087: LD_ADDR_OWVAR 20
9091: PUSH
9092: LD_INT 0
9094: ST_TO_ADDR
// uc_nation := 0 ;
9095: LD_ADDR_OWVAR 21
9099: PUSH
9100: LD_INT 0
9102: ST_TO_ADDR
// for i = 1 to amount do
9103: LD_ADDR_VAR 0 4
9107: PUSH
9108: DOUBLE
9109: LD_INT 1
9111: DEC
9112: ST_TO_ADDR
9113: LD_VAR 0 2
9117: PUSH
9118: FOR_TO
9119: IFFALSE 9201
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
9121: LD_ADDR_OWVAR 29
9125: PUSH
9126: LD_INT 9
9128: PPUSH
9129: LD_INT 12
9131: PPUSH
9132: CALL_OW 12
9136: PUSH
9137: LD_INT 9
9139: PPUSH
9140: LD_INT 12
9142: PPUSH
9143: CALL_OW 12
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
9152: LD_ADDR_OWVAR 35
9156: PUSH
9157: LD_INT 1
9159: NEG
9160: PPUSH
9161: LD_INT 1
9163: PPUSH
9164: CALL_OW 12
9168: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9169: LD_INT 0
9171: PPUSH
9172: LD_INT 12
9174: PPUSH
9175: LD_INT 1
9177: PPUSH
9178: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
9182: CALL_OW 44
9186: PPUSH
9187: LD_VAR 0 1
9191: PPUSH
9192: LD_INT 0
9194: PPUSH
9195: CALL_OW 49
// end ;
9199: GO 9118
9201: POP
9202: POP
// InitHc ;
9203: CALL_OW 19
// end ;
9207: LD_VAR 0 3
9211: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
9212: LD_INT 0
9214: PPUSH
9215: PPUSH
// uc_side := 0 ;
9216: LD_ADDR_OWVAR 20
9220: PUSH
9221: LD_INT 0
9223: ST_TO_ADDR
// uc_nation := 0 ;
9224: LD_ADDR_OWVAR 21
9228: PUSH
9229: LD_INT 0
9231: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
9232: LD_INT 7
9234: PPUSH
9235: LD_INT 6
9237: PUSH
9238: LD_INT 5
9240: PUSH
9241: LD_INT 4
9243: PUSH
9244: LD_INT 3
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: PUSH
9253: LD_OWVAR 67
9257: ARRAY
9258: PPUSH
9259: CALL 9075 0 2
// for i = 1 to 2 do
9263: LD_ADDR_VAR 0 4
9267: PUSH
9268: DOUBLE
9269: LD_INT 1
9271: DEC
9272: ST_TO_ADDR
9273: LD_INT 2
9275: PUSH
9276: FOR_TO
9277: IFFALSE 9314
// begin vc_chassis := class_mastodont ;
9279: LD_ADDR_OWVAR 37
9283: PUSH
9284: LD_INT 31
9286: ST_TO_ADDR
// vc_control := control_rider ;
9287: LD_ADDR_OWVAR 38
9291: PUSH
9292: LD_INT 4
9294: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
9295: CALL_OW 45
9299: PPUSH
9300: LD_VAR 0 1
9304: PPUSH
9305: LD_INT 0
9307: PPUSH
9308: CALL 64192 0 3
// end ;
9312: GO 9276
9314: POP
9315: POP
// InitHc ;
9316: CALL_OW 19
// for i := 1 to 4 do
9320: LD_ADDR_VAR 0 4
9324: PUSH
9325: DOUBLE
9326: LD_INT 1
9328: DEC
9329: ST_TO_ADDR
9330: LD_INT 4
9332: PUSH
9333: FOR_TO
9334: IFFALSE 9371
// begin hc_class := class_horse ;
9336: LD_ADDR_OWVAR 28
9340: PUSH
9341: LD_INT 21
9343: ST_TO_ADDR
// hc_gallery :=  ;
9344: LD_ADDR_OWVAR 33
9348: PUSH
9349: LD_STRING 
9351: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
9352: CALL_OW 44
9356: PPUSH
9357: LD_VAR 0 1
9361: PPUSH
9362: LD_INT 0
9364: PPUSH
9365: CALL_OW 49
// end ;
9369: GO 9333
9371: POP
9372: POP
// InitHc ;
9373: CALL_OW 19
// for i = 1 to 5 do
9377: LD_ADDR_VAR 0 4
9381: PUSH
9382: DOUBLE
9383: LD_INT 1
9385: DEC
9386: ST_TO_ADDR
9387: LD_INT 5
9389: PUSH
9390: FOR_TO
9391: IFFALSE 9445
// begin hc_class = class_tiger ;
9393: LD_ADDR_OWVAR 28
9397: PUSH
9398: LD_INT 14
9400: ST_TO_ADDR
// hc_gallery =  ;
9401: LD_ADDR_OWVAR 33
9405: PUSH
9406: LD_STRING 
9408: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
9409: LD_ADDR_OWVAR 35
9413: PUSH
9414: LD_INT 7
9416: NEG
9417: PPUSH
9418: LD_INT 7
9420: PPUSH
9421: CALL_OW 12
9425: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
9426: CALL_OW 44
9430: PPUSH
9431: LD_VAR 0 1
9435: PPUSH
9436: LD_INT 0
9438: PPUSH
9439: CALL 64192 0 3
// end ;
9443: GO 9390
9445: POP
9446: POP
// InitHc ;
9447: CALL_OW 19
// for i := 1 to 4 do
9451: LD_ADDR_VAR 0 4
9455: PUSH
9456: DOUBLE
9457: LD_INT 1
9459: DEC
9460: ST_TO_ADDR
9461: LD_INT 4
9463: PUSH
9464: FOR_TO
9465: IFFALSE 9502
// begin hc_class := class_phororhacos ;
9467: LD_ADDR_OWVAR 28
9471: PUSH
9472: LD_INT 18
9474: ST_TO_ADDR
// hc_gallery :=  ;
9475: LD_ADDR_OWVAR 33
9479: PUSH
9480: LD_STRING 
9482: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
9483: CALL_OW 44
9487: PPUSH
9488: LD_VAR 0 1
9492: PPUSH
9493: LD_INT 0
9495: PPUSH
9496: CALL_OW 49
// end ;
9500: GO 9464
9502: POP
9503: POP
// InitHc ;
9504: CALL_OW 19
// for i := 1 to 4 do
9508: LD_ADDR_VAR 0 4
9512: PUSH
9513: DOUBLE
9514: LD_INT 1
9516: DEC
9517: ST_TO_ADDR
9518: LD_INT 4
9520: PUSH
9521: FOR_TO
9522: IFFALSE 9559
// begin hc_class := class_baggie ;
9524: LD_ADDR_OWVAR 28
9528: PUSH
9529: LD_INT 13
9531: ST_TO_ADDR
// hc_gallery :=  ;
9532: LD_ADDR_OWVAR 33
9536: PUSH
9537: LD_STRING 
9539: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
9540: CALL_OW 44
9544: PPUSH
9545: LD_VAR 0 1
9549: PPUSH
9550: LD_INT 0
9552: PPUSH
9553: CALL_OW 49
// end ;
9557: GO 9521
9559: POP
9560: POP
// InitHc ;
9561: CALL_OW 19
// for i := 1 to 7 do
9565: LD_ADDR_VAR 0 4
9569: PUSH
9570: DOUBLE
9571: LD_INT 1
9573: DEC
9574: ST_TO_ADDR
9575: LD_INT 7
9577: PUSH
9578: FOR_TO
9579: IFFALSE 9616
// begin hc_class := class_frog ;
9581: LD_ADDR_OWVAR 28
9585: PUSH
9586: LD_INT 19
9588: ST_TO_ADDR
// hc_gallery :=  ;
9589: LD_ADDR_OWVAR 33
9593: PUSH
9594: LD_STRING 
9596: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
9597: CALL_OW 44
9601: PPUSH
9602: LD_VAR 0 2
9606: PPUSH
9607: LD_INT 0
9609: PPUSH
9610: CALL_OW 49
// end ;
9614: GO 9578
9616: POP
9617: POP
// end ;
9618: LD_VAR 0 3
9622: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
9623: LD_INT 0
9625: PPUSH
9626: PPUSH
9627: PPUSH
// if not observer or not unit then
9628: LD_VAR 0 1
9632: NOT
9633: PUSH
9634: LD_VAR 0 2
9638: NOT
9639: OR
9640: IFFALSE 9644
// exit ;
9642: GO 9692
// if not See ( GetSide ( observer ) , unit ) then
9644: LD_VAR 0 1
9648: PPUSH
9649: CALL_OW 255
9653: PPUSH
9654: LD_VAR 0 2
9658: PPUSH
9659: CALL_OW 292
9663: NOT
9664: IFFALSE 9668
// exit ;
9666: GO 9692
// result := GetDistUnits ( observer , unit ) < 12 ;
9668: LD_ADDR_VAR 0 3
9672: PUSH
9673: LD_VAR 0 1
9677: PPUSH
9678: LD_VAR 0 2
9682: PPUSH
9683: CALL_OW 296
9687: PUSH
9688: LD_INT 12
9690: LESS
9691: ST_TO_ADDR
// end ;
9692: LD_VAR 0 3
9696: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
9697: LD_INT 0
9699: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
9700: LD_VAR 0 2
9704: PUSH
9705: LD_INT 1
9707: ARRAY
9708: PPUSH
9709: LD_VAR 0 2
9713: PUSH
9714: LD_INT 2
9716: ARRAY
9717: PPUSH
9718: CALL_OW 488
9722: PUSH
9723: LD_VAR 0 2
9727: PUSH
9728: LD_INT 1
9730: ARRAY
9731: PPUSH
9732: LD_VAR 0 2
9736: PUSH
9737: LD_INT 2
9739: ARRAY
9740: PPUSH
9741: CALL_OW 428
9745: PUSH
9746: LD_INT 0
9748: EQUAL
9749: AND
9750: IFFALSE 9784
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
9752: LD_VAR 0 1
9756: PPUSH
9757: LD_VAR 0 2
9761: PUSH
9762: LD_INT 1
9764: ARRAY
9765: PPUSH
9766: LD_VAR 0 2
9770: PUSH
9771: LD_INT 2
9773: ARRAY
9774: PPUSH
9775: LD_VAR 0 3
9779: PPUSH
9780: CALL_OW 48
// end ;
9784: LD_VAR 0 4
9788: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
9789: LD_INT 0
9791: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
9792: LD_VAR 0 1
9796: PPUSH
9797: LD_VAR 0 2
9801: PPUSH
9802: LD_VAR 0 3
9806: PPUSH
9807: LD_VAR 0 4
9811: PPUSH
9812: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
9816: LD_VAR 0 1
9820: PPUSH
9821: LD_VAR 0 2
9825: PPUSH
9826: LD_VAR 0 3
9830: PPUSH
9831: CALL_OW 331
// end ;
9835: LD_VAR 0 5
9839: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
9840: LD_INT 0
9842: PPUSH
// if not units then
9843: LD_VAR 0 1
9847: NOT
9848: IFFALSE 9852
// exit ;
9850: GO 9935
// result := true ;
9852: LD_ADDR_VAR 0 4
9856: PUSH
9857: LD_INT 1
9859: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
9860: LD_VAR 0 1
9864: PPUSH
9865: LD_INT 26
9867: PUSH
9868: LD_INT 1
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PPUSH
9875: CALL_OW 72
9879: PUSH
9880: LD_INT 1
9882: ARRAY
9883: PPUSH
9884: LD_VAR 0 2
9888: PPUSH
9889: CALL_OW 88
9893: NOT
9894: IFFALSE 9935
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
9896: LD_ADDR_VAR 0 4
9900: PUSH
9901: LD_VAR 0 1
9905: PPUSH
9906: LD_INT 26
9908: PUSH
9909: LD_INT 2
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PPUSH
9916: CALL_OW 72
9920: PUSH
9921: LD_INT 1
9923: ARRAY
9924: PPUSH
9925: LD_VAR 0 3
9929: PPUSH
9930: CALL_OW 88
9934: ST_TO_ADDR
// end ;
9935: LD_VAR 0 4
9939: RET
// export function SeeGroup ( side , group ) ; var i ; begin
9940: LD_INT 0
9942: PPUSH
9943: PPUSH
// if not group then
9944: LD_VAR 0 2
9948: NOT
9949: IFFALSE 9953
// exit ;
9951: GO 9998
// for i in group do
9953: LD_ADDR_VAR 0 4
9957: PUSH
9958: LD_VAR 0 2
9962: PUSH
9963: FOR_IN
9964: IFFALSE 9996
// if See ( side , i ) then
9966: LD_VAR 0 1
9970: PPUSH
9971: LD_VAR 0 4
9975: PPUSH
9976: CALL_OW 292
9980: IFFALSE 9994
// begin result := true ;
9982: LD_ADDR_VAR 0 3
9986: PUSH
9987: LD_INT 1
9989: ST_TO_ADDR
// exit ;
9990: POP
9991: POP
9992: GO 9998
// end ;
9994: GO 9963
9996: POP
9997: POP
// end ; end_of_file
9998: LD_VAR 0 3
10002: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
10003: LD_INT 0
10005: PPUSH
10006: PPUSH
10007: PPUSH
10008: PPUSH
10009: PPUSH
10010: PPUSH
10011: PPUSH
// uc_side := 3 ;
10012: LD_ADDR_OWVAR 20
10016: PUSH
10017: LD_INT 3
10019: ST_TO_ADDR
// uc_nation := 3 ;
10020: LD_ADDR_OWVAR 21
10024: PUSH
10025: LD_INT 3
10027: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
10028: LD_ADDR_EXP 52
10032: PUSH
10033: LD_STRING Morozov
10035: PPUSH
10036: CALL_OW 25
10040: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
10041: LD_EXP 52
10045: PPUSH
10046: LD_INT 52
10048: PPUSH
10049: CALL_OW 52
// if not gaidarKilled then
10053: LD_EXP 7
10057: NOT
10058: IFFALSE 10091
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
10060: LD_ADDR_EXP 53
10064: PUSH
10065: LD_STRING Gaydar
10067: PPUSH
10068: LD_INT 0
10070: PPUSH
10071: LD_STRING 
10073: PPUSH
10074: CALL 27826 0 3
10078: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
10079: LD_EXP 53
10083: PPUSH
10084: LD_INT 52
10086: PPUSH
10087: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
10091: LD_INT 52
10093: PPUSH
10094: LD_STRING lenin
10096: PPUSH
10097: CALL_OW 500
// ruOutsiders := [ ] ;
10101: LD_ADDR_EXP 55
10105: PUSH
10106: EMPTY
10107: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
10108: LD_ADDR_EXP 57
10112: PUSH
10113: EMPTY
10114: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
10115: LD_ADDR_EXP 58
10119: PUSH
10120: EMPTY
10121: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
10122: LD_ADDR_EXP 59
10126: PUSH
10127: EMPTY
10128: ST_TO_ADDR
// ruAttackers := [ ] ;
10129: LD_ADDR_EXP 60
10133: PUSH
10134: EMPTY
10135: ST_TO_ADDR
// waveStrength := 0 ;
10136: LD_ADDR_EXP 61
10140: PUSH
10141: LD_INT 0
10143: ST_TO_ADDR
// if not gaidarKilled then
10144: LD_EXP 7
10148: NOT
10149: IFFALSE 10159
// waveStrength := 2 ;
10151: LD_ADDR_EXP 61
10155: PUSH
10156: LD_INT 2
10158: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
10159: LD_ADDR_VAR 0 7
10163: PUSH
10164: LD_INT 22
10166: PUSH
10167: LD_INT 3
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: LD_INT 21
10176: PUSH
10177: LD_INT 3
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PPUSH
10188: CALL_OW 69
10192: ST_TO_ADDR
// for i in tmp do
10193: LD_ADDR_VAR 0 2
10197: PUSH
10198: LD_VAR 0 7
10202: PUSH
10203: FOR_IN
10204: IFFALSE 10241
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
10206: LD_VAR 0 2
10210: PPUSH
10211: LD_INT 5
10213: PUSH
10214: LD_INT 6
10216: PUSH
10217: LD_INT 7
10219: PUSH
10220: LD_INT 8
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: PUSH
10229: LD_OWVAR 67
10233: ARRAY
10234: PPUSH
10235: CALL_OW 241
10239: GO 10203
10241: POP
10242: POP
// for i := 1 to 3 do
10243: LD_ADDR_VAR 0 2
10247: PUSH
10248: DOUBLE
10249: LD_INT 1
10251: DEC
10252: ST_TO_ADDR
10253: LD_INT 3
10255: PUSH
10256: FOR_TO
10257: IFFALSE 10295
// begin PrepareHuman ( false , 1 , 0 ) ;
10259: LD_INT 0
10261: PPUSH
10262: LD_INT 1
10264: PPUSH
10265: LD_INT 0
10267: PPUSH
10268: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
10272: CALL_OW 44
10276: PPUSH
10277: LD_INT 75
10279: PPUSH
10280: LD_INT 49
10282: PPUSH
10283: LD_INT 3
10285: PPUSH
10286: LD_INT 0
10288: PPUSH
10289: CALL_OW 50
// end ;
10293: GO 10256
10295: POP
10296: POP
// for i := 1 to 4 do
10297: LD_ADDR_VAR 0 2
10301: PUSH
10302: DOUBLE
10303: LD_INT 1
10305: DEC
10306: ST_TO_ADDR
10307: LD_INT 4
10309: PUSH
10310: FOR_TO
10311: IFFALSE 10357
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
10313: LD_INT 0
10315: PPUSH
10316: LD_INT 1
10318: PPUSH
10319: LD_INT 2
10321: PPUSH
10322: CALL_OW 12
10326: PPUSH
10327: LD_INT 0
10329: PPUSH
10330: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
10334: CALL_OW 44
10338: PPUSH
10339: LD_INT 330
10341: PPUSH
10342: LD_INT 231
10344: PPUSH
10345: LD_INT 5
10347: PPUSH
10348: LD_INT 0
10350: PPUSH
10351: CALL_OW 50
// end ;
10355: GO 10310
10357: POP
10358: POP
// hc_class := 1 ;
10359: LD_ADDR_OWVAR 28
10363: PUSH
10364: LD_INT 1
10366: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
10367: CALL_OW 44
10371: PPUSH
10372: LD_INT 324
10374: PPUSH
10375: LD_INT 219
10377: PPUSH
10378: CALL_OW 428
10382: PPUSH
10383: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
10387: CALL_OW 44
10391: PPUSH
10392: LD_INT 316
10394: PPUSH
10395: LD_INT 223
10397: PPUSH
10398: CALL_OW 428
10402: PPUSH
10403: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
10407: LD_ADDR_VAR 0 7
10411: PUSH
10412: LD_INT 172
10414: PPUSH
10415: LD_INT 198
10417: PPUSH
10418: CALL_OW 428
10422: PPUSH
10423: CALL_OW 274
10427: PUSH
10428: LD_INT 189
10430: PPUSH
10431: LD_INT 156
10433: PPUSH
10434: CALL_OW 428
10438: PPUSH
10439: CALL_OW 274
10443: PUSH
10444: LD_INT 341
10446: PPUSH
10447: LD_INT 232
10449: PPUSH
10450: CALL_OW 428
10454: PPUSH
10455: CALL_OW 274
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: LIST
10464: ST_TO_ADDR
// for i in tmp do
10465: LD_ADDR_VAR 0 2
10469: PUSH
10470: LD_VAR 0 7
10474: PUSH
10475: FOR_IN
10476: IFFALSE 10510
// begin SetResourceType ( i , mat_cans , 200 ) ;
10478: LD_VAR 0 2
10482: PPUSH
10483: LD_INT 1
10485: PPUSH
10486: LD_INT 200
10488: PPUSH
10489: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
10493: LD_VAR 0 2
10497: PPUSH
10498: LD_INT 2
10500: PPUSH
10501: LD_INT 200
10503: PPUSH
10504: CALL_OW 277
// end ;
10508: GO 10475
10510: POP
10511: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
10512: LD_ADDR_VAR 0 7
10516: PUSH
10517: LD_INT 177
10519: PUSH
10520: LD_INT 114
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: LD_INT 138
10529: PUSH
10530: LD_INT 96
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: ST_TO_ADDR
// for i := 1 to tmp do
10541: LD_ADDR_VAR 0 2
10545: PUSH
10546: DOUBLE
10547: LD_INT 1
10549: DEC
10550: ST_TO_ADDR
10551: LD_VAR 0 7
10555: PUSH
10556: FOR_TO
10557: IFFALSE 10640
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
10559: LD_INT 0
10561: PPUSH
10562: LD_INT 9
10564: PPUSH
10565: LD_INT 6
10567: PPUSH
10568: CALL_OW 380
// un := CreateHuman ;
10572: LD_ADDR_VAR 0 5
10576: PUSH
10577: CALL_OW 44
10581: ST_TO_ADDR
// SetDir ( un , 2 ) ;
10582: LD_VAR 0 5
10586: PPUSH
10587: LD_INT 2
10589: PPUSH
10590: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
10594: LD_VAR 0 5
10598: PPUSH
10599: LD_VAR 0 7
10603: PUSH
10604: LD_VAR 0 2
10608: ARRAY
10609: PUSH
10610: LD_INT 1
10612: ARRAY
10613: PPUSH
10614: LD_VAR 0 7
10618: PUSH
10619: LD_VAR 0 2
10623: ARRAY
10624: PUSH
10625: LD_INT 2
10627: ARRAY
10628: PPUSH
10629: CALL_OW 428
10633: PPUSH
10634: CALL_OW 52
// end ;
10638: GO 10556
10640: POP
10641: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
10642: LD_ADDR_VAR 0 7
10646: PUSH
10647: LD_INT 198
10649: PUSH
10650: LD_INT 158
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PUSH
10657: LD_INT 203
10659: PUSH
10660: LD_INT 166
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PUSH
10667: LD_INT 181
10669: PUSH
10670: LD_INT 209
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PUSH
10677: LD_INT 178
10679: PUSH
10680: LD_INT 196
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 181
10689: PUSH
10690: LD_INT 212
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: ST_TO_ADDR
// for i := 1 to tmp do
10704: LD_ADDR_VAR 0 2
10708: PUSH
10709: DOUBLE
10710: LD_INT 1
10712: DEC
10713: ST_TO_ADDR
10714: LD_VAR 0 7
10718: PUSH
10719: FOR_TO
10720: IFFALSE 10841
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
10722: LD_INT 0
10724: PPUSH
10725: LD_INT 1
10727: PPUSH
10728: LD_INT 4
10730: PUSH
10731: LD_INT 5
10733: PUSH
10734: LD_INT 6
10736: PUSH
10737: LD_INT 7
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: PUSH
10746: LD_OWVAR 67
10750: ARRAY
10751: PPUSH
10752: CALL_OW 380
// un := CreateHuman ;
10756: LD_ADDR_VAR 0 5
10760: PUSH
10761: CALL_OW 44
10765: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10766: LD_ADDR_VAR 0 4
10770: PUSH
10771: LD_VAR 0 7
10775: PUSH
10776: LD_VAR 0 2
10780: ARRAY
10781: PUSH
10782: LD_INT 1
10784: ARRAY
10785: PPUSH
10786: LD_VAR 0 7
10790: PUSH
10791: LD_VAR 0 2
10795: ARRAY
10796: PUSH
10797: LD_INT 2
10799: ARRAY
10800: PPUSH
10801: CALL_OW 428
10805: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
10806: LD_VAR 0 5
10810: PPUSH
10811: LD_VAR 0 4
10815: PPUSH
10816: CALL 60542 0 1
10820: PPUSH
10821: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
10825: LD_VAR 0 5
10829: PPUSH
10830: LD_VAR 0 4
10834: PPUSH
10835: CALL_OW 52
// end ;
10839: GO 10719
10841: POP
10842: POP
// for i := 1 to 3 do
10843: LD_ADDR_VAR 0 2
10847: PUSH
10848: DOUBLE
10849: LD_INT 1
10851: DEC
10852: ST_TO_ADDR
10853: LD_INT 3
10855: PUSH
10856: FOR_TO
10857: IFFALSE 10912
// begin InitHc ;
10859: CALL_OW 19
// uc_nation := 0 ;
10863: LD_ADDR_OWVAR 21
10867: PUSH
10868: LD_INT 0
10870: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
10871: LD_ADDR_OWVAR 28
10875: PUSH
10876: LD_INT 16
10878: ST_TO_ADDR
// un := CreateHuman ;
10879: LD_ADDR_VAR 0 5
10883: PUSH
10884: CALL_OW 44
10888: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
10889: LD_VAR 0 5
10893: PPUSH
10894: LD_INT 194
10896: PPUSH
10897: LD_INT 164
10899: PPUSH
10900: LD_INT 6
10902: PPUSH
10903: LD_INT 0
10905: PPUSH
10906: CALL_OW 50
// end ;
10910: GO 10856
10912: POP
10913: POP
// uc_nation := 3 ;
10914: LD_ADDR_OWVAR 21
10918: PUSH
10919: LD_INT 3
10921: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
10922: LD_INT 24
10924: PPUSH
10925: LD_INT 1
10927: PPUSH
10928: LD_INT 1
10930: PPUSH
10931: LD_INT 44
10933: PPUSH
10934: LD_INT 10
10936: PPUSH
10937: CALL 32841 0 5
// un := CreateVehicle ;
10941: LD_ADDR_VAR 0 5
10945: PUSH
10946: CALL_OW 45
10950: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 162 , 1 , false ) ;
10951: LD_VAR 0 5
10955: PPUSH
10956: LD_INT 199
10958: PPUSH
10959: LD_INT 162
10961: PPUSH
10962: LD_INT 1
10964: PPUSH
10965: LD_INT 0
10967: PPUSH
10968: CALL 67415 0 5
// ComHold ( un ) ;
10972: LD_VAR 0 5
10976: PPUSH
10977: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
10981: LD_INT 0
10983: PPUSH
10984: LD_INT 3
10986: PPUSH
10987: LD_INT 4
10989: PPUSH
10990: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
10994: CALL_OW 44
10998: PPUSH
10999: LD_VAR 0 5
11003: PPUSH
11004: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
11008: LD_INT 24
11010: PPUSH
11011: LD_INT 1
11013: PPUSH
11014: LD_INT 1
11016: PPUSH
11017: LD_INT 45
11019: PPUSH
11020: LD_INT 10
11022: PPUSH
11023: CALL 32841 0 5
// un := CreateVehicle ;
11027: LD_ADDR_VAR 0 5
11031: PUSH
11032: CALL_OW 45
11036: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
11037: LD_VAR 0 5
11041: PPUSH
11042: LD_INT 129
11044: PPUSH
11045: LD_INT 93
11047: PPUSH
11048: LD_INT 1
11050: PPUSH
11051: LD_INT 0
11053: PPUSH
11054: CALL 67415 0 5
// ComHold ( un ) ;
11058: LD_VAR 0 5
11062: PPUSH
11063: CALL_OW 140
// if Difficulty > 1 then
11067: LD_OWVAR 67
11071: PUSH
11072: LD_INT 1
11074: GREATER
11075: IFFALSE 11249
// begin PrepareHuman ( false , 3 , 4 ) ;
11077: LD_INT 0
11079: PPUSH
11080: LD_INT 3
11082: PPUSH
11083: LD_INT 4
11085: PPUSH
11086: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
11090: CALL_OW 44
11094: PPUSH
11095: LD_VAR 0 5
11099: PPUSH
11100: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
11104: LD_INT 24
11106: PPUSH
11107: LD_INT 1
11109: PPUSH
11110: LD_INT 1
11112: PPUSH
11113: LD_INT 45
11115: PPUSH
11116: LD_INT 10
11118: PPUSH
11119: CALL 32841 0 5
// un := CreateVehicle ;
11123: LD_ADDR_VAR 0 5
11127: PUSH
11128: CALL_OW 45
11132: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 92 , 2 , false ) ;
11133: LD_VAR 0 5
11137: PPUSH
11138: LD_INT 134
11140: PPUSH
11141: LD_INT 92
11143: PPUSH
11144: LD_INT 2
11146: PPUSH
11147: LD_INT 0
11149: PPUSH
11150: CALL 67415 0 5
// ComHold ( un ) ;
11154: LD_VAR 0 5
11158: PPUSH
11159: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
11163: LD_INT 0
11165: PPUSH
11166: LD_INT 3
11168: PPUSH
11169: LD_INT 4
11171: PPUSH
11172: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
11176: CALL_OW 44
11180: PPUSH
11181: LD_VAR 0 5
11185: PPUSH
11186: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
11190: LD_INT 24
11192: PPUSH
11193: LD_INT 1
11195: PPUSH
11196: LD_INT 1
11198: PPUSH
11199: LD_INT 45
11201: PPUSH
11202: LD_INT 10
11204: PPUSH
11205: CALL 32841 0 5
// un := CreateVehicle ;
11209: LD_ADDR_VAR 0 5
11213: PUSH
11214: CALL_OW 45
11218: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
11219: LD_VAR 0 5
11223: PPUSH
11224: LD_INT 200
11226: PPUSH
11227: LD_INT 173
11229: PPUSH
11230: LD_INT 1
11232: PPUSH
11233: LD_INT 0
11235: PPUSH
11236: CALL 67415 0 5
// ComHold ( un ) ;
11240: LD_VAR 0 5
11244: PPUSH
11245: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
11249: LD_INT 0
11251: PPUSH
11252: LD_INT 3
11254: PPUSH
11255: LD_INT 4
11257: PPUSH
11258: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
11262: CALL_OW 44
11266: PPUSH
11267: LD_VAR 0 5
11271: PPUSH
11272: CALL_OW 52
// bc_type := b_armoury ;
11276: LD_ADDR_OWVAR 42
11280: PUSH
11281: LD_INT 4
11283: ST_TO_ADDR
// if Difficulty > 1 then
11284: LD_OWVAR 67
11288: PUSH
11289: LD_INT 1
11291: GREATER
11292: IFFALSE 11302
// bc_type := b_barracks ;
11294: LD_ADDR_OWVAR 42
11298: PUSH
11299: LD_INT 5
11301: ST_TO_ADDR
// bc_level := 6 ;
11302: LD_ADDR_OWVAR 43
11306: PUSH
11307: LD_INT 6
11309: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
11310: LD_INT 120
11312: PPUSH
11313: LD_INT 100
11315: PPUSH
11316: LD_INT 5
11318: PPUSH
11319: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
11323: LD_ADDR_VAR 0 2
11327: PUSH
11328: DOUBLE
11329: LD_INT 1
11331: DEC
11332: ST_TO_ADDR
11333: LD_INT 3
11335: PUSH
11336: LD_INT 3
11338: PUSH
11339: LD_INT 4
11341: PUSH
11342: LD_INT 4
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: PUSH
11351: LD_OWVAR 67
11355: ARRAY
11356: PUSH
11357: FOR_TO
11358: IFFALSE 11416
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
11360: LD_INT 0
11362: PPUSH
11363: LD_INT 1
11365: PUSH
11366: LD_INT 1
11368: PUSH
11369: LD_INT 9
11371: PUSH
11372: LD_INT 9
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: PUSH
11381: LD_OWVAR 67
11385: ARRAY
11386: PPUSH
11387: LD_INT 5
11389: PPUSH
11390: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
11394: CALL_OW 44
11398: PPUSH
11399: LD_INT 120
11401: PPUSH
11402: LD_INT 100
11404: PPUSH
11405: CALL_OW 428
11409: PPUSH
11410: CALL_OW 52
// end ;
11414: GO 11357
11416: POP
11417: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
11418: LD_ADDR_VAR 0 7
11422: PUSH
11423: LD_INT 135
11425: PUSH
11426: LD_INT 100
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 137
11435: PUSH
11436: LD_INT 92
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: ST_TO_ADDR
// for i := 1 to tmp do
11447: LD_ADDR_VAR 0 2
11451: PUSH
11452: DOUBLE
11453: LD_INT 1
11455: DEC
11456: ST_TO_ADDR
11457: LD_VAR 0 7
11461: PUSH
11462: FOR_TO
11463: IFFALSE 11633
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
11465: LD_INT 22
11467: PUSH
11468: LD_INT 22
11470: PUSH
11471: LD_INT 24
11473: PUSH
11474: LD_INT 24
11476: PUSH
11477: LD_INT 24
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: PUSH
11487: LD_OWVAR 67
11491: PUSH
11492: LD_INT 0
11494: PPUSH
11495: LD_INT 1
11497: PPUSH
11498: CALL_OW 12
11502: PLUS
11503: ARRAY
11504: PPUSH
11505: LD_INT 1
11507: PPUSH
11508: LD_INT 1
11510: PPUSH
11511: LD_INT 44
11513: PPUSH
11514: LD_INT 25
11516: PPUSH
11517: CALL 32841 0 5
// veh := CreateVehicle ;
11521: LD_ADDR_VAR 0 6
11525: PUSH
11526: CALL_OW 45
11530: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
11531: LD_VAR 0 6
11535: PPUSH
11536: LD_INT 2
11538: PPUSH
11539: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
11543: LD_VAR 0 6
11547: PPUSH
11548: LD_VAR 0 7
11552: PUSH
11553: LD_VAR 0 2
11557: ARRAY
11558: PUSH
11559: LD_INT 1
11561: ARRAY
11562: PPUSH
11563: LD_VAR 0 7
11567: PUSH
11568: LD_VAR 0 2
11572: ARRAY
11573: PUSH
11574: LD_INT 2
11576: ARRAY
11577: PPUSH
11578: LD_INT 0
11580: PPUSH
11581: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
11585: LD_INT 0
11587: PPUSH
11588: LD_INT 3
11590: PPUSH
11591: LD_INT 6
11593: PPUSH
11594: CALL_OW 380
// un := CreateHuman ;
11598: LD_ADDR_VAR 0 5
11602: PUSH
11603: CALL_OW 44
11607: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11608: LD_VAR 0 5
11612: PPUSH
11613: LD_VAR 0 6
11617: PPUSH
11618: CALL_OW 52
// ComHold ( veh ) ;
11622: LD_VAR 0 6
11626: PPUSH
11627: CALL_OW 140
// end ;
11631: GO 11462
11633: POP
11634: POP
// tmp := [ 191 , 122 ] ;
11635: LD_ADDR_VAR 0 7
11639: PUSH
11640: LD_INT 191
11642: PUSH
11643: LD_INT 122
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
11650: LD_INT 24
11652: PPUSH
11653: LD_INT 1
11655: PPUSH
11656: LD_INT 1
11658: PPUSH
11659: LD_INT 44
11661: PPUSH
11662: LD_INT 30
11664: PPUSH
11665: CALL 32841 0 5
// ruBlockadeTank := CreateVehicle ;
11669: LD_ADDR_EXP 54
11673: PUSH
11674: CALL_OW 45
11678: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
11679: LD_EXP 54
11683: PPUSH
11684: LD_INT 2
11686: PPUSH
11687: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
11691: LD_EXP 54
11695: PPUSH
11696: LD_INT 191
11698: PPUSH
11699: LD_INT 122
11701: PPUSH
11702: LD_INT 0
11704: PPUSH
11705: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
11709: LD_INT 1
11711: PPUSH
11712: LD_INT 5
11714: PUSH
11715: LD_INT 6
11717: PUSH
11718: LD_INT 7
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: LIST
11725: PUSH
11726: LD_OWVAR 67
11730: PUSH
11731: LD_INT 1
11733: MINUS
11734: ARRAY
11735: PPUSH
11736: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
11740: CALL_OW 44
11744: PPUSH
11745: LD_EXP 54
11749: PPUSH
11750: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
11754: LD_EXP 54
11758: PPUSH
11759: CALL_OW 140
// ruBlockadeSquad := [ ] ;
11763: LD_ADDR_EXP 56
11767: PUSH
11768: EMPTY
11769: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 6 , 6 ] [ Difficulty ] do
11770: LD_ADDR_VAR 0 2
11774: PUSH
11775: DOUBLE
11776: LD_INT 1
11778: DEC
11779: ST_TO_ADDR
11780: LD_INT 3
11782: PUSH
11783: LD_INT 4
11785: PUSH
11786: LD_INT 6
11788: PUSH
11789: LD_INT 6
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: PUSH
11798: LD_OWVAR 67
11802: ARRAY
11803: PUSH
11804: FOR_TO
11805: IFFALSE 11921
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
11807: LD_INT 0
11809: PPUSH
11810: LD_INT 1
11812: PPUSH
11813: LD_INT 4
11815: PUSH
11816: LD_INT 5
11818: PUSH
11819: LD_INT 6
11821: PUSH
11822: LD_INT 7
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: PUSH
11831: LD_OWVAR 67
11835: ARRAY
11836: PPUSH
11837: CALL_OW 380
// un := CreateHuman ;
11841: LD_ADDR_VAR 0 5
11845: PUSH
11846: CALL_OW 44
11850: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
11851: LD_VAR 0 5
11855: PPUSH
11856: LD_INT 9
11858: PPUSH
11859: LD_INT 0
11861: PPUSH
11862: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
11866: LD_VAR 0 5
11870: PPUSH
11871: LD_INT 198
11873: PPUSH
11874: LD_INT 129
11876: PPUSH
11877: CALL_OW 118
// AddComCrawl ( un ) ;
11881: LD_VAR 0 5
11885: PPUSH
11886: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
11890: LD_ADDR_EXP 56
11894: PUSH
11895: LD_EXP 56
11899: PPUSH
11900: LD_EXP 56
11904: PUSH
11905: LD_INT 1
11907: PLUS
11908: PPUSH
11909: LD_VAR 0 5
11913: PPUSH
11914: CALL_OW 1
11918: ST_TO_ADDR
// end ;
11919: GO 11804
11921: POP
11922: POP
// PrepareHuman ( false , 4 , 5 ) ;
11923: LD_INT 0
11925: PPUSH
11926: LD_INT 4
11928: PPUSH
11929: LD_INT 5
11931: PPUSH
11932: CALL_OW 380
// un := CreateHuman ;
11936: LD_ADDR_VAR 0 5
11940: PUSH
11941: CALL_OW 44
11945: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
11946: LD_VAR 0 5
11950: PPUSH
11951: LD_INT 179
11953: PPUSH
11954: LD_INT 113
11956: PPUSH
11957: LD_INT 0
11959: PPUSH
11960: CALL_OW 48
// ComHold ( un ) ;
11964: LD_VAR 0 5
11968: PPUSH
11969: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
11973: LD_ADDR_EXP 56
11977: PUSH
11978: LD_EXP 56
11982: PPUSH
11983: LD_EXP 56
11987: PUSH
11988: LD_INT 1
11990: PLUS
11991: PPUSH
11992: LD_VAR 0 5
11996: PPUSH
11997: CALL_OW 1
12001: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
12002: LD_ADDR_VAR 0 7
12006: PUSH
12007: LD_INT 167
12009: PPUSH
12010: LD_INT 243
12012: PPUSH
12013: CALL_OW 428
12017: PPUSH
12018: CALL_OW 274
12022: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
12023: LD_VAR 0 7
12027: PPUSH
12028: LD_INT 1
12030: PPUSH
12031: LD_INT 1000
12033: PPUSH
12034: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
12038: LD_VAR 0 7
12042: PPUSH
12043: LD_INT 2
12045: PPUSH
12046: LD_INT 400
12048: PPUSH
12049: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
12053: LD_ADDR_VAR 0 7
12057: PUSH
12058: LD_INT 169
12060: PPUSH
12061: LD_INT 229
12063: PPUSH
12064: CALL_OW 428
12068: ST_TO_ADDR
// for i := 1 to 3 do
12069: LD_ADDR_VAR 0 2
12073: PUSH
12074: DOUBLE
12075: LD_INT 1
12077: DEC
12078: ST_TO_ADDR
12079: LD_INT 3
12081: PUSH
12082: FOR_TO
12083: IFFALSE 12174
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12085: LD_INT 0
12087: PPUSH
12088: LD_INT 1
12090: PPUSH
12091: LD_INT 4
12093: PUSH
12094: LD_INT 5
12096: PUSH
12097: LD_INT 5
12099: PUSH
12100: LD_INT 6
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: PUSH
12109: LD_OWVAR 67
12113: ARRAY
12114: PPUSH
12115: CALL_OW 380
// un := CreateHuman ;
12119: LD_ADDR_VAR 0 5
12123: PUSH
12124: CALL_OW 44
12128: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
12129: LD_VAR 0 5
12133: PPUSH
12134: LD_VAR 0 7
12138: PPUSH
12139: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
12143: LD_ADDR_EXP 57
12147: PUSH
12148: LD_EXP 57
12152: PPUSH
12153: LD_EXP 57
12157: PUSH
12158: LD_INT 1
12160: PLUS
12161: PPUSH
12162: LD_VAR 0 5
12166: PPUSH
12167: CALL_OW 1
12171: ST_TO_ADDR
// end ;
12172: GO 12082
12174: POP
12175: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
12176: LD_ADDR_VAR 0 7
12180: PUSH
12181: LD_INT 165
12183: PUSH
12184: LD_INT 227
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 173
12193: PUSH
12194: LD_INT 231
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: ST_TO_ADDR
// for i := 1 to tmp do
12205: LD_ADDR_VAR 0 2
12209: PUSH
12210: DOUBLE
12211: LD_INT 1
12213: DEC
12214: ST_TO_ADDR
12215: LD_VAR 0 7
12219: PUSH
12220: FOR_TO
12221: IFFALSE 12342
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12223: LD_INT 0
12225: PPUSH
12226: LD_INT 1
12228: PPUSH
12229: LD_INT 4
12231: PUSH
12232: LD_INT 5
12234: PUSH
12235: LD_INT 5
12237: PUSH
12238: LD_INT 6
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: PUSH
12247: LD_OWVAR 67
12251: ARRAY
12252: PPUSH
12253: CALL_OW 380
// un := CreateHuman ;
12257: LD_ADDR_VAR 0 5
12261: PUSH
12262: CALL_OW 44
12266: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
12267: LD_VAR 0 5
12271: PPUSH
12272: LD_VAR 0 7
12276: PUSH
12277: LD_VAR 0 2
12281: ARRAY
12282: PUSH
12283: LD_INT 1
12285: ARRAY
12286: PPUSH
12287: LD_VAR 0 7
12291: PUSH
12292: LD_VAR 0 2
12296: ARRAY
12297: PUSH
12298: LD_INT 2
12300: ARRAY
12301: PPUSH
12302: CALL_OW 428
12306: PPUSH
12307: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
12311: LD_ADDR_EXP 57
12315: PUSH
12316: LD_EXP 57
12320: PPUSH
12321: LD_EXP 57
12325: PUSH
12326: LD_INT 1
12328: PLUS
12329: PPUSH
12330: LD_VAR 0 5
12334: PPUSH
12335: CALL_OW 1
12339: ST_TO_ADDR
// end ;
12340: GO 12220
12342: POP
12343: POP
// for i := 1 to 2 do
12344: LD_ADDR_VAR 0 2
12348: PUSH
12349: DOUBLE
12350: LD_INT 1
12352: DEC
12353: ST_TO_ADDR
12354: LD_INT 2
12356: PUSH
12357: FOR_TO
12358: IFFALSE 12413
// begin InitHc ;
12360: CALL_OW 19
// uc_nation := 0 ;
12364: LD_ADDR_OWVAR 21
12368: PUSH
12369: LD_INT 0
12371: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
12372: LD_ADDR_OWVAR 28
12376: PUSH
12377: LD_INT 16
12379: ST_TO_ADDR
// un := CreateHuman ;
12380: LD_ADDR_VAR 0 5
12384: PUSH
12385: CALL_OW 44
12389: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
12390: LD_VAR 0 5
12394: PPUSH
12395: LD_INT 166
12397: PPUSH
12398: LD_INT 233
12400: PPUSH
12401: LD_INT 2
12403: PPUSH
12404: LD_INT 0
12406: PPUSH
12407: CALL_OW 50
// end ;
12411: GO 12357
12413: POP
12414: POP
// uc_nation := 3 ;
12415: LD_ADDR_OWVAR 21
12419: PUSH
12420: LD_INT 3
12422: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
12423: LD_ADDR_VAR 0 7
12427: PUSH
12428: LD_INT 71
12430: PUSH
12431: LD_INT 52
12433: PUSH
12434: LD_INT 11
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: LIST
12441: ST_TO_ADDR
// for i in tmp do
12442: LD_ADDR_VAR 0 2
12446: PUSH
12447: LD_VAR 0 7
12451: PUSH
12452: FOR_IN
12453: IFFALSE 12497
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
12455: LD_VAR 0 2
12459: PPUSH
12460: CALL_OW 274
12464: PPUSH
12465: LD_INT 1
12467: PPUSH
12468: LD_INT 3000
12470: PPUSH
12471: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
12475: LD_VAR 0 2
12479: PPUSH
12480: CALL_OW 274
12484: PPUSH
12485: LD_INT 2
12487: PPUSH
12488: LD_INT 600
12490: PPUSH
12491: CALL_OW 277
// end ;
12495: GO 12452
12497: POP
12498: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
12499: LD_ADDR_VAR 0 7
12503: PUSH
12504: LD_INT 41
12506: PUSH
12507: LD_INT 57
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 38
12516: PUSH
12517: LD_INT 55
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 50
12526: PUSH
12527: LD_INT 73
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 51
12536: PUSH
12537: LD_INT 65
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PUSH
12544: LD_INT 82
12546: PUSH
12547: LD_INT 93
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: LD_INT 87
12556: PUSH
12557: LD_INT 100
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PUSH
12564: LD_INT 91
12566: PUSH
12567: LD_INT 109
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: PUSH
12574: LD_INT 84
12576: PUSH
12577: LD_INT 120
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 113
12586: PUSH
12587: LD_INT 153
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PUSH
12594: LD_INT 123
12596: PUSH
12597: LD_INT 171
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PUSH
12604: LD_INT 125
12606: PUSH
12607: LD_INT 178
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: PUSH
12614: LD_INT 125
12616: PUSH
12617: LD_INT 188
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 125
12626: PUSH
12627: LD_INT 201
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PUSH
12634: LD_INT 33
12636: PUSH
12637: LD_INT 60
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PUSH
12644: LD_INT 76
12646: PUSH
12647: LD_INT 95
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: PUSH
12654: LD_INT 84
12656: PUSH
12657: LD_INT 111
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PUSH
12664: LD_INT 112
12666: PUSH
12667: LD_INT 165
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: ST_TO_ADDR
// for i := 1 to tmp do
12693: LD_ADDR_VAR 0 2
12697: PUSH
12698: DOUBLE
12699: LD_INT 1
12701: DEC
12702: ST_TO_ADDR
12703: LD_VAR 0 7
12707: PUSH
12708: FOR_TO
12709: IFFALSE 12956
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
12711: LD_ADDR_VAR 0 4
12715: PUSH
12716: LD_VAR 0 7
12720: PUSH
12721: LD_VAR 0 2
12725: ARRAY
12726: PUSH
12727: LD_INT 1
12729: ARRAY
12730: PPUSH
12731: LD_VAR 0 7
12735: PUSH
12736: LD_VAR 0 2
12740: ARRAY
12741: PUSH
12742: LD_INT 2
12744: ARRAY
12745: PPUSH
12746: CALL_OW 428
12750: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
12751: LD_VAR 0 4
12755: PPUSH
12756: CALL_OW 266
12760: PUSH
12761: LD_INT 4
12763: PUSH
12764: LD_INT 5
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: IN
12771: IFFALSE 12855
// begin for j := 1 to Difficulty do
12773: LD_ADDR_VAR 0 3
12777: PUSH
12778: DOUBLE
12779: LD_INT 1
12781: DEC
12782: ST_TO_ADDR
12783: LD_OWVAR 67
12787: PUSH
12788: FOR_TO
12789: IFFALSE 12851
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12791: LD_INT 0
12793: PPUSH
12794: LD_INT 1
12796: PPUSH
12797: LD_INT 4
12799: PUSH
12800: LD_INT 5
12802: PUSH
12803: LD_INT 5
12805: PUSH
12806: LD_INT 6
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: PUSH
12815: LD_OWVAR 67
12819: ARRAY
12820: PPUSH
12821: CALL_OW 380
// un := CreateHuman ;
12825: LD_ADDR_VAR 0 5
12829: PUSH
12830: CALL_OW 44
12834: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
12835: LD_VAR 0 5
12839: PPUSH
12840: LD_VAR 0 4
12844: PPUSH
12845: CALL_OW 52
// end ;
12849: GO 12788
12851: POP
12852: POP
// end else
12853: GO 12925
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12855: LD_INT 0
12857: PPUSH
12858: LD_INT 1
12860: PPUSH
12861: LD_INT 4
12863: PUSH
12864: LD_INT 5
12866: PUSH
12867: LD_INT 5
12869: PUSH
12870: LD_INT 6
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: PUSH
12879: LD_OWVAR 67
12883: ARRAY
12884: PPUSH
12885: CALL_OW 380
// un := CreateHuman ;
12889: LD_ADDR_VAR 0 5
12893: PUSH
12894: CALL_OW 44
12898: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
12899: LD_VAR 0 5
12903: PPUSH
12904: LD_VAR 0 4
12908: PPUSH
12909: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
12913: LD_VAR 0 5
12917: PPUSH
12918: LD_INT 9
12920: PPUSH
12921: CALL_OW 336
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
12925: LD_ADDR_EXP 58
12929: PUSH
12930: LD_EXP 58
12934: PPUSH
12935: LD_EXP 58
12939: PUSH
12940: LD_INT 1
12942: PLUS
12943: PPUSH
12944: LD_VAR 0 5
12948: PPUSH
12949: CALL_OW 1
12953: ST_TO_ADDR
// end ;
12954: GO 12708
12956: POP
12957: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
12958: LD_ADDR_VAR 0 4
12962: PUSH
12963: LD_INT 10
12965: PPUSH
12966: LD_INT 22
12968: PUSH
12969: LD_INT 3
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 30
12978: PUSH
12979: LD_INT 32
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: LD_INT 58
12988: PUSH
12989: EMPTY
12990: LIST
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: PPUSH
12997: CALL_OW 70
13001: PUSH
13002: FOR_IN
13003: IFFALSE 13137
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
13005: LD_INT 40
13007: PUSH
13008: LD_INT 50
13010: PUSH
13011: LD_INT 75
13013: PUSH
13014: LD_INT 80
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: PUSH
13023: LD_OWVAR 67
13027: ARRAY
13028: PUSH
13029: LD_EXP 7
13033: PUSH
13034: LD_INT 10
13036: MUL
13037: MINUS
13038: PPUSH
13039: CALL_OW 13
13043: NOT
13044: IFFALSE 13048
// continue ;
13046: GO 13002
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13048: LD_INT 0
13050: PPUSH
13051: LD_INT 1
13053: PPUSH
13054: LD_INT 4
13056: PUSH
13057: LD_INT 5
13059: PUSH
13060: LD_INT 5
13062: PUSH
13063: LD_INT 6
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: PUSH
13072: LD_OWVAR 67
13076: ARRAY
13077: PPUSH
13078: CALL_OW 380
// un := CreateHuman ;
13082: LD_ADDR_VAR 0 5
13086: PUSH
13087: CALL_OW 44
13091: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13092: LD_VAR 0 5
13096: PPUSH
13097: LD_VAR 0 4
13101: PPUSH
13102: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13106: LD_ADDR_EXP 58
13110: PUSH
13111: LD_EXP 58
13115: PPUSH
13116: LD_EXP 58
13120: PUSH
13121: LD_INT 1
13123: PLUS
13124: PPUSH
13125: LD_VAR 0 5
13129: PPUSH
13130: CALL_OW 1
13134: ST_TO_ADDR
// end ;
13135: GO 13002
13137: POP
13138: POP
// for i := 1 to 5 do
13139: LD_ADDR_VAR 0 2
13143: PUSH
13144: DOUBLE
13145: LD_INT 1
13147: DEC
13148: ST_TO_ADDR
13149: LD_INT 5
13151: PUSH
13152: FOR_TO
13153: IFFALSE 13251
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13155: LD_INT 0
13157: PPUSH
13158: LD_INT 2
13160: PPUSH
13161: LD_INT 4
13163: PUSH
13164: LD_INT 5
13166: PUSH
13167: LD_INT 5
13169: PUSH
13170: LD_INT 6
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: PUSH
13179: LD_OWVAR 67
13183: ARRAY
13184: PPUSH
13185: CALL_OW 380
// un := CreateHuman ;
13189: LD_ADDR_VAR 0 5
13193: PUSH
13194: CALL_OW 44
13198: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
13199: LD_VAR 0 5
13203: PPUSH
13204: LD_INT 66
13206: PPUSH
13207: LD_INT 101
13209: PPUSH
13210: LD_INT 3
13212: PPUSH
13213: LD_INT 0
13215: PPUSH
13216: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13220: LD_ADDR_EXP 58
13224: PUSH
13225: LD_EXP 58
13229: PPUSH
13230: LD_EXP 58
13234: PUSH
13235: LD_INT 1
13237: PLUS
13238: PPUSH
13239: LD_VAR 0 5
13243: PPUSH
13244: CALL_OW 1
13248: ST_TO_ADDR
// end ;
13249: GO 13152
13251: POP
13252: POP
// tmp := [ ruFac1 , ruFac2 ] ;
13253: LD_ADDR_VAR 0 7
13257: PUSH
13258: LD_INT 72
13260: PUSH
13261: LD_INT 12
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: ST_TO_ADDR
// for i := 1 to tmp do
13268: LD_ADDR_VAR 0 2
13272: PUSH
13273: DOUBLE
13274: LD_INT 1
13276: DEC
13277: ST_TO_ADDR
13278: LD_VAR 0 7
13282: PUSH
13283: FOR_TO
13284: IFFALSE 13401
// for j := 1 to 6 do
13286: LD_ADDR_VAR 0 3
13290: PUSH
13291: DOUBLE
13292: LD_INT 1
13294: DEC
13295: ST_TO_ADDR
13296: LD_INT 6
13298: PUSH
13299: FOR_TO
13300: IFFALSE 13397
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13302: LD_INT 0
13304: PPUSH
13305: LD_INT 3
13307: PPUSH
13308: LD_INT 4
13310: PUSH
13311: LD_INT 5
13313: PUSH
13314: LD_INT 5
13316: PUSH
13317: LD_INT 6
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: PUSH
13326: LD_OWVAR 67
13330: ARRAY
13331: PPUSH
13332: CALL_OW 380
// un := CreateHuman ;
13336: LD_ADDR_VAR 0 5
13340: PUSH
13341: CALL_OW 44
13345: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
13346: LD_VAR 0 5
13350: PPUSH
13351: LD_VAR 0 7
13355: PUSH
13356: LD_VAR 0 2
13360: ARRAY
13361: PPUSH
13362: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13366: LD_ADDR_EXP 58
13370: PUSH
13371: LD_EXP 58
13375: PPUSH
13376: LD_EXP 58
13380: PUSH
13381: LD_INT 1
13383: PLUS
13384: PPUSH
13385: LD_VAR 0 5
13389: PPUSH
13390: CALL_OW 1
13394: ST_TO_ADDR
// end ;
13395: GO 13299
13397: POP
13398: POP
13399: GO 13283
13401: POP
13402: POP
// for i := 1 to 3 do
13403: LD_ADDR_VAR 0 2
13407: PUSH
13408: DOUBLE
13409: LD_INT 1
13411: DEC
13412: ST_TO_ADDR
13413: LD_INT 3
13415: PUSH
13416: FOR_TO
13417: IFFALSE 13506
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13419: LD_INT 0
13421: PPUSH
13422: LD_INT 4
13424: PPUSH
13425: LD_INT 4
13427: PUSH
13428: LD_INT 5
13430: PUSH
13431: LD_INT 5
13433: PUSH
13434: LD_INT 6
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: PUSH
13443: LD_OWVAR 67
13447: ARRAY
13448: PPUSH
13449: CALL_OW 380
// un := CreateHuman ;
13453: LD_ADDR_VAR 0 5
13457: PUSH
13458: CALL_OW 44
13462: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
13463: LD_VAR 0 5
13467: PPUSH
13468: LD_INT 17
13470: PPUSH
13471: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13475: LD_ADDR_EXP 58
13479: PUSH
13480: LD_EXP 58
13484: PPUSH
13485: LD_EXP 58
13489: PUSH
13490: LD_INT 1
13492: PLUS
13493: PPUSH
13494: LD_VAR 0 5
13498: PPUSH
13499: CALL_OW 1
13503: ST_TO_ADDR
// end ;
13504: GO 13416
13506: POP
13507: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
13508: LD_ADDR_VAR 0 2
13512: PUSH
13513: DOUBLE
13514: LD_INT 1
13516: DEC
13517: ST_TO_ADDR
13518: LD_INT 2
13520: PUSH
13521: LD_INT 3
13523: PUSH
13524: LD_INT 3
13526: PUSH
13527: LD_INT 3
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: PUSH
13536: LD_OWVAR 67
13540: ARRAY
13541: PUSH
13542: FOR_TO
13543: IFFALSE 13663
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
13545: LD_INT 22
13547: PPUSH
13548: LD_INT 1
13550: PPUSH
13551: LD_INT 1
13553: PPUSH
13554: LD_INT 52
13556: PPUSH
13557: LD_INT 100
13559: PPUSH
13560: CALL 32841 0 5
// veh := CreateVehicle ;
13564: LD_ADDR_VAR 0 6
13568: PUSH
13569: CALL_OW 45
13573: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
13574: LD_INT 0
13576: PPUSH
13577: LD_INT 3
13579: PPUSH
13580: LD_INT 4
13582: PPUSH
13583: CALL_OW 380
// un := CreateHuman ;
13587: LD_ADDR_VAR 0 5
13591: PUSH
13592: CALL_OW 44
13596: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
13597: LD_VAR 0 6
13601: PPUSH
13602: LD_INT 107
13604: PPUSH
13605: LD_INT 182
13607: PPUSH
13608: LD_INT 4
13610: PPUSH
13611: LD_INT 0
13613: PPUSH
13614: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
13618: LD_VAR 0 5
13622: PPUSH
13623: LD_VAR 0 6
13627: PPUSH
13628: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13632: LD_ADDR_EXP 58
13636: PUSH
13637: LD_EXP 58
13641: PPUSH
13642: LD_EXP 58
13646: PUSH
13647: LD_INT 1
13649: PLUS
13650: PPUSH
13651: LD_VAR 0 5
13655: PPUSH
13656: CALL_OW 1
13660: ST_TO_ADDR
// end ;
13661: GO 13542
13663: POP
13664: POP
// InitHc ;
13665: CALL_OW 19
// for i := 1 to [ 4 , 6 , 8 , 12 ] [ Difficulty ] do
13669: LD_ADDR_VAR 0 2
13673: PUSH
13674: DOUBLE
13675: LD_INT 1
13677: DEC
13678: ST_TO_ADDR
13679: LD_INT 4
13681: PUSH
13682: LD_INT 6
13684: PUSH
13685: LD_INT 8
13687: PUSH
13688: LD_INT 12
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: PUSH
13697: LD_OWVAR 67
13701: ARRAY
13702: PUSH
13703: FOR_TO
13704: IFFALSE 13799
// begin uc_nation := 0 ;
13706: LD_ADDR_OWVAR 21
13710: PUSH
13711: LD_INT 0
13713: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
13714: LD_ADDR_OWVAR 28
13718: PUSH
13719: LD_INT 15
13721: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
13722: LD_ADDR_OWVAR 31
13726: PUSH
13727: LD_INT 3
13729: PUSH
13730: LD_INT 0
13732: PUSH
13733: LD_INT 0
13735: PUSH
13736: LD_INT 0
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: ST_TO_ADDR
// un := CreateHuman ;
13745: LD_ADDR_VAR 0 5
13749: PUSH
13750: CALL_OW 44
13754: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
13755: LD_VAR 0 5
13759: PPUSH
13760: LD_INT 269
13762: PUSH
13763: LD_INT 300
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: LD_VAR 0 2
13774: PUSH
13775: LD_INT 2
13777: MOD
13778: PUSH
13779: LD_INT 1
13781: PLUS
13782: ARRAY
13783: PPUSH
13784: LD_INT 182
13786: PPUSH
13787: LD_INT 4
13789: PPUSH
13790: LD_INT 0
13792: PPUSH
13793: CALL_OW 50
// end ;
13797: GO 13703
13799: POP
13800: POP
// uc_nation := 3 ;
13801: LD_ADDR_OWVAR 21
13805: PUSH
13806: LD_INT 3
13808: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
13809: LD_EXP 8
13813: PUSH
13814: LD_INT 10
13816: PUSH
13817: LD_INT 8
13819: PUSH
13820: LD_INT 6
13822: PUSH
13823: LD_INT 5
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: PUSH
13832: LD_OWVAR 67
13836: ARRAY
13837: LESS
13838: IFFALSE 13917
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
13840: LD_INT 21
13842: PPUSH
13843: LD_INT 1
13845: PPUSH
13846: LD_INT 1
13848: PPUSH
13849: LD_INT 51
13851: PPUSH
13852: LD_INT 12
13854: PPUSH
13855: CALL 32841 0 5
// veh := CreateVehicle ;
13859: LD_ADDR_VAR 0 6
13863: PUSH
13864: CALL_OW 45
13868: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
13869: LD_VAR 0 6
13873: PPUSH
13874: LD_INT 269
13876: PPUSH
13877: LD_INT 66
13879: PPUSH
13880: LD_INT 4
13882: PPUSH
13883: LD_INT 0
13885: PPUSH
13886: CALL 67415 0 5
// SetLives ( veh , 333 ) ;
13890: LD_VAR 0 6
13894: PPUSH
13895: LD_INT 333
13897: PPUSH
13898: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
13902: LD_VAR 0 6
13906: PPUSH
13907: LD_INT 2
13909: PPUSH
13910: LD_INT 100
13912: PPUSH
13913: CALL_OW 290
// end ; end ;
13917: LD_VAR 0 1
13921: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
13922: LD_EXP 54
13926: PUSH
13927: LD_EXP 54
13931: PPUSH
13932: CALL_OW 255
13936: PUSH
13937: LD_INT 3
13939: EQUAL
13940: AND
13941: IFFALSE 14104
13943: GO 13945
13945: DISABLE
13946: LD_INT 0
13948: PPUSH
// begin enable ;
13949: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
13950: LD_INT 81
13952: PUSH
13953: LD_INT 3
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: LD_INT 91
13962: PUSH
13963: LD_EXP 54
13967: PUSH
13968: LD_INT 15
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: LIST
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: PPUSH
13980: CALL_OW 69
13984: IFFALSE 14064
// begin if not IsDrivenBy ( ruBlockadeTank ) then
13986: LD_EXP 54
13990: PPUSH
13991: CALL_OW 311
13995: NOT
13996: IFFALSE 14062
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
13998: LD_ADDR_VAR 0 1
14002: PUSH
14003: LD_INT 22
14005: PUSH
14006: LD_INT 3
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PUSH
14013: LD_INT 21
14015: PUSH
14016: LD_INT 1
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PPUSH
14027: CALL_OW 69
14031: PPUSH
14032: LD_EXP 54
14036: PPUSH
14037: CALL_OW 74
14041: ST_TO_ADDR
// if driver then
14042: LD_VAR 0 1
14046: IFFALSE 14062
// ComEnterUnit ( driver , ruBlockadeTank ) ;
14048: LD_VAR 0 1
14052: PPUSH
14053: LD_EXP 54
14057: PPUSH
14058: CALL_OW 120
// end ; exit ;
14062: GO 14104
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
14064: LD_EXP 54
14068: PPUSH
14069: CALL_OW 256
14073: PUSH
14074: LD_INT 1000
14076: LESS
14077: PUSH
14078: LD_EXP 54
14082: PPUSH
14083: CALL_OW 311
14087: AND
14088: IFFALSE 14104
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
14090: LD_EXP 54
14094: PPUSH
14095: CALL_OW 311
14099: PPUSH
14100: CALL 66975 0 1
// end ;
14104: PPOPN 1
14106: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
14107: LD_EXP 56
14111: PPUSH
14112: LD_INT 3
14114: PUSH
14115: LD_INT 24
14117: PUSH
14118: LD_INT 1000
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PPUSH
14129: CALL_OW 72
14133: PUSH
14134: LD_EXP 56
14138: PPUSH
14139: LD_INT 25
14141: PUSH
14142: LD_INT 4
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 50
14151: PUSH
14152: EMPTY
14153: LIST
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PPUSH
14159: CALL_OW 72
14163: AND
14164: IFFALSE 14352
14166: GO 14168
14168: DISABLE
14169: LD_INT 0
14171: PPUSH
14172: PPUSH
14173: PPUSH
// begin enable ;
14174: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
14175: LD_ADDR_VAR 0 3
14179: PUSH
14180: LD_EXP 56
14184: PPUSH
14185: LD_INT 3
14187: PUSH
14188: LD_INT 24
14190: PUSH
14191: LD_INT 1000
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PPUSH
14202: CALL_OW 72
14206: PPUSH
14207: LD_INT 1
14209: PPUSH
14210: CALL 67215 0 2
14214: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
14215: LD_ADDR_VAR 0 2
14219: PUSH
14220: LD_EXP 56
14224: PPUSH
14225: LD_INT 25
14227: PUSH
14228: LD_INT 4
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 50
14237: PUSH
14238: EMPTY
14239: LIST
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PPUSH
14245: CALL_OW 72
14249: PUSH
14250: LD_INT 1
14252: ARRAY
14253: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
14254: LD_VAR 0 2
14258: PPUSH
14259: LD_VAR 0 3
14263: PUSH
14264: LD_INT 1
14266: ARRAY
14267: PPUSH
14268: CALL 62561 0 2
14272: NOT
14273: IFFALSE 14352
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
14275: LD_VAR 0 3
14279: PUSH
14280: LD_INT 1
14282: ARRAY
14283: PPUSH
14284: LD_INT 9
14286: PPUSH
14287: CALL_OW 308
14291: NOT
14292: IFFALSE 14310
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
14294: LD_VAR 0 3
14298: PUSH
14299: LD_INT 1
14301: ARRAY
14302: PPUSH
14303: LD_INT 9
14305: PPUSH
14306: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
14310: LD_VAR 0 2
14314: PPUSH
14315: LD_VAR 0 3
14319: PUSH
14320: LD_INT 1
14322: ARRAY
14323: PPUSH
14324: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
14328: LD_VAR 0 2
14332: PPUSH
14333: LD_INT 179
14335: PPUSH
14336: LD_INT 113
14338: PPUSH
14339: CALL_OW 171
// AddComHold ( sci ) ;
14343: LD_VAR 0 2
14347: PPUSH
14348: CALL_OW 200
// end ; end ;
14352: PPOPN 3
14354: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
14355: LD_INT 2
14357: PPUSH
14358: LD_INT 52
14360: PPUSH
14361: CALL_OW 292
14365: IFFALSE 14470
14367: GO 14369
14369: DISABLE
14370: LD_INT 0
14372: PPUSH
14373: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
14374: LD_ADDR_VAR 0 2
14378: PUSH
14379: LD_EXP 58
14383: PPUSH
14384: LD_INT 25
14386: PUSH
14387: LD_INT 1
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: PUSH
14394: LD_INT 50
14396: PUSH
14397: EMPTY
14398: LIST
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: PPUSH
14404: CALL_OW 72
14408: ST_TO_ADDR
// if not tmp then
14409: LD_VAR 0 2
14413: NOT
14414: IFFALSE 14418
// exit ;
14416: GO 14470
// for i in tmp do
14418: LD_ADDR_VAR 0 1
14422: PUSH
14423: LD_VAR 0 2
14427: PUSH
14428: FOR_IN
14429: IFFALSE 14468
// begin if IsInUnit ( i ) then
14431: LD_VAR 0 1
14435: PPUSH
14436: CALL_OW 310
14440: IFFALSE 14451
// ComExitBuilding ( i ) ;
14442: LD_VAR 0 1
14446: PPUSH
14447: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
14451: LD_VAR 0 1
14455: PPUSH
14456: LD_INT 84
14458: PPUSH
14459: LD_INT 133
14461: PPUSH
14462: CALL_OW 174
// end ;
14466: GO 14428
14468: POP
14469: POP
// end ;
14470: PPOPN 2
14472: END
// every 0 0$1 trigger leninSpotted do var i , tmp , weapon ;
14473: LD_EXP 14
14477: IFFALSE 14637
14479: GO 14481
14481: DISABLE
14482: LD_INT 0
14484: PPUSH
14485: PPUSH
14486: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
14487: LD_ADDR_VAR 0 2
14491: PUSH
14492: LD_INT 72
14494: PUSH
14495: LD_INT 12
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
14502: LD_ADDR_VAR 0 3
14506: PUSH
14507: LD_INT 44
14509: PUSH
14510: LD_INT 43
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: LD_INT 45
14519: PUSH
14520: LD_INT 44
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: LD_INT 45
14529: PUSH
14530: LD_INT 46
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: LD_INT 45
14539: PUSH
14540: LD_INT 46
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: PUSH
14553: LD_OWVAR 67
14557: ARRAY
14558: ST_TO_ADDR
// for i := 1 to 6 do
14559: LD_ADDR_VAR 0 1
14563: PUSH
14564: DOUBLE
14565: LD_INT 1
14567: DEC
14568: ST_TO_ADDR
14569: LD_INT 6
14571: PUSH
14572: FOR_TO
14573: IFFALSE 14635
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
14575: LD_VAR 0 2
14579: PPUSH
14580: LD_INT 22
14582: PUSH
14583: LD_INT 23
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: PUSH
14590: LD_VAR 0 1
14594: PUSH
14595: LD_INT 2
14597: MOD
14598: PUSH
14599: LD_INT 1
14601: PLUS
14602: ARRAY
14603: PPUSH
14604: LD_INT 1
14606: PPUSH
14607: LD_INT 1
14609: PPUSH
14610: LD_VAR 0 3
14614: PUSH
14615: LD_VAR 0 1
14619: PUSH
14620: LD_INT 2
14622: MOD
14623: PUSH
14624: LD_INT 1
14626: PLUS
14627: ARRAY
14628: PPUSH
14629: CALL_OW 185
14633: GO 14572
14635: POP
14636: POP
// end ;
14637: PPOPN 3
14639: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
14640: LD_EXP 11
14644: IFFALSE 15793
14646: GO 14648
14648: DISABLE
14649: LD_INT 0
14651: PPUSH
14652: PPUSH
14653: PPUSH
14654: PPUSH
14655: PPUSH
14656: PPUSH
// begin enable ;
14657: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
14658: LD_ADDR_VAR 0 6
14662: PUSH
14663: LD_INT 10
14665: PPUSH
14666: LD_INT 81
14668: PUSH
14669: LD_INT 3
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PPUSH
14676: CALL_OW 70
14680: ST_TO_ADDR
// if ruSpecialVehicleGroup then
14681: LD_EXP 59
14685: IFFALSE 14951
// begin for i in ruSpecialVehicleGroup do
14687: LD_ADDR_VAR 0 1
14691: PUSH
14692: LD_EXP 59
14696: PUSH
14697: FOR_IN
14698: IFFALSE 14949
// begin if enemyInBase then
14700: LD_VAR 0 6
14704: IFFALSE 14947
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
14706: LD_VAR 0 1
14710: PPUSH
14711: CALL_OW 256
14715: PUSH
14716: LD_INT 500
14718: GREATER
14719: PUSH
14720: LD_VAR 0 1
14724: PPUSH
14725: CALL_OW 110
14729: PUSH
14730: LD_INT 0
14732: EQUAL
14733: AND
14734: IFFALSE 14760
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
14736: LD_VAR 0 1
14740: PPUSH
14741: LD_VAR 0 6
14745: PPUSH
14746: LD_VAR 0 1
14750: PPUSH
14751: CALL_OW 74
14755: PPUSH
14756: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
14760: LD_VAR 0 1
14764: PPUSH
14765: CALL_OW 256
14769: PUSH
14770: LD_INT 500
14772: LESSEQUAL
14773: PUSH
14774: LD_VAR 0 1
14778: PPUSH
14779: CALL_OW 110
14783: PUSH
14784: LD_INT 0
14786: EQUAL
14787: AND
14788: IFFALSE 14817
// begin SetTag ( i , 1 ) ;
14790: LD_VAR 0 1
14794: PPUSH
14795: LD_INT 1
14797: PPUSH
14798: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
14802: LD_VAR 0 1
14806: PPUSH
14807: LD_INT 83
14809: PPUSH
14810: LD_INT 134
14812: PPUSH
14813: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
14817: LD_VAR 0 1
14821: PPUSH
14822: CALL_OW 256
14826: PUSH
14827: LD_INT 1000
14829: LESS
14830: PUSH
14831: LD_VAR 0 1
14835: PPUSH
14836: CALL_OW 110
14840: PUSH
14841: LD_INT 1
14843: EQUAL
14844: AND
14845: PUSH
14846: LD_VAR 0 1
14850: PPUSH
14851: LD_INT 83
14853: PPUSH
14854: LD_INT 134
14856: PPUSH
14857: CALL_OW 297
14861: PUSH
14862: LD_INT 6
14864: LESS
14865: AND
14866: IFFALSE 14894
// begin SetFuel ( i , 100 ) ;
14868: LD_VAR 0 1
14872: PPUSH
14873: LD_INT 100
14875: PPUSH
14876: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
14880: LD_VAR 0 1
14884: PPUSH
14885: CALL_OW 310
14889: PPUSH
14890: CALL 67095 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 256
14903: PUSH
14904: LD_INT 1000
14906: EQUAL
14907: PUSH
14908: LD_VAR 0 1
14912: PPUSH
14913: CALL_OW 110
14917: PUSH
14918: LD_INT 1
14920: EQUAL
14921: AND
14922: PUSH
14923: LD_VAR 0 1
14927: PPUSH
14928: CALL_OW 311
14932: AND
14933: IFFALSE 14947
// SetTag ( i , 0 ) ;
14935: LD_VAR 0 1
14939: PPUSH
14940: LD_INT 0
14942: PPUSH
14943: CALL_OW 109
// end ; end ;
14947: GO 14697
14949: POP
14950: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
14951: LD_ADDR_VAR 0 5
14955: PUSH
14956: LD_EXP 58
14960: PPUSH
14961: LD_INT 25
14963: PUSH
14964: LD_INT 4
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PPUSH
14971: CALL_OW 72
14975: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14976: LD_ADDR_VAR 0 4
14980: PUSH
14981: LD_EXP 58
14985: PPUSH
14986: LD_INT 92
14988: PUSH
14989: LD_INT 92
14991: PUSH
14992: LD_INT 155
14994: PUSH
14995: LD_INT 12
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 3
15006: PUSH
15007: LD_INT 24
15009: PUSH
15010: LD_INT 1000
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PPUSH
15025: CALL_OW 72
15029: ST_TO_ADDR
// if sci then
15030: LD_VAR 0 5
15034: IFFALSE 15167
// begin if hurt then
15036: LD_VAR 0 4
15040: IFFALSE 15113
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
15042: LD_VAR 0 5
15046: PPUSH
15047: LD_INT 3
15049: PUSH
15050: LD_INT 54
15052: PUSH
15053: EMPTY
15054: LIST
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PPUSH
15060: CALL_OW 72
15064: IFFALSE 15093
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
15066: LD_VAR 0 5
15070: PPUSH
15071: LD_INT 3
15073: PUSH
15074: LD_INT 54
15076: PUSH
15077: EMPTY
15078: LIST
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PPUSH
15084: CALL_OW 72
15088: PPUSH
15089: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
15093: LD_VAR 0 5
15097: PPUSH
15098: LD_VAR 0 4
15102: PUSH
15103: LD_INT 1
15105: ARRAY
15106: PPUSH
15107: CALL_OW 188
// end else
15111: GO 15167
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
15113: LD_VAR 0 5
15117: PPUSH
15118: LD_INT 3
15120: PUSH
15121: LD_INT 54
15123: PUSH
15124: EMPTY
15125: LIST
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PPUSH
15131: CALL_OW 72
15135: IFFALSE 15167
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
15137: LD_VAR 0 5
15141: PPUSH
15142: LD_INT 3
15144: PUSH
15145: LD_INT 54
15147: PUSH
15148: EMPTY
15149: LIST
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PPUSH
15155: CALL_OW 72
15159: PPUSH
15160: LD_INT 17
15162: PPUSH
15163: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15167: LD_ADDR_VAR 0 3
15171: PUSH
15172: LD_INT 10
15174: PPUSH
15175: LD_INT 21
15177: PUSH
15178: LD_INT 3
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 3
15187: PUSH
15188: LD_INT 24
15190: PUSH
15191: LD_INT 1000
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PPUSH
15206: CALL_OW 70
15210: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
15211: LD_ADDR_VAR 0 2
15215: PUSH
15216: LD_EXP 58
15220: PPUSH
15221: LD_INT 25
15223: PUSH
15224: LD_INT 2
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PPUSH
15231: CALL_OW 72
15235: PUSH
15236: LD_INT 22
15238: PUSH
15239: LD_INT 3
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: PUSH
15246: LD_INT 34
15248: PUSH
15249: LD_INT 52
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PPUSH
15260: CALL_OW 69
15264: UNION
15265: ST_TO_ADDR
// if not tmp then
15266: LD_VAR 0 2
15270: NOT
15271: IFFALSE 15275
// exit ;
15273: GO 15793
// for i in tmp do
15275: LD_ADDR_VAR 0 1
15279: PUSH
15280: LD_VAR 0 2
15284: PUSH
15285: FOR_IN
15286: IFFALSE 15791
// begin if GetClass ( i ) = 2 then
15288: LD_VAR 0 1
15292: PPUSH
15293: CALL_OW 257
15297: PUSH
15298: LD_INT 2
15300: EQUAL
15301: IFFALSE 15524
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
15303: LD_VAR 0 1
15307: PPUSH
15308: CALL_OW 256
15312: PUSH
15313: LD_INT 1000
15315: EQUAL
15316: PUSH
15317: LD_VAR 0 1
15321: PPUSH
15322: CALL_OW 110
15326: PUSH
15327: LD_INT 1
15329: EQUAL
15330: AND
15331: IFFALSE 15345
// SetTag ( i , 0 ) ;
15333: LD_VAR 0 1
15337: PPUSH
15338: LD_INT 0
15340: PPUSH
15341: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15345: LD_VAR 0 1
15349: PPUSH
15350: CALL_OW 256
15354: PUSH
15355: LD_INT 500
15357: LESSEQUAL
15358: PUSH
15359: LD_VAR 0 1
15363: PPUSH
15364: CALL_OW 110
15368: PUSH
15369: LD_INT 0
15371: EQUAL
15372: AND
15373: IFFALSE 15402
// begin SetTag ( i , 1 ) ;
15375: LD_VAR 0 1
15379: PPUSH
15380: LD_INT 1
15382: PPUSH
15383: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
15387: LD_VAR 0 1
15391: PPUSH
15392: LD_INT 92
15394: PPUSH
15395: LD_INT 155
15397: PPUSH
15398: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
15402: LD_VAR 0 3
15406: PUSH
15407: LD_VAR 0 1
15411: PPUSH
15412: CALL_OW 256
15416: PUSH
15417: LD_INT 500
15419: GREATER
15420: AND
15421: PUSH
15422: LD_VAR 0 1
15426: PPUSH
15427: CALL_OW 110
15431: PUSH
15432: LD_INT 0
15434: EQUAL
15435: AND
15436: PUSH
15437: LD_VAR 0 1
15441: PPUSH
15442: CALL_OW 314
15446: NOT
15447: AND
15448: IFFALSE 15522
// begin if b then
15450: LD_VAR 0 3
15454: IFFALSE 15486
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
15456: LD_VAR 0 1
15460: PPUSH
15461: LD_VAR 0 3
15465: PUSH
15466: LD_INT 1
15468: PPUSH
15469: LD_VAR 0 3
15473: PPUSH
15474: CALL_OW 12
15478: ARRAY
15479: PPUSH
15480: CALL_OW 130
15484: GO 15522
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
15486: LD_VAR 0 1
15490: PPUSH
15491: LD_INT 94
15493: PPUSH
15494: LD_INT 165
15496: PPUSH
15497: CALL_OW 297
15501: PUSH
15502: LD_INT 8
15504: GREATER
15505: IFFALSE 15522
// ComMoveXY ( i , 94 , 165 ) ;
15507: LD_VAR 0 1
15511: PPUSH
15512: LD_INT 94
15514: PPUSH
15515: LD_INT 165
15517: PPUSH
15518: CALL_OW 111
// end ; end else
15522: GO 15789
// if GetWeapon ( i ) = ru_crane then
15524: LD_VAR 0 1
15528: PPUSH
15529: CALL_OW 264
15533: PUSH
15534: LD_INT 52
15536: EQUAL
15537: IFFALSE 15789
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
15539: LD_VAR 0 1
15543: PPUSH
15544: CALL_OW 256
15548: PUSH
15549: LD_INT 1000
15551: EQUAL
15552: PUSH
15553: LD_VAR 0 1
15557: PPUSH
15558: CALL_OW 110
15562: PUSH
15563: LD_INT 1
15565: EQUAL
15566: AND
15567: IFFALSE 15593
// begin SetTag ( i , 0 ) ;
15569: LD_VAR 0 1
15573: PPUSH
15574: LD_INT 0
15576: PPUSH
15577: CALL_OW 109
// SetFuel ( i , 100 ) ;
15581: LD_VAR 0 1
15585: PPUSH
15586: LD_INT 100
15588: PPUSH
15589: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15593: LD_VAR 0 1
15597: PPUSH
15598: CALL_OW 256
15602: PUSH
15603: LD_INT 500
15605: LESSEQUAL
15606: PUSH
15607: LD_VAR 0 1
15611: PPUSH
15612: CALL_OW 110
15616: PUSH
15617: LD_INT 0
15619: EQUAL
15620: AND
15621: IFFALSE 15664
// begin SetTag ( i , 1 ) ;
15623: LD_VAR 0 1
15627: PPUSH
15628: LD_INT 1
15630: PPUSH
15631: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
15635: LD_VAR 0 1
15639: PPUSH
15640: LD_INT 83
15642: PPUSH
15643: LD_INT 135
15645: PPUSH
15646: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
15650: LD_VAR 0 1
15654: PPUSH
15655: CALL_OW 310
15659: PPUSH
15660: CALL 67095 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
15664: LD_VAR 0 1
15668: PPUSH
15669: CALL_OW 256
15673: PUSH
15674: LD_INT 500
15676: GREATER
15677: PUSH
15678: LD_VAR 0 1
15682: PPUSH
15683: CALL_OW 110
15687: PUSH
15688: LD_INT 0
15690: EQUAL
15691: AND
15692: PUSH
15693: LD_VAR 0 1
15697: PPUSH
15698: CALL_OW 311
15702: AND
15703: PUSH
15704: LD_VAR 0 1
15708: PPUSH
15709: CALL_OW 314
15713: NOT
15714: AND
15715: IFFALSE 15789
// begin if b then
15717: LD_VAR 0 3
15721: IFFALSE 15753
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
15723: LD_VAR 0 1
15727: PPUSH
15728: LD_VAR 0 3
15732: PUSH
15733: LD_INT 1
15735: PPUSH
15736: LD_VAR 0 3
15740: PPUSH
15741: CALL_OW 12
15745: ARRAY
15746: PPUSH
15747: CALL_OW 130
15751: GO 15789
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
15753: LD_VAR 0 1
15757: PPUSH
15758: LD_INT 94
15760: PPUSH
15761: LD_INT 165
15763: PPUSH
15764: CALL_OW 297
15768: PUSH
15769: LD_INT 8
15771: GREATER
15772: IFFALSE 15789
// ComMoveXY ( i , 94 , 165 ) ;
15774: LD_VAR 0 1
15778: PPUSH
15779: LD_INT 94
15781: PPUSH
15782: LD_INT 165
15784: PPUSH
15785: CALL_OW 111
// end ; end ; end ;
15789: GO 15285
15791: POP
15792: POP
// end ;
15793: PPOPN 6
15795: END
// every 8 8$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp ;
15796: LD_EXP 23
15800: NOT
15801: PUSH
15802: LD_EXP 27
15806: NOT
15807: AND
15808: IFFALSE 16725
15810: GO 15812
15812: DISABLE
15813: LD_INT 0
15815: PPUSH
15816: PPUSH
15817: PPUSH
15818: PPUSH
// begin enable ;
15819: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
15820: LD_INT 35
15822: PUSH
15823: LD_INT 45
15825: PUSH
15826: LD_INT 55
15828: PUSH
15829: LD_INT 60
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: PUSH
15838: LD_OWVAR 67
15842: ARRAY
15843: PPUSH
15844: CALL_OW 13
15848: IFFALSE 15864
// waveStrength := waveStrength + 1 ;
15850: LD_ADDR_EXP 61
15854: PUSH
15855: LD_EXP 61
15859: PUSH
15860: LD_INT 1
15862: PLUS
15863: ST_TO_ADDR
// if waveStrength > [ 4 , 5 , 6 , 7 ] [ Difficulty ] then
15864: LD_EXP 61
15868: PUSH
15869: LD_INT 4
15871: PUSH
15872: LD_INT 5
15874: PUSH
15875: LD_INT 6
15877: PUSH
15878: LD_INT 7
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: PUSH
15887: LD_OWVAR 67
15891: ARRAY
15892: GREATER
15893: IFFALSE 15926
// begin waveStrength := waveStrength + Difficulty ;
15895: LD_ADDR_EXP 61
15899: PUSH
15900: LD_EXP 61
15904: PUSH
15905: LD_OWVAR 67
15909: PLUS
15910: ST_TO_ADDR
// disableAttackOnHeike := true ;
15911: LD_ADDR_EXP 27
15915: PUSH
15916: LD_INT 1
15918: ST_TO_ADDR
// wait ( 3 3$00 ) ;
15919: LD_INT 6300
15921: PPUSH
15922: CALL_OW 67
// end ; if disableAttackOnHeike and Difficulty > 1 then
15926: LD_EXP 27
15930: PUSH
15931: LD_OWVAR 67
15935: PUSH
15936: LD_INT 1
15938: GREATER
15939: AND
15940: IFFALSE 16149
// begin for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
15942: LD_ADDR_VAR 0 1
15946: PUSH
15947: DOUBLE
15948: LD_INT 1
15950: DEC
15951: ST_TO_ADDR
15952: LD_INT 3
15954: PUSH
15955: LD_INT 3
15957: PUSH
15958: LD_INT 4
15960: PUSH
15961: LD_INT 4
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: PUSH
15970: LD_OWVAR 67
15974: ARRAY
15975: PUSH
15976: FOR_TO
15977: IFFALSE 16147
// begin InitHc ;
15979: CALL_OW 19
// InitVc ;
15983: CALL_OW 20
// uc_side := 3 ;
15987: LD_ADDR_OWVAR 20
15991: PUSH
15992: LD_INT 3
15994: ST_TO_ADDR
// uc_nation := 3 ;
15995: LD_ADDR_OWVAR 21
15999: PUSH
16000: LD_INT 3
16002: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
16003: LD_INT 0
16005: PPUSH
16006: LD_INT 1
16008: PPUSH
16009: LD_OWVAR 67
16013: PUSH
16014: LD_INT 2
16016: PLUS
16017: PPUSH
16018: CALL_OW 380
// un := CreateHuman ;
16022: LD_ADDR_VAR 0 2
16026: PUSH
16027: CALL_OW 44
16031: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
16032: LD_VAR 0 2
16036: PPUSH
16037: LD_INT 160
16039: PPUSH
16040: LD_INT 3
16042: PPUSH
16043: LD_INT 2
16045: PPUSH
16046: LD_INT 0
16048: PPUSH
16049: CALL 67415 0 5
// SetClass ( un , class_bazooker ) ;
16053: LD_VAR 0 2
16057: PPUSH
16058: LD_INT 9
16060: PPUSH
16061: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
16065: LD_ADDR_EXP 60
16069: PUSH
16070: LD_EXP 60
16074: PPUSH
16075: LD_EXP 60
16079: PUSH
16080: LD_INT 1
16082: PLUS
16083: PPUSH
16084: LD_VAR 0 2
16088: PPUSH
16089: CALL_OW 1
16093: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
16094: LD_VAR 0 2
16098: PPUSH
16099: LD_INT 177
16101: PPUSH
16102: LD_INT 17
16104: PPUSH
16105: CALL_OW 111
// wait ( 0 0$2 ) ;
16109: LD_INT 70
16111: PPUSH
16112: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
16116: LD_ADDR_VAR 0 4
16120: PUSH
16121: LD_VAR 0 4
16125: PPUSH
16126: LD_VAR 0 4
16130: PUSH
16131: LD_INT 1
16133: PLUS
16134: PPUSH
16135: LD_VAR 0 2
16139: PPUSH
16140: CALL_OW 1
16144: ST_TO_ADDR
// end ;
16145: GO 15976
16147: POP
16148: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] + waveStrength do
16149: LD_ADDR_VAR 0 1
16153: PUSH
16154: DOUBLE
16155: LD_INT 1
16157: DEC
16158: ST_TO_ADDR
16159: LD_INT 2
16161: PUSH
16162: LD_INT 3
16164: PUSH
16165: LD_INT 4
16167: PUSH
16168: LD_INT 5
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: PUSH
16177: LD_OWVAR 67
16181: ARRAY
16182: PUSH
16183: LD_EXP 61
16187: PLUS
16188: PUSH
16189: FOR_TO
16190: IFFALSE 16499
// begin InitHc ;
16192: CALL_OW 19
// InitVc ;
16196: CALL_OW 20
// uc_side := 3 ;
16200: LD_ADDR_OWVAR 20
16204: PUSH
16205: LD_INT 3
16207: ST_TO_ADDR
// uc_nation := 3 ;
16208: LD_ADDR_OWVAR 21
16212: PUSH
16213: LD_INT 3
16215: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
16216: LD_INT 22
16218: PUSH
16219: LD_INT 23
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 1
16228: PPUSH
16229: LD_INT 2
16231: PPUSH
16232: CALL_OW 12
16236: ARRAY
16237: PPUSH
16238: LD_INT 1
16240: PPUSH
16241: LD_INT 1
16243: PPUSH
16244: LD_INT 44
16246: PUSH
16247: LD_INT 45
16249: PUSH
16250: LD_INT 43
16252: PUSH
16253: LD_INT 42
16255: PUSH
16256: LD_INT 44
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 1
16268: PPUSH
16269: LD_INT 5
16271: PPUSH
16272: CALL_OW 12
16276: ARRAY
16277: PPUSH
16278: LD_INT 99
16280: PPUSH
16281: CALL 32841 0 5
// veh := CreateVehicle ;
16285: LD_ADDR_VAR 0 3
16289: PUSH
16290: CALL_OW 45
16294: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
16295: LD_VAR 0 3
16299: PPUSH
16300: LD_INT 160
16302: PPUSH
16303: LD_INT 3
16305: PPUSH
16306: LD_INT 2
16308: PPUSH
16309: LD_INT 0
16311: PPUSH
16312: CALL 67415 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
16316: LD_ADDR_EXP 60
16320: PUSH
16321: LD_EXP 60
16325: PPUSH
16326: LD_EXP 60
16330: PUSH
16331: LD_INT 1
16333: PLUS
16334: PPUSH
16335: LD_VAR 0 3
16339: PPUSH
16340: CALL_OW 1
16344: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
16345: LD_INT 0
16347: PPUSH
16348: LD_INT 3
16350: PPUSH
16351: LD_OWVAR 67
16355: PUSH
16356: LD_INT 2
16358: PLUS
16359: PPUSH
16360: CALL_OW 380
// un := CreateHuman ;
16364: LD_ADDR_VAR 0 2
16368: PUSH
16369: CALL_OW 44
16373: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16374: LD_VAR 0 2
16378: PPUSH
16379: LD_VAR 0 3
16383: PPUSH
16384: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
16388: LD_ADDR_EXP 60
16392: PUSH
16393: LD_EXP 60
16397: PPUSH
16398: LD_EXP 60
16402: PUSH
16403: LD_INT 1
16405: PLUS
16406: PPUSH
16407: LD_VAR 0 2
16411: PPUSH
16412: CALL_OW 1
16416: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
16417: LD_VAR 0 2
16421: PPUSH
16422: LD_INT 177
16424: PPUSH
16425: LD_INT 17
16427: PPUSH
16428: CALL_OW 111
// wait ( 0 0$2 ) ;
16432: LD_INT 70
16434: PPUSH
16435: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
16439: LD_ADDR_VAR 0 4
16443: PUSH
16444: LD_VAR 0 4
16448: PPUSH
16449: LD_VAR 0 4
16453: PUSH
16454: LD_INT 1
16456: PLUS
16457: PPUSH
16458: LD_VAR 0 3
16462: PPUSH
16463: CALL_OW 1
16467: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
16468: LD_ADDR_VAR 0 4
16472: PUSH
16473: LD_VAR 0 4
16477: PPUSH
16478: LD_VAR 0 4
16482: PUSH
16483: LD_INT 1
16485: PLUS
16486: PPUSH
16487: LD_VAR 0 2
16491: PPUSH
16492: CALL_OW 1
16496: ST_TO_ADDR
// end ;
16497: GO 16189
16499: POP
16500: POP
// for i in tmp do
16501: LD_ADDR_VAR 0 1
16505: PUSH
16506: LD_VAR 0 4
16510: PUSH
16511: FOR_IN
16512: IFFALSE 16615
// begin if Prob ( 50 ) then
16514: LD_INT 50
16516: PPUSH
16517: CALL_OW 13
16521: IFFALSE 16558
// AgressiveMove ( i , [ [ 192 , 34 ] , [ 198 , 56 ] ] ) else
16523: LD_VAR 0 1
16527: PPUSH
16528: LD_INT 192
16530: PUSH
16531: LD_INT 34
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 198
16540: PUSH
16541: LD_INT 56
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PPUSH
16552: CALL 67879 0 2
16556: GO 16613
// AgressiveMove ( i , [ [ 206 , 37 ] , [ 239 , 53 ] , [ 257 , 105 ] , [ 227 , 97 ] ] ) ;
16558: LD_VAR 0 1
16562: PPUSH
16563: LD_INT 206
16565: PUSH
16566: LD_INT 37
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 239
16575: PUSH
16576: LD_INT 53
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 257
16585: PUSH
16586: LD_INT 105
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 227
16595: PUSH
16596: LD_INT 97
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: PPUSH
16609: CALL 67879 0 2
// end ;
16613: GO 16511
16615: POP
16616: POP
// repeat wait ( 0 0$1 ) ;
16617: LD_INT 35
16619: PPUSH
16620: CALL_OW 67
// for i in tmp do
16624: LD_ADDR_VAR 0 1
16628: PUSH
16629: LD_VAR 0 4
16633: PUSH
16634: FOR_IN
16635: IFFALSE 16702
// if IsDead ( i ) then
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL_OW 301
16646: IFFALSE 16666
// tmp := tmp diff i else
16648: LD_ADDR_VAR 0 4
16652: PUSH
16653: LD_VAR 0 4
16657: PUSH
16658: LD_VAR 0 1
16662: DIFF
16663: ST_TO_ADDR
16664: GO 16700
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
16666: LD_VAR 0 1
16670: PPUSH
16671: LD_INT 81
16673: PUSH
16674: LD_INT 3
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PPUSH
16681: CALL_OW 69
16685: PPUSH
16686: LD_VAR 0 1
16690: PPUSH
16691: CALL_OW 74
16695: PPUSH
16696: CALL_OW 115
16700: GO 16634
16702: POP
16703: POP
// until not tmp ;
16704: LD_VAR 0 4
16708: NOT
16709: IFFALSE 16617
// if firstAttack then
16711: LD_EXP 28
16715: IFFALSE 16725
// firstAttack := false ;
16717: LD_ADDR_EXP 28
16721: PUSH
16722: LD_INT 0
16724: ST_TO_ADDR
// end ;
16725: PPOPN 4
16727: END
// every 8 8$00 trigger not omarAttack and bergkampfArrived and not rolfHasVehicles do var i , un , veh , tmp ;
16728: LD_EXP 23
16732: NOT
16733: PUSH
16734: LD_EXP 3
16738: AND
16739: PUSH
16740: LD_EXP 16
16744: NOT
16745: AND
16746: IFFALSE 17581
16748: GO 16750
16750: DISABLE
16751: LD_INT 0
16753: PPUSH
16754: PPUSH
16755: PPUSH
16756: PPUSH
// begin enable ;
16757: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
16758: LD_ADDR_VAR 0 1
16762: PUSH
16763: DOUBLE
16764: LD_INT 1
16766: DEC
16767: ST_TO_ADDR
16768: LD_INT 1
16770: PUSH
16771: LD_INT 2
16773: PUSH
16774: LD_INT 2
16776: PUSH
16777: LD_INT 3
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: PUSH
16786: LD_OWVAR 67
16790: ARRAY
16791: PUSH
16792: FOR_TO
16793: IFFALSE 17094
// begin InitHc ;
16795: CALL_OW 19
// InitVc ;
16799: CALL_OW 20
// uc_side := 3 ;
16803: LD_ADDR_OWVAR 20
16807: PUSH
16808: LD_INT 3
16810: ST_TO_ADDR
// uc_nation := 3 ;
16811: LD_ADDR_OWVAR 21
16815: PUSH
16816: LD_INT 3
16818: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
16819: LD_INT 22
16821: PUSH
16822: LD_INT 23
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 1
16831: PPUSH
16832: LD_INT 2
16834: PPUSH
16835: CALL_OW 12
16839: ARRAY
16840: PPUSH
16841: LD_INT 1
16843: PPUSH
16844: LD_INT 1
16846: PPUSH
16847: LD_INT 44
16849: PUSH
16850: LD_INT 43
16852: PUSH
16853: LD_INT 42
16855: PUSH
16856: LD_INT 44
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: PUSH
16865: LD_INT 1
16867: PPUSH
16868: LD_INT 4
16870: PPUSH
16871: CALL_OW 12
16875: ARRAY
16876: PPUSH
16877: LD_INT 99
16879: PPUSH
16880: CALL 32841 0 5
// veh := CreateVehicle ;
16884: LD_ADDR_VAR 0 3
16888: PUSH
16889: CALL_OW 45
16893: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
16894: LD_VAR 0 3
16898: PPUSH
16899: LD_INT 5
16901: PPUSH
16902: LD_INT 3
16904: PPUSH
16905: LD_INT 2
16907: PPUSH
16908: LD_INT 0
16910: PPUSH
16911: CALL 67415 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
16915: LD_ADDR_EXP 60
16919: PUSH
16920: LD_EXP 60
16924: PPUSH
16925: LD_EXP 60
16929: PUSH
16930: LD_INT 1
16932: PLUS
16933: PPUSH
16934: LD_VAR 0 3
16938: PPUSH
16939: CALL_OW 1
16943: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
16944: LD_INT 0
16946: PPUSH
16947: LD_INT 3
16949: PPUSH
16950: LD_OWVAR 67
16954: PPUSH
16955: CALL_OW 380
// un := CreateHuman ;
16959: LD_ADDR_VAR 0 2
16963: PUSH
16964: CALL_OW 44
16968: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16969: LD_VAR 0 2
16973: PPUSH
16974: LD_VAR 0 3
16978: PPUSH
16979: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
16983: LD_ADDR_EXP 60
16987: PUSH
16988: LD_EXP 60
16992: PPUSH
16993: LD_EXP 60
16997: PUSH
16998: LD_INT 1
17000: PLUS
17001: PPUSH
17002: LD_VAR 0 2
17006: PPUSH
17007: CALL_OW 1
17011: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
17012: LD_VAR 0 2
17016: PPUSH
17017: LD_INT 23
17019: PPUSH
17020: LD_INT 7
17022: PPUSH
17023: CALL_OW 111
// wait ( 0 0$2 ) ;
17027: LD_INT 70
17029: PPUSH
17030: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17034: LD_ADDR_VAR 0 4
17038: PUSH
17039: LD_VAR 0 4
17043: PPUSH
17044: LD_VAR 0 4
17048: PUSH
17049: LD_INT 1
17051: PLUS
17052: PPUSH
17053: LD_VAR 0 3
17057: PPUSH
17058: CALL_OW 1
17062: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17063: LD_ADDR_VAR 0 4
17067: PUSH
17068: LD_VAR 0 4
17072: PPUSH
17073: LD_VAR 0 4
17077: PUSH
17078: LD_INT 1
17080: PLUS
17081: PPUSH
17082: LD_VAR 0 2
17086: PPUSH
17087: CALL_OW 1
17091: ST_TO_ADDR
// end ;
17092: GO 16792
17094: POP
17095: POP
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + waveStrength do
17096: LD_ADDR_VAR 0 1
17100: PUSH
17101: DOUBLE
17102: LD_INT 1
17104: DEC
17105: ST_TO_ADDR
17106: LD_INT 3
17108: PUSH
17109: LD_INT 4
17111: PUSH
17112: LD_INT 4
17114: PUSH
17115: LD_INT 5
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: PUSH
17124: LD_OWVAR 67
17128: ARRAY
17129: PUSH
17130: LD_EXP 61
17134: PLUS
17135: PUSH
17136: FOR_TO
17137: IFFALSE 17446
// begin InitHc ;
17139: CALL_OW 19
// InitVc ;
17143: CALL_OW 20
// uc_side := 3 ;
17147: LD_ADDR_OWVAR 20
17151: PUSH
17152: LD_INT 3
17154: ST_TO_ADDR
// uc_nation := 3 ;
17155: LD_ADDR_OWVAR 21
17159: PUSH
17160: LD_INT 3
17162: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
17163: LD_INT 22
17165: PUSH
17166: LD_INT 23
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: LD_INT 1
17175: PPUSH
17176: LD_INT 2
17178: PPUSH
17179: CALL_OW 12
17183: ARRAY
17184: PPUSH
17185: LD_INT 1
17187: PPUSH
17188: LD_INT 1
17190: PPUSH
17191: LD_INT 44
17193: PUSH
17194: LD_INT 45
17196: PUSH
17197: LD_INT 43
17199: PUSH
17200: LD_INT 42
17202: PUSH
17203: LD_INT 44
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 1
17215: PPUSH
17216: LD_INT 5
17218: PPUSH
17219: CALL_OW 12
17223: ARRAY
17224: PPUSH
17225: LD_INT 99
17227: PPUSH
17228: CALL 32841 0 5
// veh := CreateVehicle ;
17232: LD_ADDR_VAR 0 3
17236: PUSH
17237: CALL_OW 45
17241: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
17242: LD_VAR 0 3
17246: PPUSH
17247: LD_INT 127
17249: PPUSH
17250: LD_INT 243
17252: PPUSH
17253: LD_INT 0
17255: PPUSH
17256: LD_INT 0
17258: PPUSH
17259: CALL 67415 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17263: LD_ADDR_EXP 60
17267: PUSH
17268: LD_EXP 60
17272: PPUSH
17273: LD_EXP 60
17277: PUSH
17278: LD_INT 1
17280: PLUS
17281: PPUSH
17282: LD_VAR 0 3
17286: PPUSH
17287: CALL_OW 1
17291: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
17292: LD_INT 0
17294: PPUSH
17295: LD_INT 3
17297: PPUSH
17298: LD_OWVAR 67
17302: PUSH
17303: LD_INT 2
17305: PLUS
17306: PPUSH
17307: CALL_OW 380
// un := CreateHuman ;
17311: LD_ADDR_VAR 0 2
17315: PUSH
17316: CALL_OW 44
17320: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17321: LD_VAR 0 2
17325: PPUSH
17326: LD_VAR 0 3
17330: PPUSH
17331: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17335: LD_ADDR_EXP 60
17339: PUSH
17340: LD_EXP 60
17344: PPUSH
17345: LD_EXP 60
17349: PUSH
17350: LD_INT 1
17352: PLUS
17353: PPUSH
17354: LD_VAR 0 2
17358: PPUSH
17359: CALL_OW 1
17363: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
17364: LD_VAR 0 2
17368: PPUSH
17369: LD_INT 130
17371: PPUSH
17372: LD_INT 233
17374: PPUSH
17375: CALL_OW 111
// wait ( 0 0$2 ) ;
17379: LD_INT 70
17381: PPUSH
17382: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17386: LD_ADDR_VAR 0 4
17390: PUSH
17391: LD_VAR 0 4
17395: PPUSH
17396: LD_VAR 0 4
17400: PUSH
17401: LD_INT 1
17403: PLUS
17404: PPUSH
17405: LD_VAR 0 3
17409: PPUSH
17410: CALL_OW 1
17414: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17415: LD_ADDR_VAR 0 4
17419: PUSH
17420: LD_VAR 0 4
17424: PPUSH
17425: LD_VAR 0 4
17429: PUSH
17430: LD_INT 1
17432: PLUS
17433: PPUSH
17434: LD_VAR 0 2
17438: PPUSH
17439: CALL_OW 1
17443: ST_TO_ADDR
// end ;
17444: GO 17136
17446: POP
17447: POP
// for i in tmp do
17448: LD_ADDR_VAR 0 1
17452: PUSH
17453: LD_VAR 0 4
17457: PUSH
17458: FOR_IN
17459: IFFALSE 17485
// AgressiveMove ( i , [ [ 76 , 49 ] ] ) ;
17461: LD_VAR 0 1
17465: PPUSH
17466: LD_INT 76
17468: PUSH
17469: LD_INT 49
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: EMPTY
17477: LIST
17478: PPUSH
17479: CALL 67879 0 2
17483: GO 17458
17485: POP
17486: POP
// repeat wait ( 0 0$1 ) ;
17487: LD_INT 35
17489: PPUSH
17490: CALL_OW 67
// for i in tmp do
17494: LD_ADDR_VAR 0 1
17498: PUSH
17499: LD_VAR 0 4
17503: PUSH
17504: FOR_IN
17505: IFFALSE 17572
// if IsDead ( i ) then
17507: LD_VAR 0 1
17511: PPUSH
17512: CALL_OW 301
17516: IFFALSE 17536
// tmp := tmp diff i else
17518: LD_ADDR_VAR 0 4
17522: PUSH
17523: LD_VAR 0 4
17527: PUSH
17528: LD_VAR 0 1
17532: DIFF
17533: ST_TO_ADDR
17534: GO 17570
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
17536: LD_VAR 0 1
17540: PPUSH
17541: LD_INT 81
17543: PUSH
17544: LD_INT 3
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PPUSH
17551: CALL_OW 69
17555: PPUSH
17556: LD_VAR 0 1
17560: PPUSH
17561: CALL_OW 74
17565: PPUSH
17566: CALL_OW 115
17570: GO 17504
17572: POP
17573: POP
// until not tmp ;
17574: LD_VAR 0 4
17578: NOT
17579: IFFALSE 17487
// end ;
17581: PPOPN 4
17583: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
17584: LD_EXP 6
17588: IFFALSE 18047
17590: GO 17592
17592: DISABLE
17593: LD_INT 0
17595: PPUSH
17596: PPUSH
17597: PPUSH
17598: PPUSH
// begin wait ( 3 3$00 ) ;
17599: LD_INT 6300
17601: PPUSH
17602: CALL_OW 67
// for i := 1 to 3 do
17606: LD_ADDR_VAR 0 1
17610: PUSH
17611: DOUBLE
17612: LD_INT 1
17614: DEC
17615: ST_TO_ADDR
17616: LD_INT 3
17618: PUSH
17619: FOR_TO
17620: IFFALSE 17919
// begin InitHc ;
17622: CALL_OW 19
// InitVc ;
17626: CALL_OW 20
// uc_side := 3 ;
17630: LD_ADDR_OWVAR 20
17634: PUSH
17635: LD_INT 3
17637: ST_TO_ADDR
// uc_nation := 3 ;
17638: LD_ADDR_OWVAR 21
17642: PUSH
17643: LD_INT 3
17645: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
17646: LD_INT 22
17648: PUSH
17649: LD_INT 23
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 1
17658: PPUSH
17659: LD_INT 2
17661: PPUSH
17662: CALL_OW 12
17666: ARRAY
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: LD_INT 1
17673: PPUSH
17674: LD_INT 44
17676: PUSH
17677: LD_INT 43
17679: PUSH
17680: LD_INT 42
17682: PUSH
17683: LD_INT 44
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 1
17694: PPUSH
17695: LD_INT 4
17697: PPUSH
17698: CALL_OW 12
17702: ARRAY
17703: PPUSH
17704: LD_INT 99
17706: PPUSH
17707: CALL 32841 0 5
// veh := CreateVehicle ;
17711: LD_ADDR_VAR 0 3
17715: PUSH
17716: CALL_OW 45
17720: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
17721: LD_VAR 0 3
17725: PPUSH
17726: LD_INT 293
17728: PPUSH
17729: LD_INT 246
17731: PPUSH
17732: LD_INT 5
17734: PPUSH
17735: LD_INT 0
17737: PPUSH
17738: CALL 67415 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17742: LD_ADDR_EXP 60
17746: PUSH
17747: LD_EXP 60
17751: PPUSH
17752: LD_EXP 60
17756: PUSH
17757: LD_INT 1
17759: PLUS
17760: PPUSH
17761: LD_VAR 0 3
17765: PPUSH
17766: CALL_OW 1
17770: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
17771: LD_INT 0
17773: PPUSH
17774: LD_INT 3
17776: PPUSH
17777: LD_INT 3
17779: PPUSH
17780: CALL_OW 380
// un := CreateHuman ;
17784: LD_ADDR_VAR 0 2
17788: PUSH
17789: CALL_OW 44
17793: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17794: LD_VAR 0 2
17798: PPUSH
17799: LD_VAR 0 3
17803: PPUSH
17804: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17808: LD_ADDR_EXP 60
17812: PUSH
17813: LD_EXP 60
17817: PPUSH
17818: LD_EXP 60
17822: PUSH
17823: LD_INT 1
17825: PLUS
17826: PPUSH
17827: LD_VAR 0 2
17831: PPUSH
17832: CALL_OW 1
17836: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
17837: LD_VAR 0 2
17841: PPUSH
17842: LD_INT 273
17844: PPUSH
17845: LD_INT 227
17847: PPUSH
17848: CALL_OW 111
// wait ( 0 0$2 ) ;
17852: LD_INT 70
17854: PPUSH
17855: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17859: LD_ADDR_VAR 0 4
17863: PUSH
17864: LD_VAR 0 4
17868: PPUSH
17869: LD_VAR 0 4
17873: PUSH
17874: LD_INT 1
17876: PLUS
17877: PPUSH
17878: LD_VAR 0 3
17882: PPUSH
17883: CALL_OW 1
17887: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17888: LD_ADDR_VAR 0 4
17892: PUSH
17893: LD_VAR 0 4
17897: PPUSH
17898: LD_VAR 0 4
17902: PUSH
17903: LD_INT 1
17905: PLUS
17906: PPUSH
17907: LD_VAR 0 2
17911: PPUSH
17912: CALL_OW 1
17916: ST_TO_ADDR
// end ;
17917: GO 17619
17919: POP
17920: POP
// for i in tmp do
17921: LD_ADDR_VAR 0 1
17925: PUSH
17926: LD_VAR 0 4
17930: PUSH
17931: FOR_IN
17932: IFFALSE 17951
// ComAgressiveMove ( i , 330 , 231 ) ;
17934: LD_VAR 0 1
17938: PPUSH
17939: LD_INT 330
17941: PPUSH
17942: LD_INT 231
17944: PPUSH
17945: CALL_OW 114
17949: GO 17931
17951: POP
17952: POP
// repeat wait ( 0 0$1 ) ;
17953: LD_INT 35
17955: PPUSH
17956: CALL_OW 67
// for i in tmp do
17960: LD_ADDR_VAR 0 1
17964: PUSH
17965: LD_VAR 0 4
17969: PUSH
17970: FOR_IN
17971: IFFALSE 18038
// if IsDead ( i ) then
17973: LD_VAR 0 1
17977: PPUSH
17978: CALL_OW 301
17982: IFFALSE 18002
// tmp := tmp diff i else
17984: LD_ADDR_VAR 0 4
17988: PUSH
17989: LD_VAR 0 4
17993: PUSH
17994: LD_VAR 0 1
17998: DIFF
17999: ST_TO_ADDR
18000: GO 18036
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18002: LD_VAR 0 1
18006: PPUSH
18007: LD_INT 81
18009: PUSH
18010: LD_INT 3
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PPUSH
18017: CALL_OW 69
18021: PPUSH
18022: LD_VAR 0 1
18026: PPUSH
18027: CALL_OW 74
18031: PPUSH
18032: CALL_OW 115
18036: GO 17970
18038: POP
18039: POP
// until not tmp ;
18040: LD_VAR 0 4
18044: NOT
18045: IFFALSE 17953
// end ;
18047: PPOPN 4
18049: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
18050: LD_INT 3
18052: PUSH
18053: LD_INT 22
18055: PUSH
18056: LD_INT 2
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: LD_INT 32
18069: PUSH
18070: LD_INT 1
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PPUSH
18081: CALL_OW 69
18085: IFFALSE 18169
18087: GO 18089
18089: DISABLE
18090: LD_INT 0
18092: PPUSH
// begin enable ;
18093: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
18094: LD_ADDR_VAR 0 1
18098: PUSH
18099: LD_INT 3
18101: PUSH
18102: LD_INT 22
18104: PUSH
18105: LD_INT 2
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 32
18118: PUSH
18119: LD_INT 1
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PPUSH
18130: CALL_OW 69
18134: PUSH
18135: FOR_IN
18136: IFFALSE 18167
// if GetFuel ( i ) < 3 then
18138: LD_VAR 0 1
18142: PPUSH
18143: CALL_OW 261
18147: PUSH
18148: LD_INT 3
18150: LESS
18151: IFFALSE 18165
// SetFuel ( i , 3 ) ;
18153: LD_VAR 0 1
18157: PPUSH
18158: LD_INT 3
18160: PPUSH
18161: CALL_OW 240
18165: GO 18135
18167: POP
18168: POP
// end ; end_of_file
18169: PPOPN 1
18171: END
// export function Action ; begin
18172: LD_INT 0
18174: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
18175: LD_INT 2
18177: PPUSH
18178: LD_INT 4
18180: PPUSH
18181: CALL_OW 332
// Video ( true ) ;
18185: LD_INT 1
18187: PPUSH
18188: CALL 65247 0 1
// music_nat := 3 ;
18192: LD_ADDR_OWVAR 71
18196: PUSH
18197: LD_INT 3
18199: ST_TO_ADDR
// music_class := music_recon ;
18200: LD_ADDR_OWVAR 72
18204: PUSH
18205: LD_INT 3
18207: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
18208: LD_INT 213
18210: PPUSH
18211: LD_INT 89
18213: PPUSH
18214: CALL_OW 86
// if Kaia and Olaf then
18218: LD_EXP 38
18222: PUSH
18223: LD_EXP 42
18227: AND
18228: IFFALSE 18234
// SceneKaiaWithOlaf ;
18230: CALL 18312 0 0
// if Givi and Kamil then
18234: LD_EXP 34
18238: PUSH
18239: LD_EXP 37
18243: AND
18244: IFFALSE 18250
// SceneWithGiviAndKamil ;
18246: CALL 18883 0 0
// tick := 0 ;
18250: LD_ADDR_OWVAR 1
18254: PUSH
18255: LD_INT 0
18257: ST_TO_ADDR
// wait ( 3 ) ;
18258: LD_INT 3
18260: PPUSH
18261: CALL_OW 67
// Video ( false ) ;
18265: LD_INT 0
18267: PPUSH
18268: CALL 65247 0 1
// ChangeMissionObjectives ( M1 ) ;
18272: LD_STRING M1
18274: PPUSH
18275: CALL_OW 337
// music_nat := music_auto ;
18279: LD_ADDR_OWVAR 71
18283: PUSH
18284: LD_INT 0
18286: ST_TO_ADDR
// music_class := music_auto ;
18287: LD_ADDR_OWVAR 72
18291: PUSH
18292: LD_INT 0
18294: ST_TO_ADDR
// SaveForQuickRestart ;
18295: CALL_OW 22
// gameActive := true ;
18299: LD_ADDR_EXP 31
18303: PUSH
18304: LD_INT 1
18306: ST_TO_ADDR
// end ;
18307: LD_VAR 0 1
18311: RET
// export function SceneKaiaWithOlaf ; begin
18312: LD_INT 0
18314: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
18315: LD_INT 22
18317: PUSH
18318: LD_INT 2
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 30
18327: PUSH
18328: LD_INT 3
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PPUSH
18339: CALL_OW 69
18343: PPUSH
18344: LD_INT 14
18346: PPUSH
18347: LD_INT 1
18349: PPUSH
18350: LD_INT 1
18352: PPUSH
18353: LD_INT 26
18355: PPUSH
18356: CALL_OW 125
// wait ( 0 0$1 ) ;
18360: LD_INT 35
18362: PPUSH
18363: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
18367: LD_EXP 38
18371: PPUSH
18372: LD_STRING DK-Mem-1
18374: PPUSH
18375: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
18379: LD_EXP 38
18383: PPUSH
18384: LD_STRING DK-Mem-2
18386: PPUSH
18387: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
18391: LD_EXP 42
18395: PPUSH
18396: LD_STRING DO-Mem-3
18398: PPUSH
18399: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
18403: LD_EXP 38
18407: PPUSH
18408: LD_STRING DK-Mem-4
18410: PPUSH
18411: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
18415: LD_EXP 42
18419: PPUSH
18420: LD_STRING DO-Mem-5
18422: PPUSH
18423: CALL_OW 88
// wait ( 0 0$2 ) ;
18427: LD_INT 70
18429: PPUSH
18430: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
18434: LD_INT 22
18436: PUSH
18437: LD_INT 2
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 30
18446: PUSH
18447: LD_INT 3
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PPUSH
18458: CALL_OW 69
18462: PPUSH
18463: LD_INT 90
18465: PPUSH
18466: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
18470: LD_EXP 42
18474: PPUSH
18475: LD_STRING DO-Mem-6
18477: PPUSH
18478: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
18482: LD_EXP 38
18486: PPUSH
18487: LD_STRING DK-Mem-7
18489: PPUSH
18490: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
18494: LD_EXP 33
18498: PPUSH
18499: LD_EXP 38
18503: PPUSH
18504: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
18508: LD_EXP 33
18512: PPUSH
18513: LD_STRING DH-Mem-8
18515: PPUSH
18516: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
18520: LD_EXP 38
18524: PUSH
18525: LD_EXP 42
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PPUSH
18534: LD_EXP 33
18538: PPUSH
18539: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
18543: LD_EXP 42
18547: PPUSH
18548: LD_STRING DO-Mem-9
18550: PPUSH
18551: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
18555: LD_EXP 42
18559: PPUSH
18560: LD_STRING DO-Mem-10
18562: PPUSH
18563: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
18567: LD_EXP 42
18571: PPUSH
18572: LD_STRING DO-Mem-11
18574: PPUSH
18575: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
18579: LD_EXP 42
18583: PPUSH
18584: LD_STRING DO-Mem-12
18586: PPUSH
18587: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
18591: LD_EXP 38
18595: PPUSH
18596: LD_STRING DK-Mem-13
18598: PPUSH
18599: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
18603: LD_EXP 38
18607: PPUSH
18608: LD_STRING DK-Mem-14
18610: PPUSH
18611: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
18615: LD_EXP 38
18619: PPUSH
18620: LD_STRING DK-Mem-15
18622: PPUSH
18623: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
18627: LD_EXP 38
18631: PPUSH
18632: LD_STRING DK-Mem-16
18634: PPUSH
18635: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
18639: LD_EXP 38
18643: PPUSH
18644: LD_STRING DK-Mem-17
18646: PPUSH
18647: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
18651: LD_EXP 42
18655: PPUSH
18656: LD_EXP 38
18660: PPUSH
18661: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
18665: LD_EXP 42
18669: PPUSH
18670: LD_STRING DO-Mem-18
18672: PPUSH
18673: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
18677: LD_EXP 38
18681: PPUSH
18682: LD_EXP 42
18686: PPUSH
18687: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
18691: LD_EXP 38
18695: PPUSH
18696: LD_STRING DK-Mem-19
18698: PPUSH
18699: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
18703: LD_EXP 42
18707: PPUSH
18708: LD_INT 214
18710: PPUSH
18711: LD_INT 86
18713: PPUSH
18714: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
18718: LD_EXP 42
18722: PPUSH
18723: LD_EXP 38
18727: PPUSH
18728: CALL_OW 179
// if Givi then
18732: LD_EXP 34
18736: IFFALSE 18767
// begin ComMoveXY ( Givi , 217 , 86 ) ;
18738: LD_EXP 34
18742: PPUSH
18743: LD_INT 217
18745: PPUSH
18746: LD_INT 86
18748: PPUSH
18749: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
18753: LD_EXP 34
18757: PPUSH
18758: LD_EXP 33
18762: PPUSH
18763: CALL_OW 179
// end ; if Kamil then
18767: LD_EXP 37
18771: IFFALSE 18811
// begin ComExit ( Kamil ) ;
18773: LD_EXP 37
18777: PPUSH
18778: CALL 65673 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
18782: LD_EXP 37
18786: PPUSH
18787: LD_INT 212
18789: PPUSH
18790: LD_INT 86
18792: PPUSH
18793: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
18797: LD_EXP 37
18801: PPUSH
18802: LD_EXP 33
18806: PPUSH
18807: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
18811: LD_INT 70
18813: PPUSH
18814: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
18818: LD_EXP 33
18822: PPUSH
18823: LD_STRING DH-Mem-20
18825: PPUSH
18826: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
18830: LD_EXP 42
18834: PPUSH
18835: LD_INT 215
18837: PPUSH
18838: LD_INT 87
18840: PPUSH
18841: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
18845: LD_EXP 42
18849: PPUSH
18850: LD_EXP 38
18854: PPUSH
18855: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
18859: LD_EXP 38
18863: PPUSH
18864: LD_STRING DK-Mem-21
18866: PPUSH
18867: CALL_OW 88
// wait ( 0 0$2 ) ;
18871: LD_INT 70
18873: PPUSH
18874: CALL_OW 67
// end ;
18878: LD_VAR 0 1
18882: RET
// export function SceneWithGiviAndKamil ; var p ; begin
18883: LD_INT 0
18885: PPUSH
18886: PPUSH
// if Markov then
18887: LD_EXP 40
18891: IFFALSE 19009
// begin p := 0 ;
18893: LD_ADDR_VAR 0 2
18897: PUSH
18898: LD_INT 0
18900: ST_TO_ADDR
// if IsInUnit ( Markov ) then
18901: LD_EXP 40
18905: PPUSH
18906: CALL_OW 310
18910: IFFALSE 18921
// ComExit ( Markov ) ;
18912: LD_EXP 40
18916: PPUSH
18917: CALL 65673 0 1
// wait ( 0 0$1 ) ;
18921: LD_INT 35
18923: PPUSH
18924: CALL_OW 67
// ComMoveXY ( Markov , 212 , 88 ) ;
18928: LD_EXP 40
18932: PPUSH
18933: LD_INT 212
18935: PPUSH
18936: LD_INT 88
18938: PPUSH
18939: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18943: LD_INT 35
18945: PPUSH
18946: CALL_OW 67
// p := Inc ( p ) ;
18950: LD_ADDR_VAR 0 2
18954: PUSH
18955: LD_VAR 0 2
18959: PPUSH
18960: CALL 66636 0 1
18964: ST_TO_ADDR
// until GetDistUnits ( Markov , Heike ) < 6 or p > 12 ;
18965: LD_EXP 40
18969: PPUSH
18970: LD_EXP 33
18974: PPUSH
18975: CALL_OW 296
18979: PUSH
18980: LD_INT 6
18982: LESS
18983: PUSH
18984: LD_VAR 0 2
18988: PUSH
18989: LD_INT 12
18991: GREATER
18992: OR
18993: IFFALSE 18943
// AddComTurnUnit ( Markov , Heike ) ;
18995: LD_EXP 40
18999: PPUSH
19000: LD_EXP 33
19004: PPUSH
19005: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
19009: LD_EXP 34
19013: PPUSH
19014: LD_STRING DG-Obj-1
19016: PPUSH
19017: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
19021: LD_EXP 37
19025: PPUSH
19026: LD_STRING DKam-Obj-2
19028: PPUSH
19029: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
19033: LD_EXP 33
19037: PPUSH
19038: LD_EXP 37
19042: PPUSH
19043: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
19047: LD_EXP 37
19051: PPUSH
19052: LD_STRING DKam-Obj-3
19054: PPUSH
19055: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
19059: LD_EXP 40
19063: PPUSH
19064: LD_STRING DMar-Obj-4
19066: PPUSH
19067: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
19071: LD_EXP 37
19075: PPUSH
19076: LD_STRING DKam-Obj-6
19078: PPUSH
19079: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
19083: LD_EXP 37
19087: PPUSH
19088: LD_STRING DKam-Obj-7
19090: PPUSH
19091: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
19095: LD_EXP 37
19099: PPUSH
19100: LD_STRING DKam-Obj-8
19102: PPUSH
19103: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
19107: LD_EXP 33
19111: PPUSH
19112: LD_STRING DH-Obj-9
19114: PPUSH
19115: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
19119: LD_EXP 37
19123: PPUSH
19124: LD_STRING DKam-Obj-10
19126: PPUSH
19127: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
19131: LD_EXP 37
19135: PPUSH
19136: LD_STRING DKam-Obj-11
19138: PPUSH
19139: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
19143: LD_EXP 40
19147: PPUSH
19148: LD_STRING DMar-Obj-12
19150: PPUSH
19151: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
19155: LD_EXP 40
19159: PPUSH
19160: LD_STRING DMar-Obj-13
19162: PPUSH
19163: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
19167: LD_EXP 40
19171: PPUSH
19172: LD_STRING DMar-Obj-14
19174: PPUSH
19175: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
19179: LD_EXP 42
19183: PPUSH
19184: LD_STRING DO-Obj-15
19186: PPUSH
19187: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
19191: LD_EXP 42
19195: PPUSH
19196: LD_STRING DO-Obj-16
19198: PPUSH
19199: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
19203: LD_EXP 33
19207: PPUSH
19208: LD_STRING DH-Obj-17
19210: PPUSH
19211: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
19215: LD_EXP 42
19219: PPUSH
19220: LD_STRING DO-Obj-18
19222: PPUSH
19223: CALL_OW 88
// end ;
19227: LD_VAR 0 1
19231: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
19232: LD_INT 34
19234: PUSH
19235: LD_INT 92
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PPUSH
19242: CALL_OW 69
19246: IFFALSE 19441
19248: GO 19250
19250: DISABLE
19251: LD_INT 0
19253: PPUSH
// begin wait ( 0 0$2 ) ;
19254: LD_INT 70
19256: PPUSH
19257: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
19261: LD_INT 34
19263: PUSH
19264: LD_INT 92
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PPUSH
19271: CALL_OW 69
19275: PPUSH
19276: CALL_OW 87
// DialogueOn ;
19280: CALL_OW 6
// if Markov then
19284: LD_EXP 40
19288: IFFALSE 19316
// begin Say ( Markov , DMar-Grn-1 ) ;
19290: LD_EXP 40
19294: PPUSH
19295: LD_STRING DMar-Grn-1
19297: PPUSH
19298: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
19302: LD_EXP 33
19306: PPUSH
19307: LD_STRING DH-Grn-2
19309: PPUSH
19310: CALL_OW 88
// end else
19314: GO 19415
// if heikeSecondSquad then
19316: LD_EXP 48
19320: IFFALSE 19415
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
19322: LD_ADDR_VAR 0 1
19326: PUSH
19327: LD_EXP 48
19331: PUSH
19332: LD_INT 1
19334: PPUSH
19335: LD_EXP 48
19339: PPUSH
19340: CALL_OW 12
19344: ARRAY
19345: ST_TO_ADDR
// case GetSex ( random ) of 1 :
19346: LD_VAR 0 1
19350: PPUSH
19351: CALL_OW 258
19355: PUSH
19356: LD_INT 1
19358: DOUBLE
19359: EQUAL
19360: IFTRUE 19364
19362: GO 19379
19364: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
19365: LD_VAR 0 1
19369: PPUSH
19370: LD_STRING DArm-Grn-1
19372: PPUSH
19373: CALL_OW 88
19377: GO 19403
19379: LD_INT 2
19381: DOUBLE
19382: EQUAL
19383: IFTRUE 19387
19385: GO 19402
19387: POP
// Say ( random , DArf-Grn-1 ) ; end ;
19388: LD_VAR 0 1
19392: PPUSH
19393: LD_STRING DArf-Grn-1
19395: PPUSH
19396: CALL_OW 88
19400: GO 19403
19402: POP
// Say ( Heike , DH-Grn-2 ) ;
19403: LD_EXP 33
19407: PPUSH
19408: LD_STRING DH-Grn-2
19410: PPUSH
19411: CALL_OW 88
// end ; DialogueOff ;
19415: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
19419: LD_STRING MortarConstructed
19421: PPUSH
19422: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
19426: LD_STRING SelfPropelledMortar
19428: PPUSH
19429: CALL_OW 339
// mortarConstructed := true ;
19433: LD_ADDR_EXP 15
19437: PUSH
19438: LD_INT 1
19440: ST_TO_ADDR
// end ;
19441: PPOPN 1
19443: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
19444: LD_INT 2
19446: PPUSH
19447: LD_INT 8
19449: PPUSH
19450: CALL_OW 294
19454: IFFALSE 19597
19456: GO 19458
19458: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
19459: LD_INT 200
19461: PPUSH
19462: LD_INT 162
19464: PPUSH
19465: LD_INT 2
19467: PPUSH
19468: LD_INT 6
19470: NEG
19471: PPUSH
19472: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
19476: LD_INT 200
19478: PPUSH
19479: LD_INT 162
19481: PPUSH
19482: LD_INT 2
19484: PPUSH
19485: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
19489: LD_INT 200
19491: PPUSH
19492: LD_INT 162
19494: PPUSH
19495: CALL_OW 84
// if not IsOk ( Kurt ) then
19499: LD_EXP 44
19503: PPUSH
19504: CALL_OW 302
19508: NOT
19509: IFFALSE 19513
// exit ;
19511: GO 19597
// Say ( Kurt , DKs-Otpst-2-1 ) ;
19513: LD_EXP 44
19517: PPUSH
19518: LD_STRING DKs-Otpst-2-1
19520: PPUSH
19521: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
19525: LD_EXP 38
19529: PPUSH
19530: LD_STRING DK-Otpst-2-2
19532: PPUSH
19533: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
19537: LD_EXP 44
19541: PPUSH
19542: LD_STRING DKs-Otpst-2-3
19544: PPUSH
19545: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
19549: LD_EXP 44
19553: PPUSH
19554: LD_STRING DKs-Otpst-2-4
19556: PPUSH
19557: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
19561: LD_EXP 44
19565: PPUSH
19566: LD_STRING DKs-Otpst-2-5
19568: PPUSH
19569: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
19573: LD_EXP 37
19577: PPUSH
19578: LD_STRING DKam-Otpst-2-6
19580: PPUSH
19581: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
19585: LD_EXP 44
19589: PPUSH
19590: LD_STRING DKs-Otpst-2-7
19592: PPUSH
19593: CALL_OW 88
// end ;
19597: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
19598: LD_INT 8
19600: PPUSH
19601: LD_INT 22
19603: PUSH
19604: LD_INT 3
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 21
19613: PUSH
19614: LD_INT 3
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PPUSH
19625: CALL_OW 70
19629: NOT
19630: PUSH
19631: LD_EXP 3
19635: NOT
19636: AND
19637: IFFALSE 19885
19639: GO 19641
19641: DISABLE
19642: LD_INT 0
19644: PPUSH
// begin outpostDestroyed := true ;
19645: LD_ADDR_EXP 4
19649: PUSH
19650: LD_INT 1
19652: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
19653: LD_INT 22
19655: PUSH
19656: LD_INT 2
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 34
19665: PUSH
19666: LD_INT 92
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 92
19675: PUSH
19676: LD_INT 195
19678: PUSH
19679: LD_INT 164
19681: PUSH
19682: LD_INT 12
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: LIST
19695: PPUSH
19696: CALL_OW 69
19700: NOT
19701: IFFALSE 19705
// exit ;
19703: GO 19885
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
19705: LD_EXP 34
19709: PPUSH
19710: CALL_OW 302
19714: NOT
19715: PUSH
19716: LD_EXP 38
19720: PPUSH
19721: CALL_OW 302
19725: NOT
19726: OR
19727: IFFALSE 19731
// exit ;
19729: GO 19885
// Say ( Givi , DG-Otpst-1-1 ) ;
19731: LD_EXP 34
19735: PPUSH
19736: LD_STRING DG-Otpst-1-1
19738: PPUSH
19739: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
19743: LD_EXP 38
19747: PPUSH
19748: LD_STRING DK-Otpst-1-2
19750: PPUSH
19751: CALL_OW 88
// if IsOk ( Markov ) then
19755: LD_EXP 40
19759: PPUSH
19760: CALL_OW 302
19764: IFFALSE 19792
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
19766: LD_EXP 40
19770: PPUSH
19771: LD_STRING DMar-Otpst-1-3
19773: PPUSH
19774: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
19778: LD_EXP 40
19782: PPUSH
19783: LD_STRING DMar-Otpst-1-4
19785: PPUSH
19786: CALL_OW 88
// end else
19790: GO 19873
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
19792: LD_ADDR_VAR 0 1
19796: PUSH
19797: LD_EXP 48
19801: PUSH
19802: LD_INT 1
19804: PPUSH
19805: LD_EXP 48
19809: PPUSH
19810: CALL_OW 12
19814: ARRAY
19815: ST_TO_ADDR
// case GetSex ( random ) of 1 :
19816: LD_VAR 0 1
19820: PPUSH
19821: CALL_OW 258
19825: PUSH
19826: LD_INT 1
19828: DOUBLE
19829: EQUAL
19830: IFTRUE 19834
19832: GO 19849
19834: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
19835: LD_VAR 0 1
19839: PPUSH
19840: LD_STRING DArm-Otpst-1-a-3
19842: PPUSH
19843: CALL_OW 88
19847: GO 19873
19849: LD_INT 2
19851: DOUBLE
19852: EQUAL
19853: IFTRUE 19857
19855: GO 19872
19857: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
19858: LD_VAR 0 1
19862: PPUSH
19863: LD_STRING DArf-Otpst-1-a-3
19865: PPUSH
19866: CALL_OW 88
19870: GO 19873
19872: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
19873: LD_EXP 34
19877: PPUSH
19878: LD_STRING DG-Otpst-1-5
19880: PPUSH
19881: CALL_OW 88
// end ;
19885: PPOPN 1
19887: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
19888: LD_EXP 38
19892: PPUSH
19893: CALL_OW 256
19897: PUSH
19898: LD_INT 10
19900: LESS
19901: IFFALSE 20015
19903: GO 19905
19905: DISABLE
// begin DialogueOn ;
19906: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
19910: LD_EXP 38
19914: PPUSH
19915: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
19919: LD_EXP 38
19923: PPUSH
19924: LD_STRING DK-Dead-1
19926: PPUSH
19927: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
19931: LD_EXP 33
19935: PPUSH
19936: LD_STRING DH-Dead-2
19938: PPUSH
19939: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
19943: LD_EXP 38
19947: PPUSH
19948: LD_STRING DK-Dead-3
19950: PPUSH
19951: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
19955: LD_EXP 33
19959: PPUSH
19960: LD_STRING DH-Dead-4
19962: PPUSH
19963: CALL_OW 88
// if IsOk ( Mike ) then
19967: LD_EXP 35
19971: PPUSH
19972: CALL_OW 302
19976: IFFALSE 20002
// begin Say ( Mike , DM-Dead-5 ) ;
19978: LD_EXP 35
19982: PPUSH
19983: LD_STRING DM-Dead-5
19985: PPUSH
19986: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
19990: LD_EXP 33
19994: PPUSH
19995: LD_STRING DH-Dead-6
19997: PPUSH
19998: CALL_OW 88
// end ; DialogueOff ;
20002: CALL_OW 7
// KillUnit ( Kaia ) ;
20006: LD_EXP 38
20010: PPUSH
20011: CALL_OW 66
// end ;
20015: END
// every 0 0$1 trigger tick >= 15 15$00 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
20016: LD_OWVAR 1
20020: PUSH
20021: LD_INT 31500
20023: GREATEREQUAL
20024: PUSH
20025: LD_EXP 5
20029: PUSH
20030: LD_INT 5
20032: GREATER
20033: OR
20034: PUSH
20035: LD_INT 22
20037: PUSH
20038: LD_INT 2
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 92
20047: PUSH
20048: LD_INT 103
20050: PUSH
20051: LD_INT 81
20053: PUSH
20054: LD_INT 20
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PPUSH
20067: CALL_OW 69
20071: OR
20072: IFFALSE 20479
20074: GO 20076
20076: DISABLE
20077: LD_INT 0
20079: PPUSH
20080: PPUSH
20081: PPUSH
// begin PrepareRolfSquad ;
20082: CALL 3318 0 0
// dep := HexInfo ( 86 , 54 ) ;
20086: LD_ADDR_VAR 0 3
20090: PUSH
20091: LD_INT 86
20093: PPUSH
20094: LD_INT 54
20096: PPUSH
20097: CALL_OW 428
20101: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
20102: LD_VAR 0 3
20106: PPUSH
20107: CALL_OW 274
20111: PPUSH
20112: LD_INT 1
20114: PPUSH
20115: LD_INT 300
20117: PPUSH
20118: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
20122: LD_VAR 0 3
20126: PPUSH
20127: CALL_OW 274
20131: PPUSH
20132: LD_INT 2
20134: PPUSH
20135: LD_INT 300
20137: PPUSH
20138: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
20142: LD_EXP 50
20146: PPUSH
20147: LD_INT 79
20149: PPUSH
20150: LD_INT 52
20152: PPUSH
20153: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
20157: LD_INT 35
20159: PPUSH
20160: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
20164: LD_INT 12
20166: PPUSH
20167: LD_INT 22
20169: PUSH
20170: LD_INT 3
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 21
20179: PUSH
20180: LD_INT 1
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PPUSH
20191: CALL_OW 70
20195: NOT
20196: IFFALSE 20157
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
20198: LD_ADDR_VAR 0 2
20202: PUSH
20203: LD_INT 12
20205: PPUSH
20206: LD_INT 21
20208: PUSH
20209: LD_INT 3
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PPUSH
20216: CALL_OW 70
20220: ST_TO_ADDR
// for i in tmp do
20221: LD_ADDR_VAR 0 1
20225: PUSH
20226: LD_VAR 0 2
20230: PUSH
20231: FOR_IN
20232: IFFALSE 20248
// SetSide ( i , 8 ) ;
20234: LD_VAR 0 1
20238: PPUSH
20239: LD_INT 8
20241: PPUSH
20242: CALL_OW 235
20246: GO 20231
20248: POP
20249: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
20250: LD_INT 63
20252: PPUSH
20253: LD_INT 42
20255: PPUSH
20256: CALL_OW 428
20260: PPUSH
20261: LD_INT 320
20263: PPUSH
20264: CALL_OW 234
// wait ( 0 0$10 ) ;
20268: LD_INT 350
20270: PPUSH
20271: CALL_OW 67
// DialogueOn ;
20275: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
20279: LD_INT 8
20281: PPUSH
20282: LD_INT 2
20284: PPUSH
20285: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
20289: LD_INT 86
20291: PPUSH
20292: LD_INT 54
20294: PPUSH
20295: CALL_OW 428
20299: PPUSH
20300: LD_STRING antwerp
20302: PPUSH
20303: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
20307: LD_EXP 46
20311: PPUSH
20312: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
20316: LD_EXP 46
20320: PPUSH
20321: LD_STRING DRf-rast-1
20323: PPUSH
20324: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
20328: LD_EXP 33
20332: PPUSH
20333: LD_STRING DH-rast-2
20335: PPUSH
20336: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
20340: LD_EXP 46
20344: PPUSH
20345: LD_STRING DRf-rast-3
20347: PPUSH
20348: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
20352: LD_EXP 46
20356: PPUSH
20357: LD_STRING DRf-rast-4
20359: PPUSH
20360: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
20364: LD_EXP 46
20368: PPUSH
20369: LD_STRING DRf-rast-5
20371: PPUSH
20372: CALL_OW 94
// if IsOk ( Aviradze ) then
20376: LD_EXP 45
20380: PPUSH
20381: CALL_OW 302
20385: IFFALSE 20444
// begin CenterNowOnUnits ( Aviradze ) ;
20387: LD_EXP 45
20391: PPUSH
20392: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
20396: LD_EXP 45
20400: PPUSH
20401: LD_STRING DA-rast-6
20403: PPUSH
20404: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
20408: LD_EXP 33
20412: PPUSH
20413: LD_STRING DH-rast-7
20415: PPUSH
20416: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
20420: LD_EXP 34
20424: PPUSH
20425: LD_STRING DG-rast-8
20427: PPUSH
20428: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
20432: LD_EXP 34
20436: PPUSH
20437: LD_STRING DG-rast-9
20439: PPUSH
20440: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
20444: LD_EXP 33
20448: PPUSH
20449: LD_STRING DH-rast-10
20451: PPUSH
20452: CALL_OW 88
// DialogueOff ;
20456: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
20460: LD_STRING M2
20462: PPUSH
20463: CALL_OW 337
// bergkampfArrived := true ;
20467: LD_ADDR_EXP 3
20471: PUSH
20472: LD_INT 1
20474: ST_TO_ADDR
// PrepareRolfBase ;
20475: CALL 3649 0 0
// end ;
20479: PPOPN 3
20481: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
20482: LD_INT 12
20484: PPUSH
20485: LD_INT 22
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PPUSH
20495: CALL_OW 70
20499: PUSH
20500: LD_EXP 46
20504: PPUSH
20505: CALL_OW 302
20509: AND
20510: PUSH
20511: LD_EXP 29
20515: AND
20516: IFFALSE 21076
20518: GO 20520
20520: DISABLE
20521: LD_INT 0
20523: PPUSH
// begin rolfScriptBase := false ;
20524: LD_ADDR_EXP 9
20528: PUSH
20529: LD_INT 0
20531: ST_TO_ADDR
// DialogueOn ;
20532: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
20536: LD_EXP 46
20540: PPUSH
20541: CALL_OW 87
// if rolfSquad >= 10 then
20545: LD_EXP 50
20549: PUSH
20550: LD_INT 10
20552: GREATEREQUAL
20553: IFFALSE 20732
// begin linkedWithRolf := 2 ;
20555: LD_ADDR_EXP 12
20559: PUSH
20560: LD_INT 2
20562: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
20563: LD_EXP 46
20567: PPUSH
20568: LD_STRING DRf-rast-11
20570: PPUSH
20571: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
20575: LD_EXP 33
20579: PPUSH
20580: LD_STRING DH-rast-12
20582: PPUSH
20583: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
20587: LD_EXP 46
20591: PPUSH
20592: LD_STRING DRf-rast-13
20594: PPUSH
20595: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
20599: LD_EXP 33
20603: PPUSH
20604: LD_STRING DH-rast-14
20606: PPUSH
20607: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
20611: LD_EXP 46
20615: PPUSH
20616: LD_STRING DRf-rast-15
20618: PPUSH
20619: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
20623: LD_EXP 33
20627: PPUSH
20628: LD_STRING DH-rast-16
20630: PPUSH
20631: CALL_OW 88
// if IsOk ( Mike ) then
20635: LD_EXP 35
20639: PPUSH
20640: CALL_OW 302
20644: IFFALSE 20718
// begin Say ( Mike , DM-rast-17 ) ;
20646: LD_EXP 35
20650: PPUSH
20651: LD_STRING DM-rast-17
20653: PPUSH
20654: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
20658: LD_EXP 33
20662: PPUSH
20663: LD_STRING DH-rast-18
20665: PPUSH
20666: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
20670: LD_EXP 35
20674: PPUSH
20675: LD_STRING DM-rast-19
20677: PPUSH
20678: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
20682: LD_EXP 33
20686: PPUSH
20687: LD_STRING DH-rast-20
20689: PPUSH
20690: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
20694: LD_EXP 35
20698: PPUSH
20699: LD_STRING DM-rast-21
20701: PPUSH
20702: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
20706: LD_EXP 33
20710: PPUSH
20711: LD_STRING DH-rast-22
20713: PPUSH
20714: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
20718: LD_EXP 33
20722: PPUSH
20723: LD_STRING DH-rast-23
20725: PPUSH
20726: CALL_OW 88
// end else
20730: GO 20882
// begin linkedWithRolf := 1 ;
20732: LD_ADDR_EXP 12
20736: PUSH
20737: LD_INT 1
20739: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
20740: LD_EXP 46
20744: PPUSH
20745: LD_STRING DRf-rast-a-11
20747: PPUSH
20748: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
20752: LD_EXP 33
20756: PPUSH
20757: LD_STRING DH-rast-a-12
20759: PPUSH
20760: CALL_OW 88
// if IsOk ( Kurt ) then
20764: LD_EXP 44
20768: PPUSH
20769: CALL_OW 302
20773: IFFALSE 20870
// begin Say ( Kurt , DKs-rast-a-13 ) ;
20775: LD_EXP 44
20779: PPUSH
20780: LD_STRING DKs-rast-a-13
20782: PPUSH
20783: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
20787: LD_EXP 46
20791: PPUSH
20792: LD_STRING DRf-rast-a-14
20794: PPUSH
20795: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
20799: LD_EXP 46
20803: PPUSH
20804: LD_STRING DRf-rast-a-15
20806: PPUSH
20807: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
20811: LD_EXP 44
20815: PPUSH
20816: LD_STRING DKs-rast-a-16
20818: PPUSH
20819: CALL_OW 88
// if IsOk ( Givi ) then
20823: LD_EXP 34
20827: PPUSH
20828: CALL_OW 302
20832: IFFALSE 20870
// begin Say ( Givi , DG-rast-a-17 ) ;
20834: LD_EXP 34
20838: PPUSH
20839: LD_STRING DG-rast-a-17
20841: PPUSH
20842: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
20846: LD_EXP 34
20850: PPUSH
20851: LD_STRING DG-rast-a-18
20853: PPUSH
20854: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
20858: LD_EXP 44
20862: PPUSH
20863: LD_STRING DKs-rast-a-19
20865: PPUSH
20866: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
20870: LD_EXP 33
20874: PPUSH
20875: LD_STRING DH-rast-a-20
20877: PPUSH
20878: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
20882: LD_EXP 46
20886: PPUSH
20887: LD_STRING DRf-rast-24
20889: PPUSH
20890: CALL_OW 88
// if IsOk ( Aviradze ) then
20894: LD_EXP 45
20898: PPUSH
20899: CALL_OW 302
20903: IFFALSE 21003
// begin Say ( Aviradze , DA-rast-25 ) ;
20905: LD_EXP 45
20909: PPUSH
20910: LD_STRING DA-rast-25
20912: PPUSH
20913: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
20917: LD_EXP 33
20921: PPUSH
20922: LD_STRING DH-rast-26
20924: PPUSH
20925: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
20929: LD_EXP 45
20933: PPUSH
20934: LD_STRING DA-rast-27
20936: PPUSH
20937: CALL_OW 88
// if IsOk ( Markov ) then
20941: LD_EXP 40
20945: PPUSH
20946: CALL_OW 302
20950: IFFALSE 20978
// begin Say ( Markov , DMar-rast-28 ) ;
20952: LD_EXP 40
20956: PPUSH
20957: LD_STRING DMar-rast-28
20959: PPUSH
20960: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
20964: LD_EXP 40
20968: PPUSH
20969: LD_STRING DMar-rast-29
20971: PPUSH
20972: CALL_OW 88
// end else
20976: GO 21001
// if IsOk ( Sophia ) then
20978: LD_EXP 39
20982: PPUSH
20983: CALL_OW 302
20987: IFFALSE 21001
// begin Say ( Sophia , DS-rast-28 ) ;
20989: LD_EXP 39
20993: PPUSH
20994: LD_STRING DS-rast-28
20996: PPUSH
20997: CALL_OW 88
// end ; end else
21001: GO 21026
// if IsOk ( Sophia ) then
21003: LD_EXP 39
21007: PPUSH
21008: CALL_OW 302
21012: IFFALSE 21026
// Say ( Sophia , DS-rast-29 ) ;
21014: LD_EXP 39
21018: PPUSH
21019: LD_STRING DS-rast-29
21021: PPUSH
21022: CALL_OW 88
// DialogueOff ;
21026: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
21030: LD_STRING M3
21032: PPUSH
21033: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
21037: LD_ADDR_VAR 0 1
21041: PUSH
21042: LD_INT 22
21044: PUSH
21045: LD_INT 8
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PPUSH
21052: CALL_OW 69
21056: PUSH
21057: FOR_IN
21058: IFFALSE 21074
// SetSide ( i , 2 ) ;
21060: LD_VAR 0 1
21064: PPUSH
21065: LD_INT 2
21067: PPUSH
21068: CALL_OW 235
21072: GO 21057
21074: POP
21075: POP
// end ;
21076: PPOPN 1
21078: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
21079: LD_EXP 23
21083: PUSH
21084: LD_EXP 12
21088: NOT
21089: AND
21090: PUSH
21091: LD_EXP 29
21095: AND
21096: IFFALSE 21187
21098: GO 21100
21100: DISABLE
21101: LD_INT 0
21103: PPUSH
// begin canRolfJoin := false ;
21104: LD_ADDR_EXP 29
21108: PUSH
21109: LD_INT 0
21111: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
21112: LD_STRING M3
21114: PPUSH
21115: CALL_OW 337
// for i in rolfSquad do
21119: LD_ADDR_VAR 0 1
21123: PUSH
21124: LD_EXP 50
21128: PUSH
21129: FOR_IN
21130: IFFALSE 21185
// begin ComExit ( i ) ;
21132: LD_VAR 0 1
21136: PPUSH
21137: CALL 65673 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
21141: LD_VAR 0 1
21145: PPUSH
21146: LD_INT 147
21148: PPUSH
21149: LD_INT 162
21151: PPUSH
21152: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
21156: LD_VAR 0 1
21160: PPUSH
21161: LD_INT 1050
21163: PPUSH
21164: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
21168: LD_VAR 0 1
21172: PPUSH
21173: LD_INT 103
21175: PPUSH
21176: LD_INT 162
21178: PPUSH
21179: CALL_OW 174
// end ;
21183: GO 21129
21185: POP
21186: POP
// end ;
21187: PPOPN 1
21189: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
21190: LD_EXP 3
21194: PUSH
21195: LD_EXP 46
21199: PPUSH
21200: CALL_OW 256
21204: PUSH
21205: LD_INT 400
21207: LESS
21208: AND
21209: PUSH
21210: LD_EXP 12
21214: NOT
21215: AND
21216: PUSH
21217: LD_EXP 29
21221: AND
21222: IFFALSE 21496
21224: GO 21226
21226: DISABLE
21227: LD_INT 0
21229: PPUSH
// begin DialogueOn ;
21230: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
21234: LD_EXP 46
21238: PPUSH
21239: LD_STRING DRf-rast-f-11
21241: PPUSH
21242: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
21246: LD_EXP 46
21250: PPUSH
21251: LD_STRING DRf-rast-f-12
21253: PPUSH
21254: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
21258: LD_EXP 46
21262: PPUSH
21263: LD_STRING DRf-rast-f-13
21265: PPUSH
21266: CALL_OW 94
// DialogueOff ;
21270: CALL_OW 7
// KillUnit ( Rolf ) ;
21274: LD_EXP 46
21278: PPUSH
21279: CALL_OW 66
// wait ( 0 0$1 ) ;
21283: LD_INT 35
21285: PPUSH
21286: CALL_OW 67
// if not IsOk ( Givi ) then
21290: LD_EXP 34
21294: PPUSH
21295: CALL_OW 302
21299: NOT
21300: IFFALSE 21304
// exit ;
21302: GO 21496
// DialogueOn ;
21304: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
21308: LD_EXP 34
21312: PPUSH
21313: LD_STRING DG-rast-f-14
21315: PPUSH
21316: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
21320: LD_EXP 34
21324: PPUSH
21325: LD_STRING DG-rast-f-15
21327: PPUSH
21328: CALL_OW 88
// if IsOk ( Kaia ) then
21332: LD_EXP 38
21336: PPUSH
21337: CALL_OW 302
21341: IFFALSE 21357
// Say ( Kaia , DK-rast-f-16 ) else
21343: LD_EXP 38
21347: PPUSH
21348: LD_STRING DK-rast-f-16
21350: PPUSH
21351: CALL_OW 88
21355: GO 21444
// if heikeSecondSquad then
21357: LD_EXP 48
21361: IFFALSE 21444
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
21363: LD_ADDR_VAR 0 1
21367: PUSH
21368: LD_EXP 48
21372: PUSH
21373: LD_INT 1
21375: PPUSH
21376: LD_EXP 48
21380: PPUSH
21381: CALL_OW 12
21385: ARRAY
21386: ST_TO_ADDR
// case GetSex ( random ) of 1 :
21387: LD_VAR 0 1
21391: PPUSH
21392: CALL_OW 258
21396: PUSH
21397: LD_INT 1
21399: DOUBLE
21400: EQUAL
21401: IFTRUE 21405
21403: GO 21420
21405: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
21406: LD_VAR 0 1
21410: PPUSH
21411: LD_STRING DArm-rast-f-a-16
21413: PPUSH
21414: CALL_OW 88
21418: GO 21444
21420: LD_INT 2
21422: DOUBLE
21423: EQUAL
21424: IFTRUE 21428
21426: GO 21443
21428: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
21429: LD_VAR 0 1
21433: PPUSH
21434: LD_STRING DArf-rast-f-a-16
21436: PPUSH
21437: CALL_OW 88
21441: GO 21444
21443: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
21444: LD_EXP 34
21448: PPUSH
21449: LD_STRING DG-rast-f-17
21451: PPUSH
21452: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
21456: LD_EXP 34
21460: PPUSH
21461: LD_STRING DG-rast-f-18
21463: PPUSH
21464: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
21468: LD_EXP 34
21472: PPUSH
21473: LD_STRING DG-rast-f-19
21475: PPUSH
21476: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
21480: LD_EXP 34
21484: PPUSH
21485: LD_STRING DG-rast-f-20
21487: PPUSH
21488: CALL_OW 88
// DialogueOff ;
21492: CALL_OW 7
// end ;
21496: PPOPN 1
21498: END
// every 0 0$1 trigger gameActive and SeeArea ( 2 , ruMainBase ) do
21499: LD_EXP 31
21503: PUSH
21504: LD_INT 2
21506: PPUSH
21507: LD_INT 10
21509: PPUSH
21510: CALL_OW 294
21514: AND
21515: IFFALSE 21588
21517: GO 21519
21519: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
21520: LD_EXP 34
21524: PPUSH
21525: LD_STRING DG-Len-1
21527: PPUSH
21528: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
21532: LD_EXP 44
21536: PPUSH
21537: LD_STRING DKs-Len-2
21539: PPUSH
21540: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
21544: LD_EXP 44
21548: PPUSH
21549: LD_STRING DKs-Len-3
21551: PPUSH
21552: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
21556: LD_EXP 33
21560: PPUSH
21561: LD_STRING DH-Len-4
21563: PPUSH
21564: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
21568: LD_EXP 38
21572: PPUSH
21573: LD_STRING DK-Len-5
21575: PPUSH
21576: CALL_OW 88
// leninSpotted := true ;
21580: LD_ADDR_EXP 14
21584: PUSH
21585: LD_INT 1
21587: ST_TO_ADDR
// end ;
21588: END
// every 0 0$1 trigger bergkampfArrived and tick > [ 32 32$00 , 30 30$00 , 28 28$00 , 26 26$00 ] [ Difficulty ] do var i , tmp , inOmarBase , heikeNearbyOmar ;
21589: LD_EXP 3
21593: PUSH
21594: LD_OWVAR 1
21598: PUSH
21599: LD_INT 67200
21601: PUSH
21602: LD_INT 63000
21604: PUSH
21605: LD_INT 58800
21607: PUSH
21608: LD_INT 54600
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: PUSH
21617: LD_OWVAR 67
21621: ARRAY
21622: GREATER
21623: AND
21624: IFFALSE 22324
21626: GO 21628
21628: DISABLE
21629: LD_INT 0
21631: PPUSH
21632: PPUSH
21633: PPUSH
21634: PPUSH
// begin PrepareOmarSquad ;
21635: CALL 4931 0 0
// repeat wait ( 0 0$1 ) ;
21639: LD_INT 35
21641: PPUSH
21642: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
21646: LD_INT 14
21648: PPUSH
21649: LD_INT 22
21651: PUSH
21652: LD_INT 3
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 2
21661: PUSH
21662: LD_INT 21
21664: PUSH
21665: LD_INT 1
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 59
21674: PUSH
21675: EMPTY
21676: LIST
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: LIST
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PPUSH
21687: CALL_OW 70
21691: NOT
21692: IFFALSE 21639
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
21694: LD_ADDR_VAR 0 2
21698: PUSH
21699: LD_INT 14
21701: PPUSH
21702: LD_INT 22
21704: PUSH
21705: LD_INT 2
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PPUSH
21712: CALL_OW 70
21716: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
21717: LD_ADDR_VAR 0 3
21721: PUSH
21722: LD_VAR 0 2
21726: PUSH
21727: LD_INT 0
21729: GREATER
21730: ST_TO_ADDR
// heikeNearbyOmar := IsInArea ( Heike , ruOmarBase ) ;
21731: LD_ADDR_VAR 0 4
21735: PUSH
21736: LD_EXP 33
21740: PPUSH
21741: LD_INT 14
21743: PPUSH
21744: CALL_OW 308
21748: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
21749: LD_VAR 0 2
21753: PPUSH
21754: LD_INT 21
21756: PUSH
21757: LD_INT 3
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PPUSH
21764: CALL_OW 72
21768: IFFALSE 21873
// begin if heikeNearbyOmar then
21770: LD_VAR 0 4
21774: IFFALSE 21790
// Say ( Omar , DOm-Base-1b ) else
21776: LD_EXP 43
21780: PPUSH
21781: LD_STRING DOm-Base-1b
21783: PPUSH
21784: CALL_OW 88
21788: GO 21802
// SayRadio ( Omar , DOm-Base-1br ) ;
21790: LD_EXP 43
21794: PPUSH
21795: LD_STRING DOm-Base-1br
21797: PPUSH
21798: CALL_OW 94
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
21802: LD_ADDR_VAR 0 1
21806: PUSH
21807: LD_VAR 0 2
21811: PPUSH
21812: LD_INT 21
21814: PUSH
21815: LD_INT 3
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PPUSH
21822: CALL_OW 72
21826: PUSH
21827: FOR_IN
21828: IFFALSE 21869
// begin if UnitsInside ( i ) then
21830: LD_VAR 0 1
21834: PPUSH
21835: CALL_OW 313
21839: IFFALSE 21855
// ComExitBuilding ( UnitsInside ( i ) ) ;
21841: LD_VAR 0 1
21845: PPUSH
21846: CALL_OW 313
21850: PPUSH
21851: CALL_OW 122
// SetSide ( i , 5 ) ;
21855: LD_VAR 0 1
21859: PPUSH
21860: LD_INT 5
21862: PPUSH
21863: CALL_OW 235
// end ;
21867: GO 21827
21869: POP
21870: POP
// end else
21871: GO 21966
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
21873: LD_VAR 0 2
21877: PPUSH
21878: LD_INT 21
21880: PUSH
21881: LD_INT 2
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PPUSH
21888: CALL_OW 72
21892: IFFALSE 21928
// begin if heikeNearbyOmar then
21894: LD_VAR 0 4
21898: IFFALSE 21914
// Say ( Omar , DOm-Base-1v ) else
21900: LD_EXP 43
21904: PPUSH
21905: LD_STRING DOm-Base-1v
21907: PPUSH
21908: CALL_OW 88
21912: GO 21926
// SayRadio ( Omar , DOm-Base-1vr ) end else
21914: LD_EXP 43
21918: PPUSH
21919: LD_STRING DOm-Base-1vr
21921: PPUSH
21922: CALL_OW 94
21926: GO 21966
// if inOmarBase then
21928: LD_VAR 0 3
21932: IFFALSE 21966
// begin if heikeNearbyOmar then
21934: LD_VAR 0 4
21938: IFFALSE 21954
// Say ( Omar , DOm-Base-1h ) else
21940: LD_EXP 43
21944: PPUSH
21945: LD_STRING DOm-Base-1h
21947: PPUSH
21948: CALL_OW 88
21952: GO 21966
// SayRadio ( Omar , DOm-Base-1hr ) end ;
21954: LD_EXP 43
21958: PPUSH
21959: LD_STRING DOm-Base-1hr
21961: PPUSH
21962: CALL_OW 94
// for i in omarSquad do
21966: LD_ADDR_VAR 0 1
21970: PUSH
21971: LD_EXP 51
21975: PUSH
21976: FOR_IN
21977: IFFALSE 22008
// if GetLives ( i ) < 750 then
21979: LD_VAR 0 1
21983: PPUSH
21984: CALL_OW 256
21988: PUSH
21989: LD_INT 750
21991: LESS
21992: IFFALSE 22006
// SetLives ( i , 1000 ) ;
21994: LD_VAR 0 1
21998: PPUSH
21999: LD_INT 1000
22001: PPUSH
22002: CALL_OW 234
22006: GO 21976
22008: POP
22009: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
22010: LD_ADDR_VAR 0 1
22014: PUSH
22015: LD_INT 14
22017: PPUSH
22018: LD_INT 21
22020: PUSH
22021: LD_INT 3
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PPUSH
22028: CALL_OW 70
22032: PUSH
22033: FOR_IN
22034: IFFALSE 22050
// SetSide ( i , 5 ) ;
22036: LD_VAR 0 1
22040: PPUSH
22041: LD_INT 5
22043: PPUSH
22044: CALL_OW 235
22048: GO 22033
22050: POP
22051: POP
// wait ( 0 0$3 ) ;
22052: LD_INT 105
22054: PPUSH
22055: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
22059: LD_INT 5
22061: PPUSH
22062: LD_INT 2
22064: PPUSH
22065: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
22069: LD_EXP 43
22073: PPUSH
22074: CALL_OW 87
// DialogueOn ;
22078: CALL_OW 6
// if heikeNearbyOmar then
22082: LD_VAR 0 4
22086: IFFALSE 22144
// begin Say ( Omar , DOm-Veh-1a ) ;
22088: LD_EXP 43
22092: PPUSH
22093: LD_STRING DOm-Veh-1a
22095: PPUSH
22096: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
22100: LD_EXP 43
22104: PPUSH
22105: LD_STRING DOm-Veh-2a
22107: PPUSH
22108: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
22112: LD_EXP 43
22116: PPUSH
22117: LD_STRING DOm-Veh-3a
22119: PPUSH
22120: CALL_OW 88
// if mortarConstructed then
22124: LD_EXP 15
22128: IFFALSE 22142
// Say ( Omar , DOm-Veh-4a ) ;
22130: LD_EXP 43
22134: PPUSH
22135: LD_STRING DOm-Veh-4a
22137: PPUSH
22138: CALL_OW 88
// end else
22142: GO 22198
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
22144: LD_EXP 43
22148: PPUSH
22149: LD_STRING DOm-Veh-1
22151: PPUSH
22152: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
22156: LD_EXP 43
22160: PPUSH
22161: LD_STRING DOm-Veh-2
22163: PPUSH
22164: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
22168: LD_EXP 43
22172: PPUSH
22173: LD_STRING DOm-Veh-3
22175: PPUSH
22176: CALL_OW 94
// if mortarConstructed then
22180: LD_EXP 15
22184: IFFALSE 22198
// SayRadio ( Omar , DOm-Veh-4 ) ;
22186: LD_EXP 43
22190: PPUSH
22191: LD_STRING DOm-Veh-4
22193: PPUSH
22194: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
22198: LD_EXP 33
22202: PPUSH
22203: LD_STRING DH-Veh-5
22205: PPUSH
22206: CALL_OW 88
// if IsOk ( Kurt ) then
22210: LD_EXP 44
22214: PPUSH
22215: CALL_OW 302
22219: IFFALSE 22269
// begin Say ( Kurt , DKs-Veh-6 ) ;
22221: LD_EXP 44
22225: PPUSH
22226: LD_STRING DKs-Veh-6
22228: PPUSH
22229: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
22233: LD_EXP 44
22237: PPUSH
22238: LD_STRING DKs-Veh-7
22240: PPUSH
22241: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
22245: LD_EXP 34
22249: PPUSH
22250: LD_STRING DG-Veh-8
22252: PPUSH
22253: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
22257: LD_EXP 35
22261: PPUSH
22262: LD_STRING DM-Veh-9
22264: PPUSH
22265: CALL_OW 88
// end ; DialogueOff ;
22269: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
22273: LD_STRING M4
22275: PPUSH
22276: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
22280: LD_EXP 43
22284: PPUSH
22285: LD_INT 341
22287: PPUSH
22288: LD_INT 232
22290: PPUSH
22291: CALL_OW 428
22295: PPUSH
22296: CALL_OW 120
// omarArrived := true ;
22300: LD_ADDR_EXP 6
22304: PUSH
22305: LD_INT 1
22307: ST_TO_ADDR
// omarScriptBase := true ;
22308: LD_ADDR_EXP 10
22312: PUSH
22313: LD_INT 1
22315: ST_TO_ADDR
// omarWantVehicles := true ;
22316: LD_ADDR_EXP 18
22320: PUSH
22321: LD_INT 1
22323: ST_TO_ADDR
// end ;
22324: PPOPN 4
22326: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
22327: LD_INT 10
22329: PPUSH
22330: LD_INT 22
22332: PUSH
22333: LD_INT 2
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PPUSH
22340: CALL_OW 70
22344: PUSH
22345: LD_EXP 6
22349: AND
22350: PUSH
22351: LD_EXP 43
22355: PPUSH
22356: CALL_OW 302
22360: AND
22361: PUSH
22362: LD_EXP 23
22366: NOT
22367: AND
22368: IFFALSE 22385
22370: GO 22372
22372: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
22373: LD_EXP 43
22377: PPUSH
22378: LD_STRING DOm-Lenin
22380: PPUSH
22381: CALL_OW 94
22385: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
22386: LD_EXP 46
22390: PPUSH
22391: CALL_OW 302
22395: PUSH
22396: LD_EXP 12
22400: AND
22401: PUSH
22402: LD_EXP 6
22406: AND
22407: IFFALSE 22511
22409: GO 22411
22411: DISABLE
// begin wait ( 1 1$00 ) ;
22412: LD_INT 2100
22414: PPUSH
22415: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
22419: LD_EXP 46
22423: PPUSH
22424: CALL_OW 87
// DialogueOn ;
22428: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
22432: LD_EXP 46
22436: PPUSH
22437: LD_STRING DRf-Veh-10
22439: PPUSH
22440: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
22444: LD_EXP 46
22448: PPUSH
22449: LD_STRING DRf-Veh-11
22451: PPUSH
22452: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
22456: LD_EXP 33
22460: PPUSH
22461: LD_STRING DH-Veh-12
22463: PPUSH
22464: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
22468: LD_EXP 33
22472: PPUSH
22473: LD_STRING DH-Veh-13
22475: PPUSH
22476: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
22480: LD_EXP 46
22484: PPUSH
22485: LD_STRING DRf-Veh-14
22487: PPUSH
22488: CALL_OW 88
// DialogueOff ;
22492: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
22496: LD_STRING M5
22498: PPUSH
22499: CALL_OW 337
// rolfWantVehicles := true ;
22503: LD_ADDR_EXP 17
22507: PUSH
22508: LD_INT 1
22510: ST_TO_ADDR
// end ;
22511: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
22512: LD_EXP 18
22516: IFFALSE 23279
22518: GO 22520
22520: DISABLE
22521: LD_INT 0
22523: PPUSH
22524: PPUSH
22525: PPUSH
22526: PPUSH
22527: PPUSH
22528: PPUSH
// begin wait ( 0 0$3 ) ;
22529: LD_INT 105
22531: PPUSH
22532: CALL_OW 67
// Hint ( OmarVehicles ) ;
22536: LD_STRING OmarVehicles
22538: PPUSH
22539: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
22543: LD_INT 16
22545: PPUSH
22546: LD_INT 1
22548: PPUSH
22549: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
22553: LD_INT 35
22555: PPUSH
22556: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
22560: LD_ADDR_EXP 20
22564: PUSH
22565: LD_EXP 20
22569: PUSH
22570: LD_INT 35
22572: MINUS
22573: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
22574: LD_EXP 20
22578: PUSH
22579: LD_INT 0
22581: LESSEQUAL
22582: IFFALSE 22682
// begin display_strings := [ ] ;
22584: LD_ADDR_OWVAR 47
22588: PUSH
22589: EMPTY
22590: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
22591: LD_STRING M4a
22593: PPUSH
22594: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
22598: LD_INT 16
22600: PPUSH
22601: LD_INT 0
22603: PPUSH
22604: CALL_OW 424
// DialogueOn ;
22608: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
22612: LD_EXP 43
22616: PPUSH
22617: LD_STRING DOm-Veh-b-15
22619: PPUSH
22620: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
22624: LD_EXP 33
22628: PPUSH
22629: LD_STRING DH-Veh-b-16
22631: PPUSH
22632: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
22636: LD_EXP 43
22640: PPUSH
22641: LD_STRING DOm-Veh-b-17
22643: PPUSH
22644: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
22648: LD_EXP 38
22652: PPUSH
22653: LD_STRING DK-Veh-b-18
22655: PPUSH
22656: CALL_OW 88
// DialogueOff ;
22660: CALL_OW 7
// omarAttack := true ;
22664: LD_ADDR_EXP 23
22668: PUSH
22669: LD_INT 1
22671: ST_TO_ADDR
// omarScriptBase := false ;
22672: LD_ADDR_EXP 10
22676: PUSH
22677: LD_INT 0
22679: ST_TO_ADDR
// exit ;
22680: GO 23279
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
22682: LD_EXP 21
22686: PUSH
22687: LD_INT 16
22689: PPUSH
22690: LD_INT 22
22692: PUSH
22693: LD_INT 2
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 21
22702: PUSH
22703: LD_INT 2
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 3
22712: PUSH
22713: LD_INT 2
22715: PUSH
22716: LD_INT 34
22718: PUSH
22719: LD_INT 32
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 34
22728: PUSH
22729: LD_INT 88
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 34
22738: PUSH
22739: LD_INT 31
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 33
22758: PUSH
22759: LD_INT 1
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 58
22768: PUSH
22769: EMPTY
22770: LIST
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: PPUSH
22779: CALL_OW 70
22783: LESSEQUAL
22784: IFFALSE 22553
// omarWaitingForVehiclesTimer := 0 0$00 ;
22786: LD_ADDR_EXP 20
22790: PUSH
22791: LD_INT 0
22793: ST_TO_ADDR
// display_strings := [ ] ;
22794: LD_ADDR_OWVAR 47
22798: PUSH
22799: EMPTY
22800: ST_TO_ADDR
// DialogueOn ;
22801: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
22805: LD_EXP 43
22809: PPUSH
22810: LD_STRING DOm-Veh-a-15
22812: PPUSH
22813: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
22817: LD_EXP 38
22821: PPUSH
22822: LD_STRING DK-Veh-a-16
22824: PPUSH
22825: CALL_OW 88
// DialogueOff ;
22829: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
22833: LD_STRING M4a
22835: PPUSH
22836: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
22840: LD_INT 16
22842: PPUSH
22843: LD_INT 0
22845: PPUSH
22846: CALL_OW 424
// omarHasVehicles := true ;
22850: LD_ADDR_EXP 22
22854: PUSH
22855: LD_INT 1
22857: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22858: LD_INT 35
22860: PPUSH
22861: CALL_OW 67
// until rolfWaitingForVehiclesTimer = 0 0$00 ;
22865: LD_EXP 19
22869: PUSH
22870: LD_INT 0
22872: EQUAL
22873: IFFALSE 22858
// wait ( 1 1$00 ) ;
22875: LD_INT 2100
22877: PPUSH
22878: CALL_OW 67
// omarAttack := true ;
22882: LD_ADDR_EXP 23
22886: PUSH
22887: LD_INT 1
22889: ST_TO_ADDR
// omarScriptBase := false ;
22890: LD_ADDR_EXP 10
22894: PUSH
22895: LD_INT 0
22897: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
22898: LD_ADDR_VAR 0 2
22902: PUSH
22903: LD_INT 16
22905: PPUSH
22906: LD_INT 22
22908: PUSH
22909: LD_INT 2
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 21
22918: PUSH
22919: LD_INT 2
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 33
22928: PUSH
22929: LD_INT 1
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 58
22938: PUSH
22939: EMPTY
22940: LIST
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: PPUSH
22948: CALL_OW 70
22952: ST_TO_ADDR
// for i in tmp do
22953: LD_ADDR_VAR 0 1
22957: PUSH
22958: LD_VAR 0 2
22962: PUSH
22963: FOR_IN
22964: IFFALSE 22992
// begin SetFuel ( i , 100 ) ;
22966: LD_VAR 0 1
22970: PPUSH
22971: LD_INT 100
22973: PPUSH
22974: CALL_OW 240
// SetSide ( i , 5 ) ;
22978: LD_VAR 0 1
22982: PPUSH
22983: LD_INT 5
22985: PPUSH
22986: CALL_OW 235
// end ;
22990: GO 22963
22992: POP
22993: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
22994: LD_ADDR_VAR 0 3
22998: PUSH
22999: LD_EXP 51
23003: PPUSH
23004: LD_INT 25
23006: PUSH
23007: LD_INT 2
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PPUSH
23014: CALL_OW 72
23018: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
23019: LD_ADDR_VAR 0 4
23023: PUSH
23024: LD_EXP 51
23028: PPUSH
23029: LD_INT 3
23031: PUSH
23032: LD_INT 55
23034: PUSH
23035: EMPTY
23036: LIST
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 25
23044: PUSH
23045: LD_INT 3
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PPUSH
23056: CALL_OW 72
23060: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
23061: LD_ADDR_VAR 0 5
23065: PUSH
23066: LD_INT 324
23068: PPUSH
23069: LD_INT 234
23071: PPUSH
23072: CALL_OW 428
23076: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
23077: LD_ADDR_VAR 0 6
23081: PUSH
23082: LD_INT 334
23084: PPUSH
23085: LD_INT 241
23087: PPUSH
23088: CALL_OW 428
23092: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
23093: LD_VAR 0 6
23097: PPUSH
23098: CALL_OW 313
23102: PPUSH
23103: CALL_OW 122
// if eng then
23107: LD_VAR 0 3
23111: IFFALSE 23219
// begin if eng + mech <= tmp then
23113: LD_VAR 0 3
23117: PUSH
23118: LD_VAR 0 4
23122: PLUS
23123: PUSH
23124: LD_VAR 0 2
23128: LESSEQUAL
23129: IFFALSE 23184
// begin ComEnterUnit ( eng , workshop ) ;
23131: LD_VAR 0 3
23135: PPUSH
23136: LD_VAR 0 5
23140: PPUSH
23141: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
23145: LD_VAR 0 3
23149: PPUSH
23150: LD_INT 3
23152: PPUSH
23153: CALL_OW 183
// AddComExitBuilding ( eng ) ;
23157: LD_VAR 0 3
23161: PPUSH
23162: CALL_OW 182
// mech := mech union eng ;
23166: LD_ADDR_VAR 0 4
23170: PUSH
23171: LD_VAR 0 4
23175: PUSH
23176: LD_VAR 0 3
23180: UNION
23181: ST_TO_ADDR
// end else
23182: GO 23219
// begin ComEnterUnit ( eng , armoury ) ;
23184: LD_VAR 0 3
23188: PPUSH
23189: LD_VAR 0 6
23193: PPUSH
23194: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
23198: LD_VAR 0 3
23202: PPUSH
23203: LD_INT 1
23205: PPUSH
23206: CALL_OW 183
// AddComExitBuilding ( eng ) ;
23210: LD_VAR 0 3
23214: PPUSH
23215: CALL_OW 182
// end ; end ; for i := 1 to tmp do
23219: LD_ADDR_VAR 0 1
23223: PUSH
23224: DOUBLE
23225: LD_INT 1
23227: DEC
23228: ST_TO_ADDR
23229: LD_VAR 0 2
23233: PUSH
23234: FOR_TO
23235: IFFALSE 23277
// if i <= mech then
23237: LD_VAR 0 1
23241: PUSH
23242: LD_VAR 0 4
23246: LESSEQUAL
23247: IFFALSE 23275
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
23249: LD_VAR 0 4
23253: PUSH
23254: LD_VAR 0 1
23258: ARRAY
23259: PPUSH
23260: LD_VAR 0 2
23264: PUSH
23265: LD_VAR 0 1
23269: ARRAY
23270: PPUSH
23271: CALL_OW 180
23275: GO 23234
23277: POP
23278: POP
// end ;
23279: PPOPN 6
23281: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i ;
23282: LD_EXP 46
23286: PPUSH
23287: CALL_OW 302
23291: PUSH
23292: LD_EXP 17
23296: AND
23297: IFFALSE 23779
23299: GO 23301
23301: DISABLE
23302: LD_INT 0
23304: PPUSH
// begin repeat wait ( 0 0$1 ) ;
23305: LD_INT 35
23307: PPUSH
23308: CALL_OW 67
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
23312: LD_ADDR_EXP 19
23316: PUSH
23317: LD_EXP 19
23321: PUSH
23322: LD_INT 35
23324: MINUS
23325: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 then
23326: LD_EXP 19
23330: PUSH
23331: LD_INT 0
23333: LESSEQUAL
23334: IFFALSE 23567
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
23336: LD_ADDR_EXP 19
23340: PUSH
23341: LD_INT 0
23343: ST_TO_ADDR
// display_strings := [ ] ;
23344: LD_ADDR_OWVAR 47
23348: PUSH
23349: EMPTY
23350: ST_TO_ADDR
// DialogueOn ;
23351: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
23355: LD_EXP 46
23359: PPUSH
23360: LD_STRING DRf-Veh-b-19
23362: PPUSH
23363: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
23367: LD_EXP 46
23371: PPUSH
23372: LD_STRING DRf-Veh-b-20
23374: PPUSH
23375: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
23379: LD_EXP 33
23383: PPUSH
23384: LD_STRING DH-Veh-b-21
23386: PPUSH
23387: CALL_OW 88
// if IsOk ( Givi ) then
23391: LD_EXP 34
23395: PPUSH
23396: CALL_OW 302
23400: IFFALSE 23438
// begin Say ( Givi , DG-Veh-b-22 ) ;
23402: LD_EXP 34
23406: PPUSH
23407: LD_STRING DG-Veh-b-22
23409: PPUSH
23410: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
23414: LD_EXP 33
23418: PPUSH
23419: LD_STRING DH-Veh-b-23
23421: PPUSH
23422: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
23426: LD_EXP 34
23430: PPUSH
23431: LD_STRING DG-Veh-b-24
23433: PPUSH
23434: CALL_OW 88
// end ; DialogueOff ;
23438: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
23442: LD_STRING M5a
23444: PPUSH
23445: CALL_OW 337
// for i in rolfSquad do
23449: LD_ADDR_VAR 0 1
23453: PUSH
23454: LD_EXP 50
23458: PUSH
23459: FOR_IN
23460: IFFALSE 23526
// begin SetSide ( i , 8 ) ;
23462: LD_VAR 0 1
23466: PPUSH
23467: LD_INT 8
23469: PPUSH
23470: CALL_OW 235
// if IsDriver ( i ) then
23474: LD_VAR 0 1
23478: PPUSH
23479: CALL 62884 0 1
23483: IFFALSE 23504
// SetSide ( IsInUnit ( i ) , 8 ) else
23485: LD_VAR 0 1
23489: PPUSH
23490: CALL_OW 310
23494: PPUSH
23495: LD_INT 8
23497: PPUSH
23498: CALL_OW 235
23502: GO 23524
// if IsInUnit ( i ) then
23504: LD_VAR 0 1
23508: PPUSH
23509: CALL_OW 310
23513: IFFALSE 23524
// ComExitBuilding ( i ) ;
23515: LD_VAR 0 1
23519: PPUSH
23520: CALL_OW 122
// end ;
23524: GO 23459
23526: POP
23527: POP
// wait ( 0 0$1 ) ;
23528: LD_INT 35
23530: PPUSH
23531: CALL_OW 67
// ComAgressiveMove ( rolfSquad , 127 , 106 ) ;
23535: LD_EXP 50
23539: PPUSH
23540: LD_INT 127
23542: PPUSH
23543: LD_INT 106
23545: PPUSH
23546: CALL_OW 114
// wait ( 0 0$30 ) ;
23550: LD_INT 1050
23552: PPUSH
23553: CALL_OW 67
// rolfAttack := true ;
23557: LD_ADDR_EXP 32
23561: PUSH
23562: LD_INT 1
23564: ST_TO_ADDR
// exit ;
23565: GO 23779
// end ; if IsDead ( Rolf ) then
23567: LD_EXP 46
23571: PPUSH
23572: CALL_OW 301
23576: IFFALSE 23587
// begin ChangeMissionObjectives ( M5a ) ;
23578: LD_STRING M5a
23580: PPUSH
23581: CALL_OW 337
// exit ;
23585: GO 23779
// end ; until Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) ;
23587: LD_EXP 50
23591: PPUSH
23592: LD_INT 55
23594: PUSH
23595: EMPTY
23596: LIST
23597: PPUSH
23598: CALL_OW 72
23602: PPUSH
23603: CALL 29928 0 1
23607: PUSH
23608: LD_EXP 50
23612: PPUSH
23613: CALL 29928 0 1
23617: EQUAL
23618: IFFALSE 23305
// rolfWaitingForVehiclesTimer := 0 0$00 ;
23620: LD_ADDR_EXP 19
23624: PUSH
23625: LD_INT 0
23627: ST_TO_ADDR
// display_strings := [ ] ;
23628: LD_ADDR_OWVAR 47
23632: PUSH
23633: EMPTY
23634: ST_TO_ADDR
// DialogueOn ;
23635: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
23639: LD_EXP 46
23643: PPUSH
23644: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
23648: LD_EXP 46
23652: PPUSH
23653: LD_STRING DRf-Veh-a-17
23655: PPUSH
23656: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
23660: LD_EXP 33
23664: PPUSH
23665: LD_STRING DH-08-Veh-a-18
23667: PPUSH
23668: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
23672: LD_EXP 46
23676: PPUSH
23677: LD_STRING DRf-Veh-a-19
23679: PPUSH
23680: CALL_OW 88
// DialogueOff ;
23684: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
23688: LD_STRING M5a
23690: PPUSH
23691: CALL_OW 337
// rolfHasVehicles := true ;
23695: LD_ADDR_EXP 16
23699: PUSH
23700: LD_INT 1
23702: ST_TO_ADDR
// for i in rolfSquad do
23703: LD_ADDR_VAR 0 1
23707: PUSH
23708: LD_EXP 50
23712: PUSH
23713: FOR_IN
23714: IFFALSE 23747
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
23716: LD_VAR 0 1
23720: PPUSH
23721: CALL_OW 310
23725: PPUSH
23726: LD_INT 8
23728: PPUSH
23729: CALL_OW 235
// SetSide ( i , 8 ) ;
23733: LD_VAR 0 1
23737: PPUSH
23738: LD_INT 8
23740: PPUSH
23741: CALL_OW 235
// end ;
23745: GO 23713
23747: POP
23748: POP
// ComAgressiveMove ( rolfSquad , 127 , 106 ) ;
23749: LD_EXP 50
23753: PPUSH
23754: LD_INT 127
23756: PPUSH
23757: LD_INT 106
23759: PPUSH
23760: CALL_OW 114
// wait ( 0 0$30 ) ;
23764: LD_INT 1050
23766: PPUSH
23767: CALL_OW 67
// rolfAttack := true ;
23771: LD_ADDR_EXP 32
23775: PUSH
23776: LD_INT 1
23778: ST_TO_ADDR
// end ;
23779: PPOPN 1
23781: END
// every 0 0$1 trigger leninSpotted do
23782: LD_EXP 14
23786: IFFALSE 23874
23788: GO 23790
23790: DISABLE
// begin wait ( 0 0$10 ) ;
23791: LD_INT 350
23793: PPUSH
23794: CALL_OW 67
// DialogueOn ;
23798: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
23802: LD_EXP 45
23806: PPUSH
23807: LD_STRING DA-Transmission-1
23809: PPUSH
23810: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
23814: LD_EXP 52
23818: PPUSH
23819: LD_STRING DMzw-Transmission-2
23821: PPUSH
23822: CALL_OW 94
// if gaidarKilled then
23826: LD_EXP 7
23830: IFFALSE 23846
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
23832: LD_EXP 52
23836: PPUSH
23837: LD_STRING DMzw-Transmission-3
23839: PPUSH
23840: CALL_OW 94
23844: GO 23858
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
23846: LD_EXP 52
23850: PPUSH
23851: LD_STRING DMzw-Transmission-a-3
23853: PPUSH
23854: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
23858: LD_EXP 33
23862: PPUSH
23863: LD_STRING DH-Transmission-4
23865: PPUSH
23866: CALL_OW 88
// DialogueOff ;
23870: CALL_OW 7
// end ;
23874: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
23875: LD_INT 22
23877: PUSH
23878: LD_INT 3
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 25
23887: PUSH
23888: LD_INT 9
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 101
23897: PUSH
23898: LD_INT 2
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: LIST
23909: PPUSH
23910: CALL_OW 69
23914: PUSH
23915: LD_EXP 33
23919: PPUSH
23920: CALL_OW 302
23924: AND
23925: IFFALSE 23990
23927: GO 23929
23929: DISABLE
// begin CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
23930: LD_INT 22
23932: PUSH
23933: LD_INT 3
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 25
23942: PUSH
23943: LD_INT 9
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 101
23952: PUSH
23953: LD_INT 2
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: LIST
23964: PPUSH
23965: CALL_OW 69
23969: PUSH
23970: LD_INT 1
23972: ARRAY
23973: PPUSH
23974: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
23978: LD_EXP 33
23982: PPUSH
23983: LD_STRING DH-Rubazooka-1
23985: PPUSH
23986: CALL_OW 88
// end ;
23990: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
23991: LD_INT 19
23993: PPUSH
23994: LD_INT 22
23996: PUSH
23997: LD_INT 3
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PPUSH
24004: CALL_OW 70
24008: PUSH
24009: LD_EXP 28
24013: AND
24014: IFFALSE 24065
24016: GO 24018
24018: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
24019: LD_INT 19
24021: PPUSH
24022: LD_INT 22
24024: PUSH
24025: LD_INT 3
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PPUSH
24032: CALL_OW 70
24036: PPUSH
24037: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
24041: LD_EXP 33
24045: PPUSH
24046: LD_STRING DH-Ruattfirst-1
24048: PPUSH
24049: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
24053: LD_EXP 33
24057: PPUSH
24058: LD_STRING DH-Ruattfirst-2
24060: PPUSH
24061: CALL_OW 88
// end ;
24065: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
24066: LD_INT 19
24068: PPUSH
24069: LD_INT 22
24071: PUSH
24072: LD_INT 3
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PPUSH
24079: CALL_OW 70
24083: PUSH
24084: LD_EXP 28
24088: NOT
24089: AND
24090: IFFALSE 24129
24092: GO 24094
24094: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
24095: LD_INT 19
24097: PPUSH
24098: LD_INT 22
24100: PUSH
24101: LD_INT 3
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PPUSH
24108: CALL_OW 70
24112: PPUSH
24113: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
24117: LD_EXP 33
24121: PPUSH
24122: LD_STRING DH-Ruattnext-1
24124: PPUSH
24125: CALL_OW 88
// end ;
24129: END
// every 0 0$3 trigger IsDead ( Morozov ) and IsOk ( Omar ) do
24130: LD_EXP 52
24134: PPUSH
24135: CALL_OW 301
24139: PUSH
24140: LD_EXP 43
24144: PPUSH
24145: CALL_OW 302
24149: AND
24150: IFFALSE 24167
24152: GO 24154
24154: DISABLE
// SayRadio ( Omar , DOm-Morozov ) ;
24155: LD_EXP 43
24159: PPUSH
24160: LD_STRING DOm-Morozov
24162: PPUSH
24163: CALL_OW 94
24167: END
// every 0 0$1 trigger gameActive and GetResourceType ( GetBase ( arDepot ) , mat_oil ) <= 30 do
24168: LD_EXP 31
24172: PUSH
24173: LD_EXP 47
24177: PPUSH
24178: CALL_OW 274
24182: PPUSH
24183: LD_INT 2
24185: PPUSH
24186: CALL_OW 275
24190: PUSH
24191: LD_INT 30
24193: LESSEQUAL
24194: AND
24195: IFFALSE 24285
24197: GO 24199
24199: DISABLE
// begin wait ( 0 0$10 ) ;
24200: LD_INT 350
24202: PPUSH
24203: CALL_OW 67
// DialogueOn ;
24207: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
24211: LD_EXP 33
24215: PPUSH
24216: LD_STRING DH-Fuel-1
24218: PPUSH
24219: CALL_OW 88
// if IsOk ( Givi ) then
24223: LD_EXP 34
24227: PPUSH
24228: CALL_OW 302
24232: IFFALSE 24270
// begin Say ( Givi , DG-Fuel-2 ) ;
24234: LD_EXP 34
24238: PPUSH
24239: LD_STRING DG-Fuel-2
24241: PPUSH
24242: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
24246: LD_EXP 34
24250: PPUSH
24251: LD_STRING DG-Fuel-3
24253: PPUSH
24254: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
24258: LD_EXP 34
24262: PPUSH
24263: LD_STRING DG-Fuel-4
24265: PPUSH
24266: CALL_OW 88
// end ; DialogueOff ;
24270: CALL_OW 7
// Query ( QOil ) ;
24274: LD_STRING QOil
24276: PPUSH
24277: CALL_OW 97
// GoForOil ( ) ;
24281: CALL 8132 0 0
// end ;
24285: END
// every 0 0$1 trigger ( leninSpotted and omarAttack ) or IsDead ( Morozov ) do
24286: LD_EXP 14
24290: PUSH
24291: LD_EXP 23
24295: AND
24296: PUSH
24297: LD_EXP 52
24301: PPUSH
24302: CALL_OW 301
24306: OR
24307: IFFALSE 24648
24309: GO 24311
24311: DISABLE
// begin if IsDead ( Morozov ) then
24312: LD_EXP 52
24316: PPUSH
24317: CALL_OW 301
24321: IFFALSE 24332
// wait ( 1 1$45 ) else
24323: LD_INT 3675
24325: PPUSH
24326: CALL_OW 67
24330: GO 24360
// wait ( [ 9 9$30 , 8 8$00 , 7 7$40 , 6 6$30 ] [ Difficulty ] ) ;
24332: LD_INT 19950
24334: PUSH
24335: LD_INT 16800
24337: PUSH
24338: LD_INT 16100
24340: PUSH
24341: LD_INT 13650
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: PUSH
24350: LD_OWVAR 67
24354: ARRAY
24355: PPUSH
24356: CALL_OW 67
// DialogueOn ;
24360: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
24364: LD_EXP 41
24368: PPUSH
24369: LD_STRING DShar-End-1
24371: PPUSH
24372: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
24376: LD_EXP 33
24380: PPUSH
24381: LD_STRING DH-End-2
24383: PPUSH
24384: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
24388: LD_EXP 41
24392: PPUSH
24393: LD_STRING DShar-End-3
24395: PPUSH
24396: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
24400: LD_EXP 33
24404: PPUSH
24405: LD_STRING DH-End-4
24407: PPUSH
24408: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
24412: LD_EXP 41
24416: PPUSH
24417: LD_STRING DShar-End-5
24419: PPUSH
24420: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
24424: LD_EXP 41
24428: PPUSH
24429: LD_STRING DShar-End-6
24431: PPUSH
24432: CALL_OW 94
// dwait ( 0 0$2 ) ;
24436: LD_INT 70
24438: PPUSH
24439: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
24443: LD_EXP 33
24447: PPUSH
24448: LD_STRING DH-End-7
24450: PPUSH
24451: CALL_OW 88
// DialogueOff ;
24455: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
24459: LD_STRING M6
24461: PPUSH
24462: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
24466: LD_INT 17
24468: PPUSH
24469: LD_INT 1
24471: PPUSH
24472: CALL_OW 424
// escapeAllowed := true ;
24476: LD_ADDR_EXP 24
24480: PUSH
24481: LD_INT 1
24483: ST_TO_ADDR
// wait ( 0 0$2 ) ;
24484: LD_INT 70
24486: PPUSH
24487: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
24491: LD_EXP 44
24495: PPUSH
24496: LD_STRING DKs-End-8
24498: PPUSH
24499: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
24503: LD_EXP 38
24507: PPUSH
24508: LD_STRING DK-End-10
24510: PPUSH
24511: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
24515: LD_EXP 44
24519: PPUSH
24520: LD_STRING DKs-End-9
24522: PPUSH
24523: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
24527: LD_EXP 40
24531: PPUSH
24532: LD_STRING DMar-End-11
24534: PPUSH
24535: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
24539: LD_STRING 05_DrugsTested
24541: PPUSH
24542: LD_EXP 1
24546: PPUSH
24547: CALL_OW 30
24551: IFFALSE 24565
// Say ( Mike , DM-End-12 ) ;
24553: LD_EXP 35
24557: PPUSH
24558: LD_STRING DM-End-12
24560: PPUSH
24561: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
24565: LD_EXP 42
24569: PPUSH
24570: LD_STRING DO-End-13
24572: PPUSH
24573: CALL_OW 88
// if IsOk ( Sophia ) then
24577: LD_EXP 39
24581: PPUSH
24582: CALL_OW 302
24586: IFFALSE 24612
// begin Say ( Sophia , DS-End-15 ) ;
24588: LD_EXP 39
24592: PPUSH
24593: LD_STRING DS-End-15
24595: PPUSH
24596: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
24600: LD_EXP 38
24604: PPUSH
24605: LD_STRING DK-End-16
24607: PPUSH
24608: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
24612: LD_EXP 34
24616: PPUSH
24617: LD_STRING DG-End-17
24619: PPUSH
24620: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
24624: LD_EXP 34
24628: PPUSH
24629: LD_STRING DG-End-18
24631: PPUSH
24632: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
24636: LD_EXP 34
24640: PPUSH
24641: LD_STRING DG-End-19
24643: PPUSH
24644: CALL_OW 88
// end ;
24648: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
24649: LD_EXP 24
24653: IFFALSE 24781
24655: GO 24657
24657: DISABLE
24658: LD_INT 0
24660: PPUSH
24661: PPUSH
// begin enable ;
24662: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
24663: LD_ADDR_OWVAR 47
24667: PUSH
24668: LD_STRING #X106-2
24670: PUSH
24671: LD_EXP 25
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
24680: LD_ADDR_EXP 25
24684: PUSH
24685: LD_EXP 25
24689: PUSH
24690: LD_INT 35
24692: MINUS
24693: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
24694: LD_ADDR_VAR 0 2
24698: PUSH
24699: LD_INT 17
24701: PPUSH
24702: LD_INT 22
24704: PUSH
24705: LD_INT 2
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 21
24714: PUSH
24715: LD_INT 1
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 23
24724: PUSH
24725: LD_INT 2
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: LIST
24736: PPUSH
24737: CALL_OW 71
24741: ST_TO_ADDR
// if not outsiders then
24742: LD_VAR 0 2
24746: NOT
24747: IFFALSE 24764
// begin escapeAllowed := false ;
24749: LD_ADDR_EXP 24
24753: PUSH
24754: LD_INT 0
24756: ST_TO_ADDR
// disable ;
24757: DISABLE
// MissionWin ;
24758: CALL 24784 0 0
// exit ;
24762: GO 24781
// end ; if escapeTimer <= 0 0$00 then
24764: LD_EXP 25
24768: PUSH
24769: LD_INT 0
24771: LESSEQUAL
24772: IFFALSE 24781
// YouLost ( TimeOut ) ;
24774: LD_STRING TimeOut
24776: PPUSH
24777: CALL_OW 104
// end ;
24781: PPOPN 2
24783: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
24784: LD_INT 0
24786: PPUSH
24787: PPUSH
24788: PPUSH
24789: PPUSH
24790: PPUSH
// Say ( Heike , DH-End-20 ) ;
24791: LD_EXP 33
24795: PPUSH
24796: LD_STRING DH-End-20
24798: PPUSH
24799: CALL_OW 88
// if rolfDied then
24803: LD_EXP 13
24807: IFFALSE 24822
// AddMedal ( med1 , - 1 ) else
24809: LD_STRING med1
24811: PPUSH
24812: LD_INT 1
24814: NEG
24815: PPUSH
24816: CALL_OW 101
24820: GO 24852
// if not canRolfJoin then
24822: LD_EXP 29
24826: NOT
24827: IFFALSE 24842
// AddMedal ( med1 , - 2 ) else
24829: LD_STRING med1
24831: PPUSH
24832: LD_INT 2
24834: NEG
24835: PPUSH
24836: CALL_OW 101
24840: GO 24852
// AddMedal ( med1 , 1 ) ;
24842: LD_STRING med1
24844: PPUSH
24845: LD_INT 1
24847: PPUSH
24848: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
24852: LD_EXP 22
24856: PUSH
24857: LD_EXP 16
24861: AND
24862: IFFALSE 24876
// AddMedal ( med2 , 1 ) else
24864: LD_STRING med2
24866: PPUSH
24867: LD_INT 1
24869: PPUSH
24870: CALL_OW 101
24874: GO 24925
// if omarHasVehicles then
24876: LD_EXP 22
24880: IFFALSE 24895
// AddMedal ( med2 , - 1 ) else
24882: LD_STRING med2
24884: PPUSH
24885: LD_INT 1
24887: NEG
24888: PPUSH
24889: CALL_OW 101
24893: GO 24925
// if rolfHasVehicles then
24895: LD_EXP 16
24899: IFFALSE 24914
// AddMedal ( med2 , - 2 ) else
24901: LD_STRING med2
24903: PPUSH
24904: LD_INT 2
24906: NEG
24907: PPUSH
24908: CALL_OW 101
24912: GO 24925
// AddMedal ( med2 , - 3 ) ;
24914: LD_STRING med2
24916: PPUSH
24917: LD_INT 3
24919: NEG
24920: PPUSH
24921: CALL_OW 101
// if ruLoseCounter >= [ 30 , 45 , 50 , 62 ] [ Difficulty ] and heikeLoseCounter = 0 then
24925: LD_EXP 5
24929: PUSH
24930: LD_INT 30
24932: PUSH
24933: LD_INT 45
24935: PUSH
24936: LD_INT 50
24938: PUSH
24939: LD_INT 62
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: PUSH
24948: LD_OWVAR 67
24952: ARRAY
24953: GREATEREQUAL
24954: PUSH
24955: LD_EXP 26
24959: PUSH
24960: LD_INT 0
24962: EQUAL
24963: AND
24964: IFFALSE 24978
// AddMedal ( med3 , 1 ) else
24966: LD_STRING med3
24968: PPUSH
24969: LD_INT 1
24971: PPUSH
24972: CALL_OW 101
24976: GO 25008
// if heikeLoseCounter then
24978: LD_EXP 26
24982: IFFALSE 24997
// AddMedal ( med3 , - 2 ) else
24984: LD_STRING med3
24986: PPUSH
24987: LD_INT 2
24989: NEG
24990: PPUSH
24991: CALL_OW 101
24995: GO 25008
// AddMedal ( med3 , - 1 ) ;
24997: LD_STRING med3
24999: PPUSH
25000: LD_INT 1
25002: NEG
25003: PPUSH
25004: CALL_OW 101
// GiveMedals ( MAIN ) ;
25008: LD_STRING MAIN
25010: PPUSH
25011: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
25015: LD_INT 22
25017: PUSH
25018: LD_INT 2
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 23
25027: PUSH
25028: LD_INT 2
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 21
25037: PUSH
25038: LD_INT 1
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: LIST
25049: PPUSH
25050: CALL_OW 69
25054: PPUSH
25055: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
25059: LD_EXP 33
25063: PPUSH
25064: LD_STRING 06_Heike
25066: PPUSH
25067: CALL_OW 38
// if Aviradze then
25071: LD_EXP 45
25075: IFFALSE 25089
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
25077: LD_EXP 45
25081: PPUSH
25082: LD_STRING 06_Aviradze
25084: PPUSH
25085: CALL_OW 38
// if Ibrahim then
25089: LD_EXP 36
25093: IFFALSE 25107
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
25095: LD_EXP 36
25099: PPUSH
25100: LD_STRING 06_Ibrahim
25102: PPUSH
25103: CALL_OW 38
// if Kamil then
25107: LD_EXP 37
25111: IFFALSE 25125
// SaveCharacters ( Kamil , 06_Kamil ) ;
25113: LD_EXP 37
25117: PPUSH
25118: LD_STRING 06_Kamil
25120: PPUSH
25121: CALL_OW 38
// if Sophia then
25125: LD_EXP 39
25129: IFFALSE 25143
// SaveCharacters ( Sophia , 06_Sophia ) ;
25131: LD_EXP 39
25135: PPUSH
25136: LD_STRING 06_Sophia
25138: PPUSH
25139: CALL_OW 38
// if Kaia then
25143: LD_EXP 38
25147: IFFALSE 25161
// SaveCharacters ( Kaia , 06_Kaia ) ;
25149: LD_EXP 38
25153: PPUSH
25154: LD_STRING 06_Kaia
25156: PPUSH
25157: CALL_OW 38
// if Givi then
25161: LD_EXP 34
25165: IFFALSE 25179
// SaveCharacters ( Givi , 06_Givi ) ;
25167: LD_EXP 34
25171: PPUSH
25172: LD_STRING 06_Givi
25174: PPUSH
25175: CALL_OW 38
// if Mike then
25179: LD_EXP 35
25183: IFFALSE 25197
// SaveCharacters ( Mike , 06_Mike ) ;
25185: LD_EXP 35
25189: PPUSH
25190: LD_STRING 06_Mike
25192: PPUSH
25193: CALL_OW 38
// if Markov then
25197: LD_EXP 40
25201: IFFALSE 25215
// SaveCharacters ( Markov , 06_Markov ) ;
25203: LD_EXP 40
25207: PPUSH
25208: LD_STRING 06_Markov
25210: PPUSH
25211: CALL_OW 38
// if Kurt then
25215: LD_EXP 44
25219: IFFALSE 25233
// SaveCharacters ( Kurt , 06_Kurt ) ;
25221: LD_EXP 44
25225: PPUSH
25226: LD_STRING 06_Kurt
25228: PPUSH
25229: CALL_OW 38
// if heikeSecondSquad then
25233: LD_EXP 48
25237: IFFALSE 25251
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
25239: LD_EXP 48
25243: PPUSH
25244: LD_STRING 06_others
25246: PPUSH
25247: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
25251: LD_ADDR_VAR 0 3
25255: PUSH
25256: LD_INT 22
25258: PUSH
25259: LD_INT 2
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 23
25268: PUSH
25269: LD_INT 0
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PPUSH
25280: CALL_OW 69
25284: ST_TO_ADDR
// if tmp then
25285: LD_VAR 0 3
25289: IFFALSE 25303
// SaveCharacters ( tmp , 06_apes ) ;
25291: LD_VAR 0 3
25295: PPUSH
25296: LD_STRING 06_apes
25298: PPUSH
25299: CALL_OW 38
// if Rolf then
25303: LD_EXP 46
25307: IFFALSE 25358
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
25309: LD_EXP 46
25313: PPUSH
25314: LD_STRING 06_Rolf
25316: PPUSH
25317: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
25321: LD_STRING enableBioCharacter(BIO_ROLF)
25323: PPUSH
25324: CALL_OW 559
// if rolfSquad diff Rolf then
25328: LD_EXP 50
25332: PUSH
25333: LD_EXP 46
25337: DIFF
25338: IFFALSE 25358
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
25340: LD_EXP 50
25344: PUSH
25345: LD_EXP 46
25349: DIFF
25350: PPUSH
25351: LD_STRING 06_RolfSquad
25353: PPUSH
25354: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
25358: LD_ADDR_VAR 0 3
25362: PUSH
25363: LD_INT 17
25365: PPUSH
25366: LD_INT 21
25368: PUSH
25369: LD_INT 2
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PPUSH
25376: CALL_OW 70
25380: ST_TO_ADDR
// if tmp then
25381: LD_VAR 0 3
25385: IFFALSE 25679
// begin tmp2 := [ ] ;
25387: LD_ADDR_VAR 0 4
25391: PUSH
25392: EMPTY
25393: ST_TO_ADDR
// for i in tmp do
25394: LD_ADDR_VAR 0 2
25398: PUSH
25399: LD_VAR 0 3
25403: PUSH
25404: FOR_IN
25405: IFFALSE 25665
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
25407: LD_VAR 0 2
25411: PPUSH
25412: CALL_OW 264
25416: PUSH
25417: LD_INT 32
25419: PUSH
25420: LD_INT 12
25422: PUSH
25423: LD_INT 51
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: LIST
25430: IN
25431: IFFALSE 25568
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
25433: LD_ADDR_VAR 0 5
25437: PUSH
25438: LD_VAR 0 2
25442: PPUSH
25443: LD_INT 1
25445: PPUSH
25446: CALL_OW 289
25450: PUSH
25451: LD_VAR 0 2
25455: PPUSH
25456: LD_INT 2
25458: PPUSH
25459: CALL_OW 289
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
25468: LD_ADDR_VAR 0 4
25472: PUSH
25473: LD_VAR 0 4
25477: PPUSH
25478: LD_VAR 0 4
25482: PUSH
25483: LD_INT 1
25485: PLUS
25486: PPUSH
25487: LD_VAR 0 2
25491: PPUSH
25492: CALL_OW 265
25496: PUSH
25497: LD_VAR 0 2
25501: PPUSH
25502: CALL_OW 262
25506: PUSH
25507: LD_VAR 0 2
25511: PPUSH
25512: CALL_OW 263
25516: PUSH
25517: LD_VAR 0 2
25521: PPUSH
25522: CALL_OW 264
25526: PUSH
25527: LD_VAR 0 2
25531: PPUSH
25532: CALL_OW 248
25536: PUSH
25537: LD_VAR 0 2
25541: PPUSH
25542: CALL_OW 256
25546: PUSH
25547: LD_VAR 0 5
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: PPUSH
25561: CALL_OW 1
25565: ST_TO_ADDR
// end else
25566: GO 25663
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
25568: LD_ADDR_VAR 0 4
25572: PUSH
25573: LD_VAR 0 4
25577: PPUSH
25578: LD_VAR 0 4
25582: PUSH
25583: LD_INT 1
25585: PLUS
25586: PPUSH
25587: LD_VAR 0 2
25591: PPUSH
25592: CALL_OW 265
25596: PUSH
25597: LD_VAR 0 2
25601: PPUSH
25602: CALL_OW 262
25606: PUSH
25607: LD_VAR 0 2
25611: PPUSH
25612: CALL_OW 263
25616: PUSH
25617: LD_VAR 0 2
25621: PPUSH
25622: CALL_OW 264
25626: PUSH
25627: LD_VAR 0 2
25631: PPUSH
25632: CALL_OW 248
25636: PUSH
25637: LD_VAR 0 2
25641: PPUSH
25642: CALL_OW 256
25646: PUSH
25647: EMPTY
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: PPUSH
25658: CALL_OW 1
25662: ST_TO_ADDR
25663: GO 25404
25665: POP
25666: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
25667: LD_VAR 0 4
25671: PPUSH
25672: LD_STRING 06_Vehicles
25674: PPUSH
25675: CALL_OW 39
// end ; YouWin ;
25679: CALL_OW 103
// end ; end_of_file
25683: LD_VAR 0 1
25687: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
25688: LD_INT 0
25690: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
25691: LD_VAR 0 1
25695: PPUSH
25696: LD_VAR 0 2
25700: PPUSH
25701: CALL 85160 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
25705: LD_VAR 0 1
25709: PPUSH
25710: CALL_OW 255
25714: PUSH
25715: LD_INT 2
25717: EQUAL
25718: PUSH
25719: LD_OWVAR 52
25723: AND
25724: PUSH
25725: LD_VAR 0 1
25729: PPUSH
25730: CALL_OW 263
25734: PUSH
25735: LD_INT 1
25737: EQUAL
25738: AND
25739: IFFALSE 25794
// begin driver := IsDrivenBy ( vehicle ) ;
25741: LD_ADDR_VAR 0 3
25745: PUSH
25746: LD_VAR 0 1
25750: PPUSH
25751: CALL_OW 311
25755: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
25756: LD_VAR 0 1
25760: PPUSH
25761: LD_INT 211
25763: PPUSH
25764: LD_INT 101
25766: PPUSH
25767: CALL_OW 111
// AddComExitVehicle ( driver ) ;
25771: LD_VAR 0 3
25775: PPUSH
25776: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25780: LD_VAR 0 3
25784: PPUSH
25785: LD_VAR 0 2
25789: PPUSH
25790: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
25794: LD_VAR 0 1
25798: PPUSH
25799: CALL_OW 255
25803: PUSH
25804: LD_INT 3
25806: EQUAL
25807: IFFALSE 25838
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
25809: LD_ADDR_EXP 59
25813: PUSH
25814: LD_EXP 59
25818: PPUSH
25819: LD_EXP 59
25823: PUSH
25824: LD_INT 1
25826: PLUS
25827: PPUSH
25828: LD_VAR 0 1
25832: PPUSH
25833: CALL_OW 1
25837: ST_TO_ADDR
// end ;
25838: PPOPN 3
25840: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
25841: LD_VAR 0 1
25845: PPUSH
25846: CALL_OW 255
25850: PUSH
25851: LD_INT 8
25853: EQUAL
25854: PUSH
25855: LD_VAR 0 1
25859: PPUSH
25860: CALL_OW 266
25864: PUSH
25865: LD_INT 4
25867: EQUAL
25868: AND
25869: IFFALSE 25880
// ComUpgrade ( b ) ;
25871: LD_VAR 0 1
25875: PPUSH
25876: CALL_OW 146
// end ;
25880: PPOPN 1
25882: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
25883: LD_VAR 0 1
25887: PPUSH
25888: CALL 85040 0 1
// if un = Heike then
25892: LD_VAR 0 1
25896: PUSH
25897: LD_EXP 33
25901: EQUAL
25902: IFFALSE 25911
// YouLost ( Heike ) ;
25904: LD_STRING Heike
25906: PPUSH
25907: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
25911: LD_VAR 0 1
25915: PUSH
25916: LD_INT 22
25918: PUSH
25919: LD_INT 2
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 23
25928: PUSH
25929: LD_INT 2
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PPUSH
25940: CALL_OW 69
25944: IN
25945: IFFALSE 25961
// heikeLoseCounter := heikeLoseCounter + 1 ;
25947: LD_ADDR_EXP 26
25951: PUSH
25952: LD_EXP 26
25956: PUSH
25957: LD_INT 1
25959: PLUS
25960: ST_TO_ADDR
// if un = arDepot then
25961: LD_VAR 0 1
25965: PUSH
25966: LD_EXP 47
25970: EQUAL
25971: IFFALSE 25980
// YouLost ( Base ) ;
25973: LD_STRING Base
25975: PPUSH
25976: CALL_OW 104
// if un = Rolf then
25980: LD_VAR 0 1
25984: PUSH
25985: LD_EXP 46
25989: EQUAL
25990: IFFALSE 26000
// rolfDied := true ;
25992: LD_ADDR_EXP 13
25996: PUSH
25997: LD_INT 1
25999: ST_TO_ADDR
// if un in rolfSquad then
26000: LD_VAR 0 1
26004: PUSH
26005: LD_EXP 50
26009: IN
26010: IFFALSE 26028
// rolfSquad := rolfSquad diff un ;
26012: LD_ADDR_EXP 50
26016: PUSH
26017: LD_EXP 50
26021: PUSH
26022: LD_VAR 0 1
26026: DIFF
26027: ST_TO_ADDR
// if un in omarSquad then
26028: LD_VAR 0 1
26032: PUSH
26033: LD_EXP 51
26037: IN
26038: IFFALSE 26056
// omarSquad := omarSquad diff un ;
26040: LD_ADDR_EXP 51
26044: PUSH
26045: LD_EXP 51
26049: PUSH
26050: LD_VAR 0 1
26054: DIFF
26055: ST_TO_ADDR
// if GetSide ( un ) = 3 then
26056: LD_VAR 0 1
26060: PPUSH
26061: CALL_OW 255
26065: PUSH
26066: LD_INT 3
26068: EQUAL
26069: IFFALSE 26085
// ruLoseCounter := ruLoseCounter + 1 ;
26071: LD_ADDR_EXP 5
26075: PUSH
26076: LD_EXP 5
26080: PUSH
26081: LD_INT 1
26083: PLUS
26084: ST_TO_ADDR
// if un in ruAttackers then
26085: LD_VAR 0 1
26089: PUSH
26090: LD_EXP 60
26094: IN
26095: IFFALSE 26113
// ruAttackers := ruAttackers diff un ;
26097: LD_ADDR_EXP 60
26101: PUSH
26102: LD_EXP 60
26106: PUSH
26107: LD_VAR 0 1
26111: DIFF
26112: ST_TO_ADDR
// end ;
26113: PPOPN 1
26115: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
26116: LD_INT 0
26118: PPUSH
26119: PPUSH
26120: PPUSH
26121: PPUSH
// begin if GetSide ( un ) = 3 and not un in ruAttackers then
26122: LD_VAR 0 1
26126: PPUSH
26127: CALL_OW 255
26131: PUSH
26132: LD_INT 3
26134: EQUAL
26135: PUSH
26136: LD_VAR 0 1
26140: PUSH
26141: LD_EXP 60
26145: IN
26146: NOT
26147: AND
26148: IFFALSE 26644
// begin if not IsInArea ( un , ruMainBase ) then
26150: LD_VAR 0 1
26154: PPUSH
26155: LD_INT 10
26157: PPUSH
26158: CALL_OW 308
26162: NOT
26163: IFFALSE 26177
// ComMoveToArea ( un , ruMainBase ) ;
26165: LD_VAR 0 1
26169: PPUSH
26170: LD_INT 10
26172: PPUSH
26173: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
26177: LD_INT 35
26179: PPUSH
26180: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
26184: LD_VAR 0 1
26188: PPUSH
26189: CALL_OW 302
26193: NOT
26194: PUSH
26195: LD_VAR 0 1
26199: PPUSH
26200: LD_INT 10
26202: PPUSH
26203: CALL_OW 308
26207: OR
26208: IFFALSE 26177
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
26210: LD_ADDR_EXP 58
26214: PUSH
26215: LD_EXP 58
26219: PPUSH
26220: LD_EXP 58
26224: PUSH
26225: LD_INT 1
26227: PLUS
26228: PPUSH
26229: LD_VAR 0 1
26233: PPUSH
26234: CALL_OW 1
26238: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
26239: LD_ADDR_VAR 0 8
26243: PUSH
26244: LD_INT 72
26246: PUSH
26247: LD_INT 12
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: ST_TO_ADDR
// if tmp then
26254: LD_VAR 0 8
26258: IFFALSE 26373
// for i in tmp do
26260: LD_ADDR_VAR 0 5
26264: PUSH
26265: LD_VAR 0 8
26269: PUSH
26270: FOR_IN
26271: IFFALSE 26371
// if UnitsInside ( i ) < 6 then
26273: LD_VAR 0 5
26277: PPUSH
26278: CALL_OW 313
26282: PUSH
26283: LD_INT 6
26285: LESS
26286: IFFALSE 26369
// begin AddComEnterUnit ( un , i ) ;
26288: LD_VAR 0 1
26292: PPUSH
26293: LD_VAR 0 5
26297: PPUSH
26298: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
26302: LD_VAR 0 8
26306: PPUSH
26307: LD_INT 22
26309: PUSH
26310: LD_INT 23
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 1
26319: PPUSH
26320: LD_INT 2
26322: PPUSH
26323: CALL_OW 12
26327: ARRAY
26328: PPUSH
26329: LD_INT 1
26331: PPUSH
26332: LD_INT 1
26334: PPUSH
26335: LD_INT 44
26337: PUSH
26338: LD_INT 46
26340: PUSH
26341: LD_INT 47
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 1
26351: PPUSH
26352: LD_INT 3
26354: PPUSH
26355: CALL_OW 12
26359: ARRAY
26360: PPUSH
26361: CALL_OW 185
// exit ;
26365: POP
26366: POP
26367: GO 26644
// end ;
26369: GO 26270
26371: POP
26372: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
26373: LD_ADDR_VAR 0 8
26377: PUSH
26378: LD_INT 10
26380: PPUSH
26381: LD_INT 22
26383: PUSH
26384: LD_INT 3
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 50
26393: PUSH
26394: EMPTY
26395: LIST
26396: PUSH
26397: LD_INT 2
26399: PUSH
26400: LD_INT 30
26402: PUSH
26403: LD_INT 4
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 30
26412: PUSH
26413: LD_INT 5
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 30
26422: PUSH
26423: LD_INT 32
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 30
26432: PUSH
26433: LD_INT 31
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: LIST
26451: PPUSH
26452: CALL_OW 70
26456: ST_TO_ADDR
// if not tmp then
26457: LD_VAR 0 8
26461: NOT
26462: IFFALSE 26481
// begin ComMoveXY ( un , 83 , 133 ) ;
26464: LD_VAR 0 1
26468: PPUSH
26469: LD_INT 83
26471: PPUSH
26472: LD_INT 133
26474: PPUSH
26475: CALL_OW 111
// exit ;
26479: GO 26644
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
26481: LD_ADDR_VAR 0 6
26485: PUSH
26486: LD_VAR 0 1
26490: PPUSH
26491: LD_VAR 0 8
26495: PPUSH
26496: LD_INT 1
26498: PPUSH
26499: LD_INT 1
26501: PPUSH
26502: CALL 33398 0 4
26506: PUSH
26507: FOR_IN
26508: IFFALSE 26642
// begin case GetBType ( b ) of b_armoury , b_barracks :
26510: LD_VAR 0 6
26514: PPUSH
26515: CALL_OW 266
26519: PUSH
26520: LD_INT 4
26522: DOUBLE
26523: EQUAL
26524: IFTRUE 26534
26526: LD_INT 5
26528: DOUBLE
26529: EQUAL
26530: IFTRUE 26534
26532: GO 26545
26534: POP
// p := 6 ; b_breastwork , b_bunker :
26535: LD_ADDR_VAR 0 7
26539: PUSH
26540: LD_INT 6
26542: ST_TO_ADDR
26543: GO 26571
26545: LD_INT 31
26547: DOUBLE
26548: EQUAL
26549: IFTRUE 26559
26551: LD_INT 32
26553: DOUBLE
26554: EQUAL
26555: IFTRUE 26559
26557: GO 26570
26559: POP
// p := 1 ; end ;
26560: LD_ADDR_VAR 0 7
26564: PUSH
26565: LD_INT 1
26567: ST_TO_ADDR
26568: GO 26571
26570: POP
// if UnitsInside ( b ) < p then
26571: LD_VAR 0 6
26575: PPUSH
26576: CALL_OW 313
26580: PUSH
26581: LD_VAR 0 7
26585: LESS
26586: IFFALSE 26640
// begin ComEnterUnit ( un , b ) ;
26588: LD_VAR 0 1
26592: PPUSH
26593: LD_VAR 0 6
26597: PPUSH
26598: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
26602: LD_VAR 0 6
26606: PPUSH
26607: CALL_OW 266
26611: PUSH
26612: LD_INT 4
26614: PUSH
26615: LD_INT 5
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: IN
26622: IFFALSE 26636
// AddComChangeProfession ( un , class_soldier ) ;
26624: LD_VAR 0 1
26628: PPUSH
26629: LD_INT 1
26631: PPUSH
26632: CALL_OW 183
// exit ;
26636: POP
26637: POP
26638: GO 26644
// end ; end ;
26640: GO 26507
26642: POP
26643: POP
// end ; end ;
26644: PPOPN 8
26646: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
26647: LD_INT 0
26649: PPUSH
26650: PPUSH
26651: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
26652: LD_VAR 0 2
26656: PPUSH
26657: CALL_OW 255
26661: PUSH
26662: LD_INT 3
26664: EQUAL
26665: PUSH
26666: LD_VAR 0 2
26670: PPUSH
26671: CALL_OW 257
26675: PUSH
26676: LD_INT 1
26678: EQUAL
26679: AND
26680: PUSH
26681: LD_VAR 0 2
26685: PUSH
26686: LD_EXP 58
26690: IN
26691: NOT
26692: AND
26693: IFFALSE 27006
// begin ComMoveToArea ( un , ruMainBase ) ;
26695: LD_VAR 0 2
26699: PPUSH
26700: LD_INT 10
26702: PPUSH
26703: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
26707: LD_INT 35
26709: PPUSH
26710: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
26714: LD_VAR 0 2
26718: PPUSH
26719: CALL_OW 302
26723: NOT
26724: PUSH
26725: LD_VAR 0 2
26729: PPUSH
26730: LD_INT 10
26732: PPUSH
26733: CALL_OW 308
26737: OR
26738: IFFALSE 26707
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
26740: LD_ADDR_EXP 58
26744: PUSH
26745: LD_EXP 58
26749: PPUSH
26750: LD_EXP 58
26754: PUSH
26755: LD_INT 1
26757: PLUS
26758: PPUSH
26759: LD_VAR 0 2
26763: PPUSH
26764: CALL_OW 1
26768: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
26769: LD_ADDR_VAR 0 4
26773: PUSH
26774: LD_INT 10
26776: PPUSH
26777: LD_INT 22
26779: PUSH
26780: LD_INT 3
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 50
26789: PUSH
26790: EMPTY
26791: LIST
26792: PUSH
26793: LD_INT 2
26795: PUSH
26796: LD_INT 30
26798: PUSH
26799: LD_INT 4
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 30
26808: PUSH
26809: LD_INT 5
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 30
26818: PUSH
26819: LD_INT 32
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 30
26828: PUSH
26829: LD_INT 31
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: LIST
26847: PPUSH
26848: CALL_OW 70
26852: ST_TO_ADDR
// if not tmp then
26853: LD_VAR 0 4
26857: NOT
26858: IFFALSE 26877
// begin ComMoveXY ( un , 83 , 133 ) ;
26860: LD_VAR 0 2
26864: PPUSH
26865: LD_INT 83
26867: PPUSH
26868: LD_INT 133
26870: PPUSH
26871: CALL_OW 111
// exit ;
26875: GO 27255
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
26877: LD_ADDR_VAR 0 5
26881: PUSH
26882: LD_VAR 0 2
26886: PPUSH
26887: LD_VAR 0 4
26891: PPUSH
26892: LD_INT 1
26894: PPUSH
26895: LD_INT 1
26897: PPUSH
26898: CALL 33398 0 4
26902: PUSH
26903: FOR_IN
26904: IFFALSE 27004
// begin case GetBType ( b ) of b_armoury , b_barracks :
26906: LD_VAR 0 5
26910: PPUSH
26911: CALL_OW 266
26915: PUSH
26916: LD_INT 4
26918: DOUBLE
26919: EQUAL
26920: IFTRUE 26930
26922: LD_INT 5
26924: DOUBLE
26925: EQUAL
26926: IFTRUE 26930
26928: GO 26941
26930: POP
// p := 6 ; b_breastwork , b_bunker :
26931: LD_ADDR_VAR 0 3
26935: PUSH
26936: LD_INT 6
26938: ST_TO_ADDR
26939: GO 26967
26941: LD_INT 31
26943: DOUBLE
26944: EQUAL
26945: IFTRUE 26955
26947: LD_INT 32
26949: DOUBLE
26950: EQUAL
26951: IFTRUE 26955
26953: GO 26966
26955: POP
// p := 1 ; end ;
26956: LD_ADDR_VAR 0 3
26960: PUSH
26961: LD_INT 1
26963: ST_TO_ADDR
26964: GO 26967
26966: POP
// if UnitsInside ( b ) < p then
26967: LD_VAR 0 5
26971: PPUSH
26972: CALL_OW 313
26976: PUSH
26977: LD_VAR 0 3
26981: LESS
26982: IFFALSE 27002
// begin ComEnterUnit ( un , b ) ;
26984: LD_VAR 0 2
26988: PPUSH
26989: LD_VAR 0 5
26993: PPUSH
26994: CALL_OW 120
// exit ;
26998: POP
26999: POP
27000: GO 27255
// end ; end ;
27002: GO 26903
27004: POP
27005: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
27006: LD_VAR 0 2
27010: PUSH
27011: LD_EXP 58
27015: IN
27016: PUSH
27017: LD_VAR 0 2
27021: PPUSH
27022: CALL_OW 257
27026: PUSH
27027: LD_INT 1
27029: EQUAL
27030: AND
27031: IFFALSE 27255
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
27033: LD_ADDR_VAR 0 4
27037: PUSH
27038: LD_INT 10
27040: PPUSH
27041: LD_INT 22
27043: PUSH
27044: LD_INT 3
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 50
27053: PUSH
27054: EMPTY
27055: LIST
27056: PUSH
27057: LD_INT 2
27059: PUSH
27060: LD_INT 30
27062: PUSH
27063: LD_INT 4
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 30
27072: PUSH
27073: LD_INT 5
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 30
27082: PUSH
27083: LD_INT 32
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 30
27092: PUSH
27093: LD_INT 31
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: LIST
27111: PPUSH
27112: CALL_OW 70
27116: ST_TO_ADDR
// if not tmp then
27117: LD_VAR 0 4
27121: NOT
27122: IFFALSE 27126
// exit ;
27124: GO 27255
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
27126: LD_ADDR_VAR 0 5
27130: PUSH
27131: LD_VAR 0 2
27135: PPUSH
27136: LD_VAR 0 4
27140: PPUSH
27141: LD_INT 1
27143: PPUSH
27144: LD_INT 1
27146: PPUSH
27147: CALL 33398 0 4
27151: PUSH
27152: FOR_IN
27153: IFFALSE 27253
// begin case GetBType ( b ) of b_armoury , b_barracks :
27155: LD_VAR 0 5
27159: PPUSH
27160: CALL_OW 266
27164: PUSH
27165: LD_INT 4
27167: DOUBLE
27168: EQUAL
27169: IFTRUE 27179
27171: LD_INT 5
27173: DOUBLE
27174: EQUAL
27175: IFTRUE 27179
27177: GO 27190
27179: POP
// p := 6 ; b_breastwork , b_bunker :
27180: LD_ADDR_VAR 0 3
27184: PUSH
27185: LD_INT 6
27187: ST_TO_ADDR
27188: GO 27216
27190: LD_INT 31
27192: DOUBLE
27193: EQUAL
27194: IFTRUE 27204
27196: LD_INT 32
27198: DOUBLE
27199: EQUAL
27200: IFTRUE 27204
27202: GO 27215
27204: POP
// p := 1 ; end ;
27205: LD_ADDR_VAR 0 3
27209: PUSH
27210: LD_INT 1
27212: ST_TO_ADDR
27213: GO 27216
27215: POP
// if UnitsInside ( b ) < p then
27216: LD_VAR 0 5
27220: PPUSH
27221: CALL_OW 313
27225: PUSH
27226: LD_VAR 0 3
27230: LESS
27231: IFFALSE 27251
// begin ComEnterUnit ( un , b ) ;
27233: LD_VAR 0 2
27237: PPUSH
27238: LD_VAR 0 5
27242: PPUSH
27243: CALL_OW 120
// exit ;
27247: POP
27248: POP
27249: GO 27255
// end ; end ;
27251: GO 27152
27253: POP
27254: POP
// end ; end ;
27255: PPOPN 5
27257: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
27258: LD_VAR 0 1
27262: PUSH
27263: LD_INT 2
27265: EQUAL
27266: PUSH
27267: LD_VAR 0 2
27271: PUSH
27272: LD_INT 5
27274: PUSH
27275: LD_INT 8
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: IN
27282: AND
27283: IFFALSE 27292
// YouLost ( FriendlyFire ) ;
27285: LD_STRING FriendlyFire
27287: PPUSH
27288: CALL_OW 104
// end ;
27292: PPOPN 2
27294: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
27295: LD_VAR 0 1
27299: PPUSH
27300: CALL_OW 255
27304: PUSH
27305: LD_INT 8
27307: EQUAL
27308: PUSH
27309: LD_VAR 0 1
27313: PPUSH
27314: CALL_OW 266
27318: PUSH
27319: LD_INT 5
27321: EQUAL
27322: AND
27323: IFFALSE 27337
// SetClass ( unit , class_mortar ) ;
27325: LD_VAR 0 2
27329: PPUSH
27330: LD_INT 8
27332: PPUSH
27333: CALL_OW 336
// end ; end_of_file
27337: PPOPN 2
27339: END
// every 0 0$35 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 400 , 320 , 260 , 230 ] [ Difficulty ] do
27340: LD_INT 6
27342: PPUSH
27343: LD_INT 1
27345: PPUSH
27346: CALL_OW 287
27350: PUSH
27351: LD_INT 400
27353: PUSH
27354: LD_INT 320
27356: PUSH
27357: LD_INT 260
27359: PUSH
27360: LD_INT 230
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: PUSH
27369: LD_OWVAR 67
27373: ARRAY
27374: LESS
27375: IFFALSE 27402
27377: GO 27379
27379: DISABLE
// begin enable ;
27380: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
27381: LD_INT 1
27383: PPUSH
27384: LD_INT 5
27386: PPUSH
27387: CALL_OW 12
27391: PPUSH
27392: LD_INT 6
27394: PPUSH
27395: LD_INT 1
27397: PPUSH
27398: CALL_OW 55
// end ;
27402: END
// every 0 0$15 trigger Prob ( 50 ) and tick < [ 18 18$00 , 17 17$00 , 16 16$00 , 15 15$00 ] [ Difficulty ] do
27403: LD_INT 50
27405: PPUSH
27406: CALL_OW 13
27410: PUSH
27411: LD_OWVAR 1
27415: PUSH
27416: LD_INT 37800
27418: PUSH
27419: LD_INT 35700
27421: PUSH
27422: LD_INT 33600
27424: PUSH
27425: LD_INT 31500
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: PUSH
27434: LD_OWVAR 67
27438: ARRAY
27439: LESS
27440: AND
27441: IFFALSE 27483
27443: GO 27445
27445: DISABLE
// begin enable ;
27446: ENABLE
// wait ( rand ( 0 0$1 , 0 0$10 ) ) ;
27447: LD_INT 35
27449: PPUSH
27450: LD_INT 350
27452: PPUSH
27453: CALL_OW 12
27457: PPUSH
27458: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , southCrates , true ) ;
27462: LD_INT 1
27464: PPUSH
27465: LD_INT 5
27467: PPUSH
27468: CALL_OW 12
27472: PPUSH
27473: LD_INT 21
27475: PPUSH
27476: LD_INT 1
27478: PPUSH
27479: CALL_OW 55
// end ; end_of_file
27483: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
27484: LD_EXP 18
27488: PUSH
27489: LD_EXP 20
27493: AND
27494: PUSH
27495: LD_EXP 17
27499: PUSH
27500: LD_EXP 19
27504: AND
27505: OR
27506: IFFALSE 27825
27508: GO 27510
27510: DISABLE
// begin enable ;
27511: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
27512: LD_EXP 18
27516: PUSH
27517: LD_EXP 20
27521: AND
27522: PUSH
27523: LD_EXP 17
27527: PUSH
27528: LD_EXP 19
27532: AND
27533: AND
27534: IFFALSE 27671
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
27536: LD_ADDR_OWVAR 47
27540: PUSH
27541: LD_STRING #X106-1a
27543: PUSH
27544: LD_EXP 21
27548: PUSH
27549: LD_INT 16
27551: PPUSH
27552: LD_INT 22
27554: PUSH
27555: LD_INT 2
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 21
27564: PUSH
27565: LD_INT 2
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 33
27574: PUSH
27575: LD_INT 1
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 58
27584: PUSH
27585: EMPTY
27586: LIST
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: PPUSH
27594: CALL_OW 70
27598: MINUS
27599: PPUSH
27600: CALL 67461 0 1
27604: PUSH
27605: LD_STRING #X106-3a
27607: PUSH
27608: LD_EXP 20
27612: PUSH
27613: LD_STRING #X106-1
27615: PUSH
27616: LD_EXP 50
27620: PUSH
27621: LD_INT 0
27623: PLUS
27624: PUSH
27625: LD_EXP 50
27629: PPUSH
27630: LD_INT 55
27632: PUSH
27633: EMPTY
27634: LIST
27635: PPUSH
27636: CALL_OW 72
27640: PUSH
27641: LD_INT 0
27643: PLUS
27644: MINUS
27645: PPUSH
27646: CALL 67461 0 1
27650: PUSH
27651: LD_STRING #X106-3
27653: PUSH
27654: LD_EXP 19
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: ST_TO_ADDR
// end else
27669: GO 27825
// if omarWantVehicles and omarWaitingForVehiclesTimer then
27671: LD_EXP 18
27675: PUSH
27676: LD_EXP 20
27680: AND
27681: IFFALSE 27768
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
27683: LD_ADDR_OWVAR 47
27687: PUSH
27688: LD_STRING #X106-1a
27690: PUSH
27691: LD_EXP 21
27695: PUSH
27696: LD_INT 16
27698: PPUSH
27699: LD_INT 22
27701: PUSH
27702: LD_INT 2
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 21
27711: PUSH
27712: LD_INT 2
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 33
27721: PUSH
27722: LD_INT 1
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 58
27731: PUSH
27732: EMPTY
27733: LIST
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: PPUSH
27741: CALL_OW 70
27745: MINUS
27746: PPUSH
27747: CALL 67461 0 1
27751: PUSH
27752: LD_STRING #X106-3a
27754: PUSH
27755: LD_EXP 20
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: ST_TO_ADDR
// end else
27766: GO 27825
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
27768: LD_ADDR_OWVAR 47
27772: PUSH
27773: LD_STRING #X106-1
27775: PUSH
27776: LD_EXP 50
27780: PUSH
27781: LD_INT 0
27783: PLUS
27784: PUSH
27785: LD_EXP 50
27789: PPUSH
27790: LD_INT 55
27792: PUSH
27793: EMPTY
27794: LIST
27795: PPUSH
27796: CALL_OW 72
27800: PUSH
27801: LD_INT 0
27803: PLUS
27804: MINUS
27805: PPUSH
27806: CALL 67461 0 1
27810: PUSH
27811: LD_STRING #X106-3
27813: PUSH
27814: LD_EXP 19
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: ST_TO_ADDR
// end ; end ; end_of_file
27825: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27826: LD_INT 0
27828: PPUSH
27829: PPUSH
// if exist_mode then
27830: LD_VAR 0 2
27834: IFFALSE 27859
// unit := CreateCharacter ( prefix & ident ) else
27836: LD_ADDR_VAR 0 5
27840: PUSH
27841: LD_VAR 0 3
27845: PUSH
27846: LD_VAR 0 1
27850: STR
27851: PPUSH
27852: CALL_OW 34
27856: ST_TO_ADDR
27857: GO 27874
// unit := NewCharacter ( ident ) ;
27859: LD_ADDR_VAR 0 5
27863: PUSH
27864: LD_VAR 0 1
27868: PPUSH
27869: CALL_OW 25
27873: ST_TO_ADDR
// result := unit ;
27874: LD_ADDR_VAR 0 4
27878: PUSH
27879: LD_VAR 0 5
27883: ST_TO_ADDR
// end ;
27884: LD_VAR 0 4
27888: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27889: LD_INT 0
27891: PPUSH
27892: PPUSH
// if not side or not nation then
27893: LD_VAR 0 1
27897: NOT
27898: PUSH
27899: LD_VAR 0 2
27903: NOT
27904: OR
27905: IFFALSE 27909
// exit ;
27907: GO 28677
// case nation of nation_american :
27909: LD_VAR 0 2
27913: PUSH
27914: LD_INT 1
27916: DOUBLE
27917: EQUAL
27918: IFTRUE 27922
27920: GO 28136
27922: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27923: LD_ADDR_VAR 0 4
27927: PUSH
27928: LD_INT 35
27930: PUSH
27931: LD_INT 45
27933: PUSH
27934: LD_INT 46
27936: PUSH
27937: LD_INT 47
27939: PUSH
27940: LD_INT 82
27942: PUSH
27943: LD_INT 83
27945: PUSH
27946: LD_INT 84
27948: PUSH
27949: LD_INT 85
27951: PUSH
27952: LD_INT 86
27954: PUSH
27955: LD_INT 1
27957: PUSH
27958: LD_INT 2
27960: PUSH
27961: LD_INT 6
27963: PUSH
27964: LD_INT 15
27966: PUSH
27967: LD_INT 16
27969: PUSH
27970: LD_INT 7
27972: PUSH
27973: LD_INT 12
27975: PUSH
27976: LD_INT 13
27978: PUSH
27979: LD_INT 10
27981: PUSH
27982: LD_INT 14
27984: PUSH
27985: LD_INT 20
27987: PUSH
27988: LD_INT 21
27990: PUSH
27991: LD_INT 22
27993: PUSH
27994: LD_INT 25
27996: PUSH
27997: LD_INT 32
27999: PUSH
28000: LD_INT 27
28002: PUSH
28003: LD_INT 36
28005: PUSH
28006: LD_INT 69
28008: PUSH
28009: LD_INT 39
28011: PUSH
28012: LD_INT 34
28014: PUSH
28015: LD_INT 40
28017: PUSH
28018: LD_INT 48
28020: PUSH
28021: LD_INT 49
28023: PUSH
28024: LD_INT 50
28026: PUSH
28027: LD_INT 51
28029: PUSH
28030: LD_INT 52
28032: PUSH
28033: LD_INT 53
28035: PUSH
28036: LD_INT 54
28038: PUSH
28039: LD_INT 55
28041: PUSH
28042: LD_INT 56
28044: PUSH
28045: LD_INT 57
28047: PUSH
28048: LD_INT 58
28050: PUSH
28051: LD_INT 59
28053: PUSH
28054: LD_INT 60
28056: PUSH
28057: LD_INT 61
28059: PUSH
28060: LD_INT 62
28062: PUSH
28063: LD_INT 80
28065: PUSH
28066: LD_INT 82
28068: PUSH
28069: LD_INT 83
28071: PUSH
28072: LD_INT 84
28074: PUSH
28075: LD_INT 85
28077: PUSH
28078: LD_INT 86
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: ST_TO_ADDR
28134: GO 28601
28136: LD_INT 2
28138: DOUBLE
28139: EQUAL
28140: IFTRUE 28144
28142: GO 28370
28144: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28145: LD_ADDR_VAR 0 4
28149: PUSH
28150: LD_INT 35
28152: PUSH
28153: LD_INT 45
28155: PUSH
28156: LD_INT 46
28158: PUSH
28159: LD_INT 47
28161: PUSH
28162: LD_INT 82
28164: PUSH
28165: LD_INT 83
28167: PUSH
28168: LD_INT 84
28170: PUSH
28171: LD_INT 85
28173: PUSH
28174: LD_INT 87
28176: PUSH
28177: LD_INT 70
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: LD_INT 11
28185: PUSH
28186: LD_INT 3
28188: PUSH
28189: LD_INT 4
28191: PUSH
28192: LD_INT 5
28194: PUSH
28195: LD_INT 6
28197: PUSH
28198: LD_INT 15
28200: PUSH
28201: LD_INT 18
28203: PUSH
28204: LD_INT 7
28206: PUSH
28207: LD_INT 17
28209: PUSH
28210: LD_INT 8
28212: PUSH
28213: LD_INT 20
28215: PUSH
28216: LD_INT 21
28218: PUSH
28219: LD_INT 22
28221: PUSH
28222: LD_INT 72
28224: PUSH
28225: LD_INT 26
28227: PUSH
28228: LD_INT 69
28230: PUSH
28231: LD_INT 39
28233: PUSH
28234: LD_INT 40
28236: PUSH
28237: LD_INT 41
28239: PUSH
28240: LD_INT 42
28242: PUSH
28243: LD_INT 43
28245: PUSH
28246: LD_INT 48
28248: PUSH
28249: LD_INT 49
28251: PUSH
28252: LD_INT 50
28254: PUSH
28255: LD_INT 51
28257: PUSH
28258: LD_INT 52
28260: PUSH
28261: LD_INT 53
28263: PUSH
28264: LD_INT 54
28266: PUSH
28267: LD_INT 55
28269: PUSH
28270: LD_INT 56
28272: PUSH
28273: LD_INT 60
28275: PUSH
28276: LD_INT 61
28278: PUSH
28279: LD_INT 62
28281: PUSH
28282: LD_INT 66
28284: PUSH
28285: LD_INT 67
28287: PUSH
28288: LD_INT 68
28290: PUSH
28291: LD_INT 81
28293: PUSH
28294: LD_INT 82
28296: PUSH
28297: LD_INT 83
28299: PUSH
28300: LD_INT 84
28302: PUSH
28303: LD_INT 85
28305: PUSH
28306: LD_INT 87
28308: PUSH
28309: LD_INT 88
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: ST_TO_ADDR
28368: GO 28601
28370: LD_INT 3
28372: DOUBLE
28373: EQUAL
28374: IFTRUE 28378
28376: GO 28600
28378: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28379: LD_ADDR_VAR 0 4
28383: PUSH
28384: LD_INT 46
28386: PUSH
28387: LD_INT 47
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: LD_INT 2
28395: PUSH
28396: LD_INT 82
28398: PUSH
28399: LD_INT 83
28401: PUSH
28402: LD_INT 84
28404: PUSH
28405: LD_INT 85
28407: PUSH
28408: LD_INT 86
28410: PUSH
28411: LD_INT 11
28413: PUSH
28414: LD_INT 9
28416: PUSH
28417: LD_INT 20
28419: PUSH
28420: LD_INT 19
28422: PUSH
28423: LD_INT 21
28425: PUSH
28426: LD_INT 24
28428: PUSH
28429: LD_INT 22
28431: PUSH
28432: LD_INT 25
28434: PUSH
28435: LD_INT 28
28437: PUSH
28438: LD_INT 29
28440: PUSH
28441: LD_INT 30
28443: PUSH
28444: LD_INT 31
28446: PUSH
28447: LD_INT 37
28449: PUSH
28450: LD_INT 38
28452: PUSH
28453: LD_INT 32
28455: PUSH
28456: LD_INT 27
28458: PUSH
28459: LD_INT 33
28461: PUSH
28462: LD_INT 69
28464: PUSH
28465: LD_INT 39
28467: PUSH
28468: LD_INT 34
28470: PUSH
28471: LD_INT 40
28473: PUSH
28474: LD_INT 71
28476: PUSH
28477: LD_INT 23
28479: PUSH
28480: LD_INT 44
28482: PUSH
28483: LD_INT 48
28485: PUSH
28486: LD_INT 49
28488: PUSH
28489: LD_INT 50
28491: PUSH
28492: LD_INT 51
28494: PUSH
28495: LD_INT 52
28497: PUSH
28498: LD_INT 53
28500: PUSH
28501: LD_INT 54
28503: PUSH
28504: LD_INT 55
28506: PUSH
28507: LD_INT 56
28509: PUSH
28510: LD_INT 57
28512: PUSH
28513: LD_INT 58
28515: PUSH
28516: LD_INT 59
28518: PUSH
28519: LD_INT 63
28521: PUSH
28522: LD_INT 64
28524: PUSH
28525: LD_INT 65
28527: PUSH
28528: LD_INT 82
28530: PUSH
28531: LD_INT 83
28533: PUSH
28534: LD_INT 84
28536: PUSH
28537: LD_INT 85
28539: PUSH
28540: LD_INT 86
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: ST_TO_ADDR
28598: GO 28601
28600: POP
// if state > - 1 and state < 3 then
28601: LD_VAR 0 3
28605: PUSH
28606: LD_INT 1
28608: NEG
28609: GREATER
28610: PUSH
28611: LD_VAR 0 3
28615: PUSH
28616: LD_INT 3
28618: LESS
28619: AND
28620: IFFALSE 28677
// for i in result do
28622: LD_ADDR_VAR 0 5
28626: PUSH
28627: LD_VAR 0 4
28631: PUSH
28632: FOR_IN
28633: IFFALSE 28675
// if GetTech ( i , side ) <> state then
28635: LD_VAR 0 5
28639: PPUSH
28640: LD_VAR 0 1
28644: PPUSH
28645: CALL_OW 321
28649: PUSH
28650: LD_VAR 0 3
28654: NONEQUAL
28655: IFFALSE 28673
// result := result diff i ;
28657: LD_ADDR_VAR 0 4
28661: PUSH
28662: LD_VAR 0 4
28666: PUSH
28667: LD_VAR 0 5
28671: DIFF
28672: ST_TO_ADDR
28673: GO 28632
28675: POP
28676: POP
// end ;
28677: LD_VAR 0 4
28681: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28682: LD_INT 0
28684: PPUSH
28685: PPUSH
28686: PPUSH
// result := true ;
28687: LD_ADDR_VAR 0 3
28691: PUSH
28692: LD_INT 1
28694: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28695: LD_ADDR_VAR 0 5
28699: PUSH
28700: LD_VAR 0 2
28704: PPUSH
28705: CALL_OW 480
28709: ST_TO_ADDR
// if not tmp then
28710: LD_VAR 0 5
28714: NOT
28715: IFFALSE 28719
// exit ;
28717: GO 28768
// for i in tmp do
28719: LD_ADDR_VAR 0 4
28723: PUSH
28724: LD_VAR 0 5
28728: PUSH
28729: FOR_IN
28730: IFFALSE 28766
// if GetTech ( i , side ) <> state_researched then
28732: LD_VAR 0 4
28736: PPUSH
28737: LD_VAR 0 1
28741: PPUSH
28742: CALL_OW 321
28746: PUSH
28747: LD_INT 2
28749: NONEQUAL
28750: IFFALSE 28764
// begin result := false ;
28752: LD_ADDR_VAR 0 3
28756: PUSH
28757: LD_INT 0
28759: ST_TO_ADDR
// exit ;
28760: POP
28761: POP
28762: GO 28768
// end ;
28764: GO 28729
28766: POP
28767: POP
// end ;
28768: LD_VAR 0 3
28772: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28773: LD_INT 0
28775: PPUSH
28776: PPUSH
28777: PPUSH
28778: PPUSH
28779: PPUSH
28780: PPUSH
28781: PPUSH
28782: PPUSH
28783: PPUSH
28784: PPUSH
28785: PPUSH
28786: PPUSH
28787: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28788: LD_VAR 0 1
28792: NOT
28793: PUSH
28794: LD_VAR 0 1
28798: PPUSH
28799: CALL_OW 257
28803: PUSH
28804: LD_INT 9
28806: NONEQUAL
28807: OR
28808: IFFALSE 28812
// exit ;
28810: GO 29385
// side := GetSide ( unit ) ;
28812: LD_ADDR_VAR 0 9
28816: PUSH
28817: LD_VAR 0 1
28821: PPUSH
28822: CALL_OW 255
28826: ST_TO_ADDR
// tech_space := tech_spacanom ;
28827: LD_ADDR_VAR 0 12
28831: PUSH
28832: LD_INT 29
28834: ST_TO_ADDR
// tech_time := tech_taurad ;
28835: LD_ADDR_VAR 0 13
28839: PUSH
28840: LD_INT 28
28842: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28843: LD_ADDR_VAR 0 11
28847: PUSH
28848: LD_VAR 0 1
28852: PPUSH
28853: CALL_OW 310
28857: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28858: LD_VAR 0 11
28862: PPUSH
28863: CALL_OW 247
28867: PUSH
28868: LD_INT 2
28870: EQUAL
28871: IFFALSE 28875
// exit ;
28873: GO 29385
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28875: LD_ADDR_VAR 0 8
28879: PUSH
28880: LD_INT 81
28882: PUSH
28883: LD_VAR 0 9
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 3
28894: PUSH
28895: LD_INT 21
28897: PUSH
28898: LD_INT 3
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PPUSH
28913: CALL_OW 69
28917: ST_TO_ADDR
// if not tmp then
28918: LD_VAR 0 8
28922: NOT
28923: IFFALSE 28927
// exit ;
28925: GO 29385
// if in_unit then
28927: LD_VAR 0 11
28931: IFFALSE 28955
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28933: LD_ADDR_VAR 0 10
28937: PUSH
28938: LD_VAR 0 8
28942: PPUSH
28943: LD_VAR 0 11
28947: PPUSH
28948: CALL_OW 74
28952: ST_TO_ADDR
28953: GO 28975
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28955: LD_ADDR_VAR 0 10
28959: PUSH
28960: LD_VAR 0 8
28964: PPUSH
28965: LD_VAR 0 1
28969: PPUSH
28970: CALL_OW 74
28974: ST_TO_ADDR
// if not enemy then
28975: LD_VAR 0 10
28979: NOT
28980: IFFALSE 28984
// exit ;
28982: GO 29385
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28984: LD_VAR 0 11
28988: PUSH
28989: LD_VAR 0 11
28993: PPUSH
28994: LD_VAR 0 10
28998: PPUSH
28999: CALL_OW 296
29003: PUSH
29004: LD_INT 13
29006: GREATER
29007: AND
29008: PUSH
29009: LD_VAR 0 1
29013: PPUSH
29014: LD_VAR 0 10
29018: PPUSH
29019: CALL_OW 296
29023: PUSH
29024: LD_INT 12
29026: GREATER
29027: OR
29028: IFFALSE 29032
// exit ;
29030: GO 29385
// missile := [ 1 ] ;
29032: LD_ADDR_VAR 0 14
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: EMPTY
29041: LIST
29042: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29043: LD_VAR 0 9
29047: PPUSH
29048: LD_VAR 0 12
29052: PPUSH
29053: CALL_OW 325
29057: IFFALSE 29086
// missile := Replace ( missile , missile + 1 , 2 ) ;
29059: LD_ADDR_VAR 0 14
29063: PUSH
29064: LD_VAR 0 14
29068: PPUSH
29069: LD_VAR 0 14
29073: PUSH
29074: LD_INT 1
29076: PLUS
29077: PPUSH
29078: LD_INT 2
29080: PPUSH
29081: CALL_OW 1
29085: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29086: LD_VAR 0 9
29090: PPUSH
29091: LD_VAR 0 13
29095: PPUSH
29096: CALL_OW 325
29100: PUSH
29101: LD_VAR 0 10
29105: PPUSH
29106: CALL_OW 255
29110: PPUSH
29111: LD_VAR 0 13
29115: PPUSH
29116: CALL_OW 325
29120: NOT
29121: AND
29122: IFFALSE 29151
// missile := Replace ( missile , missile + 1 , 3 ) ;
29124: LD_ADDR_VAR 0 14
29128: PUSH
29129: LD_VAR 0 14
29133: PPUSH
29134: LD_VAR 0 14
29138: PUSH
29139: LD_INT 1
29141: PLUS
29142: PPUSH
29143: LD_INT 3
29145: PPUSH
29146: CALL_OW 1
29150: ST_TO_ADDR
// if missile < 2 then
29151: LD_VAR 0 14
29155: PUSH
29156: LD_INT 2
29158: LESS
29159: IFFALSE 29163
// exit ;
29161: GO 29385
// x := GetX ( enemy ) ;
29163: LD_ADDR_VAR 0 4
29167: PUSH
29168: LD_VAR 0 10
29172: PPUSH
29173: CALL_OW 250
29177: ST_TO_ADDR
// y := GetY ( enemy ) ;
29178: LD_ADDR_VAR 0 5
29182: PUSH
29183: LD_VAR 0 10
29187: PPUSH
29188: CALL_OW 251
29192: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29193: LD_ADDR_VAR 0 6
29197: PUSH
29198: LD_VAR 0 4
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PPUSH
29207: LD_INT 1
29209: PPUSH
29210: CALL_OW 12
29214: PLUS
29215: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29216: LD_ADDR_VAR 0 7
29220: PUSH
29221: LD_VAR 0 5
29225: PUSH
29226: LD_INT 1
29228: NEG
29229: PPUSH
29230: LD_INT 1
29232: PPUSH
29233: CALL_OW 12
29237: PLUS
29238: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29239: LD_VAR 0 6
29243: PPUSH
29244: LD_VAR 0 7
29248: PPUSH
29249: CALL_OW 488
29253: NOT
29254: IFFALSE 29276
// begin _x := x ;
29256: LD_ADDR_VAR 0 6
29260: PUSH
29261: LD_VAR 0 4
29265: ST_TO_ADDR
// _y := y ;
29266: LD_ADDR_VAR 0 7
29270: PUSH
29271: LD_VAR 0 5
29275: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29276: LD_ADDR_VAR 0 3
29280: PUSH
29281: LD_INT 1
29283: PPUSH
29284: LD_VAR 0 14
29288: PPUSH
29289: CALL_OW 12
29293: ST_TO_ADDR
// case i of 1 :
29294: LD_VAR 0 3
29298: PUSH
29299: LD_INT 1
29301: DOUBLE
29302: EQUAL
29303: IFTRUE 29307
29305: GO 29324
29307: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29308: LD_VAR 0 1
29312: PPUSH
29313: LD_VAR 0 10
29317: PPUSH
29318: CALL_OW 115
29322: GO 29385
29324: LD_INT 2
29326: DOUBLE
29327: EQUAL
29328: IFTRUE 29332
29330: GO 29354
29332: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29333: LD_VAR 0 1
29337: PPUSH
29338: LD_VAR 0 6
29342: PPUSH
29343: LD_VAR 0 7
29347: PPUSH
29348: CALL_OW 153
29352: GO 29385
29354: LD_INT 3
29356: DOUBLE
29357: EQUAL
29358: IFTRUE 29362
29360: GO 29384
29362: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29363: LD_VAR 0 1
29367: PPUSH
29368: LD_VAR 0 6
29372: PPUSH
29373: LD_VAR 0 7
29377: PPUSH
29378: CALL_OW 154
29382: GO 29385
29384: POP
// end ;
29385: LD_VAR 0 2
29389: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29390: LD_INT 0
29392: PPUSH
29393: PPUSH
29394: PPUSH
29395: PPUSH
29396: PPUSH
29397: PPUSH
// if not unit or not building then
29398: LD_VAR 0 1
29402: NOT
29403: PUSH
29404: LD_VAR 0 2
29408: NOT
29409: OR
29410: IFFALSE 29414
// exit ;
29412: GO 29572
// x := GetX ( building ) ;
29414: LD_ADDR_VAR 0 5
29418: PUSH
29419: LD_VAR 0 2
29423: PPUSH
29424: CALL_OW 250
29428: ST_TO_ADDR
// y := GetY ( building ) ;
29429: LD_ADDR_VAR 0 6
29433: PUSH
29434: LD_VAR 0 2
29438: PPUSH
29439: CALL_OW 251
29443: ST_TO_ADDR
// for i = 0 to 5 do
29444: LD_ADDR_VAR 0 4
29448: PUSH
29449: DOUBLE
29450: LD_INT 0
29452: DEC
29453: ST_TO_ADDR
29454: LD_INT 5
29456: PUSH
29457: FOR_TO
29458: IFFALSE 29570
// begin _x := ShiftX ( x , i , 3 ) ;
29460: LD_ADDR_VAR 0 7
29464: PUSH
29465: LD_VAR 0 5
29469: PPUSH
29470: LD_VAR 0 4
29474: PPUSH
29475: LD_INT 3
29477: PPUSH
29478: CALL_OW 272
29482: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29483: LD_ADDR_VAR 0 8
29487: PUSH
29488: LD_VAR 0 6
29492: PPUSH
29493: LD_VAR 0 4
29497: PPUSH
29498: LD_INT 3
29500: PPUSH
29501: CALL_OW 273
29505: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29506: LD_VAR 0 7
29510: PPUSH
29511: LD_VAR 0 8
29515: PPUSH
29516: CALL_OW 488
29520: NOT
29521: IFFALSE 29525
// continue ;
29523: GO 29457
// if HexInfo ( _x , _y ) = 0 then
29525: LD_VAR 0 7
29529: PPUSH
29530: LD_VAR 0 8
29534: PPUSH
29535: CALL_OW 428
29539: PUSH
29540: LD_INT 0
29542: EQUAL
29543: IFFALSE 29568
// begin ComMoveXY ( unit , _x , _y ) ;
29545: LD_VAR 0 1
29549: PPUSH
29550: LD_VAR 0 7
29554: PPUSH
29555: LD_VAR 0 8
29559: PPUSH
29560: CALL_OW 111
// exit ;
29564: POP
29565: POP
29566: GO 29572
// end ; end ;
29568: GO 29457
29570: POP
29571: POP
// end ;
29572: LD_VAR 0 3
29576: RET
// export function ScanBase ( side , base_area ) ; begin
29577: LD_INT 0
29579: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29580: LD_ADDR_VAR 0 3
29584: PUSH
29585: LD_VAR 0 2
29589: PPUSH
29590: LD_INT 81
29592: PUSH
29593: LD_VAR 0 1
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PPUSH
29602: CALL_OW 70
29606: ST_TO_ADDR
// end ;
29607: LD_VAR 0 3
29611: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29612: LD_INT 0
29614: PPUSH
29615: PPUSH
29616: PPUSH
29617: PPUSH
// result := false ;
29618: LD_ADDR_VAR 0 2
29622: PUSH
29623: LD_INT 0
29625: ST_TO_ADDR
// side := GetSide ( unit ) ;
29626: LD_ADDR_VAR 0 3
29630: PUSH
29631: LD_VAR 0 1
29635: PPUSH
29636: CALL_OW 255
29640: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29641: LD_ADDR_VAR 0 4
29645: PUSH
29646: LD_VAR 0 1
29650: PPUSH
29651: CALL_OW 248
29655: ST_TO_ADDR
// case nat of 1 :
29656: LD_VAR 0 4
29660: PUSH
29661: LD_INT 1
29663: DOUBLE
29664: EQUAL
29665: IFTRUE 29669
29667: GO 29680
29669: POP
// tech := tech_lassight ; 2 :
29670: LD_ADDR_VAR 0 5
29674: PUSH
29675: LD_INT 12
29677: ST_TO_ADDR
29678: GO 29719
29680: LD_INT 2
29682: DOUBLE
29683: EQUAL
29684: IFTRUE 29688
29686: GO 29699
29688: POP
// tech := tech_mortar ; 3 :
29689: LD_ADDR_VAR 0 5
29693: PUSH
29694: LD_INT 41
29696: ST_TO_ADDR
29697: GO 29719
29699: LD_INT 3
29701: DOUBLE
29702: EQUAL
29703: IFTRUE 29707
29705: GO 29718
29707: POP
// tech := tech_bazooka ; end ;
29708: LD_ADDR_VAR 0 5
29712: PUSH
29713: LD_INT 44
29715: ST_TO_ADDR
29716: GO 29719
29718: POP
// if Researched ( side , tech ) then
29719: LD_VAR 0 3
29723: PPUSH
29724: LD_VAR 0 5
29728: PPUSH
29729: CALL_OW 325
29733: IFFALSE 29760
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29735: LD_ADDR_VAR 0 2
29739: PUSH
29740: LD_INT 5
29742: PUSH
29743: LD_INT 8
29745: PUSH
29746: LD_INT 9
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: LIST
29753: PUSH
29754: LD_VAR 0 4
29758: ARRAY
29759: ST_TO_ADDR
// end ;
29760: LD_VAR 0 2
29764: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29765: LD_INT 0
29767: PPUSH
29768: PPUSH
29769: PPUSH
// if not mines then
29770: LD_VAR 0 2
29774: NOT
29775: IFFALSE 29779
// exit ;
29777: GO 29923
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29779: LD_ADDR_VAR 0 5
29783: PUSH
29784: LD_INT 81
29786: PUSH
29787: LD_VAR 0 1
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 3
29798: PUSH
29799: LD_INT 21
29801: PUSH
29802: LD_INT 3
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PPUSH
29817: CALL_OW 69
29821: ST_TO_ADDR
// for i in mines do
29822: LD_ADDR_VAR 0 4
29826: PUSH
29827: LD_VAR 0 2
29831: PUSH
29832: FOR_IN
29833: IFFALSE 29921
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29835: LD_VAR 0 4
29839: PUSH
29840: LD_INT 1
29842: ARRAY
29843: PPUSH
29844: LD_VAR 0 4
29848: PUSH
29849: LD_INT 2
29851: ARRAY
29852: PPUSH
29853: CALL_OW 458
29857: NOT
29858: IFFALSE 29862
// continue ;
29860: GO 29832
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29862: LD_VAR 0 4
29866: PUSH
29867: LD_INT 1
29869: ARRAY
29870: PPUSH
29871: LD_VAR 0 4
29875: PUSH
29876: LD_INT 2
29878: ARRAY
29879: PPUSH
29880: CALL_OW 428
29884: PUSH
29885: LD_VAR 0 5
29889: IN
29890: IFFALSE 29919
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29892: LD_VAR 0 4
29896: PUSH
29897: LD_INT 1
29899: ARRAY
29900: PPUSH
29901: LD_VAR 0 4
29905: PUSH
29906: LD_INT 2
29908: ARRAY
29909: PPUSH
29910: LD_VAR 0 1
29914: PPUSH
29915: CALL_OW 456
// end ;
29919: GO 29832
29921: POP
29922: POP
// end ;
29923: LD_VAR 0 3
29927: RET
// export function Count ( array ) ; var i ; begin
29928: LD_INT 0
29930: PPUSH
29931: PPUSH
// result := 0 ;
29932: LD_ADDR_VAR 0 2
29936: PUSH
29937: LD_INT 0
29939: ST_TO_ADDR
// for i in array do
29940: LD_ADDR_VAR 0 3
29944: PUSH
29945: LD_VAR 0 1
29949: PUSH
29950: FOR_IN
29951: IFFALSE 29975
// if i then
29953: LD_VAR 0 3
29957: IFFALSE 29973
// result := result + 1 ;
29959: LD_ADDR_VAR 0 2
29963: PUSH
29964: LD_VAR 0 2
29968: PUSH
29969: LD_INT 1
29971: PLUS
29972: ST_TO_ADDR
29973: GO 29950
29975: POP
29976: POP
// end ;
29977: LD_VAR 0 2
29981: RET
// export function IsEmpty ( building ) ; begin
29982: LD_INT 0
29984: PPUSH
// if not building then
29985: LD_VAR 0 1
29989: NOT
29990: IFFALSE 29994
// exit ;
29992: GO 30037
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29994: LD_ADDR_VAR 0 2
29998: PUSH
29999: LD_VAR 0 1
30003: PUSH
30004: LD_INT 22
30006: PUSH
30007: LD_VAR 0 1
30011: PPUSH
30012: CALL_OW 255
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 58
30023: PUSH
30024: EMPTY
30025: LIST
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PPUSH
30031: CALL_OW 69
30035: IN
30036: ST_TO_ADDR
// end ;
30037: LD_VAR 0 2
30041: RET
// export function IsNotFull ( building ) ; var places ; begin
30042: LD_INT 0
30044: PPUSH
30045: PPUSH
// if not building then
30046: LD_VAR 0 1
30050: NOT
30051: IFFALSE 30055
// exit ;
30053: GO 30226
// result := false ;
30055: LD_ADDR_VAR 0 2
30059: PUSH
30060: LD_INT 0
30062: ST_TO_ADDR
// places := 0 ;
30063: LD_ADDR_VAR 0 3
30067: PUSH
30068: LD_INT 0
30070: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
30071: LD_VAR 0 1
30075: PPUSH
30076: CALL_OW 266
30080: PUSH
30081: LD_INT 0
30083: DOUBLE
30084: EQUAL
30085: IFTRUE 30143
30087: LD_INT 1
30089: DOUBLE
30090: EQUAL
30091: IFTRUE 30143
30093: LD_INT 6
30095: DOUBLE
30096: EQUAL
30097: IFTRUE 30143
30099: LD_INT 7
30101: DOUBLE
30102: EQUAL
30103: IFTRUE 30143
30105: LD_INT 8
30107: DOUBLE
30108: EQUAL
30109: IFTRUE 30143
30111: LD_INT 4
30113: DOUBLE
30114: EQUAL
30115: IFTRUE 30143
30117: LD_INT 5
30119: DOUBLE
30120: EQUAL
30121: IFTRUE 30143
30123: LD_INT 2
30125: DOUBLE
30126: EQUAL
30127: IFTRUE 30143
30129: LD_INT 3
30131: DOUBLE
30132: EQUAL
30133: IFTRUE 30143
30135: LD_INT 35
30137: DOUBLE
30138: EQUAL
30139: IFTRUE 30143
30141: GO 30154
30143: POP
// places := 6 ; b_bunker , b_breastwork :
30144: LD_ADDR_VAR 0 3
30148: PUSH
30149: LD_INT 6
30151: ST_TO_ADDR
30152: GO 30199
30154: LD_INT 32
30156: DOUBLE
30157: EQUAL
30158: IFTRUE 30168
30160: LD_INT 31
30162: DOUBLE
30163: EQUAL
30164: IFTRUE 30168
30166: GO 30179
30168: POP
// places := 1 ; b_control_tower :
30169: LD_ADDR_VAR 0 3
30173: PUSH
30174: LD_INT 1
30176: ST_TO_ADDR
30177: GO 30199
30179: LD_INT 36
30181: DOUBLE
30182: EQUAL
30183: IFTRUE 30187
30185: GO 30198
30187: POP
// places := 3 ; end ;
30188: LD_ADDR_VAR 0 3
30192: PUSH
30193: LD_INT 3
30195: ST_TO_ADDR
30196: GO 30199
30198: POP
// if places then
30199: LD_VAR 0 3
30203: IFFALSE 30226
// result := UnitsInside ( building ) < places ;
30205: LD_ADDR_VAR 0 2
30209: PUSH
30210: LD_VAR 0 1
30214: PPUSH
30215: CALL_OW 313
30219: PUSH
30220: LD_VAR 0 3
30224: LESS
30225: ST_TO_ADDR
// end ;
30226: LD_VAR 0 2
30230: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30231: LD_INT 0
30233: PPUSH
30234: PPUSH
30235: PPUSH
30236: PPUSH
// tmp := [ ] ;
30237: LD_ADDR_VAR 0 3
30241: PUSH
30242: EMPTY
30243: ST_TO_ADDR
// list := [ ] ;
30244: LD_ADDR_VAR 0 5
30248: PUSH
30249: EMPTY
30250: ST_TO_ADDR
// for i = 16 to 25 do
30251: LD_ADDR_VAR 0 4
30255: PUSH
30256: DOUBLE
30257: LD_INT 16
30259: DEC
30260: ST_TO_ADDR
30261: LD_INT 25
30263: PUSH
30264: FOR_TO
30265: IFFALSE 30338
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30267: LD_ADDR_VAR 0 3
30271: PUSH
30272: LD_VAR 0 3
30276: PUSH
30277: LD_INT 22
30279: PUSH
30280: LD_VAR 0 1
30284: PPUSH
30285: CALL_OW 255
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 91
30296: PUSH
30297: LD_VAR 0 1
30301: PUSH
30302: LD_INT 6
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 30
30312: PUSH
30313: LD_VAR 0 4
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: LIST
30326: PUSH
30327: EMPTY
30328: LIST
30329: PPUSH
30330: CALL_OW 69
30334: ADD
30335: ST_TO_ADDR
30336: GO 30264
30338: POP
30339: POP
// for i = 1 to tmp do
30340: LD_ADDR_VAR 0 4
30344: PUSH
30345: DOUBLE
30346: LD_INT 1
30348: DEC
30349: ST_TO_ADDR
30350: LD_VAR 0 3
30354: PUSH
30355: FOR_TO
30356: IFFALSE 30444
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30358: LD_ADDR_VAR 0 5
30362: PUSH
30363: LD_VAR 0 5
30367: PUSH
30368: LD_VAR 0 3
30372: PUSH
30373: LD_VAR 0 4
30377: ARRAY
30378: PPUSH
30379: CALL_OW 266
30383: PUSH
30384: LD_VAR 0 3
30388: PUSH
30389: LD_VAR 0 4
30393: ARRAY
30394: PPUSH
30395: CALL_OW 250
30399: PUSH
30400: LD_VAR 0 3
30404: PUSH
30405: LD_VAR 0 4
30409: ARRAY
30410: PPUSH
30411: CALL_OW 251
30415: PUSH
30416: LD_VAR 0 3
30420: PUSH
30421: LD_VAR 0 4
30425: ARRAY
30426: PPUSH
30427: CALL_OW 254
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: PUSH
30438: EMPTY
30439: LIST
30440: ADD
30441: ST_TO_ADDR
30442: GO 30355
30444: POP
30445: POP
// result := list ;
30446: LD_ADDR_VAR 0 2
30450: PUSH
30451: LD_VAR 0 5
30455: ST_TO_ADDR
// end ;
30456: LD_VAR 0 2
30460: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30461: LD_INT 0
30463: PPUSH
30464: PPUSH
30465: PPUSH
30466: PPUSH
30467: PPUSH
30468: PPUSH
30469: PPUSH
// if not factory then
30470: LD_VAR 0 1
30474: NOT
30475: IFFALSE 30479
// exit ;
30477: GO 31072
// if control = control_apeman then
30479: LD_VAR 0 4
30483: PUSH
30484: LD_INT 5
30486: EQUAL
30487: IFFALSE 30596
// begin tmp := UnitsInside ( factory ) ;
30489: LD_ADDR_VAR 0 8
30493: PUSH
30494: LD_VAR 0 1
30498: PPUSH
30499: CALL_OW 313
30503: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30504: LD_VAR 0 8
30508: PPUSH
30509: LD_INT 25
30511: PUSH
30512: LD_INT 12
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PPUSH
30519: CALL_OW 72
30523: NOT
30524: IFFALSE 30534
// control := control_manual ;
30526: LD_ADDR_VAR 0 4
30530: PUSH
30531: LD_INT 1
30533: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30534: LD_ADDR_VAR 0 8
30538: PUSH
30539: LD_VAR 0 1
30543: PPUSH
30544: CALL 30231 0 1
30548: ST_TO_ADDR
// if tmp then
30549: LD_VAR 0 8
30553: IFFALSE 30596
// begin for i in tmp do
30555: LD_ADDR_VAR 0 7
30559: PUSH
30560: LD_VAR 0 8
30564: PUSH
30565: FOR_IN
30566: IFFALSE 30594
// if i [ 1 ] = b_ext_radio then
30568: LD_VAR 0 7
30572: PUSH
30573: LD_INT 1
30575: ARRAY
30576: PUSH
30577: LD_INT 22
30579: EQUAL
30580: IFFALSE 30592
// begin control := control_remote ;
30582: LD_ADDR_VAR 0 4
30586: PUSH
30587: LD_INT 2
30589: ST_TO_ADDR
// break ;
30590: GO 30594
// end ;
30592: GO 30565
30594: POP
30595: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30596: LD_VAR 0 1
30600: PPUSH
30601: LD_VAR 0 2
30605: PPUSH
30606: LD_VAR 0 3
30610: PPUSH
30611: LD_VAR 0 4
30615: PPUSH
30616: LD_VAR 0 5
30620: PPUSH
30621: CALL_OW 448
30625: IFFALSE 30660
// begin result := [ chassis , engine , control , weapon ] ;
30627: LD_ADDR_VAR 0 6
30631: PUSH
30632: LD_VAR 0 2
30636: PUSH
30637: LD_VAR 0 3
30641: PUSH
30642: LD_VAR 0 4
30646: PUSH
30647: LD_VAR 0 5
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: ST_TO_ADDR
// exit ;
30658: GO 31072
// end ; _chassis := AvailableChassisList ( factory ) ;
30660: LD_ADDR_VAR 0 9
30664: PUSH
30665: LD_VAR 0 1
30669: PPUSH
30670: CALL_OW 475
30674: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30675: LD_ADDR_VAR 0 11
30679: PUSH
30680: LD_VAR 0 1
30684: PPUSH
30685: CALL_OW 476
30689: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30690: LD_ADDR_VAR 0 12
30694: PUSH
30695: LD_VAR 0 1
30699: PPUSH
30700: CALL_OW 477
30704: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30705: LD_ADDR_VAR 0 10
30709: PUSH
30710: LD_VAR 0 1
30714: PPUSH
30715: CALL_OW 478
30719: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30720: LD_VAR 0 9
30724: NOT
30725: PUSH
30726: LD_VAR 0 11
30730: NOT
30731: OR
30732: PUSH
30733: LD_VAR 0 12
30737: NOT
30738: OR
30739: PUSH
30740: LD_VAR 0 10
30744: NOT
30745: OR
30746: IFFALSE 30781
// begin result := [ chassis , engine , control , weapon ] ;
30748: LD_ADDR_VAR 0 6
30752: PUSH
30753: LD_VAR 0 2
30757: PUSH
30758: LD_VAR 0 3
30762: PUSH
30763: LD_VAR 0 4
30767: PUSH
30768: LD_VAR 0 5
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: ST_TO_ADDR
// exit ;
30779: GO 31072
// end ; if not chassis in _chassis then
30781: LD_VAR 0 2
30785: PUSH
30786: LD_VAR 0 9
30790: IN
30791: NOT
30792: IFFALSE 30818
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30794: LD_ADDR_VAR 0 2
30798: PUSH
30799: LD_VAR 0 9
30803: PUSH
30804: LD_INT 1
30806: PPUSH
30807: LD_VAR 0 9
30811: PPUSH
30812: CALL_OW 12
30816: ARRAY
30817: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30818: LD_VAR 0 2
30822: PPUSH
30823: LD_VAR 0 3
30827: PPUSH
30828: CALL 31077 0 2
30832: NOT
30833: IFFALSE 30892
// repeat engine := _engine [ 1 ] ;
30835: LD_ADDR_VAR 0 3
30839: PUSH
30840: LD_VAR 0 11
30844: PUSH
30845: LD_INT 1
30847: ARRAY
30848: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30849: LD_ADDR_VAR 0 11
30853: PUSH
30854: LD_VAR 0 11
30858: PPUSH
30859: LD_INT 1
30861: PPUSH
30862: CALL_OW 3
30866: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30867: LD_VAR 0 2
30871: PPUSH
30872: LD_VAR 0 3
30876: PPUSH
30877: CALL 31077 0 2
30881: PUSH
30882: LD_VAR 0 11
30886: PUSH
30887: EMPTY
30888: EQUAL
30889: OR
30890: IFFALSE 30835
// if not control in _control then
30892: LD_VAR 0 4
30896: PUSH
30897: LD_VAR 0 12
30901: IN
30902: NOT
30903: IFFALSE 30929
// control := _control [ rand ( 1 , _control ) ] ;
30905: LD_ADDR_VAR 0 4
30909: PUSH
30910: LD_VAR 0 12
30914: PUSH
30915: LD_INT 1
30917: PPUSH
30918: LD_VAR 0 12
30922: PPUSH
30923: CALL_OW 12
30927: ARRAY
30928: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30929: LD_VAR 0 2
30933: PPUSH
30934: LD_VAR 0 5
30938: PPUSH
30939: CALL 31297 0 2
30943: NOT
30944: IFFALSE 31003
// repeat weapon := _weapon [ 1 ] ;
30946: LD_ADDR_VAR 0 5
30950: PUSH
30951: LD_VAR 0 10
30955: PUSH
30956: LD_INT 1
30958: ARRAY
30959: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30960: LD_ADDR_VAR 0 10
30964: PUSH
30965: LD_VAR 0 10
30969: PPUSH
30970: LD_INT 1
30972: PPUSH
30973: CALL_OW 3
30977: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30978: LD_VAR 0 2
30982: PPUSH
30983: LD_VAR 0 5
30987: PPUSH
30988: CALL 31297 0 2
30992: PUSH
30993: LD_VAR 0 10
30997: PUSH
30998: EMPTY
30999: EQUAL
31000: OR
31001: IFFALSE 30946
// result := [ ] ;
31003: LD_ADDR_VAR 0 6
31007: PUSH
31008: EMPTY
31009: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31010: LD_VAR 0 1
31014: PPUSH
31015: LD_VAR 0 2
31019: PPUSH
31020: LD_VAR 0 3
31024: PPUSH
31025: LD_VAR 0 4
31029: PPUSH
31030: LD_VAR 0 5
31034: PPUSH
31035: CALL_OW 448
31039: IFFALSE 31072
// result := [ chassis , engine , control , weapon ] ;
31041: LD_ADDR_VAR 0 6
31045: PUSH
31046: LD_VAR 0 2
31050: PUSH
31051: LD_VAR 0 3
31055: PUSH
31056: LD_VAR 0 4
31060: PUSH
31061: LD_VAR 0 5
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: ST_TO_ADDR
// end ;
31072: LD_VAR 0 6
31076: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31077: LD_INT 0
31079: PPUSH
// if not chassis or not engine then
31080: LD_VAR 0 1
31084: NOT
31085: PUSH
31086: LD_VAR 0 2
31090: NOT
31091: OR
31092: IFFALSE 31096
// exit ;
31094: GO 31292
// case engine of engine_solar :
31096: LD_VAR 0 2
31100: PUSH
31101: LD_INT 2
31103: DOUBLE
31104: EQUAL
31105: IFTRUE 31109
31107: GO 31147
31109: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31110: LD_ADDR_VAR 0 3
31114: PUSH
31115: LD_INT 11
31117: PUSH
31118: LD_INT 12
31120: PUSH
31121: LD_INT 13
31123: PUSH
31124: LD_INT 14
31126: PUSH
31127: LD_INT 1
31129: PUSH
31130: LD_INT 2
31132: PUSH
31133: LD_INT 3
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: ST_TO_ADDR
31145: GO 31276
31147: LD_INT 1
31149: DOUBLE
31150: EQUAL
31151: IFTRUE 31155
31153: GO 31217
31155: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31156: LD_ADDR_VAR 0 3
31160: PUSH
31161: LD_INT 11
31163: PUSH
31164: LD_INT 12
31166: PUSH
31167: LD_INT 13
31169: PUSH
31170: LD_INT 14
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: LD_INT 2
31178: PUSH
31179: LD_INT 3
31181: PUSH
31182: LD_INT 4
31184: PUSH
31185: LD_INT 5
31187: PUSH
31188: LD_INT 21
31190: PUSH
31191: LD_INT 23
31193: PUSH
31194: LD_INT 22
31196: PUSH
31197: LD_INT 24
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: ST_TO_ADDR
31215: GO 31276
31217: LD_INT 3
31219: DOUBLE
31220: EQUAL
31221: IFTRUE 31225
31223: GO 31275
31225: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31226: LD_ADDR_VAR 0 3
31230: PUSH
31231: LD_INT 13
31233: PUSH
31234: LD_INT 14
31236: PUSH
31237: LD_INT 2
31239: PUSH
31240: LD_INT 3
31242: PUSH
31243: LD_INT 4
31245: PUSH
31246: LD_INT 5
31248: PUSH
31249: LD_INT 21
31251: PUSH
31252: LD_INT 22
31254: PUSH
31255: LD_INT 23
31257: PUSH
31258: LD_INT 24
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: ST_TO_ADDR
31273: GO 31276
31275: POP
// result := ( chassis in result ) ;
31276: LD_ADDR_VAR 0 3
31280: PUSH
31281: LD_VAR 0 1
31285: PUSH
31286: LD_VAR 0 3
31290: IN
31291: ST_TO_ADDR
// end ;
31292: LD_VAR 0 3
31296: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31297: LD_INT 0
31299: PPUSH
// if not chassis or not weapon then
31300: LD_VAR 0 1
31304: NOT
31305: PUSH
31306: LD_VAR 0 2
31310: NOT
31311: OR
31312: IFFALSE 31316
// exit ;
31314: GO 32376
// case weapon of us_machine_gun :
31316: LD_VAR 0 2
31320: PUSH
31321: LD_INT 2
31323: DOUBLE
31324: EQUAL
31325: IFTRUE 31329
31327: GO 31359
31329: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31330: LD_ADDR_VAR 0 3
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: LD_INT 2
31340: PUSH
31341: LD_INT 3
31343: PUSH
31344: LD_INT 4
31346: PUSH
31347: LD_INT 5
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: ST_TO_ADDR
31357: GO 32360
31359: LD_INT 3
31361: DOUBLE
31362: EQUAL
31363: IFTRUE 31367
31365: GO 31397
31367: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31368: LD_ADDR_VAR 0 3
31372: PUSH
31373: LD_INT 1
31375: PUSH
31376: LD_INT 2
31378: PUSH
31379: LD_INT 3
31381: PUSH
31382: LD_INT 4
31384: PUSH
31385: LD_INT 5
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: ST_TO_ADDR
31395: GO 32360
31397: LD_INT 11
31399: DOUBLE
31400: EQUAL
31401: IFTRUE 31405
31403: GO 31435
31405: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31406: LD_ADDR_VAR 0 3
31410: PUSH
31411: LD_INT 1
31413: PUSH
31414: LD_INT 2
31416: PUSH
31417: LD_INT 3
31419: PUSH
31420: LD_INT 4
31422: PUSH
31423: LD_INT 5
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: ST_TO_ADDR
31433: GO 32360
31435: LD_INT 4
31437: DOUBLE
31438: EQUAL
31439: IFTRUE 31443
31441: GO 31469
31443: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31444: LD_ADDR_VAR 0 3
31448: PUSH
31449: LD_INT 2
31451: PUSH
31452: LD_INT 3
31454: PUSH
31455: LD_INT 4
31457: PUSH
31458: LD_INT 5
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: ST_TO_ADDR
31467: GO 32360
31469: LD_INT 5
31471: DOUBLE
31472: EQUAL
31473: IFTRUE 31477
31475: GO 31503
31477: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31478: LD_ADDR_VAR 0 3
31482: PUSH
31483: LD_INT 2
31485: PUSH
31486: LD_INT 3
31488: PUSH
31489: LD_INT 4
31491: PUSH
31492: LD_INT 5
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: ST_TO_ADDR
31501: GO 32360
31503: LD_INT 9
31505: DOUBLE
31506: EQUAL
31507: IFTRUE 31511
31509: GO 31537
31511: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31512: LD_ADDR_VAR 0 3
31516: PUSH
31517: LD_INT 2
31519: PUSH
31520: LD_INT 3
31522: PUSH
31523: LD_INT 4
31525: PUSH
31526: LD_INT 5
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: ST_TO_ADDR
31535: GO 32360
31537: LD_INT 7
31539: DOUBLE
31540: EQUAL
31541: IFTRUE 31545
31543: GO 31571
31545: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31546: LD_ADDR_VAR 0 3
31550: PUSH
31551: LD_INT 2
31553: PUSH
31554: LD_INT 3
31556: PUSH
31557: LD_INT 4
31559: PUSH
31560: LD_INT 5
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: ST_TO_ADDR
31569: GO 32360
31571: LD_INT 12
31573: DOUBLE
31574: EQUAL
31575: IFTRUE 31579
31577: GO 31605
31579: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31580: LD_ADDR_VAR 0 3
31584: PUSH
31585: LD_INT 2
31587: PUSH
31588: LD_INT 3
31590: PUSH
31591: LD_INT 4
31593: PUSH
31594: LD_INT 5
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: ST_TO_ADDR
31603: GO 32360
31605: LD_INT 13
31607: DOUBLE
31608: EQUAL
31609: IFTRUE 31613
31611: GO 31639
31613: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31614: LD_ADDR_VAR 0 3
31618: PUSH
31619: LD_INT 2
31621: PUSH
31622: LD_INT 3
31624: PUSH
31625: LD_INT 4
31627: PUSH
31628: LD_INT 5
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: ST_TO_ADDR
31637: GO 32360
31639: LD_INT 14
31641: DOUBLE
31642: EQUAL
31643: IFTRUE 31647
31645: GO 31665
31647: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31648: LD_ADDR_VAR 0 3
31652: PUSH
31653: LD_INT 4
31655: PUSH
31656: LD_INT 5
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: ST_TO_ADDR
31663: GO 32360
31665: LD_INT 6
31667: DOUBLE
31668: EQUAL
31669: IFTRUE 31673
31671: GO 31691
31673: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31674: LD_ADDR_VAR 0 3
31678: PUSH
31679: LD_INT 4
31681: PUSH
31682: LD_INT 5
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: ST_TO_ADDR
31689: GO 32360
31691: LD_INT 10
31693: DOUBLE
31694: EQUAL
31695: IFTRUE 31699
31697: GO 31717
31699: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31700: LD_ADDR_VAR 0 3
31704: PUSH
31705: LD_INT 4
31707: PUSH
31708: LD_INT 5
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: ST_TO_ADDR
31715: GO 32360
31717: LD_INT 22
31719: DOUBLE
31720: EQUAL
31721: IFTRUE 31725
31723: GO 31751
31725: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31726: LD_ADDR_VAR 0 3
31730: PUSH
31731: LD_INT 11
31733: PUSH
31734: LD_INT 12
31736: PUSH
31737: LD_INT 13
31739: PUSH
31740: LD_INT 14
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: ST_TO_ADDR
31749: GO 32360
31751: LD_INT 23
31753: DOUBLE
31754: EQUAL
31755: IFTRUE 31759
31757: GO 31785
31759: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31760: LD_ADDR_VAR 0 3
31764: PUSH
31765: LD_INT 11
31767: PUSH
31768: LD_INT 12
31770: PUSH
31771: LD_INT 13
31773: PUSH
31774: LD_INT 14
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: ST_TO_ADDR
31783: GO 32360
31785: LD_INT 24
31787: DOUBLE
31788: EQUAL
31789: IFTRUE 31793
31791: GO 31819
31793: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31794: LD_ADDR_VAR 0 3
31798: PUSH
31799: LD_INT 11
31801: PUSH
31802: LD_INT 12
31804: PUSH
31805: LD_INT 13
31807: PUSH
31808: LD_INT 14
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: ST_TO_ADDR
31817: GO 32360
31819: LD_INT 30
31821: DOUBLE
31822: EQUAL
31823: IFTRUE 31827
31825: GO 31853
31827: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31828: LD_ADDR_VAR 0 3
31832: PUSH
31833: LD_INT 11
31835: PUSH
31836: LD_INT 12
31838: PUSH
31839: LD_INT 13
31841: PUSH
31842: LD_INT 14
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: ST_TO_ADDR
31851: GO 32360
31853: LD_INT 25
31855: DOUBLE
31856: EQUAL
31857: IFTRUE 31861
31859: GO 31879
31861: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31862: LD_ADDR_VAR 0 3
31866: PUSH
31867: LD_INT 13
31869: PUSH
31870: LD_INT 14
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: ST_TO_ADDR
31877: GO 32360
31879: LD_INT 27
31881: DOUBLE
31882: EQUAL
31883: IFTRUE 31887
31885: GO 31905
31887: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31888: LD_ADDR_VAR 0 3
31892: PUSH
31893: LD_INT 13
31895: PUSH
31896: LD_INT 14
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: ST_TO_ADDR
31903: GO 32360
31905: LD_INT 92
31907: DOUBLE
31908: EQUAL
31909: IFTRUE 31913
31911: GO 31939
31913: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31914: LD_ADDR_VAR 0 3
31918: PUSH
31919: LD_INT 11
31921: PUSH
31922: LD_INT 12
31924: PUSH
31925: LD_INT 13
31927: PUSH
31928: LD_INT 14
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: ST_TO_ADDR
31937: GO 32360
31939: LD_INT 28
31941: DOUBLE
31942: EQUAL
31943: IFTRUE 31947
31945: GO 31965
31947: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31948: LD_ADDR_VAR 0 3
31952: PUSH
31953: LD_INT 13
31955: PUSH
31956: LD_INT 14
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: ST_TO_ADDR
31963: GO 32360
31965: LD_INT 29
31967: DOUBLE
31968: EQUAL
31969: IFTRUE 31973
31971: GO 31991
31973: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31974: LD_ADDR_VAR 0 3
31978: PUSH
31979: LD_INT 13
31981: PUSH
31982: LD_INT 14
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: ST_TO_ADDR
31989: GO 32360
31991: LD_INT 31
31993: DOUBLE
31994: EQUAL
31995: IFTRUE 31999
31997: GO 32017
31999: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32000: LD_ADDR_VAR 0 3
32004: PUSH
32005: LD_INT 13
32007: PUSH
32008: LD_INT 14
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: ST_TO_ADDR
32015: GO 32360
32017: LD_INT 26
32019: DOUBLE
32020: EQUAL
32021: IFTRUE 32025
32023: GO 32043
32025: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32026: LD_ADDR_VAR 0 3
32030: PUSH
32031: LD_INT 13
32033: PUSH
32034: LD_INT 14
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: ST_TO_ADDR
32041: GO 32360
32043: LD_INT 42
32045: DOUBLE
32046: EQUAL
32047: IFTRUE 32051
32049: GO 32077
32051: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32052: LD_ADDR_VAR 0 3
32056: PUSH
32057: LD_INT 21
32059: PUSH
32060: LD_INT 22
32062: PUSH
32063: LD_INT 23
32065: PUSH
32066: LD_INT 24
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: ST_TO_ADDR
32075: GO 32360
32077: LD_INT 43
32079: DOUBLE
32080: EQUAL
32081: IFTRUE 32085
32083: GO 32111
32085: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32086: LD_ADDR_VAR 0 3
32090: PUSH
32091: LD_INT 21
32093: PUSH
32094: LD_INT 22
32096: PUSH
32097: LD_INT 23
32099: PUSH
32100: LD_INT 24
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: ST_TO_ADDR
32109: GO 32360
32111: LD_INT 44
32113: DOUBLE
32114: EQUAL
32115: IFTRUE 32119
32117: GO 32145
32119: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32120: LD_ADDR_VAR 0 3
32124: PUSH
32125: LD_INT 21
32127: PUSH
32128: LD_INT 22
32130: PUSH
32131: LD_INT 23
32133: PUSH
32134: LD_INT 24
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: ST_TO_ADDR
32143: GO 32360
32145: LD_INT 45
32147: DOUBLE
32148: EQUAL
32149: IFTRUE 32153
32151: GO 32179
32153: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32154: LD_ADDR_VAR 0 3
32158: PUSH
32159: LD_INT 21
32161: PUSH
32162: LD_INT 22
32164: PUSH
32165: LD_INT 23
32167: PUSH
32168: LD_INT 24
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: ST_TO_ADDR
32177: GO 32360
32179: LD_INT 49
32181: DOUBLE
32182: EQUAL
32183: IFTRUE 32187
32185: GO 32213
32187: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32188: LD_ADDR_VAR 0 3
32192: PUSH
32193: LD_INT 21
32195: PUSH
32196: LD_INT 22
32198: PUSH
32199: LD_INT 23
32201: PUSH
32202: LD_INT 24
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: ST_TO_ADDR
32211: GO 32360
32213: LD_INT 51
32215: DOUBLE
32216: EQUAL
32217: IFTRUE 32221
32219: GO 32247
32221: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32222: LD_ADDR_VAR 0 3
32226: PUSH
32227: LD_INT 21
32229: PUSH
32230: LD_INT 22
32232: PUSH
32233: LD_INT 23
32235: PUSH
32236: LD_INT 24
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: ST_TO_ADDR
32245: GO 32360
32247: LD_INT 52
32249: DOUBLE
32250: EQUAL
32251: IFTRUE 32255
32253: GO 32281
32255: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32256: LD_ADDR_VAR 0 3
32260: PUSH
32261: LD_INT 21
32263: PUSH
32264: LD_INT 22
32266: PUSH
32267: LD_INT 23
32269: PUSH
32270: LD_INT 24
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: ST_TO_ADDR
32279: GO 32360
32281: LD_INT 53
32283: DOUBLE
32284: EQUAL
32285: IFTRUE 32289
32287: GO 32307
32289: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32290: LD_ADDR_VAR 0 3
32294: PUSH
32295: LD_INT 23
32297: PUSH
32298: LD_INT 24
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: ST_TO_ADDR
32305: GO 32360
32307: LD_INT 46
32309: DOUBLE
32310: EQUAL
32311: IFTRUE 32315
32313: GO 32333
32315: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32316: LD_ADDR_VAR 0 3
32320: PUSH
32321: LD_INT 23
32323: PUSH
32324: LD_INT 24
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: ST_TO_ADDR
32331: GO 32360
32333: LD_INT 47
32335: DOUBLE
32336: EQUAL
32337: IFTRUE 32341
32339: GO 32359
32341: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32342: LD_ADDR_VAR 0 3
32346: PUSH
32347: LD_INT 23
32349: PUSH
32350: LD_INT 24
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: ST_TO_ADDR
32357: GO 32360
32359: POP
// result := ( chassis in result ) ;
32360: LD_ADDR_VAR 0 3
32364: PUSH
32365: LD_VAR 0 1
32369: PUSH
32370: LD_VAR 0 3
32374: IN
32375: ST_TO_ADDR
// end ;
32376: LD_VAR 0 3
32380: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32381: LD_INT 0
32383: PPUSH
32384: PPUSH
32385: PPUSH
32386: PPUSH
32387: PPUSH
32388: PPUSH
32389: PPUSH
// result := array ;
32390: LD_ADDR_VAR 0 5
32394: PUSH
32395: LD_VAR 0 1
32399: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32400: LD_VAR 0 1
32404: NOT
32405: PUSH
32406: LD_VAR 0 2
32410: NOT
32411: OR
32412: PUSH
32413: LD_VAR 0 3
32417: NOT
32418: OR
32419: PUSH
32420: LD_VAR 0 2
32424: PUSH
32425: LD_VAR 0 1
32429: GREATER
32430: OR
32431: PUSH
32432: LD_VAR 0 3
32436: PUSH
32437: LD_VAR 0 1
32441: GREATER
32442: OR
32443: IFFALSE 32447
// exit ;
32445: GO 32743
// if direction then
32447: LD_VAR 0 4
32451: IFFALSE 32515
// begin d := 1 ;
32453: LD_ADDR_VAR 0 9
32457: PUSH
32458: LD_INT 1
32460: ST_TO_ADDR
// if i_from > i_to then
32461: LD_VAR 0 2
32465: PUSH
32466: LD_VAR 0 3
32470: GREATER
32471: IFFALSE 32497
// length := ( array - i_from ) + i_to else
32473: LD_ADDR_VAR 0 11
32477: PUSH
32478: LD_VAR 0 1
32482: PUSH
32483: LD_VAR 0 2
32487: MINUS
32488: PUSH
32489: LD_VAR 0 3
32493: PLUS
32494: ST_TO_ADDR
32495: GO 32513
// length := i_to - i_from ;
32497: LD_ADDR_VAR 0 11
32501: PUSH
32502: LD_VAR 0 3
32506: PUSH
32507: LD_VAR 0 2
32511: MINUS
32512: ST_TO_ADDR
// end else
32513: GO 32576
// begin d := - 1 ;
32515: LD_ADDR_VAR 0 9
32519: PUSH
32520: LD_INT 1
32522: NEG
32523: ST_TO_ADDR
// if i_from > i_to then
32524: LD_VAR 0 2
32528: PUSH
32529: LD_VAR 0 3
32533: GREATER
32534: IFFALSE 32554
// length := i_from - i_to else
32536: LD_ADDR_VAR 0 11
32540: PUSH
32541: LD_VAR 0 2
32545: PUSH
32546: LD_VAR 0 3
32550: MINUS
32551: ST_TO_ADDR
32552: GO 32576
// length := ( array - i_to ) + i_from ;
32554: LD_ADDR_VAR 0 11
32558: PUSH
32559: LD_VAR 0 1
32563: PUSH
32564: LD_VAR 0 3
32568: MINUS
32569: PUSH
32570: LD_VAR 0 2
32574: PLUS
32575: ST_TO_ADDR
// end ; if not length then
32576: LD_VAR 0 11
32580: NOT
32581: IFFALSE 32585
// exit ;
32583: GO 32743
// tmp := array ;
32585: LD_ADDR_VAR 0 10
32589: PUSH
32590: LD_VAR 0 1
32594: ST_TO_ADDR
// for i = 1 to length do
32595: LD_ADDR_VAR 0 6
32599: PUSH
32600: DOUBLE
32601: LD_INT 1
32603: DEC
32604: ST_TO_ADDR
32605: LD_VAR 0 11
32609: PUSH
32610: FOR_TO
32611: IFFALSE 32731
// begin for j = 1 to array do
32613: LD_ADDR_VAR 0 7
32617: PUSH
32618: DOUBLE
32619: LD_INT 1
32621: DEC
32622: ST_TO_ADDR
32623: LD_VAR 0 1
32627: PUSH
32628: FOR_TO
32629: IFFALSE 32717
// begin k := j + d ;
32631: LD_ADDR_VAR 0 8
32635: PUSH
32636: LD_VAR 0 7
32640: PUSH
32641: LD_VAR 0 9
32645: PLUS
32646: ST_TO_ADDR
// if k > array then
32647: LD_VAR 0 8
32651: PUSH
32652: LD_VAR 0 1
32656: GREATER
32657: IFFALSE 32667
// k := 1 ;
32659: LD_ADDR_VAR 0 8
32663: PUSH
32664: LD_INT 1
32666: ST_TO_ADDR
// if not k then
32667: LD_VAR 0 8
32671: NOT
32672: IFFALSE 32684
// k := array ;
32674: LD_ADDR_VAR 0 8
32678: PUSH
32679: LD_VAR 0 1
32683: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32684: LD_ADDR_VAR 0 10
32688: PUSH
32689: LD_VAR 0 10
32693: PPUSH
32694: LD_VAR 0 8
32698: PPUSH
32699: LD_VAR 0 1
32703: PUSH
32704: LD_VAR 0 7
32708: ARRAY
32709: PPUSH
32710: CALL_OW 1
32714: ST_TO_ADDR
// end ;
32715: GO 32628
32717: POP
32718: POP
// array := tmp ;
32719: LD_ADDR_VAR 0 1
32723: PUSH
32724: LD_VAR 0 10
32728: ST_TO_ADDR
// end ;
32729: GO 32610
32731: POP
32732: POP
// result := array ;
32733: LD_ADDR_VAR 0 5
32737: PUSH
32738: LD_VAR 0 1
32742: ST_TO_ADDR
// end ;
32743: LD_VAR 0 5
32747: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32748: LD_INT 0
32750: PPUSH
32751: PPUSH
// result := 0 ;
32752: LD_ADDR_VAR 0 3
32756: PUSH
32757: LD_INT 0
32759: ST_TO_ADDR
// if not array or not value in array then
32760: LD_VAR 0 1
32764: NOT
32765: PUSH
32766: LD_VAR 0 2
32770: PUSH
32771: LD_VAR 0 1
32775: IN
32776: NOT
32777: OR
32778: IFFALSE 32782
// exit ;
32780: GO 32836
// for i = 1 to array do
32782: LD_ADDR_VAR 0 4
32786: PUSH
32787: DOUBLE
32788: LD_INT 1
32790: DEC
32791: ST_TO_ADDR
32792: LD_VAR 0 1
32796: PUSH
32797: FOR_TO
32798: IFFALSE 32834
// if value = array [ i ] then
32800: LD_VAR 0 2
32804: PUSH
32805: LD_VAR 0 1
32809: PUSH
32810: LD_VAR 0 4
32814: ARRAY
32815: EQUAL
32816: IFFALSE 32832
// begin result := i ;
32818: LD_ADDR_VAR 0 3
32822: PUSH
32823: LD_VAR 0 4
32827: ST_TO_ADDR
// exit ;
32828: POP
32829: POP
32830: GO 32836
// end ;
32832: GO 32797
32834: POP
32835: POP
// end ;
32836: LD_VAR 0 3
32840: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32841: LD_INT 0
32843: PPUSH
// vc_chassis := chassis ;
32844: LD_ADDR_OWVAR 37
32848: PUSH
32849: LD_VAR 0 1
32853: ST_TO_ADDR
// vc_engine := engine ;
32854: LD_ADDR_OWVAR 39
32858: PUSH
32859: LD_VAR 0 2
32863: ST_TO_ADDR
// vc_control := control ;
32864: LD_ADDR_OWVAR 38
32868: PUSH
32869: LD_VAR 0 3
32873: ST_TO_ADDR
// vc_weapon := weapon ;
32874: LD_ADDR_OWVAR 40
32878: PUSH
32879: LD_VAR 0 4
32883: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32884: LD_ADDR_OWVAR 41
32888: PUSH
32889: LD_VAR 0 5
32893: ST_TO_ADDR
// end ;
32894: LD_VAR 0 6
32898: RET
// export function WantPlant ( unit ) ; var task ; begin
32899: LD_INT 0
32901: PPUSH
32902: PPUSH
// result := false ;
32903: LD_ADDR_VAR 0 2
32907: PUSH
32908: LD_INT 0
32910: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32911: LD_ADDR_VAR 0 3
32915: PUSH
32916: LD_VAR 0 1
32920: PPUSH
32921: CALL_OW 437
32925: ST_TO_ADDR
// if task then
32926: LD_VAR 0 3
32930: IFFALSE 32958
// if task [ 1 ] [ 1 ] = p then
32932: LD_VAR 0 3
32936: PUSH
32937: LD_INT 1
32939: ARRAY
32940: PUSH
32941: LD_INT 1
32943: ARRAY
32944: PUSH
32945: LD_STRING p
32947: EQUAL
32948: IFFALSE 32958
// result := true ;
32950: LD_ADDR_VAR 0 2
32954: PUSH
32955: LD_INT 1
32957: ST_TO_ADDR
// end ;
32958: LD_VAR 0 2
32962: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32963: LD_INT 0
32965: PPUSH
32966: PPUSH
32967: PPUSH
32968: PPUSH
// if pos < 1 then
32969: LD_VAR 0 2
32973: PUSH
32974: LD_INT 1
32976: LESS
32977: IFFALSE 32981
// exit ;
32979: GO 33284
// if pos = 1 then
32981: LD_VAR 0 2
32985: PUSH
32986: LD_INT 1
32988: EQUAL
32989: IFFALSE 33022
// result := Replace ( arr , pos [ 1 ] , value ) else
32991: LD_ADDR_VAR 0 4
32995: PUSH
32996: LD_VAR 0 1
33000: PPUSH
33001: LD_VAR 0 2
33005: PUSH
33006: LD_INT 1
33008: ARRAY
33009: PPUSH
33010: LD_VAR 0 3
33014: PPUSH
33015: CALL_OW 1
33019: ST_TO_ADDR
33020: GO 33284
// begin tmp := arr ;
33022: LD_ADDR_VAR 0 6
33026: PUSH
33027: LD_VAR 0 1
33031: ST_TO_ADDR
// s_arr := [ tmp ] ;
33032: LD_ADDR_VAR 0 7
33036: PUSH
33037: LD_VAR 0 6
33041: PUSH
33042: EMPTY
33043: LIST
33044: ST_TO_ADDR
// for i = 1 to pos - 1 do
33045: LD_ADDR_VAR 0 5
33049: PUSH
33050: DOUBLE
33051: LD_INT 1
33053: DEC
33054: ST_TO_ADDR
33055: LD_VAR 0 2
33059: PUSH
33060: LD_INT 1
33062: MINUS
33063: PUSH
33064: FOR_TO
33065: IFFALSE 33110
// begin tmp := tmp [ pos [ i ] ] ;
33067: LD_ADDR_VAR 0 6
33071: PUSH
33072: LD_VAR 0 6
33076: PUSH
33077: LD_VAR 0 2
33081: PUSH
33082: LD_VAR 0 5
33086: ARRAY
33087: ARRAY
33088: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33089: LD_ADDR_VAR 0 7
33093: PUSH
33094: LD_VAR 0 7
33098: PUSH
33099: LD_VAR 0 6
33103: PUSH
33104: EMPTY
33105: LIST
33106: ADD
33107: ST_TO_ADDR
// end ;
33108: GO 33064
33110: POP
33111: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33112: LD_ADDR_VAR 0 6
33116: PUSH
33117: LD_VAR 0 6
33121: PPUSH
33122: LD_VAR 0 2
33126: PUSH
33127: LD_VAR 0 2
33131: ARRAY
33132: PPUSH
33133: LD_VAR 0 3
33137: PPUSH
33138: CALL_OW 1
33142: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33143: LD_ADDR_VAR 0 7
33147: PUSH
33148: LD_VAR 0 7
33152: PPUSH
33153: LD_VAR 0 7
33157: PPUSH
33158: LD_VAR 0 6
33162: PPUSH
33163: CALL_OW 1
33167: ST_TO_ADDR
// for i = s_arr downto 2 do
33168: LD_ADDR_VAR 0 5
33172: PUSH
33173: DOUBLE
33174: LD_VAR 0 7
33178: INC
33179: ST_TO_ADDR
33180: LD_INT 2
33182: PUSH
33183: FOR_DOWNTO
33184: IFFALSE 33268
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33186: LD_ADDR_VAR 0 6
33190: PUSH
33191: LD_VAR 0 7
33195: PUSH
33196: LD_VAR 0 5
33200: PUSH
33201: LD_INT 1
33203: MINUS
33204: ARRAY
33205: PPUSH
33206: LD_VAR 0 2
33210: PUSH
33211: LD_VAR 0 5
33215: PUSH
33216: LD_INT 1
33218: MINUS
33219: ARRAY
33220: PPUSH
33221: LD_VAR 0 7
33225: PUSH
33226: LD_VAR 0 5
33230: ARRAY
33231: PPUSH
33232: CALL_OW 1
33236: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33237: LD_ADDR_VAR 0 7
33241: PUSH
33242: LD_VAR 0 7
33246: PPUSH
33247: LD_VAR 0 5
33251: PUSH
33252: LD_INT 1
33254: MINUS
33255: PPUSH
33256: LD_VAR 0 6
33260: PPUSH
33261: CALL_OW 1
33265: ST_TO_ADDR
// end ;
33266: GO 33183
33268: POP
33269: POP
// result := s_arr [ 1 ] ;
33270: LD_ADDR_VAR 0 4
33274: PUSH
33275: LD_VAR 0 7
33279: PUSH
33280: LD_INT 1
33282: ARRAY
33283: ST_TO_ADDR
// end ; end ;
33284: LD_VAR 0 4
33288: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33289: LD_INT 0
33291: PPUSH
33292: PPUSH
// if not list then
33293: LD_VAR 0 1
33297: NOT
33298: IFFALSE 33302
// exit ;
33300: GO 33393
// i := list [ pos1 ] ;
33302: LD_ADDR_VAR 0 5
33306: PUSH
33307: LD_VAR 0 1
33311: PUSH
33312: LD_VAR 0 2
33316: ARRAY
33317: ST_TO_ADDR
// if not i then
33318: LD_VAR 0 5
33322: NOT
33323: IFFALSE 33327
// exit ;
33325: GO 33393
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33327: LD_ADDR_VAR 0 1
33331: PUSH
33332: LD_VAR 0 1
33336: PPUSH
33337: LD_VAR 0 2
33341: PPUSH
33342: LD_VAR 0 1
33346: PUSH
33347: LD_VAR 0 3
33351: ARRAY
33352: PPUSH
33353: CALL_OW 1
33357: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33358: LD_ADDR_VAR 0 1
33362: PUSH
33363: LD_VAR 0 1
33367: PPUSH
33368: LD_VAR 0 3
33372: PPUSH
33373: LD_VAR 0 5
33377: PPUSH
33378: CALL_OW 1
33382: ST_TO_ADDR
// result := list ;
33383: LD_ADDR_VAR 0 4
33387: PUSH
33388: LD_VAR 0 1
33392: ST_TO_ADDR
// end ;
33393: LD_VAR 0 4
33397: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33398: LD_INT 0
33400: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33401: LD_ADDR_VAR 0 5
33405: PUSH
33406: LD_VAR 0 1
33410: PPUSH
33411: CALL_OW 250
33415: PPUSH
33416: LD_VAR 0 1
33420: PPUSH
33421: CALL_OW 251
33425: PPUSH
33426: LD_VAR 0 2
33430: PPUSH
33431: LD_VAR 0 3
33435: PPUSH
33436: LD_VAR 0 4
33440: PPUSH
33441: CALL 33451 0 5
33445: ST_TO_ADDR
// end ;
33446: LD_VAR 0 5
33450: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33451: LD_INT 0
33453: PPUSH
33454: PPUSH
33455: PPUSH
33456: PPUSH
// if not list then
33457: LD_VAR 0 3
33461: NOT
33462: IFFALSE 33466
// exit ;
33464: GO 33854
// result := [ ] ;
33466: LD_ADDR_VAR 0 6
33470: PUSH
33471: EMPTY
33472: ST_TO_ADDR
// for i in list do
33473: LD_ADDR_VAR 0 7
33477: PUSH
33478: LD_VAR 0 3
33482: PUSH
33483: FOR_IN
33484: IFFALSE 33686
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33486: LD_ADDR_VAR 0 9
33490: PUSH
33491: LD_VAR 0 7
33495: PPUSH
33496: LD_VAR 0 1
33500: PPUSH
33501: LD_VAR 0 2
33505: PPUSH
33506: CALL_OW 297
33510: ST_TO_ADDR
// if not result then
33511: LD_VAR 0 6
33515: NOT
33516: IFFALSE 33542
// result := [ [ i , tmp ] ] else
33518: LD_ADDR_VAR 0 6
33522: PUSH
33523: LD_VAR 0 7
33527: PUSH
33528: LD_VAR 0 9
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: EMPTY
33538: LIST
33539: ST_TO_ADDR
33540: GO 33684
// begin if result [ result ] [ 2 ] < tmp then
33542: LD_VAR 0 6
33546: PUSH
33547: LD_VAR 0 6
33551: ARRAY
33552: PUSH
33553: LD_INT 2
33555: ARRAY
33556: PUSH
33557: LD_VAR 0 9
33561: LESS
33562: IFFALSE 33604
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33564: LD_ADDR_VAR 0 6
33568: PUSH
33569: LD_VAR 0 6
33573: PPUSH
33574: LD_VAR 0 6
33578: PUSH
33579: LD_INT 1
33581: PLUS
33582: PPUSH
33583: LD_VAR 0 7
33587: PUSH
33588: LD_VAR 0 9
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PPUSH
33597: CALL_OW 2
33601: ST_TO_ADDR
33602: GO 33684
// for j = 1 to result do
33604: LD_ADDR_VAR 0 8
33608: PUSH
33609: DOUBLE
33610: LD_INT 1
33612: DEC
33613: ST_TO_ADDR
33614: LD_VAR 0 6
33618: PUSH
33619: FOR_TO
33620: IFFALSE 33682
// begin if tmp < result [ j ] [ 2 ] then
33622: LD_VAR 0 9
33626: PUSH
33627: LD_VAR 0 6
33631: PUSH
33632: LD_VAR 0 8
33636: ARRAY
33637: PUSH
33638: LD_INT 2
33640: ARRAY
33641: LESS
33642: IFFALSE 33680
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33644: LD_ADDR_VAR 0 6
33648: PUSH
33649: LD_VAR 0 6
33653: PPUSH
33654: LD_VAR 0 8
33658: PPUSH
33659: LD_VAR 0 7
33663: PUSH
33664: LD_VAR 0 9
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PPUSH
33673: CALL_OW 2
33677: ST_TO_ADDR
// break ;
33678: GO 33682
// end ; end ;
33680: GO 33619
33682: POP
33683: POP
// end ; end ;
33684: GO 33483
33686: POP
33687: POP
// if result and not asc then
33688: LD_VAR 0 6
33692: PUSH
33693: LD_VAR 0 4
33697: NOT
33698: AND
33699: IFFALSE 33774
// begin tmp := result ;
33701: LD_ADDR_VAR 0 9
33705: PUSH
33706: LD_VAR 0 6
33710: ST_TO_ADDR
// for i = tmp downto 1 do
33711: LD_ADDR_VAR 0 7
33715: PUSH
33716: DOUBLE
33717: LD_VAR 0 9
33721: INC
33722: ST_TO_ADDR
33723: LD_INT 1
33725: PUSH
33726: FOR_DOWNTO
33727: IFFALSE 33772
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33729: LD_ADDR_VAR 0 6
33733: PUSH
33734: LD_VAR 0 6
33738: PPUSH
33739: LD_VAR 0 9
33743: PUSH
33744: LD_VAR 0 7
33748: MINUS
33749: PUSH
33750: LD_INT 1
33752: PLUS
33753: PPUSH
33754: LD_VAR 0 9
33758: PUSH
33759: LD_VAR 0 7
33763: ARRAY
33764: PPUSH
33765: CALL_OW 1
33769: ST_TO_ADDR
33770: GO 33726
33772: POP
33773: POP
// end ; tmp := [ ] ;
33774: LD_ADDR_VAR 0 9
33778: PUSH
33779: EMPTY
33780: ST_TO_ADDR
// if mode then
33781: LD_VAR 0 5
33785: IFFALSE 33854
// begin for i = 1 to result do
33787: LD_ADDR_VAR 0 7
33791: PUSH
33792: DOUBLE
33793: LD_INT 1
33795: DEC
33796: ST_TO_ADDR
33797: LD_VAR 0 6
33801: PUSH
33802: FOR_TO
33803: IFFALSE 33842
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33805: LD_ADDR_VAR 0 9
33809: PUSH
33810: LD_VAR 0 9
33814: PPUSH
33815: LD_VAR 0 7
33819: PPUSH
33820: LD_VAR 0 6
33824: PUSH
33825: LD_VAR 0 7
33829: ARRAY
33830: PUSH
33831: LD_INT 1
33833: ARRAY
33834: PPUSH
33835: CALL_OW 1
33839: ST_TO_ADDR
33840: GO 33802
33842: POP
33843: POP
// result := tmp ;
33844: LD_ADDR_VAR 0 6
33848: PUSH
33849: LD_VAR 0 9
33853: ST_TO_ADDR
// end ; end ;
33854: LD_VAR 0 6
33858: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33859: LD_INT 0
33861: PPUSH
33862: PPUSH
33863: PPUSH
33864: PPUSH
33865: PPUSH
33866: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33867: LD_ADDR_VAR 0 5
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: LD_INT 0
33880: PUSH
33881: EMPTY
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: ST_TO_ADDR
// if not x or not y then
33889: LD_VAR 0 2
33893: NOT
33894: PUSH
33895: LD_VAR 0 3
33899: NOT
33900: OR
33901: IFFALSE 33905
// exit ;
33903: GO 35555
// if not range then
33905: LD_VAR 0 4
33909: NOT
33910: IFFALSE 33920
// range := 10 ;
33912: LD_ADDR_VAR 0 4
33916: PUSH
33917: LD_INT 10
33919: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33920: LD_ADDR_VAR 0 8
33924: PUSH
33925: LD_INT 81
33927: PUSH
33928: LD_VAR 0 1
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 92
33939: PUSH
33940: LD_VAR 0 2
33944: PUSH
33945: LD_VAR 0 3
33949: PUSH
33950: LD_VAR 0 4
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 3
33963: PUSH
33964: LD_INT 21
33966: PUSH
33967: LD_INT 3
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: LIST
33982: PPUSH
33983: CALL_OW 69
33987: ST_TO_ADDR
// if not tmp then
33988: LD_VAR 0 8
33992: NOT
33993: IFFALSE 33997
// exit ;
33995: GO 35555
// for i in tmp do
33997: LD_ADDR_VAR 0 6
34001: PUSH
34002: LD_VAR 0 8
34006: PUSH
34007: FOR_IN
34008: IFFALSE 35530
// begin points := [ 0 , 0 , 0 ] ;
34010: LD_ADDR_VAR 0 9
34014: PUSH
34015: LD_INT 0
34017: PUSH
34018: LD_INT 0
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: LIST
34028: ST_TO_ADDR
// bpoints := 1 ;
34029: LD_ADDR_VAR 0 10
34033: PUSH
34034: LD_INT 1
34036: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34037: LD_VAR 0 6
34041: PPUSH
34042: CALL_OW 247
34046: PUSH
34047: LD_INT 1
34049: DOUBLE
34050: EQUAL
34051: IFTRUE 34055
34053: GO 34633
34055: POP
// begin if GetClass ( i ) = 1 then
34056: LD_VAR 0 6
34060: PPUSH
34061: CALL_OW 257
34065: PUSH
34066: LD_INT 1
34068: EQUAL
34069: IFFALSE 34090
// points := [ 10 , 5 , 3 ] ;
34071: LD_ADDR_VAR 0 9
34075: PUSH
34076: LD_INT 10
34078: PUSH
34079: LD_INT 5
34081: PUSH
34082: LD_INT 3
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: LIST
34089: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34090: LD_VAR 0 6
34094: PPUSH
34095: CALL_OW 257
34099: PUSH
34100: LD_INT 2
34102: PUSH
34103: LD_INT 3
34105: PUSH
34106: LD_INT 4
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: LIST
34113: IN
34114: IFFALSE 34135
// points := [ 3 , 2 , 1 ] ;
34116: LD_ADDR_VAR 0 9
34120: PUSH
34121: LD_INT 3
34123: PUSH
34124: LD_INT 2
34126: PUSH
34127: LD_INT 1
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34135: LD_VAR 0 6
34139: PPUSH
34140: CALL_OW 257
34144: PUSH
34145: LD_INT 5
34147: EQUAL
34148: IFFALSE 34169
// points := [ 130 , 5 , 2 ] ;
34150: LD_ADDR_VAR 0 9
34154: PUSH
34155: LD_INT 130
34157: PUSH
34158: LD_INT 5
34160: PUSH
34161: LD_INT 2
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: LIST
34168: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34169: LD_VAR 0 6
34173: PPUSH
34174: CALL_OW 257
34178: PUSH
34179: LD_INT 8
34181: EQUAL
34182: IFFALSE 34203
// points := [ 35 , 35 , 30 ] ;
34184: LD_ADDR_VAR 0 9
34188: PUSH
34189: LD_INT 35
34191: PUSH
34192: LD_INT 35
34194: PUSH
34195: LD_INT 30
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: LIST
34202: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34203: LD_VAR 0 6
34207: PPUSH
34208: CALL_OW 257
34212: PUSH
34213: LD_INT 9
34215: EQUAL
34216: IFFALSE 34237
// points := [ 20 , 55 , 40 ] ;
34218: LD_ADDR_VAR 0 9
34222: PUSH
34223: LD_INT 20
34225: PUSH
34226: LD_INT 55
34228: PUSH
34229: LD_INT 40
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: LIST
34236: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34237: LD_VAR 0 6
34241: PPUSH
34242: CALL_OW 257
34246: PUSH
34247: LD_INT 12
34249: PUSH
34250: LD_INT 16
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: IN
34257: IFFALSE 34278
// points := [ 5 , 3 , 2 ] ;
34259: LD_ADDR_VAR 0 9
34263: PUSH
34264: LD_INT 5
34266: PUSH
34267: LD_INT 3
34269: PUSH
34270: LD_INT 2
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: LIST
34277: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34278: LD_VAR 0 6
34282: PPUSH
34283: CALL_OW 257
34287: PUSH
34288: LD_INT 17
34290: EQUAL
34291: IFFALSE 34312
// points := [ 100 , 50 , 75 ] ;
34293: LD_ADDR_VAR 0 9
34297: PUSH
34298: LD_INT 100
34300: PUSH
34301: LD_INT 50
34303: PUSH
34304: LD_INT 75
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: LIST
34311: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34312: LD_VAR 0 6
34316: PPUSH
34317: CALL_OW 257
34321: PUSH
34322: LD_INT 15
34324: EQUAL
34325: IFFALSE 34346
// points := [ 10 , 5 , 3 ] ;
34327: LD_ADDR_VAR 0 9
34331: PUSH
34332: LD_INT 10
34334: PUSH
34335: LD_INT 5
34337: PUSH
34338: LD_INT 3
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: LIST
34345: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34346: LD_VAR 0 6
34350: PPUSH
34351: CALL_OW 257
34355: PUSH
34356: LD_INT 14
34358: EQUAL
34359: IFFALSE 34380
// points := [ 10 , 0 , 0 ] ;
34361: LD_ADDR_VAR 0 9
34365: PUSH
34366: LD_INT 10
34368: PUSH
34369: LD_INT 0
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: LIST
34379: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34380: LD_VAR 0 6
34384: PPUSH
34385: CALL_OW 257
34389: PUSH
34390: LD_INT 11
34392: EQUAL
34393: IFFALSE 34414
// points := [ 30 , 10 , 5 ] ;
34395: LD_ADDR_VAR 0 9
34399: PUSH
34400: LD_INT 30
34402: PUSH
34403: LD_INT 10
34405: PUSH
34406: LD_INT 5
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34414: LD_VAR 0 1
34418: PPUSH
34419: LD_INT 5
34421: PPUSH
34422: CALL_OW 321
34426: PUSH
34427: LD_INT 2
34429: EQUAL
34430: IFFALSE 34447
// bpoints := bpoints * 1.8 ;
34432: LD_ADDR_VAR 0 10
34436: PUSH
34437: LD_VAR 0 10
34441: PUSH
34442: LD_REAL  1.80000000000000E+0000
34445: MUL
34446: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34447: LD_VAR 0 6
34451: PPUSH
34452: CALL_OW 257
34456: PUSH
34457: LD_INT 1
34459: PUSH
34460: LD_INT 2
34462: PUSH
34463: LD_INT 3
34465: PUSH
34466: LD_INT 4
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: IN
34475: PUSH
34476: LD_VAR 0 1
34480: PPUSH
34481: LD_INT 51
34483: PPUSH
34484: CALL_OW 321
34488: PUSH
34489: LD_INT 2
34491: EQUAL
34492: AND
34493: IFFALSE 34510
// bpoints := bpoints * 1.2 ;
34495: LD_ADDR_VAR 0 10
34499: PUSH
34500: LD_VAR 0 10
34504: PUSH
34505: LD_REAL  1.20000000000000E+0000
34508: MUL
34509: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34510: LD_VAR 0 6
34514: PPUSH
34515: CALL_OW 257
34519: PUSH
34520: LD_INT 5
34522: PUSH
34523: LD_INT 7
34525: PUSH
34526: LD_INT 9
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: LIST
34533: IN
34534: PUSH
34535: LD_VAR 0 1
34539: PPUSH
34540: LD_INT 52
34542: PPUSH
34543: CALL_OW 321
34547: PUSH
34548: LD_INT 2
34550: EQUAL
34551: AND
34552: IFFALSE 34569
// bpoints := bpoints * 1.5 ;
34554: LD_ADDR_VAR 0 10
34558: PUSH
34559: LD_VAR 0 10
34563: PUSH
34564: LD_REAL  1.50000000000000E+0000
34567: MUL
34568: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34569: LD_VAR 0 1
34573: PPUSH
34574: LD_INT 66
34576: PPUSH
34577: CALL_OW 321
34581: PUSH
34582: LD_INT 2
34584: EQUAL
34585: IFFALSE 34602
// bpoints := bpoints * 1.1 ;
34587: LD_ADDR_VAR 0 10
34591: PUSH
34592: LD_VAR 0 10
34596: PUSH
34597: LD_REAL  1.10000000000000E+0000
34600: MUL
34601: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34602: LD_ADDR_VAR 0 10
34606: PUSH
34607: LD_VAR 0 10
34611: PUSH
34612: LD_VAR 0 6
34616: PPUSH
34617: LD_INT 1
34619: PPUSH
34620: CALL_OW 259
34624: PUSH
34625: LD_REAL  1.15000000000000E+0000
34628: MUL
34629: MUL
34630: ST_TO_ADDR
// end ; unit_vehicle :
34631: GO 35459
34633: LD_INT 2
34635: DOUBLE
34636: EQUAL
34637: IFTRUE 34641
34639: GO 35447
34641: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34642: LD_VAR 0 6
34646: PPUSH
34647: CALL_OW 264
34651: PUSH
34652: LD_INT 2
34654: PUSH
34655: LD_INT 42
34657: PUSH
34658: LD_INT 24
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: LIST
34665: IN
34666: IFFALSE 34687
// points := [ 25 , 5 , 3 ] ;
34668: LD_ADDR_VAR 0 9
34672: PUSH
34673: LD_INT 25
34675: PUSH
34676: LD_INT 5
34678: PUSH
34679: LD_INT 3
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: LIST
34686: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34687: LD_VAR 0 6
34691: PPUSH
34692: CALL_OW 264
34696: PUSH
34697: LD_INT 4
34699: PUSH
34700: LD_INT 43
34702: PUSH
34703: LD_INT 25
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: LIST
34710: IN
34711: IFFALSE 34732
// points := [ 40 , 15 , 5 ] ;
34713: LD_ADDR_VAR 0 9
34717: PUSH
34718: LD_INT 40
34720: PUSH
34721: LD_INT 15
34723: PUSH
34724: LD_INT 5
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: LIST
34731: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34732: LD_VAR 0 6
34736: PPUSH
34737: CALL_OW 264
34741: PUSH
34742: LD_INT 3
34744: PUSH
34745: LD_INT 23
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: IN
34752: IFFALSE 34773
// points := [ 7 , 25 , 8 ] ;
34754: LD_ADDR_VAR 0 9
34758: PUSH
34759: LD_INT 7
34761: PUSH
34762: LD_INT 25
34764: PUSH
34765: LD_INT 8
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: LIST
34772: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34773: LD_VAR 0 6
34777: PPUSH
34778: CALL_OW 264
34782: PUSH
34783: LD_INT 5
34785: PUSH
34786: LD_INT 27
34788: PUSH
34789: LD_INT 44
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: LIST
34796: IN
34797: IFFALSE 34818
// points := [ 14 , 50 , 16 ] ;
34799: LD_ADDR_VAR 0 9
34803: PUSH
34804: LD_INT 14
34806: PUSH
34807: LD_INT 50
34809: PUSH
34810: LD_INT 16
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: LIST
34817: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34818: LD_VAR 0 6
34822: PPUSH
34823: CALL_OW 264
34827: PUSH
34828: LD_INT 6
34830: PUSH
34831: LD_INT 46
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: IN
34838: IFFALSE 34859
// points := [ 32 , 120 , 70 ] ;
34840: LD_ADDR_VAR 0 9
34844: PUSH
34845: LD_INT 32
34847: PUSH
34848: LD_INT 120
34850: PUSH
34851: LD_INT 70
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: LIST
34858: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34859: LD_VAR 0 6
34863: PPUSH
34864: CALL_OW 264
34868: PUSH
34869: LD_INT 7
34871: PUSH
34872: LD_INT 28
34874: PUSH
34875: LD_INT 45
34877: PUSH
34878: LD_INT 92
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: IN
34887: IFFALSE 34908
// points := [ 35 , 20 , 45 ] ;
34889: LD_ADDR_VAR 0 9
34893: PUSH
34894: LD_INT 35
34896: PUSH
34897: LD_INT 20
34899: PUSH
34900: LD_INT 45
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: LIST
34907: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34908: LD_VAR 0 6
34912: PPUSH
34913: CALL_OW 264
34917: PUSH
34918: LD_INT 47
34920: PUSH
34921: EMPTY
34922: LIST
34923: IN
34924: IFFALSE 34945
// points := [ 67 , 45 , 75 ] ;
34926: LD_ADDR_VAR 0 9
34930: PUSH
34931: LD_INT 67
34933: PUSH
34934: LD_INT 45
34936: PUSH
34937: LD_INT 75
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: LIST
34944: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34945: LD_VAR 0 6
34949: PPUSH
34950: CALL_OW 264
34954: PUSH
34955: LD_INT 26
34957: PUSH
34958: EMPTY
34959: LIST
34960: IN
34961: IFFALSE 34982
// points := [ 120 , 30 , 80 ] ;
34963: LD_ADDR_VAR 0 9
34967: PUSH
34968: LD_INT 120
34970: PUSH
34971: LD_INT 30
34973: PUSH
34974: LD_INT 80
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: LIST
34981: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34982: LD_VAR 0 6
34986: PPUSH
34987: CALL_OW 264
34991: PUSH
34992: LD_INT 22
34994: PUSH
34995: EMPTY
34996: LIST
34997: IN
34998: IFFALSE 35019
// points := [ 40 , 1 , 1 ] ;
35000: LD_ADDR_VAR 0 9
35004: PUSH
35005: LD_INT 40
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: LIST
35018: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35019: LD_VAR 0 6
35023: PPUSH
35024: CALL_OW 264
35028: PUSH
35029: LD_INT 29
35031: PUSH
35032: EMPTY
35033: LIST
35034: IN
35035: IFFALSE 35056
// points := [ 70 , 200 , 400 ] ;
35037: LD_ADDR_VAR 0 9
35041: PUSH
35042: LD_INT 70
35044: PUSH
35045: LD_INT 200
35047: PUSH
35048: LD_INT 400
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: LIST
35055: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35056: LD_VAR 0 6
35060: PPUSH
35061: CALL_OW 264
35065: PUSH
35066: LD_INT 14
35068: PUSH
35069: LD_INT 53
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: IN
35076: IFFALSE 35097
// points := [ 40 , 10 , 20 ] ;
35078: LD_ADDR_VAR 0 9
35082: PUSH
35083: LD_INT 40
35085: PUSH
35086: LD_INT 10
35088: PUSH
35089: LD_INT 20
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: LIST
35096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35097: LD_VAR 0 6
35101: PPUSH
35102: CALL_OW 264
35106: PUSH
35107: LD_INT 9
35109: PUSH
35110: EMPTY
35111: LIST
35112: IN
35113: IFFALSE 35134
// points := [ 5 , 70 , 20 ] ;
35115: LD_ADDR_VAR 0 9
35119: PUSH
35120: LD_INT 5
35122: PUSH
35123: LD_INT 70
35125: PUSH
35126: LD_INT 20
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: LIST
35133: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35134: LD_VAR 0 6
35138: PPUSH
35139: CALL_OW 264
35143: PUSH
35144: LD_INT 10
35146: PUSH
35147: EMPTY
35148: LIST
35149: IN
35150: IFFALSE 35171
// points := [ 35 , 110 , 70 ] ;
35152: LD_ADDR_VAR 0 9
35156: PUSH
35157: LD_INT 35
35159: PUSH
35160: LD_INT 110
35162: PUSH
35163: LD_INT 70
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: LIST
35170: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35171: LD_VAR 0 6
35175: PPUSH
35176: CALL_OW 265
35180: PUSH
35181: LD_INT 25
35183: EQUAL
35184: IFFALSE 35205
// points := [ 80 , 65 , 100 ] ;
35186: LD_ADDR_VAR 0 9
35190: PUSH
35191: LD_INT 80
35193: PUSH
35194: LD_INT 65
35196: PUSH
35197: LD_INT 100
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: LIST
35204: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35205: LD_VAR 0 6
35209: PPUSH
35210: CALL_OW 263
35214: PUSH
35215: LD_INT 1
35217: EQUAL
35218: IFFALSE 35253
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35220: LD_ADDR_VAR 0 10
35224: PUSH
35225: LD_VAR 0 10
35229: PUSH
35230: LD_VAR 0 6
35234: PPUSH
35235: CALL_OW 311
35239: PPUSH
35240: LD_INT 3
35242: PPUSH
35243: CALL_OW 259
35247: PUSH
35248: LD_INT 4
35250: MUL
35251: MUL
35252: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35253: LD_VAR 0 6
35257: PPUSH
35258: CALL_OW 263
35262: PUSH
35263: LD_INT 2
35265: EQUAL
35266: IFFALSE 35317
// begin j := IsControledBy ( i ) ;
35268: LD_ADDR_VAR 0 7
35272: PUSH
35273: LD_VAR 0 6
35277: PPUSH
35278: CALL_OW 312
35282: ST_TO_ADDR
// if j then
35283: LD_VAR 0 7
35287: IFFALSE 35317
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35289: LD_ADDR_VAR 0 10
35293: PUSH
35294: LD_VAR 0 10
35298: PUSH
35299: LD_VAR 0 7
35303: PPUSH
35304: LD_INT 3
35306: PPUSH
35307: CALL_OW 259
35311: PUSH
35312: LD_INT 3
35314: MUL
35315: MUL
35316: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35317: LD_VAR 0 6
35321: PPUSH
35322: CALL_OW 264
35326: PUSH
35327: LD_INT 5
35329: PUSH
35330: LD_INT 6
35332: PUSH
35333: LD_INT 46
35335: PUSH
35336: LD_INT 44
35338: PUSH
35339: LD_INT 47
35341: PUSH
35342: LD_INT 45
35344: PUSH
35345: LD_INT 28
35347: PUSH
35348: LD_INT 7
35350: PUSH
35351: LD_INT 27
35353: PUSH
35354: LD_INT 29
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: IN
35369: PUSH
35370: LD_VAR 0 1
35374: PPUSH
35375: LD_INT 52
35377: PPUSH
35378: CALL_OW 321
35382: PUSH
35383: LD_INT 2
35385: EQUAL
35386: AND
35387: IFFALSE 35404
// bpoints := bpoints * 1.2 ;
35389: LD_ADDR_VAR 0 10
35393: PUSH
35394: LD_VAR 0 10
35398: PUSH
35399: LD_REAL  1.20000000000000E+0000
35402: MUL
35403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35404: LD_VAR 0 6
35408: PPUSH
35409: CALL_OW 264
35413: PUSH
35414: LD_INT 6
35416: PUSH
35417: LD_INT 46
35419: PUSH
35420: LD_INT 47
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: LIST
35427: IN
35428: IFFALSE 35445
// bpoints := bpoints * 1.2 ;
35430: LD_ADDR_VAR 0 10
35434: PUSH
35435: LD_VAR 0 10
35439: PUSH
35440: LD_REAL  1.20000000000000E+0000
35443: MUL
35444: ST_TO_ADDR
// end ; unit_building :
35445: GO 35459
35447: LD_INT 3
35449: DOUBLE
35450: EQUAL
35451: IFTRUE 35455
35453: GO 35458
35455: POP
// ; end ;
35456: GO 35459
35458: POP
// for j = 1 to 3 do
35459: LD_ADDR_VAR 0 7
35463: PUSH
35464: DOUBLE
35465: LD_INT 1
35467: DEC
35468: ST_TO_ADDR
35469: LD_INT 3
35471: PUSH
35472: FOR_TO
35473: IFFALSE 35526
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35475: LD_ADDR_VAR 0 5
35479: PUSH
35480: LD_VAR 0 5
35484: PPUSH
35485: LD_VAR 0 7
35489: PPUSH
35490: LD_VAR 0 5
35494: PUSH
35495: LD_VAR 0 7
35499: ARRAY
35500: PUSH
35501: LD_VAR 0 9
35505: PUSH
35506: LD_VAR 0 7
35510: ARRAY
35511: PUSH
35512: LD_VAR 0 10
35516: MUL
35517: PLUS
35518: PPUSH
35519: CALL_OW 1
35523: ST_TO_ADDR
35524: GO 35472
35526: POP
35527: POP
// end ;
35528: GO 34007
35530: POP
35531: POP
// result := Replace ( result , 4 , tmp ) ;
35532: LD_ADDR_VAR 0 5
35536: PUSH
35537: LD_VAR 0 5
35541: PPUSH
35542: LD_INT 4
35544: PPUSH
35545: LD_VAR 0 8
35549: PPUSH
35550: CALL_OW 1
35554: ST_TO_ADDR
// end ;
35555: LD_VAR 0 5
35559: RET
// export function DangerAtRange ( unit , range ) ; begin
35560: LD_INT 0
35562: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35563: LD_ADDR_VAR 0 3
35567: PUSH
35568: LD_VAR 0 1
35572: PPUSH
35573: CALL_OW 255
35577: PPUSH
35578: LD_VAR 0 1
35582: PPUSH
35583: CALL_OW 250
35587: PPUSH
35588: LD_VAR 0 1
35592: PPUSH
35593: CALL_OW 251
35597: PPUSH
35598: LD_VAR 0 2
35602: PPUSH
35603: CALL 33859 0 4
35607: ST_TO_ADDR
// end ;
35608: LD_VAR 0 3
35612: RET
// export function DangerInArea ( side , area ) ; begin
35613: LD_INT 0
35615: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35616: LD_ADDR_VAR 0 3
35620: PUSH
35621: LD_VAR 0 2
35625: PPUSH
35626: LD_INT 81
35628: PUSH
35629: LD_VAR 0 1
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PPUSH
35638: CALL_OW 70
35642: ST_TO_ADDR
// end ;
35643: LD_VAR 0 3
35647: RET
// export function IsExtension ( b ) ; begin
35648: LD_INT 0
35650: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35651: LD_ADDR_VAR 0 2
35655: PUSH
35656: LD_VAR 0 1
35660: PUSH
35661: LD_INT 23
35663: PUSH
35664: LD_INT 20
35666: PUSH
35667: LD_INT 22
35669: PUSH
35670: LD_INT 17
35672: PUSH
35673: LD_INT 24
35675: PUSH
35676: LD_INT 21
35678: PUSH
35679: LD_INT 19
35681: PUSH
35682: LD_INT 16
35684: PUSH
35685: LD_INT 25
35687: PUSH
35688: LD_INT 18
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: IN
35703: ST_TO_ADDR
// end ;
35704: LD_VAR 0 2
35708: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35709: LD_INT 0
35711: PPUSH
35712: PPUSH
35713: PPUSH
// result := [ ] ;
35714: LD_ADDR_VAR 0 4
35718: PUSH
35719: EMPTY
35720: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35721: LD_ADDR_VAR 0 5
35725: PUSH
35726: LD_VAR 0 2
35730: PPUSH
35731: LD_INT 21
35733: PUSH
35734: LD_INT 3
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PPUSH
35741: CALL_OW 70
35745: ST_TO_ADDR
// if not tmp then
35746: LD_VAR 0 5
35750: NOT
35751: IFFALSE 35755
// exit ;
35753: GO 35819
// if checkLink then
35755: LD_VAR 0 3
35759: IFFALSE 35809
// begin for i in tmp do
35761: LD_ADDR_VAR 0 6
35765: PUSH
35766: LD_VAR 0 5
35770: PUSH
35771: FOR_IN
35772: IFFALSE 35807
// if GetBase ( i ) <> base then
35774: LD_VAR 0 6
35778: PPUSH
35779: CALL_OW 274
35783: PUSH
35784: LD_VAR 0 1
35788: NONEQUAL
35789: IFFALSE 35805
// ComLinkToBase ( base , i ) ;
35791: LD_VAR 0 1
35795: PPUSH
35796: LD_VAR 0 6
35800: PPUSH
35801: CALL_OW 169
35805: GO 35771
35807: POP
35808: POP
// end ; result := tmp ;
35809: LD_ADDR_VAR 0 4
35813: PUSH
35814: LD_VAR 0 5
35818: ST_TO_ADDR
// end ;
35819: LD_VAR 0 4
35823: RET
// export function ComComplete ( units , b ) ; var i ; begin
35824: LD_INT 0
35826: PPUSH
35827: PPUSH
// if not units then
35828: LD_VAR 0 1
35832: NOT
35833: IFFALSE 35837
// exit ;
35835: GO 35927
// for i in units do
35837: LD_ADDR_VAR 0 4
35841: PUSH
35842: LD_VAR 0 1
35846: PUSH
35847: FOR_IN
35848: IFFALSE 35925
// if BuildingStatus ( b ) = bs_build then
35850: LD_VAR 0 2
35854: PPUSH
35855: CALL_OW 461
35859: PUSH
35860: LD_INT 1
35862: EQUAL
35863: IFFALSE 35923
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35865: LD_VAR 0 4
35869: PPUSH
35870: LD_STRING h
35872: PUSH
35873: LD_VAR 0 2
35877: PPUSH
35878: CALL_OW 250
35882: PUSH
35883: LD_VAR 0 2
35887: PPUSH
35888: CALL_OW 251
35892: PUSH
35893: LD_VAR 0 2
35897: PUSH
35898: LD_INT 0
35900: PUSH
35901: LD_INT 0
35903: PUSH
35904: LD_INT 0
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: PUSH
35916: EMPTY
35917: LIST
35918: PPUSH
35919: CALL_OW 446
35923: GO 35847
35925: POP
35926: POP
// end ;
35927: LD_VAR 0 3
35931: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35932: LD_INT 0
35934: PPUSH
35935: PPUSH
35936: PPUSH
35937: PPUSH
35938: PPUSH
35939: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35940: LD_VAR 0 1
35944: NOT
35945: PUSH
35946: LD_VAR 0 1
35950: PPUSH
35951: CALL_OW 263
35955: PUSH
35956: LD_INT 2
35958: NONEQUAL
35959: OR
35960: IFFALSE 35964
// exit ;
35962: GO 36280
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35964: LD_ADDR_VAR 0 6
35968: PUSH
35969: LD_INT 22
35971: PUSH
35972: LD_VAR 0 1
35976: PPUSH
35977: CALL_OW 255
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 2
35988: PUSH
35989: LD_INT 30
35991: PUSH
35992: LD_INT 36
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 34
36001: PUSH
36002: LD_INT 31
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: LIST
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PPUSH
36018: CALL_OW 69
36022: ST_TO_ADDR
// if not tmp then
36023: LD_VAR 0 6
36027: NOT
36028: IFFALSE 36032
// exit ;
36030: GO 36280
// result := [ ] ;
36032: LD_ADDR_VAR 0 2
36036: PUSH
36037: EMPTY
36038: ST_TO_ADDR
// for i in tmp do
36039: LD_ADDR_VAR 0 3
36043: PUSH
36044: LD_VAR 0 6
36048: PUSH
36049: FOR_IN
36050: IFFALSE 36121
// begin t := UnitsInside ( i ) ;
36052: LD_ADDR_VAR 0 4
36056: PUSH
36057: LD_VAR 0 3
36061: PPUSH
36062: CALL_OW 313
36066: ST_TO_ADDR
// if t then
36067: LD_VAR 0 4
36071: IFFALSE 36119
// for j in t do
36073: LD_ADDR_VAR 0 7
36077: PUSH
36078: LD_VAR 0 4
36082: PUSH
36083: FOR_IN
36084: IFFALSE 36117
// result := Replace ( result , result + 1 , j ) ;
36086: LD_ADDR_VAR 0 2
36090: PUSH
36091: LD_VAR 0 2
36095: PPUSH
36096: LD_VAR 0 2
36100: PUSH
36101: LD_INT 1
36103: PLUS
36104: PPUSH
36105: LD_VAR 0 7
36109: PPUSH
36110: CALL_OW 1
36114: ST_TO_ADDR
36115: GO 36083
36117: POP
36118: POP
// end ;
36119: GO 36049
36121: POP
36122: POP
// if not result then
36123: LD_VAR 0 2
36127: NOT
36128: IFFALSE 36132
// exit ;
36130: GO 36280
// mech := result [ 1 ] ;
36132: LD_ADDR_VAR 0 5
36136: PUSH
36137: LD_VAR 0 2
36141: PUSH
36142: LD_INT 1
36144: ARRAY
36145: ST_TO_ADDR
// if result > 1 then
36146: LD_VAR 0 2
36150: PUSH
36151: LD_INT 1
36153: GREATER
36154: IFFALSE 36266
// begin for i = 2 to result do
36156: LD_ADDR_VAR 0 3
36160: PUSH
36161: DOUBLE
36162: LD_INT 2
36164: DEC
36165: ST_TO_ADDR
36166: LD_VAR 0 2
36170: PUSH
36171: FOR_TO
36172: IFFALSE 36264
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36174: LD_ADDR_VAR 0 4
36178: PUSH
36179: LD_VAR 0 2
36183: PUSH
36184: LD_VAR 0 3
36188: ARRAY
36189: PPUSH
36190: LD_INT 3
36192: PPUSH
36193: CALL_OW 259
36197: PUSH
36198: LD_VAR 0 2
36202: PUSH
36203: LD_VAR 0 3
36207: ARRAY
36208: PPUSH
36209: CALL_OW 432
36213: MINUS
36214: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36215: LD_VAR 0 4
36219: PUSH
36220: LD_VAR 0 5
36224: PPUSH
36225: LD_INT 3
36227: PPUSH
36228: CALL_OW 259
36232: PUSH
36233: LD_VAR 0 5
36237: PPUSH
36238: CALL_OW 432
36242: MINUS
36243: GREATEREQUAL
36244: IFFALSE 36262
// mech := result [ i ] ;
36246: LD_ADDR_VAR 0 5
36250: PUSH
36251: LD_VAR 0 2
36255: PUSH
36256: LD_VAR 0 3
36260: ARRAY
36261: ST_TO_ADDR
// end ;
36262: GO 36171
36264: POP
36265: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36266: LD_VAR 0 1
36270: PPUSH
36271: LD_VAR 0 5
36275: PPUSH
36276: CALL_OW 135
// end ;
36280: LD_VAR 0 2
36284: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36285: LD_INT 0
36287: PPUSH
36288: PPUSH
36289: PPUSH
36290: PPUSH
36291: PPUSH
36292: PPUSH
36293: PPUSH
36294: PPUSH
36295: PPUSH
36296: PPUSH
36297: PPUSH
36298: PPUSH
36299: PPUSH
// result := [ ] ;
36300: LD_ADDR_VAR 0 7
36304: PUSH
36305: EMPTY
36306: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36307: LD_VAR 0 1
36311: PPUSH
36312: CALL_OW 266
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: IN
36327: NOT
36328: IFFALSE 36332
// exit ;
36330: GO 37966
// if name then
36332: LD_VAR 0 3
36336: IFFALSE 36352
// SetBName ( base_dep , name ) ;
36338: LD_VAR 0 1
36342: PPUSH
36343: LD_VAR 0 3
36347: PPUSH
36348: CALL_OW 500
// base := GetBase ( base_dep ) ;
36352: LD_ADDR_VAR 0 15
36356: PUSH
36357: LD_VAR 0 1
36361: PPUSH
36362: CALL_OW 274
36366: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36367: LD_ADDR_VAR 0 16
36371: PUSH
36372: LD_VAR 0 1
36376: PPUSH
36377: CALL_OW 255
36381: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36382: LD_ADDR_VAR 0 17
36386: PUSH
36387: LD_VAR 0 1
36391: PPUSH
36392: CALL_OW 248
36396: ST_TO_ADDR
// if sources then
36397: LD_VAR 0 5
36401: IFFALSE 36448
// for i = 1 to 3 do
36403: LD_ADDR_VAR 0 8
36407: PUSH
36408: DOUBLE
36409: LD_INT 1
36411: DEC
36412: ST_TO_ADDR
36413: LD_INT 3
36415: PUSH
36416: FOR_TO
36417: IFFALSE 36446
// AddResourceType ( base , i , sources [ i ] ) ;
36419: LD_VAR 0 15
36423: PPUSH
36424: LD_VAR 0 8
36428: PPUSH
36429: LD_VAR 0 5
36433: PUSH
36434: LD_VAR 0 8
36438: ARRAY
36439: PPUSH
36440: CALL_OW 276
36444: GO 36416
36446: POP
36447: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36448: LD_ADDR_VAR 0 18
36452: PUSH
36453: LD_VAR 0 15
36457: PPUSH
36458: LD_VAR 0 2
36462: PPUSH
36463: LD_INT 1
36465: PPUSH
36466: CALL 35709 0 3
36470: ST_TO_ADDR
// InitHc ;
36471: CALL_OW 19
// InitUc ;
36475: CALL_OW 18
// uc_side := side ;
36479: LD_ADDR_OWVAR 20
36483: PUSH
36484: LD_VAR 0 16
36488: ST_TO_ADDR
// uc_nation := nation ;
36489: LD_ADDR_OWVAR 21
36493: PUSH
36494: LD_VAR 0 17
36498: ST_TO_ADDR
// if buildings then
36499: LD_VAR 0 18
36503: IFFALSE 37825
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36505: LD_ADDR_VAR 0 19
36509: PUSH
36510: LD_VAR 0 18
36514: PPUSH
36515: LD_INT 2
36517: PUSH
36518: LD_INT 30
36520: PUSH
36521: LD_INT 29
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 30
36530: PUSH
36531: LD_INT 30
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: LIST
36542: PPUSH
36543: CALL_OW 72
36547: ST_TO_ADDR
// if tmp then
36548: LD_VAR 0 19
36552: IFFALSE 36600
// for i in tmp do
36554: LD_ADDR_VAR 0 8
36558: PUSH
36559: LD_VAR 0 19
36563: PUSH
36564: FOR_IN
36565: IFFALSE 36598
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36567: LD_VAR 0 8
36571: PPUSH
36572: CALL_OW 250
36576: PPUSH
36577: LD_VAR 0 8
36581: PPUSH
36582: CALL_OW 251
36586: PPUSH
36587: LD_VAR 0 16
36591: PPUSH
36592: CALL_OW 441
36596: GO 36564
36598: POP
36599: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36600: LD_VAR 0 18
36604: PPUSH
36605: LD_INT 2
36607: PUSH
36608: LD_INT 30
36610: PUSH
36611: LD_INT 32
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 30
36620: PUSH
36621: LD_INT 33
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: LIST
36632: PPUSH
36633: CALL_OW 72
36637: IFFALSE 36725
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36639: LD_ADDR_VAR 0 8
36643: PUSH
36644: LD_VAR 0 18
36648: PPUSH
36649: LD_INT 2
36651: PUSH
36652: LD_INT 30
36654: PUSH
36655: LD_INT 32
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 30
36664: PUSH
36665: LD_INT 33
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: LIST
36676: PPUSH
36677: CALL_OW 72
36681: PUSH
36682: FOR_IN
36683: IFFALSE 36723
// begin if not GetBWeapon ( i ) then
36685: LD_VAR 0 8
36689: PPUSH
36690: CALL_OW 269
36694: NOT
36695: IFFALSE 36721
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36697: LD_VAR 0 8
36701: PPUSH
36702: LD_VAR 0 8
36706: PPUSH
36707: LD_VAR 0 2
36711: PPUSH
36712: CALL 37971 0 2
36716: PPUSH
36717: CALL_OW 431
// end ;
36721: GO 36682
36723: POP
36724: POP
// end ; for i = 1 to personel do
36725: LD_ADDR_VAR 0 8
36729: PUSH
36730: DOUBLE
36731: LD_INT 1
36733: DEC
36734: ST_TO_ADDR
36735: LD_VAR 0 6
36739: PUSH
36740: FOR_TO
36741: IFFALSE 37805
// begin if i > 4 then
36743: LD_VAR 0 8
36747: PUSH
36748: LD_INT 4
36750: GREATER
36751: IFFALSE 36755
// break ;
36753: GO 37805
// case i of 1 :
36755: LD_VAR 0 8
36759: PUSH
36760: LD_INT 1
36762: DOUBLE
36763: EQUAL
36764: IFTRUE 36768
36766: GO 36848
36768: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36769: LD_ADDR_VAR 0 12
36773: PUSH
36774: LD_VAR 0 18
36778: PPUSH
36779: LD_INT 22
36781: PUSH
36782: LD_VAR 0 16
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 58
36793: PUSH
36794: EMPTY
36795: LIST
36796: PUSH
36797: LD_INT 2
36799: PUSH
36800: LD_INT 30
36802: PUSH
36803: LD_INT 32
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 30
36812: PUSH
36813: LD_INT 4
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 30
36822: PUSH
36823: LD_INT 5
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: LIST
36840: PPUSH
36841: CALL_OW 72
36845: ST_TO_ADDR
36846: GO 37070
36848: LD_INT 2
36850: DOUBLE
36851: EQUAL
36852: IFTRUE 36856
36854: GO 36918
36856: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36857: LD_ADDR_VAR 0 12
36861: PUSH
36862: LD_VAR 0 18
36866: PPUSH
36867: LD_INT 22
36869: PUSH
36870: LD_VAR 0 16
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 2
36881: PUSH
36882: LD_INT 30
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 30
36894: PUSH
36895: LD_INT 1
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: LIST
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PPUSH
36911: CALL_OW 72
36915: ST_TO_ADDR
36916: GO 37070
36918: LD_INT 3
36920: DOUBLE
36921: EQUAL
36922: IFTRUE 36926
36924: GO 36988
36926: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36927: LD_ADDR_VAR 0 12
36931: PUSH
36932: LD_VAR 0 18
36936: PPUSH
36937: LD_INT 22
36939: PUSH
36940: LD_VAR 0 16
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 2
36951: PUSH
36952: LD_INT 30
36954: PUSH
36955: LD_INT 2
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 30
36964: PUSH
36965: LD_INT 3
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: LIST
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PPUSH
36981: CALL_OW 72
36985: ST_TO_ADDR
36986: GO 37070
36988: LD_INT 4
36990: DOUBLE
36991: EQUAL
36992: IFTRUE 36996
36994: GO 37069
36996: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36997: LD_ADDR_VAR 0 12
37001: PUSH
37002: LD_VAR 0 18
37006: PPUSH
37007: LD_INT 22
37009: PUSH
37010: LD_VAR 0 16
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 2
37021: PUSH
37022: LD_INT 30
37024: PUSH
37025: LD_INT 6
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 30
37034: PUSH
37035: LD_INT 7
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 30
37044: PUSH
37045: LD_INT 8
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PPUSH
37062: CALL_OW 72
37066: ST_TO_ADDR
37067: GO 37070
37069: POP
// if i = 1 then
37070: LD_VAR 0 8
37074: PUSH
37075: LD_INT 1
37077: EQUAL
37078: IFFALSE 37189
// begin tmp := [ ] ;
37080: LD_ADDR_VAR 0 19
37084: PUSH
37085: EMPTY
37086: ST_TO_ADDR
// for j in f do
37087: LD_ADDR_VAR 0 9
37091: PUSH
37092: LD_VAR 0 12
37096: PUSH
37097: FOR_IN
37098: IFFALSE 37171
// if GetBType ( j ) = b_bunker then
37100: LD_VAR 0 9
37104: PPUSH
37105: CALL_OW 266
37109: PUSH
37110: LD_INT 32
37112: EQUAL
37113: IFFALSE 37140
// tmp := Insert ( tmp , 1 , j ) else
37115: LD_ADDR_VAR 0 19
37119: PUSH
37120: LD_VAR 0 19
37124: PPUSH
37125: LD_INT 1
37127: PPUSH
37128: LD_VAR 0 9
37132: PPUSH
37133: CALL_OW 2
37137: ST_TO_ADDR
37138: GO 37169
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37140: LD_ADDR_VAR 0 19
37144: PUSH
37145: LD_VAR 0 19
37149: PPUSH
37150: LD_VAR 0 19
37154: PUSH
37155: LD_INT 1
37157: PLUS
37158: PPUSH
37159: LD_VAR 0 9
37163: PPUSH
37164: CALL_OW 2
37168: ST_TO_ADDR
37169: GO 37097
37171: POP
37172: POP
// if tmp then
37173: LD_VAR 0 19
37177: IFFALSE 37189
// f := tmp ;
37179: LD_ADDR_VAR 0 12
37183: PUSH
37184: LD_VAR 0 19
37188: ST_TO_ADDR
// end ; x := personel [ i ] ;
37189: LD_ADDR_VAR 0 13
37193: PUSH
37194: LD_VAR 0 6
37198: PUSH
37199: LD_VAR 0 8
37203: ARRAY
37204: ST_TO_ADDR
// if x = - 1 then
37205: LD_VAR 0 13
37209: PUSH
37210: LD_INT 1
37212: NEG
37213: EQUAL
37214: IFFALSE 37423
// begin for j in f do
37216: LD_ADDR_VAR 0 9
37220: PUSH
37221: LD_VAR 0 12
37225: PUSH
37226: FOR_IN
37227: IFFALSE 37419
// repeat InitHc ;
37229: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37233: LD_VAR 0 9
37237: PPUSH
37238: CALL_OW 266
37242: PUSH
37243: LD_INT 5
37245: EQUAL
37246: IFFALSE 37316
// begin if UnitsInside ( j ) < 3 then
37248: LD_VAR 0 9
37252: PPUSH
37253: CALL_OW 313
37257: PUSH
37258: LD_INT 3
37260: LESS
37261: IFFALSE 37297
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37263: LD_INT 0
37265: PPUSH
37266: LD_INT 5
37268: PUSH
37269: LD_INT 8
37271: PUSH
37272: LD_INT 9
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: PUSH
37280: LD_VAR 0 17
37284: ARRAY
37285: PPUSH
37286: LD_VAR 0 4
37290: PPUSH
37291: CALL_OW 380
37295: GO 37314
// PrepareHuman ( false , i , skill ) ;
37297: LD_INT 0
37299: PPUSH
37300: LD_VAR 0 8
37304: PPUSH
37305: LD_VAR 0 4
37309: PPUSH
37310: CALL_OW 380
// end else
37314: GO 37333
// PrepareHuman ( false , i , skill ) ;
37316: LD_INT 0
37318: PPUSH
37319: LD_VAR 0 8
37323: PPUSH
37324: LD_VAR 0 4
37328: PPUSH
37329: CALL_OW 380
// un := CreateHuman ;
37333: LD_ADDR_VAR 0 14
37337: PUSH
37338: CALL_OW 44
37342: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37343: LD_ADDR_VAR 0 7
37347: PUSH
37348: LD_VAR 0 7
37352: PPUSH
37353: LD_INT 1
37355: PPUSH
37356: LD_VAR 0 14
37360: PPUSH
37361: CALL_OW 2
37365: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37366: LD_VAR 0 14
37370: PPUSH
37371: LD_VAR 0 9
37375: PPUSH
37376: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37380: LD_VAR 0 9
37384: PPUSH
37385: CALL_OW 313
37389: PUSH
37390: LD_INT 6
37392: EQUAL
37393: PUSH
37394: LD_VAR 0 9
37398: PPUSH
37399: CALL_OW 266
37403: PUSH
37404: LD_INT 32
37406: PUSH
37407: LD_INT 31
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: IN
37414: OR
37415: IFFALSE 37229
37417: GO 37226
37419: POP
37420: POP
// end else
37421: GO 37803
// for j = 1 to x do
37423: LD_ADDR_VAR 0 9
37427: PUSH
37428: DOUBLE
37429: LD_INT 1
37431: DEC
37432: ST_TO_ADDR
37433: LD_VAR 0 13
37437: PUSH
37438: FOR_TO
37439: IFFALSE 37801
// begin InitHc ;
37441: CALL_OW 19
// if not f then
37445: LD_VAR 0 12
37449: NOT
37450: IFFALSE 37539
// begin PrepareHuman ( false , i , skill ) ;
37452: LD_INT 0
37454: PPUSH
37455: LD_VAR 0 8
37459: PPUSH
37460: LD_VAR 0 4
37464: PPUSH
37465: CALL_OW 380
// un := CreateHuman ;
37469: LD_ADDR_VAR 0 14
37473: PUSH
37474: CALL_OW 44
37478: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37479: LD_ADDR_VAR 0 7
37483: PUSH
37484: LD_VAR 0 7
37488: PPUSH
37489: LD_INT 1
37491: PPUSH
37492: LD_VAR 0 14
37496: PPUSH
37497: CALL_OW 2
37501: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37502: LD_VAR 0 14
37506: PPUSH
37507: LD_VAR 0 1
37511: PPUSH
37512: CALL_OW 250
37516: PPUSH
37517: LD_VAR 0 1
37521: PPUSH
37522: CALL_OW 251
37526: PPUSH
37527: LD_INT 10
37529: PPUSH
37530: LD_INT 0
37532: PPUSH
37533: CALL_OW 50
// continue ;
37537: GO 37438
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37539: LD_VAR 0 12
37543: PUSH
37544: LD_INT 1
37546: ARRAY
37547: PPUSH
37548: CALL_OW 313
37552: PUSH
37553: LD_VAR 0 12
37557: PUSH
37558: LD_INT 1
37560: ARRAY
37561: PPUSH
37562: CALL_OW 266
37566: PUSH
37567: LD_INT 32
37569: PUSH
37570: LD_INT 31
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: IN
37577: AND
37578: PUSH
37579: LD_VAR 0 12
37583: PUSH
37584: LD_INT 1
37586: ARRAY
37587: PPUSH
37588: CALL_OW 313
37592: PUSH
37593: LD_INT 6
37595: EQUAL
37596: OR
37597: IFFALSE 37617
// f := Delete ( f , 1 ) ;
37599: LD_ADDR_VAR 0 12
37603: PUSH
37604: LD_VAR 0 12
37608: PPUSH
37609: LD_INT 1
37611: PPUSH
37612: CALL_OW 3
37616: ST_TO_ADDR
// if not f then
37617: LD_VAR 0 12
37621: NOT
37622: IFFALSE 37640
// begin x := x + 2 ;
37624: LD_ADDR_VAR 0 13
37628: PUSH
37629: LD_VAR 0 13
37633: PUSH
37634: LD_INT 2
37636: PLUS
37637: ST_TO_ADDR
// continue ;
37638: GO 37438
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37640: LD_VAR 0 12
37644: PUSH
37645: LD_INT 1
37647: ARRAY
37648: PPUSH
37649: CALL_OW 266
37653: PUSH
37654: LD_INT 5
37656: EQUAL
37657: IFFALSE 37731
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37659: LD_VAR 0 12
37663: PUSH
37664: LD_INT 1
37666: ARRAY
37667: PPUSH
37668: CALL_OW 313
37672: PUSH
37673: LD_INT 3
37675: LESS
37676: IFFALSE 37712
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37678: LD_INT 0
37680: PPUSH
37681: LD_INT 5
37683: PUSH
37684: LD_INT 8
37686: PUSH
37687: LD_INT 9
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: LIST
37694: PUSH
37695: LD_VAR 0 17
37699: ARRAY
37700: PPUSH
37701: LD_VAR 0 4
37705: PPUSH
37706: CALL_OW 380
37710: GO 37729
// PrepareHuman ( false , i , skill ) ;
37712: LD_INT 0
37714: PPUSH
37715: LD_VAR 0 8
37719: PPUSH
37720: LD_VAR 0 4
37724: PPUSH
37725: CALL_OW 380
// end else
37729: GO 37748
// PrepareHuman ( false , i , skill ) ;
37731: LD_INT 0
37733: PPUSH
37734: LD_VAR 0 8
37738: PPUSH
37739: LD_VAR 0 4
37743: PPUSH
37744: CALL_OW 380
// un := CreateHuman ;
37748: LD_ADDR_VAR 0 14
37752: PUSH
37753: CALL_OW 44
37757: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37758: LD_ADDR_VAR 0 7
37762: PUSH
37763: LD_VAR 0 7
37767: PPUSH
37768: LD_INT 1
37770: PPUSH
37771: LD_VAR 0 14
37775: PPUSH
37776: CALL_OW 2
37780: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37781: LD_VAR 0 14
37785: PPUSH
37786: LD_VAR 0 12
37790: PUSH
37791: LD_INT 1
37793: ARRAY
37794: PPUSH
37795: CALL_OW 52
// end ;
37799: GO 37438
37801: POP
37802: POP
// end ;
37803: GO 36740
37805: POP
37806: POP
// result := result ^ buildings ;
37807: LD_ADDR_VAR 0 7
37811: PUSH
37812: LD_VAR 0 7
37816: PUSH
37817: LD_VAR 0 18
37821: ADD
37822: ST_TO_ADDR
// end else
37823: GO 37966
// begin for i = 1 to personel do
37825: LD_ADDR_VAR 0 8
37829: PUSH
37830: DOUBLE
37831: LD_INT 1
37833: DEC
37834: ST_TO_ADDR
37835: LD_VAR 0 6
37839: PUSH
37840: FOR_TO
37841: IFFALSE 37964
// begin if i > 4 then
37843: LD_VAR 0 8
37847: PUSH
37848: LD_INT 4
37850: GREATER
37851: IFFALSE 37855
// break ;
37853: GO 37964
// x := personel [ i ] ;
37855: LD_ADDR_VAR 0 13
37859: PUSH
37860: LD_VAR 0 6
37864: PUSH
37865: LD_VAR 0 8
37869: ARRAY
37870: ST_TO_ADDR
// if x = - 1 then
37871: LD_VAR 0 13
37875: PUSH
37876: LD_INT 1
37878: NEG
37879: EQUAL
37880: IFFALSE 37884
// continue ;
37882: GO 37840
// PrepareHuman ( false , i , skill ) ;
37884: LD_INT 0
37886: PPUSH
37887: LD_VAR 0 8
37891: PPUSH
37892: LD_VAR 0 4
37896: PPUSH
37897: CALL_OW 380
// un := CreateHuman ;
37901: LD_ADDR_VAR 0 14
37905: PUSH
37906: CALL_OW 44
37910: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37911: LD_VAR 0 14
37915: PPUSH
37916: LD_VAR 0 1
37920: PPUSH
37921: CALL_OW 250
37925: PPUSH
37926: LD_VAR 0 1
37930: PPUSH
37931: CALL_OW 251
37935: PPUSH
37936: LD_INT 10
37938: PPUSH
37939: LD_INT 0
37941: PPUSH
37942: CALL_OW 50
// result := result ^ un ;
37946: LD_ADDR_VAR 0 7
37950: PUSH
37951: LD_VAR 0 7
37955: PUSH
37956: LD_VAR 0 14
37960: ADD
37961: ST_TO_ADDR
// end ;
37962: GO 37840
37964: POP
37965: POP
// end ; end ;
37966: LD_VAR 0 7
37970: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37971: LD_INT 0
37973: PPUSH
37974: PPUSH
37975: PPUSH
37976: PPUSH
37977: PPUSH
37978: PPUSH
37979: PPUSH
37980: PPUSH
37981: PPUSH
37982: PPUSH
37983: PPUSH
37984: PPUSH
37985: PPUSH
37986: PPUSH
37987: PPUSH
37988: PPUSH
// result := false ;
37989: LD_ADDR_VAR 0 3
37993: PUSH
37994: LD_INT 0
37996: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37997: LD_VAR 0 1
38001: NOT
38002: PUSH
38003: LD_VAR 0 1
38007: PPUSH
38008: CALL_OW 266
38012: PUSH
38013: LD_INT 32
38015: PUSH
38016: LD_INT 33
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: IN
38023: NOT
38024: OR
38025: IFFALSE 38029
// exit ;
38027: GO 39138
// nat := GetNation ( tower ) ;
38029: LD_ADDR_VAR 0 12
38033: PUSH
38034: LD_VAR 0 1
38038: PPUSH
38039: CALL_OW 248
38043: ST_TO_ADDR
// side := GetSide ( tower ) ;
38044: LD_ADDR_VAR 0 16
38048: PUSH
38049: LD_VAR 0 1
38053: PPUSH
38054: CALL_OW 255
38058: ST_TO_ADDR
// x := GetX ( tower ) ;
38059: LD_ADDR_VAR 0 10
38063: PUSH
38064: LD_VAR 0 1
38068: PPUSH
38069: CALL_OW 250
38073: ST_TO_ADDR
// y := GetY ( tower ) ;
38074: LD_ADDR_VAR 0 11
38078: PUSH
38079: LD_VAR 0 1
38083: PPUSH
38084: CALL_OW 251
38088: ST_TO_ADDR
// if not x or not y then
38089: LD_VAR 0 10
38093: NOT
38094: PUSH
38095: LD_VAR 0 11
38099: NOT
38100: OR
38101: IFFALSE 38105
// exit ;
38103: GO 39138
// weapon := 0 ;
38105: LD_ADDR_VAR 0 18
38109: PUSH
38110: LD_INT 0
38112: ST_TO_ADDR
// fac_list := [ ] ;
38113: LD_ADDR_VAR 0 17
38117: PUSH
38118: EMPTY
38119: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38120: LD_ADDR_VAR 0 6
38124: PUSH
38125: LD_VAR 0 1
38129: PPUSH
38130: CALL_OW 274
38134: PPUSH
38135: LD_VAR 0 2
38139: PPUSH
38140: LD_INT 0
38142: PPUSH
38143: CALL 35709 0 3
38147: PPUSH
38148: LD_INT 30
38150: PUSH
38151: LD_INT 3
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PPUSH
38158: CALL_OW 72
38162: ST_TO_ADDR
// if not factories then
38163: LD_VAR 0 6
38167: NOT
38168: IFFALSE 38172
// exit ;
38170: GO 39138
// for i in factories do
38172: LD_ADDR_VAR 0 8
38176: PUSH
38177: LD_VAR 0 6
38181: PUSH
38182: FOR_IN
38183: IFFALSE 38208
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38185: LD_ADDR_VAR 0 17
38189: PUSH
38190: LD_VAR 0 17
38194: PUSH
38195: LD_VAR 0 8
38199: PPUSH
38200: CALL_OW 478
38204: UNION
38205: ST_TO_ADDR
38206: GO 38182
38208: POP
38209: POP
// if not fac_list then
38210: LD_VAR 0 17
38214: NOT
38215: IFFALSE 38219
// exit ;
38217: GO 39138
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38219: LD_ADDR_VAR 0 5
38223: PUSH
38224: LD_INT 4
38226: PUSH
38227: LD_INT 5
38229: PUSH
38230: LD_INT 9
38232: PUSH
38233: LD_INT 10
38235: PUSH
38236: LD_INT 6
38238: PUSH
38239: LD_INT 7
38241: PUSH
38242: LD_INT 11
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 27
38256: PUSH
38257: LD_INT 28
38259: PUSH
38260: LD_INT 26
38262: PUSH
38263: LD_INT 30
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 43
38274: PUSH
38275: LD_INT 44
38277: PUSH
38278: LD_INT 46
38280: PUSH
38281: LD_INT 45
38283: PUSH
38284: LD_INT 47
38286: PUSH
38287: LD_INT 49
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: LIST
38302: PUSH
38303: LD_VAR 0 12
38307: ARRAY
38308: ST_TO_ADDR
// list := list isect fac_list ;
38309: LD_ADDR_VAR 0 5
38313: PUSH
38314: LD_VAR 0 5
38318: PUSH
38319: LD_VAR 0 17
38323: ISECT
38324: ST_TO_ADDR
// if not list then
38325: LD_VAR 0 5
38329: NOT
38330: IFFALSE 38334
// exit ;
38332: GO 39138
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38334: LD_VAR 0 12
38338: PUSH
38339: LD_INT 3
38341: EQUAL
38342: PUSH
38343: LD_INT 49
38345: PUSH
38346: LD_VAR 0 5
38350: IN
38351: AND
38352: PUSH
38353: LD_INT 31
38355: PPUSH
38356: LD_VAR 0 16
38360: PPUSH
38361: CALL_OW 321
38365: PUSH
38366: LD_INT 2
38368: EQUAL
38369: AND
38370: IFFALSE 38430
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38372: LD_INT 22
38374: PUSH
38375: LD_VAR 0 16
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 35
38386: PUSH
38387: LD_INT 49
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 91
38396: PUSH
38397: LD_VAR 0 1
38401: PUSH
38402: LD_INT 10
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: LIST
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: LIST
38414: PPUSH
38415: CALL_OW 69
38419: NOT
38420: IFFALSE 38430
// weapon := ru_time_lapser ;
38422: LD_ADDR_VAR 0 18
38426: PUSH
38427: LD_INT 49
38429: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38430: LD_VAR 0 12
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: LD_INT 2
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: IN
38445: PUSH
38446: LD_INT 11
38448: PUSH
38449: LD_VAR 0 5
38453: IN
38454: PUSH
38455: LD_INT 30
38457: PUSH
38458: LD_VAR 0 5
38462: IN
38463: OR
38464: AND
38465: PUSH
38466: LD_INT 6
38468: PPUSH
38469: LD_VAR 0 16
38473: PPUSH
38474: CALL_OW 321
38478: PUSH
38479: LD_INT 2
38481: EQUAL
38482: AND
38483: IFFALSE 38648
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38485: LD_INT 22
38487: PUSH
38488: LD_VAR 0 16
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 2
38499: PUSH
38500: LD_INT 35
38502: PUSH
38503: LD_INT 11
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 35
38512: PUSH
38513: LD_INT 30
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 91
38527: PUSH
38528: LD_VAR 0 1
38532: PUSH
38533: LD_INT 18
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: LIST
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: LIST
38545: PPUSH
38546: CALL_OW 69
38550: NOT
38551: PUSH
38552: LD_INT 22
38554: PUSH
38555: LD_VAR 0 16
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: LD_INT 30
38569: PUSH
38570: LD_INT 32
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 30
38579: PUSH
38580: LD_INT 33
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 91
38594: PUSH
38595: LD_VAR 0 1
38599: PUSH
38600: LD_INT 12
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: LIST
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: LIST
38612: PUSH
38613: EMPTY
38614: LIST
38615: PPUSH
38616: CALL_OW 69
38620: PUSH
38621: LD_INT 2
38623: GREATER
38624: AND
38625: IFFALSE 38648
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38627: LD_ADDR_VAR 0 18
38631: PUSH
38632: LD_INT 11
38634: PUSH
38635: LD_INT 30
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_VAR 0 12
38646: ARRAY
38647: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38648: LD_VAR 0 18
38652: NOT
38653: PUSH
38654: LD_INT 40
38656: PPUSH
38657: LD_VAR 0 16
38661: PPUSH
38662: CALL_OW 321
38666: PUSH
38667: LD_INT 2
38669: EQUAL
38670: AND
38671: PUSH
38672: LD_INT 7
38674: PUSH
38675: LD_VAR 0 5
38679: IN
38680: PUSH
38681: LD_INT 28
38683: PUSH
38684: LD_VAR 0 5
38688: IN
38689: OR
38690: PUSH
38691: LD_INT 45
38693: PUSH
38694: LD_VAR 0 5
38698: IN
38699: OR
38700: AND
38701: IFFALSE 38955
// begin hex := GetHexInfo ( x , y ) ;
38703: LD_ADDR_VAR 0 4
38707: PUSH
38708: LD_VAR 0 10
38712: PPUSH
38713: LD_VAR 0 11
38717: PPUSH
38718: CALL_OW 546
38722: ST_TO_ADDR
// if hex [ 1 ] then
38723: LD_VAR 0 4
38727: PUSH
38728: LD_INT 1
38730: ARRAY
38731: IFFALSE 38735
// exit ;
38733: GO 39138
// height := hex [ 2 ] ;
38735: LD_ADDR_VAR 0 15
38739: PUSH
38740: LD_VAR 0 4
38744: PUSH
38745: LD_INT 2
38747: ARRAY
38748: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38749: LD_ADDR_VAR 0 14
38753: PUSH
38754: LD_INT 0
38756: PUSH
38757: LD_INT 2
38759: PUSH
38760: LD_INT 3
38762: PUSH
38763: LD_INT 5
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: ST_TO_ADDR
// for i in tmp do
38772: LD_ADDR_VAR 0 8
38776: PUSH
38777: LD_VAR 0 14
38781: PUSH
38782: FOR_IN
38783: IFFALSE 38953
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38785: LD_ADDR_VAR 0 9
38789: PUSH
38790: LD_VAR 0 10
38794: PPUSH
38795: LD_VAR 0 8
38799: PPUSH
38800: LD_INT 5
38802: PPUSH
38803: CALL_OW 272
38807: PUSH
38808: LD_VAR 0 11
38812: PPUSH
38813: LD_VAR 0 8
38817: PPUSH
38818: LD_INT 5
38820: PPUSH
38821: CALL_OW 273
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38830: LD_VAR 0 9
38834: PUSH
38835: LD_INT 1
38837: ARRAY
38838: PPUSH
38839: LD_VAR 0 9
38843: PUSH
38844: LD_INT 2
38846: ARRAY
38847: PPUSH
38848: CALL_OW 488
38852: IFFALSE 38951
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38854: LD_ADDR_VAR 0 4
38858: PUSH
38859: LD_VAR 0 9
38863: PUSH
38864: LD_INT 1
38866: ARRAY
38867: PPUSH
38868: LD_VAR 0 9
38872: PUSH
38873: LD_INT 2
38875: ARRAY
38876: PPUSH
38877: CALL_OW 546
38881: ST_TO_ADDR
// if hex [ 1 ] then
38882: LD_VAR 0 4
38886: PUSH
38887: LD_INT 1
38889: ARRAY
38890: IFFALSE 38894
// continue ;
38892: GO 38782
// h := hex [ 2 ] ;
38894: LD_ADDR_VAR 0 13
38898: PUSH
38899: LD_VAR 0 4
38903: PUSH
38904: LD_INT 2
38906: ARRAY
38907: ST_TO_ADDR
// if h + 7 < height then
38908: LD_VAR 0 13
38912: PUSH
38913: LD_INT 7
38915: PLUS
38916: PUSH
38917: LD_VAR 0 15
38921: LESS
38922: IFFALSE 38951
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38924: LD_ADDR_VAR 0 18
38928: PUSH
38929: LD_INT 7
38931: PUSH
38932: LD_INT 28
38934: PUSH
38935: LD_INT 45
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: LIST
38942: PUSH
38943: LD_VAR 0 12
38947: ARRAY
38948: ST_TO_ADDR
// break ;
38949: GO 38953
// end ; end ; end ;
38951: GO 38782
38953: POP
38954: POP
// end ; if not weapon then
38955: LD_VAR 0 18
38959: NOT
38960: IFFALSE 39020
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38962: LD_ADDR_VAR 0 5
38966: PUSH
38967: LD_VAR 0 5
38971: PUSH
38972: LD_INT 11
38974: PUSH
38975: LD_INT 30
38977: PUSH
38978: LD_INT 49
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: LIST
38985: DIFF
38986: ST_TO_ADDR
// if not list then
38987: LD_VAR 0 5
38991: NOT
38992: IFFALSE 38996
// exit ;
38994: GO 39138
// weapon := list [ rand ( 1 , list ) ] ;
38996: LD_ADDR_VAR 0 18
39000: PUSH
39001: LD_VAR 0 5
39005: PUSH
39006: LD_INT 1
39008: PPUSH
39009: LD_VAR 0 5
39013: PPUSH
39014: CALL_OW 12
39018: ARRAY
39019: ST_TO_ADDR
// end ; if weapon then
39020: LD_VAR 0 18
39024: IFFALSE 39138
// begin tmp := CostOfWeapon ( weapon ) ;
39026: LD_ADDR_VAR 0 14
39030: PUSH
39031: LD_VAR 0 18
39035: PPUSH
39036: CALL_OW 451
39040: ST_TO_ADDR
// j := GetBase ( tower ) ;
39041: LD_ADDR_VAR 0 9
39045: PUSH
39046: LD_VAR 0 1
39050: PPUSH
39051: CALL_OW 274
39055: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39056: LD_VAR 0 9
39060: PPUSH
39061: LD_INT 1
39063: PPUSH
39064: CALL_OW 275
39068: PUSH
39069: LD_VAR 0 14
39073: PUSH
39074: LD_INT 1
39076: ARRAY
39077: GREATEREQUAL
39078: PUSH
39079: LD_VAR 0 9
39083: PPUSH
39084: LD_INT 2
39086: PPUSH
39087: CALL_OW 275
39091: PUSH
39092: LD_VAR 0 14
39096: PUSH
39097: LD_INT 2
39099: ARRAY
39100: GREATEREQUAL
39101: AND
39102: PUSH
39103: LD_VAR 0 9
39107: PPUSH
39108: LD_INT 3
39110: PPUSH
39111: CALL_OW 275
39115: PUSH
39116: LD_VAR 0 14
39120: PUSH
39121: LD_INT 3
39123: ARRAY
39124: GREATEREQUAL
39125: AND
39126: IFFALSE 39138
// result := weapon ;
39128: LD_ADDR_VAR 0 3
39132: PUSH
39133: LD_VAR 0 18
39137: ST_TO_ADDR
// end ; end ;
39138: LD_VAR 0 3
39142: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39143: LD_INT 0
39145: PPUSH
39146: PPUSH
// result := true ;
39147: LD_ADDR_VAR 0 3
39151: PUSH
39152: LD_INT 1
39154: ST_TO_ADDR
// if array1 = array2 then
39155: LD_VAR 0 1
39159: PUSH
39160: LD_VAR 0 2
39164: EQUAL
39165: IFFALSE 39225
// begin for i = 1 to array1 do
39167: LD_ADDR_VAR 0 4
39171: PUSH
39172: DOUBLE
39173: LD_INT 1
39175: DEC
39176: ST_TO_ADDR
39177: LD_VAR 0 1
39181: PUSH
39182: FOR_TO
39183: IFFALSE 39221
// if array1 [ i ] <> array2 [ i ] then
39185: LD_VAR 0 1
39189: PUSH
39190: LD_VAR 0 4
39194: ARRAY
39195: PUSH
39196: LD_VAR 0 2
39200: PUSH
39201: LD_VAR 0 4
39205: ARRAY
39206: NONEQUAL
39207: IFFALSE 39219
// begin result := false ;
39209: LD_ADDR_VAR 0 3
39213: PUSH
39214: LD_INT 0
39216: ST_TO_ADDR
// break ;
39217: GO 39221
// end ;
39219: GO 39182
39221: POP
39222: POP
// end else
39223: GO 39233
// result := false ;
39225: LD_ADDR_VAR 0 3
39229: PUSH
39230: LD_INT 0
39232: ST_TO_ADDR
// end ;
39233: LD_VAR 0 3
39237: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39238: LD_INT 0
39240: PPUSH
39241: PPUSH
// if not array1 or not array2 then
39242: LD_VAR 0 1
39246: NOT
39247: PUSH
39248: LD_VAR 0 2
39252: NOT
39253: OR
39254: IFFALSE 39258
// exit ;
39256: GO 39322
// result := true ;
39258: LD_ADDR_VAR 0 3
39262: PUSH
39263: LD_INT 1
39265: ST_TO_ADDR
// for i = 1 to array1 do
39266: LD_ADDR_VAR 0 4
39270: PUSH
39271: DOUBLE
39272: LD_INT 1
39274: DEC
39275: ST_TO_ADDR
39276: LD_VAR 0 1
39280: PUSH
39281: FOR_TO
39282: IFFALSE 39320
// if array1 [ i ] <> array2 [ i ] then
39284: LD_VAR 0 1
39288: PUSH
39289: LD_VAR 0 4
39293: ARRAY
39294: PUSH
39295: LD_VAR 0 2
39299: PUSH
39300: LD_VAR 0 4
39304: ARRAY
39305: NONEQUAL
39306: IFFALSE 39318
// begin result := false ;
39308: LD_ADDR_VAR 0 3
39312: PUSH
39313: LD_INT 0
39315: ST_TO_ADDR
// break ;
39316: GO 39320
// end ;
39318: GO 39281
39320: POP
39321: POP
// end ;
39322: LD_VAR 0 3
39326: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39327: LD_INT 0
39329: PPUSH
39330: PPUSH
39331: PPUSH
// pom := GetBase ( fac ) ;
39332: LD_ADDR_VAR 0 5
39336: PUSH
39337: LD_VAR 0 1
39341: PPUSH
39342: CALL_OW 274
39346: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39347: LD_ADDR_VAR 0 4
39351: PUSH
39352: LD_VAR 0 2
39356: PUSH
39357: LD_INT 1
39359: ARRAY
39360: PPUSH
39361: LD_VAR 0 2
39365: PUSH
39366: LD_INT 2
39368: ARRAY
39369: PPUSH
39370: LD_VAR 0 2
39374: PUSH
39375: LD_INT 3
39377: ARRAY
39378: PPUSH
39379: LD_VAR 0 2
39383: PUSH
39384: LD_INT 4
39386: ARRAY
39387: PPUSH
39388: CALL_OW 449
39392: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39393: LD_ADDR_VAR 0 3
39397: PUSH
39398: LD_VAR 0 5
39402: PPUSH
39403: LD_INT 1
39405: PPUSH
39406: CALL_OW 275
39410: PUSH
39411: LD_VAR 0 4
39415: PUSH
39416: LD_INT 1
39418: ARRAY
39419: GREATEREQUAL
39420: PUSH
39421: LD_VAR 0 5
39425: PPUSH
39426: LD_INT 2
39428: PPUSH
39429: CALL_OW 275
39433: PUSH
39434: LD_VAR 0 4
39438: PUSH
39439: LD_INT 2
39441: ARRAY
39442: GREATEREQUAL
39443: AND
39444: PUSH
39445: LD_VAR 0 5
39449: PPUSH
39450: LD_INT 3
39452: PPUSH
39453: CALL_OW 275
39457: PUSH
39458: LD_VAR 0 4
39462: PUSH
39463: LD_INT 3
39465: ARRAY
39466: GREATEREQUAL
39467: AND
39468: ST_TO_ADDR
// end ;
39469: LD_VAR 0 3
39473: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39474: LD_INT 0
39476: PPUSH
39477: PPUSH
39478: PPUSH
39479: PPUSH
// pom := GetBase ( building ) ;
39480: LD_ADDR_VAR 0 3
39484: PUSH
39485: LD_VAR 0 1
39489: PPUSH
39490: CALL_OW 274
39494: ST_TO_ADDR
// if not pom then
39495: LD_VAR 0 3
39499: NOT
39500: IFFALSE 39504
// exit ;
39502: GO 39674
// btype := GetBType ( building ) ;
39504: LD_ADDR_VAR 0 5
39508: PUSH
39509: LD_VAR 0 1
39513: PPUSH
39514: CALL_OW 266
39518: ST_TO_ADDR
// if btype = b_armoury then
39519: LD_VAR 0 5
39523: PUSH
39524: LD_INT 4
39526: EQUAL
39527: IFFALSE 39537
// btype := b_barracks ;
39529: LD_ADDR_VAR 0 5
39533: PUSH
39534: LD_INT 5
39536: ST_TO_ADDR
// if btype = b_depot then
39537: LD_VAR 0 5
39541: PUSH
39542: LD_INT 0
39544: EQUAL
39545: IFFALSE 39555
// btype := b_warehouse ;
39547: LD_ADDR_VAR 0 5
39551: PUSH
39552: LD_INT 1
39554: ST_TO_ADDR
// if btype = b_workshop then
39555: LD_VAR 0 5
39559: PUSH
39560: LD_INT 2
39562: EQUAL
39563: IFFALSE 39573
// btype := b_factory ;
39565: LD_ADDR_VAR 0 5
39569: PUSH
39570: LD_INT 3
39572: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39573: LD_ADDR_VAR 0 4
39577: PUSH
39578: LD_VAR 0 5
39582: PPUSH
39583: LD_VAR 0 1
39587: PPUSH
39588: CALL_OW 248
39592: PPUSH
39593: CALL_OW 450
39597: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39598: LD_ADDR_VAR 0 2
39602: PUSH
39603: LD_VAR 0 3
39607: PPUSH
39608: LD_INT 1
39610: PPUSH
39611: CALL_OW 275
39615: PUSH
39616: LD_VAR 0 4
39620: PUSH
39621: LD_INT 1
39623: ARRAY
39624: GREATEREQUAL
39625: PUSH
39626: LD_VAR 0 3
39630: PPUSH
39631: LD_INT 2
39633: PPUSH
39634: CALL_OW 275
39638: PUSH
39639: LD_VAR 0 4
39643: PUSH
39644: LD_INT 2
39646: ARRAY
39647: GREATEREQUAL
39648: AND
39649: PUSH
39650: LD_VAR 0 3
39654: PPUSH
39655: LD_INT 3
39657: PPUSH
39658: CALL_OW 275
39662: PUSH
39663: LD_VAR 0 4
39667: PUSH
39668: LD_INT 3
39670: ARRAY
39671: GREATEREQUAL
39672: AND
39673: ST_TO_ADDR
// end ;
39674: LD_VAR 0 2
39678: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39679: LD_INT 0
39681: PPUSH
39682: PPUSH
39683: PPUSH
// pom := GetBase ( building ) ;
39684: LD_ADDR_VAR 0 4
39688: PUSH
39689: LD_VAR 0 1
39693: PPUSH
39694: CALL_OW 274
39698: ST_TO_ADDR
// if not pom then
39699: LD_VAR 0 4
39703: NOT
39704: IFFALSE 39708
// exit ;
39706: GO 39809
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39708: LD_ADDR_VAR 0 5
39712: PUSH
39713: LD_VAR 0 2
39717: PPUSH
39718: LD_VAR 0 1
39722: PPUSH
39723: CALL_OW 248
39727: PPUSH
39728: CALL_OW 450
39732: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39733: LD_ADDR_VAR 0 3
39737: PUSH
39738: LD_VAR 0 4
39742: PPUSH
39743: LD_INT 1
39745: PPUSH
39746: CALL_OW 275
39750: PUSH
39751: LD_VAR 0 5
39755: PUSH
39756: LD_INT 1
39758: ARRAY
39759: GREATEREQUAL
39760: PUSH
39761: LD_VAR 0 4
39765: PPUSH
39766: LD_INT 2
39768: PPUSH
39769: CALL_OW 275
39773: PUSH
39774: LD_VAR 0 5
39778: PUSH
39779: LD_INT 2
39781: ARRAY
39782: GREATEREQUAL
39783: AND
39784: PUSH
39785: LD_VAR 0 4
39789: PPUSH
39790: LD_INT 3
39792: PPUSH
39793: CALL_OW 275
39797: PUSH
39798: LD_VAR 0 5
39802: PUSH
39803: LD_INT 3
39805: ARRAY
39806: GREATEREQUAL
39807: AND
39808: ST_TO_ADDR
// end ;
39809: LD_VAR 0 3
39813: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39814: LD_INT 0
39816: PPUSH
39817: PPUSH
39818: PPUSH
39819: PPUSH
39820: PPUSH
39821: PPUSH
39822: PPUSH
39823: PPUSH
39824: PPUSH
39825: PPUSH
39826: PPUSH
// result := false ;
39827: LD_ADDR_VAR 0 8
39831: PUSH
39832: LD_INT 0
39834: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39835: LD_VAR 0 5
39839: NOT
39840: PUSH
39841: LD_VAR 0 1
39845: NOT
39846: OR
39847: PUSH
39848: LD_VAR 0 2
39852: NOT
39853: OR
39854: PUSH
39855: LD_VAR 0 3
39859: NOT
39860: OR
39861: IFFALSE 39865
// exit ;
39863: GO 40679
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39865: LD_ADDR_VAR 0 14
39869: PUSH
39870: LD_VAR 0 1
39874: PPUSH
39875: LD_VAR 0 2
39879: PPUSH
39880: LD_VAR 0 3
39884: PPUSH
39885: LD_VAR 0 4
39889: PPUSH
39890: LD_VAR 0 5
39894: PUSH
39895: LD_INT 1
39897: ARRAY
39898: PPUSH
39899: CALL_OW 248
39903: PPUSH
39904: LD_INT 0
39906: PPUSH
39907: CALL 41912 0 6
39911: ST_TO_ADDR
// if not hexes then
39912: LD_VAR 0 14
39916: NOT
39917: IFFALSE 39921
// exit ;
39919: GO 40679
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39921: LD_ADDR_VAR 0 17
39925: PUSH
39926: LD_VAR 0 5
39930: PPUSH
39931: LD_INT 22
39933: PUSH
39934: LD_VAR 0 13
39938: PPUSH
39939: CALL_OW 255
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 2
39950: PUSH
39951: LD_INT 30
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 30
39963: PUSH
39964: LD_INT 1
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: LIST
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PPUSH
39980: CALL_OW 72
39984: ST_TO_ADDR
// for i = 1 to hexes do
39985: LD_ADDR_VAR 0 9
39989: PUSH
39990: DOUBLE
39991: LD_INT 1
39993: DEC
39994: ST_TO_ADDR
39995: LD_VAR 0 14
39999: PUSH
40000: FOR_TO
40001: IFFALSE 40677
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40003: LD_ADDR_VAR 0 13
40007: PUSH
40008: LD_VAR 0 14
40012: PUSH
40013: LD_VAR 0 9
40017: ARRAY
40018: PUSH
40019: LD_INT 1
40021: ARRAY
40022: PPUSH
40023: LD_VAR 0 14
40027: PUSH
40028: LD_VAR 0 9
40032: ARRAY
40033: PUSH
40034: LD_INT 2
40036: ARRAY
40037: PPUSH
40038: CALL_OW 428
40042: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40043: LD_VAR 0 14
40047: PUSH
40048: LD_VAR 0 9
40052: ARRAY
40053: PUSH
40054: LD_INT 1
40056: ARRAY
40057: PPUSH
40058: LD_VAR 0 14
40062: PUSH
40063: LD_VAR 0 9
40067: ARRAY
40068: PUSH
40069: LD_INT 2
40071: ARRAY
40072: PPUSH
40073: CALL_OW 351
40077: PUSH
40078: LD_VAR 0 14
40082: PUSH
40083: LD_VAR 0 9
40087: ARRAY
40088: PUSH
40089: LD_INT 1
40091: ARRAY
40092: PPUSH
40093: LD_VAR 0 14
40097: PUSH
40098: LD_VAR 0 9
40102: ARRAY
40103: PUSH
40104: LD_INT 2
40106: ARRAY
40107: PPUSH
40108: CALL_OW 488
40112: NOT
40113: OR
40114: PUSH
40115: LD_VAR 0 13
40119: PPUSH
40120: CALL_OW 247
40124: PUSH
40125: LD_INT 3
40127: EQUAL
40128: OR
40129: IFFALSE 40135
// exit ;
40131: POP
40132: POP
40133: GO 40679
// if not tmp then
40135: LD_VAR 0 13
40139: NOT
40140: IFFALSE 40144
// continue ;
40142: GO 40000
// result := true ;
40144: LD_ADDR_VAR 0 8
40148: PUSH
40149: LD_INT 1
40151: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40152: LD_VAR 0 6
40156: PUSH
40157: LD_VAR 0 13
40161: PPUSH
40162: CALL_OW 247
40166: PUSH
40167: LD_INT 2
40169: EQUAL
40170: AND
40171: PUSH
40172: LD_VAR 0 13
40176: PPUSH
40177: CALL_OW 263
40181: PUSH
40182: LD_INT 1
40184: EQUAL
40185: AND
40186: IFFALSE 40350
// begin if IsDrivenBy ( tmp ) then
40188: LD_VAR 0 13
40192: PPUSH
40193: CALL_OW 311
40197: IFFALSE 40201
// continue ;
40199: GO 40000
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40201: LD_VAR 0 6
40205: PPUSH
40206: LD_INT 3
40208: PUSH
40209: LD_INT 60
40211: PUSH
40212: EMPTY
40213: LIST
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 3
40221: PUSH
40222: LD_INT 55
40224: PUSH
40225: EMPTY
40226: LIST
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PPUSH
40236: CALL_OW 72
40240: IFFALSE 40348
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40242: LD_ADDR_VAR 0 18
40246: PUSH
40247: LD_VAR 0 6
40251: PPUSH
40252: LD_INT 3
40254: PUSH
40255: LD_INT 60
40257: PUSH
40258: EMPTY
40259: LIST
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 3
40267: PUSH
40268: LD_INT 55
40270: PUSH
40271: EMPTY
40272: LIST
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PPUSH
40282: CALL_OW 72
40286: PUSH
40287: LD_INT 1
40289: ARRAY
40290: ST_TO_ADDR
// if IsInUnit ( driver ) then
40291: LD_VAR 0 18
40295: PPUSH
40296: CALL_OW 310
40300: IFFALSE 40311
// ComExit ( driver ) ;
40302: LD_VAR 0 18
40306: PPUSH
40307: CALL 65673 0 1
// AddComEnterUnit ( driver , tmp ) ;
40311: LD_VAR 0 18
40315: PPUSH
40316: LD_VAR 0 13
40320: PPUSH
40321: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40325: LD_VAR 0 18
40329: PPUSH
40330: LD_VAR 0 7
40334: PPUSH
40335: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40339: LD_VAR 0 18
40343: PPUSH
40344: CALL_OW 181
// end ; continue ;
40348: GO 40000
// end ; if not cleaners or not tmp in cleaners then
40350: LD_VAR 0 6
40354: NOT
40355: PUSH
40356: LD_VAR 0 13
40360: PUSH
40361: LD_VAR 0 6
40365: IN
40366: NOT
40367: OR
40368: IFFALSE 40675
// begin if dep then
40370: LD_VAR 0 17
40374: IFFALSE 40510
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40376: LD_ADDR_VAR 0 16
40380: PUSH
40381: LD_VAR 0 17
40385: PUSH
40386: LD_INT 1
40388: ARRAY
40389: PPUSH
40390: CALL_OW 250
40394: PPUSH
40395: LD_VAR 0 17
40399: PUSH
40400: LD_INT 1
40402: ARRAY
40403: PPUSH
40404: CALL_OW 254
40408: PPUSH
40409: LD_INT 5
40411: PPUSH
40412: CALL_OW 272
40416: PUSH
40417: LD_VAR 0 17
40421: PUSH
40422: LD_INT 1
40424: ARRAY
40425: PPUSH
40426: CALL_OW 251
40430: PPUSH
40431: LD_VAR 0 17
40435: PUSH
40436: LD_INT 1
40438: ARRAY
40439: PPUSH
40440: CALL_OW 254
40444: PPUSH
40445: LD_INT 5
40447: PPUSH
40448: CALL_OW 273
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40457: LD_VAR 0 16
40461: PUSH
40462: LD_INT 1
40464: ARRAY
40465: PPUSH
40466: LD_VAR 0 16
40470: PUSH
40471: LD_INT 2
40473: ARRAY
40474: PPUSH
40475: CALL_OW 488
40479: IFFALSE 40510
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40481: LD_VAR 0 13
40485: PPUSH
40486: LD_VAR 0 16
40490: PUSH
40491: LD_INT 1
40493: ARRAY
40494: PPUSH
40495: LD_VAR 0 16
40499: PUSH
40500: LD_INT 2
40502: ARRAY
40503: PPUSH
40504: CALL_OW 111
// continue ;
40508: GO 40000
// end ; end ; r := GetDir ( tmp ) ;
40510: LD_ADDR_VAR 0 15
40514: PUSH
40515: LD_VAR 0 13
40519: PPUSH
40520: CALL_OW 254
40524: ST_TO_ADDR
// if r = 5 then
40525: LD_VAR 0 15
40529: PUSH
40530: LD_INT 5
40532: EQUAL
40533: IFFALSE 40543
// r := 0 ;
40535: LD_ADDR_VAR 0 15
40539: PUSH
40540: LD_INT 0
40542: ST_TO_ADDR
// for j = r to 5 do
40543: LD_ADDR_VAR 0 10
40547: PUSH
40548: DOUBLE
40549: LD_VAR 0 15
40553: DEC
40554: ST_TO_ADDR
40555: LD_INT 5
40557: PUSH
40558: FOR_TO
40559: IFFALSE 40673
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40561: LD_ADDR_VAR 0 11
40565: PUSH
40566: LD_VAR 0 13
40570: PPUSH
40571: CALL_OW 250
40575: PPUSH
40576: LD_VAR 0 10
40580: PPUSH
40581: LD_INT 2
40583: PPUSH
40584: CALL_OW 272
40588: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40589: LD_ADDR_VAR 0 12
40593: PUSH
40594: LD_VAR 0 13
40598: PPUSH
40599: CALL_OW 251
40603: PPUSH
40604: LD_VAR 0 10
40608: PPUSH
40609: LD_INT 2
40611: PPUSH
40612: CALL_OW 273
40616: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40617: LD_VAR 0 11
40621: PPUSH
40622: LD_VAR 0 12
40626: PPUSH
40627: CALL_OW 488
40631: PUSH
40632: LD_VAR 0 11
40636: PPUSH
40637: LD_VAR 0 12
40641: PPUSH
40642: CALL_OW 428
40646: NOT
40647: AND
40648: IFFALSE 40671
// begin ComMoveXY ( tmp , _x , _y ) ;
40650: LD_VAR 0 13
40654: PPUSH
40655: LD_VAR 0 11
40659: PPUSH
40660: LD_VAR 0 12
40664: PPUSH
40665: CALL_OW 111
// break ;
40669: GO 40673
// end ; end ;
40671: GO 40558
40673: POP
40674: POP
// end ; end ;
40675: GO 40000
40677: POP
40678: POP
// end ;
40679: LD_VAR 0 8
40683: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40684: LD_INT 0
40686: PPUSH
// result := true ;
40687: LD_ADDR_VAR 0 3
40691: PUSH
40692: LD_INT 1
40694: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40695: LD_VAR 0 2
40699: PUSH
40700: LD_INT 24
40702: DOUBLE
40703: EQUAL
40704: IFTRUE 40714
40706: LD_INT 33
40708: DOUBLE
40709: EQUAL
40710: IFTRUE 40714
40712: GO 40739
40714: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40715: LD_ADDR_VAR 0 3
40719: PUSH
40720: LD_INT 32
40722: PPUSH
40723: LD_VAR 0 1
40727: PPUSH
40728: CALL_OW 321
40732: PUSH
40733: LD_INT 2
40735: EQUAL
40736: ST_TO_ADDR
40737: GO 41055
40739: LD_INT 20
40741: DOUBLE
40742: EQUAL
40743: IFTRUE 40747
40745: GO 40772
40747: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40748: LD_ADDR_VAR 0 3
40752: PUSH
40753: LD_INT 6
40755: PPUSH
40756: LD_VAR 0 1
40760: PPUSH
40761: CALL_OW 321
40765: PUSH
40766: LD_INT 2
40768: EQUAL
40769: ST_TO_ADDR
40770: GO 41055
40772: LD_INT 22
40774: DOUBLE
40775: EQUAL
40776: IFTRUE 40786
40778: LD_INT 36
40780: DOUBLE
40781: EQUAL
40782: IFTRUE 40786
40784: GO 40811
40786: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40787: LD_ADDR_VAR 0 3
40791: PUSH
40792: LD_INT 15
40794: PPUSH
40795: LD_VAR 0 1
40799: PPUSH
40800: CALL_OW 321
40804: PUSH
40805: LD_INT 2
40807: EQUAL
40808: ST_TO_ADDR
40809: GO 41055
40811: LD_INT 30
40813: DOUBLE
40814: EQUAL
40815: IFTRUE 40819
40817: GO 40844
40819: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40820: LD_ADDR_VAR 0 3
40824: PUSH
40825: LD_INT 20
40827: PPUSH
40828: LD_VAR 0 1
40832: PPUSH
40833: CALL_OW 321
40837: PUSH
40838: LD_INT 2
40840: EQUAL
40841: ST_TO_ADDR
40842: GO 41055
40844: LD_INT 28
40846: DOUBLE
40847: EQUAL
40848: IFTRUE 40858
40850: LD_INT 21
40852: DOUBLE
40853: EQUAL
40854: IFTRUE 40858
40856: GO 40883
40858: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40859: LD_ADDR_VAR 0 3
40863: PUSH
40864: LD_INT 21
40866: PPUSH
40867: LD_VAR 0 1
40871: PPUSH
40872: CALL_OW 321
40876: PUSH
40877: LD_INT 2
40879: EQUAL
40880: ST_TO_ADDR
40881: GO 41055
40883: LD_INT 16
40885: DOUBLE
40886: EQUAL
40887: IFTRUE 40891
40889: GO 40916
40891: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40892: LD_ADDR_VAR 0 3
40896: PUSH
40897: LD_INT 84
40899: PPUSH
40900: LD_VAR 0 1
40904: PPUSH
40905: CALL_OW 321
40909: PUSH
40910: LD_INT 2
40912: EQUAL
40913: ST_TO_ADDR
40914: GO 41055
40916: LD_INT 19
40918: DOUBLE
40919: EQUAL
40920: IFTRUE 40930
40922: LD_INT 23
40924: DOUBLE
40925: EQUAL
40926: IFTRUE 40930
40928: GO 40955
40930: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40931: LD_ADDR_VAR 0 3
40935: PUSH
40936: LD_INT 83
40938: PPUSH
40939: LD_VAR 0 1
40943: PPUSH
40944: CALL_OW 321
40948: PUSH
40949: LD_INT 2
40951: EQUAL
40952: ST_TO_ADDR
40953: GO 41055
40955: LD_INT 17
40957: DOUBLE
40958: EQUAL
40959: IFTRUE 40963
40961: GO 40988
40963: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40964: LD_ADDR_VAR 0 3
40968: PUSH
40969: LD_INT 39
40971: PPUSH
40972: LD_VAR 0 1
40976: PPUSH
40977: CALL_OW 321
40981: PUSH
40982: LD_INT 2
40984: EQUAL
40985: ST_TO_ADDR
40986: GO 41055
40988: LD_INT 18
40990: DOUBLE
40991: EQUAL
40992: IFTRUE 40996
40994: GO 41021
40996: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40997: LD_ADDR_VAR 0 3
41001: PUSH
41002: LD_INT 40
41004: PPUSH
41005: LD_VAR 0 1
41009: PPUSH
41010: CALL_OW 321
41014: PUSH
41015: LD_INT 2
41017: EQUAL
41018: ST_TO_ADDR
41019: GO 41055
41021: LD_INT 27
41023: DOUBLE
41024: EQUAL
41025: IFTRUE 41029
41027: GO 41054
41029: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41030: LD_ADDR_VAR 0 3
41034: PUSH
41035: LD_INT 35
41037: PPUSH
41038: LD_VAR 0 1
41042: PPUSH
41043: CALL_OW 321
41047: PUSH
41048: LD_INT 2
41050: EQUAL
41051: ST_TO_ADDR
41052: GO 41055
41054: POP
// end ;
41055: LD_VAR 0 3
41059: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41060: LD_INT 0
41062: PPUSH
41063: PPUSH
41064: PPUSH
41065: PPUSH
41066: PPUSH
41067: PPUSH
41068: PPUSH
41069: PPUSH
41070: PPUSH
41071: PPUSH
41072: PPUSH
// result := false ;
41073: LD_ADDR_VAR 0 6
41077: PUSH
41078: LD_INT 0
41080: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41081: LD_VAR 0 1
41085: NOT
41086: PUSH
41087: LD_VAR 0 1
41091: PPUSH
41092: CALL_OW 266
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: IN
41107: NOT
41108: OR
41109: PUSH
41110: LD_VAR 0 2
41114: NOT
41115: OR
41116: PUSH
41117: LD_VAR 0 5
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: LD_INT 2
41130: PUSH
41131: LD_INT 3
41133: PUSH
41134: LD_INT 4
41136: PUSH
41137: LD_INT 5
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: IN
41148: NOT
41149: OR
41150: PUSH
41151: LD_VAR 0 3
41155: PPUSH
41156: LD_VAR 0 4
41160: PPUSH
41161: CALL_OW 488
41165: NOT
41166: OR
41167: IFFALSE 41171
// exit ;
41169: GO 41907
// side := GetSide ( depot ) ;
41171: LD_ADDR_VAR 0 9
41175: PUSH
41176: LD_VAR 0 1
41180: PPUSH
41181: CALL_OW 255
41185: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41186: LD_VAR 0 9
41190: PPUSH
41191: LD_VAR 0 2
41195: PPUSH
41196: CALL 40684 0 2
41200: NOT
41201: IFFALSE 41205
// exit ;
41203: GO 41907
// pom := GetBase ( depot ) ;
41205: LD_ADDR_VAR 0 10
41209: PUSH
41210: LD_VAR 0 1
41214: PPUSH
41215: CALL_OW 274
41219: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41220: LD_ADDR_VAR 0 11
41224: PUSH
41225: LD_VAR 0 2
41229: PPUSH
41230: LD_VAR 0 1
41234: PPUSH
41235: CALL_OW 248
41239: PPUSH
41240: CALL_OW 450
41244: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41245: LD_VAR 0 10
41249: PPUSH
41250: LD_INT 1
41252: PPUSH
41253: CALL_OW 275
41257: PUSH
41258: LD_VAR 0 11
41262: PUSH
41263: LD_INT 1
41265: ARRAY
41266: GREATEREQUAL
41267: PUSH
41268: LD_VAR 0 10
41272: PPUSH
41273: LD_INT 2
41275: PPUSH
41276: CALL_OW 275
41280: PUSH
41281: LD_VAR 0 11
41285: PUSH
41286: LD_INT 2
41288: ARRAY
41289: GREATEREQUAL
41290: AND
41291: PUSH
41292: LD_VAR 0 10
41296: PPUSH
41297: LD_INT 3
41299: PPUSH
41300: CALL_OW 275
41304: PUSH
41305: LD_VAR 0 11
41309: PUSH
41310: LD_INT 3
41312: ARRAY
41313: GREATEREQUAL
41314: AND
41315: NOT
41316: IFFALSE 41320
// exit ;
41318: GO 41907
// if GetBType ( depot ) = b_depot then
41320: LD_VAR 0 1
41324: PPUSH
41325: CALL_OW 266
41329: PUSH
41330: LD_INT 0
41332: EQUAL
41333: IFFALSE 41345
// dist := 28 else
41335: LD_ADDR_VAR 0 14
41339: PUSH
41340: LD_INT 28
41342: ST_TO_ADDR
41343: GO 41353
// dist := 36 ;
41345: LD_ADDR_VAR 0 14
41349: PUSH
41350: LD_INT 36
41352: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41353: LD_VAR 0 1
41357: PPUSH
41358: LD_VAR 0 3
41362: PPUSH
41363: LD_VAR 0 4
41367: PPUSH
41368: CALL_OW 297
41372: PUSH
41373: LD_VAR 0 14
41377: GREATER
41378: IFFALSE 41382
// exit ;
41380: GO 41907
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41382: LD_ADDR_VAR 0 12
41386: PUSH
41387: LD_VAR 0 2
41391: PPUSH
41392: LD_VAR 0 3
41396: PPUSH
41397: LD_VAR 0 4
41401: PPUSH
41402: LD_VAR 0 5
41406: PPUSH
41407: LD_VAR 0 1
41411: PPUSH
41412: CALL_OW 248
41416: PPUSH
41417: LD_INT 0
41419: PPUSH
41420: CALL 41912 0 6
41424: ST_TO_ADDR
// if not hexes then
41425: LD_VAR 0 12
41429: NOT
41430: IFFALSE 41434
// exit ;
41432: GO 41907
// hex := GetHexInfo ( x , y ) ;
41434: LD_ADDR_VAR 0 15
41438: PUSH
41439: LD_VAR 0 3
41443: PPUSH
41444: LD_VAR 0 4
41448: PPUSH
41449: CALL_OW 546
41453: ST_TO_ADDR
// if hex [ 1 ] then
41454: LD_VAR 0 15
41458: PUSH
41459: LD_INT 1
41461: ARRAY
41462: IFFALSE 41466
// exit ;
41464: GO 41907
// height := hex [ 2 ] ;
41466: LD_ADDR_VAR 0 13
41470: PUSH
41471: LD_VAR 0 15
41475: PUSH
41476: LD_INT 2
41478: ARRAY
41479: ST_TO_ADDR
// for i = 1 to hexes do
41480: LD_ADDR_VAR 0 7
41484: PUSH
41485: DOUBLE
41486: LD_INT 1
41488: DEC
41489: ST_TO_ADDR
41490: LD_VAR 0 12
41494: PUSH
41495: FOR_TO
41496: IFFALSE 41826
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41498: LD_VAR 0 12
41502: PUSH
41503: LD_VAR 0 7
41507: ARRAY
41508: PUSH
41509: LD_INT 1
41511: ARRAY
41512: PPUSH
41513: LD_VAR 0 12
41517: PUSH
41518: LD_VAR 0 7
41522: ARRAY
41523: PUSH
41524: LD_INT 2
41526: ARRAY
41527: PPUSH
41528: CALL_OW 488
41532: NOT
41533: PUSH
41534: LD_VAR 0 12
41538: PUSH
41539: LD_VAR 0 7
41543: ARRAY
41544: PUSH
41545: LD_INT 1
41547: ARRAY
41548: PPUSH
41549: LD_VAR 0 12
41553: PUSH
41554: LD_VAR 0 7
41558: ARRAY
41559: PUSH
41560: LD_INT 2
41562: ARRAY
41563: PPUSH
41564: CALL_OW 428
41568: PUSH
41569: LD_INT 0
41571: GREATER
41572: OR
41573: PUSH
41574: LD_VAR 0 12
41578: PUSH
41579: LD_VAR 0 7
41583: ARRAY
41584: PUSH
41585: LD_INT 1
41587: ARRAY
41588: PPUSH
41589: LD_VAR 0 12
41593: PUSH
41594: LD_VAR 0 7
41598: ARRAY
41599: PUSH
41600: LD_INT 2
41602: ARRAY
41603: PPUSH
41604: CALL_OW 351
41608: OR
41609: IFFALSE 41615
// exit ;
41611: POP
41612: POP
41613: GO 41907
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41615: LD_ADDR_VAR 0 8
41619: PUSH
41620: LD_VAR 0 12
41624: PUSH
41625: LD_VAR 0 7
41629: ARRAY
41630: PUSH
41631: LD_INT 1
41633: ARRAY
41634: PPUSH
41635: LD_VAR 0 12
41639: PUSH
41640: LD_VAR 0 7
41644: ARRAY
41645: PUSH
41646: LD_INT 2
41648: ARRAY
41649: PPUSH
41650: CALL_OW 546
41654: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41655: LD_VAR 0 8
41659: PUSH
41660: LD_INT 1
41662: ARRAY
41663: PUSH
41664: LD_VAR 0 8
41668: PUSH
41669: LD_INT 2
41671: ARRAY
41672: PUSH
41673: LD_VAR 0 13
41677: PUSH
41678: LD_INT 2
41680: PLUS
41681: GREATER
41682: OR
41683: PUSH
41684: LD_VAR 0 8
41688: PUSH
41689: LD_INT 2
41691: ARRAY
41692: PUSH
41693: LD_VAR 0 13
41697: PUSH
41698: LD_INT 2
41700: MINUS
41701: LESS
41702: OR
41703: PUSH
41704: LD_VAR 0 8
41708: PUSH
41709: LD_INT 3
41711: ARRAY
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: LD_INT 8
41718: PUSH
41719: LD_INT 9
41721: PUSH
41722: LD_INT 10
41724: PUSH
41725: LD_INT 11
41727: PUSH
41728: LD_INT 12
41730: PUSH
41731: LD_INT 13
41733: PUSH
41734: LD_INT 16
41736: PUSH
41737: LD_INT 17
41739: PUSH
41740: LD_INT 18
41742: PUSH
41743: LD_INT 19
41745: PUSH
41746: LD_INT 20
41748: PUSH
41749: LD_INT 21
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: IN
41767: NOT
41768: OR
41769: PUSH
41770: LD_VAR 0 8
41774: PUSH
41775: LD_INT 5
41777: ARRAY
41778: NOT
41779: OR
41780: PUSH
41781: LD_VAR 0 8
41785: PUSH
41786: LD_INT 6
41788: ARRAY
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: LD_INT 2
41795: PUSH
41796: LD_INT 7
41798: PUSH
41799: LD_INT 9
41801: PUSH
41802: LD_INT 10
41804: PUSH
41805: LD_INT 11
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: IN
41816: NOT
41817: OR
41818: IFFALSE 41824
// exit ;
41820: POP
41821: POP
41822: GO 41907
// end ;
41824: GO 41495
41826: POP
41827: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41828: LD_VAR 0 9
41832: PPUSH
41833: LD_VAR 0 3
41837: PPUSH
41838: LD_VAR 0 4
41842: PPUSH
41843: LD_INT 20
41845: PPUSH
41846: CALL 33859 0 4
41850: PUSH
41851: LD_INT 4
41853: ARRAY
41854: IFFALSE 41858
// exit ;
41856: GO 41907
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41858: LD_VAR 0 2
41862: PUSH
41863: LD_INT 29
41865: PUSH
41866: LD_INT 30
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: IN
41873: PUSH
41874: LD_VAR 0 3
41878: PPUSH
41879: LD_VAR 0 4
41883: PPUSH
41884: LD_VAR 0 9
41888: PPUSH
41889: CALL_OW 440
41893: NOT
41894: AND
41895: IFFALSE 41899
// exit ;
41897: GO 41907
// result := true ;
41899: LD_ADDR_VAR 0 6
41903: PUSH
41904: LD_INT 1
41906: ST_TO_ADDR
// end ;
41907: LD_VAR 0 6
41911: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41912: LD_INT 0
41914: PPUSH
41915: PPUSH
41916: PPUSH
41917: PPUSH
41918: PPUSH
41919: PPUSH
41920: PPUSH
41921: PPUSH
41922: PPUSH
41923: PPUSH
41924: PPUSH
41925: PPUSH
41926: PPUSH
41927: PPUSH
41928: PPUSH
41929: PPUSH
41930: PPUSH
41931: PPUSH
41932: PPUSH
41933: PPUSH
41934: PPUSH
41935: PPUSH
41936: PPUSH
41937: PPUSH
41938: PPUSH
41939: PPUSH
41940: PPUSH
41941: PPUSH
41942: PPUSH
41943: PPUSH
41944: PPUSH
41945: PPUSH
41946: PPUSH
41947: PPUSH
41948: PPUSH
41949: PPUSH
41950: PPUSH
41951: PPUSH
41952: PPUSH
41953: PPUSH
41954: PPUSH
41955: PPUSH
41956: PPUSH
41957: PPUSH
41958: PPUSH
41959: PPUSH
41960: PPUSH
41961: PPUSH
41962: PPUSH
41963: PPUSH
41964: PPUSH
41965: PPUSH
41966: PPUSH
41967: PPUSH
41968: PPUSH
41969: PPUSH
41970: PPUSH
41971: PPUSH
// result = [ ] ;
41972: LD_ADDR_VAR 0 7
41976: PUSH
41977: EMPTY
41978: ST_TO_ADDR
// temp_list = [ ] ;
41979: LD_ADDR_VAR 0 9
41983: PUSH
41984: EMPTY
41985: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41986: LD_VAR 0 4
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: LD_INT 2
41999: PUSH
42000: LD_INT 3
42002: PUSH
42003: LD_INT 4
42005: PUSH
42006: LD_INT 5
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: IN
42017: NOT
42018: PUSH
42019: LD_VAR 0 1
42023: PUSH
42024: LD_INT 0
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: IN
42034: PUSH
42035: LD_VAR 0 5
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: LD_INT 3
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: LIST
42053: IN
42054: NOT
42055: AND
42056: OR
42057: IFFALSE 42061
// exit ;
42059: GO 60452
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42061: LD_VAR 0 1
42065: PUSH
42066: LD_INT 6
42068: PUSH
42069: LD_INT 7
42071: PUSH
42072: LD_INT 8
42074: PUSH
42075: LD_INT 13
42077: PUSH
42078: LD_INT 12
42080: PUSH
42081: LD_INT 15
42083: PUSH
42084: LD_INT 11
42086: PUSH
42087: LD_INT 14
42089: PUSH
42090: LD_INT 10
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: IN
42104: IFFALSE 42114
// btype = b_lab ;
42106: LD_ADDR_VAR 0 1
42110: PUSH
42111: LD_INT 6
42113: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42114: LD_VAR 0 6
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: LD_INT 2
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: LIST
42132: IN
42133: NOT
42134: PUSH
42135: LD_VAR 0 1
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: LD_INT 2
42148: PUSH
42149: LD_INT 3
42151: PUSH
42152: LD_INT 6
42154: PUSH
42155: LD_INT 36
42157: PUSH
42158: LD_INT 4
42160: PUSH
42161: LD_INT 5
42163: PUSH
42164: LD_INT 31
42166: PUSH
42167: LD_INT 32
42169: PUSH
42170: LD_INT 33
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: IN
42186: NOT
42187: PUSH
42188: LD_VAR 0 6
42192: PUSH
42193: LD_INT 1
42195: EQUAL
42196: AND
42197: OR
42198: PUSH
42199: LD_VAR 0 1
42203: PUSH
42204: LD_INT 2
42206: PUSH
42207: LD_INT 3
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: IN
42214: NOT
42215: PUSH
42216: LD_VAR 0 6
42220: PUSH
42221: LD_INT 2
42223: EQUAL
42224: AND
42225: OR
42226: IFFALSE 42236
// mode = 0 ;
42228: LD_ADDR_VAR 0 6
42232: PUSH
42233: LD_INT 0
42235: ST_TO_ADDR
// case mode of 0 :
42236: LD_VAR 0 6
42240: PUSH
42241: LD_INT 0
42243: DOUBLE
42244: EQUAL
42245: IFTRUE 42249
42247: GO 53702
42249: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42250: LD_ADDR_VAR 0 11
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 1
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: LD_INT 1
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 1
42308: NEG
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: LD_INT 1
42323: NEG
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: LD_INT 2
42335: NEG
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: LD_INT 2
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 2
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 1
42385: NEG
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: LD_INT 3
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: LD_INT 3
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: LD_INT 2
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42443: LD_ADDR_VAR 0 12
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 1
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: LD_INT 1
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 2
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 1
42555: NEG
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 2
42566: NEG
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 2
42577: NEG
42578: PUSH
42579: LD_INT 1
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 2
42589: NEG
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 3
42600: NEG
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 3
42611: NEG
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42639: LD_ADDR_VAR 0 13
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 1
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: LD_INT 1
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: NEG
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: LD_INT 1
42712: NEG
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: LD_INT 2
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 2
42732: PUSH
42733: LD_INT 1
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 2
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 1
42752: PUSH
42753: LD_INT 2
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 2
42774: NEG
42775: PUSH
42776: LD_INT 2
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 2
42786: NEG
42787: PUSH
42788: LD_INT 3
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 3
42798: NEG
42799: PUSH
42800: LD_INT 2
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 3
42810: NEG
42811: PUSH
42812: LD_INT 3
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42838: LD_ADDR_VAR 0 14
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: NEG
42920: PUSH
42921: LD_INT 2
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: LD_INT 2
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: LD_INT 1
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: LD_INT 2
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: LD_INT 2
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: LD_INT 3
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: LD_INT 3
42999: NEG
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: LD_INT 2
43010: NEG
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43034: LD_ADDR_VAR 0 15
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: NEG
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 2
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 1
43146: NEG
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 2
43157: NEG
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 2
43168: NEG
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 2
43180: PUSH
43181: LD_INT 1
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 3
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 3
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43227: LD_ADDR_VAR 0 16
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: NEG
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: NEG
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: LD_INT 2
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 2
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 2
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: LD_INT 2
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 2
43350: NEG
43351: PUSH
43352: LD_INT 1
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 2
43362: NEG
43363: PUSH
43364: LD_INT 2
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 3
43374: PUSH
43375: LD_INT 2
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 3
43384: PUSH
43385: LD_INT 3
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 2
43394: PUSH
43395: LD_INT 3
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43420: LD_ADDR_VAR 0 17
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: LD_INT 2
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: LD_INT 2
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: LD_INT 2
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: LD_INT 2
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 2
43596: NEG
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 2
43607: NEG
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 2
43619: NEG
43620: PUSH
43621: LD_INT 2
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43650: LD_ADDR_VAR 0 18
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: PUSH
43710: LD_INT 0
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 1
43719: NEG
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: LD_INT 2
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: LD_INT 2
43746: NEG
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 2
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 2
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: LD_INT 2
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 1
43795: PUSH
43796: LD_INT 2
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 1
43815: NEG
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 2
43826: NEG
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 2
43837: NEG
43838: PUSH
43839: LD_INT 1
43841: NEG
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 2
43849: NEG
43850: PUSH
43851: LD_INT 2
43853: NEG
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43880: LD_ADDR_VAR 0 19
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: LD_INT 1
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: LD_INT 2
43965: NEG
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: LD_INT 2
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 2
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 2
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: LD_INT 2
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: LD_INT 2
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 0
44035: PUSH
44036: LD_INT 2
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 2
44056: NEG
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 2
44067: NEG
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 2
44079: NEG
44080: PUSH
44081: LD_INT 2
44083: NEG
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44110: LD_ADDR_VAR 0 20
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_INT 2
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 2
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 2
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 2
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: LD_INT 2
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: NEG
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 2
44286: NEG
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 2
44297: NEG
44298: PUSH
44299: LD_INT 1
44301: NEG
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 2
44309: NEG
44310: PUSH
44311: LD_INT 2
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44340: LD_ADDR_VAR 0 21
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: LD_INT 2
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 2
44516: NEG
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 2
44527: NEG
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: NEG
44540: PUSH
44541: LD_INT 2
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44570: LD_ADDR_VAR 0 22
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: LD_INT 1
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 1
44639: NEG
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: LD_INT 2
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: LD_INT 2
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: LD_INT 1
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 2
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: LD_INT 1
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: LD_INT 2
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 2
44746: NEG
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 2
44757: NEG
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 2
44769: NEG
44770: PUSH
44771: LD_INT 2
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44800: LD_ADDR_VAR 0 23
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: LD_INT 2
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 2
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 2
44976: NEG
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 2
44987: NEG
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: NEG
45000: PUSH
45001: LD_INT 2
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 2
45011: NEG
45012: PUSH
45013: LD_INT 3
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: LD_INT 3
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 2
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45080: LD_ADDR_VAR 0 24
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: LD_INT 1
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: LD_INT 2
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: LD_INT 2
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 2
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: LD_INT 2
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: NEG
45280: PUSH
45281: LD_INT 2
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: LD_INT 2
45294: NEG
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 2
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 3
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 3
45323: PUSH
45324: LD_INT 2
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45356: LD_ADDR_VAR 0 25
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 1
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: NEG
45438: PUSH
45439: LD_INT 2
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: LD_INT 2
45452: NEG
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 2
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 2
45491: PUSH
45492: LD_INT 2
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: LD_INT 2
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: LD_INT 2
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: NEG
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 2
45555: NEG
45556: PUSH
45557: LD_INT 2
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 3
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 3
45577: PUSH
45578: LD_INT 2
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 2
45587: PUSH
45588: LD_INT 3
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: LD_INT 3
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45630: LD_ADDR_VAR 0 26
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 2
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 2
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 2
45806: NEG
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 2
45817: NEG
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: LD_INT 2
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: LD_INT 3
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: LD_INT 3
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45906: LD_ADDR_VAR 0 27
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: LD_INT 2
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: LD_INT 2
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 2
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 2
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 2
46105: NEG
46106: PUSH
46107: LD_INT 2
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: LD_INT 2
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 2
46128: NEG
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 3
46139: NEG
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 3
46151: NEG
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46186: LD_ADDR_VAR 0 28
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: LD_INT 2
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: LD_INT 2
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 2
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: LD_INT 1
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 2
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 2
46362: NEG
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 2
46385: NEG
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 2
46397: NEG
46398: PUSH
46399: LD_INT 3
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: LD_INT 3
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 3
46421: NEG
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 3
46433: NEG
46434: PUSH
46435: LD_INT 2
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46468: LD_ADDR_VAR 0 29
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: LD_INT 1
46541: NEG
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: LD_INT 2
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: LD_INT 2
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 2
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 2
46646: NEG
46647: PUSH
46648: LD_INT 2
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: LD_INT 3
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 3
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: LD_INT 3
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 3
46712: NEG
46713: PUSH
46714: LD_INT 2
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46747: LD_ADDR_VAR 0 30
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 2
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: LD_INT 1
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 2
46924: NEG
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: LD_INT 3
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 3
46959: PUSH
46960: LD_INT 2
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: LD_INT 3
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 2
46979: NEG
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 3
46990: NEG
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47025: LD_ADDR_VAR 0 31
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 2
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: LD_INT 2
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 2
47190: NEG
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 2
47202: NEG
47203: PUSH
47204: LD_INT 2
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: LD_INT 3
47218: NEG
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 3
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 3
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: LD_INT 2
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 3
47268: NEG
47269: PUSH
47270: LD_INT 2
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47303: LD_ADDR_VAR 0 32
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: LD_INT 2
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 2
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 2
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: LD_INT 2
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: LD_INT 2
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: LD_INT 1
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 2
47469: NEG
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: LD_INT 3
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 3
47515: PUSH
47516: LD_INT 2
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: LD_INT 3
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 2
47535: NEG
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 3
47546: NEG
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47581: LD_ADDR_VAR 0 33
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 1
47639: NEG
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: LD_INT 2
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 2
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 2
47736: NEG
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: NEG
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 2
47759: NEG
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: LD_INT 3
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 3
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 3
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 3
47825: NEG
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47860: LD_ADDR_VAR 0 34
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 2
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 2
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 2
48016: NEG
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: LD_INT 2
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: LD_INT 3
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: LD_INT 2
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 3
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 2
48084: PUSH
48085: LD_INT 3
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 2
48094: NEG
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 3
48105: NEG
48106: PUSH
48107: LD_INT 1
48109: NEG
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48140: LD_ADDR_VAR 0 35
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 2
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48252: LD_ADDR_VAR 0 36
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: LD_INT 2
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: LD_INT 2
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48364: LD_ADDR_VAR 0 37
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: LD_INT 0
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 1
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48476: LD_ADDR_VAR 0 38
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: LD_INT 1
48496: NEG
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48588: LD_ADDR_VAR 0 39
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48700: LD_ADDR_VAR 0 40
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: LD_INT 1
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48812: LD_ADDR_VAR 0 41
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: LD_INT 2
48897: NEG
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 2
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 2
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 2
48936: PUSH
48937: LD_INT 2
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: LD_INT 2
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 2
48967: NEG
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 2
48978: NEG
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 2
49002: NEG
49003: PUSH
49004: LD_INT 3
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 2
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 3
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 3
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 3
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 3
49055: PUSH
49056: LD_INT 3
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: LD_INT 3
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 3
49086: NEG
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 3
49097: NEG
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 3
49109: NEG
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 3
49121: NEG
49122: PUSH
49123: LD_INT 3
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49162: LD_ADDR_VAR 0 42
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: NEG
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: LD_INT 2
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: LD_INT 1
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: LD_INT 1
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: LD_INT 2
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: LD_INT 3
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: LD_INT 3
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: LD_INT 3
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: LD_INT 2
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 3
49398: PUSH
49399: LD_INT 2
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 3
49408: PUSH
49409: LD_INT 3
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 2
49418: PUSH
49419: LD_INT 3
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: LD_INT 3
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: LD_INT 3
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 3
49459: NEG
49460: PUSH
49461: LD_INT 2
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 3
49471: NEG
49472: PUSH
49473: LD_INT 3
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49512: LD_ADDR_VAR 0 43
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: LD_INT 2
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: LD_INT 2
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 2
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 2
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: LD_INT 2
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 2
49678: NEG
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: LD_INT 3
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: LD_INT 3
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 2
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 3
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 3
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: LD_INT 3
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 3
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 2
49797: NEG
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 3
49808: NEG
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 3
49819: NEG
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49860: LD_ADDR_VAR 0 44
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: LD_INT 2
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: LD_INT 2
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 2
50015: NEG
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 2
50026: NEG
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 2
50038: NEG
50039: PUSH
50040: LD_INT 2
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 2
50050: NEG
50051: PUSH
50052: LD_INT 3
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 3
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 3
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 3
50093: PUSH
50094: LD_INT 2
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 3
50103: PUSH
50104: LD_INT 3
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: LD_INT 3
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 3
50134: NEG
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 3
50145: NEG
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 3
50157: NEG
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 3
50169: NEG
50170: PUSH
50171: LD_INT 3
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50210: LD_ADDR_VAR 0 45
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 2
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 2
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 2
50376: NEG
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: LD_INT 3
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: LD_INT 3
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 3
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: LD_INT 2
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 3
50446: PUSH
50447: LD_INT 2
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 3
50456: PUSH
50457: LD_INT 3
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: LD_INT 3
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: LD_INT 3
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 3
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 3
50507: NEG
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 3
50519: NEG
50520: PUSH
50521: LD_INT 3
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50560: LD_ADDR_VAR 0 46
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: LD_INT 2
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 2
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 1
50715: NEG
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 2
50737: NEG
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: LD_INT 3
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: LD_INT 3
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 2
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 3
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 3
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: LD_INT 3
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: LD_INT 3
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: LD_INT 2
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 2
50845: NEG
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 3
50856: NEG
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 3
50867: NEG
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50908: LD_ADDR_VAR 0 47
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: LD_INT 2
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: LD_INT 2
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 2
51035: NEG
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51059: LD_ADDR_VAR 0 48
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: LD_INT 2
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: LD_INT 2
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51206: LD_ADDR_VAR 0 49
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 2
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 2
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 2
51318: PUSH
51319: LD_INT 2
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: LD_INT 2
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51350: LD_ADDR_VAR 0 50
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 2
51441: PUSH
51442: LD_INT 2
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: LD_INT 2
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51494: LD_ADDR_VAR 0 51
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 0
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 2
51606: NEG
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51641: LD_ADDR_VAR 0 52
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 2
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 2
51745: NEG
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 2
51756: NEG
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 2
51768: NEG
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51792: LD_ADDR_VAR 0 53
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: LD_INT 0
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: LD_INT 2
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: LD_INT 2
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 2
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 2
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: LD_INT 2
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: LD_INT 2
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: LD_INT 1
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 2
51968: NEG
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: NEG
51992: PUSH
51993: LD_INT 2
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52022: LD_ADDR_VAR 0 54
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: LD_INT 1
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: LD_INT 1
52095: NEG
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: LD_INT 2
52107: NEG
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: LD_INT 2
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 2
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: LD_INT 2
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: LD_INT 1
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 2
52198: NEG
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 2
52221: NEG
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52252: LD_ADDR_VAR 0 55
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: LD_INT 1
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: LD_INT 2
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: LD_INT 2
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: LD_INT 2
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: LD_INT 2
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: LD_INT 2
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 2
52428: NEG
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 2
52451: NEG
52452: PUSH
52453: LD_INT 2
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52482: LD_ADDR_VAR 0 56
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: LD_INT 2
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: LD_INT 2
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 2
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 2
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 2
52617: PUSH
52618: LD_INT 2
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: LD_INT 2
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: LD_INT 2
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: LD_INT 1
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 2
52658: NEG
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 2
52669: NEG
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 2
52681: NEG
52682: PUSH
52683: LD_INT 2
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52712: LD_ADDR_VAR 0 57
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: LD_INT 1
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: LD_INT 1
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: NEG
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: LD_INT 2
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: LD_INT 2
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 2
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 2
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: LD_INT 2
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: LD_INT 2
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 2
52888: NEG
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: NEG
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 2
52911: NEG
52912: PUSH
52913: LD_INT 2
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52942: LD_ADDR_VAR 0 58
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: LD_INT 2
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: LD_INT 2
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 2
53067: PUSH
53068: LD_INT 1
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 2
53077: PUSH
53078: LD_INT 2
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: LD_INT 2
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: LD_INT 2
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 2
53118: NEG
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 2
53129: NEG
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 2
53141: NEG
53142: PUSH
53143: LD_INT 2
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53172: LD_ADDR_VAR 0 59
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53260: LD_ADDR_VAR 0 60
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53348: LD_ADDR_VAR 0 61
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53436: LD_ADDR_VAR 0 62
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53524: LD_ADDR_VAR 0 63
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53612: LD_ADDR_VAR 0 64
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: ST_TO_ADDR
// end ; 1 :
53700: GO 59597
53702: LD_INT 1
53704: DOUBLE
53705: EQUAL
53706: IFTRUE 53710
53708: GO 56333
53710: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53711: LD_ADDR_VAR 0 11
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 3
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: LD_INT 3
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: LD_INT 2
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: LIST
53754: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53755: LD_ADDR_VAR 0 12
53759: PUSH
53760: LD_INT 2
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 3
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 3
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: LIST
53795: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53796: LD_ADDR_VAR 0 13
53800: PUSH
53801: LD_INT 3
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 3
53813: PUSH
53814: LD_INT 3
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 2
53823: PUSH
53824: LD_INT 3
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: LIST
53835: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53836: LD_ADDR_VAR 0 14
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: LD_INT 3
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: LD_INT 3
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: LD_INT 2
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: LIST
53876: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53877: LD_ADDR_VAR 0 15
53881: PUSH
53882: LD_INT 2
53884: NEG
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 3
53895: NEG
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 3
53906: NEG
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: LIST
53920: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53921: LD_ADDR_VAR 0 16
53925: PUSH
53926: LD_INT 2
53928: NEG
53929: PUSH
53930: LD_INT 3
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 3
53940: NEG
53941: PUSH
53942: LD_INT 2
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 3
53952: NEG
53953: PUSH
53954: LD_INT 3
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: LIST
53966: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53967: LD_ADDR_VAR 0 17
53971: PUSH
53972: LD_INT 1
53974: NEG
53975: PUSH
53976: LD_INT 3
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: LD_INT 3
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: LIST
54010: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54011: LD_ADDR_VAR 0 18
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 3
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 3
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: LIST
54051: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54052: LD_ADDR_VAR 0 19
54056: PUSH
54057: LD_INT 3
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 3
54069: PUSH
54070: LD_INT 3
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: LD_INT 3
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: LIST
54091: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54092: LD_ADDR_VAR 0 20
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: LD_INT 3
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: LD_INT 3
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: LIST
54132: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54133: LD_ADDR_VAR 0 21
54137: PUSH
54138: LD_INT 2
54140: NEG
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 3
54151: NEG
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 3
54162: NEG
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: LIST
54176: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54177: LD_ADDR_VAR 0 22
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: LD_INT 3
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 3
54196: NEG
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 3
54208: NEG
54209: PUSH
54210: LD_INT 3
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: LIST
54222: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54223: LD_ADDR_VAR 0 23
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: LD_INT 3
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: LD_INT 4
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: LD_INT 3
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: LIST
54266: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54267: LD_ADDR_VAR 0 24
54271: PUSH
54272: LD_INT 3
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 3
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 4
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: LIST
54307: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54308: LD_ADDR_VAR 0 25
54312: PUSH
54313: LD_INT 3
54315: PUSH
54316: LD_INT 3
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 4
54325: PUSH
54326: LD_INT 3
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 3
54335: PUSH
54336: LD_INT 4
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: LIST
54347: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54348: LD_ADDR_VAR 0 26
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 3
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: LD_INT 4
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: LD_INT 3
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: LIST
54388: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54389: LD_ADDR_VAR 0 27
54393: PUSH
54394: LD_INT 3
54396: NEG
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 3
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 4
54418: NEG
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: LIST
54432: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54433: LD_ADDR_VAR 0 28
54437: PUSH
54438: LD_INT 3
54440: NEG
54441: PUSH
54442: LD_INT 3
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 3
54452: NEG
54453: PUSH
54454: LD_INT 4
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 4
54464: NEG
54465: PUSH
54466: LD_INT 3
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: LIST
54478: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54479: LD_ADDR_VAR 0 29
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: LD_INT 3
54490: NEG
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: LD_INT 3
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: LD_INT 4
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: LD_INT 4
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: LD_INT 3
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: LD_INT 5
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 5
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: LD_INT 4
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: LD_INT 6
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: LD_INT 6
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: LD_INT 5
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54634: LD_ADDR_VAR 0 30
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 3
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 3
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 3
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 4
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 4
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 4
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 5
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 5
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 5
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 6
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 6
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54777: LD_ADDR_VAR 0 31
54781: PUSH
54782: LD_INT 3
54784: PUSH
54785: LD_INT 2
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 3
54794: PUSH
54795: LD_INT 3
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 2
54804: PUSH
54805: LD_INT 3
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 4
54814: PUSH
54815: LD_INT 3
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 4
54824: PUSH
54825: LD_INT 4
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 3
54834: PUSH
54835: LD_INT 4
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 5
54844: PUSH
54845: LD_INT 4
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 5
54854: PUSH
54855: LD_INT 5
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 4
54864: PUSH
54865: LD_INT 5
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 6
54874: PUSH
54875: LD_INT 5
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 6
54884: PUSH
54885: LD_INT 6
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 5
54894: PUSH
54895: LD_INT 6
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54916: LD_ADDR_VAR 0 32
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: LD_INT 3
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: LD_INT 3
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: NEG
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: LD_INT 4
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: LD_INT 4
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: LD_INT 3
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: LD_INT 5
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: LD_INT 5
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: LD_INT 4
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: LD_INT 6
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: LD_INT 6
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: LD_INT 5
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55059: LD_ADDR_VAR 0 33
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 3
55077: NEG
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 3
55088: NEG
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 3
55100: NEG
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 4
55111: NEG
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 4
55122: NEG
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 4
55134: NEG
55135: PUSH
55136: LD_INT 1
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 5
55145: NEG
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 5
55156: NEG
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 5
55168: NEG
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 6
55179: NEG
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 6
55190: NEG
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55214: LD_ADDR_VAR 0 34
55218: PUSH
55219: LD_INT 2
55221: NEG
55222: PUSH
55223: LD_INT 3
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 3
55233: NEG
55234: PUSH
55235: LD_INT 2
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 3
55245: NEG
55246: PUSH
55247: LD_INT 3
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 3
55257: NEG
55258: PUSH
55259: LD_INT 4
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 4
55269: NEG
55270: PUSH
55271: LD_INT 3
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 4
55281: NEG
55282: PUSH
55283: LD_INT 4
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 4
55293: NEG
55294: PUSH
55295: LD_INT 5
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 5
55305: NEG
55306: PUSH
55307: LD_INT 4
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 5
55317: NEG
55318: PUSH
55319: LD_INT 5
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 5
55329: NEG
55330: PUSH
55331: LD_INT 6
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 6
55341: NEG
55342: PUSH
55343: LD_INT 5
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 6
55353: NEG
55354: PUSH
55355: LD_INT 6
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55377: LD_ADDR_VAR 0 41
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 2
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: LD_INT 3
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 1
55407: PUSH
55408: LD_INT 2
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: LIST
55420: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55421: LD_ADDR_VAR 0 42
55425: PUSH
55426: LD_INT 2
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 2
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 3
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: LIST
55461: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55462: LD_ADDR_VAR 0 43
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 3
55479: PUSH
55480: LD_INT 2
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 2
55489: PUSH
55490: LD_INT 3
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: LIST
55501: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55502: LD_ADDR_VAR 0 44
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: LD_INT 2
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: LD_INT 3
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: LD_INT 2
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: LIST
55542: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55543: LD_ADDR_VAR 0 45
55547: PUSH
55548: LD_INT 2
55550: NEG
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 2
55561: NEG
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 3
55572: NEG
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: LIST
55586: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55587: LD_ADDR_VAR 0 46
55591: PUSH
55592: LD_INT 2
55594: NEG
55595: PUSH
55596: LD_INT 2
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: LD_INT 3
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 3
55618: NEG
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: LIST
55632: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55633: LD_ADDR_VAR 0 47
55637: PUSH
55638: LD_INT 2
55640: NEG
55641: PUSH
55642: LD_INT 3
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: LD_INT 3
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55666: LD_ADDR_VAR 0 48
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: LD_INT 2
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55697: LD_ADDR_VAR 0 49
55701: PUSH
55702: LD_INT 3
55704: PUSH
55705: LD_INT 1
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 3
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55726: LD_ADDR_VAR 0 50
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: LD_INT 3
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: LD_INT 3
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55755: LD_ADDR_VAR 0 51
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: LD_INT 2
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 2
55773: NEG
55774: PUSH
55775: LD_INT 1
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55786: LD_ADDR_VAR 0 52
55790: PUSH
55791: LD_INT 3
55793: NEG
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 3
55805: NEG
55806: PUSH
55807: LD_INT 2
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55819: LD_ADDR_VAR 0 53
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: LD_INT 3
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 3
55841: NEG
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: LD_INT 2
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: LIST
55862: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55863: LD_ADDR_VAR 0 54
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: LD_INT 1
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 3
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 3
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: LIST
55903: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55904: LD_ADDR_VAR 0 55
55908: PUSH
55909: LD_INT 3
55911: PUSH
55912: LD_INT 2
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 3
55921: PUSH
55922: LD_INT 3
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 3
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: LIST
55943: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55944: LD_ADDR_VAR 0 56
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: LD_INT 3
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: LD_INT 3
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: LD_INT 2
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: LIST
55984: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55985: LD_ADDR_VAR 0 57
55989: PUSH
55990: LD_INT 2
55992: NEG
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 3
56003: NEG
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 3
56014: NEG
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: LIST
56028: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56029: LD_ADDR_VAR 0 58
56033: PUSH
56034: LD_INT 2
56036: NEG
56037: PUSH
56038: LD_INT 3
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 3
56048: NEG
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 3
56060: NEG
56061: PUSH
56062: LD_INT 3
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: LIST
56074: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56075: LD_ADDR_VAR 0 59
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: LIST
56118: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56119: LD_ADDR_VAR 0 60
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 2
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 2
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: LIST
56159: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56160: LD_ADDR_VAR 0 61
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 2
56177: PUSH
56178: LD_INT 2
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: LIST
56199: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56200: LD_ADDR_VAR 0 62
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: LIST
56240: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56241: LD_ADDR_VAR 0 63
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 2
56259: NEG
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 2
56270: NEG
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: LIST
56284: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56285: LD_ADDR_VAR 0 64
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: LD_INT 2
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 2
56316: NEG
56317: PUSH
56318: LD_INT 2
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: LIST
56330: ST_TO_ADDR
// end ; 2 :
56331: GO 59597
56333: LD_INT 2
56335: DOUBLE
56336: EQUAL
56337: IFTRUE 56341
56339: GO 59596
56341: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56342: LD_ADDR_VAR 0 29
56346: PUSH
56347: LD_INT 4
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 4
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 5
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 5
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 4
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 3
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 3
56410: PUSH
56411: LD_INT 1
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 3
56421: PUSH
56422: LD_INT 2
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 5
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 3
56442: PUSH
56443: LD_INT 3
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 3
56452: PUSH
56453: LD_INT 2
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 4
56462: PUSH
56463: LD_INT 3
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 4
56472: PUSH
56473: LD_INT 4
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 3
56482: PUSH
56483: LD_INT 4
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 2
56492: PUSH
56493: LD_INT 3
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: LD_INT 2
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 4
56512: PUSH
56513: LD_INT 2
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: LD_INT 4
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: LD_INT 4
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: LD_INT 3
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: LD_INT 4
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: LD_INT 5
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: LD_INT 5
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: LD_INT 4
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: LD_INT 3
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 2
56604: PUSH
56605: LD_INT 5
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: LD_INT 3
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 3
56625: NEG
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 3
56636: NEG
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 2
56648: NEG
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 2
56659: NEG
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 3
56670: NEG
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 4
56681: NEG
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 4
56692: NEG
56693: PUSH
56694: LD_INT 1
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 4
56704: NEG
56705: PUSH
56706: LD_INT 2
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 4
56727: NEG
56728: PUSH
56729: LD_INT 4
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 4
56739: NEG
56740: PUSH
56741: LD_INT 5
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 3
56751: NEG
56752: PUSH
56753: LD_INT 4
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 3
56763: NEG
56764: PUSH
56765: LD_INT 3
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 4
56775: NEG
56776: PUSH
56777: LD_INT 3
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 5
56787: NEG
56788: PUSH
56789: LD_INT 4
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 5
56799: NEG
56800: PUSH
56801: LD_INT 5
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 3
56811: NEG
56812: PUSH
56813: LD_INT 5
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 5
56823: NEG
56824: PUSH
56825: LD_INT 3
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56880: LD_ADDR_VAR 0 30
56884: PUSH
56885: LD_INT 4
56887: PUSH
56888: LD_INT 4
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 4
56897: PUSH
56898: LD_INT 3
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 5
56907: PUSH
56908: LD_INT 4
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 5
56917: PUSH
56918: LD_INT 5
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 4
56927: PUSH
56928: LD_INT 5
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 3
56937: PUSH
56938: LD_INT 4
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 3
56947: PUSH
56948: LD_INT 3
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 5
56957: PUSH
56958: LD_INT 3
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 3
56967: PUSH
56968: LD_INT 5
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: LD_INT 3
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: LD_INT 2
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: LD_INT 3
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: LD_INT 4
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: LD_INT 4
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: LD_INT 3
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: LD_INT 4
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 2
57059: NEG
57060: PUSH
57061: LD_INT 2
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 4
57070: NEG
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 4
57081: NEG
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 3
57093: NEG
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 3
57104: NEG
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 4
57115: NEG
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 5
57126: NEG
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 5
57137: NEG
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 5
57149: NEG
57150: PUSH
57151: LD_INT 2
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 3
57161: NEG
57162: PUSH
57163: LD_INT 2
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 3
57172: NEG
57173: PUSH
57174: LD_INT 3
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 3
57184: NEG
57185: PUSH
57186: LD_INT 4
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 2
57196: NEG
57197: PUSH
57198: LD_INT 3
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 2
57208: NEG
57209: PUSH
57210: LD_INT 2
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 3
57220: NEG
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 4
57232: NEG
57233: PUSH
57234: LD_INT 3
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 4
57244: NEG
57245: PUSH
57246: LD_INT 4
57248: NEG
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 2
57256: NEG
57257: PUSH
57258: LD_INT 4
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 4
57268: NEG
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: LD_INT 4
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 0
57291: PUSH
57292: LD_INT 5
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: LD_INT 4
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: LD_INT 3
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: LD_INT 3
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: LD_INT 4
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: NEG
57348: PUSH
57349: LD_INT 5
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 2
57359: PUSH
57360: LD_INT 3
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 2
57370: NEG
57371: PUSH
57372: LD_INT 5
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57427: LD_ADDR_VAR 0 31
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: LD_INT 4
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: LD_INT 3
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: LD_INT 4
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: LD_INT 5
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: LD_INT 5
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 1
57484: NEG
57485: PUSH
57486: LD_INT 4
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: LD_INT 3
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 2
57506: PUSH
57507: LD_INT 5
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 2
57516: NEG
57517: PUSH
57518: LD_INT 3
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 3
57527: NEG
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 3
57538: NEG
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 2
57550: NEG
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 2
57561: NEG
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 3
57572: NEG
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 4
57583: NEG
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 4
57594: NEG
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 4
57606: NEG
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: LD_INT 2
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 4
57629: NEG
57630: PUSH
57631: LD_INT 4
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 4
57641: NEG
57642: PUSH
57643: LD_INT 5
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 3
57653: NEG
57654: PUSH
57655: LD_INT 4
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 3
57665: NEG
57666: PUSH
57667: LD_INT 3
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 4
57677: NEG
57678: PUSH
57679: LD_INT 3
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 5
57689: NEG
57690: PUSH
57691: LD_INT 4
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 5
57701: NEG
57702: PUSH
57703: LD_INT 5
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 3
57713: NEG
57714: PUSH
57715: LD_INT 5
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 5
57725: NEG
57726: PUSH
57727: LD_INT 3
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: LD_INT 3
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: LD_INT 4
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: LD_INT 3
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: LD_INT 2
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: LD_INT 3
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: LD_INT 4
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 2
57816: PUSH
57817: LD_INT 2
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 2
57827: NEG
57828: PUSH
57829: LD_INT 4
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 4
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 4
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 5
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 5
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 4
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 3
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 3
57900: PUSH
57901: LD_INT 1
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 3
57911: PUSH
57912: LD_INT 2
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 5
57922: PUSH
57923: LD_INT 2
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57977: LD_ADDR_VAR 0 32
57981: PUSH
57982: LD_INT 4
57984: NEG
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 4
57995: NEG
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 3
58007: NEG
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 3
58018: NEG
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 4
58029: NEG
58030: PUSH
58031: LD_INT 1
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 5
58040: NEG
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 5
58051: NEG
58052: PUSH
58053: LD_INT 1
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 5
58063: NEG
58064: PUSH
58065: LD_INT 2
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 3
58075: NEG
58076: PUSH
58077: LD_INT 2
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 3
58086: NEG
58087: PUSH
58088: LD_INT 3
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 3
58098: NEG
58099: PUSH
58100: LD_INT 4
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 2
58110: NEG
58111: PUSH
58112: LD_INT 3
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 2
58122: NEG
58123: PUSH
58124: LD_INT 2
58126: NEG
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 3
58134: NEG
58135: PUSH
58136: LD_INT 2
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 4
58146: NEG
58147: PUSH
58148: LD_INT 3
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 4
58158: NEG
58159: PUSH
58160: LD_INT 4
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: LD_INT 4
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 4
58182: NEG
58183: PUSH
58184: LD_INT 2
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: LD_INT 4
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: LD_INT 5
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: LD_INT 4
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: LD_INT 3
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: LD_INT 3
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: LD_INT 4
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 1
58261: NEG
58262: PUSH
58263: LD_INT 5
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 2
58273: PUSH
58274: LD_INT 3
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 2
58284: NEG
58285: PUSH
58286: LD_INT 5
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 3
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 3
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 4
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 4
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 3
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 2
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 2
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 2
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 4
58379: PUSH
58380: LD_INT 2
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 4
58389: PUSH
58390: LD_INT 4
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 4
58399: PUSH
58400: LD_INT 3
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 5
58409: PUSH
58410: LD_INT 4
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 5
58419: PUSH
58420: LD_INT 5
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 4
58429: PUSH
58430: LD_INT 5
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 3
58439: PUSH
58440: LD_INT 4
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 3
58449: PUSH
58450: LD_INT 3
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 5
58459: PUSH
58460: LD_INT 3
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 3
58469: PUSH
58470: LD_INT 5
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58524: LD_ADDR_VAR 0 33
58528: PUSH
58529: LD_INT 4
58531: NEG
58532: PUSH
58533: LD_INT 4
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 4
58543: NEG
58544: PUSH
58545: LD_INT 5
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 3
58555: NEG
58556: PUSH
58557: LD_INT 4
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 3
58567: NEG
58568: PUSH
58569: LD_INT 3
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 4
58579: NEG
58580: PUSH
58581: LD_INT 3
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 5
58591: NEG
58592: PUSH
58593: LD_INT 4
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 5
58603: NEG
58604: PUSH
58605: LD_INT 5
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 3
58615: NEG
58616: PUSH
58617: LD_INT 5
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 5
58627: NEG
58628: PUSH
58629: LD_INT 3
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: LD_INT 3
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: LD_INT 4
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: LD_INT 3
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: LD_INT 2
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 2
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 3
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: NEG
58707: PUSH
58708: LD_INT 4
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 2
58729: NEG
58730: PUSH
58731: LD_INT 4
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 4
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 4
58751: PUSH
58752: LD_INT 1
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 5
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 5
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 4
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 3
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 3
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 5
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 3
58834: PUSH
58835: LD_INT 3
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 3
58844: PUSH
58845: LD_INT 2
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 4
58854: PUSH
58855: LD_INT 3
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 4
58864: PUSH
58865: LD_INT 4
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 3
58874: PUSH
58875: LD_INT 4
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 2
58884: PUSH
58885: LD_INT 3
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: LD_INT 2
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 4
58904: PUSH
58905: LD_INT 2
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 2
58914: PUSH
58915: LD_INT 4
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: LD_INT 4
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 3
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: LD_INT 4
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: LD_INT 5
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: LD_INT 5
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: LD_INT 4
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: LD_INT 3
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 2
58996: PUSH
58997: LD_INT 5
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: NEG
59007: PUSH
59008: LD_INT 3
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59062: LD_ADDR_VAR 0 34
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: LD_INT 4
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 0
59080: PUSH
59081: LD_INT 5
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: PUSH
59092: LD_INT 4
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 1
59102: PUSH
59103: LD_INT 3
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 0
59113: PUSH
59114: LD_INT 3
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: LD_INT 4
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: NEG
59137: PUSH
59138: LD_INT 5
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 2
59148: PUSH
59149: LD_INT 3
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 2
59159: NEG
59160: PUSH
59161: LD_INT 5
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 3
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 3
59181: PUSH
59182: LD_INT 1
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 4
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 4
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 3
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 2
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 2
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 2
59243: PUSH
59244: LD_INT 2
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 4
59254: PUSH
59255: LD_INT 2
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 4
59264: PUSH
59265: LD_INT 4
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 4
59274: PUSH
59275: LD_INT 3
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 5
59284: PUSH
59285: LD_INT 4
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 5
59294: PUSH
59295: LD_INT 5
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 4
59304: PUSH
59305: LD_INT 5
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 3
59314: PUSH
59315: LD_INT 4
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 3
59324: PUSH
59325: LD_INT 3
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 5
59334: PUSH
59335: LD_INT 3
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 3
59344: PUSH
59345: LD_INT 5
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: LD_INT 3
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: LD_INT 2
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 1
59374: PUSH
59375: LD_INT 3
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 1
59384: PUSH
59385: LD_INT 4
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: LD_INT 4
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: LD_INT 3
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: LD_INT 2
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 2
59426: PUSH
59427: LD_INT 4
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 2
59436: NEG
59437: PUSH
59438: LD_INT 2
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 4
59447: NEG
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 4
59458: NEG
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 3
59470: NEG
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 3
59481: NEG
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 4
59492: NEG
59493: PUSH
59494: LD_INT 1
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 5
59503: NEG
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 5
59514: NEG
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 5
59526: NEG
59527: PUSH
59528: LD_INT 2
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 3
59538: NEG
59539: PUSH
59540: LD_INT 2
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: ST_TO_ADDR
// end ; end ;
59594: GO 59597
59596: POP
// case btype of b_depot , b_warehouse :
59597: LD_VAR 0 1
59601: PUSH
59602: LD_INT 0
59604: DOUBLE
59605: EQUAL
59606: IFTRUE 59616
59608: LD_INT 1
59610: DOUBLE
59611: EQUAL
59612: IFTRUE 59616
59614: GO 59817
59616: POP
// case nation of nation_american :
59617: LD_VAR 0 5
59621: PUSH
59622: LD_INT 1
59624: DOUBLE
59625: EQUAL
59626: IFTRUE 59630
59628: GO 59686
59630: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59631: LD_ADDR_VAR 0 9
59635: PUSH
59636: LD_VAR 0 11
59640: PUSH
59641: LD_VAR 0 12
59645: PUSH
59646: LD_VAR 0 13
59650: PUSH
59651: LD_VAR 0 14
59655: PUSH
59656: LD_VAR 0 15
59660: PUSH
59661: LD_VAR 0 16
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: PUSH
59674: LD_VAR 0 4
59678: PUSH
59679: LD_INT 1
59681: PLUS
59682: ARRAY
59683: ST_TO_ADDR
59684: GO 59815
59686: LD_INT 2
59688: DOUBLE
59689: EQUAL
59690: IFTRUE 59694
59692: GO 59750
59694: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59695: LD_ADDR_VAR 0 9
59699: PUSH
59700: LD_VAR 0 17
59704: PUSH
59705: LD_VAR 0 18
59709: PUSH
59710: LD_VAR 0 19
59714: PUSH
59715: LD_VAR 0 20
59719: PUSH
59720: LD_VAR 0 21
59724: PUSH
59725: LD_VAR 0 22
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: PUSH
59738: LD_VAR 0 4
59742: PUSH
59743: LD_INT 1
59745: PLUS
59746: ARRAY
59747: ST_TO_ADDR
59748: GO 59815
59750: LD_INT 3
59752: DOUBLE
59753: EQUAL
59754: IFTRUE 59758
59756: GO 59814
59758: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59759: LD_ADDR_VAR 0 9
59763: PUSH
59764: LD_VAR 0 23
59768: PUSH
59769: LD_VAR 0 24
59773: PUSH
59774: LD_VAR 0 25
59778: PUSH
59779: LD_VAR 0 26
59783: PUSH
59784: LD_VAR 0 27
59788: PUSH
59789: LD_VAR 0 28
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: PUSH
59802: LD_VAR 0 4
59806: PUSH
59807: LD_INT 1
59809: PLUS
59810: ARRAY
59811: ST_TO_ADDR
59812: GO 59815
59814: POP
59815: GO 60370
59817: LD_INT 2
59819: DOUBLE
59820: EQUAL
59821: IFTRUE 59831
59823: LD_INT 3
59825: DOUBLE
59826: EQUAL
59827: IFTRUE 59831
59829: GO 59887
59831: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59832: LD_ADDR_VAR 0 9
59836: PUSH
59837: LD_VAR 0 29
59841: PUSH
59842: LD_VAR 0 30
59846: PUSH
59847: LD_VAR 0 31
59851: PUSH
59852: LD_VAR 0 32
59856: PUSH
59857: LD_VAR 0 33
59861: PUSH
59862: LD_VAR 0 34
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: PUSH
59875: LD_VAR 0 4
59879: PUSH
59880: LD_INT 1
59882: PLUS
59883: ARRAY
59884: ST_TO_ADDR
59885: GO 60370
59887: LD_INT 16
59889: DOUBLE
59890: EQUAL
59891: IFTRUE 59949
59893: LD_INT 17
59895: DOUBLE
59896: EQUAL
59897: IFTRUE 59949
59899: LD_INT 18
59901: DOUBLE
59902: EQUAL
59903: IFTRUE 59949
59905: LD_INT 19
59907: DOUBLE
59908: EQUAL
59909: IFTRUE 59949
59911: LD_INT 22
59913: DOUBLE
59914: EQUAL
59915: IFTRUE 59949
59917: LD_INT 20
59919: DOUBLE
59920: EQUAL
59921: IFTRUE 59949
59923: LD_INT 21
59925: DOUBLE
59926: EQUAL
59927: IFTRUE 59949
59929: LD_INT 23
59931: DOUBLE
59932: EQUAL
59933: IFTRUE 59949
59935: LD_INT 24
59937: DOUBLE
59938: EQUAL
59939: IFTRUE 59949
59941: LD_INT 25
59943: DOUBLE
59944: EQUAL
59945: IFTRUE 59949
59947: GO 60005
59949: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59950: LD_ADDR_VAR 0 9
59954: PUSH
59955: LD_VAR 0 35
59959: PUSH
59960: LD_VAR 0 36
59964: PUSH
59965: LD_VAR 0 37
59969: PUSH
59970: LD_VAR 0 38
59974: PUSH
59975: LD_VAR 0 39
59979: PUSH
59980: LD_VAR 0 40
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: PUSH
59993: LD_VAR 0 4
59997: PUSH
59998: LD_INT 1
60000: PLUS
60001: ARRAY
60002: ST_TO_ADDR
60003: GO 60370
60005: LD_INT 6
60007: DOUBLE
60008: EQUAL
60009: IFTRUE 60061
60011: LD_INT 7
60013: DOUBLE
60014: EQUAL
60015: IFTRUE 60061
60017: LD_INT 8
60019: DOUBLE
60020: EQUAL
60021: IFTRUE 60061
60023: LD_INT 13
60025: DOUBLE
60026: EQUAL
60027: IFTRUE 60061
60029: LD_INT 12
60031: DOUBLE
60032: EQUAL
60033: IFTRUE 60061
60035: LD_INT 15
60037: DOUBLE
60038: EQUAL
60039: IFTRUE 60061
60041: LD_INT 11
60043: DOUBLE
60044: EQUAL
60045: IFTRUE 60061
60047: LD_INT 14
60049: DOUBLE
60050: EQUAL
60051: IFTRUE 60061
60053: LD_INT 10
60055: DOUBLE
60056: EQUAL
60057: IFTRUE 60061
60059: GO 60117
60061: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60062: LD_ADDR_VAR 0 9
60066: PUSH
60067: LD_VAR 0 41
60071: PUSH
60072: LD_VAR 0 42
60076: PUSH
60077: LD_VAR 0 43
60081: PUSH
60082: LD_VAR 0 44
60086: PUSH
60087: LD_VAR 0 45
60091: PUSH
60092: LD_VAR 0 46
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: PUSH
60105: LD_VAR 0 4
60109: PUSH
60110: LD_INT 1
60112: PLUS
60113: ARRAY
60114: ST_TO_ADDR
60115: GO 60370
60117: LD_INT 36
60119: DOUBLE
60120: EQUAL
60121: IFTRUE 60125
60123: GO 60181
60125: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60126: LD_ADDR_VAR 0 9
60130: PUSH
60131: LD_VAR 0 47
60135: PUSH
60136: LD_VAR 0 48
60140: PUSH
60141: LD_VAR 0 49
60145: PUSH
60146: LD_VAR 0 50
60150: PUSH
60151: LD_VAR 0 51
60155: PUSH
60156: LD_VAR 0 52
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: PUSH
60169: LD_VAR 0 4
60173: PUSH
60174: LD_INT 1
60176: PLUS
60177: ARRAY
60178: ST_TO_ADDR
60179: GO 60370
60181: LD_INT 4
60183: DOUBLE
60184: EQUAL
60185: IFTRUE 60207
60187: LD_INT 5
60189: DOUBLE
60190: EQUAL
60191: IFTRUE 60207
60193: LD_INT 34
60195: DOUBLE
60196: EQUAL
60197: IFTRUE 60207
60199: LD_INT 37
60201: DOUBLE
60202: EQUAL
60203: IFTRUE 60207
60205: GO 60263
60207: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60208: LD_ADDR_VAR 0 9
60212: PUSH
60213: LD_VAR 0 53
60217: PUSH
60218: LD_VAR 0 54
60222: PUSH
60223: LD_VAR 0 55
60227: PUSH
60228: LD_VAR 0 56
60232: PUSH
60233: LD_VAR 0 57
60237: PUSH
60238: LD_VAR 0 58
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: PUSH
60251: LD_VAR 0 4
60255: PUSH
60256: LD_INT 1
60258: PLUS
60259: ARRAY
60260: ST_TO_ADDR
60261: GO 60370
60263: LD_INT 31
60265: DOUBLE
60266: EQUAL
60267: IFTRUE 60313
60269: LD_INT 32
60271: DOUBLE
60272: EQUAL
60273: IFTRUE 60313
60275: LD_INT 33
60277: DOUBLE
60278: EQUAL
60279: IFTRUE 60313
60281: LD_INT 27
60283: DOUBLE
60284: EQUAL
60285: IFTRUE 60313
60287: LD_INT 26
60289: DOUBLE
60290: EQUAL
60291: IFTRUE 60313
60293: LD_INT 28
60295: DOUBLE
60296: EQUAL
60297: IFTRUE 60313
60299: LD_INT 29
60301: DOUBLE
60302: EQUAL
60303: IFTRUE 60313
60305: LD_INT 30
60307: DOUBLE
60308: EQUAL
60309: IFTRUE 60313
60311: GO 60369
60313: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60314: LD_ADDR_VAR 0 9
60318: PUSH
60319: LD_VAR 0 59
60323: PUSH
60324: LD_VAR 0 60
60328: PUSH
60329: LD_VAR 0 61
60333: PUSH
60334: LD_VAR 0 62
60338: PUSH
60339: LD_VAR 0 63
60343: PUSH
60344: LD_VAR 0 64
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: PUSH
60357: LD_VAR 0 4
60361: PUSH
60362: LD_INT 1
60364: PLUS
60365: ARRAY
60366: ST_TO_ADDR
60367: GO 60370
60369: POP
// temp_list2 = [ ] ;
60370: LD_ADDR_VAR 0 10
60374: PUSH
60375: EMPTY
60376: ST_TO_ADDR
// for i in temp_list do
60377: LD_ADDR_VAR 0 8
60381: PUSH
60382: LD_VAR 0 9
60386: PUSH
60387: FOR_IN
60388: IFFALSE 60440
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60390: LD_ADDR_VAR 0 10
60394: PUSH
60395: LD_VAR 0 10
60399: PUSH
60400: LD_VAR 0 8
60404: PUSH
60405: LD_INT 1
60407: ARRAY
60408: PUSH
60409: LD_VAR 0 2
60413: PLUS
60414: PUSH
60415: LD_VAR 0 8
60419: PUSH
60420: LD_INT 2
60422: ARRAY
60423: PUSH
60424: LD_VAR 0 3
60428: PLUS
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: EMPTY
60435: LIST
60436: ADD
60437: ST_TO_ADDR
60438: GO 60387
60440: POP
60441: POP
// result = temp_list2 ;
60442: LD_ADDR_VAR 0 7
60446: PUSH
60447: LD_VAR 0 10
60451: ST_TO_ADDR
// end ;
60452: LD_VAR 0 7
60456: RET
// export function EnemyInRange ( unit , dist ) ; begin
60457: LD_INT 0
60459: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60460: LD_ADDR_VAR 0 3
60464: PUSH
60465: LD_VAR 0 1
60469: PPUSH
60470: CALL_OW 255
60474: PPUSH
60475: LD_VAR 0 1
60479: PPUSH
60480: CALL_OW 250
60484: PPUSH
60485: LD_VAR 0 1
60489: PPUSH
60490: CALL_OW 251
60494: PPUSH
60495: LD_VAR 0 2
60499: PPUSH
60500: CALL 33859 0 4
60504: PUSH
60505: LD_INT 4
60507: ARRAY
60508: ST_TO_ADDR
// end ;
60509: LD_VAR 0 3
60513: RET
// export function PlayerSeeMe ( unit ) ; begin
60514: LD_INT 0
60516: PPUSH
// result := See ( your_side , unit ) ;
60517: LD_ADDR_VAR 0 2
60521: PUSH
60522: LD_OWVAR 2
60526: PPUSH
60527: LD_VAR 0 1
60531: PPUSH
60532: CALL_OW 292
60536: ST_TO_ADDR
// end ;
60537: LD_VAR 0 2
60541: RET
// export function ReverseDir ( unit ) ; begin
60542: LD_INT 0
60544: PPUSH
// if not unit then
60545: LD_VAR 0 1
60549: NOT
60550: IFFALSE 60554
// exit ;
60552: GO 60577
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60554: LD_ADDR_VAR 0 2
60558: PUSH
60559: LD_VAR 0 1
60563: PPUSH
60564: CALL_OW 254
60568: PUSH
60569: LD_INT 3
60571: PLUS
60572: PUSH
60573: LD_INT 6
60575: MOD
60576: ST_TO_ADDR
// end ;
60577: LD_VAR 0 2
60581: RET
// export function ReverseArray ( array ) ; var i ; begin
60582: LD_INT 0
60584: PPUSH
60585: PPUSH
// if not array then
60586: LD_VAR 0 1
60590: NOT
60591: IFFALSE 60595
// exit ;
60593: GO 60650
// result := [ ] ;
60595: LD_ADDR_VAR 0 2
60599: PUSH
60600: EMPTY
60601: ST_TO_ADDR
// for i := array downto 1 do
60602: LD_ADDR_VAR 0 3
60606: PUSH
60607: DOUBLE
60608: LD_VAR 0 1
60612: INC
60613: ST_TO_ADDR
60614: LD_INT 1
60616: PUSH
60617: FOR_DOWNTO
60618: IFFALSE 60648
// result := Join ( result , array [ i ] ) ;
60620: LD_ADDR_VAR 0 2
60624: PUSH
60625: LD_VAR 0 2
60629: PPUSH
60630: LD_VAR 0 1
60634: PUSH
60635: LD_VAR 0 3
60639: ARRAY
60640: PPUSH
60641: CALL 65275 0 2
60645: ST_TO_ADDR
60646: GO 60617
60648: POP
60649: POP
// end ;
60650: LD_VAR 0 2
60654: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60655: LD_INT 0
60657: PPUSH
60658: PPUSH
60659: PPUSH
60660: PPUSH
60661: PPUSH
60662: PPUSH
// if not unit or not hexes then
60663: LD_VAR 0 1
60667: NOT
60668: PUSH
60669: LD_VAR 0 2
60673: NOT
60674: OR
60675: IFFALSE 60679
// exit ;
60677: GO 60802
// dist := 9999 ;
60679: LD_ADDR_VAR 0 5
60683: PUSH
60684: LD_INT 9999
60686: ST_TO_ADDR
// for i = 1 to hexes do
60687: LD_ADDR_VAR 0 4
60691: PUSH
60692: DOUBLE
60693: LD_INT 1
60695: DEC
60696: ST_TO_ADDR
60697: LD_VAR 0 2
60701: PUSH
60702: FOR_TO
60703: IFFALSE 60790
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60705: LD_ADDR_VAR 0 6
60709: PUSH
60710: LD_VAR 0 1
60714: PPUSH
60715: LD_VAR 0 2
60719: PUSH
60720: LD_VAR 0 4
60724: ARRAY
60725: PUSH
60726: LD_INT 1
60728: ARRAY
60729: PPUSH
60730: LD_VAR 0 2
60734: PUSH
60735: LD_VAR 0 4
60739: ARRAY
60740: PUSH
60741: LD_INT 2
60743: ARRAY
60744: PPUSH
60745: CALL_OW 297
60749: ST_TO_ADDR
// if tdist < dist then
60750: LD_VAR 0 6
60754: PUSH
60755: LD_VAR 0 5
60759: LESS
60760: IFFALSE 60788
// begin hex := hexes [ i ] ;
60762: LD_ADDR_VAR 0 8
60766: PUSH
60767: LD_VAR 0 2
60771: PUSH
60772: LD_VAR 0 4
60776: ARRAY
60777: ST_TO_ADDR
// dist := tdist ;
60778: LD_ADDR_VAR 0 5
60782: PUSH
60783: LD_VAR 0 6
60787: ST_TO_ADDR
// end ; end ;
60788: GO 60702
60790: POP
60791: POP
// result := hex ;
60792: LD_ADDR_VAR 0 3
60796: PUSH
60797: LD_VAR 0 8
60801: ST_TO_ADDR
// end ;
60802: LD_VAR 0 3
60806: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60807: LD_INT 0
60809: PPUSH
60810: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60811: LD_VAR 0 1
60815: NOT
60816: PUSH
60817: LD_VAR 0 1
60821: PUSH
60822: LD_INT 21
60824: PUSH
60825: LD_INT 2
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 23
60834: PUSH
60835: LD_INT 2
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PPUSH
60846: CALL_OW 69
60850: IN
60851: NOT
60852: OR
60853: IFFALSE 60857
// exit ;
60855: GO 60904
// for i = 1 to 3 do
60857: LD_ADDR_VAR 0 3
60861: PUSH
60862: DOUBLE
60863: LD_INT 1
60865: DEC
60866: ST_TO_ADDR
60867: LD_INT 3
60869: PUSH
60870: FOR_TO
60871: IFFALSE 60902
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60873: LD_VAR 0 1
60877: PPUSH
60878: CALL_OW 250
60882: PPUSH
60883: LD_VAR 0 1
60887: PPUSH
60888: CALL_OW 251
60892: PPUSH
60893: LD_INT 1
60895: PPUSH
60896: CALL_OW 453
60900: GO 60870
60902: POP
60903: POP
// end ;
60904: LD_VAR 0 2
60908: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60909: LD_INT 0
60911: PPUSH
60912: PPUSH
60913: PPUSH
60914: PPUSH
60915: PPUSH
60916: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60917: LD_VAR 0 1
60921: NOT
60922: PUSH
60923: LD_VAR 0 2
60927: NOT
60928: OR
60929: PUSH
60930: LD_VAR 0 1
60934: PPUSH
60935: CALL_OW 314
60939: OR
60940: IFFALSE 60944
// exit ;
60942: GO 61385
// x := GetX ( enemy_unit ) ;
60944: LD_ADDR_VAR 0 7
60948: PUSH
60949: LD_VAR 0 2
60953: PPUSH
60954: CALL_OW 250
60958: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60959: LD_ADDR_VAR 0 8
60963: PUSH
60964: LD_VAR 0 2
60968: PPUSH
60969: CALL_OW 251
60973: ST_TO_ADDR
// if not x or not y then
60974: LD_VAR 0 7
60978: NOT
60979: PUSH
60980: LD_VAR 0 8
60984: NOT
60985: OR
60986: IFFALSE 60990
// exit ;
60988: GO 61385
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60990: LD_ADDR_VAR 0 6
60994: PUSH
60995: LD_VAR 0 7
60999: PPUSH
61000: LD_INT 0
61002: PPUSH
61003: LD_INT 4
61005: PPUSH
61006: CALL_OW 272
61010: PUSH
61011: LD_VAR 0 8
61015: PPUSH
61016: LD_INT 0
61018: PPUSH
61019: LD_INT 4
61021: PPUSH
61022: CALL_OW 273
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_VAR 0 7
61035: PPUSH
61036: LD_INT 1
61038: PPUSH
61039: LD_INT 4
61041: PPUSH
61042: CALL_OW 272
61046: PUSH
61047: LD_VAR 0 8
61051: PPUSH
61052: LD_INT 1
61054: PPUSH
61055: LD_INT 4
61057: PPUSH
61058: CALL_OW 273
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_VAR 0 7
61071: PPUSH
61072: LD_INT 2
61074: PPUSH
61075: LD_INT 4
61077: PPUSH
61078: CALL_OW 272
61082: PUSH
61083: LD_VAR 0 8
61087: PPUSH
61088: LD_INT 2
61090: PPUSH
61091: LD_INT 4
61093: PPUSH
61094: CALL_OW 273
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_VAR 0 7
61107: PPUSH
61108: LD_INT 3
61110: PPUSH
61111: LD_INT 4
61113: PPUSH
61114: CALL_OW 272
61118: PUSH
61119: LD_VAR 0 8
61123: PPUSH
61124: LD_INT 3
61126: PPUSH
61127: LD_INT 4
61129: PPUSH
61130: CALL_OW 273
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_VAR 0 7
61143: PPUSH
61144: LD_INT 4
61146: PPUSH
61147: LD_INT 4
61149: PPUSH
61150: CALL_OW 272
61154: PUSH
61155: LD_VAR 0 8
61159: PPUSH
61160: LD_INT 4
61162: PPUSH
61163: LD_INT 4
61165: PPUSH
61166: CALL_OW 273
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_VAR 0 7
61179: PPUSH
61180: LD_INT 5
61182: PPUSH
61183: LD_INT 4
61185: PPUSH
61186: CALL_OW 272
61190: PUSH
61191: LD_VAR 0 8
61195: PPUSH
61196: LD_INT 5
61198: PPUSH
61199: LD_INT 4
61201: PPUSH
61202: CALL_OW 273
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: ST_TO_ADDR
// for i = tmp downto 1 do
61219: LD_ADDR_VAR 0 4
61223: PUSH
61224: DOUBLE
61225: LD_VAR 0 6
61229: INC
61230: ST_TO_ADDR
61231: LD_INT 1
61233: PUSH
61234: FOR_DOWNTO
61235: IFFALSE 61336
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61237: LD_VAR 0 6
61241: PUSH
61242: LD_VAR 0 4
61246: ARRAY
61247: PUSH
61248: LD_INT 1
61250: ARRAY
61251: PPUSH
61252: LD_VAR 0 6
61256: PUSH
61257: LD_VAR 0 4
61261: ARRAY
61262: PUSH
61263: LD_INT 2
61265: ARRAY
61266: PPUSH
61267: CALL_OW 488
61271: NOT
61272: PUSH
61273: LD_VAR 0 6
61277: PUSH
61278: LD_VAR 0 4
61282: ARRAY
61283: PUSH
61284: LD_INT 1
61286: ARRAY
61287: PPUSH
61288: LD_VAR 0 6
61292: PUSH
61293: LD_VAR 0 4
61297: ARRAY
61298: PUSH
61299: LD_INT 2
61301: ARRAY
61302: PPUSH
61303: CALL_OW 428
61307: PUSH
61308: LD_INT 0
61310: NONEQUAL
61311: OR
61312: IFFALSE 61334
// tmp := Delete ( tmp , i ) ;
61314: LD_ADDR_VAR 0 6
61318: PUSH
61319: LD_VAR 0 6
61323: PPUSH
61324: LD_VAR 0 4
61328: PPUSH
61329: CALL_OW 3
61333: ST_TO_ADDR
61334: GO 61234
61336: POP
61337: POP
// j := GetClosestHex ( unit , tmp ) ;
61338: LD_ADDR_VAR 0 5
61342: PUSH
61343: LD_VAR 0 1
61347: PPUSH
61348: LD_VAR 0 6
61352: PPUSH
61353: CALL 60655 0 2
61357: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61358: LD_VAR 0 1
61362: PPUSH
61363: LD_VAR 0 5
61367: PUSH
61368: LD_INT 1
61370: ARRAY
61371: PPUSH
61372: LD_VAR 0 5
61376: PUSH
61377: LD_INT 2
61379: ARRAY
61380: PPUSH
61381: CALL_OW 111
// end ;
61385: LD_VAR 0 3
61389: RET
// export function PrepareApemanSoldier ( ) ; begin
61390: LD_INT 0
61392: PPUSH
// uc_nation := 0 ;
61393: LD_ADDR_OWVAR 21
61397: PUSH
61398: LD_INT 0
61400: ST_TO_ADDR
// hc_sex := sex_male ;
61401: LD_ADDR_OWVAR 27
61405: PUSH
61406: LD_INT 1
61408: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61409: LD_ADDR_OWVAR 28
61413: PUSH
61414: LD_INT 15
61416: ST_TO_ADDR
// hc_gallery :=  ;
61417: LD_ADDR_OWVAR 33
61421: PUSH
61422: LD_STRING 
61424: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61425: LD_ADDR_OWVAR 31
61429: PUSH
61430: LD_INT 0
61432: PPUSH
61433: LD_INT 3
61435: PPUSH
61436: CALL_OW 12
61440: PUSH
61441: LD_INT 0
61443: PPUSH
61444: LD_INT 3
61446: PPUSH
61447: CALL_OW 12
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: ST_TO_ADDR
// end ;
61464: LD_VAR 0 1
61468: RET
// export function PrepareApemanEngineer ( ) ; begin
61469: LD_INT 0
61471: PPUSH
// uc_nation := 0 ;
61472: LD_ADDR_OWVAR 21
61476: PUSH
61477: LD_INT 0
61479: ST_TO_ADDR
// hc_sex := sex_male ;
61480: LD_ADDR_OWVAR 27
61484: PUSH
61485: LD_INT 1
61487: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61488: LD_ADDR_OWVAR 28
61492: PUSH
61493: LD_INT 16
61495: ST_TO_ADDR
// hc_gallery :=  ;
61496: LD_ADDR_OWVAR 33
61500: PUSH
61501: LD_STRING 
61503: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61504: LD_ADDR_OWVAR 31
61508: PUSH
61509: LD_INT 0
61511: PPUSH
61512: LD_INT 3
61514: PPUSH
61515: CALL_OW 12
61519: PUSH
61520: LD_INT 0
61522: PPUSH
61523: LD_INT 3
61525: PPUSH
61526: CALL_OW 12
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: ST_TO_ADDR
// end ;
61543: LD_VAR 0 1
61547: RET
// export function PrepareApeman ( agressivity ) ; begin
61548: LD_INT 0
61550: PPUSH
// uc_side := 0 ;
61551: LD_ADDR_OWVAR 20
61555: PUSH
61556: LD_INT 0
61558: ST_TO_ADDR
// uc_nation := 0 ;
61559: LD_ADDR_OWVAR 21
61563: PUSH
61564: LD_INT 0
61566: ST_TO_ADDR
// hc_sex := sex_male ;
61567: LD_ADDR_OWVAR 27
61571: PUSH
61572: LD_INT 1
61574: ST_TO_ADDR
// hc_class := class_apeman ;
61575: LD_ADDR_OWVAR 28
61579: PUSH
61580: LD_INT 12
61582: ST_TO_ADDR
// hc_gallery :=  ;
61583: LD_ADDR_OWVAR 33
61587: PUSH
61588: LD_STRING 
61590: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61591: LD_ADDR_OWVAR 35
61595: PUSH
61596: LD_VAR 0 1
61600: NEG
61601: PPUSH
61602: LD_VAR 0 1
61606: PPUSH
61607: CALL_OW 12
61611: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61612: LD_ADDR_OWVAR 31
61616: PUSH
61617: LD_INT 0
61619: PPUSH
61620: LD_INT 3
61622: PPUSH
61623: CALL_OW 12
61627: PUSH
61628: LD_INT 0
61630: PPUSH
61631: LD_INT 3
61633: PPUSH
61634: CALL_OW 12
61638: PUSH
61639: LD_INT 0
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: ST_TO_ADDR
// end ;
61651: LD_VAR 0 2
61655: RET
// export function PrepareTiger ( agressivity ) ; begin
61656: LD_INT 0
61658: PPUSH
// uc_side := 0 ;
61659: LD_ADDR_OWVAR 20
61663: PUSH
61664: LD_INT 0
61666: ST_TO_ADDR
// uc_nation := 0 ;
61667: LD_ADDR_OWVAR 21
61671: PUSH
61672: LD_INT 0
61674: ST_TO_ADDR
// hc_class := class_tiger ;
61675: LD_ADDR_OWVAR 28
61679: PUSH
61680: LD_INT 14
61682: ST_TO_ADDR
// hc_gallery :=  ;
61683: LD_ADDR_OWVAR 33
61687: PUSH
61688: LD_STRING 
61690: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61691: LD_ADDR_OWVAR 35
61695: PUSH
61696: LD_VAR 0 1
61700: NEG
61701: PPUSH
61702: LD_VAR 0 1
61706: PPUSH
61707: CALL_OW 12
61711: ST_TO_ADDR
// end ;
61712: LD_VAR 0 2
61716: RET
// export function PrepareEnchidna ( ) ; begin
61717: LD_INT 0
61719: PPUSH
// uc_side := 0 ;
61720: LD_ADDR_OWVAR 20
61724: PUSH
61725: LD_INT 0
61727: ST_TO_ADDR
// uc_nation := 0 ;
61728: LD_ADDR_OWVAR 21
61732: PUSH
61733: LD_INT 0
61735: ST_TO_ADDR
// hc_class := class_baggie ;
61736: LD_ADDR_OWVAR 28
61740: PUSH
61741: LD_INT 13
61743: ST_TO_ADDR
// hc_gallery :=  ;
61744: LD_ADDR_OWVAR 33
61748: PUSH
61749: LD_STRING 
61751: ST_TO_ADDR
// end ;
61752: LD_VAR 0 1
61756: RET
// export function PrepareFrog ( ) ; begin
61757: LD_INT 0
61759: PPUSH
// uc_side := 0 ;
61760: LD_ADDR_OWVAR 20
61764: PUSH
61765: LD_INT 0
61767: ST_TO_ADDR
// uc_nation := 0 ;
61768: LD_ADDR_OWVAR 21
61772: PUSH
61773: LD_INT 0
61775: ST_TO_ADDR
// hc_class := class_frog ;
61776: LD_ADDR_OWVAR 28
61780: PUSH
61781: LD_INT 19
61783: ST_TO_ADDR
// hc_gallery :=  ;
61784: LD_ADDR_OWVAR 33
61788: PUSH
61789: LD_STRING 
61791: ST_TO_ADDR
// end ;
61792: LD_VAR 0 1
61796: RET
// export function PrepareFish ( ) ; begin
61797: LD_INT 0
61799: PPUSH
// uc_side := 0 ;
61800: LD_ADDR_OWVAR 20
61804: PUSH
61805: LD_INT 0
61807: ST_TO_ADDR
// uc_nation := 0 ;
61808: LD_ADDR_OWVAR 21
61812: PUSH
61813: LD_INT 0
61815: ST_TO_ADDR
// hc_class := class_fish ;
61816: LD_ADDR_OWVAR 28
61820: PUSH
61821: LD_INT 20
61823: ST_TO_ADDR
// hc_gallery :=  ;
61824: LD_ADDR_OWVAR 33
61828: PUSH
61829: LD_STRING 
61831: ST_TO_ADDR
// end ;
61832: LD_VAR 0 1
61836: RET
// export function PrepareBird ( ) ; begin
61837: LD_INT 0
61839: PPUSH
// uc_side := 0 ;
61840: LD_ADDR_OWVAR 20
61844: PUSH
61845: LD_INT 0
61847: ST_TO_ADDR
// uc_nation := 0 ;
61848: LD_ADDR_OWVAR 21
61852: PUSH
61853: LD_INT 0
61855: ST_TO_ADDR
// hc_class := class_phororhacos ;
61856: LD_ADDR_OWVAR 28
61860: PUSH
61861: LD_INT 18
61863: ST_TO_ADDR
// hc_gallery :=  ;
61864: LD_ADDR_OWVAR 33
61868: PUSH
61869: LD_STRING 
61871: ST_TO_ADDR
// end ;
61872: LD_VAR 0 1
61876: RET
// export function PrepareHorse ( ) ; begin
61877: LD_INT 0
61879: PPUSH
// uc_side := 0 ;
61880: LD_ADDR_OWVAR 20
61884: PUSH
61885: LD_INT 0
61887: ST_TO_ADDR
// uc_nation := 0 ;
61888: LD_ADDR_OWVAR 21
61892: PUSH
61893: LD_INT 0
61895: ST_TO_ADDR
// hc_class := class_horse ;
61896: LD_ADDR_OWVAR 28
61900: PUSH
61901: LD_INT 21
61903: ST_TO_ADDR
// hc_gallery :=  ;
61904: LD_ADDR_OWVAR 33
61908: PUSH
61909: LD_STRING 
61911: ST_TO_ADDR
// end ;
61912: LD_VAR 0 1
61916: RET
// export function PrepareMastodont ( ) ; begin
61917: LD_INT 0
61919: PPUSH
// uc_side := 0 ;
61920: LD_ADDR_OWVAR 20
61924: PUSH
61925: LD_INT 0
61927: ST_TO_ADDR
// uc_nation := 0 ;
61928: LD_ADDR_OWVAR 21
61932: PUSH
61933: LD_INT 0
61935: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61936: LD_ADDR_OWVAR 37
61940: PUSH
61941: LD_INT 31
61943: ST_TO_ADDR
// vc_control := control_rider ;
61944: LD_ADDR_OWVAR 38
61948: PUSH
61949: LD_INT 4
61951: ST_TO_ADDR
// end ;
61952: LD_VAR 0 1
61956: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61957: LD_INT 0
61959: PPUSH
61960: PPUSH
61961: PPUSH
// uc_side = 0 ;
61962: LD_ADDR_OWVAR 20
61966: PUSH
61967: LD_INT 0
61969: ST_TO_ADDR
// uc_nation = 0 ;
61970: LD_ADDR_OWVAR 21
61974: PUSH
61975: LD_INT 0
61977: ST_TO_ADDR
// InitHc_All ( ) ;
61978: CALL_OW 584
// InitVc ;
61982: CALL_OW 20
// if mastodonts then
61986: LD_VAR 0 6
61990: IFFALSE 62057
// for i = 1 to mastodonts do
61992: LD_ADDR_VAR 0 11
61996: PUSH
61997: DOUBLE
61998: LD_INT 1
62000: DEC
62001: ST_TO_ADDR
62002: LD_VAR 0 6
62006: PUSH
62007: FOR_TO
62008: IFFALSE 62055
// begin vc_chassis := 31 ;
62010: LD_ADDR_OWVAR 37
62014: PUSH
62015: LD_INT 31
62017: ST_TO_ADDR
// vc_control := control_rider ;
62018: LD_ADDR_OWVAR 38
62022: PUSH
62023: LD_INT 4
62025: ST_TO_ADDR
// animal := CreateVehicle ;
62026: LD_ADDR_VAR 0 12
62030: PUSH
62031: CALL_OW 45
62035: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62036: LD_VAR 0 12
62040: PPUSH
62041: LD_VAR 0 8
62045: PPUSH
62046: LD_INT 0
62048: PPUSH
62049: CALL 64192 0 3
// end ;
62053: GO 62007
62055: POP
62056: POP
// if horses then
62057: LD_VAR 0 5
62061: IFFALSE 62128
// for i = 1 to horses do
62063: LD_ADDR_VAR 0 11
62067: PUSH
62068: DOUBLE
62069: LD_INT 1
62071: DEC
62072: ST_TO_ADDR
62073: LD_VAR 0 5
62077: PUSH
62078: FOR_TO
62079: IFFALSE 62126
// begin hc_class := 21 ;
62081: LD_ADDR_OWVAR 28
62085: PUSH
62086: LD_INT 21
62088: ST_TO_ADDR
// hc_gallery :=  ;
62089: LD_ADDR_OWVAR 33
62093: PUSH
62094: LD_STRING 
62096: ST_TO_ADDR
// animal := CreateHuman ;
62097: LD_ADDR_VAR 0 12
62101: PUSH
62102: CALL_OW 44
62106: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62107: LD_VAR 0 12
62111: PPUSH
62112: LD_VAR 0 8
62116: PPUSH
62117: LD_INT 0
62119: PPUSH
62120: CALL 64192 0 3
// end ;
62124: GO 62078
62126: POP
62127: POP
// if birds then
62128: LD_VAR 0 1
62132: IFFALSE 62199
// for i = 1 to birds do
62134: LD_ADDR_VAR 0 11
62138: PUSH
62139: DOUBLE
62140: LD_INT 1
62142: DEC
62143: ST_TO_ADDR
62144: LD_VAR 0 1
62148: PUSH
62149: FOR_TO
62150: IFFALSE 62197
// begin hc_class = 18 ;
62152: LD_ADDR_OWVAR 28
62156: PUSH
62157: LD_INT 18
62159: ST_TO_ADDR
// hc_gallery =  ;
62160: LD_ADDR_OWVAR 33
62164: PUSH
62165: LD_STRING 
62167: ST_TO_ADDR
// animal := CreateHuman ;
62168: LD_ADDR_VAR 0 12
62172: PUSH
62173: CALL_OW 44
62177: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62178: LD_VAR 0 12
62182: PPUSH
62183: LD_VAR 0 8
62187: PPUSH
62188: LD_INT 0
62190: PPUSH
62191: CALL 64192 0 3
// end ;
62195: GO 62149
62197: POP
62198: POP
// if tigers then
62199: LD_VAR 0 2
62203: IFFALSE 62287
// for i = 1 to tigers do
62205: LD_ADDR_VAR 0 11
62209: PUSH
62210: DOUBLE
62211: LD_INT 1
62213: DEC
62214: ST_TO_ADDR
62215: LD_VAR 0 2
62219: PUSH
62220: FOR_TO
62221: IFFALSE 62285
// begin hc_class = class_tiger ;
62223: LD_ADDR_OWVAR 28
62227: PUSH
62228: LD_INT 14
62230: ST_TO_ADDR
// hc_gallery =  ;
62231: LD_ADDR_OWVAR 33
62235: PUSH
62236: LD_STRING 
62238: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62239: LD_ADDR_OWVAR 35
62243: PUSH
62244: LD_INT 7
62246: NEG
62247: PPUSH
62248: LD_INT 7
62250: PPUSH
62251: CALL_OW 12
62255: ST_TO_ADDR
// animal := CreateHuman ;
62256: LD_ADDR_VAR 0 12
62260: PUSH
62261: CALL_OW 44
62265: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62266: LD_VAR 0 12
62270: PPUSH
62271: LD_VAR 0 8
62275: PPUSH
62276: LD_INT 0
62278: PPUSH
62279: CALL 64192 0 3
// end ;
62283: GO 62220
62285: POP
62286: POP
// if apemans then
62287: LD_VAR 0 3
62291: IFFALSE 62414
// for i = 1 to apemans do
62293: LD_ADDR_VAR 0 11
62297: PUSH
62298: DOUBLE
62299: LD_INT 1
62301: DEC
62302: ST_TO_ADDR
62303: LD_VAR 0 3
62307: PUSH
62308: FOR_TO
62309: IFFALSE 62412
// begin hc_class = class_apeman ;
62311: LD_ADDR_OWVAR 28
62315: PUSH
62316: LD_INT 12
62318: ST_TO_ADDR
// hc_gallery =  ;
62319: LD_ADDR_OWVAR 33
62323: PUSH
62324: LD_STRING 
62326: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62327: LD_ADDR_OWVAR 35
62331: PUSH
62332: LD_INT 2
62334: NEG
62335: PPUSH
62336: LD_INT 2
62338: PPUSH
62339: CALL_OW 12
62343: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62344: LD_ADDR_OWVAR 31
62348: PUSH
62349: LD_INT 1
62351: PPUSH
62352: LD_INT 3
62354: PPUSH
62355: CALL_OW 12
62359: PUSH
62360: LD_INT 1
62362: PPUSH
62363: LD_INT 3
62365: PPUSH
62366: CALL_OW 12
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: LD_INT 0
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: ST_TO_ADDR
// animal := CreateHuman ;
62383: LD_ADDR_VAR 0 12
62387: PUSH
62388: CALL_OW 44
62392: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62393: LD_VAR 0 12
62397: PPUSH
62398: LD_VAR 0 8
62402: PPUSH
62403: LD_INT 0
62405: PPUSH
62406: CALL 64192 0 3
// end ;
62410: GO 62308
62412: POP
62413: POP
// if enchidnas then
62414: LD_VAR 0 4
62418: IFFALSE 62485
// for i = 1 to enchidnas do
62420: LD_ADDR_VAR 0 11
62424: PUSH
62425: DOUBLE
62426: LD_INT 1
62428: DEC
62429: ST_TO_ADDR
62430: LD_VAR 0 4
62434: PUSH
62435: FOR_TO
62436: IFFALSE 62483
// begin hc_class = 13 ;
62438: LD_ADDR_OWVAR 28
62442: PUSH
62443: LD_INT 13
62445: ST_TO_ADDR
// hc_gallery =  ;
62446: LD_ADDR_OWVAR 33
62450: PUSH
62451: LD_STRING 
62453: ST_TO_ADDR
// animal := CreateHuman ;
62454: LD_ADDR_VAR 0 12
62458: PUSH
62459: CALL_OW 44
62463: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62464: LD_VAR 0 12
62468: PPUSH
62469: LD_VAR 0 8
62473: PPUSH
62474: LD_INT 0
62476: PPUSH
62477: CALL 64192 0 3
// end ;
62481: GO 62435
62483: POP
62484: POP
// if fishes then
62485: LD_VAR 0 7
62489: IFFALSE 62556
// for i = 1 to fishes do
62491: LD_ADDR_VAR 0 11
62495: PUSH
62496: DOUBLE
62497: LD_INT 1
62499: DEC
62500: ST_TO_ADDR
62501: LD_VAR 0 7
62505: PUSH
62506: FOR_TO
62507: IFFALSE 62554
// begin hc_class = 20 ;
62509: LD_ADDR_OWVAR 28
62513: PUSH
62514: LD_INT 20
62516: ST_TO_ADDR
// hc_gallery =  ;
62517: LD_ADDR_OWVAR 33
62521: PUSH
62522: LD_STRING 
62524: ST_TO_ADDR
// animal := CreateHuman ;
62525: LD_ADDR_VAR 0 12
62529: PUSH
62530: CALL_OW 44
62534: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62535: LD_VAR 0 12
62539: PPUSH
62540: LD_VAR 0 9
62544: PPUSH
62545: LD_INT 0
62547: PPUSH
62548: CALL 64192 0 3
// end ;
62552: GO 62506
62554: POP
62555: POP
// end ;
62556: LD_VAR 0 10
62560: RET
// export function WantHeal ( sci , unit ) ; begin
62561: LD_INT 0
62563: PPUSH
// if GetTaskList ( sci ) > 0 then
62564: LD_VAR 0 1
62568: PPUSH
62569: CALL_OW 437
62573: PUSH
62574: LD_INT 0
62576: GREATER
62577: IFFALSE 62647
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62579: LD_VAR 0 1
62583: PPUSH
62584: CALL_OW 437
62588: PUSH
62589: LD_INT 1
62591: ARRAY
62592: PUSH
62593: LD_INT 1
62595: ARRAY
62596: PUSH
62597: LD_STRING l
62599: EQUAL
62600: PUSH
62601: LD_VAR 0 1
62605: PPUSH
62606: CALL_OW 437
62610: PUSH
62611: LD_INT 1
62613: ARRAY
62614: PUSH
62615: LD_INT 4
62617: ARRAY
62618: PUSH
62619: LD_VAR 0 2
62623: EQUAL
62624: AND
62625: IFFALSE 62637
// result := true else
62627: LD_ADDR_VAR 0 3
62631: PUSH
62632: LD_INT 1
62634: ST_TO_ADDR
62635: GO 62645
// result := false ;
62637: LD_ADDR_VAR 0 3
62641: PUSH
62642: LD_INT 0
62644: ST_TO_ADDR
// end else
62645: GO 62655
// result := false ;
62647: LD_ADDR_VAR 0 3
62651: PUSH
62652: LD_INT 0
62654: ST_TO_ADDR
// end ;
62655: LD_VAR 0 3
62659: RET
// export function HealTarget ( sci ) ; begin
62660: LD_INT 0
62662: PPUSH
// if not sci then
62663: LD_VAR 0 1
62667: NOT
62668: IFFALSE 62672
// exit ;
62670: GO 62737
// result := 0 ;
62672: LD_ADDR_VAR 0 2
62676: PUSH
62677: LD_INT 0
62679: ST_TO_ADDR
// if GetTaskList ( sci ) then
62680: LD_VAR 0 1
62684: PPUSH
62685: CALL_OW 437
62689: IFFALSE 62737
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62691: LD_VAR 0 1
62695: PPUSH
62696: CALL_OW 437
62700: PUSH
62701: LD_INT 1
62703: ARRAY
62704: PUSH
62705: LD_INT 1
62707: ARRAY
62708: PUSH
62709: LD_STRING l
62711: EQUAL
62712: IFFALSE 62737
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62714: LD_ADDR_VAR 0 2
62718: PUSH
62719: LD_VAR 0 1
62723: PPUSH
62724: CALL_OW 437
62728: PUSH
62729: LD_INT 1
62731: ARRAY
62732: PUSH
62733: LD_INT 4
62735: ARRAY
62736: ST_TO_ADDR
// end ;
62737: LD_VAR 0 2
62741: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62742: LD_INT 0
62744: PPUSH
62745: PPUSH
62746: PPUSH
62747: PPUSH
// if not base_units then
62748: LD_VAR 0 1
62752: NOT
62753: IFFALSE 62757
// exit ;
62755: GO 62844
// result := false ;
62757: LD_ADDR_VAR 0 2
62761: PUSH
62762: LD_INT 0
62764: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62765: LD_ADDR_VAR 0 5
62769: PUSH
62770: LD_VAR 0 1
62774: PPUSH
62775: LD_INT 21
62777: PUSH
62778: LD_INT 3
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PPUSH
62785: CALL_OW 72
62789: ST_TO_ADDR
// if not tmp then
62790: LD_VAR 0 5
62794: NOT
62795: IFFALSE 62799
// exit ;
62797: GO 62844
// for i in tmp do
62799: LD_ADDR_VAR 0 3
62803: PUSH
62804: LD_VAR 0 5
62808: PUSH
62809: FOR_IN
62810: IFFALSE 62842
// begin result := EnemyInRange ( i , 22 ) ;
62812: LD_ADDR_VAR 0 2
62816: PUSH
62817: LD_VAR 0 3
62821: PPUSH
62822: LD_INT 22
62824: PPUSH
62825: CALL 60457 0 2
62829: ST_TO_ADDR
// if result then
62830: LD_VAR 0 2
62834: IFFALSE 62840
// exit ;
62836: POP
62837: POP
62838: GO 62844
// end ;
62840: GO 62809
62842: POP
62843: POP
// end ;
62844: LD_VAR 0 2
62848: RET
// export function FilterByTag ( units , tag ) ; begin
62849: LD_INT 0
62851: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62852: LD_ADDR_VAR 0 3
62856: PUSH
62857: LD_VAR 0 1
62861: PPUSH
62862: LD_INT 120
62864: PUSH
62865: LD_VAR 0 2
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PPUSH
62874: CALL_OW 72
62878: ST_TO_ADDR
// end ;
62879: LD_VAR 0 3
62883: RET
// export function IsDriver ( un ) ; begin
62884: LD_INT 0
62886: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62887: LD_ADDR_VAR 0 2
62891: PUSH
62892: LD_VAR 0 1
62896: PUSH
62897: LD_INT 55
62899: PUSH
62900: EMPTY
62901: LIST
62902: PPUSH
62903: CALL_OW 69
62907: IN
62908: ST_TO_ADDR
// end ;
62909: LD_VAR 0 2
62913: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62914: LD_INT 0
62916: PPUSH
62917: PPUSH
// list := [ ] ;
62918: LD_ADDR_VAR 0 5
62922: PUSH
62923: EMPTY
62924: ST_TO_ADDR
// case d of 0 :
62925: LD_VAR 0 3
62929: PUSH
62930: LD_INT 0
62932: DOUBLE
62933: EQUAL
62934: IFTRUE 62938
62936: GO 63071
62938: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62939: LD_ADDR_VAR 0 5
62943: PUSH
62944: LD_VAR 0 1
62948: PUSH
62949: LD_INT 4
62951: MINUS
62952: PUSH
62953: LD_VAR 0 2
62957: PUSH
62958: LD_INT 4
62960: MINUS
62961: PUSH
62962: LD_INT 2
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: LIST
62969: PUSH
62970: LD_VAR 0 1
62974: PUSH
62975: LD_INT 3
62977: MINUS
62978: PUSH
62979: LD_VAR 0 2
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: LIST
62991: PUSH
62992: LD_VAR 0 1
62996: PUSH
62997: LD_INT 4
62999: PLUS
63000: PUSH
63001: LD_VAR 0 2
63005: PUSH
63006: LD_INT 4
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: LIST
63013: PUSH
63014: LD_VAR 0 1
63018: PUSH
63019: LD_INT 3
63021: PLUS
63022: PUSH
63023: LD_VAR 0 2
63027: PUSH
63028: LD_INT 3
63030: PLUS
63031: PUSH
63032: LD_INT 5
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: LIST
63039: PUSH
63040: LD_VAR 0 1
63044: PUSH
63045: LD_VAR 0 2
63049: PUSH
63050: LD_INT 4
63052: PLUS
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: LIST
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: ST_TO_ADDR
// end ; 1 :
63069: GO 63769
63071: LD_INT 1
63073: DOUBLE
63074: EQUAL
63075: IFTRUE 63079
63077: GO 63212
63079: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63080: LD_ADDR_VAR 0 5
63084: PUSH
63085: LD_VAR 0 1
63089: PUSH
63090: LD_VAR 0 2
63094: PUSH
63095: LD_INT 4
63097: MINUS
63098: PUSH
63099: LD_INT 3
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: LIST
63106: PUSH
63107: LD_VAR 0 1
63111: PUSH
63112: LD_INT 3
63114: MINUS
63115: PUSH
63116: LD_VAR 0 2
63120: PUSH
63121: LD_INT 3
63123: MINUS
63124: PUSH
63125: LD_INT 2
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: LIST
63132: PUSH
63133: LD_VAR 0 1
63137: PUSH
63138: LD_INT 4
63140: MINUS
63141: PUSH
63142: LD_VAR 0 2
63146: PUSH
63147: LD_INT 1
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: LIST
63154: PUSH
63155: LD_VAR 0 1
63159: PUSH
63160: LD_VAR 0 2
63164: PUSH
63165: LD_INT 3
63167: PLUS
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: LIST
63176: PUSH
63177: LD_VAR 0 1
63181: PUSH
63182: LD_INT 4
63184: PLUS
63185: PUSH
63186: LD_VAR 0 2
63190: PUSH
63191: LD_INT 4
63193: PLUS
63194: PUSH
63195: LD_INT 5
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: LIST
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: ST_TO_ADDR
// end ; 2 :
63210: GO 63769
63212: LD_INT 2
63214: DOUBLE
63215: EQUAL
63216: IFTRUE 63220
63218: GO 63349
63220: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63221: LD_ADDR_VAR 0 5
63225: PUSH
63226: LD_VAR 0 1
63230: PUSH
63231: LD_VAR 0 2
63235: PUSH
63236: LD_INT 3
63238: MINUS
63239: PUSH
63240: LD_INT 3
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: LIST
63247: PUSH
63248: LD_VAR 0 1
63252: PUSH
63253: LD_INT 4
63255: PLUS
63256: PUSH
63257: LD_VAR 0 2
63261: PUSH
63262: LD_INT 4
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: LIST
63269: PUSH
63270: LD_VAR 0 1
63274: PUSH
63275: LD_VAR 0 2
63279: PUSH
63280: LD_INT 4
63282: PLUS
63283: PUSH
63284: LD_INT 0
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: LIST
63291: PUSH
63292: LD_VAR 0 1
63296: PUSH
63297: LD_INT 3
63299: MINUS
63300: PUSH
63301: LD_VAR 0 2
63305: PUSH
63306: LD_INT 1
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: LIST
63313: PUSH
63314: LD_VAR 0 1
63318: PUSH
63319: LD_INT 4
63321: MINUS
63322: PUSH
63323: LD_VAR 0 2
63327: PUSH
63328: LD_INT 4
63330: MINUS
63331: PUSH
63332: LD_INT 2
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: LIST
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: ST_TO_ADDR
// end ; 3 :
63347: GO 63769
63349: LD_INT 3
63351: DOUBLE
63352: EQUAL
63353: IFTRUE 63357
63355: GO 63490
63357: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63358: LD_ADDR_VAR 0 5
63362: PUSH
63363: LD_VAR 0 1
63367: PUSH
63368: LD_INT 3
63370: PLUS
63371: PUSH
63372: LD_VAR 0 2
63376: PUSH
63377: LD_INT 4
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: LIST
63384: PUSH
63385: LD_VAR 0 1
63389: PUSH
63390: LD_INT 4
63392: PLUS
63393: PUSH
63394: LD_VAR 0 2
63398: PUSH
63399: LD_INT 4
63401: PLUS
63402: PUSH
63403: LD_INT 5
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: LIST
63410: PUSH
63411: LD_VAR 0 1
63415: PUSH
63416: LD_INT 4
63418: MINUS
63419: PUSH
63420: LD_VAR 0 2
63424: PUSH
63425: LD_INT 1
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: LIST
63432: PUSH
63433: LD_VAR 0 1
63437: PUSH
63438: LD_VAR 0 2
63442: PUSH
63443: LD_INT 4
63445: MINUS
63446: PUSH
63447: LD_INT 3
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: LIST
63454: PUSH
63455: LD_VAR 0 1
63459: PUSH
63460: LD_INT 3
63462: MINUS
63463: PUSH
63464: LD_VAR 0 2
63468: PUSH
63469: LD_INT 3
63471: MINUS
63472: PUSH
63473: LD_INT 2
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: LIST
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: ST_TO_ADDR
// end ; 4 :
63488: GO 63769
63490: LD_INT 4
63492: DOUBLE
63493: EQUAL
63494: IFTRUE 63498
63496: GO 63631
63498: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63499: LD_ADDR_VAR 0 5
63503: PUSH
63504: LD_VAR 0 1
63508: PUSH
63509: LD_VAR 0 2
63513: PUSH
63514: LD_INT 4
63516: PLUS
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: LIST
63525: PUSH
63526: LD_VAR 0 1
63530: PUSH
63531: LD_INT 3
63533: PLUS
63534: PUSH
63535: LD_VAR 0 2
63539: PUSH
63540: LD_INT 3
63542: PLUS
63543: PUSH
63544: LD_INT 5
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: LIST
63551: PUSH
63552: LD_VAR 0 1
63556: PUSH
63557: LD_INT 4
63559: PLUS
63560: PUSH
63561: LD_VAR 0 2
63565: PUSH
63566: LD_INT 4
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: LIST
63573: PUSH
63574: LD_VAR 0 1
63578: PUSH
63579: LD_VAR 0 2
63583: PUSH
63584: LD_INT 3
63586: MINUS
63587: PUSH
63588: LD_INT 3
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: LIST
63595: PUSH
63596: LD_VAR 0 1
63600: PUSH
63601: LD_INT 4
63603: MINUS
63604: PUSH
63605: LD_VAR 0 2
63609: PUSH
63610: LD_INT 4
63612: MINUS
63613: PUSH
63614: LD_INT 2
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: LIST
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: ST_TO_ADDR
// end ; 5 :
63629: GO 63769
63631: LD_INT 5
63633: DOUBLE
63634: EQUAL
63635: IFTRUE 63639
63637: GO 63768
63639: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63640: LD_ADDR_VAR 0 5
63644: PUSH
63645: LD_VAR 0 1
63649: PUSH
63650: LD_INT 4
63652: MINUS
63653: PUSH
63654: LD_VAR 0 2
63658: PUSH
63659: LD_INT 1
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: LIST
63666: PUSH
63667: LD_VAR 0 1
63671: PUSH
63672: LD_VAR 0 2
63676: PUSH
63677: LD_INT 4
63679: MINUS
63680: PUSH
63681: LD_INT 3
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: LIST
63688: PUSH
63689: LD_VAR 0 1
63693: PUSH
63694: LD_INT 4
63696: PLUS
63697: PUSH
63698: LD_VAR 0 2
63702: PUSH
63703: LD_INT 4
63705: PLUS
63706: PUSH
63707: LD_INT 5
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: LIST
63714: PUSH
63715: LD_VAR 0 1
63719: PUSH
63720: LD_INT 3
63722: PLUS
63723: PUSH
63724: LD_VAR 0 2
63728: PUSH
63729: LD_INT 4
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: LIST
63736: PUSH
63737: LD_VAR 0 1
63741: PUSH
63742: LD_VAR 0 2
63746: PUSH
63747: LD_INT 3
63749: PLUS
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: LIST
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: ST_TO_ADDR
// end ; end ;
63766: GO 63769
63768: POP
// result := list ;
63769: LD_ADDR_VAR 0 4
63773: PUSH
63774: LD_VAR 0 5
63778: ST_TO_ADDR
// end ;
63779: LD_VAR 0 4
63783: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63784: LD_INT 0
63786: PPUSH
63787: PPUSH
63788: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63789: LD_VAR 0 1
63793: NOT
63794: PUSH
63795: LD_VAR 0 2
63799: PUSH
63800: LD_INT 1
63802: PUSH
63803: LD_INT 2
63805: PUSH
63806: LD_INT 3
63808: PUSH
63809: LD_INT 4
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: IN
63818: NOT
63819: OR
63820: IFFALSE 63824
// exit ;
63822: GO 63916
// tmp := [ ] ;
63824: LD_ADDR_VAR 0 5
63828: PUSH
63829: EMPTY
63830: ST_TO_ADDR
// for i in units do
63831: LD_ADDR_VAR 0 4
63835: PUSH
63836: LD_VAR 0 1
63840: PUSH
63841: FOR_IN
63842: IFFALSE 63885
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63844: LD_ADDR_VAR 0 5
63848: PUSH
63849: LD_VAR 0 5
63853: PPUSH
63854: LD_VAR 0 5
63858: PUSH
63859: LD_INT 1
63861: PLUS
63862: PPUSH
63863: LD_VAR 0 4
63867: PPUSH
63868: LD_VAR 0 2
63872: PPUSH
63873: CALL_OW 259
63877: PPUSH
63878: CALL_OW 2
63882: ST_TO_ADDR
63883: GO 63841
63885: POP
63886: POP
// if not tmp then
63887: LD_VAR 0 5
63891: NOT
63892: IFFALSE 63896
// exit ;
63894: GO 63916
// result := SortListByListDesc ( units , tmp ) ;
63896: LD_ADDR_VAR 0 3
63900: PUSH
63901: LD_VAR 0 1
63905: PPUSH
63906: LD_VAR 0 5
63910: PPUSH
63911: CALL_OW 77
63915: ST_TO_ADDR
// end ;
63916: LD_VAR 0 3
63920: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63921: LD_INT 0
63923: PPUSH
63924: PPUSH
63925: PPUSH
// result := false ;
63926: LD_ADDR_VAR 0 3
63930: PUSH
63931: LD_INT 0
63933: ST_TO_ADDR
// x := GetX ( building ) ;
63934: LD_ADDR_VAR 0 4
63938: PUSH
63939: LD_VAR 0 2
63943: PPUSH
63944: CALL_OW 250
63948: ST_TO_ADDR
// y := GetY ( building ) ;
63949: LD_ADDR_VAR 0 5
63953: PUSH
63954: LD_VAR 0 2
63958: PPUSH
63959: CALL_OW 251
63963: ST_TO_ADDR
// if not building or not x or not y then
63964: LD_VAR 0 2
63968: NOT
63969: PUSH
63970: LD_VAR 0 4
63974: NOT
63975: OR
63976: PUSH
63977: LD_VAR 0 5
63981: NOT
63982: OR
63983: IFFALSE 63987
// exit ;
63985: GO 64079
// if GetTaskList ( unit ) then
63987: LD_VAR 0 1
63991: PPUSH
63992: CALL_OW 437
63996: IFFALSE 64079
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63998: LD_STRING e
64000: PUSH
64001: LD_VAR 0 1
64005: PPUSH
64006: CALL_OW 437
64010: PUSH
64011: LD_INT 1
64013: ARRAY
64014: PUSH
64015: LD_INT 1
64017: ARRAY
64018: EQUAL
64019: PUSH
64020: LD_VAR 0 4
64024: PUSH
64025: LD_VAR 0 1
64029: PPUSH
64030: CALL_OW 437
64034: PUSH
64035: LD_INT 1
64037: ARRAY
64038: PUSH
64039: LD_INT 2
64041: ARRAY
64042: EQUAL
64043: AND
64044: PUSH
64045: LD_VAR 0 5
64049: PUSH
64050: LD_VAR 0 1
64054: PPUSH
64055: CALL_OW 437
64059: PUSH
64060: LD_INT 1
64062: ARRAY
64063: PUSH
64064: LD_INT 3
64066: ARRAY
64067: EQUAL
64068: AND
64069: IFFALSE 64079
// result := true end ;
64071: LD_ADDR_VAR 0 3
64075: PUSH
64076: LD_INT 1
64078: ST_TO_ADDR
// end ;
64079: LD_VAR 0 3
64083: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64084: LD_INT 0
64086: PPUSH
// result := false ;
64087: LD_ADDR_VAR 0 4
64091: PUSH
64092: LD_INT 0
64094: ST_TO_ADDR
// if GetTaskList ( unit ) then
64095: LD_VAR 0 1
64099: PPUSH
64100: CALL_OW 437
64104: IFFALSE 64187
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64106: LD_STRING M
64108: PUSH
64109: LD_VAR 0 1
64113: PPUSH
64114: CALL_OW 437
64118: PUSH
64119: LD_INT 1
64121: ARRAY
64122: PUSH
64123: LD_INT 1
64125: ARRAY
64126: EQUAL
64127: PUSH
64128: LD_VAR 0 2
64132: PUSH
64133: LD_VAR 0 1
64137: PPUSH
64138: CALL_OW 437
64142: PUSH
64143: LD_INT 1
64145: ARRAY
64146: PUSH
64147: LD_INT 2
64149: ARRAY
64150: EQUAL
64151: AND
64152: PUSH
64153: LD_VAR 0 3
64157: PUSH
64158: LD_VAR 0 1
64162: PPUSH
64163: CALL_OW 437
64167: PUSH
64168: LD_INT 1
64170: ARRAY
64171: PUSH
64172: LD_INT 3
64174: ARRAY
64175: EQUAL
64176: AND
64177: IFFALSE 64187
// result := true ;
64179: LD_ADDR_VAR 0 4
64183: PUSH
64184: LD_INT 1
64186: ST_TO_ADDR
// end ; end ;
64187: LD_VAR 0 4
64191: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64192: LD_INT 0
64194: PPUSH
64195: PPUSH
64196: PPUSH
64197: PPUSH
// if not unit or not area then
64198: LD_VAR 0 1
64202: NOT
64203: PUSH
64204: LD_VAR 0 2
64208: NOT
64209: OR
64210: IFFALSE 64214
// exit ;
64212: GO 64378
// tmp := AreaToList ( area , i ) ;
64214: LD_ADDR_VAR 0 6
64218: PUSH
64219: LD_VAR 0 2
64223: PPUSH
64224: LD_VAR 0 5
64228: PPUSH
64229: CALL_OW 517
64233: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64234: LD_ADDR_VAR 0 5
64238: PUSH
64239: DOUBLE
64240: LD_INT 1
64242: DEC
64243: ST_TO_ADDR
64244: LD_VAR 0 6
64248: PUSH
64249: LD_INT 1
64251: ARRAY
64252: PUSH
64253: FOR_TO
64254: IFFALSE 64376
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64256: LD_ADDR_VAR 0 7
64260: PUSH
64261: LD_VAR 0 6
64265: PUSH
64266: LD_INT 1
64268: ARRAY
64269: PUSH
64270: LD_VAR 0 5
64274: ARRAY
64275: PUSH
64276: LD_VAR 0 6
64280: PUSH
64281: LD_INT 2
64283: ARRAY
64284: PUSH
64285: LD_VAR 0 5
64289: ARRAY
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64295: LD_VAR 0 7
64299: PUSH
64300: LD_INT 1
64302: ARRAY
64303: PPUSH
64304: LD_VAR 0 7
64308: PUSH
64309: LD_INT 2
64311: ARRAY
64312: PPUSH
64313: CALL_OW 428
64317: PUSH
64318: LD_INT 0
64320: EQUAL
64321: IFFALSE 64374
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64323: LD_VAR 0 1
64327: PPUSH
64328: LD_VAR 0 7
64332: PUSH
64333: LD_INT 1
64335: ARRAY
64336: PPUSH
64337: LD_VAR 0 7
64341: PUSH
64342: LD_INT 2
64344: ARRAY
64345: PPUSH
64346: LD_VAR 0 3
64350: PPUSH
64351: CALL_OW 48
// result := IsPlaced ( unit ) ;
64355: LD_ADDR_VAR 0 4
64359: PUSH
64360: LD_VAR 0 1
64364: PPUSH
64365: CALL_OW 305
64369: ST_TO_ADDR
// exit ;
64370: POP
64371: POP
64372: GO 64378
// end ; end ;
64374: GO 64253
64376: POP
64377: POP
// end ;
64378: LD_VAR 0 4
64382: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64383: LD_INT 0
64385: PPUSH
64386: PPUSH
64387: PPUSH
// if not side or side > 8 then
64388: LD_VAR 0 1
64392: NOT
64393: PUSH
64394: LD_VAR 0 1
64398: PUSH
64399: LD_INT 8
64401: GREATER
64402: OR
64403: IFFALSE 64407
// exit ;
64405: GO 64594
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64407: LD_ADDR_VAR 0 4
64411: PUSH
64412: LD_INT 22
64414: PUSH
64415: LD_VAR 0 1
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 21
64426: PUSH
64427: LD_INT 3
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PPUSH
64438: CALL_OW 69
64442: ST_TO_ADDR
// if not tmp then
64443: LD_VAR 0 4
64447: NOT
64448: IFFALSE 64452
// exit ;
64450: GO 64594
// enable_addtolog := true ;
64452: LD_ADDR_OWVAR 81
64456: PUSH
64457: LD_INT 1
64459: ST_TO_ADDR
// AddToLog ( [ ) ;
64460: LD_STRING [
64462: PPUSH
64463: CALL_OW 561
// for i in tmp do
64467: LD_ADDR_VAR 0 3
64471: PUSH
64472: LD_VAR 0 4
64476: PUSH
64477: FOR_IN
64478: IFFALSE 64585
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64480: LD_STRING [
64482: PUSH
64483: LD_VAR 0 3
64487: PPUSH
64488: CALL_OW 266
64492: STR
64493: PUSH
64494: LD_STRING , 
64496: STR
64497: PUSH
64498: LD_VAR 0 3
64502: PPUSH
64503: CALL_OW 250
64507: STR
64508: PUSH
64509: LD_STRING , 
64511: STR
64512: PUSH
64513: LD_VAR 0 3
64517: PPUSH
64518: CALL_OW 251
64522: STR
64523: PUSH
64524: LD_STRING , 
64526: STR
64527: PUSH
64528: LD_VAR 0 3
64532: PPUSH
64533: CALL_OW 254
64537: STR
64538: PUSH
64539: LD_STRING , 
64541: STR
64542: PUSH
64543: LD_VAR 0 3
64547: PPUSH
64548: LD_INT 1
64550: PPUSH
64551: CALL_OW 268
64555: STR
64556: PUSH
64557: LD_STRING , 
64559: STR
64560: PUSH
64561: LD_VAR 0 3
64565: PPUSH
64566: LD_INT 2
64568: PPUSH
64569: CALL_OW 268
64573: STR
64574: PUSH
64575: LD_STRING ],
64577: STR
64578: PPUSH
64579: CALL_OW 561
// end ;
64583: GO 64477
64585: POP
64586: POP
// AddToLog ( ]; ) ;
64587: LD_STRING ];
64589: PPUSH
64590: CALL_OW 561
// end ;
64594: LD_VAR 0 2
64598: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64599: LD_INT 0
64601: PPUSH
64602: PPUSH
64603: PPUSH
64604: PPUSH
64605: PPUSH
// if not area or not rate or not max then
64606: LD_VAR 0 1
64610: NOT
64611: PUSH
64612: LD_VAR 0 2
64616: NOT
64617: OR
64618: PUSH
64619: LD_VAR 0 4
64623: NOT
64624: OR
64625: IFFALSE 64629
// exit ;
64627: GO 64818
// while 1 do
64629: LD_INT 1
64631: IFFALSE 64818
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64633: LD_ADDR_VAR 0 9
64637: PUSH
64638: LD_VAR 0 1
64642: PPUSH
64643: LD_INT 1
64645: PPUSH
64646: CALL_OW 287
64650: PUSH
64651: LD_INT 10
64653: MUL
64654: ST_TO_ADDR
// r := rate / 10 ;
64655: LD_ADDR_VAR 0 7
64659: PUSH
64660: LD_VAR 0 2
64664: PUSH
64665: LD_INT 10
64667: DIVREAL
64668: ST_TO_ADDR
// time := 1 1$00 ;
64669: LD_ADDR_VAR 0 8
64673: PUSH
64674: LD_INT 2100
64676: ST_TO_ADDR
// if amount < min then
64677: LD_VAR 0 9
64681: PUSH
64682: LD_VAR 0 3
64686: LESS
64687: IFFALSE 64705
// r := r * 2 else
64689: LD_ADDR_VAR 0 7
64693: PUSH
64694: LD_VAR 0 7
64698: PUSH
64699: LD_INT 2
64701: MUL
64702: ST_TO_ADDR
64703: GO 64731
// if amount > max then
64705: LD_VAR 0 9
64709: PUSH
64710: LD_VAR 0 4
64714: GREATER
64715: IFFALSE 64731
// r := r / 2 ;
64717: LD_ADDR_VAR 0 7
64721: PUSH
64722: LD_VAR 0 7
64726: PUSH
64727: LD_INT 2
64729: DIVREAL
64730: ST_TO_ADDR
// time := time / r ;
64731: LD_ADDR_VAR 0 8
64735: PUSH
64736: LD_VAR 0 8
64740: PUSH
64741: LD_VAR 0 7
64745: DIVREAL
64746: ST_TO_ADDR
// if time < 0 then
64747: LD_VAR 0 8
64751: PUSH
64752: LD_INT 0
64754: LESS
64755: IFFALSE 64772
// time := time * - 1 ;
64757: LD_ADDR_VAR 0 8
64761: PUSH
64762: LD_VAR 0 8
64766: PUSH
64767: LD_INT 1
64769: NEG
64770: MUL
64771: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64772: LD_VAR 0 8
64776: PUSH
64777: LD_INT 35
64779: PPUSH
64780: LD_INT 875
64782: PPUSH
64783: CALL_OW 12
64787: PLUS
64788: PPUSH
64789: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64793: LD_INT 1
64795: PPUSH
64796: LD_INT 5
64798: PPUSH
64799: CALL_OW 12
64803: PPUSH
64804: LD_VAR 0 1
64808: PPUSH
64809: LD_INT 1
64811: PPUSH
64812: CALL_OW 55
// end ;
64816: GO 64629
// end ;
64818: LD_VAR 0 5
64822: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64823: LD_INT 0
64825: PPUSH
64826: PPUSH
64827: PPUSH
64828: PPUSH
64829: PPUSH
64830: PPUSH
64831: PPUSH
64832: PPUSH
// if not turrets or not factories then
64833: LD_VAR 0 1
64837: NOT
64838: PUSH
64839: LD_VAR 0 2
64843: NOT
64844: OR
64845: IFFALSE 64849
// exit ;
64847: GO 65156
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64849: LD_ADDR_VAR 0 10
64853: PUSH
64854: LD_INT 5
64856: PUSH
64857: LD_INT 6
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 2
64866: PUSH
64867: LD_INT 4
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 3
64876: PUSH
64877: LD_INT 5
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 24
64891: PUSH
64892: LD_INT 25
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 23
64901: PUSH
64902: LD_INT 27
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 42
64915: PUSH
64916: LD_INT 43
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 44
64925: PUSH
64926: LD_INT 46
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 45
64935: PUSH
64936: LD_INT 47
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: LIST
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: LIST
64952: ST_TO_ADDR
// result := [ ] ;
64953: LD_ADDR_VAR 0 3
64957: PUSH
64958: EMPTY
64959: ST_TO_ADDR
// for i in turrets do
64960: LD_ADDR_VAR 0 4
64964: PUSH
64965: LD_VAR 0 1
64969: PUSH
64970: FOR_IN
64971: IFFALSE 65154
// begin nat := GetNation ( i ) ;
64973: LD_ADDR_VAR 0 7
64977: PUSH
64978: LD_VAR 0 4
64982: PPUSH
64983: CALL_OW 248
64987: ST_TO_ADDR
// weapon := 0 ;
64988: LD_ADDR_VAR 0 8
64992: PUSH
64993: LD_INT 0
64995: ST_TO_ADDR
// if not nat then
64996: LD_VAR 0 7
65000: NOT
65001: IFFALSE 65005
// continue ;
65003: GO 64970
// for j in list [ nat ] do
65005: LD_ADDR_VAR 0 5
65009: PUSH
65010: LD_VAR 0 10
65014: PUSH
65015: LD_VAR 0 7
65019: ARRAY
65020: PUSH
65021: FOR_IN
65022: IFFALSE 65063
// if GetBWeapon ( i ) = j [ 1 ] then
65024: LD_VAR 0 4
65028: PPUSH
65029: CALL_OW 269
65033: PUSH
65034: LD_VAR 0 5
65038: PUSH
65039: LD_INT 1
65041: ARRAY
65042: EQUAL
65043: IFFALSE 65061
// begin weapon := j [ 2 ] ;
65045: LD_ADDR_VAR 0 8
65049: PUSH
65050: LD_VAR 0 5
65054: PUSH
65055: LD_INT 2
65057: ARRAY
65058: ST_TO_ADDR
// break ;
65059: GO 65063
// end ;
65061: GO 65021
65063: POP
65064: POP
// if not weapon then
65065: LD_VAR 0 8
65069: NOT
65070: IFFALSE 65074
// continue ;
65072: GO 64970
// for k in factories do
65074: LD_ADDR_VAR 0 6
65078: PUSH
65079: LD_VAR 0 2
65083: PUSH
65084: FOR_IN
65085: IFFALSE 65150
// begin weapons := AvailableWeaponList ( k ) ;
65087: LD_ADDR_VAR 0 9
65091: PUSH
65092: LD_VAR 0 6
65096: PPUSH
65097: CALL_OW 478
65101: ST_TO_ADDR
// if not weapons then
65102: LD_VAR 0 9
65106: NOT
65107: IFFALSE 65111
// continue ;
65109: GO 65084
// if weapon in weapons then
65111: LD_VAR 0 8
65115: PUSH
65116: LD_VAR 0 9
65120: IN
65121: IFFALSE 65148
// begin result := [ i , weapon ] ;
65123: LD_ADDR_VAR 0 3
65127: PUSH
65128: LD_VAR 0 4
65132: PUSH
65133: LD_VAR 0 8
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: ST_TO_ADDR
// exit ;
65142: POP
65143: POP
65144: POP
65145: POP
65146: GO 65156
// end ; end ;
65148: GO 65084
65150: POP
65151: POP
// end ;
65152: GO 64970
65154: POP
65155: POP
// end ;
65156: LD_VAR 0 3
65160: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65161: LD_INT 0
65163: PPUSH
// if not side or side > 8 then
65164: LD_VAR 0 3
65168: NOT
65169: PUSH
65170: LD_VAR 0 3
65174: PUSH
65175: LD_INT 8
65177: GREATER
65178: OR
65179: IFFALSE 65183
// exit ;
65181: GO 65242
// if not range then
65183: LD_VAR 0 4
65187: NOT
65188: IFFALSE 65199
// range := - 12 ;
65190: LD_ADDR_VAR 0 4
65194: PUSH
65195: LD_INT 12
65197: NEG
65198: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65199: LD_VAR 0 1
65203: PPUSH
65204: LD_VAR 0 2
65208: PPUSH
65209: LD_VAR 0 3
65213: PPUSH
65214: LD_VAR 0 4
65218: PPUSH
65219: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65223: LD_VAR 0 1
65227: PPUSH
65228: LD_VAR 0 2
65232: PPUSH
65233: LD_VAR 0 3
65237: PPUSH
65238: CALL_OW 331
// end ;
65242: LD_VAR 0 5
65246: RET
// export function Video ( mode ) ; begin
65247: LD_INT 0
65249: PPUSH
// ingame_video = mode ;
65250: LD_ADDR_OWVAR 52
65254: PUSH
65255: LD_VAR 0 1
65259: ST_TO_ADDR
// interface_hidden = mode ;
65260: LD_ADDR_OWVAR 54
65264: PUSH
65265: LD_VAR 0 1
65269: ST_TO_ADDR
// end ;
65270: LD_VAR 0 2
65274: RET
// export function Join ( array , element ) ; begin
65275: LD_INT 0
65277: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65278: LD_ADDR_VAR 0 3
65282: PUSH
65283: LD_VAR 0 1
65287: PPUSH
65288: LD_VAR 0 1
65292: PUSH
65293: LD_INT 1
65295: PLUS
65296: PPUSH
65297: LD_VAR 0 2
65301: PPUSH
65302: CALL_OW 1
65306: ST_TO_ADDR
// end ;
65307: LD_VAR 0 3
65311: RET
// export function JoinUnion ( array , element ) ; begin
65312: LD_INT 0
65314: PPUSH
// result := array union element ;
65315: LD_ADDR_VAR 0 3
65319: PUSH
65320: LD_VAR 0 1
65324: PUSH
65325: LD_VAR 0 2
65329: UNION
65330: ST_TO_ADDR
// end ;
65331: LD_VAR 0 3
65335: RET
// export function GetBehemoths ( side ) ; begin
65336: LD_INT 0
65338: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65339: LD_ADDR_VAR 0 2
65343: PUSH
65344: LD_INT 22
65346: PUSH
65347: LD_VAR 0 1
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 31
65358: PUSH
65359: LD_INT 25
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PPUSH
65370: CALL_OW 69
65374: ST_TO_ADDR
// end ;
65375: LD_VAR 0 2
65379: RET
// export function Shuffle ( array ) ; var i , index ; begin
65380: LD_INT 0
65382: PPUSH
65383: PPUSH
65384: PPUSH
// result := [ ] ;
65385: LD_ADDR_VAR 0 2
65389: PUSH
65390: EMPTY
65391: ST_TO_ADDR
// if not array then
65392: LD_VAR 0 1
65396: NOT
65397: IFFALSE 65401
// exit ;
65399: GO 65500
// Randomize ;
65401: CALL_OW 10
// for i = array downto 1 do
65405: LD_ADDR_VAR 0 3
65409: PUSH
65410: DOUBLE
65411: LD_VAR 0 1
65415: INC
65416: ST_TO_ADDR
65417: LD_INT 1
65419: PUSH
65420: FOR_DOWNTO
65421: IFFALSE 65498
// begin index := rand ( 1 , array ) ;
65423: LD_ADDR_VAR 0 4
65427: PUSH
65428: LD_INT 1
65430: PPUSH
65431: LD_VAR 0 1
65435: PPUSH
65436: CALL_OW 12
65440: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65441: LD_ADDR_VAR 0 2
65445: PUSH
65446: LD_VAR 0 2
65450: PPUSH
65451: LD_VAR 0 2
65455: PUSH
65456: LD_INT 1
65458: PLUS
65459: PPUSH
65460: LD_VAR 0 1
65464: PUSH
65465: LD_VAR 0 4
65469: ARRAY
65470: PPUSH
65471: CALL_OW 2
65475: ST_TO_ADDR
// array := Delete ( array , index ) ;
65476: LD_ADDR_VAR 0 1
65480: PUSH
65481: LD_VAR 0 1
65485: PPUSH
65486: LD_VAR 0 4
65490: PPUSH
65491: CALL_OW 3
65495: ST_TO_ADDR
// end ;
65496: GO 65420
65498: POP
65499: POP
// end ;
65500: LD_VAR 0 2
65504: RET
// export function GetBaseMaterials ( base ) ; begin
65505: LD_INT 0
65507: PPUSH
// result := [ 0 , 0 , 0 ] ;
65508: LD_ADDR_VAR 0 2
65512: PUSH
65513: LD_INT 0
65515: PUSH
65516: LD_INT 0
65518: PUSH
65519: LD_INT 0
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: LIST
65526: ST_TO_ADDR
// if not base then
65527: LD_VAR 0 1
65531: NOT
65532: IFFALSE 65536
// exit ;
65534: GO 65585
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65536: LD_ADDR_VAR 0 2
65540: PUSH
65541: LD_VAR 0 1
65545: PPUSH
65546: LD_INT 1
65548: PPUSH
65549: CALL_OW 275
65553: PUSH
65554: LD_VAR 0 1
65558: PPUSH
65559: LD_INT 2
65561: PPUSH
65562: CALL_OW 275
65566: PUSH
65567: LD_VAR 0 1
65571: PPUSH
65572: LD_INT 3
65574: PPUSH
65575: CALL_OW 275
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: LIST
65584: ST_TO_ADDR
// end ;
65585: LD_VAR 0 2
65589: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65590: LD_INT 0
65592: PPUSH
65593: PPUSH
// result := array ;
65594: LD_ADDR_VAR 0 3
65598: PUSH
65599: LD_VAR 0 1
65603: ST_TO_ADDR
// if size >= result then
65604: LD_VAR 0 2
65608: PUSH
65609: LD_VAR 0 3
65613: GREATEREQUAL
65614: IFFALSE 65618
// exit ;
65616: GO 65668
// if size then
65618: LD_VAR 0 2
65622: IFFALSE 65668
// for i := array downto size do
65624: LD_ADDR_VAR 0 4
65628: PUSH
65629: DOUBLE
65630: LD_VAR 0 1
65634: INC
65635: ST_TO_ADDR
65636: LD_VAR 0 2
65640: PUSH
65641: FOR_DOWNTO
65642: IFFALSE 65666
// result := Delete ( result , result ) ;
65644: LD_ADDR_VAR 0 3
65648: PUSH
65649: LD_VAR 0 3
65653: PPUSH
65654: LD_VAR 0 3
65658: PPUSH
65659: CALL_OW 3
65663: ST_TO_ADDR
65664: GO 65641
65666: POP
65667: POP
// end ;
65668: LD_VAR 0 3
65672: RET
// export function ComExit ( unit ) ; var tmp ; begin
65673: LD_INT 0
65675: PPUSH
65676: PPUSH
// if not IsInUnit ( unit ) then
65677: LD_VAR 0 1
65681: PPUSH
65682: CALL_OW 310
65686: NOT
65687: IFFALSE 65691
// exit ;
65689: GO 65751
// tmp := IsInUnit ( unit ) ;
65691: LD_ADDR_VAR 0 3
65695: PUSH
65696: LD_VAR 0 1
65700: PPUSH
65701: CALL_OW 310
65705: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65706: LD_VAR 0 3
65710: PPUSH
65711: CALL_OW 247
65715: PUSH
65716: LD_INT 2
65718: EQUAL
65719: IFFALSE 65732
// ComExitVehicle ( unit ) else
65721: LD_VAR 0 1
65725: PPUSH
65726: CALL_OW 121
65730: GO 65741
// ComExitBuilding ( unit ) ;
65732: LD_VAR 0 1
65736: PPUSH
65737: CALL_OW 122
// result := tmp ;
65741: LD_ADDR_VAR 0 2
65745: PUSH
65746: LD_VAR 0 3
65750: ST_TO_ADDR
// end ;
65751: LD_VAR 0 2
65755: RET
// export function ComExitAll ( units ) ; var i ; begin
65756: LD_INT 0
65758: PPUSH
65759: PPUSH
// if not units then
65760: LD_VAR 0 1
65764: NOT
65765: IFFALSE 65769
// exit ;
65767: GO 65795
// for i in units do
65769: LD_ADDR_VAR 0 3
65773: PUSH
65774: LD_VAR 0 1
65778: PUSH
65779: FOR_IN
65780: IFFALSE 65793
// ComExit ( i ) ;
65782: LD_VAR 0 3
65786: PPUSH
65787: CALL 65673 0 1
65791: GO 65779
65793: POP
65794: POP
// end ;
65795: LD_VAR 0 2
65799: RET
// export function ResetHc ; begin
65800: LD_INT 0
65802: PPUSH
// InitHc ;
65803: CALL_OW 19
// hc_importance := 0 ;
65807: LD_ADDR_OWVAR 32
65811: PUSH
65812: LD_INT 0
65814: ST_TO_ADDR
// end ;
65815: LD_VAR 0 1
65819: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65820: LD_INT 0
65822: PPUSH
65823: PPUSH
65824: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65825: LD_ADDR_VAR 0 6
65829: PUSH
65830: LD_VAR 0 1
65834: PUSH
65835: LD_VAR 0 3
65839: PLUS
65840: PUSH
65841: LD_INT 2
65843: DIV
65844: ST_TO_ADDR
// if _x < 0 then
65845: LD_VAR 0 6
65849: PUSH
65850: LD_INT 0
65852: LESS
65853: IFFALSE 65870
// _x := _x * - 1 ;
65855: LD_ADDR_VAR 0 6
65859: PUSH
65860: LD_VAR 0 6
65864: PUSH
65865: LD_INT 1
65867: NEG
65868: MUL
65869: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65870: LD_ADDR_VAR 0 7
65874: PUSH
65875: LD_VAR 0 2
65879: PUSH
65880: LD_VAR 0 4
65884: PLUS
65885: PUSH
65886: LD_INT 2
65888: DIV
65889: ST_TO_ADDR
// if _y < 0 then
65890: LD_VAR 0 7
65894: PUSH
65895: LD_INT 0
65897: LESS
65898: IFFALSE 65915
// _y := _y * - 1 ;
65900: LD_ADDR_VAR 0 7
65904: PUSH
65905: LD_VAR 0 7
65909: PUSH
65910: LD_INT 1
65912: NEG
65913: MUL
65914: ST_TO_ADDR
// result := [ _x , _y ] ;
65915: LD_ADDR_VAR 0 5
65919: PUSH
65920: LD_VAR 0 6
65924: PUSH
65925: LD_VAR 0 7
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: ST_TO_ADDR
// end ;
65934: LD_VAR 0 5
65938: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65939: LD_INT 0
65941: PPUSH
65942: PPUSH
65943: PPUSH
65944: PPUSH
// task := GetTaskList ( unit ) ;
65945: LD_ADDR_VAR 0 7
65949: PUSH
65950: LD_VAR 0 1
65954: PPUSH
65955: CALL_OW 437
65959: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65960: LD_VAR 0 7
65964: NOT
65965: PUSH
65966: LD_VAR 0 1
65970: PPUSH
65971: LD_VAR 0 2
65975: PPUSH
65976: CALL_OW 308
65980: NOT
65981: AND
65982: IFFALSE 65986
// exit ;
65984: GO 66104
// if IsInArea ( unit , area ) then
65986: LD_VAR 0 1
65990: PPUSH
65991: LD_VAR 0 2
65995: PPUSH
65996: CALL_OW 308
66000: IFFALSE 66018
// begin ComMoveToArea ( unit , goAway ) ;
66002: LD_VAR 0 1
66006: PPUSH
66007: LD_VAR 0 3
66011: PPUSH
66012: CALL_OW 113
// exit ;
66016: GO 66104
// end ; if task [ 1 ] [ 1 ] <> M then
66018: LD_VAR 0 7
66022: PUSH
66023: LD_INT 1
66025: ARRAY
66026: PUSH
66027: LD_INT 1
66029: ARRAY
66030: PUSH
66031: LD_STRING M
66033: NONEQUAL
66034: IFFALSE 66038
// exit ;
66036: GO 66104
// x := task [ 1 ] [ 2 ] ;
66038: LD_ADDR_VAR 0 5
66042: PUSH
66043: LD_VAR 0 7
66047: PUSH
66048: LD_INT 1
66050: ARRAY
66051: PUSH
66052: LD_INT 2
66054: ARRAY
66055: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66056: LD_ADDR_VAR 0 6
66060: PUSH
66061: LD_VAR 0 7
66065: PUSH
66066: LD_INT 1
66068: ARRAY
66069: PUSH
66070: LD_INT 3
66072: ARRAY
66073: ST_TO_ADDR
// if InArea ( x , y , area ) then
66074: LD_VAR 0 5
66078: PPUSH
66079: LD_VAR 0 6
66083: PPUSH
66084: LD_VAR 0 2
66088: PPUSH
66089: CALL_OW 309
66093: IFFALSE 66104
// ComStop ( unit ) ;
66095: LD_VAR 0 1
66099: PPUSH
66100: CALL_OW 141
// end ;
66104: LD_VAR 0 4
66108: RET
// export function Abs ( value ) ; begin
66109: LD_INT 0
66111: PPUSH
// result := value ;
66112: LD_ADDR_VAR 0 2
66116: PUSH
66117: LD_VAR 0 1
66121: ST_TO_ADDR
// if value < 0 then
66122: LD_VAR 0 1
66126: PUSH
66127: LD_INT 0
66129: LESS
66130: IFFALSE 66147
// result := value * - 1 ;
66132: LD_ADDR_VAR 0 2
66136: PUSH
66137: LD_VAR 0 1
66141: PUSH
66142: LD_INT 1
66144: NEG
66145: MUL
66146: ST_TO_ADDR
// end ;
66147: LD_VAR 0 2
66151: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66152: LD_INT 0
66154: PPUSH
66155: PPUSH
66156: PPUSH
66157: PPUSH
66158: PPUSH
66159: PPUSH
66160: PPUSH
66161: PPUSH
// if not unit or not building then
66162: LD_VAR 0 1
66166: NOT
66167: PUSH
66168: LD_VAR 0 2
66172: NOT
66173: OR
66174: IFFALSE 66178
// exit ;
66176: GO 66404
// x := GetX ( building ) ;
66178: LD_ADDR_VAR 0 4
66182: PUSH
66183: LD_VAR 0 2
66187: PPUSH
66188: CALL_OW 250
66192: ST_TO_ADDR
// y := GetY ( building ) ;
66193: LD_ADDR_VAR 0 6
66197: PUSH
66198: LD_VAR 0 2
66202: PPUSH
66203: CALL_OW 251
66207: ST_TO_ADDR
// d := GetDir ( building ) ;
66208: LD_ADDR_VAR 0 8
66212: PUSH
66213: LD_VAR 0 2
66217: PPUSH
66218: CALL_OW 254
66222: ST_TO_ADDR
// r := 4 ;
66223: LD_ADDR_VAR 0 9
66227: PUSH
66228: LD_INT 4
66230: ST_TO_ADDR
// for i := 1 to 5 do
66231: LD_ADDR_VAR 0 10
66235: PUSH
66236: DOUBLE
66237: LD_INT 1
66239: DEC
66240: ST_TO_ADDR
66241: LD_INT 5
66243: PUSH
66244: FOR_TO
66245: IFFALSE 66402
// begin _x := ShiftX ( x , d , r + i ) ;
66247: LD_ADDR_VAR 0 5
66251: PUSH
66252: LD_VAR 0 4
66256: PPUSH
66257: LD_VAR 0 8
66261: PPUSH
66262: LD_VAR 0 9
66266: PUSH
66267: LD_VAR 0 10
66271: PLUS
66272: PPUSH
66273: CALL_OW 272
66277: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66278: LD_ADDR_VAR 0 7
66282: PUSH
66283: LD_VAR 0 6
66287: PPUSH
66288: LD_VAR 0 8
66292: PPUSH
66293: LD_VAR 0 9
66297: PUSH
66298: LD_VAR 0 10
66302: PLUS
66303: PPUSH
66304: CALL_OW 273
66308: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66309: LD_VAR 0 5
66313: PPUSH
66314: LD_VAR 0 7
66318: PPUSH
66319: CALL_OW 488
66323: PUSH
66324: LD_VAR 0 5
66328: PPUSH
66329: LD_VAR 0 7
66333: PPUSH
66334: CALL_OW 428
66338: PPUSH
66339: CALL_OW 247
66343: PUSH
66344: LD_INT 3
66346: PUSH
66347: LD_INT 2
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: IN
66354: NOT
66355: AND
66356: IFFALSE 66400
// begin ComMoveXY ( unit , _x , _y ) ;
66358: LD_VAR 0 1
66362: PPUSH
66363: LD_VAR 0 5
66367: PPUSH
66368: LD_VAR 0 7
66372: PPUSH
66373: CALL_OW 111
// result := [ _x , _y ] ;
66377: LD_ADDR_VAR 0 3
66381: PUSH
66382: LD_VAR 0 5
66386: PUSH
66387: LD_VAR 0 7
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: ST_TO_ADDR
// exit ;
66396: POP
66397: POP
66398: GO 66404
// end ; end ;
66400: GO 66244
66402: POP
66403: POP
// end ;
66404: LD_VAR 0 3
66408: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66409: LD_INT 0
66411: PPUSH
66412: PPUSH
66413: PPUSH
// result := 0 ;
66414: LD_ADDR_VAR 0 3
66418: PUSH
66419: LD_INT 0
66421: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66422: LD_VAR 0 1
66426: PUSH
66427: LD_INT 0
66429: LESS
66430: PUSH
66431: LD_VAR 0 1
66435: PUSH
66436: LD_INT 8
66438: GREATER
66439: OR
66440: PUSH
66441: LD_VAR 0 2
66445: PUSH
66446: LD_INT 0
66448: LESS
66449: OR
66450: PUSH
66451: LD_VAR 0 2
66455: PUSH
66456: LD_INT 8
66458: GREATER
66459: OR
66460: IFFALSE 66464
// exit ;
66462: GO 66539
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66464: LD_ADDR_VAR 0 4
66468: PUSH
66469: LD_INT 22
66471: PUSH
66472: LD_VAR 0 2
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PPUSH
66481: CALL_OW 69
66485: PUSH
66486: FOR_IN
66487: IFFALSE 66537
// begin un := UnitShoot ( i ) ;
66489: LD_ADDR_VAR 0 5
66493: PUSH
66494: LD_VAR 0 4
66498: PPUSH
66499: CALL_OW 504
66503: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66504: LD_VAR 0 5
66508: PPUSH
66509: CALL_OW 255
66513: PUSH
66514: LD_VAR 0 1
66518: EQUAL
66519: IFFALSE 66535
// begin result := un ;
66521: LD_ADDR_VAR 0 3
66525: PUSH
66526: LD_VAR 0 5
66530: ST_TO_ADDR
// exit ;
66531: POP
66532: POP
66533: GO 66539
// end ; end ;
66535: GO 66486
66537: POP
66538: POP
// end ;
66539: LD_VAR 0 3
66543: RET
// export function GetCargoBay ( units ) ; begin
66544: LD_INT 0
66546: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66547: LD_ADDR_VAR 0 2
66551: PUSH
66552: LD_VAR 0 1
66556: PPUSH
66557: LD_INT 2
66559: PUSH
66560: LD_INT 34
66562: PUSH
66563: LD_INT 12
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 34
66572: PUSH
66573: LD_INT 51
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 34
66582: PUSH
66583: LD_INT 32
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 34
66592: PUSH
66593: LD_INT 89
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: PPUSH
66607: CALL_OW 72
66611: ST_TO_ADDR
// end ;
66612: LD_VAR 0 2
66616: RET
// export function Negate ( value ) ; begin
66617: LD_INT 0
66619: PPUSH
// result := not value ;
66620: LD_ADDR_VAR 0 2
66624: PUSH
66625: LD_VAR 0 1
66629: NOT
66630: ST_TO_ADDR
// end ;
66631: LD_VAR 0 2
66635: RET
// export function Inc ( value ) ; begin
66636: LD_INT 0
66638: PPUSH
// result := value + 1 ;
66639: LD_ADDR_VAR 0 2
66643: PUSH
66644: LD_VAR 0 1
66648: PUSH
66649: LD_INT 1
66651: PLUS
66652: ST_TO_ADDR
// end ;
66653: LD_VAR 0 2
66657: RET
// export function Dec ( value ) ; begin
66658: LD_INT 0
66660: PPUSH
// result := value - 1 ;
66661: LD_ADDR_VAR 0 2
66665: PUSH
66666: LD_VAR 0 1
66670: PUSH
66671: LD_INT 1
66673: MINUS
66674: ST_TO_ADDR
// end ;
66675: LD_VAR 0 2
66679: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66680: LD_INT 0
66682: PPUSH
66683: PPUSH
66684: PPUSH
66685: PPUSH
66686: PPUSH
66687: PPUSH
66688: PPUSH
66689: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66690: LD_VAR 0 1
66694: PPUSH
66695: LD_VAR 0 2
66699: PPUSH
66700: CALL_OW 488
66704: NOT
66705: PUSH
66706: LD_VAR 0 3
66710: PPUSH
66711: LD_VAR 0 4
66715: PPUSH
66716: CALL_OW 488
66720: NOT
66721: OR
66722: IFFALSE 66735
// begin result := - 1 ;
66724: LD_ADDR_VAR 0 5
66728: PUSH
66729: LD_INT 1
66731: NEG
66732: ST_TO_ADDR
// exit ;
66733: GO 66970
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66735: LD_ADDR_VAR 0 12
66739: PUSH
66740: LD_VAR 0 1
66744: PPUSH
66745: LD_VAR 0 2
66749: PPUSH
66750: LD_VAR 0 3
66754: PPUSH
66755: LD_VAR 0 4
66759: PPUSH
66760: CALL 65820 0 4
66764: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66765: LD_ADDR_VAR 0 11
66769: PUSH
66770: LD_VAR 0 1
66774: PPUSH
66775: LD_VAR 0 2
66779: PPUSH
66780: LD_VAR 0 12
66784: PUSH
66785: LD_INT 1
66787: ARRAY
66788: PPUSH
66789: LD_VAR 0 12
66793: PUSH
66794: LD_INT 2
66796: ARRAY
66797: PPUSH
66798: CALL_OW 298
66802: ST_TO_ADDR
// distance := 9999 ;
66803: LD_ADDR_VAR 0 10
66807: PUSH
66808: LD_INT 9999
66810: ST_TO_ADDR
// for i := 0 to 5 do
66811: LD_ADDR_VAR 0 6
66815: PUSH
66816: DOUBLE
66817: LD_INT 0
66819: DEC
66820: ST_TO_ADDR
66821: LD_INT 5
66823: PUSH
66824: FOR_TO
66825: IFFALSE 66968
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66827: LD_ADDR_VAR 0 7
66831: PUSH
66832: LD_VAR 0 1
66836: PPUSH
66837: LD_VAR 0 6
66841: PPUSH
66842: LD_VAR 0 11
66846: PPUSH
66847: CALL_OW 272
66851: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66852: LD_ADDR_VAR 0 8
66856: PUSH
66857: LD_VAR 0 2
66861: PPUSH
66862: LD_VAR 0 6
66866: PPUSH
66867: LD_VAR 0 11
66871: PPUSH
66872: CALL_OW 273
66876: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66877: LD_VAR 0 7
66881: PPUSH
66882: LD_VAR 0 8
66886: PPUSH
66887: CALL_OW 488
66891: NOT
66892: IFFALSE 66896
// continue ;
66894: GO 66824
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66896: LD_ADDR_VAR 0 9
66900: PUSH
66901: LD_VAR 0 12
66905: PUSH
66906: LD_INT 1
66908: ARRAY
66909: PPUSH
66910: LD_VAR 0 12
66914: PUSH
66915: LD_INT 2
66917: ARRAY
66918: PPUSH
66919: LD_VAR 0 7
66923: PPUSH
66924: LD_VAR 0 8
66928: PPUSH
66929: CALL_OW 298
66933: ST_TO_ADDR
// if tmp < distance then
66934: LD_VAR 0 9
66938: PUSH
66939: LD_VAR 0 10
66943: LESS
66944: IFFALSE 66966
// begin result := i ;
66946: LD_ADDR_VAR 0 5
66950: PUSH
66951: LD_VAR 0 6
66955: ST_TO_ADDR
// distance := tmp ;
66956: LD_ADDR_VAR 0 10
66960: PUSH
66961: LD_VAR 0 9
66965: ST_TO_ADDR
// end ; end ;
66966: GO 66824
66968: POP
66969: POP
// end ;
66970: LD_VAR 0 5
66974: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66975: LD_INT 0
66977: PPUSH
66978: PPUSH
// if not driver or not IsInUnit ( driver ) then
66979: LD_VAR 0 1
66983: NOT
66984: PUSH
66985: LD_VAR 0 1
66989: PPUSH
66990: CALL_OW 310
66994: NOT
66995: OR
66996: IFFALSE 67000
// exit ;
66998: GO 67090
// vehicle := IsInUnit ( driver ) ;
67000: LD_ADDR_VAR 0 3
67004: PUSH
67005: LD_VAR 0 1
67009: PPUSH
67010: CALL_OW 310
67014: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67015: LD_VAR 0 1
67019: PPUSH
67020: LD_STRING \
67022: PUSH
67023: LD_INT 0
67025: PUSH
67026: LD_INT 0
67028: PUSH
67029: LD_INT 0
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: LD_INT 0
67037: PUSH
67038: LD_INT 0
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: PUSH
67050: LD_STRING E
67052: PUSH
67053: LD_INT 0
67055: PUSH
67056: LD_INT 0
67058: PUSH
67059: LD_VAR 0 3
67063: PUSH
67064: LD_INT 0
67066: PUSH
67067: LD_INT 0
67069: PUSH
67070: LD_INT 0
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PPUSH
67086: CALL_OW 446
// end ;
67090: LD_VAR 0 2
67094: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67095: LD_INT 0
67097: PPUSH
67098: PPUSH
// if not driver or not IsInUnit ( driver ) then
67099: LD_VAR 0 1
67103: NOT
67104: PUSH
67105: LD_VAR 0 1
67109: PPUSH
67110: CALL_OW 310
67114: NOT
67115: OR
67116: IFFALSE 67120
// exit ;
67118: GO 67210
// vehicle := IsInUnit ( driver ) ;
67120: LD_ADDR_VAR 0 3
67124: PUSH
67125: LD_VAR 0 1
67129: PPUSH
67130: CALL_OW 310
67134: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67135: LD_VAR 0 1
67139: PPUSH
67140: LD_STRING \
67142: PUSH
67143: LD_INT 0
67145: PUSH
67146: LD_INT 0
67148: PUSH
67149: LD_INT 0
67151: PUSH
67152: LD_INT 0
67154: PUSH
67155: LD_INT 0
67157: PUSH
67158: LD_INT 0
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: PUSH
67170: LD_STRING E
67172: PUSH
67173: LD_INT 0
67175: PUSH
67176: LD_INT 0
67178: PUSH
67179: LD_VAR 0 3
67183: PUSH
67184: LD_INT 0
67186: PUSH
67187: LD_INT 0
67189: PUSH
67190: LD_INT 0
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PPUSH
67206: CALL_OW 447
// end ;
67210: LD_VAR 0 2
67214: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67215: LD_INT 0
67217: PPUSH
67218: PPUSH
67219: PPUSH
// tmp := [ ] ;
67220: LD_ADDR_VAR 0 5
67224: PUSH
67225: EMPTY
67226: ST_TO_ADDR
// for i in units do
67227: LD_ADDR_VAR 0 4
67231: PUSH
67232: LD_VAR 0 1
67236: PUSH
67237: FOR_IN
67238: IFFALSE 67276
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67240: LD_ADDR_VAR 0 5
67244: PUSH
67245: LD_VAR 0 5
67249: PPUSH
67250: LD_VAR 0 5
67254: PUSH
67255: LD_INT 1
67257: PLUS
67258: PPUSH
67259: LD_VAR 0 4
67263: PPUSH
67264: CALL_OW 256
67268: PPUSH
67269: CALL_OW 2
67273: ST_TO_ADDR
67274: GO 67237
67276: POP
67277: POP
// if not tmp then
67278: LD_VAR 0 5
67282: NOT
67283: IFFALSE 67287
// exit ;
67285: GO 67335
// if asc then
67287: LD_VAR 0 2
67291: IFFALSE 67315
// result := SortListByListAsc ( units , tmp ) else
67293: LD_ADDR_VAR 0 3
67297: PUSH
67298: LD_VAR 0 1
67302: PPUSH
67303: LD_VAR 0 5
67307: PPUSH
67308: CALL_OW 76
67312: ST_TO_ADDR
67313: GO 67335
// result := SortListByListDesc ( units , tmp ) ;
67315: LD_ADDR_VAR 0 3
67319: PUSH
67320: LD_VAR 0 1
67324: PPUSH
67325: LD_VAR 0 5
67329: PPUSH
67330: CALL_OW 77
67334: ST_TO_ADDR
// end ;
67335: LD_VAR 0 3
67339: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67340: LD_INT 0
67342: PPUSH
67343: PPUSH
// task := GetTaskList ( mech ) ;
67344: LD_ADDR_VAR 0 4
67348: PUSH
67349: LD_VAR 0 1
67353: PPUSH
67354: CALL_OW 437
67358: ST_TO_ADDR
// if not task then
67359: LD_VAR 0 4
67363: NOT
67364: IFFALSE 67368
// exit ;
67366: GO 67410
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67368: LD_ADDR_VAR 0 3
67372: PUSH
67373: LD_VAR 0 4
67377: PUSH
67378: LD_INT 1
67380: ARRAY
67381: PUSH
67382: LD_INT 1
67384: ARRAY
67385: PUSH
67386: LD_STRING r
67388: EQUAL
67389: PUSH
67390: LD_VAR 0 4
67394: PUSH
67395: LD_INT 1
67397: ARRAY
67398: PUSH
67399: LD_INT 4
67401: ARRAY
67402: PUSH
67403: LD_VAR 0 2
67407: EQUAL
67408: AND
67409: ST_TO_ADDR
// end ;
67410: LD_VAR 0 3
67414: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67415: LD_INT 0
67417: PPUSH
// SetDir ( unit , d ) ;
67418: LD_VAR 0 1
67422: PPUSH
67423: LD_VAR 0 4
67427: PPUSH
67428: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67432: LD_VAR 0 1
67436: PPUSH
67437: LD_VAR 0 2
67441: PPUSH
67442: LD_VAR 0 3
67446: PPUSH
67447: LD_VAR 0 5
67451: PPUSH
67452: CALL_OW 48
// end ;
67456: LD_VAR 0 6
67460: RET
// export function ToNaturalNumber ( number ) ; begin
67461: LD_INT 0
67463: PPUSH
// result := number div 1 ;
67464: LD_ADDR_VAR 0 2
67468: PUSH
67469: LD_VAR 0 1
67473: PUSH
67474: LD_INT 1
67476: DIV
67477: ST_TO_ADDR
// if number < 0 then
67478: LD_VAR 0 1
67482: PUSH
67483: LD_INT 0
67485: LESS
67486: IFFALSE 67496
// result := 0 ;
67488: LD_ADDR_VAR 0 2
67492: PUSH
67493: LD_INT 0
67495: ST_TO_ADDR
// end ;
67496: LD_VAR 0 2
67500: RET
// export function SortByClass ( units , class ) ; var un ; begin
67501: LD_INT 0
67503: PPUSH
67504: PPUSH
// if not units or not class then
67505: LD_VAR 0 1
67509: NOT
67510: PUSH
67511: LD_VAR 0 2
67515: NOT
67516: OR
67517: IFFALSE 67521
// exit ;
67519: GO 67616
// result := [ ] ;
67521: LD_ADDR_VAR 0 3
67525: PUSH
67526: EMPTY
67527: ST_TO_ADDR
// for un in units do
67528: LD_ADDR_VAR 0 4
67532: PUSH
67533: LD_VAR 0 1
67537: PUSH
67538: FOR_IN
67539: IFFALSE 67614
// if GetClass ( un ) = class then
67541: LD_VAR 0 4
67545: PPUSH
67546: CALL_OW 257
67550: PUSH
67551: LD_VAR 0 2
67555: EQUAL
67556: IFFALSE 67583
// result := Insert ( result , 1 , un ) else
67558: LD_ADDR_VAR 0 3
67562: PUSH
67563: LD_VAR 0 3
67567: PPUSH
67568: LD_INT 1
67570: PPUSH
67571: LD_VAR 0 4
67575: PPUSH
67576: CALL_OW 2
67580: ST_TO_ADDR
67581: GO 67612
// result := Replace ( result , result + 1 , un ) ;
67583: LD_ADDR_VAR 0 3
67587: PUSH
67588: LD_VAR 0 3
67592: PPUSH
67593: LD_VAR 0 3
67597: PUSH
67598: LD_INT 1
67600: PLUS
67601: PPUSH
67602: LD_VAR 0 4
67606: PPUSH
67607: CALL_OW 1
67611: ST_TO_ADDR
67612: GO 67538
67614: POP
67615: POP
// end ;
67616: LD_VAR 0 3
67620: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67621: LD_INT 0
67623: PPUSH
67624: PPUSH
67625: PPUSH
67626: PPUSH
67627: PPUSH
67628: PPUSH
67629: PPUSH
// result := [ ] ;
67630: LD_ADDR_VAR 0 4
67634: PUSH
67635: EMPTY
67636: ST_TO_ADDR
// if x - r < 0 then
67637: LD_VAR 0 1
67641: PUSH
67642: LD_VAR 0 3
67646: MINUS
67647: PUSH
67648: LD_INT 0
67650: LESS
67651: IFFALSE 67663
// min_x := 0 else
67653: LD_ADDR_VAR 0 8
67657: PUSH
67658: LD_INT 0
67660: ST_TO_ADDR
67661: GO 67679
// min_x := x - r ;
67663: LD_ADDR_VAR 0 8
67667: PUSH
67668: LD_VAR 0 1
67672: PUSH
67673: LD_VAR 0 3
67677: MINUS
67678: ST_TO_ADDR
// if y - r < 0 then
67679: LD_VAR 0 2
67683: PUSH
67684: LD_VAR 0 3
67688: MINUS
67689: PUSH
67690: LD_INT 0
67692: LESS
67693: IFFALSE 67705
// min_y := 0 else
67695: LD_ADDR_VAR 0 7
67699: PUSH
67700: LD_INT 0
67702: ST_TO_ADDR
67703: GO 67721
// min_y := y - r ;
67705: LD_ADDR_VAR 0 7
67709: PUSH
67710: LD_VAR 0 2
67714: PUSH
67715: LD_VAR 0 3
67719: MINUS
67720: ST_TO_ADDR
// max_x := x + r ;
67721: LD_ADDR_VAR 0 9
67725: PUSH
67726: LD_VAR 0 1
67730: PUSH
67731: LD_VAR 0 3
67735: PLUS
67736: ST_TO_ADDR
// max_y := y + r ;
67737: LD_ADDR_VAR 0 10
67741: PUSH
67742: LD_VAR 0 2
67746: PUSH
67747: LD_VAR 0 3
67751: PLUS
67752: ST_TO_ADDR
// for _x = min_x to max_x do
67753: LD_ADDR_VAR 0 5
67757: PUSH
67758: DOUBLE
67759: LD_VAR 0 8
67763: DEC
67764: ST_TO_ADDR
67765: LD_VAR 0 9
67769: PUSH
67770: FOR_TO
67771: IFFALSE 67872
// for _y = min_y to max_y do
67773: LD_ADDR_VAR 0 6
67777: PUSH
67778: DOUBLE
67779: LD_VAR 0 7
67783: DEC
67784: ST_TO_ADDR
67785: LD_VAR 0 10
67789: PUSH
67790: FOR_TO
67791: IFFALSE 67868
// begin if not ValidHex ( _x , _y ) then
67793: LD_VAR 0 5
67797: PPUSH
67798: LD_VAR 0 6
67802: PPUSH
67803: CALL_OW 488
67807: NOT
67808: IFFALSE 67812
// continue ;
67810: GO 67790
// if GetResourceTypeXY ( _x , _y ) then
67812: LD_VAR 0 5
67816: PPUSH
67817: LD_VAR 0 6
67821: PPUSH
67822: CALL_OW 283
67826: IFFALSE 67866
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67828: LD_ADDR_VAR 0 4
67832: PUSH
67833: LD_VAR 0 4
67837: PPUSH
67838: LD_VAR 0 4
67842: PUSH
67843: LD_INT 1
67845: PLUS
67846: PPUSH
67847: LD_VAR 0 5
67851: PUSH
67852: LD_VAR 0 6
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PPUSH
67861: CALL_OW 1
67865: ST_TO_ADDR
// end ;
67866: GO 67790
67868: POP
67869: POP
67870: GO 67770
67872: POP
67873: POP
// end ;
67874: LD_VAR 0 4
67878: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67879: LD_INT 0
67881: PPUSH
67882: PPUSH
67883: PPUSH
67884: PPUSH
67885: PPUSH
67886: PPUSH
67887: PPUSH
67888: PPUSH
// if not units then
67889: LD_VAR 0 1
67893: NOT
67894: IFFALSE 67898
// exit ;
67896: GO 68422
// result := UnitFilter ( units , [ f_ok ] ) ;
67898: LD_ADDR_VAR 0 3
67902: PUSH
67903: LD_VAR 0 1
67907: PPUSH
67908: LD_INT 50
67910: PUSH
67911: EMPTY
67912: LIST
67913: PPUSH
67914: CALL_OW 72
67918: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67919: LD_ADDR_VAR 0 8
67923: PUSH
67924: LD_VAR 0 1
67928: PUSH
67929: LD_INT 1
67931: ARRAY
67932: PPUSH
67933: CALL_OW 255
67937: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67938: LD_ADDR_VAR 0 10
67942: PUSH
67943: LD_INT 29
67945: PUSH
67946: LD_INT 91
67948: PUSH
67949: LD_INT 49
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: LIST
67956: ST_TO_ADDR
// if not result then
67957: LD_VAR 0 3
67961: NOT
67962: IFFALSE 67966
// exit ;
67964: GO 68422
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67966: LD_ADDR_VAR 0 5
67970: PUSH
67971: LD_INT 81
67973: PUSH
67974: LD_VAR 0 8
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PPUSH
67983: CALL_OW 69
67987: ST_TO_ADDR
// for i in result do
67988: LD_ADDR_VAR 0 4
67992: PUSH
67993: LD_VAR 0 3
67997: PUSH
67998: FOR_IN
67999: IFFALSE 68420
// begin tag := GetTag ( i ) + 1 ;
68001: LD_ADDR_VAR 0 9
68005: PUSH
68006: LD_VAR 0 4
68010: PPUSH
68011: CALL_OW 110
68015: PUSH
68016: LD_INT 1
68018: PLUS
68019: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68020: LD_ADDR_VAR 0 7
68024: PUSH
68025: LD_VAR 0 4
68029: PPUSH
68030: CALL_OW 250
68034: PPUSH
68035: LD_VAR 0 4
68039: PPUSH
68040: CALL_OW 251
68044: PPUSH
68045: LD_INT 6
68047: PPUSH
68048: CALL 67621 0 3
68052: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68053: LD_VAR 0 4
68057: PPUSH
68058: CALL_OW 247
68062: PUSH
68063: LD_INT 2
68065: EQUAL
68066: PUSH
68067: LD_VAR 0 7
68071: AND
68072: PUSH
68073: LD_VAR 0 4
68077: PPUSH
68078: CALL_OW 264
68082: PUSH
68083: LD_VAR 0 10
68087: IN
68088: NOT
68089: AND
68090: IFFALSE 68129
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68092: LD_VAR 0 4
68096: PPUSH
68097: LD_VAR 0 7
68101: PUSH
68102: LD_INT 1
68104: ARRAY
68105: PUSH
68106: LD_INT 1
68108: ARRAY
68109: PPUSH
68110: LD_VAR 0 7
68114: PUSH
68115: LD_INT 1
68117: ARRAY
68118: PUSH
68119: LD_INT 2
68121: ARRAY
68122: PPUSH
68123: CALL_OW 116
68127: GO 68418
// if path > tag then
68129: LD_VAR 0 2
68133: PUSH
68134: LD_VAR 0 9
68138: GREATER
68139: IFFALSE 68347
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68141: LD_ADDR_VAR 0 6
68145: PUSH
68146: LD_VAR 0 5
68150: PPUSH
68151: LD_INT 91
68153: PUSH
68154: LD_VAR 0 4
68158: PUSH
68159: LD_INT 8
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: LIST
68166: PPUSH
68167: CALL_OW 72
68171: ST_TO_ADDR
// if nearEnemy then
68172: LD_VAR 0 6
68176: IFFALSE 68245
// begin if GetWeapon ( i ) = ru_time_lapser then
68178: LD_VAR 0 4
68182: PPUSH
68183: CALL_OW 264
68187: PUSH
68188: LD_INT 49
68190: EQUAL
68191: IFFALSE 68219
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68193: LD_VAR 0 4
68197: PPUSH
68198: LD_VAR 0 6
68202: PPUSH
68203: LD_VAR 0 4
68207: PPUSH
68208: CALL_OW 74
68212: PPUSH
68213: CALL_OW 112
68217: GO 68243
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68219: LD_VAR 0 4
68223: PPUSH
68224: LD_VAR 0 6
68228: PPUSH
68229: LD_VAR 0 4
68233: PPUSH
68234: CALL_OW 74
68238: PPUSH
68239: CALL_OW 115
// end else
68243: GO 68345
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68245: LD_VAR 0 4
68249: PPUSH
68250: LD_VAR 0 2
68254: PUSH
68255: LD_VAR 0 9
68259: ARRAY
68260: PUSH
68261: LD_INT 1
68263: ARRAY
68264: PPUSH
68265: LD_VAR 0 2
68269: PUSH
68270: LD_VAR 0 9
68274: ARRAY
68275: PUSH
68276: LD_INT 2
68278: ARRAY
68279: PPUSH
68280: CALL_OW 297
68284: PUSH
68285: LD_INT 6
68287: GREATER
68288: IFFALSE 68331
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68290: LD_VAR 0 4
68294: PPUSH
68295: LD_VAR 0 2
68299: PUSH
68300: LD_VAR 0 9
68304: ARRAY
68305: PUSH
68306: LD_INT 1
68308: ARRAY
68309: PPUSH
68310: LD_VAR 0 2
68314: PUSH
68315: LD_VAR 0 9
68319: ARRAY
68320: PUSH
68321: LD_INT 2
68323: ARRAY
68324: PPUSH
68325: CALL_OW 114
68329: GO 68345
// SetTag ( i , tag ) ;
68331: LD_VAR 0 4
68335: PPUSH
68336: LD_VAR 0 9
68340: PPUSH
68341: CALL_OW 109
// end else
68345: GO 68418
// if enemy then
68347: LD_VAR 0 5
68351: IFFALSE 68418
// begin if GetWeapon ( i ) = ru_time_lapser then
68353: LD_VAR 0 4
68357: PPUSH
68358: CALL_OW 264
68362: PUSH
68363: LD_INT 49
68365: EQUAL
68366: IFFALSE 68394
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68368: LD_VAR 0 4
68372: PPUSH
68373: LD_VAR 0 5
68377: PPUSH
68378: LD_VAR 0 4
68382: PPUSH
68383: CALL_OW 74
68387: PPUSH
68388: CALL_OW 112
68392: GO 68418
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68394: LD_VAR 0 4
68398: PPUSH
68399: LD_VAR 0 5
68403: PPUSH
68404: LD_VAR 0 4
68408: PPUSH
68409: CALL_OW 74
68413: PPUSH
68414: CALL_OW 115
// end ; end ;
68418: GO 67998
68420: POP
68421: POP
// end ;
68422: LD_VAR 0 3
68426: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68427: LD_INT 0
68429: PPUSH
68430: PPUSH
68431: PPUSH
// if not unit or IsInUnit ( unit ) then
68432: LD_VAR 0 1
68436: NOT
68437: PUSH
68438: LD_VAR 0 1
68442: PPUSH
68443: CALL_OW 310
68447: OR
68448: IFFALSE 68452
// exit ;
68450: GO 68543
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68452: LD_ADDR_VAR 0 4
68456: PUSH
68457: LD_VAR 0 1
68461: PPUSH
68462: CALL_OW 250
68466: PPUSH
68467: LD_VAR 0 2
68471: PPUSH
68472: LD_INT 1
68474: PPUSH
68475: CALL_OW 272
68479: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68480: LD_ADDR_VAR 0 5
68484: PUSH
68485: LD_VAR 0 1
68489: PPUSH
68490: CALL_OW 251
68494: PPUSH
68495: LD_VAR 0 2
68499: PPUSH
68500: LD_INT 1
68502: PPUSH
68503: CALL_OW 273
68507: ST_TO_ADDR
// if ValidHex ( x , y ) then
68508: LD_VAR 0 4
68512: PPUSH
68513: LD_VAR 0 5
68517: PPUSH
68518: CALL_OW 488
68522: IFFALSE 68543
// ComTurnXY ( unit , x , y ) ;
68524: LD_VAR 0 1
68528: PPUSH
68529: LD_VAR 0 4
68533: PPUSH
68534: LD_VAR 0 5
68538: PPUSH
68539: CALL_OW 118
// end ;
68543: LD_VAR 0 3
68547: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68548: LD_INT 0
68550: PPUSH
68551: PPUSH
// result := false ;
68552: LD_ADDR_VAR 0 3
68556: PUSH
68557: LD_INT 0
68559: ST_TO_ADDR
// if not units then
68560: LD_VAR 0 2
68564: NOT
68565: IFFALSE 68569
// exit ;
68567: GO 68614
// for i in units do
68569: LD_ADDR_VAR 0 4
68573: PUSH
68574: LD_VAR 0 2
68578: PUSH
68579: FOR_IN
68580: IFFALSE 68612
// if See ( side , i ) then
68582: LD_VAR 0 1
68586: PPUSH
68587: LD_VAR 0 4
68591: PPUSH
68592: CALL_OW 292
68596: IFFALSE 68610
// begin result := true ;
68598: LD_ADDR_VAR 0 3
68602: PUSH
68603: LD_INT 1
68605: ST_TO_ADDR
// exit ;
68606: POP
68607: POP
68608: GO 68614
// end ;
68610: GO 68579
68612: POP
68613: POP
// end ;
68614: LD_VAR 0 3
68618: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68619: LD_INT 0
68621: PPUSH
68622: PPUSH
68623: PPUSH
68624: PPUSH
// if not unit or not points then
68625: LD_VAR 0 1
68629: NOT
68630: PUSH
68631: LD_VAR 0 2
68635: NOT
68636: OR
68637: IFFALSE 68641
// exit ;
68639: GO 68731
// dist := 99999 ;
68641: LD_ADDR_VAR 0 5
68645: PUSH
68646: LD_INT 99999
68648: ST_TO_ADDR
// for i in points do
68649: LD_ADDR_VAR 0 4
68653: PUSH
68654: LD_VAR 0 2
68658: PUSH
68659: FOR_IN
68660: IFFALSE 68729
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68662: LD_ADDR_VAR 0 6
68666: PUSH
68667: LD_VAR 0 1
68671: PPUSH
68672: LD_VAR 0 4
68676: PUSH
68677: LD_INT 1
68679: ARRAY
68680: PPUSH
68681: LD_VAR 0 4
68685: PUSH
68686: LD_INT 2
68688: ARRAY
68689: PPUSH
68690: CALL_OW 297
68694: ST_TO_ADDR
// if tmpDist < dist then
68695: LD_VAR 0 6
68699: PUSH
68700: LD_VAR 0 5
68704: LESS
68705: IFFALSE 68727
// begin result := i ;
68707: LD_ADDR_VAR 0 3
68711: PUSH
68712: LD_VAR 0 4
68716: ST_TO_ADDR
// dist := tmpDist ;
68717: LD_ADDR_VAR 0 5
68721: PUSH
68722: LD_VAR 0 6
68726: ST_TO_ADDR
// end ; end ;
68727: GO 68659
68729: POP
68730: POP
// end ;
68731: LD_VAR 0 3
68735: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68736: LD_INT 0
68738: PPUSH
// uc_side := side ;
68739: LD_ADDR_OWVAR 20
68743: PUSH
68744: LD_VAR 0 1
68748: ST_TO_ADDR
// uc_nation := 3 ;
68749: LD_ADDR_OWVAR 21
68753: PUSH
68754: LD_INT 3
68756: ST_TO_ADDR
// vc_chassis := 25 ;
68757: LD_ADDR_OWVAR 37
68761: PUSH
68762: LD_INT 25
68764: ST_TO_ADDR
// vc_engine := engine_siberite ;
68765: LD_ADDR_OWVAR 39
68769: PUSH
68770: LD_INT 3
68772: ST_TO_ADDR
// vc_control := control_computer ;
68773: LD_ADDR_OWVAR 38
68777: PUSH
68778: LD_INT 3
68780: ST_TO_ADDR
// vc_weapon := 59 ;
68781: LD_ADDR_OWVAR 40
68785: PUSH
68786: LD_INT 59
68788: ST_TO_ADDR
// result := CreateVehicle ;
68789: LD_ADDR_VAR 0 5
68793: PUSH
68794: CALL_OW 45
68798: ST_TO_ADDR
// SetDir ( result , d ) ;
68799: LD_VAR 0 5
68803: PPUSH
68804: LD_VAR 0 4
68808: PPUSH
68809: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68813: LD_VAR 0 5
68817: PPUSH
68818: LD_VAR 0 2
68822: PPUSH
68823: LD_VAR 0 3
68827: PPUSH
68828: LD_INT 0
68830: PPUSH
68831: CALL_OW 48
// end ;
68835: LD_VAR 0 5
68839: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68840: LD_INT 0
68842: PPUSH
68843: PPUSH
68844: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68845: LD_ADDR_VAR 0 2
68849: PUSH
68850: LD_INT 0
68852: PUSH
68853: LD_INT 0
68855: PUSH
68856: LD_INT 0
68858: PUSH
68859: LD_INT 0
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68868: LD_VAR 0 1
68872: NOT
68873: PUSH
68874: LD_VAR 0 1
68878: PPUSH
68879: CALL_OW 264
68883: PUSH
68884: LD_INT 12
68886: PUSH
68887: LD_INT 51
68889: PUSH
68890: LD_INT 32
68892: PUSH
68893: LD_INT 89
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: IN
68902: NOT
68903: OR
68904: IFFALSE 68908
// exit ;
68906: GO 69006
// for i := 1 to 3 do
68908: LD_ADDR_VAR 0 3
68912: PUSH
68913: DOUBLE
68914: LD_INT 1
68916: DEC
68917: ST_TO_ADDR
68918: LD_INT 3
68920: PUSH
68921: FOR_TO
68922: IFFALSE 69004
// begin tmp := GetCargo ( cargo , i ) ;
68924: LD_ADDR_VAR 0 4
68928: PUSH
68929: LD_VAR 0 1
68933: PPUSH
68934: LD_VAR 0 3
68938: PPUSH
68939: CALL_OW 289
68943: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68944: LD_ADDR_VAR 0 2
68948: PUSH
68949: LD_VAR 0 2
68953: PPUSH
68954: LD_VAR 0 3
68958: PPUSH
68959: LD_VAR 0 4
68963: PPUSH
68964: CALL_OW 1
68968: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68969: LD_ADDR_VAR 0 2
68973: PUSH
68974: LD_VAR 0 2
68978: PPUSH
68979: LD_INT 4
68981: PPUSH
68982: LD_VAR 0 2
68986: PUSH
68987: LD_INT 4
68989: ARRAY
68990: PUSH
68991: LD_VAR 0 4
68995: PLUS
68996: PPUSH
68997: CALL_OW 1
69001: ST_TO_ADDR
// end ;
69002: GO 68921
69004: POP
69005: POP
// end ;
69006: LD_VAR 0 2
69010: RET
// export function Length ( array ) ; begin
69011: LD_INT 0
69013: PPUSH
// result := array + 0 ;
69014: LD_ADDR_VAR 0 2
69018: PUSH
69019: LD_VAR 0 1
69023: PUSH
69024: LD_INT 0
69026: PLUS
69027: ST_TO_ADDR
// end ;
69028: LD_VAR 0 2
69032: RET
// export function PrepareArray ( array ) ; begin
69033: LD_INT 0
69035: PPUSH
// result := array diff 0 ;
69036: LD_ADDR_VAR 0 2
69040: PUSH
69041: LD_VAR 0 1
69045: PUSH
69046: LD_INT 0
69048: DIFF
69049: ST_TO_ADDR
// if not result [ 1 ] then
69050: LD_VAR 0 2
69054: PUSH
69055: LD_INT 1
69057: ARRAY
69058: NOT
69059: IFFALSE 69079
// result := Delete ( result , 1 ) ;
69061: LD_ADDR_VAR 0 2
69065: PUSH
69066: LD_VAR 0 2
69070: PPUSH
69071: LD_INT 1
69073: PPUSH
69074: CALL_OW 3
69078: ST_TO_ADDR
// end ;
69079: LD_VAR 0 2
69083: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69084: LD_INT 0
69086: PPUSH
69087: PPUSH
69088: PPUSH
69089: PPUSH
// sibRocketRange := 25 ;
69090: LD_ADDR_VAR 0 6
69094: PUSH
69095: LD_INT 25
69097: ST_TO_ADDR
// result := false ;
69098: LD_ADDR_VAR 0 4
69102: PUSH
69103: LD_INT 0
69105: ST_TO_ADDR
// for i := 0 to 5 do
69106: LD_ADDR_VAR 0 5
69110: PUSH
69111: DOUBLE
69112: LD_INT 0
69114: DEC
69115: ST_TO_ADDR
69116: LD_INT 5
69118: PUSH
69119: FOR_TO
69120: IFFALSE 69187
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69122: LD_VAR 0 1
69126: PPUSH
69127: LD_VAR 0 5
69131: PPUSH
69132: LD_VAR 0 6
69136: PPUSH
69137: CALL_OW 272
69141: PPUSH
69142: LD_VAR 0 2
69146: PPUSH
69147: LD_VAR 0 5
69151: PPUSH
69152: LD_VAR 0 6
69156: PPUSH
69157: CALL_OW 273
69161: PPUSH
69162: LD_VAR 0 3
69166: PPUSH
69167: CALL_OW 309
69171: IFFALSE 69185
// begin result := true ;
69173: LD_ADDR_VAR 0 4
69177: PUSH
69178: LD_INT 1
69180: ST_TO_ADDR
// exit ;
69181: POP
69182: POP
69183: GO 69189
// end ;
69185: GO 69119
69187: POP
69188: POP
// end ;
69189: LD_VAR 0 4
69193: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69194: LD_INT 0
69196: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69197: LD_VAR 0 1
69201: PPUSH
69202: LD_VAR 0 2
69206: PPUSH
69207: LD_INT 0
69209: PPUSH
69210: LD_INT 0
69212: PPUSH
69213: LD_INT 1
69215: PPUSH
69216: LD_INT 0
69218: PPUSH
69219: CALL_OW 587
// end ; end_of_file end_of_file
69223: LD_VAR 0 3
69227: RET
// every 0 0$1 do
69228: GO 69230
69230: DISABLE
// begin enable ;
69231: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
69232: LD_STRING updateTimer(
69234: PUSH
69235: LD_OWVAR 1
69239: STR
69240: PUSH
69241: LD_STRING );
69243: STR
69244: PPUSH
69245: CALL_OW 559
// end ;
69249: END
// export function SOS_MapStart ( ) ; begin
69250: LD_INT 0
69252: PPUSH
// if streamModeActive then
69253: LD_EXP 62
69257: IFFALSE 69266
// DefineStreamItems ( true ) ;
69259: LD_INT 1
69261: PPUSH
69262: CALL 70920 0 1
// UpdateFactoryWaypoints ( ) ;
69266: CALL 83781 0 0
// UpdateWarehouseGatheringPoints ( ) ;
69270: CALL 84038 0 0
// end ;
69274: LD_VAR 0 1
69278: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
69279: LD_INT 0
69281: PPUSH
// if p2 = hack_mode then
69282: LD_VAR 0 2
69286: PUSH
69287: LD_INT 100
69289: EQUAL
69290: IFFALSE 70293
// begin if not StreamModeActive then
69292: LD_EXP 62
69296: NOT
69297: IFFALSE 69307
// StreamModeActive := true ;
69299: LD_ADDR_EXP 62
69303: PUSH
69304: LD_INT 1
69306: ST_TO_ADDR
// if p3 = 0 then
69307: LD_VAR 0 3
69311: PUSH
69312: LD_INT 0
69314: EQUAL
69315: IFFALSE 69321
// InitStreamMode ;
69317: CALL 70456 0 0
// if p3 = 1 then
69321: LD_VAR 0 3
69325: PUSH
69326: LD_INT 1
69328: EQUAL
69329: IFFALSE 69339
// sRocket := true ;
69331: LD_ADDR_EXP 67
69335: PUSH
69336: LD_INT 1
69338: ST_TO_ADDR
// if p3 = 2 then
69339: LD_VAR 0 3
69343: PUSH
69344: LD_INT 2
69346: EQUAL
69347: IFFALSE 69357
// sSpeed := true ;
69349: LD_ADDR_EXP 66
69353: PUSH
69354: LD_INT 1
69356: ST_TO_ADDR
// if p3 = 3 then
69357: LD_VAR 0 3
69361: PUSH
69362: LD_INT 3
69364: EQUAL
69365: IFFALSE 69375
// sEngine := true ;
69367: LD_ADDR_EXP 68
69371: PUSH
69372: LD_INT 1
69374: ST_TO_ADDR
// if p3 = 4 then
69375: LD_VAR 0 3
69379: PUSH
69380: LD_INT 4
69382: EQUAL
69383: IFFALSE 69393
// sSpec := true ;
69385: LD_ADDR_EXP 65
69389: PUSH
69390: LD_INT 1
69392: ST_TO_ADDR
// if p3 = 5 then
69393: LD_VAR 0 3
69397: PUSH
69398: LD_INT 5
69400: EQUAL
69401: IFFALSE 69411
// sLevel := true ;
69403: LD_ADDR_EXP 69
69407: PUSH
69408: LD_INT 1
69410: ST_TO_ADDR
// if p3 = 6 then
69411: LD_VAR 0 3
69415: PUSH
69416: LD_INT 6
69418: EQUAL
69419: IFFALSE 69429
// sArmoury := true ;
69421: LD_ADDR_EXP 70
69425: PUSH
69426: LD_INT 1
69428: ST_TO_ADDR
// if p3 = 7 then
69429: LD_VAR 0 3
69433: PUSH
69434: LD_INT 7
69436: EQUAL
69437: IFFALSE 69447
// sRadar := true ;
69439: LD_ADDR_EXP 71
69443: PUSH
69444: LD_INT 1
69446: ST_TO_ADDR
// if p3 = 8 then
69447: LD_VAR 0 3
69451: PUSH
69452: LD_INT 8
69454: EQUAL
69455: IFFALSE 69465
// sBunker := true ;
69457: LD_ADDR_EXP 72
69461: PUSH
69462: LD_INT 1
69464: ST_TO_ADDR
// if p3 = 9 then
69465: LD_VAR 0 3
69469: PUSH
69470: LD_INT 9
69472: EQUAL
69473: IFFALSE 69483
// sHack := true ;
69475: LD_ADDR_EXP 73
69479: PUSH
69480: LD_INT 1
69482: ST_TO_ADDR
// if p3 = 10 then
69483: LD_VAR 0 3
69487: PUSH
69488: LD_INT 10
69490: EQUAL
69491: IFFALSE 69501
// sFire := true ;
69493: LD_ADDR_EXP 74
69497: PUSH
69498: LD_INT 1
69500: ST_TO_ADDR
// if p3 = 11 then
69501: LD_VAR 0 3
69505: PUSH
69506: LD_INT 11
69508: EQUAL
69509: IFFALSE 69519
// sRefresh := true ;
69511: LD_ADDR_EXP 75
69515: PUSH
69516: LD_INT 1
69518: ST_TO_ADDR
// if p3 = 12 then
69519: LD_VAR 0 3
69523: PUSH
69524: LD_INT 12
69526: EQUAL
69527: IFFALSE 69537
// sExp := true ;
69529: LD_ADDR_EXP 76
69533: PUSH
69534: LD_INT 1
69536: ST_TO_ADDR
// if p3 = 13 then
69537: LD_VAR 0 3
69541: PUSH
69542: LD_INT 13
69544: EQUAL
69545: IFFALSE 69555
// sDepot := true ;
69547: LD_ADDR_EXP 77
69551: PUSH
69552: LD_INT 1
69554: ST_TO_ADDR
// if p3 = 14 then
69555: LD_VAR 0 3
69559: PUSH
69560: LD_INT 14
69562: EQUAL
69563: IFFALSE 69573
// sFlag := true ;
69565: LD_ADDR_EXP 78
69569: PUSH
69570: LD_INT 1
69572: ST_TO_ADDR
// if p3 = 15 then
69573: LD_VAR 0 3
69577: PUSH
69578: LD_INT 15
69580: EQUAL
69581: IFFALSE 69591
// sKamikadze := true ;
69583: LD_ADDR_EXP 86
69587: PUSH
69588: LD_INT 1
69590: ST_TO_ADDR
// if p3 = 16 then
69591: LD_VAR 0 3
69595: PUSH
69596: LD_INT 16
69598: EQUAL
69599: IFFALSE 69609
// sTroll := true ;
69601: LD_ADDR_EXP 87
69605: PUSH
69606: LD_INT 1
69608: ST_TO_ADDR
// if p3 = 17 then
69609: LD_VAR 0 3
69613: PUSH
69614: LD_INT 17
69616: EQUAL
69617: IFFALSE 69627
// sSlow := true ;
69619: LD_ADDR_EXP 88
69623: PUSH
69624: LD_INT 1
69626: ST_TO_ADDR
// if p3 = 18 then
69627: LD_VAR 0 3
69631: PUSH
69632: LD_INT 18
69634: EQUAL
69635: IFFALSE 69645
// sLack := true ;
69637: LD_ADDR_EXP 89
69641: PUSH
69642: LD_INT 1
69644: ST_TO_ADDR
// if p3 = 19 then
69645: LD_VAR 0 3
69649: PUSH
69650: LD_INT 19
69652: EQUAL
69653: IFFALSE 69663
// sTank := true ;
69655: LD_ADDR_EXP 91
69659: PUSH
69660: LD_INT 1
69662: ST_TO_ADDR
// if p3 = 20 then
69663: LD_VAR 0 3
69667: PUSH
69668: LD_INT 20
69670: EQUAL
69671: IFFALSE 69681
// sRemote := true ;
69673: LD_ADDR_EXP 92
69677: PUSH
69678: LD_INT 1
69680: ST_TO_ADDR
// if p3 = 21 then
69681: LD_VAR 0 3
69685: PUSH
69686: LD_INT 21
69688: EQUAL
69689: IFFALSE 69699
// sPowell := true ;
69691: LD_ADDR_EXP 93
69695: PUSH
69696: LD_INT 1
69698: ST_TO_ADDR
// if p3 = 22 then
69699: LD_VAR 0 3
69703: PUSH
69704: LD_INT 22
69706: EQUAL
69707: IFFALSE 69717
// sTeleport := true ;
69709: LD_ADDR_EXP 96
69713: PUSH
69714: LD_INT 1
69716: ST_TO_ADDR
// if p3 = 23 then
69717: LD_VAR 0 3
69721: PUSH
69722: LD_INT 23
69724: EQUAL
69725: IFFALSE 69735
// sOilTower := true ;
69727: LD_ADDR_EXP 98
69731: PUSH
69732: LD_INT 1
69734: ST_TO_ADDR
// if p3 = 24 then
69735: LD_VAR 0 3
69739: PUSH
69740: LD_INT 24
69742: EQUAL
69743: IFFALSE 69753
// sShovel := true ;
69745: LD_ADDR_EXP 99
69749: PUSH
69750: LD_INT 1
69752: ST_TO_ADDR
// if p3 = 25 then
69753: LD_VAR 0 3
69757: PUSH
69758: LD_INT 25
69760: EQUAL
69761: IFFALSE 69771
// sSheik := true ;
69763: LD_ADDR_EXP 100
69767: PUSH
69768: LD_INT 1
69770: ST_TO_ADDR
// if p3 = 26 then
69771: LD_VAR 0 3
69775: PUSH
69776: LD_INT 26
69778: EQUAL
69779: IFFALSE 69789
// sEarthquake := true ;
69781: LD_ADDR_EXP 102
69785: PUSH
69786: LD_INT 1
69788: ST_TO_ADDR
// if p3 = 27 then
69789: LD_VAR 0 3
69793: PUSH
69794: LD_INT 27
69796: EQUAL
69797: IFFALSE 69807
// sAI := true ;
69799: LD_ADDR_EXP 103
69803: PUSH
69804: LD_INT 1
69806: ST_TO_ADDR
// if p3 = 28 then
69807: LD_VAR 0 3
69811: PUSH
69812: LD_INT 28
69814: EQUAL
69815: IFFALSE 69825
// sCargo := true ;
69817: LD_ADDR_EXP 106
69821: PUSH
69822: LD_INT 1
69824: ST_TO_ADDR
// if p3 = 29 then
69825: LD_VAR 0 3
69829: PUSH
69830: LD_INT 29
69832: EQUAL
69833: IFFALSE 69843
// sDLaser := true ;
69835: LD_ADDR_EXP 107
69839: PUSH
69840: LD_INT 1
69842: ST_TO_ADDR
// if p3 = 30 then
69843: LD_VAR 0 3
69847: PUSH
69848: LD_INT 30
69850: EQUAL
69851: IFFALSE 69861
// sExchange := true ;
69853: LD_ADDR_EXP 108
69857: PUSH
69858: LD_INT 1
69860: ST_TO_ADDR
// if p3 = 31 then
69861: LD_VAR 0 3
69865: PUSH
69866: LD_INT 31
69868: EQUAL
69869: IFFALSE 69879
// sFac := true ;
69871: LD_ADDR_EXP 109
69875: PUSH
69876: LD_INT 1
69878: ST_TO_ADDR
// if p3 = 32 then
69879: LD_VAR 0 3
69883: PUSH
69884: LD_INT 32
69886: EQUAL
69887: IFFALSE 69897
// sPower := true ;
69889: LD_ADDR_EXP 110
69893: PUSH
69894: LD_INT 1
69896: ST_TO_ADDR
// if p3 = 33 then
69897: LD_VAR 0 3
69901: PUSH
69902: LD_INT 33
69904: EQUAL
69905: IFFALSE 69915
// sRandom := true ;
69907: LD_ADDR_EXP 111
69911: PUSH
69912: LD_INT 1
69914: ST_TO_ADDR
// if p3 = 34 then
69915: LD_VAR 0 3
69919: PUSH
69920: LD_INT 34
69922: EQUAL
69923: IFFALSE 69933
// sShield := true ;
69925: LD_ADDR_EXP 112
69929: PUSH
69930: LD_INT 1
69932: ST_TO_ADDR
// if p3 = 35 then
69933: LD_VAR 0 3
69937: PUSH
69938: LD_INT 35
69940: EQUAL
69941: IFFALSE 69951
// sTime := true ;
69943: LD_ADDR_EXP 113
69947: PUSH
69948: LD_INT 1
69950: ST_TO_ADDR
// if p3 = 36 then
69951: LD_VAR 0 3
69955: PUSH
69956: LD_INT 36
69958: EQUAL
69959: IFFALSE 69969
// sTools := true ;
69961: LD_ADDR_EXP 114
69965: PUSH
69966: LD_INT 1
69968: ST_TO_ADDR
// if p3 = 101 then
69969: LD_VAR 0 3
69973: PUSH
69974: LD_INT 101
69976: EQUAL
69977: IFFALSE 69987
// sSold := true ;
69979: LD_ADDR_EXP 79
69983: PUSH
69984: LD_INT 1
69986: ST_TO_ADDR
// if p3 = 102 then
69987: LD_VAR 0 3
69991: PUSH
69992: LD_INT 102
69994: EQUAL
69995: IFFALSE 70005
// sDiff := true ;
69997: LD_ADDR_EXP 80
70001: PUSH
70002: LD_INT 1
70004: ST_TO_ADDR
// if p3 = 103 then
70005: LD_VAR 0 3
70009: PUSH
70010: LD_INT 103
70012: EQUAL
70013: IFFALSE 70023
// sFog := true ;
70015: LD_ADDR_EXP 83
70019: PUSH
70020: LD_INT 1
70022: ST_TO_ADDR
// if p3 = 104 then
70023: LD_VAR 0 3
70027: PUSH
70028: LD_INT 104
70030: EQUAL
70031: IFFALSE 70041
// sReset := true ;
70033: LD_ADDR_EXP 84
70037: PUSH
70038: LD_INT 1
70040: ST_TO_ADDR
// if p3 = 105 then
70041: LD_VAR 0 3
70045: PUSH
70046: LD_INT 105
70048: EQUAL
70049: IFFALSE 70059
// sSun := true ;
70051: LD_ADDR_EXP 85
70055: PUSH
70056: LD_INT 1
70058: ST_TO_ADDR
// if p3 = 106 then
70059: LD_VAR 0 3
70063: PUSH
70064: LD_INT 106
70066: EQUAL
70067: IFFALSE 70077
// sTiger := true ;
70069: LD_ADDR_EXP 81
70073: PUSH
70074: LD_INT 1
70076: ST_TO_ADDR
// if p3 = 107 then
70077: LD_VAR 0 3
70081: PUSH
70082: LD_INT 107
70084: EQUAL
70085: IFFALSE 70095
// sBomb := true ;
70087: LD_ADDR_EXP 82
70091: PUSH
70092: LD_INT 1
70094: ST_TO_ADDR
// if p3 = 108 then
70095: LD_VAR 0 3
70099: PUSH
70100: LD_INT 108
70102: EQUAL
70103: IFFALSE 70113
// sWound := true ;
70105: LD_ADDR_EXP 90
70109: PUSH
70110: LD_INT 1
70112: ST_TO_ADDR
// if p3 = 109 then
70113: LD_VAR 0 3
70117: PUSH
70118: LD_INT 109
70120: EQUAL
70121: IFFALSE 70131
// sBetray := true ;
70123: LD_ADDR_EXP 94
70127: PUSH
70128: LD_INT 1
70130: ST_TO_ADDR
// if p3 = 110 then
70131: LD_VAR 0 3
70135: PUSH
70136: LD_INT 110
70138: EQUAL
70139: IFFALSE 70149
// sContamin := true ;
70141: LD_ADDR_EXP 95
70145: PUSH
70146: LD_INT 1
70148: ST_TO_ADDR
// if p3 = 111 then
70149: LD_VAR 0 3
70153: PUSH
70154: LD_INT 111
70156: EQUAL
70157: IFFALSE 70167
// sOil := true ;
70159: LD_ADDR_EXP 97
70163: PUSH
70164: LD_INT 1
70166: ST_TO_ADDR
// if p3 = 112 then
70167: LD_VAR 0 3
70171: PUSH
70172: LD_INT 112
70174: EQUAL
70175: IFFALSE 70185
// sStu := true ;
70177: LD_ADDR_EXP 101
70181: PUSH
70182: LD_INT 1
70184: ST_TO_ADDR
// if p3 = 113 then
70185: LD_VAR 0 3
70189: PUSH
70190: LD_INT 113
70192: EQUAL
70193: IFFALSE 70203
// sBazooka := true ;
70195: LD_ADDR_EXP 104
70199: PUSH
70200: LD_INT 1
70202: ST_TO_ADDR
// if p3 = 114 then
70203: LD_VAR 0 3
70207: PUSH
70208: LD_INT 114
70210: EQUAL
70211: IFFALSE 70221
// sMortar := true ;
70213: LD_ADDR_EXP 105
70217: PUSH
70218: LD_INT 1
70220: ST_TO_ADDR
// if p3 = 115 then
70221: LD_VAR 0 3
70225: PUSH
70226: LD_INT 115
70228: EQUAL
70229: IFFALSE 70239
// sRanger := true ;
70231: LD_ADDR_EXP 115
70235: PUSH
70236: LD_INT 1
70238: ST_TO_ADDR
// if p3 = 116 then
70239: LD_VAR 0 3
70243: PUSH
70244: LD_INT 116
70246: EQUAL
70247: IFFALSE 70257
// sComputer := true ;
70249: LD_ADDR_EXP 116
70253: PUSH
70254: LD_INT 1
70256: ST_TO_ADDR
// if p3 = 117 then
70257: LD_VAR 0 3
70261: PUSH
70262: LD_INT 117
70264: EQUAL
70265: IFFALSE 70275
// s30 := true ;
70267: LD_ADDR_EXP 117
70271: PUSH
70272: LD_INT 1
70274: ST_TO_ADDR
// if p3 = 118 then
70275: LD_VAR 0 3
70279: PUSH
70280: LD_INT 118
70282: EQUAL
70283: IFFALSE 70293
// s60 := true ;
70285: LD_ADDR_EXP 118
70289: PUSH
70290: LD_INT 1
70292: ST_TO_ADDR
// end ; if p2 = stream_mode then
70293: LD_VAR 0 2
70297: PUSH
70298: LD_INT 101
70300: EQUAL
70301: IFFALSE 70429
// begin case p3 of 1 :
70303: LD_VAR 0 3
70307: PUSH
70308: LD_INT 1
70310: DOUBLE
70311: EQUAL
70312: IFTRUE 70316
70314: GO 70323
70316: POP
// hHackUnlimitedResources ; 2 :
70317: CALL 82527 0 0
70321: GO 70429
70323: LD_INT 2
70325: DOUBLE
70326: EQUAL
70327: IFTRUE 70331
70329: GO 70338
70331: POP
// hHackSetLevel10 ; 3 :
70332: CALL 82660 0 0
70336: GO 70429
70338: LD_INT 3
70340: DOUBLE
70341: EQUAL
70342: IFTRUE 70346
70344: GO 70353
70346: POP
// hHackSetLevel10YourUnits ; 4 :
70347: CALL 82745 0 0
70351: GO 70429
70353: LD_INT 4
70355: DOUBLE
70356: EQUAL
70357: IFTRUE 70361
70359: GO 70368
70361: POP
// hHackInvincible ; 5 :
70362: CALL 83193 0 0
70366: GO 70429
70368: LD_INT 5
70370: DOUBLE
70371: EQUAL
70372: IFTRUE 70376
70374: GO 70383
70376: POP
// hHackInvisible ; 6 :
70377: CALL 83304 0 0
70381: GO 70429
70383: LD_INT 6
70385: DOUBLE
70386: EQUAL
70387: IFTRUE 70391
70389: GO 70398
70391: POP
// hHackChangeYourSide ; 7 :
70392: CALL 83361 0 0
70396: GO 70429
70398: LD_INT 7
70400: DOUBLE
70401: EQUAL
70402: IFTRUE 70406
70404: GO 70413
70406: POP
// hHackChangeUnitSide ; 8 :
70407: CALL 83403 0 0
70411: GO 70429
70413: LD_INT 8
70415: DOUBLE
70416: EQUAL
70417: IFTRUE 70421
70419: GO 70428
70421: POP
// hHackFog ; end ;
70422: CALL 83504 0 0
70426: GO 70429
70428: POP
// end ; end ;
70429: LD_VAR 0 7
70433: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
70434: GO 70436
70436: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
70437: LD_STRING initStreamRollete();
70439: PPUSH
70440: CALL_OW 559
// InitStreamMode ;
70444: CALL 70456 0 0
// DefineStreamItems ( false ) ;
70448: LD_INT 0
70450: PPUSH
70451: CALL 70920 0 1
// end ;
70455: END
// function InitStreamMode ; begin
70456: LD_INT 0
70458: PPUSH
// streamModeActive := false ;
70459: LD_ADDR_EXP 62
70463: PUSH
70464: LD_INT 0
70466: ST_TO_ADDR
// normalCounter := 36 ;
70467: LD_ADDR_EXP 63
70471: PUSH
70472: LD_INT 36
70474: ST_TO_ADDR
// hardcoreCounter := 18 ;
70475: LD_ADDR_EXP 64
70479: PUSH
70480: LD_INT 18
70482: ST_TO_ADDR
// sRocket := false ;
70483: LD_ADDR_EXP 67
70487: PUSH
70488: LD_INT 0
70490: ST_TO_ADDR
// sSpeed := false ;
70491: LD_ADDR_EXP 66
70495: PUSH
70496: LD_INT 0
70498: ST_TO_ADDR
// sEngine := false ;
70499: LD_ADDR_EXP 68
70503: PUSH
70504: LD_INT 0
70506: ST_TO_ADDR
// sSpec := false ;
70507: LD_ADDR_EXP 65
70511: PUSH
70512: LD_INT 0
70514: ST_TO_ADDR
// sLevel := false ;
70515: LD_ADDR_EXP 69
70519: PUSH
70520: LD_INT 0
70522: ST_TO_ADDR
// sArmoury := false ;
70523: LD_ADDR_EXP 70
70527: PUSH
70528: LD_INT 0
70530: ST_TO_ADDR
// sRadar := false ;
70531: LD_ADDR_EXP 71
70535: PUSH
70536: LD_INT 0
70538: ST_TO_ADDR
// sBunker := false ;
70539: LD_ADDR_EXP 72
70543: PUSH
70544: LD_INT 0
70546: ST_TO_ADDR
// sHack := false ;
70547: LD_ADDR_EXP 73
70551: PUSH
70552: LD_INT 0
70554: ST_TO_ADDR
// sFire := false ;
70555: LD_ADDR_EXP 74
70559: PUSH
70560: LD_INT 0
70562: ST_TO_ADDR
// sRefresh := false ;
70563: LD_ADDR_EXP 75
70567: PUSH
70568: LD_INT 0
70570: ST_TO_ADDR
// sExp := false ;
70571: LD_ADDR_EXP 76
70575: PUSH
70576: LD_INT 0
70578: ST_TO_ADDR
// sDepot := false ;
70579: LD_ADDR_EXP 77
70583: PUSH
70584: LD_INT 0
70586: ST_TO_ADDR
// sFlag := false ;
70587: LD_ADDR_EXP 78
70591: PUSH
70592: LD_INT 0
70594: ST_TO_ADDR
// sKamikadze := false ;
70595: LD_ADDR_EXP 86
70599: PUSH
70600: LD_INT 0
70602: ST_TO_ADDR
// sTroll := false ;
70603: LD_ADDR_EXP 87
70607: PUSH
70608: LD_INT 0
70610: ST_TO_ADDR
// sSlow := false ;
70611: LD_ADDR_EXP 88
70615: PUSH
70616: LD_INT 0
70618: ST_TO_ADDR
// sLack := false ;
70619: LD_ADDR_EXP 89
70623: PUSH
70624: LD_INT 0
70626: ST_TO_ADDR
// sTank := false ;
70627: LD_ADDR_EXP 91
70631: PUSH
70632: LD_INT 0
70634: ST_TO_ADDR
// sRemote := false ;
70635: LD_ADDR_EXP 92
70639: PUSH
70640: LD_INT 0
70642: ST_TO_ADDR
// sPowell := false ;
70643: LD_ADDR_EXP 93
70647: PUSH
70648: LD_INT 0
70650: ST_TO_ADDR
// sTeleport := false ;
70651: LD_ADDR_EXP 96
70655: PUSH
70656: LD_INT 0
70658: ST_TO_ADDR
// sOilTower := false ;
70659: LD_ADDR_EXP 98
70663: PUSH
70664: LD_INT 0
70666: ST_TO_ADDR
// sShovel := false ;
70667: LD_ADDR_EXP 99
70671: PUSH
70672: LD_INT 0
70674: ST_TO_ADDR
// sSheik := false ;
70675: LD_ADDR_EXP 100
70679: PUSH
70680: LD_INT 0
70682: ST_TO_ADDR
// sEarthquake := false ;
70683: LD_ADDR_EXP 102
70687: PUSH
70688: LD_INT 0
70690: ST_TO_ADDR
// sAI := false ;
70691: LD_ADDR_EXP 103
70695: PUSH
70696: LD_INT 0
70698: ST_TO_ADDR
// sCargo := false ;
70699: LD_ADDR_EXP 106
70703: PUSH
70704: LD_INT 0
70706: ST_TO_ADDR
// sDLaser := false ;
70707: LD_ADDR_EXP 107
70711: PUSH
70712: LD_INT 0
70714: ST_TO_ADDR
// sExchange := false ;
70715: LD_ADDR_EXP 108
70719: PUSH
70720: LD_INT 0
70722: ST_TO_ADDR
// sFac := false ;
70723: LD_ADDR_EXP 109
70727: PUSH
70728: LD_INT 0
70730: ST_TO_ADDR
// sPower := false ;
70731: LD_ADDR_EXP 110
70735: PUSH
70736: LD_INT 0
70738: ST_TO_ADDR
// sRandom := false ;
70739: LD_ADDR_EXP 111
70743: PUSH
70744: LD_INT 0
70746: ST_TO_ADDR
// sShield := false ;
70747: LD_ADDR_EXP 112
70751: PUSH
70752: LD_INT 0
70754: ST_TO_ADDR
// sTime := false ;
70755: LD_ADDR_EXP 113
70759: PUSH
70760: LD_INT 0
70762: ST_TO_ADDR
// sTools := false ;
70763: LD_ADDR_EXP 114
70767: PUSH
70768: LD_INT 0
70770: ST_TO_ADDR
// sSold := false ;
70771: LD_ADDR_EXP 79
70775: PUSH
70776: LD_INT 0
70778: ST_TO_ADDR
// sDiff := false ;
70779: LD_ADDR_EXP 80
70783: PUSH
70784: LD_INT 0
70786: ST_TO_ADDR
// sFog := false ;
70787: LD_ADDR_EXP 83
70791: PUSH
70792: LD_INT 0
70794: ST_TO_ADDR
// sReset := false ;
70795: LD_ADDR_EXP 84
70799: PUSH
70800: LD_INT 0
70802: ST_TO_ADDR
// sSun := false ;
70803: LD_ADDR_EXP 85
70807: PUSH
70808: LD_INT 0
70810: ST_TO_ADDR
// sTiger := false ;
70811: LD_ADDR_EXP 81
70815: PUSH
70816: LD_INT 0
70818: ST_TO_ADDR
// sBomb := false ;
70819: LD_ADDR_EXP 82
70823: PUSH
70824: LD_INT 0
70826: ST_TO_ADDR
// sWound := false ;
70827: LD_ADDR_EXP 90
70831: PUSH
70832: LD_INT 0
70834: ST_TO_ADDR
// sBetray := false ;
70835: LD_ADDR_EXP 94
70839: PUSH
70840: LD_INT 0
70842: ST_TO_ADDR
// sContamin := false ;
70843: LD_ADDR_EXP 95
70847: PUSH
70848: LD_INT 0
70850: ST_TO_ADDR
// sOil := false ;
70851: LD_ADDR_EXP 97
70855: PUSH
70856: LD_INT 0
70858: ST_TO_ADDR
// sStu := false ;
70859: LD_ADDR_EXP 101
70863: PUSH
70864: LD_INT 0
70866: ST_TO_ADDR
// sBazooka := false ;
70867: LD_ADDR_EXP 104
70871: PUSH
70872: LD_INT 0
70874: ST_TO_ADDR
// sMortar := false ;
70875: LD_ADDR_EXP 105
70879: PUSH
70880: LD_INT 0
70882: ST_TO_ADDR
// sRanger := false ;
70883: LD_ADDR_EXP 115
70887: PUSH
70888: LD_INT 0
70890: ST_TO_ADDR
// sComputer := false ;
70891: LD_ADDR_EXP 116
70895: PUSH
70896: LD_INT 0
70898: ST_TO_ADDR
// s30 := false ;
70899: LD_ADDR_EXP 117
70903: PUSH
70904: LD_INT 0
70906: ST_TO_ADDR
// s60 := false ;
70907: LD_ADDR_EXP 118
70911: PUSH
70912: LD_INT 0
70914: ST_TO_ADDR
// end ;
70915: LD_VAR 0 1
70919: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
70920: LD_INT 0
70922: PPUSH
70923: PPUSH
70924: PPUSH
70925: PPUSH
70926: PPUSH
70927: PPUSH
70928: PPUSH
// result := [ ] ;
70929: LD_ADDR_VAR 0 2
70933: PUSH
70934: EMPTY
70935: ST_TO_ADDR
// if campaign_id = 1 then
70936: LD_OWVAR 69
70940: PUSH
70941: LD_INT 1
70943: EQUAL
70944: IFFALSE 74110
// begin case mission_number of 1 :
70946: LD_OWVAR 70
70950: PUSH
70951: LD_INT 1
70953: DOUBLE
70954: EQUAL
70955: IFTRUE 70959
70957: GO 71035
70959: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
70960: LD_ADDR_VAR 0 2
70964: PUSH
70965: LD_INT 2
70967: PUSH
70968: LD_INT 4
70970: PUSH
70971: LD_INT 11
70973: PUSH
70974: LD_INT 12
70976: PUSH
70977: LD_INT 15
70979: PUSH
70980: LD_INT 16
70982: PUSH
70983: LD_INT 22
70985: PUSH
70986: LD_INT 23
70988: PUSH
70989: LD_INT 26
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: PUSH
71003: LD_INT 101
71005: PUSH
71006: LD_INT 102
71008: PUSH
71009: LD_INT 106
71011: PUSH
71012: LD_INT 116
71014: PUSH
71015: LD_INT 117
71017: PUSH
71018: LD_INT 118
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: ST_TO_ADDR
71033: GO 74108
71035: LD_INT 2
71037: DOUBLE
71038: EQUAL
71039: IFTRUE 71043
71041: GO 71127
71043: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
71044: LD_ADDR_VAR 0 2
71048: PUSH
71049: LD_INT 2
71051: PUSH
71052: LD_INT 4
71054: PUSH
71055: LD_INT 11
71057: PUSH
71058: LD_INT 12
71060: PUSH
71061: LD_INT 15
71063: PUSH
71064: LD_INT 16
71066: PUSH
71067: LD_INT 22
71069: PUSH
71070: LD_INT 23
71072: PUSH
71073: LD_INT 26
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: PUSH
71087: LD_INT 101
71089: PUSH
71090: LD_INT 102
71092: PUSH
71093: LD_INT 105
71095: PUSH
71096: LD_INT 106
71098: PUSH
71099: LD_INT 108
71101: PUSH
71102: LD_INT 116
71104: PUSH
71105: LD_INT 117
71107: PUSH
71108: LD_INT 118
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: ST_TO_ADDR
71125: GO 74108
71127: LD_INT 3
71129: DOUBLE
71130: EQUAL
71131: IFTRUE 71135
71133: GO 71223
71135: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
71136: LD_ADDR_VAR 0 2
71140: PUSH
71141: LD_INT 2
71143: PUSH
71144: LD_INT 4
71146: PUSH
71147: LD_INT 5
71149: PUSH
71150: LD_INT 11
71152: PUSH
71153: LD_INT 12
71155: PUSH
71156: LD_INT 15
71158: PUSH
71159: LD_INT 16
71161: PUSH
71162: LD_INT 22
71164: PUSH
71165: LD_INT 26
71167: PUSH
71168: LD_INT 36
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: PUSH
71183: LD_INT 101
71185: PUSH
71186: LD_INT 102
71188: PUSH
71189: LD_INT 105
71191: PUSH
71192: LD_INT 106
71194: PUSH
71195: LD_INT 108
71197: PUSH
71198: LD_INT 116
71200: PUSH
71201: LD_INT 117
71203: PUSH
71204: LD_INT 118
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: ST_TO_ADDR
71221: GO 74108
71223: LD_INT 4
71225: DOUBLE
71226: EQUAL
71227: IFTRUE 71231
71229: GO 71327
71231: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
71232: LD_ADDR_VAR 0 2
71236: PUSH
71237: LD_INT 2
71239: PUSH
71240: LD_INT 4
71242: PUSH
71243: LD_INT 5
71245: PUSH
71246: LD_INT 8
71248: PUSH
71249: LD_INT 11
71251: PUSH
71252: LD_INT 12
71254: PUSH
71255: LD_INT 15
71257: PUSH
71258: LD_INT 16
71260: PUSH
71261: LD_INT 22
71263: PUSH
71264: LD_INT 23
71266: PUSH
71267: LD_INT 26
71269: PUSH
71270: LD_INT 36
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 101
71289: PUSH
71290: LD_INT 102
71292: PUSH
71293: LD_INT 105
71295: PUSH
71296: LD_INT 106
71298: PUSH
71299: LD_INT 108
71301: PUSH
71302: LD_INT 116
71304: PUSH
71305: LD_INT 117
71307: PUSH
71308: LD_INT 118
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: ST_TO_ADDR
71325: GO 74108
71327: LD_INT 5
71329: DOUBLE
71330: EQUAL
71331: IFTRUE 71335
71333: GO 71447
71335: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
71336: LD_ADDR_VAR 0 2
71340: PUSH
71341: LD_INT 2
71343: PUSH
71344: LD_INT 4
71346: PUSH
71347: LD_INT 5
71349: PUSH
71350: LD_INT 6
71352: PUSH
71353: LD_INT 8
71355: PUSH
71356: LD_INT 11
71358: PUSH
71359: LD_INT 12
71361: PUSH
71362: LD_INT 15
71364: PUSH
71365: LD_INT 16
71367: PUSH
71368: LD_INT 22
71370: PUSH
71371: LD_INT 23
71373: PUSH
71374: LD_INT 25
71376: PUSH
71377: LD_INT 26
71379: PUSH
71380: LD_INT 36
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 101
71401: PUSH
71402: LD_INT 102
71404: PUSH
71405: LD_INT 105
71407: PUSH
71408: LD_INT 106
71410: PUSH
71411: LD_INT 108
71413: PUSH
71414: LD_INT 109
71416: PUSH
71417: LD_INT 112
71419: PUSH
71420: LD_INT 116
71422: PUSH
71423: LD_INT 117
71425: PUSH
71426: LD_INT 118
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: ST_TO_ADDR
71445: GO 74108
71447: LD_INT 6
71449: DOUBLE
71450: EQUAL
71451: IFTRUE 71455
71453: GO 71587
71455: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
71456: LD_ADDR_VAR 0 2
71460: PUSH
71461: LD_INT 2
71463: PUSH
71464: LD_INT 4
71466: PUSH
71467: LD_INT 5
71469: PUSH
71470: LD_INT 6
71472: PUSH
71473: LD_INT 8
71475: PUSH
71476: LD_INT 11
71478: PUSH
71479: LD_INT 12
71481: PUSH
71482: LD_INT 15
71484: PUSH
71485: LD_INT 16
71487: PUSH
71488: LD_INT 20
71490: PUSH
71491: LD_INT 21
71493: PUSH
71494: LD_INT 22
71496: PUSH
71497: LD_INT 23
71499: PUSH
71500: LD_INT 25
71502: PUSH
71503: LD_INT 26
71505: PUSH
71506: LD_INT 30
71508: PUSH
71509: LD_INT 31
71511: PUSH
71512: LD_INT 32
71514: PUSH
71515: LD_INT 36
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 101
71541: PUSH
71542: LD_INT 102
71544: PUSH
71545: LD_INT 105
71547: PUSH
71548: LD_INT 106
71550: PUSH
71551: LD_INT 108
71553: PUSH
71554: LD_INT 109
71556: PUSH
71557: LD_INT 112
71559: PUSH
71560: LD_INT 116
71562: PUSH
71563: LD_INT 117
71565: PUSH
71566: LD_INT 118
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: ST_TO_ADDR
71585: GO 74108
71587: LD_INT 7
71589: DOUBLE
71590: EQUAL
71591: IFTRUE 71595
71593: GO 71707
71595: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
71596: LD_ADDR_VAR 0 2
71600: PUSH
71601: LD_INT 2
71603: PUSH
71604: LD_INT 4
71606: PUSH
71607: LD_INT 5
71609: PUSH
71610: LD_INT 7
71612: PUSH
71613: LD_INT 11
71615: PUSH
71616: LD_INT 12
71618: PUSH
71619: LD_INT 15
71621: PUSH
71622: LD_INT 16
71624: PUSH
71625: LD_INT 20
71627: PUSH
71628: LD_INT 21
71630: PUSH
71631: LD_INT 22
71633: PUSH
71634: LD_INT 23
71636: PUSH
71637: LD_INT 25
71639: PUSH
71640: LD_INT 26
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: LIST
71658: PUSH
71659: LD_INT 101
71661: PUSH
71662: LD_INT 102
71664: PUSH
71665: LD_INT 103
71667: PUSH
71668: LD_INT 105
71670: PUSH
71671: LD_INT 106
71673: PUSH
71674: LD_INT 108
71676: PUSH
71677: LD_INT 112
71679: PUSH
71680: LD_INT 116
71682: PUSH
71683: LD_INT 117
71685: PUSH
71686: LD_INT 118
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: LIST
71693: LIST
71694: LIST
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: ST_TO_ADDR
71705: GO 74108
71707: LD_INT 8
71709: DOUBLE
71710: EQUAL
71711: IFTRUE 71715
71713: GO 71855
71715: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
71716: LD_ADDR_VAR 0 2
71720: PUSH
71721: LD_INT 2
71723: PUSH
71724: LD_INT 4
71726: PUSH
71727: LD_INT 5
71729: PUSH
71730: LD_INT 6
71732: PUSH
71733: LD_INT 7
71735: PUSH
71736: LD_INT 8
71738: PUSH
71739: LD_INT 11
71741: PUSH
71742: LD_INT 12
71744: PUSH
71745: LD_INT 15
71747: PUSH
71748: LD_INT 16
71750: PUSH
71751: LD_INT 20
71753: PUSH
71754: LD_INT 21
71756: PUSH
71757: LD_INT 22
71759: PUSH
71760: LD_INT 23
71762: PUSH
71763: LD_INT 25
71765: PUSH
71766: LD_INT 26
71768: PUSH
71769: LD_INT 30
71771: PUSH
71772: LD_INT 31
71774: PUSH
71775: LD_INT 32
71777: PUSH
71778: LD_INT 36
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: LIST
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: LIST
71790: LIST
71791: LIST
71792: LIST
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: LIST
71802: PUSH
71803: LD_INT 101
71805: PUSH
71806: LD_INT 102
71808: PUSH
71809: LD_INT 103
71811: PUSH
71812: LD_INT 105
71814: PUSH
71815: LD_INT 106
71817: PUSH
71818: LD_INT 108
71820: PUSH
71821: LD_INT 109
71823: PUSH
71824: LD_INT 112
71826: PUSH
71827: LD_INT 116
71829: PUSH
71830: LD_INT 117
71832: PUSH
71833: LD_INT 118
71835: PUSH
71836: EMPTY
71837: LIST
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: LIST
71843: LIST
71844: LIST
71845: LIST
71846: LIST
71847: LIST
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: ST_TO_ADDR
71853: GO 74108
71855: LD_INT 9
71857: DOUBLE
71858: EQUAL
71859: IFTRUE 71863
71861: GO 72011
71863: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
71864: LD_ADDR_VAR 0 2
71868: PUSH
71869: LD_INT 2
71871: PUSH
71872: LD_INT 4
71874: PUSH
71875: LD_INT 5
71877: PUSH
71878: LD_INT 6
71880: PUSH
71881: LD_INT 7
71883: PUSH
71884: LD_INT 8
71886: PUSH
71887: LD_INT 11
71889: PUSH
71890: LD_INT 12
71892: PUSH
71893: LD_INT 15
71895: PUSH
71896: LD_INT 16
71898: PUSH
71899: LD_INT 20
71901: PUSH
71902: LD_INT 21
71904: PUSH
71905: LD_INT 22
71907: PUSH
71908: LD_INT 23
71910: PUSH
71911: LD_INT 25
71913: PUSH
71914: LD_INT 26
71916: PUSH
71917: LD_INT 28
71919: PUSH
71920: LD_INT 30
71922: PUSH
71923: LD_INT 31
71925: PUSH
71926: LD_INT 32
71928: PUSH
71929: LD_INT 36
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: PUSH
71955: LD_INT 101
71957: PUSH
71958: LD_INT 102
71960: PUSH
71961: LD_INT 103
71963: PUSH
71964: LD_INT 105
71966: PUSH
71967: LD_INT 106
71969: PUSH
71970: LD_INT 108
71972: PUSH
71973: LD_INT 109
71975: PUSH
71976: LD_INT 112
71978: PUSH
71979: LD_INT 114
71981: PUSH
71982: LD_INT 116
71984: PUSH
71985: LD_INT 117
71987: PUSH
71988: LD_INT 118
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: LIST
71995: LIST
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: LIST
72003: LIST
72004: PUSH
72005: EMPTY
72006: LIST
72007: LIST
72008: ST_TO_ADDR
72009: GO 74108
72011: LD_INT 10
72013: DOUBLE
72014: EQUAL
72015: IFTRUE 72019
72017: GO 72215
72019: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
72020: LD_ADDR_VAR 0 2
72024: PUSH
72025: LD_INT 2
72027: PUSH
72028: LD_INT 4
72030: PUSH
72031: LD_INT 5
72033: PUSH
72034: LD_INT 6
72036: PUSH
72037: LD_INT 7
72039: PUSH
72040: LD_INT 8
72042: PUSH
72043: LD_INT 9
72045: PUSH
72046: LD_INT 10
72048: PUSH
72049: LD_INT 11
72051: PUSH
72052: LD_INT 12
72054: PUSH
72055: LD_INT 13
72057: PUSH
72058: LD_INT 14
72060: PUSH
72061: LD_INT 15
72063: PUSH
72064: LD_INT 16
72066: PUSH
72067: LD_INT 17
72069: PUSH
72070: LD_INT 18
72072: PUSH
72073: LD_INT 19
72075: PUSH
72076: LD_INT 20
72078: PUSH
72079: LD_INT 21
72081: PUSH
72082: LD_INT 22
72084: PUSH
72085: LD_INT 23
72087: PUSH
72088: LD_INT 24
72090: PUSH
72091: LD_INT 25
72093: PUSH
72094: LD_INT 26
72096: PUSH
72097: LD_INT 28
72099: PUSH
72100: LD_INT 30
72102: PUSH
72103: LD_INT 31
72105: PUSH
72106: LD_INT 32
72108: PUSH
72109: LD_INT 36
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: PUSH
72143: LD_INT 101
72145: PUSH
72146: LD_INT 102
72148: PUSH
72149: LD_INT 103
72151: PUSH
72152: LD_INT 104
72154: PUSH
72155: LD_INT 105
72157: PUSH
72158: LD_INT 106
72160: PUSH
72161: LD_INT 107
72163: PUSH
72164: LD_INT 108
72166: PUSH
72167: LD_INT 109
72169: PUSH
72170: LD_INT 110
72172: PUSH
72173: LD_INT 111
72175: PUSH
72176: LD_INT 112
72178: PUSH
72179: LD_INT 114
72181: PUSH
72182: LD_INT 116
72184: PUSH
72185: LD_INT 117
72187: PUSH
72188: LD_INT 118
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: ST_TO_ADDR
72213: GO 74108
72215: LD_INT 11
72217: DOUBLE
72218: EQUAL
72219: IFTRUE 72223
72221: GO 72427
72223: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
72224: LD_ADDR_VAR 0 2
72228: PUSH
72229: LD_INT 2
72231: PUSH
72232: LD_INT 3
72234: PUSH
72235: LD_INT 4
72237: PUSH
72238: LD_INT 5
72240: PUSH
72241: LD_INT 6
72243: PUSH
72244: LD_INT 7
72246: PUSH
72247: LD_INT 8
72249: PUSH
72250: LD_INT 9
72252: PUSH
72253: LD_INT 10
72255: PUSH
72256: LD_INT 11
72258: PUSH
72259: LD_INT 12
72261: PUSH
72262: LD_INT 13
72264: PUSH
72265: LD_INT 14
72267: PUSH
72268: LD_INT 15
72270: PUSH
72271: LD_INT 16
72273: PUSH
72274: LD_INT 17
72276: PUSH
72277: LD_INT 18
72279: PUSH
72280: LD_INT 19
72282: PUSH
72283: LD_INT 20
72285: PUSH
72286: LD_INT 21
72288: PUSH
72289: LD_INT 22
72291: PUSH
72292: LD_INT 23
72294: PUSH
72295: LD_INT 24
72297: PUSH
72298: LD_INT 25
72300: PUSH
72301: LD_INT 26
72303: PUSH
72304: LD_INT 28
72306: PUSH
72307: LD_INT 30
72309: PUSH
72310: LD_INT 31
72312: PUSH
72313: LD_INT 32
72315: PUSH
72316: LD_INT 34
72318: PUSH
72319: LD_INT 36
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: LIST
72326: LIST
72327: LIST
72328: LIST
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: LIST
72349: LIST
72350: LIST
72351: LIST
72352: LIST
72353: LIST
72354: PUSH
72355: LD_INT 101
72357: PUSH
72358: LD_INT 102
72360: PUSH
72361: LD_INT 103
72363: PUSH
72364: LD_INT 104
72366: PUSH
72367: LD_INT 105
72369: PUSH
72370: LD_INT 106
72372: PUSH
72373: LD_INT 107
72375: PUSH
72376: LD_INT 108
72378: PUSH
72379: LD_INT 109
72381: PUSH
72382: LD_INT 110
72384: PUSH
72385: LD_INT 111
72387: PUSH
72388: LD_INT 112
72390: PUSH
72391: LD_INT 114
72393: PUSH
72394: LD_INT 116
72396: PUSH
72397: LD_INT 117
72399: PUSH
72400: LD_INT 118
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: LIST
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: ST_TO_ADDR
72425: GO 74108
72427: LD_INT 12
72429: DOUBLE
72430: EQUAL
72431: IFTRUE 72435
72433: GO 72655
72435: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
72436: LD_ADDR_VAR 0 2
72440: PUSH
72441: LD_INT 1
72443: PUSH
72444: LD_INT 2
72446: PUSH
72447: LD_INT 3
72449: PUSH
72450: LD_INT 4
72452: PUSH
72453: LD_INT 5
72455: PUSH
72456: LD_INT 6
72458: PUSH
72459: LD_INT 7
72461: PUSH
72462: LD_INT 8
72464: PUSH
72465: LD_INT 9
72467: PUSH
72468: LD_INT 10
72470: PUSH
72471: LD_INT 11
72473: PUSH
72474: LD_INT 12
72476: PUSH
72477: LD_INT 13
72479: PUSH
72480: LD_INT 14
72482: PUSH
72483: LD_INT 15
72485: PUSH
72486: LD_INT 16
72488: PUSH
72489: LD_INT 17
72491: PUSH
72492: LD_INT 18
72494: PUSH
72495: LD_INT 19
72497: PUSH
72498: LD_INT 20
72500: PUSH
72501: LD_INT 21
72503: PUSH
72504: LD_INT 22
72506: PUSH
72507: LD_INT 23
72509: PUSH
72510: LD_INT 24
72512: PUSH
72513: LD_INT 25
72515: PUSH
72516: LD_INT 26
72518: PUSH
72519: LD_INT 27
72521: PUSH
72522: LD_INT 28
72524: PUSH
72525: LD_INT 30
72527: PUSH
72528: LD_INT 31
72530: PUSH
72531: LD_INT 32
72533: PUSH
72534: LD_INT 33
72536: PUSH
72537: LD_INT 34
72539: PUSH
72540: LD_INT 36
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: LIST
72547: LIST
72548: LIST
72549: LIST
72550: LIST
72551: LIST
72552: LIST
72553: LIST
72554: LIST
72555: LIST
72556: LIST
72557: LIST
72558: LIST
72559: LIST
72560: LIST
72561: LIST
72562: LIST
72563: LIST
72564: LIST
72565: LIST
72566: LIST
72567: LIST
72568: LIST
72569: LIST
72570: LIST
72571: LIST
72572: LIST
72573: LIST
72574: LIST
72575: LIST
72576: LIST
72577: LIST
72578: PUSH
72579: LD_INT 101
72581: PUSH
72582: LD_INT 102
72584: PUSH
72585: LD_INT 103
72587: PUSH
72588: LD_INT 104
72590: PUSH
72591: LD_INT 105
72593: PUSH
72594: LD_INT 106
72596: PUSH
72597: LD_INT 107
72599: PUSH
72600: LD_INT 108
72602: PUSH
72603: LD_INT 109
72605: PUSH
72606: LD_INT 110
72608: PUSH
72609: LD_INT 111
72611: PUSH
72612: LD_INT 112
72614: PUSH
72615: LD_INT 113
72617: PUSH
72618: LD_INT 114
72620: PUSH
72621: LD_INT 116
72623: PUSH
72624: LD_INT 117
72626: PUSH
72627: LD_INT 118
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: ST_TO_ADDR
72653: GO 74108
72655: LD_INT 13
72657: DOUBLE
72658: EQUAL
72659: IFTRUE 72663
72661: GO 72871
72663: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
72664: LD_ADDR_VAR 0 2
72668: PUSH
72669: LD_INT 1
72671: PUSH
72672: LD_INT 2
72674: PUSH
72675: LD_INT 3
72677: PUSH
72678: LD_INT 4
72680: PUSH
72681: LD_INT 5
72683: PUSH
72684: LD_INT 8
72686: PUSH
72687: LD_INT 9
72689: PUSH
72690: LD_INT 10
72692: PUSH
72693: LD_INT 11
72695: PUSH
72696: LD_INT 12
72698: PUSH
72699: LD_INT 14
72701: PUSH
72702: LD_INT 15
72704: PUSH
72705: LD_INT 16
72707: PUSH
72708: LD_INT 17
72710: PUSH
72711: LD_INT 18
72713: PUSH
72714: LD_INT 19
72716: PUSH
72717: LD_INT 20
72719: PUSH
72720: LD_INT 21
72722: PUSH
72723: LD_INT 22
72725: PUSH
72726: LD_INT 23
72728: PUSH
72729: LD_INT 24
72731: PUSH
72732: LD_INT 25
72734: PUSH
72735: LD_INT 26
72737: PUSH
72738: LD_INT 27
72740: PUSH
72741: LD_INT 28
72743: PUSH
72744: LD_INT 30
72746: PUSH
72747: LD_INT 31
72749: PUSH
72750: LD_INT 32
72752: PUSH
72753: LD_INT 33
72755: PUSH
72756: LD_INT 34
72758: PUSH
72759: LD_INT 36
72761: PUSH
72762: EMPTY
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: PUSH
72795: LD_INT 101
72797: PUSH
72798: LD_INT 102
72800: PUSH
72801: LD_INT 103
72803: PUSH
72804: LD_INT 104
72806: PUSH
72807: LD_INT 105
72809: PUSH
72810: LD_INT 106
72812: PUSH
72813: LD_INT 107
72815: PUSH
72816: LD_INT 108
72818: PUSH
72819: LD_INT 109
72821: PUSH
72822: LD_INT 110
72824: PUSH
72825: LD_INT 111
72827: PUSH
72828: LD_INT 112
72830: PUSH
72831: LD_INT 113
72833: PUSH
72834: LD_INT 114
72836: PUSH
72837: LD_INT 116
72839: PUSH
72840: LD_INT 117
72842: PUSH
72843: LD_INT 118
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: LIST
72850: LIST
72851: LIST
72852: LIST
72853: LIST
72854: LIST
72855: LIST
72856: LIST
72857: LIST
72858: LIST
72859: LIST
72860: LIST
72861: LIST
72862: LIST
72863: LIST
72864: PUSH
72865: EMPTY
72866: LIST
72867: LIST
72868: ST_TO_ADDR
72869: GO 74108
72871: LD_INT 14
72873: DOUBLE
72874: EQUAL
72875: IFTRUE 72879
72877: GO 73103
72879: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
72880: LD_ADDR_VAR 0 2
72884: PUSH
72885: LD_INT 1
72887: PUSH
72888: LD_INT 2
72890: PUSH
72891: LD_INT 3
72893: PUSH
72894: LD_INT 4
72896: PUSH
72897: LD_INT 5
72899: PUSH
72900: LD_INT 6
72902: PUSH
72903: LD_INT 7
72905: PUSH
72906: LD_INT 8
72908: PUSH
72909: LD_INT 9
72911: PUSH
72912: LD_INT 10
72914: PUSH
72915: LD_INT 11
72917: PUSH
72918: LD_INT 12
72920: PUSH
72921: LD_INT 13
72923: PUSH
72924: LD_INT 14
72926: PUSH
72927: LD_INT 15
72929: PUSH
72930: LD_INT 16
72932: PUSH
72933: LD_INT 17
72935: PUSH
72936: LD_INT 18
72938: PUSH
72939: LD_INT 19
72941: PUSH
72942: LD_INT 20
72944: PUSH
72945: LD_INT 21
72947: PUSH
72948: LD_INT 22
72950: PUSH
72951: LD_INT 23
72953: PUSH
72954: LD_INT 24
72956: PUSH
72957: LD_INT 25
72959: PUSH
72960: LD_INT 26
72962: PUSH
72963: LD_INT 27
72965: PUSH
72966: LD_INT 28
72968: PUSH
72969: LD_INT 29
72971: PUSH
72972: LD_INT 30
72974: PUSH
72975: LD_INT 31
72977: PUSH
72978: LD_INT 32
72980: PUSH
72981: LD_INT 33
72983: PUSH
72984: LD_INT 34
72986: PUSH
72987: LD_INT 36
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: LIST
72994: LIST
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: PUSH
73027: LD_INT 101
73029: PUSH
73030: LD_INT 102
73032: PUSH
73033: LD_INT 103
73035: PUSH
73036: LD_INT 104
73038: PUSH
73039: LD_INT 105
73041: PUSH
73042: LD_INT 106
73044: PUSH
73045: LD_INT 107
73047: PUSH
73048: LD_INT 108
73050: PUSH
73051: LD_INT 109
73053: PUSH
73054: LD_INT 110
73056: PUSH
73057: LD_INT 111
73059: PUSH
73060: LD_INT 112
73062: PUSH
73063: LD_INT 113
73065: PUSH
73066: LD_INT 114
73068: PUSH
73069: LD_INT 116
73071: PUSH
73072: LD_INT 117
73074: PUSH
73075: LD_INT 118
73077: PUSH
73078: EMPTY
73079: LIST
73080: LIST
73081: LIST
73082: LIST
73083: LIST
73084: LIST
73085: LIST
73086: LIST
73087: LIST
73088: LIST
73089: LIST
73090: LIST
73091: LIST
73092: LIST
73093: LIST
73094: LIST
73095: LIST
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: ST_TO_ADDR
73101: GO 74108
73103: LD_INT 15
73105: DOUBLE
73106: EQUAL
73107: IFTRUE 73111
73109: GO 73335
73111: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
73112: LD_ADDR_VAR 0 2
73116: PUSH
73117: LD_INT 1
73119: PUSH
73120: LD_INT 2
73122: PUSH
73123: LD_INT 3
73125: PUSH
73126: LD_INT 4
73128: PUSH
73129: LD_INT 5
73131: PUSH
73132: LD_INT 6
73134: PUSH
73135: LD_INT 7
73137: PUSH
73138: LD_INT 8
73140: PUSH
73141: LD_INT 9
73143: PUSH
73144: LD_INT 10
73146: PUSH
73147: LD_INT 11
73149: PUSH
73150: LD_INT 12
73152: PUSH
73153: LD_INT 13
73155: PUSH
73156: LD_INT 14
73158: PUSH
73159: LD_INT 15
73161: PUSH
73162: LD_INT 16
73164: PUSH
73165: LD_INT 17
73167: PUSH
73168: LD_INT 18
73170: PUSH
73171: LD_INT 19
73173: PUSH
73174: LD_INT 20
73176: PUSH
73177: LD_INT 21
73179: PUSH
73180: LD_INT 22
73182: PUSH
73183: LD_INT 23
73185: PUSH
73186: LD_INT 24
73188: PUSH
73189: LD_INT 25
73191: PUSH
73192: LD_INT 26
73194: PUSH
73195: LD_INT 27
73197: PUSH
73198: LD_INT 28
73200: PUSH
73201: LD_INT 29
73203: PUSH
73204: LD_INT 30
73206: PUSH
73207: LD_INT 31
73209: PUSH
73210: LD_INT 32
73212: PUSH
73213: LD_INT 33
73215: PUSH
73216: LD_INT 34
73218: PUSH
73219: LD_INT 36
73221: PUSH
73222: EMPTY
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: LIST
73234: LIST
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: LIST
73247: LIST
73248: LIST
73249: LIST
73250: LIST
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: LIST
73256: LIST
73257: LIST
73258: PUSH
73259: LD_INT 101
73261: PUSH
73262: LD_INT 102
73264: PUSH
73265: LD_INT 103
73267: PUSH
73268: LD_INT 104
73270: PUSH
73271: LD_INT 105
73273: PUSH
73274: LD_INT 106
73276: PUSH
73277: LD_INT 107
73279: PUSH
73280: LD_INT 108
73282: PUSH
73283: LD_INT 109
73285: PUSH
73286: LD_INT 110
73288: PUSH
73289: LD_INT 111
73291: PUSH
73292: LD_INT 112
73294: PUSH
73295: LD_INT 113
73297: PUSH
73298: LD_INT 114
73300: PUSH
73301: LD_INT 116
73303: PUSH
73304: LD_INT 117
73306: PUSH
73307: LD_INT 118
73309: PUSH
73310: EMPTY
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: PUSH
73329: EMPTY
73330: LIST
73331: LIST
73332: ST_TO_ADDR
73333: GO 74108
73335: LD_INT 16
73337: DOUBLE
73338: EQUAL
73339: IFTRUE 73343
73341: GO 73479
73343: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
73344: LD_ADDR_VAR 0 2
73348: PUSH
73349: LD_INT 2
73351: PUSH
73352: LD_INT 4
73354: PUSH
73355: LD_INT 5
73357: PUSH
73358: LD_INT 7
73360: PUSH
73361: LD_INT 11
73363: PUSH
73364: LD_INT 12
73366: PUSH
73367: LD_INT 15
73369: PUSH
73370: LD_INT 16
73372: PUSH
73373: LD_INT 20
73375: PUSH
73376: LD_INT 21
73378: PUSH
73379: LD_INT 22
73381: PUSH
73382: LD_INT 23
73384: PUSH
73385: LD_INT 25
73387: PUSH
73388: LD_INT 26
73390: PUSH
73391: LD_INT 30
73393: PUSH
73394: LD_INT 31
73396: PUSH
73397: LD_INT 32
73399: PUSH
73400: LD_INT 33
73402: PUSH
73403: LD_INT 34
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: LIST
73410: LIST
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: LIST
73423: LIST
73424: LIST
73425: LIST
73426: PUSH
73427: LD_INT 101
73429: PUSH
73430: LD_INT 102
73432: PUSH
73433: LD_INT 103
73435: PUSH
73436: LD_INT 106
73438: PUSH
73439: LD_INT 108
73441: PUSH
73442: LD_INT 112
73444: PUSH
73445: LD_INT 113
73447: PUSH
73448: LD_INT 114
73450: PUSH
73451: LD_INT 116
73453: PUSH
73454: LD_INT 117
73456: PUSH
73457: LD_INT 118
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: LIST
73466: LIST
73467: LIST
73468: LIST
73469: LIST
73470: LIST
73471: LIST
73472: PUSH
73473: EMPTY
73474: LIST
73475: LIST
73476: ST_TO_ADDR
73477: GO 74108
73479: LD_INT 17
73481: DOUBLE
73482: EQUAL
73483: IFTRUE 73487
73485: GO 73711
73487: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
73488: LD_ADDR_VAR 0 2
73492: PUSH
73493: LD_INT 1
73495: PUSH
73496: LD_INT 2
73498: PUSH
73499: LD_INT 3
73501: PUSH
73502: LD_INT 4
73504: PUSH
73505: LD_INT 5
73507: PUSH
73508: LD_INT 6
73510: PUSH
73511: LD_INT 7
73513: PUSH
73514: LD_INT 8
73516: PUSH
73517: LD_INT 9
73519: PUSH
73520: LD_INT 10
73522: PUSH
73523: LD_INT 11
73525: PUSH
73526: LD_INT 12
73528: PUSH
73529: LD_INT 13
73531: PUSH
73532: LD_INT 14
73534: PUSH
73535: LD_INT 15
73537: PUSH
73538: LD_INT 16
73540: PUSH
73541: LD_INT 17
73543: PUSH
73544: LD_INT 18
73546: PUSH
73547: LD_INT 19
73549: PUSH
73550: LD_INT 20
73552: PUSH
73553: LD_INT 21
73555: PUSH
73556: LD_INT 22
73558: PUSH
73559: LD_INT 23
73561: PUSH
73562: LD_INT 24
73564: PUSH
73565: LD_INT 25
73567: PUSH
73568: LD_INT 26
73570: PUSH
73571: LD_INT 27
73573: PUSH
73574: LD_INT 28
73576: PUSH
73577: LD_INT 29
73579: PUSH
73580: LD_INT 30
73582: PUSH
73583: LD_INT 31
73585: PUSH
73586: LD_INT 32
73588: PUSH
73589: LD_INT 33
73591: PUSH
73592: LD_INT 34
73594: PUSH
73595: LD_INT 36
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: LIST
73602: LIST
73603: LIST
73604: LIST
73605: LIST
73606: LIST
73607: LIST
73608: LIST
73609: LIST
73610: LIST
73611: LIST
73612: LIST
73613: LIST
73614: LIST
73615: LIST
73616: LIST
73617: LIST
73618: LIST
73619: LIST
73620: LIST
73621: LIST
73622: LIST
73623: LIST
73624: LIST
73625: LIST
73626: LIST
73627: LIST
73628: LIST
73629: LIST
73630: LIST
73631: LIST
73632: LIST
73633: LIST
73634: PUSH
73635: LD_INT 101
73637: PUSH
73638: LD_INT 102
73640: PUSH
73641: LD_INT 103
73643: PUSH
73644: LD_INT 104
73646: PUSH
73647: LD_INT 105
73649: PUSH
73650: LD_INT 106
73652: PUSH
73653: LD_INT 107
73655: PUSH
73656: LD_INT 108
73658: PUSH
73659: LD_INT 109
73661: PUSH
73662: LD_INT 110
73664: PUSH
73665: LD_INT 111
73667: PUSH
73668: LD_INT 112
73670: PUSH
73671: LD_INT 113
73673: PUSH
73674: LD_INT 114
73676: PUSH
73677: LD_INT 116
73679: PUSH
73680: LD_INT 117
73682: PUSH
73683: LD_INT 118
73685: PUSH
73686: EMPTY
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: ST_TO_ADDR
73709: GO 74108
73711: LD_INT 18
73713: DOUBLE
73714: EQUAL
73715: IFTRUE 73719
73717: GO 73867
73719: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
73720: LD_ADDR_VAR 0 2
73724: PUSH
73725: LD_INT 2
73727: PUSH
73728: LD_INT 4
73730: PUSH
73731: LD_INT 5
73733: PUSH
73734: LD_INT 7
73736: PUSH
73737: LD_INT 11
73739: PUSH
73740: LD_INT 12
73742: PUSH
73743: LD_INT 15
73745: PUSH
73746: LD_INT 16
73748: PUSH
73749: LD_INT 20
73751: PUSH
73752: LD_INT 21
73754: PUSH
73755: LD_INT 22
73757: PUSH
73758: LD_INT 23
73760: PUSH
73761: LD_INT 25
73763: PUSH
73764: LD_INT 26
73766: PUSH
73767: LD_INT 30
73769: PUSH
73770: LD_INT 31
73772: PUSH
73773: LD_INT 32
73775: PUSH
73776: LD_INT 33
73778: PUSH
73779: LD_INT 34
73781: PUSH
73782: LD_INT 35
73784: PUSH
73785: LD_INT 36
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: LIST
73795: LIST
73796: LIST
73797: LIST
73798: LIST
73799: LIST
73800: LIST
73801: LIST
73802: LIST
73803: LIST
73804: LIST
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: LIST
73810: PUSH
73811: LD_INT 101
73813: PUSH
73814: LD_INT 102
73816: PUSH
73817: LD_INT 103
73819: PUSH
73820: LD_INT 106
73822: PUSH
73823: LD_INT 108
73825: PUSH
73826: LD_INT 112
73828: PUSH
73829: LD_INT 113
73831: PUSH
73832: LD_INT 114
73834: PUSH
73835: LD_INT 115
73837: PUSH
73838: LD_INT 116
73840: PUSH
73841: LD_INT 117
73843: PUSH
73844: LD_INT 118
73846: PUSH
73847: EMPTY
73848: LIST
73849: LIST
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: ST_TO_ADDR
73865: GO 74108
73867: LD_INT 19
73869: DOUBLE
73870: EQUAL
73871: IFTRUE 73875
73873: GO 74107
73875: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
73876: LD_ADDR_VAR 0 2
73880: PUSH
73881: LD_INT 1
73883: PUSH
73884: LD_INT 2
73886: PUSH
73887: LD_INT 3
73889: PUSH
73890: LD_INT 4
73892: PUSH
73893: LD_INT 5
73895: PUSH
73896: LD_INT 6
73898: PUSH
73899: LD_INT 7
73901: PUSH
73902: LD_INT 8
73904: PUSH
73905: LD_INT 9
73907: PUSH
73908: LD_INT 10
73910: PUSH
73911: LD_INT 11
73913: PUSH
73914: LD_INT 12
73916: PUSH
73917: LD_INT 13
73919: PUSH
73920: LD_INT 14
73922: PUSH
73923: LD_INT 15
73925: PUSH
73926: LD_INT 16
73928: PUSH
73929: LD_INT 17
73931: PUSH
73932: LD_INT 18
73934: PUSH
73935: LD_INT 19
73937: PUSH
73938: LD_INT 20
73940: PUSH
73941: LD_INT 21
73943: PUSH
73944: LD_INT 22
73946: PUSH
73947: LD_INT 23
73949: PUSH
73950: LD_INT 24
73952: PUSH
73953: LD_INT 25
73955: PUSH
73956: LD_INT 26
73958: PUSH
73959: LD_INT 27
73961: PUSH
73962: LD_INT 28
73964: PUSH
73965: LD_INT 29
73967: PUSH
73968: LD_INT 30
73970: PUSH
73971: LD_INT 31
73973: PUSH
73974: LD_INT 32
73976: PUSH
73977: LD_INT 33
73979: PUSH
73980: LD_INT 34
73982: PUSH
73983: LD_INT 35
73985: PUSH
73986: LD_INT 36
73988: PUSH
73989: EMPTY
73990: LIST
73991: LIST
73992: LIST
73993: LIST
73994: LIST
73995: LIST
73996: LIST
73997: LIST
73998: LIST
73999: LIST
74000: LIST
74001: LIST
74002: LIST
74003: LIST
74004: LIST
74005: LIST
74006: LIST
74007: LIST
74008: LIST
74009: LIST
74010: LIST
74011: LIST
74012: LIST
74013: LIST
74014: LIST
74015: LIST
74016: LIST
74017: LIST
74018: LIST
74019: LIST
74020: LIST
74021: LIST
74022: LIST
74023: LIST
74024: LIST
74025: LIST
74026: PUSH
74027: LD_INT 101
74029: PUSH
74030: LD_INT 102
74032: PUSH
74033: LD_INT 103
74035: PUSH
74036: LD_INT 104
74038: PUSH
74039: LD_INT 105
74041: PUSH
74042: LD_INT 106
74044: PUSH
74045: LD_INT 107
74047: PUSH
74048: LD_INT 108
74050: PUSH
74051: LD_INT 109
74053: PUSH
74054: LD_INT 110
74056: PUSH
74057: LD_INT 111
74059: PUSH
74060: LD_INT 112
74062: PUSH
74063: LD_INT 113
74065: PUSH
74066: LD_INT 114
74068: PUSH
74069: LD_INT 115
74071: PUSH
74072: LD_INT 116
74074: PUSH
74075: LD_INT 117
74077: PUSH
74078: LD_INT 118
74080: PUSH
74081: EMPTY
74082: LIST
74083: LIST
74084: LIST
74085: LIST
74086: LIST
74087: LIST
74088: LIST
74089: LIST
74090: LIST
74091: LIST
74092: LIST
74093: LIST
74094: LIST
74095: LIST
74096: LIST
74097: LIST
74098: LIST
74099: LIST
74100: PUSH
74101: EMPTY
74102: LIST
74103: LIST
74104: ST_TO_ADDR
74105: GO 74108
74107: POP
// end else
74108: GO 74339
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
74110: LD_ADDR_VAR 0 2
74114: PUSH
74115: LD_INT 1
74117: PUSH
74118: LD_INT 2
74120: PUSH
74121: LD_INT 3
74123: PUSH
74124: LD_INT 4
74126: PUSH
74127: LD_INT 5
74129: PUSH
74130: LD_INT 6
74132: PUSH
74133: LD_INT 7
74135: PUSH
74136: LD_INT 8
74138: PUSH
74139: LD_INT 9
74141: PUSH
74142: LD_INT 10
74144: PUSH
74145: LD_INT 11
74147: PUSH
74148: LD_INT 12
74150: PUSH
74151: LD_INT 13
74153: PUSH
74154: LD_INT 14
74156: PUSH
74157: LD_INT 15
74159: PUSH
74160: LD_INT 16
74162: PUSH
74163: LD_INT 17
74165: PUSH
74166: LD_INT 18
74168: PUSH
74169: LD_INT 19
74171: PUSH
74172: LD_INT 20
74174: PUSH
74175: LD_INT 21
74177: PUSH
74178: LD_INT 22
74180: PUSH
74181: LD_INT 23
74183: PUSH
74184: LD_INT 24
74186: PUSH
74187: LD_INT 25
74189: PUSH
74190: LD_INT 26
74192: PUSH
74193: LD_INT 27
74195: PUSH
74196: LD_INT 28
74198: PUSH
74199: LD_INT 29
74201: PUSH
74202: LD_INT 30
74204: PUSH
74205: LD_INT 31
74207: PUSH
74208: LD_INT 32
74210: PUSH
74211: LD_INT 33
74213: PUSH
74214: LD_INT 34
74216: PUSH
74217: LD_INT 35
74219: PUSH
74220: LD_INT 36
74222: PUSH
74223: EMPTY
74224: LIST
74225: LIST
74226: LIST
74227: LIST
74228: LIST
74229: LIST
74230: LIST
74231: LIST
74232: LIST
74233: LIST
74234: LIST
74235: LIST
74236: LIST
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: PUSH
74261: LD_INT 101
74263: PUSH
74264: LD_INT 102
74266: PUSH
74267: LD_INT 103
74269: PUSH
74270: LD_INT 104
74272: PUSH
74273: LD_INT 105
74275: PUSH
74276: LD_INT 106
74278: PUSH
74279: LD_INT 107
74281: PUSH
74282: LD_INT 108
74284: PUSH
74285: LD_INT 109
74287: PUSH
74288: LD_INT 110
74290: PUSH
74291: LD_INT 111
74293: PUSH
74294: LD_INT 112
74296: PUSH
74297: LD_INT 113
74299: PUSH
74300: LD_INT 114
74302: PUSH
74303: LD_INT 115
74305: PUSH
74306: LD_INT 116
74308: PUSH
74309: LD_INT 117
74311: PUSH
74312: LD_INT 118
74314: PUSH
74315: EMPTY
74316: LIST
74317: LIST
74318: LIST
74319: LIST
74320: LIST
74321: LIST
74322: LIST
74323: LIST
74324: LIST
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: LIST
74333: LIST
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: ST_TO_ADDR
// if result then
74339: LD_VAR 0 2
74343: IFFALSE 75129
// begin normal :=  ;
74345: LD_ADDR_VAR 0 5
74349: PUSH
74350: LD_STRING 
74352: ST_TO_ADDR
// hardcore :=  ;
74353: LD_ADDR_VAR 0 6
74357: PUSH
74358: LD_STRING 
74360: ST_TO_ADDR
// active :=  ;
74361: LD_ADDR_VAR 0 7
74365: PUSH
74366: LD_STRING 
74368: ST_TO_ADDR
// for i = 1 to normalCounter do
74369: LD_ADDR_VAR 0 8
74373: PUSH
74374: DOUBLE
74375: LD_INT 1
74377: DEC
74378: ST_TO_ADDR
74379: LD_EXP 63
74383: PUSH
74384: FOR_TO
74385: IFFALSE 74486
// begin tmp := 0 ;
74387: LD_ADDR_VAR 0 3
74391: PUSH
74392: LD_STRING 0
74394: ST_TO_ADDR
// if result [ 1 ] then
74395: LD_VAR 0 2
74399: PUSH
74400: LD_INT 1
74402: ARRAY
74403: IFFALSE 74468
// if result [ 1 ] [ 1 ] = i then
74405: LD_VAR 0 2
74409: PUSH
74410: LD_INT 1
74412: ARRAY
74413: PUSH
74414: LD_INT 1
74416: ARRAY
74417: PUSH
74418: LD_VAR 0 8
74422: EQUAL
74423: IFFALSE 74468
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
74425: LD_ADDR_VAR 0 2
74429: PUSH
74430: LD_VAR 0 2
74434: PPUSH
74435: LD_INT 1
74437: PPUSH
74438: LD_VAR 0 2
74442: PUSH
74443: LD_INT 1
74445: ARRAY
74446: PPUSH
74447: LD_INT 1
74449: PPUSH
74450: CALL_OW 3
74454: PPUSH
74455: CALL_OW 1
74459: ST_TO_ADDR
// tmp := 1 ;
74460: LD_ADDR_VAR 0 3
74464: PUSH
74465: LD_STRING 1
74467: ST_TO_ADDR
// end ; normal := normal & tmp ;
74468: LD_ADDR_VAR 0 5
74472: PUSH
74473: LD_VAR 0 5
74477: PUSH
74478: LD_VAR 0 3
74482: STR
74483: ST_TO_ADDR
// end ;
74484: GO 74384
74486: POP
74487: POP
// for i = 1 to hardcoreCounter do
74488: LD_ADDR_VAR 0 8
74492: PUSH
74493: DOUBLE
74494: LD_INT 1
74496: DEC
74497: ST_TO_ADDR
74498: LD_EXP 64
74502: PUSH
74503: FOR_TO
74504: IFFALSE 74609
// begin tmp := 0 ;
74506: LD_ADDR_VAR 0 3
74510: PUSH
74511: LD_STRING 0
74513: ST_TO_ADDR
// if result [ 2 ] then
74514: LD_VAR 0 2
74518: PUSH
74519: LD_INT 2
74521: ARRAY
74522: IFFALSE 74591
// if result [ 2 ] [ 1 ] = 100 + i then
74524: LD_VAR 0 2
74528: PUSH
74529: LD_INT 2
74531: ARRAY
74532: PUSH
74533: LD_INT 1
74535: ARRAY
74536: PUSH
74537: LD_INT 100
74539: PUSH
74540: LD_VAR 0 8
74544: PLUS
74545: EQUAL
74546: IFFALSE 74591
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
74548: LD_ADDR_VAR 0 2
74552: PUSH
74553: LD_VAR 0 2
74557: PPUSH
74558: LD_INT 2
74560: PPUSH
74561: LD_VAR 0 2
74565: PUSH
74566: LD_INT 2
74568: ARRAY
74569: PPUSH
74570: LD_INT 1
74572: PPUSH
74573: CALL_OW 3
74577: PPUSH
74578: CALL_OW 1
74582: ST_TO_ADDR
// tmp := 1 ;
74583: LD_ADDR_VAR 0 3
74587: PUSH
74588: LD_STRING 1
74590: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
74591: LD_ADDR_VAR 0 6
74595: PUSH
74596: LD_VAR 0 6
74600: PUSH
74601: LD_VAR 0 3
74605: STR
74606: ST_TO_ADDR
// end ;
74607: GO 74503
74609: POP
74610: POP
// if isGameLoad then
74611: LD_VAR 0 1
74615: IFFALSE 75090
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
74617: LD_ADDR_VAR 0 4
74621: PUSH
74622: LD_EXP 67
74626: PUSH
74627: LD_EXP 66
74631: PUSH
74632: LD_EXP 68
74636: PUSH
74637: LD_EXP 65
74641: PUSH
74642: LD_EXP 69
74646: PUSH
74647: LD_EXP 70
74651: PUSH
74652: LD_EXP 71
74656: PUSH
74657: LD_EXP 72
74661: PUSH
74662: LD_EXP 73
74666: PUSH
74667: LD_EXP 74
74671: PUSH
74672: LD_EXP 75
74676: PUSH
74677: LD_EXP 76
74681: PUSH
74682: LD_EXP 77
74686: PUSH
74687: LD_EXP 78
74691: PUSH
74692: LD_EXP 86
74696: PUSH
74697: LD_EXP 87
74701: PUSH
74702: LD_EXP 88
74706: PUSH
74707: LD_EXP 89
74711: PUSH
74712: LD_EXP 91
74716: PUSH
74717: LD_EXP 92
74721: PUSH
74722: LD_EXP 93
74726: PUSH
74727: LD_EXP 96
74731: PUSH
74732: LD_EXP 98
74736: PUSH
74737: LD_EXP 99
74741: PUSH
74742: LD_EXP 100
74746: PUSH
74747: LD_EXP 102
74751: PUSH
74752: LD_EXP 103
74756: PUSH
74757: LD_EXP 106
74761: PUSH
74762: LD_EXP 107
74766: PUSH
74767: LD_EXP 108
74771: PUSH
74772: LD_EXP 109
74776: PUSH
74777: LD_EXP 110
74781: PUSH
74782: LD_EXP 111
74786: PUSH
74787: LD_EXP 112
74791: PUSH
74792: LD_EXP 113
74796: PUSH
74797: LD_EXP 114
74801: PUSH
74802: LD_EXP 79
74806: PUSH
74807: LD_EXP 80
74811: PUSH
74812: LD_EXP 83
74816: PUSH
74817: LD_EXP 84
74821: PUSH
74822: LD_EXP 85
74826: PUSH
74827: LD_EXP 81
74831: PUSH
74832: LD_EXP 82
74836: PUSH
74837: LD_EXP 90
74841: PUSH
74842: LD_EXP 94
74846: PUSH
74847: LD_EXP 95
74851: PUSH
74852: LD_EXP 97
74856: PUSH
74857: LD_EXP 101
74861: PUSH
74862: LD_EXP 104
74866: PUSH
74867: LD_EXP 105
74871: PUSH
74872: LD_EXP 115
74876: PUSH
74877: LD_EXP 116
74881: PUSH
74882: LD_EXP 117
74886: PUSH
74887: LD_EXP 118
74891: PUSH
74892: EMPTY
74893: LIST
74894: LIST
74895: LIST
74896: LIST
74897: LIST
74898: LIST
74899: LIST
74900: LIST
74901: LIST
74902: LIST
74903: LIST
74904: LIST
74905: LIST
74906: LIST
74907: LIST
74908: LIST
74909: LIST
74910: LIST
74911: LIST
74912: LIST
74913: LIST
74914: LIST
74915: LIST
74916: LIST
74917: LIST
74918: LIST
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: LIST
74927: LIST
74928: LIST
74929: LIST
74930: LIST
74931: LIST
74932: LIST
74933: LIST
74934: LIST
74935: LIST
74936: LIST
74937: LIST
74938: LIST
74939: LIST
74940: LIST
74941: LIST
74942: LIST
74943: LIST
74944: LIST
74945: LIST
74946: LIST
74947: ST_TO_ADDR
// tmp :=  ;
74948: LD_ADDR_VAR 0 3
74952: PUSH
74953: LD_STRING 
74955: ST_TO_ADDR
// for i = 1 to normalCounter do
74956: LD_ADDR_VAR 0 8
74960: PUSH
74961: DOUBLE
74962: LD_INT 1
74964: DEC
74965: ST_TO_ADDR
74966: LD_EXP 63
74970: PUSH
74971: FOR_TO
74972: IFFALSE 75008
// begin if flags [ i ] then
74974: LD_VAR 0 4
74978: PUSH
74979: LD_VAR 0 8
74983: ARRAY
74984: IFFALSE 75006
// tmp := tmp & i & ; ;
74986: LD_ADDR_VAR 0 3
74990: PUSH
74991: LD_VAR 0 3
74995: PUSH
74996: LD_VAR 0 8
75000: STR
75001: PUSH
75002: LD_STRING ;
75004: STR
75005: ST_TO_ADDR
// end ;
75006: GO 74971
75008: POP
75009: POP
// for i = 1 to hardcoreCounter do
75010: LD_ADDR_VAR 0 8
75014: PUSH
75015: DOUBLE
75016: LD_INT 1
75018: DEC
75019: ST_TO_ADDR
75020: LD_EXP 64
75024: PUSH
75025: FOR_TO
75026: IFFALSE 75072
// begin if flags [ normalCounter + i ] then
75028: LD_VAR 0 4
75032: PUSH
75033: LD_EXP 63
75037: PUSH
75038: LD_VAR 0 8
75042: PLUS
75043: ARRAY
75044: IFFALSE 75070
// tmp := tmp & ( 100 + i ) & ; ;
75046: LD_ADDR_VAR 0 3
75050: PUSH
75051: LD_VAR 0 3
75055: PUSH
75056: LD_INT 100
75058: PUSH
75059: LD_VAR 0 8
75063: PLUS
75064: STR
75065: PUSH
75066: LD_STRING ;
75068: STR
75069: ST_TO_ADDR
// end ;
75070: GO 75025
75072: POP
75073: POP
// if tmp then
75074: LD_VAR 0 3
75078: IFFALSE 75090
// active := tmp ;
75080: LD_ADDR_VAR 0 7
75084: PUSH
75085: LD_VAR 0 3
75089: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
75090: LD_STRING getStreamItemsFromMission("
75092: PUSH
75093: LD_VAR 0 5
75097: STR
75098: PUSH
75099: LD_STRING ","
75101: STR
75102: PUSH
75103: LD_VAR 0 6
75107: STR
75108: PUSH
75109: LD_STRING ","
75111: STR
75112: PUSH
75113: LD_VAR 0 7
75117: STR
75118: PUSH
75119: LD_STRING ")
75121: STR
75122: PPUSH
75123: CALL_OW 559
// end else
75127: GO 75136
// ToLua ( getStreamItemsFromMission("","","") ) ;
75129: LD_STRING getStreamItemsFromMission("","","")
75131: PPUSH
75132: CALL_OW 559
// end ;
75136: LD_VAR 0 2
75140: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
75141: LD_EXP 62
75145: PUSH
75146: LD_EXP 67
75150: AND
75151: IFFALSE 75275
75153: GO 75155
75155: DISABLE
75156: LD_INT 0
75158: PPUSH
75159: PPUSH
// begin enable ;
75160: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
75161: LD_ADDR_VAR 0 2
75165: PUSH
75166: LD_INT 22
75168: PUSH
75169: LD_OWVAR 2
75173: PUSH
75174: EMPTY
75175: LIST
75176: LIST
75177: PUSH
75178: LD_INT 2
75180: PUSH
75181: LD_INT 34
75183: PUSH
75184: LD_INT 7
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: PUSH
75191: LD_INT 34
75193: PUSH
75194: LD_INT 45
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: LD_INT 34
75203: PUSH
75204: LD_INT 28
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: PUSH
75211: LD_INT 34
75213: PUSH
75214: LD_INT 47
75216: PUSH
75217: EMPTY
75218: LIST
75219: LIST
75220: PUSH
75221: EMPTY
75222: LIST
75223: LIST
75224: LIST
75225: LIST
75226: LIST
75227: PUSH
75228: EMPTY
75229: LIST
75230: LIST
75231: PPUSH
75232: CALL_OW 69
75236: ST_TO_ADDR
// if not tmp then
75237: LD_VAR 0 2
75241: NOT
75242: IFFALSE 75246
// exit ;
75244: GO 75275
// for i in tmp do
75246: LD_ADDR_VAR 0 1
75250: PUSH
75251: LD_VAR 0 2
75255: PUSH
75256: FOR_IN
75257: IFFALSE 75273
// begin SetLives ( i , 0 ) ;
75259: LD_VAR 0 1
75263: PPUSH
75264: LD_INT 0
75266: PPUSH
75267: CALL_OW 234
// end ;
75271: GO 75256
75273: POP
75274: POP
// end ;
75275: PPOPN 2
75277: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
75278: LD_EXP 62
75282: PUSH
75283: LD_EXP 68
75287: AND
75288: IFFALSE 75372
75290: GO 75292
75292: DISABLE
75293: LD_INT 0
75295: PPUSH
75296: PPUSH
// begin enable ;
75297: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
75298: LD_ADDR_VAR 0 2
75302: PUSH
75303: LD_INT 22
75305: PUSH
75306: LD_OWVAR 2
75310: PUSH
75311: EMPTY
75312: LIST
75313: LIST
75314: PUSH
75315: LD_INT 32
75317: PUSH
75318: LD_INT 3
75320: PUSH
75321: EMPTY
75322: LIST
75323: LIST
75324: PUSH
75325: EMPTY
75326: LIST
75327: LIST
75328: PPUSH
75329: CALL_OW 69
75333: ST_TO_ADDR
// if not tmp then
75334: LD_VAR 0 2
75338: NOT
75339: IFFALSE 75343
// exit ;
75341: GO 75372
// for i in tmp do
75343: LD_ADDR_VAR 0 1
75347: PUSH
75348: LD_VAR 0 2
75352: PUSH
75353: FOR_IN
75354: IFFALSE 75370
// begin SetLives ( i , 0 ) ;
75356: LD_VAR 0 1
75360: PPUSH
75361: LD_INT 0
75363: PPUSH
75364: CALL_OW 234
// end ;
75368: GO 75353
75370: POP
75371: POP
// end ;
75372: PPOPN 2
75374: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
75375: LD_EXP 62
75379: PUSH
75380: LD_EXP 65
75384: AND
75385: IFFALSE 75478
75387: GO 75389
75389: DISABLE
75390: LD_INT 0
75392: PPUSH
// begin enable ;
75393: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
75394: LD_ADDR_VAR 0 1
75398: PUSH
75399: LD_INT 22
75401: PUSH
75402: LD_OWVAR 2
75406: PUSH
75407: EMPTY
75408: LIST
75409: LIST
75410: PUSH
75411: LD_INT 2
75413: PUSH
75414: LD_INT 25
75416: PUSH
75417: LD_INT 5
75419: PUSH
75420: EMPTY
75421: LIST
75422: LIST
75423: PUSH
75424: LD_INT 25
75426: PUSH
75427: LD_INT 9
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: PUSH
75434: LD_INT 25
75436: PUSH
75437: LD_INT 8
75439: PUSH
75440: EMPTY
75441: LIST
75442: LIST
75443: PUSH
75444: EMPTY
75445: LIST
75446: LIST
75447: LIST
75448: LIST
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: PPUSH
75454: CALL_OW 69
75458: PUSH
75459: FOR_IN
75460: IFFALSE 75476
// begin SetClass ( i , 1 ) ;
75462: LD_VAR 0 1
75466: PPUSH
75467: LD_INT 1
75469: PPUSH
75470: CALL_OW 336
// end ;
75474: GO 75459
75476: POP
75477: POP
// end ;
75478: PPOPN 1
75480: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
75481: LD_EXP 62
75485: PUSH
75486: LD_EXP 66
75490: AND
75491: PUSH
75492: LD_OWVAR 65
75496: PUSH
75497: LD_INT 7
75499: LESS
75500: AND
75501: IFFALSE 75515
75503: GO 75505
75505: DISABLE
// begin enable ;
75506: ENABLE
// game_speed := 7 ;
75507: LD_ADDR_OWVAR 65
75511: PUSH
75512: LD_INT 7
75514: ST_TO_ADDR
// end ;
75515: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
75516: LD_EXP 62
75520: PUSH
75521: LD_EXP 69
75525: AND
75526: IFFALSE 75728
75528: GO 75530
75530: DISABLE
75531: LD_INT 0
75533: PPUSH
75534: PPUSH
75535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
75536: LD_ADDR_VAR 0 3
75540: PUSH
75541: LD_INT 81
75543: PUSH
75544: LD_OWVAR 2
75548: PUSH
75549: EMPTY
75550: LIST
75551: LIST
75552: PUSH
75553: LD_INT 21
75555: PUSH
75556: LD_INT 1
75558: PUSH
75559: EMPTY
75560: LIST
75561: LIST
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: PPUSH
75567: CALL_OW 69
75571: ST_TO_ADDR
// if not tmp then
75572: LD_VAR 0 3
75576: NOT
75577: IFFALSE 75581
// exit ;
75579: GO 75728
// if tmp > 5 then
75581: LD_VAR 0 3
75585: PUSH
75586: LD_INT 5
75588: GREATER
75589: IFFALSE 75601
// k := 5 else
75591: LD_ADDR_VAR 0 2
75595: PUSH
75596: LD_INT 5
75598: ST_TO_ADDR
75599: GO 75611
// k := tmp ;
75601: LD_ADDR_VAR 0 2
75605: PUSH
75606: LD_VAR 0 3
75610: ST_TO_ADDR
// for i := 1 to k do
75611: LD_ADDR_VAR 0 1
75615: PUSH
75616: DOUBLE
75617: LD_INT 1
75619: DEC
75620: ST_TO_ADDR
75621: LD_VAR 0 2
75625: PUSH
75626: FOR_TO
75627: IFFALSE 75726
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
75629: LD_VAR 0 3
75633: PUSH
75634: LD_VAR 0 1
75638: ARRAY
75639: PPUSH
75640: LD_VAR 0 1
75644: PUSH
75645: LD_INT 4
75647: MOD
75648: PUSH
75649: LD_INT 1
75651: PLUS
75652: PPUSH
75653: CALL_OW 259
75657: PUSH
75658: LD_INT 10
75660: LESS
75661: IFFALSE 75724
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
75663: LD_VAR 0 3
75667: PUSH
75668: LD_VAR 0 1
75672: ARRAY
75673: PPUSH
75674: LD_VAR 0 1
75678: PUSH
75679: LD_INT 4
75681: MOD
75682: PUSH
75683: LD_INT 1
75685: PLUS
75686: PPUSH
75687: LD_VAR 0 3
75691: PUSH
75692: LD_VAR 0 1
75696: ARRAY
75697: PPUSH
75698: LD_VAR 0 1
75702: PUSH
75703: LD_INT 4
75705: MOD
75706: PUSH
75707: LD_INT 1
75709: PLUS
75710: PPUSH
75711: CALL_OW 259
75715: PUSH
75716: LD_INT 1
75718: PLUS
75719: PPUSH
75720: CALL_OW 237
75724: GO 75626
75726: POP
75727: POP
// end ;
75728: PPOPN 3
75730: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
75731: LD_EXP 62
75735: PUSH
75736: LD_EXP 70
75740: AND
75741: IFFALSE 75761
75743: GO 75745
75745: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
75746: LD_INT 4
75748: PPUSH
75749: LD_OWVAR 2
75753: PPUSH
75754: LD_INT 0
75756: PPUSH
75757: CALL_OW 324
75761: END
// every 0 0$1 trigger StreamModeActive and sShovel do
75762: LD_EXP 62
75766: PUSH
75767: LD_EXP 99
75771: AND
75772: IFFALSE 75792
75774: GO 75776
75776: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
75777: LD_INT 19
75779: PPUSH
75780: LD_OWVAR 2
75784: PPUSH
75785: LD_INT 0
75787: PPUSH
75788: CALL_OW 324
75792: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
75793: LD_EXP 62
75797: PUSH
75798: LD_EXP 71
75802: AND
75803: IFFALSE 75905
75805: GO 75807
75807: DISABLE
75808: LD_INT 0
75810: PPUSH
75811: PPUSH
// begin enable ;
75812: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
75813: LD_ADDR_VAR 0 2
75817: PUSH
75818: LD_INT 22
75820: PUSH
75821: LD_OWVAR 2
75825: PUSH
75826: EMPTY
75827: LIST
75828: LIST
75829: PUSH
75830: LD_INT 2
75832: PUSH
75833: LD_INT 34
75835: PUSH
75836: LD_INT 11
75838: PUSH
75839: EMPTY
75840: LIST
75841: LIST
75842: PUSH
75843: LD_INT 34
75845: PUSH
75846: LD_INT 30
75848: PUSH
75849: EMPTY
75850: LIST
75851: LIST
75852: PUSH
75853: EMPTY
75854: LIST
75855: LIST
75856: LIST
75857: PUSH
75858: EMPTY
75859: LIST
75860: LIST
75861: PPUSH
75862: CALL_OW 69
75866: ST_TO_ADDR
// if not tmp then
75867: LD_VAR 0 2
75871: NOT
75872: IFFALSE 75876
// exit ;
75874: GO 75905
// for i in tmp do
75876: LD_ADDR_VAR 0 1
75880: PUSH
75881: LD_VAR 0 2
75885: PUSH
75886: FOR_IN
75887: IFFALSE 75903
// begin SetLives ( i , 0 ) ;
75889: LD_VAR 0 1
75893: PPUSH
75894: LD_INT 0
75896: PPUSH
75897: CALL_OW 234
// end ;
75901: GO 75886
75903: POP
75904: POP
// end ;
75905: PPOPN 2
75907: END
// every 0 0$1 trigger StreamModeActive and sBunker do
75908: LD_EXP 62
75912: PUSH
75913: LD_EXP 72
75917: AND
75918: IFFALSE 75938
75920: GO 75922
75922: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
75923: LD_INT 32
75925: PPUSH
75926: LD_OWVAR 2
75930: PPUSH
75931: LD_INT 0
75933: PPUSH
75934: CALL_OW 324
75938: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
75939: LD_EXP 62
75943: PUSH
75944: LD_EXP 73
75948: AND
75949: IFFALSE 76130
75951: GO 75953
75953: DISABLE
75954: LD_INT 0
75956: PPUSH
75957: PPUSH
75958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
75959: LD_ADDR_VAR 0 2
75963: PUSH
75964: LD_INT 22
75966: PUSH
75967: LD_OWVAR 2
75971: PUSH
75972: EMPTY
75973: LIST
75974: LIST
75975: PUSH
75976: LD_INT 33
75978: PUSH
75979: LD_INT 3
75981: PUSH
75982: EMPTY
75983: LIST
75984: LIST
75985: PUSH
75986: EMPTY
75987: LIST
75988: LIST
75989: PPUSH
75990: CALL_OW 69
75994: ST_TO_ADDR
// if not tmp then
75995: LD_VAR 0 2
75999: NOT
76000: IFFALSE 76004
// exit ;
76002: GO 76130
// side := 0 ;
76004: LD_ADDR_VAR 0 3
76008: PUSH
76009: LD_INT 0
76011: ST_TO_ADDR
// for i := 1 to 8 do
76012: LD_ADDR_VAR 0 1
76016: PUSH
76017: DOUBLE
76018: LD_INT 1
76020: DEC
76021: ST_TO_ADDR
76022: LD_INT 8
76024: PUSH
76025: FOR_TO
76026: IFFALSE 76074
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
76028: LD_OWVAR 2
76032: PUSH
76033: LD_VAR 0 1
76037: NONEQUAL
76038: PUSH
76039: LD_OWVAR 2
76043: PPUSH
76044: LD_VAR 0 1
76048: PPUSH
76049: CALL_OW 81
76053: PUSH
76054: LD_INT 2
76056: EQUAL
76057: AND
76058: IFFALSE 76072
// begin side := i ;
76060: LD_ADDR_VAR 0 3
76064: PUSH
76065: LD_VAR 0 1
76069: ST_TO_ADDR
// break ;
76070: GO 76074
// end ;
76072: GO 76025
76074: POP
76075: POP
// if not side then
76076: LD_VAR 0 3
76080: NOT
76081: IFFALSE 76085
// exit ;
76083: GO 76130
// for i := 1 to tmp do
76085: LD_ADDR_VAR 0 1
76089: PUSH
76090: DOUBLE
76091: LD_INT 1
76093: DEC
76094: ST_TO_ADDR
76095: LD_VAR 0 2
76099: PUSH
76100: FOR_TO
76101: IFFALSE 76128
// if Prob ( 60 ) then
76103: LD_INT 60
76105: PPUSH
76106: CALL_OW 13
76110: IFFALSE 76126
// SetSide ( i , side ) ;
76112: LD_VAR 0 1
76116: PPUSH
76117: LD_VAR 0 3
76121: PPUSH
76122: CALL_OW 235
76126: GO 76100
76128: POP
76129: POP
// end ;
76130: PPOPN 3
76132: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
76133: LD_EXP 62
76137: PUSH
76138: LD_EXP 75
76142: AND
76143: IFFALSE 76262
76145: GO 76147
76147: DISABLE
76148: LD_INT 0
76150: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
76151: LD_ADDR_VAR 0 1
76155: PUSH
76156: LD_INT 22
76158: PUSH
76159: LD_OWVAR 2
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: PUSH
76168: LD_INT 21
76170: PUSH
76171: LD_INT 1
76173: PUSH
76174: EMPTY
76175: LIST
76176: LIST
76177: PUSH
76178: LD_INT 3
76180: PUSH
76181: LD_INT 23
76183: PUSH
76184: LD_INT 0
76186: PUSH
76187: EMPTY
76188: LIST
76189: LIST
76190: PUSH
76191: EMPTY
76192: LIST
76193: LIST
76194: PUSH
76195: EMPTY
76196: LIST
76197: LIST
76198: LIST
76199: PPUSH
76200: CALL_OW 69
76204: PUSH
76205: FOR_IN
76206: IFFALSE 76260
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
76208: LD_VAR 0 1
76212: PPUSH
76213: CALL_OW 257
76217: PUSH
76218: LD_INT 1
76220: PUSH
76221: LD_INT 2
76223: PUSH
76224: LD_INT 3
76226: PUSH
76227: LD_INT 4
76229: PUSH
76230: EMPTY
76231: LIST
76232: LIST
76233: LIST
76234: LIST
76235: IN
76236: IFFALSE 76258
// SetClass ( un , rand ( 1 , 4 ) ) ;
76238: LD_VAR 0 1
76242: PPUSH
76243: LD_INT 1
76245: PPUSH
76246: LD_INT 4
76248: PPUSH
76249: CALL_OW 12
76253: PPUSH
76254: CALL_OW 336
76258: GO 76205
76260: POP
76261: POP
// end ;
76262: PPOPN 1
76264: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
76265: LD_EXP 62
76269: PUSH
76270: LD_EXP 74
76274: AND
76275: IFFALSE 76354
76277: GO 76279
76279: DISABLE
76280: LD_INT 0
76282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
76283: LD_ADDR_VAR 0 1
76287: PUSH
76288: LD_INT 22
76290: PUSH
76291: LD_OWVAR 2
76295: PUSH
76296: EMPTY
76297: LIST
76298: LIST
76299: PUSH
76300: LD_INT 21
76302: PUSH
76303: LD_INT 3
76305: PUSH
76306: EMPTY
76307: LIST
76308: LIST
76309: PUSH
76310: EMPTY
76311: LIST
76312: LIST
76313: PPUSH
76314: CALL_OW 69
76318: ST_TO_ADDR
// if not tmp then
76319: LD_VAR 0 1
76323: NOT
76324: IFFALSE 76328
// exit ;
76326: GO 76354
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
76328: LD_VAR 0 1
76332: PUSH
76333: LD_INT 1
76335: PPUSH
76336: LD_VAR 0 1
76340: PPUSH
76341: CALL_OW 12
76345: ARRAY
76346: PPUSH
76347: LD_INT 100
76349: PPUSH
76350: CALL_OW 234
// end ;
76354: PPOPN 1
76356: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
76357: LD_EXP 62
76361: PUSH
76362: LD_EXP 76
76366: AND
76367: IFFALSE 76465
76369: GO 76371
76371: DISABLE
76372: LD_INT 0
76374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76375: LD_ADDR_VAR 0 1
76379: PUSH
76380: LD_INT 22
76382: PUSH
76383: LD_OWVAR 2
76387: PUSH
76388: EMPTY
76389: LIST
76390: LIST
76391: PUSH
76392: LD_INT 21
76394: PUSH
76395: LD_INT 1
76397: PUSH
76398: EMPTY
76399: LIST
76400: LIST
76401: PUSH
76402: EMPTY
76403: LIST
76404: LIST
76405: PPUSH
76406: CALL_OW 69
76410: ST_TO_ADDR
// if not tmp then
76411: LD_VAR 0 1
76415: NOT
76416: IFFALSE 76420
// exit ;
76418: GO 76465
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
76420: LD_VAR 0 1
76424: PUSH
76425: LD_INT 1
76427: PPUSH
76428: LD_VAR 0 1
76432: PPUSH
76433: CALL_OW 12
76437: ARRAY
76438: PPUSH
76439: LD_INT 1
76441: PPUSH
76442: LD_INT 4
76444: PPUSH
76445: CALL_OW 12
76449: PPUSH
76450: LD_INT 3000
76452: PPUSH
76453: LD_INT 9000
76455: PPUSH
76456: CALL_OW 12
76460: PPUSH
76461: CALL_OW 492
// end ;
76465: PPOPN 1
76467: END
// every 0 0$1 trigger StreamModeActive and sDepot do
76468: LD_EXP 62
76472: PUSH
76473: LD_EXP 77
76477: AND
76478: IFFALSE 76498
76480: GO 76482
76482: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
76483: LD_INT 1
76485: PPUSH
76486: LD_OWVAR 2
76490: PPUSH
76491: LD_INT 0
76493: PPUSH
76494: CALL_OW 324
76498: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
76499: LD_EXP 62
76503: PUSH
76504: LD_EXP 78
76508: AND
76509: IFFALSE 76592
76511: GO 76513
76513: DISABLE
76514: LD_INT 0
76516: PPUSH
76517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
76518: LD_ADDR_VAR 0 2
76522: PUSH
76523: LD_INT 22
76525: PUSH
76526: LD_OWVAR 2
76530: PUSH
76531: EMPTY
76532: LIST
76533: LIST
76534: PUSH
76535: LD_INT 21
76537: PUSH
76538: LD_INT 3
76540: PUSH
76541: EMPTY
76542: LIST
76543: LIST
76544: PUSH
76545: EMPTY
76546: LIST
76547: LIST
76548: PPUSH
76549: CALL_OW 69
76553: ST_TO_ADDR
// if not tmp then
76554: LD_VAR 0 2
76558: NOT
76559: IFFALSE 76563
// exit ;
76561: GO 76592
// for i in tmp do
76563: LD_ADDR_VAR 0 1
76567: PUSH
76568: LD_VAR 0 2
76572: PUSH
76573: FOR_IN
76574: IFFALSE 76590
// SetBLevel ( i , 10 ) ;
76576: LD_VAR 0 1
76580: PPUSH
76581: LD_INT 10
76583: PPUSH
76584: CALL_OW 241
76588: GO 76573
76590: POP
76591: POP
// end ;
76592: PPOPN 2
76594: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
76595: LD_EXP 62
76599: PUSH
76600: LD_EXP 79
76604: AND
76605: IFFALSE 76716
76607: GO 76609
76609: DISABLE
76610: LD_INT 0
76612: PPUSH
76613: PPUSH
76614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76615: LD_ADDR_VAR 0 3
76619: PUSH
76620: LD_INT 22
76622: PUSH
76623: LD_OWVAR 2
76627: PUSH
76628: EMPTY
76629: LIST
76630: LIST
76631: PUSH
76632: LD_INT 25
76634: PUSH
76635: LD_INT 1
76637: PUSH
76638: EMPTY
76639: LIST
76640: LIST
76641: PUSH
76642: EMPTY
76643: LIST
76644: LIST
76645: PPUSH
76646: CALL_OW 69
76650: ST_TO_ADDR
// if not tmp then
76651: LD_VAR 0 3
76655: NOT
76656: IFFALSE 76660
// exit ;
76658: GO 76716
// un := tmp [ rand ( 1 , tmp ) ] ;
76660: LD_ADDR_VAR 0 2
76664: PUSH
76665: LD_VAR 0 3
76669: PUSH
76670: LD_INT 1
76672: PPUSH
76673: LD_VAR 0 3
76677: PPUSH
76678: CALL_OW 12
76682: ARRAY
76683: ST_TO_ADDR
// if Crawls ( un ) then
76684: LD_VAR 0 2
76688: PPUSH
76689: CALL_OW 318
76693: IFFALSE 76704
// ComWalk ( un ) ;
76695: LD_VAR 0 2
76699: PPUSH
76700: CALL_OW 138
// SetClass ( un , class_sniper ) ;
76704: LD_VAR 0 2
76708: PPUSH
76709: LD_INT 5
76711: PPUSH
76712: CALL_OW 336
// end ;
76716: PPOPN 3
76718: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
76719: LD_EXP 62
76723: PUSH
76724: LD_EXP 80
76728: AND
76729: PUSH
76730: LD_OWVAR 67
76734: PUSH
76735: LD_INT 4
76737: LESS
76738: AND
76739: IFFALSE 76758
76741: GO 76743
76743: DISABLE
// begin Difficulty := Difficulty + 1 ;
76744: LD_ADDR_OWVAR 67
76748: PUSH
76749: LD_OWVAR 67
76753: PUSH
76754: LD_INT 1
76756: PLUS
76757: ST_TO_ADDR
// end ;
76758: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
76759: LD_EXP 62
76763: PUSH
76764: LD_EXP 81
76768: AND
76769: IFFALSE 76872
76771: GO 76773
76773: DISABLE
76774: LD_INT 0
76776: PPUSH
// begin for i := 1 to 5 do
76777: LD_ADDR_VAR 0 1
76781: PUSH
76782: DOUBLE
76783: LD_INT 1
76785: DEC
76786: ST_TO_ADDR
76787: LD_INT 5
76789: PUSH
76790: FOR_TO
76791: IFFALSE 76870
// begin uc_nation := nation_nature ;
76793: LD_ADDR_OWVAR 21
76797: PUSH
76798: LD_INT 0
76800: ST_TO_ADDR
// uc_side := 0 ;
76801: LD_ADDR_OWVAR 20
76805: PUSH
76806: LD_INT 0
76808: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76809: LD_ADDR_OWVAR 29
76813: PUSH
76814: LD_INT 12
76816: PUSH
76817: LD_INT 12
76819: PUSH
76820: EMPTY
76821: LIST
76822: LIST
76823: ST_TO_ADDR
// hc_agressivity := 20 ;
76824: LD_ADDR_OWVAR 35
76828: PUSH
76829: LD_INT 20
76831: ST_TO_ADDR
// hc_class := class_tiger ;
76832: LD_ADDR_OWVAR 28
76836: PUSH
76837: LD_INT 14
76839: ST_TO_ADDR
// hc_gallery :=  ;
76840: LD_ADDR_OWVAR 33
76844: PUSH
76845: LD_STRING 
76847: ST_TO_ADDR
// hc_name :=  ;
76848: LD_ADDR_OWVAR 26
76852: PUSH
76853: LD_STRING 
76855: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
76856: CALL_OW 44
76860: PPUSH
76861: LD_INT 0
76863: PPUSH
76864: CALL_OW 51
// end ;
76868: GO 76790
76870: POP
76871: POP
// end ;
76872: PPOPN 1
76874: END
// every 0 0$1 trigger StreamModeActive and sBomb do
76875: LD_EXP 62
76879: PUSH
76880: LD_EXP 82
76884: AND
76885: IFFALSE 76894
76887: GO 76889
76889: DISABLE
// StreamSibBomb ;
76890: CALL 76895 0 0
76894: END
// export function StreamSibBomb ; var i , x , y ; begin
76895: LD_INT 0
76897: PPUSH
76898: PPUSH
76899: PPUSH
76900: PPUSH
// result := false ;
76901: LD_ADDR_VAR 0 1
76905: PUSH
76906: LD_INT 0
76908: ST_TO_ADDR
// for i := 1 to 16 do
76909: LD_ADDR_VAR 0 2
76913: PUSH
76914: DOUBLE
76915: LD_INT 1
76917: DEC
76918: ST_TO_ADDR
76919: LD_INT 16
76921: PUSH
76922: FOR_TO
76923: IFFALSE 77122
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
76925: LD_ADDR_VAR 0 3
76929: PUSH
76930: LD_INT 10
76932: PUSH
76933: LD_INT 20
76935: PUSH
76936: LD_INT 30
76938: PUSH
76939: LD_INT 40
76941: PUSH
76942: LD_INT 50
76944: PUSH
76945: LD_INT 60
76947: PUSH
76948: LD_INT 70
76950: PUSH
76951: LD_INT 80
76953: PUSH
76954: LD_INT 90
76956: PUSH
76957: LD_INT 100
76959: PUSH
76960: LD_INT 110
76962: PUSH
76963: LD_INT 120
76965: PUSH
76966: LD_INT 130
76968: PUSH
76969: LD_INT 140
76971: PUSH
76972: LD_INT 150
76974: PUSH
76975: EMPTY
76976: LIST
76977: LIST
76978: LIST
76979: LIST
76980: LIST
76981: LIST
76982: LIST
76983: LIST
76984: LIST
76985: LIST
76986: LIST
76987: LIST
76988: LIST
76989: LIST
76990: LIST
76991: PUSH
76992: LD_INT 1
76994: PPUSH
76995: LD_INT 15
76997: PPUSH
76998: CALL_OW 12
77002: ARRAY
77003: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
77004: LD_ADDR_VAR 0 4
77008: PUSH
77009: LD_INT 10
77011: PUSH
77012: LD_INT 20
77014: PUSH
77015: LD_INT 30
77017: PUSH
77018: LD_INT 40
77020: PUSH
77021: LD_INT 50
77023: PUSH
77024: LD_INT 60
77026: PUSH
77027: LD_INT 70
77029: PUSH
77030: LD_INT 80
77032: PUSH
77033: LD_INT 90
77035: PUSH
77036: LD_INT 100
77038: PUSH
77039: LD_INT 110
77041: PUSH
77042: LD_INT 120
77044: PUSH
77045: LD_INT 130
77047: PUSH
77048: LD_INT 140
77050: PUSH
77051: LD_INT 150
77053: PUSH
77054: EMPTY
77055: LIST
77056: LIST
77057: LIST
77058: LIST
77059: LIST
77060: LIST
77061: LIST
77062: LIST
77063: LIST
77064: LIST
77065: LIST
77066: LIST
77067: LIST
77068: LIST
77069: LIST
77070: PUSH
77071: LD_INT 1
77073: PPUSH
77074: LD_INT 15
77076: PPUSH
77077: CALL_OW 12
77081: ARRAY
77082: ST_TO_ADDR
// if ValidHex ( x , y ) then
77083: LD_VAR 0 3
77087: PPUSH
77088: LD_VAR 0 4
77092: PPUSH
77093: CALL_OW 488
77097: IFFALSE 77120
// begin result := [ x , y ] ;
77099: LD_ADDR_VAR 0 1
77103: PUSH
77104: LD_VAR 0 3
77108: PUSH
77109: LD_VAR 0 4
77113: PUSH
77114: EMPTY
77115: LIST
77116: LIST
77117: ST_TO_ADDR
// break ;
77118: GO 77122
// end ; end ;
77120: GO 76922
77122: POP
77123: POP
// if result then
77124: LD_VAR 0 1
77128: IFFALSE 77188
// begin ToLua ( playSibBomb() ) ;
77130: LD_STRING playSibBomb()
77132: PPUSH
77133: CALL_OW 559
// wait ( 0 0$14 ) ;
77137: LD_INT 490
77139: PPUSH
77140: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
77144: LD_VAR 0 1
77148: PUSH
77149: LD_INT 1
77151: ARRAY
77152: PPUSH
77153: LD_VAR 0 1
77157: PUSH
77158: LD_INT 2
77160: ARRAY
77161: PPUSH
77162: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
77166: LD_VAR 0 1
77170: PUSH
77171: LD_INT 1
77173: ARRAY
77174: PPUSH
77175: LD_VAR 0 1
77179: PUSH
77180: LD_INT 2
77182: ARRAY
77183: PPUSH
77184: CALL_OW 429
// end ; end ;
77188: LD_VAR 0 1
77192: RET
// every 0 0$1 trigger StreamModeActive and sReset do
77193: LD_EXP 62
77197: PUSH
77198: LD_EXP 84
77202: AND
77203: IFFALSE 77215
77205: GO 77207
77207: DISABLE
// YouLost (  ) ;
77208: LD_STRING 
77210: PPUSH
77211: CALL_OW 104
77215: END
// every 0 0$1 trigger StreamModeActive and sFog do
77216: LD_EXP 62
77220: PUSH
77221: LD_EXP 83
77225: AND
77226: IFFALSE 77240
77228: GO 77230
77230: DISABLE
// FogOff ( your_side ) ;
77231: LD_OWVAR 2
77235: PPUSH
77236: CALL_OW 344
77240: END
// every 0 0$1 trigger StreamModeActive and sSun do
77241: LD_EXP 62
77245: PUSH
77246: LD_EXP 85
77250: AND
77251: IFFALSE 77279
77253: GO 77255
77255: DISABLE
// begin solar_recharge_percent := 0 ;
77256: LD_ADDR_OWVAR 79
77260: PUSH
77261: LD_INT 0
77263: ST_TO_ADDR
// wait ( 5 5$00 ) ;
77264: LD_INT 10500
77266: PPUSH
77267: CALL_OW 67
// solar_recharge_percent := 100 ;
77271: LD_ADDR_OWVAR 79
77275: PUSH
77276: LD_INT 100
77278: ST_TO_ADDR
// end ;
77279: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
77280: LD_EXP 62
77284: PUSH
77285: LD_EXP 86
77289: AND
77290: IFFALSE 77529
77292: GO 77294
77294: DISABLE
77295: LD_INT 0
77297: PPUSH
77298: PPUSH
77299: PPUSH
// begin tmp := [ ] ;
77300: LD_ADDR_VAR 0 3
77304: PUSH
77305: EMPTY
77306: ST_TO_ADDR
// for i := 1 to 6 do
77307: LD_ADDR_VAR 0 1
77311: PUSH
77312: DOUBLE
77313: LD_INT 1
77315: DEC
77316: ST_TO_ADDR
77317: LD_INT 6
77319: PUSH
77320: FOR_TO
77321: IFFALSE 77426
// begin uc_nation := nation_nature ;
77323: LD_ADDR_OWVAR 21
77327: PUSH
77328: LD_INT 0
77330: ST_TO_ADDR
// uc_side := 0 ;
77331: LD_ADDR_OWVAR 20
77335: PUSH
77336: LD_INT 0
77338: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
77339: LD_ADDR_OWVAR 29
77343: PUSH
77344: LD_INT 12
77346: PUSH
77347: LD_INT 12
77349: PUSH
77350: EMPTY
77351: LIST
77352: LIST
77353: ST_TO_ADDR
// hc_agressivity := 20 ;
77354: LD_ADDR_OWVAR 35
77358: PUSH
77359: LD_INT 20
77361: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
77362: LD_ADDR_OWVAR 28
77366: PUSH
77367: LD_INT 17
77369: ST_TO_ADDR
// hc_gallery :=  ;
77370: LD_ADDR_OWVAR 33
77374: PUSH
77375: LD_STRING 
77377: ST_TO_ADDR
// hc_name :=  ;
77378: LD_ADDR_OWVAR 26
77382: PUSH
77383: LD_STRING 
77385: ST_TO_ADDR
// un := CreateHuman ;
77386: LD_ADDR_VAR 0 2
77390: PUSH
77391: CALL_OW 44
77395: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
77396: LD_VAR 0 2
77400: PPUSH
77401: LD_INT 1
77403: PPUSH
77404: CALL_OW 51
// tmp := tmp ^ un ;
77408: LD_ADDR_VAR 0 3
77412: PUSH
77413: LD_VAR 0 3
77417: PUSH
77418: LD_VAR 0 2
77422: ADD
77423: ST_TO_ADDR
// end ;
77424: GO 77320
77426: POP
77427: POP
// repeat wait ( 0 0$1 ) ;
77428: LD_INT 35
77430: PPUSH
77431: CALL_OW 67
// for un in tmp do
77435: LD_ADDR_VAR 0 2
77439: PUSH
77440: LD_VAR 0 3
77444: PUSH
77445: FOR_IN
77446: IFFALSE 77520
// begin if IsDead ( un ) then
77448: LD_VAR 0 2
77452: PPUSH
77453: CALL_OW 301
77457: IFFALSE 77477
// begin tmp := tmp diff un ;
77459: LD_ADDR_VAR 0 3
77463: PUSH
77464: LD_VAR 0 3
77468: PUSH
77469: LD_VAR 0 2
77473: DIFF
77474: ST_TO_ADDR
// continue ;
77475: GO 77445
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
77477: LD_VAR 0 2
77481: PPUSH
77482: LD_INT 3
77484: PUSH
77485: LD_INT 22
77487: PUSH
77488: LD_INT 0
77490: PUSH
77491: EMPTY
77492: LIST
77493: LIST
77494: PUSH
77495: EMPTY
77496: LIST
77497: LIST
77498: PPUSH
77499: CALL_OW 69
77503: PPUSH
77504: LD_VAR 0 2
77508: PPUSH
77509: CALL_OW 74
77513: PPUSH
77514: CALL_OW 115
// end ;
77518: GO 77445
77520: POP
77521: POP
// until not tmp ;
77522: LD_VAR 0 3
77526: NOT
77527: IFFALSE 77428
// end ;
77529: PPOPN 3
77531: END
// every 0 0$1 trigger StreamModeActive and sTroll do
77532: LD_EXP 62
77536: PUSH
77537: LD_EXP 87
77541: AND
77542: IFFALSE 77596
77544: GO 77546
77546: DISABLE
// begin ToLua ( displayTroll(); ) ;
77547: LD_STRING displayTroll();
77549: PPUSH
77550: CALL_OW 559
// wait ( 3 3$00 ) ;
77554: LD_INT 6300
77556: PPUSH
77557: CALL_OW 67
// ToLua ( hideTroll(); ) ;
77561: LD_STRING hideTroll();
77563: PPUSH
77564: CALL_OW 559
// wait ( 1 1$00 ) ;
77568: LD_INT 2100
77570: PPUSH
77571: CALL_OW 67
// ToLua ( displayTroll(); ) ;
77575: LD_STRING displayTroll();
77577: PPUSH
77578: CALL_OW 559
// wait ( 1 1$00 ) ;
77582: LD_INT 2100
77584: PPUSH
77585: CALL_OW 67
// ToLua ( hideTroll(); ) ;
77589: LD_STRING hideTroll();
77591: PPUSH
77592: CALL_OW 559
// end ;
77596: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
77597: LD_EXP 62
77601: PUSH
77602: LD_EXP 88
77606: AND
77607: IFFALSE 77670
77609: GO 77611
77611: DISABLE
77612: LD_INT 0
77614: PPUSH
// begin p := 0 ;
77615: LD_ADDR_VAR 0 1
77619: PUSH
77620: LD_INT 0
77622: ST_TO_ADDR
// repeat game_speed := 1 ;
77623: LD_ADDR_OWVAR 65
77627: PUSH
77628: LD_INT 1
77630: ST_TO_ADDR
// wait ( 0 0$1 ) ;
77631: LD_INT 35
77633: PPUSH
77634: CALL_OW 67
// p := p + 1 ;
77638: LD_ADDR_VAR 0 1
77642: PUSH
77643: LD_VAR 0 1
77647: PUSH
77648: LD_INT 1
77650: PLUS
77651: ST_TO_ADDR
// until p >= 60 ;
77652: LD_VAR 0 1
77656: PUSH
77657: LD_INT 60
77659: GREATEREQUAL
77660: IFFALSE 77623
// game_speed := 4 ;
77662: LD_ADDR_OWVAR 65
77666: PUSH
77667: LD_INT 4
77669: ST_TO_ADDR
// end ;
77670: PPOPN 1
77672: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
77673: LD_EXP 62
77677: PUSH
77678: LD_EXP 89
77682: AND
77683: IFFALSE 77829
77685: GO 77687
77687: DISABLE
77688: LD_INT 0
77690: PPUSH
77691: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77692: LD_ADDR_VAR 0 1
77696: PUSH
77697: LD_INT 22
77699: PUSH
77700: LD_OWVAR 2
77704: PUSH
77705: EMPTY
77706: LIST
77707: LIST
77708: PUSH
77709: LD_INT 2
77711: PUSH
77712: LD_INT 30
77714: PUSH
77715: LD_INT 0
77717: PUSH
77718: EMPTY
77719: LIST
77720: LIST
77721: PUSH
77722: LD_INT 30
77724: PUSH
77725: LD_INT 1
77727: PUSH
77728: EMPTY
77729: LIST
77730: LIST
77731: PUSH
77732: EMPTY
77733: LIST
77734: LIST
77735: LIST
77736: PUSH
77737: EMPTY
77738: LIST
77739: LIST
77740: PPUSH
77741: CALL_OW 69
77745: ST_TO_ADDR
// if not depot then
77746: LD_VAR 0 1
77750: NOT
77751: IFFALSE 77755
// exit ;
77753: GO 77829
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
77755: LD_ADDR_VAR 0 2
77759: PUSH
77760: LD_VAR 0 1
77764: PUSH
77765: LD_INT 1
77767: PPUSH
77768: LD_VAR 0 1
77772: PPUSH
77773: CALL_OW 12
77777: ARRAY
77778: PPUSH
77779: CALL_OW 274
77783: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
77784: LD_VAR 0 2
77788: PPUSH
77789: LD_INT 1
77791: PPUSH
77792: LD_INT 0
77794: PPUSH
77795: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
77799: LD_VAR 0 2
77803: PPUSH
77804: LD_INT 2
77806: PPUSH
77807: LD_INT 0
77809: PPUSH
77810: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
77814: LD_VAR 0 2
77818: PPUSH
77819: LD_INT 3
77821: PPUSH
77822: LD_INT 0
77824: PPUSH
77825: CALL_OW 277
// end ;
77829: PPOPN 2
77831: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
77832: LD_EXP 62
77836: PUSH
77837: LD_EXP 90
77841: AND
77842: IFFALSE 77939
77844: GO 77846
77846: DISABLE
77847: LD_INT 0
77849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77850: LD_ADDR_VAR 0 1
77854: PUSH
77855: LD_INT 22
77857: PUSH
77858: LD_OWVAR 2
77862: PUSH
77863: EMPTY
77864: LIST
77865: LIST
77866: PUSH
77867: LD_INT 21
77869: PUSH
77870: LD_INT 1
77872: PUSH
77873: EMPTY
77874: LIST
77875: LIST
77876: PUSH
77877: LD_INT 3
77879: PUSH
77880: LD_INT 23
77882: PUSH
77883: LD_INT 0
77885: PUSH
77886: EMPTY
77887: LIST
77888: LIST
77889: PUSH
77890: EMPTY
77891: LIST
77892: LIST
77893: PUSH
77894: EMPTY
77895: LIST
77896: LIST
77897: LIST
77898: PPUSH
77899: CALL_OW 69
77903: ST_TO_ADDR
// if not tmp then
77904: LD_VAR 0 1
77908: NOT
77909: IFFALSE 77913
// exit ;
77911: GO 77939
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
77913: LD_VAR 0 1
77917: PUSH
77918: LD_INT 1
77920: PPUSH
77921: LD_VAR 0 1
77925: PPUSH
77926: CALL_OW 12
77930: ARRAY
77931: PPUSH
77932: LD_INT 200
77934: PPUSH
77935: CALL_OW 234
// end ;
77939: PPOPN 1
77941: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
77942: LD_EXP 62
77946: PUSH
77947: LD_EXP 91
77951: AND
77952: IFFALSE 78031
77954: GO 77956
77956: DISABLE
77957: LD_INT 0
77959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
77960: LD_ADDR_VAR 0 1
77964: PUSH
77965: LD_INT 22
77967: PUSH
77968: LD_OWVAR 2
77972: PUSH
77973: EMPTY
77974: LIST
77975: LIST
77976: PUSH
77977: LD_INT 21
77979: PUSH
77980: LD_INT 2
77982: PUSH
77983: EMPTY
77984: LIST
77985: LIST
77986: PUSH
77987: EMPTY
77988: LIST
77989: LIST
77990: PPUSH
77991: CALL_OW 69
77995: ST_TO_ADDR
// if not tmp then
77996: LD_VAR 0 1
78000: NOT
78001: IFFALSE 78005
// exit ;
78003: GO 78031
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
78005: LD_VAR 0 1
78009: PUSH
78010: LD_INT 1
78012: PPUSH
78013: LD_VAR 0 1
78017: PPUSH
78018: CALL_OW 12
78022: ARRAY
78023: PPUSH
78024: LD_INT 60
78026: PPUSH
78027: CALL_OW 234
// end ;
78031: PPOPN 1
78033: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
78034: LD_EXP 62
78038: PUSH
78039: LD_EXP 92
78043: AND
78044: IFFALSE 78143
78046: GO 78048
78048: DISABLE
78049: LD_INT 0
78051: PPUSH
78052: PPUSH
// begin enable ;
78053: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
78054: LD_ADDR_VAR 0 1
78058: PUSH
78059: LD_INT 22
78061: PUSH
78062: LD_OWVAR 2
78066: PUSH
78067: EMPTY
78068: LIST
78069: LIST
78070: PUSH
78071: LD_INT 61
78073: PUSH
78074: EMPTY
78075: LIST
78076: PUSH
78077: LD_INT 33
78079: PUSH
78080: LD_INT 2
78082: PUSH
78083: EMPTY
78084: LIST
78085: LIST
78086: PUSH
78087: EMPTY
78088: LIST
78089: LIST
78090: LIST
78091: PPUSH
78092: CALL_OW 69
78096: ST_TO_ADDR
// if not tmp then
78097: LD_VAR 0 1
78101: NOT
78102: IFFALSE 78106
// exit ;
78104: GO 78143
// for i in tmp do
78106: LD_ADDR_VAR 0 2
78110: PUSH
78111: LD_VAR 0 1
78115: PUSH
78116: FOR_IN
78117: IFFALSE 78141
// if IsControledBy ( i ) then
78119: LD_VAR 0 2
78123: PPUSH
78124: CALL_OW 312
78128: IFFALSE 78139
// ComUnlink ( i ) ;
78130: LD_VAR 0 2
78134: PPUSH
78135: CALL_OW 136
78139: GO 78116
78141: POP
78142: POP
// end ;
78143: PPOPN 2
78145: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
78146: LD_EXP 62
78150: PUSH
78151: LD_EXP 93
78155: AND
78156: IFFALSE 78296
78158: GO 78160
78160: DISABLE
78161: LD_INT 0
78163: PPUSH
78164: PPUSH
// begin ToLua ( displayPowell(); ) ;
78165: LD_STRING displayPowell();
78167: PPUSH
78168: CALL_OW 559
// uc_side := 0 ;
78172: LD_ADDR_OWVAR 20
78176: PUSH
78177: LD_INT 0
78179: ST_TO_ADDR
// uc_nation := 2 ;
78180: LD_ADDR_OWVAR 21
78184: PUSH
78185: LD_INT 2
78187: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
78188: LD_ADDR_OWVAR 37
78192: PUSH
78193: LD_INT 14
78195: ST_TO_ADDR
// vc_engine := engine_siberite ;
78196: LD_ADDR_OWVAR 39
78200: PUSH
78201: LD_INT 3
78203: ST_TO_ADDR
// vc_control := control_apeman ;
78204: LD_ADDR_OWVAR 38
78208: PUSH
78209: LD_INT 5
78211: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
78212: LD_ADDR_OWVAR 40
78216: PUSH
78217: LD_INT 29
78219: ST_TO_ADDR
// un := CreateVehicle ;
78220: LD_ADDR_VAR 0 2
78224: PUSH
78225: CALL_OW 45
78229: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78230: LD_VAR 0 2
78234: PPUSH
78235: LD_INT 1
78237: PPUSH
78238: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
78242: LD_INT 35
78244: PPUSH
78245: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
78249: LD_VAR 0 2
78253: PPUSH
78254: LD_INT 22
78256: PUSH
78257: LD_OWVAR 2
78261: PUSH
78262: EMPTY
78263: LIST
78264: LIST
78265: PPUSH
78266: CALL_OW 69
78270: PPUSH
78271: LD_VAR 0 2
78275: PPUSH
78276: CALL_OW 74
78280: PPUSH
78281: CALL_OW 115
// until IsDead ( un ) ;
78285: LD_VAR 0 2
78289: PPUSH
78290: CALL_OW 301
78294: IFFALSE 78242
// end ;
78296: PPOPN 2
78298: END
// every 0 0$1 trigger StreamModeActive and sStu do
78299: LD_EXP 62
78303: PUSH
78304: LD_EXP 101
78308: AND
78309: IFFALSE 78325
78311: GO 78313
78313: DISABLE
// begin ToLua ( displayStucuk(); ) ;
78314: LD_STRING displayStucuk();
78316: PPUSH
78317: CALL_OW 559
// ResetFog ;
78321: CALL_OW 335
// end ;
78325: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
78326: LD_EXP 62
78330: PUSH
78331: LD_EXP 94
78335: AND
78336: IFFALSE 78477
78338: GO 78340
78340: DISABLE
78341: LD_INT 0
78343: PPUSH
78344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
78345: LD_ADDR_VAR 0 2
78349: PUSH
78350: LD_INT 22
78352: PUSH
78353: LD_OWVAR 2
78357: PUSH
78358: EMPTY
78359: LIST
78360: LIST
78361: PUSH
78362: LD_INT 21
78364: PUSH
78365: LD_INT 1
78367: PUSH
78368: EMPTY
78369: LIST
78370: LIST
78371: PUSH
78372: EMPTY
78373: LIST
78374: LIST
78375: PPUSH
78376: CALL_OW 69
78380: ST_TO_ADDR
// if not tmp then
78381: LD_VAR 0 2
78385: NOT
78386: IFFALSE 78390
// exit ;
78388: GO 78477
// un := tmp [ rand ( 1 , tmp ) ] ;
78390: LD_ADDR_VAR 0 1
78394: PUSH
78395: LD_VAR 0 2
78399: PUSH
78400: LD_INT 1
78402: PPUSH
78403: LD_VAR 0 2
78407: PPUSH
78408: CALL_OW 12
78412: ARRAY
78413: ST_TO_ADDR
// SetSide ( un , 0 ) ;
78414: LD_VAR 0 1
78418: PPUSH
78419: LD_INT 0
78421: PPUSH
78422: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
78426: LD_VAR 0 1
78430: PPUSH
78431: LD_OWVAR 3
78435: PUSH
78436: LD_VAR 0 1
78440: DIFF
78441: PPUSH
78442: LD_VAR 0 1
78446: PPUSH
78447: CALL_OW 74
78451: PPUSH
78452: CALL_OW 115
// wait ( 0 0$20 ) ;
78456: LD_INT 700
78458: PPUSH
78459: CALL_OW 67
// SetSide ( un , your_side ) ;
78463: LD_VAR 0 1
78467: PPUSH
78468: LD_OWVAR 2
78472: PPUSH
78473: CALL_OW 235
// end ;
78477: PPOPN 2
78479: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
78480: LD_EXP 62
78484: PUSH
78485: LD_EXP 95
78489: AND
78490: IFFALSE 78596
78492: GO 78494
78494: DISABLE
78495: LD_INT 0
78497: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
78498: LD_ADDR_VAR 0 1
78502: PUSH
78503: LD_INT 22
78505: PUSH
78506: LD_OWVAR 2
78510: PUSH
78511: EMPTY
78512: LIST
78513: LIST
78514: PUSH
78515: LD_INT 2
78517: PUSH
78518: LD_INT 30
78520: PUSH
78521: LD_INT 0
78523: PUSH
78524: EMPTY
78525: LIST
78526: LIST
78527: PUSH
78528: LD_INT 30
78530: PUSH
78531: LD_INT 1
78533: PUSH
78534: EMPTY
78535: LIST
78536: LIST
78537: PUSH
78538: EMPTY
78539: LIST
78540: LIST
78541: LIST
78542: PUSH
78543: EMPTY
78544: LIST
78545: LIST
78546: PPUSH
78547: CALL_OW 69
78551: ST_TO_ADDR
// if not depot then
78552: LD_VAR 0 1
78556: NOT
78557: IFFALSE 78561
// exit ;
78559: GO 78596
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
78561: LD_VAR 0 1
78565: PUSH
78566: LD_INT 1
78568: ARRAY
78569: PPUSH
78570: CALL_OW 250
78574: PPUSH
78575: LD_VAR 0 1
78579: PUSH
78580: LD_INT 1
78582: ARRAY
78583: PPUSH
78584: CALL_OW 251
78588: PPUSH
78589: LD_INT 70
78591: PPUSH
78592: CALL_OW 495
// end ;
78596: PPOPN 1
78598: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
78599: LD_EXP 62
78603: PUSH
78604: LD_EXP 96
78608: AND
78609: IFFALSE 78820
78611: GO 78613
78613: DISABLE
78614: LD_INT 0
78616: PPUSH
78617: PPUSH
78618: PPUSH
78619: PPUSH
78620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
78621: LD_ADDR_VAR 0 5
78625: PUSH
78626: LD_INT 22
78628: PUSH
78629: LD_OWVAR 2
78633: PUSH
78634: EMPTY
78635: LIST
78636: LIST
78637: PUSH
78638: LD_INT 21
78640: PUSH
78641: LD_INT 1
78643: PUSH
78644: EMPTY
78645: LIST
78646: LIST
78647: PUSH
78648: EMPTY
78649: LIST
78650: LIST
78651: PPUSH
78652: CALL_OW 69
78656: ST_TO_ADDR
// if not tmp then
78657: LD_VAR 0 5
78661: NOT
78662: IFFALSE 78666
// exit ;
78664: GO 78820
// for i in tmp do
78666: LD_ADDR_VAR 0 1
78670: PUSH
78671: LD_VAR 0 5
78675: PUSH
78676: FOR_IN
78677: IFFALSE 78818
// begin d := rand ( 0 , 5 ) ;
78679: LD_ADDR_VAR 0 4
78683: PUSH
78684: LD_INT 0
78686: PPUSH
78687: LD_INT 5
78689: PPUSH
78690: CALL_OW 12
78694: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
78695: LD_ADDR_VAR 0 2
78699: PUSH
78700: LD_VAR 0 1
78704: PPUSH
78705: CALL_OW 250
78709: PPUSH
78710: LD_VAR 0 4
78714: PPUSH
78715: LD_INT 3
78717: PPUSH
78718: LD_INT 12
78720: PPUSH
78721: CALL_OW 12
78725: PPUSH
78726: CALL_OW 272
78730: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
78731: LD_ADDR_VAR 0 3
78735: PUSH
78736: LD_VAR 0 1
78740: PPUSH
78741: CALL_OW 251
78745: PPUSH
78746: LD_VAR 0 4
78750: PPUSH
78751: LD_INT 3
78753: PPUSH
78754: LD_INT 12
78756: PPUSH
78757: CALL_OW 12
78761: PPUSH
78762: CALL_OW 273
78766: ST_TO_ADDR
// if ValidHex ( x , y ) then
78767: LD_VAR 0 2
78771: PPUSH
78772: LD_VAR 0 3
78776: PPUSH
78777: CALL_OW 488
78781: IFFALSE 78816
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
78783: LD_VAR 0 1
78787: PPUSH
78788: LD_VAR 0 2
78792: PPUSH
78793: LD_VAR 0 3
78797: PPUSH
78798: LD_INT 3
78800: PPUSH
78801: LD_INT 6
78803: PPUSH
78804: CALL_OW 12
78808: PPUSH
78809: LD_INT 1
78811: PPUSH
78812: CALL_OW 483
// end ;
78816: GO 78676
78818: POP
78819: POP
// end ;
78820: PPOPN 5
78822: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
78823: LD_EXP 62
78827: PUSH
78828: LD_EXP 97
78832: AND
78833: IFFALSE 78927
78835: GO 78837
78837: DISABLE
78838: LD_INT 0
78840: PPUSH
78841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
78842: LD_ADDR_VAR 0 2
78846: PUSH
78847: LD_INT 22
78849: PUSH
78850: LD_OWVAR 2
78854: PUSH
78855: EMPTY
78856: LIST
78857: LIST
78858: PUSH
78859: LD_INT 32
78861: PUSH
78862: LD_INT 1
78864: PUSH
78865: EMPTY
78866: LIST
78867: LIST
78868: PUSH
78869: LD_INT 21
78871: PUSH
78872: LD_INT 2
78874: PUSH
78875: EMPTY
78876: LIST
78877: LIST
78878: PUSH
78879: EMPTY
78880: LIST
78881: LIST
78882: LIST
78883: PPUSH
78884: CALL_OW 69
78888: ST_TO_ADDR
// if not tmp then
78889: LD_VAR 0 2
78893: NOT
78894: IFFALSE 78898
// exit ;
78896: GO 78927
// for i in tmp do
78898: LD_ADDR_VAR 0 1
78902: PUSH
78903: LD_VAR 0 2
78907: PUSH
78908: FOR_IN
78909: IFFALSE 78925
// SetFuel ( i , 0 ) ;
78911: LD_VAR 0 1
78915: PPUSH
78916: LD_INT 0
78918: PPUSH
78919: CALL_OW 240
78923: GO 78908
78925: POP
78926: POP
// end ;
78927: PPOPN 2
78929: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
78930: LD_EXP 62
78934: PUSH
78935: LD_EXP 98
78939: AND
78940: IFFALSE 79006
78942: GO 78944
78944: DISABLE
78945: LD_INT 0
78947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
78948: LD_ADDR_VAR 0 1
78952: PUSH
78953: LD_INT 22
78955: PUSH
78956: LD_OWVAR 2
78960: PUSH
78961: EMPTY
78962: LIST
78963: LIST
78964: PUSH
78965: LD_INT 30
78967: PUSH
78968: LD_INT 29
78970: PUSH
78971: EMPTY
78972: LIST
78973: LIST
78974: PUSH
78975: EMPTY
78976: LIST
78977: LIST
78978: PPUSH
78979: CALL_OW 69
78983: ST_TO_ADDR
// if not tmp then
78984: LD_VAR 0 1
78988: NOT
78989: IFFALSE 78993
// exit ;
78991: GO 79006
// DestroyUnit ( tmp [ 1 ] ) ;
78993: LD_VAR 0 1
78997: PUSH
78998: LD_INT 1
79000: ARRAY
79001: PPUSH
79002: CALL_OW 65
// end ;
79006: PPOPN 1
79008: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
79009: LD_EXP 62
79013: PUSH
79014: LD_EXP 100
79018: AND
79019: IFFALSE 79148
79021: GO 79023
79023: DISABLE
79024: LD_INT 0
79026: PPUSH
// begin uc_side := 0 ;
79027: LD_ADDR_OWVAR 20
79031: PUSH
79032: LD_INT 0
79034: ST_TO_ADDR
// uc_nation := nation_arabian ;
79035: LD_ADDR_OWVAR 21
79039: PUSH
79040: LD_INT 2
79042: ST_TO_ADDR
// hc_gallery :=  ;
79043: LD_ADDR_OWVAR 33
79047: PUSH
79048: LD_STRING 
79050: ST_TO_ADDR
// hc_name :=  ;
79051: LD_ADDR_OWVAR 26
79055: PUSH
79056: LD_STRING 
79058: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
79059: LD_INT 1
79061: PPUSH
79062: LD_INT 11
79064: PPUSH
79065: LD_INT 10
79067: PPUSH
79068: CALL_OW 380
// un := CreateHuman ;
79072: LD_ADDR_VAR 0 1
79076: PUSH
79077: CALL_OW 44
79081: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79082: LD_VAR 0 1
79086: PPUSH
79087: LD_INT 1
79089: PPUSH
79090: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
79094: LD_INT 35
79096: PPUSH
79097: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
79101: LD_VAR 0 1
79105: PPUSH
79106: LD_INT 22
79108: PUSH
79109: LD_OWVAR 2
79113: PUSH
79114: EMPTY
79115: LIST
79116: LIST
79117: PPUSH
79118: CALL_OW 69
79122: PPUSH
79123: LD_VAR 0 1
79127: PPUSH
79128: CALL_OW 74
79132: PPUSH
79133: CALL_OW 115
// until IsDead ( un ) ;
79137: LD_VAR 0 1
79141: PPUSH
79142: CALL_OW 301
79146: IFFALSE 79094
// end ;
79148: PPOPN 1
79150: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
79151: LD_EXP 62
79155: PUSH
79156: LD_EXP 102
79160: AND
79161: IFFALSE 79173
79163: GO 79165
79165: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
79166: LD_STRING earthquake(getX(game), 0, 32)
79168: PPUSH
79169: CALL_OW 559
79173: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
79174: LD_EXP 62
79178: PUSH
79179: LD_EXP 103
79183: AND
79184: IFFALSE 79275
79186: GO 79188
79188: DISABLE
79189: LD_INT 0
79191: PPUSH
// begin enable ;
79192: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
79193: LD_ADDR_VAR 0 1
79197: PUSH
79198: LD_INT 22
79200: PUSH
79201: LD_OWVAR 2
79205: PUSH
79206: EMPTY
79207: LIST
79208: LIST
79209: PUSH
79210: LD_INT 21
79212: PUSH
79213: LD_INT 2
79215: PUSH
79216: EMPTY
79217: LIST
79218: LIST
79219: PUSH
79220: LD_INT 33
79222: PUSH
79223: LD_INT 3
79225: PUSH
79226: EMPTY
79227: LIST
79228: LIST
79229: PUSH
79230: EMPTY
79231: LIST
79232: LIST
79233: LIST
79234: PPUSH
79235: CALL_OW 69
79239: ST_TO_ADDR
// if not tmp then
79240: LD_VAR 0 1
79244: NOT
79245: IFFALSE 79249
// exit ;
79247: GO 79275
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
79249: LD_VAR 0 1
79253: PUSH
79254: LD_INT 1
79256: PPUSH
79257: LD_VAR 0 1
79261: PPUSH
79262: CALL_OW 12
79266: ARRAY
79267: PPUSH
79268: LD_INT 1
79270: PPUSH
79271: CALL_OW 234
// end ;
79275: PPOPN 1
79277: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
79278: LD_EXP 62
79282: PUSH
79283: LD_EXP 104
79287: AND
79288: IFFALSE 79429
79290: GO 79292
79292: DISABLE
79293: LD_INT 0
79295: PPUSH
79296: PPUSH
79297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79298: LD_ADDR_VAR 0 3
79302: PUSH
79303: LD_INT 22
79305: PUSH
79306: LD_OWVAR 2
79310: PUSH
79311: EMPTY
79312: LIST
79313: LIST
79314: PUSH
79315: LD_INT 25
79317: PUSH
79318: LD_INT 1
79320: PUSH
79321: EMPTY
79322: LIST
79323: LIST
79324: PUSH
79325: EMPTY
79326: LIST
79327: LIST
79328: PPUSH
79329: CALL_OW 69
79333: ST_TO_ADDR
// if not tmp then
79334: LD_VAR 0 3
79338: NOT
79339: IFFALSE 79343
// exit ;
79341: GO 79429
// un := tmp [ rand ( 1 , tmp ) ] ;
79343: LD_ADDR_VAR 0 2
79347: PUSH
79348: LD_VAR 0 3
79352: PUSH
79353: LD_INT 1
79355: PPUSH
79356: LD_VAR 0 3
79360: PPUSH
79361: CALL_OW 12
79365: ARRAY
79366: ST_TO_ADDR
// if Crawls ( un ) then
79367: LD_VAR 0 2
79371: PPUSH
79372: CALL_OW 318
79376: IFFALSE 79387
// ComWalk ( un ) ;
79378: LD_VAR 0 2
79382: PPUSH
79383: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
79387: LD_VAR 0 2
79391: PPUSH
79392: LD_INT 9
79394: PPUSH
79395: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
79399: LD_INT 28
79401: PPUSH
79402: LD_OWVAR 2
79406: PPUSH
79407: LD_INT 2
79409: PPUSH
79410: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
79414: LD_INT 29
79416: PPUSH
79417: LD_OWVAR 2
79421: PPUSH
79422: LD_INT 2
79424: PPUSH
79425: CALL_OW 322
// end ;
79429: PPOPN 3
79431: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
79432: LD_EXP 62
79436: PUSH
79437: LD_EXP 105
79441: AND
79442: IFFALSE 79553
79444: GO 79446
79446: DISABLE
79447: LD_INT 0
79449: PPUSH
79450: PPUSH
79451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79452: LD_ADDR_VAR 0 3
79456: PUSH
79457: LD_INT 22
79459: PUSH
79460: LD_OWVAR 2
79464: PUSH
79465: EMPTY
79466: LIST
79467: LIST
79468: PUSH
79469: LD_INT 25
79471: PUSH
79472: LD_INT 1
79474: PUSH
79475: EMPTY
79476: LIST
79477: LIST
79478: PUSH
79479: EMPTY
79480: LIST
79481: LIST
79482: PPUSH
79483: CALL_OW 69
79487: ST_TO_ADDR
// if not tmp then
79488: LD_VAR 0 3
79492: NOT
79493: IFFALSE 79497
// exit ;
79495: GO 79553
// un := tmp [ rand ( 1 , tmp ) ] ;
79497: LD_ADDR_VAR 0 2
79501: PUSH
79502: LD_VAR 0 3
79506: PUSH
79507: LD_INT 1
79509: PPUSH
79510: LD_VAR 0 3
79514: PPUSH
79515: CALL_OW 12
79519: ARRAY
79520: ST_TO_ADDR
// if Crawls ( un ) then
79521: LD_VAR 0 2
79525: PPUSH
79526: CALL_OW 318
79530: IFFALSE 79541
// ComWalk ( un ) ;
79532: LD_VAR 0 2
79536: PPUSH
79537: CALL_OW 138
// SetClass ( un , class_mortar ) ;
79541: LD_VAR 0 2
79545: PPUSH
79546: LD_INT 8
79548: PPUSH
79549: CALL_OW 336
// end ;
79553: PPOPN 3
79555: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
79556: LD_EXP 62
79560: PUSH
79561: LD_EXP 106
79565: AND
79566: IFFALSE 79710
79568: GO 79570
79570: DISABLE
79571: LD_INT 0
79573: PPUSH
79574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
79575: LD_ADDR_VAR 0 2
79579: PUSH
79580: LD_INT 22
79582: PUSH
79583: LD_OWVAR 2
79587: PUSH
79588: EMPTY
79589: LIST
79590: LIST
79591: PUSH
79592: LD_INT 21
79594: PUSH
79595: LD_INT 2
79597: PUSH
79598: EMPTY
79599: LIST
79600: LIST
79601: PUSH
79602: LD_INT 2
79604: PUSH
79605: LD_INT 34
79607: PUSH
79608: LD_INT 12
79610: PUSH
79611: EMPTY
79612: LIST
79613: LIST
79614: PUSH
79615: LD_INT 34
79617: PUSH
79618: LD_INT 51
79620: PUSH
79621: EMPTY
79622: LIST
79623: LIST
79624: PUSH
79625: LD_INT 34
79627: PUSH
79628: LD_INT 32
79630: PUSH
79631: EMPTY
79632: LIST
79633: LIST
79634: PUSH
79635: EMPTY
79636: LIST
79637: LIST
79638: LIST
79639: LIST
79640: PUSH
79641: EMPTY
79642: LIST
79643: LIST
79644: LIST
79645: PPUSH
79646: CALL_OW 69
79650: ST_TO_ADDR
// if not tmp then
79651: LD_VAR 0 2
79655: NOT
79656: IFFALSE 79660
// exit ;
79658: GO 79710
// for i in tmp do
79660: LD_ADDR_VAR 0 1
79664: PUSH
79665: LD_VAR 0 2
79669: PUSH
79670: FOR_IN
79671: IFFALSE 79708
// if GetCargo ( i , mat_artifact ) = 0 then
79673: LD_VAR 0 1
79677: PPUSH
79678: LD_INT 4
79680: PPUSH
79681: CALL_OW 289
79685: PUSH
79686: LD_INT 0
79688: EQUAL
79689: IFFALSE 79706
// SetCargo ( i , mat_siberit , 100 ) ;
79691: LD_VAR 0 1
79695: PPUSH
79696: LD_INT 3
79698: PPUSH
79699: LD_INT 100
79701: PPUSH
79702: CALL_OW 290
79706: GO 79670
79708: POP
79709: POP
// end ;
79710: PPOPN 2
79712: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
79713: LD_EXP 62
79717: PUSH
79718: LD_EXP 107
79722: AND
79723: IFFALSE 79906
79725: GO 79727
79727: DISABLE
79728: LD_INT 0
79730: PPUSH
79731: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
79732: LD_ADDR_VAR 0 2
79736: PUSH
79737: LD_INT 22
79739: PUSH
79740: LD_OWVAR 2
79744: PUSH
79745: EMPTY
79746: LIST
79747: LIST
79748: PPUSH
79749: CALL_OW 69
79753: ST_TO_ADDR
// if not tmp then
79754: LD_VAR 0 2
79758: NOT
79759: IFFALSE 79763
// exit ;
79761: GO 79906
// for i := 1 to 2 do
79763: LD_ADDR_VAR 0 1
79767: PUSH
79768: DOUBLE
79769: LD_INT 1
79771: DEC
79772: ST_TO_ADDR
79773: LD_INT 2
79775: PUSH
79776: FOR_TO
79777: IFFALSE 79904
// begin uc_side := your_side ;
79779: LD_ADDR_OWVAR 20
79783: PUSH
79784: LD_OWVAR 2
79788: ST_TO_ADDR
// uc_nation := nation_american ;
79789: LD_ADDR_OWVAR 21
79793: PUSH
79794: LD_INT 1
79796: ST_TO_ADDR
// vc_chassis := us_morphling ;
79797: LD_ADDR_OWVAR 37
79801: PUSH
79802: LD_INT 5
79804: ST_TO_ADDR
// vc_engine := engine_siberite ;
79805: LD_ADDR_OWVAR 39
79809: PUSH
79810: LD_INT 3
79812: ST_TO_ADDR
// vc_control := control_computer ;
79813: LD_ADDR_OWVAR 38
79817: PUSH
79818: LD_INT 3
79820: ST_TO_ADDR
// vc_weapon := us_double_laser ;
79821: LD_ADDR_OWVAR 40
79825: PUSH
79826: LD_INT 10
79828: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
79829: LD_VAR 0 2
79833: PUSH
79834: LD_INT 1
79836: ARRAY
79837: PPUSH
79838: CALL_OW 310
79842: NOT
79843: IFFALSE 79890
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
79845: CALL_OW 45
79849: PPUSH
79850: LD_VAR 0 2
79854: PUSH
79855: LD_INT 1
79857: ARRAY
79858: PPUSH
79859: CALL_OW 250
79863: PPUSH
79864: LD_VAR 0 2
79868: PUSH
79869: LD_INT 1
79871: ARRAY
79872: PPUSH
79873: CALL_OW 251
79877: PPUSH
79878: LD_INT 12
79880: PPUSH
79881: LD_INT 1
79883: PPUSH
79884: CALL_OW 50
79888: GO 79902
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
79890: CALL_OW 45
79894: PPUSH
79895: LD_INT 1
79897: PPUSH
79898: CALL_OW 51
// end ;
79902: GO 79776
79904: POP
79905: POP
// end ;
79906: PPOPN 2
79908: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
79909: LD_EXP 62
79913: PUSH
79914: LD_EXP 108
79918: AND
79919: IFFALSE 80141
79921: GO 79923
79923: DISABLE
79924: LD_INT 0
79926: PPUSH
79927: PPUSH
79928: PPUSH
79929: PPUSH
79930: PPUSH
79931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79932: LD_ADDR_VAR 0 6
79936: PUSH
79937: LD_INT 22
79939: PUSH
79940: LD_OWVAR 2
79944: PUSH
79945: EMPTY
79946: LIST
79947: LIST
79948: PUSH
79949: LD_INT 21
79951: PUSH
79952: LD_INT 1
79954: PUSH
79955: EMPTY
79956: LIST
79957: LIST
79958: PUSH
79959: LD_INT 3
79961: PUSH
79962: LD_INT 23
79964: PUSH
79965: LD_INT 0
79967: PUSH
79968: EMPTY
79969: LIST
79970: LIST
79971: PUSH
79972: EMPTY
79973: LIST
79974: LIST
79975: PUSH
79976: EMPTY
79977: LIST
79978: LIST
79979: LIST
79980: PPUSH
79981: CALL_OW 69
79985: ST_TO_ADDR
// if not tmp then
79986: LD_VAR 0 6
79990: NOT
79991: IFFALSE 79995
// exit ;
79993: GO 80141
// s1 := rand ( 1 , 4 ) ;
79995: LD_ADDR_VAR 0 2
79999: PUSH
80000: LD_INT 1
80002: PPUSH
80003: LD_INT 4
80005: PPUSH
80006: CALL_OW 12
80010: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
80011: LD_ADDR_VAR 0 4
80015: PUSH
80016: LD_VAR 0 6
80020: PUSH
80021: LD_INT 1
80023: ARRAY
80024: PPUSH
80025: LD_VAR 0 2
80029: PPUSH
80030: CALL_OW 259
80034: ST_TO_ADDR
// if s1 = 1 then
80035: LD_VAR 0 2
80039: PUSH
80040: LD_INT 1
80042: EQUAL
80043: IFFALSE 80063
// s2 := rand ( 2 , 4 ) else
80045: LD_ADDR_VAR 0 3
80049: PUSH
80050: LD_INT 2
80052: PPUSH
80053: LD_INT 4
80055: PPUSH
80056: CALL_OW 12
80060: ST_TO_ADDR
80061: GO 80071
// s2 := 1 ;
80063: LD_ADDR_VAR 0 3
80067: PUSH
80068: LD_INT 1
80070: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
80071: LD_ADDR_VAR 0 5
80075: PUSH
80076: LD_VAR 0 6
80080: PUSH
80081: LD_INT 1
80083: ARRAY
80084: PPUSH
80085: LD_VAR 0 3
80089: PPUSH
80090: CALL_OW 259
80094: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
80095: LD_VAR 0 6
80099: PUSH
80100: LD_INT 1
80102: ARRAY
80103: PPUSH
80104: LD_VAR 0 2
80108: PPUSH
80109: LD_VAR 0 5
80113: PPUSH
80114: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
80118: LD_VAR 0 6
80122: PUSH
80123: LD_INT 1
80125: ARRAY
80126: PPUSH
80127: LD_VAR 0 3
80131: PPUSH
80132: LD_VAR 0 4
80136: PPUSH
80137: CALL_OW 237
// end ;
80141: PPOPN 6
80143: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
80144: LD_EXP 62
80148: PUSH
80149: LD_EXP 109
80153: AND
80154: IFFALSE 80233
80156: GO 80158
80158: DISABLE
80159: LD_INT 0
80161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
80162: LD_ADDR_VAR 0 1
80166: PUSH
80167: LD_INT 22
80169: PUSH
80170: LD_OWVAR 2
80174: PUSH
80175: EMPTY
80176: LIST
80177: LIST
80178: PUSH
80179: LD_INT 30
80181: PUSH
80182: LD_INT 3
80184: PUSH
80185: EMPTY
80186: LIST
80187: LIST
80188: PUSH
80189: EMPTY
80190: LIST
80191: LIST
80192: PPUSH
80193: CALL_OW 69
80197: ST_TO_ADDR
// if not tmp then
80198: LD_VAR 0 1
80202: NOT
80203: IFFALSE 80207
// exit ;
80205: GO 80233
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
80207: LD_VAR 0 1
80211: PUSH
80212: LD_INT 1
80214: PPUSH
80215: LD_VAR 0 1
80219: PPUSH
80220: CALL_OW 12
80224: ARRAY
80225: PPUSH
80226: LD_INT 1
80228: PPUSH
80229: CALL_OW 234
// end ;
80233: PPOPN 1
80235: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
80236: LD_EXP 62
80240: PUSH
80241: LD_EXP 110
80245: AND
80246: IFFALSE 80358
80248: GO 80250
80250: DISABLE
80251: LD_INT 0
80253: PPUSH
80254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
80255: LD_ADDR_VAR 0 2
80259: PUSH
80260: LD_INT 22
80262: PUSH
80263: LD_OWVAR 2
80267: PUSH
80268: EMPTY
80269: LIST
80270: LIST
80271: PUSH
80272: LD_INT 2
80274: PUSH
80275: LD_INT 30
80277: PUSH
80278: LD_INT 27
80280: PUSH
80281: EMPTY
80282: LIST
80283: LIST
80284: PUSH
80285: LD_INT 30
80287: PUSH
80288: LD_INT 26
80290: PUSH
80291: EMPTY
80292: LIST
80293: LIST
80294: PUSH
80295: LD_INT 30
80297: PUSH
80298: LD_INT 28
80300: PUSH
80301: EMPTY
80302: LIST
80303: LIST
80304: PUSH
80305: EMPTY
80306: LIST
80307: LIST
80308: LIST
80309: LIST
80310: PUSH
80311: EMPTY
80312: LIST
80313: LIST
80314: PPUSH
80315: CALL_OW 69
80319: ST_TO_ADDR
// if not tmp then
80320: LD_VAR 0 2
80324: NOT
80325: IFFALSE 80329
// exit ;
80327: GO 80358
// for i in tmp do
80329: LD_ADDR_VAR 0 1
80333: PUSH
80334: LD_VAR 0 2
80338: PUSH
80339: FOR_IN
80340: IFFALSE 80356
// SetLives ( i , 1 ) ;
80342: LD_VAR 0 1
80346: PPUSH
80347: LD_INT 1
80349: PPUSH
80350: CALL_OW 234
80354: GO 80339
80356: POP
80357: POP
// end ;
80358: PPOPN 2
80360: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
80361: LD_EXP 62
80365: PUSH
80366: LD_EXP 111
80370: AND
80371: IFFALSE 80658
80373: GO 80375
80375: DISABLE
80376: LD_INT 0
80378: PPUSH
80379: PPUSH
80380: PPUSH
// begin i := rand ( 1 , 7 ) ;
80381: LD_ADDR_VAR 0 1
80385: PUSH
80386: LD_INT 1
80388: PPUSH
80389: LD_INT 7
80391: PPUSH
80392: CALL_OW 12
80396: ST_TO_ADDR
// case i of 1 :
80397: LD_VAR 0 1
80401: PUSH
80402: LD_INT 1
80404: DOUBLE
80405: EQUAL
80406: IFTRUE 80410
80408: GO 80420
80410: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
80411: LD_STRING earthquake(getX(game), 0, 32)
80413: PPUSH
80414: CALL_OW 559
80418: GO 80658
80420: LD_INT 2
80422: DOUBLE
80423: EQUAL
80424: IFTRUE 80428
80426: GO 80442
80428: POP
// begin ToLua ( displayStucuk(); ) ;
80429: LD_STRING displayStucuk();
80431: PPUSH
80432: CALL_OW 559
// ResetFog ;
80436: CALL_OW 335
// end ; 3 :
80440: GO 80658
80442: LD_INT 3
80444: DOUBLE
80445: EQUAL
80446: IFTRUE 80450
80448: GO 80554
80450: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80451: LD_ADDR_VAR 0 2
80455: PUSH
80456: LD_INT 22
80458: PUSH
80459: LD_OWVAR 2
80463: PUSH
80464: EMPTY
80465: LIST
80466: LIST
80467: PUSH
80468: LD_INT 25
80470: PUSH
80471: LD_INT 1
80473: PUSH
80474: EMPTY
80475: LIST
80476: LIST
80477: PUSH
80478: EMPTY
80479: LIST
80480: LIST
80481: PPUSH
80482: CALL_OW 69
80486: ST_TO_ADDR
// if not tmp then
80487: LD_VAR 0 2
80491: NOT
80492: IFFALSE 80496
// exit ;
80494: GO 80658
// un := tmp [ rand ( 1 , tmp ) ] ;
80496: LD_ADDR_VAR 0 3
80500: PUSH
80501: LD_VAR 0 2
80505: PUSH
80506: LD_INT 1
80508: PPUSH
80509: LD_VAR 0 2
80513: PPUSH
80514: CALL_OW 12
80518: ARRAY
80519: ST_TO_ADDR
// if Crawls ( un ) then
80520: LD_VAR 0 3
80524: PPUSH
80525: CALL_OW 318
80529: IFFALSE 80540
// ComWalk ( un ) ;
80531: LD_VAR 0 3
80535: PPUSH
80536: CALL_OW 138
// SetClass ( un , class_mortar ) ;
80540: LD_VAR 0 3
80544: PPUSH
80545: LD_INT 8
80547: PPUSH
80548: CALL_OW 336
// end ; 4 :
80552: GO 80658
80554: LD_INT 4
80556: DOUBLE
80557: EQUAL
80558: IFTRUE 80562
80560: GO 80636
80562: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
80563: LD_ADDR_VAR 0 2
80567: PUSH
80568: LD_INT 22
80570: PUSH
80571: LD_OWVAR 2
80575: PUSH
80576: EMPTY
80577: LIST
80578: LIST
80579: PUSH
80580: LD_INT 30
80582: PUSH
80583: LD_INT 29
80585: PUSH
80586: EMPTY
80587: LIST
80588: LIST
80589: PUSH
80590: EMPTY
80591: LIST
80592: LIST
80593: PPUSH
80594: CALL_OW 69
80598: ST_TO_ADDR
// if not tmp then
80599: LD_VAR 0 2
80603: NOT
80604: IFFALSE 80608
// exit ;
80606: GO 80658
// CenterNowOnUnits ( tmp [ 1 ] ) ;
80608: LD_VAR 0 2
80612: PUSH
80613: LD_INT 1
80615: ARRAY
80616: PPUSH
80617: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
80621: LD_VAR 0 2
80625: PUSH
80626: LD_INT 1
80628: ARRAY
80629: PPUSH
80630: CALL_OW 65
// end ; 5 .. 7 :
80634: GO 80658
80636: LD_INT 5
80638: DOUBLE
80639: GREATEREQUAL
80640: IFFALSE 80648
80642: LD_INT 7
80644: DOUBLE
80645: LESSEQUAL
80646: IFTRUE 80650
80648: GO 80657
80650: POP
// StreamSibBomb ; end ;
80651: CALL 76895 0 0
80655: GO 80658
80657: POP
// end ;
80658: PPOPN 3
80660: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
80661: LD_EXP 62
80665: PUSH
80666: LD_EXP 112
80670: AND
80671: IFFALSE 80827
80673: GO 80675
80675: DISABLE
80676: LD_INT 0
80678: PPUSH
80679: PPUSH
80680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
80681: LD_ADDR_VAR 0 2
80685: PUSH
80686: LD_INT 81
80688: PUSH
80689: LD_OWVAR 2
80693: PUSH
80694: EMPTY
80695: LIST
80696: LIST
80697: PUSH
80698: LD_INT 2
80700: PUSH
80701: LD_INT 21
80703: PUSH
80704: LD_INT 1
80706: PUSH
80707: EMPTY
80708: LIST
80709: LIST
80710: PUSH
80711: LD_INT 21
80713: PUSH
80714: LD_INT 2
80716: PUSH
80717: EMPTY
80718: LIST
80719: LIST
80720: PUSH
80721: EMPTY
80722: LIST
80723: LIST
80724: LIST
80725: PUSH
80726: EMPTY
80727: LIST
80728: LIST
80729: PPUSH
80730: CALL_OW 69
80734: ST_TO_ADDR
// if not tmp then
80735: LD_VAR 0 2
80739: NOT
80740: IFFALSE 80744
// exit ;
80742: GO 80827
// p := 0 ;
80744: LD_ADDR_VAR 0 3
80748: PUSH
80749: LD_INT 0
80751: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
80752: LD_INT 35
80754: PPUSH
80755: CALL_OW 67
// p := p + 1 ;
80759: LD_ADDR_VAR 0 3
80763: PUSH
80764: LD_VAR 0 3
80768: PUSH
80769: LD_INT 1
80771: PLUS
80772: ST_TO_ADDR
// for i in tmp do
80773: LD_ADDR_VAR 0 1
80777: PUSH
80778: LD_VAR 0 2
80782: PUSH
80783: FOR_IN
80784: IFFALSE 80815
// if GetLives ( i ) < 1000 then
80786: LD_VAR 0 1
80790: PPUSH
80791: CALL_OW 256
80795: PUSH
80796: LD_INT 1000
80798: LESS
80799: IFFALSE 80813
// SetLives ( i , 1000 ) ;
80801: LD_VAR 0 1
80805: PPUSH
80806: LD_INT 1000
80808: PPUSH
80809: CALL_OW 234
80813: GO 80783
80815: POP
80816: POP
// until p > 20 ;
80817: LD_VAR 0 3
80821: PUSH
80822: LD_INT 20
80824: GREATER
80825: IFFALSE 80752
// end ;
80827: PPOPN 3
80829: END
// every 0 0$1 trigger StreamModeActive and sTime do
80830: LD_EXP 62
80834: PUSH
80835: LD_EXP 113
80839: AND
80840: IFFALSE 80875
80842: GO 80844
80844: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
80845: LD_INT 28
80847: PPUSH
80848: LD_OWVAR 2
80852: PPUSH
80853: LD_INT 2
80855: PPUSH
80856: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
80860: LD_INT 30
80862: PPUSH
80863: LD_OWVAR 2
80867: PPUSH
80868: LD_INT 2
80870: PPUSH
80871: CALL_OW 322
// end ;
80875: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
80876: LD_EXP 62
80880: PUSH
80881: LD_EXP 114
80885: AND
80886: IFFALSE 81007
80888: GO 80890
80890: DISABLE
80891: LD_INT 0
80893: PPUSH
80894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
80895: LD_ADDR_VAR 0 2
80899: PUSH
80900: LD_INT 22
80902: PUSH
80903: LD_OWVAR 2
80907: PUSH
80908: EMPTY
80909: LIST
80910: LIST
80911: PUSH
80912: LD_INT 21
80914: PUSH
80915: LD_INT 1
80917: PUSH
80918: EMPTY
80919: LIST
80920: LIST
80921: PUSH
80922: LD_INT 3
80924: PUSH
80925: LD_INT 23
80927: PUSH
80928: LD_INT 0
80930: PUSH
80931: EMPTY
80932: LIST
80933: LIST
80934: PUSH
80935: EMPTY
80936: LIST
80937: LIST
80938: PUSH
80939: EMPTY
80940: LIST
80941: LIST
80942: LIST
80943: PPUSH
80944: CALL_OW 69
80948: ST_TO_ADDR
// if not tmp then
80949: LD_VAR 0 2
80953: NOT
80954: IFFALSE 80958
// exit ;
80956: GO 81007
// for i in tmp do
80958: LD_ADDR_VAR 0 1
80962: PUSH
80963: LD_VAR 0 2
80967: PUSH
80968: FOR_IN
80969: IFFALSE 81005
// begin if Crawls ( i ) then
80971: LD_VAR 0 1
80975: PPUSH
80976: CALL_OW 318
80980: IFFALSE 80991
// ComWalk ( i ) ;
80982: LD_VAR 0 1
80986: PPUSH
80987: CALL_OW 138
// SetClass ( i , 2 ) ;
80991: LD_VAR 0 1
80995: PPUSH
80996: LD_INT 2
80998: PPUSH
80999: CALL_OW 336
// end ;
81003: GO 80968
81005: POP
81006: POP
// end ;
81007: PPOPN 2
81009: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
81010: LD_EXP 62
81014: PUSH
81015: LD_EXP 115
81019: AND
81020: IFFALSE 81308
81022: GO 81024
81024: DISABLE
81025: LD_INT 0
81027: PPUSH
81028: PPUSH
81029: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
81030: LD_OWVAR 2
81034: PPUSH
81035: LD_INT 9
81037: PPUSH
81038: LD_INT 1
81040: PPUSH
81041: LD_INT 1
81043: PPUSH
81044: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
81048: LD_INT 9
81050: PPUSH
81051: LD_OWVAR 2
81055: PPUSH
81056: CALL_OW 343
// uc_side := 9 ;
81060: LD_ADDR_OWVAR 20
81064: PUSH
81065: LD_INT 9
81067: ST_TO_ADDR
// uc_nation := 2 ;
81068: LD_ADDR_OWVAR 21
81072: PUSH
81073: LD_INT 2
81075: ST_TO_ADDR
// hc_name := Dark Warrior ;
81076: LD_ADDR_OWVAR 26
81080: PUSH
81081: LD_STRING Dark Warrior
81083: ST_TO_ADDR
// hc_gallery :=  ;
81084: LD_ADDR_OWVAR 33
81088: PUSH
81089: LD_STRING 
81091: ST_TO_ADDR
// hc_noskilllimit := true ;
81092: LD_ADDR_OWVAR 76
81096: PUSH
81097: LD_INT 1
81099: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
81100: LD_ADDR_OWVAR 31
81104: PUSH
81105: LD_INT 30
81107: PUSH
81108: LD_INT 30
81110: PUSH
81111: LD_INT 30
81113: PUSH
81114: LD_INT 30
81116: PUSH
81117: EMPTY
81118: LIST
81119: LIST
81120: LIST
81121: LIST
81122: ST_TO_ADDR
// un := CreateHuman ;
81123: LD_ADDR_VAR 0 3
81127: PUSH
81128: CALL_OW 44
81132: ST_TO_ADDR
// hc_noskilllimit := false ;
81133: LD_ADDR_OWVAR 76
81137: PUSH
81138: LD_INT 0
81140: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
81141: LD_VAR 0 3
81145: PPUSH
81146: LD_INT 1
81148: PPUSH
81149: CALL_OW 51
// ToLua ( playRanger() ) ;
81153: LD_STRING playRanger()
81155: PPUSH
81156: CALL_OW 559
// p := 0 ;
81160: LD_ADDR_VAR 0 2
81164: PUSH
81165: LD_INT 0
81167: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
81168: LD_INT 35
81170: PPUSH
81171: CALL_OW 67
// p := p + 1 ;
81175: LD_ADDR_VAR 0 2
81179: PUSH
81180: LD_VAR 0 2
81184: PUSH
81185: LD_INT 1
81187: PLUS
81188: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
81189: LD_VAR 0 3
81193: PPUSH
81194: CALL_OW 256
81198: PUSH
81199: LD_INT 1000
81201: LESS
81202: IFFALSE 81216
// SetLives ( un , 1000 ) ;
81204: LD_VAR 0 3
81208: PPUSH
81209: LD_INT 1000
81211: PPUSH
81212: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
81216: LD_VAR 0 3
81220: PPUSH
81221: LD_INT 81
81223: PUSH
81224: LD_OWVAR 2
81228: PUSH
81229: EMPTY
81230: LIST
81231: LIST
81232: PUSH
81233: LD_INT 91
81235: PUSH
81236: LD_VAR 0 3
81240: PUSH
81241: LD_INT 30
81243: PUSH
81244: EMPTY
81245: LIST
81246: LIST
81247: LIST
81248: PUSH
81249: EMPTY
81250: LIST
81251: LIST
81252: PPUSH
81253: CALL_OW 69
81257: PPUSH
81258: LD_VAR 0 3
81262: PPUSH
81263: CALL_OW 74
81267: PPUSH
81268: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
81272: LD_VAR 0 2
81276: PUSH
81277: LD_INT 80
81279: GREATER
81280: PUSH
81281: LD_VAR 0 3
81285: PPUSH
81286: CALL_OW 301
81290: OR
81291: IFFALSE 81168
// if un then
81293: LD_VAR 0 3
81297: IFFALSE 81308
// RemoveUnit ( un ) ;
81299: LD_VAR 0 3
81303: PPUSH
81304: CALL_OW 64
// end ;
81308: PPOPN 3
81310: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
81311: LD_EXP 116
81315: IFFALSE 81431
81317: GO 81319
81319: DISABLE
81320: LD_INT 0
81322: PPUSH
81323: PPUSH
81324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
81325: LD_ADDR_VAR 0 2
81329: PUSH
81330: LD_INT 81
81332: PUSH
81333: LD_OWVAR 2
81337: PUSH
81338: EMPTY
81339: LIST
81340: LIST
81341: PUSH
81342: LD_INT 21
81344: PUSH
81345: LD_INT 1
81347: PUSH
81348: EMPTY
81349: LIST
81350: LIST
81351: PUSH
81352: EMPTY
81353: LIST
81354: LIST
81355: PPUSH
81356: CALL_OW 69
81360: ST_TO_ADDR
// ToLua ( playComputer() ) ;
81361: LD_STRING playComputer()
81363: PPUSH
81364: CALL_OW 559
// if not tmp then
81368: LD_VAR 0 2
81372: NOT
81373: IFFALSE 81377
// exit ;
81375: GO 81431
// for i in tmp do
81377: LD_ADDR_VAR 0 1
81381: PUSH
81382: LD_VAR 0 2
81386: PUSH
81387: FOR_IN
81388: IFFALSE 81429
// for j := 1 to 4 do
81390: LD_ADDR_VAR 0 3
81394: PUSH
81395: DOUBLE
81396: LD_INT 1
81398: DEC
81399: ST_TO_ADDR
81400: LD_INT 4
81402: PUSH
81403: FOR_TO
81404: IFFALSE 81425
// SetSkill ( i , j , 10 ) ;
81406: LD_VAR 0 1
81410: PPUSH
81411: LD_VAR 0 3
81415: PPUSH
81416: LD_INT 10
81418: PPUSH
81419: CALL_OW 237
81423: GO 81403
81425: POP
81426: POP
81427: GO 81387
81429: POP
81430: POP
// end ;
81431: PPOPN 3
81433: END
// every 0 0$1 trigger s30 do var i , tmp ;
81434: LD_EXP 117
81438: IFFALSE 81507
81440: GO 81442
81442: DISABLE
81443: LD_INT 0
81445: PPUSH
81446: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
81447: LD_ADDR_VAR 0 2
81451: PUSH
81452: LD_INT 22
81454: PUSH
81455: LD_OWVAR 2
81459: PUSH
81460: EMPTY
81461: LIST
81462: LIST
81463: PPUSH
81464: CALL_OW 69
81468: ST_TO_ADDR
// if not tmp then
81469: LD_VAR 0 2
81473: NOT
81474: IFFALSE 81478
// exit ;
81476: GO 81507
// for i in tmp do
81478: LD_ADDR_VAR 0 1
81482: PUSH
81483: LD_VAR 0 2
81487: PUSH
81488: FOR_IN
81489: IFFALSE 81505
// SetLives ( i , 300 ) ;
81491: LD_VAR 0 1
81495: PPUSH
81496: LD_INT 300
81498: PPUSH
81499: CALL_OW 234
81503: GO 81488
81505: POP
81506: POP
// end ;
81507: PPOPN 2
81509: END
// every 0 0$1 trigger s60 do var i , tmp ;
81510: LD_EXP 118
81514: IFFALSE 81583
81516: GO 81518
81518: DISABLE
81519: LD_INT 0
81521: PPUSH
81522: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
81523: LD_ADDR_VAR 0 2
81527: PUSH
81528: LD_INT 22
81530: PUSH
81531: LD_OWVAR 2
81535: PUSH
81536: EMPTY
81537: LIST
81538: LIST
81539: PPUSH
81540: CALL_OW 69
81544: ST_TO_ADDR
// if not tmp then
81545: LD_VAR 0 2
81549: NOT
81550: IFFALSE 81554
// exit ;
81552: GO 81583
// for i in tmp do
81554: LD_ADDR_VAR 0 1
81558: PUSH
81559: LD_VAR 0 2
81563: PUSH
81564: FOR_IN
81565: IFFALSE 81581
// SetLives ( i , 600 ) ;
81567: LD_VAR 0 1
81571: PPUSH
81572: LD_INT 600
81574: PPUSH
81575: CALL_OW 234
81579: GO 81564
81581: POP
81582: POP
// end ;
81583: PPOPN 2
81585: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
81586: LD_INT 0
81588: PPUSH
// case cmd of 301 :
81589: LD_VAR 0 1
81593: PUSH
81594: LD_INT 301
81596: DOUBLE
81597: EQUAL
81598: IFTRUE 81602
81600: GO 81634
81602: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
81603: LD_VAR 0 6
81607: PPUSH
81608: LD_VAR 0 7
81612: PPUSH
81613: LD_VAR 0 8
81617: PPUSH
81618: LD_VAR 0 4
81622: PPUSH
81623: LD_VAR 0 5
81627: PPUSH
81628: CALL 82835 0 5
81632: GO 81755
81634: LD_INT 302
81636: DOUBLE
81637: EQUAL
81638: IFTRUE 81642
81640: GO 81679
81642: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
81643: LD_VAR 0 6
81647: PPUSH
81648: LD_VAR 0 7
81652: PPUSH
81653: LD_VAR 0 8
81657: PPUSH
81658: LD_VAR 0 9
81662: PPUSH
81663: LD_VAR 0 4
81667: PPUSH
81668: LD_VAR 0 5
81672: PPUSH
81673: CALL 82926 0 6
81677: GO 81755
81679: LD_INT 303
81681: DOUBLE
81682: EQUAL
81683: IFTRUE 81687
81685: GO 81724
81687: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
81688: LD_VAR 0 6
81692: PPUSH
81693: LD_VAR 0 7
81697: PPUSH
81698: LD_VAR 0 8
81702: PPUSH
81703: LD_VAR 0 9
81707: PPUSH
81708: LD_VAR 0 4
81712: PPUSH
81713: LD_VAR 0 5
81717: PPUSH
81718: CALL 81760 0 6
81722: GO 81755
81724: LD_INT 304
81726: DOUBLE
81727: EQUAL
81728: IFTRUE 81732
81730: GO 81754
81732: POP
// hHackTeleport ( unit , x , y ) ; end ;
81733: LD_VAR 0 2
81737: PPUSH
81738: LD_VAR 0 4
81742: PPUSH
81743: LD_VAR 0 5
81747: PPUSH
81748: CALL 83519 0 3
81752: GO 81755
81754: POP
// end ;
81755: LD_VAR 0 12
81759: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
81760: LD_INT 0
81762: PPUSH
81763: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
81764: LD_VAR 0 1
81768: PUSH
81769: LD_INT 1
81771: LESS
81772: PUSH
81773: LD_VAR 0 1
81777: PUSH
81778: LD_INT 3
81780: GREATER
81781: OR
81782: PUSH
81783: LD_VAR 0 5
81787: PPUSH
81788: LD_VAR 0 6
81792: PPUSH
81793: CALL_OW 428
81797: OR
81798: IFFALSE 81802
// exit ;
81800: GO 82522
// uc_side := your_side ;
81802: LD_ADDR_OWVAR 20
81806: PUSH
81807: LD_OWVAR 2
81811: ST_TO_ADDR
// uc_nation := nation ;
81812: LD_ADDR_OWVAR 21
81816: PUSH
81817: LD_VAR 0 1
81821: ST_TO_ADDR
// bc_level = 1 ;
81822: LD_ADDR_OWVAR 43
81826: PUSH
81827: LD_INT 1
81829: ST_TO_ADDR
// case btype of 1 :
81830: LD_VAR 0 2
81834: PUSH
81835: LD_INT 1
81837: DOUBLE
81838: EQUAL
81839: IFTRUE 81843
81841: GO 81854
81843: POP
// bc_type := b_depot ; 2 :
81844: LD_ADDR_OWVAR 42
81848: PUSH
81849: LD_INT 0
81851: ST_TO_ADDR
81852: GO 82466
81854: LD_INT 2
81856: DOUBLE
81857: EQUAL
81858: IFTRUE 81862
81860: GO 81873
81862: POP
// bc_type := b_warehouse ; 3 :
81863: LD_ADDR_OWVAR 42
81867: PUSH
81868: LD_INT 1
81870: ST_TO_ADDR
81871: GO 82466
81873: LD_INT 3
81875: DOUBLE
81876: EQUAL
81877: IFTRUE 81881
81879: GO 81892
81881: POP
// bc_type := b_lab ; 4 .. 9 :
81882: LD_ADDR_OWVAR 42
81886: PUSH
81887: LD_INT 6
81889: ST_TO_ADDR
81890: GO 82466
81892: LD_INT 4
81894: DOUBLE
81895: GREATEREQUAL
81896: IFFALSE 81904
81898: LD_INT 9
81900: DOUBLE
81901: LESSEQUAL
81902: IFTRUE 81906
81904: GO 81958
81906: POP
// begin bc_type := b_lab_half ;
81907: LD_ADDR_OWVAR 42
81911: PUSH
81912: LD_INT 7
81914: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
81915: LD_ADDR_OWVAR 44
81919: PUSH
81920: LD_INT 10
81922: PUSH
81923: LD_INT 11
81925: PUSH
81926: LD_INT 12
81928: PUSH
81929: LD_INT 15
81931: PUSH
81932: LD_INT 14
81934: PUSH
81935: LD_INT 13
81937: PUSH
81938: EMPTY
81939: LIST
81940: LIST
81941: LIST
81942: LIST
81943: LIST
81944: LIST
81945: PUSH
81946: LD_VAR 0 2
81950: PUSH
81951: LD_INT 3
81953: MINUS
81954: ARRAY
81955: ST_TO_ADDR
// end ; 10 .. 13 :
81956: GO 82466
81958: LD_INT 10
81960: DOUBLE
81961: GREATEREQUAL
81962: IFFALSE 81970
81964: LD_INT 13
81966: DOUBLE
81967: LESSEQUAL
81968: IFTRUE 81972
81970: GO 82049
81972: POP
// begin bc_type := b_lab_full ;
81973: LD_ADDR_OWVAR 42
81977: PUSH
81978: LD_INT 8
81980: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
81981: LD_ADDR_OWVAR 44
81985: PUSH
81986: LD_INT 10
81988: PUSH
81989: LD_INT 12
81991: PUSH
81992: LD_INT 14
81994: PUSH
81995: LD_INT 13
81997: PUSH
81998: EMPTY
81999: LIST
82000: LIST
82001: LIST
82002: LIST
82003: PUSH
82004: LD_VAR 0 2
82008: PUSH
82009: LD_INT 9
82011: MINUS
82012: ARRAY
82013: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
82014: LD_ADDR_OWVAR 45
82018: PUSH
82019: LD_INT 11
82021: PUSH
82022: LD_INT 15
82024: PUSH
82025: LD_INT 12
82027: PUSH
82028: LD_INT 15
82030: PUSH
82031: EMPTY
82032: LIST
82033: LIST
82034: LIST
82035: LIST
82036: PUSH
82037: LD_VAR 0 2
82041: PUSH
82042: LD_INT 9
82044: MINUS
82045: ARRAY
82046: ST_TO_ADDR
// end ; 14 :
82047: GO 82466
82049: LD_INT 14
82051: DOUBLE
82052: EQUAL
82053: IFTRUE 82057
82055: GO 82068
82057: POP
// bc_type := b_workshop ; 15 :
82058: LD_ADDR_OWVAR 42
82062: PUSH
82063: LD_INT 2
82065: ST_TO_ADDR
82066: GO 82466
82068: LD_INT 15
82070: DOUBLE
82071: EQUAL
82072: IFTRUE 82076
82074: GO 82087
82076: POP
// bc_type := b_factory ; 16 :
82077: LD_ADDR_OWVAR 42
82081: PUSH
82082: LD_INT 3
82084: ST_TO_ADDR
82085: GO 82466
82087: LD_INT 16
82089: DOUBLE
82090: EQUAL
82091: IFTRUE 82095
82093: GO 82106
82095: POP
// bc_type := b_ext_gun ; 17 :
82096: LD_ADDR_OWVAR 42
82100: PUSH
82101: LD_INT 17
82103: ST_TO_ADDR
82104: GO 82466
82106: LD_INT 17
82108: DOUBLE
82109: EQUAL
82110: IFTRUE 82114
82112: GO 82142
82114: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
82115: LD_ADDR_OWVAR 42
82119: PUSH
82120: LD_INT 19
82122: PUSH
82123: LD_INT 23
82125: PUSH
82126: LD_INT 19
82128: PUSH
82129: EMPTY
82130: LIST
82131: LIST
82132: LIST
82133: PUSH
82134: LD_VAR 0 1
82138: ARRAY
82139: ST_TO_ADDR
82140: GO 82466
82142: LD_INT 18
82144: DOUBLE
82145: EQUAL
82146: IFTRUE 82150
82148: GO 82161
82150: POP
// bc_type := b_ext_radar ; 19 :
82151: LD_ADDR_OWVAR 42
82155: PUSH
82156: LD_INT 20
82158: ST_TO_ADDR
82159: GO 82466
82161: LD_INT 19
82163: DOUBLE
82164: EQUAL
82165: IFTRUE 82169
82167: GO 82180
82169: POP
// bc_type := b_ext_radio ; 20 :
82170: LD_ADDR_OWVAR 42
82174: PUSH
82175: LD_INT 22
82177: ST_TO_ADDR
82178: GO 82466
82180: LD_INT 20
82182: DOUBLE
82183: EQUAL
82184: IFTRUE 82188
82186: GO 82199
82188: POP
// bc_type := b_ext_siberium ; 21 :
82189: LD_ADDR_OWVAR 42
82193: PUSH
82194: LD_INT 21
82196: ST_TO_ADDR
82197: GO 82466
82199: LD_INT 21
82201: DOUBLE
82202: EQUAL
82203: IFTRUE 82207
82205: GO 82218
82207: POP
// bc_type := b_ext_computer ; 22 :
82208: LD_ADDR_OWVAR 42
82212: PUSH
82213: LD_INT 24
82215: ST_TO_ADDR
82216: GO 82466
82218: LD_INT 22
82220: DOUBLE
82221: EQUAL
82222: IFTRUE 82226
82224: GO 82237
82226: POP
// bc_type := b_ext_track ; 23 :
82227: LD_ADDR_OWVAR 42
82231: PUSH
82232: LD_INT 16
82234: ST_TO_ADDR
82235: GO 82466
82237: LD_INT 23
82239: DOUBLE
82240: EQUAL
82241: IFTRUE 82245
82243: GO 82256
82245: POP
// bc_type := b_ext_laser ; 24 :
82246: LD_ADDR_OWVAR 42
82250: PUSH
82251: LD_INT 25
82253: ST_TO_ADDR
82254: GO 82466
82256: LD_INT 24
82258: DOUBLE
82259: EQUAL
82260: IFTRUE 82264
82262: GO 82275
82264: POP
// bc_type := b_control_tower ; 25 :
82265: LD_ADDR_OWVAR 42
82269: PUSH
82270: LD_INT 36
82272: ST_TO_ADDR
82273: GO 82466
82275: LD_INT 25
82277: DOUBLE
82278: EQUAL
82279: IFTRUE 82283
82281: GO 82294
82283: POP
// bc_type := b_breastwork ; 26 :
82284: LD_ADDR_OWVAR 42
82288: PUSH
82289: LD_INT 31
82291: ST_TO_ADDR
82292: GO 82466
82294: LD_INT 26
82296: DOUBLE
82297: EQUAL
82298: IFTRUE 82302
82300: GO 82313
82302: POP
// bc_type := b_bunker ; 27 :
82303: LD_ADDR_OWVAR 42
82307: PUSH
82308: LD_INT 32
82310: ST_TO_ADDR
82311: GO 82466
82313: LD_INT 27
82315: DOUBLE
82316: EQUAL
82317: IFTRUE 82321
82319: GO 82332
82321: POP
// bc_type := b_turret ; 28 :
82322: LD_ADDR_OWVAR 42
82326: PUSH
82327: LD_INT 33
82329: ST_TO_ADDR
82330: GO 82466
82332: LD_INT 28
82334: DOUBLE
82335: EQUAL
82336: IFTRUE 82340
82338: GO 82351
82340: POP
// bc_type := b_armoury ; 29 :
82341: LD_ADDR_OWVAR 42
82345: PUSH
82346: LD_INT 4
82348: ST_TO_ADDR
82349: GO 82466
82351: LD_INT 29
82353: DOUBLE
82354: EQUAL
82355: IFTRUE 82359
82357: GO 82370
82359: POP
// bc_type := b_barracks ; 30 :
82360: LD_ADDR_OWVAR 42
82364: PUSH
82365: LD_INT 5
82367: ST_TO_ADDR
82368: GO 82466
82370: LD_INT 30
82372: DOUBLE
82373: EQUAL
82374: IFTRUE 82378
82376: GO 82389
82378: POP
// bc_type := b_solar_power ; 31 :
82379: LD_ADDR_OWVAR 42
82383: PUSH
82384: LD_INT 27
82386: ST_TO_ADDR
82387: GO 82466
82389: LD_INT 31
82391: DOUBLE
82392: EQUAL
82393: IFTRUE 82397
82395: GO 82408
82397: POP
// bc_type := b_oil_power ; 32 :
82398: LD_ADDR_OWVAR 42
82402: PUSH
82403: LD_INT 26
82405: ST_TO_ADDR
82406: GO 82466
82408: LD_INT 32
82410: DOUBLE
82411: EQUAL
82412: IFTRUE 82416
82414: GO 82427
82416: POP
// bc_type := b_siberite_power ; 33 :
82417: LD_ADDR_OWVAR 42
82421: PUSH
82422: LD_INT 28
82424: ST_TO_ADDR
82425: GO 82466
82427: LD_INT 33
82429: DOUBLE
82430: EQUAL
82431: IFTRUE 82435
82433: GO 82446
82435: POP
// bc_type := b_oil_mine ; 34 :
82436: LD_ADDR_OWVAR 42
82440: PUSH
82441: LD_INT 29
82443: ST_TO_ADDR
82444: GO 82466
82446: LD_INT 34
82448: DOUBLE
82449: EQUAL
82450: IFTRUE 82454
82452: GO 82465
82454: POP
// bc_type := b_siberite_mine ; end ;
82455: LD_ADDR_OWVAR 42
82459: PUSH
82460: LD_INT 30
82462: ST_TO_ADDR
82463: GO 82466
82465: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
82466: LD_ADDR_VAR 0 8
82470: PUSH
82471: LD_VAR 0 5
82475: PPUSH
82476: LD_VAR 0 6
82480: PPUSH
82481: LD_VAR 0 3
82485: PPUSH
82486: CALL_OW 47
82490: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
82491: LD_OWVAR 42
82495: PUSH
82496: LD_INT 32
82498: PUSH
82499: LD_INT 33
82501: PUSH
82502: EMPTY
82503: LIST
82504: LIST
82505: IN
82506: IFFALSE 82522
// PlaceWeaponTurret ( b , weapon ) ;
82508: LD_VAR 0 8
82512: PPUSH
82513: LD_VAR 0 4
82517: PPUSH
82518: CALL_OW 431
// end ;
82522: LD_VAR 0 7
82526: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
82527: LD_INT 0
82529: PPUSH
82530: PPUSH
82531: PPUSH
82532: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
82533: LD_ADDR_VAR 0 4
82537: PUSH
82538: LD_INT 22
82540: PUSH
82541: LD_OWVAR 2
82545: PUSH
82546: EMPTY
82547: LIST
82548: LIST
82549: PUSH
82550: LD_INT 2
82552: PUSH
82553: LD_INT 30
82555: PUSH
82556: LD_INT 0
82558: PUSH
82559: EMPTY
82560: LIST
82561: LIST
82562: PUSH
82563: LD_INT 30
82565: PUSH
82566: LD_INT 1
82568: PUSH
82569: EMPTY
82570: LIST
82571: LIST
82572: PUSH
82573: EMPTY
82574: LIST
82575: LIST
82576: LIST
82577: PUSH
82578: EMPTY
82579: LIST
82580: LIST
82581: PPUSH
82582: CALL_OW 69
82586: ST_TO_ADDR
// if not tmp then
82587: LD_VAR 0 4
82591: NOT
82592: IFFALSE 82596
// exit ;
82594: GO 82655
// for i in tmp do
82596: LD_ADDR_VAR 0 2
82600: PUSH
82601: LD_VAR 0 4
82605: PUSH
82606: FOR_IN
82607: IFFALSE 82653
// for j = 1 to 3 do
82609: LD_ADDR_VAR 0 3
82613: PUSH
82614: DOUBLE
82615: LD_INT 1
82617: DEC
82618: ST_TO_ADDR
82619: LD_INT 3
82621: PUSH
82622: FOR_TO
82623: IFFALSE 82649
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
82625: LD_VAR 0 2
82629: PPUSH
82630: CALL_OW 274
82634: PPUSH
82635: LD_VAR 0 3
82639: PPUSH
82640: LD_INT 99999
82642: PPUSH
82643: CALL_OW 277
82647: GO 82622
82649: POP
82650: POP
82651: GO 82606
82653: POP
82654: POP
// end ;
82655: LD_VAR 0 1
82659: RET
// export function hHackSetLevel10 ; var i , j ; begin
82660: LD_INT 0
82662: PPUSH
82663: PPUSH
82664: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
82665: LD_ADDR_VAR 0 2
82669: PUSH
82670: LD_INT 21
82672: PUSH
82673: LD_INT 1
82675: PUSH
82676: EMPTY
82677: LIST
82678: LIST
82679: PPUSH
82680: CALL_OW 69
82684: PUSH
82685: FOR_IN
82686: IFFALSE 82738
// if IsSelected ( i ) then
82688: LD_VAR 0 2
82692: PPUSH
82693: CALL_OW 306
82697: IFFALSE 82736
// begin for j := 1 to 4 do
82699: LD_ADDR_VAR 0 3
82703: PUSH
82704: DOUBLE
82705: LD_INT 1
82707: DEC
82708: ST_TO_ADDR
82709: LD_INT 4
82711: PUSH
82712: FOR_TO
82713: IFFALSE 82734
// SetSkill ( i , j , 10 ) ;
82715: LD_VAR 0 2
82719: PPUSH
82720: LD_VAR 0 3
82724: PPUSH
82725: LD_INT 10
82727: PPUSH
82728: CALL_OW 237
82732: GO 82712
82734: POP
82735: POP
// end ;
82736: GO 82685
82738: POP
82739: POP
// end ;
82740: LD_VAR 0 1
82744: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
82745: LD_INT 0
82747: PPUSH
82748: PPUSH
82749: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
82750: LD_ADDR_VAR 0 2
82754: PUSH
82755: LD_INT 22
82757: PUSH
82758: LD_OWVAR 2
82762: PUSH
82763: EMPTY
82764: LIST
82765: LIST
82766: PUSH
82767: LD_INT 21
82769: PUSH
82770: LD_INT 1
82772: PUSH
82773: EMPTY
82774: LIST
82775: LIST
82776: PUSH
82777: EMPTY
82778: LIST
82779: LIST
82780: PPUSH
82781: CALL_OW 69
82785: PUSH
82786: FOR_IN
82787: IFFALSE 82828
// begin for j := 1 to 4 do
82789: LD_ADDR_VAR 0 3
82793: PUSH
82794: DOUBLE
82795: LD_INT 1
82797: DEC
82798: ST_TO_ADDR
82799: LD_INT 4
82801: PUSH
82802: FOR_TO
82803: IFFALSE 82824
// SetSkill ( i , j , 10 ) ;
82805: LD_VAR 0 2
82809: PPUSH
82810: LD_VAR 0 3
82814: PPUSH
82815: LD_INT 10
82817: PPUSH
82818: CALL_OW 237
82822: GO 82802
82824: POP
82825: POP
// end ;
82826: GO 82786
82828: POP
82829: POP
// end ;
82830: LD_VAR 0 1
82834: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
82835: LD_INT 0
82837: PPUSH
// uc_side := your_side ;
82838: LD_ADDR_OWVAR 20
82842: PUSH
82843: LD_OWVAR 2
82847: ST_TO_ADDR
// uc_nation := nation ;
82848: LD_ADDR_OWVAR 21
82852: PUSH
82853: LD_VAR 0 1
82857: ST_TO_ADDR
// InitHc ;
82858: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
82862: LD_INT 0
82864: PPUSH
82865: LD_VAR 0 2
82869: PPUSH
82870: LD_VAR 0 3
82874: PPUSH
82875: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
82879: LD_VAR 0 4
82883: PPUSH
82884: LD_VAR 0 5
82888: PPUSH
82889: CALL_OW 428
82893: PUSH
82894: LD_INT 0
82896: EQUAL
82897: IFFALSE 82921
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
82899: CALL_OW 44
82903: PPUSH
82904: LD_VAR 0 4
82908: PPUSH
82909: LD_VAR 0 5
82913: PPUSH
82914: LD_INT 1
82916: PPUSH
82917: CALL_OW 48
// end ;
82921: LD_VAR 0 6
82925: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
82926: LD_INT 0
82928: PPUSH
82929: PPUSH
// uc_side := your_side ;
82930: LD_ADDR_OWVAR 20
82934: PUSH
82935: LD_OWVAR 2
82939: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
82940: LD_VAR 0 1
82944: PUSH
82945: LD_INT 1
82947: PUSH
82948: LD_INT 2
82950: PUSH
82951: LD_INT 3
82953: PUSH
82954: LD_INT 4
82956: PUSH
82957: LD_INT 5
82959: PUSH
82960: EMPTY
82961: LIST
82962: LIST
82963: LIST
82964: LIST
82965: LIST
82966: IN
82967: IFFALSE 82979
// uc_nation := nation_american else
82969: LD_ADDR_OWVAR 21
82973: PUSH
82974: LD_INT 1
82976: ST_TO_ADDR
82977: GO 83022
// if chassis in [ 11 , 12 , 13 , 14 ] then
82979: LD_VAR 0 1
82983: PUSH
82984: LD_INT 11
82986: PUSH
82987: LD_INT 12
82989: PUSH
82990: LD_INT 13
82992: PUSH
82993: LD_INT 14
82995: PUSH
82996: EMPTY
82997: LIST
82998: LIST
82999: LIST
83000: LIST
83001: IN
83002: IFFALSE 83014
// uc_nation := nation_arabian else
83004: LD_ADDR_OWVAR 21
83008: PUSH
83009: LD_INT 2
83011: ST_TO_ADDR
83012: GO 83022
// uc_nation := nation_russian ;
83014: LD_ADDR_OWVAR 21
83018: PUSH
83019: LD_INT 3
83021: ST_TO_ADDR
// vc_chassis := chassis ;
83022: LD_ADDR_OWVAR 37
83026: PUSH
83027: LD_VAR 0 1
83031: ST_TO_ADDR
// vc_engine := engine ;
83032: LD_ADDR_OWVAR 39
83036: PUSH
83037: LD_VAR 0 2
83041: ST_TO_ADDR
// vc_control := control ;
83042: LD_ADDR_OWVAR 38
83046: PUSH
83047: LD_VAR 0 3
83051: ST_TO_ADDR
// vc_weapon := weapon ;
83052: LD_ADDR_OWVAR 40
83056: PUSH
83057: LD_VAR 0 4
83061: ST_TO_ADDR
// un := CreateVehicle ;
83062: LD_ADDR_VAR 0 8
83066: PUSH
83067: CALL_OW 45
83071: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
83072: LD_VAR 0 8
83076: PPUSH
83077: LD_INT 0
83079: PPUSH
83080: LD_INT 5
83082: PPUSH
83083: CALL_OW 12
83087: PPUSH
83088: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
83092: LD_VAR 0 8
83096: PPUSH
83097: LD_VAR 0 5
83101: PPUSH
83102: LD_VAR 0 6
83106: PPUSH
83107: LD_INT 1
83109: PPUSH
83110: CALL_OW 48
// end ;
83114: LD_VAR 0 7
83118: RET
// export hInvincible ; every 1 do
83119: GO 83121
83121: DISABLE
// hInvincible := [ ] ;
83122: LD_ADDR_EXP 119
83126: PUSH
83127: EMPTY
83128: ST_TO_ADDR
83129: END
// every 10 do var i ;
83130: GO 83132
83132: DISABLE
83133: LD_INT 0
83135: PPUSH
// begin enable ;
83136: ENABLE
// if not hInvincible then
83137: LD_EXP 119
83141: NOT
83142: IFFALSE 83146
// exit ;
83144: GO 83190
// for i in hInvincible do
83146: LD_ADDR_VAR 0 1
83150: PUSH
83151: LD_EXP 119
83155: PUSH
83156: FOR_IN
83157: IFFALSE 83188
// if GetLives ( i ) < 1000 then
83159: LD_VAR 0 1
83163: PPUSH
83164: CALL_OW 256
83168: PUSH
83169: LD_INT 1000
83171: LESS
83172: IFFALSE 83186
// SetLives ( i , 1000 ) ;
83174: LD_VAR 0 1
83178: PPUSH
83179: LD_INT 1000
83181: PPUSH
83182: CALL_OW 234
83186: GO 83156
83188: POP
83189: POP
// end ;
83190: PPOPN 1
83192: END
// export function hHackInvincible ; var i ; begin
83193: LD_INT 0
83195: PPUSH
83196: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
83197: LD_ADDR_VAR 0 2
83201: PUSH
83202: LD_INT 2
83204: PUSH
83205: LD_INT 21
83207: PUSH
83208: LD_INT 1
83210: PUSH
83211: EMPTY
83212: LIST
83213: LIST
83214: PUSH
83215: LD_INT 21
83217: PUSH
83218: LD_INT 2
83220: PUSH
83221: EMPTY
83222: LIST
83223: LIST
83224: PUSH
83225: EMPTY
83226: LIST
83227: LIST
83228: LIST
83229: PPUSH
83230: CALL_OW 69
83234: PUSH
83235: FOR_IN
83236: IFFALSE 83297
// if IsSelected ( i ) then
83238: LD_VAR 0 2
83242: PPUSH
83243: CALL_OW 306
83247: IFFALSE 83295
// begin if i in hInvincible then
83249: LD_VAR 0 2
83253: PUSH
83254: LD_EXP 119
83258: IN
83259: IFFALSE 83279
// hInvincible := hInvincible diff i else
83261: LD_ADDR_EXP 119
83265: PUSH
83266: LD_EXP 119
83270: PUSH
83271: LD_VAR 0 2
83275: DIFF
83276: ST_TO_ADDR
83277: GO 83295
// hInvincible := hInvincible union i ;
83279: LD_ADDR_EXP 119
83283: PUSH
83284: LD_EXP 119
83288: PUSH
83289: LD_VAR 0 2
83293: UNION
83294: ST_TO_ADDR
// end ;
83295: GO 83235
83297: POP
83298: POP
// end ;
83299: LD_VAR 0 1
83303: RET
// export function hHackInvisible ; var i , j ; begin
83304: LD_INT 0
83306: PPUSH
83307: PPUSH
83308: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
83309: LD_ADDR_VAR 0 2
83313: PUSH
83314: LD_INT 21
83316: PUSH
83317: LD_INT 1
83319: PUSH
83320: EMPTY
83321: LIST
83322: LIST
83323: PPUSH
83324: CALL_OW 69
83328: PUSH
83329: FOR_IN
83330: IFFALSE 83354
// if IsSelected ( i ) then
83332: LD_VAR 0 2
83336: PPUSH
83337: CALL_OW 306
83341: IFFALSE 83352
// ComForceInvisible ( i ) ;
83343: LD_VAR 0 2
83347: PPUSH
83348: CALL_OW 496
83352: GO 83329
83354: POP
83355: POP
// end ;
83356: LD_VAR 0 1
83360: RET
// export function hHackChangeYourSide ; begin
83361: LD_INT 0
83363: PPUSH
// if your_side = 8 then
83364: LD_OWVAR 2
83368: PUSH
83369: LD_INT 8
83371: EQUAL
83372: IFFALSE 83384
// your_side := 0 else
83374: LD_ADDR_OWVAR 2
83378: PUSH
83379: LD_INT 0
83381: ST_TO_ADDR
83382: GO 83398
// your_side := your_side + 1 ;
83384: LD_ADDR_OWVAR 2
83388: PUSH
83389: LD_OWVAR 2
83393: PUSH
83394: LD_INT 1
83396: PLUS
83397: ST_TO_ADDR
// end ;
83398: LD_VAR 0 1
83402: RET
// export function hHackChangeUnitSide ; var i , j ; begin
83403: LD_INT 0
83405: PPUSH
83406: PPUSH
83407: PPUSH
// for i in all_units do
83408: LD_ADDR_VAR 0 2
83412: PUSH
83413: LD_OWVAR 3
83417: PUSH
83418: FOR_IN
83419: IFFALSE 83497
// if IsSelected ( i ) then
83421: LD_VAR 0 2
83425: PPUSH
83426: CALL_OW 306
83430: IFFALSE 83495
// begin j := GetSide ( i ) ;
83432: LD_ADDR_VAR 0 3
83436: PUSH
83437: LD_VAR 0 2
83441: PPUSH
83442: CALL_OW 255
83446: ST_TO_ADDR
// if j = 8 then
83447: LD_VAR 0 3
83451: PUSH
83452: LD_INT 8
83454: EQUAL
83455: IFFALSE 83467
// j := 0 else
83457: LD_ADDR_VAR 0 3
83461: PUSH
83462: LD_INT 0
83464: ST_TO_ADDR
83465: GO 83481
// j := j + 1 ;
83467: LD_ADDR_VAR 0 3
83471: PUSH
83472: LD_VAR 0 3
83476: PUSH
83477: LD_INT 1
83479: PLUS
83480: ST_TO_ADDR
// SetSide ( i , j ) ;
83481: LD_VAR 0 2
83485: PPUSH
83486: LD_VAR 0 3
83490: PPUSH
83491: CALL_OW 235
// end ;
83495: GO 83418
83497: POP
83498: POP
// end ;
83499: LD_VAR 0 1
83503: RET
// export function hHackFog ; begin
83504: LD_INT 0
83506: PPUSH
// FogOff ( true ) ;
83507: LD_INT 1
83509: PPUSH
83510: CALL_OW 344
// end ;
83514: LD_VAR 0 1
83518: RET
// export function hHackTeleport ( unit , x , y ) ; begin
83519: LD_INT 0
83521: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
83522: LD_VAR 0 1
83526: PPUSH
83527: LD_VAR 0 2
83531: PPUSH
83532: LD_VAR 0 3
83536: PPUSH
83537: LD_INT 1
83539: PPUSH
83540: LD_INT 1
83542: PPUSH
83543: CALL_OW 483
// CenterOnXY ( x , y ) ;
83547: LD_VAR 0 2
83551: PPUSH
83552: LD_VAR 0 3
83556: PPUSH
83557: CALL_OW 84
// end ;
83561: LD_VAR 0 4
83565: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
83566: LD_INT 0
83568: PPUSH
83569: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
83570: LD_VAR 0 1
83574: NOT
83575: PUSH
83576: LD_VAR 0 2
83580: PPUSH
83581: LD_VAR 0 3
83585: PPUSH
83586: CALL_OW 488
83590: NOT
83591: OR
83592: PUSH
83593: LD_VAR 0 1
83597: PPUSH
83598: CALL_OW 266
83602: PUSH
83603: LD_INT 3
83605: NONEQUAL
83606: PUSH
83607: LD_VAR 0 1
83611: PPUSH
83612: CALL_OW 247
83616: PUSH
83617: LD_INT 1
83619: EQUAL
83620: NOT
83621: AND
83622: OR
83623: IFFALSE 83627
// exit ;
83625: GO 83776
// if GetType ( factory ) = unit_human then
83627: LD_VAR 0 1
83631: PPUSH
83632: CALL_OW 247
83636: PUSH
83637: LD_INT 1
83639: EQUAL
83640: IFFALSE 83657
// factory := IsInUnit ( factory ) ;
83642: LD_ADDR_VAR 0 1
83646: PUSH
83647: LD_VAR 0 1
83651: PPUSH
83652: CALL_OW 310
83656: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
83657: LD_VAR 0 1
83661: PPUSH
83662: CALL_OW 266
83666: PUSH
83667: LD_INT 3
83669: NONEQUAL
83670: IFFALSE 83674
// exit ;
83672: GO 83776
// if HexInfo ( x , y ) = factory then
83674: LD_VAR 0 2
83678: PPUSH
83679: LD_VAR 0 3
83683: PPUSH
83684: CALL_OW 428
83688: PUSH
83689: LD_VAR 0 1
83693: EQUAL
83694: IFFALSE 83721
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
83696: LD_ADDR_EXP 120
83700: PUSH
83701: LD_EXP 120
83705: PPUSH
83706: LD_VAR 0 1
83710: PPUSH
83711: LD_INT 0
83713: PPUSH
83714: CALL_OW 1
83718: ST_TO_ADDR
83719: GO 83772
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
83721: LD_ADDR_EXP 120
83725: PUSH
83726: LD_EXP 120
83730: PPUSH
83731: LD_VAR 0 1
83735: PPUSH
83736: LD_VAR 0 1
83740: PPUSH
83741: CALL_OW 255
83745: PUSH
83746: LD_VAR 0 1
83750: PUSH
83751: LD_VAR 0 2
83755: PUSH
83756: LD_VAR 0 3
83760: PUSH
83761: EMPTY
83762: LIST
83763: LIST
83764: LIST
83765: LIST
83766: PPUSH
83767: CALL_OW 1
83771: ST_TO_ADDR
// UpdateFactoryWaypoints ;
83772: CALL 83781 0 0
// end ;
83776: LD_VAR 0 4
83780: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
83781: LD_INT 0
83783: PPUSH
83784: PPUSH
83785: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
83786: LD_STRING resetFactoryWaypoint();
83788: PPUSH
83789: CALL_OW 559
// if factoryWaypoints then
83793: LD_EXP 120
83797: IFFALSE 83923
// begin list := PrepareArray ( factoryWaypoints ) ;
83799: LD_ADDR_VAR 0 3
83803: PUSH
83804: LD_EXP 120
83808: PPUSH
83809: CALL 69033 0 1
83813: ST_TO_ADDR
// for i := 1 to list do
83814: LD_ADDR_VAR 0 2
83818: PUSH
83819: DOUBLE
83820: LD_INT 1
83822: DEC
83823: ST_TO_ADDR
83824: LD_VAR 0 3
83828: PUSH
83829: FOR_TO
83830: IFFALSE 83921
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
83832: LD_STRING setFactoryWaypointXY(
83834: PUSH
83835: LD_VAR 0 3
83839: PUSH
83840: LD_VAR 0 2
83844: ARRAY
83845: PUSH
83846: LD_INT 1
83848: ARRAY
83849: STR
83850: PUSH
83851: LD_STRING ,
83853: STR
83854: PUSH
83855: LD_VAR 0 3
83859: PUSH
83860: LD_VAR 0 2
83864: ARRAY
83865: PUSH
83866: LD_INT 2
83868: ARRAY
83869: STR
83870: PUSH
83871: LD_STRING ,
83873: STR
83874: PUSH
83875: LD_VAR 0 3
83879: PUSH
83880: LD_VAR 0 2
83884: ARRAY
83885: PUSH
83886: LD_INT 3
83888: ARRAY
83889: STR
83890: PUSH
83891: LD_STRING ,
83893: STR
83894: PUSH
83895: LD_VAR 0 3
83899: PUSH
83900: LD_VAR 0 2
83904: ARRAY
83905: PUSH
83906: LD_INT 4
83908: ARRAY
83909: STR
83910: PUSH
83911: LD_STRING )
83913: STR
83914: PPUSH
83915: CALL_OW 559
83919: GO 83829
83921: POP
83922: POP
// end ; end ;
83923: LD_VAR 0 1
83927: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
83928: LD_INT 0
83930: PPUSH
// if HexInfo ( x , y ) = warehouse then
83931: LD_VAR 0 2
83935: PPUSH
83936: LD_VAR 0 3
83940: PPUSH
83941: CALL_OW 428
83945: PUSH
83946: LD_VAR 0 1
83950: EQUAL
83951: IFFALSE 83978
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
83953: LD_ADDR_EXP 121
83957: PUSH
83958: LD_EXP 121
83962: PPUSH
83963: LD_VAR 0 1
83967: PPUSH
83968: LD_INT 0
83970: PPUSH
83971: CALL_OW 1
83975: ST_TO_ADDR
83976: GO 84029
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
83978: LD_ADDR_EXP 121
83982: PUSH
83983: LD_EXP 121
83987: PPUSH
83988: LD_VAR 0 1
83992: PPUSH
83993: LD_VAR 0 1
83997: PPUSH
83998: CALL_OW 255
84002: PUSH
84003: LD_VAR 0 1
84007: PUSH
84008: LD_VAR 0 2
84012: PUSH
84013: LD_VAR 0 3
84017: PUSH
84018: EMPTY
84019: LIST
84020: LIST
84021: LIST
84022: LIST
84023: PPUSH
84024: CALL_OW 1
84028: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
84029: CALL 84038 0 0
// end ;
84033: LD_VAR 0 4
84037: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
84038: LD_INT 0
84040: PPUSH
84041: PPUSH
84042: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
84043: LD_STRING resetWarehouseGatheringPoints();
84045: PPUSH
84046: CALL_OW 559
// if warehouseGatheringPoints then
84050: LD_EXP 121
84054: IFFALSE 84180
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
84056: LD_ADDR_VAR 0 3
84060: PUSH
84061: LD_EXP 121
84065: PPUSH
84066: CALL 69033 0 1
84070: ST_TO_ADDR
// for i := 1 to list do
84071: LD_ADDR_VAR 0 2
84075: PUSH
84076: DOUBLE
84077: LD_INT 1
84079: DEC
84080: ST_TO_ADDR
84081: LD_VAR 0 3
84085: PUSH
84086: FOR_TO
84087: IFFALSE 84178
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
84089: LD_STRING setWarehouseGatheringPointXY(
84091: PUSH
84092: LD_VAR 0 3
84096: PUSH
84097: LD_VAR 0 2
84101: ARRAY
84102: PUSH
84103: LD_INT 1
84105: ARRAY
84106: STR
84107: PUSH
84108: LD_STRING ,
84110: STR
84111: PUSH
84112: LD_VAR 0 3
84116: PUSH
84117: LD_VAR 0 2
84121: ARRAY
84122: PUSH
84123: LD_INT 2
84125: ARRAY
84126: STR
84127: PUSH
84128: LD_STRING ,
84130: STR
84131: PUSH
84132: LD_VAR 0 3
84136: PUSH
84137: LD_VAR 0 2
84141: ARRAY
84142: PUSH
84143: LD_INT 3
84145: ARRAY
84146: STR
84147: PUSH
84148: LD_STRING ,
84150: STR
84151: PUSH
84152: LD_VAR 0 3
84156: PUSH
84157: LD_VAR 0 2
84161: ARRAY
84162: PUSH
84163: LD_INT 4
84165: ARRAY
84166: STR
84167: PUSH
84168: LD_STRING )
84170: STR
84171: PPUSH
84172: CALL_OW 559
84176: GO 84086
84178: POP
84179: POP
// end ; end ;
84180: LD_VAR 0 1
84184: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
84185: LD_EXP 121
84189: IFFALSE 84874
84191: GO 84193
84193: DISABLE
84194: LD_INT 0
84196: PPUSH
84197: PPUSH
84198: PPUSH
84199: PPUSH
84200: PPUSH
84201: PPUSH
84202: PPUSH
84203: PPUSH
84204: PPUSH
// begin enable ;
84205: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
84206: LD_ADDR_VAR 0 3
84210: PUSH
84211: LD_EXP 121
84215: PPUSH
84216: CALL 69033 0 1
84220: ST_TO_ADDR
// if not list then
84221: LD_VAR 0 3
84225: NOT
84226: IFFALSE 84230
// exit ;
84228: GO 84874
// for i := 1 to list do
84230: LD_ADDR_VAR 0 1
84234: PUSH
84235: DOUBLE
84236: LD_INT 1
84238: DEC
84239: ST_TO_ADDR
84240: LD_VAR 0 3
84244: PUSH
84245: FOR_TO
84246: IFFALSE 84872
// begin depot := list [ i ] [ 2 ] ;
84248: LD_ADDR_VAR 0 8
84252: PUSH
84253: LD_VAR 0 3
84257: PUSH
84258: LD_VAR 0 1
84262: ARRAY
84263: PUSH
84264: LD_INT 2
84266: ARRAY
84267: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
84268: LD_ADDR_VAR 0 5
84272: PUSH
84273: LD_VAR 0 3
84277: PUSH
84278: LD_VAR 0 1
84282: ARRAY
84283: PUSH
84284: LD_INT 1
84286: ARRAY
84287: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
84288: LD_VAR 0 8
84292: PPUSH
84293: CALL_OW 301
84297: PUSH
84298: LD_VAR 0 5
84302: PUSH
84303: LD_VAR 0 8
84307: PPUSH
84308: CALL_OW 255
84312: NONEQUAL
84313: OR
84314: IFFALSE 84343
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
84316: LD_ADDR_EXP 121
84320: PUSH
84321: LD_EXP 121
84325: PPUSH
84326: LD_VAR 0 8
84330: PPUSH
84331: LD_INT 0
84333: PPUSH
84334: CALL_OW 1
84338: ST_TO_ADDR
// exit ;
84339: POP
84340: POP
84341: GO 84874
// end ; x := list [ i ] [ 3 ] ;
84343: LD_ADDR_VAR 0 6
84347: PUSH
84348: LD_VAR 0 3
84352: PUSH
84353: LD_VAR 0 1
84357: ARRAY
84358: PUSH
84359: LD_INT 3
84361: ARRAY
84362: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
84363: LD_ADDR_VAR 0 7
84367: PUSH
84368: LD_VAR 0 3
84372: PUSH
84373: LD_VAR 0 1
84377: ARRAY
84378: PUSH
84379: LD_INT 4
84381: ARRAY
84382: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
84383: LD_ADDR_VAR 0 9
84387: PUSH
84388: LD_VAR 0 6
84392: PPUSH
84393: LD_VAR 0 7
84397: PPUSH
84398: LD_INT 16
84400: PPUSH
84401: CALL 67621 0 3
84405: ST_TO_ADDR
// if not cratesNearbyPoint then
84406: LD_VAR 0 9
84410: NOT
84411: IFFALSE 84417
// exit ;
84413: POP
84414: POP
84415: GO 84874
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
84417: LD_ADDR_VAR 0 4
84421: PUSH
84422: LD_INT 22
84424: PUSH
84425: LD_VAR 0 5
84429: PUSH
84430: EMPTY
84431: LIST
84432: LIST
84433: PUSH
84434: LD_INT 3
84436: PUSH
84437: LD_INT 60
84439: PUSH
84440: EMPTY
84441: LIST
84442: PUSH
84443: EMPTY
84444: LIST
84445: LIST
84446: PUSH
84447: LD_INT 91
84449: PUSH
84450: LD_VAR 0 8
84454: PUSH
84455: LD_INT 6
84457: PUSH
84458: EMPTY
84459: LIST
84460: LIST
84461: LIST
84462: PUSH
84463: LD_INT 2
84465: PUSH
84466: LD_INT 25
84468: PUSH
84469: LD_INT 2
84471: PUSH
84472: EMPTY
84473: LIST
84474: LIST
84475: PUSH
84476: LD_INT 25
84478: PUSH
84479: LD_INT 16
84481: PUSH
84482: EMPTY
84483: LIST
84484: LIST
84485: PUSH
84486: EMPTY
84487: LIST
84488: LIST
84489: LIST
84490: PUSH
84491: EMPTY
84492: LIST
84493: LIST
84494: LIST
84495: LIST
84496: PPUSH
84497: CALL_OW 69
84501: PUSH
84502: LD_VAR 0 8
84506: PPUSH
84507: CALL_OW 313
84511: PPUSH
84512: LD_INT 3
84514: PUSH
84515: LD_INT 60
84517: PUSH
84518: EMPTY
84519: LIST
84520: PUSH
84521: EMPTY
84522: LIST
84523: LIST
84524: PUSH
84525: LD_INT 2
84527: PUSH
84528: LD_INT 25
84530: PUSH
84531: LD_INT 2
84533: PUSH
84534: EMPTY
84535: LIST
84536: LIST
84537: PUSH
84538: LD_INT 25
84540: PUSH
84541: LD_INT 16
84543: PUSH
84544: EMPTY
84545: LIST
84546: LIST
84547: PUSH
84548: EMPTY
84549: LIST
84550: LIST
84551: LIST
84552: PUSH
84553: EMPTY
84554: LIST
84555: LIST
84556: PPUSH
84557: CALL_OW 72
84561: UNION
84562: ST_TO_ADDR
// if tmp then
84563: LD_VAR 0 4
84567: IFFALSE 84647
// begin tmp := ShrinkArray ( tmp , 3 ) ;
84569: LD_ADDR_VAR 0 4
84573: PUSH
84574: LD_VAR 0 4
84578: PPUSH
84579: LD_INT 3
84581: PPUSH
84582: CALL 65590 0 2
84586: ST_TO_ADDR
// for j in tmp do
84587: LD_ADDR_VAR 0 2
84591: PUSH
84592: LD_VAR 0 4
84596: PUSH
84597: FOR_IN
84598: IFFALSE 84641
// begin if IsInUnit ( j ) then
84600: LD_VAR 0 2
84604: PPUSH
84605: CALL_OW 310
84609: IFFALSE 84620
// ComExit ( j ) ;
84611: LD_VAR 0 2
84615: PPUSH
84616: CALL 65673 0 1
// AddComCollect ( j , x , y ) ;
84620: LD_VAR 0 2
84624: PPUSH
84625: LD_VAR 0 6
84629: PPUSH
84630: LD_VAR 0 7
84634: PPUSH
84635: CALL_OW 177
// end ;
84639: GO 84597
84641: POP
84642: POP
// exit ;
84643: POP
84644: POP
84645: GO 84874
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
84647: LD_ADDR_VAR 0 4
84651: PUSH
84652: LD_INT 22
84654: PUSH
84655: LD_VAR 0 5
84659: PUSH
84660: EMPTY
84661: LIST
84662: LIST
84663: PUSH
84664: LD_INT 91
84666: PUSH
84667: LD_VAR 0 8
84671: PUSH
84672: LD_INT 8
84674: PUSH
84675: EMPTY
84676: LIST
84677: LIST
84678: LIST
84679: PUSH
84680: LD_INT 2
84682: PUSH
84683: LD_INT 34
84685: PUSH
84686: LD_INT 12
84688: PUSH
84689: EMPTY
84690: LIST
84691: LIST
84692: PUSH
84693: LD_INT 34
84695: PUSH
84696: LD_INT 51
84698: PUSH
84699: EMPTY
84700: LIST
84701: LIST
84702: PUSH
84703: LD_INT 34
84705: PUSH
84706: LD_INT 32
84708: PUSH
84709: EMPTY
84710: LIST
84711: LIST
84712: PUSH
84713: LD_INT 34
84715: PUSH
84716: LD_INT 89
84718: PUSH
84719: EMPTY
84720: LIST
84721: LIST
84722: PUSH
84723: EMPTY
84724: LIST
84725: LIST
84726: LIST
84727: LIST
84728: LIST
84729: PUSH
84730: EMPTY
84731: LIST
84732: LIST
84733: LIST
84734: PPUSH
84735: CALL_OW 69
84739: ST_TO_ADDR
// if tmp then
84740: LD_VAR 0 4
84744: IFFALSE 84870
// begin for j in tmp do
84746: LD_ADDR_VAR 0 2
84750: PUSH
84751: LD_VAR 0 4
84755: PUSH
84756: FOR_IN
84757: IFFALSE 84868
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
84759: LD_VAR 0 2
84763: PPUSH
84764: CALL_OW 262
84768: PUSH
84769: LD_INT 3
84771: EQUAL
84772: PUSH
84773: LD_VAR 0 2
84777: PPUSH
84778: CALL_OW 261
84782: PUSH
84783: LD_INT 20
84785: GREATER
84786: OR
84787: PUSH
84788: LD_VAR 0 2
84792: PPUSH
84793: CALL_OW 314
84797: NOT
84798: AND
84799: PUSH
84800: LD_VAR 0 2
84804: PPUSH
84805: CALL_OW 263
84809: PUSH
84810: LD_INT 1
84812: NONEQUAL
84813: PUSH
84814: LD_VAR 0 2
84818: PPUSH
84819: CALL_OW 311
84823: OR
84824: AND
84825: IFFALSE 84866
// begin ComCollect ( j , x , y ) ;
84827: LD_VAR 0 2
84831: PPUSH
84832: LD_VAR 0 6
84836: PPUSH
84837: LD_VAR 0 7
84841: PPUSH
84842: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
84846: LD_VAR 0 2
84850: PPUSH
84851: LD_VAR 0 8
84855: PPUSH
84856: CALL_OW 172
// exit ;
84860: POP
84861: POP
84862: POP
84863: POP
84864: GO 84874
// end ;
84866: GO 84756
84868: POP
84869: POP
// end ; end ;
84870: GO 84245
84872: POP
84873: POP
// end ; end_of_file
84874: PPOPN 9
84876: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84877: LD_VAR 0 1
84881: PUSH
84882: LD_INT 200
84884: DOUBLE
84885: GREATEREQUAL
84886: IFFALSE 84894
84888: LD_INT 299
84890: DOUBLE
84891: LESSEQUAL
84892: IFTRUE 84896
84894: GO 84928
84896: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84897: LD_VAR 0 1
84901: PPUSH
84902: LD_VAR 0 2
84906: PPUSH
84907: LD_VAR 0 3
84911: PPUSH
84912: LD_VAR 0 4
84916: PPUSH
84917: LD_VAR 0 5
84921: PPUSH
84922: CALL 85416 0 5
84926: GO 85005
84928: LD_INT 300
84930: DOUBLE
84931: GREATEREQUAL
84932: IFFALSE 84940
84934: LD_INT 399
84936: DOUBLE
84937: LESSEQUAL
84938: IFTRUE 84942
84940: GO 85004
84942: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84943: LD_VAR 0 1
84947: PPUSH
84948: LD_VAR 0 2
84952: PPUSH
84953: LD_VAR 0 3
84957: PPUSH
84958: LD_VAR 0 4
84962: PPUSH
84963: LD_VAR 0 5
84967: PPUSH
84968: LD_VAR 0 6
84972: PPUSH
84973: LD_VAR 0 7
84977: PPUSH
84978: LD_VAR 0 8
84982: PPUSH
84983: LD_VAR 0 9
84987: PPUSH
84988: LD_VAR 0 10
84992: PPUSH
84993: LD_VAR 0 11
84997: PPUSH
84998: CALL 81586 0 11
85002: GO 85005
85004: POP
// end ;
85005: PPOPN 11
85007: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
85008: LD_VAR 0 1
85012: PPUSH
85013: LD_VAR 0 2
85017: PPUSH
85018: LD_VAR 0 3
85022: PPUSH
85023: LD_VAR 0 4
85027: PPUSH
85028: LD_VAR 0 5
85032: PPUSH
85033: CALL 85152 0 5
// end ; end_of_file
85037: PPOPN 5
85039: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
85040: LD_INT 0
85042: PPUSH
85043: PPUSH
85044: PPUSH
85045: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
85046: LD_VAR 0 1
85050: PPUSH
85051: CALL_OW 264
85055: PUSH
85056: LD_INT 91
85058: EQUAL
85059: IFFALSE 85131
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
85061: LD_INT 68
85063: PPUSH
85064: LD_VAR 0 1
85068: PPUSH
85069: CALL_OW 255
85073: PPUSH
85074: CALL_OW 321
85078: PUSH
85079: LD_INT 2
85081: EQUAL
85082: IFFALSE 85094
// eff := 70 else
85084: LD_ADDR_VAR 0 4
85088: PUSH
85089: LD_INT 70
85091: ST_TO_ADDR
85092: GO 85102
// eff := 30 ;
85094: LD_ADDR_VAR 0 4
85098: PUSH
85099: LD_INT 30
85101: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
85102: LD_VAR 0 1
85106: PPUSH
85107: CALL_OW 250
85111: PPUSH
85112: LD_VAR 0 1
85116: PPUSH
85117: CALL_OW 251
85121: PPUSH
85122: LD_VAR 0 4
85126: PPUSH
85127: CALL_OW 495
// end ; end ;
85131: LD_VAR 0 2
85135: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
85136: LD_INT 0
85138: PPUSH
// end ;
85139: LD_VAR 0 4
85143: RET
// export function SOS_Command ( cmd ) ; begin
85144: LD_INT 0
85146: PPUSH
// end ;
85147: LD_VAR 0 2
85151: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
85152: LD_INT 0
85154: PPUSH
// end ;
85155: LD_VAR 0 6
85159: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
85160: LD_INT 0
85162: PPUSH
85163: PPUSH
// if not vehicle or not factory then
85164: LD_VAR 0 1
85168: NOT
85169: PUSH
85170: LD_VAR 0 2
85174: NOT
85175: OR
85176: IFFALSE 85180
// exit ;
85178: GO 85411
// if factoryWaypoints >= factory then
85180: LD_EXP 120
85184: PUSH
85185: LD_VAR 0 2
85189: GREATEREQUAL
85190: IFFALSE 85411
// if factoryWaypoints [ factory ] then
85192: LD_EXP 120
85196: PUSH
85197: LD_VAR 0 2
85201: ARRAY
85202: IFFALSE 85411
// begin if GetControl ( vehicle ) = control_manual then
85204: LD_VAR 0 1
85208: PPUSH
85209: CALL_OW 263
85213: PUSH
85214: LD_INT 1
85216: EQUAL
85217: IFFALSE 85298
// begin driver := IsDrivenBy ( vehicle ) ;
85219: LD_ADDR_VAR 0 4
85223: PUSH
85224: LD_VAR 0 1
85228: PPUSH
85229: CALL_OW 311
85233: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
85234: LD_VAR 0 4
85238: PPUSH
85239: LD_EXP 120
85243: PUSH
85244: LD_VAR 0 2
85248: ARRAY
85249: PUSH
85250: LD_INT 3
85252: ARRAY
85253: PPUSH
85254: LD_EXP 120
85258: PUSH
85259: LD_VAR 0 2
85263: ARRAY
85264: PUSH
85265: LD_INT 4
85267: ARRAY
85268: PPUSH
85269: CALL_OW 171
// AddComExitVehicle ( driver ) ;
85273: LD_VAR 0 4
85277: PPUSH
85278: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
85282: LD_VAR 0 4
85286: PPUSH
85287: LD_VAR 0 2
85291: PPUSH
85292: CALL_OW 180
// end else
85296: GO 85411
// if GetControl ( vehicle ) = control_remote then
85298: LD_VAR 0 1
85302: PPUSH
85303: CALL_OW 263
85307: PUSH
85308: LD_INT 2
85310: EQUAL
85311: IFFALSE 85372
// begin wait ( 0 0$2 ) ;
85313: LD_INT 70
85315: PPUSH
85316: CALL_OW 67
// if Connect ( vehicle ) then
85320: LD_VAR 0 1
85324: PPUSH
85325: CALL 35932 0 1
85329: IFFALSE 85370
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
85331: LD_VAR 0 1
85335: PPUSH
85336: LD_EXP 120
85340: PUSH
85341: LD_VAR 0 2
85345: ARRAY
85346: PUSH
85347: LD_INT 3
85349: ARRAY
85350: PPUSH
85351: LD_EXP 120
85355: PUSH
85356: LD_VAR 0 2
85360: ARRAY
85361: PUSH
85362: LD_INT 4
85364: ARRAY
85365: PPUSH
85366: CALL_OW 171
// end else
85370: GO 85411
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
85372: LD_VAR 0 1
85376: PPUSH
85377: LD_EXP 120
85381: PUSH
85382: LD_VAR 0 2
85386: ARRAY
85387: PUSH
85388: LD_INT 3
85390: ARRAY
85391: PPUSH
85392: LD_EXP 120
85396: PUSH
85397: LD_VAR 0 2
85401: ARRAY
85402: PUSH
85403: LD_INT 4
85405: ARRAY
85406: PPUSH
85407: CALL_OW 171
// end ; end ;
85411: LD_VAR 0 3
85415: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
85416: LD_INT 0
85418: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
85419: LD_VAR 0 1
85423: PUSH
85424: LD_INT 250
85426: EQUAL
85427: PUSH
85428: LD_VAR 0 2
85432: PPUSH
85433: CALL_OW 264
85437: PUSH
85438: LD_INT 81
85440: EQUAL
85441: AND
85442: IFFALSE 85463
// MinerPlaceMine ( unit , x , y ) ;
85444: LD_VAR 0 2
85448: PPUSH
85449: LD_VAR 0 4
85453: PPUSH
85454: LD_VAR 0 5
85458: PPUSH
85459: CALL 87848 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
85463: LD_VAR 0 1
85467: PUSH
85468: LD_INT 251
85470: EQUAL
85471: PUSH
85472: LD_VAR 0 2
85476: PPUSH
85477: CALL_OW 264
85481: PUSH
85482: LD_INT 81
85484: EQUAL
85485: AND
85486: IFFALSE 85507
// MinerDetonateMine ( unit , x , y ) ;
85488: LD_VAR 0 2
85492: PPUSH
85493: LD_VAR 0 4
85497: PPUSH
85498: LD_VAR 0 5
85502: PPUSH
85503: CALL 88123 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
85507: LD_VAR 0 1
85511: PUSH
85512: LD_INT 252
85514: EQUAL
85515: PUSH
85516: LD_VAR 0 2
85520: PPUSH
85521: CALL_OW 264
85525: PUSH
85526: LD_INT 81
85528: EQUAL
85529: AND
85530: IFFALSE 85551
// MinerCreateMinefield ( unit , x , y ) ;
85532: LD_VAR 0 2
85536: PPUSH
85537: LD_VAR 0 4
85541: PPUSH
85542: LD_VAR 0 5
85546: PPUSH
85547: CALL 88540 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
85551: LD_VAR 0 1
85555: PUSH
85556: LD_INT 253
85558: EQUAL
85559: PUSH
85560: LD_VAR 0 2
85564: PPUSH
85565: CALL_OW 257
85569: PUSH
85570: LD_INT 5
85572: EQUAL
85573: AND
85574: IFFALSE 85595
// ComBinocular ( unit , x , y ) ;
85576: LD_VAR 0 2
85580: PPUSH
85581: LD_VAR 0 4
85585: PPUSH
85586: LD_VAR 0 5
85590: PPUSH
85591: CALL 88909 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
85595: LD_VAR 0 1
85599: PUSH
85600: LD_INT 254
85602: EQUAL
85603: PUSH
85604: LD_VAR 0 2
85608: PPUSH
85609: CALL_OW 264
85613: PUSH
85614: LD_INT 99
85616: EQUAL
85617: AND
85618: PUSH
85619: LD_VAR 0 3
85623: PPUSH
85624: CALL_OW 263
85628: PUSH
85629: LD_INT 3
85631: EQUAL
85632: AND
85633: IFFALSE 85649
// HackDestroyVehicle ( unit , selectedUnit ) ;
85635: LD_VAR 0 2
85639: PPUSH
85640: LD_VAR 0 3
85644: PPUSH
85645: CALL 87212 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
85649: LD_VAR 0 1
85653: PUSH
85654: LD_INT 255
85656: EQUAL
85657: PUSH
85658: LD_VAR 0 2
85662: PPUSH
85663: CALL_OW 264
85667: PUSH
85668: LD_INT 14
85670: PUSH
85671: LD_INT 53
85673: PUSH
85674: EMPTY
85675: LIST
85676: LIST
85677: IN
85678: AND
85679: PUSH
85680: LD_VAR 0 4
85684: PPUSH
85685: LD_VAR 0 5
85689: PPUSH
85690: CALL_OW 488
85694: AND
85695: IFFALSE 85719
// CutTreeXYR ( unit , x , y , 12 ) ;
85697: LD_VAR 0 2
85701: PPUSH
85702: LD_VAR 0 4
85706: PPUSH
85707: LD_VAR 0 5
85711: PPUSH
85712: LD_INT 12
85714: PPUSH
85715: CALL 85782 0 4
// if cmd = 256 then
85719: LD_VAR 0 1
85723: PUSH
85724: LD_INT 256
85726: EQUAL
85727: IFFALSE 85748
// SetFactoryWaypoint ( unit , x , y ) ;
85729: LD_VAR 0 2
85733: PPUSH
85734: LD_VAR 0 4
85738: PPUSH
85739: LD_VAR 0 5
85743: PPUSH
85744: CALL 83566 0 3
// if cmd = 257 then
85748: LD_VAR 0 1
85752: PUSH
85753: LD_INT 257
85755: EQUAL
85756: IFFALSE 85777
// SetWarehouseGatheringPoint ( unit , x , y ) ;
85758: LD_VAR 0 2
85762: PPUSH
85763: LD_VAR 0 4
85767: PPUSH
85768: LD_VAR 0 5
85772: PPUSH
85773: CALL 83928 0 3
// end ;
85777: LD_VAR 0 6
85781: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
85782: LD_INT 0
85784: PPUSH
85785: PPUSH
85786: PPUSH
85787: PPUSH
85788: PPUSH
85789: PPUSH
85790: PPUSH
85791: PPUSH
85792: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
85793: LD_VAR 0 1
85797: NOT
85798: PUSH
85799: LD_VAR 0 2
85803: PPUSH
85804: LD_VAR 0 3
85808: PPUSH
85809: CALL_OW 488
85813: NOT
85814: OR
85815: PUSH
85816: LD_VAR 0 4
85820: NOT
85821: OR
85822: IFFALSE 85826
// exit ;
85824: GO 86166
// list := [ ] ;
85826: LD_ADDR_VAR 0 13
85830: PUSH
85831: EMPTY
85832: ST_TO_ADDR
// if x - r < 0 then
85833: LD_VAR 0 2
85837: PUSH
85838: LD_VAR 0 4
85842: MINUS
85843: PUSH
85844: LD_INT 0
85846: LESS
85847: IFFALSE 85859
// min_x := 0 else
85849: LD_ADDR_VAR 0 7
85853: PUSH
85854: LD_INT 0
85856: ST_TO_ADDR
85857: GO 85875
// min_x := x - r ;
85859: LD_ADDR_VAR 0 7
85863: PUSH
85864: LD_VAR 0 2
85868: PUSH
85869: LD_VAR 0 4
85873: MINUS
85874: ST_TO_ADDR
// if y - r < 0 then
85875: LD_VAR 0 3
85879: PUSH
85880: LD_VAR 0 4
85884: MINUS
85885: PUSH
85886: LD_INT 0
85888: LESS
85889: IFFALSE 85901
// min_y := 0 else
85891: LD_ADDR_VAR 0 8
85895: PUSH
85896: LD_INT 0
85898: ST_TO_ADDR
85899: GO 85917
// min_y := y - r ;
85901: LD_ADDR_VAR 0 8
85905: PUSH
85906: LD_VAR 0 3
85910: PUSH
85911: LD_VAR 0 4
85915: MINUS
85916: ST_TO_ADDR
// max_x := x + r ;
85917: LD_ADDR_VAR 0 9
85921: PUSH
85922: LD_VAR 0 2
85926: PUSH
85927: LD_VAR 0 4
85931: PLUS
85932: ST_TO_ADDR
// max_y := y + r ;
85933: LD_ADDR_VAR 0 10
85937: PUSH
85938: LD_VAR 0 3
85942: PUSH
85943: LD_VAR 0 4
85947: PLUS
85948: ST_TO_ADDR
// for _x = min_x to max_x do
85949: LD_ADDR_VAR 0 11
85953: PUSH
85954: DOUBLE
85955: LD_VAR 0 7
85959: DEC
85960: ST_TO_ADDR
85961: LD_VAR 0 9
85965: PUSH
85966: FOR_TO
85967: IFFALSE 86084
// for _y = min_y to max_y do
85969: LD_ADDR_VAR 0 12
85973: PUSH
85974: DOUBLE
85975: LD_VAR 0 8
85979: DEC
85980: ST_TO_ADDR
85981: LD_VAR 0 10
85985: PUSH
85986: FOR_TO
85987: IFFALSE 86080
// begin if not ValidHex ( _x , _y ) then
85989: LD_VAR 0 11
85993: PPUSH
85994: LD_VAR 0 12
85998: PPUSH
85999: CALL_OW 488
86003: NOT
86004: IFFALSE 86008
// continue ;
86006: GO 85986
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
86008: LD_VAR 0 11
86012: PPUSH
86013: LD_VAR 0 12
86017: PPUSH
86018: CALL_OW 351
86022: PUSH
86023: LD_VAR 0 11
86027: PPUSH
86028: LD_VAR 0 12
86032: PPUSH
86033: CALL_OW 554
86037: AND
86038: IFFALSE 86078
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
86040: LD_ADDR_VAR 0 13
86044: PUSH
86045: LD_VAR 0 13
86049: PPUSH
86050: LD_VAR 0 13
86054: PUSH
86055: LD_INT 1
86057: PLUS
86058: PPUSH
86059: LD_VAR 0 11
86063: PUSH
86064: LD_VAR 0 12
86068: PUSH
86069: EMPTY
86070: LIST
86071: LIST
86072: PPUSH
86073: CALL_OW 2
86077: ST_TO_ADDR
// end ;
86078: GO 85986
86080: POP
86081: POP
86082: GO 85966
86084: POP
86085: POP
// if not list then
86086: LD_VAR 0 13
86090: NOT
86091: IFFALSE 86095
// exit ;
86093: GO 86166
// for i in list do
86095: LD_ADDR_VAR 0 6
86099: PUSH
86100: LD_VAR 0 13
86104: PUSH
86105: FOR_IN
86106: IFFALSE 86164
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
86108: LD_VAR 0 1
86112: PPUSH
86113: LD_STRING M
86115: PUSH
86116: LD_VAR 0 6
86120: PUSH
86121: LD_INT 1
86123: ARRAY
86124: PUSH
86125: LD_VAR 0 6
86129: PUSH
86130: LD_INT 2
86132: ARRAY
86133: PUSH
86134: LD_INT 0
86136: PUSH
86137: LD_INT 0
86139: PUSH
86140: LD_INT 0
86142: PUSH
86143: LD_INT 0
86145: PUSH
86146: EMPTY
86147: LIST
86148: LIST
86149: LIST
86150: LIST
86151: LIST
86152: LIST
86153: LIST
86154: PUSH
86155: EMPTY
86156: LIST
86157: PPUSH
86158: CALL_OW 447
86162: GO 86105
86164: POP
86165: POP
// end ;
86166: LD_VAR 0 5
86170: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
86171: LD_EXP 123
86175: NOT
86176: IFFALSE 86226
86178: GO 86180
86180: DISABLE
// begin initHack := true ;
86181: LD_ADDR_EXP 123
86185: PUSH
86186: LD_INT 1
86188: ST_TO_ADDR
// hackTanks := [ ] ;
86189: LD_ADDR_EXP 124
86193: PUSH
86194: EMPTY
86195: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
86196: LD_ADDR_EXP 125
86200: PUSH
86201: EMPTY
86202: ST_TO_ADDR
// hackLimit := 3 ;
86203: LD_ADDR_EXP 126
86207: PUSH
86208: LD_INT 3
86210: ST_TO_ADDR
// hackDist := 12 ;
86211: LD_ADDR_EXP 127
86215: PUSH
86216: LD_INT 12
86218: ST_TO_ADDR
// hackCounter := [ ] ;
86219: LD_ADDR_EXP 128
86223: PUSH
86224: EMPTY
86225: ST_TO_ADDR
// end ;
86226: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
86227: LD_EXP 123
86231: PUSH
86232: LD_INT 34
86234: PUSH
86235: LD_INT 99
86237: PUSH
86238: EMPTY
86239: LIST
86240: LIST
86241: PPUSH
86242: CALL_OW 69
86246: AND
86247: IFFALSE 86500
86249: GO 86251
86251: DISABLE
86252: LD_INT 0
86254: PPUSH
86255: PPUSH
// begin enable ;
86256: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
86257: LD_ADDR_VAR 0 1
86261: PUSH
86262: LD_INT 34
86264: PUSH
86265: LD_INT 99
86267: PUSH
86268: EMPTY
86269: LIST
86270: LIST
86271: PPUSH
86272: CALL_OW 69
86276: PUSH
86277: FOR_IN
86278: IFFALSE 86498
// begin if not i in hackTanks then
86280: LD_VAR 0 1
86284: PUSH
86285: LD_EXP 124
86289: IN
86290: NOT
86291: IFFALSE 86374
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
86293: LD_ADDR_EXP 124
86297: PUSH
86298: LD_EXP 124
86302: PPUSH
86303: LD_EXP 124
86307: PUSH
86308: LD_INT 1
86310: PLUS
86311: PPUSH
86312: LD_VAR 0 1
86316: PPUSH
86317: CALL_OW 1
86321: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
86322: LD_ADDR_EXP 125
86326: PUSH
86327: LD_EXP 125
86331: PPUSH
86332: LD_EXP 125
86336: PUSH
86337: LD_INT 1
86339: PLUS
86340: PPUSH
86341: EMPTY
86342: PPUSH
86343: CALL_OW 1
86347: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
86348: LD_ADDR_EXP 128
86352: PUSH
86353: LD_EXP 128
86357: PPUSH
86358: LD_EXP 128
86362: PUSH
86363: LD_INT 1
86365: PLUS
86366: PPUSH
86367: EMPTY
86368: PPUSH
86369: CALL_OW 1
86373: ST_TO_ADDR
// end ; if not IsOk ( i ) then
86374: LD_VAR 0 1
86378: PPUSH
86379: CALL_OW 302
86383: NOT
86384: IFFALSE 86397
// begin HackUnlinkAll ( i ) ;
86386: LD_VAR 0 1
86390: PPUSH
86391: CALL 86503 0 1
// continue ;
86395: GO 86277
// end ; HackCheckCapturedStatus ( i ) ;
86397: LD_VAR 0 1
86401: PPUSH
86402: CALL 86946 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
86406: LD_ADDR_VAR 0 2
86410: PUSH
86411: LD_INT 81
86413: PUSH
86414: LD_VAR 0 1
86418: PPUSH
86419: CALL_OW 255
86423: PUSH
86424: EMPTY
86425: LIST
86426: LIST
86427: PUSH
86428: LD_INT 33
86430: PUSH
86431: LD_INT 3
86433: PUSH
86434: EMPTY
86435: LIST
86436: LIST
86437: PUSH
86438: LD_INT 91
86440: PUSH
86441: LD_VAR 0 1
86445: PUSH
86446: LD_EXP 127
86450: PUSH
86451: EMPTY
86452: LIST
86453: LIST
86454: LIST
86455: PUSH
86456: LD_INT 50
86458: PUSH
86459: EMPTY
86460: LIST
86461: PUSH
86462: EMPTY
86463: LIST
86464: LIST
86465: LIST
86466: LIST
86467: PPUSH
86468: CALL_OW 69
86472: ST_TO_ADDR
// if not tmp then
86473: LD_VAR 0 2
86477: NOT
86478: IFFALSE 86482
// continue ;
86480: GO 86277
// HackLink ( i , tmp ) ;
86482: LD_VAR 0 1
86486: PPUSH
86487: LD_VAR 0 2
86491: PPUSH
86492: CALL 86639 0 2
// end ;
86496: GO 86277
86498: POP
86499: POP
// end ;
86500: PPOPN 2
86502: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
86503: LD_INT 0
86505: PPUSH
86506: PPUSH
86507: PPUSH
// if not hack in hackTanks then
86508: LD_VAR 0 1
86512: PUSH
86513: LD_EXP 124
86517: IN
86518: NOT
86519: IFFALSE 86523
// exit ;
86521: GO 86634
// index := GetElementIndex ( hackTanks , hack ) ;
86523: LD_ADDR_VAR 0 4
86527: PUSH
86528: LD_EXP 124
86532: PPUSH
86533: LD_VAR 0 1
86537: PPUSH
86538: CALL 32748 0 2
86542: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
86543: LD_EXP 125
86547: PUSH
86548: LD_VAR 0 4
86552: ARRAY
86553: IFFALSE 86634
// begin for i in hackTanksCaptured [ index ] do
86555: LD_ADDR_VAR 0 3
86559: PUSH
86560: LD_EXP 125
86564: PUSH
86565: LD_VAR 0 4
86569: ARRAY
86570: PUSH
86571: FOR_IN
86572: IFFALSE 86598
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
86574: LD_VAR 0 3
86578: PUSH
86579: LD_INT 1
86581: ARRAY
86582: PPUSH
86583: LD_VAR 0 3
86587: PUSH
86588: LD_INT 2
86590: ARRAY
86591: PPUSH
86592: CALL_OW 235
86596: GO 86571
86598: POP
86599: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
86600: LD_ADDR_EXP 125
86604: PUSH
86605: LD_EXP 125
86609: PPUSH
86610: LD_VAR 0 4
86614: PPUSH
86615: EMPTY
86616: PPUSH
86617: CALL_OW 1
86621: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
86622: LD_VAR 0 1
86626: PPUSH
86627: LD_INT 0
86629: PPUSH
86630: CALL_OW 505
// end ; end ;
86634: LD_VAR 0 2
86638: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
86639: LD_INT 0
86641: PPUSH
86642: PPUSH
86643: PPUSH
// if not hack in hackTanks or not vehicles then
86644: LD_VAR 0 1
86648: PUSH
86649: LD_EXP 124
86653: IN
86654: NOT
86655: PUSH
86656: LD_VAR 0 2
86660: NOT
86661: OR
86662: IFFALSE 86666
// exit ;
86664: GO 86941
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
86666: LD_ADDR_VAR 0 2
86670: PUSH
86671: LD_VAR 0 1
86675: PPUSH
86676: LD_VAR 0 2
86680: PPUSH
86681: LD_INT 1
86683: PPUSH
86684: LD_INT 1
86686: PPUSH
86687: CALL 33398 0 4
86691: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
86692: LD_ADDR_VAR 0 5
86696: PUSH
86697: LD_EXP 124
86701: PPUSH
86702: LD_VAR 0 1
86706: PPUSH
86707: CALL 32748 0 2
86711: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
86712: LD_EXP 125
86716: PUSH
86717: LD_VAR 0 5
86721: ARRAY
86722: PUSH
86723: LD_EXP 126
86727: LESS
86728: IFFALSE 86917
// begin for i := 1 to vehicles do
86730: LD_ADDR_VAR 0 4
86734: PUSH
86735: DOUBLE
86736: LD_INT 1
86738: DEC
86739: ST_TO_ADDR
86740: LD_VAR 0 2
86744: PUSH
86745: FOR_TO
86746: IFFALSE 86915
// begin if hackTanksCaptured [ index ] = hackLimit then
86748: LD_EXP 125
86752: PUSH
86753: LD_VAR 0 5
86757: ARRAY
86758: PUSH
86759: LD_EXP 126
86763: EQUAL
86764: IFFALSE 86768
// break ;
86766: GO 86915
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
86768: LD_ADDR_EXP 128
86772: PUSH
86773: LD_EXP 128
86777: PPUSH
86778: LD_VAR 0 5
86782: PPUSH
86783: LD_EXP 128
86787: PUSH
86788: LD_VAR 0 5
86792: ARRAY
86793: PUSH
86794: LD_INT 1
86796: PLUS
86797: PPUSH
86798: CALL_OW 1
86802: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
86803: LD_ADDR_EXP 125
86807: PUSH
86808: LD_EXP 125
86812: PPUSH
86813: LD_VAR 0 5
86817: PUSH
86818: LD_EXP 125
86822: PUSH
86823: LD_VAR 0 5
86827: ARRAY
86828: PUSH
86829: LD_INT 1
86831: PLUS
86832: PUSH
86833: EMPTY
86834: LIST
86835: LIST
86836: PPUSH
86837: LD_VAR 0 2
86841: PUSH
86842: LD_VAR 0 4
86846: ARRAY
86847: PUSH
86848: LD_VAR 0 2
86852: PUSH
86853: LD_VAR 0 4
86857: ARRAY
86858: PPUSH
86859: CALL_OW 255
86863: PUSH
86864: EMPTY
86865: LIST
86866: LIST
86867: PPUSH
86868: CALL 32963 0 3
86872: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
86873: LD_VAR 0 2
86877: PUSH
86878: LD_VAR 0 4
86882: ARRAY
86883: PPUSH
86884: LD_VAR 0 1
86888: PPUSH
86889: CALL_OW 255
86893: PPUSH
86894: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
86898: LD_VAR 0 2
86902: PUSH
86903: LD_VAR 0 4
86907: ARRAY
86908: PPUSH
86909: CALL_OW 141
// end ;
86913: GO 86745
86915: POP
86916: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
86917: LD_VAR 0 1
86921: PPUSH
86922: LD_EXP 125
86926: PUSH
86927: LD_VAR 0 5
86931: ARRAY
86932: PUSH
86933: LD_INT 0
86935: PLUS
86936: PPUSH
86937: CALL_OW 505
// end ;
86941: LD_VAR 0 3
86945: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
86946: LD_INT 0
86948: PPUSH
86949: PPUSH
86950: PPUSH
86951: PPUSH
// if not hack in hackTanks then
86952: LD_VAR 0 1
86956: PUSH
86957: LD_EXP 124
86961: IN
86962: NOT
86963: IFFALSE 86967
// exit ;
86965: GO 87207
// index := GetElementIndex ( hackTanks , hack ) ;
86967: LD_ADDR_VAR 0 4
86971: PUSH
86972: LD_EXP 124
86976: PPUSH
86977: LD_VAR 0 1
86981: PPUSH
86982: CALL 32748 0 2
86986: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
86987: LD_ADDR_VAR 0 3
86991: PUSH
86992: DOUBLE
86993: LD_EXP 125
86997: PUSH
86998: LD_VAR 0 4
87002: ARRAY
87003: INC
87004: ST_TO_ADDR
87005: LD_INT 1
87007: PUSH
87008: FOR_DOWNTO
87009: IFFALSE 87181
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
87011: LD_ADDR_VAR 0 5
87015: PUSH
87016: LD_EXP 125
87020: PUSH
87021: LD_VAR 0 4
87025: ARRAY
87026: PUSH
87027: LD_VAR 0 3
87031: ARRAY
87032: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
87033: LD_VAR 0 5
87037: PUSH
87038: LD_INT 1
87040: ARRAY
87041: PPUSH
87042: CALL_OW 302
87046: NOT
87047: PUSH
87048: LD_VAR 0 5
87052: PUSH
87053: LD_INT 1
87055: ARRAY
87056: PPUSH
87057: CALL_OW 255
87061: PUSH
87062: LD_VAR 0 1
87066: PPUSH
87067: CALL_OW 255
87071: NONEQUAL
87072: OR
87073: IFFALSE 87179
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
87075: LD_VAR 0 5
87079: PUSH
87080: LD_INT 1
87082: ARRAY
87083: PPUSH
87084: CALL_OW 305
87088: PUSH
87089: LD_VAR 0 5
87093: PUSH
87094: LD_INT 1
87096: ARRAY
87097: PPUSH
87098: CALL_OW 255
87102: PUSH
87103: LD_VAR 0 1
87107: PPUSH
87108: CALL_OW 255
87112: EQUAL
87113: AND
87114: IFFALSE 87138
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
87116: LD_VAR 0 5
87120: PUSH
87121: LD_INT 1
87123: ARRAY
87124: PPUSH
87125: LD_VAR 0 5
87129: PUSH
87130: LD_INT 2
87132: ARRAY
87133: PPUSH
87134: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
87138: LD_ADDR_EXP 125
87142: PUSH
87143: LD_EXP 125
87147: PPUSH
87148: LD_VAR 0 4
87152: PPUSH
87153: LD_EXP 125
87157: PUSH
87158: LD_VAR 0 4
87162: ARRAY
87163: PPUSH
87164: LD_VAR 0 3
87168: PPUSH
87169: CALL_OW 3
87173: PPUSH
87174: CALL_OW 1
87178: ST_TO_ADDR
// end ; end ;
87179: GO 87008
87181: POP
87182: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
87183: LD_VAR 0 1
87187: PPUSH
87188: LD_EXP 125
87192: PUSH
87193: LD_VAR 0 4
87197: ARRAY
87198: PUSH
87199: LD_INT 0
87201: PLUS
87202: PPUSH
87203: CALL_OW 505
// end ;
87207: LD_VAR 0 2
87211: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
87212: LD_INT 0
87214: PPUSH
87215: PPUSH
87216: PPUSH
87217: PPUSH
// if not hack in hackTanks then
87218: LD_VAR 0 1
87222: PUSH
87223: LD_EXP 124
87227: IN
87228: NOT
87229: IFFALSE 87233
// exit ;
87231: GO 87318
// index := GetElementIndex ( hackTanks , hack ) ;
87233: LD_ADDR_VAR 0 5
87237: PUSH
87238: LD_EXP 124
87242: PPUSH
87243: LD_VAR 0 1
87247: PPUSH
87248: CALL 32748 0 2
87252: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
87253: LD_ADDR_VAR 0 4
87257: PUSH
87258: DOUBLE
87259: LD_INT 1
87261: DEC
87262: ST_TO_ADDR
87263: LD_EXP 125
87267: PUSH
87268: LD_VAR 0 5
87272: ARRAY
87273: PUSH
87274: FOR_TO
87275: IFFALSE 87316
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
87277: LD_EXP 125
87281: PUSH
87282: LD_VAR 0 5
87286: ARRAY
87287: PUSH
87288: LD_VAR 0 4
87292: ARRAY
87293: PUSH
87294: LD_INT 1
87296: ARRAY
87297: PUSH
87298: LD_VAR 0 2
87302: EQUAL
87303: IFFALSE 87314
// KillUnit ( vehicle ) ;
87305: LD_VAR 0 2
87309: PPUSH
87310: CALL_OW 66
87314: GO 87274
87316: POP
87317: POP
// end ;
87318: LD_VAR 0 3
87322: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
87323: LD_EXP 129
87327: NOT
87328: IFFALSE 87363
87330: GO 87332
87332: DISABLE
// begin initMiner := true ;
87333: LD_ADDR_EXP 129
87337: PUSH
87338: LD_INT 1
87340: ST_TO_ADDR
// minersList := [ ] ;
87341: LD_ADDR_EXP 130
87345: PUSH
87346: EMPTY
87347: ST_TO_ADDR
// minerMinesList := [ ] ;
87348: LD_ADDR_EXP 131
87352: PUSH
87353: EMPTY
87354: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
87355: LD_ADDR_EXP 132
87359: PUSH
87360: LD_INT 5
87362: ST_TO_ADDR
// end ;
87363: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
87364: LD_EXP 129
87368: PUSH
87369: LD_INT 34
87371: PUSH
87372: LD_INT 81
87374: PUSH
87375: EMPTY
87376: LIST
87377: LIST
87378: PPUSH
87379: CALL_OW 69
87383: AND
87384: IFFALSE 87845
87386: GO 87388
87388: DISABLE
87389: LD_INT 0
87391: PPUSH
87392: PPUSH
87393: PPUSH
87394: PPUSH
// begin enable ;
87395: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
87396: LD_ADDR_VAR 0 1
87400: PUSH
87401: LD_INT 34
87403: PUSH
87404: LD_INT 81
87406: PUSH
87407: EMPTY
87408: LIST
87409: LIST
87410: PPUSH
87411: CALL_OW 69
87415: PUSH
87416: FOR_IN
87417: IFFALSE 87489
// begin if not i in minersList then
87419: LD_VAR 0 1
87423: PUSH
87424: LD_EXP 130
87428: IN
87429: NOT
87430: IFFALSE 87487
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
87432: LD_ADDR_EXP 130
87436: PUSH
87437: LD_EXP 130
87441: PPUSH
87442: LD_EXP 130
87446: PUSH
87447: LD_INT 1
87449: PLUS
87450: PPUSH
87451: LD_VAR 0 1
87455: PPUSH
87456: CALL_OW 1
87460: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
87461: LD_ADDR_EXP 131
87465: PUSH
87466: LD_EXP 131
87470: PPUSH
87471: LD_EXP 131
87475: PUSH
87476: LD_INT 1
87478: PLUS
87479: PPUSH
87480: EMPTY
87481: PPUSH
87482: CALL_OW 1
87486: ST_TO_ADDR
// end end ;
87487: GO 87416
87489: POP
87490: POP
// for i := minerMinesList downto 1 do
87491: LD_ADDR_VAR 0 1
87495: PUSH
87496: DOUBLE
87497: LD_EXP 131
87501: INC
87502: ST_TO_ADDR
87503: LD_INT 1
87505: PUSH
87506: FOR_DOWNTO
87507: IFFALSE 87843
// begin if IsLive ( minersList [ i ] ) then
87509: LD_EXP 130
87513: PUSH
87514: LD_VAR 0 1
87518: ARRAY
87519: PPUSH
87520: CALL_OW 300
87524: IFFALSE 87552
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
87526: LD_EXP 130
87530: PUSH
87531: LD_VAR 0 1
87535: ARRAY
87536: PPUSH
87537: LD_EXP 131
87541: PUSH
87542: LD_VAR 0 1
87546: ARRAY
87547: PPUSH
87548: CALL_OW 505
// if not minerMinesList [ i ] then
87552: LD_EXP 131
87556: PUSH
87557: LD_VAR 0 1
87561: ARRAY
87562: NOT
87563: IFFALSE 87567
// continue ;
87565: GO 87506
// for j := minerMinesList [ i ] downto 1 do
87567: LD_ADDR_VAR 0 2
87571: PUSH
87572: DOUBLE
87573: LD_EXP 131
87577: PUSH
87578: LD_VAR 0 1
87582: ARRAY
87583: INC
87584: ST_TO_ADDR
87585: LD_INT 1
87587: PUSH
87588: FOR_DOWNTO
87589: IFFALSE 87839
// begin side := GetSide ( minersList [ i ] ) ;
87591: LD_ADDR_VAR 0 3
87595: PUSH
87596: LD_EXP 130
87600: PUSH
87601: LD_VAR 0 1
87605: ARRAY
87606: PPUSH
87607: CALL_OW 255
87611: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
87612: LD_ADDR_VAR 0 4
87616: PUSH
87617: LD_EXP 131
87621: PUSH
87622: LD_VAR 0 1
87626: ARRAY
87627: PUSH
87628: LD_VAR 0 2
87632: ARRAY
87633: PUSH
87634: LD_INT 1
87636: ARRAY
87637: PPUSH
87638: LD_EXP 131
87642: PUSH
87643: LD_VAR 0 1
87647: ARRAY
87648: PUSH
87649: LD_VAR 0 2
87653: ARRAY
87654: PUSH
87655: LD_INT 2
87657: ARRAY
87658: PPUSH
87659: CALL_OW 428
87663: ST_TO_ADDR
// if not tmp then
87664: LD_VAR 0 4
87668: NOT
87669: IFFALSE 87673
// continue ;
87671: GO 87588
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
87673: LD_VAR 0 4
87677: PUSH
87678: LD_INT 81
87680: PUSH
87681: LD_VAR 0 3
87685: PUSH
87686: EMPTY
87687: LIST
87688: LIST
87689: PPUSH
87690: CALL_OW 69
87694: IN
87695: PUSH
87696: LD_EXP 131
87700: PUSH
87701: LD_VAR 0 1
87705: ARRAY
87706: PUSH
87707: LD_VAR 0 2
87711: ARRAY
87712: PUSH
87713: LD_INT 1
87715: ARRAY
87716: PPUSH
87717: LD_EXP 131
87721: PUSH
87722: LD_VAR 0 1
87726: ARRAY
87727: PUSH
87728: LD_VAR 0 2
87732: ARRAY
87733: PUSH
87734: LD_INT 2
87736: ARRAY
87737: PPUSH
87738: CALL_OW 458
87742: AND
87743: IFFALSE 87837
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
87745: LD_EXP 131
87749: PUSH
87750: LD_VAR 0 1
87754: ARRAY
87755: PUSH
87756: LD_VAR 0 2
87760: ARRAY
87761: PUSH
87762: LD_INT 1
87764: ARRAY
87765: PPUSH
87766: LD_EXP 131
87770: PUSH
87771: LD_VAR 0 1
87775: ARRAY
87776: PUSH
87777: LD_VAR 0 2
87781: ARRAY
87782: PUSH
87783: LD_INT 2
87785: ARRAY
87786: PPUSH
87787: LD_VAR 0 3
87791: PPUSH
87792: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
87796: LD_ADDR_EXP 131
87800: PUSH
87801: LD_EXP 131
87805: PPUSH
87806: LD_VAR 0 1
87810: PPUSH
87811: LD_EXP 131
87815: PUSH
87816: LD_VAR 0 1
87820: ARRAY
87821: PPUSH
87822: LD_VAR 0 2
87826: PPUSH
87827: CALL_OW 3
87831: PPUSH
87832: CALL_OW 1
87836: ST_TO_ADDR
// end ; end ;
87837: GO 87588
87839: POP
87840: POP
// end ;
87841: GO 87506
87843: POP
87844: POP
// end ;
87845: PPOPN 4
87847: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
87848: LD_INT 0
87850: PPUSH
87851: PPUSH
// result := false ;
87852: LD_ADDR_VAR 0 4
87856: PUSH
87857: LD_INT 0
87859: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
87860: LD_VAR 0 1
87864: PPUSH
87865: CALL_OW 264
87869: PUSH
87870: LD_INT 81
87872: EQUAL
87873: NOT
87874: IFFALSE 87878
// exit ;
87876: GO 88118
// index := GetElementIndex ( minersList , unit ) ;
87878: LD_ADDR_VAR 0 5
87882: PUSH
87883: LD_EXP 130
87887: PPUSH
87888: LD_VAR 0 1
87892: PPUSH
87893: CALL 32748 0 2
87897: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
87898: LD_EXP 131
87902: PUSH
87903: LD_VAR 0 5
87907: ARRAY
87908: PUSH
87909: LD_EXP 132
87913: GREATEREQUAL
87914: IFFALSE 87918
// exit ;
87916: GO 88118
// ComMoveXY ( unit , x , y ) ;
87918: LD_VAR 0 1
87922: PPUSH
87923: LD_VAR 0 2
87927: PPUSH
87928: LD_VAR 0 3
87932: PPUSH
87933: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
87937: LD_INT 35
87939: PPUSH
87940: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
87944: LD_VAR 0 1
87948: PPUSH
87949: LD_VAR 0 2
87953: PPUSH
87954: LD_VAR 0 3
87958: PPUSH
87959: CALL 64084 0 3
87963: NOT
87964: PUSH
87965: LD_VAR 0 1
87969: PPUSH
87970: CALL_OW 314
87974: AND
87975: IFFALSE 87979
// exit ;
87977: GO 88118
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
87979: LD_VAR 0 2
87983: PPUSH
87984: LD_VAR 0 3
87988: PPUSH
87989: CALL_OW 428
87993: PUSH
87994: LD_VAR 0 1
87998: EQUAL
87999: PUSH
88000: LD_VAR 0 1
88004: PPUSH
88005: CALL_OW 314
88009: NOT
88010: AND
88011: IFFALSE 87937
// PlaySoundXY ( x , y , PlantMine ) ;
88013: LD_VAR 0 2
88017: PPUSH
88018: LD_VAR 0 3
88022: PPUSH
88023: LD_STRING PlantMine
88025: PPUSH
88026: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
88030: LD_VAR 0 2
88034: PPUSH
88035: LD_VAR 0 3
88039: PPUSH
88040: LD_VAR 0 1
88044: PPUSH
88045: CALL_OW 255
88049: PPUSH
88050: LD_INT 0
88052: PPUSH
88053: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
88057: LD_ADDR_EXP 131
88061: PUSH
88062: LD_EXP 131
88066: PPUSH
88067: LD_VAR 0 5
88071: PUSH
88072: LD_EXP 131
88076: PUSH
88077: LD_VAR 0 5
88081: ARRAY
88082: PUSH
88083: LD_INT 1
88085: PLUS
88086: PUSH
88087: EMPTY
88088: LIST
88089: LIST
88090: PPUSH
88091: LD_VAR 0 2
88095: PUSH
88096: LD_VAR 0 3
88100: PUSH
88101: EMPTY
88102: LIST
88103: LIST
88104: PPUSH
88105: CALL 32963 0 3
88109: ST_TO_ADDR
// result := true ;
88110: LD_ADDR_VAR 0 4
88114: PUSH
88115: LD_INT 1
88117: ST_TO_ADDR
// end ;
88118: LD_VAR 0 4
88122: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
88123: LD_INT 0
88125: PPUSH
88126: PPUSH
88127: PPUSH
// if not unit in minersList then
88128: LD_VAR 0 1
88132: PUSH
88133: LD_EXP 130
88137: IN
88138: NOT
88139: IFFALSE 88143
// exit ;
88141: GO 88535
// index := GetElementIndex ( minersList , unit ) ;
88143: LD_ADDR_VAR 0 6
88147: PUSH
88148: LD_EXP 130
88152: PPUSH
88153: LD_VAR 0 1
88157: PPUSH
88158: CALL 32748 0 2
88162: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
88163: LD_ADDR_VAR 0 5
88167: PUSH
88168: DOUBLE
88169: LD_EXP 131
88173: PUSH
88174: LD_VAR 0 6
88178: ARRAY
88179: INC
88180: ST_TO_ADDR
88181: LD_INT 1
88183: PUSH
88184: FOR_DOWNTO
88185: IFFALSE 88346
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
88187: LD_EXP 131
88191: PUSH
88192: LD_VAR 0 6
88196: ARRAY
88197: PUSH
88198: LD_VAR 0 5
88202: ARRAY
88203: PUSH
88204: LD_INT 1
88206: ARRAY
88207: PUSH
88208: LD_VAR 0 2
88212: EQUAL
88213: PUSH
88214: LD_EXP 131
88218: PUSH
88219: LD_VAR 0 6
88223: ARRAY
88224: PUSH
88225: LD_VAR 0 5
88229: ARRAY
88230: PUSH
88231: LD_INT 2
88233: ARRAY
88234: PUSH
88235: LD_VAR 0 3
88239: EQUAL
88240: AND
88241: IFFALSE 88344
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
88243: LD_EXP 131
88247: PUSH
88248: LD_VAR 0 6
88252: ARRAY
88253: PUSH
88254: LD_VAR 0 5
88258: ARRAY
88259: PUSH
88260: LD_INT 1
88262: ARRAY
88263: PPUSH
88264: LD_EXP 131
88268: PUSH
88269: LD_VAR 0 6
88273: ARRAY
88274: PUSH
88275: LD_VAR 0 5
88279: ARRAY
88280: PUSH
88281: LD_INT 2
88283: ARRAY
88284: PPUSH
88285: LD_VAR 0 1
88289: PPUSH
88290: CALL_OW 255
88294: PPUSH
88295: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
88299: LD_ADDR_EXP 131
88303: PUSH
88304: LD_EXP 131
88308: PPUSH
88309: LD_VAR 0 6
88313: PPUSH
88314: LD_EXP 131
88318: PUSH
88319: LD_VAR 0 6
88323: ARRAY
88324: PPUSH
88325: LD_VAR 0 5
88329: PPUSH
88330: CALL_OW 3
88334: PPUSH
88335: CALL_OW 1
88339: ST_TO_ADDR
// exit ;
88340: POP
88341: POP
88342: GO 88535
// end ; end ;
88344: GO 88184
88346: POP
88347: POP
// for i := minerMinesList [ index ] downto 1 do
88348: LD_ADDR_VAR 0 5
88352: PUSH
88353: DOUBLE
88354: LD_EXP 131
88358: PUSH
88359: LD_VAR 0 6
88363: ARRAY
88364: INC
88365: ST_TO_ADDR
88366: LD_INT 1
88368: PUSH
88369: FOR_DOWNTO
88370: IFFALSE 88533
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
88372: LD_EXP 131
88376: PUSH
88377: LD_VAR 0 6
88381: ARRAY
88382: PUSH
88383: LD_VAR 0 5
88387: ARRAY
88388: PUSH
88389: LD_INT 1
88391: ARRAY
88392: PPUSH
88393: LD_EXP 131
88397: PUSH
88398: LD_VAR 0 6
88402: ARRAY
88403: PUSH
88404: LD_VAR 0 5
88408: ARRAY
88409: PUSH
88410: LD_INT 2
88412: ARRAY
88413: PPUSH
88414: LD_VAR 0 2
88418: PPUSH
88419: LD_VAR 0 3
88423: PPUSH
88424: CALL_OW 298
88428: PUSH
88429: LD_INT 6
88431: LESS
88432: IFFALSE 88531
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
88434: LD_EXP 131
88438: PUSH
88439: LD_VAR 0 6
88443: ARRAY
88444: PUSH
88445: LD_VAR 0 5
88449: ARRAY
88450: PUSH
88451: LD_INT 1
88453: ARRAY
88454: PPUSH
88455: LD_EXP 131
88459: PUSH
88460: LD_VAR 0 6
88464: ARRAY
88465: PUSH
88466: LD_VAR 0 5
88470: ARRAY
88471: PUSH
88472: LD_INT 2
88474: ARRAY
88475: PPUSH
88476: LD_VAR 0 1
88480: PPUSH
88481: CALL_OW 255
88485: PPUSH
88486: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
88490: LD_ADDR_EXP 131
88494: PUSH
88495: LD_EXP 131
88499: PPUSH
88500: LD_VAR 0 6
88504: PPUSH
88505: LD_EXP 131
88509: PUSH
88510: LD_VAR 0 6
88514: ARRAY
88515: PPUSH
88516: LD_VAR 0 5
88520: PPUSH
88521: CALL_OW 3
88525: PPUSH
88526: CALL_OW 1
88530: ST_TO_ADDR
// end ; end ;
88531: GO 88369
88533: POP
88534: POP
// end ;
88535: LD_VAR 0 4
88539: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
88540: LD_INT 0
88542: PPUSH
88543: PPUSH
88544: PPUSH
88545: PPUSH
88546: PPUSH
88547: PPUSH
88548: PPUSH
88549: PPUSH
88550: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
88551: LD_VAR 0 1
88555: PPUSH
88556: CALL_OW 264
88560: PUSH
88561: LD_INT 81
88563: EQUAL
88564: NOT
88565: PUSH
88566: LD_VAR 0 1
88570: PUSH
88571: LD_EXP 130
88575: IN
88576: NOT
88577: OR
88578: IFFALSE 88582
// exit ;
88580: GO 88904
// index := GetElementIndex ( minersList , unit ) ;
88582: LD_ADDR_VAR 0 6
88586: PUSH
88587: LD_EXP 130
88591: PPUSH
88592: LD_VAR 0 1
88596: PPUSH
88597: CALL 32748 0 2
88601: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
88602: LD_ADDR_VAR 0 8
88606: PUSH
88607: LD_EXP 132
88611: PUSH
88612: LD_EXP 131
88616: PUSH
88617: LD_VAR 0 6
88621: ARRAY
88622: MINUS
88623: ST_TO_ADDR
// if not minesFreeAmount then
88624: LD_VAR 0 8
88628: NOT
88629: IFFALSE 88633
// exit ;
88631: GO 88904
// tmp := [ ] ;
88633: LD_ADDR_VAR 0 7
88637: PUSH
88638: EMPTY
88639: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
88640: LD_ADDR_VAR 0 5
88644: PUSH
88645: DOUBLE
88646: LD_INT 1
88648: DEC
88649: ST_TO_ADDR
88650: LD_VAR 0 8
88654: PUSH
88655: FOR_TO
88656: IFFALSE 88851
// begin _d := rand ( 0 , 5 ) ;
88658: LD_ADDR_VAR 0 11
88662: PUSH
88663: LD_INT 0
88665: PPUSH
88666: LD_INT 5
88668: PPUSH
88669: CALL_OW 12
88673: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
88674: LD_ADDR_VAR 0 12
88678: PUSH
88679: LD_INT 2
88681: PPUSH
88682: LD_INT 6
88684: PPUSH
88685: CALL_OW 12
88689: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
88690: LD_ADDR_VAR 0 9
88694: PUSH
88695: LD_VAR 0 2
88699: PPUSH
88700: LD_VAR 0 11
88704: PPUSH
88705: LD_VAR 0 12
88709: PPUSH
88710: CALL_OW 272
88714: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
88715: LD_ADDR_VAR 0 10
88719: PUSH
88720: LD_VAR 0 3
88724: PPUSH
88725: LD_VAR 0 11
88729: PPUSH
88730: LD_VAR 0 12
88734: PPUSH
88735: CALL_OW 273
88739: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
88740: LD_VAR 0 9
88744: PPUSH
88745: LD_VAR 0 10
88749: PPUSH
88750: CALL_OW 488
88754: PUSH
88755: LD_VAR 0 9
88759: PUSH
88760: LD_VAR 0 10
88764: PUSH
88765: EMPTY
88766: LIST
88767: LIST
88768: PUSH
88769: LD_VAR 0 7
88773: IN
88774: NOT
88775: AND
88776: PUSH
88777: LD_VAR 0 9
88781: PPUSH
88782: LD_VAR 0 10
88786: PPUSH
88787: CALL_OW 458
88791: NOT
88792: AND
88793: IFFALSE 88835
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
88795: LD_ADDR_VAR 0 7
88799: PUSH
88800: LD_VAR 0 7
88804: PPUSH
88805: LD_VAR 0 7
88809: PUSH
88810: LD_INT 1
88812: PLUS
88813: PPUSH
88814: LD_VAR 0 9
88818: PUSH
88819: LD_VAR 0 10
88823: PUSH
88824: EMPTY
88825: LIST
88826: LIST
88827: PPUSH
88828: CALL_OW 1
88832: ST_TO_ADDR
88833: GO 88849
// i := i - 1 ;
88835: LD_ADDR_VAR 0 5
88839: PUSH
88840: LD_VAR 0 5
88844: PUSH
88845: LD_INT 1
88847: MINUS
88848: ST_TO_ADDR
// end ;
88849: GO 88655
88851: POP
88852: POP
// for i in tmp do
88853: LD_ADDR_VAR 0 5
88857: PUSH
88858: LD_VAR 0 7
88862: PUSH
88863: FOR_IN
88864: IFFALSE 88902
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
88866: LD_VAR 0 1
88870: PPUSH
88871: LD_VAR 0 5
88875: PUSH
88876: LD_INT 1
88878: ARRAY
88879: PPUSH
88880: LD_VAR 0 5
88884: PUSH
88885: LD_INT 2
88887: ARRAY
88888: PPUSH
88889: CALL 87848 0 3
88893: NOT
88894: IFFALSE 88900
// exit ;
88896: POP
88897: POP
88898: GO 88904
88900: GO 88863
88902: POP
88903: POP
// end ;
88904: LD_VAR 0 4
88908: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
88909: LD_INT 0
88911: PPUSH
88912: PPUSH
88913: PPUSH
88914: PPUSH
88915: PPUSH
88916: PPUSH
88917: PPUSH
// if not GetClass ( unit ) = class_sniper then
88918: LD_VAR 0 1
88922: PPUSH
88923: CALL_OW 257
88927: PUSH
88928: LD_INT 5
88930: EQUAL
88931: NOT
88932: IFFALSE 88936
// exit ;
88934: GO 89324
// dist := 8 ;
88936: LD_ADDR_VAR 0 5
88940: PUSH
88941: LD_INT 8
88943: ST_TO_ADDR
// viewRange := 12 ;
88944: LD_ADDR_VAR 0 7
88948: PUSH
88949: LD_INT 12
88951: ST_TO_ADDR
// side := GetSide ( unit ) ;
88952: LD_ADDR_VAR 0 6
88956: PUSH
88957: LD_VAR 0 1
88961: PPUSH
88962: CALL_OW 255
88966: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
88967: LD_INT 61
88969: PPUSH
88970: LD_VAR 0 6
88974: PPUSH
88975: CALL_OW 321
88979: PUSH
88980: LD_INT 2
88982: EQUAL
88983: IFFALSE 88993
// viewRange := 16 ;
88985: LD_ADDR_VAR 0 7
88989: PUSH
88990: LD_INT 16
88992: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
88993: LD_VAR 0 1
88997: PPUSH
88998: LD_VAR 0 2
89002: PPUSH
89003: LD_VAR 0 3
89007: PPUSH
89008: CALL_OW 297
89012: PUSH
89013: LD_VAR 0 5
89017: GREATER
89018: IFFALSE 89097
// begin ComMoveXY ( unit , x , y ) ;
89020: LD_VAR 0 1
89024: PPUSH
89025: LD_VAR 0 2
89029: PPUSH
89030: LD_VAR 0 3
89034: PPUSH
89035: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
89039: LD_INT 35
89041: PPUSH
89042: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
89046: LD_VAR 0 1
89050: PPUSH
89051: LD_VAR 0 2
89055: PPUSH
89056: LD_VAR 0 3
89060: PPUSH
89061: CALL 64084 0 3
89065: NOT
89066: IFFALSE 89070
// exit ;
89068: GO 89324
// until GetDistUnitXY ( unit , x , y ) < dist ;
89070: LD_VAR 0 1
89074: PPUSH
89075: LD_VAR 0 2
89079: PPUSH
89080: LD_VAR 0 3
89084: PPUSH
89085: CALL_OW 297
89089: PUSH
89090: LD_VAR 0 5
89094: LESS
89095: IFFALSE 89039
// end ; ComTurnXY ( unit , x , y ) ;
89097: LD_VAR 0 1
89101: PPUSH
89102: LD_VAR 0 2
89106: PPUSH
89107: LD_VAR 0 3
89111: PPUSH
89112: CALL_OW 118
// wait ( 5 ) ;
89116: LD_INT 5
89118: PPUSH
89119: CALL_OW 67
// _d := GetDir ( unit ) ;
89123: LD_ADDR_VAR 0 10
89127: PUSH
89128: LD_VAR 0 1
89132: PPUSH
89133: CALL_OW 254
89137: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
89138: LD_ADDR_VAR 0 8
89142: PUSH
89143: LD_VAR 0 1
89147: PPUSH
89148: CALL_OW 250
89152: PPUSH
89153: LD_VAR 0 10
89157: PPUSH
89158: LD_VAR 0 5
89162: PPUSH
89163: CALL_OW 272
89167: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
89168: LD_ADDR_VAR 0 9
89172: PUSH
89173: LD_VAR 0 1
89177: PPUSH
89178: CALL_OW 251
89182: PPUSH
89183: LD_VAR 0 10
89187: PPUSH
89188: LD_VAR 0 5
89192: PPUSH
89193: CALL_OW 273
89197: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
89198: LD_VAR 0 8
89202: PPUSH
89203: LD_VAR 0 9
89207: PPUSH
89208: CALL_OW 488
89212: NOT
89213: IFFALSE 89217
// exit ;
89215: GO 89324
// ComAnimCustom ( unit , 1 ) ;
89217: LD_VAR 0 1
89221: PPUSH
89222: LD_INT 1
89224: PPUSH
89225: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
89229: LD_VAR 0 8
89233: PPUSH
89234: LD_VAR 0 9
89238: PPUSH
89239: LD_VAR 0 6
89243: PPUSH
89244: LD_VAR 0 7
89248: PPUSH
89249: CALL_OW 330
// repeat wait ( 1 ) ;
89253: LD_INT 1
89255: PPUSH
89256: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
89260: LD_VAR 0 1
89264: PPUSH
89265: CALL_OW 316
89269: PUSH
89270: LD_VAR 0 1
89274: PPUSH
89275: CALL_OW 314
89279: OR
89280: PUSH
89281: LD_VAR 0 1
89285: PPUSH
89286: CALL_OW 302
89290: NOT
89291: OR
89292: PUSH
89293: LD_VAR 0 1
89297: PPUSH
89298: CALL_OW 301
89302: OR
89303: IFFALSE 89253
// RemoveSeeing ( _x , _y , side ) ;
89305: LD_VAR 0 8
89309: PPUSH
89310: LD_VAR 0 9
89314: PPUSH
89315: LD_VAR 0 6
89319: PPUSH
89320: CALL_OW 331
// end ; end_of_file
89324: LD_VAR 0 4
89328: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
89329: LD_VAR 0 1
89333: PPUSH
89334: LD_VAR 0 2
89338: PPUSH
89339: LD_VAR 0 3
89343: PPUSH
89344: LD_VAR 0 4
89348: PPUSH
89349: LD_VAR 0 5
89353: PPUSH
89354: LD_VAR 0 6
89358: PPUSH
89359: CALL 69279 0 6
// end ;
89363: PPOPN 6
89365: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
89366: LD_INT 0
89368: PPUSH
// begin if not units then
89369: LD_VAR 0 1
89373: NOT
89374: IFFALSE 89378
// exit ;
89376: GO 89378
// end ;
89378: PPOPN 7
89380: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
89381: CALL 69250 0 0
// end ;
89385: PPOPN 1
89387: END
