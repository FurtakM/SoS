// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 10248 0 2
// PrepareArabian ;
  32: CALL 501 0 0
// PrepareRussian ;
  36: CALL 11039 0 0
// Action ;
  40: CALL 19230 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin , buildingsFromPrev , gameActive , rolfAttack , collectedOil ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// buildingsFromPrev := LoadVariable ( 05_Buildings , [ ] ) ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_STRING 05_Buildings
 116: PPUSH
 117: EMPTY
 118: PPUSH
 119: CALL_OW 30
 123: ST_TO_ADDR
// bergkampfArrived := false ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// omarArrived := false ;
 132: LD_ADDR_EXP 6
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// outpostDestroyed := false ;
 140: LD_ADDR_EXP 4
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// ruLoseCounter := 0 ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// rolfScriptBase := false ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// omarScriptBase := false ;
 164: LD_ADDR_EXP 10
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// linkedWithRolf := 0 ;
 172: LD_ADDR_EXP 12
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 180: LD_ADDR_EXP 26
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// rolfDied := false ;
 188: LD_ADDR_EXP 13
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// leninSpotted := false ;
 196: LD_ADDR_EXP 14
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// mortarConstructed := false ;
 204: LD_ADDR_EXP 15
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// rolfHasVehicles := false ;
 212: LD_ADDR_EXP 16
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// leninScriptBase := true ;
 220: LD_ADDR_EXP 11
 224: PUSH
 225: LD_INT 1
 227: ST_TO_ADDR
// rolfWantVehicles := false ;
 228: LD_ADDR_EXP 17
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// omarWantVehicles := false ;
 236: LD_ADDR_EXP 18
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// omarHasVehicles := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// escapeAllowed := false ;
 252: LD_ADDR_EXP 24
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 19
 264: PUSH
 265: LD_INT 31500
 267: PUSH
 268: LD_INT 28350
 270: PUSH
 271: LD_INT 25900
 273: PUSH
 274: LD_INT 24150
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 289: LD_ADDR_EXP 20
 293: PUSH
 294: LD_INT 31500
 296: PUSH
 297: LD_INT 28350
 299: PUSH
 300: LD_INT 25900
 302: PUSH
 303: LD_INT 24150
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: LD_OWVAR 67
 316: ARRAY
 317: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 318: LD_ADDR_EXP 21
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: LD_INT 5
 328: PUSH
 329: LD_INT 6
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_OWVAR 67
 345: ARRAY
 346: ST_TO_ADDR
// omarAttack := false ;
 347: LD_ADDR_EXP 23
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// disableAttackOnHeike := false ;
 355: LD_ADDR_EXP 27
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// escapeTimer := 8 8$30 ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 17850
 370: ST_TO_ADDR
// firstAttack := true ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// canRolfJoin := true ;
 379: LD_ADDR_EXP 29
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// gameActive := false ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 0
 394: ST_TO_ADDR
// rolfAttack := false ;
 395: LD_ADDR_EXP 32
 399: PUSH
 400: LD_INT 0
 402: ST_TO_ADDR
// collectedOil := 0 ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 0
 410: ST_TO_ADDR
// end ;
 411: LD_VAR 0 1
 415: RET
// every 0 0$2 trigger GetSide ( Rolf ) = 2 and IsOk ( Rolf ) and not omarArrived do
 416: LD_EXP 47
 420: PPUSH
 421: CALL_OW 255
 425: PUSH
 426: LD_INT 2
 428: EQUAL
 429: PUSH
 430: LD_EXP 47
 434: PPUSH
 435: CALL_OW 302
 439: AND
 440: PUSH
 441: LD_EXP 6
 445: NOT
 446: AND
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_ROLF ) ;
 452: LD_STRING ACH_ROLF
 454: PPUSH
 455: CALL_OW 543
 459: END
// every 0 0$2 trigger collectedOil >= 300 do
 460: LD_EXP 33
 464: PUSH
 465: LD_INT 300
 467: GREATEREQUAL
 468: IFFALSE 480
 470: GO 472
 472: DISABLE
// SetAchievement ( ACH_OIL ) ;
 473: LD_STRING ACH_OIL
 475: PPUSH
 476: CALL_OW 543
 480: END
// every 0 0$2 trigger IsDead ( ruLenin ) do
 481: LD_INT 52
 483: PPUSH
 484: CALL_OW 301
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_LENIN ) ; end_of_file
 493: LD_STRING ACH_LENIN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , veh , tmp , limiter ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
 506: PPUSH
 507: PPUSH
 508: PPUSH
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
 515: PPUSH
 516: PPUSH
// uc_nation := 2 ;
 517: LD_ADDR_OWVAR 21
 521: PUSH
 522: LD_INT 2
 524: ST_TO_ADDR
// uc_side := 5 ;
 525: LD_ADDR_OWVAR 20
 529: PUSH
 530: LD_INT 5
 532: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 533: LD_ADDR_EXP 42
 537: PUSH
 538: LD_STRING Abdul
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: LD_STRING 
 546: PPUSH
 547: CALL 29437 0 3
 551: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 552: LD_ADDR_EXP 44
 556: PUSH
 557: LD_STRING Omar
 559: PPUSH
 560: LD_INT 0
 562: PPUSH
 563: LD_STRING 
 565: PPUSH
 566: CALL 29437 0 3
 570: ST_TO_ADDR
// uc_side := 2 ;
 571: LD_ADDR_OWVAR 20
 575: PUSH
 576: LD_INT 2
 578: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 579: LD_ADDR_EXP 34
 583: PUSH
 584: LD_STRING Heike
 586: PPUSH
 587: LD_EXP 1
 591: NOT
 592: PPUSH
 593: LD_EXP 2
 597: PPUSH
 598: CALL 29437 0 3
 602: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 603: LD_ADDR_EXP 37
 607: PUSH
 608: LD_STRING Ibrahim
 610: PPUSH
 611: LD_EXP 1
 615: NOT
 616: PPUSH
 617: LD_EXP 2
 621: PPUSH
 622: CALL 29437 0 3
 626: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 627: LD_ADDR_EXP 35
 631: PUSH
 632: LD_STRING Givi
 634: PPUSH
 635: LD_EXP 1
 639: NOT
 640: PPUSH
 641: LD_EXP 2
 645: PPUSH
 646: CALL 29437 0 3
 650: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 651: LD_ADDR_EXP 38
 655: PUSH
 656: LD_STRING Kamil
 658: PPUSH
 659: LD_EXP 1
 663: NOT
 664: PPUSH
 665: LD_EXP 2
 669: PPUSH
 670: CALL 29437 0 3
 674: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 675: LD_ADDR_EXP 39
 679: PUSH
 680: LD_STRING Kaia
 682: PPUSH
 683: LD_EXP 1
 687: NOT
 688: PPUSH
 689: LD_EXP 2
 693: PPUSH
 694: CALL 29437 0 3
 698: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 699: LD_ADDR_EXP 40
 703: PUSH
 704: LD_STRING Sophia
 706: PPUSH
 707: LD_EXP 1
 711: NOT
 712: PPUSH
 713: LD_EXP 2
 717: PPUSH
 718: CALL 29437 0 3
 722: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 723: LD_ADDR_EXP 41
 727: PUSH
 728: LD_STRING Markov
 730: PPUSH
 731: LD_EXP 1
 735: NOT
 736: PPUSH
 737: LD_EXP 2
 741: PPUSH
 742: CALL 29437 0 3
 746: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 747: LD_ADDR_EXP 46
 751: PUSH
 752: LD_STRING Aviradze
 754: PPUSH
 755: LD_EXP 1
 759: NOT
 760: PPUSH
 761: LD_EXP 2
 765: PPUSH
 766: CALL 29437 0 3
 770: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 771: LD_ADDR_EXP 45
 775: PUSH
 776: LD_STRING Kurt
 778: PPUSH
 779: LD_EXP 1
 783: NOT
 784: PPUSH
 785: LD_EXP 2
 789: PPUSH
 790: CALL 29437 0 3
 794: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 795: LD_ADDR_EXP 36
 799: PUSH
 800: LD_STRING Mike
 802: PPUSH
 803: LD_EXP 1
 807: NOT
 808: PPUSH
 809: LD_EXP 2
 813: PPUSH
 814: CALL 29437 0 3
 818: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 819: LD_ADDR_EXP 43
 823: PUSH
 824: LD_STRING Olaf
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_STRING 
 832: PPUSH
 833: CALL 29437 0 3
 837: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 838: LD_ADDR_EXP 49
 842: PUSH
 843: LD_STRING 05_others
 845: PPUSH
 846: CALL_OW 31
 850: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 851: LD_ADDR_EXP 50
 855: PUSH
 856: LD_STRING 05_apes
 858: PPUSH
 859: CALL_OW 31
 863: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_STRING 05_Radar
 871: PPUSH
 872: LD_EXP 1
 876: PPUSH
 877: CALL_OW 30
 881: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 882: LD_ADDR_VAR 0 6
 886: PUSH
 887: LD_STRING 05_RemoteControl
 889: PPUSH
 890: LD_EXP 1
 894: PPUSH
 895: CALL_OW 30
 899: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 900: LD_ADDR_VAR 0 7
 904: PUSH
 905: LD_STRING 05_DrugsTested
 907: PPUSH
 908: LD_EXP 1
 912: PPUSH
 913: CALL_OW 30
 917: ST_TO_ADDR
// if hasDrugs then
 918: LD_VAR 0 7
 922: IFFALSE 937
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 924: LD_INT 5
 926: PPUSH
 927: LD_INT 2
 929: PPUSH
 930: LD_INT 2
 932: PPUSH
 933: CALL_OW 322
// if hasRadar then
 937: LD_VAR 0 5
 941: IFFALSE 956
// SetTech ( tech_radar , 2 , state_researched ) ;
 943: LD_INT 6
 945: PPUSH
 946: LD_INT 2
 948: PPUSH
 949: LD_INT 2
 951: PPUSH
 952: CALL_OW 322
// if hasRemote then
 956: LD_VAR 0 6
 960: IFFALSE 975
// SetTech ( tech_remCont , 2 , state_researched ) ;
 962: LD_INT 15
 964: PPUSH
 965: LD_INT 2
 967: PPUSH
 968: LD_INT 2
 970: PPUSH
 971: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 975: LD_ADDR_VAR 0 13
 979: PUSH
 980: LD_INT 5
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 517
 990: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 991: LD_ADDR_VAR 0 2
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 13
1005: PUSH
1006: LD_INT 1
1008: ARRAY
1009: PUSH
1010: FOR_TO
1011: IFFALSE 1088
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
1013: LD_VAR 0 13
1017: PUSH
1018: LD_INT 1
1020: ARRAY
1021: PUSH
1022: LD_VAR 0 2
1026: ARRAY
1027: PPUSH
1028: LD_VAR 0 13
1032: PUSH
1033: LD_INT 2
1035: ARRAY
1036: PUSH
1037: LD_VAR 0 2
1041: ARRAY
1042: PPUSH
1043: CALL_OW 351
1047: IFFALSE 1086
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
1049: LD_VAR 0 13
1053: PUSH
1054: LD_INT 1
1056: ARRAY
1057: PUSH
1058: LD_VAR 0 2
1062: ARRAY
1063: PPUSH
1064: LD_VAR 0 13
1068: PUSH
1069: LD_INT 2
1071: ARRAY
1072: PUSH
1073: LD_VAR 0 2
1077: ARRAY
1078: PPUSH
1079: LD_INT 2
1081: PPUSH
1082: CALL_OW 244
1086: GO 1010
1088: POP
1089: POP
// base := [ ] ;
1090: LD_ADDR_VAR 0 4
1094: PUSH
1095: EMPTY
1096: ST_TO_ADDR
// if debug then
1097: LD_EXP 1
1101: IFFALSE 1151
// begin base := [ [ b_warehouse , 51 , 77 , 1 , nation_russian , 3 , 0 , 0 , 0 ] , ] ;
1103: LD_ADDR_VAR 0 4
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 51
1113: PUSH
1114: LD_INT 77
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 3
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: LD_INT 0
1128: PUSH
1129: LD_INT 0
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: ST_TO_ADDR
// end else
1149: GO 1167
// if buildingsFromPrev then
1151: LD_EXP 30
1155: IFFALSE 1167
// base := buildingsFromPrev ;
1157: LD_ADDR_VAR 0 4
1161: PUSH
1162: LD_EXP 30
1166: ST_TO_ADDR
// if base then
1167: LD_VAR 0 4
1171: IFFALSE 1369
// for i := 1 to base do
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: DOUBLE
1179: LD_INT 1
1181: DEC
1182: ST_TO_ADDR
1183: LD_VAR 0 4
1187: PUSH
1188: FOR_TO
1189: IFFALSE 1367
// base := Replace ( base , i , [ base [ i ] [ 1 ] , base [ i ] [ 2 ] + 155 , base [ i ] [ 3 ] + 3 , base [ i ] [ 4 ] , base [ i ] [ 5 ] , base [ i ] [ 6 ] , base [ i ] [ 7 ] , base [ i ] [ 8 ] , base [ i ] [ 9 ] ] ) ;
1191: LD_ADDR_VAR 0 4
1195: PUSH
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_VAR 0 2
1205: PPUSH
1206: LD_VAR 0 4
1210: PUSH
1211: LD_VAR 0 2
1215: ARRAY
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_VAR 0 2
1230: ARRAY
1231: PUSH
1232: LD_INT 2
1234: ARRAY
1235: PUSH
1236: LD_INT 155
1238: PLUS
1239: PUSH
1240: LD_VAR 0 4
1244: PUSH
1245: LD_VAR 0 2
1249: ARRAY
1250: PUSH
1251: LD_INT 3
1253: ARRAY
1254: PUSH
1255: LD_INT 3
1257: PLUS
1258: PUSH
1259: LD_VAR 0 4
1263: PUSH
1264: LD_VAR 0 2
1268: ARRAY
1269: PUSH
1270: LD_INT 4
1272: ARRAY
1273: PUSH
1274: LD_VAR 0 4
1278: PUSH
1279: LD_VAR 0 2
1283: ARRAY
1284: PUSH
1285: LD_INT 5
1287: ARRAY
1288: PUSH
1289: LD_VAR 0 4
1293: PUSH
1294: LD_VAR 0 2
1298: ARRAY
1299: PUSH
1300: LD_INT 6
1302: ARRAY
1303: PUSH
1304: LD_VAR 0 4
1308: PUSH
1309: LD_VAR 0 2
1313: ARRAY
1314: PUSH
1315: LD_INT 7
1317: ARRAY
1318: PUSH
1319: LD_VAR 0 4
1323: PUSH
1324: LD_VAR 0 2
1328: ARRAY
1329: PUSH
1330: LD_INT 8
1332: ARRAY
1333: PUSH
1334: LD_VAR 0 4
1338: PUSH
1339: LD_VAR 0 2
1343: ARRAY
1344: PUSH
1345: LD_INT 9
1347: ARRAY
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: PPUSH
1360: CALL_OW 1
1364: ST_TO_ADDR
1365: GO 1188
1367: POP
1368: POP
// base := base ^ [ [ b_depot , 206 , 80 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_bunker , 221 , 95 , 5 , nation_arabian , 3 , 0 , 0 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , nation_arabian , 3 , 0 , 0 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , nation_arabian , 3 , 0 , 0 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_lab_full , 217 , 78 , 4 , nation_arabian , 3 , b_lab_weapon , 0 , 0 ] , [ b_solar_power , 220 , 99 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 103 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 216 , 102 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_gun , 203 , 94 , 0 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_track , 199 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 81 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 78 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ] ;
1369: LD_ADDR_VAR 0 4
1373: PUSH
1374: LD_VAR 0 4
1378: PUSH
1379: LD_INT 0
1381: PUSH
1382: LD_INT 206
1384: PUSH
1385: LD_INT 80
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 2
1393: PUSH
1394: LD_INT 3
1396: PUSH
1397: LD_INT 0
1399: PUSH
1400: LD_INT 0
1402: PUSH
1403: LD_INT 0
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 32
1419: PUSH
1420: LD_INT 221
1422: PUSH
1423: LD_INT 95
1425: PUSH
1426: LD_INT 5
1428: PUSH
1429: LD_INT 2
1431: PUSH
1432: LD_INT 3
1434: PUSH
1435: LD_INT 0
1437: PUSH
1438: LD_INT 0
1440: PUSH
1441: LD_INT 23
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 32
1457: PUSH
1458: LD_INT 223
1460: PUSH
1461: LD_INT 88
1463: PUSH
1464: LD_INT 5
1466: PUSH
1467: LD_INT 2
1469: PUSH
1470: LD_INT 3
1472: PUSH
1473: LD_INT 0
1475: PUSH
1476: LD_INT 0
1478: PUSH
1479: LD_INT 24
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: PUSH
1493: LD_INT 32
1495: PUSH
1496: LD_INT 202
1498: PUSH
1499: LD_INT 64
1501: PUSH
1502: LD_INT 2
1504: PUSH
1505: LD_INT 2
1507: PUSH
1508: LD_INT 3
1510: PUSH
1511: LD_INT 0
1513: PUSH
1514: LD_INT 0
1516: PUSH
1517: LD_INT 25
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 3
1533: PUSH
1534: LD_INT 203
1536: PUSH
1537: LD_INT 91
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 3
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: LD_INT 0
1554: PUSH
1555: LD_INT 0
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 8
1571: PUSH
1572: LD_INT 217
1574: PUSH
1575: LD_INT 78
1577: PUSH
1578: LD_INT 4
1580: PUSH
1581: LD_INT 2
1583: PUSH
1584: LD_INT 3
1586: PUSH
1587: LD_INT 10
1589: PUSH
1590: LD_INT 0
1592: PUSH
1593: LD_INT 0
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 27
1609: PUSH
1610: LD_INT 220
1612: PUSH
1613: LD_INT 99
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 2
1621: PUSH
1622: LD_INT 3
1624: PUSH
1625: LD_INT 0
1627: PUSH
1628: LD_INT 0
1630: PUSH
1631: LD_INT 0
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 27
1647: PUSH
1648: LD_INT 220
1650: PUSH
1651: LD_INT 103
1653: PUSH
1654: LD_INT 1
1656: PUSH
1657: LD_INT 2
1659: PUSH
1660: LD_INT 3
1662: PUSH
1663: LD_INT 0
1665: PUSH
1666: LD_INT 0
1668: PUSH
1669: LD_INT 0
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: PUSH
1683: LD_INT 27
1685: PUSH
1686: LD_INT 216
1688: PUSH
1689: LD_INT 102
1691: PUSH
1692: LD_INT 1
1694: PUSH
1695: LD_INT 2
1697: PUSH
1698: LD_INT 3
1700: PUSH
1701: LD_INT 0
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: LD_INT 0
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 17
1723: PUSH
1724: LD_INT 203
1726: PUSH
1727: LD_INT 94
1729: PUSH
1730: LD_INT 0
1732: PUSH
1733: LD_INT 2
1735: PUSH
1736: LD_INT 3
1738: PUSH
1739: LD_INT 0
1741: PUSH
1742: LD_INT 0
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: LD_INT 23
1761: PUSH
1762: LD_INT 200
1764: PUSH
1765: LD_INT 88
1767: PUSH
1768: LD_INT 2
1770: PUSH
1771: LD_INT 2
1773: PUSH
1774: LD_INT 3
1776: PUSH
1777: LD_INT 0
1779: PUSH
1780: LD_INT 0
1782: PUSH
1783: LD_INT 0
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 16
1799: PUSH
1800: LD_INT 199
1802: PUSH
1803: LD_INT 91
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: LD_INT 2
1811: PUSH
1812: LD_INT 3
1814: PUSH
1815: LD_INT 0
1817: PUSH
1818: LD_INT 0
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 26
1837: PUSH
1838: LD_INT 197
1840: PUSH
1841: LD_INT 81
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 2
1849: PUSH
1850: LD_INT 3
1852: PUSH
1853: LD_INT 0
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 0
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 26
1875: PUSH
1876: LD_INT 197
1878: PUSH
1879: LD_INT 78
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: LD_INT 3
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: LD_INT 0
1896: PUSH
1897: LD_INT 0
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: ADD
1927: ST_TO_ADDR
// if hasRadar then
1928: LD_VAR 0 5
1932: IFFALSE 1996
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1934: LD_ADDR_VAR 0 4
1938: PUSH
1939: LD_VAR 0 4
1943: PPUSH
1944: LD_VAR 0 4
1948: PUSH
1949: LD_INT 1
1951: PLUS
1952: PPUSH
1953: LD_INT 20
1955: PUSH
1956: LD_INT 203
1958: PUSH
1959: LD_INT 87
1961: PUSH
1962: LD_INT 3
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: LD_INT 3
1970: PUSH
1971: LD_INT 0
1973: PUSH
1974: LD_INT 0
1976: PUSH
1977: LD_INT 0
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 1
1995: ST_TO_ADDR
// if hasRemote then
1996: LD_VAR 0 6
2000: IFFALSE 2064
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
2002: LD_ADDR_VAR 0 4
2006: PUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_VAR 0 4
2016: PUSH
2017: LD_INT 1
2019: PLUS
2020: PPUSH
2021: LD_INT 22
2023: PUSH
2024: LD_INT 207
2026: PUSH
2027: LD_INT 95
2029: PUSH
2030: LD_INT 5
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 3
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: LD_INT 0
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: PPUSH
2059: CALL_OW 1
2063: ST_TO_ADDR
// for i in base do
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: LD_VAR 0 4
2073: PUSH
2074: FOR_IN
2075: IFFALSE 2429
// begin if HexInfo ( i [ 2 ] , i [ 3 ] ) then
2077: LD_VAR 0 2
2081: PUSH
2082: LD_INT 2
2084: ARRAY
2085: PPUSH
2086: LD_VAR 0 2
2090: PUSH
2091: LD_INT 3
2093: ARRAY
2094: PPUSH
2095: CALL_OW 428
2099: IFFALSE 2103
// continue ;
2101: GO 2074
// uc_nation := i [ 5 ] ;
2103: LD_ADDR_OWVAR 21
2107: PUSH
2108: LD_VAR 0 2
2112: PUSH
2113: LD_INT 5
2115: ARRAY
2116: ST_TO_ADDR
// InitBc ;
2117: CALL_OW 21
// bc_type := i [ 1 ] ;
2121: LD_ADDR_OWVAR 42
2125: PUSH
2126: LD_VAR 0 2
2130: PUSH
2131: LD_INT 1
2133: ARRAY
2134: ST_TO_ADDR
// bc_level := i [ 6 ] ;
2135: LD_ADDR_OWVAR 43
2139: PUSH
2140: LD_VAR 0 2
2144: PUSH
2145: LD_INT 6
2147: ARRAY
2148: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2149: LD_ADDR_OWVAR 44
2153: PUSH
2154: LD_INT 9
2156: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2157: LD_ADDR_OWVAR 45
2161: PUSH
2162: LD_INT 9
2164: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 5 ] = nation_arabian and not i [ 8 ] then
2165: LD_VAR 0 2
2169: PUSH
2170: LD_INT 1
2172: ARRAY
2173: PUSH
2174: LD_INT 8
2176: EQUAL
2177: PUSH
2178: LD_VAR 0 2
2182: PUSH
2183: LD_INT 5
2185: ARRAY
2186: PUSH
2187: LD_INT 2
2189: EQUAL
2190: AND
2191: PUSH
2192: LD_VAR 0 2
2196: PUSH
2197: LD_INT 8
2199: ARRAY
2200: NOT
2201: AND
2202: IFFALSE 2236
// begin bc_kind1 := b_lab_weapon ;
2204: LD_ADDR_OWVAR 44
2208: PUSH
2209: LD_INT 10
2211: ST_TO_ADDR
// if hasRadar then
2212: LD_VAR 0 5
2216: IFFALSE 2228
// bc_kind2 := b_lab_opto else
2218: LD_ADDR_OWVAR 45
2222: PUSH
2223: LD_INT 15
2225: ST_TO_ADDR
2226: GO 2236
// bc_kind2 := b_lab_basic ;
2228: LD_ADDR_OWVAR 45
2232: PUSH
2233: LD_INT 9
2235: ST_TO_ADDR
// end ; if i [ 1 ] in [ b_lab_half , b_lab_full ] and i [ 7 ] then
2236: LD_VAR 0 2
2240: PUSH
2241: LD_INT 1
2243: ARRAY
2244: PUSH
2245: LD_INT 7
2247: PUSH
2248: LD_INT 8
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: IN
2255: PUSH
2256: LD_VAR 0 2
2260: PUSH
2261: LD_INT 7
2263: ARRAY
2264: AND
2265: IFFALSE 2281
// bc_kind1 := i [ 7 ] ;
2267: LD_ADDR_OWVAR 44
2271: PUSH
2272: LD_VAR 0 2
2276: PUSH
2277: LD_INT 7
2279: ARRAY
2280: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 8 ] then
2281: LD_VAR 0 2
2285: PUSH
2286: LD_INT 1
2288: ARRAY
2289: PUSH
2290: LD_INT 8
2292: EQUAL
2293: PUSH
2294: LD_VAR 0 2
2298: PUSH
2299: LD_INT 8
2301: ARRAY
2302: AND
2303: IFFALSE 2319
// bc_kind1 := i [ 8 ] ;
2305: LD_ADDR_OWVAR 44
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_INT 8
2317: ARRAY
2318: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2319: LD_ADDR_VAR 0 3
2323: PUSH
2324: LD_VAR 0 2
2328: PUSH
2329: LD_INT 2
2331: ARRAY
2332: PPUSH
2333: LD_VAR 0 2
2337: PUSH
2338: LD_INT 3
2340: ARRAY
2341: PPUSH
2342: LD_VAR 0 2
2346: PUSH
2347: LD_INT 4
2349: ARRAY
2350: PPUSH
2351: CALL_OW 47
2355: ST_TO_ADDR
// if i [ 9 ] then
2356: LD_VAR 0 2
2360: PUSH
2361: LD_INT 9
2363: ARRAY
2364: IFFALSE 2384
// PlaceWeaponTurret ( b , i [ 9 ] ) ;
2366: LD_VAR 0 3
2370: PPUSH
2371: LD_VAR 0 2
2375: PUSH
2376: LD_INT 9
2378: ARRAY
2379: PPUSH
2380: CALL_OW 431
// if i [ 1 ] = b_bunker then
2384: LD_VAR 0 2
2388: PUSH
2389: LD_INT 1
2391: ARRAY
2392: PUSH
2393: LD_INT 32
2395: EQUAL
2396: IFFALSE 2427
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
2398: LD_ADDR_VAR 0 11
2402: PUSH
2403: LD_VAR 0 11
2407: PPUSH
2408: LD_VAR 0 11
2412: PUSH
2413: LD_INT 1
2415: PLUS
2416: PPUSH
2417: LD_VAR 0 3
2421: PPUSH
2422: CALL_OW 1
2426: ST_TO_ADDR
// end ;
2427: GO 2074
2429: POP
2430: POP
// depot := HexInfo ( 206 , 80 ) ;
2431: LD_ADDR_VAR 0 9
2435: PUSH
2436: LD_INT 206
2438: PPUSH
2439: LD_INT 80
2441: PPUSH
2442: CALL_OW 428
2446: ST_TO_ADDR
// factory := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) ;
2447: LD_ADDR_VAR 0 8
2451: PUSH
2452: LD_INT 22
2454: PUSH
2455: LD_INT 2
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PUSH
2462: LD_INT 30
2464: PUSH
2465: LD_INT 3
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PPUSH
2476: CALL_OW 69
2480: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2481: LD_ADDR_VAR 0 10
2485: PUSH
2486: LD_INT 22
2488: PUSH
2489: LD_INT 2
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 2
2498: PUSH
2499: LD_INT 30
2501: PUSH
2502: LD_INT 6
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: PUSH
2509: LD_INT 30
2511: PUSH
2512: LD_INT 7
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: PUSH
2519: LD_INT 30
2521: PUSH
2522: LD_INT 8
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PPUSH
2539: CALL_OW 69
2543: ST_TO_ADDR
// arDepot := depot ;
2544: LD_ADDR_EXP 48
2548: PUSH
2549: LD_VAR 0 9
2553: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 190 , 150 ] [ Difficulty ] ) ;
2554: LD_VAR 0 9
2558: PPUSH
2559: CALL_OW 274
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 360
2569: PUSH
2570: LD_INT 260
2572: PUSH
2573: LD_INT 190
2575: PUSH
2576: LD_INT 150
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: PUSH
2585: LD_OWVAR 67
2589: ARRAY
2590: PPUSH
2591: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 150 , 120 ] [ Difficulty ] ) ;
2595: LD_VAR 0 9
2599: PPUSH
2600: CALL_OW 274
2604: PPUSH
2605: LD_INT 2
2607: PPUSH
2608: LD_INT 200
2610: PUSH
2611: LD_INT 170
2613: PUSH
2614: LD_INT 150
2616: PUSH
2617: LD_INT 120
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: PUSH
2626: LD_OWVAR 67
2630: ARRAY
2631: PPUSH
2632: CALL_OW 277
// uc_nation := 2 ;
2636: LD_ADDR_OWVAR 21
2640: PUSH
2641: LD_INT 2
2643: ST_TO_ADDR
// uc_side := 2 ;
2644: LD_ADDR_OWVAR 20
2648: PUSH
2649: LD_INT 2
2651: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
2652: LD_INT 13
2654: PPUSH
2655: LD_INT 1
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: LD_INT 27
2663: PPUSH
2664: LD_INT 33
2666: PPUSH
2667: CALL 34420 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
2671: CALL_OW 45
2675: PPUSH
2676: LD_INT 190
2678: PPUSH
2679: LD_INT 64
2681: PPUSH
2682: LD_INT 5
2684: PPUSH
2685: LD_INT 0
2687: PPUSH
2688: CALL 69012 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
2692: LD_INT 13
2694: PPUSH
2695: LD_INT 1
2697: PPUSH
2698: LD_INT 1
2700: PPUSH
2701: LD_INT 25
2703: PPUSH
2704: LD_INT 22
2706: PPUSH
2707: CALL 34420 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
2711: CALL_OW 45
2715: PPUSH
2716: LD_INT 188
2718: PPUSH
2719: LD_INT 67
2721: PPUSH
2722: LD_INT 5
2724: PPUSH
2725: LD_INT 0
2727: PPUSH
2728: CALL 69012 0 5
// PlaceUnitXY ( Heike , 213 , 87 , false ) ;
2732: LD_EXP 34
2736: PPUSH
2737: LD_INT 213
2739: PPUSH
2740: LD_INT 87
2742: PPUSH
2743: LD_INT 0
2745: PPUSH
2746: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
2750: LD_EXP 34
2754: PPUSH
2755: LD_INT 214
2757: PPUSH
2758: LD_INT 87
2760: PPUSH
2761: CALL_OW 118
// if Kaia then
2765: LD_EXP 39
2769: IFFALSE 2804
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
2771: LD_EXP 39
2775: PPUSH
2776: LD_INT 213
2778: PPUSH
2779: LD_INT 85
2781: PPUSH
2782: LD_INT 0
2784: PPUSH
2785: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
2789: LD_EXP 39
2793: PPUSH
2794: LD_INT 215
2796: PPUSH
2797: LD_INT 87
2799: PPUSH
2800: CALL_OW 118
// end ; if Olaf and Kaia then
2804: LD_EXP 43
2808: PUSH
2809: LD_EXP 39
2813: AND
2814: IFFALSE 2851
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
2816: LD_EXP 43
2820: PPUSH
2821: LD_INT 215
2823: PPUSH
2824: LD_INT 87
2826: PPUSH
2827: LD_INT 0
2829: PPUSH
2830: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
2834: LD_EXP 43
2838: PPUSH
2839: LD_INT 213
2841: PPUSH
2842: LD_INT 85
2844: PPUSH
2845: CALL_OW 118
// end else
2849: GO 2871
// if Olaf then
2851: LD_EXP 43
2855: IFFALSE 2871
// PlaceHumanInUnit ( Olaf , factory ) ;
2857: LD_EXP 43
2861: PPUSH
2862: LD_VAR 0 8
2866: PPUSH
2867: CALL_OW 52
// if Givi then
2871: LD_EXP 35
2875: IFFALSE 2956
// begin if Kaia and Olaf then
2877: LD_EXP 39
2881: PUSH
2882: LD_EXP 43
2886: AND
2887: IFFALSE 2924
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2889: LD_EXP 35
2893: PPUSH
2894: LD_INT 247
2896: PPUSH
2897: LD_INT 117
2899: PPUSH
2900: LD_INT 0
2902: PPUSH
2903: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2907: LD_EXP 35
2911: PPUSH
2912: LD_INT 248
2914: PPUSH
2915: LD_INT 118
2917: PPUSH
2918: CALL_OW 118
// end else
2922: GO 2956
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2924: LD_EXP 35
2928: PPUSH
2929: LD_INT 216
2931: PPUSH
2932: LD_INT 88
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2942: LD_EXP 35
2946: PPUSH
2947: LD_EXP 34
2951: PPUSH
2952: CALL_OW 119
// end ; end ; if Kurt then
2956: LD_EXP 45
2960: IFFALSE 2980
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2962: LD_EXP 45
2966: PPUSH
2967: LD_VAR 0 11
2971: PUSH
2972: LD_INT 2
2974: ARRAY
2975: PPUSH
2976: CALL_OW 52
// if Mike then
2980: LD_EXP 36
2984: IFFALSE 3004
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2986: LD_EXP 36
2990: PPUSH
2991: LD_VAR 0 11
2995: PUSH
2996: LD_INT 3
2998: ARRAY
2999: PPUSH
3000: CALL_OW 52
// if Kamil then
3004: LD_EXP 38
3008: IFFALSE 3070
// begin if Kaia and Olaf then
3010: LD_EXP 39
3014: PUSH
3015: LD_EXP 43
3019: AND
3020: IFFALSE 3038
// PlaceHumanInUnit ( Kamil , depot ) else
3022: LD_EXP 38
3026: PPUSH
3027: LD_VAR 0 9
3031: PPUSH
3032: CALL_OW 52
3036: GO 3070
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
3038: LD_EXP 38
3042: PPUSH
3043: LD_INT 213
3045: PPUSH
3046: LD_INT 87
3048: PPUSH
3049: LD_INT 0
3051: PPUSH
3052: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
3056: LD_EXP 38
3060: PPUSH
3061: LD_EXP 34
3065: PPUSH
3066: CALL_OW 119
// end ; end ; if Sophia then
3070: LD_EXP 40
3074: IFFALSE 3090
// PlaceHumanInUnit ( Sophia , depot ) ;
3076: LD_EXP 40
3080: PPUSH
3081: LD_VAR 0 9
3085: PPUSH
3086: CALL_OW 52
// if Aviradze then
3090: LD_EXP 46
3094: IFFALSE 3143
// if lab then
3096: LD_VAR 0 10
3100: IFFALSE 3122
// PlaceHumanInUnit ( Aviradze , lab [ 1 ] ) else
3102: LD_EXP 46
3106: PPUSH
3107: LD_VAR 0 10
3111: PUSH
3112: LD_INT 1
3114: ARRAY
3115: PPUSH
3116: CALL_OW 52
3120: GO 3143
// PlaceUnitXYR ( Aviradze , 210 , 87 , 3 , false ) ;
3122: LD_EXP 46
3126: PPUSH
3127: LD_INT 210
3129: PPUSH
3130: LD_INT 87
3132: PPUSH
3133: LD_INT 3
3135: PPUSH
3136: LD_INT 0
3138: PPUSH
3139: CALL_OW 50
// if Ibrahim then
3143: LD_EXP 37
3147: IFFALSE 3196
// if lab then
3149: LD_VAR 0 10
3153: IFFALSE 3175
// PlaceHumanInUnit ( Ibrahim , lab [ 1 ] ) else
3155: LD_EXP 37
3159: PPUSH
3160: LD_VAR 0 10
3164: PUSH
3165: LD_INT 1
3167: ARRAY
3168: PPUSH
3169: CALL_OW 52
3173: GO 3196
// PlaceUnitXYR ( Ibrahim , 210 , 87 , 3 , false ) ;
3175: LD_EXP 37
3179: PPUSH
3180: LD_INT 210
3182: PPUSH
3183: LD_INT 87
3185: PPUSH
3186: LD_INT 3
3188: PPUSH
3189: LD_INT 0
3191: PPUSH
3192: CALL_OW 50
// if Markov then
3196: LD_EXP 41
3200: IFFALSE 3249
// if factory then
3202: LD_VAR 0 8
3206: IFFALSE 3228
// PlaceHumanInUnit ( Markov , factory [ 1 ] ) else
3208: LD_EXP 41
3212: PPUSH
3213: LD_VAR 0 8
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: CALL_OW 52
3226: GO 3249
// PlaceUnitXYR ( Markov , 210 , 87 , 3 , false ) ;
3228: LD_EXP 41
3232: PPUSH
3233: LD_INT 210
3235: PPUSH
3236: LD_INT 87
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: LD_INT 0
3244: PPUSH
3245: CALL_OW 50
// if heikeSecondSquad then
3249: LD_EXP 49
3253: IFFALSE 3293
// for i in heikeSecondSquad do
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: LD_EXP 49
3264: PUSH
3265: FOR_IN
3266: IFFALSE 3291
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
3268: LD_VAR 0 2
3272: PPUSH
3273: LD_INT 190
3275: PPUSH
3276: LD_INT 65
3278: PPUSH
3279: LD_INT 5
3281: PPUSH
3282: LD_INT 0
3284: PPUSH
3285: CALL_OW 50
3289: GO 3265
3291: POP
3292: POP
// if heikeApes then
3293: LD_EXP 50
3297: IFFALSE 3337
// for i in heikeApes do
3299: LD_ADDR_VAR 0 2
3303: PUSH
3304: LD_EXP 50
3308: PUSH
3309: FOR_IN
3310: IFFALSE 3335
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
3312: LD_VAR 0 2
3316: PPUSH
3317: LD_INT 190
3319: PPUSH
3320: LD_INT 70
3322: PPUSH
3323: LD_INT 5
3325: PPUSH
3326: LD_INT 0
3328: PPUSH
3329: CALL_OW 50
3333: GO 3309
3335: POP
3336: POP
// tmp := LoadVariable ( 05_Vehicles , [ ] ) ;
3337: LD_ADDR_VAR 0 13
3341: PUSH
3342: LD_STRING 05_Vehicles
3344: PPUSH
3345: EMPTY
3346: PPUSH
3347: CALL_OW 30
3351: ST_TO_ADDR
// if tmp then
3352: LD_VAR 0 13
3356: IFFALSE 3526
// begin limiter := 10 ;
3358: LD_ADDR_VAR 0 14
3362: PUSH
3363: LD_INT 10
3365: ST_TO_ADDR
// for i in tmp do
3366: LD_ADDR_VAR 0 2
3370: PUSH
3371: LD_VAR 0 13
3375: PUSH
3376: FOR_IN
3377: IFFALSE 3524
// begin limiter := Dec ( limiter ) ;
3379: LD_ADDR_VAR 0 14
3383: PUSH
3384: LD_VAR 0 14
3388: PPUSH
3389: CALL 68255 0 1
3393: ST_TO_ADDR
// if limiter = 0 then
3394: LD_VAR 0 14
3398: PUSH
3399: LD_INT 0
3401: EQUAL
3402: IFFALSE 3406
// break ;
3404: GO 3524
// uc_side := 2 ;
3406: LD_ADDR_OWVAR 20
3410: PUSH
3411: LD_INT 2
3413: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
3414: LD_ADDR_OWVAR 21
3418: PUSH
3419: LD_VAR 0 2
3423: PUSH
3424: LD_INT 5
3426: ARRAY
3427: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 20 ) ;
3428: LD_VAR 0 2
3432: PUSH
3433: LD_INT 1
3435: ARRAY
3436: PPUSH
3437: LD_VAR 0 2
3441: PUSH
3442: LD_INT 2
3444: ARRAY
3445: PPUSH
3446: LD_VAR 0 2
3450: PUSH
3451: LD_INT 3
3453: ARRAY
3454: PPUSH
3455: LD_VAR 0 2
3459: PUSH
3460: LD_INT 4
3462: ARRAY
3463: PPUSH
3464: LD_INT 20
3466: PPUSH
3467: CALL 34420 0 5
// veh := CreateVehicle ;
3471: LD_ADDR_VAR 0 12
3475: PUSH
3476: CALL_OW 45
3480: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
3481: LD_VAR 0 12
3485: PPUSH
3486: LD_INT 0
3488: PPUSH
3489: LD_INT 5
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: CALL_OW 233
// PlaceUnitXYR ( veh , 252 , 111 , 8 , false ) ;
3501: LD_VAR 0 12
3505: PPUSH
3506: LD_INT 252
3508: PPUSH
3509: LD_INT 111
3511: PPUSH
3512: LD_INT 8
3514: PPUSH
3515: LD_INT 0
3517: PPUSH
3518: CALL_OW 50
// end ;
3522: GO 3376
3524: POP
3525: POP
// end ; end ;
3526: LD_VAR 0 1
3530: RET
// export function PrepareRolfSquad ; var i , j ; begin
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
3535: PPUSH
// uc_side := 8 ;
3536: LD_ADDR_OWVAR 20
3540: PUSH
3541: LD_INT 8
3543: ST_TO_ADDR
// uc_nation := 2 ;
3544: LD_ADDR_OWVAR 21
3548: PUSH
3549: LD_INT 2
3551: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
3552: LD_ADDR_EXP 47
3556: PUSH
3557: LD_STRING Bergkamp
3559: PPUSH
3560: CALL_OW 25
3564: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
3565: LD_ADDR_EXP 51
3569: PUSH
3570: LD_EXP 47
3574: PUSH
3575: EMPTY
3576: LIST
3577: ST_TO_ADDR
// for i := 1 to 4 do
3578: LD_ADDR_VAR 0 2
3582: PUSH
3583: DOUBLE
3584: LD_INT 1
3586: DEC
3587: ST_TO_ADDR
3588: LD_INT 4
3590: PUSH
3591: FOR_TO
3592: IFFALSE 3672
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
3594: LD_ADDR_VAR 0 3
3598: PUSH
3599: DOUBLE
3600: LD_INT 1
3602: DEC
3603: ST_TO_ADDR
3604: LD_INT 5
3606: PUSH
3607: LD_INT 2
3609: PUSH
3610: LD_INT 3
3612: PUSH
3613: LD_INT 1
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_VAR 0 2
3626: ARRAY
3627: PUSH
3628: FOR_TO
3629: IFFALSE 3668
// begin PrepareHuman ( false , i , 5 ) ;
3631: LD_INT 0
3633: PPUSH
3634: LD_VAR 0 2
3638: PPUSH
3639: LD_INT 5
3641: PPUSH
3642: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
3646: LD_ADDR_EXP 51
3650: PUSH
3651: LD_EXP 51
3655: PPUSH
3656: CALL_OW 44
3660: PPUSH
3661: CALL 66872 0 2
3665: ST_TO_ADDR
// end ;
3666: GO 3628
3668: POP
3669: POP
// end ;
3670: GO 3591
3672: POP
3673: POP
// if HexInfo ( 5 , 3 ) then
3674: LD_INT 5
3676: PPUSH
3677: LD_INT 3
3679: PPUSH
3680: CALL_OW 428
3684: IFFALSE 3701
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
3686: LD_INT 5
3688: PPUSH
3689: LD_INT 3
3691: PPUSH
3692: CALL_OW 428
3696: PPUSH
3697: CALL_OW 64
// for i in rolfSquad do
3701: LD_ADDR_VAR 0 2
3705: PUSH
3706: LD_EXP 51
3710: PUSH
3711: FOR_IN
3712: IFFALSE 3848
// begin uc_direction := 2 ;
3714: LD_ADDR_OWVAR 24
3718: PUSH
3719: LD_INT 2
3721: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
3722: LD_VAR 0 2
3726: PPUSH
3727: CALL_OW 257
3731: PUSH
3732: LD_INT 3
3734: EQUAL
3735: IFFALSE 3809
// begin uc_side := 8 ;
3737: LD_ADDR_OWVAR 20
3741: PUSH
3742: LD_INT 8
3744: ST_TO_ADDR
// uc_nation := 2 ;
3745: LD_ADDR_OWVAR 21
3749: PUSH
3750: LD_INT 2
3752: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
3753: LD_INT 13
3755: PPUSH
3756: LD_INT 1
3758: PPUSH
3759: LD_INT 1
3761: PPUSH
3762: LD_INT 27
3764: PPUSH
3765: LD_INT 88
3767: PPUSH
3768: CALL 34420 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
3772: CALL_OW 45
3776: PPUSH
3777: LD_INT 11
3779: PPUSH
3780: LD_INT 0
3782: PPUSH
3783: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_INT 5
3794: PPUSH
3795: LD_INT 3
3797: PPUSH
3798: CALL_OW 428
3802: PPUSH
3803: CALL_OW 52
// end else
3807: GO 3824
// PlaceUnitArea ( i , northSpawn , false ) ;
3809: LD_VAR 0 2
3813: PPUSH
3814: LD_INT 11
3816: PPUSH
3817: LD_INT 0
3819: PPUSH
3820: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
3824: LD_VAR 0 2
3828: PPUSH
3829: LD_INT 29
3831: PPUSH
3832: LD_INT 10
3834: PPUSH
3835: CALL_OW 111
// wait ( 0 0$2 ) ;
3839: LD_INT 70
3841: PPUSH
3842: CALL_OW 67
// end ;
3846: GO 3711
3848: POP
3849: POP
// wait ( 0 0$5 ) ;
3850: LD_INT 175
3852: PPUSH
3853: CALL_OW 67
// end ;
3857: LD_VAR 0 1
3861: RET
// export function PrepareRolfBase ; var i , tmp ; begin
3862: LD_INT 0
3864: PPUSH
3865: PPUSH
3866: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
3867: LD_EXP 47
3871: PPUSH
3872: LD_INT 94
3874: PPUSH
3875: LD_INT 63
3877: PPUSH
3878: CALL_OW 428
3882: PPUSH
3883: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
3887: LD_ADDR_VAR 0 3
3891: PUSH
3892: LD_INT 4
3894: PUSH
3895: LD_INT 82
3897: PUSH
3898: LD_INT 64
3900: PUSH
3901: LD_INT 1
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 31
3912: PUSH
3913: LD_INT 73
3915: PUSH
3916: LD_INT 58
3918: PUSH
3919: LD_INT 0
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: ST_TO_ADDR
// for i in tmp do
3932: LD_ADDR_VAR 0 2
3936: PUSH
3937: LD_VAR 0 3
3941: PUSH
3942: FOR_IN
3943: IFFALSE 4007
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3945: LD_EXP 51
3949: PPUSH
3950: LD_INT 25
3952: PUSH
3953: LD_INT 2
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PPUSH
3960: CALL_OW 72
3964: PPUSH
3965: LD_VAR 0 2
3969: PUSH
3970: LD_INT 1
3972: ARRAY
3973: PPUSH
3974: LD_VAR 0 2
3978: PUSH
3979: LD_INT 2
3981: ARRAY
3982: PPUSH
3983: LD_VAR 0 2
3987: PUSH
3988: LD_INT 3
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 2
3996: PUSH
3997: LD_INT 4
3999: ARRAY
4000: PPUSH
4001: CALL_OW 205
4005: GO 3942
4007: POP
4008: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
4009: LD_EXP 51
4013: PUSH
4014: LD_INT 2
4016: ARRAY
4017: PPUSH
4018: LD_INT 63
4020: PPUSH
4021: LD_INT 42
4023: PPUSH
4024: CALL_OW 428
4028: PPUSH
4029: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
4033: LD_EXP 51
4037: PUSH
4038: LD_INT 3
4040: ARRAY
4041: PPUSH
4042: LD_INT 94
4044: PPUSH
4045: LD_INT 63
4047: PPUSH
4048: CALL_OW 428
4052: PPUSH
4053: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4057: LD_INT 35
4059: PPUSH
4060: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
4064: LD_EXP 51
4068: PPUSH
4069: LD_INT 25
4071: PUSH
4072: LD_INT 2
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 3
4081: PUSH
4082: LD_INT 60
4084: PUSH
4085: EMPTY
4086: LIST
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PPUSH
4096: CALL_OW 72
4100: IFFALSE 4057
// rolfScriptBase := true ;
4102: LD_ADDR_EXP 9
4106: PUSH
4107: LD_INT 1
4109: ST_TO_ADDR
// end ;
4110: LD_VAR 0 1
4114: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4115: LD_EXP 9
4119: PUSH
4120: LD_EXP 47
4124: PPUSH
4125: CALL_OW 255
4129: PUSH
4130: LD_INT 8
4132: EQUAL
4133: AND
4134: IFFALSE 5141
4136: GO 4138
4138: DISABLE
4139: LD_INT 0
4141: PPUSH
4142: PPUSH
4143: PPUSH
4144: PPUSH
4145: PPUSH
4146: PPUSH
4147: PPUSH
4148: PPUSH
4149: PPUSH
4150: PPUSH
// begin enable ;
4151: ENABLE
// if not rolfSquad then
4152: LD_EXP 51
4156: NOT
4157: IFFALSE 4161
// exit ;
4159: GO 5141
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
4161: LD_ADDR_VAR 0 9
4165: PUSH
4166: LD_INT 12
4168: PPUSH
4169: LD_INT 81
4171: PUSH
4172: LD_INT 8
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 70
4183: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
4184: LD_ADDR_VAR 0 5
4188: PUSH
4189: LD_EXP 51
4193: PPUSH
4194: LD_INT 25
4196: PUSH
4197: LD_INT 1
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PPUSH
4204: CALL_OW 72
4208: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
4209: LD_ADDR_VAR 0 6
4213: PUSH
4214: LD_EXP 51
4218: PPUSH
4219: LD_INT 25
4221: PUSH
4222: LD_INT 2
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PPUSH
4229: CALL_OW 72
4233: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
4234: LD_ADDR_VAR 0 8
4238: PUSH
4239: LD_EXP 51
4243: PPUSH
4244: LD_INT 25
4246: PUSH
4247: LD_INT 3
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: PPUSH
4254: CALL_OW 72
4258: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
4259: LD_ADDR_VAR 0 7
4263: PUSH
4264: LD_EXP 51
4268: PPUSH
4269: LD_INT 25
4271: PUSH
4272: LD_INT 4
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PPUSH
4279: CALL_OW 72
4283: ST_TO_ADDR
// if sol then
4284: LD_VAR 0 5
4288: IFFALSE 4586
// for i in sol union Rolf do
4290: LD_ADDR_VAR 0 1
4294: PUSH
4295: LD_VAR 0 5
4299: PUSH
4300: LD_EXP 47
4304: UNION
4305: PUSH
4306: FOR_IN
4307: IFFALSE 4584
// if not IsInUnit ( i ) and not HasTask ( i ) then
4309: LD_VAR 0 1
4313: PPUSH
4314: CALL_OW 310
4318: NOT
4319: PUSH
4320: LD_VAR 0 1
4324: PPUSH
4325: CALL_OW 314
4329: NOT
4330: AND
4331: IFFALSE 4582
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
4333: LD_VAR 0 1
4337: PPUSH
4338: CALL_OW 256
4342: PUSH
4343: LD_INT 500
4345: LESS
4346: PUSH
4347: LD_VAR 0 1
4351: PPUSH
4352: LD_INT 80
4354: PPUSH
4355: LD_INT 49
4357: PPUSH
4358: CALL_OW 297
4362: PUSH
4363: LD_INT 6
4365: GREATER
4366: AND
4367: IFFALSE 4386
// begin ComMoveXY ( i , 80 , 49 ) ;
4369: LD_VAR 0 1
4373: PPUSH
4374: LD_INT 80
4376: PPUSH
4377: LD_INT 49
4379: PPUSH
4380: CALL_OW 111
// continue ;
4384: GO 4306
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4386: LD_ADDR_VAR 0 4
4390: PUSH
4391: LD_INT 22
4393: PUSH
4394: LD_INT 8
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: LD_INT 50
4403: PUSH
4404: EMPTY
4405: LIST
4406: PUSH
4407: LD_INT 2
4409: PUSH
4410: LD_INT 30
4412: PUSH
4413: LD_INT 4
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 30
4422: PUSH
4423: LD_INT 5
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PUSH
4430: LD_INT 30
4432: PUSH
4433: LD_INT 32
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PUSH
4440: LD_INT 30
4442: PUSH
4443: LD_INT 31
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 69
4466: ST_TO_ADDR
// if tmp then
4467: LD_VAR 0 4
4471: IFFALSE 4582
// begin for b in tmp do
4473: LD_ADDR_VAR 0 2
4477: PUSH
4478: LD_VAR 0 4
4482: PUSH
4483: FOR_IN
4484: IFFALSE 4580
// begin case GetBType ( b ) of b_armoury , b_barracks :
4486: LD_VAR 0 2
4490: PPUSH
4491: CALL_OW 266
4495: PUSH
4496: LD_INT 4
4498: DOUBLE
4499: EQUAL
4500: IFTRUE 4510
4502: LD_INT 5
4504: DOUBLE
4505: EQUAL
4506: IFTRUE 4510
4508: GO 4521
4510: POP
// p := 6 ; b_breastwork , b_bunker :
4511: LD_ADDR_VAR 0 3
4515: PUSH
4516: LD_INT 6
4518: ST_TO_ADDR
4519: GO 4547
4521: LD_INT 31
4523: DOUBLE
4524: EQUAL
4525: IFTRUE 4535
4527: LD_INT 32
4529: DOUBLE
4530: EQUAL
4531: IFTRUE 4535
4533: GO 4546
4535: POP
// p := 1 ; end ;
4536: LD_ADDR_VAR 0 3
4540: PUSH
4541: LD_INT 1
4543: ST_TO_ADDR
4544: GO 4547
4546: POP
// if UnitsInside ( b ) < p then
4547: LD_VAR 0 2
4551: PPUSH
4552: CALL_OW 313
4556: PUSH
4557: LD_VAR 0 3
4561: LESS
4562: IFFALSE 4578
// ComEnterUnit ( i , b ) ;
4564: LD_VAR 0 1
4568: PPUSH
4569: LD_VAR 0 2
4573: PPUSH
4574: CALL_OW 120
// end ;
4578: GO 4483
4580: POP
4581: POP
// end ; end ;
4582: GO 4306
4584: POP
4585: POP
// if sci then
4586: LD_VAR 0 7
4590: IFFALSE 4645
// for i in sci do
4592: LD_ADDR_VAR 0 1
4596: PUSH
4597: LD_VAR 0 7
4601: PUSH
4602: FOR_IN
4603: IFFALSE 4643
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
4605: LD_VAR 0 1
4609: PPUSH
4610: LD_INT 80
4612: PPUSH
4613: LD_INT 49
4615: PPUSH
4616: CALL_OW 297
4620: PUSH
4621: LD_INT 9
4623: GREATER
4624: IFFALSE 4641
// ComMoveXY ( i , 80 , 49 ) ;
4626: LD_VAR 0 1
4630: PPUSH
4631: LD_INT 80
4633: PPUSH
4634: LD_INT 49
4636: PPUSH
4637: CALL_OW 111
// end ;
4641: GO 4602
4643: POP
4644: POP
// if mech then
4645: LD_VAR 0 8
4649: IFFALSE 4863
// for i in mech do
4651: LD_ADDR_VAR 0 1
4655: PUSH
4656: LD_VAR 0 8
4660: PUSH
4661: FOR_IN
4662: IFFALSE 4861
// begin hasVehicle := IsInUnit ( i ) ;
4664: LD_ADDR_VAR 0 10
4668: PUSH
4669: LD_VAR 0 1
4673: PPUSH
4674: CALL_OW 310
4678: ST_TO_ADDR
// if enemyInBase then
4679: LD_VAR 0 9
4683: IFFALSE 4779
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4685: LD_VAR 0 10
4689: PUSH
4690: LD_VAR 0 10
4694: PPUSH
4695: CALL_OW 256
4699: PUSH
4700: LD_INT 500
4702: GREATER
4703: AND
4704: IFFALSE 4732
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4706: LD_VAR 0 10
4710: PPUSH
4711: LD_VAR 0 9
4715: PPUSH
4716: LD_VAR 0 10
4720: PPUSH
4721: CALL_OW 74
4725: PPUSH
4726: CALL_OW 115
4730: GO 4777
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
4732: LD_VAR 0 10
4736: PPUSH
4737: LD_INT 86
4739: PPUSH
4740: LD_INT 49
4742: PPUSH
4743: CALL_OW 297
4747: PUSH
4748: LD_INT 8
4750: GREATER
4751: IFFALSE 4777
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
4753: LD_VAR 0 10
4757: PPUSH
4758: LD_INT 86
4760: PPUSH
4761: LD_INT 49
4763: PPUSH
4764: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
4768: LD_VAR 0 1
4772: PPUSH
4773: CALL 68692 0 1
// end end else
4777: GO 4859
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
4779: LD_VAR 0 1
4783: PPUSH
4784: LD_INT 86
4786: PPUSH
4787: LD_INT 49
4789: PPUSH
4790: CALL_OW 297
4794: PUSH
4795: LD_INT 8
4797: GREATER
4798: IFFALSE 4817
// ComMoveXY ( i , 86 , 49 ) else
4800: LD_VAR 0 1
4804: PPUSH
4805: LD_INT 86
4807: PPUSH
4808: LD_INT 49
4810: PPUSH
4811: CALL_OW 111
4815: GO 4859
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4817: LD_VAR 0 10
4821: PUSH
4822: LD_VAR 0 10
4826: PPUSH
4827: CALL_OW 256
4831: PUSH
4832: LD_INT 1000
4834: LESS
4835: AND
4836: IFFALSE 4859
// begin SetFuel ( hasVehicle , 100 ) ;
4838: LD_VAR 0 10
4842: PPUSH
4843: LD_INT 100
4845: PPUSH
4846: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4850: LD_VAR 0 1
4854: PPUSH
4855: CALL 68572 0 1
// end ; end ; end ;
4859: GO 4661
4861: POP
4862: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4863: LD_ADDR_VAR 0 4
4867: PUSH
4868: LD_INT 12
4870: PPUSH
4871: LD_INT 3
4873: PUSH
4874: LD_INT 24
4876: PUSH
4877: LD_INT 1000
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 21
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 70
4906: ST_TO_ADDR
// if tmp and eng then
4907: LD_VAR 0 4
4911: PUSH
4912: LD_VAR 0 6
4916: AND
4917: IFFALSE 5023
// begin for i in eng do
4919: LD_ADDR_VAR 0 1
4923: PUSH
4924: LD_VAR 0 6
4928: PUSH
4929: FOR_IN
4930: IFFALSE 5021
// if IsInUnit ( i ) then
4932: LD_VAR 0 1
4936: PPUSH
4937: CALL_OW 310
4941: IFFALSE 4954
// ComExitBuilding ( i ) else
4943: LD_VAR 0 1
4947: PPUSH
4948: CALL_OW 122
4952: GO 5019
// if GetLives ( i ) = 1000 then
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 256
4963: PUSH
4964: LD_INT 1000
4966: EQUAL
4967: IFFALSE 4989
// ComRepairBuilding ( i , tmp [ 1 ] ) else
4969: LD_VAR 0 1
4973: PPUSH
4974: LD_VAR 0 4
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PPUSH
4983: CALL_OW 130
4987: GO 5019
// if GetLives ( i ) < 700 then
4989: LD_VAR 0 1
4993: PPUSH
4994: CALL_OW 256
4998: PUSH
4999: LD_INT 700
5001: LESS
5002: IFFALSE 5019
// ComMoveXY ( i , 80 , 49 ) ;
5004: LD_VAR 0 1
5008: PPUSH
5009: LD_INT 80
5011: PPUSH
5012: LD_INT 49
5014: PPUSH
5015: CALL_OW 111
5019: GO 4929
5021: POP
5022: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5023: LD_VAR 0 4
5027: NOT
5028: PUSH
5029: LD_VAR 0 6
5033: PPUSH
5034: LD_INT 3
5036: PUSH
5037: LD_INT 54
5039: PUSH
5040: EMPTY
5041: LIST
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PPUSH
5047: CALL_OW 72
5051: AND
5052: IFFALSE 5141
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5054: LD_ADDR_VAR 0 1
5058: PUSH
5059: LD_VAR 0 6
5063: PPUSH
5064: LD_INT 3
5066: PUSH
5067: LD_INT 54
5069: PUSH
5070: EMPTY
5071: LIST
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PPUSH
5077: CALL_OW 72
5081: PUSH
5082: FOR_IN
5083: IFFALSE 5139
// if GetLives ( i ) < 1000 then
5085: LD_VAR 0 1
5089: PPUSH
5090: CALL_OW 256
5094: PUSH
5095: LD_INT 1000
5097: LESS
5098: IFFALSE 5117
// ComMoveXY ( i , 80 , 49 ) else
5100: LD_VAR 0 1
5104: PPUSH
5105: LD_INT 80
5107: PPUSH
5108: LD_INT 49
5110: PPUSH
5111: CALL_OW 111
5115: GO 5137
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
5117: LD_VAR 0 1
5121: PPUSH
5122: LD_INT 86
5124: PPUSH
5125: LD_INT 54
5127: PPUSH
5128: CALL_OW 428
5132: PPUSH
5133: CALL_OW 120
5137: GO 5082
5139: POP
5140: POP
// end ;
5141: PPOPN 10
5143: END
// export function PrepareOmarSquad ; var i , j , p ; begin
5144: LD_INT 0
5146: PPUSH
5147: PPUSH
5148: PPUSH
5149: PPUSH
// uc_side := 5 ;
5150: LD_ADDR_OWVAR 20
5154: PUSH
5155: LD_INT 5
5157: ST_TO_ADDR
// uc_nation := 2 ;
5158: LD_ADDR_OWVAR 21
5162: PUSH
5163: LD_INT 2
5165: ST_TO_ADDR
// omarSquad := [ ] ;
5166: LD_ADDR_EXP 52
5170: PUSH
5171: EMPTY
5172: ST_TO_ADDR
// for i := 1 to 4 do
5173: LD_ADDR_VAR 0 2
5177: PUSH
5178: DOUBLE
5179: LD_INT 1
5181: DEC
5182: ST_TO_ADDR
5183: LD_INT 4
5185: PUSH
5186: FOR_TO
5187: IFFALSE 5310
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
5189: LD_ADDR_VAR 0 3
5193: PUSH
5194: DOUBLE
5195: LD_INT 1
5197: DEC
5198: ST_TO_ADDR
5199: LD_INT 6
5201: PUSH
5202: LD_INT 2
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: LD_EXP 21
5212: PLUS
5213: PUSH
5214: LD_INT 2
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: PUSH
5223: LD_VAR 0 2
5227: ARRAY
5228: PUSH
5229: FOR_TO
5230: IFFALSE 5306
// begin PrepareHuman ( false , i , 5 ) ;
5232: LD_INT 0
5234: PPUSH
5235: LD_VAR 0 2
5239: PPUSH
5240: LD_INT 5
5242: PPUSH
5243: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
5247: LD_ADDR_EXP 52
5251: PUSH
5252: LD_EXP 52
5256: PPUSH
5257: CALL_OW 44
5261: PPUSH
5262: CALL 66872 0 2
5266: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
5267: LD_VAR 0 2
5271: PUSH
5272: LD_INT 1
5274: EQUAL
5275: PUSH
5276: LD_INT 50
5278: PPUSH
5279: CALL_OW 13
5283: AND
5284: IFFALSE 5304
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
5286: LD_EXP 52
5290: PUSH
5291: LD_EXP 52
5295: ARRAY
5296: PPUSH
5297: LD_INT 8
5299: PPUSH
5300: CALL_OW 336
// end ;
5304: GO 5229
5306: POP
5307: POP
// end ;
5308: GO 5186
5310: POP
5311: POP
// if HexInfo ( 340 , 205 ) then
5312: LD_INT 340
5314: PPUSH
5315: LD_INT 205
5317: PPUSH
5318: CALL_OW 428
5322: IFFALSE 5339
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
5324: LD_INT 340
5326: PPUSH
5327: LD_INT 205
5329: PPUSH
5330: CALL_OW 428
5334: PPUSH
5335: CALL_OW 64
// p := 0 ;
5339: LD_ADDR_VAR 0 4
5343: PUSH
5344: LD_INT 0
5346: ST_TO_ADDR
// for i in omarSquad do
5347: LD_ADDR_VAR 0 2
5351: PUSH
5352: LD_EXP 52
5356: PUSH
5357: FOR_IN
5358: IFFALSE 5559
// begin uc_direction := 4 ;
5360: LD_ADDR_OWVAR 24
5364: PUSH
5365: LD_INT 4
5367: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
5368: LD_VAR 0 2
5372: PPUSH
5373: CALL_OW 257
5377: PUSH
5378: LD_INT 3
5380: EQUAL
5381: PUSH
5382: LD_VAR 0 4
5386: PUSH
5387: LD_INT 2
5389: LESS
5390: AND
5391: IFFALSE 5520
// begin p := p + 1 ;
5393: LD_ADDR_VAR 0 4
5397: PUSH
5398: LD_VAR 0 4
5402: PUSH
5403: LD_INT 1
5405: PLUS
5406: ST_TO_ADDR
// uc_side := 5 ;
5407: LD_ADDR_OWVAR 20
5411: PUSH
5412: LD_INT 5
5414: ST_TO_ADDR
// if rand ( 0 , 1 ) then
5415: LD_INT 0
5417: PPUSH
5418: LD_INT 1
5420: PPUSH
5421: CALL_OW 12
5425: IFFALSE 5456
// begin uc_nation := 2 ;
5427: LD_ADDR_OWVAR 21
5431: PUSH
5432: LD_INT 2
5434: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
5435: LD_INT 13
5437: PPUSH
5438: LD_INT 1
5440: PPUSH
5441: LD_INT 1
5443: PPUSH
5444: LD_INT 27
5446: PPUSH
5447: LD_INT 88
5449: PPUSH
5450: CALL 34420 0 5
// end else
5454: GO 5483
// begin uc_nation := 3 ;
5456: LD_ADDR_OWVAR 21
5460: PUSH
5461: LD_INT 3
5463: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
5464: LD_INT 22
5466: PPUSH
5467: LD_INT 1
5469: PPUSH
5470: LD_INT 1
5472: PPUSH
5473: LD_INT 45
5475: PPUSH
5476: LD_INT 88
5478: PPUSH
5479: CALL 34420 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
5483: CALL_OW 45
5487: PPUSH
5488: LD_INT 13
5490: PPUSH
5491: LD_INT 0
5493: PPUSH
5494: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
5498: LD_VAR 0 2
5502: PPUSH
5503: LD_INT 340
5505: PPUSH
5506: LD_INT 205
5508: PPUSH
5509: CALL_OW 428
5513: PPUSH
5514: CALL_OW 52
// end else
5518: GO 5535
// PlaceUnitArea ( i , southSpawn , false ) ;
5520: LD_VAR 0 2
5524: PPUSH
5525: LD_INT 13
5527: PPUSH
5528: LD_INT 0
5530: PPUSH
5531: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
5535: LD_VAR 0 2
5539: PPUSH
5540: LD_INT 333
5542: PPUSH
5543: LD_INT 210
5545: PPUSH
5546: CALL_OW 111
// wait ( 0 0$2 ) ;
5550: LD_INT 70
5552: PPUSH
5553: CALL_OW 67
// end ;
5557: GO 5357
5559: POP
5560: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
5561: LD_EXP 44
5565: PPUSH
5566: LD_INT 340
5568: PPUSH
5569: LD_INT 205
5571: PPUSH
5572: LD_INT 0
5574: PPUSH
5575: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
5579: LD_EXP 44
5583: PPUSH
5584: LD_INT 333
5586: PPUSH
5587: LD_INT 206
5589: PPUSH
5590: CALL_OW 111
// wait ( 0 0$2 ) ;
5594: LD_INT 70
5596: PPUSH
5597: CALL_OW 67
// ComHold ( omarSquad ) ;
5601: LD_EXP 52
5605: PPUSH
5606: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
5610: LD_EXP 44
5614: PUSH
5615: LD_EXP 52
5619: PPUSH
5620: LD_INT 2
5622: PUSH
5623: LD_INT 25
5625: PUSH
5626: LD_INT 1
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 25
5635: PUSH
5636: LD_INT 8
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: PPUSH
5648: CALL_OW 72
5652: UNION
5653: PUSH
5654: LD_INT 22
5656: PUSH
5657: LD_INT 5
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: PUSH
5664: LD_INT 21
5666: PUSH
5667: LD_INT 2
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PPUSH
5678: CALL_OW 69
5682: UNION
5683: PPUSH
5684: LD_INT 315
5686: PPUSH
5687: LD_INT 214
5689: PPUSH
5690: CALL_OW 114
// wait ( 0 0$22 ) ;
5694: LD_INT 770
5696: PPUSH
5697: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
5701: LD_EXP 52
5705: PUSH
5706: LD_EXP 44
5710: UNION
5711: PPUSH
5712: LD_INT 329
5714: PPUSH
5715: LD_INT 231
5717: PPUSH
5718: CALL_OW 114
// end ;
5722: LD_VAR 0 1
5726: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
5727: LD_EXP 10
5731: IFFALSE 6814
5733: GO 5735
5735: DISABLE
5736: LD_INT 0
5738: PPUSH
5739: PPUSH
5740: PPUSH
5741: PPUSH
5742: PPUSH
5743: PPUSH
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
// begin enable ;
5749: ENABLE
// if not omarSquad then
5750: LD_EXP 52
5754: NOT
5755: IFFALSE 5759
// exit ;
5757: GO 6814
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
5759: LD_ADDR_VAR 0 10
5763: PUSH
5764: LD_INT 14
5766: PPUSH
5767: LD_INT 81
5769: PUSH
5770: LD_INT 5
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PPUSH
5777: CALL_OW 70
5781: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
5782: LD_ADDR_VAR 0 6
5786: PUSH
5787: LD_EXP 52
5791: PPUSH
5792: LD_INT 2
5794: PUSH
5795: LD_INT 25
5797: PUSH
5798: LD_INT 1
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PUSH
5805: LD_INT 25
5807: PUSH
5808: LD_INT 8
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: LIST
5819: PPUSH
5820: CALL_OW 72
5824: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
5825: LD_ADDR_VAR 0 7
5829: PUSH
5830: LD_EXP 52
5834: PPUSH
5835: LD_INT 25
5837: PUSH
5838: LD_INT 2
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PPUSH
5845: CALL_OW 72
5849: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
5850: LD_ADDR_VAR 0 9
5854: PUSH
5855: LD_EXP 52
5859: PPUSH
5860: LD_INT 25
5862: PUSH
5863: LD_INT 3
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 72
5874: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
5875: LD_ADDR_VAR 0 8
5879: PUSH
5880: LD_EXP 52
5884: PPUSH
5885: LD_INT 25
5887: PUSH
5888: LD_INT 4
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 72
5899: ST_TO_ADDR
// if sol then
5900: LD_VAR 0 6
5904: IFFALSE 6268
// for i in sol do
5906: LD_ADDR_VAR 0 1
5910: PUSH
5911: LD_VAR 0 6
5915: PUSH
5916: FOR_IN
5917: IFFALSE 6266
// if not HasTask ( i ) then
5919: LD_VAR 0 1
5923: PPUSH
5924: CALL_OW 314
5928: NOT
5929: IFFALSE 6264
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
5931: LD_VAR 0 1
5935: PPUSH
5936: CALL_OW 310
5940: NOT
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: CALL_OW 256
5951: PUSH
5952: LD_INT 500
5954: LESS
5955: AND
5956: PUSH
5957: LD_VAR 0 1
5961: PPUSH
5962: LD_INT 333
5964: PPUSH
5965: LD_INT 234
5967: PPUSH
5968: CALL_OW 297
5972: PUSH
5973: LD_INT 6
5975: GREATER
5976: AND
5977: IFFALSE 5996
// begin ComMoveXY ( i , 333 , 234 ) ;
5979: LD_VAR 0 1
5983: PPUSH
5984: LD_INT 333
5986: PPUSH
5987: LD_INT 234
5989: PPUSH
5990: CALL_OW 111
// continue ;
5994: GO 5916
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
5996: LD_ADDR_VAR 0 5
6000: PUSH
6001: LD_INT 22
6003: PUSH
6004: LD_INT 5
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 58
6013: PUSH
6014: EMPTY
6015: LIST
6016: PUSH
6017: LD_INT 50
6019: PUSH
6020: EMPTY
6021: LIST
6022: PUSH
6023: LD_INT 2
6025: PUSH
6026: LD_INT 30
6028: PUSH
6029: LD_INT 32
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 30
6038: PUSH
6039: LD_INT 31
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: PPUSH
6057: CALL_OW 69
6061: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
6062: LD_VAR 0 5
6066: PUSH
6067: LD_VAR 0 1
6071: PPUSH
6072: CALL_OW 310
6076: PPUSH
6077: CALL_OW 266
6081: PUSH
6082: LD_INT 31
6084: NONEQUAL
6085: AND
6086: IFFALSE 6168
// begin for j in tmp do
6088: LD_ADDR_VAR 0 2
6092: PUSH
6093: LD_VAR 0 5
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6164
// if GetTag ( j ) <> 1 then
6101: LD_VAR 0 2
6105: PPUSH
6106: CALL_OW 110
6110: PUSH
6111: LD_INT 1
6113: NONEQUAL
6114: IFFALSE 6162
// begin SetTag ( j , 1 ) ;
6116: LD_VAR 0 2
6120: PPUSH
6121: LD_INT 1
6123: PPUSH
6124: CALL_OW 109
// if IsInUnit ( i ) then
6128: LD_VAR 0 1
6132: PPUSH
6133: CALL_OW 310
6137: IFFALSE 6148
// ComExit ( i ) ;
6139: LD_VAR 0 1
6143: PPUSH
6144: CALL 67270 0 1
// AddComEnterUnit ( i , j ) ;
6148: LD_VAR 0 1
6152: PPUSH
6153: LD_VAR 0 2
6157: PPUSH
6158: CALL_OW 180
// end ;
6162: GO 6098
6164: POP
6165: POP
// end else
6166: GO 6264
// if not IsInUnit ( i ) then
6168: LD_VAR 0 1
6172: PPUSH
6173: CALL_OW 310
6177: NOT
6178: IFFALSE 6264
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
6180: LD_ADDR_VAR 0 5
6184: PUSH
6185: LD_INT 22
6187: PUSH
6188: LD_INT 5
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: LD_INT 50
6197: PUSH
6198: EMPTY
6199: LIST
6200: PUSH
6201: LD_INT 30
6203: PUSH
6204: LD_INT 4
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: PPUSH
6216: CALL_OW 69
6220: ST_TO_ADDR
// if tmp then
6221: LD_VAR 0 5
6225: IFFALSE 6264
// if UnitsInside ( tmp [ 1 ] ) < 6 then
6227: LD_VAR 0 5
6231: PUSH
6232: LD_INT 1
6234: ARRAY
6235: PPUSH
6236: CALL_OW 313
6240: PUSH
6241: LD_INT 6
6243: LESS
6244: IFFALSE 6264
// ComEnterUnit ( i , tmp [ 1 ] ) ;
6246: LD_VAR 0 1
6250: PPUSH
6251: LD_VAR 0 5
6255: PUSH
6256: LD_INT 1
6258: ARRAY
6259: PPUSH
6260: CALL_OW 120
// end ; end ;
6264: GO 5916
6266: POP
6267: POP
// if sci then
6268: LD_VAR 0 8
6272: IFFALSE 6327
// for i in sci do
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: LD_VAR 0 8
6283: PUSH
6284: FOR_IN
6285: IFFALSE 6325
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
6287: LD_VAR 0 1
6291: PPUSH
6292: LD_INT 333
6294: PPUSH
6295: LD_INT 234
6297: PPUSH
6298: CALL_OW 297
6302: PUSH
6303: LD_INT 9
6305: GREATER
6306: IFFALSE 6323
// ComMoveXY ( i , 333 , 234 ) ;
6308: LD_VAR 0 1
6312: PPUSH
6313: LD_INT 333
6315: PPUSH
6316: LD_INT 234
6318: PPUSH
6319: CALL_OW 111
// end ;
6323: GO 6284
6325: POP
6326: POP
// if mech then
6327: LD_VAR 0 9
6331: IFFALSE 6536
// for i in mech do
6333: LD_ADDR_VAR 0 1
6337: PUSH
6338: LD_VAR 0 9
6342: PUSH
6343: FOR_IN
6344: IFFALSE 6534
// begin hasVehicle := IsInUnit ( i ) ;
6346: LD_ADDR_VAR 0 11
6350: PUSH
6351: LD_VAR 0 1
6355: PPUSH
6356: CALL_OW 310
6360: ST_TO_ADDR
// if enemyInBase then
6361: LD_VAR 0 10
6365: IFFALSE 6452
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
6367: LD_VAR 0 11
6371: PUSH
6372: LD_VAR 0 11
6376: PPUSH
6377: CALL_OW 256
6381: PUSH
6382: LD_INT 500
6384: GREATER
6385: AND
6386: IFFALSE 6414
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
6388: LD_VAR 0 11
6392: PPUSH
6393: LD_VAR 0 10
6397: PPUSH
6398: LD_VAR 0 11
6402: PPUSH
6403: CALL_OW 74
6407: PPUSH
6408: CALL_OW 115
6412: GO 6450
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
6414: LD_VAR 0 11
6418: PPUSH
6419: LD_INT 333
6421: PPUSH
6422: LD_INT 234
6424: PPUSH
6425: CALL_OW 297
6429: PUSH
6430: LD_INT 6
6432: GREATER
6433: IFFALSE 6450
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
6435: LD_VAR 0 11
6439: PPUSH
6440: LD_INT 333
6442: PPUSH
6443: LD_INT 234
6445: PPUSH
6446: CALL_OW 111
// end else
6450: GO 6532
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
6452: LD_VAR 0 1
6456: PPUSH
6457: LD_INT 333
6459: PPUSH
6460: LD_INT 234
6462: PPUSH
6463: CALL_OW 297
6467: PUSH
6468: LD_INT 6
6470: GREATER
6471: IFFALSE 6490
// ComMoveXY ( i , 333 , 234 ) else
6473: LD_VAR 0 1
6477: PPUSH
6478: LD_INT 333
6480: PPUSH
6481: LD_INT 234
6483: PPUSH
6484: CALL_OW 111
6488: GO 6532
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
6490: LD_VAR 0 11
6494: PUSH
6495: LD_VAR 0 11
6499: PPUSH
6500: CALL_OW 256
6504: PUSH
6505: LD_INT 1000
6507: LESS
6508: AND
6509: IFFALSE 6532
// begin SetFuel ( hasVehicle , 100 ) ;
6511: LD_VAR 0 11
6515: PPUSH
6516: LD_INT 100
6518: PPUSH
6519: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
6523: LD_VAR 0 1
6527: PPUSH
6528: CALL 68572 0 1
// end ; end ; end ;
6532: GO 6343
6534: POP
6535: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6536: LD_ADDR_VAR 0 5
6540: PUSH
6541: LD_INT 14
6543: PPUSH
6544: LD_INT 3
6546: PUSH
6547: LD_INT 24
6549: PUSH
6550: LD_INT 1000
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 21
6563: PUSH
6564: LD_INT 3
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PPUSH
6575: CALL_OW 70
6579: ST_TO_ADDR
// if tmp and eng then
6580: LD_VAR 0 5
6584: PUSH
6585: LD_VAR 0 7
6589: AND
6590: IFFALSE 6696
// begin for i in eng do
6592: LD_ADDR_VAR 0 1
6596: PUSH
6597: LD_VAR 0 7
6601: PUSH
6602: FOR_IN
6603: IFFALSE 6694
// if IsInUnit ( i ) then
6605: LD_VAR 0 1
6609: PPUSH
6610: CALL_OW 310
6614: IFFALSE 6627
// ComExitBuilding ( i ) else
6616: LD_VAR 0 1
6620: PPUSH
6621: CALL_OW 122
6625: GO 6692
// if GetLives ( i ) = 1000 then
6627: LD_VAR 0 1
6631: PPUSH
6632: CALL_OW 256
6636: PUSH
6637: LD_INT 1000
6639: EQUAL
6640: IFFALSE 6662
// ComRepairBuilding ( i , tmp [ 1 ] ) else
6642: LD_VAR 0 1
6646: PPUSH
6647: LD_VAR 0 5
6651: PUSH
6652: LD_INT 1
6654: ARRAY
6655: PPUSH
6656: CALL_OW 130
6660: GO 6692
// if GetLives ( i ) < 700 then
6662: LD_VAR 0 1
6666: PPUSH
6667: CALL_OW 256
6671: PUSH
6672: LD_INT 700
6674: LESS
6675: IFFALSE 6692
// ComMoveXY ( i , 333 , 234 ) ;
6677: LD_VAR 0 1
6681: PPUSH
6682: LD_INT 333
6684: PPUSH
6685: LD_INT 234
6687: PPUSH
6688: CALL_OW 111
6692: GO 6602
6694: POP
6695: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
6696: LD_VAR 0 5
6700: NOT
6701: PUSH
6702: LD_VAR 0 7
6706: PPUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 54
6712: PUSH
6713: EMPTY
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PPUSH
6720: CALL_OW 72
6724: AND
6725: IFFALSE 6814
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6727: LD_ADDR_VAR 0 1
6731: PUSH
6732: LD_VAR 0 7
6736: PPUSH
6737: LD_INT 3
6739: PUSH
6740: LD_INT 54
6742: PUSH
6743: EMPTY
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PPUSH
6750: CALL_OW 72
6754: PUSH
6755: FOR_IN
6756: IFFALSE 6812
// if GetLives ( i ) < 1000 then
6758: LD_VAR 0 1
6762: PPUSH
6763: CALL_OW 256
6767: PUSH
6768: LD_INT 1000
6770: LESS
6771: IFFALSE 6790
// ComMoveXY ( i , 333 , 234 ) else
6773: LD_VAR 0 1
6777: PPUSH
6778: LD_INT 333
6780: PPUSH
6781: LD_INT 234
6783: PPUSH
6784: CALL_OW 111
6788: GO 6810
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
6790: LD_VAR 0 1
6794: PPUSH
6795: LD_INT 341
6797: PPUSH
6798: LD_INT 232
6800: PPUSH
6801: CALL_OW 428
6805: PPUSH
6806: CALL_OW 120
6810: GO 6755
6812: POP
6813: POP
// end ;
6814: PPOPN 11
6816: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
6817: LD_EXP 44
6821: PPUSH
6822: CALL_OW 256
6826: PUSH
6827: LD_INT 1000
6829: LESS
6830: IFFALSE 6848
6832: GO 6834
6834: DISABLE
// begin enable ;
6835: ENABLE
// SetLives ( Omar , 1000 ) ;
6836: LD_EXP 44
6840: PPUSH
6841: LD_INT 1000
6843: PPUSH
6844: CALL_OW 234
// end ;
6848: END
// every 0 0$1 trigger GetLives ( Rolf ) < 1000 and rolfAttack do
6849: LD_EXP 47
6853: PPUSH
6854: CALL_OW 256
6858: PUSH
6859: LD_INT 1000
6861: LESS
6862: PUSH
6863: LD_EXP 32
6867: AND
6868: IFFALSE 6886
6870: GO 6872
6872: DISABLE
// begin enable ;
6873: ENABLE
// SetLives ( Rolf , 1000 ) ;
6874: LD_EXP 47
6878: PPUSH
6879: LD_INT 1000
6881: PPUSH
6882: CALL_OW 234
// end ;
6886: END
// every 0 0$1 trigger rolfAttack do var i , tmp , mech , path , tag , rolfCoords ;
6887: LD_EXP 32
6891: IFFALSE 7571
6893: GO 6895
6895: DISABLE
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
// begin path := [ [ 215 , 162 ] , [ 195 , 163 ] , [ 174 , 162 ] , [ 145 , 163 ] , [ 127 , 163 ] ] ;
6904: LD_ADDR_VAR 0 4
6908: PUSH
6909: LD_INT 215
6911: PUSH
6912: LD_INT 162
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 195
6921: PUSH
6922: LD_INT 163
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: LD_INT 174
6931: PUSH
6932: LD_INT 162
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 145
6941: PUSH
6942: LD_INT 163
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 127
6951: PUSH
6952: LD_INT 163
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: ST_TO_ADDR
// rolfCoords := [ 221 , 161 ] ;
6966: LD_ADDR_VAR 0 6
6970: PUSH
6971: LD_INT 221
6973: PUSH
6974: LD_INT 161
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: ST_TO_ADDR
// tmp := Rolf union rolfSquad ;
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: LD_EXP 47
6990: PUSH
6991: LD_EXP 51
6995: UNION
6996: ST_TO_ADDR
// if not tmp then
6997: LD_VAR 0 2
7001: NOT
7002: IFFALSE 7006
// exit ;
7004: GO 7571
// ComMoveXY ( tmp , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7006: LD_VAR 0 2
7010: PPUSH
7011: LD_VAR 0 6
7015: PUSH
7016: LD_INT 1
7018: ARRAY
7019: PPUSH
7020: LD_VAR 0 6
7024: PUSH
7025: LD_INT 2
7027: ARRAY
7028: PPUSH
7029: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7033: LD_INT 35
7035: PPUSH
7036: CALL_OW 67
// tmp := UnitFilter ( rolfSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
7040: LD_ADDR_VAR 0 2
7044: PUSH
7045: LD_EXP 51
7049: PPUSH
7050: LD_INT 3
7052: PUSH
7053: LD_INT 55
7055: PUSH
7056: EMPTY
7057: LIST
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: LD_INT 25
7068: PUSH
7069: LD_INT 1
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 25
7078: PUSH
7079: LD_INT 8
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PPUSH
7095: CALL_OW 72
7099: ST_TO_ADDR
// if tmp then
7100: LD_VAR 0 2
7104: IFFALSE 7257
// begin for i in tmp do
7106: LD_ADDR_VAR 0 1
7110: PUSH
7111: LD_VAR 0 2
7115: PUSH
7116: FOR_IN
7117: IFFALSE 7255
// begin tag := GetTag ( i ) ;
7119: LD_ADDR_VAR 0 5
7123: PUSH
7124: LD_VAR 0 1
7128: PPUSH
7129: CALL_OW 110
7133: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
7134: LD_VAR 0 1
7138: PPUSH
7139: CALL_OW 256
7143: PUSH
7144: LD_INT 800
7146: LESS
7147: PUSH
7148: LD_VAR 0 5
7152: PUSH
7153: LD_INT 101
7155: LESS
7156: AND
7157: IFFALSE 7200
// begin SetTag ( i , 101 ) ;
7159: LD_VAR 0 1
7163: PPUSH
7164: LD_INT 101
7166: PPUSH
7167: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7171: LD_VAR 0 1
7175: PPUSH
7176: LD_VAR 0 6
7180: PUSH
7181: LD_INT 1
7183: ARRAY
7184: PPUSH
7185: LD_VAR 0 6
7189: PUSH
7190: LD_INT 2
7192: ARRAY
7193: PPUSH
7194: CALL_OW 111
// end else
7198: GO 7253
// if tag = 101 then
7200: LD_VAR 0 5
7204: PUSH
7205: LD_INT 101
7207: EQUAL
7208: IFFALSE 7239
// begin if GetLives ( i ) = 1000 then
7210: LD_VAR 0 1
7214: PPUSH
7215: CALL_OW 256
7219: PUSH
7220: LD_INT 1000
7222: EQUAL
7223: IFFALSE 7237
// SetTag ( i , 0 ) ;
7225: LD_VAR 0 1
7229: PPUSH
7230: LD_INT 0
7232: PPUSH
7233: CALL_OW 109
// end else
7237: GO 7253
// AgressiveMove ( i , path ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_VAR 0 4
7248: PPUSH
7249: CALL 69476 0 2
// end ;
7253: GO 7116
7255: POP
7256: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
7257: LD_ADDR_VAR 0 2
7261: PUSH
7262: LD_INT 22
7264: PUSH
7265: LD_INT 8
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 21
7274: PUSH
7275: LD_INT 2
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: LD_INT 3
7284: PUSH
7285: LD_INT 34
7287: PUSH
7288: LD_INT 32
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: LIST
7303: PPUSH
7304: CALL_OW 69
7308: ST_TO_ADDR
// if not tmp then
7309: LD_VAR 0 2
7313: NOT
7314: IFFALSE 7318
// continue ;
7316: GO 7033
// for i in tmp do
7318: LD_ADDR_VAR 0 1
7322: PUSH
7323: LD_VAR 0 2
7327: PUSH
7328: FOR_IN
7329: IFFALSE 7562
// begin mech := IsDrivenBy ( i ) ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 311
7345: ST_TO_ADDR
// if not mech then
7346: LD_VAR 0 3
7350: NOT
7351: IFFALSE 7355
// continue ;
7353: GO 7328
// tag := GetTag ( i ) ;
7355: LD_ADDR_VAR 0 5
7359: PUSH
7360: LD_VAR 0 1
7364: PPUSH
7365: CALL_OW 110
7369: ST_TO_ADDR
// if GetLives ( i ) >= 600 and tag < 101 then
7370: LD_VAR 0 1
7374: PPUSH
7375: CALL_OW 256
7379: PUSH
7380: LD_INT 600
7382: GREATEREQUAL
7383: PUSH
7384: LD_VAR 0 5
7388: PUSH
7389: LD_INT 101
7391: LESS
7392: AND
7393: IFFALSE 7409
// AgressiveMove ( i , path ) ;
7395: LD_VAR 0 1
7399: PPUSH
7400: LD_VAR 0 4
7404: PPUSH
7405: CALL 69476 0 2
// if GetLives ( i ) < 600 and tag < 101 then
7409: LD_VAR 0 1
7413: PPUSH
7414: CALL_OW 256
7418: PUSH
7419: LD_INT 600
7421: LESS
7422: PUSH
7423: LD_VAR 0 5
7427: PUSH
7428: LD_INT 101
7430: LESS
7431: AND
7432: IFFALSE 7473
// begin SetTag ( i , 101 ) ;
7434: LD_VAR 0 1
7438: PPUSH
7439: LD_INT 101
7441: PPUSH
7442: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7446: LD_VAR 0 1
7450: PPUSH
7451: LD_VAR 0 6
7455: PUSH
7456: LD_INT 1
7458: ARRAY
7459: PPUSH
7460: LD_VAR 0 6
7464: PUSH
7465: LD_INT 2
7467: ARRAY
7468: PPUSH
7469: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) < 9 and mech then
7473: LD_VAR 0 5
7477: PUSH
7478: LD_INT 101
7480: EQUAL
7481: PUSH
7482: LD_VAR 0 1
7486: PPUSH
7487: LD_VAR 0 6
7491: PUSH
7492: LD_INT 1
7494: ARRAY
7495: PPUSH
7496: LD_VAR 0 6
7500: PUSH
7501: LD_INT 2
7503: ARRAY
7504: PPUSH
7505: CALL_OW 297
7509: PUSH
7510: LD_INT 9
7512: LESS
7513: AND
7514: PUSH
7515: LD_VAR 0 3
7519: AND
7520: IFFALSE 7560
// begin if GetLives ( i ) < 1000 then
7522: LD_VAR 0 1
7526: PPUSH
7527: CALL_OW 256
7531: PUSH
7532: LD_INT 1000
7534: LESS
7535: IFFALSE 7548
// AddComRepairVehicleAndReturn ( mech ) else
7537: LD_VAR 0 3
7541: PPUSH
7542: CALL 68692 0 1
7546: GO 7560
// SetTag ( i , 0 ) ;
7548: LD_VAR 0 1
7552: PPUSH
7553: LD_INT 0
7555: PPUSH
7556: CALL_OW 109
// end ; end ;
7560: GO 7328
7562: POP
7563: POP
// until not tmp ;
7564: LD_VAR 0 2
7568: NOT
7569: IFFALSE 7033
// end ;
7571: PPOPN 6
7573: END
// every 0 0$1 trigger omarAttack do var i , cargo , tmp , tag , mech , x , path , omarAttackCoords ;
7574: LD_EXP 23
7578: IFFALSE 8883
7580: GO 7582
7582: DISABLE
7583: LD_INT 0
7585: PPUSH
7586: PPUSH
7587: PPUSH
7588: PPUSH
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
// begin path := [ [ 209 , 221 ] , [ 190 , 220 ] , [ 177 , 220 ] , [ 168 , 223 ] , [ 150 , 206 ] ] ;
7593: LD_ADDR_VAR 0 7
7597: PUSH
7598: LD_INT 209
7600: PUSH
7601: LD_INT 221
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 190
7610: PUSH
7611: LD_INT 220
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: LD_INT 177
7620: PUSH
7621: LD_INT 220
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 168
7630: PUSH
7631: LD_INT 223
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 150
7640: PUSH
7641: LD_INT 206
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: ST_TO_ADDR
// omarAttackCoords := [ 219 , 225 , 0 ] ;
7655: LD_ADDR_VAR 0 8
7659: PUSH
7660: LD_INT 219
7662: PUSH
7663: LD_INT 225
7665: PUSH
7666: LD_INT 0
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: ST_TO_ADDR
// for i := 1 to 2 do
7674: LD_ADDR_VAR 0 1
7678: PUSH
7679: DOUBLE
7680: LD_INT 1
7682: DEC
7683: ST_TO_ADDR
7684: LD_INT 2
7686: PUSH
7687: FOR_TO
7688: IFFALSE 7837
// begin uc_side := 5 ;
7690: LD_ADDR_OWVAR 20
7694: PUSH
7695: LD_INT 5
7697: ST_TO_ADDR
// uc_nation := 2 ;
7698: LD_ADDR_OWVAR 21
7702: PUSH
7703: LD_INT 2
7705: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
7706: LD_INT 14
7708: PPUSH
7709: LD_INT 1
7711: PPUSH
7712: LD_INT 1
7714: PPUSH
7715: LD_INT 32
7717: PPUSH
7718: LD_INT 80
7720: PPUSH
7721: CALL 34420 0 5
// cargo := Join ( cargo , CreateVehicle ) ;
7725: LD_ADDR_VAR 0 2
7729: PUSH
7730: LD_VAR 0 2
7734: PPUSH
7735: CALL_OW 45
7739: PPUSH
7740: CALL 66872 0 2
7744: ST_TO_ADDR
// SetDir ( cargo [ i ] , 4 ) ;
7745: LD_VAR 0 2
7749: PUSH
7750: LD_VAR 0 1
7754: ARRAY
7755: PPUSH
7756: LD_INT 4
7758: PPUSH
7759: CALL_OW 233
// PlaceUnitArea ( cargo [ i ] , omarVehiclesArea , false ) ;
7763: LD_VAR 0 2
7767: PUSH
7768: LD_VAR 0 1
7772: ARRAY
7773: PPUSH
7774: LD_INT 16
7776: PPUSH
7777: LD_INT 0
7779: PPUSH
7780: CALL_OW 49
// PrepareMechanic ( false , 4 ) ;
7784: LD_INT 0
7786: PPUSH
7787: LD_INT 4
7789: PPUSH
7790: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo [ i ] ) ;
7794: CALL_OW 44
7798: PPUSH
7799: LD_VAR 0 2
7803: PUSH
7804: LD_VAR 0 1
7808: ARRAY
7809: PPUSH
7810: CALL_OW 52
// ComMoveXY ( cargo [ i ] , 337 , 232 ) ;
7814: LD_VAR 0 2
7818: PUSH
7819: LD_VAR 0 1
7823: ARRAY
7824: PPUSH
7825: LD_INT 337
7827: PPUSH
7828: LD_INT 232
7830: PPUSH
7831: CALL_OW 111
// end ;
7835: GO 7687
7837: POP
7838: POP
// wait ( 0 0$25 ) ;
7839: LD_INT 875
7841: PPUSH
7842: CALL_OW 67
// for i := 1 to 2 do
7846: LD_ADDR_VAR 0 1
7850: PUSH
7851: DOUBLE
7852: LD_INT 1
7854: DEC
7855: ST_TO_ADDR
7856: LD_INT 2
7858: PUSH
7859: FOR_TO
7860: IFFALSE 7885
// SetCargo ( cargo [ i ] , mat_oil , 100 ) ;
7862: LD_VAR 0 2
7866: PUSH
7867: LD_VAR 0 1
7871: ARRAY
7872: PPUSH
7873: LD_INT 2
7875: PPUSH
7876: LD_INT 100
7878: PPUSH
7879: CALL_OW 290
7883: GO 7859
7885: POP
7886: POP
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
7887: LD_EXP 52
7891: PPUSH
7892: LD_INT 2
7894: PUSH
7895: LD_INT 25
7897: PUSH
7898: LD_INT 1
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 25
7907: PUSH
7908: LD_INT 8
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: LIST
7919: PPUSH
7920: CALL_OW 72
7924: PPUSH
7925: CALL_OW 122
// wait ( 0 0$3 ) ;
7929: LD_INT 105
7931: PPUSH
7932: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
7936: LD_EXP 52
7940: PUSH
7941: LD_EXP 44
7945: UNION
7946: PPUSH
7947: LD_VAR 0 8
7951: PUSH
7952: LD_INT 1
7954: ARRAY
7955: PPUSH
7956: LD_VAR 0 8
7960: PUSH
7961: LD_INT 2
7963: ARRAY
7964: PPUSH
7965: CALL_OW 174
// wait ( 0 0$3 ) ;
7969: LD_INT 105
7971: PPUSH
7972: CALL_OW 67
// AddComMoveXY ( cargo , 218 , 217 ) ;
7976: LD_VAR 0 2
7980: PPUSH
7981: LD_INT 218
7983: PPUSH
7984: LD_INT 217
7986: PPUSH
7987: CALL_OW 171
// wait ( 1 1$00 ) ;
7991: LD_INT 2100
7993: PPUSH
7994: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7998: LD_INT 35
8000: PPUSH
8001: CALL_OW 67
// if omarAttackCoords [ 3 ] = 0 then
8005: LD_VAR 0 8
8009: PUSH
8010: LD_INT 3
8012: ARRAY
8013: PUSH
8014: LD_INT 0
8016: EQUAL
8017: IFFALSE 8122
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 168 , 229 , 12 ] ] ) = 0 then
8019: LD_INT 22
8021: PUSH
8022: LD_INT 3
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: LD_INT 92
8031: PUSH
8032: LD_INT 168
8034: PUSH
8035: LD_INT 229
8037: PUSH
8038: LD_INT 12
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PPUSH
8051: CALL_OW 69
8055: PUSH
8056: LD_INT 0
8058: EQUAL
8059: IFFALSE 8122
// begin omarAttackCoords := [ 167 , 222 , 1 ] ;
8061: LD_ADDR_VAR 0 8
8065: PUSH
8066: LD_INT 167
8068: PUSH
8069: LD_INT 222
8071: PUSH
8072: LD_INT 1
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: ST_TO_ADDR
// AddComMoveXY ( Omar ^ cargo ^ UnitFilter ( omarSquad , [ f_class , 4 ] ) , 167 , 222 ) ;
8080: LD_EXP 44
8084: PUSH
8085: LD_VAR 0 2
8089: ADD
8090: PUSH
8091: LD_EXP 52
8095: PPUSH
8096: LD_INT 25
8098: PUSH
8099: LD_INT 4
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 72
8110: ADD
8111: PPUSH
8112: LD_INT 167
8114: PPUSH
8115: LD_INT 222
8117: PPUSH
8118: CALL_OW 171
// end ; tmp := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
8122: LD_ADDR_VAR 0 3
8126: PUSH
8127: LD_EXP 52
8131: PPUSH
8132: LD_INT 3
8134: PUSH
8135: LD_INT 55
8137: PUSH
8138: EMPTY
8139: LIST
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 2
8147: PUSH
8148: LD_INT 25
8150: PUSH
8151: LD_INT 1
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 25
8160: PUSH
8161: LD_INT 8
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PPUSH
8177: CALL_OW 72
8181: ST_TO_ADDR
// if tmp then
8182: LD_VAR 0 3
8186: IFFALSE 8399
// begin for i in tmp do
8188: LD_ADDR_VAR 0 1
8192: PUSH
8193: LD_VAR 0 3
8197: PUSH
8198: FOR_IN
8199: IFFALSE 8397
// begin tag := GetTag ( i ) ;
8201: LD_ADDR_VAR 0 4
8205: PUSH
8206: LD_VAR 0 1
8210: PPUSH
8211: CALL_OW 110
8215: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
8216: LD_VAR 0 1
8220: PPUSH
8221: CALL_OW 256
8225: PUSH
8226: LD_INT 800
8228: LESS
8229: PUSH
8230: LD_VAR 0 4
8234: PUSH
8235: LD_INT 101
8237: LESS
8238: AND
8239: IFFALSE 8282
// begin SetTag ( i , 101 ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_INT 101
8248: PPUSH
8249: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8253: LD_VAR 0 1
8257: PPUSH
8258: LD_VAR 0 8
8262: PUSH
8263: LD_INT 1
8265: ARRAY
8266: PPUSH
8267: LD_VAR 0 8
8271: PUSH
8272: LD_INT 2
8274: ARRAY
8275: PPUSH
8276: CALL_OW 111
// end else
8280: GO 8395
// if tag = 101 then
8282: LD_VAR 0 4
8286: PUSH
8287: LD_INT 101
8289: EQUAL
8290: IFFALSE 8381
// begin if GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) > 10 then
8292: LD_VAR 0 1
8296: PPUSH
8297: LD_VAR 0 8
8301: PUSH
8302: LD_INT 1
8304: ARRAY
8305: PPUSH
8306: LD_VAR 0 8
8310: PUSH
8311: LD_INT 2
8313: ARRAY
8314: PPUSH
8315: CALL_OW 297
8319: PUSH
8320: LD_INT 10
8322: GREATER
8323: IFFALSE 8352
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8325: LD_VAR 0 1
8329: PPUSH
8330: LD_VAR 0 8
8334: PUSH
8335: LD_INT 1
8337: ARRAY
8338: PPUSH
8339: LD_VAR 0 8
8343: PUSH
8344: LD_INT 2
8346: ARRAY
8347: PPUSH
8348: CALL_OW 111
// if GetLives ( i ) = 1000 then
8352: LD_VAR 0 1
8356: PPUSH
8357: CALL_OW 256
8361: PUSH
8362: LD_INT 1000
8364: EQUAL
8365: IFFALSE 8379
// SetTag ( i , 0 ) ;
8367: LD_VAR 0 1
8371: PPUSH
8372: LD_INT 0
8374: PPUSH
8375: CALL_OW 109
// end else
8379: GO 8395
// AgressiveMove ( i , path ) ;
8381: LD_VAR 0 1
8385: PPUSH
8386: LD_VAR 0 7
8390: PPUSH
8391: CALL 69476 0 2
// end ;
8395: GO 8198
8397: POP
8398: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
8399: LD_ADDR_VAR 0 3
8403: PUSH
8404: LD_INT 22
8406: PUSH
8407: LD_INT 5
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 21
8416: PUSH
8417: LD_INT 2
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PUSH
8424: LD_INT 3
8426: PUSH
8427: LD_INT 34
8429: PUSH
8430: LD_INT 32
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 69
8450: ST_TO_ADDR
// if not tmp then
8451: LD_VAR 0 3
8455: NOT
8456: IFFALSE 8460
// continue ;
8458: GO 7998
// for i in tmp do
8460: LD_ADDR_VAR 0 1
8464: PUSH
8465: LD_VAR 0 3
8469: PUSH
8470: FOR_IN
8471: IFFALSE 8874
// begin mech := IsDrivenBy ( i ) ;
8473: LD_ADDR_VAR 0 5
8477: PUSH
8478: LD_VAR 0 1
8482: PPUSH
8483: CALL_OW 311
8487: ST_TO_ADDR
// if not mech then
8488: LD_VAR 0 5
8492: NOT
8493: IFFALSE 8497
// continue ;
8495: GO 8470
// tag := GetTag ( i ) ;
8497: LD_ADDR_VAR 0 4
8501: PUSH
8502: LD_VAR 0 1
8506: PPUSH
8507: CALL_OW 110
8511: ST_TO_ADDR
// if GetFuel ( i ) > 90 and tag = 102 then
8512: LD_VAR 0 1
8516: PPUSH
8517: CALL_OW 261
8521: PUSH
8522: LD_INT 90
8524: GREATER
8525: PUSH
8526: LD_VAR 0 4
8530: PUSH
8531: LD_INT 102
8533: EQUAL
8534: AND
8535: IFFALSE 8551
// SetTag ( i , 0 ) else
8537: LD_VAR 0 1
8541: PPUSH
8542: LD_INT 0
8544: PPUSH
8545: CALL_OW 109
8549: GO 8647
// if GetTag ( i ) = 102 then
8551: LD_VAR 0 1
8555: PPUSH
8556: CALL_OW 110
8560: PUSH
8561: LD_INT 102
8563: EQUAL
8564: IFFALSE 8647
// begin x := rand ( 1 , 2 ) ;
8566: LD_ADDR_VAR 0 6
8570: PUSH
8571: LD_INT 1
8573: PPUSH
8574: LD_INT 2
8576: PPUSH
8577: CALL_OW 12
8581: ST_TO_ADDR
// AddComMoveUnit ( i , cargo [ x ] ) ;
8582: LD_VAR 0 1
8586: PPUSH
8587: LD_VAR 0 2
8591: PUSH
8592: LD_VAR 0 6
8596: ARRAY
8597: PPUSH
8598: CALL_OW 172
// if GetCargo ( cargo [ x ] , mat_oil ) < 20 then
8602: LD_VAR 0 2
8606: PUSH
8607: LD_VAR 0 6
8611: ARRAY
8612: PPUSH
8613: LD_INT 2
8615: PPUSH
8616: CALL_OW 289
8620: PUSH
8621: LD_INT 20
8623: LESS
8624: IFFALSE 8647
// SetCargo ( cargo [ x ] , mat_oil , 100 ) ;
8626: LD_VAR 0 2
8630: PUSH
8631: LD_VAR 0 6
8635: ARRAY
8636: PPUSH
8637: LD_INT 2
8639: PPUSH
8640: LD_INT 100
8642: PPUSH
8643: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and tag < 101 then
8647: LD_VAR 0 1
8651: PPUSH
8652: CALL_OW 256
8656: PUSH
8657: LD_INT 600
8659: GREATEREQUAL
8660: PUSH
8661: LD_VAR 0 4
8665: PUSH
8666: LD_INT 101
8668: LESS
8669: AND
8670: IFFALSE 8686
// AgressiveMove ( i , path ) ;
8672: LD_VAR 0 1
8676: PPUSH
8677: LD_VAR 0 7
8681: PPUSH
8682: CALL 69476 0 2
// if GetLives ( i ) < 600 and tag < 101 then
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 256
8695: PUSH
8696: LD_INT 600
8698: LESS
8699: PUSH
8700: LD_VAR 0 4
8704: PUSH
8705: LD_INT 101
8707: LESS
8708: AND
8709: IFFALSE 8750
// begin SetTag ( i , 101 ) ;
8711: LD_VAR 0 1
8715: PPUSH
8716: LD_INT 101
8718: PPUSH
8719: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8723: LD_VAR 0 1
8727: PPUSH
8728: LD_VAR 0 8
8732: PUSH
8733: LD_INT 1
8735: ARRAY
8736: PPUSH
8737: LD_VAR 0 8
8741: PUSH
8742: LD_INT 2
8744: ARRAY
8745: PPUSH
8746: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) < 9 and mech then
8750: LD_VAR 0 4
8754: PUSH
8755: LD_INT 101
8757: EQUAL
8758: PUSH
8759: LD_VAR 0 1
8763: PPUSH
8764: LD_VAR 0 8
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_VAR 0 8
8777: PUSH
8778: LD_INT 2
8780: ARRAY
8781: PPUSH
8782: CALL_OW 297
8786: PUSH
8787: LD_INT 9
8789: LESS
8790: AND
8791: PUSH
8792: LD_VAR 0 5
8796: AND
8797: IFFALSE 8872
// begin if GetLives ( i ) < 1000 then
8799: LD_VAR 0 1
8803: PPUSH
8804: CALL_OW 256
8808: PUSH
8809: LD_INT 1000
8811: LESS
8812: IFFALSE 8825
// AddComRepairVehicleAndReturn ( mech ) else
8814: LD_VAR 0 5
8818: PPUSH
8819: CALL 68692 0 1
8823: GO 8872
// if GetFuel ( i ) <= 50 and cargo then
8825: LD_VAR 0 1
8829: PPUSH
8830: CALL_OW 261
8834: PUSH
8835: LD_INT 50
8837: LESSEQUAL
8838: PUSH
8839: LD_VAR 0 2
8843: AND
8844: IFFALSE 8860
// SetTag ( i , 102 ) else
8846: LD_VAR 0 1
8850: PPUSH
8851: LD_INT 102
8853: PPUSH
8854: CALL_OW 109
8858: GO 8872
// SetTag ( i , 0 ) ;
8860: LD_VAR 0 1
8864: PPUSH
8865: LD_INT 0
8867: PPUSH
8868: CALL_OW 109
// end ; end ;
8872: GO 8470
8874: POP
8875: POP
// until not tmp ;
8876: LD_VAR 0 3
8880: NOT
8881: IFFALSE 7998
// end ;
8883: PPOPN 8
8885: END
// export function GoForOil ; var i , tmp , data , chance , vehicle , needOil , heikeInConvoy , success ; begin
8886: LD_INT 0
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
8892: PPUSH
8893: PPUSH
8894: PPUSH
8895: PPUSH
8896: PPUSH
// SetAreaMapShow ( oilArea , 1 ) ;
8897: LD_INT 20
8899: PPUSH
8900: LD_INT 1
8902: PPUSH
8903: CALL_OW 424
// repeat wait ( 0 0$5 ) ;
8907: LD_INT 175
8909: PPUSH
8910: CALL_OW 67
// heikeInConvoy := false ;
8914: LD_ADDR_VAR 0 8
8918: PUSH
8919: LD_INT 0
8921: ST_TO_ADDR
// needOil := false ;
8922: LD_ADDR_VAR 0 7
8926: PUSH
8927: LD_INT 0
8929: ST_TO_ADDR
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] ] ) ;
8930: LD_ADDR_VAR 0 3
8934: PUSH
8935: LD_INT 20
8937: PPUSH
8938: LD_INT 22
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 3
8950: PUSH
8951: LD_INT 2
8953: PUSH
8954: LD_INT 34
8956: PUSH
8957: LD_INT 88
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PUSH
8964: LD_INT 34
8966: PUSH
8967: LD_INT 31
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: LD_INT 33
8985: PUSH
8986: LD_INT 1
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: LIST
8997: PPUSH
8998: CALL_OW 70
9002: ST_TO_ADDR
// for i in tmp do
9003: LD_ADDR_VAR 0 2
9007: PUSH
9008: LD_VAR 0 3
9012: PUSH
9013: FOR_IN
9014: IFFALSE 9099
// begin if IsDrivenBy ( i ) = Heike then
9016: LD_VAR 0 2
9020: PPUSH
9021: CALL_OW 311
9025: PUSH
9026: LD_EXP 34
9030: EQUAL
9031: IFFALSE 9050
// begin heikeInConvoy := true ;
9033: LD_ADDR_VAR 0 8
9037: PUSH
9038: LD_INT 1
9040: ST_TO_ADDR
// Query ( QHeikeConvoy ) ;
9041: LD_STRING QHeikeConvoy
9043: PPUSH
9044: CALL_OW 97
// break ;
9048: GO 9099
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 10 then
9050: LD_VAR 0 2
9054: PPUSH
9055: CALL_OW 262
9059: PUSH
9060: LD_INT 1
9062: EQUAL
9063: PUSH
9064: LD_VAR 0 2
9068: PPUSH
9069: CALL_OW 261
9073: PUSH
9074: LD_INT 10
9076: LESS
9077: AND
9078: IFFALSE 9097
// begin needOil := true ;
9080: LD_ADDR_VAR 0 7
9084: PUSH
9085: LD_INT 1
9087: ST_TO_ADDR
// Query ( QNeedOil ) ;
9088: LD_STRING QNeedOil
9090: PPUSH
9091: CALL_OW 97
// break ;
9095: GO 9099
// end ; end ;
9097: GO 9013
9099: POP
9100: POP
// if not needOil and not heikeInConvoy and UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
9101: LD_VAR 0 7
9105: NOT
9106: PUSH
9107: LD_VAR 0 8
9111: NOT
9112: AND
9113: PUSH
9114: LD_VAR 0 3
9118: PPUSH
9119: LD_INT 2
9121: PUSH
9122: LD_INT 34
9124: PUSH
9125: LD_INT 32
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 34
9134: PUSH
9135: LD_INT 51
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: PPUSH
9147: CALL_OW 72
9151: AND
9152: IFFALSE 9169
// if Query ( QConvoy ) = 1 then
9154: LD_STRING QConvoy
9156: PPUSH
9157: CALL_OW 97
9161: PUSH
9162: LD_INT 1
9164: EQUAL
9165: IFFALSE 9169
// break ;
9167: GO 9173
// until false ;
9169: LD_INT 0
9171: IFFALSE 8907
// SetAreaMapShow ( oilArea , 0 ) ;
9173: LD_INT 20
9175: PPUSH
9176: LD_INT 0
9178: PPUSH
9179: CALL_OW 424
// data := [ ] ;
9183: LD_ADDR_VAR 0 4
9187: PUSH
9188: EMPTY
9189: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
9190: LD_ADDR_VAR 0 5
9194: PUSH
9195: LD_INT 60
9197: PUSH
9198: LD_INT 50
9200: PUSH
9201: LD_INT 40
9203: PUSH
9204: LD_INT 30
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: PUSH
9213: LD_OWVAR 67
9217: ARRAY
9218: ST_TO_ADDR
// for i in tmp do
9219: LD_ADDR_VAR 0 2
9223: PUSH
9224: LD_VAR 0 3
9228: PUSH
9229: FOR_IN
9230: IFFALSE 9327
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , GetFuel ( i ) , ] ) ;
9232: LD_ADDR_VAR 0 4
9236: PUSH
9237: LD_VAR 0 4
9241: PPUSH
9242: LD_VAR 0 2
9246: PUSH
9247: LD_VAR 0 2
9251: PPUSH
9252: CALL_OW 311
9256: PUSH
9257: LD_VAR 0 2
9261: PPUSH
9262: CALL_OW 256
9266: PUSH
9267: LD_VAR 0 2
9271: PPUSH
9272: CALL_OW 261
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: PPUSH
9283: CALL 66872 0 2
9287: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
9288: LD_VAR 0 2
9292: PPUSH
9293: CALL_OW 311
9297: PPUSH
9298: CALL_OW 64
// RemoveUnit ( i ) ;
9302: LD_VAR 0 2
9306: PPUSH
9307: CALL_OW 64
// chance := chance + 20 ;
9311: LD_ADDR_VAR 0 5
9315: PUSH
9316: LD_VAR 0 5
9320: PUSH
9321: LD_INT 20
9323: PLUS
9324: ST_TO_ADDR
// end ;
9325: GO 9229
9327: POP
9328: POP
// wait ( rand ( 0 0$45 , 2 2$30 ) ) ;
9329: LD_INT 1575
9331: PPUSH
9332: LD_INT 5250
9334: PPUSH
9335: CALL_OW 12
9339: PPUSH
9340: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9344: LD_INT 35
9346: PPUSH
9347: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
9351: LD_INT 22
9353: PUSH
9354: LD_INT 3
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: PUSH
9361: LD_INT 92
9363: PUSH
9364: LD_INT 261
9366: PUSH
9367: LD_INT 71
9369: PUSH
9370: LD_INT 12
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PPUSH
9383: CALL_OW 69
9387: NOT
9388: PUSH
9389: LD_INT 277
9391: PPUSH
9392: LD_INT 80
9394: PPUSH
9395: CALL_OW 428
9399: NOT
9400: AND
9401: IFFALSE 9344
// for i in data do
9403: LD_ADDR_VAR 0 2
9407: PUSH
9408: LD_VAR 0 4
9412: PUSH
9413: FOR_IN
9414: IFFALSE 9815
// begin uc_nation := GetNation ( i [ 1 ] ) ;
9416: LD_ADDR_OWVAR 21
9420: PUSH
9421: LD_VAR 0 2
9425: PUSH
9426: LD_INT 1
9428: ARRAY
9429: PPUSH
9430: CALL_OW 248
9434: ST_TO_ADDR
// uc_side := 2 ;
9435: LD_ADDR_OWVAR 20
9439: PUSH
9440: LD_INT 2
9442: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
9443: LD_VAR 0 2
9447: PUSH
9448: LD_INT 1
9450: ARRAY
9451: PPUSH
9452: CALL_OW 265
9456: PPUSH
9457: LD_VAR 0 2
9461: PUSH
9462: LD_INT 1
9464: ARRAY
9465: PPUSH
9466: CALL_OW 262
9470: PPUSH
9471: LD_VAR 0 2
9475: PUSH
9476: LD_INT 1
9478: ARRAY
9479: PPUSH
9480: CALL_OW 263
9484: PPUSH
9485: LD_VAR 0 2
9489: PUSH
9490: LD_INT 1
9492: ARRAY
9493: PPUSH
9494: CALL_OW 264
9498: PPUSH
9499: LD_INT 66
9501: PPUSH
9502: CALL 34420 0 5
// vehicle := CreateVehicle ;
9506: LD_ADDR_VAR 0 6
9510: PUSH
9511: CALL_OW 45
9515: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
9516: LD_VAR 0 6
9520: PPUSH
9521: LD_INT 277
9523: PPUSH
9524: LD_INT 80
9526: PPUSH
9527: LD_INT 4
9529: PPUSH
9530: LD_INT 0
9532: PPUSH
9533: CALL 69012 0 5
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
9537: LD_VAR 0 2
9541: PUSH
9542: LD_INT 2
9544: ARRAY
9545: PPUSH
9546: LD_VAR 0 6
9550: PPUSH
9551: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
9555: LD_VAR 0 6
9559: PPUSH
9560: LD_VAR 0 2
9564: PUSH
9565: LD_INT 3
9567: ARRAY
9568: PPUSH
9569: CALL_OW 234
// success := Prob ( chance ) ;
9573: LD_ADDR_VAR 0 9
9577: PUSH
9578: LD_VAR 0 5
9582: PPUSH
9583: CALL_OW 13
9587: ST_TO_ADDR
// if success then
9588: LD_VAR 0 9
9592: IFFALSE 9674
// begin if GetEngine ( vehicle ) = engine_combustion then
9594: LD_VAR 0 6
9598: PPUSH
9599: CALL_OW 262
9603: PUSH
9604: LD_INT 1
9606: EQUAL
9607: IFFALSE 9621
// SetFuel ( vehicle , 90 ) ;
9609: LD_VAR 0 6
9613: PPUSH
9614: LD_INT 90
9616: PPUSH
9617: CALL_OW 240
// if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
9621: LD_VAR 0 6
9625: PPUSH
9626: CALL_OW 264
9630: PUSH
9631: LD_INT 32
9633: PUSH
9634: LD_INT 51
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: IN
9641: IFFALSE 9672
// begin collectedOil := collectedOil + 100 ;
9643: LD_ADDR_EXP 33
9647: PUSH
9648: LD_EXP 33
9652: PUSH
9653: LD_INT 100
9655: PLUS
9656: ST_TO_ADDR
// SetCargo ( vehicle , mat_oil , 100 ) ;
9657: LD_VAR 0 6
9661: PPUSH
9662: LD_INT 2
9664: PPUSH
9665: LD_INT 100
9667: PPUSH
9668: CALL_OW 290
// end ; end else
9672: GO 9746
// begin if i [ 3 ] > 333 then
9674: LD_VAR 0 2
9678: PUSH
9679: LD_INT 3
9681: ARRAY
9682: PUSH
9683: LD_INT 333
9685: GREATER
9686: IFFALSE 9700
// SetLives ( vehicle , 333 ) ;
9688: LD_VAR 0 6
9692: PPUSH
9693: LD_INT 333
9695: PPUSH
9696: CALL_OW 234
// if i [ 4 ] > 20 then
9700: LD_VAR 0 2
9704: PUSH
9705: LD_INT 4
9707: ARRAY
9708: PUSH
9709: LD_INT 20
9711: GREATER
9712: IFFALSE 9728
// SetFuel ( vehicle , 20 ) else
9714: LD_VAR 0 6
9718: PPUSH
9719: LD_INT 20
9721: PPUSH
9722: CALL_OW 240
9726: GO 9746
// SetFuel ( vehicle , i [ 4 ] ) ;
9728: LD_VAR 0 6
9732: PPUSH
9733: LD_VAR 0 2
9737: PUSH
9738: LD_INT 4
9740: ARRAY
9741: PPUSH
9742: CALL_OW 240
// end ; ComMoveXY ( vehicle , 250 , 119 ) ;
9746: LD_VAR 0 6
9750: PPUSH
9751: LD_INT 250
9753: PPUSH
9754: LD_INT 119
9756: PPUSH
9757: CALL_OW 111
// AddComMoveXY ( vehicle , 211 , 80 ) ;
9761: LD_VAR 0 6
9765: PPUSH
9766: LD_INT 211
9768: PPUSH
9769: LD_INT 80
9771: PPUSH
9772: CALL_OW 171
// repeat wait ( 0 0$5 ) ;
9776: LD_INT 175
9778: PPUSH
9779: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_placed ] ] ) ;
9783: LD_INT 20
9785: PPUSH
9786: LD_INT 22
9788: PUSH
9789: LD_INT 2
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: LD_INT 52
9798: PUSH
9799: EMPTY
9800: LIST
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PPUSH
9806: CALL_OW 70
9810: NOT
9811: IFFALSE 9776
// end ;
9813: GO 9413
9815: POP
9816: POP
// wait ( 0 0$10 ) ;
9817: LD_INT 350
9819: PPUSH
9820: CALL_OW 67
// GoForOil ;
9824: CALL 8886 0 0
// end ;
9828: LD_VAR 0 1
9832: RET
// every 0 0$2 trigger FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do var i ;
9833: LD_INT 22
9835: PPUSH
9836: LD_INT 21
9838: PUSH
9839: LD_INT 2
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 22
9848: PUSH
9849: LD_INT 5
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 58
9858: PUSH
9859: EMPTY
9860: LIST
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: LIST
9866: PPUSH
9867: CALL_OW 70
9871: IFFALSE 9940
9873: GO 9875
9875: DISABLE
9876: LD_INT 0
9878: PPUSH
// begin enable ;
9879: ENABLE
// for i in FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do
9880: LD_ADDR_VAR 0 1
9884: PUSH
9885: LD_INT 22
9887: PPUSH
9888: LD_INT 21
9890: PUSH
9891: LD_INT 2
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: LD_INT 22
9900: PUSH
9901: LD_INT 5
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PUSH
9908: LD_INT 58
9910: PUSH
9911: EMPTY
9912: LIST
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: LIST
9918: PPUSH
9919: CALL_OW 70
9923: PUSH
9924: FOR_IN
9925: IFFALSE 9938
// KillUnit ( i ) ;
9927: LD_VAR 0 1
9931: PPUSH
9932: CALL_OW 66
9936: GO 9924
9938: POP
9939: POP
// end ; end_of_file
9940: PPOPN 1
9942: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
9943: LD_INT 0
9945: PPUSH
// uc_side := side ;
9946: LD_ADDR_OWVAR 20
9950: PUSH
9951: LD_VAR 0 1
9955: ST_TO_ADDR
// uc_nation := nation ;
9956: LD_ADDR_OWVAR 21
9960: PUSH
9961: LD_VAR 0 2
9965: ST_TO_ADDR
// vc_chassis := chassis ;
9966: LD_ADDR_OWVAR 37
9970: PUSH
9971: LD_VAR 0 3
9975: ST_TO_ADDR
// vc_engine := engine ;
9976: LD_ADDR_OWVAR 39
9980: PUSH
9981: LD_VAR 0 4
9985: ST_TO_ADDR
// vc_control := control ;
9986: LD_ADDR_OWVAR 38
9990: PUSH
9991: LD_VAR 0 5
9995: ST_TO_ADDR
// vc_weapon := weapon ;
9996: LD_ADDR_OWVAR 40
10000: PUSH
10001: LD_VAR 0 6
10005: ST_TO_ADDR
// vc_fuel_battery := fuel ;
10006: LD_ADDR_OWVAR 41
10010: PUSH
10011: LD_VAR 0 7
10015: ST_TO_ADDR
// result := CreateVehicle ;
10016: LD_ADDR_VAR 0 8
10020: PUSH
10021: CALL_OW 45
10025: ST_TO_ADDR
// end ;
10026: LD_VAR 0 8
10030: RET
// export function SayX ( units , ident ) ; var i ; begin
10031: LD_INT 0
10033: PPUSH
10034: PPUSH
// result := false ;
10035: LD_ADDR_VAR 0 3
10039: PUSH
10040: LD_INT 0
10042: ST_TO_ADDR
// if not units then
10043: LD_VAR 0 1
10047: NOT
10048: IFFALSE 10052
// exit ;
10050: GO 10106
// for i in units do
10052: LD_ADDR_VAR 0 4
10056: PUSH
10057: LD_VAR 0 1
10061: PUSH
10062: FOR_IN
10063: IFFALSE 10104
// if IsOk ( i ) then
10065: LD_VAR 0 4
10069: PPUSH
10070: CALL_OW 302
10074: IFFALSE 10102
// begin Say ( i , ident ) ;
10076: LD_VAR 0 4
10080: PPUSH
10081: LD_VAR 0 2
10085: PPUSH
10086: CALL_OW 88
// result := i ;
10090: LD_ADDR_VAR 0 3
10094: PUSH
10095: LD_VAR 0 4
10099: ST_TO_ADDR
// break ;
10100: GO 10104
// end ;
10102: GO 10062
10104: POP
10105: POP
// end ;
10106: LD_VAR 0 3
10110: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
10111: LD_INT 0
10113: PPUSH
10114: PPUSH
// InitUc ;
10115: CALL_OW 18
// InitHc ;
10119: CALL_OW 19
// uc_side := 0 ;
10123: LD_ADDR_OWVAR 20
10127: PUSH
10128: LD_INT 0
10130: ST_TO_ADDR
// uc_nation := 0 ;
10131: LD_ADDR_OWVAR 21
10135: PUSH
10136: LD_INT 0
10138: ST_TO_ADDR
// for i = 1 to amount do
10139: LD_ADDR_VAR 0 4
10143: PUSH
10144: DOUBLE
10145: LD_INT 1
10147: DEC
10148: ST_TO_ADDR
10149: LD_VAR 0 2
10153: PUSH
10154: FOR_TO
10155: IFFALSE 10237
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
10157: LD_ADDR_OWVAR 29
10161: PUSH
10162: LD_INT 9
10164: PPUSH
10165: LD_INT 12
10167: PPUSH
10168: CALL_OW 12
10172: PUSH
10173: LD_INT 9
10175: PPUSH
10176: LD_INT 12
10178: PPUSH
10179: CALL_OW 12
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
10188: LD_ADDR_OWVAR 35
10192: PUSH
10193: LD_INT 1
10195: NEG
10196: PPUSH
10197: LD_INT 1
10199: PPUSH
10200: CALL_OW 12
10204: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
10205: LD_INT 0
10207: PPUSH
10208: LD_INT 12
10210: PPUSH
10211: LD_INT 1
10213: PPUSH
10214: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
10218: CALL_OW 44
10222: PPUSH
10223: LD_VAR 0 1
10227: PPUSH
10228: LD_INT 0
10230: PPUSH
10231: CALL_OW 49
// end ;
10235: GO 10154
10237: POP
10238: POP
// InitHc ;
10239: CALL_OW 19
// end ;
10243: LD_VAR 0 3
10247: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
10248: LD_INT 0
10250: PPUSH
10251: PPUSH
// uc_side := 0 ;
10252: LD_ADDR_OWVAR 20
10256: PUSH
10257: LD_INT 0
10259: ST_TO_ADDR
// uc_nation := 0 ;
10260: LD_ADDR_OWVAR 21
10264: PUSH
10265: LD_INT 0
10267: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
10268: LD_INT 7
10270: PPUSH
10271: LD_INT 6
10273: PUSH
10274: LD_INT 5
10276: PUSH
10277: LD_INT 4
10279: PUSH
10280: LD_INT 3
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: PUSH
10289: LD_OWVAR 67
10293: ARRAY
10294: PPUSH
10295: CALL 10111 0 2
// for i = 1 to 2 do
10299: LD_ADDR_VAR 0 4
10303: PUSH
10304: DOUBLE
10305: LD_INT 1
10307: DEC
10308: ST_TO_ADDR
10309: LD_INT 2
10311: PUSH
10312: FOR_TO
10313: IFFALSE 10350
// begin vc_chassis := class_mastodont ;
10315: LD_ADDR_OWVAR 37
10319: PUSH
10320: LD_INT 31
10322: ST_TO_ADDR
// vc_control := control_rider ;
10323: LD_ADDR_OWVAR 38
10327: PUSH
10328: LD_INT 4
10330: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
10331: CALL_OW 45
10335: PPUSH
10336: LD_VAR 0 1
10340: PPUSH
10341: LD_INT 0
10343: PPUSH
10344: CALL 65790 0 3
// end ;
10348: GO 10312
10350: POP
10351: POP
// InitHc ;
10352: CALL_OW 19
// for i := 1 to 3 do
10356: LD_ADDR_VAR 0 4
10360: PUSH
10361: DOUBLE
10362: LD_INT 1
10364: DEC
10365: ST_TO_ADDR
10366: LD_INT 3
10368: PUSH
10369: FOR_TO
10370: IFFALSE 10407
// begin hc_class := class_horse ;
10372: LD_ADDR_OWVAR 28
10376: PUSH
10377: LD_INT 21
10379: ST_TO_ADDR
// hc_gallery :=  ;
10380: LD_ADDR_OWVAR 33
10384: PUSH
10385: LD_STRING 
10387: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10388: CALL_OW 44
10392: PPUSH
10393: LD_VAR 0 1
10397: PPUSH
10398: LD_INT 0
10400: PPUSH
10401: CALL_OW 49
// end ;
10405: GO 10369
10407: POP
10408: POP
// InitHc ;
10409: CALL_OW 19
// for i = 1 to 3 do
10413: LD_ADDR_VAR 0 4
10417: PUSH
10418: DOUBLE
10419: LD_INT 1
10421: DEC
10422: ST_TO_ADDR
10423: LD_INT 3
10425: PUSH
10426: FOR_TO
10427: IFFALSE 10481
// begin hc_class = class_tiger ;
10429: LD_ADDR_OWVAR 28
10433: PUSH
10434: LD_INT 14
10436: ST_TO_ADDR
// hc_gallery =  ;
10437: LD_ADDR_OWVAR 33
10441: PUSH
10442: LD_STRING 
10444: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
10445: LD_ADDR_OWVAR 35
10449: PUSH
10450: LD_INT 7
10452: NEG
10453: PPUSH
10454: LD_INT 7
10456: PPUSH
10457: CALL_OW 12
10461: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
10462: CALL_OW 44
10466: PPUSH
10467: LD_VAR 0 1
10471: PPUSH
10472: LD_INT 0
10474: PPUSH
10475: CALL 65790 0 3
// end ;
10479: GO 10426
10481: POP
10482: POP
// InitHc ;
10483: CALL_OW 19
// for i := 1 to 4 do
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: DOUBLE
10493: LD_INT 1
10495: DEC
10496: ST_TO_ADDR
10497: LD_INT 4
10499: PUSH
10500: FOR_TO
10501: IFFALSE 10538
// begin hc_class := class_phororhacos ;
10503: LD_ADDR_OWVAR 28
10507: PUSH
10508: LD_INT 18
10510: ST_TO_ADDR
// hc_gallery :=  ;
10511: LD_ADDR_OWVAR 33
10515: PUSH
10516: LD_STRING 
10518: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10519: CALL_OW 44
10523: PPUSH
10524: LD_VAR 0 1
10528: PPUSH
10529: LD_INT 0
10531: PPUSH
10532: CALL_OW 49
// end ;
10536: GO 10500
10538: POP
10539: POP
// InitHc ;
10540: CALL_OW 19
// for i := 1 to 4 do
10544: LD_ADDR_VAR 0 4
10548: PUSH
10549: DOUBLE
10550: LD_INT 1
10552: DEC
10553: ST_TO_ADDR
10554: LD_INT 4
10556: PUSH
10557: FOR_TO
10558: IFFALSE 10595
// begin hc_class := class_baggie ;
10560: LD_ADDR_OWVAR 28
10564: PUSH
10565: LD_INT 13
10567: ST_TO_ADDR
// hc_gallery :=  ;
10568: LD_ADDR_OWVAR 33
10572: PUSH
10573: LD_STRING 
10575: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10576: CALL_OW 44
10580: PPUSH
10581: LD_VAR 0 1
10585: PPUSH
10586: LD_INT 0
10588: PPUSH
10589: CALL_OW 49
// end ;
10593: GO 10557
10595: POP
10596: POP
// InitHc ;
10597: CALL_OW 19
// for i := 1 to 7 do
10601: LD_ADDR_VAR 0 4
10605: PUSH
10606: DOUBLE
10607: LD_INT 1
10609: DEC
10610: ST_TO_ADDR
10611: LD_INT 7
10613: PUSH
10614: FOR_TO
10615: IFFALSE 10652
// begin hc_class := class_frog ;
10617: LD_ADDR_OWVAR 28
10621: PUSH
10622: LD_INT 19
10624: ST_TO_ADDR
// hc_gallery :=  ;
10625: LD_ADDR_OWVAR 33
10629: PUSH
10630: LD_STRING 
10632: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
10633: CALL_OW 44
10637: PPUSH
10638: LD_VAR 0 2
10642: PPUSH
10643: LD_INT 0
10645: PPUSH
10646: CALL_OW 49
// end ;
10650: GO 10614
10652: POP
10653: POP
// end ;
10654: LD_VAR 0 3
10658: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
10659: LD_INT 0
10661: PPUSH
10662: PPUSH
10663: PPUSH
// if not observer or not unit then
10664: LD_VAR 0 1
10668: NOT
10669: PUSH
10670: LD_VAR 0 2
10674: NOT
10675: OR
10676: IFFALSE 10680
// exit ;
10678: GO 10728
// if not See ( GetSide ( observer ) , unit ) then
10680: LD_VAR 0 1
10684: PPUSH
10685: CALL_OW 255
10689: PPUSH
10690: LD_VAR 0 2
10694: PPUSH
10695: CALL_OW 292
10699: NOT
10700: IFFALSE 10704
// exit ;
10702: GO 10728
// result := GetDistUnits ( observer , unit ) < 12 ;
10704: LD_ADDR_VAR 0 3
10708: PUSH
10709: LD_VAR 0 1
10713: PPUSH
10714: LD_VAR 0 2
10718: PPUSH
10719: CALL_OW 296
10723: PUSH
10724: LD_INT 12
10726: LESS
10727: ST_TO_ADDR
// end ;
10728: LD_VAR 0 3
10732: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
10733: LD_INT 0
10735: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
10736: LD_VAR 0 2
10740: PUSH
10741: LD_INT 1
10743: ARRAY
10744: PPUSH
10745: LD_VAR 0 2
10749: PUSH
10750: LD_INT 2
10752: ARRAY
10753: PPUSH
10754: CALL_OW 488
10758: PUSH
10759: LD_VAR 0 2
10763: PUSH
10764: LD_INT 1
10766: ARRAY
10767: PPUSH
10768: LD_VAR 0 2
10772: PUSH
10773: LD_INT 2
10775: ARRAY
10776: PPUSH
10777: CALL_OW 428
10781: PUSH
10782: LD_INT 0
10784: EQUAL
10785: AND
10786: IFFALSE 10820
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
10788: LD_VAR 0 1
10792: PPUSH
10793: LD_VAR 0 2
10797: PUSH
10798: LD_INT 1
10800: ARRAY
10801: PPUSH
10802: LD_VAR 0 2
10806: PUSH
10807: LD_INT 2
10809: ARRAY
10810: PPUSH
10811: LD_VAR 0 3
10815: PPUSH
10816: CALL_OW 48
// end ;
10820: LD_VAR 0 4
10824: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
10825: LD_INT 0
10827: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
10828: LD_VAR 0 1
10832: PPUSH
10833: LD_VAR 0 2
10837: PPUSH
10838: LD_VAR 0 3
10842: PPUSH
10843: LD_VAR 0 4
10847: PPUSH
10848: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
10852: LD_VAR 0 1
10856: PPUSH
10857: LD_VAR 0 2
10861: PPUSH
10862: LD_VAR 0 3
10866: PPUSH
10867: CALL_OW 331
// end ;
10871: LD_VAR 0 5
10875: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
10876: LD_INT 0
10878: PPUSH
// if not units then
10879: LD_VAR 0 1
10883: NOT
10884: IFFALSE 10888
// exit ;
10886: GO 10971
// result := true ;
10888: LD_ADDR_VAR 0 4
10892: PUSH
10893: LD_INT 1
10895: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
10896: LD_VAR 0 1
10900: PPUSH
10901: LD_INT 26
10903: PUSH
10904: LD_INT 1
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PPUSH
10911: CALL_OW 72
10915: PUSH
10916: LD_INT 1
10918: ARRAY
10919: PPUSH
10920: LD_VAR 0 2
10924: PPUSH
10925: CALL_OW 88
10929: NOT
10930: IFFALSE 10971
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
10932: LD_ADDR_VAR 0 4
10936: PUSH
10937: LD_VAR 0 1
10941: PPUSH
10942: LD_INT 26
10944: PUSH
10945: LD_INT 2
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PPUSH
10952: CALL_OW 72
10956: PUSH
10957: LD_INT 1
10959: ARRAY
10960: PPUSH
10961: LD_VAR 0 3
10965: PPUSH
10966: CALL_OW 88
10970: ST_TO_ADDR
// end ;
10971: LD_VAR 0 4
10975: RET
// export function SeeGroup ( side , group ) ; var i ; begin
10976: LD_INT 0
10978: PPUSH
10979: PPUSH
// if not group then
10980: LD_VAR 0 2
10984: NOT
10985: IFFALSE 10989
// exit ;
10987: GO 11034
// for i in group do
10989: LD_ADDR_VAR 0 4
10993: PUSH
10994: LD_VAR 0 2
10998: PUSH
10999: FOR_IN
11000: IFFALSE 11032
// if See ( side , i ) then
11002: LD_VAR 0 1
11006: PPUSH
11007: LD_VAR 0 4
11011: PPUSH
11012: CALL_OW 292
11016: IFFALSE 11030
// begin result := true ;
11018: LD_ADDR_VAR 0 3
11022: PUSH
11023: LD_INT 1
11025: ST_TO_ADDR
// exit ;
11026: POP
11027: POP
11028: GO 11034
// end ;
11030: GO 10999
11032: POP
11033: POP
// end ; end_of_file
11034: LD_VAR 0 3
11038: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
11039: LD_INT 0
11041: PPUSH
11042: PPUSH
11043: PPUSH
11044: PPUSH
11045: PPUSH
11046: PPUSH
11047: PPUSH
// uc_side := 3 ;
11048: LD_ADDR_OWVAR 20
11052: PUSH
11053: LD_INT 3
11055: ST_TO_ADDR
// uc_nation := 3 ;
11056: LD_ADDR_OWVAR 21
11060: PUSH
11061: LD_INT 3
11063: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
11064: LD_ADDR_EXP 53
11068: PUSH
11069: LD_STRING Morozov
11071: PPUSH
11072: CALL_OW 25
11076: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
11077: LD_EXP 53
11081: PPUSH
11082: LD_INT 52
11084: PPUSH
11085: CALL_OW 52
// if not gaidarKilled then
11089: LD_EXP 7
11093: NOT
11094: IFFALSE 11127
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
11096: LD_ADDR_EXP 54
11100: PUSH
11101: LD_STRING Gaydar
11103: PPUSH
11104: LD_INT 0
11106: PPUSH
11107: LD_STRING 
11109: PPUSH
11110: CALL 29437 0 3
11114: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
11115: LD_EXP 54
11119: PPUSH
11120: LD_INT 52
11122: PPUSH
11123: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
11127: LD_INT 52
11129: PPUSH
11130: LD_STRING lenin
11132: PPUSH
11133: CALL_OW 500
// ruOutsiders := [ ] ;
11137: LD_ADDR_EXP 56
11141: PUSH
11142: EMPTY
11143: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
11144: LD_ADDR_EXP 58
11148: PUSH
11149: EMPTY
11150: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
11151: LD_ADDR_EXP 59
11155: PUSH
11156: EMPTY
11157: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
11158: LD_ADDR_EXP 60
11162: PUSH
11163: EMPTY
11164: ST_TO_ADDR
// ruAttackers := [ ] ;
11165: LD_ADDR_EXP 61
11169: PUSH
11170: EMPTY
11171: ST_TO_ADDR
// waveStrength := 0 ;
11172: LD_ADDR_EXP 62
11176: PUSH
11177: LD_INT 0
11179: ST_TO_ADDR
// if not gaidarKilled then
11180: LD_EXP 7
11184: NOT
11185: IFFALSE 11195
// waveStrength := 2 ;
11187: LD_ADDR_EXP 62
11191: PUSH
11192: LD_INT 2
11194: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
11195: LD_ADDR_VAR 0 7
11199: PUSH
11200: LD_INT 22
11202: PUSH
11203: LD_INT 3
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: LD_INT 21
11212: PUSH
11213: LD_INT 3
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PPUSH
11224: CALL_OW 69
11228: ST_TO_ADDR
// for i in tmp do
11229: LD_ADDR_VAR 0 2
11233: PUSH
11234: LD_VAR 0 7
11238: PUSH
11239: FOR_IN
11240: IFFALSE 11277
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
11242: LD_VAR 0 2
11246: PPUSH
11247: LD_INT 5
11249: PUSH
11250: LD_INT 6
11252: PUSH
11253: LD_INT 7
11255: PUSH
11256: LD_INT 8
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: PUSH
11265: LD_OWVAR 67
11269: ARRAY
11270: PPUSH
11271: CALL_OW 241
11275: GO 11239
11277: POP
11278: POP
// for i := 1 to 3 do
11279: LD_ADDR_VAR 0 2
11283: PUSH
11284: DOUBLE
11285: LD_INT 1
11287: DEC
11288: ST_TO_ADDR
11289: LD_INT 3
11291: PUSH
11292: FOR_TO
11293: IFFALSE 11331
// begin PrepareHuman ( false , 1 , 0 ) ;
11295: LD_INT 0
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: LD_INT 0
11303: PPUSH
11304: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
11308: CALL_OW 44
11312: PPUSH
11313: LD_INT 75
11315: PPUSH
11316: LD_INT 49
11318: PPUSH
11319: LD_INT 3
11321: PPUSH
11322: LD_INT 0
11324: PPUSH
11325: CALL_OW 50
// end ;
11329: GO 11292
11331: POP
11332: POP
// for i := 1 to 4 do
11333: LD_ADDR_VAR 0 2
11337: PUSH
11338: DOUBLE
11339: LD_INT 1
11341: DEC
11342: ST_TO_ADDR
11343: LD_INT 4
11345: PUSH
11346: FOR_TO
11347: IFFALSE 11393
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
11349: LD_INT 0
11351: PPUSH
11352: LD_INT 1
11354: PPUSH
11355: LD_INT 2
11357: PPUSH
11358: CALL_OW 12
11362: PPUSH
11363: LD_INT 0
11365: PPUSH
11366: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
11370: CALL_OW 44
11374: PPUSH
11375: LD_INT 330
11377: PPUSH
11378: LD_INT 231
11380: PPUSH
11381: LD_INT 5
11383: PPUSH
11384: LD_INT 0
11386: PPUSH
11387: CALL_OW 50
// end ;
11391: GO 11346
11393: POP
11394: POP
// hc_class := 1 ;
11395: LD_ADDR_OWVAR 28
11399: PUSH
11400: LD_INT 1
11402: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
11403: CALL_OW 44
11407: PPUSH
11408: LD_INT 324
11410: PPUSH
11411: LD_INT 219
11413: PPUSH
11414: CALL_OW 428
11418: PPUSH
11419: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
11423: CALL_OW 44
11427: PPUSH
11428: LD_INT 316
11430: PPUSH
11431: LD_INT 223
11433: PPUSH
11434: CALL_OW 428
11438: PPUSH
11439: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
11443: LD_ADDR_VAR 0 7
11447: PUSH
11448: LD_INT 172
11450: PPUSH
11451: LD_INT 198
11453: PPUSH
11454: CALL_OW 428
11458: PPUSH
11459: CALL_OW 274
11463: PUSH
11464: LD_INT 189
11466: PPUSH
11467: LD_INT 156
11469: PPUSH
11470: CALL_OW 428
11474: PPUSH
11475: CALL_OW 274
11479: PUSH
11480: LD_INT 341
11482: PPUSH
11483: LD_INT 232
11485: PPUSH
11486: CALL_OW 428
11490: PPUSH
11491: CALL_OW 274
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: LIST
11500: ST_TO_ADDR
// for i in tmp do
11501: LD_ADDR_VAR 0 2
11505: PUSH
11506: LD_VAR 0 7
11510: PUSH
11511: FOR_IN
11512: IFFALSE 11546
// begin SetResourceType ( i , mat_cans , 200 ) ;
11514: LD_VAR 0 2
11518: PPUSH
11519: LD_INT 1
11521: PPUSH
11522: LD_INT 200
11524: PPUSH
11525: CALL_OW 277
// SetResourceType ( i , mat_oil , 300 ) ;
11529: LD_VAR 0 2
11533: PPUSH
11534: LD_INT 2
11536: PPUSH
11537: LD_INT 300
11539: PPUSH
11540: CALL_OW 277
// end ;
11544: GO 11511
11546: POP
11547: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
11548: LD_ADDR_VAR 0 7
11552: PUSH
11553: LD_INT 177
11555: PUSH
11556: LD_INT 114
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 138
11565: PUSH
11566: LD_INT 96
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: ST_TO_ADDR
// for i := 1 to tmp do
11577: LD_ADDR_VAR 0 2
11581: PUSH
11582: DOUBLE
11583: LD_INT 1
11585: DEC
11586: ST_TO_ADDR
11587: LD_VAR 0 7
11591: PUSH
11592: FOR_TO
11593: IFFALSE 11676
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
11595: LD_INT 0
11597: PPUSH
11598: LD_INT 9
11600: PPUSH
11601: LD_INT 6
11603: PPUSH
11604: CALL_OW 380
// un := CreateHuman ;
11608: LD_ADDR_VAR 0 5
11612: PUSH
11613: CALL_OW 44
11617: ST_TO_ADDR
// SetDir ( un , 2 ) ;
11618: LD_VAR 0 5
11622: PPUSH
11623: LD_INT 2
11625: PPUSH
11626: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
11630: LD_VAR 0 5
11634: PPUSH
11635: LD_VAR 0 7
11639: PUSH
11640: LD_VAR 0 2
11644: ARRAY
11645: PUSH
11646: LD_INT 1
11648: ARRAY
11649: PPUSH
11650: LD_VAR 0 7
11654: PUSH
11655: LD_VAR 0 2
11659: ARRAY
11660: PUSH
11661: LD_INT 2
11663: ARRAY
11664: PPUSH
11665: CALL_OW 428
11669: PPUSH
11670: CALL_OW 52
// end ;
11674: GO 11592
11676: POP
11677: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
11678: LD_ADDR_VAR 0 7
11682: PUSH
11683: LD_INT 198
11685: PUSH
11686: LD_INT 158
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 203
11695: PUSH
11696: LD_INT 166
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 181
11705: PUSH
11706: LD_INT 209
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 178
11715: PUSH
11716: LD_INT 196
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 181
11725: PUSH
11726: LD_INT 212
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: ST_TO_ADDR
// for i := 1 to tmp do
11740: LD_ADDR_VAR 0 2
11744: PUSH
11745: DOUBLE
11746: LD_INT 1
11748: DEC
11749: ST_TO_ADDR
11750: LD_VAR 0 7
11754: PUSH
11755: FOR_TO
11756: IFFALSE 11877
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
11758: LD_INT 0
11760: PPUSH
11761: LD_INT 1
11763: PPUSH
11764: LD_INT 4
11766: PUSH
11767: LD_INT 5
11769: PUSH
11770: LD_INT 6
11772: PUSH
11773: LD_INT 7
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: PUSH
11782: LD_OWVAR 67
11786: ARRAY
11787: PPUSH
11788: CALL_OW 380
// un := CreateHuman ;
11792: LD_ADDR_VAR 0 5
11796: PUSH
11797: CALL_OW 44
11801: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
11802: LD_ADDR_VAR 0 4
11806: PUSH
11807: LD_VAR 0 7
11811: PUSH
11812: LD_VAR 0 2
11816: ARRAY
11817: PUSH
11818: LD_INT 1
11820: ARRAY
11821: PPUSH
11822: LD_VAR 0 7
11826: PUSH
11827: LD_VAR 0 2
11831: ARRAY
11832: PUSH
11833: LD_INT 2
11835: ARRAY
11836: PPUSH
11837: CALL_OW 428
11841: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
11842: LD_VAR 0 5
11846: PPUSH
11847: LD_VAR 0 4
11851: PPUSH
11852: CALL 62121 0 1
11856: PPUSH
11857: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
11861: LD_VAR 0 5
11865: PPUSH
11866: LD_VAR 0 4
11870: PPUSH
11871: CALL_OW 52
// end ;
11875: GO 11755
11877: POP
11878: POP
// for i := 1 to 3 do
11879: LD_ADDR_VAR 0 2
11883: PUSH
11884: DOUBLE
11885: LD_INT 1
11887: DEC
11888: ST_TO_ADDR
11889: LD_INT 3
11891: PUSH
11892: FOR_TO
11893: IFFALSE 11948
// begin InitHc ;
11895: CALL_OW 19
// uc_nation := 0 ;
11899: LD_ADDR_OWVAR 21
11903: PUSH
11904: LD_INT 0
11906: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
11907: LD_ADDR_OWVAR 28
11911: PUSH
11912: LD_INT 16
11914: ST_TO_ADDR
// un := CreateHuman ;
11915: LD_ADDR_VAR 0 5
11919: PUSH
11920: CALL_OW 44
11924: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
11925: LD_VAR 0 5
11929: PPUSH
11930: LD_INT 194
11932: PPUSH
11933: LD_INT 164
11935: PPUSH
11936: LD_INT 6
11938: PPUSH
11939: LD_INT 0
11941: PPUSH
11942: CALL_OW 50
// end ;
11946: GO 11892
11948: POP
11949: POP
// uc_nation := 3 ;
11950: LD_ADDR_OWVAR 21
11954: PUSH
11955: LD_INT 3
11957: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
11958: LD_INT 24
11960: PPUSH
11961: LD_INT 1
11963: PPUSH
11964: LD_INT 1
11966: PPUSH
11967: LD_INT 44
11969: PPUSH
11970: LD_INT 10
11972: PPUSH
11973: CALL 34420 0 5
// un := CreateVehicle ;
11977: LD_ADDR_VAR 0 5
11981: PUSH
11982: CALL_OW 45
11986: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 166 , 1 , false ) ;
11987: LD_VAR 0 5
11991: PPUSH
11992: LD_INT 199
11994: PPUSH
11995: LD_INT 166
11997: PPUSH
11998: LD_INT 1
12000: PPUSH
12001: LD_INT 0
12003: PPUSH
12004: CALL 69012 0 5
// ComHold ( un ) ;
12008: LD_VAR 0 5
12012: PPUSH
12013: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
12017: LD_INT 0
12019: PPUSH
12020: LD_INT 3
12022: PPUSH
12023: LD_INT 4
12025: PPUSH
12026: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12030: CALL_OW 44
12034: PPUSH
12035: LD_VAR 0 5
12039: PPUSH
12040: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12044: LD_INT 24
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: LD_INT 1
12052: PPUSH
12053: LD_INT 45
12055: PPUSH
12056: LD_INT 10
12058: PPUSH
12059: CALL 34420 0 5
// un := CreateVehicle ;
12063: LD_ADDR_VAR 0 5
12067: PUSH
12068: CALL_OW 45
12072: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
12073: LD_VAR 0 5
12077: PPUSH
12078: LD_INT 129
12080: PPUSH
12081: LD_INT 93
12083: PPUSH
12084: LD_INT 1
12086: PPUSH
12087: LD_INT 0
12089: PPUSH
12090: CALL 69012 0 5
// ComHold ( un ) ;
12094: LD_VAR 0 5
12098: PPUSH
12099: CALL_OW 140
// if Difficulty > 1 then
12103: LD_OWVAR 67
12107: PUSH
12108: LD_INT 1
12110: GREATER
12111: IFFALSE 12199
// begin PrepareHuman ( false , 3 , 4 ) ;
12113: LD_INT 0
12115: PPUSH
12116: LD_INT 3
12118: PPUSH
12119: LD_INT 4
12121: PPUSH
12122: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12126: CALL_OW 44
12130: PPUSH
12131: LD_VAR 0 5
12135: PPUSH
12136: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12140: LD_INT 24
12142: PPUSH
12143: LD_INT 1
12145: PPUSH
12146: LD_INT 1
12148: PPUSH
12149: LD_INT 45
12151: PPUSH
12152: LD_INT 10
12154: PPUSH
12155: CALL 34420 0 5
// un := CreateVehicle ;
12159: LD_ADDR_VAR 0 5
12163: PUSH
12164: CALL_OW 45
12168: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
12169: LD_VAR 0 5
12173: PPUSH
12174: LD_INT 200
12176: PPUSH
12177: LD_INT 173
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: LD_INT 0
12185: PPUSH
12186: CALL 69012 0 5
// ComHold ( un ) ;
12190: LD_VAR 0 5
12194: PPUSH
12195: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
12199: LD_INT 0
12201: PPUSH
12202: LD_INT 3
12204: PPUSH
12205: LD_INT 4
12207: PPUSH
12208: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12212: CALL_OW 44
12216: PPUSH
12217: LD_VAR 0 5
12221: PPUSH
12222: CALL_OW 52
// bc_type := b_armoury ;
12226: LD_ADDR_OWVAR 42
12230: PUSH
12231: LD_INT 4
12233: ST_TO_ADDR
// if Difficulty > 1 then
12234: LD_OWVAR 67
12238: PUSH
12239: LD_INT 1
12241: GREATER
12242: IFFALSE 12252
// bc_type := b_barracks ;
12244: LD_ADDR_OWVAR 42
12248: PUSH
12249: LD_INT 5
12251: ST_TO_ADDR
// bc_level := 6 ;
12252: LD_ADDR_OWVAR 43
12256: PUSH
12257: LD_INT 6
12259: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
12260: LD_INT 120
12262: PPUSH
12263: LD_INT 100
12265: PPUSH
12266: LD_INT 5
12268: PPUSH
12269: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
12273: LD_ADDR_VAR 0 2
12277: PUSH
12278: DOUBLE
12279: LD_INT 1
12281: DEC
12282: ST_TO_ADDR
12283: LD_INT 3
12285: PUSH
12286: LD_INT 3
12288: PUSH
12289: LD_INT 4
12291: PUSH
12292: LD_INT 4
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: PUSH
12301: LD_OWVAR 67
12305: ARRAY
12306: PUSH
12307: FOR_TO
12308: IFFALSE 12366
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
12310: LD_INT 0
12312: PPUSH
12313: LD_INT 1
12315: PUSH
12316: LD_INT 1
12318: PUSH
12319: LD_INT 9
12321: PUSH
12322: LD_INT 9
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: PUSH
12331: LD_OWVAR 67
12335: ARRAY
12336: PPUSH
12337: LD_INT 5
12339: PPUSH
12340: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
12344: CALL_OW 44
12348: PPUSH
12349: LD_INT 120
12351: PPUSH
12352: LD_INT 100
12354: PPUSH
12355: CALL_OW 428
12359: PPUSH
12360: CALL_OW 52
// end ;
12364: GO 12307
12366: POP
12367: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
12368: LD_ADDR_VAR 0 7
12372: PUSH
12373: LD_INT 135
12375: PUSH
12376: LD_INT 100
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 137
12385: PUSH
12386: LD_INT 92
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: ST_TO_ADDR
// for i := 1 to tmp do
12397: LD_ADDR_VAR 0 2
12401: PUSH
12402: DOUBLE
12403: LD_INT 1
12405: DEC
12406: ST_TO_ADDR
12407: LD_VAR 0 7
12411: PUSH
12412: FOR_TO
12413: IFFALSE 12583
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
12415: LD_INT 22
12417: PUSH
12418: LD_INT 22
12420: PUSH
12421: LD_INT 24
12423: PUSH
12424: LD_INT 24
12426: PUSH
12427: LD_INT 24
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: PUSH
12437: LD_OWVAR 67
12441: PUSH
12442: LD_INT 0
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: CALL_OW 12
12452: PLUS
12453: ARRAY
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: LD_INT 1
12460: PPUSH
12461: LD_INT 44
12463: PPUSH
12464: LD_INT 25
12466: PPUSH
12467: CALL 34420 0 5
// veh := CreateVehicle ;
12471: LD_ADDR_VAR 0 6
12475: PUSH
12476: CALL_OW 45
12480: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12481: LD_VAR 0 6
12485: PPUSH
12486: LD_INT 2
12488: PPUSH
12489: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
12493: LD_VAR 0 6
12497: PPUSH
12498: LD_VAR 0 7
12502: PUSH
12503: LD_VAR 0 2
12507: ARRAY
12508: PUSH
12509: LD_INT 1
12511: ARRAY
12512: PPUSH
12513: LD_VAR 0 7
12517: PUSH
12518: LD_VAR 0 2
12522: ARRAY
12523: PUSH
12524: LD_INT 2
12526: ARRAY
12527: PPUSH
12528: LD_INT 0
12530: PPUSH
12531: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
12535: LD_INT 0
12537: PPUSH
12538: LD_INT 3
12540: PPUSH
12541: LD_INT 6
12543: PPUSH
12544: CALL_OW 380
// un := CreateHuman ;
12548: LD_ADDR_VAR 0 5
12552: PUSH
12553: CALL_OW 44
12557: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12558: LD_VAR 0 5
12562: PPUSH
12563: LD_VAR 0 6
12567: PPUSH
12568: CALL_OW 52
// ComHold ( veh ) ;
12572: LD_VAR 0 6
12576: PPUSH
12577: CALL_OW 140
// end ;
12581: GO 12412
12583: POP
12584: POP
// tmp := [ 191 , 122 ] ;
12585: LD_ADDR_VAR 0 7
12589: PUSH
12590: LD_INT 191
12592: PUSH
12593: LD_INT 122
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
12600: LD_INT 24
12602: PPUSH
12603: LD_INT 1
12605: PPUSH
12606: LD_INT 1
12608: PPUSH
12609: LD_INT 44
12611: PPUSH
12612: LD_INT 30
12614: PPUSH
12615: CALL 34420 0 5
// ruBlockadeTank := CreateVehicle ;
12619: LD_ADDR_EXP 55
12623: PUSH
12624: CALL_OW 45
12628: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
12629: LD_EXP 55
12633: PPUSH
12634: LD_INT 2
12636: PPUSH
12637: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
12641: LD_EXP 55
12645: PPUSH
12646: LD_INT 191
12648: PPUSH
12649: LD_INT 122
12651: PPUSH
12652: LD_INT 0
12654: PPUSH
12655: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
12659: LD_INT 1
12661: PPUSH
12662: LD_INT 5
12664: PUSH
12665: LD_INT 6
12667: PUSH
12668: LD_INT 7
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: LIST
12675: PUSH
12676: LD_OWVAR 67
12680: PUSH
12681: LD_INT 1
12683: MINUS
12684: ARRAY
12685: PPUSH
12686: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
12690: CALL_OW 44
12694: PPUSH
12695: LD_EXP 55
12699: PPUSH
12700: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
12704: LD_EXP 55
12708: PPUSH
12709: CALL_OW 140
// ruBlockadeSquad := [ ] ;
12713: LD_ADDR_EXP 57
12717: PUSH
12718: EMPTY
12719: ST_TO_ADDR
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
12720: LD_ADDR_VAR 0 2
12724: PUSH
12725: DOUBLE
12726: LD_INT 1
12728: DEC
12729: ST_TO_ADDR
12730: LD_INT 2
12732: PUSH
12733: LD_INT 2
12735: PUSH
12736: LD_INT 3
12738: PUSH
12739: LD_INT 3
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: LD_OWVAR 67
12752: ARRAY
12753: PUSH
12754: FOR_TO
12755: IFFALSE 12871
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
12757: LD_INT 0
12759: PPUSH
12760: LD_INT 1
12762: PPUSH
12763: LD_INT 4
12765: PUSH
12766: LD_INT 5
12768: PUSH
12769: LD_INT 6
12771: PUSH
12772: LD_INT 7
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: PUSH
12781: LD_OWVAR 67
12785: ARRAY
12786: PPUSH
12787: CALL_OW 380
// un := CreateHuman ;
12791: LD_ADDR_VAR 0 5
12795: PUSH
12796: CALL_OW 44
12800: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
12801: LD_VAR 0 5
12805: PPUSH
12806: LD_INT 9
12808: PPUSH
12809: LD_INT 0
12811: PPUSH
12812: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
12816: LD_VAR 0 5
12820: PPUSH
12821: LD_INT 198
12823: PPUSH
12824: LD_INT 129
12826: PPUSH
12827: CALL_OW 118
// AddComCrawl ( un ) ;
12831: LD_VAR 0 5
12835: PPUSH
12836: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12840: LD_ADDR_EXP 57
12844: PUSH
12845: LD_EXP 57
12849: PPUSH
12850: LD_EXP 57
12854: PUSH
12855: LD_INT 1
12857: PLUS
12858: PPUSH
12859: LD_VAR 0 5
12863: PPUSH
12864: CALL_OW 1
12868: ST_TO_ADDR
// end ;
12869: GO 12754
12871: POP
12872: POP
// PrepareHuman ( false , 4 , 5 ) ;
12873: LD_INT 0
12875: PPUSH
12876: LD_INT 4
12878: PPUSH
12879: LD_INT 5
12881: PPUSH
12882: CALL_OW 380
// un := CreateHuman ;
12886: LD_ADDR_VAR 0 5
12890: PUSH
12891: CALL_OW 44
12895: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
12896: LD_VAR 0 5
12900: PPUSH
12901: LD_INT 179
12903: PPUSH
12904: LD_INT 113
12906: PPUSH
12907: LD_INT 0
12909: PPUSH
12910: CALL_OW 48
// ComHold ( un ) ;
12914: LD_VAR 0 5
12918: PPUSH
12919: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12923: LD_ADDR_EXP 57
12927: PUSH
12928: LD_EXP 57
12932: PPUSH
12933: LD_EXP 57
12937: PUSH
12938: LD_INT 1
12940: PLUS
12941: PPUSH
12942: LD_VAR 0 5
12946: PPUSH
12947: CALL_OW 1
12951: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
12952: LD_ADDR_VAR 0 7
12956: PUSH
12957: LD_INT 167
12959: PPUSH
12960: LD_INT 243
12962: PPUSH
12963: CALL_OW 428
12967: PPUSH
12968: CALL_OW 274
12972: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
12973: LD_VAR 0 7
12977: PPUSH
12978: LD_INT 1
12980: PPUSH
12981: LD_INT 1000
12983: PPUSH
12984: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
12988: LD_VAR 0 7
12992: PPUSH
12993: LD_INT 2
12995: PPUSH
12996: LD_INT 400
12998: PPUSH
12999: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
13003: LD_ADDR_VAR 0 7
13007: PUSH
13008: LD_INT 169
13010: PPUSH
13011: LD_INT 229
13013: PPUSH
13014: CALL_OW 428
13018: ST_TO_ADDR
// for i := 1 to 3 do
13019: LD_ADDR_VAR 0 2
13023: PUSH
13024: DOUBLE
13025: LD_INT 1
13027: DEC
13028: ST_TO_ADDR
13029: LD_INT 3
13031: PUSH
13032: FOR_TO
13033: IFFALSE 13124
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13035: LD_INT 0
13037: PPUSH
13038: LD_INT 1
13040: PPUSH
13041: LD_INT 4
13043: PUSH
13044: LD_INT 5
13046: PUSH
13047: LD_INT 5
13049: PUSH
13050: LD_INT 6
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: PUSH
13059: LD_OWVAR 67
13063: ARRAY
13064: PPUSH
13065: CALL_OW 380
// un := CreateHuman ;
13069: LD_ADDR_VAR 0 5
13073: PUSH
13074: CALL_OW 44
13078: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
13079: LD_VAR 0 5
13083: PPUSH
13084: LD_VAR 0 7
13088: PPUSH
13089: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13093: LD_ADDR_EXP 58
13097: PUSH
13098: LD_EXP 58
13102: PPUSH
13103: LD_EXP 58
13107: PUSH
13108: LD_INT 1
13110: PLUS
13111: PPUSH
13112: LD_VAR 0 5
13116: PPUSH
13117: CALL_OW 1
13121: ST_TO_ADDR
// end ;
13122: GO 13032
13124: POP
13125: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
13126: LD_ADDR_VAR 0 7
13130: PUSH
13131: LD_INT 165
13133: PUSH
13134: LD_INT 227
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 173
13143: PUSH
13144: LD_INT 231
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: ST_TO_ADDR
// for i := 1 to tmp do
13155: LD_ADDR_VAR 0 2
13159: PUSH
13160: DOUBLE
13161: LD_INT 1
13163: DEC
13164: ST_TO_ADDR
13165: LD_VAR 0 7
13169: PUSH
13170: FOR_TO
13171: IFFALSE 13292
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13173: LD_INT 0
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: LD_INT 4
13181: PUSH
13182: LD_INT 5
13184: PUSH
13185: LD_INT 5
13187: PUSH
13188: LD_INT 6
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: PUSH
13197: LD_OWVAR 67
13201: ARRAY
13202: PPUSH
13203: CALL_OW 380
// un := CreateHuman ;
13207: LD_ADDR_VAR 0 5
13211: PUSH
13212: CALL_OW 44
13216: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
13217: LD_VAR 0 5
13221: PPUSH
13222: LD_VAR 0 7
13226: PUSH
13227: LD_VAR 0 2
13231: ARRAY
13232: PUSH
13233: LD_INT 1
13235: ARRAY
13236: PPUSH
13237: LD_VAR 0 7
13241: PUSH
13242: LD_VAR 0 2
13246: ARRAY
13247: PUSH
13248: LD_INT 2
13250: ARRAY
13251: PPUSH
13252: CALL_OW 428
13256: PPUSH
13257: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13261: LD_ADDR_EXP 58
13265: PUSH
13266: LD_EXP 58
13270: PPUSH
13271: LD_EXP 58
13275: PUSH
13276: LD_INT 1
13278: PLUS
13279: PPUSH
13280: LD_VAR 0 5
13284: PPUSH
13285: CALL_OW 1
13289: ST_TO_ADDR
// end ;
13290: GO 13170
13292: POP
13293: POP
// for i := 1 to 2 do
13294: LD_ADDR_VAR 0 2
13298: PUSH
13299: DOUBLE
13300: LD_INT 1
13302: DEC
13303: ST_TO_ADDR
13304: LD_INT 2
13306: PUSH
13307: FOR_TO
13308: IFFALSE 13363
// begin InitHc ;
13310: CALL_OW 19
// uc_nation := 0 ;
13314: LD_ADDR_OWVAR 21
13318: PUSH
13319: LD_INT 0
13321: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
13322: LD_ADDR_OWVAR 28
13326: PUSH
13327: LD_INT 16
13329: ST_TO_ADDR
// un := CreateHuman ;
13330: LD_ADDR_VAR 0 5
13334: PUSH
13335: CALL_OW 44
13339: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
13340: LD_VAR 0 5
13344: PPUSH
13345: LD_INT 166
13347: PPUSH
13348: LD_INT 233
13350: PPUSH
13351: LD_INT 2
13353: PPUSH
13354: LD_INT 0
13356: PPUSH
13357: CALL_OW 50
// end ;
13361: GO 13307
13363: POP
13364: POP
// uc_nation := 3 ;
13365: LD_ADDR_OWVAR 21
13369: PUSH
13370: LD_INT 3
13372: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
13373: LD_ADDR_VAR 0 7
13377: PUSH
13378: LD_INT 71
13380: PUSH
13381: LD_INT 52
13383: PUSH
13384: LD_INT 11
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: ST_TO_ADDR
// for i in tmp do
13392: LD_ADDR_VAR 0 2
13396: PUSH
13397: LD_VAR 0 7
13401: PUSH
13402: FOR_IN
13403: IFFALSE 13447
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
13405: LD_VAR 0 2
13409: PPUSH
13410: CALL_OW 274
13414: PPUSH
13415: LD_INT 1
13417: PPUSH
13418: LD_INT 3000
13420: PPUSH
13421: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
13425: LD_VAR 0 2
13429: PPUSH
13430: CALL_OW 274
13434: PPUSH
13435: LD_INT 2
13437: PPUSH
13438: LD_INT 600
13440: PPUSH
13441: CALL_OW 277
// end ;
13445: GO 13402
13447: POP
13448: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
13449: LD_ADDR_VAR 0 7
13453: PUSH
13454: LD_INT 41
13456: PUSH
13457: LD_INT 57
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 38
13466: PUSH
13467: LD_INT 55
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 50
13476: PUSH
13477: LD_INT 73
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 51
13486: PUSH
13487: LD_INT 65
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 82
13496: PUSH
13497: LD_INT 93
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 87
13506: PUSH
13507: LD_INT 100
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 91
13516: PUSH
13517: LD_INT 109
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 84
13526: PUSH
13527: LD_INT 120
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 113
13536: PUSH
13537: LD_INT 153
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 123
13546: PUSH
13547: LD_INT 171
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 125
13556: PUSH
13557: LD_INT 178
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 125
13566: PUSH
13567: LD_INT 188
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 125
13576: PUSH
13577: LD_INT 201
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 33
13586: PUSH
13587: LD_INT 60
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 76
13596: PUSH
13597: LD_INT 95
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 84
13606: PUSH
13607: LD_INT 111
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 112
13616: PUSH
13617: LD_INT 165
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: ST_TO_ADDR
// for i := 1 to tmp do
13643: LD_ADDR_VAR 0 2
13647: PUSH
13648: DOUBLE
13649: LD_INT 1
13651: DEC
13652: ST_TO_ADDR
13653: LD_VAR 0 7
13657: PUSH
13658: FOR_TO
13659: IFFALSE 13906
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
13661: LD_ADDR_VAR 0 4
13665: PUSH
13666: LD_VAR 0 7
13670: PUSH
13671: LD_VAR 0 2
13675: ARRAY
13676: PUSH
13677: LD_INT 1
13679: ARRAY
13680: PPUSH
13681: LD_VAR 0 7
13685: PUSH
13686: LD_VAR 0 2
13690: ARRAY
13691: PUSH
13692: LD_INT 2
13694: ARRAY
13695: PPUSH
13696: CALL_OW 428
13700: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
13701: LD_VAR 0 4
13705: PPUSH
13706: CALL_OW 266
13710: PUSH
13711: LD_INT 4
13713: PUSH
13714: LD_INT 5
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: IN
13721: IFFALSE 13817
// begin for j := 1 to Difficulty do
13723: LD_ADDR_VAR 0 3
13727: PUSH
13728: DOUBLE
13729: LD_INT 1
13731: DEC
13732: ST_TO_ADDR
13733: LD_OWVAR 67
13737: PUSH
13738: FOR_TO
13739: IFFALSE 13813
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13741: LD_INT 0
13743: PPUSH
13744: LD_INT 1
13746: PPUSH
13747: LD_INT 4
13749: PUSH
13750: LD_INT 5
13752: PUSH
13753: LD_INT 5
13755: PUSH
13756: LD_INT 6
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: PUSH
13765: LD_OWVAR 67
13769: ARRAY
13770: PPUSH
13771: CALL_OW 380
// un := CreateHuman ;
13775: LD_ADDR_VAR 0 5
13779: PUSH
13780: CALL_OW 44
13784: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13785: LD_VAR 0 5
13789: PPUSH
13790: LD_VAR 0 4
13794: PPUSH
13795: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
13799: LD_VAR 0 5
13803: PPUSH
13804: LD_INT 9
13806: PPUSH
13807: CALL_OW 336
// end ;
13811: GO 13738
13813: POP
13814: POP
// end else
13815: GO 13875
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13817: LD_INT 0
13819: PPUSH
13820: LD_INT 1
13822: PPUSH
13823: LD_INT 4
13825: PUSH
13826: LD_INT 5
13828: PUSH
13829: LD_INT 5
13831: PUSH
13832: LD_INT 6
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: PUSH
13841: LD_OWVAR 67
13845: ARRAY
13846: PPUSH
13847: CALL_OW 380
// un := CreateHuman ;
13851: LD_ADDR_VAR 0 5
13855: PUSH
13856: CALL_OW 44
13860: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13861: LD_VAR 0 5
13865: PPUSH
13866: LD_VAR 0 4
13870: PPUSH
13871: CALL_OW 52
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13875: LD_ADDR_EXP 59
13879: PUSH
13880: LD_EXP 59
13884: PPUSH
13885: LD_EXP 59
13889: PUSH
13890: LD_INT 1
13892: PLUS
13893: PPUSH
13894: LD_VAR 0 5
13898: PPUSH
13899: CALL_OW 1
13903: ST_TO_ADDR
// end ;
13904: GO 13658
13906: POP
13907: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
13908: LD_ADDR_VAR 0 4
13912: PUSH
13913: LD_INT 10
13915: PPUSH
13916: LD_INT 22
13918: PUSH
13919: LD_INT 3
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: LD_INT 30
13928: PUSH
13929: LD_INT 32
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 58
13938: PUSH
13939: EMPTY
13940: LIST
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: LIST
13946: PPUSH
13947: CALL_OW 70
13951: PUSH
13952: FOR_IN
13953: IFFALSE 14087
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
13955: LD_INT 40
13957: PUSH
13958: LD_INT 50
13960: PUSH
13961: LD_INT 75
13963: PUSH
13964: LD_INT 80
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: PUSH
13973: LD_OWVAR 67
13977: ARRAY
13978: PUSH
13979: LD_EXP 7
13983: PUSH
13984: LD_INT 10
13986: MUL
13987: MINUS
13988: PPUSH
13989: CALL_OW 13
13993: NOT
13994: IFFALSE 13998
// continue ;
13996: GO 13952
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13998: LD_INT 0
14000: PPUSH
14001: LD_INT 1
14003: PPUSH
14004: LD_INT 4
14006: PUSH
14007: LD_INT 5
14009: PUSH
14010: LD_INT 5
14012: PUSH
14013: LD_INT 6
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: PUSH
14022: LD_OWVAR 67
14026: ARRAY
14027: PPUSH
14028: CALL_OW 380
// un := CreateHuman ;
14032: LD_ADDR_VAR 0 5
14036: PUSH
14037: CALL_OW 44
14041: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
14042: LD_VAR 0 5
14046: PPUSH
14047: LD_VAR 0 4
14051: PPUSH
14052: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14056: LD_ADDR_EXP 59
14060: PUSH
14061: LD_EXP 59
14065: PPUSH
14066: LD_EXP 59
14070: PUSH
14071: LD_INT 1
14073: PLUS
14074: PPUSH
14075: LD_VAR 0 5
14079: PPUSH
14080: CALL_OW 1
14084: ST_TO_ADDR
// end ;
14085: GO 13952
14087: POP
14088: POP
// for i := 1 to 5 do
14089: LD_ADDR_VAR 0 2
14093: PUSH
14094: DOUBLE
14095: LD_INT 1
14097: DEC
14098: ST_TO_ADDR
14099: LD_INT 5
14101: PUSH
14102: FOR_TO
14103: IFFALSE 14201
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14105: LD_INT 0
14107: PPUSH
14108: LD_INT 2
14110: PPUSH
14111: LD_INT 4
14113: PUSH
14114: LD_INT 5
14116: PUSH
14117: LD_INT 5
14119: PUSH
14120: LD_INT 6
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: PUSH
14129: LD_OWVAR 67
14133: ARRAY
14134: PPUSH
14135: CALL_OW 380
// un := CreateHuman ;
14139: LD_ADDR_VAR 0 5
14143: PUSH
14144: CALL_OW 44
14148: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
14149: LD_VAR 0 5
14153: PPUSH
14154: LD_INT 66
14156: PPUSH
14157: LD_INT 101
14159: PPUSH
14160: LD_INT 3
14162: PPUSH
14163: LD_INT 0
14165: PPUSH
14166: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14170: LD_ADDR_EXP 59
14174: PUSH
14175: LD_EXP 59
14179: PPUSH
14180: LD_EXP 59
14184: PUSH
14185: LD_INT 1
14187: PLUS
14188: PPUSH
14189: LD_VAR 0 5
14193: PPUSH
14194: CALL_OW 1
14198: ST_TO_ADDR
// end ;
14199: GO 14102
14201: POP
14202: POP
// tmp := [ ruFac1 , ruFac2 ] ;
14203: LD_ADDR_VAR 0 7
14207: PUSH
14208: LD_INT 72
14210: PUSH
14211: LD_INT 12
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: ST_TO_ADDR
// for i := 1 to tmp do
14218: LD_ADDR_VAR 0 2
14222: PUSH
14223: DOUBLE
14224: LD_INT 1
14226: DEC
14227: ST_TO_ADDR
14228: LD_VAR 0 7
14232: PUSH
14233: FOR_TO
14234: IFFALSE 14351
// for j := 1 to 6 do
14236: LD_ADDR_VAR 0 3
14240: PUSH
14241: DOUBLE
14242: LD_INT 1
14244: DEC
14245: ST_TO_ADDR
14246: LD_INT 6
14248: PUSH
14249: FOR_TO
14250: IFFALSE 14347
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14252: LD_INT 0
14254: PPUSH
14255: LD_INT 3
14257: PPUSH
14258: LD_INT 4
14260: PUSH
14261: LD_INT 5
14263: PUSH
14264: LD_INT 5
14266: PUSH
14267: LD_INT 6
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: PUSH
14276: LD_OWVAR 67
14280: ARRAY
14281: PPUSH
14282: CALL_OW 380
// un := CreateHuman ;
14286: LD_ADDR_VAR 0 5
14290: PUSH
14291: CALL_OW 44
14295: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
14296: LD_VAR 0 5
14300: PPUSH
14301: LD_VAR 0 7
14305: PUSH
14306: LD_VAR 0 2
14310: ARRAY
14311: PPUSH
14312: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14316: LD_ADDR_EXP 59
14320: PUSH
14321: LD_EXP 59
14325: PPUSH
14326: LD_EXP 59
14330: PUSH
14331: LD_INT 1
14333: PLUS
14334: PPUSH
14335: LD_VAR 0 5
14339: PPUSH
14340: CALL_OW 1
14344: ST_TO_ADDR
// end ;
14345: GO 14249
14347: POP
14348: POP
14349: GO 14233
14351: POP
14352: POP
// for i := 1 to 3 do
14353: LD_ADDR_VAR 0 2
14357: PUSH
14358: DOUBLE
14359: LD_INT 1
14361: DEC
14362: ST_TO_ADDR
14363: LD_INT 3
14365: PUSH
14366: FOR_TO
14367: IFFALSE 14456
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14369: LD_INT 0
14371: PPUSH
14372: LD_INT 4
14374: PPUSH
14375: LD_INT 4
14377: PUSH
14378: LD_INT 5
14380: PUSH
14381: LD_INT 5
14383: PUSH
14384: LD_INT 6
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: PUSH
14393: LD_OWVAR 67
14397: ARRAY
14398: PPUSH
14399: CALL_OW 380
// un := CreateHuman ;
14403: LD_ADDR_VAR 0 5
14407: PUSH
14408: CALL_OW 44
14412: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
14413: LD_VAR 0 5
14417: PPUSH
14418: LD_INT 17
14420: PPUSH
14421: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14425: LD_ADDR_EXP 59
14429: PUSH
14430: LD_EXP 59
14434: PPUSH
14435: LD_EXP 59
14439: PUSH
14440: LD_INT 1
14442: PLUS
14443: PPUSH
14444: LD_VAR 0 5
14448: PPUSH
14449: CALL_OW 1
14453: ST_TO_ADDR
// end ;
14454: GO 14366
14456: POP
14457: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
14458: LD_ADDR_VAR 0 2
14462: PUSH
14463: DOUBLE
14464: LD_INT 1
14466: DEC
14467: ST_TO_ADDR
14468: LD_INT 2
14470: PUSH
14471: LD_INT 3
14473: PUSH
14474: LD_INT 3
14476: PUSH
14477: LD_INT 3
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: PUSH
14486: LD_OWVAR 67
14490: ARRAY
14491: PUSH
14492: FOR_TO
14493: IFFALSE 14613
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
14495: LD_INT 22
14497: PPUSH
14498: LD_INT 1
14500: PPUSH
14501: LD_INT 1
14503: PPUSH
14504: LD_INT 52
14506: PPUSH
14507: LD_INT 100
14509: PPUSH
14510: CALL 34420 0 5
// veh := CreateVehicle ;
14514: LD_ADDR_VAR 0 6
14518: PUSH
14519: CALL_OW 45
14523: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
14524: LD_INT 0
14526: PPUSH
14527: LD_INT 3
14529: PPUSH
14530: LD_INT 4
14532: PPUSH
14533: CALL_OW 380
// un := CreateHuman ;
14537: LD_ADDR_VAR 0 5
14541: PUSH
14542: CALL_OW 44
14546: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
14547: LD_VAR 0 6
14551: PPUSH
14552: LD_INT 107
14554: PPUSH
14555: LD_INT 182
14557: PPUSH
14558: LD_INT 4
14560: PPUSH
14561: LD_INT 0
14563: PPUSH
14564: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
14568: LD_VAR 0 5
14572: PPUSH
14573: LD_VAR 0 6
14577: PPUSH
14578: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14582: LD_ADDR_EXP 59
14586: PUSH
14587: LD_EXP 59
14591: PPUSH
14592: LD_EXP 59
14596: PUSH
14597: LD_INT 1
14599: PLUS
14600: PPUSH
14601: LD_VAR 0 5
14605: PPUSH
14606: CALL_OW 1
14610: ST_TO_ADDR
// end ;
14611: GO 14492
14613: POP
14614: POP
// InitHc ;
14615: CALL_OW 19
// for i := 1 to [ 3 , 5 , 6 , 8 ] [ Difficulty ] do
14619: LD_ADDR_VAR 0 2
14623: PUSH
14624: DOUBLE
14625: LD_INT 1
14627: DEC
14628: ST_TO_ADDR
14629: LD_INT 3
14631: PUSH
14632: LD_INT 5
14634: PUSH
14635: LD_INT 6
14637: PUSH
14638: LD_INT 8
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: PUSH
14647: LD_OWVAR 67
14651: ARRAY
14652: PUSH
14653: FOR_TO
14654: IFFALSE 14749
// begin uc_nation := 0 ;
14656: LD_ADDR_OWVAR 21
14660: PUSH
14661: LD_INT 0
14663: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
14664: LD_ADDR_OWVAR 28
14668: PUSH
14669: LD_INT 15
14671: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
14672: LD_ADDR_OWVAR 31
14676: PUSH
14677: LD_INT 3
14679: PUSH
14680: LD_INT 0
14682: PUSH
14683: LD_INT 0
14685: PUSH
14686: LD_INT 0
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: ST_TO_ADDR
// un := CreateHuman ;
14695: LD_ADDR_VAR 0 5
14699: PUSH
14700: CALL_OW 44
14704: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
14705: LD_VAR 0 5
14709: PPUSH
14710: LD_INT 269
14712: PUSH
14713: LD_INT 300
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: LD_VAR 0 2
14724: PUSH
14725: LD_INT 2
14727: MOD
14728: PUSH
14729: LD_INT 1
14731: PLUS
14732: ARRAY
14733: PPUSH
14734: LD_INT 182
14736: PPUSH
14737: LD_INT 4
14739: PPUSH
14740: LD_INT 0
14742: PPUSH
14743: CALL_OW 50
// end ;
14747: GO 14653
14749: POP
14750: POP
// uc_nation := 3 ;
14751: LD_ADDR_OWVAR 21
14755: PUSH
14756: LD_INT 3
14758: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14759: LD_EXP 8
14763: PUSH
14764: LD_INT 10
14766: PUSH
14767: LD_INT 8
14769: PUSH
14770: LD_INT 6
14772: PUSH
14773: LD_INT 5
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: PUSH
14782: LD_OWVAR 67
14786: ARRAY
14787: LESS
14788: IFFALSE 14867
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
14790: LD_INT 21
14792: PPUSH
14793: LD_INT 1
14795: PPUSH
14796: LD_INT 1
14798: PPUSH
14799: LD_INT 51
14801: PPUSH
14802: LD_INT 12
14804: PPUSH
14805: CALL 34420 0 5
// veh := CreateVehicle ;
14809: LD_ADDR_VAR 0 6
14813: PUSH
14814: CALL_OW 45
14818: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
14819: LD_VAR 0 6
14823: PPUSH
14824: LD_INT 269
14826: PPUSH
14827: LD_INT 66
14829: PPUSH
14830: LD_INT 4
14832: PPUSH
14833: LD_INT 0
14835: PPUSH
14836: CALL 69012 0 5
// SetLives ( veh , 333 ) ;
14840: LD_VAR 0 6
14844: PPUSH
14845: LD_INT 333
14847: PPUSH
14848: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
14852: LD_VAR 0 6
14856: PPUSH
14857: LD_INT 2
14859: PPUSH
14860: LD_INT 100
14862: PPUSH
14863: CALL_OW 290
// end ; end ;
14867: LD_VAR 0 1
14871: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
14872: LD_EXP 55
14876: PUSH
14877: LD_EXP 55
14881: PPUSH
14882: CALL_OW 255
14886: PUSH
14887: LD_INT 3
14889: EQUAL
14890: AND
14891: IFFALSE 15054
14893: GO 14895
14895: DISABLE
14896: LD_INT 0
14898: PPUSH
// begin enable ;
14899: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
14900: LD_INT 81
14902: PUSH
14903: LD_INT 3
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: LD_INT 91
14912: PUSH
14913: LD_EXP 55
14917: PUSH
14918: LD_INT 15
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: LIST
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PPUSH
14930: CALL_OW 69
14934: IFFALSE 15014
// begin if not IsDrivenBy ( ruBlockadeTank ) then
14936: LD_EXP 55
14940: PPUSH
14941: CALL_OW 311
14945: NOT
14946: IFFALSE 15012
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
14948: LD_ADDR_VAR 0 1
14952: PUSH
14953: LD_INT 22
14955: PUSH
14956: LD_INT 3
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: LD_INT 21
14965: PUSH
14966: LD_INT 1
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PPUSH
14977: CALL_OW 69
14981: PPUSH
14982: LD_EXP 55
14986: PPUSH
14987: CALL_OW 74
14991: ST_TO_ADDR
// if driver then
14992: LD_VAR 0 1
14996: IFFALSE 15012
// ComEnterUnit ( driver , ruBlockadeTank ) ;
14998: LD_VAR 0 1
15002: PPUSH
15003: LD_EXP 55
15007: PPUSH
15008: CALL_OW 120
// end ; exit ;
15012: GO 15054
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
15014: LD_EXP 55
15018: PPUSH
15019: CALL_OW 256
15023: PUSH
15024: LD_INT 1000
15026: LESS
15027: PUSH
15028: LD_EXP 55
15032: PPUSH
15033: CALL_OW 311
15037: AND
15038: IFFALSE 15054
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
15040: LD_EXP 55
15044: PPUSH
15045: CALL_OW 311
15049: PPUSH
15050: CALL 68572 0 1
// end ;
15054: PPOPN 1
15056: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
15057: LD_EXP 57
15061: PPUSH
15062: LD_INT 3
15064: PUSH
15065: LD_INT 24
15067: PUSH
15068: LD_INT 1000
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PPUSH
15079: CALL_OW 72
15083: PUSH
15084: LD_EXP 57
15088: PPUSH
15089: LD_INT 25
15091: PUSH
15092: LD_INT 4
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: LD_INT 50
15101: PUSH
15102: EMPTY
15103: LIST
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PPUSH
15109: CALL_OW 72
15113: AND
15114: IFFALSE 15302
15116: GO 15118
15118: DISABLE
15119: LD_INT 0
15121: PPUSH
15122: PPUSH
15123: PPUSH
// begin enable ;
15124: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
15125: LD_ADDR_VAR 0 3
15129: PUSH
15130: LD_EXP 57
15134: PPUSH
15135: LD_INT 3
15137: PUSH
15138: LD_INT 24
15140: PUSH
15141: LD_INT 1000
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PPUSH
15152: CALL_OW 72
15156: PPUSH
15157: LD_INT 1
15159: PPUSH
15160: CALL 68812 0 2
15164: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
15165: LD_ADDR_VAR 0 2
15169: PUSH
15170: LD_EXP 57
15174: PPUSH
15175: LD_INT 25
15177: PUSH
15178: LD_INT 4
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 50
15187: PUSH
15188: EMPTY
15189: LIST
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PPUSH
15195: CALL_OW 72
15199: PUSH
15200: LD_INT 1
15202: ARRAY
15203: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
15204: LD_VAR 0 2
15208: PPUSH
15209: LD_VAR 0 3
15213: PUSH
15214: LD_INT 1
15216: ARRAY
15217: PPUSH
15218: CALL 64166 0 2
15222: NOT
15223: IFFALSE 15302
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
15225: LD_VAR 0 3
15229: PUSH
15230: LD_INT 1
15232: ARRAY
15233: PPUSH
15234: LD_INT 9
15236: PPUSH
15237: CALL_OW 308
15241: NOT
15242: IFFALSE 15260
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
15244: LD_VAR 0 3
15248: PUSH
15249: LD_INT 1
15251: ARRAY
15252: PPUSH
15253: LD_INT 9
15255: PPUSH
15256: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
15260: LD_VAR 0 2
15264: PPUSH
15265: LD_VAR 0 3
15269: PUSH
15270: LD_INT 1
15272: ARRAY
15273: PPUSH
15274: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
15278: LD_VAR 0 2
15282: PPUSH
15283: LD_INT 179
15285: PPUSH
15286: LD_INT 113
15288: PPUSH
15289: CALL_OW 171
// AddComHold ( sci ) ;
15293: LD_VAR 0 2
15297: PPUSH
15298: CALL_OW 200
// end ; end ;
15302: PPOPN 3
15304: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
15305: LD_INT 2
15307: PPUSH
15308: LD_INT 52
15310: PPUSH
15311: CALL_OW 292
15315: IFFALSE 15420
15317: GO 15319
15319: DISABLE
15320: LD_INT 0
15322: PPUSH
15323: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
15324: LD_ADDR_VAR 0 2
15328: PUSH
15329: LD_EXP 59
15333: PPUSH
15334: LD_INT 25
15336: PUSH
15337: LD_INT 1
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 50
15346: PUSH
15347: EMPTY
15348: LIST
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PPUSH
15354: CALL_OW 72
15358: ST_TO_ADDR
// if not tmp then
15359: LD_VAR 0 2
15363: NOT
15364: IFFALSE 15368
// exit ;
15366: GO 15420
// for i in tmp do
15368: LD_ADDR_VAR 0 1
15372: PUSH
15373: LD_VAR 0 2
15377: PUSH
15378: FOR_IN
15379: IFFALSE 15418
// begin if IsInUnit ( i ) then
15381: LD_VAR 0 1
15385: PPUSH
15386: CALL_OW 310
15390: IFFALSE 15401
// ComExitBuilding ( i ) ;
15392: LD_VAR 0 1
15396: PPUSH
15397: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
15401: LD_VAR 0 1
15405: PPUSH
15406: LD_INT 84
15408: PPUSH
15409: LD_INT 133
15411: PPUSH
15412: CALL_OW 174
// end ;
15416: GO 15378
15418: POP
15419: POP
// end ;
15420: PPOPN 2
15422: END
// every 0 0$10 trigger leninSpotted do var i , tmp , weapon ;
15423: LD_EXP 14
15427: IFFALSE 15608
15429: GO 15431
15431: DISABLE
15432: LD_INT 0
15434: PPUSH
15435: PPUSH
15436: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
15437: LD_ADDR_VAR 0 2
15441: PUSH
15442: LD_INT 72
15444: PUSH
15445: LD_INT 12
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
15452: LD_ADDR_VAR 0 3
15456: PUSH
15457: LD_INT 44
15459: PUSH
15460: LD_INT 43
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 45
15469: PUSH
15470: LD_INT 44
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 45
15479: PUSH
15480: LD_INT 46
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 45
15489: PUSH
15490: LD_INT 46
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: PUSH
15503: LD_OWVAR 67
15507: ARRAY
15508: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
15509: LD_ADDR_VAR 0 1
15513: PUSH
15514: DOUBLE
15515: LD_INT 1
15517: DEC
15518: ST_TO_ADDR
15519: LD_INT 1
15521: PUSH
15522: LD_INT 2
15524: PUSH
15525: LD_INT 2
15527: PUSH
15528: LD_INT 3
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: PUSH
15537: LD_OWVAR 67
15541: ARRAY
15542: PUSH
15543: FOR_TO
15544: IFFALSE 15606
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
15546: LD_VAR 0 2
15550: PPUSH
15551: LD_INT 22
15553: PUSH
15554: LD_INT 23
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_VAR 0 1
15565: PUSH
15566: LD_INT 2
15568: MOD
15569: PUSH
15570: LD_INT 1
15572: PLUS
15573: ARRAY
15574: PPUSH
15575: LD_INT 1
15577: PPUSH
15578: LD_INT 1
15580: PPUSH
15581: LD_VAR 0 3
15585: PUSH
15586: LD_VAR 0 1
15590: PUSH
15591: LD_INT 2
15593: MOD
15594: PUSH
15595: LD_INT 1
15597: PLUS
15598: ARRAY
15599: PPUSH
15600: CALL_OW 185
15604: GO 15543
15606: POP
15607: POP
// end ;
15608: PPOPN 3
15610: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
15611: LD_EXP 11
15615: IFFALSE 16764
15617: GO 15619
15619: DISABLE
15620: LD_INT 0
15622: PPUSH
15623: PPUSH
15624: PPUSH
15625: PPUSH
15626: PPUSH
15627: PPUSH
// begin enable ;
15628: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
15629: LD_ADDR_VAR 0 6
15633: PUSH
15634: LD_INT 10
15636: PPUSH
15637: LD_INT 81
15639: PUSH
15640: LD_INT 3
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PPUSH
15647: CALL_OW 70
15651: ST_TO_ADDR
// if ruSpecialVehicleGroup then
15652: LD_EXP 60
15656: IFFALSE 15922
// begin for i in ruSpecialVehicleGroup do
15658: LD_ADDR_VAR 0 1
15662: PUSH
15663: LD_EXP 60
15667: PUSH
15668: FOR_IN
15669: IFFALSE 15920
// begin if enemyInBase then
15671: LD_VAR 0 6
15675: IFFALSE 15918
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
15677: LD_VAR 0 1
15681: PPUSH
15682: CALL_OW 256
15686: PUSH
15687: LD_INT 500
15689: GREATER
15690: PUSH
15691: LD_VAR 0 1
15695: PPUSH
15696: CALL_OW 110
15700: PUSH
15701: LD_INT 0
15703: EQUAL
15704: AND
15705: IFFALSE 15731
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
15707: LD_VAR 0 1
15711: PPUSH
15712: LD_VAR 0 6
15716: PPUSH
15717: LD_VAR 0 1
15721: PPUSH
15722: CALL_OW 74
15726: PPUSH
15727: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15731: LD_VAR 0 1
15735: PPUSH
15736: CALL_OW 256
15740: PUSH
15741: LD_INT 500
15743: LESSEQUAL
15744: PUSH
15745: LD_VAR 0 1
15749: PPUSH
15750: CALL_OW 110
15754: PUSH
15755: LD_INT 0
15757: EQUAL
15758: AND
15759: IFFALSE 15788
// begin SetTag ( i , 1 ) ;
15761: LD_VAR 0 1
15765: PPUSH
15766: LD_INT 1
15768: PPUSH
15769: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
15773: LD_VAR 0 1
15777: PPUSH
15778: LD_INT 83
15780: PPUSH
15781: LD_INT 134
15783: PPUSH
15784: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
15788: LD_VAR 0 1
15792: PPUSH
15793: CALL_OW 256
15797: PUSH
15798: LD_INT 1000
15800: LESS
15801: PUSH
15802: LD_VAR 0 1
15806: PPUSH
15807: CALL_OW 110
15811: PUSH
15812: LD_INT 1
15814: EQUAL
15815: AND
15816: PUSH
15817: LD_VAR 0 1
15821: PPUSH
15822: LD_INT 83
15824: PPUSH
15825: LD_INT 134
15827: PPUSH
15828: CALL_OW 297
15832: PUSH
15833: LD_INT 6
15835: LESS
15836: AND
15837: IFFALSE 15865
// begin SetFuel ( i , 100 ) ;
15839: LD_VAR 0 1
15843: PPUSH
15844: LD_INT 100
15846: PPUSH
15847: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
15851: LD_VAR 0 1
15855: PPUSH
15856: CALL_OW 310
15860: PPUSH
15861: CALL 68692 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
15865: LD_VAR 0 1
15869: PPUSH
15870: CALL_OW 256
15874: PUSH
15875: LD_INT 1000
15877: EQUAL
15878: PUSH
15879: LD_VAR 0 1
15883: PPUSH
15884: CALL_OW 110
15888: PUSH
15889: LD_INT 1
15891: EQUAL
15892: AND
15893: PUSH
15894: LD_VAR 0 1
15898: PPUSH
15899: CALL_OW 311
15903: AND
15904: IFFALSE 15918
// SetTag ( i , 0 ) ;
15906: LD_VAR 0 1
15910: PPUSH
15911: LD_INT 0
15913: PPUSH
15914: CALL_OW 109
// end ; end ;
15918: GO 15668
15920: POP
15921: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
15922: LD_ADDR_VAR 0 5
15926: PUSH
15927: LD_EXP 59
15931: PPUSH
15932: LD_INT 25
15934: PUSH
15935: LD_INT 4
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 72
15946: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15947: LD_ADDR_VAR 0 4
15951: PUSH
15952: LD_EXP 59
15956: PPUSH
15957: LD_INT 92
15959: PUSH
15960: LD_INT 92
15962: PUSH
15963: LD_INT 155
15965: PUSH
15966: LD_INT 12
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 3
15977: PUSH
15978: LD_INT 24
15980: PUSH
15981: LD_INT 1000
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PPUSH
15996: CALL_OW 72
16000: ST_TO_ADDR
// if sci then
16001: LD_VAR 0 5
16005: IFFALSE 16138
// begin if hurt then
16007: LD_VAR 0 4
16011: IFFALSE 16084
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16013: LD_VAR 0 5
16017: PPUSH
16018: LD_INT 3
16020: PUSH
16021: LD_INT 54
16023: PUSH
16024: EMPTY
16025: LIST
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PPUSH
16031: CALL_OW 72
16035: IFFALSE 16064
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
16037: LD_VAR 0 5
16041: PPUSH
16042: LD_INT 3
16044: PUSH
16045: LD_INT 54
16047: PUSH
16048: EMPTY
16049: LIST
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PPUSH
16055: CALL_OW 72
16059: PPUSH
16060: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
16064: LD_VAR 0 5
16068: PPUSH
16069: LD_VAR 0 4
16073: PUSH
16074: LD_INT 1
16076: ARRAY
16077: PPUSH
16078: CALL_OW 188
// end else
16082: GO 16138
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16084: LD_VAR 0 5
16088: PPUSH
16089: LD_INT 3
16091: PUSH
16092: LD_INT 54
16094: PUSH
16095: EMPTY
16096: LIST
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PPUSH
16102: CALL_OW 72
16106: IFFALSE 16138
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
16108: LD_VAR 0 5
16112: PPUSH
16113: LD_INT 3
16115: PUSH
16116: LD_INT 54
16118: PUSH
16119: EMPTY
16120: LIST
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PPUSH
16126: CALL_OW 72
16130: PPUSH
16131: LD_INT 17
16133: PPUSH
16134: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16138: LD_ADDR_VAR 0 3
16142: PUSH
16143: LD_INT 10
16145: PPUSH
16146: LD_INT 21
16148: PUSH
16149: LD_INT 3
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 3
16158: PUSH
16159: LD_INT 24
16161: PUSH
16162: LD_INT 1000
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PPUSH
16177: CALL_OW 70
16181: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
16182: LD_ADDR_VAR 0 2
16186: PUSH
16187: LD_EXP 59
16191: PPUSH
16192: LD_INT 25
16194: PUSH
16195: LD_INT 2
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PPUSH
16202: CALL_OW 72
16206: PUSH
16207: LD_INT 22
16209: PUSH
16210: LD_INT 3
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 34
16219: PUSH
16220: LD_INT 52
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PPUSH
16231: CALL_OW 69
16235: UNION
16236: ST_TO_ADDR
// if not tmp then
16237: LD_VAR 0 2
16241: NOT
16242: IFFALSE 16246
// exit ;
16244: GO 16764
// for i in tmp do
16246: LD_ADDR_VAR 0 1
16250: PUSH
16251: LD_VAR 0 2
16255: PUSH
16256: FOR_IN
16257: IFFALSE 16762
// begin if GetClass ( i ) = 2 then
16259: LD_VAR 0 1
16263: PPUSH
16264: CALL_OW 257
16268: PUSH
16269: LD_INT 2
16271: EQUAL
16272: IFFALSE 16495
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16274: LD_VAR 0 1
16278: PPUSH
16279: CALL_OW 256
16283: PUSH
16284: LD_INT 1000
16286: EQUAL
16287: PUSH
16288: LD_VAR 0 1
16292: PPUSH
16293: CALL_OW 110
16297: PUSH
16298: LD_INT 1
16300: EQUAL
16301: AND
16302: IFFALSE 16316
// SetTag ( i , 0 ) ;
16304: LD_VAR 0 1
16308: PPUSH
16309: LD_INT 0
16311: PPUSH
16312: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16316: LD_VAR 0 1
16320: PPUSH
16321: CALL_OW 256
16325: PUSH
16326: LD_INT 500
16328: LESSEQUAL
16329: PUSH
16330: LD_VAR 0 1
16334: PPUSH
16335: CALL_OW 110
16339: PUSH
16340: LD_INT 0
16342: EQUAL
16343: AND
16344: IFFALSE 16373
// begin SetTag ( i , 1 ) ;
16346: LD_VAR 0 1
16350: PPUSH
16351: LD_INT 1
16353: PPUSH
16354: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
16358: LD_VAR 0 1
16362: PPUSH
16363: LD_INT 92
16365: PPUSH
16366: LD_INT 155
16368: PPUSH
16369: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
16373: LD_VAR 0 3
16377: PUSH
16378: LD_VAR 0 1
16382: PPUSH
16383: CALL_OW 256
16387: PUSH
16388: LD_INT 500
16390: GREATER
16391: AND
16392: PUSH
16393: LD_VAR 0 1
16397: PPUSH
16398: CALL_OW 110
16402: PUSH
16403: LD_INT 0
16405: EQUAL
16406: AND
16407: PUSH
16408: LD_VAR 0 1
16412: PPUSH
16413: CALL_OW 314
16417: NOT
16418: AND
16419: IFFALSE 16493
// begin if b then
16421: LD_VAR 0 3
16425: IFFALSE 16457
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16427: LD_VAR 0 1
16431: PPUSH
16432: LD_VAR 0 3
16436: PUSH
16437: LD_INT 1
16439: PPUSH
16440: LD_VAR 0 3
16444: PPUSH
16445: CALL_OW 12
16449: ARRAY
16450: PPUSH
16451: CALL_OW 130
16455: GO 16493
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16457: LD_VAR 0 1
16461: PPUSH
16462: LD_INT 94
16464: PPUSH
16465: LD_INT 165
16467: PPUSH
16468: CALL_OW 297
16472: PUSH
16473: LD_INT 8
16475: GREATER
16476: IFFALSE 16493
// ComMoveXY ( i , 94 , 165 ) ;
16478: LD_VAR 0 1
16482: PPUSH
16483: LD_INT 94
16485: PPUSH
16486: LD_INT 165
16488: PPUSH
16489: CALL_OW 111
// end ; end else
16493: GO 16760
// if GetWeapon ( i ) = ru_crane then
16495: LD_VAR 0 1
16499: PPUSH
16500: CALL_OW 264
16504: PUSH
16505: LD_INT 52
16507: EQUAL
16508: IFFALSE 16760
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16510: LD_VAR 0 1
16514: PPUSH
16515: CALL_OW 256
16519: PUSH
16520: LD_INT 1000
16522: EQUAL
16523: PUSH
16524: LD_VAR 0 1
16528: PPUSH
16529: CALL_OW 110
16533: PUSH
16534: LD_INT 1
16536: EQUAL
16537: AND
16538: IFFALSE 16564
// begin SetTag ( i , 0 ) ;
16540: LD_VAR 0 1
16544: PPUSH
16545: LD_INT 0
16547: PPUSH
16548: CALL_OW 109
// SetFuel ( i , 100 ) ;
16552: LD_VAR 0 1
16556: PPUSH
16557: LD_INT 100
16559: PPUSH
16560: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16564: LD_VAR 0 1
16568: PPUSH
16569: CALL_OW 256
16573: PUSH
16574: LD_INT 500
16576: LESSEQUAL
16577: PUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL_OW 110
16587: PUSH
16588: LD_INT 0
16590: EQUAL
16591: AND
16592: IFFALSE 16635
// begin SetTag ( i , 1 ) ;
16594: LD_VAR 0 1
16598: PPUSH
16599: LD_INT 1
16601: PPUSH
16602: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
16606: LD_VAR 0 1
16610: PPUSH
16611: LD_INT 83
16613: PPUSH
16614: LD_INT 135
16616: PPUSH
16617: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
16621: LD_VAR 0 1
16625: PPUSH
16626: CALL_OW 310
16630: PPUSH
16631: CALL 68692 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
16635: LD_VAR 0 1
16639: PPUSH
16640: CALL_OW 256
16644: PUSH
16645: LD_INT 500
16647: GREATER
16648: PUSH
16649: LD_VAR 0 1
16653: PPUSH
16654: CALL_OW 110
16658: PUSH
16659: LD_INT 0
16661: EQUAL
16662: AND
16663: PUSH
16664: LD_VAR 0 1
16668: PPUSH
16669: CALL_OW 311
16673: AND
16674: PUSH
16675: LD_VAR 0 1
16679: PPUSH
16680: CALL_OW 314
16684: NOT
16685: AND
16686: IFFALSE 16760
// begin if b then
16688: LD_VAR 0 3
16692: IFFALSE 16724
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16694: LD_VAR 0 1
16698: PPUSH
16699: LD_VAR 0 3
16703: PUSH
16704: LD_INT 1
16706: PPUSH
16707: LD_VAR 0 3
16711: PPUSH
16712: CALL_OW 12
16716: ARRAY
16717: PPUSH
16718: CALL_OW 130
16722: GO 16760
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16724: LD_VAR 0 1
16728: PPUSH
16729: LD_INT 94
16731: PPUSH
16732: LD_INT 165
16734: PPUSH
16735: CALL_OW 297
16739: PUSH
16740: LD_INT 8
16742: GREATER
16743: IFFALSE 16760
// ComMoveXY ( i , 94 , 165 ) ;
16745: LD_VAR 0 1
16749: PPUSH
16750: LD_INT 94
16752: PPUSH
16753: LD_INT 165
16755: PPUSH
16756: CALL_OW 111
// end ; end ; end ;
16760: GO 16256
16762: POP
16763: POP
// end ;
16764: PPOPN 6
16766: END
// every 10 10$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp , tmp2 ;
16767: LD_EXP 23
16771: NOT
16772: PUSH
16773: LD_EXP 27
16777: NOT
16778: AND
16779: IFFALSE 17694
16781: GO 16783
16783: DISABLE
16784: LD_INT 0
16786: PPUSH
16787: PPUSH
16788: PPUSH
16789: PPUSH
16790: PPUSH
// begin enable ;
16791: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
16792: LD_INT 35
16794: PUSH
16795: LD_INT 45
16797: PUSH
16798: LD_INT 55
16800: PUSH
16801: LD_INT 60
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: PUSH
16810: LD_OWVAR 67
16814: ARRAY
16815: PPUSH
16816: CALL_OW 13
16820: IFFALSE 16836
// waveStrength := waveStrength + 1 ;
16822: LD_ADDR_EXP 62
16826: PUSH
16827: LD_EXP 62
16831: PUSH
16832: LD_INT 1
16834: PLUS
16835: ST_TO_ADDR
// if waveStrength > [ 2 , 3 , 4 , 4 ] [ Difficulty ] then
16836: LD_EXP 62
16840: PUSH
16841: LD_INT 2
16843: PUSH
16844: LD_INT 3
16846: PUSH
16847: LD_INT 4
16849: PUSH
16850: LD_INT 4
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: PUSH
16859: LD_OWVAR 67
16863: ARRAY
16864: GREATER
16865: IFFALSE 16897
// begin waveStrength := waveStrength + 2 ;
16867: LD_ADDR_EXP 62
16871: PUSH
16872: LD_EXP 62
16876: PUSH
16877: LD_INT 2
16879: PLUS
16880: ST_TO_ADDR
// disableAttackOnHeike := true ;
16881: LD_ADDR_EXP 27
16885: PUSH
16886: LD_INT 1
16888: ST_TO_ADDR
// disable ;
16889: DISABLE
// wait ( 3 3$00 ) ;
16890: LD_INT 6300
16892: PPUSH
16893: CALL_OW 67
// end ; for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
16897: LD_ADDR_VAR 0 1
16901: PUSH
16902: DOUBLE
16903: LD_INT 1
16905: DEC
16906: ST_TO_ADDR
16907: LD_INT 2
16909: PUSH
16910: LD_INT 2
16912: PUSH
16913: LD_INT 3
16915: PUSH
16916: LD_INT 4
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: PUSH
16925: LD_OWVAR 67
16929: ARRAY
16930: PUSH
16931: FOR_TO
16932: IFFALSE 17093
// begin InitHc ;
16934: CALL_OW 19
// InitVc ;
16938: CALL_OW 20
// uc_side := 3 ;
16942: LD_ADDR_OWVAR 20
16946: PUSH
16947: LD_INT 3
16949: ST_TO_ADDR
// uc_nation := 3 ;
16950: LD_ADDR_OWVAR 21
16954: PUSH
16955: LD_INT 3
16957: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
16958: LD_INT 0
16960: PPUSH
16961: LD_INT 1
16963: PPUSH
16964: LD_OWVAR 67
16968: PUSH
16969: LD_INT 2
16971: PLUS
16972: PPUSH
16973: CALL_OW 380
// un := CreateHuman ;
16977: LD_ADDR_VAR 0 2
16981: PUSH
16982: CALL_OW 44
16986: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
16987: LD_VAR 0 2
16991: PPUSH
16992: LD_INT 160
16994: PPUSH
16995: LD_INT 3
16997: PPUSH
16998: LD_INT 2
17000: PPUSH
17001: LD_INT 0
17003: PPUSH
17004: CALL 69012 0 5
// SetClass ( un , class_bazooker ) ;
17008: LD_VAR 0 2
17012: PPUSH
17013: LD_INT 9
17015: PPUSH
17016: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17020: LD_ADDR_EXP 61
17024: PUSH
17025: LD_EXP 61
17029: PPUSH
17030: LD_EXP 61
17034: PUSH
17035: LD_INT 1
17037: PLUS
17038: PPUSH
17039: LD_VAR 0 2
17043: PPUSH
17044: CALL_OW 1
17048: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17049: LD_VAR 0 2
17053: PPUSH
17054: LD_INT 177
17056: PPUSH
17057: LD_INT 17
17059: PPUSH
17060: CALL_OW 111
// wait ( 0 0$2 ) ;
17064: LD_INT 70
17066: PPUSH
17067: CALL_OW 67
// tmp2 := Join ( tmp2 , un ) ;
17071: LD_ADDR_VAR 0 5
17075: PUSH
17076: LD_VAR 0 5
17080: PPUSH
17081: LD_VAR 0 2
17085: PPUSH
17086: CALL 66872 0 2
17090: ST_TO_ADDR
// end ;
17091: GO 16931
17093: POP
17094: POP
// AddComAgressiveMove ( tmp2 , 196 , 53 ) ;
17095: LD_VAR 0 5
17099: PPUSH
17100: LD_INT 196
17102: PPUSH
17103: LD_INT 53
17105: PPUSH
17106: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 199 , 62 ) ;
17110: LD_VAR 0 5
17114: PPUSH
17115: LD_INT 199
17117: PPUSH
17118: LD_INT 62
17120: PPUSH
17121: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 205 , 75 ) ;
17125: LD_VAR 0 5
17129: PPUSH
17130: LD_INT 205
17132: PPUSH
17133: LD_INT 75
17135: PPUSH
17136: CALL_OW 174
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + waveStrength do
17140: LD_ADDR_VAR 0 1
17144: PUSH
17145: DOUBLE
17146: LD_INT 1
17148: DEC
17149: ST_TO_ADDR
17150: LD_INT 2
17152: PUSH
17153: LD_INT 3
17155: PUSH
17156: LD_INT 3
17158: PUSH
17159: LD_INT 4
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: PUSH
17168: LD_OWVAR 67
17172: ARRAY
17173: PUSH
17174: LD_EXP 62
17178: PLUS
17179: PUSH
17180: FOR_TO
17181: IFFALSE 17490
// begin InitHc ;
17183: CALL_OW 19
// InitVc ;
17187: CALL_OW 20
// uc_side := 3 ;
17191: LD_ADDR_OWVAR 20
17195: PUSH
17196: LD_INT 3
17198: ST_TO_ADDR
// uc_nation := 3 ;
17199: LD_ADDR_OWVAR 21
17203: PUSH
17204: LD_INT 3
17206: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
17207: LD_INT 22
17209: PUSH
17210: LD_INT 23
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 1
17219: PPUSH
17220: LD_INT 2
17222: PPUSH
17223: CALL_OW 12
17227: ARRAY
17228: PPUSH
17229: LD_INT 1
17231: PPUSH
17232: LD_INT 1
17234: PPUSH
17235: LD_INT 44
17237: PUSH
17238: LD_INT 45
17240: PUSH
17241: LD_INT 43
17243: PUSH
17244: LD_INT 42
17246: PUSH
17247: LD_INT 44
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 1
17259: PPUSH
17260: LD_INT 5
17262: PPUSH
17263: CALL_OW 12
17267: ARRAY
17268: PPUSH
17269: LD_INT 99
17271: PPUSH
17272: CALL 34420 0 5
// veh := CreateVehicle ;
17276: LD_ADDR_VAR 0 3
17280: PUSH
17281: CALL_OW 45
17285: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
17286: LD_VAR 0 3
17290: PPUSH
17291: LD_INT 160
17293: PPUSH
17294: LD_INT 3
17296: PPUSH
17297: LD_INT 2
17299: PPUSH
17300: LD_INT 0
17302: PPUSH
17303: CALL 69012 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17307: LD_ADDR_EXP 61
17311: PUSH
17312: LD_EXP 61
17316: PPUSH
17317: LD_EXP 61
17321: PUSH
17322: LD_INT 1
17324: PLUS
17325: PPUSH
17326: LD_VAR 0 3
17330: PPUSH
17331: CALL_OW 1
17335: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
17336: LD_INT 0
17338: PPUSH
17339: LD_INT 3
17341: PPUSH
17342: LD_OWVAR 67
17346: PUSH
17347: LD_INT 2
17349: PLUS
17350: PPUSH
17351: CALL_OW 380
// un := CreateHuman ;
17355: LD_ADDR_VAR 0 2
17359: PUSH
17360: CALL_OW 44
17364: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17365: LD_VAR 0 2
17369: PPUSH
17370: LD_VAR 0 3
17374: PPUSH
17375: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17379: LD_ADDR_EXP 61
17383: PUSH
17384: LD_EXP 61
17388: PPUSH
17389: LD_EXP 61
17393: PUSH
17394: LD_INT 1
17396: PLUS
17397: PPUSH
17398: LD_VAR 0 2
17402: PPUSH
17403: CALL_OW 1
17407: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17408: LD_VAR 0 2
17412: PPUSH
17413: LD_INT 177
17415: PPUSH
17416: LD_INT 17
17418: PPUSH
17419: CALL_OW 111
// wait ( 0 0$2 ) ;
17423: LD_INT 70
17425: PPUSH
17426: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17430: LD_ADDR_VAR 0 4
17434: PUSH
17435: LD_VAR 0 4
17439: PPUSH
17440: LD_VAR 0 4
17444: PUSH
17445: LD_INT 1
17447: PLUS
17448: PPUSH
17449: LD_VAR 0 3
17453: PPUSH
17454: CALL_OW 1
17458: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17459: LD_ADDR_VAR 0 4
17463: PUSH
17464: LD_VAR 0 4
17468: PPUSH
17469: LD_VAR 0 4
17473: PUSH
17474: LD_INT 1
17476: PLUS
17477: PPUSH
17478: LD_VAR 0 2
17482: PPUSH
17483: CALL_OW 1
17487: ST_TO_ADDR
// end ;
17488: GO 17180
17490: POP
17491: POP
// for i in tmp do
17492: LD_ADDR_VAR 0 1
17496: PUSH
17497: LD_VAR 0 4
17501: PUSH
17502: FOR_IN
17503: IFFALSE 17584
// AgressiveMove ( i , [ [ 206 , 37 ] , [ 239 , 53 ] , [ 260 , 67 ] , [ 263 , 79 ] , [ 257 , 105 ] , [ 227 , 97 ] ] ) ;
17505: LD_VAR 0 1
17509: PPUSH
17510: LD_INT 206
17512: PUSH
17513: LD_INT 37
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 239
17522: PUSH
17523: LD_INT 53
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 260
17532: PUSH
17533: LD_INT 67
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 263
17542: PUSH
17543: LD_INT 79
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 257
17552: PUSH
17553: LD_INT 105
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 227
17562: PUSH
17563: LD_INT 97
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: PPUSH
17578: CALL 69476 0 2
17582: GO 17502
17584: POP
17585: POP
// repeat wait ( 0 0$2 ) ;
17586: LD_INT 70
17588: PPUSH
17589: CALL_OW 67
// for i in tmp do
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_VAR 0 4
17602: PUSH
17603: FOR_IN
17604: IFFALSE 17671
// if IsDead ( i ) then
17606: LD_VAR 0 1
17610: PPUSH
17611: CALL_OW 301
17615: IFFALSE 17635
// tmp := tmp diff i else
17617: LD_ADDR_VAR 0 4
17621: PUSH
17622: LD_VAR 0 4
17626: PUSH
17627: LD_VAR 0 1
17631: DIFF
17632: ST_TO_ADDR
17633: GO 17669
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
17635: LD_VAR 0 1
17639: PPUSH
17640: LD_INT 81
17642: PUSH
17643: LD_INT 3
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PPUSH
17650: CALL_OW 69
17654: PPUSH
17655: LD_VAR 0 1
17659: PPUSH
17660: CALL_OW 74
17664: PPUSH
17665: CALL_OW 115
17669: GO 17603
17671: POP
17672: POP
// until not tmp ;
17673: LD_VAR 0 4
17677: NOT
17678: IFFALSE 17586
// if firstAttack then
17680: LD_EXP 28
17684: IFFALSE 17694
// firstAttack := false ;
17686: LD_ADDR_EXP 28
17690: PUSH
17691: LD_INT 0
17693: ST_TO_ADDR
// end ;
17694: PPOPN 5
17696: END
// every 12 12$00 + 3 3$00 trigger not omarAttack and not rolfAttack and bergkampfArrived and not disableAttackOnHeike do var i , un , veh , tmp ;
17697: LD_EXP 23
17701: NOT
17702: PUSH
17703: LD_EXP 32
17707: NOT
17708: AND
17709: PUSH
17710: LD_EXP 3
17714: AND
17715: PUSH
17716: LD_EXP 27
17720: NOT
17721: AND
17722: IFFALSE 18639
17724: GO 17726
17726: DISABLE
17727: LD_INT 0
17729: PPUSH
17730: PPUSH
17731: PPUSH
17732: PPUSH
// begin enable ;
17733: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
17734: LD_ADDR_VAR 0 1
17738: PUSH
17739: DOUBLE
17740: LD_INT 1
17742: DEC
17743: ST_TO_ADDR
17744: LD_INT 1
17746: PUSH
17747: LD_INT 2
17749: PUSH
17750: LD_INT 2
17752: PUSH
17753: LD_INT 3
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: PUSH
17762: LD_OWVAR 67
17766: ARRAY
17767: PUSH
17768: FOR_TO
17769: IFFALSE 18070
// begin InitHc ;
17771: CALL_OW 19
// InitVc ;
17775: CALL_OW 20
// uc_side := 3 ;
17779: LD_ADDR_OWVAR 20
17783: PUSH
17784: LD_INT 3
17786: ST_TO_ADDR
// uc_nation := 3 ;
17787: LD_ADDR_OWVAR 21
17791: PUSH
17792: LD_INT 3
17794: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
17795: LD_INT 22
17797: PUSH
17798: LD_INT 23
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 1
17807: PPUSH
17808: LD_INT 2
17810: PPUSH
17811: CALL_OW 12
17815: ARRAY
17816: PPUSH
17817: LD_INT 1
17819: PPUSH
17820: LD_INT 1
17822: PPUSH
17823: LD_INT 44
17825: PUSH
17826: LD_INT 43
17828: PUSH
17829: LD_INT 42
17831: PUSH
17832: LD_INT 44
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 1
17843: PPUSH
17844: LD_INT 4
17846: PPUSH
17847: CALL_OW 12
17851: ARRAY
17852: PPUSH
17853: LD_INT 99
17855: PPUSH
17856: CALL 34420 0 5
// veh := CreateVehicle ;
17860: LD_ADDR_VAR 0 3
17864: PUSH
17865: CALL_OW 45
17869: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
17870: LD_VAR 0 3
17874: PPUSH
17875: LD_INT 5
17877: PPUSH
17878: LD_INT 3
17880: PPUSH
17881: LD_INT 2
17883: PPUSH
17884: LD_INT 0
17886: PPUSH
17887: CALL 69012 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17891: LD_ADDR_EXP 61
17895: PUSH
17896: LD_EXP 61
17900: PPUSH
17901: LD_EXP 61
17905: PUSH
17906: LD_INT 1
17908: PLUS
17909: PPUSH
17910: LD_VAR 0 3
17914: PPUSH
17915: CALL_OW 1
17919: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
17920: LD_INT 0
17922: PPUSH
17923: LD_INT 3
17925: PPUSH
17926: LD_OWVAR 67
17930: PPUSH
17931: CALL_OW 380
// un := CreateHuman ;
17935: LD_ADDR_VAR 0 2
17939: PUSH
17940: CALL_OW 44
17944: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17945: LD_VAR 0 2
17949: PPUSH
17950: LD_VAR 0 3
17954: PPUSH
17955: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17959: LD_ADDR_EXP 61
17963: PUSH
17964: LD_EXP 61
17968: PPUSH
17969: LD_EXP 61
17973: PUSH
17974: LD_INT 1
17976: PLUS
17977: PPUSH
17978: LD_VAR 0 2
17982: PPUSH
17983: CALL_OW 1
17987: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
17988: LD_VAR 0 2
17992: PPUSH
17993: LD_INT 23
17995: PPUSH
17996: LD_INT 7
17998: PPUSH
17999: CALL_OW 111
// wait ( 0 0$2 ) ;
18003: LD_INT 70
18005: PPUSH
18006: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18010: LD_ADDR_VAR 0 4
18014: PUSH
18015: LD_VAR 0 4
18019: PPUSH
18020: LD_VAR 0 4
18024: PUSH
18025: LD_INT 1
18027: PLUS
18028: PPUSH
18029: LD_VAR 0 3
18033: PPUSH
18034: CALL_OW 1
18038: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18039: LD_ADDR_VAR 0 4
18043: PUSH
18044: LD_VAR 0 4
18048: PPUSH
18049: LD_VAR 0 4
18053: PUSH
18054: LD_INT 1
18056: PLUS
18057: PPUSH
18058: LD_VAR 0 2
18062: PPUSH
18063: CALL_OW 1
18067: ST_TO_ADDR
// end ;
18068: GO 17768
18070: POP
18071: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
18072: LD_ADDR_VAR 0 1
18076: PUSH
18077: DOUBLE
18078: LD_INT 1
18080: DEC
18081: ST_TO_ADDR
18082: LD_INT 2
18084: PUSH
18085: LD_INT 3
18087: PUSH
18088: LD_INT 3
18090: PUSH
18091: LD_INT 4
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: PUSH
18100: LD_OWVAR 67
18104: ARRAY
18105: PUSH
18106: FOR_TO
18107: IFFALSE 18416
// begin InitHc ;
18109: CALL_OW 19
// InitVc ;
18113: CALL_OW 20
// uc_side := 3 ;
18117: LD_ADDR_OWVAR 20
18121: PUSH
18122: LD_INT 3
18124: ST_TO_ADDR
// uc_nation := 3 ;
18125: LD_ADDR_OWVAR 21
18129: PUSH
18130: LD_INT 3
18132: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
18133: LD_INT 22
18135: PUSH
18136: LD_INT 23
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 1
18145: PPUSH
18146: LD_INT 2
18148: PPUSH
18149: CALL_OW 12
18153: ARRAY
18154: PPUSH
18155: LD_INT 1
18157: PPUSH
18158: LD_INT 1
18160: PPUSH
18161: LD_INT 44
18163: PUSH
18164: LD_INT 45
18166: PUSH
18167: LD_INT 43
18169: PUSH
18170: LD_INT 42
18172: PUSH
18173: LD_INT 44
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 1
18185: PPUSH
18186: LD_INT 5
18188: PPUSH
18189: CALL_OW 12
18193: ARRAY
18194: PPUSH
18195: LD_INT 99
18197: PPUSH
18198: CALL 34420 0 5
// veh := CreateVehicle ;
18202: LD_ADDR_VAR 0 3
18206: PUSH
18207: CALL_OW 45
18211: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
18212: LD_VAR 0 3
18216: PPUSH
18217: LD_INT 127
18219: PPUSH
18220: LD_INT 243
18222: PPUSH
18223: LD_INT 0
18225: PPUSH
18226: LD_INT 0
18228: PPUSH
18229: CALL 69012 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18233: LD_ADDR_EXP 61
18237: PUSH
18238: LD_EXP 61
18242: PPUSH
18243: LD_EXP 61
18247: PUSH
18248: LD_INT 1
18250: PLUS
18251: PPUSH
18252: LD_VAR 0 3
18256: PPUSH
18257: CALL_OW 1
18261: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
18262: LD_INT 0
18264: PPUSH
18265: LD_INT 3
18267: PPUSH
18268: LD_OWVAR 67
18272: PUSH
18273: LD_INT 2
18275: PLUS
18276: PPUSH
18277: CALL_OW 380
// un := CreateHuman ;
18281: LD_ADDR_VAR 0 2
18285: PUSH
18286: CALL_OW 44
18290: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18291: LD_VAR 0 2
18295: PPUSH
18296: LD_VAR 0 3
18300: PPUSH
18301: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18305: LD_ADDR_EXP 61
18309: PUSH
18310: LD_EXP 61
18314: PPUSH
18315: LD_EXP 61
18319: PUSH
18320: LD_INT 1
18322: PLUS
18323: PPUSH
18324: LD_VAR 0 2
18328: PPUSH
18329: CALL_OW 1
18333: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
18334: LD_VAR 0 2
18338: PPUSH
18339: LD_INT 130
18341: PPUSH
18342: LD_INT 233
18344: PPUSH
18345: CALL_OW 111
// wait ( 0 0$2 ) ;
18349: LD_INT 70
18351: PPUSH
18352: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18356: LD_ADDR_VAR 0 4
18360: PUSH
18361: LD_VAR 0 4
18365: PPUSH
18366: LD_VAR 0 4
18370: PUSH
18371: LD_INT 1
18373: PLUS
18374: PPUSH
18375: LD_VAR 0 3
18379: PPUSH
18380: CALL_OW 1
18384: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18385: LD_ADDR_VAR 0 4
18389: PUSH
18390: LD_VAR 0 4
18394: PPUSH
18395: LD_VAR 0 4
18399: PUSH
18400: LD_INT 1
18402: PLUS
18403: PPUSH
18404: LD_VAR 0 2
18408: PPUSH
18409: CALL_OW 1
18413: ST_TO_ADDR
// end ;
18414: GO 18106
18416: POP
18417: POP
// for i in tmp do
18418: LD_ADDR_VAR 0 1
18422: PUSH
18423: LD_VAR 0 4
18427: PUSH
18428: FOR_IN
18429: IFFALSE 18543
// AgressiveMove ( i , [ [ 130 , 229 ] , [ 137 , 216 ] , [ 142 , 194 ] , [ 140 , 169 ] , [ 146 , 162 ] , [ 174 , 161 ] , [ 158 , 134 ] , [ 136 , 107 ] , [ 115 , 89 ] ] ) ;
18431: LD_VAR 0 1
18435: PPUSH
18436: LD_INT 130
18438: PUSH
18439: LD_INT 229
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 137
18448: PUSH
18449: LD_INT 216
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 142
18458: PUSH
18459: LD_INT 194
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 140
18468: PUSH
18469: LD_INT 169
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 146
18478: PUSH
18479: LD_INT 162
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 174
18488: PUSH
18489: LD_INT 161
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 158
18498: PUSH
18499: LD_INT 134
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 136
18508: PUSH
18509: LD_INT 107
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 115
18518: PUSH
18519: LD_INT 89
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: PPUSH
18537: CALL 69476 0 2
18541: GO 18428
18543: POP
18544: POP
// repeat wait ( 0 0$2 ) ;
18545: LD_INT 70
18547: PPUSH
18548: CALL_OW 67
// for i in tmp do
18552: LD_ADDR_VAR 0 1
18556: PUSH
18557: LD_VAR 0 4
18561: PUSH
18562: FOR_IN
18563: IFFALSE 18630
// if IsDead ( i ) then
18565: LD_VAR 0 1
18569: PPUSH
18570: CALL_OW 301
18574: IFFALSE 18594
// tmp := tmp diff i else
18576: LD_ADDR_VAR 0 4
18580: PUSH
18581: LD_VAR 0 4
18585: PUSH
18586: LD_VAR 0 1
18590: DIFF
18591: ST_TO_ADDR
18592: GO 18628
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18594: LD_VAR 0 1
18598: PPUSH
18599: LD_INT 81
18601: PUSH
18602: LD_INT 3
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PPUSH
18609: CALL_OW 69
18613: PPUSH
18614: LD_VAR 0 1
18618: PPUSH
18619: CALL_OW 74
18623: PPUSH
18624: CALL_OW 115
18628: GO 18562
18630: POP
18631: POP
// until not tmp ;
18632: LD_VAR 0 4
18636: NOT
18637: IFFALSE 18545
// end ;
18639: PPOPN 4
18641: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
18642: LD_EXP 6
18646: IFFALSE 19105
18648: GO 18650
18650: DISABLE
18651: LD_INT 0
18653: PPUSH
18654: PPUSH
18655: PPUSH
18656: PPUSH
// begin wait ( 3 3$00 ) ;
18657: LD_INT 6300
18659: PPUSH
18660: CALL_OW 67
// for i := 1 to 3 do
18664: LD_ADDR_VAR 0 1
18668: PUSH
18669: DOUBLE
18670: LD_INT 1
18672: DEC
18673: ST_TO_ADDR
18674: LD_INT 3
18676: PUSH
18677: FOR_TO
18678: IFFALSE 18977
// begin InitHc ;
18680: CALL_OW 19
// InitVc ;
18684: CALL_OW 20
// uc_side := 3 ;
18688: LD_ADDR_OWVAR 20
18692: PUSH
18693: LD_INT 3
18695: ST_TO_ADDR
// uc_nation := 3 ;
18696: LD_ADDR_OWVAR 21
18700: PUSH
18701: LD_INT 3
18703: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
18704: LD_INT 22
18706: PUSH
18707: LD_INT 23
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 1
18716: PPUSH
18717: LD_INT 2
18719: PPUSH
18720: CALL_OW 12
18724: ARRAY
18725: PPUSH
18726: LD_INT 1
18728: PPUSH
18729: LD_INT 1
18731: PPUSH
18732: LD_INT 44
18734: PUSH
18735: LD_INT 43
18737: PUSH
18738: LD_INT 42
18740: PUSH
18741: LD_INT 44
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 1
18752: PPUSH
18753: LD_INT 4
18755: PPUSH
18756: CALL_OW 12
18760: ARRAY
18761: PPUSH
18762: LD_INT 99
18764: PPUSH
18765: CALL 34420 0 5
// veh := CreateVehicle ;
18769: LD_ADDR_VAR 0 3
18773: PUSH
18774: CALL_OW 45
18778: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
18779: LD_VAR 0 3
18783: PPUSH
18784: LD_INT 293
18786: PPUSH
18787: LD_INT 246
18789: PPUSH
18790: LD_INT 5
18792: PPUSH
18793: LD_INT 0
18795: PPUSH
18796: CALL 69012 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18800: LD_ADDR_EXP 61
18804: PUSH
18805: LD_EXP 61
18809: PPUSH
18810: LD_EXP 61
18814: PUSH
18815: LD_INT 1
18817: PLUS
18818: PPUSH
18819: LD_VAR 0 3
18823: PPUSH
18824: CALL_OW 1
18828: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
18829: LD_INT 0
18831: PPUSH
18832: LD_INT 3
18834: PPUSH
18835: LD_INT 3
18837: PPUSH
18838: CALL_OW 380
// un := CreateHuman ;
18842: LD_ADDR_VAR 0 2
18846: PUSH
18847: CALL_OW 44
18851: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18852: LD_VAR 0 2
18856: PPUSH
18857: LD_VAR 0 3
18861: PPUSH
18862: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18866: LD_ADDR_EXP 61
18870: PUSH
18871: LD_EXP 61
18875: PPUSH
18876: LD_EXP 61
18880: PUSH
18881: LD_INT 1
18883: PLUS
18884: PPUSH
18885: LD_VAR 0 2
18889: PPUSH
18890: CALL_OW 1
18894: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
18895: LD_VAR 0 2
18899: PPUSH
18900: LD_INT 273
18902: PPUSH
18903: LD_INT 227
18905: PPUSH
18906: CALL_OW 111
// wait ( 0 0$2 ) ;
18910: LD_INT 70
18912: PPUSH
18913: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18917: LD_ADDR_VAR 0 4
18921: PUSH
18922: LD_VAR 0 4
18926: PPUSH
18927: LD_VAR 0 4
18931: PUSH
18932: LD_INT 1
18934: PLUS
18935: PPUSH
18936: LD_VAR 0 3
18940: PPUSH
18941: CALL_OW 1
18945: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18946: LD_ADDR_VAR 0 4
18950: PUSH
18951: LD_VAR 0 4
18955: PPUSH
18956: LD_VAR 0 4
18960: PUSH
18961: LD_INT 1
18963: PLUS
18964: PPUSH
18965: LD_VAR 0 2
18969: PPUSH
18970: CALL_OW 1
18974: ST_TO_ADDR
// end ;
18975: GO 18677
18977: POP
18978: POP
// for i in tmp do
18979: LD_ADDR_VAR 0 1
18983: PUSH
18984: LD_VAR 0 4
18988: PUSH
18989: FOR_IN
18990: IFFALSE 19009
// ComAgressiveMove ( i , 330 , 231 ) ;
18992: LD_VAR 0 1
18996: PPUSH
18997: LD_INT 330
18999: PPUSH
19000: LD_INT 231
19002: PPUSH
19003: CALL_OW 114
19007: GO 18989
19009: POP
19010: POP
// repeat wait ( 0 0$2 ) ;
19011: LD_INT 70
19013: PPUSH
19014: CALL_OW 67
// for i in tmp do
19018: LD_ADDR_VAR 0 1
19022: PUSH
19023: LD_VAR 0 4
19027: PUSH
19028: FOR_IN
19029: IFFALSE 19096
// if IsDead ( i ) then
19031: LD_VAR 0 1
19035: PPUSH
19036: CALL_OW 301
19040: IFFALSE 19060
// tmp := tmp diff i else
19042: LD_ADDR_VAR 0 4
19046: PUSH
19047: LD_VAR 0 4
19051: PUSH
19052: LD_VAR 0 1
19056: DIFF
19057: ST_TO_ADDR
19058: GO 19094
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
19060: LD_VAR 0 1
19064: PPUSH
19065: LD_INT 81
19067: PUSH
19068: LD_INT 3
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PPUSH
19075: CALL_OW 69
19079: PPUSH
19080: LD_VAR 0 1
19084: PPUSH
19085: CALL_OW 74
19089: PPUSH
19090: CALL_OW 115
19094: GO 19028
19096: POP
19097: POP
// until not tmp ;
19098: LD_VAR 0 4
19102: NOT
19103: IFFALSE 19011
// end ;
19105: PPOPN 4
19107: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19108: LD_INT 3
19110: PUSH
19111: LD_INT 22
19113: PUSH
19114: LD_INT 2
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 32
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PPUSH
19139: CALL_OW 69
19143: IFFALSE 19227
19145: GO 19147
19147: DISABLE
19148: LD_INT 0
19150: PPUSH
// begin enable ;
19151: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19152: LD_ADDR_VAR 0 1
19156: PUSH
19157: LD_INT 3
19159: PUSH
19160: LD_INT 22
19162: PUSH
19163: LD_INT 2
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 32
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PPUSH
19188: CALL_OW 69
19192: PUSH
19193: FOR_IN
19194: IFFALSE 19225
// if GetFuel ( i ) < 3 then
19196: LD_VAR 0 1
19200: PPUSH
19201: CALL_OW 261
19205: PUSH
19206: LD_INT 3
19208: LESS
19209: IFFALSE 19223
// SetFuel ( i , 3 ) ;
19211: LD_VAR 0 1
19215: PPUSH
19216: LD_INT 3
19218: PPUSH
19219: CALL_OW 240
19223: GO 19193
19225: POP
19226: POP
// end ; end_of_file
19227: PPOPN 1
19229: END
// export function Action ; begin
19230: LD_INT 0
19232: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
19233: LD_INT 2
19235: PPUSH
19236: LD_INT 4
19238: PPUSH
19239: CALL_OW 332
// Video ( true ) ;
19243: LD_INT 1
19245: PPUSH
19246: CALL 66844 0 1
// music_nat := 3 ;
19250: LD_ADDR_OWVAR 71
19254: PUSH
19255: LD_INT 3
19257: ST_TO_ADDR
// music_class := music_recon ;
19258: LD_ADDR_OWVAR 72
19262: PUSH
19263: LD_INT 3
19265: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
19266: LD_INT 213
19268: PPUSH
19269: LD_INT 89
19271: PPUSH
19272: CALL_OW 86
// if Kaia and Olaf then
19276: LD_EXP 39
19280: PUSH
19281: LD_EXP 43
19285: AND
19286: IFFALSE 19292
// SceneKaiaWithOlaf ;
19288: CALL 19370 0 0
// if Givi and Kamil then
19292: LD_EXP 35
19296: PUSH
19297: LD_EXP 38
19301: AND
19302: IFFALSE 19308
// SceneWithGiviAndKamil ;
19304: CALL 19941 0 0
// tick := 0 ;
19308: LD_ADDR_OWVAR 1
19312: PUSH
19313: LD_INT 0
19315: ST_TO_ADDR
// wait ( 3 ) ;
19316: LD_INT 3
19318: PPUSH
19319: CALL_OW 67
// Video ( false ) ;
19323: LD_INT 0
19325: PPUSH
19326: CALL 66844 0 1
// ChangeMissionObjectives ( M1 ) ;
19330: LD_STRING M1
19332: PPUSH
19333: CALL_OW 337
// music_nat := music_auto ;
19337: LD_ADDR_OWVAR 71
19341: PUSH
19342: LD_INT 0
19344: ST_TO_ADDR
// music_class := music_auto ;
19345: LD_ADDR_OWVAR 72
19349: PUSH
19350: LD_INT 0
19352: ST_TO_ADDR
// SaveForQuickRestart ;
19353: CALL_OW 22
// gameActive := true ;
19357: LD_ADDR_EXP 31
19361: PUSH
19362: LD_INT 1
19364: ST_TO_ADDR
// end ;
19365: LD_VAR 0 1
19369: RET
// export function SceneKaiaWithOlaf ; begin
19370: LD_INT 0
19372: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
19373: LD_INT 22
19375: PUSH
19376: LD_INT 2
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 30
19385: PUSH
19386: LD_INT 3
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PPUSH
19397: CALL_OW 69
19401: PPUSH
19402: LD_INT 14
19404: PPUSH
19405: LD_INT 1
19407: PPUSH
19408: LD_INT 1
19410: PPUSH
19411: LD_INT 26
19413: PPUSH
19414: CALL_OW 125
// wait ( 0 0$1 ) ;
19418: LD_INT 35
19420: PPUSH
19421: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
19425: LD_EXP 39
19429: PPUSH
19430: LD_STRING DK-Mem-1
19432: PPUSH
19433: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
19437: LD_EXP 39
19441: PPUSH
19442: LD_STRING DK-Mem-2
19444: PPUSH
19445: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
19449: LD_EXP 43
19453: PPUSH
19454: LD_STRING DO-Mem-3
19456: PPUSH
19457: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
19461: LD_EXP 39
19465: PPUSH
19466: LD_STRING DK-Mem-4
19468: PPUSH
19469: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
19473: LD_EXP 43
19477: PPUSH
19478: LD_STRING DO-Mem-5
19480: PPUSH
19481: CALL_OW 88
// wait ( 0 0$2 ) ;
19485: LD_INT 70
19487: PPUSH
19488: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
19492: LD_INT 22
19494: PUSH
19495: LD_INT 2
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 30
19504: PUSH
19505: LD_INT 3
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PPUSH
19516: CALL_OW 69
19520: PPUSH
19521: LD_INT 90
19523: PPUSH
19524: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
19528: LD_EXP 43
19532: PPUSH
19533: LD_STRING DO-Mem-6
19535: PPUSH
19536: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
19540: LD_EXP 39
19544: PPUSH
19545: LD_STRING DK-Mem-7
19547: PPUSH
19548: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
19552: LD_EXP 34
19556: PPUSH
19557: LD_EXP 39
19561: PPUSH
19562: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
19566: LD_EXP 34
19570: PPUSH
19571: LD_STRING DH-Mem-8
19573: PPUSH
19574: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
19578: LD_EXP 39
19582: PUSH
19583: LD_EXP 43
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PPUSH
19592: LD_EXP 34
19596: PPUSH
19597: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
19601: LD_EXP 43
19605: PPUSH
19606: LD_STRING DO-Mem-9
19608: PPUSH
19609: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
19613: LD_EXP 43
19617: PPUSH
19618: LD_STRING DO-Mem-10
19620: PPUSH
19621: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
19625: LD_EXP 43
19629: PPUSH
19630: LD_STRING DO-Mem-11
19632: PPUSH
19633: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
19637: LD_EXP 43
19641: PPUSH
19642: LD_STRING DO-Mem-12
19644: PPUSH
19645: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
19649: LD_EXP 39
19653: PPUSH
19654: LD_STRING DK-Mem-13
19656: PPUSH
19657: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
19661: LD_EXP 39
19665: PPUSH
19666: LD_STRING DK-Mem-14
19668: PPUSH
19669: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
19673: LD_EXP 39
19677: PPUSH
19678: LD_STRING DK-Mem-15
19680: PPUSH
19681: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
19685: LD_EXP 39
19689: PPUSH
19690: LD_STRING DK-Mem-16
19692: PPUSH
19693: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
19697: LD_EXP 39
19701: PPUSH
19702: LD_STRING DK-Mem-17
19704: PPUSH
19705: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
19709: LD_EXP 43
19713: PPUSH
19714: LD_EXP 39
19718: PPUSH
19719: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
19723: LD_EXP 43
19727: PPUSH
19728: LD_STRING DO-Mem-18
19730: PPUSH
19731: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
19735: LD_EXP 39
19739: PPUSH
19740: LD_EXP 43
19744: PPUSH
19745: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
19749: LD_EXP 39
19753: PPUSH
19754: LD_STRING DK-Mem-19
19756: PPUSH
19757: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
19761: LD_EXP 43
19765: PPUSH
19766: LD_INT 214
19768: PPUSH
19769: LD_INT 86
19771: PPUSH
19772: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19776: LD_EXP 43
19780: PPUSH
19781: LD_EXP 39
19785: PPUSH
19786: CALL_OW 179
// if Givi then
19790: LD_EXP 35
19794: IFFALSE 19825
// begin ComMoveXY ( Givi , 217 , 86 ) ;
19796: LD_EXP 35
19800: PPUSH
19801: LD_INT 217
19803: PPUSH
19804: LD_INT 86
19806: PPUSH
19807: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
19811: LD_EXP 35
19815: PPUSH
19816: LD_EXP 34
19820: PPUSH
19821: CALL_OW 179
// end ; if Kamil then
19825: LD_EXP 38
19829: IFFALSE 19869
// begin ComExit ( Kamil ) ;
19831: LD_EXP 38
19835: PPUSH
19836: CALL 67270 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
19840: LD_EXP 38
19844: PPUSH
19845: LD_INT 212
19847: PPUSH
19848: LD_INT 86
19850: PPUSH
19851: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
19855: LD_EXP 38
19859: PPUSH
19860: LD_EXP 34
19864: PPUSH
19865: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
19869: LD_INT 70
19871: PPUSH
19872: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
19876: LD_EXP 34
19880: PPUSH
19881: LD_STRING DH-Mem-20
19883: PPUSH
19884: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
19888: LD_EXP 43
19892: PPUSH
19893: LD_INT 215
19895: PPUSH
19896: LD_INT 87
19898: PPUSH
19899: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19903: LD_EXP 43
19907: PPUSH
19908: LD_EXP 39
19912: PPUSH
19913: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
19917: LD_EXP 39
19921: PPUSH
19922: LD_STRING DK-Mem-21
19924: PPUSH
19925: CALL_OW 88
// wait ( 0 0$2 ) ;
19929: LD_INT 70
19931: PPUSH
19932: CALL_OW 67
// end ;
19936: LD_VAR 0 1
19940: RET
// export function SceneWithGiviAndKamil ; var p ; begin
19941: LD_INT 0
19943: PPUSH
19944: PPUSH
// if Markov then
19945: LD_EXP 41
19949: IFFALSE 20067
// begin p := 0 ;
19951: LD_ADDR_VAR 0 2
19955: PUSH
19956: LD_INT 0
19958: ST_TO_ADDR
// if IsInUnit ( Markov ) then
19959: LD_EXP 41
19963: PPUSH
19964: CALL_OW 310
19968: IFFALSE 19979
// ComExit ( Markov ) ;
19970: LD_EXP 41
19974: PPUSH
19975: CALL 67270 0 1
// wait ( 0 0$1 ) ;
19979: LD_INT 35
19981: PPUSH
19982: CALL_OW 67
// ComMoveXY ( Markov , 212 , 88 ) ;
19986: LD_EXP 41
19990: PPUSH
19991: LD_INT 212
19993: PPUSH
19994: LD_INT 88
19996: PPUSH
19997: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20001: LD_INT 35
20003: PPUSH
20004: CALL_OW 67
// p := Inc ( p ) ;
20008: LD_ADDR_VAR 0 2
20012: PUSH
20013: LD_VAR 0 2
20017: PPUSH
20018: CALL 68233 0 1
20022: ST_TO_ADDR
// until GetDistUnits ( Markov , Heike ) < 6 or p > 12 ;
20023: LD_EXP 41
20027: PPUSH
20028: LD_EXP 34
20032: PPUSH
20033: CALL_OW 296
20037: PUSH
20038: LD_INT 6
20040: LESS
20041: PUSH
20042: LD_VAR 0 2
20046: PUSH
20047: LD_INT 12
20049: GREATER
20050: OR
20051: IFFALSE 20001
// AddComTurnUnit ( Markov , Heike ) ;
20053: LD_EXP 41
20057: PPUSH
20058: LD_EXP 34
20062: PPUSH
20063: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
20067: LD_EXP 35
20071: PPUSH
20072: LD_STRING DG-Obj-1
20074: PPUSH
20075: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
20079: LD_EXP 38
20083: PPUSH
20084: LD_STRING DKam-Obj-2
20086: PPUSH
20087: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
20091: LD_EXP 34
20095: PPUSH
20096: LD_EXP 38
20100: PPUSH
20101: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
20105: LD_EXP 38
20109: PPUSH
20110: LD_STRING DKam-Obj-3
20112: PPUSH
20113: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
20117: LD_EXP 41
20121: PPUSH
20122: LD_STRING DMar-Obj-4
20124: PPUSH
20125: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
20129: LD_EXP 38
20133: PPUSH
20134: LD_STRING DKam-Obj-6
20136: PPUSH
20137: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
20141: LD_EXP 38
20145: PPUSH
20146: LD_STRING DKam-Obj-7
20148: PPUSH
20149: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
20153: LD_EXP 38
20157: PPUSH
20158: LD_STRING DKam-Obj-8
20160: PPUSH
20161: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
20165: LD_EXP 34
20169: PPUSH
20170: LD_STRING DH-Obj-9
20172: PPUSH
20173: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
20177: LD_EXP 38
20181: PPUSH
20182: LD_STRING DKam-Obj-10
20184: PPUSH
20185: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
20189: LD_EXP 38
20193: PPUSH
20194: LD_STRING DKam-Obj-11
20196: PPUSH
20197: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
20201: LD_EXP 41
20205: PPUSH
20206: LD_STRING DMar-Obj-12
20208: PPUSH
20209: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
20213: LD_EXP 41
20217: PPUSH
20218: LD_STRING DMar-Obj-13
20220: PPUSH
20221: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
20225: LD_EXP 41
20229: PPUSH
20230: LD_STRING DMar-Obj-14
20232: PPUSH
20233: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
20237: LD_EXP 43
20241: PPUSH
20242: LD_STRING DO-Obj-15
20244: PPUSH
20245: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
20249: LD_EXP 43
20253: PPUSH
20254: LD_STRING DO-Obj-16
20256: PPUSH
20257: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
20261: LD_EXP 34
20265: PPUSH
20266: LD_STRING DH-Obj-17
20268: PPUSH
20269: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
20273: LD_EXP 43
20277: PPUSH
20278: LD_STRING DO-Obj-18
20280: PPUSH
20281: CALL_OW 88
// end ;
20285: LD_VAR 0 1
20289: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
20290: LD_INT 34
20292: PUSH
20293: LD_INT 92
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PPUSH
20300: CALL_OW 69
20304: IFFALSE 20499
20306: GO 20308
20308: DISABLE
20309: LD_INT 0
20311: PPUSH
// begin wait ( 0 0$2 ) ;
20312: LD_INT 70
20314: PPUSH
20315: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
20319: LD_INT 34
20321: PUSH
20322: LD_INT 92
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PPUSH
20329: CALL_OW 69
20333: PPUSH
20334: CALL_OW 87
// DialogueOn ;
20338: CALL_OW 6
// if Markov then
20342: LD_EXP 41
20346: IFFALSE 20374
// begin Say ( Markov , DMar-Grn-1 ) ;
20348: LD_EXP 41
20352: PPUSH
20353: LD_STRING DMar-Grn-1
20355: PPUSH
20356: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
20360: LD_EXP 34
20364: PPUSH
20365: LD_STRING DH-Grn-2
20367: PPUSH
20368: CALL_OW 88
// end else
20372: GO 20473
// if heikeSecondSquad then
20374: LD_EXP 49
20378: IFFALSE 20473
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20380: LD_ADDR_VAR 0 1
20384: PUSH
20385: LD_EXP 49
20389: PUSH
20390: LD_INT 1
20392: PPUSH
20393: LD_EXP 49
20397: PPUSH
20398: CALL_OW 12
20402: ARRAY
20403: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20404: LD_VAR 0 1
20408: PPUSH
20409: CALL_OW 258
20413: PUSH
20414: LD_INT 1
20416: DOUBLE
20417: EQUAL
20418: IFTRUE 20422
20420: GO 20437
20422: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
20423: LD_VAR 0 1
20427: PPUSH
20428: LD_STRING DArm-Grn-1
20430: PPUSH
20431: CALL_OW 88
20435: GO 20461
20437: LD_INT 2
20439: DOUBLE
20440: EQUAL
20441: IFTRUE 20445
20443: GO 20460
20445: POP
// Say ( random , DArf-Grn-1 ) ; end ;
20446: LD_VAR 0 1
20450: PPUSH
20451: LD_STRING DArf-Grn-1
20453: PPUSH
20454: CALL_OW 88
20458: GO 20461
20460: POP
// Say ( Heike , DH-Grn-2 ) ;
20461: LD_EXP 34
20465: PPUSH
20466: LD_STRING DH-Grn-2
20468: PPUSH
20469: CALL_OW 88
// end ; DialogueOff ;
20473: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
20477: LD_STRING MortarConstructed
20479: PPUSH
20480: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
20484: LD_STRING SelfPropelledMortar
20486: PPUSH
20487: CALL_OW 339
// mortarConstructed := true ;
20491: LD_ADDR_EXP 15
20495: PUSH
20496: LD_INT 1
20498: ST_TO_ADDR
// end ;
20499: PPOPN 1
20501: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
20502: LD_INT 2
20504: PPUSH
20505: LD_INT 8
20507: PPUSH
20508: CALL_OW 294
20512: IFFALSE 20655
20514: GO 20516
20516: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
20517: LD_INT 200
20519: PPUSH
20520: LD_INT 162
20522: PPUSH
20523: LD_INT 2
20525: PPUSH
20526: LD_INT 6
20528: NEG
20529: PPUSH
20530: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
20534: LD_INT 200
20536: PPUSH
20537: LD_INT 162
20539: PPUSH
20540: LD_INT 2
20542: PPUSH
20543: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
20547: LD_INT 200
20549: PPUSH
20550: LD_INT 162
20552: PPUSH
20553: CALL_OW 84
// if not IsOk ( Kurt ) then
20557: LD_EXP 45
20561: PPUSH
20562: CALL_OW 302
20566: NOT
20567: IFFALSE 20571
// exit ;
20569: GO 20655
// Say ( Kurt , DKs-Otpst-2-1 ) ;
20571: LD_EXP 45
20575: PPUSH
20576: LD_STRING DKs-Otpst-2-1
20578: PPUSH
20579: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
20583: LD_EXP 39
20587: PPUSH
20588: LD_STRING DK-Otpst-2-2
20590: PPUSH
20591: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
20595: LD_EXP 45
20599: PPUSH
20600: LD_STRING DKs-Otpst-2-3
20602: PPUSH
20603: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
20607: LD_EXP 45
20611: PPUSH
20612: LD_STRING DKs-Otpst-2-4
20614: PPUSH
20615: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
20619: LD_EXP 45
20623: PPUSH
20624: LD_STRING DKs-Otpst-2-5
20626: PPUSH
20627: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
20631: LD_EXP 38
20635: PPUSH
20636: LD_STRING DKam-Otpst-2-6
20638: PPUSH
20639: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
20643: LD_EXP 45
20647: PPUSH
20648: LD_STRING DKs-Otpst-2-7
20650: PPUSH
20651: CALL_OW 88
// end ;
20655: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
20656: LD_INT 8
20658: PPUSH
20659: LD_INT 22
20661: PUSH
20662: LD_INT 3
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 21
20671: PUSH
20672: LD_INT 3
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PPUSH
20683: CALL_OW 70
20687: NOT
20688: PUSH
20689: LD_EXP 3
20693: NOT
20694: AND
20695: IFFALSE 20943
20697: GO 20699
20699: DISABLE
20700: LD_INT 0
20702: PPUSH
// begin outpostDestroyed := true ;
20703: LD_ADDR_EXP 4
20707: PUSH
20708: LD_INT 1
20710: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
20711: LD_INT 22
20713: PUSH
20714: LD_INT 2
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 34
20723: PUSH
20724: LD_INT 92
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 92
20733: PUSH
20734: LD_INT 195
20736: PUSH
20737: LD_INT 164
20739: PUSH
20740: LD_INT 12
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: PPUSH
20754: CALL_OW 69
20758: NOT
20759: IFFALSE 20763
// exit ;
20761: GO 20943
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
20763: LD_EXP 35
20767: PPUSH
20768: CALL_OW 302
20772: NOT
20773: PUSH
20774: LD_EXP 39
20778: PPUSH
20779: CALL_OW 302
20783: NOT
20784: OR
20785: IFFALSE 20789
// exit ;
20787: GO 20943
// Say ( Givi , DG-Otpst-1-1 ) ;
20789: LD_EXP 35
20793: PPUSH
20794: LD_STRING DG-Otpst-1-1
20796: PPUSH
20797: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
20801: LD_EXP 39
20805: PPUSH
20806: LD_STRING DK-Otpst-1-2
20808: PPUSH
20809: CALL_OW 88
// if IsOk ( Markov ) then
20813: LD_EXP 41
20817: PPUSH
20818: CALL_OW 302
20822: IFFALSE 20850
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
20824: LD_EXP 41
20828: PPUSH
20829: LD_STRING DMar-Otpst-1-3
20831: PPUSH
20832: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
20836: LD_EXP 41
20840: PPUSH
20841: LD_STRING DMar-Otpst-1-4
20843: PPUSH
20844: CALL_OW 88
// end else
20848: GO 20931
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20850: LD_ADDR_VAR 0 1
20854: PUSH
20855: LD_EXP 49
20859: PUSH
20860: LD_INT 1
20862: PPUSH
20863: LD_EXP 49
20867: PPUSH
20868: CALL_OW 12
20872: ARRAY
20873: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20874: LD_VAR 0 1
20878: PPUSH
20879: CALL_OW 258
20883: PUSH
20884: LD_INT 1
20886: DOUBLE
20887: EQUAL
20888: IFTRUE 20892
20890: GO 20907
20892: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
20893: LD_VAR 0 1
20897: PPUSH
20898: LD_STRING DArm-Otpst-1-a-3
20900: PPUSH
20901: CALL_OW 88
20905: GO 20931
20907: LD_INT 2
20909: DOUBLE
20910: EQUAL
20911: IFTRUE 20915
20913: GO 20930
20915: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
20916: LD_VAR 0 1
20920: PPUSH
20921: LD_STRING DArf-Otpst-1-a-3
20923: PPUSH
20924: CALL_OW 88
20928: GO 20931
20930: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
20931: LD_EXP 35
20935: PPUSH
20936: LD_STRING DG-Otpst-1-5
20938: PPUSH
20939: CALL_OW 88
// end ;
20943: PPOPN 1
20945: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
20946: LD_EXP 39
20950: PPUSH
20951: CALL_OW 256
20955: PUSH
20956: LD_INT 10
20958: LESS
20959: IFFALSE 21073
20961: GO 20963
20963: DISABLE
// begin DialogueOn ;
20964: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
20968: LD_EXP 39
20972: PPUSH
20973: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
20977: LD_EXP 39
20981: PPUSH
20982: LD_STRING DK-Dead-1
20984: PPUSH
20985: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
20989: LD_EXP 34
20993: PPUSH
20994: LD_STRING DH-Dead-2
20996: PPUSH
20997: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
21001: LD_EXP 39
21005: PPUSH
21006: LD_STRING DK-Dead-3
21008: PPUSH
21009: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
21013: LD_EXP 34
21017: PPUSH
21018: LD_STRING DH-Dead-4
21020: PPUSH
21021: CALL_OW 88
// if IsOk ( Mike ) then
21025: LD_EXP 36
21029: PPUSH
21030: CALL_OW 302
21034: IFFALSE 21060
// begin Say ( Mike , DM-Dead-5 ) ;
21036: LD_EXP 36
21040: PPUSH
21041: LD_STRING DM-Dead-5
21043: PPUSH
21044: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
21048: LD_EXP 34
21052: PPUSH
21053: LD_STRING DH-Dead-6
21055: PPUSH
21056: CALL_OW 88
// end ; DialogueOff ;
21060: CALL_OW 7
// KillUnit ( Kaia ) ;
21064: LD_EXP 39
21068: PPUSH
21069: CALL_OW 66
// end ;
21073: END
// every 0 0$1 trigger tick >= 15 15$00 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
21074: LD_OWVAR 1
21078: PUSH
21079: LD_INT 31500
21081: GREATEREQUAL
21082: PUSH
21083: LD_EXP 5
21087: PUSH
21088: LD_INT 5
21090: GREATER
21091: OR
21092: PUSH
21093: LD_INT 22
21095: PUSH
21096: LD_INT 2
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 92
21105: PUSH
21106: LD_INT 103
21108: PUSH
21109: LD_INT 81
21111: PUSH
21112: LD_INT 20
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PPUSH
21125: CALL_OW 69
21129: OR
21130: IFFALSE 21570
21132: GO 21134
21134: DISABLE
21135: LD_INT 0
21137: PPUSH
21138: PPUSH
21139: PPUSH
// begin PrepareRolfSquad ;
21140: CALL 3531 0 0
// dep := HexInfo ( 86 , 54 ) ;
21144: LD_ADDR_VAR 0 3
21148: PUSH
21149: LD_INT 86
21151: PPUSH
21152: LD_INT 54
21154: PPUSH
21155: CALL_OW 428
21159: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
21160: LD_VAR 0 3
21164: PPUSH
21165: CALL_OW 274
21169: PPUSH
21170: LD_INT 1
21172: PPUSH
21173: LD_INT 300
21175: PPUSH
21176: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
21180: LD_VAR 0 3
21184: PPUSH
21185: CALL_OW 274
21189: PPUSH
21190: LD_INT 2
21192: PPUSH
21193: LD_INT 300
21195: PPUSH
21196: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
21200: LD_EXP 51
21204: PPUSH
21205: LD_INT 79
21207: PPUSH
21208: LD_INT 52
21210: PPUSH
21211: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
21215: LD_INT 35
21217: PPUSH
21218: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( rolfSquad , [ f_not , [ f_hastask ] ] ) , 79 , 52 ) ;
21222: LD_EXP 51
21226: PPUSH
21227: LD_INT 3
21229: PUSH
21230: LD_INT 60
21232: PUSH
21233: EMPTY
21234: LIST
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PPUSH
21240: CALL_OW 72
21244: PPUSH
21245: LD_INT 79
21247: PPUSH
21248: LD_INT 52
21250: PPUSH
21251: CALL_OW 114
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
21255: LD_INT 12
21257: PPUSH
21258: LD_INT 22
21260: PUSH
21261: LD_INT 3
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 21
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PPUSH
21282: CALL_OW 70
21286: NOT
21287: IFFALSE 21215
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
21289: LD_ADDR_VAR 0 2
21293: PUSH
21294: LD_INT 12
21296: PPUSH
21297: LD_INT 21
21299: PUSH
21300: LD_INT 3
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PPUSH
21307: CALL_OW 70
21311: ST_TO_ADDR
// for i in tmp do
21312: LD_ADDR_VAR 0 1
21316: PUSH
21317: LD_VAR 0 2
21321: PUSH
21322: FOR_IN
21323: IFFALSE 21339
// SetSide ( i , 8 ) ;
21325: LD_VAR 0 1
21329: PPUSH
21330: LD_INT 8
21332: PPUSH
21333: CALL_OW 235
21337: GO 21322
21339: POP
21340: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
21341: LD_INT 63
21343: PPUSH
21344: LD_INT 42
21346: PPUSH
21347: CALL_OW 428
21351: PPUSH
21352: LD_INT 320
21354: PPUSH
21355: CALL_OW 234
// wait ( 0 0$10 ) ;
21359: LD_INT 350
21361: PPUSH
21362: CALL_OW 67
// DialogueOn ;
21366: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
21370: LD_INT 8
21372: PPUSH
21373: LD_INT 2
21375: PPUSH
21376: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
21380: LD_INT 86
21382: PPUSH
21383: LD_INT 54
21385: PPUSH
21386: CALL_OW 428
21390: PPUSH
21391: LD_STRING antwerp
21393: PPUSH
21394: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
21398: LD_EXP 47
21402: PPUSH
21403: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
21407: LD_EXP 47
21411: PPUSH
21412: LD_STRING DRf-rast-1
21414: PPUSH
21415: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
21419: LD_EXP 34
21423: PPUSH
21424: LD_STRING DH-rast-2
21426: PPUSH
21427: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
21431: LD_EXP 47
21435: PPUSH
21436: LD_STRING DRf-rast-3
21438: PPUSH
21439: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
21443: LD_EXP 47
21447: PPUSH
21448: LD_STRING DRf-rast-4
21450: PPUSH
21451: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
21455: LD_EXP 47
21459: PPUSH
21460: LD_STRING DRf-rast-5
21462: PPUSH
21463: CALL_OW 94
// if IsOk ( Aviradze ) then
21467: LD_EXP 46
21471: PPUSH
21472: CALL_OW 302
21476: IFFALSE 21535
// begin CenterNowOnUnits ( Aviradze ) ;
21478: LD_EXP 46
21482: PPUSH
21483: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
21487: LD_EXP 46
21491: PPUSH
21492: LD_STRING DA-rast-6
21494: PPUSH
21495: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
21499: LD_EXP 34
21503: PPUSH
21504: LD_STRING DH-rast-7
21506: PPUSH
21507: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
21511: LD_EXP 35
21515: PPUSH
21516: LD_STRING DG-rast-8
21518: PPUSH
21519: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
21523: LD_EXP 35
21527: PPUSH
21528: LD_STRING DG-rast-9
21530: PPUSH
21531: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
21535: LD_EXP 34
21539: PPUSH
21540: LD_STRING DH-rast-10
21542: PPUSH
21543: CALL_OW 88
// DialogueOff ;
21547: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
21551: LD_STRING M2
21553: PPUSH
21554: CALL_OW 337
// bergkampfArrived := true ;
21558: LD_ADDR_EXP 3
21562: PUSH
21563: LD_INT 1
21565: ST_TO_ADDR
// PrepareRolfBase ;
21566: CALL 3862 0 0
// end ;
21570: PPOPN 3
21572: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
21573: LD_INT 12
21575: PPUSH
21576: LD_INT 22
21578: PUSH
21579: LD_INT 2
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PPUSH
21586: CALL_OW 70
21590: PUSH
21591: LD_EXP 47
21595: PPUSH
21596: CALL_OW 302
21600: AND
21601: PUSH
21602: LD_EXP 29
21606: AND
21607: IFFALSE 22167
21609: GO 21611
21611: DISABLE
21612: LD_INT 0
21614: PPUSH
// begin rolfScriptBase := false ;
21615: LD_ADDR_EXP 9
21619: PUSH
21620: LD_INT 0
21622: ST_TO_ADDR
// DialogueOn ;
21623: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
21627: LD_EXP 47
21631: PPUSH
21632: CALL_OW 87
// if rolfSquad >= 10 then
21636: LD_EXP 51
21640: PUSH
21641: LD_INT 10
21643: GREATEREQUAL
21644: IFFALSE 21823
// begin linkedWithRolf := 2 ;
21646: LD_ADDR_EXP 12
21650: PUSH
21651: LD_INT 2
21653: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
21654: LD_EXP 47
21658: PPUSH
21659: LD_STRING DRf-rast-11
21661: PPUSH
21662: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
21666: LD_EXP 34
21670: PPUSH
21671: LD_STRING DH-rast-12
21673: PPUSH
21674: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
21678: LD_EXP 47
21682: PPUSH
21683: LD_STRING DRf-rast-13
21685: PPUSH
21686: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
21690: LD_EXP 34
21694: PPUSH
21695: LD_STRING DH-rast-14
21697: PPUSH
21698: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
21702: LD_EXP 47
21706: PPUSH
21707: LD_STRING DRf-rast-15
21709: PPUSH
21710: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
21714: LD_EXP 34
21718: PPUSH
21719: LD_STRING DH-rast-16
21721: PPUSH
21722: CALL_OW 88
// if IsOk ( Mike ) then
21726: LD_EXP 36
21730: PPUSH
21731: CALL_OW 302
21735: IFFALSE 21809
// begin Say ( Mike , DM-rast-17 ) ;
21737: LD_EXP 36
21741: PPUSH
21742: LD_STRING DM-rast-17
21744: PPUSH
21745: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
21749: LD_EXP 34
21753: PPUSH
21754: LD_STRING DH-rast-18
21756: PPUSH
21757: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
21761: LD_EXP 36
21765: PPUSH
21766: LD_STRING DM-rast-19
21768: PPUSH
21769: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
21773: LD_EXP 34
21777: PPUSH
21778: LD_STRING DH-rast-20
21780: PPUSH
21781: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
21785: LD_EXP 36
21789: PPUSH
21790: LD_STRING DM-rast-21
21792: PPUSH
21793: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
21797: LD_EXP 34
21801: PPUSH
21802: LD_STRING DH-rast-22
21804: PPUSH
21805: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
21809: LD_EXP 34
21813: PPUSH
21814: LD_STRING DH-rast-23
21816: PPUSH
21817: CALL_OW 88
// end else
21821: GO 21973
// begin linkedWithRolf := 1 ;
21823: LD_ADDR_EXP 12
21827: PUSH
21828: LD_INT 1
21830: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
21831: LD_EXP 47
21835: PPUSH
21836: LD_STRING DRf-rast-a-11
21838: PPUSH
21839: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
21843: LD_EXP 34
21847: PPUSH
21848: LD_STRING DH-rast-a-12
21850: PPUSH
21851: CALL_OW 88
// if IsOk ( Kurt ) then
21855: LD_EXP 45
21859: PPUSH
21860: CALL_OW 302
21864: IFFALSE 21961
// begin Say ( Kurt , DKs-rast-a-13 ) ;
21866: LD_EXP 45
21870: PPUSH
21871: LD_STRING DKs-rast-a-13
21873: PPUSH
21874: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
21878: LD_EXP 47
21882: PPUSH
21883: LD_STRING DRf-rast-a-14
21885: PPUSH
21886: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
21890: LD_EXP 47
21894: PPUSH
21895: LD_STRING DRf-rast-a-15
21897: PPUSH
21898: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
21902: LD_EXP 45
21906: PPUSH
21907: LD_STRING DKs-rast-a-16
21909: PPUSH
21910: CALL_OW 88
// if IsOk ( Givi ) then
21914: LD_EXP 35
21918: PPUSH
21919: CALL_OW 302
21923: IFFALSE 21961
// begin Say ( Givi , DG-rast-a-17 ) ;
21925: LD_EXP 35
21929: PPUSH
21930: LD_STRING DG-rast-a-17
21932: PPUSH
21933: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
21937: LD_EXP 35
21941: PPUSH
21942: LD_STRING DG-rast-a-18
21944: PPUSH
21945: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
21949: LD_EXP 45
21953: PPUSH
21954: LD_STRING DKs-rast-a-19
21956: PPUSH
21957: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
21961: LD_EXP 34
21965: PPUSH
21966: LD_STRING DH-rast-a-20
21968: PPUSH
21969: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
21973: LD_EXP 47
21977: PPUSH
21978: LD_STRING DRf-rast-24
21980: PPUSH
21981: CALL_OW 88
// if IsOk ( Aviradze ) then
21985: LD_EXP 46
21989: PPUSH
21990: CALL_OW 302
21994: IFFALSE 22094
// begin Say ( Aviradze , DA-rast-25 ) ;
21996: LD_EXP 46
22000: PPUSH
22001: LD_STRING DA-rast-25
22003: PPUSH
22004: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
22008: LD_EXP 34
22012: PPUSH
22013: LD_STRING DH-rast-26
22015: PPUSH
22016: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
22020: LD_EXP 46
22024: PPUSH
22025: LD_STRING DA-rast-27
22027: PPUSH
22028: CALL_OW 88
// if IsOk ( Markov ) then
22032: LD_EXP 41
22036: PPUSH
22037: CALL_OW 302
22041: IFFALSE 22069
// begin Say ( Markov , DMar-rast-28 ) ;
22043: LD_EXP 41
22047: PPUSH
22048: LD_STRING DMar-rast-28
22050: PPUSH
22051: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
22055: LD_EXP 41
22059: PPUSH
22060: LD_STRING DMar-rast-29
22062: PPUSH
22063: CALL_OW 88
// end else
22067: GO 22092
// if IsOk ( Sophia ) then
22069: LD_EXP 40
22073: PPUSH
22074: CALL_OW 302
22078: IFFALSE 22092
// begin Say ( Sophia , DS-rast-28 ) ;
22080: LD_EXP 40
22084: PPUSH
22085: LD_STRING DS-rast-28
22087: PPUSH
22088: CALL_OW 88
// end ; end else
22092: GO 22117
// if IsOk ( Sophia ) then
22094: LD_EXP 40
22098: PPUSH
22099: CALL_OW 302
22103: IFFALSE 22117
// Say ( Sophia , DS-rast-29 ) ;
22105: LD_EXP 40
22109: PPUSH
22110: LD_STRING DS-rast-29
22112: PPUSH
22113: CALL_OW 88
// DialogueOff ;
22117: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
22121: LD_STRING M3
22123: PPUSH
22124: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
22128: LD_ADDR_VAR 0 1
22132: PUSH
22133: LD_INT 22
22135: PUSH
22136: LD_INT 8
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PPUSH
22143: CALL_OW 69
22147: PUSH
22148: FOR_IN
22149: IFFALSE 22165
// SetSide ( i , 2 ) ;
22151: LD_VAR 0 1
22155: PPUSH
22156: LD_INT 2
22158: PPUSH
22159: CALL_OW 235
22163: GO 22148
22165: POP
22166: POP
// end ;
22167: PPOPN 1
22169: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
22170: LD_EXP 23
22174: PUSH
22175: LD_EXP 12
22179: NOT
22180: AND
22181: PUSH
22182: LD_EXP 29
22186: AND
22187: IFFALSE 22278
22189: GO 22191
22191: DISABLE
22192: LD_INT 0
22194: PPUSH
// begin canRolfJoin := false ;
22195: LD_ADDR_EXP 29
22199: PUSH
22200: LD_INT 0
22202: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
22203: LD_STRING M3
22205: PPUSH
22206: CALL_OW 337
// for i in rolfSquad do
22210: LD_ADDR_VAR 0 1
22214: PUSH
22215: LD_EXP 51
22219: PUSH
22220: FOR_IN
22221: IFFALSE 22276
// begin ComExit ( i ) ;
22223: LD_VAR 0 1
22227: PPUSH
22228: CALL 67270 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
22232: LD_VAR 0 1
22236: PPUSH
22237: LD_INT 147
22239: PPUSH
22240: LD_INT 162
22242: PPUSH
22243: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
22247: LD_VAR 0 1
22251: PPUSH
22252: LD_INT 1050
22254: PPUSH
22255: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
22259: LD_VAR 0 1
22263: PPUSH
22264: LD_INT 103
22266: PPUSH
22267: LD_INT 162
22269: PPUSH
22270: CALL_OW 174
// end ;
22274: GO 22220
22276: POP
22277: POP
// end ;
22278: PPOPN 1
22280: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
22281: LD_EXP 3
22285: PUSH
22286: LD_EXP 47
22290: PPUSH
22291: CALL_OW 256
22295: PUSH
22296: LD_INT 400
22298: LESS
22299: AND
22300: PUSH
22301: LD_EXP 12
22305: NOT
22306: AND
22307: PUSH
22308: LD_EXP 29
22312: AND
22313: IFFALSE 22587
22315: GO 22317
22317: DISABLE
22318: LD_INT 0
22320: PPUSH
// begin DialogueOn ;
22321: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
22325: LD_EXP 47
22329: PPUSH
22330: LD_STRING DRf-rast-f-11
22332: PPUSH
22333: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
22337: LD_EXP 47
22341: PPUSH
22342: LD_STRING DRf-rast-f-12
22344: PPUSH
22345: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
22349: LD_EXP 47
22353: PPUSH
22354: LD_STRING DRf-rast-f-13
22356: PPUSH
22357: CALL_OW 94
// DialogueOff ;
22361: CALL_OW 7
// KillUnit ( Rolf ) ;
22365: LD_EXP 47
22369: PPUSH
22370: CALL_OW 66
// wait ( 0 0$1 ) ;
22374: LD_INT 35
22376: PPUSH
22377: CALL_OW 67
// if not IsOk ( Givi ) then
22381: LD_EXP 35
22385: PPUSH
22386: CALL_OW 302
22390: NOT
22391: IFFALSE 22395
// exit ;
22393: GO 22587
// DialogueOn ;
22395: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
22399: LD_EXP 35
22403: PPUSH
22404: LD_STRING DG-rast-f-14
22406: PPUSH
22407: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
22411: LD_EXP 35
22415: PPUSH
22416: LD_STRING DG-rast-f-15
22418: PPUSH
22419: CALL_OW 88
// if IsOk ( Kaia ) then
22423: LD_EXP 39
22427: PPUSH
22428: CALL_OW 302
22432: IFFALSE 22448
// Say ( Kaia , DK-rast-f-16 ) else
22434: LD_EXP 39
22438: PPUSH
22439: LD_STRING DK-rast-f-16
22441: PPUSH
22442: CALL_OW 88
22446: GO 22535
// if heikeSecondSquad then
22448: LD_EXP 49
22452: IFFALSE 22535
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
22454: LD_ADDR_VAR 0 1
22458: PUSH
22459: LD_EXP 49
22463: PUSH
22464: LD_INT 1
22466: PPUSH
22467: LD_EXP 49
22471: PPUSH
22472: CALL_OW 12
22476: ARRAY
22477: ST_TO_ADDR
// case GetSex ( random ) of 1 :
22478: LD_VAR 0 1
22482: PPUSH
22483: CALL_OW 258
22487: PUSH
22488: LD_INT 1
22490: DOUBLE
22491: EQUAL
22492: IFTRUE 22496
22494: GO 22511
22496: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
22497: LD_VAR 0 1
22501: PPUSH
22502: LD_STRING DArm-rast-f-a-16
22504: PPUSH
22505: CALL_OW 88
22509: GO 22535
22511: LD_INT 2
22513: DOUBLE
22514: EQUAL
22515: IFTRUE 22519
22517: GO 22534
22519: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
22520: LD_VAR 0 1
22524: PPUSH
22525: LD_STRING DArf-rast-f-a-16
22527: PPUSH
22528: CALL_OW 88
22532: GO 22535
22534: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
22535: LD_EXP 35
22539: PPUSH
22540: LD_STRING DG-rast-f-17
22542: PPUSH
22543: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
22547: LD_EXP 35
22551: PPUSH
22552: LD_STRING DG-rast-f-18
22554: PPUSH
22555: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
22559: LD_EXP 35
22563: PPUSH
22564: LD_STRING DG-rast-f-19
22566: PPUSH
22567: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
22571: LD_EXP 35
22575: PPUSH
22576: LD_STRING DG-rast-f-20
22578: PPUSH
22579: CALL_OW 88
// DialogueOff ;
22583: CALL_OW 7
// end ;
22587: PPOPN 1
22589: END
// every 0 0$1 trigger gameActive and SeeArea ( 2 , ruMainBase ) do
22590: LD_EXP 31
22594: PUSH
22595: LD_INT 2
22597: PPUSH
22598: LD_INT 10
22600: PPUSH
22601: CALL_OW 294
22605: AND
22606: IFFALSE 22679
22608: GO 22610
22610: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
22611: LD_EXP 35
22615: PPUSH
22616: LD_STRING DG-Len-1
22618: PPUSH
22619: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
22623: LD_EXP 45
22627: PPUSH
22628: LD_STRING DKs-Len-2
22630: PPUSH
22631: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
22635: LD_EXP 45
22639: PPUSH
22640: LD_STRING DKs-Len-3
22642: PPUSH
22643: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
22647: LD_EXP 34
22651: PPUSH
22652: LD_STRING DH-Len-4
22654: PPUSH
22655: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
22659: LD_EXP 39
22663: PPUSH
22664: LD_STRING DK-Len-5
22666: PPUSH
22667: CALL_OW 88
// leninSpotted := true ;
22671: LD_ADDR_EXP 14
22675: PUSH
22676: LD_INT 1
22678: ST_TO_ADDR
// end ;
22679: END
// every 0 0$1 trigger debug or ( bergkampfArrived and tick > [ 32 32$00 , 30 30$00 , 28 28$00 , 26 26$00 ] [ Difficulty ] ) do var i , tmp , inOmarBase , heikeNearbyOmar ;
22680: LD_EXP 1
22684: PUSH
22685: LD_EXP 3
22689: PUSH
22690: LD_OWVAR 1
22694: PUSH
22695: LD_INT 67200
22697: PUSH
22698: LD_INT 63000
22700: PUSH
22701: LD_INT 58800
22703: PUSH
22704: LD_INT 54600
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: PUSH
22713: LD_OWVAR 67
22717: ARRAY
22718: GREATER
22719: AND
22720: OR
22721: IFFALSE 23458
22723: GO 22725
22725: DISABLE
22726: LD_INT 0
22728: PPUSH
22729: PPUSH
22730: PPUSH
22731: PPUSH
// begin PrepareOmarSquad ;
22732: CALL 5144 0 0
// repeat wait ( 0 0$1 ) ;
22736: LD_INT 35
22738: PPUSH
22739: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
22743: LD_INT 14
22745: PPUSH
22746: LD_INT 22
22748: PUSH
22749: LD_INT 3
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 21
22761: PUSH
22762: LD_INT 1
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 59
22771: PUSH
22772: EMPTY
22773: LIST
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: LIST
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PPUSH
22784: CALL_OW 70
22788: NOT
22789: IFFALSE 22736
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
22791: LD_ADDR_VAR 0 2
22795: PUSH
22796: LD_INT 14
22798: PPUSH
22799: LD_INT 22
22801: PUSH
22802: LD_INT 2
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PPUSH
22809: CALL_OW 70
22813: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
22814: LD_ADDR_VAR 0 3
22818: PUSH
22819: LD_VAR 0 2
22823: PUSH
22824: LD_INT 0
22826: GREATER
22827: ST_TO_ADDR
// heikeNearbyOmar := IsInArea ( Heike , ruOmarBase ) ;
22828: LD_ADDR_VAR 0 4
22832: PUSH
22833: LD_EXP 34
22837: PPUSH
22838: LD_INT 14
22840: PPUSH
22841: CALL_OW 308
22845: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
22846: LD_VAR 0 2
22850: PPUSH
22851: LD_INT 21
22853: PUSH
22854: LD_INT 3
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PPUSH
22861: CALL_OW 72
22865: IFFALSE 22970
// begin if heikeNearbyOmar then
22867: LD_VAR 0 4
22871: IFFALSE 22887
// Say ( Omar , DOm-Base-1b ) else
22873: LD_EXP 44
22877: PPUSH
22878: LD_STRING DOm-Base-1b
22880: PPUSH
22881: CALL_OW 88
22885: GO 22899
// SayRadio ( Omar , DOm-Base-1br ) ;
22887: LD_EXP 44
22891: PPUSH
22892: LD_STRING DOm-Base-1br
22894: PPUSH
22895: CALL_OW 94
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
22899: LD_ADDR_VAR 0 1
22903: PUSH
22904: LD_VAR 0 2
22908: PPUSH
22909: LD_INT 21
22911: PUSH
22912: LD_INT 3
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PPUSH
22919: CALL_OW 72
22923: PUSH
22924: FOR_IN
22925: IFFALSE 22966
// begin if UnitsInside ( i ) then
22927: LD_VAR 0 1
22931: PPUSH
22932: CALL_OW 313
22936: IFFALSE 22952
// ComExitBuilding ( UnitsInside ( i ) ) ;
22938: LD_VAR 0 1
22942: PPUSH
22943: CALL_OW 313
22947: PPUSH
22948: CALL_OW 122
// SetSide ( i , 5 ) ;
22952: LD_VAR 0 1
22956: PPUSH
22957: LD_INT 5
22959: PPUSH
22960: CALL_OW 235
// end ;
22964: GO 22924
22966: POP
22967: POP
// end else
22968: GO 23063
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
22970: LD_VAR 0 2
22974: PPUSH
22975: LD_INT 21
22977: PUSH
22978: LD_INT 2
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PPUSH
22985: CALL_OW 72
22989: IFFALSE 23025
// begin if heikeNearbyOmar then
22991: LD_VAR 0 4
22995: IFFALSE 23011
// Say ( Omar , DOm-Base-1v ) else
22997: LD_EXP 44
23001: PPUSH
23002: LD_STRING DOm-Base-1v
23004: PPUSH
23005: CALL_OW 88
23009: GO 23023
// SayRadio ( Omar , DOm-Base-1vr ) end else
23011: LD_EXP 44
23015: PPUSH
23016: LD_STRING DOm-Base-1vr
23018: PPUSH
23019: CALL_OW 94
23023: GO 23063
// if inOmarBase then
23025: LD_VAR 0 3
23029: IFFALSE 23063
// begin if heikeNearbyOmar then
23031: LD_VAR 0 4
23035: IFFALSE 23051
// Say ( Omar , DOm-Base-1h ) else
23037: LD_EXP 44
23041: PPUSH
23042: LD_STRING DOm-Base-1h
23044: PPUSH
23045: CALL_OW 88
23049: GO 23063
// SayRadio ( Omar , DOm-Base-1hr ) end ;
23051: LD_EXP 44
23055: PPUSH
23056: LD_STRING DOm-Base-1hr
23058: PPUSH
23059: CALL_OW 94
// for i in omarSquad do
23063: LD_ADDR_VAR 0 1
23067: PUSH
23068: LD_EXP 52
23072: PUSH
23073: FOR_IN
23074: IFFALSE 23105
// if GetLives ( i ) < 750 then
23076: LD_VAR 0 1
23080: PPUSH
23081: CALL_OW 256
23085: PUSH
23086: LD_INT 750
23088: LESS
23089: IFFALSE 23103
// SetLives ( i , 1000 ) ;
23091: LD_VAR 0 1
23095: PPUSH
23096: LD_INT 1000
23098: PPUSH
23099: CALL_OW 234
23103: GO 23073
23105: POP
23106: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
23107: LD_ADDR_VAR 0 1
23111: PUSH
23112: LD_INT 14
23114: PPUSH
23115: LD_INT 21
23117: PUSH
23118: LD_INT 3
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PPUSH
23125: CALL_OW 70
23129: PUSH
23130: FOR_IN
23131: IFFALSE 23147
// SetSide ( i , 5 ) ;
23133: LD_VAR 0 1
23137: PPUSH
23138: LD_INT 5
23140: PPUSH
23141: CALL_OW 235
23145: GO 23130
23147: POP
23148: POP
// wait ( 0 0$3 ) ;
23149: LD_INT 105
23151: PPUSH
23152: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
23156: LD_INT 5
23158: PPUSH
23159: LD_INT 2
23161: PPUSH
23162: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
23166: LD_EXP 44
23170: PPUSH
23171: CALL_OW 87
// DialogueOn ;
23175: CALL_OW 6
// if heikeNearbyOmar then
23179: LD_VAR 0 4
23183: IFFALSE 23241
// begin Say ( Omar , DOm-Veh-1a ) ;
23185: LD_EXP 44
23189: PPUSH
23190: LD_STRING DOm-Veh-1a
23192: PPUSH
23193: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
23197: LD_EXP 44
23201: PPUSH
23202: LD_STRING DOm-Veh-2a
23204: PPUSH
23205: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
23209: LD_EXP 44
23213: PPUSH
23214: LD_STRING DOm-Veh-3a
23216: PPUSH
23217: CALL_OW 88
// if mortarConstructed then
23221: LD_EXP 15
23225: IFFALSE 23239
// Say ( Omar , DOm-Veh-4a ) ;
23227: LD_EXP 44
23231: PPUSH
23232: LD_STRING DOm-Veh-4a
23234: PPUSH
23235: CALL_OW 88
// end else
23239: GO 23295
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
23241: LD_EXP 44
23245: PPUSH
23246: LD_STRING DOm-Veh-1
23248: PPUSH
23249: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
23253: LD_EXP 44
23257: PPUSH
23258: LD_STRING DOm-Veh-2
23260: PPUSH
23261: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
23265: LD_EXP 44
23269: PPUSH
23270: LD_STRING DOm-Veh-3
23272: PPUSH
23273: CALL_OW 94
// if mortarConstructed then
23277: LD_EXP 15
23281: IFFALSE 23295
// SayRadio ( Omar , DOm-Veh-4 ) ;
23283: LD_EXP 44
23287: PPUSH
23288: LD_STRING DOm-Veh-4
23290: PPUSH
23291: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
23295: LD_EXP 34
23299: PPUSH
23300: LD_STRING DH-Veh-5
23302: PPUSH
23303: CALL_OW 88
// if IsOk ( Kurt ) then
23307: LD_EXP 45
23311: PPUSH
23312: CALL_OW 302
23316: IFFALSE 23366
// begin Say ( Kurt , DKs-Veh-6 ) ;
23318: LD_EXP 45
23322: PPUSH
23323: LD_STRING DKs-Veh-6
23325: PPUSH
23326: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
23330: LD_EXP 45
23334: PPUSH
23335: LD_STRING DKs-Veh-7
23337: PPUSH
23338: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
23342: LD_EXP 35
23346: PPUSH
23347: LD_STRING DG-Veh-8
23349: PPUSH
23350: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
23354: LD_EXP 36
23358: PPUSH
23359: LD_STRING DM-Veh-9
23361: PPUSH
23362: CALL_OW 88
// end ; DialogueOff ;
23366: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23370: LD_STRING M4
23372: PPUSH
23373: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
23377: LD_EXP 44
23381: PPUSH
23382: LD_INT 341
23384: PPUSH
23385: LD_INT 232
23387: PPUSH
23388: CALL_OW 428
23392: PPUSH
23393: CALL_OW 120
// omarArrived := true ;
23397: LD_ADDR_EXP 6
23401: PUSH
23402: LD_INT 1
23404: ST_TO_ADDR
// omarScriptBase := true ;
23405: LD_ADDR_EXP 10
23409: PUSH
23410: LD_INT 1
23412: ST_TO_ADDR
// omarWantVehicles := true ;
23413: LD_ADDR_EXP 18
23417: PUSH
23418: LD_INT 1
23420: ST_TO_ADDR
// if debug then
23421: LD_EXP 1
23425: IFFALSE 23458
// begin wait ( 0 0$25 ) ;
23427: LD_INT 875
23429: PPUSH
23430: CALL_OW 67
// omarScriptBase := false ;
23434: LD_ADDR_EXP 10
23438: PUSH
23439: LD_INT 0
23441: ST_TO_ADDR
// omarWantVehicles := false ;
23442: LD_ADDR_EXP 18
23446: PUSH
23447: LD_INT 0
23449: ST_TO_ADDR
// omarAttack := true ;
23450: LD_ADDR_EXP 23
23454: PUSH
23455: LD_INT 1
23457: ST_TO_ADDR
// end ; end ;
23458: PPOPN 4
23460: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
23461: LD_INT 10
23463: PPUSH
23464: LD_INT 22
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PPUSH
23474: CALL_OW 70
23478: PUSH
23479: LD_EXP 6
23483: AND
23484: PUSH
23485: LD_EXP 44
23489: PPUSH
23490: CALL_OW 302
23494: AND
23495: PUSH
23496: LD_EXP 23
23500: NOT
23501: AND
23502: IFFALSE 23519
23504: GO 23506
23506: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
23507: LD_EXP 44
23511: PPUSH
23512: LD_STRING DOm-Lenin
23514: PPUSH
23515: CALL_OW 94
23519: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
23520: LD_EXP 47
23524: PPUSH
23525: CALL_OW 302
23529: PUSH
23530: LD_EXP 12
23534: AND
23535: PUSH
23536: LD_EXP 6
23540: AND
23541: IFFALSE 23645
23543: GO 23545
23545: DISABLE
// begin wait ( 1 1$00 ) ;
23546: LD_INT 2100
23548: PPUSH
23549: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
23553: LD_EXP 47
23557: PPUSH
23558: CALL_OW 87
// DialogueOn ;
23562: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
23566: LD_EXP 47
23570: PPUSH
23571: LD_STRING DRf-Veh-10
23573: PPUSH
23574: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
23578: LD_EXP 47
23582: PPUSH
23583: LD_STRING DRf-Veh-11
23585: PPUSH
23586: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
23590: LD_EXP 34
23594: PPUSH
23595: LD_STRING DH-Veh-12
23597: PPUSH
23598: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
23602: LD_EXP 34
23606: PPUSH
23607: LD_STRING DH-Veh-13
23609: PPUSH
23610: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
23614: LD_EXP 47
23618: PPUSH
23619: LD_STRING DRf-Veh-14
23621: PPUSH
23622: CALL_OW 88
// DialogueOff ;
23626: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
23630: LD_STRING M5
23632: PPUSH
23633: CALL_OW 337
// rolfWantVehicles := true ;
23637: LD_ADDR_EXP 17
23641: PUSH
23642: LD_INT 1
23644: ST_TO_ADDR
// end ;
23645: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
23646: LD_EXP 18
23650: IFFALSE 24413
23652: GO 23654
23654: DISABLE
23655: LD_INT 0
23657: PPUSH
23658: PPUSH
23659: PPUSH
23660: PPUSH
23661: PPUSH
23662: PPUSH
// begin wait ( 0 0$3 ) ;
23663: LD_INT 105
23665: PPUSH
23666: CALL_OW 67
// Hint ( OmarVehicles ) ;
23670: LD_STRING OmarVehicles
23672: PPUSH
23673: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
23677: LD_INT 16
23679: PPUSH
23680: LD_INT 1
23682: PPUSH
23683: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
23687: LD_INT 35
23689: PPUSH
23690: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
23694: LD_ADDR_EXP 20
23698: PUSH
23699: LD_EXP 20
23703: PUSH
23704: LD_INT 35
23706: MINUS
23707: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
23708: LD_EXP 20
23712: PUSH
23713: LD_INT 0
23715: LESSEQUAL
23716: IFFALSE 23816
// begin display_strings := [ ] ;
23718: LD_ADDR_OWVAR 47
23722: PUSH
23723: EMPTY
23724: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
23725: LD_STRING M4a
23727: PPUSH
23728: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23732: LD_INT 16
23734: PPUSH
23735: LD_INT 0
23737: PPUSH
23738: CALL_OW 424
// DialogueOn ;
23742: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
23746: LD_EXP 44
23750: PPUSH
23751: LD_STRING DOm-Veh-b-15
23753: PPUSH
23754: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
23758: LD_EXP 34
23762: PPUSH
23763: LD_STRING DH-Veh-b-16
23765: PPUSH
23766: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
23770: LD_EXP 44
23774: PPUSH
23775: LD_STRING DOm-Veh-b-17
23777: PPUSH
23778: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
23782: LD_EXP 39
23786: PPUSH
23787: LD_STRING DK-Veh-b-18
23789: PPUSH
23790: CALL_OW 88
// DialogueOff ;
23794: CALL_OW 7
// omarAttack := true ;
23798: LD_ADDR_EXP 23
23802: PUSH
23803: LD_INT 1
23805: ST_TO_ADDR
// omarScriptBase := false ;
23806: LD_ADDR_EXP 10
23810: PUSH
23811: LD_INT 0
23813: ST_TO_ADDR
// exit ;
23814: GO 24413
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
23816: LD_EXP 21
23820: PUSH
23821: LD_INT 16
23823: PPUSH
23824: LD_INT 22
23826: PUSH
23827: LD_INT 2
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 21
23836: PUSH
23837: LD_INT 2
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 3
23846: PUSH
23847: LD_INT 2
23849: PUSH
23850: LD_INT 34
23852: PUSH
23853: LD_INT 32
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 34
23862: PUSH
23863: LD_INT 88
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 34
23872: PUSH
23873: LD_INT 31
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 33
23892: PUSH
23893: LD_INT 1
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 58
23902: PUSH
23903: EMPTY
23904: LIST
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: PPUSH
23913: CALL_OW 70
23917: LESSEQUAL
23918: IFFALSE 23687
// omarWaitingForVehiclesTimer := 0 0$00 ;
23920: LD_ADDR_EXP 20
23924: PUSH
23925: LD_INT 0
23927: ST_TO_ADDR
// display_strings := [ ] ;
23928: LD_ADDR_OWVAR 47
23932: PUSH
23933: EMPTY
23934: ST_TO_ADDR
// DialogueOn ;
23935: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
23939: LD_EXP 44
23943: PPUSH
23944: LD_STRING DOm-Veh-a-15
23946: PPUSH
23947: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
23951: LD_EXP 39
23955: PPUSH
23956: LD_STRING DK-Veh-a-16
23958: PPUSH
23959: CALL_OW 88
// DialogueOff ;
23963: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
23967: LD_STRING M4a
23969: PPUSH
23970: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23974: LD_INT 16
23976: PPUSH
23977: LD_INT 0
23979: PPUSH
23980: CALL_OW 424
// omarHasVehicles := true ;
23984: LD_ADDR_EXP 22
23988: PUSH
23989: LD_INT 1
23991: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23992: LD_INT 35
23994: PPUSH
23995: CALL_OW 67
// until rolfWaitingForVehiclesTimer = 0 0$00 ;
23999: LD_EXP 19
24003: PUSH
24004: LD_INT 0
24006: EQUAL
24007: IFFALSE 23992
// wait ( 1 1$00 ) ;
24009: LD_INT 2100
24011: PPUSH
24012: CALL_OW 67
// omarAttack := true ;
24016: LD_ADDR_EXP 23
24020: PUSH
24021: LD_INT 1
24023: ST_TO_ADDR
// omarScriptBase := false ;
24024: LD_ADDR_EXP 10
24028: PUSH
24029: LD_INT 0
24031: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
24032: LD_ADDR_VAR 0 2
24036: PUSH
24037: LD_INT 16
24039: PPUSH
24040: LD_INT 22
24042: PUSH
24043: LD_INT 2
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 21
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 33
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 58
24072: PUSH
24073: EMPTY
24074: LIST
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: PPUSH
24082: CALL_OW 70
24086: ST_TO_ADDR
// for i in tmp do
24087: LD_ADDR_VAR 0 1
24091: PUSH
24092: LD_VAR 0 2
24096: PUSH
24097: FOR_IN
24098: IFFALSE 24126
// begin SetFuel ( i , 100 ) ;
24100: LD_VAR 0 1
24104: PPUSH
24105: LD_INT 100
24107: PPUSH
24108: CALL_OW 240
// SetSide ( i , 5 ) ;
24112: LD_VAR 0 1
24116: PPUSH
24117: LD_INT 5
24119: PPUSH
24120: CALL_OW 235
// end ;
24124: GO 24097
24126: POP
24127: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
24128: LD_ADDR_VAR 0 3
24132: PUSH
24133: LD_EXP 52
24137: PPUSH
24138: LD_INT 25
24140: PUSH
24141: LD_INT 2
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PPUSH
24148: CALL_OW 72
24152: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
24153: LD_ADDR_VAR 0 4
24157: PUSH
24158: LD_EXP 52
24162: PPUSH
24163: LD_INT 3
24165: PUSH
24166: LD_INT 55
24168: PUSH
24169: EMPTY
24170: LIST
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 25
24178: PUSH
24179: LD_INT 3
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PPUSH
24190: CALL_OW 72
24194: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
24195: LD_ADDR_VAR 0 5
24199: PUSH
24200: LD_INT 324
24202: PPUSH
24203: LD_INT 234
24205: PPUSH
24206: CALL_OW 428
24210: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
24211: LD_ADDR_VAR 0 6
24215: PUSH
24216: LD_INT 334
24218: PPUSH
24219: LD_INT 241
24221: PPUSH
24222: CALL_OW 428
24226: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
24227: LD_VAR 0 6
24231: PPUSH
24232: CALL_OW 313
24236: PPUSH
24237: CALL_OW 122
// if eng then
24241: LD_VAR 0 3
24245: IFFALSE 24353
// begin if eng + mech <= tmp then
24247: LD_VAR 0 3
24251: PUSH
24252: LD_VAR 0 4
24256: PLUS
24257: PUSH
24258: LD_VAR 0 2
24262: LESSEQUAL
24263: IFFALSE 24318
// begin ComEnterUnit ( eng , workshop ) ;
24265: LD_VAR 0 3
24269: PPUSH
24270: LD_VAR 0 5
24274: PPUSH
24275: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
24279: LD_VAR 0 3
24283: PPUSH
24284: LD_INT 3
24286: PPUSH
24287: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24291: LD_VAR 0 3
24295: PPUSH
24296: CALL_OW 182
// mech := mech union eng ;
24300: LD_ADDR_VAR 0 4
24304: PUSH
24305: LD_VAR 0 4
24309: PUSH
24310: LD_VAR 0 3
24314: UNION
24315: ST_TO_ADDR
// end else
24316: GO 24353
// begin ComEnterUnit ( eng , armoury ) ;
24318: LD_VAR 0 3
24322: PPUSH
24323: LD_VAR 0 6
24327: PPUSH
24328: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
24332: LD_VAR 0 3
24336: PPUSH
24337: LD_INT 1
24339: PPUSH
24340: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24344: LD_VAR 0 3
24348: PPUSH
24349: CALL_OW 182
// end ; end ; for i := 1 to tmp do
24353: LD_ADDR_VAR 0 1
24357: PUSH
24358: DOUBLE
24359: LD_INT 1
24361: DEC
24362: ST_TO_ADDR
24363: LD_VAR 0 2
24367: PUSH
24368: FOR_TO
24369: IFFALSE 24411
// if i <= mech then
24371: LD_VAR 0 1
24375: PUSH
24376: LD_VAR 0 4
24380: LESSEQUAL
24381: IFFALSE 24409
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
24383: LD_VAR 0 4
24387: PUSH
24388: LD_VAR 0 1
24392: ARRAY
24393: PPUSH
24394: LD_VAR 0 2
24398: PUSH
24399: LD_VAR 0 1
24403: ARRAY
24404: PPUSH
24405: CALL_OW 180
24409: GO 24368
24411: POP
24412: POP
// end ;
24413: PPOPN 6
24415: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i , hasBadWeapons ;
24416: LD_EXP 47
24420: PPUSH
24421: CALL_OW 302
24425: PUSH
24426: LD_EXP 17
24430: AND
24431: IFFALSE 25055
24433: GO 24435
24435: DISABLE
24436: LD_INT 0
24438: PPUSH
24439: PPUSH
// begin repeat wait ( 0 0$1 ) ;
24440: LD_INT 35
24442: PPUSH
24443: CALL_OW 67
// hasBadWeapons := false ;
24447: LD_ADDR_VAR 0 2
24451: PUSH
24452: LD_INT 0
24454: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
24455: LD_ADDR_EXP 19
24459: PUSH
24460: LD_EXP 19
24464: PUSH
24465: LD_INT 35
24467: MINUS
24468: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 then
24469: LD_EXP 19
24473: PUSH
24474: LD_INT 0
24476: LESSEQUAL
24477: IFFALSE 24739
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
24479: LD_ADDR_EXP 19
24483: PUSH
24484: LD_INT 0
24486: ST_TO_ADDR
// display_strings := [ ] ;
24487: LD_ADDR_OWVAR 47
24491: PUSH
24492: EMPTY
24493: ST_TO_ADDR
// DialogueOn ;
24494: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
24498: LD_EXP 47
24502: PPUSH
24503: LD_STRING DRf-Veh-b-19
24505: PPUSH
24506: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
24510: LD_EXP 47
24514: PPUSH
24515: LD_STRING DRf-Veh-b-20
24517: PPUSH
24518: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
24522: LD_EXP 34
24526: PPUSH
24527: LD_STRING DH-Veh-b-21
24529: PPUSH
24530: CALL_OW 88
// if IsOk ( Givi ) then
24534: LD_EXP 35
24538: PPUSH
24539: CALL_OW 302
24543: IFFALSE 24581
// begin Say ( Givi , DG-Veh-b-22 ) ;
24545: LD_EXP 35
24549: PPUSH
24550: LD_STRING DG-Veh-b-22
24552: PPUSH
24553: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
24557: LD_EXP 34
24561: PPUSH
24562: LD_STRING DH-Veh-b-23
24564: PPUSH
24565: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
24569: LD_EXP 35
24573: PPUSH
24574: LD_STRING DG-Veh-b-24
24576: PPUSH
24577: CALL_OW 88
// end ; DialogueOff ;
24581: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24585: LD_STRING M5a
24587: PPUSH
24588: CALL_OW 337
// for i in rolfSquad do
24592: LD_ADDR_VAR 0 1
24596: PUSH
24597: LD_EXP 51
24601: PUSH
24602: FOR_IN
24603: IFFALSE 24720
// begin SetSide ( i , 8 ) ;
24605: LD_VAR 0 1
24609: PPUSH
24610: LD_INT 8
24612: PPUSH
24613: CALL_OW 235
// if IsDriver ( i ) then
24617: LD_VAR 0 1
24621: PPUSH
24622: CALL 64489 0 1
24626: IFFALSE 24698
// begin if not GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24628: LD_VAR 0 1
24632: PPUSH
24633: CALL_OW 310
24637: PPUSH
24638: CALL_OW 264
24642: PUSH
24643: LD_INT 51
24645: PUSH
24646: LD_INT 52
24648: PUSH
24649: LD_INT 32
24651: PUSH
24652: LD_INT 88
24654: PUSH
24655: LD_INT 31
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: IN
24665: NOT
24666: IFFALSE 24687
// SetSide ( IsInUnit ( i ) , 8 ) else
24668: LD_VAR 0 1
24672: PPUSH
24673: CALL_OW 310
24677: PPUSH
24678: LD_INT 8
24680: PPUSH
24681: CALL_OW 235
24685: GO 24696
// ComExitVehicle ( i ) ;
24687: LD_VAR 0 1
24691: PPUSH
24692: CALL_OW 121
// end else
24696: GO 24718
// if IsInUnit ( i ) then
24698: LD_VAR 0 1
24702: PPUSH
24703: CALL_OW 310
24707: IFFALSE 24718
// ComExitBuilding ( i ) ;
24709: LD_VAR 0 1
24713: PPUSH
24714: CALL_OW 122
// end ;
24718: GO 24602
24720: POP
24721: POP
// wait ( 0 0$10 ) ;
24722: LD_INT 350
24724: PPUSH
24725: CALL_OW 67
// rolfAttack := true ;
24729: LD_ADDR_EXP 32
24733: PUSH
24734: LD_INT 1
24736: ST_TO_ADDR
// exit ;
24737: GO 25055
// end ; if IsDead ( Rolf ) then
24739: LD_EXP 47
24743: PPUSH
24744: CALL_OW 301
24748: IFFALSE 24759
// begin ChangeMissionObjectives ( M5a ) ;
24750: LD_STRING M5a
24752: PPUSH
24753: CALL_OW 337
// exit ;
24757: GO 25055
// end ; if Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) then
24759: LD_EXP 51
24763: PPUSH
24764: LD_INT 55
24766: PUSH
24767: EMPTY
24768: LIST
24769: PPUSH
24770: CALL_OW 72
24774: PPUSH
24775: CALL 31539 0 1
24779: PUSH
24780: LD_EXP 51
24784: PPUSH
24785: CALL 31539 0 1
24789: EQUAL
24790: IFFALSE 24907
// begin for i in UnitFilter ( rolfSquad , [ f_driving ] ) do
24792: LD_ADDR_VAR 0 1
24796: PUSH
24797: LD_EXP 51
24801: PPUSH
24802: LD_INT 55
24804: PUSH
24805: EMPTY
24806: LIST
24807: PPUSH
24808: CALL_OW 72
24812: PUSH
24813: FOR_IN
24814: IFFALSE 24874
// if GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24816: LD_VAR 0 1
24820: PPUSH
24821: CALL_OW 310
24825: PPUSH
24826: CALL_OW 264
24830: PUSH
24831: LD_INT 51
24833: PUSH
24834: LD_INT 52
24836: PUSH
24837: LD_INT 32
24839: PUSH
24840: LD_INT 88
24842: PUSH
24843: LD_INT 31
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: IN
24853: IFFALSE 24872
// begin hasBadWeapons := true ;
24855: LD_ADDR_VAR 0 2
24859: PUSH
24860: LD_INT 1
24862: ST_TO_ADDR
// Query ( QBadWeapon ) ;
24863: LD_STRING QBadWeapon
24865: PPUSH
24866: CALL_OW 97
// break ;
24870: GO 24874
// end ;
24872: GO 24813
24874: POP
24875: POP
// if not hasBadWeapons then
24876: LD_VAR 0 2
24880: NOT
24881: IFFALSE 24907
// if Query ( QRolf ) = 1 then
24883: LD_STRING QRolf
24885: PPUSH
24886: CALL_OW 97
24890: PUSH
24891: LD_INT 1
24893: EQUAL
24894: IFFALSE 24900
// break else
24896: GO 24911
24898: GO 24907
// wait ( 0 0$15 ) ;
24900: LD_INT 525
24902: PPUSH
24903: CALL_OW 67
// end ; until false ;
24907: LD_INT 0
24909: IFFALSE 24440
// rolfWaitingForVehiclesTimer := 0 0$00 ;
24911: LD_ADDR_EXP 19
24915: PUSH
24916: LD_INT 0
24918: ST_TO_ADDR
// display_strings := [ ] ;
24919: LD_ADDR_OWVAR 47
24923: PUSH
24924: EMPTY
24925: ST_TO_ADDR
// DialogueOn ;
24926: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
24930: LD_EXP 47
24934: PPUSH
24935: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
24939: LD_EXP 47
24943: PPUSH
24944: LD_STRING DRf-Veh-a-17
24946: PPUSH
24947: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
24951: LD_EXP 34
24955: PPUSH
24956: LD_STRING DH-08-Veh-a-18
24958: PPUSH
24959: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
24963: LD_EXP 47
24967: PPUSH
24968: LD_STRING DRf-Veh-a-19
24970: PPUSH
24971: CALL_OW 88
// DialogueOff ;
24975: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24979: LD_STRING M5a
24981: PPUSH
24982: CALL_OW 337
// rolfHasVehicles := true ;
24986: LD_ADDR_EXP 16
24990: PUSH
24991: LD_INT 1
24993: ST_TO_ADDR
// for i in rolfSquad do
24994: LD_ADDR_VAR 0 1
24998: PUSH
24999: LD_EXP 51
25003: PUSH
25004: FOR_IN
25005: IFFALSE 25038
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
25007: LD_VAR 0 1
25011: PPUSH
25012: CALL_OW 310
25016: PPUSH
25017: LD_INT 8
25019: PPUSH
25020: CALL_OW 235
// SetSide ( i , 8 ) ;
25024: LD_VAR 0 1
25028: PPUSH
25029: LD_INT 8
25031: PPUSH
25032: CALL_OW 235
// end ;
25036: GO 25004
25038: POP
25039: POP
// wait ( 0 0$10 ) ;
25040: LD_INT 350
25042: PPUSH
25043: CALL_OW 67
// rolfAttack := true ;
25047: LD_ADDR_EXP 32
25051: PUSH
25052: LD_INT 1
25054: ST_TO_ADDR
// end ;
25055: PPOPN 2
25057: END
// every 0 0$1 trigger rolfAttack and omarAttack do
25058: LD_EXP 32
25062: PUSH
25063: LD_EXP 23
25067: AND
25068: IFFALSE 25080
25070: GO 25072
25072: DISABLE
// ChangeMissionObjectives ( M6a ) ;
25073: LD_STRING M6a
25075: PPUSH
25076: CALL_OW 337
25080: END
// every 0 0$1 trigger leninSpotted do
25081: LD_EXP 14
25085: IFFALSE 25173
25087: GO 25089
25089: DISABLE
// begin wait ( 0 0$10 ) ;
25090: LD_INT 350
25092: PPUSH
25093: CALL_OW 67
// DialogueOn ;
25097: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
25101: LD_EXP 46
25105: PPUSH
25106: LD_STRING DA-Transmission-1
25108: PPUSH
25109: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
25113: LD_EXP 53
25117: PPUSH
25118: LD_STRING DMzw-Transmission-2
25120: PPUSH
25121: CALL_OW 94
// if gaidarKilled then
25125: LD_EXP 7
25129: IFFALSE 25145
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
25131: LD_EXP 53
25135: PPUSH
25136: LD_STRING DMzw-Transmission-3
25138: PPUSH
25139: CALL_OW 94
25143: GO 25157
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
25145: LD_EXP 53
25149: PPUSH
25150: LD_STRING DMzw-Transmission-a-3
25152: PPUSH
25153: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
25157: LD_EXP 34
25161: PPUSH
25162: LD_STRING DH-Transmission-4
25164: PPUSH
25165: CALL_OW 88
// DialogueOff ;
25169: CALL_OW 7
// end ;
25173: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
25174: LD_INT 22
25176: PUSH
25177: LD_INT 3
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 25
25186: PUSH
25187: LD_INT 9
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 101
25196: PUSH
25197: LD_INT 2
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: LIST
25208: PPUSH
25209: CALL_OW 69
25213: PUSH
25214: LD_EXP 34
25218: PPUSH
25219: CALL_OW 302
25223: AND
25224: IFFALSE 25304
25226: GO 25228
25228: DISABLE
// begin wait ( 0 0$3 ) ;
25229: LD_INT 105
25231: PPUSH
25232: CALL_OW 67
// DialogueOn ;
25236: CALL_OW 6
// CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
25240: LD_INT 22
25242: PUSH
25243: LD_INT 3
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 25
25252: PUSH
25253: LD_INT 9
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 101
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: LIST
25274: PPUSH
25275: CALL_OW 69
25279: PUSH
25280: LD_INT 1
25282: ARRAY
25283: PPUSH
25284: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
25288: LD_EXP 34
25292: PPUSH
25293: LD_STRING DH-Rubazooka-1
25295: PPUSH
25296: CALL_OW 88
// DialogueOff ;
25300: CALL_OW 7
// end ;
25304: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
25305: LD_INT 19
25307: PPUSH
25308: LD_INT 22
25310: PUSH
25311: LD_INT 3
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PPUSH
25318: CALL_OW 70
25322: PUSH
25323: LD_EXP 28
25327: AND
25328: IFFALSE 25387
25330: GO 25332
25332: DISABLE
// begin DialogueOn ;
25333: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25337: LD_INT 19
25339: PPUSH
25340: LD_INT 22
25342: PUSH
25343: LD_INT 3
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PPUSH
25350: CALL_OW 70
25354: PPUSH
25355: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
25359: LD_EXP 34
25363: PPUSH
25364: LD_STRING DH-Ruattfirst-1
25366: PPUSH
25367: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
25371: LD_EXP 34
25375: PPUSH
25376: LD_STRING DH-Ruattfirst-2
25378: PPUSH
25379: CALL_OW 88
// DialogueOff ;
25383: CALL_OW 7
// end ;
25387: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
25388: LD_INT 19
25390: PPUSH
25391: LD_INT 22
25393: PUSH
25394: LD_INT 3
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PPUSH
25401: CALL_OW 70
25405: PUSH
25406: LD_EXP 28
25410: NOT
25411: AND
25412: IFFALSE 25459
25414: GO 25416
25416: DISABLE
// begin DialogueOn ;
25417: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25421: LD_INT 19
25423: PPUSH
25424: LD_INT 22
25426: PUSH
25427: LD_INT 3
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PPUSH
25434: CALL_OW 70
25438: PPUSH
25439: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
25443: LD_EXP 34
25447: PPUSH
25448: LD_STRING DH-Ruattnext-1
25450: PPUSH
25451: CALL_OW 88
// DialogueOff ;
25455: CALL_OW 7
// end ;
25459: END
// every 0 0$3 trigger IsDead ( Morozov ) and IsOk ( Omar ) do
25460: LD_EXP 53
25464: PPUSH
25465: CALL_OW 301
25469: PUSH
25470: LD_EXP 44
25474: PPUSH
25475: CALL_OW 302
25479: AND
25480: IFFALSE 25497
25482: GO 25484
25484: DISABLE
// SayRadio ( Omar , DOm-Morozov ) ;
25485: LD_EXP 44
25489: PPUSH
25490: LD_STRING DOm-Morozov
25492: PPUSH
25493: CALL_OW 94
25497: END
// every 0 0$1 trigger gameActive and GetResourceType ( GetBase ( arDepot ) , mat_oil ) <= 30 do
25498: LD_EXP 31
25502: PUSH
25503: LD_EXP 48
25507: PPUSH
25508: CALL_OW 274
25512: PPUSH
25513: LD_INT 2
25515: PPUSH
25516: CALL_OW 275
25520: PUSH
25521: LD_INT 30
25523: LESSEQUAL
25524: AND
25525: IFFALSE 25615
25527: GO 25529
25529: DISABLE
// begin wait ( 0 0$10 ) ;
25530: LD_INT 350
25532: PPUSH
25533: CALL_OW 67
// DialogueOn ;
25537: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
25541: LD_EXP 34
25545: PPUSH
25546: LD_STRING DH-Fuel-1
25548: PPUSH
25549: CALL_OW 88
// if IsOk ( Givi ) then
25553: LD_EXP 35
25557: PPUSH
25558: CALL_OW 302
25562: IFFALSE 25600
// begin Say ( Givi , DG-Fuel-2 ) ;
25564: LD_EXP 35
25568: PPUSH
25569: LD_STRING DG-Fuel-2
25571: PPUSH
25572: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
25576: LD_EXP 35
25580: PPUSH
25581: LD_STRING DG-Fuel-3
25583: PPUSH
25584: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
25588: LD_EXP 35
25592: PPUSH
25593: LD_STRING DG-Fuel-4
25595: PPUSH
25596: CALL_OW 88
// end ; DialogueOff ;
25600: CALL_OW 7
// Query ( QOil ) ;
25604: LD_STRING QOil
25606: PPUSH
25607: CALL_OW 97
// GoForOil ( ) ;
25611: CALL 8886 0 0
// end ;
25615: END
// every 0 0$1 trigger ( leninSpotted and omarAttack ) or IsDead ( Morozov ) do
25616: LD_EXP 14
25620: PUSH
25621: LD_EXP 23
25625: AND
25626: PUSH
25627: LD_EXP 53
25631: PPUSH
25632: CALL_OW 301
25636: OR
25637: IFFALSE 25978
25639: GO 25641
25641: DISABLE
// begin if IsDead ( Morozov ) then
25642: LD_EXP 53
25646: PPUSH
25647: CALL_OW 301
25651: IFFALSE 25662
// wait ( 1 1$45 ) else
25653: LD_INT 3675
25655: PPUSH
25656: CALL_OW 67
25660: GO 25690
// wait ( [ 9 9$30 , 8 8$00 , 7 7$40 , 6 6$30 ] [ Difficulty ] ) ;
25662: LD_INT 19950
25664: PUSH
25665: LD_INT 16800
25667: PUSH
25668: LD_INT 16100
25670: PUSH
25671: LD_INT 13650
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: PUSH
25680: LD_OWVAR 67
25684: ARRAY
25685: PPUSH
25686: CALL_OW 67
// DialogueOn ;
25690: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
25694: LD_EXP 42
25698: PPUSH
25699: LD_STRING DShar-End-1
25701: PPUSH
25702: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
25706: LD_EXP 34
25710: PPUSH
25711: LD_STRING DH-End-2
25713: PPUSH
25714: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
25718: LD_EXP 42
25722: PPUSH
25723: LD_STRING DShar-End-3
25725: PPUSH
25726: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
25730: LD_EXP 34
25734: PPUSH
25735: LD_STRING DH-End-4
25737: PPUSH
25738: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
25742: LD_EXP 42
25746: PPUSH
25747: LD_STRING DShar-End-5
25749: PPUSH
25750: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
25754: LD_EXP 42
25758: PPUSH
25759: LD_STRING DShar-End-6
25761: PPUSH
25762: CALL_OW 94
// dwait ( 0 0$2 ) ;
25766: LD_INT 70
25768: PPUSH
25769: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
25773: LD_EXP 34
25777: PPUSH
25778: LD_STRING DH-End-7
25780: PPUSH
25781: CALL_OW 88
// DialogueOff ;
25785: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
25789: LD_STRING M6
25791: PPUSH
25792: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
25796: LD_INT 17
25798: PPUSH
25799: LD_INT 1
25801: PPUSH
25802: CALL_OW 424
// escapeAllowed := true ;
25806: LD_ADDR_EXP 24
25810: PUSH
25811: LD_INT 1
25813: ST_TO_ADDR
// wait ( 0 0$2 ) ;
25814: LD_INT 70
25816: PPUSH
25817: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
25821: LD_EXP 45
25825: PPUSH
25826: LD_STRING DKs-End-8
25828: PPUSH
25829: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
25833: LD_EXP 39
25837: PPUSH
25838: LD_STRING DK-End-10
25840: PPUSH
25841: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
25845: LD_EXP 45
25849: PPUSH
25850: LD_STRING DKs-End-9
25852: PPUSH
25853: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
25857: LD_EXP 41
25861: PPUSH
25862: LD_STRING DMar-End-11
25864: PPUSH
25865: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
25869: LD_STRING 05_DrugsTested
25871: PPUSH
25872: LD_EXP 1
25876: PPUSH
25877: CALL_OW 30
25881: IFFALSE 25895
// Say ( Mike , DM-End-12 ) ;
25883: LD_EXP 36
25887: PPUSH
25888: LD_STRING DM-End-12
25890: PPUSH
25891: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
25895: LD_EXP 43
25899: PPUSH
25900: LD_STRING DO-End-13
25902: PPUSH
25903: CALL_OW 88
// if IsOk ( Sophia ) then
25907: LD_EXP 40
25911: PPUSH
25912: CALL_OW 302
25916: IFFALSE 25942
// begin Say ( Sophia , DS-End-15 ) ;
25918: LD_EXP 40
25922: PPUSH
25923: LD_STRING DS-End-15
25925: PPUSH
25926: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
25930: LD_EXP 39
25934: PPUSH
25935: LD_STRING DK-End-16
25937: PPUSH
25938: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
25942: LD_EXP 35
25946: PPUSH
25947: LD_STRING DG-End-17
25949: PPUSH
25950: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
25954: LD_EXP 35
25958: PPUSH
25959: LD_STRING DG-End-18
25961: PPUSH
25962: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
25966: LD_EXP 35
25970: PPUSH
25971: LD_STRING DG-End-19
25973: PPUSH
25974: CALL_OW 88
// end ;
25978: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
25979: LD_EXP 24
25983: IFFALSE 26122
25985: GO 25987
25987: DISABLE
25988: LD_INT 0
25990: PPUSH
25991: PPUSH
// begin repeat wait ( 0 0$1 ) ;
25992: LD_INT 35
25994: PPUSH
25995: CALL_OW 67
// display_strings := [ #X106-2 , escapeTimer ] ;
25999: LD_ADDR_OWVAR 47
26003: PUSH
26004: LD_STRING #X106-2
26006: PUSH
26007: LD_EXP 25
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
26016: LD_ADDR_EXP 25
26020: PUSH
26021: LD_EXP 25
26025: PUSH
26026: LD_INT 35
26028: MINUS
26029: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
26030: LD_ADDR_VAR 0 2
26034: PUSH
26035: LD_INT 17
26037: PPUSH
26038: LD_INT 22
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 21
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 23
26060: PUSH
26061: LD_INT 2
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: LIST
26072: PPUSH
26073: CALL_OW 71
26077: ST_TO_ADDR
// if not outsiders then
26078: LD_VAR 0 2
26082: NOT
26083: IFFALSE 26099
// begin escapeAllowed := false ;
26085: LD_ADDR_EXP 24
26089: PUSH
26090: LD_INT 0
26092: ST_TO_ADDR
// MissionWin ;
26093: CALL 26125 0 0
// exit ;
26097: GO 26122
// end ; if escapeTimer <= 0 0$00 then
26099: LD_EXP 25
26103: PUSH
26104: LD_INT 0
26106: LESSEQUAL
26107: IFFALSE 26118
// begin YouLost ( TimeOut ) ;
26109: LD_STRING TimeOut
26111: PPUSH
26112: CALL_OW 104
// exit ;
26116: GO 26122
// end ; until false ;
26118: LD_INT 0
26120: IFFALSE 25992
// end ;
26122: PPOPN 2
26124: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
26125: LD_INT 0
26127: PPUSH
26128: PPUSH
26129: PPUSH
26130: PPUSH
26131: PPUSH
// if tick <= 55 55$00 then
26132: LD_OWVAR 1
26136: PUSH
26137: LD_INT 115500
26139: LESSEQUAL
26140: IFFALSE 26149
// SetAchievement ( ACH_HSPEED_6 ) ;
26142: LD_STRING ACH_HSPEED_6
26144: PPUSH
26145: CALL_OW 543
// Say ( Heike , DH-End-20 ) ;
26149: LD_EXP 34
26153: PPUSH
26154: LD_STRING DH-End-20
26156: PPUSH
26157: CALL_OW 88
// if rolfDied then
26161: LD_EXP 13
26165: IFFALSE 26180
// AddMedal ( med1 , - 1 ) else
26167: LD_STRING med1
26169: PPUSH
26170: LD_INT 1
26172: NEG
26173: PPUSH
26174: CALL_OW 101
26178: GO 26210
// if not canRolfJoin then
26180: LD_EXP 29
26184: NOT
26185: IFFALSE 26200
// AddMedal ( med1 , - 2 ) else
26187: LD_STRING med1
26189: PPUSH
26190: LD_INT 2
26192: NEG
26193: PPUSH
26194: CALL_OW 101
26198: GO 26210
// AddMedal ( med1 , 1 ) ;
26200: LD_STRING med1
26202: PPUSH
26203: LD_INT 1
26205: PPUSH
26206: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
26210: LD_EXP 22
26214: PUSH
26215: LD_EXP 16
26219: AND
26220: IFFALSE 26234
// AddMedal ( med2 , 1 ) else
26222: LD_STRING med2
26224: PPUSH
26225: LD_INT 1
26227: PPUSH
26228: CALL_OW 101
26232: GO 26283
// if omarHasVehicles then
26234: LD_EXP 22
26238: IFFALSE 26253
// AddMedal ( med2 , - 1 ) else
26240: LD_STRING med2
26242: PPUSH
26243: LD_INT 1
26245: NEG
26246: PPUSH
26247: CALL_OW 101
26251: GO 26283
// if rolfHasVehicles then
26253: LD_EXP 16
26257: IFFALSE 26272
// AddMedal ( med2 , - 2 ) else
26259: LD_STRING med2
26261: PPUSH
26262: LD_INT 2
26264: NEG
26265: PPUSH
26266: CALL_OW 101
26270: GO 26283
// AddMedal ( med2 , - 3 ) ;
26272: LD_STRING med2
26274: PPUSH
26275: LD_INT 3
26277: NEG
26278: PPUSH
26279: CALL_OW 101
// if ruLoseCounter >= [ 20 , 30 , 40 , 50 ] [ Difficulty ] and heikeLoseCounter = 0 then
26283: LD_EXP 5
26287: PUSH
26288: LD_INT 20
26290: PUSH
26291: LD_INT 30
26293: PUSH
26294: LD_INT 40
26296: PUSH
26297: LD_INT 50
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: PUSH
26306: LD_OWVAR 67
26310: ARRAY
26311: GREATEREQUAL
26312: PUSH
26313: LD_EXP 26
26317: PUSH
26318: LD_INT 0
26320: EQUAL
26321: AND
26322: IFFALSE 26336
// AddMedal ( med3 , 1 ) else
26324: LD_STRING med3
26326: PPUSH
26327: LD_INT 1
26329: PPUSH
26330: CALL_OW 101
26334: GO 26366
// if heikeLoseCounter then
26336: LD_EXP 26
26340: IFFALSE 26355
// AddMedal ( med3 , - 2 ) else
26342: LD_STRING med3
26344: PPUSH
26345: LD_INT 2
26347: NEG
26348: PPUSH
26349: CALL_OW 101
26353: GO 26366
// AddMedal ( med3 , - 1 ) ;
26355: LD_STRING med3
26357: PPUSH
26358: LD_INT 1
26360: NEG
26361: PPUSH
26362: CALL_OW 101
// GiveMedals ( MAIN ) ;
26366: LD_STRING MAIN
26368: PPUSH
26369: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
26373: LD_INT 22
26375: PUSH
26376: LD_INT 2
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 23
26385: PUSH
26386: LD_INT 2
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 21
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: LIST
26407: PPUSH
26408: CALL_OW 69
26412: PPUSH
26413: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
26417: LD_EXP 34
26421: PPUSH
26422: LD_STRING 06_Heike
26424: PPUSH
26425: CALL_OW 38
// if Aviradze then
26429: LD_EXP 46
26433: IFFALSE 26447
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
26435: LD_EXP 46
26439: PPUSH
26440: LD_STRING 06_Aviradze
26442: PPUSH
26443: CALL_OW 38
// if Ibrahim then
26447: LD_EXP 37
26451: IFFALSE 26465
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
26453: LD_EXP 37
26457: PPUSH
26458: LD_STRING 06_Ibrahim
26460: PPUSH
26461: CALL_OW 38
// if Kamil then
26465: LD_EXP 38
26469: IFFALSE 26483
// SaveCharacters ( Kamil , 06_Kamil ) ;
26471: LD_EXP 38
26475: PPUSH
26476: LD_STRING 06_Kamil
26478: PPUSH
26479: CALL_OW 38
// if Sophia then
26483: LD_EXP 40
26487: IFFALSE 26501
// SaveCharacters ( Sophia , 06_Sophia ) ;
26489: LD_EXP 40
26493: PPUSH
26494: LD_STRING 06_Sophia
26496: PPUSH
26497: CALL_OW 38
// if Kaia then
26501: LD_EXP 39
26505: IFFALSE 26519
// SaveCharacters ( Kaia , 06_Kaia ) ;
26507: LD_EXP 39
26511: PPUSH
26512: LD_STRING 06_Kaia
26514: PPUSH
26515: CALL_OW 38
// if Givi then
26519: LD_EXP 35
26523: IFFALSE 26537
// SaveCharacters ( Givi , 06_Givi ) ;
26525: LD_EXP 35
26529: PPUSH
26530: LD_STRING 06_Givi
26532: PPUSH
26533: CALL_OW 38
// if Olaf then
26537: LD_EXP 43
26541: IFFALSE 26555
// SaveCharacters ( Olaf , 06_Olaf ) ;
26543: LD_EXP 43
26547: PPUSH
26548: LD_STRING 06_Olaf
26550: PPUSH
26551: CALL_OW 38
// if Mike then
26555: LD_EXP 36
26559: IFFALSE 26573
// SaveCharacters ( Mike , 06_Mike ) ;
26561: LD_EXP 36
26565: PPUSH
26566: LD_STRING 06_Mike
26568: PPUSH
26569: CALL_OW 38
// if Markov then
26573: LD_EXP 41
26577: IFFALSE 26591
// SaveCharacters ( Markov , 06_Markov ) ;
26579: LD_EXP 41
26583: PPUSH
26584: LD_STRING 06_Markov
26586: PPUSH
26587: CALL_OW 38
// if Kurt then
26591: LD_EXP 45
26595: IFFALSE 26609
// SaveCharacters ( Kurt , 06_Kurt ) ;
26597: LD_EXP 45
26601: PPUSH
26602: LD_STRING 06_Kurt
26604: PPUSH
26605: CALL_OW 38
// if heikeSecondSquad then
26609: LD_EXP 49
26613: IFFALSE 26627
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
26615: LD_EXP 49
26619: PPUSH
26620: LD_STRING 06_others
26622: PPUSH
26623: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
26627: LD_ADDR_VAR 0 3
26631: PUSH
26632: LD_INT 22
26634: PUSH
26635: LD_INT 2
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 23
26644: PUSH
26645: LD_INT 0
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PPUSH
26656: CALL_OW 69
26660: ST_TO_ADDR
// if tmp then
26661: LD_VAR 0 3
26665: IFFALSE 26679
// SaveCharacters ( tmp , 06_apes ) ;
26667: LD_VAR 0 3
26671: PPUSH
26672: LD_STRING 06_apes
26674: PPUSH
26675: CALL_OW 38
// if Rolf then
26679: LD_EXP 47
26683: IFFALSE 26734
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
26685: LD_EXP 47
26689: PPUSH
26690: LD_STRING 06_Rolf
26692: PPUSH
26693: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
26697: LD_STRING enableBioCharacter(BIO_ROLF)
26699: PPUSH
26700: CALL_OW 559
// if rolfSquad diff Rolf then
26704: LD_EXP 51
26708: PUSH
26709: LD_EXP 47
26713: DIFF
26714: IFFALSE 26734
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
26716: LD_EXP 51
26720: PUSH
26721: LD_EXP 47
26725: DIFF
26726: PPUSH
26727: LD_STRING 06_RolfSquad
26729: PPUSH
26730: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
26734: LD_ADDR_VAR 0 3
26738: PUSH
26739: LD_INT 17
26741: PPUSH
26742: LD_INT 21
26744: PUSH
26745: LD_INT 2
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PPUSH
26752: CALL_OW 70
26756: ST_TO_ADDR
// if tmp then
26757: LD_VAR 0 3
26761: IFFALSE 27055
// begin tmp2 := [ ] ;
26763: LD_ADDR_VAR 0 4
26767: PUSH
26768: EMPTY
26769: ST_TO_ADDR
// for i in tmp do
26770: LD_ADDR_VAR 0 2
26774: PUSH
26775: LD_VAR 0 3
26779: PUSH
26780: FOR_IN
26781: IFFALSE 27041
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
26783: LD_VAR 0 2
26787: PPUSH
26788: CALL_OW 264
26792: PUSH
26793: LD_INT 32
26795: PUSH
26796: LD_INT 12
26798: PUSH
26799: LD_INT 51
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: LIST
26806: IN
26807: IFFALSE 26944
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
26809: LD_ADDR_VAR 0 5
26813: PUSH
26814: LD_VAR 0 2
26818: PPUSH
26819: LD_INT 1
26821: PPUSH
26822: CALL_OW 289
26826: PUSH
26827: LD_VAR 0 2
26831: PPUSH
26832: LD_INT 2
26834: PPUSH
26835: CALL_OW 289
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
26844: LD_ADDR_VAR 0 4
26848: PUSH
26849: LD_VAR 0 4
26853: PPUSH
26854: LD_VAR 0 4
26858: PUSH
26859: LD_INT 1
26861: PLUS
26862: PPUSH
26863: LD_VAR 0 2
26867: PPUSH
26868: CALL_OW 265
26872: PUSH
26873: LD_VAR 0 2
26877: PPUSH
26878: CALL_OW 262
26882: PUSH
26883: LD_VAR 0 2
26887: PPUSH
26888: CALL_OW 263
26892: PUSH
26893: LD_VAR 0 2
26897: PPUSH
26898: CALL_OW 264
26902: PUSH
26903: LD_VAR 0 2
26907: PPUSH
26908: CALL_OW 248
26912: PUSH
26913: LD_VAR 0 2
26917: PPUSH
26918: CALL_OW 256
26922: PUSH
26923: LD_VAR 0 5
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: PPUSH
26937: CALL_OW 1
26941: ST_TO_ADDR
// end else
26942: GO 27039
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
26944: LD_ADDR_VAR 0 4
26948: PUSH
26949: LD_VAR 0 4
26953: PPUSH
26954: LD_VAR 0 4
26958: PUSH
26959: LD_INT 1
26961: PLUS
26962: PPUSH
26963: LD_VAR 0 2
26967: PPUSH
26968: CALL_OW 265
26972: PUSH
26973: LD_VAR 0 2
26977: PPUSH
26978: CALL_OW 262
26982: PUSH
26983: LD_VAR 0 2
26987: PPUSH
26988: CALL_OW 263
26992: PUSH
26993: LD_VAR 0 2
26997: PPUSH
26998: CALL_OW 264
27002: PUSH
27003: LD_VAR 0 2
27007: PPUSH
27008: CALL_OW 248
27012: PUSH
27013: LD_VAR 0 2
27017: PPUSH
27018: CALL_OW 256
27022: PUSH
27023: EMPTY
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: PPUSH
27034: CALL_OW 1
27038: ST_TO_ADDR
27039: GO 26780
27041: POP
27042: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
27043: LD_VAR 0 4
27047: PPUSH
27048: LD_STRING 06_Vehicles
27050: PPUSH
27051: CALL_OW 39
// end ; YouWin ;
27055: CALL_OW 103
// end ; end_of_file
27059: LD_VAR 0 1
27063: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
27064: LD_INT 0
27066: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
27067: LD_VAR 0 1
27071: PPUSH
27072: LD_VAR 0 2
27076: PPUSH
27077: CALL 86951 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
27081: LD_VAR 0 1
27085: PPUSH
27086: CALL_OW 255
27090: PUSH
27091: LD_INT 2
27093: EQUAL
27094: PUSH
27095: LD_OWVAR 52
27099: AND
27100: PUSH
27101: LD_VAR 0 1
27105: PPUSH
27106: CALL_OW 263
27110: PUSH
27111: LD_INT 1
27113: EQUAL
27114: AND
27115: IFFALSE 27170
// begin driver := IsDrivenBy ( vehicle ) ;
27117: LD_ADDR_VAR 0 3
27121: PUSH
27122: LD_VAR 0 1
27126: PPUSH
27127: CALL_OW 311
27131: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
27132: LD_VAR 0 1
27136: PPUSH
27137: LD_INT 211
27139: PPUSH
27140: LD_INT 101
27142: PPUSH
27143: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27147: LD_VAR 0 3
27151: PPUSH
27152: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27156: LD_VAR 0 3
27160: PPUSH
27161: LD_VAR 0 2
27165: PPUSH
27166: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
27170: LD_VAR 0 1
27174: PPUSH
27175: CALL_OW 255
27179: PUSH
27180: LD_INT 3
27182: EQUAL
27183: IFFALSE 27214
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
27185: LD_ADDR_EXP 60
27189: PUSH
27190: LD_EXP 60
27194: PPUSH
27195: LD_EXP 60
27199: PUSH
27200: LD_INT 1
27202: PLUS
27203: PPUSH
27204: LD_VAR 0 1
27208: PPUSH
27209: CALL_OW 1
27213: ST_TO_ADDR
// end ;
27214: PPOPN 3
27216: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
27217: LD_VAR 0 1
27221: PPUSH
27222: CALL_OW 255
27226: PUSH
27227: LD_INT 8
27229: EQUAL
27230: PUSH
27231: LD_VAR 0 1
27235: PPUSH
27236: CALL_OW 266
27240: PUSH
27241: LD_INT 4
27243: EQUAL
27244: AND
27245: IFFALSE 27256
// ComUpgrade ( b ) ;
27247: LD_VAR 0 1
27251: PPUSH
27252: CALL_OW 146
// end ;
27256: PPOPN 1
27258: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
27259: LD_VAR 0 1
27263: PPUSH
27264: CALL 86831 0 1
// if un = Heike then
27268: LD_VAR 0 1
27272: PUSH
27273: LD_EXP 34
27277: EQUAL
27278: IFFALSE 27287
// YouLost ( Heike ) ;
27280: LD_STRING Heike
27282: PPUSH
27283: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
27287: LD_VAR 0 1
27291: PUSH
27292: LD_INT 22
27294: PUSH
27295: LD_INT 2
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 23
27304: PUSH
27305: LD_INT 2
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PPUSH
27316: CALL_OW 69
27320: IN
27321: IFFALSE 27337
// heikeLoseCounter := heikeLoseCounter + 1 ;
27323: LD_ADDR_EXP 26
27327: PUSH
27328: LD_EXP 26
27332: PUSH
27333: LD_INT 1
27335: PLUS
27336: ST_TO_ADDR
// if un = arDepot then
27337: LD_VAR 0 1
27341: PUSH
27342: LD_EXP 48
27346: EQUAL
27347: IFFALSE 27356
// YouLost ( Base ) ;
27349: LD_STRING Base
27351: PPUSH
27352: CALL_OW 104
// if un = Rolf then
27356: LD_VAR 0 1
27360: PUSH
27361: LD_EXP 47
27365: EQUAL
27366: IFFALSE 27376
// rolfDied := true ;
27368: LD_ADDR_EXP 13
27372: PUSH
27373: LD_INT 1
27375: ST_TO_ADDR
// if un in rolfSquad then
27376: LD_VAR 0 1
27380: PUSH
27381: LD_EXP 51
27385: IN
27386: IFFALSE 27404
// rolfSquad := rolfSquad diff un ;
27388: LD_ADDR_EXP 51
27392: PUSH
27393: LD_EXP 51
27397: PUSH
27398: LD_VAR 0 1
27402: DIFF
27403: ST_TO_ADDR
// if un in omarSquad then
27404: LD_VAR 0 1
27408: PUSH
27409: LD_EXP 52
27413: IN
27414: IFFALSE 27432
// omarSquad := omarSquad diff un ;
27416: LD_ADDR_EXP 52
27420: PUSH
27421: LD_EXP 52
27425: PUSH
27426: LD_VAR 0 1
27430: DIFF
27431: ST_TO_ADDR
// if GetSide ( un ) = 3 then
27432: LD_VAR 0 1
27436: PPUSH
27437: CALL_OW 255
27441: PUSH
27442: LD_INT 3
27444: EQUAL
27445: IFFALSE 27461
// ruLoseCounter := ruLoseCounter + 1 ;
27447: LD_ADDR_EXP 5
27451: PUSH
27452: LD_EXP 5
27456: PUSH
27457: LD_INT 1
27459: PLUS
27460: ST_TO_ADDR
// if un in ruAttackers then
27461: LD_VAR 0 1
27465: PUSH
27466: LD_EXP 61
27470: IN
27471: IFFALSE 27489
// ruAttackers := ruAttackers diff un ;
27473: LD_ADDR_EXP 61
27477: PUSH
27478: LD_EXP 61
27482: PUSH
27483: LD_VAR 0 1
27487: DIFF
27488: ST_TO_ADDR
// end ;
27489: PPOPN 1
27491: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) in [ 5 , 8 ] and GetLives ( unit ) < 1000 then
27492: LD_VAR 0 2
27496: PPUSH
27497: CALL_OW 255
27501: PUSH
27502: LD_INT 5
27504: PUSH
27505: LD_INT 8
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: IN
27512: PUSH
27513: LD_VAR 0 2
27517: PPUSH
27518: CALL_OW 256
27522: PUSH
27523: LD_INT 1000
27525: LESS
27526: AND
27527: IFFALSE 27541
// SetLives ( unit , 1000 ) ;
27529: LD_VAR 0 2
27533: PPUSH
27534: LD_INT 1000
27536: PPUSH
27537: CALL_OW 234
// end ;
27541: PPOPN 2
27543: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
27544: LD_INT 0
27546: PPUSH
27547: PPUSH
27548: PPUSH
27549: PPUSH
// begin if GetSide ( vehicle ) = 8 and rolfAttack then
27550: LD_VAR 0 2
27554: PPUSH
27555: CALL_OW 255
27559: PUSH
27560: LD_INT 8
27562: EQUAL
27563: PUSH
27564: LD_EXP 32
27568: AND
27569: IFFALSE 27586
// ComMoveXY ( un , 221 , 161 ) ;
27571: LD_VAR 0 1
27575: PPUSH
27576: LD_INT 221
27578: PPUSH
27579: LD_INT 161
27581: PPUSH
27582: CALL_OW 111
// if GetSide ( vehicle ) = 5 and omarAttack then
27586: LD_VAR 0 2
27590: PPUSH
27591: CALL_OW 255
27595: PUSH
27596: LD_INT 5
27598: EQUAL
27599: PUSH
27600: LD_EXP 23
27604: AND
27605: IFFALSE 27714
// begin ComMoveXY ( un , 333 , 233 ) ;
27607: LD_VAR 0 1
27611: PPUSH
27612: LD_INT 333
27614: PPUSH
27615: LD_INT 233
27617: PPUSH
27618: CALL_OW 111
// if not HexInfo ( 334 , 241 ) or not GetBType ( HexInfo ( 334 , 241 ) ) = b_armoury then
27622: LD_INT 334
27624: PPUSH
27625: LD_INT 241
27627: PPUSH
27628: CALL_OW 428
27632: NOT
27633: PUSH
27634: LD_INT 334
27636: PPUSH
27637: LD_INT 241
27639: PPUSH
27640: CALL_OW 428
27644: PPUSH
27645: CALL_OW 266
27649: PUSH
27650: LD_INT 4
27652: EQUAL
27653: NOT
27654: OR
27655: IFFALSE 27659
// exit ;
27657: GO 28239
// AddComEnterUnit ( un , HexInfo ( 334 , 241 ) ) ;
27659: LD_VAR 0 1
27663: PPUSH
27664: LD_INT 334
27666: PPUSH
27667: LD_INT 241
27669: PPUSH
27670: CALL_OW 428
27674: PPUSH
27675: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
27679: LD_VAR 0 1
27683: PPUSH
27684: LD_INT 1
27686: PPUSH
27687: CALL_OW 183
// AddComExitBuilding ( un ) ;
27691: LD_VAR 0 1
27695: PPUSH
27696: CALL_OW 182
// AddComMoveUnit ( un , Omar ) ;
27700: LD_VAR 0 1
27704: PPUSH
27705: LD_EXP 44
27709: PPUSH
27710: CALL_OW 172
// end ; if GetSide ( un ) = 3 and not un in ruAttackers then
27714: LD_VAR 0 1
27718: PPUSH
27719: CALL_OW 255
27723: PUSH
27724: LD_INT 3
27726: EQUAL
27727: PUSH
27728: LD_VAR 0 1
27732: PUSH
27733: LD_EXP 61
27737: IN
27738: NOT
27739: AND
27740: IFFALSE 28239
// begin if not IsInArea ( un , ruMainBase ) then
27742: LD_VAR 0 1
27746: PPUSH
27747: LD_INT 10
27749: PPUSH
27750: CALL_OW 308
27754: NOT
27755: IFFALSE 27772
// ComMoveXY ( un , 62 , 98 ) ;
27757: LD_VAR 0 1
27761: PPUSH
27762: LD_INT 62
27764: PPUSH
27765: LD_INT 98
27767: PPUSH
27768: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27772: LD_INT 35
27774: PPUSH
27775: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
27779: LD_VAR 0 1
27783: PPUSH
27784: CALL_OW 302
27788: NOT
27789: PUSH
27790: LD_VAR 0 1
27794: PPUSH
27795: LD_INT 10
27797: PPUSH
27798: CALL_OW 308
27802: OR
27803: IFFALSE 27772
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
27805: LD_ADDR_EXP 59
27809: PUSH
27810: LD_EXP 59
27814: PPUSH
27815: LD_EXP 59
27819: PUSH
27820: LD_INT 1
27822: PLUS
27823: PPUSH
27824: LD_VAR 0 1
27828: PPUSH
27829: CALL_OW 1
27833: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
27834: LD_ADDR_VAR 0 8
27838: PUSH
27839: LD_INT 72
27841: PUSH
27842: LD_INT 12
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: ST_TO_ADDR
// if tmp then
27849: LD_VAR 0 8
27853: IFFALSE 27968
// for i in tmp do
27855: LD_ADDR_VAR 0 5
27859: PUSH
27860: LD_VAR 0 8
27864: PUSH
27865: FOR_IN
27866: IFFALSE 27966
// if UnitsInside ( i ) < 6 then
27868: LD_VAR 0 5
27872: PPUSH
27873: CALL_OW 313
27877: PUSH
27878: LD_INT 6
27880: LESS
27881: IFFALSE 27964
// begin AddComEnterUnit ( un , i ) ;
27883: LD_VAR 0 1
27887: PPUSH
27888: LD_VAR 0 5
27892: PPUSH
27893: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
27897: LD_VAR 0 8
27901: PPUSH
27902: LD_INT 22
27904: PUSH
27905: LD_INT 23
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 1
27914: PPUSH
27915: LD_INT 2
27917: PPUSH
27918: CALL_OW 12
27922: ARRAY
27923: PPUSH
27924: LD_INT 1
27926: PPUSH
27927: LD_INT 1
27929: PPUSH
27930: LD_INT 44
27932: PUSH
27933: LD_INT 46
27935: PUSH
27936: LD_INT 47
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 1
27946: PPUSH
27947: LD_INT 3
27949: PPUSH
27950: CALL_OW 12
27954: ARRAY
27955: PPUSH
27956: CALL_OW 185
// exit ;
27960: POP
27961: POP
27962: GO 28239
// end ;
27964: GO 27865
27966: POP
27967: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
27968: LD_ADDR_VAR 0 8
27972: PUSH
27973: LD_INT 10
27975: PPUSH
27976: LD_INT 22
27978: PUSH
27979: LD_INT 3
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 50
27988: PUSH
27989: EMPTY
27990: LIST
27991: PUSH
27992: LD_INT 2
27994: PUSH
27995: LD_INT 30
27997: PUSH
27998: LD_INT 4
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 30
28007: PUSH
28008: LD_INT 5
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 30
28017: PUSH
28018: LD_INT 32
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 30
28027: PUSH
28028: LD_INT 31
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: LIST
28046: PPUSH
28047: CALL_OW 70
28051: ST_TO_ADDR
// if not tmp then
28052: LD_VAR 0 8
28056: NOT
28057: IFFALSE 28076
// begin ComMoveXY ( un , 83 , 133 ) ;
28059: LD_VAR 0 1
28063: PPUSH
28064: LD_INT 83
28066: PPUSH
28067: LD_INT 133
28069: PPUSH
28070: CALL_OW 111
// exit ;
28074: GO 28239
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28076: LD_ADDR_VAR 0 6
28080: PUSH
28081: LD_VAR 0 1
28085: PPUSH
28086: LD_VAR 0 8
28090: PPUSH
28091: LD_INT 1
28093: PPUSH
28094: LD_INT 1
28096: PPUSH
28097: CALL 34977 0 4
28101: PUSH
28102: FOR_IN
28103: IFFALSE 28237
// begin case GetBType ( b ) of b_armoury , b_barracks :
28105: LD_VAR 0 6
28109: PPUSH
28110: CALL_OW 266
28114: PUSH
28115: LD_INT 4
28117: DOUBLE
28118: EQUAL
28119: IFTRUE 28129
28121: LD_INT 5
28123: DOUBLE
28124: EQUAL
28125: IFTRUE 28129
28127: GO 28140
28129: POP
// p := 6 ; b_breastwork , b_bunker :
28130: LD_ADDR_VAR 0 7
28134: PUSH
28135: LD_INT 6
28137: ST_TO_ADDR
28138: GO 28166
28140: LD_INT 31
28142: DOUBLE
28143: EQUAL
28144: IFTRUE 28154
28146: LD_INT 32
28148: DOUBLE
28149: EQUAL
28150: IFTRUE 28154
28152: GO 28165
28154: POP
// p := 1 ; end ;
28155: LD_ADDR_VAR 0 7
28159: PUSH
28160: LD_INT 1
28162: ST_TO_ADDR
28163: GO 28166
28165: POP
// if UnitsInside ( b ) < p then
28166: LD_VAR 0 6
28170: PPUSH
28171: CALL_OW 313
28175: PUSH
28176: LD_VAR 0 7
28180: LESS
28181: IFFALSE 28235
// begin ComEnterUnit ( un , b ) ;
28183: LD_VAR 0 1
28187: PPUSH
28188: LD_VAR 0 6
28192: PPUSH
28193: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
28197: LD_VAR 0 6
28201: PPUSH
28202: CALL_OW 266
28206: PUSH
28207: LD_INT 4
28209: PUSH
28210: LD_INT 5
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: IN
28217: IFFALSE 28231
// AddComChangeProfession ( un , class_soldier ) ;
28219: LD_VAR 0 1
28223: PPUSH
28224: LD_INT 1
28226: PPUSH
28227: CALL_OW 183
// exit ;
28231: POP
28232: POP
28233: GO 28239
// end ; end ;
28235: GO 28102
28237: POP
28238: POP
// end ; end ;
28239: PPOPN 8
28241: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
28242: LD_INT 0
28244: PPUSH
28245: PPUSH
28246: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
28247: LD_VAR 0 2
28251: PPUSH
28252: CALL_OW 255
28256: PUSH
28257: LD_INT 3
28259: EQUAL
28260: PUSH
28261: LD_VAR 0 2
28265: PPUSH
28266: CALL_OW 257
28270: PUSH
28271: LD_INT 1
28273: EQUAL
28274: AND
28275: PUSH
28276: LD_VAR 0 2
28280: PUSH
28281: LD_EXP 59
28285: IN
28286: NOT
28287: AND
28288: IFFALSE 28601
// begin ComMoveToArea ( un , ruMainBase ) ;
28290: LD_VAR 0 2
28294: PPUSH
28295: LD_INT 10
28297: PPUSH
28298: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
28302: LD_INT 35
28304: PPUSH
28305: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
28309: LD_VAR 0 2
28313: PPUSH
28314: CALL_OW 302
28318: NOT
28319: PUSH
28320: LD_VAR 0 2
28324: PPUSH
28325: LD_INT 10
28327: PPUSH
28328: CALL_OW 308
28332: OR
28333: IFFALSE 28302
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
28335: LD_ADDR_EXP 59
28339: PUSH
28340: LD_EXP 59
28344: PPUSH
28345: LD_EXP 59
28349: PUSH
28350: LD_INT 1
28352: PLUS
28353: PPUSH
28354: LD_VAR 0 2
28358: PPUSH
28359: CALL_OW 1
28363: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28364: LD_ADDR_VAR 0 4
28368: PUSH
28369: LD_INT 10
28371: PPUSH
28372: LD_INT 22
28374: PUSH
28375: LD_INT 3
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 50
28384: PUSH
28385: EMPTY
28386: LIST
28387: PUSH
28388: LD_INT 2
28390: PUSH
28391: LD_INT 30
28393: PUSH
28394: LD_INT 4
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 30
28403: PUSH
28404: LD_INT 5
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 30
28413: PUSH
28414: LD_INT 32
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 30
28423: PUSH
28424: LD_INT 31
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: LIST
28442: PPUSH
28443: CALL_OW 70
28447: ST_TO_ADDR
// if not tmp then
28448: LD_VAR 0 4
28452: NOT
28453: IFFALSE 28472
// begin ComMoveXY ( un , 83 , 133 ) ;
28455: LD_VAR 0 2
28459: PPUSH
28460: LD_INT 83
28462: PPUSH
28463: LD_INT 133
28465: PPUSH
28466: CALL_OW 111
// exit ;
28470: GO 28850
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28472: LD_ADDR_VAR 0 5
28476: PUSH
28477: LD_VAR 0 2
28481: PPUSH
28482: LD_VAR 0 4
28486: PPUSH
28487: LD_INT 1
28489: PPUSH
28490: LD_INT 1
28492: PPUSH
28493: CALL 34977 0 4
28497: PUSH
28498: FOR_IN
28499: IFFALSE 28599
// begin case GetBType ( b ) of b_armoury , b_barracks :
28501: LD_VAR 0 5
28505: PPUSH
28506: CALL_OW 266
28510: PUSH
28511: LD_INT 4
28513: DOUBLE
28514: EQUAL
28515: IFTRUE 28525
28517: LD_INT 5
28519: DOUBLE
28520: EQUAL
28521: IFTRUE 28525
28523: GO 28536
28525: POP
// p := 6 ; b_breastwork , b_bunker :
28526: LD_ADDR_VAR 0 3
28530: PUSH
28531: LD_INT 6
28533: ST_TO_ADDR
28534: GO 28562
28536: LD_INT 31
28538: DOUBLE
28539: EQUAL
28540: IFTRUE 28550
28542: LD_INT 32
28544: DOUBLE
28545: EQUAL
28546: IFTRUE 28550
28548: GO 28561
28550: POP
// p := 1 ; end ;
28551: LD_ADDR_VAR 0 3
28555: PUSH
28556: LD_INT 1
28558: ST_TO_ADDR
28559: GO 28562
28561: POP
// if UnitsInside ( b ) < p then
28562: LD_VAR 0 5
28566: PPUSH
28567: CALL_OW 313
28571: PUSH
28572: LD_VAR 0 3
28576: LESS
28577: IFFALSE 28597
// begin ComEnterUnit ( un , b ) ;
28579: LD_VAR 0 2
28583: PPUSH
28584: LD_VAR 0 5
28588: PPUSH
28589: CALL_OW 120
// exit ;
28593: POP
28594: POP
28595: GO 28850
// end ; end ;
28597: GO 28498
28599: POP
28600: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
28601: LD_VAR 0 2
28605: PUSH
28606: LD_EXP 59
28610: IN
28611: PUSH
28612: LD_VAR 0 2
28616: PPUSH
28617: CALL_OW 257
28621: PUSH
28622: LD_INT 1
28624: EQUAL
28625: AND
28626: IFFALSE 28850
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28628: LD_ADDR_VAR 0 4
28632: PUSH
28633: LD_INT 10
28635: PPUSH
28636: LD_INT 22
28638: PUSH
28639: LD_INT 3
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 50
28648: PUSH
28649: EMPTY
28650: LIST
28651: PUSH
28652: LD_INT 2
28654: PUSH
28655: LD_INT 30
28657: PUSH
28658: LD_INT 4
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 30
28667: PUSH
28668: LD_INT 5
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 30
28677: PUSH
28678: LD_INT 32
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 30
28687: PUSH
28688: LD_INT 31
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: LIST
28706: PPUSH
28707: CALL_OW 70
28711: ST_TO_ADDR
// if not tmp then
28712: LD_VAR 0 4
28716: NOT
28717: IFFALSE 28721
// exit ;
28719: GO 28850
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
28721: LD_ADDR_VAR 0 5
28725: PUSH
28726: LD_VAR 0 2
28730: PPUSH
28731: LD_VAR 0 4
28735: PPUSH
28736: LD_INT 1
28738: PPUSH
28739: LD_INT 1
28741: PPUSH
28742: CALL 34977 0 4
28746: PUSH
28747: FOR_IN
28748: IFFALSE 28848
// begin case GetBType ( b ) of b_armoury , b_barracks :
28750: LD_VAR 0 5
28754: PPUSH
28755: CALL_OW 266
28759: PUSH
28760: LD_INT 4
28762: DOUBLE
28763: EQUAL
28764: IFTRUE 28774
28766: LD_INT 5
28768: DOUBLE
28769: EQUAL
28770: IFTRUE 28774
28772: GO 28785
28774: POP
// p := 6 ; b_breastwork , b_bunker :
28775: LD_ADDR_VAR 0 3
28779: PUSH
28780: LD_INT 6
28782: ST_TO_ADDR
28783: GO 28811
28785: LD_INT 31
28787: DOUBLE
28788: EQUAL
28789: IFTRUE 28799
28791: LD_INT 32
28793: DOUBLE
28794: EQUAL
28795: IFTRUE 28799
28797: GO 28810
28799: POP
// p := 1 ; end ;
28800: LD_ADDR_VAR 0 3
28804: PUSH
28805: LD_INT 1
28807: ST_TO_ADDR
28808: GO 28811
28810: POP
// if UnitsInside ( b ) < p then
28811: LD_VAR 0 5
28815: PPUSH
28816: CALL_OW 313
28820: PUSH
28821: LD_VAR 0 3
28825: LESS
28826: IFFALSE 28846
// begin ComEnterUnit ( un , b ) ;
28828: LD_VAR 0 2
28832: PPUSH
28833: LD_VAR 0 5
28837: PPUSH
28838: CALL_OW 120
// exit ;
28842: POP
28843: POP
28844: GO 28850
// end ; end ;
28846: GO 28747
28848: POP
28849: POP
// end ; end ;
28850: PPOPN 5
28852: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
28853: LD_VAR 0 1
28857: PUSH
28858: LD_INT 2
28860: EQUAL
28861: PUSH
28862: LD_VAR 0 2
28866: PUSH
28867: LD_INT 5
28869: PUSH
28870: LD_INT 8
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: IN
28877: AND
28878: IFFALSE 28887
// YouLost ( FriendlyFire ) ;
28880: LD_STRING FriendlyFire
28882: PPUSH
28883: CALL_OW 104
// end ;
28887: PPOPN 2
28889: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
28890: LD_VAR 0 1
28894: PPUSH
28895: CALL_OW 255
28899: PUSH
28900: LD_INT 8
28902: EQUAL
28903: PUSH
28904: LD_VAR 0 1
28908: PPUSH
28909: CALL_OW 266
28913: PUSH
28914: LD_INT 5
28916: EQUAL
28917: AND
28918: IFFALSE 28932
// SetClass ( unit , class_mortar ) ;
28920: LD_VAR 0 2
28924: PPUSH
28925: LD_INT 8
28927: PPUSH
28928: CALL_OW 336
// end ; end_of_file
28932: PPOPN 2
28934: END
// every 0 0$35 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 20 , 18 , 16 , 12 ] [ Difficulty ] do
28935: LD_INT 6
28937: PPUSH
28938: LD_INT 1
28940: PPUSH
28941: CALL_OW 287
28945: PUSH
28946: LD_INT 20
28948: PUSH
28949: LD_INT 18
28951: PUSH
28952: LD_INT 16
28954: PUSH
28955: LD_INT 12
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: PUSH
28964: LD_OWVAR 67
28968: ARRAY
28969: LESS
28970: IFFALSE 28997
28972: GO 28974
28974: DISABLE
// begin enable ;
28975: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
28976: LD_INT 1
28978: PPUSH
28979: LD_INT 5
28981: PPUSH
28982: CALL_OW 12
28986: PPUSH
28987: LD_INT 6
28989: PPUSH
28990: LD_INT 1
28992: PPUSH
28993: CALL_OW 55
// end ;
28997: END
// every 0 0$25 trigger Prob ( 50 ) and tick < [ 28 28$00 , 27 27$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] and GetResourceArea ( southCrates , mat_cans ) < 10 do
28998: LD_INT 50
29000: PPUSH
29001: CALL_OW 13
29005: PUSH
29006: LD_OWVAR 1
29010: PUSH
29011: LD_INT 58800
29013: PUSH
29014: LD_INT 56700
29016: PUSH
29017: LD_INT 54600
29019: PUSH
29020: LD_INT 52500
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: PUSH
29029: LD_OWVAR 67
29033: ARRAY
29034: LESS
29035: AND
29036: PUSH
29037: LD_INT 21
29039: PPUSH
29040: LD_INT 1
29042: PPUSH
29043: CALL_OW 287
29047: PUSH
29048: LD_INT 10
29050: LESS
29051: AND
29052: IFFALSE 29094
29054: GO 29056
29056: DISABLE
// begin enable ;
29057: ENABLE
// wait ( rand ( 0 0$1 , 0 0$10 ) ) ;
29058: LD_INT 35
29060: PPUSH
29061: LD_INT 350
29063: PPUSH
29064: CALL_OW 12
29068: PPUSH
29069: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , southCrates , true ) ;
29073: LD_INT 1
29075: PPUSH
29076: LD_INT 5
29078: PPUSH
29079: CALL_OW 12
29083: PPUSH
29084: LD_INT 21
29086: PPUSH
29087: LD_INT 1
29089: PPUSH
29090: CALL_OW 55
// end ; end_of_file
29094: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
29095: LD_EXP 18
29099: PUSH
29100: LD_EXP 20
29104: AND
29105: PUSH
29106: LD_EXP 17
29110: PUSH
29111: LD_EXP 19
29115: AND
29116: OR
29117: IFFALSE 29436
29119: GO 29121
29121: DISABLE
// begin enable ;
29122: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
29123: LD_EXP 18
29127: PUSH
29128: LD_EXP 20
29132: AND
29133: PUSH
29134: LD_EXP 17
29138: PUSH
29139: LD_EXP 19
29143: AND
29144: AND
29145: IFFALSE 29282
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29147: LD_ADDR_OWVAR 47
29151: PUSH
29152: LD_STRING #X106-1a
29154: PUSH
29155: LD_EXP 21
29159: PUSH
29160: LD_INT 16
29162: PPUSH
29163: LD_INT 22
29165: PUSH
29166: LD_INT 2
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 21
29175: PUSH
29176: LD_INT 2
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 33
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 58
29195: PUSH
29196: EMPTY
29197: LIST
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: PPUSH
29205: CALL_OW 70
29209: MINUS
29210: PPUSH
29211: CALL 69058 0 1
29215: PUSH
29216: LD_STRING #X106-3a
29218: PUSH
29219: LD_EXP 20
29223: PUSH
29224: LD_STRING #X106-1
29226: PUSH
29227: LD_EXP 51
29231: PUSH
29232: LD_INT 0
29234: PLUS
29235: PUSH
29236: LD_EXP 51
29240: PPUSH
29241: LD_INT 55
29243: PUSH
29244: EMPTY
29245: LIST
29246: PPUSH
29247: CALL_OW 72
29251: PUSH
29252: LD_INT 0
29254: PLUS
29255: MINUS
29256: PPUSH
29257: CALL 69058 0 1
29261: PUSH
29262: LD_STRING #X106-3
29264: PUSH
29265: LD_EXP 19
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: ST_TO_ADDR
// end else
29280: GO 29436
// if omarWantVehicles and omarWaitingForVehiclesTimer then
29282: LD_EXP 18
29286: PUSH
29287: LD_EXP 20
29291: AND
29292: IFFALSE 29379
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
29294: LD_ADDR_OWVAR 47
29298: PUSH
29299: LD_STRING #X106-1a
29301: PUSH
29302: LD_EXP 21
29306: PUSH
29307: LD_INT 16
29309: PPUSH
29310: LD_INT 22
29312: PUSH
29313: LD_INT 2
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 21
29322: PUSH
29323: LD_INT 2
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 33
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 58
29342: PUSH
29343: EMPTY
29344: LIST
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: PPUSH
29352: CALL_OW 70
29356: MINUS
29357: PPUSH
29358: CALL 69058 0 1
29362: PUSH
29363: LD_STRING #X106-3a
29365: PUSH
29366: LD_EXP 20
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: ST_TO_ADDR
// end else
29377: GO 29436
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29379: LD_ADDR_OWVAR 47
29383: PUSH
29384: LD_STRING #X106-1
29386: PUSH
29387: LD_EXP 51
29391: PUSH
29392: LD_INT 0
29394: PLUS
29395: PUSH
29396: LD_EXP 51
29400: PPUSH
29401: LD_INT 55
29403: PUSH
29404: EMPTY
29405: LIST
29406: PPUSH
29407: CALL_OW 72
29411: PUSH
29412: LD_INT 0
29414: PLUS
29415: MINUS
29416: PPUSH
29417: CALL 69058 0 1
29421: PUSH
29422: LD_STRING #X106-3
29424: PUSH
29425: LD_EXP 19
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: ST_TO_ADDR
// end ; end ; end_of_file
29436: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29437: LD_INT 0
29439: PPUSH
29440: PPUSH
// if exist_mode then
29441: LD_VAR 0 2
29445: IFFALSE 29470
// unit := CreateCharacter ( prefix & ident ) else
29447: LD_ADDR_VAR 0 5
29451: PUSH
29452: LD_VAR 0 3
29456: PUSH
29457: LD_VAR 0 1
29461: STR
29462: PPUSH
29463: CALL_OW 34
29467: ST_TO_ADDR
29468: GO 29485
// unit := NewCharacter ( ident ) ;
29470: LD_ADDR_VAR 0 5
29474: PUSH
29475: LD_VAR 0 1
29479: PPUSH
29480: CALL_OW 25
29484: ST_TO_ADDR
// result := unit ;
29485: LD_ADDR_VAR 0 4
29489: PUSH
29490: LD_VAR 0 5
29494: ST_TO_ADDR
// end ;
29495: LD_VAR 0 4
29499: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29500: LD_INT 0
29502: PPUSH
29503: PPUSH
// if not side or not nation then
29504: LD_VAR 0 1
29508: NOT
29509: PUSH
29510: LD_VAR 0 2
29514: NOT
29515: OR
29516: IFFALSE 29520
// exit ;
29518: GO 30288
// case nation of nation_american :
29520: LD_VAR 0 2
29524: PUSH
29525: LD_INT 1
29527: DOUBLE
29528: EQUAL
29529: IFTRUE 29533
29531: GO 29747
29533: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29534: LD_ADDR_VAR 0 4
29538: PUSH
29539: LD_INT 35
29541: PUSH
29542: LD_INT 45
29544: PUSH
29545: LD_INT 46
29547: PUSH
29548: LD_INT 47
29550: PUSH
29551: LD_INT 82
29553: PUSH
29554: LD_INT 83
29556: PUSH
29557: LD_INT 84
29559: PUSH
29560: LD_INT 85
29562: PUSH
29563: LD_INT 86
29565: PUSH
29566: LD_INT 1
29568: PUSH
29569: LD_INT 2
29571: PUSH
29572: LD_INT 6
29574: PUSH
29575: LD_INT 15
29577: PUSH
29578: LD_INT 16
29580: PUSH
29581: LD_INT 7
29583: PUSH
29584: LD_INT 12
29586: PUSH
29587: LD_INT 13
29589: PUSH
29590: LD_INT 10
29592: PUSH
29593: LD_INT 14
29595: PUSH
29596: LD_INT 20
29598: PUSH
29599: LD_INT 21
29601: PUSH
29602: LD_INT 22
29604: PUSH
29605: LD_INT 25
29607: PUSH
29608: LD_INT 32
29610: PUSH
29611: LD_INT 27
29613: PUSH
29614: LD_INT 36
29616: PUSH
29617: LD_INT 69
29619: PUSH
29620: LD_INT 39
29622: PUSH
29623: LD_INT 34
29625: PUSH
29626: LD_INT 40
29628: PUSH
29629: LD_INT 48
29631: PUSH
29632: LD_INT 49
29634: PUSH
29635: LD_INT 50
29637: PUSH
29638: LD_INT 51
29640: PUSH
29641: LD_INT 52
29643: PUSH
29644: LD_INT 53
29646: PUSH
29647: LD_INT 54
29649: PUSH
29650: LD_INT 55
29652: PUSH
29653: LD_INT 56
29655: PUSH
29656: LD_INT 57
29658: PUSH
29659: LD_INT 58
29661: PUSH
29662: LD_INT 59
29664: PUSH
29665: LD_INT 60
29667: PUSH
29668: LD_INT 61
29670: PUSH
29671: LD_INT 62
29673: PUSH
29674: LD_INT 80
29676: PUSH
29677: LD_INT 82
29679: PUSH
29680: LD_INT 83
29682: PUSH
29683: LD_INT 84
29685: PUSH
29686: LD_INT 85
29688: PUSH
29689: LD_INT 86
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: ST_TO_ADDR
29745: GO 30212
29747: LD_INT 2
29749: DOUBLE
29750: EQUAL
29751: IFTRUE 29755
29753: GO 29981
29755: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29756: LD_ADDR_VAR 0 4
29760: PUSH
29761: LD_INT 35
29763: PUSH
29764: LD_INT 45
29766: PUSH
29767: LD_INT 46
29769: PUSH
29770: LD_INT 47
29772: PUSH
29773: LD_INT 82
29775: PUSH
29776: LD_INT 83
29778: PUSH
29779: LD_INT 84
29781: PUSH
29782: LD_INT 85
29784: PUSH
29785: LD_INT 87
29787: PUSH
29788: LD_INT 70
29790: PUSH
29791: LD_INT 1
29793: PUSH
29794: LD_INT 11
29796: PUSH
29797: LD_INT 3
29799: PUSH
29800: LD_INT 4
29802: PUSH
29803: LD_INT 5
29805: PUSH
29806: LD_INT 6
29808: PUSH
29809: LD_INT 15
29811: PUSH
29812: LD_INT 18
29814: PUSH
29815: LD_INT 7
29817: PUSH
29818: LD_INT 17
29820: PUSH
29821: LD_INT 8
29823: PUSH
29824: LD_INT 20
29826: PUSH
29827: LD_INT 21
29829: PUSH
29830: LD_INT 22
29832: PUSH
29833: LD_INT 72
29835: PUSH
29836: LD_INT 26
29838: PUSH
29839: LD_INT 69
29841: PUSH
29842: LD_INT 39
29844: PUSH
29845: LD_INT 40
29847: PUSH
29848: LD_INT 41
29850: PUSH
29851: LD_INT 42
29853: PUSH
29854: LD_INT 43
29856: PUSH
29857: LD_INT 48
29859: PUSH
29860: LD_INT 49
29862: PUSH
29863: LD_INT 50
29865: PUSH
29866: LD_INT 51
29868: PUSH
29869: LD_INT 52
29871: PUSH
29872: LD_INT 53
29874: PUSH
29875: LD_INT 54
29877: PUSH
29878: LD_INT 55
29880: PUSH
29881: LD_INT 56
29883: PUSH
29884: LD_INT 60
29886: PUSH
29887: LD_INT 61
29889: PUSH
29890: LD_INT 62
29892: PUSH
29893: LD_INT 66
29895: PUSH
29896: LD_INT 67
29898: PUSH
29899: LD_INT 68
29901: PUSH
29902: LD_INT 81
29904: PUSH
29905: LD_INT 82
29907: PUSH
29908: LD_INT 83
29910: PUSH
29911: LD_INT 84
29913: PUSH
29914: LD_INT 85
29916: PUSH
29917: LD_INT 87
29919: PUSH
29920: LD_INT 88
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: ST_TO_ADDR
29979: GO 30212
29981: LD_INT 3
29983: DOUBLE
29984: EQUAL
29985: IFTRUE 29989
29987: GO 30211
29989: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29990: LD_ADDR_VAR 0 4
29994: PUSH
29995: LD_INT 46
29997: PUSH
29998: LD_INT 47
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: LD_INT 2
30006: PUSH
30007: LD_INT 82
30009: PUSH
30010: LD_INT 83
30012: PUSH
30013: LD_INT 84
30015: PUSH
30016: LD_INT 85
30018: PUSH
30019: LD_INT 86
30021: PUSH
30022: LD_INT 11
30024: PUSH
30025: LD_INT 9
30027: PUSH
30028: LD_INT 20
30030: PUSH
30031: LD_INT 19
30033: PUSH
30034: LD_INT 21
30036: PUSH
30037: LD_INT 24
30039: PUSH
30040: LD_INT 22
30042: PUSH
30043: LD_INT 25
30045: PUSH
30046: LD_INT 28
30048: PUSH
30049: LD_INT 29
30051: PUSH
30052: LD_INT 30
30054: PUSH
30055: LD_INT 31
30057: PUSH
30058: LD_INT 37
30060: PUSH
30061: LD_INT 38
30063: PUSH
30064: LD_INT 32
30066: PUSH
30067: LD_INT 27
30069: PUSH
30070: LD_INT 33
30072: PUSH
30073: LD_INT 69
30075: PUSH
30076: LD_INT 39
30078: PUSH
30079: LD_INT 34
30081: PUSH
30082: LD_INT 40
30084: PUSH
30085: LD_INT 71
30087: PUSH
30088: LD_INT 23
30090: PUSH
30091: LD_INT 44
30093: PUSH
30094: LD_INT 48
30096: PUSH
30097: LD_INT 49
30099: PUSH
30100: LD_INT 50
30102: PUSH
30103: LD_INT 51
30105: PUSH
30106: LD_INT 52
30108: PUSH
30109: LD_INT 53
30111: PUSH
30112: LD_INT 54
30114: PUSH
30115: LD_INT 55
30117: PUSH
30118: LD_INT 56
30120: PUSH
30121: LD_INT 57
30123: PUSH
30124: LD_INT 58
30126: PUSH
30127: LD_INT 59
30129: PUSH
30130: LD_INT 63
30132: PUSH
30133: LD_INT 64
30135: PUSH
30136: LD_INT 65
30138: PUSH
30139: LD_INT 82
30141: PUSH
30142: LD_INT 83
30144: PUSH
30145: LD_INT 84
30147: PUSH
30148: LD_INT 85
30150: PUSH
30151: LD_INT 86
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: ST_TO_ADDR
30209: GO 30212
30211: POP
// if state > - 1 and state < 3 then
30212: LD_VAR 0 3
30216: PUSH
30217: LD_INT 1
30219: NEG
30220: GREATER
30221: PUSH
30222: LD_VAR 0 3
30226: PUSH
30227: LD_INT 3
30229: LESS
30230: AND
30231: IFFALSE 30288
// for i in result do
30233: LD_ADDR_VAR 0 5
30237: PUSH
30238: LD_VAR 0 4
30242: PUSH
30243: FOR_IN
30244: IFFALSE 30286
// if GetTech ( i , side ) <> state then
30246: LD_VAR 0 5
30250: PPUSH
30251: LD_VAR 0 1
30255: PPUSH
30256: CALL_OW 321
30260: PUSH
30261: LD_VAR 0 3
30265: NONEQUAL
30266: IFFALSE 30284
// result := result diff i ;
30268: LD_ADDR_VAR 0 4
30272: PUSH
30273: LD_VAR 0 4
30277: PUSH
30278: LD_VAR 0 5
30282: DIFF
30283: ST_TO_ADDR
30284: GO 30243
30286: POP
30287: POP
// end ;
30288: LD_VAR 0 4
30292: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30293: LD_INT 0
30295: PPUSH
30296: PPUSH
30297: PPUSH
// result := true ;
30298: LD_ADDR_VAR 0 3
30302: PUSH
30303: LD_INT 1
30305: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30306: LD_ADDR_VAR 0 5
30310: PUSH
30311: LD_VAR 0 2
30315: PPUSH
30316: CALL_OW 480
30320: ST_TO_ADDR
// if not tmp then
30321: LD_VAR 0 5
30325: NOT
30326: IFFALSE 30330
// exit ;
30328: GO 30379
// for i in tmp do
30330: LD_ADDR_VAR 0 4
30334: PUSH
30335: LD_VAR 0 5
30339: PUSH
30340: FOR_IN
30341: IFFALSE 30377
// if GetTech ( i , side ) <> state_researched then
30343: LD_VAR 0 4
30347: PPUSH
30348: LD_VAR 0 1
30352: PPUSH
30353: CALL_OW 321
30357: PUSH
30358: LD_INT 2
30360: NONEQUAL
30361: IFFALSE 30375
// begin result := false ;
30363: LD_ADDR_VAR 0 3
30367: PUSH
30368: LD_INT 0
30370: ST_TO_ADDR
// exit ;
30371: POP
30372: POP
30373: GO 30379
// end ;
30375: GO 30340
30377: POP
30378: POP
// end ;
30379: LD_VAR 0 3
30383: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30384: LD_INT 0
30386: PPUSH
30387: PPUSH
30388: PPUSH
30389: PPUSH
30390: PPUSH
30391: PPUSH
30392: PPUSH
30393: PPUSH
30394: PPUSH
30395: PPUSH
30396: PPUSH
30397: PPUSH
30398: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30399: LD_VAR 0 1
30403: NOT
30404: PUSH
30405: LD_VAR 0 1
30409: PPUSH
30410: CALL_OW 257
30414: PUSH
30415: LD_INT 9
30417: NONEQUAL
30418: OR
30419: IFFALSE 30423
// exit ;
30421: GO 30996
// side := GetSide ( unit ) ;
30423: LD_ADDR_VAR 0 9
30427: PUSH
30428: LD_VAR 0 1
30432: PPUSH
30433: CALL_OW 255
30437: ST_TO_ADDR
// tech_space := tech_spacanom ;
30438: LD_ADDR_VAR 0 12
30442: PUSH
30443: LD_INT 29
30445: ST_TO_ADDR
// tech_time := tech_taurad ;
30446: LD_ADDR_VAR 0 13
30450: PUSH
30451: LD_INT 28
30453: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30454: LD_ADDR_VAR 0 11
30458: PUSH
30459: LD_VAR 0 1
30463: PPUSH
30464: CALL_OW 310
30468: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30469: LD_VAR 0 11
30473: PPUSH
30474: CALL_OW 247
30478: PUSH
30479: LD_INT 2
30481: EQUAL
30482: IFFALSE 30486
// exit ;
30484: GO 30996
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30486: LD_ADDR_VAR 0 8
30490: PUSH
30491: LD_INT 81
30493: PUSH
30494: LD_VAR 0 9
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 3
30505: PUSH
30506: LD_INT 21
30508: PUSH
30509: LD_INT 3
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PPUSH
30524: CALL_OW 69
30528: ST_TO_ADDR
// if not tmp then
30529: LD_VAR 0 8
30533: NOT
30534: IFFALSE 30538
// exit ;
30536: GO 30996
// if in_unit then
30538: LD_VAR 0 11
30542: IFFALSE 30566
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30544: LD_ADDR_VAR 0 10
30548: PUSH
30549: LD_VAR 0 8
30553: PPUSH
30554: LD_VAR 0 11
30558: PPUSH
30559: CALL_OW 74
30563: ST_TO_ADDR
30564: GO 30586
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30566: LD_ADDR_VAR 0 10
30570: PUSH
30571: LD_VAR 0 8
30575: PPUSH
30576: LD_VAR 0 1
30580: PPUSH
30581: CALL_OW 74
30585: ST_TO_ADDR
// if not enemy then
30586: LD_VAR 0 10
30590: NOT
30591: IFFALSE 30595
// exit ;
30593: GO 30996
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30595: LD_VAR 0 11
30599: PUSH
30600: LD_VAR 0 11
30604: PPUSH
30605: LD_VAR 0 10
30609: PPUSH
30610: CALL_OW 296
30614: PUSH
30615: LD_INT 13
30617: GREATER
30618: AND
30619: PUSH
30620: LD_VAR 0 1
30624: PPUSH
30625: LD_VAR 0 10
30629: PPUSH
30630: CALL_OW 296
30634: PUSH
30635: LD_INT 12
30637: GREATER
30638: OR
30639: IFFALSE 30643
// exit ;
30641: GO 30996
// missile := [ 1 ] ;
30643: LD_ADDR_VAR 0 14
30647: PUSH
30648: LD_INT 1
30650: PUSH
30651: EMPTY
30652: LIST
30653: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30654: LD_VAR 0 9
30658: PPUSH
30659: LD_VAR 0 12
30663: PPUSH
30664: CALL_OW 325
30668: IFFALSE 30697
// missile := Replace ( missile , missile + 1 , 2 ) ;
30670: LD_ADDR_VAR 0 14
30674: PUSH
30675: LD_VAR 0 14
30679: PPUSH
30680: LD_VAR 0 14
30684: PUSH
30685: LD_INT 1
30687: PLUS
30688: PPUSH
30689: LD_INT 2
30691: PPUSH
30692: CALL_OW 1
30696: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30697: LD_VAR 0 9
30701: PPUSH
30702: LD_VAR 0 13
30706: PPUSH
30707: CALL_OW 325
30711: PUSH
30712: LD_VAR 0 10
30716: PPUSH
30717: CALL_OW 255
30721: PPUSH
30722: LD_VAR 0 13
30726: PPUSH
30727: CALL_OW 325
30731: NOT
30732: AND
30733: IFFALSE 30762
// missile := Replace ( missile , missile + 1 , 3 ) ;
30735: LD_ADDR_VAR 0 14
30739: PUSH
30740: LD_VAR 0 14
30744: PPUSH
30745: LD_VAR 0 14
30749: PUSH
30750: LD_INT 1
30752: PLUS
30753: PPUSH
30754: LD_INT 3
30756: PPUSH
30757: CALL_OW 1
30761: ST_TO_ADDR
// if missile < 2 then
30762: LD_VAR 0 14
30766: PUSH
30767: LD_INT 2
30769: LESS
30770: IFFALSE 30774
// exit ;
30772: GO 30996
// x := GetX ( enemy ) ;
30774: LD_ADDR_VAR 0 4
30778: PUSH
30779: LD_VAR 0 10
30783: PPUSH
30784: CALL_OW 250
30788: ST_TO_ADDR
// y := GetY ( enemy ) ;
30789: LD_ADDR_VAR 0 5
30793: PUSH
30794: LD_VAR 0 10
30798: PPUSH
30799: CALL_OW 251
30803: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30804: LD_ADDR_VAR 0 6
30808: PUSH
30809: LD_VAR 0 4
30813: PUSH
30814: LD_INT 1
30816: NEG
30817: PPUSH
30818: LD_INT 1
30820: PPUSH
30821: CALL_OW 12
30825: PLUS
30826: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30827: LD_ADDR_VAR 0 7
30831: PUSH
30832: LD_VAR 0 5
30836: PUSH
30837: LD_INT 1
30839: NEG
30840: PPUSH
30841: LD_INT 1
30843: PPUSH
30844: CALL_OW 12
30848: PLUS
30849: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30850: LD_VAR 0 6
30854: PPUSH
30855: LD_VAR 0 7
30859: PPUSH
30860: CALL_OW 488
30864: NOT
30865: IFFALSE 30887
// begin _x := x ;
30867: LD_ADDR_VAR 0 6
30871: PUSH
30872: LD_VAR 0 4
30876: ST_TO_ADDR
// _y := y ;
30877: LD_ADDR_VAR 0 7
30881: PUSH
30882: LD_VAR 0 5
30886: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30887: LD_ADDR_VAR 0 3
30891: PUSH
30892: LD_INT 1
30894: PPUSH
30895: LD_VAR 0 14
30899: PPUSH
30900: CALL_OW 12
30904: ST_TO_ADDR
// case i of 1 :
30905: LD_VAR 0 3
30909: PUSH
30910: LD_INT 1
30912: DOUBLE
30913: EQUAL
30914: IFTRUE 30918
30916: GO 30935
30918: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30919: LD_VAR 0 1
30923: PPUSH
30924: LD_VAR 0 10
30928: PPUSH
30929: CALL_OW 115
30933: GO 30996
30935: LD_INT 2
30937: DOUBLE
30938: EQUAL
30939: IFTRUE 30943
30941: GO 30965
30943: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30944: LD_VAR 0 1
30948: PPUSH
30949: LD_VAR 0 6
30953: PPUSH
30954: LD_VAR 0 7
30958: PPUSH
30959: CALL_OW 153
30963: GO 30996
30965: LD_INT 3
30967: DOUBLE
30968: EQUAL
30969: IFTRUE 30973
30971: GO 30995
30973: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30974: LD_VAR 0 1
30978: PPUSH
30979: LD_VAR 0 6
30983: PPUSH
30984: LD_VAR 0 7
30988: PPUSH
30989: CALL_OW 154
30993: GO 30996
30995: POP
// end ;
30996: LD_VAR 0 2
31000: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31001: LD_INT 0
31003: PPUSH
31004: PPUSH
31005: PPUSH
31006: PPUSH
31007: PPUSH
31008: PPUSH
// if not unit or not building then
31009: LD_VAR 0 1
31013: NOT
31014: PUSH
31015: LD_VAR 0 2
31019: NOT
31020: OR
31021: IFFALSE 31025
// exit ;
31023: GO 31183
// x := GetX ( building ) ;
31025: LD_ADDR_VAR 0 5
31029: PUSH
31030: LD_VAR 0 2
31034: PPUSH
31035: CALL_OW 250
31039: ST_TO_ADDR
// y := GetY ( building ) ;
31040: LD_ADDR_VAR 0 6
31044: PUSH
31045: LD_VAR 0 2
31049: PPUSH
31050: CALL_OW 251
31054: ST_TO_ADDR
// for i = 0 to 5 do
31055: LD_ADDR_VAR 0 4
31059: PUSH
31060: DOUBLE
31061: LD_INT 0
31063: DEC
31064: ST_TO_ADDR
31065: LD_INT 5
31067: PUSH
31068: FOR_TO
31069: IFFALSE 31181
// begin _x := ShiftX ( x , i , 3 ) ;
31071: LD_ADDR_VAR 0 7
31075: PUSH
31076: LD_VAR 0 5
31080: PPUSH
31081: LD_VAR 0 4
31085: PPUSH
31086: LD_INT 3
31088: PPUSH
31089: CALL_OW 272
31093: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31094: LD_ADDR_VAR 0 8
31098: PUSH
31099: LD_VAR 0 6
31103: PPUSH
31104: LD_VAR 0 4
31108: PPUSH
31109: LD_INT 3
31111: PPUSH
31112: CALL_OW 273
31116: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31117: LD_VAR 0 7
31121: PPUSH
31122: LD_VAR 0 8
31126: PPUSH
31127: CALL_OW 488
31131: NOT
31132: IFFALSE 31136
// continue ;
31134: GO 31068
// if HexInfo ( _x , _y ) = 0 then
31136: LD_VAR 0 7
31140: PPUSH
31141: LD_VAR 0 8
31145: PPUSH
31146: CALL_OW 428
31150: PUSH
31151: LD_INT 0
31153: EQUAL
31154: IFFALSE 31179
// begin ComMoveXY ( unit , _x , _y ) ;
31156: LD_VAR 0 1
31160: PPUSH
31161: LD_VAR 0 7
31165: PPUSH
31166: LD_VAR 0 8
31170: PPUSH
31171: CALL_OW 111
// exit ;
31175: POP
31176: POP
31177: GO 31183
// end ; end ;
31179: GO 31068
31181: POP
31182: POP
// end ;
31183: LD_VAR 0 3
31187: RET
// export function ScanBase ( side , base_area ) ; begin
31188: LD_INT 0
31190: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31191: LD_ADDR_VAR 0 3
31195: PUSH
31196: LD_VAR 0 2
31200: PPUSH
31201: LD_INT 81
31203: PUSH
31204: LD_VAR 0 1
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PPUSH
31213: CALL_OW 70
31217: ST_TO_ADDR
// end ;
31218: LD_VAR 0 3
31222: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31223: LD_INT 0
31225: PPUSH
31226: PPUSH
31227: PPUSH
31228: PPUSH
// result := false ;
31229: LD_ADDR_VAR 0 2
31233: PUSH
31234: LD_INT 0
31236: ST_TO_ADDR
// side := GetSide ( unit ) ;
31237: LD_ADDR_VAR 0 3
31241: PUSH
31242: LD_VAR 0 1
31246: PPUSH
31247: CALL_OW 255
31251: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31252: LD_ADDR_VAR 0 4
31256: PUSH
31257: LD_VAR 0 1
31261: PPUSH
31262: CALL_OW 248
31266: ST_TO_ADDR
// case nat of 1 :
31267: LD_VAR 0 4
31271: PUSH
31272: LD_INT 1
31274: DOUBLE
31275: EQUAL
31276: IFTRUE 31280
31278: GO 31291
31280: POP
// tech := tech_lassight ; 2 :
31281: LD_ADDR_VAR 0 5
31285: PUSH
31286: LD_INT 12
31288: ST_TO_ADDR
31289: GO 31330
31291: LD_INT 2
31293: DOUBLE
31294: EQUAL
31295: IFTRUE 31299
31297: GO 31310
31299: POP
// tech := tech_mortar ; 3 :
31300: LD_ADDR_VAR 0 5
31304: PUSH
31305: LD_INT 41
31307: ST_TO_ADDR
31308: GO 31330
31310: LD_INT 3
31312: DOUBLE
31313: EQUAL
31314: IFTRUE 31318
31316: GO 31329
31318: POP
// tech := tech_bazooka ; end ;
31319: LD_ADDR_VAR 0 5
31323: PUSH
31324: LD_INT 44
31326: ST_TO_ADDR
31327: GO 31330
31329: POP
// if Researched ( side , tech ) then
31330: LD_VAR 0 3
31334: PPUSH
31335: LD_VAR 0 5
31339: PPUSH
31340: CALL_OW 325
31344: IFFALSE 31371
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31346: LD_ADDR_VAR 0 2
31350: PUSH
31351: LD_INT 5
31353: PUSH
31354: LD_INT 8
31356: PUSH
31357: LD_INT 9
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: PUSH
31365: LD_VAR 0 4
31369: ARRAY
31370: ST_TO_ADDR
// end ;
31371: LD_VAR 0 2
31375: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31376: LD_INT 0
31378: PPUSH
31379: PPUSH
31380: PPUSH
// if not mines then
31381: LD_VAR 0 2
31385: NOT
31386: IFFALSE 31390
// exit ;
31388: GO 31534
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31390: LD_ADDR_VAR 0 5
31394: PUSH
31395: LD_INT 81
31397: PUSH
31398: LD_VAR 0 1
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 3
31409: PUSH
31410: LD_INT 21
31412: PUSH
31413: LD_INT 3
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PPUSH
31428: CALL_OW 69
31432: ST_TO_ADDR
// for i in mines do
31433: LD_ADDR_VAR 0 4
31437: PUSH
31438: LD_VAR 0 2
31442: PUSH
31443: FOR_IN
31444: IFFALSE 31532
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31446: LD_VAR 0 4
31450: PUSH
31451: LD_INT 1
31453: ARRAY
31454: PPUSH
31455: LD_VAR 0 4
31459: PUSH
31460: LD_INT 2
31462: ARRAY
31463: PPUSH
31464: CALL_OW 458
31468: NOT
31469: IFFALSE 31473
// continue ;
31471: GO 31443
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31473: LD_VAR 0 4
31477: PUSH
31478: LD_INT 1
31480: ARRAY
31481: PPUSH
31482: LD_VAR 0 4
31486: PUSH
31487: LD_INT 2
31489: ARRAY
31490: PPUSH
31491: CALL_OW 428
31495: PUSH
31496: LD_VAR 0 5
31500: IN
31501: IFFALSE 31530
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31503: LD_VAR 0 4
31507: PUSH
31508: LD_INT 1
31510: ARRAY
31511: PPUSH
31512: LD_VAR 0 4
31516: PUSH
31517: LD_INT 2
31519: ARRAY
31520: PPUSH
31521: LD_VAR 0 1
31525: PPUSH
31526: CALL_OW 456
// end ;
31530: GO 31443
31532: POP
31533: POP
// end ;
31534: LD_VAR 0 3
31538: RET
// export function Count ( array ) ; begin
31539: LD_INT 0
31541: PPUSH
// result := array + 0 ;
31542: LD_ADDR_VAR 0 2
31546: PUSH
31547: LD_VAR 0 1
31551: PUSH
31552: LD_INT 0
31554: PLUS
31555: ST_TO_ADDR
// end ;
31556: LD_VAR 0 2
31560: RET
// export function IsEmpty ( building ) ; begin
31561: LD_INT 0
31563: PPUSH
// if not building then
31564: LD_VAR 0 1
31568: NOT
31569: IFFALSE 31573
// exit ;
31571: GO 31616
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31573: LD_ADDR_VAR 0 2
31577: PUSH
31578: LD_VAR 0 1
31582: PUSH
31583: LD_INT 22
31585: PUSH
31586: LD_VAR 0 1
31590: PPUSH
31591: CALL_OW 255
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 58
31602: PUSH
31603: EMPTY
31604: LIST
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PPUSH
31610: CALL_OW 69
31614: IN
31615: ST_TO_ADDR
// end ;
31616: LD_VAR 0 2
31620: RET
// export function IsNotFull ( building ) ; var places ; begin
31621: LD_INT 0
31623: PPUSH
31624: PPUSH
// if not building then
31625: LD_VAR 0 1
31629: NOT
31630: IFFALSE 31634
// exit ;
31632: GO 31805
// result := false ;
31634: LD_ADDR_VAR 0 2
31638: PUSH
31639: LD_INT 0
31641: ST_TO_ADDR
// places := 0 ;
31642: LD_ADDR_VAR 0 3
31646: PUSH
31647: LD_INT 0
31649: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
31650: LD_VAR 0 1
31654: PPUSH
31655: CALL_OW 266
31659: PUSH
31660: LD_INT 0
31662: DOUBLE
31663: EQUAL
31664: IFTRUE 31722
31666: LD_INT 1
31668: DOUBLE
31669: EQUAL
31670: IFTRUE 31722
31672: LD_INT 6
31674: DOUBLE
31675: EQUAL
31676: IFTRUE 31722
31678: LD_INT 7
31680: DOUBLE
31681: EQUAL
31682: IFTRUE 31722
31684: LD_INT 8
31686: DOUBLE
31687: EQUAL
31688: IFTRUE 31722
31690: LD_INT 4
31692: DOUBLE
31693: EQUAL
31694: IFTRUE 31722
31696: LD_INT 5
31698: DOUBLE
31699: EQUAL
31700: IFTRUE 31722
31702: LD_INT 2
31704: DOUBLE
31705: EQUAL
31706: IFTRUE 31722
31708: LD_INT 3
31710: DOUBLE
31711: EQUAL
31712: IFTRUE 31722
31714: LD_INT 35
31716: DOUBLE
31717: EQUAL
31718: IFTRUE 31722
31720: GO 31733
31722: POP
// places := 6 ; b_bunker , b_breastwork :
31723: LD_ADDR_VAR 0 3
31727: PUSH
31728: LD_INT 6
31730: ST_TO_ADDR
31731: GO 31778
31733: LD_INT 32
31735: DOUBLE
31736: EQUAL
31737: IFTRUE 31747
31739: LD_INT 31
31741: DOUBLE
31742: EQUAL
31743: IFTRUE 31747
31745: GO 31758
31747: POP
// places := 1 ; b_control_tower :
31748: LD_ADDR_VAR 0 3
31752: PUSH
31753: LD_INT 1
31755: ST_TO_ADDR
31756: GO 31778
31758: LD_INT 36
31760: DOUBLE
31761: EQUAL
31762: IFTRUE 31766
31764: GO 31777
31766: POP
// places := 3 ; end ;
31767: LD_ADDR_VAR 0 3
31771: PUSH
31772: LD_INT 3
31774: ST_TO_ADDR
31775: GO 31778
31777: POP
// if places then
31778: LD_VAR 0 3
31782: IFFALSE 31805
// result := UnitsInside ( building ) < places ;
31784: LD_ADDR_VAR 0 2
31788: PUSH
31789: LD_VAR 0 1
31793: PPUSH
31794: CALL_OW 313
31798: PUSH
31799: LD_VAR 0 3
31803: LESS
31804: ST_TO_ADDR
// end ;
31805: LD_VAR 0 2
31809: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31810: LD_INT 0
31812: PPUSH
31813: PPUSH
31814: PPUSH
31815: PPUSH
// tmp := [ ] ;
31816: LD_ADDR_VAR 0 3
31820: PUSH
31821: EMPTY
31822: ST_TO_ADDR
// list := [ ] ;
31823: LD_ADDR_VAR 0 5
31827: PUSH
31828: EMPTY
31829: ST_TO_ADDR
// for i = 16 to 25 do
31830: LD_ADDR_VAR 0 4
31834: PUSH
31835: DOUBLE
31836: LD_INT 16
31838: DEC
31839: ST_TO_ADDR
31840: LD_INT 25
31842: PUSH
31843: FOR_TO
31844: IFFALSE 31917
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31846: LD_ADDR_VAR 0 3
31850: PUSH
31851: LD_VAR 0 3
31855: PUSH
31856: LD_INT 22
31858: PUSH
31859: LD_VAR 0 1
31863: PPUSH
31864: CALL_OW 255
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 91
31875: PUSH
31876: LD_VAR 0 1
31880: PUSH
31881: LD_INT 6
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 30
31891: PUSH
31892: LD_VAR 0 4
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: LIST
31905: PUSH
31906: EMPTY
31907: LIST
31908: PPUSH
31909: CALL_OW 69
31913: ADD
31914: ST_TO_ADDR
31915: GO 31843
31917: POP
31918: POP
// for i = 1 to tmp do
31919: LD_ADDR_VAR 0 4
31923: PUSH
31924: DOUBLE
31925: LD_INT 1
31927: DEC
31928: ST_TO_ADDR
31929: LD_VAR 0 3
31933: PUSH
31934: FOR_TO
31935: IFFALSE 32023
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31937: LD_ADDR_VAR 0 5
31941: PUSH
31942: LD_VAR 0 5
31946: PUSH
31947: LD_VAR 0 3
31951: PUSH
31952: LD_VAR 0 4
31956: ARRAY
31957: PPUSH
31958: CALL_OW 266
31962: PUSH
31963: LD_VAR 0 3
31967: PUSH
31968: LD_VAR 0 4
31972: ARRAY
31973: PPUSH
31974: CALL_OW 250
31978: PUSH
31979: LD_VAR 0 3
31983: PUSH
31984: LD_VAR 0 4
31988: ARRAY
31989: PPUSH
31990: CALL_OW 251
31994: PUSH
31995: LD_VAR 0 3
31999: PUSH
32000: LD_VAR 0 4
32004: ARRAY
32005: PPUSH
32006: CALL_OW 254
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: PUSH
32017: EMPTY
32018: LIST
32019: ADD
32020: ST_TO_ADDR
32021: GO 31934
32023: POP
32024: POP
// result := list ;
32025: LD_ADDR_VAR 0 2
32029: PUSH
32030: LD_VAR 0 5
32034: ST_TO_ADDR
// end ;
32035: LD_VAR 0 2
32039: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32040: LD_INT 0
32042: PPUSH
32043: PPUSH
32044: PPUSH
32045: PPUSH
32046: PPUSH
32047: PPUSH
32048: PPUSH
// if not factory then
32049: LD_VAR 0 1
32053: NOT
32054: IFFALSE 32058
// exit ;
32056: GO 32651
// if control = control_apeman then
32058: LD_VAR 0 4
32062: PUSH
32063: LD_INT 5
32065: EQUAL
32066: IFFALSE 32175
// begin tmp := UnitsInside ( factory ) ;
32068: LD_ADDR_VAR 0 8
32072: PUSH
32073: LD_VAR 0 1
32077: PPUSH
32078: CALL_OW 313
32082: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32083: LD_VAR 0 8
32087: PPUSH
32088: LD_INT 25
32090: PUSH
32091: LD_INT 12
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PPUSH
32098: CALL_OW 72
32102: NOT
32103: IFFALSE 32113
// control := control_manual ;
32105: LD_ADDR_VAR 0 4
32109: PUSH
32110: LD_INT 1
32112: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32113: LD_ADDR_VAR 0 8
32117: PUSH
32118: LD_VAR 0 1
32122: PPUSH
32123: CALL 31810 0 1
32127: ST_TO_ADDR
// if tmp then
32128: LD_VAR 0 8
32132: IFFALSE 32175
// begin for i in tmp do
32134: LD_ADDR_VAR 0 7
32138: PUSH
32139: LD_VAR 0 8
32143: PUSH
32144: FOR_IN
32145: IFFALSE 32173
// if i [ 1 ] = b_ext_radio then
32147: LD_VAR 0 7
32151: PUSH
32152: LD_INT 1
32154: ARRAY
32155: PUSH
32156: LD_INT 22
32158: EQUAL
32159: IFFALSE 32171
// begin control := control_remote ;
32161: LD_ADDR_VAR 0 4
32165: PUSH
32166: LD_INT 2
32168: ST_TO_ADDR
// break ;
32169: GO 32173
// end ;
32171: GO 32144
32173: POP
32174: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32175: LD_VAR 0 1
32179: PPUSH
32180: LD_VAR 0 2
32184: PPUSH
32185: LD_VAR 0 3
32189: PPUSH
32190: LD_VAR 0 4
32194: PPUSH
32195: LD_VAR 0 5
32199: PPUSH
32200: CALL_OW 448
32204: IFFALSE 32239
// begin result := [ chassis , engine , control , weapon ] ;
32206: LD_ADDR_VAR 0 6
32210: PUSH
32211: LD_VAR 0 2
32215: PUSH
32216: LD_VAR 0 3
32220: PUSH
32221: LD_VAR 0 4
32225: PUSH
32226: LD_VAR 0 5
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: ST_TO_ADDR
// exit ;
32237: GO 32651
// end ; _chassis := AvailableChassisList ( factory ) ;
32239: LD_ADDR_VAR 0 9
32243: PUSH
32244: LD_VAR 0 1
32248: PPUSH
32249: CALL_OW 475
32253: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32254: LD_ADDR_VAR 0 11
32258: PUSH
32259: LD_VAR 0 1
32263: PPUSH
32264: CALL_OW 476
32268: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32269: LD_ADDR_VAR 0 12
32273: PUSH
32274: LD_VAR 0 1
32278: PPUSH
32279: CALL_OW 477
32283: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32284: LD_ADDR_VAR 0 10
32288: PUSH
32289: LD_VAR 0 1
32293: PPUSH
32294: CALL_OW 478
32298: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32299: LD_VAR 0 9
32303: NOT
32304: PUSH
32305: LD_VAR 0 11
32309: NOT
32310: OR
32311: PUSH
32312: LD_VAR 0 12
32316: NOT
32317: OR
32318: PUSH
32319: LD_VAR 0 10
32323: NOT
32324: OR
32325: IFFALSE 32360
// begin result := [ chassis , engine , control , weapon ] ;
32327: LD_ADDR_VAR 0 6
32331: PUSH
32332: LD_VAR 0 2
32336: PUSH
32337: LD_VAR 0 3
32341: PUSH
32342: LD_VAR 0 4
32346: PUSH
32347: LD_VAR 0 5
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: ST_TO_ADDR
// exit ;
32358: GO 32651
// end ; if not chassis in _chassis then
32360: LD_VAR 0 2
32364: PUSH
32365: LD_VAR 0 9
32369: IN
32370: NOT
32371: IFFALSE 32397
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32373: LD_ADDR_VAR 0 2
32377: PUSH
32378: LD_VAR 0 9
32382: PUSH
32383: LD_INT 1
32385: PPUSH
32386: LD_VAR 0 9
32390: PPUSH
32391: CALL_OW 12
32395: ARRAY
32396: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32397: LD_VAR 0 2
32401: PPUSH
32402: LD_VAR 0 3
32406: PPUSH
32407: CALL 32656 0 2
32411: NOT
32412: IFFALSE 32471
// repeat engine := _engine [ 1 ] ;
32414: LD_ADDR_VAR 0 3
32418: PUSH
32419: LD_VAR 0 11
32423: PUSH
32424: LD_INT 1
32426: ARRAY
32427: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32428: LD_ADDR_VAR 0 11
32432: PUSH
32433: LD_VAR 0 11
32437: PPUSH
32438: LD_INT 1
32440: PPUSH
32441: CALL_OW 3
32445: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32446: LD_VAR 0 2
32450: PPUSH
32451: LD_VAR 0 3
32455: PPUSH
32456: CALL 32656 0 2
32460: PUSH
32461: LD_VAR 0 11
32465: PUSH
32466: EMPTY
32467: EQUAL
32468: OR
32469: IFFALSE 32414
// if not control in _control then
32471: LD_VAR 0 4
32475: PUSH
32476: LD_VAR 0 12
32480: IN
32481: NOT
32482: IFFALSE 32508
// control := _control [ rand ( 1 , _control ) ] ;
32484: LD_ADDR_VAR 0 4
32488: PUSH
32489: LD_VAR 0 12
32493: PUSH
32494: LD_INT 1
32496: PPUSH
32497: LD_VAR 0 12
32501: PPUSH
32502: CALL_OW 12
32506: ARRAY
32507: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32508: LD_VAR 0 2
32512: PPUSH
32513: LD_VAR 0 5
32517: PPUSH
32518: CALL 32876 0 2
32522: NOT
32523: IFFALSE 32582
// repeat weapon := _weapon [ 1 ] ;
32525: LD_ADDR_VAR 0 5
32529: PUSH
32530: LD_VAR 0 10
32534: PUSH
32535: LD_INT 1
32537: ARRAY
32538: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32539: LD_ADDR_VAR 0 10
32543: PUSH
32544: LD_VAR 0 10
32548: PPUSH
32549: LD_INT 1
32551: PPUSH
32552: CALL_OW 3
32556: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32557: LD_VAR 0 2
32561: PPUSH
32562: LD_VAR 0 5
32566: PPUSH
32567: CALL 32876 0 2
32571: PUSH
32572: LD_VAR 0 10
32576: PUSH
32577: EMPTY
32578: EQUAL
32579: OR
32580: IFFALSE 32525
// result := [ ] ;
32582: LD_ADDR_VAR 0 6
32586: PUSH
32587: EMPTY
32588: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32589: LD_VAR 0 1
32593: PPUSH
32594: LD_VAR 0 2
32598: PPUSH
32599: LD_VAR 0 3
32603: PPUSH
32604: LD_VAR 0 4
32608: PPUSH
32609: LD_VAR 0 5
32613: PPUSH
32614: CALL_OW 448
32618: IFFALSE 32651
// result := [ chassis , engine , control , weapon ] ;
32620: LD_ADDR_VAR 0 6
32624: PUSH
32625: LD_VAR 0 2
32629: PUSH
32630: LD_VAR 0 3
32634: PUSH
32635: LD_VAR 0 4
32639: PUSH
32640: LD_VAR 0 5
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: ST_TO_ADDR
// end ;
32651: LD_VAR 0 6
32655: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32656: LD_INT 0
32658: PPUSH
// if not chassis or not engine then
32659: LD_VAR 0 1
32663: NOT
32664: PUSH
32665: LD_VAR 0 2
32669: NOT
32670: OR
32671: IFFALSE 32675
// exit ;
32673: GO 32871
// case engine of engine_solar :
32675: LD_VAR 0 2
32679: PUSH
32680: LD_INT 2
32682: DOUBLE
32683: EQUAL
32684: IFTRUE 32688
32686: GO 32726
32688: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32689: LD_ADDR_VAR 0 3
32693: PUSH
32694: LD_INT 11
32696: PUSH
32697: LD_INT 12
32699: PUSH
32700: LD_INT 13
32702: PUSH
32703: LD_INT 14
32705: PUSH
32706: LD_INT 1
32708: PUSH
32709: LD_INT 2
32711: PUSH
32712: LD_INT 3
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: ST_TO_ADDR
32724: GO 32855
32726: LD_INT 1
32728: DOUBLE
32729: EQUAL
32730: IFTRUE 32734
32732: GO 32796
32734: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32735: LD_ADDR_VAR 0 3
32739: PUSH
32740: LD_INT 11
32742: PUSH
32743: LD_INT 12
32745: PUSH
32746: LD_INT 13
32748: PUSH
32749: LD_INT 14
32751: PUSH
32752: LD_INT 1
32754: PUSH
32755: LD_INT 2
32757: PUSH
32758: LD_INT 3
32760: PUSH
32761: LD_INT 4
32763: PUSH
32764: LD_INT 5
32766: PUSH
32767: LD_INT 21
32769: PUSH
32770: LD_INT 23
32772: PUSH
32773: LD_INT 22
32775: PUSH
32776: LD_INT 24
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: ST_TO_ADDR
32794: GO 32855
32796: LD_INT 3
32798: DOUBLE
32799: EQUAL
32800: IFTRUE 32804
32802: GO 32854
32804: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32805: LD_ADDR_VAR 0 3
32809: PUSH
32810: LD_INT 13
32812: PUSH
32813: LD_INT 14
32815: PUSH
32816: LD_INT 2
32818: PUSH
32819: LD_INT 3
32821: PUSH
32822: LD_INT 4
32824: PUSH
32825: LD_INT 5
32827: PUSH
32828: LD_INT 21
32830: PUSH
32831: LD_INT 22
32833: PUSH
32834: LD_INT 23
32836: PUSH
32837: LD_INT 24
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: ST_TO_ADDR
32852: GO 32855
32854: POP
// result := ( chassis in result ) ;
32855: LD_ADDR_VAR 0 3
32859: PUSH
32860: LD_VAR 0 1
32864: PUSH
32865: LD_VAR 0 3
32869: IN
32870: ST_TO_ADDR
// end ;
32871: LD_VAR 0 3
32875: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32876: LD_INT 0
32878: PPUSH
// if not chassis or not weapon then
32879: LD_VAR 0 1
32883: NOT
32884: PUSH
32885: LD_VAR 0 2
32889: NOT
32890: OR
32891: IFFALSE 32895
// exit ;
32893: GO 33955
// case weapon of us_machine_gun :
32895: LD_VAR 0 2
32899: PUSH
32900: LD_INT 2
32902: DOUBLE
32903: EQUAL
32904: IFTRUE 32908
32906: GO 32938
32908: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32909: LD_ADDR_VAR 0 3
32913: PUSH
32914: LD_INT 1
32916: PUSH
32917: LD_INT 2
32919: PUSH
32920: LD_INT 3
32922: PUSH
32923: LD_INT 4
32925: PUSH
32926: LD_INT 5
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: ST_TO_ADDR
32936: GO 33939
32938: LD_INT 3
32940: DOUBLE
32941: EQUAL
32942: IFTRUE 32946
32944: GO 32976
32946: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32947: LD_ADDR_VAR 0 3
32951: PUSH
32952: LD_INT 1
32954: PUSH
32955: LD_INT 2
32957: PUSH
32958: LD_INT 3
32960: PUSH
32961: LD_INT 4
32963: PUSH
32964: LD_INT 5
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: ST_TO_ADDR
32974: GO 33939
32976: LD_INT 11
32978: DOUBLE
32979: EQUAL
32980: IFTRUE 32984
32982: GO 33014
32984: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32985: LD_ADDR_VAR 0 3
32989: PUSH
32990: LD_INT 1
32992: PUSH
32993: LD_INT 2
32995: PUSH
32996: LD_INT 3
32998: PUSH
32999: LD_INT 4
33001: PUSH
33002: LD_INT 5
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: ST_TO_ADDR
33012: GO 33939
33014: LD_INT 4
33016: DOUBLE
33017: EQUAL
33018: IFTRUE 33022
33020: GO 33048
33022: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33023: LD_ADDR_VAR 0 3
33027: PUSH
33028: LD_INT 2
33030: PUSH
33031: LD_INT 3
33033: PUSH
33034: LD_INT 4
33036: PUSH
33037: LD_INT 5
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: ST_TO_ADDR
33046: GO 33939
33048: LD_INT 5
33050: DOUBLE
33051: EQUAL
33052: IFTRUE 33056
33054: GO 33082
33056: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33057: LD_ADDR_VAR 0 3
33061: PUSH
33062: LD_INT 2
33064: PUSH
33065: LD_INT 3
33067: PUSH
33068: LD_INT 4
33070: PUSH
33071: LD_INT 5
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: ST_TO_ADDR
33080: GO 33939
33082: LD_INT 9
33084: DOUBLE
33085: EQUAL
33086: IFTRUE 33090
33088: GO 33116
33090: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33091: LD_ADDR_VAR 0 3
33095: PUSH
33096: LD_INT 2
33098: PUSH
33099: LD_INT 3
33101: PUSH
33102: LD_INT 4
33104: PUSH
33105: LD_INT 5
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: ST_TO_ADDR
33114: GO 33939
33116: LD_INT 7
33118: DOUBLE
33119: EQUAL
33120: IFTRUE 33124
33122: GO 33150
33124: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33125: LD_ADDR_VAR 0 3
33129: PUSH
33130: LD_INT 2
33132: PUSH
33133: LD_INT 3
33135: PUSH
33136: LD_INT 4
33138: PUSH
33139: LD_INT 5
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: ST_TO_ADDR
33148: GO 33939
33150: LD_INT 12
33152: DOUBLE
33153: EQUAL
33154: IFTRUE 33158
33156: GO 33184
33158: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33159: LD_ADDR_VAR 0 3
33163: PUSH
33164: LD_INT 2
33166: PUSH
33167: LD_INT 3
33169: PUSH
33170: LD_INT 4
33172: PUSH
33173: LD_INT 5
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: ST_TO_ADDR
33182: GO 33939
33184: LD_INT 13
33186: DOUBLE
33187: EQUAL
33188: IFTRUE 33192
33190: GO 33218
33192: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33193: LD_ADDR_VAR 0 3
33197: PUSH
33198: LD_INT 2
33200: PUSH
33201: LD_INT 3
33203: PUSH
33204: LD_INT 4
33206: PUSH
33207: LD_INT 5
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: ST_TO_ADDR
33216: GO 33939
33218: LD_INT 14
33220: DOUBLE
33221: EQUAL
33222: IFTRUE 33226
33224: GO 33244
33226: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33227: LD_ADDR_VAR 0 3
33231: PUSH
33232: LD_INT 4
33234: PUSH
33235: LD_INT 5
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: ST_TO_ADDR
33242: GO 33939
33244: LD_INT 6
33246: DOUBLE
33247: EQUAL
33248: IFTRUE 33252
33250: GO 33270
33252: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33253: LD_ADDR_VAR 0 3
33257: PUSH
33258: LD_INT 4
33260: PUSH
33261: LD_INT 5
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: ST_TO_ADDR
33268: GO 33939
33270: LD_INT 10
33272: DOUBLE
33273: EQUAL
33274: IFTRUE 33278
33276: GO 33296
33278: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33279: LD_ADDR_VAR 0 3
33283: PUSH
33284: LD_INT 4
33286: PUSH
33287: LD_INT 5
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: ST_TO_ADDR
33294: GO 33939
33296: LD_INT 22
33298: DOUBLE
33299: EQUAL
33300: IFTRUE 33304
33302: GO 33330
33304: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33305: LD_ADDR_VAR 0 3
33309: PUSH
33310: LD_INT 11
33312: PUSH
33313: LD_INT 12
33315: PUSH
33316: LD_INT 13
33318: PUSH
33319: LD_INT 14
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: ST_TO_ADDR
33328: GO 33939
33330: LD_INT 23
33332: DOUBLE
33333: EQUAL
33334: IFTRUE 33338
33336: GO 33364
33338: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33339: LD_ADDR_VAR 0 3
33343: PUSH
33344: LD_INT 11
33346: PUSH
33347: LD_INT 12
33349: PUSH
33350: LD_INT 13
33352: PUSH
33353: LD_INT 14
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: ST_TO_ADDR
33362: GO 33939
33364: LD_INT 24
33366: DOUBLE
33367: EQUAL
33368: IFTRUE 33372
33370: GO 33398
33372: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33373: LD_ADDR_VAR 0 3
33377: PUSH
33378: LD_INT 11
33380: PUSH
33381: LD_INT 12
33383: PUSH
33384: LD_INT 13
33386: PUSH
33387: LD_INT 14
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: ST_TO_ADDR
33396: GO 33939
33398: LD_INT 30
33400: DOUBLE
33401: EQUAL
33402: IFTRUE 33406
33404: GO 33432
33406: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33407: LD_ADDR_VAR 0 3
33411: PUSH
33412: LD_INT 11
33414: PUSH
33415: LD_INT 12
33417: PUSH
33418: LD_INT 13
33420: PUSH
33421: LD_INT 14
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: ST_TO_ADDR
33430: GO 33939
33432: LD_INT 25
33434: DOUBLE
33435: EQUAL
33436: IFTRUE 33440
33438: GO 33458
33440: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33441: LD_ADDR_VAR 0 3
33445: PUSH
33446: LD_INT 13
33448: PUSH
33449: LD_INT 14
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: ST_TO_ADDR
33456: GO 33939
33458: LD_INT 27
33460: DOUBLE
33461: EQUAL
33462: IFTRUE 33466
33464: GO 33484
33466: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33467: LD_ADDR_VAR 0 3
33471: PUSH
33472: LD_INT 13
33474: PUSH
33475: LD_INT 14
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: ST_TO_ADDR
33482: GO 33939
33484: LD_INT 92
33486: DOUBLE
33487: EQUAL
33488: IFTRUE 33492
33490: GO 33518
33492: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33493: LD_ADDR_VAR 0 3
33497: PUSH
33498: LD_INT 11
33500: PUSH
33501: LD_INT 12
33503: PUSH
33504: LD_INT 13
33506: PUSH
33507: LD_INT 14
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: ST_TO_ADDR
33516: GO 33939
33518: LD_INT 28
33520: DOUBLE
33521: EQUAL
33522: IFTRUE 33526
33524: GO 33544
33526: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33527: LD_ADDR_VAR 0 3
33531: PUSH
33532: LD_INT 13
33534: PUSH
33535: LD_INT 14
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: ST_TO_ADDR
33542: GO 33939
33544: LD_INT 29
33546: DOUBLE
33547: EQUAL
33548: IFTRUE 33552
33550: GO 33570
33552: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33553: LD_ADDR_VAR 0 3
33557: PUSH
33558: LD_INT 13
33560: PUSH
33561: LD_INT 14
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: ST_TO_ADDR
33568: GO 33939
33570: LD_INT 31
33572: DOUBLE
33573: EQUAL
33574: IFTRUE 33578
33576: GO 33596
33578: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33579: LD_ADDR_VAR 0 3
33583: PUSH
33584: LD_INT 13
33586: PUSH
33587: LD_INT 14
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: ST_TO_ADDR
33594: GO 33939
33596: LD_INT 26
33598: DOUBLE
33599: EQUAL
33600: IFTRUE 33604
33602: GO 33622
33604: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33605: LD_ADDR_VAR 0 3
33609: PUSH
33610: LD_INT 13
33612: PUSH
33613: LD_INT 14
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: ST_TO_ADDR
33620: GO 33939
33622: LD_INT 42
33624: DOUBLE
33625: EQUAL
33626: IFTRUE 33630
33628: GO 33656
33630: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33631: LD_ADDR_VAR 0 3
33635: PUSH
33636: LD_INT 21
33638: PUSH
33639: LD_INT 22
33641: PUSH
33642: LD_INT 23
33644: PUSH
33645: LD_INT 24
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: ST_TO_ADDR
33654: GO 33939
33656: LD_INT 43
33658: DOUBLE
33659: EQUAL
33660: IFTRUE 33664
33662: GO 33690
33664: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33665: LD_ADDR_VAR 0 3
33669: PUSH
33670: LD_INT 21
33672: PUSH
33673: LD_INT 22
33675: PUSH
33676: LD_INT 23
33678: PUSH
33679: LD_INT 24
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: ST_TO_ADDR
33688: GO 33939
33690: LD_INT 44
33692: DOUBLE
33693: EQUAL
33694: IFTRUE 33698
33696: GO 33724
33698: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33699: LD_ADDR_VAR 0 3
33703: PUSH
33704: LD_INT 21
33706: PUSH
33707: LD_INT 22
33709: PUSH
33710: LD_INT 23
33712: PUSH
33713: LD_INT 24
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: ST_TO_ADDR
33722: GO 33939
33724: LD_INT 45
33726: DOUBLE
33727: EQUAL
33728: IFTRUE 33732
33730: GO 33758
33732: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33733: LD_ADDR_VAR 0 3
33737: PUSH
33738: LD_INT 21
33740: PUSH
33741: LD_INT 22
33743: PUSH
33744: LD_INT 23
33746: PUSH
33747: LD_INT 24
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: ST_TO_ADDR
33756: GO 33939
33758: LD_INT 49
33760: DOUBLE
33761: EQUAL
33762: IFTRUE 33766
33764: GO 33792
33766: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33767: LD_ADDR_VAR 0 3
33771: PUSH
33772: LD_INT 21
33774: PUSH
33775: LD_INT 22
33777: PUSH
33778: LD_INT 23
33780: PUSH
33781: LD_INT 24
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: ST_TO_ADDR
33790: GO 33939
33792: LD_INT 51
33794: DOUBLE
33795: EQUAL
33796: IFTRUE 33800
33798: GO 33826
33800: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33801: LD_ADDR_VAR 0 3
33805: PUSH
33806: LD_INT 21
33808: PUSH
33809: LD_INT 22
33811: PUSH
33812: LD_INT 23
33814: PUSH
33815: LD_INT 24
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: ST_TO_ADDR
33824: GO 33939
33826: LD_INT 52
33828: DOUBLE
33829: EQUAL
33830: IFTRUE 33834
33832: GO 33860
33834: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33835: LD_ADDR_VAR 0 3
33839: PUSH
33840: LD_INT 21
33842: PUSH
33843: LD_INT 22
33845: PUSH
33846: LD_INT 23
33848: PUSH
33849: LD_INT 24
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: ST_TO_ADDR
33858: GO 33939
33860: LD_INT 53
33862: DOUBLE
33863: EQUAL
33864: IFTRUE 33868
33866: GO 33886
33868: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33869: LD_ADDR_VAR 0 3
33873: PUSH
33874: LD_INT 23
33876: PUSH
33877: LD_INT 24
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: ST_TO_ADDR
33884: GO 33939
33886: LD_INT 46
33888: DOUBLE
33889: EQUAL
33890: IFTRUE 33894
33892: GO 33912
33894: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33895: LD_ADDR_VAR 0 3
33899: PUSH
33900: LD_INT 23
33902: PUSH
33903: LD_INT 24
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: ST_TO_ADDR
33910: GO 33939
33912: LD_INT 47
33914: DOUBLE
33915: EQUAL
33916: IFTRUE 33920
33918: GO 33938
33920: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33921: LD_ADDR_VAR 0 3
33925: PUSH
33926: LD_INT 23
33928: PUSH
33929: LD_INT 24
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: ST_TO_ADDR
33936: GO 33939
33938: POP
// result := ( chassis in result ) ;
33939: LD_ADDR_VAR 0 3
33943: PUSH
33944: LD_VAR 0 1
33948: PUSH
33949: LD_VAR 0 3
33953: IN
33954: ST_TO_ADDR
// end ;
33955: LD_VAR 0 3
33959: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33960: LD_INT 0
33962: PPUSH
33963: PPUSH
33964: PPUSH
33965: PPUSH
33966: PPUSH
33967: PPUSH
33968: PPUSH
// result := array ;
33969: LD_ADDR_VAR 0 5
33973: PUSH
33974: LD_VAR 0 1
33978: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33979: LD_VAR 0 1
33983: NOT
33984: PUSH
33985: LD_VAR 0 2
33989: NOT
33990: OR
33991: PUSH
33992: LD_VAR 0 3
33996: NOT
33997: OR
33998: PUSH
33999: LD_VAR 0 2
34003: PUSH
34004: LD_VAR 0 1
34008: GREATER
34009: OR
34010: PUSH
34011: LD_VAR 0 3
34015: PUSH
34016: LD_VAR 0 1
34020: GREATER
34021: OR
34022: IFFALSE 34026
// exit ;
34024: GO 34322
// if direction then
34026: LD_VAR 0 4
34030: IFFALSE 34094
// begin d := 1 ;
34032: LD_ADDR_VAR 0 9
34036: PUSH
34037: LD_INT 1
34039: ST_TO_ADDR
// if i_from > i_to then
34040: LD_VAR 0 2
34044: PUSH
34045: LD_VAR 0 3
34049: GREATER
34050: IFFALSE 34076
// length := ( array - i_from ) + i_to else
34052: LD_ADDR_VAR 0 11
34056: PUSH
34057: LD_VAR 0 1
34061: PUSH
34062: LD_VAR 0 2
34066: MINUS
34067: PUSH
34068: LD_VAR 0 3
34072: PLUS
34073: ST_TO_ADDR
34074: GO 34092
// length := i_to - i_from ;
34076: LD_ADDR_VAR 0 11
34080: PUSH
34081: LD_VAR 0 3
34085: PUSH
34086: LD_VAR 0 2
34090: MINUS
34091: ST_TO_ADDR
// end else
34092: GO 34155
// begin d := - 1 ;
34094: LD_ADDR_VAR 0 9
34098: PUSH
34099: LD_INT 1
34101: NEG
34102: ST_TO_ADDR
// if i_from > i_to then
34103: LD_VAR 0 2
34107: PUSH
34108: LD_VAR 0 3
34112: GREATER
34113: IFFALSE 34133
// length := i_from - i_to else
34115: LD_ADDR_VAR 0 11
34119: PUSH
34120: LD_VAR 0 2
34124: PUSH
34125: LD_VAR 0 3
34129: MINUS
34130: ST_TO_ADDR
34131: GO 34155
// length := ( array - i_to ) + i_from ;
34133: LD_ADDR_VAR 0 11
34137: PUSH
34138: LD_VAR 0 1
34142: PUSH
34143: LD_VAR 0 3
34147: MINUS
34148: PUSH
34149: LD_VAR 0 2
34153: PLUS
34154: ST_TO_ADDR
// end ; if not length then
34155: LD_VAR 0 11
34159: NOT
34160: IFFALSE 34164
// exit ;
34162: GO 34322
// tmp := array ;
34164: LD_ADDR_VAR 0 10
34168: PUSH
34169: LD_VAR 0 1
34173: ST_TO_ADDR
// for i = 1 to length do
34174: LD_ADDR_VAR 0 6
34178: PUSH
34179: DOUBLE
34180: LD_INT 1
34182: DEC
34183: ST_TO_ADDR
34184: LD_VAR 0 11
34188: PUSH
34189: FOR_TO
34190: IFFALSE 34310
// begin for j = 1 to array do
34192: LD_ADDR_VAR 0 7
34196: PUSH
34197: DOUBLE
34198: LD_INT 1
34200: DEC
34201: ST_TO_ADDR
34202: LD_VAR 0 1
34206: PUSH
34207: FOR_TO
34208: IFFALSE 34296
// begin k := j + d ;
34210: LD_ADDR_VAR 0 8
34214: PUSH
34215: LD_VAR 0 7
34219: PUSH
34220: LD_VAR 0 9
34224: PLUS
34225: ST_TO_ADDR
// if k > array then
34226: LD_VAR 0 8
34230: PUSH
34231: LD_VAR 0 1
34235: GREATER
34236: IFFALSE 34246
// k := 1 ;
34238: LD_ADDR_VAR 0 8
34242: PUSH
34243: LD_INT 1
34245: ST_TO_ADDR
// if not k then
34246: LD_VAR 0 8
34250: NOT
34251: IFFALSE 34263
// k := array ;
34253: LD_ADDR_VAR 0 8
34257: PUSH
34258: LD_VAR 0 1
34262: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34263: LD_ADDR_VAR 0 10
34267: PUSH
34268: LD_VAR 0 10
34272: PPUSH
34273: LD_VAR 0 8
34277: PPUSH
34278: LD_VAR 0 1
34282: PUSH
34283: LD_VAR 0 7
34287: ARRAY
34288: PPUSH
34289: CALL_OW 1
34293: ST_TO_ADDR
// end ;
34294: GO 34207
34296: POP
34297: POP
// array := tmp ;
34298: LD_ADDR_VAR 0 1
34302: PUSH
34303: LD_VAR 0 10
34307: ST_TO_ADDR
// end ;
34308: GO 34189
34310: POP
34311: POP
// result := array ;
34312: LD_ADDR_VAR 0 5
34316: PUSH
34317: LD_VAR 0 1
34321: ST_TO_ADDR
// end ;
34322: LD_VAR 0 5
34326: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34327: LD_INT 0
34329: PPUSH
34330: PPUSH
// result := 0 ;
34331: LD_ADDR_VAR 0 3
34335: PUSH
34336: LD_INT 0
34338: ST_TO_ADDR
// if not array or not value in array then
34339: LD_VAR 0 1
34343: NOT
34344: PUSH
34345: LD_VAR 0 2
34349: PUSH
34350: LD_VAR 0 1
34354: IN
34355: NOT
34356: OR
34357: IFFALSE 34361
// exit ;
34359: GO 34415
// for i = 1 to array do
34361: LD_ADDR_VAR 0 4
34365: PUSH
34366: DOUBLE
34367: LD_INT 1
34369: DEC
34370: ST_TO_ADDR
34371: LD_VAR 0 1
34375: PUSH
34376: FOR_TO
34377: IFFALSE 34413
// if value = array [ i ] then
34379: LD_VAR 0 2
34383: PUSH
34384: LD_VAR 0 1
34388: PUSH
34389: LD_VAR 0 4
34393: ARRAY
34394: EQUAL
34395: IFFALSE 34411
// begin result := i ;
34397: LD_ADDR_VAR 0 3
34401: PUSH
34402: LD_VAR 0 4
34406: ST_TO_ADDR
// exit ;
34407: POP
34408: POP
34409: GO 34415
// end ;
34411: GO 34376
34413: POP
34414: POP
// end ;
34415: LD_VAR 0 3
34419: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34420: LD_INT 0
34422: PPUSH
// vc_chassis := chassis ;
34423: LD_ADDR_OWVAR 37
34427: PUSH
34428: LD_VAR 0 1
34432: ST_TO_ADDR
// vc_engine := engine ;
34433: LD_ADDR_OWVAR 39
34437: PUSH
34438: LD_VAR 0 2
34442: ST_TO_ADDR
// vc_control := control ;
34443: LD_ADDR_OWVAR 38
34447: PUSH
34448: LD_VAR 0 3
34452: ST_TO_ADDR
// vc_weapon := weapon ;
34453: LD_ADDR_OWVAR 40
34457: PUSH
34458: LD_VAR 0 4
34462: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34463: LD_ADDR_OWVAR 41
34467: PUSH
34468: LD_VAR 0 5
34472: ST_TO_ADDR
// end ;
34473: LD_VAR 0 6
34477: RET
// export function WantPlant ( unit ) ; var task ; begin
34478: LD_INT 0
34480: PPUSH
34481: PPUSH
// result := false ;
34482: LD_ADDR_VAR 0 2
34486: PUSH
34487: LD_INT 0
34489: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34490: LD_ADDR_VAR 0 3
34494: PUSH
34495: LD_VAR 0 1
34499: PPUSH
34500: CALL_OW 437
34504: ST_TO_ADDR
// if task then
34505: LD_VAR 0 3
34509: IFFALSE 34537
// if task [ 1 ] [ 1 ] = p then
34511: LD_VAR 0 3
34515: PUSH
34516: LD_INT 1
34518: ARRAY
34519: PUSH
34520: LD_INT 1
34522: ARRAY
34523: PUSH
34524: LD_STRING p
34526: EQUAL
34527: IFFALSE 34537
// result := true ;
34529: LD_ADDR_VAR 0 2
34533: PUSH
34534: LD_INT 1
34536: ST_TO_ADDR
// end ;
34537: LD_VAR 0 2
34541: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34542: LD_INT 0
34544: PPUSH
34545: PPUSH
34546: PPUSH
34547: PPUSH
// if pos < 1 then
34548: LD_VAR 0 2
34552: PUSH
34553: LD_INT 1
34555: LESS
34556: IFFALSE 34560
// exit ;
34558: GO 34863
// if pos = 1 then
34560: LD_VAR 0 2
34564: PUSH
34565: LD_INT 1
34567: EQUAL
34568: IFFALSE 34601
// result := Replace ( arr , pos [ 1 ] , value ) else
34570: LD_ADDR_VAR 0 4
34574: PUSH
34575: LD_VAR 0 1
34579: PPUSH
34580: LD_VAR 0 2
34584: PUSH
34585: LD_INT 1
34587: ARRAY
34588: PPUSH
34589: LD_VAR 0 3
34593: PPUSH
34594: CALL_OW 1
34598: ST_TO_ADDR
34599: GO 34863
// begin tmp := arr ;
34601: LD_ADDR_VAR 0 6
34605: PUSH
34606: LD_VAR 0 1
34610: ST_TO_ADDR
// s_arr := [ tmp ] ;
34611: LD_ADDR_VAR 0 7
34615: PUSH
34616: LD_VAR 0 6
34620: PUSH
34621: EMPTY
34622: LIST
34623: ST_TO_ADDR
// for i = 1 to pos - 1 do
34624: LD_ADDR_VAR 0 5
34628: PUSH
34629: DOUBLE
34630: LD_INT 1
34632: DEC
34633: ST_TO_ADDR
34634: LD_VAR 0 2
34638: PUSH
34639: LD_INT 1
34641: MINUS
34642: PUSH
34643: FOR_TO
34644: IFFALSE 34689
// begin tmp := tmp [ pos [ i ] ] ;
34646: LD_ADDR_VAR 0 6
34650: PUSH
34651: LD_VAR 0 6
34655: PUSH
34656: LD_VAR 0 2
34660: PUSH
34661: LD_VAR 0 5
34665: ARRAY
34666: ARRAY
34667: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34668: LD_ADDR_VAR 0 7
34672: PUSH
34673: LD_VAR 0 7
34677: PUSH
34678: LD_VAR 0 6
34682: PUSH
34683: EMPTY
34684: LIST
34685: ADD
34686: ST_TO_ADDR
// end ;
34687: GO 34643
34689: POP
34690: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34691: LD_ADDR_VAR 0 6
34695: PUSH
34696: LD_VAR 0 6
34700: PPUSH
34701: LD_VAR 0 2
34705: PUSH
34706: LD_VAR 0 2
34710: ARRAY
34711: PPUSH
34712: LD_VAR 0 3
34716: PPUSH
34717: CALL_OW 1
34721: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34722: LD_ADDR_VAR 0 7
34726: PUSH
34727: LD_VAR 0 7
34731: PPUSH
34732: LD_VAR 0 7
34736: PPUSH
34737: LD_VAR 0 6
34741: PPUSH
34742: CALL_OW 1
34746: ST_TO_ADDR
// for i = s_arr downto 2 do
34747: LD_ADDR_VAR 0 5
34751: PUSH
34752: DOUBLE
34753: LD_VAR 0 7
34757: INC
34758: ST_TO_ADDR
34759: LD_INT 2
34761: PUSH
34762: FOR_DOWNTO
34763: IFFALSE 34847
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34765: LD_ADDR_VAR 0 6
34769: PUSH
34770: LD_VAR 0 7
34774: PUSH
34775: LD_VAR 0 5
34779: PUSH
34780: LD_INT 1
34782: MINUS
34783: ARRAY
34784: PPUSH
34785: LD_VAR 0 2
34789: PUSH
34790: LD_VAR 0 5
34794: PUSH
34795: LD_INT 1
34797: MINUS
34798: ARRAY
34799: PPUSH
34800: LD_VAR 0 7
34804: PUSH
34805: LD_VAR 0 5
34809: ARRAY
34810: PPUSH
34811: CALL_OW 1
34815: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34816: LD_ADDR_VAR 0 7
34820: PUSH
34821: LD_VAR 0 7
34825: PPUSH
34826: LD_VAR 0 5
34830: PUSH
34831: LD_INT 1
34833: MINUS
34834: PPUSH
34835: LD_VAR 0 6
34839: PPUSH
34840: CALL_OW 1
34844: ST_TO_ADDR
// end ;
34845: GO 34762
34847: POP
34848: POP
// result := s_arr [ 1 ] ;
34849: LD_ADDR_VAR 0 4
34853: PUSH
34854: LD_VAR 0 7
34858: PUSH
34859: LD_INT 1
34861: ARRAY
34862: ST_TO_ADDR
// end ; end ;
34863: LD_VAR 0 4
34867: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34868: LD_INT 0
34870: PPUSH
34871: PPUSH
// if not list then
34872: LD_VAR 0 1
34876: NOT
34877: IFFALSE 34881
// exit ;
34879: GO 34972
// i := list [ pos1 ] ;
34881: LD_ADDR_VAR 0 5
34885: PUSH
34886: LD_VAR 0 1
34890: PUSH
34891: LD_VAR 0 2
34895: ARRAY
34896: ST_TO_ADDR
// if not i then
34897: LD_VAR 0 5
34901: NOT
34902: IFFALSE 34906
// exit ;
34904: GO 34972
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34906: LD_ADDR_VAR 0 1
34910: PUSH
34911: LD_VAR 0 1
34915: PPUSH
34916: LD_VAR 0 2
34920: PPUSH
34921: LD_VAR 0 1
34925: PUSH
34926: LD_VAR 0 3
34930: ARRAY
34931: PPUSH
34932: CALL_OW 1
34936: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34937: LD_ADDR_VAR 0 1
34941: PUSH
34942: LD_VAR 0 1
34946: PPUSH
34947: LD_VAR 0 3
34951: PPUSH
34952: LD_VAR 0 5
34956: PPUSH
34957: CALL_OW 1
34961: ST_TO_ADDR
// result := list ;
34962: LD_ADDR_VAR 0 4
34966: PUSH
34967: LD_VAR 0 1
34971: ST_TO_ADDR
// end ;
34972: LD_VAR 0 4
34976: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34977: LD_INT 0
34979: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34980: LD_ADDR_VAR 0 5
34984: PUSH
34985: LD_VAR 0 1
34989: PPUSH
34990: CALL_OW 250
34994: PPUSH
34995: LD_VAR 0 1
34999: PPUSH
35000: CALL_OW 251
35004: PPUSH
35005: LD_VAR 0 2
35009: PPUSH
35010: LD_VAR 0 3
35014: PPUSH
35015: LD_VAR 0 4
35019: PPUSH
35020: CALL 35030 0 5
35024: ST_TO_ADDR
// end ;
35025: LD_VAR 0 5
35029: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35030: LD_INT 0
35032: PPUSH
35033: PPUSH
35034: PPUSH
35035: PPUSH
// if not list then
35036: LD_VAR 0 3
35040: NOT
35041: IFFALSE 35045
// exit ;
35043: GO 35433
// result := [ ] ;
35045: LD_ADDR_VAR 0 6
35049: PUSH
35050: EMPTY
35051: ST_TO_ADDR
// for i in list do
35052: LD_ADDR_VAR 0 7
35056: PUSH
35057: LD_VAR 0 3
35061: PUSH
35062: FOR_IN
35063: IFFALSE 35265
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35065: LD_ADDR_VAR 0 9
35069: PUSH
35070: LD_VAR 0 7
35074: PPUSH
35075: LD_VAR 0 1
35079: PPUSH
35080: LD_VAR 0 2
35084: PPUSH
35085: CALL_OW 297
35089: ST_TO_ADDR
// if not result then
35090: LD_VAR 0 6
35094: NOT
35095: IFFALSE 35121
// result := [ [ i , tmp ] ] else
35097: LD_ADDR_VAR 0 6
35101: PUSH
35102: LD_VAR 0 7
35106: PUSH
35107: LD_VAR 0 9
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: EMPTY
35117: LIST
35118: ST_TO_ADDR
35119: GO 35263
// begin if result [ result ] [ 2 ] < tmp then
35121: LD_VAR 0 6
35125: PUSH
35126: LD_VAR 0 6
35130: ARRAY
35131: PUSH
35132: LD_INT 2
35134: ARRAY
35135: PUSH
35136: LD_VAR 0 9
35140: LESS
35141: IFFALSE 35183
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35143: LD_ADDR_VAR 0 6
35147: PUSH
35148: LD_VAR 0 6
35152: PPUSH
35153: LD_VAR 0 6
35157: PUSH
35158: LD_INT 1
35160: PLUS
35161: PPUSH
35162: LD_VAR 0 7
35166: PUSH
35167: LD_VAR 0 9
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PPUSH
35176: CALL_OW 2
35180: ST_TO_ADDR
35181: GO 35263
// for j = 1 to result do
35183: LD_ADDR_VAR 0 8
35187: PUSH
35188: DOUBLE
35189: LD_INT 1
35191: DEC
35192: ST_TO_ADDR
35193: LD_VAR 0 6
35197: PUSH
35198: FOR_TO
35199: IFFALSE 35261
// begin if tmp < result [ j ] [ 2 ] then
35201: LD_VAR 0 9
35205: PUSH
35206: LD_VAR 0 6
35210: PUSH
35211: LD_VAR 0 8
35215: ARRAY
35216: PUSH
35217: LD_INT 2
35219: ARRAY
35220: LESS
35221: IFFALSE 35259
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35223: LD_ADDR_VAR 0 6
35227: PUSH
35228: LD_VAR 0 6
35232: PPUSH
35233: LD_VAR 0 8
35237: PPUSH
35238: LD_VAR 0 7
35242: PUSH
35243: LD_VAR 0 9
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PPUSH
35252: CALL_OW 2
35256: ST_TO_ADDR
// break ;
35257: GO 35261
// end ; end ;
35259: GO 35198
35261: POP
35262: POP
// end ; end ;
35263: GO 35062
35265: POP
35266: POP
// if result and not asc then
35267: LD_VAR 0 6
35271: PUSH
35272: LD_VAR 0 4
35276: NOT
35277: AND
35278: IFFALSE 35353
// begin tmp := result ;
35280: LD_ADDR_VAR 0 9
35284: PUSH
35285: LD_VAR 0 6
35289: ST_TO_ADDR
// for i = tmp downto 1 do
35290: LD_ADDR_VAR 0 7
35294: PUSH
35295: DOUBLE
35296: LD_VAR 0 9
35300: INC
35301: ST_TO_ADDR
35302: LD_INT 1
35304: PUSH
35305: FOR_DOWNTO
35306: IFFALSE 35351
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35308: LD_ADDR_VAR 0 6
35312: PUSH
35313: LD_VAR 0 6
35317: PPUSH
35318: LD_VAR 0 9
35322: PUSH
35323: LD_VAR 0 7
35327: MINUS
35328: PUSH
35329: LD_INT 1
35331: PLUS
35332: PPUSH
35333: LD_VAR 0 9
35337: PUSH
35338: LD_VAR 0 7
35342: ARRAY
35343: PPUSH
35344: CALL_OW 1
35348: ST_TO_ADDR
35349: GO 35305
35351: POP
35352: POP
// end ; tmp := [ ] ;
35353: LD_ADDR_VAR 0 9
35357: PUSH
35358: EMPTY
35359: ST_TO_ADDR
// if mode then
35360: LD_VAR 0 5
35364: IFFALSE 35433
// begin for i = 1 to result do
35366: LD_ADDR_VAR 0 7
35370: PUSH
35371: DOUBLE
35372: LD_INT 1
35374: DEC
35375: ST_TO_ADDR
35376: LD_VAR 0 6
35380: PUSH
35381: FOR_TO
35382: IFFALSE 35421
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35384: LD_ADDR_VAR 0 9
35388: PUSH
35389: LD_VAR 0 9
35393: PPUSH
35394: LD_VAR 0 7
35398: PPUSH
35399: LD_VAR 0 6
35403: PUSH
35404: LD_VAR 0 7
35408: ARRAY
35409: PUSH
35410: LD_INT 1
35412: ARRAY
35413: PPUSH
35414: CALL_OW 1
35418: ST_TO_ADDR
35419: GO 35381
35421: POP
35422: POP
// result := tmp ;
35423: LD_ADDR_VAR 0 6
35427: PUSH
35428: LD_VAR 0 9
35432: ST_TO_ADDR
// end ; end ;
35433: LD_VAR 0 6
35437: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35438: LD_INT 0
35440: PPUSH
35441: PPUSH
35442: PPUSH
35443: PPUSH
35444: PPUSH
35445: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35446: LD_ADDR_VAR 0 5
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: LD_INT 0
35459: PUSH
35460: EMPTY
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: ST_TO_ADDR
// if not x or not y then
35468: LD_VAR 0 2
35472: NOT
35473: PUSH
35474: LD_VAR 0 3
35478: NOT
35479: OR
35480: IFFALSE 35484
// exit ;
35482: GO 37134
// if not range then
35484: LD_VAR 0 4
35488: NOT
35489: IFFALSE 35499
// range := 10 ;
35491: LD_ADDR_VAR 0 4
35495: PUSH
35496: LD_INT 10
35498: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35499: LD_ADDR_VAR 0 8
35503: PUSH
35504: LD_INT 81
35506: PUSH
35507: LD_VAR 0 1
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 92
35518: PUSH
35519: LD_VAR 0 2
35523: PUSH
35524: LD_VAR 0 3
35528: PUSH
35529: LD_VAR 0 4
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 3
35542: PUSH
35543: LD_INT 21
35545: PUSH
35546: LD_INT 3
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: LIST
35561: PPUSH
35562: CALL_OW 69
35566: ST_TO_ADDR
// if not tmp then
35567: LD_VAR 0 8
35571: NOT
35572: IFFALSE 35576
// exit ;
35574: GO 37134
// for i in tmp do
35576: LD_ADDR_VAR 0 6
35580: PUSH
35581: LD_VAR 0 8
35585: PUSH
35586: FOR_IN
35587: IFFALSE 37109
// begin points := [ 0 , 0 , 0 ] ;
35589: LD_ADDR_VAR 0 9
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: LD_INT 0
35599: PUSH
35600: LD_INT 0
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: LIST
35607: ST_TO_ADDR
// bpoints := 1 ;
35608: LD_ADDR_VAR 0 10
35612: PUSH
35613: LD_INT 1
35615: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35616: LD_VAR 0 6
35620: PPUSH
35621: CALL_OW 247
35625: PUSH
35626: LD_INT 1
35628: DOUBLE
35629: EQUAL
35630: IFTRUE 35634
35632: GO 36212
35634: POP
// begin if GetClass ( i ) = 1 then
35635: LD_VAR 0 6
35639: PPUSH
35640: CALL_OW 257
35644: PUSH
35645: LD_INT 1
35647: EQUAL
35648: IFFALSE 35669
// points := [ 10 , 5 , 3 ] ;
35650: LD_ADDR_VAR 0 9
35654: PUSH
35655: LD_INT 10
35657: PUSH
35658: LD_INT 5
35660: PUSH
35661: LD_INT 3
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: LIST
35668: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35669: LD_VAR 0 6
35673: PPUSH
35674: CALL_OW 257
35678: PUSH
35679: LD_INT 2
35681: PUSH
35682: LD_INT 3
35684: PUSH
35685: LD_INT 4
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: LIST
35692: IN
35693: IFFALSE 35714
// points := [ 3 , 2 , 1 ] ;
35695: LD_ADDR_VAR 0 9
35699: PUSH
35700: LD_INT 3
35702: PUSH
35703: LD_INT 2
35705: PUSH
35706: LD_INT 1
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: LIST
35713: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35714: LD_VAR 0 6
35718: PPUSH
35719: CALL_OW 257
35723: PUSH
35724: LD_INT 5
35726: EQUAL
35727: IFFALSE 35748
// points := [ 130 , 5 , 2 ] ;
35729: LD_ADDR_VAR 0 9
35733: PUSH
35734: LD_INT 130
35736: PUSH
35737: LD_INT 5
35739: PUSH
35740: LD_INT 2
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: LIST
35747: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35748: LD_VAR 0 6
35752: PPUSH
35753: CALL_OW 257
35757: PUSH
35758: LD_INT 8
35760: EQUAL
35761: IFFALSE 35782
// points := [ 35 , 35 , 30 ] ;
35763: LD_ADDR_VAR 0 9
35767: PUSH
35768: LD_INT 35
35770: PUSH
35771: LD_INT 35
35773: PUSH
35774: LD_INT 30
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: LIST
35781: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35782: LD_VAR 0 6
35786: PPUSH
35787: CALL_OW 257
35791: PUSH
35792: LD_INT 9
35794: EQUAL
35795: IFFALSE 35816
// points := [ 20 , 55 , 40 ] ;
35797: LD_ADDR_VAR 0 9
35801: PUSH
35802: LD_INT 20
35804: PUSH
35805: LD_INT 55
35807: PUSH
35808: LD_INT 40
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: LIST
35815: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35816: LD_VAR 0 6
35820: PPUSH
35821: CALL_OW 257
35825: PUSH
35826: LD_INT 12
35828: PUSH
35829: LD_INT 16
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: IN
35836: IFFALSE 35857
// points := [ 5 , 3 , 2 ] ;
35838: LD_ADDR_VAR 0 9
35842: PUSH
35843: LD_INT 5
35845: PUSH
35846: LD_INT 3
35848: PUSH
35849: LD_INT 2
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: LIST
35856: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35857: LD_VAR 0 6
35861: PPUSH
35862: CALL_OW 257
35866: PUSH
35867: LD_INT 17
35869: EQUAL
35870: IFFALSE 35891
// points := [ 100 , 50 , 75 ] ;
35872: LD_ADDR_VAR 0 9
35876: PUSH
35877: LD_INT 100
35879: PUSH
35880: LD_INT 50
35882: PUSH
35883: LD_INT 75
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: LIST
35890: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35891: LD_VAR 0 6
35895: PPUSH
35896: CALL_OW 257
35900: PUSH
35901: LD_INT 15
35903: EQUAL
35904: IFFALSE 35925
// points := [ 10 , 5 , 3 ] ;
35906: LD_ADDR_VAR 0 9
35910: PUSH
35911: LD_INT 10
35913: PUSH
35914: LD_INT 5
35916: PUSH
35917: LD_INT 3
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: LIST
35924: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35925: LD_VAR 0 6
35929: PPUSH
35930: CALL_OW 257
35934: PUSH
35935: LD_INT 14
35937: EQUAL
35938: IFFALSE 35959
// points := [ 10 , 0 , 0 ] ;
35940: LD_ADDR_VAR 0 9
35944: PUSH
35945: LD_INT 10
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: LD_INT 0
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: LIST
35958: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35959: LD_VAR 0 6
35963: PPUSH
35964: CALL_OW 257
35968: PUSH
35969: LD_INT 11
35971: EQUAL
35972: IFFALSE 35993
// points := [ 30 , 10 , 5 ] ;
35974: LD_ADDR_VAR 0 9
35978: PUSH
35979: LD_INT 30
35981: PUSH
35982: LD_INT 10
35984: PUSH
35985: LD_INT 5
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: LIST
35992: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35993: LD_VAR 0 1
35997: PPUSH
35998: LD_INT 5
36000: PPUSH
36001: CALL_OW 321
36005: PUSH
36006: LD_INT 2
36008: EQUAL
36009: IFFALSE 36026
// bpoints := bpoints * 1.8 ;
36011: LD_ADDR_VAR 0 10
36015: PUSH
36016: LD_VAR 0 10
36020: PUSH
36021: LD_REAL  1.80000000000000E+0000
36024: MUL
36025: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36026: LD_VAR 0 6
36030: PPUSH
36031: CALL_OW 257
36035: PUSH
36036: LD_INT 1
36038: PUSH
36039: LD_INT 2
36041: PUSH
36042: LD_INT 3
36044: PUSH
36045: LD_INT 4
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: IN
36054: PUSH
36055: LD_VAR 0 1
36059: PPUSH
36060: LD_INT 51
36062: PPUSH
36063: CALL_OW 321
36067: PUSH
36068: LD_INT 2
36070: EQUAL
36071: AND
36072: IFFALSE 36089
// bpoints := bpoints * 1.2 ;
36074: LD_ADDR_VAR 0 10
36078: PUSH
36079: LD_VAR 0 10
36083: PUSH
36084: LD_REAL  1.20000000000000E+0000
36087: MUL
36088: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36089: LD_VAR 0 6
36093: PPUSH
36094: CALL_OW 257
36098: PUSH
36099: LD_INT 5
36101: PUSH
36102: LD_INT 7
36104: PUSH
36105: LD_INT 9
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: LIST
36112: IN
36113: PUSH
36114: LD_VAR 0 1
36118: PPUSH
36119: LD_INT 52
36121: PPUSH
36122: CALL_OW 321
36126: PUSH
36127: LD_INT 2
36129: EQUAL
36130: AND
36131: IFFALSE 36148
// bpoints := bpoints * 1.5 ;
36133: LD_ADDR_VAR 0 10
36137: PUSH
36138: LD_VAR 0 10
36142: PUSH
36143: LD_REAL  1.50000000000000E+0000
36146: MUL
36147: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36148: LD_VAR 0 1
36152: PPUSH
36153: LD_INT 66
36155: PPUSH
36156: CALL_OW 321
36160: PUSH
36161: LD_INT 2
36163: EQUAL
36164: IFFALSE 36181
// bpoints := bpoints * 1.1 ;
36166: LD_ADDR_VAR 0 10
36170: PUSH
36171: LD_VAR 0 10
36175: PUSH
36176: LD_REAL  1.10000000000000E+0000
36179: MUL
36180: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36181: LD_ADDR_VAR 0 10
36185: PUSH
36186: LD_VAR 0 10
36190: PUSH
36191: LD_VAR 0 6
36195: PPUSH
36196: LD_INT 1
36198: PPUSH
36199: CALL_OW 259
36203: PUSH
36204: LD_REAL  1.15000000000000E+0000
36207: MUL
36208: MUL
36209: ST_TO_ADDR
// end ; unit_vehicle :
36210: GO 37038
36212: LD_INT 2
36214: DOUBLE
36215: EQUAL
36216: IFTRUE 36220
36218: GO 37026
36220: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36221: LD_VAR 0 6
36225: PPUSH
36226: CALL_OW 264
36230: PUSH
36231: LD_INT 2
36233: PUSH
36234: LD_INT 42
36236: PUSH
36237: LD_INT 24
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: LIST
36244: IN
36245: IFFALSE 36266
// points := [ 25 , 5 , 3 ] ;
36247: LD_ADDR_VAR 0 9
36251: PUSH
36252: LD_INT 25
36254: PUSH
36255: LD_INT 5
36257: PUSH
36258: LD_INT 3
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: LIST
36265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36266: LD_VAR 0 6
36270: PPUSH
36271: CALL_OW 264
36275: PUSH
36276: LD_INT 4
36278: PUSH
36279: LD_INT 43
36281: PUSH
36282: LD_INT 25
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: LIST
36289: IN
36290: IFFALSE 36311
// points := [ 40 , 15 , 5 ] ;
36292: LD_ADDR_VAR 0 9
36296: PUSH
36297: LD_INT 40
36299: PUSH
36300: LD_INT 15
36302: PUSH
36303: LD_INT 5
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: LIST
36310: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36311: LD_VAR 0 6
36315: PPUSH
36316: CALL_OW 264
36320: PUSH
36321: LD_INT 3
36323: PUSH
36324: LD_INT 23
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: IN
36331: IFFALSE 36352
// points := [ 7 , 25 , 8 ] ;
36333: LD_ADDR_VAR 0 9
36337: PUSH
36338: LD_INT 7
36340: PUSH
36341: LD_INT 25
36343: PUSH
36344: LD_INT 8
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: LIST
36351: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36352: LD_VAR 0 6
36356: PPUSH
36357: CALL_OW 264
36361: PUSH
36362: LD_INT 5
36364: PUSH
36365: LD_INT 27
36367: PUSH
36368: LD_INT 44
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: IN
36376: IFFALSE 36397
// points := [ 14 , 50 , 16 ] ;
36378: LD_ADDR_VAR 0 9
36382: PUSH
36383: LD_INT 14
36385: PUSH
36386: LD_INT 50
36388: PUSH
36389: LD_INT 16
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: LIST
36396: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36397: LD_VAR 0 6
36401: PPUSH
36402: CALL_OW 264
36406: PUSH
36407: LD_INT 6
36409: PUSH
36410: LD_INT 46
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: IN
36417: IFFALSE 36438
// points := [ 32 , 120 , 70 ] ;
36419: LD_ADDR_VAR 0 9
36423: PUSH
36424: LD_INT 32
36426: PUSH
36427: LD_INT 120
36429: PUSH
36430: LD_INT 70
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: LIST
36437: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36438: LD_VAR 0 6
36442: PPUSH
36443: CALL_OW 264
36447: PUSH
36448: LD_INT 7
36450: PUSH
36451: LD_INT 28
36453: PUSH
36454: LD_INT 45
36456: PUSH
36457: LD_INT 92
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: IN
36466: IFFALSE 36487
// points := [ 35 , 20 , 45 ] ;
36468: LD_ADDR_VAR 0 9
36472: PUSH
36473: LD_INT 35
36475: PUSH
36476: LD_INT 20
36478: PUSH
36479: LD_INT 45
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: LIST
36486: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36487: LD_VAR 0 6
36491: PPUSH
36492: CALL_OW 264
36496: PUSH
36497: LD_INT 47
36499: PUSH
36500: EMPTY
36501: LIST
36502: IN
36503: IFFALSE 36524
// points := [ 67 , 45 , 75 ] ;
36505: LD_ADDR_VAR 0 9
36509: PUSH
36510: LD_INT 67
36512: PUSH
36513: LD_INT 45
36515: PUSH
36516: LD_INT 75
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36524: LD_VAR 0 6
36528: PPUSH
36529: CALL_OW 264
36533: PUSH
36534: LD_INT 26
36536: PUSH
36537: EMPTY
36538: LIST
36539: IN
36540: IFFALSE 36561
// points := [ 120 , 30 , 80 ] ;
36542: LD_ADDR_VAR 0 9
36546: PUSH
36547: LD_INT 120
36549: PUSH
36550: LD_INT 30
36552: PUSH
36553: LD_INT 80
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: LIST
36560: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36561: LD_VAR 0 6
36565: PPUSH
36566: CALL_OW 264
36570: PUSH
36571: LD_INT 22
36573: PUSH
36574: EMPTY
36575: LIST
36576: IN
36577: IFFALSE 36598
// points := [ 40 , 1 , 1 ] ;
36579: LD_ADDR_VAR 0 9
36583: PUSH
36584: LD_INT 40
36586: PUSH
36587: LD_INT 1
36589: PUSH
36590: LD_INT 1
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: LIST
36597: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36598: LD_VAR 0 6
36602: PPUSH
36603: CALL_OW 264
36607: PUSH
36608: LD_INT 29
36610: PUSH
36611: EMPTY
36612: LIST
36613: IN
36614: IFFALSE 36635
// points := [ 70 , 200 , 400 ] ;
36616: LD_ADDR_VAR 0 9
36620: PUSH
36621: LD_INT 70
36623: PUSH
36624: LD_INT 200
36626: PUSH
36627: LD_INT 400
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: LIST
36634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36635: LD_VAR 0 6
36639: PPUSH
36640: CALL_OW 264
36644: PUSH
36645: LD_INT 14
36647: PUSH
36648: LD_INT 53
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: IN
36655: IFFALSE 36676
// points := [ 40 , 10 , 20 ] ;
36657: LD_ADDR_VAR 0 9
36661: PUSH
36662: LD_INT 40
36664: PUSH
36665: LD_INT 10
36667: PUSH
36668: LD_INT 20
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: LIST
36675: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36676: LD_VAR 0 6
36680: PPUSH
36681: CALL_OW 264
36685: PUSH
36686: LD_INT 9
36688: PUSH
36689: EMPTY
36690: LIST
36691: IN
36692: IFFALSE 36713
// points := [ 5 , 70 , 20 ] ;
36694: LD_ADDR_VAR 0 9
36698: PUSH
36699: LD_INT 5
36701: PUSH
36702: LD_INT 70
36704: PUSH
36705: LD_INT 20
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: LIST
36712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36713: LD_VAR 0 6
36717: PPUSH
36718: CALL_OW 264
36722: PUSH
36723: LD_INT 10
36725: PUSH
36726: EMPTY
36727: LIST
36728: IN
36729: IFFALSE 36750
// points := [ 35 , 110 , 70 ] ;
36731: LD_ADDR_VAR 0 9
36735: PUSH
36736: LD_INT 35
36738: PUSH
36739: LD_INT 110
36741: PUSH
36742: LD_INT 70
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: LIST
36749: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36750: LD_VAR 0 6
36754: PPUSH
36755: CALL_OW 265
36759: PUSH
36760: LD_INT 25
36762: EQUAL
36763: IFFALSE 36784
// points := [ 80 , 65 , 100 ] ;
36765: LD_ADDR_VAR 0 9
36769: PUSH
36770: LD_INT 80
36772: PUSH
36773: LD_INT 65
36775: PUSH
36776: LD_INT 100
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: LIST
36783: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36784: LD_VAR 0 6
36788: PPUSH
36789: CALL_OW 263
36793: PUSH
36794: LD_INT 1
36796: EQUAL
36797: IFFALSE 36832
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36799: LD_ADDR_VAR 0 10
36803: PUSH
36804: LD_VAR 0 10
36808: PUSH
36809: LD_VAR 0 6
36813: PPUSH
36814: CALL_OW 311
36818: PPUSH
36819: LD_INT 3
36821: PPUSH
36822: CALL_OW 259
36826: PUSH
36827: LD_INT 4
36829: MUL
36830: MUL
36831: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36832: LD_VAR 0 6
36836: PPUSH
36837: CALL_OW 263
36841: PUSH
36842: LD_INT 2
36844: EQUAL
36845: IFFALSE 36896
// begin j := IsControledBy ( i ) ;
36847: LD_ADDR_VAR 0 7
36851: PUSH
36852: LD_VAR 0 6
36856: PPUSH
36857: CALL_OW 312
36861: ST_TO_ADDR
// if j then
36862: LD_VAR 0 7
36866: IFFALSE 36896
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36868: LD_ADDR_VAR 0 10
36872: PUSH
36873: LD_VAR 0 10
36877: PUSH
36878: LD_VAR 0 7
36882: PPUSH
36883: LD_INT 3
36885: PPUSH
36886: CALL_OW 259
36890: PUSH
36891: LD_INT 3
36893: MUL
36894: MUL
36895: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36896: LD_VAR 0 6
36900: PPUSH
36901: CALL_OW 264
36905: PUSH
36906: LD_INT 5
36908: PUSH
36909: LD_INT 6
36911: PUSH
36912: LD_INT 46
36914: PUSH
36915: LD_INT 44
36917: PUSH
36918: LD_INT 47
36920: PUSH
36921: LD_INT 45
36923: PUSH
36924: LD_INT 28
36926: PUSH
36927: LD_INT 7
36929: PUSH
36930: LD_INT 27
36932: PUSH
36933: LD_INT 29
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: IN
36948: PUSH
36949: LD_VAR 0 1
36953: PPUSH
36954: LD_INT 52
36956: PPUSH
36957: CALL_OW 321
36961: PUSH
36962: LD_INT 2
36964: EQUAL
36965: AND
36966: IFFALSE 36983
// bpoints := bpoints * 1.2 ;
36968: LD_ADDR_VAR 0 10
36972: PUSH
36973: LD_VAR 0 10
36977: PUSH
36978: LD_REAL  1.20000000000000E+0000
36981: MUL
36982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36983: LD_VAR 0 6
36987: PPUSH
36988: CALL_OW 264
36992: PUSH
36993: LD_INT 6
36995: PUSH
36996: LD_INT 46
36998: PUSH
36999: LD_INT 47
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: IN
37007: IFFALSE 37024
// bpoints := bpoints * 1.2 ;
37009: LD_ADDR_VAR 0 10
37013: PUSH
37014: LD_VAR 0 10
37018: PUSH
37019: LD_REAL  1.20000000000000E+0000
37022: MUL
37023: ST_TO_ADDR
// end ; unit_building :
37024: GO 37038
37026: LD_INT 3
37028: DOUBLE
37029: EQUAL
37030: IFTRUE 37034
37032: GO 37037
37034: POP
// ; end ;
37035: GO 37038
37037: POP
// for j = 1 to 3 do
37038: LD_ADDR_VAR 0 7
37042: PUSH
37043: DOUBLE
37044: LD_INT 1
37046: DEC
37047: ST_TO_ADDR
37048: LD_INT 3
37050: PUSH
37051: FOR_TO
37052: IFFALSE 37105
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37054: LD_ADDR_VAR 0 5
37058: PUSH
37059: LD_VAR 0 5
37063: PPUSH
37064: LD_VAR 0 7
37068: PPUSH
37069: LD_VAR 0 5
37073: PUSH
37074: LD_VAR 0 7
37078: ARRAY
37079: PUSH
37080: LD_VAR 0 9
37084: PUSH
37085: LD_VAR 0 7
37089: ARRAY
37090: PUSH
37091: LD_VAR 0 10
37095: MUL
37096: PLUS
37097: PPUSH
37098: CALL_OW 1
37102: ST_TO_ADDR
37103: GO 37051
37105: POP
37106: POP
// end ;
37107: GO 35586
37109: POP
37110: POP
// result := Replace ( result , 4 , tmp ) ;
37111: LD_ADDR_VAR 0 5
37115: PUSH
37116: LD_VAR 0 5
37120: PPUSH
37121: LD_INT 4
37123: PPUSH
37124: LD_VAR 0 8
37128: PPUSH
37129: CALL_OW 1
37133: ST_TO_ADDR
// end ;
37134: LD_VAR 0 5
37138: RET
// export function DangerAtRange ( unit , range ) ; begin
37139: LD_INT 0
37141: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37142: LD_ADDR_VAR 0 3
37146: PUSH
37147: LD_VAR 0 1
37151: PPUSH
37152: CALL_OW 255
37156: PPUSH
37157: LD_VAR 0 1
37161: PPUSH
37162: CALL_OW 250
37166: PPUSH
37167: LD_VAR 0 1
37171: PPUSH
37172: CALL_OW 251
37176: PPUSH
37177: LD_VAR 0 2
37181: PPUSH
37182: CALL 35438 0 4
37186: ST_TO_ADDR
// end ;
37187: LD_VAR 0 3
37191: RET
// export function DangerInArea ( side , area ) ; begin
37192: LD_INT 0
37194: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37195: LD_ADDR_VAR 0 3
37199: PUSH
37200: LD_VAR 0 2
37204: PPUSH
37205: LD_INT 81
37207: PUSH
37208: LD_VAR 0 1
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PPUSH
37217: CALL_OW 70
37221: ST_TO_ADDR
// end ;
37222: LD_VAR 0 3
37226: RET
// export function IsExtension ( b ) ; begin
37227: LD_INT 0
37229: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37230: LD_ADDR_VAR 0 2
37234: PUSH
37235: LD_VAR 0 1
37239: PUSH
37240: LD_INT 23
37242: PUSH
37243: LD_INT 20
37245: PUSH
37246: LD_INT 22
37248: PUSH
37249: LD_INT 17
37251: PUSH
37252: LD_INT 24
37254: PUSH
37255: LD_INT 21
37257: PUSH
37258: LD_INT 19
37260: PUSH
37261: LD_INT 16
37263: PUSH
37264: LD_INT 25
37266: PUSH
37267: LD_INT 18
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: IN
37282: ST_TO_ADDR
// end ;
37283: LD_VAR 0 2
37287: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37288: LD_INT 0
37290: PPUSH
37291: PPUSH
37292: PPUSH
// result := [ ] ;
37293: LD_ADDR_VAR 0 4
37297: PUSH
37298: EMPTY
37299: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37300: LD_ADDR_VAR 0 5
37304: PUSH
37305: LD_VAR 0 2
37309: PPUSH
37310: LD_INT 21
37312: PUSH
37313: LD_INT 3
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PPUSH
37320: CALL_OW 70
37324: ST_TO_ADDR
// if not tmp then
37325: LD_VAR 0 5
37329: NOT
37330: IFFALSE 37334
// exit ;
37332: GO 37398
// if checkLink then
37334: LD_VAR 0 3
37338: IFFALSE 37388
// begin for i in tmp do
37340: LD_ADDR_VAR 0 6
37344: PUSH
37345: LD_VAR 0 5
37349: PUSH
37350: FOR_IN
37351: IFFALSE 37386
// if GetBase ( i ) <> base then
37353: LD_VAR 0 6
37357: PPUSH
37358: CALL_OW 274
37362: PUSH
37363: LD_VAR 0 1
37367: NONEQUAL
37368: IFFALSE 37384
// ComLinkToBase ( base , i ) ;
37370: LD_VAR 0 1
37374: PPUSH
37375: LD_VAR 0 6
37379: PPUSH
37380: CALL_OW 169
37384: GO 37350
37386: POP
37387: POP
// end ; result := tmp ;
37388: LD_ADDR_VAR 0 4
37392: PUSH
37393: LD_VAR 0 5
37397: ST_TO_ADDR
// end ;
37398: LD_VAR 0 4
37402: RET
// export function ComComplete ( units , b ) ; var i ; begin
37403: LD_INT 0
37405: PPUSH
37406: PPUSH
// if not units then
37407: LD_VAR 0 1
37411: NOT
37412: IFFALSE 37416
// exit ;
37414: GO 37506
// for i in units do
37416: LD_ADDR_VAR 0 4
37420: PUSH
37421: LD_VAR 0 1
37425: PUSH
37426: FOR_IN
37427: IFFALSE 37504
// if BuildingStatus ( b ) = bs_build then
37429: LD_VAR 0 2
37433: PPUSH
37434: CALL_OW 461
37438: PUSH
37439: LD_INT 1
37441: EQUAL
37442: IFFALSE 37502
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37444: LD_VAR 0 4
37448: PPUSH
37449: LD_STRING h
37451: PUSH
37452: LD_VAR 0 2
37456: PPUSH
37457: CALL_OW 250
37461: PUSH
37462: LD_VAR 0 2
37466: PPUSH
37467: CALL_OW 251
37471: PUSH
37472: LD_VAR 0 2
37476: PUSH
37477: LD_INT 0
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: LD_INT 0
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: PUSH
37495: EMPTY
37496: LIST
37497: PPUSH
37498: CALL_OW 446
37502: GO 37426
37504: POP
37505: POP
// end ;
37506: LD_VAR 0 3
37510: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37511: LD_INT 0
37513: PPUSH
37514: PPUSH
37515: PPUSH
37516: PPUSH
37517: PPUSH
37518: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37519: LD_VAR 0 1
37523: NOT
37524: PUSH
37525: LD_VAR 0 1
37529: PPUSH
37530: CALL_OW 263
37534: PUSH
37535: LD_INT 2
37537: NONEQUAL
37538: OR
37539: IFFALSE 37543
// exit ;
37541: GO 37859
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37543: LD_ADDR_VAR 0 6
37547: PUSH
37548: LD_INT 22
37550: PUSH
37551: LD_VAR 0 1
37555: PPUSH
37556: CALL_OW 255
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 2
37567: PUSH
37568: LD_INT 30
37570: PUSH
37571: LD_INT 36
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 34
37580: PUSH
37581: LD_INT 31
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: LIST
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PPUSH
37597: CALL_OW 69
37601: ST_TO_ADDR
// if not tmp then
37602: LD_VAR 0 6
37606: NOT
37607: IFFALSE 37611
// exit ;
37609: GO 37859
// result := [ ] ;
37611: LD_ADDR_VAR 0 2
37615: PUSH
37616: EMPTY
37617: ST_TO_ADDR
// for i in tmp do
37618: LD_ADDR_VAR 0 3
37622: PUSH
37623: LD_VAR 0 6
37627: PUSH
37628: FOR_IN
37629: IFFALSE 37700
// begin t := UnitsInside ( i ) ;
37631: LD_ADDR_VAR 0 4
37635: PUSH
37636: LD_VAR 0 3
37640: PPUSH
37641: CALL_OW 313
37645: ST_TO_ADDR
// if t then
37646: LD_VAR 0 4
37650: IFFALSE 37698
// for j in t do
37652: LD_ADDR_VAR 0 7
37656: PUSH
37657: LD_VAR 0 4
37661: PUSH
37662: FOR_IN
37663: IFFALSE 37696
// result := Replace ( result , result + 1 , j ) ;
37665: LD_ADDR_VAR 0 2
37669: PUSH
37670: LD_VAR 0 2
37674: PPUSH
37675: LD_VAR 0 2
37679: PUSH
37680: LD_INT 1
37682: PLUS
37683: PPUSH
37684: LD_VAR 0 7
37688: PPUSH
37689: CALL_OW 1
37693: ST_TO_ADDR
37694: GO 37662
37696: POP
37697: POP
// end ;
37698: GO 37628
37700: POP
37701: POP
// if not result then
37702: LD_VAR 0 2
37706: NOT
37707: IFFALSE 37711
// exit ;
37709: GO 37859
// mech := result [ 1 ] ;
37711: LD_ADDR_VAR 0 5
37715: PUSH
37716: LD_VAR 0 2
37720: PUSH
37721: LD_INT 1
37723: ARRAY
37724: ST_TO_ADDR
// if result > 1 then
37725: LD_VAR 0 2
37729: PUSH
37730: LD_INT 1
37732: GREATER
37733: IFFALSE 37845
// begin for i = 2 to result do
37735: LD_ADDR_VAR 0 3
37739: PUSH
37740: DOUBLE
37741: LD_INT 2
37743: DEC
37744: ST_TO_ADDR
37745: LD_VAR 0 2
37749: PUSH
37750: FOR_TO
37751: IFFALSE 37843
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37753: LD_ADDR_VAR 0 4
37757: PUSH
37758: LD_VAR 0 2
37762: PUSH
37763: LD_VAR 0 3
37767: ARRAY
37768: PPUSH
37769: LD_INT 3
37771: PPUSH
37772: CALL_OW 259
37776: PUSH
37777: LD_VAR 0 2
37781: PUSH
37782: LD_VAR 0 3
37786: ARRAY
37787: PPUSH
37788: CALL_OW 432
37792: MINUS
37793: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37794: LD_VAR 0 4
37798: PUSH
37799: LD_VAR 0 5
37803: PPUSH
37804: LD_INT 3
37806: PPUSH
37807: CALL_OW 259
37811: PUSH
37812: LD_VAR 0 5
37816: PPUSH
37817: CALL_OW 432
37821: MINUS
37822: GREATEREQUAL
37823: IFFALSE 37841
// mech := result [ i ] ;
37825: LD_ADDR_VAR 0 5
37829: PUSH
37830: LD_VAR 0 2
37834: PUSH
37835: LD_VAR 0 3
37839: ARRAY
37840: ST_TO_ADDR
// end ;
37841: GO 37750
37843: POP
37844: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37845: LD_VAR 0 1
37849: PPUSH
37850: LD_VAR 0 5
37854: PPUSH
37855: CALL_OW 135
// end ;
37859: LD_VAR 0 2
37863: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37864: LD_INT 0
37866: PPUSH
37867: PPUSH
37868: PPUSH
37869: PPUSH
37870: PPUSH
37871: PPUSH
37872: PPUSH
37873: PPUSH
37874: PPUSH
37875: PPUSH
37876: PPUSH
37877: PPUSH
37878: PPUSH
// result := [ ] ;
37879: LD_ADDR_VAR 0 7
37883: PUSH
37884: EMPTY
37885: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37886: LD_VAR 0 1
37890: PPUSH
37891: CALL_OW 266
37895: PUSH
37896: LD_INT 0
37898: PUSH
37899: LD_INT 1
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: IN
37906: NOT
37907: IFFALSE 37911
// exit ;
37909: GO 39545
// if name then
37911: LD_VAR 0 3
37915: IFFALSE 37931
// SetBName ( base_dep , name ) ;
37917: LD_VAR 0 1
37921: PPUSH
37922: LD_VAR 0 3
37926: PPUSH
37927: CALL_OW 500
// base := GetBase ( base_dep ) ;
37931: LD_ADDR_VAR 0 15
37935: PUSH
37936: LD_VAR 0 1
37940: PPUSH
37941: CALL_OW 274
37945: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37946: LD_ADDR_VAR 0 16
37950: PUSH
37951: LD_VAR 0 1
37955: PPUSH
37956: CALL_OW 255
37960: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37961: LD_ADDR_VAR 0 17
37965: PUSH
37966: LD_VAR 0 1
37970: PPUSH
37971: CALL_OW 248
37975: ST_TO_ADDR
// if sources then
37976: LD_VAR 0 5
37980: IFFALSE 38027
// for i = 1 to 3 do
37982: LD_ADDR_VAR 0 8
37986: PUSH
37987: DOUBLE
37988: LD_INT 1
37990: DEC
37991: ST_TO_ADDR
37992: LD_INT 3
37994: PUSH
37995: FOR_TO
37996: IFFALSE 38025
// AddResourceType ( base , i , sources [ i ] ) ;
37998: LD_VAR 0 15
38002: PPUSH
38003: LD_VAR 0 8
38007: PPUSH
38008: LD_VAR 0 5
38012: PUSH
38013: LD_VAR 0 8
38017: ARRAY
38018: PPUSH
38019: CALL_OW 276
38023: GO 37995
38025: POP
38026: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38027: LD_ADDR_VAR 0 18
38031: PUSH
38032: LD_VAR 0 15
38036: PPUSH
38037: LD_VAR 0 2
38041: PPUSH
38042: LD_INT 1
38044: PPUSH
38045: CALL 37288 0 3
38049: ST_TO_ADDR
// InitHc ;
38050: CALL_OW 19
// InitUc ;
38054: CALL_OW 18
// uc_side := side ;
38058: LD_ADDR_OWVAR 20
38062: PUSH
38063: LD_VAR 0 16
38067: ST_TO_ADDR
// uc_nation := nation ;
38068: LD_ADDR_OWVAR 21
38072: PUSH
38073: LD_VAR 0 17
38077: ST_TO_ADDR
// if buildings then
38078: LD_VAR 0 18
38082: IFFALSE 39404
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38084: LD_ADDR_VAR 0 19
38088: PUSH
38089: LD_VAR 0 18
38093: PPUSH
38094: LD_INT 2
38096: PUSH
38097: LD_INT 30
38099: PUSH
38100: LD_INT 29
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 30
38109: PUSH
38110: LD_INT 30
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: LIST
38121: PPUSH
38122: CALL_OW 72
38126: ST_TO_ADDR
// if tmp then
38127: LD_VAR 0 19
38131: IFFALSE 38179
// for i in tmp do
38133: LD_ADDR_VAR 0 8
38137: PUSH
38138: LD_VAR 0 19
38142: PUSH
38143: FOR_IN
38144: IFFALSE 38177
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38146: LD_VAR 0 8
38150: PPUSH
38151: CALL_OW 250
38155: PPUSH
38156: LD_VAR 0 8
38160: PPUSH
38161: CALL_OW 251
38165: PPUSH
38166: LD_VAR 0 16
38170: PPUSH
38171: CALL_OW 441
38175: GO 38143
38177: POP
38178: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38179: LD_VAR 0 18
38183: PPUSH
38184: LD_INT 2
38186: PUSH
38187: LD_INT 30
38189: PUSH
38190: LD_INT 32
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 30
38199: PUSH
38200: LD_INT 33
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: LIST
38211: PPUSH
38212: CALL_OW 72
38216: IFFALSE 38304
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38218: LD_ADDR_VAR 0 8
38222: PUSH
38223: LD_VAR 0 18
38227: PPUSH
38228: LD_INT 2
38230: PUSH
38231: LD_INT 30
38233: PUSH
38234: LD_INT 32
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 30
38243: PUSH
38244: LD_INT 33
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: LIST
38255: PPUSH
38256: CALL_OW 72
38260: PUSH
38261: FOR_IN
38262: IFFALSE 38302
// begin if not GetBWeapon ( i ) then
38264: LD_VAR 0 8
38268: PPUSH
38269: CALL_OW 269
38273: NOT
38274: IFFALSE 38300
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38276: LD_VAR 0 8
38280: PPUSH
38281: LD_VAR 0 8
38285: PPUSH
38286: LD_VAR 0 2
38290: PPUSH
38291: CALL 39550 0 2
38295: PPUSH
38296: CALL_OW 431
// end ;
38300: GO 38261
38302: POP
38303: POP
// end ; for i = 1 to personel do
38304: LD_ADDR_VAR 0 8
38308: PUSH
38309: DOUBLE
38310: LD_INT 1
38312: DEC
38313: ST_TO_ADDR
38314: LD_VAR 0 6
38318: PUSH
38319: FOR_TO
38320: IFFALSE 39384
// begin if i > 4 then
38322: LD_VAR 0 8
38326: PUSH
38327: LD_INT 4
38329: GREATER
38330: IFFALSE 38334
// break ;
38332: GO 39384
// case i of 1 :
38334: LD_VAR 0 8
38338: PUSH
38339: LD_INT 1
38341: DOUBLE
38342: EQUAL
38343: IFTRUE 38347
38345: GO 38427
38347: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38348: LD_ADDR_VAR 0 12
38352: PUSH
38353: LD_VAR 0 18
38357: PPUSH
38358: LD_INT 22
38360: PUSH
38361: LD_VAR 0 16
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 58
38372: PUSH
38373: EMPTY
38374: LIST
38375: PUSH
38376: LD_INT 2
38378: PUSH
38379: LD_INT 30
38381: PUSH
38382: LD_INT 32
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 30
38391: PUSH
38392: LD_INT 4
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 30
38401: PUSH
38402: LD_INT 5
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: PPUSH
38420: CALL_OW 72
38424: ST_TO_ADDR
38425: GO 38649
38427: LD_INT 2
38429: DOUBLE
38430: EQUAL
38431: IFTRUE 38435
38433: GO 38497
38435: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38436: LD_ADDR_VAR 0 12
38440: PUSH
38441: LD_VAR 0 18
38445: PPUSH
38446: LD_INT 22
38448: PUSH
38449: LD_VAR 0 16
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 2
38460: PUSH
38461: LD_INT 30
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 30
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: LIST
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PPUSH
38490: CALL_OW 72
38494: ST_TO_ADDR
38495: GO 38649
38497: LD_INT 3
38499: DOUBLE
38500: EQUAL
38501: IFTRUE 38505
38503: GO 38567
38505: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38506: LD_ADDR_VAR 0 12
38510: PUSH
38511: LD_VAR 0 18
38515: PPUSH
38516: LD_INT 22
38518: PUSH
38519: LD_VAR 0 16
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 2
38530: PUSH
38531: LD_INT 30
38533: PUSH
38534: LD_INT 2
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 30
38543: PUSH
38544: LD_INT 3
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PPUSH
38560: CALL_OW 72
38564: ST_TO_ADDR
38565: GO 38649
38567: LD_INT 4
38569: DOUBLE
38570: EQUAL
38571: IFTRUE 38575
38573: GO 38648
38575: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38576: LD_ADDR_VAR 0 12
38580: PUSH
38581: LD_VAR 0 18
38585: PPUSH
38586: LD_INT 22
38588: PUSH
38589: LD_VAR 0 16
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 2
38600: PUSH
38601: LD_INT 30
38603: PUSH
38604: LD_INT 6
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 30
38613: PUSH
38614: LD_INT 7
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 30
38623: PUSH
38624: LD_INT 8
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PPUSH
38641: CALL_OW 72
38645: ST_TO_ADDR
38646: GO 38649
38648: POP
// if i = 1 then
38649: LD_VAR 0 8
38653: PUSH
38654: LD_INT 1
38656: EQUAL
38657: IFFALSE 38768
// begin tmp := [ ] ;
38659: LD_ADDR_VAR 0 19
38663: PUSH
38664: EMPTY
38665: ST_TO_ADDR
// for j in f do
38666: LD_ADDR_VAR 0 9
38670: PUSH
38671: LD_VAR 0 12
38675: PUSH
38676: FOR_IN
38677: IFFALSE 38750
// if GetBType ( j ) = b_bunker then
38679: LD_VAR 0 9
38683: PPUSH
38684: CALL_OW 266
38688: PUSH
38689: LD_INT 32
38691: EQUAL
38692: IFFALSE 38719
// tmp := Insert ( tmp , 1 , j ) else
38694: LD_ADDR_VAR 0 19
38698: PUSH
38699: LD_VAR 0 19
38703: PPUSH
38704: LD_INT 1
38706: PPUSH
38707: LD_VAR 0 9
38711: PPUSH
38712: CALL_OW 2
38716: ST_TO_ADDR
38717: GO 38748
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38719: LD_ADDR_VAR 0 19
38723: PUSH
38724: LD_VAR 0 19
38728: PPUSH
38729: LD_VAR 0 19
38733: PUSH
38734: LD_INT 1
38736: PLUS
38737: PPUSH
38738: LD_VAR 0 9
38742: PPUSH
38743: CALL_OW 2
38747: ST_TO_ADDR
38748: GO 38676
38750: POP
38751: POP
// if tmp then
38752: LD_VAR 0 19
38756: IFFALSE 38768
// f := tmp ;
38758: LD_ADDR_VAR 0 12
38762: PUSH
38763: LD_VAR 0 19
38767: ST_TO_ADDR
// end ; x := personel [ i ] ;
38768: LD_ADDR_VAR 0 13
38772: PUSH
38773: LD_VAR 0 6
38777: PUSH
38778: LD_VAR 0 8
38782: ARRAY
38783: ST_TO_ADDR
// if x = - 1 then
38784: LD_VAR 0 13
38788: PUSH
38789: LD_INT 1
38791: NEG
38792: EQUAL
38793: IFFALSE 39002
// begin for j in f do
38795: LD_ADDR_VAR 0 9
38799: PUSH
38800: LD_VAR 0 12
38804: PUSH
38805: FOR_IN
38806: IFFALSE 38998
// repeat InitHc ;
38808: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38812: LD_VAR 0 9
38816: PPUSH
38817: CALL_OW 266
38821: PUSH
38822: LD_INT 5
38824: EQUAL
38825: IFFALSE 38895
// begin if UnitsInside ( j ) < 3 then
38827: LD_VAR 0 9
38831: PPUSH
38832: CALL_OW 313
38836: PUSH
38837: LD_INT 3
38839: LESS
38840: IFFALSE 38876
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38842: LD_INT 0
38844: PPUSH
38845: LD_INT 5
38847: PUSH
38848: LD_INT 8
38850: PUSH
38851: LD_INT 9
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: LIST
38858: PUSH
38859: LD_VAR 0 17
38863: ARRAY
38864: PPUSH
38865: LD_VAR 0 4
38869: PPUSH
38870: CALL_OW 380
38874: GO 38893
// PrepareHuman ( false , i , skill ) ;
38876: LD_INT 0
38878: PPUSH
38879: LD_VAR 0 8
38883: PPUSH
38884: LD_VAR 0 4
38888: PPUSH
38889: CALL_OW 380
// end else
38893: GO 38912
// PrepareHuman ( false , i , skill ) ;
38895: LD_INT 0
38897: PPUSH
38898: LD_VAR 0 8
38902: PPUSH
38903: LD_VAR 0 4
38907: PPUSH
38908: CALL_OW 380
// un := CreateHuman ;
38912: LD_ADDR_VAR 0 14
38916: PUSH
38917: CALL_OW 44
38921: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38922: LD_ADDR_VAR 0 7
38926: PUSH
38927: LD_VAR 0 7
38931: PPUSH
38932: LD_INT 1
38934: PPUSH
38935: LD_VAR 0 14
38939: PPUSH
38940: CALL_OW 2
38944: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38945: LD_VAR 0 14
38949: PPUSH
38950: LD_VAR 0 9
38954: PPUSH
38955: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38959: LD_VAR 0 9
38963: PPUSH
38964: CALL_OW 313
38968: PUSH
38969: LD_INT 6
38971: EQUAL
38972: PUSH
38973: LD_VAR 0 9
38977: PPUSH
38978: CALL_OW 266
38982: PUSH
38983: LD_INT 32
38985: PUSH
38986: LD_INT 31
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: IN
38993: OR
38994: IFFALSE 38808
38996: GO 38805
38998: POP
38999: POP
// end else
39000: GO 39382
// for j = 1 to x do
39002: LD_ADDR_VAR 0 9
39006: PUSH
39007: DOUBLE
39008: LD_INT 1
39010: DEC
39011: ST_TO_ADDR
39012: LD_VAR 0 13
39016: PUSH
39017: FOR_TO
39018: IFFALSE 39380
// begin InitHc ;
39020: CALL_OW 19
// if not f then
39024: LD_VAR 0 12
39028: NOT
39029: IFFALSE 39118
// begin PrepareHuman ( false , i , skill ) ;
39031: LD_INT 0
39033: PPUSH
39034: LD_VAR 0 8
39038: PPUSH
39039: LD_VAR 0 4
39043: PPUSH
39044: CALL_OW 380
// un := CreateHuman ;
39048: LD_ADDR_VAR 0 14
39052: PUSH
39053: CALL_OW 44
39057: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39058: LD_ADDR_VAR 0 7
39062: PUSH
39063: LD_VAR 0 7
39067: PPUSH
39068: LD_INT 1
39070: PPUSH
39071: LD_VAR 0 14
39075: PPUSH
39076: CALL_OW 2
39080: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39081: LD_VAR 0 14
39085: PPUSH
39086: LD_VAR 0 1
39090: PPUSH
39091: CALL_OW 250
39095: PPUSH
39096: LD_VAR 0 1
39100: PPUSH
39101: CALL_OW 251
39105: PPUSH
39106: LD_INT 10
39108: PPUSH
39109: LD_INT 0
39111: PPUSH
39112: CALL_OW 50
// continue ;
39116: GO 39017
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39118: LD_VAR 0 12
39122: PUSH
39123: LD_INT 1
39125: ARRAY
39126: PPUSH
39127: CALL_OW 313
39131: PUSH
39132: LD_VAR 0 12
39136: PUSH
39137: LD_INT 1
39139: ARRAY
39140: PPUSH
39141: CALL_OW 266
39145: PUSH
39146: LD_INT 32
39148: PUSH
39149: LD_INT 31
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: IN
39156: AND
39157: PUSH
39158: LD_VAR 0 12
39162: PUSH
39163: LD_INT 1
39165: ARRAY
39166: PPUSH
39167: CALL_OW 313
39171: PUSH
39172: LD_INT 6
39174: EQUAL
39175: OR
39176: IFFALSE 39196
// f := Delete ( f , 1 ) ;
39178: LD_ADDR_VAR 0 12
39182: PUSH
39183: LD_VAR 0 12
39187: PPUSH
39188: LD_INT 1
39190: PPUSH
39191: CALL_OW 3
39195: ST_TO_ADDR
// if not f then
39196: LD_VAR 0 12
39200: NOT
39201: IFFALSE 39219
// begin x := x + 2 ;
39203: LD_ADDR_VAR 0 13
39207: PUSH
39208: LD_VAR 0 13
39212: PUSH
39213: LD_INT 2
39215: PLUS
39216: ST_TO_ADDR
// continue ;
39217: GO 39017
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39219: LD_VAR 0 12
39223: PUSH
39224: LD_INT 1
39226: ARRAY
39227: PPUSH
39228: CALL_OW 266
39232: PUSH
39233: LD_INT 5
39235: EQUAL
39236: IFFALSE 39310
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39238: LD_VAR 0 12
39242: PUSH
39243: LD_INT 1
39245: ARRAY
39246: PPUSH
39247: CALL_OW 313
39251: PUSH
39252: LD_INT 3
39254: LESS
39255: IFFALSE 39291
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39257: LD_INT 0
39259: PPUSH
39260: LD_INT 5
39262: PUSH
39263: LD_INT 8
39265: PUSH
39266: LD_INT 9
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: LIST
39273: PUSH
39274: LD_VAR 0 17
39278: ARRAY
39279: PPUSH
39280: LD_VAR 0 4
39284: PPUSH
39285: CALL_OW 380
39289: GO 39308
// PrepareHuman ( false , i , skill ) ;
39291: LD_INT 0
39293: PPUSH
39294: LD_VAR 0 8
39298: PPUSH
39299: LD_VAR 0 4
39303: PPUSH
39304: CALL_OW 380
// end else
39308: GO 39327
// PrepareHuman ( false , i , skill ) ;
39310: LD_INT 0
39312: PPUSH
39313: LD_VAR 0 8
39317: PPUSH
39318: LD_VAR 0 4
39322: PPUSH
39323: CALL_OW 380
// un := CreateHuman ;
39327: LD_ADDR_VAR 0 14
39331: PUSH
39332: CALL_OW 44
39336: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39337: LD_ADDR_VAR 0 7
39341: PUSH
39342: LD_VAR 0 7
39346: PPUSH
39347: LD_INT 1
39349: PPUSH
39350: LD_VAR 0 14
39354: PPUSH
39355: CALL_OW 2
39359: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39360: LD_VAR 0 14
39364: PPUSH
39365: LD_VAR 0 12
39369: PUSH
39370: LD_INT 1
39372: ARRAY
39373: PPUSH
39374: CALL_OW 52
// end ;
39378: GO 39017
39380: POP
39381: POP
// end ;
39382: GO 38319
39384: POP
39385: POP
// result := result ^ buildings ;
39386: LD_ADDR_VAR 0 7
39390: PUSH
39391: LD_VAR 0 7
39395: PUSH
39396: LD_VAR 0 18
39400: ADD
39401: ST_TO_ADDR
// end else
39402: GO 39545
// begin for i = 1 to personel do
39404: LD_ADDR_VAR 0 8
39408: PUSH
39409: DOUBLE
39410: LD_INT 1
39412: DEC
39413: ST_TO_ADDR
39414: LD_VAR 0 6
39418: PUSH
39419: FOR_TO
39420: IFFALSE 39543
// begin if i > 4 then
39422: LD_VAR 0 8
39426: PUSH
39427: LD_INT 4
39429: GREATER
39430: IFFALSE 39434
// break ;
39432: GO 39543
// x := personel [ i ] ;
39434: LD_ADDR_VAR 0 13
39438: PUSH
39439: LD_VAR 0 6
39443: PUSH
39444: LD_VAR 0 8
39448: ARRAY
39449: ST_TO_ADDR
// if x = - 1 then
39450: LD_VAR 0 13
39454: PUSH
39455: LD_INT 1
39457: NEG
39458: EQUAL
39459: IFFALSE 39463
// continue ;
39461: GO 39419
// PrepareHuman ( false , i , skill ) ;
39463: LD_INT 0
39465: PPUSH
39466: LD_VAR 0 8
39470: PPUSH
39471: LD_VAR 0 4
39475: PPUSH
39476: CALL_OW 380
// un := CreateHuman ;
39480: LD_ADDR_VAR 0 14
39484: PUSH
39485: CALL_OW 44
39489: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39490: LD_VAR 0 14
39494: PPUSH
39495: LD_VAR 0 1
39499: PPUSH
39500: CALL_OW 250
39504: PPUSH
39505: LD_VAR 0 1
39509: PPUSH
39510: CALL_OW 251
39514: PPUSH
39515: LD_INT 10
39517: PPUSH
39518: LD_INT 0
39520: PPUSH
39521: CALL_OW 50
// result := result ^ un ;
39525: LD_ADDR_VAR 0 7
39529: PUSH
39530: LD_VAR 0 7
39534: PUSH
39535: LD_VAR 0 14
39539: ADD
39540: ST_TO_ADDR
// end ;
39541: GO 39419
39543: POP
39544: POP
// end ; end ;
39545: LD_VAR 0 7
39549: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39550: LD_INT 0
39552: PPUSH
39553: PPUSH
39554: PPUSH
39555: PPUSH
39556: PPUSH
39557: PPUSH
39558: PPUSH
39559: PPUSH
39560: PPUSH
39561: PPUSH
39562: PPUSH
39563: PPUSH
39564: PPUSH
39565: PPUSH
39566: PPUSH
39567: PPUSH
// result := false ;
39568: LD_ADDR_VAR 0 3
39572: PUSH
39573: LD_INT 0
39575: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39576: LD_VAR 0 1
39580: NOT
39581: PUSH
39582: LD_VAR 0 1
39586: PPUSH
39587: CALL_OW 266
39591: PUSH
39592: LD_INT 32
39594: PUSH
39595: LD_INT 33
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: IN
39602: NOT
39603: OR
39604: IFFALSE 39608
// exit ;
39606: GO 40717
// nat := GetNation ( tower ) ;
39608: LD_ADDR_VAR 0 12
39612: PUSH
39613: LD_VAR 0 1
39617: PPUSH
39618: CALL_OW 248
39622: ST_TO_ADDR
// side := GetSide ( tower ) ;
39623: LD_ADDR_VAR 0 16
39627: PUSH
39628: LD_VAR 0 1
39632: PPUSH
39633: CALL_OW 255
39637: ST_TO_ADDR
// x := GetX ( tower ) ;
39638: LD_ADDR_VAR 0 10
39642: PUSH
39643: LD_VAR 0 1
39647: PPUSH
39648: CALL_OW 250
39652: ST_TO_ADDR
// y := GetY ( tower ) ;
39653: LD_ADDR_VAR 0 11
39657: PUSH
39658: LD_VAR 0 1
39662: PPUSH
39663: CALL_OW 251
39667: ST_TO_ADDR
// if not x or not y then
39668: LD_VAR 0 10
39672: NOT
39673: PUSH
39674: LD_VAR 0 11
39678: NOT
39679: OR
39680: IFFALSE 39684
// exit ;
39682: GO 40717
// weapon := 0 ;
39684: LD_ADDR_VAR 0 18
39688: PUSH
39689: LD_INT 0
39691: ST_TO_ADDR
// fac_list := [ ] ;
39692: LD_ADDR_VAR 0 17
39696: PUSH
39697: EMPTY
39698: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39699: LD_ADDR_VAR 0 6
39703: PUSH
39704: LD_VAR 0 1
39708: PPUSH
39709: CALL_OW 274
39713: PPUSH
39714: LD_VAR 0 2
39718: PPUSH
39719: LD_INT 0
39721: PPUSH
39722: CALL 37288 0 3
39726: PPUSH
39727: LD_INT 30
39729: PUSH
39730: LD_INT 3
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PPUSH
39737: CALL_OW 72
39741: ST_TO_ADDR
// if not factories then
39742: LD_VAR 0 6
39746: NOT
39747: IFFALSE 39751
// exit ;
39749: GO 40717
// for i in factories do
39751: LD_ADDR_VAR 0 8
39755: PUSH
39756: LD_VAR 0 6
39760: PUSH
39761: FOR_IN
39762: IFFALSE 39787
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39764: LD_ADDR_VAR 0 17
39768: PUSH
39769: LD_VAR 0 17
39773: PUSH
39774: LD_VAR 0 8
39778: PPUSH
39779: CALL_OW 478
39783: UNION
39784: ST_TO_ADDR
39785: GO 39761
39787: POP
39788: POP
// if not fac_list then
39789: LD_VAR 0 17
39793: NOT
39794: IFFALSE 39798
// exit ;
39796: GO 40717
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39798: LD_ADDR_VAR 0 5
39802: PUSH
39803: LD_INT 4
39805: PUSH
39806: LD_INT 5
39808: PUSH
39809: LD_INT 9
39811: PUSH
39812: LD_INT 10
39814: PUSH
39815: LD_INT 6
39817: PUSH
39818: LD_INT 7
39820: PUSH
39821: LD_INT 11
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 27
39835: PUSH
39836: LD_INT 28
39838: PUSH
39839: LD_INT 26
39841: PUSH
39842: LD_INT 30
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 43
39853: PUSH
39854: LD_INT 44
39856: PUSH
39857: LD_INT 46
39859: PUSH
39860: LD_INT 45
39862: PUSH
39863: LD_INT 47
39865: PUSH
39866: LD_INT 49
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: LIST
39881: PUSH
39882: LD_VAR 0 12
39886: ARRAY
39887: ST_TO_ADDR
// list := list isect fac_list ;
39888: LD_ADDR_VAR 0 5
39892: PUSH
39893: LD_VAR 0 5
39897: PUSH
39898: LD_VAR 0 17
39902: ISECT
39903: ST_TO_ADDR
// if not list then
39904: LD_VAR 0 5
39908: NOT
39909: IFFALSE 39913
// exit ;
39911: GO 40717
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39913: LD_VAR 0 12
39917: PUSH
39918: LD_INT 3
39920: EQUAL
39921: PUSH
39922: LD_INT 49
39924: PUSH
39925: LD_VAR 0 5
39929: IN
39930: AND
39931: PUSH
39932: LD_INT 31
39934: PPUSH
39935: LD_VAR 0 16
39939: PPUSH
39940: CALL_OW 321
39944: PUSH
39945: LD_INT 2
39947: EQUAL
39948: AND
39949: IFFALSE 40009
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39951: LD_INT 22
39953: PUSH
39954: LD_VAR 0 16
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 35
39965: PUSH
39966: LD_INT 49
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 91
39975: PUSH
39976: LD_VAR 0 1
39980: PUSH
39981: LD_INT 10
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: LIST
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: LIST
39993: PPUSH
39994: CALL_OW 69
39998: NOT
39999: IFFALSE 40009
// weapon := ru_time_lapser ;
40001: LD_ADDR_VAR 0 18
40005: PUSH
40006: LD_INT 49
40008: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40009: LD_VAR 0 12
40013: PUSH
40014: LD_INT 1
40016: PUSH
40017: LD_INT 2
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: IN
40024: PUSH
40025: LD_INT 11
40027: PUSH
40028: LD_VAR 0 5
40032: IN
40033: PUSH
40034: LD_INT 30
40036: PUSH
40037: LD_VAR 0 5
40041: IN
40042: OR
40043: AND
40044: PUSH
40045: LD_INT 6
40047: PPUSH
40048: LD_VAR 0 16
40052: PPUSH
40053: CALL_OW 321
40057: PUSH
40058: LD_INT 2
40060: EQUAL
40061: AND
40062: IFFALSE 40227
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40064: LD_INT 22
40066: PUSH
40067: LD_VAR 0 16
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 2
40078: PUSH
40079: LD_INT 35
40081: PUSH
40082: LD_INT 11
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 35
40091: PUSH
40092: LD_INT 30
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 91
40106: PUSH
40107: LD_VAR 0 1
40111: PUSH
40112: LD_INT 18
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: LIST
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: LIST
40124: PPUSH
40125: CALL_OW 69
40129: NOT
40130: PUSH
40131: LD_INT 22
40133: PUSH
40134: LD_VAR 0 16
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 2
40145: PUSH
40146: LD_INT 30
40148: PUSH
40149: LD_INT 32
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 30
40158: PUSH
40159: LD_INT 33
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 91
40173: PUSH
40174: LD_VAR 0 1
40178: PUSH
40179: LD_INT 12
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: LIST
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: LIST
40191: PUSH
40192: EMPTY
40193: LIST
40194: PPUSH
40195: CALL_OW 69
40199: PUSH
40200: LD_INT 2
40202: GREATER
40203: AND
40204: IFFALSE 40227
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40206: LD_ADDR_VAR 0 18
40210: PUSH
40211: LD_INT 11
40213: PUSH
40214: LD_INT 30
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_VAR 0 12
40225: ARRAY
40226: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40227: LD_VAR 0 18
40231: NOT
40232: PUSH
40233: LD_INT 40
40235: PPUSH
40236: LD_VAR 0 16
40240: PPUSH
40241: CALL_OW 321
40245: PUSH
40246: LD_INT 2
40248: EQUAL
40249: AND
40250: PUSH
40251: LD_INT 7
40253: PUSH
40254: LD_VAR 0 5
40258: IN
40259: PUSH
40260: LD_INT 28
40262: PUSH
40263: LD_VAR 0 5
40267: IN
40268: OR
40269: PUSH
40270: LD_INT 45
40272: PUSH
40273: LD_VAR 0 5
40277: IN
40278: OR
40279: AND
40280: IFFALSE 40534
// begin hex := GetHexInfo ( x , y ) ;
40282: LD_ADDR_VAR 0 4
40286: PUSH
40287: LD_VAR 0 10
40291: PPUSH
40292: LD_VAR 0 11
40296: PPUSH
40297: CALL_OW 546
40301: ST_TO_ADDR
// if hex [ 1 ] then
40302: LD_VAR 0 4
40306: PUSH
40307: LD_INT 1
40309: ARRAY
40310: IFFALSE 40314
// exit ;
40312: GO 40717
// height := hex [ 2 ] ;
40314: LD_ADDR_VAR 0 15
40318: PUSH
40319: LD_VAR 0 4
40323: PUSH
40324: LD_INT 2
40326: ARRAY
40327: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40328: LD_ADDR_VAR 0 14
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: LD_INT 2
40338: PUSH
40339: LD_INT 3
40341: PUSH
40342: LD_INT 5
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: ST_TO_ADDR
// for i in tmp do
40351: LD_ADDR_VAR 0 8
40355: PUSH
40356: LD_VAR 0 14
40360: PUSH
40361: FOR_IN
40362: IFFALSE 40532
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40364: LD_ADDR_VAR 0 9
40368: PUSH
40369: LD_VAR 0 10
40373: PPUSH
40374: LD_VAR 0 8
40378: PPUSH
40379: LD_INT 5
40381: PPUSH
40382: CALL_OW 272
40386: PUSH
40387: LD_VAR 0 11
40391: PPUSH
40392: LD_VAR 0 8
40396: PPUSH
40397: LD_INT 5
40399: PPUSH
40400: CALL_OW 273
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40409: LD_VAR 0 9
40413: PUSH
40414: LD_INT 1
40416: ARRAY
40417: PPUSH
40418: LD_VAR 0 9
40422: PUSH
40423: LD_INT 2
40425: ARRAY
40426: PPUSH
40427: CALL_OW 488
40431: IFFALSE 40530
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40433: LD_ADDR_VAR 0 4
40437: PUSH
40438: LD_VAR 0 9
40442: PUSH
40443: LD_INT 1
40445: ARRAY
40446: PPUSH
40447: LD_VAR 0 9
40451: PUSH
40452: LD_INT 2
40454: ARRAY
40455: PPUSH
40456: CALL_OW 546
40460: ST_TO_ADDR
// if hex [ 1 ] then
40461: LD_VAR 0 4
40465: PUSH
40466: LD_INT 1
40468: ARRAY
40469: IFFALSE 40473
// continue ;
40471: GO 40361
// h := hex [ 2 ] ;
40473: LD_ADDR_VAR 0 13
40477: PUSH
40478: LD_VAR 0 4
40482: PUSH
40483: LD_INT 2
40485: ARRAY
40486: ST_TO_ADDR
// if h + 7 < height then
40487: LD_VAR 0 13
40491: PUSH
40492: LD_INT 7
40494: PLUS
40495: PUSH
40496: LD_VAR 0 15
40500: LESS
40501: IFFALSE 40530
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40503: LD_ADDR_VAR 0 18
40507: PUSH
40508: LD_INT 7
40510: PUSH
40511: LD_INT 28
40513: PUSH
40514: LD_INT 45
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: LIST
40521: PUSH
40522: LD_VAR 0 12
40526: ARRAY
40527: ST_TO_ADDR
// break ;
40528: GO 40532
// end ; end ; end ;
40530: GO 40361
40532: POP
40533: POP
// end ; if not weapon then
40534: LD_VAR 0 18
40538: NOT
40539: IFFALSE 40599
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40541: LD_ADDR_VAR 0 5
40545: PUSH
40546: LD_VAR 0 5
40550: PUSH
40551: LD_INT 11
40553: PUSH
40554: LD_INT 30
40556: PUSH
40557: LD_INT 49
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: LIST
40564: DIFF
40565: ST_TO_ADDR
// if not list then
40566: LD_VAR 0 5
40570: NOT
40571: IFFALSE 40575
// exit ;
40573: GO 40717
// weapon := list [ rand ( 1 , list ) ] ;
40575: LD_ADDR_VAR 0 18
40579: PUSH
40580: LD_VAR 0 5
40584: PUSH
40585: LD_INT 1
40587: PPUSH
40588: LD_VAR 0 5
40592: PPUSH
40593: CALL_OW 12
40597: ARRAY
40598: ST_TO_ADDR
// end ; if weapon then
40599: LD_VAR 0 18
40603: IFFALSE 40717
// begin tmp := CostOfWeapon ( weapon ) ;
40605: LD_ADDR_VAR 0 14
40609: PUSH
40610: LD_VAR 0 18
40614: PPUSH
40615: CALL_OW 451
40619: ST_TO_ADDR
// j := GetBase ( tower ) ;
40620: LD_ADDR_VAR 0 9
40624: PUSH
40625: LD_VAR 0 1
40629: PPUSH
40630: CALL_OW 274
40634: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40635: LD_VAR 0 9
40639: PPUSH
40640: LD_INT 1
40642: PPUSH
40643: CALL_OW 275
40647: PUSH
40648: LD_VAR 0 14
40652: PUSH
40653: LD_INT 1
40655: ARRAY
40656: GREATEREQUAL
40657: PUSH
40658: LD_VAR 0 9
40662: PPUSH
40663: LD_INT 2
40665: PPUSH
40666: CALL_OW 275
40670: PUSH
40671: LD_VAR 0 14
40675: PUSH
40676: LD_INT 2
40678: ARRAY
40679: GREATEREQUAL
40680: AND
40681: PUSH
40682: LD_VAR 0 9
40686: PPUSH
40687: LD_INT 3
40689: PPUSH
40690: CALL_OW 275
40694: PUSH
40695: LD_VAR 0 14
40699: PUSH
40700: LD_INT 3
40702: ARRAY
40703: GREATEREQUAL
40704: AND
40705: IFFALSE 40717
// result := weapon ;
40707: LD_ADDR_VAR 0 3
40711: PUSH
40712: LD_VAR 0 18
40716: ST_TO_ADDR
// end ; end ;
40717: LD_VAR 0 3
40721: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40722: LD_INT 0
40724: PPUSH
40725: PPUSH
// result := true ;
40726: LD_ADDR_VAR 0 3
40730: PUSH
40731: LD_INT 1
40733: ST_TO_ADDR
// if array1 = array2 then
40734: LD_VAR 0 1
40738: PUSH
40739: LD_VAR 0 2
40743: EQUAL
40744: IFFALSE 40804
// begin for i = 1 to array1 do
40746: LD_ADDR_VAR 0 4
40750: PUSH
40751: DOUBLE
40752: LD_INT 1
40754: DEC
40755: ST_TO_ADDR
40756: LD_VAR 0 1
40760: PUSH
40761: FOR_TO
40762: IFFALSE 40800
// if array1 [ i ] <> array2 [ i ] then
40764: LD_VAR 0 1
40768: PUSH
40769: LD_VAR 0 4
40773: ARRAY
40774: PUSH
40775: LD_VAR 0 2
40779: PUSH
40780: LD_VAR 0 4
40784: ARRAY
40785: NONEQUAL
40786: IFFALSE 40798
// begin result := false ;
40788: LD_ADDR_VAR 0 3
40792: PUSH
40793: LD_INT 0
40795: ST_TO_ADDR
// break ;
40796: GO 40800
// end ;
40798: GO 40761
40800: POP
40801: POP
// end else
40802: GO 40812
// result := false ;
40804: LD_ADDR_VAR 0 3
40808: PUSH
40809: LD_INT 0
40811: ST_TO_ADDR
// end ;
40812: LD_VAR 0 3
40816: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40817: LD_INT 0
40819: PPUSH
40820: PPUSH
// if not array1 or not array2 then
40821: LD_VAR 0 1
40825: NOT
40826: PUSH
40827: LD_VAR 0 2
40831: NOT
40832: OR
40833: IFFALSE 40837
// exit ;
40835: GO 40901
// result := true ;
40837: LD_ADDR_VAR 0 3
40841: PUSH
40842: LD_INT 1
40844: ST_TO_ADDR
// for i = 1 to array1 do
40845: LD_ADDR_VAR 0 4
40849: PUSH
40850: DOUBLE
40851: LD_INT 1
40853: DEC
40854: ST_TO_ADDR
40855: LD_VAR 0 1
40859: PUSH
40860: FOR_TO
40861: IFFALSE 40899
// if array1 [ i ] <> array2 [ i ] then
40863: LD_VAR 0 1
40867: PUSH
40868: LD_VAR 0 4
40872: ARRAY
40873: PUSH
40874: LD_VAR 0 2
40878: PUSH
40879: LD_VAR 0 4
40883: ARRAY
40884: NONEQUAL
40885: IFFALSE 40897
// begin result := false ;
40887: LD_ADDR_VAR 0 3
40891: PUSH
40892: LD_INT 0
40894: ST_TO_ADDR
// break ;
40895: GO 40899
// end ;
40897: GO 40860
40899: POP
40900: POP
// end ;
40901: LD_VAR 0 3
40905: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40906: LD_INT 0
40908: PPUSH
40909: PPUSH
40910: PPUSH
// pom := GetBase ( fac ) ;
40911: LD_ADDR_VAR 0 5
40915: PUSH
40916: LD_VAR 0 1
40920: PPUSH
40921: CALL_OW 274
40925: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40926: LD_ADDR_VAR 0 4
40930: PUSH
40931: LD_VAR 0 2
40935: PUSH
40936: LD_INT 1
40938: ARRAY
40939: PPUSH
40940: LD_VAR 0 2
40944: PUSH
40945: LD_INT 2
40947: ARRAY
40948: PPUSH
40949: LD_VAR 0 2
40953: PUSH
40954: LD_INT 3
40956: ARRAY
40957: PPUSH
40958: LD_VAR 0 2
40962: PUSH
40963: LD_INT 4
40965: ARRAY
40966: PPUSH
40967: CALL_OW 449
40971: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40972: LD_ADDR_VAR 0 3
40976: PUSH
40977: LD_VAR 0 5
40981: PPUSH
40982: LD_INT 1
40984: PPUSH
40985: CALL_OW 275
40989: PUSH
40990: LD_VAR 0 4
40994: PUSH
40995: LD_INT 1
40997: ARRAY
40998: GREATEREQUAL
40999: PUSH
41000: LD_VAR 0 5
41004: PPUSH
41005: LD_INT 2
41007: PPUSH
41008: CALL_OW 275
41012: PUSH
41013: LD_VAR 0 4
41017: PUSH
41018: LD_INT 2
41020: ARRAY
41021: GREATEREQUAL
41022: AND
41023: PUSH
41024: LD_VAR 0 5
41028: PPUSH
41029: LD_INT 3
41031: PPUSH
41032: CALL_OW 275
41036: PUSH
41037: LD_VAR 0 4
41041: PUSH
41042: LD_INT 3
41044: ARRAY
41045: GREATEREQUAL
41046: AND
41047: ST_TO_ADDR
// end ;
41048: LD_VAR 0 3
41052: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41053: LD_INT 0
41055: PPUSH
41056: PPUSH
41057: PPUSH
41058: PPUSH
// pom := GetBase ( building ) ;
41059: LD_ADDR_VAR 0 3
41063: PUSH
41064: LD_VAR 0 1
41068: PPUSH
41069: CALL_OW 274
41073: ST_TO_ADDR
// if not pom then
41074: LD_VAR 0 3
41078: NOT
41079: IFFALSE 41083
// exit ;
41081: GO 41253
// btype := GetBType ( building ) ;
41083: LD_ADDR_VAR 0 5
41087: PUSH
41088: LD_VAR 0 1
41092: PPUSH
41093: CALL_OW 266
41097: ST_TO_ADDR
// if btype = b_armoury then
41098: LD_VAR 0 5
41102: PUSH
41103: LD_INT 4
41105: EQUAL
41106: IFFALSE 41116
// btype := b_barracks ;
41108: LD_ADDR_VAR 0 5
41112: PUSH
41113: LD_INT 5
41115: ST_TO_ADDR
// if btype = b_depot then
41116: LD_VAR 0 5
41120: PUSH
41121: LD_INT 0
41123: EQUAL
41124: IFFALSE 41134
// btype := b_warehouse ;
41126: LD_ADDR_VAR 0 5
41130: PUSH
41131: LD_INT 1
41133: ST_TO_ADDR
// if btype = b_workshop then
41134: LD_VAR 0 5
41138: PUSH
41139: LD_INT 2
41141: EQUAL
41142: IFFALSE 41152
// btype := b_factory ;
41144: LD_ADDR_VAR 0 5
41148: PUSH
41149: LD_INT 3
41151: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41152: LD_ADDR_VAR 0 4
41156: PUSH
41157: LD_VAR 0 5
41161: PPUSH
41162: LD_VAR 0 1
41166: PPUSH
41167: CALL_OW 248
41171: PPUSH
41172: CALL_OW 450
41176: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41177: LD_ADDR_VAR 0 2
41181: PUSH
41182: LD_VAR 0 3
41186: PPUSH
41187: LD_INT 1
41189: PPUSH
41190: CALL_OW 275
41194: PUSH
41195: LD_VAR 0 4
41199: PUSH
41200: LD_INT 1
41202: ARRAY
41203: GREATEREQUAL
41204: PUSH
41205: LD_VAR 0 3
41209: PPUSH
41210: LD_INT 2
41212: PPUSH
41213: CALL_OW 275
41217: PUSH
41218: LD_VAR 0 4
41222: PUSH
41223: LD_INT 2
41225: ARRAY
41226: GREATEREQUAL
41227: AND
41228: PUSH
41229: LD_VAR 0 3
41233: PPUSH
41234: LD_INT 3
41236: PPUSH
41237: CALL_OW 275
41241: PUSH
41242: LD_VAR 0 4
41246: PUSH
41247: LD_INT 3
41249: ARRAY
41250: GREATEREQUAL
41251: AND
41252: ST_TO_ADDR
// end ;
41253: LD_VAR 0 2
41257: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41258: LD_INT 0
41260: PPUSH
41261: PPUSH
41262: PPUSH
// pom := GetBase ( building ) ;
41263: LD_ADDR_VAR 0 4
41267: PUSH
41268: LD_VAR 0 1
41272: PPUSH
41273: CALL_OW 274
41277: ST_TO_ADDR
// if not pom then
41278: LD_VAR 0 4
41282: NOT
41283: IFFALSE 41287
// exit ;
41285: GO 41388
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41287: LD_ADDR_VAR 0 5
41291: PUSH
41292: LD_VAR 0 2
41296: PPUSH
41297: LD_VAR 0 1
41301: PPUSH
41302: CALL_OW 248
41306: PPUSH
41307: CALL_OW 450
41311: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41312: LD_ADDR_VAR 0 3
41316: PUSH
41317: LD_VAR 0 4
41321: PPUSH
41322: LD_INT 1
41324: PPUSH
41325: CALL_OW 275
41329: PUSH
41330: LD_VAR 0 5
41334: PUSH
41335: LD_INT 1
41337: ARRAY
41338: GREATEREQUAL
41339: PUSH
41340: LD_VAR 0 4
41344: PPUSH
41345: LD_INT 2
41347: PPUSH
41348: CALL_OW 275
41352: PUSH
41353: LD_VAR 0 5
41357: PUSH
41358: LD_INT 2
41360: ARRAY
41361: GREATEREQUAL
41362: AND
41363: PUSH
41364: LD_VAR 0 4
41368: PPUSH
41369: LD_INT 3
41371: PPUSH
41372: CALL_OW 275
41376: PUSH
41377: LD_VAR 0 5
41381: PUSH
41382: LD_INT 3
41384: ARRAY
41385: GREATEREQUAL
41386: AND
41387: ST_TO_ADDR
// end ;
41388: LD_VAR 0 3
41392: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41393: LD_INT 0
41395: PPUSH
41396: PPUSH
41397: PPUSH
41398: PPUSH
41399: PPUSH
41400: PPUSH
41401: PPUSH
41402: PPUSH
41403: PPUSH
41404: PPUSH
41405: PPUSH
// result := false ;
41406: LD_ADDR_VAR 0 8
41410: PUSH
41411: LD_INT 0
41413: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41414: LD_VAR 0 5
41418: NOT
41419: PUSH
41420: LD_VAR 0 1
41424: NOT
41425: OR
41426: PUSH
41427: LD_VAR 0 2
41431: NOT
41432: OR
41433: PUSH
41434: LD_VAR 0 3
41438: NOT
41439: OR
41440: IFFALSE 41444
// exit ;
41442: GO 42258
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41444: LD_ADDR_VAR 0 14
41448: PUSH
41449: LD_VAR 0 1
41453: PPUSH
41454: LD_VAR 0 2
41458: PPUSH
41459: LD_VAR 0 3
41463: PPUSH
41464: LD_VAR 0 4
41468: PPUSH
41469: LD_VAR 0 5
41473: PUSH
41474: LD_INT 1
41476: ARRAY
41477: PPUSH
41478: CALL_OW 248
41482: PPUSH
41483: LD_INT 0
41485: PPUSH
41486: CALL 43491 0 6
41490: ST_TO_ADDR
// if not hexes then
41491: LD_VAR 0 14
41495: NOT
41496: IFFALSE 41500
// exit ;
41498: GO 42258
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41500: LD_ADDR_VAR 0 17
41504: PUSH
41505: LD_VAR 0 5
41509: PPUSH
41510: LD_INT 22
41512: PUSH
41513: LD_VAR 0 13
41517: PPUSH
41518: CALL_OW 255
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: LD_INT 30
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 30
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: LIST
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PPUSH
41559: CALL_OW 72
41563: ST_TO_ADDR
// for i = 1 to hexes do
41564: LD_ADDR_VAR 0 9
41568: PUSH
41569: DOUBLE
41570: LD_INT 1
41572: DEC
41573: ST_TO_ADDR
41574: LD_VAR 0 14
41578: PUSH
41579: FOR_TO
41580: IFFALSE 42256
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41582: LD_ADDR_VAR 0 13
41586: PUSH
41587: LD_VAR 0 14
41591: PUSH
41592: LD_VAR 0 9
41596: ARRAY
41597: PUSH
41598: LD_INT 1
41600: ARRAY
41601: PPUSH
41602: LD_VAR 0 14
41606: PUSH
41607: LD_VAR 0 9
41611: ARRAY
41612: PUSH
41613: LD_INT 2
41615: ARRAY
41616: PPUSH
41617: CALL_OW 428
41621: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41622: LD_VAR 0 14
41626: PUSH
41627: LD_VAR 0 9
41631: ARRAY
41632: PUSH
41633: LD_INT 1
41635: ARRAY
41636: PPUSH
41637: LD_VAR 0 14
41641: PUSH
41642: LD_VAR 0 9
41646: ARRAY
41647: PUSH
41648: LD_INT 2
41650: ARRAY
41651: PPUSH
41652: CALL_OW 351
41656: PUSH
41657: LD_VAR 0 14
41661: PUSH
41662: LD_VAR 0 9
41666: ARRAY
41667: PUSH
41668: LD_INT 1
41670: ARRAY
41671: PPUSH
41672: LD_VAR 0 14
41676: PUSH
41677: LD_VAR 0 9
41681: ARRAY
41682: PUSH
41683: LD_INT 2
41685: ARRAY
41686: PPUSH
41687: CALL_OW 488
41691: NOT
41692: OR
41693: PUSH
41694: LD_VAR 0 13
41698: PPUSH
41699: CALL_OW 247
41703: PUSH
41704: LD_INT 3
41706: EQUAL
41707: OR
41708: IFFALSE 41714
// exit ;
41710: POP
41711: POP
41712: GO 42258
// if not tmp then
41714: LD_VAR 0 13
41718: NOT
41719: IFFALSE 41723
// continue ;
41721: GO 41579
// result := true ;
41723: LD_ADDR_VAR 0 8
41727: PUSH
41728: LD_INT 1
41730: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41731: LD_VAR 0 6
41735: PUSH
41736: LD_VAR 0 13
41740: PPUSH
41741: CALL_OW 247
41745: PUSH
41746: LD_INT 2
41748: EQUAL
41749: AND
41750: PUSH
41751: LD_VAR 0 13
41755: PPUSH
41756: CALL_OW 263
41760: PUSH
41761: LD_INT 1
41763: EQUAL
41764: AND
41765: IFFALSE 41929
// begin if IsDrivenBy ( tmp ) then
41767: LD_VAR 0 13
41771: PPUSH
41772: CALL_OW 311
41776: IFFALSE 41780
// continue ;
41778: GO 41579
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41780: LD_VAR 0 6
41784: PPUSH
41785: LD_INT 3
41787: PUSH
41788: LD_INT 60
41790: PUSH
41791: EMPTY
41792: LIST
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 3
41800: PUSH
41801: LD_INT 55
41803: PUSH
41804: EMPTY
41805: LIST
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PPUSH
41815: CALL_OW 72
41819: IFFALSE 41927
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41821: LD_ADDR_VAR 0 18
41825: PUSH
41826: LD_VAR 0 6
41830: PPUSH
41831: LD_INT 3
41833: PUSH
41834: LD_INT 60
41836: PUSH
41837: EMPTY
41838: LIST
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 3
41846: PUSH
41847: LD_INT 55
41849: PUSH
41850: EMPTY
41851: LIST
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PPUSH
41861: CALL_OW 72
41865: PUSH
41866: LD_INT 1
41868: ARRAY
41869: ST_TO_ADDR
// if IsInUnit ( driver ) then
41870: LD_VAR 0 18
41874: PPUSH
41875: CALL_OW 310
41879: IFFALSE 41890
// ComExit ( driver ) ;
41881: LD_VAR 0 18
41885: PPUSH
41886: CALL 67270 0 1
// AddComEnterUnit ( driver , tmp ) ;
41890: LD_VAR 0 18
41894: PPUSH
41895: LD_VAR 0 13
41899: PPUSH
41900: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41904: LD_VAR 0 18
41908: PPUSH
41909: LD_VAR 0 7
41913: PPUSH
41914: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41918: LD_VAR 0 18
41922: PPUSH
41923: CALL_OW 181
// end ; continue ;
41927: GO 41579
// end ; if not cleaners or not tmp in cleaners then
41929: LD_VAR 0 6
41933: NOT
41934: PUSH
41935: LD_VAR 0 13
41939: PUSH
41940: LD_VAR 0 6
41944: IN
41945: NOT
41946: OR
41947: IFFALSE 42254
// begin if dep then
41949: LD_VAR 0 17
41953: IFFALSE 42089
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41955: LD_ADDR_VAR 0 16
41959: PUSH
41960: LD_VAR 0 17
41964: PUSH
41965: LD_INT 1
41967: ARRAY
41968: PPUSH
41969: CALL_OW 250
41973: PPUSH
41974: LD_VAR 0 17
41978: PUSH
41979: LD_INT 1
41981: ARRAY
41982: PPUSH
41983: CALL_OW 254
41987: PPUSH
41988: LD_INT 5
41990: PPUSH
41991: CALL_OW 272
41995: PUSH
41996: LD_VAR 0 17
42000: PUSH
42001: LD_INT 1
42003: ARRAY
42004: PPUSH
42005: CALL_OW 251
42009: PPUSH
42010: LD_VAR 0 17
42014: PUSH
42015: LD_INT 1
42017: ARRAY
42018: PPUSH
42019: CALL_OW 254
42023: PPUSH
42024: LD_INT 5
42026: PPUSH
42027: CALL_OW 273
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42036: LD_VAR 0 16
42040: PUSH
42041: LD_INT 1
42043: ARRAY
42044: PPUSH
42045: LD_VAR 0 16
42049: PUSH
42050: LD_INT 2
42052: ARRAY
42053: PPUSH
42054: CALL_OW 488
42058: IFFALSE 42089
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42060: LD_VAR 0 13
42064: PPUSH
42065: LD_VAR 0 16
42069: PUSH
42070: LD_INT 1
42072: ARRAY
42073: PPUSH
42074: LD_VAR 0 16
42078: PUSH
42079: LD_INT 2
42081: ARRAY
42082: PPUSH
42083: CALL_OW 111
// continue ;
42087: GO 41579
// end ; end ; r := GetDir ( tmp ) ;
42089: LD_ADDR_VAR 0 15
42093: PUSH
42094: LD_VAR 0 13
42098: PPUSH
42099: CALL_OW 254
42103: ST_TO_ADDR
// if r = 5 then
42104: LD_VAR 0 15
42108: PUSH
42109: LD_INT 5
42111: EQUAL
42112: IFFALSE 42122
// r := 0 ;
42114: LD_ADDR_VAR 0 15
42118: PUSH
42119: LD_INT 0
42121: ST_TO_ADDR
// for j = r to 5 do
42122: LD_ADDR_VAR 0 10
42126: PUSH
42127: DOUBLE
42128: LD_VAR 0 15
42132: DEC
42133: ST_TO_ADDR
42134: LD_INT 5
42136: PUSH
42137: FOR_TO
42138: IFFALSE 42252
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42140: LD_ADDR_VAR 0 11
42144: PUSH
42145: LD_VAR 0 13
42149: PPUSH
42150: CALL_OW 250
42154: PPUSH
42155: LD_VAR 0 10
42159: PPUSH
42160: LD_INT 2
42162: PPUSH
42163: CALL_OW 272
42167: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42168: LD_ADDR_VAR 0 12
42172: PUSH
42173: LD_VAR 0 13
42177: PPUSH
42178: CALL_OW 251
42182: PPUSH
42183: LD_VAR 0 10
42187: PPUSH
42188: LD_INT 2
42190: PPUSH
42191: CALL_OW 273
42195: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42196: LD_VAR 0 11
42200: PPUSH
42201: LD_VAR 0 12
42205: PPUSH
42206: CALL_OW 488
42210: PUSH
42211: LD_VAR 0 11
42215: PPUSH
42216: LD_VAR 0 12
42220: PPUSH
42221: CALL_OW 428
42225: NOT
42226: AND
42227: IFFALSE 42250
// begin ComMoveXY ( tmp , _x , _y ) ;
42229: LD_VAR 0 13
42233: PPUSH
42234: LD_VAR 0 11
42238: PPUSH
42239: LD_VAR 0 12
42243: PPUSH
42244: CALL_OW 111
// break ;
42248: GO 42252
// end ; end ;
42250: GO 42137
42252: POP
42253: POP
// end ; end ;
42254: GO 41579
42256: POP
42257: POP
// end ;
42258: LD_VAR 0 8
42262: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42263: LD_INT 0
42265: PPUSH
// result := true ;
42266: LD_ADDR_VAR 0 3
42270: PUSH
42271: LD_INT 1
42273: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42274: LD_VAR 0 2
42278: PUSH
42279: LD_INT 24
42281: DOUBLE
42282: EQUAL
42283: IFTRUE 42293
42285: LD_INT 33
42287: DOUBLE
42288: EQUAL
42289: IFTRUE 42293
42291: GO 42318
42293: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42294: LD_ADDR_VAR 0 3
42298: PUSH
42299: LD_INT 32
42301: PPUSH
42302: LD_VAR 0 1
42306: PPUSH
42307: CALL_OW 321
42311: PUSH
42312: LD_INT 2
42314: EQUAL
42315: ST_TO_ADDR
42316: GO 42634
42318: LD_INT 20
42320: DOUBLE
42321: EQUAL
42322: IFTRUE 42326
42324: GO 42351
42326: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42327: LD_ADDR_VAR 0 3
42331: PUSH
42332: LD_INT 6
42334: PPUSH
42335: LD_VAR 0 1
42339: PPUSH
42340: CALL_OW 321
42344: PUSH
42345: LD_INT 2
42347: EQUAL
42348: ST_TO_ADDR
42349: GO 42634
42351: LD_INT 22
42353: DOUBLE
42354: EQUAL
42355: IFTRUE 42365
42357: LD_INT 36
42359: DOUBLE
42360: EQUAL
42361: IFTRUE 42365
42363: GO 42390
42365: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42366: LD_ADDR_VAR 0 3
42370: PUSH
42371: LD_INT 15
42373: PPUSH
42374: LD_VAR 0 1
42378: PPUSH
42379: CALL_OW 321
42383: PUSH
42384: LD_INT 2
42386: EQUAL
42387: ST_TO_ADDR
42388: GO 42634
42390: LD_INT 30
42392: DOUBLE
42393: EQUAL
42394: IFTRUE 42398
42396: GO 42423
42398: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42399: LD_ADDR_VAR 0 3
42403: PUSH
42404: LD_INT 20
42406: PPUSH
42407: LD_VAR 0 1
42411: PPUSH
42412: CALL_OW 321
42416: PUSH
42417: LD_INT 2
42419: EQUAL
42420: ST_TO_ADDR
42421: GO 42634
42423: LD_INT 28
42425: DOUBLE
42426: EQUAL
42427: IFTRUE 42437
42429: LD_INT 21
42431: DOUBLE
42432: EQUAL
42433: IFTRUE 42437
42435: GO 42462
42437: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42438: LD_ADDR_VAR 0 3
42442: PUSH
42443: LD_INT 21
42445: PPUSH
42446: LD_VAR 0 1
42450: PPUSH
42451: CALL_OW 321
42455: PUSH
42456: LD_INT 2
42458: EQUAL
42459: ST_TO_ADDR
42460: GO 42634
42462: LD_INT 16
42464: DOUBLE
42465: EQUAL
42466: IFTRUE 42470
42468: GO 42495
42470: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42471: LD_ADDR_VAR 0 3
42475: PUSH
42476: LD_INT 84
42478: PPUSH
42479: LD_VAR 0 1
42483: PPUSH
42484: CALL_OW 321
42488: PUSH
42489: LD_INT 2
42491: EQUAL
42492: ST_TO_ADDR
42493: GO 42634
42495: LD_INT 19
42497: DOUBLE
42498: EQUAL
42499: IFTRUE 42509
42501: LD_INT 23
42503: DOUBLE
42504: EQUAL
42505: IFTRUE 42509
42507: GO 42534
42509: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42510: LD_ADDR_VAR 0 3
42514: PUSH
42515: LD_INT 83
42517: PPUSH
42518: LD_VAR 0 1
42522: PPUSH
42523: CALL_OW 321
42527: PUSH
42528: LD_INT 2
42530: EQUAL
42531: ST_TO_ADDR
42532: GO 42634
42534: LD_INT 17
42536: DOUBLE
42537: EQUAL
42538: IFTRUE 42542
42540: GO 42567
42542: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42543: LD_ADDR_VAR 0 3
42547: PUSH
42548: LD_INT 39
42550: PPUSH
42551: LD_VAR 0 1
42555: PPUSH
42556: CALL_OW 321
42560: PUSH
42561: LD_INT 2
42563: EQUAL
42564: ST_TO_ADDR
42565: GO 42634
42567: LD_INT 18
42569: DOUBLE
42570: EQUAL
42571: IFTRUE 42575
42573: GO 42600
42575: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42576: LD_ADDR_VAR 0 3
42580: PUSH
42581: LD_INT 40
42583: PPUSH
42584: LD_VAR 0 1
42588: PPUSH
42589: CALL_OW 321
42593: PUSH
42594: LD_INT 2
42596: EQUAL
42597: ST_TO_ADDR
42598: GO 42634
42600: LD_INT 27
42602: DOUBLE
42603: EQUAL
42604: IFTRUE 42608
42606: GO 42633
42608: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42609: LD_ADDR_VAR 0 3
42613: PUSH
42614: LD_INT 35
42616: PPUSH
42617: LD_VAR 0 1
42621: PPUSH
42622: CALL_OW 321
42626: PUSH
42627: LD_INT 2
42629: EQUAL
42630: ST_TO_ADDR
42631: GO 42634
42633: POP
// end ;
42634: LD_VAR 0 3
42638: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42639: LD_INT 0
42641: PPUSH
42642: PPUSH
42643: PPUSH
42644: PPUSH
42645: PPUSH
42646: PPUSH
42647: PPUSH
42648: PPUSH
42649: PPUSH
42650: PPUSH
42651: PPUSH
// result := false ;
42652: LD_ADDR_VAR 0 6
42656: PUSH
42657: LD_INT 0
42659: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42660: LD_VAR 0 1
42664: NOT
42665: PUSH
42666: LD_VAR 0 1
42670: PPUSH
42671: CALL_OW 266
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: LD_INT 1
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: IN
42686: NOT
42687: OR
42688: PUSH
42689: LD_VAR 0 2
42693: NOT
42694: OR
42695: PUSH
42696: LD_VAR 0 5
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: LD_INT 3
42712: PUSH
42713: LD_INT 4
42715: PUSH
42716: LD_INT 5
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: IN
42727: NOT
42728: OR
42729: PUSH
42730: LD_VAR 0 3
42734: PPUSH
42735: LD_VAR 0 4
42739: PPUSH
42740: CALL_OW 488
42744: NOT
42745: OR
42746: IFFALSE 42750
// exit ;
42748: GO 43486
// side := GetSide ( depot ) ;
42750: LD_ADDR_VAR 0 9
42754: PUSH
42755: LD_VAR 0 1
42759: PPUSH
42760: CALL_OW 255
42764: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42765: LD_VAR 0 9
42769: PPUSH
42770: LD_VAR 0 2
42774: PPUSH
42775: CALL 42263 0 2
42779: NOT
42780: IFFALSE 42784
// exit ;
42782: GO 43486
// pom := GetBase ( depot ) ;
42784: LD_ADDR_VAR 0 10
42788: PUSH
42789: LD_VAR 0 1
42793: PPUSH
42794: CALL_OW 274
42798: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42799: LD_ADDR_VAR 0 11
42803: PUSH
42804: LD_VAR 0 2
42808: PPUSH
42809: LD_VAR 0 1
42813: PPUSH
42814: CALL_OW 248
42818: PPUSH
42819: CALL_OW 450
42823: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42824: LD_VAR 0 10
42828: PPUSH
42829: LD_INT 1
42831: PPUSH
42832: CALL_OW 275
42836: PUSH
42837: LD_VAR 0 11
42841: PUSH
42842: LD_INT 1
42844: ARRAY
42845: GREATEREQUAL
42846: PUSH
42847: LD_VAR 0 10
42851: PPUSH
42852: LD_INT 2
42854: PPUSH
42855: CALL_OW 275
42859: PUSH
42860: LD_VAR 0 11
42864: PUSH
42865: LD_INT 2
42867: ARRAY
42868: GREATEREQUAL
42869: AND
42870: PUSH
42871: LD_VAR 0 10
42875: PPUSH
42876: LD_INT 3
42878: PPUSH
42879: CALL_OW 275
42883: PUSH
42884: LD_VAR 0 11
42888: PUSH
42889: LD_INT 3
42891: ARRAY
42892: GREATEREQUAL
42893: AND
42894: NOT
42895: IFFALSE 42899
// exit ;
42897: GO 43486
// if GetBType ( depot ) = b_depot then
42899: LD_VAR 0 1
42903: PPUSH
42904: CALL_OW 266
42908: PUSH
42909: LD_INT 0
42911: EQUAL
42912: IFFALSE 42924
// dist := 28 else
42914: LD_ADDR_VAR 0 14
42918: PUSH
42919: LD_INT 28
42921: ST_TO_ADDR
42922: GO 42932
// dist := 36 ;
42924: LD_ADDR_VAR 0 14
42928: PUSH
42929: LD_INT 36
42931: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42932: LD_VAR 0 1
42936: PPUSH
42937: LD_VAR 0 3
42941: PPUSH
42942: LD_VAR 0 4
42946: PPUSH
42947: CALL_OW 297
42951: PUSH
42952: LD_VAR 0 14
42956: GREATER
42957: IFFALSE 42961
// exit ;
42959: GO 43486
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42961: LD_ADDR_VAR 0 12
42965: PUSH
42966: LD_VAR 0 2
42970: PPUSH
42971: LD_VAR 0 3
42975: PPUSH
42976: LD_VAR 0 4
42980: PPUSH
42981: LD_VAR 0 5
42985: PPUSH
42986: LD_VAR 0 1
42990: PPUSH
42991: CALL_OW 248
42995: PPUSH
42996: LD_INT 0
42998: PPUSH
42999: CALL 43491 0 6
43003: ST_TO_ADDR
// if not hexes then
43004: LD_VAR 0 12
43008: NOT
43009: IFFALSE 43013
// exit ;
43011: GO 43486
// hex := GetHexInfo ( x , y ) ;
43013: LD_ADDR_VAR 0 15
43017: PUSH
43018: LD_VAR 0 3
43022: PPUSH
43023: LD_VAR 0 4
43027: PPUSH
43028: CALL_OW 546
43032: ST_TO_ADDR
// if hex [ 1 ] then
43033: LD_VAR 0 15
43037: PUSH
43038: LD_INT 1
43040: ARRAY
43041: IFFALSE 43045
// exit ;
43043: GO 43486
// height := hex [ 2 ] ;
43045: LD_ADDR_VAR 0 13
43049: PUSH
43050: LD_VAR 0 15
43054: PUSH
43055: LD_INT 2
43057: ARRAY
43058: ST_TO_ADDR
// for i = 1 to hexes do
43059: LD_ADDR_VAR 0 7
43063: PUSH
43064: DOUBLE
43065: LD_INT 1
43067: DEC
43068: ST_TO_ADDR
43069: LD_VAR 0 12
43073: PUSH
43074: FOR_TO
43075: IFFALSE 43405
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43077: LD_VAR 0 12
43081: PUSH
43082: LD_VAR 0 7
43086: ARRAY
43087: PUSH
43088: LD_INT 1
43090: ARRAY
43091: PPUSH
43092: LD_VAR 0 12
43096: PUSH
43097: LD_VAR 0 7
43101: ARRAY
43102: PUSH
43103: LD_INT 2
43105: ARRAY
43106: PPUSH
43107: CALL_OW 488
43111: NOT
43112: PUSH
43113: LD_VAR 0 12
43117: PUSH
43118: LD_VAR 0 7
43122: ARRAY
43123: PUSH
43124: LD_INT 1
43126: ARRAY
43127: PPUSH
43128: LD_VAR 0 12
43132: PUSH
43133: LD_VAR 0 7
43137: ARRAY
43138: PUSH
43139: LD_INT 2
43141: ARRAY
43142: PPUSH
43143: CALL_OW 428
43147: PUSH
43148: LD_INT 0
43150: GREATER
43151: OR
43152: PUSH
43153: LD_VAR 0 12
43157: PUSH
43158: LD_VAR 0 7
43162: ARRAY
43163: PUSH
43164: LD_INT 1
43166: ARRAY
43167: PPUSH
43168: LD_VAR 0 12
43172: PUSH
43173: LD_VAR 0 7
43177: ARRAY
43178: PUSH
43179: LD_INT 2
43181: ARRAY
43182: PPUSH
43183: CALL_OW 351
43187: OR
43188: IFFALSE 43194
// exit ;
43190: POP
43191: POP
43192: GO 43486
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43194: LD_ADDR_VAR 0 8
43198: PUSH
43199: LD_VAR 0 12
43203: PUSH
43204: LD_VAR 0 7
43208: ARRAY
43209: PUSH
43210: LD_INT 1
43212: ARRAY
43213: PPUSH
43214: LD_VAR 0 12
43218: PUSH
43219: LD_VAR 0 7
43223: ARRAY
43224: PUSH
43225: LD_INT 2
43227: ARRAY
43228: PPUSH
43229: CALL_OW 546
43233: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43234: LD_VAR 0 8
43238: PUSH
43239: LD_INT 1
43241: ARRAY
43242: PUSH
43243: LD_VAR 0 8
43247: PUSH
43248: LD_INT 2
43250: ARRAY
43251: PUSH
43252: LD_VAR 0 13
43256: PUSH
43257: LD_INT 2
43259: PLUS
43260: GREATER
43261: OR
43262: PUSH
43263: LD_VAR 0 8
43267: PUSH
43268: LD_INT 2
43270: ARRAY
43271: PUSH
43272: LD_VAR 0 13
43276: PUSH
43277: LD_INT 2
43279: MINUS
43280: LESS
43281: OR
43282: PUSH
43283: LD_VAR 0 8
43287: PUSH
43288: LD_INT 3
43290: ARRAY
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: LD_INT 8
43297: PUSH
43298: LD_INT 9
43300: PUSH
43301: LD_INT 10
43303: PUSH
43304: LD_INT 11
43306: PUSH
43307: LD_INT 12
43309: PUSH
43310: LD_INT 13
43312: PUSH
43313: LD_INT 16
43315: PUSH
43316: LD_INT 17
43318: PUSH
43319: LD_INT 18
43321: PUSH
43322: LD_INT 19
43324: PUSH
43325: LD_INT 20
43327: PUSH
43328: LD_INT 21
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: IN
43346: NOT
43347: OR
43348: PUSH
43349: LD_VAR 0 8
43353: PUSH
43354: LD_INT 5
43356: ARRAY
43357: NOT
43358: OR
43359: PUSH
43360: LD_VAR 0 8
43364: PUSH
43365: LD_INT 6
43367: ARRAY
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: LD_INT 7
43377: PUSH
43378: LD_INT 9
43380: PUSH
43381: LD_INT 10
43383: PUSH
43384: LD_INT 11
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: IN
43395: NOT
43396: OR
43397: IFFALSE 43403
// exit ;
43399: POP
43400: POP
43401: GO 43486
// end ;
43403: GO 43074
43405: POP
43406: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43407: LD_VAR 0 9
43411: PPUSH
43412: LD_VAR 0 3
43416: PPUSH
43417: LD_VAR 0 4
43421: PPUSH
43422: LD_INT 20
43424: PPUSH
43425: CALL 35438 0 4
43429: PUSH
43430: LD_INT 4
43432: ARRAY
43433: IFFALSE 43437
// exit ;
43435: GO 43486
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43437: LD_VAR 0 2
43441: PUSH
43442: LD_INT 29
43444: PUSH
43445: LD_INT 30
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: IN
43452: PUSH
43453: LD_VAR 0 3
43457: PPUSH
43458: LD_VAR 0 4
43462: PPUSH
43463: LD_VAR 0 9
43467: PPUSH
43468: CALL_OW 440
43472: NOT
43473: AND
43474: IFFALSE 43478
// exit ;
43476: GO 43486
// result := true ;
43478: LD_ADDR_VAR 0 6
43482: PUSH
43483: LD_INT 1
43485: ST_TO_ADDR
// end ;
43486: LD_VAR 0 6
43490: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43491: LD_INT 0
43493: PPUSH
43494: PPUSH
43495: PPUSH
43496: PPUSH
43497: PPUSH
43498: PPUSH
43499: PPUSH
43500: PPUSH
43501: PPUSH
43502: PPUSH
43503: PPUSH
43504: PPUSH
43505: PPUSH
43506: PPUSH
43507: PPUSH
43508: PPUSH
43509: PPUSH
43510: PPUSH
43511: PPUSH
43512: PPUSH
43513: PPUSH
43514: PPUSH
43515: PPUSH
43516: PPUSH
43517: PPUSH
43518: PPUSH
43519: PPUSH
43520: PPUSH
43521: PPUSH
43522: PPUSH
43523: PPUSH
43524: PPUSH
43525: PPUSH
43526: PPUSH
43527: PPUSH
43528: PPUSH
43529: PPUSH
43530: PPUSH
43531: PPUSH
43532: PPUSH
43533: PPUSH
43534: PPUSH
43535: PPUSH
43536: PPUSH
43537: PPUSH
43538: PPUSH
43539: PPUSH
43540: PPUSH
43541: PPUSH
43542: PPUSH
43543: PPUSH
43544: PPUSH
43545: PPUSH
43546: PPUSH
43547: PPUSH
43548: PPUSH
43549: PPUSH
43550: PPUSH
// result = [ ] ;
43551: LD_ADDR_VAR 0 7
43555: PUSH
43556: EMPTY
43557: ST_TO_ADDR
// temp_list = [ ] ;
43558: LD_ADDR_VAR 0 9
43562: PUSH
43563: EMPTY
43564: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43565: LD_VAR 0 4
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: LD_INT 2
43578: PUSH
43579: LD_INT 3
43581: PUSH
43582: LD_INT 4
43584: PUSH
43585: LD_INT 5
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: IN
43596: NOT
43597: PUSH
43598: LD_VAR 0 1
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: IN
43613: PUSH
43614: LD_VAR 0 5
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: LD_INT 3
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: LIST
43632: IN
43633: NOT
43634: AND
43635: OR
43636: IFFALSE 43640
// exit ;
43638: GO 62031
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43640: LD_VAR 0 1
43644: PUSH
43645: LD_INT 6
43647: PUSH
43648: LD_INT 7
43650: PUSH
43651: LD_INT 8
43653: PUSH
43654: LD_INT 13
43656: PUSH
43657: LD_INT 12
43659: PUSH
43660: LD_INT 15
43662: PUSH
43663: LD_INT 11
43665: PUSH
43666: LD_INT 14
43668: PUSH
43669: LD_INT 10
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: IN
43683: IFFALSE 43693
// btype = b_lab ;
43685: LD_ADDR_VAR 0 1
43689: PUSH
43690: LD_INT 6
43692: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43693: LD_VAR 0 6
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: LIST
43711: IN
43712: NOT
43713: PUSH
43714: LD_VAR 0 1
43718: PUSH
43719: LD_INT 0
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: LD_INT 2
43727: PUSH
43728: LD_INT 3
43730: PUSH
43731: LD_INT 6
43733: PUSH
43734: LD_INT 36
43736: PUSH
43737: LD_INT 4
43739: PUSH
43740: LD_INT 5
43742: PUSH
43743: LD_INT 31
43745: PUSH
43746: LD_INT 32
43748: PUSH
43749: LD_INT 33
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: IN
43765: NOT
43766: PUSH
43767: LD_VAR 0 6
43771: PUSH
43772: LD_INT 1
43774: EQUAL
43775: AND
43776: OR
43777: PUSH
43778: LD_VAR 0 1
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: LD_INT 3
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: IN
43793: NOT
43794: PUSH
43795: LD_VAR 0 6
43799: PUSH
43800: LD_INT 2
43802: EQUAL
43803: AND
43804: OR
43805: IFFALSE 43815
// mode = 0 ;
43807: LD_ADDR_VAR 0 6
43811: PUSH
43812: LD_INT 0
43814: ST_TO_ADDR
// case mode of 0 :
43815: LD_VAR 0 6
43819: PUSH
43820: LD_INT 0
43822: DOUBLE
43823: EQUAL
43824: IFTRUE 43828
43826: GO 55281
43828: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43829: LD_ADDR_VAR 0 11
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: NEG
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: LD_INT 2
43914: NEG
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: LD_INT 2
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: LD_INT 2
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: LD_INT 2
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 1
43964: NEG
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: LD_INT 3
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: LD_INT 3
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44022: LD_ADDR_VAR 0 12
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: LD_INT 1
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 2
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 2
44145: NEG
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 2
44156: NEG
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 2
44168: NEG
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 3
44179: NEG
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 3
44190: NEG
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44218: LD_ADDR_VAR 0 13
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 2
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 2
44321: PUSH
44322: LD_INT 2
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: LD_INT 2
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 2
44341: NEG
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 2
44353: NEG
44354: PUSH
44355: LD_INT 2
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 2
44365: NEG
44366: PUSH
44367: LD_INT 3
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 3
44377: NEG
44378: PUSH
44379: LD_INT 2
44381: NEG
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 3
44389: NEG
44390: PUSH
44391: LD_INT 3
44393: NEG
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44417: LD_ADDR_VAR 0 14
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: LD_INT 2
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: LD_INT 2
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: NEG
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: LD_INT 3
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: LD_INT 3
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44613: LD_ADDR_VAR 0 15
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 2
44736: NEG
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 2
44747: NEG
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 2
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 3
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 3
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44806: LD_ADDR_VAR 0 16
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: LD_INT 2
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 2
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: LD_INT 2
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 2
44929: NEG
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 2
44941: NEG
44942: PUSH
44943: LD_INT 2
44945: NEG
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 3
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 3
44963: PUSH
44964: LD_INT 3
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: LD_INT 3
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44999: LD_ADDR_VAR 0 17
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 0
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: LD_INT 2
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: LD_INT 2
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 2
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 2
45134: PUSH
45135: LD_INT 2
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: PUSH
45145: LD_INT 2
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: LD_INT 2
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 1
45164: NEG
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 2
45175: NEG
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 2
45186: NEG
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 2
45198: NEG
45199: PUSH
45200: LD_INT 2
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45229: LD_ADDR_VAR 0 18
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 1
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: LD_INT 2
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 2
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 2
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 2
45364: PUSH
45365: LD_INT 2
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: LD_INT 2
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 2
45416: NEG
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 2
45428: NEG
45429: PUSH
45430: LD_INT 2
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45459: LD_ADDR_VAR 0 19
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 1
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: LD_INT 2
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: LD_INT 2
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 2
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: LD_INT 2
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 2
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: NEG
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 2
45646: NEG
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 2
45658: NEG
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45689: LD_ADDR_VAR 0 20
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: LD_INT 1
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: LD_INT 2
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: LD_INT 2
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 2
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: LD_INT 2
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: LD_INT 2
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 2
45876: NEG
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 2
45888: NEG
45889: PUSH
45890: LD_INT 2
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45919: LD_ADDR_VAR 0 21
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: LD_INT 2
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: LD_INT 2
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: LD_INT 2
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 2
46118: NEG
46119: PUSH
46120: LD_INT 2
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46149: LD_ADDR_VAR 0 22
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: LD_INT 1
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: LD_INT 2
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: LD_INT 2
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 2
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 2
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 2
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: LD_INT 2
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: LD_INT 2
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 2
46325: NEG
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 2
46336: NEG
46337: PUSH
46338: LD_INT 1
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: LD_INT 2
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46379: LD_ADDR_VAR 0 23
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: LD_INT 2
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 2
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 2
46566: NEG
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PUSH
46580: LD_INT 2
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: LD_INT 3
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: LD_INT 3
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46659: LD_ADDR_VAR 0 24
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: LD_INT 2
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 2
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 2
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 2
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: LD_INT 2
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 3
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 3
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46935: LD_ADDR_VAR 0 25
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: LD_INT 2
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 2
47134: NEG
47135: PUSH
47136: LD_INT 2
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 3
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 3
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 2
47166: PUSH
47167: LD_INT 3
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: LD_INT 3
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47209: LD_ADDR_VAR 0 26
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 2
47344: PUSH
47345: LD_INT 2
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: LD_INT 2
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: LD_INT 2
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 2
47408: NEG
47409: PUSH
47410: LD_INT 2
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 2
47420: PUSH
47421: LD_INT 3
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: LD_INT 3
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: LD_INT 2
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 2
47451: NEG
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47485: LD_ADDR_VAR 0 27
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 2
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 2
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: LD_INT 2
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 2
47661: NEG
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 2
47672: NEG
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 2
47684: NEG
47685: PUSH
47686: LD_INT 2
47688: NEG
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: LD_INT 2
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: NEG
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 3
47718: NEG
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 3
47730: NEG
47731: PUSH
47732: LD_INT 2
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47765: LD_ADDR_VAR 0 28
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: LD_INT 2
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 2
47941: NEG
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 2
47952: NEG
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 2
47964: NEG
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 2
47976: NEG
47977: PUSH
47978: LD_INT 3
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: LD_INT 3
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 3
48000: NEG
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 3
48012: NEG
48013: PUSH
48014: LD_INT 2
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48047: LD_ADDR_VAR 0 29
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: LD_INT 2
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: LD_INT 2
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: LD_INT 1
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: LD_INT 2
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: LD_INT 1
48217: NEG
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 2
48225: NEG
48226: PUSH
48227: LD_INT 2
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 2
48237: NEG
48238: PUSH
48239: LD_INT 3
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 2
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 3
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: LD_INT 3
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 3
48291: NEG
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48326: LD_ADDR_VAR 0 30
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: LD_INT 2
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: LD_INT 2
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 2
48492: NEG
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 2
48503: NEG
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: LD_INT 3
48519: NEG
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: LD_INT 2
48530: NEG
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 3
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: LD_INT 3
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 2
48558: NEG
48559: PUSH
48560: LD_INT 1
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 3
48569: NEG
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48604: LD_ADDR_VAR 0 31
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: NEG
48686: PUSH
48687: LD_INT 2
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 2
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: LD_INT 2
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 2
48769: NEG
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: LD_INT 2
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 2
48793: NEG
48794: PUSH
48795: LD_INT 3
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 3
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: LD_INT 3
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: LD_INT 2
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 3
48847: NEG
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48882: LD_ADDR_VAR 0 32
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: LD_INT 2
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: LD_INT 2
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: NEG
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 3
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 2
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 3
49094: PUSH
49095: LD_INT 2
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 2
49104: PUSH
49105: LD_INT 3
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 3
49125: NEG
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49160: LD_ADDR_VAR 0 33
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 2
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 2
49326: NEG
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 2
49338: NEG
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: LD_INT 3
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 3
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: LD_INT 3
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: LD_INT 2
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 3
49404: NEG
49405: PUSH
49406: LD_INT 2
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49439: LD_ADDR_VAR 0 34
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 2
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 2
49595: NEG
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 2
49618: NEG
49619: PUSH
49620: LD_INT 2
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: LD_INT 3
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 3
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 2
49663: PUSH
49664: LD_INT 3
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 3
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49719: LD_ADDR_VAR 0 35
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 2
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: NEG
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49831: LD_ADDR_VAR 0 36
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: LD_INT 1
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: LD_INT 2
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49943: LD_ADDR_VAR 0 37
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: LD_INT 1
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50055: LD_ADDR_VAR 0 38
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 2
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 2
50146: NEG
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50167: LD_ADDR_VAR 0 39
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: LD_INT 2
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: LD_INT 2
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50279: LD_ADDR_VAR 0 40
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50391: LD_ADDR_VAR 0 41
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: LD_INT 1
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: LD_INT 2
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 2
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 2
50515: PUSH
50516: LD_INT 2
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 2
50546: NEG
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: LD_INT 1
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 2
50569: NEG
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 2
50581: NEG
50582: PUSH
50583: LD_INT 3
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 3
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 3
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 3
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 3
50634: PUSH
50635: LD_INT 3
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 2
50644: PUSH
50645: LD_INT 3
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: NEG
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 3
50665: NEG
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 3
50676: NEG
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 3
50688: NEG
50689: PUSH
50690: LD_INT 2
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 3
50700: NEG
50701: PUSH
50702: LD_INT 3
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50741: LD_ADDR_VAR 0 42
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: NEG
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: LD_INT 2
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: LD_INT 2
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 2
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 2
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: LD_INT 2
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 2
50919: NEG
50920: PUSH
50921: LD_INT 2
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: NEG
50932: PUSH
50933: LD_INT 3
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 3
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 3
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 3
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 3
50987: PUSH
50988: LD_INT 3
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: LD_INT 3
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: LD_INT 3
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: LD_INT 3
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 3
51038: NEG
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 3
51050: NEG
51051: PUSH
51052: LD_INT 3
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51091: LD_ADDR_VAR 0 43
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: LD_INT 2
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 2
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 2
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 2
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: PUSH
51227: LD_INT 2
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: LD_INT 2
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 2
51257: NEG
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: LD_INT 3
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: LD_INT 3
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: LD_INT 2
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 3
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 3
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 3
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: LD_INT 3
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: LD_INT 2
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 2
51376: NEG
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 3
51387: NEG
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 3
51398: NEG
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51439: LD_ADDR_VAR 0 44
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: LD_INT 2
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 2
51563: PUSH
51564: LD_INT 2
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: LD_INT 2
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 2
51629: NEG
51630: PUSH
51631: LD_INT 3
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 3
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 3
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 3
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 3
51682: PUSH
51683: LD_INT 3
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: LD_INT 3
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 3
51713: NEG
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 3
51724: NEG
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 3
51736: NEG
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 3
51748: NEG
51749: PUSH
51750: LD_INT 3
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51789: LD_ADDR_VAR 0 45
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: LD_INT 2
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: LD_INT 2
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: LD_INT 2
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: LD_INT 3
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: LD_INT 3
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 3
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 3
52025: PUSH
52026: LD_INT 2
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 3
52035: PUSH
52036: LD_INT 3
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: LD_INT 3
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: LD_INT 3
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: LD_INT 3
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 3
52086: NEG
52087: PUSH
52088: LD_INT 2
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 3
52098: NEG
52099: PUSH
52100: LD_INT 3
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52139: LD_ADDR_VAR 0 46
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: LD_INT 2
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: LD_INT 2
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 3
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: LD_INT 3
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: LD_INT 2
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 3
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 3
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 3
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: LD_INT 3
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: LD_INT 2
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 2
52424: NEG
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 3
52435: NEG
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 3
52446: NEG
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52487: LD_ADDR_VAR 0 47
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: LD_INT 2
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: LD_INT 2
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 2
52602: NEG
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52638: LD_ADDR_VAR 0 48
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: LD_INT 1
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: LD_INT 2
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 2
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 2
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52785: LD_ADDR_VAR 0 49
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 2
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 2
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 2
52897: PUSH
52898: LD_INT 2
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 2
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52929: LD_ADDR_VAR 0 50
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: LD_INT 1
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 2
53020: PUSH
53021: LD_INT 2
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: LD_INT 2
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53073: LD_ADDR_VAR 0 51
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: LD_INT 2
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 2
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 2
53185: NEG
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 2
53196: NEG
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53220: LD_ADDR_VAR 0 52
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 2
53324: NEG
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: LD_INT 2
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53371: LD_ADDR_VAR 0 53
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 2
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 2
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: LD_INT 2
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: LD_INT 2
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: LD_INT 2
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: NEG
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 2
53547: NEG
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 2
53570: NEG
53571: PUSH
53572: LD_INT 2
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53601: LD_ADDR_VAR 0 54
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: LD_INT 1
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: LD_INT 2
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: LD_INT 2
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 2
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 2
53736: PUSH
53737: LD_INT 2
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: LD_INT 2
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: LD_INT 2
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 2
53777: NEG
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 2
53788: NEG
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 2
53800: NEG
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53831: LD_ADDR_VAR 0 55
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: LD_INT 2
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: LD_INT 2
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 2
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 2
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 2
53966: PUSH
53967: LD_INT 2
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: LD_INT 2
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: LD_INT 2
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 2
54018: NEG
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 2
54030: NEG
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54061: LD_ADDR_VAR 0 56
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: LD_INT 2
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: LD_INT 2
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 2
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: LD_INT 2
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: NEG
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 2
54248: NEG
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 2
54260: NEG
54261: PUSH
54262: LD_INT 2
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54291: LD_ADDR_VAR 0 57
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: LD_INT 2
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 2
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 2
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 2
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: LD_INT 2
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: LD_INT 2
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 2
54467: NEG
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 2
54478: NEG
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 2
54490: NEG
54491: PUSH
54492: LD_INT 2
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54521: LD_ADDR_VAR 0 58
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: LD_INT 2
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 2
54656: PUSH
54657: LD_INT 2
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: LD_INT 2
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: LD_INT 2
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 2
54697: NEG
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 2
54708: NEG
54709: PUSH
54710: LD_INT 1
54712: NEG
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 2
54720: NEG
54721: PUSH
54722: LD_INT 2
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54751: LD_ADDR_VAR 0 59
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 1
54820: NEG
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54839: LD_ADDR_VAR 0 60
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54927: LD_ADDR_VAR 0 61
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55015: LD_ADDR_VAR 0 62
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55103: LD_ADDR_VAR 0 63
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55191: LD_ADDR_VAR 0 64
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: ST_TO_ADDR
// end ; 1 :
55279: GO 61176
55281: LD_INT 1
55283: DOUBLE
55284: EQUAL
55285: IFTRUE 55289
55287: GO 57912
55289: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55290: LD_ADDR_VAR 0 11
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: LD_INT 3
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: LD_INT 3
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: LD_INT 2
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: LIST
55333: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55334: LD_ADDR_VAR 0 12
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 3
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 3
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: LIST
55374: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55375: LD_ADDR_VAR 0 13
55379: PUSH
55380: LD_INT 3
55382: PUSH
55383: LD_INT 2
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 3
55392: PUSH
55393: LD_INT 3
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: LD_INT 3
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: LIST
55414: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55415: LD_ADDR_VAR 0 14
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: LD_INT 3
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 3
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 2
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: LIST
55455: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55456: LD_ADDR_VAR 0 15
55460: PUSH
55461: LD_INT 2
55463: NEG
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 3
55474: NEG
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 3
55485: NEG
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: LIST
55499: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55500: LD_ADDR_VAR 0 16
55504: PUSH
55505: LD_INT 2
55507: NEG
55508: PUSH
55509: LD_INT 3
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 3
55519: NEG
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 3
55531: NEG
55532: PUSH
55533: LD_INT 3
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: LIST
55545: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55546: LD_ADDR_VAR 0 17
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: LD_INT 3
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: LD_INT 3
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 1
55576: PUSH
55577: LD_INT 2
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: LIST
55589: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55590: LD_ADDR_VAR 0 18
55594: PUSH
55595: LD_INT 2
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 3
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 3
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: LIST
55630: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55631: LD_ADDR_VAR 0 19
55635: PUSH
55636: LD_INT 3
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 3
55648: PUSH
55649: LD_INT 3
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 2
55658: PUSH
55659: LD_INT 3
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: LIST
55670: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55671: LD_ADDR_VAR 0 20
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: LD_INT 3
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: LD_INT 3
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: LD_INT 2
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: LIST
55711: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55712: LD_ADDR_VAR 0 21
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 3
55730: NEG
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 3
55741: NEG
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: LIST
55755: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55756: LD_ADDR_VAR 0 22
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: LD_INT 3
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 3
55775: NEG
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 3
55787: NEG
55788: PUSH
55789: LD_INT 3
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: LIST
55801: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55802: LD_ADDR_VAR 0 23
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: LD_INT 3
55812: NEG
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: LD_INT 4
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: LD_INT 3
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: LIST
55845: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55846: LD_ADDR_VAR 0 24
55850: PUSH
55851: LD_INT 3
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 3
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 4
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: LIST
55886: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55887: LD_ADDR_VAR 0 25
55891: PUSH
55892: LD_INT 3
55894: PUSH
55895: LD_INT 3
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 4
55904: PUSH
55905: LD_INT 3
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 3
55914: PUSH
55915: LD_INT 4
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: LIST
55926: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55927: LD_ADDR_VAR 0 26
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 3
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: LD_INT 4
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: LD_INT 3
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: LIST
55967: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55968: LD_ADDR_VAR 0 27
55972: PUSH
55973: LD_INT 3
55975: NEG
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 3
55986: NEG
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 4
55997: NEG
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: LIST
56011: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56012: LD_ADDR_VAR 0 28
56016: PUSH
56017: LD_INT 3
56019: NEG
56020: PUSH
56021: LD_INT 3
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 3
56031: NEG
56032: PUSH
56033: LD_INT 4
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 4
56043: NEG
56044: PUSH
56045: LD_INT 3
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: LIST
56057: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56058: LD_ADDR_VAR 0 29
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: LD_INT 3
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: LD_INT 3
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: LD_INT 4
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: LD_INT 4
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: LD_INT 3
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: LD_INT 5
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 5
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: LD_INT 4
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: LD_INT 6
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: LD_INT 6
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: LD_INT 5
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56213: LD_ADDR_VAR 0 30
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 3
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 3
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 3
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 4
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 4
56272: PUSH
56273: LD_INT 1
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 4
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 5
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 5
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 5
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 6
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 6
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56356: LD_ADDR_VAR 0 31
56360: PUSH
56361: LD_INT 3
56363: PUSH
56364: LD_INT 2
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 3
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 2
56383: PUSH
56384: LD_INT 3
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 4
56393: PUSH
56394: LD_INT 3
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 4
56403: PUSH
56404: LD_INT 4
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 3
56413: PUSH
56414: LD_INT 4
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 5
56423: PUSH
56424: LD_INT 4
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 5
56433: PUSH
56434: LD_INT 5
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 4
56443: PUSH
56444: LD_INT 5
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 6
56453: PUSH
56454: LD_INT 5
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 6
56463: PUSH
56464: LD_INT 6
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 5
56473: PUSH
56474: LD_INT 6
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56495: LD_ADDR_VAR 0 32
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: LD_INT 3
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: LD_INT 3
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 1
56522: NEG
56523: PUSH
56524: LD_INT 2
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: LD_INT 4
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: LD_INT 4
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: LD_INT 3
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: LD_INT 5
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: LD_INT 5
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 1
56584: NEG
56585: PUSH
56586: LD_INT 4
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: LD_INT 6
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: LD_INT 6
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: LD_INT 5
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56638: LD_ADDR_VAR 0 33
56642: PUSH
56643: LD_INT 2
56645: NEG
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 3
56656: NEG
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 3
56667: NEG
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 3
56679: NEG
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 4
56690: NEG
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 4
56701: NEG
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 4
56713: NEG
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 5
56724: NEG
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 5
56735: NEG
56736: PUSH
56737: LD_INT 1
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 5
56747: NEG
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 6
56758: NEG
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 6
56769: NEG
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56793: LD_ADDR_VAR 0 34
56797: PUSH
56798: LD_INT 2
56800: NEG
56801: PUSH
56802: LD_INT 3
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 3
56812: NEG
56813: PUSH
56814: LD_INT 2
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 3
56824: NEG
56825: PUSH
56826: LD_INT 3
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 3
56836: NEG
56837: PUSH
56838: LD_INT 4
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 4
56848: NEG
56849: PUSH
56850: LD_INT 3
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 4
56860: NEG
56861: PUSH
56862: LD_INT 4
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 4
56872: NEG
56873: PUSH
56874: LD_INT 5
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 5
56884: NEG
56885: PUSH
56886: LD_INT 4
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 5
56896: NEG
56897: PUSH
56898: LD_INT 5
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 5
56908: NEG
56909: PUSH
56910: LD_INT 6
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 6
56920: NEG
56921: PUSH
56922: LD_INT 5
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 6
56932: NEG
56933: PUSH
56934: LD_INT 6
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56956: LD_ADDR_VAR 0 41
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: LD_INT 3
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: LD_INT 2
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: LIST
56999: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57000: LD_ADDR_VAR 0 42
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 2
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 3
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: LIST
57040: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57041: LD_ADDR_VAR 0 43
57045: PUSH
57046: LD_INT 2
57048: PUSH
57049: LD_INT 2
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 3
57058: PUSH
57059: LD_INT 2
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: LD_INT 3
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: LIST
57080: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57081: LD_ADDR_VAR 0 44
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: LD_INT 2
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: LD_INT 3
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: LIST
57121: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57122: LD_ADDR_VAR 0 45
57126: PUSH
57127: LD_INT 2
57129: NEG
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 3
57151: NEG
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: LIST
57165: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57166: LD_ADDR_VAR 0 46
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: LD_INT 2
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: NEG
57186: PUSH
57187: LD_INT 3
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 3
57197: NEG
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57212: LD_ADDR_VAR 0 47
57216: PUSH
57217: LD_INT 2
57219: NEG
57220: PUSH
57221: LD_INT 3
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: LD_INT 3
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57245: LD_ADDR_VAR 0 48
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 2
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57276: LD_ADDR_VAR 0 49
57280: PUSH
57281: LD_INT 3
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 3
57293: PUSH
57294: LD_INT 2
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57305: LD_ADDR_VAR 0 50
57309: PUSH
57310: LD_INT 2
57312: PUSH
57313: LD_INT 3
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57334: LD_ADDR_VAR 0 51
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: NEG
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57365: LD_ADDR_VAR 0 52
57369: PUSH
57370: LD_INT 3
57372: NEG
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 3
57384: NEG
57385: PUSH
57386: LD_INT 2
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57398: LD_ADDR_VAR 0 53
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: LD_INT 3
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: LD_INT 3
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: LIST
57441: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57442: LD_ADDR_VAR 0 54
57446: PUSH
57447: LD_INT 2
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 3
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 3
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: LIST
57482: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57483: LD_ADDR_VAR 0 55
57487: PUSH
57488: LD_INT 3
57490: PUSH
57491: LD_INT 2
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 3
57500: PUSH
57501: LD_INT 3
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 2
57510: PUSH
57511: LD_INT 3
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: LIST
57522: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57523: LD_ADDR_VAR 0 56
57527: PUSH
57528: LD_INT 1
57530: PUSH
57531: LD_INT 3
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: LD_INT 3
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: LIST
57563: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57564: LD_ADDR_VAR 0 57
57568: PUSH
57569: LD_INT 2
57571: NEG
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 3
57582: NEG
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 3
57593: NEG
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: LIST
57607: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57608: LD_ADDR_VAR 0 58
57612: PUSH
57613: LD_INT 2
57615: NEG
57616: PUSH
57617: LD_INT 3
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 3
57627: NEG
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 3
57639: NEG
57640: PUSH
57641: LD_INT 3
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: LIST
57653: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57654: LD_ADDR_VAR 0 59
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: LD_INT 2
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: LD_INT 2
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: LIST
57697: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57698: LD_ADDR_VAR 0 60
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 2
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 2
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: LIST
57738: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57739: LD_ADDR_VAR 0 61
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: LD_INT 2
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: LIST
57778: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57779: LD_ADDR_VAR 0 62
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: LD_INT 2
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: LIST
57819: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57820: LD_ADDR_VAR 0 63
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 2
57838: NEG
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 2
57849: NEG
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: LIST
57863: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57864: LD_ADDR_VAR 0 64
57868: PUSH
57869: LD_INT 1
57871: NEG
57872: PUSH
57873: LD_INT 2
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 2
57883: NEG
57884: PUSH
57885: LD_INT 1
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 2
57895: NEG
57896: PUSH
57897: LD_INT 2
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: LIST
57909: ST_TO_ADDR
// end ; 2 :
57910: GO 61176
57912: LD_INT 2
57914: DOUBLE
57915: EQUAL
57916: IFTRUE 57920
57918: GO 61175
57920: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57921: LD_ADDR_VAR 0 29
57925: PUSH
57926: LD_INT 4
57928: PUSH
57929: LD_INT 0
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 4
57938: PUSH
57939: LD_INT 1
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 5
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 5
57959: PUSH
57960: LD_INT 1
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 4
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 3
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 3
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 3
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 5
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 3
58021: PUSH
58022: LD_INT 3
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 3
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 4
58041: PUSH
58042: LD_INT 3
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 4
58051: PUSH
58052: LD_INT 4
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 3
58061: PUSH
58062: LD_INT 4
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 2
58071: PUSH
58072: LD_INT 3
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 2
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 4
58091: PUSH
58092: LD_INT 2
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 2
58101: PUSH
58102: LD_INT 4
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: LD_INT 4
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: LD_INT 3
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 1
58131: PUSH
58132: LD_INT 4
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: LD_INT 5
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: LD_INT 5
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: LD_INT 4
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 1
58172: NEG
58173: PUSH
58174: LD_INT 3
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 2
58183: PUSH
58184: LD_INT 5
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 2
58193: NEG
58194: PUSH
58195: LD_INT 3
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 3
58204: NEG
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 3
58215: NEG
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 2
58227: NEG
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 3
58249: NEG
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 4
58260: NEG
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 4
58271: NEG
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 4
58283: NEG
58284: PUSH
58285: LD_INT 2
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 2
58295: NEG
58296: PUSH
58297: LD_INT 2
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 4
58306: NEG
58307: PUSH
58308: LD_INT 4
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 4
58318: NEG
58319: PUSH
58320: LD_INT 5
58322: NEG
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 3
58330: NEG
58331: PUSH
58332: LD_INT 4
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 3
58342: NEG
58343: PUSH
58344: LD_INT 3
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 4
58354: NEG
58355: PUSH
58356: LD_INT 3
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 5
58366: NEG
58367: PUSH
58368: LD_INT 4
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 5
58378: NEG
58379: PUSH
58380: LD_INT 5
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 3
58390: NEG
58391: PUSH
58392: LD_INT 5
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 5
58402: NEG
58403: PUSH
58404: LD_INT 3
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58459: LD_ADDR_VAR 0 30
58463: PUSH
58464: LD_INT 4
58466: PUSH
58467: LD_INT 4
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 4
58476: PUSH
58477: LD_INT 3
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 5
58486: PUSH
58487: LD_INT 4
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 5
58496: PUSH
58497: LD_INT 5
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 4
58506: PUSH
58507: LD_INT 5
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 3
58516: PUSH
58517: LD_INT 4
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 3
58526: PUSH
58527: LD_INT 3
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 5
58536: PUSH
58537: LD_INT 3
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 3
58546: PUSH
58547: LD_INT 5
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 0
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: LD_INT 2
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: LD_INT 3
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: LD_INT 4
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: LD_INT 4
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 1
58606: NEG
58607: PUSH
58608: LD_INT 3
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: LD_INT 2
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 2
58628: PUSH
58629: LD_INT 4
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 2
58638: NEG
58639: PUSH
58640: LD_INT 2
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 4
58649: NEG
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 4
58660: NEG
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 3
58672: NEG
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 3
58683: NEG
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 4
58694: NEG
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 5
58705: NEG
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 5
58716: NEG
58717: PUSH
58718: LD_INT 1
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 5
58728: NEG
58729: PUSH
58730: LD_INT 2
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 3
58740: NEG
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 3
58751: NEG
58752: PUSH
58753: LD_INT 3
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 3
58763: NEG
58764: PUSH
58765: LD_INT 4
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 2
58775: NEG
58776: PUSH
58777: LD_INT 3
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 2
58787: NEG
58788: PUSH
58789: LD_INT 2
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 3
58799: NEG
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 4
58811: NEG
58812: PUSH
58813: LD_INT 3
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 4
58823: NEG
58824: PUSH
58825: LD_INT 4
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 2
58835: NEG
58836: PUSH
58837: LD_INT 4
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 4
58847: NEG
58848: PUSH
58849: LD_INT 2
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 4
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: LD_INT 5
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: LD_INT 4
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: LD_INT 3
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: LD_INT 3
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: LD_INT 4
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: LD_INT 5
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 2
58938: PUSH
58939: LD_INT 3
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: LD_INT 5
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59006: LD_ADDR_VAR 0 31
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: LD_INT 4
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: LD_INT 3
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: LD_INT 4
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: LD_INT 5
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 5
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: LD_INT 4
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: LD_INT 3
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: LD_INT 5
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 2
59095: NEG
59096: PUSH
59097: LD_INT 3
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 3
59106: NEG
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 3
59117: NEG
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 2
59129: NEG
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: NEG
59141: PUSH
59142: LD_INT 1
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 3
59151: NEG
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 4
59162: NEG
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 4
59173: NEG
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 4
59185: NEG
59186: PUSH
59187: LD_INT 2
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 2
59197: NEG
59198: PUSH
59199: LD_INT 2
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 4
59208: NEG
59209: PUSH
59210: LD_INT 4
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 4
59220: NEG
59221: PUSH
59222: LD_INT 5
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 3
59232: NEG
59233: PUSH
59234: LD_INT 4
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 3
59244: NEG
59245: PUSH
59246: LD_INT 3
59248: NEG
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 4
59256: NEG
59257: PUSH
59258: LD_INT 3
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 5
59268: NEG
59269: PUSH
59270: LD_INT 4
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 5
59280: NEG
59281: PUSH
59282: LD_INT 5
59284: NEG
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 3
59292: NEG
59293: PUSH
59294: LD_INT 5
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 5
59304: NEG
59305: PUSH
59306: LD_INT 3
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: LD_INT 3
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: LD_INT 4
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: LD_INT 3
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 1
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: NEG
59372: PUSH
59373: LD_INT 3
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: NEG
59384: PUSH
59385: LD_INT 4
59387: NEG
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 2
59395: PUSH
59396: LD_INT 2
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 2
59406: NEG
59407: PUSH
59408: LD_INT 4
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 4
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 4
59428: PUSH
59429: LD_INT 1
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 5
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 5
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 4
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 3
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 3
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 3
59490: PUSH
59491: LD_INT 2
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 5
59501: PUSH
59502: LD_INT 2
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59556: LD_ADDR_VAR 0 32
59560: PUSH
59561: LD_INT 4
59563: NEG
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 4
59574: NEG
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 3
59586: NEG
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 3
59597: NEG
59598: PUSH
59599: LD_INT 1
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 4
59608: NEG
59609: PUSH
59610: LD_INT 1
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 5
59619: NEG
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 5
59630: NEG
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 5
59642: NEG
59643: PUSH
59644: LD_INT 2
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 3
59654: NEG
59655: PUSH
59656: LD_INT 2
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 3
59665: NEG
59666: PUSH
59667: LD_INT 3
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 3
59677: NEG
59678: PUSH
59679: LD_INT 4
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 2
59689: NEG
59690: PUSH
59691: LD_INT 3
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 2
59701: NEG
59702: PUSH
59703: LD_INT 2
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 3
59713: NEG
59714: PUSH
59715: LD_INT 2
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 4
59725: NEG
59726: PUSH
59727: LD_INT 3
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 4
59737: NEG
59738: PUSH
59739: LD_INT 4
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 2
59749: NEG
59750: PUSH
59751: LD_INT 4
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 4
59761: NEG
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: LD_INT 4
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 5
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: LD_INT 4
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: LD_INT 3
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 0
59817: PUSH
59818: LD_INT 3
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 1
59828: NEG
59829: PUSH
59830: LD_INT 4
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: LD_INT 5
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 2
59852: PUSH
59853: LD_INT 3
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 2
59863: NEG
59864: PUSH
59865: LD_INT 5
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 3
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 3
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 4
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 4
59906: PUSH
59907: LD_INT 1
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 3
59916: PUSH
59917: LD_INT 1
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 2
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 2
59936: PUSH
59937: LD_INT 1
59939: NEG
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 2
59947: PUSH
59948: LD_INT 2
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 4
59958: PUSH
59959: LD_INT 2
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 4
59968: PUSH
59969: LD_INT 4
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 4
59978: PUSH
59979: LD_INT 3
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 5
59988: PUSH
59989: LD_INT 4
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 5
59998: PUSH
59999: LD_INT 5
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 4
60008: PUSH
60009: LD_INT 5
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 3
60018: PUSH
60019: LD_INT 4
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 3
60028: PUSH
60029: LD_INT 3
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 5
60038: PUSH
60039: LD_INT 3
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 3
60048: PUSH
60049: LD_INT 5
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60103: LD_ADDR_VAR 0 33
60107: PUSH
60108: LD_INT 4
60110: NEG
60111: PUSH
60112: LD_INT 4
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 4
60122: NEG
60123: PUSH
60124: LD_INT 5
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 3
60134: NEG
60135: PUSH
60136: LD_INT 4
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 3
60146: NEG
60147: PUSH
60148: LD_INT 3
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 4
60158: NEG
60159: PUSH
60160: LD_INT 3
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 5
60170: NEG
60171: PUSH
60172: LD_INT 4
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 5
60182: NEG
60183: PUSH
60184: LD_INT 5
60186: NEG
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 3
60194: NEG
60195: PUSH
60196: LD_INT 5
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 5
60206: NEG
60207: PUSH
60208: LD_INT 3
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: LD_INT 3
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: LD_INT 4
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: PUSH
60241: LD_INT 3
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: LD_INT 2
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: LD_INT 2
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: LD_INT 3
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: LD_INT 4
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: LD_INT 2
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 2
60308: NEG
60309: PUSH
60310: LD_INT 4
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 4
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 4
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 5
60341: PUSH
60342: LD_INT 0
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 5
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 4
60361: PUSH
60362: LD_INT 1
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 3
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 3
60381: PUSH
60382: LD_INT 1
60384: NEG
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 3
60392: PUSH
60393: LD_INT 2
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 5
60403: PUSH
60404: LD_INT 2
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 3
60413: PUSH
60414: LD_INT 3
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 3
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 4
60433: PUSH
60434: LD_INT 3
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 4
60443: PUSH
60444: LD_INT 4
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 3
60453: PUSH
60454: LD_INT 4
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 2
60463: PUSH
60464: LD_INT 3
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 2
60473: PUSH
60474: LD_INT 2
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 4
60483: PUSH
60484: LD_INT 2
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: LD_INT 4
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 0
60503: PUSH
60504: LD_INT 4
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: LD_INT 3
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: LD_INT 4
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: PUSH
60534: LD_INT 5
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: LD_INT 5
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 1
60553: NEG
60554: PUSH
60555: LD_INT 4
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: LD_INT 3
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 2
60575: PUSH
60576: LD_INT 5
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 2
60585: NEG
60586: PUSH
60587: LD_INT 3
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60641: LD_ADDR_VAR 0 34
60645: PUSH
60646: LD_INT 0
60648: PUSH
60649: LD_INT 4
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: LD_INT 5
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: LD_INT 4
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 1
60681: PUSH
60682: LD_INT 3
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: LD_INT 3
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: PUSH
60705: LD_INT 4
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 1
60715: NEG
60716: PUSH
60717: LD_INT 5
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 2
60727: PUSH
60728: LD_INT 3
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 2
60738: NEG
60739: PUSH
60740: LD_INT 5
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 3
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 3
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 4
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 4
60781: PUSH
60782: LD_INT 1
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 3
60791: PUSH
60792: LD_INT 1
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 2
60801: PUSH
60802: LD_INT 0
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 2
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 2
60822: PUSH
60823: LD_INT 2
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 4
60833: PUSH
60834: LD_INT 2
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 4
60843: PUSH
60844: LD_INT 4
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 4
60853: PUSH
60854: LD_INT 3
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 5
60863: PUSH
60864: LD_INT 4
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 5
60873: PUSH
60874: LD_INT 5
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 4
60883: PUSH
60884: LD_INT 5
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 3
60893: PUSH
60894: LD_INT 4
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 3
60903: PUSH
60904: LD_INT 3
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 5
60913: PUSH
60914: LD_INT 3
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 3
60923: PUSH
60924: LD_INT 5
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: LD_INT 3
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: LD_INT 2
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: LD_INT 3
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: LD_INT 4
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: LD_INT 4
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: NEG
60984: PUSH
60985: LD_INT 3
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: LD_INT 2
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: LD_INT 4
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 2
61015: NEG
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 4
61026: NEG
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 4
61037: NEG
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 3
61049: NEG
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 3
61060: NEG
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 4
61071: NEG
61072: PUSH
61073: LD_INT 1
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 5
61082: NEG
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 5
61093: NEG
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 5
61105: NEG
61106: PUSH
61107: LD_INT 2
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 3
61117: NEG
61118: PUSH
61119: LD_INT 2
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: ST_TO_ADDR
// end ; end ;
61173: GO 61176
61175: POP
// case btype of b_depot , b_warehouse :
61176: LD_VAR 0 1
61180: PUSH
61181: LD_INT 0
61183: DOUBLE
61184: EQUAL
61185: IFTRUE 61195
61187: LD_INT 1
61189: DOUBLE
61190: EQUAL
61191: IFTRUE 61195
61193: GO 61396
61195: POP
// case nation of nation_american :
61196: LD_VAR 0 5
61200: PUSH
61201: LD_INT 1
61203: DOUBLE
61204: EQUAL
61205: IFTRUE 61209
61207: GO 61265
61209: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61210: LD_ADDR_VAR 0 9
61214: PUSH
61215: LD_VAR 0 11
61219: PUSH
61220: LD_VAR 0 12
61224: PUSH
61225: LD_VAR 0 13
61229: PUSH
61230: LD_VAR 0 14
61234: PUSH
61235: LD_VAR 0 15
61239: PUSH
61240: LD_VAR 0 16
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: PUSH
61253: LD_VAR 0 4
61257: PUSH
61258: LD_INT 1
61260: PLUS
61261: ARRAY
61262: ST_TO_ADDR
61263: GO 61394
61265: LD_INT 2
61267: DOUBLE
61268: EQUAL
61269: IFTRUE 61273
61271: GO 61329
61273: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61274: LD_ADDR_VAR 0 9
61278: PUSH
61279: LD_VAR 0 17
61283: PUSH
61284: LD_VAR 0 18
61288: PUSH
61289: LD_VAR 0 19
61293: PUSH
61294: LD_VAR 0 20
61298: PUSH
61299: LD_VAR 0 21
61303: PUSH
61304: LD_VAR 0 22
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: PUSH
61317: LD_VAR 0 4
61321: PUSH
61322: LD_INT 1
61324: PLUS
61325: ARRAY
61326: ST_TO_ADDR
61327: GO 61394
61329: LD_INT 3
61331: DOUBLE
61332: EQUAL
61333: IFTRUE 61337
61335: GO 61393
61337: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61338: LD_ADDR_VAR 0 9
61342: PUSH
61343: LD_VAR 0 23
61347: PUSH
61348: LD_VAR 0 24
61352: PUSH
61353: LD_VAR 0 25
61357: PUSH
61358: LD_VAR 0 26
61362: PUSH
61363: LD_VAR 0 27
61367: PUSH
61368: LD_VAR 0 28
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: PUSH
61381: LD_VAR 0 4
61385: PUSH
61386: LD_INT 1
61388: PLUS
61389: ARRAY
61390: ST_TO_ADDR
61391: GO 61394
61393: POP
61394: GO 61949
61396: LD_INT 2
61398: DOUBLE
61399: EQUAL
61400: IFTRUE 61410
61402: LD_INT 3
61404: DOUBLE
61405: EQUAL
61406: IFTRUE 61410
61408: GO 61466
61410: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61411: LD_ADDR_VAR 0 9
61415: PUSH
61416: LD_VAR 0 29
61420: PUSH
61421: LD_VAR 0 30
61425: PUSH
61426: LD_VAR 0 31
61430: PUSH
61431: LD_VAR 0 32
61435: PUSH
61436: LD_VAR 0 33
61440: PUSH
61441: LD_VAR 0 34
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: PUSH
61454: LD_VAR 0 4
61458: PUSH
61459: LD_INT 1
61461: PLUS
61462: ARRAY
61463: ST_TO_ADDR
61464: GO 61949
61466: LD_INT 16
61468: DOUBLE
61469: EQUAL
61470: IFTRUE 61528
61472: LD_INT 17
61474: DOUBLE
61475: EQUAL
61476: IFTRUE 61528
61478: LD_INT 18
61480: DOUBLE
61481: EQUAL
61482: IFTRUE 61528
61484: LD_INT 19
61486: DOUBLE
61487: EQUAL
61488: IFTRUE 61528
61490: LD_INT 22
61492: DOUBLE
61493: EQUAL
61494: IFTRUE 61528
61496: LD_INT 20
61498: DOUBLE
61499: EQUAL
61500: IFTRUE 61528
61502: LD_INT 21
61504: DOUBLE
61505: EQUAL
61506: IFTRUE 61528
61508: LD_INT 23
61510: DOUBLE
61511: EQUAL
61512: IFTRUE 61528
61514: LD_INT 24
61516: DOUBLE
61517: EQUAL
61518: IFTRUE 61528
61520: LD_INT 25
61522: DOUBLE
61523: EQUAL
61524: IFTRUE 61528
61526: GO 61584
61528: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61529: LD_ADDR_VAR 0 9
61533: PUSH
61534: LD_VAR 0 35
61538: PUSH
61539: LD_VAR 0 36
61543: PUSH
61544: LD_VAR 0 37
61548: PUSH
61549: LD_VAR 0 38
61553: PUSH
61554: LD_VAR 0 39
61558: PUSH
61559: LD_VAR 0 40
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: PUSH
61572: LD_VAR 0 4
61576: PUSH
61577: LD_INT 1
61579: PLUS
61580: ARRAY
61581: ST_TO_ADDR
61582: GO 61949
61584: LD_INT 6
61586: DOUBLE
61587: EQUAL
61588: IFTRUE 61640
61590: LD_INT 7
61592: DOUBLE
61593: EQUAL
61594: IFTRUE 61640
61596: LD_INT 8
61598: DOUBLE
61599: EQUAL
61600: IFTRUE 61640
61602: LD_INT 13
61604: DOUBLE
61605: EQUAL
61606: IFTRUE 61640
61608: LD_INT 12
61610: DOUBLE
61611: EQUAL
61612: IFTRUE 61640
61614: LD_INT 15
61616: DOUBLE
61617: EQUAL
61618: IFTRUE 61640
61620: LD_INT 11
61622: DOUBLE
61623: EQUAL
61624: IFTRUE 61640
61626: LD_INT 14
61628: DOUBLE
61629: EQUAL
61630: IFTRUE 61640
61632: LD_INT 10
61634: DOUBLE
61635: EQUAL
61636: IFTRUE 61640
61638: GO 61696
61640: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61641: LD_ADDR_VAR 0 9
61645: PUSH
61646: LD_VAR 0 41
61650: PUSH
61651: LD_VAR 0 42
61655: PUSH
61656: LD_VAR 0 43
61660: PUSH
61661: LD_VAR 0 44
61665: PUSH
61666: LD_VAR 0 45
61670: PUSH
61671: LD_VAR 0 46
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: PUSH
61684: LD_VAR 0 4
61688: PUSH
61689: LD_INT 1
61691: PLUS
61692: ARRAY
61693: ST_TO_ADDR
61694: GO 61949
61696: LD_INT 36
61698: DOUBLE
61699: EQUAL
61700: IFTRUE 61704
61702: GO 61760
61704: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61705: LD_ADDR_VAR 0 9
61709: PUSH
61710: LD_VAR 0 47
61714: PUSH
61715: LD_VAR 0 48
61719: PUSH
61720: LD_VAR 0 49
61724: PUSH
61725: LD_VAR 0 50
61729: PUSH
61730: LD_VAR 0 51
61734: PUSH
61735: LD_VAR 0 52
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: PUSH
61748: LD_VAR 0 4
61752: PUSH
61753: LD_INT 1
61755: PLUS
61756: ARRAY
61757: ST_TO_ADDR
61758: GO 61949
61760: LD_INT 4
61762: DOUBLE
61763: EQUAL
61764: IFTRUE 61786
61766: LD_INT 5
61768: DOUBLE
61769: EQUAL
61770: IFTRUE 61786
61772: LD_INT 34
61774: DOUBLE
61775: EQUAL
61776: IFTRUE 61786
61778: LD_INT 37
61780: DOUBLE
61781: EQUAL
61782: IFTRUE 61786
61784: GO 61842
61786: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61787: LD_ADDR_VAR 0 9
61791: PUSH
61792: LD_VAR 0 53
61796: PUSH
61797: LD_VAR 0 54
61801: PUSH
61802: LD_VAR 0 55
61806: PUSH
61807: LD_VAR 0 56
61811: PUSH
61812: LD_VAR 0 57
61816: PUSH
61817: LD_VAR 0 58
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: PUSH
61830: LD_VAR 0 4
61834: PUSH
61835: LD_INT 1
61837: PLUS
61838: ARRAY
61839: ST_TO_ADDR
61840: GO 61949
61842: LD_INT 31
61844: DOUBLE
61845: EQUAL
61846: IFTRUE 61892
61848: LD_INT 32
61850: DOUBLE
61851: EQUAL
61852: IFTRUE 61892
61854: LD_INT 33
61856: DOUBLE
61857: EQUAL
61858: IFTRUE 61892
61860: LD_INT 27
61862: DOUBLE
61863: EQUAL
61864: IFTRUE 61892
61866: LD_INT 26
61868: DOUBLE
61869: EQUAL
61870: IFTRUE 61892
61872: LD_INT 28
61874: DOUBLE
61875: EQUAL
61876: IFTRUE 61892
61878: LD_INT 29
61880: DOUBLE
61881: EQUAL
61882: IFTRUE 61892
61884: LD_INT 30
61886: DOUBLE
61887: EQUAL
61888: IFTRUE 61892
61890: GO 61948
61892: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61893: LD_ADDR_VAR 0 9
61897: PUSH
61898: LD_VAR 0 59
61902: PUSH
61903: LD_VAR 0 60
61907: PUSH
61908: LD_VAR 0 61
61912: PUSH
61913: LD_VAR 0 62
61917: PUSH
61918: LD_VAR 0 63
61922: PUSH
61923: LD_VAR 0 64
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: PUSH
61936: LD_VAR 0 4
61940: PUSH
61941: LD_INT 1
61943: PLUS
61944: ARRAY
61945: ST_TO_ADDR
61946: GO 61949
61948: POP
// temp_list2 = [ ] ;
61949: LD_ADDR_VAR 0 10
61953: PUSH
61954: EMPTY
61955: ST_TO_ADDR
// for i in temp_list do
61956: LD_ADDR_VAR 0 8
61960: PUSH
61961: LD_VAR 0 9
61965: PUSH
61966: FOR_IN
61967: IFFALSE 62019
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61969: LD_ADDR_VAR 0 10
61973: PUSH
61974: LD_VAR 0 10
61978: PUSH
61979: LD_VAR 0 8
61983: PUSH
61984: LD_INT 1
61986: ARRAY
61987: PUSH
61988: LD_VAR 0 2
61992: PLUS
61993: PUSH
61994: LD_VAR 0 8
61998: PUSH
61999: LD_INT 2
62001: ARRAY
62002: PUSH
62003: LD_VAR 0 3
62007: PLUS
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: EMPTY
62014: LIST
62015: ADD
62016: ST_TO_ADDR
62017: GO 61966
62019: POP
62020: POP
// result = temp_list2 ;
62021: LD_ADDR_VAR 0 7
62025: PUSH
62026: LD_VAR 0 10
62030: ST_TO_ADDR
// end ;
62031: LD_VAR 0 7
62035: RET
// export function EnemyInRange ( unit , dist ) ; begin
62036: LD_INT 0
62038: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62039: LD_ADDR_VAR 0 3
62043: PUSH
62044: LD_VAR 0 1
62048: PPUSH
62049: CALL_OW 255
62053: PPUSH
62054: LD_VAR 0 1
62058: PPUSH
62059: CALL_OW 250
62063: PPUSH
62064: LD_VAR 0 1
62068: PPUSH
62069: CALL_OW 251
62073: PPUSH
62074: LD_VAR 0 2
62078: PPUSH
62079: CALL 35438 0 4
62083: PUSH
62084: LD_INT 4
62086: ARRAY
62087: ST_TO_ADDR
// end ;
62088: LD_VAR 0 3
62092: RET
// export function PlayerSeeMe ( unit ) ; begin
62093: LD_INT 0
62095: PPUSH
// result := See ( your_side , unit ) ;
62096: LD_ADDR_VAR 0 2
62100: PUSH
62101: LD_OWVAR 2
62105: PPUSH
62106: LD_VAR 0 1
62110: PPUSH
62111: CALL_OW 292
62115: ST_TO_ADDR
// end ;
62116: LD_VAR 0 2
62120: RET
// export function ReverseDir ( unit ) ; begin
62121: LD_INT 0
62123: PPUSH
// if not unit then
62124: LD_VAR 0 1
62128: NOT
62129: IFFALSE 62133
// exit ;
62131: GO 62156
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62133: LD_ADDR_VAR 0 2
62137: PUSH
62138: LD_VAR 0 1
62142: PPUSH
62143: CALL_OW 254
62147: PUSH
62148: LD_INT 3
62150: PLUS
62151: PUSH
62152: LD_INT 6
62154: MOD
62155: ST_TO_ADDR
// end ;
62156: LD_VAR 0 2
62160: RET
// export function ReverseArray ( array ) ; var i ; begin
62161: LD_INT 0
62163: PPUSH
62164: PPUSH
// if not array then
62165: LD_VAR 0 1
62169: NOT
62170: IFFALSE 62174
// exit ;
62172: GO 62229
// result := [ ] ;
62174: LD_ADDR_VAR 0 2
62178: PUSH
62179: EMPTY
62180: ST_TO_ADDR
// for i := array downto 1 do
62181: LD_ADDR_VAR 0 3
62185: PUSH
62186: DOUBLE
62187: LD_VAR 0 1
62191: INC
62192: ST_TO_ADDR
62193: LD_INT 1
62195: PUSH
62196: FOR_DOWNTO
62197: IFFALSE 62227
// result := Join ( result , array [ i ] ) ;
62199: LD_ADDR_VAR 0 2
62203: PUSH
62204: LD_VAR 0 2
62208: PPUSH
62209: LD_VAR 0 1
62213: PUSH
62214: LD_VAR 0 3
62218: ARRAY
62219: PPUSH
62220: CALL 66872 0 2
62224: ST_TO_ADDR
62225: GO 62196
62227: POP
62228: POP
// end ;
62229: LD_VAR 0 2
62233: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62234: LD_INT 0
62236: PPUSH
62237: PPUSH
62238: PPUSH
62239: PPUSH
62240: PPUSH
62241: PPUSH
// if not unit or not hexes then
62242: LD_VAR 0 1
62246: NOT
62247: PUSH
62248: LD_VAR 0 2
62252: NOT
62253: OR
62254: IFFALSE 62258
// exit ;
62256: GO 62381
// dist := 9999 ;
62258: LD_ADDR_VAR 0 5
62262: PUSH
62263: LD_INT 9999
62265: ST_TO_ADDR
// for i = 1 to hexes do
62266: LD_ADDR_VAR 0 4
62270: PUSH
62271: DOUBLE
62272: LD_INT 1
62274: DEC
62275: ST_TO_ADDR
62276: LD_VAR 0 2
62280: PUSH
62281: FOR_TO
62282: IFFALSE 62369
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62284: LD_ADDR_VAR 0 6
62288: PUSH
62289: LD_VAR 0 1
62293: PPUSH
62294: LD_VAR 0 2
62298: PUSH
62299: LD_VAR 0 4
62303: ARRAY
62304: PUSH
62305: LD_INT 1
62307: ARRAY
62308: PPUSH
62309: LD_VAR 0 2
62313: PUSH
62314: LD_VAR 0 4
62318: ARRAY
62319: PUSH
62320: LD_INT 2
62322: ARRAY
62323: PPUSH
62324: CALL_OW 297
62328: ST_TO_ADDR
// if tdist < dist then
62329: LD_VAR 0 6
62333: PUSH
62334: LD_VAR 0 5
62338: LESS
62339: IFFALSE 62367
// begin hex := hexes [ i ] ;
62341: LD_ADDR_VAR 0 8
62345: PUSH
62346: LD_VAR 0 2
62350: PUSH
62351: LD_VAR 0 4
62355: ARRAY
62356: ST_TO_ADDR
// dist := tdist ;
62357: LD_ADDR_VAR 0 5
62361: PUSH
62362: LD_VAR 0 6
62366: ST_TO_ADDR
// end ; end ;
62367: GO 62281
62369: POP
62370: POP
// result := hex ;
62371: LD_ADDR_VAR 0 3
62375: PUSH
62376: LD_VAR 0 8
62380: ST_TO_ADDR
// end ;
62381: LD_VAR 0 3
62385: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62386: LD_INT 0
62388: PPUSH
62389: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62390: LD_VAR 0 1
62394: NOT
62395: PUSH
62396: LD_VAR 0 1
62400: PUSH
62401: LD_INT 21
62403: PUSH
62404: LD_INT 2
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 23
62413: PUSH
62414: LD_INT 2
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PPUSH
62425: CALL_OW 69
62429: IN
62430: NOT
62431: OR
62432: IFFALSE 62436
// exit ;
62434: GO 62483
// for i = 1 to 3 do
62436: LD_ADDR_VAR 0 3
62440: PUSH
62441: DOUBLE
62442: LD_INT 1
62444: DEC
62445: ST_TO_ADDR
62446: LD_INT 3
62448: PUSH
62449: FOR_TO
62450: IFFALSE 62481
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62452: LD_VAR 0 1
62456: PPUSH
62457: CALL_OW 250
62461: PPUSH
62462: LD_VAR 0 1
62466: PPUSH
62467: CALL_OW 251
62471: PPUSH
62472: LD_INT 1
62474: PPUSH
62475: CALL_OW 453
62479: GO 62449
62481: POP
62482: POP
// end ;
62483: LD_VAR 0 2
62487: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62488: LD_INT 0
62490: PPUSH
62491: PPUSH
62492: PPUSH
62493: PPUSH
62494: PPUSH
62495: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62496: LD_VAR 0 1
62500: NOT
62501: PUSH
62502: LD_VAR 0 2
62506: NOT
62507: OR
62508: PUSH
62509: LD_VAR 0 1
62513: PPUSH
62514: CALL_OW 314
62518: OR
62519: IFFALSE 62523
// exit ;
62521: GO 62990
// if GetLives ( i ) < 250 then
62523: LD_VAR 0 4
62527: PPUSH
62528: CALL_OW 256
62532: PUSH
62533: LD_INT 250
62535: LESS
62536: IFFALSE 62549
// begin ComAutodestruct ( i ) ;
62538: LD_VAR 0 4
62542: PPUSH
62543: CALL 62386 0 1
// exit ;
62547: GO 62990
// end ; x := GetX ( enemy_unit ) ;
62549: LD_ADDR_VAR 0 7
62553: PUSH
62554: LD_VAR 0 2
62558: PPUSH
62559: CALL_OW 250
62563: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62564: LD_ADDR_VAR 0 8
62568: PUSH
62569: LD_VAR 0 2
62573: PPUSH
62574: CALL_OW 251
62578: ST_TO_ADDR
// if not x or not y then
62579: LD_VAR 0 7
62583: NOT
62584: PUSH
62585: LD_VAR 0 8
62589: NOT
62590: OR
62591: IFFALSE 62595
// exit ;
62593: GO 62990
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62595: LD_ADDR_VAR 0 6
62599: PUSH
62600: LD_VAR 0 7
62604: PPUSH
62605: LD_INT 0
62607: PPUSH
62608: LD_INT 4
62610: PPUSH
62611: CALL_OW 272
62615: PUSH
62616: LD_VAR 0 8
62620: PPUSH
62621: LD_INT 0
62623: PPUSH
62624: LD_INT 4
62626: PPUSH
62627: CALL_OW 273
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_VAR 0 7
62640: PPUSH
62641: LD_INT 1
62643: PPUSH
62644: LD_INT 4
62646: PPUSH
62647: CALL_OW 272
62651: PUSH
62652: LD_VAR 0 8
62656: PPUSH
62657: LD_INT 1
62659: PPUSH
62660: LD_INT 4
62662: PPUSH
62663: CALL_OW 273
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_VAR 0 7
62676: PPUSH
62677: LD_INT 2
62679: PPUSH
62680: LD_INT 4
62682: PPUSH
62683: CALL_OW 272
62687: PUSH
62688: LD_VAR 0 8
62692: PPUSH
62693: LD_INT 2
62695: PPUSH
62696: LD_INT 4
62698: PPUSH
62699: CALL_OW 273
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_VAR 0 7
62712: PPUSH
62713: LD_INT 3
62715: PPUSH
62716: LD_INT 4
62718: PPUSH
62719: CALL_OW 272
62723: PUSH
62724: LD_VAR 0 8
62728: PPUSH
62729: LD_INT 3
62731: PPUSH
62732: LD_INT 4
62734: PPUSH
62735: CALL_OW 273
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_VAR 0 7
62748: PPUSH
62749: LD_INT 4
62751: PPUSH
62752: LD_INT 4
62754: PPUSH
62755: CALL_OW 272
62759: PUSH
62760: LD_VAR 0 8
62764: PPUSH
62765: LD_INT 4
62767: PPUSH
62768: LD_INT 4
62770: PPUSH
62771: CALL_OW 273
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_VAR 0 7
62784: PPUSH
62785: LD_INT 5
62787: PPUSH
62788: LD_INT 4
62790: PPUSH
62791: CALL_OW 272
62795: PUSH
62796: LD_VAR 0 8
62800: PPUSH
62801: LD_INT 5
62803: PPUSH
62804: LD_INT 4
62806: PPUSH
62807: CALL_OW 273
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: ST_TO_ADDR
// for i = tmp downto 1 do
62824: LD_ADDR_VAR 0 4
62828: PUSH
62829: DOUBLE
62830: LD_VAR 0 6
62834: INC
62835: ST_TO_ADDR
62836: LD_INT 1
62838: PUSH
62839: FOR_DOWNTO
62840: IFFALSE 62941
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62842: LD_VAR 0 6
62846: PUSH
62847: LD_VAR 0 4
62851: ARRAY
62852: PUSH
62853: LD_INT 1
62855: ARRAY
62856: PPUSH
62857: LD_VAR 0 6
62861: PUSH
62862: LD_VAR 0 4
62866: ARRAY
62867: PUSH
62868: LD_INT 2
62870: ARRAY
62871: PPUSH
62872: CALL_OW 488
62876: NOT
62877: PUSH
62878: LD_VAR 0 6
62882: PUSH
62883: LD_VAR 0 4
62887: ARRAY
62888: PUSH
62889: LD_INT 1
62891: ARRAY
62892: PPUSH
62893: LD_VAR 0 6
62897: PUSH
62898: LD_VAR 0 4
62902: ARRAY
62903: PUSH
62904: LD_INT 2
62906: ARRAY
62907: PPUSH
62908: CALL_OW 428
62912: PUSH
62913: LD_INT 0
62915: NONEQUAL
62916: OR
62917: IFFALSE 62939
// tmp := Delete ( tmp , i ) ;
62919: LD_ADDR_VAR 0 6
62923: PUSH
62924: LD_VAR 0 6
62928: PPUSH
62929: LD_VAR 0 4
62933: PPUSH
62934: CALL_OW 3
62938: ST_TO_ADDR
62939: GO 62839
62941: POP
62942: POP
// j := GetClosestHex ( unit , tmp ) ;
62943: LD_ADDR_VAR 0 5
62947: PUSH
62948: LD_VAR 0 1
62952: PPUSH
62953: LD_VAR 0 6
62957: PPUSH
62958: CALL 62234 0 2
62962: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62963: LD_VAR 0 1
62967: PPUSH
62968: LD_VAR 0 5
62972: PUSH
62973: LD_INT 1
62975: ARRAY
62976: PPUSH
62977: LD_VAR 0 5
62981: PUSH
62982: LD_INT 2
62984: ARRAY
62985: PPUSH
62986: CALL_OW 111
// end ;
62990: LD_VAR 0 3
62994: RET
// export function PrepareApemanSoldier ( ) ; begin
62995: LD_INT 0
62997: PPUSH
// uc_nation := 0 ;
62998: LD_ADDR_OWVAR 21
63002: PUSH
63003: LD_INT 0
63005: ST_TO_ADDR
// hc_sex := sex_male ;
63006: LD_ADDR_OWVAR 27
63010: PUSH
63011: LD_INT 1
63013: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63014: LD_ADDR_OWVAR 28
63018: PUSH
63019: LD_INT 15
63021: ST_TO_ADDR
// hc_gallery :=  ;
63022: LD_ADDR_OWVAR 33
63026: PUSH
63027: LD_STRING 
63029: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63030: LD_ADDR_OWVAR 31
63034: PUSH
63035: LD_INT 0
63037: PPUSH
63038: LD_INT 3
63040: PPUSH
63041: CALL_OW 12
63045: PUSH
63046: LD_INT 0
63048: PPUSH
63049: LD_INT 3
63051: PPUSH
63052: CALL_OW 12
63056: PUSH
63057: LD_INT 0
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: ST_TO_ADDR
// end ;
63069: LD_VAR 0 1
63073: RET
// export function PrepareApemanEngineer ( ) ; begin
63074: LD_INT 0
63076: PPUSH
// uc_nation := 0 ;
63077: LD_ADDR_OWVAR 21
63081: PUSH
63082: LD_INT 0
63084: ST_TO_ADDR
// hc_sex := sex_male ;
63085: LD_ADDR_OWVAR 27
63089: PUSH
63090: LD_INT 1
63092: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63093: LD_ADDR_OWVAR 28
63097: PUSH
63098: LD_INT 16
63100: ST_TO_ADDR
// hc_gallery :=  ;
63101: LD_ADDR_OWVAR 33
63105: PUSH
63106: LD_STRING 
63108: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63109: LD_ADDR_OWVAR 31
63113: PUSH
63114: LD_INT 0
63116: PPUSH
63117: LD_INT 3
63119: PPUSH
63120: CALL_OW 12
63124: PUSH
63125: LD_INT 0
63127: PPUSH
63128: LD_INT 3
63130: PPUSH
63131: CALL_OW 12
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: ST_TO_ADDR
// end ;
63148: LD_VAR 0 1
63152: RET
// export function PrepareApeman ( agressivity ) ; begin
63153: LD_INT 0
63155: PPUSH
// uc_side := 0 ;
63156: LD_ADDR_OWVAR 20
63160: PUSH
63161: LD_INT 0
63163: ST_TO_ADDR
// uc_nation := 0 ;
63164: LD_ADDR_OWVAR 21
63168: PUSH
63169: LD_INT 0
63171: ST_TO_ADDR
// hc_sex := sex_male ;
63172: LD_ADDR_OWVAR 27
63176: PUSH
63177: LD_INT 1
63179: ST_TO_ADDR
// hc_class := class_apeman ;
63180: LD_ADDR_OWVAR 28
63184: PUSH
63185: LD_INT 12
63187: ST_TO_ADDR
// hc_gallery :=  ;
63188: LD_ADDR_OWVAR 33
63192: PUSH
63193: LD_STRING 
63195: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63196: LD_ADDR_OWVAR 35
63200: PUSH
63201: LD_VAR 0 1
63205: NEG
63206: PPUSH
63207: LD_VAR 0 1
63211: PPUSH
63212: CALL_OW 12
63216: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63217: LD_ADDR_OWVAR 31
63221: PUSH
63222: LD_INT 0
63224: PPUSH
63225: LD_INT 3
63227: PPUSH
63228: CALL_OW 12
63232: PUSH
63233: LD_INT 0
63235: PPUSH
63236: LD_INT 3
63238: PPUSH
63239: CALL_OW 12
63243: PUSH
63244: LD_INT 0
63246: PUSH
63247: LD_INT 0
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: ST_TO_ADDR
// end ;
63256: LD_VAR 0 2
63260: RET
// export function PrepareTiger ( agressivity ) ; begin
63261: LD_INT 0
63263: PPUSH
// uc_side := 0 ;
63264: LD_ADDR_OWVAR 20
63268: PUSH
63269: LD_INT 0
63271: ST_TO_ADDR
// uc_nation := 0 ;
63272: LD_ADDR_OWVAR 21
63276: PUSH
63277: LD_INT 0
63279: ST_TO_ADDR
// hc_class := class_tiger ;
63280: LD_ADDR_OWVAR 28
63284: PUSH
63285: LD_INT 14
63287: ST_TO_ADDR
// hc_gallery :=  ;
63288: LD_ADDR_OWVAR 33
63292: PUSH
63293: LD_STRING 
63295: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63296: LD_ADDR_OWVAR 35
63300: PUSH
63301: LD_VAR 0 1
63305: NEG
63306: PPUSH
63307: LD_VAR 0 1
63311: PPUSH
63312: CALL_OW 12
63316: ST_TO_ADDR
// end ;
63317: LD_VAR 0 2
63321: RET
// export function PrepareEnchidna ( ) ; begin
63322: LD_INT 0
63324: PPUSH
// uc_side := 0 ;
63325: LD_ADDR_OWVAR 20
63329: PUSH
63330: LD_INT 0
63332: ST_TO_ADDR
// uc_nation := 0 ;
63333: LD_ADDR_OWVAR 21
63337: PUSH
63338: LD_INT 0
63340: ST_TO_ADDR
// hc_class := class_baggie ;
63341: LD_ADDR_OWVAR 28
63345: PUSH
63346: LD_INT 13
63348: ST_TO_ADDR
// hc_gallery :=  ;
63349: LD_ADDR_OWVAR 33
63353: PUSH
63354: LD_STRING 
63356: ST_TO_ADDR
// end ;
63357: LD_VAR 0 1
63361: RET
// export function PrepareFrog ( ) ; begin
63362: LD_INT 0
63364: PPUSH
// uc_side := 0 ;
63365: LD_ADDR_OWVAR 20
63369: PUSH
63370: LD_INT 0
63372: ST_TO_ADDR
// uc_nation := 0 ;
63373: LD_ADDR_OWVAR 21
63377: PUSH
63378: LD_INT 0
63380: ST_TO_ADDR
// hc_class := class_frog ;
63381: LD_ADDR_OWVAR 28
63385: PUSH
63386: LD_INT 19
63388: ST_TO_ADDR
// hc_gallery :=  ;
63389: LD_ADDR_OWVAR 33
63393: PUSH
63394: LD_STRING 
63396: ST_TO_ADDR
// end ;
63397: LD_VAR 0 1
63401: RET
// export function PrepareFish ( ) ; begin
63402: LD_INT 0
63404: PPUSH
// uc_side := 0 ;
63405: LD_ADDR_OWVAR 20
63409: PUSH
63410: LD_INT 0
63412: ST_TO_ADDR
// uc_nation := 0 ;
63413: LD_ADDR_OWVAR 21
63417: PUSH
63418: LD_INT 0
63420: ST_TO_ADDR
// hc_class := class_fish ;
63421: LD_ADDR_OWVAR 28
63425: PUSH
63426: LD_INT 20
63428: ST_TO_ADDR
// hc_gallery :=  ;
63429: LD_ADDR_OWVAR 33
63433: PUSH
63434: LD_STRING 
63436: ST_TO_ADDR
// end ;
63437: LD_VAR 0 1
63441: RET
// export function PrepareBird ( ) ; begin
63442: LD_INT 0
63444: PPUSH
// uc_side := 0 ;
63445: LD_ADDR_OWVAR 20
63449: PUSH
63450: LD_INT 0
63452: ST_TO_ADDR
// uc_nation := 0 ;
63453: LD_ADDR_OWVAR 21
63457: PUSH
63458: LD_INT 0
63460: ST_TO_ADDR
// hc_class := class_phororhacos ;
63461: LD_ADDR_OWVAR 28
63465: PUSH
63466: LD_INT 18
63468: ST_TO_ADDR
// hc_gallery :=  ;
63469: LD_ADDR_OWVAR 33
63473: PUSH
63474: LD_STRING 
63476: ST_TO_ADDR
// end ;
63477: LD_VAR 0 1
63481: RET
// export function PrepareHorse ( ) ; begin
63482: LD_INT 0
63484: PPUSH
// uc_side := 0 ;
63485: LD_ADDR_OWVAR 20
63489: PUSH
63490: LD_INT 0
63492: ST_TO_ADDR
// uc_nation := 0 ;
63493: LD_ADDR_OWVAR 21
63497: PUSH
63498: LD_INT 0
63500: ST_TO_ADDR
// hc_class := class_horse ;
63501: LD_ADDR_OWVAR 28
63505: PUSH
63506: LD_INT 21
63508: ST_TO_ADDR
// hc_gallery :=  ;
63509: LD_ADDR_OWVAR 33
63513: PUSH
63514: LD_STRING 
63516: ST_TO_ADDR
// end ;
63517: LD_VAR 0 1
63521: RET
// export function PrepareMastodont ( ) ; begin
63522: LD_INT 0
63524: PPUSH
// uc_side := 0 ;
63525: LD_ADDR_OWVAR 20
63529: PUSH
63530: LD_INT 0
63532: ST_TO_ADDR
// uc_nation := 0 ;
63533: LD_ADDR_OWVAR 21
63537: PUSH
63538: LD_INT 0
63540: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63541: LD_ADDR_OWVAR 37
63545: PUSH
63546: LD_INT 31
63548: ST_TO_ADDR
// vc_control := control_rider ;
63549: LD_ADDR_OWVAR 38
63553: PUSH
63554: LD_INT 4
63556: ST_TO_ADDR
// end ;
63557: LD_VAR 0 1
63561: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63562: LD_INT 0
63564: PPUSH
63565: PPUSH
63566: PPUSH
// uc_side = 0 ;
63567: LD_ADDR_OWVAR 20
63571: PUSH
63572: LD_INT 0
63574: ST_TO_ADDR
// uc_nation = 0 ;
63575: LD_ADDR_OWVAR 21
63579: PUSH
63580: LD_INT 0
63582: ST_TO_ADDR
// InitHc_All ( ) ;
63583: CALL_OW 584
// InitVc ;
63587: CALL_OW 20
// if mastodonts then
63591: LD_VAR 0 6
63595: IFFALSE 63662
// for i = 1 to mastodonts do
63597: LD_ADDR_VAR 0 11
63601: PUSH
63602: DOUBLE
63603: LD_INT 1
63605: DEC
63606: ST_TO_ADDR
63607: LD_VAR 0 6
63611: PUSH
63612: FOR_TO
63613: IFFALSE 63660
// begin vc_chassis := 31 ;
63615: LD_ADDR_OWVAR 37
63619: PUSH
63620: LD_INT 31
63622: ST_TO_ADDR
// vc_control := control_rider ;
63623: LD_ADDR_OWVAR 38
63627: PUSH
63628: LD_INT 4
63630: ST_TO_ADDR
// animal := CreateVehicle ;
63631: LD_ADDR_VAR 0 12
63635: PUSH
63636: CALL_OW 45
63640: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63641: LD_VAR 0 12
63645: PPUSH
63646: LD_VAR 0 8
63650: PPUSH
63651: LD_INT 0
63653: PPUSH
63654: CALL 65790 0 3
// end ;
63658: GO 63612
63660: POP
63661: POP
// if horses then
63662: LD_VAR 0 5
63666: IFFALSE 63733
// for i = 1 to horses do
63668: LD_ADDR_VAR 0 11
63672: PUSH
63673: DOUBLE
63674: LD_INT 1
63676: DEC
63677: ST_TO_ADDR
63678: LD_VAR 0 5
63682: PUSH
63683: FOR_TO
63684: IFFALSE 63731
// begin hc_class := 21 ;
63686: LD_ADDR_OWVAR 28
63690: PUSH
63691: LD_INT 21
63693: ST_TO_ADDR
// hc_gallery :=  ;
63694: LD_ADDR_OWVAR 33
63698: PUSH
63699: LD_STRING 
63701: ST_TO_ADDR
// animal := CreateHuman ;
63702: LD_ADDR_VAR 0 12
63706: PUSH
63707: CALL_OW 44
63711: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63712: LD_VAR 0 12
63716: PPUSH
63717: LD_VAR 0 8
63721: PPUSH
63722: LD_INT 0
63724: PPUSH
63725: CALL 65790 0 3
// end ;
63729: GO 63683
63731: POP
63732: POP
// if birds then
63733: LD_VAR 0 1
63737: IFFALSE 63804
// for i = 1 to birds do
63739: LD_ADDR_VAR 0 11
63743: PUSH
63744: DOUBLE
63745: LD_INT 1
63747: DEC
63748: ST_TO_ADDR
63749: LD_VAR 0 1
63753: PUSH
63754: FOR_TO
63755: IFFALSE 63802
// begin hc_class = 18 ;
63757: LD_ADDR_OWVAR 28
63761: PUSH
63762: LD_INT 18
63764: ST_TO_ADDR
// hc_gallery =  ;
63765: LD_ADDR_OWVAR 33
63769: PUSH
63770: LD_STRING 
63772: ST_TO_ADDR
// animal := CreateHuman ;
63773: LD_ADDR_VAR 0 12
63777: PUSH
63778: CALL_OW 44
63782: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63783: LD_VAR 0 12
63787: PPUSH
63788: LD_VAR 0 8
63792: PPUSH
63793: LD_INT 0
63795: PPUSH
63796: CALL 65790 0 3
// end ;
63800: GO 63754
63802: POP
63803: POP
// if tigers then
63804: LD_VAR 0 2
63808: IFFALSE 63892
// for i = 1 to tigers do
63810: LD_ADDR_VAR 0 11
63814: PUSH
63815: DOUBLE
63816: LD_INT 1
63818: DEC
63819: ST_TO_ADDR
63820: LD_VAR 0 2
63824: PUSH
63825: FOR_TO
63826: IFFALSE 63890
// begin hc_class = class_tiger ;
63828: LD_ADDR_OWVAR 28
63832: PUSH
63833: LD_INT 14
63835: ST_TO_ADDR
// hc_gallery =  ;
63836: LD_ADDR_OWVAR 33
63840: PUSH
63841: LD_STRING 
63843: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63844: LD_ADDR_OWVAR 35
63848: PUSH
63849: LD_INT 7
63851: NEG
63852: PPUSH
63853: LD_INT 7
63855: PPUSH
63856: CALL_OW 12
63860: ST_TO_ADDR
// animal := CreateHuman ;
63861: LD_ADDR_VAR 0 12
63865: PUSH
63866: CALL_OW 44
63870: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63871: LD_VAR 0 12
63875: PPUSH
63876: LD_VAR 0 8
63880: PPUSH
63881: LD_INT 0
63883: PPUSH
63884: CALL 65790 0 3
// end ;
63888: GO 63825
63890: POP
63891: POP
// if apemans then
63892: LD_VAR 0 3
63896: IFFALSE 64019
// for i = 1 to apemans do
63898: LD_ADDR_VAR 0 11
63902: PUSH
63903: DOUBLE
63904: LD_INT 1
63906: DEC
63907: ST_TO_ADDR
63908: LD_VAR 0 3
63912: PUSH
63913: FOR_TO
63914: IFFALSE 64017
// begin hc_class = class_apeman ;
63916: LD_ADDR_OWVAR 28
63920: PUSH
63921: LD_INT 12
63923: ST_TO_ADDR
// hc_gallery =  ;
63924: LD_ADDR_OWVAR 33
63928: PUSH
63929: LD_STRING 
63931: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63932: LD_ADDR_OWVAR 35
63936: PUSH
63937: LD_INT 2
63939: NEG
63940: PPUSH
63941: LD_INT 2
63943: PPUSH
63944: CALL_OW 12
63948: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63949: LD_ADDR_OWVAR 31
63953: PUSH
63954: LD_INT 1
63956: PPUSH
63957: LD_INT 3
63959: PPUSH
63960: CALL_OW 12
63964: PUSH
63965: LD_INT 1
63967: PPUSH
63968: LD_INT 3
63970: PPUSH
63971: CALL_OW 12
63975: PUSH
63976: LD_INT 0
63978: PUSH
63979: LD_INT 0
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: ST_TO_ADDR
// animal := CreateHuman ;
63988: LD_ADDR_VAR 0 12
63992: PUSH
63993: CALL_OW 44
63997: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63998: LD_VAR 0 12
64002: PPUSH
64003: LD_VAR 0 8
64007: PPUSH
64008: LD_INT 0
64010: PPUSH
64011: CALL 65790 0 3
// end ;
64015: GO 63913
64017: POP
64018: POP
// if enchidnas then
64019: LD_VAR 0 4
64023: IFFALSE 64090
// for i = 1 to enchidnas do
64025: LD_ADDR_VAR 0 11
64029: PUSH
64030: DOUBLE
64031: LD_INT 1
64033: DEC
64034: ST_TO_ADDR
64035: LD_VAR 0 4
64039: PUSH
64040: FOR_TO
64041: IFFALSE 64088
// begin hc_class = 13 ;
64043: LD_ADDR_OWVAR 28
64047: PUSH
64048: LD_INT 13
64050: ST_TO_ADDR
// hc_gallery =  ;
64051: LD_ADDR_OWVAR 33
64055: PUSH
64056: LD_STRING 
64058: ST_TO_ADDR
// animal := CreateHuman ;
64059: LD_ADDR_VAR 0 12
64063: PUSH
64064: CALL_OW 44
64068: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64069: LD_VAR 0 12
64073: PPUSH
64074: LD_VAR 0 8
64078: PPUSH
64079: LD_INT 0
64081: PPUSH
64082: CALL 65790 0 3
// end ;
64086: GO 64040
64088: POP
64089: POP
// if fishes then
64090: LD_VAR 0 7
64094: IFFALSE 64161
// for i = 1 to fishes do
64096: LD_ADDR_VAR 0 11
64100: PUSH
64101: DOUBLE
64102: LD_INT 1
64104: DEC
64105: ST_TO_ADDR
64106: LD_VAR 0 7
64110: PUSH
64111: FOR_TO
64112: IFFALSE 64159
// begin hc_class = 20 ;
64114: LD_ADDR_OWVAR 28
64118: PUSH
64119: LD_INT 20
64121: ST_TO_ADDR
// hc_gallery =  ;
64122: LD_ADDR_OWVAR 33
64126: PUSH
64127: LD_STRING 
64129: ST_TO_ADDR
// animal := CreateHuman ;
64130: LD_ADDR_VAR 0 12
64134: PUSH
64135: CALL_OW 44
64139: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64140: LD_VAR 0 12
64144: PPUSH
64145: LD_VAR 0 9
64149: PPUSH
64150: LD_INT 0
64152: PPUSH
64153: CALL 65790 0 3
// end ;
64157: GO 64111
64159: POP
64160: POP
// end ;
64161: LD_VAR 0 10
64165: RET
// export function WantHeal ( sci , unit ) ; begin
64166: LD_INT 0
64168: PPUSH
// if GetTaskList ( sci ) > 0 then
64169: LD_VAR 0 1
64173: PPUSH
64174: CALL_OW 437
64178: PUSH
64179: LD_INT 0
64181: GREATER
64182: IFFALSE 64252
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64184: LD_VAR 0 1
64188: PPUSH
64189: CALL_OW 437
64193: PUSH
64194: LD_INT 1
64196: ARRAY
64197: PUSH
64198: LD_INT 1
64200: ARRAY
64201: PUSH
64202: LD_STRING l
64204: EQUAL
64205: PUSH
64206: LD_VAR 0 1
64210: PPUSH
64211: CALL_OW 437
64215: PUSH
64216: LD_INT 1
64218: ARRAY
64219: PUSH
64220: LD_INT 4
64222: ARRAY
64223: PUSH
64224: LD_VAR 0 2
64228: EQUAL
64229: AND
64230: IFFALSE 64242
// result := true else
64232: LD_ADDR_VAR 0 3
64236: PUSH
64237: LD_INT 1
64239: ST_TO_ADDR
64240: GO 64250
// result := false ;
64242: LD_ADDR_VAR 0 3
64246: PUSH
64247: LD_INT 0
64249: ST_TO_ADDR
// end else
64250: GO 64260
// result := false ;
64252: LD_ADDR_VAR 0 3
64256: PUSH
64257: LD_INT 0
64259: ST_TO_ADDR
// end ;
64260: LD_VAR 0 3
64264: RET
// export function HealTarget ( sci ) ; begin
64265: LD_INT 0
64267: PPUSH
// if not sci then
64268: LD_VAR 0 1
64272: NOT
64273: IFFALSE 64277
// exit ;
64275: GO 64342
// result := 0 ;
64277: LD_ADDR_VAR 0 2
64281: PUSH
64282: LD_INT 0
64284: ST_TO_ADDR
// if GetTaskList ( sci ) then
64285: LD_VAR 0 1
64289: PPUSH
64290: CALL_OW 437
64294: IFFALSE 64342
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64296: LD_VAR 0 1
64300: PPUSH
64301: CALL_OW 437
64305: PUSH
64306: LD_INT 1
64308: ARRAY
64309: PUSH
64310: LD_INT 1
64312: ARRAY
64313: PUSH
64314: LD_STRING l
64316: EQUAL
64317: IFFALSE 64342
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64319: LD_ADDR_VAR 0 2
64323: PUSH
64324: LD_VAR 0 1
64328: PPUSH
64329: CALL_OW 437
64333: PUSH
64334: LD_INT 1
64336: ARRAY
64337: PUSH
64338: LD_INT 4
64340: ARRAY
64341: ST_TO_ADDR
// end ;
64342: LD_VAR 0 2
64346: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64347: LD_INT 0
64349: PPUSH
64350: PPUSH
64351: PPUSH
64352: PPUSH
// if not base_units then
64353: LD_VAR 0 1
64357: NOT
64358: IFFALSE 64362
// exit ;
64360: GO 64449
// result := false ;
64362: LD_ADDR_VAR 0 2
64366: PUSH
64367: LD_INT 0
64369: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64370: LD_ADDR_VAR 0 5
64374: PUSH
64375: LD_VAR 0 1
64379: PPUSH
64380: LD_INT 21
64382: PUSH
64383: LD_INT 3
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PPUSH
64390: CALL_OW 72
64394: ST_TO_ADDR
// if not tmp then
64395: LD_VAR 0 5
64399: NOT
64400: IFFALSE 64404
// exit ;
64402: GO 64449
// for i in tmp do
64404: LD_ADDR_VAR 0 3
64408: PUSH
64409: LD_VAR 0 5
64413: PUSH
64414: FOR_IN
64415: IFFALSE 64447
// begin result := EnemyInRange ( i , 22 ) ;
64417: LD_ADDR_VAR 0 2
64421: PUSH
64422: LD_VAR 0 3
64426: PPUSH
64427: LD_INT 22
64429: PPUSH
64430: CALL 62036 0 2
64434: ST_TO_ADDR
// if result then
64435: LD_VAR 0 2
64439: IFFALSE 64445
// exit ;
64441: POP
64442: POP
64443: GO 64449
// end ;
64445: GO 64414
64447: POP
64448: POP
// end ;
64449: LD_VAR 0 2
64453: RET
// export function FilterByTag ( units , tag ) ; begin
64454: LD_INT 0
64456: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64457: LD_ADDR_VAR 0 3
64461: PUSH
64462: LD_VAR 0 1
64466: PPUSH
64467: LD_INT 120
64469: PUSH
64470: LD_VAR 0 2
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PPUSH
64479: CALL_OW 72
64483: ST_TO_ADDR
// end ;
64484: LD_VAR 0 3
64488: RET
// export function IsDriver ( un ) ; begin
64489: LD_INT 0
64491: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64492: LD_ADDR_VAR 0 2
64496: PUSH
64497: LD_VAR 0 1
64501: PUSH
64502: LD_INT 55
64504: PUSH
64505: EMPTY
64506: LIST
64507: PPUSH
64508: CALL_OW 69
64512: IN
64513: ST_TO_ADDR
// end ;
64514: LD_VAR 0 2
64518: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64519: LD_INT 0
64521: PPUSH
64522: PPUSH
// list := [ ] ;
64523: LD_ADDR_VAR 0 5
64527: PUSH
64528: EMPTY
64529: ST_TO_ADDR
// case d of 0 :
64530: LD_VAR 0 3
64534: PUSH
64535: LD_INT 0
64537: DOUBLE
64538: EQUAL
64539: IFTRUE 64543
64541: GO 64676
64543: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64544: LD_ADDR_VAR 0 5
64548: PUSH
64549: LD_VAR 0 1
64553: PUSH
64554: LD_INT 4
64556: MINUS
64557: PUSH
64558: LD_VAR 0 2
64562: PUSH
64563: LD_INT 4
64565: MINUS
64566: PUSH
64567: LD_INT 2
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: LIST
64574: PUSH
64575: LD_VAR 0 1
64579: PUSH
64580: LD_INT 3
64582: MINUS
64583: PUSH
64584: LD_VAR 0 2
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: LIST
64596: PUSH
64597: LD_VAR 0 1
64601: PUSH
64602: LD_INT 4
64604: PLUS
64605: PUSH
64606: LD_VAR 0 2
64610: PUSH
64611: LD_INT 4
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: LIST
64618: PUSH
64619: LD_VAR 0 1
64623: PUSH
64624: LD_INT 3
64626: PLUS
64627: PUSH
64628: LD_VAR 0 2
64632: PUSH
64633: LD_INT 3
64635: PLUS
64636: PUSH
64637: LD_INT 5
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: LIST
64644: PUSH
64645: LD_VAR 0 1
64649: PUSH
64650: LD_VAR 0 2
64654: PUSH
64655: LD_INT 4
64657: PLUS
64658: PUSH
64659: LD_INT 0
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: LIST
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: ST_TO_ADDR
// end ; 1 :
64674: GO 65374
64676: LD_INT 1
64678: DOUBLE
64679: EQUAL
64680: IFTRUE 64684
64682: GO 64817
64684: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64685: LD_ADDR_VAR 0 5
64689: PUSH
64690: LD_VAR 0 1
64694: PUSH
64695: LD_VAR 0 2
64699: PUSH
64700: LD_INT 4
64702: MINUS
64703: PUSH
64704: LD_INT 3
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: LIST
64711: PUSH
64712: LD_VAR 0 1
64716: PUSH
64717: LD_INT 3
64719: MINUS
64720: PUSH
64721: LD_VAR 0 2
64725: PUSH
64726: LD_INT 3
64728: MINUS
64729: PUSH
64730: LD_INT 2
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: LIST
64737: PUSH
64738: LD_VAR 0 1
64742: PUSH
64743: LD_INT 4
64745: MINUS
64746: PUSH
64747: LD_VAR 0 2
64751: PUSH
64752: LD_INT 1
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: LIST
64759: PUSH
64760: LD_VAR 0 1
64764: PUSH
64765: LD_VAR 0 2
64769: PUSH
64770: LD_INT 3
64772: PLUS
64773: PUSH
64774: LD_INT 0
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: LIST
64781: PUSH
64782: LD_VAR 0 1
64786: PUSH
64787: LD_INT 4
64789: PLUS
64790: PUSH
64791: LD_VAR 0 2
64795: PUSH
64796: LD_INT 4
64798: PLUS
64799: PUSH
64800: LD_INT 5
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: LIST
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: ST_TO_ADDR
// end ; 2 :
64815: GO 65374
64817: LD_INT 2
64819: DOUBLE
64820: EQUAL
64821: IFTRUE 64825
64823: GO 64954
64825: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64826: LD_ADDR_VAR 0 5
64830: PUSH
64831: LD_VAR 0 1
64835: PUSH
64836: LD_VAR 0 2
64840: PUSH
64841: LD_INT 3
64843: MINUS
64844: PUSH
64845: LD_INT 3
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: LIST
64852: PUSH
64853: LD_VAR 0 1
64857: PUSH
64858: LD_INT 4
64860: PLUS
64861: PUSH
64862: LD_VAR 0 2
64866: PUSH
64867: LD_INT 4
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: LIST
64874: PUSH
64875: LD_VAR 0 1
64879: PUSH
64880: LD_VAR 0 2
64884: PUSH
64885: LD_INT 4
64887: PLUS
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: LIST
64896: PUSH
64897: LD_VAR 0 1
64901: PUSH
64902: LD_INT 3
64904: MINUS
64905: PUSH
64906: LD_VAR 0 2
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: LIST
64918: PUSH
64919: LD_VAR 0 1
64923: PUSH
64924: LD_INT 4
64926: MINUS
64927: PUSH
64928: LD_VAR 0 2
64932: PUSH
64933: LD_INT 4
64935: MINUS
64936: PUSH
64937: LD_INT 2
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: LIST
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: ST_TO_ADDR
// end ; 3 :
64952: GO 65374
64954: LD_INT 3
64956: DOUBLE
64957: EQUAL
64958: IFTRUE 64962
64960: GO 65095
64962: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64963: LD_ADDR_VAR 0 5
64967: PUSH
64968: LD_VAR 0 1
64972: PUSH
64973: LD_INT 3
64975: PLUS
64976: PUSH
64977: LD_VAR 0 2
64981: PUSH
64982: LD_INT 4
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: LIST
64989: PUSH
64990: LD_VAR 0 1
64994: PUSH
64995: LD_INT 4
64997: PLUS
64998: PUSH
64999: LD_VAR 0 2
65003: PUSH
65004: LD_INT 4
65006: PLUS
65007: PUSH
65008: LD_INT 5
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: LIST
65015: PUSH
65016: LD_VAR 0 1
65020: PUSH
65021: LD_INT 4
65023: MINUS
65024: PUSH
65025: LD_VAR 0 2
65029: PUSH
65030: LD_INT 1
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: LIST
65037: PUSH
65038: LD_VAR 0 1
65042: PUSH
65043: LD_VAR 0 2
65047: PUSH
65048: LD_INT 4
65050: MINUS
65051: PUSH
65052: LD_INT 3
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: LIST
65059: PUSH
65060: LD_VAR 0 1
65064: PUSH
65065: LD_INT 3
65067: MINUS
65068: PUSH
65069: LD_VAR 0 2
65073: PUSH
65074: LD_INT 3
65076: MINUS
65077: PUSH
65078: LD_INT 2
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: LIST
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: ST_TO_ADDR
// end ; 4 :
65093: GO 65374
65095: LD_INT 4
65097: DOUBLE
65098: EQUAL
65099: IFTRUE 65103
65101: GO 65236
65103: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65104: LD_ADDR_VAR 0 5
65108: PUSH
65109: LD_VAR 0 1
65113: PUSH
65114: LD_VAR 0 2
65118: PUSH
65119: LD_INT 4
65121: PLUS
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: LIST
65130: PUSH
65131: LD_VAR 0 1
65135: PUSH
65136: LD_INT 3
65138: PLUS
65139: PUSH
65140: LD_VAR 0 2
65144: PUSH
65145: LD_INT 3
65147: PLUS
65148: PUSH
65149: LD_INT 5
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: LIST
65156: PUSH
65157: LD_VAR 0 1
65161: PUSH
65162: LD_INT 4
65164: PLUS
65165: PUSH
65166: LD_VAR 0 2
65170: PUSH
65171: LD_INT 4
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: LIST
65178: PUSH
65179: LD_VAR 0 1
65183: PUSH
65184: LD_VAR 0 2
65188: PUSH
65189: LD_INT 3
65191: MINUS
65192: PUSH
65193: LD_INT 3
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: LIST
65200: PUSH
65201: LD_VAR 0 1
65205: PUSH
65206: LD_INT 4
65208: MINUS
65209: PUSH
65210: LD_VAR 0 2
65214: PUSH
65215: LD_INT 4
65217: MINUS
65218: PUSH
65219: LD_INT 2
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: LIST
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: ST_TO_ADDR
// end ; 5 :
65234: GO 65374
65236: LD_INT 5
65238: DOUBLE
65239: EQUAL
65240: IFTRUE 65244
65242: GO 65373
65244: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65245: LD_ADDR_VAR 0 5
65249: PUSH
65250: LD_VAR 0 1
65254: PUSH
65255: LD_INT 4
65257: MINUS
65258: PUSH
65259: LD_VAR 0 2
65263: PUSH
65264: LD_INT 1
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: LIST
65271: PUSH
65272: LD_VAR 0 1
65276: PUSH
65277: LD_VAR 0 2
65281: PUSH
65282: LD_INT 4
65284: MINUS
65285: PUSH
65286: LD_INT 3
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: LIST
65293: PUSH
65294: LD_VAR 0 1
65298: PUSH
65299: LD_INT 4
65301: PLUS
65302: PUSH
65303: LD_VAR 0 2
65307: PUSH
65308: LD_INT 4
65310: PLUS
65311: PUSH
65312: LD_INT 5
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: LIST
65319: PUSH
65320: LD_VAR 0 1
65324: PUSH
65325: LD_INT 3
65327: PLUS
65328: PUSH
65329: LD_VAR 0 2
65333: PUSH
65334: LD_INT 4
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: LIST
65341: PUSH
65342: LD_VAR 0 1
65346: PUSH
65347: LD_VAR 0 2
65351: PUSH
65352: LD_INT 3
65354: PLUS
65355: PUSH
65356: LD_INT 0
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: LIST
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: ST_TO_ADDR
// end ; end ;
65371: GO 65374
65373: POP
// result := list ;
65374: LD_ADDR_VAR 0 4
65378: PUSH
65379: LD_VAR 0 5
65383: ST_TO_ADDR
// end ;
65384: LD_VAR 0 4
65388: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65389: LD_INT 0
65391: PPUSH
65392: PPUSH
65393: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65394: LD_VAR 0 1
65398: NOT
65399: PUSH
65400: LD_VAR 0 2
65404: PUSH
65405: LD_INT 1
65407: PUSH
65408: LD_INT 2
65410: PUSH
65411: LD_INT 3
65413: PUSH
65414: LD_INT 4
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: IN
65423: NOT
65424: OR
65425: IFFALSE 65429
// exit ;
65427: GO 65512
// tmp := [ ] ;
65429: LD_ADDR_VAR 0 5
65433: PUSH
65434: EMPTY
65435: ST_TO_ADDR
// for i in units do
65436: LD_ADDR_VAR 0 4
65440: PUSH
65441: LD_VAR 0 1
65445: PUSH
65446: FOR_IN
65447: IFFALSE 65481
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65449: LD_ADDR_VAR 0 5
65453: PUSH
65454: LD_VAR 0 5
65458: PPUSH
65459: LD_VAR 0 4
65463: PPUSH
65464: LD_VAR 0 2
65468: PPUSH
65469: CALL_OW 259
65473: PPUSH
65474: CALL 66872 0 2
65478: ST_TO_ADDR
65479: GO 65446
65481: POP
65482: POP
// if not tmp then
65483: LD_VAR 0 5
65487: NOT
65488: IFFALSE 65492
// exit ;
65490: GO 65512
// result := SortListByListDesc ( units , tmp ) ;
65492: LD_ADDR_VAR 0 3
65496: PUSH
65497: LD_VAR 0 1
65501: PPUSH
65502: LD_VAR 0 5
65506: PPUSH
65507: CALL_OW 77
65511: ST_TO_ADDR
// end ;
65512: LD_VAR 0 3
65516: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65517: LD_INT 0
65519: PPUSH
65520: PPUSH
65521: PPUSH
// result := false ;
65522: LD_ADDR_VAR 0 3
65526: PUSH
65527: LD_INT 0
65529: ST_TO_ADDR
// if not building then
65530: LD_VAR 0 2
65534: NOT
65535: IFFALSE 65539
// exit ;
65537: GO 65677
// x := GetX ( building ) ;
65539: LD_ADDR_VAR 0 4
65543: PUSH
65544: LD_VAR 0 2
65548: PPUSH
65549: CALL_OW 250
65553: ST_TO_ADDR
// y := GetY ( building ) ;
65554: LD_ADDR_VAR 0 5
65558: PUSH
65559: LD_VAR 0 2
65563: PPUSH
65564: CALL_OW 251
65568: ST_TO_ADDR
// if not x or not y then
65569: LD_VAR 0 4
65573: NOT
65574: PUSH
65575: LD_VAR 0 5
65579: NOT
65580: OR
65581: IFFALSE 65585
// exit ;
65583: GO 65677
// if GetTaskList ( unit ) then
65585: LD_VAR 0 1
65589: PPUSH
65590: CALL_OW 437
65594: IFFALSE 65677
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65596: LD_STRING e
65598: PUSH
65599: LD_VAR 0 1
65603: PPUSH
65604: CALL_OW 437
65608: PUSH
65609: LD_INT 1
65611: ARRAY
65612: PUSH
65613: LD_INT 1
65615: ARRAY
65616: EQUAL
65617: PUSH
65618: LD_VAR 0 4
65622: PUSH
65623: LD_VAR 0 1
65627: PPUSH
65628: CALL_OW 437
65632: PUSH
65633: LD_INT 1
65635: ARRAY
65636: PUSH
65637: LD_INT 2
65639: ARRAY
65640: EQUAL
65641: AND
65642: PUSH
65643: LD_VAR 0 5
65647: PUSH
65648: LD_VAR 0 1
65652: PPUSH
65653: CALL_OW 437
65657: PUSH
65658: LD_INT 1
65660: ARRAY
65661: PUSH
65662: LD_INT 3
65664: ARRAY
65665: EQUAL
65666: AND
65667: IFFALSE 65677
// result := true end ;
65669: LD_ADDR_VAR 0 3
65673: PUSH
65674: LD_INT 1
65676: ST_TO_ADDR
// end ;
65677: LD_VAR 0 3
65681: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65682: LD_INT 0
65684: PPUSH
// result := false ;
65685: LD_ADDR_VAR 0 4
65689: PUSH
65690: LD_INT 0
65692: ST_TO_ADDR
// if GetTaskList ( unit ) then
65693: LD_VAR 0 1
65697: PPUSH
65698: CALL_OW 437
65702: IFFALSE 65785
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65704: LD_STRING M
65706: PUSH
65707: LD_VAR 0 1
65711: PPUSH
65712: CALL_OW 437
65716: PUSH
65717: LD_INT 1
65719: ARRAY
65720: PUSH
65721: LD_INT 1
65723: ARRAY
65724: EQUAL
65725: PUSH
65726: LD_VAR 0 2
65730: PUSH
65731: LD_VAR 0 1
65735: PPUSH
65736: CALL_OW 437
65740: PUSH
65741: LD_INT 1
65743: ARRAY
65744: PUSH
65745: LD_INT 2
65747: ARRAY
65748: EQUAL
65749: AND
65750: PUSH
65751: LD_VAR 0 3
65755: PUSH
65756: LD_VAR 0 1
65760: PPUSH
65761: CALL_OW 437
65765: PUSH
65766: LD_INT 1
65768: ARRAY
65769: PUSH
65770: LD_INT 3
65772: ARRAY
65773: EQUAL
65774: AND
65775: IFFALSE 65785
// result := true ;
65777: LD_ADDR_VAR 0 4
65781: PUSH
65782: LD_INT 1
65784: ST_TO_ADDR
// end ; end ;
65785: LD_VAR 0 4
65789: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65790: LD_INT 0
65792: PPUSH
65793: PPUSH
65794: PPUSH
65795: PPUSH
// if not unit or not area then
65796: LD_VAR 0 1
65800: NOT
65801: PUSH
65802: LD_VAR 0 2
65806: NOT
65807: OR
65808: IFFALSE 65812
// exit ;
65810: GO 65975
// tmp := AreaToList ( area , i ) ;
65812: LD_ADDR_VAR 0 6
65816: PUSH
65817: LD_VAR 0 2
65821: PPUSH
65822: LD_VAR 0 5
65826: PPUSH
65827: CALL_OW 517
65831: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65832: LD_ADDR_VAR 0 5
65836: PUSH
65837: DOUBLE
65838: LD_INT 1
65840: DEC
65841: ST_TO_ADDR
65842: LD_VAR 0 6
65846: PUSH
65847: LD_INT 1
65849: ARRAY
65850: PUSH
65851: FOR_TO
65852: IFFALSE 65973
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65854: LD_ADDR_VAR 0 7
65858: PUSH
65859: LD_VAR 0 6
65863: PUSH
65864: LD_INT 1
65866: ARRAY
65867: PUSH
65868: LD_VAR 0 5
65872: ARRAY
65873: PUSH
65874: LD_VAR 0 6
65878: PUSH
65879: LD_INT 2
65881: ARRAY
65882: PUSH
65883: LD_VAR 0 5
65887: ARRAY
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
65893: LD_INT 92
65895: PUSH
65896: LD_VAR 0 7
65900: PUSH
65901: LD_INT 1
65903: ARRAY
65904: PUSH
65905: LD_VAR 0 7
65909: PUSH
65910: LD_INT 2
65912: ARRAY
65913: PUSH
65914: LD_INT 3
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: PPUSH
65923: CALL_OW 69
65927: PUSH
65928: LD_INT 0
65930: EQUAL
65931: IFFALSE 65971
// begin PlaceUnitArea ( unit , area , mode ) ;
65933: LD_VAR 0 1
65937: PPUSH
65938: LD_VAR 0 2
65942: PPUSH
65943: LD_VAR 0 3
65947: PPUSH
65948: CALL_OW 49
// result := IsPlaced ( unit ) ;
65952: LD_ADDR_VAR 0 4
65956: PUSH
65957: LD_VAR 0 1
65961: PPUSH
65962: CALL_OW 305
65966: ST_TO_ADDR
// exit ;
65967: POP
65968: POP
65969: GO 65975
// end ; end ;
65971: GO 65851
65973: POP
65974: POP
// end ;
65975: LD_VAR 0 4
65979: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65980: LD_INT 0
65982: PPUSH
65983: PPUSH
65984: PPUSH
// if not side or side > 8 then
65985: LD_VAR 0 1
65989: NOT
65990: PUSH
65991: LD_VAR 0 1
65995: PUSH
65996: LD_INT 8
65998: GREATER
65999: OR
66000: IFFALSE 66004
// exit ;
66002: GO 66191
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66004: LD_ADDR_VAR 0 4
66008: PUSH
66009: LD_INT 22
66011: PUSH
66012: LD_VAR 0 1
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 21
66023: PUSH
66024: LD_INT 3
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PPUSH
66035: CALL_OW 69
66039: ST_TO_ADDR
// if not tmp then
66040: LD_VAR 0 4
66044: NOT
66045: IFFALSE 66049
// exit ;
66047: GO 66191
// enable_addtolog := true ;
66049: LD_ADDR_OWVAR 81
66053: PUSH
66054: LD_INT 1
66056: ST_TO_ADDR
// AddToLog ( [ ) ;
66057: LD_STRING [
66059: PPUSH
66060: CALL_OW 561
// for i in tmp do
66064: LD_ADDR_VAR 0 3
66068: PUSH
66069: LD_VAR 0 4
66073: PUSH
66074: FOR_IN
66075: IFFALSE 66182
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66077: LD_STRING [
66079: PUSH
66080: LD_VAR 0 3
66084: PPUSH
66085: CALL_OW 266
66089: STR
66090: PUSH
66091: LD_STRING , 
66093: STR
66094: PUSH
66095: LD_VAR 0 3
66099: PPUSH
66100: CALL_OW 250
66104: STR
66105: PUSH
66106: LD_STRING , 
66108: STR
66109: PUSH
66110: LD_VAR 0 3
66114: PPUSH
66115: CALL_OW 251
66119: STR
66120: PUSH
66121: LD_STRING , 
66123: STR
66124: PUSH
66125: LD_VAR 0 3
66129: PPUSH
66130: CALL_OW 254
66134: STR
66135: PUSH
66136: LD_STRING , 
66138: STR
66139: PUSH
66140: LD_VAR 0 3
66144: PPUSH
66145: LD_INT 1
66147: PPUSH
66148: CALL_OW 268
66152: STR
66153: PUSH
66154: LD_STRING , 
66156: STR
66157: PUSH
66158: LD_VAR 0 3
66162: PPUSH
66163: LD_INT 2
66165: PPUSH
66166: CALL_OW 268
66170: STR
66171: PUSH
66172: LD_STRING ],
66174: STR
66175: PPUSH
66176: CALL_OW 561
// end ;
66180: GO 66074
66182: POP
66183: POP
// AddToLog ( ]; ) ;
66184: LD_STRING ];
66186: PPUSH
66187: CALL_OW 561
// end ;
66191: LD_VAR 0 2
66195: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66196: LD_INT 0
66198: PPUSH
66199: PPUSH
66200: PPUSH
66201: PPUSH
66202: PPUSH
// if not area or not rate or not max then
66203: LD_VAR 0 1
66207: NOT
66208: PUSH
66209: LD_VAR 0 2
66213: NOT
66214: OR
66215: PUSH
66216: LD_VAR 0 4
66220: NOT
66221: OR
66222: IFFALSE 66226
// exit ;
66224: GO 66415
// while 1 do
66226: LD_INT 1
66228: IFFALSE 66415
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66230: LD_ADDR_VAR 0 9
66234: PUSH
66235: LD_VAR 0 1
66239: PPUSH
66240: LD_INT 1
66242: PPUSH
66243: CALL_OW 287
66247: PUSH
66248: LD_INT 10
66250: MUL
66251: ST_TO_ADDR
// r := rate / 10 ;
66252: LD_ADDR_VAR 0 7
66256: PUSH
66257: LD_VAR 0 2
66261: PUSH
66262: LD_INT 10
66264: DIVREAL
66265: ST_TO_ADDR
// time := 1 1$00 ;
66266: LD_ADDR_VAR 0 8
66270: PUSH
66271: LD_INT 2100
66273: ST_TO_ADDR
// if amount < min then
66274: LD_VAR 0 9
66278: PUSH
66279: LD_VAR 0 3
66283: LESS
66284: IFFALSE 66302
// r := r * 2 else
66286: LD_ADDR_VAR 0 7
66290: PUSH
66291: LD_VAR 0 7
66295: PUSH
66296: LD_INT 2
66298: MUL
66299: ST_TO_ADDR
66300: GO 66328
// if amount > max then
66302: LD_VAR 0 9
66306: PUSH
66307: LD_VAR 0 4
66311: GREATER
66312: IFFALSE 66328
// r := r / 2 ;
66314: LD_ADDR_VAR 0 7
66318: PUSH
66319: LD_VAR 0 7
66323: PUSH
66324: LD_INT 2
66326: DIVREAL
66327: ST_TO_ADDR
// time := time / r ;
66328: LD_ADDR_VAR 0 8
66332: PUSH
66333: LD_VAR 0 8
66337: PUSH
66338: LD_VAR 0 7
66342: DIVREAL
66343: ST_TO_ADDR
// if time < 0 then
66344: LD_VAR 0 8
66348: PUSH
66349: LD_INT 0
66351: LESS
66352: IFFALSE 66369
// time := time * - 1 ;
66354: LD_ADDR_VAR 0 8
66358: PUSH
66359: LD_VAR 0 8
66363: PUSH
66364: LD_INT 1
66366: NEG
66367: MUL
66368: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66369: LD_VAR 0 8
66373: PUSH
66374: LD_INT 35
66376: PPUSH
66377: LD_INT 875
66379: PPUSH
66380: CALL_OW 12
66384: PLUS
66385: PPUSH
66386: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66390: LD_INT 1
66392: PPUSH
66393: LD_INT 5
66395: PPUSH
66396: CALL_OW 12
66400: PPUSH
66401: LD_VAR 0 1
66405: PPUSH
66406: LD_INT 1
66408: PPUSH
66409: CALL_OW 55
// end ;
66413: GO 66226
// end ;
66415: LD_VAR 0 5
66419: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66420: LD_INT 0
66422: PPUSH
66423: PPUSH
66424: PPUSH
66425: PPUSH
66426: PPUSH
66427: PPUSH
66428: PPUSH
66429: PPUSH
// if not turrets or not factories then
66430: LD_VAR 0 1
66434: NOT
66435: PUSH
66436: LD_VAR 0 2
66440: NOT
66441: OR
66442: IFFALSE 66446
// exit ;
66444: GO 66753
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66446: LD_ADDR_VAR 0 10
66450: PUSH
66451: LD_INT 5
66453: PUSH
66454: LD_INT 6
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 2
66463: PUSH
66464: LD_INT 4
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 3
66473: PUSH
66474: LD_INT 5
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 24
66488: PUSH
66489: LD_INT 25
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 23
66498: PUSH
66499: LD_INT 27
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 42
66512: PUSH
66513: LD_INT 43
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 44
66522: PUSH
66523: LD_INT 46
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 45
66532: PUSH
66533: LD_INT 47
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: LIST
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: LIST
66549: ST_TO_ADDR
// result := [ ] ;
66550: LD_ADDR_VAR 0 3
66554: PUSH
66555: EMPTY
66556: ST_TO_ADDR
// for i in turrets do
66557: LD_ADDR_VAR 0 4
66561: PUSH
66562: LD_VAR 0 1
66566: PUSH
66567: FOR_IN
66568: IFFALSE 66751
// begin nat := GetNation ( i ) ;
66570: LD_ADDR_VAR 0 7
66574: PUSH
66575: LD_VAR 0 4
66579: PPUSH
66580: CALL_OW 248
66584: ST_TO_ADDR
// weapon := 0 ;
66585: LD_ADDR_VAR 0 8
66589: PUSH
66590: LD_INT 0
66592: ST_TO_ADDR
// if not nat then
66593: LD_VAR 0 7
66597: NOT
66598: IFFALSE 66602
// continue ;
66600: GO 66567
// for j in list [ nat ] do
66602: LD_ADDR_VAR 0 5
66606: PUSH
66607: LD_VAR 0 10
66611: PUSH
66612: LD_VAR 0 7
66616: ARRAY
66617: PUSH
66618: FOR_IN
66619: IFFALSE 66660
// if GetBWeapon ( i ) = j [ 1 ] then
66621: LD_VAR 0 4
66625: PPUSH
66626: CALL_OW 269
66630: PUSH
66631: LD_VAR 0 5
66635: PUSH
66636: LD_INT 1
66638: ARRAY
66639: EQUAL
66640: IFFALSE 66658
// begin weapon := j [ 2 ] ;
66642: LD_ADDR_VAR 0 8
66646: PUSH
66647: LD_VAR 0 5
66651: PUSH
66652: LD_INT 2
66654: ARRAY
66655: ST_TO_ADDR
// break ;
66656: GO 66660
// end ;
66658: GO 66618
66660: POP
66661: POP
// if not weapon then
66662: LD_VAR 0 8
66666: NOT
66667: IFFALSE 66671
// continue ;
66669: GO 66567
// for k in factories do
66671: LD_ADDR_VAR 0 6
66675: PUSH
66676: LD_VAR 0 2
66680: PUSH
66681: FOR_IN
66682: IFFALSE 66747
// begin weapons := AvailableWeaponList ( k ) ;
66684: LD_ADDR_VAR 0 9
66688: PUSH
66689: LD_VAR 0 6
66693: PPUSH
66694: CALL_OW 478
66698: ST_TO_ADDR
// if not weapons then
66699: LD_VAR 0 9
66703: NOT
66704: IFFALSE 66708
// continue ;
66706: GO 66681
// if weapon in weapons then
66708: LD_VAR 0 8
66712: PUSH
66713: LD_VAR 0 9
66717: IN
66718: IFFALSE 66745
// begin result := [ i , weapon ] ;
66720: LD_ADDR_VAR 0 3
66724: PUSH
66725: LD_VAR 0 4
66729: PUSH
66730: LD_VAR 0 8
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: ST_TO_ADDR
// exit ;
66739: POP
66740: POP
66741: POP
66742: POP
66743: GO 66753
// end ; end ;
66745: GO 66681
66747: POP
66748: POP
// end ;
66749: GO 66567
66751: POP
66752: POP
// end ;
66753: LD_VAR 0 3
66757: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66758: LD_INT 0
66760: PPUSH
// if not side or side > 8 then
66761: LD_VAR 0 3
66765: NOT
66766: PUSH
66767: LD_VAR 0 3
66771: PUSH
66772: LD_INT 8
66774: GREATER
66775: OR
66776: IFFALSE 66780
// exit ;
66778: GO 66839
// if not range then
66780: LD_VAR 0 4
66784: NOT
66785: IFFALSE 66796
// range := - 12 ;
66787: LD_ADDR_VAR 0 4
66791: PUSH
66792: LD_INT 12
66794: NEG
66795: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66796: LD_VAR 0 1
66800: PPUSH
66801: LD_VAR 0 2
66805: PPUSH
66806: LD_VAR 0 3
66810: PPUSH
66811: LD_VAR 0 4
66815: PPUSH
66816: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66820: LD_VAR 0 1
66824: PPUSH
66825: LD_VAR 0 2
66829: PPUSH
66830: LD_VAR 0 3
66834: PPUSH
66835: CALL_OW 331
// end ;
66839: LD_VAR 0 5
66843: RET
// export function Video ( mode ) ; begin
66844: LD_INT 0
66846: PPUSH
// ingame_video = mode ;
66847: LD_ADDR_OWVAR 52
66851: PUSH
66852: LD_VAR 0 1
66856: ST_TO_ADDR
// interface_hidden = mode ;
66857: LD_ADDR_OWVAR 54
66861: PUSH
66862: LD_VAR 0 1
66866: ST_TO_ADDR
// end ;
66867: LD_VAR 0 2
66871: RET
// export function Join ( array , element ) ; begin
66872: LD_INT 0
66874: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66875: LD_ADDR_VAR 0 3
66879: PUSH
66880: LD_VAR 0 1
66884: PPUSH
66885: LD_VAR 0 1
66889: PUSH
66890: LD_INT 1
66892: PLUS
66893: PPUSH
66894: LD_VAR 0 2
66898: PPUSH
66899: CALL_OW 1
66903: ST_TO_ADDR
// end ;
66904: LD_VAR 0 3
66908: RET
// export function JoinUnion ( array , element ) ; begin
66909: LD_INT 0
66911: PPUSH
// result := array union element ;
66912: LD_ADDR_VAR 0 3
66916: PUSH
66917: LD_VAR 0 1
66921: PUSH
66922: LD_VAR 0 2
66926: UNION
66927: ST_TO_ADDR
// end ;
66928: LD_VAR 0 3
66932: RET
// export function GetBehemoths ( side ) ; begin
66933: LD_INT 0
66935: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66936: LD_ADDR_VAR 0 2
66940: PUSH
66941: LD_INT 22
66943: PUSH
66944: LD_VAR 0 1
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 31
66955: PUSH
66956: LD_INT 25
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PPUSH
66967: CALL_OW 69
66971: ST_TO_ADDR
// end ;
66972: LD_VAR 0 2
66976: RET
// export function Shuffle ( array ) ; var i , index ; begin
66977: LD_INT 0
66979: PPUSH
66980: PPUSH
66981: PPUSH
// result := [ ] ;
66982: LD_ADDR_VAR 0 2
66986: PUSH
66987: EMPTY
66988: ST_TO_ADDR
// if not array then
66989: LD_VAR 0 1
66993: NOT
66994: IFFALSE 66998
// exit ;
66996: GO 67097
// Randomize ;
66998: CALL_OW 10
// for i = array downto 1 do
67002: LD_ADDR_VAR 0 3
67006: PUSH
67007: DOUBLE
67008: LD_VAR 0 1
67012: INC
67013: ST_TO_ADDR
67014: LD_INT 1
67016: PUSH
67017: FOR_DOWNTO
67018: IFFALSE 67095
// begin index := rand ( 1 , array ) ;
67020: LD_ADDR_VAR 0 4
67024: PUSH
67025: LD_INT 1
67027: PPUSH
67028: LD_VAR 0 1
67032: PPUSH
67033: CALL_OW 12
67037: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67038: LD_ADDR_VAR 0 2
67042: PUSH
67043: LD_VAR 0 2
67047: PPUSH
67048: LD_VAR 0 2
67052: PUSH
67053: LD_INT 1
67055: PLUS
67056: PPUSH
67057: LD_VAR 0 1
67061: PUSH
67062: LD_VAR 0 4
67066: ARRAY
67067: PPUSH
67068: CALL_OW 2
67072: ST_TO_ADDR
// array := Delete ( array , index ) ;
67073: LD_ADDR_VAR 0 1
67077: PUSH
67078: LD_VAR 0 1
67082: PPUSH
67083: LD_VAR 0 4
67087: PPUSH
67088: CALL_OW 3
67092: ST_TO_ADDR
// end ;
67093: GO 67017
67095: POP
67096: POP
// end ;
67097: LD_VAR 0 2
67101: RET
// export function GetBaseMaterials ( base ) ; begin
67102: LD_INT 0
67104: PPUSH
// result := [ 0 , 0 , 0 ] ;
67105: LD_ADDR_VAR 0 2
67109: PUSH
67110: LD_INT 0
67112: PUSH
67113: LD_INT 0
67115: PUSH
67116: LD_INT 0
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: LIST
67123: ST_TO_ADDR
// if not base then
67124: LD_VAR 0 1
67128: NOT
67129: IFFALSE 67133
// exit ;
67131: GO 67182
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67133: LD_ADDR_VAR 0 2
67137: PUSH
67138: LD_VAR 0 1
67142: PPUSH
67143: LD_INT 1
67145: PPUSH
67146: CALL_OW 275
67150: PUSH
67151: LD_VAR 0 1
67155: PPUSH
67156: LD_INT 2
67158: PPUSH
67159: CALL_OW 275
67163: PUSH
67164: LD_VAR 0 1
67168: PPUSH
67169: LD_INT 3
67171: PPUSH
67172: CALL_OW 275
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: LIST
67181: ST_TO_ADDR
// end ;
67182: LD_VAR 0 2
67186: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67187: LD_INT 0
67189: PPUSH
67190: PPUSH
// result := array ;
67191: LD_ADDR_VAR 0 3
67195: PUSH
67196: LD_VAR 0 1
67200: ST_TO_ADDR
// if size >= result then
67201: LD_VAR 0 2
67205: PUSH
67206: LD_VAR 0 3
67210: GREATEREQUAL
67211: IFFALSE 67215
// exit ;
67213: GO 67265
// if size then
67215: LD_VAR 0 2
67219: IFFALSE 67265
// for i := array downto size do
67221: LD_ADDR_VAR 0 4
67225: PUSH
67226: DOUBLE
67227: LD_VAR 0 1
67231: INC
67232: ST_TO_ADDR
67233: LD_VAR 0 2
67237: PUSH
67238: FOR_DOWNTO
67239: IFFALSE 67263
// result := Delete ( result , result ) ;
67241: LD_ADDR_VAR 0 3
67245: PUSH
67246: LD_VAR 0 3
67250: PPUSH
67251: LD_VAR 0 3
67255: PPUSH
67256: CALL_OW 3
67260: ST_TO_ADDR
67261: GO 67238
67263: POP
67264: POP
// end ;
67265: LD_VAR 0 3
67269: RET
// export function ComExit ( unit ) ; var tmp ; begin
67270: LD_INT 0
67272: PPUSH
67273: PPUSH
// if not IsInUnit ( unit ) then
67274: LD_VAR 0 1
67278: PPUSH
67279: CALL_OW 310
67283: NOT
67284: IFFALSE 67288
// exit ;
67286: GO 67348
// tmp := IsInUnit ( unit ) ;
67288: LD_ADDR_VAR 0 3
67292: PUSH
67293: LD_VAR 0 1
67297: PPUSH
67298: CALL_OW 310
67302: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67303: LD_VAR 0 3
67307: PPUSH
67308: CALL_OW 247
67312: PUSH
67313: LD_INT 2
67315: EQUAL
67316: IFFALSE 67329
// ComExitVehicle ( unit ) else
67318: LD_VAR 0 1
67322: PPUSH
67323: CALL_OW 121
67327: GO 67338
// ComExitBuilding ( unit ) ;
67329: LD_VAR 0 1
67333: PPUSH
67334: CALL_OW 122
// result := tmp ;
67338: LD_ADDR_VAR 0 2
67342: PUSH
67343: LD_VAR 0 3
67347: ST_TO_ADDR
// end ;
67348: LD_VAR 0 2
67352: RET
// export function ComExitAll ( units ) ; var i ; begin
67353: LD_INT 0
67355: PPUSH
67356: PPUSH
// if not units then
67357: LD_VAR 0 1
67361: NOT
67362: IFFALSE 67366
// exit ;
67364: GO 67392
// for i in units do
67366: LD_ADDR_VAR 0 3
67370: PUSH
67371: LD_VAR 0 1
67375: PUSH
67376: FOR_IN
67377: IFFALSE 67390
// ComExit ( i ) ;
67379: LD_VAR 0 3
67383: PPUSH
67384: CALL 67270 0 1
67388: GO 67376
67390: POP
67391: POP
// end ;
67392: LD_VAR 0 2
67396: RET
// export function ResetHc ; begin
67397: LD_INT 0
67399: PPUSH
// InitHc ;
67400: CALL_OW 19
// hc_importance := 0 ;
67404: LD_ADDR_OWVAR 32
67408: PUSH
67409: LD_INT 0
67411: ST_TO_ADDR
// end ;
67412: LD_VAR 0 1
67416: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67417: LD_INT 0
67419: PPUSH
67420: PPUSH
67421: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67422: LD_ADDR_VAR 0 6
67426: PUSH
67427: LD_VAR 0 1
67431: PUSH
67432: LD_VAR 0 3
67436: PLUS
67437: PUSH
67438: LD_INT 2
67440: DIV
67441: ST_TO_ADDR
// if _x < 0 then
67442: LD_VAR 0 6
67446: PUSH
67447: LD_INT 0
67449: LESS
67450: IFFALSE 67467
// _x := _x * - 1 ;
67452: LD_ADDR_VAR 0 6
67456: PUSH
67457: LD_VAR 0 6
67461: PUSH
67462: LD_INT 1
67464: NEG
67465: MUL
67466: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67467: LD_ADDR_VAR 0 7
67471: PUSH
67472: LD_VAR 0 2
67476: PUSH
67477: LD_VAR 0 4
67481: PLUS
67482: PUSH
67483: LD_INT 2
67485: DIV
67486: ST_TO_ADDR
// if _y < 0 then
67487: LD_VAR 0 7
67491: PUSH
67492: LD_INT 0
67494: LESS
67495: IFFALSE 67512
// _y := _y * - 1 ;
67497: LD_ADDR_VAR 0 7
67501: PUSH
67502: LD_VAR 0 7
67506: PUSH
67507: LD_INT 1
67509: NEG
67510: MUL
67511: ST_TO_ADDR
// result := [ _x , _y ] ;
67512: LD_ADDR_VAR 0 5
67516: PUSH
67517: LD_VAR 0 6
67521: PUSH
67522: LD_VAR 0 7
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: ST_TO_ADDR
// end ;
67531: LD_VAR 0 5
67535: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67536: LD_INT 0
67538: PPUSH
67539: PPUSH
67540: PPUSH
67541: PPUSH
// task := GetTaskList ( unit ) ;
67542: LD_ADDR_VAR 0 7
67546: PUSH
67547: LD_VAR 0 1
67551: PPUSH
67552: CALL_OW 437
67556: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67557: LD_VAR 0 7
67561: NOT
67562: PUSH
67563: LD_VAR 0 1
67567: PPUSH
67568: LD_VAR 0 2
67572: PPUSH
67573: CALL_OW 308
67577: NOT
67578: AND
67579: IFFALSE 67583
// exit ;
67581: GO 67701
// if IsInArea ( unit , area ) then
67583: LD_VAR 0 1
67587: PPUSH
67588: LD_VAR 0 2
67592: PPUSH
67593: CALL_OW 308
67597: IFFALSE 67615
// begin ComMoveToArea ( unit , goAway ) ;
67599: LD_VAR 0 1
67603: PPUSH
67604: LD_VAR 0 3
67608: PPUSH
67609: CALL_OW 113
// exit ;
67613: GO 67701
// end ; if task [ 1 ] [ 1 ] <> M then
67615: LD_VAR 0 7
67619: PUSH
67620: LD_INT 1
67622: ARRAY
67623: PUSH
67624: LD_INT 1
67626: ARRAY
67627: PUSH
67628: LD_STRING M
67630: NONEQUAL
67631: IFFALSE 67635
// exit ;
67633: GO 67701
// x := task [ 1 ] [ 2 ] ;
67635: LD_ADDR_VAR 0 5
67639: PUSH
67640: LD_VAR 0 7
67644: PUSH
67645: LD_INT 1
67647: ARRAY
67648: PUSH
67649: LD_INT 2
67651: ARRAY
67652: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67653: LD_ADDR_VAR 0 6
67657: PUSH
67658: LD_VAR 0 7
67662: PUSH
67663: LD_INT 1
67665: ARRAY
67666: PUSH
67667: LD_INT 3
67669: ARRAY
67670: ST_TO_ADDR
// if InArea ( x , y , area ) then
67671: LD_VAR 0 5
67675: PPUSH
67676: LD_VAR 0 6
67680: PPUSH
67681: LD_VAR 0 2
67685: PPUSH
67686: CALL_OW 309
67690: IFFALSE 67701
// ComStop ( unit ) ;
67692: LD_VAR 0 1
67696: PPUSH
67697: CALL_OW 141
// end ;
67701: LD_VAR 0 4
67705: RET
// export function Abs ( value ) ; begin
67706: LD_INT 0
67708: PPUSH
// result := value ;
67709: LD_ADDR_VAR 0 2
67713: PUSH
67714: LD_VAR 0 1
67718: ST_TO_ADDR
// if value < 0 then
67719: LD_VAR 0 1
67723: PUSH
67724: LD_INT 0
67726: LESS
67727: IFFALSE 67744
// result := value * - 1 ;
67729: LD_ADDR_VAR 0 2
67733: PUSH
67734: LD_VAR 0 1
67738: PUSH
67739: LD_INT 1
67741: NEG
67742: MUL
67743: ST_TO_ADDR
// end ;
67744: LD_VAR 0 2
67748: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67749: LD_INT 0
67751: PPUSH
67752: PPUSH
67753: PPUSH
67754: PPUSH
67755: PPUSH
67756: PPUSH
67757: PPUSH
67758: PPUSH
// if not unit or not building then
67759: LD_VAR 0 1
67763: NOT
67764: PUSH
67765: LD_VAR 0 2
67769: NOT
67770: OR
67771: IFFALSE 67775
// exit ;
67773: GO 68001
// x := GetX ( building ) ;
67775: LD_ADDR_VAR 0 4
67779: PUSH
67780: LD_VAR 0 2
67784: PPUSH
67785: CALL_OW 250
67789: ST_TO_ADDR
// y := GetY ( building ) ;
67790: LD_ADDR_VAR 0 6
67794: PUSH
67795: LD_VAR 0 2
67799: PPUSH
67800: CALL_OW 251
67804: ST_TO_ADDR
// d := GetDir ( building ) ;
67805: LD_ADDR_VAR 0 8
67809: PUSH
67810: LD_VAR 0 2
67814: PPUSH
67815: CALL_OW 254
67819: ST_TO_ADDR
// r := 4 ;
67820: LD_ADDR_VAR 0 9
67824: PUSH
67825: LD_INT 4
67827: ST_TO_ADDR
// for i := 1 to 5 do
67828: LD_ADDR_VAR 0 10
67832: PUSH
67833: DOUBLE
67834: LD_INT 1
67836: DEC
67837: ST_TO_ADDR
67838: LD_INT 5
67840: PUSH
67841: FOR_TO
67842: IFFALSE 67999
// begin _x := ShiftX ( x , d , r + i ) ;
67844: LD_ADDR_VAR 0 5
67848: PUSH
67849: LD_VAR 0 4
67853: PPUSH
67854: LD_VAR 0 8
67858: PPUSH
67859: LD_VAR 0 9
67863: PUSH
67864: LD_VAR 0 10
67868: PLUS
67869: PPUSH
67870: CALL_OW 272
67874: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67875: LD_ADDR_VAR 0 7
67879: PUSH
67880: LD_VAR 0 6
67884: PPUSH
67885: LD_VAR 0 8
67889: PPUSH
67890: LD_VAR 0 9
67894: PUSH
67895: LD_VAR 0 10
67899: PLUS
67900: PPUSH
67901: CALL_OW 273
67905: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67906: LD_VAR 0 5
67910: PPUSH
67911: LD_VAR 0 7
67915: PPUSH
67916: CALL_OW 488
67920: PUSH
67921: LD_VAR 0 5
67925: PPUSH
67926: LD_VAR 0 7
67930: PPUSH
67931: CALL_OW 428
67935: PPUSH
67936: CALL_OW 247
67940: PUSH
67941: LD_INT 3
67943: PUSH
67944: LD_INT 2
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: IN
67951: NOT
67952: AND
67953: IFFALSE 67997
// begin ComMoveXY ( unit , _x , _y ) ;
67955: LD_VAR 0 1
67959: PPUSH
67960: LD_VAR 0 5
67964: PPUSH
67965: LD_VAR 0 7
67969: PPUSH
67970: CALL_OW 111
// result := [ _x , _y ] ;
67974: LD_ADDR_VAR 0 3
67978: PUSH
67979: LD_VAR 0 5
67983: PUSH
67984: LD_VAR 0 7
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: ST_TO_ADDR
// exit ;
67993: POP
67994: POP
67995: GO 68001
// end ; end ;
67997: GO 67841
67999: POP
68000: POP
// end ;
68001: LD_VAR 0 3
68005: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68006: LD_INT 0
68008: PPUSH
68009: PPUSH
68010: PPUSH
// result := 0 ;
68011: LD_ADDR_VAR 0 3
68015: PUSH
68016: LD_INT 0
68018: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68019: LD_VAR 0 1
68023: PUSH
68024: LD_INT 0
68026: LESS
68027: PUSH
68028: LD_VAR 0 1
68032: PUSH
68033: LD_INT 8
68035: GREATER
68036: OR
68037: PUSH
68038: LD_VAR 0 2
68042: PUSH
68043: LD_INT 0
68045: LESS
68046: OR
68047: PUSH
68048: LD_VAR 0 2
68052: PUSH
68053: LD_INT 8
68055: GREATER
68056: OR
68057: IFFALSE 68061
// exit ;
68059: GO 68136
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68061: LD_ADDR_VAR 0 4
68065: PUSH
68066: LD_INT 22
68068: PUSH
68069: LD_VAR 0 2
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PPUSH
68078: CALL_OW 69
68082: PUSH
68083: FOR_IN
68084: IFFALSE 68134
// begin un := UnitShoot ( i ) ;
68086: LD_ADDR_VAR 0 5
68090: PUSH
68091: LD_VAR 0 4
68095: PPUSH
68096: CALL_OW 504
68100: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68101: LD_VAR 0 5
68105: PPUSH
68106: CALL_OW 255
68110: PUSH
68111: LD_VAR 0 1
68115: EQUAL
68116: IFFALSE 68132
// begin result := un ;
68118: LD_ADDR_VAR 0 3
68122: PUSH
68123: LD_VAR 0 5
68127: ST_TO_ADDR
// exit ;
68128: POP
68129: POP
68130: GO 68136
// end ; end ;
68132: GO 68083
68134: POP
68135: POP
// end ;
68136: LD_VAR 0 3
68140: RET
// export function GetCargoBay ( units ) ; begin
68141: LD_INT 0
68143: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68144: LD_ADDR_VAR 0 2
68148: PUSH
68149: LD_VAR 0 1
68153: PPUSH
68154: LD_INT 2
68156: PUSH
68157: LD_INT 34
68159: PUSH
68160: LD_INT 12
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 34
68169: PUSH
68170: LD_INT 51
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 34
68179: PUSH
68180: LD_INT 32
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 34
68189: PUSH
68190: LD_INT 89
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: PPUSH
68204: CALL_OW 72
68208: ST_TO_ADDR
// end ;
68209: LD_VAR 0 2
68213: RET
// export function Negate ( value ) ; begin
68214: LD_INT 0
68216: PPUSH
// result := not value ;
68217: LD_ADDR_VAR 0 2
68221: PUSH
68222: LD_VAR 0 1
68226: NOT
68227: ST_TO_ADDR
// end ;
68228: LD_VAR 0 2
68232: RET
// export function Inc ( value ) ; begin
68233: LD_INT 0
68235: PPUSH
// result := value + 1 ;
68236: LD_ADDR_VAR 0 2
68240: PUSH
68241: LD_VAR 0 1
68245: PUSH
68246: LD_INT 1
68248: PLUS
68249: ST_TO_ADDR
// end ;
68250: LD_VAR 0 2
68254: RET
// export function Dec ( value ) ; begin
68255: LD_INT 0
68257: PPUSH
// result := value - 1 ;
68258: LD_ADDR_VAR 0 2
68262: PUSH
68263: LD_VAR 0 1
68267: PUSH
68268: LD_INT 1
68270: MINUS
68271: ST_TO_ADDR
// end ;
68272: LD_VAR 0 2
68276: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68277: LD_INT 0
68279: PPUSH
68280: PPUSH
68281: PPUSH
68282: PPUSH
68283: PPUSH
68284: PPUSH
68285: PPUSH
68286: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68287: LD_VAR 0 1
68291: PPUSH
68292: LD_VAR 0 2
68296: PPUSH
68297: CALL_OW 488
68301: NOT
68302: PUSH
68303: LD_VAR 0 3
68307: PPUSH
68308: LD_VAR 0 4
68312: PPUSH
68313: CALL_OW 488
68317: NOT
68318: OR
68319: IFFALSE 68332
// begin result := - 1 ;
68321: LD_ADDR_VAR 0 5
68325: PUSH
68326: LD_INT 1
68328: NEG
68329: ST_TO_ADDR
// exit ;
68330: GO 68567
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68332: LD_ADDR_VAR 0 12
68336: PUSH
68337: LD_VAR 0 1
68341: PPUSH
68342: LD_VAR 0 2
68346: PPUSH
68347: LD_VAR 0 3
68351: PPUSH
68352: LD_VAR 0 4
68356: PPUSH
68357: CALL 67417 0 4
68361: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68362: LD_ADDR_VAR 0 11
68366: PUSH
68367: LD_VAR 0 1
68371: PPUSH
68372: LD_VAR 0 2
68376: PPUSH
68377: LD_VAR 0 12
68381: PUSH
68382: LD_INT 1
68384: ARRAY
68385: PPUSH
68386: LD_VAR 0 12
68390: PUSH
68391: LD_INT 2
68393: ARRAY
68394: PPUSH
68395: CALL_OW 298
68399: ST_TO_ADDR
// distance := 9999 ;
68400: LD_ADDR_VAR 0 10
68404: PUSH
68405: LD_INT 9999
68407: ST_TO_ADDR
// for i := 0 to 5 do
68408: LD_ADDR_VAR 0 6
68412: PUSH
68413: DOUBLE
68414: LD_INT 0
68416: DEC
68417: ST_TO_ADDR
68418: LD_INT 5
68420: PUSH
68421: FOR_TO
68422: IFFALSE 68565
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68424: LD_ADDR_VAR 0 7
68428: PUSH
68429: LD_VAR 0 1
68433: PPUSH
68434: LD_VAR 0 6
68438: PPUSH
68439: LD_VAR 0 11
68443: PPUSH
68444: CALL_OW 272
68448: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68449: LD_ADDR_VAR 0 8
68453: PUSH
68454: LD_VAR 0 2
68458: PPUSH
68459: LD_VAR 0 6
68463: PPUSH
68464: LD_VAR 0 11
68468: PPUSH
68469: CALL_OW 273
68473: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68474: LD_VAR 0 7
68478: PPUSH
68479: LD_VAR 0 8
68483: PPUSH
68484: CALL_OW 488
68488: NOT
68489: IFFALSE 68493
// continue ;
68491: GO 68421
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68493: LD_ADDR_VAR 0 9
68497: PUSH
68498: LD_VAR 0 12
68502: PUSH
68503: LD_INT 1
68505: ARRAY
68506: PPUSH
68507: LD_VAR 0 12
68511: PUSH
68512: LD_INT 2
68514: ARRAY
68515: PPUSH
68516: LD_VAR 0 7
68520: PPUSH
68521: LD_VAR 0 8
68525: PPUSH
68526: CALL_OW 298
68530: ST_TO_ADDR
// if tmp < distance then
68531: LD_VAR 0 9
68535: PUSH
68536: LD_VAR 0 10
68540: LESS
68541: IFFALSE 68563
// begin result := i ;
68543: LD_ADDR_VAR 0 5
68547: PUSH
68548: LD_VAR 0 6
68552: ST_TO_ADDR
// distance := tmp ;
68553: LD_ADDR_VAR 0 10
68557: PUSH
68558: LD_VAR 0 9
68562: ST_TO_ADDR
// end ; end ;
68563: GO 68421
68565: POP
68566: POP
// end ;
68567: LD_VAR 0 5
68571: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68572: LD_INT 0
68574: PPUSH
68575: PPUSH
// if not driver or not IsInUnit ( driver ) then
68576: LD_VAR 0 1
68580: NOT
68581: PUSH
68582: LD_VAR 0 1
68586: PPUSH
68587: CALL_OW 310
68591: NOT
68592: OR
68593: IFFALSE 68597
// exit ;
68595: GO 68687
// vehicle := IsInUnit ( driver ) ;
68597: LD_ADDR_VAR 0 3
68601: PUSH
68602: LD_VAR 0 1
68606: PPUSH
68607: CALL_OW 310
68611: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68612: LD_VAR 0 1
68616: PPUSH
68617: LD_STRING \
68619: PUSH
68620: LD_INT 0
68622: PUSH
68623: LD_INT 0
68625: PUSH
68626: LD_INT 0
68628: PUSH
68629: LD_INT 0
68631: PUSH
68632: LD_INT 0
68634: PUSH
68635: LD_INT 0
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: PUSH
68647: LD_STRING E
68649: PUSH
68650: LD_INT 0
68652: PUSH
68653: LD_INT 0
68655: PUSH
68656: LD_VAR 0 3
68660: PUSH
68661: LD_INT 0
68663: PUSH
68664: LD_INT 0
68666: PUSH
68667: LD_INT 0
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PPUSH
68683: CALL_OW 446
// end ;
68687: LD_VAR 0 2
68691: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68692: LD_INT 0
68694: PPUSH
68695: PPUSH
// if not driver or not IsInUnit ( driver ) then
68696: LD_VAR 0 1
68700: NOT
68701: PUSH
68702: LD_VAR 0 1
68706: PPUSH
68707: CALL_OW 310
68711: NOT
68712: OR
68713: IFFALSE 68717
// exit ;
68715: GO 68807
// vehicle := IsInUnit ( driver ) ;
68717: LD_ADDR_VAR 0 3
68721: PUSH
68722: LD_VAR 0 1
68726: PPUSH
68727: CALL_OW 310
68731: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68732: LD_VAR 0 1
68736: PPUSH
68737: LD_STRING \
68739: PUSH
68740: LD_INT 0
68742: PUSH
68743: LD_INT 0
68745: PUSH
68746: LD_INT 0
68748: PUSH
68749: LD_INT 0
68751: PUSH
68752: LD_INT 0
68754: PUSH
68755: LD_INT 0
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: PUSH
68767: LD_STRING E
68769: PUSH
68770: LD_INT 0
68772: PUSH
68773: LD_INT 0
68775: PUSH
68776: LD_VAR 0 3
68780: PUSH
68781: LD_INT 0
68783: PUSH
68784: LD_INT 0
68786: PUSH
68787: LD_INT 0
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PPUSH
68803: CALL_OW 447
// end ;
68807: LD_VAR 0 2
68811: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68812: LD_INT 0
68814: PPUSH
68815: PPUSH
68816: PPUSH
// tmp := [ ] ;
68817: LD_ADDR_VAR 0 5
68821: PUSH
68822: EMPTY
68823: ST_TO_ADDR
// for i in units do
68824: LD_ADDR_VAR 0 4
68828: PUSH
68829: LD_VAR 0 1
68833: PUSH
68834: FOR_IN
68835: IFFALSE 68873
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68837: LD_ADDR_VAR 0 5
68841: PUSH
68842: LD_VAR 0 5
68846: PPUSH
68847: LD_VAR 0 5
68851: PUSH
68852: LD_INT 1
68854: PLUS
68855: PPUSH
68856: LD_VAR 0 4
68860: PPUSH
68861: CALL_OW 256
68865: PPUSH
68866: CALL_OW 2
68870: ST_TO_ADDR
68871: GO 68834
68873: POP
68874: POP
// if not tmp then
68875: LD_VAR 0 5
68879: NOT
68880: IFFALSE 68884
// exit ;
68882: GO 68932
// if asc then
68884: LD_VAR 0 2
68888: IFFALSE 68912
// result := SortListByListAsc ( units , tmp ) else
68890: LD_ADDR_VAR 0 3
68894: PUSH
68895: LD_VAR 0 1
68899: PPUSH
68900: LD_VAR 0 5
68904: PPUSH
68905: CALL_OW 76
68909: ST_TO_ADDR
68910: GO 68932
// result := SortListByListDesc ( units , tmp ) ;
68912: LD_ADDR_VAR 0 3
68916: PUSH
68917: LD_VAR 0 1
68921: PPUSH
68922: LD_VAR 0 5
68926: PPUSH
68927: CALL_OW 77
68931: ST_TO_ADDR
// end ;
68932: LD_VAR 0 3
68936: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68937: LD_INT 0
68939: PPUSH
68940: PPUSH
// task := GetTaskList ( mech ) ;
68941: LD_ADDR_VAR 0 4
68945: PUSH
68946: LD_VAR 0 1
68950: PPUSH
68951: CALL_OW 437
68955: ST_TO_ADDR
// if not task then
68956: LD_VAR 0 4
68960: NOT
68961: IFFALSE 68965
// exit ;
68963: GO 69007
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68965: LD_ADDR_VAR 0 3
68969: PUSH
68970: LD_VAR 0 4
68974: PUSH
68975: LD_INT 1
68977: ARRAY
68978: PUSH
68979: LD_INT 1
68981: ARRAY
68982: PUSH
68983: LD_STRING r
68985: EQUAL
68986: PUSH
68987: LD_VAR 0 4
68991: PUSH
68992: LD_INT 1
68994: ARRAY
68995: PUSH
68996: LD_INT 4
68998: ARRAY
68999: PUSH
69000: LD_VAR 0 2
69004: EQUAL
69005: AND
69006: ST_TO_ADDR
// end ;
69007: LD_VAR 0 3
69011: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69012: LD_INT 0
69014: PPUSH
// SetDir ( unit , d ) ;
69015: LD_VAR 0 1
69019: PPUSH
69020: LD_VAR 0 4
69024: PPUSH
69025: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69029: LD_VAR 0 1
69033: PPUSH
69034: LD_VAR 0 2
69038: PPUSH
69039: LD_VAR 0 3
69043: PPUSH
69044: LD_VAR 0 5
69048: PPUSH
69049: CALL_OW 48
// end ;
69053: LD_VAR 0 6
69057: RET
// export function ToNaturalNumber ( number ) ; begin
69058: LD_INT 0
69060: PPUSH
// result := number div 1 ;
69061: LD_ADDR_VAR 0 2
69065: PUSH
69066: LD_VAR 0 1
69070: PUSH
69071: LD_INT 1
69073: DIV
69074: ST_TO_ADDR
// if number < 0 then
69075: LD_VAR 0 1
69079: PUSH
69080: LD_INT 0
69082: LESS
69083: IFFALSE 69093
// result := 0 ;
69085: LD_ADDR_VAR 0 2
69089: PUSH
69090: LD_INT 0
69092: ST_TO_ADDR
// end ;
69093: LD_VAR 0 2
69097: RET
// export function SortByClass ( units , class ) ; var un ; begin
69098: LD_INT 0
69100: PPUSH
69101: PPUSH
// if not units or not class then
69102: LD_VAR 0 1
69106: NOT
69107: PUSH
69108: LD_VAR 0 2
69112: NOT
69113: OR
69114: IFFALSE 69118
// exit ;
69116: GO 69213
// result := [ ] ;
69118: LD_ADDR_VAR 0 3
69122: PUSH
69123: EMPTY
69124: ST_TO_ADDR
// for un in units do
69125: LD_ADDR_VAR 0 4
69129: PUSH
69130: LD_VAR 0 1
69134: PUSH
69135: FOR_IN
69136: IFFALSE 69211
// if GetClass ( un ) = class then
69138: LD_VAR 0 4
69142: PPUSH
69143: CALL_OW 257
69147: PUSH
69148: LD_VAR 0 2
69152: EQUAL
69153: IFFALSE 69180
// result := Insert ( result , 1 , un ) else
69155: LD_ADDR_VAR 0 3
69159: PUSH
69160: LD_VAR 0 3
69164: PPUSH
69165: LD_INT 1
69167: PPUSH
69168: LD_VAR 0 4
69172: PPUSH
69173: CALL_OW 2
69177: ST_TO_ADDR
69178: GO 69209
// result := Replace ( result , result + 1 , un ) ;
69180: LD_ADDR_VAR 0 3
69184: PUSH
69185: LD_VAR 0 3
69189: PPUSH
69190: LD_VAR 0 3
69194: PUSH
69195: LD_INT 1
69197: PLUS
69198: PPUSH
69199: LD_VAR 0 4
69203: PPUSH
69204: CALL_OW 1
69208: ST_TO_ADDR
69209: GO 69135
69211: POP
69212: POP
// end ;
69213: LD_VAR 0 3
69217: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69218: LD_INT 0
69220: PPUSH
69221: PPUSH
69222: PPUSH
69223: PPUSH
69224: PPUSH
69225: PPUSH
69226: PPUSH
// result := [ ] ;
69227: LD_ADDR_VAR 0 4
69231: PUSH
69232: EMPTY
69233: ST_TO_ADDR
// if x - r < 0 then
69234: LD_VAR 0 1
69238: PUSH
69239: LD_VAR 0 3
69243: MINUS
69244: PUSH
69245: LD_INT 0
69247: LESS
69248: IFFALSE 69260
// min_x := 0 else
69250: LD_ADDR_VAR 0 8
69254: PUSH
69255: LD_INT 0
69257: ST_TO_ADDR
69258: GO 69276
// min_x := x - r ;
69260: LD_ADDR_VAR 0 8
69264: PUSH
69265: LD_VAR 0 1
69269: PUSH
69270: LD_VAR 0 3
69274: MINUS
69275: ST_TO_ADDR
// if y - r < 0 then
69276: LD_VAR 0 2
69280: PUSH
69281: LD_VAR 0 3
69285: MINUS
69286: PUSH
69287: LD_INT 0
69289: LESS
69290: IFFALSE 69302
// min_y := 0 else
69292: LD_ADDR_VAR 0 7
69296: PUSH
69297: LD_INT 0
69299: ST_TO_ADDR
69300: GO 69318
// min_y := y - r ;
69302: LD_ADDR_VAR 0 7
69306: PUSH
69307: LD_VAR 0 2
69311: PUSH
69312: LD_VAR 0 3
69316: MINUS
69317: ST_TO_ADDR
// max_x := x + r ;
69318: LD_ADDR_VAR 0 9
69322: PUSH
69323: LD_VAR 0 1
69327: PUSH
69328: LD_VAR 0 3
69332: PLUS
69333: ST_TO_ADDR
// max_y := y + r ;
69334: LD_ADDR_VAR 0 10
69338: PUSH
69339: LD_VAR 0 2
69343: PUSH
69344: LD_VAR 0 3
69348: PLUS
69349: ST_TO_ADDR
// for _x = min_x to max_x do
69350: LD_ADDR_VAR 0 5
69354: PUSH
69355: DOUBLE
69356: LD_VAR 0 8
69360: DEC
69361: ST_TO_ADDR
69362: LD_VAR 0 9
69366: PUSH
69367: FOR_TO
69368: IFFALSE 69469
// for _y = min_y to max_y do
69370: LD_ADDR_VAR 0 6
69374: PUSH
69375: DOUBLE
69376: LD_VAR 0 7
69380: DEC
69381: ST_TO_ADDR
69382: LD_VAR 0 10
69386: PUSH
69387: FOR_TO
69388: IFFALSE 69465
// begin if not ValidHex ( _x , _y ) then
69390: LD_VAR 0 5
69394: PPUSH
69395: LD_VAR 0 6
69399: PPUSH
69400: CALL_OW 488
69404: NOT
69405: IFFALSE 69409
// continue ;
69407: GO 69387
// if GetResourceTypeXY ( _x , _y ) then
69409: LD_VAR 0 5
69413: PPUSH
69414: LD_VAR 0 6
69418: PPUSH
69419: CALL_OW 283
69423: IFFALSE 69463
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69425: LD_ADDR_VAR 0 4
69429: PUSH
69430: LD_VAR 0 4
69434: PPUSH
69435: LD_VAR 0 4
69439: PUSH
69440: LD_INT 1
69442: PLUS
69443: PPUSH
69444: LD_VAR 0 5
69448: PUSH
69449: LD_VAR 0 6
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PPUSH
69458: CALL_OW 1
69462: ST_TO_ADDR
// end ;
69463: GO 69387
69465: POP
69466: POP
69467: GO 69367
69469: POP
69470: POP
// end ;
69471: LD_VAR 0 4
69475: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69476: LD_INT 0
69478: PPUSH
69479: PPUSH
69480: PPUSH
69481: PPUSH
69482: PPUSH
69483: PPUSH
69484: PPUSH
69485: PPUSH
// if not units then
69486: LD_VAR 0 1
69490: NOT
69491: IFFALSE 69495
// exit ;
69493: GO 70019
// result := UnitFilter ( units , [ f_ok ] ) ;
69495: LD_ADDR_VAR 0 3
69499: PUSH
69500: LD_VAR 0 1
69504: PPUSH
69505: LD_INT 50
69507: PUSH
69508: EMPTY
69509: LIST
69510: PPUSH
69511: CALL_OW 72
69515: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69516: LD_ADDR_VAR 0 8
69520: PUSH
69521: LD_VAR 0 1
69525: PUSH
69526: LD_INT 1
69528: ARRAY
69529: PPUSH
69530: CALL_OW 255
69534: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69535: LD_ADDR_VAR 0 10
69539: PUSH
69540: LD_INT 29
69542: PUSH
69543: LD_INT 91
69545: PUSH
69546: LD_INT 49
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: LIST
69553: ST_TO_ADDR
// if not result then
69554: LD_VAR 0 3
69558: NOT
69559: IFFALSE 69563
// exit ;
69561: GO 70019
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69563: LD_ADDR_VAR 0 5
69567: PUSH
69568: LD_INT 81
69570: PUSH
69571: LD_VAR 0 8
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PPUSH
69580: CALL_OW 69
69584: ST_TO_ADDR
// for i in result do
69585: LD_ADDR_VAR 0 4
69589: PUSH
69590: LD_VAR 0 3
69594: PUSH
69595: FOR_IN
69596: IFFALSE 70017
// begin tag := GetTag ( i ) + 1 ;
69598: LD_ADDR_VAR 0 9
69602: PUSH
69603: LD_VAR 0 4
69607: PPUSH
69608: CALL_OW 110
69612: PUSH
69613: LD_INT 1
69615: PLUS
69616: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69617: LD_ADDR_VAR 0 7
69621: PUSH
69622: LD_VAR 0 4
69626: PPUSH
69627: CALL_OW 250
69631: PPUSH
69632: LD_VAR 0 4
69636: PPUSH
69637: CALL_OW 251
69641: PPUSH
69642: LD_INT 6
69644: PPUSH
69645: CALL 69218 0 3
69649: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69650: LD_VAR 0 4
69654: PPUSH
69655: CALL_OW 247
69659: PUSH
69660: LD_INT 2
69662: EQUAL
69663: PUSH
69664: LD_VAR 0 7
69668: AND
69669: PUSH
69670: LD_VAR 0 4
69674: PPUSH
69675: CALL_OW 264
69679: PUSH
69680: LD_VAR 0 10
69684: IN
69685: NOT
69686: AND
69687: IFFALSE 69726
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69689: LD_VAR 0 4
69693: PPUSH
69694: LD_VAR 0 7
69698: PUSH
69699: LD_INT 1
69701: ARRAY
69702: PUSH
69703: LD_INT 1
69705: ARRAY
69706: PPUSH
69707: LD_VAR 0 7
69711: PUSH
69712: LD_INT 1
69714: ARRAY
69715: PUSH
69716: LD_INT 2
69718: ARRAY
69719: PPUSH
69720: CALL_OW 116
69724: GO 70015
// if path > tag then
69726: LD_VAR 0 2
69730: PUSH
69731: LD_VAR 0 9
69735: GREATER
69736: IFFALSE 69944
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69738: LD_ADDR_VAR 0 6
69742: PUSH
69743: LD_VAR 0 5
69747: PPUSH
69748: LD_INT 91
69750: PUSH
69751: LD_VAR 0 4
69755: PUSH
69756: LD_INT 8
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: LIST
69763: PPUSH
69764: CALL_OW 72
69768: ST_TO_ADDR
// if nearEnemy then
69769: LD_VAR 0 6
69773: IFFALSE 69842
// begin if GetWeapon ( i ) = ru_time_lapser then
69775: LD_VAR 0 4
69779: PPUSH
69780: CALL_OW 264
69784: PUSH
69785: LD_INT 49
69787: EQUAL
69788: IFFALSE 69816
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69790: LD_VAR 0 4
69794: PPUSH
69795: LD_VAR 0 6
69799: PPUSH
69800: LD_VAR 0 4
69804: PPUSH
69805: CALL_OW 74
69809: PPUSH
69810: CALL_OW 112
69814: GO 69840
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69816: LD_VAR 0 4
69820: PPUSH
69821: LD_VAR 0 6
69825: PPUSH
69826: LD_VAR 0 4
69830: PPUSH
69831: CALL_OW 74
69835: PPUSH
69836: CALL_OW 115
// end else
69840: GO 69942
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69842: LD_VAR 0 4
69846: PPUSH
69847: LD_VAR 0 2
69851: PUSH
69852: LD_VAR 0 9
69856: ARRAY
69857: PUSH
69858: LD_INT 1
69860: ARRAY
69861: PPUSH
69862: LD_VAR 0 2
69866: PUSH
69867: LD_VAR 0 9
69871: ARRAY
69872: PUSH
69873: LD_INT 2
69875: ARRAY
69876: PPUSH
69877: CALL_OW 297
69881: PUSH
69882: LD_INT 6
69884: GREATER
69885: IFFALSE 69928
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69887: LD_VAR 0 4
69891: PPUSH
69892: LD_VAR 0 2
69896: PUSH
69897: LD_VAR 0 9
69901: ARRAY
69902: PUSH
69903: LD_INT 1
69905: ARRAY
69906: PPUSH
69907: LD_VAR 0 2
69911: PUSH
69912: LD_VAR 0 9
69916: ARRAY
69917: PUSH
69918: LD_INT 2
69920: ARRAY
69921: PPUSH
69922: CALL_OW 114
69926: GO 69942
// SetTag ( i , tag ) ;
69928: LD_VAR 0 4
69932: PPUSH
69933: LD_VAR 0 9
69937: PPUSH
69938: CALL_OW 109
// end else
69942: GO 70015
// if enemy then
69944: LD_VAR 0 5
69948: IFFALSE 70015
// begin if GetWeapon ( i ) = ru_time_lapser then
69950: LD_VAR 0 4
69954: PPUSH
69955: CALL_OW 264
69959: PUSH
69960: LD_INT 49
69962: EQUAL
69963: IFFALSE 69991
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69965: LD_VAR 0 4
69969: PPUSH
69970: LD_VAR 0 5
69974: PPUSH
69975: LD_VAR 0 4
69979: PPUSH
69980: CALL_OW 74
69984: PPUSH
69985: CALL_OW 112
69989: GO 70015
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69991: LD_VAR 0 4
69995: PPUSH
69996: LD_VAR 0 5
70000: PPUSH
70001: LD_VAR 0 4
70005: PPUSH
70006: CALL_OW 74
70010: PPUSH
70011: CALL_OW 115
// end ; end ;
70015: GO 69595
70017: POP
70018: POP
// end ;
70019: LD_VAR 0 3
70023: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70024: LD_INT 0
70026: PPUSH
70027: PPUSH
70028: PPUSH
// if not unit or IsInUnit ( unit ) then
70029: LD_VAR 0 1
70033: NOT
70034: PUSH
70035: LD_VAR 0 1
70039: PPUSH
70040: CALL_OW 310
70044: OR
70045: IFFALSE 70049
// exit ;
70047: GO 70140
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70049: LD_ADDR_VAR 0 4
70053: PUSH
70054: LD_VAR 0 1
70058: PPUSH
70059: CALL_OW 250
70063: PPUSH
70064: LD_VAR 0 2
70068: PPUSH
70069: LD_INT 1
70071: PPUSH
70072: CALL_OW 272
70076: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70077: LD_ADDR_VAR 0 5
70081: PUSH
70082: LD_VAR 0 1
70086: PPUSH
70087: CALL_OW 251
70091: PPUSH
70092: LD_VAR 0 2
70096: PPUSH
70097: LD_INT 1
70099: PPUSH
70100: CALL_OW 273
70104: ST_TO_ADDR
// if ValidHex ( x , y ) then
70105: LD_VAR 0 4
70109: PPUSH
70110: LD_VAR 0 5
70114: PPUSH
70115: CALL_OW 488
70119: IFFALSE 70140
// ComTurnXY ( unit , x , y ) ;
70121: LD_VAR 0 1
70125: PPUSH
70126: LD_VAR 0 4
70130: PPUSH
70131: LD_VAR 0 5
70135: PPUSH
70136: CALL_OW 118
// end ;
70140: LD_VAR 0 3
70144: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70145: LD_INT 0
70147: PPUSH
70148: PPUSH
// result := false ;
70149: LD_ADDR_VAR 0 3
70153: PUSH
70154: LD_INT 0
70156: ST_TO_ADDR
// if not units then
70157: LD_VAR 0 2
70161: NOT
70162: IFFALSE 70166
// exit ;
70164: GO 70211
// for i in units do
70166: LD_ADDR_VAR 0 4
70170: PUSH
70171: LD_VAR 0 2
70175: PUSH
70176: FOR_IN
70177: IFFALSE 70209
// if See ( side , i ) then
70179: LD_VAR 0 1
70183: PPUSH
70184: LD_VAR 0 4
70188: PPUSH
70189: CALL_OW 292
70193: IFFALSE 70207
// begin result := true ;
70195: LD_ADDR_VAR 0 3
70199: PUSH
70200: LD_INT 1
70202: ST_TO_ADDR
// exit ;
70203: POP
70204: POP
70205: GO 70211
// end ;
70207: GO 70176
70209: POP
70210: POP
// end ;
70211: LD_VAR 0 3
70215: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70216: LD_INT 0
70218: PPUSH
70219: PPUSH
70220: PPUSH
70221: PPUSH
// if not unit or not points then
70222: LD_VAR 0 1
70226: NOT
70227: PUSH
70228: LD_VAR 0 2
70232: NOT
70233: OR
70234: IFFALSE 70238
// exit ;
70236: GO 70328
// dist := 99999 ;
70238: LD_ADDR_VAR 0 5
70242: PUSH
70243: LD_INT 99999
70245: ST_TO_ADDR
// for i in points do
70246: LD_ADDR_VAR 0 4
70250: PUSH
70251: LD_VAR 0 2
70255: PUSH
70256: FOR_IN
70257: IFFALSE 70326
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70259: LD_ADDR_VAR 0 6
70263: PUSH
70264: LD_VAR 0 1
70268: PPUSH
70269: LD_VAR 0 4
70273: PUSH
70274: LD_INT 1
70276: ARRAY
70277: PPUSH
70278: LD_VAR 0 4
70282: PUSH
70283: LD_INT 2
70285: ARRAY
70286: PPUSH
70287: CALL_OW 297
70291: ST_TO_ADDR
// if tmpDist < dist then
70292: LD_VAR 0 6
70296: PUSH
70297: LD_VAR 0 5
70301: LESS
70302: IFFALSE 70324
// begin result := i ;
70304: LD_ADDR_VAR 0 3
70308: PUSH
70309: LD_VAR 0 4
70313: ST_TO_ADDR
// dist := tmpDist ;
70314: LD_ADDR_VAR 0 5
70318: PUSH
70319: LD_VAR 0 6
70323: ST_TO_ADDR
// end ; end ;
70324: GO 70256
70326: POP
70327: POP
// end ;
70328: LD_VAR 0 3
70332: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70333: LD_INT 0
70335: PPUSH
// uc_side := side ;
70336: LD_ADDR_OWVAR 20
70340: PUSH
70341: LD_VAR 0 1
70345: ST_TO_ADDR
// uc_nation := 3 ;
70346: LD_ADDR_OWVAR 21
70350: PUSH
70351: LD_INT 3
70353: ST_TO_ADDR
// vc_chassis := 25 ;
70354: LD_ADDR_OWVAR 37
70358: PUSH
70359: LD_INT 25
70361: ST_TO_ADDR
// vc_engine := engine_siberite ;
70362: LD_ADDR_OWVAR 39
70366: PUSH
70367: LD_INT 3
70369: ST_TO_ADDR
// vc_control := control_computer ;
70370: LD_ADDR_OWVAR 38
70374: PUSH
70375: LD_INT 3
70377: ST_TO_ADDR
// vc_weapon := 59 ;
70378: LD_ADDR_OWVAR 40
70382: PUSH
70383: LD_INT 59
70385: ST_TO_ADDR
// result := CreateVehicle ;
70386: LD_ADDR_VAR 0 5
70390: PUSH
70391: CALL_OW 45
70395: ST_TO_ADDR
// SetDir ( result , d ) ;
70396: LD_VAR 0 5
70400: PPUSH
70401: LD_VAR 0 4
70405: PPUSH
70406: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70410: LD_VAR 0 5
70414: PPUSH
70415: LD_VAR 0 2
70419: PPUSH
70420: LD_VAR 0 3
70424: PPUSH
70425: LD_INT 0
70427: PPUSH
70428: CALL_OW 48
// end ;
70432: LD_VAR 0 5
70436: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70437: LD_INT 0
70439: PPUSH
70440: PPUSH
70441: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70442: LD_ADDR_VAR 0 2
70446: PUSH
70447: LD_INT 0
70449: PUSH
70450: LD_INT 0
70452: PUSH
70453: LD_INT 0
70455: PUSH
70456: LD_INT 0
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70465: LD_VAR 0 1
70469: NOT
70470: PUSH
70471: LD_VAR 0 1
70475: PPUSH
70476: CALL_OW 264
70480: PUSH
70481: LD_INT 12
70483: PUSH
70484: LD_INT 51
70486: PUSH
70487: LD_INT 32
70489: PUSH
70490: LD_INT 89
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: IN
70499: NOT
70500: OR
70501: IFFALSE 70505
// exit ;
70503: GO 70603
// for i := 1 to 3 do
70505: LD_ADDR_VAR 0 3
70509: PUSH
70510: DOUBLE
70511: LD_INT 1
70513: DEC
70514: ST_TO_ADDR
70515: LD_INT 3
70517: PUSH
70518: FOR_TO
70519: IFFALSE 70601
// begin tmp := GetCargo ( cargo , i ) ;
70521: LD_ADDR_VAR 0 4
70525: PUSH
70526: LD_VAR 0 1
70530: PPUSH
70531: LD_VAR 0 3
70535: PPUSH
70536: CALL_OW 289
70540: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70541: LD_ADDR_VAR 0 2
70545: PUSH
70546: LD_VAR 0 2
70550: PPUSH
70551: LD_VAR 0 3
70555: PPUSH
70556: LD_VAR 0 4
70560: PPUSH
70561: CALL_OW 1
70565: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70566: LD_ADDR_VAR 0 2
70570: PUSH
70571: LD_VAR 0 2
70575: PPUSH
70576: LD_INT 4
70578: PPUSH
70579: LD_VAR 0 2
70583: PUSH
70584: LD_INT 4
70586: ARRAY
70587: PUSH
70588: LD_VAR 0 4
70592: PLUS
70593: PPUSH
70594: CALL_OW 1
70598: ST_TO_ADDR
// end ;
70599: GO 70518
70601: POP
70602: POP
// end ;
70603: LD_VAR 0 2
70607: RET
// export function Length ( array ) ; begin
70608: LD_INT 0
70610: PPUSH
// result := array + 0 ;
70611: LD_ADDR_VAR 0 2
70615: PUSH
70616: LD_VAR 0 1
70620: PUSH
70621: LD_INT 0
70623: PLUS
70624: ST_TO_ADDR
// end ;
70625: LD_VAR 0 2
70629: RET
// export function PrepareArray ( array ) ; begin
70630: LD_INT 0
70632: PPUSH
// result := array diff 0 ;
70633: LD_ADDR_VAR 0 2
70637: PUSH
70638: LD_VAR 0 1
70642: PUSH
70643: LD_INT 0
70645: DIFF
70646: ST_TO_ADDR
// if not result [ 1 ] then
70647: LD_VAR 0 2
70651: PUSH
70652: LD_INT 1
70654: ARRAY
70655: NOT
70656: IFFALSE 70676
// result := Delete ( result , 1 ) ;
70658: LD_ADDR_VAR 0 2
70662: PUSH
70663: LD_VAR 0 2
70667: PPUSH
70668: LD_INT 1
70670: PPUSH
70671: CALL_OW 3
70675: ST_TO_ADDR
// end ;
70676: LD_VAR 0 2
70680: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70681: LD_INT 0
70683: PPUSH
70684: PPUSH
70685: PPUSH
70686: PPUSH
// sibRocketRange := 25 ;
70687: LD_ADDR_VAR 0 6
70691: PUSH
70692: LD_INT 25
70694: ST_TO_ADDR
// result := false ;
70695: LD_ADDR_VAR 0 4
70699: PUSH
70700: LD_INT 0
70702: ST_TO_ADDR
// for i := 0 to 5 do
70703: LD_ADDR_VAR 0 5
70707: PUSH
70708: DOUBLE
70709: LD_INT 0
70711: DEC
70712: ST_TO_ADDR
70713: LD_INT 5
70715: PUSH
70716: FOR_TO
70717: IFFALSE 70784
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70719: LD_VAR 0 1
70723: PPUSH
70724: LD_VAR 0 5
70728: PPUSH
70729: LD_VAR 0 6
70733: PPUSH
70734: CALL_OW 272
70738: PPUSH
70739: LD_VAR 0 2
70743: PPUSH
70744: LD_VAR 0 5
70748: PPUSH
70749: LD_VAR 0 6
70753: PPUSH
70754: CALL_OW 273
70758: PPUSH
70759: LD_VAR 0 3
70763: PPUSH
70764: CALL_OW 309
70768: IFFALSE 70782
// begin result := true ;
70770: LD_ADDR_VAR 0 4
70774: PUSH
70775: LD_INT 1
70777: ST_TO_ADDR
// exit ;
70778: POP
70779: POP
70780: GO 70786
// end ;
70782: GO 70716
70784: POP
70785: POP
// end ;
70786: LD_VAR 0 4
70790: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70791: LD_INT 0
70793: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70794: LD_VAR 0 1
70798: PPUSH
70799: LD_VAR 0 2
70803: PPUSH
70804: LD_INT 0
70806: PPUSH
70807: LD_INT 0
70809: PPUSH
70810: LD_INT 1
70812: PPUSH
70813: LD_INT 0
70815: PPUSH
70816: CALL_OW 587
// end ;
70820: LD_VAR 0 3
70824: RET
// export function CenterOnNow ( unit ) ; begin
70825: LD_INT 0
70827: PPUSH
// result := IsInUnit ( unit ) ;
70828: LD_ADDR_VAR 0 2
70832: PUSH
70833: LD_VAR 0 1
70837: PPUSH
70838: CALL_OW 310
70842: ST_TO_ADDR
// if not result then
70843: LD_VAR 0 2
70847: NOT
70848: IFFALSE 70860
// result := unit ;
70850: LD_ADDR_VAR 0 2
70854: PUSH
70855: LD_VAR 0 1
70859: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70860: LD_VAR 0 1
70864: PPUSH
70865: CALL_OW 87
// end ; end_of_file end_of_file
70869: LD_VAR 0 2
70873: RET
// export globalGameSaveCounter ; every 0 0$1 do
70874: GO 70876
70876: DISABLE
// begin enable ;
70877: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
70878: LD_STRING updateTimer(
70880: PUSH
70881: LD_OWVAR 1
70885: STR
70886: PUSH
70887: LD_STRING );
70889: STR
70890: PPUSH
70891: CALL_OW 559
// end ;
70895: END
// every 0 0$1 do
70896: GO 70898
70898: DISABLE
// begin globalGameSaveCounter := 0 ;
70899: LD_ADDR_EXP 63
70903: PUSH
70904: LD_INT 0
70906: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
70907: LD_STRING setGameSaveCounter(0)
70909: PPUSH
70910: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
70914: LD_STRING initStreamRollete();
70916: PPUSH
70917: CALL_OW 559
// InitStreamMode ;
70921: CALL 72247 0 0
// DefineStreamItems ( false ) ;
70925: LD_INT 0
70927: PPUSH
70928: CALL 72711 0 1
// end ;
70932: END
// export function SOS_MapStart ( ) ; begin
70933: LD_INT 0
70935: PPUSH
// if streamModeActive then
70936: LD_EXP 64
70940: IFFALSE 70949
// DefineStreamItems ( true ) ;
70942: LD_INT 1
70944: PPUSH
70945: CALL 72711 0 1
// UpdateLuaVariables ( ) ;
70949: CALL 70966 0 0
// UpdateFactoryWaypoints ( ) ;
70953: CALL 85572 0 0
// UpdateWarehouseGatheringPoints ( ) ;
70957: CALL 85829 0 0
// end ;
70961: LD_VAR 0 1
70965: RET
// function UpdateLuaVariables ( ) ; begin
70966: LD_INT 0
70968: PPUSH
// if globalGameSaveCounter then
70969: LD_EXP 63
70973: IFFALSE 71007
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
70975: LD_ADDR_EXP 63
70979: PUSH
70980: LD_EXP 63
70984: PPUSH
70985: CALL 68233 0 1
70989: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
70990: LD_STRING setGameSaveCounter(
70992: PUSH
70993: LD_EXP 63
70997: STR
70998: PUSH
70999: LD_STRING )
71001: STR
71002: PPUSH
71003: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
71007: LD_STRING setGameDifficulty(
71009: PUSH
71010: LD_OWVAR 67
71014: STR
71015: PUSH
71016: LD_STRING )
71018: STR
71019: PPUSH
71020: CALL_OW 559
// end ;
71024: LD_VAR 0 1
71028: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
71029: LD_INT 0
71031: PPUSH
// if p2 = stream_mode then
71032: LD_VAR 0 2
71036: PUSH
71037: LD_INT 100
71039: EQUAL
71040: IFFALSE 72043
// begin if not StreamModeActive then
71042: LD_EXP 64
71046: NOT
71047: IFFALSE 71057
// StreamModeActive := true ;
71049: LD_ADDR_EXP 64
71053: PUSH
71054: LD_INT 1
71056: ST_TO_ADDR
// if p3 = 0 then
71057: LD_VAR 0 3
71061: PUSH
71062: LD_INT 0
71064: EQUAL
71065: IFFALSE 71071
// InitStreamMode ;
71067: CALL 72247 0 0
// if p3 = 1 then
71071: LD_VAR 0 3
71075: PUSH
71076: LD_INT 1
71078: EQUAL
71079: IFFALSE 71089
// sRocket := true ;
71081: LD_ADDR_EXP 69
71085: PUSH
71086: LD_INT 1
71088: ST_TO_ADDR
// if p3 = 2 then
71089: LD_VAR 0 3
71093: PUSH
71094: LD_INT 2
71096: EQUAL
71097: IFFALSE 71107
// sSpeed := true ;
71099: LD_ADDR_EXP 68
71103: PUSH
71104: LD_INT 1
71106: ST_TO_ADDR
// if p3 = 3 then
71107: LD_VAR 0 3
71111: PUSH
71112: LD_INT 3
71114: EQUAL
71115: IFFALSE 71125
// sEngine := true ;
71117: LD_ADDR_EXP 70
71121: PUSH
71122: LD_INT 1
71124: ST_TO_ADDR
// if p3 = 4 then
71125: LD_VAR 0 3
71129: PUSH
71130: LD_INT 4
71132: EQUAL
71133: IFFALSE 71143
// sSpec := true ;
71135: LD_ADDR_EXP 67
71139: PUSH
71140: LD_INT 1
71142: ST_TO_ADDR
// if p3 = 5 then
71143: LD_VAR 0 3
71147: PUSH
71148: LD_INT 5
71150: EQUAL
71151: IFFALSE 71161
// sLevel := true ;
71153: LD_ADDR_EXP 71
71157: PUSH
71158: LD_INT 1
71160: ST_TO_ADDR
// if p3 = 6 then
71161: LD_VAR 0 3
71165: PUSH
71166: LD_INT 6
71168: EQUAL
71169: IFFALSE 71179
// sArmoury := true ;
71171: LD_ADDR_EXP 72
71175: PUSH
71176: LD_INT 1
71178: ST_TO_ADDR
// if p3 = 7 then
71179: LD_VAR 0 3
71183: PUSH
71184: LD_INT 7
71186: EQUAL
71187: IFFALSE 71197
// sRadar := true ;
71189: LD_ADDR_EXP 73
71193: PUSH
71194: LD_INT 1
71196: ST_TO_ADDR
// if p3 = 8 then
71197: LD_VAR 0 3
71201: PUSH
71202: LD_INT 8
71204: EQUAL
71205: IFFALSE 71215
// sBunker := true ;
71207: LD_ADDR_EXP 74
71211: PUSH
71212: LD_INT 1
71214: ST_TO_ADDR
// if p3 = 9 then
71215: LD_VAR 0 3
71219: PUSH
71220: LD_INT 9
71222: EQUAL
71223: IFFALSE 71233
// sHack := true ;
71225: LD_ADDR_EXP 75
71229: PUSH
71230: LD_INT 1
71232: ST_TO_ADDR
// if p3 = 10 then
71233: LD_VAR 0 3
71237: PUSH
71238: LD_INT 10
71240: EQUAL
71241: IFFALSE 71251
// sFire := true ;
71243: LD_ADDR_EXP 76
71247: PUSH
71248: LD_INT 1
71250: ST_TO_ADDR
// if p3 = 11 then
71251: LD_VAR 0 3
71255: PUSH
71256: LD_INT 11
71258: EQUAL
71259: IFFALSE 71269
// sRefresh := true ;
71261: LD_ADDR_EXP 77
71265: PUSH
71266: LD_INT 1
71268: ST_TO_ADDR
// if p3 = 12 then
71269: LD_VAR 0 3
71273: PUSH
71274: LD_INT 12
71276: EQUAL
71277: IFFALSE 71287
// sExp := true ;
71279: LD_ADDR_EXP 78
71283: PUSH
71284: LD_INT 1
71286: ST_TO_ADDR
// if p3 = 13 then
71287: LD_VAR 0 3
71291: PUSH
71292: LD_INT 13
71294: EQUAL
71295: IFFALSE 71305
// sDepot := true ;
71297: LD_ADDR_EXP 79
71301: PUSH
71302: LD_INT 1
71304: ST_TO_ADDR
// if p3 = 14 then
71305: LD_VAR 0 3
71309: PUSH
71310: LD_INT 14
71312: EQUAL
71313: IFFALSE 71323
// sFlag := true ;
71315: LD_ADDR_EXP 80
71319: PUSH
71320: LD_INT 1
71322: ST_TO_ADDR
// if p3 = 15 then
71323: LD_VAR 0 3
71327: PUSH
71328: LD_INT 15
71330: EQUAL
71331: IFFALSE 71341
// sKamikadze := true ;
71333: LD_ADDR_EXP 88
71337: PUSH
71338: LD_INT 1
71340: ST_TO_ADDR
// if p3 = 16 then
71341: LD_VAR 0 3
71345: PUSH
71346: LD_INT 16
71348: EQUAL
71349: IFFALSE 71359
// sTroll := true ;
71351: LD_ADDR_EXP 89
71355: PUSH
71356: LD_INT 1
71358: ST_TO_ADDR
// if p3 = 17 then
71359: LD_VAR 0 3
71363: PUSH
71364: LD_INT 17
71366: EQUAL
71367: IFFALSE 71377
// sSlow := true ;
71369: LD_ADDR_EXP 90
71373: PUSH
71374: LD_INT 1
71376: ST_TO_ADDR
// if p3 = 18 then
71377: LD_VAR 0 3
71381: PUSH
71382: LD_INT 18
71384: EQUAL
71385: IFFALSE 71395
// sLack := true ;
71387: LD_ADDR_EXP 91
71391: PUSH
71392: LD_INT 1
71394: ST_TO_ADDR
// if p3 = 19 then
71395: LD_VAR 0 3
71399: PUSH
71400: LD_INT 19
71402: EQUAL
71403: IFFALSE 71413
// sTank := true ;
71405: LD_ADDR_EXP 93
71409: PUSH
71410: LD_INT 1
71412: ST_TO_ADDR
// if p3 = 20 then
71413: LD_VAR 0 3
71417: PUSH
71418: LD_INT 20
71420: EQUAL
71421: IFFALSE 71431
// sRemote := true ;
71423: LD_ADDR_EXP 94
71427: PUSH
71428: LD_INT 1
71430: ST_TO_ADDR
// if p3 = 21 then
71431: LD_VAR 0 3
71435: PUSH
71436: LD_INT 21
71438: EQUAL
71439: IFFALSE 71449
// sPowell := true ;
71441: LD_ADDR_EXP 95
71445: PUSH
71446: LD_INT 1
71448: ST_TO_ADDR
// if p3 = 22 then
71449: LD_VAR 0 3
71453: PUSH
71454: LD_INT 22
71456: EQUAL
71457: IFFALSE 71467
// sTeleport := true ;
71459: LD_ADDR_EXP 98
71463: PUSH
71464: LD_INT 1
71466: ST_TO_ADDR
// if p3 = 23 then
71467: LD_VAR 0 3
71471: PUSH
71472: LD_INT 23
71474: EQUAL
71475: IFFALSE 71485
// sOilTower := true ;
71477: LD_ADDR_EXP 100
71481: PUSH
71482: LD_INT 1
71484: ST_TO_ADDR
// if p3 = 24 then
71485: LD_VAR 0 3
71489: PUSH
71490: LD_INT 24
71492: EQUAL
71493: IFFALSE 71503
// sShovel := true ;
71495: LD_ADDR_EXP 101
71499: PUSH
71500: LD_INT 1
71502: ST_TO_ADDR
// if p3 = 25 then
71503: LD_VAR 0 3
71507: PUSH
71508: LD_INT 25
71510: EQUAL
71511: IFFALSE 71521
// sSheik := true ;
71513: LD_ADDR_EXP 102
71517: PUSH
71518: LD_INT 1
71520: ST_TO_ADDR
// if p3 = 26 then
71521: LD_VAR 0 3
71525: PUSH
71526: LD_INT 26
71528: EQUAL
71529: IFFALSE 71539
// sEarthquake := true ;
71531: LD_ADDR_EXP 104
71535: PUSH
71536: LD_INT 1
71538: ST_TO_ADDR
// if p3 = 27 then
71539: LD_VAR 0 3
71543: PUSH
71544: LD_INT 27
71546: EQUAL
71547: IFFALSE 71557
// sAI := true ;
71549: LD_ADDR_EXP 105
71553: PUSH
71554: LD_INT 1
71556: ST_TO_ADDR
// if p3 = 28 then
71557: LD_VAR 0 3
71561: PUSH
71562: LD_INT 28
71564: EQUAL
71565: IFFALSE 71575
// sCargo := true ;
71567: LD_ADDR_EXP 108
71571: PUSH
71572: LD_INT 1
71574: ST_TO_ADDR
// if p3 = 29 then
71575: LD_VAR 0 3
71579: PUSH
71580: LD_INT 29
71582: EQUAL
71583: IFFALSE 71593
// sDLaser := true ;
71585: LD_ADDR_EXP 109
71589: PUSH
71590: LD_INT 1
71592: ST_TO_ADDR
// if p3 = 30 then
71593: LD_VAR 0 3
71597: PUSH
71598: LD_INT 30
71600: EQUAL
71601: IFFALSE 71611
// sExchange := true ;
71603: LD_ADDR_EXP 110
71607: PUSH
71608: LD_INT 1
71610: ST_TO_ADDR
// if p3 = 31 then
71611: LD_VAR 0 3
71615: PUSH
71616: LD_INT 31
71618: EQUAL
71619: IFFALSE 71629
// sFac := true ;
71621: LD_ADDR_EXP 111
71625: PUSH
71626: LD_INT 1
71628: ST_TO_ADDR
// if p3 = 32 then
71629: LD_VAR 0 3
71633: PUSH
71634: LD_INT 32
71636: EQUAL
71637: IFFALSE 71647
// sPower := true ;
71639: LD_ADDR_EXP 112
71643: PUSH
71644: LD_INT 1
71646: ST_TO_ADDR
// if p3 = 33 then
71647: LD_VAR 0 3
71651: PUSH
71652: LD_INT 33
71654: EQUAL
71655: IFFALSE 71665
// sRandom := true ;
71657: LD_ADDR_EXP 113
71661: PUSH
71662: LD_INT 1
71664: ST_TO_ADDR
// if p3 = 34 then
71665: LD_VAR 0 3
71669: PUSH
71670: LD_INT 34
71672: EQUAL
71673: IFFALSE 71683
// sShield := true ;
71675: LD_ADDR_EXP 114
71679: PUSH
71680: LD_INT 1
71682: ST_TO_ADDR
// if p3 = 35 then
71683: LD_VAR 0 3
71687: PUSH
71688: LD_INT 35
71690: EQUAL
71691: IFFALSE 71701
// sTime := true ;
71693: LD_ADDR_EXP 115
71697: PUSH
71698: LD_INT 1
71700: ST_TO_ADDR
// if p3 = 36 then
71701: LD_VAR 0 3
71705: PUSH
71706: LD_INT 36
71708: EQUAL
71709: IFFALSE 71719
// sTools := true ;
71711: LD_ADDR_EXP 116
71715: PUSH
71716: LD_INT 1
71718: ST_TO_ADDR
// if p3 = 101 then
71719: LD_VAR 0 3
71723: PUSH
71724: LD_INT 101
71726: EQUAL
71727: IFFALSE 71737
// sSold := true ;
71729: LD_ADDR_EXP 81
71733: PUSH
71734: LD_INT 1
71736: ST_TO_ADDR
// if p3 = 102 then
71737: LD_VAR 0 3
71741: PUSH
71742: LD_INT 102
71744: EQUAL
71745: IFFALSE 71755
// sDiff := true ;
71747: LD_ADDR_EXP 82
71751: PUSH
71752: LD_INT 1
71754: ST_TO_ADDR
// if p3 = 103 then
71755: LD_VAR 0 3
71759: PUSH
71760: LD_INT 103
71762: EQUAL
71763: IFFALSE 71773
// sFog := true ;
71765: LD_ADDR_EXP 85
71769: PUSH
71770: LD_INT 1
71772: ST_TO_ADDR
// if p3 = 104 then
71773: LD_VAR 0 3
71777: PUSH
71778: LD_INT 104
71780: EQUAL
71781: IFFALSE 71791
// sReset := true ;
71783: LD_ADDR_EXP 86
71787: PUSH
71788: LD_INT 1
71790: ST_TO_ADDR
// if p3 = 105 then
71791: LD_VAR 0 3
71795: PUSH
71796: LD_INT 105
71798: EQUAL
71799: IFFALSE 71809
// sSun := true ;
71801: LD_ADDR_EXP 87
71805: PUSH
71806: LD_INT 1
71808: ST_TO_ADDR
// if p3 = 106 then
71809: LD_VAR 0 3
71813: PUSH
71814: LD_INT 106
71816: EQUAL
71817: IFFALSE 71827
// sTiger := true ;
71819: LD_ADDR_EXP 83
71823: PUSH
71824: LD_INT 1
71826: ST_TO_ADDR
// if p3 = 107 then
71827: LD_VAR 0 3
71831: PUSH
71832: LD_INT 107
71834: EQUAL
71835: IFFALSE 71845
// sBomb := true ;
71837: LD_ADDR_EXP 84
71841: PUSH
71842: LD_INT 1
71844: ST_TO_ADDR
// if p3 = 108 then
71845: LD_VAR 0 3
71849: PUSH
71850: LD_INT 108
71852: EQUAL
71853: IFFALSE 71863
// sWound := true ;
71855: LD_ADDR_EXP 92
71859: PUSH
71860: LD_INT 1
71862: ST_TO_ADDR
// if p3 = 109 then
71863: LD_VAR 0 3
71867: PUSH
71868: LD_INT 109
71870: EQUAL
71871: IFFALSE 71881
// sBetray := true ;
71873: LD_ADDR_EXP 96
71877: PUSH
71878: LD_INT 1
71880: ST_TO_ADDR
// if p3 = 110 then
71881: LD_VAR 0 3
71885: PUSH
71886: LD_INT 110
71888: EQUAL
71889: IFFALSE 71899
// sContamin := true ;
71891: LD_ADDR_EXP 97
71895: PUSH
71896: LD_INT 1
71898: ST_TO_ADDR
// if p3 = 111 then
71899: LD_VAR 0 3
71903: PUSH
71904: LD_INT 111
71906: EQUAL
71907: IFFALSE 71917
// sOil := true ;
71909: LD_ADDR_EXP 99
71913: PUSH
71914: LD_INT 1
71916: ST_TO_ADDR
// if p3 = 112 then
71917: LD_VAR 0 3
71921: PUSH
71922: LD_INT 112
71924: EQUAL
71925: IFFALSE 71935
// sStu := true ;
71927: LD_ADDR_EXP 103
71931: PUSH
71932: LD_INT 1
71934: ST_TO_ADDR
// if p3 = 113 then
71935: LD_VAR 0 3
71939: PUSH
71940: LD_INT 113
71942: EQUAL
71943: IFFALSE 71953
// sBazooka := true ;
71945: LD_ADDR_EXP 106
71949: PUSH
71950: LD_INT 1
71952: ST_TO_ADDR
// if p3 = 114 then
71953: LD_VAR 0 3
71957: PUSH
71958: LD_INT 114
71960: EQUAL
71961: IFFALSE 71971
// sMortar := true ;
71963: LD_ADDR_EXP 107
71967: PUSH
71968: LD_INT 1
71970: ST_TO_ADDR
// if p3 = 115 then
71971: LD_VAR 0 3
71975: PUSH
71976: LD_INT 115
71978: EQUAL
71979: IFFALSE 71989
// sRanger := true ;
71981: LD_ADDR_EXP 117
71985: PUSH
71986: LD_INT 1
71988: ST_TO_ADDR
// if p3 = 116 then
71989: LD_VAR 0 3
71993: PUSH
71994: LD_INT 116
71996: EQUAL
71997: IFFALSE 72007
// sComputer := true ;
71999: LD_ADDR_EXP 118
72003: PUSH
72004: LD_INT 1
72006: ST_TO_ADDR
// if p3 = 117 then
72007: LD_VAR 0 3
72011: PUSH
72012: LD_INT 117
72014: EQUAL
72015: IFFALSE 72025
// s30 := true ;
72017: LD_ADDR_EXP 119
72021: PUSH
72022: LD_INT 1
72024: ST_TO_ADDR
// if p3 = 118 then
72025: LD_VAR 0 3
72029: PUSH
72030: LD_INT 118
72032: EQUAL
72033: IFFALSE 72043
// s60 := true ;
72035: LD_ADDR_EXP 120
72039: PUSH
72040: LD_INT 1
72042: ST_TO_ADDR
// end ; if p2 = hack_mode then
72043: LD_VAR 0 2
72047: PUSH
72048: LD_INT 101
72050: EQUAL
72051: IFFALSE 72179
// begin case p3 of 1 :
72053: LD_VAR 0 3
72057: PUSH
72058: LD_INT 1
72060: DOUBLE
72061: EQUAL
72062: IFTRUE 72066
72064: GO 72073
72066: POP
// hHackUnlimitedResources ; 2 :
72067: CALL 84318 0 0
72071: GO 72179
72073: LD_INT 2
72075: DOUBLE
72076: EQUAL
72077: IFTRUE 72081
72079: GO 72088
72081: POP
// hHackSetLevel10 ; 3 :
72082: CALL 84451 0 0
72086: GO 72179
72088: LD_INT 3
72090: DOUBLE
72091: EQUAL
72092: IFTRUE 72096
72094: GO 72103
72096: POP
// hHackSetLevel10YourUnits ; 4 :
72097: CALL 84536 0 0
72101: GO 72179
72103: LD_INT 4
72105: DOUBLE
72106: EQUAL
72107: IFTRUE 72111
72109: GO 72118
72111: POP
// hHackInvincible ; 5 :
72112: CALL 84984 0 0
72116: GO 72179
72118: LD_INT 5
72120: DOUBLE
72121: EQUAL
72122: IFTRUE 72126
72124: GO 72133
72126: POP
// hHackInvisible ; 6 :
72127: CALL 85095 0 0
72131: GO 72179
72133: LD_INT 6
72135: DOUBLE
72136: EQUAL
72137: IFTRUE 72141
72139: GO 72148
72141: POP
// hHackChangeYourSide ; 7 :
72142: CALL 85152 0 0
72146: GO 72179
72148: LD_INT 7
72150: DOUBLE
72151: EQUAL
72152: IFTRUE 72156
72154: GO 72163
72156: POP
// hHackChangeUnitSide ; 8 :
72157: CALL 85194 0 0
72161: GO 72179
72163: LD_INT 8
72165: DOUBLE
72166: EQUAL
72167: IFTRUE 72171
72169: GO 72178
72171: POP
// hHackFog ; end ;
72172: CALL 85295 0 0
72176: GO 72179
72178: POP
// end ; if p2 = game_save_mode then
72179: LD_VAR 0 2
72183: PUSH
72184: LD_INT 102
72186: EQUAL
72187: IFFALSE 72242
// begin if p3 = 1 then
72189: LD_VAR 0 3
72193: PUSH
72194: LD_INT 1
72196: EQUAL
72197: IFFALSE 72209
// globalGameSaveCounter := p4 ;
72199: LD_ADDR_EXP 63
72203: PUSH
72204: LD_VAR 0 4
72208: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
72209: LD_VAR 0 3
72213: PUSH
72214: LD_INT 2
72216: EQUAL
72217: PUSH
72218: LD_EXP 63
72222: AND
72223: IFFALSE 72242
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
72225: LD_STRING setGameSaveCounter(
72227: PUSH
72228: LD_EXP 63
72232: STR
72233: PUSH
72234: LD_STRING )
72236: STR
72237: PPUSH
72238: CALL_OW 559
// end ; end ;
72242: LD_VAR 0 7
72246: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
72247: LD_INT 0
72249: PPUSH
// streamModeActive := false ;
72250: LD_ADDR_EXP 64
72254: PUSH
72255: LD_INT 0
72257: ST_TO_ADDR
// normalCounter := 36 ;
72258: LD_ADDR_EXP 65
72262: PUSH
72263: LD_INT 36
72265: ST_TO_ADDR
// hardcoreCounter := 18 ;
72266: LD_ADDR_EXP 66
72270: PUSH
72271: LD_INT 18
72273: ST_TO_ADDR
// sRocket := false ;
72274: LD_ADDR_EXP 69
72278: PUSH
72279: LD_INT 0
72281: ST_TO_ADDR
// sSpeed := false ;
72282: LD_ADDR_EXP 68
72286: PUSH
72287: LD_INT 0
72289: ST_TO_ADDR
// sEngine := false ;
72290: LD_ADDR_EXP 70
72294: PUSH
72295: LD_INT 0
72297: ST_TO_ADDR
// sSpec := false ;
72298: LD_ADDR_EXP 67
72302: PUSH
72303: LD_INT 0
72305: ST_TO_ADDR
// sLevel := false ;
72306: LD_ADDR_EXP 71
72310: PUSH
72311: LD_INT 0
72313: ST_TO_ADDR
// sArmoury := false ;
72314: LD_ADDR_EXP 72
72318: PUSH
72319: LD_INT 0
72321: ST_TO_ADDR
// sRadar := false ;
72322: LD_ADDR_EXP 73
72326: PUSH
72327: LD_INT 0
72329: ST_TO_ADDR
// sBunker := false ;
72330: LD_ADDR_EXP 74
72334: PUSH
72335: LD_INT 0
72337: ST_TO_ADDR
// sHack := false ;
72338: LD_ADDR_EXP 75
72342: PUSH
72343: LD_INT 0
72345: ST_TO_ADDR
// sFire := false ;
72346: LD_ADDR_EXP 76
72350: PUSH
72351: LD_INT 0
72353: ST_TO_ADDR
// sRefresh := false ;
72354: LD_ADDR_EXP 77
72358: PUSH
72359: LD_INT 0
72361: ST_TO_ADDR
// sExp := false ;
72362: LD_ADDR_EXP 78
72366: PUSH
72367: LD_INT 0
72369: ST_TO_ADDR
// sDepot := false ;
72370: LD_ADDR_EXP 79
72374: PUSH
72375: LD_INT 0
72377: ST_TO_ADDR
// sFlag := false ;
72378: LD_ADDR_EXP 80
72382: PUSH
72383: LD_INT 0
72385: ST_TO_ADDR
// sKamikadze := false ;
72386: LD_ADDR_EXP 88
72390: PUSH
72391: LD_INT 0
72393: ST_TO_ADDR
// sTroll := false ;
72394: LD_ADDR_EXP 89
72398: PUSH
72399: LD_INT 0
72401: ST_TO_ADDR
// sSlow := false ;
72402: LD_ADDR_EXP 90
72406: PUSH
72407: LD_INT 0
72409: ST_TO_ADDR
// sLack := false ;
72410: LD_ADDR_EXP 91
72414: PUSH
72415: LD_INT 0
72417: ST_TO_ADDR
// sTank := false ;
72418: LD_ADDR_EXP 93
72422: PUSH
72423: LD_INT 0
72425: ST_TO_ADDR
// sRemote := false ;
72426: LD_ADDR_EXP 94
72430: PUSH
72431: LD_INT 0
72433: ST_TO_ADDR
// sPowell := false ;
72434: LD_ADDR_EXP 95
72438: PUSH
72439: LD_INT 0
72441: ST_TO_ADDR
// sTeleport := false ;
72442: LD_ADDR_EXP 98
72446: PUSH
72447: LD_INT 0
72449: ST_TO_ADDR
// sOilTower := false ;
72450: LD_ADDR_EXP 100
72454: PUSH
72455: LD_INT 0
72457: ST_TO_ADDR
// sShovel := false ;
72458: LD_ADDR_EXP 101
72462: PUSH
72463: LD_INT 0
72465: ST_TO_ADDR
// sSheik := false ;
72466: LD_ADDR_EXP 102
72470: PUSH
72471: LD_INT 0
72473: ST_TO_ADDR
// sEarthquake := false ;
72474: LD_ADDR_EXP 104
72478: PUSH
72479: LD_INT 0
72481: ST_TO_ADDR
// sAI := false ;
72482: LD_ADDR_EXP 105
72486: PUSH
72487: LD_INT 0
72489: ST_TO_ADDR
// sCargo := false ;
72490: LD_ADDR_EXP 108
72494: PUSH
72495: LD_INT 0
72497: ST_TO_ADDR
// sDLaser := false ;
72498: LD_ADDR_EXP 109
72502: PUSH
72503: LD_INT 0
72505: ST_TO_ADDR
// sExchange := false ;
72506: LD_ADDR_EXP 110
72510: PUSH
72511: LD_INT 0
72513: ST_TO_ADDR
// sFac := false ;
72514: LD_ADDR_EXP 111
72518: PUSH
72519: LD_INT 0
72521: ST_TO_ADDR
// sPower := false ;
72522: LD_ADDR_EXP 112
72526: PUSH
72527: LD_INT 0
72529: ST_TO_ADDR
// sRandom := false ;
72530: LD_ADDR_EXP 113
72534: PUSH
72535: LD_INT 0
72537: ST_TO_ADDR
// sShield := false ;
72538: LD_ADDR_EXP 114
72542: PUSH
72543: LD_INT 0
72545: ST_TO_ADDR
// sTime := false ;
72546: LD_ADDR_EXP 115
72550: PUSH
72551: LD_INT 0
72553: ST_TO_ADDR
// sTools := false ;
72554: LD_ADDR_EXP 116
72558: PUSH
72559: LD_INT 0
72561: ST_TO_ADDR
// sSold := false ;
72562: LD_ADDR_EXP 81
72566: PUSH
72567: LD_INT 0
72569: ST_TO_ADDR
// sDiff := false ;
72570: LD_ADDR_EXP 82
72574: PUSH
72575: LD_INT 0
72577: ST_TO_ADDR
// sFog := false ;
72578: LD_ADDR_EXP 85
72582: PUSH
72583: LD_INT 0
72585: ST_TO_ADDR
// sReset := false ;
72586: LD_ADDR_EXP 86
72590: PUSH
72591: LD_INT 0
72593: ST_TO_ADDR
// sSun := false ;
72594: LD_ADDR_EXP 87
72598: PUSH
72599: LD_INT 0
72601: ST_TO_ADDR
// sTiger := false ;
72602: LD_ADDR_EXP 83
72606: PUSH
72607: LD_INT 0
72609: ST_TO_ADDR
// sBomb := false ;
72610: LD_ADDR_EXP 84
72614: PUSH
72615: LD_INT 0
72617: ST_TO_ADDR
// sWound := false ;
72618: LD_ADDR_EXP 92
72622: PUSH
72623: LD_INT 0
72625: ST_TO_ADDR
// sBetray := false ;
72626: LD_ADDR_EXP 96
72630: PUSH
72631: LD_INT 0
72633: ST_TO_ADDR
// sContamin := false ;
72634: LD_ADDR_EXP 97
72638: PUSH
72639: LD_INT 0
72641: ST_TO_ADDR
// sOil := false ;
72642: LD_ADDR_EXP 99
72646: PUSH
72647: LD_INT 0
72649: ST_TO_ADDR
// sStu := false ;
72650: LD_ADDR_EXP 103
72654: PUSH
72655: LD_INT 0
72657: ST_TO_ADDR
// sBazooka := false ;
72658: LD_ADDR_EXP 106
72662: PUSH
72663: LD_INT 0
72665: ST_TO_ADDR
// sMortar := false ;
72666: LD_ADDR_EXP 107
72670: PUSH
72671: LD_INT 0
72673: ST_TO_ADDR
// sRanger := false ;
72674: LD_ADDR_EXP 117
72678: PUSH
72679: LD_INT 0
72681: ST_TO_ADDR
// sComputer := false ;
72682: LD_ADDR_EXP 118
72686: PUSH
72687: LD_INT 0
72689: ST_TO_ADDR
// s30 := false ;
72690: LD_ADDR_EXP 119
72694: PUSH
72695: LD_INT 0
72697: ST_TO_ADDR
// s60 := false ;
72698: LD_ADDR_EXP 120
72702: PUSH
72703: LD_INT 0
72705: ST_TO_ADDR
// end ;
72706: LD_VAR 0 1
72710: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
72711: LD_INT 0
72713: PPUSH
72714: PPUSH
72715: PPUSH
72716: PPUSH
72717: PPUSH
72718: PPUSH
72719: PPUSH
// result := [ ] ;
72720: LD_ADDR_VAR 0 2
72724: PUSH
72725: EMPTY
72726: ST_TO_ADDR
// if campaign_id = 1 then
72727: LD_OWVAR 69
72731: PUSH
72732: LD_INT 1
72734: EQUAL
72735: IFFALSE 75901
// begin case mission_number of 1 :
72737: LD_OWVAR 70
72741: PUSH
72742: LD_INT 1
72744: DOUBLE
72745: EQUAL
72746: IFTRUE 72750
72748: GO 72826
72750: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
72751: LD_ADDR_VAR 0 2
72755: PUSH
72756: LD_INT 2
72758: PUSH
72759: LD_INT 4
72761: PUSH
72762: LD_INT 11
72764: PUSH
72765: LD_INT 12
72767: PUSH
72768: LD_INT 15
72770: PUSH
72771: LD_INT 16
72773: PUSH
72774: LD_INT 22
72776: PUSH
72777: LD_INT 23
72779: PUSH
72780: LD_INT 26
72782: PUSH
72783: EMPTY
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: PUSH
72794: LD_INT 101
72796: PUSH
72797: LD_INT 102
72799: PUSH
72800: LD_INT 106
72802: PUSH
72803: LD_INT 116
72805: PUSH
72806: LD_INT 117
72808: PUSH
72809: LD_INT 118
72811: PUSH
72812: EMPTY
72813: LIST
72814: LIST
72815: LIST
72816: LIST
72817: LIST
72818: LIST
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: ST_TO_ADDR
72824: GO 75899
72826: LD_INT 2
72828: DOUBLE
72829: EQUAL
72830: IFTRUE 72834
72832: GO 72918
72834: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
72835: LD_ADDR_VAR 0 2
72839: PUSH
72840: LD_INT 2
72842: PUSH
72843: LD_INT 4
72845: PUSH
72846: LD_INT 11
72848: PUSH
72849: LD_INT 12
72851: PUSH
72852: LD_INT 15
72854: PUSH
72855: LD_INT 16
72857: PUSH
72858: LD_INT 22
72860: PUSH
72861: LD_INT 23
72863: PUSH
72864: LD_INT 26
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: PUSH
72878: LD_INT 101
72880: PUSH
72881: LD_INT 102
72883: PUSH
72884: LD_INT 105
72886: PUSH
72887: LD_INT 106
72889: PUSH
72890: LD_INT 108
72892: PUSH
72893: LD_INT 116
72895: PUSH
72896: LD_INT 117
72898: PUSH
72899: LD_INT 118
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: LIST
72906: LIST
72907: LIST
72908: LIST
72909: LIST
72910: LIST
72911: PUSH
72912: EMPTY
72913: LIST
72914: LIST
72915: ST_TO_ADDR
72916: GO 75899
72918: LD_INT 3
72920: DOUBLE
72921: EQUAL
72922: IFTRUE 72926
72924: GO 73014
72926: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
72927: LD_ADDR_VAR 0 2
72931: PUSH
72932: LD_INT 2
72934: PUSH
72935: LD_INT 4
72937: PUSH
72938: LD_INT 5
72940: PUSH
72941: LD_INT 11
72943: PUSH
72944: LD_INT 12
72946: PUSH
72947: LD_INT 15
72949: PUSH
72950: LD_INT 16
72952: PUSH
72953: LD_INT 22
72955: PUSH
72956: LD_INT 26
72958: PUSH
72959: LD_INT 36
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: LIST
72966: LIST
72967: LIST
72968: LIST
72969: LIST
72970: LIST
72971: LIST
72972: LIST
72973: PUSH
72974: LD_INT 101
72976: PUSH
72977: LD_INT 102
72979: PUSH
72980: LD_INT 105
72982: PUSH
72983: LD_INT 106
72985: PUSH
72986: LD_INT 108
72988: PUSH
72989: LD_INT 116
72991: PUSH
72992: LD_INT 117
72994: PUSH
72995: LD_INT 118
72997: PUSH
72998: EMPTY
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: PUSH
73008: EMPTY
73009: LIST
73010: LIST
73011: ST_TO_ADDR
73012: GO 75899
73014: LD_INT 4
73016: DOUBLE
73017: EQUAL
73018: IFTRUE 73022
73020: GO 73118
73022: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
73023: LD_ADDR_VAR 0 2
73027: PUSH
73028: LD_INT 2
73030: PUSH
73031: LD_INT 4
73033: PUSH
73034: LD_INT 5
73036: PUSH
73037: LD_INT 8
73039: PUSH
73040: LD_INT 11
73042: PUSH
73043: LD_INT 12
73045: PUSH
73046: LD_INT 15
73048: PUSH
73049: LD_INT 16
73051: PUSH
73052: LD_INT 22
73054: PUSH
73055: LD_INT 23
73057: PUSH
73058: LD_INT 26
73060: PUSH
73061: LD_INT 36
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: LIST
73068: LIST
73069: LIST
73070: LIST
73071: LIST
73072: LIST
73073: LIST
73074: LIST
73075: LIST
73076: LIST
73077: PUSH
73078: LD_INT 101
73080: PUSH
73081: LD_INT 102
73083: PUSH
73084: LD_INT 105
73086: PUSH
73087: LD_INT 106
73089: PUSH
73090: LD_INT 108
73092: PUSH
73093: LD_INT 116
73095: PUSH
73096: LD_INT 117
73098: PUSH
73099: LD_INT 118
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: LIST
73106: LIST
73107: LIST
73108: LIST
73109: LIST
73110: LIST
73111: PUSH
73112: EMPTY
73113: LIST
73114: LIST
73115: ST_TO_ADDR
73116: GO 75899
73118: LD_INT 5
73120: DOUBLE
73121: EQUAL
73122: IFTRUE 73126
73124: GO 73238
73126: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
73127: LD_ADDR_VAR 0 2
73131: PUSH
73132: LD_INT 2
73134: PUSH
73135: LD_INT 4
73137: PUSH
73138: LD_INT 5
73140: PUSH
73141: LD_INT 6
73143: PUSH
73144: LD_INT 8
73146: PUSH
73147: LD_INT 11
73149: PUSH
73150: LD_INT 12
73152: PUSH
73153: LD_INT 15
73155: PUSH
73156: LD_INT 16
73158: PUSH
73159: LD_INT 22
73161: PUSH
73162: LD_INT 23
73164: PUSH
73165: LD_INT 25
73167: PUSH
73168: LD_INT 26
73170: PUSH
73171: LD_INT 36
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: PUSH
73190: LD_INT 101
73192: PUSH
73193: LD_INT 102
73195: PUSH
73196: LD_INT 105
73198: PUSH
73199: LD_INT 106
73201: PUSH
73202: LD_INT 108
73204: PUSH
73205: LD_INT 109
73207: PUSH
73208: LD_INT 112
73210: PUSH
73211: LD_INT 116
73213: PUSH
73214: LD_INT 117
73216: PUSH
73217: LD_INT 118
73219: PUSH
73220: EMPTY
73221: LIST
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: LIST
73230: LIST
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: ST_TO_ADDR
73236: GO 75899
73238: LD_INT 6
73240: DOUBLE
73241: EQUAL
73242: IFTRUE 73246
73244: GO 73378
73246: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
73247: LD_ADDR_VAR 0 2
73251: PUSH
73252: LD_INT 2
73254: PUSH
73255: LD_INT 4
73257: PUSH
73258: LD_INT 5
73260: PUSH
73261: LD_INT 6
73263: PUSH
73264: LD_INT 8
73266: PUSH
73267: LD_INT 11
73269: PUSH
73270: LD_INT 12
73272: PUSH
73273: LD_INT 15
73275: PUSH
73276: LD_INT 16
73278: PUSH
73279: LD_INT 20
73281: PUSH
73282: LD_INT 21
73284: PUSH
73285: LD_INT 22
73287: PUSH
73288: LD_INT 23
73290: PUSH
73291: LD_INT 25
73293: PUSH
73294: LD_INT 26
73296: PUSH
73297: LD_INT 30
73299: PUSH
73300: LD_INT 31
73302: PUSH
73303: LD_INT 32
73305: PUSH
73306: LD_INT 36
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: LIST
73329: PUSH
73330: LD_INT 101
73332: PUSH
73333: LD_INT 102
73335: PUSH
73336: LD_INT 105
73338: PUSH
73339: LD_INT 106
73341: PUSH
73342: LD_INT 108
73344: PUSH
73345: LD_INT 109
73347: PUSH
73348: LD_INT 112
73350: PUSH
73351: LD_INT 116
73353: PUSH
73354: LD_INT 117
73356: PUSH
73357: LD_INT 118
73359: PUSH
73360: EMPTY
73361: LIST
73362: LIST
73363: LIST
73364: LIST
73365: LIST
73366: LIST
73367: LIST
73368: LIST
73369: LIST
73370: LIST
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: ST_TO_ADDR
73376: GO 75899
73378: LD_INT 7
73380: DOUBLE
73381: EQUAL
73382: IFTRUE 73386
73384: GO 73498
73386: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
73387: LD_ADDR_VAR 0 2
73391: PUSH
73392: LD_INT 2
73394: PUSH
73395: LD_INT 4
73397: PUSH
73398: LD_INT 5
73400: PUSH
73401: LD_INT 7
73403: PUSH
73404: LD_INT 11
73406: PUSH
73407: LD_INT 12
73409: PUSH
73410: LD_INT 15
73412: PUSH
73413: LD_INT 16
73415: PUSH
73416: LD_INT 20
73418: PUSH
73419: LD_INT 21
73421: PUSH
73422: LD_INT 22
73424: PUSH
73425: LD_INT 23
73427: PUSH
73428: LD_INT 25
73430: PUSH
73431: LD_INT 26
73433: PUSH
73434: EMPTY
73435: LIST
73436: LIST
73437: LIST
73438: LIST
73439: LIST
73440: LIST
73441: LIST
73442: LIST
73443: LIST
73444: LIST
73445: LIST
73446: LIST
73447: LIST
73448: LIST
73449: PUSH
73450: LD_INT 101
73452: PUSH
73453: LD_INT 102
73455: PUSH
73456: LD_INT 103
73458: PUSH
73459: LD_INT 105
73461: PUSH
73462: LD_INT 106
73464: PUSH
73465: LD_INT 108
73467: PUSH
73468: LD_INT 112
73470: PUSH
73471: LD_INT 116
73473: PUSH
73474: LD_INT 117
73476: PUSH
73477: LD_INT 118
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: LIST
73484: LIST
73485: LIST
73486: LIST
73487: LIST
73488: LIST
73489: LIST
73490: LIST
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: ST_TO_ADDR
73496: GO 75899
73498: LD_INT 8
73500: DOUBLE
73501: EQUAL
73502: IFTRUE 73506
73504: GO 73646
73506: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
73507: LD_ADDR_VAR 0 2
73511: PUSH
73512: LD_INT 2
73514: PUSH
73515: LD_INT 4
73517: PUSH
73518: LD_INT 5
73520: PUSH
73521: LD_INT 6
73523: PUSH
73524: LD_INT 7
73526: PUSH
73527: LD_INT 8
73529: PUSH
73530: LD_INT 11
73532: PUSH
73533: LD_INT 12
73535: PUSH
73536: LD_INT 15
73538: PUSH
73539: LD_INT 16
73541: PUSH
73542: LD_INT 20
73544: PUSH
73545: LD_INT 21
73547: PUSH
73548: LD_INT 22
73550: PUSH
73551: LD_INT 23
73553: PUSH
73554: LD_INT 25
73556: PUSH
73557: LD_INT 26
73559: PUSH
73560: LD_INT 30
73562: PUSH
73563: LD_INT 31
73565: PUSH
73566: LD_INT 32
73568: PUSH
73569: LD_INT 36
73571: PUSH
73572: EMPTY
73573: LIST
73574: LIST
73575: LIST
73576: LIST
73577: LIST
73578: LIST
73579: LIST
73580: LIST
73581: LIST
73582: LIST
73583: LIST
73584: LIST
73585: LIST
73586: LIST
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: LIST
73593: PUSH
73594: LD_INT 101
73596: PUSH
73597: LD_INT 102
73599: PUSH
73600: LD_INT 103
73602: PUSH
73603: LD_INT 105
73605: PUSH
73606: LD_INT 106
73608: PUSH
73609: LD_INT 108
73611: PUSH
73612: LD_INT 109
73614: PUSH
73615: LD_INT 112
73617: PUSH
73618: LD_INT 116
73620: PUSH
73621: LD_INT 117
73623: PUSH
73624: LD_INT 118
73626: PUSH
73627: EMPTY
73628: LIST
73629: LIST
73630: LIST
73631: LIST
73632: LIST
73633: LIST
73634: LIST
73635: LIST
73636: LIST
73637: LIST
73638: LIST
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: ST_TO_ADDR
73644: GO 75899
73646: LD_INT 9
73648: DOUBLE
73649: EQUAL
73650: IFTRUE 73654
73652: GO 73802
73654: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
73655: LD_ADDR_VAR 0 2
73659: PUSH
73660: LD_INT 2
73662: PUSH
73663: LD_INT 4
73665: PUSH
73666: LD_INT 5
73668: PUSH
73669: LD_INT 6
73671: PUSH
73672: LD_INT 7
73674: PUSH
73675: LD_INT 8
73677: PUSH
73678: LD_INT 11
73680: PUSH
73681: LD_INT 12
73683: PUSH
73684: LD_INT 15
73686: PUSH
73687: LD_INT 16
73689: PUSH
73690: LD_INT 20
73692: PUSH
73693: LD_INT 21
73695: PUSH
73696: LD_INT 22
73698: PUSH
73699: LD_INT 23
73701: PUSH
73702: LD_INT 25
73704: PUSH
73705: LD_INT 26
73707: PUSH
73708: LD_INT 28
73710: PUSH
73711: LD_INT 30
73713: PUSH
73714: LD_INT 31
73716: PUSH
73717: LD_INT 32
73719: PUSH
73720: LD_INT 36
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: LIST
73727: LIST
73728: LIST
73729: LIST
73730: LIST
73731: LIST
73732: LIST
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: PUSH
73746: LD_INT 101
73748: PUSH
73749: LD_INT 102
73751: PUSH
73752: LD_INT 103
73754: PUSH
73755: LD_INT 105
73757: PUSH
73758: LD_INT 106
73760: PUSH
73761: LD_INT 108
73763: PUSH
73764: LD_INT 109
73766: PUSH
73767: LD_INT 112
73769: PUSH
73770: LD_INT 114
73772: PUSH
73773: LD_INT 116
73775: PUSH
73776: LD_INT 117
73778: PUSH
73779: LD_INT 118
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: LIST
73786: LIST
73787: LIST
73788: LIST
73789: LIST
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: LIST
73795: PUSH
73796: EMPTY
73797: LIST
73798: LIST
73799: ST_TO_ADDR
73800: GO 75899
73802: LD_INT 10
73804: DOUBLE
73805: EQUAL
73806: IFTRUE 73810
73808: GO 74006
73810: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
73811: LD_ADDR_VAR 0 2
73815: PUSH
73816: LD_INT 2
73818: PUSH
73819: LD_INT 4
73821: PUSH
73822: LD_INT 5
73824: PUSH
73825: LD_INT 6
73827: PUSH
73828: LD_INT 7
73830: PUSH
73831: LD_INT 8
73833: PUSH
73834: LD_INT 9
73836: PUSH
73837: LD_INT 10
73839: PUSH
73840: LD_INT 11
73842: PUSH
73843: LD_INT 12
73845: PUSH
73846: LD_INT 13
73848: PUSH
73849: LD_INT 14
73851: PUSH
73852: LD_INT 15
73854: PUSH
73855: LD_INT 16
73857: PUSH
73858: LD_INT 17
73860: PUSH
73861: LD_INT 18
73863: PUSH
73864: LD_INT 19
73866: PUSH
73867: LD_INT 20
73869: PUSH
73870: LD_INT 21
73872: PUSH
73873: LD_INT 22
73875: PUSH
73876: LD_INT 23
73878: PUSH
73879: LD_INT 24
73881: PUSH
73882: LD_INT 25
73884: PUSH
73885: LD_INT 26
73887: PUSH
73888: LD_INT 28
73890: PUSH
73891: LD_INT 30
73893: PUSH
73894: LD_INT 31
73896: PUSH
73897: LD_INT 32
73899: PUSH
73900: LD_INT 36
73902: PUSH
73903: EMPTY
73904: LIST
73905: LIST
73906: LIST
73907: LIST
73908: LIST
73909: LIST
73910: LIST
73911: LIST
73912: LIST
73913: LIST
73914: LIST
73915: LIST
73916: LIST
73917: LIST
73918: LIST
73919: LIST
73920: LIST
73921: LIST
73922: LIST
73923: LIST
73924: LIST
73925: LIST
73926: LIST
73927: LIST
73928: LIST
73929: LIST
73930: LIST
73931: LIST
73932: LIST
73933: PUSH
73934: LD_INT 101
73936: PUSH
73937: LD_INT 102
73939: PUSH
73940: LD_INT 103
73942: PUSH
73943: LD_INT 104
73945: PUSH
73946: LD_INT 105
73948: PUSH
73949: LD_INT 106
73951: PUSH
73952: LD_INT 107
73954: PUSH
73955: LD_INT 108
73957: PUSH
73958: LD_INT 109
73960: PUSH
73961: LD_INT 110
73963: PUSH
73964: LD_INT 111
73966: PUSH
73967: LD_INT 112
73969: PUSH
73970: LD_INT 114
73972: PUSH
73973: LD_INT 116
73975: PUSH
73976: LD_INT 117
73978: PUSH
73979: LD_INT 118
73981: PUSH
73982: EMPTY
73983: LIST
73984: LIST
73985: LIST
73986: LIST
73987: LIST
73988: LIST
73989: LIST
73990: LIST
73991: LIST
73992: LIST
73993: LIST
73994: LIST
73995: LIST
73996: LIST
73997: LIST
73998: LIST
73999: PUSH
74000: EMPTY
74001: LIST
74002: LIST
74003: ST_TO_ADDR
74004: GO 75899
74006: LD_INT 11
74008: DOUBLE
74009: EQUAL
74010: IFTRUE 74014
74012: GO 74218
74014: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
74015: LD_ADDR_VAR 0 2
74019: PUSH
74020: LD_INT 2
74022: PUSH
74023: LD_INT 3
74025: PUSH
74026: LD_INT 4
74028: PUSH
74029: LD_INT 5
74031: PUSH
74032: LD_INT 6
74034: PUSH
74035: LD_INT 7
74037: PUSH
74038: LD_INT 8
74040: PUSH
74041: LD_INT 9
74043: PUSH
74044: LD_INT 10
74046: PUSH
74047: LD_INT 11
74049: PUSH
74050: LD_INT 12
74052: PUSH
74053: LD_INT 13
74055: PUSH
74056: LD_INT 14
74058: PUSH
74059: LD_INT 15
74061: PUSH
74062: LD_INT 16
74064: PUSH
74065: LD_INT 17
74067: PUSH
74068: LD_INT 18
74070: PUSH
74071: LD_INT 19
74073: PUSH
74074: LD_INT 20
74076: PUSH
74077: LD_INT 21
74079: PUSH
74080: LD_INT 22
74082: PUSH
74083: LD_INT 23
74085: PUSH
74086: LD_INT 24
74088: PUSH
74089: LD_INT 25
74091: PUSH
74092: LD_INT 26
74094: PUSH
74095: LD_INT 28
74097: PUSH
74098: LD_INT 30
74100: PUSH
74101: LD_INT 31
74103: PUSH
74104: LD_INT 32
74106: PUSH
74107: LD_INT 34
74109: PUSH
74110: LD_INT 36
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: LIST
74132: LIST
74133: LIST
74134: LIST
74135: LIST
74136: LIST
74137: LIST
74138: LIST
74139: LIST
74140: LIST
74141: LIST
74142: LIST
74143: LIST
74144: LIST
74145: PUSH
74146: LD_INT 101
74148: PUSH
74149: LD_INT 102
74151: PUSH
74152: LD_INT 103
74154: PUSH
74155: LD_INT 104
74157: PUSH
74158: LD_INT 105
74160: PUSH
74161: LD_INT 106
74163: PUSH
74164: LD_INT 107
74166: PUSH
74167: LD_INT 108
74169: PUSH
74170: LD_INT 109
74172: PUSH
74173: LD_INT 110
74175: PUSH
74176: LD_INT 111
74178: PUSH
74179: LD_INT 112
74181: PUSH
74182: LD_INT 114
74184: PUSH
74185: LD_INT 116
74187: PUSH
74188: LD_INT 117
74190: PUSH
74191: LD_INT 118
74193: PUSH
74194: EMPTY
74195: LIST
74196: LIST
74197: LIST
74198: LIST
74199: LIST
74200: LIST
74201: LIST
74202: LIST
74203: LIST
74204: LIST
74205: LIST
74206: LIST
74207: LIST
74208: LIST
74209: LIST
74210: LIST
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: ST_TO_ADDR
74216: GO 75899
74218: LD_INT 12
74220: DOUBLE
74221: EQUAL
74222: IFTRUE 74226
74224: GO 74446
74226: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
74227: LD_ADDR_VAR 0 2
74231: PUSH
74232: LD_INT 1
74234: PUSH
74235: LD_INT 2
74237: PUSH
74238: LD_INT 3
74240: PUSH
74241: LD_INT 4
74243: PUSH
74244: LD_INT 5
74246: PUSH
74247: LD_INT 6
74249: PUSH
74250: LD_INT 7
74252: PUSH
74253: LD_INT 8
74255: PUSH
74256: LD_INT 9
74258: PUSH
74259: LD_INT 10
74261: PUSH
74262: LD_INT 11
74264: PUSH
74265: LD_INT 12
74267: PUSH
74268: LD_INT 13
74270: PUSH
74271: LD_INT 14
74273: PUSH
74274: LD_INT 15
74276: PUSH
74277: LD_INT 16
74279: PUSH
74280: LD_INT 17
74282: PUSH
74283: LD_INT 18
74285: PUSH
74286: LD_INT 19
74288: PUSH
74289: LD_INT 20
74291: PUSH
74292: LD_INT 21
74294: PUSH
74295: LD_INT 22
74297: PUSH
74298: LD_INT 23
74300: PUSH
74301: LD_INT 24
74303: PUSH
74304: LD_INT 25
74306: PUSH
74307: LD_INT 26
74309: PUSH
74310: LD_INT 27
74312: PUSH
74313: LD_INT 28
74315: PUSH
74316: LD_INT 30
74318: PUSH
74319: LD_INT 31
74321: PUSH
74322: LD_INT 32
74324: PUSH
74325: LD_INT 33
74327: PUSH
74328: LD_INT 34
74330: PUSH
74331: LD_INT 36
74333: PUSH
74334: EMPTY
74335: LIST
74336: LIST
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: LIST
74344: LIST
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: LIST
74367: LIST
74368: LIST
74369: PUSH
74370: LD_INT 101
74372: PUSH
74373: LD_INT 102
74375: PUSH
74376: LD_INT 103
74378: PUSH
74379: LD_INT 104
74381: PUSH
74382: LD_INT 105
74384: PUSH
74385: LD_INT 106
74387: PUSH
74388: LD_INT 107
74390: PUSH
74391: LD_INT 108
74393: PUSH
74394: LD_INT 109
74396: PUSH
74397: LD_INT 110
74399: PUSH
74400: LD_INT 111
74402: PUSH
74403: LD_INT 112
74405: PUSH
74406: LD_INT 113
74408: PUSH
74409: LD_INT 114
74411: PUSH
74412: LD_INT 116
74414: PUSH
74415: LD_INT 117
74417: PUSH
74418: LD_INT 118
74420: PUSH
74421: EMPTY
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: LIST
74427: LIST
74428: LIST
74429: LIST
74430: LIST
74431: LIST
74432: LIST
74433: LIST
74434: LIST
74435: LIST
74436: LIST
74437: LIST
74438: LIST
74439: PUSH
74440: EMPTY
74441: LIST
74442: LIST
74443: ST_TO_ADDR
74444: GO 75899
74446: LD_INT 13
74448: DOUBLE
74449: EQUAL
74450: IFTRUE 74454
74452: GO 74662
74454: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
74455: LD_ADDR_VAR 0 2
74459: PUSH
74460: LD_INT 1
74462: PUSH
74463: LD_INT 2
74465: PUSH
74466: LD_INT 3
74468: PUSH
74469: LD_INT 4
74471: PUSH
74472: LD_INT 5
74474: PUSH
74475: LD_INT 8
74477: PUSH
74478: LD_INT 9
74480: PUSH
74481: LD_INT 10
74483: PUSH
74484: LD_INT 11
74486: PUSH
74487: LD_INT 12
74489: PUSH
74490: LD_INT 14
74492: PUSH
74493: LD_INT 15
74495: PUSH
74496: LD_INT 16
74498: PUSH
74499: LD_INT 17
74501: PUSH
74502: LD_INT 18
74504: PUSH
74505: LD_INT 19
74507: PUSH
74508: LD_INT 20
74510: PUSH
74511: LD_INT 21
74513: PUSH
74514: LD_INT 22
74516: PUSH
74517: LD_INT 23
74519: PUSH
74520: LD_INT 24
74522: PUSH
74523: LD_INT 25
74525: PUSH
74526: LD_INT 26
74528: PUSH
74529: LD_INT 27
74531: PUSH
74532: LD_INT 28
74534: PUSH
74535: LD_INT 30
74537: PUSH
74538: LD_INT 31
74540: PUSH
74541: LD_INT 32
74543: PUSH
74544: LD_INT 33
74546: PUSH
74547: LD_INT 34
74549: PUSH
74550: LD_INT 36
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: LIST
74557: LIST
74558: LIST
74559: LIST
74560: LIST
74561: LIST
74562: LIST
74563: LIST
74564: LIST
74565: LIST
74566: LIST
74567: LIST
74568: LIST
74569: LIST
74570: LIST
74571: LIST
74572: LIST
74573: LIST
74574: LIST
74575: LIST
74576: LIST
74577: LIST
74578: LIST
74579: LIST
74580: LIST
74581: LIST
74582: LIST
74583: LIST
74584: LIST
74585: PUSH
74586: LD_INT 101
74588: PUSH
74589: LD_INT 102
74591: PUSH
74592: LD_INT 103
74594: PUSH
74595: LD_INT 104
74597: PUSH
74598: LD_INT 105
74600: PUSH
74601: LD_INT 106
74603: PUSH
74604: LD_INT 107
74606: PUSH
74607: LD_INT 108
74609: PUSH
74610: LD_INT 109
74612: PUSH
74613: LD_INT 110
74615: PUSH
74616: LD_INT 111
74618: PUSH
74619: LD_INT 112
74621: PUSH
74622: LD_INT 113
74624: PUSH
74625: LD_INT 114
74627: PUSH
74628: LD_INT 116
74630: PUSH
74631: LD_INT 117
74633: PUSH
74634: LD_INT 118
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: LIST
74641: LIST
74642: LIST
74643: LIST
74644: LIST
74645: LIST
74646: LIST
74647: LIST
74648: LIST
74649: LIST
74650: LIST
74651: LIST
74652: LIST
74653: LIST
74654: LIST
74655: PUSH
74656: EMPTY
74657: LIST
74658: LIST
74659: ST_TO_ADDR
74660: GO 75899
74662: LD_INT 14
74664: DOUBLE
74665: EQUAL
74666: IFTRUE 74670
74668: GO 74894
74670: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
74671: LD_ADDR_VAR 0 2
74675: PUSH
74676: LD_INT 1
74678: PUSH
74679: LD_INT 2
74681: PUSH
74682: LD_INT 3
74684: PUSH
74685: LD_INT 4
74687: PUSH
74688: LD_INT 5
74690: PUSH
74691: LD_INT 6
74693: PUSH
74694: LD_INT 7
74696: PUSH
74697: LD_INT 8
74699: PUSH
74700: LD_INT 9
74702: PUSH
74703: LD_INT 10
74705: PUSH
74706: LD_INT 11
74708: PUSH
74709: LD_INT 12
74711: PUSH
74712: LD_INT 13
74714: PUSH
74715: LD_INT 14
74717: PUSH
74718: LD_INT 15
74720: PUSH
74721: LD_INT 16
74723: PUSH
74724: LD_INT 17
74726: PUSH
74727: LD_INT 18
74729: PUSH
74730: LD_INT 19
74732: PUSH
74733: LD_INT 20
74735: PUSH
74736: LD_INT 21
74738: PUSH
74739: LD_INT 22
74741: PUSH
74742: LD_INT 23
74744: PUSH
74745: LD_INT 24
74747: PUSH
74748: LD_INT 25
74750: PUSH
74751: LD_INT 26
74753: PUSH
74754: LD_INT 27
74756: PUSH
74757: LD_INT 28
74759: PUSH
74760: LD_INT 29
74762: PUSH
74763: LD_INT 30
74765: PUSH
74766: LD_INT 31
74768: PUSH
74769: LD_INT 32
74771: PUSH
74772: LD_INT 33
74774: PUSH
74775: LD_INT 34
74777: PUSH
74778: LD_INT 36
74780: PUSH
74781: EMPTY
74782: LIST
74783: LIST
74784: LIST
74785: LIST
74786: LIST
74787: LIST
74788: LIST
74789: LIST
74790: LIST
74791: LIST
74792: LIST
74793: LIST
74794: LIST
74795: LIST
74796: LIST
74797: LIST
74798: LIST
74799: LIST
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: PUSH
74818: LD_INT 101
74820: PUSH
74821: LD_INT 102
74823: PUSH
74824: LD_INT 103
74826: PUSH
74827: LD_INT 104
74829: PUSH
74830: LD_INT 105
74832: PUSH
74833: LD_INT 106
74835: PUSH
74836: LD_INT 107
74838: PUSH
74839: LD_INT 108
74841: PUSH
74842: LD_INT 109
74844: PUSH
74845: LD_INT 110
74847: PUSH
74848: LD_INT 111
74850: PUSH
74851: LD_INT 112
74853: PUSH
74854: LD_INT 113
74856: PUSH
74857: LD_INT 114
74859: PUSH
74860: LD_INT 116
74862: PUSH
74863: LD_INT 117
74865: PUSH
74866: LD_INT 118
74868: PUSH
74869: EMPTY
74870: LIST
74871: LIST
74872: LIST
74873: LIST
74874: LIST
74875: LIST
74876: LIST
74877: LIST
74878: LIST
74879: LIST
74880: LIST
74881: LIST
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: PUSH
74888: EMPTY
74889: LIST
74890: LIST
74891: ST_TO_ADDR
74892: GO 75899
74894: LD_INT 15
74896: DOUBLE
74897: EQUAL
74898: IFTRUE 74902
74900: GO 75126
74902: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
74903: LD_ADDR_VAR 0 2
74907: PUSH
74908: LD_INT 1
74910: PUSH
74911: LD_INT 2
74913: PUSH
74914: LD_INT 3
74916: PUSH
74917: LD_INT 4
74919: PUSH
74920: LD_INT 5
74922: PUSH
74923: LD_INT 6
74925: PUSH
74926: LD_INT 7
74928: PUSH
74929: LD_INT 8
74931: PUSH
74932: LD_INT 9
74934: PUSH
74935: LD_INT 10
74937: PUSH
74938: LD_INT 11
74940: PUSH
74941: LD_INT 12
74943: PUSH
74944: LD_INT 13
74946: PUSH
74947: LD_INT 14
74949: PUSH
74950: LD_INT 15
74952: PUSH
74953: LD_INT 16
74955: PUSH
74956: LD_INT 17
74958: PUSH
74959: LD_INT 18
74961: PUSH
74962: LD_INT 19
74964: PUSH
74965: LD_INT 20
74967: PUSH
74968: LD_INT 21
74970: PUSH
74971: LD_INT 22
74973: PUSH
74974: LD_INT 23
74976: PUSH
74977: LD_INT 24
74979: PUSH
74980: LD_INT 25
74982: PUSH
74983: LD_INT 26
74985: PUSH
74986: LD_INT 27
74988: PUSH
74989: LD_INT 28
74991: PUSH
74992: LD_INT 29
74994: PUSH
74995: LD_INT 30
74997: PUSH
74998: LD_INT 31
75000: PUSH
75001: LD_INT 32
75003: PUSH
75004: LD_INT 33
75006: PUSH
75007: LD_INT 34
75009: PUSH
75010: LD_INT 36
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: LIST
75017: LIST
75018: LIST
75019: LIST
75020: LIST
75021: LIST
75022: LIST
75023: LIST
75024: LIST
75025: LIST
75026: LIST
75027: LIST
75028: LIST
75029: LIST
75030: LIST
75031: LIST
75032: LIST
75033: LIST
75034: LIST
75035: LIST
75036: LIST
75037: LIST
75038: LIST
75039: LIST
75040: LIST
75041: LIST
75042: LIST
75043: LIST
75044: LIST
75045: LIST
75046: LIST
75047: LIST
75048: LIST
75049: PUSH
75050: LD_INT 101
75052: PUSH
75053: LD_INT 102
75055: PUSH
75056: LD_INT 103
75058: PUSH
75059: LD_INT 104
75061: PUSH
75062: LD_INT 105
75064: PUSH
75065: LD_INT 106
75067: PUSH
75068: LD_INT 107
75070: PUSH
75071: LD_INT 108
75073: PUSH
75074: LD_INT 109
75076: PUSH
75077: LD_INT 110
75079: PUSH
75080: LD_INT 111
75082: PUSH
75083: LD_INT 112
75085: PUSH
75086: LD_INT 113
75088: PUSH
75089: LD_INT 114
75091: PUSH
75092: LD_INT 116
75094: PUSH
75095: LD_INT 117
75097: PUSH
75098: LD_INT 118
75100: PUSH
75101: EMPTY
75102: LIST
75103: LIST
75104: LIST
75105: LIST
75106: LIST
75107: LIST
75108: LIST
75109: LIST
75110: LIST
75111: LIST
75112: LIST
75113: LIST
75114: LIST
75115: LIST
75116: LIST
75117: LIST
75118: LIST
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: ST_TO_ADDR
75124: GO 75899
75126: LD_INT 16
75128: DOUBLE
75129: EQUAL
75130: IFTRUE 75134
75132: GO 75270
75134: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
75135: LD_ADDR_VAR 0 2
75139: PUSH
75140: LD_INT 2
75142: PUSH
75143: LD_INT 4
75145: PUSH
75146: LD_INT 5
75148: PUSH
75149: LD_INT 7
75151: PUSH
75152: LD_INT 11
75154: PUSH
75155: LD_INT 12
75157: PUSH
75158: LD_INT 15
75160: PUSH
75161: LD_INT 16
75163: PUSH
75164: LD_INT 20
75166: PUSH
75167: LD_INT 21
75169: PUSH
75170: LD_INT 22
75172: PUSH
75173: LD_INT 23
75175: PUSH
75176: LD_INT 25
75178: PUSH
75179: LD_INT 26
75181: PUSH
75182: LD_INT 30
75184: PUSH
75185: LD_INT 31
75187: PUSH
75188: LD_INT 32
75190: PUSH
75191: LD_INT 33
75193: PUSH
75194: LD_INT 34
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: LIST
75201: LIST
75202: LIST
75203: LIST
75204: LIST
75205: LIST
75206: LIST
75207: LIST
75208: LIST
75209: LIST
75210: LIST
75211: LIST
75212: LIST
75213: LIST
75214: LIST
75215: LIST
75216: LIST
75217: PUSH
75218: LD_INT 101
75220: PUSH
75221: LD_INT 102
75223: PUSH
75224: LD_INT 103
75226: PUSH
75227: LD_INT 106
75229: PUSH
75230: LD_INT 108
75232: PUSH
75233: LD_INT 112
75235: PUSH
75236: LD_INT 113
75238: PUSH
75239: LD_INT 114
75241: PUSH
75242: LD_INT 116
75244: PUSH
75245: LD_INT 117
75247: PUSH
75248: LD_INT 118
75250: PUSH
75251: EMPTY
75252: LIST
75253: LIST
75254: LIST
75255: LIST
75256: LIST
75257: LIST
75258: LIST
75259: LIST
75260: LIST
75261: LIST
75262: LIST
75263: PUSH
75264: EMPTY
75265: LIST
75266: LIST
75267: ST_TO_ADDR
75268: GO 75899
75270: LD_INT 17
75272: DOUBLE
75273: EQUAL
75274: IFTRUE 75278
75276: GO 75502
75278: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
75279: LD_ADDR_VAR 0 2
75283: PUSH
75284: LD_INT 1
75286: PUSH
75287: LD_INT 2
75289: PUSH
75290: LD_INT 3
75292: PUSH
75293: LD_INT 4
75295: PUSH
75296: LD_INT 5
75298: PUSH
75299: LD_INT 6
75301: PUSH
75302: LD_INT 7
75304: PUSH
75305: LD_INT 8
75307: PUSH
75308: LD_INT 9
75310: PUSH
75311: LD_INT 10
75313: PUSH
75314: LD_INT 11
75316: PUSH
75317: LD_INT 12
75319: PUSH
75320: LD_INT 13
75322: PUSH
75323: LD_INT 14
75325: PUSH
75326: LD_INT 15
75328: PUSH
75329: LD_INT 16
75331: PUSH
75332: LD_INT 17
75334: PUSH
75335: LD_INT 18
75337: PUSH
75338: LD_INT 19
75340: PUSH
75341: LD_INT 20
75343: PUSH
75344: LD_INT 21
75346: PUSH
75347: LD_INT 22
75349: PUSH
75350: LD_INT 23
75352: PUSH
75353: LD_INT 24
75355: PUSH
75356: LD_INT 25
75358: PUSH
75359: LD_INT 26
75361: PUSH
75362: LD_INT 27
75364: PUSH
75365: LD_INT 28
75367: PUSH
75368: LD_INT 29
75370: PUSH
75371: LD_INT 30
75373: PUSH
75374: LD_INT 31
75376: PUSH
75377: LD_INT 32
75379: PUSH
75380: LD_INT 33
75382: PUSH
75383: LD_INT 34
75385: PUSH
75386: LD_INT 36
75388: PUSH
75389: EMPTY
75390: LIST
75391: LIST
75392: LIST
75393: LIST
75394: LIST
75395: LIST
75396: LIST
75397: LIST
75398: LIST
75399: LIST
75400: LIST
75401: LIST
75402: LIST
75403: LIST
75404: LIST
75405: LIST
75406: LIST
75407: LIST
75408: LIST
75409: LIST
75410: LIST
75411: LIST
75412: LIST
75413: LIST
75414: LIST
75415: LIST
75416: LIST
75417: LIST
75418: LIST
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: LIST
75424: LIST
75425: PUSH
75426: LD_INT 101
75428: PUSH
75429: LD_INT 102
75431: PUSH
75432: LD_INT 103
75434: PUSH
75435: LD_INT 104
75437: PUSH
75438: LD_INT 105
75440: PUSH
75441: LD_INT 106
75443: PUSH
75444: LD_INT 107
75446: PUSH
75447: LD_INT 108
75449: PUSH
75450: LD_INT 109
75452: PUSH
75453: LD_INT 110
75455: PUSH
75456: LD_INT 111
75458: PUSH
75459: LD_INT 112
75461: PUSH
75462: LD_INT 113
75464: PUSH
75465: LD_INT 114
75467: PUSH
75468: LD_INT 116
75470: PUSH
75471: LD_INT 117
75473: PUSH
75474: LD_INT 118
75476: PUSH
75477: EMPTY
75478: LIST
75479: LIST
75480: LIST
75481: LIST
75482: LIST
75483: LIST
75484: LIST
75485: LIST
75486: LIST
75487: LIST
75488: LIST
75489: LIST
75490: LIST
75491: LIST
75492: LIST
75493: LIST
75494: LIST
75495: PUSH
75496: EMPTY
75497: LIST
75498: LIST
75499: ST_TO_ADDR
75500: GO 75899
75502: LD_INT 18
75504: DOUBLE
75505: EQUAL
75506: IFTRUE 75510
75508: GO 75658
75510: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
75511: LD_ADDR_VAR 0 2
75515: PUSH
75516: LD_INT 2
75518: PUSH
75519: LD_INT 4
75521: PUSH
75522: LD_INT 5
75524: PUSH
75525: LD_INT 7
75527: PUSH
75528: LD_INT 11
75530: PUSH
75531: LD_INT 12
75533: PUSH
75534: LD_INT 15
75536: PUSH
75537: LD_INT 16
75539: PUSH
75540: LD_INT 20
75542: PUSH
75543: LD_INT 21
75545: PUSH
75546: LD_INT 22
75548: PUSH
75549: LD_INT 23
75551: PUSH
75552: LD_INT 25
75554: PUSH
75555: LD_INT 26
75557: PUSH
75558: LD_INT 30
75560: PUSH
75561: LD_INT 31
75563: PUSH
75564: LD_INT 32
75566: PUSH
75567: LD_INT 33
75569: PUSH
75570: LD_INT 34
75572: PUSH
75573: LD_INT 35
75575: PUSH
75576: LD_INT 36
75578: PUSH
75579: EMPTY
75580: LIST
75581: LIST
75582: LIST
75583: LIST
75584: LIST
75585: LIST
75586: LIST
75587: LIST
75588: LIST
75589: LIST
75590: LIST
75591: LIST
75592: LIST
75593: LIST
75594: LIST
75595: LIST
75596: LIST
75597: LIST
75598: LIST
75599: LIST
75600: LIST
75601: PUSH
75602: LD_INT 101
75604: PUSH
75605: LD_INT 102
75607: PUSH
75608: LD_INT 103
75610: PUSH
75611: LD_INT 106
75613: PUSH
75614: LD_INT 108
75616: PUSH
75617: LD_INT 112
75619: PUSH
75620: LD_INT 113
75622: PUSH
75623: LD_INT 114
75625: PUSH
75626: LD_INT 115
75628: PUSH
75629: LD_INT 116
75631: PUSH
75632: LD_INT 117
75634: PUSH
75635: LD_INT 118
75637: PUSH
75638: EMPTY
75639: LIST
75640: LIST
75641: LIST
75642: LIST
75643: LIST
75644: LIST
75645: LIST
75646: LIST
75647: LIST
75648: LIST
75649: LIST
75650: LIST
75651: PUSH
75652: EMPTY
75653: LIST
75654: LIST
75655: ST_TO_ADDR
75656: GO 75899
75658: LD_INT 19
75660: DOUBLE
75661: EQUAL
75662: IFTRUE 75666
75664: GO 75898
75666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
75667: LD_ADDR_VAR 0 2
75671: PUSH
75672: LD_INT 1
75674: PUSH
75675: LD_INT 2
75677: PUSH
75678: LD_INT 3
75680: PUSH
75681: LD_INT 4
75683: PUSH
75684: LD_INT 5
75686: PUSH
75687: LD_INT 6
75689: PUSH
75690: LD_INT 7
75692: PUSH
75693: LD_INT 8
75695: PUSH
75696: LD_INT 9
75698: PUSH
75699: LD_INT 10
75701: PUSH
75702: LD_INT 11
75704: PUSH
75705: LD_INT 12
75707: PUSH
75708: LD_INT 13
75710: PUSH
75711: LD_INT 14
75713: PUSH
75714: LD_INT 15
75716: PUSH
75717: LD_INT 16
75719: PUSH
75720: LD_INT 17
75722: PUSH
75723: LD_INT 18
75725: PUSH
75726: LD_INT 19
75728: PUSH
75729: LD_INT 20
75731: PUSH
75732: LD_INT 21
75734: PUSH
75735: LD_INT 22
75737: PUSH
75738: LD_INT 23
75740: PUSH
75741: LD_INT 24
75743: PUSH
75744: LD_INT 25
75746: PUSH
75747: LD_INT 26
75749: PUSH
75750: LD_INT 27
75752: PUSH
75753: LD_INT 28
75755: PUSH
75756: LD_INT 29
75758: PUSH
75759: LD_INT 30
75761: PUSH
75762: LD_INT 31
75764: PUSH
75765: LD_INT 32
75767: PUSH
75768: LD_INT 33
75770: PUSH
75771: LD_INT 34
75773: PUSH
75774: LD_INT 35
75776: PUSH
75777: LD_INT 36
75779: PUSH
75780: EMPTY
75781: LIST
75782: LIST
75783: LIST
75784: LIST
75785: LIST
75786: LIST
75787: LIST
75788: LIST
75789: LIST
75790: LIST
75791: LIST
75792: LIST
75793: LIST
75794: LIST
75795: LIST
75796: LIST
75797: LIST
75798: LIST
75799: LIST
75800: LIST
75801: LIST
75802: LIST
75803: LIST
75804: LIST
75805: LIST
75806: LIST
75807: LIST
75808: LIST
75809: LIST
75810: LIST
75811: LIST
75812: LIST
75813: LIST
75814: LIST
75815: LIST
75816: LIST
75817: PUSH
75818: LD_INT 101
75820: PUSH
75821: LD_INT 102
75823: PUSH
75824: LD_INT 103
75826: PUSH
75827: LD_INT 104
75829: PUSH
75830: LD_INT 105
75832: PUSH
75833: LD_INT 106
75835: PUSH
75836: LD_INT 107
75838: PUSH
75839: LD_INT 108
75841: PUSH
75842: LD_INT 109
75844: PUSH
75845: LD_INT 110
75847: PUSH
75848: LD_INT 111
75850: PUSH
75851: LD_INT 112
75853: PUSH
75854: LD_INT 113
75856: PUSH
75857: LD_INT 114
75859: PUSH
75860: LD_INT 115
75862: PUSH
75863: LD_INT 116
75865: PUSH
75866: LD_INT 117
75868: PUSH
75869: LD_INT 118
75871: PUSH
75872: EMPTY
75873: LIST
75874: LIST
75875: LIST
75876: LIST
75877: LIST
75878: LIST
75879: LIST
75880: LIST
75881: LIST
75882: LIST
75883: LIST
75884: LIST
75885: LIST
75886: LIST
75887: LIST
75888: LIST
75889: LIST
75890: LIST
75891: PUSH
75892: EMPTY
75893: LIST
75894: LIST
75895: ST_TO_ADDR
75896: GO 75899
75898: POP
// end else
75899: GO 76130
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
75901: LD_ADDR_VAR 0 2
75905: PUSH
75906: LD_INT 1
75908: PUSH
75909: LD_INT 2
75911: PUSH
75912: LD_INT 3
75914: PUSH
75915: LD_INT 4
75917: PUSH
75918: LD_INT 5
75920: PUSH
75921: LD_INT 6
75923: PUSH
75924: LD_INT 7
75926: PUSH
75927: LD_INT 8
75929: PUSH
75930: LD_INT 9
75932: PUSH
75933: LD_INT 10
75935: PUSH
75936: LD_INT 11
75938: PUSH
75939: LD_INT 12
75941: PUSH
75942: LD_INT 13
75944: PUSH
75945: LD_INT 14
75947: PUSH
75948: LD_INT 15
75950: PUSH
75951: LD_INT 16
75953: PUSH
75954: LD_INT 17
75956: PUSH
75957: LD_INT 18
75959: PUSH
75960: LD_INT 19
75962: PUSH
75963: LD_INT 20
75965: PUSH
75966: LD_INT 21
75968: PUSH
75969: LD_INT 22
75971: PUSH
75972: LD_INT 23
75974: PUSH
75975: LD_INT 24
75977: PUSH
75978: LD_INT 25
75980: PUSH
75981: LD_INT 26
75983: PUSH
75984: LD_INT 27
75986: PUSH
75987: LD_INT 28
75989: PUSH
75990: LD_INT 29
75992: PUSH
75993: LD_INT 30
75995: PUSH
75996: LD_INT 31
75998: PUSH
75999: LD_INT 32
76001: PUSH
76002: LD_INT 33
76004: PUSH
76005: LD_INT 34
76007: PUSH
76008: LD_INT 35
76010: PUSH
76011: LD_INT 36
76013: PUSH
76014: EMPTY
76015: LIST
76016: LIST
76017: LIST
76018: LIST
76019: LIST
76020: LIST
76021: LIST
76022: LIST
76023: LIST
76024: LIST
76025: LIST
76026: LIST
76027: LIST
76028: LIST
76029: LIST
76030: LIST
76031: LIST
76032: LIST
76033: LIST
76034: LIST
76035: LIST
76036: LIST
76037: LIST
76038: LIST
76039: LIST
76040: LIST
76041: LIST
76042: LIST
76043: LIST
76044: LIST
76045: LIST
76046: LIST
76047: LIST
76048: LIST
76049: LIST
76050: LIST
76051: PUSH
76052: LD_INT 101
76054: PUSH
76055: LD_INT 102
76057: PUSH
76058: LD_INT 103
76060: PUSH
76061: LD_INT 104
76063: PUSH
76064: LD_INT 105
76066: PUSH
76067: LD_INT 106
76069: PUSH
76070: LD_INT 107
76072: PUSH
76073: LD_INT 108
76075: PUSH
76076: LD_INT 109
76078: PUSH
76079: LD_INT 110
76081: PUSH
76082: LD_INT 111
76084: PUSH
76085: LD_INT 112
76087: PUSH
76088: LD_INT 113
76090: PUSH
76091: LD_INT 114
76093: PUSH
76094: LD_INT 115
76096: PUSH
76097: LD_INT 116
76099: PUSH
76100: LD_INT 117
76102: PUSH
76103: LD_INT 118
76105: PUSH
76106: EMPTY
76107: LIST
76108: LIST
76109: LIST
76110: LIST
76111: LIST
76112: LIST
76113: LIST
76114: LIST
76115: LIST
76116: LIST
76117: LIST
76118: LIST
76119: LIST
76120: LIST
76121: LIST
76122: LIST
76123: LIST
76124: LIST
76125: PUSH
76126: EMPTY
76127: LIST
76128: LIST
76129: ST_TO_ADDR
// if result then
76130: LD_VAR 0 2
76134: IFFALSE 76920
// begin normal :=  ;
76136: LD_ADDR_VAR 0 5
76140: PUSH
76141: LD_STRING 
76143: ST_TO_ADDR
// hardcore :=  ;
76144: LD_ADDR_VAR 0 6
76148: PUSH
76149: LD_STRING 
76151: ST_TO_ADDR
// active :=  ;
76152: LD_ADDR_VAR 0 7
76156: PUSH
76157: LD_STRING 
76159: ST_TO_ADDR
// for i = 1 to normalCounter do
76160: LD_ADDR_VAR 0 8
76164: PUSH
76165: DOUBLE
76166: LD_INT 1
76168: DEC
76169: ST_TO_ADDR
76170: LD_EXP 65
76174: PUSH
76175: FOR_TO
76176: IFFALSE 76277
// begin tmp := 0 ;
76178: LD_ADDR_VAR 0 3
76182: PUSH
76183: LD_STRING 0
76185: ST_TO_ADDR
// if result [ 1 ] then
76186: LD_VAR 0 2
76190: PUSH
76191: LD_INT 1
76193: ARRAY
76194: IFFALSE 76259
// if result [ 1 ] [ 1 ] = i then
76196: LD_VAR 0 2
76200: PUSH
76201: LD_INT 1
76203: ARRAY
76204: PUSH
76205: LD_INT 1
76207: ARRAY
76208: PUSH
76209: LD_VAR 0 8
76213: EQUAL
76214: IFFALSE 76259
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
76216: LD_ADDR_VAR 0 2
76220: PUSH
76221: LD_VAR 0 2
76225: PPUSH
76226: LD_INT 1
76228: PPUSH
76229: LD_VAR 0 2
76233: PUSH
76234: LD_INT 1
76236: ARRAY
76237: PPUSH
76238: LD_INT 1
76240: PPUSH
76241: CALL_OW 3
76245: PPUSH
76246: CALL_OW 1
76250: ST_TO_ADDR
// tmp := 1 ;
76251: LD_ADDR_VAR 0 3
76255: PUSH
76256: LD_STRING 1
76258: ST_TO_ADDR
// end ; normal := normal & tmp ;
76259: LD_ADDR_VAR 0 5
76263: PUSH
76264: LD_VAR 0 5
76268: PUSH
76269: LD_VAR 0 3
76273: STR
76274: ST_TO_ADDR
// end ;
76275: GO 76175
76277: POP
76278: POP
// for i = 1 to hardcoreCounter do
76279: LD_ADDR_VAR 0 8
76283: PUSH
76284: DOUBLE
76285: LD_INT 1
76287: DEC
76288: ST_TO_ADDR
76289: LD_EXP 66
76293: PUSH
76294: FOR_TO
76295: IFFALSE 76400
// begin tmp := 0 ;
76297: LD_ADDR_VAR 0 3
76301: PUSH
76302: LD_STRING 0
76304: ST_TO_ADDR
// if result [ 2 ] then
76305: LD_VAR 0 2
76309: PUSH
76310: LD_INT 2
76312: ARRAY
76313: IFFALSE 76382
// if result [ 2 ] [ 1 ] = 100 + i then
76315: LD_VAR 0 2
76319: PUSH
76320: LD_INT 2
76322: ARRAY
76323: PUSH
76324: LD_INT 1
76326: ARRAY
76327: PUSH
76328: LD_INT 100
76330: PUSH
76331: LD_VAR 0 8
76335: PLUS
76336: EQUAL
76337: IFFALSE 76382
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
76339: LD_ADDR_VAR 0 2
76343: PUSH
76344: LD_VAR 0 2
76348: PPUSH
76349: LD_INT 2
76351: PPUSH
76352: LD_VAR 0 2
76356: PUSH
76357: LD_INT 2
76359: ARRAY
76360: PPUSH
76361: LD_INT 1
76363: PPUSH
76364: CALL_OW 3
76368: PPUSH
76369: CALL_OW 1
76373: ST_TO_ADDR
// tmp := 1 ;
76374: LD_ADDR_VAR 0 3
76378: PUSH
76379: LD_STRING 1
76381: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
76382: LD_ADDR_VAR 0 6
76386: PUSH
76387: LD_VAR 0 6
76391: PUSH
76392: LD_VAR 0 3
76396: STR
76397: ST_TO_ADDR
// end ;
76398: GO 76294
76400: POP
76401: POP
// if isGameLoad then
76402: LD_VAR 0 1
76406: IFFALSE 76881
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
76408: LD_ADDR_VAR 0 4
76412: PUSH
76413: LD_EXP 69
76417: PUSH
76418: LD_EXP 68
76422: PUSH
76423: LD_EXP 70
76427: PUSH
76428: LD_EXP 67
76432: PUSH
76433: LD_EXP 71
76437: PUSH
76438: LD_EXP 72
76442: PUSH
76443: LD_EXP 73
76447: PUSH
76448: LD_EXP 74
76452: PUSH
76453: LD_EXP 75
76457: PUSH
76458: LD_EXP 76
76462: PUSH
76463: LD_EXP 77
76467: PUSH
76468: LD_EXP 78
76472: PUSH
76473: LD_EXP 79
76477: PUSH
76478: LD_EXP 80
76482: PUSH
76483: LD_EXP 88
76487: PUSH
76488: LD_EXP 89
76492: PUSH
76493: LD_EXP 90
76497: PUSH
76498: LD_EXP 91
76502: PUSH
76503: LD_EXP 93
76507: PUSH
76508: LD_EXP 94
76512: PUSH
76513: LD_EXP 95
76517: PUSH
76518: LD_EXP 98
76522: PUSH
76523: LD_EXP 100
76527: PUSH
76528: LD_EXP 101
76532: PUSH
76533: LD_EXP 102
76537: PUSH
76538: LD_EXP 104
76542: PUSH
76543: LD_EXP 105
76547: PUSH
76548: LD_EXP 108
76552: PUSH
76553: LD_EXP 109
76557: PUSH
76558: LD_EXP 110
76562: PUSH
76563: LD_EXP 111
76567: PUSH
76568: LD_EXP 112
76572: PUSH
76573: LD_EXP 113
76577: PUSH
76578: LD_EXP 114
76582: PUSH
76583: LD_EXP 115
76587: PUSH
76588: LD_EXP 116
76592: PUSH
76593: LD_EXP 81
76597: PUSH
76598: LD_EXP 82
76602: PUSH
76603: LD_EXP 85
76607: PUSH
76608: LD_EXP 86
76612: PUSH
76613: LD_EXP 87
76617: PUSH
76618: LD_EXP 83
76622: PUSH
76623: LD_EXP 84
76627: PUSH
76628: LD_EXP 92
76632: PUSH
76633: LD_EXP 96
76637: PUSH
76638: LD_EXP 97
76642: PUSH
76643: LD_EXP 99
76647: PUSH
76648: LD_EXP 103
76652: PUSH
76653: LD_EXP 106
76657: PUSH
76658: LD_EXP 107
76662: PUSH
76663: LD_EXP 117
76667: PUSH
76668: LD_EXP 118
76672: PUSH
76673: LD_EXP 119
76677: PUSH
76678: LD_EXP 120
76682: PUSH
76683: EMPTY
76684: LIST
76685: LIST
76686: LIST
76687: LIST
76688: LIST
76689: LIST
76690: LIST
76691: LIST
76692: LIST
76693: LIST
76694: LIST
76695: LIST
76696: LIST
76697: LIST
76698: LIST
76699: LIST
76700: LIST
76701: LIST
76702: LIST
76703: LIST
76704: LIST
76705: LIST
76706: LIST
76707: LIST
76708: LIST
76709: LIST
76710: LIST
76711: LIST
76712: LIST
76713: LIST
76714: LIST
76715: LIST
76716: LIST
76717: LIST
76718: LIST
76719: LIST
76720: LIST
76721: LIST
76722: LIST
76723: LIST
76724: LIST
76725: LIST
76726: LIST
76727: LIST
76728: LIST
76729: LIST
76730: LIST
76731: LIST
76732: LIST
76733: LIST
76734: LIST
76735: LIST
76736: LIST
76737: LIST
76738: ST_TO_ADDR
// tmp :=  ;
76739: LD_ADDR_VAR 0 3
76743: PUSH
76744: LD_STRING 
76746: ST_TO_ADDR
// for i = 1 to normalCounter do
76747: LD_ADDR_VAR 0 8
76751: PUSH
76752: DOUBLE
76753: LD_INT 1
76755: DEC
76756: ST_TO_ADDR
76757: LD_EXP 65
76761: PUSH
76762: FOR_TO
76763: IFFALSE 76799
// begin if flags [ i ] then
76765: LD_VAR 0 4
76769: PUSH
76770: LD_VAR 0 8
76774: ARRAY
76775: IFFALSE 76797
// tmp := tmp & i & ; ;
76777: LD_ADDR_VAR 0 3
76781: PUSH
76782: LD_VAR 0 3
76786: PUSH
76787: LD_VAR 0 8
76791: STR
76792: PUSH
76793: LD_STRING ;
76795: STR
76796: ST_TO_ADDR
// end ;
76797: GO 76762
76799: POP
76800: POP
// for i = 1 to hardcoreCounter do
76801: LD_ADDR_VAR 0 8
76805: PUSH
76806: DOUBLE
76807: LD_INT 1
76809: DEC
76810: ST_TO_ADDR
76811: LD_EXP 66
76815: PUSH
76816: FOR_TO
76817: IFFALSE 76863
// begin if flags [ normalCounter + i ] then
76819: LD_VAR 0 4
76823: PUSH
76824: LD_EXP 65
76828: PUSH
76829: LD_VAR 0 8
76833: PLUS
76834: ARRAY
76835: IFFALSE 76861
// tmp := tmp & ( 100 + i ) & ; ;
76837: LD_ADDR_VAR 0 3
76841: PUSH
76842: LD_VAR 0 3
76846: PUSH
76847: LD_INT 100
76849: PUSH
76850: LD_VAR 0 8
76854: PLUS
76855: STR
76856: PUSH
76857: LD_STRING ;
76859: STR
76860: ST_TO_ADDR
// end ;
76861: GO 76816
76863: POP
76864: POP
// if tmp then
76865: LD_VAR 0 3
76869: IFFALSE 76881
// active := tmp ;
76871: LD_ADDR_VAR 0 7
76875: PUSH
76876: LD_VAR 0 3
76880: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
76881: LD_STRING getStreamItemsFromMission("
76883: PUSH
76884: LD_VAR 0 5
76888: STR
76889: PUSH
76890: LD_STRING ","
76892: STR
76893: PUSH
76894: LD_VAR 0 6
76898: STR
76899: PUSH
76900: LD_STRING ","
76902: STR
76903: PUSH
76904: LD_VAR 0 7
76908: STR
76909: PUSH
76910: LD_STRING ")
76912: STR
76913: PPUSH
76914: CALL_OW 559
// end else
76918: GO 76927
// ToLua ( getStreamItemsFromMission("","","") ) ;
76920: LD_STRING getStreamItemsFromMission("","","")
76922: PPUSH
76923: CALL_OW 559
// end ;
76927: LD_VAR 0 2
76931: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
76932: LD_EXP 64
76936: PUSH
76937: LD_EXP 69
76941: AND
76942: IFFALSE 77066
76944: GO 76946
76946: DISABLE
76947: LD_INT 0
76949: PPUSH
76950: PPUSH
// begin enable ;
76951: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
76952: LD_ADDR_VAR 0 2
76956: PUSH
76957: LD_INT 22
76959: PUSH
76960: LD_OWVAR 2
76964: PUSH
76965: EMPTY
76966: LIST
76967: LIST
76968: PUSH
76969: LD_INT 2
76971: PUSH
76972: LD_INT 34
76974: PUSH
76975: LD_INT 7
76977: PUSH
76978: EMPTY
76979: LIST
76980: LIST
76981: PUSH
76982: LD_INT 34
76984: PUSH
76985: LD_INT 45
76987: PUSH
76988: EMPTY
76989: LIST
76990: LIST
76991: PUSH
76992: LD_INT 34
76994: PUSH
76995: LD_INT 28
76997: PUSH
76998: EMPTY
76999: LIST
77000: LIST
77001: PUSH
77002: LD_INT 34
77004: PUSH
77005: LD_INT 47
77007: PUSH
77008: EMPTY
77009: LIST
77010: LIST
77011: PUSH
77012: EMPTY
77013: LIST
77014: LIST
77015: LIST
77016: LIST
77017: LIST
77018: PUSH
77019: EMPTY
77020: LIST
77021: LIST
77022: PPUSH
77023: CALL_OW 69
77027: ST_TO_ADDR
// if not tmp then
77028: LD_VAR 0 2
77032: NOT
77033: IFFALSE 77037
// exit ;
77035: GO 77066
// for i in tmp do
77037: LD_ADDR_VAR 0 1
77041: PUSH
77042: LD_VAR 0 2
77046: PUSH
77047: FOR_IN
77048: IFFALSE 77064
// begin SetLives ( i , 0 ) ;
77050: LD_VAR 0 1
77054: PPUSH
77055: LD_INT 0
77057: PPUSH
77058: CALL_OW 234
// end ;
77062: GO 77047
77064: POP
77065: POP
// end ;
77066: PPOPN 2
77068: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
77069: LD_EXP 64
77073: PUSH
77074: LD_EXP 70
77078: AND
77079: IFFALSE 77163
77081: GO 77083
77083: DISABLE
77084: LD_INT 0
77086: PPUSH
77087: PPUSH
// begin enable ;
77088: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
77089: LD_ADDR_VAR 0 2
77093: PUSH
77094: LD_INT 22
77096: PUSH
77097: LD_OWVAR 2
77101: PUSH
77102: EMPTY
77103: LIST
77104: LIST
77105: PUSH
77106: LD_INT 32
77108: PUSH
77109: LD_INT 3
77111: PUSH
77112: EMPTY
77113: LIST
77114: LIST
77115: PUSH
77116: EMPTY
77117: LIST
77118: LIST
77119: PPUSH
77120: CALL_OW 69
77124: ST_TO_ADDR
// if not tmp then
77125: LD_VAR 0 2
77129: NOT
77130: IFFALSE 77134
// exit ;
77132: GO 77163
// for i in tmp do
77134: LD_ADDR_VAR 0 1
77138: PUSH
77139: LD_VAR 0 2
77143: PUSH
77144: FOR_IN
77145: IFFALSE 77161
// begin SetLives ( i , 0 ) ;
77147: LD_VAR 0 1
77151: PPUSH
77152: LD_INT 0
77154: PPUSH
77155: CALL_OW 234
// end ;
77159: GO 77144
77161: POP
77162: POP
// end ;
77163: PPOPN 2
77165: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
77166: LD_EXP 64
77170: PUSH
77171: LD_EXP 67
77175: AND
77176: IFFALSE 77269
77178: GO 77180
77180: DISABLE
77181: LD_INT 0
77183: PPUSH
// begin enable ;
77184: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
77185: LD_ADDR_VAR 0 1
77189: PUSH
77190: LD_INT 22
77192: PUSH
77193: LD_OWVAR 2
77197: PUSH
77198: EMPTY
77199: LIST
77200: LIST
77201: PUSH
77202: LD_INT 2
77204: PUSH
77205: LD_INT 25
77207: PUSH
77208: LD_INT 5
77210: PUSH
77211: EMPTY
77212: LIST
77213: LIST
77214: PUSH
77215: LD_INT 25
77217: PUSH
77218: LD_INT 9
77220: PUSH
77221: EMPTY
77222: LIST
77223: LIST
77224: PUSH
77225: LD_INT 25
77227: PUSH
77228: LD_INT 8
77230: PUSH
77231: EMPTY
77232: LIST
77233: LIST
77234: PUSH
77235: EMPTY
77236: LIST
77237: LIST
77238: LIST
77239: LIST
77240: PUSH
77241: EMPTY
77242: LIST
77243: LIST
77244: PPUSH
77245: CALL_OW 69
77249: PUSH
77250: FOR_IN
77251: IFFALSE 77267
// begin SetClass ( i , 1 ) ;
77253: LD_VAR 0 1
77257: PPUSH
77258: LD_INT 1
77260: PPUSH
77261: CALL_OW 336
// end ;
77265: GO 77250
77267: POP
77268: POP
// end ;
77269: PPOPN 1
77271: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
77272: LD_EXP 64
77276: PUSH
77277: LD_EXP 68
77281: AND
77282: PUSH
77283: LD_OWVAR 65
77287: PUSH
77288: LD_INT 7
77290: LESS
77291: AND
77292: IFFALSE 77306
77294: GO 77296
77296: DISABLE
// begin enable ;
77297: ENABLE
// game_speed := 7 ;
77298: LD_ADDR_OWVAR 65
77302: PUSH
77303: LD_INT 7
77305: ST_TO_ADDR
// end ;
77306: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
77307: LD_EXP 64
77311: PUSH
77312: LD_EXP 71
77316: AND
77317: IFFALSE 77519
77319: GO 77321
77321: DISABLE
77322: LD_INT 0
77324: PPUSH
77325: PPUSH
77326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
77327: LD_ADDR_VAR 0 3
77331: PUSH
77332: LD_INT 81
77334: PUSH
77335: LD_OWVAR 2
77339: PUSH
77340: EMPTY
77341: LIST
77342: LIST
77343: PUSH
77344: LD_INT 21
77346: PUSH
77347: LD_INT 1
77349: PUSH
77350: EMPTY
77351: LIST
77352: LIST
77353: PUSH
77354: EMPTY
77355: LIST
77356: LIST
77357: PPUSH
77358: CALL_OW 69
77362: ST_TO_ADDR
// if not tmp then
77363: LD_VAR 0 3
77367: NOT
77368: IFFALSE 77372
// exit ;
77370: GO 77519
// if tmp > 5 then
77372: LD_VAR 0 3
77376: PUSH
77377: LD_INT 5
77379: GREATER
77380: IFFALSE 77392
// k := 5 else
77382: LD_ADDR_VAR 0 2
77386: PUSH
77387: LD_INT 5
77389: ST_TO_ADDR
77390: GO 77402
// k := tmp ;
77392: LD_ADDR_VAR 0 2
77396: PUSH
77397: LD_VAR 0 3
77401: ST_TO_ADDR
// for i := 1 to k do
77402: LD_ADDR_VAR 0 1
77406: PUSH
77407: DOUBLE
77408: LD_INT 1
77410: DEC
77411: ST_TO_ADDR
77412: LD_VAR 0 2
77416: PUSH
77417: FOR_TO
77418: IFFALSE 77517
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
77420: LD_VAR 0 3
77424: PUSH
77425: LD_VAR 0 1
77429: ARRAY
77430: PPUSH
77431: LD_VAR 0 1
77435: PUSH
77436: LD_INT 4
77438: MOD
77439: PUSH
77440: LD_INT 1
77442: PLUS
77443: PPUSH
77444: CALL_OW 259
77448: PUSH
77449: LD_INT 10
77451: LESS
77452: IFFALSE 77515
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
77454: LD_VAR 0 3
77458: PUSH
77459: LD_VAR 0 1
77463: ARRAY
77464: PPUSH
77465: LD_VAR 0 1
77469: PUSH
77470: LD_INT 4
77472: MOD
77473: PUSH
77474: LD_INT 1
77476: PLUS
77477: PPUSH
77478: LD_VAR 0 3
77482: PUSH
77483: LD_VAR 0 1
77487: ARRAY
77488: PPUSH
77489: LD_VAR 0 1
77493: PUSH
77494: LD_INT 4
77496: MOD
77497: PUSH
77498: LD_INT 1
77500: PLUS
77501: PPUSH
77502: CALL_OW 259
77506: PUSH
77507: LD_INT 1
77509: PLUS
77510: PPUSH
77511: CALL_OW 237
77515: GO 77417
77517: POP
77518: POP
// end ;
77519: PPOPN 3
77521: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
77522: LD_EXP 64
77526: PUSH
77527: LD_EXP 72
77531: AND
77532: IFFALSE 77552
77534: GO 77536
77536: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
77537: LD_INT 4
77539: PPUSH
77540: LD_OWVAR 2
77544: PPUSH
77545: LD_INT 0
77547: PPUSH
77548: CALL_OW 324
77552: END
// every 0 0$1 trigger StreamModeActive and sShovel do
77553: LD_EXP 64
77557: PUSH
77558: LD_EXP 101
77562: AND
77563: IFFALSE 77583
77565: GO 77567
77567: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
77568: LD_INT 19
77570: PPUSH
77571: LD_OWVAR 2
77575: PPUSH
77576: LD_INT 0
77578: PPUSH
77579: CALL_OW 324
77583: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
77584: LD_EXP 64
77588: PUSH
77589: LD_EXP 73
77593: AND
77594: IFFALSE 77696
77596: GO 77598
77598: DISABLE
77599: LD_INT 0
77601: PPUSH
77602: PPUSH
// begin enable ;
77603: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
77604: LD_ADDR_VAR 0 2
77608: PUSH
77609: LD_INT 22
77611: PUSH
77612: LD_OWVAR 2
77616: PUSH
77617: EMPTY
77618: LIST
77619: LIST
77620: PUSH
77621: LD_INT 2
77623: PUSH
77624: LD_INT 34
77626: PUSH
77627: LD_INT 11
77629: PUSH
77630: EMPTY
77631: LIST
77632: LIST
77633: PUSH
77634: LD_INT 34
77636: PUSH
77637: LD_INT 30
77639: PUSH
77640: EMPTY
77641: LIST
77642: LIST
77643: PUSH
77644: EMPTY
77645: LIST
77646: LIST
77647: LIST
77648: PUSH
77649: EMPTY
77650: LIST
77651: LIST
77652: PPUSH
77653: CALL_OW 69
77657: ST_TO_ADDR
// if not tmp then
77658: LD_VAR 0 2
77662: NOT
77663: IFFALSE 77667
// exit ;
77665: GO 77696
// for i in tmp do
77667: LD_ADDR_VAR 0 1
77671: PUSH
77672: LD_VAR 0 2
77676: PUSH
77677: FOR_IN
77678: IFFALSE 77694
// begin SetLives ( i , 0 ) ;
77680: LD_VAR 0 1
77684: PPUSH
77685: LD_INT 0
77687: PPUSH
77688: CALL_OW 234
// end ;
77692: GO 77677
77694: POP
77695: POP
// end ;
77696: PPOPN 2
77698: END
// every 0 0$1 trigger StreamModeActive and sBunker do
77699: LD_EXP 64
77703: PUSH
77704: LD_EXP 74
77708: AND
77709: IFFALSE 77729
77711: GO 77713
77713: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
77714: LD_INT 32
77716: PPUSH
77717: LD_OWVAR 2
77721: PPUSH
77722: LD_INT 0
77724: PPUSH
77725: CALL_OW 324
77729: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
77730: LD_EXP 64
77734: PUSH
77735: LD_EXP 75
77739: AND
77740: IFFALSE 77921
77742: GO 77744
77744: DISABLE
77745: LD_INT 0
77747: PPUSH
77748: PPUSH
77749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
77750: LD_ADDR_VAR 0 2
77754: PUSH
77755: LD_INT 22
77757: PUSH
77758: LD_OWVAR 2
77762: PUSH
77763: EMPTY
77764: LIST
77765: LIST
77766: PUSH
77767: LD_INT 33
77769: PUSH
77770: LD_INT 3
77772: PUSH
77773: EMPTY
77774: LIST
77775: LIST
77776: PUSH
77777: EMPTY
77778: LIST
77779: LIST
77780: PPUSH
77781: CALL_OW 69
77785: ST_TO_ADDR
// if not tmp then
77786: LD_VAR 0 2
77790: NOT
77791: IFFALSE 77795
// exit ;
77793: GO 77921
// side := 0 ;
77795: LD_ADDR_VAR 0 3
77799: PUSH
77800: LD_INT 0
77802: ST_TO_ADDR
// for i := 1 to 8 do
77803: LD_ADDR_VAR 0 1
77807: PUSH
77808: DOUBLE
77809: LD_INT 1
77811: DEC
77812: ST_TO_ADDR
77813: LD_INT 8
77815: PUSH
77816: FOR_TO
77817: IFFALSE 77865
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
77819: LD_OWVAR 2
77823: PUSH
77824: LD_VAR 0 1
77828: NONEQUAL
77829: PUSH
77830: LD_OWVAR 2
77834: PPUSH
77835: LD_VAR 0 1
77839: PPUSH
77840: CALL_OW 81
77844: PUSH
77845: LD_INT 2
77847: EQUAL
77848: AND
77849: IFFALSE 77863
// begin side := i ;
77851: LD_ADDR_VAR 0 3
77855: PUSH
77856: LD_VAR 0 1
77860: ST_TO_ADDR
// break ;
77861: GO 77865
// end ;
77863: GO 77816
77865: POP
77866: POP
// if not side then
77867: LD_VAR 0 3
77871: NOT
77872: IFFALSE 77876
// exit ;
77874: GO 77921
// for i := 1 to tmp do
77876: LD_ADDR_VAR 0 1
77880: PUSH
77881: DOUBLE
77882: LD_INT 1
77884: DEC
77885: ST_TO_ADDR
77886: LD_VAR 0 2
77890: PUSH
77891: FOR_TO
77892: IFFALSE 77919
// if Prob ( 60 ) then
77894: LD_INT 60
77896: PPUSH
77897: CALL_OW 13
77901: IFFALSE 77917
// SetSide ( i , side ) ;
77903: LD_VAR 0 1
77907: PPUSH
77908: LD_VAR 0 3
77912: PPUSH
77913: CALL_OW 235
77917: GO 77891
77919: POP
77920: POP
// end ;
77921: PPOPN 3
77923: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
77924: LD_EXP 64
77928: PUSH
77929: LD_EXP 77
77933: AND
77934: IFFALSE 78053
77936: GO 77938
77938: DISABLE
77939: LD_INT 0
77941: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
77942: LD_ADDR_VAR 0 1
77946: PUSH
77947: LD_INT 22
77949: PUSH
77950: LD_OWVAR 2
77954: PUSH
77955: EMPTY
77956: LIST
77957: LIST
77958: PUSH
77959: LD_INT 21
77961: PUSH
77962: LD_INT 1
77964: PUSH
77965: EMPTY
77966: LIST
77967: LIST
77968: PUSH
77969: LD_INT 3
77971: PUSH
77972: LD_INT 23
77974: PUSH
77975: LD_INT 0
77977: PUSH
77978: EMPTY
77979: LIST
77980: LIST
77981: PUSH
77982: EMPTY
77983: LIST
77984: LIST
77985: PUSH
77986: EMPTY
77987: LIST
77988: LIST
77989: LIST
77990: PPUSH
77991: CALL_OW 69
77995: PUSH
77996: FOR_IN
77997: IFFALSE 78051
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
77999: LD_VAR 0 1
78003: PPUSH
78004: CALL_OW 257
78008: PUSH
78009: LD_INT 1
78011: PUSH
78012: LD_INT 2
78014: PUSH
78015: LD_INT 3
78017: PUSH
78018: LD_INT 4
78020: PUSH
78021: EMPTY
78022: LIST
78023: LIST
78024: LIST
78025: LIST
78026: IN
78027: IFFALSE 78049
// SetClass ( un , rand ( 1 , 4 ) ) ;
78029: LD_VAR 0 1
78033: PPUSH
78034: LD_INT 1
78036: PPUSH
78037: LD_INT 4
78039: PPUSH
78040: CALL_OW 12
78044: PPUSH
78045: CALL_OW 336
78049: GO 77996
78051: POP
78052: POP
// end ;
78053: PPOPN 1
78055: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
78056: LD_EXP 64
78060: PUSH
78061: LD_EXP 76
78065: AND
78066: IFFALSE 78145
78068: GO 78070
78070: DISABLE
78071: LD_INT 0
78073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78074: LD_ADDR_VAR 0 1
78078: PUSH
78079: LD_INT 22
78081: PUSH
78082: LD_OWVAR 2
78086: PUSH
78087: EMPTY
78088: LIST
78089: LIST
78090: PUSH
78091: LD_INT 21
78093: PUSH
78094: LD_INT 3
78096: PUSH
78097: EMPTY
78098: LIST
78099: LIST
78100: PUSH
78101: EMPTY
78102: LIST
78103: LIST
78104: PPUSH
78105: CALL_OW 69
78109: ST_TO_ADDR
// if not tmp then
78110: LD_VAR 0 1
78114: NOT
78115: IFFALSE 78119
// exit ;
78117: GO 78145
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
78119: LD_VAR 0 1
78123: PUSH
78124: LD_INT 1
78126: PPUSH
78127: LD_VAR 0 1
78131: PPUSH
78132: CALL_OW 12
78136: ARRAY
78137: PPUSH
78138: LD_INT 100
78140: PPUSH
78141: CALL_OW 234
// end ;
78145: PPOPN 1
78147: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
78148: LD_EXP 64
78152: PUSH
78153: LD_EXP 78
78157: AND
78158: IFFALSE 78256
78160: GO 78162
78162: DISABLE
78163: LD_INT 0
78165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
78166: LD_ADDR_VAR 0 1
78170: PUSH
78171: LD_INT 22
78173: PUSH
78174: LD_OWVAR 2
78178: PUSH
78179: EMPTY
78180: LIST
78181: LIST
78182: PUSH
78183: LD_INT 21
78185: PUSH
78186: LD_INT 1
78188: PUSH
78189: EMPTY
78190: LIST
78191: LIST
78192: PUSH
78193: EMPTY
78194: LIST
78195: LIST
78196: PPUSH
78197: CALL_OW 69
78201: ST_TO_ADDR
// if not tmp then
78202: LD_VAR 0 1
78206: NOT
78207: IFFALSE 78211
// exit ;
78209: GO 78256
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
78211: LD_VAR 0 1
78215: PUSH
78216: LD_INT 1
78218: PPUSH
78219: LD_VAR 0 1
78223: PPUSH
78224: CALL_OW 12
78228: ARRAY
78229: PPUSH
78230: LD_INT 1
78232: PPUSH
78233: LD_INT 4
78235: PPUSH
78236: CALL_OW 12
78240: PPUSH
78241: LD_INT 3000
78243: PPUSH
78244: LD_INT 9000
78246: PPUSH
78247: CALL_OW 12
78251: PPUSH
78252: CALL_OW 492
// end ;
78256: PPOPN 1
78258: END
// every 0 0$1 trigger StreamModeActive and sDepot do
78259: LD_EXP 64
78263: PUSH
78264: LD_EXP 79
78268: AND
78269: IFFALSE 78289
78271: GO 78273
78273: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
78274: LD_INT 1
78276: PPUSH
78277: LD_OWVAR 2
78281: PPUSH
78282: LD_INT 0
78284: PPUSH
78285: CALL_OW 324
78289: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
78290: LD_EXP 64
78294: PUSH
78295: LD_EXP 80
78299: AND
78300: IFFALSE 78383
78302: GO 78304
78304: DISABLE
78305: LD_INT 0
78307: PPUSH
78308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78309: LD_ADDR_VAR 0 2
78313: PUSH
78314: LD_INT 22
78316: PUSH
78317: LD_OWVAR 2
78321: PUSH
78322: EMPTY
78323: LIST
78324: LIST
78325: PUSH
78326: LD_INT 21
78328: PUSH
78329: LD_INT 3
78331: PUSH
78332: EMPTY
78333: LIST
78334: LIST
78335: PUSH
78336: EMPTY
78337: LIST
78338: LIST
78339: PPUSH
78340: CALL_OW 69
78344: ST_TO_ADDR
// if not tmp then
78345: LD_VAR 0 2
78349: NOT
78350: IFFALSE 78354
// exit ;
78352: GO 78383
// for i in tmp do
78354: LD_ADDR_VAR 0 1
78358: PUSH
78359: LD_VAR 0 2
78363: PUSH
78364: FOR_IN
78365: IFFALSE 78381
// SetBLevel ( i , 10 ) ;
78367: LD_VAR 0 1
78371: PPUSH
78372: LD_INT 10
78374: PPUSH
78375: CALL_OW 241
78379: GO 78364
78381: POP
78382: POP
// end ;
78383: PPOPN 2
78385: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
78386: LD_EXP 64
78390: PUSH
78391: LD_EXP 81
78395: AND
78396: IFFALSE 78507
78398: GO 78400
78400: DISABLE
78401: LD_INT 0
78403: PPUSH
78404: PPUSH
78405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78406: LD_ADDR_VAR 0 3
78410: PUSH
78411: LD_INT 22
78413: PUSH
78414: LD_OWVAR 2
78418: PUSH
78419: EMPTY
78420: LIST
78421: LIST
78422: PUSH
78423: LD_INT 25
78425: PUSH
78426: LD_INT 1
78428: PUSH
78429: EMPTY
78430: LIST
78431: LIST
78432: PUSH
78433: EMPTY
78434: LIST
78435: LIST
78436: PPUSH
78437: CALL_OW 69
78441: ST_TO_ADDR
// if not tmp then
78442: LD_VAR 0 3
78446: NOT
78447: IFFALSE 78451
// exit ;
78449: GO 78507
// un := tmp [ rand ( 1 , tmp ) ] ;
78451: LD_ADDR_VAR 0 2
78455: PUSH
78456: LD_VAR 0 3
78460: PUSH
78461: LD_INT 1
78463: PPUSH
78464: LD_VAR 0 3
78468: PPUSH
78469: CALL_OW 12
78473: ARRAY
78474: ST_TO_ADDR
// if Crawls ( un ) then
78475: LD_VAR 0 2
78479: PPUSH
78480: CALL_OW 318
78484: IFFALSE 78495
// ComWalk ( un ) ;
78486: LD_VAR 0 2
78490: PPUSH
78491: CALL_OW 138
// SetClass ( un , class_sniper ) ;
78495: LD_VAR 0 2
78499: PPUSH
78500: LD_INT 5
78502: PPUSH
78503: CALL_OW 336
// end ;
78507: PPOPN 3
78509: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
78510: LD_EXP 64
78514: PUSH
78515: LD_EXP 82
78519: AND
78520: PUSH
78521: LD_OWVAR 67
78525: PUSH
78526: LD_INT 4
78528: LESS
78529: AND
78530: IFFALSE 78549
78532: GO 78534
78534: DISABLE
// begin Difficulty := Difficulty + 1 ;
78535: LD_ADDR_OWVAR 67
78539: PUSH
78540: LD_OWVAR 67
78544: PUSH
78545: LD_INT 1
78547: PLUS
78548: ST_TO_ADDR
// end ;
78549: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
78550: LD_EXP 64
78554: PUSH
78555: LD_EXP 83
78559: AND
78560: IFFALSE 78663
78562: GO 78564
78564: DISABLE
78565: LD_INT 0
78567: PPUSH
// begin for i := 1 to 5 do
78568: LD_ADDR_VAR 0 1
78572: PUSH
78573: DOUBLE
78574: LD_INT 1
78576: DEC
78577: ST_TO_ADDR
78578: LD_INT 5
78580: PUSH
78581: FOR_TO
78582: IFFALSE 78661
// begin uc_nation := nation_nature ;
78584: LD_ADDR_OWVAR 21
78588: PUSH
78589: LD_INT 0
78591: ST_TO_ADDR
// uc_side := 0 ;
78592: LD_ADDR_OWVAR 20
78596: PUSH
78597: LD_INT 0
78599: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78600: LD_ADDR_OWVAR 29
78604: PUSH
78605: LD_INT 12
78607: PUSH
78608: LD_INT 12
78610: PUSH
78611: EMPTY
78612: LIST
78613: LIST
78614: ST_TO_ADDR
// hc_agressivity := 20 ;
78615: LD_ADDR_OWVAR 35
78619: PUSH
78620: LD_INT 20
78622: ST_TO_ADDR
// hc_class := class_tiger ;
78623: LD_ADDR_OWVAR 28
78627: PUSH
78628: LD_INT 14
78630: ST_TO_ADDR
// hc_gallery :=  ;
78631: LD_ADDR_OWVAR 33
78635: PUSH
78636: LD_STRING 
78638: ST_TO_ADDR
// hc_name :=  ;
78639: LD_ADDR_OWVAR 26
78643: PUSH
78644: LD_STRING 
78646: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
78647: CALL_OW 44
78651: PPUSH
78652: LD_INT 0
78654: PPUSH
78655: CALL_OW 51
// end ;
78659: GO 78581
78661: POP
78662: POP
// end ;
78663: PPOPN 1
78665: END
// every 0 0$1 trigger StreamModeActive and sBomb do
78666: LD_EXP 64
78670: PUSH
78671: LD_EXP 84
78675: AND
78676: IFFALSE 78685
78678: GO 78680
78680: DISABLE
// StreamSibBomb ;
78681: CALL 78686 0 0
78685: END
// export function StreamSibBomb ; var i , x , y ; begin
78686: LD_INT 0
78688: PPUSH
78689: PPUSH
78690: PPUSH
78691: PPUSH
// result := false ;
78692: LD_ADDR_VAR 0 1
78696: PUSH
78697: LD_INT 0
78699: ST_TO_ADDR
// for i := 1 to 16 do
78700: LD_ADDR_VAR 0 2
78704: PUSH
78705: DOUBLE
78706: LD_INT 1
78708: DEC
78709: ST_TO_ADDR
78710: LD_INT 16
78712: PUSH
78713: FOR_TO
78714: IFFALSE 78913
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78716: LD_ADDR_VAR 0 3
78720: PUSH
78721: LD_INT 10
78723: PUSH
78724: LD_INT 20
78726: PUSH
78727: LD_INT 30
78729: PUSH
78730: LD_INT 40
78732: PUSH
78733: LD_INT 50
78735: PUSH
78736: LD_INT 60
78738: PUSH
78739: LD_INT 70
78741: PUSH
78742: LD_INT 80
78744: PUSH
78745: LD_INT 90
78747: PUSH
78748: LD_INT 100
78750: PUSH
78751: LD_INT 110
78753: PUSH
78754: LD_INT 120
78756: PUSH
78757: LD_INT 130
78759: PUSH
78760: LD_INT 140
78762: PUSH
78763: LD_INT 150
78765: PUSH
78766: EMPTY
78767: LIST
78768: LIST
78769: LIST
78770: LIST
78771: LIST
78772: LIST
78773: LIST
78774: LIST
78775: LIST
78776: LIST
78777: LIST
78778: LIST
78779: LIST
78780: LIST
78781: LIST
78782: PUSH
78783: LD_INT 1
78785: PPUSH
78786: LD_INT 15
78788: PPUSH
78789: CALL_OW 12
78793: ARRAY
78794: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78795: LD_ADDR_VAR 0 4
78799: PUSH
78800: LD_INT 10
78802: PUSH
78803: LD_INT 20
78805: PUSH
78806: LD_INT 30
78808: PUSH
78809: LD_INT 40
78811: PUSH
78812: LD_INT 50
78814: PUSH
78815: LD_INT 60
78817: PUSH
78818: LD_INT 70
78820: PUSH
78821: LD_INT 80
78823: PUSH
78824: LD_INT 90
78826: PUSH
78827: LD_INT 100
78829: PUSH
78830: LD_INT 110
78832: PUSH
78833: LD_INT 120
78835: PUSH
78836: LD_INT 130
78838: PUSH
78839: LD_INT 140
78841: PUSH
78842: LD_INT 150
78844: PUSH
78845: EMPTY
78846: LIST
78847: LIST
78848: LIST
78849: LIST
78850: LIST
78851: LIST
78852: LIST
78853: LIST
78854: LIST
78855: LIST
78856: LIST
78857: LIST
78858: LIST
78859: LIST
78860: LIST
78861: PUSH
78862: LD_INT 1
78864: PPUSH
78865: LD_INT 15
78867: PPUSH
78868: CALL_OW 12
78872: ARRAY
78873: ST_TO_ADDR
// if ValidHex ( x , y ) then
78874: LD_VAR 0 3
78878: PPUSH
78879: LD_VAR 0 4
78883: PPUSH
78884: CALL_OW 488
78888: IFFALSE 78911
// begin result := [ x , y ] ;
78890: LD_ADDR_VAR 0 1
78894: PUSH
78895: LD_VAR 0 3
78899: PUSH
78900: LD_VAR 0 4
78904: PUSH
78905: EMPTY
78906: LIST
78907: LIST
78908: ST_TO_ADDR
// break ;
78909: GO 78913
// end ; end ;
78911: GO 78713
78913: POP
78914: POP
// if result then
78915: LD_VAR 0 1
78919: IFFALSE 78979
// begin ToLua ( playSibBomb() ) ;
78921: LD_STRING playSibBomb()
78923: PPUSH
78924: CALL_OW 559
// wait ( 0 0$14 ) ;
78928: LD_INT 490
78930: PPUSH
78931: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
78935: LD_VAR 0 1
78939: PUSH
78940: LD_INT 1
78942: ARRAY
78943: PPUSH
78944: LD_VAR 0 1
78948: PUSH
78949: LD_INT 2
78951: ARRAY
78952: PPUSH
78953: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
78957: LD_VAR 0 1
78961: PUSH
78962: LD_INT 1
78964: ARRAY
78965: PPUSH
78966: LD_VAR 0 1
78970: PUSH
78971: LD_INT 2
78973: ARRAY
78974: PPUSH
78975: CALL_OW 429
// end ; end ;
78979: LD_VAR 0 1
78983: RET
// every 0 0$1 trigger StreamModeActive and sReset do
78984: LD_EXP 64
78988: PUSH
78989: LD_EXP 86
78993: AND
78994: IFFALSE 79006
78996: GO 78998
78998: DISABLE
// YouLost (  ) ;
78999: LD_STRING 
79001: PPUSH
79002: CALL_OW 104
79006: END
// every 0 0$1 trigger StreamModeActive and sFog do
79007: LD_EXP 64
79011: PUSH
79012: LD_EXP 85
79016: AND
79017: IFFALSE 79031
79019: GO 79021
79021: DISABLE
// FogOff ( your_side ) ;
79022: LD_OWVAR 2
79026: PPUSH
79027: CALL_OW 344
79031: END
// every 0 0$1 trigger StreamModeActive and sSun do
79032: LD_EXP 64
79036: PUSH
79037: LD_EXP 87
79041: AND
79042: IFFALSE 79070
79044: GO 79046
79046: DISABLE
// begin solar_recharge_percent := 0 ;
79047: LD_ADDR_OWVAR 79
79051: PUSH
79052: LD_INT 0
79054: ST_TO_ADDR
// wait ( 5 5$00 ) ;
79055: LD_INT 10500
79057: PPUSH
79058: CALL_OW 67
// solar_recharge_percent := 100 ;
79062: LD_ADDR_OWVAR 79
79066: PUSH
79067: LD_INT 100
79069: ST_TO_ADDR
// end ;
79070: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
79071: LD_EXP 64
79075: PUSH
79076: LD_EXP 88
79080: AND
79081: IFFALSE 79320
79083: GO 79085
79085: DISABLE
79086: LD_INT 0
79088: PPUSH
79089: PPUSH
79090: PPUSH
// begin tmp := [ ] ;
79091: LD_ADDR_VAR 0 3
79095: PUSH
79096: EMPTY
79097: ST_TO_ADDR
// for i := 1 to 6 do
79098: LD_ADDR_VAR 0 1
79102: PUSH
79103: DOUBLE
79104: LD_INT 1
79106: DEC
79107: ST_TO_ADDR
79108: LD_INT 6
79110: PUSH
79111: FOR_TO
79112: IFFALSE 79217
// begin uc_nation := nation_nature ;
79114: LD_ADDR_OWVAR 21
79118: PUSH
79119: LD_INT 0
79121: ST_TO_ADDR
// uc_side := 0 ;
79122: LD_ADDR_OWVAR 20
79126: PUSH
79127: LD_INT 0
79129: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
79130: LD_ADDR_OWVAR 29
79134: PUSH
79135: LD_INT 12
79137: PUSH
79138: LD_INT 12
79140: PUSH
79141: EMPTY
79142: LIST
79143: LIST
79144: ST_TO_ADDR
// hc_agressivity := 20 ;
79145: LD_ADDR_OWVAR 35
79149: PUSH
79150: LD_INT 20
79152: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
79153: LD_ADDR_OWVAR 28
79157: PUSH
79158: LD_INT 17
79160: ST_TO_ADDR
// hc_gallery :=  ;
79161: LD_ADDR_OWVAR 33
79165: PUSH
79166: LD_STRING 
79168: ST_TO_ADDR
// hc_name :=  ;
79169: LD_ADDR_OWVAR 26
79173: PUSH
79174: LD_STRING 
79176: ST_TO_ADDR
// un := CreateHuman ;
79177: LD_ADDR_VAR 0 2
79181: PUSH
79182: CALL_OW 44
79186: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
79187: LD_VAR 0 2
79191: PPUSH
79192: LD_INT 1
79194: PPUSH
79195: CALL_OW 51
// tmp := tmp ^ un ;
79199: LD_ADDR_VAR 0 3
79203: PUSH
79204: LD_VAR 0 3
79208: PUSH
79209: LD_VAR 0 2
79213: ADD
79214: ST_TO_ADDR
// end ;
79215: GO 79111
79217: POP
79218: POP
// repeat wait ( 0 0$1 ) ;
79219: LD_INT 35
79221: PPUSH
79222: CALL_OW 67
// for un in tmp do
79226: LD_ADDR_VAR 0 2
79230: PUSH
79231: LD_VAR 0 3
79235: PUSH
79236: FOR_IN
79237: IFFALSE 79311
// begin if IsDead ( un ) then
79239: LD_VAR 0 2
79243: PPUSH
79244: CALL_OW 301
79248: IFFALSE 79268
// begin tmp := tmp diff un ;
79250: LD_ADDR_VAR 0 3
79254: PUSH
79255: LD_VAR 0 3
79259: PUSH
79260: LD_VAR 0 2
79264: DIFF
79265: ST_TO_ADDR
// continue ;
79266: GO 79236
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
79268: LD_VAR 0 2
79272: PPUSH
79273: LD_INT 3
79275: PUSH
79276: LD_INT 22
79278: PUSH
79279: LD_INT 0
79281: PUSH
79282: EMPTY
79283: LIST
79284: LIST
79285: PUSH
79286: EMPTY
79287: LIST
79288: LIST
79289: PPUSH
79290: CALL_OW 69
79294: PPUSH
79295: LD_VAR 0 2
79299: PPUSH
79300: CALL_OW 74
79304: PPUSH
79305: CALL_OW 115
// end ;
79309: GO 79236
79311: POP
79312: POP
// until not tmp ;
79313: LD_VAR 0 3
79317: NOT
79318: IFFALSE 79219
// end ;
79320: PPOPN 3
79322: END
// every 0 0$1 trigger StreamModeActive and sTroll do
79323: LD_EXP 64
79327: PUSH
79328: LD_EXP 89
79332: AND
79333: IFFALSE 79387
79335: GO 79337
79337: DISABLE
// begin ToLua ( displayTroll(); ) ;
79338: LD_STRING displayTroll();
79340: PPUSH
79341: CALL_OW 559
// wait ( 3 3$00 ) ;
79345: LD_INT 6300
79347: PPUSH
79348: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79352: LD_STRING hideTroll();
79354: PPUSH
79355: CALL_OW 559
// wait ( 1 1$00 ) ;
79359: LD_INT 2100
79361: PPUSH
79362: CALL_OW 67
// ToLua ( displayTroll(); ) ;
79366: LD_STRING displayTroll();
79368: PPUSH
79369: CALL_OW 559
// wait ( 1 1$00 ) ;
79373: LD_INT 2100
79375: PPUSH
79376: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79380: LD_STRING hideTroll();
79382: PPUSH
79383: CALL_OW 559
// end ;
79387: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
79388: LD_EXP 64
79392: PUSH
79393: LD_EXP 90
79397: AND
79398: IFFALSE 79461
79400: GO 79402
79402: DISABLE
79403: LD_INT 0
79405: PPUSH
// begin p := 0 ;
79406: LD_ADDR_VAR 0 1
79410: PUSH
79411: LD_INT 0
79413: ST_TO_ADDR
// repeat game_speed := 1 ;
79414: LD_ADDR_OWVAR 65
79418: PUSH
79419: LD_INT 1
79421: ST_TO_ADDR
// wait ( 0 0$1 ) ;
79422: LD_INT 35
79424: PPUSH
79425: CALL_OW 67
// p := p + 1 ;
79429: LD_ADDR_VAR 0 1
79433: PUSH
79434: LD_VAR 0 1
79438: PUSH
79439: LD_INT 1
79441: PLUS
79442: ST_TO_ADDR
// until p >= 60 ;
79443: LD_VAR 0 1
79447: PUSH
79448: LD_INT 60
79450: GREATEREQUAL
79451: IFFALSE 79414
// game_speed := 4 ;
79453: LD_ADDR_OWVAR 65
79457: PUSH
79458: LD_INT 4
79460: ST_TO_ADDR
// end ;
79461: PPOPN 1
79463: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
79464: LD_EXP 64
79468: PUSH
79469: LD_EXP 91
79473: AND
79474: IFFALSE 79620
79476: GO 79478
79478: DISABLE
79479: LD_INT 0
79481: PPUSH
79482: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79483: LD_ADDR_VAR 0 1
79487: PUSH
79488: LD_INT 22
79490: PUSH
79491: LD_OWVAR 2
79495: PUSH
79496: EMPTY
79497: LIST
79498: LIST
79499: PUSH
79500: LD_INT 2
79502: PUSH
79503: LD_INT 30
79505: PUSH
79506: LD_INT 0
79508: PUSH
79509: EMPTY
79510: LIST
79511: LIST
79512: PUSH
79513: LD_INT 30
79515: PUSH
79516: LD_INT 1
79518: PUSH
79519: EMPTY
79520: LIST
79521: LIST
79522: PUSH
79523: EMPTY
79524: LIST
79525: LIST
79526: LIST
79527: PUSH
79528: EMPTY
79529: LIST
79530: LIST
79531: PPUSH
79532: CALL_OW 69
79536: ST_TO_ADDR
// if not depot then
79537: LD_VAR 0 1
79541: NOT
79542: IFFALSE 79546
// exit ;
79544: GO 79620
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
79546: LD_ADDR_VAR 0 2
79550: PUSH
79551: LD_VAR 0 1
79555: PUSH
79556: LD_INT 1
79558: PPUSH
79559: LD_VAR 0 1
79563: PPUSH
79564: CALL_OW 12
79568: ARRAY
79569: PPUSH
79570: CALL_OW 274
79574: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
79575: LD_VAR 0 2
79579: PPUSH
79580: LD_INT 1
79582: PPUSH
79583: LD_INT 0
79585: PPUSH
79586: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
79590: LD_VAR 0 2
79594: PPUSH
79595: LD_INT 2
79597: PPUSH
79598: LD_INT 0
79600: PPUSH
79601: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
79605: LD_VAR 0 2
79609: PPUSH
79610: LD_INT 3
79612: PPUSH
79613: LD_INT 0
79615: PPUSH
79616: CALL_OW 277
// end ;
79620: PPOPN 2
79622: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
79623: LD_EXP 64
79627: PUSH
79628: LD_EXP 92
79632: AND
79633: IFFALSE 79730
79635: GO 79637
79637: DISABLE
79638: LD_INT 0
79640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79641: LD_ADDR_VAR 0 1
79645: PUSH
79646: LD_INT 22
79648: PUSH
79649: LD_OWVAR 2
79653: PUSH
79654: EMPTY
79655: LIST
79656: LIST
79657: PUSH
79658: LD_INT 21
79660: PUSH
79661: LD_INT 1
79663: PUSH
79664: EMPTY
79665: LIST
79666: LIST
79667: PUSH
79668: LD_INT 3
79670: PUSH
79671: LD_INT 23
79673: PUSH
79674: LD_INT 0
79676: PUSH
79677: EMPTY
79678: LIST
79679: LIST
79680: PUSH
79681: EMPTY
79682: LIST
79683: LIST
79684: PUSH
79685: EMPTY
79686: LIST
79687: LIST
79688: LIST
79689: PPUSH
79690: CALL_OW 69
79694: ST_TO_ADDR
// if not tmp then
79695: LD_VAR 0 1
79699: NOT
79700: IFFALSE 79704
// exit ;
79702: GO 79730
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
79704: LD_VAR 0 1
79708: PUSH
79709: LD_INT 1
79711: PPUSH
79712: LD_VAR 0 1
79716: PPUSH
79717: CALL_OW 12
79721: ARRAY
79722: PPUSH
79723: LD_INT 200
79725: PPUSH
79726: CALL_OW 234
// end ;
79730: PPOPN 1
79732: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
79733: LD_EXP 64
79737: PUSH
79738: LD_EXP 93
79742: AND
79743: IFFALSE 79822
79745: GO 79747
79747: DISABLE
79748: LD_INT 0
79750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
79751: LD_ADDR_VAR 0 1
79755: PUSH
79756: LD_INT 22
79758: PUSH
79759: LD_OWVAR 2
79763: PUSH
79764: EMPTY
79765: LIST
79766: LIST
79767: PUSH
79768: LD_INT 21
79770: PUSH
79771: LD_INT 2
79773: PUSH
79774: EMPTY
79775: LIST
79776: LIST
79777: PUSH
79778: EMPTY
79779: LIST
79780: LIST
79781: PPUSH
79782: CALL_OW 69
79786: ST_TO_ADDR
// if not tmp then
79787: LD_VAR 0 1
79791: NOT
79792: IFFALSE 79796
// exit ;
79794: GO 79822
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
79796: LD_VAR 0 1
79800: PUSH
79801: LD_INT 1
79803: PPUSH
79804: LD_VAR 0 1
79808: PPUSH
79809: CALL_OW 12
79813: ARRAY
79814: PPUSH
79815: LD_INT 60
79817: PPUSH
79818: CALL_OW 234
// end ;
79822: PPOPN 1
79824: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
79825: LD_EXP 64
79829: PUSH
79830: LD_EXP 94
79834: AND
79835: IFFALSE 79934
79837: GO 79839
79839: DISABLE
79840: LD_INT 0
79842: PPUSH
79843: PPUSH
// begin enable ;
79844: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
79845: LD_ADDR_VAR 0 1
79849: PUSH
79850: LD_INT 22
79852: PUSH
79853: LD_OWVAR 2
79857: PUSH
79858: EMPTY
79859: LIST
79860: LIST
79861: PUSH
79862: LD_INT 61
79864: PUSH
79865: EMPTY
79866: LIST
79867: PUSH
79868: LD_INT 33
79870: PUSH
79871: LD_INT 2
79873: PUSH
79874: EMPTY
79875: LIST
79876: LIST
79877: PUSH
79878: EMPTY
79879: LIST
79880: LIST
79881: LIST
79882: PPUSH
79883: CALL_OW 69
79887: ST_TO_ADDR
// if not tmp then
79888: LD_VAR 0 1
79892: NOT
79893: IFFALSE 79897
// exit ;
79895: GO 79934
// for i in tmp do
79897: LD_ADDR_VAR 0 2
79901: PUSH
79902: LD_VAR 0 1
79906: PUSH
79907: FOR_IN
79908: IFFALSE 79932
// if IsControledBy ( i ) then
79910: LD_VAR 0 2
79914: PPUSH
79915: CALL_OW 312
79919: IFFALSE 79930
// ComUnlink ( i ) ;
79921: LD_VAR 0 2
79925: PPUSH
79926: CALL_OW 136
79930: GO 79907
79932: POP
79933: POP
// end ;
79934: PPOPN 2
79936: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
79937: LD_EXP 64
79941: PUSH
79942: LD_EXP 95
79946: AND
79947: IFFALSE 80087
79949: GO 79951
79951: DISABLE
79952: LD_INT 0
79954: PPUSH
79955: PPUSH
// begin ToLua ( displayPowell(); ) ;
79956: LD_STRING displayPowell();
79958: PPUSH
79959: CALL_OW 559
// uc_side := 0 ;
79963: LD_ADDR_OWVAR 20
79967: PUSH
79968: LD_INT 0
79970: ST_TO_ADDR
// uc_nation := 2 ;
79971: LD_ADDR_OWVAR 21
79975: PUSH
79976: LD_INT 2
79978: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
79979: LD_ADDR_OWVAR 37
79983: PUSH
79984: LD_INT 14
79986: ST_TO_ADDR
// vc_engine := engine_siberite ;
79987: LD_ADDR_OWVAR 39
79991: PUSH
79992: LD_INT 3
79994: ST_TO_ADDR
// vc_control := control_apeman ;
79995: LD_ADDR_OWVAR 38
79999: PUSH
80000: LD_INT 5
80002: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
80003: LD_ADDR_OWVAR 40
80007: PUSH
80008: LD_INT 29
80010: ST_TO_ADDR
// un := CreateVehicle ;
80011: LD_ADDR_VAR 0 2
80015: PUSH
80016: CALL_OW 45
80020: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80021: LD_VAR 0 2
80025: PPUSH
80026: LD_INT 1
80028: PPUSH
80029: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80033: LD_INT 35
80035: PPUSH
80036: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80040: LD_VAR 0 2
80044: PPUSH
80045: LD_INT 22
80047: PUSH
80048: LD_OWVAR 2
80052: PUSH
80053: EMPTY
80054: LIST
80055: LIST
80056: PPUSH
80057: CALL_OW 69
80061: PPUSH
80062: LD_VAR 0 2
80066: PPUSH
80067: CALL_OW 74
80071: PPUSH
80072: CALL_OW 115
// until IsDead ( un ) ;
80076: LD_VAR 0 2
80080: PPUSH
80081: CALL_OW 301
80085: IFFALSE 80033
// end ;
80087: PPOPN 2
80089: END
// every 0 0$1 trigger StreamModeActive and sStu do
80090: LD_EXP 64
80094: PUSH
80095: LD_EXP 103
80099: AND
80100: IFFALSE 80116
80102: GO 80104
80104: DISABLE
// begin ToLua ( displayStucuk(); ) ;
80105: LD_STRING displayStucuk();
80107: PPUSH
80108: CALL_OW 559
// ResetFog ;
80112: CALL_OW 335
// end ;
80116: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
80117: LD_EXP 64
80121: PUSH
80122: LD_EXP 96
80126: AND
80127: IFFALSE 80268
80129: GO 80131
80131: DISABLE
80132: LD_INT 0
80134: PPUSH
80135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80136: LD_ADDR_VAR 0 2
80140: PUSH
80141: LD_INT 22
80143: PUSH
80144: LD_OWVAR 2
80148: PUSH
80149: EMPTY
80150: LIST
80151: LIST
80152: PUSH
80153: LD_INT 21
80155: PUSH
80156: LD_INT 1
80158: PUSH
80159: EMPTY
80160: LIST
80161: LIST
80162: PUSH
80163: EMPTY
80164: LIST
80165: LIST
80166: PPUSH
80167: CALL_OW 69
80171: ST_TO_ADDR
// if not tmp then
80172: LD_VAR 0 2
80176: NOT
80177: IFFALSE 80181
// exit ;
80179: GO 80268
// un := tmp [ rand ( 1 , tmp ) ] ;
80181: LD_ADDR_VAR 0 1
80185: PUSH
80186: LD_VAR 0 2
80190: PUSH
80191: LD_INT 1
80193: PPUSH
80194: LD_VAR 0 2
80198: PPUSH
80199: CALL_OW 12
80203: ARRAY
80204: ST_TO_ADDR
// SetSide ( un , 0 ) ;
80205: LD_VAR 0 1
80209: PPUSH
80210: LD_INT 0
80212: PPUSH
80213: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
80217: LD_VAR 0 1
80221: PPUSH
80222: LD_OWVAR 3
80226: PUSH
80227: LD_VAR 0 1
80231: DIFF
80232: PPUSH
80233: LD_VAR 0 1
80237: PPUSH
80238: CALL_OW 74
80242: PPUSH
80243: CALL_OW 115
// wait ( 0 0$20 ) ;
80247: LD_INT 700
80249: PPUSH
80250: CALL_OW 67
// SetSide ( un , your_side ) ;
80254: LD_VAR 0 1
80258: PPUSH
80259: LD_OWVAR 2
80263: PPUSH
80264: CALL_OW 235
// end ;
80268: PPOPN 2
80270: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
80271: LD_EXP 64
80275: PUSH
80276: LD_EXP 97
80280: AND
80281: IFFALSE 80387
80283: GO 80285
80285: DISABLE
80286: LD_INT 0
80288: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80289: LD_ADDR_VAR 0 1
80293: PUSH
80294: LD_INT 22
80296: PUSH
80297: LD_OWVAR 2
80301: PUSH
80302: EMPTY
80303: LIST
80304: LIST
80305: PUSH
80306: LD_INT 2
80308: PUSH
80309: LD_INT 30
80311: PUSH
80312: LD_INT 0
80314: PUSH
80315: EMPTY
80316: LIST
80317: LIST
80318: PUSH
80319: LD_INT 30
80321: PUSH
80322: LD_INT 1
80324: PUSH
80325: EMPTY
80326: LIST
80327: LIST
80328: PUSH
80329: EMPTY
80330: LIST
80331: LIST
80332: LIST
80333: PUSH
80334: EMPTY
80335: LIST
80336: LIST
80337: PPUSH
80338: CALL_OW 69
80342: ST_TO_ADDR
// if not depot then
80343: LD_VAR 0 1
80347: NOT
80348: IFFALSE 80352
// exit ;
80350: GO 80387
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
80352: LD_VAR 0 1
80356: PUSH
80357: LD_INT 1
80359: ARRAY
80360: PPUSH
80361: CALL_OW 250
80365: PPUSH
80366: LD_VAR 0 1
80370: PUSH
80371: LD_INT 1
80373: ARRAY
80374: PPUSH
80375: CALL_OW 251
80379: PPUSH
80380: LD_INT 70
80382: PPUSH
80383: CALL_OW 495
// end ;
80387: PPOPN 1
80389: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
80390: LD_EXP 64
80394: PUSH
80395: LD_EXP 98
80399: AND
80400: IFFALSE 80611
80402: GO 80404
80404: DISABLE
80405: LD_INT 0
80407: PPUSH
80408: PPUSH
80409: PPUSH
80410: PPUSH
80411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80412: LD_ADDR_VAR 0 5
80416: PUSH
80417: LD_INT 22
80419: PUSH
80420: LD_OWVAR 2
80424: PUSH
80425: EMPTY
80426: LIST
80427: LIST
80428: PUSH
80429: LD_INT 21
80431: PUSH
80432: LD_INT 1
80434: PUSH
80435: EMPTY
80436: LIST
80437: LIST
80438: PUSH
80439: EMPTY
80440: LIST
80441: LIST
80442: PPUSH
80443: CALL_OW 69
80447: ST_TO_ADDR
// if not tmp then
80448: LD_VAR 0 5
80452: NOT
80453: IFFALSE 80457
// exit ;
80455: GO 80611
// for i in tmp do
80457: LD_ADDR_VAR 0 1
80461: PUSH
80462: LD_VAR 0 5
80466: PUSH
80467: FOR_IN
80468: IFFALSE 80609
// begin d := rand ( 0 , 5 ) ;
80470: LD_ADDR_VAR 0 4
80474: PUSH
80475: LD_INT 0
80477: PPUSH
80478: LD_INT 5
80480: PPUSH
80481: CALL_OW 12
80485: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
80486: LD_ADDR_VAR 0 2
80490: PUSH
80491: LD_VAR 0 1
80495: PPUSH
80496: CALL_OW 250
80500: PPUSH
80501: LD_VAR 0 4
80505: PPUSH
80506: LD_INT 3
80508: PPUSH
80509: LD_INT 12
80511: PPUSH
80512: CALL_OW 12
80516: PPUSH
80517: CALL_OW 272
80521: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
80522: LD_ADDR_VAR 0 3
80526: PUSH
80527: LD_VAR 0 1
80531: PPUSH
80532: CALL_OW 251
80536: PPUSH
80537: LD_VAR 0 4
80541: PPUSH
80542: LD_INT 3
80544: PPUSH
80545: LD_INT 12
80547: PPUSH
80548: CALL_OW 12
80552: PPUSH
80553: CALL_OW 273
80557: ST_TO_ADDR
// if ValidHex ( x , y ) then
80558: LD_VAR 0 2
80562: PPUSH
80563: LD_VAR 0 3
80567: PPUSH
80568: CALL_OW 488
80572: IFFALSE 80607
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
80574: LD_VAR 0 1
80578: PPUSH
80579: LD_VAR 0 2
80583: PPUSH
80584: LD_VAR 0 3
80588: PPUSH
80589: LD_INT 3
80591: PPUSH
80592: LD_INT 6
80594: PPUSH
80595: CALL_OW 12
80599: PPUSH
80600: LD_INT 1
80602: PPUSH
80603: CALL_OW 483
// end ;
80607: GO 80467
80609: POP
80610: POP
// end ;
80611: PPOPN 5
80613: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
80614: LD_EXP 64
80618: PUSH
80619: LD_EXP 99
80623: AND
80624: IFFALSE 80718
80626: GO 80628
80628: DISABLE
80629: LD_INT 0
80631: PPUSH
80632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
80633: LD_ADDR_VAR 0 2
80637: PUSH
80638: LD_INT 22
80640: PUSH
80641: LD_OWVAR 2
80645: PUSH
80646: EMPTY
80647: LIST
80648: LIST
80649: PUSH
80650: LD_INT 32
80652: PUSH
80653: LD_INT 1
80655: PUSH
80656: EMPTY
80657: LIST
80658: LIST
80659: PUSH
80660: LD_INT 21
80662: PUSH
80663: LD_INT 2
80665: PUSH
80666: EMPTY
80667: LIST
80668: LIST
80669: PUSH
80670: EMPTY
80671: LIST
80672: LIST
80673: LIST
80674: PPUSH
80675: CALL_OW 69
80679: ST_TO_ADDR
// if not tmp then
80680: LD_VAR 0 2
80684: NOT
80685: IFFALSE 80689
// exit ;
80687: GO 80718
// for i in tmp do
80689: LD_ADDR_VAR 0 1
80693: PUSH
80694: LD_VAR 0 2
80698: PUSH
80699: FOR_IN
80700: IFFALSE 80716
// SetFuel ( i , 0 ) ;
80702: LD_VAR 0 1
80706: PPUSH
80707: LD_INT 0
80709: PPUSH
80710: CALL_OW 240
80714: GO 80699
80716: POP
80717: POP
// end ;
80718: PPOPN 2
80720: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
80721: LD_EXP 64
80725: PUSH
80726: LD_EXP 100
80730: AND
80731: IFFALSE 80797
80733: GO 80735
80735: DISABLE
80736: LD_INT 0
80738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
80739: LD_ADDR_VAR 0 1
80743: PUSH
80744: LD_INT 22
80746: PUSH
80747: LD_OWVAR 2
80751: PUSH
80752: EMPTY
80753: LIST
80754: LIST
80755: PUSH
80756: LD_INT 30
80758: PUSH
80759: LD_INT 29
80761: PUSH
80762: EMPTY
80763: LIST
80764: LIST
80765: PUSH
80766: EMPTY
80767: LIST
80768: LIST
80769: PPUSH
80770: CALL_OW 69
80774: ST_TO_ADDR
// if not tmp then
80775: LD_VAR 0 1
80779: NOT
80780: IFFALSE 80784
// exit ;
80782: GO 80797
// DestroyUnit ( tmp [ 1 ] ) ;
80784: LD_VAR 0 1
80788: PUSH
80789: LD_INT 1
80791: ARRAY
80792: PPUSH
80793: CALL_OW 65
// end ;
80797: PPOPN 1
80799: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
80800: LD_EXP 64
80804: PUSH
80805: LD_EXP 102
80809: AND
80810: IFFALSE 80939
80812: GO 80814
80814: DISABLE
80815: LD_INT 0
80817: PPUSH
// begin uc_side := 0 ;
80818: LD_ADDR_OWVAR 20
80822: PUSH
80823: LD_INT 0
80825: ST_TO_ADDR
// uc_nation := nation_arabian ;
80826: LD_ADDR_OWVAR 21
80830: PUSH
80831: LD_INT 2
80833: ST_TO_ADDR
// hc_gallery :=  ;
80834: LD_ADDR_OWVAR 33
80838: PUSH
80839: LD_STRING 
80841: ST_TO_ADDR
// hc_name :=  ;
80842: LD_ADDR_OWVAR 26
80846: PUSH
80847: LD_STRING 
80849: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
80850: LD_INT 1
80852: PPUSH
80853: LD_INT 11
80855: PPUSH
80856: LD_INT 10
80858: PPUSH
80859: CALL_OW 380
// un := CreateHuman ;
80863: LD_ADDR_VAR 0 1
80867: PUSH
80868: CALL_OW 44
80872: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80873: LD_VAR 0 1
80877: PPUSH
80878: LD_INT 1
80880: PPUSH
80881: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80885: LD_INT 35
80887: PPUSH
80888: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80892: LD_VAR 0 1
80896: PPUSH
80897: LD_INT 22
80899: PUSH
80900: LD_OWVAR 2
80904: PUSH
80905: EMPTY
80906: LIST
80907: LIST
80908: PPUSH
80909: CALL_OW 69
80913: PPUSH
80914: LD_VAR 0 1
80918: PPUSH
80919: CALL_OW 74
80923: PPUSH
80924: CALL_OW 115
// until IsDead ( un ) ;
80928: LD_VAR 0 1
80932: PPUSH
80933: CALL_OW 301
80937: IFFALSE 80885
// end ;
80939: PPOPN 1
80941: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
80942: LD_EXP 64
80946: PUSH
80947: LD_EXP 104
80951: AND
80952: IFFALSE 80964
80954: GO 80956
80956: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
80957: LD_STRING earthquake(getX(game), 0, 32)
80959: PPUSH
80960: CALL_OW 559
80964: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
80965: LD_EXP 64
80969: PUSH
80970: LD_EXP 105
80974: AND
80975: IFFALSE 81066
80977: GO 80979
80979: DISABLE
80980: LD_INT 0
80982: PPUSH
// begin enable ;
80983: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
80984: LD_ADDR_VAR 0 1
80988: PUSH
80989: LD_INT 22
80991: PUSH
80992: LD_OWVAR 2
80996: PUSH
80997: EMPTY
80998: LIST
80999: LIST
81000: PUSH
81001: LD_INT 21
81003: PUSH
81004: LD_INT 2
81006: PUSH
81007: EMPTY
81008: LIST
81009: LIST
81010: PUSH
81011: LD_INT 33
81013: PUSH
81014: LD_INT 3
81016: PUSH
81017: EMPTY
81018: LIST
81019: LIST
81020: PUSH
81021: EMPTY
81022: LIST
81023: LIST
81024: LIST
81025: PPUSH
81026: CALL_OW 69
81030: ST_TO_ADDR
// if not tmp then
81031: LD_VAR 0 1
81035: NOT
81036: IFFALSE 81040
// exit ;
81038: GO 81066
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
81040: LD_VAR 0 1
81044: PUSH
81045: LD_INT 1
81047: PPUSH
81048: LD_VAR 0 1
81052: PPUSH
81053: CALL_OW 12
81057: ARRAY
81058: PPUSH
81059: LD_INT 1
81061: PPUSH
81062: CALL_OW 234
// end ;
81066: PPOPN 1
81068: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
81069: LD_EXP 64
81073: PUSH
81074: LD_EXP 106
81078: AND
81079: IFFALSE 81220
81081: GO 81083
81083: DISABLE
81084: LD_INT 0
81086: PPUSH
81087: PPUSH
81088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81089: LD_ADDR_VAR 0 3
81093: PUSH
81094: LD_INT 22
81096: PUSH
81097: LD_OWVAR 2
81101: PUSH
81102: EMPTY
81103: LIST
81104: LIST
81105: PUSH
81106: LD_INT 25
81108: PUSH
81109: LD_INT 1
81111: PUSH
81112: EMPTY
81113: LIST
81114: LIST
81115: PUSH
81116: EMPTY
81117: LIST
81118: LIST
81119: PPUSH
81120: CALL_OW 69
81124: ST_TO_ADDR
// if not tmp then
81125: LD_VAR 0 3
81129: NOT
81130: IFFALSE 81134
// exit ;
81132: GO 81220
// un := tmp [ rand ( 1 , tmp ) ] ;
81134: LD_ADDR_VAR 0 2
81138: PUSH
81139: LD_VAR 0 3
81143: PUSH
81144: LD_INT 1
81146: PPUSH
81147: LD_VAR 0 3
81151: PPUSH
81152: CALL_OW 12
81156: ARRAY
81157: ST_TO_ADDR
// if Crawls ( un ) then
81158: LD_VAR 0 2
81162: PPUSH
81163: CALL_OW 318
81167: IFFALSE 81178
// ComWalk ( un ) ;
81169: LD_VAR 0 2
81173: PPUSH
81174: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
81178: LD_VAR 0 2
81182: PPUSH
81183: LD_INT 9
81185: PPUSH
81186: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
81190: LD_INT 28
81192: PPUSH
81193: LD_OWVAR 2
81197: PPUSH
81198: LD_INT 2
81200: PPUSH
81201: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
81205: LD_INT 29
81207: PPUSH
81208: LD_OWVAR 2
81212: PPUSH
81213: LD_INT 2
81215: PPUSH
81216: CALL_OW 322
// end ;
81220: PPOPN 3
81222: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
81223: LD_EXP 64
81227: PUSH
81228: LD_EXP 107
81232: AND
81233: IFFALSE 81344
81235: GO 81237
81237: DISABLE
81238: LD_INT 0
81240: PPUSH
81241: PPUSH
81242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81243: LD_ADDR_VAR 0 3
81247: PUSH
81248: LD_INT 22
81250: PUSH
81251: LD_OWVAR 2
81255: PUSH
81256: EMPTY
81257: LIST
81258: LIST
81259: PUSH
81260: LD_INT 25
81262: PUSH
81263: LD_INT 1
81265: PUSH
81266: EMPTY
81267: LIST
81268: LIST
81269: PUSH
81270: EMPTY
81271: LIST
81272: LIST
81273: PPUSH
81274: CALL_OW 69
81278: ST_TO_ADDR
// if not tmp then
81279: LD_VAR 0 3
81283: NOT
81284: IFFALSE 81288
// exit ;
81286: GO 81344
// un := tmp [ rand ( 1 , tmp ) ] ;
81288: LD_ADDR_VAR 0 2
81292: PUSH
81293: LD_VAR 0 3
81297: PUSH
81298: LD_INT 1
81300: PPUSH
81301: LD_VAR 0 3
81305: PPUSH
81306: CALL_OW 12
81310: ARRAY
81311: ST_TO_ADDR
// if Crawls ( un ) then
81312: LD_VAR 0 2
81316: PPUSH
81317: CALL_OW 318
81321: IFFALSE 81332
// ComWalk ( un ) ;
81323: LD_VAR 0 2
81327: PPUSH
81328: CALL_OW 138
// SetClass ( un , class_mortar ) ;
81332: LD_VAR 0 2
81336: PPUSH
81337: LD_INT 8
81339: PPUSH
81340: CALL_OW 336
// end ;
81344: PPOPN 3
81346: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
81347: LD_EXP 64
81351: PUSH
81352: LD_EXP 108
81356: AND
81357: IFFALSE 81501
81359: GO 81361
81361: DISABLE
81362: LD_INT 0
81364: PPUSH
81365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
81366: LD_ADDR_VAR 0 2
81370: PUSH
81371: LD_INT 22
81373: PUSH
81374: LD_OWVAR 2
81378: PUSH
81379: EMPTY
81380: LIST
81381: LIST
81382: PUSH
81383: LD_INT 21
81385: PUSH
81386: LD_INT 2
81388: PUSH
81389: EMPTY
81390: LIST
81391: LIST
81392: PUSH
81393: LD_INT 2
81395: PUSH
81396: LD_INT 34
81398: PUSH
81399: LD_INT 12
81401: PUSH
81402: EMPTY
81403: LIST
81404: LIST
81405: PUSH
81406: LD_INT 34
81408: PUSH
81409: LD_INT 51
81411: PUSH
81412: EMPTY
81413: LIST
81414: LIST
81415: PUSH
81416: LD_INT 34
81418: PUSH
81419: LD_INT 32
81421: PUSH
81422: EMPTY
81423: LIST
81424: LIST
81425: PUSH
81426: EMPTY
81427: LIST
81428: LIST
81429: LIST
81430: LIST
81431: PUSH
81432: EMPTY
81433: LIST
81434: LIST
81435: LIST
81436: PPUSH
81437: CALL_OW 69
81441: ST_TO_ADDR
// if not tmp then
81442: LD_VAR 0 2
81446: NOT
81447: IFFALSE 81451
// exit ;
81449: GO 81501
// for i in tmp do
81451: LD_ADDR_VAR 0 1
81455: PUSH
81456: LD_VAR 0 2
81460: PUSH
81461: FOR_IN
81462: IFFALSE 81499
// if GetCargo ( i , mat_artifact ) = 0 then
81464: LD_VAR 0 1
81468: PPUSH
81469: LD_INT 4
81471: PPUSH
81472: CALL_OW 289
81476: PUSH
81477: LD_INT 0
81479: EQUAL
81480: IFFALSE 81497
// SetCargo ( i , mat_siberit , 100 ) ;
81482: LD_VAR 0 1
81486: PPUSH
81487: LD_INT 3
81489: PPUSH
81490: LD_INT 100
81492: PPUSH
81493: CALL_OW 290
81497: GO 81461
81499: POP
81500: POP
// end ;
81501: PPOPN 2
81503: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
81504: LD_EXP 64
81508: PUSH
81509: LD_EXP 109
81513: AND
81514: IFFALSE 81697
81516: GO 81518
81518: DISABLE
81519: LD_INT 0
81521: PPUSH
81522: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
81523: LD_ADDR_VAR 0 2
81527: PUSH
81528: LD_INT 22
81530: PUSH
81531: LD_OWVAR 2
81535: PUSH
81536: EMPTY
81537: LIST
81538: LIST
81539: PPUSH
81540: CALL_OW 69
81544: ST_TO_ADDR
// if not tmp then
81545: LD_VAR 0 2
81549: NOT
81550: IFFALSE 81554
// exit ;
81552: GO 81697
// for i := 1 to 2 do
81554: LD_ADDR_VAR 0 1
81558: PUSH
81559: DOUBLE
81560: LD_INT 1
81562: DEC
81563: ST_TO_ADDR
81564: LD_INT 2
81566: PUSH
81567: FOR_TO
81568: IFFALSE 81695
// begin uc_side := your_side ;
81570: LD_ADDR_OWVAR 20
81574: PUSH
81575: LD_OWVAR 2
81579: ST_TO_ADDR
// uc_nation := nation_american ;
81580: LD_ADDR_OWVAR 21
81584: PUSH
81585: LD_INT 1
81587: ST_TO_ADDR
// vc_chassis := us_morphling ;
81588: LD_ADDR_OWVAR 37
81592: PUSH
81593: LD_INT 5
81595: ST_TO_ADDR
// vc_engine := engine_siberite ;
81596: LD_ADDR_OWVAR 39
81600: PUSH
81601: LD_INT 3
81603: ST_TO_ADDR
// vc_control := control_computer ;
81604: LD_ADDR_OWVAR 38
81608: PUSH
81609: LD_INT 3
81611: ST_TO_ADDR
// vc_weapon := us_double_laser ;
81612: LD_ADDR_OWVAR 40
81616: PUSH
81617: LD_INT 10
81619: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
81620: LD_VAR 0 2
81624: PUSH
81625: LD_INT 1
81627: ARRAY
81628: PPUSH
81629: CALL_OW 310
81633: NOT
81634: IFFALSE 81681
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
81636: CALL_OW 45
81640: PPUSH
81641: LD_VAR 0 2
81645: PUSH
81646: LD_INT 1
81648: ARRAY
81649: PPUSH
81650: CALL_OW 250
81654: PPUSH
81655: LD_VAR 0 2
81659: PUSH
81660: LD_INT 1
81662: ARRAY
81663: PPUSH
81664: CALL_OW 251
81668: PPUSH
81669: LD_INT 12
81671: PPUSH
81672: LD_INT 1
81674: PPUSH
81675: CALL_OW 50
81679: GO 81693
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
81681: CALL_OW 45
81685: PPUSH
81686: LD_INT 1
81688: PPUSH
81689: CALL_OW 51
// end ;
81693: GO 81567
81695: POP
81696: POP
// end ;
81697: PPOPN 2
81699: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
81700: LD_EXP 64
81704: PUSH
81705: LD_EXP 110
81709: AND
81710: IFFALSE 81932
81712: GO 81714
81714: DISABLE
81715: LD_INT 0
81717: PPUSH
81718: PPUSH
81719: PPUSH
81720: PPUSH
81721: PPUSH
81722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81723: LD_ADDR_VAR 0 6
81727: PUSH
81728: LD_INT 22
81730: PUSH
81731: LD_OWVAR 2
81735: PUSH
81736: EMPTY
81737: LIST
81738: LIST
81739: PUSH
81740: LD_INT 21
81742: PUSH
81743: LD_INT 1
81745: PUSH
81746: EMPTY
81747: LIST
81748: LIST
81749: PUSH
81750: LD_INT 3
81752: PUSH
81753: LD_INT 23
81755: PUSH
81756: LD_INT 0
81758: PUSH
81759: EMPTY
81760: LIST
81761: LIST
81762: PUSH
81763: EMPTY
81764: LIST
81765: LIST
81766: PUSH
81767: EMPTY
81768: LIST
81769: LIST
81770: LIST
81771: PPUSH
81772: CALL_OW 69
81776: ST_TO_ADDR
// if not tmp then
81777: LD_VAR 0 6
81781: NOT
81782: IFFALSE 81786
// exit ;
81784: GO 81932
// s1 := rand ( 1 , 4 ) ;
81786: LD_ADDR_VAR 0 2
81790: PUSH
81791: LD_INT 1
81793: PPUSH
81794: LD_INT 4
81796: PPUSH
81797: CALL_OW 12
81801: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
81802: LD_ADDR_VAR 0 4
81806: PUSH
81807: LD_VAR 0 6
81811: PUSH
81812: LD_INT 1
81814: ARRAY
81815: PPUSH
81816: LD_VAR 0 2
81820: PPUSH
81821: CALL_OW 259
81825: ST_TO_ADDR
// if s1 = 1 then
81826: LD_VAR 0 2
81830: PUSH
81831: LD_INT 1
81833: EQUAL
81834: IFFALSE 81854
// s2 := rand ( 2 , 4 ) else
81836: LD_ADDR_VAR 0 3
81840: PUSH
81841: LD_INT 2
81843: PPUSH
81844: LD_INT 4
81846: PPUSH
81847: CALL_OW 12
81851: ST_TO_ADDR
81852: GO 81862
// s2 := 1 ;
81854: LD_ADDR_VAR 0 3
81858: PUSH
81859: LD_INT 1
81861: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
81862: LD_ADDR_VAR 0 5
81866: PUSH
81867: LD_VAR 0 6
81871: PUSH
81872: LD_INT 1
81874: ARRAY
81875: PPUSH
81876: LD_VAR 0 3
81880: PPUSH
81881: CALL_OW 259
81885: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
81886: LD_VAR 0 6
81890: PUSH
81891: LD_INT 1
81893: ARRAY
81894: PPUSH
81895: LD_VAR 0 2
81899: PPUSH
81900: LD_VAR 0 5
81904: PPUSH
81905: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
81909: LD_VAR 0 6
81913: PUSH
81914: LD_INT 1
81916: ARRAY
81917: PPUSH
81918: LD_VAR 0 3
81922: PPUSH
81923: LD_VAR 0 4
81927: PPUSH
81928: CALL_OW 237
// end ;
81932: PPOPN 6
81934: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
81935: LD_EXP 64
81939: PUSH
81940: LD_EXP 111
81944: AND
81945: IFFALSE 82024
81947: GO 81949
81949: DISABLE
81950: LD_INT 0
81952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
81953: LD_ADDR_VAR 0 1
81957: PUSH
81958: LD_INT 22
81960: PUSH
81961: LD_OWVAR 2
81965: PUSH
81966: EMPTY
81967: LIST
81968: LIST
81969: PUSH
81970: LD_INT 30
81972: PUSH
81973: LD_INT 3
81975: PUSH
81976: EMPTY
81977: LIST
81978: LIST
81979: PUSH
81980: EMPTY
81981: LIST
81982: LIST
81983: PPUSH
81984: CALL_OW 69
81988: ST_TO_ADDR
// if not tmp then
81989: LD_VAR 0 1
81993: NOT
81994: IFFALSE 81998
// exit ;
81996: GO 82024
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
81998: LD_VAR 0 1
82002: PUSH
82003: LD_INT 1
82005: PPUSH
82006: LD_VAR 0 1
82010: PPUSH
82011: CALL_OW 12
82015: ARRAY
82016: PPUSH
82017: LD_INT 1
82019: PPUSH
82020: CALL_OW 234
// end ;
82024: PPOPN 1
82026: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
82027: LD_EXP 64
82031: PUSH
82032: LD_EXP 112
82036: AND
82037: IFFALSE 82149
82039: GO 82041
82041: DISABLE
82042: LD_INT 0
82044: PPUSH
82045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
82046: LD_ADDR_VAR 0 2
82050: PUSH
82051: LD_INT 22
82053: PUSH
82054: LD_OWVAR 2
82058: PUSH
82059: EMPTY
82060: LIST
82061: LIST
82062: PUSH
82063: LD_INT 2
82065: PUSH
82066: LD_INT 30
82068: PUSH
82069: LD_INT 27
82071: PUSH
82072: EMPTY
82073: LIST
82074: LIST
82075: PUSH
82076: LD_INT 30
82078: PUSH
82079: LD_INT 26
82081: PUSH
82082: EMPTY
82083: LIST
82084: LIST
82085: PUSH
82086: LD_INT 30
82088: PUSH
82089: LD_INT 28
82091: PUSH
82092: EMPTY
82093: LIST
82094: LIST
82095: PUSH
82096: EMPTY
82097: LIST
82098: LIST
82099: LIST
82100: LIST
82101: PUSH
82102: EMPTY
82103: LIST
82104: LIST
82105: PPUSH
82106: CALL_OW 69
82110: ST_TO_ADDR
// if not tmp then
82111: LD_VAR 0 2
82115: NOT
82116: IFFALSE 82120
// exit ;
82118: GO 82149
// for i in tmp do
82120: LD_ADDR_VAR 0 1
82124: PUSH
82125: LD_VAR 0 2
82129: PUSH
82130: FOR_IN
82131: IFFALSE 82147
// SetLives ( i , 1 ) ;
82133: LD_VAR 0 1
82137: PPUSH
82138: LD_INT 1
82140: PPUSH
82141: CALL_OW 234
82145: GO 82130
82147: POP
82148: POP
// end ;
82149: PPOPN 2
82151: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
82152: LD_EXP 64
82156: PUSH
82157: LD_EXP 113
82161: AND
82162: IFFALSE 82449
82164: GO 82166
82166: DISABLE
82167: LD_INT 0
82169: PPUSH
82170: PPUSH
82171: PPUSH
// begin i := rand ( 1 , 7 ) ;
82172: LD_ADDR_VAR 0 1
82176: PUSH
82177: LD_INT 1
82179: PPUSH
82180: LD_INT 7
82182: PPUSH
82183: CALL_OW 12
82187: ST_TO_ADDR
// case i of 1 :
82188: LD_VAR 0 1
82192: PUSH
82193: LD_INT 1
82195: DOUBLE
82196: EQUAL
82197: IFTRUE 82201
82199: GO 82211
82201: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
82202: LD_STRING earthquake(getX(game), 0, 32)
82204: PPUSH
82205: CALL_OW 559
82209: GO 82449
82211: LD_INT 2
82213: DOUBLE
82214: EQUAL
82215: IFTRUE 82219
82217: GO 82233
82219: POP
// begin ToLua ( displayStucuk(); ) ;
82220: LD_STRING displayStucuk();
82222: PPUSH
82223: CALL_OW 559
// ResetFog ;
82227: CALL_OW 335
// end ; 3 :
82231: GO 82449
82233: LD_INT 3
82235: DOUBLE
82236: EQUAL
82237: IFTRUE 82241
82239: GO 82345
82241: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82242: LD_ADDR_VAR 0 2
82246: PUSH
82247: LD_INT 22
82249: PUSH
82250: LD_OWVAR 2
82254: PUSH
82255: EMPTY
82256: LIST
82257: LIST
82258: PUSH
82259: LD_INT 25
82261: PUSH
82262: LD_INT 1
82264: PUSH
82265: EMPTY
82266: LIST
82267: LIST
82268: PUSH
82269: EMPTY
82270: LIST
82271: LIST
82272: PPUSH
82273: CALL_OW 69
82277: ST_TO_ADDR
// if not tmp then
82278: LD_VAR 0 2
82282: NOT
82283: IFFALSE 82287
// exit ;
82285: GO 82449
// un := tmp [ rand ( 1 , tmp ) ] ;
82287: LD_ADDR_VAR 0 3
82291: PUSH
82292: LD_VAR 0 2
82296: PUSH
82297: LD_INT 1
82299: PPUSH
82300: LD_VAR 0 2
82304: PPUSH
82305: CALL_OW 12
82309: ARRAY
82310: ST_TO_ADDR
// if Crawls ( un ) then
82311: LD_VAR 0 3
82315: PPUSH
82316: CALL_OW 318
82320: IFFALSE 82331
// ComWalk ( un ) ;
82322: LD_VAR 0 3
82326: PPUSH
82327: CALL_OW 138
// SetClass ( un , class_mortar ) ;
82331: LD_VAR 0 3
82335: PPUSH
82336: LD_INT 8
82338: PPUSH
82339: CALL_OW 336
// end ; 4 :
82343: GO 82449
82345: LD_INT 4
82347: DOUBLE
82348: EQUAL
82349: IFTRUE 82353
82351: GO 82427
82353: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
82354: LD_ADDR_VAR 0 2
82358: PUSH
82359: LD_INT 22
82361: PUSH
82362: LD_OWVAR 2
82366: PUSH
82367: EMPTY
82368: LIST
82369: LIST
82370: PUSH
82371: LD_INT 30
82373: PUSH
82374: LD_INT 29
82376: PUSH
82377: EMPTY
82378: LIST
82379: LIST
82380: PUSH
82381: EMPTY
82382: LIST
82383: LIST
82384: PPUSH
82385: CALL_OW 69
82389: ST_TO_ADDR
// if not tmp then
82390: LD_VAR 0 2
82394: NOT
82395: IFFALSE 82399
// exit ;
82397: GO 82449
// CenterNowOnUnits ( tmp [ 1 ] ) ;
82399: LD_VAR 0 2
82403: PUSH
82404: LD_INT 1
82406: ARRAY
82407: PPUSH
82408: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
82412: LD_VAR 0 2
82416: PUSH
82417: LD_INT 1
82419: ARRAY
82420: PPUSH
82421: CALL_OW 65
// end ; 5 .. 7 :
82425: GO 82449
82427: LD_INT 5
82429: DOUBLE
82430: GREATEREQUAL
82431: IFFALSE 82439
82433: LD_INT 7
82435: DOUBLE
82436: LESSEQUAL
82437: IFTRUE 82441
82439: GO 82448
82441: POP
// StreamSibBomb ; end ;
82442: CALL 78686 0 0
82446: GO 82449
82448: POP
// end ;
82449: PPOPN 3
82451: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
82452: LD_EXP 64
82456: PUSH
82457: LD_EXP 114
82461: AND
82462: IFFALSE 82618
82464: GO 82466
82466: DISABLE
82467: LD_INT 0
82469: PPUSH
82470: PPUSH
82471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
82472: LD_ADDR_VAR 0 2
82476: PUSH
82477: LD_INT 81
82479: PUSH
82480: LD_OWVAR 2
82484: PUSH
82485: EMPTY
82486: LIST
82487: LIST
82488: PUSH
82489: LD_INT 2
82491: PUSH
82492: LD_INT 21
82494: PUSH
82495: LD_INT 1
82497: PUSH
82498: EMPTY
82499: LIST
82500: LIST
82501: PUSH
82502: LD_INT 21
82504: PUSH
82505: LD_INT 2
82507: PUSH
82508: EMPTY
82509: LIST
82510: LIST
82511: PUSH
82512: EMPTY
82513: LIST
82514: LIST
82515: LIST
82516: PUSH
82517: EMPTY
82518: LIST
82519: LIST
82520: PPUSH
82521: CALL_OW 69
82525: ST_TO_ADDR
// if not tmp then
82526: LD_VAR 0 2
82530: NOT
82531: IFFALSE 82535
// exit ;
82533: GO 82618
// p := 0 ;
82535: LD_ADDR_VAR 0 3
82539: PUSH
82540: LD_INT 0
82542: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82543: LD_INT 35
82545: PPUSH
82546: CALL_OW 67
// p := p + 1 ;
82550: LD_ADDR_VAR 0 3
82554: PUSH
82555: LD_VAR 0 3
82559: PUSH
82560: LD_INT 1
82562: PLUS
82563: ST_TO_ADDR
// for i in tmp do
82564: LD_ADDR_VAR 0 1
82568: PUSH
82569: LD_VAR 0 2
82573: PUSH
82574: FOR_IN
82575: IFFALSE 82606
// if GetLives ( i ) < 1000 then
82577: LD_VAR 0 1
82581: PPUSH
82582: CALL_OW 256
82586: PUSH
82587: LD_INT 1000
82589: LESS
82590: IFFALSE 82604
// SetLives ( i , 1000 ) ;
82592: LD_VAR 0 1
82596: PPUSH
82597: LD_INT 1000
82599: PPUSH
82600: CALL_OW 234
82604: GO 82574
82606: POP
82607: POP
// until p > 20 ;
82608: LD_VAR 0 3
82612: PUSH
82613: LD_INT 20
82615: GREATER
82616: IFFALSE 82543
// end ;
82618: PPOPN 3
82620: END
// every 0 0$1 trigger StreamModeActive and sTime do
82621: LD_EXP 64
82625: PUSH
82626: LD_EXP 115
82630: AND
82631: IFFALSE 82666
82633: GO 82635
82635: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
82636: LD_INT 28
82638: PPUSH
82639: LD_OWVAR 2
82643: PPUSH
82644: LD_INT 2
82646: PPUSH
82647: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
82651: LD_INT 30
82653: PPUSH
82654: LD_OWVAR 2
82658: PPUSH
82659: LD_INT 2
82661: PPUSH
82662: CALL_OW 322
// end ;
82666: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
82667: LD_EXP 64
82671: PUSH
82672: LD_EXP 116
82676: AND
82677: IFFALSE 82798
82679: GO 82681
82681: DISABLE
82682: LD_INT 0
82684: PPUSH
82685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82686: LD_ADDR_VAR 0 2
82690: PUSH
82691: LD_INT 22
82693: PUSH
82694: LD_OWVAR 2
82698: PUSH
82699: EMPTY
82700: LIST
82701: LIST
82702: PUSH
82703: LD_INT 21
82705: PUSH
82706: LD_INT 1
82708: PUSH
82709: EMPTY
82710: LIST
82711: LIST
82712: PUSH
82713: LD_INT 3
82715: PUSH
82716: LD_INT 23
82718: PUSH
82719: LD_INT 0
82721: PUSH
82722: EMPTY
82723: LIST
82724: LIST
82725: PUSH
82726: EMPTY
82727: LIST
82728: LIST
82729: PUSH
82730: EMPTY
82731: LIST
82732: LIST
82733: LIST
82734: PPUSH
82735: CALL_OW 69
82739: ST_TO_ADDR
// if not tmp then
82740: LD_VAR 0 2
82744: NOT
82745: IFFALSE 82749
// exit ;
82747: GO 82798
// for i in tmp do
82749: LD_ADDR_VAR 0 1
82753: PUSH
82754: LD_VAR 0 2
82758: PUSH
82759: FOR_IN
82760: IFFALSE 82796
// begin if Crawls ( i ) then
82762: LD_VAR 0 1
82766: PPUSH
82767: CALL_OW 318
82771: IFFALSE 82782
// ComWalk ( i ) ;
82773: LD_VAR 0 1
82777: PPUSH
82778: CALL_OW 138
// SetClass ( i , 2 ) ;
82782: LD_VAR 0 1
82786: PPUSH
82787: LD_INT 2
82789: PPUSH
82790: CALL_OW 336
// end ;
82794: GO 82759
82796: POP
82797: POP
// end ;
82798: PPOPN 2
82800: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
82801: LD_EXP 64
82805: PUSH
82806: LD_EXP 117
82810: AND
82811: IFFALSE 83099
82813: GO 82815
82815: DISABLE
82816: LD_INT 0
82818: PPUSH
82819: PPUSH
82820: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
82821: LD_OWVAR 2
82825: PPUSH
82826: LD_INT 9
82828: PPUSH
82829: LD_INT 1
82831: PPUSH
82832: LD_INT 1
82834: PPUSH
82835: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
82839: LD_INT 9
82841: PPUSH
82842: LD_OWVAR 2
82846: PPUSH
82847: CALL_OW 343
// uc_side := 9 ;
82851: LD_ADDR_OWVAR 20
82855: PUSH
82856: LD_INT 9
82858: ST_TO_ADDR
// uc_nation := 2 ;
82859: LD_ADDR_OWVAR 21
82863: PUSH
82864: LD_INT 2
82866: ST_TO_ADDR
// hc_name := Dark Warrior ;
82867: LD_ADDR_OWVAR 26
82871: PUSH
82872: LD_STRING Dark Warrior
82874: ST_TO_ADDR
// hc_gallery :=  ;
82875: LD_ADDR_OWVAR 33
82879: PUSH
82880: LD_STRING 
82882: ST_TO_ADDR
// hc_noskilllimit := true ;
82883: LD_ADDR_OWVAR 76
82887: PUSH
82888: LD_INT 1
82890: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
82891: LD_ADDR_OWVAR 31
82895: PUSH
82896: LD_INT 30
82898: PUSH
82899: LD_INT 30
82901: PUSH
82902: LD_INT 30
82904: PUSH
82905: LD_INT 30
82907: PUSH
82908: EMPTY
82909: LIST
82910: LIST
82911: LIST
82912: LIST
82913: ST_TO_ADDR
// un := CreateHuman ;
82914: LD_ADDR_VAR 0 3
82918: PUSH
82919: CALL_OW 44
82923: ST_TO_ADDR
// hc_noskilllimit := false ;
82924: LD_ADDR_OWVAR 76
82928: PUSH
82929: LD_INT 0
82931: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82932: LD_VAR 0 3
82936: PPUSH
82937: LD_INT 1
82939: PPUSH
82940: CALL_OW 51
// ToLua ( playRanger() ) ;
82944: LD_STRING playRanger()
82946: PPUSH
82947: CALL_OW 559
// p := 0 ;
82951: LD_ADDR_VAR 0 2
82955: PUSH
82956: LD_INT 0
82958: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82959: LD_INT 35
82961: PPUSH
82962: CALL_OW 67
// p := p + 1 ;
82966: LD_ADDR_VAR 0 2
82970: PUSH
82971: LD_VAR 0 2
82975: PUSH
82976: LD_INT 1
82978: PLUS
82979: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
82980: LD_VAR 0 3
82984: PPUSH
82985: CALL_OW 256
82989: PUSH
82990: LD_INT 1000
82992: LESS
82993: IFFALSE 83007
// SetLives ( un , 1000 ) ;
82995: LD_VAR 0 3
82999: PPUSH
83000: LD_INT 1000
83002: PPUSH
83003: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
83007: LD_VAR 0 3
83011: PPUSH
83012: LD_INT 81
83014: PUSH
83015: LD_OWVAR 2
83019: PUSH
83020: EMPTY
83021: LIST
83022: LIST
83023: PUSH
83024: LD_INT 91
83026: PUSH
83027: LD_VAR 0 3
83031: PUSH
83032: LD_INT 30
83034: PUSH
83035: EMPTY
83036: LIST
83037: LIST
83038: LIST
83039: PUSH
83040: EMPTY
83041: LIST
83042: LIST
83043: PPUSH
83044: CALL_OW 69
83048: PPUSH
83049: LD_VAR 0 3
83053: PPUSH
83054: CALL_OW 74
83058: PPUSH
83059: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
83063: LD_VAR 0 2
83067: PUSH
83068: LD_INT 80
83070: GREATER
83071: PUSH
83072: LD_VAR 0 3
83076: PPUSH
83077: CALL_OW 301
83081: OR
83082: IFFALSE 82959
// if un then
83084: LD_VAR 0 3
83088: IFFALSE 83099
// RemoveUnit ( un ) ;
83090: LD_VAR 0 3
83094: PPUSH
83095: CALL_OW 64
// end ;
83099: PPOPN 3
83101: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
83102: LD_EXP 118
83106: IFFALSE 83222
83108: GO 83110
83110: DISABLE
83111: LD_INT 0
83113: PPUSH
83114: PPUSH
83115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
83116: LD_ADDR_VAR 0 2
83120: PUSH
83121: LD_INT 81
83123: PUSH
83124: LD_OWVAR 2
83128: PUSH
83129: EMPTY
83130: LIST
83131: LIST
83132: PUSH
83133: LD_INT 21
83135: PUSH
83136: LD_INT 1
83138: PUSH
83139: EMPTY
83140: LIST
83141: LIST
83142: PUSH
83143: EMPTY
83144: LIST
83145: LIST
83146: PPUSH
83147: CALL_OW 69
83151: ST_TO_ADDR
// ToLua ( playComputer() ) ;
83152: LD_STRING playComputer()
83154: PPUSH
83155: CALL_OW 559
// if not tmp then
83159: LD_VAR 0 2
83163: NOT
83164: IFFALSE 83168
// exit ;
83166: GO 83222
// for i in tmp do
83168: LD_ADDR_VAR 0 1
83172: PUSH
83173: LD_VAR 0 2
83177: PUSH
83178: FOR_IN
83179: IFFALSE 83220
// for j := 1 to 4 do
83181: LD_ADDR_VAR 0 3
83185: PUSH
83186: DOUBLE
83187: LD_INT 1
83189: DEC
83190: ST_TO_ADDR
83191: LD_INT 4
83193: PUSH
83194: FOR_TO
83195: IFFALSE 83216
// SetSkill ( i , j , 10 ) ;
83197: LD_VAR 0 1
83201: PPUSH
83202: LD_VAR 0 3
83206: PPUSH
83207: LD_INT 10
83209: PPUSH
83210: CALL_OW 237
83214: GO 83194
83216: POP
83217: POP
83218: GO 83178
83220: POP
83221: POP
// end ;
83222: PPOPN 3
83224: END
// every 0 0$1 trigger s30 do var i , tmp ;
83225: LD_EXP 119
83229: IFFALSE 83298
83231: GO 83233
83233: DISABLE
83234: LD_INT 0
83236: PPUSH
83237: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83238: LD_ADDR_VAR 0 2
83242: PUSH
83243: LD_INT 22
83245: PUSH
83246: LD_OWVAR 2
83250: PUSH
83251: EMPTY
83252: LIST
83253: LIST
83254: PPUSH
83255: CALL_OW 69
83259: ST_TO_ADDR
// if not tmp then
83260: LD_VAR 0 2
83264: NOT
83265: IFFALSE 83269
// exit ;
83267: GO 83298
// for i in tmp do
83269: LD_ADDR_VAR 0 1
83273: PUSH
83274: LD_VAR 0 2
83278: PUSH
83279: FOR_IN
83280: IFFALSE 83296
// SetLives ( i , 300 ) ;
83282: LD_VAR 0 1
83286: PPUSH
83287: LD_INT 300
83289: PPUSH
83290: CALL_OW 234
83294: GO 83279
83296: POP
83297: POP
// end ;
83298: PPOPN 2
83300: END
// every 0 0$1 trigger s60 do var i , tmp ;
83301: LD_EXP 120
83305: IFFALSE 83374
83307: GO 83309
83309: DISABLE
83310: LD_INT 0
83312: PPUSH
83313: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83314: LD_ADDR_VAR 0 2
83318: PUSH
83319: LD_INT 22
83321: PUSH
83322: LD_OWVAR 2
83326: PUSH
83327: EMPTY
83328: LIST
83329: LIST
83330: PPUSH
83331: CALL_OW 69
83335: ST_TO_ADDR
// if not tmp then
83336: LD_VAR 0 2
83340: NOT
83341: IFFALSE 83345
// exit ;
83343: GO 83374
// for i in tmp do
83345: LD_ADDR_VAR 0 1
83349: PUSH
83350: LD_VAR 0 2
83354: PUSH
83355: FOR_IN
83356: IFFALSE 83372
// SetLives ( i , 600 ) ;
83358: LD_VAR 0 1
83362: PPUSH
83363: LD_INT 600
83365: PPUSH
83366: CALL_OW 234
83370: GO 83355
83372: POP
83373: POP
// end ;
83374: PPOPN 2
83376: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
83377: LD_INT 0
83379: PPUSH
// case cmd of 301 :
83380: LD_VAR 0 1
83384: PUSH
83385: LD_INT 301
83387: DOUBLE
83388: EQUAL
83389: IFTRUE 83393
83391: GO 83425
83393: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
83394: LD_VAR 0 6
83398: PPUSH
83399: LD_VAR 0 7
83403: PPUSH
83404: LD_VAR 0 8
83408: PPUSH
83409: LD_VAR 0 4
83413: PPUSH
83414: LD_VAR 0 5
83418: PPUSH
83419: CALL 84626 0 5
83423: GO 83546
83425: LD_INT 302
83427: DOUBLE
83428: EQUAL
83429: IFTRUE 83433
83431: GO 83470
83433: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
83434: LD_VAR 0 6
83438: PPUSH
83439: LD_VAR 0 7
83443: PPUSH
83444: LD_VAR 0 8
83448: PPUSH
83449: LD_VAR 0 9
83453: PPUSH
83454: LD_VAR 0 4
83458: PPUSH
83459: LD_VAR 0 5
83463: PPUSH
83464: CALL 84717 0 6
83468: GO 83546
83470: LD_INT 303
83472: DOUBLE
83473: EQUAL
83474: IFTRUE 83478
83476: GO 83515
83478: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
83479: LD_VAR 0 6
83483: PPUSH
83484: LD_VAR 0 7
83488: PPUSH
83489: LD_VAR 0 8
83493: PPUSH
83494: LD_VAR 0 9
83498: PPUSH
83499: LD_VAR 0 4
83503: PPUSH
83504: LD_VAR 0 5
83508: PPUSH
83509: CALL 83551 0 6
83513: GO 83546
83515: LD_INT 304
83517: DOUBLE
83518: EQUAL
83519: IFTRUE 83523
83521: GO 83545
83523: POP
// hHackTeleport ( unit , x , y ) ; end ;
83524: LD_VAR 0 2
83528: PPUSH
83529: LD_VAR 0 4
83533: PPUSH
83534: LD_VAR 0 5
83538: PPUSH
83539: CALL 85310 0 3
83543: GO 83546
83545: POP
// end ;
83546: LD_VAR 0 12
83550: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
83551: LD_INT 0
83553: PPUSH
83554: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
83555: LD_VAR 0 1
83559: PUSH
83560: LD_INT 1
83562: LESS
83563: PUSH
83564: LD_VAR 0 1
83568: PUSH
83569: LD_INT 3
83571: GREATER
83572: OR
83573: PUSH
83574: LD_VAR 0 5
83578: PPUSH
83579: LD_VAR 0 6
83583: PPUSH
83584: CALL_OW 428
83588: OR
83589: IFFALSE 83593
// exit ;
83591: GO 84313
// uc_side := your_side ;
83593: LD_ADDR_OWVAR 20
83597: PUSH
83598: LD_OWVAR 2
83602: ST_TO_ADDR
// uc_nation := nation ;
83603: LD_ADDR_OWVAR 21
83607: PUSH
83608: LD_VAR 0 1
83612: ST_TO_ADDR
// bc_level = 1 ;
83613: LD_ADDR_OWVAR 43
83617: PUSH
83618: LD_INT 1
83620: ST_TO_ADDR
// case btype of 1 :
83621: LD_VAR 0 2
83625: PUSH
83626: LD_INT 1
83628: DOUBLE
83629: EQUAL
83630: IFTRUE 83634
83632: GO 83645
83634: POP
// bc_type := b_depot ; 2 :
83635: LD_ADDR_OWVAR 42
83639: PUSH
83640: LD_INT 0
83642: ST_TO_ADDR
83643: GO 84257
83645: LD_INT 2
83647: DOUBLE
83648: EQUAL
83649: IFTRUE 83653
83651: GO 83664
83653: POP
// bc_type := b_warehouse ; 3 :
83654: LD_ADDR_OWVAR 42
83658: PUSH
83659: LD_INT 1
83661: ST_TO_ADDR
83662: GO 84257
83664: LD_INT 3
83666: DOUBLE
83667: EQUAL
83668: IFTRUE 83672
83670: GO 83683
83672: POP
// bc_type := b_lab ; 4 .. 9 :
83673: LD_ADDR_OWVAR 42
83677: PUSH
83678: LD_INT 6
83680: ST_TO_ADDR
83681: GO 84257
83683: LD_INT 4
83685: DOUBLE
83686: GREATEREQUAL
83687: IFFALSE 83695
83689: LD_INT 9
83691: DOUBLE
83692: LESSEQUAL
83693: IFTRUE 83697
83695: GO 83749
83697: POP
// begin bc_type := b_lab_half ;
83698: LD_ADDR_OWVAR 42
83702: PUSH
83703: LD_INT 7
83705: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
83706: LD_ADDR_OWVAR 44
83710: PUSH
83711: LD_INT 10
83713: PUSH
83714: LD_INT 11
83716: PUSH
83717: LD_INT 12
83719: PUSH
83720: LD_INT 15
83722: PUSH
83723: LD_INT 14
83725: PUSH
83726: LD_INT 13
83728: PUSH
83729: EMPTY
83730: LIST
83731: LIST
83732: LIST
83733: LIST
83734: LIST
83735: LIST
83736: PUSH
83737: LD_VAR 0 2
83741: PUSH
83742: LD_INT 3
83744: MINUS
83745: ARRAY
83746: ST_TO_ADDR
// end ; 10 .. 13 :
83747: GO 84257
83749: LD_INT 10
83751: DOUBLE
83752: GREATEREQUAL
83753: IFFALSE 83761
83755: LD_INT 13
83757: DOUBLE
83758: LESSEQUAL
83759: IFTRUE 83763
83761: GO 83840
83763: POP
// begin bc_type := b_lab_full ;
83764: LD_ADDR_OWVAR 42
83768: PUSH
83769: LD_INT 8
83771: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
83772: LD_ADDR_OWVAR 44
83776: PUSH
83777: LD_INT 10
83779: PUSH
83780: LD_INT 12
83782: PUSH
83783: LD_INT 14
83785: PUSH
83786: LD_INT 13
83788: PUSH
83789: EMPTY
83790: LIST
83791: LIST
83792: LIST
83793: LIST
83794: PUSH
83795: LD_VAR 0 2
83799: PUSH
83800: LD_INT 9
83802: MINUS
83803: ARRAY
83804: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
83805: LD_ADDR_OWVAR 45
83809: PUSH
83810: LD_INT 11
83812: PUSH
83813: LD_INT 15
83815: PUSH
83816: LD_INT 12
83818: PUSH
83819: LD_INT 15
83821: PUSH
83822: EMPTY
83823: LIST
83824: LIST
83825: LIST
83826: LIST
83827: PUSH
83828: LD_VAR 0 2
83832: PUSH
83833: LD_INT 9
83835: MINUS
83836: ARRAY
83837: ST_TO_ADDR
// end ; 14 :
83838: GO 84257
83840: LD_INT 14
83842: DOUBLE
83843: EQUAL
83844: IFTRUE 83848
83846: GO 83859
83848: POP
// bc_type := b_workshop ; 15 :
83849: LD_ADDR_OWVAR 42
83853: PUSH
83854: LD_INT 2
83856: ST_TO_ADDR
83857: GO 84257
83859: LD_INT 15
83861: DOUBLE
83862: EQUAL
83863: IFTRUE 83867
83865: GO 83878
83867: POP
// bc_type := b_factory ; 16 :
83868: LD_ADDR_OWVAR 42
83872: PUSH
83873: LD_INT 3
83875: ST_TO_ADDR
83876: GO 84257
83878: LD_INT 16
83880: DOUBLE
83881: EQUAL
83882: IFTRUE 83886
83884: GO 83897
83886: POP
// bc_type := b_ext_gun ; 17 :
83887: LD_ADDR_OWVAR 42
83891: PUSH
83892: LD_INT 17
83894: ST_TO_ADDR
83895: GO 84257
83897: LD_INT 17
83899: DOUBLE
83900: EQUAL
83901: IFTRUE 83905
83903: GO 83933
83905: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
83906: LD_ADDR_OWVAR 42
83910: PUSH
83911: LD_INT 19
83913: PUSH
83914: LD_INT 23
83916: PUSH
83917: LD_INT 19
83919: PUSH
83920: EMPTY
83921: LIST
83922: LIST
83923: LIST
83924: PUSH
83925: LD_VAR 0 1
83929: ARRAY
83930: ST_TO_ADDR
83931: GO 84257
83933: LD_INT 18
83935: DOUBLE
83936: EQUAL
83937: IFTRUE 83941
83939: GO 83952
83941: POP
// bc_type := b_ext_radar ; 19 :
83942: LD_ADDR_OWVAR 42
83946: PUSH
83947: LD_INT 20
83949: ST_TO_ADDR
83950: GO 84257
83952: LD_INT 19
83954: DOUBLE
83955: EQUAL
83956: IFTRUE 83960
83958: GO 83971
83960: POP
// bc_type := b_ext_radio ; 20 :
83961: LD_ADDR_OWVAR 42
83965: PUSH
83966: LD_INT 22
83968: ST_TO_ADDR
83969: GO 84257
83971: LD_INT 20
83973: DOUBLE
83974: EQUAL
83975: IFTRUE 83979
83977: GO 83990
83979: POP
// bc_type := b_ext_siberium ; 21 :
83980: LD_ADDR_OWVAR 42
83984: PUSH
83985: LD_INT 21
83987: ST_TO_ADDR
83988: GO 84257
83990: LD_INT 21
83992: DOUBLE
83993: EQUAL
83994: IFTRUE 83998
83996: GO 84009
83998: POP
// bc_type := b_ext_computer ; 22 :
83999: LD_ADDR_OWVAR 42
84003: PUSH
84004: LD_INT 24
84006: ST_TO_ADDR
84007: GO 84257
84009: LD_INT 22
84011: DOUBLE
84012: EQUAL
84013: IFTRUE 84017
84015: GO 84028
84017: POP
// bc_type := b_ext_track ; 23 :
84018: LD_ADDR_OWVAR 42
84022: PUSH
84023: LD_INT 16
84025: ST_TO_ADDR
84026: GO 84257
84028: LD_INT 23
84030: DOUBLE
84031: EQUAL
84032: IFTRUE 84036
84034: GO 84047
84036: POP
// bc_type := b_ext_laser ; 24 :
84037: LD_ADDR_OWVAR 42
84041: PUSH
84042: LD_INT 25
84044: ST_TO_ADDR
84045: GO 84257
84047: LD_INT 24
84049: DOUBLE
84050: EQUAL
84051: IFTRUE 84055
84053: GO 84066
84055: POP
// bc_type := b_control_tower ; 25 :
84056: LD_ADDR_OWVAR 42
84060: PUSH
84061: LD_INT 36
84063: ST_TO_ADDR
84064: GO 84257
84066: LD_INT 25
84068: DOUBLE
84069: EQUAL
84070: IFTRUE 84074
84072: GO 84085
84074: POP
// bc_type := b_breastwork ; 26 :
84075: LD_ADDR_OWVAR 42
84079: PUSH
84080: LD_INT 31
84082: ST_TO_ADDR
84083: GO 84257
84085: LD_INT 26
84087: DOUBLE
84088: EQUAL
84089: IFTRUE 84093
84091: GO 84104
84093: POP
// bc_type := b_bunker ; 27 :
84094: LD_ADDR_OWVAR 42
84098: PUSH
84099: LD_INT 32
84101: ST_TO_ADDR
84102: GO 84257
84104: LD_INT 27
84106: DOUBLE
84107: EQUAL
84108: IFTRUE 84112
84110: GO 84123
84112: POP
// bc_type := b_turret ; 28 :
84113: LD_ADDR_OWVAR 42
84117: PUSH
84118: LD_INT 33
84120: ST_TO_ADDR
84121: GO 84257
84123: LD_INT 28
84125: DOUBLE
84126: EQUAL
84127: IFTRUE 84131
84129: GO 84142
84131: POP
// bc_type := b_armoury ; 29 :
84132: LD_ADDR_OWVAR 42
84136: PUSH
84137: LD_INT 4
84139: ST_TO_ADDR
84140: GO 84257
84142: LD_INT 29
84144: DOUBLE
84145: EQUAL
84146: IFTRUE 84150
84148: GO 84161
84150: POP
// bc_type := b_barracks ; 30 :
84151: LD_ADDR_OWVAR 42
84155: PUSH
84156: LD_INT 5
84158: ST_TO_ADDR
84159: GO 84257
84161: LD_INT 30
84163: DOUBLE
84164: EQUAL
84165: IFTRUE 84169
84167: GO 84180
84169: POP
// bc_type := b_solar_power ; 31 :
84170: LD_ADDR_OWVAR 42
84174: PUSH
84175: LD_INT 27
84177: ST_TO_ADDR
84178: GO 84257
84180: LD_INT 31
84182: DOUBLE
84183: EQUAL
84184: IFTRUE 84188
84186: GO 84199
84188: POP
// bc_type := b_oil_power ; 32 :
84189: LD_ADDR_OWVAR 42
84193: PUSH
84194: LD_INT 26
84196: ST_TO_ADDR
84197: GO 84257
84199: LD_INT 32
84201: DOUBLE
84202: EQUAL
84203: IFTRUE 84207
84205: GO 84218
84207: POP
// bc_type := b_siberite_power ; 33 :
84208: LD_ADDR_OWVAR 42
84212: PUSH
84213: LD_INT 28
84215: ST_TO_ADDR
84216: GO 84257
84218: LD_INT 33
84220: DOUBLE
84221: EQUAL
84222: IFTRUE 84226
84224: GO 84237
84226: POP
// bc_type := b_oil_mine ; 34 :
84227: LD_ADDR_OWVAR 42
84231: PUSH
84232: LD_INT 29
84234: ST_TO_ADDR
84235: GO 84257
84237: LD_INT 34
84239: DOUBLE
84240: EQUAL
84241: IFTRUE 84245
84243: GO 84256
84245: POP
// bc_type := b_siberite_mine ; end ;
84246: LD_ADDR_OWVAR 42
84250: PUSH
84251: LD_INT 30
84253: ST_TO_ADDR
84254: GO 84257
84256: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
84257: LD_ADDR_VAR 0 8
84261: PUSH
84262: LD_VAR 0 5
84266: PPUSH
84267: LD_VAR 0 6
84271: PPUSH
84272: LD_VAR 0 3
84276: PPUSH
84277: CALL_OW 47
84281: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
84282: LD_OWVAR 42
84286: PUSH
84287: LD_INT 32
84289: PUSH
84290: LD_INT 33
84292: PUSH
84293: EMPTY
84294: LIST
84295: LIST
84296: IN
84297: IFFALSE 84313
// PlaceWeaponTurret ( b , weapon ) ;
84299: LD_VAR 0 8
84303: PPUSH
84304: LD_VAR 0 4
84308: PPUSH
84309: CALL_OW 431
// end ;
84313: LD_VAR 0 7
84317: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
84318: LD_INT 0
84320: PPUSH
84321: PPUSH
84322: PPUSH
84323: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
84324: LD_ADDR_VAR 0 4
84328: PUSH
84329: LD_INT 22
84331: PUSH
84332: LD_OWVAR 2
84336: PUSH
84337: EMPTY
84338: LIST
84339: LIST
84340: PUSH
84341: LD_INT 2
84343: PUSH
84344: LD_INT 30
84346: PUSH
84347: LD_INT 0
84349: PUSH
84350: EMPTY
84351: LIST
84352: LIST
84353: PUSH
84354: LD_INT 30
84356: PUSH
84357: LD_INT 1
84359: PUSH
84360: EMPTY
84361: LIST
84362: LIST
84363: PUSH
84364: EMPTY
84365: LIST
84366: LIST
84367: LIST
84368: PUSH
84369: EMPTY
84370: LIST
84371: LIST
84372: PPUSH
84373: CALL_OW 69
84377: ST_TO_ADDR
// if not tmp then
84378: LD_VAR 0 4
84382: NOT
84383: IFFALSE 84387
// exit ;
84385: GO 84446
// for i in tmp do
84387: LD_ADDR_VAR 0 2
84391: PUSH
84392: LD_VAR 0 4
84396: PUSH
84397: FOR_IN
84398: IFFALSE 84444
// for j = 1 to 3 do
84400: LD_ADDR_VAR 0 3
84404: PUSH
84405: DOUBLE
84406: LD_INT 1
84408: DEC
84409: ST_TO_ADDR
84410: LD_INT 3
84412: PUSH
84413: FOR_TO
84414: IFFALSE 84440
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
84416: LD_VAR 0 2
84420: PPUSH
84421: CALL_OW 274
84425: PPUSH
84426: LD_VAR 0 3
84430: PPUSH
84431: LD_INT 99999
84433: PPUSH
84434: CALL_OW 277
84438: GO 84413
84440: POP
84441: POP
84442: GO 84397
84444: POP
84445: POP
// end ;
84446: LD_VAR 0 1
84450: RET
// export function hHackSetLevel10 ; var i , j ; begin
84451: LD_INT 0
84453: PPUSH
84454: PPUSH
84455: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84456: LD_ADDR_VAR 0 2
84460: PUSH
84461: LD_INT 21
84463: PUSH
84464: LD_INT 1
84466: PUSH
84467: EMPTY
84468: LIST
84469: LIST
84470: PPUSH
84471: CALL_OW 69
84475: PUSH
84476: FOR_IN
84477: IFFALSE 84529
// if IsSelected ( i ) then
84479: LD_VAR 0 2
84483: PPUSH
84484: CALL_OW 306
84488: IFFALSE 84527
// begin for j := 1 to 4 do
84490: LD_ADDR_VAR 0 3
84494: PUSH
84495: DOUBLE
84496: LD_INT 1
84498: DEC
84499: ST_TO_ADDR
84500: LD_INT 4
84502: PUSH
84503: FOR_TO
84504: IFFALSE 84525
// SetSkill ( i , j , 10 ) ;
84506: LD_VAR 0 2
84510: PPUSH
84511: LD_VAR 0 3
84515: PPUSH
84516: LD_INT 10
84518: PPUSH
84519: CALL_OW 237
84523: GO 84503
84525: POP
84526: POP
// end ;
84527: GO 84476
84529: POP
84530: POP
// end ;
84531: LD_VAR 0 1
84535: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
84536: LD_INT 0
84538: PPUSH
84539: PPUSH
84540: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
84541: LD_ADDR_VAR 0 2
84545: PUSH
84546: LD_INT 22
84548: PUSH
84549: LD_OWVAR 2
84553: PUSH
84554: EMPTY
84555: LIST
84556: LIST
84557: PUSH
84558: LD_INT 21
84560: PUSH
84561: LD_INT 1
84563: PUSH
84564: EMPTY
84565: LIST
84566: LIST
84567: PUSH
84568: EMPTY
84569: LIST
84570: LIST
84571: PPUSH
84572: CALL_OW 69
84576: PUSH
84577: FOR_IN
84578: IFFALSE 84619
// begin for j := 1 to 4 do
84580: LD_ADDR_VAR 0 3
84584: PUSH
84585: DOUBLE
84586: LD_INT 1
84588: DEC
84589: ST_TO_ADDR
84590: LD_INT 4
84592: PUSH
84593: FOR_TO
84594: IFFALSE 84615
// SetSkill ( i , j , 10 ) ;
84596: LD_VAR 0 2
84600: PPUSH
84601: LD_VAR 0 3
84605: PPUSH
84606: LD_INT 10
84608: PPUSH
84609: CALL_OW 237
84613: GO 84593
84615: POP
84616: POP
// end ;
84617: GO 84577
84619: POP
84620: POP
// end ;
84621: LD_VAR 0 1
84625: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
84626: LD_INT 0
84628: PPUSH
// uc_side := your_side ;
84629: LD_ADDR_OWVAR 20
84633: PUSH
84634: LD_OWVAR 2
84638: ST_TO_ADDR
// uc_nation := nation ;
84639: LD_ADDR_OWVAR 21
84643: PUSH
84644: LD_VAR 0 1
84648: ST_TO_ADDR
// InitHc ;
84649: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
84653: LD_INT 0
84655: PPUSH
84656: LD_VAR 0 2
84660: PPUSH
84661: LD_VAR 0 3
84665: PPUSH
84666: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
84670: LD_VAR 0 4
84674: PPUSH
84675: LD_VAR 0 5
84679: PPUSH
84680: CALL_OW 428
84684: PUSH
84685: LD_INT 0
84687: EQUAL
84688: IFFALSE 84712
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
84690: CALL_OW 44
84694: PPUSH
84695: LD_VAR 0 4
84699: PPUSH
84700: LD_VAR 0 5
84704: PPUSH
84705: LD_INT 1
84707: PPUSH
84708: CALL_OW 48
// end ;
84712: LD_VAR 0 6
84716: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
84717: LD_INT 0
84719: PPUSH
84720: PPUSH
// uc_side := your_side ;
84721: LD_ADDR_OWVAR 20
84725: PUSH
84726: LD_OWVAR 2
84730: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
84731: LD_VAR 0 1
84735: PUSH
84736: LD_INT 1
84738: PUSH
84739: LD_INT 2
84741: PUSH
84742: LD_INT 3
84744: PUSH
84745: LD_INT 4
84747: PUSH
84748: LD_INT 5
84750: PUSH
84751: EMPTY
84752: LIST
84753: LIST
84754: LIST
84755: LIST
84756: LIST
84757: IN
84758: IFFALSE 84770
// uc_nation := nation_american else
84760: LD_ADDR_OWVAR 21
84764: PUSH
84765: LD_INT 1
84767: ST_TO_ADDR
84768: GO 84813
// if chassis in [ 11 , 12 , 13 , 14 ] then
84770: LD_VAR 0 1
84774: PUSH
84775: LD_INT 11
84777: PUSH
84778: LD_INT 12
84780: PUSH
84781: LD_INT 13
84783: PUSH
84784: LD_INT 14
84786: PUSH
84787: EMPTY
84788: LIST
84789: LIST
84790: LIST
84791: LIST
84792: IN
84793: IFFALSE 84805
// uc_nation := nation_arabian else
84795: LD_ADDR_OWVAR 21
84799: PUSH
84800: LD_INT 2
84802: ST_TO_ADDR
84803: GO 84813
// uc_nation := nation_russian ;
84805: LD_ADDR_OWVAR 21
84809: PUSH
84810: LD_INT 3
84812: ST_TO_ADDR
// vc_chassis := chassis ;
84813: LD_ADDR_OWVAR 37
84817: PUSH
84818: LD_VAR 0 1
84822: ST_TO_ADDR
// vc_engine := engine ;
84823: LD_ADDR_OWVAR 39
84827: PUSH
84828: LD_VAR 0 2
84832: ST_TO_ADDR
// vc_control := control ;
84833: LD_ADDR_OWVAR 38
84837: PUSH
84838: LD_VAR 0 3
84842: ST_TO_ADDR
// vc_weapon := weapon ;
84843: LD_ADDR_OWVAR 40
84847: PUSH
84848: LD_VAR 0 4
84852: ST_TO_ADDR
// un := CreateVehicle ;
84853: LD_ADDR_VAR 0 8
84857: PUSH
84858: CALL_OW 45
84862: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
84863: LD_VAR 0 8
84867: PPUSH
84868: LD_INT 0
84870: PPUSH
84871: LD_INT 5
84873: PPUSH
84874: CALL_OW 12
84878: PPUSH
84879: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
84883: LD_VAR 0 8
84887: PPUSH
84888: LD_VAR 0 5
84892: PPUSH
84893: LD_VAR 0 6
84897: PPUSH
84898: LD_INT 1
84900: PPUSH
84901: CALL_OW 48
// end ;
84905: LD_VAR 0 7
84909: RET
// export hInvincible ; every 1 do
84910: GO 84912
84912: DISABLE
// hInvincible := [ ] ;
84913: LD_ADDR_EXP 121
84917: PUSH
84918: EMPTY
84919: ST_TO_ADDR
84920: END
// every 10 do var i ;
84921: GO 84923
84923: DISABLE
84924: LD_INT 0
84926: PPUSH
// begin enable ;
84927: ENABLE
// if not hInvincible then
84928: LD_EXP 121
84932: NOT
84933: IFFALSE 84937
// exit ;
84935: GO 84981
// for i in hInvincible do
84937: LD_ADDR_VAR 0 1
84941: PUSH
84942: LD_EXP 121
84946: PUSH
84947: FOR_IN
84948: IFFALSE 84979
// if GetLives ( i ) < 1000 then
84950: LD_VAR 0 1
84954: PPUSH
84955: CALL_OW 256
84959: PUSH
84960: LD_INT 1000
84962: LESS
84963: IFFALSE 84977
// SetLives ( i , 1000 ) ;
84965: LD_VAR 0 1
84969: PPUSH
84970: LD_INT 1000
84972: PPUSH
84973: CALL_OW 234
84977: GO 84947
84979: POP
84980: POP
// end ;
84981: PPOPN 1
84983: END
// export function hHackInvincible ; var i ; begin
84984: LD_INT 0
84986: PPUSH
84987: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
84988: LD_ADDR_VAR 0 2
84992: PUSH
84993: LD_INT 2
84995: PUSH
84996: LD_INT 21
84998: PUSH
84999: LD_INT 1
85001: PUSH
85002: EMPTY
85003: LIST
85004: LIST
85005: PUSH
85006: LD_INT 21
85008: PUSH
85009: LD_INT 2
85011: PUSH
85012: EMPTY
85013: LIST
85014: LIST
85015: PUSH
85016: EMPTY
85017: LIST
85018: LIST
85019: LIST
85020: PPUSH
85021: CALL_OW 69
85025: PUSH
85026: FOR_IN
85027: IFFALSE 85088
// if IsSelected ( i ) then
85029: LD_VAR 0 2
85033: PPUSH
85034: CALL_OW 306
85038: IFFALSE 85086
// begin if i in hInvincible then
85040: LD_VAR 0 2
85044: PUSH
85045: LD_EXP 121
85049: IN
85050: IFFALSE 85070
// hInvincible := hInvincible diff i else
85052: LD_ADDR_EXP 121
85056: PUSH
85057: LD_EXP 121
85061: PUSH
85062: LD_VAR 0 2
85066: DIFF
85067: ST_TO_ADDR
85068: GO 85086
// hInvincible := hInvincible union i ;
85070: LD_ADDR_EXP 121
85074: PUSH
85075: LD_EXP 121
85079: PUSH
85080: LD_VAR 0 2
85084: UNION
85085: ST_TO_ADDR
// end ;
85086: GO 85026
85088: POP
85089: POP
// end ;
85090: LD_VAR 0 1
85094: RET
// export function hHackInvisible ; var i , j ; begin
85095: LD_INT 0
85097: PPUSH
85098: PPUSH
85099: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
85100: LD_ADDR_VAR 0 2
85104: PUSH
85105: LD_INT 21
85107: PUSH
85108: LD_INT 1
85110: PUSH
85111: EMPTY
85112: LIST
85113: LIST
85114: PPUSH
85115: CALL_OW 69
85119: PUSH
85120: FOR_IN
85121: IFFALSE 85145
// if IsSelected ( i ) then
85123: LD_VAR 0 2
85127: PPUSH
85128: CALL_OW 306
85132: IFFALSE 85143
// ComForceInvisible ( i ) ;
85134: LD_VAR 0 2
85138: PPUSH
85139: CALL_OW 496
85143: GO 85120
85145: POP
85146: POP
// end ;
85147: LD_VAR 0 1
85151: RET
// export function hHackChangeYourSide ; begin
85152: LD_INT 0
85154: PPUSH
// if your_side = 8 then
85155: LD_OWVAR 2
85159: PUSH
85160: LD_INT 8
85162: EQUAL
85163: IFFALSE 85175
// your_side := 0 else
85165: LD_ADDR_OWVAR 2
85169: PUSH
85170: LD_INT 0
85172: ST_TO_ADDR
85173: GO 85189
// your_side := your_side + 1 ;
85175: LD_ADDR_OWVAR 2
85179: PUSH
85180: LD_OWVAR 2
85184: PUSH
85185: LD_INT 1
85187: PLUS
85188: ST_TO_ADDR
// end ;
85189: LD_VAR 0 1
85193: RET
// export function hHackChangeUnitSide ; var i , j ; begin
85194: LD_INT 0
85196: PPUSH
85197: PPUSH
85198: PPUSH
// for i in all_units do
85199: LD_ADDR_VAR 0 2
85203: PUSH
85204: LD_OWVAR 3
85208: PUSH
85209: FOR_IN
85210: IFFALSE 85288
// if IsSelected ( i ) then
85212: LD_VAR 0 2
85216: PPUSH
85217: CALL_OW 306
85221: IFFALSE 85286
// begin j := GetSide ( i ) ;
85223: LD_ADDR_VAR 0 3
85227: PUSH
85228: LD_VAR 0 2
85232: PPUSH
85233: CALL_OW 255
85237: ST_TO_ADDR
// if j = 8 then
85238: LD_VAR 0 3
85242: PUSH
85243: LD_INT 8
85245: EQUAL
85246: IFFALSE 85258
// j := 0 else
85248: LD_ADDR_VAR 0 3
85252: PUSH
85253: LD_INT 0
85255: ST_TO_ADDR
85256: GO 85272
// j := j + 1 ;
85258: LD_ADDR_VAR 0 3
85262: PUSH
85263: LD_VAR 0 3
85267: PUSH
85268: LD_INT 1
85270: PLUS
85271: ST_TO_ADDR
// SetSide ( i , j ) ;
85272: LD_VAR 0 2
85276: PPUSH
85277: LD_VAR 0 3
85281: PPUSH
85282: CALL_OW 235
// end ;
85286: GO 85209
85288: POP
85289: POP
// end ;
85290: LD_VAR 0 1
85294: RET
// export function hHackFog ; begin
85295: LD_INT 0
85297: PPUSH
// FogOff ( true ) ;
85298: LD_INT 1
85300: PPUSH
85301: CALL_OW 344
// end ;
85305: LD_VAR 0 1
85309: RET
// export function hHackTeleport ( unit , x , y ) ; begin
85310: LD_INT 0
85312: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
85313: LD_VAR 0 1
85317: PPUSH
85318: LD_VAR 0 2
85322: PPUSH
85323: LD_VAR 0 3
85327: PPUSH
85328: LD_INT 1
85330: PPUSH
85331: LD_INT 1
85333: PPUSH
85334: CALL_OW 483
// CenterOnXY ( x , y ) ;
85338: LD_VAR 0 2
85342: PPUSH
85343: LD_VAR 0 3
85347: PPUSH
85348: CALL_OW 84
// end ;
85352: LD_VAR 0 4
85356: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
85357: LD_INT 0
85359: PPUSH
85360: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
85361: LD_VAR 0 1
85365: NOT
85366: PUSH
85367: LD_VAR 0 2
85371: PPUSH
85372: LD_VAR 0 3
85376: PPUSH
85377: CALL_OW 488
85381: NOT
85382: OR
85383: PUSH
85384: LD_VAR 0 1
85388: PPUSH
85389: CALL_OW 266
85393: PUSH
85394: LD_INT 3
85396: NONEQUAL
85397: PUSH
85398: LD_VAR 0 1
85402: PPUSH
85403: CALL_OW 247
85407: PUSH
85408: LD_INT 1
85410: EQUAL
85411: NOT
85412: AND
85413: OR
85414: IFFALSE 85418
// exit ;
85416: GO 85567
// if GetType ( factory ) = unit_human then
85418: LD_VAR 0 1
85422: PPUSH
85423: CALL_OW 247
85427: PUSH
85428: LD_INT 1
85430: EQUAL
85431: IFFALSE 85448
// factory := IsInUnit ( factory ) ;
85433: LD_ADDR_VAR 0 1
85437: PUSH
85438: LD_VAR 0 1
85442: PPUSH
85443: CALL_OW 310
85447: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
85448: LD_VAR 0 1
85452: PPUSH
85453: CALL_OW 266
85457: PUSH
85458: LD_INT 3
85460: NONEQUAL
85461: IFFALSE 85465
// exit ;
85463: GO 85567
// if HexInfo ( x , y ) = factory then
85465: LD_VAR 0 2
85469: PPUSH
85470: LD_VAR 0 3
85474: PPUSH
85475: CALL_OW 428
85479: PUSH
85480: LD_VAR 0 1
85484: EQUAL
85485: IFFALSE 85512
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
85487: LD_ADDR_EXP 122
85491: PUSH
85492: LD_EXP 122
85496: PPUSH
85497: LD_VAR 0 1
85501: PPUSH
85502: LD_INT 0
85504: PPUSH
85505: CALL_OW 1
85509: ST_TO_ADDR
85510: GO 85563
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
85512: LD_ADDR_EXP 122
85516: PUSH
85517: LD_EXP 122
85521: PPUSH
85522: LD_VAR 0 1
85526: PPUSH
85527: LD_VAR 0 1
85531: PPUSH
85532: CALL_OW 255
85536: PUSH
85537: LD_VAR 0 1
85541: PUSH
85542: LD_VAR 0 2
85546: PUSH
85547: LD_VAR 0 3
85551: PUSH
85552: EMPTY
85553: LIST
85554: LIST
85555: LIST
85556: LIST
85557: PPUSH
85558: CALL_OW 1
85562: ST_TO_ADDR
// UpdateFactoryWaypoints ;
85563: CALL 85572 0 0
// end ;
85567: LD_VAR 0 4
85571: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
85572: LD_INT 0
85574: PPUSH
85575: PPUSH
85576: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
85577: LD_STRING resetFactoryWaypoint();
85579: PPUSH
85580: CALL_OW 559
// if factoryWaypoints then
85584: LD_EXP 122
85588: IFFALSE 85714
// begin list := PrepareArray ( factoryWaypoints ) ;
85590: LD_ADDR_VAR 0 3
85594: PUSH
85595: LD_EXP 122
85599: PPUSH
85600: CALL 70630 0 1
85604: ST_TO_ADDR
// for i := 1 to list do
85605: LD_ADDR_VAR 0 2
85609: PUSH
85610: DOUBLE
85611: LD_INT 1
85613: DEC
85614: ST_TO_ADDR
85615: LD_VAR 0 3
85619: PUSH
85620: FOR_TO
85621: IFFALSE 85712
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85623: LD_STRING setFactoryWaypointXY(
85625: PUSH
85626: LD_VAR 0 3
85630: PUSH
85631: LD_VAR 0 2
85635: ARRAY
85636: PUSH
85637: LD_INT 1
85639: ARRAY
85640: STR
85641: PUSH
85642: LD_STRING ,
85644: STR
85645: PUSH
85646: LD_VAR 0 3
85650: PUSH
85651: LD_VAR 0 2
85655: ARRAY
85656: PUSH
85657: LD_INT 2
85659: ARRAY
85660: STR
85661: PUSH
85662: LD_STRING ,
85664: STR
85665: PUSH
85666: LD_VAR 0 3
85670: PUSH
85671: LD_VAR 0 2
85675: ARRAY
85676: PUSH
85677: LD_INT 3
85679: ARRAY
85680: STR
85681: PUSH
85682: LD_STRING ,
85684: STR
85685: PUSH
85686: LD_VAR 0 3
85690: PUSH
85691: LD_VAR 0 2
85695: ARRAY
85696: PUSH
85697: LD_INT 4
85699: ARRAY
85700: STR
85701: PUSH
85702: LD_STRING )
85704: STR
85705: PPUSH
85706: CALL_OW 559
85710: GO 85620
85712: POP
85713: POP
// end ; end ;
85714: LD_VAR 0 1
85718: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
85719: LD_INT 0
85721: PPUSH
// if HexInfo ( x , y ) = warehouse then
85722: LD_VAR 0 2
85726: PPUSH
85727: LD_VAR 0 3
85731: PPUSH
85732: CALL_OW 428
85736: PUSH
85737: LD_VAR 0 1
85741: EQUAL
85742: IFFALSE 85769
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
85744: LD_ADDR_EXP 123
85748: PUSH
85749: LD_EXP 123
85753: PPUSH
85754: LD_VAR 0 1
85758: PPUSH
85759: LD_INT 0
85761: PPUSH
85762: CALL_OW 1
85766: ST_TO_ADDR
85767: GO 85820
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
85769: LD_ADDR_EXP 123
85773: PUSH
85774: LD_EXP 123
85778: PPUSH
85779: LD_VAR 0 1
85783: PPUSH
85784: LD_VAR 0 1
85788: PPUSH
85789: CALL_OW 255
85793: PUSH
85794: LD_VAR 0 1
85798: PUSH
85799: LD_VAR 0 2
85803: PUSH
85804: LD_VAR 0 3
85808: PUSH
85809: EMPTY
85810: LIST
85811: LIST
85812: LIST
85813: LIST
85814: PPUSH
85815: CALL_OW 1
85819: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
85820: CALL 85829 0 0
// end ;
85824: LD_VAR 0 4
85828: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
85829: LD_INT 0
85831: PPUSH
85832: PPUSH
85833: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
85834: LD_STRING resetWarehouseGatheringPoints();
85836: PPUSH
85837: CALL_OW 559
// if warehouseGatheringPoints then
85841: LD_EXP 123
85845: IFFALSE 85971
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
85847: LD_ADDR_VAR 0 3
85851: PUSH
85852: LD_EXP 123
85856: PPUSH
85857: CALL 70630 0 1
85861: ST_TO_ADDR
// for i := 1 to list do
85862: LD_ADDR_VAR 0 2
85866: PUSH
85867: DOUBLE
85868: LD_INT 1
85870: DEC
85871: ST_TO_ADDR
85872: LD_VAR 0 3
85876: PUSH
85877: FOR_TO
85878: IFFALSE 85969
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85880: LD_STRING setWarehouseGatheringPointXY(
85882: PUSH
85883: LD_VAR 0 3
85887: PUSH
85888: LD_VAR 0 2
85892: ARRAY
85893: PUSH
85894: LD_INT 1
85896: ARRAY
85897: STR
85898: PUSH
85899: LD_STRING ,
85901: STR
85902: PUSH
85903: LD_VAR 0 3
85907: PUSH
85908: LD_VAR 0 2
85912: ARRAY
85913: PUSH
85914: LD_INT 2
85916: ARRAY
85917: STR
85918: PUSH
85919: LD_STRING ,
85921: STR
85922: PUSH
85923: LD_VAR 0 3
85927: PUSH
85928: LD_VAR 0 2
85932: ARRAY
85933: PUSH
85934: LD_INT 3
85936: ARRAY
85937: STR
85938: PUSH
85939: LD_STRING ,
85941: STR
85942: PUSH
85943: LD_VAR 0 3
85947: PUSH
85948: LD_VAR 0 2
85952: ARRAY
85953: PUSH
85954: LD_INT 4
85956: ARRAY
85957: STR
85958: PUSH
85959: LD_STRING )
85961: STR
85962: PPUSH
85963: CALL_OW 559
85967: GO 85877
85969: POP
85970: POP
// end ; end ;
85971: LD_VAR 0 1
85975: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
85976: LD_EXP 123
85980: IFFALSE 86665
85982: GO 85984
85984: DISABLE
85985: LD_INT 0
85987: PPUSH
85988: PPUSH
85989: PPUSH
85990: PPUSH
85991: PPUSH
85992: PPUSH
85993: PPUSH
85994: PPUSH
85995: PPUSH
// begin enable ;
85996: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
85997: LD_ADDR_VAR 0 3
86001: PUSH
86002: LD_EXP 123
86006: PPUSH
86007: CALL 70630 0 1
86011: ST_TO_ADDR
// if not list then
86012: LD_VAR 0 3
86016: NOT
86017: IFFALSE 86021
// exit ;
86019: GO 86665
// for i := 1 to list do
86021: LD_ADDR_VAR 0 1
86025: PUSH
86026: DOUBLE
86027: LD_INT 1
86029: DEC
86030: ST_TO_ADDR
86031: LD_VAR 0 3
86035: PUSH
86036: FOR_TO
86037: IFFALSE 86663
// begin depot := list [ i ] [ 2 ] ;
86039: LD_ADDR_VAR 0 8
86043: PUSH
86044: LD_VAR 0 3
86048: PUSH
86049: LD_VAR 0 1
86053: ARRAY
86054: PUSH
86055: LD_INT 2
86057: ARRAY
86058: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
86059: LD_ADDR_VAR 0 5
86063: PUSH
86064: LD_VAR 0 3
86068: PUSH
86069: LD_VAR 0 1
86073: ARRAY
86074: PUSH
86075: LD_INT 1
86077: ARRAY
86078: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
86079: LD_VAR 0 8
86083: PPUSH
86084: CALL_OW 301
86088: PUSH
86089: LD_VAR 0 5
86093: PUSH
86094: LD_VAR 0 8
86098: PPUSH
86099: CALL_OW 255
86103: NONEQUAL
86104: OR
86105: IFFALSE 86134
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
86107: LD_ADDR_EXP 123
86111: PUSH
86112: LD_EXP 123
86116: PPUSH
86117: LD_VAR 0 8
86121: PPUSH
86122: LD_INT 0
86124: PPUSH
86125: CALL_OW 1
86129: ST_TO_ADDR
// exit ;
86130: POP
86131: POP
86132: GO 86665
// end ; x := list [ i ] [ 3 ] ;
86134: LD_ADDR_VAR 0 6
86138: PUSH
86139: LD_VAR 0 3
86143: PUSH
86144: LD_VAR 0 1
86148: ARRAY
86149: PUSH
86150: LD_INT 3
86152: ARRAY
86153: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
86154: LD_ADDR_VAR 0 7
86158: PUSH
86159: LD_VAR 0 3
86163: PUSH
86164: LD_VAR 0 1
86168: ARRAY
86169: PUSH
86170: LD_INT 4
86172: ARRAY
86173: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
86174: LD_ADDR_VAR 0 9
86178: PUSH
86179: LD_VAR 0 6
86183: PPUSH
86184: LD_VAR 0 7
86188: PPUSH
86189: LD_INT 16
86191: PPUSH
86192: CALL 69218 0 3
86196: ST_TO_ADDR
// if not cratesNearbyPoint then
86197: LD_VAR 0 9
86201: NOT
86202: IFFALSE 86208
// exit ;
86204: POP
86205: POP
86206: GO 86665
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
86208: LD_ADDR_VAR 0 4
86212: PUSH
86213: LD_INT 22
86215: PUSH
86216: LD_VAR 0 5
86220: PUSH
86221: EMPTY
86222: LIST
86223: LIST
86224: PUSH
86225: LD_INT 3
86227: PUSH
86228: LD_INT 60
86230: PUSH
86231: EMPTY
86232: LIST
86233: PUSH
86234: EMPTY
86235: LIST
86236: LIST
86237: PUSH
86238: LD_INT 91
86240: PUSH
86241: LD_VAR 0 8
86245: PUSH
86246: LD_INT 6
86248: PUSH
86249: EMPTY
86250: LIST
86251: LIST
86252: LIST
86253: PUSH
86254: LD_INT 2
86256: PUSH
86257: LD_INT 25
86259: PUSH
86260: LD_INT 2
86262: PUSH
86263: EMPTY
86264: LIST
86265: LIST
86266: PUSH
86267: LD_INT 25
86269: PUSH
86270: LD_INT 16
86272: PUSH
86273: EMPTY
86274: LIST
86275: LIST
86276: PUSH
86277: EMPTY
86278: LIST
86279: LIST
86280: LIST
86281: PUSH
86282: EMPTY
86283: LIST
86284: LIST
86285: LIST
86286: LIST
86287: PPUSH
86288: CALL_OW 69
86292: PUSH
86293: LD_VAR 0 8
86297: PPUSH
86298: CALL_OW 313
86302: PPUSH
86303: LD_INT 3
86305: PUSH
86306: LD_INT 60
86308: PUSH
86309: EMPTY
86310: LIST
86311: PUSH
86312: EMPTY
86313: LIST
86314: LIST
86315: PUSH
86316: LD_INT 2
86318: PUSH
86319: LD_INT 25
86321: PUSH
86322: LD_INT 2
86324: PUSH
86325: EMPTY
86326: LIST
86327: LIST
86328: PUSH
86329: LD_INT 25
86331: PUSH
86332: LD_INT 16
86334: PUSH
86335: EMPTY
86336: LIST
86337: LIST
86338: PUSH
86339: EMPTY
86340: LIST
86341: LIST
86342: LIST
86343: PUSH
86344: EMPTY
86345: LIST
86346: LIST
86347: PPUSH
86348: CALL_OW 72
86352: UNION
86353: ST_TO_ADDR
// if tmp then
86354: LD_VAR 0 4
86358: IFFALSE 86438
// begin tmp := ShrinkArray ( tmp , 3 ) ;
86360: LD_ADDR_VAR 0 4
86364: PUSH
86365: LD_VAR 0 4
86369: PPUSH
86370: LD_INT 3
86372: PPUSH
86373: CALL 67187 0 2
86377: ST_TO_ADDR
// for j in tmp do
86378: LD_ADDR_VAR 0 2
86382: PUSH
86383: LD_VAR 0 4
86387: PUSH
86388: FOR_IN
86389: IFFALSE 86432
// begin if IsInUnit ( j ) then
86391: LD_VAR 0 2
86395: PPUSH
86396: CALL_OW 310
86400: IFFALSE 86411
// ComExit ( j ) ;
86402: LD_VAR 0 2
86406: PPUSH
86407: CALL 67270 0 1
// AddComCollect ( j , x , y ) ;
86411: LD_VAR 0 2
86415: PPUSH
86416: LD_VAR 0 6
86420: PPUSH
86421: LD_VAR 0 7
86425: PPUSH
86426: CALL_OW 177
// end ;
86430: GO 86388
86432: POP
86433: POP
// exit ;
86434: POP
86435: POP
86436: GO 86665
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
86438: LD_ADDR_VAR 0 4
86442: PUSH
86443: LD_INT 22
86445: PUSH
86446: LD_VAR 0 5
86450: PUSH
86451: EMPTY
86452: LIST
86453: LIST
86454: PUSH
86455: LD_INT 91
86457: PUSH
86458: LD_VAR 0 8
86462: PUSH
86463: LD_INT 8
86465: PUSH
86466: EMPTY
86467: LIST
86468: LIST
86469: LIST
86470: PUSH
86471: LD_INT 2
86473: PUSH
86474: LD_INT 34
86476: PUSH
86477: LD_INT 12
86479: PUSH
86480: EMPTY
86481: LIST
86482: LIST
86483: PUSH
86484: LD_INT 34
86486: PUSH
86487: LD_INT 51
86489: PUSH
86490: EMPTY
86491: LIST
86492: LIST
86493: PUSH
86494: LD_INT 34
86496: PUSH
86497: LD_INT 32
86499: PUSH
86500: EMPTY
86501: LIST
86502: LIST
86503: PUSH
86504: LD_INT 34
86506: PUSH
86507: LD_INT 89
86509: PUSH
86510: EMPTY
86511: LIST
86512: LIST
86513: PUSH
86514: EMPTY
86515: LIST
86516: LIST
86517: LIST
86518: LIST
86519: LIST
86520: PUSH
86521: EMPTY
86522: LIST
86523: LIST
86524: LIST
86525: PPUSH
86526: CALL_OW 69
86530: ST_TO_ADDR
// if tmp then
86531: LD_VAR 0 4
86535: IFFALSE 86661
// begin for j in tmp do
86537: LD_ADDR_VAR 0 2
86541: PUSH
86542: LD_VAR 0 4
86546: PUSH
86547: FOR_IN
86548: IFFALSE 86659
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
86550: LD_VAR 0 2
86554: PPUSH
86555: CALL_OW 262
86559: PUSH
86560: LD_INT 3
86562: EQUAL
86563: PUSH
86564: LD_VAR 0 2
86568: PPUSH
86569: CALL_OW 261
86573: PUSH
86574: LD_INT 20
86576: GREATER
86577: OR
86578: PUSH
86579: LD_VAR 0 2
86583: PPUSH
86584: CALL_OW 314
86588: NOT
86589: AND
86590: PUSH
86591: LD_VAR 0 2
86595: PPUSH
86596: CALL_OW 263
86600: PUSH
86601: LD_INT 1
86603: NONEQUAL
86604: PUSH
86605: LD_VAR 0 2
86609: PPUSH
86610: CALL_OW 311
86614: OR
86615: AND
86616: IFFALSE 86657
// begin ComCollect ( j , x , y ) ;
86618: LD_VAR 0 2
86622: PPUSH
86623: LD_VAR 0 6
86627: PPUSH
86628: LD_VAR 0 7
86632: PPUSH
86633: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
86637: LD_VAR 0 2
86641: PPUSH
86642: LD_VAR 0 8
86646: PPUSH
86647: CALL_OW 172
// exit ;
86651: POP
86652: POP
86653: POP
86654: POP
86655: GO 86665
// end ;
86657: GO 86547
86659: POP
86660: POP
// end ; end ;
86661: GO 86036
86663: POP
86664: POP
// end ; end_of_file
86665: PPOPN 9
86667: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86668: LD_VAR 0 1
86672: PUSH
86673: LD_INT 200
86675: DOUBLE
86676: GREATEREQUAL
86677: IFFALSE 86685
86679: LD_INT 299
86681: DOUBLE
86682: LESSEQUAL
86683: IFTRUE 86687
86685: GO 86719
86687: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86688: LD_VAR 0 1
86692: PPUSH
86693: LD_VAR 0 2
86697: PPUSH
86698: LD_VAR 0 3
86702: PPUSH
86703: LD_VAR 0 4
86707: PPUSH
86708: LD_VAR 0 5
86712: PPUSH
86713: CALL 87207 0 5
86717: GO 86796
86719: LD_INT 300
86721: DOUBLE
86722: GREATEREQUAL
86723: IFFALSE 86731
86725: LD_INT 399
86727: DOUBLE
86728: LESSEQUAL
86729: IFTRUE 86733
86731: GO 86795
86733: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86734: LD_VAR 0 1
86738: PPUSH
86739: LD_VAR 0 2
86743: PPUSH
86744: LD_VAR 0 3
86748: PPUSH
86749: LD_VAR 0 4
86753: PPUSH
86754: LD_VAR 0 5
86758: PPUSH
86759: LD_VAR 0 6
86763: PPUSH
86764: LD_VAR 0 7
86768: PPUSH
86769: LD_VAR 0 8
86773: PPUSH
86774: LD_VAR 0 9
86778: PPUSH
86779: LD_VAR 0 10
86783: PPUSH
86784: LD_VAR 0 11
86788: PPUSH
86789: CALL 83377 0 11
86793: GO 86796
86795: POP
// end ;
86796: PPOPN 11
86798: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86799: LD_VAR 0 1
86803: PPUSH
86804: LD_VAR 0 2
86808: PPUSH
86809: LD_VAR 0 3
86813: PPUSH
86814: LD_VAR 0 4
86818: PPUSH
86819: LD_VAR 0 5
86823: PPUSH
86824: CALL 86943 0 5
// end ; end_of_file
86828: PPOPN 5
86830: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
86831: LD_INT 0
86833: PPUSH
86834: PPUSH
86835: PPUSH
86836: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
86837: LD_VAR 0 1
86841: PPUSH
86842: CALL_OW 264
86846: PUSH
86847: LD_INT 91
86849: EQUAL
86850: IFFALSE 86922
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
86852: LD_INT 68
86854: PPUSH
86855: LD_VAR 0 1
86859: PPUSH
86860: CALL_OW 255
86864: PPUSH
86865: CALL_OW 321
86869: PUSH
86870: LD_INT 2
86872: EQUAL
86873: IFFALSE 86885
// eff := 70 else
86875: LD_ADDR_VAR 0 4
86879: PUSH
86880: LD_INT 70
86882: ST_TO_ADDR
86883: GO 86893
// eff := 30 ;
86885: LD_ADDR_VAR 0 4
86889: PUSH
86890: LD_INT 30
86892: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
86893: LD_VAR 0 1
86897: PPUSH
86898: CALL_OW 250
86902: PPUSH
86903: LD_VAR 0 1
86907: PPUSH
86908: CALL_OW 251
86912: PPUSH
86913: LD_VAR 0 4
86917: PPUSH
86918: CALL_OW 495
// end ; end ;
86922: LD_VAR 0 2
86926: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
86927: LD_INT 0
86929: PPUSH
// end ;
86930: LD_VAR 0 4
86934: RET
// export function SOS_Command ( cmd ) ; begin
86935: LD_INT 0
86937: PPUSH
// end ;
86938: LD_VAR 0 2
86942: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
86943: LD_INT 0
86945: PPUSH
// end ;
86946: LD_VAR 0 6
86950: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
86951: LD_INT 0
86953: PPUSH
86954: PPUSH
// if not vehicle or not factory then
86955: LD_VAR 0 1
86959: NOT
86960: PUSH
86961: LD_VAR 0 2
86965: NOT
86966: OR
86967: IFFALSE 86971
// exit ;
86969: GO 87202
// if factoryWaypoints >= factory then
86971: LD_EXP 122
86975: PUSH
86976: LD_VAR 0 2
86980: GREATEREQUAL
86981: IFFALSE 87202
// if factoryWaypoints [ factory ] then
86983: LD_EXP 122
86987: PUSH
86988: LD_VAR 0 2
86992: ARRAY
86993: IFFALSE 87202
// begin if GetControl ( vehicle ) = control_manual then
86995: LD_VAR 0 1
86999: PPUSH
87000: CALL_OW 263
87004: PUSH
87005: LD_INT 1
87007: EQUAL
87008: IFFALSE 87089
// begin driver := IsDrivenBy ( vehicle ) ;
87010: LD_ADDR_VAR 0 4
87014: PUSH
87015: LD_VAR 0 1
87019: PPUSH
87020: CALL_OW 311
87024: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87025: LD_VAR 0 4
87029: PPUSH
87030: LD_EXP 122
87034: PUSH
87035: LD_VAR 0 2
87039: ARRAY
87040: PUSH
87041: LD_INT 3
87043: ARRAY
87044: PPUSH
87045: LD_EXP 122
87049: PUSH
87050: LD_VAR 0 2
87054: ARRAY
87055: PUSH
87056: LD_INT 4
87058: ARRAY
87059: PPUSH
87060: CALL_OW 171
// AddComExitVehicle ( driver ) ;
87064: LD_VAR 0 4
87068: PPUSH
87069: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
87073: LD_VAR 0 4
87077: PPUSH
87078: LD_VAR 0 2
87082: PPUSH
87083: CALL_OW 180
// end else
87087: GO 87202
// if GetControl ( vehicle ) = control_remote then
87089: LD_VAR 0 1
87093: PPUSH
87094: CALL_OW 263
87098: PUSH
87099: LD_INT 2
87101: EQUAL
87102: IFFALSE 87163
// begin wait ( 0 0$2 ) ;
87104: LD_INT 70
87106: PPUSH
87107: CALL_OW 67
// if Connect ( vehicle ) then
87111: LD_VAR 0 1
87115: PPUSH
87116: CALL 37511 0 1
87120: IFFALSE 87161
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87122: LD_VAR 0 1
87126: PPUSH
87127: LD_EXP 122
87131: PUSH
87132: LD_VAR 0 2
87136: ARRAY
87137: PUSH
87138: LD_INT 3
87140: ARRAY
87141: PPUSH
87142: LD_EXP 122
87146: PUSH
87147: LD_VAR 0 2
87151: ARRAY
87152: PUSH
87153: LD_INT 4
87155: ARRAY
87156: PPUSH
87157: CALL_OW 171
// end else
87161: GO 87202
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87163: LD_VAR 0 1
87167: PPUSH
87168: LD_EXP 122
87172: PUSH
87173: LD_VAR 0 2
87177: ARRAY
87178: PUSH
87179: LD_INT 3
87181: ARRAY
87182: PPUSH
87183: LD_EXP 122
87187: PUSH
87188: LD_VAR 0 2
87192: ARRAY
87193: PUSH
87194: LD_INT 4
87196: ARRAY
87197: PPUSH
87198: CALL_OW 171
// end ; end ;
87202: LD_VAR 0 3
87206: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
87207: LD_INT 0
87209: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
87210: LD_VAR 0 1
87214: PUSH
87215: LD_INT 250
87217: EQUAL
87218: PUSH
87219: LD_VAR 0 2
87223: PPUSH
87224: CALL_OW 264
87228: PUSH
87229: LD_INT 81
87231: EQUAL
87232: AND
87233: IFFALSE 87254
// MinerPlaceMine ( unit , x , y ) ;
87235: LD_VAR 0 2
87239: PPUSH
87240: LD_VAR 0 4
87244: PPUSH
87245: LD_VAR 0 5
87249: PPUSH
87250: CALL 89639 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
87254: LD_VAR 0 1
87258: PUSH
87259: LD_INT 251
87261: EQUAL
87262: PUSH
87263: LD_VAR 0 2
87267: PPUSH
87268: CALL_OW 264
87272: PUSH
87273: LD_INT 81
87275: EQUAL
87276: AND
87277: IFFALSE 87298
// MinerDetonateMine ( unit , x , y ) ;
87279: LD_VAR 0 2
87283: PPUSH
87284: LD_VAR 0 4
87288: PPUSH
87289: LD_VAR 0 5
87293: PPUSH
87294: CALL 89914 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
87298: LD_VAR 0 1
87302: PUSH
87303: LD_INT 252
87305: EQUAL
87306: PUSH
87307: LD_VAR 0 2
87311: PPUSH
87312: CALL_OW 264
87316: PUSH
87317: LD_INT 81
87319: EQUAL
87320: AND
87321: IFFALSE 87342
// MinerCreateMinefield ( unit , x , y ) ;
87323: LD_VAR 0 2
87327: PPUSH
87328: LD_VAR 0 4
87332: PPUSH
87333: LD_VAR 0 5
87337: PPUSH
87338: CALL 90331 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
87342: LD_VAR 0 1
87346: PUSH
87347: LD_INT 253
87349: EQUAL
87350: PUSH
87351: LD_VAR 0 2
87355: PPUSH
87356: CALL_OW 257
87360: PUSH
87361: LD_INT 5
87363: EQUAL
87364: AND
87365: IFFALSE 87386
// ComBinocular ( unit , x , y ) ;
87367: LD_VAR 0 2
87371: PPUSH
87372: LD_VAR 0 4
87376: PPUSH
87377: LD_VAR 0 5
87381: PPUSH
87382: CALL 90700 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
87386: LD_VAR 0 1
87390: PUSH
87391: LD_INT 254
87393: EQUAL
87394: PUSH
87395: LD_VAR 0 2
87399: PPUSH
87400: CALL_OW 264
87404: PUSH
87405: LD_INT 99
87407: EQUAL
87408: AND
87409: PUSH
87410: LD_VAR 0 3
87414: PPUSH
87415: CALL_OW 263
87419: PUSH
87420: LD_INT 3
87422: EQUAL
87423: AND
87424: IFFALSE 87440
// HackDestroyVehicle ( unit , selectedUnit ) ;
87426: LD_VAR 0 2
87430: PPUSH
87431: LD_VAR 0 3
87435: PPUSH
87436: CALL 89003 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
87440: LD_VAR 0 1
87444: PUSH
87445: LD_INT 255
87447: EQUAL
87448: PUSH
87449: LD_VAR 0 2
87453: PPUSH
87454: CALL_OW 264
87458: PUSH
87459: LD_INT 14
87461: PUSH
87462: LD_INT 53
87464: PUSH
87465: EMPTY
87466: LIST
87467: LIST
87468: IN
87469: AND
87470: PUSH
87471: LD_VAR 0 4
87475: PPUSH
87476: LD_VAR 0 5
87480: PPUSH
87481: CALL_OW 488
87485: AND
87486: IFFALSE 87510
// CutTreeXYR ( unit , x , y , 12 ) ;
87488: LD_VAR 0 2
87492: PPUSH
87493: LD_VAR 0 4
87497: PPUSH
87498: LD_VAR 0 5
87502: PPUSH
87503: LD_INT 12
87505: PPUSH
87506: CALL 87573 0 4
// if cmd = 256 then
87510: LD_VAR 0 1
87514: PUSH
87515: LD_INT 256
87517: EQUAL
87518: IFFALSE 87539
// SetFactoryWaypoint ( unit , x , y ) ;
87520: LD_VAR 0 2
87524: PPUSH
87525: LD_VAR 0 4
87529: PPUSH
87530: LD_VAR 0 5
87534: PPUSH
87535: CALL 85357 0 3
// if cmd = 257 then
87539: LD_VAR 0 1
87543: PUSH
87544: LD_INT 257
87546: EQUAL
87547: IFFALSE 87568
// SetWarehouseGatheringPoint ( unit , x , y ) ;
87549: LD_VAR 0 2
87553: PPUSH
87554: LD_VAR 0 4
87558: PPUSH
87559: LD_VAR 0 5
87563: PPUSH
87564: CALL 85719 0 3
// end ;
87568: LD_VAR 0 6
87572: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
87573: LD_INT 0
87575: PPUSH
87576: PPUSH
87577: PPUSH
87578: PPUSH
87579: PPUSH
87580: PPUSH
87581: PPUSH
87582: PPUSH
87583: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
87584: LD_VAR 0 1
87588: NOT
87589: PUSH
87590: LD_VAR 0 2
87594: PPUSH
87595: LD_VAR 0 3
87599: PPUSH
87600: CALL_OW 488
87604: NOT
87605: OR
87606: PUSH
87607: LD_VAR 0 4
87611: NOT
87612: OR
87613: IFFALSE 87617
// exit ;
87615: GO 87957
// list := [ ] ;
87617: LD_ADDR_VAR 0 13
87621: PUSH
87622: EMPTY
87623: ST_TO_ADDR
// if x - r < 0 then
87624: LD_VAR 0 2
87628: PUSH
87629: LD_VAR 0 4
87633: MINUS
87634: PUSH
87635: LD_INT 0
87637: LESS
87638: IFFALSE 87650
// min_x := 0 else
87640: LD_ADDR_VAR 0 7
87644: PUSH
87645: LD_INT 0
87647: ST_TO_ADDR
87648: GO 87666
// min_x := x - r ;
87650: LD_ADDR_VAR 0 7
87654: PUSH
87655: LD_VAR 0 2
87659: PUSH
87660: LD_VAR 0 4
87664: MINUS
87665: ST_TO_ADDR
// if y - r < 0 then
87666: LD_VAR 0 3
87670: PUSH
87671: LD_VAR 0 4
87675: MINUS
87676: PUSH
87677: LD_INT 0
87679: LESS
87680: IFFALSE 87692
// min_y := 0 else
87682: LD_ADDR_VAR 0 8
87686: PUSH
87687: LD_INT 0
87689: ST_TO_ADDR
87690: GO 87708
// min_y := y - r ;
87692: LD_ADDR_VAR 0 8
87696: PUSH
87697: LD_VAR 0 3
87701: PUSH
87702: LD_VAR 0 4
87706: MINUS
87707: ST_TO_ADDR
// max_x := x + r ;
87708: LD_ADDR_VAR 0 9
87712: PUSH
87713: LD_VAR 0 2
87717: PUSH
87718: LD_VAR 0 4
87722: PLUS
87723: ST_TO_ADDR
// max_y := y + r ;
87724: LD_ADDR_VAR 0 10
87728: PUSH
87729: LD_VAR 0 3
87733: PUSH
87734: LD_VAR 0 4
87738: PLUS
87739: ST_TO_ADDR
// for _x = min_x to max_x do
87740: LD_ADDR_VAR 0 11
87744: PUSH
87745: DOUBLE
87746: LD_VAR 0 7
87750: DEC
87751: ST_TO_ADDR
87752: LD_VAR 0 9
87756: PUSH
87757: FOR_TO
87758: IFFALSE 87875
// for _y = min_y to max_y do
87760: LD_ADDR_VAR 0 12
87764: PUSH
87765: DOUBLE
87766: LD_VAR 0 8
87770: DEC
87771: ST_TO_ADDR
87772: LD_VAR 0 10
87776: PUSH
87777: FOR_TO
87778: IFFALSE 87871
// begin if not ValidHex ( _x , _y ) then
87780: LD_VAR 0 11
87784: PPUSH
87785: LD_VAR 0 12
87789: PPUSH
87790: CALL_OW 488
87794: NOT
87795: IFFALSE 87799
// continue ;
87797: GO 87777
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
87799: LD_VAR 0 11
87803: PPUSH
87804: LD_VAR 0 12
87808: PPUSH
87809: CALL_OW 351
87813: PUSH
87814: LD_VAR 0 11
87818: PPUSH
87819: LD_VAR 0 12
87823: PPUSH
87824: CALL_OW 554
87828: AND
87829: IFFALSE 87869
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
87831: LD_ADDR_VAR 0 13
87835: PUSH
87836: LD_VAR 0 13
87840: PPUSH
87841: LD_VAR 0 13
87845: PUSH
87846: LD_INT 1
87848: PLUS
87849: PPUSH
87850: LD_VAR 0 11
87854: PUSH
87855: LD_VAR 0 12
87859: PUSH
87860: EMPTY
87861: LIST
87862: LIST
87863: PPUSH
87864: CALL_OW 2
87868: ST_TO_ADDR
// end ;
87869: GO 87777
87871: POP
87872: POP
87873: GO 87757
87875: POP
87876: POP
// if not list then
87877: LD_VAR 0 13
87881: NOT
87882: IFFALSE 87886
// exit ;
87884: GO 87957
// for i in list do
87886: LD_ADDR_VAR 0 6
87890: PUSH
87891: LD_VAR 0 13
87895: PUSH
87896: FOR_IN
87897: IFFALSE 87955
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
87899: LD_VAR 0 1
87903: PPUSH
87904: LD_STRING M
87906: PUSH
87907: LD_VAR 0 6
87911: PUSH
87912: LD_INT 1
87914: ARRAY
87915: PUSH
87916: LD_VAR 0 6
87920: PUSH
87921: LD_INT 2
87923: ARRAY
87924: PUSH
87925: LD_INT 0
87927: PUSH
87928: LD_INT 0
87930: PUSH
87931: LD_INT 0
87933: PUSH
87934: LD_INT 0
87936: PUSH
87937: EMPTY
87938: LIST
87939: LIST
87940: LIST
87941: LIST
87942: LIST
87943: LIST
87944: LIST
87945: PUSH
87946: EMPTY
87947: LIST
87948: PPUSH
87949: CALL_OW 447
87953: GO 87896
87955: POP
87956: POP
// end ;
87957: LD_VAR 0 5
87961: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
87962: LD_EXP 125
87966: NOT
87967: IFFALSE 88017
87969: GO 87971
87971: DISABLE
// begin initHack := true ;
87972: LD_ADDR_EXP 125
87976: PUSH
87977: LD_INT 1
87979: ST_TO_ADDR
// hackTanks := [ ] ;
87980: LD_ADDR_EXP 126
87984: PUSH
87985: EMPTY
87986: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
87987: LD_ADDR_EXP 127
87991: PUSH
87992: EMPTY
87993: ST_TO_ADDR
// hackLimit := 3 ;
87994: LD_ADDR_EXP 128
87998: PUSH
87999: LD_INT 3
88001: ST_TO_ADDR
// hackDist := 12 ;
88002: LD_ADDR_EXP 129
88006: PUSH
88007: LD_INT 12
88009: ST_TO_ADDR
// hackCounter := [ ] ;
88010: LD_ADDR_EXP 130
88014: PUSH
88015: EMPTY
88016: ST_TO_ADDR
// end ;
88017: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
88018: LD_EXP 125
88022: PUSH
88023: LD_INT 34
88025: PUSH
88026: LD_INT 99
88028: PUSH
88029: EMPTY
88030: LIST
88031: LIST
88032: PPUSH
88033: CALL_OW 69
88037: AND
88038: IFFALSE 88291
88040: GO 88042
88042: DISABLE
88043: LD_INT 0
88045: PPUSH
88046: PPUSH
// begin enable ;
88047: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
88048: LD_ADDR_VAR 0 1
88052: PUSH
88053: LD_INT 34
88055: PUSH
88056: LD_INT 99
88058: PUSH
88059: EMPTY
88060: LIST
88061: LIST
88062: PPUSH
88063: CALL_OW 69
88067: PUSH
88068: FOR_IN
88069: IFFALSE 88289
// begin if not i in hackTanks then
88071: LD_VAR 0 1
88075: PUSH
88076: LD_EXP 126
88080: IN
88081: NOT
88082: IFFALSE 88165
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
88084: LD_ADDR_EXP 126
88088: PUSH
88089: LD_EXP 126
88093: PPUSH
88094: LD_EXP 126
88098: PUSH
88099: LD_INT 1
88101: PLUS
88102: PPUSH
88103: LD_VAR 0 1
88107: PPUSH
88108: CALL_OW 1
88112: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
88113: LD_ADDR_EXP 127
88117: PUSH
88118: LD_EXP 127
88122: PPUSH
88123: LD_EXP 127
88127: PUSH
88128: LD_INT 1
88130: PLUS
88131: PPUSH
88132: EMPTY
88133: PPUSH
88134: CALL_OW 1
88138: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
88139: LD_ADDR_EXP 130
88143: PUSH
88144: LD_EXP 130
88148: PPUSH
88149: LD_EXP 130
88153: PUSH
88154: LD_INT 1
88156: PLUS
88157: PPUSH
88158: EMPTY
88159: PPUSH
88160: CALL_OW 1
88164: ST_TO_ADDR
// end ; if not IsOk ( i ) then
88165: LD_VAR 0 1
88169: PPUSH
88170: CALL_OW 302
88174: NOT
88175: IFFALSE 88188
// begin HackUnlinkAll ( i ) ;
88177: LD_VAR 0 1
88181: PPUSH
88182: CALL 88294 0 1
// continue ;
88186: GO 88068
// end ; HackCheckCapturedStatus ( i ) ;
88188: LD_VAR 0 1
88192: PPUSH
88193: CALL 88737 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
88197: LD_ADDR_VAR 0 2
88201: PUSH
88202: LD_INT 81
88204: PUSH
88205: LD_VAR 0 1
88209: PPUSH
88210: CALL_OW 255
88214: PUSH
88215: EMPTY
88216: LIST
88217: LIST
88218: PUSH
88219: LD_INT 33
88221: PUSH
88222: LD_INT 3
88224: PUSH
88225: EMPTY
88226: LIST
88227: LIST
88228: PUSH
88229: LD_INT 91
88231: PUSH
88232: LD_VAR 0 1
88236: PUSH
88237: LD_EXP 129
88241: PUSH
88242: EMPTY
88243: LIST
88244: LIST
88245: LIST
88246: PUSH
88247: LD_INT 50
88249: PUSH
88250: EMPTY
88251: LIST
88252: PUSH
88253: EMPTY
88254: LIST
88255: LIST
88256: LIST
88257: LIST
88258: PPUSH
88259: CALL_OW 69
88263: ST_TO_ADDR
// if not tmp then
88264: LD_VAR 0 2
88268: NOT
88269: IFFALSE 88273
// continue ;
88271: GO 88068
// HackLink ( i , tmp ) ;
88273: LD_VAR 0 1
88277: PPUSH
88278: LD_VAR 0 2
88282: PPUSH
88283: CALL 88430 0 2
// end ;
88287: GO 88068
88289: POP
88290: POP
// end ;
88291: PPOPN 2
88293: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
88294: LD_INT 0
88296: PPUSH
88297: PPUSH
88298: PPUSH
// if not hack in hackTanks then
88299: LD_VAR 0 1
88303: PUSH
88304: LD_EXP 126
88308: IN
88309: NOT
88310: IFFALSE 88314
// exit ;
88312: GO 88425
// index := GetElementIndex ( hackTanks , hack ) ;
88314: LD_ADDR_VAR 0 4
88318: PUSH
88319: LD_EXP 126
88323: PPUSH
88324: LD_VAR 0 1
88328: PPUSH
88329: CALL 34327 0 2
88333: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
88334: LD_EXP 127
88338: PUSH
88339: LD_VAR 0 4
88343: ARRAY
88344: IFFALSE 88425
// begin for i in hackTanksCaptured [ index ] do
88346: LD_ADDR_VAR 0 3
88350: PUSH
88351: LD_EXP 127
88355: PUSH
88356: LD_VAR 0 4
88360: ARRAY
88361: PUSH
88362: FOR_IN
88363: IFFALSE 88389
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
88365: LD_VAR 0 3
88369: PUSH
88370: LD_INT 1
88372: ARRAY
88373: PPUSH
88374: LD_VAR 0 3
88378: PUSH
88379: LD_INT 2
88381: ARRAY
88382: PPUSH
88383: CALL_OW 235
88387: GO 88362
88389: POP
88390: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
88391: LD_ADDR_EXP 127
88395: PUSH
88396: LD_EXP 127
88400: PPUSH
88401: LD_VAR 0 4
88405: PPUSH
88406: EMPTY
88407: PPUSH
88408: CALL_OW 1
88412: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
88413: LD_VAR 0 1
88417: PPUSH
88418: LD_INT 0
88420: PPUSH
88421: CALL_OW 505
// end ; end ;
88425: LD_VAR 0 2
88429: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
88430: LD_INT 0
88432: PPUSH
88433: PPUSH
88434: PPUSH
// if not hack in hackTanks or not vehicles then
88435: LD_VAR 0 1
88439: PUSH
88440: LD_EXP 126
88444: IN
88445: NOT
88446: PUSH
88447: LD_VAR 0 2
88451: NOT
88452: OR
88453: IFFALSE 88457
// exit ;
88455: GO 88732
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
88457: LD_ADDR_VAR 0 2
88461: PUSH
88462: LD_VAR 0 1
88466: PPUSH
88467: LD_VAR 0 2
88471: PPUSH
88472: LD_INT 1
88474: PPUSH
88475: LD_INT 1
88477: PPUSH
88478: CALL 34977 0 4
88482: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
88483: LD_ADDR_VAR 0 5
88487: PUSH
88488: LD_EXP 126
88492: PPUSH
88493: LD_VAR 0 1
88497: PPUSH
88498: CALL 34327 0 2
88502: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
88503: LD_EXP 127
88507: PUSH
88508: LD_VAR 0 5
88512: ARRAY
88513: PUSH
88514: LD_EXP 128
88518: LESS
88519: IFFALSE 88708
// begin for i := 1 to vehicles do
88521: LD_ADDR_VAR 0 4
88525: PUSH
88526: DOUBLE
88527: LD_INT 1
88529: DEC
88530: ST_TO_ADDR
88531: LD_VAR 0 2
88535: PUSH
88536: FOR_TO
88537: IFFALSE 88706
// begin if hackTanksCaptured [ index ] = hackLimit then
88539: LD_EXP 127
88543: PUSH
88544: LD_VAR 0 5
88548: ARRAY
88549: PUSH
88550: LD_EXP 128
88554: EQUAL
88555: IFFALSE 88559
// break ;
88557: GO 88706
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
88559: LD_ADDR_EXP 130
88563: PUSH
88564: LD_EXP 130
88568: PPUSH
88569: LD_VAR 0 5
88573: PPUSH
88574: LD_EXP 130
88578: PUSH
88579: LD_VAR 0 5
88583: ARRAY
88584: PUSH
88585: LD_INT 1
88587: PLUS
88588: PPUSH
88589: CALL_OW 1
88593: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
88594: LD_ADDR_EXP 127
88598: PUSH
88599: LD_EXP 127
88603: PPUSH
88604: LD_VAR 0 5
88608: PUSH
88609: LD_EXP 127
88613: PUSH
88614: LD_VAR 0 5
88618: ARRAY
88619: PUSH
88620: LD_INT 1
88622: PLUS
88623: PUSH
88624: EMPTY
88625: LIST
88626: LIST
88627: PPUSH
88628: LD_VAR 0 2
88632: PUSH
88633: LD_VAR 0 4
88637: ARRAY
88638: PUSH
88639: LD_VAR 0 2
88643: PUSH
88644: LD_VAR 0 4
88648: ARRAY
88649: PPUSH
88650: CALL_OW 255
88654: PUSH
88655: EMPTY
88656: LIST
88657: LIST
88658: PPUSH
88659: CALL 34542 0 3
88663: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
88664: LD_VAR 0 2
88668: PUSH
88669: LD_VAR 0 4
88673: ARRAY
88674: PPUSH
88675: LD_VAR 0 1
88679: PPUSH
88680: CALL_OW 255
88684: PPUSH
88685: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
88689: LD_VAR 0 2
88693: PUSH
88694: LD_VAR 0 4
88698: ARRAY
88699: PPUSH
88700: CALL_OW 141
// end ;
88704: GO 88536
88706: POP
88707: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
88708: LD_VAR 0 1
88712: PPUSH
88713: LD_EXP 127
88717: PUSH
88718: LD_VAR 0 5
88722: ARRAY
88723: PUSH
88724: LD_INT 0
88726: PLUS
88727: PPUSH
88728: CALL_OW 505
// end ;
88732: LD_VAR 0 3
88736: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
88737: LD_INT 0
88739: PPUSH
88740: PPUSH
88741: PPUSH
88742: PPUSH
// if not hack in hackTanks then
88743: LD_VAR 0 1
88747: PUSH
88748: LD_EXP 126
88752: IN
88753: NOT
88754: IFFALSE 88758
// exit ;
88756: GO 88998
// index := GetElementIndex ( hackTanks , hack ) ;
88758: LD_ADDR_VAR 0 4
88762: PUSH
88763: LD_EXP 126
88767: PPUSH
88768: LD_VAR 0 1
88772: PPUSH
88773: CALL 34327 0 2
88777: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
88778: LD_ADDR_VAR 0 3
88782: PUSH
88783: DOUBLE
88784: LD_EXP 127
88788: PUSH
88789: LD_VAR 0 4
88793: ARRAY
88794: INC
88795: ST_TO_ADDR
88796: LD_INT 1
88798: PUSH
88799: FOR_DOWNTO
88800: IFFALSE 88972
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
88802: LD_ADDR_VAR 0 5
88806: PUSH
88807: LD_EXP 127
88811: PUSH
88812: LD_VAR 0 4
88816: ARRAY
88817: PUSH
88818: LD_VAR 0 3
88822: ARRAY
88823: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
88824: LD_VAR 0 5
88828: PUSH
88829: LD_INT 1
88831: ARRAY
88832: PPUSH
88833: CALL_OW 302
88837: NOT
88838: PUSH
88839: LD_VAR 0 5
88843: PUSH
88844: LD_INT 1
88846: ARRAY
88847: PPUSH
88848: CALL_OW 255
88852: PUSH
88853: LD_VAR 0 1
88857: PPUSH
88858: CALL_OW 255
88862: NONEQUAL
88863: OR
88864: IFFALSE 88970
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
88866: LD_VAR 0 5
88870: PUSH
88871: LD_INT 1
88873: ARRAY
88874: PPUSH
88875: CALL_OW 305
88879: PUSH
88880: LD_VAR 0 5
88884: PUSH
88885: LD_INT 1
88887: ARRAY
88888: PPUSH
88889: CALL_OW 255
88893: PUSH
88894: LD_VAR 0 1
88898: PPUSH
88899: CALL_OW 255
88903: EQUAL
88904: AND
88905: IFFALSE 88929
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
88907: LD_VAR 0 5
88911: PUSH
88912: LD_INT 1
88914: ARRAY
88915: PPUSH
88916: LD_VAR 0 5
88920: PUSH
88921: LD_INT 2
88923: ARRAY
88924: PPUSH
88925: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
88929: LD_ADDR_EXP 127
88933: PUSH
88934: LD_EXP 127
88938: PPUSH
88939: LD_VAR 0 4
88943: PPUSH
88944: LD_EXP 127
88948: PUSH
88949: LD_VAR 0 4
88953: ARRAY
88954: PPUSH
88955: LD_VAR 0 3
88959: PPUSH
88960: CALL_OW 3
88964: PPUSH
88965: CALL_OW 1
88969: ST_TO_ADDR
// end ; end ;
88970: GO 88799
88972: POP
88973: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
88974: LD_VAR 0 1
88978: PPUSH
88979: LD_EXP 127
88983: PUSH
88984: LD_VAR 0 4
88988: ARRAY
88989: PUSH
88990: LD_INT 0
88992: PLUS
88993: PPUSH
88994: CALL_OW 505
// end ;
88998: LD_VAR 0 2
89002: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
89003: LD_INT 0
89005: PPUSH
89006: PPUSH
89007: PPUSH
89008: PPUSH
// if not hack in hackTanks then
89009: LD_VAR 0 1
89013: PUSH
89014: LD_EXP 126
89018: IN
89019: NOT
89020: IFFALSE 89024
// exit ;
89022: GO 89109
// index := GetElementIndex ( hackTanks , hack ) ;
89024: LD_ADDR_VAR 0 5
89028: PUSH
89029: LD_EXP 126
89033: PPUSH
89034: LD_VAR 0 1
89038: PPUSH
89039: CALL 34327 0 2
89043: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
89044: LD_ADDR_VAR 0 4
89048: PUSH
89049: DOUBLE
89050: LD_INT 1
89052: DEC
89053: ST_TO_ADDR
89054: LD_EXP 127
89058: PUSH
89059: LD_VAR 0 5
89063: ARRAY
89064: PUSH
89065: FOR_TO
89066: IFFALSE 89107
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
89068: LD_EXP 127
89072: PUSH
89073: LD_VAR 0 5
89077: ARRAY
89078: PUSH
89079: LD_VAR 0 4
89083: ARRAY
89084: PUSH
89085: LD_INT 1
89087: ARRAY
89088: PUSH
89089: LD_VAR 0 2
89093: EQUAL
89094: IFFALSE 89105
// KillUnit ( vehicle ) ;
89096: LD_VAR 0 2
89100: PPUSH
89101: CALL_OW 66
89105: GO 89065
89107: POP
89108: POP
// end ;
89109: LD_VAR 0 3
89113: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
89114: LD_EXP 131
89118: NOT
89119: IFFALSE 89154
89121: GO 89123
89123: DISABLE
// begin initMiner := true ;
89124: LD_ADDR_EXP 131
89128: PUSH
89129: LD_INT 1
89131: ST_TO_ADDR
// minersList := [ ] ;
89132: LD_ADDR_EXP 132
89136: PUSH
89137: EMPTY
89138: ST_TO_ADDR
// minerMinesList := [ ] ;
89139: LD_ADDR_EXP 133
89143: PUSH
89144: EMPTY
89145: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
89146: LD_ADDR_EXP 134
89150: PUSH
89151: LD_INT 5
89153: ST_TO_ADDR
// end ;
89154: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
89155: LD_EXP 131
89159: PUSH
89160: LD_INT 34
89162: PUSH
89163: LD_INT 81
89165: PUSH
89166: EMPTY
89167: LIST
89168: LIST
89169: PPUSH
89170: CALL_OW 69
89174: AND
89175: IFFALSE 89636
89177: GO 89179
89179: DISABLE
89180: LD_INT 0
89182: PPUSH
89183: PPUSH
89184: PPUSH
89185: PPUSH
// begin enable ;
89186: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
89187: LD_ADDR_VAR 0 1
89191: PUSH
89192: LD_INT 34
89194: PUSH
89195: LD_INT 81
89197: PUSH
89198: EMPTY
89199: LIST
89200: LIST
89201: PPUSH
89202: CALL_OW 69
89206: PUSH
89207: FOR_IN
89208: IFFALSE 89280
// begin if not i in minersList then
89210: LD_VAR 0 1
89214: PUSH
89215: LD_EXP 132
89219: IN
89220: NOT
89221: IFFALSE 89278
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
89223: LD_ADDR_EXP 132
89227: PUSH
89228: LD_EXP 132
89232: PPUSH
89233: LD_EXP 132
89237: PUSH
89238: LD_INT 1
89240: PLUS
89241: PPUSH
89242: LD_VAR 0 1
89246: PPUSH
89247: CALL_OW 1
89251: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
89252: LD_ADDR_EXP 133
89256: PUSH
89257: LD_EXP 133
89261: PPUSH
89262: LD_EXP 133
89266: PUSH
89267: LD_INT 1
89269: PLUS
89270: PPUSH
89271: EMPTY
89272: PPUSH
89273: CALL_OW 1
89277: ST_TO_ADDR
// end end ;
89278: GO 89207
89280: POP
89281: POP
// for i := minerMinesList downto 1 do
89282: LD_ADDR_VAR 0 1
89286: PUSH
89287: DOUBLE
89288: LD_EXP 133
89292: INC
89293: ST_TO_ADDR
89294: LD_INT 1
89296: PUSH
89297: FOR_DOWNTO
89298: IFFALSE 89634
// begin if IsLive ( minersList [ i ] ) then
89300: LD_EXP 132
89304: PUSH
89305: LD_VAR 0 1
89309: ARRAY
89310: PPUSH
89311: CALL_OW 300
89315: IFFALSE 89343
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
89317: LD_EXP 132
89321: PUSH
89322: LD_VAR 0 1
89326: ARRAY
89327: PPUSH
89328: LD_EXP 133
89332: PUSH
89333: LD_VAR 0 1
89337: ARRAY
89338: PPUSH
89339: CALL_OW 505
// if not minerMinesList [ i ] then
89343: LD_EXP 133
89347: PUSH
89348: LD_VAR 0 1
89352: ARRAY
89353: NOT
89354: IFFALSE 89358
// continue ;
89356: GO 89297
// for j := minerMinesList [ i ] downto 1 do
89358: LD_ADDR_VAR 0 2
89362: PUSH
89363: DOUBLE
89364: LD_EXP 133
89368: PUSH
89369: LD_VAR 0 1
89373: ARRAY
89374: INC
89375: ST_TO_ADDR
89376: LD_INT 1
89378: PUSH
89379: FOR_DOWNTO
89380: IFFALSE 89630
// begin side := GetSide ( minersList [ i ] ) ;
89382: LD_ADDR_VAR 0 3
89386: PUSH
89387: LD_EXP 132
89391: PUSH
89392: LD_VAR 0 1
89396: ARRAY
89397: PPUSH
89398: CALL_OW 255
89402: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
89403: LD_ADDR_VAR 0 4
89407: PUSH
89408: LD_EXP 133
89412: PUSH
89413: LD_VAR 0 1
89417: ARRAY
89418: PUSH
89419: LD_VAR 0 2
89423: ARRAY
89424: PUSH
89425: LD_INT 1
89427: ARRAY
89428: PPUSH
89429: LD_EXP 133
89433: PUSH
89434: LD_VAR 0 1
89438: ARRAY
89439: PUSH
89440: LD_VAR 0 2
89444: ARRAY
89445: PUSH
89446: LD_INT 2
89448: ARRAY
89449: PPUSH
89450: CALL_OW 428
89454: ST_TO_ADDR
// if not tmp then
89455: LD_VAR 0 4
89459: NOT
89460: IFFALSE 89464
// continue ;
89462: GO 89379
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
89464: LD_VAR 0 4
89468: PUSH
89469: LD_INT 81
89471: PUSH
89472: LD_VAR 0 3
89476: PUSH
89477: EMPTY
89478: LIST
89479: LIST
89480: PPUSH
89481: CALL_OW 69
89485: IN
89486: PUSH
89487: LD_EXP 133
89491: PUSH
89492: LD_VAR 0 1
89496: ARRAY
89497: PUSH
89498: LD_VAR 0 2
89502: ARRAY
89503: PUSH
89504: LD_INT 1
89506: ARRAY
89507: PPUSH
89508: LD_EXP 133
89512: PUSH
89513: LD_VAR 0 1
89517: ARRAY
89518: PUSH
89519: LD_VAR 0 2
89523: ARRAY
89524: PUSH
89525: LD_INT 2
89527: ARRAY
89528: PPUSH
89529: CALL_OW 458
89533: AND
89534: IFFALSE 89628
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
89536: LD_EXP 133
89540: PUSH
89541: LD_VAR 0 1
89545: ARRAY
89546: PUSH
89547: LD_VAR 0 2
89551: ARRAY
89552: PUSH
89553: LD_INT 1
89555: ARRAY
89556: PPUSH
89557: LD_EXP 133
89561: PUSH
89562: LD_VAR 0 1
89566: ARRAY
89567: PUSH
89568: LD_VAR 0 2
89572: ARRAY
89573: PUSH
89574: LD_INT 2
89576: ARRAY
89577: PPUSH
89578: LD_VAR 0 3
89582: PPUSH
89583: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
89587: LD_ADDR_EXP 133
89591: PUSH
89592: LD_EXP 133
89596: PPUSH
89597: LD_VAR 0 1
89601: PPUSH
89602: LD_EXP 133
89606: PUSH
89607: LD_VAR 0 1
89611: ARRAY
89612: PPUSH
89613: LD_VAR 0 2
89617: PPUSH
89618: CALL_OW 3
89622: PPUSH
89623: CALL_OW 1
89627: ST_TO_ADDR
// end ; end ;
89628: GO 89379
89630: POP
89631: POP
// end ;
89632: GO 89297
89634: POP
89635: POP
// end ;
89636: PPOPN 4
89638: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
89639: LD_INT 0
89641: PPUSH
89642: PPUSH
// result := false ;
89643: LD_ADDR_VAR 0 4
89647: PUSH
89648: LD_INT 0
89650: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
89651: LD_VAR 0 1
89655: PPUSH
89656: CALL_OW 264
89660: PUSH
89661: LD_INT 81
89663: EQUAL
89664: NOT
89665: IFFALSE 89669
// exit ;
89667: GO 89909
// index := GetElementIndex ( minersList , unit ) ;
89669: LD_ADDR_VAR 0 5
89673: PUSH
89674: LD_EXP 132
89678: PPUSH
89679: LD_VAR 0 1
89683: PPUSH
89684: CALL 34327 0 2
89688: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
89689: LD_EXP 133
89693: PUSH
89694: LD_VAR 0 5
89698: ARRAY
89699: PUSH
89700: LD_EXP 134
89704: GREATEREQUAL
89705: IFFALSE 89709
// exit ;
89707: GO 89909
// ComMoveXY ( unit , x , y ) ;
89709: LD_VAR 0 1
89713: PPUSH
89714: LD_VAR 0 2
89718: PPUSH
89719: LD_VAR 0 3
89723: PPUSH
89724: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
89728: LD_INT 35
89730: PPUSH
89731: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
89735: LD_VAR 0 1
89739: PPUSH
89740: LD_VAR 0 2
89744: PPUSH
89745: LD_VAR 0 3
89749: PPUSH
89750: CALL 65682 0 3
89754: NOT
89755: PUSH
89756: LD_VAR 0 1
89760: PPUSH
89761: CALL_OW 314
89765: AND
89766: IFFALSE 89770
// exit ;
89768: GO 89909
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
89770: LD_VAR 0 2
89774: PPUSH
89775: LD_VAR 0 3
89779: PPUSH
89780: CALL_OW 428
89784: PUSH
89785: LD_VAR 0 1
89789: EQUAL
89790: PUSH
89791: LD_VAR 0 1
89795: PPUSH
89796: CALL_OW 314
89800: NOT
89801: AND
89802: IFFALSE 89728
// PlaySoundXY ( x , y , PlantMine ) ;
89804: LD_VAR 0 2
89808: PPUSH
89809: LD_VAR 0 3
89813: PPUSH
89814: LD_STRING PlantMine
89816: PPUSH
89817: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
89821: LD_VAR 0 2
89825: PPUSH
89826: LD_VAR 0 3
89830: PPUSH
89831: LD_VAR 0 1
89835: PPUSH
89836: CALL_OW 255
89840: PPUSH
89841: LD_INT 0
89843: PPUSH
89844: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
89848: LD_ADDR_EXP 133
89852: PUSH
89853: LD_EXP 133
89857: PPUSH
89858: LD_VAR 0 5
89862: PUSH
89863: LD_EXP 133
89867: PUSH
89868: LD_VAR 0 5
89872: ARRAY
89873: PUSH
89874: LD_INT 1
89876: PLUS
89877: PUSH
89878: EMPTY
89879: LIST
89880: LIST
89881: PPUSH
89882: LD_VAR 0 2
89886: PUSH
89887: LD_VAR 0 3
89891: PUSH
89892: EMPTY
89893: LIST
89894: LIST
89895: PPUSH
89896: CALL 34542 0 3
89900: ST_TO_ADDR
// result := true ;
89901: LD_ADDR_VAR 0 4
89905: PUSH
89906: LD_INT 1
89908: ST_TO_ADDR
// end ;
89909: LD_VAR 0 4
89913: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
89914: LD_INT 0
89916: PPUSH
89917: PPUSH
89918: PPUSH
// if not unit in minersList then
89919: LD_VAR 0 1
89923: PUSH
89924: LD_EXP 132
89928: IN
89929: NOT
89930: IFFALSE 89934
// exit ;
89932: GO 90326
// index := GetElementIndex ( minersList , unit ) ;
89934: LD_ADDR_VAR 0 6
89938: PUSH
89939: LD_EXP 132
89943: PPUSH
89944: LD_VAR 0 1
89948: PPUSH
89949: CALL 34327 0 2
89953: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
89954: LD_ADDR_VAR 0 5
89958: PUSH
89959: DOUBLE
89960: LD_EXP 133
89964: PUSH
89965: LD_VAR 0 6
89969: ARRAY
89970: INC
89971: ST_TO_ADDR
89972: LD_INT 1
89974: PUSH
89975: FOR_DOWNTO
89976: IFFALSE 90137
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
89978: LD_EXP 133
89982: PUSH
89983: LD_VAR 0 6
89987: ARRAY
89988: PUSH
89989: LD_VAR 0 5
89993: ARRAY
89994: PUSH
89995: LD_INT 1
89997: ARRAY
89998: PUSH
89999: LD_VAR 0 2
90003: EQUAL
90004: PUSH
90005: LD_EXP 133
90009: PUSH
90010: LD_VAR 0 6
90014: ARRAY
90015: PUSH
90016: LD_VAR 0 5
90020: ARRAY
90021: PUSH
90022: LD_INT 2
90024: ARRAY
90025: PUSH
90026: LD_VAR 0 3
90030: EQUAL
90031: AND
90032: IFFALSE 90135
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
90034: LD_EXP 133
90038: PUSH
90039: LD_VAR 0 6
90043: ARRAY
90044: PUSH
90045: LD_VAR 0 5
90049: ARRAY
90050: PUSH
90051: LD_INT 1
90053: ARRAY
90054: PPUSH
90055: LD_EXP 133
90059: PUSH
90060: LD_VAR 0 6
90064: ARRAY
90065: PUSH
90066: LD_VAR 0 5
90070: ARRAY
90071: PUSH
90072: LD_INT 2
90074: ARRAY
90075: PPUSH
90076: LD_VAR 0 1
90080: PPUSH
90081: CALL_OW 255
90085: PPUSH
90086: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
90090: LD_ADDR_EXP 133
90094: PUSH
90095: LD_EXP 133
90099: PPUSH
90100: LD_VAR 0 6
90104: PPUSH
90105: LD_EXP 133
90109: PUSH
90110: LD_VAR 0 6
90114: ARRAY
90115: PPUSH
90116: LD_VAR 0 5
90120: PPUSH
90121: CALL_OW 3
90125: PPUSH
90126: CALL_OW 1
90130: ST_TO_ADDR
// exit ;
90131: POP
90132: POP
90133: GO 90326
// end ; end ;
90135: GO 89975
90137: POP
90138: POP
// for i := minerMinesList [ index ] downto 1 do
90139: LD_ADDR_VAR 0 5
90143: PUSH
90144: DOUBLE
90145: LD_EXP 133
90149: PUSH
90150: LD_VAR 0 6
90154: ARRAY
90155: INC
90156: ST_TO_ADDR
90157: LD_INT 1
90159: PUSH
90160: FOR_DOWNTO
90161: IFFALSE 90324
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
90163: LD_EXP 133
90167: PUSH
90168: LD_VAR 0 6
90172: ARRAY
90173: PUSH
90174: LD_VAR 0 5
90178: ARRAY
90179: PUSH
90180: LD_INT 1
90182: ARRAY
90183: PPUSH
90184: LD_EXP 133
90188: PUSH
90189: LD_VAR 0 6
90193: ARRAY
90194: PUSH
90195: LD_VAR 0 5
90199: ARRAY
90200: PUSH
90201: LD_INT 2
90203: ARRAY
90204: PPUSH
90205: LD_VAR 0 2
90209: PPUSH
90210: LD_VAR 0 3
90214: PPUSH
90215: CALL_OW 298
90219: PUSH
90220: LD_INT 6
90222: LESS
90223: IFFALSE 90322
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
90225: LD_EXP 133
90229: PUSH
90230: LD_VAR 0 6
90234: ARRAY
90235: PUSH
90236: LD_VAR 0 5
90240: ARRAY
90241: PUSH
90242: LD_INT 1
90244: ARRAY
90245: PPUSH
90246: LD_EXP 133
90250: PUSH
90251: LD_VAR 0 6
90255: ARRAY
90256: PUSH
90257: LD_VAR 0 5
90261: ARRAY
90262: PUSH
90263: LD_INT 2
90265: ARRAY
90266: PPUSH
90267: LD_VAR 0 1
90271: PPUSH
90272: CALL_OW 255
90276: PPUSH
90277: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
90281: LD_ADDR_EXP 133
90285: PUSH
90286: LD_EXP 133
90290: PPUSH
90291: LD_VAR 0 6
90295: PPUSH
90296: LD_EXP 133
90300: PUSH
90301: LD_VAR 0 6
90305: ARRAY
90306: PPUSH
90307: LD_VAR 0 5
90311: PPUSH
90312: CALL_OW 3
90316: PPUSH
90317: CALL_OW 1
90321: ST_TO_ADDR
// end ; end ;
90322: GO 90160
90324: POP
90325: POP
// end ;
90326: LD_VAR 0 4
90330: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
90331: LD_INT 0
90333: PPUSH
90334: PPUSH
90335: PPUSH
90336: PPUSH
90337: PPUSH
90338: PPUSH
90339: PPUSH
90340: PPUSH
90341: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
90342: LD_VAR 0 1
90346: PPUSH
90347: CALL_OW 264
90351: PUSH
90352: LD_INT 81
90354: EQUAL
90355: NOT
90356: PUSH
90357: LD_VAR 0 1
90361: PUSH
90362: LD_EXP 132
90366: IN
90367: NOT
90368: OR
90369: IFFALSE 90373
// exit ;
90371: GO 90695
// index := GetElementIndex ( minersList , unit ) ;
90373: LD_ADDR_VAR 0 6
90377: PUSH
90378: LD_EXP 132
90382: PPUSH
90383: LD_VAR 0 1
90387: PPUSH
90388: CALL 34327 0 2
90392: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
90393: LD_ADDR_VAR 0 8
90397: PUSH
90398: LD_EXP 134
90402: PUSH
90403: LD_EXP 133
90407: PUSH
90408: LD_VAR 0 6
90412: ARRAY
90413: MINUS
90414: ST_TO_ADDR
// if not minesFreeAmount then
90415: LD_VAR 0 8
90419: NOT
90420: IFFALSE 90424
// exit ;
90422: GO 90695
// tmp := [ ] ;
90424: LD_ADDR_VAR 0 7
90428: PUSH
90429: EMPTY
90430: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
90431: LD_ADDR_VAR 0 5
90435: PUSH
90436: DOUBLE
90437: LD_INT 1
90439: DEC
90440: ST_TO_ADDR
90441: LD_VAR 0 8
90445: PUSH
90446: FOR_TO
90447: IFFALSE 90642
// begin _d := rand ( 0 , 5 ) ;
90449: LD_ADDR_VAR 0 11
90453: PUSH
90454: LD_INT 0
90456: PPUSH
90457: LD_INT 5
90459: PPUSH
90460: CALL_OW 12
90464: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
90465: LD_ADDR_VAR 0 12
90469: PUSH
90470: LD_INT 2
90472: PPUSH
90473: LD_INT 6
90475: PPUSH
90476: CALL_OW 12
90480: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
90481: LD_ADDR_VAR 0 9
90485: PUSH
90486: LD_VAR 0 2
90490: PPUSH
90491: LD_VAR 0 11
90495: PPUSH
90496: LD_VAR 0 12
90500: PPUSH
90501: CALL_OW 272
90505: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
90506: LD_ADDR_VAR 0 10
90510: PUSH
90511: LD_VAR 0 3
90515: PPUSH
90516: LD_VAR 0 11
90520: PPUSH
90521: LD_VAR 0 12
90525: PPUSH
90526: CALL_OW 273
90530: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
90531: LD_VAR 0 9
90535: PPUSH
90536: LD_VAR 0 10
90540: PPUSH
90541: CALL_OW 488
90545: PUSH
90546: LD_VAR 0 9
90550: PUSH
90551: LD_VAR 0 10
90555: PUSH
90556: EMPTY
90557: LIST
90558: LIST
90559: PUSH
90560: LD_VAR 0 7
90564: IN
90565: NOT
90566: AND
90567: PUSH
90568: LD_VAR 0 9
90572: PPUSH
90573: LD_VAR 0 10
90577: PPUSH
90578: CALL_OW 458
90582: NOT
90583: AND
90584: IFFALSE 90626
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
90586: LD_ADDR_VAR 0 7
90590: PUSH
90591: LD_VAR 0 7
90595: PPUSH
90596: LD_VAR 0 7
90600: PUSH
90601: LD_INT 1
90603: PLUS
90604: PPUSH
90605: LD_VAR 0 9
90609: PUSH
90610: LD_VAR 0 10
90614: PUSH
90615: EMPTY
90616: LIST
90617: LIST
90618: PPUSH
90619: CALL_OW 1
90623: ST_TO_ADDR
90624: GO 90640
// i := i - 1 ;
90626: LD_ADDR_VAR 0 5
90630: PUSH
90631: LD_VAR 0 5
90635: PUSH
90636: LD_INT 1
90638: MINUS
90639: ST_TO_ADDR
// end ;
90640: GO 90446
90642: POP
90643: POP
// for i in tmp do
90644: LD_ADDR_VAR 0 5
90648: PUSH
90649: LD_VAR 0 7
90653: PUSH
90654: FOR_IN
90655: IFFALSE 90693
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
90657: LD_VAR 0 1
90661: PPUSH
90662: LD_VAR 0 5
90666: PUSH
90667: LD_INT 1
90669: ARRAY
90670: PPUSH
90671: LD_VAR 0 5
90675: PUSH
90676: LD_INT 2
90678: ARRAY
90679: PPUSH
90680: CALL 89639 0 3
90684: NOT
90685: IFFALSE 90691
// exit ;
90687: POP
90688: POP
90689: GO 90695
90691: GO 90654
90693: POP
90694: POP
// end ;
90695: LD_VAR 0 4
90699: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
90700: LD_INT 0
90702: PPUSH
90703: PPUSH
90704: PPUSH
90705: PPUSH
90706: PPUSH
90707: PPUSH
90708: PPUSH
// if not GetClass ( unit ) = class_sniper then
90709: LD_VAR 0 1
90713: PPUSH
90714: CALL_OW 257
90718: PUSH
90719: LD_INT 5
90721: EQUAL
90722: NOT
90723: IFFALSE 90727
// exit ;
90725: GO 91115
// dist := 8 ;
90727: LD_ADDR_VAR 0 5
90731: PUSH
90732: LD_INT 8
90734: ST_TO_ADDR
// viewRange := 12 ;
90735: LD_ADDR_VAR 0 7
90739: PUSH
90740: LD_INT 12
90742: ST_TO_ADDR
// side := GetSide ( unit ) ;
90743: LD_ADDR_VAR 0 6
90747: PUSH
90748: LD_VAR 0 1
90752: PPUSH
90753: CALL_OW 255
90757: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
90758: LD_INT 61
90760: PPUSH
90761: LD_VAR 0 6
90765: PPUSH
90766: CALL_OW 321
90770: PUSH
90771: LD_INT 2
90773: EQUAL
90774: IFFALSE 90784
// viewRange := 16 ;
90776: LD_ADDR_VAR 0 7
90780: PUSH
90781: LD_INT 16
90783: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
90784: LD_VAR 0 1
90788: PPUSH
90789: LD_VAR 0 2
90793: PPUSH
90794: LD_VAR 0 3
90798: PPUSH
90799: CALL_OW 297
90803: PUSH
90804: LD_VAR 0 5
90808: GREATER
90809: IFFALSE 90888
// begin ComMoveXY ( unit , x , y ) ;
90811: LD_VAR 0 1
90815: PPUSH
90816: LD_VAR 0 2
90820: PPUSH
90821: LD_VAR 0 3
90825: PPUSH
90826: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
90830: LD_INT 35
90832: PPUSH
90833: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
90837: LD_VAR 0 1
90841: PPUSH
90842: LD_VAR 0 2
90846: PPUSH
90847: LD_VAR 0 3
90851: PPUSH
90852: CALL 65682 0 3
90856: NOT
90857: IFFALSE 90861
// exit ;
90859: GO 91115
// until GetDistUnitXY ( unit , x , y ) < dist ;
90861: LD_VAR 0 1
90865: PPUSH
90866: LD_VAR 0 2
90870: PPUSH
90871: LD_VAR 0 3
90875: PPUSH
90876: CALL_OW 297
90880: PUSH
90881: LD_VAR 0 5
90885: LESS
90886: IFFALSE 90830
// end ; ComTurnXY ( unit , x , y ) ;
90888: LD_VAR 0 1
90892: PPUSH
90893: LD_VAR 0 2
90897: PPUSH
90898: LD_VAR 0 3
90902: PPUSH
90903: CALL_OW 118
// wait ( 5 ) ;
90907: LD_INT 5
90909: PPUSH
90910: CALL_OW 67
// _d := GetDir ( unit ) ;
90914: LD_ADDR_VAR 0 10
90918: PUSH
90919: LD_VAR 0 1
90923: PPUSH
90924: CALL_OW 254
90928: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
90929: LD_ADDR_VAR 0 8
90933: PUSH
90934: LD_VAR 0 1
90938: PPUSH
90939: CALL_OW 250
90943: PPUSH
90944: LD_VAR 0 10
90948: PPUSH
90949: LD_VAR 0 5
90953: PPUSH
90954: CALL_OW 272
90958: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
90959: LD_ADDR_VAR 0 9
90963: PUSH
90964: LD_VAR 0 1
90968: PPUSH
90969: CALL_OW 251
90973: PPUSH
90974: LD_VAR 0 10
90978: PPUSH
90979: LD_VAR 0 5
90983: PPUSH
90984: CALL_OW 273
90988: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
90989: LD_VAR 0 8
90993: PPUSH
90994: LD_VAR 0 9
90998: PPUSH
90999: CALL_OW 488
91003: NOT
91004: IFFALSE 91008
// exit ;
91006: GO 91115
// ComAnimCustom ( unit , 1 ) ;
91008: LD_VAR 0 1
91012: PPUSH
91013: LD_INT 1
91015: PPUSH
91016: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
91020: LD_VAR 0 8
91024: PPUSH
91025: LD_VAR 0 9
91029: PPUSH
91030: LD_VAR 0 6
91034: PPUSH
91035: LD_VAR 0 7
91039: PPUSH
91040: CALL_OW 330
// repeat wait ( 1 ) ;
91044: LD_INT 1
91046: PPUSH
91047: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
91051: LD_VAR 0 1
91055: PPUSH
91056: CALL_OW 316
91060: PUSH
91061: LD_VAR 0 1
91065: PPUSH
91066: CALL_OW 314
91070: OR
91071: PUSH
91072: LD_VAR 0 1
91076: PPUSH
91077: CALL_OW 302
91081: NOT
91082: OR
91083: PUSH
91084: LD_VAR 0 1
91088: PPUSH
91089: CALL_OW 301
91093: OR
91094: IFFALSE 91044
// RemoveSeeing ( _x , _y , side ) ;
91096: LD_VAR 0 8
91100: PPUSH
91101: LD_VAR 0 9
91105: PPUSH
91106: LD_VAR 0 6
91110: PPUSH
91111: CALL_OW 331
// end ; end_of_file
91115: LD_VAR 0 4
91119: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
91120: LD_VAR 0 1
91124: PPUSH
91125: LD_VAR 0 2
91129: PPUSH
91130: LD_VAR 0 3
91134: PPUSH
91135: LD_VAR 0 4
91139: PPUSH
91140: LD_VAR 0 5
91144: PPUSH
91145: LD_VAR 0 6
91149: PPUSH
91150: CALL 71029 0 6
// end ;
91154: PPOPN 6
91156: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
91157: LD_INT 0
91159: PPUSH
// begin if not units then
91160: LD_VAR 0 1
91164: NOT
91165: IFFALSE 91169
// exit ;
91167: GO 91169
// end ;
91169: PPOPN 7
91171: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
91172: CALL 70933 0 0
// end ;
91176: PPOPN 1
91178: END
