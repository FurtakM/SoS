// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 41895 0 0
// Init ;
   8: CALL 35 0 0
// CreateNature ( natureArea , swampArea ) ;
  12: LD_INT 1
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: CALL 2247 0 2
// PrepareArabian ;
  22: CALL 185 0 0
// PrepareRussian ;
  26: CALL 3094 0 0
// Action ;
  30: CALL 3141 0 0
// end ;
  34: END
// export debug , prefix ; function Init ; begin
  35: LD_INT 0
  37: PPUSH
// debug := true ;
  38: LD_ADDR_EXP 1
  42: PUSH
  43: LD_INT 1
  45: ST_TO_ADDR
// prefix := 05_ ;
  46: LD_ADDR_EXP 2
  50: PUSH
  51: LD_STRING 05_
  53: ST_TO_ADDR
// end ;
  54: LD_VAR 0 1
  58: RET
// export function GetSelected ( side ) ; var i , tmp ; begin
  59: LD_INT 0
  61: PPUSH
  62: PPUSH
  63: PPUSH
// if not side then
  64: LD_VAR 0 1
  68: NOT
  69: IFFALSE 73
// exit ;
  71: GO 180
// tmp := FilterAllUnits ( [ f_side , side ] ) ;
  73: LD_ADDR_VAR 0 4
  77: PUSH
  78: LD_INT 22
  80: PUSH
  81: LD_VAR 0 1
  85: PUSH
  86: EMPTY
  87: LIST
  88: LIST
  89: PPUSH
  90: CALL_OW 69
  94: ST_TO_ADDR
// if not tmp or not IsSelected ( tmp ) then
  95: LD_VAR 0 4
  99: NOT
 100: PUSH
 101: LD_VAR 0 4
 105: PPUSH
 106: CALL_OW 306
 110: NOT
 111: OR
 112: IFFALSE 116
// exit ;
 114: GO 180
// result := [ ] ;
 116: LD_ADDR_VAR 0 2
 120: PUSH
 121: EMPTY
 122: ST_TO_ADDR
// for i in tmp do
 123: LD_ADDR_VAR 0 3
 127: PUSH
 128: LD_VAR 0 4
 132: PUSH
 133: FOR_IN
 134: IFFALSE 178
// if IsSelected ( i ) then
 136: LD_VAR 0 3
 140: PPUSH
 141: CALL_OW 306
 145: IFFALSE 176
// result := Replace ( result , result + 1 , i ) ;
 147: LD_ADDR_VAR 0 2
 151: PUSH
 152: LD_VAR 0 2
 156: PPUSH
 157: LD_VAR 0 2
 161: PUSH
 162: LD_INT 1
 164: PLUS
 165: PPUSH
 166: LD_VAR 0 3
 170: PPUSH
 171: CALL_OW 1
 175: ST_TO_ADDR
 176: GO 133
 178: POP
 179: POP
// end ; end_of_file
 180: LD_VAR 0 2
 184: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeApes ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 185: LD_INT 0
 187: PPUSH
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
 195: PPUSH
 196: PPUSH
 197: PPUSH
 198: PPUSH
// uc_nation := 2 ;
 199: LD_ADDR_OWVAR 21
 203: PUSH
 204: LD_INT 2
 206: ST_TO_ADDR
// uc_side := 5 ;
 207: LD_ADDR_OWVAR 20
 211: PUSH
 212: LD_INT 5
 214: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 215: LD_ADDR_EXP 11
 219: PUSH
 220: LD_STRING Abdul
 222: PPUSH
 223: LD_INT 0
 225: PPUSH
 226: LD_STRING 
 228: PPUSH
 229: CALL 4239 0 3
 233: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 234: LD_ADDR_EXP 13
 238: PUSH
 239: LD_STRING Omar
 241: PPUSH
 242: LD_INT 0
 244: PPUSH
 245: LD_STRING 
 247: PPUSH
 248: CALL 4239 0 3
 252: ST_TO_ADDR
// uc_side := 2 ;
 253: LD_ADDR_OWVAR 20
 257: PUSH
 258: LD_INT 2
 260: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 261: LD_ADDR_EXP 3
 265: PUSH
 266: LD_STRING Heike
 268: PPUSH
 269: LD_EXP 1
 273: NOT
 274: PPUSH
 275: LD_EXP 2
 279: PPUSH
 280: CALL 4239 0 3
 284: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 285: LD_ADDR_EXP 6
 289: PUSH
 290: LD_STRING Ibrahim
 292: PPUSH
 293: LD_EXP 1
 297: NOT
 298: PPUSH
 299: LD_EXP 2
 303: PPUSH
 304: CALL 4239 0 3
 308: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 309: LD_ADDR_EXP 4
 313: PUSH
 314: LD_STRING Givi
 316: PPUSH
 317: LD_EXP 1
 321: NOT
 322: PPUSH
 323: LD_EXP 2
 327: PPUSH
 328: CALL 4239 0 3
 332: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 333: LD_ADDR_EXP 7
 337: PUSH
 338: LD_STRING Kamil
 340: PPUSH
 341: LD_EXP 1
 345: NOT
 346: PPUSH
 347: LD_EXP 2
 351: PPUSH
 352: CALL 4239 0 3
 356: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 357: LD_ADDR_EXP 8
 361: PUSH
 362: LD_STRING Kaia
 364: PPUSH
 365: LD_EXP 1
 369: NOT
 370: PPUSH
 371: LD_EXP 2
 375: PPUSH
 376: CALL 4239 0 3
 380: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 381: LD_ADDR_EXP 9
 385: PUSH
 386: LD_STRING Sophia
 388: PPUSH
 389: LD_EXP 1
 393: NOT
 394: PPUSH
 395: LD_EXP 2
 399: PPUSH
 400: CALL 4239 0 3
 404: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 405: LD_ADDR_EXP 10
 409: PUSH
 410: LD_STRING Markov
 412: PPUSH
 413: LD_EXP 1
 417: NOT
 418: PPUSH
 419: LD_EXP 2
 423: PPUSH
 424: CALL 4239 0 3
 428: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 429: LD_ADDR_EXP 15
 433: PUSH
 434: LD_STRING Aviradze
 436: PPUSH
 437: LD_EXP 1
 441: NOT
 442: PPUSH
 443: LD_EXP 2
 447: PPUSH
 448: CALL 4239 0 3
 452: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 453: LD_ADDR_EXP 14
 457: PUSH
 458: LD_STRING Kurt
 460: PPUSH
 461: LD_EXP 1
 465: NOT
 466: PPUSH
 467: LD_EXP 2
 471: PPUSH
 472: CALL 4239 0 3
 476: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 477: LD_ADDR_EXP 5
 481: PUSH
 482: LD_STRING Mike
 484: PPUSH
 485: LD_EXP 1
 489: NOT
 490: PPUSH
 491: LD_EXP 2
 495: PPUSH
 496: CALL 4239 0 3
 500: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 501: LD_ADDR_EXP 12
 505: PUSH
 506: LD_STRING Olaf
 508: PPUSH
 509: LD_INT 0
 511: PPUSH
 512: LD_STRING 
 514: PPUSH
 515: CALL 4239 0 3
 519: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 520: LD_ADDR_EXP 16
 524: PUSH
 525: LD_STRING 05_others
 527: PPUSH
 528: CALL_OW 31
 532: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 533: LD_ADDR_EXP 17
 537: PUSH
 538: LD_STRING 05_apes
 540: PPUSH
 541: CALL_OW 31
 545: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 546: LD_ADDR_VAR 0 5
 550: PUSH
 551: LD_STRING 05_Radar
 553: PPUSH
 554: LD_EXP 1
 558: PPUSH
 559: CALL_OW 30
 563: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 564: LD_ADDR_VAR 0 6
 568: PUSH
 569: LD_STRING 05_RemoteControl
 571: PPUSH
 572: LD_EXP 1
 576: PPUSH
 577: CALL_OW 30
 581: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 582: LD_ADDR_VAR 0 7
 586: PUSH
 587: LD_STRING 05_DrugsTested
 589: PPUSH
 590: LD_EXP 1
 594: PPUSH
 595: CALL_OW 30
 599: ST_TO_ADDR
// if hasDrugs then
 600: LD_VAR 0 7
 604: IFFALSE 619
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 606: LD_INT 5
 608: PPUSH
 609: LD_INT 2
 611: PPUSH
 612: LD_INT 2
 614: PPUSH
 615: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 619: LD_ADDR_VAR 0 12
 623: PUSH
 624: LD_INT 5
 626: PPUSH
 627: LD_INT 0
 629: PPUSH
 630: CALL_OW 517
 634: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 635: LD_ADDR_VAR 0 2
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 12
 649: PUSH
 650: LD_INT 1
 652: ARRAY
 653: PUSH
 654: FOR_TO
 655: IFFALSE 732
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 657: LD_VAR 0 12
 661: PUSH
 662: LD_INT 1
 664: ARRAY
 665: PUSH
 666: LD_VAR 0 2
 670: ARRAY
 671: PPUSH
 672: LD_VAR 0 12
 676: PUSH
 677: LD_INT 2
 679: ARRAY
 680: PUSH
 681: LD_VAR 0 2
 685: ARRAY
 686: PPUSH
 687: CALL_OW 351
 691: IFFALSE 730
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 693: LD_VAR 0 12
 697: PUSH
 698: LD_INT 1
 700: ARRAY
 701: PUSH
 702: LD_VAR 0 2
 706: ARRAY
 707: PPUSH
 708: LD_VAR 0 12
 712: PUSH
 713: LD_INT 2
 715: ARRAY
 716: PUSH
 717: LD_VAR 0 2
 721: ARRAY
 722: PPUSH
 723: LD_INT 2
 725: PPUSH
 726: CALL_OW 244
 730: GO 654
 732: POP
 733: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 734: LD_ADDR_VAR 0 4
 738: PUSH
 739: LD_INT 0
 741: PUSH
 742: LD_INT 206
 744: PUSH
 745: LD_INT 80
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: PUSH
 757: LD_INT 32
 759: PUSH
 760: LD_INT 221
 762: PUSH
 763: LD_INT 95
 765: PUSH
 766: LD_INT 5
 768: PUSH
 769: LD_INT 23
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: LIST
 778: PUSH
 779: LD_INT 32
 781: PUSH
 782: LD_INT 223
 784: PUSH
 785: LD_INT 88
 787: PUSH
 788: LD_INT 5
 790: PUSH
 791: LD_INT 24
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: PUSH
 801: LD_INT 32
 803: PUSH
 804: LD_INT 202
 806: PUSH
 807: LD_INT 64
 809: PUSH
 810: LD_INT 2
 812: PUSH
 813: LD_INT 25
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: PUSH
 823: LD_INT 3
 825: PUSH
 826: LD_INT 203
 828: PUSH
 829: LD_INT 91
 831: PUSH
 832: LD_INT 1
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 8
 843: PUSH
 844: LD_INT 217
 846: PUSH
 847: LD_INT 78
 849: PUSH
 850: LD_INT 4
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 27
 861: PUSH
 862: LD_INT 220
 864: PUSH
 865: LD_INT 99
 867: PUSH
 868: LD_INT 1
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: PUSH
 877: LD_INT 27
 879: PUSH
 880: LD_INT 220
 882: PUSH
 883: LD_INT 103
 885: PUSH
 886: LD_INT 1
 888: PUSH
 889: EMPTY
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: PUSH
 895: LD_INT 27
 897: PUSH
 898: LD_INT 216
 900: PUSH
 901: LD_INT 102
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 17
 915: PUSH
 916: LD_INT 203
 918: PUSH
 919: LD_INT 94
 921: PUSH
 922: LD_INT 0
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 23
 933: PUSH
 934: LD_INT 200
 936: PUSH
 937: LD_INT 88
 939: PUSH
 940: LD_INT 2
 942: PUSH
 943: EMPTY
 944: LIST
 945: LIST
 946: LIST
 947: LIST
 948: PUSH
 949: LD_INT 16
 951: PUSH
 952: LD_INT 199
 954: PUSH
 955: LD_INT 91
 957: PUSH
 958: LD_INT 1
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: LIST
 966: PUSH
 967: LD_INT 26
 969: PUSH
 970: LD_INT 197
 972: PUSH
 973: LD_INT 81
 975: PUSH
 976: LD_INT 1
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: LD_INT 26
 987: PUSH
 988: LD_INT 197
 990: PUSH
 991: LD_INT 78
 993: PUSH
 994: LD_INT 3
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: LIST
1018: ST_TO_ADDR
// if hasRadar then
1019: LD_VAR 0 5
1023: IFFALSE 1067
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
1025: LD_ADDR_VAR 0 4
1029: PUSH
1030: LD_VAR 0 4
1034: PPUSH
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 1
1042: PLUS
1043: PPUSH
1044: LD_INT 20
1046: PUSH
1047: LD_INT 203
1049: PUSH
1050: LD_INT 87
1052: PUSH
1053: LD_INT 3
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: PPUSH
1062: CALL_OW 1
1066: ST_TO_ADDR
// if hasRemote then
1067: LD_VAR 0 6
1071: IFFALSE 1115
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
1073: LD_ADDR_VAR 0 4
1077: PUSH
1078: LD_VAR 0 4
1082: PPUSH
1083: LD_VAR 0 4
1087: PUSH
1088: LD_INT 1
1090: PLUS
1091: PPUSH
1092: LD_INT 22
1094: PUSH
1095: LD_INT 207
1097: PUSH
1098: LD_INT 95
1100: PUSH
1101: LD_INT 5
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: PPUSH
1110: CALL_OW 1
1114: ST_TO_ADDR
// for i in base do
1115: LD_ADDR_VAR 0 2
1119: PUSH
1120: LD_VAR 0 4
1124: PUSH
1125: FOR_IN
1126: IFFALSE 1307
// begin bc_type := i [ 1 ] ;
1128: LD_ADDR_OWVAR 42
1132: PUSH
1133: LD_VAR 0 2
1137: PUSH
1138: LD_INT 1
1140: ARRAY
1141: ST_TO_ADDR
// bc_level := 3 ;
1142: LD_ADDR_OWVAR 43
1146: PUSH
1147: LD_INT 3
1149: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1150: LD_VAR 0 2
1154: PUSH
1155: LD_INT 1
1157: ARRAY
1158: PUSH
1159: LD_INT 8
1161: EQUAL
1162: IFFALSE 1197
// begin bc_kind1 := b_lab_weapon ;
1164: LD_ADDR_OWVAR 44
1168: PUSH
1169: LD_INT 10
1171: ST_TO_ADDR
// if hasRadar then
1172: LD_VAR 0 5
1176: IFFALSE 1188
// bc_kind2 := b_lab_opto else
1178: LD_ADDR_OWVAR 45
1182: PUSH
1183: LD_INT 15
1185: ST_TO_ADDR
1186: GO 1197
// bc_kind2 := - 1 ;
1188: LD_ADDR_OWVAR 45
1192: PUSH
1193: LD_INT 1
1195: NEG
1196: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1197: LD_ADDR_VAR 0 3
1201: PUSH
1202: LD_VAR 0 2
1206: PUSH
1207: LD_INT 2
1209: ARRAY
1210: PPUSH
1211: LD_VAR 0 2
1215: PUSH
1216: LD_INT 3
1218: ARRAY
1219: PPUSH
1220: LD_VAR 0 2
1224: PUSH
1225: LD_INT 4
1227: ARRAY
1228: PPUSH
1229: CALL_OW 47
1233: ST_TO_ADDR
// if i > 4 then
1234: LD_VAR 0 2
1238: PUSH
1239: LD_INT 4
1241: GREATER
1242: IFFALSE 1262
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1244: LD_VAR 0 3
1248: PPUSH
1249: LD_VAR 0 2
1253: PUSH
1254: LD_INT 5
1256: ARRAY
1257: PPUSH
1258: CALL_OW 431
// if i [ 1 ] = b_bunker then
1262: LD_VAR 0 2
1266: PUSH
1267: LD_INT 1
1269: ARRAY
1270: PUSH
1271: LD_INT 32
1273: EQUAL
1274: IFFALSE 1305
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1276: LD_ADDR_VAR 0 11
1280: PUSH
1281: LD_VAR 0 11
1285: PPUSH
1286: LD_VAR 0 11
1290: PUSH
1291: LD_INT 1
1293: PLUS
1294: PPUSH
1295: LD_VAR 0 3
1299: PPUSH
1300: CALL_OW 1
1304: ST_TO_ADDR
// end ;
1305: GO 1125
1307: POP
1308: POP
// depot := HexInfo ( 206 , 80 ) ;
1309: LD_ADDR_VAR 0 9
1313: PUSH
1314: LD_INT 206
1316: PPUSH
1317: LD_INT 80
1319: PPUSH
1320: CALL_OW 428
1324: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1325: LD_ADDR_VAR 0 8
1329: PUSH
1330: LD_INT 203
1332: PPUSH
1333: LD_INT 91
1335: PPUSH
1336: CALL_OW 428
1340: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1341: LD_ADDR_VAR 0 10
1345: PUSH
1346: LD_INT 217
1348: PPUSH
1349: LD_INT 78
1351: PPUSH
1352: CALL_OW 428
1356: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 ] [ Difficulty ] ) ;
1357: LD_VAR 0 9
1361: PPUSH
1362: CALL_OW 274
1366: PPUSH
1367: LD_INT 1
1369: PPUSH
1370: LD_INT 360
1372: PUSH
1373: LD_INT 260
1375: PUSH
1376: LD_INT 160
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: LIST
1383: PUSH
1384: LD_OWVAR 67
1388: ARRAY
1389: PPUSH
1390: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 150 , 100 ] [ Difficulty ] ) ;
1394: LD_VAR 0 9
1398: PPUSH
1399: CALL_OW 274
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: LD_INT 200
1409: PUSH
1410: LD_INT 150
1412: PUSH
1413: LD_INT 100
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: LIST
1420: PUSH
1421: LD_OWVAR 67
1425: ARRAY
1426: PPUSH
1427: CALL_OW 277
// PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1431: LD_EXP 3
1435: PPUSH
1436: LD_INT 213
1438: PPUSH
1439: LD_INT 87
1441: PPUSH
1442: LD_INT 0
1444: PPUSH
1445: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1449: LD_EXP 3
1453: PPUSH
1454: LD_INT 214
1456: PPUSH
1457: LD_INT 87
1459: PPUSH
1460: CALL_OW 118
// if Kaia then
1464: LD_EXP 8
1468: IFFALSE 1503
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1470: LD_EXP 8
1474: PPUSH
1475: LD_INT 213
1477: PPUSH
1478: LD_INT 85
1480: PPUSH
1481: LD_INT 0
1483: PPUSH
1484: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1488: LD_EXP 8
1492: PPUSH
1493: LD_INT 215
1495: PPUSH
1496: LD_INT 87
1498: PPUSH
1499: CALL_OW 118
// end ; if Olaf and Kaia then
1503: LD_EXP 12
1507: PUSH
1508: LD_EXP 8
1512: AND
1513: IFFALSE 1550
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1515: LD_EXP 12
1519: PPUSH
1520: LD_INT 215
1522: PPUSH
1523: LD_INT 87
1525: PPUSH
1526: LD_INT 0
1528: PPUSH
1529: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1533: LD_EXP 12
1537: PPUSH
1538: LD_INT 213
1540: PPUSH
1541: LD_INT 85
1543: PPUSH
1544: CALL_OW 118
// end else
1548: GO 1570
// if Olaf then
1550: LD_EXP 12
1554: IFFALSE 1570
// PlaceHumanInUnit ( Olaf , factory ) ;
1556: LD_EXP 12
1560: PPUSH
1561: LD_VAR 0 8
1565: PPUSH
1566: CALL_OW 52
// if Givi then
1570: LD_EXP 4
1574: IFFALSE 1655
// begin if Kaia and Olaf then
1576: LD_EXP 8
1580: PUSH
1581: LD_EXP 12
1585: AND
1586: IFFALSE 1623
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
1588: LD_EXP 4
1592: PPUSH
1593: LD_INT 247
1595: PPUSH
1596: LD_INT 117
1598: PPUSH
1599: LD_INT 0
1601: PPUSH
1602: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
1606: LD_EXP 4
1610: PPUSH
1611: LD_INT 248
1613: PPUSH
1614: LD_INT 118
1616: PPUSH
1617: CALL_OW 118
// end else
1621: GO 1655
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_INT 216
1630: PPUSH
1631: LD_INT 88
1633: PPUSH
1634: LD_INT 0
1636: PPUSH
1637: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
1641: LD_EXP 4
1645: PPUSH
1646: LD_EXP 3
1650: PPUSH
1651: CALL_OW 119
// end ; end ; if Kurt then
1655: LD_EXP 14
1659: IFFALSE 1679
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
1661: LD_EXP 14
1665: PPUSH
1666: LD_VAR 0 11
1670: PUSH
1671: LD_INT 2
1673: ARRAY
1674: PPUSH
1675: CALL_OW 52
// if Mike then
1679: LD_EXP 5
1683: IFFALSE 1703
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
1685: LD_EXP 5
1689: PPUSH
1690: LD_VAR 0 11
1694: PUSH
1695: LD_INT 3
1697: ARRAY
1698: PPUSH
1699: CALL_OW 52
// if Kamil then
1703: LD_EXP 7
1707: IFFALSE 1769
// begin if Kaia and Olaf then
1709: LD_EXP 8
1713: PUSH
1714: LD_EXP 12
1718: AND
1719: IFFALSE 1737
// PlaceHumanInUnit ( Kamil , depot ) else
1721: LD_EXP 7
1725: PPUSH
1726: LD_VAR 0 9
1730: PPUSH
1731: CALL_OW 52
1735: GO 1769
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
1737: LD_EXP 7
1741: PPUSH
1742: LD_INT 213
1744: PPUSH
1745: LD_INT 87
1747: PPUSH
1748: LD_INT 0
1750: PPUSH
1751: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
1755: LD_EXP 7
1759: PPUSH
1760: LD_EXP 3
1764: PPUSH
1765: CALL_OW 119
// end ; end ; if Sophia then
1769: LD_EXP 9
1773: IFFALSE 1789
// PlaceHumanInUnit ( Sophia , depot ) ;
1775: LD_EXP 9
1779: PPUSH
1780: LD_VAR 0 9
1784: PPUSH
1785: CALL_OW 52
// if Aviradze then
1789: LD_EXP 15
1793: IFFALSE 1809
// PlaceHumanInUnit ( Aviradze , lab ) ;
1795: LD_EXP 15
1799: PPUSH
1800: LD_VAR 0 10
1804: PPUSH
1805: CALL_OW 52
// if Ibrahim then
1809: LD_EXP 6
1813: IFFALSE 1829
// PlaceHumanInUnit ( Ibrahim , lab ) ;
1815: LD_EXP 6
1819: PPUSH
1820: LD_VAR 0 10
1824: PPUSH
1825: CALL_OW 52
// if Markov then
1829: LD_EXP 10
1833: IFFALSE 1849
// PlaceHumanInUnit ( Markov , factory ) ;
1835: LD_EXP 10
1839: PPUSH
1840: LD_VAR 0 8
1844: PPUSH
1845: CALL_OW 52
// if heikeSecondSquad then
1849: LD_EXP 16
1853: IFFALSE 1893
// for i in heikeSecondSquad do
1855: LD_ADDR_VAR 0 2
1859: PUSH
1860: LD_EXP 16
1864: PUSH
1865: FOR_IN
1866: IFFALSE 1891
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
1868: LD_VAR 0 2
1872: PPUSH
1873: LD_INT 190
1875: PPUSH
1876: LD_INT 65
1878: PPUSH
1879: LD_INT 5
1881: PPUSH
1882: LD_INT 0
1884: PPUSH
1885: CALL_OW 50
1889: GO 1865
1891: POP
1892: POP
// if heikeApes then
1893: LD_EXP 17
1897: IFFALSE 1937
// for i in heikeApes do
1899: LD_ADDR_VAR 0 2
1903: PUSH
1904: LD_EXP 17
1908: PUSH
1909: FOR_IN
1910: IFFALSE 1935
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
1912: LD_VAR 0 2
1916: PPUSH
1917: LD_INT 190
1919: PPUSH
1920: LD_INT 70
1922: PPUSH
1923: LD_INT 5
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 50
1933: GO 1909
1935: POP
1936: POP
// end ; end_of_file
1937: LD_VAR 0 1
1941: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
1942: LD_INT 0
1944: PPUSH
// uc_side := side ;
1945: LD_ADDR_OWVAR 20
1949: PUSH
1950: LD_VAR 0 1
1954: ST_TO_ADDR
// uc_nation := nation ;
1955: LD_ADDR_OWVAR 21
1959: PUSH
1960: LD_VAR 0 2
1964: ST_TO_ADDR
// vc_chassis := chassis ;
1965: LD_ADDR_OWVAR 37
1969: PUSH
1970: LD_VAR 0 3
1974: ST_TO_ADDR
// vc_engine := engine ;
1975: LD_ADDR_OWVAR 39
1979: PUSH
1980: LD_VAR 0 4
1984: ST_TO_ADDR
// vc_control := control ;
1985: LD_ADDR_OWVAR 38
1989: PUSH
1990: LD_VAR 0 5
1994: ST_TO_ADDR
// vc_weapon := weapon ;
1995: LD_ADDR_OWVAR 40
1999: PUSH
2000: LD_VAR 0 6
2004: ST_TO_ADDR
// vc_fuel_battery := fuel ;
2005: LD_ADDR_OWVAR 41
2009: PUSH
2010: LD_VAR 0 7
2014: ST_TO_ADDR
// result := CreateVehicle ;
2015: LD_ADDR_VAR 0 8
2019: PUSH
2020: CALL_OW 45
2024: ST_TO_ADDR
// end ;
2025: LD_VAR 0 8
2029: RET
// export function SayX ( units , ident ) ; var i ; begin
2030: LD_INT 0
2032: PPUSH
2033: PPUSH
// result := false ;
2034: LD_ADDR_VAR 0 3
2038: PUSH
2039: LD_INT 0
2041: ST_TO_ADDR
// if not units then
2042: LD_VAR 0 1
2046: NOT
2047: IFFALSE 2051
// exit ;
2049: GO 2105
// for i in units do
2051: LD_ADDR_VAR 0 4
2055: PUSH
2056: LD_VAR 0 1
2060: PUSH
2061: FOR_IN
2062: IFFALSE 2103
// if IsOk ( i ) then
2064: LD_VAR 0 4
2068: PPUSH
2069: CALL_OW 302
2073: IFFALSE 2101
// begin Say ( i , ident ) ;
2075: LD_VAR 0 4
2079: PPUSH
2080: LD_VAR 0 2
2084: PPUSH
2085: CALL_OW 88
// result := i ;
2089: LD_ADDR_VAR 0 3
2093: PUSH
2094: LD_VAR 0 4
2098: ST_TO_ADDR
// break ;
2099: GO 2103
// end ;
2101: GO 2061
2103: POP
2104: POP
// end ;
2105: LD_VAR 0 3
2109: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
2110: LD_INT 0
2112: PPUSH
2113: PPUSH
// InitUc ;
2114: CALL_OW 18
// InitHc ;
2118: CALL_OW 19
// uc_side := 0 ;
2122: LD_ADDR_OWVAR 20
2126: PUSH
2127: LD_INT 0
2129: ST_TO_ADDR
// uc_nation := 0 ;
2130: LD_ADDR_OWVAR 21
2134: PUSH
2135: LD_INT 0
2137: ST_TO_ADDR
// for i = 1 to amount do
2138: LD_ADDR_VAR 0 4
2142: PUSH
2143: DOUBLE
2144: LD_INT 1
2146: DEC
2147: ST_TO_ADDR
2148: LD_VAR 0 2
2152: PUSH
2153: FOR_TO
2154: IFFALSE 2236
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
2156: LD_ADDR_OWVAR 29
2160: PUSH
2161: LD_INT 9
2163: PPUSH
2164: LD_INT 12
2166: PPUSH
2167: CALL_OW 12
2171: PUSH
2172: LD_INT 9
2174: PPUSH
2175: LD_INT 12
2177: PPUSH
2178: CALL_OW 12
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
2187: LD_ADDR_OWVAR 35
2191: PUSH
2192: LD_INT 1
2194: NEG
2195: PPUSH
2196: LD_INT 1
2198: PPUSH
2199: CALL_OW 12
2203: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2204: LD_INT 0
2206: PPUSH
2207: LD_INT 12
2209: PPUSH
2210: LD_INT 1
2212: PPUSH
2213: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
2217: CALL_OW 44
2221: PPUSH
2222: LD_VAR 0 1
2226: PPUSH
2227: LD_INT 0
2229: PPUSH
2230: CALL_OW 49
// end ;
2234: GO 2153
2236: POP
2237: POP
// InitHc ;
2238: CALL_OW 19
// end ;
2242: LD_VAR 0 3
2246: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
2247: LD_INT 0
2249: PPUSH
2250: PPUSH
// uc_side := 0 ;
2251: LD_ADDR_OWVAR 20
2255: PUSH
2256: LD_INT 0
2258: ST_TO_ADDR
// uc_nation := 0 ;
2259: LD_ADDR_OWVAR 21
2263: PUSH
2264: LD_INT 0
2266: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
2267: LD_INT 7
2269: PPUSH
2270: LD_INT 6
2272: PUSH
2273: LD_INT 5
2275: PUSH
2276: LD_INT 4
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: PUSH
2284: LD_OWVAR 67
2288: ARRAY
2289: PPUSH
2290: CALL 2110 0 2
// for i = 1 to 2 do
2294: LD_ADDR_VAR 0 4
2298: PUSH
2299: DOUBLE
2300: LD_INT 1
2302: DEC
2303: ST_TO_ADDR
2304: LD_INT 2
2306: PUSH
2307: FOR_TO
2308: IFFALSE 2347
// begin vc_chassis := class_mastodont ;
2310: LD_ADDR_OWVAR 37
2314: PUSH
2315: LD_EXP 35
2319: ST_TO_ADDR
// vc_control := control_rider ;
2320: LD_ADDR_OWVAR 38
2324: PUSH
2325: LD_INT 4
2327: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
2328: CALL_OW 45
2332: PPUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: LD_INT 0
2340: PPUSH
2341: CALL 39475 0 3
// end ;
2345: GO 2307
2347: POP
2348: POP
// for i := 1 to 4 do
2349: LD_ADDR_VAR 0 4
2353: PUSH
2354: DOUBLE
2355: LD_INT 1
2357: DEC
2358: ST_TO_ADDR
2359: LD_INT 4
2361: PUSH
2362: FOR_TO
2363: IFFALSE 2402
// begin hc_class := class_horse ;
2365: LD_ADDR_OWVAR 28
2369: PUSH
2370: LD_EXP 36
2374: ST_TO_ADDR
// hc_gallery :=  ;
2375: LD_ADDR_OWVAR 33
2379: PUSH
2380: LD_STRING 
2382: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
2383: CALL_OW 44
2387: PPUSH
2388: LD_VAR 0 1
2392: PPUSH
2393: LD_INT 0
2395: PPUSH
2396: CALL_OW 49
// end ;
2400: GO 2362
2402: POP
2403: POP
// for i = 1 to 5 do
2404: LD_ADDR_VAR 0 4
2408: PUSH
2409: DOUBLE
2410: LD_INT 1
2412: DEC
2413: ST_TO_ADDR
2414: LD_INT 5
2416: PUSH
2417: FOR_TO
2418: IFFALSE 2472
// begin hc_class = class_tiger ;
2420: LD_ADDR_OWVAR 28
2424: PUSH
2425: LD_INT 14
2427: ST_TO_ADDR
// hc_gallery =  ;
2428: LD_ADDR_OWVAR 33
2432: PUSH
2433: LD_STRING 
2435: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
2436: LD_ADDR_OWVAR 35
2440: PUSH
2441: LD_INT 7
2443: NEG
2444: PPUSH
2445: LD_INT 7
2447: PPUSH
2448: CALL_OW 12
2452: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
2453: CALL_OW 44
2457: PPUSH
2458: LD_VAR 0 1
2462: PPUSH
2463: LD_INT 0
2465: PPUSH
2466: CALL 39475 0 3
// end ;
2470: GO 2417
2472: POP
2473: POP
// for i := 1 to 4 do
2474: LD_ADDR_VAR 0 4
2478: PUSH
2479: DOUBLE
2480: LD_INT 1
2482: DEC
2483: ST_TO_ADDR
2484: LD_INT 4
2486: PUSH
2487: FOR_TO
2488: IFFALSE 2525
// begin hc_class := class_phororhacos ;
2490: LD_ADDR_OWVAR 28
2494: PUSH
2495: LD_INT 18
2497: ST_TO_ADDR
// hc_gallery :=  ;
2498: LD_ADDR_OWVAR 33
2502: PUSH
2503: LD_STRING 
2505: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
2506: CALL_OW 44
2510: PPUSH
2511: LD_VAR 0 1
2515: PPUSH
2516: LD_INT 0
2518: PPUSH
2519: CALL_OW 49
// end ;
2523: GO 2487
2525: POP
2526: POP
// for i := 1 to 4 do
2527: LD_ADDR_VAR 0 4
2531: PUSH
2532: DOUBLE
2533: LD_INT 1
2535: DEC
2536: ST_TO_ADDR
2537: LD_INT 4
2539: PUSH
2540: FOR_TO
2541: IFFALSE 2578
// begin hc_class := class_baggie ;
2543: LD_ADDR_OWVAR 28
2547: PUSH
2548: LD_INT 13
2550: ST_TO_ADDR
// hc_gallery :=  ;
2551: LD_ADDR_OWVAR 33
2555: PUSH
2556: LD_STRING 
2558: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
2559: CALL_OW 44
2563: PPUSH
2564: LD_VAR 0 1
2568: PPUSH
2569: LD_INT 0
2571: PPUSH
2572: CALL_OW 49
// end ;
2576: GO 2540
2578: POP
2579: POP
// for i := 1 to 7 do
2580: LD_ADDR_VAR 0 4
2584: PUSH
2585: DOUBLE
2586: LD_INT 1
2588: DEC
2589: ST_TO_ADDR
2590: LD_INT 7
2592: PUSH
2593: FOR_TO
2594: IFFALSE 2631
// begin hc_class := class_frog ;
2596: LD_ADDR_OWVAR 28
2600: PUSH
2601: LD_INT 19
2603: ST_TO_ADDR
// hc_gallery :=  ;
2604: LD_ADDR_OWVAR 33
2608: PUSH
2609: LD_STRING 
2611: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
2612: CALL_OW 44
2616: PPUSH
2617: LD_VAR 0 2
2621: PPUSH
2622: LD_INT 0
2624: PPUSH
2625: CALL_OW 49
// end ;
2629: GO 2593
2631: POP
2632: POP
// end ;
2633: LD_VAR 0 3
2637: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
2638: LD_INT 0
2640: PPUSH
2641: PPUSH
2642: PPUSH
// if not observer or not unit then
2643: LD_VAR 0 1
2647: NOT
2648: PUSH
2649: LD_VAR 0 2
2653: NOT
2654: OR
2655: IFFALSE 2659
// exit ;
2657: GO 2707
// if not See ( GetSide ( observer ) , unit ) then
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL_OW 255
2668: PPUSH
2669: LD_VAR 0 2
2673: PPUSH
2674: CALL_OW 292
2678: NOT
2679: IFFALSE 2683
// exit ;
2681: GO 2707
// result := GetDistUnits ( observer , unit ) < 12 ;
2683: LD_ADDR_VAR 0 3
2687: PUSH
2688: LD_VAR 0 1
2692: PPUSH
2693: LD_VAR 0 2
2697: PPUSH
2698: CALL_OW 296
2702: PUSH
2703: LD_INT 12
2705: LESS
2706: ST_TO_ADDR
// end ;
2707: LD_VAR 0 3
2711: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
2712: LD_INT 0
2714: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
2715: LD_VAR 0 2
2719: PUSH
2720: LD_INT 1
2722: ARRAY
2723: PPUSH
2724: LD_VAR 0 2
2728: PUSH
2729: LD_INT 2
2731: ARRAY
2732: PPUSH
2733: CALL_OW 488
2737: PUSH
2738: LD_VAR 0 2
2742: PUSH
2743: LD_INT 1
2745: ARRAY
2746: PPUSH
2747: LD_VAR 0 2
2751: PUSH
2752: LD_INT 2
2754: ARRAY
2755: PPUSH
2756: CALL_OW 428
2760: PUSH
2761: LD_INT 0
2763: EQUAL
2764: AND
2765: IFFALSE 2799
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
2767: LD_VAR 0 1
2771: PPUSH
2772: LD_VAR 0 2
2776: PUSH
2777: LD_INT 1
2779: ARRAY
2780: PPUSH
2781: LD_VAR 0 2
2785: PUSH
2786: LD_INT 2
2788: ARRAY
2789: PPUSH
2790: LD_VAR 0 3
2794: PPUSH
2795: CALL_OW 48
// end ;
2799: LD_VAR 0 4
2803: RET
// export function ReverseArray ( array ) ; var i ; begin
2804: LD_INT 0
2806: PPUSH
2807: PPUSH
// if not array then
2808: LD_VAR 0 1
2812: NOT
2813: IFFALSE 2817
// exit ;
2815: GO 2875
// result := [ ] ;
2817: LD_ADDR_VAR 0 2
2821: PUSH
2822: EMPTY
2823: ST_TO_ADDR
// for i := 1 to array do
2824: LD_ADDR_VAR 0 3
2828: PUSH
2829: DOUBLE
2830: LD_INT 1
2832: DEC
2833: ST_TO_ADDR
2834: LD_VAR 0 1
2838: PUSH
2839: FOR_TO
2840: IFFALSE 2873
// result := Insert ( result , 1 , array [ i ] ) ;
2842: LD_ADDR_VAR 0 2
2846: PUSH
2847: LD_VAR 0 2
2851: PPUSH
2852: LD_INT 1
2854: PPUSH
2855: LD_VAR 0 1
2859: PUSH
2860: LD_VAR 0 3
2864: ARRAY
2865: PPUSH
2866: CALL_OW 2
2870: ST_TO_ADDR
2871: GO 2839
2873: POP
2874: POP
// end ;
2875: LD_VAR 0 2
2879: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
2880: LD_INT 0
2882: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
2883: LD_VAR 0 1
2887: PPUSH
2888: LD_VAR 0 2
2892: PPUSH
2893: LD_VAR 0 3
2897: PPUSH
2898: LD_VAR 0 4
2902: PPUSH
2903: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
2907: LD_VAR 0 1
2911: PPUSH
2912: LD_VAR 0 2
2916: PPUSH
2917: LD_VAR 0 3
2921: PPUSH
2922: CALL_OW 331
// end ;
2926: LD_VAR 0 5
2930: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
2931: LD_INT 0
2933: PPUSH
// if not units then
2934: LD_VAR 0 1
2938: NOT
2939: IFFALSE 2943
// exit ;
2941: GO 3026
// result := true ;
2943: LD_ADDR_VAR 0 4
2947: PUSH
2948: LD_INT 1
2950: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
2951: LD_VAR 0 1
2955: PPUSH
2956: LD_INT 26
2958: PUSH
2959: LD_INT 1
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: PPUSH
2966: CALL_OW 72
2970: PUSH
2971: LD_INT 1
2973: ARRAY
2974: PPUSH
2975: LD_VAR 0 2
2979: PPUSH
2980: CALL_OW 88
2984: NOT
2985: IFFALSE 3026
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
2987: LD_ADDR_VAR 0 4
2991: PUSH
2992: LD_VAR 0 1
2996: PPUSH
2997: LD_INT 26
2999: PUSH
3000: LD_INT 2
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PPUSH
3007: CALL_OW 72
3011: PUSH
3012: LD_INT 1
3014: ARRAY
3015: PPUSH
3016: LD_VAR 0 3
3020: PPUSH
3021: CALL_OW 88
3025: ST_TO_ADDR
// end ;
3026: LD_VAR 0 4
3030: RET
// export function SeeGroup ( side , group ) ; var i ; begin
3031: LD_INT 0
3033: PPUSH
3034: PPUSH
// if not group then
3035: LD_VAR 0 2
3039: NOT
3040: IFFALSE 3044
// exit ;
3042: GO 3089
// for i in group do
3044: LD_ADDR_VAR 0 4
3048: PUSH
3049: LD_VAR 0 2
3053: PUSH
3054: FOR_IN
3055: IFFALSE 3087
// if See ( side , i ) then
3057: LD_VAR 0 1
3061: PPUSH
3062: LD_VAR 0 4
3066: PPUSH
3067: CALL_OW 292
3071: IFFALSE 3085
// begin result := true ;
3073: LD_ADDR_VAR 0 3
3077: PUSH
3078: LD_INT 1
3080: ST_TO_ADDR
// exit ;
3081: POP
3082: POP
3083: GO 3089
// end ;
3085: GO 3054
3087: POP
3088: POP
// end ; end_of_file
3089: LD_VAR 0 3
3093: RET
// export Morozov ; export function PrepareRussian ; begin
3094: LD_INT 0
3096: PPUSH
// uc_side := 3 ;
3097: LD_ADDR_OWVAR 20
3101: PUSH
3102: LD_INT 3
3104: ST_TO_ADDR
// uc_nation := 3 ;
3105: LD_ADDR_OWVAR 21
3109: PUSH
3110: LD_INT 3
3112: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
3113: LD_ADDR_EXP 18
3117: PUSH
3118: LD_STRING Morozov
3120: PPUSH
3121: CALL_OW 25
3125: ST_TO_ADDR
// SetBName ( ruLenin , lenin ) ;
3126: LD_INT 52
3128: PPUSH
3129: LD_STRING lenin
3131: PPUSH
3132: CALL_OW 500
// end ; end_of_file
3136: LD_VAR 0 1
3140: RET
// export function Action ; begin
3141: LD_INT 0
3143: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
3144: LD_INT 2
3146: PPUSH
3147: LD_INT 4
3149: PPUSH
3150: CALL_OW 332
// Video ( true ) ;
3154: LD_INT 1
3156: PPUSH
3157: CALL 40533 0 1
// CenterNowOnXY ( 213 , 89 ) ;
3161: LD_INT 213
3163: PPUSH
3164: LD_INT 89
3166: PPUSH
3167: CALL_OW 86
// if not debug then
3171: LD_EXP 1
3175: NOT
3176: IFFALSE 3210
// begin if Kaia and Olaf then
3178: LD_EXP 8
3182: PUSH
3183: LD_EXP 12
3187: AND
3188: IFFALSE 3194
// SceneKaiaWithOlaf ;
3190: CALL 3233 0 0
// if Givi and Kamil then
3194: LD_EXP 4
3198: PUSH
3199: LD_EXP 7
3203: AND
3204: IFFALSE 3210
// SceneWithGiviAndKamil ;
3206: CALL 3804 0 0
// end ; Video ( false ) ;
3210: LD_INT 0
3212: PPUSH
3213: CALL 40533 0 1
// ChangeMissionObjectives ( M1 ) ;
3217: LD_STRING M1
3219: PPUSH
3220: CALL_OW 337
// SaveForQuickRestart ;
3224: CALL_OW 22
// end ;
3228: LD_VAR 0 1
3232: RET
// export function SceneKaiaWithOlaf ; begin
3233: LD_INT 0
3235: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
3236: LD_INT 22
3238: PUSH
3239: LD_INT 2
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: LD_INT 30
3248: PUSH
3249: LD_INT 3
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: PPUSH
3260: CALL_OW 69
3264: PPUSH
3265: LD_INT 14
3267: PPUSH
3268: LD_INT 1
3270: PPUSH
3271: LD_INT 1
3273: PPUSH
3274: LD_INT 26
3276: PPUSH
3277: CALL_OW 125
// wait ( 0 0$1 ) ;
3281: LD_INT 35
3283: PPUSH
3284: CALL_OW 67
// Say ( Kaia , DK-06-Mem-1 ) ;
3288: LD_EXP 8
3292: PPUSH
3293: LD_STRING DK-06-Mem-1
3295: PPUSH
3296: CALL_OW 88
// Say ( Kaia , DK-06-Mem-2 ) ;
3300: LD_EXP 8
3304: PPUSH
3305: LD_STRING DK-06-Mem-2
3307: PPUSH
3308: CALL_OW 88
// Say ( Olaf , DO-06-Mem-3 ) ;
3312: LD_EXP 12
3316: PPUSH
3317: LD_STRING DO-06-Mem-3
3319: PPUSH
3320: CALL_OW 88
// Say ( Kaia , DK-06-Mem-4 ) ;
3324: LD_EXP 8
3328: PPUSH
3329: LD_STRING DK-06-Mem-4
3331: PPUSH
3332: CALL_OW 88
// Say ( Olaf , DO-06-Mem-5 ) ;
3336: LD_EXP 12
3340: PPUSH
3341: LD_STRING DO-06-Mem-5
3343: PPUSH
3344: CALL_OW 88
// wait ( 0 0$2 ) ;
3348: LD_INT 70
3350: PPUSH
3351: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
3355: LD_INT 22
3357: PUSH
3358: LD_INT 2
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PUSH
3365: LD_INT 30
3367: PUSH
3368: LD_INT 3
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PPUSH
3379: CALL_OW 69
3383: PPUSH
3384: LD_INT 90
3386: PPUSH
3387: CALL_OW 329
// Say ( Olaf , DO-06-Mem-6 ) ;
3391: LD_EXP 12
3395: PPUSH
3396: LD_STRING DO-06-Mem-6
3398: PPUSH
3399: CALL_OW 88
// Say ( Kaia , DK-06-Mem-7 ) ;
3403: LD_EXP 8
3407: PPUSH
3408: LD_STRING DK-06-Mem-7
3410: PPUSH
3411: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
3415: LD_EXP 3
3419: PPUSH
3420: LD_EXP 8
3424: PPUSH
3425: CALL_OW 119
// Say ( Heike , DH-06-Mem-8 ) ;
3429: LD_EXP 3
3433: PPUSH
3434: LD_STRING DH-06-Mem-8
3436: PPUSH
3437: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
3441: LD_EXP 8
3445: PUSH
3446: LD_EXP 12
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PPUSH
3455: LD_EXP 3
3459: PPUSH
3460: CALL_OW 119
// Say ( Olaf , DO-06-Mem-9 ) ;
3464: LD_EXP 12
3468: PPUSH
3469: LD_STRING DO-06-Mem-9
3471: PPUSH
3472: CALL_OW 88
// Say ( Olaf , DO-06-Mem-10 ) ;
3476: LD_EXP 12
3480: PPUSH
3481: LD_STRING DO-06-Mem-10
3483: PPUSH
3484: CALL_OW 88
// Say ( Olaf , DO-06-Mem-11 ) ;
3488: LD_EXP 12
3492: PPUSH
3493: LD_STRING DO-06-Mem-11
3495: PPUSH
3496: CALL_OW 88
// Say ( Olaf , DO-06-Mem-12 ) ;
3500: LD_EXP 12
3504: PPUSH
3505: LD_STRING DO-06-Mem-12
3507: PPUSH
3508: CALL_OW 88
// Say ( Kaia , DK-06-Mem-13 ) ;
3512: LD_EXP 8
3516: PPUSH
3517: LD_STRING DK-06-Mem-13
3519: PPUSH
3520: CALL_OW 88
// Say ( Kaia , DK-06-Mem-14 ) ;
3524: LD_EXP 8
3528: PPUSH
3529: LD_STRING DK-06-Mem-14
3531: PPUSH
3532: CALL_OW 88
// Say ( Kaia , DK-06-Mem-15 ) ;
3536: LD_EXP 8
3540: PPUSH
3541: LD_STRING DK-06-Mem-15
3543: PPUSH
3544: CALL_OW 88
// Say ( Kaia , DK-06-Mem-16 ) ;
3548: LD_EXP 8
3552: PPUSH
3553: LD_STRING DK-06-Mem-16
3555: PPUSH
3556: CALL_OW 88
// Say ( Kaia , DK-06-Mem-17 ) ;
3560: LD_EXP 8
3564: PPUSH
3565: LD_STRING DK-06-Mem-17
3567: PPUSH
3568: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
3572: LD_EXP 12
3576: PPUSH
3577: LD_EXP 8
3581: PPUSH
3582: CALL_OW 119
// Say ( Olaf , DO-06-Mem-18 ) ;
3586: LD_EXP 12
3590: PPUSH
3591: LD_STRING DO-06-Mem-18
3593: PPUSH
3594: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
3598: LD_EXP 8
3602: PPUSH
3603: LD_EXP 12
3607: PPUSH
3608: CALL_OW 119
// Say ( Kaia , DK-06-Mem-19 ) ;
3612: LD_EXP 8
3616: PPUSH
3617: LD_STRING DK-06-Mem-19
3619: PPUSH
3620: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
3624: LD_EXP 12
3628: PPUSH
3629: LD_INT 214
3631: PPUSH
3632: LD_INT 86
3634: PPUSH
3635: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
3639: LD_EXP 12
3643: PPUSH
3644: LD_EXP 8
3648: PPUSH
3649: CALL_OW 179
// if Givi then
3653: LD_EXP 4
3657: IFFALSE 3688
// begin ComMoveXY ( Givi , 217 , 86 ) ;
3659: LD_EXP 4
3663: PPUSH
3664: LD_INT 217
3666: PPUSH
3667: LD_INT 86
3669: PPUSH
3670: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
3674: LD_EXP 4
3678: PPUSH
3679: LD_EXP 3
3683: PPUSH
3684: CALL_OW 179
// end ; if Kamil then
3688: LD_EXP 7
3692: IFFALSE 3732
// begin ComExit ( Kamil ) ;
3694: LD_EXP 7
3698: PPUSH
3699: CALL 40949 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
3703: LD_EXP 7
3707: PPUSH
3708: LD_INT 212
3710: PPUSH
3711: LD_INT 86
3713: PPUSH
3714: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
3718: LD_EXP 7
3722: PPUSH
3723: LD_EXP 3
3727: PPUSH
3728: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
3732: LD_INT 70
3734: PPUSH
3735: CALL_OW 67
// Say ( Heike , DH-06-Mem-20 ) ;
3739: LD_EXP 3
3743: PPUSH
3744: LD_STRING DH-06-Mem-20
3746: PPUSH
3747: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
3751: LD_EXP 12
3755: PPUSH
3756: LD_INT 215
3758: PPUSH
3759: LD_INT 87
3761: PPUSH
3762: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
3766: LD_EXP 12
3770: PPUSH
3771: LD_EXP 8
3775: PPUSH
3776: CALL_OW 179
// Say ( Kaia , DK-06-Mem-21 ) ;
3780: LD_EXP 8
3784: PPUSH
3785: LD_STRING DK-06-Mem-21
3787: PPUSH
3788: CALL_OW 88
// wait ( 0 0$2 ) ;
3792: LD_INT 70
3794: PPUSH
3795: CALL_OW 67
// end ;
3799: LD_VAR 0 1
3803: RET
// export function SceneWithGiviAndKamil ; begin
3804: LD_INT 0
3806: PPUSH
// if Markov then
3807: LD_EXP 10
3811: IFFALSE 3862
// begin if IsInUnit ( Markov ) then
3813: LD_EXP 10
3817: PPUSH
3818: CALL_OW 310
3822: IFFALSE 3833
// ComExit ( Markov ) ;
3824: LD_EXP 10
3828: PPUSH
3829: CALL 40949 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
3833: LD_EXP 10
3837: PPUSH
3838: LD_INT 212
3840: PPUSH
3841: LD_INT 88
3843: PPUSH
3844: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
3848: LD_EXP 10
3852: PPUSH
3853: LD_EXP 3
3857: PPUSH
3858: CALL_OW 179
// end ; Say ( Givi , DG-06-Obj-1 ) ;
3862: LD_EXP 4
3866: PPUSH
3867: LD_STRING DG-06-Obj-1
3869: PPUSH
3870: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-2 ) ;
3874: LD_EXP 7
3878: PPUSH
3879: LD_STRING DKam-06-Obj-2
3881: PPUSH
3882: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
3886: LD_EXP 3
3890: PPUSH
3891: LD_EXP 7
3895: PPUSH
3896: CALL_OW 119
// Say ( Kamil , DKam-06-Obj-3 ) ;
3900: LD_EXP 7
3904: PPUSH
3905: LD_STRING DKam-06-Obj-3
3907: PPUSH
3908: CALL_OW 88
// Say ( Markov , DMar-06-Obj-4 ) ;
3912: LD_EXP 10
3916: PPUSH
3917: LD_STRING DMar-06-Obj-4
3919: PPUSH
3920: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-6 ) ;
3924: LD_EXP 7
3928: PPUSH
3929: LD_STRING DKam-06-Obj-6
3931: PPUSH
3932: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-7 ) ;
3936: LD_EXP 7
3940: PPUSH
3941: LD_STRING DKam-06-Obj-7
3943: PPUSH
3944: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-8 ) ;
3948: LD_EXP 7
3952: PPUSH
3953: LD_STRING DKam-06-Obj-8
3955: PPUSH
3956: CALL_OW 88
// Say ( Heike , DH-06-Obj-9 ) ;
3960: LD_EXP 3
3964: PPUSH
3965: LD_STRING DH-06-Obj-9
3967: PPUSH
3968: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-10 ) ;
3972: LD_EXP 7
3976: PPUSH
3977: LD_STRING DKam-06-Obj-10
3979: PPUSH
3980: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-11 ) ;
3984: LD_EXP 7
3988: PPUSH
3989: LD_STRING DKam-06-Obj-11
3991: PPUSH
3992: CALL_OW 88
// Say ( Markov , DMar-06-Obj-12 ) ;
3996: LD_EXP 10
4000: PPUSH
4001: LD_STRING DMar-06-Obj-12
4003: PPUSH
4004: CALL_OW 88
// Say ( Markov , DMar-06-Obj-13 ) ;
4008: LD_EXP 10
4012: PPUSH
4013: LD_STRING DMar-06-Obj-13
4015: PPUSH
4016: CALL_OW 88
// Say ( Markov , DMar-06-Obj-14 ) ;
4020: LD_EXP 10
4024: PPUSH
4025: LD_STRING DMar-06-Obj-14
4027: PPUSH
4028: CALL_OW 88
// Say ( Olaf , DO-06-Obj-15 ) ;
4032: LD_EXP 12
4036: PPUSH
4037: LD_STRING DO-06-Obj-15
4039: PPUSH
4040: CALL_OW 88
// Say ( Olaf , DO-06-Obj-16 ) ;
4044: LD_EXP 12
4048: PPUSH
4049: LD_STRING DO-06-Obj-16
4051: PPUSH
4052: CALL_OW 88
// Say ( Heike , DH-06-Obj-17 ) ;
4056: LD_EXP 3
4060: PPUSH
4061: LD_STRING DH-06-Obj-17
4063: PPUSH
4064: CALL_OW 88
// Say ( Olaf , DO-06-Obj-18 ) ;
4068: LD_EXP 12
4072: PPUSH
4073: LD_STRING DO-06-Obj-18
4075: PPUSH
4076: CALL_OW 88
// end ; end_of_file
4080: LD_VAR 0 1
4084: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
4085: LD_INT 0
4087: PPUSH
// begin if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
4088: LD_VAR 0 1
4092: PPUSH
4093: CALL_OW 255
4097: PUSH
4098: LD_INT 2
4100: EQUAL
4101: PUSH
4102: LD_OWVAR 52
4106: AND
4107: PUSH
4108: LD_VAR 0 1
4112: PPUSH
4113: CALL_OW 263
4117: PUSH
4118: LD_INT 1
4120: EQUAL
4121: AND
4122: IFFALSE 4177
// begin driver := IsDrivenBy ( vehicle ) ;
4124: LD_ADDR_VAR 0 3
4128: PUSH
4129: LD_VAR 0 1
4133: PPUSH
4134: CALL_OW 311
4138: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
4139: LD_VAR 0 1
4143: PPUSH
4144: LD_INT 211
4146: PPUSH
4147: LD_INT 101
4149: PPUSH
4150: CALL_OW 111
// AddComExitVehicle ( driver ) ;
4154: LD_VAR 0 3
4158: PPUSH
4159: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
4163: LD_VAR 0 3
4167: PPUSH
4168: LD_VAR 0 2
4172: PPUSH
4173: CALL_OW 180
// end ; end ; end_of_file
4177: PPOPN 3
4179: END
// every 0 0$30 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 ] [ Difficulty ] do
4180: LD_INT 6
4182: PPUSH
4183: LD_INT 1
4185: PPUSH
4186: CALL_OW 287
4190: PUSH
4191: LD_INT 300
4193: PUSH
4194: LD_INT 250
4196: PUSH
4197: LD_INT 200
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: LIST
4204: PUSH
4205: LD_OWVAR 67
4209: ARRAY
4210: LESS
4211: IFFALSE 4238
4213: GO 4215
4215: DISABLE
// begin enable ;
4216: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
4217: LD_INT 1
4219: PPUSH
4220: LD_INT 5
4222: PPUSH
4223: CALL_OW 12
4227: PPUSH
4228: LD_INT 6
4230: PPUSH
4231: LD_INT 1
4233: PPUSH
4234: CALL_OW 55
// end ; end_of_file
4238: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4239: LD_INT 0
4241: PPUSH
4242: PPUSH
// if exist_mode then
4243: LD_VAR 0 2
4247: IFFALSE 4272
// unit := CreateCharacter ( prefix & ident ) else
4249: LD_ADDR_VAR 0 5
4253: PUSH
4254: LD_VAR 0 3
4258: PUSH
4259: LD_VAR 0 1
4263: STR
4264: PPUSH
4265: CALL_OW 34
4269: ST_TO_ADDR
4270: GO 4287
// unit := NewCharacter ( ident ) ;
4272: LD_ADDR_VAR 0 5
4276: PUSH
4277: LD_VAR 0 1
4281: PPUSH
4282: CALL_OW 25
4286: ST_TO_ADDR
// result := unit ;
4287: LD_ADDR_VAR 0 4
4291: PUSH
4292: LD_VAR 0 5
4296: ST_TO_ADDR
// end ;
4297: LD_VAR 0 4
4301: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4302: LD_INT 0
4304: PPUSH
4305: PPUSH
// if not side or not nation then
4306: LD_VAR 0 1
4310: NOT
4311: PUSH
4312: LD_VAR 0 2
4316: NOT
4317: OR
4318: IFFALSE 4322
// exit ;
4320: GO 5086
// case nation of nation_american :
4322: LD_VAR 0 2
4326: PUSH
4327: LD_INT 1
4329: DOUBLE
4330: EQUAL
4331: IFTRUE 4335
4333: GO 4549
4335: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4336: LD_ADDR_VAR 0 4
4340: PUSH
4341: LD_INT 35
4343: PUSH
4344: LD_INT 45
4346: PUSH
4347: LD_INT 46
4349: PUSH
4350: LD_INT 47
4352: PUSH
4353: LD_INT 82
4355: PUSH
4356: LD_INT 83
4358: PUSH
4359: LD_INT 84
4361: PUSH
4362: LD_INT 85
4364: PUSH
4365: LD_INT 86
4367: PUSH
4368: LD_INT 1
4370: PUSH
4371: LD_INT 2
4373: PUSH
4374: LD_INT 6
4376: PUSH
4377: LD_INT 15
4379: PUSH
4380: LD_INT 16
4382: PUSH
4383: LD_INT 7
4385: PUSH
4386: LD_INT 12
4388: PUSH
4389: LD_INT 13
4391: PUSH
4392: LD_INT 10
4394: PUSH
4395: LD_INT 14
4397: PUSH
4398: LD_INT 20
4400: PUSH
4401: LD_INT 21
4403: PUSH
4404: LD_INT 22
4406: PUSH
4407: LD_INT 25
4409: PUSH
4410: LD_INT 32
4412: PUSH
4413: LD_INT 27
4415: PUSH
4416: LD_INT 36
4418: PUSH
4419: LD_INT 69
4421: PUSH
4422: LD_INT 39
4424: PUSH
4425: LD_INT 34
4427: PUSH
4428: LD_INT 40
4430: PUSH
4431: LD_INT 48
4433: PUSH
4434: LD_INT 49
4436: PUSH
4437: LD_INT 50
4439: PUSH
4440: LD_INT 51
4442: PUSH
4443: LD_INT 52
4445: PUSH
4446: LD_INT 53
4448: PUSH
4449: LD_INT 54
4451: PUSH
4452: LD_INT 55
4454: PUSH
4455: LD_INT 56
4457: PUSH
4458: LD_INT 57
4460: PUSH
4461: LD_INT 58
4463: PUSH
4464: LD_INT 59
4466: PUSH
4467: LD_INT 60
4469: PUSH
4470: LD_INT 61
4472: PUSH
4473: LD_INT 62
4475: PUSH
4476: LD_INT 80
4478: PUSH
4479: LD_INT 82
4481: PUSH
4482: LD_INT 83
4484: PUSH
4485: LD_INT 84
4487: PUSH
4488: LD_INT 85
4490: PUSH
4491: LD_INT 86
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: ST_TO_ADDR
4547: GO 5010
4549: LD_INT 2
4551: DOUBLE
4552: EQUAL
4553: IFTRUE 4557
4555: GO 4779
4557: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
4558: LD_ADDR_VAR 0 4
4562: PUSH
4563: LD_INT 35
4565: PUSH
4566: LD_INT 45
4568: PUSH
4569: LD_INT 46
4571: PUSH
4572: LD_INT 47
4574: PUSH
4575: LD_INT 82
4577: PUSH
4578: LD_INT 83
4580: PUSH
4581: LD_INT 84
4583: PUSH
4584: LD_INT 85
4586: PUSH
4587: LD_INT 87
4589: PUSH
4590: LD_INT 70
4592: PUSH
4593: LD_INT 1
4595: PUSH
4596: LD_INT 11
4598: PUSH
4599: LD_INT 3
4601: PUSH
4602: LD_INT 4
4604: PUSH
4605: LD_INT 5
4607: PUSH
4608: LD_INT 6
4610: PUSH
4611: LD_INT 15
4613: PUSH
4614: LD_INT 18
4616: PUSH
4617: LD_INT 7
4619: PUSH
4620: LD_INT 17
4622: PUSH
4623: LD_INT 8
4625: PUSH
4626: LD_INT 20
4628: PUSH
4629: LD_INT 21
4631: PUSH
4632: LD_INT 22
4634: PUSH
4635: LD_INT 72
4637: PUSH
4638: LD_INT 26
4640: PUSH
4641: LD_INT 69
4643: PUSH
4644: LD_INT 39
4646: PUSH
4647: LD_INT 40
4649: PUSH
4650: LD_INT 41
4652: PUSH
4653: LD_INT 42
4655: PUSH
4656: LD_INT 43
4658: PUSH
4659: LD_INT 48
4661: PUSH
4662: LD_INT 49
4664: PUSH
4665: LD_INT 50
4667: PUSH
4668: LD_INT 51
4670: PUSH
4671: LD_INT 52
4673: PUSH
4674: LD_INT 53
4676: PUSH
4677: LD_INT 54
4679: PUSH
4680: LD_INT 55
4682: PUSH
4683: LD_INT 56
4685: PUSH
4686: LD_INT 60
4688: PUSH
4689: LD_INT 61
4691: PUSH
4692: LD_INT 62
4694: PUSH
4695: LD_INT 66
4697: PUSH
4698: LD_INT 67
4700: PUSH
4701: LD_INT 68
4703: PUSH
4704: LD_INT 81
4706: PUSH
4707: LD_INT 82
4709: PUSH
4710: LD_INT 83
4712: PUSH
4713: LD_INT 84
4715: PUSH
4716: LD_INT 85
4718: PUSH
4719: LD_INT 87
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: ST_TO_ADDR
4777: GO 5010
4779: LD_INT 3
4781: DOUBLE
4782: EQUAL
4783: IFTRUE 4787
4785: GO 5009
4787: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4788: LD_ADDR_VAR 0 4
4792: PUSH
4793: LD_INT 46
4795: PUSH
4796: LD_INT 47
4798: PUSH
4799: LD_INT 1
4801: PUSH
4802: LD_INT 2
4804: PUSH
4805: LD_INT 82
4807: PUSH
4808: LD_INT 83
4810: PUSH
4811: LD_INT 84
4813: PUSH
4814: LD_INT 85
4816: PUSH
4817: LD_INT 86
4819: PUSH
4820: LD_INT 11
4822: PUSH
4823: LD_INT 9
4825: PUSH
4826: LD_INT 20
4828: PUSH
4829: LD_INT 19
4831: PUSH
4832: LD_INT 21
4834: PUSH
4835: LD_INT 24
4837: PUSH
4838: LD_INT 22
4840: PUSH
4841: LD_INT 25
4843: PUSH
4844: LD_INT 28
4846: PUSH
4847: LD_INT 29
4849: PUSH
4850: LD_INT 30
4852: PUSH
4853: LD_INT 31
4855: PUSH
4856: LD_INT 37
4858: PUSH
4859: LD_INT 38
4861: PUSH
4862: LD_INT 32
4864: PUSH
4865: LD_INT 27
4867: PUSH
4868: LD_INT 33
4870: PUSH
4871: LD_INT 69
4873: PUSH
4874: LD_INT 39
4876: PUSH
4877: LD_INT 34
4879: PUSH
4880: LD_INT 40
4882: PUSH
4883: LD_INT 71
4885: PUSH
4886: LD_INT 23
4888: PUSH
4889: LD_INT 44
4891: PUSH
4892: LD_INT 48
4894: PUSH
4895: LD_INT 49
4897: PUSH
4898: LD_INT 50
4900: PUSH
4901: LD_INT 51
4903: PUSH
4904: LD_INT 52
4906: PUSH
4907: LD_INT 53
4909: PUSH
4910: LD_INT 54
4912: PUSH
4913: LD_INT 55
4915: PUSH
4916: LD_INT 56
4918: PUSH
4919: LD_INT 57
4921: PUSH
4922: LD_INT 58
4924: PUSH
4925: LD_INT 59
4927: PUSH
4928: LD_INT 63
4930: PUSH
4931: LD_INT 64
4933: PUSH
4934: LD_INT 65
4936: PUSH
4937: LD_INT 82
4939: PUSH
4940: LD_INT 83
4942: PUSH
4943: LD_INT 84
4945: PUSH
4946: LD_INT 85
4948: PUSH
4949: LD_INT 86
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: ST_TO_ADDR
5007: GO 5010
5009: POP
// if state > - 1 and state < 3 then
5010: LD_VAR 0 3
5014: PUSH
5015: LD_INT 1
5017: NEG
5018: GREATER
5019: PUSH
5020: LD_VAR 0 3
5024: PUSH
5025: LD_INT 3
5027: LESS
5028: AND
5029: IFFALSE 5086
// for i in result do
5031: LD_ADDR_VAR 0 5
5035: PUSH
5036: LD_VAR 0 4
5040: PUSH
5041: FOR_IN
5042: IFFALSE 5084
// if GetTech ( i , side ) <> state then
5044: LD_VAR 0 5
5048: PPUSH
5049: LD_VAR 0 1
5053: PPUSH
5054: CALL_OW 321
5058: PUSH
5059: LD_VAR 0 3
5063: NONEQUAL
5064: IFFALSE 5082
// result := result diff i ;
5066: LD_ADDR_VAR 0 4
5070: PUSH
5071: LD_VAR 0 4
5075: PUSH
5076: LD_VAR 0 5
5080: DIFF
5081: ST_TO_ADDR
5082: GO 5041
5084: POP
5085: POP
// end ;
5086: LD_VAR 0 4
5090: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5091: LD_INT 0
5093: PPUSH
5094: PPUSH
5095: PPUSH
// result := true ;
5096: LD_ADDR_VAR 0 3
5100: PUSH
5101: LD_INT 1
5103: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5104: LD_ADDR_VAR 0 5
5108: PUSH
5109: LD_VAR 0 2
5113: PPUSH
5114: CALL_OW 480
5118: ST_TO_ADDR
// if not tmp then
5119: LD_VAR 0 5
5123: NOT
5124: IFFALSE 5128
// exit ;
5126: GO 5177
// for i in tmp do
5128: LD_ADDR_VAR 0 4
5132: PUSH
5133: LD_VAR 0 5
5137: PUSH
5138: FOR_IN
5139: IFFALSE 5175
// if GetTech ( i , side ) <> state_researched then
5141: LD_VAR 0 4
5145: PPUSH
5146: LD_VAR 0 1
5150: PPUSH
5151: CALL_OW 321
5155: PUSH
5156: LD_INT 2
5158: NONEQUAL
5159: IFFALSE 5173
// begin result := false ;
5161: LD_ADDR_VAR 0 3
5165: PUSH
5166: LD_INT 0
5168: ST_TO_ADDR
// exit ;
5169: POP
5170: POP
5171: GO 5177
// end ;
5173: GO 5138
5175: POP
5176: POP
// end ;
5177: LD_VAR 0 3
5181: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5182: LD_INT 0
5184: PPUSH
5185: PPUSH
5186: PPUSH
5187: PPUSH
5188: PPUSH
5189: PPUSH
5190: PPUSH
5191: PPUSH
5192: PPUSH
5193: PPUSH
5194: PPUSH
5195: PPUSH
5196: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5197: LD_VAR 0 1
5201: NOT
5202: PUSH
5203: LD_VAR 0 1
5207: PPUSH
5208: CALL_OW 257
5212: PUSH
5213: LD_INT 9
5215: NONEQUAL
5216: OR
5217: IFFALSE 5221
// exit ;
5219: GO 5794
// side := GetSide ( unit ) ;
5221: LD_ADDR_VAR 0 9
5225: PUSH
5226: LD_VAR 0 1
5230: PPUSH
5231: CALL_OW 255
5235: ST_TO_ADDR
// tech_space := tech_spacanom ;
5236: LD_ADDR_VAR 0 12
5240: PUSH
5241: LD_INT 29
5243: ST_TO_ADDR
// tech_time := tech_taurad ;
5244: LD_ADDR_VAR 0 13
5248: PUSH
5249: LD_INT 28
5251: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5252: LD_ADDR_VAR 0 11
5256: PUSH
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 310
5266: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5267: LD_VAR 0 11
5271: PPUSH
5272: CALL_OW 247
5276: PUSH
5277: LD_INT 2
5279: EQUAL
5280: IFFALSE 5284
// exit ;
5282: GO 5794
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5284: LD_ADDR_VAR 0 8
5288: PUSH
5289: LD_INT 81
5291: PUSH
5292: LD_VAR 0 9
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: LD_INT 3
5303: PUSH
5304: LD_INT 21
5306: PUSH
5307: LD_INT 3
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: PPUSH
5322: CALL_OW 69
5326: ST_TO_ADDR
// if not tmp then
5327: LD_VAR 0 8
5331: NOT
5332: IFFALSE 5336
// exit ;
5334: GO 5794
// if in_unit then
5336: LD_VAR 0 11
5340: IFFALSE 5364
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5342: LD_ADDR_VAR 0 10
5346: PUSH
5347: LD_VAR 0 8
5351: PPUSH
5352: LD_VAR 0 11
5356: PPUSH
5357: CALL_OW 74
5361: ST_TO_ADDR
5362: GO 5384
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5364: LD_ADDR_VAR 0 10
5368: PUSH
5369: LD_VAR 0 8
5373: PPUSH
5374: LD_VAR 0 1
5378: PPUSH
5379: CALL_OW 74
5383: ST_TO_ADDR
// if not enemy then
5384: LD_VAR 0 10
5388: NOT
5389: IFFALSE 5393
// exit ;
5391: GO 5794
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5393: LD_VAR 0 11
5397: PUSH
5398: LD_VAR 0 11
5402: PPUSH
5403: LD_VAR 0 10
5407: PPUSH
5408: CALL_OW 296
5412: PUSH
5413: LD_INT 13
5415: GREATER
5416: AND
5417: PUSH
5418: LD_VAR 0 1
5422: PPUSH
5423: LD_VAR 0 10
5427: PPUSH
5428: CALL_OW 296
5432: PUSH
5433: LD_INT 12
5435: GREATER
5436: OR
5437: IFFALSE 5441
// exit ;
5439: GO 5794
// missile := [ 1 ] ;
5441: LD_ADDR_VAR 0 14
5445: PUSH
5446: LD_INT 1
5448: PUSH
5449: EMPTY
5450: LIST
5451: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5452: LD_VAR 0 9
5456: PPUSH
5457: LD_VAR 0 12
5461: PPUSH
5462: CALL_OW 325
5466: IFFALSE 5495
// missile := Insert ( missile , missile + 1 , 2 ) ;
5468: LD_ADDR_VAR 0 14
5472: PUSH
5473: LD_VAR 0 14
5477: PPUSH
5478: LD_VAR 0 14
5482: PUSH
5483: LD_INT 1
5485: PLUS
5486: PPUSH
5487: LD_INT 2
5489: PPUSH
5490: CALL_OW 2
5494: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5495: LD_VAR 0 9
5499: PPUSH
5500: LD_VAR 0 13
5504: PPUSH
5505: CALL_OW 325
5509: PUSH
5510: LD_VAR 0 10
5514: PPUSH
5515: CALL_OW 255
5519: PPUSH
5520: LD_VAR 0 13
5524: PPUSH
5525: CALL_OW 325
5529: NOT
5530: AND
5531: IFFALSE 5560
// missile := Insert ( missile , missile + 1 , 3 ) ;
5533: LD_ADDR_VAR 0 14
5537: PUSH
5538: LD_VAR 0 14
5542: PPUSH
5543: LD_VAR 0 14
5547: PUSH
5548: LD_INT 1
5550: PLUS
5551: PPUSH
5552: LD_INT 3
5554: PPUSH
5555: CALL_OW 2
5559: ST_TO_ADDR
// if missile < 2 then
5560: LD_VAR 0 14
5564: PUSH
5565: LD_INT 2
5567: LESS
5568: IFFALSE 5572
// exit ;
5570: GO 5794
// x := GetX ( enemy ) ;
5572: LD_ADDR_VAR 0 4
5576: PUSH
5577: LD_VAR 0 10
5581: PPUSH
5582: CALL_OW 250
5586: ST_TO_ADDR
// y := GetY ( enemy ) ;
5587: LD_ADDR_VAR 0 5
5591: PUSH
5592: LD_VAR 0 10
5596: PPUSH
5597: CALL_OW 251
5601: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5602: LD_ADDR_VAR 0 6
5606: PUSH
5607: LD_VAR 0 4
5611: PUSH
5612: LD_INT 1
5614: NEG
5615: PPUSH
5616: LD_INT 1
5618: PPUSH
5619: CALL_OW 12
5623: PLUS
5624: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5625: LD_ADDR_VAR 0 7
5629: PUSH
5630: LD_VAR 0 5
5634: PUSH
5635: LD_INT 1
5637: NEG
5638: PPUSH
5639: LD_INT 1
5641: PPUSH
5642: CALL_OW 12
5646: PLUS
5647: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5648: LD_VAR 0 6
5652: PPUSH
5653: LD_VAR 0 7
5657: PPUSH
5658: CALL_OW 488
5662: NOT
5663: IFFALSE 5685
// begin _x := x ;
5665: LD_ADDR_VAR 0 6
5669: PUSH
5670: LD_VAR 0 4
5674: ST_TO_ADDR
// _y := y ;
5675: LD_ADDR_VAR 0 7
5679: PUSH
5680: LD_VAR 0 5
5684: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5685: LD_ADDR_VAR 0 3
5689: PUSH
5690: LD_INT 1
5692: PPUSH
5693: LD_VAR 0 14
5697: PPUSH
5698: CALL_OW 12
5702: ST_TO_ADDR
// case i of 1 :
5703: LD_VAR 0 3
5707: PUSH
5708: LD_INT 1
5710: DOUBLE
5711: EQUAL
5712: IFTRUE 5716
5714: GO 5733
5716: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5717: LD_VAR 0 1
5721: PPUSH
5722: LD_VAR 0 10
5726: PPUSH
5727: CALL_OW 115
5731: GO 5794
5733: LD_INT 2
5735: DOUBLE
5736: EQUAL
5737: IFTRUE 5741
5739: GO 5763
5741: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5742: LD_VAR 0 1
5746: PPUSH
5747: LD_VAR 0 6
5751: PPUSH
5752: LD_VAR 0 7
5756: PPUSH
5757: CALL_OW 153
5761: GO 5794
5763: LD_INT 3
5765: DOUBLE
5766: EQUAL
5767: IFTRUE 5771
5769: GO 5793
5771: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5772: LD_VAR 0 1
5776: PPUSH
5777: LD_VAR 0 6
5781: PPUSH
5782: LD_VAR 0 7
5786: PPUSH
5787: CALL_OW 154
5791: GO 5794
5793: POP
// end ;
5794: LD_VAR 0 2
5798: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5799: LD_INT 0
5801: PPUSH
5802: PPUSH
5803: PPUSH
5804: PPUSH
5805: PPUSH
5806: PPUSH
// if not unit or not building then
5807: LD_VAR 0 1
5811: NOT
5812: PUSH
5813: LD_VAR 0 2
5817: NOT
5818: OR
5819: IFFALSE 5823
// exit ;
5821: GO 5981
// x := GetX ( building ) ;
5823: LD_ADDR_VAR 0 5
5827: PUSH
5828: LD_VAR 0 2
5832: PPUSH
5833: CALL_OW 250
5837: ST_TO_ADDR
// y := GetY ( building ) ;
5838: LD_ADDR_VAR 0 6
5842: PUSH
5843: LD_VAR 0 2
5847: PPUSH
5848: CALL_OW 251
5852: ST_TO_ADDR
// for i = 0 to 5 do
5853: LD_ADDR_VAR 0 4
5857: PUSH
5858: DOUBLE
5859: LD_INT 0
5861: DEC
5862: ST_TO_ADDR
5863: LD_INT 5
5865: PUSH
5866: FOR_TO
5867: IFFALSE 5979
// begin _x := ShiftX ( x , i , 3 ) ;
5869: LD_ADDR_VAR 0 7
5873: PUSH
5874: LD_VAR 0 5
5878: PPUSH
5879: LD_VAR 0 4
5883: PPUSH
5884: LD_INT 3
5886: PPUSH
5887: CALL_OW 272
5891: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5892: LD_ADDR_VAR 0 8
5896: PUSH
5897: LD_VAR 0 6
5901: PPUSH
5902: LD_VAR 0 4
5906: PPUSH
5907: LD_INT 3
5909: PPUSH
5910: CALL_OW 273
5914: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5915: LD_VAR 0 7
5919: PPUSH
5920: LD_VAR 0 8
5924: PPUSH
5925: CALL_OW 488
5929: NOT
5930: IFFALSE 5934
// continue ;
5932: GO 5866
// if HexInfo ( _x , _y ) = 0 then
5934: LD_VAR 0 7
5938: PPUSH
5939: LD_VAR 0 8
5943: PPUSH
5944: CALL_OW 428
5948: PUSH
5949: LD_INT 0
5951: EQUAL
5952: IFFALSE 5977
// begin ComMoveXY ( unit , _x , _y ) ;
5954: LD_VAR 0 1
5958: PPUSH
5959: LD_VAR 0 7
5963: PPUSH
5964: LD_VAR 0 8
5968: PPUSH
5969: CALL_OW 111
// exit ;
5973: POP
5974: POP
5975: GO 5981
// end ; end ;
5977: GO 5866
5979: POP
5980: POP
// end ;
5981: LD_VAR 0 3
5985: RET
// export function ScanBase ( side , base_area ) ; begin
5986: LD_INT 0
5988: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5989: LD_ADDR_VAR 0 3
5993: PUSH
5994: LD_VAR 0 2
5998: PPUSH
5999: LD_INT 81
6001: PUSH
6002: LD_VAR 0 1
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PPUSH
6011: CALL_OW 70
6015: ST_TO_ADDR
// end ;
6016: LD_VAR 0 3
6020: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6021: LD_INT 0
6023: PPUSH
6024: PPUSH
6025: PPUSH
6026: PPUSH
// result := false ;
6027: LD_ADDR_VAR 0 2
6031: PUSH
6032: LD_INT 0
6034: ST_TO_ADDR
// side := GetSide ( unit ) ;
6035: LD_ADDR_VAR 0 3
6039: PUSH
6040: LD_VAR 0 1
6044: PPUSH
6045: CALL_OW 255
6049: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6050: LD_ADDR_VAR 0 4
6054: PUSH
6055: LD_VAR 0 1
6059: PPUSH
6060: CALL_OW 248
6064: ST_TO_ADDR
// case nat of 1 :
6065: LD_VAR 0 4
6069: PUSH
6070: LD_INT 1
6072: DOUBLE
6073: EQUAL
6074: IFTRUE 6078
6076: GO 6089
6078: POP
// tech := tech_lassight ; 2 :
6079: LD_ADDR_VAR 0 5
6083: PUSH
6084: LD_INT 12
6086: ST_TO_ADDR
6087: GO 6128
6089: LD_INT 2
6091: DOUBLE
6092: EQUAL
6093: IFTRUE 6097
6095: GO 6108
6097: POP
// tech := tech_mortar ; 3 :
6098: LD_ADDR_VAR 0 5
6102: PUSH
6103: LD_INT 41
6105: ST_TO_ADDR
6106: GO 6128
6108: LD_INT 3
6110: DOUBLE
6111: EQUAL
6112: IFTRUE 6116
6114: GO 6127
6116: POP
// tech := tech_bazooka ; end ;
6117: LD_ADDR_VAR 0 5
6121: PUSH
6122: LD_INT 44
6124: ST_TO_ADDR
6125: GO 6128
6127: POP
// if Researched ( side , tech ) then
6128: LD_VAR 0 3
6132: PPUSH
6133: LD_VAR 0 5
6137: PPUSH
6138: CALL_OW 325
6142: IFFALSE 6169
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6144: LD_ADDR_VAR 0 2
6148: PUSH
6149: LD_INT 5
6151: PUSH
6152: LD_INT 8
6154: PUSH
6155: LD_INT 9
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: LIST
6162: PUSH
6163: LD_VAR 0 4
6167: ARRAY
6168: ST_TO_ADDR
// end ;
6169: LD_VAR 0 2
6173: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6174: LD_INT 0
6176: PPUSH
6177: PPUSH
6178: PPUSH
// if not mines then
6179: LD_VAR 0 2
6183: NOT
6184: IFFALSE 6188
// exit ;
6186: GO 6332
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6188: LD_ADDR_VAR 0 5
6192: PUSH
6193: LD_INT 81
6195: PUSH
6196: LD_VAR 0 1
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: PUSH
6205: LD_INT 3
6207: PUSH
6208: LD_INT 21
6210: PUSH
6211: LD_INT 3
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PPUSH
6226: CALL_OW 69
6230: ST_TO_ADDR
// for i in mines do
6231: LD_ADDR_VAR 0 4
6235: PUSH
6236: LD_VAR 0 2
6240: PUSH
6241: FOR_IN
6242: IFFALSE 6330
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6244: LD_VAR 0 4
6248: PUSH
6249: LD_INT 1
6251: ARRAY
6252: PPUSH
6253: LD_VAR 0 4
6257: PUSH
6258: LD_INT 2
6260: ARRAY
6261: PPUSH
6262: CALL_OW 458
6266: NOT
6267: IFFALSE 6271
// continue ;
6269: GO 6241
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6271: LD_VAR 0 4
6275: PUSH
6276: LD_INT 1
6278: ARRAY
6279: PPUSH
6280: LD_VAR 0 4
6284: PUSH
6285: LD_INT 2
6287: ARRAY
6288: PPUSH
6289: CALL_OW 428
6293: PUSH
6294: LD_VAR 0 5
6298: IN
6299: IFFALSE 6328
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6301: LD_VAR 0 4
6305: PUSH
6306: LD_INT 1
6308: ARRAY
6309: PPUSH
6310: LD_VAR 0 4
6314: PUSH
6315: LD_INT 2
6317: ARRAY
6318: PPUSH
6319: LD_VAR 0 1
6323: PPUSH
6324: CALL_OW 456
// end ;
6328: GO 6241
6330: POP
6331: POP
// end ;
6332: LD_VAR 0 3
6336: RET
// export function Count ( array ) ; var i ; begin
6337: LD_INT 0
6339: PPUSH
6340: PPUSH
// result := 0 ;
6341: LD_ADDR_VAR 0 2
6345: PUSH
6346: LD_INT 0
6348: ST_TO_ADDR
// for i in array do
6349: LD_ADDR_VAR 0 3
6353: PUSH
6354: LD_VAR 0 1
6358: PUSH
6359: FOR_IN
6360: IFFALSE 6384
// if i then
6362: LD_VAR 0 3
6366: IFFALSE 6382
// result := result + 1 ;
6368: LD_ADDR_VAR 0 2
6372: PUSH
6373: LD_VAR 0 2
6377: PUSH
6378: LD_INT 1
6380: PLUS
6381: ST_TO_ADDR
6382: GO 6359
6384: POP
6385: POP
// end ;
6386: LD_VAR 0 2
6390: RET
// export function IsEmpty ( building ) ; begin
6391: LD_INT 0
6393: PPUSH
// if not building then
6394: LD_VAR 0 1
6398: NOT
6399: IFFALSE 6403
// exit ;
6401: GO 6446
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6403: LD_ADDR_VAR 0 2
6407: PUSH
6408: LD_VAR 0 1
6412: PUSH
6413: LD_INT 22
6415: PUSH
6416: LD_VAR 0 1
6420: PPUSH
6421: CALL_OW 255
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: PUSH
6430: LD_INT 58
6432: PUSH
6433: EMPTY
6434: LIST
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: PPUSH
6440: CALL_OW 69
6444: IN
6445: ST_TO_ADDR
// end ;
6446: LD_VAR 0 2
6450: RET
// export function IsNotFull ( building ) ; begin
6451: LD_INT 0
6453: PPUSH
// if not building then
6454: LD_VAR 0 1
6458: NOT
6459: IFFALSE 6463
// exit ;
6461: GO 6482
// result := UnitsInside ( building ) < 6 ;
6463: LD_ADDR_VAR 0 2
6467: PUSH
6468: LD_VAR 0 1
6472: PPUSH
6473: CALL_OW 313
6477: PUSH
6478: LD_INT 6
6480: LESS
6481: ST_TO_ADDR
// end ;
6482: LD_VAR 0 2
6486: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6487: LD_INT 0
6489: PPUSH
6490: PPUSH
6491: PPUSH
6492: PPUSH
// tmp := [ ] ;
6493: LD_ADDR_VAR 0 3
6497: PUSH
6498: EMPTY
6499: ST_TO_ADDR
// list := [ ] ;
6500: LD_ADDR_VAR 0 5
6504: PUSH
6505: EMPTY
6506: ST_TO_ADDR
// for i = 16 to 25 do
6507: LD_ADDR_VAR 0 4
6511: PUSH
6512: DOUBLE
6513: LD_INT 16
6515: DEC
6516: ST_TO_ADDR
6517: LD_INT 25
6519: PUSH
6520: FOR_TO
6521: IFFALSE 6594
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6523: LD_ADDR_VAR 0 3
6527: PUSH
6528: LD_VAR 0 3
6532: PUSH
6533: LD_INT 22
6535: PUSH
6536: LD_VAR 0 1
6540: PPUSH
6541: CALL_OW 255
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: LD_INT 91
6552: PUSH
6553: LD_VAR 0 1
6557: PUSH
6558: LD_INT 6
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 30
6568: PUSH
6569: LD_VAR 0 4
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: LIST
6582: PUSH
6583: EMPTY
6584: LIST
6585: PPUSH
6586: CALL_OW 69
6590: ADD
6591: ST_TO_ADDR
6592: GO 6520
6594: POP
6595: POP
// for i = 1 to tmp do
6596: LD_ADDR_VAR 0 4
6600: PUSH
6601: DOUBLE
6602: LD_INT 1
6604: DEC
6605: ST_TO_ADDR
6606: LD_VAR 0 3
6610: PUSH
6611: FOR_TO
6612: IFFALSE 6700
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6614: LD_ADDR_VAR 0 5
6618: PUSH
6619: LD_VAR 0 5
6623: PUSH
6624: LD_VAR 0 3
6628: PUSH
6629: LD_VAR 0 4
6633: ARRAY
6634: PPUSH
6635: CALL_OW 266
6639: PUSH
6640: LD_VAR 0 3
6644: PUSH
6645: LD_VAR 0 4
6649: ARRAY
6650: PPUSH
6651: CALL_OW 250
6655: PUSH
6656: LD_VAR 0 3
6660: PUSH
6661: LD_VAR 0 4
6665: ARRAY
6666: PPUSH
6667: CALL_OW 251
6671: PUSH
6672: LD_VAR 0 3
6676: PUSH
6677: LD_VAR 0 4
6681: ARRAY
6682: PPUSH
6683: CALL_OW 254
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: PUSH
6694: EMPTY
6695: LIST
6696: ADD
6697: ST_TO_ADDR
6698: GO 6611
6700: POP
6701: POP
// result := list ;
6702: LD_ADDR_VAR 0 2
6706: PUSH
6707: LD_VAR 0 5
6711: ST_TO_ADDR
// end ;
6712: LD_VAR 0 2
6716: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6717: LD_INT 0
6719: PPUSH
6720: PPUSH
6721: PPUSH
6722: PPUSH
6723: PPUSH
6724: PPUSH
6725: PPUSH
// if not factory then
6726: LD_VAR 0 1
6730: NOT
6731: IFFALSE 6735
// exit ;
6733: GO 7328
// if control = control_apeman then
6735: LD_VAR 0 4
6739: PUSH
6740: LD_INT 5
6742: EQUAL
6743: IFFALSE 6852
// begin tmp := UnitsInside ( factory ) ;
6745: LD_ADDR_VAR 0 8
6749: PUSH
6750: LD_VAR 0 1
6754: PPUSH
6755: CALL_OW 313
6759: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6760: LD_VAR 0 8
6764: PPUSH
6765: LD_INT 25
6767: PUSH
6768: LD_INT 12
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PPUSH
6775: CALL_OW 72
6779: NOT
6780: IFFALSE 6790
// control := control_manual ;
6782: LD_ADDR_VAR 0 4
6786: PUSH
6787: LD_INT 1
6789: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6790: LD_ADDR_VAR 0 8
6794: PUSH
6795: LD_VAR 0 1
6799: PPUSH
6800: CALL 6487 0 1
6804: ST_TO_ADDR
// if tmp then
6805: LD_VAR 0 8
6809: IFFALSE 6852
// begin for i in tmp do
6811: LD_ADDR_VAR 0 7
6815: PUSH
6816: LD_VAR 0 8
6820: PUSH
6821: FOR_IN
6822: IFFALSE 6850
// if i [ 1 ] = b_ext_radio then
6824: LD_VAR 0 7
6828: PUSH
6829: LD_INT 1
6831: ARRAY
6832: PUSH
6833: LD_INT 22
6835: EQUAL
6836: IFFALSE 6848
// begin control := control_remote ;
6838: LD_ADDR_VAR 0 4
6842: PUSH
6843: LD_INT 2
6845: ST_TO_ADDR
// break ;
6846: GO 6850
// end ;
6848: GO 6821
6850: POP
6851: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6852: LD_VAR 0 1
6856: PPUSH
6857: LD_VAR 0 2
6861: PPUSH
6862: LD_VAR 0 3
6866: PPUSH
6867: LD_VAR 0 4
6871: PPUSH
6872: LD_VAR 0 5
6876: PPUSH
6877: CALL_OW 448
6881: IFFALSE 6916
// begin result := [ chassis , engine , control , weapon ] ;
6883: LD_ADDR_VAR 0 6
6887: PUSH
6888: LD_VAR 0 2
6892: PUSH
6893: LD_VAR 0 3
6897: PUSH
6898: LD_VAR 0 4
6902: PUSH
6903: LD_VAR 0 5
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: ST_TO_ADDR
// exit ;
6914: GO 7328
// end ; _chassis := AvailableChassisList ( factory ) ;
6916: LD_ADDR_VAR 0 9
6920: PUSH
6921: LD_VAR 0 1
6925: PPUSH
6926: CALL_OW 475
6930: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6931: LD_ADDR_VAR 0 11
6935: PUSH
6936: LD_VAR 0 1
6940: PPUSH
6941: CALL_OW 476
6945: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6946: LD_ADDR_VAR 0 12
6950: PUSH
6951: LD_VAR 0 1
6955: PPUSH
6956: CALL_OW 477
6960: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6961: LD_ADDR_VAR 0 10
6965: PUSH
6966: LD_VAR 0 1
6970: PPUSH
6971: CALL_OW 478
6975: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6976: LD_VAR 0 9
6980: NOT
6981: PUSH
6982: LD_VAR 0 11
6986: NOT
6987: OR
6988: PUSH
6989: LD_VAR 0 12
6993: NOT
6994: OR
6995: PUSH
6996: LD_VAR 0 10
7000: NOT
7001: OR
7002: IFFALSE 7037
// begin result := [ chassis , engine , control , weapon ] ;
7004: LD_ADDR_VAR 0 6
7008: PUSH
7009: LD_VAR 0 2
7013: PUSH
7014: LD_VAR 0 3
7018: PUSH
7019: LD_VAR 0 4
7023: PUSH
7024: LD_VAR 0 5
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: ST_TO_ADDR
// exit ;
7035: GO 7328
// end ; if not chassis in _chassis then
7037: LD_VAR 0 2
7041: PUSH
7042: LD_VAR 0 9
7046: IN
7047: NOT
7048: IFFALSE 7074
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7050: LD_ADDR_VAR 0 2
7054: PUSH
7055: LD_VAR 0 9
7059: PUSH
7060: LD_INT 1
7062: PPUSH
7063: LD_VAR 0 9
7067: PPUSH
7068: CALL_OW 12
7072: ARRAY
7073: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7074: LD_VAR 0 2
7078: PPUSH
7079: LD_VAR 0 3
7083: PPUSH
7084: CALL 7333 0 2
7088: NOT
7089: IFFALSE 7148
// repeat engine := _engine [ 1 ] ;
7091: LD_ADDR_VAR 0 3
7095: PUSH
7096: LD_VAR 0 11
7100: PUSH
7101: LD_INT 1
7103: ARRAY
7104: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7105: LD_ADDR_VAR 0 11
7109: PUSH
7110: LD_VAR 0 11
7114: PPUSH
7115: LD_INT 1
7117: PPUSH
7118: CALL_OW 3
7122: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7123: LD_VAR 0 2
7127: PPUSH
7128: LD_VAR 0 3
7132: PPUSH
7133: CALL 7333 0 2
7137: PUSH
7138: LD_VAR 0 11
7142: PUSH
7143: EMPTY
7144: EQUAL
7145: OR
7146: IFFALSE 7091
// if not control in _control then
7148: LD_VAR 0 4
7152: PUSH
7153: LD_VAR 0 12
7157: IN
7158: NOT
7159: IFFALSE 7185
// control := _control [ rand ( 1 , _control ) ] ;
7161: LD_ADDR_VAR 0 4
7165: PUSH
7166: LD_VAR 0 12
7170: PUSH
7171: LD_INT 1
7173: PPUSH
7174: LD_VAR 0 12
7178: PPUSH
7179: CALL_OW 12
7183: ARRAY
7184: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7185: LD_VAR 0 2
7189: PPUSH
7190: LD_VAR 0 5
7194: PPUSH
7195: CALL 7553 0 2
7199: NOT
7200: IFFALSE 7259
// repeat weapon := _weapon [ 1 ] ;
7202: LD_ADDR_VAR 0 5
7206: PUSH
7207: LD_VAR 0 10
7211: PUSH
7212: LD_INT 1
7214: ARRAY
7215: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7216: LD_ADDR_VAR 0 10
7220: PUSH
7221: LD_VAR 0 10
7225: PPUSH
7226: LD_INT 1
7228: PPUSH
7229: CALL_OW 3
7233: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7234: LD_VAR 0 2
7238: PPUSH
7239: LD_VAR 0 5
7243: PPUSH
7244: CALL 7553 0 2
7248: PUSH
7249: LD_VAR 0 10
7253: PUSH
7254: EMPTY
7255: EQUAL
7256: OR
7257: IFFALSE 7202
// result := [ ] ;
7259: LD_ADDR_VAR 0 6
7263: PUSH
7264: EMPTY
7265: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7266: LD_VAR 0 1
7270: PPUSH
7271: LD_VAR 0 2
7275: PPUSH
7276: LD_VAR 0 3
7280: PPUSH
7281: LD_VAR 0 4
7285: PPUSH
7286: LD_VAR 0 5
7290: PPUSH
7291: CALL_OW 448
7295: IFFALSE 7328
// result := [ chassis , engine , control , weapon ] ;
7297: LD_ADDR_VAR 0 6
7301: PUSH
7302: LD_VAR 0 2
7306: PUSH
7307: LD_VAR 0 3
7311: PUSH
7312: LD_VAR 0 4
7316: PUSH
7317: LD_VAR 0 5
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: ST_TO_ADDR
// end ;
7328: LD_VAR 0 6
7332: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7333: LD_INT 0
7335: PPUSH
// if not chassis or not engine then
7336: LD_VAR 0 1
7340: NOT
7341: PUSH
7342: LD_VAR 0 2
7346: NOT
7347: OR
7348: IFFALSE 7352
// exit ;
7350: GO 7548
// case engine of engine_solar :
7352: LD_VAR 0 2
7356: PUSH
7357: LD_INT 2
7359: DOUBLE
7360: EQUAL
7361: IFTRUE 7365
7363: GO 7403
7365: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7366: LD_ADDR_VAR 0 3
7370: PUSH
7371: LD_INT 11
7373: PUSH
7374: LD_INT 12
7376: PUSH
7377: LD_INT 13
7379: PUSH
7380: LD_INT 14
7382: PUSH
7383: LD_INT 1
7385: PUSH
7386: LD_INT 2
7388: PUSH
7389: LD_INT 3
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: ST_TO_ADDR
7401: GO 7532
7403: LD_INT 1
7405: DOUBLE
7406: EQUAL
7407: IFTRUE 7411
7409: GO 7473
7411: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7412: LD_ADDR_VAR 0 3
7416: PUSH
7417: LD_INT 11
7419: PUSH
7420: LD_INT 12
7422: PUSH
7423: LD_INT 13
7425: PUSH
7426: LD_INT 14
7428: PUSH
7429: LD_INT 1
7431: PUSH
7432: LD_INT 2
7434: PUSH
7435: LD_INT 3
7437: PUSH
7438: LD_INT 4
7440: PUSH
7441: LD_INT 5
7443: PUSH
7444: LD_INT 21
7446: PUSH
7447: LD_INT 23
7449: PUSH
7450: LD_INT 22
7452: PUSH
7453: LD_INT 24
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: ST_TO_ADDR
7471: GO 7532
7473: LD_INT 3
7475: DOUBLE
7476: EQUAL
7477: IFTRUE 7481
7479: GO 7531
7481: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7482: LD_ADDR_VAR 0 3
7486: PUSH
7487: LD_INT 13
7489: PUSH
7490: LD_INT 14
7492: PUSH
7493: LD_INT 2
7495: PUSH
7496: LD_INT 3
7498: PUSH
7499: LD_INT 4
7501: PUSH
7502: LD_INT 5
7504: PUSH
7505: LD_INT 21
7507: PUSH
7508: LD_INT 22
7510: PUSH
7511: LD_INT 23
7513: PUSH
7514: LD_INT 24
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: ST_TO_ADDR
7529: GO 7532
7531: POP
// result := ( chassis in result ) ;
7532: LD_ADDR_VAR 0 3
7536: PUSH
7537: LD_VAR 0 1
7541: PUSH
7542: LD_VAR 0 3
7546: IN
7547: ST_TO_ADDR
// end ;
7548: LD_VAR 0 3
7552: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7553: LD_INT 0
7555: PPUSH
// if not chassis or not weapon then
7556: LD_VAR 0 1
7560: NOT
7561: PUSH
7562: LD_VAR 0 2
7566: NOT
7567: OR
7568: IFFALSE 7572
// exit ;
7570: GO 8598
// case weapon of us_machine_gun :
7572: LD_VAR 0 2
7576: PUSH
7577: LD_INT 2
7579: DOUBLE
7580: EQUAL
7581: IFTRUE 7585
7583: GO 7615
7585: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7586: LD_ADDR_VAR 0 3
7590: PUSH
7591: LD_INT 1
7593: PUSH
7594: LD_INT 2
7596: PUSH
7597: LD_INT 3
7599: PUSH
7600: LD_INT 4
7602: PUSH
7603: LD_INT 5
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: ST_TO_ADDR
7613: GO 8582
7615: LD_INT 3
7617: DOUBLE
7618: EQUAL
7619: IFTRUE 7623
7621: GO 7653
7623: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7624: LD_ADDR_VAR 0 3
7628: PUSH
7629: LD_INT 1
7631: PUSH
7632: LD_INT 2
7634: PUSH
7635: LD_INT 3
7637: PUSH
7638: LD_INT 4
7640: PUSH
7641: LD_INT 5
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: ST_TO_ADDR
7651: GO 8582
7653: LD_INT 11
7655: DOUBLE
7656: EQUAL
7657: IFTRUE 7661
7659: GO 7691
7661: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7662: LD_ADDR_VAR 0 3
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: LD_INT 2
7672: PUSH
7673: LD_INT 3
7675: PUSH
7676: LD_INT 4
7678: PUSH
7679: LD_INT 5
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: ST_TO_ADDR
7689: GO 8582
7691: LD_INT 4
7693: DOUBLE
7694: EQUAL
7695: IFTRUE 7699
7697: GO 7725
7699: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7700: LD_ADDR_VAR 0 3
7704: PUSH
7705: LD_INT 2
7707: PUSH
7708: LD_INT 3
7710: PUSH
7711: LD_INT 4
7713: PUSH
7714: LD_INT 5
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: ST_TO_ADDR
7723: GO 8582
7725: LD_INT 5
7727: DOUBLE
7728: EQUAL
7729: IFTRUE 7733
7731: GO 7759
7733: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7734: LD_ADDR_VAR 0 3
7738: PUSH
7739: LD_INT 2
7741: PUSH
7742: LD_INT 3
7744: PUSH
7745: LD_INT 4
7747: PUSH
7748: LD_INT 5
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: ST_TO_ADDR
7757: GO 8582
7759: LD_INT 9
7761: DOUBLE
7762: EQUAL
7763: IFTRUE 7767
7765: GO 7793
7767: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7768: LD_ADDR_VAR 0 3
7772: PUSH
7773: LD_INT 2
7775: PUSH
7776: LD_INT 3
7778: PUSH
7779: LD_INT 4
7781: PUSH
7782: LD_INT 5
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: ST_TO_ADDR
7791: GO 8582
7793: LD_INT 7
7795: DOUBLE
7796: EQUAL
7797: IFTRUE 7801
7799: GO 7827
7801: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7802: LD_ADDR_VAR 0 3
7806: PUSH
7807: LD_INT 2
7809: PUSH
7810: LD_INT 3
7812: PUSH
7813: LD_INT 4
7815: PUSH
7816: LD_INT 5
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: ST_TO_ADDR
7825: GO 8582
7827: LD_INT 12
7829: DOUBLE
7830: EQUAL
7831: IFTRUE 7835
7833: GO 7861
7835: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7836: LD_ADDR_VAR 0 3
7840: PUSH
7841: LD_INT 2
7843: PUSH
7844: LD_INT 3
7846: PUSH
7847: LD_INT 4
7849: PUSH
7850: LD_INT 5
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: ST_TO_ADDR
7859: GO 8582
7861: LD_INT 13
7863: DOUBLE
7864: EQUAL
7865: IFTRUE 7869
7867: GO 7895
7869: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7870: LD_ADDR_VAR 0 3
7874: PUSH
7875: LD_INT 2
7877: PUSH
7878: LD_INT 3
7880: PUSH
7881: LD_INT 4
7883: PUSH
7884: LD_INT 5
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: ST_TO_ADDR
7893: GO 8582
7895: LD_INT 14
7897: DOUBLE
7898: EQUAL
7899: IFTRUE 7903
7901: GO 7921
7903: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7904: LD_ADDR_VAR 0 3
7908: PUSH
7909: LD_INT 4
7911: PUSH
7912: LD_INT 5
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: ST_TO_ADDR
7919: GO 8582
7921: LD_INT 6
7923: DOUBLE
7924: EQUAL
7925: IFTRUE 7929
7927: GO 7947
7929: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7930: LD_ADDR_VAR 0 3
7934: PUSH
7935: LD_INT 4
7937: PUSH
7938: LD_INT 5
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: ST_TO_ADDR
7945: GO 8582
7947: LD_INT 10
7949: DOUBLE
7950: EQUAL
7951: IFTRUE 7955
7953: GO 7973
7955: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7956: LD_ADDR_VAR 0 3
7960: PUSH
7961: LD_INT 4
7963: PUSH
7964: LD_INT 5
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: ST_TO_ADDR
7971: GO 8582
7973: LD_INT 22
7975: DOUBLE
7976: EQUAL
7977: IFTRUE 7981
7979: GO 8007
7981: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7982: LD_ADDR_VAR 0 3
7986: PUSH
7987: LD_INT 11
7989: PUSH
7990: LD_INT 12
7992: PUSH
7993: LD_INT 13
7995: PUSH
7996: LD_INT 14
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: ST_TO_ADDR
8005: GO 8582
8007: LD_INT 23
8009: DOUBLE
8010: EQUAL
8011: IFTRUE 8015
8013: GO 8041
8015: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8016: LD_ADDR_VAR 0 3
8020: PUSH
8021: LD_INT 11
8023: PUSH
8024: LD_INT 12
8026: PUSH
8027: LD_INT 13
8029: PUSH
8030: LD_INT 14
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: ST_TO_ADDR
8039: GO 8582
8041: LD_INT 24
8043: DOUBLE
8044: EQUAL
8045: IFTRUE 8049
8047: GO 8075
8049: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8050: LD_ADDR_VAR 0 3
8054: PUSH
8055: LD_INT 11
8057: PUSH
8058: LD_INT 12
8060: PUSH
8061: LD_INT 13
8063: PUSH
8064: LD_INT 14
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: ST_TO_ADDR
8073: GO 8582
8075: LD_INT 30
8077: DOUBLE
8078: EQUAL
8079: IFTRUE 8083
8081: GO 8109
8083: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8084: LD_ADDR_VAR 0 3
8088: PUSH
8089: LD_INT 11
8091: PUSH
8092: LD_INT 12
8094: PUSH
8095: LD_INT 13
8097: PUSH
8098: LD_INT 14
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: ST_TO_ADDR
8107: GO 8582
8109: LD_INT 25
8111: DOUBLE
8112: EQUAL
8113: IFTRUE 8117
8115: GO 8135
8117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8118: LD_ADDR_VAR 0 3
8122: PUSH
8123: LD_INT 13
8125: PUSH
8126: LD_INT 14
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: ST_TO_ADDR
8133: GO 8582
8135: LD_INT 27
8137: DOUBLE
8138: EQUAL
8139: IFTRUE 8143
8141: GO 8161
8143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8144: LD_ADDR_VAR 0 3
8148: PUSH
8149: LD_INT 13
8151: PUSH
8152: LD_INT 14
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: ST_TO_ADDR
8159: GO 8582
8161: LD_INT 28
8163: DOUBLE
8164: EQUAL
8165: IFTRUE 8169
8167: GO 8187
8169: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8170: LD_ADDR_VAR 0 3
8174: PUSH
8175: LD_INT 13
8177: PUSH
8178: LD_INT 14
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: ST_TO_ADDR
8185: GO 8582
8187: LD_INT 29
8189: DOUBLE
8190: EQUAL
8191: IFTRUE 8195
8193: GO 8213
8195: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8196: LD_ADDR_VAR 0 3
8200: PUSH
8201: LD_INT 13
8203: PUSH
8204: LD_INT 14
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: ST_TO_ADDR
8211: GO 8582
8213: LD_INT 31
8215: DOUBLE
8216: EQUAL
8217: IFTRUE 8221
8219: GO 8239
8221: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8222: LD_ADDR_VAR 0 3
8226: PUSH
8227: LD_INT 13
8229: PUSH
8230: LD_INT 14
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: ST_TO_ADDR
8237: GO 8582
8239: LD_INT 26
8241: DOUBLE
8242: EQUAL
8243: IFTRUE 8247
8245: GO 8265
8247: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8248: LD_ADDR_VAR 0 3
8252: PUSH
8253: LD_INT 13
8255: PUSH
8256: LD_INT 14
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: ST_TO_ADDR
8263: GO 8582
8265: LD_INT 42
8267: DOUBLE
8268: EQUAL
8269: IFTRUE 8273
8271: GO 8299
8273: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8274: LD_ADDR_VAR 0 3
8278: PUSH
8279: LD_INT 21
8281: PUSH
8282: LD_INT 22
8284: PUSH
8285: LD_INT 23
8287: PUSH
8288: LD_INT 24
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: ST_TO_ADDR
8297: GO 8582
8299: LD_INT 43
8301: DOUBLE
8302: EQUAL
8303: IFTRUE 8307
8305: GO 8333
8307: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8308: LD_ADDR_VAR 0 3
8312: PUSH
8313: LD_INT 21
8315: PUSH
8316: LD_INT 22
8318: PUSH
8319: LD_INT 23
8321: PUSH
8322: LD_INT 24
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: ST_TO_ADDR
8331: GO 8582
8333: LD_INT 44
8335: DOUBLE
8336: EQUAL
8337: IFTRUE 8341
8339: GO 8367
8341: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8342: LD_ADDR_VAR 0 3
8346: PUSH
8347: LD_INT 21
8349: PUSH
8350: LD_INT 22
8352: PUSH
8353: LD_INT 23
8355: PUSH
8356: LD_INT 24
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: ST_TO_ADDR
8365: GO 8582
8367: LD_INT 45
8369: DOUBLE
8370: EQUAL
8371: IFTRUE 8375
8373: GO 8401
8375: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8376: LD_ADDR_VAR 0 3
8380: PUSH
8381: LD_INT 21
8383: PUSH
8384: LD_INT 22
8386: PUSH
8387: LD_INT 23
8389: PUSH
8390: LD_INT 24
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: ST_TO_ADDR
8399: GO 8582
8401: LD_INT 49
8403: DOUBLE
8404: EQUAL
8405: IFTRUE 8409
8407: GO 8435
8409: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8410: LD_ADDR_VAR 0 3
8414: PUSH
8415: LD_INT 21
8417: PUSH
8418: LD_INT 22
8420: PUSH
8421: LD_INT 23
8423: PUSH
8424: LD_INT 24
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: ST_TO_ADDR
8433: GO 8582
8435: LD_INT 51
8437: DOUBLE
8438: EQUAL
8439: IFTRUE 8443
8441: GO 8469
8443: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8444: LD_ADDR_VAR 0 3
8448: PUSH
8449: LD_INT 21
8451: PUSH
8452: LD_INT 22
8454: PUSH
8455: LD_INT 23
8457: PUSH
8458: LD_INT 24
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: ST_TO_ADDR
8467: GO 8582
8469: LD_INT 52
8471: DOUBLE
8472: EQUAL
8473: IFTRUE 8477
8475: GO 8503
8477: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8478: LD_ADDR_VAR 0 3
8482: PUSH
8483: LD_INT 21
8485: PUSH
8486: LD_INT 22
8488: PUSH
8489: LD_INT 23
8491: PUSH
8492: LD_INT 24
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: ST_TO_ADDR
8501: GO 8582
8503: LD_INT 53
8505: DOUBLE
8506: EQUAL
8507: IFTRUE 8511
8509: GO 8529
8511: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8512: LD_ADDR_VAR 0 3
8516: PUSH
8517: LD_INT 23
8519: PUSH
8520: LD_INT 24
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: ST_TO_ADDR
8527: GO 8582
8529: LD_INT 46
8531: DOUBLE
8532: EQUAL
8533: IFTRUE 8537
8535: GO 8555
8537: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8538: LD_ADDR_VAR 0 3
8542: PUSH
8543: LD_INT 23
8545: PUSH
8546: LD_INT 24
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: ST_TO_ADDR
8553: GO 8582
8555: LD_INT 47
8557: DOUBLE
8558: EQUAL
8559: IFTRUE 8563
8561: GO 8581
8563: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8564: LD_ADDR_VAR 0 3
8568: PUSH
8569: LD_INT 23
8571: PUSH
8572: LD_INT 24
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: ST_TO_ADDR
8579: GO 8582
8581: POP
// result := ( chassis in result ) ;
8582: LD_ADDR_VAR 0 3
8586: PUSH
8587: LD_VAR 0 1
8591: PUSH
8592: LD_VAR 0 3
8596: IN
8597: ST_TO_ADDR
// end ;
8598: LD_VAR 0 3
8602: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8603: LD_INT 0
8605: PPUSH
8606: PPUSH
8607: PPUSH
8608: PPUSH
8609: PPUSH
8610: PPUSH
8611: PPUSH
// result := array ;
8612: LD_ADDR_VAR 0 5
8616: PUSH
8617: LD_VAR 0 1
8621: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8622: LD_VAR 0 1
8626: NOT
8627: PUSH
8628: LD_VAR 0 2
8632: NOT
8633: OR
8634: PUSH
8635: LD_VAR 0 3
8639: NOT
8640: OR
8641: PUSH
8642: LD_VAR 0 2
8646: PUSH
8647: LD_VAR 0 1
8651: GREATER
8652: OR
8653: PUSH
8654: LD_VAR 0 3
8658: PUSH
8659: LD_VAR 0 1
8663: GREATER
8664: OR
8665: IFFALSE 8669
// exit ;
8667: GO 8965
// if direction then
8669: LD_VAR 0 4
8673: IFFALSE 8737
// begin d := 1 ;
8675: LD_ADDR_VAR 0 9
8679: PUSH
8680: LD_INT 1
8682: ST_TO_ADDR
// if i_from > i_to then
8683: LD_VAR 0 2
8687: PUSH
8688: LD_VAR 0 3
8692: GREATER
8693: IFFALSE 8719
// length := ( array - i_from ) + i_to else
8695: LD_ADDR_VAR 0 11
8699: PUSH
8700: LD_VAR 0 1
8704: PUSH
8705: LD_VAR 0 2
8709: MINUS
8710: PUSH
8711: LD_VAR 0 3
8715: PLUS
8716: ST_TO_ADDR
8717: GO 8735
// length := i_to - i_from ;
8719: LD_ADDR_VAR 0 11
8723: PUSH
8724: LD_VAR 0 3
8728: PUSH
8729: LD_VAR 0 2
8733: MINUS
8734: ST_TO_ADDR
// end else
8735: GO 8798
// begin d := - 1 ;
8737: LD_ADDR_VAR 0 9
8741: PUSH
8742: LD_INT 1
8744: NEG
8745: ST_TO_ADDR
// if i_from > i_to then
8746: LD_VAR 0 2
8750: PUSH
8751: LD_VAR 0 3
8755: GREATER
8756: IFFALSE 8776
// length := i_from - i_to else
8758: LD_ADDR_VAR 0 11
8762: PUSH
8763: LD_VAR 0 2
8767: PUSH
8768: LD_VAR 0 3
8772: MINUS
8773: ST_TO_ADDR
8774: GO 8798
// length := ( array - i_to ) + i_from ;
8776: LD_ADDR_VAR 0 11
8780: PUSH
8781: LD_VAR 0 1
8785: PUSH
8786: LD_VAR 0 3
8790: MINUS
8791: PUSH
8792: LD_VAR 0 2
8796: PLUS
8797: ST_TO_ADDR
// end ; if not length then
8798: LD_VAR 0 11
8802: NOT
8803: IFFALSE 8807
// exit ;
8805: GO 8965
// tmp := array ;
8807: LD_ADDR_VAR 0 10
8811: PUSH
8812: LD_VAR 0 1
8816: ST_TO_ADDR
// for i = 1 to length do
8817: LD_ADDR_VAR 0 6
8821: PUSH
8822: DOUBLE
8823: LD_INT 1
8825: DEC
8826: ST_TO_ADDR
8827: LD_VAR 0 11
8831: PUSH
8832: FOR_TO
8833: IFFALSE 8953
// begin for j = 1 to array do
8835: LD_ADDR_VAR 0 7
8839: PUSH
8840: DOUBLE
8841: LD_INT 1
8843: DEC
8844: ST_TO_ADDR
8845: LD_VAR 0 1
8849: PUSH
8850: FOR_TO
8851: IFFALSE 8939
// begin k := j + d ;
8853: LD_ADDR_VAR 0 8
8857: PUSH
8858: LD_VAR 0 7
8862: PUSH
8863: LD_VAR 0 9
8867: PLUS
8868: ST_TO_ADDR
// if k > array then
8869: LD_VAR 0 8
8873: PUSH
8874: LD_VAR 0 1
8878: GREATER
8879: IFFALSE 8889
// k := 1 ;
8881: LD_ADDR_VAR 0 8
8885: PUSH
8886: LD_INT 1
8888: ST_TO_ADDR
// if not k then
8889: LD_VAR 0 8
8893: NOT
8894: IFFALSE 8906
// k := array ;
8896: LD_ADDR_VAR 0 8
8900: PUSH
8901: LD_VAR 0 1
8905: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8906: LD_ADDR_VAR 0 10
8910: PUSH
8911: LD_VAR 0 10
8915: PPUSH
8916: LD_VAR 0 8
8920: PPUSH
8921: LD_VAR 0 1
8925: PUSH
8926: LD_VAR 0 7
8930: ARRAY
8931: PPUSH
8932: CALL_OW 1
8936: ST_TO_ADDR
// end ;
8937: GO 8850
8939: POP
8940: POP
// array := tmp ;
8941: LD_ADDR_VAR 0 1
8945: PUSH
8946: LD_VAR 0 10
8950: ST_TO_ADDR
// end ;
8951: GO 8832
8953: POP
8954: POP
// result := array ;
8955: LD_ADDR_VAR 0 5
8959: PUSH
8960: LD_VAR 0 1
8964: ST_TO_ADDR
// end ;
8965: LD_VAR 0 5
8969: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8970: LD_INT 0
8972: PPUSH
8973: PPUSH
// result := 0 ;
8974: LD_ADDR_VAR 0 3
8978: PUSH
8979: LD_INT 0
8981: ST_TO_ADDR
// if not array or not value in array then
8982: LD_VAR 0 1
8986: NOT
8987: PUSH
8988: LD_VAR 0 2
8992: PUSH
8993: LD_VAR 0 1
8997: IN
8998: NOT
8999: OR
9000: IFFALSE 9004
// exit ;
9002: GO 9058
// for i = 1 to array do
9004: LD_ADDR_VAR 0 4
9008: PUSH
9009: DOUBLE
9010: LD_INT 1
9012: DEC
9013: ST_TO_ADDR
9014: LD_VAR 0 1
9018: PUSH
9019: FOR_TO
9020: IFFALSE 9056
// if value = array [ i ] then
9022: LD_VAR 0 2
9026: PUSH
9027: LD_VAR 0 1
9031: PUSH
9032: LD_VAR 0 4
9036: ARRAY
9037: EQUAL
9038: IFFALSE 9054
// begin result := i ;
9040: LD_ADDR_VAR 0 3
9044: PUSH
9045: LD_VAR 0 4
9049: ST_TO_ADDR
// exit ;
9050: POP
9051: POP
9052: GO 9058
// end ;
9054: GO 9019
9056: POP
9057: POP
// end ;
9058: LD_VAR 0 3
9062: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9063: LD_INT 0
9065: PPUSH
// vc_chassis := chassis ;
9066: LD_ADDR_OWVAR 37
9070: PUSH
9071: LD_VAR 0 1
9075: ST_TO_ADDR
// vc_engine := engine ;
9076: LD_ADDR_OWVAR 39
9080: PUSH
9081: LD_VAR 0 2
9085: ST_TO_ADDR
// vc_control := control ;
9086: LD_ADDR_OWVAR 38
9090: PUSH
9091: LD_VAR 0 3
9095: ST_TO_ADDR
// vc_weapon := weapon ;
9096: LD_ADDR_OWVAR 40
9100: PUSH
9101: LD_VAR 0 4
9105: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9106: LD_ADDR_OWVAR 41
9110: PUSH
9111: LD_VAR 0 5
9115: ST_TO_ADDR
// end ;
9116: LD_VAR 0 6
9120: RET
// export function WantPlant ( unit ) ; var task ; begin
9121: LD_INT 0
9123: PPUSH
9124: PPUSH
// result := false ;
9125: LD_ADDR_VAR 0 2
9129: PUSH
9130: LD_INT 0
9132: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9133: LD_ADDR_VAR 0 3
9137: PUSH
9138: LD_VAR 0 1
9142: PPUSH
9143: CALL_OW 437
9147: ST_TO_ADDR
// if task then
9148: LD_VAR 0 3
9152: IFFALSE 9180
// if task [ 1 ] [ 1 ] = p then
9154: LD_VAR 0 3
9158: PUSH
9159: LD_INT 1
9161: ARRAY
9162: PUSH
9163: LD_INT 1
9165: ARRAY
9166: PUSH
9167: LD_STRING p
9169: EQUAL
9170: IFFALSE 9180
// result := true ;
9172: LD_ADDR_VAR 0 2
9176: PUSH
9177: LD_INT 1
9179: ST_TO_ADDR
// end ;
9180: LD_VAR 0 2
9184: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9185: LD_INT 0
9187: PPUSH
9188: PPUSH
9189: PPUSH
9190: PPUSH
// if pos < 1 then
9191: LD_VAR 0 2
9195: PUSH
9196: LD_INT 1
9198: LESS
9199: IFFALSE 9203
// exit ;
9201: GO 9506
// if pos = 1 then
9203: LD_VAR 0 2
9207: PUSH
9208: LD_INT 1
9210: EQUAL
9211: IFFALSE 9244
// result := Replace ( arr , pos [ 1 ] , value ) else
9213: LD_ADDR_VAR 0 4
9217: PUSH
9218: LD_VAR 0 1
9222: PPUSH
9223: LD_VAR 0 2
9227: PUSH
9228: LD_INT 1
9230: ARRAY
9231: PPUSH
9232: LD_VAR 0 3
9236: PPUSH
9237: CALL_OW 1
9241: ST_TO_ADDR
9242: GO 9506
// begin tmp := arr ;
9244: LD_ADDR_VAR 0 6
9248: PUSH
9249: LD_VAR 0 1
9253: ST_TO_ADDR
// s_arr := [ tmp ] ;
9254: LD_ADDR_VAR 0 7
9258: PUSH
9259: LD_VAR 0 6
9263: PUSH
9264: EMPTY
9265: LIST
9266: ST_TO_ADDR
// for i = 1 to pos - 1 do
9267: LD_ADDR_VAR 0 5
9271: PUSH
9272: DOUBLE
9273: LD_INT 1
9275: DEC
9276: ST_TO_ADDR
9277: LD_VAR 0 2
9281: PUSH
9282: LD_INT 1
9284: MINUS
9285: PUSH
9286: FOR_TO
9287: IFFALSE 9332
// begin tmp := tmp [ pos [ i ] ] ;
9289: LD_ADDR_VAR 0 6
9293: PUSH
9294: LD_VAR 0 6
9298: PUSH
9299: LD_VAR 0 2
9303: PUSH
9304: LD_VAR 0 5
9308: ARRAY
9309: ARRAY
9310: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9311: LD_ADDR_VAR 0 7
9315: PUSH
9316: LD_VAR 0 7
9320: PUSH
9321: LD_VAR 0 6
9325: PUSH
9326: EMPTY
9327: LIST
9328: ADD
9329: ST_TO_ADDR
// end ;
9330: GO 9286
9332: POP
9333: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9334: LD_ADDR_VAR 0 6
9338: PUSH
9339: LD_VAR 0 6
9343: PPUSH
9344: LD_VAR 0 2
9348: PUSH
9349: LD_VAR 0 2
9353: ARRAY
9354: PPUSH
9355: LD_VAR 0 3
9359: PPUSH
9360: CALL_OW 1
9364: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9365: LD_ADDR_VAR 0 7
9369: PUSH
9370: LD_VAR 0 7
9374: PPUSH
9375: LD_VAR 0 7
9379: PPUSH
9380: LD_VAR 0 6
9384: PPUSH
9385: CALL_OW 1
9389: ST_TO_ADDR
// for i = s_arr downto 2 do
9390: LD_ADDR_VAR 0 5
9394: PUSH
9395: DOUBLE
9396: LD_VAR 0 7
9400: INC
9401: ST_TO_ADDR
9402: LD_INT 2
9404: PUSH
9405: FOR_DOWNTO
9406: IFFALSE 9490
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9408: LD_ADDR_VAR 0 6
9412: PUSH
9413: LD_VAR 0 7
9417: PUSH
9418: LD_VAR 0 5
9422: PUSH
9423: LD_INT 1
9425: MINUS
9426: ARRAY
9427: PPUSH
9428: LD_VAR 0 2
9432: PUSH
9433: LD_VAR 0 5
9437: PUSH
9438: LD_INT 1
9440: MINUS
9441: ARRAY
9442: PPUSH
9443: LD_VAR 0 7
9447: PUSH
9448: LD_VAR 0 5
9452: ARRAY
9453: PPUSH
9454: CALL_OW 1
9458: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9459: LD_ADDR_VAR 0 7
9463: PUSH
9464: LD_VAR 0 7
9468: PPUSH
9469: LD_VAR 0 5
9473: PUSH
9474: LD_INT 1
9476: MINUS
9477: PPUSH
9478: LD_VAR 0 6
9482: PPUSH
9483: CALL_OW 1
9487: ST_TO_ADDR
// end ;
9488: GO 9405
9490: POP
9491: POP
// result := s_arr [ 1 ] ;
9492: LD_ADDR_VAR 0 4
9496: PUSH
9497: LD_VAR 0 7
9501: PUSH
9502: LD_INT 1
9504: ARRAY
9505: ST_TO_ADDR
// end ; end ;
9506: LD_VAR 0 4
9510: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9511: LD_INT 0
9513: PPUSH
9514: PPUSH
// if not list then
9515: LD_VAR 0 1
9519: NOT
9520: IFFALSE 9524
// exit ;
9522: GO 9615
// i := list [ pos1 ] ;
9524: LD_ADDR_VAR 0 5
9528: PUSH
9529: LD_VAR 0 1
9533: PUSH
9534: LD_VAR 0 2
9538: ARRAY
9539: ST_TO_ADDR
// if not i then
9540: LD_VAR 0 5
9544: NOT
9545: IFFALSE 9549
// exit ;
9547: GO 9615
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9549: LD_ADDR_VAR 0 1
9553: PUSH
9554: LD_VAR 0 1
9558: PPUSH
9559: LD_VAR 0 2
9563: PPUSH
9564: LD_VAR 0 1
9568: PUSH
9569: LD_VAR 0 3
9573: ARRAY
9574: PPUSH
9575: CALL_OW 1
9579: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9580: LD_ADDR_VAR 0 1
9584: PUSH
9585: LD_VAR 0 1
9589: PPUSH
9590: LD_VAR 0 3
9594: PPUSH
9595: LD_VAR 0 5
9599: PPUSH
9600: CALL_OW 1
9604: ST_TO_ADDR
// result := list ;
9605: LD_ADDR_VAR 0 4
9609: PUSH
9610: LD_VAR 0 1
9614: ST_TO_ADDR
// end ;
9615: LD_VAR 0 4
9619: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9620: LD_INT 0
9622: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9623: LD_ADDR_VAR 0 5
9627: PUSH
9628: LD_VAR 0 1
9632: PPUSH
9633: CALL_OW 250
9637: PPUSH
9638: LD_VAR 0 1
9642: PPUSH
9643: CALL_OW 251
9647: PPUSH
9648: LD_VAR 0 2
9652: PPUSH
9653: LD_VAR 0 3
9657: PPUSH
9658: LD_VAR 0 4
9662: PPUSH
9663: CALL 9673 0 5
9667: ST_TO_ADDR
// end ;
9668: LD_VAR 0 5
9672: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9673: LD_INT 0
9675: PPUSH
9676: PPUSH
9677: PPUSH
9678: PPUSH
// if not list then
9679: LD_VAR 0 3
9683: NOT
9684: IFFALSE 9688
// exit ;
9686: GO 10076
// result := [ ] ;
9688: LD_ADDR_VAR 0 6
9692: PUSH
9693: EMPTY
9694: ST_TO_ADDR
// for i in list do
9695: LD_ADDR_VAR 0 7
9699: PUSH
9700: LD_VAR 0 3
9704: PUSH
9705: FOR_IN
9706: IFFALSE 9908
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9708: LD_ADDR_VAR 0 9
9712: PUSH
9713: LD_VAR 0 7
9717: PPUSH
9718: LD_VAR 0 1
9722: PPUSH
9723: LD_VAR 0 2
9727: PPUSH
9728: CALL_OW 297
9732: ST_TO_ADDR
// if not result then
9733: LD_VAR 0 6
9737: NOT
9738: IFFALSE 9764
// result := [ [ i , tmp ] ] else
9740: LD_ADDR_VAR 0 6
9744: PUSH
9745: LD_VAR 0 7
9749: PUSH
9750: LD_VAR 0 9
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: EMPTY
9760: LIST
9761: ST_TO_ADDR
9762: GO 9906
// begin if result [ result ] [ 2 ] < tmp then
9764: LD_VAR 0 6
9768: PUSH
9769: LD_VAR 0 6
9773: ARRAY
9774: PUSH
9775: LD_INT 2
9777: ARRAY
9778: PUSH
9779: LD_VAR 0 9
9783: LESS
9784: IFFALSE 9826
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9786: LD_ADDR_VAR 0 6
9790: PUSH
9791: LD_VAR 0 6
9795: PPUSH
9796: LD_VAR 0 6
9800: PUSH
9801: LD_INT 1
9803: PLUS
9804: PPUSH
9805: LD_VAR 0 7
9809: PUSH
9810: LD_VAR 0 9
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: PPUSH
9819: CALL_OW 2
9823: ST_TO_ADDR
9824: GO 9906
// for j = 1 to result do
9826: LD_ADDR_VAR 0 8
9830: PUSH
9831: DOUBLE
9832: LD_INT 1
9834: DEC
9835: ST_TO_ADDR
9836: LD_VAR 0 6
9840: PUSH
9841: FOR_TO
9842: IFFALSE 9904
// begin if tmp < result [ j ] [ 2 ] then
9844: LD_VAR 0 9
9848: PUSH
9849: LD_VAR 0 6
9853: PUSH
9854: LD_VAR 0 8
9858: ARRAY
9859: PUSH
9860: LD_INT 2
9862: ARRAY
9863: LESS
9864: IFFALSE 9902
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9866: LD_ADDR_VAR 0 6
9870: PUSH
9871: LD_VAR 0 6
9875: PPUSH
9876: LD_VAR 0 8
9880: PPUSH
9881: LD_VAR 0 7
9885: PUSH
9886: LD_VAR 0 9
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PPUSH
9895: CALL_OW 2
9899: ST_TO_ADDR
// break ;
9900: GO 9904
// end ; end ;
9902: GO 9841
9904: POP
9905: POP
// end ; end ;
9906: GO 9705
9908: POP
9909: POP
// if result and not asc then
9910: LD_VAR 0 6
9914: PUSH
9915: LD_VAR 0 4
9919: NOT
9920: AND
9921: IFFALSE 9996
// begin tmp := result ;
9923: LD_ADDR_VAR 0 9
9927: PUSH
9928: LD_VAR 0 6
9932: ST_TO_ADDR
// for i = tmp downto 1 do
9933: LD_ADDR_VAR 0 7
9937: PUSH
9938: DOUBLE
9939: LD_VAR 0 9
9943: INC
9944: ST_TO_ADDR
9945: LD_INT 1
9947: PUSH
9948: FOR_DOWNTO
9949: IFFALSE 9994
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9951: LD_ADDR_VAR 0 6
9955: PUSH
9956: LD_VAR 0 6
9960: PPUSH
9961: LD_VAR 0 9
9965: PUSH
9966: LD_VAR 0 7
9970: MINUS
9971: PUSH
9972: LD_INT 1
9974: PLUS
9975: PPUSH
9976: LD_VAR 0 9
9980: PUSH
9981: LD_VAR 0 7
9985: ARRAY
9986: PPUSH
9987: CALL_OW 1
9991: ST_TO_ADDR
9992: GO 9948
9994: POP
9995: POP
// end ; tmp := [ ] ;
9996: LD_ADDR_VAR 0 9
10000: PUSH
10001: EMPTY
10002: ST_TO_ADDR
// if mode then
10003: LD_VAR 0 5
10007: IFFALSE 10076
// begin for i = 1 to result do
10009: LD_ADDR_VAR 0 7
10013: PUSH
10014: DOUBLE
10015: LD_INT 1
10017: DEC
10018: ST_TO_ADDR
10019: LD_VAR 0 6
10023: PUSH
10024: FOR_TO
10025: IFFALSE 10064
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10027: LD_ADDR_VAR 0 9
10031: PUSH
10032: LD_VAR 0 9
10036: PPUSH
10037: LD_VAR 0 7
10041: PPUSH
10042: LD_VAR 0 6
10046: PUSH
10047: LD_VAR 0 7
10051: ARRAY
10052: PUSH
10053: LD_INT 1
10055: ARRAY
10056: PPUSH
10057: CALL_OW 1
10061: ST_TO_ADDR
10062: GO 10024
10064: POP
10065: POP
// result := tmp ;
10066: LD_ADDR_VAR 0 6
10070: PUSH
10071: LD_VAR 0 9
10075: ST_TO_ADDR
// end ; end ;
10076: LD_VAR 0 6
10080: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10081: LD_INT 0
10083: PPUSH
10084: PPUSH
10085: PPUSH
10086: PPUSH
10087: PPUSH
10088: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10089: LD_ADDR_VAR 0 5
10093: PUSH
10094: LD_INT 0
10096: PUSH
10097: LD_INT 0
10099: PUSH
10100: LD_INT 0
10102: PUSH
10103: EMPTY
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: ST_TO_ADDR
// if not x or not y then
10111: LD_VAR 0 2
10115: NOT
10116: PUSH
10117: LD_VAR 0 3
10121: NOT
10122: OR
10123: IFFALSE 10127
// exit ;
10125: GO 11773
// if not range then
10127: LD_VAR 0 4
10131: NOT
10132: IFFALSE 10142
// range := 10 ;
10134: LD_ADDR_VAR 0 4
10138: PUSH
10139: LD_INT 10
10141: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10142: LD_ADDR_VAR 0 8
10146: PUSH
10147: LD_INT 81
10149: PUSH
10150: LD_VAR 0 1
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 92
10161: PUSH
10162: LD_VAR 0 2
10166: PUSH
10167: LD_VAR 0 3
10171: PUSH
10172: LD_VAR 0 4
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: PUSH
10183: LD_INT 3
10185: PUSH
10186: LD_INT 21
10188: PUSH
10189: LD_INT 3
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: LIST
10204: PPUSH
10205: CALL_OW 69
10209: ST_TO_ADDR
// if not tmp then
10210: LD_VAR 0 8
10214: NOT
10215: IFFALSE 10219
// exit ;
10217: GO 11773
// for i in tmp do
10219: LD_ADDR_VAR 0 6
10223: PUSH
10224: LD_VAR 0 8
10228: PUSH
10229: FOR_IN
10230: IFFALSE 11748
// begin points := [ 0 , 0 , 0 ] ;
10232: LD_ADDR_VAR 0 9
10236: PUSH
10237: LD_INT 0
10239: PUSH
10240: LD_INT 0
10242: PUSH
10243: LD_INT 0
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: LIST
10250: ST_TO_ADDR
// bpoints := 1 ;
10251: LD_ADDR_VAR 0 10
10255: PUSH
10256: LD_INT 1
10258: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10259: LD_VAR 0 6
10263: PPUSH
10264: CALL_OW 247
10268: PUSH
10269: LD_INT 1
10271: DOUBLE
10272: EQUAL
10273: IFTRUE 10277
10275: GO 10855
10277: POP
// begin if GetClass ( i ) = 1 then
10278: LD_VAR 0 6
10282: PPUSH
10283: CALL_OW 257
10287: PUSH
10288: LD_INT 1
10290: EQUAL
10291: IFFALSE 10312
// points := [ 10 , 5 , 3 ] ;
10293: LD_ADDR_VAR 0 9
10297: PUSH
10298: LD_INT 10
10300: PUSH
10301: LD_INT 5
10303: PUSH
10304: LD_INT 3
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: LIST
10311: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10312: LD_VAR 0 6
10316: PPUSH
10317: CALL_OW 257
10321: PUSH
10322: LD_INT 2
10324: PUSH
10325: LD_INT 3
10327: PUSH
10328: LD_INT 4
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: LIST
10335: IN
10336: IFFALSE 10357
// points := [ 3 , 2 , 1 ] ;
10338: LD_ADDR_VAR 0 9
10342: PUSH
10343: LD_INT 3
10345: PUSH
10346: LD_INT 2
10348: PUSH
10349: LD_INT 1
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: LIST
10356: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10357: LD_VAR 0 6
10361: PPUSH
10362: CALL_OW 257
10366: PUSH
10367: LD_INT 5
10369: EQUAL
10370: IFFALSE 10391
// points := [ 130 , 5 , 2 ] ;
10372: LD_ADDR_VAR 0 9
10376: PUSH
10377: LD_INT 130
10379: PUSH
10380: LD_INT 5
10382: PUSH
10383: LD_INT 2
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: LIST
10390: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10391: LD_VAR 0 6
10395: PPUSH
10396: CALL_OW 257
10400: PUSH
10401: LD_INT 8
10403: EQUAL
10404: IFFALSE 10425
// points := [ 35 , 35 , 30 ] ;
10406: LD_ADDR_VAR 0 9
10410: PUSH
10411: LD_INT 35
10413: PUSH
10414: LD_INT 35
10416: PUSH
10417: LD_INT 30
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: LIST
10424: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10425: LD_VAR 0 6
10429: PPUSH
10430: CALL_OW 257
10434: PUSH
10435: LD_INT 9
10437: EQUAL
10438: IFFALSE 10459
// points := [ 20 , 55 , 40 ] ;
10440: LD_ADDR_VAR 0 9
10444: PUSH
10445: LD_INT 20
10447: PUSH
10448: LD_INT 55
10450: PUSH
10451: LD_INT 40
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: LIST
10458: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10459: LD_VAR 0 6
10463: PPUSH
10464: CALL_OW 257
10468: PUSH
10469: LD_INT 12
10471: PUSH
10472: LD_INT 16
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: IN
10479: IFFALSE 10500
// points := [ 5 , 3 , 2 ] ;
10481: LD_ADDR_VAR 0 9
10485: PUSH
10486: LD_INT 5
10488: PUSH
10489: LD_INT 3
10491: PUSH
10492: LD_INT 2
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: LIST
10499: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10500: LD_VAR 0 6
10504: PPUSH
10505: CALL_OW 257
10509: PUSH
10510: LD_INT 17
10512: EQUAL
10513: IFFALSE 10534
// points := [ 100 , 50 , 75 ] ;
10515: LD_ADDR_VAR 0 9
10519: PUSH
10520: LD_INT 100
10522: PUSH
10523: LD_INT 50
10525: PUSH
10526: LD_INT 75
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10534: LD_VAR 0 6
10538: PPUSH
10539: CALL_OW 257
10543: PUSH
10544: LD_INT 15
10546: EQUAL
10547: IFFALSE 10568
// points := [ 10 , 5 , 3 ] ;
10549: LD_ADDR_VAR 0 9
10553: PUSH
10554: LD_INT 10
10556: PUSH
10557: LD_INT 5
10559: PUSH
10560: LD_INT 3
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10568: LD_VAR 0 6
10572: PPUSH
10573: CALL_OW 257
10577: PUSH
10578: LD_INT 14
10580: EQUAL
10581: IFFALSE 10602
// points := [ 10 , 0 , 0 ] ;
10583: LD_ADDR_VAR 0 9
10587: PUSH
10588: LD_INT 10
10590: PUSH
10591: LD_INT 0
10593: PUSH
10594: LD_INT 0
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: LIST
10601: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10602: LD_VAR 0 6
10606: PPUSH
10607: CALL_OW 257
10611: PUSH
10612: LD_INT 11
10614: EQUAL
10615: IFFALSE 10636
// points := [ 30 , 10 , 5 ] ;
10617: LD_ADDR_VAR 0 9
10621: PUSH
10622: LD_INT 30
10624: PUSH
10625: LD_INT 10
10627: PUSH
10628: LD_INT 5
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10636: LD_VAR 0 1
10640: PPUSH
10641: LD_INT 5
10643: PPUSH
10644: CALL_OW 321
10648: PUSH
10649: LD_INT 2
10651: EQUAL
10652: IFFALSE 10669
// bpoints := bpoints * 1.8 ;
10654: LD_ADDR_VAR 0 10
10658: PUSH
10659: LD_VAR 0 10
10663: PUSH
10664: LD_REAL  1.80000000000000E+0000
10667: MUL
10668: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10669: LD_VAR 0 6
10673: PPUSH
10674: CALL_OW 257
10678: PUSH
10679: LD_INT 1
10681: PUSH
10682: LD_INT 2
10684: PUSH
10685: LD_INT 3
10687: PUSH
10688: LD_INT 4
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: IN
10697: PUSH
10698: LD_VAR 0 1
10702: PPUSH
10703: LD_INT 51
10705: PPUSH
10706: CALL_OW 321
10710: PUSH
10711: LD_INT 2
10713: EQUAL
10714: AND
10715: IFFALSE 10732
// bpoints := bpoints * 1.2 ;
10717: LD_ADDR_VAR 0 10
10721: PUSH
10722: LD_VAR 0 10
10726: PUSH
10727: LD_REAL  1.20000000000000E+0000
10730: MUL
10731: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10732: LD_VAR 0 6
10736: PPUSH
10737: CALL_OW 257
10741: PUSH
10742: LD_INT 5
10744: PUSH
10745: LD_INT 7
10747: PUSH
10748: LD_INT 9
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: LIST
10755: IN
10756: PUSH
10757: LD_VAR 0 1
10761: PPUSH
10762: LD_INT 52
10764: PPUSH
10765: CALL_OW 321
10769: PUSH
10770: LD_INT 2
10772: EQUAL
10773: AND
10774: IFFALSE 10791
// bpoints := bpoints * 1.5 ;
10776: LD_ADDR_VAR 0 10
10780: PUSH
10781: LD_VAR 0 10
10785: PUSH
10786: LD_REAL  1.50000000000000E+0000
10789: MUL
10790: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10791: LD_VAR 0 1
10795: PPUSH
10796: LD_INT 66
10798: PPUSH
10799: CALL_OW 321
10803: PUSH
10804: LD_INT 2
10806: EQUAL
10807: IFFALSE 10824
// bpoints := bpoints * 1.1 ;
10809: LD_ADDR_VAR 0 10
10813: PUSH
10814: LD_VAR 0 10
10818: PUSH
10819: LD_REAL  1.10000000000000E+0000
10822: MUL
10823: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10824: LD_ADDR_VAR 0 10
10828: PUSH
10829: LD_VAR 0 10
10833: PUSH
10834: LD_VAR 0 6
10838: PPUSH
10839: LD_INT 1
10841: PPUSH
10842: CALL_OW 259
10846: PUSH
10847: LD_REAL  1.15000000000000E+0000
10850: MUL
10851: MUL
10852: ST_TO_ADDR
// end ; unit_vehicle :
10853: GO 11677
10855: LD_INT 2
10857: DOUBLE
10858: EQUAL
10859: IFTRUE 10863
10861: GO 11665
10863: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10864: LD_VAR 0 6
10868: PPUSH
10869: CALL_OW 264
10873: PUSH
10874: LD_INT 2
10876: PUSH
10877: LD_INT 42
10879: PUSH
10880: LD_INT 24
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: LIST
10887: IN
10888: IFFALSE 10909
// points := [ 25 , 5 , 3 ] ;
10890: LD_ADDR_VAR 0 9
10894: PUSH
10895: LD_INT 25
10897: PUSH
10898: LD_INT 5
10900: PUSH
10901: LD_INT 3
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: LIST
10908: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10909: LD_VAR 0 6
10913: PPUSH
10914: CALL_OW 264
10918: PUSH
10919: LD_INT 4
10921: PUSH
10922: LD_INT 43
10924: PUSH
10925: LD_INT 25
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: LIST
10932: IN
10933: IFFALSE 10954
// points := [ 40 , 15 , 5 ] ;
10935: LD_ADDR_VAR 0 9
10939: PUSH
10940: LD_INT 40
10942: PUSH
10943: LD_INT 15
10945: PUSH
10946: LD_INT 5
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: LIST
10953: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10954: LD_VAR 0 6
10958: PPUSH
10959: CALL_OW 264
10963: PUSH
10964: LD_INT 3
10966: PUSH
10967: LD_INT 23
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: IN
10974: IFFALSE 10995
// points := [ 7 , 25 , 8 ] ;
10976: LD_ADDR_VAR 0 9
10980: PUSH
10981: LD_INT 7
10983: PUSH
10984: LD_INT 25
10986: PUSH
10987: LD_INT 8
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: LIST
10994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10995: LD_VAR 0 6
10999: PPUSH
11000: CALL_OW 264
11004: PUSH
11005: LD_INT 5
11007: PUSH
11008: LD_INT 27
11010: PUSH
11011: LD_INT 44
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: LIST
11018: IN
11019: IFFALSE 11040
// points := [ 14 , 50 , 16 ] ;
11021: LD_ADDR_VAR 0 9
11025: PUSH
11026: LD_INT 14
11028: PUSH
11029: LD_INT 50
11031: PUSH
11032: LD_INT 16
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: LIST
11039: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11040: LD_VAR 0 6
11044: PPUSH
11045: CALL_OW 264
11049: PUSH
11050: LD_INT 6
11052: PUSH
11053: LD_INT 46
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: IN
11060: IFFALSE 11081
// points := [ 32 , 120 , 70 ] ;
11062: LD_ADDR_VAR 0 9
11066: PUSH
11067: LD_INT 32
11069: PUSH
11070: LD_INT 120
11072: PUSH
11073: LD_INT 70
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: LIST
11080: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
11081: LD_VAR 0 6
11085: PPUSH
11086: CALL_OW 264
11090: PUSH
11091: LD_INT 7
11093: PUSH
11094: LD_INT 28
11096: PUSH
11097: LD_INT 45
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: LIST
11104: IN
11105: IFFALSE 11126
// points := [ 35 , 20 , 45 ] ;
11107: LD_ADDR_VAR 0 9
11111: PUSH
11112: LD_INT 35
11114: PUSH
11115: LD_INT 20
11117: PUSH
11118: LD_INT 45
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11126: LD_VAR 0 6
11130: PPUSH
11131: CALL_OW 264
11135: PUSH
11136: LD_INT 47
11138: PUSH
11139: EMPTY
11140: LIST
11141: IN
11142: IFFALSE 11163
// points := [ 67 , 45 , 75 ] ;
11144: LD_ADDR_VAR 0 9
11148: PUSH
11149: LD_INT 67
11151: PUSH
11152: LD_INT 45
11154: PUSH
11155: LD_INT 75
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: LIST
11162: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11163: LD_VAR 0 6
11167: PPUSH
11168: CALL_OW 264
11172: PUSH
11173: LD_INT 26
11175: PUSH
11176: EMPTY
11177: LIST
11178: IN
11179: IFFALSE 11200
// points := [ 120 , 30 , 80 ] ;
11181: LD_ADDR_VAR 0 9
11185: PUSH
11186: LD_INT 120
11188: PUSH
11189: LD_INT 30
11191: PUSH
11192: LD_INT 80
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: LIST
11199: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11200: LD_VAR 0 6
11204: PPUSH
11205: CALL_OW 264
11209: PUSH
11210: LD_INT 22
11212: PUSH
11213: EMPTY
11214: LIST
11215: IN
11216: IFFALSE 11237
// points := [ 40 , 1 , 1 ] ;
11218: LD_ADDR_VAR 0 9
11222: PUSH
11223: LD_INT 40
11225: PUSH
11226: LD_INT 1
11228: PUSH
11229: LD_INT 1
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: LIST
11236: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11237: LD_VAR 0 6
11241: PPUSH
11242: CALL_OW 264
11246: PUSH
11247: LD_INT 29
11249: PUSH
11250: EMPTY
11251: LIST
11252: IN
11253: IFFALSE 11274
// points := [ 70 , 200 , 400 ] ;
11255: LD_ADDR_VAR 0 9
11259: PUSH
11260: LD_INT 70
11262: PUSH
11263: LD_INT 200
11265: PUSH
11266: LD_INT 400
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: LIST
11273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11274: LD_VAR 0 6
11278: PPUSH
11279: CALL_OW 264
11283: PUSH
11284: LD_INT 14
11286: PUSH
11287: LD_INT 53
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: IN
11294: IFFALSE 11315
// points := [ 40 , 10 , 20 ] ;
11296: LD_ADDR_VAR 0 9
11300: PUSH
11301: LD_INT 40
11303: PUSH
11304: LD_INT 10
11306: PUSH
11307: LD_INT 20
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11315: LD_VAR 0 6
11319: PPUSH
11320: CALL_OW 264
11324: PUSH
11325: LD_INT 9
11327: PUSH
11328: EMPTY
11329: LIST
11330: IN
11331: IFFALSE 11352
// points := [ 5 , 70 , 20 ] ;
11333: LD_ADDR_VAR 0 9
11337: PUSH
11338: LD_INT 5
11340: PUSH
11341: LD_INT 70
11343: PUSH
11344: LD_INT 20
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: LIST
11351: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11352: LD_VAR 0 6
11356: PPUSH
11357: CALL_OW 264
11361: PUSH
11362: LD_INT 10
11364: PUSH
11365: EMPTY
11366: LIST
11367: IN
11368: IFFALSE 11389
// points := [ 35 , 110 , 70 ] ;
11370: LD_ADDR_VAR 0 9
11374: PUSH
11375: LD_INT 35
11377: PUSH
11378: LD_INT 110
11380: PUSH
11381: LD_INT 70
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: LIST
11388: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11389: LD_VAR 0 6
11393: PPUSH
11394: CALL_OW 265
11398: PUSH
11399: LD_INT 25
11401: EQUAL
11402: IFFALSE 11423
// points := [ 80 , 65 , 100 ] ;
11404: LD_ADDR_VAR 0 9
11408: PUSH
11409: LD_INT 80
11411: PUSH
11412: LD_INT 65
11414: PUSH
11415: LD_INT 100
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: LIST
11422: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11423: LD_VAR 0 6
11427: PPUSH
11428: CALL_OW 263
11432: PUSH
11433: LD_INT 1
11435: EQUAL
11436: IFFALSE 11471
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11438: LD_ADDR_VAR 0 10
11442: PUSH
11443: LD_VAR 0 10
11447: PUSH
11448: LD_VAR 0 6
11452: PPUSH
11453: CALL_OW 311
11457: PPUSH
11458: LD_INT 3
11460: PPUSH
11461: CALL_OW 259
11465: PUSH
11466: LD_INT 4
11468: MUL
11469: MUL
11470: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11471: LD_VAR 0 6
11475: PPUSH
11476: CALL_OW 263
11480: PUSH
11481: LD_INT 2
11483: EQUAL
11484: IFFALSE 11535
// begin j := IsControledBy ( i ) ;
11486: LD_ADDR_VAR 0 7
11490: PUSH
11491: LD_VAR 0 6
11495: PPUSH
11496: CALL_OW 312
11500: ST_TO_ADDR
// if j then
11501: LD_VAR 0 7
11505: IFFALSE 11535
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11507: LD_ADDR_VAR 0 10
11511: PUSH
11512: LD_VAR 0 10
11516: PUSH
11517: LD_VAR 0 7
11521: PPUSH
11522: LD_INT 3
11524: PPUSH
11525: CALL_OW 259
11529: PUSH
11530: LD_INT 3
11532: MUL
11533: MUL
11534: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11535: LD_VAR 0 6
11539: PPUSH
11540: CALL_OW 264
11544: PUSH
11545: LD_INT 5
11547: PUSH
11548: LD_INT 6
11550: PUSH
11551: LD_INT 46
11553: PUSH
11554: LD_INT 44
11556: PUSH
11557: LD_INT 47
11559: PUSH
11560: LD_INT 45
11562: PUSH
11563: LD_INT 28
11565: PUSH
11566: LD_INT 7
11568: PUSH
11569: LD_INT 27
11571: PUSH
11572: LD_INT 29
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: IN
11587: PUSH
11588: LD_VAR 0 1
11592: PPUSH
11593: LD_INT 52
11595: PPUSH
11596: CALL_OW 321
11600: PUSH
11601: LD_INT 2
11603: EQUAL
11604: AND
11605: IFFALSE 11622
// bpoints := bpoints * 1.2 ;
11607: LD_ADDR_VAR 0 10
11611: PUSH
11612: LD_VAR 0 10
11616: PUSH
11617: LD_REAL  1.20000000000000E+0000
11620: MUL
11621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11622: LD_VAR 0 6
11626: PPUSH
11627: CALL_OW 264
11631: PUSH
11632: LD_INT 6
11634: PUSH
11635: LD_INT 46
11637: PUSH
11638: LD_INT 47
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: LIST
11645: IN
11646: IFFALSE 11663
// bpoints := bpoints * 1.2 ;
11648: LD_ADDR_VAR 0 10
11652: PUSH
11653: LD_VAR 0 10
11657: PUSH
11658: LD_REAL  1.20000000000000E+0000
11661: MUL
11662: ST_TO_ADDR
// end ; unit_building :
11663: GO 11677
11665: LD_INT 3
11667: DOUBLE
11668: EQUAL
11669: IFTRUE 11673
11671: GO 11676
11673: POP
// ; end ;
11674: GO 11677
11676: POP
// for j = 1 to 3 do
11677: LD_ADDR_VAR 0 7
11681: PUSH
11682: DOUBLE
11683: LD_INT 1
11685: DEC
11686: ST_TO_ADDR
11687: LD_INT 3
11689: PUSH
11690: FOR_TO
11691: IFFALSE 11744
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11693: LD_ADDR_VAR 0 5
11697: PUSH
11698: LD_VAR 0 5
11702: PPUSH
11703: LD_VAR 0 7
11707: PPUSH
11708: LD_VAR 0 5
11712: PUSH
11713: LD_VAR 0 7
11717: ARRAY
11718: PUSH
11719: LD_VAR 0 9
11723: PUSH
11724: LD_VAR 0 7
11728: ARRAY
11729: PUSH
11730: LD_VAR 0 10
11734: MUL
11735: PLUS
11736: PPUSH
11737: CALL_OW 1
11741: ST_TO_ADDR
11742: GO 11690
11744: POP
11745: POP
// end ;
11746: GO 10229
11748: POP
11749: POP
// result := Replace ( result , 4 , tmp ) ;
11750: LD_ADDR_VAR 0 5
11754: PUSH
11755: LD_VAR 0 5
11759: PPUSH
11760: LD_INT 4
11762: PPUSH
11763: LD_VAR 0 8
11767: PPUSH
11768: CALL_OW 1
11772: ST_TO_ADDR
// end ;
11773: LD_VAR 0 5
11777: RET
// export function DangerAtRange ( unit , range ) ; begin
11778: LD_INT 0
11780: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11781: LD_ADDR_VAR 0 3
11785: PUSH
11786: LD_VAR 0 1
11790: PPUSH
11791: CALL_OW 255
11795: PPUSH
11796: LD_VAR 0 1
11800: PPUSH
11801: CALL_OW 250
11805: PPUSH
11806: LD_VAR 0 1
11810: PPUSH
11811: CALL_OW 251
11815: PPUSH
11816: LD_VAR 0 2
11820: PPUSH
11821: CALL 10081 0 4
11825: ST_TO_ADDR
// end ;
11826: LD_VAR 0 3
11830: RET
// export function DangerInArea ( side , area ) ; begin
11831: LD_INT 0
11833: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11834: LD_ADDR_VAR 0 3
11838: PUSH
11839: LD_VAR 0 2
11843: PPUSH
11844: LD_INT 81
11846: PUSH
11847: LD_VAR 0 1
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PPUSH
11856: CALL_OW 70
11860: ST_TO_ADDR
// end ;
11861: LD_VAR 0 3
11865: RET
// export function IsExtension ( b ) ; begin
11866: LD_INT 0
11868: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11869: LD_ADDR_VAR 0 2
11873: PUSH
11874: LD_VAR 0 1
11878: PUSH
11879: LD_INT 23
11881: PUSH
11882: LD_INT 20
11884: PUSH
11885: LD_INT 22
11887: PUSH
11888: LD_INT 17
11890: PUSH
11891: LD_INT 24
11893: PUSH
11894: LD_INT 21
11896: PUSH
11897: LD_INT 19
11899: PUSH
11900: LD_INT 16
11902: PUSH
11903: LD_INT 25
11905: PUSH
11906: LD_INT 18
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: IN
11921: ST_TO_ADDR
// end ;
11922: LD_VAR 0 2
11926: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11927: LD_INT 0
11929: PPUSH
11930: PPUSH
11931: PPUSH
// result := [ ] ;
11932: LD_ADDR_VAR 0 4
11936: PUSH
11937: EMPTY
11938: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11939: LD_ADDR_VAR 0 5
11943: PUSH
11944: LD_VAR 0 2
11948: PPUSH
11949: LD_INT 21
11951: PUSH
11952: LD_INT 3
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PPUSH
11959: CALL_OW 70
11963: ST_TO_ADDR
// if not tmp then
11964: LD_VAR 0 5
11968: NOT
11969: IFFALSE 11973
// exit ;
11971: GO 12037
// if checkLink then
11973: LD_VAR 0 3
11977: IFFALSE 12027
// begin for i in tmp do
11979: LD_ADDR_VAR 0 6
11983: PUSH
11984: LD_VAR 0 5
11988: PUSH
11989: FOR_IN
11990: IFFALSE 12025
// if GetBase ( i ) <> base then
11992: LD_VAR 0 6
11996: PPUSH
11997: CALL_OW 274
12001: PUSH
12002: LD_VAR 0 1
12006: NONEQUAL
12007: IFFALSE 12023
// ComLinkToBase ( base , i ) ;
12009: LD_VAR 0 1
12013: PPUSH
12014: LD_VAR 0 6
12018: PPUSH
12019: CALL_OW 169
12023: GO 11989
12025: POP
12026: POP
// end ; result := tmp ;
12027: LD_ADDR_VAR 0 4
12031: PUSH
12032: LD_VAR 0 5
12036: ST_TO_ADDR
// end ;
12037: LD_VAR 0 4
12041: RET
// export function ComComplete ( units , b ) ; var i ; begin
12042: LD_INT 0
12044: PPUSH
12045: PPUSH
// if not units then
12046: LD_VAR 0 1
12050: NOT
12051: IFFALSE 12055
// exit ;
12053: GO 12145
// for i in units do
12055: LD_ADDR_VAR 0 4
12059: PUSH
12060: LD_VAR 0 1
12064: PUSH
12065: FOR_IN
12066: IFFALSE 12143
// if BuildingStatus ( b ) = bs_build then
12068: LD_VAR 0 2
12072: PPUSH
12073: CALL_OW 461
12077: PUSH
12078: LD_INT 1
12080: EQUAL
12081: IFFALSE 12141
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12083: LD_VAR 0 4
12087: PPUSH
12088: LD_STRING h
12090: PUSH
12091: LD_VAR 0 2
12095: PPUSH
12096: CALL_OW 250
12100: PUSH
12101: LD_VAR 0 2
12105: PPUSH
12106: CALL_OW 251
12110: PUSH
12111: LD_VAR 0 2
12115: PUSH
12116: LD_INT 0
12118: PUSH
12119: LD_INT 0
12121: PUSH
12122: LD_INT 0
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: PUSH
12134: EMPTY
12135: LIST
12136: PPUSH
12137: CALL_OW 446
12141: GO 12065
12143: POP
12144: POP
// end ;
12145: LD_VAR 0 3
12149: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12150: LD_INT 0
12152: PPUSH
12153: PPUSH
12154: PPUSH
12155: PPUSH
12156: PPUSH
12157: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
12158: LD_VAR 0 1
12162: NOT
12163: PUSH
12164: LD_VAR 0 1
12168: PPUSH
12169: CALL_OW 263
12173: PUSH
12174: LD_INT 2
12176: EQUAL
12177: NOT
12178: OR
12179: IFFALSE 12183
// exit ;
12181: GO 12499
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12183: LD_ADDR_VAR 0 6
12187: PUSH
12188: LD_INT 22
12190: PUSH
12191: LD_VAR 0 1
12195: PPUSH
12196: CALL_OW 255
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 2
12207: PUSH
12208: LD_INT 30
12210: PUSH
12211: LD_INT 36
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 34
12220: PUSH
12221: LD_INT 31
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: LIST
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PPUSH
12237: CALL_OW 69
12241: ST_TO_ADDR
// if not tmp then
12242: LD_VAR 0 6
12246: NOT
12247: IFFALSE 12251
// exit ;
12249: GO 12499
// result := [ ] ;
12251: LD_ADDR_VAR 0 2
12255: PUSH
12256: EMPTY
12257: ST_TO_ADDR
// for i in tmp do
12258: LD_ADDR_VAR 0 3
12262: PUSH
12263: LD_VAR 0 6
12267: PUSH
12268: FOR_IN
12269: IFFALSE 12340
// begin t := UnitsInside ( i ) ;
12271: LD_ADDR_VAR 0 4
12275: PUSH
12276: LD_VAR 0 3
12280: PPUSH
12281: CALL_OW 313
12285: ST_TO_ADDR
// if t then
12286: LD_VAR 0 4
12290: IFFALSE 12338
// for j in t do
12292: LD_ADDR_VAR 0 7
12296: PUSH
12297: LD_VAR 0 4
12301: PUSH
12302: FOR_IN
12303: IFFALSE 12336
// result := Insert ( result , result + 1 , j ) ;
12305: LD_ADDR_VAR 0 2
12309: PUSH
12310: LD_VAR 0 2
12314: PPUSH
12315: LD_VAR 0 2
12319: PUSH
12320: LD_INT 1
12322: PLUS
12323: PPUSH
12324: LD_VAR 0 7
12328: PPUSH
12329: CALL_OW 2
12333: ST_TO_ADDR
12334: GO 12302
12336: POP
12337: POP
// end ;
12338: GO 12268
12340: POP
12341: POP
// if not result then
12342: LD_VAR 0 2
12346: NOT
12347: IFFALSE 12351
// exit ;
12349: GO 12499
// mech := result [ 1 ] ;
12351: LD_ADDR_VAR 0 5
12355: PUSH
12356: LD_VAR 0 2
12360: PUSH
12361: LD_INT 1
12363: ARRAY
12364: ST_TO_ADDR
// if result > 1 then
12365: LD_VAR 0 2
12369: PUSH
12370: LD_INT 1
12372: GREATER
12373: IFFALSE 12485
// for i = 2 to result do
12375: LD_ADDR_VAR 0 3
12379: PUSH
12380: DOUBLE
12381: LD_INT 2
12383: DEC
12384: ST_TO_ADDR
12385: LD_VAR 0 2
12389: PUSH
12390: FOR_TO
12391: IFFALSE 12483
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12393: LD_ADDR_VAR 0 4
12397: PUSH
12398: LD_VAR 0 2
12402: PUSH
12403: LD_VAR 0 3
12407: ARRAY
12408: PPUSH
12409: LD_INT 3
12411: PPUSH
12412: CALL_OW 259
12416: PUSH
12417: LD_VAR 0 2
12421: PUSH
12422: LD_VAR 0 3
12426: ARRAY
12427: PPUSH
12428: CALL_OW 432
12432: MINUS
12433: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12434: LD_VAR 0 4
12438: PUSH
12439: LD_VAR 0 5
12443: PPUSH
12444: LD_INT 3
12446: PPUSH
12447: CALL_OW 259
12451: PUSH
12452: LD_VAR 0 5
12456: PPUSH
12457: CALL_OW 432
12461: MINUS
12462: GREATEREQUAL
12463: IFFALSE 12481
// mech := result [ i ] ;
12465: LD_ADDR_VAR 0 5
12469: PUSH
12470: LD_VAR 0 2
12474: PUSH
12475: LD_VAR 0 3
12479: ARRAY
12480: ST_TO_ADDR
// end ;
12481: GO 12390
12483: POP
12484: POP
// ComLinkTo ( vehicle , mech ) ;
12485: LD_VAR 0 1
12489: PPUSH
12490: LD_VAR 0 5
12494: PPUSH
12495: CALL_OW 135
// end ;
12499: LD_VAR 0 2
12503: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12504: LD_INT 0
12506: PPUSH
12507: PPUSH
12508: PPUSH
12509: PPUSH
12510: PPUSH
12511: PPUSH
12512: PPUSH
12513: PPUSH
12514: PPUSH
12515: PPUSH
12516: PPUSH
12517: PPUSH
12518: PPUSH
// result := [ ] ;
12519: LD_ADDR_VAR 0 7
12523: PUSH
12524: EMPTY
12525: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12526: LD_VAR 0 1
12530: PPUSH
12531: CALL_OW 266
12535: PUSH
12536: LD_INT 0
12538: PUSH
12539: LD_INT 1
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: IN
12546: NOT
12547: IFFALSE 12551
// exit ;
12549: GO 14185
// if name then
12551: LD_VAR 0 3
12555: IFFALSE 12571
// SetBName ( base_dep , name ) ;
12557: LD_VAR 0 1
12561: PPUSH
12562: LD_VAR 0 3
12566: PPUSH
12567: CALL_OW 500
// base := GetBase ( base_dep ) ;
12571: LD_ADDR_VAR 0 15
12575: PUSH
12576: LD_VAR 0 1
12580: PPUSH
12581: CALL_OW 274
12585: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12586: LD_ADDR_VAR 0 16
12590: PUSH
12591: LD_VAR 0 1
12595: PPUSH
12596: CALL_OW 255
12600: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12601: LD_ADDR_VAR 0 17
12605: PUSH
12606: LD_VAR 0 1
12610: PPUSH
12611: CALL_OW 248
12615: ST_TO_ADDR
// if sources then
12616: LD_VAR 0 5
12620: IFFALSE 12667
// for i = 1 to 3 do
12622: LD_ADDR_VAR 0 8
12626: PUSH
12627: DOUBLE
12628: LD_INT 1
12630: DEC
12631: ST_TO_ADDR
12632: LD_INT 3
12634: PUSH
12635: FOR_TO
12636: IFFALSE 12665
// AddResourceType ( base , i , sources [ i ] ) ;
12638: LD_VAR 0 15
12642: PPUSH
12643: LD_VAR 0 8
12647: PPUSH
12648: LD_VAR 0 5
12652: PUSH
12653: LD_VAR 0 8
12657: ARRAY
12658: PPUSH
12659: CALL_OW 276
12663: GO 12635
12665: POP
12666: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12667: LD_ADDR_VAR 0 18
12671: PUSH
12672: LD_VAR 0 15
12676: PPUSH
12677: LD_VAR 0 2
12681: PPUSH
12682: LD_INT 1
12684: PPUSH
12685: CALL 11927 0 3
12689: ST_TO_ADDR
// InitHc ;
12690: CALL_OW 19
// InitUc ;
12694: CALL_OW 18
// uc_side := side ;
12698: LD_ADDR_OWVAR 20
12702: PUSH
12703: LD_VAR 0 16
12707: ST_TO_ADDR
// uc_nation := nation ;
12708: LD_ADDR_OWVAR 21
12712: PUSH
12713: LD_VAR 0 17
12717: ST_TO_ADDR
// if buildings then
12718: LD_VAR 0 18
12722: IFFALSE 14044
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12724: LD_ADDR_VAR 0 19
12728: PUSH
12729: LD_VAR 0 18
12733: PPUSH
12734: LD_INT 2
12736: PUSH
12737: LD_INT 30
12739: PUSH
12740: LD_INT 29
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: LD_INT 30
12749: PUSH
12750: LD_INT 30
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: LIST
12761: PPUSH
12762: CALL_OW 72
12766: ST_TO_ADDR
// if tmp then
12767: LD_VAR 0 19
12771: IFFALSE 12819
// for i in tmp do
12773: LD_ADDR_VAR 0 8
12777: PUSH
12778: LD_VAR 0 19
12782: PUSH
12783: FOR_IN
12784: IFFALSE 12817
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12786: LD_VAR 0 8
12790: PPUSH
12791: CALL_OW 250
12795: PPUSH
12796: LD_VAR 0 8
12800: PPUSH
12801: CALL_OW 251
12805: PPUSH
12806: LD_VAR 0 16
12810: PPUSH
12811: CALL_OW 441
12815: GO 12783
12817: POP
12818: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12819: LD_VAR 0 18
12823: PPUSH
12824: LD_INT 2
12826: PUSH
12827: LD_INT 30
12829: PUSH
12830: LD_INT 32
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PUSH
12837: LD_INT 30
12839: PUSH
12840: LD_INT 33
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: LIST
12851: PPUSH
12852: CALL_OW 72
12856: IFFALSE 12944
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12858: LD_ADDR_VAR 0 8
12862: PUSH
12863: LD_VAR 0 18
12867: PPUSH
12868: LD_INT 2
12870: PUSH
12871: LD_INT 30
12873: PUSH
12874: LD_INT 32
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 30
12883: PUSH
12884: LD_INT 33
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: LIST
12895: PPUSH
12896: CALL_OW 72
12900: PUSH
12901: FOR_IN
12902: IFFALSE 12942
// begin if not GetBWeapon ( i ) then
12904: LD_VAR 0 8
12908: PPUSH
12909: CALL_OW 269
12913: NOT
12914: IFFALSE 12940
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12916: LD_VAR 0 8
12920: PPUSH
12921: LD_VAR 0 8
12925: PPUSH
12926: LD_VAR 0 2
12930: PPUSH
12931: CALL 14190 0 2
12935: PPUSH
12936: CALL_OW 431
// end ;
12940: GO 12901
12942: POP
12943: POP
// end ; for i = 1 to personel do
12944: LD_ADDR_VAR 0 8
12948: PUSH
12949: DOUBLE
12950: LD_INT 1
12952: DEC
12953: ST_TO_ADDR
12954: LD_VAR 0 6
12958: PUSH
12959: FOR_TO
12960: IFFALSE 14024
// begin if i > 4 then
12962: LD_VAR 0 8
12966: PUSH
12967: LD_INT 4
12969: GREATER
12970: IFFALSE 12974
// break ;
12972: GO 14024
// case i of 1 :
12974: LD_VAR 0 8
12978: PUSH
12979: LD_INT 1
12981: DOUBLE
12982: EQUAL
12983: IFTRUE 12987
12985: GO 13067
12987: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12988: LD_ADDR_VAR 0 12
12992: PUSH
12993: LD_VAR 0 18
12997: PPUSH
12998: LD_INT 22
13000: PUSH
13001: LD_VAR 0 16
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 58
13012: PUSH
13013: EMPTY
13014: LIST
13015: PUSH
13016: LD_INT 2
13018: PUSH
13019: LD_INT 30
13021: PUSH
13022: LD_INT 32
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: LD_INT 30
13031: PUSH
13032: LD_INT 4
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PUSH
13039: LD_INT 30
13041: PUSH
13042: LD_INT 5
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: LIST
13059: PPUSH
13060: CALL_OW 72
13064: ST_TO_ADDR
13065: GO 13289
13067: LD_INT 2
13069: DOUBLE
13070: EQUAL
13071: IFTRUE 13075
13073: GO 13137
13075: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13076: LD_ADDR_VAR 0 12
13080: PUSH
13081: LD_VAR 0 18
13085: PPUSH
13086: LD_INT 22
13088: PUSH
13089: LD_VAR 0 16
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: PUSH
13098: LD_INT 2
13100: PUSH
13101: LD_INT 30
13103: PUSH
13104: LD_INT 0
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: PUSH
13111: LD_INT 30
13113: PUSH
13114: LD_INT 1
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: LIST
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PPUSH
13130: CALL_OW 72
13134: ST_TO_ADDR
13135: GO 13289
13137: LD_INT 3
13139: DOUBLE
13140: EQUAL
13141: IFTRUE 13145
13143: GO 13207
13145: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13146: LD_ADDR_VAR 0 12
13150: PUSH
13151: LD_VAR 0 18
13155: PPUSH
13156: LD_INT 22
13158: PUSH
13159: LD_VAR 0 16
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 2
13170: PUSH
13171: LD_INT 30
13173: PUSH
13174: LD_INT 2
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: PUSH
13181: LD_INT 30
13183: PUSH
13184: LD_INT 3
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PPUSH
13200: CALL_OW 72
13204: ST_TO_ADDR
13205: GO 13289
13207: LD_INT 4
13209: DOUBLE
13210: EQUAL
13211: IFTRUE 13215
13213: GO 13288
13215: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13216: LD_ADDR_VAR 0 12
13220: PUSH
13221: LD_VAR 0 18
13225: PPUSH
13226: LD_INT 22
13228: PUSH
13229: LD_VAR 0 16
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: LD_INT 2
13240: PUSH
13241: LD_INT 30
13243: PUSH
13244: LD_INT 6
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 30
13253: PUSH
13254: LD_INT 7
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: LD_INT 30
13263: PUSH
13264: LD_INT 8
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PPUSH
13281: CALL_OW 72
13285: ST_TO_ADDR
13286: GO 13289
13288: POP
// if i = 1 then
13289: LD_VAR 0 8
13293: PUSH
13294: LD_INT 1
13296: EQUAL
13297: IFFALSE 13408
// begin tmp := [ ] ;
13299: LD_ADDR_VAR 0 19
13303: PUSH
13304: EMPTY
13305: ST_TO_ADDR
// for j in f do
13306: LD_ADDR_VAR 0 9
13310: PUSH
13311: LD_VAR 0 12
13315: PUSH
13316: FOR_IN
13317: IFFALSE 13390
// if GetBType ( j ) = b_bunker then
13319: LD_VAR 0 9
13323: PPUSH
13324: CALL_OW 266
13328: PUSH
13329: LD_INT 32
13331: EQUAL
13332: IFFALSE 13359
// tmp := Insert ( tmp , 1 , j ) else
13334: LD_ADDR_VAR 0 19
13338: PUSH
13339: LD_VAR 0 19
13343: PPUSH
13344: LD_INT 1
13346: PPUSH
13347: LD_VAR 0 9
13351: PPUSH
13352: CALL_OW 2
13356: ST_TO_ADDR
13357: GO 13388
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13359: LD_ADDR_VAR 0 19
13363: PUSH
13364: LD_VAR 0 19
13368: PPUSH
13369: LD_VAR 0 19
13373: PUSH
13374: LD_INT 1
13376: PLUS
13377: PPUSH
13378: LD_VAR 0 9
13382: PPUSH
13383: CALL_OW 2
13387: ST_TO_ADDR
13388: GO 13316
13390: POP
13391: POP
// if tmp then
13392: LD_VAR 0 19
13396: IFFALSE 13408
// f := tmp ;
13398: LD_ADDR_VAR 0 12
13402: PUSH
13403: LD_VAR 0 19
13407: ST_TO_ADDR
// end ; x := personel [ i ] ;
13408: LD_ADDR_VAR 0 13
13412: PUSH
13413: LD_VAR 0 6
13417: PUSH
13418: LD_VAR 0 8
13422: ARRAY
13423: ST_TO_ADDR
// if x = - 1 then
13424: LD_VAR 0 13
13428: PUSH
13429: LD_INT 1
13431: NEG
13432: EQUAL
13433: IFFALSE 13642
// begin for j in f do
13435: LD_ADDR_VAR 0 9
13439: PUSH
13440: LD_VAR 0 12
13444: PUSH
13445: FOR_IN
13446: IFFALSE 13638
// repeat InitHc ;
13448: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13452: LD_VAR 0 9
13456: PPUSH
13457: CALL_OW 266
13461: PUSH
13462: LD_INT 5
13464: EQUAL
13465: IFFALSE 13535
// begin if UnitsInside ( j ) < 3 then
13467: LD_VAR 0 9
13471: PPUSH
13472: CALL_OW 313
13476: PUSH
13477: LD_INT 3
13479: LESS
13480: IFFALSE 13516
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13482: LD_INT 0
13484: PPUSH
13485: LD_INT 5
13487: PUSH
13488: LD_INT 8
13490: PUSH
13491: LD_INT 9
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: LIST
13498: PUSH
13499: LD_VAR 0 17
13503: ARRAY
13504: PPUSH
13505: LD_VAR 0 4
13509: PPUSH
13510: CALL_OW 380
13514: GO 13533
// PrepareHuman ( false , i , skill ) ;
13516: LD_INT 0
13518: PPUSH
13519: LD_VAR 0 8
13523: PPUSH
13524: LD_VAR 0 4
13528: PPUSH
13529: CALL_OW 380
// end else
13533: GO 13552
// PrepareHuman ( false , i , skill ) ;
13535: LD_INT 0
13537: PPUSH
13538: LD_VAR 0 8
13542: PPUSH
13543: LD_VAR 0 4
13547: PPUSH
13548: CALL_OW 380
// un := CreateHuman ;
13552: LD_ADDR_VAR 0 14
13556: PUSH
13557: CALL_OW 44
13561: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13562: LD_ADDR_VAR 0 7
13566: PUSH
13567: LD_VAR 0 7
13571: PPUSH
13572: LD_INT 1
13574: PPUSH
13575: LD_VAR 0 14
13579: PPUSH
13580: CALL_OW 2
13584: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13585: LD_VAR 0 14
13589: PPUSH
13590: LD_VAR 0 9
13594: PPUSH
13595: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13599: LD_VAR 0 9
13603: PPUSH
13604: CALL_OW 313
13608: PUSH
13609: LD_INT 6
13611: EQUAL
13612: PUSH
13613: LD_VAR 0 9
13617: PPUSH
13618: CALL_OW 266
13622: PUSH
13623: LD_INT 32
13625: PUSH
13626: LD_INT 31
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: IN
13633: OR
13634: IFFALSE 13448
13636: GO 13445
13638: POP
13639: POP
// end else
13640: GO 14022
// for j = 1 to x do
13642: LD_ADDR_VAR 0 9
13646: PUSH
13647: DOUBLE
13648: LD_INT 1
13650: DEC
13651: ST_TO_ADDR
13652: LD_VAR 0 13
13656: PUSH
13657: FOR_TO
13658: IFFALSE 14020
// begin InitHc ;
13660: CALL_OW 19
// if not f then
13664: LD_VAR 0 12
13668: NOT
13669: IFFALSE 13758
// begin PrepareHuman ( false , i , skill ) ;
13671: LD_INT 0
13673: PPUSH
13674: LD_VAR 0 8
13678: PPUSH
13679: LD_VAR 0 4
13683: PPUSH
13684: CALL_OW 380
// un := CreateHuman ;
13688: LD_ADDR_VAR 0 14
13692: PUSH
13693: CALL_OW 44
13697: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13698: LD_ADDR_VAR 0 7
13702: PUSH
13703: LD_VAR 0 7
13707: PPUSH
13708: LD_INT 1
13710: PPUSH
13711: LD_VAR 0 14
13715: PPUSH
13716: CALL_OW 2
13720: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13721: LD_VAR 0 14
13725: PPUSH
13726: LD_VAR 0 1
13730: PPUSH
13731: CALL_OW 250
13735: PPUSH
13736: LD_VAR 0 1
13740: PPUSH
13741: CALL_OW 251
13745: PPUSH
13746: LD_INT 10
13748: PPUSH
13749: LD_INT 0
13751: PPUSH
13752: CALL_OW 50
// continue ;
13756: GO 13657
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13758: LD_VAR 0 12
13762: PUSH
13763: LD_INT 1
13765: ARRAY
13766: PPUSH
13767: CALL_OW 313
13771: PUSH
13772: LD_VAR 0 12
13776: PUSH
13777: LD_INT 1
13779: ARRAY
13780: PPUSH
13781: CALL_OW 266
13785: PUSH
13786: LD_INT 32
13788: PUSH
13789: LD_INT 31
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: IN
13796: AND
13797: PUSH
13798: LD_VAR 0 12
13802: PUSH
13803: LD_INT 1
13805: ARRAY
13806: PPUSH
13807: CALL_OW 313
13811: PUSH
13812: LD_INT 6
13814: EQUAL
13815: OR
13816: IFFALSE 13836
// f := Delete ( f , 1 ) ;
13818: LD_ADDR_VAR 0 12
13822: PUSH
13823: LD_VAR 0 12
13827: PPUSH
13828: LD_INT 1
13830: PPUSH
13831: CALL_OW 3
13835: ST_TO_ADDR
// if not f then
13836: LD_VAR 0 12
13840: NOT
13841: IFFALSE 13859
// begin x := x + 2 ;
13843: LD_ADDR_VAR 0 13
13847: PUSH
13848: LD_VAR 0 13
13852: PUSH
13853: LD_INT 2
13855: PLUS
13856: ST_TO_ADDR
// continue ;
13857: GO 13657
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13859: LD_VAR 0 12
13863: PUSH
13864: LD_INT 1
13866: ARRAY
13867: PPUSH
13868: CALL_OW 266
13872: PUSH
13873: LD_INT 5
13875: EQUAL
13876: IFFALSE 13950
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13878: LD_VAR 0 12
13882: PUSH
13883: LD_INT 1
13885: ARRAY
13886: PPUSH
13887: CALL_OW 313
13891: PUSH
13892: LD_INT 3
13894: LESS
13895: IFFALSE 13931
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13897: LD_INT 0
13899: PPUSH
13900: LD_INT 5
13902: PUSH
13903: LD_INT 8
13905: PUSH
13906: LD_INT 9
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: LIST
13913: PUSH
13914: LD_VAR 0 17
13918: ARRAY
13919: PPUSH
13920: LD_VAR 0 4
13924: PPUSH
13925: CALL_OW 380
13929: GO 13948
// PrepareHuman ( false , i , skill ) ;
13931: LD_INT 0
13933: PPUSH
13934: LD_VAR 0 8
13938: PPUSH
13939: LD_VAR 0 4
13943: PPUSH
13944: CALL_OW 380
// end else
13948: GO 13967
// PrepareHuman ( false , i , skill ) ;
13950: LD_INT 0
13952: PPUSH
13953: LD_VAR 0 8
13957: PPUSH
13958: LD_VAR 0 4
13962: PPUSH
13963: CALL_OW 380
// un := CreateHuman ;
13967: LD_ADDR_VAR 0 14
13971: PUSH
13972: CALL_OW 44
13976: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13977: LD_ADDR_VAR 0 7
13981: PUSH
13982: LD_VAR 0 7
13986: PPUSH
13987: LD_INT 1
13989: PPUSH
13990: LD_VAR 0 14
13994: PPUSH
13995: CALL_OW 2
13999: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14000: LD_VAR 0 14
14004: PPUSH
14005: LD_VAR 0 12
14009: PUSH
14010: LD_INT 1
14012: ARRAY
14013: PPUSH
14014: CALL_OW 52
// end ;
14018: GO 13657
14020: POP
14021: POP
// end ;
14022: GO 12959
14024: POP
14025: POP
// result := result ^ buildings ;
14026: LD_ADDR_VAR 0 7
14030: PUSH
14031: LD_VAR 0 7
14035: PUSH
14036: LD_VAR 0 18
14040: ADD
14041: ST_TO_ADDR
// end else
14042: GO 14185
// begin for i = 1 to personel do
14044: LD_ADDR_VAR 0 8
14048: PUSH
14049: DOUBLE
14050: LD_INT 1
14052: DEC
14053: ST_TO_ADDR
14054: LD_VAR 0 6
14058: PUSH
14059: FOR_TO
14060: IFFALSE 14183
// begin if i > 4 then
14062: LD_VAR 0 8
14066: PUSH
14067: LD_INT 4
14069: GREATER
14070: IFFALSE 14074
// break ;
14072: GO 14183
// x := personel [ i ] ;
14074: LD_ADDR_VAR 0 13
14078: PUSH
14079: LD_VAR 0 6
14083: PUSH
14084: LD_VAR 0 8
14088: ARRAY
14089: ST_TO_ADDR
// if x = - 1 then
14090: LD_VAR 0 13
14094: PUSH
14095: LD_INT 1
14097: NEG
14098: EQUAL
14099: IFFALSE 14103
// continue ;
14101: GO 14059
// PrepareHuman ( false , i , skill ) ;
14103: LD_INT 0
14105: PPUSH
14106: LD_VAR 0 8
14110: PPUSH
14111: LD_VAR 0 4
14115: PPUSH
14116: CALL_OW 380
// un := CreateHuman ;
14120: LD_ADDR_VAR 0 14
14124: PUSH
14125: CALL_OW 44
14129: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14130: LD_VAR 0 14
14134: PPUSH
14135: LD_VAR 0 1
14139: PPUSH
14140: CALL_OW 250
14144: PPUSH
14145: LD_VAR 0 1
14149: PPUSH
14150: CALL_OW 251
14154: PPUSH
14155: LD_INT 10
14157: PPUSH
14158: LD_INT 0
14160: PPUSH
14161: CALL_OW 50
// result := result ^ un ;
14165: LD_ADDR_VAR 0 7
14169: PUSH
14170: LD_VAR 0 7
14174: PUSH
14175: LD_VAR 0 14
14179: ADD
14180: ST_TO_ADDR
// end ;
14181: GO 14059
14183: POP
14184: POP
// end ; end ;
14185: LD_VAR 0 7
14189: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14190: LD_INT 0
14192: PPUSH
14193: PPUSH
14194: PPUSH
14195: PPUSH
14196: PPUSH
14197: PPUSH
14198: PPUSH
14199: PPUSH
14200: PPUSH
14201: PPUSH
14202: PPUSH
14203: PPUSH
14204: PPUSH
14205: PPUSH
14206: PPUSH
14207: PPUSH
// result := false ;
14208: LD_ADDR_VAR 0 3
14212: PUSH
14213: LD_INT 0
14215: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14216: LD_VAR 0 1
14220: NOT
14221: PUSH
14222: LD_VAR 0 1
14226: PPUSH
14227: CALL_OW 266
14231: PUSH
14232: LD_INT 32
14234: PUSH
14235: LD_INT 33
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: IN
14242: NOT
14243: OR
14244: IFFALSE 14248
// exit ;
14246: GO 15387
// nat := GetNation ( tower ) ;
14248: LD_ADDR_VAR 0 12
14252: PUSH
14253: LD_VAR 0 1
14257: PPUSH
14258: CALL_OW 248
14262: ST_TO_ADDR
// side := GetSide ( tower ) ;
14263: LD_ADDR_VAR 0 16
14267: PUSH
14268: LD_VAR 0 1
14272: PPUSH
14273: CALL_OW 255
14277: ST_TO_ADDR
// x := GetX ( tower ) ;
14278: LD_ADDR_VAR 0 10
14282: PUSH
14283: LD_VAR 0 1
14287: PPUSH
14288: CALL_OW 250
14292: ST_TO_ADDR
// y := GetY ( tower ) ;
14293: LD_ADDR_VAR 0 11
14297: PUSH
14298: LD_VAR 0 1
14302: PPUSH
14303: CALL_OW 251
14307: ST_TO_ADDR
// if not x or not y then
14308: LD_VAR 0 10
14312: NOT
14313: PUSH
14314: LD_VAR 0 11
14318: NOT
14319: OR
14320: IFFALSE 14324
// exit ;
14322: GO 15387
// weapon := 0 ;
14324: LD_ADDR_VAR 0 18
14328: PUSH
14329: LD_INT 0
14331: ST_TO_ADDR
// fac_list := [ ] ;
14332: LD_ADDR_VAR 0 17
14336: PUSH
14337: EMPTY
14338: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14339: LD_ADDR_VAR 0 6
14343: PUSH
14344: LD_VAR 0 1
14348: PPUSH
14349: CALL_OW 274
14353: PPUSH
14354: LD_VAR 0 2
14358: PPUSH
14359: LD_INT 0
14361: PPUSH
14362: CALL 11927 0 3
14366: PPUSH
14367: LD_INT 30
14369: PUSH
14370: LD_INT 3
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PPUSH
14377: CALL_OW 72
14381: ST_TO_ADDR
// if not factories then
14382: LD_VAR 0 6
14386: NOT
14387: IFFALSE 14391
// exit ;
14389: GO 15387
// for i in factories do
14391: LD_ADDR_VAR 0 8
14395: PUSH
14396: LD_VAR 0 6
14400: PUSH
14401: FOR_IN
14402: IFFALSE 14427
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14404: LD_ADDR_VAR 0 17
14408: PUSH
14409: LD_VAR 0 17
14413: PUSH
14414: LD_VAR 0 8
14418: PPUSH
14419: CALL_OW 478
14423: UNION
14424: ST_TO_ADDR
14425: GO 14401
14427: POP
14428: POP
// if not fac_list then
14429: LD_VAR 0 17
14433: NOT
14434: IFFALSE 14438
// exit ;
14436: GO 15387
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14438: LD_ADDR_VAR 0 5
14442: PUSH
14443: LD_INT 4
14445: PUSH
14446: LD_INT 5
14448: PUSH
14449: LD_INT 9
14451: PUSH
14452: LD_INT 10
14454: PUSH
14455: LD_INT 6
14457: PUSH
14458: LD_INT 7
14460: PUSH
14461: LD_INT 11
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: PUSH
14473: LD_INT 27
14475: PUSH
14476: LD_INT 28
14478: PUSH
14479: LD_INT 26
14481: PUSH
14482: LD_INT 30
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 43
14493: PUSH
14494: LD_INT 44
14496: PUSH
14497: LD_INT 46
14499: PUSH
14500: LD_INT 45
14502: PUSH
14503: LD_INT 47
14505: PUSH
14506: LD_INT 49
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: LIST
14521: PUSH
14522: LD_VAR 0 12
14526: ARRAY
14527: ST_TO_ADDR
// for i in list do
14528: LD_ADDR_VAR 0 8
14532: PUSH
14533: LD_VAR 0 5
14537: PUSH
14538: FOR_IN
14539: IFFALSE 14572
// if not i in fac_list then
14541: LD_VAR 0 8
14545: PUSH
14546: LD_VAR 0 17
14550: IN
14551: NOT
14552: IFFALSE 14570
// list := list diff i ;
14554: LD_ADDR_VAR 0 5
14558: PUSH
14559: LD_VAR 0 5
14563: PUSH
14564: LD_VAR 0 8
14568: DIFF
14569: ST_TO_ADDR
14570: GO 14538
14572: POP
14573: POP
// if not list then
14574: LD_VAR 0 5
14578: NOT
14579: IFFALSE 14583
// exit ;
14581: GO 15387
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14583: LD_VAR 0 12
14587: PUSH
14588: LD_INT 3
14590: EQUAL
14591: PUSH
14592: LD_INT 49
14594: PUSH
14595: LD_VAR 0 5
14599: IN
14600: AND
14601: PUSH
14602: LD_INT 31
14604: PPUSH
14605: LD_VAR 0 16
14609: PPUSH
14610: CALL_OW 321
14614: PUSH
14615: LD_INT 2
14617: EQUAL
14618: AND
14619: IFFALSE 14679
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14621: LD_INT 22
14623: PUSH
14624: LD_VAR 0 16
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PUSH
14633: LD_INT 35
14635: PUSH
14636: LD_INT 49
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: LD_INT 91
14645: PUSH
14646: LD_VAR 0 1
14650: PUSH
14651: LD_INT 10
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: LIST
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: LIST
14663: PPUSH
14664: CALL_OW 69
14668: NOT
14669: IFFALSE 14679
// weapon := ru_time_lapser ;
14671: LD_ADDR_VAR 0 18
14675: PUSH
14676: LD_INT 49
14678: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14679: LD_VAR 0 12
14683: PUSH
14684: LD_INT 1
14686: PUSH
14687: LD_INT 2
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: IN
14694: PUSH
14695: LD_INT 11
14697: PUSH
14698: LD_VAR 0 5
14702: IN
14703: PUSH
14704: LD_INT 30
14706: PUSH
14707: LD_VAR 0 5
14711: IN
14712: OR
14713: AND
14714: PUSH
14715: LD_INT 6
14717: PPUSH
14718: LD_VAR 0 16
14722: PPUSH
14723: CALL_OW 321
14727: PUSH
14728: LD_INT 2
14730: EQUAL
14731: AND
14732: IFFALSE 14897
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14734: LD_INT 22
14736: PUSH
14737: LD_VAR 0 16
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PUSH
14746: LD_INT 2
14748: PUSH
14749: LD_INT 35
14751: PUSH
14752: LD_INT 11
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 35
14761: PUSH
14762: LD_INT 30
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 91
14776: PUSH
14777: LD_VAR 0 1
14781: PUSH
14782: LD_INT 18
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: LIST
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: LIST
14794: PPUSH
14795: CALL_OW 69
14799: NOT
14800: PUSH
14801: LD_INT 22
14803: PUSH
14804: LD_VAR 0 16
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 2
14815: PUSH
14816: LD_INT 30
14818: PUSH
14819: LD_INT 32
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: LD_INT 30
14828: PUSH
14829: LD_INT 33
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: LIST
14840: PUSH
14841: LD_INT 91
14843: PUSH
14844: LD_VAR 0 1
14848: PUSH
14849: LD_INT 12
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: LIST
14861: PUSH
14862: EMPTY
14863: LIST
14864: PPUSH
14865: CALL_OW 69
14869: PUSH
14870: LD_INT 2
14872: GREATER
14873: AND
14874: IFFALSE 14897
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14876: LD_ADDR_VAR 0 18
14880: PUSH
14881: LD_INT 11
14883: PUSH
14884: LD_INT 30
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: LD_VAR 0 12
14895: ARRAY
14896: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14897: LD_VAR 0 18
14901: NOT
14902: PUSH
14903: LD_INT 40
14905: PPUSH
14906: LD_VAR 0 16
14910: PPUSH
14911: CALL_OW 321
14915: PUSH
14916: LD_INT 2
14918: EQUAL
14919: AND
14920: PUSH
14921: LD_INT 7
14923: PUSH
14924: LD_VAR 0 5
14928: IN
14929: PUSH
14930: LD_INT 28
14932: PUSH
14933: LD_VAR 0 5
14937: IN
14938: OR
14939: PUSH
14940: LD_INT 45
14942: PUSH
14943: LD_VAR 0 5
14947: IN
14948: OR
14949: AND
14950: IFFALSE 15204
// begin hex := GetHexInfo ( x , y ) ;
14952: LD_ADDR_VAR 0 4
14956: PUSH
14957: LD_VAR 0 10
14961: PPUSH
14962: LD_VAR 0 11
14966: PPUSH
14967: CALL_OW 546
14971: ST_TO_ADDR
// if hex [ 1 ] then
14972: LD_VAR 0 4
14976: PUSH
14977: LD_INT 1
14979: ARRAY
14980: IFFALSE 14984
// exit ;
14982: GO 15387
// height := hex [ 2 ] ;
14984: LD_ADDR_VAR 0 15
14988: PUSH
14989: LD_VAR 0 4
14993: PUSH
14994: LD_INT 2
14996: ARRAY
14997: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14998: LD_ADDR_VAR 0 14
15002: PUSH
15003: LD_INT 0
15005: PUSH
15006: LD_INT 2
15008: PUSH
15009: LD_INT 3
15011: PUSH
15012: LD_INT 5
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: ST_TO_ADDR
// for i in tmp do
15021: LD_ADDR_VAR 0 8
15025: PUSH
15026: LD_VAR 0 14
15030: PUSH
15031: FOR_IN
15032: IFFALSE 15202
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15034: LD_ADDR_VAR 0 9
15038: PUSH
15039: LD_VAR 0 10
15043: PPUSH
15044: LD_VAR 0 8
15048: PPUSH
15049: LD_INT 5
15051: PPUSH
15052: CALL_OW 272
15056: PUSH
15057: LD_VAR 0 11
15061: PPUSH
15062: LD_VAR 0 8
15066: PPUSH
15067: LD_INT 5
15069: PPUSH
15070: CALL_OW 273
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15079: LD_VAR 0 9
15083: PUSH
15084: LD_INT 1
15086: ARRAY
15087: PPUSH
15088: LD_VAR 0 9
15092: PUSH
15093: LD_INT 2
15095: ARRAY
15096: PPUSH
15097: CALL_OW 488
15101: IFFALSE 15200
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15103: LD_ADDR_VAR 0 4
15107: PUSH
15108: LD_VAR 0 9
15112: PUSH
15113: LD_INT 1
15115: ARRAY
15116: PPUSH
15117: LD_VAR 0 9
15121: PUSH
15122: LD_INT 2
15124: ARRAY
15125: PPUSH
15126: CALL_OW 546
15130: ST_TO_ADDR
// if hex [ 1 ] then
15131: LD_VAR 0 4
15135: PUSH
15136: LD_INT 1
15138: ARRAY
15139: IFFALSE 15143
// continue ;
15141: GO 15031
// h := hex [ 2 ] ;
15143: LD_ADDR_VAR 0 13
15147: PUSH
15148: LD_VAR 0 4
15152: PUSH
15153: LD_INT 2
15155: ARRAY
15156: ST_TO_ADDR
// if h + 7 < height then
15157: LD_VAR 0 13
15161: PUSH
15162: LD_INT 7
15164: PLUS
15165: PUSH
15166: LD_VAR 0 15
15170: LESS
15171: IFFALSE 15200
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15173: LD_ADDR_VAR 0 18
15177: PUSH
15178: LD_INT 7
15180: PUSH
15181: LD_INT 28
15183: PUSH
15184: LD_INT 45
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: PUSH
15192: LD_VAR 0 12
15196: ARRAY
15197: ST_TO_ADDR
// break ;
15198: GO 15202
// end ; end ; end ;
15200: GO 15031
15202: POP
15203: POP
// end ; if not weapon then
15204: LD_VAR 0 18
15208: NOT
15209: IFFALSE 15269
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15211: LD_ADDR_VAR 0 5
15215: PUSH
15216: LD_VAR 0 5
15220: PUSH
15221: LD_INT 11
15223: PUSH
15224: LD_INT 30
15226: PUSH
15227: LD_INT 49
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: LIST
15234: DIFF
15235: ST_TO_ADDR
// if not list then
15236: LD_VAR 0 5
15240: NOT
15241: IFFALSE 15245
// exit ;
15243: GO 15387
// weapon := list [ rand ( 1 , list ) ] ;
15245: LD_ADDR_VAR 0 18
15249: PUSH
15250: LD_VAR 0 5
15254: PUSH
15255: LD_INT 1
15257: PPUSH
15258: LD_VAR 0 5
15262: PPUSH
15263: CALL_OW 12
15267: ARRAY
15268: ST_TO_ADDR
// end ; if weapon then
15269: LD_VAR 0 18
15273: IFFALSE 15387
// begin tmp := CostOfWeapon ( weapon ) ;
15275: LD_ADDR_VAR 0 14
15279: PUSH
15280: LD_VAR 0 18
15284: PPUSH
15285: CALL_OW 451
15289: ST_TO_ADDR
// j := GetBase ( tower ) ;
15290: LD_ADDR_VAR 0 9
15294: PUSH
15295: LD_VAR 0 1
15299: PPUSH
15300: CALL_OW 274
15304: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15305: LD_VAR 0 9
15309: PPUSH
15310: LD_INT 1
15312: PPUSH
15313: CALL_OW 275
15317: PUSH
15318: LD_VAR 0 14
15322: PUSH
15323: LD_INT 1
15325: ARRAY
15326: GREATEREQUAL
15327: PUSH
15328: LD_VAR 0 9
15332: PPUSH
15333: LD_INT 2
15335: PPUSH
15336: CALL_OW 275
15340: PUSH
15341: LD_VAR 0 14
15345: PUSH
15346: LD_INT 2
15348: ARRAY
15349: GREATEREQUAL
15350: AND
15351: PUSH
15352: LD_VAR 0 9
15356: PPUSH
15357: LD_INT 3
15359: PPUSH
15360: CALL_OW 275
15364: PUSH
15365: LD_VAR 0 14
15369: PUSH
15370: LD_INT 3
15372: ARRAY
15373: GREATEREQUAL
15374: AND
15375: IFFALSE 15387
// result := weapon ;
15377: LD_ADDR_VAR 0 3
15381: PUSH
15382: LD_VAR 0 18
15386: ST_TO_ADDR
// end ; end ;
15387: LD_VAR 0 3
15391: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15392: LD_INT 0
15394: PPUSH
15395: PPUSH
// result := true ;
15396: LD_ADDR_VAR 0 3
15400: PUSH
15401: LD_INT 1
15403: ST_TO_ADDR
// if array1 = array2 then
15404: LD_VAR 0 1
15408: PUSH
15409: LD_VAR 0 2
15413: EQUAL
15414: IFFALSE 15474
// begin for i = 1 to array1 do
15416: LD_ADDR_VAR 0 4
15420: PUSH
15421: DOUBLE
15422: LD_INT 1
15424: DEC
15425: ST_TO_ADDR
15426: LD_VAR 0 1
15430: PUSH
15431: FOR_TO
15432: IFFALSE 15470
// if array1 [ i ] <> array2 [ i ] then
15434: LD_VAR 0 1
15438: PUSH
15439: LD_VAR 0 4
15443: ARRAY
15444: PUSH
15445: LD_VAR 0 2
15449: PUSH
15450: LD_VAR 0 4
15454: ARRAY
15455: NONEQUAL
15456: IFFALSE 15468
// begin result := false ;
15458: LD_ADDR_VAR 0 3
15462: PUSH
15463: LD_INT 0
15465: ST_TO_ADDR
// break ;
15466: GO 15470
// end ;
15468: GO 15431
15470: POP
15471: POP
// end else
15472: GO 15482
// result := false ;
15474: LD_ADDR_VAR 0 3
15478: PUSH
15479: LD_INT 0
15481: ST_TO_ADDR
// end ;
15482: LD_VAR 0 3
15486: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15487: LD_INT 0
15489: PPUSH
15490: PPUSH
// if not array1 or not array2 then
15491: LD_VAR 0 1
15495: NOT
15496: PUSH
15497: LD_VAR 0 2
15501: NOT
15502: OR
15503: IFFALSE 15507
// exit ;
15505: GO 15571
// result := true ;
15507: LD_ADDR_VAR 0 3
15511: PUSH
15512: LD_INT 1
15514: ST_TO_ADDR
// for i = 1 to array1 do
15515: LD_ADDR_VAR 0 4
15519: PUSH
15520: DOUBLE
15521: LD_INT 1
15523: DEC
15524: ST_TO_ADDR
15525: LD_VAR 0 1
15529: PUSH
15530: FOR_TO
15531: IFFALSE 15569
// if array1 [ i ] <> array2 [ i ] then
15533: LD_VAR 0 1
15537: PUSH
15538: LD_VAR 0 4
15542: ARRAY
15543: PUSH
15544: LD_VAR 0 2
15548: PUSH
15549: LD_VAR 0 4
15553: ARRAY
15554: NONEQUAL
15555: IFFALSE 15567
// begin result := false ;
15557: LD_ADDR_VAR 0 3
15561: PUSH
15562: LD_INT 0
15564: ST_TO_ADDR
// break ;
15565: GO 15569
// end ;
15567: GO 15530
15569: POP
15570: POP
// end ;
15571: LD_VAR 0 3
15575: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15576: LD_INT 0
15578: PPUSH
15579: PPUSH
15580: PPUSH
// pom := GetBase ( fac ) ;
15581: LD_ADDR_VAR 0 5
15585: PUSH
15586: LD_VAR 0 1
15590: PPUSH
15591: CALL_OW 274
15595: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15596: LD_ADDR_VAR 0 4
15600: PUSH
15601: LD_VAR 0 2
15605: PUSH
15606: LD_INT 1
15608: ARRAY
15609: PPUSH
15610: LD_VAR 0 2
15614: PUSH
15615: LD_INT 2
15617: ARRAY
15618: PPUSH
15619: LD_VAR 0 2
15623: PUSH
15624: LD_INT 3
15626: ARRAY
15627: PPUSH
15628: LD_VAR 0 2
15632: PUSH
15633: LD_INT 4
15635: ARRAY
15636: PPUSH
15637: CALL_OW 449
15641: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15642: LD_ADDR_VAR 0 3
15646: PUSH
15647: LD_VAR 0 5
15651: PPUSH
15652: LD_INT 1
15654: PPUSH
15655: CALL_OW 275
15659: PUSH
15660: LD_VAR 0 4
15664: PUSH
15665: LD_INT 1
15667: ARRAY
15668: GREATEREQUAL
15669: PUSH
15670: LD_VAR 0 5
15674: PPUSH
15675: LD_INT 2
15677: PPUSH
15678: CALL_OW 275
15682: PUSH
15683: LD_VAR 0 4
15687: PUSH
15688: LD_INT 2
15690: ARRAY
15691: GREATEREQUAL
15692: AND
15693: PUSH
15694: LD_VAR 0 5
15698: PPUSH
15699: LD_INT 3
15701: PPUSH
15702: CALL_OW 275
15706: PUSH
15707: LD_VAR 0 4
15711: PUSH
15712: LD_INT 3
15714: ARRAY
15715: GREATEREQUAL
15716: AND
15717: ST_TO_ADDR
// end ;
15718: LD_VAR 0 3
15722: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15723: LD_INT 0
15725: PPUSH
15726: PPUSH
15727: PPUSH
15728: PPUSH
// pom := GetBase ( building ) ;
15729: LD_ADDR_VAR 0 3
15733: PUSH
15734: LD_VAR 0 1
15738: PPUSH
15739: CALL_OW 274
15743: ST_TO_ADDR
// if not pom then
15744: LD_VAR 0 3
15748: NOT
15749: IFFALSE 15753
// exit ;
15751: GO 15923
// btype := GetBType ( building ) ;
15753: LD_ADDR_VAR 0 5
15757: PUSH
15758: LD_VAR 0 1
15762: PPUSH
15763: CALL_OW 266
15767: ST_TO_ADDR
// if btype = b_armoury then
15768: LD_VAR 0 5
15772: PUSH
15773: LD_INT 4
15775: EQUAL
15776: IFFALSE 15786
// btype := b_barracks ;
15778: LD_ADDR_VAR 0 5
15782: PUSH
15783: LD_INT 5
15785: ST_TO_ADDR
// if btype = b_depot then
15786: LD_VAR 0 5
15790: PUSH
15791: LD_INT 0
15793: EQUAL
15794: IFFALSE 15804
// btype := b_warehouse ;
15796: LD_ADDR_VAR 0 5
15800: PUSH
15801: LD_INT 1
15803: ST_TO_ADDR
// if btype = b_workshop then
15804: LD_VAR 0 5
15808: PUSH
15809: LD_INT 2
15811: EQUAL
15812: IFFALSE 15822
// btype := b_factory ;
15814: LD_ADDR_VAR 0 5
15818: PUSH
15819: LD_INT 3
15821: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15822: LD_ADDR_VAR 0 4
15826: PUSH
15827: LD_VAR 0 5
15831: PPUSH
15832: LD_VAR 0 1
15836: PPUSH
15837: CALL_OW 248
15841: PPUSH
15842: CALL_OW 450
15846: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15847: LD_ADDR_VAR 0 2
15851: PUSH
15852: LD_VAR 0 3
15856: PPUSH
15857: LD_INT 1
15859: PPUSH
15860: CALL_OW 275
15864: PUSH
15865: LD_VAR 0 4
15869: PUSH
15870: LD_INT 1
15872: ARRAY
15873: GREATEREQUAL
15874: PUSH
15875: LD_VAR 0 3
15879: PPUSH
15880: LD_INT 2
15882: PPUSH
15883: CALL_OW 275
15887: PUSH
15888: LD_VAR 0 4
15892: PUSH
15893: LD_INT 2
15895: ARRAY
15896: GREATEREQUAL
15897: AND
15898: PUSH
15899: LD_VAR 0 3
15903: PPUSH
15904: LD_INT 3
15906: PPUSH
15907: CALL_OW 275
15911: PUSH
15912: LD_VAR 0 4
15916: PUSH
15917: LD_INT 3
15919: ARRAY
15920: GREATEREQUAL
15921: AND
15922: ST_TO_ADDR
// end ;
15923: LD_VAR 0 2
15927: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15928: LD_INT 0
15930: PPUSH
15931: PPUSH
15932: PPUSH
// pom := GetBase ( building ) ;
15933: LD_ADDR_VAR 0 4
15937: PUSH
15938: LD_VAR 0 1
15942: PPUSH
15943: CALL_OW 274
15947: ST_TO_ADDR
// if not pom then
15948: LD_VAR 0 4
15952: NOT
15953: IFFALSE 15957
// exit ;
15955: GO 16058
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15957: LD_ADDR_VAR 0 5
15961: PUSH
15962: LD_VAR 0 2
15966: PPUSH
15967: LD_VAR 0 1
15971: PPUSH
15972: CALL_OW 248
15976: PPUSH
15977: CALL_OW 450
15981: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15982: LD_ADDR_VAR 0 3
15986: PUSH
15987: LD_VAR 0 4
15991: PPUSH
15992: LD_INT 1
15994: PPUSH
15995: CALL_OW 275
15999: PUSH
16000: LD_VAR 0 5
16004: PUSH
16005: LD_INT 1
16007: ARRAY
16008: GREATEREQUAL
16009: PUSH
16010: LD_VAR 0 4
16014: PPUSH
16015: LD_INT 2
16017: PPUSH
16018: CALL_OW 275
16022: PUSH
16023: LD_VAR 0 5
16027: PUSH
16028: LD_INT 2
16030: ARRAY
16031: GREATEREQUAL
16032: AND
16033: PUSH
16034: LD_VAR 0 4
16038: PPUSH
16039: LD_INT 3
16041: PPUSH
16042: CALL_OW 275
16046: PUSH
16047: LD_VAR 0 5
16051: PUSH
16052: LD_INT 3
16054: ARRAY
16055: GREATEREQUAL
16056: AND
16057: ST_TO_ADDR
// end ;
16058: LD_VAR 0 3
16062: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16063: LD_INT 0
16065: PPUSH
16066: PPUSH
16067: PPUSH
16068: PPUSH
16069: PPUSH
16070: PPUSH
16071: PPUSH
16072: PPUSH
16073: PPUSH
16074: PPUSH
16075: PPUSH
// result := false ;
16076: LD_ADDR_VAR 0 8
16080: PUSH
16081: LD_INT 0
16083: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16084: LD_VAR 0 5
16088: NOT
16089: PUSH
16090: LD_VAR 0 1
16094: NOT
16095: OR
16096: PUSH
16097: LD_VAR 0 2
16101: NOT
16102: OR
16103: PUSH
16104: LD_VAR 0 3
16108: NOT
16109: OR
16110: IFFALSE 16114
// exit ;
16112: GO 16928
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16114: LD_ADDR_VAR 0 14
16118: PUSH
16119: LD_VAR 0 1
16123: PPUSH
16124: LD_VAR 0 2
16128: PPUSH
16129: LD_VAR 0 3
16133: PPUSH
16134: LD_VAR 0 4
16138: PPUSH
16139: LD_VAR 0 5
16143: PUSH
16144: LD_INT 1
16146: ARRAY
16147: PPUSH
16148: CALL_OW 248
16152: PPUSH
16153: LD_INT 0
16155: PPUSH
16156: CALL 17765 0 6
16160: ST_TO_ADDR
// if not hexes then
16161: LD_VAR 0 14
16165: NOT
16166: IFFALSE 16170
// exit ;
16168: GO 16928
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16170: LD_ADDR_VAR 0 17
16174: PUSH
16175: LD_VAR 0 5
16179: PPUSH
16180: LD_INT 22
16182: PUSH
16183: LD_VAR 0 13
16187: PPUSH
16188: CALL_OW 255
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: LD_INT 2
16199: PUSH
16200: LD_INT 30
16202: PUSH
16203: LD_INT 0
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: LD_INT 30
16212: PUSH
16213: LD_INT 1
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: LIST
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PPUSH
16229: CALL_OW 72
16233: ST_TO_ADDR
// for i = 1 to hexes do
16234: LD_ADDR_VAR 0 9
16238: PUSH
16239: DOUBLE
16240: LD_INT 1
16242: DEC
16243: ST_TO_ADDR
16244: LD_VAR 0 14
16248: PUSH
16249: FOR_TO
16250: IFFALSE 16926
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16252: LD_ADDR_VAR 0 13
16256: PUSH
16257: LD_VAR 0 14
16261: PUSH
16262: LD_VAR 0 9
16266: ARRAY
16267: PUSH
16268: LD_INT 1
16270: ARRAY
16271: PPUSH
16272: LD_VAR 0 14
16276: PUSH
16277: LD_VAR 0 9
16281: ARRAY
16282: PUSH
16283: LD_INT 2
16285: ARRAY
16286: PPUSH
16287: CALL_OW 428
16291: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16292: LD_VAR 0 14
16296: PUSH
16297: LD_VAR 0 9
16301: ARRAY
16302: PUSH
16303: LD_INT 1
16305: ARRAY
16306: PPUSH
16307: LD_VAR 0 14
16311: PUSH
16312: LD_VAR 0 9
16316: ARRAY
16317: PUSH
16318: LD_INT 2
16320: ARRAY
16321: PPUSH
16322: CALL_OW 351
16326: PUSH
16327: LD_VAR 0 14
16331: PUSH
16332: LD_VAR 0 9
16336: ARRAY
16337: PUSH
16338: LD_INT 1
16340: ARRAY
16341: PPUSH
16342: LD_VAR 0 14
16346: PUSH
16347: LD_VAR 0 9
16351: ARRAY
16352: PUSH
16353: LD_INT 2
16355: ARRAY
16356: PPUSH
16357: CALL_OW 488
16361: NOT
16362: OR
16363: PUSH
16364: LD_VAR 0 13
16368: PPUSH
16369: CALL_OW 247
16373: PUSH
16374: LD_INT 3
16376: EQUAL
16377: OR
16378: IFFALSE 16384
// exit ;
16380: POP
16381: POP
16382: GO 16928
// if not tmp then
16384: LD_VAR 0 13
16388: NOT
16389: IFFALSE 16393
// continue ;
16391: GO 16249
// result := true ;
16393: LD_ADDR_VAR 0 8
16397: PUSH
16398: LD_INT 1
16400: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16401: LD_VAR 0 6
16405: PUSH
16406: LD_VAR 0 13
16410: PPUSH
16411: CALL_OW 247
16415: PUSH
16416: LD_INT 2
16418: EQUAL
16419: AND
16420: PUSH
16421: LD_VAR 0 13
16425: PPUSH
16426: CALL_OW 263
16430: PUSH
16431: LD_INT 1
16433: EQUAL
16434: AND
16435: IFFALSE 16599
// begin if IsDrivenBy ( tmp ) then
16437: LD_VAR 0 13
16441: PPUSH
16442: CALL_OW 311
16446: IFFALSE 16450
// continue ;
16448: GO 16249
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16450: LD_VAR 0 6
16454: PPUSH
16455: LD_INT 3
16457: PUSH
16458: LD_INT 60
16460: PUSH
16461: EMPTY
16462: LIST
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PUSH
16468: LD_INT 3
16470: PUSH
16471: LD_INT 55
16473: PUSH
16474: EMPTY
16475: LIST
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PPUSH
16485: CALL_OW 72
16489: IFFALSE 16597
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16491: LD_ADDR_VAR 0 18
16495: PUSH
16496: LD_VAR 0 6
16500: PPUSH
16501: LD_INT 3
16503: PUSH
16504: LD_INT 60
16506: PUSH
16507: EMPTY
16508: LIST
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PUSH
16514: LD_INT 3
16516: PUSH
16517: LD_INT 55
16519: PUSH
16520: EMPTY
16521: LIST
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PPUSH
16531: CALL_OW 72
16535: PUSH
16536: LD_INT 1
16538: ARRAY
16539: ST_TO_ADDR
// if IsInUnit ( driver ) then
16540: LD_VAR 0 18
16544: PPUSH
16545: CALL_OW 310
16549: IFFALSE 16560
// ComExit ( driver ) ;
16551: LD_VAR 0 18
16555: PPUSH
16556: CALL 40949 0 1
// AddComEnterUnit ( driver , tmp ) ;
16560: LD_VAR 0 18
16564: PPUSH
16565: LD_VAR 0 13
16569: PPUSH
16570: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16574: LD_VAR 0 18
16578: PPUSH
16579: LD_VAR 0 7
16583: PPUSH
16584: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16588: LD_VAR 0 18
16592: PPUSH
16593: CALL_OW 181
// end ; continue ;
16597: GO 16249
// end ; if not cleaners or not tmp in cleaners then
16599: LD_VAR 0 6
16603: NOT
16604: PUSH
16605: LD_VAR 0 13
16609: PUSH
16610: LD_VAR 0 6
16614: IN
16615: NOT
16616: OR
16617: IFFALSE 16924
// begin if dep then
16619: LD_VAR 0 17
16623: IFFALSE 16759
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16625: LD_ADDR_VAR 0 16
16629: PUSH
16630: LD_VAR 0 17
16634: PUSH
16635: LD_INT 1
16637: ARRAY
16638: PPUSH
16639: CALL_OW 250
16643: PPUSH
16644: LD_VAR 0 17
16648: PUSH
16649: LD_INT 1
16651: ARRAY
16652: PPUSH
16653: CALL_OW 254
16657: PPUSH
16658: LD_INT 5
16660: PPUSH
16661: CALL_OW 272
16665: PUSH
16666: LD_VAR 0 17
16670: PUSH
16671: LD_INT 1
16673: ARRAY
16674: PPUSH
16675: CALL_OW 251
16679: PPUSH
16680: LD_VAR 0 17
16684: PUSH
16685: LD_INT 1
16687: ARRAY
16688: PPUSH
16689: CALL_OW 254
16693: PPUSH
16694: LD_INT 5
16696: PPUSH
16697: CALL_OW 273
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16706: LD_VAR 0 16
16710: PUSH
16711: LD_INT 1
16713: ARRAY
16714: PPUSH
16715: LD_VAR 0 16
16719: PUSH
16720: LD_INT 2
16722: ARRAY
16723: PPUSH
16724: CALL_OW 488
16728: IFFALSE 16759
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16730: LD_VAR 0 13
16734: PPUSH
16735: LD_VAR 0 16
16739: PUSH
16740: LD_INT 1
16742: ARRAY
16743: PPUSH
16744: LD_VAR 0 16
16748: PUSH
16749: LD_INT 2
16751: ARRAY
16752: PPUSH
16753: CALL_OW 111
// continue ;
16757: GO 16249
// end ; end ; r := GetDir ( tmp ) ;
16759: LD_ADDR_VAR 0 15
16763: PUSH
16764: LD_VAR 0 13
16768: PPUSH
16769: CALL_OW 254
16773: ST_TO_ADDR
// if r = 5 then
16774: LD_VAR 0 15
16778: PUSH
16779: LD_INT 5
16781: EQUAL
16782: IFFALSE 16792
// r := 0 ;
16784: LD_ADDR_VAR 0 15
16788: PUSH
16789: LD_INT 0
16791: ST_TO_ADDR
// for j = r to 5 do
16792: LD_ADDR_VAR 0 10
16796: PUSH
16797: DOUBLE
16798: LD_VAR 0 15
16802: DEC
16803: ST_TO_ADDR
16804: LD_INT 5
16806: PUSH
16807: FOR_TO
16808: IFFALSE 16922
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16810: LD_ADDR_VAR 0 11
16814: PUSH
16815: LD_VAR 0 13
16819: PPUSH
16820: CALL_OW 250
16824: PPUSH
16825: LD_VAR 0 10
16829: PPUSH
16830: LD_INT 2
16832: PPUSH
16833: CALL_OW 272
16837: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16838: LD_ADDR_VAR 0 12
16842: PUSH
16843: LD_VAR 0 13
16847: PPUSH
16848: CALL_OW 251
16852: PPUSH
16853: LD_VAR 0 10
16857: PPUSH
16858: LD_INT 2
16860: PPUSH
16861: CALL_OW 273
16865: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16866: LD_VAR 0 11
16870: PPUSH
16871: LD_VAR 0 12
16875: PPUSH
16876: CALL_OW 488
16880: PUSH
16881: LD_VAR 0 11
16885: PPUSH
16886: LD_VAR 0 12
16890: PPUSH
16891: CALL_OW 428
16895: NOT
16896: AND
16897: IFFALSE 16920
// begin ComMoveXY ( tmp , _x , _y ) ;
16899: LD_VAR 0 13
16903: PPUSH
16904: LD_VAR 0 11
16908: PPUSH
16909: LD_VAR 0 12
16913: PPUSH
16914: CALL_OW 111
// break ;
16918: GO 16922
// end ; end ;
16920: GO 16807
16922: POP
16923: POP
// end ; end ;
16924: GO 16249
16926: POP
16927: POP
// end ;
16928: LD_VAR 0 8
16932: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
16933: LD_INT 0
16935: PPUSH
16936: PPUSH
16937: PPUSH
16938: PPUSH
16939: PPUSH
16940: PPUSH
16941: PPUSH
16942: PPUSH
16943: PPUSH
16944: PPUSH
// result := false ;
16945: LD_ADDR_VAR 0 6
16949: PUSH
16950: LD_INT 0
16952: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16953: LD_VAR 0 1
16957: NOT
16958: PUSH
16959: LD_VAR 0 1
16963: PPUSH
16964: CALL_OW 266
16968: PUSH
16969: LD_INT 0
16971: PUSH
16972: LD_INT 1
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: IN
16979: NOT
16980: OR
16981: PUSH
16982: LD_VAR 0 2
16986: NOT
16987: OR
16988: PUSH
16989: LD_VAR 0 5
16993: PUSH
16994: LD_INT 0
16996: PUSH
16997: LD_INT 1
16999: PUSH
17000: LD_INT 2
17002: PUSH
17003: LD_INT 3
17005: PUSH
17006: LD_INT 4
17008: PUSH
17009: LD_INT 5
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: IN
17020: NOT
17021: OR
17022: PUSH
17023: LD_VAR 0 3
17027: PPUSH
17028: LD_VAR 0 4
17032: PPUSH
17033: CALL_OW 488
17037: NOT
17038: OR
17039: IFFALSE 17043
// exit ;
17041: GO 17760
// pom := GetBase ( depot ) ;
17043: LD_ADDR_VAR 0 10
17047: PUSH
17048: LD_VAR 0 1
17052: PPUSH
17053: CALL_OW 274
17057: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17058: LD_ADDR_VAR 0 11
17062: PUSH
17063: LD_VAR 0 2
17067: PPUSH
17068: LD_VAR 0 1
17072: PPUSH
17073: CALL_OW 248
17077: PPUSH
17078: CALL_OW 450
17082: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17083: LD_VAR 0 10
17087: PPUSH
17088: LD_INT 1
17090: PPUSH
17091: CALL_OW 275
17095: PUSH
17096: LD_VAR 0 11
17100: PUSH
17101: LD_INT 1
17103: ARRAY
17104: GREATEREQUAL
17105: PUSH
17106: LD_VAR 0 10
17110: PPUSH
17111: LD_INT 2
17113: PPUSH
17114: CALL_OW 275
17118: PUSH
17119: LD_VAR 0 11
17123: PUSH
17124: LD_INT 2
17126: ARRAY
17127: GREATEREQUAL
17128: AND
17129: PUSH
17130: LD_VAR 0 10
17134: PPUSH
17135: LD_INT 3
17137: PPUSH
17138: CALL_OW 275
17142: PUSH
17143: LD_VAR 0 11
17147: PUSH
17148: LD_INT 3
17150: ARRAY
17151: GREATEREQUAL
17152: AND
17153: NOT
17154: IFFALSE 17158
// exit ;
17156: GO 17760
// if GetBType ( depot ) = b_depot then
17158: LD_VAR 0 1
17162: PPUSH
17163: CALL_OW 266
17167: PUSH
17168: LD_INT 0
17170: EQUAL
17171: IFFALSE 17183
// dist := 28 else
17173: LD_ADDR_VAR 0 14
17177: PUSH
17178: LD_INT 28
17180: ST_TO_ADDR
17181: GO 17191
// dist := 36 ;
17183: LD_ADDR_VAR 0 14
17187: PUSH
17188: LD_INT 36
17190: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17191: LD_VAR 0 1
17195: PPUSH
17196: LD_VAR 0 3
17200: PPUSH
17201: LD_VAR 0 4
17205: PPUSH
17206: CALL_OW 297
17210: PUSH
17211: LD_VAR 0 14
17215: GREATER
17216: IFFALSE 17220
// exit ;
17218: GO 17760
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17220: LD_ADDR_VAR 0 12
17224: PUSH
17225: LD_VAR 0 2
17229: PPUSH
17230: LD_VAR 0 3
17234: PPUSH
17235: LD_VAR 0 4
17239: PPUSH
17240: LD_VAR 0 5
17244: PPUSH
17245: LD_VAR 0 1
17249: PPUSH
17250: CALL_OW 248
17254: PPUSH
17255: LD_INT 0
17257: PPUSH
17258: CALL 17765 0 6
17262: ST_TO_ADDR
// if not hexes then
17263: LD_VAR 0 12
17267: NOT
17268: IFFALSE 17272
// exit ;
17270: GO 17760
// hex := GetHexInfo ( x , y ) ;
17272: LD_ADDR_VAR 0 15
17276: PUSH
17277: LD_VAR 0 3
17281: PPUSH
17282: LD_VAR 0 4
17286: PPUSH
17287: CALL_OW 546
17291: ST_TO_ADDR
// if hex [ 1 ] then
17292: LD_VAR 0 15
17296: PUSH
17297: LD_INT 1
17299: ARRAY
17300: IFFALSE 17304
// exit ;
17302: GO 17760
// height := hex [ 2 ] ;
17304: LD_ADDR_VAR 0 13
17308: PUSH
17309: LD_VAR 0 15
17313: PUSH
17314: LD_INT 2
17316: ARRAY
17317: ST_TO_ADDR
// for i = 1 to hexes do
17318: LD_ADDR_VAR 0 7
17322: PUSH
17323: DOUBLE
17324: LD_INT 1
17326: DEC
17327: ST_TO_ADDR
17328: LD_VAR 0 12
17332: PUSH
17333: FOR_TO
17334: IFFALSE 17664
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17336: LD_VAR 0 12
17340: PUSH
17341: LD_VAR 0 7
17345: ARRAY
17346: PUSH
17347: LD_INT 1
17349: ARRAY
17350: PPUSH
17351: LD_VAR 0 12
17355: PUSH
17356: LD_VAR 0 7
17360: ARRAY
17361: PUSH
17362: LD_INT 2
17364: ARRAY
17365: PPUSH
17366: CALL_OW 488
17370: NOT
17371: PUSH
17372: LD_VAR 0 12
17376: PUSH
17377: LD_VAR 0 7
17381: ARRAY
17382: PUSH
17383: LD_INT 1
17385: ARRAY
17386: PPUSH
17387: LD_VAR 0 12
17391: PUSH
17392: LD_VAR 0 7
17396: ARRAY
17397: PUSH
17398: LD_INT 2
17400: ARRAY
17401: PPUSH
17402: CALL_OW 428
17406: PUSH
17407: LD_INT 0
17409: GREATER
17410: OR
17411: PUSH
17412: LD_VAR 0 12
17416: PUSH
17417: LD_VAR 0 7
17421: ARRAY
17422: PUSH
17423: LD_INT 1
17425: ARRAY
17426: PPUSH
17427: LD_VAR 0 12
17431: PUSH
17432: LD_VAR 0 7
17436: ARRAY
17437: PUSH
17438: LD_INT 2
17440: ARRAY
17441: PPUSH
17442: CALL_OW 351
17446: OR
17447: IFFALSE 17453
// exit ;
17449: POP
17450: POP
17451: GO 17760
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17453: LD_ADDR_VAR 0 8
17457: PUSH
17458: LD_VAR 0 12
17462: PUSH
17463: LD_VAR 0 7
17467: ARRAY
17468: PUSH
17469: LD_INT 1
17471: ARRAY
17472: PPUSH
17473: LD_VAR 0 12
17477: PUSH
17478: LD_VAR 0 7
17482: ARRAY
17483: PUSH
17484: LD_INT 2
17486: ARRAY
17487: PPUSH
17488: CALL_OW 546
17492: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17493: LD_VAR 0 8
17497: PUSH
17498: LD_INT 1
17500: ARRAY
17501: PUSH
17502: LD_VAR 0 8
17506: PUSH
17507: LD_INT 2
17509: ARRAY
17510: PUSH
17511: LD_VAR 0 13
17515: PUSH
17516: LD_INT 2
17518: PLUS
17519: GREATER
17520: OR
17521: PUSH
17522: LD_VAR 0 8
17526: PUSH
17527: LD_INT 2
17529: ARRAY
17530: PUSH
17531: LD_VAR 0 13
17535: PUSH
17536: LD_INT 2
17538: MINUS
17539: LESS
17540: OR
17541: PUSH
17542: LD_VAR 0 8
17546: PUSH
17547: LD_INT 3
17549: ARRAY
17550: PUSH
17551: LD_INT 0
17553: PUSH
17554: LD_INT 8
17556: PUSH
17557: LD_INT 9
17559: PUSH
17560: LD_INT 10
17562: PUSH
17563: LD_INT 11
17565: PUSH
17566: LD_INT 12
17568: PUSH
17569: LD_INT 13
17571: PUSH
17572: LD_INT 16
17574: PUSH
17575: LD_INT 17
17577: PUSH
17578: LD_INT 18
17580: PUSH
17581: LD_INT 19
17583: PUSH
17584: LD_INT 20
17586: PUSH
17587: LD_INT 21
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: IN
17605: NOT
17606: OR
17607: PUSH
17608: LD_VAR 0 8
17612: PUSH
17613: LD_INT 5
17615: ARRAY
17616: NOT
17617: OR
17618: PUSH
17619: LD_VAR 0 8
17623: PUSH
17624: LD_INT 6
17626: ARRAY
17627: PUSH
17628: LD_INT 1
17630: PUSH
17631: LD_INT 2
17633: PUSH
17634: LD_INT 7
17636: PUSH
17637: LD_INT 9
17639: PUSH
17640: LD_INT 10
17642: PUSH
17643: LD_INT 11
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: IN
17654: NOT
17655: OR
17656: IFFALSE 17662
// exit ;
17658: POP
17659: POP
17660: GO 17760
// end ;
17662: GO 17333
17664: POP
17665: POP
// side := GetSide ( depot ) ;
17666: LD_ADDR_VAR 0 9
17670: PUSH
17671: LD_VAR 0 1
17675: PPUSH
17676: CALL_OW 255
17680: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17681: LD_VAR 0 9
17685: PPUSH
17686: LD_VAR 0 3
17690: PPUSH
17691: LD_VAR 0 4
17695: PPUSH
17696: LD_INT 20
17698: PPUSH
17699: CALL 10081 0 4
17703: PUSH
17704: LD_INT 4
17706: ARRAY
17707: IFFALSE 17711
// exit ;
17709: GO 17760
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17711: LD_VAR 0 2
17715: PUSH
17716: LD_INT 29
17718: PUSH
17719: LD_INT 30
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: IN
17726: PUSH
17727: LD_VAR 0 3
17731: PPUSH
17732: LD_VAR 0 4
17736: PPUSH
17737: LD_VAR 0 9
17741: PPUSH
17742: CALL_OW 440
17746: NOT
17747: AND
17748: IFFALSE 17752
// exit ;
17750: GO 17760
// result := true ;
17752: LD_ADDR_VAR 0 6
17756: PUSH
17757: LD_INT 1
17759: ST_TO_ADDR
// end ;
17760: LD_VAR 0 6
17764: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17765: LD_INT 0
17767: PPUSH
17768: PPUSH
17769: PPUSH
17770: PPUSH
17771: PPUSH
17772: PPUSH
17773: PPUSH
17774: PPUSH
17775: PPUSH
17776: PPUSH
17777: PPUSH
17778: PPUSH
17779: PPUSH
17780: PPUSH
17781: PPUSH
17782: PPUSH
17783: PPUSH
17784: PPUSH
17785: PPUSH
17786: PPUSH
17787: PPUSH
17788: PPUSH
17789: PPUSH
17790: PPUSH
17791: PPUSH
17792: PPUSH
17793: PPUSH
17794: PPUSH
17795: PPUSH
17796: PPUSH
17797: PPUSH
17798: PPUSH
17799: PPUSH
17800: PPUSH
17801: PPUSH
17802: PPUSH
17803: PPUSH
17804: PPUSH
17805: PPUSH
17806: PPUSH
17807: PPUSH
17808: PPUSH
17809: PPUSH
17810: PPUSH
17811: PPUSH
17812: PPUSH
17813: PPUSH
17814: PPUSH
17815: PPUSH
17816: PPUSH
17817: PPUSH
17818: PPUSH
17819: PPUSH
17820: PPUSH
17821: PPUSH
17822: PPUSH
17823: PPUSH
17824: PPUSH
// result = [ ] ;
17825: LD_ADDR_VAR 0 7
17829: PUSH
17830: EMPTY
17831: ST_TO_ADDR
// temp_list = [ ] ;
17832: LD_ADDR_VAR 0 9
17836: PUSH
17837: EMPTY
17838: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17839: LD_VAR 0 4
17843: PUSH
17844: LD_INT 0
17846: PUSH
17847: LD_INT 1
17849: PUSH
17850: LD_INT 2
17852: PUSH
17853: LD_INT 3
17855: PUSH
17856: LD_INT 4
17858: PUSH
17859: LD_INT 5
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: IN
17870: NOT
17871: PUSH
17872: LD_VAR 0 1
17876: PUSH
17877: LD_INT 0
17879: PUSH
17880: LD_INT 1
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: IN
17887: PUSH
17888: LD_VAR 0 5
17892: PUSH
17893: LD_INT 1
17895: PUSH
17896: LD_INT 2
17898: PUSH
17899: LD_INT 3
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: LIST
17906: IN
17907: NOT
17908: AND
17909: OR
17910: IFFALSE 17914
// exit ;
17912: GO 36305
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17914: LD_VAR 0 1
17918: PUSH
17919: LD_INT 6
17921: PUSH
17922: LD_INT 7
17924: PUSH
17925: LD_INT 8
17927: PUSH
17928: LD_INT 13
17930: PUSH
17931: LD_INT 12
17933: PUSH
17934: LD_INT 15
17936: PUSH
17937: LD_INT 11
17939: PUSH
17940: LD_INT 14
17942: PUSH
17943: LD_INT 10
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: IN
17957: IFFALSE 17967
// btype = b_lab ;
17959: LD_ADDR_VAR 0 1
17963: PUSH
17964: LD_INT 6
17966: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17967: LD_VAR 0 6
17971: PUSH
17972: LD_INT 0
17974: PUSH
17975: LD_INT 1
17977: PUSH
17978: LD_INT 2
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: LIST
17985: IN
17986: NOT
17987: PUSH
17988: LD_VAR 0 1
17992: PUSH
17993: LD_INT 0
17995: PUSH
17996: LD_INT 1
17998: PUSH
17999: LD_INT 2
18001: PUSH
18002: LD_INT 3
18004: PUSH
18005: LD_INT 6
18007: PUSH
18008: LD_INT 36
18010: PUSH
18011: LD_INT 4
18013: PUSH
18014: LD_INT 5
18016: PUSH
18017: LD_INT 31
18019: PUSH
18020: LD_INT 32
18022: PUSH
18023: LD_INT 33
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: IN
18039: NOT
18040: PUSH
18041: LD_VAR 0 6
18045: PUSH
18046: LD_INT 1
18048: EQUAL
18049: AND
18050: OR
18051: PUSH
18052: LD_VAR 0 1
18056: PUSH
18057: LD_INT 2
18059: PUSH
18060: LD_INT 3
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: IN
18067: NOT
18068: PUSH
18069: LD_VAR 0 6
18073: PUSH
18074: LD_INT 2
18076: EQUAL
18077: AND
18078: OR
18079: IFFALSE 18089
// mode = 0 ;
18081: LD_ADDR_VAR 0 6
18085: PUSH
18086: LD_INT 0
18088: ST_TO_ADDR
// case mode of 0 :
18089: LD_VAR 0 6
18093: PUSH
18094: LD_INT 0
18096: DOUBLE
18097: EQUAL
18098: IFTRUE 18102
18100: GO 29555
18102: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18103: LD_ADDR_VAR 0 11
18107: PUSH
18108: LD_INT 0
18110: PUSH
18111: LD_INT 0
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 0
18120: PUSH
18121: LD_INT 1
18123: NEG
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 1
18131: PUSH
18132: LD_INT 0
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 1
18141: PUSH
18142: LD_INT 1
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 0
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 1
18161: NEG
18162: PUSH
18163: LD_INT 0
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 1
18172: NEG
18173: PUSH
18174: LD_INT 1
18176: NEG
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 1
18184: NEG
18185: PUSH
18186: LD_INT 2
18188: NEG
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 0
18196: PUSH
18197: LD_INT 2
18199: NEG
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 1
18207: PUSH
18208: LD_INT 1
18210: NEG
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: LD_INT 2
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 0
18228: PUSH
18229: LD_INT 2
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 1
18238: NEG
18239: PUSH
18240: LD_INT 1
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 1
18249: PUSH
18250: LD_INT 3
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 0
18259: PUSH
18260: LD_INT 3
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 1
18269: NEG
18270: PUSH
18271: LD_INT 2
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18296: LD_ADDR_VAR 0 12
18300: PUSH
18301: LD_INT 0
18303: PUSH
18304: LD_INT 0
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 0
18313: PUSH
18314: LD_INT 1
18316: NEG
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 1
18324: PUSH
18325: LD_INT 0
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 1
18334: PUSH
18335: LD_INT 1
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 0
18344: PUSH
18345: LD_INT 1
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: LD_INT 1
18354: NEG
18355: PUSH
18356: LD_INT 0
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 1
18365: NEG
18366: PUSH
18367: LD_INT 1
18369: NEG
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 1
18377: PUSH
18378: LD_INT 1
18380: NEG
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 2
18388: PUSH
18389: LD_INT 0
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 2
18398: PUSH
18399: LD_INT 1
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 1
18408: NEG
18409: PUSH
18410: LD_INT 1
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 2
18419: NEG
18420: PUSH
18421: LD_INT 0
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 2
18430: NEG
18431: PUSH
18432: LD_INT 1
18434: NEG
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 2
18442: NEG
18443: PUSH
18444: LD_INT 1
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 3
18453: NEG
18454: PUSH
18455: LD_INT 0
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 3
18464: NEG
18465: PUSH
18466: LD_INT 1
18468: NEG
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18492: LD_ADDR_VAR 0 13
18496: PUSH
18497: LD_INT 0
18499: PUSH
18500: LD_INT 0
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 0
18509: PUSH
18510: LD_INT 1
18512: NEG
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 1
18520: PUSH
18521: LD_INT 0
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 1
18530: PUSH
18531: LD_INT 1
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 0
18540: PUSH
18541: LD_INT 1
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 1
18550: NEG
18551: PUSH
18552: LD_INT 0
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 1
18561: NEG
18562: PUSH
18563: LD_INT 1
18565: NEG
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 1
18573: NEG
18574: PUSH
18575: LD_INT 2
18577: NEG
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 2
18585: PUSH
18586: LD_INT 1
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 2
18595: PUSH
18596: LD_INT 2
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: LD_INT 2
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: LD_INT 2
18615: NEG
18616: PUSH
18617: LD_INT 1
18619: NEG
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 2
18627: NEG
18628: PUSH
18629: LD_INT 2
18631: NEG
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 2
18639: NEG
18640: PUSH
18641: LD_INT 3
18643: NEG
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 3
18651: NEG
18652: PUSH
18653: LD_INT 2
18655: NEG
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 3
18663: NEG
18664: PUSH
18665: LD_INT 3
18667: NEG
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18691: LD_ADDR_VAR 0 14
18695: PUSH
18696: LD_INT 0
18698: PUSH
18699: LD_INT 0
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 0
18708: PUSH
18709: LD_INT 1
18711: NEG
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 1
18719: PUSH
18720: LD_INT 0
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 1
18729: PUSH
18730: LD_INT 1
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 0
18739: PUSH
18740: LD_INT 1
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 1
18749: NEG
18750: PUSH
18751: LD_INT 0
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 1
18760: NEG
18761: PUSH
18762: LD_INT 1
18764: NEG
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 1
18772: NEG
18773: PUSH
18774: LD_INT 2
18776: NEG
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 0
18784: PUSH
18785: LD_INT 2
18787: NEG
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 1
18795: PUSH
18796: LD_INT 1
18798: NEG
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 1
18806: PUSH
18807: LD_INT 2
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 0
18816: PUSH
18817: LD_INT 2
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 1
18826: NEG
18827: PUSH
18828: LD_INT 1
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 1
18837: NEG
18838: PUSH
18839: LD_INT 3
18841: NEG
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 0
18849: PUSH
18850: LD_INT 3
18852: NEG
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 1
18860: PUSH
18861: LD_INT 2
18863: NEG
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18887: LD_ADDR_VAR 0 15
18891: PUSH
18892: LD_INT 0
18894: PUSH
18895: LD_INT 0
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 0
18904: PUSH
18905: LD_INT 1
18907: NEG
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 1
18915: PUSH
18916: LD_INT 0
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 1
18925: PUSH
18926: LD_INT 1
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 0
18935: PUSH
18936: LD_INT 1
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 1
18945: NEG
18946: PUSH
18947: LD_INT 0
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 1
18956: NEG
18957: PUSH
18958: LD_INT 1
18960: NEG
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 1
18968: PUSH
18969: LD_INT 1
18971: NEG
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 2
18979: PUSH
18980: LD_INT 0
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 2
18989: PUSH
18990: LD_INT 1
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 1
18999: NEG
19000: PUSH
19001: LD_INT 1
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 2
19010: NEG
19011: PUSH
19012: LD_INT 0
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 2
19021: NEG
19022: PUSH
19023: LD_INT 1
19025: NEG
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 2
19033: PUSH
19034: LD_INT 1
19036: NEG
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 3
19044: PUSH
19045: LD_INT 0
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 3
19054: PUSH
19055: LD_INT 1
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19080: LD_ADDR_VAR 0 16
19084: PUSH
19085: LD_INT 0
19087: PUSH
19088: LD_INT 0
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 0
19097: PUSH
19098: LD_INT 1
19100: NEG
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 1
19108: PUSH
19109: LD_INT 0
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 1
19118: PUSH
19119: LD_INT 1
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 0
19128: PUSH
19129: LD_INT 1
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 1
19138: NEG
19139: PUSH
19140: LD_INT 0
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 1
19149: NEG
19150: PUSH
19151: LD_INT 1
19153: NEG
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 1
19161: NEG
19162: PUSH
19163: LD_INT 2
19165: NEG
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 2
19173: PUSH
19174: LD_INT 1
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 2
19183: PUSH
19184: LD_INT 2
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 1
19193: PUSH
19194: LD_INT 2
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 2
19203: NEG
19204: PUSH
19205: LD_INT 1
19207: NEG
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 2
19215: NEG
19216: PUSH
19217: LD_INT 2
19219: NEG
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 3
19227: PUSH
19228: LD_INT 2
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 3
19237: PUSH
19238: LD_INT 3
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 2
19247: PUSH
19248: LD_INT 3
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19273: LD_ADDR_VAR 0 17
19277: PUSH
19278: LD_INT 0
19280: PUSH
19281: LD_INT 0
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 0
19290: PUSH
19291: LD_INT 1
19293: NEG
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 1
19301: PUSH
19302: LD_INT 0
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 1
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 0
19321: PUSH
19322: LD_INT 1
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 1
19331: NEG
19332: PUSH
19333: LD_INT 0
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 1
19342: NEG
19343: PUSH
19344: LD_INT 1
19346: NEG
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 1
19354: NEG
19355: PUSH
19356: LD_INT 2
19358: NEG
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 0
19366: PUSH
19367: LD_INT 2
19369: NEG
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 1
19377: PUSH
19378: LD_INT 1
19380: NEG
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 2
19388: PUSH
19389: LD_INT 0
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 2
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 2
19408: PUSH
19409: LD_INT 2
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 1
19418: PUSH
19419: LD_INT 2
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: LD_INT 2
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 1
19438: NEG
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 2
19449: NEG
19450: PUSH
19451: LD_INT 0
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 2
19460: NEG
19461: PUSH
19462: LD_INT 1
19464: NEG
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 2
19472: NEG
19473: PUSH
19474: LD_INT 2
19476: NEG
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19503: LD_ADDR_VAR 0 18
19507: PUSH
19508: LD_INT 0
19510: PUSH
19511: LD_INT 0
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 0
19520: PUSH
19521: LD_INT 1
19523: NEG
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 1
19531: PUSH
19532: LD_INT 0
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 1
19541: PUSH
19542: LD_INT 1
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: LD_INT 1
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 1
19561: NEG
19562: PUSH
19563: LD_INT 0
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 1
19572: NEG
19573: PUSH
19574: LD_INT 1
19576: NEG
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 1
19584: NEG
19585: PUSH
19586: LD_INT 2
19588: NEG
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 0
19596: PUSH
19597: LD_INT 2
19599: NEG
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 1
19607: PUSH
19608: LD_INT 1
19610: NEG
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 2
19618: PUSH
19619: LD_INT 0
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 2
19628: PUSH
19629: LD_INT 1
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 2
19638: PUSH
19639: LD_INT 2
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 1
19648: PUSH
19649: LD_INT 2
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 0
19658: PUSH
19659: LD_INT 2
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 1
19668: NEG
19669: PUSH
19670: LD_INT 1
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 2
19679: NEG
19680: PUSH
19681: LD_INT 0
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 2
19690: NEG
19691: PUSH
19692: LD_INT 1
19694: NEG
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 2
19702: NEG
19703: PUSH
19704: LD_INT 2
19706: NEG
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19733: LD_ADDR_VAR 0 19
19737: PUSH
19738: LD_INT 0
19740: PUSH
19741: LD_INT 0
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 0
19750: PUSH
19751: LD_INT 1
19753: NEG
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 1
19761: PUSH
19762: LD_INT 0
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 1
19771: PUSH
19772: LD_INT 1
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 0
19781: PUSH
19782: LD_INT 1
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 1
19791: NEG
19792: PUSH
19793: LD_INT 0
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 1
19802: NEG
19803: PUSH
19804: LD_INT 1
19806: NEG
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 1
19814: NEG
19815: PUSH
19816: LD_INT 2
19818: NEG
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 0
19826: PUSH
19827: LD_INT 2
19829: NEG
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 1
19837: PUSH
19838: LD_INT 1
19840: NEG
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 2
19848: PUSH
19849: LD_INT 0
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 2
19858: PUSH
19859: LD_INT 1
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 2
19868: PUSH
19869: LD_INT 2
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 1
19878: PUSH
19879: LD_INT 2
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 0
19888: PUSH
19889: LD_INT 2
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 1
19898: NEG
19899: PUSH
19900: LD_INT 1
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 2
19909: NEG
19910: PUSH
19911: LD_INT 0
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 2
19920: NEG
19921: PUSH
19922: LD_INT 1
19924: NEG
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 2
19932: NEG
19933: PUSH
19934: LD_INT 2
19936: NEG
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19963: LD_ADDR_VAR 0 20
19967: PUSH
19968: LD_INT 0
19970: PUSH
19971: LD_INT 0
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 0
19980: PUSH
19981: LD_INT 1
19983: NEG
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 1
19991: PUSH
19992: LD_INT 0
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 1
20001: PUSH
20002: LD_INT 1
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 0
20011: PUSH
20012: LD_INT 1
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 1
20021: NEG
20022: PUSH
20023: LD_INT 0
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 1
20032: NEG
20033: PUSH
20034: LD_INT 1
20036: NEG
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 1
20044: NEG
20045: PUSH
20046: LD_INT 2
20048: NEG
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 0
20056: PUSH
20057: LD_INT 2
20059: NEG
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 1
20067: PUSH
20068: LD_INT 1
20070: NEG
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 2
20078: PUSH
20079: LD_INT 0
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 2
20088: PUSH
20089: LD_INT 1
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 2
20098: PUSH
20099: LD_INT 2
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: LD_INT 1
20108: PUSH
20109: LD_INT 2
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 0
20118: PUSH
20119: LD_INT 2
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 1
20128: NEG
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 2
20139: NEG
20140: PUSH
20141: LD_INT 0
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 2
20150: NEG
20151: PUSH
20152: LD_INT 1
20154: NEG
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 2
20162: NEG
20163: PUSH
20164: LD_INT 2
20166: NEG
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20193: LD_ADDR_VAR 0 21
20197: PUSH
20198: LD_INT 0
20200: PUSH
20201: LD_INT 0
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 0
20210: PUSH
20211: LD_INT 1
20213: NEG
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 1
20221: PUSH
20222: LD_INT 0
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 1
20231: PUSH
20232: LD_INT 1
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 0
20241: PUSH
20242: LD_INT 1
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 1
20251: NEG
20252: PUSH
20253: LD_INT 0
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 1
20262: NEG
20263: PUSH
20264: LD_INT 1
20266: NEG
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 1
20274: NEG
20275: PUSH
20276: LD_INT 2
20278: NEG
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 0
20286: PUSH
20287: LD_INT 2
20289: NEG
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: LD_INT 1
20300: NEG
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 2
20308: PUSH
20309: LD_INT 0
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 2
20318: PUSH
20319: LD_INT 1
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 2
20328: PUSH
20329: LD_INT 2
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 1
20338: PUSH
20339: LD_INT 2
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 0
20348: PUSH
20349: LD_INT 2
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 1
20358: NEG
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 2
20369: NEG
20370: PUSH
20371: LD_INT 0
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 2
20380: NEG
20381: PUSH
20382: LD_INT 1
20384: NEG
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 2
20392: NEG
20393: PUSH
20394: LD_INT 2
20396: NEG
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20423: LD_ADDR_VAR 0 22
20427: PUSH
20428: LD_INT 0
20430: PUSH
20431: LD_INT 0
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 0
20440: PUSH
20441: LD_INT 1
20443: NEG
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: LD_INT 0
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 1
20461: PUSH
20462: LD_INT 1
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 0
20471: PUSH
20472: LD_INT 1
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 1
20481: NEG
20482: PUSH
20483: LD_INT 0
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: LD_INT 1
20492: NEG
20493: PUSH
20494: LD_INT 1
20496: NEG
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 1
20504: NEG
20505: PUSH
20506: LD_INT 2
20508: NEG
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 0
20516: PUSH
20517: LD_INT 2
20519: NEG
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 1
20527: PUSH
20528: LD_INT 1
20530: NEG
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 2
20538: PUSH
20539: LD_INT 0
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 2
20548: PUSH
20549: LD_INT 1
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 2
20558: PUSH
20559: LD_INT 2
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 1
20568: PUSH
20569: LD_INT 2
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 0
20578: PUSH
20579: LD_INT 2
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 1
20588: NEG
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 2
20599: NEG
20600: PUSH
20601: LD_INT 0
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 2
20610: NEG
20611: PUSH
20612: LD_INT 1
20614: NEG
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 2
20622: NEG
20623: PUSH
20624: LD_INT 2
20626: NEG
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20653: LD_ADDR_VAR 0 23
20657: PUSH
20658: LD_INT 0
20660: PUSH
20661: LD_INT 0
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 0
20670: PUSH
20671: LD_INT 1
20673: NEG
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 1
20681: PUSH
20682: LD_INT 0
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 1
20691: PUSH
20692: LD_INT 1
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 0
20701: PUSH
20702: LD_INT 1
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 1
20711: NEG
20712: PUSH
20713: LD_INT 0
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 1
20722: NEG
20723: PUSH
20724: LD_INT 1
20726: NEG
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 1
20734: NEG
20735: PUSH
20736: LD_INT 2
20738: NEG
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 0
20746: PUSH
20747: LD_INT 2
20749: NEG
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 1
20757: PUSH
20758: LD_INT 1
20760: NEG
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 2
20768: PUSH
20769: LD_INT 0
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 2
20778: PUSH
20779: LD_INT 1
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 2
20788: PUSH
20789: LD_INT 2
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: LD_INT 2
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 0
20808: PUSH
20809: LD_INT 2
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 1
20818: NEG
20819: PUSH
20820: LD_INT 1
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 2
20829: NEG
20830: PUSH
20831: LD_INT 0
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 2
20840: NEG
20841: PUSH
20842: LD_INT 1
20844: NEG
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 2
20852: NEG
20853: PUSH
20854: LD_INT 2
20856: NEG
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 2
20864: NEG
20865: PUSH
20866: LD_INT 3
20868: NEG
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 1
20876: NEG
20877: PUSH
20878: LD_INT 3
20880: NEG
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 1
20888: PUSH
20889: LD_INT 2
20891: NEG
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 2
20899: PUSH
20900: LD_INT 1
20902: NEG
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20933: LD_ADDR_VAR 0 24
20937: PUSH
20938: LD_INT 0
20940: PUSH
20941: LD_INT 0
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 0
20950: PUSH
20951: LD_INT 1
20953: NEG
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 1
20961: PUSH
20962: LD_INT 0
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 1
20971: PUSH
20972: LD_INT 1
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 0
20981: PUSH
20982: LD_INT 1
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 1
20991: NEG
20992: PUSH
20993: LD_INT 0
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 1
21002: NEG
21003: PUSH
21004: LD_INT 1
21006: NEG
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 1
21014: NEG
21015: PUSH
21016: LD_INT 2
21018: NEG
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 0
21026: PUSH
21027: LD_INT 2
21029: NEG
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 1
21037: PUSH
21038: LD_INT 1
21040: NEG
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: LD_INT 2
21048: PUSH
21049: LD_INT 0
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 2
21058: PUSH
21059: LD_INT 1
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 2
21068: PUSH
21069: LD_INT 2
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 1
21078: PUSH
21079: LD_INT 2
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 0
21088: PUSH
21089: LD_INT 2
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 1
21098: NEG
21099: PUSH
21100: LD_INT 1
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 2
21109: NEG
21110: PUSH
21111: LD_INT 0
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 2
21120: NEG
21121: PUSH
21122: LD_INT 1
21124: NEG
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 2
21132: NEG
21133: PUSH
21134: LD_INT 2
21136: NEG
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 1
21144: PUSH
21145: LD_INT 2
21147: NEG
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 2
21155: PUSH
21156: LD_INT 1
21158: NEG
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PUSH
21164: LD_INT 3
21166: PUSH
21167: LD_INT 1
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 3
21176: PUSH
21177: LD_INT 2
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21209: LD_ADDR_VAR 0 25
21213: PUSH
21214: LD_INT 0
21216: PUSH
21217: LD_INT 0
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 0
21226: PUSH
21227: LD_INT 1
21229: NEG
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 1
21237: PUSH
21238: LD_INT 0
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 1
21247: PUSH
21248: LD_INT 1
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 0
21257: PUSH
21258: LD_INT 1
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 1
21267: NEG
21268: PUSH
21269: LD_INT 0
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 1
21278: NEG
21279: PUSH
21280: LD_INT 1
21282: NEG
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 1
21290: NEG
21291: PUSH
21292: LD_INT 2
21294: NEG
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 0
21302: PUSH
21303: LD_INT 2
21305: NEG
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 1
21313: PUSH
21314: LD_INT 1
21316: NEG
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 2
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 2
21334: PUSH
21335: LD_INT 1
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 2
21344: PUSH
21345: LD_INT 2
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 1
21354: PUSH
21355: LD_INT 2
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 0
21364: PUSH
21365: LD_INT 2
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 1
21374: NEG
21375: PUSH
21376: LD_INT 1
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 2
21385: NEG
21386: PUSH
21387: LD_INT 0
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: LD_INT 2
21396: NEG
21397: PUSH
21398: LD_INT 1
21400: NEG
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 2
21408: NEG
21409: PUSH
21410: LD_INT 2
21412: NEG
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 3
21420: PUSH
21421: LD_INT 1
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 3
21430: PUSH
21431: LD_INT 2
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 2
21440: PUSH
21441: LD_INT 3
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 1
21450: PUSH
21451: LD_INT 3
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21483: LD_ADDR_VAR 0 26
21487: PUSH
21488: LD_INT 0
21490: PUSH
21491: LD_INT 0
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 0
21500: PUSH
21501: LD_INT 1
21503: NEG
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 1
21511: PUSH
21512: LD_INT 0
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 1
21521: PUSH
21522: LD_INT 1
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 0
21531: PUSH
21532: LD_INT 1
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 1
21541: NEG
21542: PUSH
21543: LD_INT 0
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 1
21552: NEG
21553: PUSH
21554: LD_INT 1
21556: NEG
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 1
21564: NEG
21565: PUSH
21566: LD_INT 2
21568: NEG
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 0
21576: PUSH
21577: LD_INT 2
21579: NEG
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 1
21587: PUSH
21588: LD_INT 1
21590: NEG
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 2
21598: PUSH
21599: LD_INT 0
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 2
21608: PUSH
21609: LD_INT 1
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 2
21618: PUSH
21619: LD_INT 2
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 1
21628: PUSH
21629: LD_INT 2
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 0
21638: PUSH
21639: LD_INT 2
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 1
21648: NEG
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 2
21659: NEG
21660: PUSH
21661: LD_INT 0
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 2
21670: NEG
21671: PUSH
21672: LD_INT 1
21674: NEG
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 2
21682: NEG
21683: PUSH
21684: LD_INT 2
21686: NEG
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 2
21694: PUSH
21695: LD_INT 3
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: LD_INT 3
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 1
21714: NEG
21715: PUSH
21716: LD_INT 2
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 2
21725: NEG
21726: PUSH
21727: LD_INT 1
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21759: LD_ADDR_VAR 0 27
21763: PUSH
21764: LD_INT 0
21766: PUSH
21767: LD_INT 0
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 0
21776: PUSH
21777: LD_INT 1
21779: NEG
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 1
21787: PUSH
21788: LD_INT 0
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: LD_INT 1
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 0
21807: PUSH
21808: LD_INT 1
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 1
21817: NEG
21818: PUSH
21819: LD_INT 0
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 1
21828: NEG
21829: PUSH
21830: LD_INT 1
21832: NEG
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 1
21840: NEG
21841: PUSH
21842: LD_INT 2
21844: NEG
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: LD_INT 2
21855: NEG
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 1
21863: PUSH
21864: LD_INT 1
21866: NEG
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 2
21874: PUSH
21875: LD_INT 0
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 2
21884: PUSH
21885: LD_INT 1
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 2
21894: PUSH
21895: LD_INT 2
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 1
21904: PUSH
21905: LD_INT 2
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 0
21914: PUSH
21915: LD_INT 2
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 1
21924: NEG
21925: PUSH
21926: LD_INT 1
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 2
21935: NEG
21936: PUSH
21937: LD_INT 0
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 2
21946: NEG
21947: PUSH
21948: LD_INT 1
21950: NEG
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 2
21958: NEG
21959: PUSH
21960: LD_INT 2
21962: NEG
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 1
21970: NEG
21971: PUSH
21972: LD_INT 2
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 2
21981: NEG
21982: PUSH
21983: LD_INT 1
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 3
21992: NEG
21993: PUSH
21994: LD_INT 1
21996: NEG
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 3
22004: NEG
22005: PUSH
22006: LD_INT 2
22008: NEG
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22039: LD_ADDR_VAR 0 28
22043: PUSH
22044: LD_INT 0
22046: PUSH
22047: LD_INT 0
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 0
22056: PUSH
22057: LD_INT 1
22059: NEG
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 1
22067: PUSH
22068: LD_INT 0
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 1
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 0
22087: PUSH
22088: LD_INT 1
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 1
22097: NEG
22098: PUSH
22099: LD_INT 0
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 1
22108: NEG
22109: PUSH
22110: LD_INT 1
22112: NEG
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 1
22120: NEG
22121: PUSH
22122: LD_INT 2
22124: NEG
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 0
22132: PUSH
22133: LD_INT 2
22135: NEG
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 1
22143: PUSH
22144: LD_INT 1
22146: NEG
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 2
22154: PUSH
22155: LD_INT 0
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 2
22164: PUSH
22165: LD_INT 1
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 2
22174: PUSH
22175: LD_INT 2
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 1
22184: PUSH
22185: LD_INT 2
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 0
22194: PUSH
22195: LD_INT 2
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 1
22204: NEG
22205: PUSH
22206: LD_INT 1
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 2
22215: NEG
22216: PUSH
22217: LD_INT 0
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 2
22226: NEG
22227: PUSH
22228: LD_INT 1
22230: NEG
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 2
22238: NEG
22239: PUSH
22240: LD_INT 2
22242: NEG
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 2
22250: NEG
22251: PUSH
22252: LD_INT 3
22254: NEG
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 1
22262: NEG
22263: PUSH
22264: LD_INT 3
22266: NEG
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 3
22274: NEG
22275: PUSH
22276: LD_INT 1
22278: NEG
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 3
22286: NEG
22287: PUSH
22288: LD_INT 2
22290: NEG
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22321: LD_ADDR_VAR 0 29
22325: PUSH
22326: LD_INT 0
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 0
22338: PUSH
22339: LD_INT 1
22341: NEG
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 1
22349: PUSH
22350: LD_INT 0
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 1
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 0
22369: PUSH
22370: LD_INT 1
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 1
22379: NEG
22380: PUSH
22381: LD_INT 0
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 1
22390: NEG
22391: PUSH
22392: LD_INT 1
22394: NEG
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: LD_INT 2
22406: NEG
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 0
22414: PUSH
22415: LD_INT 2
22417: NEG
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 1
22425: PUSH
22426: LD_INT 1
22428: NEG
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 2
22436: PUSH
22437: LD_INT 0
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 2
22446: PUSH
22447: LD_INT 1
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 1
22456: PUSH
22457: LD_INT 2
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 0
22466: PUSH
22467: LD_INT 2
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 1
22476: NEG
22477: PUSH
22478: LD_INT 1
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 2
22487: NEG
22488: PUSH
22489: LD_INT 1
22491: NEG
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 2
22499: NEG
22500: PUSH
22501: LD_INT 2
22503: NEG
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 2
22511: NEG
22512: PUSH
22513: LD_INT 3
22515: NEG
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 2
22523: PUSH
22524: LD_INT 1
22526: NEG
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 3
22534: PUSH
22535: LD_INT 1
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: LD_INT 3
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 1
22554: NEG
22555: PUSH
22556: LD_INT 2
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 3
22565: NEG
22566: PUSH
22567: LD_INT 2
22569: NEG
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22600: LD_ADDR_VAR 0 30
22604: PUSH
22605: LD_INT 0
22607: PUSH
22608: LD_INT 0
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 0
22617: PUSH
22618: LD_INT 1
22620: NEG
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: LD_INT 0
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 1
22638: PUSH
22639: LD_INT 1
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 0
22648: PUSH
22649: LD_INT 1
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 1
22658: NEG
22659: PUSH
22660: LD_INT 0
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 1
22669: NEG
22670: PUSH
22671: LD_INT 1
22673: NEG
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 1
22681: NEG
22682: PUSH
22683: LD_INT 2
22685: NEG
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 0
22693: PUSH
22694: LD_INT 2
22696: NEG
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 1
22704: PUSH
22705: LD_INT 1
22707: NEG
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 2
22715: PUSH
22716: LD_INT 0
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 2
22725: PUSH
22726: LD_INT 1
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: LD_INT 2
22735: PUSH
22736: LD_INT 2
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 1
22745: PUSH
22746: LD_INT 2
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 1
22755: NEG
22756: PUSH
22757: LD_INT 1
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 2
22766: NEG
22767: PUSH
22768: LD_INT 0
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 2
22777: NEG
22778: PUSH
22779: LD_INT 1
22781: NEG
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 1
22789: NEG
22790: PUSH
22791: LD_INT 3
22793: NEG
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 1
22801: PUSH
22802: LD_INT 2
22804: NEG
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 3
22812: PUSH
22813: LD_INT 2
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 2
22822: PUSH
22823: LD_INT 3
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 2
22832: NEG
22833: PUSH
22834: LD_INT 1
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 3
22843: NEG
22844: PUSH
22845: LD_INT 1
22847: NEG
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22878: LD_ADDR_VAR 0 31
22882: PUSH
22883: LD_INT 0
22885: PUSH
22886: LD_INT 0
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 0
22895: PUSH
22896: LD_INT 1
22898: NEG
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 1
22906: PUSH
22907: LD_INT 0
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 1
22916: PUSH
22917: LD_INT 1
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 0
22926: PUSH
22927: LD_INT 1
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 1
22936: NEG
22937: PUSH
22938: LD_INT 0
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 1
22947: NEG
22948: PUSH
22949: LD_INT 1
22951: NEG
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 1
22959: NEG
22960: PUSH
22961: LD_INT 2
22963: NEG
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 1
22971: PUSH
22972: LD_INT 1
22974: NEG
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 2
22982: PUSH
22983: LD_INT 0
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 2
22992: PUSH
22993: LD_INT 1
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 2
23002: PUSH
23003: LD_INT 2
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 1
23012: PUSH
23013: LD_INT 2
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 0
23022: PUSH
23023: LD_INT 2
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 1
23032: NEG
23033: PUSH
23034: LD_INT 1
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 2
23043: NEG
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 2
23055: NEG
23056: PUSH
23057: LD_INT 2
23059: NEG
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 2
23067: NEG
23068: PUSH
23069: LD_INT 3
23071: NEG
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 2
23079: PUSH
23080: LD_INT 1
23082: NEG
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 3
23090: PUSH
23091: LD_INT 1
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 1
23100: PUSH
23101: LD_INT 3
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 1
23110: NEG
23111: PUSH
23112: LD_INT 2
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 3
23121: NEG
23122: PUSH
23123: LD_INT 2
23125: NEG
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23156: LD_ADDR_VAR 0 32
23160: PUSH
23161: LD_INT 0
23163: PUSH
23164: LD_INT 0
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 0
23173: PUSH
23174: LD_INT 1
23176: NEG
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 1
23184: PUSH
23185: LD_INT 0
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 1
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 0
23204: PUSH
23205: LD_INT 1
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 1
23214: NEG
23215: PUSH
23216: LD_INT 0
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 1
23225: NEG
23226: PUSH
23227: LD_INT 1
23229: NEG
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 1
23237: NEG
23238: PUSH
23239: LD_INT 2
23241: NEG
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 0
23249: PUSH
23250: LD_INT 2
23252: NEG
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: LD_INT 1
23263: NEG
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 2
23271: PUSH
23272: LD_INT 1
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 2
23281: PUSH
23282: LD_INT 2
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 1
23291: PUSH
23292: LD_INT 2
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 0
23301: PUSH
23302: LD_INT 2
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 1
23311: NEG
23312: PUSH
23313: LD_INT 1
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 2
23322: NEG
23323: PUSH
23324: LD_INT 0
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 2
23333: NEG
23334: PUSH
23335: LD_INT 1
23337: NEG
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 1
23345: NEG
23346: PUSH
23347: LD_INT 3
23349: NEG
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 1
23357: PUSH
23358: LD_INT 2
23360: NEG
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 3
23368: PUSH
23369: LD_INT 2
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 2
23378: PUSH
23379: LD_INT 3
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 2
23388: NEG
23389: PUSH
23390: LD_INT 1
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 3
23399: NEG
23400: PUSH
23401: LD_INT 1
23403: NEG
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23434: LD_ADDR_VAR 0 33
23438: PUSH
23439: LD_INT 0
23441: PUSH
23442: LD_INT 0
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: LD_INT 0
23451: PUSH
23452: LD_INT 1
23454: NEG
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 1
23462: PUSH
23463: LD_INT 0
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 1
23472: PUSH
23473: LD_INT 1
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 0
23482: PUSH
23483: LD_INT 1
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 1
23492: NEG
23493: PUSH
23494: LD_INT 0
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 1
23503: NEG
23504: PUSH
23505: LD_INT 1
23507: NEG
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 1
23515: NEG
23516: PUSH
23517: LD_INT 2
23519: NEG
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: LD_INT 1
23530: NEG
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 2
23538: PUSH
23539: LD_INT 0
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: LD_INT 1
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 1
23558: PUSH
23559: LD_INT 2
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 0
23568: PUSH
23569: LD_INT 2
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 1
23578: NEG
23579: PUSH
23580: LD_INT 1
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 2
23589: NEG
23590: PUSH
23591: LD_INT 0
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 2
23600: NEG
23601: PUSH
23602: LD_INT 1
23604: NEG
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 2
23612: NEG
23613: PUSH
23614: LD_INT 2
23616: NEG
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 2
23624: NEG
23625: PUSH
23626: LD_INT 3
23628: NEG
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 2
23636: PUSH
23637: LD_INT 1
23639: NEG
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 3
23647: PUSH
23648: LD_INT 1
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 1
23657: PUSH
23658: LD_INT 3
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 1
23667: NEG
23668: PUSH
23669: LD_INT 2
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 3
23678: NEG
23679: PUSH
23680: LD_INT 2
23682: NEG
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23713: LD_ADDR_VAR 0 34
23717: PUSH
23718: LD_INT 0
23720: PUSH
23721: LD_INT 0
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 0
23730: PUSH
23731: LD_INT 1
23733: NEG
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: LD_INT 0
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: LD_INT 1
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: LD_INT 1
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 1
23771: NEG
23772: PUSH
23773: LD_INT 0
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 1
23782: NEG
23783: PUSH
23784: LD_INT 1
23786: NEG
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 1
23794: NEG
23795: PUSH
23796: LD_INT 2
23798: NEG
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 0
23806: PUSH
23807: LD_INT 2
23809: NEG
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 1
23817: PUSH
23818: LD_INT 1
23820: NEG
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 2
23828: PUSH
23829: LD_INT 1
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 2
23838: PUSH
23839: LD_INT 2
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: LD_INT 2
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 1
23858: NEG
23859: PUSH
23860: LD_INT 1
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 2
23869: NEG
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 2
23880: NEG
23881: PUSH
23882: LD_INT 1
23884: NEG
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 2
23892: NEG
23893: PUSH
23894: LD_INT 2
23896: NEG
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 1
23904: NEG
23905: PUSH
23906: LD_INT 3
23908: NEG
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 1
23916: PUSH
23917: LD_INT 2
23919: NEG
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 3
23927: PUSH
23928: LD_INT 2
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 2
23937: PUSH
23938: LD_INT 3
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 2
23947: NEG
23948: PUSH
23949: LD_INT 1
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 3
23958: NEG
23959: PUSH
23960: LD_INT 1
23962: NEG
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23993: LD_ADDR_VAR 0 35
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: LD_INT 0
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 0
24010: PUSH
24011: LD_INT 1
24013: NEG
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: PUSH
24022: LD_INT 0
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 1
24031: PUSH
24032: LD_INT 1
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 0
24041: PUSH
24042: LD_INT 1
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 1
24051: NEG
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 1
24062: NEG
24063: PUSH
24064: LD_INT 1
24066: NEG
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 2
24074: PUSH
24075: LD_INT 1
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 2
24084: NEG
24085: PUSH
24086: LD_INT 1
24088: NEG
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24105: LD_ADDR_VAR 0 36
24109: PUSH
24110: LD_INT 0
24112: PUSH
24113: LD_INT 0
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 0
24122: PUSH
24123: LD_INT 1
24125: NEG
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: PUSH
24134: LD_INT 0
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 1
24143: PUSH
24144: LD_INT 1
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 0
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: LD_INT 0
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 1
24174: NEG
24175: PUSH
24176: LD_INT 1
24178: NEG
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 1
24186: NEG
24187: PUSH
24188: LD_INT 2
24190: NEG
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: LD_INT 2
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24217: LD_ADDR_VAR 0 37
24221: PUSH
24222: LD_INT 0
24224: PUSH
24225: LD_INT 0
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: LD_INT 1
24237: NEG
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: LD_INT 0
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 1
24275: NEG
24276: PUSH
24277: LD_INT 0
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 1
24286: NEG
24287: PUSH
24288: LD_INT 1
24290: NEG
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: LD_INT 1
24301: NEG
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 1
24309: NEG
24310: PUSH
24311: LD_INT 1
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24329: LD_ADDR_VAR 0 38
24333: PUSH
24334: LD_INT 0
24336: PUSH
24337: LD_INT 0
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 0
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 1
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: LD_INT 1
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: LD_INT 1
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: LD_INT 0
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 1
24398: NEG
24399: PUSH
24400: LD_INT 1
24402: NEG
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 2
24410: PUSH
24411: LD_INT 1
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 2
24420: NEG
24421: PUSH
24422: LD_INT 1
24424: NEG
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24441: LD_ADDR_VAR 0 39
24445: PUSH
24446: LD_INT 0
24448: PUSH
24449: LD_INT 0
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: LD_INT 1
24461: NEG
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: LD_INT 0
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 1
24479: PUSH
24480: LD_INT 1
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 0
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: LD_INT 0
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 1
24510: NEG
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: NEG
24523: PUSH
24524: LD_INT 2
24526: NEG
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 1
24534: PUSH
24535: LD_INT 2
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24553: LD_ADDR_VAR 0 40
24557: PUSH
24558: LD_INT 0
24560: PUSH
24561: LD_INT 0
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 0
24570: PUSH
24571: LD_INT 1
24573: NEG
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: LD_INT 0
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 1
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: LD_INT 1
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 1
24611: NEG
24612: PUSH
24613: LD_INT 0
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 1
24622: NEG
24623: PUSH
24624: LD_INT 1
24626: NEG
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 1
24634: PUSH
24635: LD_INT 1
24637: NEG
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 1
24645: NEG
24646: PUSH
24647: LD_INT 1
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24665: LD_ADDR_VAR 0 41
24669: PUSH
24670: LD_INT 0
24672: PUSH
24673: LD_INT 0
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 0
24682: PUSH
24683: LD_INT 1
24685: NEG
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 1
24693: PUSH
24694: LD_INT 0
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 1
24703: PUSH
24704: LD_INT 1
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 0
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 1
24723: NEG
24724: PUSH
24725: LD_INT 0
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 1
24734: NEG
24735: PUSH
24736: LD_INT 1
24738: NEG
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 1
24746: NEG
24747: PUSH
24748: LD_INT 2
24750: NEG
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 1
24758: PUSH
24759: LD_INT 1
24761: NEG
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 2
24769: PUSH
24770: LD_INT 0
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 2
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 2
24789: PUSH
24790: LD_INT 2
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 1
24799: PUSH
24800: LD_INT 2
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 1
24809: NEG
24810: PUSH
24811: LD_INT 1
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 2
24820: NEG
24821: PUSH
24822: LD_INT 0
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 2
24831: NEG
24832: PUSH
24833: LD_INT 1
24835: NEG
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 2
24843: NEG
24844: PUSH
24845: LD_INT 2
24847: NEG
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 2
24855: NEG
24856: PUSH
24857: LD_INT 3
24859: NEG
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 2
24867: PUSH
24868: LD_INT 1
24870: NEG
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 3
24878: PUSH
24879: LD_INT 0
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 3
24888: PUSH
24889: LD_INT 1
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 3
24898: PUSH
24899: LD_INT 2
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 3
24908: PUSH
24909: LD_INT 3
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 2
24918: PUSH
24919: LD_INT 3
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 2
24928: NEG
24929: PUSH
24930: LD_INT 1
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 3
24939: NEG
24940: PUSH
24941: LD_INT 0
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 3
24950: NEG
24951: PUSH
24952: LD_INT 1
24954: NEG
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 3
24962: NEG
24963: PUSH
24964: LD_INT 2
24966: NEG
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 3
24974: NEG
24975: PUSH
24976: LD_INT 3
24978: NEG
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25015: LD_ADDR_VAR 0 42
25019: PUSH
25020: LD_INT 0
25022: PUSH
25023: LD_INT 0
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 0
25032: PUSH
25033: LD_INT 1
25035: NEG
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 1
25043: PUSH
25044: LD_INT 0
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 1
25053: PUSH
25054: LD_INT 1
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 0
25063: PUSH
25064: LD_INT 1
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 1
25073: NEG
25074: PUSH
25075: LD_INT 0
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 1
25084: NEG
25085: PUSH
25086: LD_INT 1
25088: NEG
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 1
25096: NEG
25097: PUSH
25098: LD_INT 2
25100: NEG
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 0
25108: PUSH
25109: LD_INT 2
25111: NEG
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 2
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 2
25140: PUSH
25141: LD_INT 2
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 1
25150: PUSH
25151: LD_INT 2
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 0
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: NEG
25171: PUSH
25172: LD_INT 1
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 2
25181: NEG
25182: PUSH
25183: LD_INT 1
25185: NEG
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 2
25193: NEG
25194: PUSH
25195: LD_INT 2
25197: NEG
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 2
25205: NEG
25206: PUSH
25207: LD_INT 3
25209: NEG
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 1
25217: NEG
25218: PUSH
25219: LD_INT 3
25221: NEG
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: LD_INT 3
25232: NEG
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 1
25240: PUSH
25241: LD_INT 2
25243: NEG
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 3
25251: PUSH
25252: LD_INT 2
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 3
25261: PUSH
25262: LD_INT 3
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 2
25271: PUSH
25272: LD_INT 3
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 1
25281: PUSH
25282: LD_INT 3
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 0
25291: PUSH
25292: LD_INT 3
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 1
25301: NEG
25302: PUSH
25303: LD_INT 2
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 3
25312: NEG
25313: PUSH
25314: LD_INT 2
25316: NEG
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 3
25324: NEG
25325: PUSH
25326: LD_INT 3
25328: NEG
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25365: LD_ADDR_VAR 0 43
25369: PUSH
25370: LD_INT 0
25372: PUSH
25373: LD_INT 0
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 0
25382: PUSH
25383: LD_INT 1
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 1
25393: PUSH
25394: LD_INT 0
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 1
25403: PUSH
25404: LD_INT 1
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 0
25413: PUSH
25414: LD_INT 1
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 1
25423: NEG
25424: PUSH
25425: LD_INT 0
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: LD_INT 1
25438: NEG
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 1
25446: NEG
25447: PUSH
25448: LD_INT 2
25450: NEG
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 0
25458: PUSH
25459: LD_INT 2
25461: NEG
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 1
25469: PUSH
25470: LD_INT 1
25472: NEG
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 2
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 2
25490: PUSH
25491: LD_INT 1
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 1
25500: PUSH
25501: LD_INT 2
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 0
25510: PUSH
25511: LD_INT 2
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 1
25520: NEG
25521: PUSH
25522: LD_INT 1
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 2
25531: NEG
25532: PUSH
25533: LD_INT 0
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 2
25542: NEG
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 1
25554: NEG
25555: PUSH
25556: LD_INT 3
25558: NEG
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 0
25566: PUSH
25567: LD_INT 3
25569: NEG
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 1
25577: PUSH
25578: LD_INT 2
25580: NEG
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 2
25588: PUSH
25589: LD_INT 1
25591: NEG
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 3
25599: PUSH
25600: LD_INT 0
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 3
25609: PUSH
25610: LD_INT 1
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 1
25619: PUSH
25620: LD_INT 3
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 0
25629: PUSH
25630: LD_INT 3
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: LD_INT 2
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 2
25650: NEG
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 3
25661: NEG
25662: PUSH
25663: LD_INT 0
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 3
25672: NEG
25673: PUSH
25674: LD_INT 1
25676: NEG
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25713: LD_ADDR_VAR 0 44
25717: PUSH
25718: LD_INT 0
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: LD_INT 1
25733: NEG
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 1
25741: PUSH
25742: LD_INT 0
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 1
25751: PUSH
25752: LD_INT 1
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 0
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 1
25782: NEG
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 1
25794: NEG
25795: PUSH
25796: LD_INT 2
25798: NEG
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 1
25806: PUSH
25807: LD_INT 1
25809: NEG
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 2
25817: PUSH
25818: LD_INT 0
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 2
25827: PUSH
25828: LD_INT 1
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 2
25837: PUSH
25838: LD_INT 2
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: LD_INT 2
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 1
25857: NEG
25858: PUSH
25859: LD_INT 1
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 2
25868: NEG
25869: PUSH
25870: LD_INT 0
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 2
25879: NEG
25880: PUSH
25881: LD_INT 1
25883: NEG
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 2
25891: NEG
25892: PUSH
25893: LD_INT 2
25895: NEG
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 2
25903: NEG
25904: PUSH
25905: LD_INT 3
25907: NEG
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 2
25915: PUSH
25916: LD_INT 1
25918: NEG
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 3
25926: PUSH
25927: LD_INT 0
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 3
25936: PUSH
25937: LD_INT 1
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 3
25946: PUSH
25947: LD_INT 2
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 3
25956: PUSH
25957: LD_INT 3
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 2
25966: PUSH
25967: LD_INT 3
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 2
25976: NEG
25977: PUSH
25978: LD_INT 1
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 3
25987: NEG
25988: PUSH
25989: LD_INT 0
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 3
25998: NEG
25999: PUSH
26000: LD_INT 1
26002: NEG
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 3
26010: NEG
26011: PUSH
26012: LD_INT 2
26014: NEG
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 3
26022: NEG
26023: PUSH
26024: LD_INT 3
26026: NEG
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26063: LD_ADDR_VAR 0 45
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: LD_INT 0
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 0
26080: PUSH
26081: LD_INT 1
26083: NEG
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 1
26091: PUSH
26092: LD_INT 0
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 1
26101: PUSH
26102: LD_INT 1
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 0
26111: PUSH
26112: LD_INT 1
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 1
26121: NEG
26122: PUSH
26123: LD_INT 0
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 1
26132: NEG
26133: PUSH
26134: LD_INT 1
26136: NEG
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 1
26144: NEG
26145: PUSH
26146: LD_INT 2
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 0
26156: PUSH
26157: LD_INT 2
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 1
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 2
26178: PUSH
26179: LD_INT 1
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 2
26188: PUSH
26189: LD_INT 2
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 1
26198: PUSH
26199: LD_INT 2
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 0
26208: PUSH
26209: LD_INT 2
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 1
26218: NEG
26219: PUSH
26220: LD_INT 1
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 2
26229: NEG
26230: PUSH
26231: LD_INT 1
26233: NEG
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 2
26241: NEG
26242: PUSH
26243: LD_INT 2
26245: NEG
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 2
26253: NEG
26254: PUSH
26255: LD_INT 3
26257: NEG
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 1
26265: NEG
26266: PUSH
26267: LD_INT 3
26269: NEG
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: LD_INT 3
26280: NEG
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: LD_INT 2
26291: NEG
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 3
26299: PUSH
26300: LD_INT 2
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 3
26309: PUSH
26310: LD_INT 3
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 2
26319: PUSH
26320: LD_INT 3
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 1
26329: PUSH
26330: LD_INT 3
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: LD_INT 3
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 1
26349: NEG
26350: PUSH
26351: LD_INT 2
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 3
26360: NEG
26361: PUSH
26362: LD_INT 2
26364: NEG
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 3
26372: NEG
26373: PUSH
26374: LD_INT 3
26376: NEG
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26413: LD_ADDR_VAR 0 46
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: LD_INT 0
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 0
26430: PUSH
26431: LD_INT 1
26433: NEG
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 1
26441: PUSH
26442: LD_INT 0
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 1
26451: PUSH
26452: LD_INT 1
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 0
26461: PUSH
26462: LD_INT 1
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 1
26471: NEG
26472: PUSH
26473: LD_INT 0
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 1
26482: NEG
26483: PUSH
26484: LD_INT 1
26486: NEG
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 1
26494: NEG
26495: PUSH
26496: LD_INT 2
26498: NEG
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 0
26506: PUSH
26507: LD_INT 2
26509: NEG
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 1
26517: PUSH
26518: LD_INT 1
26520: NEG
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 2
26528: PUSH
26529: LD_INT 0
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 2
26538: PUSH
26539: LD_INT 1
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 1
26548: PUSH
26549: LD_INT 2
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 0
26558: PUSH
26559: LD_INT 2
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 1
26568: NEG
26569: PUSH
26570: LD_INT 1
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 2
26579: NEG
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 2
26590: NEG
26591: PUSH
26592: LD_INT 1
26594: NEG
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: NEG
26603: PUSH
26604: LD_INT 3
26606: NEG
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: LD_INT 3
26617: NEG
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: LD_INT 2
26628: NEG
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 2
26636: PUSH
26637: LD_INT 1
26639: NEG
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 3
26647: PUSH
26648: LD_INT 0
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 3
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 1
26667: PUSH
26668: LD_INT 3
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: LD_INT 3
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: LD_INT 2
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 2
26698: NEG
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 3
26709: NEG
26710: PUSH
26711: LD_INT 0
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 3
26720: NEG
26721: PUSH
26722: LD_INT 1
26724: NEG
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26761: LD_ADDR_VAR 0 47
26765: PUSH
26766: LD_INT 0
26768: PUSH
26769: LD_INT 0
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 0
26778: PUSH
26779: LD_INT 1
26781: NEG
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 1
26789: PUSH
26790: LD_INT 0
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 1
26799: PUSH
26800: LD_INT 1
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 0
26809: PUSH
26810: LD_INT 1
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 1
26819: NEG
26820: PUSH
26821: LD_INT 0
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 1
26830: NEG
26831: PUSH
26832: LD_INT 1
26834: NEG
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 1
26842: NEG
26843: PUSH
26844: LD_INT 2
26846: NEG
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 0
26854: PUSH
26855: LD_INT 2
26857: NEG
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 1
26865: PUSH
26866: LD_INT 1
26868: NEG
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 2
26876: NEG
26877: PUSH
26878: LD_INT 1
26880: NEG
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 2
26888: NEG
26889: PUSH
26890: LD_INT 2
26892: NEG
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26912: LD_ADDR_VAR 0 48
26916: PUSH
26917: LD_INT 0
26919: PUSH
26920: LD_INT 0
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 0
26929: PUSH
26930: LD_INT 1
26932: NEG
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 1
26940: PUSH
26941: LD_INT 0
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 1
26950: PUSH
26951: LD_INT 1
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 0
26960: PUSH
26961: LD_INT 1
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 1
26970: NEG
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 1
26981: NEG
26982: PUSH
26983: LD_INT 1
26985: NEG
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 1
26993: NEG
26994: PUSH
26995: LD_INT 2
26997: NEG
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 0
27005: PUSH
27006: LD_INT 2
27008: NEG
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: LD_INT 1
27019: NEG
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 2
27027: PUSH
27028: LD_INT 0
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 2
27037: PUSH
27038: LD_INT 1
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27059: LD_ADDR_VAR 0 49
27063: PUSH
27064: LD_INT 0
27066: PUSH
27067: LD_INT 0
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 1
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: LD_INT 1
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: NEG
27129: PUSH
27130: LD_INT 1
27132: NEG
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: LD_INT 1
27143: NEG
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 2
27151: PUSH
27152: LD_INT 0
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 2
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 2
27171: PUSH
27172: LD_INT 2
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 1
27181: PUSH
27182: LD_INT 2
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27203: LD_ADDR_VAR 0 50
27207: PUSH
27208: LD_INT 0
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: LD_INT 1
27223: NEG
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 1
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 1
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 0
27251: PUSH
27252: LD_INT 1
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 1
27261: NEG
27262: PUSH
27263: LD_INT 0
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 1
27272: NEG
27273: PUSH
27274: LD_INT 1
27276: NEG
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 2
27284: PUSH
27285: LD_INT 1
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 2
27294: PUSH
27295: LD_INT 2
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 1
27304: PUSH
27305: LD_INT 2
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: LD_INT 2
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 1
27324: NEG
27325: PUSH
27326: LD_INT 1
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27347: LD_ADDR_VAR 0 51
27351: PUSH
27352: LD_INT 0
27354: PUSH
27355: LD_INT 0
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 0
27364: PUSH
27365: LD_INT 1
27367: NEG
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 1
27375: PUSH
27376: LD_INT 0
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 1
27385: PUSH
27386: LD_INT 1
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 0
27395: PUSH
27396: LD_INT 1
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 1
27405: NEG
27406: PUSH
27407: LD_INT 0
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: LD_INT 1
27416: NEG
27417: PUSH
27418: LD_INT 1
27420: NEG
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 1
27428: PUSH
27429: LD_INT 2
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 0
27438: PUSH
27439: LD_INT 2
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 1
27448: NEG
27449: PUSH
27450: LD_INT 1
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 2
27459: NEG
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 2
27470: NEG
27471: PUSH
27472: LD_INT 1
27474: NEG
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27494: LD_ADDR_VAR 0 52
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: LD_INT 0
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: LD_INT 1
27514: NEG
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 1
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: LD_INT 1
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: LD_INT 0
27542: PUSH
27543: LD_INT 1
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 1
27552: NEG
27553: PUSH
27554: LD_INT 0
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 1
27563: NEG
27564: PUSH
27565: LD_INT 1
27567: NEG
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 1
27575: NEG
27576: PUSH
27577: LD_INT 2
27579: NEG
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 1
27587: NEG
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 2
27598: NEG
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 2
27609: NEG
27610: PUSH
27611: LD_INT 1
27613: NEG
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 2
27621: NEG
27622: PUSH
27623: LD_INT 2
27625: NEG
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27645: LD_ADDR_VAR 0 53
27649: PUSH
27650: LD_INT 0
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 0
27662: PUSH
27663: LD_INT 1
27665: NEG
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 1
27673: PUSH
27674: LD_INT 0
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 1
27683: PUSH
27684: LD_INT 1
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 0
27693: PUSH
27694: LD_INT 1
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 1
27703: NEG
27704: PUSH
27705: LD_INT 0
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: LD_INT 1
27718: NEG
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 1
27726: NEG
27727: PUSH
27728: LD_INT 2
27730: NEG
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 0
27738: PUSH
27739: LD_INT 2
27741: NEG
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: LD_INT 1
27752: NEG
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 2
27760: PUSH
27761: LD_INT 0
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 2
27770: PUSH
27771: LD_INT 1
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 2
27780: PUSH
27781: LD_INT 2
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 1
27790: PUSH
27791: LD_INT 2
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: LD_INT 2
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 1
27810: NEG
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 2
27821: NEG
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 2
27832: NEG
27833: PUSH
27834: LD_INT 1
27836: NEG
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 2
27844: NEG
27845: PUSH
27846: LD_INT 2
27848: NEG
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27875: LD_ADDR_VAR 0 54
27879: PUSH
27880: LD_INT 0
27882: PUSH
27883: LD_INT 0
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 0
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 1
27903: PUSH
27904: LD_INT 0
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 1
27913: PUSH
27914: LD_INT 1
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 0
27923: PUSH
27924: LD_INT 1
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: NEG
27934: PUSH
27935: LD_INT 0
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 1
27944: NEG
27945: PUSH
27946: LD_INT 1
27948: NEG
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 1
27956: NEG
27957: PUSH
27958: LD_INT 2
27960: NEG
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 0
27968: PUSH
27969: LD_INT 2
27971: NEG
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: LD_INT 1
27982: NEG
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 2
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 2
28000: PUSH
28001: LD_INT 1
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 2
28010: PUSH
28011: LD_INT 2
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 1
28020: PUSH
28021: LD_INT 2
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 0
28030: PUSH
28031: LD_INT 2
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 1
28040: NEG
28041: PUSH
28042: LD_INT 1
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 2
28051: NEG
28052: PUSH
28053: LD_INT 0
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 2
28062: NEG
28063: PUSH
28064: LD_INT 1
28066: NEG
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 2
28074: NEG
28075: PUSH
28076: LD_INT 2
28078: NEG
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28105: LD_ADDR_VAR 0 55
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 1
28133: PUSH
28134: LD_INT 0
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 1
28143: PUSH
28144: LD_INT 1
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 0
28153: PUSH
28154: LD_INT 1
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 1
28163: NEG
28164: PUSH
28165: LD_INT 0
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 1
28174: NEG
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 1
28186: NEG
28187: PUSH
28188: LD_INT 2
28190: NEG
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 0
28198: PUSH
28199: LD_INT 2
28201: NEG
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: PUSH
28210: LD_INT 1
28212: NEG
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 2
28220: PUSH
28221: LD_INT 0
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 2
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 2
28240: PUSH
28241: LD_INT 2
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 1
28250: PUSH
28251: LD_INT 2
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 0
28260: PUSH
28261: LD_INT 2
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 1
28270: NEG
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 2
28281: NEG
28282: PUSH
28283: LD_INT 0
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 2
28292: NEG
28293: PUSH
28294: LD_INT 1
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 2
28304: NEG
28305: PUSH
28306: LD_INT 2
28308: NEG
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28335: LD_ADDR_VAR 0 56
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 0
28352: PUSH
28353: LD_INT 1
28355: NEG
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 1
28363: PUSH
28364: LD_INT 0
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 1
28373: PUSH
28374: LD_INT 1
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 0
28383: PUSH
28384: LD_INT 1
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 1
28393: NEG
28394: PUSH
28395: LD_INT 0
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 1
28404: NEG
28405: PUSH
28406: LD_INT 1
28408: NEG
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 1
28416: NEG
28417: PUSH
28418: LD_INT 2
28420: NEG
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 0
28428: PUSH
28429: LD_INT 2
28431: NEG
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 2
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 2
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 2
28470: PUSH
28471: LD_INT 2
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 1
28480: PUSH
28481: LD_INT 2
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 0
28490: PUSH
28491: LD_INT 2
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 1
28500: NEG
28501: PUSH
28502: LD_INT 1
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 2
28511: NEG
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 2
28522: NEG
28523: PUSH
28524: LD_INT 1
28526: NEG
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 2
28534: NEG
28535: PUSH
28536: LD_INT 2
28538: NEG
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28565: LD_ADDR_VAR 0 57
28569: PUSH
28570: LD_INT 0
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 0
28582: PUSH
28583: LD_INT 1
28585: NEG
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 1
28593: PUSH
28594: LD_INT 0
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 1
28603: PUSH
28604: LD_INT 1
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: LD_INT 1
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 1
28623: NEG
28624: PUSH
28625: LD_INT 0
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 1
28634: NEG
28635: PUSH
28636: LD_INT 1
28638: NEG
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 1
28646: NEG
28647: PUSH
28648: LD_INT 2
28650: NEG
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 0
28658: PUSH
28659: LD_INT 2
28661: NEG
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 1
28669: PUSH
28670: LD_INT 1
28672: NEG
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 2
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 2
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 2
28700: PUSH
28701: LD_INT 2
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 1
28710: PUSH
28711: LD_INT 2
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 0
28720: PUSH
28721: LD_INT 2
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 2
28741: NEG
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 2
28752: NEG
28753: PUSH
28754: LD_INT 1
28756: NEG
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 2
28764: NEG
28765: PUSH
28766: LD_INT 2
28768: NEG
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28795: LD_ADDR_VAR 0 58
28799: PUSH
28800: LD_INT 0
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 0
28812: PUSH
28813: LD_INT 1
28815: NEG
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 1
28823: PUSH
28824: LD_INT 0
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: LD_INT 1
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: LD_INT 1
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 1
28853: NEG
28854: PUSH
28855: LD_INT 0
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 1
28864: NEG
28865: PUSH
28866: LD_INT 1
28868: NEG
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 1
28876: NEG
28877: PUSH
28878: LD_INT 2
28880: NEG
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: LD_INT 2
28891: NEG
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 1
28899: PUSH
28900: LD_INT 1
28902: NEG
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 2
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 2
28920: PUSH
28921: LD_INT 1
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 2
28930: PUSH
28931: LD_INT 2
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 1
28940: PUSH
28941: LD_INT 2
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 0
28950: PUSH
28951: LD_INT 2
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 1
28960: NEG
28961: PUSH
28962: LD_INT 1
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 2
28971: NEG
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 2
28982: NEG
28983: PUSH
28984: LD_INT 1
28986: NEG
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 2
28994: NEG
28995: PUSH
28996: LD_INT 2
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29025: LD_ADDR_VAR 0 59
29029: PUSH
29030: LD_INT 0
29032: PUSH
29033: LD_INT 0
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 0
29042: PUSH
29043: LD_INT 1
29045: NEG
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 1
29053: PUSH
29054: LD_INT 0
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: LD_INT 1
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 0
29073: PUSH
29074: LD_INT 1
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 1
29083: NEG
29084: PUSH
29085: LD_INT 0
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 1
29094: NEG
29095: PUSH
29096: LD_INT 1
29098: NEG
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29113: LD_ADDR_VAR 0 60
29117: PUSH
29118: LD_INT 0
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 0
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: PUSH
29142: LD_INT 0
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 1
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 0
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 1
29182: NEG
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29201: LD_ADDR_VAR 0 61
29205: PUSH
29206: LD_INT 0
29208: PUSH
29209: LD_INT 0
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 0
29218: PUSH
29219: LD_INT 1
29221: NEG
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 1
29229: PUSH
29230: LD_INT 0
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 1
29239: PUSH
29240: LD_INT 1
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 0
29249: PUSH
29250: LD_INT 1
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 1
29259: NEG
29260: PUSH
29261: LD_INT 0
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 1
29270: NEG
29271: PUSH
29272: LD_INT 1
29274: NEG
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29289: LD_ADDR_VAR 0 62
29293: PUSH
29294: LD_INT 0
29296: PUSH
29297: LD_INT 0
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 0
29306: PUSH
29307: LD_INT 1
29309: NEG
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 1
29317: PUSH
29318: LD_INT 0
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 1
29327: PUSH
29328: LD_INT 1
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 0
29337: PUSH
29338: LD_INT 1
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 1
29347: NEG
29348: PUSH
29349: LD_INT 0
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 1
29358: NEG
29359: PUSH
29360: LD_INT 1
29362: NEG
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29377: LD_ADDR_VAR 0 63
29381: PUSH
29382: LD_INT 0
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: LD_INT 1
29397: NEG
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 1
29415: PUSH
29416: LD_INT 1
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 0
29425: PUSH
29426: LD_INT 1
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 1
29435: NEG
29436: PUSH
29437: LD_INT 0
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 1
29446: NEG
29447: PUSH
29448: LD_INT 1
29450: NEG
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29465: LD_ADDR_VAR 0 64
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: LD_INT 0
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 0
29482: PUSH
29483: LD_INT 1
29485: NEG
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: LD_INT 0
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 1
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 0
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 1
29523: NEG
29524: PUSH
29525: LD_INT 0
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 1
29534: NEG
29535: PUSH
29536: LD_INT 1
29538: NEG
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: ST_TO_ADDR
// end ; 1 :
29553: GO 35450
29555: LD_INT 1
29557: DOUBLE
29558: EQUAL
29559: IFTRUE 29563
29561: GO 32186
29563: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29564: LD_ADDR_VAR 0 11
29568: PUSH
29569: LD_INT 1
29571: NEG
29572: PUSH
29573: LD_INT 3
29575: NEG
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 0
29583: PUSH
29584: LD_INT 3
29586: NEG
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 1
29594: PUSH
29595: LD_INT 2
29597: NEG
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: LIST
29607: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29608: LD_ADDR_VAR 0 12
29612: PUSH
29613: LD_INT 2
29615: PUSH
29616: LD_INT 1
29618: NEG
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 3
29626: PUSH
29627: LD_INT 0
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 3
29636: PUSH
29637: LD_INT 1
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: LIST
29648: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29649: LD_ADDR_VAR 0 13
29653: PUSH
29654: LD_INT 3
29656: PUSH
29657: LD_INT 2
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 3
29666: PUSH
29667: LD_INT 3
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 2
29676: PUSH
29677: LD_INT 3
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: LIST
29688: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29689: LD_ADDR_VAR 0 14
29693: PUSH
29694: LD_INT 1
29696: PUSH
29697: LD_INT 3
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 0
29706: PUSH
29707: LD_INT 3
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 1
29716: NEG
29717: PUSH
29718: LD_INT 2
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: LIST
29729: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29730: LD_ADDR_VAR 0 15
29734: PUSH
29735: LD_INT 2
29737: NEG
29738: PUSH
29739: LD_INT 1
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 3
29748: NEG
29749: PUSH
29750: LD_INT 0
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 3
29759: NEG
29760: PUSH
29761: LD_INT 1
29763: NEG
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: LIST
29773: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29774: LD_ADDR_VAR 0 16
29778: PUSH
29779: LD_INT 2
29781: NEG
29782: PUSH
29783: LD_INT 3
29785: NEG
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 3
29793: NEG
29794: PUSH
29795: LD_INT 2
29797: NEG
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 3
29805: NEG
29806: PUSH
29807: LD_INT 3
29809: NEG
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: LIST
29819: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29820: LD_ADDR_VAR 0 17
29824: PUSH
29825: LD_INT 1
29827: NEG
29828: PUSH
29829: LD_INT 3
29831: NEG
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 0
29839: PUSH
29840: LD_INT 3
29842: NEG
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 1
29850: PUSH
29851: LD_INT 2
29853: NEG
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: LIST
29863: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29864: LD_ADDR_VAR 0 18
29868: PUSH
29869: LD_INT 2
29871: PUSH
29872: LD_INT 1
29874: NEG
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: LD_INT 0
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 3
29892: PUSH
29893: LD_INT 1
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: LIST
29904: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29905: LD_ADDR_VAR 0 19
29909: PUSH
29910: LD_INT 3
29912: PUSH
29913: LD_INT 2
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 3
29922: PUSH
29923: LD_INT 3
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 2
29932: PUSH
29933: LD_INT 3
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: LIST
29944: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29945: LD_ADDR_VAR 0 20
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: LD_INT 3
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 0
29962: PUSH
29963: LD_INT 3
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 1
29972: NEG
29973: PUSH
29974: LD_INT 2
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: LIST
29985: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29986: LD_ADDR_VAR 0 21
29990: PUSH
29991: LD_INT 2
29993: NEG
29994: PUSH
29995: LD_INT 1
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 3
30004: NEG
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 3
30015: NEG
30016: PUSH
30017: LD_INT 1
30019: NEG
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: LIST
30029: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30030: LD_ADDR_VAR 0 22
30034: PUSH
30035: LD_INT 2
30037: NEG
30038: PUSH
30039: LD_INT 3
30041: NEG
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 3
30049: NEG
30050: PUSH
30051: LD_INT 2
30053: NEG
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 3
30061: NEG
30062: PUSH
30063: LD_INT 3
30065: NEG
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: LIST
30075: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30076: LD_ADDR_VAR 0 23
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: LD_INT 3
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 1
30094: NEG
30095: PUSH
30096: LD_INT 4
30098: NEG
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 1
30106: PUSH
30107: LD_INT 3
30109: NEG
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: LIST
30119: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30120: LD_ADDR_VAR 0 24
30124: PUSH
30125: LD_INT 3
30127: PUSH
30128: LD_INT 0
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 3
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 4
30148: PUSH
30149: LD_INT 1
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: LIST
30160: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30161: LD_ADDR_VAR 0 25
30165: PUSH
30166: LD_INT 3
30168: PUSH
30169: LD_INT 3
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 4
30178: PUSH
30179: LD_INT 3
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 3
30188: PUSH
30189: LD_INT 4
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: LIST
30200: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30201: LD_ADDR_VAR 0 26
30205: PUSH
30206: LD_INT 0
30208: PUSH
30209: LD_INT 3
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 1
30218: PUSH
30219: LD_INT 4
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 1
30228: NEG
30229: PUSH
30230: LD_INT 3
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: LIST
30241: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30242: LD_ADDR_VAR 0 27
30246: PUSH
30247: LD_INT 3
30249: NEG
30250: PUSH
30251: LD_INT 0
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 3
30260: NEG
30261: PUSH
30262: LD_INT 1
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 4
30271: NEG
30272: PUSH
30273: LD_INT 1
30275: NEG
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: LIST
30285: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30286: LD_ADDR_VAR 0 28
30290: PUSH
30291: LD_INT 3
30293: NEG
30294: PUSH
30295: LD_INT 3
30297: NEG
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 3
30305: NEG
30306: PUSH
30307: LD_INT 4
30309: NEG
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 4
30317: NEG
30318: PUSH
30319: LD_INT 3
30321: NEG
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: LIST
30331: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30332: LD_ADDR_VAR 0 29
30336: PUSH
30337: LD_INT 1
30339: NEG
30340: PUSH
30341: LD_INT 3
30343: NEG
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 0
30351: PUSH
30352: LD_INT 3
30354: NEG
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 1
30362: PUSH
30363: LD_INT 2
30365: NEG
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 1
30373: NEG
30374: PUSH
30375: LD_INT 4
30377: NEG
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 0
30385: PUSH
30386: LD_INT 4
30388: NEG
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: LD_INT 3
30399: NEG
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 1
30407: NEG
30408: PUSH
30409: LD_INT 5
30411: NEG
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 0
30419: PUSH
30420: LD_INT 5
30422: NEG
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 1
30430: PUSH
30431: LD_INT 4
30433: NEG
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 1
30441: NEG
30442: PUSH
30443: LD_INT 6
30445: NEG
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: LD_INT 6
30456: NEG
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: LD_INT 5
30467: NEG
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30487: LD_ADDR_VAR 0 30
30491: PUSH
30492: LD_INT 2
30494: PUSH
30495: LD_INT 1
30497: NEG
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 3
30505: PUSH
30506: LD_INT 0
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 3
30515: PUSH
30516: LD_INT 1
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 3
30525: PUSH
30526: LD_INT 1
30528: NEG
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 4
30536: PUSH
30537: LD_INT 0
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 4
30546: PUSH
30547: LD_INT 1
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 4
30556: PUSH
30557: LD_INT 1
30559: NEG
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 5
30567: PUSH
30568: LD_INT 0
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 5
30577: PUSH
30578: LD_INT 1
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 5
30587: PUSH
30588: LD_INT 1
30590: NEG
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 6
30598: PUSH
30599: LD_INT 0
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 6
30608: PUSH
30609: LD_INT 1
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30630: LD_ADDR_VAR 0 31
30634: PUSH
30635: LD_INT 3
30637: PUSH
30638: LD_INT 2
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 3
30647: PUSH
30648: LD_INT 3
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 2
30657: PUSH
30658: LD_INT 3
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 4
30667: PUSH
30668: LD_INT 3
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 4
30677: PUSH
30678: LD_INT 4
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 3
30687: PUSH
30688: LD_INT 4
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 5
30697: PUSH
30698: LD_INT 4
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 5
30707: PUSH
30708: LD_INT 5
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 4
30717: PUSH
30718: LD_INT 5
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 6
30727: PUSH
30728: LD_INT 5
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 6
30737: PUSH
30738: LD_INT 6
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 5
30747: PUSH
30748: LD_INT 6
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30769: LD_ADDR_VAR 0 32
30773: PUSH
30774: LD_INT 1
30776: PUSH
30777: LD_INT 3
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 0
30786: PUSH
30787: LD_INT 3
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 1
30796: NEG
30797: PUSH
30798: LD_INT 2
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 1
30807: PUSH
30808: LD_INT 4
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 0
30817: PUSH
30818: LD_INT 4
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 1
30827: NEG
30828: PUSH
30829: LD_INT 3
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 1
30838: PUSH
30839: LD_INT 5
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 0
30848: PUSH
30849: LD_INT 5
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 1
30858: NEG
30859: PUSH
30860: LD_INT 4
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 1
30869: PUSH
30870: LD_INT 6
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 0
30879: PUSH
30880: LD_INT 6
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 1
30889: NEG
30890: PUSH
30891: LD_INT 5
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30912: LD_ADDR_VAR 0 33
30916: PUSH
30917: LD_INT 2
30919: NEG
30920: PUSH
30921: LD_INT 1
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 3
30930: NEG
30931: PUSH
30932: LD_INT 0
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 3
30941: NEG
30942: PUSH
30943: LD_INT 1
30945: NEG
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 3
30953: NEG
30954: PUSH
30955: LD_INT 1
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 4
30964: NEG
30965: PUSH
30966: LD_INT 0
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 4
30975: NEG
30976: PUSH
30977: LD_INT 1
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 4
30987: NEG
30988: PUSH
30989: LD_INT 1
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 5
30998: NEG
30999: PUSH
31000: LD_INT 0
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 5
31009: NEG
31010: PUSH
31011: LD_INT 1
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 5
31021: NEG
31022: PUSH
31023: LD_INT 1
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 6
31032: NEG
31033: PUSH
31034: LD_INT 0
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 6
31043: NEG
31044: PUSH
31045: LD_INT 1
31047: NEG
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31067: LD_ADDR_VAR 0 34
31071: PUSH
31072: LD_INT 2
31074: NEG
31075: PUSH
31076: LD_INT 3
31078: NEG
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 3
31086: NEG
31087: PUSH
31088: LD_INT 2
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 3
31098: NEG
31099: PUSH
31100: LD_INT 3
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 3
31110: NEG
31111: PUSH
31112: LD_INT 4
31114: NEG
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 4
31122: NEG
31123: PUSH
31124: LD_INT 3
31126: NEG
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 4
31134: NEG
31135: PUSH
31136: LD_INT 4
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 4
31146: NEG
31147: PUSH
31148: LD_INT 5
31150: NEG
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 5
31158: NEG
31159: PUSH
31160: LD_INT 4
31162: NEG
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 5
31170: NEG
31171: PUSH
31172: LD_INT 5
31174: NEG
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 5
31182: NEG
31183: PUSH
31184: LD_INT 6
31186: NEG
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 6
31194: NEG
31195: PUSH
31196: LD_INT 5
31198: NEG
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 6
31206: NEG
31207: PUSH
31208: LD_INT 6
31210: NEG
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31230: LD_ADDR_VAR 0 41
31234: PUSH
31235: LD_INT 0
31237: PUSH
31238: LD_INT 2
31240: NEG
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 1
31248: NEG
31249: PUSH
31250: LD_INT 3
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: LD_INT 2
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: LIST
31273: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31274: LD_ADDR_VAR 0 42
31278: PUSH
31279: LD_INT 2
31281: PUSH
31282: LD_INT 0
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 2
31291: PUSH
31292: LD_INT 1
31294: NEG
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 3
31302: PUSH
31303: LD_INT 1
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: LIST
31314: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31315: LD_ADDR_VAR 0 43
31319: PUSH
31320: LD_INT 2
31322: PUSH
31323: LD_INT 2
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 3
31332: PUSH
31333: LD_INT 2
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 2
31342: PUSH
31343: LD_INT 3
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: LIST
31354: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31355: LD_ADDR_VAR 0 44
31359: PUSH
31360: LD_INT 0
31362: PUSH
31363: LD_INT 2
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 1
31372: PUSH
31373: LD_INT 3
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 1
31382: NEG
31383: PUSH
31384: LD_INT 2
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: LIST
31395: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31396: LD_ADDR_VAR 0 45
31400: PUSH
31401: LD_INT 2
31403: NEG
31404: PUSH
31405: LD_INT 0
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 2
31414: NEG
31415: PUSH
31416: LD_INT 1
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 3
31425: NEG
31426: PUSH
31427: LD_INT 1
31429: NEG
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: LIST
31439: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31440: LD_ADDR_VAR 0 46
31444: PUSH
31445: LD_INT 2
31447: NEG
31448: PUSH
31449: LD_INT 2
31451: NEG
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 2
31459: NEG
31460: PUSH
31461: LD_INT 3
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 3
31471: NEG
31472: PUSH
31473: LD_INT 2
31475: NEG
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: LIST
31485: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31486: LD_ADDR_VAR 0 47
31490: PUSH
31491: LD_INT 2
31493: NEG
31494: PUSH
31495: LD_INT 3
31497: NEG
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 1
31505: NEG
31506: PUSH
31507: LD_INT 3
31509: NEG
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31519: LD_ADDR_VAR 0 48
31523: PUSH
31524: LD_INT 1
31526: PUSH
31527: LD_INT 2
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 2
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31550: LD_ADDR_VAR 0 49
31554: PUSH
31555: LD_INT 3
31557: PUSH
31558: LD_INT 1
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 3
31567: PUSH
31568: LD_INT 2
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31579: LD_ADDR_VAR 0 50
31583: PUSH
31584: LD_INT 2
31586: PUSH
31587: LD_INT 3
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 1
31596: PUSH
31597: LD_INT 3
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31608: LD_ADDR_VAR 0 51
31612: PUSH
31613: LD_INT 1
31615: NEG
31616: PUSH
31617: LD_INT 2
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 2
31626: NEG
31627: PUSH
31628: LD_INT 1
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31639: LD_ADDR_VAR 0 52
31643: PUSH
31644: LD_INT 3
31646: NEG
31647: PUSH
31648: LD_INT 1
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 3
31658: NEG
31659: PUSH
31660: LD_INT 2
31662: NEG
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31672: LD_ADDR_VAR 0 53
31676: PUSH
31677: LD_INT 1
31679: NEG
31680: PUSH
31681: LD_INT 3
31683: NEG
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 0
31691: PUSH
31692: LD_INT 3
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: LD_INT 2
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: LIST
31715: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31716: LD_ADDR_VAR 0 54
31720: PUSH
31721: LD_INT 2
31723: PUSH
31724: LD_INT 1
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 3
31734: PUSH
31735: LD_INT 0
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 3
31744: PUSH
31745: LD_INT 1
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: LIST
31756: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31757: LD_ADDR_VAR 0 55
31761: PUSH
31762: LD_INT 3
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 3
31774: PUSH
31775: LD_INT 3
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 2
31784: PUSH
31785: LD_INT 3
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: LIST
31796: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31797: LD_ADDR_VAR 0 56
31801: PUSH
31802: LD_INT 1
31804: PUSH
31805: LD_INT 3
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 0
31814: PUSH
31815: LD_INT 3
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 1
31824: NEG
31825: PUSH
31826: LD_INT 2
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: LIST
31837: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31838: LD_ADDR_VAR 0 57
31842: PUSH
31843: LD_INT 2
31845: NEG
31846: PUSH
31847: LD_INT 1
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 3
31856: NEG
31857: PUSH
31858: LD_INT 0
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 3
31867: NEG
31868: PUSH
31869: LD_INT 1
31871: NEG
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: LIST
31881: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31882: LD_ADDR_VAR 0 58
31886: PUSH
31887: LD_INT 2
31889: NEG
31890: PUSH
31891: LD_INT 3
31893: NEG
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 3
31901: NEG
31902: PUSH
31903: LD_INT 2
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 3
31913: NEG
31914: PUSH
31915: LD_INT 3
31917: NEG
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: LIST
31927: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31928: LD_ADDR_VAR 0 59
31932: PUSH
31933: LD_INT 1
31935: NEG
31936: PUSH
31937: LD_INT 2
31939: NEG
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 0
31947: PUSH
31948: LD_INT 2
31950: NEG
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 1
31958: PUSH
31959: LD_INT 1
31961: NEG
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: LIST
31971: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31972: LD_ADDR_VAR 0 60
31976: PUSH
31977: LD_INT 1
31979: PUSH
31980: LD_INT 1
31982: NEG
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 2
31990: PUSH
31991: LD_INT 0
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 2
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: LIST
32012: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32013: LD_ADDR_VAR 0 61
32017: PUSH
32018: LD_INT 2
32020: PUSH
32021: LD_INT 1
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 2
32030: PUSH
32031: LD_INT 2
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 1
32040: PUSH
32041: LD_INT 2
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: LIST
32052: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32053: LD_ADDR_VAR 0 62
32057: PUSH
32058: LD_INT 1
32060: PUSH
32061: LD_INT 2
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 0
32070: PUSH
32071: LD_INT 2
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 1
32080: NEG
32081: PUSH
32082: LD_INT 1
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: LIST
32093: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32094: LD_ADDR_VAR 0 63
32098: PUSH
32099: LD_INT 1
32101: NEG
32102: PUSH
32103: LD_INT 1
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 2
32112: NEG
32113: PUSH
32114: LD_INT 0
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 2
32123: NEG
32124: PUSH
32125: LD_INT 1
32127: NEG
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: LIST
32137: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32138: LD_ADDR_VAR 0 64
32142: PUSH
32143: LD_INT 1
32145: NEG
32146: PUSH
32147: LD_INT 2
32149: NEG
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 2
32157: NEG
32158: PUSH
32159: LD_INT 1
32161: NEG
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 2
32169: NEG
32170: PUSH
32171: LD_INT 2
32173: NEG
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: LIST
32183: ST_TO_ADDR
// end ; 2 :
32184: GO 35450
32186: LD_INT 2
32188: DOUBLE
32189: EQUAL
32190: IFTRUE 32194
32192: GO 35449
32194: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32195: LD_ADDR_VAR 0 29
32199: PUSH
32200: LD_INT 4
32202: PUSH
32203: LD_INT 0
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 4
32212: PUSH
32213: LD_INT 1
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 5
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 5
32233: PUSH
32234: LD_INT 1
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 4
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 3
32253: PUSH
32254: LD_INT 0
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 3
32263: PUSH
32264: LD_INT 1
32266: NEG
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 3
32274: PUSH
32275: LD_INT 2
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 5
32285: PUSH
32286: LD_INT 2
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 3
32295: PUSH
32296: LD_INT 3
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 3
32305: PUSH
32306: LD_INT 2
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 4
32315: PUSH
32316: LD_INT 3
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 4
32325: PUSH
32326: LD_INT 4
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 3
32335: PUSH
32336: LD_INT 4
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 2
32345: PUSH
32346: LD_INT 3
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 2
32355: PUSH
32356: LD_INT 2
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 4
32365: PUSH
32366: LD_INT 2
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 2
32375: PUSH
32376: LD_INT 4
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 0
32385: PUSH
32386: LD_INT 4
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 0
32395: PUSH
32396: LD_INT 3
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: PUSH
32406: LD_INT 4
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 1
32415: PUSH
32416: LD_INT 5
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 0
32425: PUSH
32426: LD_INT 5
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 1
32435: NEG
32436: PUSH
32437: LD_INT 4
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: LD_INT 3
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 2
32457: PUSH
32458: LD_INT 5
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 2
32467: NEG
32468: PUSH
32469: LD_INT 3
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 3
32478: NEG
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 3
32489: NEG
32490: PUSH
32491: LD_INT 1
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 2
32501: NEG
32502: PUSH
32503: LD_INT 0
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 2
32512: NEG
32513: PUSH
32514: LD_INT 1
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 3
32523: NEG
32524: PUSH
32525: LD_INT 1
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 4
32534: NEG
32535: PUSH
32536: LD_INT 0
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 4
32545: NEG
32546: PUSH
32547: LD_INT 1
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 4
32557: NEG
32558: PUSH
32559: LD_INT 2
32561: NEG
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 2
32569: NEG
32570: PUSH
32571: LD_INT 2
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 4
32580: NEG
32581: PUSH
32582: LD_INT 4
32584: NEG
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 4
32592: NEG
32593: PUSH
32594: LD_INT 5
32596: NEG
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 3
32604: NEG
32605: PUSH
32606: LD_INT 4
32608: NEG
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 3
32616: NEG
32617: PUSH
32618: LD_INT 3
32620: NEG
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 4
32628: NEG
32629: PUSH
32630: LD_INT 3
32632: NEG
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 5
32640: NEG
32641: PUSH
32642: LD_INT 4
32644: NEG
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 5
32652: NEG
32653: PUSH
32654: LD_INT 5
32656: NEG
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 3
32664: NEG
32665: PUSH
32666: LD_INT 5
32668: NEG
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 5
32676: NEG
32677: PUSH
32678: LD_INT 3
32680: NEG
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32733: LD_ADDR_VAR 0 30
32737: PUSH
32738: LD_INT 4
32740: PUSH
32741: LD_INT 4
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 4
32750: PUSH
32751: LD_INT 3
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 5
32760: PUSH
32761: LD_INT 4
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 5
32770: PUSH
32771: LD_INT 5
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 4
32780: PUSH
32781: LD_INT 5
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 3
32790: PUSH
32791: LD_INT 4
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 3
32800: PUSH
32801: LD_INT 3
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 5
32810: PUSH
32811: LD_INT 3
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 3
32820: PUSH
32821: LD_INT 5
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: LD_INT 3
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: LD_INT 2
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 1
32850: PUSH
32851: LD_INT 3
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 1
32860: PUSH
32861: LD_INT 4
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 0
32870: PUSH
32871: LD_INT 4
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 1
32880: NEG
32881: PUSH
32882: LD_INT 3
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 1
32891: NEG
32892: PUSH
32893: LD_INT 2
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 2
32902: PUSH
32903: LD_INT 4
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 2
32912: NEG
32913: PUSH
32914: LD_INT 2
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 4
32923: NEG
32924: PUSH
32925: LD_INT 0
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 4
32934: NEG
32935: PUSH
32936: LD_INT 1
32938: NEG
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 3
32946: NEG
32947: PUSH
32948: LD_INT 0
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 3
32957: NEG
32958: PUSH
32959: LD_INT 1
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 4
32968: NEG
32969: PUSH
32970: LD_INT 1
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 5
32979: NEG
32980: PUSH
32981: LD_INT 0
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 5
32990: NEG
32991: PUSH
32992: LD_INT 1
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 5
33002: NEG
33003: PUSH
33004: LD_INT 2
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 3
33014: NEG
33015: PUSH
33016: LD_INT 2
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 3
33025: NEG
33026: PUSH
33027: LD_INT 3
33029: NEG
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 3
33037: NEG
33038: PUSH
33039: LD_INT 4
33041: NEG
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 2
33049: NEG
33050: PUSH
33051: LD_INT 3
33053: NEG
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 2
33061: NEG
33062: PUSH
33063: LD_INT 2
33065: NEG
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 3
33073: NEG
33074: PUSH
33075: LD_INT 2
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 4
33085: NEG
33086: PUSH
33087: LD_INT 3
33089: NEG
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 4
33097: NEG
33098: PUSH
33099: LD_INT 4
33101: NEG
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 2
33109: NEG
33110: PUSH
33111: LD_INT 4
33113: NEG
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 4
33121: NEG
33122: PUSH
33123: LD_INT 2
33125: NEG
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 0
33133: PUSH
33134: LD_INT 4
33136: NEG
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 0
33144: PUSH
33145: LD_INT 5
33147: NEG
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 1
33155: PUSH
33156: LD_INT 4
33158: NEG
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 1
33166: PUSH
33167: LD_INT 3
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: LD_INT 3
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 1
33188: NEG
33189: PUSH
33190: LD_INT 4
33192: NEG
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 1
33200: NEG
33201: PUSH
33202: LD_INT 5
33204: NEG
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 2
33212: PUSH
33213: LD_INT 3
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 2
33223: NEG
33224: PUSH
33225: LD_INT 5
33227: NEG
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33280: LD_ADDR_VAR 0 31
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: LD_INT 4
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 0
33297: PUSH
33298: LD_INT 3
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: LD_INT 4
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 1
33317: PUSH
33318: LD_INT 5
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 0
33327: PUSH
33328: LD_INT 5
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: LD_INT 4
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 1
33348: NEG
33349: PUSH
33350: LD_INT 3
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 2
33359: PUSH
33360: LD_INT 5
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 2
33369: NEG
33370: PUSH
33371: LD_INT 3
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 3
33380: NEG
33381: PUSH
33382: LD_INT 0
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 3
33391: NEG
33392: PUSH
33393: LD_INT 1
33395: NEG
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 2
33403: NEG
33404: PUSH
33405: LD_INT 0
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 2
33414: NEG
33415: PUSH
33416: LD_INT 1
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 3
33425: NEG
33426: PUSH
33427: LD_INT 1
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 4
33436: NEG
33437: PUSH
33438: LD_INT 0
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 4
33447: NEG
33448: PUSH
33449: LD_INT 1
33451: NEG
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 4
33459: NEG
33460: PUSH
33461: LD_INT 2
33463: NEG
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 2
33471: NEG
33472: PUSH
33473: LD_INT 2
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 4
33482: NEG
33483: PUSH
33484: LD_INT 4
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 4
33494: NEG
33495: PUSH
33496: LD_INT 5
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 3
33506: NEG
33507: PUSH
33508: LD_INT 4
33510: NEG
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 3
33518: NEG
33519: PUSH
33520: LD_INT 3
33522: NEG
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 4
33530: NEG
33531: PUSH
33532: LD_INT 3
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 5
33542: NEG
33543: PUSH
33544: LD_INT 4
33546: NEG
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 5
33554: NEG
33555: PUSH
33556: LD_INT 5
33558: NEG
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 3
33566: NEG
33567: PUSH
33568: LD_INT 5
33570: NEG
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 5
33578: NEG
33579: PUSH
33580: LD_INT 3
33582: NEG
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 0
33590: PUSH
33591: LD_INT 3
33593: NEG
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 0
33601: PUSH
33602: LD_INT 4
33604: NEG
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 1
33612: PUSH
33613: LD_INT 3
33615: NEG
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 1
33623: PUSH
33624: LD_INT 2
33626: NEG
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: LD_INT 2
33637: NEG
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 1
33645: NEG
33646: PUSH
33647: LD_INT 3
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 1
33657: NEG
33658: PUSH
33659: LD_INT 4
33661: NEG
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 2
33669: PUSH
33670: LD_INT 2
33672: NEG
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 2
33680: NEG
33681: PUSH
33682: LD_INT 4
33684: NEG
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 4
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 4
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 5
33713: PUSH
33714: LD_INT 0
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 5
33723: PUSH
33724: LD_INT 1
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 4
33733: PUSH
33734: LD_INT 1
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 3
33743: PUSH
33744: LD_INT 0
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 3
33753: PUSH
33754: LD_INT 1
33756: NEG
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 3
33764: PUSH
33765: LD_INT 2
33767: NEG
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 5
33775: PUSH
33776: LD_INT 2
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33830: LD_ADDR_VAR 0 32
33834: PUSH
33835: LD_INT 4
33837: NEG
33838: PUSH
33839: LD_INT 0
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 4
33848: NEG
33849: PUSH
33850: LD_INT 1
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 3
33860: NEG
33861: PUSH
33862: LD_INT 0
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 3
33871: NEG
33872: PUSH
33873: LD_INT 1
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 4
33882: NEG
33883: PUSH
33884: LD_INT 1
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 5
33893: NEG
33894: PUSH
33895: LD_INT 0
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 5
33904: NEG
33905: PUSH
33906: LD_INT 1
33908: NEG
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 5
33916: NEG
33917: PUSH
33918: LD_INT 2
33920: NEG
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 3
33928: NEG
33929: PUSH
33930: LD_INT 2
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 3
33939: NEG
33940: PUSH
33941: LD_INT 3
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 3
33951: NEG
33952: PUSH
33953: LD_INT 4
33955: NEG
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 2
33963: NEG
33964: PUSH
33965: LD_INT 3
33967: NEG
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 2
33975: NEG
33976: PUSH
33977: LD_INT 2
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 3
33987: NEG
33988: PUSH
33989: LD_INT 2
33991: NEG
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 4
33999: NEG
34000: PUSH
34001: LD_INT 3
34003: NEG
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 4
34011: NEG
34012: PUSH
34013: LD_INT 4
34015: NEG
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 2
34023: NEG
34024: PUSH
34025: LD_INT 4
34027: NEG
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 4
34035: NEG
34036: PUSH
34037: LD_INT 2
34039: NEG
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 0
34047: PUSH
34048: LD_INT 4
34050: NEG
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 0
34058: PUSH
34059: LD_INT 5
34061: NEG
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 1
34069: PUSH
34070: LD_INT 4
34072: NEG
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 1
34080: PUSH
34081: LD_INT 3
34083: NEG
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 0
34091: PUSH
34092: LD_INT 3
34094: NEG
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 1
34102: NEG
34103: PUSH
34104: LD_INT 4
34106: NEG
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 1
34114: NEG
34115: PUSH
34116: LD_INT 5
34118: NEG
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 2
34126: PUSH
34127: LD_INT 3
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 2
34137: NEG
34138: PUSH
34139: LD_INT 5
34141: NEG
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 3
34149: PUSH
34150: LD_INT 0
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 3
34159: PUSH
34160: LD_INT 1
34162: NEG
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 4
34170: PUSH
34171: LD_INT 0
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 4
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 3
34190: PUSH
34191: LD_INT 1
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 2
34200: PUSH
34201: LD_INT 0
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 2
34210: PUSH
34211: LD_INT 1
34213: NEG
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 2
34221: PUSH
34222: LD_INT 2
34224: NEG
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 4
34232: PUSH
34233: LD_INT 2
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 4
34242: PUSH
34243: LD_INT 4
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 4
34252: PUSH
34253: LD_INT 3
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 5
34262: PUSH
34263: LD_INT 4
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 5
34272: PUSH
34273: LD_INT 5
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 4
34282: PUSH
34283: LD_INT 5
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 3
34292: PUSH
34293: LD_INT 4
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 3
34302: PUSH
34303: LD_INT 3
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 5
34312: PUSH
34313: LD_INT 3
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 3
34322: PUSH
34323: LD_INT 5
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34377: LD_ADDR_VAR 0 33
34381: PUSH
34382: LD_INT 4
34384: NEG
34385: PUSH
34386: LD_INT 4
34388: NEG
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 4
34396: NEG
34397: PUSH
34398: LD_INT 5
34400: NEG
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 3
34408: NEG
34409: PUSH
34410: LD_INT 4
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 3
34420: NEG
34421: PUSH
34422: LD_INT 3
34424: NEG
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 4
34432: NEG
34433: PUSH
34434: LD_INT 3
34436: NEG
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 5
34444: NEG
34445: PUSH
34446: LD_INT 4
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 5
34456: NEG
34457: PUSH
34458: LD_INT 5
34460: NEG
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 3
34468: NEG
34469: PUSH
34470: LD_INT 5
34472: NEG
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 5
34480: NEG
34481: PUSH
34482: LD_INT 3
34484: NEG
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: LD_INT 3
34495: NEG
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 0
34503: PUSH
34504: LD_INT 4
34506: NEG
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 1
34514: PUSH
34515: LD_INT 3
34517: NEG
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 1
34525: PUSH
34526: LD_INT 2
34528: NEG
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: LD_INT 2
34539: NEG
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: NEG
34548: PUSH
34549: LD_INT 3
34551: NEG
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 1
34559: NEG
34560: PUSH
34561: LD_INT 4
34563: NEG
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 2
34571: PUSH
34572: LD_INT 2
34574: NEG
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 2
34582: NEG
34583: PUSH
34584: LD_INT 4
34586: NEG
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 4
34594: PUSH
34595: LD_INT 0
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 4
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 5
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 5
34625: PUSH
34626: LD_INT 1
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 4
34635: PUSH
34636: LD_INT 1
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 3
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 3
34655: PUSH
34656: LD_INT 1
34658: NEG
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 3
34666: PUSH
34667: LD_INT 2
34669: NEG
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 5
34677: PUSH
34678: LD_INT 2
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 3
34687: PUSH
34688: LD_INT 3
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 3
34697: PUSH
34698: LD_INT 2
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 4
34707: PUSH
34708: LD_INT 3
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 4
34717: PUSH
34718: LD_INT 4
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 3
34727: PUSH
34728: LD_INT 4
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 2
34737: PUSH
34738: LD_INT 3
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 2
34747: PUSH
34748: LD_INT 2
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 4
34757: PUSH
34758: LD_INT 2
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 2
34767: PUSH
34768: LD_INT 4
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: LD_INT 4
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 3
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: PUSH
34798: LD_INT 4
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 1
34807: PUSH
34808: LD_INT 5
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 0
34817: PUSH
34818: LD_INT 5
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 1
34827: NEG
34828: PUSH
34829: LD_INT 4
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 1
34838: NEG
34839: PUSH
34840: LD_INT 3
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 2
34849: PUSH
34850: LD_INT 5
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 2
34859: NEG
34860: PUSH
34861: LD_INT 3
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34915: LD_ADDR_VAR 0 34
34919: PUSH
34920: LD_INT 0
34922: PUSH
34923: LD_INT 4
34925: NEG
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 0
34933: PUSH
34934: LD_INT 5
34936: NEG
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 1
34944: PUSH
34945: LD_INT 4
34947: NEG
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 1
34955: PUSH
34956: LD_INT 3
34958: NEG
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 0
34966: PUSH
34967: LD_INT 3
34969: NEG
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 1
34977: NEG
34978: PUSH
34979: LD_INT 4
34981: NEG
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: LD_INT 5
34993: NEG
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 2
35001: PUSH
35002: LD_INT 3
35004: NEG
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 2
35012: NEG
35013: PUSH
35014: LD_INT 5
35016: NEG
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 3
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 3
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 4
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 4
35055: PUSH
35056: LD_INT 1
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 3
35065: PUSH
35066: LD_INT 1
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 2
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 2
35085: PUSH
35086: LD_INT 1
35088: NEG
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 2
35096: PUSH
35097: LD_INT 2
35099: NEG
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 4
35107: PUSH
35108: LD_INT 2
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 4
35117: PUSH
35118: LD_INT 4
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 4
35127: PUSH
35128: LD_INT 3
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 5
35137: PUSH
35138: LD_INT 4
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 5
35147: PUSH
35148: LD_INT 5
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 4
35157: PUSH
35158: LD_INT 5
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 3
35167: PUSH
35168: LD_INT 4
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 3
35177: PUSH
35178: LD_INT 3
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 5
35187: PUSH
35188: LD_INT 3
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 3
35197: PUSH
35198: LD_INT 5
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: LD_INT 3
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 0
35217: PUSH
35218: LD_INT 2
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: LD_INT 3
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: LD_INT 4
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: LD_INT 4
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 1
35257: NEG
35258: PUSH
35259: LD_INT 3
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: LD_INT 2
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 2
35279: PUSH
35280: LD_INT 4
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 2
35289: NEG
35290: PUSH
35291: LD_INT 2
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 4
35300: NEG
35301: PUSH
35302: LD_INT 0
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 4
35311: NEG
35312: PUSH
35313: LD_INT 1
35315: NEG
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 3
35323: NEG
35324: PUSH
35325: LD_INT 0
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 3
35334: NEG
35335: PUSH
35336: LD_INT 1
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 4
35345: NEG
35346: PUSH
35347: LD_INT 1
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 5
35356: NEG
35357: PUSH
35358: LD_INT 0
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 5
35367: NEG
35368: PUSH
35369: LD_INT 1
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 5
35379: NEG
35380: PUSH
35381: LD_INT 2
35383: NEG
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 3
35391: NEG
35392: PUSH
35393: LD_INT 2
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: ST_TO_ADDR
// end ; end ;
35447: GO 35450
35449: POP
// case btype of b_depot , b_warehouse :
35450: LD_VAR 0 1
35454: PUSH
35455: LD_INT 0
35457: DOUBLE
35458: EQUAL
35459: IFTRUE 35469
35461: LD_INT 1
35463: DOUBLE
35464: EQUAL
35465: IFTRUE 35469
35467: GO 35670
35469: POP
// case nation of nation_american :
35470: LD_VAR 0 5
35474: PUSH
35475: LD_INT 1
35477: DOUBLE
35478: EQUAL
35479: IFTRUE 35483
35481: GO 35539
35483: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35484: LD_ADDR_VAR 0 9
35488: PUSH
35489: LD_VAR 0 11
35493: PUSH
35494: LD_VAR 0 12
35498: PUSH
35499: LD_VAR 0 13
35503: PUSH
35504: LD_VAR 0 14
35508: PUSH
35509: LD_VAR 0 15
35513: PUSH
35514: LD_VAR 0 16
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: PUSH
35527: LD_VAR 0 4
35531: PUSH
35532: LD_INT 1
35534: PLUS
35535: ARRAY
35536: ST_TO_ADDR
35537: GO 35668
35539: LD_INT 2
35541: DOUBLE
35542: EQUAL
35543: IFTRUE 35547
35545: GO 35603
35547: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35548: LD_ADDR_VAR 0 9
35552: PUSH
35553: LD_VAR 0 17
35557: PUSH
35558: LD_VAR 0 18
35562: PUSH
35563: LD_VAR 0 19
35567: PUSH
35568: LD_VAR 0 20
35572: PUSH
35573: LD_VAR 0 21
35577: PUSH
35578: LD_VAR 0 22
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: PUSH
35591: LD_VAR 0 4
35595: PUSH
35596: LD_INT 1
35598: PLUS
35599: ARRAY
35600: ST_TO_ADDR
35601: GO 35668
35603: LD_INT 3
35605: DOUBLE
35606: EQUAL
35607: IFTRUE 35611
35609: GO 35667
35611: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35612: LD_ADDR_VAR 0 9
35616: PUSH
35617: LD_VAR 0 23
35621: PUSH
35622: LD_VAR 0 24
35626: PUSH
35627: LD_VAR 0 25
35631: PUSH
35632: LD_VAR 0 26
35636: PUSH
35637: LD_VAR 0 27
35641: PUSH
35642: LD_VAR 0 28
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: PUSH
35655: LD_VAR 0 4
35659: PUSH
35660: LD_INT 1
35662: PLUS
35663: ARRAY
35664: ST_TO_ADDR
35665: GO 35668
35667: POP
35668: GO 36223
35670: LD_INT 2
35672: DOUBLE
35673: EQUAL
35674: IFTRUE 35684
35676: LD_INT 3
35678: DOUBLE
35679: EQUAL
35680: IFTRUE 35684
35682: GO 35740
35684: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35685: LD_ADDR_VAR 0 9
35689: PUSH
35690: LD_VAR 0 29
35694: PUSH
35695: LD_VAR 0 30
35699: PUSH
35700: LD_VAR 0 31
35704: PUSH
35705: LD_VAR 0 32
35709: PUSH
35710: LD_VAR 0 33
35714: PUSH
35715: LD_VAR 0 34
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: PUSH
35728: LD_VAR 0 4
35732: PUSH
35733: LD_INT 1
35735: PLUS
35736: ARRAY
35737: ST_TO_ADDR
35738: GO 36223
35740: LD_INT 16
35742: DOUBLE
35743: EQUAL
35744: IFTRUE 35802
35746: LD_INT 17
35748: DOUBLE
35749: EQUAL
35750: IFTRUE 35802
35752: LD_INT 18
35754: DOUBLE
35755: EQUAL
35756: IFTRUE 35802
35758: LD_INT 19
35760: DOUBLE
35761: EQUAL
35762: IFTRUE 35802
35764: LD_INT 22
35766: DOUBLE
35767: EQUAL
35768: IFTRUE 35802
35770: LD_INT 20
35772: DOUBLE
35773: EQUAL
35774: IFTRUE 35802
35776: LD_INT 21
35778: DOUBLE
35779: EQUAL
35780: IFTRUE 35802
35782: LD_INT 23
35784: DOUBLE
35785: EQUAL
35786: IFTRUE 35802
35788: LD_INT 24
35790: DOUBLE
35791: EQUAL
35792: IFTRUE 35802
35794: LD_INT 25
35796: DOUBLE
35797: EQUAL
35798: IFTRUE 35802
35800: GO 35858
35802: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35803: LD_ADDR_VAR 0 9
35807: PUSH
35808: LD_VAR 0 35
35812: PUSH
35813: LD_VAR 0 36
35817: PUSH
35818: LD_VAR 0 37
35822: PUSH
35823: LD_VAR 0 38
35827: PUSH
35828: LD_VAR 0 39
35832: PUSH
35833: LD_VAR 0 40
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: PUSH
35846: LD_VAR 0 4
35850: PUSH
35851: LD_INT 1
35853: PLUS
35854: ARRAY
35855: ST_TO_ADDR
35856: GO 36223
35858: LD_INT 6
35860: DOUBLE
35861: EQUAL
35862: IFTRUE 35914
35864: LD_INT 7
35866: DOUBLE
35867: EQUAL
35868: IFTRUE 35914
35870: LD_INT 8
35872: DOUBLE
35873: EQUAL
35874: IFTRUE 35914
35876: LD_INT 13
35878: DOUBLE
35879: EQUAL
35880: IFTRUE 35914
35882: LD_INT 12
35884: DOUBLE
35885: EQUAL
35886: IFTRUE 35914
35888: LD_INT 15
35890: DOUBLE
35891: EQUAL
35892: IFTRUE 35914
35894: LD_INT 11
35896: DOUBLE
35897: EQUAL
35898: IFTRUE 35914
35900: LD_INT 14
35902: DOUBLE
35903: EQUAL
35904: IFTRUE 35914
35906: LD_INT 10
35908: DOUBLE
35909: EQUAL
35910: IFTRUE 35914
35912: GO 35970
35914: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35915: LD_ADDR_VAR 0 9
35919: PUSH
35920: LD_VAR 0 41
35924: PUSH
35925: LD_VAR 0 42
35929: PUSH
35930: LD_VAR 0 43
35934: PUSH
35935: LD_VAR 0 44
35939: PUSH
35940: LD_VAR 0 45
35944: PUSH
35945: LD_VAR 0 46
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: PUSH
35958: LD_VAR 0 4
35962: PUSH
35963: LD_INT 1
35965: PLUS
35966: ARRAY
35967: ST_TO_ADDR
35968: GO 36223
35970: LD_INT 36
35972: DOUBLE
35973: EQUAL
35974: IFTRUE 35978
35976: GO 36034
35978: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35979: LD_ADDR_VAR 0 9
35983: PUSH
35984: LD_VAR 0 47
35988: PUSH
35989: LD_VAR 0 48
35993: PUSH
35994: LD_VAR 0 49
35998: PUSH
35999: LD_VAR 0 50
36003: PUSH
36004: LD_VAR 0 51
36008: PUSH
36009: LD_VAR 0 52
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: PUSH
36022: LD_VAR 0 4
36026: PUSH
36027: LD_INT 1
36029: PLUS
36030: ARRAY
36031: ST_TO_ADDR
36032: GO 36223
36034: LD_INT 4
36036: DOUBLE
36037: EQUAL
36038: IFTRUE 36060
36040: LD_INT 5
36042: DOUBLE
36043: EQUAL
36044: IFTRUE 36060
36046: LD_INT 34
36048: DOUBLE
36049: EQUAL
36050: IFTRUE 36060
36052: LD_INT 37
36054: DOUBLE
36055: EQUAL
36056: IFTRUE 36060
36058: GO 36116
36060: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36061: LD_ADDR_VAR 0 9
36065: PUSH
36066: LD_VAR 0 53
36070: PUSH
36071: LD_VAR 0 54
36075: PUSH
36076: LD_VAR 0 55
36080: PUSH
36081: LD_VAR 0 56
36085: PUSH
36086: LD_VAR 0 57
36090: PUSH
36091: LD_VAR 0 58
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: PUSH
36104: LD_VAR 0 4
36108: PUSH
36109: LD_INT 1
36111: PLUS
36112: ARRAY
36113: ST_TO_ADDR
36114: GO 36223
36116: LD_INT 31
36118: DOUBLE
36119: EQUAL
36120: IFTRUE 36166
36122: LD_INT 32
36124: DOUBLE
36125: EQUAL
36126: IFTRUE 36166
36128: LD_INT 33
36130: DOUBLE
36131: EQUAL
36132: IFTRUE 36166
36134: LD_INT 27
36136: DOUBLE
36137: EQUAL
36138: IFTRUE 36166
36140: LD_INT 26
36142: DOUBLE
36143: EQUAL
36144: IFTRUE 36166
36146: LD_INT 28
36148: DOUBLE
36149: EQUAL
36150: IFTRUE 36166
36152: LD_INT 29
36154: DOUBLE
36155: EQUAL
36156: IFTRUE 36166
36158: LD_INT 30
36160: DOUBLE
36161: EQUAL
36162: IFTRUE 36166
36164: GO 36222
36166: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36167: LD_ADDR_VAR 0 9
36171: PUSH
36172: LD_VAR 0 59
36176: PUSH
36177: LD_VAR 0 60
36181: PUSH
36182: LD_VAR 0 61
36186: PUSH
36187: LD_VAR 0 62
36191: PUSH
36192: LD_VAR 0 63
36196: PUSH
36197: LD_VAR 0 64
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: PUSH
36210: LD_VAR 0 4
36214: PUSH
36215: LD_INT 1
36217: PLUS
36218: ARRAY
36219: ST_TO_ADDR
36220: GO 36223
36222: POP
// temp_list2 = [ ] ;
36223: LD_ADDR_VAR 0 10
36227: PUSH
36228: EMPTY
36229: ST_TO_ADDR
// for i in temp_list do
36230: LD_ADDR_VAR 0 8
36234: PUSH
36235: LD_VAR 0 9
36239: PUSH
36240: FOR_IN
36241: IFFALSE 36293
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36243: LD_ADDR_VAR 0 10
36247: PUSH
36248: LD_VAR 0 10
36252: PUSH
36253: LD_VAR 0 8
36257: PUSH
36258: LD_INT 1
36260: ARRAY
36261: PUSH
36262: LD_VAR 0 2
36266: PLUS
36267: PUSH
36268: LD_VAR 0 8
36272: PUSH
36273: LD_INT 2
36275: ARRAY
36276: PUSH
36277: LD_VAR 0 3
36281: PLUS
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: EMPTY
36288: LIST
36289: ADD
36290: ST_TO_ADDR
36291: GO 36240
36293: POP
36294: POP
// result = temp_list2 ;
36295: LD_ADDR_VAR 0 7
36299: PUSH
36300: LD_VAR 0 10
36304: ST_TO_ADDR
// end ;
36305: LD_VAR 0 7
36309: RET
// export function EnemyInRange ( unit , dist ) ; begin
36310: LD_INT 0
36312: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36313: LD_ADDR_VAR 0 3
36317: PUSH
36318: LD_VAR 0 1
36322: PPUSH
36323: CALL_OW 255
36327: PPUSH
36328: LD_VAR 0 1
36332: PPUSH
36333: CALL_OW 250
36337: PPUSH
36338: LD_VAR 0 1
36342: PPUSH
36343: CALL_OW 251
36347: PPUSH
36348: LD_VAR 0 2
36352: PPUSH
36353: CALL 10081 0 4
36357: PUSH
36358: LD_INT 4
36360: ARRAY
36361: ST_TO_ADDR
// end ;
36362: LD_VAR 0 3
36366: RET
// export function PlayerSeeMe ( unit ) ; begin
36367: LD_INT 0
36369: PPUSH
// result := See ( your_side , unit ) ;
36370: LD_ADDR_VAR 0 2
36374: PUSH
36375: LD_OWVAR 2
36379: PPUSH
36380: LD_VAR 0 1
36384: PPUSH
36385: CALL_OW 292
36389: ST_TO_ADDR
// end ;
36390: LD_VAR 0 2
36394: RET
// export function ReverseDir ( unit ) ; begin
36395: LD_INT 0
36397: PPUSH
// if not unit then
36398: LD_VAR 0 1
36402: NOT
36403: IFFALSE 36407
// exit ;
36405: GO 36430
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36407: LD_ADDR_VAR 0 2
36411: PUSH
36412: LD_VAR 0 1
36416: PPUSH
36417: CALL_OW 254
36421: PUSH
36422: LD_INT 3
36424: PLUS
36425: PUSH
36426: LD_INT 6
36428: MOD
36429: ST_TO_ADDR
// end ;
36430: LD_VAR 0 2
36434: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
36435: LD_INT 0
36437: PPUSH
36438: PPUSH
36439: PPUSH
36440: PPUSH
36441: PPUSH
// if not hexes then
36442: LD_VAR 0 2
36446: NOT
36447: IFFALSE 36451
// exit ;
36449: GO 36599
// dist := 9999 ;
36451: LD_ADDR_VAR 0 5
36455: PUSH
36456: LD_INT 9999
36458: ST_TO_ADDR
// for i = 1 to hexes do
36459: LD_ADDR_VAR 0 4
36463: PUSH
36464: DOUBLE
36465: LD_INT 1
36467: DEC
36468: ST_TO_ADDR
36469: LD_VAR 0 2
36473: PUSH
36474: FOR_TO
36475: IFFALSE 36587
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
36477: LD_VAR 0 1
36481: PPUSH
36482: LD_VAR 0 2
36486: PUSH
36487: LD_VAR 0 4
36491: ARRAY
36492: PUSH
36493: LD_INT 1
36495: ARRAY
36496: PPUSH
36497: LD_VAR 0 2
36501: PUSH
36502: LD_VAR 0 4
36506: ARRAY
36507: PUSH
36508: LD_INT 2
36510: ARRAY
36511: PPUSH
36512: CALL_OW 297
36516: PUSH
36517: LD_VAR 0 5
36521: LESS
36522: IFFALSE 36585
// begin hex := hexes [ i ] ;
36524: LD_ADDR_VAR 0 7
36528: PUSH
36529: LD_VAR 0 2
36533: PUSH
36534: LD_VAR 0 4
36538: ARRAY
36539: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36540: LD_ADDR_VAR 0 5
36544: PUSH
36545: LD_VAR 0 1
36549: PPUSH
36550: LD_VAR 0 2
36554: PUSH
36555: LD_VAR 0 4
36559: ARRAY
36560: PUSH
36561: LD_INT 1
36563: ARRAY
36564: PPUSH
36565: LD_VAR 0 2
36569: PUSH
36570: LD_VAR 0 4
36574: ARRAY
36575: PUSH
36576: LD_INT 2
36578: ARRAY
36579: PPUSH
36580: CALL_OW 297
36584: ST_TO_ADDR
// end ; end ;
36585: GO 36474
36587: POP
36588: POP
// result := hex ;
36589: LD_ADDR_VAR 0 3
36593: PUSH
36594: LD_VAR 0 7
36598: ST_TO_ADDR
// end ;
36599: LD_VAR 0 3
36603: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36604: LD_INT 0
36606: PPUSH
36607: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36608: LD_VAR 0 1
36612: NOT
36613: PUSH
36614: LD_VAR 0 1
36618: PUSH
36619: LD_INT 21
36621: PUSH
36622: LD_INT 2
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 23
36631: PUSH
36632: LD_INT 2
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PPUSH
36643: CALL_OW 69
36647: IN
36648: NOT
36649: OR
36650: IFFALSE 36654
// exit ;
36652: GO 36701
// for i = 1 to 3 do
36654: LD_ADDR_VAR 0 3
36658: PUSH
36659: DOUBLE
36660: LD_INT 1
36662: DEC
36663: ST_TO_ADDR
36664: LD_INT 3
36666: PUSH
36667: FOR_TO
36668: IFFALSE 36699
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36670: LD_VAR 0 1
36674: PPUSH
36675: CALL_OW 250
36679: PPUSH
36680: LD_VAR 0 1
36684: PPUSH
36685: CALL_OW 251
36689: PPUSH
36690: LD_INT 1
36692: PPUSH
36693: CALL_OW 453
36697: GO 36667
36699: POP
36700: POP
// end ;
36701: LD_VAR 0 2
36705: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36706: LD_INT 0
36708: PPUSH
36709: PPUSH
36710: PPUSH
36711: PPUSH
36712: PPUSH
36713: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36714: LD_VAR 0 1
36718: NOT
36719: PUSH
36720: LD_VAR 0 2
36724: NOT
36725: OR
36726: PUSH
36727: LD_VAR 0 1
36731: PPUSH
36732: CALL_OW 314
36736: OR
36737: IFFALSE 36741
// exit ;
36739: GO 37182
// x := GetX ( enemy_unit ) ;
36741: LD_ADDR_VAR 0 7
36745: PUSH
36746: LD_VAR 0 2
36750: PPUSH
36751: CALL_OW 250
36755: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36756: LD_ADDR_VAR 0 8
36760: PUSH
36761: LD_VAR 0 2
36765: PPUSH
36766: CALL_OW 251
36770: ST_TO_ADDR
// if not x or not y then
36771: LD_VAR 0 7
36775: NOT
36776: PUSH
36777: LD_VAR 0 8
36781: NOT
36782: OR
36783: IFFALSE 36787
// exit ;
36785: GO 37182
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36787: LD_ADDR_VAR 0 6
36791: PUSH
36792: LD_VAR 0 7
36796: PPUSH
36797: LD_INT 0
36799: PPUSH
36800: LD_INT 4
36802: PPUSH
36803: CALL_OW 272
36807: PUSH
36808: LD_VAR 0 8
36812: PPUSH
36813: LD_INT 0
36815: PPUSH
36816: LD_INT 4
36818: PPUSH
36819: CALL_OW 273
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_VAR 0 7
36832: PPUSH
36833: LD_INT 1
36835: PPUSH
36836: LD_INT 4
36838: PPUSH
36839: CALL_OW 272
36843: PUSH
36844: LD_VAR 0 8
36848: PPUSH
36849: LD_INT 1
36851: PPUSH
36852: LD_INT 4
36854: PPUSH
36855: CALL_OW 273
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_VAR 0 7
36868: PPUSH
36869: LD_INT 2
36871: PPUSH
36872: LD_INT 4
36874: PPUSH
36875: CALL_OW 272
36879: PUSH
36880: LD_VAR 0 8
36884: PPUSH
36885: LD_INT 2
36887: PPUSH
36888: LD_INT 4
36890: PPUSH
36891: CALL_OW 273
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_VAR 0 7
36904: PPUSH
36905: LD_INT 3
36907: PPUSH
36908: LD_INT 4
36910: PPUSH
36911: CALL_OW 272
36915: PUSH
36916: LD_VAR 0 8
36920: PPUSH
36921: LD_INT 3
36923: PPUSH
36924: LD_INT 4
36926: PPUSH
36927: CALL_OW 273
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_VAR 0 7
36940: PPUSH
36941: LD_INT 4
36943: PPUSH
36944: LD_INT 4
36946: PPUSH
36947: CALL_OW 272
36951: PUSH
36952: LD_VAR 0 8
36956: PPUSH
36957: LD_INT 4
36959: PPUSH
36960: LD_INT 4
36962: PPUSH
36963: CALL_OW 273
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_VAR 0 7
36976: PPUSH
36977: LD_INT 5
36979: PPUSH
36980: LD_INT 4
36982: PPUSH
36983: CALL_OW 272
36987: PUSH
36988: LD_VAR 0 8
36992: PPUSH
36993: LD_INT 5
36995: PPUSH
36996: LD_INT 4
36998: PPUSH
36999: CALL_OW 273
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: ST_TO_ADDR
// for i = tmp downto 1 do
37016: LD_ADDR_VAR 0 4
37020: PUSH
37021: DOUBLE
37022: LD_VAR 0 6
37026: INC
37027: ST_TO_ADDR
37028: LD_INT 1
37030: PUSH
37031: FOR_DOWNTO
37032: IFFALSE 37133
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37034: LD_VAR 0 6
37038: PUSH
37039: LD_VAR 0 4
37043: ARRAY
37044: PUSH
37045: LD_INT 1
37047: ARRAY
37048: PPUSH
37049: LD_VAR 0 6
37053: PUSH
37054: LD_VAR 0 4
37058: ARRAY
37059: PUSH
37060: LD_INT 2
37062: ARRAY
37063: PPUSH
37064: CALL_OW 488
37068: NOT
37069: PUSH
37070: LD_VAR 0 6
37074: PUSH
37075: LD_VAR 0 4
37079: ARRAY
37080: PUSH
37081: LD_INT 1
37083: ARRAY
37084: PPUSH
37085: LD_VAR 0 6
37089: PUSH
37090: LD_VAR 0 4
37094: ARRAY
37095: PUSH
37096: LD_INT 2
37098: ARRAY
37099: PPUSH
37100: CALL_OW 428
37104: PUSH
37105: LD_INT 0
37107: NONEQUAL
37108: OR
37109: IFFALSE 37131
// tmp := Delete ( tmp , i ) ;
37111: LD_ADDR_VAR 0 6
37115: PUSH
37116: LD_VAR 0 6
37120: PPUSH
37121: LD_VAR 0 4
37125: PPUSH
37126: CALL_OW 3
37130: ST_TO_ADDR
37131: GO 37031
37133: POP
37134: POP
// j := GetClosestHex ( unit , tmp ) ;
37135: LD_ADDR_VAR 0 5
37139: PUSH
37140: LD_VAR 0 1
37144: PPUSH
37145: LD_VAR 0 6
37149: PPUSH
37150: CALL 36435 0 2
37154: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37155: LD_VAR 0 1
37159: PPUSH
37160: LD_VAR 0 5
37164: PUSH
37165: LD_INT 1
37167: ARRAY
37168: PPUSH
37169: LD_VAR 0 5
37173: PUSH
37174: LD_INT 2
37176: ARRAY
37177: PPUSH
37178: CALL_OW 111
// end ;
37182: LD_VAR 0 3
37186: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37187: LD_INT 0
37189: PPUSH
37190: PPUSH
37191: PPUSH
// uc_side = 0 ;
37192: LD_ADDR_OWVAR 20
37196: PUSH
37197: LD_INT 0
37199: ST_TO_ADDR
// uc_nation = 0 ;
37200: LD_ADDR_OWVAR 21
37204: PUSH
37205: LD_INT 0
37207: ST_TO_ADDR
// InitHc_All ( ) ;
37208: CALL_OW 584
// InitVc ;
37212: CALL_OW 20
// if mastodonts then
37216: LD_VAR 0 6
37220: IFFALSE 37287
// for i = 1 to mastodonts do
37222: LD_ADDR_VAR 0 11
37226: PUSH
37227: DOUBLE
37228: LD_INT 1
37230: DEC
37231: ST_TO_ADDR
37232: LD_VAR 0 6
37236: PUSH
37237: FOR_TO
37238: IFFALSE 37285
// begin vc_chassis := 31 ;
37240: LD_ADDR_OWVAR 37
37244: PUSH
37245: LD_INT 31
37247: ST_TO_ADDR
// vc_control := control_rider ;
37248: LD_ADDR_OWVAR 38
37252: PUSH
37253: LD_INT 4
37255: ST_TO_ADDR
// animal := CreateVehicle ;
37256: LD_ADDR_VAR 0 12
37260: PUSH
37261: CALL_OW 45
37265: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37266: LD_VAR 0 12
37270: PPUSH
37271: LD_VAR 0 8
37275: PPUSH
37276: LD_INT 0
37278: PPUSH
37279: CALL 39475 0 3
// end ;
37283: GO 37237
37285: POP
37286: POP
// if horses then
37287: LD_VAR 0 5
37291: IFFALSE 37358
// for i = 1 to horses do
37293: LD_ADDR_VAR 0 11
37297: PUSH
37298: DOUBLE
37299: LD_INT 1
37301: DEC
37302: ST_TO_ADDR
37303: LD_VAR 0 5
37307: PUSH
37308: FOR_TO
37309: IFFALSE 37356
// begin hc_class := 21 ;
37311: LD_ADDR_OWVAR 28
37315: PUSH
37316: LD_INT 21
37318: ST_TO_ADDR
// hc_gallery :=  ;
37319: LD_ADDR_OWVAR 33
37323: PUSH
37324: LD_STRING 
37326: ST_TO_ADDR
// animal := CreateHuman ;
37327: LD_ADDR_VAR 0 12
37331: PUSH
37332: CALL_OW 44
37336: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37337: LD_VAR 0 12
37341: PPUSH
37342: LD_VAR 0 8
37346: PPUSH
37347: LD_INT 0
37349: PPUSH
37350: CALL 39475 0 3
// end ;
37354: GO 37308
37356: POP
37357: POP
// if birds then
37358: LD_VAR 0 1
37362: IFFALSE 37429
// for i = 1 to birds do
37364: LD_ADDR_VAR 0 11
37368: PUSH
37369: DOUBLE
37370: LD_INT 1
37372: DEC
37373: ST_TO_ADDR
37374: LD_VAR 0 1
37378: PUSH
37379: FOR_TO
37380: IFFALSE 37427
// begin hc_class = 18 ;
37382: LD_ADDR_OWVAR 28
37386: PUSH
37387: LD_INT 18
37389: ST_TO_ADDR
// hc_gallery =  ;
37390: LD_ADDR_OWVAR 33
37394: PUSH
37395: LD_STRING 
37397: ST_TO_ADDR
// animal := CreateHuman ;
37398: LD_ADDR_VAR 0 12
37402: PUSH
37403: CALL_OW 44
37407: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37408: LD_VAR 0 12
37412: PPUSH
37413: LD_VAR 0 8
37417: PPUSH
37418: LD_INT 0
37420: PPUSH
37421: CALL 39475 0 3
// end ;
37425: GO 37379
37427: POP
37428: POP
// if tigers then
37429: LD_VAR 0 2
37433: IFFALSE 37517
// for i = 1 to tigers do
37435: LD_ADDR_VAR 0 11
37439: PUSH
37440: DOUBLE
37441: LD_INT 1
37443: DEC
37444: ST_TO_ADDR
37445: LD_VAR 0 2
37449: PUSH
37450: FOR_TO
37451: IFFALSE 37515
// begin hc_class = class_tiger ;
37453: LD_ADDR_OWVAR 28
37457: PUSH
37458: LD_INT 14
37460: ST_TO_ADDR
// hc_gallery =  ;
37461: LD_ADDR_OWVAR 33
37465: PUSH
37466: LD_STRING 
37468: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37469: LD_ADDR_OWVAR 35
37473: PUSH
37474: LD_INT 7
37476: NEG
37477: PPUSH
37478: LD_INT 7
37480: PPUSH
37481: CALL_OW 12
37485: ST_TO_ADDR
// animal := CreateHuman ;
37486: LD_ADDR_VAR 0 12
37490: PUSH
37491: CALL_OW 44
37495: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37496: LD_VAR 0 12
37500: PPUSH
37501: LD_VAR 0 8
37505: PPUSH
37506: LD_INT 0
37508: PPUSH
37509: CALL 39475 0 3
// end ;
37513: GO 37450
37515: POP
37516: POP
// if apemans then
37517: LD_VAR 0 3
37521: IFFALSE 37644
// for i = 1 to apemans do
37523: LD_ADDR_VAR 0 11
37527: PUSH
37528: DOUBLE
37529: LD_INT 1
37531: DEC
37532: ST_TO_ADDR
37533: LD_VAR 0 3
37537: PUSH
37538: FOR_TO
37539: IFFALSE 37642
// begin hc_class = class_apeman ;
37541: LD_ADDR_OWVAR 28
37545: PUSH
37546: LD_INT 12
37548: ST_TO_ADDR
// hc_gallery =  ;
37549: LD_ADDR_OWVAR 33
37553: PUSH
37554: LD_STRING 
37556: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
37557: LD_ADDR_OWVAR 35
37561: PUSH
37562: LD_INT 5
37564: NEG
37565: PPUSH
37566: LD_INT 5
37568: PPUSH
37569: CALL_OW 12
37573: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37574: LD_ADDR_OWVAR 31
37578: PUSH
37579: LD_INT 1
37581: PPUSH
37582: LD_INT 3
37584: PPUSH
37585: CALL_OW 12
37589: PUSH
37590: LD_INT 1
37592: PPUSH
37593: LD_INT 3
37595: PPUSH
37596: CALL_OW 12
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: ST_TO_ADDR
// animal := CreateHuman ;
37613: LD_ADDR_VAR 0 12
37617: PUSH
37618: CALL_OW 44
37622: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37623: LD_VAR 0 12
37627: PPUSH
37628: LD_VAR 0 8
37632: PPUSH
37633: LD_INT 0
37635: PPUSH
37636: CALL 39475 0 3
// end ;
37640: GO 37538
37642: POP
37643: POP
// if enchidnas then
37644: LD_VAR 0 4
37648: IFFALSE 37715
// for i = 1 to enchidnas do
37650: LD_ADDR_VAR 0 11
37654: PUSH
37655: DOUBLE
37656: LD_INT 1
37658: DEC
37659: ST_TO_ADDR
37660: LD_VAR 0 4
37664: PUSH
37665: FOR_TO
37666: IFFALSE 37713
// begin hc_class = 13 ;
37668: LD_ADDR_OWVAR 28
37672: PUSH
37673: LD_INT 13
37675: ST_TO_ADDR
// hc_gallery =  ;
37676: LD_ADDR_OWVAR 33
37680: PUSH
37681: LD_STRING 
37683: ST_TO_ADDR
// animal := CreateHuman ;
37684: LD_ADDR_VAR 0 12
37688: PUSH
37689: CALL_OW 44
37693: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37694: LD_VAR 0 12
37698: PPUSH
37699: LD_VAR 0 8
37703: PPUSH
37704: LD_INT 0
37706: PPUSH
37707: CALL 39475 0 3
// end ;
37711: GO 37665
37713: POP
37714: POP
// if fishes then
37715: LD_VAR 0 7
37719: IFFALSE 37786
// for i = 1 to fishes do
37721: LD_ADDR_VAR 0 11
37725: PUSH
37726: DOUBLE
37727: LD_INT 1
37729: DEC
37730: ST_TO_ADDR
37731: LD_VAR 0 7
37735: PUSH
37736: FOR_TO
37737: IFFALSE 37784
// begin hc_class = 20 ;
37739: LD_ADDR_OWVAR 28
37743: PUSH
37744: LD_INT 20
37746: ST_TO_ADDR
// hc_gallery =  ;
37747: LD_ADDR_OWVAR 33
37751: PUSH
37752: LD_STRING 
37754: ST_TO_ADDR
// animal := CreateHuman ;
37755: LD_ADDR_VAR 0 12
37759: PUSH
37760: CALL_OW 44
37764: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37765: LD_VAR 0 12
37769: PPUSH
37770: LD_VAR 0 9
37774: PPUSH
37775: LD_INT 0
37777: PPUSH
37778: CALL 39475 0 3
// end ;
37782: GO 37736
37784: POP
37785: POP
// end ;
37786: LD_VAR 0 10
37790: RET
// export function WantHeal ( sci , unit ) ; begin
37791: LD_INT 0
37793: PPUSH
// if GetTaskList ( sci ) > 0 then
37794: LD_VAR 0 1
37798: PPUSH
37799: CALL_OW 437
37803: PUSH
37804: LD_INT 0
37806: GREATER
37807: IFFALSE 37877
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37809: LD_VAR 0 1
37813: PPUSH
37814: CALL_OW 437
37818: PUSH
37819: LD_INT 1
37821: ARRAY
37822: PUSH
37823: LD_INT 1
37825: ARRAY
37826: PUSH
37827: LD_STRING l
37829: EQUAL
37830: PUSH
37831: LD_VAR 0 1
37835: PPUSH
37836: CALL_OW 437
37840: PUSH
37841: LD_INT 1
37843: ARRAY
37844: PUSH
37845: LD_INT 4
37847: ARRAY
37848: PUSH
37849: LD_VAR 0 2
37853: EQUAL
37854: AND
37855: IFFALSE 37867
// result := true else
37857: LD_ADDR_VAR 0 3
37861: PUSH
37862: LD_INT 1
37864: ST_TO_ADDR
37865: GO 37875
// result := false ;
37867: LD_ADDR_VAR 0 3
37871: PUSH
37872: LD_INT 0
37874: ST_TO_ADDR
// end else
37875: GO 37885
// result := false ;
37877: LD_ADDR_VAR 0 3
37881: PUSH
37882: LD_INT 0
37884: ST_TO_ADDR
// end ;
37885: LD_VAR 0 3
37889: RET
// export function HealTarget ( sci ) ; begin
37890: LD_INT 0
37892: PPUSH
// if not sci then
37893: LD_VAR 0 1
37897: NOT
37898: IFFALSE 37902
// exit ;
37900: GO 37967
// result := 0 ;
37902: LD_ADDR_VAR 0 2
37906: PUSH
37907: LD_INT 0
37909: ST_TO_ADDR
// if GetTaskList ( sci ) then
37910: LD_VAR 0 1
37914: PPUSH
37915: CALL_OW 437
37919: IFFALSE 37967
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37921: LD_VAR 0 1
37925: PPUSH
37926: CALL_OW 437
37930: PUSH
37931: LD_INT 1
37933: ARRAY
37934: PUSH
37935: LD_INT 1
37937: ARRAY
37938: PUSH
37939: LD_STRING l
37941: EQUAL
37942: IFFALSE 37967
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37944: LD_ADDR_VAR 0 2
37948: PUSH
37949: LD_VAR 0 1
37953: PPUSH
37954: CALL_OW 437
37958: PUSH
37959: LD_INT 1
37961: ARRAY
37962: PUSH
37963: LD_INT 4
37965: ARRAY
37966: ST_TO_ADDR
// end ;
37967: LD_VAR 0 2
37971: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37972: LD_INT 0
37974: PPUSH
37975: PPUSH
37976: PPUSH
37977: PPUSH
// if not base_units then
37978: LD_VAR 0 1
37982: NOT
37983: IFFALSE 37987
// exit ;
37985: GO 38074
// result := false ;
37987: LD_ADDR_VAR 0 2
37991: PUSH
37992: LD_INT 0
37994: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37995: LD_ADDR_VAR 0 5
37999: PUSH
38000: LD_VAR 0 1
38004: PPUSH
38005: LD_INT 21
38007: PUSH
38008: LD_INT 3
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PPUSH
38015: CALL_OW 72
38019: ST_TO_ADDR
// if not tmp then
38020: LD_VAR 0 5
38024: NOT
38025: IFFALSE 38029
// exit ;
38027: GO 38074
// for i in tmp do
38029: LD_ADDR_VAR 0 3
38033: PUSH
38034: LD_VAR 0 5
38038: PUSH
38039: FOR_IN
38040: IFFALSE 38072
// begin result := EnemyInRange ( i , 22 ) ;
38042: LD_ADDR_VAR 0 2
38046: PUSH
38047: LD_VAR 0 3
38051: PPUSH
38052: LD_INT 22
38054: PPUSH
38055: CALL 36310 0 2
38059: ST_TO_ADDR
// if result then
38060: LD_VAR 0 2
38064: IFFALSE 38070
// exit ;
38066: POP
38067: POP
38068: GO 38074
// end ;
38070: GO 38039
38072: POP
38073: POP
// end ;
38074: LD_VAR 0 2
38078: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
38079: LD_INT 0
38081: PPUSH
38082: PPUSH
// if not units then
38083: LD_VAR 0 1
38087: NOT
38088: IFFALSE 38092
// exit ;
38090: GO 38162
// result := [ ] ;
38092: LD_ADDR_VAR 0 3
38096: PUSH
38097: EMPTY
38098: ST_TO_ADDR
// for i in units do
38099: LD_ADDR_VAR 0 4
38103: PUSH
38104: LD_VAR 0 1
38108: PUSH
38109: FOR_IN
38110: IFFALSE 38160
// if GetTag ( i ) = tag then
38112: LD_VAR 0 4
38116: PPUSH
38117: CALL_OW 110
38121: PUSH
38122: LD_VAR 0 2
38126: EQUAL
38127: IFFALSE 38158
// result := Insert ( result , result + 1 , i ) ;
38129: LD_ADDR_VAR 0 3
38133: PUSH
38134: LD_VAR 0 3
38138: PPUSH
38139: LD_VAR 0 3
38143: PUSH
38144: LD_INT 1
38146: PLUS
38147: PPUSH
38148: LD_VAR 0 4
38152: PPUSH
38153: CALL_OW 2
38157: ST_TO_ADDR
38158: GO 38109
38160: POP
38161: POP
// end ;
38162: LD_VAR 0 3
38166: RET
// export function IsDriver ( un ) ; begin
38167: LD_INT 0
38169: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38170: LD_ADDR_VAR 0 2
38174: PUSH
38175: LD_VAR 0 1
38179: PUSH
38180: LD_INT 55
38182: PUSH
38183: EMPTY
38184: LIST
38185: PPUSH
38186: CALL_OW 69
38190: IN
38191: ST_TO_ADDR
// end ;
38192: LD_VAR 0 2
38196: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38197: LD_INT 0
38199: PPUSH
38200: PPUSH
// list := [ ] ;
38201: LD_ADDR_VAR 0 5
38205: PUSH
38206: EMPTY
38207: ST_TO_ADDR
// case d of 0 :
38208: LD_VAR 0 3
38212: PUSH
38213: LD_INT 0
38215: DOUBLE
38216: EQUAL
38217: IFTRUE 38221
38219: GO 38354
38221: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38222: LD_ADDR_VAR 0 5
38226: PUSH
38227: LD_VAR 0 1
38231: PUSH
38232: LD_INT 4
38234: MINUS
38235: PUSH
38236: LD_VAR 0 2
38240: PUSH
38241: LD_INT 4
38243: MINUS
38244: PUSH
38245: LD_INT 2
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: LIST
38252: PUSH
38253: LD_VAR 0 1
38257: PUSH
38258: LD_INT 3
38260: MINUS
38261: PUSH
38262: LD_VAR 0 2
38266: PUSH
38267: LD_INT 1
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: LIST
38274: PUSH
38275: LD_VAR 0 1
38279: PUSH
38280: LD_INT 4
38282: PLUS
38283: PUSH
38284: LD_VAR 0 2
38288: PUSH
38289: LD_INT 4
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: LIST
38296: PUSH
38297: LD_VAR 0 1
38301: PUSH
38302: LD_INT 3
38304: PLUS
38305: PUSH
38306: LD_VAR 0 2
38310: PUSH
38311: LD_INT 3
38313: PLUS
38314: PUSH
38315: LD_INT 5
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: LIST
38322: PUSH
38323: LD_VAR 0 1
38327: PUSH
38328: LD_VAR 0 2
38332: PUSH
38333: LD_INT 4
38335: PLUS
38336: PUSH
38337: LD_INT 0
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: LIST
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: ST_TO_ADDR
// end ; 1 :
38352: GO 39052
38354: LD_INT 1
38356: DOUBLE
38357: EQUAL
38358: IFTRUE 38362
38360: GO 38495
38362: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38363: LD_ADDR_VAR 0 5
38367: PUSH
38368: LD_VAR 0 1
38372: PUSH
38373: LD_VAR 0 2
38377: PUSH
38378: LD_INT 4
38380: MINUS
38381: PUSH
38382: LD_INT 3
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: LIST
38389: PUSH
38390: LD_VAR 0 1
38394: PUSH
38395: LD_INT 3
38397: MINUS
38398: PUSH
38399: LD_VAR 0 2
38403: PUSH
38404: LD_INT 3
38406: MINUS
38407: PUSH
38408: LD_INT 2
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: LIST
38415: PUSH
38416: LD_VAR 0 1
38420: PUSH
38421: LD_INT 4
38423: MINUS
38424: PUSH
38425: LD_VAR 0 2
38429: PUSH
38430: LD_INT 1
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: LIST
38437: PUSH
38438: LD_VAR 0 1
38442: PUSH
38443: LD_VAR 0 2
38447: PUSH
38448: LD_INT 3
38450: PLUS
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: LIST
38459: PUSH
38460: LD_VAR 0 1
38464: PUSH
38465: LD_INT 4
38467: PLUS
38468: PUSH
38469: LD_VAR 0 2
38473: PUSH
38474: LD_INT 4
38476: PLUS
38477: PUSH
38478: LD_INT 5
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: LIST
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: ST_TO_ADDR
// end ; 2 :
38493: GO 39052
38495: LD_INT 2
38497: DOUBLE
38498: EQUAL
38499: IFTRUE 38503
38501: GO 38632
38503: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38504: LD_ADDR_VAR 0 5
38508: PUSH
38509: LD_VAR 0 1
38513: PUSH
38514: LD_VAR 0 2
38518: PUSH
38519: LD_INT 3
38521: MINUS
38522: PUSH
38523: LD_INT 3
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: LIST
38530: PUSH
38531: LD_VAR 0 1
38535: PUSH
38536: LD_INT 4
38538: PLUS
38539: PUSH
38540: LD_VAR 0 2
38544: PUSH
38545: LD_INT 4
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: LIST
38552: PUSH
38553: LD_VAR 0 1
38557: PUSH
38558: LD_VAR 0 2
38562: PUSH
38563: LD_INT 4
38565: PLUS
38566: PUSH
38567: LD_INT 0
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: LIST
38574: PUSH
38575: LD_VAR 0 1
38579: PUSH
38580: LD_INT 3
38582: MINUS
38583: PUSH
38584: LD_VAR 0 2
38588: PUSH
38589: LD_INT 1
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: LIST
38596: PUSH
38597: LD_VAR 0 1
38601: PUSH
38602: LD_INT 4
38604: MINUS
38605: PUSH
38606: LD_VAR 0 2
38610: PUSH
38611: LD_INT 4
38613: MINUS
38614: PUSH
38615: LD_INT 2
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: LIST
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: ST_TO_ADDR
// end ; 3 :
38630: GO 39052
38632: LD_INT 3
38634: DOUBLE
38635: EQUAL
38636: IFTRUE 38640
38638: GO 38773
38640: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38641: LD_ADDR_VAR 0 5
38645: PUSH
38646: LD_VAR 0 1
38650: PUSH
38651: LD_INT 3
38653: PLUS
38654: PUSH
38655: LD_VAR 0 2
38659: PUSH
38660: LD_INT 4
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: LIST
38667: PUSH
38668: LD_VAR 0 1
38672: PUSH
38673: LD_INT 4
38675: PLUS
38676: PUSH
38677: LD_VAR 0 2
38681: PUSH
38682: LD_INT 4
38684: PLUS
38685: PUSH
38686: LD_INT 5
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: LIST
38693: PUSH
38694: LD_VAR 0 1
38698: PUSH
38699: LD_INT 4
38701: MINUS
38702: PUSH
38703: LD_VAR 0 2
38707: PUSH
38708: LD_INT 1
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: LIST
38715: PUSH
38716: LD_VAR 0 1
38720: PUSH
38721: LD_VAR 0 2
38725: PUSH
38726: LD_INT 4
38728: MINUS
38729: PUSH
38730: LD_INT 3
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: LIST
38737: PUSH
38738: LD_VAR 0 1
38742: PUSH
38743: LD_INT 3
38745: MINUS
38746: PUSH
38747: LD_VAR 0 2
38751: PUSH
38752: LD_INT 3
38754: MINUS
38755: PUSH
38756: LD_INT 2
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: LIST
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: ST_TO_ADDR
// end ; 4 :
38771: GO 39052
38773: LD_INT 4
38775: DOUBLE
38776: EQUAL
38777: IFTRUE 38781
38779: GO 38914
38781: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38782: LD_ADDR_VAR 0 5
38786: PUSH
38787: LD_VAR 0 1
38791: PUSH
38792: LD_VAR 0 2
38796: PUSH
38797: LD_INT 4
38799: PLUS
38800: PUSH
38801: LD_INT 0
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: LIST
38808: PUSH
38809: LD_VAR 0 1
38813: PUSH
38814: LD_INT 3
38816: PLUS
38817: PUSH
38818: LD_VAR 0 2
38822: PUSH
38823: LD_INT 3
38825: PLUS
38826: PUSH
38827: LD_INT 5
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: LIST
38834: PUSH
38835: LD_VAR 0 1
38839: PUSH
38840: LD_INT 4
38842: PLUS
38843: PUSH
38844: LD_VAR 0 2
38848: PUSH
38849: LD_INT 4
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: LIST
38856: PUSH
38857: LD_VAR 0 1
38861: PUSH
38862: LD_VAR 0 2
38866: PUSH
38867: LD_INT 3
38869: MINUS
38870: PUSH
38871: LD_INT 3
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: LIST
38878: PUSH
38879: LD_VAR 0 1
38883: PUSH
38884: LD_INT 4
38886: MINUS
38887: PUSH
38888: LD_VAR 0 2
38892: PUSH
38893: LD_INT 4
38895: MINUS
38896: PUSH
38897: LD_INT 2
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: LIST
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: ST_TO_ADDR
// end ; 5 :
38912: GO 39052
38914: LD_INT 5
38916: DOUBLE
38917: EQUAL
38918: IFTRUE 38922
38920: GO 39051
38922: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38923: LD_ADDR_VAR 0 5
38927: PUSH
38928: LD_VAR 0 1
38932: PUSH
38933: LD_INT 4
38935: MINUS
38936: PUSH
38937: LD_VAR 0 2
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: LIST
38949: PUSH
38950: LD_VAR 0 1
38954: PUSH
38955: LD_VAR 0 2
38959: PUSH
38960: LD_INT 4
38962: MINUS
38963: PUSH
38964: LD_INT 3
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: LIST
38971: PUSH
38972: LD_VAR 0 1
38976: PUSH
38977: LD_INT 4
38979: PLUS
38980: PUSH
38981: LD_VAR 0 2
38985: PUSH
38986: LD_INT 4
38988: PLUS
38989: PUSH
38990: LD_INT 5
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: LIST
38997: PUSH
38998: LD_VAR 0 1
39002: PUSH
39003: LD_INT 3
39005: PLUS
39006: PUSH
39007: LD_VAR 0 2
39011: PUSH
39012: LD_INT 4
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: LIST
39019: PUSH
39020: LD_VAR 0 1
39024: PUSH
39025: LD_VAR 0 2
39029: PUSH
39030: LD_INT 3
39032: PLUS
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: LIST
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: ST_TO_ADDR
// end ; end ;
39049: GO 39052
39051: POP
// result := list ;
39052: LD_ADDR_VAR 0 4
39056: PUSH
39057: LD_VAR 0 5
39061: ST_TO_ADDR
// end ;
39062: LD_VAR 0 4
39066: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39067: LD_INT 0
39069: PPUSH
39070: PPUSH
39071: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39072: LD_VAR 0 1
39076: NOT
39077: PUSH
39078: LD_VAR 0 2
39082: PUSH
39083: LD_INT 1
39085: PUSH
39086: LD_INT 2
39088: PUSH
39089: LD_INT 3
39091: PUSH
39092: LD_INT 4
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: IN
39101: NOT
39102: OR
39103: IFFALSE 39107
// exit ;
39105: GO 39199
// tmp := [ ] ;
39107: LD_ADDR_VAR 0 5
39111: PUSH
39112: EMPTY
39113: ST_TO_ADDR
// for i in units do
39114: LD_ADDR_VAR 0 4
39118: PUSH
39119: LD_VAR 0 1
39123: PUSH
39124: FOR_IN
39125: IFFALSE 39168
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
39127: LD_ADDR_VAR 0 5
39131: PUSH
39132: LD_VAR 0 5
39136: PPUSH
39137: LD_VAR 0 5
39141: PUSH
39142: LD_INT 1
39144: PLUS
39145: PPUSH
39146: LD_VAR 0 4
39150: PPUSH
39151: LD_VAR 0 2
39155: PPUSH
39156: CALL_OW 259
39160: PPUSH
39161: CALL_OW 2
39165: ST_TO_ADDR
39166: GO 39124
39168: POP
39169: POP
// if not tmp then
39170: LD_VAR 0 5
39174: NOT
39175: IFFALSE 39179
// exit ;
39177: GO 39199
// result := SortListByListDesc ( units , tmp ) ;
39179: LD_ADDR_VAR 0 3
39183: PUSH
39184: LD_VAR 0 1
39188: PPUSH
39189: LD_VAR 0 5
39193: PPUSH
39194: CALL_OW 77
39198: ST_TO_ADDR
// end ;
39199: LD_VAR 0 3
39203: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39204: LD_INT 0
39206: PPUSH
39207: PPUSH
39208: PPUSH
// result := false ;
39209: LD_ADDR_VAR 0 3
39213: PUSH
39214: LD_INT 0
39216: ST_TO_ADDR
// x := GetX ( building ) ;
39217: LD_ADDR_VAR 0 4
39221: PUSH
39222: LD_VAR 0 2
39226: PPUSH
39227: CALL_OW 250
39231: ST_TO_ADDR
// y := GetY ( building ) ;
39232: LD_ADDR_VAR 0 5
39236: PUSH
39237: LD_VAR 0 2
39241: PPUSH
39242: CALL_OW 251
39246: ST_TO_ADDR
// if not building or not x or not y then
39247: LD_VAR 0 2
39251: NOT
39252: PUSH
39253: LD_VAR 0 4
39257: NOT
39258: OR
39259: PUSH
39260: LD_VAR 0 5
39264: NOT
39265: OR
39266: IFFALSE 39270
// exit ;
39268: GO 39362
// if GetTaskList ( unit ) then
39270: LD_VAR 0 1
39274: PPUSH
39275: CALL_OW 437
39279: IFFALSE 39362
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39281: LD_STRING e
39283: PUSH
39284: LD_VAR 0 1
39288: PPUSH
39289: CALL_OW 437
39293: PUSH
39294: LD_INT 1
39296: ARRAY
39297: PUSH
39298: LD_INT 1
39300: ARRAY
39301: EQUAL
39302: PUSH
39303: LD_VAR 0 4
39307: PUSH
39308: LD_VAR 0 1
39312: PPUSH
39313: CALL_OW 437
39317: PUSH
39318: LD_INT 1
39320: ARRAY
39321: PUSH
39322: LD_INT 2
39324: ARRAY
39325: EQUAL
39326: AND
39327: PUSH
39328: LD_VAR 0 5
39332: PUSH
39333: LD_VAR 0 1
39337: PPUSH
39338: CALL_OW 437
39342: PUSH
39343: LD_INT 1
39345: ARRAY
39346: PUSH
39347: LD_INT 3
39349: ARRAY
39350: EQUAL
39351: AND
39352: IFFALSE 39362
// result := true end ;
39354: LD_ADDR_VAR 0 3
39358: PUSH
39359: LD_INT 1
39361: ST_TO_ADDR
// end ;
39362: LD_VAR 0 3
39366: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39367: LD_INT 0
39369: PPUSH
// result := false ;
39370: LD_ADDR_VAR 0 4
39374: PUSH
39375: LD_INT 0
39377: ST_TO_ADDR
// if GetTaskList ( unit ) then
39378: LD_VAR 0 1
39382: PPUSH
39383: CALL_OW 437
39387: IFFALSE 39470
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39389: LD_STRING M
39391: PUSH
39392: LD_VAR 0 1
39396: PPUSH
39397: CALL_OW 437
39401: PUSH
39402: LD_INT 1
39404: ARRAY
39405: PUSH
39406: LD_INT 1
39408: ARRAY
39409: EQUAL
39410: PUSH
39411: LD_VAR 0 2
39415: PUSH
39416: LD_VAR 0 1
39420: PPUSH
39421: CALL_OW 437
39425: PUSH
39426: LD_INT 1
39428: ARRAY
39429: PUSH
39430: LD_INT 2
39432: ARRAY
39433: EQUAL
39434: AND
39435: PUSH
39436: LD_VAR 0 3
39440: PUSH
39441: LD_VAR 0 1
39445: PPUSH
39446: CALL_OW 437
39450: PUSH
39451: LD_INT 1
39453: ARRAY
39454: PUSH
39455: LD_INT 3
39457: ARRAY
39458: EQUAL
39459: AND
39460: IFFALSE 39470
// result := true ;
39462: LD_ADDR_VAR 0 4
39466: PUSH
39467: LD_INT 1
39469: ST_TO_ADDR
// end ; end ;
39470: LD_VAR 0 4
39474: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39475: LD_INT 0
39477: PPUSH
39478: PPUSH
39479: PPUSH
39480: PPUSH
// if not unit or not area then
39481: LD_VAR 0 1
39485: NOT
39486: PUSH
39487: LD_VAR 0 2
39491: NOT
39492: OR
39493: IFFALSE 39497
// exit ;
39495: GO 39661
// tmp := AreaToList ( area , i ) ;
39497: LD_ADDR_VAR 0 6
39501: PUSH
39502: LD_VAR 0 2
39506: PPUSH
39507: LD_VAR 0 5
39511: PPUSH
39512: CALL_OW 517
39516: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39517: LD_ADDR_VAR 0 5
39521: PUSH
39522: DOUBLE
39523: LD_INT 1
39525: DEC
39526: ST_TO_ADDR
39527: LD_VAR 0 6
39531: PUSH
39532: LD_INT 1
39534: ARRAY
39535: PUSH
39536: FOR_TO
39537: IFFALSE 39659
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39539: LD_ADDR_VAR 0 7
39543: PUSH
39544: LD_VAR 0 6
39548: PUSH
39549: LD_INT 1
39551: ARRAY
39552: PUSH
39553: LD_VAR 0 5
39557: ARRAY
39558: PUSH
39559: LD_VAR 0 6
39563: PUSH
39564: LD_INT 2
39566: ARRAY
39567: PUSH
39568: LD_VAR 0 5
39572: ARRAY
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39578: LD_VAR 0 7
39582: PUSH
39583: LD_INT 1
39585: ARRAY
39586: PPUSH
39587: LD_VAR 0 7
39591: PUSH
39592: LD_INT 2
39594: ARRAY
39595: PPUSH
39596: CALL_OW 428
39600: PUSH
39601: LD_INT 0
39603: EQUAL
39604: IFFALSE 39657
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39606: LD_VAR 0 1
39610: PPUSH
39611: LD_VAR 0 7
39615: PUSH
39616: LD_INT 1
39618: ARRAY
39619: PPUSH
39620: LD_VAR 0 7
39624: PUSH
39625: LD_INT 2
39627: ARRAY
39628: PPUSH
39629: LD_VAR 0 3
39633: PPUSH
39634: CALL_OW 48
// result := IsPlaced ( unit ) ;
39638: LD_ADDR_VAR 0 4
39642: PUSH
39643: LD_VAR 0 1
39647: PPUSH
39648: CALL_OW 305
39652: ST_TO_ADDR
// exit ;
39653: POP
39654: POP
39655: GO 39661
// end ; end ;
39657: GO 39536
39659: POP
39660: POP
// end ;
39661: LD_VAR 0 4
39665: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39666: LD_INT 0
39668: PPUSH
39669: PPUSH
39670: PPUSH
// if not side or side > 8 then
39671: LD_VAR 0 1
39675: NOT
39676: PUSH
39677: LD_VAR 0 1
39681: PUSH
39682: LD_INT 8
39684: GREATER
39685: OR
39686: IFFALSE 39690
// exit ;
39688: GO 39877
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39690: LD_ADDR_VAR 0 4
39694: PUSH
39695: LD_INT 22
39697: PUSH
39698: LD_VAR 0 1
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 21
39709: PUSH
39710: LD_INT 3
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PPUSH
39721: CALL_OW 69
39725: ST_TO_ADDR
// if not tmp then
39726: LD_VAR 0 4
39730: NOT
39731: IFFALSE 39735
// exit ;
39733: GO 39877
// enable_addtolog := true ;
39735: LD_ADDR_OWVAR 81
39739: PUSH
39740: LD_INT 1
39742: ST_TO_ADDR
// AddToLog ( [ ) ;
39743: LD_STRING [
39745: PPUSH
39746: CALL_OW 561
// for i in tmp do
39750: LD_ADDR_VAR 0 3
39754: PUSH
39755: LD_VAR 0 4
39759: PUSH
39760: FOR_IN
39761: IFFALSE 39868
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39763: LD_STRING [
39765: PUSH
39766: LD_VAR 0 3
39770: PPUSH
39771: CALL_OW 266
39775: STR
39776: PUSH
39777: LD_STRING , 
39779: STR
39780: PUSH
39781: LD_VAR 0 3
39785: PPUSH
39786: CALL_OW 250
39790: STR
39791: PUSH
39792: LD_STRING , 
39794: STR
39795: PUSH
39796: LD_VAR 0 3
39800: PPUSH
39801: CALL_OW 251
39805: STR
39806: PUSH
39807: LD_STRING , 
39809: STR
39810: PUSH
39811: LD_VAR 0 3
39815: PPUSH
39816: CALL_OW 254
39820: STR
39821: PUSH
39822: LD_STRING , 
39824: STR
39825: PUSH
39826: LD_VAR 0 3
39830: PPUSH
39831: LD_INT 1
39833: PPUSH
39834: CALL_OW 268
39838: STR
39839: PUSH
39840: LD_STRING , 
39842: STR
39843: PUSH
39844: LD_VAR 0 3
39848: PPUSH
39849: LD_INT 2
39851: PPUSH
39852: CALL_OW 268
39856: STR
39857: PUSH
39858: LD_STRING ],
39860: STR
39861: PPUSH
39862: CALL_OW 561
// end ;
39866: GO 39760
39868: POP
39869: POP
// AddToLog ( ]; ) ;
39870: LD_STRING ];
39872: PPUSH
39873: CALL_OW 561
// end ;
39877: LD_VAR 0 2
39881: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39882: LD_INT 0
39884: PPUSH
39885: PPUSH
39886: PPUSH
39887: PPUSH
39888: PPUSH
// if not area or not rate or not max then
39889: LD_VAR 0 1
39893: NOT
39894: PUSH
39895: LD_VAR 0 2
39899: NOT
39900: OR
39901: PUSH
39902: LD_VAR 0 4
39906: NOT
39907: OR
39908: IFFALSE 39912
// exit ;
39910: GO 40104
// while 1 do
39912: LD_INT 1
39914: IFFALSE 40104
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39916: LD_ADDR_VAR 0 9
39920: PUSH
39921: LD_VAR 0 1
39925: PPUSH
39926: LD_INT 1
39928: PPUSH
39929: CALL_OW 287
39933: PUSH
39934: LD_INT 10
39936: MUL
39937: ST_TO_ADDR
// r := rate / 10 ;
39938: LD_ADDR_VAR 0 7
39942: PUSH
39943: LD_VAR 0 2
39947: PUSH
39948: LD_INT 10
39950: DIVREAL
39951: ST_TO_ADDR
// time := 1 1$00 ;
39952: LD_ADDR_VAR 0 8
39956: PUSH
39957: LD_INT 2100
39959: ST_TO_ADDR
// if amount < min then
39960: LD_VAR 0 9
39964: PUSH
39965: LD_VAR 0 3
39969: LESS
39970: IFFALSE 39988
// r := r * 2 else
39972: LD_ADDR_VAR 0 7
39976: PUSH
39977: LD_VAR 0 7
39981: PUSH
39982: LD_INT 2
39984: MUL
39985: ST_TO_ADDR
39986: GO 40014
// if amount > max then
39988: LD_VAR 0 9
39992: PUSH
39993: LD_VAR 0 4
39997: GREATER
39998: IFFALSE 40014
// r := r / 2 ;
40000: LD_ADDR_VAR 0 7
40004: PUSH
40005: LD_VAR 0 7
40009: PUSH
40010: LD_INT 2
40012: DIVREAL
40013: ST_TO_ADDR
// time := time / r ;
40014: LD_ADDR_VAR 0 8
40018: PUSH
40019: LD_VAR 0 8
40023: PUSH
40024: LD_VAR 0 7
40028: DIVREAL
40029: ST_TO_ADDR
// if time < 0 then
40030: LD_VAR 0 8
40034: PUSH
40035: LD_INT 0
40037: LESS
40038: IFFALSE 40055
// time := time * - 1 ;
40040: LD_ADDR_VAR 0 8
40044: PUSH
40045: LD_VAR 0 8
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: MUL
40054: ST_TO_ADDR
// wait ( time ) ;
40055: LD_VAR 0 8
40059: PPUSH
40060: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
40064: LD_INT 35
40066: PPUSH
40067: LD_INT 875
40069: PPUSH
40070: CALL_OW 12
40074: PPUSH
40075: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40079: LD_INT 1
40081: PPUSH
40082: LD_INT 5
40084: PPUSH
40085: CALL_OW 12
40089: PPUSH
40090: LD_VAR 0 1
40094: PPUSH
40095: LD_INT 1
40097: PPUSH
40098: CALL_OW 55
// end ;
40102: GO 39912
// end ;
40104: LD_VAR 0 5
40108: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40109: LD_INT 0
40111: PPUSH
40112: PPUSH
40113: PPUSH
40114: PPUSH
40115: PPUSH
40116: PPUSH
40117: PPUSH
40118: PPUSH
// if not turrets or not factories then
40119: LD_VAR 0 1
40123: NOT
40124: PUSH
40125: LD_VAR 0 2
40129: NOT
40130: OR
40131: IFFALSE 40135
// exit ;
40133: GO 40442
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40135: LD_ADDR_VAR 0 10
40139: PUSH
40140: LD_INT 5
40142: PUSH
40143: LD_INT 6
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 2
40152: PUSH
40153: LD_INT 4
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 3
40162: PUSH
40163: LD_INT 5
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 24
40177: PUSH
40178: LD_INT 25
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 23
40187: PUSH
40188: LD_INT 27
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 42
40201: PUSH
40202: LD_INT 43
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 44
40211: PUSH
40212: LD_INT 46
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 45
40221: PUSH
40222: LD_INT 47
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: LIST
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: LIST
40238: ST_TO_ADDR
// result := [ ] ;
40239: LD_ADDR_VAR 0 3
40243: PUSH
40244: EMPTY
40245: ST_TO_ADDR
// for i in turrets do
40246: LD_ADDR_VAR 0 4
40250: PUSH
40251: LD_VAR 0 1
40255: PUSH
40256: FOR_IN
40257: IFFALSE 40440
// begin nat := GetNation ( i ) ;
40259: LD_ADDR_VAR 0 7
40263: PUSH
40264: LD_VAR 0 4
40268: PPUSH
40269: CALL_OW 248
40273: ST_TO_ADDR
// weapon := 0 ;
40274: LD_ADDR_VAR 0 8
40278: PUSH
40279: LD_INT 0
40281: ST_TO_ADDR
// if not nat then
40282: LD_VAR 0 7
40286: NOT
40287: IFFALSE 40291
// continue ;
40289: GO 40256
// for j in list [ nat ] do
40291: LD_ADDR_VAR 0 5
40295: PUSH
40296: LD_VAR 0 10
40300: PUSH
40301: LD_VAR 0 7
40305: ARRAY
40306: PUSH
40307: FOR_IN
40308: IFFALSE 40349
// if GetBWeapon ( i ) = j [ 1 ] then
40310: LD_VAR 0 4
40314: PPUSH
40315: CALL_OW 269
40319: PUSH
40320: LD_VAR 0 5
40324: PUSH
40325: LD_INT 1
40327: ARRAY
40328: EQUAL
40329: IFFALSE 40347
// begin weapon := j [ 2 ] ;
40331: LD_ADDR_VAR 0 8
40335: PUSH
40336: LD_VAR 0 5
40340: PUSH
40341: LD_INT 2
40343: ARRAY
40344: ST_TO_ADDR
// break ;
40345: GO 40349
// end ;
40347: GO 40307
40349: POP
40350: POP
// if not weapon then
40351: LD_VAR 0 8
40355: NOT
40356: IFFALSE 40360
// continue ;
40358: GO 40256
// for k in factories do
40360: LD_ADDR_VAR 0 6
40364: PUSH
40365: LD_VAR 0 2
40369: PUSH
40370: FOR_IN
40371: IFFALSE 40436
// begin weapons := AvailableWeaponList ( k ) ;
40373: LD_ADDR_VAR 0 9
40377: PUSH
40378: LD_VAR 0 6
40382: PPUSH
40383: CALL_OW 478
40387: ST_TO_ADDR
// if not weapons then
40388: LD_VAR 0 9
40392: NOT
40393: IFFALSE 40397
// continue ;
40395: GO 40370
// if weapon in weapons then
40397: LD_VAR 0 8
40401: PUSH
40402: LD_VAR 0 9
40406: IN
40407: IFFALSE 40434
// begin result := [ i , weapon ] ;
40409: LD_ADDR_VAR 0 3
40413: PUSH
40414: LD_VAR 0 4
40418: PUSH
40419: LD_VAR 0 8
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: ST_TO_ADDR
// exit ;
40428: POP
40429: POP
40430: POP
40431: POP
40432: GO 40442
// end ; end ;
40434: GO 40370
40436: POP
40437: POP
// end ;
40438: GO 40256
40440: POP
40441: POP
// end ;
40442: LD_VAR 0 3
40446: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40447: LD_INT 0
40449: PPUSH
// if not side or side > 8 then
40450: LD_VAR 0 3
40454: NOT
40455: PUSH
40456: LD_VAR 0 3
40460: PUSH
40461: LD_INT 8
40463: GREATER
40464: OR
40465: IFFALSE 40469
// exit ;
40467: GO 40528
// if not range then
40469: LD_VAR 0 4
40473: NOT
40474: IFFALSE 40485
// range := - 12 ;
40476: LD_ADDR_VAR 0 4
40480: PUSH
40481: LD_INT 12
40483: NEG
40484: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40485: LD_VAR 0 1
40489: PPUSH
40490: LD_VAR 0 2
40494: PPUSH
40495: LD_VAR 0 3
40499: PPUSH
40500: LD_VAR 0 4
40504: PPUSH
40505: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40509: LD_VAR 0 1
40513: PPUSH
40514: LD_VAR 0 2
40518: PPUSH
40519: LD_VAR 0 3
40523: PPUSH
40524: CALL_OW 331
// end ;
40528: LD_VAR 0 5
40532: RET
// export function Video ( mode ) ; begin
40533: LD_INT 0
40535: PPUSH
// ingame_video = mode ;
40536: LD_ADDR_OWVAR 52
40540: PUSH
40541: LD_VAR 0 1
40545: ST_TO_ADDR
// interface_hidden = mode ;
40546: LD_ADDR_OWVAR 54
40550: PUSH
40551: LD_VAR 0 1
40555: ST_TO_ADDR
// end ;
40556: LD_VAR 0 2
40560: RET
// export function Join ( array , element ) ; begin
40561: LD_INT 0
40563: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40564: LD_ADDR_VAR 0 3
40568: PUSH
40569: LD_VAR 0 1
40573: PPUSH
40574: LD_VAR 0 1
40578: PUSH
40579: LD_INT 1
40581: PLUS
40582: PPUSH
40583: LD_VAR 0 2
40587: PPUSH
40588: CALL_OW 1
40592: ST_TO_ADDR
// end ;
40593: LD_VAR 0 3
40597: RET
// export function JoinUnion ( array , element ) ; begin
40598: LD_INT 0
40600: PPUSH
// result := array union element ;
40601: LD_ADDR_VAR 0 3
40605: PUSH
40606: LD_VAR 0 1
40610: PUSH
40611: LD_VAR 0 2
40615: UNION
40616: ST_TO_ADDR
// end ;
40617: LD_VAR 0 3
40621: RET
// export function GetBehemoths ( side ) ; begin
40622: LD_INT 0
40624: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
40625: LD_ADDR_VAR 0 2
40629: PUSH
40630: LD_INT 22
40632: PUSH
40633: LD_VAR 0 1
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 31
40644: PUSH
40645: LD_INT 25
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PPUSH
40656: CALL_OW 69
40660: ST_TO_ADDR
// end ;
40661: LD_VAR 0 2
40665: RET
// export function Shuffle ( array ) ; var i , index ; begin
40666: LD_INT 0
40668: PPUSH
40669: PPUSH
40670: PPUSH
// result := [ ] ;
40671: LD_ADDR_VAR 0 2
40675: PUSH
40676: EMPTY
40677: ST_TO_ADDR
// if not array then
40678: LD_VAR 0 1
40682: NOT
40683: IFFALSE 40687
// exit ;
40685: GO 40786
// Randomize ;
40687: CALL_OW 10
// for i = array downto 1 do
40691: LD_ADDR_VAR 0 3
40695: PUSH
40696: DOUBLE
40697: LD_VAR 0 1
40701: INC
40702: ST_TO_ADDR
40703: LD_INT 1
40705: PUSH
40706: FOR_DOWNTO
40707: IFFALSE 40784
// begin index := rand ( 1 , array ) ;
40709: LD_ADDR_VAR 0 4
40713: PUSH
40714: LD_INT 1
40716: PPUSH
40717: LD_VAR 0 1
40721: PPUSH
40722: CALL_OW 12
40726: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40727: LD_ADDR_VAR 0 2
40731: PUSH
40732: LD_VAR 0 2
40736: PPUSH
40737: LD_VAR 0 2
40741: PUSH
40742: LD_INT 1
40744: PLUS
40745: PPUSH
40746: LD_VAR 0 1
40750: PUSH
40751: LD_VAR 0 4
40755: ARRAY
40756: PPUSH
40757: CALL_OW 2
40761: ST_TO_ADDR
// array := Delete ( array , index ) ;
40762: LD_ADDR_VAR 0 1
40766: PUSH
40767: LD_VAR 0 1
40771: PPUSH
40772: LD_VAR 0 4
40776: PPUSH
40777: CALL_OW 3
40781: ST_TO_ADDR
// end ;
40782: GO 40706
40784: POP
40785: POP
// end ;
40786: LD_VAR 0 2
40790: RET
// export function GetBaseMaterials ( base ) ; begin
40791: LD_INT 0
40793: PPUSH
// result := [ 0 , 0 , 0 ] ;
40794: LD_ADDR_VAR 0 2
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: LIST
40812: ST_TO_ADDR
// if not base then
40813: LD_VAR 0 1
40817: NOT
40818: IFFALSE 40822
// exit ;
40820: GO 40871
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40822: LD_ADDR_VAR 0 2
40826: PUSH
40827: LD_VAR 0 1
40831: PPUSH
40832: LD_INT 1
40834: PPUSH
40835: CALL_OW 275
40839: PUSH
40840: LD_VAR 0 1
40844: PPUSH
40845: LD_INT 2
40847: PPUSH
40848: CALL_OW 275
40852: PUSH
40853: LD_VAR 0 1
40857: PPUSH
40858: LD_INT 3
40860: PPUSH
40861: CALL_OW 275
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: LIST
40870: ST_TO_ADDR
// end ;
40871: LD_VAR 0 2
40875: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40876: LD_INT 0
40878: PPUSH
40879: PPUSH
// result := array ;
40880: LD_ADDR_VAR 0 3
40884: PUSH
40885: LD_VAR 0 1
40889: ST_TO_ADDR
// if size > 0 then
40890: LD_VAR 0 2
40894: PUSH
40895: LD_INT 0
40897: GREATER
40898: IFFALSE 40944
// for i := array downto size do
40900: LD_ADDR_VAR 0 4
40904: PUSH
40905: DOUBLE
40906: LD_VAR 0 1
40910: INC
40911: ST_TO_ADDR
40912: LD_VAR 0 2
40916: PUSH
40917: FOR_DOWNTO
40918: IFFALSE 40942
// result := Delete ( result , result ) ;
40920: LD_ADDR_VAR 0 3
40924: PUSH
40925: LD_VAR 0 3
40929: PPUSH
40930: LD_VAR 0 3
40934: PPUSH
40935: CALL_OW 3
40939: ST_TO_ADDR
40940: GO 40917
40942: POP
40943: POP
// end ;
40944: LD_VAR 0 3
40948: RET
// export function ComExit ( unit ) ; var tmp ; begin
40949: LD_INT 0
40951: PPUSH
40952: PPUSH
// if not IsInUnit ( unit ) then
40953: LD_VAR 0 1
40957: PPUSH
40958: CALL_OW 310
40962: NOT
40963: IFFALSE 40967
// exit ;
40965: GO 41027
// tmp := IsInUnit ( unit ) ;
40967: LD_ADDR_VAR 0 3
40971: PUSH
40972: LD_VAR 0 1
40976: PPUSH
40977: CALL_OW 310
40981: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40982: LD_VAR 0 3
40986: PPUSH
40987: CALL_OW 247
40991: PUSH
40992: LD_INT 2
40994: EQUAL
40995: IFFALSE 41008
// ComExitVehicle ( unit ) else
40997: LD_VAR 0 1
41001: PPUSH
41002: CALL_OW 121
41006: GO 41017
// ComExitBuilding ( unit ) ;
41008: LD_VAR 0 1
41012: PPUSH
41013: CALL_OW 122
// result := tmp ;
41017: LD_ADDR_VAR 0 2
41021: PUSH
41022: LD_VAR 0 3
41026: ST_TO_ADDR
// end ;
41027: LD_VAR 0 2
41031: RET
// export function ComExitAll ( units ) ; var i ; begin
41032: LD_INT 0
41034: PPUSH
41035: PPUSH
// if not units then
41036: LD_VAR 0 1
41040: NOT
41041: IFFALSE 41045
// exit ;
41043: GO 41071
// for i in units do
41045: LD_ADDR_VAR 0 3
41049: PUSH
41050: LD_VAR 0 1
41054: PUSH
41055: FOR_IN
41056: IFFALSE 41069
// ComExit ( i ) ;
41058: LD_VAR 0 3
41062: PPUSH
41063: CALL 40949 0 1
41067: GO 41055
41069: POP
41070: POP
// end ;
41071: LD_VAR 0 2
41075: RET
// export function ResetHc ; begin
41076: LD_INT 0
41078: PPUSH
// InitHc ;
41079: CALL_OW 19
// hc_importance := 0 ;
41083: LD_ADDR_OWVAR 32
41087: PUSH
41088: LD_INT 0
41090: ST_TO_ADDR
// end ;
41091: LD_VAR 0 1
41095: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41096: LD_INT 0
41098: PPUSH
41099: PPUSH
41100: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41101: LD_ADDR_VAR 0 6
41105: PUSH
41106: LD_VAR 0 1
41110: PUSH
41111: LD_VAR 0 3
41115: PLUS
41116: PUSH
41117: LD_INT 2
41119: DIV
41120: ST_TO_ADDR
// if _x < 0 then
41121: LD_VAR 0 6
41125: PUSH
41126: LD_INT 0
41128: LESS
41129: IFFALSE 41146
// _x := _x * - 1 ;
41131: LD_ADDR_VAR 0 6
41135: PUSH
41136: LD_VAR 0 6
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: MUL
41145: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41146: LD_ADDR_VAR 0 7
41150: PUSH
41151: LD_VAR 0 2
41155: PUSH
41156: LD_VAR 0 4
41160: PLUS
41161: PUSH
41162: LD_INT 2
41164: DIV
41165: ST_TO_ADDR
// if _y < 0 then
41166: LD_VAR 0 7
41170: PUSH
41171: LD_INT 0
41173: LESS
41174: IFFALSE 41191
// _y := _y * - 1 ;
41176: LD_ADDR_VAR 0 7
41180: PUSH
41181: LD_VAR 0 7
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: MUL
41190: ST_TO_ADDR
// result := [ _x , _y ] ;
41191: LD_ADDR_VAR 0 5
41195: PUSH
41196: LD_VAR 0 6
41200: PUSH
41201: LD_VAR 0 7
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: ST_TO_ADDR
// end ;
41210: LD_VAR 0 5
41214: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41215: LD_INT 0
41217: PPUSH
41218: PPUSH
41219: PPUSH
41220: PPUSH
// task := GetTaskList ( unit ) ;
41221: LD_ADDR_VAR 0 7
41225: PUSH
41226: LD_VAR 0 1
41230: PPUSH
41231: CALL_OW 437
41235: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41236: LD_VAR 0 7
41240: NOT
41241: PUSH
41242: LD_VAR 0 1
41246: PPUSH
41247: LD_VAR 0 2
41251: PPUSH
41252: CALL_OW 308
41256: NOT
41257: AND
41258: IFFALSE 41262
// exit ;
41260: GO 41380
// if IsInArea ( unit , area ) then
41262: LD_VAR 0 1
41266: PPUSH
41267: LD_VAR 0 2
41271: PPUSH
41272: CALL_OW 308
41276: IFFALSE 41294
// begin ComMoveToArea ( unit , goAway ) ;
41278: LD_VAR 0 1
41282: PPUSH
41283: LD_VAR 0 3
41287: PPUSH
41288: CALL_OW 113
// exit ;
41292: GO 41380
// end ; if task [ 1 ] [ 1 ] <> M then
41294: LD_VAR 0 7
41298: PUSH
41299: LD_INT 1
41301: ARRAY
41302: PUSH
41303: LD_INT 1
41305: ARRAY
41306: PUSH
41307: LD_STRING M
41309: NONEQUAL
41310: IFFALSE 41314
// exit ;
41312: GO 41380
// x := task [ 1 ] [ 2 ] ;
41314: LD_ADDR_VAR 0 5
41318: PUSH
41319: LD_VAR 0 7
41323: PUSH
41324: LD_INT 1
41326: ARRAY
41327: PUSH
41328: LD_INT 2
41330: ARRAY
41331: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41332: LD_ADDR_VAR 0 6
41336: PUSH
41337: LD_VAR 0 7
41341: PUSH
41342: LD_INT 1
41344: ARRAY
41345: PUSH
41346: LD_INT 3
41348: ARRAY
41349: ST_TO_ADDR
// if InArea ( x , y , area ) then
41350: LD_VAR 0 5
41354: PPUSH
41355: LD_VAR 0 6
41359: PPUSH
41360: LD_VAR 0 2
41364: PPUSH
41365: CALL_OW 309
41369: IFFALSE 41380
// ComStop ( unit ) ;
41371: LD_VAR 0 1
41375: PPUSH
41376: CALL_OW 141
// end ;
41380: LD_VAR 0 4
41384: RET
// export function Abs ( value ) ; begin
41385: LD_INT 0
41387: PPUSH
// result := value ;
41388: LD_ADDR_VAR 0 2
41392: PUSH
41393: LD_VAR 0 1
41397: ST_TO_ADDR
// if value < 0 then
41398: LD_VAR 0 1
41402: PUSH
41403: LD_INT 0
41405: LESS
41406: IFFALSE 41423
// result := value * - 1 ;
41408: LD_ADDR_VAR 0 2
41412: PUSH
41413: LD_VAR 0 1
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: MUL
41422: ST_TO_ADDR
// end ;
41423: LD_VAR 0 2
41427: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41428: LD_INT 0
41430: PPUSH
41431: PPUSH
41432: PPUSH
41433: PPUSH
41434: PPUSH
41435: PPUSH
41436: PPUSH
41437: PPUSH
// if not unit or not building then
41438: LD_VAR 0 1
41442: NOT
41443: PUSH
41444: LD_VAR 0 2
41448: NOT
41449: OR
41450: IFFALSE 41454
// exit ;
41452: GO 41680
// x := GetX ( building ) ;
41454: LD_ADDR_VAR 0 4
41458: PUSH
41459: LD_VAR 0 2
41463: PPUSH
41464: CALL_OW 250
41468: ST_TO_ADDR
// y := GetY ( building ) ;
41469: LD_ADDR_VAR 0 6
41473: PUSH
41474: LD_VAR 0 2
41478: PPUSH
41479: CALL_OW 251
41483: ST_TO_ADDR
// d := GetDir ( building ) ;
41484: LD_ADDR_VAR 0 8
41488: PUSH
41489: LD_VAR 0 2
41493: PPUSH
41494: CALL_OW 254
41498: ST_TO_ADDR
// r := 4 ;
41499: LD_ADDR_VAR 0 9
41503: PUSH
41504: LD_INT 4
41506: ST_TO_ADDR
// for i := 1 to 5 do
41507: LD_ADDR_VAR 0 10
41511: PUSH
41512: DOUBLE
41513: LD_INT 1
41515: DEC
41516: ST_TO_ADDR
41517: LD_INT 5
41519: PUSH
41520: FOR_TO
41521: IFFALSE 41678
// begin _x := ShiftX ( x , d , r + i ) ;
41523: LD_ADDR_VAR 0 5
41527: PUSH
41528: LD_VAR 0 4
41532: PPUSH
41533: LD_VAR 0 8
41537: PPUSH
41538: LD_VAR 0 9
41542: PUSH
41543: LD_VAR 0 10
41547: PLUS
41548: PPUSH
41549: CALL_OW 272
41553: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41554: LD_ADDR_VAR 0 7
41558: PUSH
41559: LD_VAR 0 6
41563: PPUSH
41564: LD_VAR 0 8
41568: PPUSH
41569: LD_VAR 0 9
41573: PUSH
41574: LD_VAR 0 10
41578: PLUS
41579: PPUSH
41580: CALL_OW 273
41584: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41585: LD_VAR 0 5
41589: PPUSH
41590: LD_VAR 0 7
41594: PPUSH
41595: CALL_OW 488
41599: PUSH
41600: LD_VAR 0 5
41604: PPUSH
41605: LD_VAR 0 7
41609: PPUSH
41610: CALL_OW 428
41614: PPUSH
41615: CALL_OW 247
41619: PUSH
41620: LD_INT 3
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: IN
41630: NOT
41631: AND
41632: IFFALSE 41676
// begin ComMoveXY ( unit , _x , _y ) ;
41634: LD_VAR 0 1
41638: PPUSH
41639: LD_VAR 0 5
41643: PPUSH
41644: LD_VAR 0 7
41648: PPUSH
41649: CALL_OW 111
// result := [ _x , _y ] ;
41653: LD_ADDR_VAR 0 3
41657: PUSH
41658: LD_VAR 0 5
41662: PUSH
41663: LD_VAR 0 7
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: ST_TO_ADDR
// exit ;
41672: POP
41673: POP
41674: GO 41680
// end ; end ;
41676: GO 41520
41678: POP
41679: POP
// end ;
41680: LD_VAR 0 3
41684: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41685: LD_INT 0
41687: PPUSH
41688: PPUSH
41689: PPUSH
// result := 0 ;
41690: LD_ADDR_VAR 0 3
41694: PUSH
41695: LD_INT 0
41697: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41698: LD_VAR 0 1
41702: PUSH
41703: LD_INT 0
41705: LESS
41706: PUSH
41707: LD_VAR 0 1
41711: PUSH
41712: LD_INT 8
41714: GREATER
41715: OR
41716: PUSH
41717: LD_VAR 0 2
41721: PUSH
41722: LD_INT 0
41724: LESS
41725: OR
41726: PUSH
41727: LD_VAR 0 2
41731: PUSH
41732: LD_INT 8
41734: GREATER
41735: OR
41736: IFFALSE 41740
// exit ;
41738: GO 41815
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41740: LD_ADDR_VAR 0 4
41744: PUSH
41745: LD_INT 22
41747: PUSH
41748: LD_VAR 0 2
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PPUSH
41757: CALL_OW 69
41761: PUSH
41762: FOR_IN
41763: IFFALSE 41813
// begin un := UnitShoot ( i ) ;
41765: LD_ADDR_VAR 0 5
41769: PUSH
41770: LD_VAR 0 4
41774: PPUSH
41775: CALL_OW 504
41779: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41780: LD_VAR 0 5
41784: PPUSH
41785: CALL_OW 255
41789: PUSH
41790: LD_VAR 0 1
41794: EQUAL
41795: IFFALSE 41811
// begin result := un ;
41797: LD_ADDR_VAR 0 3
41801: PUSH
41802: LD_VAR 0 5
41806: ST_TO_ADDR
// exit ;
41807: POP
41808: POP
41809: GO 41815
// end ; end ;
41811: GO 41762
41813: POP
41814: POP
// end ;
41815: LD_VAR 0 3
41819: RET
// export function GetCargoBay ( units ) ; begin
41820: LD_INT 0
41822: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41823: LD_ADDR_VAR 0 2
41827: PUSH
41828: LD_VAR 0 1
41832: PPUSH
41833: LD_INT 2
41835: PUSH
41836: LD_INT 34
41838: PUSH
41839: LD_INT 12
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 34
41848: PUSH
41849: LD_INT 51
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 34
41858: PUSH
41859: LD_INT 32
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 34
41868: PUSH
41869: LD_EXP 20
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: PPUSH
41885: CALL_OW 72
41889: ST_TO_ADDR
// end ; end_of_file
41890: LD_VAR 0 2
41894: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
41895: LD_INT 0
41897: PPUSH
// ar_miner := 81 ;
41898: LD_ADDR_EXP 26
41902: PUSH
41903: LD_INT 81
41905: ST_TO_ADDR
// ar_crane := 88 ;
41906: LD_ADDR_EXP 25
41910: PUSH
41911: LD_INT 88
41913: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
41914: LD_ADDR_EXP 20
41918: PUSH
41919: LD_INT 89
41921: ST_TO_ADDR
// us_hack := 99 ;
41922: LD_ADDR_EXP 21
41926: PUSH
41927: LD_INT 99
41929: ST_TO_ADDR
// us_artillery := 97 ;
41930: LD_ADDR_EXP 22
41934: PUSH
41935: LD_INT 97
41937: ST_TO_ADDR
// ar_bio_bomb := 91 ;
41938: LD_ADDR_EXP 23
41942: PUSH
41943: LD_INT 91
41945: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
41946: LD_ADDR_EXP 24
41950: PUSH
41951: LD_INT 92
41953: ST_TO_ADDR
// ru_radar := 98 ;
41954: LD_ADDR_EXP 19
41958: PUSH
41959: LD_INT 98
41961: ST_TO_ADDR
// tech_Artillery := 80 ;
41962: LD_ADDR_EXP 27
41966: PUSH
41967: LD_INT 80
41969: ST_TO_ADDR
// tech_RadMat := 81 ;
41970: LD_ADDR_EXP 28
41974: PUSH
41975: LD_INT 81
41977: ST_TO_ADDR
// tech_BasicTools := 82 ;
41978: LD_ADDR_EXP 29
41982: PUSH
41983: LD_INT 82
41985: ST_TO_ADDR
// tech_Cargo := 83 ;
41986: LD_ADDR_EXP 30
41990: PUSH
41991: LD_INT 83
41993: ST_TO_ADDR
// tech_Track := 84 ;
41994: LD_ADDR_EXP 31
41998: PUSH
41999: LD_INT 84
42001: ST_TO_ADDR
// tech_Crane := 85 ;
42002: LD_ADDR_EXP 32
42006: PUSH
42007: LD_INT 85
42009: ST_TO_ADDR
// tech_Bulldozer := 86 ;
42010: LD_ADDR_EXP 33
42014: PUSH
42015: LD_INT 86
42017: ST_TO_ADDR
// tech_Hovercraft := 87 ;
42018: LD_ADDR_EXP 34
42022: PUSH
42023: LD_INT 87
42025: ST_TO_ADDR
// class_mastodont := 31 ;
42026: LD_ADDR_EXP 35
42030: PUSH
42031: LD_INT 31
42033: ST_TO_ADDR
// class_horse := 21 ;
42034: LD_ADDR_EXP 36
42038: PUSH
42039: LD_INT 21
42041: ST_TO_ADDR
// end ;
42042: LD_VAR 0 1
42046: RET
// every 1 do
42047: GO 42049
42049: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
42050: CALL 41895 0 0
42054: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
42055: LD_INT 0
42057: PPUSH
// if p2 = 100 then
42058: LD_VAR 0 2
42062: PUSH
42063: LD_INT 100
42065: EQUAL
42066: IFFALSE 43015
// begin if not StreamModeActive then
42068: LD_EXP 37
42072: NOT
42073: IFFALSE 42083
// StreamModeActive := true ;
42075: LD_ADDR_EXP 37
42079: PUSH
42080: LD_INT 1
42082: ST_TO_ADDR
// if p3 = 0 then
42083: LD_VAR 0 3
42087: PUSH
42088: LD_INT 0
42090: EQUAL
42091: IFFALSE 42097
// InitStreamMode ;
42093: CALL 43175 0 0
// if p3 = 1 then
42097: LD_VAR 0 3
42101: PUSH
42102: LD_INT 1
42104: EQUAL
42105: IFFALSE 42115
// sRocket := true ;
42107: LD_ADDR_EXP 42
42111: PUSH
42112: LD_INT 1
42114: ST_TO_ADDR
// if p3 = 2 then
42115: LD_VAR 0 3
42119: PUSH
42120: LD_INT 2
42122: EQUAL
42123: IFFALSE 42133
// sSpeed := true ;
42125: LD_ADDR_EXP 41
42129: PUSH
42130: LD_INT 1
42132: ST_TO_ADDR
// if p3 = 3 then
42133: LD_VAR 0 3
42137: PUSH
42138: LD_INT 3
42140: EQUAL
42141: IFFALSE 42151
// sEngine := true ;
42143: LD_ADDR_EXP 43
42147: PUSH
42148: LD_INT 1
42150: ST_TO_ADDR
// if p3 = 4 then
42151: LD_VAR 0 3
42155: PUSH
42156: LD_INT 4
42158: EQUAL
42159: IFFALSE 42169
// sSpec := true ;
42161: LD_ADDR_EXP 40
42165: PUSH
42166: LD_INT 1
42168: ST_TO_ADDR
// if p3 = 5 then
42169: LD_VAR 0 3
42173: PUSH
42174: LD_INT 5
42176: EQUAL
42177: IFFALSE 42187
// sLevel := true ;
42179: LD_ADDR_EXP 44
42183: PUSH
42184: LD_INT 1
42186: ST_TO_ADDR
// if p3 = 6 then
42187: LD_VAR 0 3
42191: PUSH
42192: LD_INT 6
42194: EQUAL
42195: IFFALSE 42205
// sArmoury := true ;
42197: LD_ADDR_EXP 45
42201: PUSH
42202: LD_INT 1
42204: ST_TO_ADDR
// if p3 = 7 then
42205: LD_VAR 0 3
42209: PUSH
42210: LD_INT 7
42212: EQUAL
42213: IFFALSE 42223
// sRadar := true ;
42215: LD_ADDR_EXP 46
42219: PUSH
42220: LD_INT 1
42222: ST_TO_ADDR
// if p3 = 8 then
42223: LD_VAR 0 3
42227: PUSH
42228: LD_INT 8
42230: EQUAL
42231: IFFALSE 42241
// sBunker := true ;
42233: LD_ADDR_EXP 47
42237: PUSH
42238: LD_INT 1
42240: ST_TO_ADDR
// if p3 = 9 then
42241: LD_VAR 0 3
42245: PUSH
42246: LD_INT 9
42248: EQUAL
42249: IFFALSE 42259
// sHack := true ;
42251: LD_ADDR_EXP 48
42255: PUSH
42256: LD_INT 1
42258: ST_TO_ADDR
// if p3 = 10 then
42259: LD_VAR 0 3
42263: PUSH
42264: LD_INT 10
42266: EQUAL
42267: IFFALSE 42277
// sFire := true ;
42269: LD_ADDR_EXP 49
42273: PUSH
42274: LD_INT 1
42276: ST_TO_ADDR
// if p3 = 11 then
42277: LD_VAR 0 3
42281: PUSH
42282: LD_INT 11
42284: EQUAL
42285: IFFALSE 42295
// sRefresh := true ;
42287: LD_ADDR_EXP 50
42291: PUSH
42292: LD_INT 1
42294: ST_TO_ADDR
// if p3 = 12 then
42295: LD_VAR 0 3
42299: PUSH
42300: LD_INT 12
42302: EQUAL
42303: IFFALSE 42313
// sExp := true ;
42305: LD_ADDR_EXP 51
42309: PUSH
42310: LD_INT 1
42312: ST_TO_ADDR
// if p3 = 13 then
42313: LD_VAR 0 3
42317: PUSH
42318: LD_INT 13
42320: EQUAL
42321: IFFALSE 42331
// sDepot := true ;
42323: LD_ADDR_EXP 52
42327: PUSH
42328: LD_INT 1
42330: ST_TO_ADDR
// if p3 = 14 then
42331: LD_VAR 0 3
42335: PUSH
42336: LD_INT 14
42338: EQUAL
42339: IFFALSE 42349
// sFlag := true ;
42341: LD_ADDR_EXP 53
42345: PUSH
42346: LD_INT 1
42348: ST_TO_ADDR
// if p3 = 15 then
42349: LD_VAR 0 3
42353: PUSH
42354: LD_INT 15
42356: EQUAL
42357: IFFALSE 42367
// sKamikadze := true ;
42359: LD_ADDR_EXP 61
42363: PUSH
42364: LD_INT 1
42366: ST_TO_ADDR
// if p3 = 16 then
42367: LD_VAR 0 3
42371: PUSH
42372: LD_INT 16
42374: EQUAL
42375: IFFALSE 42385
// sTroll := true ;
42377: LD_ADDR_EXP 62
42381: PUSH
42382: LD_INT 1
42384: ST_TO_ADDR
// if p3 = 17 then
42385: LD_VAR 0 3
42389: PUSH
42390: LD_INT 17
42392: EQUAL
42393: IFFALSE 42403
// sSlow := true ;
42395: LD_ADDR_EXP 63
42399: PUSH
42400: LD_INT 1
42402: ST_TO_ADDR
// if p3 = 18 then
42403: LD_VAR 0 3
42407: PUSH
42408: LD_INT 18
42410: EQUAL
42411: IFFALSE 42421
// sLack := true ;
42413: LD_ADDR_EXP 64
42417: PUSH
42418: LD_INT 1
42420: ST_TO_ADDR
// if p3 = 19 then
42421: LD_VAR 0 3
42425: PUSH
42426: LD_INT 19
42428: EQUAL
42429: IFFALSE 42439
// sTank := true ;
42431: LD_ADDR_EXP 66
42435: PUSH
42436: LD_INT 1
42438: ST_TO_ADDR
// if p3 = 20 then
42439: LD_VAR 0 3
42443: PUSH
42444: LD_INT 20
42446: EQUAL
42447: IFFALSE 42457
// sRemote := true ;
42449: LD_ADDR_EXP 67
42453: PUSH
42454: LD_INT 1
42456: ST_TO_ADDR
// if p3 = 21 then
42457: LD_VAR 0 3
42461: PUSH
42462: LD_INT 21
42464: EQUAL
42465: IFFALSE 42475
// sPowell := true ;
42467: LD_ADDR_EXP 68
42471: PUSH
42472: LD_INT 1
42474: ST_TO_ADDR
// if p3 = 22 then
42475: LD_VAR 0 3
42479: PUSH
42480: LD_INT 22
42482: EQUAL
42483: IFFALSE 42493
// sTeleport := true ;
42485: LD_ADDR_EXP 71
42489: PUSH
42490: LD_INT 1
42492: ST_TO_ADDR
// if p3 = 23 then
42493: LD_VAR 0 3
42497: PUSH
42498: LD_INT 23
42500: EQUAL
42501: IFFALSE 42511
// sOilTower := true ;
42503: LD_ADDR_EXP 73
42507: PUSH
42508: LD_INT 1
42510: ST_TO_ADDR
// if p3 = 24 then
42511: LD_VAR 0 3
42515: PUSH
42516: LD_INT 24
42518: EQUAL
42519: IFFALSE 42529
// sShovel := true ;
42521: LD_ADDR_EXP 74
42525: PUSH
42526: LD_INT 1
42528: ST_TO_ADDR
// if p3 = 25 then
42529: LD_VAR 0 3
42533: PUSH
42534: LD_INT 25
42536: EQUAL
42537: IFFALSE 42547
// sSheik := true ;
42539: LD_ADDR_EXP 75
42543: PUSH
42544: LD_INT 1
42546: ST_TO_ADDR
// if p3 = 26 then
42547: LD_VAR 0 3
42551: PUSH
42552: LD_INT 26
42554: EQUAL
42555: IFFALSE 42565
// sEarthquake := true ;
42557: LD_ADDR_EXP 77
42561: PUSH
42562: LD_INT 1
42564: ST_TO_ADDR
// if p3 = 27 then
42565: LD_VAR 0 3
42569: PUSH
42570: LD_INT 27
42572: EQUAL
42573: IFFALSE 42583
// sAI := true ;
42575: LD_ADDR_EXP 78
42579: PUSH
42580: LD_INT 1
42582: ST_TO_ADDR
// if p3 = 28 then
42583: LD_VAR 0 3
42587: PUSH
42588: LD_INT 28
42590: EQUAL
42591: IFFALSE 42601
// sCargo := true ;
42593: LD_ADDR_EXP 81
42597: PUSH
42598: LD_INT 1
42600: ST_TO_ADDR
// if p3 = 29 then
42601: LD_VAR 0 3
42605: PUSH
42606: LD_INT 29
42608: EQUAL
42609: IFFALSE 42619
// sDLaser := true ;
42611: LD_ADDR_EXP 82
42615: PUSH
42616: LD_INT 1
42618: ST_TO_ADDR
// if p3 = 30 then
42619: LD_VAR 0 3
42623: PUSH
42624: LD_INT 30
42626: EQUAL
42627: IFFALSE 42637
// sExchange := true ;
42629: LD_ADDR_EXP 83
42633: PUSH
42634: LD_INT 1
42636: ST_TO_ADDR
// if p3 = 31 then
42637: LD_VAR 0 3
42641: PUSH
42642: LD_INT 31
42644: EQUAL
42645: IFFALSE 42655
// sFac := true ;
42647: LD_ADDR_EXP 84
42651: PUSH
42652: LD_INT 1
42654: ST_TO_ADDR
// if p3 = 32 then
42655: LD_VAR 0 3
42659: PUSH
42660: LD_INT 32
42662: EQUAL
42663: IFFALSE 42673
// sPower := true ;
42665: LD_ADDR_EXP 85
42669: PUSH
42670: LD_INT 1
42672: ST_TO_ADDR
// if p3 = 33 then
42673: LD_VAR 0 3
42677: PUSH
42678: LD_INT 33
42680: EQUAL
42681: IFFALSE 42691
// sRandom := true ;
42683: LD_ADDR_EXP 86
42687: PUSH
42688: LD_INT 1
42690: ST_TO_ADDR
// if p3 = 34 then
42691: LD_VAR 0 3
42695: PUSH
42696: LD_INT 34
42698: EQUAL
42699: IFFALSE 42709
// sShield := true ;
42701: LD_ADDR_EXP 87
42705: PUSH
42706: LD_INT 1
42708: ST_TO_ADDR
// if p3 = 35 then
42709: LD_VAR 0 3
42713: PUSH
42714: LD_INT 35
42716: EQUAL
42717: IFFALSE 42727
// sTime := true ;
42719: LD_ADDR_EXP 88
42723: PUSH
42724: LD_INT 1
42726: ST_TO_ADDR
// if p3 = 36 then
42727: LD_VAR 0 3
42731: PUSH
42732: LD_INT 36
42734: EQUAL
42735: IFFALSE 42745
// sTools := true ;
42737: LD_ADDR_EXP 89
42741: PUSH
42742: LD_INT 1
42744: ST_TO_ADDR
// if p3 = 101 then
42745: LD_VAR 0 3
42749: PUSH
42750: LD_INT 101
42752: EQUAL
42753: IFFALSE 42763
// sSold := true ;
42755: LD_ADDR_EXP 54
42759: PUSH
42760: LD_INT 1
42762: ST_TO_ADDR
// if p3 = 102 then
42763: LD_VAR 0 3
42767: PUSH
42768: LD_INT 102
42770: EQUAL
42771: IFFALSE 42781
// sDiff := true ;
42773: LD_ADDR_EXP 55
42777: PUSH
42778: LD_INT 1
42780: ST_TO_ADDR
// if p3 = 103 then
42781: LD_VAR 0 3
42785: PUSH
42786: LD_INT 103
42788: EQUAL
42789: IFFALSE 42799
// sFog := true ;
42791: LD_ADDR_EXP 58
42795: PUSH
42796: LD_INT 1
42798: ST_TO_ADDR
// if p3 = 104 then
42799: LD_VAR 0 3
42803: PUSH
42804: LD_INT 104
42806: EQUAL
42807: IFFALSE 42817
// sReset := true ;
42809: LD_ADDR_EXP 59
42813: PUSH
42814: LD_INT 1
42816: ST_TO_ADDR
// if p3 = 105 then
42817: LD_VAR 0 3
42821: PUSH
42822: LD_INT 105
42824: EQUAL
42825: IFFALSE 42835
// sSun := true ;
42827: LD_ADDR_EXP 60
42831: PUSH
42832: LD_INT 1
42834: ST_TO_ADDR
// if p3 = 106 then
42835: LD_VAR 0 3
42839: PUSH
42840: LD_INT 106
42842: EQUAL
42843: IFFALSE 42853
// sTiger := true ;
42845: LD_ADDR_EXP 56
42849: PUSH
42850: LD_INT 1
42852: ST_TO_ADDR
// if p3 = 107 then
42853: LD_VAR 0 3
42857: PUSH
42858: LD_INT 107
42860: EQUAL
42861: IFFALSE 42871
// sBomb := true ;
42863: LD_ADDR_EXP 57
42867: PUSH
42868: LD_INT 1
42870: ST_TO_ADDR
// if p3 = 108 then
42871: LD_VAR 0 3
42875: PUSH
42876: LD_INT 108
42878: EQUAL
42879: IFFALSE 42889
// sWound := true ;
42881: LD_ADDR_EXP 65
42885: PUSH
42886: LD_INT 1
42888: ST_TO_ADDR
// if p3 = 109 then
42889: LD_VAR 0 3
42893: PUSH
42894: LD_INT 109
42896: EQUAL
42897: IFFALSE 42907
// sBetray := true ;
42899: LD_ADDR_EXP 69
42903: PUSH
42904: LD_INT 1
42906: ST_TO_ADDR
// if p3 = 110 then
42907: LD_VAR 0 3
42911: PUSH
42912: LD_INT 110
42914: EQUAL
42915: IFFALSE 42925
// sContamin := true ;
42917: LD_ADDR_EXP 70
42921: PUSH
42922: LD_INT 1
42924: ST_TO_ADDR
// if p3 = 111 then
42925: LD_VAR 0 3
42929: PUSH
42930: LD_INT 111
42932: EQUAL
42933: IFFALSE 42943
// sOil := true ;
42935: LD_ADDR_EXP 72
42939: PUSH
42940: LD_INT 1
42942: ST_TO_ADDR
// if p3 = 112 then
42943: LD_VAR 0 3
42947: PUSH
42948: LD_INT 112
42950: EQUAL
42951: IFFALSE 42961
// sStu := true ;
42953: LD_ADDR_EXP 76
42957: PUSH
42958: LD_INT 1
42960: ST_TO_ADDR
// if p3 = 113 then
42961: LD_VAR 0 3
42965: PUSH
42966: LD_INT 113
42968: EQUAL
42969: IFFALSE 42979
// sBazooka := true ;
42971: LD_ADDR_EXP 79
42975: PUSH
42976: LD_INT 1
42978: ST_TO_ADDR
// if p3 = 114 then
42979: LD_VAR 0 3
42983: PUSH
42984: LD_INT 114
42986: EQUAL
42987: IFFALSE 42997
// sMortar := true ;
42989: LD_ADDR_EXP 80
42993: PUSH
42994: LD_INT 1
42996: ST_TO_ADDR
// if p3 = 115 then
42997: LD_VAR 0 3
43001: PUSH
43002: LD_INT 115
43004: EQUAL
43005: IFFALSE 43015
// sRanger := true ;
43007: LD_ADDR_EXP 90
43011: PUSH
43012: LD_INT 1
43014: ST_TO_ADDR
// end ; if p2 = 101 then
43015: LD_VAR 0 2
43019: PUSH
43020: LD_INT 101
43022: EQUAL
43023: IFFALSE 43151
// begin case p3 of 1 :
43025: LD_VAR 0 3
43029: PUSH
43030: LD_INT 1
43032: DOUBLE
43033: EQUAL
43034: IFTRUE 43038
43036: GO 43045
43038: POP
// hHackUnlimitedResources ; 2 :
43039: CALL 54188 0 0
43043: GO 43151
43045: LD_INT 2
43047: DOUBLE
43048: EQUAL
43049: IFTRUE 43053
43051: GO 43060
43053: POP
// hHackSetLevel10 ; 3 :
43054: CALL 54321 0 0
43058: GO 43151
43060: LD_INT 3
43062: DOUBLE
43063: EQUAL
43064: IFTRUE 43068
43066: GO 43075
43068: POP
// hHackSetLevel10YourUnits ; 4 :
43069: CALL 54406 0 0
43073: GO 43151
43075: LD_INT 4
43077: DOUBLE
43078: EQUAL
43079: IFTRUE 43083
43081: GO 43090
43083: POP
// hHackInvincible ; 5 :
43084: CALL 54854 0 0
43088: GO 43151
43090: LD_INT 5
43092: DOUBLE
43093: EQUAL
43094: IFTRUE 43098
43096: GO 43105
43098: POP
// hHackInvisible ; 6 :
43099: CALL 54965 0 0
43103: GO 43151
43105: LD_INT 6
43107: DOUBLE
43108: EQUAL
43109: IFTRUE 43113
43111: GO 43120
43113: POP
// hHackChangeYourSide ; 7 :
43114: CALL 55022 0 0
43118: GO 43151
43120: LD_INT 7
43122: DOUBLE
43123: EQUAL
43124: IFTRUE 43128
43126: GO 43135
43128: POP
// hHackChangeUnitSide ; 8 :
43129: CALL 55064 0 0
43133: GO 43151
43135: LD_INT 8
43137: DOUBLE
43138: EQUAL
43139: IFTRUE 43143
43141: GO 43150
43143: POP
// hHackFog ; end ;
43144: CALL 55165 0 0
43148: GO 43151
43150: POP
// end ; end ;
43151: LD_VAR 0 7
43155: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
43156: GO 43158
43158: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
43159: LD_STRING initStreamRollete();
43161: PPUSH
43162: CALL_OW 559
// InitStreamMode ;
43166: CALL 43175 0 0
// DefineStreamItems ( ) ;
43170: CALL 43615 0 0
// end ;
43174: END
// function InitStreamMode ; begin
43175: LD_INT 0
43177: PPUSH
// streamModeActive := false ;
43178: LD_ADDR_EXP 37
43182: PUSH
43183: LD_INT 0
43185: ST_TO_ADDR
// normalCounter := 36 ;
43186: LD_ADDR_EXP 38
43190: PUSH
43191: LD_INT 36
43193: ST_TO_ADDR
// hardcoreCounter := 16 ;
43194: LD_ADDR_EXP 39
43198: PUSH
43199: LD_INT 16
43201: ST_TO_ADDR
// sRocket := false ;
43202: LD_ADDR_EXP 42
43206: PUSH
43207: LD_INT 0
43209: ST_TO_ADDR
// sSpeed := false ;
43210: LD_ADDR_EXP 41
43214: PUSH
43215: LD_INT 0
43217: ST_TO_ADDR
// sEngine := false ;
43218: LD_ADDR_EXP 43
43222: PUSH
43223: LD_INT 0
43225: ST_TO_ADDR
// sSpec := false ;
43226: LD_ADDR_EXP 40
43230: PUSH
43231: LD_INT 0
43233: ST_TO_ADDR
// sLevel := false ;
43234: LD_ADDR_EXP 44
43238: PUSH
43239: LD_INT 0
43241: ST_TO_ADDR
// sArmoury := false ;
43242: LD_ADDR_EXP 45
43246: PUSH
43247: LD_INT 0
43249: ST_TO_ADDR
// sRadar := false ;
43250: LD_ADDR_EXP 46
43254: PUSH
43255: LD_INT 0
43257: ST_TO_ADDR
// sBunker := false ;
43258: LD_ADDR_EXP 47
43262: PUSH
43263: LD_INT 0
43265: ST_TO_ADDR
// sHack := false ;
43266: LD_ADDR_EXP 48
43270: PUSH
43271: LD_INT 0
43273: ST_TO_ADDR
// sFire := false ;
43274: LD_ADDR_EXP 49
43278: PUSH
43279: LD_INT 0
43281: ST_TO_ADDR
// sRefresh := false ;
43282: LD_ADDR_EXP 50
43286: PUSH
43287: LD_INT 0
43289: ST_TO_ADDR
// sExp := false ;
43290: LD_ADDR_EXP 51
43294: PUSH
43295: LD_INT 0
43297: ST_TO_ADDR
// sDepot := false ;
43298: LD_ADDR_EXP 52
43302: PUSH
43303: LD_INT 0
43305: ST_TO_ADDR
// sFlag := false ;
43306: LD_ADDR_EXP 53
43310: PUSH
43311: LD_INT 0
43313: ST_TO_ADDR
// sKamikadze := false ;
43314: LD_ADDR_EXP 61
43318: PUSH
43319: LD_INT 0
43321: ST_TO_ADDR
// sTroll := false ;
43322: LD_ADDR_EXP 62
43326: PUSH
43327: LD_INT 0
43329: ST_TO_ADDR
// sSlow := false ;
43330: LD_ADDR_EXP 63
43334: PUSH
43335: LD_INT 0
43337: ST_TO_ADDR
// sLack := false ;
43338: LD_ADDR_EXP 64
43342: PUSH
43343: LD_INT 0
43345: ST_TO_ADDR
// sTank := false ;
43346: LD_ADDR_EXP 66
43350: PUSH
43351: LD_INT 0
43353: ST_TO_ADDR
// sRemote := false ;
43354: LD_ADDR_EXP 67
43358: PUSH
43359: LD_INT 0
43361: ST_TO_ADDR
// sPowell := false ;
43362: LD_ADDR_EXP 68
43366: PUSH
43367: LD_INT 0
43369: ST_TO_ADDR
// sTeleport := false ;
43370: LD_ADDR_EXP 71
43374: PUSH
43375: LD_INT 0
43377: ST_TO_ADDR
// sOilTower := false ;
43378: LD_ADDR_EXP 73
43382: PUSH
43383: LD_INT 0
43385: ST_TO_ADDR
// sShovel := false ;
43386: LD_ADDR_EXP 74
43390: PUSH
43391: LD_INT 0
43393: ST_TO_ADDR
// sSheik := false ;
43394: LD_ADDR_EXP 75
43398: PUSH
43399: LD_INT 0
43401: ST_TO_ADDR
// sEarthquake := false ;
43402: LD_ADDR_EXP 77
43406: PUSH
43407: LD_INT 0
43409: ST_TO_ADDR
// sAI := false ;
43410: LD_ADDR_EXP 78
43414: PUSH
43415: LD_INT 0
43417: ST_TO_ADDR
// sCargo := false ;
43418: LD_ADDR_EXP 81
43422: PUSH
43423: LD_INT 0
43425: ST_TO_ADDR
// sDLaser := false ;
43426: LD_ADDR_EXP 82
43430: PUSH
43431: LD_INT 0
43433: ST_TO_ADDR
// sExchange := false ;
43434: LD_ADDR_EXP 83
43438: PUSH
43439: LD_INT 0
43441: ST_TO_ADDR
// sFac := false ;
43442: LD_ADDR_EXP 84
43446: PUSH
43447: LD_INT 0
43449: ST_TO_ADDR
// sPower := false ;
43450: LD_ADDR_EXP 85
43454: PUSH
43455: LD_INT 0
43457: ST_TO_ADDR
// sRandom := false ;
43458: LD_ADDR_EXP 86
43462: PUSH
43463: LD_INT 0
43465: ST_TO_ADDR
// sShield := false ;
43466: LD_ADDR_EXP 87
43470: PUSH
43471: LD_INT 0
43473: ST_TO_ADDR
// sTime := false ;
43474: LD_ADDR_EXP 88
43478: PUSH
43479: LD_INT 0
43481: ST_TO_ADDR
// sTools := false ;
43482: LD_ADDR_EXP 89
43486: PUSH
43487: LD_INT 0
43489: ST_TO_ADDR
// sSold := false ;
43490: LD_ADDR_EXP 54
43494: PUSH
43495: LD_INT 0
43497: ST_TO_ADDR
// sDiff := false ;
43498: LD_ADDR_EXP 55
43502: PUSH
43503: LD_INT 0
43505: ST_TO_ADDR
// sFog := false ;
43506: LD_ADDR_EXP 58
43510: PUSH
43511: LD_INT 0
43513: ST_TO_ADDR
// sReset := false ;
43514: LD_ADDR_EXP 59
43518: PUSH
43519: LD_INT 0
43521: ST_TO_ADDR
// sSun := false ;
43522: LD_ADDR_EXP 60
43526: PUSH
43527: LD_INT 0
43529: ST_TO_ADDR
// sTiger := false ;
43530: LD_ADDR_EXP 56
43534: PUSH
43535: LD_INT 0
43537: ST_TO_ADDR
// sBomb := false ;
43538: LD_ADDR_EXP 57
43542: PUSH
43543: LD_INT 0
43545: ST_TO_ADDR
// sWound := false ;
43546: LD_ADDR_EXP 65
43550: PUSH
43551: LD_INT 0
43553: ST_TO_ADDR
// sBetray := false ;
43554: LD_ADDR_EXP 69
43558: PUSH
43559: LD_INT 0
43561: ST_TO_ADDR
// sContamin := false ;
43562: LD_ADDR_EXP 70
43566: PUSH
43567: LD_INT 0
43569: ST_TO_ADDR
// sOil := false ;
43570: LD_ADDR_EXP 72
43574: PUSH
43575: LD_INT 0
43577: ST_TO_ADDR
// sStu := false ;
43578: LD_ADDR_EXP 76
43582: PUSH
43583: LD_INT 0
43585: ST_TO_ADDR
// sBazooka := false ;
43586: LD_ADDR_EXP 79
43590: PUSH
43591: LD_INT 0
43593: ST_TO_ADDR
// sMortar := false ;
43594: LD_ADDR_EXP 80
43598: PUSH
43599: LD_INT 0
43601: ST_TO_ADDR
// sRanger := false ;
43602: LD_ADDR_EXP 90
43606: PUSH
43607: LD_INT 0
43609: ST_TO_ADDR
// end ;
43610: LD_VAR 0 1
43614: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
43615: LD_INT 0
43617: PPUSH
43618: PPUSH
43619: PPUSH
43620: PPUSH
43621: PPUSH
// result := [ ] ;
43622: LD_ADDR_VAR 0 1
43626: PUSH
43627: EMPTY
43628: ST_TO_ADDR
// if campaign_id = 1 then
43629: LD_OWVAR 69
43633: PUSH
43634: LD_INT 1
43636: EQUAL
43637: IFFALSE 46575
// begin case mission_number of 1 :
43639: LD_OWVAR 70
43643: PUSH
43644: LD_INT 1
43646: DOUBLE
43647: EQUAL
43648: IFTRUE 43652
43650: GO 43716
43652: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
43653: LD_ADDR_VAR 0 1
43657: PUSH
43658: LD_INT 2
43660: PUSH
43661: LD_INT 4
43663: PUSH
43664: LD_INT 11
43666: PUSH
43667: LD_INT 12
43669: PUSH
43670: LD_INT 15
43672: PUSH
43673: LD_INT 16
43675: PUSH
43676: LD_INT 22
43678: PUSH
43679: LD_INT 23
43681: PUSH
43682: LD_INT 26
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 101
43698: PUSH
43699: LD_INT 102
43701: PUSH
43702: LD_INT 106
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: LIST
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: ST_TO_ADDR
43714: GO 46573
43716: LD_INT 2
43718: DOUBLE
43719: EQUAL
43720: IFTRUE 43724
43722: GO 43796
43724: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
43725: LD_ADDR_VAR 0 1
43729: PUSH
43730: LD_INT 2
43732: PUSH
43733: LD_INT 4
43735: PUSH
43736: LD_INT 11
43738: PUSH
43739: LD_INT 12
43741: PUSH
43742: LD_INT 15
43744: PUSH
43745: LD_INT 16
43747: PUSH
43748: LD_INT 22
43750: PUSH
43751: LD_INT 23
43753: PUSH
43754: LD_INT 26
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 101
43770: PUSH
43771: LD_INT 102
43773: PUSH
43774: LD_INT 105
43776: PUSH
43777: LD_INT 106
43779: PUSH
43780: LD_INT 108
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: ST_TO_ADDR
43794: GO 46573
43796: LD_INT 3
43798: DOUBLE
43799: EQUAL
43800: IFTRUE 43804
43802: GO 43880
43804: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
43805: LD_ADDR_VAR 0 1
43809: PUSH
43810: LD_INT 2
43812: PUSH
43813: LD_INT 4
43815: PUSH
43816: LD_INT 5
43818: PUSH
43819: LD_INT 11
43821: PUSH
43822: LD_INT 12
43824: PUSH
43825: LD_INT 15
43827: PUSH
43828: LD_INT 16
43830: PUSH
43831: LD_INT 22
43833: PUSH
43834: LD_INT 26
43836: PUSH
43837: LD_INT 36
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 101
43854: PUSH
43855: LD_INT 102
43857: PUSH
43858: LD_INT 105
43860: PUSH
43861: LD_INT 106
43863: PUSH
43864: LD_INT 108
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: ST_TO_ADDR
43878: GO 46573
43880: LD_INT 4
43882: DOUBLE
43883: EQUAL
43884: IFTRUE 43888
43886: GO 43972
43888: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
43889: LD_ADDR_VAR 0 1
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: LD_INT 4
43899: PUSH
43900: LD_INT 5
43902: PUSH
43903: LD_INT 8
43905: PUSH
43906: LD_INT 11
43908: PUSH
43909: LD_INT 12
43911: PUSH
43912: LD_INT 15
43914: PUSH
43915: LD_INT 16
43917: PUSH
43918: LD_INT 22
43920: PUSH
43921: LD_INT 23
43923: PUSH
43924: LD_INT 26
43926: PUSH
43927: LD_INT 36
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 101
43946: PUSH
43947: LD_INT 102
43949: PUSH
43950: LD_INT 105
43952: PUSH
43953: LD_INT 106
43955: PUSH
43956: LD_INT 108
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: ST_TO_ADDR
43970: GO 46573
43972: LD_INT 5
43974: DOUBLE
43975: EQUAL
43976: IFTRUE 43980
43978: GO 44080
43980: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
43981: LD_ADDR_VAR 0 1
43985: PUSH
43986: LD_INT 2
43988: PUSH
43989: LD_INT 4
43991: PUSH
43992: LD_INT 5
43994: PUSH
43995: LD_INT 6
43997: PUSH
43998: LD_INT 8
44000: PUSH
44001: LD_INT 11
44003: PUSH
44004: LD_INT 12
44006: PUSH
44007: LD_INT 15
44009: PUSH
44010: LD_INT 16
44012: PUSH
44013: LD_INT 22
44015: PUSH
44016: LD_INT 23
44018: PUSH
44019: LD_INT 25
44021: PUSH
44022: LD_INT 26
44024: PUSH
44025: LD_INT 36
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 101
44046: PUSH
44047: LD_INT 102
44049: PUSH
44050: LD_INT 105
44052: PUSH
44053: LD_INT 106
44055: PUSH
44056: LD_INT 108
44058: PUSH
44059: LD_INT 109
44061: PUSH
44062: LD_INT 112
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: ST_TO_ADDR
44078: GO 46573
44080: LD_INT 6
44082: DOUBLE
44083: EQUAL
44084: IFTRUE 44088
44086: GO 44208
44088: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
44089: LD_ADDR_VAR 0 1
44093: PUSH
44094: LD_INT 2
44096: PUSH
44097: LD_INT 4
44099: PUSH
44100: LD_INT 5
44102: PUSH
44103: LD_INT 6
44105: PUSH
44106: LD_INT 8
44108: PUSH
44109: LD_INT 11
44111: PUSH
44112: LD_INT 12
44114: PUSH
44115: LD_INT 15
44117: PUSH
44118: LD_INT 16
44120: PUSH
44121: LD_INT 20
44123: PUSH
44124: LD_INT 21
44126: PUSH
44127: LD_INT 22
44129: PUSH
44130: LD_INT 23
44132: PUSH
44133: LD_INT 25
44135: PUSH
44136: LD_INT 26
44138: PUSH
44139: LD_INT 30
44141: PUSH
44142: LD_INT 31
44144: PUSH
44145: LD_INT 32
44147: PUSH
44148: LD_INT 36
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 101
44174: PUSH
44175: LD_INT 102
44177: PUSH
44178: LD_INT 105
44180: PUSH
44181: LD_INT 106
44183: PUSH
44184: LD_INT 108
44186: PUSH
44187: LD_INT 109
44189: PUSH
44190: LD_INT 112
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: ST_TO_ADDR
44206: GO 46573
44208: LD_INT 7
44210: DOUBLE
44211: EQUAL
44212: IFTRUE 44216
44214: GO 44316
44216: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
44217: LD_ADDR_VAR 0 1
44221: PUSH
44222: LD_INT 2
44224: PUSH
44225: LD_INT 4
44227: PUSH
44228: LD_INT 5
44230: PUSH
44231: LD_INT 7
44233: PUSH
44234: LD_INT 11
44236: PUSH
44237: LD_INT 12
44239: PUSH
44240: LD_INT 15
44242: PUSH
44243: LD_INT 16
44245: PUSH
44246: LD_INT 20
44248: PUSH
44249: LD_INT 21
44251: PUSH
44252: LD_INT 22
44254: PUSH
44255: LD_INT 23
44257: PUSH
44258: LD_INT 25
44260: PUSH
44261: LD_INT 26
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 101
44282: PUSH
44283: LD_INT 102
44285: PUSH
44286: LD_INT 103
44288: PUSH
44289: LD_INT 105
44291: PUSH
44292: LD_INT 106
44294: PUSH
44295: LD_INT 108
44297: PUSH
44298: LD_INT 112
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: ST_TO_ADDR
44314: GO 46573
44316: LD_INT 8
44318: DOUBLE
44319: EQUAL
44320: IFTRUE 44324
44322: GO 44452
44324: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
44325: LD_ADDR_VAR 0 1
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: LD_INT 4
44335: PUSH
44336: LD_INT 5
44338: PUSH
44339: LD_INT 6
44341: PUSH
44342: LD_INT 7
44344: PUSH
44345: LD_INT 8
44347: PUSH
44348: LD_INT 11
44350: PUSH
44351: LD_INT 12
44353: PUSH
44354: LD_INT 15
44356: PUSH
44357: LD_INT 16
44359: PUSH
44360: LD_INT 20
44362: PUSH
44363: LD_INT 21
44365: PUSH
44366: LD_INT 22
44368: PUSH
44369: LD_INT 23
44371: PUSH
44372: LD_INT 25
44374: PUSH
44375: LD_INT 26
44377: PUSH
44378: LD_INT 30
44380: PUSH
44381: LD_INT 31
44383: PUSH
44384: LD_INT 32
44386: PUSH
44387: LD_INT 36
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 101
44414: PUSH
44415: LD_INT 102
44417: PUSH
44418: LD_INT 103
44420: PUSH
44421: LD_INT 105
44423: PUSH
44424: LD_INT 106
44426: PUSH
44427: LD_INT 108
44429: PUSH
44430: LD_INT 109
44432: PUSH
44433: LD_INT 112
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: ST_TO_ADDR
44450: GO 46573
44452: LD_INT 9
44454: DOUBLE
44455: EQUAL
44456: IFTRUE 44460
44458: GO 44596
44460: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
44461: LD_ADDR_VAR 0 1
44465: PUSH
44466: LD_INT 2
44468: PUSH
44469: LD_INT 4
44471: PUSH
44472: LD_INT 5
44474: PUSH
44475: LD_INT 6
44477: PUSH
44478: LD_INT 7
44480: PUSH
44481: LD_INT 8
44483: PUSH
44484: LD_INT 11
44486: PUSH
44487: LD_INT 12
44489: PUSH
44490: LD_INT 15
44492: PUSH
44493: LD_INT 16
44495: PUSH
44496: LD_INT 20
44498: PUSH
44499: LD_INT 21
44501: PUSH
44502: LD_INT 22
44504: PUSH
44505: LD_INT 23
44507: PUSH
44508: LD_INT 25
44510: PUSH
44511: LD_INT 26
44513: PUSH
44514: LD_INT 28
44516: PUSH
44517: LD_INT 30
44519: PUSH
44520: LD_INT 31
44522: PUSH
44523: LD_INT 32
44525: PUSH
44526: LD_INT 36
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 101
44554: PUSH
44555: LD_INT 102
44557: PUSH
44558: LD_INT 103
44560: PUSH
44561: LD_INT 105
44563: PUSH
44564: LD_INT 106
44566: PUSH
44567: LD_INT 108
44569: PUSH
44570: LD_INT 109
44572: PUSH
44573: LD_INT 112
44575: PUSH
44576: LD_INT 114
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: ST_TO_ADDR
44594: GO 46573
44596: LD_INT 10
44598: DOUBLE
44599: EQUAL
44600: IFTRUE 44604
44602: GO 44788
44604: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
44605: LD_ADDR_VAR 0 1
44609: PUSH
44610: LD_INT 2
44612: PUSH
44613: LD_INT 4
44615: PUSH
44616: LD_INT 5
44618: PUSH
44619: LD_INT 6
44621: PUSH
44622: LD_INT 7
44624: PUSH
44625: LD_INT 8
44627: PUSH
44628: LD_INT 9
44630: PUSH
44631: LD_INT 10
44633: PUSH
44634: LD_INT 11
44636: PUSH
44637: LD_INT 12
44639: PUSH
44640: LD_INT 13
44642: PUSH
44643: LD_INT 14
44645: PUSH
44646: LD_INT 15
44648: PUSH
44649: LD_INT 16
44651: PUSH
44652: LD_INT 17
44654: PUSH
44655: LD_INT 18
44657: PUSH
44658: LD_INT 19
44660: PUSH
44661: LD_INT 20
44663: PUSH
44664: LD_INT 21
44666: PUSH
44667: LD_INT 22
44669: PUSH
44670: LD_INT 23
44672: PUSH
44673: LD_INT 24
44675: PUSH
44676: LD_INT 25
44678: PUSH
44679: LD_INT 26
44681: PUSH
44682: LD_INT 28
44684: PUSH
44685: LD_INT 30
44687: PUSH
44688: LD_INT 31
44690: PUSH
44691: LD_INT 32
44693: PUSH
44694: LD_INT 36
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 101
44730: PUSH
44731: LD_INT 102
44733: PUSH
44734: LD_INT 103
44736: PUSH
44737: LD_INT 104
44739: PUSH
44740: LD_INT 105
44742: PUSH
44743: LD_INT 106
44745: PUSH
44746: LD_INT 107
44748: PUSH
44749: LD_INT 108
44751: PUSH
44752: LD_INT 109
44754: PUSH
44755: LD_INT 110
44757: PUSH
44758: LD_INT 111
44760: PUSH
44761: LD_INT 112
44763: PUSH
44764: LD_INT 114
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: ST_TO_ADDR
44786: GO 46573
44788: LD_INT 11
44790: DOUBLE
44791: EQUAL
44792: IFTRUE 44796
44794: GO 44988
44796: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
44797: LD_ADDR_VAR 0 1
44801: PUSH
44802: LD_INT 2
44804: PUSH
44805: LD_INT 3
44807: PUSH
44808: LD_INT 4
44810: PUSH
44811: LD_INT 5
44813: PUSH
44814: LD_INT 6
44816: PUSH
44817: LD_INT 7
44819: PUSH
44820: LD_INT 8
44822: PUSH
44823: LD_INT 9
44825: PUSH
44826: LD_INT 10
44828: PUSH
44829: LD_INT 11
44831: PUSH
44832: LD_INT 12
44834: PUSH
44835: LD_INT 13
44837: PUSH
44838: LD_INT 14
44840: PUSH
44841: LD_INT 15
44843: PUSH
44844: LD_INT 16
44846: PUSH
44847: LD_INT 17
44849: PUSH
44850: LD_INT 18
44852: PUSH
44853: LD_INT 19
44855: PUSH
44856: LD_INT 20
44858: PUSH
44859: LD_INT 21
44861: PUSH
44862: LD_INT 22
44864: PUSH
44865: LD_INT 23
44867: PUSH
44868: LD_INT 24
44870: PUSH
44871: LD_INT 25
44873: PUSH
44874: LD_INT 26
44876: PUSH
44877: LD_INT 28
44879: PUSH
44880: LD_INT 30
44882: PUSH
44883: LD_INT 31
44885: PUSH
44886: LD_INT 32
44888: PUSH
44889: LD_INT 34
44891: PUSH
44892: LD_INT 36
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 101
44930: PUSH
44931: LD_INT 102
44933: PUSH
44934: LD_INT 103
44936: PUSH
44937: LD_INT 104
44939: PUSH
44940: LD_INT 105
44942: PUSH
44943: LD_INT 106
44945: PUSH
44946: LD_INT 107
44948: PUSH
44949: LD_INT 108
44951: PUSH
44952: LD_INT 109
44954: PUSH
44955: LD_INT 110
44957: PUSH
44958: LD_INT 111
44960: PUSH
44961: LD_INT 112
44963: PUSH
44964: LD_INT 114
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: ST_TO_ADDR
44986: GO 46573
44988: LD_INT 12
44990: DOUBLE
44991: EQUAL
44992: IFTRUE 44996
44994: GO 45204
44996: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
44997: LD_ADDR_VAR 0 1
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: LD_INT 2
45007: PUSH
45008: LD_INT 3
45010: PUSH
45011: LD_INT 4
45013: PUSH
45014: LD_INT 5
45016: PUSH
45017: LD_INT 6
45019: PUSH
45020: LD_INT 7
45022: PUSH
45023: LD_INT 8
45025: PUSH
45026: LD_INT 9
45028: PUSH
45029: LD_INT 10
45031: PUSH
45032: LD_INT 11
45034: PUSH
45035: LD_INT 12
45037: PUSH
45038: LD_INT 13
45040: PUSH
45041: LD_INT 14
45043: PUSH
45044: LD_INT 15
45046: PUSH
45047: LD_INT 16
45049: PUSH
45050: LD_INT 17
45052: PUSH
45053: LD_INT 18
45055: PUSH
45056: LD_INT 19
45058: PUSH
45059: LD_INT 20
45061: PUSH
45062: LD_INT 21
45064: PUSH
45065: LD_INT 22
45067: PUSH
45068: LD_INT 23
45070: PUSH
45071: LD_INT 24
45073: PUSH
45074: LD_INT 25
45076: PUSH
45077: LD_INT 26
45079: PUSH
45080: LD_INT 27
45082: PUSH
45083: LD_INT 28
45085: PUSH
45086: LD_INT 30
45088: PUSH
45089: LD_INT 31
45091: PUSH
45092: LD_INT 32
45094: PUSH
45095: LD_INT 33
45097: PUSH
45098: LD_INT 34
45100: PUSH
45101: LD_INT 36
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 101
45142: PUSH
45143: LD_INT 102
45145: PUSH
45146: LD_INT 103
45148: PUSH
45149: LD_INT 104
45151: PUSH
45152: LD_INT 105
45154: PUSH
45155: LD_INT 106
45157: PUSH
45158: LD_INT 107
45160: PUSH
45161: LD_INT 108
45163: PUSH
45164: LD_INT 109
45166: PUSH
45167: LD_INT 110
45169: PUSH
45170: LD_INT 111
45172: PUSH
45173: LD_INT 112
45175: PUSH
45176: LD_INT 113
45178: PUSH
45179: LD_INT 114
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: ST_TO_ADDR
45202: GO 46573
45204: LD_INT 13
45206: DOUBLE
45207: EQUAL
45208: IFTRUE 45212
45210: GO 45408
45212: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
45213: LD_ADDR_VAR 0 1
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: LD_INT 3
45226: PUSH
45227: LD_INT 4
45229: PUSH
45230: LD_INT 5
45232: PUSH
45233: LD_INT 8
45235: PUSH
45236: LD_INT 9
45238: PUSH
45239: LD_INT 10
45241: PUSH
45242: LD_INT 11
45244: PUSH
45245: LD_INT 12
45247: PUSH
45248: LD_INT 14
45250: PUSH
45251: LD_INT 15
45253: PUSH
45254: LD_INT 16
45256: PUSH
45257: LD_INT 17
45259: PUSH
45260: LD_INT 18
45262: PUSH
45263: LD_INT 19
45265: PUSH
45266: LD_INT 20
45268: PUSH
45269: LD_INT 21
45271: PUSH
45272: LD_INT 22
45274: PUSH
45275: LD_INT 23
45277: PUSH
45278: LD_INT 24
45280: PUSH
45281: LD_INT 25
45283: PUSH
45284: LD_INT 26
45286: PUSH
45287: LD_INT 27
45289: PUSH
45290: LD_INT 28
45292: PUSH
45293: LD_INT 30
45295: PUSH
45296: LD_INT 31
45298: PUSH
45299: LD_INT 32
45301: PUSH
45302: LD_INT 33
45304: PUSH
45305: LD_INT 34
45307: PUSH
45308: LD_INT 36
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 101
45346: PUSH
45347: LD_INT 102
45349: PUSH
45350: LD_INT 103
45352: PUSH
45353: LD_INT 104
45355: PUSH
45356: LD_INT 105
45358: PUSH
45359: LD_INT 106
45361: PUSH
45362: LD_INT 107
45364: PUSH
45365: LD_INT 108
45367: PUSH
45368: LD_INT 109
45370: PUSH
45371: LD_INT 110
45373: PUSH
45374: LD_INT 111
45376: PUSH
45377: LD_INT 112
45379: PUSH
45380: LD_INT 113
45382: PUSH
45383: LD_INT 114
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: ST_TO_ADDR
45406: GO 46573
45408: LD_INT 14
45410: DOUBLE
45411: EQUAL
45412: IFTRUE 45416
45414: GO 45628
45416: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
45417: LD_ADDR_VAR 0 1
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: LD_INT 2
45427: PUSH
45428: LD_INT 3
45430: PUSH
45431: LD_INT 4
45433: PUSH
45434: LD_INT 5
45436: PUSH
45437: LD_INT 6
45439: PUSH
45440: LD_INT 7
45442: PUSH
45443: LD_INT 8
45445: PUSH
45446: LD_INT 9
45448: PUSH
45449: LD_INT 10
45451: PUSH
45452: LD_INT 11
45454: PUSH
45455: LD_INT 12
45457: PUSH
45458: LD_INT 13
45460: PUSH
45461: LD_INT 14
45463: PUSH
45464: LD_INT 15
45466: PUSH
45467: LD_INT 16
45469: PUSH
45470: LD_INT 17
45472: PUSH
45473: LD_INT 18
45475: PUSH
45476: LD_INT 19
45478: PUSH
45479: LD_INT 20
45481: PUSH
45482: LD_INT 21
45484: PUSH
45485: LD_INT 22
45487: PUSH
45488: LD_INT 23
45490: PUSH
45491: LD_INT 24
45493: PUSH
45494: LD_INT 25
45496: PUSH
45497: LD_INT 26
45499: PUSH
45500: LD_INT 27
45502: PUSH
45503: LD_INT 28
45505: PUSH
45506: LD_INT 29
45508: PUSH
45509: LD_INT 30
45511: PUSH
45512: LD_INT 31
45514: PUSH
45515: LD_INT 32
45517: PUSH
45518: LD_INT 33
45520: PUSH
45521: LD_INT 34
45523: PUSH
45524: LD_INT 36
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 101
45566: PUSH
45567: LD_INT 102
45569: PUSH
45570: LD_INT 103
45572: PUSH
45573: LD_INT 104
45575: PUSH
45576: LD_INT 105
45578: PUSH
45579: LD_INT 106
45581: PUSH
45582: LD_INT 107
45584: PUSH
45585: LD_INT 108
45587: PUSH
45588: LD_INT 109
45590: PUSH
45591: LD_INT 110
45593: PUSH
45594: LD_INT 111
45596: PUSH
45597: LD_INT 112
45599: PUSH
45600: LD_INT 113
45602: PUSH
45603: LD_INT 114
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: ST_TO_ADDR
45626: GO 46573
45628: LD_INT 15
45630: DOUBLE
45631: EQUAL
45632: IFTRUE 45636
45634: GO 45848
45636: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
45637: LD_ADDR_VAR 0 1
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: LD_INT 3
45650: PUSH
45651: LD_INT 4
45653: PUSH
45654: LD_INT 5
45656: PUSH
45657: LD_INT 6
45659: PUSH
45660: LD_INT 7
45662: PUSH
45663: LD_INT 8
45665: PUSH
45666: LD_INT 9
45668: PUSH
45669: LD_INT 10
45671: PUSH
45672: LD_INT 11
45674: PUSH
45675: LD_INT 12
45677: PUSH
45678: LD_INT 13
45680: PUSH
45681: LD_INT 14
45683: PUSH
45684: LD_INT 15
45686: PUSH
45687: LD_INT 16
45689: PUSH
45690: LD_INT 17
45692: PUSH
45693: LD_INT 18
45695: PUSH
45696: LD_INT 19
45698: PUSH
45699: LD_INT 20
45701: PUSH
45702: LD_INT 21
45704: PUSH
45705: LD_INT 22
45707: PUSH
45708: LD_INT 23
45710: PUSH
45711: LD_INT 24
45713: PUSH
45714: LD_INT 25
45716: PUSH
45717: LD_INT 26
45719: PUSH
45720: LD_INT 27
45722: PUSH
45723: LD_INT 28
45725: PUSH
45726: LD_INT 29
45728: PUSH
45729: LD_INT 30
45731: PUSH
45732: LD_INT 31
45734: PUSH
45735: LD_INT 32
45737: PUSH
45738: LD_INT 33
45740: PUSH
45741: LD_INT 34
45743: PUSH
45744: LD_INT 36
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 101
45786: PUSH
45787: LD_INT 102
45789: PUSH
45790: LD_INT 103
45792: PUSH
45793: LD_INT 104
45795: PUSH
45796: LD_INT 105
45798: PUSH
45799: LD_INT 106
45801: PUSH
45802: LD_INT 107
45804: PUSH
45805: LD_INT 108
45807: PUSH
45808: LD_INT 109
45810: PUSH
45811: LD_INT 110
45813: PUSH
45814: LD_INT 111
45816: PUSH
45817: LD_INT 112
45819: PUSH
45820: LD_INT 113
45822: PUSH
45823: LD_INT 114
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: ST_TO_ADDR
45846: GO 46573
45848: LD_INT 16
45850: DOUBLE
45851: EQUAL
45852: IFTRUE 45856
45854: GO 45980
45856: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
45857: LD_ADDR_VAR 0 1
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: LD_INT 4
45867: PUSH
45868: LD_INT 5
45870: PUSH
45871: LD_INT 7
45873: PUSH
45874: LD_INT 11
45876: PUSH
45877: LD_INT 12
45879: PUSH
45880: LD_INT 15
45882: PUSH
45883: LD_INT 16
45885: PUSH
45886: LD_INT 20
45888: PUSH
45889: LD_INT 21
45891: PUSH
45892: LD_INT 22
45894: PUSH
45895: LD_INT 23
45897: PUSH
45898: LD_INT 25
45900: PUSH
45901: LD_INT 26
45903: PUSH
45904: LD_INT 30
45906: PUSH
45907: LD_INT 31
45909: PUSH
45910: LD_INT 32
45912: PUSH
45913: LD_INT 33
45915: PUSH
45916: LD_INT 34
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 101
45942: PUSH
45943: LD_INT 102
45945: PUSH
45946: LD_INT 103
45948: PUSH
45949: LD_INT 106
45951: PUSH
45952: LD_INT 108
45954: PUSH
45955: LD_INT 112
45957: PUSH
45958: LD_INT 113
45960: PUSH
45961: LD_INT 114
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: ST_TO_ADDR
45978: GO 46573
45980: LD_INT 17
45982: DOUBLE
45983: EQUAL
45984: IFTRUE 45988
45986: GO 46200
45988: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
45989: LD_ADDR_VAR 0 1
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: LD_INT 2
45999: PUSH
46000: LD_INT 3
46002: PUSH
46003: LD_INT 4
46005: PUSH
46006: LD_INT 5
46008: PUSH
46009: LD_INT 6
46011: PUSH
46012: LD_INT 7
46014: PUSH
46015: LD_INT 8
46017: PUSH
46018: LD_INT 9
46020: PUSH
46021: LD_INT 10
46023: PUSH
46024: LD_INT 11
46026: PUSH
46027: LD_INT 12
46029: PUSH
46030: LD_INT 13
46032: PUSH
46033: LD_INT 14
46035: PUSH
46036: LD_INT 15
46038: PUSH
46039: LD_INT 16
46041: PUSH
46042: LD_INT 17
46044: PUSH
46045: LD_INT 18
46047: PUSH
46048: LD_INT 19
46050: PUSH
46051: LD_INT 20
46053: PUSH
46054: LD_INT 21
46056: PUSH
46057: LD_INT 22
46059: PUSH
46060: LD_INT 23
46062: PUSH
46063: LD_INT 24
46065: PUSH
46066: LD_INT 25
46068: PUSH
46069: LD_INT 26
46071: PUSH
46072: LD_INT 27
46074: PUSH
46075: LD_INT 28
46077: PUSH
46078: LD_INT 29
46080: PUSH
46081: LD_INT 30
46083: PUSH
46084: LD_INT 31
46086: PUSH
46087: LD_INT 32
46089: PUSH
46090: LD_INT 33
46092: PUSH
46093: LD_INT 34
46095: PUSH
46096: LD_INT 36
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 101
46138: PUSH
46139: LD_INT 102
46141: PUSH
46142: LD_INT 103
46144: PUSH
46145: LD_INT 104
46147: PUSH
46148: LD_INT 105
46150: PUSH
46151: LD_INT 106
46153: PUSH
46154: LD_INT 107
46156: PUSH
46157: LD_INT 108
46159: PUSH
46160: LD_INT 109
46162: PUSH
46163: LD_INT 110
46165: PUSH
46166: LD_INT 111
46168: PUSH
46169: LD_INT 112
46171: PUSH
46172: LD_INT 113
46174: PUSH
46175: LD_INT 114
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: ST_TO_ADDR
46198: GO 46573
46200: LD_INT 18
46202: DOUBLE
46203: EQUAL
46204: IFTRUE 46208
46206: GO 46344
46208: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
46209: LD_ADDR_VAR 0 1
46213: PUSH
46214: LD_INT 2
46216: PUSH
46217: LD_INT 4
46219: PUSH
46220: LD_INT 5
46222: PUSH
46223: LD_INT 7
46225: PUSH
46226: LD_INT 11
46228: PUSH
46229: LD_INT 12
46231: PUSH
46232: LD_INT 15
46234: PUSH
46235: LD_INT 16
46237: PUSH
46238: LD_INT 20
46240: PUSH
46241: LD_INT 21
46243: PUSH
46244: LD_INT 22
46246: PUSH
46247: LD_INT 23
46249: PUSH
46250: LD_INT 25
46252: PUSH
46253: LD_INT 26
46255: PUSH
46256: LD_INT 30
46258: PUSH
46259: LD_INT 31
46261: PUSH
46262: LD_INT 32
46264: PUSH
46265: LD_INT 33
46267: PUSH
46268: LD_INT 34
46270: PUSH
46271: LD_INT 35
46273: PUSH
46274: LD_INT 36
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 101
46302: PUSH
46303: LD_INT 102
46305: PUSH
46306: LD_INT 103
46308: PUSH
46309: LD_INT 106
46311: PUSH
46312: LD_INT 108
46314: PUSH
46315: LD_INT 112
46317: PUSH
46318: LD_INT 113
46320: PUSH
46321: LD_INT 114
46323: PUSH
46324: LD_INT 115
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: ST_TO_ADDR
46342: GO 46573
46344: LD_INT 19
46346: DOUBLE
46347: EQUAL
46348: IFTRUE 46352
46350: GO 46572
46352: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
46353: LD_ADDR_VAR 0 1
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: LD_INT 2
46363: PUSH
46364: LD_INT 3
46366: PUSH
46367: LD_INT 4
46369: PUSH
46370: LD_INT 5
46372: PUSH
46373: LD_INT 6
46375: PUSH
46376: LD_INT 7
46378: PUSH
46379: LD_INT 8
46381: PUSH
46382: LD_INT 9
46384: PUSH
46385: LD_INT 10
46387: PUSH
46388: LD_INT 11
46390: PUSH
46391: LD_INT 12
46393: PUSH
46394: LD_INT 13
46396: PUSH
46397: LD_INT 14
46399: PUSH
46400: LD_INT 15
46402: PUSH
46403: LD_INT 16
46405: PUSH
46406: LD_INT 17
46408: PUSH
46409: LD_INT 18
46411: PUSH
46412: LD_INT 19
46414: PUSH
46415: LD_INT 20
46417: PUSH
46418: LD_INT 21
46420: PUSH
46421: LD_INT 22
46423: PUSH
46424: LD_INT 23
46426: PUSH
46427: LD_INT 24
46429: PUSH
46430: LD_INT 25
46432: PUSH
46433: LD_INT 26
46435: PUSH
46436: LD_INT 27
46438: PUSH
46439: LD_INT 28
46441: PUSH
46442: LD_INT 29
46444: PUSH
46445: LD_INT 30
46447: PUSH
46448: LD_INT 31
46450: PUSH
46451: LD_INT 32
46453: PUSH
46454: LD_INT 33
46456: PUSH
46457: LD_INT 34
46459: PUSH
46460: LD_INT 35
46462: PUSH
46463: LD_INT 36
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 101
46506: PUSH
46507: LD_INT 102
46509: PUSH
46510: LD_INT 103
46512: PUSH
46513: LD_INT 104
46515: PUSH
46516: LD_INT 105
46518: PUSH
46519: LD_INT 106
46521: PUSH
46522: LD_INT 107
46524: PUSH
46525: LD_INT 108
46527: PUSH
46528: LD_INT 109
46530: PUSH
46531: LD_INT 110
46533: PUSH
46534: LD_INT 111
46536: PUSH
46537: LD_INT 112
46539: PUSH
46540: LD_INT 113
46542: PUSH
46543: LD_INT 114
46545: PUSH
46546: LD_INT 115
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: ST_TO_ADDR
46570: GO 46573
46572: POP
// end else
46573: GO 46792
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
46575: LD_ADDR_VAR 0 1
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: LD_INT 2
46585: PUSH
46586: LD_INT 3
46588: PUSH
46589: LD_INT 4
46591: PUSH
46592: LD_INT 5
46594: PUSH
46595: LD_INT 6
46597: PUSH
46598: LD_INT 7
46600: PUSH
46601: LD_INT 8
46603: PUSH
46604: LD_INT 9
46606: PUSH
46607: LD_INT 10
46609: PUSH
46610: LD_INT 11
46612: PUSH
46613: LD_INT 12
46615: PUSH
46616: LD_INT 13
46618: PUSH
46619: LD_INT 14
46621: PUSH
46622: LD_INT 15
46624: PUSH
46625: LD_INT 16
46627: PUSH
46628: LD_INT 17
46630: PUSH
46631: LD_INT 18
46633: PUSH
46634: LD_INT 19
46636: PUSH
46637: LD_INT 20
46639: PUSH
46640: LD_INT 21
46642: PUSH
46643: LD_INT 22
46645: PUSH
46646: LD_INT 23
46648: PUSH
46649: LD_INT 24
46651: PUSH
46652: LD_INT 25
46654: PUSH
46655: LD_INT 26
46657: PUSH
46658: LD_INT 27
46660: PUSH
46661: LD_INT 28
46663: PUSH
46664: LD_INT 29
46666: PUSH
46667: LD_INT 30
46669: PUSH
46670: LD_INT 31
46672: PUSH
46673: LD_INT 32
46675: PUSH
46676: LD_INT 33
46678: PUSH
46679: LD_INT 34
46681: PUSH
46682: LD_INT 35
46684: PUSH
46685: LD_INT 36
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 101
46728: PUSH
46729: LD_INT 102
46731: PUSH
46732: LD_INT 103
46734: PUSH
46735: LD_INT 104
46737: PUSH
46738: LD_INT 105
46740: PUSH
46741: LD_INT 106
46743: PUSH
46744: LD_INT 107
46746: PUSH
46747: LD_INT 108
46749: PUSH
46750: LD_INT 109
46752: PUSH
46753: LD_INT 110
46755: PUSH
46756: LD_INT 111
46758: PUSH
46759: LD_INT 112
46761: PUSH
46762: LD_INT 113
46764: PUSH
46765: LD_INT 114
46767: PUSH
46768: LD_INT 115
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: ST_TO_ADDR
// if result then
46792: LD_VAR 0 1
46796: IFFALSE 47085
// begin normal :=  ;
46798: LD_ADDR_VAR 0 3
46802: PUSH
46803: LD_STRING 
46805: ST_TO_ADDR
// hardcore :=  ;
46806: LD_ADDR_VAR 0 4
46810: PUSH
46811: LD_STRING 
46813: ST_TO_ADDR
// for i = 1 to normalCounter do
46814: LD_ADDR_VAR 0 5
46818: PUSH
46819: DOUBLE
46820: LD_INT 1
46822: DEC
46823: ST_TO_ADDR
46824: LD_EXP 38
46828: PUSH
46829: FOR_TO
46830: IFFALSE 46931
// begin tmp := 0 ;
46832: LD_ADDR_VAR 0 2
46836: PUSH
46837: LD_STRING 0
46839: ST_TO_ADDR
// if result [ 1 ] then
46840: LD_VAR 0 1
46844: PUSH
46845: LD_INT 1
46847: ARRAY
46848: IFFALSE 46913
// if result [ 1 ] [ 1 ] = i then
46850: LD_VAR 0 1
46854: PUSH
46855: LD_INT 1
46857: ARRAY
46858: PUSH
46859: LD_INT 1
46861: ARRAY
46862: PUSH
46863: LD_VAR 0 5
46867: EQUAL
46868: IFFALSE 46913
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
46870: LD_ADDR_VAR 0 1
46874: PUSH
46875: LD_VAR 0 1
46879: PPUSH
46880: LD_INT 1
46882: PPUSH
46883: LD_VAR 0 1
46887: PUSH
46888: LD_INT 1
46890: ARRAY
46891: PPUSH
46892: LD_INT 1
46894: PPUSH
46895: CALL_OW 3
46899: PPUSH
46900: CALL_OW 1
46904: ST_TO_ADDR
// tmp := 1 ;
46905: LD_ADDR_VAR 0 2
46909: PUSH
46910: LD_STRING 1
46912: ST_TO_ADDR
// end ; normal := normal & tmp ;
46913: LD_ADDR_VAR 0 3
46917: PUSH
46918: LD_VAR 0 3
46922: PUSH
46923: LD_VAR 0 2
46927: STR
46928: ST_TO_ADDR
// end ;
46929: GO 46829
46931: POP
46932: POP
// for i = 1 to hardcoreCounter do
46933: LD_ADDR_VAR 0 5
46937: PUSH
46938: DOUBLE
46939: LD_INT 1
46941: DEC
46942: ST_TO_ADDR
46943: LD_EXP 39
46947: PUSH
46948: FOR_TO
46949: IFFALSE 47054
// begin tmp := 0 ;
46951: LD_ADDR_VAR 0 2
46955: PUSH
46956: LD_STRING 0
46958: ST_TO_ADDR
// if result [ 2 ] then
46959: LD_VAR 0 1
46963: PUSH
46964: LD_INT 2
46966: ARRAY
46967: IFFALSE 47036
// if result [ 2 ] [ 1 ] = 100 + i then
46969: LD_VAR 0 1
46973: PUSH
46974: LD_INT 2
46976: ARRAY
46977: PUSH
46978: LD_INT 1
46980: ARRAY
46981: PUSH
46982: LD_INT 100
46984: PUSH
46985: LD_VAR 0 5
46989: PLUS
46990: EQUAL
46991: IFFALSE 47036
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
46993: LD_ADDR_VAR 0 1
46997: PUSH
46998: LD_VAR 0 1
47002: PPUSH
47003: LD_INT 2
47005: PPUSH
47006: LD_VAR 0 1
47010: PUSH
47011: LD_INT 2
47013: ARRAY
47014: PPUSH
47015: LD_INT 1
47017: PPUSH
47018: CALL_OW 3
47022: PPUSH
47023: CALL_OW 1
47027: ST_TO_ADDR
// tmp := 1 ;
47028: LD_ADDR_VAR 0 2
47032: PUSH
47033: LD_STRING 1
47035: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
47036: LD_ADDR_VAR 0 4
47040: PUSH
47041: LD_VAR 0 4
47045: PUSH
47046: LD_VAR 0 2
47050: STR
47051: ST_TO_ADDR
// end ;
47052: GO 46948
47054: POP
47055: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
47056: LD_STRING getStreamItemsFromMission("
47058: PUSH
47059: LD_VAR 0 3
47063: STR
47064: PUSH
47065: LD_STRING ","
47067: STR
47068: PUSH
47069: LD_VAR 0 4
47073: STR
47074: PUSH
47075: LD_STRING ")
47077: STR
47078: PPUSH
47079: CALL_OW 559
// end else
47083: GO 47092
// ToLua ( getStreamItemsFromMission("","") ) ;
47085: LD_STRING getStreamItemsFromMission("","")
47087: PPUSH
47088: CALL_OW 559
// end ;
47092: LD_VAR 0 1
47096: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
47097: LD_EXP 37
47101: PUSH
47102: LD_EXP 42
47106: AND
47107: IFFALSE 47231
47109: GO 47111
47111: DISABLE
47112: LD_INT 0
47114: PPUSH
47115: PPUSH
// begin enable ;
47116: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
47117: LD_ADDR_VAR 0 2
47121: PUSH
47122: LD_INT 22
47124: PUSH
47125: LD_OWVAR 2
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: LD_INT 34
47139: PUSH
47140: LD_INT 7
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 34
47149: PUSH
47150: LD_INT 45
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 34
47159: PUSH
47160: LD_INT 28
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 34
47169: PUSH
47170: LD_INT 47
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PPUSH
47188: CALL_OW 69
47192: ST_TO_ADDR
// if not tmp then
47193: LD_VAR 0 2
47197: NOT
47198: IFFALSE 47202
// exit ;
47200: GO 47231
// for i in tmp do
47202: LD_ADDR_VAR 0 1
47206: PUSH
47207: LD_VAR 0 2
47211: PUSH
47212: FOR_IN
47213: IFFALSE 47229
// begin SetLives ( i , 0 ) ;
47215: LD_VAR 0 1
47219: PPUSH
47220: LD_INT 0
47222: PPUSH
47223: CALL_OW 234
// end ;
47227: GO 47212
47229: POP
47230: POP
// end ;
47231: PPOPN 2
47233: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
47234: LD_EXP 37
47238: PUSH
47239: LD_EXP 43
47243: AND
47244: IFFALSE 47328
47246: GO 47248
47248: DISABLE
47249: LD_INT 0
47251: PPUSH
47252: PPUSH
// begin enable ;
47253: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
47254: LD_ADDR_VAR 0 2
47258: PUSH
47259: LD_INT 22
47261: PUSH
47262: LD_OWVAR 2
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 32
47273: PUSH
47274: LD_INT 3
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PPUSH
47285: CALL_OW 69
47289: ST_TO_ADDR
// if not tmp then
47290: LD_VAR 0 2
47294: NOT
47295: IFFALSE 47299
// exit ;
47297: GO 47328
// for i in tmp do
47299: LD_ADDR_VAR 0 1
47303: PUSH
47304: LD_VAR 0 2
47308: PUSH
47309: FOR_IN
47310: IFFALSE 47326
// begin SetLives ( i , 0 ) ;
47312: LD_VAR 0 1
47316: PPUSH
47317: LD_INT 0
47319: PPUSH
47320: CALL_OW 234
// end ;
47324: GO 47309
47326: POP
47327: POP
// end ;
47328: PPOPN 2
47330: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
47331: LD_EXP 37
47335: PUSH
47336: LD_EXP 40
47340: AND
47341: IFFALSE 47434
47343: GO 47345
47345: DISABLE
47346: LD_INT 0
47348: PPUSH
// begin enable ;
47349: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
47350: LD_ADDR_VAR 0 1
47354: PUSH
47355: LD_INT 22
47357: PUSH
47358: LD_OWVAR 2
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: LD_INT 25
47372: PUSH
47373: LD_INT 5
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 25
47382: PUSH
47383: LD_INT 9
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 25
47392: PUSH
47393: LD_INT 8
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PPUSH
47410: CALL_OW 69
47414: PUSH
47415: FOR_IN
47416: IFFALSE 47432
// begin SetClass ( i , 1 ) ;
47418: LD_VAR 0 1
47422: PPUSH
47423: LD_INT 1
47425: PPUSH
47426: CALL_OW 336
// end ;
47430: GO 47415
47432: POP
47433: POP
// end ;
47434: PPOPN 1
47436: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
47437: LD_EXP 37
47441: PUSH
47442: LD_EXP 41
47446: AND
47447: PUSH
47448: LD_OWVAR 65
47452: PUSH
47453: LD_INT 7
47455: LESS
47456: AND
47457: IFFALSE 47471
47459: GO 47461
47461: DISABLE
// begin enable ;
47462: ENABLE
// game_speed := 7 ;
47463: LD_ADDR_OWVAR 65
47467: PUSH
47468: LD_INT 7
47470: ST_TO_ADDR
// end ;
47471: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
47472: LD_EXP 37
47476: PUSH
47477: LD_EXP 44
47481: AND
47482: IFFALSE 47684
47484: GO 47486
47486: DISABLE
47487: LD_INT 0
47489: PPUSH
47490: PPUSH
47491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
47492: LD_ADDR_VAR 0 3
47496: PUSH
47497: LD_INT 81
47499: PUSH
47500: LD_OWVAR 2
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 21
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PPUSH
47523: CALL_OW 69
47527: ST_TO_ADDR
// if not tmp then
47528: LD_VAR 0 3
47532: NOT
47533: IFFALSE 47537
// exit ;
47535: GO 47684
// if tmp > 5 then
47537: LD_VAR 0 3
47541: PUSH
47542: LD_INT 5
47544: GREATER
47545: IFFALSE 47557
// k := 5 else
47547: LD_ADDR_VAR 0 2
47551: PUSH
47552: LD_INT 5
47554: ST_TO_ADDR
47555: GO 47567
// k := tmp ;
47557: LD_ADDR_VAR 0 2
47561: PUSH
47562: LD_VAR 0 3
47566: ST_TO_ADDR
// for i := 1 to k do
47567: LD_ADDR_VAR 0 1
47571: PUSH
47572: DOUBLE
47573: LD_INT 1
47575: DEC
47576: ST_TO_ADDR
47577: LD_VAR 0 2
47581: PUSH
47582: FOR_TO
47583: IFFALSE 47682
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
47585: LD_VAR 0 3
47589: PUSH
47590: LD_VAR 0 1
47594: ARRAY
47595: PPUSH
47596: LD_VAR 0 1
47600: PUSH
47601: LD_INT 4
47603: MOD
47604: PUSH
47605: LD_INT 1
47607: PLUS
47608: PPUSH
47609: CALL_OW 259
47613: PUSH
47614: LD_INT 10
47616: LESS
47617: IFFALSE 47680
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
47619: LD_VAR 0 3
47623: PUSH
47624: LD_VAR 0 1
47628: ARRAY
47629: PPUSH
47630: LD_VAR 0 1
47634: PUSH
47635: LD_INT 4
47637: MOD
47638: PUSH
47639: LD_INT 1
47641: PLUS
47642: PPUSH
47643: LD_VAR 0 3
47647: PUSH
47648: LD_VAR 0 1
47652: ARRAY
47653: PPUSH
47654: LD_VAR 0 1
47658: PUSH
47659: LD_INT 4
47661: MOD
47662: PUSH
47663: LD_INT 1
47665: PLUS
47666: PPUSH
47667: CALL_OW 259
47671: PUSH
47672: LD_INT 1
47674: PLUS
47675: PPUSH
47676: CALL_OW 237
47680: GO 47582
47682: POP
47683: POP
// end ;
47684: PPOPN 3
47686: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
47687: LD_EXP 37
47691: PUSH
47692: LD_EXP 45
47696: AND
47697: IFFALSE 47717
47699: GO 47701
47701: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
47702: LD_INT 4
47704: PPUSH
47705: LD_OWVAR 2
47709: PPUSH
47710: LD_INT 0
47712: PPUSH
47713: CALL_OW 324
47717: END
// every 0 0$1 trigger StreamModeActive and sShovel do
47718: LD_EXP 37
47722: PUSH
47723: LD_EXP 74
47727: AND
47728: IFFALSE 47748
47730: GO 47732
47732: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
47733: LD_INT 19
47735: PPUSH
47736: LD_OWVAR 2
47740: PPUSH
47741: LD_INT 0
47743: PPUSH
47744: CALL_OW 324
47748: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
47749: LD_EXP 37
47753: PUSH
47754: LD_EXP 46
47758: AND
47759: IFFALSE 47861
47761: GO 47763
47763: DISABLE
47764: LD_INT 0
47766: PPUSH
47767: PPUSH
// begin enable ;
47768: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
47769: LD_ADDR_VAR 0 2
47773: PUSH
47774: LD_INT 22
47776: PUSH
47777: LD_OWVAR 2
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: LD_INT 34
47791: PUSH
47792: LD_INT 11
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 34
47801: PUSH
47802: LD_INT 30
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: LIST
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PPUSH
47818: CALL_OW 69
47822: ST_TO_ADDR
// if not tmp then
47823: LD_VAR 0 2
47827: NOT
47828: IFFALSE 47832
// exit ;
47830: GO 47861
// for i in tmp do
47832: LD_ADDR_VAR 0 1
47836: PUSH
47837: LD_VAR 0 2
47841: PUSH
47842: FOR_IN
47843: IFFALSE 47859
// begin SetLives ( i , 0 ) ;
47845: LD_VAR 0 1
47849: PPUSH
47850: LD_INT 0
47852: PPUSH
47853: CALL_OW 234
// end ;
47857: GO 47842
47859: POP
47860: POP
// end ;
47861: PPOPN 2
47863: END
// every 0 0$1 trigger StreamModeActive and sBunker do
47864: LD_EXP 37
47868: PUSH
47869: LD_EXP 47
47873: AND
47874: IFFALSE 47894
47876: GO 47878
47878: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
47879: LD_INT 32
47881: PPUSH
47882: LD_OWVAR 2
47886: PPUSH
47887: LD_INT 0
47889: PPUSH
47890: CALL_OW 324
47894: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
47895: LD_EXP 37
47899: PUSH
47900: LD_EXP 48
47904: AND
47905: IFFALSE 48086
47907: GO 47909
47909: DISABLE
47910: LD_INT 0
47912: PPUSH
47913: PPUSH
47914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
47915: LD_ADDR_VAR 0 2
47919: PUSH
47920: LD_INT 22
47922: PUSH
47923: LD_OWVAR 2
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 33
47934: PUSH
47935: LD_INT 3
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PPUSH
47946: CALL_OW 69
47950: ST_TO_ADDR
// if not tmp then
47951: LD_VAR 0 2
47955: NOT
47956: IFFALSE 47960
// exit ;
47958: GO 48086
// side := 0 ;
47960: LD_ADDR_VAR 0 3
47964: PUSH
47965: LD_INT 0
47967: ST_TO_ADDR
// for i := 1 to 8 do
47968: LD_ADDR_VAR 0 1
47972: PUSH
47973: DOUBLE
47974: LD_INT 1
47976: DEC
47977: ST_TO_ADDR
47978: LD_INT 8
47980: PUSH
47981: FOR_TO
47982: IFFALSE 48030
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
47984: LD_OWVAR 2
47988: PUSH
47989: LD_VAR 0 1
47993: NONEQUAL
47994: PUSH
47995: LD_OWVAR 2
47999: PPUSH
48000: LD_VAR 0 1
48004: PPUSH
48005: CALL_OW 81
48009: PUSH
48010: LD_INT 2
48012: EQUAL
48013: AND
48014: IFFALSE 48028
// begin side := i ;
48016: LD_ADDR_VAR 0 3
48020: PUSH
48021: LD_VAR 0 1
48025: ST_TO_ADDR
// break ;
48026: GO 48030
// end ;
48028: GO 47981
48030: POP
48031: POP
// if not side then
48032: LD_VAR 0 3
48036: NOT
48037: IFFALSE 48041
// exit ;
48039: GO 48086
// for i := 1 to tmp do
48041: LD_ADDR_VAR 0 1
48045: PUSH
48046: DOUBLE
48047: LD_INT 1
48049: DEC
48050: ST_TO_ADDR
48051: LD_VAR 0 2
48055: PUSH
48056: FOR_TO
48057: IFFALSE 48084
// if Prob ( 60 ) then
48059: LD_INT 60
48061: PPUSH
48062: CALL_OW 13
48066: IFFALSE 48082
// SetSide ( i , side ) ;
48068: LD_VAR 0 1
48072: PPUSH
48073: LD_VAR 0 3
48077: PPUSH
48078: CALL_OW 235
48082: GO 48056
48084: POP
48085: POP
// end ;
48086: PPOPN 3
48088: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
48089: LD_EXP 37
48093: PUSH
48094: LD_EXP 50
48098: AND
48099: IFFALSE 48218
48101: GO 48103
48103: DISABLE
48104: LD_INT 0
48106: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
48107: LD_ADDR_VAR 0 1
48111: PUSH
48112: LD_INT 22
48114: PUSH
48115: LD_OWVAR 2
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 21
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 3
48136: PUSH
48137: LD_INT 23
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: LIST
48155: PPUSH
48156: CALL_OW 69
48160: PUSH
48161: FOR_IN
48162: IFFALSE 48216
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
48164: LD_VAR 0 1
48168: PPUSH
48169: CALL_OW 257
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: LD_INT 3
48182: PUSH
48183: LD_INT 4
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: IN
48192: IFFALSE 48214
// SetClass ( un , rand ( 1 , 4 ) ) ;
48194: LD_VAR 0 1
48198: PPUSH
48199: LD_INT 1
48201: PPUSH
48202: LD_INT 4
48204: PPUSH
48205: CALL_OW 12
48209: PPUSH
48210: CALL_OW 336
48214: GO 48161
48216: POP
48217: POP
// end ;
48218: PPOPN 1
48220: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
48221: LD_EXP 37
48225: PUSH
48226: LD_EXP 49
48230: AND
48231: IFFALSE 48310
48233: GO 48235
48235: DISABLE
48236: LD_INT 0
48238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
48239: LD_ADDR_VAR 0 1
48243: PUSH
48244: LD_INT 22
48246: PUSH
48247: LD_OWVAR 2
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 21
48258: PUSH
48259: LD_INT 3
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PPUSH
48270: CALL_OW 69
48274: ST_TO_ADDR
// if not tmp then
48275: LD_VAR 0 1
48279: NOT
48280: IFFALSE 48284
// exit ;
48282: GO 48310
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
48284: LD_VAR 0 1
48288: PUSH
48289: LD_INT 1
48291: PPUSH
48292: LD_VAR 0 1
48296: PPUSH
48297: CALL_OW 12
48301: ARRAY
48302: PPUSH
48303: LD_INT 100
48305: PPUSH
48306: CALL_OW 234
// end ;
48310: PPOPN 1
48312: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
48313: LD_EXP 37
48317: PUSH
48318: LD_EXP 51
48322: AND
48323: IFFALSE 48421
48325: GO 48327
48327: DISABLE
48328: LD_INT 0
48330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
48331: LD_ADDR_VAR 0 1
48335: PUSH
48336: LD_INT 22
48338: PUSH
48339: LD_OWVAR 2
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 21
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PPUSH
48362: CALL_OW 69
48366: ST_TO_ADDR
// if not tmp then
48367: LD_VAR 0 1
48371: NOT
48372: IFFALSE 48376
// exit ;
48374: GO 48421
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
48376: LD_VAR 0 1
48380: PUSH
48381: LD_INT 1
48383: PPUSH
48384: LD_VAR 0 1
48388: PPUSH
48389: CALL_OW 12
48393: ARRAY
48394: PPUSH
48395: LD_INT 1
48397: PPUSH
48398: LD_INT 4
48400: PPUSH
48401: CALL_OW 12
48405: PPUSH
48406: LD_INT 3000
48408: PPUSH
48409: LD_INT 9000
48411: PPUSH
48412: CALL_OW 12
48416: PPUSH
48417: CALL_OW 492
// end ;
48421: PPOPN 1
48423: END
// every 0 0$1 trigger StreamModeActive and sDepot do
48424: LD_EXP 37
48428: PUSH
48429: LD_EXP 52
48433: AND
48434: IFFALSE 48454
48436: GO 48438
48438: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
48439: LD_INT 1
48441: PPUSH
48442: LD_OWVAR 2
48446: PPUSH
48447: LD_INT 0
48449: PPUSH
48450: CALL_OW 324
48454: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
48455: LD_EXP 37
48459: PUSH
48460: LD_EXP 53
48464: AND
48465: IFFALSE 48548
48467: GO 48469
48469: DISABLE
48470: LD_INT 0
48472: PPUSH
48473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
48474: LD_ADDR_VAR 0 2
48478: PUSH
48479: LD_INT 22
48481: PUSH
48482: LD_OWVAR 2
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 21
48493: PUSH
48494: LD_INT 3
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PPUSH
48505: CALL_OW 69
48509: ST_TO_ADDR
// if not tmp then
48510: LD_VAR 0 2
48514: NOT
48515: IFFALSE 48519
// exit ;
48517: GO 48548
// for i in tmp do
48519: LD_ADDR_VAR 0 1
48523: PUSH
48524: LD_VAR 0 2
48528: PUSH
48529: FOR_IN
48530: IFFALSE 48546
// SetBLevel ( i , 10 ) ;
48532: LD_VAR 0 1
48536: PPUSH
48537: LD_INT 10
48539: PPUSH
48540: CALL_OW 241
48544: GO 48529
48546: POP
48547: POP
// end ;
48548: PPOPN 2
48550: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
48551: LD_EXP 37
48555: PUSH
48556: LD_EXP 54
48560: AND
48561: IFFALSE 48672
48563: GO 48565
48565: DISABLE
48566: LD_INT 0
48568: PPUSH
48569: PPUSH
48570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
48571: LD_ADDR_VAR 0 3
48575: PUSH
48576: LD_INT 22
48578: PUSH
48579: LD_OWVAR 2
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 25
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PPUSH
48602: CALL_OW 69
48606: ST_TO_ADDR
// if not tmp then
48607: LD_VAR 0 3
48611: NOT
48612: IFFALSE 48616
// exit ;
48614: GO 48672
// un := tmp [ rand ( 1 , tmp ) ] ;
48616: LD_ADDR_VAR 0 2
48620: PUSH
48621: LD_VAR 0 3
48625: PUSH
48626: LD_INT 1
48628: PPUSH
48629: LD_VAR 0 3
48633: PPUSH
48634: CALL_OW 12
48638: ARRAY
48639: ST_TO_ADDR
// if Crawls ( un ) then
48640: LD_VAR 0 2
48644: PPUSH
48645: CALL_OW 318
48649: IFFALSE 48660
// ComWalk ( un ) ;
48651: LD_VAR 0 2
48655: PPUSH
48656: CALL_OW 138
// SetClass ( un , class_sniper ) ;
48660: LD_VAR 0 2
48664: PPUSH
48665: LD_INT 5
48667: PPUSH
48668: CALL_OW 336
// end ;
48672: PPOPN 3
48674: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
48675: LD_EXP 37
48679: PUSH
48680: LD_EXP 55
48684: AND
48685: PUSH
48686: LD_OWVAR 67
48690: PUSH
48691: LD_INT 3
48693: LESS
48694: AND
48695: IFFALSE 48714
48697: GO 48699
48699: DISABLE
// Difficulty := Difficulty + 1 ;
48700: LD_ADDR_OWVAR 67
48704: PUSH
48705: LD_OWVAR 67
48709: PUSH
48710: LD_INT 1
48712: PLUS
48713: ST_TO_ADDR
48714: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
48715: LD_EXP 37
48719: PUSH
48720: LD_EXP 56
48724: AND
48725: IFFALSE 48828
48727: GO 48729
48729: DISABLE
48730: LD_INT 0
48732: PPUSH
// begin for i := 1 to 5 do
48733: LD_ADDR_VAR 0 1
48737: PUSH
48738: DOUBLE
48739: LD_INT 1
48741: DEC
48742: ST_TO_ADDR
48743: LD_INT 5
48745: PUSH
48746: FOR_TO
48747: IFFALSE 48826
// begin uc_nation := nation_nature ;
48749: LD_ADDR_OWVAR 21
48753: PUSH
48754: LD_INT 0
48756: ST_TO_ADDR
// uc_side := 0 ;
48757: LD_ADDR_OWVAR 20
48761: PUSH
48762: LD_INT 0
48764: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
48765: LD_ADDR_OWVAR 29
48769: PUSH
48770: LD_INT 12
48772: PUSH
48773: LD_INT 12
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: ST_TO_ADDR
// hc_agressivity := 20 ;
48780: LD_ADDR_OWVAR 35
48784: PUSH
48785: LD_INT 20
48787: ST_TO_ADDR
// hc_class := class_tiger ;
48788: LD_ADDR_OWVAR 28
48792: PUSH
48793: LD_INT 14
48795: ST_TO_ADDR
// hc_gallery :=  ;
48796: LD_ADDR_OWVAR 33
48800: PUSH
48801: LD_STRING 
48803: ST_TO_ADDR
// hc_name :=  ;
48804: LD_ADDR_OWVAR 26
48808: PUSH
48809: LD_STRING 
48811: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
48812: CALL_OW 44
48816: PPUSH
48817: LD_INT 0
48819: PPUSH
48820: CALL_OW 51
// end ;
48824: GO 48746
48826: POP
48827: POP
// end ;
48828: PPOPN 1
48830: END
// every 0 0$1 trigger StreamModeActive and sBomb do
48831: LD_EXP 37
48835: PUSH
48836: LD_EXP 57
48840: AND
48841: IFFALSE 48850
48843: GO 48845
48845: DISABLE
// StreamSibBomb ;
48846: CALL 48851 0 0
48850: END
// export function StreamSibBomb ; var i , x , y ; begin
48851: LD_INT 0
48853: PPUSH
48854: PPUSH
48855: PPUSH
48856: PPUSH
// result := false ;
48857: LD_ADDR_VAR 0 1
48861: PUSH
48862: LD_INT 0
48864: ST_TO_ADDR
// for i := 1 to 16 do
48865: LD_ADDR_VAR 0 2
48869: PUSH
48870: DOUBLE
48871: LD_INT 1
48873: DEC
48874: ST_TO_ADDR
48875: LD_INT 16
48877: PUSH
48878: FOR_TO
48879: IFFALSE 49078
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
48881: LD_ADDR_VAR 0 3
48885: PUSH
48886: LD_INT 10
48888: PUSH
48889: LD_INT 20
48891: PUSH
48892: LD_INT 30
48894: PUSH
48895: LD_INT 40
48897: PUSH
48898: LD_INT 50
48900: PUSH
48901: LD_INT 60
48903: PUSH
48904: LD_INT 70
48906: PUSH
48907: LD_INT 80
48909: PUSH
48910: LD_INT 90
48912: PUSH
48913: LD_INT 100
48915: PUSH
48916: LD_INT 110
48918: PUSH
48919: LD_INT 120
48921: PUSH
48922: LD_INT 130
48924: PUSH
48925: LD_INT 140
48927: PUSH
48928: LD_INT 150
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: PPUSH
48951: LD_INT 15
48953: PPUSH
48954: CALL_OW 12
48958: ARRAY
48959: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
48960: LD_ADDR_VAR 0 4
48964: PUSH
48965: LD_INT 10
48967: PUSH
48968: LD_INT 20
48970: PUSH
48971: LD_INT 30
48973: PUSH
48974: LD_INT 40
48976: PUSH
48977: LD_INT 50
48979: PUSH
48980: LD_INT 60
48982: PUSH
48983: LD_INT 70
48985: PUSH
48986: LD_INT 80
48988: PUSH
48989: LD_INT 90
48991: PUSH
48992: LD_INT 100
48994: PUSH
48995: LD_INT 110
48997: PUSH
48998: LD_INT 120
49000: PUSH
49001: LD_INT 130
49003: PUSH
49004: LD_INT 140
49006: PUSH
49007: LD_INT 150
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: PPUSH
49030: LD_INT 15
49032: PPUSH
49033: CALL_OW 12
49037: ARRAY
49038: ST_TO_ADDR
// if ValidHex ( x , y ) then
49039: LD_VAR 0 3
49043: PPUSH
49044: LD_VAR 0 4
49048: PPUSH
49049: CALL_OW 488
49053: IFFALSE 49076
// begin result := [ x , y ] ;
49055: LD_ADDR_VAR 0 1
49059: PUSH
49060: LD_VAR 0 3
49064: PUSH
49065: LD_VAR 0 4
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: ST_TO_ADDR
// break ;
49074: GO 49078
// end ; end ;
49076: GO 48878
49078: POP
49079: POP
// if result then
49080: LD_VAR 0 1
49084: IFFALSE 49144
// begin ToLua ( playSibBomb() ) ;
49086: LD_STRING playSibBomb()
49088: PPUSH
49089: CALL_OW 559
// wait ( 0 0$14 ) ;
49093: LD_INT 490
49095: PPUSH
49096: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
49100: LD_VAR 0 1
49104: PUSH
49105: LD_INT 1
49107: ARRAY
49108: PPUSH
49109: LD_VAR 0 1
49113: PUSH
49114: LD_INT 2
49116: ARRAY
49117: PPUSH
49118: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
49122: LD_VAR 0 1
49126: PUSH
49127: LD_INT 1
49129: ARRAY
49130: PPUSH
49131: LD_VAR 0 1
49135: PUSH
49136: LD_INT 2
49138: ARRAY
49139: PPUSH
49140: CALL_OW 429
// end ; end ;
49144: LD_VAR 0 1
49148: RET
// every 0 0$1 trigger StreamModeActive and sReset do
49149: LD_EXP 37
49153: PUSH
49154: LD_EXP 59
49158: AND
49159: IFFALSE 49171
49161: GO 49163
49163: DISABLE
// YouLost (  ) ;
49164: LD_STRING 
49166: PPUSH
49167: CALL_OW 104
49171: END
// every 0 0$1 trigger StreamModeActive and sFog do
49172: LD_EXP 37
49176: PUSH
49177: LD_EXP 58
49181: AND
49182: IFFALSE 49196
49184: GO 49186
49186: DISABLE
// FogOff ( your_side ) ;
49187: LD_OWVAR 2
49191: PPUSH
49192: CALL_OW 344
49196: END
// every 0 0$1 trigger StreamModeActive and sSun do
49197: LD_EXP 37
49201: PUSH
49202: LD_EXP 60
49206: AND
49207: IFFALSE 49235
49209: GO 49211
49211: DISABLE
// begin solar_recharge_percent := 0 ;
49212: LD_ADDR_OWVAR 79
49216: PUSH
49217: LD_INT 0
49219: ST_TO_ADDR
// wait ( 5 5$00 ) ;
49220: LD_INT 10500
49222: PPUSH
49223: CALL_OW 67
// solar_recharge_percent := 100 ;
49227: LD_ADDR_OWVAR 79
49231: PUSH
49232: LD_INT 100
49234: ST_TO_ADDR
// end ;
49235: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
49236: LD_EXP 37
49240: PUSH
49241: LD_EXP 61
49245: AND
49246: IFFALSE 49485
49248: GO 49250
49250: DISABLE
49251: LD_INT 0
49253: PPUSH
49254: PPUSH
49255: PPUSH
// begin tmp := [ ] ;
49256: LD_ADDR_VAR 0 3
49260: PUSH
49261: EMPTY
49262: ST_TO_ADDR
// for i := 1 to 6 do
49263: LD_ADDR_VAR 0 1
49267: PUSH
49268: DOUBLE
49269: LD_INT 1
49271: DEC
49272: ST_TO_ADDR
49273: LD_INT 6
49275: PUSH
49276: FOR_TO
49277: IFFALSE 49382
// begin uc_nation := nation_nature ;
49279: LD_ADDR_OWVAR 21
49283: PUSH
49284: LD_INT 0
49286: ST_TO_ADDR
// uc_side := 0 ;
49287: LD_ADDR_OWVAR 20
49291: PUSH
49292: LD_INT 0
49294: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49295: LD_ADDR_OWVAR 29
49299: PUSH
49300: LD_INT 12
49302: PUSH
49303: LD_INT 12
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: ST_TO_ADDR
// hc_agressivity := 20 ;
49310: LD_ADDR_OWVAR 35
49314: PUSH
49315: LD_INT 20
49317: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
49318: LD_ADDR_OWVAR 28
49322: PUSH
49323: LD_INT 17
49325: ST_TO_ADDR
// hc_gallery :=  ;
49326: LD_ADDR_OWVAR 33
49330: PUSH
49331: LD_STRING 
49333: ST_TO_ADDR
// hc_name :=  ;
49334: LD_ADDR_OWVAR 26
49338: PUSH
49339: LD_STRING 
49341: ST_TO_ADDR
// un := CreateHuman ;
49342: LD_ADDR_VAR 0 2
49346: PUSH
49347: CALL_OW 44
49351: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
49352: LD_VAR 0 2
49356: PPUSH
49357: LD_INT 1
49359: PPUSH
49360: CALL_OW 51
// tmp := tmp ^ un ;
49364: LD_ADDR_VAR 0 3
49368: PUSH
49369: LD_VAR 0 3
49373: PUSH
49374: LD_VAR 0 2
49378: ADD
49379: ST_TO_ADDR
// end ;
49380: GO 49276
49382: POP
49383: POP
// repeat wait ( 0 0$1 ) ;
49384: LD_INT 35
49386: PPUSH
49387: CALL_OW 67
// for un in tmp do
49391: LD_ADDR_VAR 0 2
49395: PUSH
49396: LD_VAR 0 3
49400: PUSH
49401: FOR_IN
49402: IFFALSE 49476
// begin if IsDead ( un ) then
49404: LD_VAR 0 2
49408: PPUSH
49409: CALL_OW 301
49413: IFFALSE 49433
// begin tmp := tmp diff un ;
49415: LD_ADDR_VAR 0 3
49419: PUSH
49420: LD_VAR 0 3
49424: PUSH
49425: LD_VAR 0 2
49429: DIFF
49430: ST_TO_ADDR
// continue ;
49431: GO 49401
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
49433: LD_VAR 0 2
49437: PPUSH
49438: LD_INT 3
49440: PUSH
49441: LD_INT 22
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PPUSH
49455: CALL_OW 69
49459: PPUSH
49460: LD_VAR 0 2
49464: PPUSH
49465: CALL_OW 74
49469: PPUSH
49470: CALL_OW 115
// end ;
49474: GO 49401
49476: POP
49477: POP
// until not tmp ;
49478: LD_VAR 0 3
49482: NOT
49483: IFFALSE 49384
// end ;
49485: PPOPN 3
49487: END
// every 0 0$1 trigger StreamModeActive and sTroll do
49488: LD_EXP 37
49492: PUSH
49493: LD_EXP 62
49497: AND
49498: IFFALSE 49552
49500: GO 49502
49502: DISABLE
// begin ToLua ( displayTroll(); ) ;
49503: LD_STRING displayTroll();
49505: PPUSH
49506: CALL_OW 559
// wait ( 3 3$00 ) ;
49510: LD_INT 6300
49512: PPUSH
49513: CALL_OW 67
// ToLua ( hideTroll(); ) ;
49517: LD_STRING hideTroll();
49519: PPUSH
49520: CALL_OW 559
// wait ( 1 1$00 ) ;
49524: LD_INT 2100
49526: PPUSH
49527: CALL_OW 67
// ToLua ( displayTroll(); ) ;
49531: LD_STRING displayTroll();
49533: PPUSH
49534: CALL_OW 559
// wait ( 1 1$00 ) ;
49538: LD_INT 2100
49540: PPUSH
49541: CALL_OW 67
// ToLua ( hideTroll(); ) ;
49545: LD_STRING hideTroll();
49547: PPUSH
49548: CALL_OW 559
// end ;
49552: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
49553: LD_EXP 37
49557: PUSH
49558: LD_EXP 63
49562: AND
49563: IFFALSE 49626
49565: GO 49567
49567: DISABLE
49568: LD_INT 0
49570: PPUSH
// begin p := 0 ;
49571: LD_ADDR_VAR 0 1
49575: PUSH
49576: LD_INT 0
49578: ST_TO_ADDR
// repeat game_speed := 1 ;
49579: LD_ADDR_OWVAR 65
49583: PUSH
49584: LD_INT 1
49586: ST_TO_ADDR
// wait ( 0 0$1 ) ;
49587: LD_INT 35
49589: PPUSH
49590: CALL_OW 67
// p := p + 1 ;
49594: LD_ADDR_VAR 0 1
49598: PUSH
49599: LD_VAR 0 1
49603: PUSH
49604: LD_INT 1
49606: PLUS
49607: ST_TO_ADDR
// until p >= 60 ;
49608: LD_VAR 0 1
49612: PUSH
49613: LD_INT 60
49615: GREATEREQUAL
49616: IFFALSE 49579
// game_speed := 4 ;
49618: LD_ADDR_OWVAR 65
49622: PUSH
49623: LD_INT 4
49625: ST_TO_ADDR
// end ;
49626: PPOPN 1
49628: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
49629: LD_EXP 37
49633: PUSH
49634: LD_EXP 64
49638: AND
49639: IFFALSE 49785
49641: GO 49643
49643: DISABLE
49644: LD_INT 0
49646: PPUSH
49647: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49648: LD_ADDR_VAR 0 1
49652: PUSH
49653: LD_INT 22
49655: PUSH
49656: LD_OWVAR 2
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 2
49667: PUSH
49668: LD_INT 30
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 30
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: LIST
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PPUSH
49697: CALL_OW 69
49701: ST_TO_ADDR
// if not depot then
49702: LD_VAR 0 1
49706: NOT
49707: IFFALSE 49711
// exit ;
49709: GO 49785
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
49711: LD_ADDR_VAR 0 2
49715: PUSH
49716: LD_VAR 0 1
49720: PUSH
49721: LD_INT 1
49723: PPUSH
49724: LD_VAR 0 1
49728: PPUSH
49729: CALL_OW 12
49733: ARRAY
49734: PPUSH
49735: CALL_OW 274
49739: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
49740: LD_VAR 0 2
49744: PPUSH
49745: LD_INT 1
49747: PPUSH
49748: LD_INT 0
49750: PPUSH
49751: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
49755: LD_VAR 0 2
49759: PPUSH
49760: LD_INT 2
49762: PPUSH
49763: LD_INT 0
49765: PPUSH
49766: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
49770: LD_VAR 0 2
49774: PPUSH
49775: LD_INT 3
49777: PPUSH
49778: LD_INT 0
49780: PPUSH
49781: CALL_OW 277
// end ;
49785: PPOPN 2
49787: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
49788: LD_EXP 37
49792: PUSH
49793: LD_EXP 65
49797: AND
49798: IFFALSE 49895
49800: GO 49802
49802: DISABLE
49803: LD_INT 0
49805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
49806: LD_ADDR_VAR 0 1
49810: PUSH
49811: LD_INT 22
49813: PUSH
49814: LD_OWVAR 2
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 21
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 3
49835: PUSH
49836: LD_INT 23
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: LIST
49854: PPUSH
49855: CALL_OW 69
49859: ST_TO_ADDR
// if not tmp then
49860: LD_VAR 0 1
49864: NOT
49865: IFFALSE 49869
// exit ;
49867: GO 49895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
49869: LD_VAR 0 1
49873: PUSH
49874: LD_INT 1
49876: PPUSH
49877: LD_VAR 0 1
49881: PPUSH
49882: CALL_OW 12
49886: ARRAY
49887: PPUSH
49888: LD_INT 200
49890: PPUSH
49891: CALL_OW 234
// end ;
49895: PPOPN 1
49897: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
49898: LD_EXP 37
49902: PUSH
49903: LD_EXP 66
49907: AND
49908: IFFALSE 49987
49910: GO 49912
49912: DISABLE
49913: LD_INT 0
49915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
49916: LD_ADDR_VAR 0 1
49920: PUSH
49921: LD_INT 22
49923: PUSH
49924: LD_OWVAR 2
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 21
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PPUSH
49947: CALL_OW 69
49951: ST_TO_ADDR
// if not tmp then
49952: LD_VAR 0 1
49956: NOT
49957: IFFALSE 49961
// exit ;
49959: GO 49987
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
49961: LD_VAR 0 1
49965: PUSH
49966: LD_INT 1
49968: PPUSH
49969: LD_VAR 0 1
49973: PPUSH
49974: CALL_OW 12
49978: ARRAY
49979: PPUSH
49980: LD_INT 60
49982: PPUSH
49983: CALL_OW 234
// end ;
49987: PPOPN 1
49989: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
49990: LD_EXP 37
49994: PUSH
49995: LD_EXP 67
49999: AND
50000: IFFALSE 50099
50002: GO 50004
50004: DISABLE
50005: LD_INT 0
50007: PPUSH
50008: PPUSH
// begin enable ;
50009: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
50010: LD_ADDR_VAR 0 1
50014: PUSH
50015: LD_INT 22
50017: PUSH
50018: LD_OWVAR 2
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 61
50029: PUSH
50030: EMPTY
50031: LIST
50032: PUSH
50033: LD_INT 33
50035: PUSH
50036: LD_INT 2
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: LIST
50047: PPUSH
50048: CALL_OW 69
50052: ST_TO_ADDR
// if not tmp then
50053: LD_VAR 0 1
50057: NOT
50058: IFFALSE 50062
// exit ;
50060: GO 50099
// for i in tmp do
50062: LD_ADDR_VAR 0 2
50066: PUSH
50067: LD_VAR 0 1
50071: PUSH
50072: FOR_IN
50073: IFFALSE 50097
// if IsControledBy ( i ) then
50075: LD_VAR 0 2
50079: PPUSH
50080: CALL_OW 312
50084: IFFALSE 50095
// ComUnlink ( i ) ;
50086: LD_VAR 0 2
50090: PPUSH
50091: CALL_OW 136
50095: GO 50072
50097: POP
50098: POP
// end ;
50099: PPOPN 2
50101: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
50102: LD_EXP 37
50106: PUSH
50107: LD_EXP 68
50111: AND
50112: IFFALSE 50252
50114: GO 50116
50116: DISABLE
50117: LD_INT 0
50119: PPUSH
50120: PPUSH
// begin ToLua ( displayPowell(); ) ;
50121: LD_STRING displayPowell();
50123: PPUSH
50124: CALL_OW 559
// uc_side := 0 ;
50128: LD_ADDR_OWVAR 20
50132: PUSH
50133: LD_INT 0
50135: ST_TO_ADDR
// uc_nation := 2 ;
50136: LD_ADDR_OWVAR 21
50140: PUSH
50141: LD_INT 2
50143: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
50144: LD_ADDR_OWVAR 37
50148: PUSH
50149: LD_INT 14
50151: ST_TO_ADDR
// vc_engine := engine_siberite ;
50152: LD_ADDR_OWVAR 39
50156: PUSH
50157: LD_INT 3
50159: ST_TO_ADDR
// vc_control := control_apeman ;
50160: LD_ADDR_OWVAR 38
50164: PUSH
50165: LD_INT 5
50167: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
50168: LD_ADDR_OWVAR 40
50172: PUSH
50173: LD_INT 29
50175: ST_TO_ADDR
// un := CreateVehicle ;
50176: LD_ADDR_VAR 0 2
50180: PUSH
50181: CALL_OW 45
50185: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
50186: LD_VAR 0 2
50190: PPUSH
50191: LD_INT 1
50193: PPUSH
50194: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
50198: LD_INT 35
50200: PPUSH
50201: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
50205: LD_VAR 0 2
50209: PPUSH
50210: LD_INT 22
50212: PUSH
50213: LD_OWVAR 2
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PPUSH
50222: CALL_OW 69
50226: PPUSH
50227: LD_VAR 0 2
50231: PPUSH
50232: CALL_OW 74
50236: PPUSH
50237: CALL_OW 115
// until IsDead ( un ) ;
50241: LD_VAR 0 2
50245: PPUSH
50246: CALL_OW 301
50250: IFFALSE 50198
// end ;
50252: PPOPN 2
50254: END
// every 0 0$1 trigger StreamModeActive and sStu do
50255: LD_EXP 37
50259: PUSH
50260: LD_EXP 76
50264: AND
50265: IFFALSE 50281
50267: GO 50269
50269: DISABLE
// begin ToLua ( displayStucuk(); ) ;
50270: LD_STRING displayStucuk();
50272: PPUSH
50273: CALL_OW 559
// ResetFog ;
50277: CALL_OW 335
// end ;
50281: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
50282: LD_EXP 37
50286: PUSH
50287: LD_EXP 69
50291: AND
50292: IFFALSE 50433
50294: GO 50296
50296: DISABLE
50297: LD_INT 0
50299: PPUSH
50300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
50301: LD_ADDR_VAR 0 2
50305: PUSH
50306: LD_INT 22
50308: PUSH
50309: LD_OWVAR 2
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 21
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PPUSH
50332: CALL_OW 69
50336: ST_TO_ADDR
// if not tmp then
50337: LD_VAR 0 2
50341: NOT
50342: IFFALSE 50346
// exit ;
50344: GO 50433
// un := tmp [ rand ( 1 , tmp ) ] ;
50346: LD_ADDR_VAR 0 1
50350: PUSH
50351: LD_VAR 0 2
50355: PUSH
50356: LD_INT 1
50358: PPUSH
50359: LD_VAR 0 2
50363: PPUSH
50364: CALL_OW 12
50368: ARRAY
50369: ST_TO_ADDR
// SetSide ( un , 0 ) ;
50370: LD_VAR 0 1
50374: PPUSH
50375: LD_INT 0
50377: PPUSH
50378: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
50382: LD_VAR 0 1
50386: PPUSH
50387: LD_OWVAR 3
50391: PUSH
50392: LD_VAR 0 1
50396: DIFF
50397: PPUSH
50398: LD_VAR 0 1
50402: PPUSH
50403: CALL_OW 74
50407: PPUSH
50408: CALL_OW 115
// wait ( 0 0$20 ) ;
50412: LD_INT 700
50414: PPUSH
50415: CALL_OW 67
// SetSide ( un , your_side ) ;
50419: LD_VAR 0 1
50423: PPUSH
50424: LD_OWVAR 2
50428: PPUSH
50429: CALL_OW 235
// end ;
50433: PPOPN 2
50435: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
50436: LD_EXP 37
50440: PUSH
50441: LD_EXP 70
50445: AND
50446: IFFALSE 50552
50448: GO 50450
50450: DISABLE
50451: LD_INT 0
50453: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50454: LD_ADDR_VAR 0 1
50458: PUSH
50459: LD_INT 22
50461: PUSH
50462: LD_OWVAR 2
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: LD_INT 30
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 30
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: LIST
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PPUSH
50503: CALL_OW 69
50507: ST_TO_ADDR
// if not depot then
50508: LD_VAR 0 1
50512: NOT
50513: IFFALSE 50517
// exit ;
50515: GO 50552
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
50517: LD_VAR 0 1
50521: PUSH
50522: LD_INT 1
50524: ARRAY
50525: PPUSH
50526: CALL_OW 250
50530: PPUSH
50531: LD_VAR 0 1
50535: PUSH
50536: LD_INT 1
50538: ARRAY
50539: PPUSH
50540: CALL_OW 251
50544: PPUSH
50545: LD_INT 70
50547: PPUSH
50548: CALL_OW 495
// end ;
50552: PPOPN 1
50554: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
50555: LD_EXP 37
50559: PUSH
50560: LD_EXP 71
50564: AND
50565: IFFALSE 50776
50567: GO 50569
50569: DISABLE
50570: LD_INT 0
50572: PPUSH
50573: PPUSH
50574: PPUSH
50575: PPUSH
50576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
50577: LD_ADDR_VAR 0 5
50581: PUSH
50582: LD_INT 22
50584: PUSH
50585: LD_OWVAR 2
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 21
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PPUSH
50608: CALL_OW 69
50612: ST_TO_ADDR
// if not tmp then
50613: LD_VAR 0 5
50617: NOT
50618: IFFALSE 50622
// exit ;
50620: GO 50776
// for i in tmp do
50622: LD_ADDR_VAR 0 1
50626: PUSH
50627: LD_VAR 0 5
50631: PUSH
50632: FOR_IN
50633: IFFALSE 50774
// begin d := rand ( 0 , 5 ) ;
50635: LD_ADDR_VAR 0 4
50639: PUSH
50640: LD_INT 0
50642: PPUSH
50643: LD_INT 5
50645: PPUSH
50646: CALL_OW 12
50650: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
50651: LD_ADDR_VAR 0 2
50655: PUSH
50656: LD_VAR 0 1
50660: PPUSH
50661: CALL_OW 250
50665: PPUSH
50666: LD_VAR 0 4
50670: PPUSH
50671: LD_INT 3
50673: PPUSH
50674: LD_INT 12
50676: PPUSH
50677: CALL_OW 12
50681: PPUSH
50682: CALL_OW 272
50686: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
50687: LD_ADDR_VAR 0 3
50691: PUSH
50692: LD_VAR 0 1
50696: PPUSH
50697: CALL_OW 251
50701: PPUSH
50702: LD_VAR 0 4
50706: PPUSH
50707: LD_INT 3
50709: PPUSH
50710: LD_INT 12
50712: PPUSH
50713: CALL_OW 12
50717: PPUSH
50718: CALL_OW 273
50722: ST_TO_ADDR
// if ValidHex ( x , y ) then
50723: LD_VAR 0 2
50727: PPUSH
50728: LD_VAR 0 3
50732: PPUSH
50733: CALL_OW 488
50737: IFFALSE 50772
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
50739: LD_VAR 0 1
50743: PPUSH
50744: LD_VAR 0 2
50748: PPUSH
50749: LD_VAR 0 3
50753: PPUSH
50754: LD_INT 3
50756: PPUSH
50757: LD_INT 6
50759: PPUSH
50760: CALL_OW 12
50764: PPUSH
50765: LD_INT 1
50767: PPUSH
50768: CALL_OW 483
// end ;
50772: GO 50632
50774: POP
50775: POP
// end ;
50776: PPOPN 5
50778: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
50779: LD_EXP 37
50783: PUSH
50784: LD_EXP 72
50788: AND
50789: IFFALSE 50883
50791: GO 50793
50793: DISABLE
50794: LD_INT 0
50796: PPUSH
50797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
50798: LD_ADDR_VAR 0 2
50802: PUSH
50803: LD_INT 22
50805: PUSH
50806: LD_OWVAR 2
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 32
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 21
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: LIST
50839: PPUSH
50840: CALL_OW 69
50844: ST_TO_ADDR
// if not tmp then
50845: LD_VAR 0 2
50849: NOT
50850: IFFALSE 50854
// exit ;
50852: GO 50883
// for i in tmp do
50854: LD_ADDR_VAR 0 1
50858: PUSH
50859: LD_VAR 0 2
50863: PUSH
50864: FOR_IN
50865: IFFALSE 50881
// SetFuel ( i , 0 ) ;
50867: LD_VAR 0 1
50871: PPUSH
50872: LD_INT 0
50874: PPUSH
50875: CALL_OW 240
50879: GO 50864
50881: POP
50882: POP
// end ;
50883: PPOPN 2
50885: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
50886: LD_EXP 37
50890: PUSH
50891: LD_EXP 73
50895: AND
50896: IFFALSE 50962
50898: GO 50900
50900: DISABLE
50901: LD_INT 0
50903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
50904: LD_ADDR_VAR 0 1
50908: PUSH
50909: LD_INT 22
50911: PUSH
50912: LD_OWVAR 2
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 30
50923: PUSH
50924: LD_INT 29
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PPUSH
50935: CALL_OW 69
50939: ST_TO_ADDR
// if not tmp then
50940: LD_VAR 0 1
50944: NOT
50945: IFFALSE 50949
// exit ;
50947: GO 50962
// DestroyUnit ( tmp [ 1 ] ) ;
50949: LD_VAR 0 1
50953: PUSH
50954: LD_INT 1
50956: ARRAY
50957: PPUSH
50958: CALL_OW 65
// end ;
50962: PPOPN 1
50964: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
50965: LD_EXP 37
50969: PUSH
50970: LD_EXP 75
50974: AND
50975: IFFALSE 51104
50977: GO 50979
50979: DISABLE
50980: LD_INT 0
50982: PPUSH
// begin uc_side := 0 ;
50983: LD_ADDR_OWVAR 20
50987: PUSH
50988: LD_INT 0
50990: ST_TO_ADDR
// uc_nation := nation_arabian ;
50991: LD_ADDR_OWVAR 21
50995: PUSH
50996: LD_INT 2
50998: ST_TO_ADDR
// hc_gallery :=  ;
50999: LD_ADDR_OWVAR 33
51003: PUSH
51004: LD_STRING 
51006: ST_TO_ADDR
// hc_name :=  ;
51007: LD_ADDR_OWVAR 26
51011: PUSH
51012: LD_STRING 
51014: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
51015: LD_INT 1
51017: PPUSH
51018: LD_INT 11
51020: PPUSH
51021: LD_INT 10
51023: PPUSH
51024: CALL_OW 380
// un := CreateHuman ;
51028: LD_ADDR_VAR 0 1
51032: PUSH
51033: CALL_OW 44
51037: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
51038: LD_VAR 0 1
51042: PPUSH
51043: LD_INT 1
51045: PPUSH
51046: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
51050: LD_INT 35
51052: PPUSH
51053: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
51057: LD_VAR 0 1
51061: PPUSH
51062: LD_INT 22
51064: PUSH
51065: LD_OWVAR 2
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PPUSH
51074: CALL_OW 69
51078: PPUSH
51079: LD_VAR 0 1
51083: PPUSH
51084: CALL_OW 74
51088: PPUSH
51089: CALL_OW 115
// until IsDead ( un ) ;
51093: LD_VAR 0 1
51097: PPUSH
51098: CALL_OW 301
51102: IFFALSE 51050
// end ;
51104: PPOPN 1
51106: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
51107: LD_EXP 37
51111: PUSH
51112: LD_EXP 77
51116: AND
51117: IFFALSE 51129
51119: GO 51121
51121: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
51122: LD_STRING earthquake(getX(game), 0, 32)
51124: PPUSH
51125: CALL_OW 559
51129: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
51130: LD_EXP 37
51134: PUSH
51135: LD_EXP 78
51139: AND
51140: IFFALSE 51231
51142: GO 51144
51144: DISABLE
51145: LD_INT 0
51147: PPUSH
// begin enable ;
51148: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
51149: LD_ADDR_VAR 0 1
51153: PUSH
51154: LD_INT 22
51156: PUSH
51157: LD_OWVAR 2
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 21
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 33
51178: PUSH
51179: LD_INT 3
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: LIST
51190: PPUSH
51191: CALL_OW 69
51195: ST_TO_ADDR
// if not tmp then
51196: LD_VAR 0 1
51200: NOT
51201: IFFALSE 51205
// exit ;
51203: GO 51231
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
51205: LD_VAR 0 1
51209: PUSH
51210: LD_INT 1
51212: PPUSH
51213: LD_VAR 0 1
51217: PPUSH
51218: CALL_OW 12
51222: ARRAY
51223: PPUSH
51224: LD_INT 1
51226: PPUSH
51227: CALL_OW 234
// end ;
51231: PPOPN 1
51233: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
51234: LD_EXP 37
51238: PUSH
51239: LD_EXP 79
51243: AND
51244: IFFALSE 51385
51246: GO 51248
51248: DISABLE
51249: LD_INT 0
51251: PPUSH
51252: PPUSH
51253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51254: LD_ADDR_VAR 0 3
51258: PUSH
51259: LD_INT 22
51261: PUSH
51262: LD_OWVAR 2
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 25
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PPUSH
51285: CALL_OW 69
51289: ST_TO_ADDR
// if not tmp then
51290: LD_VAR 0 3
51294: NOT
51295: IFFALSE 51299
// exit ;
51297: GO 51385
// un := tmp [ rand ( 1 , tmp ) ] ;
51299: LD_ADDR_VAR 0 2
51303: PUSH
51304: LD_VAR 0 3
51308: PUSH
51309: LD_INT 1
51311: PPUSH
51312: LD_VAR 0 3
51316: PPUSH
51317: CALL_OW 12
51321: ARRAY
51322: ST_TO_ADDR
// if Crawls ( un ) then
51323: LD_VAR 0 2
51327: PPUSH
51328: CALL_OW 318
51332: IFFALSE 51343
// ComWalk ( un ) ;
51334: LD_VAR 0 2
51338: PPUSH
51339: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
51343: LD_VAR 0 2
51347: PPUSH
51348: LD_INT 9
51350: PPUSH
51351: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
51355: LD_INT 28
51357: PPUSH
51358: LD_OWVAR 2
51362: PPUSH
51363: LD_INT 2
51365: PPUSH
51366: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
51370: LD_INT 29
51372: PPUSH
51373: LD_OWVAR 2
51377: PPUSH
51378: LD_INT 2
51380: PPUSH
51381: CALL_OW 322
// end ;
51385: PPOPN 3
51387: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
51388: LD_EXP 37
51392: PUSH
51393: LD_EXP 80
51397: AND
51398: IFFALSE 51509
51400: GO 51402
51402: DISABLE
51403: LD_INT 0
51405: PPUSH
51406: PPUSH
51407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51408: LD_ADDR_VAR 0 3
51412: PUSH
51413: LD_INT 22
51415: PUSH
51416: LD_OWVAR 2
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 25
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PPUSH
51439: CALL_OW 69
51443: ST_TO_ADDR
// if not tmp then
51444: LD_VAR 0 3
51448: NOT
51449: IFFALSE 51453
// exit ;
51451: GO 51509
// un := tmp [ rand ( 1 , tmp ) ] ;
51453: LD_ADDR_VAR 0 2
51457: PUSH
51458: LD_VAR 0 3
51462: PUSH
51463: LD_INT 1
51465: PPUSH
51466: LD_VAR 0 3
51470: PPUSH
51471: CALL_OW 12
51475: ARRAY
51476: ST_TO_ADDR
// if Crawls ( un ) then
51477: LD_VAR 0 2
51481: PPUSH
51482: CALL_OW 318
51486: IFFALSE 51497
// ComWalk ( un ) ;
51488: LD_VAR 0 2
51492: PPUSH
51493: CALL_OW 138
// SetClass ( un , class_mortar ) ;
51497: LD_VAR 0 2
51501: PPUSH
51502: LD_INT 8
51504: PPUSH
51505: CALL_OW 336
// end ;
51509: PPOPN 3
51511: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
51512: LD_EXP 37
51516: PUSH
51517: LD_EXP 81
51521: AND
51522: IFFALSE 51666
51524: GO 51526
51526: DISABLE
51527: LD_INT 0
51529: PPUSH
51530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
51531: LD_ADDR_VAR 0 2
51535: PUSH
51536: LD_INT 22
51538: PUSH
51539: LD_OWVAR 2
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 21
51550: PUSH
51551: LD_INT 2
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 2
51560: PUSH
51561: LD_INT 34
51563: PUSH
51564: LD_INT 12
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 34
51573: PUSH
51574: LD_INT 51
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 34
51583: PUSH
51584: LD_INT 32
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: LIST
51601: PPUSH
51602: CALL_OW 69
51606: ST_TO_ADDR
// if not tmp then
51607: LD_VAR 0 2
51611: NOT
51612: IFFALSE 51616
// exit ;
51614: GO 51666
// for i in tmp do
51616: LD_ADDR_VAR 0 1
51620: PUSH
51621: LD_VAR 0 2
51625: PUSH
51626: FOR_IN
51627: IFFALSE 51664
// if GetCargo ( i , mat_artifact ) = 0 then
51629: LD_VAR 0 1
51633: PPUSH
51634: LD_INT 4
51636: PPUSH
51637: CALL_OW 289
51641: PUSH
51642: LD_INT 0
51644: EQUAL
51645: IFFALSE 51662
// SetCargo ( i , mat_siberit , 100 ) ;
51647: LD_VAR 0 1
51651: PPUSH
51652: LD_INT 3
51654: PPUSH
51655: LD_INT 100
51657: PPUSH
51658: CALL_OW 290
51662: GO 51626
51664: POP
51665: POP
// end ;
51666: PPOPN 2
51668: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
51669: LD_EXP 37
51673: PUSH
51674: LD_EXP 82
51678: AND
51679: IFFALSE 51862
51681: GO 51683
51683: DISABLE
51684: LD_INT 0
51686: PPUSH
51687: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
51688: LD_ADDR_VAR 0 2
51692: PUSH
51693: LD_INT 22
51695: PUSH
51696: LD_OWVAR 2
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PPUSH
51705: CALL_OW 69
51709: ST_TO_ADDR
// if not tmp then
51710: LD_VAR 0 2
51714: NOT
51715: IFFALSE 51719
// exit ;
51717: GO 51862
// for i := 1 to 2 do
51719: LD_ADDR_VAR 0 1
51723: PUSH
51724: DOUBLE
51725: LD_INT 1
51727: DEC
51728: ST_TO_ADDR
51729: LD_INT 2
51731: PUSH
51732: FOR_TO
51733: IFFALSE 51860
// begin uc_side := your_side ;
51735: LD_ADDR_OWVAR 20
51739: PUSH
51740: LD_OWVAR 2
51744: ST_TO_ADDR
// uc_nation := nation_american ;
51745: LD_ADDR_OWVAR 21
51749: PUSH
51750: LD_INT 1
51752: ST_TO_ADDR
// vc_chassis := us_morphling ;
51753: LD_ADDR_OWVAR 37
51757: PUSH
51758: LD_INT 5
51760: ST_TO_ADDR
// vc_engine := engine_siberite ;
51761: LD_ADDR_OWVAR 39
51765: PUSH
51766: LD_INT 3
51768: ST_TO_ADDR
// vc_control := control_computer ;
51769: LD_ADDR_OWVAR 38
51773: PUSH
51774: LD_INT 3
51776: ST_TO_ADDR
// vc_weapon := us_double_laser ;
51777: LD_ADDR_OWVAR 40
51781: PUSH
51782: LD_INT 10
51784: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
51785: LD_VAR 0 2
51789: PUSH
51790: LD_INT 1
51792: ARRAY
51793: PPUSH
51794: CALL_OW 310
51798: NOT
51799: IFFALSE 51846
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
51801: CALL_OW 45
51805: PPUSH
51806: LD_VAR 0 2
51810: PUSH
51811: LD_INT 1
51813: ARRAY
51814: PPUSH
51815: CALL_OW 250
51819: PPUSH
51820: LD_VAR 0 2
51824: PUSH
51825: LD_INT 1
51827: ARRAY
51828: PPUSH
51829: CALL_OW 251
51833: PPUSH
51834: LD_INT 12
51836: PPUSH
51837: LD_INT 1
51839: PPUSH
51840: CALL_OW 50
51844: GO 51858
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
51846: CALL_OW 45
51850: PPUSH
51851: LD_INT 1
51853: PPUSH
51854: CALL_OW 51
// end ;
51858: GO 51732
51860: POP
51861: POP
// end ;
51862: PPOPN 2
51864: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
51865: LD_EXP 37
51869: PUSH
51870: LD_EXP 83
51874: AND
51875: IFFALSE 52097
51877: GO 51879
51879: DISABLE
51880: LD_INT 0
51882: PPUSH
51883: PPUSH
51884: PPUSH
51885: PPUSH
51886: PPUSH
51887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
51888: LD_ADDR_VAR 0 6
51892: PUSH
51893: LD_INT 22
51895: PUSH
51896: LD_OWVAR 2
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 21
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 3
51917: PUSH
51918: LD_INT 23
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: LIST
51936: PPUSH
51937: CALL_OW 69
51941: ST_TO_ADDR
// if not tmp then
51942: LD_VAR 0 6
51946: NOT
51947: IFFALSE 51951
// exit ;
51949: GO 52097
// s1 := rand ( 1 , 4 ) ;
51951: LD_ADDR_VAR 0 2
51955: PUSH
51956: LD_INT 1
51958: PPUSH
51959: LD_INT 4
51961: PPUSH
51962: CALL_OW 12
51966: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
51967: LD_ADDR_VAR 0 4
51971: PUSH
51972: LD_VAR 0 6
51976: PUSH
51977: LD_INT 1
51979: ARRAY
51980: PPUSH
51981: LD_VAR 0 2
51985: PPUSH
51986: CALL_OW 259
51990: ST_TO_ADDR
// if s1 = 1 then
51991: LD_VAR 0 2
51995: PUSH
51996: LD_INT 1
51998: EQUAL
51999: IFFALSE 52019
// s2 := rand ( 2 , 4 ) else
52001: LD_ADDR_VAR 0 3
52005: PUSH
52006: LD_INT 2
52008: PPUSH
52009: LD_INT 4
52011: PPUSH
52012: CALL_OW 12
52016: ST_TO_ADDR
52017: GO 52027
// s2 := 1 ;
52019: LD_ADDR_VAR 0 3
52023: PUSH
52024: LD_INT 1
52026: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
52027: LD_ADDR_VAR 0 5
52031: PUSH
52032: LD_VAR 0 6
52036: PUSH
52037: LD_INT 1
52039: ARRAY
52040: PPUSH
52041: LD_VAR 0 3
52045: PPUSH
52046: CALL_OW 259
52050: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
52051: LD_VAR 0 6
52055: PUSH
52056: LD_INT 1
52058: ARRAY
52059: PPUSH
52060: LD_VAR 0 2
52064: PPUSH
52065: LD_VAR 0 5
52069: PPUSH
52070: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
52074: LD_VAR 0 6
52078: PUSH
52079: LD_INT 1
52081: ARRAY
52082: PPUSH
52083: LD_VAR 0 3
52087: PPUSH
52088: LD_VAR 0 4
52092: PPUSH
52093: CALL_OW 237
// end ;
52097: PPOPN 6
52099: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
52100: LD_EXP 37
52104: PUSH
52105: LD_EXP 84
52109: AND
52110: IFFALSE 52189
52112: GO 52114
52114: DISABLE
52115: LD_INT 0
52117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
52118: LD_ADDR_VAR 0 1
52122: PUSH
52123: LD_INT 22
52125: PUSH
52126: LD_OWVAR 2
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 30
52137: PUSH
52138: LD_INT 3
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PPUSH
52149: CALL_OW 69
52153: ST_TO_ADDR
// if not tmp then
52154: LD_VAR 0 1
52158: NOT
52159: IFFALSE 52163
// exit ;
52161: GO 52189
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
52163: LD_VAR 0 1
52167: PUSH
52168: LD_INT 1
52170: PPUSH
52171: LD_VAR 0 1
52175: PPUSH
52176: CALL_OW 12
52180: ARRAY
52181: PPUSH
52182: LD_INT 1
52184: PPUSH
52185: CALL_OW 234
// end ;
52189: PPOPN 1
52191: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
52192: LD_EXP 37
52196: PUSH
52197: LD_EXP 85
52201: AND
52202: IFFALSE 52314
52204: GO 52206
52206: DISABLE
52207: LD_INT 0
52209: PPUSH
52210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
52211: LD_ADDR_VAR 0 2
52215: PUSH
52216: LD_INT 22
52218: PUSH
52219: LD_OWVAR 2
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 2
52230: PUSH
52231: LD_INT 30
52233: PUSH
52234: LD_INT 27
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 30
52243: PUSH
52244: LD_INT 26
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 30
52253: PUSH
52254: LD_INT 28
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PPUSH
52271: CALL_OW 69
52275: ST_TO_ADDR
// if not tmp then
52276: LD_VAR 0 2
52280: NOT
52281: IFFALSE 52285
// exit ;
52283: GO 52314
// for i in tmp do
52285: LD_ADDR_VAR 0 1
52289: PUSH
52290: LD_VAR 0 2
52294: PUSH
52295: FOR_IN
52296: IFFALSE 52312
// SetLives ( i , 1 ) ;
52298: LD_VAR 0 1
52302: PPUSH
52303: LD_INT 1
52305: PPUSH
52306: CALL_OW 234
52310: GO 52295
52312: POP
52313: POP
// end ;
52314: PPOPN 2
52316: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
52317: LD_EXP 37
52321: PUSH
52322: LD_EXP 86
52326: AND
52327: IFFALSE 52601
52329: GO 52331
52331: DISABLE
52332: LD_INT 0
52334: PPUSH
52335: PPUSH
52336: PPUSH
// begin i := rand ( 1 , 7 ) ;
52337: LD_ADDR_VAR 0 1
52341: PUSH
52342: LD_INT 1
52344: PPUSH
52345: LD_INT 7
52347: PPUSH
52348: CALL_OW 12
52352: ST_TO_ADDR
// case i of 1 :
52353: LD_VAR 0 1
52357: PUSH
52358: LD_INT 1
52360: DOUBLE
52361: EQUAL
52362: IFTRUE 52366
52364: GO 52376
52366: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
52367: LD_STRING earthquake(getX(game), 0, 32)
52369: PPUSH
52370: CALL_OW 559
52374: GO 52601
52376: LD_INT 2
52378: DOUBLE
52379: EQUAL
52380: IFTRUE 52384
52382: GO 52398
52384: POP
// begin ToLua ( displayStucuk(); ) ;
52385: LD_STRING displayStucuk();
52387: PPUSH
52388: CALL_OW 559
// ResetFog ;
52392: CALL_OW 335
// end ; 3 :
52396: GO 52601
52398: LD_INT 3
52400: DOUBLE
52401: EQUAL
52402: IFTRUE 52406
52404: GO 52510
52406: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52407: LD_ADDR_VAR 0 2
52411: PUSH
52412: LD_INT 22
52414: PUSH
52415: LD_OWVAR 2
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 25
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PPUSH
52438: CALL_OW 69
52442: ST_TO_ADDR
// if not tmp then
52443: LD_VAR 0 2
52447: NOT
52448: IFFALSE 52452
// exit ;
52450: GO 52601
// un := tmp [ rand ( 1 , tmp ) ] ;
52452: LD_ADDR_VAR 0 3
52456: PUSH
52457: LD_VAR 0 2
52461: PUSH
52462: LD_INT 1
52464: PPUSH
52465: LD_VAR 0 2
52469: PPUSH
52470: CALL_OW 12
52474: ARRAY
52475: ST_TO_ADDR
// if Crawls ( un ) then
52476: LD_VAR 0 3
52480: PPUSH
52481: CALL_OW 318
52485: IFFALSE 52496
// ComWalk ( un ) ;
52487: LD_VAR 0 3
52491: PPUSH
52492: CALL_OW 138
// SetClass ( un , class_mortar ) ;
52496: LD_VAR 0 3
52500: PPUSH
52501: LD_INT 8
52503: PPUSH
52504: CALL_OW 336
// end ; 4 :
52508: GO 52601
52510: LD_INT 4
52512: DOUBLE
52513: EQUAL
52514: IFTRUE 52518
52516: GO 52579
52518: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
52519: LD_ADDR_VAR 0 2
52523: PUSH
52524: LD_INT 22
52526: PUSH
52527: LD_OWVAR 2
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 30
52538: PUSH
52539: LD_INT 29
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PPUSH
52550: CALL_OW 69
52554: ST_TO_ADDR
// if not tmp then
52555: LD_VAR 0 2
52559: NOT
52560: IFFALSE 52564
// exit ;
52562: GO 52601
// DestroyUnit ( tmp [ 1 ] ) ;
52564: LD_VAR 0 2
52568: PUSH
52569: LD_INT 1
52571: ARRAY
52572: PPUSH
52573: CALL_OW 65
// end ; 5 .. 7 :
52577: GO 52601
52579: LD_INT 5
52581: DOUBLE
52582: GREATEREQUAL
52583: IFFALSE 52591
52585: LD_INT 7
52587: DOUBLE
52588: LESSEQUAL
52589: IFTRUE 52593
52591: GO 52600
52593: POP
// StreamSibBomb ; end ;
52594: CALL 48851 0 0
52598: GO 52601
52600: POP
// end ;
52601: PPOPN 3
52603: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
52604: LD_EXP 37
52608: PUSH
52609: LD_EXP 87
52613: AND
52614: IFFALSE 52770
52616: GO 52618
52618: DISABLE
52619: LD_INT 0
52621: PPUSH
52622: PPUSH
52623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
52624: LD_ADDR_VAR 0 2
52628: PUSH
52629: LD_INT 81
52631: PUSH
52632: LD_OWVAR 2
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: LD_INT 21
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 21
52656: PUSH
52657: LD_INT 2
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: LIST
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PPUSH
52673: CALL_OW 69
52677: ST_TO_ADDR
// if not tmp then
52678: LD_VAR 0 2
52682: NOT
52683: IFFALSE 52687
// exit ;
52685: GO 52770
// p := 0 ;
52687: LD_ADDR_VAR 0 3
52691: PUSH
52692: LD_INT 0
52694: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
52695: LD_INT 35
52697: PPUSH
52698: CALL_OW 67
// p := p + 1 ;
52702: LD_ADDR_VAR 0 3
52706: PUSH
52707: LD_VAR 0 3
52711: PUSH
52712: LD_INT 1
52714: PLUS
52715: ST_TO_ADDR
// for i in tmp do
52716: LD_ADDR_VAR 0 1
52720: PUSH
52721: LD_VAR 0 2
52725: PUSH
52726: FOR_IN
52727: IFFALSE 52758
// if GetLives ( i ) < 1000 then
52729: LD_VAR 0 1
52733: PPUSH
52734: CALL_OW 256
52738: PUSH
52739: LD_INT 1000
52741: LESS
52742: IFFALSE 52756
// SetLives ( i , 1000 ) ;
52744: LD_VAR 0 1
52748: PPUSH
52749: LD_INT 1000
52751: PPUSH
52752: CALL_OW 234
52756: GO 52726
52758: POP
52759: POP
// until p > 20 ;
52760: LD_VAR 0 3
52764: PUSH
52765: LD_INT 20
52767: GREATER
52768: IFFALSE 52695
// end ;
52770: PPOPN 3
52772: END
// every 0 0$1 trigger StreamModeActive and sTime do
52773: LD_EXP 37
52777: PUSH
52778: LD_EXP 88
52782: AND
52783: IFFALSE 52818
52785: GO 52787
52787: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
52788: LD_INT 28
52790: PPUSH
52791: LD_OWVAR 2
52795: PPUSH
52796: LD_INT 2
52798: PPUSH
52799: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
52803: LD_INT 30
52805: PPUSH
52806: LD_OWVAR 2
52810: PPUSH
52811: LD_INT 2
52813: PPUSH
52814: CALL_OW 322
// end ;
52818: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
52819: LD_EXP 37
52823: PUSH
52824: LD_EXP 89
52828: AND
52829: IFFALSE 52950
52831: GO 52833
52833: DISABLE
52834: LD_INT 0
52836: PPUSH
52837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
52838: LD_ADDR_VAR 0 2
52842: PUSH
52843: LD_INT 22
52845: PUSH
52846: LD_OWVAR 2
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 21
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 3
52867: PUSH
52868: LD_INT 23
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: LIST
52886: PPUSH
52887: CALL_OW 69
52891: ST_TO_ADDR
// if not tmp then
52892: LD_VAR 0 2
52896: NOT
52897: IFFALSE 52901
// exit ;
52899: GO 52950
// for i in tmp do
52901: LD_ADDR_VAR 0 1
52905: PUSH
52906: LD_VAR 0 2
52910: PUSH
52911: FOR_IN
52912: IFFALSE 52948
// begin if Crawls ( i ) then
52914: LD_VAR 0 1
52918: PPUSH
52919: CALL_OW 318
52923: IFFALSE 52934
// ComWalk ( i ) ;
52925: LD_VAR 0 1
52929: PPUSH
52930: CALL_OW 138
// SetClass ( i , 2 ) ;
52934: LD_VAR 0 1
52938: PPUSH
52939: LD_INT 2
52941: PPUSH
52942: CALL_OW 336
// end ;
52946: GO 52911
52948: POP
52949: POP
// end ;
52950: PPOPN 2
52952: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
52953: LD_EXP 37
52957: PUSH
52958: LD_EXP 90
52962: AND
52963: IFFALSE 53244
52965: GO 52967
52967: DISABLE
52968: LD_INT 0
52970: PPUSH
52971: PPUSH
52972: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
52973: LD_OWVAR 2
52977: PPUSH
52978: LD_INT 9
52980: PPUSH
52981: LD_INT 1
52983: PPUSH
52984: LD_INT 1
52986: PPUSH
52987: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
52991: LD_INT 9
52993: PPUSH
52994: LD_OWVAR 2
52998: PPUSH
52999: CALL_OW 343
// uc_side := 9 ;
53003: LD_ADDR_OWVAR 20
53007: PUSH
53008: LD_INT 9
53010: ST_TO_ADDR
// uc_nation := 2 ;
53011: LD_ADDR_OWVAR 21
53015: PUSH
53016: LD_INT 2
53018: ST_TO_ADDR
// hc_name := Dark Warrior ;
53019: LD_ADDR_OWVAR 26
53023: PUSH
53024: LD_STRING Dark Warrior
53026: ST_TO_ADDR
// hc_gallery :=  ;
53027: LD_ADDR_OWVAR 33
53031: PUSH
53032: LD_STRING 
53034: ST_TO_ADDR
// hc_noskilllimit := true ;
53035: LD_ADDR_OWVAR 76
53039: PUSH
53040: LD_INT 1
53042: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
53043: LD_ADDR_OWVAR 31
53047: PUSH
53048: LD_INT 30
53050: PUSH
53051: LD_INT 30
53053: PUSH
53054: LD_INT 30
53056: PUSH
53057: LD_INT 30
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: ST_TO_ADDR
// un := CreateHuman ;
53066: LD_ADDR_VAR 0 3
53070: PUSH
53071: CALL_OW 44
53075: ST_TO_ADDR
// hc_noskilllimit := false ;
53076: LD_ADDR_OWVAR 76
53080: PUSH
53081: LD_INT 0
53083: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53084: LD_VAR 0 3
53088: PPUSH
53089: LD_INT 1
53091: PPUSH
53092: CALL_OW 51
// p := 0 ;
53096: LD_ADDR_VAR 0 2
53100: PUSH
53101: LD_INT 0
53103: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
53104: LD_INT 35
53106: PPUSH
53107: CALL_OW 67
// p := p + 1 ;
53111: LD_ADDR_VAR 0 2
53115: PUSH
53116: LD_VAR 0 2
53120: PUSH
53121: LD_INT 1
53123: PLUS
53124: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
53125: LD_VAR 0 3
53129: PPUSH
53130: CALL_OW 256
53134: PUSH
53135: LD_INT 1000
53137: LESS
53138: IFFALSE 53152
// SetLives ( un , 1000 ) ;
53140: LD_VAR 0 3
53144: PPUSH
53145: LD_INT 1000
53147: PPUSH
53148: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
53152: LD_VAR 0 3
53156: PPUSH
53157: LD_INT 81
53159: PUSH
53160: LD_OWVAR 2
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 91
53171: PUSH
53172: LD_VAR 0 3
53176: PUSH
53177: LD_INT 30
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: LIST
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PPUSH
53189: CALL_OW 69
53193: PPUSH
53194: LD_VAR 0 3
53198: PPUSH
53199: CALL_OW 74
53203: PPUSH
53204: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
53208: LD_VAR 0 2
53212: PUSH
53213: LD_INT 60
53215: GREATER
53216: PUSH
53217: LD_VAR 0 3
53221: PPUSH
53222: CALL_OW 301
53226: OR
53227: IFFALSE 53104
// if un then
53229: LD_VAR 0 3
53233: IFFALSE 53244
// RemoveUnit ( un ) ;
53235: LD_VAR 0 3
53239: PPUSH
53240: CALL_OW 64
// end ;
53244: PPOPN 3
53246: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
53247: LD_INT 0
53249: PPUSH
// case cmd of 301 :
53250: LD_VAR 0 1
53254: PUSH
53255: LD_INT 301
53257: DOUBLE
53258: EQUAL
53259: IFTRUE 53263
53261: GO 53295
53263: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
53264: LD_VAR 0 6
53268: PPUSH
53269: LD_VAR 0 7
53273: PPUSH
53274: LD_VAR 0 8
53278: PPUSH
53279: LD_VAR 0 4
53283: PPUSH
53284: LD_VAR 0 5
53288: PPUSH
53289: CALL 54496 0 5
53293: GO 53416
53295: LD_INT 302
53297: DOUBLE
53298: EQUAL
53299: IFTRUE 53303
53301: GO 53340
53303: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
53304: LD_VAR 0 6
53308: PPUSH
53309: LD_VAR 0 7
53313: PPUSH
53314: LD_VAR 0 8
53318: PPUSH
53319: LD_VAR 0 9
53323: PPUSH
53324: LD_VAR 0 4
53328: PPUSH
53329: LD_VAR 0 5
53333: PPUSH
53334: CALL 54587 0 6
53338: GO 53416
53340: LD_INT 303
53342: DOUBLE
53343: EQUAL
53344: IFTRUE 53348
53346: GO 53385
53348: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
53349: LD_VAR 0 6
53353: PPUSH
53354: LD_VAR 0 7
53358: PPUSH
53359: LD_VAR 0 8
53363: PPUSH
53364: LD_VAR 0 9
53368: PPUSH
53369: LD_VAR 0 4
53373: PPUSH
53374: LD_VAR 0 5
53378: PPUSH
53379: CALL 53421 0 6
53383: GO 53416
53385: LD_INT 304
53387: DOUBLE
53388: EQUAL
53389: IFTRUE 53393
53391: GO 53415
53393: POP
// hHackTeleport ( unit , x , y ) ; end ;
53394: LD_VAR 0 2
53398: PPUSH
53399: LD_VAR 0 4
53403: PPUSH
53404: LD_VAR 0 5
53408: PPUSH
53409: CALL 55180 0 3
53413: GO 53416
53415: POP
// end ;
53416: LD_VAR 0 12
53420: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
53421: LD_INT 0
53423: PPUSH
53424: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
53425: LD_VAR 0 1
53429: PUSH
53430: LD_INT 1
53432: LESS
53433: PUSH
53434: LD_VAR 0 1
53438: PUSH
53439: LD_INT 3
53441: GREATER
53442: OR
53443: PUSH
53444: LD_VAR 0 5
53448: PPUSH
53449: LD_VAR 0 6
53453: PPUSH
53454: CALL_OW 428
53458: OR
53459: IFFALSE 53463
// exit ;
53461: GO 54183
// uc_side := your_side ;
53463: LD_ADDR_OWVAR 20
53467: PUSH
53468: LD_OWVAR 2
53472: ST_TO_ADDR
// uc_nation := nation ;
53473: LD_ADDR_OWVAR 21
53477: PUSH
53478: LD_VAR 0 1
53482: ST_TO_ADDR
// bc_level = 1 ;
53483: LD_ADDR_OWVAR 43
53487: PUSH
53488: LD_INT 1
53490: ST_TO_ADDR
// case btype of 1 :
53491: LD_VAR 0 2
53495: PUSH
53496: LD_INT 1
53498: DOUBLE
53499: EQUAL
53500: IFTRUE 53504
53502: GO 53515
53504: POP
// bc_type := b_depot ; 2 :
53505: LD_ADDR_OWVAR 42
53509: PUSH
53510: LD_INT 0
53512: ST_TO_ADDR
53513: GO 54127
53515: LD_INT 2
53517: DOUBLE
53518: EQUAL
53519: IFTRUE 53523
53521: GO 53534
53523: POP
// bc_type := b_warehouse ; 3 :
53524: LD_ADDR_OWVAR 42
53528: PUSH
53529: LD_INT 1
53531: ST_TO_ADDR
53532: GO 54127
53534: LD_INT 3
53536: DOUBLE
53537: EQUAL
53538: IFTRUE 53542
53540: GO 53553
53542: POP
// bc_type := b_lab ; 4 .. 9 :
53543: LD_ADDR_OWVAR 42
53547: PUSH
53548: LD_INT 6
53550: ST_TO_ADDR
53551: GO 54127
53553: LD_INT 4
53555: DOUBLE
53556: GREATEREQUAL
53557: IFFALSE 53565
53559: LD_INT 9
53561: DOUBLE
53562: LESSEQUAL
53563: IFTRUE 53567
53565: GO 53619
53567: POP
// begin bc_type := b_lab_half ;
53568: LD_ADDR_OWVAR 42
53572: PUSH
53573: LD_INT 7
53575: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
53576: LD_ADDR_OWVAR 44
53580: PUSH
53581: LD_INT 10
53583: PUSH
53584: LD_INT 11
53586: PUSH
53587: LD_INT 12
53589: PUSH
53590: LD_INT 15
53592: PUSH
53593: LD_INT 14
53595: PUSH
53596: LD_INT 13
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: PUSH
53607: LD_VAR 0 2
53611: PUSH
53612: LD_INT 3
53614: MINUS
53615: ARRAY
53616: ST_TO_ADDR
// end ; 10 .. 13 :
53617: GO 54127
53619: LD_INT 10
53621: DOUBLE
53622: GREATEREQUAL
53623: IFFALSE 53631
53625: LD_INT 13
53627: DOUBLE
53628: LESSEQUAL
53629: IFTRUE 53633
53631: GO 53710
53633: POP
// begin bc_type := b_lab_full ;
53634: LD_ADDR_OWVAR 42
53638: PUSH
53639: LD_INT 8
53641: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
53642: LD_ADDR_OWVAR 44
53646: PUSH
53647: LD_INT 10
53649: PUSH
53650: LD_INT 12
53652: PUSH
53653: LD_INT 14
53655: PUSH
53656: LD_INT 13
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: PUSH
53665: LD_VAR 0 2
53669: PUSH
53670: LD_INT 9
53672: MINUS
53673: ARRAY
53674: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
53675: LD_ADDR_OWVAR 45
53679: PUSH
53680: LD_INT 11
53682: PUSH
53683: LD_INT 15
53685: PUSH
53686: LD_INT 12
53688: PUSH
53689: LD_INT 15
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: PUSH
53698: LD_VAR 0 2
53702: PUSH
53703: LD_INT 9
53705: MINUS
53706: ARRAY
53707: ST_TO_ADDR
// end ; 14 :
53708: GO 54127
53710: LD_INT 14
53712: DOUBLE
53713: EQUAL
53714: IFTRUE 53718
53716: GO 53729
53718: POP
// bc_type := b_workshop ; 15 :
53719: LD_ADDR_OWVAR 42
53723: PUSH
53724: LD_INT 2
53726: ST_TO_ADDR
53727: GO 54127
53729: LD_INT 15
53731: DOUBLE
53732: EQUAL
53733: IFTRUE 53737
53735: GO 53748
53737: POP
// bc_type := b_factory ; 16 :
53738: LD_ADDR_OWVAR 42
53742: PUSH
53743: LD_INT 3
53745: ST_TO_ADDR
53746: GO 54127
53748: LD_INT 16
53750: DOUBLE
53751: EQUAL
53752: IFTRUE 53756
53754: GO 53767
53756: POP
// bc_type := b_ext_gun ; 17 :
53757: LD_ADDR_OWVAR 42
53761: PUSH
53762: LD_INT 17
53764: ST_TO_ADDR
53765: GO 54127
53767: LD_INT 17
53769: DOUBLE
53770: EQUAL
53771: IFTRUE 53775
53773: GO 53803
53775: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
53776: LD_ADDR_OWVAR 42
53780: PUSH
53781: LD_INT 19
53783: PUSH
53784: LD_INT 23
53786: PUSH
53787: LD_INT 19
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: LIST
53794: PUSH
53795: LD_VAR 0 1
53799: ARRAY
53800: ST_TO_ADDR
53801: GO 54127
53803: LD_INT 18
53805: DOUBLE
53806: EQUAL
53807: IFTRUE 53811
53809: GO 53822
53811: POP
// bc_type := b_ext_radar ; 19 :
53812: LD_ADDR_OWVAR 42
53816: PUSH
53817: LD_INT 20
53819: ST_TO_ADDR
53820: GO 54127
53822: LD_INT 19
53824: DOUBLE
53825: EQUAL
53826: IFTRUE 53830
53828: GO 53841
53830: POP
// bc_type := b_ext_radio ; 20 :
53831: LD_ADDR_OWVAR 42
53835: PUSH
53836: LD_INT 22
53838: ST_TO_ADDR
53839: GO 54127
53841: LD_INT 20
53843: DOUBLE
53844: EQUAL
53845: IFTRUE 53849
53847: GO 53860
53849: POP
// bc_type := b_ext_siberium ; 21 :
53850: LD_ADDR_OWVAR 42
53854: PUSH
53855: LD_INT 21
53857: ST_TO_ADDR
53858: GO 54127
53860: LD_INT 21
53862: DOUBLE
53863: EQUAL
53864: IFTRUE 53868
53866: GO 53879
53868: POP
// bc_type := b_ext_computer ; 22 :
53869: LD_ADDR_OWVAR 42
53873: PUSH
53874: LD_INT 24
53876: ST_TO_ADDR
53877: GO 54127
53879: LD_INT 22
53881: DOUBLE
53882: EQUAL
53883: IFTRUE 53887
53885: GO 53898
53887: POP
// bc_type := b_ext_track ; 23 :
53888: LD_ADDR_OWVAR 42
53892: PUSH
53893: LD_INT 16
53895: ST_TO_ADDR
53896: GO 54127
53898: LD_INT 23
53900: DOUBLE
53901: EQUAL
53902: IFTRUE 53906
53904: GO 53917
53906: POP
// bc_type := b_ext_laser ; 24 :
53907: LD_ADDR_OWVAR 42
53911: PUSH
53912: LD_INT 25
53914: ST_TO_ADDR
53915: GO 54127
53917: LD_INT 24
53919: DOUBLE
53920: EQUAL
53921: IFTRUE 53925
53923: GO 53936
53925: POP
// bc_type := b_control_tower ; 25 :
53926: LD_ADDR_OWVAR 42
53930: PUSH
53931: LD_INT 36
53933: ST_TO_ADDR
53934: GO 54127
53936: LD_INT 25
53938: DOUBLE
53939: EQUAL
53940: IFTRUE 53944
53942: GO 53955
53944: POP
// bc_type := b_breastwork ; 26 :
53945: LD_ADDR_OWVAR 42
53949: PUSH
53950: LD_INT 31
53952: ST_TO_ADDR
53953: GO 54127
53955: LD_INT 26
53957: DOUBLE
53958: EQUAL
53959: IFTRUE 53963
53961: GO 53974
53963: POP
// bc_type := b_bunker ; 27 :
53964: LD_ADDR_OWVAR 42
53968: PUSH
53969: LD_INT 32
53971: ST_TO_ADDR
53972: GO 54127
53974: LD_INT 27
53976: DOUBLE
53977: EQUAL
53978: IFTRUE 53982
53980: GO 53993
53982: POP
// bc_type := b_turret ; 28 :
53983: LD_ADDR_OWVAR 42
53987: PUSH
53988: LD_INT 33
53990: ST_TO_ADDR
53991: GO 54127
53993: LD_INT 28
53995: DOUBLE
53996: EQUAL
53997: IFTRUE 54001
53999: GO 54012
54001: POP
// bc_type := b_armoury ; 29 :
54002: LD_ADDR_OWVAR 42
54006: PUSH
54007: LD_INT 4
54009: ST_TO_ADDR
54010: GO 54127
54012: LD_INT 29
54014: DOUBLE
54015: EQUAL
54016: IFTRUE 54020
54018: GO 54031
54020: POP
// bc_type := b_barracks ; 30 :
54021: LD_ADDR_OWVAR 42
54025: PUSH
54026: LD_INT 5
54028: ST_TO_ADDR
54029: GO 54127
54031: LD_INT 30
54033: DOUBLE
54034: EQUAL
54035: IFTRUE 54039
54037: GO 54050
54039: POP
// bc_type := b_solar_power ; 31 :
54040: LD_ADDR_OWVAR 42
54044: PUSH
54045: LD_INT 27
54047: ST_TO_ADDR
54048: GO 54127
54050: LD_INT 31
54052: DOUBLE
54053: EQUAL
54054: IFTRUE 54058
54056: GO 54069
54058: POP
// bc_type := b_oil_power ; 32 :
54059: LD_ADDR_OWVAR 42
54063: PUSH
54064: LD_INT 26
54066: ST_TO_ADDR
54067: GO 54127
54069: LD_INT 32
54071: DOUBLE
54072: EQUAL
54073: IFTRUE 54077
54075: GO 54088
54077: POP
// bc_type := b_siberite_power ; 33 :
54078: LD_ADDR_OWVAR 42
54082: PUSH
54083: LD_INT 28
54085: ST_TO_ADDR
54086: GO 54127
54088: LD_INT 33
54090: DOUBLE
54091: EQUAL
54092: IFTRUE 54096
54094: GO 54107
54096: POP
// bc_type := b_oil_mine ; 34 :
54097: LD_ADDR_OWVAR 42
54101: PUSH
54102: LD_INT 29
54104: ST_TO_ADDR
54105: GO 54127
54107: LD_INT 34
54109: DOUBLE
54110: EQUAL
54111: IFTRUE 54115
54113: GO 54126
54115: POP
// bc_type := b_siberite_mine ; end ;
54116: LD_ADDR_OWVAR 42
54120: PUSH
54121: LD_INT 30
54123: ST_TO_ADDR
54124: GO 54127
54126: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
54127: LD_ADDR_VAR 0 8
54131: PUSH
54132: LD_VAR 0 5
54136: PPUSH
54137: LD_VAR 0 6
54141: PPUSH
54142: LD_VAR 0 3
54146: PPUSH
54147: CALL_OW 47
54151: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
54152: LD_OWVAR 42
54156: PUSH
54157: LD_INT 32
54159: PUSH
54160: LD_INT 33
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: IN
54167: IFFALSE 54183
// PlaceWeaponTurret ( b , weapon ) ;
54169: LD_VAR 0 8
54173: PPUSH
54174: LD_VAR 0 4
54178: PPUSH
54179: CALL_OW 431
// end ;
54183: LD_VAR 0 7
54187: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
54188: LD_INT 0
54190: PPUSH
54191: PPUSH
54192: PPUSH
54193: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54194: LD_ADDR_VAR 0 4
54198: PUSH
54199: LD_INT 22
54201: PUSH
54202: LD_OWVAR 2
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: LD_INT 30
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 30
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: LIST
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PPUSH
54243: CALL_OW 69
54247: ST_TO_ADDR
// if not tmp then
54248: LD_VAR 0 4
54252: NOT
54253: IFFALSE 54257
// exit ;
54255: GO 54316
// for i in tmp do
54257: LD_ADDR_VAR 0 2
54261: PUSH
54262: LD_VAR 0 4
54266: PUSH
54267: FOR_IN
54268: IFFALSE 54314
// for j = 1 to 3 do
54270: LD_ADDR_VAR 0 3
54274: PUSH
54275: DOUBLE
54276: LD_INT 1
54278: DEC
54279: ST_TO_ADDR
54280: LD_INT 3
54282: PUSH
54283: FOR_TO
54284: IFFALSE 54310
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
54286: LD_VAR 0 2
54290: PPUSH
54291: CALL_OW 274
54295: PPUSH
54296: LD_VAR 0 3
54300: PPUSH
54301: LD_INT 99999
54303: PPUSH
54304: CALL_OW 277
54308: GO 54283
54310: POP
54311: POP
54312: GO 54267
54314: POP
54315: POP
// end ;
54316: LD_VAR 0 1
54320: RET
// export function hHackSetLevel10 ; var i , j ; begin
54321: LD_INT 0
54323: PPUSH
54324: PPUSH
54325: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
54326: LD_ADDR_VAR 0 2
54330: PUSH
54331: LD_INT 21
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PPUSH
54341: CALL_OW 69
54345: PUSH
54346: FOR_IN
54347: IFFALSE 54399
// if IsSelected ( i ) then
54349: LD_VAR 0 2
54353: PPUSH
54354: CALL_OW 306
54358: IFFALSE 54397
// begin for j := 1 to 4 do
54360: LD_ADDR_VAR 0 3
54364: PUSH
54365: DOUBLE
54366: LD_INT 1
54368: DEC
54369: ST_TO_ADDR
54370: LD_INT 4
54372: PUSH
54373: FOR_TO
54374: IFFALSE 54395
// SetSkill ( i , j , 10 ) ;
54376: LD_VAR 0 2
54380: PPUSH
54381: LD_VAR 0 3
54385: PPUSH
54386: LD_INT 10
54388: PPUSH
54389: CALL_OW 237
54393: GO 54373
54395: POP
54396: POP
// end ;
54397: GO 54346
54399: POP
54400: POP
// end ;
54401: LD_VAR 0 1
54405: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
54406: LD_INT 0
54408: PPUSH
54409: PPUSH
54410: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
54411: LD_ADDR_VAR 0 2
54415: PUSH
54416: LD_INT 22
54418: PUSH
54419: LD_OWVAR 2
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 21
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PPUSH
54442: CALL_OW 69
54446: PUSH
54447: FOR_IN
54448: IFFALSE 54489
// begin for j := 1 to 4 do
54450: LD_ADDR_VAR 0 3
54454: PUSH
54455: DOUBLE
54456: LD_INT 1
54458: DEC
54459: ST_TO_ADDR
54460: LD_INT 4
54462: PUSH
54463: FOR_TO
54464: IFFALSE 54485
// SetSkill ( i , j , 10 ) ;
54466: LD_VAR 0 2
54470: PPUSH
54471: LD_VAR 0 3
54475: PPUSH
54476: LD_INT 10
54478: PPUSH
54479: CALL_OW 237
54483: GO 54463
54485: POP
54486: POP
// end ;
54487: GO 54447
54489: POP
54490: POP
// end ;
54491: LD_VAR 0 1
54495: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
54496: LD_INT 0
54498: PPUSH
// uc_side := your_side ;
54499: LD_ADDR_OWVAR 20
54503: PUSH
54504: LD_OWVAR 2
54508: ST_TO_ADDR
// uc_nation := nation ;
54509: LD_ADDR_OWVAR 21
54513: PUSH
54514: LD_VAR 0 1
54518: ST_TO_ADDR
// InitHc ;
54519: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
54523: LD_INT 0
54525: PPUSH
54526: LD_VAR 0 2
54530: PPUSH
54531: LD_VAR 0 3
54535: PPUSH
54536: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
54540: LD_VAR 0 4
54544: PPUSH
54545: LD_VAR 0 5
54549: PPUSH
54550: CALL_OW 428
54554: PUSH
54555: LD_INT 0
54557: EQUAL
54558: IFFALSE 54582
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
54560: CALL_OW 44
54564: PPUSH
54565: LD_VAR 0 4
54569: PPUSH
54570: LD_VAR 0 5
54574: PPUSH
54575: LD_INT 1
54577: PPUSH
54578: CALL_OW 48
// end ;
54582: LD_VAR 0 6
54586: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
54587: LD_INT 0
54589: PPUSH
54590: PPUSH
// uc_side := your_side ;
54591: LD_ADDR_OWVAR 20
54595: PUSH
54596: LD_OWVAR 2
54600: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
54601: LD_VAR 0 1
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: LD_INT 2
54611: PUSH
54612: LD_INT 3
54614: PUSH
54615: LD_INT 4
54617: PUSH
54618: LD_INT 5
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: IN
54628: IFFALSE 54640
// uc_nation := nation_american else
54630: LD_ADDR_OWVAR 21
54634: PUSH
54635: LD_INT 1
54637: ST_TO_ADDR
54638: GO 54683
// if chassis in [ 11 , 12 , 13 , 14 ] then
54640: LD_VAR 0 1
54644: PUSH
54645: LD_INT 11
54647: PUSH
54648: LD_INT 12
54650: PUSH
54651: LD_INT 13
54653: PUSH
54654: LD_INT 14
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: IN
54663: IFFALSE 54675
// uc_nation := nation_arabian else
54665: LD_ADDR_OWVAR 21
54669: PUSH
54670: LD_INT 2
54672: ST_TO_ADDR
54673: GO 54683
// uc_nation := nation_russian ;
54675: LD_ADDR_OWVAR 21
54679: PUSH
54680: LD_INT 3
54682: ST_TO_ADDR
// vc_chassis := chassis ;
54683: LD_ADDR_OWVAR 37
54687: PUSH
54688: LD_VAR 0 1
54692: ST_TO_ADDR
// vc_engine := engine ;
54693: LD_ADDR_OWVAR 39
54697: PUSH
54698: LD_VAR 0 2
54702: ST_TO_ADDR
// vc_control := control ;
54703: LD_ADDR_OWVAR 38
54707: PUSH
54708: LD_VAR 0 3
54712: ST_TO_ADDR
// vc_weapon := weapon ;
54713: LD_ADDR_OWVAR 40
54717: PUSH
54718: LD_VAR 0 4
54722: ST_TO_ADDR
// un := CreateVehicle ;
54723: LD_ADDR_VAR 0 8
54727: PUSH
54728: CALL_OW 45
54732: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
54733: LD_VAR 0 8
54737: PPUSH
54738: LD_INT 0
54740: PPUSH
54741: LD_INT 5
54743: PPUSH
54744: CALL_OW 12
54748: PPUSH
54749: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
54753: LD_VAR 0 8
54757: PPUSH
54758: LD_VAR 0 5
54762: PPUSH
54763: LD_VAR 0 6
54767: PPUSH
54768: LD_INT 1
54770: PPUSH
54771: CALL_OW 48
// end ;
54775: LD_VAR 0 7
54779: RET
// export hInvincible ; every 1 do
54780: GO 54782
54782: DISABLE
// hInvincible := [ ] ;
54783: LD_ADDR_EXP 91
54787: PUSH
54788: EMPTY
54789: ST_TO_ADDR
54790: END
// every 10 do var i ;
54791: GO 54793
54793: DISABLE
54794: LD_INT 0
54796: PPUSH
// begin enable ;
54797: ENABLE
// if not hInvincible then
54798: LD_EXP 91
54802: NOT
54803: IFFALSE 54807
// exit ;
54805: GO 54851
// for i in hInvincible do
54807: LD_ADDR_VAR 0 1
54811: PUSH
54812: LD_EXP 91
54816: PUSH
54817: FOR_IN
54818: IFFALSE 54849
// if GetLives ( i ) < 1000 then
54820: LD_VAR 0 1
54824: PPUSH
54825: CALL_OW 256
54829: PUSH
54830: LD_INT 1000
54832: LESS
54833: IFFALSE 54847
// SetLives ( i , 1000 ) ;
54835: LD_VAR 0 1
54839: PPUSH
54840: LD_INT 1000
54842: PPUSH
54843: CALL_OW 234
54847: GO 54817
54849: POP
54850: POP
// end ;
54851: PPOPN 1
54853: END
// export function hHackInvincible ; var i ; begin
54854: LD_INT 0
54856: PPUSH
54857: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
54858: LD_ADDR_VAR 0 2
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: LD_INT 21
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 21
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: LIST
54890: PPUSH
54891: CALL_OW 69
54895: PUSH
54896: FOR_IN
54897: IFFALSE 54958
// if IsSelected ( i ) then
54899: LD_VAR 0 2
54903: PPUSH
54904: CALL_OW 306
54908: IFFALSE 54956
// begin if i in hInvincible then
54910: LD_VAR 0 2
54914: PUSH
54915: LD_EXP 91
54919: IN
54920: IFFALSE 54940
// hInvincible := hInvincible diff i else
54922: LD_ADDR_EXP 91
54926: PUSH
54927: LD_EXP 91
54931: PUSH
54932: LD_VAR 0 2
54936: DIFF
54937: ST_TO_ADDR
54938: GO 54956
// hInvincible := hInvincible union i ;
54940: LD_ADDR_EXP 91
54944: PUSH
54945: LD_EXP 91
54949: PUSH
54950: LD_VAR 0 2
54954: UNION
54955: ST_TO_ADDR
// end ;
54956: GO 54896
54958: POP
54959: POP
// end ;
54960: LD_VAR 0 1
54964: RET
// export function hHackInvisible ; var i , j ; begin
54965: LD_INT 0
54967: PPUSH
54968: PPUSH
54969: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
54970: LD_ADDR_VAR 0 2
54974: PUSH
54975: LD_INT 21
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PPUSH
54985: CALL_OW 69
54989: PUSH
54990: FOR_IN
54991: IFFALSE 55015
// if IsSelected ( i ) then
54993: LD_VAR 0 2
54997: PPUSH
54998: CALL_OW 306
55002: IFFALSE 55013
// ComForceInvisible ( i ) ;
55004: LD_VAR 0 2
55008: PPUSH
55009: CALL_OW 496
55013: GO 54990
55015: POP
55016: POP
// end ;
55017: LD_VAR 0 1
55021: RET
// export function hHackChangeYourSide ; begin
55022: LD_INT 0
55024: PPUSH
// if your_side = 8 then
55025: LD_OWVAR 2
55029: PUSH
55030: LD_INT 8
55032: EQUAL
55033: IFFALSE 55045
// your_side := 0 else
55035: LD_ADDR_OWVAR 2
55039: PUSH
55040: LD_INT 0
55042: ST_TO_ADDR
55043: GO 55059
// your_side := your_side + 1 ;
55045: LD_ADDR_OWVAR 2
55049: PUSH
55050: LD_OWVAR 2
55054: PUSH
55055: LD_INT 1
55057: PLUS
55058: ST_TO_ADDR
// end ;
55059: LD_VAR 0 1
55063: RET
// export function hHackChangeUnitSide ; var i , j ; begin
55064: LD_INT 0
55066: PPUSH
55067: PPUSH
55068: PPUSH
// for i in all_units do
55069: LD_ADDR_VAR 0 2
55073: PUSH
55074: LD_OWVAR 3
55078: PUSH
55079: FOR_IN
55080: IFFALSE 55158
// if IsSelected ( i ) then
55082: LD_VAR 0 2
55086: PPUSH
55087: CALL_OW 306
55091: IFFALSE 55156
// begin j := GetSide ( i ) ;
55093: LD_ADDR_VAR 0 3
55097: PUSH
55098: LD_VAR 0 2
55102: PPUSH
55103: CALL_OW 255
55107: ST_TO_ADDR
// if j = 8 then
55108: LD_VAR 0 3
55112: PUSH
55113: LD_INT 8
55115: EQUAL
55116: IFFALSE 55128
// j := 0 else
55118: LD_ADDR_VAR 0 3
55122: PUSH
55123: LD_INT 0
55125: ST_TO_ADDR
55126: GO 55142
// j := j + 1 ;
55128: LD_ADDR_VAR 0 3
55132: PUSH
55133: LD_VAR 0 3
55137: PUSH
55138: LD_INT 1
55140: PLUS
55141: ST_TO_ADDR
// SetSide ( i , j ) ;
55142: LD_VAR 0 2
55146: PPUSH
55147: LD_VAR 0 3
55151: PPUSH
55152: CALL_OW 235
// end ;
55156: GO 55079
55158: POP
55159: POP
// end ;
55160: LD_VAR 0 1
55164: RET
// export function hHackFog ; begin
55165: LD_INT 0
55167: PPUSH
// FogOff ( true ) ;
55168: LD_INT 1
55170: PPUSH
55171: CALL_OW 344
// end ;
55175: LD_VAR 0 1
55179: RET
// export function hHackTeleport ( unit , x , y ) ; begin
55180: LD_INT 0
55182: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
55183: LD_VAR 0 1
55187: PPUSH
55188: LD_VAR 0 2
55192: PPUSH
55193: LD_VAR 0 3
55197: PPUSH
55198: LD_INT 1
55200: PPUSH
55201: LD_INT 1
55203: PPUSH
55204: CALL_OW 483
// CenterOnXY ( x , y ) ;
55208: LD_VAR 0 2
55212: PPUSH
55213: LD_VAR 0 3
55217: PPUSH
55218: CALL_OW 84
// end ; end_of_file
55222: LD_VAR 0 4
55226: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55227: LD_VAR 0 1
55231: PUSH
55232: LD_INT 200
55234: DOUBLE
55235: GREATEREQUAL
55236: IFFALSE 55244
55238: LD_INT 299
55240: DOUBLE
55241: LESSEQUAL
55242: IFTRUE 55246
55244: GO 55278
55246: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55247: LD_VAR 0 1
55251: PPUSH
55252: LD_VAR 0 2
55256: PPUSH
55257: LD_VAR 0 3
55261: PPUSH
55262: LD_VAR 0 4
55266: PPUSH
55267: LD_VAR 0 5
55271: PPUSH
55272: CALL 55522 0 5
55276: GO 55355
55278: LD_INT 300
55280: DOUBLE
55281: GREATEREQUAL
55282: IFFALSE 55290
55284: LD_INT 399
55286: DOUBLE
55287: LESSEQUAL
55288: IFTRUE 55292
55290: GO 55354
55292: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55293: LD_VAR 0 1
55297: PPUSH
55298: LD_VAR 0 2
55302: PPUSH
55303: LD_VAR 0 3
55307: PPUSH
55308: LD_VAR 0 4
55312: PPUSH
55313: LD_VAR 0 5
55317: PPUSH
55318: LD_VAR 0 6
55322: PPUSH
55323: LD_VAR 0 7
55327: PPUSH
55328: LD_VAR 0 8
55332: PPUSH
55333: LD_VAR 0 9
55337: PPUSH
55338: LD_VAR 0 10
55342: PPUSH
55343: LD_VAR 0 11
55347: PPUSH
55348: CALL 53247 0 11
55352: GO 55355
55354: POP
// end ;
55355: PPOPN 11
55357: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55358: LD_VAR 0 1
55362: PPUSH
55363: LD_VAR 0 2
55367: PPUSH
55368: LD_VAR 0 3
55372: PPUSH
55373: LD_VAR 0 4
55377: PPUSH
55378: LD_VAR 0 5
55382: PPUSH
55383: CALL 55504 0 5
// end ; end_of_file
55387: PPOPN 5
55389: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
55390: LD_INT 0
55392: PPUSH
55393: PPUSH
55394: PPUSH
55395: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
55396: LD_VAR 0 1
55400: PPUSH
55401: CALL_OW 264
55405: PUSH
55406: LD_EXP 23
55410: EQUAL
55411: IFFALSE 55483
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55413: LD_INT 68
55415: PPUSH
55416: LD_VAR 0 1
55420: PPUSH
55421: CALL_OW 255
55425: PPUSH
55426: CALL_OW 321
55430: PUSH
55431: LD_INT 2
55433: EQUAL
55434: IFFALSE 55446
// eff := 70 else
55436: LD_ADDR_VAR 0 4
55440: PUSH
55441: LD_INT 70
55443: ST_TO_ADDR
55444: GO 55454
// eff := 30 ;
55446: LD_ADDR_VAR 0 4
55450: PUSH
55451: LD_INT 30
55453: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55454: LD_VAR 0 1
55458: PPUSH
55459: CALL_OW 250
55463: PPUSH
55464: LD_VAR 0 1
55468: PPUSH
55469: CALL_OW 251
55473: PPUSH
55474: LD_VAR 0 4
55478: PPUSH
55479: CALL_OW 495
// end ; end ;
55483: LD_VAR 0 2
55487: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55488: LD_INT 0
55490: PPUSH
// end ;
55491: LD_VAR 0 4
55495: RET
// export function SOS_Command ( cmd ) ; begin
55496: LD_INT 0
55498: PPUSH
// end ;
55499: LD_VAR 0 2
55503: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55504: LD_INT 0
55506: PPUSH
// if cmd = 121 then
55507: LD_VAR 0 1
55511: PUSH
55512: LD_INT 121
55514: EQUAL
55515: IFFALSE 55517
// end ;
55517: LD_VAR 0 6
55521: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55522: LD_INT 0
55524: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55525: LD_VAR 0 1
55529: PUSH
55530: LD_INT 250
55532: EQUAL
55533: PUSH
55534: LD_VAR 0 2
55538: PPUSH
55539: CALL_OW 264
55543: PUSH
55544: LD_EXP 26
55548: EQUAL
55549: AND
55550: IFFALSE 55571
// MinerPlaceMine ( unit , x , y ) ;
55552: LD_VAR 0 2
55556: PPUSH
55557: LD_VAR 0 4
55561: PPUSH
55562: LD_VAR 0 5
55566: PPUSH
55567: CALL 57920 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55571: LD_VAR 0 1
55575: PUSH
55576: LD_INT 251
55578: EQUAL
55579: PUSH
55580: LD_VAR 0 2
55584: PPUSH
55585: CALL_OW 264
55589: PUSH
55590: LD_EXP 26
55594: EQUAL
55595: AND
55596: IFFALSE 55617
// MinerDetonateMine ( unit , x , y ) ;
55598: LD_VAR 0 2
55602: PPUSH
55603: LD_VAR 0 4
55607: PPUSH
55608: LD_VAR 0 5
55612: PPUSH
55613: CALL 58197 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55617: LD_VAR 0 1
55621: PUSH
55622: LD_INT 252
55624: EQUAL
55625: PUSH
55626: LD_VAR 0 2
55630: PPUSH
55631: CALL_OW 264
55635: PUSH
55636: LD_EXP 26
55640: EQUAL
55641: AND
55642: IFFALSE 55663
// MinerCreateMinefield ( unit , x , y ) ;
55644: LD_VAR 0 2
55648: PPUSH
55649: LD_VAR 0 4
55653: PPUSH
55654: LD_VAR 0 5
55658: PPUSH
55659: CALL 58614 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55663: LD_VAR 0 1
55667: PUSH
55668: LD_INT 253
55670: EQUAL
55671: PUSH
55672: LD_VAR 0 2
55676: PPUSH
55677: CALL_OW 257
55681: PUSH
55682: LD_INT 5
55684: EQUAL
55685: AND
55686: IFFALSE 55707
// ComBinocular ( unit , x , y ) ;
55688: LD_VAR 0 2
55692: PPUSH
55693: LD_VAR 0 4
55697: PPUSH
55698: LD_VAR 0 5
55702: PPUSH
55703: CALL 58985 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
55707: LD_VAR 0 1
55711: PUSH
55712: LD_INT 254
55714: EQUAL
55715: PUSH
55716: LD_VAR 0 2
55720: PPUSH
55721: CALL_OW 264
55725: PUSH
55726: LD_EXP 21
55730: EQUAL
55731: AND
55732: PUSH
55733: LD_VAR 0 3
55737: PPUSH
55738: CALL_OW 263
55742: PUSH
55743: LD_INT 3
55745: EQUAL
55746: AND
55747: IFFALSE 55763
// HackDestroyVehicle ( unit , selectedUnit ) ;
55749: LD_VAR 0 2
55753: PPUSH
55754: LD_VAR 0 3
55758: PPUSH
55759: CALL 57280 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
55763: LD_VAR 0 1
55767: PUSH
55768: LD_INT 255
55770: EQUAL
55771: PUSH
55772: LD_VAR 0 2
55776: PPUSH
55777: CALL_OW 264
55781: PUSH
55782: LD_INT 14
55784: PUSH
55785: LD_INT 53
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: IN
55792: AND
55793: PUSH
55794: LD_VAR 0 4
55798: PPUSH
55799: LD_VAR 0 5
55803: PPUSH
55804: CALL_OW 488
55808: AND
55809: IFFALSE 55833
// CutTreeXYR ( unit , x , y , 12 ) ;
55811: LD_VAR 0 2
55815: PPUSH
55816: LD_VAR 0 4
55820: PPUSH
55821: LD_VAR 0 5
55825: PPUSH
55826: LD_INT 12
55828: PPUSH
55829: CALL 55846 0 4
// end ;
55833: LD_VAR 0 6
55837: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
55838: LD_INT 0
55840: PPUSH
// end ;
55841: LD_VAR 0 4
55845: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55846: LD_INT 0
55848: PPUSH
55849: PPUSH
55850: PPUSH
55851: PPUSH
55852: PPUSH
55853: PPUSH
55854: PPUSH
55855: PPUSH
55856: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
55857: LD_VAR 0 1
55861: NOT
55862: PUSH
55863: LD_VAR 0 2
55867: PPUSH
55868: LD_VAR 0 3
55872: PPUSH
55873: CALL_OW 488
55877: NOT
55878: OR
55879: PUSH
55880: LD_VAR 0 4
55884: NOT
55885: OR
55886: IFFALSE 55890
// exit ;
55888: GO 56230
// list := [ ] ;
55890: LD_ADDR_VAR 0 13
55894: PUSH
55895: EMPTY
55896: ST_TO_ADDR
// if x - r < 0 then
55897: LD_VAR 0 2
55901: PUSH
55902: LD_VAR 0 4
55906: MINUS
55907: PUSH
55908: LD_INT 0
55910: LESS
55911: IFFALSE 55923
// min_x := 0 else
55913: LD_ADDR_VAR 0 7
55917: PUSH
55918: LD_INT 0
55920: ST_TO_ADDR
55921: GO 55939
// min_x := x - r ;
55923: LD_ADDR_VAR 0 7
55927: PUSH
55928: LD_VAR 0 2
55932: PUSH
55933: LD_VAR 0 4
55937: MINUS
55938: ST_TO_ADDR
// if y - r < 0 then
55939: LD_VAR 0 3
55943: PUSH
55944: LD_VAR 0 4
55948: MINUS
55949: PUSH
55950: LD_INT 0
55952: LESS
55953: IFFALSE 55965
// min_y := 0 else
55955: LD_ADDR_VAR 0 8
55959: PUSH
55960: LD_INT 0
55962: ST_TO_ADDR
55963: GO 55981
// min_y := y - r ;
55965: LD_ADDR_VAR 0 8
55969: PUSH
55970: LD_VAR 0 3
55974: PUSH
55975: LD_VAR 0 4
55979: MINUS
55980: ST_TO_ADDR
// max_x := x + r ;
55981: LD_ADDR_VAR 0 9
55985: PUSH
55986: LD_VAR 0 2
55990: PUSH
55991: LD_VAR 0 4
55995: PLUS
55996: ST_TO_ADDR
// max_y := y + r ;
55997: LD_ADDR_VAR 0 10
56001: PUSH
56002: LD_VAR 0 3
56006: PUSH
56007: LD_VAR 0 4
56011: PLUS
56012: ST_TO_ADDR
// for _x = min_x to max_x do
56013: LD_ADDR_VAR 0 11
56017: PUSH
56018: DOUBLE
56019: LD_VAR 0 7
56023: DEC
56024: ST_TO_ADDR
56025: LD_VAR 0 9
56029: PUSH
56030: FOR_TO
56031: IFFALSE 56148
// for _y = min_y to max_y do
56033: LD_ADDR_VAR 0 12
56037: PUSH
56038: DOUBLE
56039: LD_VAR 0 8
56043: DEC
56044: ST_TO_ADDR
56045: LD_VAR 0 10
56049: PUSH
56050: FOR_TO
56051: IFFALSE 56144
// begin if not ValidHex ( _x , _y ) then
56053: LD_VAR 0 11
56057: PPUSH
56058: LD_VAR 0 12
56062: PPUSH
56063: CALL_OW 488
56067: NOT
56068: IFFALSE 56072
// continue ;
56070: GO 56050
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56072: LD_VAR 0 11
56076: PPUSH
56077: LD_VAR 0 12
56081: PPUSH
56082: CALL_OW 351
56086: PUSH
56087: LD_VAR 0 11
56091: PPUSH
56092: LD_VAR 0 12
56096: PPUSH
56097: CALL_OW 554
56101: AND
56102: IFFALSE 56142
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56104: LD_ADDR_VAR 0 13
56108: PUSH
56109: LD_VAR 0 13
56113: PPUSH
56114: LD_VAR 0 13
56118: PUSH
56119: LD_INT 1
56121: PLUS
56122: PPUSH
56123: LD_VAR 0 11
56127: PUSH
56128: LD_VAR 0 12
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PPUSH
56137: CALL_OW 2
56141: ST_TO_ADDR
// end ;
56142: GO 56050
56144: POP
56145: POP
56146: GO 56030
56148: POP
56149: POP
// if not list then
56150: LD_VAR 0 13
56154: NOT
56155: IFFALSE 56159
// exit ;
56157: GO 56230
// for i in list do
56159: LD_ADDR_VAR 0 6
56163: PUSH
56164: LD_VAR 0 13
56168: PUSH
56169: FOR_IN
56170: IFFALSE 56228
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56172: LD_VAR 0 1
56176: PPUSH
56177: LD_STRING M
56179: PUSH
56180: LD_VAR 0 6
56184: PUSH
56185: LD_INT 1
56187: ARRAY
56188: PUSH
56189: LD_VAR 0 6
56193: PUSH
56194: LD_INT 2
56196: ARRAY
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: LD_INT 0
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: PUSH
56219: EMPTY
56220: LIST
56221: PPUSH
56222: CALL_OW 447
56226: GO 56169
56228: POP
56229: POP
// end ;
56230: LD_VAR 0 5
56234: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
56235: LD_EXP 94
56239: NOT
56240: IFFALSE 56290
56242: GO 56244
56244: DISABLE
// begin initHack := true ;
56245: LD_ADDR_EXP 94
56249: PUSH
56250: LD_INT 1
56252: ST_TO_ADDR
// hackTanks := [ ] ;
56253: LD_ADDR_EXP 95
56257: PUSH
56258: EMPTY
56259: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
56260: LD_ADDR_EXP 96
56264: PUSH
56265: EMPTY
56266: ST_TO_ADDR
// hackLimit := 3 ;
56267: LD_ADDR_EXP 97
56271: PUSH
56272: LD_INT 3
56274: ST_TO_ADDR
// hackDist := 12 ;
56275: LD_ADDR_EXP 98
56279: PUSH
56280: LD_INT 12
56282: ST_TO_ADDR
// hackCounter := [ ] ;
56283: LD_ADDR_EXP 99
56287: PUSH
56288: EMPTY
56289: ST_TO_ADDR
// end ;
56290: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
56291: LD_EXP 94
56295: PUSH
56296: LD_INT 34
56298: PUSH
56299: LD_EXP 21
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PPUSH
56308: CALL_OW 69
56312: AND
56313: IFFALSE 56568
56315: GO 56317
56317: DISABLE
56318: LD_INT 0
56320: PPUSH
56321: PPUSH
// begin enable ;
56322: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56323: LD_ADDR_VAR 0 1
56327: PUSH
56328: LD_INT 34
56330: PUSH
56331: LD_EXP 21
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PPUSH
56340: CALL_OW 69
56344: PUSH
56345: FOR_IN
56346: IFFALSE 56566
// begin if not i in hackTanks then
56348: LD_VAR 0 1
56352: PUSH
56353: LD_EXP 95
56357: IN
56358: NOT
56359: IFFALSE 56442
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56361: LD_ADDR_EXP 95
56365: PUSH
56366: LD_EXP 95
56370: PPUSH
56371: LD_EXP 95
56375: PUSH
56376: LD_INT 1
56378: PLUS
56379: PPUSH
56380: LD_VAR 0 1
56384: PPUSH
56385: CALL_OW 1
56389: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56390: LD_ADDR_EXP 96
56394: PUSH
56395: LD_EXP 96
56399: PPUSH
56400: LD_EXP 96
56404: PUSH
56405: LD_INT 1
56407: PLUS
56408: PPUSH
56409: EMPTY
56410: PPUSH
56411: CALL_OW 1
56415: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56416: LD_ADDR_EXP 99
56420: PUSH
56421: LD_EXP 99
56425: PPUSH
56426: LD_EXP 99
56430: PUSH
56431: LD_INT 1
56433: PLUS
56434: PPUSH
56435: EMPTY
56436: PPUSH
56437: CALL_OW 1
56441: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56442: LD_VAR 0 1
56446: PPUSH
56447: CALL_OW 302
56451: NOT
56452: IFFALSE 56465
// begin HackUnlinkAll ( i ) ;
56454: LD_VAR 0 1
56458: PPUSH
56459: CALL 56571 0 1
// continue ;
56463: GO 56345
// end ; HackCheckCapturedStatus ( i ) ;
56465: LD_VAR 0 1
56469: PPUSH
56470: CALL 57014 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56474: LD_ADDR_VAR 0 2
56478: PUSH
56479: LD_INT 81
56481: PUSH
56482: LD_VAR 0 1
56486: PPUSH
56487: CALL_OW 255
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 33
56498: PUSH
56499: LD_INT 3
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 91
56508: PUSH
56509: LD_VAR 0 1
56513: PUSH
56514: LD_EXP 98
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 50
56526: PUSH
56527: EMPTY
56528: LIST
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: PPUSH
56536: CALL_OW 69
56540: ST_TO_ADDR
// if not tmp then
56541: LD_VAR 0 2
56545: NOT
56546: IFFALSE 56550
// continue ;
56548: GO 56345
// HackLink ( i , tmp ) ;
56550: LD_VAR 0 1
56554: PPUSH
56555: LD_VAR 0 2
56559: PPUSH
56560: CALL 56707 0 2
// end ;
56564: GO 56345
56566: POP
56567: POP
// end ;
56568: PPOPN 2
56570: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56571: LD_INT 0
56573: PPUSH
56574: PPUSH
56575: PPUSH
// if not hack in hackTanks then
56576: LD_VAR 0 1
56580: PUSH
56581: LD_EXP 95
56585: IN
56586: NOT
56587: IFFALSE 56591
// exit ;
56589: GO 56702
// index := GetElementIndex ( hackTanks , hack ) ;
56591: LD_ADDR_VAR 0 4
56595: PUSH
56596: LD_EXP 95
56600: PPUSH
56601: LD_VAR 0 1
56605: PPUSH
56606: CALL 8970 0 2
56610: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56611: LD_EXP 96
56615: PUSH
56616: LD_VAR 0 4
56620: ARRAY
56621: IFFALSE 56702
// begin for i in hackTanksCaptured [ index ] do
56623: LD_ADDR_VAR 0 3
56627: PUSH
56628: LD_EXP 96
56632: PUSH
56633: LD_VAR 0 4
56637: ARRAY
56638: PUSH
56639: FOR_IN
56640: IFFALSE 56666
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56642: LD_VAR 0 3
56646: PUSH
56647: LD_INT 1
56649: ARRAY
56650: PPUSH
56651: LD_VAR 0 3
56655: PUSH
56656: LD_INT 2
56658: ARRAY
56659: PPUSH
56660: CALL_OW 235
56664: GO 56639
56666: POP
56667: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56668: LD_ADDR_EXP 96
56672: PUSH
56673: LD_EXP 96
56677: PPUSH
56678: LD_VAR 0 4
56682: PPUSH
56683: EMPTY
56684: PPUSH
56685: CALL_OW 1
56689: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56690: LD_VAR 0 1
56694: PPUSH
56695: LD_INT 0
56697: PPUSH
56698: CALL_OW 505
// end ; end ;
56702: LD_VAR 0 2
56706: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56707: LD_INT 0
56709: PPUSH
56710: PPUSH
56711: PPUSH
// if not hack in hackTanks or not vehicles then
56712: LD_VAR 0 1
56716: PUSH
56717: LD_EXP 95
56721: IN
56722: NOT
56723: PUSH
56724: LD_VAR 0 2
56728: NOT
56729: OR
56730: IFFALSE 56734
// exit ;
56732: GO 57009
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56734: LD_ADDR_VAR 0 2
56738: PUSH
56739: LD_VAR 0 1
56743: PPUSH
56744: LD_VAR 0 2
56748: PPUSH
56749: LD_INT 1
56751: PPUSH
56752: LD_INT 1
56754: PPUSH
56755: CALL 9620 0 4
56759: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56760: LD_ADDR_VAR 0 5
56764: PUSH
56765: LD_EXP 95
56769: PPUSH
56770: LD_VAR 0 1
56774: PPUSH
56775: CALL 8970 0 2
56779: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56780: LD_EXP 96
56784: PUSH
56785: LD_VAR 0 5
56789: ARRAY
56790: PUSH
56791: LD_EXP 97
56795: LESS
56796: IFFALSE 56985
// begin for i := 1 to vehicles do
56798: LD_ADDR_VAR 0 4
56802: PUSH
56803: DOUBLE
56804: LD_INT 1
56806: DEC
56807: ST_TO_ADDR
56808: LD_VAR 0 2
56812: PUSH
56813: FOR_TO
56814: IFFALSE 56983
// begin if hackTanksCaptured [ index ] = hackLimit then
56816: LD_EXP 96
56820: PUSH
56821: LD_VAR 0 5
56825: ARRAY
56826: PUSH
56827: LD_EXP 97
56831: EQUAL
56832: IFFALSE 56836
// break ;
56834: GO 56983
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56836: LD_ADDR_EXP 99
56840: PUSH
56841: LD_EXP 99
56845: PPUSH
56846: LD_VAR 0 5
56850: PPUSH
56851: LD_EXP 99
56855: PUSH
56856: LD_VAR 0 5
56860: ARRAY
56861: PUSH
56862: LD_INT 1
56864: PLUS
56865: PPUSH
56866: CALL_OW 1
56870: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56871: LD_ADDR_EXP 96
56875: PUSH
56876: LD_EXP 96
56880: PPUSH
56881: LD_VAR 0 5
56885: PUSH
56886: LD_EXP 96
56890: PUSH
56891: LD_VAR 0 5
56895: ARRAY
56896: PUSH
56897: LD_INT 1
56899: PLUS
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PPUSH
56905: LD_VAR 0 2
56909: PUSH
56910: LD_VAR 0 4
56914: ARRAY
56915: PUSH
56916: LD_VAR 0 2
56920: PUSH
56921: LD_VAR 0 4
56925: ARRAY
56926: PPUSH
56927: CALL_OW 255
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PPUSH
56936: CALL 9185 0 3
56940: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56941: LD_VAR 0 2
56945: PUSH
56946: LD_VAR 0 4
56950: ARRAY
56951: PPUSH
56952: LD_VAR 0 1
56956: PPUSH
56957: CALL_OW 255
56961: PPUSH
56962: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56966: LD_VAR 0 2
56970: PUSH
56971: LD_VAR 0 4
56975: ARRAY
56976: PPUSH
56977: CALL_OW 141
// end ;
56981: GO 56813
56983: POP
56984: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56985: LD_VAR 0 1
56989: PPUSH
56990: LD_EXP 96
56994: PUSH
56995: LD_VAR 0 5
56999: ARRAY
57000: PUSH
57001: LD_INT 0
57003: PLUS
57004: PPUSH
57005: CALL_OW 505
// end ;
57009: LD_VAR 0 3
57013: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
57014: LD_INT 0
57016: PPUSH
57017: PPUSH
57018: PPUSH
57019: PPUSH
// if not hack in hackTanks then
57020: LD_VAR 0 1
57024: PUSH
57025: LD_EXP 95
57029: IN
57030: NOT
57031: IFFALSE 57035
// exit ;
57033: GO 57275
// index := GetElementIndex ( hackTanks , hack ) ;
57035: LD_ADDR_VAR 0 4
57039: PUSH
57040: LD_EXP 95
57044: PPUSH
57045: LD_VAR 0 1
57049: PPUSH
57050: CALL 8970 0 2
57054: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
57055: LD_ADDR_VAR 0 3
57059: PUSH
57060: DOUBLE
57061: LD_EXP 96
57065: PUSH
57066: LD_VAR 0 4
57070: ARRAY
57071: INC
57072: ST_TO_ADDR
57073: LD_INT 1
57075: PUSH
57076: FOR_DOWNTO
57077: IFFALSE 57249
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
57079: LD_ADDR_VAR 0 5
57083: PUSH
57084: LD_EXP 96
57088: PUSH
57089: LD_VAR 0 4
57093: ARRAY
57094: PUSH
57095: LD_VAR 0 3
57099: ARRAY
57100: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
57101: LD_VAR 0 5
57105: PUSH
57106: LD_INT 1
57108: ARRAY
57109: PPUSH
57110: CALL_OW 302
57114: NOT
57115: PUSH
57116: LD_VAR 0 5
57120: PUSH
57121: LD_INT 1
57123: ARRAY
57124: PPUSH
57125: CALL_OW 255
57129: PUSH
57130: LD_VAR 0 1
57134: PPUSH
57135: CALL_OW 255
57139: NONEQUAL
57140: OR
57141: IFFALSE 57247
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
57143: LD_VAR 0 5
57147: PUSH
57148: LD_INT 1
57150: ARRAY
57151: PPUSH
57152: CALL_OW 305
57156: PUSH
57157: LD_VAR 0 5
57161: PUSH
57162: LD_INT 1
57164: ARRAY
57165: PPUSH
57166: CALL_OW 255
57170: PUSH
57171: LD_VAR 0 1
57175: PPUSH
57176: CALL_OW 255
57180: EQUAL
57181: AND
57182: IFFALSE 57206
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
57184: LD_VAR 0 5
57188: PUSH
57189: LD_INT 1
57191: ARRAY
57192: PPUSH
57193: LD_VAR 0 5
57197: PUSH
57198: LD_INT 2
57200: ARRAY
57201: PPUSH
57202: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
57206: LD_ADDR_EXP 96
57210: PUSH
57211: LD_EXP 96
57215: PPUSH
57216: LD_VAR 0 4
57220: PPUSH
57221: LD_EXP 96
57225: PUSH
57226: LD_VAR 0 4
57230: ARRAY
57231: PPUSH
57232: LD_VAR 0 3
57236: PPUSH
57237: CALL_OW 3
57241: PPUSH
57242: CALL_OW 1
57246: ST_TO_ADDR
// end ; end ;
57247: GO 57076
57249: POP
57250: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57251: LD_VAR 0 1
57255: PPUSH
57256: LD_EXP 96
57260: PUSH
57261: LD_VAR 0 4
57265: ARRAY
57266: PUSH
57267: LD_INT 0
57269: PLUS
57270: PPUSH
57271: CALL_OW 505
// end ;
57275: LD_VAR 0 2
57279: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
57280: LD_INT 0
57282: PPUSH
57283: PPUSH
57284: PPUSH
57285: PPUSH
// if not hack in hackTanks then
57286: LD_VAR 0 1
57290: PUSH
57291: LD_EXP 95
57295: IN
57296: NOT
57297: IFFALSE 57301
// exit ;
57299: GO 57386
// index := GetElementIndex ( hackTanks , hack ) ;
57301: LD_ADDR_VAR 0 5
57305: PUSH
57306: LD_EXP 95
57310: PPUSH
57311: LD_VAR 0 1
57315: PPUSH
57316: CALL 8970 0 2
57320: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57321: LD_ADDR_VAR 0 4
57325: PUSH
57326: DOUBLE
57327: LD_INT 1
57329: DEC
57330: ST_TO_ADDR
57331: LD_EXP 96
57335: PUSH
57336: LD_VAR 0 5
57340: ARRAY
57341: PUSH
57342: FOR_TO
57343: IFFALSE 57384
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57345: LD_EXP 96
57349: PUSH
57350: LD_VAR 0 5
57354: ARRAY
57355: PUSH
57356: LD_VAR 0 4
57360: ARRAY
57361: PUSH
57362: LD_INT 1
57364: ARRAY
57365: PUSH
57366: LD_VAR 0 2
57370: EQUAL
57371: IFFALSE 57382
// KillUnit ( vehicle ) ;
57373: LD_VAR 0 2
57377: PPUSH
57378: CALL_OW 66
57382: GO 57342
57384: POP
57385: POP
// end ;
57386: LD_VAR 0 3
57390: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57391: LD_EXP 100
57395: NOT
57396: IFFALSE 57431
57398: GO 57400
57400: DISABLE
// begin initMiner := true ;
57401: LD_ADDR_EXP 100
57405: PUSH
57406: LD_INT 1
57408: ST_TO_ADDR
// minersList := [ ] ;
57409: LD_ADDR_EXP 101
57413: PUSH
57414: EMPTY
57415: ST_TO_ADDR
// minerMinesList := [ ] ;
57416: LD_ADDR_EXP 102
57420: PUSH
57421: EMPTY
57422: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57423: LD_ADDR_EXP 103
57427: PUSH
57428: LD_INT 5
57430: ST_TO_ADDR
// end ;
57431: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57432: LD_EXP 100
57436: PUSH
57437: LD_INT 34
57439: PUSH
57440: LD_EXP 26
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PPUSH
57449: CALL_OW 69
57453: AND
57454: IFFALSE 57917
57456: GO 57458
57458: DISABLE
57459: LD_INT 0
57461: PPUSH
57462: PPUSH
57463: PPUSH
57464: PPUSH
// begin enable ;
57465: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57466: LD_ADDR_VAR 0 1
57470: PUSH
57471: LD_INT 34
57473: PUSH
57474: LD_EXP 26
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PPUSH
57483: CALL_OW 69
57487: PUSH
57488: FOR_IN
57489: IFFALSE 57561
// begin if not i in minersList then
57491: LD_VAR 0 1
57495: PUSH
57496: LD_EXP 101
57500: IN
57501: NOT
57502: IFFALSE 57559
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57504: LD_ADDR_EXP 101
57508: PUSH
57509: LD_EXP 101
57513: PPUSH
57514: LD_EXP 101
57518: PUSH
57519: LD_INT 1
57521: PLUS
57522: PPUSH
57523: LD_VAR 0 1
57527: PPUSH
57528: CALL_OW 1
57532: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57533: LD_ADDR_EXP 102
57537: PUSH
57538: LD_EXP 102
57542: PPUSH
57543: LD_EXP 102
57547: PUSH
57548: LD_INT 1
57550: PLUS
57551: PPUSH
57552: EMPTY
57553: PPUSH
57554: CALL_OW 1
57558: ST_TO_ADDR
// end end ;
57559: GO 57488
57561: POP
57562: POP
// for i := minerMinesList downto 1 do
57563: LD_ADDR_VAR 0 1
57567: PUSH
57568: DOUBLE
57569: LD_EXP 102
57573: INC
57574: ST_TO_ADDR
57575: LD_INT 1
57577: PUSH
57578: FOR_DOWNTO
57579: IFFALSE 57915
// begin if IsLive ( minersList [ i ] ) then
57581: LD_EXP 101
57585: PUSH
57586: LD_VAR 0 1
57590: ARRAY
57591: PPUSH
57592: CALL_OW 300
57596: IFFALSE 57624
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57598: LD_EXP 101
57602: PUSH
57603: LD_VAR 0 1
57607: ARRAY
57608: PPUSH
57609: LD_EXP 102
57613: PUSH
57614: LD_VAR 0 1
57618: ARRAY
57619: PPUSH
57620: CALL_OW 505
// if not minerMinesList [ i ] then
57624: LD_EXP 102
57628: PUSH
57629: LD_VAR 0 1
57633: ARRAY
57634: NOT
57635: IFFALSE 57639
// continue ;
57637: GO 57578
// for j := minerMinesList [ i ] downto 1 do
57639: LD_ADDR_VAR 0 2
57643: PUSH
57644: DOUBLE
57645: LD_EXP 102
57649: PUSH
57650: LD_VAR 0 1
57654: ARRAY
57655: INC
57656: ST_TO_ADDR
57657: LD_INT 1
57659: PUSH
57660: FOR_DOWNTO
57661: IFFALSE 57911
// begin side := GetSide ( minersList [ i ] ) ;
57663: LD_ADDR_VAR 0 3
57667: PUSH
57668: LD_EXP 101
57672: PUSH
57673: LD_VAR 0 1
57677: ARRAY
57678: PPUSH
57679: CALL_OW 255
57683: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57684: LD_ADDR_VAR 0 4
57688: PUSH
57689: LD_EXP 102
57693: PUSH
57694: LD_VAR 0 1
57698: ARRAY
57699: PUSH
57700: LD_VAR 0 2
57704: ARRAY
57705: PUSH
57706: LD_INT 1
57708: ARRAY
57709: PPUSH
57710: LD_EXP 102
57714: PUSH
57715: LD_VAR 0 1
57719: ARRAY
57720: PUSH
57721: LD_VAR 0 2
57725: ARRAY
57726: PUSH
57727: LD_INT 2
57729: ARRAY
57730: PPUSH
57731: CALL_OW 428
57735: ST_TO_ADDR
// if not tmp then
57736: LD_VAR 0 4
57740: NOT
57741: IFFALSE 57745
// continue ;
57743: GO 57660
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57745: LD_VAR 0 4
57749: PUSH
57750: LD_INT 81
57752: PUSH
57753: LD_VAR 0 3
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PPUSH
57762: CALL_OW 69
57766: IN
57767: PUSH
57768: LD_EXP 102
57772: PUSH
57773: LD_VAR 0 1
57777: ARRAY
57778: PUSH
57779: LD_VAR 0 2
57783: ARRAY
57784: PUSH
57785: LD_INT 1
57787: ARRAY
57788: PPUSH
57789: LD_EXP 102
57793: PUSH
57794: LD_VAR 0 1
57798: ARRAY
57799: PUSH
57800: LD_VAR 0 2
57804: ARRAY
57805: PUSH
57806: LD_INT 2
57808: ARRAY
57809: PPUSH
57810: CALL_OW 458
57814: AND
57815: IFFALSE 57909
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57817: LD_EXP 102
57821: PUSH
57822: LD_VAR 0 1
57826: ARRAY
57827: PUSH
57828: LD_VAR 0 2
57832: ARRAY
57833: PUSH
57834: LD_INT 1
57836: ARRAY
57837: PPUSH
57838: LD_EXP 102
57842: PUSH
57843: LD_VAR 0 1
57847: ARRAY
57848: PUSH
57849: LD_VAR 0 2
57853: ARRAY
57854: PUSH
57855: LD_INT 2
57857: ARRAY
57858: PPUSH
57859: LD_VAR 0 3
57863: PPUSH
57864: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57868: LD_ADDR_EXP 102
57872: PUSH
57873: LD_EXP 102
57877: PPUSH
57878: LD_VAR 0 1
57882: PPUSH
57883: LD_EXP 102
57887: PUSH
57888: LD_VAR 0 1
57892: ARRAY
57893: PPUSH
57894: LD_VAR 0 2
57898: PPUSH
57899: CALL_OW 3
57903: PPUSH
57904: CALL_OW 1
57908: ST_TO_ADDR
// end ; end ;
57909: GO 57660
57911: POP
57912: POP
// end ;
57913: GO 57578
57915: POP
57916: POP
// end ;
57917: PPOPN 4
57919: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57920: LD_INT 0
57922: PPUSH
57923: PPUSH
// result := false ;
57924: LD_ADDR_VAR 0 4
57928: PUSH
57929: LD_INT 0
57931: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57932: LD_VAR 0 1
57936: PPUSH
57937: CALL_OW 264
57941: PUSH
57942: LD_EXP 26
57946: EQUAL
57947: NOT
57948: IFFALSE 57952
// exit ;
57950: GO 58192
// index := GetElementIndex ( minersList , unit ) ;
57952: LD_ADDR_VAR 0 5
57956: PUSH
57957: LD_EXP 101
57961: PPUSH
57962: LD_VAR 0 1
57966: PPUSH
57967: CALL 8970 0 2
57971: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57972: LD_EXP 102
57976: PUSH
57977: LD_VAR 0 5
57981: ARRAY
57982: PUSH
57983: LD_EXP 103
57987: GREATEREQUAL
57988: IFFALSE 57992
// exit ;
57990: GO 58192
// ComMoveXY ( unit , x , y ) ;
57992: LD_VAR 0 1
57996: PPUSH
57997: LD_VAR 0 2
58001: PPUSH
58002: LD_VAR 0 3
58006: PPUSH
58007: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58011: LD_INT 35
58013: PPUSH
58014: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
58018: LD_VAR 0 1
58022: PPUSH
58023: LD_VAR 0 2
58027: PPUSH
58028: LD_VAR 0 3
58032: PPUSH
58033: CALL 39367 0 3
58037: NOT
58038: PUSH
58039: LD_VAR 0 1
58043: PPUSH
58044: CALL_OW 314
58048: AND
58049: IFFALSE 58053
// exit ;
58051: GO 58192
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
58053: LD_VAR 0 2
58057: PPUSH
58058: LD_VAR 0 3
58062: PPUSH
58063: CALL_OW 428
58067: PUSH
58068: LD_VAR 0 1
58072: EQUAL
58073: PUSH
58074: LD_VAR 0 1
58078: PPUSH
58079: CALL_OW 314
58083: NOT
58084: AND
58085: IFFALSE 58011
// PlaySoundXY ( x , y , PlantMine ) ;
58087: LD_VAR 0 2
58091: PPUSH
58092: LD_VAR 0 3
58096: PPUSH
58097: LD_STRING PlantMine
58099: PPUSH
58100: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
58104: LD_VAR 0 2
58108: PPUSH
58109: LD_VAR 0 3
58113: PPUSH
58114: LD_VAR 0 1
58118: PPUSH
58119: CALL_OW 255
58123: PPUSH
58124: LD_INT 0
58126: PPUSH
58127: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
58131: LD_ADDR_EXP 102
58135: PUSH
58136: LD_EXP 102
58140: PPUSH
58141: LD_VAR 0 5
58145: PUSH
58146: LD_EXP 102
58150: PUSH
58151: LD_VAR 0 5
58155: ARRAY
58156: PUSH
58157: LD_INT 1
58159: PLUS
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PPUSH
58165: LD_VAR 0 2
58169: PUSH
58170: LD_VAR 0 3
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PPUSH
58179: CALL 9185 0 3
58183: ST_TO_ADDR
// result := true ;
58184: LD_ADDR_VAR 0 4
58188: PUSH
58189: LD_INT 1
58191: ST_TO_ADDR
// end ;
58192: LD_VAR 0 4
58196: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
58197: LD_INT 0
58199: PPUSH
58200: PPUSH
58201: PPUSH
// if not unit in minersList then
58202: LD_VAR 0 1
58206: PUSH
58207: LD_EXP 101
58211: IN
58212: NOT
58213: IFFALSE 58217
// exit ;
58215: GO 58609
// index := GetElementIndex ( minersList , unit ) ;
58217: LD_ADDR_VAR 0 6
58221: PUSH
58222: LD_EXP 101
58226: PPUSH
58227: LD_VAR 0 1
58231: PPUSH
58232: CALL 8970 0 2
58236: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
58237: LD_ADDR_VAR 0 5
58241: PUSH
58242: DOUBLE
58243: LD_EXP 102
58247: PUSH
58248: LD_VAR 0 6
58252: ARRAY
58253: INC
58254: ST_TO_ADDR
58255: LD_INT 1
58257: PUSH
58258: FOR_DOWNTO
58259: IFFALSE 58420
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
58261: LD_EXP 102
58265: PUSH
58266: LD_VAR 0 6
58270: ARRAY
58271: PUSH
58272: LD_VAR 0 5
58276: ARRAY
58277: PUSH
58278: LD_INT 1
58280: ARRAY
58281: PUSH
58282: LD_VAR 0 2
58286: EQUAL
58287: PUSH
58288: LD_EXP 102
58292: PUSH
58293: LD_VAR 0 6
58297: ARRAY
58298: PUSH
58299: LD_VAR 0 5
58303: ARRAY
58304: PUSH
58305: LD_INT 2
58307: ARRAY
58308: PUSH
58309: LD_VAR 0 3
58313: EQUAL
58314: AND
58315: IFFALSE 58418
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58317: LD_EXP 102
58321: PUSH
58322: LD_VAR 0 6
58326: ARRAY
58327: PUSH
58328: LD_VAR 0 5
58332: ARRAY
58333: PUSH
58334: LD_INT 1
58336: ARRAY
58337: PPUSH
58338: LD_EXP 102
58342: PUSH
58343: LD_VAR 0 6
58347: ARRAY
58348: PUSH
58349: LD_VAR 0 5
58353: ARRAY
58354: PUSH
58355: LD_INT 2
58357: ARRAY
58358: PPUSH
58359: LD_VAR 0 1
58363: PPUSH
58364: CALL_OW 255
58368: PPUSH
58369: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58373: LD_ADDR_EXP 102
58377: PUSH
58378: LD_EXP 102
58382: PPUSH
58383: LD_VAR 0 6
58387: PPUSH
58388: LD_EXP 102
58392: PUSH
58393: LD_VAR 0 6
58397: ARRAY
58398: PPUSH
58399: LD_VAR 0 5
58403: PPUSH
58404: CALL_OW 3
58408: PPUSH
58409: CALL_OW 1
58413: ST_TO_ADDR
// exit ;
58414: POP
58415: POP
58416: GO 58609
// end ; end ;
58418: GO 58258
58420: POP
58421: POP
// for i := minerMinesList [ index ] downto 1 do
58422: LD_ADDR_VAR 0 5
58426: PUSH
58427: DOUBLE
58428: LD_EXP 102
58432: PUSH
58433: LD_VAR 0 6
58437: ARRAY
58438: INC
58439: ST_TO_ADDR
58440: LD_INT 1
58442: PUSH
58443: FOR_DOWNTO
58444: IFFALSE 58607
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58446: LD_EXP 102
58450: PUSH
58451: LD_VAR 0 6
58455: ARRAY
58456: PUSH
58457: LD_VAR 0 5
58461: ARRAY
58462: PUSH
58463: LD_INT 1
58465: ARRAY
58466: PPUSH
58467: LD_EXP 102
58471: PUSH
58472: LD_VAR 0 6
58476: ARRAY
58477: PUSH
58478: LD_VAR 0 5
58482: ARRAY
58483: PUSH
58484: LD_INT 2
58486: ARRAY
58487: PPUSH
58488: LD_VAR 0 2
58492: PPUSH
58493: LD_VAR 0 3
58497: PPUSH
58498: CALL_OW 298
58502: PUSH
58503: LD_INT 6
58505: LESS
58506: IFFALSE 58605
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58508: LD_EXP 102
58512: PUSH
58513: LD_VAR 0 6
58517: ARRAY
58518: PUSH
58519: LD_VAR 0 5
58523: ARRAY
58524: PUSH
58525: LD_INT 1
58527: ARRAY
58528: PPUSH
58529: LD_EXP 102
58533: PUSH
58534: LD_VAR 0 6
58538: ARRAY
58539: PUSH
58540: LD_VAR 0 5
58544: ARRAY
58545: PUSH
58546: LD_INT 2
58548: ARRAY
58549: PPUSH
58550: LD_VAR 0 1
58554: PPUSH
58555: CALL_OW 255
58559: PPUSH
58560: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58564: LD_ADDR_EXP 102
58568: PUSH
58569: LD_EXP 102
58573: PPUSH
58574: LD_VAR 0 6
58578: PPUSH
58579: LD_EXP 102
58583: PUSH
58584: LD_VAR 0 6
58588: ARRAY
58589: PPUSH
58590: LD_VAR 0 5
58594: PPUSH
58595: CALL_OW 3
58599: PPUSH
58600: CALL_OW 1
58604: ST_TO_ADDR
// end ; end ;
58605: GO 58443
58607: POP
58608: POP
// end ;
58609: LD_VAR 0 4
58613: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58614: LD_INT 0
58616: PPUSH
58617: PPUSH
58618: PPUSH
58619: PPUSH
58620: PPUSH
58621: PPUSH
58622: PPUSH
58623: PPUSH
58624: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58625: LD_VAR 0 1
58629: PPUSH
58630: CALL_OW 264
58634: PUSH
58635: LD_EXP 26
58639: EQUAL
58640: NOT
58641: PUSH
58642: LD_VAR 0 1
58646: PUSH
58647: LD_EXP 101
58651: IN
58652: NOT
58653: OR
58654: IFFALSE 58658
// exit ;
58656: GO 58980
// index := GetElementIndex ( minersList , unit ) ;
58658: LD_ADDR_VAR 0 6
58662: PUSH
58663: LD_EXP 101
58667: PPUSH
58668: LD_VAR 0 1
58672: PPUSH
58673: CALL 8970 0 2
58677: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58678: LD_ADDR_VAR 0 8
58682: PUSH
58683: LD_EXP 103
58687: PUSH
58688: LD_EXP 102
58692: PUSH
58693: LD_VAR 0 6
58697: ARRAY
58698: MINUS
58699: ST_TO_ADDR
// if not minesFreeAmount then
58700: LD_VAR 0 8
58704: NOT
58705: IFFALSE 58709
// exit ;
58707: GO 58980
// tmp := [ ] ;
58709: LD_ADDR_VAR 0 7
58713: PUSH
58714: EMPTY
58715: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58716: LD_ADDR_VAR 0 5
58720: PUSH
58721: DOUBLE
58722: LD_INT 1
58724: DEC
58725: ST_TO_ADDR
58726: LD_VAR 0 8
58730: PUSH
58731: FOR_TO
58732: IFFALSE 58927
// begin _d := rand ( 0 , 5 ) ;
58734: LD_ADDR_VAR 0 11
58738: PUSH
58739: LD_INT 0
58741: PPUSH
58742: LD_INT 5
58744: PPUSH
58745: CALL_OW 12
58749: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58750: LD_ADDR_VAR 0 12
58754: PUSH
58755: LD_INT 2
58757: PPUSH
58758: LD_INT 6
58760: PPUSH
58761: CALL_OW 12
58765: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58766: LD_ADDR_VAR 0 9
58770: PUSH
58771: LD_VAR 0 2
58775: PPUSH
58776: LD_VAR 0 11
58780: PPUSH
58781: LD_VAR 0 12
58785: PPUSH
58786: CALL_OW 272
58790: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58791: LD_ADDR_VAR 0 10
58795: PUSH
58796: LD_VAR 0 3
58800: PPUSH
58801: LD_VAR 0 11
58805: PPUSH
58806: LD_VAR 0 12
58810: PPUSH
58811: CALL_OW 273
58815: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58816: LD_VAR 0 9
58820: PPUSH
58821: LD_VAR 0 10
58825: PPUSH
58826: CALL_OW 488
58830: PUSH
58831: LD_VAR 0 9
58835: PUSH
58836: LD_VAR 0 10
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_VAR 0 7
58849: IN
58850: NOT
58851: AND
58852: PUSH
58853: LD_VAR 0 9
58857: PPUSH
58858: LD_VAR 0 10
58862: PPUSH
58863: CALL_OW 458
58867: NOT
58868: AND
58869: IFFALSE 58911
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58871: LD_ADDR_VAR 0 7
58875: PUSH
58876: LD_VAR 0 7
58880: PPUSH
58881: LD_VAR 0 7
58885: PUSH
58886: LD_INT 1
58888: PLUS
58889: PPUSH
58890: LD_VAR 0 9
58894: PUSH
58895: LD_VAR 0 10
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PPUSH
58904: CALL_OW 1
58908: ST_TO_ADDR
58909: GO 58925
// i := i - 1 ;
58911: LD_ADDR_VAR 0 5
58915: PUSH
58916: LD_VAR 0 5
58920: PUSH
58921: LD_INT 1
58923: MINUS
58924: ST_TO_ADDR
// end ;
58925: GO 58731
58927: POP
58928: POP
// for i in tmp do
58929: LD_ADDR_VAR 0 5
58933: PUSH
58934: LD_VAR 0 7
58938: PUSH
58939: FOR_IN
58940: IFFALSE 58978
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58942: LD_VAR 0 1
58946: PPUSH
58947: LD_VAR 0 5
58951: PUSH
58952: LD_INT 1
58954: ARRAY
58955: PPUSH
58956: LD_VAR 0 5
58960: PUSH
58961: LD_INT 2
58963: ARRAY
58964: PPUSH
58965: CALL 57920 0 3
58969: NOT
58970: IFFALSE 58976
// exit ;
58972: POP
58973: POP
58974: GO 58980
58976: GO 58939
58978: POP
58979: POP
// end ;
58980: LD_VAR 0 4
58984: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
58985: LD_INT 0
58987: PPUSH
58988: PPUSH
58989: PPUSH
58990: PPUSH
58991: PPUSH
58992: PPUSH
58993: PPUSH
// if not GetClass ( unit ) = class_sniper then
58994: LD_VAR 0 1
58998: PPUSH
58999: CALL_OW 257
59003: PUSH
59004: LD_INT 5
59006: EQUAL
59007: NOT
59008: IFFALSE 59012
// exit ;
59010: GO 59400
// dist := 8 ;
59012: LD_ADDR_VAR 0 5
59016: PUSH
59017: LD_INT 8
59019: ST_TO_ADDR
// viewRange := 12 ;
59020: LD_ADDR_VAR 0 7
59024: PUSH
59025: LD_INT 12
59027: ST_TO_ADDR
// side := GetSide ( unit ) ;
59028: LD_ADDR_VAR 0 6
59032: PUSH
59033: LD_VAR 0 1
59037: PPUSH
59038: CALL_OW 255
59042: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
59043: LD_INT 61
59045: PPUSH
59046: LD_VAR 0 6
59050: PPUSH
59051: CALL_OW 321
59055: PUSH
59056: LD_INT 2
59058: EQUAL
59059: IFFALSE 59069
// viewRange := 16 ;
59061: LD_ADDR_VAR 0 7
59065: PUSH
59066: LD_INT 16
59068: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
59069: LD_VAR 0 1
59073: PPUSH
59074: LD_VAR 0 2
59078: PPUSH
59079: LD_VAR 0 3
59083: PPUSH
59084: CALL_OW 297
59088: PUSH
59089: LD_VAR 0 5
59093: GREATER
59094: IFFALSE 59173
// begin ComMoveXY ( unit , x , y ) ;
59096: LD_VAR 0 1
59100: PPUSH
59101: LD_VAR 0 2
59105: PPUSH
59106: LD_VAR 0 3
59110: PPUSH
59111: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59115: LD_INT 35
59117: PPUSH
59118: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
59122: LD_VAR 0 1
59126: PPUSH
59127: LD_VAR 0 2
59131: PPUSH
59132: LD_VAR 0 3
59136: PPUSH
59137: CALL 39367 0 3
59141: NOT
59142: IFFALSE 59146
// exit ;
59144: GO 59400
// until GetDistUnitXY ( unit , x , y ) < dist ;
59146: LD_VAR 0 1
59150: PPUSH
59151: LD_VAR 0 2
59155: PPUSH
59156: LD_VAR 0 3
59160: PPUSH
59161: CALL_OW 297
59165: PUSH
59166: LD_VAR 0 5
59170: LESS
59171: IFFALSE 59115
// end ; ComTurnXY ( unit , x , y ) ;
59173: LD_VAR 0 1
59177: PPUSH
59178: LD_VAR 0 2
59182: PPUSH
59183: LD_VAR 0 3
59187: PPUSH
59188: CALL_OW 118
// wait ( 5 ) ;
59192: LD_INT 5
59194: PPUSH
59195: CALL_OW 67
// _d := GetDir ( unit ) ;
59199: LD_ADDR_VAR 0 10
59203: PUSH
59204: LD_VAR 0 1
59208: PPUSH
59209: CALL_OW 254
59213: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
59214: LD_ADDR_VAR 0 8
59218: PUSH
59219: LD_VAR 0 1
59223: PPUSH
59224: CALL_OW 250
59228: PPUSH
59229: LD_VAR 0 10
59233: PPUSH
59234: LD_VAR 0 5
59238: PPUSH
59239: CALL_OW 272
59243: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
59244: LD_ADDR_VAR 0 9
59248: PUSH
59249: LD_VAR 0 1
59253: PPUSH
59254: CALL_OW 251
59258: PPUSH
59259: LD_VAR 0 10
59263: PPUSH
59264: LD_VAR 0 5
59268: PPUSH
59269: CALL_OW 273
59273: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59274: LD_VAR 0 8
59278: PPUSH
59279: LD_VAR 0 9
59283: PPUSH
59284: CALL_OW 488
59288: NOT
59289: IFFALSE 59293
// exit ;
59291: GO 59400
// ComAnimCustom ( unit , 1 ) ;
59293: LD_VAR 0 1
59297: PPUSH
59298: LD_INT 1
59300: PPUSH
59301: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59305: LD_VAR 0 8
59309: PPUSH
59310: LD_VAR 0 9
59314: PPUSH
59315: LD_VAR 0 6
59319: PPUSH
59320: LD_VAR 0 7
59324: PPUSH
59325: CALL_OW 330
// repeat wait ( 1 ) ;
59329: LD_INT 1
59331: PPUSH
59332: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
59336: LD_VAR 0 1
59340: PPUSH
59341: CALL_OW 316
59345: PUSH
59346: LD_VAR 0 1
59350: PPUSH
59351: CALL_OW 314
59355: OR
59356: PUSH
59357: LD_VAR 0 1
59361: PPUSH
59362: CALL_OW 302
59366: NOT
59367: OR
59368: PUSH
59369: LD_VAR 0 1
59373: PPUSH
59374: CALL_OW 301
59378: OR
59379: IFFALSE 59329
// RemoveSeeing ( _x , _y , side ) ;
59381: LD_VAR 0 8
59385: PPUSH
59386: LD_VAR 0 9
59390: PPUSH
59391: LD_VAR 0 6
59395: PPUSH
59396: CALL_OW 331
// end ; end_of_file
59400: LD_VAR 0 4
59404: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
59405: LD_VAR 0 1
59409: PPUSH
59410: LD_VAR 0 2
59414: PPUSH
59415: LD_VAR 0 3
59419: PPUSH
59420: LD_VAR 0 4
59424: PPUSH
59425: LD_VAR 0 5
59429: PPUSH
59430: LD_VAR 0 6
59434: PPUSH
59435: CALL 42055 0 6
// end ;
59439: PPOPN 6
59441: END
