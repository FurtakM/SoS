// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 65365 0 0
// Init ;
   8: CALL 62 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 26
// Difficulty := 4 ;
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 4
  25: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  26: LD_INT 1
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: CALL 6882 0 2
// PrepareArabian ;
  36: CALL 381 0 0
// PrepareRussian ;
  40: CALL 7733 0 0
// Action ;
  44: CALL 15895 0 0
// if debug then
  48: LD_EXP 1
  52: IFFALSE 61
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ;
  61: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 05_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 05_
  80: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_STRING 04_2_GaidarKilled
  88: PPUSH
  89: LD_INT 1
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_STRING 05_ConvoySavedCounter
 104: PPUSH
 105: LD_INT 0
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// bergkampfArrived := false ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// omarArrived := false ;
 121: LD_ADDR_EXP 6
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// outpostDestroyed := false ;
 129: LD_ADDR_EXP 4
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ruLoseCounter := 0 ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// rolfScriptBase := false ;
 145: LD_ADDR_EXP 9
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// omarScriptBase := false ;
 153: LD_ADDR_EXP 10
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// linkedWithRolf := 0 ;
 161: LD_ADDR_EXP 12
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 169: LD_ADDR_EXP 26
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// rolfDied := false ;
 177: LD_ADDR_EXP 13
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// leninSpotted := false ;
 185: LD_ADDR_EXP 14
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// mortarConstructed := false ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// rolfHasVehicles := false ;
 201: LD_ADDR_EXP 16
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// leninScriptBase := true ;
 209: LD_ADDR_EXP 11
 213: PUSH
 214: LD_INT 1
 216: ST_TO_ADDR
// rolfWantVehicles := false ;
 217: LD_ADDR_EXP 17
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omarWantVehicles := false ;
 225: LD_ADDR_EXP 18
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// omarHasVehicles := false ;
 233: LD_ADDR_EXP 22
 237: PUSH
 238: LD_INT 0
 240: ST_TO_ADDR
// escapeAllowed := false ;
 241: LD_ADDR_EXP 24
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 8 8$00 , 6 6$00 , 5 5$30 , 5 5$00 ] [ Difficulty ] ;
 249: LD_ADDR_EXP 19
 253: PUSH
 254: LD_INT 16800
 256: PUSH
 257: LD_INT 12600
 259: PUSH
 260: LD_INT 11550
 262: PUSH
 263: LD_INT 10500
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: PUSH
 272: LD_OWVAR 67
 276: ARRAY
 277: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 10 10$00 , 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] ;
 278: LD_ADDR_EXP 20
 282: PUSH
 283: LD_INT 21000
 285: PUSH
 286: LD_INT 18900
 288: PUSH
 289: LD_INT 16800
 291: PUSH
 292: LD_INT 14700
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: PUSH
 301: LD_OWVAR 67
 305: ARRAY
 306: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 307: LD_ADDR_EXP 21
 311: PUSH
 312: LD_INT 4
 314: PUSH
 315: LD_INT 5
 317: PUSH
 318: LD_INT 6
 320: PUSH
 321: LD_INT 6
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: PUSH
 330: LD_OWVAR 67
 334: ARRAY
 335: ST_TO_ADDR
// omarAttack := false ;
 336: LD_ADDR_EXP 23
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// disableAttackOnHeike := false ;
 344: LD_ADDR_EXP 27
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// escapeTimer := 4 4$00 ;
 352: LD_ADDR_EXP 25
 356: PUSH
 357: LD_INT 8400
 359: ST_TO_ADDR
// firstAttack := true ;
 360: LD_ADDR_EXP 28
 364: PUSH
 365: LD_INT 1
 367: ST_TO_ADDR
// canRolfJoin := true ;
 368: LD_ADDR_EXP 29
 372: PUSH
 373: LD_INT 1
 375: ST_TO_ADDR
// end ; end_of_file
 376: LD_VAR 0 1
 380: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 381: LD_INT 0
 383: PPUSH
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
 389: PPUSH
 390: PPUSH
 391: PPUSH
 392: PPUSH
 393: PPUSH
 394: PPUSH
// uc_nation := 2 ;
 395: LD_ADDR_OWVAR 21
 399: PUSH
 400: LD_INT 2
 402: ST_TO_ADDR
// uc_side := 5 ;
 403: LD_ADDR_OWVAR 20
 407: PUSH
 408: LD_INT 5
 410: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 411: LD_ADDR_EXP 38
 415: PUSH
 416: LD_STRING Abdul
 418: PPUSH
 419: LD_INT 0
 421: PPUSH
 422: LD_STRING 
 424: PPUSH
 425: CALL 25274 0 3
 429: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 430: LD_ADDR_EXP 40
 434: PUSH
 435: LD_STRING Omar
 437: PPUSH
 438: LD_INT 0
 440: PPUSH
 441: LD_STRING 
 443: PPUSH
 444: CALL 25274 0 3
 448: ST_TO_ADDR
// uc_side := 2 ;
 449: LD_ADDR_OWVAR 20
 453: PUSH
 454: LD_INT 2
 456: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 457: LD_ADDR_EXP 30
 461: PUSH
 462: LD_STRING Heike
 464: PPUSH
 465: LD_EXP 1
 469: NOT
 470: PPUSH
 471: LD_EXP 2
 475: PPUSH
 476: CALL 25274 0 3
 480: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 481: LD_ADDR_EXP 33
 485: PUSH
 486: LD_STRING Ibrahim
 488: PPUSH
 489: LD_EXP 1
 493: NOT
 494: PPUSH
 495: LD_EXP 2
 499: PPUSH
 500: CALL 25274 0 3
 504: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 505: LD_ADDR_EXP 31
 509: PUSH
 510: LD_STRING Givi
 512: PPUSH
 513: LD_EXP 1
 517: NOT
 518: PPUSH
 519: LD_EXP 2
 523: PPUSH
 524: CALL 25274 0 3
 528: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 529: LD_ADDR_EXP 34
 533: PUSH
 534: LD_STRING Kamil
 536: PPUSH
 537: LD_EXP 1
 541: NOT
 542: PPUSH
 543: LD_EXP 2
 547: PPUSH
 548: CALL 25274 0 3
 552: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 553: LD_ADDR_EXP 35
 557: PUSH
 558: LD_STRING Kaia
 560: PPUSH
 561: LD_EXP 1
 565: NOT
 566: PPUSH
 567: LD_EXP 2
 571: PPUSH
 572: CALL 25274 0 3
 576: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 577: LD_ADDR_EXP 36
 581: PUSH
 582: LD_STRING Sophia
 584: PPUSH
 585: LD_EXP 1
 589: NOT
 590: PPUSH
 591: LD_EXP 2
 595: PPUSH
 596: CALL 25274 0 3
 600: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 601: LD_ADDR_EXP 37
 605: PUSH
 606: LD_STRING Markov
 608: PPUSH
 609: LD_EXP 1
 613: NOT
 614: PPUSH
 615: LD_EXP 2
 619: PPUSH
 620: CALL 25274 0 3
 624: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 625: LD_ADDR_EXP 42
 629: PUSH
 630: LD_STRING Aviradze
 632: PPUSH
 633: LD_EXP 1
 637: NOT
 638: PPUSH
 639: LD_EXP 2
 643: PPUSH
 644: CALL 25274 0 3
 648: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 649: LD_ADDR_EXP 41
 653: PUSH
 654: LD_STRING Kurt
 656: PPUSH
 657: LD_EXP 1
 661: NOT
 662: PPUSH
 663: LD_EXP 2
 667: PPUSH
 668: CALL 25274 0 3
 672: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 673: LD_ADDR_EXP 32
 677: PUSH
 678: LD_STRING Mike
 680: PPUSH
 681: LD_EXP 1
 685: NOT
 686: PPUSH
 687: LD_EXP 2
 691: PPUSH
 692: CALL 25274 0 3
 696: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 697: LD_ADDR_EXP 39
 701: PUSH
 702: LD_STRING Olaf
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: LD_STRING 
 710: PPUSH
 711: CALL 25274 0 3
 715: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 716: LD_ADDR_EXP 45
 720: PUSH
 721: LD_STRING 05_others
 723: PPUSH
 724: CALL_OW 31
 728: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 729: LD_ADDR_EXP 46
 733: PUSH
 734: LD_STRING 05_apes
 736: PPUSH
 737: CALL_OW 31
 741: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 742: LD_ADDR_VAR 0 5
 746: PUSH
 747: LD_STRING 05_Radar
 749: PPUSH
 750: LD_EXP 1
 754: PPUSH
 755: CALL_OW 30
 759: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 760: LD_ADDR_VAR 0 6
 764: PUSH
 765: LD_STRING 05_RemoteControl
 767: PPUSH
 768: LD_EXP 1
 772: PPUSH
 773: CALL_OW 30
 777: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 778: LD_ADDR_VAR 0 7
 782: PUSH
 783: LD_STRING 05_DrugsTested
 785: PPUSH
 786: LD_EXP 1
 790: PPUSH
 791: CALL_OW 30
 795: ST_TO_ADDR
// if hasDrugs then
 796: LD_VAR 0 7
 800: IFFALSE 815
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 802: LD_INT 5
 804: PPUSH
 805: LD_INT 2
 807: PPUSH
 808: LD_INT 2
 810: PPUSH
 811: CALL_OW 322
// if hasRadar then
 815: LD_VAR 0 5
 819: IFFALSE 834
// SetTech ( tech_radar , 2 , state_researched ) ;
 821: LD_INT 6
 823: PPUSH
 824: LD_INT 2
 826: PPUSH
 827: LD_INT 2
 829: PPUSH
 830: CALL_OW 322
// if hasRemote then
 834: LD_VAR 0 6
 838: IFFALSE 853
// SetTech ( tech_remCont , 2 , state_researched ) ;
 840: LD_INT 15
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 2
 848: PPUSH
 849: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 853: LD_ADDR_VAR 0 12
 857: PUSH
 858: LD_INT 5
 860: PPUSH
 861: LD_INT 0
 863: PPUSH
 864: CALL_OW 517
 868: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: DOUBLE
 875: LD_INT 1
 877: DEC
 878: ST_TO_ADDR
 879: LD_VAR 0 12
 883: PUSH
 884: LD_INT 1
 886: ARRAY
 887: PUSH
 888: FOR_TO
 889: IFFALSE 966
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 891: LD_VAR 0 12
 895: PUSH
 896: LD_INT 1
 898: ARRAY
 899: PUSH
 900: LD_VAR 0 2
 904: ARRAY
 905: PPUSH
 906: LD_VAR 0 12
 910: PUSH
 911: LD_INT 2
 913: ARRAY
 914: PUSH
 915: LD_VAR 0 2
 919: ARRAY
 920: PPUSH
 921: CALL_OW 351
 925: IFFALSE 964
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 927: LD_VAR 0 12
 931: PUSH
 932: LD_INT 1
 934: ARRAY
 935: PUSH
 936: LD_VAR 0 2
 940: ARRAY
 941: PPUSH
 942: LD_VAR 0 12
 946: PUSH
 947: LD_INT 2
 949: ARRAY
 950: PUSH
 951: LD_VAR 0 2
 955: ARRAY
 956: PPUSH
 957: LD_INT 2
 959: PPUSH
 960: CALL_OW 244
 964: GO 888
 966: POP
 967: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 968: LD_ADDR_VAR 0 4
 972: PUSH
 973: LD_INT 0
 975: PUSH
 976: LD_INT 206
 978: PUSH
 979: LD_INT 80
 981: PUSH
 982: LD_INT 1
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: LIST
 989: LIST
 990: PUSH
 991: LD_INT 32
 993: PUSH
 994: LD_INT 221
 996: PUSH
 997: LD_INT 95
 999: PUSH
1000: LD_INT 5
1002: PUSH
1003: LD_INT 23
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: PUSH
1013: LD_INT 32
1015: PUSH
1016: LD_INT 223
1018: PUSH
1019: LD_INT 88
1021: PUSH
1022: LD_INT 5
1024: PUSH
1025: LD_INT 24
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 32
1037: PUSH
1038: LD_INT 202
1040: PUSH
1041: LD_INT 64
1043: PUSH
1044: LD_INT 2
1046: PUSH
1047: LD_INT 25
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: PUSH
1057: LD_INT 3
1059: PUSH
1060: LD_INT 203
1062: PUSH
1063: LD_INT 91
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: PUSH
1075: LD_INT 8
1077: PUSH
1078: LD_INT 217
1080: PUSH
1081: LD_INT 78
1083: PUSH
1084: LD_INT 4
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 27
1095: PUSH
1096: LD_INT 220
1098: PUSH
1099: LD_INT 99
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 27
1113: PUSH
1114: LD_INT 220
1116: PUSH
1117: LD_INT 103
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 27
1131: PUSH
1132: LD_INT 216
1134: PUSH
1135: LD_INT 102
1137: PUSH
1138: LD_INT 1
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: PUSH
1147: LD_INT 17
1149: PUSH
1150: LD_INT 203
1152: PUSH
1153: LD_INT 94
1155: PUSH
1156: LD_INT 0
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 23
1167: PUSH
1168: LD_INT 200
1170: PUSH
1171: LD_INT 88
1173: PUSH
1174: LD_INT 2
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: LIST
1181: LIST
1182: PUSH
1183: LD_INT 16
1185: PUSH
1186: LD_INT 199
1188: PUSH
1189: LD_INT 91
1191: PUSH
1192: LD_INT 1
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: PUSH
1201: LD_INT 26
1203: PUSH
1204: LD_INT 197
1206: PUSH
1207: LD_INT 81
1209: PUSH
1210: LD_INT 1
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: LIST
1218: PUSH
1219: LD_INT 26
1221: PUSH
1222: LD_INT 197
1224: PUSH
1225: LD_INT 78
1227: PUSH
1228: LD_INT 3
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: ST_TO_ADDR
// if hasRadar then
1253: LD_VAR 0 5
1257: IFFALSE 1301
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
1259: LD_ADDR_VAR 0 4
1263: PUSH
1264: LD_VAR 0 4
1268: PPUSH
1269: LD_VAR 0 4
1273: PUSH
1274: LD_INT 1
1276: PLUS
1277: PPUSH
1278: LD_INT 20
1280: PUSH
1281: LD_INT 203
1283: PUSH
1284: LD_INT 87
1286: PUSH
1287: LD_INT 3
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: PPUSH
1296: CALL_OW 1
1300: ST_TO_ADDR
// if hasRemote then
1301: LD_VAR 0 6
1305: IFFALSE 1349
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
1307: LD_ADDR_VAR 0 4
1311: PUSH
1312: LD_VAR 0 4
1316: PPUSH
1317: LD_VAR 0 4
1321: PUSH
1322: LD_INT 1
1324: PLUS
1325: PPUSH
1326: LD_INT 22
1328: PUSH
1329: LD_INT 207
1331: PUSH
1332: LD_INT 95
1334: PUSH
1335: LD_INT 5
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: PPUSH
1344: CALL_OW 1
1348: ST_TO_ADDR
// for i in base do
1349: LD_ADDR_VAR 0 2
1353: PUSH
1354: LD_VAR 0 4
1358: PUSH
1359: FOR_IN
1360: IFFALSE 1541
// begin bc_type := i [ 1 ] ;
1362: LD_ADDR_OWVAR 42
1366: PUSH
1367: LD_VAR 0 2
1371: PUSH
1372: LD_INT 1
1374: ARRAY
1375: ST_TO_ADDR
// bc_level := 3 ;
1376: LD_ADDR_OWVAR 43
1380: PUSH
1381: LD_INT 3
1383: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1384: LD_VAR 0 2
1388: PUSH
1389: LD_INT 1
1391: ARRAY
1392: PUSH
1393: LD_INT 8
1395: EQUAL
1396: IFFALSE 1431
// begin bc_kind1 := b_lab_weapon ;
1398: LD_ADDR_OWVAR 44
1402: PUSH
1403: LD_INT 10
1405: ST_TO_ADDR
// if hasRadar then
1406: LD_VAR 0 5
1410: IFFALSE 1422
// bc_kind2 := b_lab_opto else
1412: LD_ADDR_OWVAR 45
1416: PUSH
1417: LD_INT 15
1419: ST_TO_ADDR
1420: GO 1431
// bc_kind2 := - 1 ;
1422: LD_ADDR_OWVAR 45
1426: PUSH
1427: LD_INT 1
1429: NEG
1430: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 2
1443: ARRAY
1444: PPUSH
1445: LD_VAR 0 2
1449: PUSH
1450: LD_INT 3
1452: ARRAY
1453: PPUSH
1454: LD_VAR 0 2
1458: PUSH
1459: LD_INT 4
1461: ARRAY
1462: PPUSH
1463: CALL_OW 47
1467: ST_TO_ADDR
// if i > 4 then
1468: LD_VAR 0 2
1472: PUSH
1473: LD_INT 4
1475: GREATER
1476: IFFALSE 1496
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1478: LD_VAR 0 3
1482: PPUSH
1483: LD_VAR 0 2
1487: PUSH
1488: LD_INT 5
1490: ARRAY
1491: PPUSH
1492: CALL_OW 431
// if i [ 1 ] = b_bunker then
1496: LD_VAR 0 2
1500: PUSH
1501: LD_INT 1
1503: ARRAY
1504: PUSH
1505: LD_INT 32
1507: EQUAL
1508: IFFALSE 1539
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1510: LD_ADDR_VAR 0 11
1514: PUSH
1515: LD_VAR 0 11
1519: PPUSH
1520: LD_VAR 0 11
1524: PUSH
1525: LD_INT 1
1527: PLUS
1528: PPUSH
1529: LD_VAR 0 3
1533: PPUSH
1534: CALL_OW 1
1538: ST_TO_ADDR
// end ;
1539: GO 1359
1541: POP
1542: POP
// depot := HexInfo ( 206 , 80 ) ;
1543: LD_ADDR_VAR 0 9
1547: PUSH
1548: LD_INT 206
1550: PPUSH
1551: LD_INT 80
1553: PPUSH
1554: CALL_OW 428
1558: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1559: LD_ADDR_VAR 0 8
1563: PUSH
1564: LD_INT 203
1566: PPUSH
1567: LD_INT 91
1569: PPUSH
1570: CALL_OW 428
1574: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1575: LD_ADDR_VAR 0 10
1579: PUSH
1580: LD_INT 217
1582: PPUSH
1583: LD_INT 78
1585: PPUSH
1586: CALL_OW 428
1590: ST_TO_ADDR
// arDepot := depot ;
1591: LD_ADDR_EXP 44
1595: PUSH
1596: LD_VAR 0 9
1600: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 , 120 ] [ Difficulty ] ) ;
1601: LD_VAR 0 9
1605: PPUSH
1606: CALL_OW 274
1610: PPUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_INT 360
1616: PUSH
1617: LD_INT 260
1619: PUSH
1620: LD_INT 160
1622: PUSH
1623: LD_INT 120
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: LD_OWVAR 67
1636: ARRAY
1637: PPUSH
1638: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 130 , 100 ] [ Difficulty ] ) ;
1642: LD_VAR 0 9
1646: PPUSH
1647: CALL_OW 274
1651: PPUSH
1652: LD_INT 2
1654: PPUSH
1655: LD_INT 200
1657: PUSH
1658: LD_INT 170
1660: PUSH
1661: LD_INT 130
1663: PUSH
1664: LD_INT 100
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_OWVAR 67
1677: ARRAY
1678: PPUSH
1679: CALL_OW 277
// uc_nation := 2 ;
1683: LD_ADDR_OWVAR 21
1687: PUSH
1688: LD_INT 2
1690: ST_TO_ADDR
// uc_side := 2 ;
1691: LD_ADDR_OWVAR 20
1695: PUSH
1696: LD_INT 2
1698: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
1699: LD_INT 13
1701: PPUSH
1702: LD_INT 1
1704: PPUSH
1705: LD_INT 1
1707: PPUSH
1708: LD_INT 27
1710: PPUSH
1711: LD_INT 33
1713: PPUSH
1714: CALL 30138 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
1718: CALL_OW 45
1722: PPUSH
1723: LD_INT 190
1725: PPUSH
1726: LD_INT 64
1728: PPUSH
1729: LD_INT 5
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: CALL 64143 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
1739: LD_INT 13
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 25
1750: PPUSH
1751: LD_INT 22
1753: PPUSH
1754: CALL 30138 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
1758: CALL_OW 45
1762: PPUSH
1763: LD_INT 188
1765: PPUSH
1766: LD_INT 67
1768: PPUSH
1769: LD_INT 5
1771: PPUSH
1772: LD_INT 0
1774: PPUSH
1775: CALL 64143 0 5
// if hasRemote then
1779: LD_VAR 0 6
1783: IFFALSE 1865
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
1785: LD_INT 13
1787: PPUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_INT 31
1796: PPUSH
1797: LD_INT 35
1799: PPUSH
1800: CALL 30138 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
1804: CALL_OW 45
1808: PPUSH
1809: LD_INT 191
1811: PPUSH
1812: LD_INT 71
1814: PPUSH
1815: LD_INT 5
1817: PPUSH
1818: LD_INT 0
1820: PPUSH
1821: CALL 64143 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
1825: LD_INT 14
1827: PPUSH
1828: LD_INT 1
1830: PPUSH
1831: LD_INT 2
1833: PPUSH
1834: LD_INT 27
1836: PPUSH
1837: LD_INT 55
1839: PPUSH
1840: CALL 30138 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
1844: CALL_OW 45
1848: PPUSH
1849: LD_INT 199
1851: PPUSH
1852: LD_INT 67
1854: PPUSH
1855: LD_INT 0
1857: PPUSH
1858: LD_INT 0
1860: PPUSH
1861: CALL 64143 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1865: LD_EXP 30
1869: PPUSH
1870: LD_INT 213
1872: PPUSH
1873: LD_INT 87
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1883: LD_EXP 30
1887: PPUSH
1888: LD_INT 214
1890: PPUSH
1891: LD_INT 87
1893: PPUSH
1894: CALL_OW 118
// if Kaia then
1898: LD_EXP 35
1902: IFFALSE 1937
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1904: LD_EXP 35
1908: PPUSH
1909: LD_INT 213
1911: PPUSH
1912: LD_INT 85
1914: PPUSH
1915: LD_INT 0
1917: PPUSH
1918: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1922: LD_EXP 35
1926: PPUSH
1927: LD_INT 215
1929: PPUSH
1930: LD_INT 87
1932: PPUSH
1933: CALL_OW 118
// end ; if Olaf and Kaia then
1937: LD_EXP 39
1941: PUSH
1942: LD_EXP 35
1946: AND
1947: IFFALSE 1984
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1949: LD_EXP 39
1953: PPUSH
1954: LD_INT 215
1956: PPUSH
1957: LD_INT 87
1959: PPUSH
1960: LD_INT 0
1962: PPUSH
1963: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1967: LD_EXP 39
1971: PPUSH
1972: LD_INT 213
1974: PPUSH
1975: LD_INT 85
1977: PPUSH
1978: CALL_OW 118
// end else
1982: GO 2004
// if Olaf then
1984: LD_EXP 39
1988: IFFALSE 2004
// PlaceHumanInUnit ( Olaf , factory ) ;
1990: LD_EXP 39
1994: PPUSH
1995: LD_VAR 0 8
1999: PPUSH
2000: CALL_OW 52
// if Givi then
2004: LD_EXP 31
2008: IFFALSE 2089
// begin if Kaia and Olaf then
2010: LD_EXP 35
2014: PUSH
2015: LD_EXP 39
2019: AND
2020: IFFALSE 2057
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2022: LD_EXP 31
2026: PPUSH
2027: LD_INT 247
2029: PPUSH
2030: LD_INT 117
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2040: LD_EXP 31
2044: PPUSH
2045: LD_INT 248
2047: PPUSH
2048: LD_INT 118
2050: PPUSH
2051: CALL_OW 118
// end else
2055: GO 2089
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2057: LD_EXP 31
2061: PPUSH
2062: LD_INT 216
2064: PPUSH
2065: LD_INT 88
2067: PPUSH
2068: LD_INT 0
2070: PPUSH
2071: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2075: LD_EXP 31
2079: PPUSH
2080: LD_EXP 30
2084: PPUSH
2085: CALL_OW 119
// end ; end ; if Kurt then
2089: LD_EXP 41
2093: IFFALSE 2113
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2095: LD_EXP 41
2099: PPUSH
2100: LD_VAR 0 11
2104: PUSH
2105: LD_INT 2
2107: ARRAY
2108: PPUSH
2109: CALL_OW 52
// if Mike then
2113: LD_EXP 32
2117: IFFALSE 2137
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2119: LD_EXP 32
2123: PPUSH
2124: LD_VAR 0 11
2128: PUSH
2129: LD_INT 3
2131: ARRAY
2132: PPUSH
2133: CALL_OW 52
// if Kamil then
2137: LD_EXP 34
2141: IFFALSE 2203
// begin if Kaia and Olaf then
2143: LD_EXP 35
2147: PUSH
2148: LD_EXP 39
2152: AND
2153: IFFALSE 2171
// PlaceHumanInUnit ( Kamil , depot ) else
2155: LD_EXP 34
2159: PPUSH
2160: LD_VAR 0 9
2164: PPUSH
2165: CALL_OW 52
2169: GO 2203
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
2171: LD_EXP 34
2175: PPUSH
2176: LD_INT 213
2178: PPUSH
2179: LD_INT 87
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
2189: LD_EXP 34
2193: PPUSH
2194: LD_EXP 30
2198: PPUSH
2199: CALL_OW 119
// end ; end ; if Sophia then
2203: LD_EXP 36
2207: IFFALSE 2223
// PlaceHumanInUnit ( Sophia , depot ) ;
2209: LD_EXP 36
2213: PPUSH
2214: LD_VAR 0 9
2218: PPUSH
2219: CALL_OW 52
// if Aviradze then
2223: LD_EXP 42
2227: IFFALSE 2243
// PlaceHumanInUnit ( Aviradze , lab ) ;
2229: LD_EXP 42
2233: PPUSH
2234: LD_VAR 0 10
2238: PPUSH
2239: CALL_OW 52
// if Ibrahim then
2243: LD_EXP 33
2247: IFFALSE 2263
// PlaceHumanInUnit ( Ibrahim , lab ) ;
2249: LD_EXP 33
2253: PPUSH
2254: LD_VAR 0 10
2258: PPUSH
2259: CALL_OW 52
// if Markov then
2263: LD_EXP 37
2267: IFFALSE 2283
// PlaceHumanInUnit ( Markov , factory ) ;
2269: LD_EXP 37
2273: PPUSH
2274: LD_VAR 0 8
2278: PPUSH
2279: CALL_OW 52
// if heikeSecondSquad then
2283: LD_EXP 45
2287: IFFALSE 2327
// for i in heikeSecondSquad do
2289: LD_ADDR_VAR 0 2
2293: PUSH
2294: LD_EXP 45
2298: PUSH
2299: FOR_IN
2300: IFFALSE 2325
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
2302: LD_VAR 0 2
2306: PPUSH
2307: LD_INT 190
2309: PPUSH
2310: LD_INT 65
2312: PPUSH
2313: LD_INT 5
2315: PPUSH
2316: LD_INT 0
2318: PPUSH
2319: CALL_OW 50
2323: GO 2299
2325: POP
2326: POP
// if heikeApes then
2327: LD_EXP 46
2331: IFFALSE 2371
// for i in heikeApes do
2333: LD_ADDR_VAR 0 2
2337: PUSH
2338: LD_EXP 46
2342: PUSH
2343: FOR_IN
2344: IFFALSE 2369
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_INT 190
2353: PPUSH
2354: LD_INT 70
2356: PPUSH
2357: LD_INT 5
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 50
2367: GO 2343
2369: POP
2370: POP
// end ;
2371: LD_VAR 0 1
2375: RET
// export function PrepareRolfSquad ; var i , j ; begin
2376: LD_INT 0
2378: PPUSH
2379: PPUSH
2380: PPUSH
// uc_side := 8 ;
2381: LD_ADDR_OWVAR 20
2385: PUSH
2386: LD_INT 8
2388: ST_TO_ADDR
// uc_nation := 2 ;
2389: LD_ADDR_OWVAR 21
2393: PUSH
2394: LD_INT 2
2396: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
2397: LD_ADDR_EXP 43
2401: PUSH
2402: LD_STRING Bergkamp
2404: PPUSH
2405: CALL_OW 25
2409: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
2410: LD_ADDR_EXP 47
2414: PUSH
2415: LD_EXP 43
2419: PUSH
2420: EMPTY
2421: LIST
2422: ST_TO_ADDR
// for i := 1 to 4 do
2423: LD_ADDR_VAR 0 2
2427: PUSH
2428: DOUBLE
2429: LD_INT 1
2431: DEC
2432: ST_TO_ADDR
2433: LD_INT 4
2435: PUSH
2436: FOR_TO
2437: IFFALSE 2517
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
2439: LD_ADDR_VAR 0 3
2443: PUSH
2444: DOUBLE
2445: LD_INT 1
2447: DEC
2448: ST_TO_ADDR
2449: LD_INT 5
2451: PUSH
2452: LD_INT 2
2454: PUSH
2455: LD_INT 3
2457: PUSH
2458: LD_INT 1
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: PUSH
2467: LD_VAR 0 2
2471: ARRAY
2472: PUSH
2473: FOR_TO
2474: IFFALSE 2513
// begin PrepareHuman ( false , i , 5 ) ;
2476: LD_INT 0
2478: PPUSH
2479: LD_VAR 0 2
2483: PPUSH
2484: LD_INT 5
2486: PPUSH
2487: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
2491: LD_ADDR_EXP 47
2495: PUSH
2496: LD_EXP 47
2500: PPUSH
2501: CALL_OW 44
2505: PPUSH
2506: CALL 62011 0 2
2510: ST_TO_ADDR
// end ;
2511: GO 2473
2513: POP
2514: POP
// end ;
2515: GO 2436
2517: POP
2518: POP
// if HexInfo ( 5 , 3 ) then
2519: LD_INT 5
2521: PPUSH
2522: LD_INT 3
2524: PPUSH
2525: CALL_OW 428
2529: IFFALSE 2546
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
2531: LD_INT 5
2533: PPUSH
2534: LD_INT 3
2536: PPUSH
2537: CALL_OW 428
2541: PPUSH
2542: CALL_OW 64
// for i in rolfSquad do
2546: LD_ADDR_VAR 0 2
2550: PUSH
2551: LD_EXP 47
2555: PUSH
2556: FOR_IN
2557: IFFALSE 2693
// begin uc_direction := 2 ;
2559: LD_ADDR_OWVAR 24
2563: PUSH
2564: LD_INT 2
2566: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
2567: LD_VAR 0 2
2571: PPUSH
2572: CALL_OW 257
2576: PUSH
2577: LD_INT 3
2579: EQUAL
2580: IFFALSE 2654
// begin uc_side := 8 ;
2582: LD_ADDR_OWVAR 20
2586: PUSH
2587: LD_INT 8
2589: ST_TO_ADDR
// uc_nation := 2 ;
2590: LD_ADDR_OWVAR 21
2594: PUSH
2595: LD_INT 2
2597: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
2598: LD_INT 13
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: LD_INT 27
2609: PPUSH
2610: LD_INT 88
2612: PPUSH
2613: CALL 30138 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
2617: CALL_OW 45
2621: PPUSH
2622: LD_INT 11
2624: PPUSH
2625: LD_INT 0
2627: PPUSH
2628: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
2632: LD_VAR 0 2
2636: PPUSH
2637: LD_INT 5
2639: PPUSH
2640: LD_INT 3
2642: PPUSH
2643: CALL_OW 428
2647: PPUSH
2648: CALL_OW 52
// end else
2652: GO 2669
// PlaceUnitArea ( i , northSpawn , false ) ;
2654: LD_VAR 0 2
2658: PPUSH
2659: LD_INT 11
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
2669: LD_VAR 0 2
2673: PPUSH
2674: LD_INT 29
2676: PPUSH
2677: LD_INT 10
2679: PPUSH
2680: CALL_OW 111
// wait ( 0 0$2 ) ;
2684: LD_INT 70
2686: PPUSH
2687: CALL_OW 67
// end ;
2691: GO 2556
2693: POP
2694: POP
// wait ( 0 0$5 ) ;
2695: LD_INT 175
2697: PPUSH
2698: CALL_OW 67
// end ;
2702: LD_VAR 0 1
2706: RET
// export function PrepareRolfBase ; var i , tmp ; begin
2707: LD_INT 0
2709: PPUSH
2710: PPUSH
2711: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
2712: LD_EXP 43
2716: PPUSH
2717: LD_INT 94
2719: PPUSH
2720: LD_INT 63
2722: PPUSH
2723: CALL_OW 428
2727: PPUSH
2728: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
2732: LD_ADDR_VAR 0 3
2736: PUSH
2737: LD_INT 4
2739: PUSH
2740: LD_INT 82
2742: PUSH
2743: LD_INT 64
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 31
2757: PUSH
2758: LD_INT 73
2760: PUSH
2761: LD_INT 58
2763: PUSH
2764: LD_INT 0
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: LIST
2771: LIST
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: ST_TO_ADDR
// for i in tmp do
2777: LD_ADDR_VAR 0 2
2781: PUSH
2782: LD_VAR 0 3
2786: PUSH
2787: FOR_IN
2788: IFFALSE 2852
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2790: LD_EXP 47
2794: PPUSH
2795: LD_INT 25
2797: PUSH
2798: LD_INT 2
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PPUSH
2805: CALL_OW 72
2809: PPUSH
2810: LD_VAR 0 2
2814: PUSH
2815: LD_INT 1
2817: ARRAY
2818: PPUSH
2819: LD_VAR 0 2
2823: PUSH
2824: LD_INT 2
2826: ARRAY
2827: PPUSH
2828: LD_VAR 0 2
2832: PUSH
2833: LD_INT 3
2835: ARRAY
2836: PPUSH
2837: LD_VAR 0 2
2841: PUSH
2842: LD_INT 4
2844: ARRAY
2845: PPUSH
2846: CALL_OW 205
2850: GO 2787
2852: POP
2853: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
2854: LD_EXP 47
2858: PUSH
2859: LD_INT 2
2861: ARRAY
2862: PPUSH
2863: LD_INT 63
2865: PPUSH
2866: LD_INT 42
2868: PPUSH
2869: CALL_OW 428
2873: PPUSH
2874: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
2878: LD_EXP 47
2882: PUSH
2883: LD_INT 3
2885: ARRAY
2886: PPUSH
2887: LD_INT 94
2889: PPUSH
2890: LD_INT 63
2892: PPUSH
2893: CALL_OW 428
2897: PPUSH
2898: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2902: LD_INT 35
2904: PPUSH
2905: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
2909: LD_EXP 47
2913: PPUSH
2914: LD_INT 25
2916: PUSH
2917: LD_INT 2
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: PUSH
2924: LD_INT 3
2926: PUSH
2927: LD_INT 60
2929: PUSH
2930: EMPTY
2931: LIST
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PPUSH
2941: CALL_OW 72
2945: IFFALSE 2902
// rolfScriptBase := true ;
2947: LD_ADDR_EXP 9
2951: PUSH
2952: LD_INT 1
2954: ST_TO_ADDR
// end ;
2955: LD_VAR 0 1
2959: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
2960: LD_EXP 9
2964: PUSH
2965: LD_EXP 43
2969: PPUSH
2970: CALL_OW 255
2974: PUSH
2975: LD_INT 8
2977: EQUAL
2978: AND
2979: IFFALSE 3986
2981: GO 2983
2983: DISABLE
2984: LD_INT 0
2986: PPUSH
2987: PPUSH
2988: PPUSH
2989: PPUSH
2990: PPUSH
2991: PPUSH
2992: PPUSH
2993: PPUSH
2994: PPUSH
2995: PPUSH
// begin enable ;
2996: ENABLE
// if not rolfSquad then
2997: LD_EXP 47
3001: NOT
3002: IFFALSE 3006
// exit ;
3004: GO 3986
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
3006: LD_ADDR_VAR 0 9
3010: PUSH
3011: LD_INT 12
3013: PPUSH
3014: LD_INT 81
3016: PUSH
3017: LD_INT 8
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PPUSH
3024: CALL_OW 70
3028: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
3029: LD_ADDR_VAR 0 5
3033: PUSH
3034: LD_EXP 47
3038: PPUSH
3039: LD_INT 25
3041: PUSH
3042: LD_INT 1
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 72
3053: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3054: LD_ADDR_VAR 0 6
3058: PUSH
3059: LD_EXP 47
3063: PPUSH
3064: LD_INT 25
3066: PUSH
3067: LD_INT 2
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: PPUSH
3074: CALL_OW 72
3078: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
3079: LD_ADDR_VAR 0 8
3083: PUSH
3084: LD_EXP 47
3088: PPUSH
3089: LD_INT 25
3091: PUSH
3092: LD_INT 3
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PPUSH
3099: CALL_OW 72
3103: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
3104: LD_ADDR_VAR 0 7
3108: PUSH
3109: LD_EXP 47
3113: PPUSH
3114: LD_INT 25
3116: PUSH
3117: LD_INT 4
3119: PUSH
3120: EMPTY
3121: LIST
3122: LIST
3123: PPUSH
3124: CALL_OW 72
3128: ST_TO_ADDR
// if sol then
3129: LD_VAR 0 5
3133: IFFALSE 3431
// for i in sol union Rolf do
3135: LD_ADDR_VAR 0 1
3139: PUSH
3140: LD_VAR 0 5
3144: PUSH
3145: LD_EXP 43
3149: UNION
3150: PUSH
3151: FOR_IN
3152: IFFALSE 3429
// if not IsInUnit ( i ) and not HasTask ( i ) then
3154: LD_VAR 0 1
3158: PPUSH
3159: CALL_OW 310
3163: NOT
3164: PUSH
3165: LD_VAR 0 1
3169: PPUSH
3170: CALL_OW 314
3174: NOT
3175: AND
3176: IFFALSE 3427
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
3178: LD_VAR 0 1
3182: PPUSH
3183: CALL_OW 256
3187: PUSH
3188: LD_INT 500
3190: LESS
3191: PUSH
3192: LD_VAR 0 1
3196: PPUSH
3197: LD_INT 80
3199: PPUSH
3200: LD_INT 49
3202: PPUSH
3203: CALL_OW 297
3207: PUSH
3208: LD_INT 6
3210: GREATER
3211: AND
3212: IFFALSE 3231
// begin ComMoveXY ( i , 80 , 49 ) ;
3214: LD_VAR 0 1
3218: PPUSH
3219: LD_INT 80
3221: PPUSH
3222: LD_INT 49
3224: PPUSH
3225: CALL_OW 111
// continue ;
3229: GO 3151
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
3231: LD_ADDR_VAR 0 4
3235: PUSH
3236: LD_INT 22
3238: PUSH
3239: LD_INT 8
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: LD_INT 50
3248: PUSH
3249: EMPTY
3250: LIST
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: LD_INT 30
3257: PUSH
3258: LD_INT 4
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: LD_INT 30
3267: PUSH
3268: LD_INT 5
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 30
3277: PUSH
3278: LD_INT 32
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: LD_INT 30
3287: PUSH
3288: LD_INT 31
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: LIST
3306: PPUSH
3307: CALL_OW 69
3311: ST_TO_ADDR
// if tmp then
3312: LD_VAR 0 4
3316: IFFALSE 3427
// begin for b in tmp do
3318: LD_ADDR_VAR 0 2
3322: PUSH
3323: LD_VAR 0 4
3327: PUSH
3328: FOR_IN
3329: IFFALSE 3425
// begin case GetBType ( b ) of b_armoury , b_barracks :
3331: LD_VAR 0 2
3335: PPUSH
3336: CALL_OW 266
3340: PUSH
3341: LD_INT 4
3343: DOUBLE
3344: EQUAL
3345: IFTRUE 3355
3347: LD_INT 5
3349: DOUBLE
3350: EQUAL
3351: IFTRUE 3355
3353: GO 3366
3355: POP
// p := 6 ; b_breastwork , b_bunker :
3356: LD_ADDR_VAR 0 3
3360: PUSH
3361: LD_INT 6
3363: ST_TO_ADDR
3364: GO 3392
3366: LD_INT 31
3368: DOUBLE
3369: EQUAL
3370: IFTRUE 3380
3372: LD_INT 32
3374: DOUBLE
3375: EQUAL
3376: IFTRUE 3380
3378: GO 3391
3380: POP
// p := 1 ; end ;
3381: LD_ADDR_VAR 0 3
3385: PUSH
3386: LD_INT 1
3388: ST_TO_ADDR
3389: GO 3392
3391: POP
// if UnitsInside ( b ) < p then
3392: LD_VAR 0 2
3396: PPUSH
3397: CALL_OW 313
3401: PUSH
3402: LD_VAR 0 3
3406: LESS
3407: IFFALSE 3423
// ComEnterUnit ( i , b ) ;
3409: LD_VAR 0 1
3413: PPUSH
3414: LD_VAR 0 2
3418: PPUSH
3419: CALL_OW 120
// end ;
3423: GO 3328
3425: POP
3426: POP
// end ; end ;
3427: GO 3151
3429: POP
3430: POP
// if sci then
3431: LD_VAR 0 7
3435: IFFALSE 3490
// for i in sci do
3437: LD_ADDR_VAR 0 1
3441: PUSH
3442: LD_VAR 0 7
3446: PUSH
3447: FOR_IN
3448: IFFALSE 3488
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
3450: LD_VAR 0 1
3454: PPUSH
3455: LD_INT 80
3457: PPUSH
3458: LD_INT 49
3460: PPUSH
3461: CALL_OW 297
3465: PUSH
3466: LD_INT 9
3468: GREATER
3469: IFFALSE 3486
// ComMoveXY ( i , 80 , 49 ) ;
3471: LD_VAR 0 1
3475: PPUSH
3476: LD_INT 80
3478: PPUSH
3479: LD_INT 49
3481: PPUSH
3482: CALL_OW 111
// end ;
3486: GO 3447
3488: POP
3489: POP
// if mech then
3490: LD_VAR 0 8
3494: IFFALSE 3708
// for i in mech do
3496: LD_ADDR_VAR 0 1
3500: PUSH
3501: LD_VAR 0 8
3505: PUSH
3506: FOR_IN
3507: IFFALSE 3706
// begin hasVehicle := IsInUnit ( i ) ;
3509: LD_ADDR_VAR 0 10
3513: PUSH
3514: LD_VAR 0 1
3518: PPUSH
3519: CALL_OW 310
3523: ST_TO_ADDR
// if enemyInBase then
3524: LD_VAR 0 9
3528: IFFALSE 3624
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
3530: LD_VAR 0 10
3534: PUSH
3535: LD_VAR 0 10
3539: PPUSH
3540: CALL_OW 256
3544: PUSH
3545: LD_INT 500
3547: GREATER
3548: AND
3549: IFFALSE 3577
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
3551: LD_VAR 0 10
3555: PPUSH
3556: LD_VAR 0 9
3560: PPUSH
3561: LD_VAR 0 10
3565: PPUSH
3566: CALL_OW 74
3570: PPUSH
3571: CALL_OW 115
3575: GO 3622
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
3577: LD_VAR 0 10
3581: PPUSH
3582: LD_INT 86
3584: PPUSH
3585: LD_INT 49
3587: PPUSH
3588: CALL_OW 297
3592: PUSH
3593: LD_INT 8
3595: GREATER
3596: IFFALSE 3622
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
3598: LD_VAR 0 10
3602: PPUSH
3603: LD_INT 86
3605: PPUSH
3606: LD_INT 49
3608: PPUSH
3609: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
3613: LD_VAR 0 1
3617: PPUSH
3618: CALL 63823 0 1
// end end else
3622: GO 3704
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
3624: LD_VAR 0 1
3628: PPUSH
3629: LD_INT 86
3631: PPUSH
3632: LD_INT 49
3634: PPUSH
3635: CALL_OW 297
3639: PUSH
3640: LD_INT 8
3642: GREATER
3643: IFFALSE 3662
// ComMoveXY ( i , 86 , 49 ) else
3645: LD_VAR 0 1
3649: PPUSH
3650: LD_INT 86
3652: PPUSH
3653: LD_INT 49
3655: PPUSH
3656: CALL_OW 111
3660: GO 3704
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
3662: LD_VAR 0 10
3666: PUSH
3667: LD_VAR 0 10
3671: PPUSH
3672: CALL_OW 256
3676: PUSH
3677: LD_INT 1000
3679: LESS
3680: AND
3681: IFFALSE 3704
// begin SetFuel ( hasVehicle , 100 ) ;
3683: LD_VAR 0 10
3687: PPUSH
3688: LD_INT 100
3690: PPUSH
3691: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
3695: LD_VAR 0 1
3699: PPUSH
3700: CALL 63703 0 1
// end ; end ; end ;
3704: GO 3506
3706: POP
3707: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3708: LD_ADDR_VAR 0 4
3712: PUSH
3713: LD_INT 12
3715: PPUSH
3716: LD_INT 3
3718: PUSH
3719: LD_INT 24
3721: PUSH
3722: LD_INT 1000
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: PUSH
3733: LD_INT 21
3735: PUSH
3736: LD_INT 3
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: PPUSH
3747: CALL_OW 70
3751: ST_TO_ADDR
// if tmp and eng then
3752: LD_VAR 0 4
3756: PUSH
3757: LD_VAR 0 6
3761: AND
3762: IFFALSE 3868
// begin for i in eng do
3764: LD_ADDR_VAR 0 1
3768: PUSH
3769: LD_VAR 0 6
3773: PUSH
3774: FOR_IN
3775: IFFALSE 3866
// if IsInUnit ( i ) then
3777: LD_VAR 0 1
3781: PPUSH
3782: CALL_OW 310
3786: IFFALSE 3799
// ComExitBuilding ( i ) else
3788: LD_VAR 0 1
3792: PPUSH
3793: CALL_OW 122
3797: GO 3864
// if GetLives ( i ) = 1000 then
3799: LD_VAR 0 1
3803: PPUSH
3804: CALL_OW 256
3808: PUSH
3809: LD_INT 1000
3811: EQUAL
3812: IFFALSE 3834
// ComRepairBuilding ( i , tmp [ 1 ] ) else
3814: LD_VAR 0 1
3818: PPUSH
3819: LD_VAR 0 4
3823: PUSH
3824: LD_INT 1
3826: ARRAY
3827: PPUSH
3828: CALL_OW 130
3832: GO 3864
// if GetLives ( i ) < 700 then
3834: LD_VAR 0 1
3838: PPUSH
3839: CALL_OW 256
3843: PUSH
3844: LD_INT 700
3846: LESS
3847: IFFALSE 3864
// ComMoveXY ( i , 80 , 49 ) ;
3849: LD_VAR 0 1
3853: PPUSH
3854: LD_INT 80
3856: PPUSH
3857: LD_INT 49
3859: PPUSH
3860: CALL_OW 111
3864: GO 3774
3866: POP
3867: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
3868: LD_VAR 0 4
3872: NOT
3873: PUSH
3874: LD_VAR 0 6
3878: PPUSH
3879: LD_INT 3
3881: PUSH
3882: LD_INT 54
3884: PUSH
3885: EMPTY
3886: LIST
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PPUSH
3892: CALL_OW 72
3896: AND
3897: IFFALSE 3986
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
3899: LD_ADDR_VAR 0 1
3903: PUSH
3904: LD_VAR 0 6
3908: PPUSH
3909: LD_INT 3
3911: PUSH
3912: LD_INT 54
3914: PUSH
3915: EMPTY
3916: LIST
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PPUSH
3922: CALL_OW 72
3926: PUSH
3927: FOR_IN
3928: IFFALSE 3984
// if GetLives ( i ) < 1000 then
3930: LD_VAR 0 1
3934: PPUSH
3935: CALL_OW 256
3939: PUSH
3940: LD_INT 1000
3942: LESS
3943: IFFALSE 3962
// ComMoveXY ( i , 80 , 49 ) else
3945: LD_VAR 0 1
3949: PPUSH
3950: LD_INT 80
3952: PPUSH
3953: LD_INT 49
3955: PPUSH
3956: CALL_OW 111
3960: GO 3982
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
3962: LD_VAR 0 1
3966: PPUSH
3967: LD_INT 86
3969: PPUSH
3970: LD_INT 54
3972: PPUSH
3973: CALL_OW 428
3977: PPUSH
3978: CALL_OW 120
3982: GO 3927
3984: POP
3985: POP
// end ;
3986: PPOPN 10
3988: END
// export function PrepareOmarSquad ; var i , j , p ; begin
3989: LD_INT 0
3991: PPUSH
3992: PPUSH
3993: PPUSH
3994: PPUSH
// uc_side := 5 ;
3995: LD_ADDR_OWVAR 20
3999: PUSH
4000: LD_INT 5
4002: ST_TO_ADDR
// uc_nation := 2 ;
4003: LD_ADDR_OWVAR 21
4007: PUSH
4008: LD_INT 2
4010: ST_TO_ADDR
// omarSquad := [ ] ;
4011: LD_ADDR_EXP 48
4015: PUSH
4016: EMPTY
4017: ST_TO_ADDR
// for i := 1 to 4 do
4018: LD_ADDR_VAR 0 2
4022: PUSH
4023: DOUBLE
4024: LD_INT 1
4026: DEC
4027: ST_TO_ADDR
4028: LD_INT 4
4030: PUSH
4031: FOR_TO
4032: IFFALSE 4155
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
4034: LD_ADDR_VAR 0 3
4038: PUSH
4039: DOUBLE
4040: LD_INT 1
4042: DEC
4043: ST_TO_ADDR
4044: LD_INT 6
4046: PUSH
4047: LD_INT 2
4049: PUSH
4050: LD_INT 2
4052: PUSH
4053: LD_EXP 21
4057: PLUS
4058: PUSH
4059: LD_INT 2
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: PUSH
4068: LD_VAR 0 2
4072: ARRAY
4073: PUSH
4074: FOR_TO
4075: IFFALSE 4151
// begin PrepareHuman ( false , i , 5 ) ;
4077: LD_INT 0
4079: PPUSH
4080: LD_VAR 0 2
4084: PPUSH
4085: LD_INT 5
4087: PPUSH
4088: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
4092: LD_ADDR_EXP 48
4096: PUSH
4097: LD_EXP 48
4101: PPUSH
4102: CALL_OW 44
4106: PPUSH
4107: CALL 62011 0 2
4111: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
4112: LD_VAR 0 2
4116: PUSH
4117: LD_INT 1
4119: EQUAL
4120: PUSH
4121: LD_INT 50
4123: PPUSH
4124: CALL_OW 13
4128: AND
4129: IFFALSE 4149
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
4131: LD_EXP 48
4135: PUSH
4136: LD_EXP 48
4140: ARRAY
4141: PPUSH
4142: LD_INT 8
4144: PPUSH
4145: CALL_OW 336
// end ;
4149: GO 4074
4151: POP
4152: POP
// end ;
4153: GO 4031
4155: POP
4156: POP
// if HexInfo ( 340 , 205 ) then
4157: LD_INT 340
4159: PPUSH
4160: LD_INT 205
4162: PPUSH
4163: CALL_OW 428
4167: IFFALSE 4184
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
4169: LD_INT 340
4171: PPUSH
4172: LD_INT 205
4174: PPUSH
4175: CALL_OW 428
4179: PPUSH
4180: CALL_OW 64
// p := 0 ;
4184: LD_ADDR_VAR 0 4
4188: PUSH
4189: LD_INT 0
4191: ST_TO_ADDR
// for i in omarSquad do
4192: LD_ADDR_VAR 0 2
4196: PUSH
4197: LD_EXP 48
4201: PUSH
4202: FOR_IN
4203: IFFALSE 4404
// begin uc_direction := 4 ;
4205: LD_ADDR_OWVAR 24
4209: PUSH
4210: LD_INT 4
4212: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
4213: LD_VAR 0 2
4217: PPUSH
4218: CALL_OW 257
4222: PUSH
4223: LD_INT 3
4225: EQUAL
4226: PUSH
4227: LD_VAR 0 4
4231: PUSH
4232: LD_INT 2
4234: LESS
4235: AND
4236: IFFALSE 4365
// begin p := p + 1 ;
4238: LD_ADDR_VAR 0 4
4242: PUSH
4243: LD_VAR 0 4
4247: PUSH
4248: LD_INT 1
4250: PLUS
4251: ST_TO_ADDR
// uc_side := 5 ;
4252: LD_ADDR_OWVAR 20
4256: PUSH
4257: LD_INT 5
4259: ST_TO_ADDR
// if rand ( 0 , 1 ) then
4260: LD_INT 0
4262: PPUSH
4263: LD_INT 1
4265: PPUSH
4266: CALL_OW 12
4270: IFFALSE 4301
// begin uc_nation := 2 ;
4272: LD_ADDR_OWVAR 21
4276: PUSH
4277: LD_INT 2
4279: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
4280: LD_INT 13
4282: PPUSH
4283: LD_INT 1
4285: PPUSH
4286: LD_INT 1
4288: PPUSH
4289: LD_INT 27
4291: PPUSH
4292: LD_INT 88
4294: PPUSH
4295: CALL 30138 0 5
// end else
4299: GO 4328
// begin uc_nation := 3 ;
4301: LD_ADDR_OWVAR 21
4305: PUSH
4306: LD_INT 3
4308: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
4309: LD_INT 22
4311: PPUSH
4312: LD_INT 1
4314: PPUSH
4315: LD_INT 1
4317: PPUSH
4318: LD_INT 45
4320: PPUSH
4321: LD_INT 88
4323: PPUSH
4324: CALL 30138 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
4328: CALL_OW 45
4332: PPUSH
4333: LD_INT 13
4335: PPUSH
4336: LD_INT 0
4338: PPUSH
4339: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
4343: LD_VAR 0 2
4347: PPUSH
4348: LD_INT 340
4350: PPUSH
4351: LD_INT 205
4353: PPUSH
4354: CALL_OW 428
4358: PPUSH
4359: CALL_OW 52
// end else
4363: GO 4380
// PlaceUnitArea ( i , southSpawn , false ) ;
4365: LD_VAR 0 2
4369: PPUSH
4370: LD_INT 13
4372: PPUSH
4373: LD_INT 0
4375: PPUSH
4376: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
4380: LD_VAR 0 2
4384: PPUSH
4385: LD_INT 333
4387: PPUSH
4388: LD_INT 210
4390: PPUSH
4391: CALL_OW 111
// wait ( 0 0$2 ) ;
4395: LD_INT 70
4397: PPUSH
4398: CALL_OW 67
// end ;
4402: GO 4202
4404: POP
4405: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
4406: LD_EXP 40
4410: PPUSH
4411: LD_INT 340
4413: PPUSH
4414: LD_INT 205
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
4424: LD_EXP 40
4428: PPUSH
4429: LD_INT 333
4431: PPUSH
4432: LD_INT 206
4434: PPUSH
4435: CALL_OW 111
// wait ( 0 0$2 ) ;
4439: LD_INT 70
4441: PPUSH
4442: CALL_OW 67
// ComHold ( omarSquad ) ;
4446: LD_EXP 48
4450: PPUSH
4451: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
4455: LD_EXP 40
4459: PUSH
4460: LD_EXP 48
4464: PPUSH
4465: LD_INT 2
4467: PUSH
4468: LD_INT 25
4470: PUSH
4471: LD_INT 1
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: PUSH
4478: LD_INT 25
4480: PUSH
4481: LD_INT 8
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: LIST
4492: PPUSH
4493: CALL_OW 72
4497: UNION
4498: PUSH
4499: LD_INT 22
4501: PUSH
4502: LD_INT 5
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: PUSH
4509: LD_INT 21
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PPUSH
4523: CALL_OW 69
4527: UNION
4528: PPUSH
4529: LD_INT 315
4531: PPUSH
4532: LD_INT 214
4534: PPUSH
4535: CALL_OW 114
// wait ( 0 0$22 ) ;
4539: LD_INT 770
4541: PPUSH
4542: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
4546: LD_EXP 48
4550: PUSH
4551: LD_EXP 40
4555: UNION
4556: PPUSH
4557: LD_INT 329
4559: PPUSH
4560: LD_INT 231
4562: PPUSH
4563: CALL_OW 114
// end ;
4567: LD_VAR 0 1
4571: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4572: LD_EXP 10
4576: IFFALSE 5659
4578: GO 4580
4580: DISABLE
4581: LD_INT 0
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
// begin enable ;
4594: ENABLE
// if not omarSquad then
4595: LD_EXP 48
4599: NOT
4600: IFFALSE 4604
// exit ;
4602: GO 5659
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
4604: LD_ADDR_VAR 0 10
4608: PUSH
4609: LD_INT 14
4611: PPUSH
4612: LD_INT 81
4614: PUSH
4615: LD_INT 5
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PPUSH
4622: CALL_OW 70
4626: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
4627: LD_ADDR_VAR 0 6
4631: PUSH
4632: LD_EXP 48
4636: PPUSH
4637: LD_INT 2
4639: PUSH
4640: LD_INT 25
4642: PUSH
4643: LD_INT 1
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: LD_INT 25
4652: PUSH
4653: LD_INT 8
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: LIST
4664: PPUSH
4665: CALL_OW 72
4669: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
4670: LD_ADDR_VAR 0 7
4674: PUSH
4675: LD_EXP 48
4679: PPUSH
4680: LD_INT 25
4682: PUSH
4683: LD_INT 2
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: PPUSH
4690: CALL_OW 72
4694: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
4695: LD_ADDR_VAR 0 9
4699: PUSH
4700: LD_EXP 48
4704: PPUSH
4705: LD_INT 25
4707: PUSH
4708: LD_INT 3
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PPUSH
4715: CALL_OW 72
4719: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
4720: LD_ADDR_VAR 0 8
4724: PUSH
4725: LD_EXP 48
4729: PPUSH
4730: LD_INT 25
4732: PUSH
4733: LD_INT 4
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PPUSH
4740: CALL_OW 72
4744: ST_TO_ADDR
// if sol then
4745: LD_VAR 0 6
4749: IFFALSE 5113
// for i in sol do
4751: LD_ADDR_VAR 0 1
4755: PUSH
4756: LD_VAR 0 6
4760: PUSH
4761: FOR_IN
4762: IFFALSE 5111
// if not HasTask ( i ) then
4764: LD_VAR 0 1
4768: PPUSH
4769: CALL_OW 314
4773: NOT
4774: IFFALSE 5109
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
4776: LD_VAR 0 1
4780: PPUSH
4781: CALL_OW 310
4785: NOT
4786: PUSH
4787: LD_VAR 0 1
4791: PPUSH
4792: CALL_OW 256
4796: PUSH
4797: LD_INT 500
4799: LESS
4800: AND
4801: PUSH
4802: LD_VAR 0 1
4806: PPUSH
4807: LD_INT 333
4809: PPUSH
4810: LD_INT 234
4812: PPUSH
4813: CALL_OW 297
4817: PUSH
4818: LD_INT 6
4820: GREATER
4821: AND
4822: IFFALSE 4841
// begin ComMoveXY ( i , 333 , 234 ) ;
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 333
4831: PPUSH
4832: LD_INT 234
4834: PPUSH
4835: CALL_OW 111
// continue ;
4839: GO 4761
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4841: LD_ADDR_VAR 0 5
4845: PUSH
4846: LD_INT 22
4848: PUSH
4849: LD_INT 5
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 58
4858: PUSH
4859: EMPTY
4860: LIST
4861: PUSH
4862: LD_INT 50
4864: PUSH
4865: EMPTY
4866: LIST
4867: PUSH
4868: LD_INT 2
4870: PUSH
4871: LD_INT 30
4873: PUSH
4874: LD_INT 32
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 30
4883: PUSH
4884: LD_INT 31
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: LIST
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 69
4906: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
4907: LD_VAR 0 5
4911: PUSH
4912: LD_VAR 0 1
4916: PPUSH
4917: CALL_OW 310
4921: PPUSH
4922: CALL_OW 266
4926: PUSH
4927: LD_INT 31
4929: NONEQUAL
4930: AND
4931: IFFALSE 5013
// begin for j in tmp do
4933: LD_ADDR_VAR 0 2
4937: PUSH
4938: LD_VAR 0 5
4942: PUSH
4943: FOR_IN
4944: IFFALSE 5009
// if GetTag ( j ) <> 1 then
4946: LD_VAR 0 2
4950: PPUSH
4951: CALL_OW 110
4955: PUSH
4956: LD_INT 1
4958: NONEQUAL
4959: IFFALSE 5007
// begin SetTag ( j , 1 ) ;
4961: LD_VAR 0 2
4965: PPUSH
4966: LD_INT 1
4968: PPUSH
4969: CALL_OW 109
// if IsInUnit ( i ) then
4973: LD_VAR 0 1
4977: PPUSH
4978: CALL_OW 310
4982: IFFALSE 4993
// ComExit ( i ) ;
4984: LD_VAR 0 1
4988: PPUSH
4989: CALL 62399 0 1
// AddComEnterUnit ( i , j ) ;
4993: LD_VAR 0 1
4997: PPUSH
4998: LD_VAR 0 2
5002: PPUSH
5003: CALL_OW 180
// end ;
5007: GO 4943
5009: POP
5010: POP
// end else
5011: GO 5109
// if not IsInUnit ( i ) then
5013: LD_VAR 0 1
5017: PPUSH
5018: CALL_OW 310
5022: NOT
5023: IFFALSE 5109
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
5025: LD_ADDR_VAR 0 5
5029: PUSH
5030: LD_INT 22
5032: PUSH
5033: LD_INT 5
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 50
5042: PUSH
5043: EMPTY
5044: LIST
5045: PUSH
5046: LD_INT 30
5048: PUSH
5049: LD_INT 4
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: LIST
5060: PPUSH
5061: CALL_OW 69
5065: ST_TO_ADDR
// if tmp then
5066: LD_VAR 0 5
5070: IFFALSE 5109
// if UnitsInside ( tmp [ 1 ] ) < 6 then
5072: LD_VAR 0 5
5076: PUSH
5077: LD_INT 1
5079: ARRAY
5080: PPUSH
5081: CALL_OW 313
5085: PUSH
5086: LD_INT 6
5088: LESS
5089: IFFALSE 5109
// ComEnterUnit ( i , tmp [ 1 ] ) ;
5091: LD_VAR 0 1
5095: PPUSH
5096: LD_VAR 0 5
5100: PUSH
5101: LD_INT 1
5103: ARRAY
5104: PPUSH
5105: CALL_OW 120
// end ; end ;
5109: GO 4761
5111: POP
5112: POP
// if sci then
5113: LD_VAR 0 8
5117: IFFALSE 5172
// for i in sci do
5119: LD_ADDR_VAR 0 1
5123: PUSH
5124: LD_VAR 0 8
5128: PUSH
5129: FOR_IN
5130: IFFALSE 5170
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
5132: LD_VAR 0 1
5136: PPUSH
5137: LD_INT 333
5139: PPUSH
5140: LD_INT 234
5142: PPUSH
5143: CALL_OW 297
5147: PUSH
5148: LD_INT 9
5150: GREATER
5151: IFFALSE 5168
// ComMoveXY ( i , 333 , 234 ) ;
5153: LD_VAR 0 1
5157: PPUSH
5158: LD_INT 333
5160: PPUSH
5161: LD_INT 234
5163: PPUSH
5164: CALL_OW 111
// end ;
5168: GO 5129
5170: POP
5171: POP
// if mech then
5172: LD_VAR 0 9
5176: IFFALSE 5381
// for i in mech do
5178: LD_ADDR_VAR 0 1
5182: PUSH
5183: LD_VAR 0 9
5187: PUSH
5188: FOR_IN
5189: IFFALSE 5379
// begin hasVehicle := IsInUnit ( i ) ;
5191: LD_ADDR_VAR 0 11
5195: PUSH
5196: LD_VAR 0 1
5200: PPUSH
5201: CALL_OW 310
5205: ST_TO_ADDR
// if enemyInBase then
5206: LD_VAR 0 10
5210: IFFALSE 5297
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
5212: LD_VAR 0 11
5216: PUSH
5217: LD_VAR 0 11
5221: PPUSH
5222: CALL_OW 256
5226: PUSH
5227: LD_INT 500
5229: GREATER
5230: AND
5231: IFFALSE 5259
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
5233: LD_VAR 0 11
5237: PPUSH
5238: LD_VAR 0 10
5242: PPUSH
5243: LD_VAR 0 11
5247: PPUSH
5248: CALL_OW 74
5252: PPUSH
5253: CALL_OW 115
5257: GO 5295
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
5259: LD_VAR 0 11
5263: PPUSH
5264: LD_INT 333
5266: PPUSH
5267: LD_INT 234
5269: PPUSH
5270: CALL_OW 297
5274: PUSH
5275: LD_INT 6
5277: GREATER
5278: IFFALSE 5295
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
5280: LD_VAR 0 11
5284: PPUSH
5285: LD_INT 333
5287: PPUSH
5288: LD_INT 234
5290: PPUSH
5291: CALL_OW 111
// end else
5295: GO 5377
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
5297: LD_VAR 0 1
5301: PPUSH
5302: LD_INT 333
5304: PPUSH
5305: LD_INT 234
5307: PPUSH
5308: CALL_OW 297
5312: PUSH
5313: LD_INT 6
5315: GREATER
5316: IFFALSE 5335
// ComMoveXY ( i , 333 , 234 ) else
5318: LD_VAR 0 1
5322: PPUSH
5323: LD_INT 333
5325: PPUSH
5326: LD_INT 234
5328: PPUSH
5329: CALL_OW 111
5333: GO 5377
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
5335: LD_VAR 0 11
5339: PUSH
5340: LD_VAR 0 11
5344: PPUSH
5345: CALL_OW 256
5349: PUSH
5350: LD_INT 1000
5352: LESS
5353: AND
5354: IFFALSE 5377
// begin SetFuel ( hasVehicle , 100 ) ;
5356: LD_VAR 0 11
5360: PPUSH
5361: LD_INT 100
5363: PPUSH
5364: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
5368: LD_VAR 0 1
5372: PPUSH
5373: CALL 63703 0 1
// end ; end ; end ;
5377: GO 5188
5379: POP
5380: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
5381: LD_ADDR_VAR 0 5
5385: PUSH
5386: LD_INT 14
5388: PPUSH
5389: LD_INT 3
5391: PUSH
5392: LD_INT 24
5394: PUSH
5395: LD_INT 1000
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PUSH
5406: LD_INT 21
5408: PUSH
5409: LD_INT 3
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: PPUSH
5420: CALL_OW 70
5424: ST_TO_ADDR
// if tmp and eng then
5425: LD_VAR 0 5
5429: PUSH
5430: LD_VAR 0 7
5434: AND
5435: IFFALSE 5541
// begin for i in eng do
5437: LD_ADDR_VAR 0 1
5441: PUSH
5442: LD_VAR 0 7
5446: PUSH
5447: FOR_IN
5448: IFFALSE 5539
// if IsInUnit ( i ) then
5450: LD_VAR 0 1
5454: PPUSH
5455: CALL_OW 310
5459: IFFALSE 5472
// ComExitBuilding ( i ) else
5461: LD_VAR 0 1
5465: PPUSH
5466: CALL_OW 122
5470: GO 5537
// if GetLives ( i ) = 1000 then
5472: LD_VAR 0 1
5476: PPUSH
5477: CALL_OW 256
5481: PUSH
5482: LD_INT 1000
5484: EQUAL
5485: IFFALSE 5507
// ComRepairBuilding ( i , tmp [ 1 ] ) else
5487: LD_VAR 0 1
5491: PPUSH
5492: LD_VAR 0 5
5496: PUSH
5497: LD_INT 1
5499: ARRAY
5500: PPUSH
5501: CALL_OW 130
5505: GO 5537
// if GetLives ( i ) < 700 then
5507: LD_VAR 0 1
5511: PPUSH
5512: CALL_OW 256
5516: PUSH
5517: LD_INT 700
5519: LESS
5520: IFFALSE 5537
// ComMoveXY ( i , 333 , 234 ) ;
5522: LD_VAR 0 1
5526: PPUSH
5527: LD_INT 333
5529: PPUSH
5530: LD_INT 234
5532: PPUSH
5533: CALL_OW 111
5537: GO 5447
5539: POP
5540: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5541: LD_VAR 0 5
5545: NOT
5546: PUSH
5547: LD_VAR 0 7
5551: PPUSH
5552: LD_INT 3
5554: PUSH
5555: LD_INT 54
5557: PUSH
5558: EMPTY
5559: LIST
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PPUSH
5565: CALL_OW 72
5569: AND
5570: IFFALSE 5659
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5572: LD_ADDR_VAR 0 1
5576: PUSH
5577: LD_VAR 0 7
5581: PPUSH
5582: LD_INT 3
5584: PUSH
5585: LD_INT 54
5587: PUSH
5588: EMPTY
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PPUSH
5595: CALL_OW 72
5599: PUSH
5600: FOR_IN
5601: IFFALSE 5657
// if GetLives ( i ) < 1000 then
5603: LD_VAR 0 1
5607: PPUSH
5608: CALL_OW 256
5612: PUSH
5613: LD_INT 1000
5615: LESS
5616: IFFALSE 5635
// ComMoveXY ( i , 333 , 234 ) else
5618: LD_VAR 0 1
5622: PPUSH
5623: LD_INT 333
5625: PPUSH
5626: LD_INT 234
5628: PPUSH
5629: CALL_OW 111
5633: GO 5655
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
5635: LD_VAR 0 1
5639: PPUSH
5640: LD_INT 341
5642: PPUSH
5643: LD_INT 232
5645: PPUSH
5646: CALL_OW 428
5650: PPUSH
5651: CALL_OW 120
5655: GO 5600
5657: POP
5658: POP
// end ;
5659: PPOPN 11
5661: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
5662: LD_EXP 40
5666: PPUSH
5667: CALL_OW 256
5671: PUSH
5672: LD_INT 1000
5674: LESS
5675: IFFALSE 5693
5677: GO 5679
5679: DISABLE
// begin enable ;
5680: ENABLE
// SetLives ( Omar , 1000 ) ;
5681: LD_EXP 40
5685: PPUSH
5686: LD_INT 1000
5688: PPUSH
5689: CALL_OW 234
// end ;
5693: END
// every 0 0$1 trigger omarAttack do var i , nearestPoint ;
5694: LD_EXP 23
5698: IFFALSE 6574
5700: GO 5702
5702: DISABLE
5703: LD_INT 0
5705: PPUSH
5706: PPUSH
// begin wait ( 0 0$25 ) ;
5707: LD_INT 875
5709: PPUSH
5710: CALL_OW 67
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
5714: LD_EXP 48
5718: PPUSH
5719: LD_INT 2
5721: PUSH
5722: LD_INT 25
5724: PUSH
5725: LD_INT 1
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: PUSH
5732: LD_INT 25
5734: PUSH
5735: LD_INT 8
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: LIST
5746: PPUSH
5747: CALL_OW 72
5751: PPUSH
5752: CALL_OW 122
// wait ( 0 0$3 ) ;
5756: LD_INT 105
5758: PPUSH
5759: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , 225 , 223 ) ;
5763: LD_EXP 48
5767: PUSH
5768: LD_EXP 40
5772: UNION
5773: PPUSH
5774: LD_INT 225
5776: PPUSH
5777: LD_INT 223
5779: PPUSH
5780: CALL_OW 174
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_type , unit_vehicle ] ] ] ) , 167 , 231 ) ;
5784: LD_INT 22
5786: PUSH
5787: LD_INT 5
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PUSH
5794: LD_INT 2
5796: PUSH
5797: LD_INT 25
5799: PUSH
5800: LD_INT 1
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: PUSH
5807: LD_INT 25
5809: PUSH
5810: LD_INT 8
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: PUSH
5817: LD_INT 21
5819: PUSH
5820: LD_INT 2
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PPUSH
5837: CALL_OW 69
5841: PPUSH
5842: LD_INT 167
5844: PPUSH
5845: LD_INT 231
5847: PPUSH
5848: CALL_OW 174
// AddComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 222 , 229 ) ;
5852: LD_EXP 48
5856: PPUSH
5857: LD_INT 25
5859: PUSH
5860: LD_INT 4
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PPUSH
5867: CALL_OW 72
5871: PPUSH
5872: LD_INT 222
5874: PPUSH
5875: LD_INT 229
5877: PPUSH
5878: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5882: LD_INT 35
5884: PPUSH
5885: CALL_OW 67
// for i in omarSquad union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_EXP 48
5898: PUSH
5899: LD_INT 22
5901: PUSH
5902: LD_INT 5
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: PUSH
5909: LD_INT 21
5911: PUSH
5912: LD_INT 2
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PPUSH
5923: CALL_OW 69
5927: UNION
5928: PUSH
5929: FOR_IN
5930: IFFALSE 6565
// begin if IsDead ( i ) then
5932: LD_VAR 0 1
5936: PPUSH
5937: CALL_OW 301
5941: IFFALSE 5961
// begin omarSquad := omarSquad diff i ;
5943: LD_ADDR_EXP 48
5947: PUSH
5948: LD_EXP 48
5952: PUSH
5953: LD_VAR 0 1
5957: DIFF
5958: ST_TO_ADDR
// continue ;
5959: GO 5929
// end ; if GetClass ( i ) in [ 1 , 8 ] then
5961: LD_VAR 0 1
5965: PPUSH
5966: CALL_OW 257
5970: PUSH
5971: LD_INT 1
5973: PUSH
5974: LD_INT 8
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: IN
5981: IFFALSE 6175
// begin if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
5983: LD_VAR 0 1
5987: PPUSH
5988: CALL_OW 256
5992: PUSH
5993: LD_INT 700
5995: LESS
5996: PUSH
5997: LD_VAR 0 1
6001: PPUSH
6002: CALL_OW 110
6006: PUSH
6007: LD_INT 0
6009: EQUAL
6010: AND
6011: IFFALSE 6040
// begin SetTag ( i , 1 ) ;
6013: LD_VAR 0 1
6017: PPUSH
6018: LD_INT 1
6020: PPUSH
6021: CALL_OW 109
// ComMoveXY ( i , 222 , 229 ) ;
6025: LD_VAR 0 1
6029: PPUSH
6030: LD_INT 222
6032: PPUSH
6033: LD_INT 229
6035: PPUSH
6036: CALL_OW 111
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
6040: LD_VAR 0 1
6044: PPUSH
6045: CALL_OW 256
6049: PUSH
6050: LD_INT 1000
6052: EQUAL
6053: PUSH
6054: LD_VAR 0 1
6058: PPUSH
6059: CALL_OW 110
6063: PUSH
6064: LD_INT 1
6066: EQUAL
6067: AND
6068: IFFALSE 6082
// SetTag ( i , 0 ) ;
6070: LD_VAR 0 1
6074: PPUSH
6075: LD_INT 0
6077: PPUSH
6078: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and not HasTask ( i ) then
6082: LD_VAR 0 1
6086: PPUSH
6087: CALL_OW 110
6091: PUSH
6092: LD_INT 0
6094: EQUAL
6095: PUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 256
6105: PUSH
6106: LD_INT 700
6108: GREATEREQUAL
6109: AND
6110: PUSH
6111: LD_VAR 0 1
6115: PPUSH
6116: CALL_OW 314
6120: NOT
6121: AND
6122: IFFALSE 6175
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6124: LD_INT 18
6126: PPUSH
6127: LD_INT 22
6129: PUSH
6130: LD_INT 3
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PPUSH
6137: CALL_OW 70
6141: IFFALSE 6160
// ComAgressiveMove ( i , 167 , 231 ) else
6143: LD_VAR 0 1
6147: PPUSH
6148: LD_INT 167
6150: PPUSH
6151: LD_INT 231
6153: PPUSH
6154: CALL_OW 114
6158: GO 6175
// ComAgressiveMove ( i , 106 , 153 ) ;
6160: LD_VAR 0 1
6164: PPUSH
6165: LD_INT 106
6167: PPUSH
6168: LD_INT 153
6170: PPUSH
6171: CALL_OW 114
// end ; if GetType ( i ) = unit_vehicle then
6175: LD_VAR 0 1
6179: PPUSH
6180: CALL_OW 247
6184: PUSH
6185: LD_INT 2
6187: EQUAL
6188: IFFALSE 6563
// begin nearestPoint := [ 219 , 219 ] ;
6190: LD_ADDR_VAR 0 2
6194: PUSH
6195: LD_INT 219
6197: PUSH
6198: LD_INT 219
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: ST_TO_ADDR
// if GetDistUnitXY ( i , 156 , 202 ) < GetDistUnitXY ( i , 219 , 219 ) then
6205: LD_VAR 0 1
6209: PPUSH
6210: LD_INT 156
6212: PPUSH
6213: LD_INT 202
6215: PPUSH
6216: CALL_OW 297
6220: PUSH
6221: LD_VAR 0 1
6225: PPUSH
6226: LD_INT 219
6228: PPUSH
6229: LD_INT 219
6231: PPUSH
6232: CALL_OW 297
6236: LESS
6237: IFFALSE 6254
// nearestPoint := [ 156 , 202 ] ;
6239: LD_ADDR_VAR 0 2
6243: PUSH
6244: LD_INT 156
6246: PUSH
6247: LD_INT 202
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: ST_TO_ADDR
// if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
6254: LD_VAR 0 1
6258: PPUSH
6259: CALL_OW 256
6263: PUSH
6264: LD_INT 700
6266: LESS
6267: PUSH
6268: LD_VAR 0 1
6272: PPUSH
6273: CALL_OW 110
6277: PUSH
6278: LD_INT 0
6280: EQUAL
6281: AND
6282: IFFALSE 6323
// begin SetTag ( i , 1 ) ;
6284: LD_VAR 0 1
6288: PPUSH
6289: LD_INT 1
6291: PPUSH
6292: CALL_OW 109
// ComMoveXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) ;
6296: LD_VAR 0 1
6300: PPUSH
6301: LD_VAR 0 2
6305: PUSH
6306: LD_INT 1
6308: ARRAY
6309: PPUSH
6310: LD_VAR 0 2
6314: PUSH
6315: LD_INT 2
6317: ARRAY
6318: PPUSH
6319: CALL_OW 111
// end ; if GetLives ( i ) < 700 and GetTag ( i ) = 1 and IsDrivenBy ( i ) and GetDistUnitXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) < 10 then
6323: LD_VAR 0 1
6327: PPUSH
6328: CALL_OW 256
6332: PUSH
6333: LD_INT 700
6335: LESS
6336: PUSH
6337: LD_VAR 0 1
6341: PPUSH
6342: CALL_OW 110
6346: PUSH
6347: LD_INT 1
6349: EQUAL
6350: AND
6351: PUSH
6352: LD_VAR 0 1
6356: PPUSH
6357: CALL_OW 311
6361: AND
6362: PUSH
6363: LD_VAR 0 1
6367: PPUSH
6368: LD_VAR 0 2
6372: PUSH
6373: LD_INT 1
6375: ARRAY
6376: PPUSH
6377: LD_VAR 0 2
6381: PUSH
6382: LD_INT 2
6384: ARRAY
6385: PPUSH
6386: CALL_OW 297
6390: PUSH
6391: LD_INT 10
6393: LESS
6394: AND
6395: IFFALSE 6406
// ComRepairVehicleAndReturn ( i ) ;
6397: LD_VAR 0 1
6401: PPUSH
6402: CALL 63703 0 1
// if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
6406: LD_VAR 0 1
6410: PPUSH
6411: CALL_OW 256
6415: PUSH
6416: LD_INT 1000
6418: EQUAL
6419: PUSH
6420: LD_VAR 0 1
6424: PPUSH
6425: CALL_OW 110
6429: PUSH
6430: LD_INT 1
6432: EQUAL
6433: AND
6434: PUSH
6435: LD_VAR 0 1
6439: PPUSH
6440: CALL_OW 311
6444: AND
6445: IFFALSE 6459
// SetTag ( i , 0 ) ;
6447: LD_VAR 0 1
6451: PPUSH
6452: LD_INT 0
6454: PPUSH
6455: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and IsDrivenBy ( i ) and not HasTask ( i ) then
6459: LD_VAR 0 1
6463: PPUSH
6464: CALL_OW 110
6468: PUSH
6469: LD_INT 0
6471: EQUAL
6472: PUSH
6473: LD_VAR 0 1
6477: PPUSH
6478: CALL_OW 256
6482: PUSH
6483: LD_INT 700
6485: GREATEREQUAL
6486: AND
6487: PUSH
6488: LD_VAR 0 1
6492: PPUSH
6493: CALL_OW 311
6497: AND
6498: PUSH
6499: LD_VAR 0 1
6503: PPUSH
6504: CALL_OW 314
6508: NOT
6509: AND
6510: IFFALSE 6563
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6512: LD_INT 18
6514: PPUSH
6515: LD_INT 22
6517: PUSH
6518: LD_INT 3
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PPUSH
6525: CALL_OW 70
6529: IFFALSE 6548
// ComAgressiveMove ( i , 167 , 231 ) else
6531: LD_VAR 0 1
6535: PPUSH
6536: LD_INT 167
6538: PPUSH
6539: LD_INT 231
6541: PPUSH
6542: CALL_OW 114
6546: GO 6563
// ComAgressiveMove ( i , 106 , 153 ) ;
6548: LD_VAR 0 1
6552: PPUSH
6553: LD_INT 106
6555: PPUSH
6556: LD_INT 153
6558: PPUSH
6559: CALL_OW 114
// end ; end ;
6563: GO 5929
6565: POP
6566: POP
// until not omarSquad ;
6567: LD_EXP 48
6571: NOT
6572: IFFALSE 5882
// end ; end_of_file
6574: PPOPN 2
6576: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
6577: LD_INT 0
6579: PPUSH
// uc_side := side ;
6580: LD_ADDR_OWVAR 20
6584: PUSH
6585: LD_VAR 0 1
6589: ST_TO_ADDR
// uc_nation := nation ;
6590: LD_ADDR_OWVAR 21
6594: PUSH
6595: LD_VAR 0 2
6599: ST_TO_ADDR
// vc_chassis := chassis ;
6600: LD_ADDR_OWVAR 37
6604: PUSH
6605: LD_VAR 0 3
6609: ST_TO_ADDR
// vc_engine := engine ;
6610: LD_ADDR_OWVAR 39
6614: PUSH
6615: LD_VAR 0 4
6619: ST_TO_ADDR
// vc_control := control ;
6620: LD_ADDR_OWVAR 38
6624: PUSH
6625: LD_VAR 0 5
6629: ST_TO_ADDR
// vc_weapon := weapon ;
6630: LD_ADDR_OWVAR 40
6634: PUSH
6635: LD_VAR 0 6
6639: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6640: LD_ADDR_OWVAR 41
6644: PUSH
6645: LD_VAR 0 7
6649: ST_TO_ADDR
// result := CreateVehicle ;
6650: LD_ADDR_VAR 0 8
6654: PUSH
6655: CALL_OW 45
6659: ST_TO_ADDR
// end ;
6660: LD_VAR 0 8
6664: RET
// export function SayX ( units , ident ) ; var i ; begin
6665: LD_INT 0
6667: PPUSH
6668: PPUSH
// result := false ;
6669: LD_ADDR_VAR 0 3
6673: PUSH
6674: LD_INT 0
6676: ST_TO_ADDR
// if not units then
6677: LD_VAR 0 1
6681: NOT
6682: IFFALSE 6686
// exit ;
6684: GO 6740
// for i in units do
6686: LD_ADDR_VAR 0 4
6690: PUSH
6691: LD_VAR 0 1
6695: PUSH
6696: FOR_IN
6697: IFFALSE 6738
// if IsOk ( i ) then
6699: LD_VAR 0 4
6703: PPUSH
6704: CALL_OW 302
6708: IFFALSE 6736
// begin Say ( i , ident ) ;
6710: LD_VAR 0 4
6714: PPUSH
6715: LD_VAR 0 2
6719: PPUSH
6720: CALL_OW 88
// result := i ;
6724: LD_ADDR_VAR 0 3
6728: PUSH
6729: LD_VAR 0 4
6733: ST_TO_ADDR
// break ;
6734: GO 6738
// end ;
6736: GO 6696
6738: POP
6739: POP
// end ;
6740: LD_VAR 0 3
6744: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
6745: LD_INT 0
6747: PPUSH
6748: PPUSH
// InitUc ;
6749: CALL_OW 18
// InitHc ;
6753: CALL_OW 19
// uc_side := 0 ;
6757: LD_ADDR_OWVAR 20
6761: PUSH
6762: LD_INT 0
6764: ST_TO_ADDR
// uc_nation := 0 ;
6765: LD_ADDR_OWVAR 21
6769: PUSH
6770: LD_INT 0
6772: ST_TO_ADDR
// for i = 1 to amount do
6773: LD_ADDR_VAR 0 4
6777: PUSH
6778: DOUBLE
6779: LD_INT 1
6781: DEC
6782: ST_TO_ADDR
6783: LD_VAR 0 2
6787: PUSH
6788: FOR_TO
6789: IFFALSE 6871
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
6791: LD_ADDR_OWVAR 29
6795: PUSH
6796: LD_INT 9
6798: PPUSH
6799: LD_INT 12
6801: PPUSH
6802: CALL_OW 12
6806: PUSH
6807: LD_INT 9
6809: PPUSH
6810: LD_INT 12
6812: PPUSH
6813: CALL_OW 12
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
6822: LD_ADDR_OWVAR 35
6826: PUSH
6827: LD_INT 1
6829: NEG
6830: PPUSH
6831: LD_INT 1
6833: PPUSH
6834: CALL_OW 12
6838: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
6839: LD_INT 0
6841: PPUSH
6842: LD_INT 12
6844: PPUSH
6845: LD_INT 1
6847: PPUSH
6848: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
6852: CALL_OW 44
6856: PPUSH
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_INT 0
6864: PPUSH
6865: CALL_OW 49
// end ;
6869: GO 6788
6871: POP
6872: POP
// InitHc ;
6873: CALL_OW 19
// end ;
6877: LD_VAR 0 3
6881: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
6882: LD_INT 0
6884: PPUSH
6885: PPUSH
// uc_side := 0 ;
6886: LD_ADDR_OWVAR 20
6890: PUSH
6891: LD_INT 0
6893: ST_TO_ADDR
// uc_nation := 0 ;
6894: LD_ADDR_OWVAR 21
6898: PUSH
6899: LD_INT 0
6901: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
6902: LD_INT 7
6904: PPUSH
6905: LD_INT 6
6907: PUSH
6908: LD_INT 5
6910: PUSH
6911: LD_INT 4
6913: PUSH
6914: LD_INT 3
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: PUSH
6923: LD_OWVAR 67
6927: ARRAY
6928: PPUSH
6929: CALL 6745 0 2
// for i = 1 to 2 do
6933: LD_ADDR_VAR 0 4
6937: PUSH
6938: DOUBLE
6939: LD_INT 1
6941: DEC
6942: ST_TO_ADDR
6943: LD_INT 2
6945: PUSH
6946: FOR_TO
6947: IFFALSE 6986
// begin vc_chassis := class_mastodont ;
6949: LD_ADDR_OWVAR 37
6953: PUSH
6954: LD_EXP 76
6958: ST_TO_ADDR
// vc_control := control_rider ;
6959: LD_ADDR_OWVAR 38
6963: PUSH
6964: LD_INT 4
6966: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
6967: CALL_OW 45
6971: PPUSH
6972: LD_VAR 0 1
6976: PPUSH
6977: LD_INT 0
6979: PPUSH
6980: CALL 60925 0 3
// end ;
6984: GO 6946
6986: POP
6987: POP
// for i := 1 to 4 do
6988: LD_ADDR_VAR 0 4
6992: PUSH
6993: DOUBLE
6994: LD_INT 1
6996: DEC
6997: ST_TO_ADDR
6998: LD_INT 4
7000: PUSH
7001: FOR_TO
7002: IFFALSE 7041
// begin hc_class := class_horse ;
7004: LD_ADDR_OWVAR 28
7008: PUSH
7009: LD_EXP 77
7013: ST_TO_ADDR
// hc_gallery :=  ;
7014: LD_ADDR_OWVAR 33
7018: PUSH
7019: LD_STRING 
7021: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7022: CALL_OW 44
7026: PPUSH
7027: LD_VAR 0 1
7031: PPUSH
7032: LD_INT 0
7034: PPUSH
7035: CALL_OW 49
// end ;
7039: GO 7001
7041: POP
7042: POP
// for i = 1 to 5 do
7043: LD_ADDR_VAR 0 4
7047: PUSH
7048: DOUBLE
7049: LD_INT 1
7051: DEC
7052: ST_TO_ADDR
7053: LD_INT 5
7055: PUSH
7056: FOR_TO
7057: IFFALSE 7111
// begin hc_class = class_tiger ;
7059: LD_ADDR_OWVAR 28
7063: PUSH
7064: LD_INT 14
7066: ST_TO_ADDR
// hc_gallery =  ;
7067: LD_ADDR_OWVAR 33
7071: PUSH
7072: LD_STRING 
7074: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
7075: LD_ADDR_OWVAR 35
7079: PUSH
7080: LD_INT 7
7082: NEG
7083: PPUSH
7084: LD_INT 7
7086: PPUSH
7087: CALL_OW 12
7091: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
7092: CALL_OW 44
7096: PPUSH
7097: LD_VAR 0 1
7101: PPUSH
7102: LD_INT 0
7104: PPUSH
7105: CALL 60925 0 3
// end ;
7109: GO 7056
7111: POP
7112: POP
// for i := 1 to 4 do
7113: LD_ADDR_VAR 0 4
7117: PUSH
7118: DOUBLE
7119: LD_INT 1
7121: DEC
7122: ST_TO_ADDR
7123: LD_INT 4
7125: PUSH
7126: FOR_TO
7127: IFFALSE 7164
// begin hc_class := class_phororhacos ;
7129: LD_ADDR_OWVAR 28
7133: PUSH
7134: LD_INT 18
7136: ST_TO_ADDR
// hc_gallery :=  ;
7137: LD_ADDR_OWVAR 33
7141: PUSH
7142: LD_STRING 
7144: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7145: CALL_OW 44
7149: PPUSH
7150: LD_VAR 0 1
7154: PPUSH
7155: LD_INT 0
7157: PPUSH
7158: CALL_OW 49
// end ;
7162: GO 7126
7164: POP
7165: POP
// for i := 1 to 4 do
7166: LD_ADDR_VAR 0 4
7170: PUSH
7171: DOUBLE
7172: LD_INT 1
7174: DEC
7175: ST_TO_ADDR
7176: LD_INT 4
7178: PUSH
7179: FOR_TO
7180: IFFALSE 7217
// begin hc_class := class_baggie ;
7182: LD_ADDR_OWVAR 28
7186: PUSH
7187: LD_INT 13
7189: ST_TO_ADDR
// hc_gallery :=  ;
7190: LD_ADDR_OWVAR 33
7194: PUSH
7195: LD_STRING 
7197: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7198: CALL_OW 44
7202: PPUSH
7203: LD_VAR 0 1
7207: PPUSH
7208: LD_INT 0
7210: PPUSH
7211: CALL_OW 49
// end ;
7215: GO 7179
7217: POP
7218: POP
// for i := 1 to 7 do
7219: LD_ADDR_VAR 0 4
7223: PUSH
7224: DOUBLE
7225: LD_INT 1
7227: DEC
7228: ST_TO_ADDR
7229: LD_INT 7
7231: PUSH
7232: FOR_TO
7233: IFFALSE 7270
// begin hc_class := class_frog ;
7235: LD_ADDR_OWVAR 28
7239: PUSH
7240: LD_INT 19
7242: ST_TO_ADDR
// hc_gallery :=  ;
7243: LD_ADDR_OWVAR 33
7247: PUSH
7248: LD_STRING 
7250: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
7251: CALL_OW 44
7255: PPUSH
7256: LD_VAR 0 2
7260: PPUSH
7261: LD_INT 0
7263: PPUSH
7264: CALL_OW 49
// end ;
7268: GO 7232
7270: POP
7271: POP
// end ;
7272: LD_VAR 0 3
7276: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
7277: LD_INT 0
7279: PPUSH
7280: PPUSH
7281: PPUSH
// if not observer or not unit then
7282: LD_VAR 0 1
7286: NOT
7287: PUSH
7288: LD_VAR 0 2
7292: NOT
7293: OR
7294: IFFALSE 7298
// exit ;
7296: GO 7346
// if not See ( GetSide ( observer ) , unit ) then
7298: LD_VAR 0 1
7302: PPUSH
7303: CALL_OW 255
7307: PPUSH
7308: LD_VAR 0 2
7312: PPUSH
7313: CALL_OW 292
7317: NOT
7318: IFFALSE 7322
// exit ;
7320: GO 7346
// result := GetDistUnits ( observer , unit ) < 12 ;
7322: LD_ADDR_VAR 0 3
7326: PUSH
7327: LD_VAR 0 1
7331: PPUSH
7332: LD_VAR 0 2
7336: PPUSH
7337: CALL_OW 296
7341: PUSH
7342: LD_INT 12
7344: LESS
7345: ST_TO_ADDR
// end ;
7346: LD_VAR 0 3
7350: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
7351: LD_INT 0
7353: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
7354: LD_VAR 0 2
7358: PUSH
7359: LD_INT 1
7361: ARRAY
7362: PPUSH
7363: LD_VAR 0 2
7367: PUSH
7368: LD_INT 2
7370: ARRAY
7371: PPUSH
7372: CALL_OW 488
7376: PUSH
7377: LD_VAR 0 2
7381: PUSH
7382: LD_INT 1
7384: ARRAY
7385: PPUSH
7386: LD_VAR 0 2
7390: PUSH
7391: LD_INT 2
7393: ARRAY
7394: PPUSH
7395: CALL_OW 428
7399: PUSH
7400: LD_INT 0
7402: EQUAL
7403: AND
7404: IFFALSE 7438
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
7406: LD_VAR 0 1
7410: PPUSH
7411: LD_VAR 0 2
7415: PUSH
7416: LD_INT 1
7418: ARRAY
7419: PPUSH
7420: LD_VAR 0 2
7424: PUSH
7425: LD_INT 2
7427: ARRAY
7428: PPUSH
7429: LD_VAR 0 3
7433: PPUSH
7434: CALL_OW 48
// end ;
7438: LD_VAR 0 4
7442: RET
// export function ReverseArray ( array ) ; var i ; begin
7443: LD_INT 0
7445: PPUSH
7446: PPUSH
// if not array then
7447: LD_VAR 0 1
7451: NOT
7452: IFFALSE 7456
// exit ;
7454: GO 7514
// result := [ ] ;
7456: LD_ADDR_VAR 0 2
7460: PUSH
7461: EMPTY
7462: ST_TO_ADDR
// for i := 1 to array do
7463: LD_ADDR_VAR 0 3
7467: PUSH
7468: DOUBLE
7469: LD_INT 1
7471: DEC
7472: ST_TO_ADDR
7473: LD_VAR 0 1
7477: PUSH
7478: FOR_TO
7479: IFFALSE 7512
// result := Insert ( result , 1 , array [ i ] ) ;
7481: LD_ADDR_VAR 0 2
7485: PUSH
7486: LD_VAR 0 2
7490: PPUSH
7491: LD_INT 1
7493: PPUSH
7494: LD_VAR 0 1
7498: PUSH
7499: LD_VAR 0 3
7503: ARRAY
7504: PPUSH
7505: CALL_OW 2
7509: ST_TO_ADDR
7510: GO 7478
7512: POP
7513: POP
// end ;
7514: LD_VAR 0 2
7518: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
7519: LD_INT 0
7521: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
7522: LD_VAR 0 1
7526: PPUSH
7527: LD_VAR 0 2
7531: PPUSH
7532: LD_VAR 0 3
7536: PPUSH
7537: LD_VAR 0 4
7541: PPUSH
7542: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
7546: LD_VAR 0 1
7550: PPUSH
7551: LD_VAR 0 2
7555: PPUSH
7556: LD_VAR 0 3
7560: PPUSH
7561: CALL_OW 331
// end ;
7565: LD_VAR 0 5
7569: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
7570: LD_INT 0
7572: PPUSH
// if not units then
7573: LD_VAR 0 1
7577: NOT
7578: IFFALSE 7582
// exit ;
7580: GO 7665
// result := true ;
7582: LD_ADDR_VAR 0 4
7586: PUSH
7587: LD_INT 1
7589: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
7590: LD_VAR 0 1
7594: PPUSH
7595: LD_INT 26
7597: PUSH
7598: LD_INT 1
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 72
7609: PUSH
7610: LD_INT 1
7612: ARRAY
7613: PPUSH
7614: LD_VAR 0 2
7618: PPUSH
7619: CALL_OW 88
7623: NOT
7624: IFFALSE 7665
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
7626: LD_ADDR_VAR 0 4
7630: PUSH
7631: LD_VAR 0 1
7635: PPUSH
7636: LD_INT 26
7638: PUSH
7639: LD_INT 2
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PPUSH
7646: CALL_OW 72
7650: PUSH
7651: LD_INT 1
7653: ARRAY
7654: PPUSH
7655: LD_VAR 0 3
7659: PPUSH
7660: CALL_OW 88
7664: ST_TO_ADDR
// end ;
7665: LD_VAR 0 4
7669: RET
// export function SeeGroup ( side , group ) ; var i ; begin
7670: LD_INT 0
7672: PPUSH
7673: PPUSH
// if not group then
7674: LD_VAR 0 2
7678: NOT
7679: IFFALSE 7683
// exit ;
7681: GO 7728
// for i in group do
7683: LD_ADDR_VAR 0 4
7687: PUSH
7688: LD_VAR 0 2
7692: PUSH
7693: FOR_IN
7694: IFFALSE 7726
// if See ( side , i ) then
7696: LD_VAR 0 1
7700: PPUSH
7701: LD_VAR 0 4
7705: PPUSH
7706: CALL_OW 292
7710: IFFALSE 7724
// begin result := true ;
7712: LD_ADDR_VAR 0 3
7716: PUSH
7717: LD_INT 1
7719: ST_TO_ADDR
// exit ;
7720: POP
7721: POP
7722: GO 7728
// end ;
7724: GO 7693
7726: POP
7727: POP
// end ; end_of_file
7728: LD_VAR 0 3
7732: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
7737: PPUSH
7738: PPUSH
7739: PPUSH
7740: PPUSH
7741: PPUSH
// uc_side := 3 ;
7742: LD_ADDR_OWVAR 20
7746: PUSH
7747: LD_INT 3
7749: ST_TO_ADDR
// uc_nation := 3 ;
7750: LD_ADDR_OWVAR 21
7754: PUSH
7755: LD_INT 3
7757: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
7758: LD_ADDR_EXP 49
7762: PUSH
7763: LD_STRING Morozov
7765: PPUSH
7766: CALL_OW 25
7770: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
7771: LD_EXP 49
7775: PPUSH
7776: LD_INT 52
7778: PPUSH
7779: CALL_OW 52
// if not gaidarKilled then
7783: LD_EXP 7
7787: NOT
7788: IFFALSE 7821
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
7790: LD_ADDR_EXP 50
7794: PUSH
7795: LD_STRING Gaydar
7797: PPUSH
7798: LD_INT 0
7800: PPUSH
7801: LD_STRING 
7803: PPUSH
7804: CALL 25274 0 3
7808: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
7809: LD_EXP 50
7813: PPUSH
7814: LD_INT 52
7816: PPUSH
7817: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
7821: LD_INT 52
7823: PPUSH
7824: LD_STRING lenin
7826: PPUSH
7827: CALL_OW 500
// ruOutsiders := [ ] ;
7831: LD_ADDR_EXP 52
7835: PUSH
7836: EMPTY
7837: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
7838: LD_ADDR_EXP 54
7842: PUSH
7843: EMPTY
7844: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
7845: LD_ADDR_EXP 55
7849: PUSH
7850: EMPTY
7851: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
7852: LD_ADDR_EXP 56
7856: PUSH
7857: EMPTY
7858: ST_TO_ADDR
// ruAttackers := [ ] ;
7859: LD_ADDR_EXP 57
7863: PUSH
7864: EMPTY
7865: ST_TO_ADDR
// waveStrength := 0 ;
7866: LD_ADDR_EXP 58
7870: PUSH
7871: LD_INT 0
7873: ST_TO_ADDR
// if not gaidarKilled then
7874: LD_EXP 7
7878: NOT
7879: IFFALSE 7889
// waveStrength := 2 ;
7881: LD_ADDR_EXP 58
7885: PUSH
7886: LD_INT 2
7888: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
7889: LD_ADDR_VAR 0 7
7893: PUSH
7894: LD_INT 22
7896: PUSH
7897: LD_INT 3
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 21
7906: PUSH
7907: LD_INT 3
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PPUSH
7918: CALL_OW 69
7922: ST_TO_ADDR
// for i in tmp do
7923: LD_ADDR_VAR 0 2
7927: PUSH
7928: LD_VAR 0 7
7932: PUSH
7933: FOR_IN
7934: IFFALSE 7971
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
7936: LD_VAR 0 2
7940: PPUSH
7941: LD_INT 5
7943: PUSH
7944: LD_INT 6
7946: PUSH
7947: LD_INT 7
7949: PUSH
7950: LD_INT 8
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: PUSH
7959: LD_OWVAR 67
7963: ARRAY
7964: PPUSH
7965: CALL_OW 241
7969: GO 7933
7971: POP
7972: POP
// for i := 1 to 3 do
7973: LD_ADDR_VAR 0 2
7977: PUSH
7978: DOUBLE
7979: LD_INT 1
7981: DEC
7982: ST_TO_ADDR
7983: LD_INT 3
7985: PUSH
7986: FOR_TO
7987: IFFALSE 8025
// begin PrepareHuman ( false , 1 , 0 ) ;
7989: LD_INT 0
7991: PPUSH
7992: LD_INT 1
7994: PPUSH
7995: LD_INT 0
7997: PPUSH
7998: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
8002: CALL_OW 44
8006: PPUSH
8007: LD_INT 75
8009: PPUSH
8010: LD_INT 49
8012: PPUSH
8013: LD_INT 3
8015: PPUSH
8016: LD_INT 0
8018: PPUSH
8019: CALL_OW 50
// end ;
8023: GO 7986
8025: POP
8026: POP
// for i := 1 to 4 do
8027: LD_ADDR_VAR 0 2
8031: PUSH
8032: DOUBLE
8033: LD_INT 1
8035: DEC
8036: ST_TO_ADDR
8037: LD_INT 4
8039: PUSH
8040: FOR_TO
8041: IFFALSE 8087
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
8043: LD_INT 0
8045: PPUSH
8046: LD_INT 1
8048: PPUSH
8049: LD_INT 2
8051: PPUSH
8052: CALL_OW 12
8056: PPUSH
8057: LD_INT 0
8059: PPUSH
8060: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
8064: CALL_OW 44
8068: PPUSH
8069: LD_INT 330
8071: PPUSH
8072: LD_INT 231
8074: PPUSH
8075: LD_INT 5
8077: PPUSH
8078: LD_INT 0
8080: PPUSH
8081: CALL_OW 50
// end ;
8085: GO 8040
8087: POP
8088: POP
// hc_class := 1 ;
8089: LD_ADDR_OWVAR 28
8093: PUSH
8094: LD_INT 1
8096: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
8097: CALL_OW 44
8101: PPUSH
8102: LD_INT 324
8104: PPUSH
8105: LD_INT 219
8107: PPUSH
8108: CALL_OW 428
8112: PPUSH
8113: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
8117: CALL_OW 44
8121: PPUSH
8122: LD_INT 316
8124: PPUSH
8125: LD_INT 223
8127: PPUSH
8128: CALL_OW 428
8132: PPUSH
8133: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
8137: LD_ADDR_VAR 0 7
8141: PUSH
8142: LD_INT 172
8144: PPUSH
8145: LD_INT 198
8147: PPUSH
8148: CALL_OW 428
8152: PPUSH
8153: CALL_OW 274
8157: PUSH
8158: LD_INT 189
8160: PPUSH
8161: LD_INT 156
8163: PPUSH
8164: CALL_OW 428
8168: PPUSH
8169: CALL_OW 274
8173: PUSH
8174: LD_INT 341
8176: PPUSH
8177: LD_INT 232
8179: PPUSH
8180: CALL_OW 428
8184: PPUSH
8185: CALL_OW 274
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: ST_TO_ADDR
// for i in tmp do
8195: LD_ADDR_VAR 0 2
8199: PUSH
8200: LD_VAR 0 7
8204: PUSH
8205: FOR_IN
8206: IFFALSE 8240
// begin SetResourceType ( i , mat_cans , 200 ) ;
8208: LD_VAR 0 2
8212: PPUSH
8213: LD_INT 1
8215: PPUSH
8216: LD_INT 200
8218: PPUSH
8219: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
8223: LD_VAR 0 2
8227: PPUSH
8228: LD_INT 2
8230: PPUSH
8231: LD_INT 200
8233: PPUSH
8234: CALL_OW 277
// end ;
8238: GO 8205
8240: POP
8241: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
8242: LD_ADDR_VAR 0 7
8246: PUSH
8247: LD_INT 177
8249: PUSH
8250: LD_INT 114
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: PUSH
8257: LD_INT 138
8259: PUSH
8260: LD_INT 96
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: ST_TO_ADDR
// for i := 1 to tmp do
8271: LD_ADDR_VAR 0 2
8275: PUSH
8276: DOUBLE
8277: LD_INT 1
8279: DEC
8280: ST_TO_ADDR
8281: LD_VAR 0 7
8285: PUSH
8286: FOR_TO
8287: IFFALSE 8370
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
8289: LD_INT 0
8291: PPUSH
8292: LD_INT 9
8294: PPUSH
8295: LD_INT 6
8297: PPUSH
8298: CALL_OW 380
// un := CreateHuman ;
8302: LD_ADDR_VAR 0 5
8306: PUSH
8307: CALL_OW 44
8311: ST_TO_ADDR
// SetDir ( un , 2 ) ;
8312: LD_VAR 0 5
8316: PPUSH
8317: LD_INT 2
8319: PPUSH
8320: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
8324: LD_VAR 0 5
8328: PPUSH
8329: LD_VAR 0 7
8333: PUSH
8334: LD_VAR 0 2
8338: ARRAY
8339: PUSH
8340: LD_INT 1
8342: ARRAY
8343: PPUSH
8344: LD_VAR 0 7
8348: PUSH
8349: LD_VAR 0 2
8353: ARRAY
8354: PUSH
8355: LD_INT 2
8357: ARRAY
8358: PPUSH
8359: CALL_OW 428
8363: PPUSH
8364: CALL_OW 52
// end ;
8368: GO 8286
8370: POP
8371: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
8372: LD_ADDR_VAR 0 7
8376: PUSH
8377: LD_INT 198
8379: PUSH
8380: LD_INT 158
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: PUSH
8387: LD_INT 203
8389: PUSH
8390: LD_INT 166
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: LD_INT 181
8399: PUSH
8400: LD_INT 209
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: LD_INT 178
8409: PUSH
8410: LD_INT 196
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: LD_INT 181
8419: PUSH
8420: LD_INT 212
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: ST_TO_ADDR
// for i := 1 to tmp do
8434: LD_ADDR_VAR 0 2
8438: PUSH
8439: DOUBLE
8440: LD_INT 1
8442: DEC
8443: ST_TO_ADDR
8444: LD_VAR 0 7
8448: PUSH
8449: FOR_TO
8450: IFFALSE 8571
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
8452: LD_INT 0
8454: PPUSH
8455: LD_INT 1
8457: PPUSH
8458: LD_INT 4
8460: PUSH
8461: LD_INT 5
8463: PUSH
8464: LD_INT 6
8466: PUSH
8467: LD_INT 7
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: PUSH
8476: LD_OWVAR 67
8480: ARRAY
8481: PPUSH
8482: CALL_OW 380
// un := CreateHuman ;
8486: LD_ADDR_VAR 0 5
8490: PUSH
8491: CALL_OW 44
8495: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
8496: LD_ADDR_VAR 0 4
8500: PUSH
8501: LD_VAR 0 7
8505: PUSH
8506: LD_VAR 0 2
8510: ARRAY
8511: PUSH
8512: LD_INT 1
8514: ARRAY
8515: PPUSH
8516: LD_VAR 0 7
8520: PUSH
8521: LD_VAR 0 2
8525: ARRAY
8526: PUSH
8527: LD_INT 2
8529: ARRAY
8530: PPUSH
8531: CALL_OW 428
8535: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
8536: LD_VAR 0 5
8540: PPUSH
8541: LD_VAR 0 4
8545: PPUSH
8546: CALL 57845 0 1
8550: PPUSH
8551: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8555: LD_VAR 0 5
8559: PPUSH
8560: LD_VAR 0 4
8564: PPUSH
8565: CALL_OW 52
// end ;
8569: GO 8449
8571: POP
8572: POP
// for i := 1 to 3 do
8573: LD_ADDR_VAR 0 2
8577: PUSH
8578: DOUBLE
8579: LD_INT 1
8581: DEC
8582: ST_TO_ADDR
8583: LD_INT 3
8585: PUSH
8586: FOR_TO
8587: IFFALSE 8642
// begin InitHc ;
8589: CALL_OW 19
// uc_nation := 0 ;
8593: LD_ADDR_OWVAR 21
8597: PUSH
8598: LD_INT 0
8600: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
8601: LD_ADDR_OWVAR 28
8605: PUSH
8606: LD_INT 16
8608: ST_TO_ADDR
// un := CreateHuman ;
8609: LD_ADDR_VAR 0 5
8613: PUSH
8614: CALL_OW 44
8618: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
8619: LD_VAR 0 5
8623: PPUSH
8624: LD_INT 194
8626: PPUSH
8627: LD_INT 164
8629: PPUSH
8630: LD_INT 6
8632: PPUSH
8633: LD_INT 0
8635: PPUSH
8636: CALL_OW 50
// end ;
8640: GO 8586
8642: POP
8643: POP
// uc_nation := 3 ;
8644: LD_ADDR_OWVAR 21
8648: PUSH
8649: LD_INT 3
8651: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
8652: LD_INT 24
8654: PPUSH
8655: LD_INT 1
8657: PPUSH
8658: LD_INT 1
8660: PPUSH
8661: LD_INT 44
8663: PPUSH
8664: LD_INT 10
8666: PPUSH
8667: CALL 30138 0 5
// un := CreateVehicle ;
8671: LD_ADDR_VAR 0 5
8675: PUSH
8676: CALL_OW 45
8680: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 162 , 1 , false ) ;
8681: LD_VAR 0 5
8685: PPUSH
8686: LD_INT 199
8688: PPUSH
8689: LD_INT 162
8691: PPUSH
8692: LD_INT 1
8694: PPUSH
8695: LD_INT 0
8697: PPUSH
8698: CALL 64143 0 5
// ComHold ( un ) ;
8702: LD_VAR 0 5
8706: PPUSH
8707: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8711: LD_INT 0
8713: PPUSH
8714: LD_INT 3
8716: PPUSH
8717: LD_INT 4
8719: PPUSH
8720: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8724: CALL_OW 44
8728: PPUSH
8729: LD_VAR 0 5
8733: PPUSH
8734: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8738: LD_INT 24
8740: PPUSH
8741: LD_INT 1
8743: PPUSH
8744: LD_INT 1
8746: PPUSH
8747: LD_INT 45
8749: PPUSH
8750: LD_INT 10
8752: PPUSH
8753: CALL 30138 0 5
// un := CreateVehicle ;
8757: LD_ADDR_VAR 0 5
8761: PUSH
8762: CALL_OW 45
8766: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
8767: LD_VAR 0 5
8771: PPUSH
8772: LD_INT 129
8774: PPUSH
8775: LD_INT 93
8777: PPUSH
8778: LD_INT 1
8780: PPUSH
8781: LD_INT 0
8783: PPUSH
8784: CALL 64143 0 5
// ComHold ( un ) ;
8788: LD_VAR 0 5
8792: PPUSH
8793: CALL_OW 140
// if Difficulty > 1 then
8797: LD_OWVAR 67
8801: PUSH
8802: LD_INT 1
8804: GREATER
8805: IFFALSE 8979
// begin PrepareHuman ( false , 3 , 4 ) ;
8807: LD_INT 0
8809: PPUSH
8810: LD_INT 3
8812: PPUSH
8813: LD_INT 4
8815: PPUSH
8816: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8820: CALL_OW 44
8824: PPUSH
8825: LD_VAR 0 5
8829: PPUSH
8830: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8834: LD_INT 24
8836: PPUSH
8837: LD_INT 1
8839: PPUSH
8840: LD_INT 1
8842: PPUSH
8843: LD_INT 45
8845: PPUSH
8846: LD_INT 10
8848: PPUSH
8849: CALL 30138 0 5
// un := CreateVehicle ;
8853: LD_ADDR_VAR 0 5
8857: PUSH
8858: CALL_OW 45
8862: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 92 , 2 , false ) ;
8863: LD_VAR 0 5
8867: PPUSH
8868: LD_INT 134
8870: PPUSH
8871: LD_INT 92
8873: PPUSH
8874: LD_INT 2
8876: PPUSH
8877: LD_INT 0
8879: PPUSH
8880: CALL 64143 0 5
// ComHold ( un ) ;
8884: LD_VAR 0 5
8888: PPUSH
8889: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8893: LD_INT 0
8895: PPUSH
8896: LD_INT 3
8898: PPUSH
8899: LD_INT 4
8901: PPUSH
8902: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8906: CALL_OW 44
8910: PPUSH
8911: LD_VAR 0 5
8915: PPUSH
8916: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8920: LD_INT 24
8922: PPUSH
8923: LD_INT 1
8925: PPUSH
8926: LD_INT 1
8928: PPUSH
8929: LD_INT 45
8931: PPUSH
8932: LD_INT 10
8934: PPUSH
8935: CALL 30138 0 5
// un := CreateVehicle ;
8939: LD_ADDR_VAR 0 5
8943: PUSH
8944: CALL_OW 45
8948: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
8949: LD_VAR 0 5
8953: PPUSH
8954: LD_INT 200
8956: PPUSH
8957: LD_INT 173
8959: PPUSH
8960: LD_INT 1
8962: PPUSH
8963: LD_INT 0
8965: PPUSH
8966: CALL 64143 0 5
// ComHold ( un ) ;
8970: LD_VAR 0 5
8974: PPUSH
8975: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
8979: LD_INT 0
8981: PPUSH
8982: LD_INT 3
8984: PPUSH
8985: LD_INT 4
8987: PPUSH
8988: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8992: CALL_OW 44
8996: PPUSH
8997: LD_VAR 0 5
9001: PPUSH
9002: CALL_OW 52
// bc_type := b_armoury ;
9006: LD_ADDR_OWVAR 42
9010: PUSH
9011: LD_INT 4
9013: ST_TO_ADDR
// if Difficulty > 1 then
9014: LD_OWVAR 67
9018: PUSH
9019: LD_INT 1
9021: GREATER
9022: IFFALSE 9032
// bc_type := b_barracks ;
9024: LD_ADDR_OWVAR 42
9028: PUSH
9029: LD_INT 5
9031: ST_TO_ADDR
// bc_level := 6 ;
9032: LD_ADDR_OWVAR 43
9036: PUSH
9037: LD_INT 6
9039: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
9040: LD_INT 120
9042: PPUSH
9043: LD_INT 100
9045: PPUSH
9046: LD_INT 5
9048: PPUSH
9049: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
9053: LD_ADDR_VAR 0 2
9057: PUSH
9058: DOUBLE
9059: LD_INT 1
9061: DEC
9062: ST_TO_ADDR
9063: LD_INT 3
9065: PUSH
9066: LD_INT 3
9068: PUSH
9069: LD_INT 4
9071: PUSH
9072: LD_INT 4
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: LD_OWVAR 67
9085: ARRAY
9086: PUSH
9087: FOR_TO
9088: IFFALSE 9146
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
9090: LD_INT 0
9092: PPUSH
9093: LD_INT 1
9095: PUSH
9096: LD_INT 1
9098: PUSH
9099: LD_INT 9
9101: PUSH
9102: LD_INT 9
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: PUSH
9111: LD_OWVAR 67
9115: ARRAY
9116: PPUSH
9117: LD_INT 5
9119: PPUSH
9120: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
9124: CALL_OW 44
9128: PPUSH
9129: LD_INT 120
9131: PPUSH
9132: LD_INT 100
9134: PPUSH
9135: CALL_OW 428
9139: PPUSH
9140: CALL_OW 52
// end ;
9144: GO 9087
9146: POP
9147: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
9148: LD_ADDR_VAR 0 7
9152: PUSH
9153: LD_INT 135
9155: PUSH
9156: LD_INT 100
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PUSH
9163: LD_INT 137
9165: PUSH
9166: LD_INT 92
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: ST_TO_ADDR
// for i := 1 to tmp do
9177: LD_ADDR_VAR 0 2
9181: PUSH
9182: DOUBLE
9183: LD_INT 1
9185: DEC
9186: ST_TO_ADDR
9187: LD_VAR 0 7
9191: PUSH
9192: FOR_TO
9193: IFFALSE 9363
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
9195: LD_INT 22
9197: PUSH
9198: LD_INT 22
9200: PUSH
9201: LD_INT 24
9203: PUSH
9204: LD_INT 24
9206: PUSH
9207: LD_INT 24
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: PUSH
9217: LD_OWVAR 67
9221: PUSH
9222: LD_INT 0
9224: PPUSH
9225: LD_INT 1
9227: PPUSH
9228: CALL_OW 12
9232: PLUS
9233: ARRAY
9234: PPUSH
9235: LD_INT 1
9237: PPUSH
9238: LD_INT 1
9240: PPUSH
9241: LD_INT 44
9243: PPUSH
9244: LD_INT 25
9246: PPUSH
9247: CALL 30138 0 5
// veh := CreateVehicle ;
9251: LD_ADDR_VAR 0 6
9255: PUSH
9256: CALL_OW 45
9260: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
9261: LD_VAR 0 6
9265: PPUSH
9266: LD_INT 2
9268: PPUSH
9269: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
9273: LD_VAR 0 6
9277: PPUSH
9278: LD_VAR 0 7
9282: PUSH
9283: LD_VAR 0 2
9287: ARRAY
9288: PUSH
9289: LD_INT 1
9291: ARRAY
9292: PPUSH
9293: LD_VAR 0 7
9297: PUSH
9298: LD_VAR 0 2
9302: ARRAY
9303: PUSH
9304: LD_INT 2
9306: ARRAY
9307: PPUSH
9308: LD_INT 0
9310: PPUSH
9311: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
9315: LD_INT 0
9317: PPUSH
9318: LD_INT 3
9320: PPUSH
9321: LD_INT 6
9323: PPUSH
9324: CALL_OW 380
// un := CreateHuman ;
9328: LD_ADDR_VAR 0 5
9332: PUSH
9333: CALL_OW 44
9337: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9338: LD_VAR 0 5
9342: PPUSH
9343: LD_VAR 0 6
9347: PPUSH
9348: CALL_OW 52
// ComHold ( veh ) ;
9352: LD_VAR 0 6
9356: PPUSH
9357: CALL_OW 140
// end ;
9361: GO 9192
9363: POP
9364: POP
// tmp := [ 191 , 122 ] ;
9365: LD_ADDR_VAR 0 7
9369: PUSH
9370: LD_INT 191
9372: PUSH
9373: LD_INT 122
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
9380: LD_INT 24
9382: PPUSH
9383: LD_INT 1
9385: PPUSH
9386: LD_INT 1
9388: PPUSH
9389: LD_INT 44
9391: PPUSH
9392: LD_INT 30
9394: PPUSH
9395: CALL 30138 0 5
// ruBlockadeTank := CreateVehicle ;
9399: LD_ADDR_EXP 51
9403: PUSH
9404: CALL_OW 45
9408: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
9409: LD_EXP 51
9413: PPUSH
9414: LD_INT 2
9416: PPUSH
9417: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
9421: LD_EXP 51
9425: PPUSH
9426: LD_INT 191
9428: PPUSH
9429: LD_INT 122
9431: PPUSH
9432: LD_INT 0
9434: PPUSH
9435: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
9439: LD_INT 1
9441: PPUSH
9442: LD_INT 5
9444: PUSH
9445: LD_INT 6
9447: PUSH
9448: LD_INT 7
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: LIST
9455: PUSH
9456: LD_OWVAR 67
9460: PUSH
9461: LD_INT 1
9463: MINUS
9464: ARRAY
9465: PPUSH
9466: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
9470: CALL_OW 44
9474: PPUSH
9475: LD_EXP 51
9479: PPUSH
9480: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
9484: LD_EXP 51
9488: PPUSH
9489: CALL_OW 140
// ruBlockadeSquad := [ ] ;
9493: LD_ADDR_EXP 53
9497: PUSH
9498: EMPTY
9499: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 6 , 6 ] [ Difficulty ] do
9500: LD_ADDR_VAR 0 2
9504: PUSH
9505: DOUBLE
9506: LD_INT 1
9508: DEC
9509: ST_TO_ADDR
9510: LD_INT 3
9512: PUSH
9513: LD_INT 4
9515: PUSH
9516: LD_INT 6
9518: PUSH
9519: LD_INT 6
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: PUSH
9528: LD_OWVAR 67
9532: ARRAY
9533: PUSH
9534: FOR_TO
9535: IFFALSE 9651
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
9537: LD_INT 0
9539: PPUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_INT 4
9545: PUSH
9546: LD_INT 5
9548: PUSH
9549: LD_INT 6
9551: PUSH
9552: LD_INT 7
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: PUSH
9561: LD_OWVAR 67
9565: ARRAY
9566: PPUSH
9567: CALL_OW 380
// un := CreateHuman ;
9571: LD_ADDR_VAR 0 5
9575: PUSH
9576: CALL_OW 44
9580: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
9581: LD_VAR 0 5
9585: PPUSH
9586: LD_INT 9
9588: PPUSH
9589: LD_INT 0
9591: PPUSH
9592: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
9596: LD_VAR 0 5
9600: PPUSH
9601: LD_INT 198
9603: PPUSH
9604: LD_INT 129
9606: PPUSH
9607: CALL_OW 118
// AddComCrawl ( un ) ;
9611: LD_VAR 0 5
9615: PPUSH
9616: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9620: LD_ADDR_EXP 53
9624: PUSH
9625: LD_EXP 53
9629: PPUSH
9630: LD_EXP 53
9634: PUSH
9635: LD_INT 1
9637: PLUS
9638: PPUSH
9639: LD_VAR 0 5
9643: PPUSH
9644: CALL_OW 1
9648: ST_TO_ADDR
// end ;
9649: GO 9534
9651: POP
9652: POP
// PrepareHuman ( false , 4 , 5 ) ;
9653: LD_INT 0
9655: PPUSH
9656: LD_INT 4
9658: PPUSH
9659: LD_INT 5
9661: PPUSH
9662: CALL_OW 380
// un := CreateHuman ;
9666: LD_ADDR_VAR 0 5
9670: PUSH
9671: CALL_OW 44
9675: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
9676: LD_VAR 0 5
9680: PPUSH
9681: LD_INT 179
9683: PPUSH
9684: LD_INT 113
9686: PPUSH
9687: LD_INT 0
9689: PPUSH
9690: CALL_OW 48
// ComHold ( un ) ;
9694: LD_VAR 0 5
9698: PPUSH
9699: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9703: LD_ADDR_EXP 53
9707: PUSH
9708: LD_EXP 53
9712: PPUSH
9713: LD_EXP 53
9717: PUSH
9718: LD_INT 1
9720: PLUS
9721: PPUSH
9722: LD_VAR 0 5
9726: PPUSH
9727: CALL_OW 1
9731: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
9732: LD_ADDR_VAR 0 7
9736: PUSH
9737: LD_INT 167
9739: PPUSH
9740: LD_INT 243
9742: PPUSH
9743: CALL_OW 428
9747: PPUSH
9748: CALL_OW 274
9752: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
9753: LD_VAR 0 7
9757: PPUSH
9758: LD_INT 1
9760: PPUSH
9761: LD_INT 1000
9763: PPUSH
9764: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
9768: LD_VAR 0 7
9772: PPUSH
9773: LD_INT 2
9775: PPUSH
9776: LD_INT 400
9778: PPUSH
9779: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
9783: LD_ADDR_VAR 0 7
9787: PUSH
9788: LD_INT 169
9790: PPUSH
9791: LD_INT 229
9793: PPUSH
9794: CALL_OW 428
9798: ST_TO_ADDR
// for i := 1 to 3 do
9799: LD_ADDR_VAR 0 2
9803: PUSH
9804: DOUBLE
9805: LD_INT 1
9807: DEC
9808: ST_TO_ADDR
9809: LD_INT 3
9811: PUSH
9812: FOR_TO
9813: IFFALSE 9904
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9815: LD_INT 0
9817: PPUSH
9818: LD_INT 1
9820: PPUSH
9821: LD_INT 4
9823: PUSH
9824: LD_INT 5
9826: PUSH
9827: LD_INT 5
9829: PUSH
9830: LD_INT 6
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: PUSH
9839: LD_OWVAR 67
9843: ARRAY
9844: PPUSH
9845: CALL_OW 380
// un := CreateHuman ;
9849: LD_ADDR_VAR 0 5
9853: PUSH
9854: CALL_OW 44
9858: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
9859: LD_VAR 0 5
9863: PPUSH
9864: LD_VAR 0 7
9868: PPUSH
9869: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9873: LD_ADDR_EXP 54
9877: PUSH
9878: LD_EXP 54
9882: PPUSH
9883: LD_EXP 54
9887: PUSH
9888: LD_INT 1
9890: PLUS
9891: PPUSH
9892: LD_VAR 0 5
9896: PPUSH
9897: CALL_OW 1
9901: ST_TO_ADDR
// end ;
9902: GO 9812
9904: POP
9905: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
9906: LD_ADDR_VAR 0 7
9910: PUSH
9911: LD_INT 165
9913: PUSH
9914: LD_INT 227
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: PUSH
9921: LD_INT 173
9923: PUSH
9924: LD_INT 231
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: ST_TO_ADDR
// for i := 1 to tmp do
9935: LD_ADDR_VAR 0 2
9939: PUSH
9940: DOUBLE
9941: LD_INT 1
9943: DEC
9944: ST_TO_ADDR
9945: LD_VAR 0 7
9949: PUSH
9950: FOR_TO
9951: IFFALSE 10072
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9953: LD_INT 0
9955: PPUSH
9956: LD_INT 1
9958: PPUSH
9959: LD_INT 4
9961: PUSH
9962: LD_INT 5
9964: PUSH
9965: LD_INT 5
9967: PUSH
9968: LD_INT 6
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: PUSH
9977: LD_OWVAR 67
9981: ARRAY
9982: PPUSH
9983: CALL_OW 380
// un := CreateHuman ;
9987: LD_ADDR_VAR 0 5
9991: PUSH
9992: CALL_OW 44
9996: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
9997: LD_VAR 0 5
10001: PPUSH
10002: LD_VAR 0 7
10006: PUSH
10007: LD_VAR 0 2
10011: ARRAY
10012: PUSH
10013: LD_INT 1
10015: ARRAY
10016: PPUSH
10017: LD_VAR 0 7
10021: PUSH
10022: LD_VAR 0 2
10026: ARRAY
10027: PUSH
10028: LD_INT 2
10030: ARRAY
10031: PPUSH
10032: CALL_OW 428
10036: PPUSH
10037: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
10041: LD_ADDR_EXP 54
10045: PUSH
10046: LD_EXP 54
10050: PPUSH
10051: LD_EXP 54
10055: PUSH
10056: LD_INT 1
10058: PLUS
10059: PPUSH
10060: LD_VAR 0 5
10064: PPUSH
10065: CALL_OW 1
10069: ST_TO_ADDR
// end ;
10070: GO 9950
10072: POP
10073: POP
// for i := 1 to 2 do
10074: LD_ADDR_VAR 0 2
10078: PUSH
10079: DOUBLE
10080: LD_INT 1
10082: DEC
10083: ST_TO_ADDR
10084: LD_INT 2
10086: PUSH
10087: FOR_TO
10088: IFFALSE 10143
// begin InitHc ;
10090: CALL_OW 19
// uc_nation := 0 ;
10094: LD_ADDR_OWVAR 21
10098: PUSH
10099: LD_INT 0
10101: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
10102: LD_ADDR_OWVAR 28
10106: PUSH
10107: LD_INT 16
10109: ST_TO_ADDR
// un := CreateHuman ;
10110: LD_ADDR_VAR 0 5
10114: PUSH
10115: CALL_OW 44
10119: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
10120: LD_VAR 0 5
10124: PPUSH
10125: LD_INT 166
10127: PPUSH
10128: LD_INT 233
10130: PPUSH
10131: LD_INT 2
10133: PPUSH
10134: LD_INT 0
10136: PPUSH
10137: CALL_OW 50
// end ;
10141: GO 10087
10143: POP
10144: POP
// uc_nation := 3 ;
10145: LD_ADDR_OWVAR 21
10149: PUSH
10150: LD_INT 3
10152: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
10153: LD_ADDR_VAR 0 7
10157: PUSH
10158: LD_INT 71
10160: PUSH
10161: LD_INT 52
10163: PUSH
10164: LD_INT 11
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: LIST
10171: ST_TO_ADDR
// for i in tmp do
10172: LD_ADDR_VAR 0 2
10176: PUSH
10177: LD_VAR 0 7
10181: PUSH
10182: FOR_IN
10183: IFFALSE 10227
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
10185: LD_VAR 0 2
10189: PPUSH
10190: CALL_OW 274
10194: PPUSH
10195: LD_INT 1
10197: PPUSH
10198: LD_INT 3000
10200: PPUSH
10201: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
10205: LD_VAR 0 2
10209: PPUSH
10210: CALL_OW 274
10214: PPUSH
10215: LD_INT 2
10217: PPUSH
10218: LD_INT 600
10220: PPUSH
10221: CALL_OW 277
// end ;
10225: GO 10182
10227: POP
10228: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
10229: LD_ADDR_VAR 0 7
10233: PUSH
10234: LD_INT 41
10236: PUSH
10237: LD_INT 57
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 38
10246: PUSH
10247: LD_INT 55
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 50
10256: PUSH
10257: LD_INT 73
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: LD_INT 51
10266: PUSH
10267: LD_INT 65
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PUSH
10274: LD_INT 82
10276: PUSH
10277: LD_INT 93
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 87
10286: PUSH
10287: LD_INT 100
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 91
10296: PUSH
10297: LD_INT 109
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PUSH
10304: LD_INT 84
10306: PUSH
10307: LD_INT 120
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: LD_INT 113
10316: PUSH
10317: LD_INT 153
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 123
10326: PUSH
10327: LD_INT 171
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PUSH
10334: LD_INT 125
10336: PUSH
10337: LD_INT 178
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 125
10346: PUSH
10347: LD_INT 188
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 125
10356: PUSH
10357: LD_INT 201
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: LD_INT 33
10366: PUSH
10367: LD_INT 60
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 76
10376: PUSH
10377: LD_INT 95
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 84
10386: PUSH
10387: LD_INT 111
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 112
10396: PUSH
10397: LD_INT 165
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: ST_TO_ADDR
// for i := 1 to tmp do
10423: LD_ADDR_VAR 0 2
10427: PUSH
10428: DOUBLE
10429: LD_INT 1
10431: DEC
10432: ST_TO_ADDR
10433: LD_VAR 0 7
10437: PUSH
10438: FOR_TO
10439: IFFALSE 10686
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10441: LD_ADDR_VAR 0 4
10445: PUSH
10446: LD_VAR 0 7
10450: PUSH
10451: LD_VAR 0 2
10455: ARRAY
10456: PUSH
10457: LD_INT 1
10459: ARRAY
10460: PPUSH
10461: LD_VAR 0 7
10465: PUSH
10466: LD_VAR 0 2
10470: ARRAY
10471: PUSH
10472: LD_INT 2
10474: ARRAY
10475: PPUSH
10476: CALL_OW 428
10480: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
10481: LD_VAR 0 4
10485: PPUSH
10486: CALL_OW 266
10490: PUSH
10491: LD_INT 4
10493: PUSH
10494: LD_INT 5
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: IN
10501: IFFALSE 10585
// begin for j := 1 to Difficulty do
10503: LD_ADDR_VAR 0 3
10507: PUSH
10508: DOUBLE
10509: LD_INT 1
10511: DEC
10512: ST_TO_ADDR
10513: LD_OWVAR 67
10517: PUSH
10518: FOR_TO
10519: IFFALSE 10581
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10521: LD_INT 0
10523: PPUSH
10524: LD_INT 1
10526: PPUSH
10527: LD_INT 4
10529: PUSH
10530: LD_INT 5
10532: PUSH
10533: LD_INT 5
10535: PUSH
10536: LD_INT 6
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: PUSH
10545: LD_OWVAR 67
10549: ARRAY
10550: PPUSH
10551: CALL_OW 380
// un := CreateHuman ;
10555: LD_ADDR_VAR 0 5
10559: PUSH
10560: CALL_OW 44
10564: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10565: LD_VAR 0 5
10569: PPUSH
10570: LD_VAR 0 4
10574: PPUSH
10575: CALL_OW 52
// end ;
10579: GO 10518
10581: POP
10582: POP
// end else
10583: GO 10655
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10585: LD_INT 0
10587: PPUSH
10588: LD_INT 1
10590: PPUSH
10591: LD_INT 4
10593: PUSH
10594: LD_INT 5
10596: PUSH
10597: LD_INT 5
10599: PUSH
10600: LD_INT 6
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: PUSH
10609: LD_OWVAR 67
10613: ARRAY
10614: PPUSH
10615: CALL_OW 380
// un := CreateHuman ;
10619: LD_ADDR_VAR 0 5
10623: PUSH
10624: CALL_OW 44
10628: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10629: LD_VAR 0 5
10633: PPUSH
10634: LD_VAR 0 4
10638: PPUSH
10639: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
10643: LD_VAR 0 5
10647: PPUSH
10648: LD_INT 9
10650: PPUSH
10651: CALL_OW 336
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10655: LD_ADDR_EXP 55
10659: PUSH
10660: LD_EXP 55
10664: PPUSH
10665: LD_EXP 55
10669: PUSH
10670: LD_INT 1
10672: PLUS
10673: PPUSH
10674: LD_VAR 0 5
10678: PPUSH
10679: CALL_OW 1
10683: ST_TO_ADDR
// end ;
10684: GO 10438
10686: POP
10687: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
10688: LD_ADDR_VAR 0 4
10692: PUSH
10693: LD_INT 10
10695: PPUSH
10696: LD_INT 22
10698: PUSH
10699: LD_INT 3
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PUSH
10706: LD_INT 30
10708: PUSH
10709: LD_INT 32
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 58
10718: PUSH
10719: EMPTY
10720: LIST
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: LIST
10726: PPUSH
10727: CALL_OW 70
10731: PUSH
10732: FOR_IN
10733: IFFALSE 10867
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
10735: LD_INT 40
10737: PUSH
10738: LD_INT 50
10740: PUSH
10741: LD_INT 75
10743: PUSH
10744: LD_INT 80
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: PUSH
10753: LD_OWVAR 67
10757: ARRAY
10758: PUSH
10759: LD_EXP 7
10763: PUSH
10764: LD_INT 10
10766: MUL
10767: MINUS
10768: PPUSH
10769: CALL_OW 13
10773: NOT
10774: IFFALSE 10778
// continue ;
10776: GO 10732
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10778: LD_INT 0
10780: PPUSH
10781: LD_INT 1
10783: PPUSH
10784: LD_INT 4
10786: PUSH
10787: LD_INT 5
10789: PUSH
10790: LD_INT 5
10792: PUSH
10793: LD_INT 6
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: PUSH
10802: LD_OWVAR 67
10806: ARRAY
10807: PPUSH
10808: CALL_OW 380
// un := CreateHuman ;
10812: LD_ADDR_VAR 0 5
10816: PUSH
10817: CALL_OW 44
10821: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10822: LD_VAR 0 5
10826: PPUSH
10827: LD_VAR 0 4
10831: PPUSH
10832: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10836: LD_ADDR_EXP 55
10840: PUSH
10841: LD_EXP 55
10845: PPUSH
10846: LD_EXP 55
10850: PUSH
10851: LD_INT 1
10853: PLUS
10854: PPUSH
10855: LD_VAR 0 5
10859: PPUSH
10860: CALL_OW 1
10864: ST_TO_ADDR
// end ;
10865: GO 10732
10867: POP
10868: POP
// for i := 1 to 5 do
10869: LD_ADDR_VAR 0 2
10873: PUSH
10874: DOUBLE
10875: LD_INT 1
10877: DEC
10878: ST_TO_ADDR
10879: LD_INT 5
10881: PUSH
10882: FOR_TO
10883: IFFALSE 10981
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10885: LD_INT 0
10887: PPUSH
10888: LD_INT 2
10890: PPUSH
10891: LD_INT 4
10893: PUSH
10894: LD_INT 5
10896: PUSH
10897: LD_INT 5
10899: PUSH
10900: LD_INT 6
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: LD_OWVAR 67
10913: ARRAY
10914: PPUSH
10915: CALL_OW 380
// un := CreateHuman ;
10919: LD_ADDR_VAR 0 5
10923: PUSH
10924: CALL_OW 44
10928: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
10929: LD_VAR 0 5
10933: PPUSH
10934: LD_INT 66
10936: PPUSH
10937: LD_INT 101
10939: PPUSH
10940: LD_INT 3
10942: PPUSH
10943: LD_INT 0
10945: PPUSH
10946: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10950: LD_ADDR_EXP 55
10954: PUSH
10955: LD_EXP 55
10959: PPUSH
10960: LD_EXP 55
10964: PUSH
10965: LD_INT 1
10967: PLUS
10968: PPUSH
10969: LD_VAR 0 5
10973: PPUSH
10974: CALL_OW 1
10978: ST_TO_ADDR
// end ;
10979: GO 10882
10981: POP
10982: POP
// tmp := [ ruFac1 , ruFac2 ] ;
10983: LD_ADDR_VAR 0 7
10987: PUSH
10988: LD_INT 72
10990: PUSH
10991: LD_INT 12
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: ST_TO_ADDR
// for i := 1 to tmp do
10998: LD_ADDR_VAR 0 2
11002: PUSH
11003: DOUBLE
11004: LD_INT 1
11006: DEC
11007: ST_TO_ADDR
11008: LD_VAR 0 7
11012: PUSH
11013: FOR_TO
11014: IFFALSE 11131
// for j := 1 to 6 do
11016: LD_ADDR_VAR 0 3
11020: PUSH
11021: DOUBLE
11022: LD_INT 1
11024: DEC
11025: ST_TO_ADDR
11026: LD_INT 6
11028: PUSH
11029: FOR_TO
11030: IFFALSE 11127
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11032: LD_INT 0
11034: PPUSH
11035: LD_INT 3
11037: PPUSH
11038: LD_INT 4
11040: PUSH
11041: LD_INT 5
11043: PUSH
11044: LD_INT 5
11046: PUSH
11047: LD_INT 6
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: PUSH
11056: LD_OWVAR 67
11060: ARRAY
11061: PPUSH
11062: CALL_OW 380
// un := CreateHuman ;
11066: LD_ADDR_VAR 0 5
11070: PUSH
11071: CALL_OW 44
11075: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
11076: LD_VAR 0 5
11080: PPUSH
11081: LD_VAR 0 7
11085: PUSH
11086: LD_VAR 0 2
11090: ARRAY
11091: PPUSH
11092: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11096: LD_ADDR_EXP 55
11100: PUSH
11101: LD_EXP 55
11105: PPUSH
11106: LD_EXP 55
11110: PUSH
11111: LD_INT 1
11113: PLUS
11114: PPUSH
11115: LD_VAR 0 5
11119: PPUSH
11120: CALL_OW 1
11124: ST_TO_ADDR
// end ;
11125: GO 11029
11127: POP
11128: POP
11129: GO 11013
11131: POP
11132: POP
// for i := 1 to 3 do
11133: LD_ADDR_VAR 0 2
11137: PUSH
11138: DOUBLE
11139: LD_INT 1
11141: DEC
11142: ST_TO_ADDR
11143: LD_INT 3
11145: PUSH
11146: FOR_TO
11147: IFFALSE 11236
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11149: LD_INT 0
11151: PPUSH
11152: LD_INT 4
11154: PPUSH
11155: LD_INT 4
11157: PUSH
11158: LD_INT 5
11160: PUSH
11161: LD_INT 5
11163: PUSH
11164: LD_INT 6
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: PUSH
11173: LD_OWVAR 67
11177: ARRAY
11178: PPUSH
11179: CALL_OW 380
// un := CreateHuman ;
11183: LD_ADDR_VAR 0 5
11187: PUSH
11188: CALL_OW 44
11192: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
11193: LD_VAR 0 5
11197: PPUSH
11198: LD_INT 17
11200: PPUSH
11201: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11205: LD_ADDR_EXP 55
11209: PUSH
11210: LD_EXP 55
11214: PPUSH
11215: LD_EXP 55
11219: PUSH
11220: LD_INT 1
11222: PLUS
11223: PPUSH
11224: LD_VAR 0 5
11228: PPUSH
11229: CALL_OW 1
11233: ST_TO_ADDR
// end ;
11234: GO 11146
11236: POP
11237: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
11238: LD_ADDR_VAR 0 2
11242: PUSH
11243: DOUBLE
11244: LD_INT 1
11246: DEC
11247: ST_TO_ADDR
11248: LD_INT 2
11250: PUSH
11251: LD_INT 3
11253: PUSH
11254: LD_INT 3
11256: PUSH
11257: LD_INT 3
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: PUSH
11266: LD_OWVAR 67
11270: ARRAY
11271: PUSH
11272: FOR_TO
11273: IFFALSE 11393
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
11275: LD_INT 22
11277: PPUSH
11278: LD_INT 1
11280: PPUSH
11281: LD_INT 1
11283: PPUSH
11284: LD_INT 52
11286: PPUSH
11287: LD_INT 100
11289: PPUSH
11290: CALL 30138 0 5
// veh := CreateVehicle ;
11294: LD_ADDR_VAR 0 6
11298: PUSH
11299: CALL_OW 45
11303: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
11304: LD_INT 0
11306: PPUSH
11307: LD_INT 3
11309: PPUSH
11310: LD_INT 4
11312: PPUSH
11313: CALL_OW 380
// un := CreateHuman ;
11317: LD_ADDR_VAR 0 5
11321: PUSH
11322: CALL_OW 44
11326: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
11327: LD_VAR 0 6
11331: PPUSH
11332: LD_INT 107
11334: PPUSH
11335: LD_INT 182
11337: PPUSH
11338: LD_INT 4
11340: PPUSH
11341: LD_INT 0
11343: PPUSH
11344: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
11348: LD_VAR 0 5
11352: PPUSH
11353: LD_VAR 0 6
11357: PPUSH
11358: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11362: LD_ADDR_EXP 55
11366: PUSH
11367: LD_EXP 55
11371: PPUSH
11372: LD_EXP 55
11376: PUSH
11377: LD_INT 1
11379: PLUS
11380: PPUSH
11381: LD_VAR 0 5
11385: PPUSH
11386: CALL_OW 1
11390: ST_TO_ADDR
// end ;
11391: GO 11272
11393: POP
11394: POP
// InitHc ;
11395: CALL_OW 19
// for i := 1 to [ 6 , 8 , 10 , 12 ] [ Difficulty ] do
11399: LD_ADDR_VAR 0 2
11403: PUSH
11404: DOUBLE
11405: LD_INT 1
11407: DEC
11408: ST_TO_ADDR
11409: LD_INT 6
11411: PUSH
11412: LD_INT 8
11414: PUSH
11415: LD_INT 10
11417: PUSH
11418: LD_INT 12
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: PUSH
11427: LD_OWVAR 67
11431: ARRAY
11432: PUSH
11433: FOR_TO
11434: IFFALSE 11506
// begin uc_nation := 0 ;
11436: LD_ADDR_OWVAR 21
11440: PUSH
11441: LD_INT 0
11443: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
11444: LD_ADDR_OWVAR 28
11448: PUSH
11449: LD_INT 15
11451: ST_TO_ADDR
// un := CreateHuman ;
11452: LD_ADDR_VAR 0 5
11456: PUSH
11457: CALL_OW 44
11461: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
11462: LD_VAR 0 5
11466: PPUSH
11467: LD_INT 269
11469: PUSH
11470: LD_INT 300
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: LD_VAR 0 2
11481: PUSH
11482: LD_INT 2
11484: MOD
11485: PUSH
11486: LD_INT 1
11488: PLUS
11489: ARRAY
11490: PPUSH
11491: LD_INT 182
11493: PPUSH
11494: LD_INT 4
11496: PPUSH
11497: LD_INT 0
11499: PPUSH
11500: CALL_OW 50
// end ;
11504: GO 11433
11506: POP
11507: POP
// uc_nation := 3 ;
11508: LD_ADDR_OWVAR 21
11512: PUSH
11513: LD_INT 3
11515: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
11516: LD_EXP 8
11520: PUSH
11521: LD_INT 10
11523: PUSH
11524: LD_INT 8
11526: PUSH
11527: LD_INT 6
11529: PUSH
11530: LD_INT 5
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: PUSH
11539: LD_OWVAR 67
11543: ARRAY
11544: LESS
11545: IFFALSE 11624
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
11547: LD_INT 21
11549: PPUSH
11550: LD_INT 1
11552: PPUSH
11553: LD_INT 1
11555: PPUSH
11556: LD_INT 51
11558: PPUSH
11559: LD_INT 12
11561: PPUSH
11562: CALL 30138 0 5
// veh := CreateVehicle ;
11566: LD_ADDR_VAR 0 6
11570: PUSH
11571: CALL_OW 45
11575: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
11576: LD_VAR 0 6
11580: PPUSH
11581: LD_INT 269
11583: PPUSH
11584: LD_INT 66
11586: PPUSH
11587: LD_INT 4
11589: PPUSH
11590: LD_INT 0
11592: PPUSH
11593: CALL 64143 0 5
// SetLives ( veh , 333 ) ;
11597: LD_VAR 0 6
11601: PPUSH
11602: LD_INT 333
11604: PPUSH
11605: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
11609: LD_VAR 0 6
11613: PPUSH
11614: LD_INT 2
11616: PPUSH
11617: LD_INT 100
11619: PPUSH
11620: CALL_OW 290
// end ; end ;
11624: LD_VAR 0 1
11628: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
11629: LD_EXP 51
11633: PUSH
11634: LD_EXP 51
11638: PPUSH
11639: CALL_OW 255
11643: PUSH
11644: LD_INT 3
11646: EQUAL
11647: AND
11648: IFFALSE 11811
11650: GO 11652
11652: DISABLE
11653: LD_INT 0
11655: PPUSH
// begin enable ;
11656: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
11657: LD_INT 81
11659: PUSH
11660: LD_INT 3
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: LD_INT 91
11669: PUSH
11670: LD_EXP 51
11674: PUSH
11675: LD_INT 15
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: LIST
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PPUSH
11687: CALL_OW 69
11691: IFFALSE 11771
// begin if not IsDrivenBy ( ruBlockadeTank ) then
11693: LD_EXP 51
11697: PPUSH
11698: CALL_OW 311
11702: NOT
11703: IFFALSE 11769
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
11705: LD_ADDR_VAR 0 1
11709: PUSH
11710: LD_INT 22
11712: PUSH
11713: LD_INT 3
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 21
11722: PUSH
11723: LD_INT 1
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PPUSH
11734: CALL_OW 69
11738: PPUSH
11739: LD_EXP 51
11743: PPUSH
11744: CALL_OW 74
11748: ST_TO_ADDR
// if driver then
11749: LD_VAR 0 1
11753: IFFALSE 11769
// ComEnterUnit ( driver , ruBlockadeTank ) ;
11755: LD_VAR 0 1
11759: PPUSH
11760: LD_EXP 51
11764: PPUSH
11765: CALL_OW 120
// end ; exit ;
11769: GO 11811
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
11771: LD_EXP 51
11775: PPUSH
11776: CALL_OW 256
11780: PUSH
11781: LD_INT 1000
11783: LESS
11784: PUSH
11785: LD_EXP 51
11789: PPUSH
11790: CALL_OW 311
11794: AND
11795: IFFALSE 11811
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
11797: LD_EXP 51
11801: PPUSH
11802: CALL_OW 311
11806: PPUSH
11807: CALL 63703 0 1
// end ;
11811: PPOPN 1
11813: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
11814: LD_EXP 53
11818: PPUSH
11819: LD_INT 3
11821: PUSH
11822: LD_INT 24
11824: PUSH
11825: LD_INT 1000
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PPUSH
11836: CALL_OW 72
11840: PUSH
11841: LD_EXP 53
11845: PPUSH
11846: LD_INT 25
11848: PUSH
11849: LD_INT 4
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 50
11858: PUSH
11859: EMPTY
11860: LIST
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PPUSH
11866: CALL_OW 72
11870: AND
11871: IFFALSE 12059
11873: GO 11875
11875: DISABLE
11876: LD_INT 0
11878: PPUSH
11879: PPUSH
11880: PPUSH
// begin enable ;
11881: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
11882: LD_ADDR_VAR 0 3
11886: PUSH
11887: LD_EXP 53
11891: PPUSH
11892: LD_INT 3
11894: PUSH
11895: LD_INT 24
11897: PUSH
11898: LD_INT 1000
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PPUSH
11909: CALL_OW 72
11913: PPUSH
11914: LD_INT 1
11916: PPUSH
11917: CALL 63943 0 2
11921: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
11922: LD_ADDR_VAR 0 2
11926: PUSH
11927: LD_EXP 53
11931: PPUSH
11932: LD_INT 25
11934: PUSH
11935: LD_INT 4
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: LD_INT 50
11944: PUSH
11945: EMPTY
11946: LIST
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PPUSH
11952: CALL_OW 72
11956: PUSH
11957: LD_INT 1
11959: ARRAY
11960: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
11961: LD_VAR 0 2
11965: PPUSH
11966: LD_VAR 0 3
11970: PUSH
11971: LD_INT 1
11973: ARRAY
11974: PPUSH
11975: CALL 59241 0 2
11979: NOT
11980: IFFALSE 12059
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
11982: LD_VAR 0 3
11986: PUSH
11987: LD_INT 1
11989: ARRAY
11990: PPUSH
11991: LD_INT 9
11993: PPUSH
11994: CALL_OW 308
11998: NOT
11999: IFFALSE 12017
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
12001: LD_VAR 0 3
12005: PUSH
12006: LD_INT 1
12008: ARRAY
12009: PPUSH
12010: LD_INT 9
12012: PPUSH
12013: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
12017: LD_VAR 0 2
12021: PPUSH
12022: LD_VAR 0 3
12026: PUSH
12027: LD_INT 1
12029: ARRAY
12030: PPUSH
12031: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
12035: LD_VAR 0 2
12039: PPUSH
12040: LD_INT 179
12042: PPUSH
12043: LD_INT 113
12045: PPUSH
12046: CALL_OW 171
// AddComHold ( sci ) ;
12050: LD_VAR 0 2
12054: PPUSH
12055: CALL_OW 200
// end ; end ;
12059: PPOPN 3
12061: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
12062: LD_INT 2
12064: PPUSH
12065: LD_INT 52
12067: PPUSH
12068: CALL_OW 292
12072: IFFALSE 12177
12074: GO 12076
12076: DISABLE
12077: LD_INT 0
12079: PPUSH
12080: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
12081: LD_ADDR_VAR 0 2
12085: PUSH
12086: LD_EXP 55
12090: PPUSH
12091: LD_INT 25
12093: PUSH
12094: LD_INT 1
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 50
12103: PUSH
12104: EMPTY
12105: LIST
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PPUSH
12111: CALL_OW 72
12115: ST_TO_ADDR
// if not tmp then
12116: LD_VAR 0 2
12120: NOT
12121: IFFALSE 12125
// exit ;
12123: GO 12177
// for i in tmp do
12125: LD_ADDR_VAR 0 1
12129: PUSH
12130: LD_VAR 0 2
12134: PUSH
12135: FOR_IN
12136: IFFALSE 12175
// begin if IsInUnit ( i ) then
12138: LD_VAR 0 1
12142: PPUSH
12143: CALL_OW 310
12147: IFFALSE 12158
// ComExitBuilding ( i ) ;
12149: LD_VAR 0 1
12153: PPUSH
12154: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
12158: LD_VAR 0 1
12162: PPUSH
12163: LD_INT 84
12165: PPUSH
12166: LD_INT 133
12168: PPUSH
12169: CALL_OW 174
// end ;
12173: GO 12135
12175: POP
12176: POP
// end ;
12177: PPOPN 2
12179: END
// every 0 0$1 trigger leninSpotted do var i , tmp , weapon ;
12180: LD_EXP 14
12184: IFFALSE 12344
12186: GO 12188
12188: DISABLE
12189: LD_INT 0
12191: PPUSH
12192: PPUSH
12193: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
12194: LD_ADDR_VAR 0 2
12198: PUSH
12199: LD_INT 72
12201: PUSH
12202: LD_INT 12
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
12209: LD_ADDR_VAR 0 3
12213: PUSH
12214: LD_INT 44
12216: PUSH
12217: LD_INT 43
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 45
12226: PUSH
12227: LD_INT 44
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 45
12236: PUSH
12237: LD_INT 46
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 45
12246: PUSH
12247: LD_INT 46
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: PUSH
12260: LD_OWVAR 67
12264: ARRAY
12265: ST_TO_ADDR
// for i := 1 to 6 do
12266: LD_ADDR_VAR 0 1
12270: PUSH
12271: DOUBLE
12272: LD_INT 1
12274: DEC
12275: ST_TO_ADDR
12276: LD_INT 6
12278: PUSH
12279: FOR_TO
12280: IFFALSE 12342
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
12282: LD_VAR 0 2
12286: PPUSH
12287: LD_INT 22
12289: PUSH
12290: LD_INT 23
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PUSH
12297: LD_VAR 0 1
12301: PUSH
12302: LD_INT 2
12304: MOD
12305: PUSH
12306: LD_INT 1
12308: PLUS
12309: ARRAY
12310: PPUSH
12311: LD_INT 1
12313: PPUSH
12314: LD_INT 1
12316: PPUSH
12317: LD_VAR 0 3
12321: PUSH
12322: LD_VAR 0 1
12326: PUSH
12327: LD_INT 2
12329: MOD
12330: PUSH
12331: LD_INT 1
12333: PLUS
12334: ARRAY
12335: PPUSH
12336: CALL_OW 185
12340: GO 12279
12342: POP
12343: POP
// end ;
12344: PPOPN 3
12346: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
12347: LD_EXP 11
12351: IFFALSE 13500
12353: GO 12355
12355: DISABLE
12356: LD_INT 0
12358: PPUSH
12359: PPUSH
12360: PPUSH
12361: PPUSH
12362: PPUSH
12363: PPUSH
// begin enable ;
12364: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
12365: LD_ADDR_VAR 0 6
12369: PUSH
12370: LD_INT 10
12372: PPUSH
12373: LD_INT 81
12375: PUSH
12376: LD_INT 3
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PPUSH
12383: CALL_OW 70
12387: ST_TO_ADDR
// if ruSpecialVehicleGroup then
12388: LD_EXP 56
12392: IFFALSE 12658
// begin for i in ruSpecialVehicleGroup do
12394: LD_ADDR_VAR 0 1
12398: PUSH
12399: LD_EXP 56
12403: PUSH
12404: FOR_IN
12405: IFFALSE 12656
// begin if enemyInBase then
12407: LD_VAR 0 6
12411: IFFALSE 12654
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
12413: LD_VAR 0 1
12417: PPUSH
12418: CALL_OW 256
12422: PUSH
12423: LD_INT 500
12425: GREATER
12426: PUSH
12427: LD_VAR 0 1
12431: PPUSH
12432: CALL_OW 110
12436: PUSH
12437: LD_INT 0
12439: EQUAL
12440: AND
12441: IFFALSE 12467
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
12443: LD_VAR 0 1
12447: PPUSH
12448: LD_VAR 0 6
12452: PPUSH
12453: LD_VAR 0 1
12457: PPUSH
12458: CALL_OW 74
12462: PPUSH
12463: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12467: LD_VAR 0 1
12471: PPUSH
12472: CALL_OW 256
12476: PUSH
12477: LD_INT 500
12479: LESSEQUAL
12480: PUSH
12481: LD_VAR 0 1
12485: PPUSH
12486: CALL_OW 110
12490: PUSH
12491: LD_INT 0
12493: EQUAL
12494: AND
12495: IFFALSE 12524
// begin SetTag ( i , 1 ) ;
12497: LD_VAR 0 1
12501: PPUSH
12502: LD_INT 1
12504: PPUSH
12505: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
12509: LD_VAR 0 1
12513: PPUSH
12514: LD_INT 83
12516: PPUSH
12517: LD_INT 134
12519: PPUSH
12520: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
12524: LD_VAR 0 1
12528: PPUSH
12529: CALL_OW 256
12533: PUSH
12534: LD_INT 1000
12536: LESS
12537: PUSH
12538: LD_VAR 0 1
12542: PPUSH
12543: CALL_OW 110
12547: PUSH
12548: LD_INT 1
12550: EQUAL
12551: AND
12552: PUSH
12553: LD_VAR 0 1
12557: PPUSH
12558: LD_INT 83
12560: PPUSH
12561: LD_INT 134
12563: PPUSH
12564: CALL_OW 297
12568: PUSH
12569: LD_INT 6
12571: LESS
12572: AND
12573: IFFALSE 12601
// begin SetFuel ( i , 100 ) ;
12575: LD_VAR 0 1
12579: PPUSH
12580: LD_INT 100
12582: PPUSH
12583: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12587: LD_VAR 0 1
12591: PPUSH
12592: CALL_OW 310
12596: PPUSH
12597: CALL 63823 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
12601: LD_VAR 0 1
12605: PPUSH
12606: CALL_OW 256
12610: PUSH
12611: LD_INT 1000
12613: EQUAL
12614: PUSH
12615: LD_VAR 0 1
12619: PPUSH
12620: CALL_OW 110
12624: PUSH
12625: LD_INT 1
12627: EQUAL
12628: AND
12629: PUSH
12630: LD_VAR 0 1
12634: PPUSH
12635: CALL_OW 311
12639: AND
12640: IFFALSE 12654
// SetTag ( i , 0 ) ;
12642: LD_VAR 0 1
12646: PPUSH
12647: LD_INT 0
12649: PPUSH
12650: CALL_OW 109
// end ; end ;
12654: GO 12404
12656: POP
12657: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
12658: LD_ADDR_VAR 0 5
12662: PUSH
12663: LD_EXP 55
12667: PPUSH
12668: LD_INT 25
12670: PUSH
12671: LD_INT 4
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PPUSH
12678: CALL_OW 72
12682: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12683: LD_ADDR_VAR 0 4
12687: PUSH
12688: LD_EXP 55
12692: PPUSH
12693: LD_INT 92
12695: PUSH
12696: LD_INT 92
12698: PUSH
12699: LD_INT 155
12701: PUSH
12702: LD_INT 12
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: PUSH
12711: LD_INT 3
12713: PUSH
12714: LD_INT 24
12716: PUSH
12717: LD_INT 1000
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PPUSH
12732: CALL_OW 72
12736: ST_TO_ADDR
// if sci then
12737: LD_VAR 0 5
12741: IFFALSE 12874
// begin if hurt then
12743: LD_VAR 0 4
12747: IFFALSE 12820
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12749: LD_VAR 0 5
12753: PPUSH
12754: LD_INT 3
12756: PUSH
12757: LD_INT 54
12759: PUSH
12760: EMPTY
12761: LIST
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PPUSH
12767: CALL_OW 72
12771: IFFALSE 12800
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
12773: LD_VAR 0 5
12777: PPUSH
12778: LD_INT 3
12780: PUSH
12781: LD_INT 54
12783: PUSH
12784: EMPTY
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PPUSH
12791: CALL_OW 72
12795: PPUSH
12796: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
12800: LD_VAR 0 5
12804: PPUSH
12805: LD_VAR 0 4
12809: PUSH
12810: LD_INT 1
12812: ARRAY
12813: PPUSH
12814: CALL_OW 188
// end else
12818: GO 12874
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12820: LD_VAR 0 5
12824: PPUSH
12825: LD_INT 3
12827: PUSH
12828: LD_INT 54
12830: PUSH
12831: EMPTY
12832: LIST
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PPUSH
12838: CALL_OW 72
12842: IFFALSE 12874
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
12844: LD_VAR 0 5
12848: PPUSH
12849: LD_INT 3
12851: PUSH
12852: LD_INT 54
12854: PUSH
12855: EMPTY
12856: LIST
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PPUSH
12862: CALL_OW 72
12866: PPUSH
12867: LD_INT 17
12869: PPUSH
12870: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12874: LD_ADDR_VAR 0 3
12878: PUSH
12879: LD_INT 10
12881: PPUSH
12882: LD_INT 21
12884: PUSH
12885: LD_INT 3
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 3
12894: PUSH
12895: LD_INT 24
12897: PUSH
12898: LD_INT 1000
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PPUSH
12913: CALL_OW 70
12917: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
12918: LD_ADDR_VAR 0 2
12922: PUSH
12923: LD_EXP 55
12927: PPUSH
12928: LD_INT 25
12930: PUSH
12931: LD_INT 2
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PPUSH
12938: CALL_OW 72
12942: PUSH
12943: LD_INT 22
12945: PUSH
12946: LD_INT 3
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: LD_INT 34
12955: PUSH
12956: LD_INT 52
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PPUSH
12967: CALL_OW 69
12971: UNION
12972: ST_TO_ADDR
// if not tmp then
12973: LD_VAR 0 2
12977: NOT
12978: IFFALSE 12982
// exit ;
12980: GO 13500
// for i in tmp do
12982: LD_ADDR_VAR 0 1
12986: PUSH
12987: LD_VAR 0 2
12991: PUSH
12992: FOR_IN
12993: IFFALSE 13498
// begin if GetClass ( i ) = 2 then
12995: LD_VAR 0 1
12999: PPUSH
13000: CALL_OW 257
13004: PUSH
13005: LD_INT 2
13007: EQUAL
13008: IFFALSE 13231
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
13010: LD_VAR 0 1
13014: PPUSH
13015: CALL_OW 256
13019: PUSH
13020: LD_INT 1000
13022: EQUAL
13023: PUSH
13024: LD_VAR 0 1
13028: PPUSH
13029: CALL_OW 110
13033: PUSH
13034: LD_INT 1
13036: EQUAL
13037: AND
13038: IFFALSE 13052
// SetTag ( i , 0 ) ;
13040: LD_VAR 0 1
13044: PPUSH
13045: LD_INT 0
13047: PPUSH
13048: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
13052: LD_VAR 0 1
13056: PPUSH
13057: CALL_OW 256
13061: PUSH
13062: LD_INT 500
13064: LESSEQUAL
13065: PUSH
13066: LD_VAR 0 1
13070: PPUSH
13071: CALL_OW 110
13075: PUSH
13076: LD_INT 0
13078: EQUAL
13079: AND
13080: IFFALSE 13109
// begin SetTag ( i , 1 ) ;
13082: LD_VAR 0 1
13086: PPUSH
13087: LD_INT 1
13089: PPUSH
13090: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
13094: LD_VAR 0 1
13098: PPUSH
13099: LD_INT 92
13101: PPUSH
13102: LD_INT 155
13104: PPUSH
13105: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
13109: LD_VAR 0 3
13113: PUSH
13114: LD_VAR 0 1
13118: PPUSH
13119: CALL_OW 256
13123: PUSH
13124: LD_INT 500
13126: GREATER
13127: AND
13128: PUSH
13129: LD_VAR 0 1
13133: PPUSH
13134: CALL_OW 110
13138: PUSH
13139: LD_INT 0
13141: EQUAL
13142: AND
13143: PUSH
13144: LD_VAR 0 1
13148: PPUSH
13149: CALL_OW 314
13153: NOT
13154: AND
13155: IFFALSE 13229
// begin if b then
13157: LD_VAR 0 3
13161: IFFALSE 13193
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
13163: LD_VAR 0 1
13167: PPUSH
13168: LD_VAR 0 3
13172: PUSH
13173: LD_INT 1
13175: PPUSH
13176: LD_VAR 0 3
13180: PPUSH
13181: CALL_OW 12
13185: ARRAY
13186: PPUSH
13187: CALL_OW 130
13191: GO 13229
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13193: LD_VAR 0 1
13197: PPUSH
13198: LD_INT 94
13200: PPUSH
13201: LD_INT 165
13203: PPUSH
13204: CALL_OW 297
13208: PUSH
13209: LD_INT 8
13211: GREATER
13212: IFFALSE 13229
// ComMoveXY ( i , 94 , 165 ) ;
13214: LD_VAR 0 1
13218: PPUSH
13219: LD_INT 94
13221: PPUSH
13222: LD_INT 165
13224: PPUSH
13225: CALL_OW 111
// end ; end else
13229: GO 13496
// if GetWeapon ( i ) = ru_crane then
13231: LD_VAR 0 1
13235: PPUSH
13236: CALL_OW 264
13240: PUSH
13241: LD_INT 52
13243: EQUAL
13244: IFFALSE 13496
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
13246: LD_VAR 0 1
13250: PPUSH
13251: CALL_OW 256
13255: PUSH
13256: LD_INT 1000
13258: EQUAL
13259: PUSH
13260: LD_VAR 0 1
13264: PPUSH
13265: CALL_OW 110
13269: PUSH
13270: LD_INT 1
13272: EQUAL
13273: AND
13274: IFFALSE 13300
// begin SetTag ( i , 0 ) ;
13276: LD_VAR 0 1
13280: PPUSH
13281: LD_INT 0
13283: PPUSH
13284: CALL_OW 109
// SetFuel ( i , 100 ) ;
13288: LD_VAR 0 1
13292: PPUSH
13293: LD_INT 100
13295: PPUSH
13296: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
13300: LD_VAR 0 1
13304: PPUSH
13305: CALL_OW 256
13309: PUSH
13310: LD_INT 500
13312: LESSEQUAL
13313: PUSH
13314: LD_VAR 0 1
13318: PPUSH
13319: CALL_OW 110
13323: PUSH
13324: LD_INT 0
13326: EQUAL
13327: AND
13328: IFFALSE 13371
// begin SetTag ( i , 1 ) ;
13330: LD_VAR 0 1
13334: PPUSH
13335: LD_INT 1
13337: PPUSH
13338: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
13342: LD_VAR 0 1
13346: PPUSH
13347: LD_INT 83
13349: PPUSH
13350: LD_INT 135
13352: PPUSH
13353: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
13357: LD_VAR 0 1
13361: PPUSH
13362: CALL_OW 310
13366: PPUSH
13367: CALL 63823 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
13371: LD_VAR 0 1
13375: PPUSH
13376: CALL_OW 256
13380: PUSH
13381: LD_INT 500
13383: GREATER
13384: PUSH
13385: LD_VAR 0 1
13389: PPUSH
13390: CALL_OW 110
13394: PUSH
13395: LD_INT 0
13397: EQUAL
13398: AND
13399: PUSH
13400: LD_VAR 0 1
13404: PPUSH
13405: CALL_OW 311
13409: AND
13410: PUSH
13411: LD_VAR 0 1
13415: PPUSH
13416: CALL_OW 314
13420: NOT
13421: AND
13422: IFFALSE 13496
// begin if b then
13424: LD_VAR 0 3
13428: IFFALSE 13460
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
13430: LD_VAR 0 1
13434: PPUSH
13435: LD_VAR 0 3
13439: PUSH
13440: LD_INT 1
13442: PPUSH
13443: LD_VAR 0 3
13447: PPUSH
13448: CALL_OW 12
13452: ARRAY
13453: PPUSH
13454: CALL_OW 130
13458: GO 13496
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13460: LD_VAR 0 1
13464: PPUSH
13465: LD_INT 94
13467: PPUSH
13468: LD_INT 165
13470: PPUSH
13471: CALL_OW 297
13475: PUSH
13476: LD_INT 8
13478: GREATER
13479: IFFALSE 13496
// ComMoveXY ( i , 94 , 165 ) ;
13481: LD_VAR 0 1
13485: PPUSH
13486: LD_INT 94
13488: PPUSH
13489: LD_INT 165
13491: PPUSH
13492: CALL_OW 111
// end ; end ; end ;
13496: GO 12992
13498: POP
13499: POP
// end ;
13500: PPOPN 6
13502: END
// every 8 8$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp ;
13503: LD_EXP 23
13507: NOT
13508: PUSH
13509: LD_EXP 27
13513: NOT
13514: AND
13515: IFFALSE 14431
13517: GO 13519
13519: DISABLE
13520: LD_INT 0
13522: PPUSH
13523: PPUSH
13524: PPUSH
13525: PPUSH
// begin enable ;
13526: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
13527: LD_INT 35
13529: PUSH
13530: LD_INT 45
13532: PUSH
13533: LD_INT 55
13535: PUSH
13536: LD_INT 60
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: PUSH
13545: LD_OWVAR 67
13549: ARRAY
13550: PPUSH
13551: CALL_OW 13
13555: IFFALSE 13571
// waveStrength := waveStrength + 1 ;
13557: LD_ADDR_EXP 58
13561: PUSH
13562: LD_EXP 58
13566: PUSH
13567: LD_INT 1
13569: PLUS
13570: ST_TO_ADDR
// if waveStrength > [ 4 , 5 , 6 , 7 ] [ Difficulty ] then
13571: LD_EXP 58
13575: PUSH
13576: LD_INT 4
13578: PUSH
13579: LD_INT 5
13581: PUSH
13582: LD_INT 6
13584: PUSH
13585: LD_INT 7
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: PUSH
13594: LD_OWVAR 67
13598: ARRAY
13599: GREATER
13600: IFFALSE 13633
// begin waveStrength := waveStrength + Difficulty ;
13602: LD_ADDR_EXP 58
13606: PUSH
13607: LD_EXP 58
13611: PUSH
13612: LD_OWVAR 67
13616: PLUS
13617: ST_TO_ADDR
// disableAttackOnHeike := true ;
13618: LD_ADDR_EXP 27
13622: PUSH
13623: LD_INT 1
13625: ST_TO_ADDR
// wait ( 3 3$00 ) ;
13626: LD_INT 6300
13628: PPUSH
13629: CALL_OW 67
// end ; if disableAttackOnHeike and Difficulty > 1 then
13633: LD_EXP 27
13637: PUSH
13638: LD_OWVAR 67
13642: PUSH
13643: LD_INT 1
13645: GREATER
13646: AND
13647: IFFALSE 13856
// begin for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
13649: LD_ADDR_VAR 0 1
13653: PUSH
13654: DOUBLE
13655: LD_INT 1
13657: DEC
13658: ST_TO_ADDR
13659: LD_INT 3
13661: PUSH
13662: LD_INT 3
13664: PUSH
13665: LD_INT 4
13667: PUSH
13668: LD_INT 4
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: PUSH
13677: LD_OWVAR 67
13681: ARRAY
13682: PUSH
13683: FOR_TO
13684: IFFALSE 13854
// begin InitHc ;
13686: CALL_OW 19
// InitVc ;
13690: CALL_OW 20
// uc_side := 3 ;
13694: LD_ADDR_OWVAR 20
13698: PUSH
13699: LD_INT 3
13701: ST_TO_ADDR
// uc_nation := 3 ;
13702: LD_ADDR_OWVAR 21
13706: PUSH
13707: LD_INT 3
13709: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
13710: LD_INT 0
13712: PPUSH
13713: LD_INT 1
13715: PPUSH
13716: LD_OWVAR 67
13720: PUSH
13721: LD_INT 2
13723: PLUS
13724: PPUSH
13725: CALL_OW 380
// un := CreateHuman ;
13729: LD_ADDR_VAR 0 2
13733: PUSH
13734: CALL_OW 44
13738: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
13739: LD_VAR 0 2
13743: PPUSH
13744: LD_INT 160
13746: PPUSH
13747: LD_INT 3
13749: PPUSH
13750: LD_INT 2
13752: PPUSH
13753: LD_INT 0
13755: PPUSH
13756: CALL 64143 0 5
// SetClass ( un , class_bazooker ) ;
13760: LD_VAR 0 2
13764: PPUSH
13765: LD_INT 9
13767: PPUSH
13768: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13772: LD_ADDR_EXP 57
13776: PUSH
13777: LD_EXP 57
13781: PPUSH
13782: LD_EXP 57
13786: PUSH
13787: LD_INT 1
13789: PLUS
13790: PPUSH
13791: LD_VAR 0 2
13795: PPUSH
13796: CALL_OW 1
13800: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13801: LD_VAR 0 2
13805: PPUSH
13806: LD_INT 177
13808: PPUSH
13809: LD_INT 17
13811: PPUSH
13812: CALL_OW 111
// wait ( 0 0$2 ) ;
13816: LD_INT 70
13818: PPUSH
13819: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13823: LD_ADDR_VAR 0 4
13827: PUSH
13828: LD_VAR 0 4
13832: PPUSH
13833: LD_VAR 0 4
13837: PUSH
13838: LD_INT 1
13840: PLUS
13841: PPUSH
13842: LD_VAR 0 2
13846: PPUSH
13847: CALL_OW 1
13851: ST_TO_ADDR
// end ;
13852: GO 13683
13854: POP
13855: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] + waveStrength do
13856: LD_ADDR_VAR 0 1
13860: PUSH
13861: DOUBLE
13862: LD_INT 1
13864: DEC
13865: ST_TO_ADDR
13866: LD_INT 2
13868: PUSH
13869: LD_INT 3
13871: PUSH
13872: LD_INT 4
13874: PUSH
13875: LD_INT 5
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: PUSH
13884: LD_OWVAR 67
13888: ARRAY
13889: PUSH
13890: LD_EXP 58
13894: PLUS
13895: PUSH
13896: FOR_TO
13897: IFFALSE 14206
// begin InitHc ;
13899: CALL_OW 19
// InitVc ;
13903: CALL_OW 20
// uc_side := 3 ;
13907: LD_ADDR_OWVAR 20
13911: PUSH
13912: LD_INT 3
13914: ST_TO_ADDR
// uc_nation := 3 ;
13915: LD_ADDR_OWVAR 21
13919: PUSH
13920: LD_INT 3
13922: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
13923: LD_INT 22
13925: PUSH
13926: LD_INT 23
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: LD_INT 1
13935: PPUSH
13936: LD_INT 2
13938: PPUSH
13939: CALL_OW 12
13943: ARRAY
13944: PPUSH
13945: LD_INT 1
13947: PPUSH
13948: LD_INT 1
13950: PPUSH
13951: LD_INT 44
13953: PUSH
13954: LD_INT 45
13956: PUSH
13957: LD_INT 43
13959: PUSH
13960: LD_INT 42
13962: PUSH
13963: LD_INT 44
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: PUSH
13973: LD_INT 1
13975: PPUSH
13976: LD_INT 5
13978: PPUSH
13979: CALL_OW 12
13983: ARRAY
13984: PPUSH
13985: LD_INT 99
13987: PPUSH
13988: CALL 30138 0 5
// veh := CreateVehicle ;
13992: LD_ADDR_VAR 0 3
13996: PUSH
13997: CALL_OW 45
14001: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
14002: LD_VAR 0 3
14006: PPUSH
14007: LD_INT 160
14009: PPUSH
14010: LD_INT 3
14012: PPUSH
14013: LD_INT 2
14015: PPUSH
14016: LD_INT 0
14018: PPUSH
14019: CALL 64143 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14023: LD_ADDR_EXP 57
14027: PUSH
14028: LD_EXP 57
14032: PPUSH
14033: LD_EXP 57
14037: PUSH
14038: LD_INT 1
14040: PLUS
14041: PPUSH
14042: LD_VAR 0 3
14046: PPUSH
14047: CALL_OW 1
14051: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14052: LD_INT 0
14054: PPUSH
14055: LD_INT 3
14057: PPUSH
14058: LD_OWVAR 67
14062: PUSH
14063: LD_INT 2
14065: PLUS
14066: PPUSH
14067: CALL_OW 380
// un := CreateHuman ;
14071: LD_ADDR_VAR 0 2
14075: PUSH
14076: CALL_OW 44
14080: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14081: LD_VAR 0 2
14085: PPUSH
14086: LD_VAR 0 3
14090: PPUSH
14091: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14095: LD_ADDR_EXP 57
14099: PUSH
14100: LD_EXP 57
14104: PPUSH
14105: LD_EXP 57
14109: PUSH
14110: LD_INT 1
14112: PLUS
14113: PPUSH
14114: LD_VAR 0 2
14118: PPUSH
14119: CALL_OW 1
14123: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
14124: LD_VAR 0 2
14128: PPUSH
14129: LD_INT 177
14131: PPUSH
14132: LD_INT 17
14134: PPUSH
14135: CALL_OW 111
// wait ( 0 0$2 ) ;
14139: LD_INT 70
14141: PPUSH
14142: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14146: LD_ADDR_VAR 0 4
14150: PUSH
14151: LD_VAR 0 4
14155: PPUSH
14156: LD_VAR 0 4
14160: PUSH
14161: LD_INT 1
14163: PLUS
14164: PPUSH
14165: LD_VAR 0 3
14169: PPUSH
14170: CALL_OW 1
14174: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14175: LD_ADDR_VAR 0 4
14179: PUSH
14180: LD_VAR 0 4
14184: PPUSH
14185: LD_VAR 0 4
14189: PUSH
14190: LD_INT 1
14192: PLUS
14193: PPUSH
14194: LD_VAR 0 2
14198: PPUSH
14199: CALL_OW 1
14203: ST_TO_ADDR
// end ;
14204: GO 13896
14206: POP
14207: POP
// for i in tmp do
14208: LD_ADDR_VAR 0 1
14212: PUSH
14213: LD_VAR 0 4
14217: PUSH
14218: FOR_IN
14219: IFFALSE 14309
// begin if Prob ( 50 ) then
14221: LD_INT 50
14223: PPUSH
14224: CALL_OW 13
14228: IFFALSE 14247
// ComAgressiveMove ( i , 206 , 73 ) else
14230: LD_VAR 0 1
14234: PPUSH
14235: LD_INT 206
14237: PPUSH
14238: LD_INT 73
14240: PPUSH
14241: CALL_OW 114
14245: GO 14307
// begin ComAgressiveMove ( i , 206 , 73 ) ;
14247: LD_VAR 0 1
14251: PPUSH
14252: LD_INT 206
14254: PPUSH
14255: LD_INT 73
14257: PPUSH
14258: CALL_OW 114
// AddComAgressiveMove ( i , 257 , 105 ) ;
14262: LD_VAR 0 1
14266: PPUSH
14267: LD_INT 257
14269: PPUSH
14270: LD_INT 105
14272: PPUSH
14273: CALL_OW 174
// AddComAgressiveMove ( i , 227 , 97 ) ;
14277: LD_VAR 0 1
14281: PPUSH
14282: LD_INT 227
14284: PPUSH
14285: LD_INT 97
14287: PPUSH
14288: CALL_OW 174
// AddComAgressiveMove ( i , 206 , 73 ) ;
14292: LD_VAR 0 1
14296: PPUSH
14297: LD_INT 206
14299: PPUSH
14300: LD_INT 73
14302: PPUSH
14303: CALL_OW 174
// end ; end ;
14307: GO 14218
14309: POP
14310: POP
// repeat wait ( 0 0$1 ) ;
14311: LD_INT 35
14313: PPUSH
14314: CALL_OW 67
// for i in tmp do
14318: LD_ADDR_VAR 0 1
14322: PUSH
14323: LD_VAR 0 4
14327: PUSH
14328: FOR_IN
14329: IFFALSE 14408
// if IsDead ( i ) then
14331: LD_VAR 0 1
14335: PPUSH
14336: CALL_OW 301
14340: IFFALSE 14360
// tmp := tmp diff i else
14342: LD_ADDR_VAR 0 4
14346: PUSH
14347: LD_VAR 0 4
14351: PUSH
14352: LD_VAR 0 1
14356: DIFF
14357: ST_TO_ADDR
14358: GO 14406
// if not HasTask ( i ) then
14360: LD_VAR 0 1
14364: PPUSH
14365: CALL_OW 314
14369: NOT
14370: IFFALSE 14406
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
14372: LD_VAR 0 1
14376: PPUSH
14377: LD_INT 81
14379: PUSH
14380: LD_INT 3
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PPUSH
14387: CALL_OW 69
14391: PPUSH
14392: LD_VAR 0 1
14396: PPUSH
14397: CALL_OW 74
14401: PPUSH
14402: CALL_OW 115
14406: GO 14328
14408: POP
14409: POP
// until not tmp ;
14410: LD_VAR 0 4
14414: NOT
14415: IFFALSE 14311
// if firstAttack then
14417: LD_EXP 28
14421: IFFALSE 14431
// firstAttack := false ;
14423: LD_ADDR_EXP 28
14427: PUSH
14428: LD_INT 0
14430: ST_TO_ADDR
// end ;
14431: PPOPN 4
14433: END
// every 8 8$00 trigger not omarAttack and bergkampfArrived and not rolfHasVehicles do var i , un , veh , tmp ;
14434: LD_EXP 23
14438: NOT
14439: PUSH
14440: LD_EXP 3
14444: AND
14445: PUSH
14446: LD_EXP 16
14450: NOT
14451: AND
14452: IFFALSE 15292
14454: GO 14456
14456: DISABLE
14457: LD_INT 0
14459: PPUSH
14460: PPUSH
14461: PPUSH
14462: PPUSH
// begin enable ;
14463: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
14464: LD_ADDR_VAR 0 1
14468: PUSH
14469: DOUBLE
14470: LD_INT 1
14472: DEC
14473: ST_TO_ADDR
14474: LD_INT 1
14476: PUSH
14477: LD_INT 2
14479: PUSH
14480: LD_INT 2
14482: PUSH
14483: LD_INT 3
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: PUSH
14492: LD_OWVAR 67
14496: ARRAY
14497: PUSH
14498: FOR_TO
14499: IFFALSE 14800
// begin InitHc ;
14501: CALL_OW 19
// InitVc ;
14505: CALL_OW 20
// uc_side := 3 ;
14509: LD_ADDR_OWVAR 20
14513: PUSH
14514: LD_INT 3
14516: ST_TO_ADDR
// uc_nation := 3 ;
14517: LD_ADDR_OWVAR 21
14521: PUSH
14522: LD_INT 3
14524: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14525: LD_INT 22
14527: PUSH
14528: LD_INT 23
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: PUSH
14535: LD_INT 1
14537: PPUSH
14538: LD_INT 2
14540: PPUSH
14541: CALL_OW 12
14545: ARRAY
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: LD_INT 1
14552: PPUSH
14553: LD_INT 44
14555: PUSH
14556: LD_INT 43
14558: PUSH
14559: LD_INT 42
14561: PUSH
14562: LD_INT 44
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 1
14573: PPUSH
14574: LD_INT 4
14576: PPUSH
14577: CALL_OW 12
14581: ARRAY
14582: PPUSH
14583: LD_INT 99
14585: PPUSH
14586: CALL 30138 0 5
// veh := CreateVehicle ;
14590: LD_ADDR_VAR 0 3
14594: PUSH
14595: CALL_OW 45
14599: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
14600: LD_VAR 0 3
14604: PPUSH
14605: LD_INT 5
14607: PPUSH
14608: LD_INT 3
14610: PPUSH
14611: LD_INT 2
14613: PPUSH
14614: LD_INT 0
14616: PPUSH
14617: CALL 64143 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14621: LD_ADDR_EXP 57
14625: PUSH
14626: LD_EXP 57
14630: PPUSH
14631: LD_EXP 57
14635: PUSH
14636: LD_INT 1
14638: PLUS
14639: PPUSH
14640: LD_VAR 0 3
14644: PPUSH
14645: CALL_OW 1
14649: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
14650: LD_INT 0
14652: PPUSH
14653: LD_INT 3
14655: PPUSH
14656: LD_OWVAR 67
14660: PPUSH
14661: CALL_OW 380
// un := CreateHuman ;
14665: LD_ADDR_VAR 0 2
14669: PUSH
14670: CALL_OW 44
14674: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14675: LD_VAR 0 2
14679: PPUSH
14680: LD_VAR 0 3
14684: PPUSH
14685: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14689: LD_ADDR_EXP 57
14693: PUSH
14694: LD_EXP 57
14698: PPUSH
14699: LD_EXP 57
14703: PUSH
14704: LD_INT 1
14706: PLUS
14707: PPUSH
14708: LD_VAR 0 2
14712: PPUSH
14713: CALL_OW 1
14717: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
14718: LD_VAR 0 2
14722: PPUSH
14723: LD_INT 23
14725: PPUSH
14726: LD_INT 7
14728: PPUSH
14729: CALL_OW 111
// wait ( 0 0$2 ) ;
14733: LD_INT 70
14735: PPUSH
14736: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14740: LD_ADDR_VAR 0 4
14744: PUSH
14745: LD_VAR 0 4
14749: PPUSH
14750: LD_VAR 0 4
14754: PUSH
14755: LD_INT 1
14757: PLUS
14758: PPUSH
14759: LD_VAR 0 3
14763: PPUSH
14764: CALL_OW 1
14768: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14769: LD_ADDR_VAR 0 4
14773: PUSH
14774: LD_VAR 0 4
14778: PPUSH
14779: LD_VAR 0 4
14783: PUSH
14784: LD_INT 1
14786: PLUS
14787: PPUSH
14788: LD_VAR 0 2
14792: PPUSH
14793: CALL_OW 1
14797: ST_TO_ADDR
// end ;
14798: GO 14498
14800: POP
14801: POP
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + waveStrength do
14802: LD_ADDR_VAR 0 1
14806: PUSH
14807: DOUBLE
14808: LD_INT 1
14810: DEC
14811: ST_TO_ADDR
14812: LD_INT 3
14814: PUSH
14815: LD_INT 4
14817: PUSH
14818: LD_INT 4
14820: PUSH
14821: LD_INT 5
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: PUSH
14830: LD_OWVAR 67
14834: ARRAY
14835: PUSH
14836: LD_EXP 58
14840: PLUS
14841: PUSH
14842: FOR_TO
14843: IFFALSE 15152
// begin InitHc ;
14845: CALL_OW 19
// InitVc ;
14849: CALL_OW 20
// uc_side := 3 ;
14853: LD_ADDR_OWVAR 20
14857: PUSH
14858: LD_INT 3
14860: ST_TO_ADDR
// uc_nation := 3 ;
14861: LD_ADDR_OWVAR 21
14865: PUSH
14866: LD_INT 3
14868: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
14869: LD_INT 22
14871: PUSH
14872: LD_INT 23
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 1
14881: PPUSH
14882: LD_INT 2
14884: PPUSH
14885: CALL_OW 12
14889: ARRAY
14890: PPUSH
14891: LD_INT 1
14893: PPUSH
14894: LD_INT 1
14896: PPUSH
14897: LD_INT 44
14899: PUSH
14900: LD_INT 45
14902: PUSH
14903: LD_INT 43
14905: PUSH
14906: LD_INT 42
14908: PUSH
14909: LD_INT 44
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 1
14921: PPUSH
14922: LD_INT 5
14924: PPUSH
14925: CALL_OW 12
14929: ARRAY
14930: PPUSH
14931: LD_INT 99
14933: PPUSH
14934: CALL 30138 0 5
// veh := CreateVehicle ;
14938: LD_ADDR_VAR 0 3
14942: PUSH
14943: CALL_OW 45
14947: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
14948: LD_VAR 0 3
14952: PPUSH
14953: LD_INT 127
14955: PPUSH
14956: LD_INT 243
14958: PPUSH
14959: LD_INT 0
14961: PPUSH
14962: LD_INT 0
14964: PPUSH
14965: CALL 64143 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14969: LD_ADDR_EXP 57
14973: PUSH
14974: LD_EXP 57
14978: PPUSH
14979: LD_EXP 57
14983: PUSH
14984: LD_INT 1
14986: PLUS
14987: PPUSH
14988: LD_VAR 0 3
14992: PPUSH
14993: CALL_OW 1
14997: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14998: LD_INT 0
15000: PPUSH
15001: LD_INT 3
15003: PPUSH
15004: LD_OWVAR 67
15008: PUSH
15009: LD_INT 2
15011: PLUS
15012: PPUSH
15013: CALL_OW 380
// un := CreateHuman ;
15017: LD_ADDR_VAR 0 2
15021: PUSH
15022: CALL_OW 44
15026: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15027: LD_VAR 0 2
15031: PPUSH
15032: LD_VAR 0 3
15036: PPUSH
15037: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15041: LD_ADDR_EXP 57
15045: PUSH
15046: LD_EXP 57
15050: PPUSH
15051: LD_EXP 57
15055: PUSH
15056: LD_INT 1
15058: PLUS
15059: PPUSH
15060: LD_VAR 0 2
15064: PPUSH
15065: CALL_OW 1
15069: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
15070: LD_VAR 0 2
15074: PPUSH
15075: LD_INT 130
15077: PPUSH
15078: LD_INT 233
15080: PPUSH
15081: CALL_OW 111
// wait ( 0 0$2 ) ;
15085: LD_INT 70
15087: PPUSH
15088: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15092: LD_ADDR_VAR 0 4
15096: PUSH
15097: LD_VAR 0 4
15101: PPUSH
15102: LD_VAR 0 4
15106: PUSH
15107: LD_INT 1
15109: PLUS
15110: PPUSH
15111: LD_VAR 0 3
15115: PPUSH
15116: CALL_OW 1
15120: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15121: LD_ADDR_VAR 0 4
15125: PUSH
15126: LD_VAR 0 4
15130: PPUSH
15131: LD_VAR 0 4
15135: PUSH
15136: LD_INT 1
15138: PLUS
15139: PPUSH
15140: LD_VAR 0 2
15144: PPUSH
15145: CALL_OW 1
15149: ST_TO_ADDR
// end ;
15150: GO 14842
15152: POP
15153: POP
// for i in tmp do
15154: LD_ADDR_VAR 0 1
15158: PUSH
15159: LD_VAR 0 4
15163: PUSH
15164: FOR_IN
15165: IFFALSE 15184
// ComAgressiveMove ( i , 76 , 49 ) ;
15167: LD_VAR 0 1
15171: PPUSH
15172: LD_INT 76
15174: PPUSH
15175: LD_INT 49
15177: PPUSH
15178: CALL_OW 114
15182: GO 15164
15184: POP
15185: POP
// repeat wait ( 0 0$1 ) ;
15186: LD_INT 35
15188: PPUSH
15189: CALL_OW 67
// for i in tmp do
15193: LD_ADDR_VAR 0 1
15197: PUSH
15198: LD_VAR 0 4
15202: PUSH
15203: FOR_IN
15204: IFFALSE 15283
// if IsDead ( i ) then
15206: LD_VAR 0 1
15210: PPUSH
15211: CALL_OW 301
15215: IFFALSE 15235
// tmp := tmp diff i else
15217: LD_ADDR_VAR 0 4
15221: PUSH
15222: LD_VAR 0 4
15226: PUSH
15227: LD_VAR 0 1
15231: DIFF
15232: ST_TO_ADDR
15233: GO 15281
// if not HasTask ( i ) then
15235: LD_VAR 0 1
15239: PPUSH
15240: CALL_OW 314
15244: NOT
15245: IFFALSE 15281
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15247: LD_VAR 0 1
15251: PPUSH
15252: LD_INT 81
15254: PUSH
15255: LD_INT 3
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PPUSH
15262: CALL_OW 69
15266: PPUSH
15267: LD_VAR 0 1
15271: PPUSH
15272: CALL_OW 74
15276: PPUSH
15277: CALL_OW 115
15281: GO 15203
15283: POP
15284: POP
// until not tmp ;
15285: LD_VAR 0 4
15289: NOT
15290: IFFALSE 15186
// end ;
15292: PPOPN 4
15294: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
15295: LD_EXP 6
15299: IFFALSE 15770
15301: GO 15303
15303: DISABLE
15304: LD_INT 0
15306: PPUSH
15307: PPUSH
15308: PPUSH
15309: PPUSH
// begin wait ( 3 3$00 ) ;
15310: LD_INT 6300
15312: PPUSH
15313: CALL_OW 67
// for i := 1 to 3 do
15317: LD_ADDR_VAR 0 1
15321: PUSH
15322: DOUBLE
15323: LD_INT 1
15325: DEC
15326: ST_TO_ADDR
15327: LD_INT 3
15329: PUSH
15330: FOR_TO
15331: IFFALSE 15630
// begin InitHc ;
15333: CALL_OW 19
// InitVc ;
15337: CALL_OW 20
// uc_side := 3 ;
15341: LD_ADDR_OWVAR 20
15345: PUSH
15346: LD_INT 3
15348: ST_TO_ADDR
// uc_nation := 3 ;
15349: LD_ADDR_OWVAR 21
15353: PUSH
15354: LD_INT 3
15356: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
15357: LD_INT 22
15359: PUSH
15360: LD_INT 23
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 1
15369: PPUSH
15370: LD_INT 2
15372: PPUSH
15373: CALL_OW 12
15377: ARRAY
15378: PPUSH
15379: LD_INT 1
15381: PPUSH
15382: LD_INT 1
15384: PPUSH
15385: LD_INT 44
15387: PUSH
15388: LD_INT 43
15390: PUSH
15391: LD_INT 42
15393: PUSH
15394: LD_INT 44
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: PUSH
15403: LD_INT 1
15405: PPUSH
15406: LD_INT 4
15408: PPUSH
15409: CALL_OW 12
15413: ARRAY
15414: PPUSH
15415: LD_INT 99
15417: PPUSH
15418: CALL 30138 0 5
// veh := CreateVehicle ;
15422: LD_ADDR_VAR 0 3
15426: PUSH
15427: CALL_OW 45
15431: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
15432: LD_VAR 0 3
15436: PPUSH
15437: LD_INT 293
15439: PPUSH
15440: LD_INT 246
15442: PPUSH
15443: LD_INT 5
15445: PPUSH
15446: LD_INT 0
15448: PPUSH
15449: CALL 64143 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
15453: LD_ADDR_EXP 57
15457: PUSH
15458: LD_EXP 57
15462: PPUSH
15463: LD_EXP 57
15467: PUSH
15468: LD_INT 1
15470: PLUS
15471: PPUSH
15472: LD_VAR 0 3
15476: PPUSH
15477: CALL_OW 1
15481: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
15482: LD_INT 0
15484: PPUSH
15485: LD_INT 3
15487: PPUSH
15488: LD_INT 3
15490: PPUSH
15491: CALL_OW 380
// un := CreateHuman ;
15495: LD_ADDR_VAR 0 2
15499: PUSH
15500: CALL_OW 44
15504: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15505: LD_VAR 0 2
15509: PPUSH
15510: LD_VAR 0 3
15514: PPUSH
15515: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15519: LD_ADDR_EXP 57
15523: PUSH
15524: LD_EXP 57
15528: PPUSH
15529: LD_EXP 57
15533: PUSH
15534: LD_INT 1
15536: PLUS
15537: PPUSH
15538: LD_VAR 0 2
15542: PPUSH
15543: CALL_OW 1
15547: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
15548: LD_VAR 0 2
15552: PPUSH
15553: LD_INT 273
15555: PPUSH
15556: LD_INT 227
15558: PPUSH
15559: CALL_OW 111
// wait ( 0 0$2 ) ;
15563: LD_INT 70
15565: PPUSH
15566: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15570: LD_ADDR_VAR 0 4
15574: PUSH
15575: LD_VAR 0 4
15579: PPUSH
15580: LD_VAR 0 4
15584: PUSH
15585: LD_INT 1
15587: PLUS
15588: PPUSH
15589: LD_VAR 0 3
15593: PPUSH
15594: CALL_OW 1
15598: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15599: LD_ADDR_VAR 0 4
15603: PUSH
15604: LD_VAR 0 4
15608: PPUSH
15609: LD_VAR 0 4
15613: PUSH
15614: LD_INT 1
15616: PLUS
15617: PPUSH
15618: LD_VAR 0 2
15622: PPUSH
15623: CALL_OW 1
15627: ST_TO_ADDR
// end ;
15628: GO 15330
15630: POP
15631: POP
// for i in tmp do
15632: LD_ADDR_VAR 0 1
15636: PUSH
15637: LD_VAR 0 4
15641: PUSH
15642: FOR_IN
15643: IFFALSE 15662
// ComAgressiveMove ( i , 330 , 231 ) ;
15645: LD_VAR 0 1
15649: PPUSH
15650: LD_INT 330
15652: PPUSH
15653: LD_INT 231
15655: PPUSH
15656: CALL_OW 114
15660: GO 15642
15662: POP
15663: POP
// repeat wait ( 0 0$1 ) ;
15664: LD_INT 35
15666: PPUSH
15667: CALL_OW 67
// for i in tmp do
15671: LD_ADDR_VAR 0 1
15675: PUSH
15676: LD_VAR 0 4
15680: PUSH
15681: FOR_IN
15682: IFFALSE 15761
// if IsDead ( i ) then
15684: LD_VAR 0 1
15688: PPUSH
15689: CALL_OW 301
15693: IFFALSE 15713
// tmp := tmp diff i else
15695: LD_ADDR_VAR 0 4
15699: PUSH
15700: LD_VAR 0 4
15704: PUSH
15705: LD_VAR 0 1
15709: DIFF
15710: ST_TO_ADDR
15711: GO 15759
// if not HasTask ( i ) then
15713: LD_VAR 0 1
15717: PPUSH
15718: CALL_OW 314
15722: NOT
15723: IFFALSE 15759
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15725: LD_VAR 0 1
15729: PPUSH
15730: LD_INT 81
15732: PUSH
15733: LD_INT 3
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PPUSH
15740: CALL_OW 69
15744: PPUSH
15745: LD_VAR 0 1
15749: PPUSH
15750: CALL_OW 74
15754: PPUSH
15755: CALL_OW 115
15759: GO 15681
15761: POP
15762: POP
// until not tmp ;
15763: LD_VAR 0 4
15767: NOT
15768: IFFALSE 15664
// end ;
15770: PPOPN 4
15772: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
15773: LD_INT 3
15775: PUSH
15776: LD_INT 22
15778: PUSH
15779: LD_INT 2
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 32
15792: PUSH
15793: LD_INT 1
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PPUSH
15804: CALL_OW 69
15808: IFFALSE 15892
15810: GO 15812
15812: DISABLE
15813: LD_INT 0
15815: PPUSH
// begin enable ;
15816: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
15817: LD_ADDR_VAR 0 1
15821: PUSH
15822: LD_INT 3
15824: PUSH
15825: LD_INT 22
15827: PUSH
15828: LD_INT 2
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: PUSH
15839: LD_INT 32
15841: PUSH
15842: LD_INT 1
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PPUSH
15853: CALL_OW 69
15857: PUSH
15858: FOR_IN
15859: IFFALSE 15890
// if GetFuel ( i ) < 3 then
15861: LD_VAR 0 1
15865: PPUSH
15866: CALL_OW 261
15870: PUSH
15871: LD_INT 3
15873: LESS
15874: IFFALSE 15888
// SetFuel ( i , 3 ) ;
15876: LD_VAR 0 1
15880: PPUSH
15881: LD_INT 3
15883: PPUSH
15884: CALL_OW 240
15888: GO 15858
15890: POP
15891: POP
// end ; end_of_file
15892: PPOPN 1
15894: END
// export function Action ; begin
15895: LD_INT 0
15897: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
15898: LD_INT 2
15900: PPUSH
15901: LD_INT 4
15903: PPUSH
15904: CALL_OW 332
// Video ( true ) ;
15908: LD_INT 1
15910: PPUSH
15911: CALL 61983 0 1
// music_nat := 3 ;
15915: LD_ADDR_OWVAR 71
15919: PUSH
15920: LD_INT 3
15922: ST_TO_ADDR
// music_class := music_recon ;
15923: LD_ADDR_OWVAR 72
15927: PUSH
15928: LD_INT 3
15930: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
15931: LD_INT 213
15933: PPUSH
15934: LD_INT 89
15936: PPUSH
15937: CALL_OW 86
// if not debug then
15941: LD_EXP 1
15945: NOT
15946: IFFALSE 15980
// begin if Kaia and Olaf then
15948: LD_EXP 35
15952: PUSH
15953: LD_EXP 39
15957: AND
15958: IFFALSE 15964
// SceneKaiaWithOlaf ;
15960: CALL 16019 0 0
// if Givi and Kamil then
15964: LD_EXP 31
15968: PUSH
15969: LD_EXP 34
15973: AND
15974: IFFALSE 15980
// SceneWithGiviAndKamil ;
15976: CALL 16590 0 0
// end ; Video ( false ) ;
15980: LD_INT 0
15982: PPUSH
15983: CALL 61983 0 1
// ChangeMissionObjectives ( M1 ) ;
15987: LD_STRING M1
15989: PPUSH
15990: CALL_OW 337
// music_nat := music_auto ;
15994: LD_ADDR_OWVAR 71
15998: PUSH
15999: LD_INT 0
16001: ST_TO_ADDR
// music_class := music_auto ;
16002: LD_ADDR_OWVAR 72
16006: PUSH
16007: LD_INT 0
16009: ST_TO_ADDR
// SaveForQuickRestart ;
16010: CALL_OW 22
// end ;
16014: LD_VAR 0 1
16018: RET
// export function SceneKaiaWithOlaf ; begin
16019: LD_INT 0
16021: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
16022: LD_INT 22
16024: PUSH
16025: LD_INT 2
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 30
16034: PUSH
16035: LD_INT 3
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PPUSH
16046: CALL_OW 69
16050: PPUSH
16051: LD_INT 14
16053: PPUSH
16054: LD_INT 1
16056: PPUSH
16057: LD_INT 1
16059: PPUSH
16060: LD_INT 26
16062: PPUSH
16063: CALL_OW 125
// wait ( 0 0$1 ) ;
16067: LD_INT 35
16069: PPUSH
16070: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
16074: LD_EXP 35
16078: PPUSH
16079: LD_STRING DK-Mem-1
16081: PPUSH
16082: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
16086: LD_EXP 35
16090: PPUSH
16091: LD_STRING DK-Mem-2
16093: PPUSH
16094: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
16098: LD_EXP 39
16102: PPUSH
16103: LD_STRING DO-Mem-3
16105: PPUSH
16106: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
16110: LD_EXP 35
16114: PPUSH
16115: LD_STRING DK-Mem-4
16117: PPUSH
16118: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
16122: LD_EXP 39
16126: PPUSH
16127: LD_STRING DO-Mem-5
16129: PPUSH
16130: CALL_OW 88
// wait ( 0 0$2 ) ;
16134: LD_INT 70
16136: PPUSH
16137: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
16141: LD_INT 22
16143: PUSH
16144: LD_INT 2
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: LD_INT 30
16153: PUSH
16154: LD_INT 3
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PPUSH
16165: CALL_OW 69
16169: PPUSH
16170: LD_INT 90
16172: PPUSH
16173: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
16177: LD_EXP 39
16181: PPUSH
16182: LD_STRING DO-Mem-6
16184: PPUSH
16185: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
16189: LD_EXP 35
16193: PPUSH
16194: LD_STRING DK-Mem-7
16196: PPUSH
16197: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
16201: LD_EXP 30
16205: PPUSH
16206: LD_EXP 35
16210: PPUSH
16211: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
16215: LD_EXP 30
16219: PPUSH
16220: LD_STRING DH-Mem-8
16222: PPUSH
16223: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
16227: LD_EXP 35
16231: PUSH
16232: LD_EXP 39
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PPUSH
16241: LD_EXP 30
16245: PPUSH
16246: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
16250: LD_EXP 39
16254: PPUSH
16255: LD_STRING DO-Mem-9
16257: PPUSH
16258: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
16262: LD_EXP 39
16266: PPUSH
16267: LD_STRING DO-Mem-10
16269: PPUSH
16270: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
16274: LD_EXP 39
16278: PPUSH
16279: LD_STRING DO-Mem-11
16281: PPUSH
16282: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
16286: LD_EXP 39
16290: PPUSH
16291: LD_STRING DO-Mem-12
16293: PPUSH
16294: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
16298: LD_EXP 35
16302: PPUSH
16303: LD_STRING DK-Mem-13
16305: PPUSH
16306: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
16310: LD_EXP 35
16314: PPUSH
16315: LD_STRING DK-Mem-14
16317: PPUSH
16318: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
16322: LD_EXP 35
16326: PPUSH
16327: LD_STRING DK-Mem-15
16329: PPUSH
16330: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
16334: LD_EXP 35
16338: PPUSH
16339: LD_STRING DK-Mem-16
16341: PPUSH
16342: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
16346: LD_EXP 35
16350: PPUSH
16351: LD_STRING DK-Mem-17
16353: PPUSH
16354: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
16358: LD_EXP 39
16362: PPUSH
16363: LD_EXP 35
16367: PPUSH
16368: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
16372: LD_EXP 39
16376: PPUSH
16377: LD_STRING DO-Mem-18
16379: PPUSH
16380: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
16384: LD_EXP 35
16388: PPUSH
16389: LD_EXP 39
16393: PPUSH
16394: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
16398: LD_EXP 35
16402: PPUSH
16403: LD_STRING DK-Mem-19
16405: PPUSH
16406: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
16410: LD_EXP 39
16414: PPUSH
16415: LD_INT 214
16417: PPUSH
16418: LD_INT 86
16420: PPUSH
16421: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16425: LD_EXP 39
16429: PPUSH
16430: LD_EXP 35
16434: PPUSH
16435: CALL_OW 179
// if Givi then
16439: LD_EXP 31
16443: IFFALSE 16474
// begin ComMoveXY ( Givi , 217 , 86 ) ;
16445: LD_EXP 31
16449: PPUSH
16450: LD_INT 217
16452: PPUSH
16453: LD_INT 86
16455: PPUSH
16456: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
16460: LD_EXP 31
16464: PPUSH
16465: LD_EXP 30
16469: PPUSH
16470: CALL_OW 179
// end ; if Kamil then
16474: LD_EXP 34
16478: IFFALSE 16518
// begin ComExit ( Kamil ) ;
16480: LD_EXP 34
16484: PPUSH
16485: CALL 62399 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
16489: LD_EXP 34
16493: PPUSH
16494: LD_INT 212
16496: PPUSH
16497: LD_INT 86
16499: PPUSH
16500: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
16504: LD_EXP 34
16508: PPUSH
16509: LD_EXP 30
16513: PPUSH
16514: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
16518: LD_INT 70
16520: PPUSH
16521: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
16525: LD_EXP 30
16529: PPUSH
16530: LD_STRING DH-Mem-20
16532: PPUSH
16533: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
16537: LD_EXP 39
16541: PPUSH
16542: LD_INT 215
16544: PPUSH
16545: LD_INT 87
16547: PPUSH
16548: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16552: LD_EXP 39
16556: PPUSH
16557: LD_EXP 35
16561: PPUSH
16562: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
16566: LD_EXP 35
16570: PPUSH
16571: LD_STRING DK-Mem-21
16573: PPUSH
16574: CALL_OW 88
// wait ( 0 0$2 ) ;
16578: LD_INT 70
16580: PPUSH
16581: CALL_OW 67
// end ;
16585: LD_VAR 0 1
16589: RET
// export function SceneWithGiviAndKamil ; begin
16590: LD_INT 0
16592: PPUSH
// if Markov then
16593: LD_EXP 37
16597: IFFALSE 16648
// begin if IsInUnit ( Markov ) then
16599: LD_EXP 37
16603: PPUSH
16604: CALL_OW 310
16608: IFFALSE 16619
// ComExit ( Markov ) ;
16610: LD_EXP 37
16614: PPUSH
16615: CALL 62399 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
16619: LD_EXP 37
16623: PPUSH
16624: LD_INT 212
16626: PPUSH
16627: LD_INT 88
16629: PPUSH
16630: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
16634: LD_EXP 37
16638: PPUSH
16639: LD_EXP 30
16643: PPUSH
16644: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
16648: LD_EXP 31
16652: PPUSH
16653: LD_STRING DG-Obj-1
16655: PPUSH
16656: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
16660: LD_EXP 34
16664: PPUSH
16665: LD_STRING DKam-Obj-2
16667: PPUSH
16668: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
16672: LD_EXP 30
16676: PPUSH
16677: LD_EXP 34
16681: PPUSH
16682: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
16686: LD_EXP 34
16690: PPUSH
16691: LD_STRING DKam-Obj-3
16693: PPUSH
16694: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
16698: LD_EXP 37
16702: PPUSH
16703: LD_STRING DMar-Obj-4
16705: PPUSH
16706: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
16710: LD_EXP 34
16714: PPUSH
16715: LD_STRING DKam-Obj-6
16717: PPUSH
16718: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
16722: LD_EXP 34
16726: PPUSH
16727: LD_STRING DKam-Obj-7
16729: PPUSH
16730: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
16734: LD_EXP 34
16738: PPUSH
16739: LD_STRING DKam-Obj-8
16741: PPUSH
16742: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
16746: LD_EXP 30
16750: PPUSH
16751: LD_STRING DH-Obj-9
16753: PPUSH
16754: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
16758: LD_EXP 34
16762: PPUSH
16763: LD_STRING DKam-Obj-10
16765: PPUSH
16766: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
16770: LD_EXP 34
16774: PPUSH
16775: LD_STRING DKam-Obj-11
16777: PPUSH
16778: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
16782: LD_EXP 37
16786: PPUSH
16787: LD_STRING DMar-Obj-12
16789: PPUSH
16790: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
16794: LD_EXP 37
16798: PPUSH
16799: LD_STRING DMar-Obj-13
16801: PPUSH
16802: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
16806: LD_EXP 37
16810: PPUSH
16811: LD_STRING DMar-Obj-14
16813: PPUSH
16814: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
16818: LD_EXP 39
16822: PPUSH
16823: LD_STRING DO-Obj-15
16825: PPUSH
16826: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
16830: LD_EXP 39
16834: PPUSH
16835: LD_STRING DO-Obj-16
16837: PPUSH
16838: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
16842: LD_EXP 30
16846: PPUSH
16847: LD_STRING DH-Obj-17
16849: PPUSH
16850: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
16854: LD_EXP 39
16858: PPUSH
16859: LD_STRING DO-Obj-18
16861: PPUSH
16862: CALL_OW 88
// end ;
16866: LD_VAR 0 1
16870: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
16871: LD_INT 34
16873: PUSH
16874: LD_EXP 64
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PPUSH
16883: CALL_OW 69
16887: IFFALSE 17084
16889: GO 16891
16891: DISABLE
16892: LD_INT 0
16894: PPUSH
// begin wait ( 0 0$2 ) ;
16895: LD_INT 70
16897: PPUSH
16898: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
16902: LD_INT 34
16904: PUSH
16905: LD_EXP 64
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PPUSH
16914: CALL_OW 69
16918: PPUSH
16919: CALL_OW 87
// DialogueOn ;
16923: CALL_OW 6
// if Markov then
16927: LD_EXP 37
16931: IFFALSE 16959
// begin Say ( Markov , DMar-Grn-1 ) ;
16933: LD_EXP 37
16937: PPUSH
16938: LD_STRING DMar-Grn-1
16940: PPUSH
16941: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
16945: LD_EXP 30
16949: PPUSH
16950: LD_STRING DH-Grn-2
16952: PPUSH
16953: CALL_OW 88
// end else
16957: GO 17058
// if heikeSecondSquad then
16959: LD_EXP 45
16963: IFFALSE 17058
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16965: LD_ADDR_VAR 0 1
16969: PUSH
16970: LD_EXP 45
16974: PUSH
16975: LD_INT 1
16977: PPUSH
16978: LD_EXP 45
16982: PPUSH
16983: CALL_OW 12
16987: ARRAY
16988: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16989: LD_VAR 0 1
16993: PPUSH
16994: CALL_OW 258
16998: PUSH
16999: LD_INT 1
17001: DOUBLE
17002: EQUAL
17003: IFTRUE 17007
17005: GO 17022
17007: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
17008: LD_VAR 0 1
17012: PPUSH
17013: LD_STRING DArm-Grn-1
17015: PPUSH
17016: CALL_OW 88
17020: GO 17046
17022: LD_INT 2
17024: DOUBLE
17025: EQUAL
17026: IFTRUE 17030
17028: GO 17045
17030: POP
// Say ( random , DArf-Grn-1 ) ; end ;
17031: LD_VAR 0 1
17035: PPUSH
17036: LD_STRING DArf-Grn-1
17038: PPUSH
17039: CALL_OW 88
17043: GO 17046
17045: POP
// Say ( Heike , DH-Grn-2 ) ;
17046: LD_EXP 30
17050: PPUSH
17051: LD_STRING DH-Grn-2
17053: PPUSH
17054: CALL_OW 88
// end ; DialogueOff ;
17058: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
17062: LD_STRING MortarConstructed
17064: PPUSH
17065: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
17069: LD_STRING SelfPropelledMortar
17071: PPUSH
17072: CALL_OW 339
// mortarConstructed := true ;
17076: LD_ADDR_EXP 15
17080: PUSH
17081: LD_INT 1
17083: ST_TO_ADDR
// end ;
17084: PPOPN 1
17086: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
17087: LD_INT 2
17089: PPUSH
17090: LD_INT 8
17092: PPUSH
17093: CALL_OW 294
17097: IFFALSE 17240
17099: GO 17101
17101: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
17102: LD_INT 200
17104: PPUSH
17105: LD_INT 162
17107: PPUSH
17108: LD_INT 2
17110: PPUSH
17111: LD_INT 6
17113: NEG
17114: PPUSH
17115: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
17119: LD_INT 200
17121: PPUSH
17122: LD_INT 162
17124: PPUSH
17125: LD_INT 2
17127: PPUSH
17128: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
17132: LD_INT 200
17134: PPUSH
17135: LD_INT 162
17137: PPUSH
17138: CALL_OW 84
// if not IsOk ( Kurt ) then
17142: LD_EXP 41
17146: PPUSH
17147: CALL_OW 302
17151: NOT
17152: IFFALSE 17156
// exit ;
17154: GO 17240
// Say ( Kurt , DKs-Otpst-2-1 ) ;
17156: LD_EXP 41
17160: PPUSH
17161: LD_STRING DKs-Otpst-2-1
17163: PPUSH
17164: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
17168: LD_EXP 35
17172: PPUSH
17173: LD_STRING DK-Otpst-2-2
17175: PPUSH
17176: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
17180: LD_EXP 41
17184: PPUSH
17185: LD_STRING DKs-Otpst-2-3
17187: PPUSH
17188: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
17192: LD_EXP 41
17196: PPUSH
17197: LD_STRING DKs-Otpst-2-4
17199: PPUSH
17200: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
17204: LD_EXP 41
17208: PPUSH
17209: LD_STRING DKs-Otpst-2-5
17211: PPUSH
17212: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
17216: LD_EXP 34
17220: PPUSH
17221: LD_STRING DKam-Otpst-2-6
17223: PPUSH
17224: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
17228: LD_EXP 41
17232: PPUSH
17233: LD_STRING DKs-Otpst-2-7
17235: PPUSH
17236: CALL_OW 88
// end ;
17240: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
17241: LD_INT 8
17243: PPUSH
17244: LD_INT 22
17246: PUSH
17247: LD_INT 3
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: PUSH
17254: LD_INT 21
17256: PUSH
17257: LD_INT 3
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PPUSH
17268: CALL_OW 70
17272: NOT
17273: PUSH
17274: LD_EXP 3
17278: NOT
17279: AND
17280: IFFALSE 17530
17282: GO 17284
17284: DISABLE
17285: LD_INT 0
17287: PPUSH
// begin outpostDestroyed := true ;
17288: LD_ADDR_EXP 4
17292: PUSH
17293: LD_INT 1
17295: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
17296: LD_INT 22
17298: PUSH
17299: LD_INT 2
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: LD_INT 34
17308: PUSH
17309: LD_EXP 64
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 92
17320: PUSH
17321: LD_INT 195
17323: PUSH
17324: LD_INT 164
17326: PUSH
17327: LD_INT 12
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: PPUSH
17341: CALL_OW 69
17345: NOT
17346: IFFALSE 17350
// exit ;
17348: GO 17530
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
17350: LD_EXP 31
17354: PPUSH
17355: CALL_OW 302
17359: NOT
17360: PUSH
17361: LD_EXP 35
17365: PPUSH
17366: CALL_OW 302
17370: NOT
17371: OR
17372: IFFALSE 17376
// exit ;
17374: GO 17530
// Say ( Givi , DG-Otpst-1-1 ) ;
17376: LD_EXP 31
17380: PPUSH
17381: LD_STRING DG-Otpst-1-1
17383: PPUSH
17384: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
17388: LD_EXP 35
17392: PPUSH
17393: LD_STRING DK-Otpst-1-2
17395: PPUSH
17396: CALL_OW 88
// if IsOk ( Markov ) then
17400: LD_EXP 37
17404: PPUSH
17405: CALL_OW 302
17409: IFFALSE 17437
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
17411: LD_EXP 37
17415: PPUSH
17416: LD_STRING DMar-Otpst-1-3
17418: PPUSH
17419: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
17423: LD_EXP 37
17427: PPUSH
17428: LD_STRING DMar-Otpst-1-4
17430: PPUSH
17431: CALL_OW 88
// end else
17435: GO 17518
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
17437: LD_ADDR_VAR 0 1
17441: PUSH
17442: LD_EXP 45
17446: PUSH
17447: LD_INT 1
17449: PPUSH
17450: LD_EXP 45
17454: PPUSH
17455: CALL_OW 12
17459: ARRAY
17460: ST_TO_ADDR
// case GetSex ( random ) of 1 :
17461: LD_VAR 0 1
17465: PPUSH
17466: CALL_OW 258
17470: PUSH
17471: LD_INT 1
17473: DOUBLE
17474: EQUAL
17475: IFTRUE 17479
17477: GO 17494
17479: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
17480: LD_VAR 0 1
17484: PPUSH
17485: LD_STRING DArm-Otpst-1-a-3
17487: PPUSH
17488: CALL_OW 88
17492: GO 17518
17494: LD_INT 2
17496: DOUBLE
17497: EQUAL
17498: IFTRUE 17502
17500: GO 17517
17502: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
17503: LD_VAR 0 1
17507: PPUSH
17508: LD_STRING DArf-Otpst-1-a-3
17510: PPUSH
17511: CALL_OW 88
17515: GO 17518
17517: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
17518: LD_EXP 31
17522: PPUSH
17523: LD_STRING DG-Otpst-1-5
17525: PPUSH
17526: CALL_OW 88
// end ;
17530: PPOPN 1
17532: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
17533: LD_EXP 35
17537: PPUSH
17538: CALL_OW 256
17542: PUSH
17543: LD_INT 10
17545: LESS
17546: IFFALSE 17660
17548: GO 17550
17550: DISABLE
// begin DialogueOn ;
17551: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17555: LD_EXP 35
17559: PPUSH
17560: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
17564: LD_EXP 35
17568: PPUSH
17569: LD_STRING DK-Dead-1
17571: PPUSH
17572: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
17576: LD_EXP 30
17580: PPUSH
17581: LD_STRING DH-Dead-2
17583: PPUSH
17584: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
17588: LD_EXP 35
17592: PPUSH
17593: LD_STRING DK-Dead-3
17595: PPUSH
17596: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
17600: LD_EXP 30
17604: PPUSH
17605: LD_STRING DH-Dead-4
17607: PPUSH
17608: CALL_OW 88
// if IsOk ( Mike ) then
17612: LD_EXP 32
17616: PPUSH
17617: CALL_OW 302
17621: IFFALSE 17647
// begin Say ( Mike , DM-Dead-5 ) ;
17623: LD_EXP 32
17627: PPUSH
17628: LD_STRING DM-Dead-5
17630: PPUSH
17631: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
17635: LD_EXP 30
17639: PPUSH
17640: LD_STRING DH-Dead-6
17642: PPUSH
17643: CALL_OW 88
// end ; DialogueOff ;
17647: CALL_OW 7
// KillUnit ( Kaia ) ;
17651: LD_EXP 35
17655: PPUSH
17656: CALL_OW 66
// end ;
17660: END
// every 0 0$1 trigger tick >= 10 10$20 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
17661: LD_OWVAR 1
17665: PUSH
17666: LD_INT 21700
17668: GREATEREQUAL
17669: PUSH
17670: LD_EXP 5
17674: PUSH
17675: LD_INT 5
17677: GREATER
17678: OR
17679: PUSH
17680: LD_INT 22
17682: PUSH
17683: LD_INT 2
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 92
17692: PUSH
17693: LD_INT 103
17695: PUSH
17696: LD_INT 81
17698: PUSH
17699: LD_INT 20
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PPUSH
17712: CALL_OW 69
17716: OR
17717: IFFALSE 18124
17719: GO 17721
17721: DISABLE
17722: LD_INT 0
17724: PPUSH
17725: PPUSH
17726: PPUSH
// begin PrepareRolfSquad ;
17727: CALL 2376 0 0
// dep := HexInfo ( 86 , 54 ) ;
17731: LD_ADDR_VAR 0 3
17735: PUSH
17736: LD_INT 86
17738: PPUSH
17739: LD_INT 54
17741: PPUSH
17742: CALL_OW 428
17746: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
17747: LD_VAR 0 3
17751: PPUSH
17752: CALL_OW 274
17756: PPUSH
17757: LD_INT 1
17759: PPUSH
17760: LD_INT 300
17762: PPUSH
17763: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
17767: LD_VAR 0 3
17771: PPUSH
17772: CALL_OW 274
17776: PPUSH
17777: LD_INT 2
17779: PPUSH
17780: LD_INT 300
17782: PPUSH
17783: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
17787: LD_EXP 47
17791: PPUSH
17792: LD_INT 79
17794: PPUSH
17795: LD_INT 52
17797: PPUSH
17798: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
17802: LD_INT 35
17804: PPUSH
17805: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
17809: LD_INT 12
17811: PPUSH
17812: LD_INT 22
17814: PUSH
17815: LD_INT 3
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 21
17824: PUSH
17825: LD_INT 1
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PPUSH
17836: CALL_OW 70
17840: NOT
17841: IFFALSE 17802
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
17843: LD_ADDR_VAR 0 2
17847: PUSH
17848: LD_INT 12
17850: PPUSH
17851: LD_INT 21
17853: PUSH
17854: LD_INT 3
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PPUSH
17861: CALL_OW 70
17865: ST_TO_ADDR
// for i in tmp do
17866: LD_ADDR_VAR 0 1
17870: PUSH
17871: LD_VAR 0 2
17875: PUSH
17876: FOR_IN
17877: IFFALSE 17893
// SetSide ( i , 8 ) ;
17879: LD_VAR 0 1
17883: PPUSH
17884: LD_INT 8
17886: PPUSH
17887: CALL_OW 235
17891: GO 17876
17893: POP
17894: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
17895: LD_INT 63
17897: PPUSH
17898: LD_INT 42
17900: PPUSH
17901: CALL_OW 428
17905: PPUSH
17906: LD_INT 320
17908: PPUSH
17909: CALL_OW 234
// wait ( 0 0$10 ) ;
17913: LD_INT 350
17915: PPUSH
17916: CALL_OW 67
// DialogueOn ;
17920: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
17924: LD_INT 8
17926: PPUSH
17927: LD_INT 2
17929: PPUSH
17930: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
17934: LD_INT 86
17936: PPUSH
17937: LD_INT 54
17939: PPUSH
17940: CALL_OW 428
17944: PPUSH
17945: LD_STRING antwerp
17947: PPUSH
17948: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
17952: LD_EXP 43
17956: PPUSH
17957: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
17961: LD_EXP 43
17965: PPUSH
17966: LD_STRING DRf-rast-1
17968: PPUSH
17969: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
17973: LD_EXP 30
17977: PPUSH
17978: LD_STRING DH-rast-2
17980: PPUSH
17981: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
17985: LD_EXP 43
17989: PPUSH
17990: LD_STRING DRf-rast-3
17992: PPUSH
17993: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
17997: LD_EXP 43
18001: PPUSH
18002: LD_STRING DRf-rast-4
18004: PPUSH
18005: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
18009: LD_EXP 43
18013: PPUSH
18014: LD_STRING DRf-rast-5
18016: PPUSH
18017: CALL_OW 94
// if IsOk ( Aviradze ) then
18021: LD_EXP 42
18025: PPUSH
18026: CALL_OW 302
18030: IFFALSE 18089
// begin CenterNowOnUnits ( Aviradze ) ;
18032: LD_EXP 42
18036: PPUSH
18037: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
18041: LD_EXP 42
18045: PPUSH
18046: LD_STRING DA-rast-6
18048: PPUSH
18049: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
18053: LD_EXP 30
18057: PPUSH
18058: LD_STRING DH-rast-7
18060: PPUSH
18061: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
18065: LD_EXP 31
18069: PPUSH
18070: LD_STRING DG-rast-8
18072: PPUSH
18073: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
18077: LD_EXP 31
18081: PPUSH
18082: LD_STRING DG-rast-9
18084: PPUSH
18085: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
18089: LD_EXP 30
18093: PPUSH
18094: LD_STRING DH-rast-10
18096: PPUSH
18097: CALL_OW 88
// DialogueOff ;
18101: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18105: LD_STRING M2
18107: PPUSH
18108: CALL_OW 337
// bergkampfArrived := true ;
18112: LD_ADDR_EXP 3
18116: PUSH
18117: LD_INT 1
18119: ST_TO_ADDR
// PrepareRolfBase ;
18120: CALL 2707 0 0
// end ;
18124: PPOPN 3
18126: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
18127: LD_INT 12
18129: PPUSH
18130: LD_INT 22
18132: PUSH
18133: LD_INT 2
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PPUSH
18140: CALL_OW 70
18144: PUSH
18145: LD_EXP 43
18149: PPUSH
18150: CALL_OW 302
18154: AND
18155: PUSH
18156: LD_EXP 29
18160: AND
18161: IFFALSE 18721
18163: GO 18165
18165: DISABLE
18166: LD_INT 0
18168: PPUSH
// begin rolfScriptBase := false ;
18169: LD_ADDR_EXP 9
18173: PUSH
18174: LD_INT 0
18176: ST_TO_ADDR
// DialogueOn ;
18177: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
18181: LD_EXP 43
18185: PPUSH
18186: CALL_OW 87
// if rolfSquad >= 10 then
18190: LD_EXP 47
18194: PUSH
18195: LD_INT 10
18197: GREATEREQUAL
18198: IFFALSE 18377
// begin linkedWithRolf := 2 ;
18200: LD_ADDR_EXP 12
18204: PUSH
18205: LD_INT 2
18207: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
18208: LD_EXP 43
18212: PPUSH
18213: LD_STRING DRf-rast-11
18215: PPUSH
18216: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
18220: LD_EXP 30
18224: PPUSH
18225: LD_STRING DH-rast-12
18227: PPUSH
18228: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
18232: LD_EXP 43
18236: PPUSH
18237: LD_STRING DRf-rast-13
18239: PPUSH
18240: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
18244: LD_EXP 30
18248: PPUSH
18249: LD_STRING DH-rast-14
18251: PPUSH
18252: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
18256: LD_EXP 43
18260: PPUSH
18261: LD_STRING DRf-rast-15
18263: PPUSH
18264: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
18268: LD_EXP 30
18272: PPUSH
18273: LD_STRING DH-rast-16
18275: PPUSH
18276: CALL_OW 88
// if IsOk ( Mike ) then
18280: LD_EXP 32
18284: PPUSH
18285: CALL_OW 302
18289: IFFALSE 18363
// begin Say ( Mike , DM-rast-17 ) ;
18291: LD_EXP 32
18295: PPUSH
18296: LD_STRING DM-rast-17
18298: PPUSH
18299: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
18303: LD_EXP 30
18307: PPUSH
18308: LD_STRING DH-rast-18
18310: PPUSH
18311: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
18315: LD_EXP 32
18319: PPUSH
18320: LD_STRING DM-rast-19
18322: PPUSH
18323: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
18327: LD_EXP 30
18331: PPUSH
18332: LD_STRING DH-rast-20
18334: PPUSH
18335: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
18339: LD_EXP 32
18343: PPUSH
18344: LD_STRING DM-rast-21
18346: PPUSH
18347: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
18351: LD_EXP 30
18355: PPUSH
18356: LD_STRING DH-rast-22
18358: PPUSH
18359: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
18363: LD_EXP 30
18367: PPUSH
18368: LD_STRING DH-rast-23
18370: PPUSH
18371: CALL_OW 88
// end else
18375: GO 18527
// begin linkedWithRolf := 1 ;
18377: LD_ADDR_EXP 12
18381: PUSH
18382: LD_INT 1
18384: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
18385: LD_EXP 43
18389: PPUSH
18390: LD_STRING DRf-rast-a-11
18392: PPUSH
18393: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
18397: LD_EXP 30
18401: PPUSH
18402: LD_STRING DH-rast-a-12
18404: PPUSH
18405: CALL_OW 88
// if IsOk ( Kurt ) then
18409: LD_EXP 41
18413: PPUSH
18414: CALL_OW 302
18418: IFFALSE 18515
// begin Say ( Kurt , DKs-rast-a-13 ) ;
18420: LD_EXP 41
18424: PPUSH
18425: LD_STRING DKs-rast-a-13
18427: PPUSH
18428: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
18432: LD_EXP 43
18436: PPUSH
18437: LD_STRING DRf-rast-a-14
18439: PPUSH
18440: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
18444: LD_EXP 43
18448: PPUSH
18449: LD_STRING DRf-rast-a-15
18451: PPUSH
18452: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
18456: LD_EXP 41
18460: PPUSH
18461: LD_STRING DKs-rast-a-16
18463: PPUSH
18464: CALL_OW 88
// if IsOk ( Givi ) then
18468: LD_EXP 31
18472: PPUSH
18473: CALL_OW 302
18477: IFFALSE 18515
// begin Say ( Givi , DG-rast-a-17 ) ;
18479: LD_EXP 31
18483: PPUSH
18484: LD_STRING DG-rast-a-17
18486: PPUSH
18487: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
18491: LD_EXP 31
18495: PPUSH
18496: LD_STRING DG-rast-a-18
18498: PPUSH
18499: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
18503: LD_EXP 41
18507: PPUSH
18508: LD_STRING DKs-rast-a-19
18510: PPUSH
18511: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
18515: LD_EXP 30
18519: PPUSH
18520: LD_STRING DH-rast-a-20
18522: PPUSH
18523: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
18527: LD_EXP 43
18531: PPUSH
18532: LD_STRING DRf-rast-24
18534: PPUSH
18535: CALL_OW 88
// if IsOk ( Aviradze ) then
18539: LD_EXP 42
18543: PPUSH
18544: CALL_OW 302
18548: IFFALSE 18648
// begin Say ( Aviradze , DA-rast-25 ) ;
18550: LD_EXP 42
18554: PPUSH
18555: LD_STRING DA-rast-25
18557: PPUSH
18558: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
18562: LD_EXP 30
18566: PPUSH
18567: LD_STRING DH-rast-26
18569: PPUSH
18570: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
18574: LD_EXP 42
18578: PPUSH
18579: LD_STRING DA-rast-27
18581: PPUSH
18582: CALL_OW 88
// if IsOk ( Markov ) then
18586: LD_EXP 37
18590: PPUSH
18591: CALL_OW 302
18595: IFFALSE 18623
// begin Say ( Markov , DMar-rast-28 ) ;
18597: LD_EXP 37
18601: PPUSH
18602: LD_STRING DMar-rast-28
18604: PPUSH
18605: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
18609: LD_EXP 37
18613: PPUSH
18614: LD_STRING DMar-rast-29
18616: PPUSH
18617: CALL_OW 88
// end else
18621: GO 18646
// if IsOk ( Sophia ) then
18623: LD_EXP 36
18627: PPUSH
18628: CALL_OW 302
18632: IFFALSE 18646
// begin Say ( Sophia , DS-rast-28 ) ;
18634: LD_EXP 36
18638: PPUSH
18639: LD_STRING DS-rast-28
18641: PPUSH
18642: CALL_OW 88
// end ; end else
18646: GO 18671
// if IsOk ( Sophia ) then
18648: LD_EXP 36
18652: PPUSH
18653: CALL_OW 302
18657: IFFALSE 18671
// Say ( Sophia , DS-rast-29 ) ;
18659: LD_EXP 36
18663: PPUSH
18664: LD_STRING DS-rast-29
18666: PPUSH
18667: CALL_OW 88
// DialogueOff ;
18671: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
18675: LD_STRING M3
18677: PPUSH
18678: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
18682: LD_ADDR_VAR 0 1
18686: PUSH
18687: LD_INT 22
18689: PUSH
18690: LD_INT 8
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PPUSH
18697: CALL_OW 69
18701: PUSH
18702: FOR_IN
18703: IFFALSE 18719
// SetSide ( i , 2 ) ;
18705: LD_VAR 0 1
18709: PPUSH
18710: LD_INT 2
18712: PPUSH
18713: CALL_OW 235
18717: GO 18702
18719: POP
18720: POP
// end ;
18721: PPOPN 1
18723: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
18724: LD_EXP 23
18728: PUSH
18729: LD_EXP 12
18733: NOT
18734: AND
18735: PUSH
18736: LD_EXP 29
18740: AND
18741: IFFALSE 18832
18743: GO 18745
18745: DISABLE
18746: LD_INT 0
18748: PPUSH
// begin canRolfJoin := false ;
18749: LD_ADDR_EXP 29
18753: PUSH
18754: LD_INT 0
18756: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
18757: LD_STRING M3
18759: PPUSH
18760: CALL_OW 337
// for i in rolfSquad do
18764: LD_ADDR_VAR 0 1
18768: PUSH
18769: LD_EXP 47
18773: PUSH
18774: FOR_IN
18775: IFFALSE 18830
// begin ComExit ( i ) ;
18777: LD_VAR 0 1
18781: PPUSH
18782: CALL 62399 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
18786: LD_VAR 0 1
18790: PPUSH
18791: LD_INT 147
18793: PPUSH
18794: LD_INT 162
18796: PPUSH
18797: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
18801: LD_VAR 0 1
18805: PPUSH
18806: LD_INT 1050
18808: PPUSH
18809: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
18813: LD_VAR 0 1
18817: PPUSH
18818: LD_INT 103
18820: PPUSH
18821: LD_INT 162
18823: PPUSH
18824: CALL_OW 174
// end ;
18828: GO 18774
18830: POP
18831: POP
// end ;
18832: PPOPN 1
18834: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
18835: LD_EXP 3
18839: PUSH
18840: LD_EXP 43
18844: PPUSH
18845: CALL_OW 256
18849: PUSH
18850: LD_INT 400
18852: LESS
18853: AND
18854: PUSH
18855: LD_EXP 12
18859: NOT
18860: AND
18861: PUSH
18862: LD_EXP 29
18866: AND
18867: IFFALSE 19141
18869: GO 18871
18871: DISABLE
18872: LD_INT 0
18874: PPUSH
// begin DialogueOn ;
18875: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
18879: LD_EXP 43
18883: PPUSH
18884: LD_STRING DRf-rast-f-11
18886: PPUSH
18887: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
18891: LD_EXP 43
18895: PPUSH
18896: LD_STRING DRf-rast-f-12
18898: PPUSH
18899: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
18903: LD_EXP 43
18907: PPUSH
18908: LD_STRING DRf-rast-f-13
18910: PPUSH
18911: CALL_OW 94
// DialogueOff ;
18915: CALL_OW 7
// KillUnit ( Rolf ) ;
18919: LD_EXP 43
18923: PPUSH
18924: CALL_OW 66
// wait ( 0 0$1 ) ;
18928: LD_INT 35
18930: PPUSH
18931: CALL_OW 67
// if not IsOk ( Givi ) then
18935: LD_EXP 31
18939: PPUSH
18940: CALL_OW 302
18944: NOT
18945: IFFALSE 18949
// exit ;
18947: GO 19141
// DialogueOn ;
18949: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
18953: LD_EXP 31
18957: PPUSH
18958: LD_STRING DG-rast-f-14
18960: PPUSH
18961: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
18965: LD_EXP 31
18969: PPUSH
18970: LD_STRING DG-rast-f-15
18972: PPUSH
18973: CALL_OW 88
// if IsOk ( Kaia ) then
18977: LD_EXP 35
18981: PPUSH
18982: CALL_OW 302
18986: IFFALSE 19002
// Say ( Kaia , DK-rast-f-16 ) else
18988: LD_EXP 35
18992: PPUSH
18993: LD_STRING DK-rast-f-16
18995: PPUSH
18996: CALL_OW 88
19000: GO 19089
// if heikeSecondSquad then
19002: LD_EXP 45
19006: IFFALSE 19089
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
19008: LD_ADDR_VAR 0 1
19012: PUSH
19013: LD_EXP 45
19017: PUSH
19018: LD_INT 1
19020: PPUSH
19021: LD_EXP 45
19025: PPUSH
19026: CALL_OW 12
19030: ARRAY
19031: ST_TO_ADDR
// case GetSex ( random ) of 1 :
19032: LD_VAR 0 1
19036: PPUSH
19037: CALL_OW 258
19041: PUSH
19042: LD_INT 1
19044: DOUBLE
19045: EQUAL
19046: IFTRUE 19050
19048: GO 19065
19050: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
19051: LD_VAR 0 1
19055: PPUSH
19056: LD_STRING DArm-rast-f-a-16
19058: PPUSH
19059: CALL_OW 88
19063: GO 19089
19065: LD_INT 2
19067: DOUBLE
19068: EQUAL
19069: IFTRUE 19073
19071: GO 19088
19073: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
19074: LD_VAR 0 1
19078: PPUSH
19079: LD_STRING DArf-rast-f-a-16
19081: PPUSH
19082: CALL_OW 88
19086: GO 19089
19088: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
19089: LD_EXP 31
19093: PPUSH
19094: LD_STRING DG-rast-f-17
19096: PPUSH
19097: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
19101: LD_EXP 31
19105: PPUSH
19106: LD_STRING DG-rast-f-18
19108: PPUSH
19109: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
19113: LD_EXP 31
19117: PPUSH
19118: LD_STRING DG-rast-f-19
19120: PPUSH
19121: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
19125: LD_EXP 31
19129: PPUSH
19130: LD_STRING DG-rast-f-20
19132: PPUSH
19133: CALL_OW 88
// DialogueOff ;
19137: CALL_OW 7
// end ;
19141: PPOPN 1
19143: END
// every 0 0$1 trigger SeeArea ( 2 , ruMainBase ) do
19144: LD_INT 2
19146: PPUSH
19147: LD_INT 10
19149: PPUSH
19150: CALL_OW 294
19154: IFFALSE 19227
19156: GO 19158
19158: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
19159: LD_EXP 31
19163: PPUSH
19164: LD_STRING DG-Len-1
19166: PPUSH
19167: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
19171: LD_EXP 41
19175: PPUSH
19176: LD_STRING DKs-Len-2
19178: PPUSH
19179: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
19183: LD_EXP 41
19187: PPUSH
19188: LD_STRING DKs-Len-3
19190: PPUSH
19191: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
19195: LD_EXP 30
19199: PPUSH
19200: LD_STRING DH-Len-4
19202: PPUSH
19203: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
19207: LD_EXP 35
19211: PPUSH
19212: LD_STRING DK-Len-5
19214: PPUSH
19215: CALL_OW 88
// leninSpotted := true ;
19219: LD_ADDR_EXP 14
19223: PUSH
19224: LD_INT 1
19226: ST_TO_ADDR
// end ;
19227: END
// every 0 0$1 trigger ( bergkampfArrived and tick > 17 17$00 ) or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 322 , 215 , 20 ] ] ) do var i ;
19228: LD_EXP 3
19232: PUSH
19233: LD_OWVAR 1
19237: PUSH
19238: LD_INT 35700
19240: GREATER
19241: AND
19242: PUSH
19243: LD_INT 22
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 92
19255: PUSH
19256: LD_INT 322
19258: PUSH
19259: LD_INT 215
19261: PUSH
19262: LD_INT 20
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PPUSH
19275: CALL_OW 69
19279: OR
19280: IFFALSE 19643
19282: GO 19284
19284: DISABLE
19285: LD_INT 0
19287: PPUSH
// begin PrepareOmarSquad ;
19288: CALL 3989 0 0
// repeat wait ( 0 0$1 ) ;
19292: LD_INT 35
19294: PPUSH
19295: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
19299: LD_INT 14
19301: PPUSH
19302: LD_INT 22
19304: PUSH
19305: LD_INT 3
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 2
19314: PUSH
19315: LD_INT 21
19317: PUSH
19318: LD_INT 1
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 59
19327: PUSH
19328: EMPTY
19329: LIST
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: LIST
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PPUSH
19340: CALL_OW 70
19344: NOT
19345: IFFALSE 19292
// for i in omarSquad do
19347: LD_ADDR_VAR 0 1
19351: PUSH
19352: LD_EXP 48
19356: PUSH
19357: FOR_IN
19358: IFFALSE 19389
// if GetLives ( i ) < 750 then
19360: LD_VAR 0 1
19364: PPUSH
19365: CALL_OW 256
19369: PUSH
19370: LD_INT 750
19372: LESS
19373: IFFALSE 19387
// SetLives ( i , 1000 ) ;
19375: LD_VAR 0 1
19379: PPUSH
19380: LD_INT 1000
19382: PPUSH
19383: CALL_OW 234
19387: GO 19357
19389: POP
19390: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
19391: LD_ADDR_VAR 0 1
19395: PUSH
19396: LD_INT 14
19398: PPUSH
19399: LD_INT 21
19401: PUSH
19402: LD_INT 3
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PPUSH
19409: CALL_OW 70
19413: PUSH
19414: FOR_IN
19415: IFFALSE 19431
// SetSide ( i , 5 ) ;
19417: LD_VAR 0 1
19421: PPUSH
19422: LD_INT 5
19424: PPUSH
19425: CALL_OW 235
19429: GO 19414
19431: POP
19432: POP
// wait ( 0 0$3 ) ;
19433: LD_INT 105
19435: PPUSH
19436: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
19440: LD_INT 5
19442: PPUSH
19443: LD_INT 2
19445: PPUSH
19446: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
19450: LD_EXP 40
19454: PPUSH
19455: CALL_OW 87
// DialogueOn ;
19459: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-1 ) ;
19463: LD_EXP 40
19467: PPUSH
19468: LD_STRING DOm-Veh-1
19470: PPUSH
19471: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
19475: LD_EXP 40
19479: PPUSH
19480: LD_STRING DOm-Veh-2
19482: PPUSH
19483: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
19487: LD_EXP 40
19491: PPUSH
19492: LD_STRING DOm-Veh-3
19494: PPUSH
19495: CALL_OW 94
// if mortarConstructed then
19499: LD_EXP 15
19503: IFFALSE 19517
// SayRadio ( Omar , DOm-Veh-4 ) ;
19505: LD_EXP 40
19509: PPUSH
19510: LD_STRING DOm-Veh-4
19512: PPUSH
19513: CALL_OW 94
// Say ( Heike , DH-Veh-5 ) ;
19517: LD_EXP 30
19521: PPUSH
19522: LD_STRING DH-Veh-5
19524: PPUSH
19525: CALL_OW 88
// if IsOk ( Kurt ) then
19529: LD_EXP 41
19533: PPUSH
19534: CALL_OW 302
19538: IFFALSE 19588
// begin Say ( Kurt , DKs-Veh-6 ) ;
19540: LD_EXP 41
19544: PPUSH
19545: LD_STRING DKs-Veh-6
19547: PPUSH
19548: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
19552: LD_EXP 41
19556: PPUSH
19557: LD_STRING DKs-Veh-7
19559: PPUSH
19560: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
19564: LD_EXP 31
19568: PPUSH
19569: LD_STRING DG-Veh-8
19571: PPUSH
19572: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
19576: LD_EXP 32
19580: PPUSH
19581: LD_STRING DM-Veh-9
19583: PPUSH
19584: CALL_OW 88
// end ; DialogueOff ;
19588: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
19592: LD_STRING M4
19594: PPUSH
19595: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
19599: LD_EXP 40
19603: PPUSH
19604: LD_INT 341
19606: PPUSH
19607: LD_INT 232
19609: PPUSH
19610: CALL_OW 428
19614: PPUSH
19615: CALL_OW 120
// omarArrived := true ;
19619: LD_ADDR_EXP 6
19623: PUSH
19624: LD_INT 1
19626: ST_TO_ADDR
// omarScriptBase := true ;
19627: LD_ADDR_EXP 10
19631: PUSH
19632: LD_INT 1
19634: ST_TO_ADDR
// omarWantVehicles := true ;
19635: LD_ADDR_EXP 18
19639: PUSH
19640: LD_INT 1
19642: ST_TO_ADDR
// end ;
19643: PPOPN 1
19645: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
19646: LD_EXP 43
19650: PPUSH
19651: CALL_OW 302
19655: PUSH
19656: LD_EXP 12
19660: AND
19661: PUSH
19662: LD_EXP 6
19666: AND
19667: IFFALSE 19771
19669: GO 19671
19671: DISABLE
// begin wait ( 0 0$20 ) ;
19672: LD_INT 700
19674: PPUSH
19675: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
19679: LD_EXP 43
19683: PPUSH
19684: CALL_OW 87
// DialogueOn ;
19688: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
19692: LD_EXP 43
19696: PPUSH
19697: LD_STRING DRf-Veh-10
19699: PPUSH
19700: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
19704: LD_EXP 43
19708: PPUSH
19709: LD_STRING DRf-Veh-11
19711: PPUSH
19712: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
19716: LD_EXP 30
19720: PPUSH
19721: LD_STRING DH-Veh-12
19723: PPUSH
19724: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
19728: LD_EXP 30
19732: PPUSH
19733: LD_STRING DH-Veh-13
19735: PPUSH
19736: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
19740: LD_EXP 43
19744: PPUSH
19745: LD_STRING DRf-Veh-14
19747: PPUSH
19748: CALL_OW 88
// DialogueOff ;
19752: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
19756: LD_STRING M5
19758: PPUSH
19759: CALL_OW 337
// rolfWantVehicles := true ;
19763: LD_ADDR_EXP 17
19767: PUSH
19768: LD_INT 1
19770: ST_TO_ADDR
// end ;
19771: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
19772: LD_EXP 18
19776: IFFALSE 20475
19778: GO 19780
19780: DISABLE
19781: LD_INT 0
19783: PPUSH
19784: PPUSH
19785: PPUSH
19786: PPUSH
19787: PPUSH
19788: PPUSH
// begin wait ( 0 0$3 ) ;
19789: LD_INT 105
19791: PPUSH
19792: CALL_OW 67
// Hint ( OmarVehicles ) ;
19796: LD_STRING OmarVehicles
19798: PPUSH
19799: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
19803: LD_INT 16
19805: PPUSH
19806: LD_INT 1
19808: PPUSH
19809: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
19813: LD_INT 35
19815: PPUSH
19816: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
19820: LD_ADDR_EXP 20
19824: PUSH
19825: LD_EXP 20
19829: PUSH
19830: LD_INT 35
19832: MINUS
19833: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
19834: LD_EXP 20
19838: PUSH
19839: LD_INT 0
19841: LESSEQUAL
19842: IFFALSE 19942
// begin display_strings := [ ] ;
19844: LD_ADDR_OWVAR 47
19848: PUSH
19849: EMPTY
19850: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
19851: LD_STRING M4a
19853: PPUSH
19854: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19858: LD_INT 16
19860: PPUSH
19861: LD_INT 0
19863: PPUSH
19864: CALL_OW 424
// DialogueOn ;
19868: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
19872: LD_EXP 40
19876: PPUSH
19877: LD_STRING DOm-Veh-b-15
19879: PPUSH
19880: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
19884: LD_EXP 30
19888: PPUSH
19889: LD_STRING DH-Veh-b-16
19891: PPUSH
19892: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
19896: LD_EXP 40
19900: PPUSH
19901: LD_STRING DOm-Veh-b-17
19903: PPUSH
19904: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
19908: LD_EXP 35
19912: PPUSH
19913: LD_STRING DK-Veh-b-18
19915: PPUSH
19916: CALL_OW 88
// DialogueOff ;
19920: CALL_OW 7
// omarAttack := true ;
19924: LD_ADDR_EXP 23
19928: PUSH
19929: LD_INT 1
19931: ST_TO_ADDR
// omarScriptBase := false ;
19932: LD_ADDR_EXP 10
19936: PUSH
19937: LD_INT 0
19939: ST_TO_ADDR
// exit ;
19940: GO 20475
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19942: LD_EXP 21
19946: PUSH
19947: LD_INT 16
19949: PPUSH
19950: LD_INT 22
19952: PUSH
19953: LD_INT 2
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 21
19962: PUSH
19963: LD_INT 2
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 33
19972: PUSH
19973: LD_INT 1
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 58
19982: PUSH
19983: EMPTY
19984: LIST
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: PPUSH
19992: CALL_OW 70
19996: LESSEQUAL
19997: IFFALSE 19813
// omarWaitingForVehiclesTimer := 0 0$00 ;
19999: LD_ADDR_EXP 20
20003: PUSH
20004: LD_INT 0
20006: ST_TO_ADDR
// display_strings := [ ] ;
20007: LD_ADDR_OWVAR 47
20011: PUSH
20012: EMPTY
20013: ST_TO_ADDR
// DialogueOn ;
20014: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
20018: LD_EXP 40
20022: PPUSH
20023: LD_STRING DOm-Veh-a-15
20025: PPUSH
20026: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
20030: LD_EXP 35
20034: PPUSH
20035: LD_STRING DK-Veh-a-16
20037: PPUSH
20038: CALL_OW 88
// DialogueOff ;
20042: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
20046: LD_STRING M4a
20048: PPUSH
20049: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
20053: LD_INT 16
20055: PPUSH
20056: LD_INT 0
20058: PPUSH
20059: CALL_OW 424
// omarHasVehicles := true ;
20063: LD_ADDR_EXP 22
20067: PUSH
20068: LD_INT 1
20070: ST_TO_ADDR
// wait ( 1 1$00 ) ;
20071: LD_INT 2100
20073: PPUSH
20074: CALL_OW 67
// omarAttack := true ;
20078: LD_ADDR_EXP 23
20082: PUSH
20083: LD_INT 1
20085: ST_TO_ADDR
// omarScriptBase := false ;
20086: LD_ADDR_EXP 10
20090: PUSH
20091: LD_INT 0
20093: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
20094: LD_ADDR_VAR 0 2
20098: PUSH
20099: LD_INT 16
20101: PPUSH
20102: LD_INT 22
20104: PUSH
20105: LD_INT 2
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 21
20114: PUSH
20115: LD_INT 2
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 33
20124: PUSH
20125: LD_INT 1
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 58
20134: PUSH
20135: EMPTY
20136: LIST
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: PPUSH
20144: CALL_OW 70
20148: ST_TO_ADDR
// for i in tmp do
20149: LD_ADDR_VAR 0 1
20153: PUSH
20154: LD_VAR 0 2
20158: PUSH
20159: FOR_IN
20160: IFFALSE 20188
// begin SetFuel ( i , 100 ) ;
20162: LD_VAR 0 1
20166: PPUSH
20167: LD_INT 100
20169: PPUSH
20170: CALL_OW 240
// SetSide ( i , 5 ) ;
20174: LD_VAR 0 1
20178: PPUSH
20179: LD_INT 5
20181: PPUSH
20182: CALL_OW 235
// end ;
20186: GO 20159
20188: POP
20189: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
20190: LD_ADDR_VAR 0 3
20194: PUSH
20195: LD_EXP 48
20199: PPUSH
20200: LD_INT 25
20202: PUSH
20203: LD_INT 2
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PPUSH
20210: CALL_OW 72
20214: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
20215: LD_ADDR_VAR 0 4
20219: PUSH
20220: LD_EXP 48
20224: PPUSH
20225: LD_INT 3
20227: PUSH
20228: LD_INT 55
20230: PUSH
20231: EMPTY
20232: LIST
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 25
20240: PUSH
20241: LD_INT 3
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PPUSH
20252: CALL_OW 72
20256: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
20257: LD_ADDR_VAR 0 5
20261: PUSH
20262: LD_INT 324
20264: PPUSH
20265: LD_INT 234
20267: PPUSH
20268: CALL_OW 428
20272: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
20273: LD_ADDR_VAR 0 6
20277: PUSH
20278: LD_INT 334
20280: PPUSH
20281: LD_INT 241
20283: PPUSH
20284: CALL_OW 428
20288: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
20289: LD_VAR 0 6
20293: PPUSH
20294: CALL_OW 313
20298: PPUSH
20299: CALL_OW 122
// if eng then
20303: LD_VAR 0 3
20307: IFFALSE 20415
// begin if eng + mech <= tmp then
20309: LD_VAR 0 3
20313: PUSH
20314: LD_VAR 0 4
20318: PLUS
20319: PUSH
20320: LD_VAR 0 2
20324: LESSEQUAL
20325: IFFALSE 20380
// begin ComEnterUnit ( eng , workshop ) ;
20327: LD_VAR 0 3
20331: PPUSH
20332: LD_VAR 0 5
20336: PPUSH
20337: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
20341: LD_VAR 0 3
20345: PPUSH
20346: LD_INT 3
20348: PPUSH
20349: CALL_OW 183
// AddComExitBuilding ( eng ) ;
20353: LD_VAR 0 3
20357: PPUSH
20358: CALL_OW 182
// mech := mech union eng ;
20362: LD_ADDR_VAR 0 4
20366: PUSH
20367: LD_VAR 0 4
20371: PUSH
20372: LD_VAR 0 3
20376: UNION
20377: ST_TO_ADDR
// end else
20378: GO 20415
// begin ComEnterUnit ( eng , armoury ) ;
20380: LD_VAR 0 3
20384: PPUSH
20385: LD_VAR 0 6
20389: PPUSH
20390: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
20394: LD_VAR 0 3
20398: PPUSH
20399: LD_INT 1
20401: PPUSH
20402: CALL_OW 183
// AddComExitBuilding ( eng ) ;
20406: LD_VAR 0 3
20410: PPUSH
20411: CALL_OW 182
// end ; end ; for i := 1 to tmp do
20415: LD_ADDR_VAR 0 1
20419: PUSH
20420: DOUBLE
20421: LD_INT 1
20423: DEC
20424: ST_TO_ADDR
20425: LD_VAR 0 2
20429: PUSH
20430: FOR_TO
20431: IFFALSE 20473
// if i <= mech then
20433: LD_VAR 0 1
20437: PUSH
20438: LD_VAR 0 4
20442: LESSEQUAL
20443: IFFALSE 20471
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
20445: LD_VAR 0 4
20449: PUSH
20450: LD_VAR 0 1
20454: ARRAY
20455: PPUSH
20456: LD_VAR 0 2
20460: PUSH
20461: LD_VAR 0 1
20465: ARRAY
20466: PPUSH
20467: CALL_OW 180
20471: GO 20430
20473: POP
20474: POP
// end ;
20475: PPOPN 6
20477: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i ;
20478: LD_EXP 43
20482: PPUSH
20483: CALL_OW 302
20487: PUSH
20488: LD_EXP 17
20492: AND
20493: IFFALSE 20949
20495: GO 20497
20497: DISABLE
20498: LD_INT 0
20500: PPUSH
// begin repeat wait ( 0 0$1 ) ;
20501: LD_INT 35
20503: PPUSH
20504: CALL_OW 67
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
20508: LD_ADDR_EXP 19
20512: PUSH
20513: LD_EXP 19
20517: PUSH
20518: LD_INT 35
20520: MINUS
20521: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 or omarAttack then
20522: LD_EXP 19
20526: PUSH
20527: LD_INT 0
20529: LESSEQUAL
20530: PUSH
20531: LD_EXP 23
20535: OR
20536: IFFALSE 20754
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
20538: LD_ADDR_EXP 19
20542: PUSH
20543: LD_INT 0
20545: ST_TO_ADDR
// display_strings := [ ] ;
20546: LD_ADDR_OWVAR 47
20550: PUSH
20551: EMPTY
20552: ST_TO_ADDR
// DialogueOn ;
20553: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
20557: LD_EXP 43
20561: PPUSH
20562: LD_STRING DRf-Veh-b-19
20564: PPUSH
20565: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
20569: LD_EXP 43
20573: PPUSH
20574: LD_STRING DRf-Veh-b-20
20576: PPUSH
20577: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
20581: LD_EXP 30
20585: PPUSH
20586: LD_STRING DH-Veh-b-21
20588: PPUSH
20589: CALL_OW 88
// if IsOk ( Givi ) then
20593: LD_EXP 31
20597: PPUSH
20598: CALL_OW 302
20602: IFFALSE 20640
// begin Say ( Givi , DG-Veh-b-22 ) ;
20604: LD_EXP 31
20608: PPUSH
20609: LD_STRING DG-Veh-b-22
20611: PPUSH
20612: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
20616: LD_EXP 30
20620: PPUSH
20621: LD_STRING DH-Veh-b-23
20623: PPUSH
20624: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
20628: LD_EXP 31
20632: PPUSH
20633: LD_STRING DG-Veh-b-24
20635: PPUSH
20636: CALL_OW 88
// end ; DialogueOff ;
20640: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20644: LD_STRING M5a
20646: PPUSH
20647: CALL_OW 337
// for i in rolfSquad do
20651: LD_ADDR_VAR 0 1
20655: PUSH
20656: LD_EXP 47
20660: PUSH
20661: FOR_IN
20662: IFFALSE 20728
// begin SetSide ( i , 8 ) ;
20664: LD_VAR 0 1
20668: PPUSH
20669: LD_INT 8
20671: PPUSH
20672: CALL_OW 235
// if IsDriver ( i ) then
20676: LD_VAR 0 1
20680: PPUSH
20681: CALL 59617 0 1
20685: IFFALSE 20706
// SetSide ( IsInUnit ( i ) , 8 ) else
20687: LD_VAR 0 1
20691: PPUSH
20692: CALL_OW 310
20696: PPUSH
20697: LD_INT 8
20699: PPUSH
20700: CALL_OW 235
20704: GO 20726
// if IsInUnit ( i ) then
20706: LD_VAR 0 1
20710: PPUSH
20711: CALL_OW 310
20715: IFFALSE 20726
// ComExitBuilding ( i ) ;
20717: LD_VAR 0 1
20721: PPUSH
20722: CALL_OW 122
// end ;
20726: GO 20661
20728: POP
20729: POP
// wait ( 0 0$1 ) ;
20730: LD_INT 35
20732: PPUSH
20733: CALL_OW 67
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20737: LD_EXP 47
20741: PPUSH
20742: LD_INT 229
20744: PPUSH
20745: LD_INT 154
20747: PPUSH
20748: CALL_OW 114
// exit ;
20752: GO 20949
// end ; if IsDead ( Rolf ) then
20754: LD_EXP 43
20758: PPUSH
20759: CALL_OW 301
20763: IFFALSE 20774
// begin ChangeMissionObjectives ( M5a ) ;
20765: LD_STRING M5a
20767: PPUSH
20768: CALL_OW 337
// exit ;
20772: GO 20949
// end ; until UnitFilter ( rolfSquad , [ f_driving ] ) + 0 = rolfSquad + 0 ;
20774: LD_EXP 47
20778: PPUSH
20779: LD_INT 55
20781: PUSH
20782: EMPTY
20783: LIST
20784: PPUSH
20785: CALL_OW 72
20789: PUSH
20790: LD_INT 0
20792: PLUS
20793: PUSH
20794: LD_EXP 47
20798: PUSH
20799: LD_INT 0
20801: PLUS
20802: EQUAL
20803: IFFALSE 20501
// rolfWaitingForVehiclesTimer := 0 0$00 ;
20805: LD_ADDR_EXP 19
20809: PUSH
20810: LD_INT 0
20812: ST_TO_ADDR
// display_strings := [ ] ;
20813: LD_ADDR_OWVAR 47
20817: PUSH
20818: EMPTY
20819: ST_TO_ADDR
// DialogueOn ;
20820: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
20824: LD_EXP 43
20828: PPUSH
20829: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
20833: LD_EXP 43
20837: PPUSH
20838: LD_STRING DRf-Veh-a-17
20840: PPUSH
20841: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
20845: LD_EXP 30
20849: PPUSH
20850: LD_STRING DH-08-Veh-a-18
20852: PPUSH
20853: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
20857: LD_EXP 43
20861: PPUSH
20862: LD_STRING DRf-Veh-a-19
20864: PPUSH
20865: CALL_OW 88
// DialogueOff ;
20869: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20873: LD_STRING M5a
20875: PPUSH
20876: CALL_OW 337
// rolfHasVehicles := true ;
20880: LD_ADDR_EXP 16
20884: PUSH
20885: LD_INT 1
20887: ST_TO_ADDR
// for i in rolfSquad do
20888: LD_ADDR_VAR 0 1
20892: PUSH
20893: LD_EXP 47
20897: PUSH
20898: FOR_IN
20899: IFFALSE 20932
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
20901: LD_VAR 0 1
20905: PPUSH
20906: CALL_OW 310
20910: PPUSH
20911: LD_INT 8
20913: PPUSH
20914: CALL_OW 235
// SetSide ( i , 8 ) ;
20918: LD_VAR 0 1
20922: PPUSH
20923: LD_INT 8
20925: PPUSH
20926: CALL_OW 235
// end ;
20930: GO 20898
20932: POP
20933: POP
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20934: LD_EXP 47
20938: PPUSH
20939: LD_INT 229
20941: PPUSH
20942: LD_INT 154
20944: PPUSH
20945: CALL_OW 114
// end ;
20949: PPOPN 1
20951: END
// every 0 0$1 trigger leninSpotted do
20952: LD_EXP 14
20956: IFFALSE 21044
20958: GO 20960
20960: DISABLE
// begin wait ( 0 0$10 ) ;
20961: LD_INT 350
20963: PPUSH
20964: CALL_OW 67
// DialogueOn ;
20968: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
20972: LD_EXP 42
20976: PPUSH
20977: LD_STRING DA-Transmission-1
20979: PPUSH
20980: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
20984: LD_EXP 49
20988: PPUSH
20989: LD_STRING DMzw-Transmission-2
20991: PPUSH
20992: CALL_OW 94
// if gaidarKilled then
20996: LD_EXP 7
21000: IFFALSE 21016
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
21002: LD_EXP 49
21006: PPUSH
21007: LD_STRING DMzw-Transmission-3
21009: PPUSH
21010: CALL_OW 94
21014: GO 21028
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
21016: LD_EXP 49
21020: PPUSH
21021: LD_STRING DMzw-Transmission-a-3
21023: PPUSH
21024: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
21028: LD_EXP 30
21032: PPUSH
21033: LD_STRING DH-Transmission-4
21035: PPUSH
21036: CALL_OW 88
// DialogueOff ;
21040: CALL_OW 7
// end ;
21044: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
21045: LD_INT 22
21047: PUSH
21048: LD_INT 3
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 25
21057: PUSH
21058: LD_INT 9
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: LD_INT 101
21067: PUSH
21068: LD_INT 2
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: LIST
21079: PPUSH
21080: CALL_OW 69
21084: PUSH
21085: LD_EXP 30
21089: PPUSH
21090: CALL_OW 302
21094: AND
21095: IFFALSE 21160
21097: GO 21099
21099: DISABLE
// begin CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
21100: LD_INT 22
21102: PUSH
21103: LD_INT 3
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 25
21112: PUSH
21113: LD_INT 9
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 101
21122: PUSH
21123: LD_INT 2
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: LIST
21134: PPUSH
21135: CALL_OW 69
21139: PUSH
21140: LD_INT 1
21142: ARRAY
21143: PPUSH
21144: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
21148: LD_EXP 30
21152: PPUSH
21153: LD_STRING DH-Rubazooka-1
21155: PPUSH
21156: CALL_OW 88
// end ;
21160: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
21161: LD_INT 19
21163: PPUSH
21164: LD_INT 22
21166: PUSH
21167: LD_INT 3
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PPUSH
21174: CALL_OW 70
21178: PUSH
21179: LD_EXP 28
21183: AND
21184: IFFALSE 21235
21186: GO 21188
21188: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
21189: LD_INT 19
21191: PPUSH
21192: LD_INT 22
21194: PUSH
21195: LD_INT 3
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PPUSH
21202: CALL_OW 70
21206: PPUSH
21207: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
21211: LD_EXP 30
21215: PPUSH
21216: LD_STRING DH-Ruattfirst-1
21218: PPUSH
21219: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
21223: LD_EXP 30
21227: PPUSH
21228: LD_STRING DH-Ruattfirst-2
21230: PPUSH
21231: CALL_OW 88
// end ;
21235: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
21236: LD_INT 19
21238: PPUSH
21239: LD_INT 22
21241: PUSH
21242: LD_INT 3
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PPUSH
21249: CALL_OW 70
21253: PUSH
21254: LD_EXP 28
21258: NOT
21259: AND
21260: IFFALSE 21299
21262: GO 21264
21264: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
21265: LD_INT 19
21267: PPUSH
21268: LD_INT 22
21270: PUSH
21271: LD_INT 3
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PPUSH
21278: CALL_OW 70
21282: PPUSH
21283: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
21287: LD_EXP 30
21291: PPUSH
21292: LD_STRING DH-Ruattnext-1
21294: PPUSH
21295: CALL_OW 88
// end ;
21299: END
// every 0 0$1 trigger GetResourceType ( GetBase ( arDepot ) , mat_oil ) < 31 and IsOk ( Givi ) do var vehicle , driver , live ;
21300: LD_EXP 44
21304: PPUSH
21305: CALL_OW 274
21309: PPUSH
21310: LD_INT 2
21312: PPUSH
21313: CALL_OW 275
21317: PUSH
21318: LD_INT 31
21320: LESS
21321: PUSH
21322: LD_EXP 31
21326: PPUSH
21327: CALL_OW 302
21331: AND
21332: IFFALSE 21887
21334: GO 21336
21336: DISABLE
21337: LD_INT 0
21339: PPUSH
21340: PPUSH
21341: PPUSH
// begin DialogueOn ;
21342: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
21346: LD_EXP 30
21350: PPUSH
21351: LD_STRING DH-Fuel-1
21353: PPUSH
21354: CALL_OW 88
// Say ( Givi , DG-Fuel-2 ) ;
21358: LD_EXP 31
21362: PPUSH
21363: LD_STRING DG-Fuel-2
21365: PPUSH
21366: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
21370: LD_EXP 31
21374: PPUSH
21375: LD_STRING DG-Fuel-3
21377: PPUSH
21378: CALL_OW 88
// DialogueOff ;
21382: CALL_OW 7
// Query ( Oil ) ;
21386: LD_STRING Oil
21388: PPUSH
21389: CALL_OW 97
// SetAreaMapShow ( oilArea , 1 ) ;
21393: LD_INT 20
21395: PPUSH
21396: LD_INT 1
21398: PPUSH
21399: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
21403: LD_INT 35
21405: PPUSH
21406: CALL_OW 67
// until FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
21410: LD_INT 20
21412: PPUSH
21413: LD_INT 22
21415: PUSH
21416: LD_INT 2
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 33
21425: PUSH
21426: LD_INT 1
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 2
21435: PUSH
21436: LD_INT 34
21438: PUSH
21439: LD_INT 32
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 34
21448: PUSH
21449: LD_INT 51
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: LIST
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: LIST
21465: PPUSH
21466: CALL_OW 70
21470: IFFALSE 21403
// SetAreaMapShow ( oilArea , 0 ) ;
21472: LD_INT 20
21474: PPUSH
21475: LD_INT 0
21477: PPUSH
21478: CALL_OW 424
// vehicle := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) [ 1 ] ;
21482: LD_ADDR_VAR 0 1
21486: PUSH
21487: LD_INT 20
21489: PPUSH
21490: LD_INT 22
21492: PUSH
21493: LD_INT 2
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 33
21502: PUSH
21503: LD_INT 1
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 2
21512: PUSH
21513: LD_INT 34
21515: PUSH
21516: LD_INT 32
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 34
21525: PUSH
21526: LD_INT 51
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: LIST
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: LIST
21542: PPUSH
21543: CALL_OW 70
21547: PUSH
21548: LD_INT 1
21550: ARRAY
21551: ST_TO_ADDR
// driver := IsDrivenBy ( vehicle ) ;
21552: LD_ADDR_VAR 0 2
21556: PUSH
21557: LD_VAR 0 1
21561: PPUSH
21562: CALL_OW 311
21566: ST_TO_ADDR
// live := GetLives ( vehicle ) ;
21567: LD_ADDR_VAR 0 3
21571: PUSH
21572: LD_VAR 0 1
21576: PPUSH
21577: CALL_OW 256
21581: ST_TO_ADDR
// RemoveUnit ( driver ) ;
21582: LD_VAR 0 2
21586: PPUSH
21587: CALL_OW 64
// RemoveUnit ( vehicle ) ;
21591: LD_VAR 0 1
21595: PPUSH
21596: CALL_OW 64
// wait ( rand ( 4 4$30 , 5 5$30 ) ) ;
21600: LD_INT 9450
21602: PPUSH
21603: LD_INT 11550
21605: PPUSH
21606: CALL_OW 12
21610: PPUSH
21611: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21615: LD_INT 35
21617: PPUSH
21618: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
21622: LD_INT 22
21624: PUSH
21625: LD_INT 3
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 92
21634: PUSH
21635: LD_INT 261
21637: PUSH
21638: LD_INT 71
21640: PUSH
21641: LD_INT 12
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PPUSH
21654: CALL_OW 69
21658: NOT
21659: PUSH
21660: LD_INT 277
21662: PPUSH
21663: LD_INT 80
21665: PPUSH
21666: CALL_OW 428
21670: NOT
21671: AND
21672: IFFALSE 21615
// uc_nation := GetNation ( vehicle ) ;
21674: LD_ADDR_OWVAR 21
21678: PUSH
21679: LD_VAR 0 1
21683: PPUSH
21684: CALL_OW 248
21688: ST_TO_ADDR
// uc_side := 2 ;
21689: LD_ADDR_OWVAR 20
21693: PUSH
21694: LD_INT 2
21696: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( vehicle ) , GetEngine ( vehicle ) , GetControl ( vehicle ) , GetWeapon ( vehicle ) , 66 ) ;
21697: LD_VAR 0 1
21701: PPUSH
21702: CALL_OW 265
21706: PPUSH
21707: LD_VAR 0 1
21711: PPUSH
21712: CALL_OW 262
21716: PPUSH
21717: LD_VAR 0 1
21721: PPUSH
21722: CALL_OW 263
21726: PPUSH
21727: LD_VAR 0 1
21731: PPUSH
21732: CALL_OW 264
21736: PPUSH
21737: LD_INT 66
21739: PPUSH
21740: CALL 30138 0 5
// vehicle := CreateVehicle ;
21744: LD_ADDR_VAR 0 1
21748: PUSH
21749: CALL_OW 45
21753: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
21754: LD_VAR 0 1
21758: PPUSH
21759: LD_INT 277
21761: PPUSH
21762: LD_INT 80
21764: PPUSH
21765: LD_INT 4
21767: PPUSH
21768: LD_INT 0
21770: PPUSH
21771: CALL 64143 0 5
// PlaceHumanInUnit ( driver , vehicle ) ;
21775: LD_VAR 0 2
21779: PPUSH
21780: LD_VAR 0 1
21784: PPUSH
21785: CALL_OW 52
// SetLives ( vehicle , live ) ;
21789: LD_VAR 0 1
21793: PPUSH
21794: LD_VAR 0 3
21798: PPUSH
21799: CALL_OW 234
// if Prob ( [ 70 , 60 , 50 , 40 ] [ Difficulty ] ) then
21803: LD_INT 70
21805: PUSH
21806: LD_INT 60
21808: PUSH
21809: LD_INT 50
21811: PUSH
21812: LD_INT 40
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: PUSH
21821: LD_OWVAR 67
21825: ARRAY
21826: PPUSH
21827: CALL_OW 13
21831: IFFALSE 21850
// SetCargo ( vehicle , mat_oil , 100 ) else
21833: LD_VAR 0 1
21837: PPUSH
21838: LD_INT 2
21840: PPUSH
21841: LD_INT 100
21843: PPUSH
21844: CALL_OW 290
21848: GO 21872
// if live > 333 then
21850: LD_VAR 0 3
21854: PUSH
21855: LD_INT 333
21857: GREATER
21858: IFFALSE 21872
// SetLives ( vehicle , 333 ) ;
21860: LD_VAR 0 1
21864: PPUSH
21865: LD_INT 333
21867: PPUSH
21868: CALL_OW 234
// ComMoveXY ( vehicle , 250 , 119 ) ;
21872: LD_VAR 0 1
21876: PPUSH
21877: LD_INT 250
21879: PPUSH
21880: LD_INT 119
21882: PPUSH
21883: CALL_OW 111
// end ;
21887: PPOPN 3
21889: END
// every 0 0$1 trigger leninSpotted and omarAttack do
21890: LD_EXP 14
21894: PUSH
21895: LD_EXP 23
21899: AND
21900: IFFALSE 22200
21902: GO 21904
21904: DISABLE
// begin wait ( 0 0$45 ) ;
21905: LD_INT 1575
21907: PPUSH
21908: CALL_OW 67
// DialogueOn ;
21912: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
21916: LD_EXP 38
21920: PPUSH
21921: LD_STRING DShar-End-1
21923: PPUSH
21924: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
21928: LD_EXP 30
21932: PPUSH
21933: LD_STRING DH-End-2
21935: PPUSH
21936: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
21940: LD_EXP 38
21944: PPUSH
21945: LD_STRING DShar-End-3
21947: PPUSH
21948: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
21952: LD_EXP 30
21956: PPUSH
21957: LD_STRING DH-End-4
21959: PPUSH
21960: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
21964: LD_EXP 38
21968: PPUSH
21969: LD_STRING DShar-End-5
21971: PPUSH
21972: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
21976: LD_EXP 38
21980: PPUSH
21981: LD_STRING DShar-End-6
21983: PPUSH
21984: CALL_OW 94
// dwait ( 0 0$2 ) ;
21988: LD_INT 70
21990: PPUSH
21991: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
21995: LD_EXP 30
21999: PPUSH
22000: LD_STRING DH-End-7
22002: PPUSH
22003: CALL_OW 88
// DialogueOff ;
22007: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
22011: LD_STRING M6
22013: PPUSH
22014: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
22018: LD_INT 17
22020: PPUSH
22021: LD_INT 1
22023: PPUSH
22024: CALL_OW 424
// escapeAllowed := true ;
22028: LD_ADDR_EXP 24
22032: PUSH
22033: LD_INT 1
22035: ST_TO_ADDR
// wait ( 0 0$2 ) ;
22036: LD_INT 70
22038: PPUSH
22039: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
22043: LD_EXP 41
22047: PPUSH
22048: LD_STRING DKs-End-8
22050: PPUSH
22051: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
22055: LD_EXP 35
22059: PPUSH
22060: LD_STRING DK-End-10
22062: PPUSH
22063: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
22067: LD_EXP 41
22071: PPUSH
22072: LD_STRING DKs-End-9
22074: PPUSH
22075: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
22079: LD_EXP 37
22083: PPUSH
22084: LD_STRING DMar-End-11
22086: PPUSH
22087: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
22091: LD_STRING 05_DrugsTested
22093: PPUSH
22094: LD_EXP 1
22098: PPUSH
22099: CALL_OW 30
22103: IFFALSE 22117
// Say ( Mike , DM-End-12 ) ;
22105: LD_EXP 32
22109: PPUSH
22110: LD_STRING DM-End-12
22112: PPUSH
22113: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
22117: LD_EXP 39
22121: PPUSH
22122: LD_STRING DO-End-13
22124: PPUSH
22125: CALL_OW 88
// if IsOk ( Sophia ) then
22129: LD_EXP 36
22133: PPUSH
22134: CALL_OW 302
22138: IFFALSE 22164
// begin Say ( Sophia , DS-End-15 ) ;
22140: LD_EXP 36
22144: PPUSH
22145: LD_STRING DS-End-15
22147: PPUSH
22148: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
22152: LD_EXP 35
22156: PPUSH
22157: LD_STRING DK-End-16
22159: PPUSH
22160: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
22164: LD_EXP 31
22168: PPUSH
22169: LD_STRING DG-End-17
22171: PPUSH
22172: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
22176: LD_EXP 31
22180: PPUSH
22181: LD_STRING DG-End-18
22183: PPUSH
22184: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
22188: LD_EXP 31
22192: PPUSH
22193: LD_STRING DG-End-19
22195: PPUSH
22196: CALL_OW 88
// end ;
22200: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
22201: LD_EXP 24
22205: IFFALSE 22333
22207: GO 22209
22209: DISABLE
22210: LD_INT 0
22212: PPUSH
22213: PPUSH
// begin enable ;
22214: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
22215: LD_ADDR_OWVAR 47
22219: PUSH
22220: LD_STRING #X106-2
22222: PUSH
22223: LD_EXP 25
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
22232: LD_ADDR_EXP 25
22236: PUSH
22237: LD_EXP 25
22241: PUSH
22242: LD_INT 35
22244: MINUS
22245: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
22246: LD_ADDR_VAR 0 2
22250: PUSH
22251: LD_INT 17
22253: PPUSH
22254: LD_INT 22
22256: PUSH
22257: LD_INT 2
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 21
22266: PUSH
22267: LD_INT 1
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 23
22276: PUSH
22277: LD_INT 2
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 71
22293: ST_TO_ADDR
// if not outsiders then
22294: LD_VAR 0 2
22298: NOT
22299: IFFALSE 22316
// begin escapeAllowed := false ;
22301: LD_ADDR_EXP 24
22305: PUSH
22306: LD_INT 0
22308: ST_TO_ADDR
// disable ;
22309: DISABLE
// MissionWin ;
22310: CALL 22336 0 0
// exit ;
22314: GO 22333
// end ; if escapeTimer <= 0 0$00 then
22316: LD_EXP 25
22320: PUSH
22321: LD_INT 0
22323: LESSEQUAL
22324: IFFALSE 22333
// YouLost ( TimeOut ) ;
22326: LD_STRING TimeOut
22328: PPUSH
22329: CALL_OW 104
// end ;
22333: PPOPN 2
22335: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
22336: LD_INT 0
22338: PPUSH
22339: PPUSH
22340: PPUSH
22341: PPUSH
22342: PPUSH
// Say ( Heike , DH-End-20 ) ;
22343: LD_EXP 30
22347: PPUSH
22348: LD_STRING DH-End-20
22350: PPUSH
22351: CALL_OW 88
// if rolfDied then
22355: LD_EXP 13
22359: IFFALSE 22374
// AddMedal ( med1 , - 1 ) else
22361: LD_STRING med1
22363: PPUSH
22364: LD_INT 1
22366: NEG
22367: PPUSH
22368: CALL_OW 101
22372: GO 22404
// if not canRolfJoin then
22374: LD_EXP 29
22378: NOT
22379: IFFALSE 22394
// AddMedal ( med1 , - 2 ) else
22381: LD_STRING med1
22383: PPUSH
22384: LD_INT 2
22386: NEG
22387: PPUSH
22388: CALL_OW 101
22392: GO 22404
// AddMedal ( med1 , 1 ) ;
22394: LD_STRING med1
22396: PPUSH
22397: LD_INT 1
22399: PPUSH
22400: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
22404: LD_EXP 22
22408: PUSH
22409: LD_EXP 16
22413: AND
22414: IFFALSE 22428
// AddMedal ( med2 , 1 ) else
22416: LD_STRING med2
22418: PPUSH
22419: LD_INT 1
22421: PPUSH
22422: CALL_OW 101
22426: GO 22477
// if omarHasVehicles then
22428: LD_EXP 22
22432: IFFALSE 22447
// AddMedal ( med2 , - 1 ) else
22434: LD_STRING med2
22436: PPUSH
22437: LD_INT 1
22439: NEG
22440: PPUSH
22441: CALL_OW 101
22445: GO 22477
// if rolfHasVehicles then
22447: LD_EXP 16
22451: IFFALSE 22466
// AddMedal ( med2 , - 2 ) else
22453: LD_STRING med2
22455: PPUSH
22456: LD_INT 2
22458: NEG
22459: PPUSH
22460: CALL_OW 101
22464: GO 22477
// AddMedal ( med2 , - 3 ) ;
22466: LD_STRING med2
22468: PPUSH
22469: LD_INT 3
22471: NEG
22472: PPUSH
22473: CALL_OW 101
// if ruLoseCounter >= [ 40 , 55 , 70 , 82 ] [ Difficulty ] and heikeLoseCounter = 0 then
22477: LD_EXP 5
22481: PUSH
22482: LD_INT 40
22484: PUSH
22485: LD_INT 55
22487: PUSH
22488: LD_INT 70
22490: PUSH
22491: LD_INT 82
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: PUSH
22500: LD_OWVAR 67
22504: ARRAY
22505: GREATEREQUAL
22506: PUSH
22507: LD_EXP 26
22511: PUSH
22512: LD_INT 0
22514: EQUAL
22515: AND
22516: IFFALSE 22530
// AddMedal ( med3 , 1 ) else
22518: LD_STRING med3
22520: PPUSH
22521: LD_INT 1
22523: PPUSH
22524: CALL_OW 101
22528: GO 22560
// if heikeLoseCounter then
22530: LD_EXP 26
22534: IFFALSE 22549
// AddMedal ( med3 , - 2 ) else
22536: LD_STRING med3
22538: PPUSH
22539: LD_INT 2
22541: NEG
22542: PPUSH
22543: CALL_OW 101
22547: GO 22560
// AddMedal ( med3 , - 1 ) ;
22549: LD_STRING med3
22551: PPUSH
22552: LD_INT 1
22554: NEG
22555: PPUSH
22556: CALL_OW 101
// GiveMedals ( MAIN ) ;
22560: LD_STRING MAIN
22562: PPUSH
22563: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
22567: LD_INT 22
22569: PUSH
22570: LD_INT 2
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 23
22579: PUSH
22580: LD_INT 2
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 21
22589: PUSH
22590: LD_INT 1
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: LIST
22601: PPUSH
22602: CALL_OW 69
22606: PPUSH
22607: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
22611: LD_EXP 30
22615: PPUSH
22616: LD_STRING 06_Heike
22618: PPUSH
22619: CALL_OW 38
// if Aviradze then
22623: LD_EXP 42
22627: IFFALSE 22641
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
22629: LD_EXP 42
22633: PPUSH
22634: LD_STRING 06_Aviradze
22636: PPUSH
22637: CALL_OW 38
// if Ibrahim then
22641: LD_EXP 33
22645: IFFALSE 22659
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
22647: LD_EXP 33
22651: PPUSH
22652: LD_STRING 06_Ibrahim
22654: PPUSH
22655: CALL_OW 38
// if Kamil then
22659: LD_EXP 34
22663: IFFALSE 22677
// SaveCharacters ( Kamil , 06_Kamil ) ;
22665: LD_EXP 34
22669: PPUSH
22670: LD_STRING 06_Kamil
22672: PPUSH
22673: CALL_OW 38
// if Sophia then
22677: LD_EXP 36
22681: IFFALSE 22695
// SaveCharacters ( Sophia , 06_Sophia ) ;
22683: LD_EXP 36
22687: PPUSH
22688: LD_STRING 06_Sophia
22690: PPUSH
22691: CALL_OW 38
// if Kaia then
22695: LD_EXP 35
22699: IFFALSE 22713
// SaveCharacters ( Kaia , 06_Kaia ) ;
22701: LD_EXP 35
22705: PPUSH
22706: LD_STRING 06_Kaia
22708: PPUSH
22709: CALL_OW 38
// if Givi then
22713: LD_EXP 31
22717: IFFALSE 22731
// SaveCharacters ( Givi , 06_Givi ) ;
22719: LD_EXP 31
22723: PPUSH
22724: LD_STRING 06_Givi
22726: PPUSH
22727: CALL_OW 38
// if Mike then
22731: LD_EXP 32
22735: IFFALSE 22749
// SaveCharacters ( Mike , 06_Mike ) ;
22737: LD_EXP 32
22741: PPUSH
22742: LD_STRING 06_Mike
22744: PPUSH
22745: CALL_OW 38
// if Markov then
22749: LD_EXP 37
22753: IFFALSE 22767
// SaveCharacters ( Markov , 06_Markov ) ;
22755: LD_EXP 37
22759: PPUSH
22760: LD_STRING 06_Markov
22762: PPUSH
22763: CALL_OW 38
// if Kurt then
22767: LD_EXP 41
22771: IFFALSE 22785
// SaveCharacters ( Kurt , 06_Kurt ) ;
22773: LD_EXP 41
22777: PPUSH
22778: LD_STRING 06_Kurt
22780: PPUSH
22781: CALL_OW 38
// if heikeSecondSquad then
22785: LD_EXP 45
22789: IFFALSE 22803
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
22791: LD_EXP 45
22795: PPUSH
22796: LD_STRING 06_others
22798: PPUSH
22799: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
22803: LD_ADDR_VAR 0 3
22807: PUSH
22808: LD_INT 22
22810: PUSH
22811: LD_INT 2
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 23
22820: PUSH
22821: LD_INT 0
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PPUSH
22832: CALL_OW 69
22836: ST_TO_ADDR
// if tmp then
22837: LD_VAR 0 3
22841: IFFALSE 22855
// SaveCharacters ( tmp , 06_apes ) ;
22843: LD_VAR 0 3
22847: PPUSH
22848: LD_STRING 06_apes
22850: PPUSH
22851: CALL_OW 38
// if Rolf then
22855: LD_EXP 43
22859: IFFALSE 22910
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
22861: LD_EXP 43
22865: PPUSH
22866: LD_STRING 06_Rolf
22868: PPUSH
22869: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
22873: LD_STRING enableBioCharacter(BIO_ROLF)
22875: PPUSH
22876: CALL_OW 559
// if rolfSquad diff Rolf then
22880: LD_EXP 47
22884: PUSH
22885: LD_EXP 43
22889: DIFF
22890: IFFALSE 22910
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
22892: LD_EXP 47
22896: PUSH
22897: LD_EXP 43
22901: DIFF
22902: PPUSH
22903: LD_STRING 06_RolfSquad
22905: PPUSH
22906: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
22910: LD_ADDR_VAR 0 3
22914: PUSH
22915: LD_INT 17
22917: PPUSH
22918: LD_INT 21
22920: PUSH
22921: LD_INT 2
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PPUSH
22928: CALL_OW 70
22932: ST_TO_ADDR
// if tmp then
22933: LD_VAR 0 3
22937: IFFALSE 23231
// begin tmp2 := [ ] ;
22939: LD_ADDR_VAR 0 4
22943: PUSH
22944: EMPTY
22945: ST_TO_ADDR
// for i in tmp do
22946: LD_ADDR_VAR 0 2
22950: PUSH
22951: LD_VAR 0 3
22955: PUSH
22956: FOR_IN
22957: IFFALSE 23217
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
22959: LD_VAR 0 2
22963: PPUSH
22964: CALL_OW 264
22968: PUSH
22969: LD_INT 32
22971: PUSH
22972: LD_INT 12
22974: PUSH
22975: LD_INT 51
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: LIST
22982: IN
22983: IFFALSE 23120
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
22985: LD_ADDR_VAR 0 5
22989: PUSH
22990: LD_VAR 0 2
22994: PPUSH
22995: LD_INT 1
22997: PPUSH
22998: CALL_OW 289
23002: PUSH
23003: LD_VAR 0 2
23007: PPUSH
23008: LD_INT 2
23010: PPUSH
23011: CALL_OW 289
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
23020: LD_ADDR_VAR 0 4
23024: PUSH
23025: LD_VAR 0 4
23029: PPUSH
23030: LD_VAR 0 4
23034: PUSH
23035: LD_INT 1
23037: PLUS
23038: PPUSH
23039: LD_VAR 0 2
23043: PPUSH
23044: CALL_OW 265
23048: PUSH
23049: LD_VAR 0 2
23053: PPUSH
23054: CALL_OW 262
23058: PUSH
23059: LD_VAR 0 2
23063: PPUSH
23064: CALL_OW 263
23068: PUSH
23069: LD_VAR 0 2
23073: PPUSH
23074: CALL_OW 264
23078: PUSH
23079: LD_VAR 0 2
23083: PPUSH
23084: CALL_OW 248
23088: PUSH
23089: LD_VAR 0 2
23093: PPUSH
23094: CALL_OW 256
23098: PUSH
23099: LD_VAR 0 5
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: PPUSH
23113: CALL_OW 1
23117: ST_TO_ADDR
// end else
23118: GO 23215
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
23120: LD_ADDR_VAR 0 4
23124: PUSH
23125: LD_VAR 0 4
23129: PPUSH
23130: LD_VAR 0 4
23134: PUSH
23135: LD_INT 1
23137: PLUS
23138: PPUSH
23139: LD_VAR 0 2
23143: PPUSH
23144: CALL_OW 265
23148: PUSH
23149: LD_VAR 0 2
23153: PPUSH
23154: CALL_OW 262
23158: PUSH
23159: LD_VAR 0 2
23163: PPUSH
23164: CALL_OW 263
23168: PUSH
23169: LD_VAR 0 2
23173: PPUSH
23174: CALL_OW 264
23178: PUSH
23179: LD_VAR 0 2
23183: PPUSH
23184: CALL_OW 248
23188: PUSH
23189: LD_VAR 0 2
23193: PPUSH
23194: CALL_OW 256
23198: PUSH
23199: EMPTY
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: PPUSH
23210: CALL_OW 1
23214: ST_TO_ADDR
23215: GO 22956
23217: POP
23218: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
23219: LD_VAR 0 4
23223: PPUSH
23224: LD_STRING 06_Vehicles
23226: PPUSH
23227: CALL_OW 39
// end ; YouWin ;
23231: CALL_OW 103
// end ; end_of_file
23235: LD_VAR 0 1
23239: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
23240: LD_INT 0
23242: PPUSH
// begin if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
23243: LD_VAR 0 1
23247: PPUSH
23248: CALL_OW 255
23252: PUSH
23253: LD_INT 2
23255: EQUAL
23256: PUSH
23257: LD_OWVAR 52
23261: AND
23262: PUSH
23263: LD_VAR 0 1
23267: PPUSH
23268: CALL_OW 263
23272: PUSH
23273: LD_INT 1
23275: EQUAL
23276: AND
23277: IFFALSE 23332
// begin driver := IsDrivenBy ( vehicle ) ;
23279: LD_ADDR_VAR 0 3
23283: PUSH
23284: LD_VAR 0 1
23288: PPUSH
23289: CALL_OW 311
23293: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
23294: LD_VAR 0 1
23298: PPUSH
23299: LD_INT 211
23301: PPUSH
23302: LD_INT 101
23304: PPUSH
23305: CALL_OW 111
// AddComExitVehicle ( driver ) ;
23309: LD_VAR 0 3
23313: PPUSH
23314: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23318: LD_VAR 0 3
23322: PPUSH
23323: LD_VAR 0 2
23327: PPUSH
23328: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
23332: LD_VAR 0 1
23336: PPUSH
23337: CALL_OW 255
23341: PUSH
23342: LD_INT 3
23344: EQUAL
23345: IFFALSE 23376
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
23347: LD_ADDR_EXP 56
23351: PUSH
23352: LD_EXP 56
23356: PPUSH
23357: LD_EXP 56
23361: PUSH
23362: LD_INT 1
23364: PLUS
23365: PPUSH
23366: LD_VAR 0 1
23370: PPUSH
23371: CALL_OW 1
23375: ST_TO_ADDR
// end ;
23376: PPOPN 3
23378: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
23379: LD_VAR 0 1
23383: PPUSH
23384: CALL_OW 255
23388: PUSH
23389: LD_INT 8
23391: EQUAL
23392: PUSH
23393: LD_VAR 0 1
23397: PPUSH
23398: CALL_OW 266
23402: PUSH
23403: LD_INT 4
23405: EQUAL
23406: AND
23407: IFFALSE 23418
// ComUpgrade ( b ) ;
23409: LD_VAR 0 1
23413: PPUSH
23414: CALL_OW 146
// end ;
23418: PPOPN 1
23420: END
// on UnitDestroyed ( un ) do begin if un = Heike then
23421: LD_VAR 0 1
23425: PUSH
23426: LD_EXP 30
23430: EQUAL
23431: IFFALSE 23440
// YouLost ( Heike ) ;
23433: LD_STRING Heike
23435: PPUSH
23436: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
23440: LD_VAR 0 1
23444: PUSH
23445: LD_INT 22
23447: PUSH
23448: LD_INT 2
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 23
23457: PUSH
23458: LD_INT 2
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PPUSH
23469: CALL_OW 69
23473: IN
23474: IFFALSE 23490
// heikeLoseCounter := heikeLoseCounter + 1 ;
23476: LD_ADDR_EXP 26
23480: PUSH
23481: LD_EXP 26
23485: PUSH
23486: LD_INT 1
23488: PLUS
23489: ST_TO_ADDR
// if un = arDepot then
23490: LD_VAR 0 1
23494: PUSH
23495: LD_EXP 44
23499: EQUAL
23500: IFFALSE 23509
// YouLost ( Base ) ;
23502: LD_STRING Base
23504: PPUSH
23505: CALL_OW 104
// if un = Rolf then
23509: LD_VAR 0 1
23513: PUSH
23514: LD_EXP 43
23518: EQUAL
23519: IFFALSE 23529
// rolfDied := true ;
23521: LD_ADDR_EXP 13
23525: PUSH
23526: LD_INT 1
23528: ST_TO_ADDR
// if un in rolfSquad then
23529: LD_VAR 0 1
23533: PUSH
23534: LD_EXP 47
23538: IN
23539: IFFALSE 23557
// rolfSquad := rolfSquad diff un ;
23541: LD_ADDR_EXP 47
23545: PUSH
23546: LD_EXP 47
23550: PUSH
23551: LD_VAR 0 1
23555: DIFF
23556: ST_TO_ADDR
// if un in omarSquad then
23557: LD_VAR 0 1
23561: PUSH
23562: LD_EXP 48
23566: IN
23567: IFFALSE 23585
// omarSquad := omarSquad diff un ;
23569: LD_ADDR_EXP 48
23573: PUSH
23574: LD_EXP 48
23578: PUSH
23579: LD_VAR 0 1
23583: DIFF
23584: ST_TO_ADDR
// if GetSide ( un ) = 3 then
23585: LD_VAR 0 1
23589: PPUSH
23590: CALL_OW 255
23594: PUSH
23595: LD_INT 3
23597: EQUAL
23598: IFFALSE 23614
// ruLoseCounter := ruLoseCounter + 1 ;
23600: LD_ADDR_EXP 5
23604: PUSH
23605: LD_EXP 5
23609: PUSH
23610: LD_INT 1
23612: PLUS
23613: ST_TO_ADDR
// if un in ruAttackers then
23614: LD_VAR 0 1
23618: PUSH
23619: LD_EXP 57
23623: IN
23624: IFFALSE 23642
// ruAttackers := ruAttackers diff un ;
23626: LD_ADDR_EXP 57
23630: PUSH
23631: LD_EXP 57
23635: PUSH
23636: LD_VAR 0 1
23640: DIFF
23641: ST_TO_ADDR
// end ;
23642: PPOPN 1
23644: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
23645: LD_INT 0
23647: PPUSH
23648: PPUSH
23649: PPUSH
23650: PPUSH
// begin if GetSide ( un ) = 3 and not un in ruAttackers then
23651: LD_VAR 0 1
23655: PPUSH
23656: CALL_OW 255
23660: PUSH
23661: LD_INT 3
23663: EQUAL
23664: PUSH
23665: LD_VAR 0 1
23669: PUSH
23670: LD_EXP 57
23674: IN
23675: NOT
23676: AND
23677: IFFALSE 24173
// begin if not IsInArea ( un , ruMainBase ) then
23679: LD_VAR 0 1
23683: PPUSH
23684: LD_INT 10
23686: PPUSH
23687: CALL_OW 308
23691: NOT
23692: IFFALSE 23706
// ComMoveToArea ( un , ruMainBase ) ;
23694: LD_VAR 0 1
23698: PPUSH
23699: LD_INT 10
23701: PPUSH
23702: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
23706: LD_INT 35
23708: PPUSH
23709: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
23713: LD_VAR 0 1
23717: PPUSH
23718: CALL_OW 302
23722: NOT
23723: PUSH
23724: LD_VAR 0 1
23728: PPUSH
23729: LD_INT 10
23731: PPUSH
23732: CALL_OW 308
23736: OR
23737: IFFALSE 23706
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
23739: LD_ADDR_EXP 55
23743: PUSH
23744: LD_EXP 55
23748: PPUSH
23749: LD_EXP 55
23753: PUSH
23754: LD_INT 1
23756: PLUS
23757: PPUSH
23758: LD_VAR 0 1
23762: PPUSH
23763: CALL_OW 1
23767: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
23768: LD_ADDR_VAR 0 8
23772: PUSH
23773: LD_INT 72
23775: PUSH
23776: LD_INT 12
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: ST_TO_ADDR
// if tmp then
23783: LD_VAR 0 8
23787: IFFALSE 23902
// for i in tmp do
23789: LD_ADDR_VAR 0 5
23793: PUSH
23794: LD_VAR 0 8
23798: PUSH
23799: FOR_IN
23800: IFFALSE 23900
// if UnitsInside ( i ) < 6 then
23802: LD_VAR 0 5
23806: PPUSH
23807: CALL_OW 313
23811: PUSH
23812: LD_INT 6
23814: LESS
23815: IFFALSE 23898
// begin AddComEnterUnit ( un , i ) ;
23817: LD_VAR 0 1
23821: PPUSH
23822: LD_VAR 0 5
23826: PPUSH
23827: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
23831: LD_VAR 0 8
23835: PPUSH
23836: LD_INT 22
23838: PUSH
23839: LD_INT 23
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 1
23848: PPUSH
23849: LD_INT 2
23851: PPUSH
23852: CALL_OW 12
23856: ARRAY
23857: PPUSH
23858: LD_INT 1
23860: PPUSH
23861: LD_INT 1
23863: PPUSH
23864: LD_INT 44
23866: PUSH
23867: LD_INT 46
23869: PUSH
23870: LD_INT 47
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 1
23880: PPUSH
23881: LD_INT 3
23883: PPUSH
23884: CALL_OW 12
23888: ARRAY
23889: PPUSH
23890: CALL_OW 185
// exit ;
23894: POP
23895: POP
23896: GO 24173
// end ;
23898: GO 23799
23900: POP
23901: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23902: LD_ADDR_VAR 0 8
23906: PUSH
23907: LD_INT 10
23909: PPUSH
23910: LD_INT 22
23912: PUSH
23913: LD_INT 3
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 50
23922: PUSH
23923: EMPTY
23924: LIST
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: LD_INT 30
23931: PUSH
23932: LD_INT 4
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 30
23941: PUSH
23942: LD_INT 5
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 30
23951: PUSH
23952: LD_INT 32
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 30
23961: PUSH
23962: LD_INT 31
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: LIST
23980: PPUSH
23981: CALL_OW 70
23985: ST_TO_ADDR
// if not tmp then
23986: LD_VAR 0 8
23990: NOT
23991: IFFALSE 24010
// begin ComMoveXY ( un , 83 , 133 ) ;
23993: LD_VAR 0 1
23997: PPUSH
23998: LD_INT 83
24000: PPUSH
24001: LD_INT 133
24003: PPUSH
24004: CALL_OW 111
// exit ;
24008: GO 24173
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
24010: LD_ADDR_VAR 0 6
24014: PUSH
24015: LD_VAR 0 1
24019: PPUSH
24020: LD_VAR 0 8
24024: PPUSH
24025: LD_INT 1
24027: PPUSH
24028: LD_INT 1
24030: PPUSH
24031: CALL 30695 0 4
24035: PUSH
24036: FOR_IN
24037: IFFALSE 24171
// begin case GetBType ( b ) of b_armoury , b_barracks :
24039: LD_VAR 0 6
24043: PPUSH
24044: CALL_OW 266
24048: PUSH
24049: LD_INT 4
24051: DOUBLE
24052: EQUAL
24053: IFTRUE 24063
24055: LD_INT 5
24057: DOUBLE
24058: EQUAL
24059: IFTRUE 24063
24061: GO 24074
24063: POP
// p := 6 ; b_breastwork , b_bunker :
24064: LD_ADDR_VAR 0 7
24068: PUSH
24069: LD_INT 6
24071: ST_TO_ADDR
24072: GO 24100
24074: LD_INT 31
24076: DOUBLE
24077: EQUAL
24078: IFTRUE 24088
24080: LD_INT 32
24082: DOUBLE
24083: EQUAL
24084: IFTRUE 24088
24086: GO 24099
24088: POP
// p := 1 ; end ;
24089: LD_ADDR_VAR 0 7
24093: PUSH
24094: LD_INT 1
24096: ST_TO_ADDR
24097: GO 24100
24099: POP
// if UnitsInside ( b ) < p then
24100: LD_VAR 0 6
24104: PPUSH
24105: CALL_OW 313
24109: PUSH
24110: LD_VAR 0 7
24114: LESS
24115: IFFALSE 24169
// begin ComEnterUnit ( un , b ) ;
24117: LD_VAR 0 1
24121: PPUSH
24122: LD_VAR 0 6
24126: PPUSH
24127: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
24131: LD_VAR 0 6
24135: PPUSH
24136: CALL_OW 266
24140: PUSH
24141: LD_INT 4
24143: PUSH
24144: LD_INT 5
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: IN
24151: IFFALSE 24165
// AddComChangeProfession ( un , class_soldier ) ;
24153: LD_VAR 0 1
24157: PPUSH
24158: LD_INT 1
24160: PPUSH
24161: CALL_OW 183
// exit ;
24165: POP
24166: POP
24167: GO 24173
// end ; end ;
24169: GO 24036
24171: POP
24172: POP
// end ; end ;
24173: PPOPN 8
24175: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
24176: LD_INT 0
24178: PPUSH
24179: PPUSH
24180: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
24181: LD_VAR 0 2
24185: PPUSH
24186: CALL_OW 255
24190: PUSH
24191: LD_INT 3
24193: EQUAL
24194: PUSH
24195: LD_VAR 0 2
24199: PPUSH
24200: CALL_OW 257
24204: PUSH
24205: LD_INT 1
24207: EQUAL
24208: AND
24209: PUSH
24210: LD_VAR 0 2
24214: PUSH
24215: LD_EXP 55
24219: IN
24220: NOT
24221: AND
24222: IFFALSE 24535
// begin ComMoveToArea ( un , ruMainBase ) ;
24224: LD_VAR 0 2
24228: PPUSH
24229: LD_INT 10
24231: PPUSH
24232: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
24236: LD_INT 35
24238: PPUSH
24239: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
24243: LD_VAR 0 2
24247: PPUSH
24248: CALL_OW 302
24252: NOT
24253: PUSH
24254: LD_VAR 0 2
24258: PPUSH
24259: LD_INT 10
24261: PPUSH
24262: CALL_OW 308
24266: OR
24267: IFFALSE 24236
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
24269: LD_ADDR_EXP 55
24273: PUSH
24274: LD_EXP 55
24278: PPUSH
24279: LD_EXP 55
24283: PUSH
24284: LD_INT 1
24286: PLUS
24287: PPUSH
24288: LD_VAR 0 2
24292: PPUSH
24293: CALL_OW 1
24297: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
24298: LD_ADDR_VAR 0 4
24302: PUSH
24303: LD_INT 10
24305: PPUSH
24306: LD_INT 22
24308: PUSH
24309: LD_INT 3
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 50
24318: PUSH
24319: EMPTY
24320: LIST
24321: PUSH
24322: LD_INT 2
24324: PUSH
24325: LD_INT 30
24327: PUSH
24328: LD_INT 4
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 30
24337: PUSH
24338: LD_INT 5
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 30
24347: PUSH
24348: LD_INT 32
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 30
24357: PUSH
24358: LD_INT 31
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: LIST
24376: PPUSH
24377: CALL_OW 70
24381: ST_TO_ADDR
// if not tmp then
24382: LD_VAR 0 4
24386: NOT
24387: IFFALSE 24406
// begin ComMoveXY ( un , 83 , 133 ) ;
24389: LD_VAR 0 2
24393: PPUSH
24394: LD_INT 83
24396: PPUSH
24397: LD_INT 133
24399: PPUSH
24400: CALL_OW 111
// exit ;
24404: GO 24784
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
24406: LD_ADDR_VAR 0 5
24410: PUSH
24411: LD_VAR 0 2
24415: PPUSH
24416: LD_VAR 0 4
24420: PPUSH
24421: LD_INT 1
24423: PPUSH
24424: LD_INT 1
24426: PPUSH
24427: CALL 30695 0 4
24431: PUSH
24432: FOR_IN
24433: IFFALSE 24533
// begin case GetBType ( b ) of b_armoury , b_barracks :
24435: LD_VAR 0 5
24439: PPUSH
24440: CALL_OW 266
24444: PUSH
24445: LD_INT 4
24447: DOUBLE
24448: EQUAL
24449: IFTRUE 24459
24451: LD_INT 5
24453: DOUBLE
24454: EQUAL
24455: IFTRUE 24459
24457: GO 24470
24459: POP
// p := 6 ; b_breastwork , b_bunker :
24460: LD_ADDR_VAR 0 3
24464: PUSH
24465: LD_INT 6
24467: ST_TO_ADDR
24468: GO 24496
24470: LD_INT 31
24472: DOUBLE
24473: EQUAL
24474: IFTRUE 24484
24476: LD_INT 32
24478: DOUBLE
24479: EQUAL
24480: IFTRUE 24484
24482: GO 24495
24484: POP
// p := 1 ; end ;
24485: LD_ADDR_VAR 0 3
24489: PUSH
24490: LD_INT 1
24492: ST_TO_ADDR
24493: GO 24496
24495: POP
// if UnitsInside ( b ) < p then
24496: LD_VAR 0 5
24500: PPUSH
24501: CALL_OW 313
24505: PUSH
24506: LD_VAR 0 3
24510: LESS
24511: IFFALSE 24531
// begin ComEnterUnit ( un , b ) ;
24513: LD_VAR 0 2
24517: PPUSH
24518: LD_VAR 0 5
24522: PPUSH
24523: CALL_OW 120
// exit ;
24527: POP
24528: POP
24529: GO 24784
// end ; end ;
24531: GO 24432
24533: POP
24534: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
24535: LD_VAR 0 2
24539: PUSH
24540: LD_EXP 55
24544: IN
24545: PUSH
24546: LD_VAR 0 2
24550: PPUSH
24551: CALL_OW 257
24555: PUSH
24556: LD_INT 1
24558: EQUAL
24559: AND
24560: IFFALSE 24784
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
24562: LD_ADDR_VAR 0 4
24566: PUSH
24567: LD_INT 10
24569: PPUSH
24570: LD_INT 22
24572: PUSH
24573: LD_INT 3
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 50
24582: PUSH
24583: EMPTY
24584: LIST
24585: PUSH
24586: LD_INT 2
24588: PUSH
24589: LD_INT 30
24591: PUSH
24592: LD_INT 4
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 30
24601: PUSH
24602: LD_INT 5
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 30
24611: PUSH
24612: LD_INT 32
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 30
24621: PUSH
24622: LD_INT 31
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: LIST
24640: PPUSH
24641: CALL_OW 70
24645: ST_TO_ADDR
// if not tmp then
24646: LD_VAR 0 4
24650: NOT
24651: IFFALSE 24655
// exit ;
24653: GO 24784
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
24655: LD_ADDR_VAR 0 5
24659: PUSH
24660: LD_VAR 0 2
24664: PPUSH
24665: LD_VAR 0 4
24669: PPUSH
24670: LD_INT 1
24672: PPUSH
24673: LD_INT 1
24675: PPUSH
24676: CALL 30695 0 4
24680: PUSH
24681: FOR_IN
24682: IFFALSE 24782
// begin case GetBType ( b ) of b_armoury , b_barracks :
24684: LD_VAR 0 5
24688: PPUSH
24689: CALL_OW 266
24693: PUSH
24694: LD_INT 4
24696: DOUBLE
24697: EQUAL
24698: IFTRUE 24708
24700: LD_INT 5
24702: DOUBLE
24703: EQUAL
24704: IFTRUE 24708
24706: GO 24719
24708: POP
// p := 6 ; b_breastwork , b_bunker :
24709: LD_ADDR_VAR 0 3
24713: PUSH
24714: LD_INT 6
24716: ST_TO_ADDR
24717: GO 24745
24719: LD_INT 31
24721: DOUBLE
24722: EQUAL
24723: IFTRUE 24733
24725: LD_INT 32
24727: DOUBLE
24728: EQUAL
24729: IFTRUE 24733
24731: GO 24744
24733: POP
// p := 1 ; end ;
24734: LD_ADDR_VAR 0 3
24738: PUSH
24739: LD_INT 1
24741: ST_TO_ADDR
24742: GO 24745
24744: POP
// if UnitsInside ( b ) < p then
24745: LD_VAR 0 5
24749: PPUSH
24750: CALL_OW 313
24754: PUSH
24755: LD_VAR 0 3
24759: LESS
24760: IFFALSE 24780
// begin ComEnterUnit ( un , b ) ;
24762: LD_VAR 0 2
24766: PPUSH
24767: LD_VAR 0 5
24771: PPUSH
24772: CALL_OW 120
// exit ;
24776: POP
24777: POP
24778: GO 24784
// end ; end ;
24780: GO 24681
24782: POP
24783: POP
// end ; end ;
24784: PPOPN 5
24786: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
24787: LD_VAR 0 1
24791: PUSH
24792: LD_INT 2
24794: EQUAL
24795: PUSH
24796: LD_VAR 0 2
24800: PUSH
24801: LD_INT 5
24803: PUSH
24804: LD_INT 8
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: IN
24811: AND
24812: IFFALSE 24821
// YouLost ( FriendlyFire ) ;
24814: LD_STRING FriendlyFire
24816: PPUSH
24817: CALL_OW 104
// end ;
24821: PPOPN 2
24823: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
24824: LD_VAR 0 1
24828: PPUSH
24829: CALL_OW 255
24833: PUSH
24834: LD_INT 8
24836: EQUAL
24837: PUSH
24838: LD_VAR 0 1
24842: PPUSH
24843: CALL_OW 266
24847: PUSH
24848: LD_INT 5
24850: EQUAL
24851: AND
24852: IFFALSE 24866
// SetClass ( unit , class_mortar ) ;
24854: LD_VAR 0 2
24858: PPUSH
24859: LD_INT 8
24861: PPUSH
24862: CALL_OW 336
// end ; end_of_file
24866: PPOPN 2
24868: END
// every 0 0$50 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 , 150 ] [ Difficulty ] do
24869: LD_INT 6
24871: PPUSH
24872: LD_INT 1
24874: PPUSH
24875: CALL_OW 287
24879: PUSH
24880: LD_INT 300
24882: PUSH
24883: LD_INT 250
24885: PUSH
24886: LD_INT 200
24888: PUSH
24889: LD_INT 150
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: PUSH
24898: LD_OWVAR 67
24902: ARRAY
24903: LESS
24904: IFFALSE 24931
24906: GO 24908
24908: DISABLE
// begin enable ;
24909: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
24910: LD_INT 1
24912: PPUSH
24913: LD_INT 5
24915: PPUSH
24916: CALL_OW 12
24920: PPUSH
24921: LD_INT 6
24923: PPUSH
24924: LD_INT 1
24926: PPUSH
24927: CALL_OW 55
// end ; end_of_file
24931: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
24932: LD_EXP 18
24936: PUSH
24937: LD_EXP 20
24941: AND
24942: PUSH
24943: LD_EXP 17
24947: PUSH
24948: LD_EXP 19
24952: AND
24953: OR
24954: IFFALSE 25273
24956: GO 24958
24958: DISABLE
// begin enable ;
24959: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
24960: LD_EXP 18
24964: PUSH
24965: LD_EXP 20
24969: AND
24970: PUSH
24971: LD_EXP 17
24975: PUSH
24976: LD_EXP 19
24980: AND
24981: AND
24982: IFFALSE 25119
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
24984: LD_ADDR_OWVAR 47
24988: PUSH
24989: LD_STRING #X106-1a
24991: PUSH
24992: LD_EXP 21
24996: PUSH
24997: LD_INT 16
24999: PPUSH
25000: LD_INT 22
25002: PUSH
25003: LD_INT 2
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 21
25012: PUSH
25013: LD_INT 2
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 33
25022: PUSH
25023: LD_INT 1
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 58
25032: PUSH
25033: EMPTY
25034: LIST
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: PPUSH
25042: CALL_OW 70
25046: MINUS
25047: PPUSH
25048: CALL 64189 0 1
25052: PUSH
25053: LD_STRING #X106-3a
25055: PUSH
25056: LD_EXP 20
25060: PUSH
25061: LD_STRING #X106-1
25063: PUSH
25064: LD_EXP 47
25068: PUSH
25069: LD_INT 0
25071: PLUS
25072: PUSH
25073: LD_EXP 47
25077: PPUSH
25078: LD_INT 55
25080: PUSH
25081: EMPTY
25082: LIST
25083: PPUSH
25084: CALL_OW 72
25088: PUSH
25089: LD_INT 0
25091: PLUS
25092: MINUS
25093: PPUSH
25094: CALL 64189 0 1
25098: PUSH
25099: LD_STRING #X106-3
25101: PUSH
25102: LD_EXP 19
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: ST_TO_ADDR
// end else
25117: GO 25273
// if omarWantVehicles and omarWaitingForVehiclesTimer then
25119: LD_EXP 18
25123: PUSH
25124: LD_EXP 20
25128: AND
25129: IFFALSE 25216
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
25131: LD_ADDR_OWVAR 47
25135: PUSH
25136: LD_STRING #X106-1a
25138: PUSH
25139: LD_EXP 21
25143: PUSH
25144: LD_INT 16
25146: PPUSH
25147: LD_INT 22
25149: PUSH
25150: LD_INT 2
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 21
25159: PUSH
25160: LD_INT 2
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 33
25169: PUSH
25170: LD_INT 1
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 58
25179: PUSH
25180: EMPTY
25181: LIST
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: PPUSH
25189: CALL_OW 70
25193: MINUS
25194: PPUSH
25195: CALL 64189 0 1
25199: PUSH
25200: LD_STRING #X106-3a
25202: PUSH
25203: LD_EXP 20
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: ST_TO_ADDR
// end else
25214: GO 25273
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
25216: LD_ADDR_OWVAR 47
25220: PUSH
25221: LD_STRING #X106-1
25223: PUSH
25224: LD_EXP 47
25228: PUSH
25229: LD_INT 0
25231: PLUS
25232: PUSH
25233: LD_EXP 47
25237: PPUSH
25238: LD_INT 55
25240: PUSH
25241: EMPTY
25242: LIST
25243: PPUSH
25244: CALL_OW 72
25248: PUSH
25249: LD_INT 0
25251: PLUS
25252: MINUS
25253: PPUSH
25254: CALL 64189 0 1
25258: PUSH
25259: LD_STRING #X106-3
25261: PUSH
25262: LD_EXP 19
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: ST_TO_ADDR
// end ; end ; end_of_file
25273: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25274: LD_INT 0
25276: PPUSH
25277: PPUSH
// if exist_mode then
25278: LD_VAR 0 2
25282: IFFALSE 25307
// unit := CreateCharacter ( prefix & ident ) else
25284: LD_ADDR_VAR 0 5
25288: PUSH
25289: LD_VAR 0 3
25293: PUSH
25294: LD_VAR 0 1
25298: STR
25299: PPUSH
25300: CALL_OW 34
25304: ST_TO_ADDR
25305: GO 25322
// unit := NewCharacter ( ident ) ;
25307: LD_ADDR_VAR 0 5
25311: PUSH
25312: LD_VAR 0 1
25316: PPUSH
25317: CALL_OW 25
25321: ST_TO_ADDR
// result := unit ;
25322: LD_ADDR_VAR 0 4
25326: PUSH
25327: LD_VAR 0 5
25331: ST_TO_ADDR
// end ;
25332: LD_VAR 0 4
25336: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25337: LD_INT 0
25339: PPUSH
25340: PPUSH
// if not side or not nation then
25341: LD_VAR 0 1
25345: NOT
25346: PUSH
25347: LD_VAR 0 2
25351: NOT
25352: OR
25353: IFFALSE 25357
// exit ;
25355: GO 26125
// case nation of nation_american :
25357: LD_VAR 0 2
25361: PUSH
25362: LD_INT 1
25364: DOUBLE
25365: EQUAL
25366: IFTRUE 25370
25368: GO 25584
25370: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25371: LD_ADDR_VAR 0 4
25375: PUSH
25376: LD_INT 35
25378: PUSH
25379: LD_INT 45
25381: PUSH
25382: LD_INT 46
25384: PUSH
25385: LD_INT 47
25387: PUSH
25388: LD_INT 82
25390: PUSH
25391: LD_INT 83
25393: PUSH
25394: LD_INT 84
25396: PUSH
25397: LD_INT 85
25399: PUSH
25400: LD_INT 86
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: LD_INT 2
25408: PUSH
25409: LD_INT 6
25411: PUSH
25412: LD_INT 15
25414: PUSH
25415: LD_INT 16
25417: PUSH
25418: LD_INT 7
25420: PUSH
25421: LD_INT 12
25423: PUSH
25424: LD_INT 13
25426: PUSH
25427: LD_INT 10
25429: PUSH
25430: LD_INT 14
25432: PUSH
25433: LD_INT 20
25435: PUSH
25436: LD_INT 21
25438: PUSH
25439: LD_INT 22
25441: PUSH
25442: LD_INT 25
25444: PUSH
25445: LD_INT 32
25447: PUSH
25448: LD_INT 27
25450: PUSH
25451: LD_INT 36
25453: PUSH
25454: LD_INT 69
25456: PUSH
25457: LD_INT 39
25459: PUSH
25460: LD_INT 34
25462: PUSH
25463: LD_INT 40
25465: PUSH
25466: LD_INT 48
25468: PUSH
25469: LD_INT 49
25471: PUSH
25472: LD_INT 50
25474: PUSH
25475: LD_INT 51
25477: PUSH
25478: LD_INT 52
25480: PUSH
25481: LD_INT 53
25483: PUSH
25484: LD_INT 54
25486: PUSH
25487: LD_INT 55
25489: PUSH
25490: LD_INT 56
25492: PUSH
25493: LD_INT 57
25495: PUSH
25496: LD_INT 58
25498: PUSH
25499: LD_INT 59
25501: PUSH
25502: LD_INT 60
25504: PUSH
25505: LD_INT 61
25507: PUSH
25508: LD_INT 62
25510: PUSH
25511: LD_INT 80
25513: PUSH
25514: LD_INT 82
25516: PUSH
25517: LD_INT 83
25519: PUSH
25520: LD_INT 84
25522: PUSH
25523: LD_INT 85
25525: PUSH
25526: LD_INT 86
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: ST_TO_ADDR
25582: GO 26049
25584: LD_INT 2
25586: DOUBLE
25587: EQUAL
25588: IFTRUE 25592
25590: GO 25818
25592: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25593: LD_ADDR_VAR 0 4
25597: PUSH
25598: LD_INT 35
25600: PUSH
25601: LD_INT 45
25603: PUSH
25604: LD_INT 46
25606: PUSH
25607: LD_INT 47
25609: PUSH
25610: LD_INT 82
25612: PUSH
25613: LD_INT 83
25615: PUSH
25616: LD_INT 84
25618: PUSH
25619: LD_INT 85
25621: PUSH
25622: LD_INT 87
25624: PUSH
25625: LD_INT 70
25627: PUSH
25628: LD_INT 1
25630: PUSH
25631: LD_INT 11
25633: PUSH
25634: LD_INT 3
25636: PUSH
25637: LD_INT 4
25639: PUSH
25640: LD_INT 5
25642: PUSH
25643: LD_INT 6
25645: PUSH
25646: LD_INT 15
25648: PUSH
25649: LD_INT 18
25651: PUSH
25652: LD_INT 7
25654: PUSH
25655: LD_INT 17
25657: PUSH
25658: LD_INT 8
25660: PUSH
25661: LD_INT 20
25663: PUSH
25664: LD_INT 21
25666: PUSH
25667: LD_INT 22
25669: PUSH
25670: LD_INT 72
25672: PUSH
25673: LD_INT 26
25675: PUSH
25676: LD_INT 69
25678: PUSH
25679: LD_INT 39
25681: PUSH
25682: LD_INT 40
25684: PUSH
25685: LD_INT 41
25687: PUSH
25688: LD_INT 42
25690: PUSH
25691: LD_INT 43
25693: PUSH
25694: LD_INT 48
25696: PUSH
25697: LD_INT 49
25699: PUSH
25700: LD_INT 50
25702: PUSH
25703: LD_INT 51
25705: PUSH
25706: LD_INT 52
25708: PUSH
25709: LD_INT 53
25711: PUSH
25712: LD_INT 54
25714: PUSH
25715: LD_INT 55
25717: PUSH
25718: LD_INT 56
25720: PUSH
25721: LD_INT 60
25723: PUSH
25724: LD_INT 61
25726: PUSH
25727: LD_INT 62
25729: PUSH
25730: LD_INT 66
25732: PUSH
25733: LD_INT 67
25735: PUSH
25736: LD_INT 68
25738: PUSH
25739: LD_INT 81
25741: PUSH
25742: LD_INT 82
25744: PUSH
25745: LD_INT 83
25747: PUSH
25748: LD_INT 84
25750: PUSH
25751: LD_INT 85
25753: PUSH
25754: LD_INT 87
25756: PUSH
25757: LD_INT 88
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: ST_TO_ADDR
25816: GO 26049
25818: LD_INT 3
25820: DOUBLE
25821: EQUAL
25822: IFTRUE 25826
25824: GO 26048
25826: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25827: LD_ADDR_VAR 0 4
25831: PUSH
25832: LD_INT 46
25834: PUSH
25835: LD_INT 47
25837: PUSH
25838: LD_INT 1
25840: PUSH
25841: LD_INT 2
25843: PUSH
25844: LD_INT 82
25846: PUSH
25847: LD_INT 83
25849: PUSH
25850: LD_INT 84
25852: PUSH
25853: LD_INT 85
25855: PUSH
25856: LD_INT 86
25858: PUSH
25859: LD_INT 11
25861: PUSH
25862: LD_INT 9
25864: PUSH
25865: LD_INT 20
25867: PUSH
25868: LD_INT 19
25870: PUSH
25871: LD_INT 21
25873: PUSH
25874: LD_INT 24
25876: PUSH
25877: LD_INT 22
25879: PUSH
25880: LD_INT 25
25882: PUSH
25883: LD_INT 28
25885: PUSH
25886: LD_INT 29
25888: PUSH
25889: LD_INT 30
25891: PUSH
25892: LD_INT 31
25894: PUSH
25895: LD_INT 37
25897: PUSH
25898: LD_INT 38
25900: PUSH
25901: LD_INT 32
25903: PUSH
25904: LD_INT 27
25906: PUSH
25907: LD_INT 33
25909: PUSH
25910: LD_INT 69
25912: PUSH
25913: LD_INT 39
25915: PUSH
25916: LD_INT 34
25918: PUSH
25919: LD_INT 40
25921: PUSH
25922: LD_INT 71
25924: PUSH
25925: LD_INT 23
25927: PUSH
25928: LD_INT 44
25930: PUSH
25931: LD_INT 48
25933: PUSH
25934: LD_INT 49
25936: PUSH
25937: LD_INT 50
25939: PUSH
25940: LD_INT 51
25942: PUSH
25943: LD_INT 52
25945: PUSH
25946: LD_INT 53
25948: PUSH
25949: LD_INT 54
25951: PUSH
25952: LD_INT 55
25954: PUSH
25955: LD_INT 56
25957: PUSH
25958: LD_INT 57
25960: PUSH
25961: LD_INT 58
25963: PUSH
25964: LD_INT 59
25966: PUSH
25967: LD_INT 63
25969: PUSH
25970: LD_INT 64
25972: PUSH
25973: LD_INT 65
25975: PUSH
25976: LD_INT 82
25978: PUSH
25979: LD_INT 83
25981: PUSH
25982: LD_INT 84
25984: PUSH
25985: LD_INT 85
25987: PUSH
25988: LD_INT 86
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: ST_TO_ADDR
26046: GO 26049
26048: POP
// if state > - 1 and state < 3 then
26049: LD_VAR 0 3
26053: PUSH
26054: LD_INT 1
26056: NEG
26057: GREATER
26058: PUSH
26059: LD_VAR 0 3
26063: PUSH
26064: LD_INT 3
26066: LESS
26067: AND
26068: IFFALSE 26125
// for i in result do
26070: LD_ADDR_VAR 0 5
26074: PUSH
26075: LD_VAR 0 4
26079: PUSH
26080: FOR_IN
26081: IFFALSE 26123
// if GetTech ( i , side ) <> state then
26083: LD_VAR 0 5
26087: PPUSH
26088: LD_VAR 0 1
26092: PPUSH
26093: CALL_OW 321
26097: PUSH
26098: LD_VAR 0 3
26102: NONEQUAL
26103: IFFALSE 26121
// result := result diff i ;
26105: LD_ADDR_VAR 0 4
26109: PUSH
26110: LD_VAR 0 4
26114: PUSH
26115: LD_VAR 0 5
26119: DIFF
26120: ST_TO_ADDR
26121: GO 26080
26123: POP
26124: POP
// end ;
26125: LD_VAR 0 4
26129: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26130: LD_INT 0
26132: PPUSH
26133: PPUSH
26134: PPUSH
// result := true ;
26135: LD_ADDR_VAR 0 3
26139: PUSH
26140: LD_INT 1
26142: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26143: LD_ADDR_VAR 0 5
26147: PUSH
26148: LD_VAR 0 2
26152: PPUSH
26153: CALL_OW 480
26157: ST_TO_ADDR
// if not tmp then
26158: LD_VAR 0 5
26162: NOT
26163: IFFALSE 26167
// exit ;
26165: GO 26216
// for i in tmp do
26167: LD_ADDR_VAR 0 4
26171: PUSH
26172: LD_VAR 0 5
26176: PUSH
26177: FOR_IN
26178: IFFALSE 26214
// if GetTech ( i , side ) <> state_researched then
26180: LD_VAR 0 4
26184: PPUSH
26185: LD_VAR 0 1
26189: PPUSH
26190: CALL_OW 321
26194: PUSH
26195: LD_INT 2
26197: NONEQUAL
26198: IFFALSE 26212
// begin result := false ;
26200: LD_ADDR_VAR 0 3
26204: PUSH
26205: LD_INT 0
26207: ST_TO_ADDR
// exit ;
26208: POP
26209: POP
26210: GO 26216
// end ;
26212: GO 26177
26214: POP
26215: POP
// end ;
26216: LD_VAR 0 3
26220: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26221: LD_INT 0
26223: PPUSH
26224: PPUSH
26225: PPUSH
26226: PPUSH
26227: PPUSH
26228: PPUSH
26229: PPUSH
26230: PPUSH
26231: PPUSH
26232: PPUSH
26233: PPUSH
26234: PPUSH
26235: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26236: LD_VAR 0 1
26240: NOT
26241: PUSH
26242: LD_VAR 0 1
26246: PPUSH
26247: CALL_OW 257
26251: PUSH
26252: LD_INT 9
26254: NONEQUAL
26255: OR
26256: IFFALSE 26260
// exit ;
26258: GO 26833
// side := GetSide ( unit ) ;
26260: LD_ADDR_VAR 0 9
26264: PUSH
26265: LD_VAR 0 1
26269: PPUSH
26270: CALL_OW 255
26274: ST_TO_ADDR
// tech_space := tech_spacanom ;
26275: LD_ADDR_VAR 0 12
26279: PUSH
26280: LD_INT 29
26282: ST_TO_ADDR
// tech_time := tech_taurad ;
26283: LD_ADDR_VAR 0 13
26287: PUSH
26288: LD_INT 28
26290: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26291: LD_ADDR_VAR 0 11
26295: PUSH
26296: LD_VAR 0 1
26300: PPUSH
26301: CALL_OW 310
26305: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26306: LD_VAR 0 11
26310: PPUSH
26311: CALL_OW 247
26315: PUSH
26316: LD_INT 2
26318: EQUAL
26319: IFFALSE 26323
// exit ;
26321: GO 26833
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26323: LD_ADDR_VAR 0 8
26327: PUSH
26328: LD_INT 81
26330: PUSH
26331: LD_VAR 0 9
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 3
26342: PUSH
26343: LD_INT 21
26345: PUSH
26346: LD_INT 3
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PPUSH
26361: CALL_OW 69
26365: ST_TO_ADDR
// if not tmp then
26366: LD_VAR 0 8
26370: NOT
26371: IFFALSE 26375
// exit ;
26373: GO 26833
// if in_unit then
26375: LD_VAR 0 11
26379: IFFALSE 26403
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26381: LD_ADDR_VAR 0 10
26385: PUSH
26386: LD_VAR 0 8
26390: PPUSH
26391: LD_VAR 0 11
26395: PPUSH
26396: CALL_OW 74
26400: ST_TO_ADDR
26401: GO 26423
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26403: LD_ADDR_VAR 0 10
26407: PUSH
26408: LD_VAR 0 8
26412: PPUSH
26413: LD_VAR 0 1
26417: PPUSH
26418: CALL_OW 74
26422: ST_TO_ADDR
// if not enemy then
26423: LD_VAR 0 10
26427: NOT
26428: IFFALSE 26432
// exit ;
26430: GO 26833
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26432: LD_VAR 0 11
26436: PUSH
26437: LD_VAR 0 11
26441: PPUSH
26442: LD_VAR 0 10
26446: PPUSH
26447: CALL_OW 296
26451: PUSH
26452: LD_INT 13
26454: GREATER
26455: AND
26456: PUSH
26457: LD_VAR 0 1
26461: PPUSH
26462: LD_VAR 0 10
26466: PPUSH
26467: CALL_OW 296
26471: PUSH
26472: LD_INT 12
26474: GREATER
26475: OR
26476: IFFALSE 26480
// exit ;
26478: GO 26833
// missile := [ 1 ] ;
26480: LD_ADDR_VAR 0 14
26484: PUSH
26485: LD_INT 1
26487: PUSH
26488: EMPTY
26489: LIST
26490: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26491: LD_VAR 0 9
26495: PPUSH
26496: LD_VAR 0 12
26500: PPUSH
26501: CALL_OW 325
26505: IFFALSE 26534
// missile := Insert ( missile , missile + 1 , 2 ) ;
26507: LD_ADDR_VAR 0 14
26511: PUSH
26512: LD_VAR 0 14
26516: PPUSH
26517: LD_VAR 0 14
26521: PUSH
26522: LD_INT 1
26524: PLUS
26525: PPUSH
26526: LD_INT 2
26528: PPUSH
26529: CALL_OW 2
26533: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26534: LD_VAR 0 9
26538: PPUSH
26539: LD_VAR 0 13
26543: PPUSH
26544: CALL_OW 325
26548: PUSH
26549: LD_VAR 0 10
26553: PPUSH
26554: CALL_OW 255
26558: PPUSH
26559: LD_VAR 0 13
26563: PPUSH
26564: CALL_OW 325
26568: NOT
26569: AND
26570: IFFALSE 26599
// missile := Insert ( missile , missile + 1 , 3 ) ;
26572: LD_ADDR_VAR 0 14
26576: PUSH
26577: LD_VAR 0 14
26581: PPUSH
26582: LD_VAR 0 14
26586: PUSH
26587: LD_INT 1
26589: PLUS
26590: PPUSH
26591: LD_INT 3
26593: PPUSH
26594: CALL_OW 2
26598: ST_TO_ADDR
// if missile < 2 then
26599: LD_VAR 0 14
26603: PUSH
26604: LD_INT 2
26606: LESS
26607: IFFALSE 26611
// exit ;
26609: GO 26833
// x := GetX ( enemy ) ;
26611: LD_ADDR_VAR 0 4
26615: PUSH
26616: LD_VAR 0 10
26620: PPUSH
26621: CALL_OW 250
26625: ST_TO_ADDR
// y := GetY ( enemy ) ;
26626: LD_ADDR_VAR 0 5
26630: PUSH
26631: LD_VAR 0 10
26635: PPUSH
26636: CALL_OW 251
26640: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26641: LD_ADDR_VAR 0 6
26645: PUSH
26646: LD_VAR 0 4
26650: PUSH
26651: LD_INT 1
26653: NEG
26654: PPUSH
26655: LD_INT 1
26657: PPUSH
26658: CALL_OW 12
26662: PLUS
26663: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26664: LD_ADDR_VAR 0 7
26668: PUSH
26669: LD_VAR 0 5
26673: PUSH
26674: LD_INT 1
26676: NEG
26677: PPUSH
26678: LD_INT 1
26680: PPUSH
26681: CALL_OW 12
26685: PLUS
26686: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26687: LD_VAR 0 6
26691: PPUSH
26692: LD_VAR 0 7
26696: PPUSH
26697: CALL_OW 488
26701: NOT
26702: IFFALSE 26724
// begin _x := x ;
26704: LD_ADDR_VAR 0 6
26708: PUSH
26709: LD_VAR 0 4
26713: ST_TO_ADDR
// _y := y ;
26714: LD_ADDR_VAR 0 7
26718: PUSH
26719: LD_VAR 0 5
26723: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26724: LD_ADDR_VAR 0 3
26728: PUSH
26729: LD_INT 1
26731: PPUSH
26732: LD_VAR 0 14
26736: PPUSH
26737: CALL_OW 12
26741: ST_TO_ADDR
// case i of 1 :
26742: LD_VAR 0 3
26746: PUSH
26747: LD_INT 1
26749: DOUBLE
26750: EQUAL
26751: IFTRUE 26755
26753: GO 26772
26755: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26756: LD_VAR 0 1
26760: PPUSH
26761: LD_VAR 0 10
26765: PPUSH
26766: CALL_OW 115
26770: GO 26833
26772: LD_INT 2
26774: DOUBLE
26775: EQUAL
26776: IFTRUE 26780
26778: GO 26802
26780: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26781: LD_VAR 0 1
26785: PPUSH
26786: LD_VAR 0 6
26790: PPUSH
26791: LD_VAR 0 7
26795: PPUSH
26796: CALL_OW 153
26800: GO 26833
26802: LD_INT 3
26804: DOUBLE
26805: EQUAL
26806: IFTRUE 26810
26808: GO 26832
26810: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26811: LD_VAR 0 1
26815: PPUSH
26816: LD_VAR 0 6
26820: PPUSH
26821: LD_VAR 0 7
26825: PPUSH
26826: CALL_OW 154
26830: GO 26833
26832: POP
// end ;
26833: LD_VAR 0 2
26837: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26838: LD_INT 0
26840: PPUSH
26841: PPUSH
26842: PPUSH
26843: PPUSH
26844: PPUSH
26845: PPUSH
// if not unit or not building then
26846: LD_VAR 0 1
26850: NOT
26851: PUSH
26852: LD_VAR 0 2
26856: NOT
26857: OR
26858: IFFALSE 26862
// exit ;
26860: GO 27020
// x := GetX ( building ) ;
26862: LD_ADDR_VAR 0 5
26866: PUSH
26867: LD_VAR 0 2
26871: PPUSH
26872: CALL_OW 250
26876: ST_TO_ADDR
// y := GetY ( building ) ;
26877: LD_ADDR_VAR 0 6
26881: PUSH
26882: LD_VAR 0 2
26886: PPUSH
26887: CALL_OW 251
26891: ST_TO_ADDR
// for i = 0 to 5 do
26892: LD_ADDR_VAR 0 4
26896: PUSH
26897: DOUBLE
26898: LD_INT 0
26900: DEC
26901: ST_TO_ADDR
26902: LD_INT 5
26904: PUSH
26905: FOR_TO
26906: IFFALSE 27018
// begin _x := ShiftX ( x , i , 3 ) ;
26908: LD_ADDR_VAR 0 7
26912: PUSH
26913: LD_VAR 0 5
26917: PPUSH
26918: LD_VAR 0 4
26922: PPUSH
26923: LD_INT 3
26925: PPUSH
26926: CALL_OW 272
26930: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26931: LD_ADDR_VAR 0 8
26935: PUSH
26936: LD_VAR 0 6
26940: PPUSH
26941: LD_VAR 0 4
26945: PPUSH
26946: LD_INT 3
26948: PPUSH
26949: CALL_OW 273
26953: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26954: LD_VAR 0 7
26958: PPUSH
26959: LD_VAR 0 8
26963: PPUSH
26964: CALL_OW 488
26968: NOT
26969: IFFALSE 26973
// continue ;
26971: GO 26905
// if HexInfo ( _x , _y ) = 0 then
26973: LD_VAR 0 7
26977: PPUSH
26978: LD_VAR 0 8
26982: PPUSH
26983: CALL_OW 428
26987: PUSH
26988: LD_INT 0
26990: EQUAL
26991: IFFALSE 27016
// begin ComMoveXY ( unit , _x , _y ) ;
26993: LD_VAR 0 1
26997: PPUSH
26998: LD_VAR 0 7
27002: PPUSH
27003: LD_VAR 0 8
27007: PPUSH
27008: CALL_OW 111
// exit ;
27012: POP
27013: POP
27014: GO 27020
// end ; end ;
27016: GO 26905
27018: POP
27019: POP
// end ;
27020: LD_VAR 0 3
27024: RET
// export function ScanBase ( side , base_area ) ; begin
27025: LD_INT 0
27027: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27028: LD_ADDR_VAR 0 3
27032: PUSH
27033: LD_VAR 0 2
27037: PPUSH
27038: LD_INT 81
27040: PUSH
27041: LD_VAR 0 1
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PPUSH
27050: CALL_OW 70
27054: ST_TO_ADDR
// end ;
27055: LD_VAR 0 3
27059: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27060: LD_INT 0
27062: PPUSH
27063: PPUSH
27064: PPUSH
27065: PPUSH
// result := false ;
27066: LD_ADDR_VAR 0 2
27070: PUSH
27071: LD_INT 0
27073: ST_TO_ADDR
// side := GetSide ( unit ) ;
27074: LD_ADDR_VAR 0 3
27078: PUSH
27079: LD_VAR 0 1
27083: PPUSH
27084: CALL_OW 255
27088: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27089: LD_ADDR_VAR 0 4
27093: PUSH
27094: LD_VAR 0 1
27098: PPUSH
27099: CALL_OW 248
27103: ST_TO_ADDR
// case nat of 1 :
27104: LD_VAR 0 4
27108: PUSH
27109: LD_INT 1
27111: DOUBLE
27112: EQUAL
27113: IFTRUE 27117
27115: GO 27128
27117: POP
// tech := tech_lassight ; 2 :
27118: LD_ADDR_VAR 0 5
27122: PUSH
27123: LD_INT 12
27125: ST_TO_ADDR
27126: GO 27167
27128: LD_INT 2
27130: DOUBLE
27131: EQUAL
27132: IFTRUE 27136
27134: GO 27147
27136: POP
// tech := tech_mortar ; 3 :
27137: LD_ADDR_VAR 0 5
27141: PUSH
27142: LD_INT 41
27144: ST_TO_ADDR
27145: GO 27167
27147: LD_INT 3
27149: DOUBLE
27150: EQUAL
27151: IFTRUE 27155
27153: GO 27166
27155: POP
// tech := tech_bazooka ; end ;
27156: LD_ADDR_VAR 0 5
27160: PUSH
27161: LD_INT 44
27163: ST_TO_ADDR
27164: GO 27167
27166: POP
// if Researched ( side , tech ) then
27167: LD_VAR 0 3
27171: PPUSH
27172: LD_VAR 0 5
27176: PPUSH
27177: CALL_OW 325
27181: IFFALSE 27208
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27183: LD_ADDR_VAR 0 2
27187: PUSH
27188: LD_INT 5
27190: PUSH
27191: LD_INT 8
27193: PUSH
27194: LD_INT 9
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: LIST
27201: PUSH
27202: LD_VAR 0 4
27206: ARRAY
27207: ST_TO_ADDR
// end ;
27208: LD_VAR 0 2
27212: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27213: LD_INT 0
27215: PPUSH
27216: PPUSH
27217: PPUSH
// if not mines then
27218: LD_VAR 0 2
27222: NOT
27223: IFFALSE 27227
// exit ;
27225: GO 27371
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27227: LD_ADDR_VAR 0 5
27231: PUSH
27232: LD_INT 81
27234: PUSH
27235: LD_VAR 0 1
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 3
27246: PUSH
27247: LD_INT 21
27249: PUSH
27250: LD_INT 3
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PPUSH
27265: CALL_OW 69
27269: ST_TO_ADDR
// for i in mines do
27270: LD_ADDR_VAR 0 4
27274: PUSH
27275: LD_VAR 0 2
27279: PUSH
27280: FOR_IN
27281: IFFALSE 27369
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27283: LD_VAR 0 4
27287: PUSH
27288: LD_INT 1
27290: ARRAY
27291: PPUSH
27292: LD_VAR 0 4
27296: PUSH
27297: LD_INT 2
27299: ARRAY
27300: PPUSH
27301: CALL_OW 458
27305: NOT
27306: IFFALSE 27310
// continue ;
27308: GO 27280
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27310: LD_VAR 0 4
27314: PUSH
27315: LD_INT 1
27317: ARRAY
27318: PPUSH
27319: LD_VAR 0 4
27323: PUSH
27324: LD_INT 2
27326: ARRAY
27327: PPUSH
27328: CALL_OW 428
27332: PUSH
27333: LD_VAR 0 5
27337: IN
27338: IFFALSE 27367
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27340: LD_VAR 0 4
27344: PUSH
27345: LD_INT 1
27347: ARRAY
27348: PPUSH
27349: LD_VAR 0 4
27353: PUSH
27354: LD_INT 2
27356: ARRAY
27357: PPUSH
27358: LD_VAR 0 1
27362: PPUSH
27363: CALL_OW 456
// end ;
27367: GO 27280
27369: POP
27370: POP
// end ;
27371: LD_VAR 0 3
27375: RET
// export function Count ( array ) ; var i ; begin
27376: LD_INT 0
27378: PPUSH
27379: PPUSH
// result := 0 ;
27380: LD_ADDR_VAR 0 2
27384: PUSH
27385: LD_INT 0
27387: ST_TO_ADDR
// for i in array do
27388: LD_ADDR_VAR 0 3
27392: PUSH
27393: LD_VAR 0 1
27397: PUSH
27398: FOR_IN
27399: IFFALSE 27423
// if i then
27401: LD_VAR 0 3
27405: IFFALSE 27421
// result := result + 1 ;
27407: LD_ADDR_VAR 0 2
27411: PUSH
27412: LD_VAR 0 2
27416: PUSH
27417: LD_INT 1
27419: PLUS
27420: ST_TO_ADDR
27421: GO 27398
27423: POP
27424: POP
// end ;
27425: LD_VAR 0 2
27429: RET
// export function IsEmpty ( building ) ; begin
27430: LD_INT 0
27432: PPUSH
// if not building then
27433: LD_VAR 0 1
27437: NOT
27438: IFFALSE 27442
// exit ;
27440: GO 27485
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27442: LD_ADDR_VAR 0 2
27446: PUSH
27447: LD_VAR 0 1
27451: PUSH
27452: LD_INT 22
27454: PUSH
27455: LD_VAR 0 1
27459: PPUSH
27460: CALL_OW 255
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 58
27471: PUSH
27472: EMPTY
27473: LIST
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PPUSH
27479: CALL_OW 69
27483: IN
27484: ST_TO_ADDR
// end ;
27485: LD_VAR 0 2
27489: RET
// export function IsNotFull ( building ) ; begin
27490: LD_INT 0
27492: PPUSH
// if not building then
27493: LD_VAR 0 1
27497: NOT
27498: IFFALSE 27502
// exit ;
27500: GO 27521
// result := UnitsInside ( building ) < 6 ;
27502: LD_ADDR_VAR 0 2
27506: PUSH
27507: LD_VAR 0 1
27511: PPUSH
27512: CALL_OW 313
27516: PUSH
27517: LD_INT 6
27519: LESS
27520: ST_TO_ADDR
// end ;
27521: LD_VAR 0 2
27525: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27526: LD_INT 0
27528: PPUSH
27529: PPUSH
27530: PPUSH
27531: PPUSH
// tmp := [ ] ;
27532: LD_ADDR_VAR 0 3
27536: PUSH
27537: EMPTY
27538: ST_TO_ADDR
// list := [ ] ;
27539: LD_ADDR_VAR 0 5
27543: PUSH
27544: EMPTY
27545: ST_TO_ADDR
// for i = 16 to 25 do
27546: LD_ADDR_VAR 0 4
27550: PUSH
27551: DOUBLE
27552: LD_INT 16
27554: DEC
27555: ST_TO_ADDR
27556: LD_INT 25
27558: PUSH
27559: FOR_TO
27560: IFFALSE 27633
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27562: LD_ADDR_VAR 0 3
27566: PUSH
27567: LD_VAR 0 3
27571: PUSH
27572: LD_INT 22
27574: PUSH
27575: LD_VAR 0 1
27579: PPUSH
27580: CALL_OW 255
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 91
27591: PUSH
27592: LD_VAR 0 1
27596: PUSH
27597: LD_INT 6
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 30
27607: PUSH
27608: LD_VAR 0 4
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: LIST
27621: PUSH
27622: EMPTY
27623: LIST
27624: PPUSH
27625: CALL_OW 69
27629: ADD
27630: ST_TO_ADDR
27631: GO 27559
27633: POP
27634: POP
// for i = 1 to tmp do
27635: LD_ADDR_VAR 0 4
27639: PUSH
27640: DOUBLE
27641: LD_INT 1
27643: DEC
27644: ST_TO_ADDR
27645: LD_VAR 0 3
27649: PUSH
27650: FOR_TO
27651: IFFALSE 27739
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27653: LD_ADDR_VAR 0 5
27657: PUSH
27658: LD_VAR 0 5
27662: PUSH
27663: LD_VAR 0 3
27667: PUSH
27668: LD_VAR 0 4
27672: ARRAY
27673: PPUSH
27674: CALL_OW 266
27678: PUSH
27679: LD_VAR 0 3
27683: PUSH
27684: LD_VAR 0 4
27688: ARRAY
27689: PPUSH
27690: CALL_OW 250
27694: PUSH
27695: LD_VAR 0 3
27699: PUSH
27700: LD_VAR 0 4
27704: ARRAY
27705: PPUSH
27706: CALL_OW 251
27710: PUSH
27711: LD_VAR 0 3
27715: PUSH
27716: LD_VAR 0 4
27720: ARRAY
27721: PPUSH
27722: CALL_OW 254
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: PUSH
27733: EMPTY
27734: LIST
27735: ADD
27736: ST_TO_ADDR
27737: GO 27650
27739: POP
27740: POP
// result := list ;
27741: LD_ADDR_VAR 0 2
27745: PUSH
27746: LD_VAR 0 5
27750: ST_TO_ADDR
// end ;
27751: LD_VAR 0 2
27755: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27756: LD_INT 0
27758: PPUSH
27759: PPUSH
27760: PPUSH
27761: PPUSH
27762: PPUSH
27763: PPUSH
27764: PPUSH
// if not factory then
27765: LD_VAR 0 1
27769: NOT
27770: IFFALSE 27774
// exit ;
27772: GO 28367
// if control = control_apeman then
27774: LD_VAR 0 4
27778: PUSH
27779: LD_INT 5
27781: EQUAL
27782: IFFALSE 27891
// begin tmp := UnitsInside ( factory ) ;
27784: LD_ADDR_VAR 0 8
27788: PUSH
27789: LD_VAR 0 1
27793: PPUSH
27794: CALL_OW 313
27798: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27799: LD_VAR 0 8
27803: PPUSH
27804: LD_INT 25
27806: PUSH
27807: LD_INT 12
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PPUSH
27814: CALL_OW 72
27818: NOT
27819: IFFALSE 27829
// control := control_manual ;
27821: LD_ADDR_VAR 0 4
27825: PUSH
27826: LD_INT 1
27828: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27829: LD_ADDR_VAR 0 8
27833: PUSH
27834: LD_VAR 0 1
27838: PPUSH
27839: CALL 27526 0 1
27843: ST_TO_ADDR
// if tmp then
27844: LD_VAR 0 8
27848: IFFALSE 27891
// begin for i in tmp do
27850: LD_ADDR_VAR 0 7
27854: PUSH
27855: LD_VAR 0 8
27859: PUSH
27860: FOR_IN
27861: IFFALSE 27889
// if i [ 1 ] = b_ext_radio then
27863: LD_VAR 0 7
27867: PUSH
27868: LD_INT 1
27870: ARRAY
27871: PUSH
27872: LD_INT 22
27874: EQUAL
27875: IFFALSE 27887
// begin control := control_remote ;
27877: LD_ADDR_VAR 0 4
27881: PUSH
27882: LD_INT 2
27884: ST_TO_ADDR
// break ;
27885: GO 27889
// end ;
27887: GO 27860
27889: POP
27890: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27891: LD_VAR 0 1
27895: PPUSH
27896: LD_VAR 0 2
27900: PPUSH
27901: LD_VAR 0 3
27905: PPUSH
27906: LD_VAR 0 4
27910: PPUSH
27911: LD_VAR 0 5
27915: PPUSH
27916: CALL_OW 448
27920: IFFALSE 27955
// begin result := [ chassis , engine , control , weapon ] ;
27922: LD_ADDR_VAR 0 6
27926: PUSH
27927: LD_VAR 0 2
27931: PUSH
27932: LD_VAR 0 3
27936: PUSH
27937: LD_VAR 0 4
27941: PUSH
27942: LD_VAR 0 5
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: ST_TO_ADDR
// exit ;
27953: GO 28367
// end ; _chassis := AvailableChassisList ( factory ) ;
27955: LD_ADDR_VAR 0 9
27959: PUSH
27960: LD_VAR 0 1
27964: PPUSH
27965: CALL_OW 475
27969: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27970: LD_ADDR_VAR 0 11
27974: PUSH
27975: LD_VAR 0 1
27979: PPUSH
27980: CALL_OW 476
27984: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27985: LD_ADDR_VAR 0 12
27989: PUSH
27990: LD_VAR 0 1
27994: PPUSH
27995: CALL_OW 477
27999: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28000: LD_ADDR_VAR 0 10
28004: PUSH
28005: LD_VAR 0 1
28009: PPUSH
28010: CALL_OW 478
28014: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28015: LD_VAR 0 9
28019: NOT
28020: PUSH
28021: LD_VAR 0 11
28025: NOT
28026: OR
28027: PUSH
28028: LD_VAR 0 12
28032: NOT
28033: OR
28034: PUSH
28035: LD_VAR 0 10
28039: NOT
28040: OR
28041: IFFALSE 28076
// begin result := [ chassis , engine , control , weapon ] ;
28043: LD_ADDR_VAR 0 6
28047: PUSH
28048: LD_VAR 0 2
28052: PUSH
28053: LD_VAR 0 3
28057: PUSH
28058: LD_VAR 0 4
28062: PUSH
28063: LD_VAR 0 5
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: ST_TO_ADDR
// exit ;
28074: GO 28367
// end ; if not chassis in _chassis then
28076: LD_VAR 0 2
28080: PUSH
28081: LD_VAR 0 9
28085: IN
28086: NOT
28087: IFFALSE 28113
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28089: LD_ADDR_VAR 0 2
28093: PUSH
28094: LD_VAR 0 9
28098: PUSH
28099: LD_INT 1
28101: PPUSH
28102: LD_VAR 0 9
28106: PPUSH
28107: CALL_OW 12
28111: ARRAY
28112: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28113: LD_VAR 0 2
28117: PPUSH
28118: LD_VAR 0 3
28122: PPUSH
28123: CALL 28372 0 2
28127: NOT
28128: IFFALSE 28187
// repeat engine := _engine [ 1 ] ;
28130: LD_ADDR_VAR 0 3
28134: PUSH
28135: LD_VAR 0 11
28139: PUSH
28140: LD_INT 1
28142: ARRAY
28143: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28144: LD_ADDR_VAR 0 11
28148: PUSH
28149: LD_VAR 0 11
28153: PPUSH
28154: LD_INT 1
28156: PPUSH
28157: CALL_OW 3
28161: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28162: LD_VAR 0 2
28166: PPUSH
28167: LD_VAR 0 3
28171: PPUSH
28172: CALL 28372 0 2
28176: PUSH
28177: LD_VAR 0 11
28181: PUSH
28182: EMPTY
28183: EQUAL
28184: OR
28185: IFFALSE 28130
// if not control in _control then
28187: LD_VAR 0 4
28191: PUSH
28192: LD_VAR 0 12
28196: IN
28197: NOT
28198: IFFALSE 28224
// control := _control [ rand ( 1 , _control ) ] ;
28200: LD_ADDR_VAR 0 4
28204: PUSH
28205: LD_VAR 0 12
28209: PUSH
28210: LD_INT 1
28212: PPUSH
28213: LD_VAR 0 12
28217: PPUSH
28218: CALL_OW 12
28222: ARRAY
28223: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28224: LD_VAR 0 2
28228: PPUSH
28229: LD_VAR 0 5
28233: PPUSH
28234: CALL 28592 0 2
28238: NOT
28239: IFFALSE 28298
// repeat weapon := _weapon [ 1 ] ;
28241: LD_ADDR_VAR 0 5
28245: PUSH
28246: LD_VAR 0 10
28250: PUSH
28251: LD_INT 1
28253: ARRAY
28254: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28255: LD_ADDR_VAR 0 10
28259: PUSH
28260: LD_VAR 0 10
28264: PPUSH
28265: LD_INT 1
28267: PPUSH
28268: CALL_OW 3
28272: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28273: LD_VAR 0 2
28277: PPUSH
28278: LD_VAR 0 5
28282: PPUSH
28283: CALL 28592 0 2
28287: PUSH
28288: LD_VAR 0 10
28292: PUSH
28293: EMPTY
28294: EQUAL
28295: OR
28296: IFFALSE 28241
// result := [ ] ;
28298: LD_ADDR_VAR 0 6
28302: PUSH
28303: EMPTY
28304: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28305: LD_VAR 0 1
28309: PPUSH
28310: LD_VAR 0 2
28314: PPUSH
28315: LD_VAR 0 3
28319: PPUSH
28320: LD_VAR 0 4
28324: PPUSH
28325: LD_VAR 0 5
28329: PPUSH
28330: CALL_OW 448
28334: IFFALSE 28367
// result := [ chassis , engine , control , weapon ] ;
28336: LD_ADDR_VAR 0 6
28340: PUSH
28341: LD_VAR 0 2
28345: PUSH
28346: LD_VAR 0 3
28350: PUSH
28351: LD_VAR 0 4
28355: PUSH
28356: LD_VAR 0 5
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: ST_TO_ADDR
// end ;
28367: LD_VAR 0 6
28371: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28372: LD_INT 0
28374: PPUSH
// if not chassis or not engine then
28375: LD_VAR 0 1
28379: NOT
28380: PUSH
28381: LD_VAR 0 2
28385: NOT
28386: OR
28387: IFFALSE 28391
// exit ;
28389: GO 28587
// case engine of engine_solar :
28391: LD_VAR 0 2
28395: PUSH
28396: LD_INT 2
28398: DOUBLE
28399: EQUAL
28400: IFTRUE 28404
28402: GO 28442
28404: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28405: LD_ADDR_VAR 0 3
28409: PUSH
28410: LD_INT 11
28412: PUSH
28413: LD_INT 12
28415: PUSH
28416: LD_INT 13
28418: PUSH
28419: LD_INT 14
28421: PUSH
28422: LD_INT 1
28424: PUSH
28425: LD_INT 2
28427: PUSH
28428: LD_INT 3
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: ST_TO_ADDR
28440: GO 28571
28442: LD_INT 1
28444: DOUBLE
28445: EQUAL
28446: IFTRUE 28450
28448: GO 28512
28450: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28451: LD_ADDR_VAR 0 3
28455: PUSH
28456: LD_INT 11
28458: PUSH
28459: LD_INT 12
28461: PUSH
28462: LD_INT 13
28464: PUSH
28465: LD_INT 14
28467: PUSH
28468: LD_INT 1
28470: PUSH
28471: LD_INT 2
28473: PUSH
28474: LD_INT 3
28476: PUSH
28477: LD_INT 4
28479: PUSH
28480: LD_INT 5
28482: PUSH
28483: LD_INT 21
28485: PUSH
28486: LD_INT 23
28488: PUSH
28489: LD_INT 22
28491: PUSH
28492: LD_INT 24
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: ST_TO_ADDR
28510: GO 28571
28512: LD_INT 3
28514: DOUBLE
28515: EQUAL
28516: IFTRUE 28520
28518: GO 28570
28520: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28521: LD_ADDR_VAR 0 3
28525: PUSH
28526: LD_INT 13
28528: PUSH
28529: LD_INT 14
28531: PUSH
28532: LD_INT 2
28534: PUSH
28535: LD_INT 3
28537: PUSH
28538: LD_INT 4
28540: PUSH
28541: LD_INT 5
28543: PUSH
28544: LD_INT 21
28546: PUSH
28547: LD_INT 22
28549: PUSH
28550: LD_INT 23
28552: PUSH
28553: LD_INT 24
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: ST_TO_ADDR
28568: GO 28571
28570: POP
// result := ( chassis in result ) ;
28571: LD_ADDR_VAR 0 3
28575: PUSH
28576: LD_VAR 0 1
28580: PUSH
28581: LD_VAR 0 3
28585: IN
28586: ST_TO_ADDR
// end ;
28587: LD_VAR 0 3
28591: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28592: LD_INT 0
28594: PPUSH
// if not chassis or not weapon then
28595: LD_VAR 0 1
28599: NOT
28600: PUSH
28601: LD_VAR 0 2
28605: NOT
28606: OR
28607: IFFALSE 28611
// exit ;
28609: GO 29673
// case weapon of us_machine_gun :
28611: LD_VAR 0 2
28615: PUSH
28616: LD_INT 2
28618: DOUBLE
28619: EQUAL
28620: IFTRUE 28624
28622: GO 28654
28624: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28625: LD_ADDR_VAR 0 3
28629: PUSH
28630: LD_INT 1
28632: PUSH
28633: LD_INT 2
28635: PUSH
28636: LD_INT 3
28638: PUSH
28639: LD_INT 4
28641: PUSH
28642: LD_INT 5
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: ST_TO_ADDR
28652: GO 29657
28654: LD_INT 3
28656: DOUBLE
28657: EQUAL
28658: IFTRUE 28662
28660: GO 28692
28662: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28663: LD_ADDR_VAR 0 3
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: LD_INT 2
28673: PUSH
28674: LD_INT 3
28676: PUSH
28677: LD_INT 4
28679: PUSH
28680: LD_INT 5
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: ST_TO_ADDR
28690: GO 29657
28692: LD_INT 11
28694: DOUBLE
28695: EQUAL
28696: IFTRUE 28700
28698: GO 28730
28700: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28701: LD_ADDR_VAR 0 3
28705: PUSH
28706: LD_INT 1
28708: PUSH
28709: LD_INT 2
28711: PUSH
28712: LD_INT 3
28714: PUSH
28715: LD_INT 4
28717: PUSH
28718: LD_INT 5
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: ST_TO_ADDR
28728: GO 29657
28730: LD_INT 4
28732: DOUBLE
28733: EQUAL
28734: IFTRUE 28738
28736: GO 28764
28738: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28739: LD_ADDR_VAR 0 3
28743: PUSH
28744: LD_INT 2
28746: PUSH
28747: LD_INT 3
28749: PUSH
28750: LD_INT 4
28752: PUSH
28753: LD_INT 5
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: ST_TO_ADDR
28762: GO 29657
28764: LD_INT 5
28766: DOUBLE
28767: EQUAL
28768: IFTRUE 28772
28770: GO 28798
28772: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28773: LD_ADDR_VAR 0 3
28777: PUSH
28778: LD_INT 2
28780: PUSH
28781: LD_INT 3
28783: PUSH
28784: LD_INT 4
28786: PUSH
28787: LD_INT 5
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: ST_TO_ADDR
28796: GO 29657
28798: LD_INT 9
28800: DOUBLE
28801: EQUAL
28802: IFTRUE 28806
28804: GO 28832
28806: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28807: LD_ADDR_VAR 0 3
28811: PUSH
28812: LD_INT 2
28814: PUSH
28815: LD_INT 3
28817: PUSH
28818: LD_INT 4
28820: PUSH
28821: LD_INT 5
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: ST_TO_ADDR
28830: GO 29657
28832: LD_INT 7
28834: DOUBLE
28835: EQUAL
28836: IFTRUE 28840
28838: GO 28866
28840: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28841: LD_ADDR_VAR 0 3
28845: PUSH
28846: LD_INT 2
28848: PUSH
28849: LD_INT 3
28851: PUSH
28852: LD_INT 4
28854: PUSH
28855: LD_INT 5
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: ST_TO_ADDR
28864: GO 29657
28866: LD_INT 12
28868: DOUBLE
28869: EQUAL
28870: IFTRUE 28874
28872: GO 28900
28874: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28875: LD_ADDR_VAR 0 3
28879: PUSH
28880: LD_INT 2
28882: PUSH
28883: LD_INT 3
28885: PUSH
28886: LD_INT 4
28888: PUSH
28889: LD_INT 5
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: ST_TO_ADDR
28898: GO 29657
28900: LD_INT 13
28902: DOUBLE
28903: EQUAL
28904: IFTRUE 28908
28906: GO 28934
28908: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28909: LD_ADDR_VAR 0 3
28913: PUSH
28914: LD_INT 2
28916: PUSH
28917: LD_INT 3
28919: PUSH
28920: LD_INT 4
28922: PUSH
28923: LD_INT 5
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: ST_TO_ADDR
28932: GO 29657
28934: LD_INT 14
28936: DOUBLE
28937: EQUAL
28938: IFTRUE 28942
28940: GO 28960
28942: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28943: LD_ADDR_VAR 0 3
28947: PUSH
28948: LD_INT 4
28950: PUSH
28951: LD_INT 5
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: ST_TO_ADDR
28958: GO 29657
28960: LD_INT 6
28962: DOUBLE
28963: EQUAL
28964: IFTRUE 28968
28966: GO 28986
28968: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28969: LD_ADDR_VAR 0 3
28973: PUSH
28974: LD_INT 4
28976: PUSH
28977: LD_INT 5
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: ST_TO_ADDR
28984: GO 29657
28986: LD_INT 10
28988: DOUBLE
28989: EQUAL
28990: IFTRUE 28994
28992: GO 29012
28994: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28995: LD_ADDR_VAR 0 3
28999: PUSH
29000: LD_INT 4
29002: PUSH
29003: LD_INT 5
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: ST_TO_ADDR
29010: GO 29657
29012: LD_INT 22
29014: DOUBLE
29015: EQUAL
29016: IFTRUE 29020
29018: GO 29046
29020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29021: LD_ADDR_VAR 0 3
29025: PUSH
29026: LD_INT 11
29028: PUSH
29029: LD_INT 12
29031: PUSH
29032: LD_INT 13
29034: PUSH
29035: LD_INT 14
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: ST_TO_ADDR
29044: GO 29657
29046: LD_INT 23
29048: DOUBLE
29049: EQUAL
29050: IFTRUE 29054
29052: GO 29080
29054: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29055: LD_ADDR_VAR 0 3
29059: PUSH
29060: LD_INT 11
29062: PUSH
29063: LD_INT 12
29065: PUSH
29066: LD_INT 13
29068: PUSH
29069: LD_INT 14
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: ST_TO_ADDR
29078: GO 29657
29080: LD_INT 24
29082: DOUBLE
29083: EQUAL
29084: IFTRUE 29088
29086: GO 29114
29088: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29089: LD_ADDR_VAR 0 3
29093: PUSH
29094: LD_INT 11
29096: PUSH
29097: LD_INT 12
29099: PUSH
29100: LD_INT 13
29102: PUSH
29103: LD_INT 14
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: ST_TO_ADDR
29112: GO 29657
29114: LD_INT 30
29116: DOUBLE
29117: EQUAL
29118: IFTRUE 29122
29120: GO 29148
29122: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29123: LD_ADDR_VAR 0 3
29127: PUSH
29128: LD_INT 11
29130: PUSH
29131: LD_INT 12
29133: PUSH
29134: LD_INT 13
29136: PUSH
29137: LD_INT 14
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: ST_TO_ADDR
29146: GO 29657
29148: LD_INT 25
29150: DOUBLE
29151: EQUAL
29152: IFTRUE 29156
29154: GO 29174
29156: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29157: LD_ADDR_VAR 0 3
29161: PUSH
29162: LD_INT 13
29164: PUSH
29165: LD_INT 14
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: ST_TO_ADDR
29172: GO 29657
29174: LD_INT 27
29176: DOUBLE
29177: EQUAL
29178: IFTRUE 29182
29180: GO 29200
29182: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29183: LD_ADDR_VAR 0 3
29187: PUSH
29188: LD_INT 13
29190: PUSH
29191: LD_INT 14
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: ST_TO_ADDR
29198: GO 29657
29200: LD_EXP 64
29204: DOUBLE
29205: EQUAL
29206: IFTRUE 29210
29208: GO 29236
29210: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29211: LD_ADDR_VAR 0 3
29215: PUSH
29216: LD_INT 11
29218: PUSH
29219: LD_INT 12
29221: PUSH
29222: LD_INT 13
29224: PUSH
29225: LD_INT 14
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: ST_TO_ADDR
29234: GO 29657
29236: LD_INT 28
29238: DOUBLE
29239: EQUAL
29240: IFTRUE 29244
29242: GO 29262
29244: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29245: LD_ADDR_VAR 0 3
29249: PUSH
29250: LD_INT 13
29252: PUSH
29253: LD_INT 14
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: ST_TO_ADDR
29260: GO 29657
29262: LD_INT 29
29264: DOUBLE
29265: EQUAL
29266: IFTRUE 29270
29268: GO 29288
29270: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29271: LD_ADDR_VAR 0 3
29275: PUSH
29276: LD_INT 13
29278: PUSH
29279: LD_INT 14
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: ST_TO_ADDR
29286: GO 29657
29288: LD_INT 31
29290: DOUBLE
29291: EQUAL
29292: IFTRUE 29296
29294: GO 29314
29296: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29297: LD_ADDR_VAR 0 3
29301: PUSH
29302: LD_INT 13
29304: PUSH
29305: LD_INT 14
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: ST_TO_ADDR
29312: GO 29657
29314: LD_INT 26
29316: DOUBLE
29317: EQUAL
29318: IFTRUE 29322
29320: GO 29340
29322: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29323: LD_ADDR_VAR 0 3
29327: PUSH
29328: LD_INT 13
29330: PUSH
29331: LD_INT 14
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: ST_TO_ADDR
29338: GO 29657
29340: LD_INT 42
29342: DOUBLE
29343: EQUAL
29344: IFTRUE 29348
29346: GO 29374
29348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29349: LD_ADDR_VAR 0 3
29353: PUSH
29354: LD_INT 21
29356: PUSH
29357: LD_INT 22
29359: PUSH
29360: LD_INT 23
29362: PUSH
29363: LD_INT 24
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: ST_TO_ADDR
29372: GO 29657
29374: LD_INT 43
29376: DOUBLE
29377: EQUAL
29378: IFTRUE 29382
29380: GO 29408
29382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29383: LD_ADDR_VAR 0 3
29387: PUSH
29388: LD_INT 21
29390: PUSH
29391: LD_INT 22
29393: PUSH
29394: LD_INT 23
29396: PUSH
29397: LD_INT 24
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: ST_TO_ADDR
29406: GO 29657
29408: LD_INT 44
29410: DOUBLE
29411: EQUAL
29412: IFTRUE 29416
29414: GO 29442
29416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29417: LD_ADDR_VAR 0 3
29421: PUSH
29422: LD_INT 21
29424: PUSH
29425: LD_INT 22
29427: PUSH
29428: LD_INT 23
29430: PUSH
29431: LD_INT 24
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: ST_TO_ADDR
29440: GO 29657
29442: LD_INT 45
29444: DOUBLE
29445: EQUAL
29446: IFTRUE 29450
29448: GO 29476
29450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29451: LD_ADDR_VAR 0 3
29455: PUSH
29456: LD_INT 21
29458: PUSH
29459: LD_INT 22
29461: PUSH
29462: LD_INT 23
29464: PUSH
29465: LD_INT 24
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: ST_TO_ADDR
29474: GO 29657
29476: LD_INT 49
29478: DOUBLE
29479: EQUAL
29480: IFTRUE 29484
29482: GO 29510
29484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29485: LD_ADDR_VAR 0 3
29489: PUSH
29490: LD_INT 21
29492: PUSH
29493: LD_INT 22
29495: PUSH
29496: LD_INT 23
29498: PUSH
29499: LD_INT 24
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: ST_TO_ADDR
29508: GO 29657
29510: LD_INT 51
29512: DOUBLE
29513: EQUAL
29514: IFTRUE 29518
29516: GO 29544
29518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29519: LD_ADDR_VAR 0 3
29523: PUSH
29524: LD_INT 21
29526: PUSH
29527: LD_INT 22
29529: PUSH
29530: LD_INT 23
29532: PUSH
29533: LD_INT 24
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: ST_TO_ADDR
29542: GO 29657
29544: LD_INT 52
29546: DOUBLE
29547: EQUAL
29548: IFTRUE 29552
29550: GO 29578
29552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29553: LD_ADDR_VAR 0 3
29557: PUSH
29558: LD_INT 21
29560: PUSH
29561: LD_INT 22
29563: PUSH
29564: LD_INT 23
29566: PUSH
29567: LD_INT 24
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: ST_TO_ADDR
29576: GO 29657
29578: LD_INT 53
29580: DOUBLE
29581: EQUAL
29582: IFTRUE 29586
29584: GO 29604
29586: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29587: LD_ADDR_VAR 0 3
29591: PUSH
29592: LD_INT 23
29594: PUSH
29595: LD_INT 24
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: ST_TO_ADDR
29602: GO 29657
29604: LD_INT 46
29606: DOUBLE
29607: EQUAL
29608: IFTRUE 29612
29610: GO 29630
29612: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29613: LD_ADDR_VAR 0 3
29617: PUSH
29618: LD_INT 23
29620: PUSH
29621: LD_INT 24
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: ST_TO_ADDR
29628: GO 29657
29630: LD_INT 47
29632: DOUBLE
29633: EQUAL
29634: IFTRUE 29638
29636: GO 29656
29638: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29639: LD_ADDR_VAR 0 3
29643: PUSH
29644: LD_INT 23
29646: PUSH
29647: LD_INT 24
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: ST_TO_ADDR
29654: GO 29657
29656: POP
// result := ( chassis in result ) ;
29657: LD_ADDR_VAR 0 3
29661: PUSH
29662: LD_VAR 0 1
29666: PUSH
29667: LD_VAR 0 3
29671: IN
29672: ST_TO_ADDR
// end ;
29673: LD_VAR 0 3
29677: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29678: LD_INT 0
29680: PPUSH
29681: PPUSH
29682: PPUSH
29683: PPUSH
29684: PPUSH
29685: PPUSH
29686: PPUSH
// result := array ;
29687: LD_ADDR_VAR 0 5
29691: PUSH
29692: LD_VAR 0 1
29696: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29697: LD_VAR 0 1
29701: NOT
29702: PUSH
29703: LD_VAR 0 2
29707: NOT
29708: OR
29709: PUSH
29710: LD_VAR 0 3
29714: NOT
29715: OR
29716: PUSH
29717: LD_VAR 0 2
29721: PUSH
29722: LD_VAR 0 1
29726: GREATER
29727: OR
29728: PUSH
29729: LD_VAR 0 3
29733: PUSH
29734: LD_VAR 0 1
29738: GREATER
29739: OR
29740: IFFALSE 29744
// exit ;
29742: GO 30040
// if direction then
29744: LD_VAR 0 4
29748: IFFALSE 29812
// begin d := 1 ;
29750: LD_ADDR_VAR 0 9
29754: PUSH
29755: LD_INT 1
29757: ST_TO_ADDR
// if i_from > i_to then
29758: LD_VAR 0 2
29762: PUSH
29763: LD_VAR 0 3
29767: GREATER
29768: IFFALSE 29794
// length := ( array - i_from ) + i_to else
29770: LD_ADDR_VAR 0 11
29774: PUSH
29775: LD_VAR 0 1
29779: PUSH
29780: LD_VAR 0 2
29784: MINUS
29785: PUSH
29786: LD_VAR 0 3
29790: PLUS
29791: ST_TO_ADDR
29792: GO 29810
// length := i_to - i_from ;
29794: LD_ADDR_VAR 0 11
29798: PUSH
29799: LD_VAR 0 3
29803: PUSH
29804: LD_VAR 0 2
29808: MINUS
29809: ST_TO_ADDR
// end else
29810: GO 29873
// begin d := - 1 ;
29812: LD_ADDR_VAR 0 9
29816: PUSH
29817: LD_INT 1
29819: NEG
29820: ST_TO_ADDR
// if i_from > i_to then
29821: LD_VAR 0 2
29825: PUSH
29826: LD_VAR 0 3
29830: GREATER
29831: IFFALSE 29851
// length := i_from - i_to else
29833: LD_ADDR_VAR 0 11
29837: PUSH
29838: LD_VAR 0 2
29842: PUSH
29843: LD_VAR 0 3
29847: MINUS
29848: ST_TO_ADDR
29849: GO 29873
// length := ( array - i_to ) + i_from ;
29851: LD_ADDR_VAR 0 11
29855: PUSH
29856: LD_VAR 0 1
29860: PUSH
29861: LD_VAR 0 3
29865: MINUS
29866: PUSH
29867: LD_VAR 0 2
29871: PLUS
29872: ST_TO_ADDR
// end ; if not length then
29873: LD_VAR 0 11
29877: NOT
29878: IFFALSE 29882
// exit ;
29880: GO 30040
// tmp := array ;
29882: LD_ADDR_VAR 0 10
29886: PUSH
29887: LD_VAR 0 1
29891: ST_TO_ADDR
// for i = 1 to length do
29892: LD_ADDR_VAR 0 6
29896: PUSH
29897: DOUBLE
29898: LD_INT 1
29900: DEC
29901: ST_TO_ADDR
29902: LD_VAR 0 11
29906: PUSH
29907: FOR_TO
29908: IFFALSE 30028
// begin for j = 1 to array do
29910: LD_ADDR_VAR 0 7
29914: PUSH
29915: DOUBLE
29916: LD_INT 1
29918: DEC
29919: ST_TO_ADDR
29920: LD_VAR 0 1
29924: PUSH
29925: FOR_TO
29926: IFFALSE 30014
// begin k := j + d ;
29928: LD_ADDR_VAR 0 8
29932: PUSH
29933: LD_VAR 0 7
29937: PUSH
29938: LD_VAR 0 9
29942: PLUS
29943: ST_TO_ADDR
// if k > array then
29944: LD_VAR 0 8
29948: PUSH
29949: LD_VAR 0 1
29953: GREATER
29954: IFFALSE 29964
// k := 1 ;
29956: LD_ADDR_VAR 0 8
29960: PUSH
29961: LD_INT 1
29963: ST_TO_ADDR
// if not k then
29964: LD_VAR 0 8
29968: NOT
29969: IFFALSE 29981
// k := array ;
29971: LD_ADDR_VAR 0 8
29975: PUSH
29976: LD_VAR 0 1
29980: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29981: LD_ADDR_VAR 0 10
29985: PUSH
29986: LD_VAR 0 10
29990: PPUSH
29991: LD_VAR 0 8
29995: PPUSH
29996: LD_VAR 0 1
30000: PUSH
30001: LD_VAR 0 7
30005: ARRAY
30006: PPUSH
30007: CALL_OW 1
30011: ST_TO_ADDR
// end ;
30012: GO 29925
30014: POP
30015: POP
// array := tmp ;
30016: LD_ADDR_VAR 0 1
30020: PUSH
30021: LD_VAR 0 10
30025: ST_TO_ADDR
// end ;
30026: GO 29907
30028: POP
30029: POP
// result := array ;
30030: LD_ADDR_VAR 0 5
30034: PUSH
30035: LD_VAR 0 1
30039: ST_TO_ADDR
// end ;
30040: LD_VAR 0 5
30044: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30045: LD_INT 0
30047: PPUSH
30048: PPUSH
// result := 0 ;
30049: LD_ADDR_VAR 0 3
30053: PUSH
30054: LD_INT 0
30056: ST_TO_ADDR
// if not array or not value in array then
30057: LD_VAR 0 1
30061: NOT
30062: PUSH
30063: LD_VAR 0 2
30067: PUSH
30068: LD_VAR 0 1
30072: IN
30073: NOT
30074: OR
30075: IFFALSE 30079
// exit ;
30077: GO 30133
// for i = 1 to array do
30079: LD_ADDR_VAR 0 4
30083: PUSH
30084: DOUBLE
30085: LD_INT 1
30087: DEC
30088: ST_TO_ADDR
30089: LD_VAR 0 1
30093: PUSH
30094: FOR_TO
30095: IFFALSE 30131
// if value = array [ i ] then
30097: LD_VAR 0 2
30101: PUSH
30102: LD_VAR 0 1
30106: PUSH
30107: LD_VAR 0 4
30111: ARRAY
30112: EQUAL
30113: IFFALSE 30129
// begin result := i ;
30115: LD_ADDR_VAR 0 3
30119: PUSH
30120: LD_VAR 0 4
30124: ST_TO_ADDR
// exit ;
30125: POP
30126: POP
30127: GO 30133
// end ;
30129: GO 30094
30131: POP
30132: POP
// end ;
30133: LD_VAR 0 3
30137: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30138: LD_INT 0
30140: PPUSH
// vc_chassis := chassis ;
30141: LD_ADDR_OWVAR 37
30145: PUSH
30146: LD_VAR 0 1
30150: ST_TO_ADDR
// vc_engine := engine ;
30151: LD_ADDR_OWVAR 39
30155: PUSH
30156: LD_VAR 0 2
30160: ST_TO_ADDR
// vc_control := control ;
30161: LD_ADDR_OWVAR 38
30165: PUSH
30166: LD_VAR 0 3
30170: ST_TO_ADDR
// vc_weapon := weapon ;
30171: LD_ADDR_OWVAR 40
30175: PUSH
30176: LD_VAR 0 4
30180: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30181: LD_ADDR_OWVAR 41
30185: PUSH
30186: LD_VAR 0 5
30190: ST_TO_ADDR
// end ;
30191: LD_VAR 0 6
30195: RET
// export function WantPlant ( unit ) ; var task ; begin
30196: LD_INT 0
30198: PPUSH
30199: PPUSH
// result := false ;
30200: LD_ADDR_VAR 0 2
30204: PUSH
30205: LD_INT 0
30207: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30208: LD_ADDR_VAR 0 3
30212: PUSH
30213: LD_VAR 0 1
30217: PPUSH
30218: CALL_OW 437
30222: ST_TO_ADDR
// if task then
30223: LD_VAR 0 3
30227: IFFALSE 30255
// if task [ 1 ] [ 1 ] = p then
30229: LD_VAR 0 3
30233: PUSH
30234: LD_INT 1
30236: ARRAY
30237: PUSH
30238: LD_INT 1
30240: ARRAY
30241: PUSH
30242: LD_STRING p
30244: EQUAL
30245: IFFALSE 30255
// result := true ;
30247: LD_ADDR_VAR 0 2
30251: PUSH
30252: LD_INT 1
30254: ST_TO_ADDR
// end ;
30255: LD_VAR 0 2
30259: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30260: LD_INT 0
30262: PPUSH
30263: PPUSH
30264: PPUSH
30265: PPUSH
// if pos < 1 then
30266: LD_VAR 0 2
30270: PUSH
30271: LD_INT 1
30273: LESS
30274: IFFALSE 30278
// exit ;
30276: GO 30581
// if pos = 1 then
30278: LD_VAR 0 2
30282: PUSH
30283: LD_INT 1
30285: EQUAL
30286: IFFALSE 30319
// result := Replace ( arr , pos [ 1 ] , value ) else
30288: LD_ADDR_VAR 0 4
30292: PUSH
30293: LD_VAR 0 1
30297: PPUSH
30298: LD_VAR 0 2
30302: PUSH
30303: LD_INT 1
30305: ARRAY
30306: PPUSH
30307: LD_VAR 0 3
30311: PPUSH
30312: CALL_OW 1
30316: ST_TO_ADDR
30317: GO 30581
// begin tmp := arr ;
30319: LD_ADDR_VAR 0 6
30323: PUSH
30324: LD_VAR 0 1
30328: ST_TO_ADDR
// s_arr := [ tmp ] ;
30329: LD_ADDR_VAR 0 7
30333: PUSH
30334: LD_VAR 0 6
30338: PUSH
30339: EMPTY
30340: LIST
30341: ST_TO_ADDR
// for i = 1 to pos - 1 do
30342: LD_ADDR_VAR 0 5
30346: PUSH
30347: DOUBLE
30348: LD_INT 1
30350: DEC
30351: ST_TO_ADDR
30352: LD_VAR 0 2
30356: PUSH
30357: LD_INT 1
30359: MINUS
30360: PUSH
30361: FOR_TO
30362: IFFALSE 30407
// begin tmp := tmp [ pos [ i ] ] ;
30364: LD_ADDR_VAR 0 6
30368: PUSH
30369: LD_VAR 0 6
30373: PUSH
30374: LD_VAR 0 2
30378: PUSH
30379: LD_VAR 0 5
30383: ARRAY
30384: ARRAY
30385: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30386: LD_ADDR_VAR 0 7
30390: PUSH
30391: LD_VAR 0 7
30395: PUSH
30396: LD_VAR 0 6
30400: PUSH
30401: EMPTY
30402: LIST
30403: ADD
30404: ST_TO_ADDR
// end ;
30405: GO 30361
30407: POP
30408: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30409: LD_ADDR_VAR 0 6
30413: PUSH
30414: LD_VAR 0 6
30418: PPUSH
30419: LD_VAR 0 2
30423: PUSH
30424: LD_VAR 0 2
30428: ARRAY
30429: PPUSH
30430: LD_VAR 0 3
30434: PPUSH
30435: CALL_OW 1
30439: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30440: LD_ADDR_VAR 0 7
30444: PUSH
30445: LD_VAR 0 7
30449: PPUSH
30450: LD_VAR 0 7
30454: PPUSH
30455: LD_VAR 0 6
30459: PPUSH
30460: CALL_OW 1
30464: ST_TO_ADDR
// for i = s_arr downto 2 do
30465: LD_ADDR_VAR 0 5
30469: PUSH
30470: DOUBLE
30471: LD_VAR 0 7
30475: INC
30476: ST_TO_ADDR
30477: LD_INT 2
30479: PUSH
30480: FOR_DOWNTO
30481: IFFALSE 30565
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30483: LD_ADDR_VAR 0 6
30487: PUSH
30488: LD_VAR 0 7
30492: PUSH
30493: LD_VAR 0 5
30497: PUSH
30498: LD_INT 1
30500: MINUS
30501: ARRAY
30502: PPUSH
30503: LD_VAR 0 2
30507: PUSH
30508: LD_VAR 0 5
30512: PUSH
30513: LD_INT 1
30515: MINUS
30516: ARRAY
30517: PPUSH
30518: LD_VAR 0 7
30522: PUSH
30523: LD_VAR 0 5
30527: ARRAY
30528: PPUSH
30529: CALL_OW 1
30533: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30534: LD_ADDR_VAR 0 7
30538: PUSH
30539: LD_VAR 0 7
30543: PPUSH
30544: LD_VAR 0 5
30548: PUSH
30549: LD_INT 1
30551: MINUS
30552: PPUSH
30553: LD_VAR 0 6
30557: PPUSH
30558: CALL_OW 1
30562: ST_TO_ADDR
// end ;
30563: GO 30480
30565: POP
30566: POP
// result := s_arr [ 1 ] ;
30567: LD_ADDR_VAR 0 4
30571: PUSH
30572: LD_VAR 0 7
30576: PUSH
30577: LD_INT 1
30579: ARRAY
30580: ST_TO_ADDR
// end ; end ;
30581: LD_VAR 0 4
30585: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30586: LD_INT 0
30588: PPUSH
30589: PPUSH
// if not list then
30590: LD_VAR 0 1
30594: NOT
30595: IFFALSE 30599
// exit ;
30597: GO 30690
// i := list [ pos1 ] ;
30599: LD_ADDR_VAR 0 5
30603: PUSH
30604: LD_VAR 0 1
30608: PUSH
30609: LD_VAR 0 2
30613: ARRAY
30614: ST_TO_ADDR
// if not i then
30615: LD_VAR 0 5
30619: NOT
30620: IFFALSE 30624
// exit ;
30622: GO 30690
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30624: LD_ADDR_VAR 0 1
30628: PUSH
30629: LD_VAR 0 1
30633: PPUSH
30634: LD_VAR 0 2
30638: PPUSH
30639: LD_VAR 0 1
30643: PUSH
30644: LD_VAR 0 3
30648: ARRAY
30649: PPUSH
30650: CALL_OW 1
30654: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30655: LD_ADDR_VAR 0 1
30659: PUSH
30660: LD_VAR 0 1
30664: PPUSH
30665: LD_VAR 0 3
30669: PPUSH
30670: LD_VAR 0 5
30674: PPUSH
30675: CALL_OW 1
30679: ST_TO_ADDR
// result := list ;
30680: LD_ADDR_VAR 0 4
30684: PUSH
30685: LD_VAR 0 1
30689: ST_TO_ADDR
// end ;
30690: LD_VAR 0 4
30694: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30695: LD_INT 0
30697: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30698: LD_ADDR_VAR 0 5
30702: PUSH
30703: LD_VAR 0 1
30707: PPUSH
30708: CALL_OW 250
30712: PPUSH
30713: LD_VAR 0 1
30717: PPUSH
30718: CALL_OW 251
30722: PPUSH
30723: LD_VAR 0 2
30727: PPUSH
30728: LD_VAR 0 3
30732: PPUSH
30733: LD_VAR 0 4
30737: PPUSH
30738: CALL 30748 0 5
30742: ST_TO_ADDR
// end ;
30743: LD_VAR 0 5
30747: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30748: LD_INT 0
30750: PPUSH
30751: PPUSH
30752: PPUSH
30753: PPUSH
// if not list then
30754: LD_VAR 0 3
30758: NOT
30759: IFFALSE 30763
// exit ;
30761: GO 31151
// result := [ ] ;
30763: LD_ADDR_VAR 0 6
30767: PUSH
30768: EMPTY
30769: ST_TO_ADDR
// for i in list do
30770: LD_ADDR_VAR 0 7
30774: PUSH
30775: LD_VAR 0 3
30779: PUSH
30780: FOR_IN
30781: IFFALSE 30983
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30783: LD_ADDR_VAR 0 9
30787: PUSH
30788: LD_VAR 0 7
30792: PPUSH
30793: LD_VAR 0 1
30797: PPUSH
30798: LD_VAR 0 2
30802: PPUSH
30803: CALL_OW 297
30807: ST_TO_ADDR
// if not result then
30808: LD_VAR 0 6
30812: NOT
30813: IFFALSE 30839
// result := [ [ i , tmp ] ] else
30815: LD_ADDR_VAR 0 6
30819: PUSH
30820: LD_VAR 0 7
30824: PUSH
30825: LD_VAR 0 9
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: EMPTY
30835: LIST
30836: ST_TO_ADDR
30837: GO 30981
// begin if result [ result ] [ 2 ] < tmp then
30839: LD_VAR 0 6
30843: PUSH
30844: LD_VAR 0 6
30848: ARRAY
30849: PUSH
30850: LD_INT 2
30852: ARRAY
30853: PUSH
30854: LD_VAR 0 9
30858: LESS
30859: IFFALSE 30901
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30861: LD_ADDR_VAR 0 6
30865: PUSH
30866: LD_VAR 0 6
30870: PPUSH
30871: LD_VAR 0 6
30875: PUSH
30876: LD_INT 1
30878: PLUS
30879: PPUSH
30880: LD_VAR 0 7
30884: PUSH
30885: LD_VAR 0 9
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PPUSH
30894: CALL_OW 2
30898: ST_TO_ADDR
30899: GO 30981
// for j = 1 to result do
30901: LD_ADDR_VAR 0 8
30905: PUSH
30906: DOUBLE
30907: LD_INT 1
30909: DEC
30910: ST_TO_ADDR
30911: LD_VAR 0 6
30915: PUSH
30916: FOR_TO
30917: IFFALSE 30979
// begin if tmp < result [ j ] [ 2 ] then
30919: LD_VAR 0 9
30923: PUSH
30924: LD_VAR 0 6
30928: PUSH
30929: LD_VAR 0 8
30933: ARRAY
30934: PUSH
30935: LD_INT 2
30937: ARRAY
30938: LESS
30939: IFFALSE 30977
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30941: LD_ADDR_VAR 0 6
30945: PUSH
30946: LD_VAR 0 6
30950: PPUSH
30951: LD_VAR 0 8
30955: PPUSH
30956: LD_VAR 0 7
30960: PUSH
30961: LD_VAR 0 9
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PPUSH
30970: CALL_OW 2
30974: ST_TO_ADDR
// break ;
30975: GO 30979
// end ; end ;
30977: GO 30916
30979: POP
30980: POP
// end ; end ;
30981: GO 30780
30983: POP
30984: POP
// if result and not asc then
30985: LD_VAR 0 6
30989: PUSH
30990: LD_VAR 0 4
30994: NOT
30995: AND
30996: IFFALSE 31071
// begin tmp := result ;
30998: LD_ADDR_VAR 0 9
31002: PUSH
31003: LD_VAR 0 6
31007: ST_TO_ADDR
// for i = tmp downto 1 do
31008: LD_ADDR_VAR 0 7
31012: PUSH
31013: DOUBLE
31014: LD_VAR 0 9
31018: INC
31019: ST_TO_ADDR
31020: LD_INT 1
31022: PUSH
31023: FOR_DOWNTO
31024: IFFALSE 31069
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31026: LD_ADDR_VAR 0 6
31030: PUSH
31031: LD_VAR 0 6
31035: PPUSH
31036: LD_VAR 0 9
31040: PUSH
31041: LD_VAR 0 7
31045: MINUS
31046: PUSH
31047: LD_INT 1
31049: PLUS
31050: PPUSH
31051: LD_VAR 0 9
31055: PUSH
31056: LD_VAR 0 7
31060: ARRAY
31061: PPUSH
31062: CALL_OW 1
31066: ST_TO_ADDR
31067: GO 31023
31069: POP
31070: POP
// end ; tmp := [ ] ;
31071: LD_ADDR_VAR 0 9
31075: PUSH
31076: EMPTY
31077: ST_TO_ADDR
// if mode then
31078: LD_VAR 0 5
31082: IFFALSE 31151
// begin for i = 1 to result do
31084: LD_ADDR_VAR 0 7
31088: PUSH
31089: DOUBLE
31090: LD_INT 1
31092: DEC
31093: ST_TO_ADDR
31094: LD_VAR 0 6
31098: PUSH
31099: FOR_TO
31100: IFFALSE 31139
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31102: LD_ADDR_VAR 0 9
31106: PUSH
31107: LD_VAR 0 9
31111: PPUSH
31112: LD_VAR 0 7
31116: PPUSH
31117: LD_VAR 0 6
31121: PUSH
31122: LD_VAR 0 7
31126: ARRAY
31127: PUSH
31128: LD_INT 1
31130: ARRAY
31131: PPUSH
31132: CALL_OW 1
31136: ST_TO_ADDR
31137: GO 31099
31139: POP
31140: POP
// result := tmp ;
31141: LD_ADDR_VAR 0 6
31145: PUSH
31146: LD_VAR 0 9
31150: ST_TO_ADDR
// end ; end ;
31151: LD_VAR 0 6
31155: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31156: LD_INT 0
31158: PPUSH
31159: PPUSH
31160: PPUSH
31161: PPUSH
31162: PPUSH
31163: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31164: LD_ADDR_VAR 0 5
31168: PUSH
31169: LD_INT 0
31171: PUSH
31172: LD_INT 0
31174: PUSH
31175: LD_INT 0
31177: PUSH
31178: EMPTY
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: ST_TO_ADDR
// if not x or not y then
31186: LD_VAR 0 2
31190: NOT
31191: PUSH
31192: LD_VAR 0 3
31196: NOT
31197: OR
31198: IFFALSE 31202
// exit ;
31200: GO 32854
// if not range then
31202: LD_VAR 0 4
31206: NOT
31207: IFFALSE 31217
// range := 10 ;
31209: LD_ADDR_VAR 0 4
31213: PUSH
31214: LD_INT 10
31216: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31217: LD_ADDR_VAR 0 8
31221: PUSH
31222: LD_INT 81
31224: PUSH
31225: LD_VAR 0 1
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 92
31236: PUSH
31237: LD_VAR 0 2
31241: PUSH
31242: LD_VAR 0 3
31246: PUSH
31247: LD_VAR 0 4
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 3
31260: PUSH
31261: LD_INT 21
31263: PUSH
31264: LD_INT 3
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: LIST
31279: PPUSH
31280: CALL_OW 69
31284: ST_TO_ADDR
// if not tmp then
31285: LD_VAR 0 8
31289: NOT
31290: IFFALSE 31294
// exit ;
31292: GO 32854
// for i in tmp do
31294: LD_ADDR_VAR 0 6
31298: PUSH
31299: LD_VAR 0 8
31303: PUSH
31304: FOR_IN
31305: IFFALSE 32829
// begin points := [ 0 , 0 , 0 ] ;
31307: LD_ADDR_VAR 0 9
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: LD_INT 0
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: ST_TO_ADDR
// bpoints := 1 ;
31326: LD_ADDR_VAR 0 10
31330: PUSH
31331: LD_INT 1
31333: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31334: LD_VAR 0 6
31338: PPUSH
31339: CALL_OW 247
31343: PUSH
31344: LD_INT 1
31346: DOUBLE
31347: EQUAL
31348: IFTRUE 31352
31350: GO 31930
31352: POP
// begin if GetClass ( i ) = 1 then
31353: LD_VAR 0 6
31357: PPUSH
31358: CALL_OW 257
31362: PUSH
31363: LD_INT 1
31365: EQUAL
31366: IFFALSE 31387
// points := [ 10 , 5 , 3 ] ;
31368: LD_ADDR_VAR 0 9
31372: PUSH
31373: LD_INT 10
31375: PUSH
31376: LD_INT 5
31378: PUSH
31379: LD_INT 3
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: LIST
31386: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31387: LD_VAR 0 6
31391: PPUSH
31392: CALL_OW 257
31396: PUSH
31397: LD_INT 2
31399: PUSH
31400: LD_INT 3
31402: PUSH
31403: LD_INT 4
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: LIST
31410: IN
31411: IFFALSE 31432
// points := [ 3 , 2 , 1 ] ;
31413: LD_ADDR_VAR 0 9
31417: PUSH
31418: LD_INT 3
31420: PUSH
31421: LD_INT 2
31423: PUSH
31424: LD_INT 1
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: LIST
31431: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31432: LD_VAR 0 6
31436: PPUSH
31437: CALL_OW 257
31441: PUSH
31442: LD_INT 5
31444: EQUAL
31445: IFFALSE 31466
// points := [ 130 , 5 , 2 ] ;
31447: LD_ADDR_VAR 0 9
31451: PUSH
31452: LD_INT 130
31454: PUSH
31455: LD_INT 5
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: LIST
31465: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31466: LD_VAR 0 6
31470: PPUSH
31471: CALL_OW 257
31475: PUSH
31476: LD_INT 8
31478: EQUAL
31479: IFFALSE 31500
// points := [ 35 , 35 , 30 ] ;
31481: LD_ADDR_VAR 0 9
31485: PUSH
31486: LD_INT 35
31488: PUSH
31489: LD_INT 35
31491: PUSH
31492: LD_INT 30
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: LIST
31499: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31500: LD_VAR 0 6
31504: PPUSH
31505: CALL_OW 257
31509: PUSH
31510: LD_INT 9
31512: EQUAL
31513: IFFALSE 31534
// points := [ 20 , 55 , 40 ] ;
31515: LD_ADDR_VAR 0 9
31519: PUSH
31520: LD_INT 20
31522: PUSH
31523: LD_INT 55
31525: PUSH
31526: LD_INT 40
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: LIST
31533: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31534: LD_VAR 0 6
31538: PPUSH
31539: CALL_OW 257
31543: PUSH
31544: LD_INT 12
31546: PUSH
31547: LD_INT 16
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: IN
31554: IFFALSE 31575
// points := [ 5 , 3 , 2 ] ;
31556: LD_ADDR_VAR 0 9
31560: PUSH
31561: LD_INT 5
31563: PUSH
31564: LD_INT 3
31566: PUSH
31567: LD_INT 2
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: LIST
31574: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31575: LD_VAR 0 6
31579: PPUSH
31580: CALL_OW 257
31584: PUSH
31585: LD_INT 17
31587: EQUAL
31588: IFFALSE 31609
// points := [ 100 , 50 , 75 ] ;
31590: LD_ADDR_VAR 0 9
31594: PUSH
31595: LD_INT 100
31597: PUSH
31598: LD_INT 50
31600: PUSH
31601: LD_INT 75
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: LIST
31608: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31609: LD_VAR 0 6
31613: PPUSH
31614: CALL_OW 257
31618: PUSH
31619: LD_INT 15
31621: EQUAL
31622: IFFALSE 31643
// points := [ 10 , 5 , 3 ] ;
31624: LD_ADDR_VAR 0 9
31628: PUSH
31629: LD_INT 10
31631: PUSH
31632: LD_INT 5
31634: PUSH
31635: LD_INT 3
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: LIST
31642: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31643: LD_VAR 0 6
31647: PPUSH
31648: CALL_OW 257
31652: PUSH
31653: LD_INT 14
31655: EQUAL
31656: IFFALSE 31677
// points := [ 10 , 0 , 0 ] ;
31658: LD_ADDR_VAR 0 9
31662: PUSH
31663: LD_INT 10
31665: PUSH
31666: LD_INT 0
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: LIST
31676: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31677: LD_VAR 0 6
31681: PPUSH
31682: CALL_OW 257
31686: PUSH
31687: LD_INT 11
31689: EQUAL
31690: IFFALSE 31711
// points := [ 30 , 10 , 5 ] ;
31692: LD_ADDR_VAR 0 9
31696: PUSH
31697: LD_INT 30
31699: PUSH
31700: LD_INT 10
31702: PUSH
31703: LD_INT 5
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: LIST
31710: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31711: LD_VAR 0 1
31715: PPUSH
31716: LD_INT 5
31718: PPUSH
31719: CALL_OW 321
31723: PUSH
31724: LD_INT 2
31726: EQUAL
31727: IFFALSE 31744
// bpoints := bpoints * 1.8 ;
31729: LD_ADDR_VAR 0 10
31733: PUSH
31734: LD_VAR 0 10
31738: PUSH
31739: LD_REAL  1.80000000000000E+0000
31742: MUL
31743: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31744: LD_VAR 0 6
31748: PPUSH
31749: CALL_OW 257
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: LD_INT 2
31759: PUSH
31760: LD_INT 3
31762: PUSH
31763: LD_INT 4
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: IN
31772: PUSH
31773: LD_VAR 0 1
31777: PPUSH
31778: LD_INT 51
31780: PPUSH
31781: CALL_OW 321
31785: PUSH
31786: LD_INT 2
31788: EQUAL
31789: AND
31790: IFFALSE 31807
// bpoints := bpoints * 1.2 ;
31792: LD_ADDR_VAR 0 10
31796: PUSH
31797: LD_VAR 0 10
31801: PUSH
31802: LD_REAL  1.20000000000000E+0000
31805: MUL
31806: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31807: LD_VAR 0 6
31811: PPUSH
31812: CALL_OW 257
31816: PUSH
31817: LD_INT 5
31819: PUSH
31820: LD_INT 7
31822: PUSH
31823: LD_INT 9
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: LIST
31830: IN
31831: PUSH
31832: LD_VAR 0 1
31836: PPUSH
31837: LD_INT 52
31839: PPUSH
31840: CALL_OW 321
31844: PUSH
31845: LD_INT 2
31847: EQUAL
31848: AND
31849: IFFALSE 31866
// bpoints := bpoints * 1.5 ;
31851: LD_ADDR_VAR 0 10
31855: PUSH
31856: LD_VAR 0 10
31860: PUSH
31861: LD_REAL  1.50000000000000E+0000
31864: MUL
31865: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31866: LD_VAR 0 1
31870: PPUSH
31871: LD_INT 66
31873: PPUSH
31874: CALL_OW 321
31878: PUSH
31879: LD_INT 2
31881: EQUAL
31882: IFFALSE 31899
// bpoints := bpoints * 1.1 ;
31884: LD_ADDR_VAR 0 10
31888: PUSH
31889: LD_VAR 0 10
31893: PUSH
31894: LD_REAL  1.10000000000000E+0000
31897: MUL
31898: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31899: LD_ADDR_VAR 0 10
31903: PUSH
31904: LD_VAR 0 10
31908: PUSH
31909: LD_VAR 0 6
31913: PPUSH
31914: LD_INT 1
31916: PPUSH
31917: CALL_OW 259
31921: PUSH
31922: LD_REAL  1.15000000000000E+0000
31925: MUL
31926: MUL
31927: ST_TO_ADDR
// end ; unit_vehicle :
31928: GO 32758
31930: LD_INT 2
31932: DOUBLE
31933: EQUAL
31934: IFTRUE 31938
31936: GO 32746
31938: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31939: LD_VAR 0 6
31943: PPUSH
31944: CALL_OW 264
31948: PUSH
31949: LD_INT 2
31951: PUSH
31952: LD_INT 42
31954: PUSH
31955: LD_INT 24
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: LIST
31962: IN
31963: IFFALSE 31984
// points := [ 25 , 5 , 3 ] ;
31965: LD_ADDR_VAR 0 9
31969: PUSH
31970: LD_INT 25
31972: PUSH
31973: LD_INT 5
31975: PUSH
31976: LD_INT 3
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: LIST
31983: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31984: LD_VAR 0 6
31988: PPUSH
31989: CALL_OW 264
31993: PUSH
31994: LD_INT 4
31996: PUSH
31997: LD_INT 43
31999: PUSH
32000: LD_INT 25
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: LIST
32007: IN
32008: IFFALSE 32029
// points := [ 40 , 15 , 5 ] ;
32010: LD_ADDR_VAR 0 9
32014: PUSH
32015: LD_INT 40
32017: PUSH
32018: LD_INT 15
32020: PUSH
32021: LD_INT 5
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: LIST
32028: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32029: LD_VAR 0 6
32033: PPUSH
32034: CALL_OW 264
32038: PUSH
32039: LD_INT 3
32041: PUSH
32042: LD_INT 23
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: IN
32049: IFFALSE 32070
// points := [ 7 , 25 , 8 ] ;
32051: LD_ADDR_VAR 0 9
32055: PUSH
32056: LD_INT 7
32058: PUSH
32059: LD_INT 25
32061: PUSH
32062: LD_INT 8
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: LIST
32069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32070: LD_VAR 0 6
32074: PPUSH
32075: CALL_OW 264
32079: PUSH
32080: LD_INT 5
32082: PUSH
32083: LD_INT 27
32085: PUSH
32086: LD_INT 44
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: LIST
32093: IN
32094: IFFALSE 32115
// points := [ 14 , 50 , 16 ] ;
32096: LD_ADDR_VAR 0 9
32100: PUSH
32101: LD_INT 14
32103: PUSH
32104: LD_INT 50
32106: PUSH
32107: LD_INT 16
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: LIST
32114: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32115: LD_VAR 0 6
32119: PPUSH
32120: CALL_OW 264
32124: PUSH
32125: LD_INT 6
32127: PUSH
32128: LD_INT 46
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: IN
32135: IFFALSE 32156
// points := [ 32 , 120 , 70 ] ;
32137: LD_ADDR_VAR 0 9
32141: PUSH
32142: LD_INT 32
32144: PUSH
32145: LD_INT 120
32147: PUSH
32148: LD_INT 70
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: LIST
32155: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32156: LD_VAR 0 6
32160: PPUSH
32161: CALL_OW 264
32165: PUSH
32166: LD_INT 7
32168: PUSH
32169: LD_INT 28
32171: PUSH
32172: LD_INT 45
32174: PUSH
32175: LD_EXP 64
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: IN
32186: IFFALSE 32207
// points := [ 35 , 20 , 45 ] ;
32188: LD_ADDR_VAR 0 9
32192: PUSH
32193: LD_INT 35
32195: PUSH
32196: LD_INT 20
32198: PUSH
32199: LD_INT 45
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: LIST
32206: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32207: LD_VAR 0 6
32211: PPUSH
32212: CALL_OW 264
32216: PUSH
32217: LD_INT 47
32219: PUSH
32220: EMPTY
32221: LIST
32222: IN
32223: IFFALSE 32244
// points := [ 67 , 45 , 75 ] ;
32225: LD_ADDR_VAR 0 9
32229: PUSH
32230: LD_INT 67
32232: PUSH
32233: LD_INT 45
32235: PUSH
32236: LD_INT 75
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: LIST
32243: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32244: LD_VAR 0 6
32248: PPUSH
32249: CALL_OW 264
32253: PUSH
32254: LD_INT 26
32256: PUSH
32257: EMPTY
32258: LIST
32259: IN
32260: IFFALSE 32281
// points := [ 120 , 30 , 80 ] ;
32262: LD_ADDR_VAR 0 9
32266: PUSH
32267: LD_INT 120
32269: PUSH
32270: LD_INT 30
32272: PUSH
32273: LD_INT 80
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: LIST
32280: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32281: LD_VAR 0 6
32285: PPUSH
32286: CALL_OW 264
32290: PUSH
32291: LD_INT 22
32293: PUSH
32294: EMPTY
32295: LIST
32296: IN
32297: IFFALSE 32318
// points := [ 40 , 1 , 1 ] ;
32299: LD_ADDR_VAR 0 9
32303: PUSH
32304: LD_INT 40
32306: PUSH
32307: LD_INT 1
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: LIST
32317: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32318: LD_VAR 0 6
32322: PPUSH
32323: CALL_OW 264
32327: PUSH
32328: LD_INT 29
32330: PUSH
32331: EMPTY
32332: LIST
32333: IN
32334: IFFALSE 32355
// points := [ 70 , 200 , 400 ] ;
32336: LD_ADDR_VAR 0 9
32340: PUSH
32341: LD_INT 70
32343: PUSH
32344: LD_INT 200
32346: PUSH
32347: LD_INT 400
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: LIST
32354: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32355: LD_VAR 0 6
32359: PPUSH
32360: CALL_OW 264
32364: PUSH
32365: LD_INT 14
32367: PUSH
32368: LD_INT 53
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: IN
32375: IFFALSE 32396
// points := [ 40 , 10 , 20 ] ;
32377: LD_ADDR_VAR 0 9
32381: PUSH
32382: LD_INT 40
32384: PUSH
32385: LD_INT 10
32387: PUSH
32388: LD_INT 20
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: LIST
32395: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32396: LD_VAR 0 6
32400: PPUSH
32401: CALL_OW 264
32405: PUSH
32406: LD_INT 9
32408: PUSH
32409: EMPTY
32410: LIST
32411: IN
32412: IFFALSE 32433
// points := [ 5 , 70 , 20 ] ;
32414: LD_ADDR_VAR 0 9
32418: PUSH
32419: LD_INT 5
32421: PUSH
32422: LD_INT 70
32424: PUSH
32425: LD_INT 20
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: LIST
32432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32433: LD_VAR 0 6
32437: PPUSH
32438: CALL_OW 264
32442: PUSH
32443: LD_INT 10
32445: PUSH
32446: EMPTY
32447: LIST
32448: IN
32449: IFFALSE 32470
// points := [ 35 , 110 , 70 ] ;
32451: LD_ADDR_VAR 0 9
32455: PUSH
32456: LD_INT 35
32458: PUSH
32459: LD_INT 110
32461: PUSH
32462: LD_INT 70
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: LIST
32469: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32470: LD_VAR 0 6
32474: PPUSH
32475: CALL_OW 265
32479: PUSH
32480: LD_INT 25
32482: EQUAL
32483: IFFALSE 32504
// points := [ 80 , 65 , 100 ] ;
32485: LD_ADDR_VAR 0 9
32489: PUSH
32490: LD_INT 80
32492: PUSH
32493: LD_INT 65
32495: PUSH
32496: LD_INT 100
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: LIST
32503: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32504: LD_VAR 0 6
32508: PPUSH
32509: CALL_OW 263
32513: PUSH
32514: LD_INT 1
32516: EQUAL
32517: IFFALSE 32552
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32519: LD_ADDR_VAR 0 10
32523: PUSH
32524: LD_VAR 0 10
32528: PUSH
32529: LD_VAR 0 6
32533: PPUSH
32534: CALL_OW 311
32538: PPUSH
32539: LD_INT 3
32541: PPUSH
32542: CALL_OW 259
32546: PUSH
32547: LD_INT 4
32549: MUL
32550: MUL
32551: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32552: LD_VAR 0 6
32556: PPUSH
32557: CALL_OW 263
32561: PUSH
32562: LD_INT 2
32564: EQUAL
32565: IFFALSE 32616
// begin j := IsControledBy ( i ) ;
32567: LD_ADDR_VAR 0 7
32571: PUSH
32572: LD_VAR 0 6
32576: PPUSH
32577: CALL_OW 312
32581: ST_TO_ADDR
// if j then
32582: LD_VAR 0 7
32586: IFFALSE 32616
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32588: LD_ADDR_VAR 0 10
32592: PUSH
32593: LD_VAR 0 10
32597: PUSH
32598: LD_VAR 0 7
32602: PPUSH
32603: LD_INT 3
32605: PPUSH
32606: CALL_OW 259
32610: PUSH
32611: LD_INT 3
32613: MUL
32614: MUL
32615: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32616: LD_VAR 0 6
32620: PPUSH
32621: CALL_OW 264
32625: PUSH
32626: LD_INT 5
32628: PUSH
32629: LD_INT 6
32631: PUSH
32632: LD_INT 46
32634: PUSH
32635: LD_INT 44
32637: PUSH
32638: LD_INT 47
32640: PUSH
32641: LD_INT 45
32643: PUSH
32644: LD_INT 28
32646: PUSH
32647: LD_INT 7
32649: PUSH
32650: LD_INT 27
32652: PUSH
32653: LD_INT 29
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: IN
32668: PUSH
32669: LD_VAR 0 1
32673: PPUSH
32674: LD_INT 52
32676: PPUSH
32677: CALL_OW 321
32681: PUSH
32682: LD_INT 2
32684: EQUAL
32685: AND
32686: IFFALSE 32703
// bpoints := bpoints * 1.2 ;
32688: LD_ADDR_VAR 0 10
32692: PUSH
32693: LD_VAR 0 10
32697: PUSH
32698: LD_REAL  1.20000000000000E+0000
32701: MUL
32702: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32703: LD_VAR 0 6
32707: PPUSH
32708: CALL_OW 264
32712: PUSH
32713: LD_INT 6
32715: PUSH
32716: LD_INT 46
32718: PUSH
32719: LD_INT 47
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: LIST
32726: IN
32727: IFFALSE 32744
// bpoints := bpoints * 1.2 ;
32729: LD_ADDR_VAR 0 10
32733: PUSH
32734: LD_VAR 0 10
32738: PUSH
32739: LD_REAL  1.20000000000000E+0000
32742: MUL
32743: ST_TO_ADDR
// end ; unit_building :
32744: GO 32758
32746: LD_INT 3
32748: DOUBLE
32749: EQUAL
32750: IFTRUE 32754
32752: GO 32757
32754: POP
// ; end ;
32755: GO 32758
32757: POP
// for j = 1 to 3 do
32758: LD_ADDR_VAR 0 7
32762: PUSH
32763: DOUBLE
32764: LD_INT 1
32766: DEC
32767: ST_TO_ADDR
32768: LD_INT 3
32770: PUSH
32771: FOR_TO
32772: IFFALSE 32825
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32774: LD_ADDR_VAR 0 5
32778: PUSH
32779: LD_VAR 0 5
32783: PPUSH
32784: LD_VAR 0 7
32788: PPUSH
32789: LD_VAR 0 5
32793: PUSH
32794: LD_VAR 0 7
32798: ARRAY
32799: PUSH
32800: LD_VAR 0 9
32804: PUSH
32805: LD_VAR 0 7
32809: ARRAY
32810: PUSH
32811: LD_VAR 0 10
32815: MUL
32816: PLUS
32817: PPUSH
32818: CALL_OW 1
32822: ST_TO_ADDR
32823: GO 32771
32825: POP
32826: POP
// end ;
32827: GO 31304
32829: POP
32830: POP
// result := Replace ( result , 4 , tmp ) ;
32831: LD_ADDR_VAR 0 5
32835: PUSH
32836: LD_VAR 0 5
32840: PPUSH
32841: LD_INT 4
32843: PPUSH
32844: LD_VAR 0 8
32848: PPUSH
32849: CALL_OW 1
32853: ST_TO_ADDR
// end ;
32854: LD_VAR 0 5
32858: RET
// export function DangerAtRange ( unit , range ) ; begin
32859: LD_INT 0
32861: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32862: LD_ADDR_VAR 0 3
32866: PUSH
32867: LD_VAR 0 1
32871: PPUSH
32872: CALL_OW 255
32876: PPUSH
32877: LD_VAR 0 1
32881: PPUSH
32882: CALL_OW 250
32886: PPUSH
32887: LD_VAR 0 1
32891: PPUSH
32892: CALL_OW 251
32896: PPUSH
32897: LD_VAR 0 2
32901: PPUSH
32902: CALL 31156 0 4
32906: ST_TO_ADDR
// end ;
32907: LD_VAR 0 3
32911: RET
// export function DangerInArea ( side , area ) ; begin
32912: LD_INT 0
32914: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32915: LD_ADDR_VAR 0 3
32919: PUSH
32920: LD_VAR 0 2
32924: PPUSH
32925: LD_INT 81
32927: PUSH
32928: LD_VAR 0 1
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PPUSH
32937: CALL_OW 70
32941: ST_TO_ADDR
// end ;
32942: LD_VAR 0 3
32946: RET
// export function IsExtension ( b ) ; begin
32947: LD_INT 0
32949: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32950: LD_ADDR_VAR 0 2
32954: PUSH
32955: LD_VAR 0 1
32959: PUSH
32960: LD_INT 23
32962: PUSH
32963: LD_INT 20
32965: PUSH
32966: LD_INT 22
32968: PUSH
32969: LD_INT 17
32971: PUSH
32972: LD_INT 24
32974: PUSH
32975: LD_INT 21
32977: PUSH
32978: LD_INT 19
32980: PUSH
32981: LD_INT 16
32983: PUSH
32984: LD_INT 25
32986: PUSH
32987: LD_INT 18
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: IN
33002: ST_TO_ADDR
// end ;
33003: LD_VAR 0 2
33007: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33008: LD_INT 0
33010: PPUSH
33011: PPUSH
33012: PPUSH
// result := [ ] ;
33013: LD_ADDR_VAR 0 4
33017: PUSH
33018: EMPTY
33019: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33020: LD_ADDR_VAR 0 5
33024: PUSH
33025: LD_VAR 0 2
33029: PPUSH
33030: LD_INT 21
33032: PUSH
33033: LD_INT 3
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PPUSH
33040: CALL_OW 70
33044: ST_TO_ADDR
// if not tmp then
33045: LD_VAR 0 5
33049: NOT
33050: IFFALSE 33054
// exit ;
33052: GO 33118
// if checkLink then
33054: LD_VAR 0 3
33058: IFFALSE 33108
// begin for i in tmp do
33060: LD_ADDR_VAR 0 6
33064: PUSH
33065: LD_VAR 0 5
33069: PUSH
33070: FOR_IN
33071: IFFALSE 33106
// if GetBase ( i ) <> base then
33073: LD_VAR 0 6
33077: PPUSH
33078: CALL_OW 274
33082: PUSH
33083: LD_VAR 0 1
33087: NONEQUAL
33088: IFFALSE 33104
// ComLinkToBase ( base , i ) ;
33090: LD_VAR 0 1
33094: PPUSH
33095: LD_VAR 0 6
33099: PPUSH
33100: CALL_OW 169
33104: GO 33070
33106: POP
33107: POP
// end ; result := tmp ;
33108: LD_ADDR_VAR 0 4
33112: PUSH
33113: LD_VAR 0 5
33117: ST_TO_ADDR
// end ;
33118: LD_VAR 0 4
33122: RET
// export function ComComplete ( units , b ) ; var i ; begin
33123: LD_INT 0
33125: PPUSH
33126: PPUSH
// if not units then
33127: LD_VAR 0 1
33131: NOT
33132: IFFALSE 33136
// exit ;
33134: GO 33226
// for i in units do
33136: LD_ADDR_VAR 0 4
33140: PUSH
33141: LD_VAR 0 1
33145: PUSH
33146: FOR_IN
33147: IFFALSE 33224
// if BuildingStatus ( b ) = bs_build then
33149: LD_VAR 0 2
33153: PPUSH
33154: CALL_OW 461
33158: PUSH
33159: LD_INT 1
33161: EQUAL
33162: IFFALSE 33222
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33164: LD_VAR 0 4
33168: PPUSH
33169: LD_STRING h
33171: PUSH
33172: LD_VAR 0 2
33176: PPUSH
33177: CALL_OW 250
33181: PUSH
33182: LD_VAR 0 2
33186: PPUSH
33187: CALL_OW 251
33191: PUSH
33192: LD_VAR 0 2
33196: PUSH
33197: LD_INT 0
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: LD_INT 0
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: PUSH
33215: EMPTY
33216: LIST
33217: PPUSH
33218: CALL_OW 446
33222: GO 33146
33224: POP
33225: POP
// end ;
33226: LD_VAR 0 3
33230: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33231: LD_INT 0
33233: PPUSH
33234: PPUSH
33235: PPUSH
33236: PPUSH
33237: PPUSH
33238: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33239: LD_VAR 0 1
33243: NOT
33244: PUSH
33245: LD_VAR 0 1
33249: PPUSH
33250: CALL_OW 263
33254: PUSH
33255: LD_INT 2
33257: NONEQUAL
33258: OR
33259: IFFALSE 33263
// exit ;
33261: GO 33579
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33263: LD_ADDR_VAR 0 6
33267: PUSH
33268: LD_INT 22
33270: PUSH
33271: LD_VAR 0 1
33275: PPUSH
33276: CALL_OW 255
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 2
33287: PUSH
33288: LD_INT 30
33290: PUSH
33291: LD_INT 36
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 34
33300: PUSH
33301: LD_INT 31
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: LIST
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PPUSH
33317: CALL_OW 69
33321: ST_TO_ADDR
// if not tmp then
33322: LD_VAR 0 6
33326: NOT
33327: IFFALSE 33331
// exit ;
33329: GO 33579
// result := [ ] ;
33331: LD_ADDR_VAR 0 2
33335: PUSH
33336: EMPTY
33337: ST_TO_ADDR
// for i in tmp do
33338: LD_ADDR_VAR 0 3
33342: PUSH
33343: LD_VAR 0 6
33347: PUSH
33348: FOR_IN
33349: IFFALSE 33420
// begin t := UnitsInside ( i ) ;
33351: LD_ADDR_VAR 0 4
33355: PUSH
33356: LD_VAR 0 3
33360: PPUSH
33361: CALL_OW 313
33365: ST_TO_ADDR
// if t then
33366: LD_VAR 0 4
33370: IFFALSE 33418
// for j in t do
33372: LD_ADDR_VAR 0 7
33376: PUSH
33377: LD_VAR 0 4
33381: PUSH
33382: FOR_IN
33383: IFFALSE 33416
// result := Replace ( result , result + 1 , j ) ;
33385: LD_ADDR_VAR 0 2
33389: PUSH
33390: LD_VAR 0 2
33394: PPUSH
33395: LD_VAR 0 2
33399: PUSH
33400: LD_INT 1
33402: PLUS
33403: PPUSH
33404: LD_VAR 0 7
33408: PPUSH
33409: CALL_OW 1
33413: ST_TO_ADDR
33414: GO 33382
33416: POP
33417: POP
// end ;
33418: GO 33348
33420: POP
33421: POP
// if not result then
33422: LD_VAR 0 2
33426: NOT
33427: IFFALSE 33431
// exit ;
33429: GO 33579
// mech := result [ 1 ] ;
33431: LD_ADDR_VAR 0 5
33435: PUSH
33436: LD_VAR 0 2
33440: PUSH
33441: LD_INT 1
33443: ARRAY
33444: ST_TO_ADDR
// if result > 1 then
33445: LD_VAR 0 2
33449: PUSH
33450: LD_INT 1
33452: GREATER
33453: IFFALSE 33565
// begin for i = 2 to result do
33455: LD_ADDR_VAR 0 3
33459: PUSH
33460: DOUBLE
33461: LD_INT 2
33463: DEC
33464: ST_TO_ADDR
33465: LD_VAR 0 2
33469: PUSH
33470: FOR_TO
33471: IFFALSE 33563
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33473: LD_ADDR_VAR 0 4
33477: PUSH
33478: LD_VAR 0 2
33482: PUSH
33483: LD_VAR 0 3
33487: ARRAY
33488: PPUSH
33489: LD_INT 3
33491: PPUSH
33492: CALL_OW 259
33496: PUSH
33497: LD_VAR 0 2
33501: PUSH
33502: LD_VAR 0 3
33506: ARRAY
33507: PPUSH
33508: CALL_OW 432
33512: MINUS
33513: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33514: LD_VAR 0 4
33518: PUSH
33519: LD_VAR 0 5
33523: PPUSH
33524: LD_INT 3
33526: PPUSH
33527: CALL_OW 259
33531: PUSH
33532: LD_VAR 0 5
33536: PPUSH
33537: CALL_OW 432
33541: MINUS
33542: GREATEREQUAL
33543: IFFALSE 33561
// mech := result [ i ] ;
33545: LD_ADDR_VAR 0 5
33549: PUSH
33550: LD_VAR 0 2
33554: PUSH
33555: LD_VAR 0 3
33559: ARRAY
33560: ST_TO_ADDR
// end ;
33561: GO 33470
33563: POP
33564: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33565: LD_VAR 0 1
33569: PPUSH
33570: LD_VAR 0 5
33574: PPUSH
33575: CALL_OW 135
// end ;
33579: LD_VAR 0 2
33583: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33584: LD_INT 0
33586: PPUSH
33587: PPUSH
33588: PPUSH
33589: PPUSH
33590: PPUSH
33591: PPUSH
33592: PPUSH
33593: PPUSH
33594: PPUSH
33595: PPUSH
33596: PPUSH
33597: PPUSH
33598: PPUSH
// result := [ ] ;
33599: LD_ADDR_VAR 0 7
33603: PUSH
33604: EMPTY
33605: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33606: LD_VAR 0 1
33610: PPUSH
33611: CALL_OW 266
33615: PUSH
33616: LD_INT 0
33618: PUSH
33619: LD_INT 1
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: IN
33626: NOT
33627: IFFALSE 33631
// exit ;
33629: GO 35265
// if name then
33631: LD_VAR 0 3
33635: IFFALSE 33651
// SetBName ( base_dep , name ) ;
33637: LD_VAR 0 1
33641: PPUSH
33642: LD_VAR 0 3
33646: PPUSH
33647: CALL_OW 500
// base := GetBase ( base_dep ) ;
33651: LD_ADDR_VAR 0 15
33655: PUSH
33656: LD_VAR 0 1
33660: PPUSH
33661: CALL_OW 274
33665: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33666: LD_ADDR_VAR 0 16
33670: PUSH
33671: LD_VAR 0 1
33675: PPUSH
33676: CALL_OW 255
33680: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33681: LD_ADDR_VAR 0 17
33685: PUSH
33686: LD_VAR 0 1
33690: PPUSH
33691: CALL_OW 248
33695: ST_TO_ADDR
// if sources then
33696: LD_VAR 0 5
33700: IFFALSE 33747
// for i = 1 to 3 do
33702: LD_ADDR_VAR 0 8
33706: PUSH
33707: DOUBLE
33708: LD_INT 1
33710: DEC
33711: ST_TO_ADDR
33712: LD_INT 3
33714: PUSH
33715: FOR_TO
33716: IFFALSE 33745
// AddResourceType ( base , i , sources [ i ] ) ;
33718: LD_VAR 0 15
33722: PPUSH
33723: LD_VAR 0 8
33727: PPUSH
33728: LD_VAR 0 5
33732: PUSH
33733: LD_VAR 0 8
33737: ARRAY
33738: PPUSH
33739: CALL_OW 276
33743: GO 33715
33745: POP
33746: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33747: LD_ADDR_VAR 0 18
33751: PUSH
33752: LD_VAR 0 15
33756: PPUSH
33757: LD_VAR 0 2
33761: PPUSH
33762: LD_INT 1
33764: PPUSH
33765: CALL 33008 0 3
33769: ST_TO_ADDR
// InitHc ;
33770: CALL_OW 19
// InitUc ;
33774: CALL_OW 18
// uc_side := side ;
33778: LD_ADDR_OWVAR 20
33782: PUSH
33783: LD_VAR 0 16
33787: ST_TO_ADDR
// uc_nation := nation ;
33788: LD_ADDR_OWVAR 21
33792: PUSH
33793: LD_VAR 0 17
33797: ST_TO_ADDR
// if buildings then
33798: LD_VAR 0 18
33802: IFFALSE 35124
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33804: LD_ADDR_VAR 0 19
33808: PUSH
33809: LD_VAR 0 18
33813: PPUSH
33814: LD_INT 2
33816: PUSH
33817: LD_INT 30
33819: PUSH
33820: LD_INT 29
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 30
33829: PUSH
33830: LD_INT 30
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: LIST
33841: PPUSH
33842: CALL_OW 72
33846: ST_TO_ADDR
// if tmp then
33847: LD_VAR 0 19
33851: IFFALSE 33899
// for i in tmp do
33853: LD_ADDR_VAR 0 8
33857: PUSH
33858: LD_VAR 0 19
33862: PUSH
33863: FOR_IN
33864: IFFALSE 33897
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33866: LD_VAR 0 8
33870: PPUSH
33871: CALL_OW 250
33875: PPUSH
33876: LD_VAR 0 8
33880: PPUSH
33881: CALL_OW 251
33885: PPUSH
33886: LD_VAR 0 16
33890: PPUSH
33891: CALL_OW 441
33895: GO 33863
33897: POP
33898: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33899: LD_VAR 0 18
33903: PPUSH
33904: LD_INT 2
33906: PUSH
33907: LD_INT 30
33909: PUSH
33910: LD_INT 32
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 30
33919: PUSH
33920: LD_INT 33
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: LIST
33931: PPUSH
33932: CALL_OW 72
33936: IFFALSE 34024
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33938: LD_ADDR_VAR 0 8
33942: PUSH
33943: LD_VAR 0 18
33947: PPUSH
33948: LD_INT 2
33950: PUSH
33951: LD_INT 30
33953: PUSH
33954: LD_INT 32
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 30
33963: PUSH
33964: LD_INT 33
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: LIST
33975: PPUSH
33976: CALL_OW 72
33980: PUSH
33981: FOR_IN
33982: IFFALSE 34022
// begin if not GetBWeapon ( i ) then
33984: LD_VAR 0 8
33988: PPUSH
33989: CALL_OW 269
33993: NOT
33994: IFFALSE 34020
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33996: LD_VAR 0 8
34000: PPUSH
34001: LD_VAR 0 8
34005: PPUSH
34006: LD_VAR 0 2
34010: PPUSH
34011: CALL 35270 0 2
34015: PPUSH
34016: CALL_OW 431
// end ;
34020: GO 33981
34022: POP
34023: POP
// end ; for i = 1 to personel do
34024: LD_ADDR_VAR 0 8
34028: PUSH
34029: DOUBLE
34030: LD_INT 1
34032: DEC
34033: ST_TO_ADDR
34034: LD_VAR 0 6
34038: PUSH
34039: FOR_TO
34040: IFFALSE 35104
// begin if i > 4 then
34042: LD_VAR 0 8
34046: PUSH
34047: LD_INT 4
34049: GREATER
34050: IFFALSE 34054
// break ;
34052: GO 35104
// case i of 1 :
34054: LD_VAR 0 8
34058: PUSH
34059: LD_INT 1
34061: DOUBLE
34062: EQUAL
34063: IFTRUE 34067
34065: GO 34147
34067: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34068: LD_ADDR_VAR 0 12
34072: PUSH
34073: LD_VAR 0 18
34077: PPUSH
34078: LD_INT 22
34080: PUSH
34081: LD_VAR 0 16
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 58
34092: PUSH
34093: EMPTY
34094: LIST
34095: PUSH
34096: LD_INT 2
34098: PUSH
34099: LD_INT 30
34101: PUSH
34102: LD_INT 32
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 30
34111: PUSH
34112: LD_INT 4
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 30
34121: PUSH
34122: LD_INT 5
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: LIST
34139: PPUSH
34140: CALL_OW 72
34144: ST_TO_ADDR
34145: GO 34369
34147: LD_INT 2
34149: DOUBLE
34150: EQUAL
34151: IFTRUE 34155
34153: GO 34217
34155: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34156: LD_ADDR_VAR 0 12
34160: PUSH
34161: LD_VAR 0 18
34165: PPUSH
34166: LD_INT 22
34168: PUSH
34169: LD_VAR 0 16
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 2
34180: PUSH
34181: LD_INT 30
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 30
34193: PUSH
34194: LD_INT 1
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: LIST
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PPUSH
34210: CALL_OW 72
34214: ST_TO_ADDR
34215: GO 34369
34217: LD_INT 3
34219: DOUBLE
34220: EQUAL
34221: IFTRUE 34225
34223: GO 34287
34225: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34226: LD_ADDR_VAR 0 12
34230: PUSH
34231: LD_VAR 0 18
34235: PPUSH
34236: LD_INT 22
34238: PUSH
34239: LD_VAR 0 16
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 2
34250: PUSH
34251: LD_INT 30
34253: PUSH
34254: LD_INT 2
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 30
34263: PUSH
34264: LD_INT 3
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: LIST
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PPUSH
34280: CALL_OW 72
34284: ST_TO_ADDR
34285: GO 34369
34287: LD_INT 4
34289: DOUBLE
34290: EQUAL
34291: IFTRUE 34295
34293: GO 34368
34295: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34296: LD_ADDR_VAR 0 12
34300: PUSH
34301: LD_VAR 0 18
34305: PPUSH
34306: LD_INT 22
34308: PUSH
34309: LD_VAR 0 16
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 2
34320: PUSH
34321: LD_INT 30
34323: PUSH
34324: LD_INT 6
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 30
34333: PUSH
34334: LD_INT 7
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 30
34343: PUSH
34344: LD_INT 8
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PPUSH
34361: CALL_OW 72
34365: ST_TO_ADDR
34366: GO 34369
34368: POP
// if i = 1 then
34369: LD_VAR 0 8
34373: PUSH
34374: LD_INT 1
34376: EQUAL
34377: IFFALSE 34488
// begin tmp := [ ] ;
34379: LD_ADDR_VAR 0 19
34383: PUSH
34384: EMPTY
34385: ST_TO_ADDR
// for j in f do
34386: LD_ADDR_VAR 0 9
34390: PUSH
34391: LD_VAR 0 12
34395: PUSH
34396: FOR_IN
34397: IFFALSE 34470
// if GetBType ( j ) = b_bunker then
34399: LD_VAR 0 9
34403: PPUSH
34404: CALL_OW 266
34408: PUSH
34409: LD_INT 32
34411: EQUAL
34412: IFFALSE 34439
// tmp := Insert ( tmp , 1 , j ) else
34414: LD_ADDR_VAR 0 19
34418: PUSH
34419: LD_VAR 0 19
34423: PPUSH
34424: LD_INT 1
34426: PPUSH
34427: LD_VAR 0 9
34431: PPUSH
34432: CALL_OW 2
34436: ST_TO_ADDR
34437: GO 34468
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34439: LD_ADDR_VAR 0 19
34443: PUSH
34444: LD_VAR 0 19
34448: PPUSH
34449: LD_VAR 0 19
34453: PUSH
34454: LD_INT 1
34456: PLUS
34457: PPUSH
34458: LD_VAR 0 9
34462: PPUSH
34463: CALL_OW 2
34467: ST_TO_ADDR
34468: GO 34396
34470: POP
34471: POP
// if tmp then
34472: LD_VAR 0 19
34476: IFFALSE 34488
// f := tmp ;
34478: LD_ADDR_VAR 0 12
34482: PUSH
34483: LD_VAR 0 19
34487: ST_TO_ADDR
// end ; x := personel [ i ] ;
34488: LD_ADDR_VAR 0 13
34492: PUSH
34493: LD_VAR 0 6
34497: PUSH
34498: LD_VAR 0 8
34502: ARRAY
34503: ST_TO_ADDR
// if x = - 1 then
34504: LD_VAR 0 13
34508: PUSH
34509: LD_INT 1
34511: NEG
34512: EQUAL
34513: IFFALSE 34722
// begin for j in f do
34515: LD_ADDR_VAR 0 9
34519: PUSH
34520: LD_VAR 0 12
34524: PUSH
34525: FOR_IN
34526: IFFALSE 34718
// repeat InitHc ;
34528: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34532: LD_VAR 0 9
34536: PPUSH
34537: CALL_OW 266
34541: PUSH
34542: LD_INT 5
34544: EQUAL
34545: IFFALSE 34615
// begin if UnitsInside ( j ) < 3 then
34547: LD_VAR 0 9
34551: PPUSH
34552: CALL_OW 313
34556: PUSH
34557: LD_INT 3
34559: LESS
34560: IFFALSE 34596
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34562: LD_INT 0
34564: PPUSH
34565: LD_INT 5
34567: PUSH
34568: LD_INT 8
34570: PUSH
34571: LD_INT 9
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: LIST
34578: PUSH
34579: LD_VAR 0 17
34583: ARRAY
34584: PPUSH
34585: LD_VAR 0 4
34589: PPUSH
34590: CALL_OW 380
34594: GO 34613
// PrepareHuman ( false , i , skill ) ;
34596: LD_INT 0
34598: PPUSH
34599: LD_VAR 0 8
34603: PPUSH
34604: LD_VAR 0 4
34608: PPUSH
34609: CALL_OW 380
// end else
34613: GO 34632
// PrepareHuman ( false , i , skill ) ;
34615: LD_INT 0
34617: PPUSH
34618: LD_VAR 0 8
34622: PPUSH
34623: LD_VAR 0 4
34627: PPUSH
34628: CALL_OW 380
// un := CreateHuman ;
34632: LD_ADDR_VAR 0 14
34636: PUSH
34637: CALL_OW 44
34641: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34642: LD_ADDR_VAR 0 7
34646: PUSH
34647: LD_VAR 0 7
34651: PPUSH
34652: LD_INT 1
34654: PPUSH
34655: LD_VAR 0 14
34659: PPUSH
34660: CALL_OW 2
34664: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34665: LD_VAR 0 14
34669: PPUSH
34670: LD_VAR 0 9
34674: PPUSH
34675: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34679: LD_VAR 0 9
34683: PPUSH
34684: CALL_OW 313
34688: PUSH
34689: LD_INT 6
34691: EQUAL
34692: PUSH
34693: LD_VAR 0 9
34697: PPUSH
34698: CALL_OW 266
34702: PUSH
34703: LD_INT 32
34705: PUSH
34706: LD_INT 31
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: IN
34713: OR
34714: IFFALSE 34528
34716: GO 34525
34718: POP
34719: POP
// end else
34720: GO 35102
// for j = 1 to x do
34722: LD_ADDR_VAR 0 9
34726: PUSH
34727: DOUBLE
34728: LD_INT 1
34730: DEC
34731: ST_TO_ADDR
34732: LD_VAR 0 13
34736: PUSH
34737: FOR_TO
34738: IFFALSE 35100
// begin InitHc ;
34740: CALL_OW 19
// if not f then
34744: LD_VAR 0 12
34748: NOT
34749: IFFALSE 34838
// begin PrepareHuman ( false , i , skill ) ;
34751: LD_INT 0
34753: PPUSH
34754: LD_VAR 0 8
34758: PPUSH
34759: LD_VAR 0 4
34763: PPUSH
34764: CALL_OW 380
// un := CreateHuman ;
34768: LD_ADDR_VAR 0 14
34772: PUSH
34773: CALL_OW 44
34777: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34778: LD_ADDR_VAR 0 7
34782: PUSH
34783: LD_VAR 0 7
34787: PPUSH
34788: LD_INT 1
34790: PPUSH
34791: LD_VAR 0 14
34795: PPUSH
34796: CALL_OW 2
34800: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34801: LD_VAR 0 14
34805: PPUSH
34806: LD_VAR 0 1
34810: PPUSH
34811: CALL_OW 250
34815: PPUSH
34816: LD_VAR 0 1
34820: PPUSH
34821: CALL_OW 251
34825: PPUSH
34826: LD_INT 10
34828: PPUSH
34829: LD_INT 0
34831: PPUSH
34832: CALL_OW 50
// continue ;
34836: GO 34737
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34838: LD_VAR 0 12
34842: PUSH
34843: LD_INT 1
34845: ARRAY
34846: PPUSH
34847: CALL_OW 313
34851: PUSH
34852: LD_VAR 0 12
34856: PUSH
34857: LD_INT 1
34859: ARRAY
34860: PPUSH
34861: CALL_OW 266
34865: PUSH
34866: LD_INT 32
34868: PUSH
34869: LD_INT 31
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: IN
34876: AND
34877: PUSH
34878: LD_VAR 0 12
34882: PUSH
34883: LD_INT 1
34885: ARRAY
34886: PPUSH
34887: CALL_OW 313
34891: PUSH
34892: LD_INT 6
34894: EQUAL
34895: OR
34896: IFFALSE 34916
// f := Delete ( f , 1 ) ;
34898: LD_ADDR_VAR 0 12
34902: PUSH
34903: LD_VAR 0 12
34907: PPUSH
34908: LD_INT 1
34910: PPUSH
34911: CALL_OW 3
34915: ST_TO_ADDR
// if not f then
34916: LD_VAR 0 12
34920: NOT
34921: IFFALSE 34939
// begin x := x + 2 ;
34923: LD_ADDR_VAR 0 13
34927: PUSH
34928: LD_VAR 0 13
34932: PUSH
34933: LD_INT 2
34935: PLUS
34936: ST_TO_ADDR
// continue ;
34937: GO 34737
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34939: LD_VAR 0 12
34943: PUSH
34944: LD_INT 1
34946: ARRAY
34947: PPUSH
34948: CALL_OW 266
34952: PUSH
34953: LD_INT 5
34955: EQUAL
34956: IFFALSE 35030
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34958: LD_VAR 0 12
34962: PUSH
34963: LD_INT 1
34965: ARRAY
34966: PPUSH
34967: CALL_OW 313
34971: PUSH
34972: LD_INT 3
34974: LESS
34975: IFFALSE 35011
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34977: LD_INT 0
34979: PPUSH
34980: LD_INT 5
34982: PUSH
34983: LD_INT 8
34985: PUSH
34986: LD_INT 9
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: LIST
34993: PUSH
34994: LD_VAR 0 17
34998: ARRAY
34999: PPUSH
35000: LD_VAR 0 4
35004: PPUSH
35005: CALL_OW 380
35009: GO 35028
// PrepareHuman ( false , i , skill ) ;
35011: LD_INT 0
35013: PPUSH
35014: LD_VAR 0 8
35018: PPUSH
35019: LD_VAR 0 4
35023: PPUSH
35024: CALL_OW 380
// end else
35028: GO 35047
// PrepareHuman ( false , i , skill ) ;
35030: LD_INT 0
35032: PPUSH
35033: LD_VAR 0 8
35037: PPUSH
35038: LD_VAR 0 4
35042: PPUSH
35043: CALL_OW 380
// un := CreateHuman ;
35047: LD_ADDR_VAR 0 14
35051: PUSH
35052: CALL_OW 44
35056: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35057: LD_ADDR_VAR 0 7
35061: PUSH
35062: LD_VAR 0 7
35066: PPUSH
35067: LD_INT 1
35069: PPUSH
35070: LD_VAR 0 14
35074: PPUSH
35075: CALL_OW 2
35079: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35080: LD_VAR 0 14
35084: PPUSH
35085: LD_VAR 0 12
35089: PUSH
35090: LD_INT 1
35092: ARRAY
35093: PPUSH
35094: CALL_OW 52
// end ;
35098: GO 34737
35100: POP
35101: POP
// end ;
35102: GO 34039
35104: POP
35105: POP
// result := result ^ buildings ;
35106: LD_ADDR_VAR 0 7
35110: PUSH
35111: LD_VAR 0 7
35115: PUSH
35116: LD_VAR 0 18
35120: ADD
35121: ST_TO_ADDR
// end else
35122: GO 35265
// begin for i = 1 to personel do
35124: LD_ADDR_VAR 0 8
35128: PUSH
35129: DOUBLE
35130: LD_INT 1
35132: DEC
35133: ST_TO_ADDR
35134: LD_VAR 0 6
35138: PUSH
35139: FOR_TO
35140: IFFALSE 35263
// begin if i > 4 then
35142: LD_VAR 0 8
35146: PUSH
35147: LD_INT 4
35149: GREATER
35150: IFFALSE 35154
// break ;
35152: GO 35263
// x := personel [ i ] ;
35154: LD_ADDR_VAR 0 13
35158: PUSH
35159: LD_VAR 0 6
35163: PUSH
35164: LD_VAR 0 8
35168: ARRAY
35169: ST_TO_ADDR
// if x = - 1 then
35170: LD_VAR 0 13
35174: PUSH
35175: LD_INT 1
35177: NEG
35178: EQUAL
35179: IFFALSE 35183
// continue ;
35181: GO 35139
// PrepareHuman ( false , i , skill ) ;
35183: LD_INT 0
35185: PPUSH
35186: LD_VAR 0 8
35190: PPUSH
35191: LD_VAR 0 4
35195: PPUSH
35196: CALL_OW 380
// un := CreateHuman ;
35200: LD_ADDR_VAR 0 14
35204: PUSH
35205: CALL_OW 44
35209: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35210: LD_VAR 0 14
35214: PPUSH
35215: LD_VAR 0 1
35219: PPUSH
35220: CALL_OW 250
35224: PPUSH
35225: LD_VAR 0 1
35229: PPUSH
35230: CALL_OW 251
35234: PPUSH
35235: LD_INT 10
35237: PPUSH
35238: LD_INT 0
35240: PPUSH
35241: CALL_OW 50
// result := result ^ un ;
35245: LD_ADDR_VAR 0 7
35249: PUSH
35250: LD_VAR 0 7
35254: PUSH
35255: LD_VAR 0 14
35259: ADD
35260: ST_TO_ADDR
// end ;
35261: GO 35139
35263: POP
35264: POP
// end ; end ;
35265: LD_VAR 0 7
35269: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35270: LD_INT 0
35272: PPUSH
35273: PPUSH
35274: PPUSH
35275: PPUSH
35276: PPUSH
35277: PPUSH
35278: PPUSH
35279: PPUSH
35280: PPUSH
35281: PPUSH
35282: PPUSH
35283: PPUSH
35284: PPUSH
35285: PPUSH
35286: PPUSH
35287: PPUSH
// result := false ;
35288: LD_ADDR_VAR 0 3
35292: PUSH
35293: LD_INT 0
35295: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35296: LD_VAR 0 1
35300: NOT
35301: PUSH
35302: LD_VAR 0 1
35306: PPUSH
35307: CALL_OW 266
35311: PUSH
35312: LD_INT 32
35314: PUSH
35315: LD_INT 33
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: IN
35322: NOT
35323: OR
35324: IFFALSE 35328
// exit ;
35326: GO 36437
// nat := GetNation ( tower ) ;
35328: LD_ADDR_VAR 0 12
35332: PUSH
35333: LD_VAR 0 1
35337: PPUSH
35338: CALL_OW 248
35342: ST_TO_ADDR
// side := GetSide ( tower ) ;
35343: LD_ADDR_VAR 0 16
35347: PUSH
35348: LD_VAR 0 1
35352: PPUSH
35353: CALL_OW 255
35357: ST_TO_ADDR
// x := GetX ( tower ) ;
35358: LD_ADDR_VAR 0 10
35362: PUSH
35363: LD_VAR 0 1
35367: PPUSH
35368: CALL_OW 250
35372: ST_TO_ADDR
// y := GetY ( tower ) ;
35373: LD_ADDR_VAR 0 11
35377: PUSH
35378: LD_VAR 0 1
35382: PPUSH
35383: CALL_OW 251
35387: ST_TO_ADDR
// if not x or not y then
35388: LD_VAR 0 10
35392: NOT
35393: PUSH
35394: LD_VAR 0 11
35398: NOT
35399: OR
35400: IFFALSE 35404
// exit ;
35402: GO 36437
// weapon := 0 ;
35404: LD_ADDR_VAR 0 18
35408: PUSH
35409: LD_INT 0
35411: ST_TO_ADDR
// fac_list := [ ] ;
35412: LD_ADDR_VAR 0 17
35416: PUSH
35417: EMPTY
35418: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35419: LD_ADDR_VAR 0 6
35423: PUSH
35424: LD_VAR 0 1
35428: PPUSH
35429: CALL_OW 274
35433: PPUSH
35434: LD_VAR 0 2
35438: PPUSH
35439: LD_INT 0
35441: PPUSH
35442: CALL 33008 0 3
35446: PPUSH
35447: LD_INT 30
35449: PUSH
35450: LD_INT 3
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PPUSH
35457: CALL_OW 72
35461: ST_TO_ADDR
// if not factories then
35462: LD_VAR 0 6
35466: NOT
35467: IFFALSE 35471
// exit ;
35469: GO 36437
// for i in factories do
35471: LD_ADDR_VAR 0 8
35475: PUSH
35476: LD_VAR 0 6
35480: PUSH
35481: FOR_IN
35482: IFFALSE 35507
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35484: LD_ADDR_VAR 0 17
35488: PUSH
35489: LD_VAR 0 17
35493: PUSH
35494: LD_VAR 0 8
35498: PPUSH
35499: CALL_OW 478
35503: UNION
35504: ST_TO_ADDR
35505: GO 35481
35507: POP
35508: POP
// if not fac_list then
35509: LD_VAR 0 17
35513: NOT
35514: IFFALSE 35518
// exit ;
35516: GO 36437
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35518: LD_ADDR_VAR 0 5
35522: PUSH
35523: LD_INT 4
35525: PUSH
35526: LD_INT 5
35528: PUSH
35529: LD_INT 9
35531: PUSH
35532: LD_INT 10
35534: PUSH
35535: LD_INT 6
35537: PUSH
35538: LD_INT 7
35540: PUSH
35541: LD_INT 11
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 27
35555: PUSH
35556: LD_INT 28
35558: PUSH
35559: LD_INT 26
35561: PUSH
35562: LD_INT 30
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 43
35573: PUSH
35574: LD_INT 44
35576: PUSH
35577: LD_INT 46
35579: PUSH
35580: LD_INT 45
35582: PUSH
35583: LD_INT 47
35585: PUSH
35586: LD_INT 49
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: LIST
35601: PUSH
35602: LD_VAR 0 12
35606: ARRAY
35607: ST_TO_ADDR
// list := list isect fac_list ;
35608: LD_ADDR_VAR 0 5
35612: PUSH
35613: LD_VAR 0 5
35617: PUSH
35618: LD_VAR 0 17
35622: ISECT
35623: ST_TO_ADDR
// if not list then
35624: LD_VAR 0 5
35628: NOT
35629: IFFALSE 35633
// exit ;
35631: GO 36437
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35633: LD_VAR 0 12
35637: PUSH
35638: LD_INT 3
35640: EQUAL
35641: PUSH
35642: LD_INT 49
35644: PUSH
35645: LD_VAR 0 5
35649: IN
35650: AND
35651: PUSH
35652: LD_INT 31
35654: PPUSH
35655: LD_VAR 0 16
35659: PPUSH
35660: CALL_OW 321
35664: PUSH
35665: LD_INT 2
35667: EQUAL
35668: AND
35669: IFFALSE 35729
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35671: LD_INT 22
35673: PUSH
35674: LD_VAR 0 16
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 35
35685: PUSH
35686: LD_INT 49
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 91
35695: PUSH
35696: LD_VAR 0 1
35700: PUSH
35701: LD_INT 10
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: LIST
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: LIST
35713: PPUSH
35714: CALL_OW 69
35718: NOT
35719: IFFALSE 35729
// weapon := ru_time_lapser ;
35721: LD_ADDR_VAR 0 18
35725: PUSH
35726: LD_INT 49
35728: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35729: LD_VAR 0 12
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: IN
35744: PUSH
35745: LD_INT 11
35747: PUSH
35748: LD_VAR 0 5
35752: IN
35753: PUSH
35754: LD_INT 30
35756: PUSH
35757: LD_VAR 0 5
35761: IN
35762: OR
35763: AND
35764: PUSH
35765: LD_INT 6
35767: PPUSH
35768: LD_VAR 0 16
35772: PPUSH
35773: CALL_OW 321
35777: PUSH
35778: LD_INT 2
35780: EQUAL
35781: AND
35782: IFFALSE 35947
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35784: LD_INT 22
35786: PUSH
35787: LD_VAR 0 16
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: LD_INT 35
35801: PUSH
35802: LD_INT 11
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 35
35811: PUSH
35812: LD_INT 30
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 91
35826: PUSH
35827: LD_VAR 0 1
35831: PUSH
35832: LD_INT 18
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: LIST
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: LIST
35844: PPUSH
35845: CALL_OW 69
35849: NOT
35850: PUSH
35851: LD_INT 22
35853: PUSH
35854: LD_VAR 0 16
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 2
35865: PUSH
35866: LD_INT 30
35868: PUSH
35869: LD_INT 32
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 30
35878: PUSH
35879: LD_INT 33
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 91
35893: PUSH
35894: LD_VAR 0 1
35898: PUSH
35899: LD_INT 12
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: LIST
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: LIST
35911: PUSH
35912: EMPTY
35913: LIST
35914: PPUSH
35915: CALL_OW 69
35919: PUSH
35920: LD_INT 2
35922: GREATER
35923: AND
35924: IFFALSE 35947
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35926: LD_ADDR_VAR 0 18
35930: PUSH
35931: LD_INT 11
35933: PUSH
35934: LD_INT 30
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_VAR 0 12
35945: ARRAY
35946: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35947: LD_VAR 0 18
35951: NOT
35952: PUSH
35953: LD_INT 40
35955: PPUSH
35956: LD_VAR 0 16
35960: PPUSH
35961: CALL_OW 321
35965: PUSH
35966: LD_INT 2
35968: EQUAL
35969: AND
35970: PUSH
35971: LD_INT 7
35973: PUSH
35974: LD_VAR 0 5
35978: IN
35979: PUSH
35980: LD_INT 28
35982: PUSH
35983: LD_VAR 0 5
35987: IN
35988: OR
35989: PUSH
35990: LD_INT 45
35992: PUSH
35993: LD_VAR 0 5
35997: IN
35998: OR
35999: AND
36000: IFFALSE 36254
// begin hex := GetHexInfo ( x , y ) ;
36002: LD_ADDR_VAR 0 4
36006: PUSH
36007: LD_VAR 0 10
36011: PPUSH
36012: LD_VAR 0 11
36016: PPUSH
36017: CALL_OW 546
36021: ST_TO_ADDR
// if hex [ 1 ] then
36022: LD_VAR 0 4
36026: PUSH
36027: LD_INT 1
36029: ARRAY
36030: IFFALSE 36034
// exit ;
36032: GO 36437
// height := hex [ 2 ] ;
36034: LD_ADDR_VAR 0 15
36038: PUSH
36039: LD_VAR 0 4
36043: PUSH
36044: LD_INT 2
36046: ARRAY
36047: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36048: LD_ADDR_VAR 0 14
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: LD_INT 2
36058: PUSH
36059: LD_INT 3
36061: PUSH
36062: LD_INT 5
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: ST_TO_ADDR
// for i in tmp do
36071: LD_ADDR_VAR 0 8
36075: PUSH
36076: LD_VAR 0 14
36080: PUSH
36081: FOR_IN
36082: IFFALSE 36252
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36084: LD_ADDR_VAR 0 9
36088: PUSH
36089: LD_VAR 0 10
36093: PPUSH
36094: LD_VAR 0 8
36098: PPUSH
36099: LD_INT 5
36101: PPUSH
36102: CALL_OW 272
36106: PUSH
36107: LD_VAR 0 11
36111: PPUSH
36112: LD_VAR 0 8
36116: PPUSH
36117: LD_INT 5
36119: PPUSH
36120: CALL_OW 273
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36129: LD_VAR 0 9
36133: PUSH
36134: LD_INT 1
36136: ARRAY
36137: PPUSH
36138: LD_VAR 0 9
36142: PUSH
36143: LD_INT 2
36145: ARRAY
36146: PPUSH
36147: CALL_OW 488
36151: IFFALSE 36250
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36153: LD_ADDR_VAR 0 4
36157: PUSH
36158: LD_VAR 0 9
36162: PUSH
36163: LD_INT 1
36165: ARRAY
36166: PPUSH
36167: LD_VAR 0 9
36171: PUSH
36172: LD_INT 2
36174: ARRAY
36175: PPUSH
36176: CALL_OW 546
36180: ST_TO_ADDR
// if hex [ 1 ] then
36181: LD_VAR 0 4
36185: PUSH
36186: LD_INT 1
36188: ARRAY
36189: IFFALSE 36193
// continue ;
36191: GO 36081
// h := hex [ 2 ] ;
36193: LD_ADDR_VAR 0 13
36197: PUSH
36198: LD_VAR 0 4
36202: PUSH
36203: LD_INT 2
36205: ARRAY
36206: ST_TO_ADDR
// if h + 7 < height then
36207: LD_VAR 0 13
36211: PUSH
36212: LD_INT 7
36214: PLUS
36215: PUSH
36216: LD_VAR 0 15
36220: LESS
36221: IFFALSE 36250
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36223: LD_ADDR_VAR 0 18
36227: PUSH
36228: LD_INT 7
36230: PUSH
36231: LD_INT 28
36233: PUSH
36234: LD_INT 45
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: LIST
36241: PUSH
36242: LD_VAR 0 12
36246: ARRAY
36247: ST_TO_ADDR
// break ;
36248: GO 36252
// end ; end ; end ;
36250: GO 36081
36252: POP
36253: POP
// end ; if not weapon then
36254: LD_VAR 0 18
36258: NOT
36259: IFFALSE 36319
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36261: LD_ADDR_VAR 0 5
36265: PUSH
36266: LD_VAR 0 5
36270: PUSH
36271: LD_INT 11
36273: PUSH
36274: LD_INT 30
36276: PUSH
36277: LD_INT 49
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: LIST
36284: DIFF
36285: ST_TO_ADDR
// if not list then
36286: LD_VAR 0 5
36290: NOT
36291: IFFALSE 36295
// exit ;
36293: GO 36437
// weapon := list [ rand ( 1 , list ) ] ;
36295: LD_ADDR_VAR 0 18
36299: PUSH
36300: LD_VAR 0 5
36304: PUSH
36305: LD_INT 1
36307: PPUSH
36308: LD_VAR 0 5
36312: PPUSH
36313: CALL_OW 12
36317: ARRAY
36318: ST_TO_ADDR
// end ; if weapon then
36319: LD_VAR 0 18
36323: IFFALSE 36437
// begin tmp := CostOfWeapon ( weapon ) ;
36325: LD_ADDR_VAR 0 14
36329: PUSH
36330: LD_VAR 0 18
36334: PPUSH
36335: CALL_OW 451
36339: ST_TO_ADDR
// j := GetBase ( tower ) ;
36340: LD_ADDR_VAR 0 9
36344: PUSH
36345: LD_VAR 0 1
36349: PPUSH
36350: CALL_OW 274
36354: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36355: LD_VAR 0 9
36359: PPUSH
36360: LD_INT 1
36362: PPUSH
36363: CALL_OW 275
36367: PUSH
36368: LD_VAR 0 14
36372: PUSH
36373: LD_INT 1
36375: ARRAY
36376: GREATEREQUAL
36377: PUSH
36378: LD_VAR 0 9
36382: PPUSH
36383: LD_INT 2
36385: PPUSH
36386: CALL_OW 275
36390: PUSH
36391: LD_VAR 0 14
36395: PUSH
36396: LD_INT 2
36398: ARRAY
36399: GREATEREQUAL
36400: AND
36401: PUSH
36402: LD_VAR 0 9
36406: PPUSH
36407: LD_INT 3
36409: PPUSH
36410: CALL_OW 275
36414: PUSH
36415: LD_VAR 0 14
36419: PUSH
36420: LD_INT 3
36422: ARRAY
36423: GREATEREQUAL
36424: AND
36425: IFFALSE 36437
// result := weapon ;
36427: LD_ADDR_VAR 0 3
36431: PUSH
36432: LD_VAR 0 18
36436: ST_TO_ADDR
// end ; end ;
36437: LD_VAR 0 3
36441: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36442: LD_INT 0
36444: PPUSH
36445: PPUSH
// result := true ;
36446: LD_ADDR_VAR 0 3
36450: PUSH
36451: LD_INT 1
36453: ST_TO_ADDR
// if array1 = array2 then
36454: LD_VAR 0 1
36458: PUSH
36459: LD_VAR 0 2
36463: EQUAL
36464: IFFALSE 36524
// begin for i = 1 to array1 do
36466: LD_ADDR_VAR 0 4
36470: PUSH
36471: DOUBLE
36472: LD_INT 1
36474: DEC
36475: ST_TO_ADDR
36476: LD_VAR 0 1
36480: PUSH
36481: FOR_TO
36482: IFFALSE 36520
// if array1 [ i ] <> array2 [ i ] then
36484: LD_VAR 0 1
36488: PUSH
36489: LD_VAR 0 4
36493: ARRAY
36494: PUSH
36495: LD_VAR 0 2
36499: PUSH
36500: LD_VAR 0 4
36504: ARRAY
36505: NONEQUAL
36506: IFFALSE 36518
// begin result := false ;
36508: LD_ADDR_VAR 0 3
36512: PUSH
36513: LD_INT 0
36515: ST_TO_ADDR
// break ;
36516: GO 36520
// end ;
36518: GO 36481
36520: POP
36521: POP
// end else
36522: GO 36532
// result := false ;
36524: LD_ADDR_VAR 0 3
36528: PUSH
36529: LD_INT 0
36531: ST_TO_ADDR
// end ;
36532: LD_VAR 0 3
36536: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36537: LD_INT 0
36539: PPUSH
36540: PPUSH
// if not array1 or not array2 then
36541: LD_VAR 0 1
36545: NOT
36546: PUSH
36547: LD_VAR 0 2
36551: NOT
36552: OR
36553: IFFALSE 36557
// exit ;
36555: GO 36621
// result := true ;
36557: LD_ADDR_VAR 0 3
36561: PUSH
36562: LD_INT 1
36564: ST_TO_ADDR
// for i = 1 to array1 do
36565: LD_ADDR_VAR 0 4
36569: PUSH
36570: DOUBLE
36571: LD_INT 1
36573: DEC
36574: ST_TO_ADDR
36575: LD_VAR 0 1
36579: PUSH
36580: FOR_TO
36581: IFFALSE 36619
// if array1 [ i ] <> array2 [ i ] then
36583: LD_VAR 0 1
36587: PUSH
36588: LD_VAR 0 4
36592: ARRAY
36593: PUSH
36594: LD_VAR 0 2
36598: PUSH
36599: LD_VAR 0 4
36603: ARRAY
36604: NONEQUAL
36605: IFFALSE 36617
// begin result := false ;
36607: LD_ADDR_VAR 0 3
36611: PUSH
36612: LD_INT 0
36614: ST_TO_ADDR
// break ;
36615: GO 36619
// end ;
36617: GO 36580
36619: POP
36620: POP
// end ;
36621: LD_VAR 0 3
36625: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36626: LD_INT 0
36628: PPUSH
36629: PPUSH
36630: PPUSH
// pom := GetBase ( fac ) ;
36631: LD_ADDR_VAR 0 5
36635: PUSH
36636: LD_VAR 0 1
36640: PPUSH
36641: CALL_OW 274
36645: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36646: LD_ADDR_VAR 0 4
36650: PUSH
36651: LD_VAR 0 2
36655: PUSH
36656: LD_INT 1
36658: ARRAY
36659: PPUSH
36660: LD_VAR 0 2
36664: PUSH
36665: LD_INT 2
36667: ARRAY
36668: PPUSH
36669: LD_VAR 0 2
36673: PUSH
36674: LD_INT 3
36676: ARRAY
36677: PPUSH
36678: LD_VAR 0 2
36682: PUSH
36683: LD_INT 4
36685: ARRAY
36686: PPUSH
36687: CALL_OW 449
36691: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36692: LD_ADDR_VAR 0 3
36696: PUSH
36697: LD_VAR 0 5
36701: PPUSH
36702: LD_INT 1
36704: PPUSH
36705: CALL_OW 275
36709: PUSH
36710: LD_VAR 0 4
36714: PUSH
36715: LD_INT 1
36717: ARRAY
36718: GREATEREQUAL
36719: PUSH
36720: LD_VAR 0 5
36724: PPUSH
36725: LD_INT 2
36727: PPUSH
36728: CALL_OW 275
36732: PUSH
36733: LD_VAR 0 4
36737: PUSH
36738: LD_INT 2
36740: ARRAY
36741: GREATEREQUAL
36742: AND
36743: PUSH
36744: LD_VAR 0 5
36748: PPUSH
36749: LD_INT 3
36751: PPUSH
36752: CALL_OW 275
36756: PUSH
36757: LD_VAR 0 4
36761: PUSH
36762: LD_INT 3
36764: ARRAY
36765: GREATEREQUAL
36766: AND
36767: ST_TO_ADDR
// end ;
36768: LD_VAR 0 3
36772: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36773: LD_INT 0
36775: PPUSH
36776: PPUSH
36777: PPUSH
36778: PPUSH
// pom := GetBase ( building ) ;
36779: LD_ADDR_VAR 0 3
36783: PUSH
36784: LD_VAR 0 1
36788: PPUSH
36789: CALL_OW 274
36793: ST_TO_ADDR
// if not pom then
36794: LD_VAR 0 3
36798: NOT
36799: IFFALSE 36803
// exit ;
36801: GO 36973
// btype := GetBType ( building ) ;
36803: LD_ADDR_VAR 0 5
36807: PUSH
36808: LD_VAR 0 1
36812: PPUSH
36813: CALL_OW 266
36817: ST_TO_ADDR
// if btype = b_armoury then
36818: LD_VAR 0 5
36822: PUSH
36823: LD_INT 4
36825: EQUAL
36826: IFFALSE 36836
// btype := b_barracks ;
36828: LD_ADDR_VAR 0 5
36832: PUSH
36833: LD_INT 5
36835: ST_TO_ADDR
// if btype = b_depot then
36836: LD_VAR 0 5
36840: PUSH
36841: LD_INT 0
36843: EQUAL
36844: IFFALSE 36854
// btype := b_warehouse ;
36846: LD_ADDR_VAR 0 5
36850: PUSH
36851: LD_INT 1
36853: ST_TO_ADDR
// if btype = b_workshop then
36854: LD_VAR 0 5
36858: PUSH
36859: LD_INT 2
36861: EQUAL
36862: IFFALSE 36872
// btype := b_factory ;
36864: LD_ADDR_VAR 0 5
36868: PUSH
36869: LD_INT 3
36871: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36872: LD_ADDR_VAR 0 4
36876: PUSH
36877: LD_VAR 0 5
36881: PPUSH
36882: LD_VAR 0 1
36886: PPUSH
36887: CALL_OW 248
36891: PPUSH
36892: CALL_OW 450
36896: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36897: LD_ADDR_VAR 0 2
36901: PUSH
36902: LD_VAR 0 3
36906: PPUSH
36907: LD_INT 1
36909: PPUSH
36910: CALL_OW 275
36914: PUSH
36915: LD_VAR 0 4
36919: PUSH
36920: LD_INT 1
36922: ARRAY
36923: GREATEREQUAL
36924: PUSH
36925: LD_VAR 0 3
36929: PPUSH
36930: LD_INT 2
36932: PPUSH
36933: CALL_OW 275
36937: PUSH
36938: LD_VAR 0 4
36942: PUSH
36943: LD_INT 2
36945: ARRAY
36946: GREATEREQUAL
36947: AND
36948: PUSH
36949: LD_VAR 0 3
36953: PPUSH
36954: LD_INT 3
36956: PPUSH
36957: CALL_OW 275
36961: PUSH
36962: LD_VAR 0 4
36966: PUSH
36967: LD_INT 3
36969: ARRAY
36970: GREATEREQUAL
36971: AND
36972: ST_TO_ADDR
// end ;
36973: LD_VAR 0 2
36977: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36978: LD_INT 0
36980: PPUSH
36981: PPUSH
36982: PPUSH
// pom := GetBase ( building ) ;
36983: LD_ADDR_VAR 0 4
36987: PUSH
36988: LD_VAR 0 1
36992: PPUSH
36993: CALL_OW 274
36997: ST_TO_ADDR
// if not pom then
36998: LD_VAR 0 4
37002: NOT
37003: IFFALSE 37007
// exit ;
37005: GO 37108
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37007: LD_ADDR_VAR 0 5
37011: PUSH
37012: LD_VAR 0 2
37016: PPUSH
37017: LD_VAR 0 1
37021: PPUSH
37022: CALL_OW 248
37026: PPUSH
37027: CALL_OW 450
37031: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37032: LD_ADDR_VAR 0 3
37036: PUSH
37037: LD_VAR 0 4
37041: PPUSH
37042: LD_INT 1
37044: PPUSH
37045: CALL_OW 275
37049: PUSH
37050: LD_VAR 0 5
37054: PUSH
37055: LD_INT 1
37057: ARRAY
37058: GREATEREQUAL
37059: PUSH
37060: LD_VAR 0 4
37064: PPUSH
37065: LD_INT 2
37067: PPUSH
37068: CALL_OW 275
37072: PUSH
37073: LD_VAR 0 5
37077: PUSH
37078: LD_INT 2
37080: ARRAY
37081: GREATEREQUAL
37082: AND
37083: PUSH
37084: LD_VAR 0 4
37088: PPUSH
37089: LD_INT 3
37091: PPUSH
37092: CALL_OW 275
37096: PUSH
37097: LD_VAR 0 5
37101: PUSH
37102: LD_INT 3
37104: ARRAY
37105: GREATEREQUAL
37106: AND
37107: ST_TO_ADDR
// end ;
37108: LD_VAR 0 3
37112: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37113: LD_INT 0
37115: PPUSH
37116: PPUSH
37117: PPUSH
37118: PPUSH
37119: PPUSH
37120: PPUSH
37121: PPUSH
37122: PPUSH
37123: PPUSH
37124: PPUSH
37125: PPUSH
// result := false ;
37126: LD_ADDR_VAR 0 8
37130: PUSH
37131: LD_INT 0
37133: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37134: LD_VAR 0 5
37138: NOT
37139: PUSH
37140: LD_VAR 0 1
37144: NOT
37145: OR
37146: PUSH
37147: LD_VAR 0 2
37151: NOT
37152: OR
37153: PUSH
37154: LD_VAR 0 3
37158: NOT
37159: OR
37160: IFFALSE 37164
// exit ;
37162: GO 37978
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37164: LD_ADDR_VAR 0 14
37168: PUSH
37169: LD_VAR 0 1
37173: PPUSH
37174: LD_VAR 0 2
37178: PPUSH
37179: LD_VAR 0 3
37183: PPUSH
37184: LD_VAR 0 4
37188: PPUSH
37189: LD_VAR 0 5
37193: PUSH
37194: LD_INT 1
37196: ARRAY
37197: PPUSH
37198: CALL_OW 248
37202: PPUSH
37203: LD_INT 0
37205: PPUSH
37206: CALL 39215 0 6
37210: ST_TO_ADDR
// if not hexes then
37211: LD_VAR 0 14
37215: NOT
37216: IFFALSE 37220
// exit ;
37218: GO 37978
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37220: LD_ADDR_VAR 0 17
37224: PUSH
37225: LD_VAR 0 5
37229: PPUSH
37230: LD_INT 22
37232: PUSH
37233: LD_VAR 0 13
37237: PPUSH
37238: CALL_OW 255
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 2
37249: PUSH
37250: LD_INT 30
37252: PUSH
37253: LD_INT 0
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 30
37262: PUSH
37263: LD_INT 1
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: LIST
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PPUSH
37279: CALL_OW 72
37283: ST_TO_ADDR
// for i = 1 to hexes do
37284: LD_ADDR_VAR 0 9
37288: PUSH
37289: DOUBLE
37290: LD_INT 1
37292: DEC
37293: ST_TO_ADDR
37294: LD_VAR 0 14
37298: PUSH
37299: FOR_TO
37300: IFFALSE 37976
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37302: LD_ADDR_VAR 0 13
37306: PUSH
37307: LD_VAR 0 14
37311: PUSH
37312: LD_VAR 0 9
37316: ARRAY
37317: PUSH
37318: LD_INT 1
37320: ARRAY
37321: PPUSH
37322: LD_VAR 0 14
37326: PUSH
37327: LD_VAR 0 9
37331: ARRAY
37332: PUSH
37333: LD_INT 2
37335: ARRAY
37336: PPUSH
37337: CALL_OW 428
37341: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37342: LD_VAR 0 14
37346: PUSH
37347: LD_VAR 0 9
37351: ARRAY
37352: PUSH
37353: LD_INT 1
37355: ARRAY
37356: PPUSH
37357: LD_VAR 0 14
37361: PUSH
37362: LD_VAR 0 9
37366: ARRAY
37367: PUSH
37368: LD_INT 2
37370: ARRAY
37371: PPUSH
37372: CALL_OW 351
37376: PUSH
37377: LD_VAR 0 14
37381: PUSH
37382: LD_VAR 0 9
37386: ARRAY
37387: PUSH
37388: LD_INT 1
37390: ARRAY
37391: PPUSH
37392: LD_VAR 0 14
37396: PUSH
37397: LD_VAR 0 9
37401: ARRAY
37402: PUSH
37403: LD_INT 2
37405: ARRAY
37406: PPUSH
37407: CALL_OW 488
37411: NOT
37412: OR
37413: PUSH
37414: LD_VAR 0 13
37418: PPUSH
37419: CALL_OW 247
37423: PUSH
37424: LD_INT 3
37426: EQUAL
37427: OR
37428: IFFALSE 37434
// exit ;
37430: POP
37431: POP
37432: GO 37978
// if not tmp then
37434: LD_VAR 0 13
37438: NOT
37439: IFFALSE 37443
// continue ;
37441: GO 37299
// result := true ;
37443: LD_ADDR_VAR 0 8
37447: PUSH
37448: LD_INT 1
37450: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37451: LD_VAR 0 6
37455: PUSH
37456: LD_VAR 0 13
37460: PPUSH
37461: CALL_OW 247
37465: PUSH
37466: LD_INT 2
37468: EQUAL
37469: AND
37470: PUSH
37471: LD_VAR 0 13
37475: PPUSH
37476: CALL_OW 263
37480: PUSH
37481: LD_INT 1
37483: EQUAL
37484: AND
37485: IFFALSE 37649
// begin if IsDrivenBy ( tmp ) then
37487: LD_VAR 0 13
37491: PPUSH
37492: CALL_OW 311
37496: IFFALSE 37500
// continue ;
37498: GO 37299
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37500: LD_VAR 0 6
37504: PPUSH
37505: LD_INT 3
37507: PUSH
37508: LD_INT 60
37510: PUSH
37511: EMPTY
37512: LIST
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 3
37520: PUSH
37521: LD_INT 55
37523: PUSH
37524: EMPTY
37525: LIST
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PPUSH
37535: CALL_OW 72
37539: IFFALSE 37647
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37541: LD_ADDR_VAR 0 18
37545: PUSH
37546: LD_VAR 0 6
37550: PPUSH
37551: LD_INT 3
37553: PUSH
37554: LD_INT 60
37556: PUSH
37557: EMPTY
37558: LIST
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 3
37566: PUSH
37567: LD_INT 55
37569: PUSH
37570: EMPTY
37571: LIST
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PPUSH
37581: CALL_OW 72
37585: PUSH
37586: LD_INT 1
37588: ARRAY
37589: ST_TO_ADDR
// if IsInUnit ( driver ) then
37590: LD_VAR 0 18
37594: PPUSH
37595: CALL_OW 310
37599: IFFALSE 37610
// ComExit ( driver ) ;
37601: LD_VAR 0 18
37605: PPUSH
37606: CALL 62399 0 1
// AddComEnterUnit ( driver , tmp ) ;
37610: LD_VAR 0 18
37614: PPUSH
37615: LD_VAR 0 13
37619: PPUSH
37620: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37624: LD_VAR 0 18
37628: PPUSH
37629: LD_VAR 0 7
37633: PPUSH
37634: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37638: LD_VAR 0 18
37642: PPUSH
37643: CALL_OW 181
// end ; continue ;
37647: GO 37299
// end ; if not cleaners or not tmp in cleaners then
37649: LD_VAR 0 6
37653: NOT
37654: PUSH
37655: LD_VAR 0 13
37659: PUSH
37660: LD_VAR 0 6
37664: IN
37665: NOT
37666: OR
37667: IFFALSE 37974
// begin if dep then
37669: LD_VAR 0 17
37673: IFFALSE 37809
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37675: LD_ADDR_VAR 0 16
37679: PUSH
37680: LD_VAR 0 17
37684: PUSH
37685: LD_INT 1
37687: ARRAY
37688: PPUSH
37689: CALL_OW 250
37693: PPUSH
37694: LD_VAR 0 17
37698: PUSH
37699: LD_INT 1
37701: ARRAY
37702: PPUSH
37703: CALL_OW 254
37707: PPUSH
37708: LD_INT 5
37710: PPUSH
37711: CALL_OW 272
37715: PUSH
37716: LD_VAR 0 17
37720: PUSH
37721: LD_INT 1
37723: ARRAY
37724: PPUSH
37725: CALL_OW 251
37729: PPUSH
37730: LD_VAR 0 17
37734: PUSH
37735: LD_INT 1
37737: ARRAY
37738: PPUSH
37739: CALL_OW 254
37743: PPUSH
37744: LD_INT 5
37746: PPUSH
37747: CALL_OW 273
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37756: LD_VAR 0 16
37760: PUSH
37761: LD_INT 1
37763: ARRAY
37764: PPUSH
37765: LD_VAR 0 16
37769: PUSH
37770: LD_INT 2
37772: ARRAY
37773: PPUSH
37774: CALL_OW 488
37778: IFFALSE 37809
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37780: LD_VAR 0 13
37784: PPUSH
37785: LD_VAR 0 16
37789: PUSH
37790: LD_INT 1
37792: ARRAY
37793: PPUSH
37794: LD_VAR 0 16
37798: PUSH
37799: LD_INT 2
37801: ARRAY
37802: PPUSH
37803: CALL_OW 111
// continue ;
37807: GO 37299
// end ; end ; r := GetDir ( tmp ) ;
37809: LD_ADDR_VAR 0 15
37813: PUSH
37814: LD_VAR 0 13
37818: PPUSH
37819: CALL_OW 254
37823: ST_TO_ADDR
// if r = 5 then
37824: LD_VAR 0 15
37828: PUSH
37829: LD_INT 5
37831: EQUAL
37832: IFFALSE 37842
// r := 0 ;
37834: LD_ADDR_VAR 0 15
37838: PUSH
37839: LD_INT 0
37841: ST_TO_ADDR
// for j = r to 5 do
37842: LD_ADDR_VAR 0 10
37846: PUSH
37847: DOUBLE
37848: LD_VAR 0 15
37852: DEC
37853: ST_TO_ADDR
37854: LD_INT 5
37856: PUSH
37857: FOR_TO
37858: IFFALSE 37972
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37860: LD_ADDR_VAR 0 11
37864: PUSH
37865: LD_VAR 0 13
37869: PPUSH
37870: CALL_OW 250
37874: PPUSH
37875: LD_VAR 0 10
37879: PPUSH
37880: LD_INT 2
37882: PPUSH
37883: CALL_OW 272
37887: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37888: LD_ADDR_VAR 0 12
37892: PUSH
37893: LD_VAR 0 13
37897: PPUSH
37898: CALL_OW 251
37902: PPUSH
37903: LD_VAR 0 10
37907: PPUSH
37908: LD_INT 2
37910: PPUSH
37911: CALL_OW 273
37915: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37916: LD_VAR 0 11
37920: PPUSH
37921: LD_VAR 0 12
37925: PPUSH
37926: CALL_OW 488
37930: PUSH
37931: LD_VAR 0 11
37935: PPUSH
37936: LD_VAR 0 12
37940: PPUSH
37941: CALL_OW 428
37945: NOT
37946: AND
37947: IFFALSE 37970
// begin ComMoveXY ( tmp , _x , _y ) ;
37949: LD_VAR 0 13
37953: PPUSH
37954: LD_VAR 0 11
37958: PPUSH
37959: LD_VAR 0 12
37963: PPUSH
37964: CALL_OW 111
// break ;
37968: GO 37972
// end ; end ;
37970: GO 37857
37972: POP
37973: POP
// end ; end ;
37974: GO 37299
37976: POP
37977: POP
// end ;
37978: LD_VAR 0 8
37982: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37983: LD_INT 0
37985: PPUSH
// result := true ;
37986: LD_ADDR_VAR 0 3
37990: PUSH
37991: LD_INT 1
37993: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37994: LD_VAR 0 2
37998: PUSH
37999: LD_INT 24
38001: DOUBLE
38002: EQUAL
38003: IFTRUE 38013
38005: LD_INT 33
38007: DOUBLE
38008: EQUAL
38009: IFTRUE 38013
38011: GO 38038
38013: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38014: LD_ADDR_VAR 0 3
38018: PUSH
38019: LD_INT 32
38021: PPUSH
38022: LD_VAR 0 1
38026: PPUSH
38027: CALL_OW 321
38031: PUSH
38032: LD_INT 2
38034: EQUAL
38035: ST_TO_ADDR
38036: GO 38358
38038: LD_INT 20
38040: DOUBLE
38041: EQUAL
38042: IFTRUE 38046
38044: GO 38071
38046: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38047: LD_ADDR_VAR 0 3
38051: PUSH
38052: LD_INT 6
38054: PPUSH
38055: LD_VAR 0 1
38059: PPUSH
38060: CALL_OW 321
38064: PUSH
38065: LD_INT 2
38067: EQUAL
38068: ST_TO_ADDR
38069: GO 38358
38071: LD_INT 22
38073: DOUBLE
38074: EQUAL
38075: IFTRUE 38085
38077: LD_INT 36
38079: DOUBLE
38080: EQUAL
38081: IFTRUE 38085
38083: GO 38110
38085: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38086: LD_ADDR_VAR 0 3
38090: PUSH
38091: LD_INT 15
38093: PPUSH
38094: LD_VAR 0 1
38098: PPUSH
38099: CALL_OW 321
38103: PUSH
38104: LD_INT 2
38106: EQUAL
38107: ST_TO_ADDR
38108: GO 38358
38110: LD_INT 30
38112: DOUBLE
38113: EQUAL
38114: IFTRUE 38118
38116: GO 38143
38118: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38119: LD_ADDR_VAR 0 3
38123: PUSH
38124: LD_INT 20
38126: PPUSH
38127: LD_VAR 0 1
38131: PPUSH
38132: CALL_OW 321
38136: PUSH
38137: LD_INT 2
38139: EQUAL
38140: ST_TO_ADDR
38141: GO 38358
38143: LD_INT 28
38145: DOUBLE
38146: EQUAL
38147: IFTRUE 38157
38149: LD_INT 21
38151: DOUBLE
38152: EQUAL
38153: IFTRUE 38157
38155: GO 38182
38157: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38158: LD_ADDR_VAR 0 3
38162: PUSH
38163: LD_INT 21
38165: PPUSH
38166: LD_VAR 0 1
38170: PPUSH
38171: CALL_OW 321
38175: PUSH
38176: LD_INT 2
38178: EQUAL
38179: ST_TO_ADDR
38180: GO 38358
38182: LD_INT 16
38184: DOUBLE
38185: EQUAL
38186: IFTRUE 38190
38188: GO 38217
38190: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38191: LD_ADDR_VAR 0 3
38195: PUSH
38196: LD_EXP 71
38200: PPUSH
38201: LD_VAR 0 1
38205: PPUSH
38206: CALL_OW 321
38210: PUSH
38211: LD_INT 2
38213: EQUAL
38214: ST_TO_ADDR
38215: GO 38358
38217: LD_INT 19
38219: DOUBLE
38220: EQUAL
38221: IFTRUE 38231
38223: LD_INT 23
38225: DOUBLE
38226: EQUAL
38227: IFTRUE 38231
38229: GO 38258
38231: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38232: LD_ADDR_VAR 0 3
38236: PUSH
38237: LD_EXP 70
38241: PPUSH
38242: LD_VAR 0 1
38246: PPUSH
38247: CALL_OW 321
38251: PUSH
38252: LD_INT 2
38254: EQUAL
38255: ST_TO_ADDR
38256: GO 38358
38258: LD_INT 17
38260: DOUBLE
38261: EQUAL
38262: IFTRUE 38266
38264: GO 38291
38266: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38267: LD_ADDR_VAR 0 3
38271: PUSH
38272: LD_INT 39
38274: PPUSH
38275: LD_VAR 0 1
38279: PPUSH
38280: CALL_OW 321
38284: PUSH
38285: LD_INT 2
38287: EQUAL
38288: ST_TO_ADDR
38289: GO 38358
38291: LD_INT 18
38293: DOUBLE
38294: EQUAL
38295: IFTRUE 38299
38297: GO 38324
38299: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38300: LD_ADDR_VAR 0 3
38304: PUSH
38305: LD_INT 40
38307: PPUSH
38308: LD_VAR 0 1
38312: PPUSH
38313: CALL_OW 321
38317: PUSH
38318: LD_INT 2
38320: EQUAL
38321: ST_TO_ADDR
38322: GO 38358
38324: LD_INT 27
38326: DOUBLE
38327: EQUAL
38328: IFTRUE 38332
38330: GO 38357
38332: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38333: LD_ADDR_VAR 0 3
38337: PUSH
38338: LD_INT 35
38340: PPUSH
38341: LD_VAR 0 1
38345: PPUSH
38346: CALL_OW 321
38350: PUSH
38351: LD_INT 2
38353: EQUAL
38354: ST_TO_ADDR
38355: GO 38358
38357: POP
// end ;
38358: LD_VAR 0 3
38362: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38363: LD_INT 0
38365: PPUSH
38366: PPUSH
38367: PPUSH
38368: PPUSH
38369: PPUSH
38370: PPUSH
38371: PPUSH
38372: PPUSH
38373: PPUSH
38374: PPUSH
38375: PPUSH
// result := false ;
38376: LD_ADDR_VAR 0 6
38380: PUSH
38381: LD_INT 0
38383: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38384: LD_VAR 0 1
38388: NOT
38389: PUSH
38390: LD_VAR 0 1
38394: PPUSH
38395: CALL_OW 266
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: IN
38410: NOT
38411: OR
38412: PUSH
38413: LD_VAR 0 2
38417: NOT
38418: OR
38419: PUSH
38420: LD_VAR 0 5
38424: PUSH
38425: LD_INT 0
38427: PUSH
38428: LD_INT 1
38430: PUSH
38431: LD_INT 2
38433: PUSH
38434: LD_INT 3
38436: PUSH
38437: LD_INT 4
38439: PUSH
38440: LD_INT 5
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: IN
38451: NOT
38452: OR
38453: PUSH
38454: LD_VAR 0 3
38458: PPUSH
38459: LD_VAR 0 4
38463: PPUSH
38464: CALL_OW 488
38468: NOT
38469: OR
38470: IFFALSE 38474
// exit ;
38472: GO 39210
// side := GetSide ( depot ) ;
38474: LD_ADDR_VAR 0 9
38478: PUSH
38479: LD_VAR 0 1
38483: PPUSH
38484: CALL_OW 255
38488: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38489: LD_VAR 0 9
38493: PPUSH
38494: LD_VAR 0 2
38498: PPUSH
38499: CALL 37983 0 2
38503: NOT
38504: IFFALSE 38508
// exit ;
38506: GO 39210
// pom := GetBase ( depot ) ;
38508: LD_ADDR_VAR 0 10
38512: PUSH
38513: LD_VAR 0 1
38517: PPUSH
38518: CALL_OW 274
38522: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38523: LD_ADDR_VAR 0 11
38527: PUSH
38528: LD_VAR 0 2
38532: PPUSH
38533: LD_VAR 0 1
38537: PPUSH
38538: CALL_OW 248
38542: PPUSH
38543: CALL_OW 450
38547: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38548: LD_VAR 0 10
38552: PPUSH
38553: LD_INT 1
38555: PPUSH
38556: CALL_OW 275
38560: PUSH
38561: LD_VAR 0 11
38565: PUSH
38566: LD_INT 1
38568: ARRAY
38569: GREATEREQUAL
38570: PUSH
38571: LD_VAR 0 10
38575: PPUSH
38576: LD_INT 2
38578: PPUSH
38579: CALL_OW 275
38583: PUSH
38584: LD_VAR 0 11
38588: PUSH
38589: LD_INT 2
38591: ARRAY
38592: GREATEREQUAL
38593: AND
38594: PUSH
38595: LD_VAR 0 10
38599: PPUSH
38600: LD_INT 3
38602: PPUSH
38603: CALL_OW 275
38607: PUSH
38608: LD_VAR 0 11
38612: PUSH
38613: LD_INT 3
38615: ARRAY
38616: GREATEREQUAL
38617: AND
38618: NOT
38619: IFFALSE 38623
// exit ;
38621: GO 39210
// if GetBType ( depot ) = b_depot then
38623: LD_VAR 0 1
38627: PPUSH
38628: CALL_OW 266
38632: PUSH
38633: LD_INT 0
38635: EQUAL
38636: IFFALSE 38648
// dist := 28 else
38638: LD_ADDR_VAR 0 14
38642: PUSH
38643: LD_INT 28
38645: ST_TO_ADDR
38646: GO 38656
// dist := 36 ;
38648: LD_ADDR_VAR 0 14
38652: PUSH
38653: LD_INT 36
38655: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38656: LD_VAR 0 1
38660: PPUSH
38661: LD_VAR 0 3
38665: PPUSH
38666: LD_VAR 0 4
38670: PPUSH
38671: CALL_OW 297
38675: PUSH
38676: LD_VAR 0 14
38680: GREATER
38681: IFFALSE 38685
// exit ;
38683: GO 39210
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38685: LD_ADDR_VAR 0 12
38689: PUSH
38690: LD_VAR 0 2
38694: PPUSH
38695: LD_VAR 0 3
38699: PPUSH
38700: LD_VAR 0 4
38704: PPUSH
38705: LD_VAR 0 5
38709: PPUSH
38710: LD_VAR 0 1
38714: PPUSH
38715: CALL_OW 248
38719: PPUSH
38720: LD_INT 0
38722: PPUSH
38723: CALL 39215 0 6
38727: ST_TO_ADDR
// if not hexes then
38728: LD_VAR 0 12
38732: NOT
38733: IFFALSE 38737
// exit ;
38735: GO 39210
// hex := GetHexInfo ( x , y ) ;
38737: LD_ADDR_VAR 0 15
38741: PUSH
38742: LD_VAR 0 3
38746: PPUSH
38747: LD_VAR 0 4
38751: PPUSH
38752: CALL_OW 546
38756: ST_TO_ADDR
// if hex [ 1 ] then
38757: LD_VAR 0 15
38761: PUSH
38762: LD_INT 1
38764: ARRAY
38765: IFFALSE 38769
// exit ;
38767: GO 39210
// height := hex [ 2 ] ;
38769: LD_ADDR_VAR 0 13
38773: PUSH
38774: LD_VAR 0 15
38778: PUSH
38779: LD_INT 2
38781: ARRAY
38782: ST_TO_ADDR
// for i = 1 to hexes do
38783: LD_ADDR_VAR 0 7
38787: PUSH
38788: DOUBLE
38789: LD_INT 1
38791: DEC
38792: ST_TO_ADDR
38793: LD_VAR 0 12
38797: PUSH
38798: FOR_TO
38799: IFFALSE 39129
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38801: LD_VAR 0 12
38805: PUSH
38806: LD_VAR 0 7
38810: ARRAY
38811: PUSH
38812: LD_INT 1
38814: ARRAY
38815: PPUSH
38816: LD_VAR 0 12
38820: PUSH
38821: LD_VAR 0 7
38825: ARRAY
38826: PUSH
38827: LD_INT 2
38829: ARRAY
38830: PPUSH
38831: CALL_OW 488
38835: NOT
38836: PUSH
38837: LD_VAR 0 12
38841: PUSH
38842: LD_VAR 0 7
38846: ARRAY
38847: PUSH
38848: LD_INT 1
38850: ARRAY
38851: PPUSH
38852: LD_VAR 0 12
38856: PUSH
38857: LD_VAR 0 7
38861: ARRAY
38862: PUSH
38863: LD_INT 2
38865: ARRAY
38866: PPUSH
38867: CALL_OW 428
38871: PUSH
38872: LD_INT 0
38874: GREATER
38875: OR
38876: PUSH
38877: LD_VAR 0 12
38881: PUSH
38882: LD_VAR 0 7
38886: ARRAY
38887: PUSH
38888: LD_INT 1
38890: ARRAY
38891: PPUSH
38892: LD_VAR 0 12
38896: PUSH
38897: LD_VAR 0 7
38901: ARRAY
38902: PUSH
38903: LD_INT 2
38905: ARRAY
38906: PPUSH
38907: CALL_OW 351
38911: OR
38912: IFFALSE 38918
// exit ;
38914: POP
38915: POP
38916: GO 39210
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38918: LD_ADDR_VAR 0 8
38922: PUSH
38923: LD_VAR 0 12
38927: PUSH
38928: LD_VAR 0 7
38932: ARRAY
38933: PUSH
38934: LD_INT 1
38936: ARRAY
38937: PPUSH
38938: LD_VAR 0 12
38942: PUSH
38943: LD_VAR 0 7
38947: ARRAY
38948: PUSH
38949: LD_INT 2
38951: ARRAY
38952: PPUSH
38953: CALL_OW 546
38957: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38958: LD_VAR 0 8
38962: PUSH
38963: LD_INT 1
38965: ARRAY
38966: PUSH
38967: LD_VAR 0 8
38971: PUSH
38972: LD_INT 2
38974: ARRAY
38975: PUSH
38976: LD_VAR 0 13
38980: PUSH
38981: LD_INT 2
38983: PLUS
38984: GREATER
38985: OR
38986: PUSH
38987: LD_VAR 0 8
38991: PUSH
38992: LD_INT 2
38994: ARRAY
38995: PUSH
38996: LD_VAR 0 13
39000: PUSH
39001: LD_INT 2
39003: MINUS
39004: LESS
39005: OR
39006: PUSH
39007: LD_VAR 0 8
39011: PUSH
39012: LD_INT 3
39014: ARRAY
39015: PUSH
39016: LD_INT 0
39018: PUSH
39019: LD_INT 8
39021: PUSH
39022: LD_INT 9
39024: PUSH
39025: LD_INT 10
39027: PUSH
39028: LD_INT 11
39030: PUSH
39031: LD_INT 12
39033: PUSH
39034: LD_INT 13
39036: PUSH
39037: LD_INT 16
39039: PUSH
39040: LD_INT 17
39042: PUSH
39043: LD_INT 18
39045: PUSH
39046: LD_INT 19
39048: PUSH
39049: LD_INT 20
39051: PUSH
39052: LD_INT 21
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: IN
39070: NOT
39071: OR
39072: PUSH
39073: LD_VAR 0 8
39077: PUSH
39078: LD_INT 5
39080: ARRAY
39081: NOT
39082: OR
39083: PUSH
39084: LD_VAR 0 8
39088: PUSH
39089: LD_INT 6
39091: ARRAY
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: LD_INT 2
39098: PUSH
39099: LD_INT 7
39101: PUSH
39102: LD_INT 9
39104: PUSH
39105: LD_INT 10
39107: PUSH
39108: LD_INT 11
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: IN
39119: NOT
39120: OR
39121: IFFALSE 39127
// exit ;
39123: POP
39124: POP
39125: GO 39210
// end ;
39127: GO 38798
39129: POP
39130: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39131: LD_VAR 0 9
39135: PPUSH
39136: LD_VAR 0 3
39140: PPUSH
39141: LD_VAR 0 4
39145: PPUSH
39146: LD_INT 20
39148: PPUSH
39149: CALL 31156 0 4
39153: PUSH
39154: LD_INT 4
39156: ARRAY
39157: IFFALSE 39161
// exit ;
39159: GO 39210
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39161: LD_VAR 0 2
39165: PUSH
39166: LD_INT 29
39168: PUSH
39169: LD_INT 30
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: IN
39176: PUSH
39177: LD_VAR 0 3
39181: PPUSH
39182: LD_VAR 0 4
39186: PPUSH
39187: LD_VAR 0 9
39191: PPUSH
39192: CALL_OW 440
39196: NOT
39197: AND
39198: IFFALSE 39202
// exit ;
39200: GO 39210
// result := true ;
39202: LD_ADDR_VAR 0 6
39206: PUSH
39207: LD_INT 1
39209: ST_TO_ADDR
// end ;
39210: LD_VAR 0 6
39214: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39215: LD_INT 0
39217: PPUSH
39218: PPUSH
39219: PPUSH
39220: PPUSH
39221: PPUSH
39222: PPUSH
39223: PPUSH
39224: PPUSH
39225: PPUSH
39226: PPUSH
39227: PPUSH
39228: PPUSH
39229: PPUSH
39230: PPUSH
39231: PPUSH
39232: PPUSH
39233: PPUSH
39234: PPUSH
39235: PPUSH
39236: PPUSH
39237: PPUSH
39238: PPUSH
39239: PPUSH
39240: PPUSH
39241: PPUSH
39242: PPUSH
39243: PPUSH
39244: PPUSH
39245: PPUSH
39246: PPUSH
39247: PPUSH
39248: PPUSH
39249: PPUSH
39250: PPUSH
39251: PPUSH
39252: PPUSH
39253: PPUSH
39254: PPUSH
39255: PPUSH
39256: PPUSH
39257: PPUSH
39258: PPUSH
39259: PPUSH
39260: PPUSH
39261: PPUSH
39262: PPUSH
39263: PPUSH
39264: PPUSH
39265: PPUSH
39266: PPUSH
39267: PPUSH
39268: PPUSH
39269: PPUSH
39270: PPUSH
39271: PPUSH
39272: PPUSH
39273: PPUSH
39274: PPUSH
// result = [ ] ;
39275: LD_ADDR_VAR 0 7
39279: PUSH
39280: EMPTY
39281: ST_TO_ADDR
// temp_list = [ ] ;
39282: LD_ADDR_VAR 0 9
39286: PUSH
39287: EMPTY
39288: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39289: LD_VAR 0 4
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: LD_INT 1
39299: PUSH
39300: LD_INT 2
39302: PUSH
39303: LD_INT 3
39305: PUSH
39306: LD_INT 4
39308: PUSH
39309: LD_INT 5
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: IN
39320: NOT
39321: PUSH
39322: LD_VAR 0 1
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: IN
39337: PUSH
39338: LD_VAR 0 5
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: LD_INT 2
39348: PUSH
39349: LD_INT 3
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: LIST
39356: IN
39357: NOT
39358: AND
39359: OR
39360: IFFALSE 39364
// exit ;
39362: GO 57755
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39364: LD_VAR 0 1
39368: PUSH
39369: LD_INT 6
39371: PUSH
39372: LD_INT 7
39374: PUSH
39375: LD_INT 8
39377: PUSH
39378: LD_INT 13
39380: PUSH
39381: LD_INT 12
39383: PUSH
39384: LD_INT 15
39386: PUSH
39387: LD_INT 11
39389: PUSH
39390: LD_INT 14
39392: PUSH
39393: LD_INT 10
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: IN
39407: IFFALSE 39417
// btype = b_lab ;
39409: LD_ADDR_VAR 0 1
39413: PUSH
39414: LD_INT 6
39416: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39417: LD_VAR 0 6
39421: PUSH
39422: LD_INT 0
39424: PUSH
39425: LD_INT 1
39427: PUSH
39428: LD_INT 2
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: LIST
39435: IN
39436: NOT
39437: PUSH
39438: LD_VAR 0 1
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: LD_INT 1
39448: PUSH
39449: LD_INT 2
39451: PUSH
39452: LD_INT 3
39454: PUSH
39455: LD_INT 6
39457: PUSH
39458: LD_INT 36
39460: PUSH
39461: LD_INT 4
39463: PUSH
39464: LD_INT 5
39466: PUSH
39467: LD_INT 31
39469: PUSH
39470: LD_INT 32
39472: PUSH
39473: LD_INT 33
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: IN
39489: NOT
39490: PUSH
39491: LD_VAR 0 6
39495: PUSH
39496: LD_INT 1
39498: EQUAL
39499: AND
39500: OR
39501: PUSH
39502: LD_VAR 0 1
39506: PUSH
39507: LD_INT 2
39509: PUSH
39510: LD_INT 3
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: IN
39517: NOT
39518: PUSH
39519: LD_VAR 0 6
39523: PUSH
39524: LD_INT 2
39526: EQUAL
39527: AND
39528: OR
39529: IFFALSE 39539
// mode = 0 ;
39531: LD_ADDR_VAR 0 6
39535: PUSH
39536: LD_INT 0
39538: ST_TO_ADDR
// case mode of 0 :
39539: LD_VAR 0 6
39543: PUSH
39544: LD_INT 0
39546: DOUBLE
39547: EQUAL
39548: IFTRUE 39552
39550: GO 51005
39552: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39553: LD_ADDR_VAR 0 11
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: LD_INT 0
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 0
39570: PUSH
39571: LD_INT 1
39573: NEG
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 1
39591: PUSH
39592: LD_INT 1
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 0
39601: PUSH
39602: LD_INT 1
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: PUSH
39613: LD_INT 0
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 1
39622: NEG
39623: PUSH
39624: LD_INT 1
39626: NEG
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: PUSH
39636: LD_INT 2
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 0
39646: PUSH
39647: LD_INT 2
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: LD_INT 1
39660: NEG
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: LD_INT 2
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: LD_INT 2
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: LD_INT 3
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 0
39709: PUSH
39710: LD_INT 3
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: NEG
39720: PUSH
39721: LD_INT 2
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39746: LD_ADDR_VAR 0 12
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: LD_INT 1
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: NEG
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 2
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 2
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 1
39858: NEG
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 2
39869: NEG
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 2
39880: NEG
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 2
39892: NEG
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 3
39903: NEG
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 3
39914: NEG
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39942: LD_ADDR_VAR 0 13
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: LD_INT 1
39962: NEG
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 1
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_INT 1
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: LD_INT 2
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 2
40045: PUSH
40046: LD_INT 2
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: LD_INT 2
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 2
40065: NEG
40066: PUSH
40067: LD_INT 1
40069: NEG
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 2
40077: NEG
40078: PUSH
40079: LD_INT 2
40081: NEG
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 2
40089: NEG
40090: PUSH
40091: LD_INT 3
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 3
40101: NEG
40102: PUSH
40103: LD_INT 2
40105: NEG
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 3
40113: NEG
40114: PUSH
40115: LD_INT 3
40117: NEG
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40141: LD_ADDR_VAR 0 14
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 1
40210: NEG
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: LD_INT 2
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: LD_INT 2
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: LD_INT 2
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 1
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: LD_INT 3
40291: NEG
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: LD_INT 3
40302: NEG
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 1
40310: PUSH
40311: LD_INT 2
40313: NEG
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40337: LD_ADDR_VAR 0 15
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: LD_INT 0
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: LD_INT 1
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: NEG
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 2
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: NEG
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 2
40471: NEG
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 2
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 3
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 3
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40530: LD_ADDR_VAR 0 16
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: LD_INT 0
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: LD_INT 1
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 1
40568: PUSH
40569: LD_INT 1
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 1
40599: NEG
40600: PUSH
40601: LD_INT 1
40603: NEG
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 1
40611: NEG
40612: PUSH
40613: LD_INT 2
40615: NEG
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 2
40623: PUSH
40624: LD_INT 1
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 2
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: LD_INT 2
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 2
40653: NEG
40654: PUSH
40655: LD_INT 1
40657: NEG
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: LD_INT 2
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 3
40677: PUSH
40678: LD_INT 2
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 3
40687: PUSH
40688: LD_INT 3
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 2
40697: PUSH
40698: LD_INT 3
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40723: LD_ADDR_VAR 0 17
40727: PUSH
40728: LD_INT 0
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 1
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 1
40781: NEG
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 1
40792: NEG
40793: PUSH
40794: LD_INT 1
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 1
40804: NEG
40805: PUSH
40806: LD_INT 2
40808: NEG
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: LD_INT 2
40819: NEG
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 2
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 2
40848: PUSH
40849: LD_INT 1
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 2
40858: PUSH
40859: LD_INT 2
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 1
40868: PUSH
40869: LD_INT 2
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: LD_INT 2
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: NEG
40889: PUSH
40890: LD_INT 1
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 2
40899: NEG
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 2
40910: NEG
40911: PUSH
40912: LD_INT 1
40914: NEG
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 2
40922: NEG
40923: PUSH
40924: LD_INT 2
40926: NEG
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40953: LD_ADDR_VAR 0 18
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: LD_INT 1
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: NEG
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: NEG
41023: PUSH
41024: LD_INT 1
41026: NEG
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: LD_INT 2
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: LD_INT 2
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 2
41088: PUSH
41089: LD_INT 2
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: LD_INT 2
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: LD_INT 2
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 2
41129: NEG
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 2
41140: NEG
41141: PUSH
41142: LD_INT 1
41144: NEG
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 2
41152: NEG
41153: PUSH
41154: LD_INT 2
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41183: LD_ADDR_VAR 0 19
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: NEG
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 1
41252: NEG
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 1
41264: NEG
41265: PUSH
41266: LD_INT 2
41268: NEG
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: LD_INT 2
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 2
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 2
41318: PUSH
41319: LD_INT 2
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 0
41338: PUSH
41339: LD_INT 2
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: NEG
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: NEG
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 2
41370: NEG
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 2
41382: NEG
41383: PUSH
41384: LD_INT 2
41386: NEG
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41413: LD_ADDR_VAR 0 20
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: LD_INT 2
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: LD_INT 2
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 2
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: LD_INT 2
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: LD_INT 2
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 2
41589: NEG
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 2
41600: NEG
41601: PUSH
41602: LD_INT 1
41604: NEG
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 2
41612: NEG
41613: PUSH
41614: LD_INT 2
41616: NEG
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41643: LD_ADDR_VAR 0 21
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 1
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 1
41701: NEG
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: NEG
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: LD_INT 2
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: LD_INT 2
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 2
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 2
41768: PUSH
41769: LD_INT 1
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 2
41778: PUSH
41779: LD_INT 2
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: LD_INT 2
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: LD_INT 2
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: NEG
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 2
41819: NEG
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 2
41830: NEG
41831: PUSH
41832: LD_INT 1
41834: NEG
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 2
41842: NEG
41843: PUSH
41844: LD_INT 2
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41873: LD_ADDR_VAR 0 22
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: NEG
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: LD_INT 2
41969: NEG
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 1
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 2
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 2
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 2
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: LD_INT 2
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 2
42049: NEG
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 2
42060: NEG
42061: PUSH
42062: LD_INT 1
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 2
42072: NEG
42073: PUSH
42074: LD_INT 2
42076: NEG
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42103: LD_ADDR_VAR 0 23
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: LD_INT 2
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: LD_INT 2
42199: NEG
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 2
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 2
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 2
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 1
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: LD_INT 2
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 2
42279: NEG
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 2
42290: NEG
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 2
42302: NEG
42303: PUSH
42304: LD_INT 2
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 2
42314: NEG
42315: PUSH
42316: LD_INT 3
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: LD_INT 3
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: LD_INT 2
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 2
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42383: LD_ADDR_VAR 0 24
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: LD_INT 2
42468: NEG
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: LD_INT 2
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 2
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 2
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 2
42518: PUSH
42519: LD_INT 2
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: LD_INT 2
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: LD_INT 2
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: NEG
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 2
42559: NEG
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 2
42570: NEG
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 2
42582: NEG
42583: PUSH
42584: LD_INT 2
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: LD_INT 2
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 3
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 3
42626: PUSH
42627: LD_INT 2
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42659: LD_ADDR_VAR 0 25
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: LD_INT 2
42744: NEG
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: LD_INT 2
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 2
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 2
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 2
42794: PUSH
42795: LD_INT 2
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 1
42824: NEG
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 2
42835: NEG
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 2
42846: NEG
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 2
42858: NEG
42859: PUSH
42860: LD_INT 2
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 3
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 3
42880: PUSH
42881: LD_INT 2
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 2
42890: PUSH
42891: LD_INT 3
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: LD_INT 3
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42933: LD_ADDR_VAR 0 26
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: LD_INT 2
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: LD_INT 2
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 2
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 2
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: LD_INT 2
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: LD_INT 2
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: NEG
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 2
43120: NEG
43121: PUSH
43122: LD_INT 1
43124: NEG
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: LD_INT 2
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 2
43144: PUSH
43145: LD_INT 3
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 1
43154: PUSH
43155: LD_INT 3
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: LD_INT 2
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 2
43175: NEG
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43209: LD_ADDR_VAR 0 27
43213: PUSH
43214: LD_INT 0
43216: PUSH
43217: LD_INT 0
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: LD_INT 1
43229: NEG
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: LD_INT 1
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: NEG
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: LD_INT 2
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: LD_INT 2
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 2
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 2
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 2
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: LD_INT 2
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: LD_INT 1
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 2
43385: NEG
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: NEG
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 2
43408: NEG
43409: PUSH
43410: LD_INT 2
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 3
43442: NEG
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 3
43454: NEG
43455: PUSH
43456: LD_INT 2
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43489: LD_ADDR_VAR 0 28
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: LD_INT 2
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: LD_INT 2
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 2
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 2
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: LD_INT 2
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: LD_INT 2
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 2
43688: NEG
43689: PUSH
43690: LD_INT 2
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 2
43700: NEG
43701: PUSH
43702: LD_INT 3
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: LD_INT 3
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 3
43724: NEG
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 3
43736: NEG
43737: PUSH
43738: LD_INT 2
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43771: LD_ADDR_VAR 0 29
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: LD_INT 1
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 1
43852: NEG
43853: PUSH
43854: LD_INT 2
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: LD_INT 2
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: LD_INT 2
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: LD_INT 2
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 2
43937: NEG
43938: PUSH
43939: LD_INT 1
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 2
43949: NEG
43950: PUSH
43951: LD_INT 2
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 2
43961: NEG
43962: PUSH
43963: LD_INT 3
43965: NEG
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 2
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 3
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: LD_INT 3
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 3
44015: NEG
44016: PUSH
44017: LD_INT 2
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44050: LD_ADDR_VAR 0 30
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: LD_INT 1
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: NEG
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: LD_INT 1
44157: NEG
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 2
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: LD_INT 2
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: LD_INT 2
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: NEG
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 2
44216: NEG
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 2
44227: NEG
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: LD_INT 3
44243: NEG
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: LD_INT 2
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 3
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 2
44272: PUSH
44273: LD_INT 3
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 2
44282: NEG
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 3
44293: NEG
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44328: LD_ADDR_VAR 0 31
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 1
44397: NEG
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: LD_INT 2
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 0
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 2
44505: NEG
44506: PUSH
44507: LD_INT 2
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: LD_INT 3
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 3
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: LD_INT 3
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: LD_INT 2
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 3
44571: NEG
44572: PUSH
44573: LD_INT 2
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44606: LD_ADDR_VAR 0 32
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: LD_INT 2
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: LD_INT 2
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: LD_INT 2
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 2
44772: NEG
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 2
44783: NEG
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: LD_INT 3
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: LD_INT 2
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 3
44818: PUSH
44819: LD_INT 2
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 2
44828: PUSH
44829: LD_INT 3
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 2
44838: NEG
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 3
44849: NEG
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44884: LD_ADDR_VAR 0 33
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 1
44953: NEG
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: LD_INT 2
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 2
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 2
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: LD_INT 2
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: LD_INT 2
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 2
45039: NEG
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 2
45050: NEG
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 2
45062: NEG
45063: PUSH
45064: LD_INT 2
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 2
45074: NEG
45075: PUSH
45076: LD_INT 3
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 3
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: LD_INT 3
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 3
45128: NEG
45129: PUSH
45130: LD_INT 2
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45163: LD_ADDR_VAR 0 34
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: LD_INT 2
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 2
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 1
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: LD_INT 2
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: LD_INT 2
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 2
45342: NEG
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: LD_INT 3
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: LD_INT 2
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 3
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: LD_INT 3
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 2
45397: NEG
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 3
45408: NEG
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45443: LD_ADDR_VAR 0 35
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: NEG
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45555: LD_ADDR_VAR 0 36
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45667: LD_ADDR_VAR 0 37
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45779: LD_ADDR_VAR 0 38
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 2
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 2
45870: NEG
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45891: LD_ADDR_VAR 0 39
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: LD_INT 2
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: LD_INT 2
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46003: LD_ADDR_VAR 0 40
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46115: LD_ADDR_VAR 0 41
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: LD_INT 2
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: LD_INT 2
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 2
46270: NEG
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: NEG
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 2
46293: NEG
46294: PUSH
46295: LD_INT 2
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: LD_INT 3
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 3
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 3
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 3
46348: PUSH
46349: LD_INT 2
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 3
46358: PUSH
46359: LD_INT 3
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 2
46368: PUSH
46369: LD_INT 3
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 2
46378: NEG
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 3
46389: NEG
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 3
46400: NEG
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 3
46412: NEG
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 3
46424: NEG
46425: PUSH
46426: LD_INT 3
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46465: LD_ADDR_VAR 0 42
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: LD_INT 2
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: NEG
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 2
46655: NEG
46656: PUSH
46657: LD_INT 3
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: LD_INT 3
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: LD_INT 3
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: LD_INT 2
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 3
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 3
46711: PUSH
46712: LD_INT 3
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: LD_INT 3
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: LD_INT 3
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: LD_INT 3
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: LD_INT 2
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 3
46762: NEG
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 3
46774: NEG
46775: PUSH
46776: LD_INT 3
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46815: LD_ADDR_VAR 0 43
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 2
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 2
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: LD_INT 2
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: LD_INT 2
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 2
46981: NEG
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 2
46992: NEG
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: LD_INT 3
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: LD_INT 3
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: LD_INT 2
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 3
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 3
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: LD_INT 3
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: LD_INT 3
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 2
47100: NEG
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 3
47111: NEG
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 3
47122: NEG
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47163: LD_ADDR_VAR 0 44
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 2
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 2
47329: NEG
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 2
47341: NEG
47342: PUSH
47343: LD_INT 2
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 2
47353: NEG
47354: PUSH
47355: LD_INT 3
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 3
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 3
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 3
47396: PUSH
47397: LD_INT 2
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 3
47406: PUSH
47407: LD_INT 3
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: LD_INT 3
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 3
47437: NEG
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 3
47448: NEG
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 3
47460: NEG
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 3
47472: NEG
47473: PUSH
47474: LD_INT 3
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47513: LD_ADDR_VAR 0 45
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: LD_INT 2
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: LD_INT 2
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 2
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: LD_INT 2
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: LD_INT 2
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: LD_INT 1
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 2
47679: NEG
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 2
47691: NEG
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 2
47703: NEG
47704: PUSH
47705: LD_INT 3
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: LD_INT 3
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: LD_INT 3
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 3
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 3
47759: PUSH
47760: LD_INT 3
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 2
47769: PUSH
47770: LD_INT 3
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 3
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: LD_INT 3
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 2
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 3
47810: NEG
47811: PUSH
47812: LD_INT 2
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 3
47822: NEG
47823: PUSH
47824: LD_INT 3
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47863: LD_ADDR_VAR 0 46
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: LD_INT 2
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: LD_INT 2
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 2
48029: NEG
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: NEG
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: LD_INT 3
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: LD_INT 3
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: LD_INT 2
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 3
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 3
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: LD_INT 3
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: LD_INT 3
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: LD_INT 2
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 2
48148: NEG
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 3
48159: NEG
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 3
48170: NEG
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48211: LD_ADDR_VAR 0 47
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: LD_INT 2
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: LD_INT 2
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 2
48326: NEG
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 2
48338: NEG
48339: PUSH
48340: LD_INT 2
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48362: LD_ADDR_VAR 0 48
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: NEG
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: LD_INT 2
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: LD_INT 2
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 2
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48509: LD_ADDR_VAR 0 49
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: LD_INT 2
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: LD_INT 2
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48653: LD_ADDR_VAR 0 50
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: LD_INT 1
48726: NEG
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 2
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: LD_INT 2
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48797: LD_ADDR_VAR 0 51
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 2
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: NEG
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48944: LD_ADDR_VAR 0 52
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: LD_INT 2
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: NEG
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49095: LD_ADDR_VAR 0 53
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: NEG
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: NEG
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: LD_INT 2
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: LD_INT 2
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: NEG
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 2
49282: NEG
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 2
49294: NEG
49295: PUSH
49296: LD_INT 2
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49325: LD_ADDR_VAR 0 54
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 2
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 2
49512: NEG
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: LD_INT 2
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49555: LD_ADDR_VAR 0 55
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: LD_INT 2
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 2
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: NEG
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 2
49754: NEG
49755: PUSH
49756: LD_INT 2
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49785: LD_ADDR_VAR 0 56
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: LD_INT 2
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 2
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: LD_INT 2
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: NEG
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: NEG
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 2
49984: NEG
49985: PUSH
49986: LD_INT 2
49988: NEG
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50015: LD_ADDR_VAR 0 57
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: LD_INT 2
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: LD_INT 2
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 2
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 2
50150: PUSH
50151: LD_INT 2
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: LD_INT 2
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: LD_INT 2
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 1
50180: NEG
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 2
50202: NEG
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: LD_INT 2
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50245: LD_ADDR_VAR 0 58
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: LD_INT 2
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: LD_INT 2
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 2
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: LD_INT 2
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: NEG
50422: PUSH
50423: LD_INT 0
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 2
50432: NEG
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: LD_INT 2
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50475: LD_ADDR_VAR 0 59
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50563: LD_ADDR_VAR 0 60
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50651: LD_ADDR_VAR 0 61
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50739: LD_ADDR_VAR 0 62
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50827: LD_ADDR_VAR 0 63
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50915: LD_ADDR_VAR 0 64
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: ST_TO_ADDR
// end ; 1 :
51003: GO 56900
51005: LD_INT 1
51007: DOUBLE
51008: EQUAL
51009: IFTRUE 51013
51011: GO 53636
51013: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51014: LD_ADDR_VAR 0 11
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: LD_INT 3
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: LD_INT 3
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 2
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: LIST
51057: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51058: LD_ADDR_VAR 0 12
51062: PUSH
51063: LD_INT 2
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 3
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 3
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: LIST
51098: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51099: LD_ADDR_VAR 0 13
51103: PUSH
51104: LD_INT 3
51106: PUSH
51107: LD_INT 2
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 3
51116: PUSH
51117: LD_INT 3
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: PUSH
51127: LD_INT 3
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: LIST
51138: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51139: LD_ADDR_VAR 0 14
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: LD_INT 3
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: LD_INT 3
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: LD_INT 2
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: LIST
51179: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51180: LD_ADDR_VAR 0 15
51184: PUSH
51185: LD_INT 2
51187: NEG
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 3
51198: NEG
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 3
51209: NEG
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: LIST
51223: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51224: LD_ADDR_VAR 0 16
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: LD_INT 3
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 3
51243: NEG
51244: PUSH
51245: LD_INT 2
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 3
51255: NEG
51256: PUSH
51257: LD_INT 3
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: LIST
51269: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51270: LD_ADDR_VAR 0 17
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: LD_INT 3
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: LD_INT 3
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: LD_INT 2
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: LIST
51313: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51314: LD_ADDR_VAR 0 18
51318: PUSH
51319: LD_INT 2
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 3
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 3
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: LIST
51354: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51355: LD_ADDR_VAR 0 19
51359: PUSH
51360: LD_INT 3
51362: PUSH
51363: LD_INT 2
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 3
51372: PUSH
51373: LD_INT 3
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: LD_INT 3
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: LIST
51394: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51395: LD_ADDR_VAR 0 20
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 3
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 3
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: LD_INT 2
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: LIST
51435: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51436: LD_ADDR_VAR 0 21
51440: PUSH
51441: LD_INT 2
51443: NEG
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 3
51454: NEG
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 3
51465: NEG
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: LIST
51479: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51480: LD_ADDR_VAR 0 22
51484: PUSH
51485: LD_INT 2
51487: NEG
51488: PUSH
51489: LD_INT 3
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 3
51499: NEG
51500: PUSH
51501: LD_INT 2
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 3
51511: NEG
51512: PUSH
51513: LD_INT 3
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: LIST
51525: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51526: LD_ADDR_VAR 0 23
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: LD_INT 3
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: LD_INT 4
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: LD_INT 3
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: LIST
51569: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51570: LD_ADDR_VAR 0 24
51574: PUSH
51575: LD_INT 3
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 3
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 4
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: LIST
51610: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51611: LD_ADDR_VAR 0 25
51615: PUSH
51616: LD_INT 3
51618: PUSH
51619: LD_INT 3
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 4
51628: PUSH
51629: LD_INT 3
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 3
51638: PUSH
51639: LD_INT 4
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: LIST
51650: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51651: LD_ADDR_VAR 0 26
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 3
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: LD_INT 4
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: LD_INT 3
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: LIST
51691: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51692: LD_ADDR_VAR 0 27
51696: PUSH
51697: LD_INT 3
51699: NEG
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 3
51710: NEG
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 4
51721: NEG
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: LIST
51735: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51736: LD_ADDR_VAR 0 28
51740: PUSH
51741: LD_INT 3
51743: NEG
51744: PUSH
51745: LD_INT 3
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 3
51755: NEG
51756: PUSH
51757: LD_INT 4
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 4
51767: NEG
51768: PUSH
51769: LD_INT 3
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: LIST
51781: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51782: LD_ADDR_VAR 0 29
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 3
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 3
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: LD_INT 2
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: LD_INT 4
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: LD_INT 4
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: LD_INT 3
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: LD_INT 5
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 5
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: LD_INT 4
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: LD_INT 6
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: LD_INT 6
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: LD_INT 5
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51937: LD_ADDR_VAR 0 30
51941: PUSH
51942: LD_INT 2
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 3
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 3
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 3
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 4
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 4
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 4
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 5
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 5
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 5
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 6
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 6
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52080: LD_ADDR_VAR 0 31
52084: PUSH
52085: LD_INT 3
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 3
52097: PUSH
52098: LD_INT 3
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 2
52107: PUSH
52108: LD_INT 3
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 4
52117: PUSH
52118: LD_INT 3
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 4
52127: PUSH
52128: LD_INT 4
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 3
52137: PUSH
52138: LD_INT 4
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 5
52147: PUSH
52148: LD_INT 4
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 5
52157: PUSH
52158: LD_INT 5
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 4
52167: PUSH
52168: LD_INT 5
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 6
52177: PUSH
52178: LD_INT 5
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 6
52187: PUSH
52188: LD_INT 6
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 5
52197: PUSH
52198: LD_INT 6
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52219: LD_ADDR_VAR 0 32
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 3
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: LD_INT 3
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: LD_INT 4
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 4
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: LD_INT 3
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: LD_INT 5
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: LD_INT 5
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: LD_INT 4
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: LD_INT 6
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: LD_INT 6
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: LD_INT 5
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52362: LD_ADDR_VAR 0 33
52366: PUSH
52367: LD_INT 2
52369: NEG
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 3
52380: NEG
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 3
52391: NEG
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 3
52403: NEG
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 4
52414: NEG
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 4
52425: NEG
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 4
52437: NEG
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 5
52448: NEG
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 5
52459: NEG
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 5
52471: NEG
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 6
52482: NEG
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 6
52493: NEG
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52517: LD_ADDR_VAR 0 34
52521: PUSH
52522: LD_INT 2
52524: NEG
52525: PUSH
52526: LD_INT 3
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 3
52536: NEG
52537: PUSH
52538: LD_INT 2
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 3
52548: NEG
52549: PUSH
52550: LD_INT 3
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 3
52560: NEG
52561: PUSH
52562: LD_INT 4
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 4
52572: NEG
52573: PUSH
52574: LD_INT 3
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 4
52584: NEG
52585: PUSH
52586: LD_INT 4
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 4
52596: NEG
52597: PUSH
52598: LD_INT 5
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 5
52608: NEG
52609: PUSH
52610: LD_INT 4
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 5
52620: NEG
52621: PUSH
52622: LD_INT 5
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 5
52632: NEG
52633: PUSH
52634: LD_INT 6
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 6
52644: NEG
52645: PUSH
52646: LD_INT 5
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 6
52656: NEG
52657: PUSH
52658: LD_INT 6
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52680: LD_ADDR_VAR 0 41
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: LD_INT 2
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: LD_INT 3
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: LD_INT 2
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: LIST
52723: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52724: LD_ADDR_VAR 0 42
52728: PUSH
52729: LD_INT 2
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 2
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 3
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: LIST
52764: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52765: LD_ADDR_VAR 0 43
52769: PUSH
52770: LD_INT 2
52772: PUSH
52773: LD_INT 2
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 3
52782: PUSH
52783: LD_INT 2
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: LD_INT 3
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: LIST
52804: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52805: LD_ADDR_VAR 0 44
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: LD_INT 2
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 3
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: LD_INT 2
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: LIST
52845: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52846: LD_ADDR_VAR 0 45
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: NEG
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 3
52875: NEG
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: LIST
52889: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52890: LD_ADDR_VAR 0 46
52894: PUSH
52895: LD_INT 2
52897: NEG
52898: PUSH
52899: LD_INT 2
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 2
52909: NEG
52910: PUSH
52911: LD_INT 3
52913: NEG
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 3
52921: NEG
52922: PUSH
52923: LD_INT 2
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: LIST
52935: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52936: LD_ADDR_VAR 0 47
52940: PUSH
52941: LD_INT 2
52943: NEG
52944: PUSH
52945: LD_INT 3
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: NEG
52956: PUSH
52957: LD_INT 3
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52969: LD_ADDR_VAR 0 48
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: LD_INT 2
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53000: LD_ADDR_VAR 0 49
53004: PUSH
53005: LD_INT 3
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 3
53017: PUSH
53018: LD_INT 2
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53029: LD_ADDR_VAR 0 50
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: LD_INT 3
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: LD_INT 3
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53058: LD_ADDR_VAR 0 51
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: LD_INT 2
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 2
53076: NEG
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53089: LD_ADDR_VAR 0 52
53093: PUSH
53094: LD_INT 3
53096: NEG
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 3
53108: NEG
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53122: LD_ADDR_VAR 0 53
53126: PUSH
53127: LD_INT 1
53129: NEG
53130: PUSH
53131: LD_INT 3
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: LD_INT 3
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: LD_INT 2
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: LIST
53165: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53166: LD_ADDR_VAR 0 54
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 3
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 3
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: LIST
53206: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53207: LD_ADDR_VAR 0 55
53211: PUSH
53212: LD_INT 3
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 3
53224: PUSH
53225: LD_INT 3
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 2
53234: PUSH
53235: LD_INT 3
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: LIST
53246: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53247: LD_ADDR_VAR 0 56
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: LD_INT 3
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: LD_INT 3
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: LIST
53287: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53288: LD_ADDR_VAR 0 57
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 3
53306: NEG
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 3
53317: NEG
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: LIST
53331: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53332: LD_ADDR_VAR 0 58
53336: PUSH
53337: LD_INT 2
53339: NEG
53340: PUSH
53341: LD_INT 3
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 3
53351: NEG
53352: PUSH
53353: LD_INT 2
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 3
53363: NEG
53364: PUSH
53365: LD_INT 3
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: LIST
53377: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53378: LD_ADDR_VAR 0 59
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: LD_INT 2
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: LIST
53421: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53422: LD_ADDR_VAR 0 60
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: LIST
53462: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53463: LD_ADDR_VAR 0 61
53467: PUSH
53468: LD_INT 2
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: LIST
53502: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53503: LD_ADDR_VAR 0 62
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: LD_INT 2
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: NEG
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: LIST
53543: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53544: LD_ADDR_VAR 0 63
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 2
53562: NEG
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 2
53573: NEG
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: LIST
53587: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53588: LD_ADDR_VAR 0 64
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: LD_INT 2
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 2
53607: NEG
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: LD_INT 2
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: LIST
53633: ST_TO_ADDR
// end ; 2 :
53634: GO 56900
53636: LD_INT 2
53638: DOUBLE
53639: EQUAL
53640: IFTRUE 53644
53642: GO 56899
53644: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53645: LD_ADDR_VAR 0 29
53649: PUSH
53650: LD_INT 4
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 4
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 5
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 5
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 4
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 3
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 3
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 3
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 5
53735: PUSH
53736: LD_INT 2
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 3
53745: PUSH
53746: LD_INT 3
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 3
53755: PUSH
53756: LD_INT 2
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 4
53765: PUSH
53766: LD_INT 3
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 4
53775: PUSH
53776: LD_INT 4
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 3
53785: PUSH
53786: LD_INT 4
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: LD_INT 3
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: LD_INT 2
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 4
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: LD_INT 4
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: LD_INT 4
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: LD_INT 3
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: LD_INT 4
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: LD_INT 5
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 5
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: LD_INT 4
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: LD_INT 3
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: LD_INT 5
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 2
53917: NEG
53918: PUSH
53919: LD_INT 3
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 3
53928: NEG
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 3
53939: NEG
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 2
53951: NEG
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 2
53962: NEG
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 3
53973: NEG
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 4
53984: NEG
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 4
53995: NEG
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 4
54007: NEG
54008: PUSH
54009: LD_INT 2
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: NEG
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 4
54030: NEG
54031: PUSH
54032: LD_INT 4
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 4
54042: NEG
54043: PUSH
54044: LD_INT 5
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 3
54054: NEG
54055: PUSH
54056: LD_INT 4
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 3
54066: NEG
54067: PUSH
54068: LD_INT 3
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 4
54078: NEG
54079: PUSH
54080: LD_INT 3
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 5
54090: NEG
54091: PUSH
54092: LD_INT 4
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 5
54102: NEG
54103: PUSH
54104: LD_INT 5
54106: NEG
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 3
54114: NEG
54115: PUSH
54116: LD_INT 5
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 5
54126: NEG
54127: PUSH
54128: LD_INT 3
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54183: LD_ADDR_VAR 0 30
54187: PUSH
54188: LD_INT 4
54190: PUSH
54191: LD_INT 4
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 4
54200: PUSH
54201: LD_INT 3
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 5
54210: PUSH
54211: LD_INT 4
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 5
54220: PUSH
54221: LD_INT 5
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 4
54230: PUSH
54231: LD_INT 5
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 3
54240: PUSH
54241: LD_INT 4
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 3
54250: PUSH
54251: LD_INT 3
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 5
54260: PUSH
54261: LD_INT 3
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 3
54270: PUSH
54271: LD_INT 5
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: LD_INT 3
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: LD_INT 2
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: LD_INT 3
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: LD_INT 4
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 4
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: LD_INT 3
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: NEG
54342: PUSH
54343: LD_INT 2
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: LD_INT 4
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: LD_INT 2
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 4
54373: NEG
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 4
54384: NEG
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 3
54396: NEG
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 3
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 4
54418: NEG
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 5
54429: NEG
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 5
54440: NEG
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 5
54452: NEG
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 3
54464: NEG
54465: PUSH
54466: LD_INT 2
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 3
54475: NEG
54476: PUSH
54477: LD_INT 3
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 3
54487: NEG
54488: PUSH
54489: LD_INT 4
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: LD_INT 3
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 3
54523: NEG
54524: PUSH
54525: LD_INT 2
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 4
54535: NEG
54536: PUSH
54537: LD_INT 3
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 4
54547: NEG
54548: PUSH
54549: LD_INT 4
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: NEG
54560: PUSH
54561: LD_INT 4
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 4
54571: NEG
54572: PUSH
54573: LD_INT 2
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 4
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: LD_INT 5
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: LD_INT 4
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: LD_INT 3
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: LD_INT 3
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: LD_INT 4
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: LD_INT 5
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: LD_INT 3
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 2
54673: NEG
54674: PUSH
54675: LD_INT 5
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54730: LD_ADDR_VAR 0 31
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: LD_INT 4
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 3
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: LD_INT 4
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: PUSH
54768: LD_INT 5
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: LD_INT 5
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: LD_INT 4
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: LD_INT 3
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: LD_INT 5
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: NEG
54820: PUSH
54821: LD_INT 3
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 3
54830: NEG
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 3
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 2
54864: NEG
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 3
54875: NEG
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 4
54886: NEG
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 4
54897: NEG
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 4
54909: NEG
54910: PUSH
54911: LD_INT 2
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 2
54921: NEG
54922: PUSH
54923: LD_INT 2
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 4
54932: NEG
54933: PUSH
54934: LD_INT 4
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 4
54944: NEG
54945: PUSH
54946: LD_INT 5
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 3
54956: NEG
54957: PUSH
54958: LD_INT 4
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 3
54968: NEG
54969: PUSH
54970: LD_INT 3
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 4
54980: NEG
54981: PUSH
54982: LD_INT 3
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 5
54992: NEG
54993: PUSH
54994: LD_INT 4
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 5
55004: NEG
55005: PUSH
55006: LD_INT 5
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 3
55016: NEG
55017: PUSH
55018: LD_INT 5
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 5
55028: NEG
55029: PUSH
55030: LD_INT 3
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: LD_INT 3
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: LD_INT 4
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: LD_INT 3
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: LD_INT 2
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: LD_INT 3
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 4
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 2
55130: NEG
55131: PUSH
55132: LD_INT 4
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 4
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 4
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 5
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 5
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 4
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 3
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 3
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 3
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 5
55225: PUSH
55226: LD_INT 2
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55280: LD_ADDR_VAR 0 32
55284: PUSH
55285: LD_INT 4
55287: NEG
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 4
55298: NEG
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 3
55310: NEG
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 3
55321: NEG
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 4
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 5
55343: NEG
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 5
55354: NEG
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 5
55366: NEG
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 3
55378: NEG
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 3
55389: NEG
55390: PUSH
55391: LD_INT 3
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 3
55401: NEG
55402: PUSH
55403: LD_INT 4
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: LD_INT 3
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: NEG
55426: PUSH
55427: LD_INT 2
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 3
55437: NEG
55438: PUSH
55439: LD_INT 2
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 4
55449: NEG
55450: PUSH
55451: LD_INT 3
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 4
55461: NEG
55462: PUSH
55463: LD_INT 4
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 2
55473: NEG
55474: PUSH
55475: LD_INT 4
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 4
55485: NEG
55486: PUSH
55487: LD_INT 2
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: LD_INT 4
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: LD_INT 5
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: LD_INT 4
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: LD_INT 3
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: LD_INT 3
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: LD_INT 4
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: LD_INT 5
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 2
55576: PUSH
55577: LD_INT 3
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: LD_INT 5
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 3
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 3
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 4
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 4
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 3
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 2
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: LD_INT 2
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 4
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 4
55692: PUSH
55693: LD_INT 4
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 4
55702: PUSH
55703: LD_INT 3
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 5
55712: PUSH
55713: LD_INT 4
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 5
55722: PUSH
55723: LD_INT 5
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 4
55732: PUSH
55733: LD_INT 5
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 3
55742: PUSH
55743: LD_INT 4
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 3
55752: PUSH
55753: LD_INT 3
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 5
55762: PUSH
55763: LD_INT 3
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 3
55772: PUSH
55773: LD_INT 5
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55827: LD_ADDR_VAR 0 33
55831: PUSH
55832: LD_INT 4
55834: NEG
55835: PUSH
55836: LD_INT 4
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 4
55846: NEG
55847: PUSH
55848: LD_INT 5
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 3
55858: NEG
55859: PUSH
55860: LD_INT 4
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 3
55870: NEG
55871: PUSH
55872: LD_INT 3
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 4
55882: NEG
55883: PUSH
55884: LD_INT 3
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 5
55894: NEG
55895: PUSH
55896: LD_INT 4
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 5
55906: NEG
55907: PUSH
55908: LD_INT 5
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 3
55918: NEG
55919: PUSH
55920: LD_INT 5
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 5
55930: NEG
55931: PUSH
55932: LD_INT 3
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: LD_INT 3
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 4
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: LD_INT 3
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: LD_INT 2
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: LD_INT 3
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: LD_INT 4
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: LD_INT 2
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 2
56032: NEG
56033: PUSH
56034: LD_INT 4
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 4
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 4
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 5
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 5
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 4
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 3
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 3
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 3
56116: PUSH
56117: LD_INT 2
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 5
56127: PUSH
56128: LD_INT 2
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 3
56137: PUSH
56138: LD_INT 3
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 3
56147: PUSH
56148: LD_INT 2
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 4
56157: PUSH
56158: LD_INT 3
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 4
56167: PUSH
56168: LD_INT 4
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 3
56177: PUSH
56178: LD_INT 4
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: LD_INT 3
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 4
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: LD_INT 4
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 4
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 3
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: LD_INT 4
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: LD_INT 5
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: LD_INT 5
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: LD_INT 4
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: LD_INT 3
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 2
56299: PUSH
56300: LD_INT 5
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: LD_INT 3
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56365: LD_ADDR_VAR 0 34
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: LD_INT 4
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: LD_INT 5
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: LD_INT 4
56397: NEG
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: PUSH
56406: LD_INT 3
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 3
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: LD_INT 4
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: LD_INT 5
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 2
56451: PUSH
56452: LD_INT 3
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 2
56462: NEG
56463: PUSH
56464: LD_INT 5
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 3
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 3
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 4
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 4
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 3
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 2
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 2
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 2
56546: PUSH
56547: LD_INT 2
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 4
56557: PUSH
56558: LD_INT 2
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 4
56567: PUSH
56568: LD_INT 4
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 4
56577: PUSH
56578: LD_INT 3
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 5
56587: PUSH
56588: LD_INT 4
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 5
56597: PUSH
56598: LD_INT 5
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 4
56607: PUSH
56608: LD_INT 5
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 3
56617: PUSH
56618: LD_INT 4
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 3
56627: PUSH
56628: LD_INT 3
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 5
56637: PUSH
56638: LD_INT 3
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 3
56647: PUSH
56648: LD_INT 5
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: LD_INT 3
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: LD_INT 2
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: LD_INT 3
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: LD_INT 4
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: LD_INT 4
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: LD_INT 3
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 2
56729: PUSH
56730: LD_INT 4
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 2
56739: NEG
56740: PUSH
56741: LD_INT 2
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 4
56750: NEG
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 4
56761: NEG
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 3
56773: NEG
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 3
56784: NEG
56785: PUSH
56786: LD_INT 1
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 4
56795: NEG
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 5
56806: NEG
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 5
56817: NEG
56818: PUSH
56819: LD_INT 1
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 5
56829: NEG
56830: PUSH
56831: LD_INT 2
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 3
56841: NEG
56842: PUSH
56843: LD_INT 2
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: ST_TO_ADDR
// end ; end ;
56897: GO 56900
56899: POP
// case btype of b_depot , b_warehouse :
56900: LD_VAR 0 1
56904: PUSH
56905: LD_INT 0
56907: DOUBLE
56908: EQUAL
56909: IFTRUE 56919
56911: LD_INT 1
56913: DOUBLE
56914: EQUAL
56915: IFTRUE 56919
56917: GO 57120
56919: POP
// case nation of nation_american :
56920: LD_VAR 0 5
56924: PUSH
56925: LD_INT 1
56927: DOUBLE
56928: EQUAL
56929: IFTRUE 56933
56931: GO 56989
56933: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56934: LD_ADDR_VAR 0 9
56938: PUSH
56939: LD_VAR 0 11
56943: PUSH
56944: LD_VAR 0 12
56948: PUSH
56949: LD_VAR 0 13
56953: PUSH
56954: LD_VAR 0 14
56958: PUSH
56959: LD_VAR 0 15
56963: PUSH
56964: LD_VAR 0 16
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: PUSH
56977: LD_VAR 0 4
56981: PUSH
56982: LD_INT 1
56984: PLUS
56985: ARRAY
56986: ST_TO_ADDR
56987: GO 57118
56989: LD_INT 2
56991: DOUBLE
56992: EQUAL
56993: IFTRUE 56997
56995: GO 57053
56997: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56998: LD_ADDR_VAR 0 9
57002: PUSH
57003: LD_VAR 0 17
57007: PUSH
57008: LD_VAR 0 18
57012: PUSH
57013: LD_VAR 0 19
57017: PUSH
57018: LD_VAR 0 20
57022: PUSH
57023: LD_VAR 0 21
57027: PUSH
57028: LD_VAR 0 22
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: PUSH
57041: LD_VAR 0 4
57045: PUSH
57046: LD_INT 1
57048: PLUS
57049: ARRAY
57050: ST_TO_ADDR
57051: GO 57118
57053: LD_INT 3
57055: DOUBLE
57056: EQUAL
57057: IFTRUE 57061
57059: GO 57117
57061: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57062: LD_ADDR_VAR 0 9
57066: PUSH
57067: LD_VAR 0 23
57071: PUSH
57072: LD_VAR 0 24
57076: PUSH
57077: LD_VAR 0 25
57081: PUSH
57082: LD_VAR 0 26
57086: PUSH
57087: LD_VAR 0 27
57091: PUSH
57092: LD_VAR 0 28
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: PUSH
57105: LD_VAR 0 4
57109: PUSH
57110: LD_INT 1
57112: PLUS
57113: ARRAY
57114: ST_TO_ADDR
57115: GO 57118
57117: POP
57118: GO 57673
57120: LD_INT 2
57122: DOUBLE
57123: EQUAL
57124: IFTRUE 57134
57126: LD_INT 3
57128: DOUBLE
57129: EQUAL
57130: IFTRUE 57134
57132: GO 57190
57134: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57135: LD_ADDR_VAR 0 9
57139: PUSH
57140: LD_VAR 0 29
57144: PUSH
57145: LD_VAR 0 30
57149: PUSH
57150: LD_VAR 0 31
57154: PUSH
57155: LD_VAR 0 32
57159: PUSH
57160: LD_VAR 0 33
57164: PUSH
57165: LD_VAR 0 34
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: PUSH
57178: LD_VAR 0 4
57182: PUSH
57183: LD_INT 1
57185: PLUS
57186: ARRAY
57187: ST_TO_ADDR
57188: GO 57673
57190: LD_INT 16
57192: DOUBLE
57193: EQUAL
57194: IFTRUE 57252
57196: LD_INT 17
57198: DOUBLE
57199: EQUAL
57200: IFTRUE 57252
57202: LD_INT 18
57204: DOUBLE
57205: EQUAL
57206: IFTRUE 57252
57208: LD_INT 19
57210: DOUBLE
57211: EQUAL
57212: IFTRUE 57252
57214: LD_INT 22
57216: DOUBLE
57217: EQUAL
57218: IFTRUE 57252
57220: LD_INT 20
57222: DOUBLE
57223: EQUAL
57224: IFTRUE 57252
57226: LD_INT 21
57228: DOUBLE
57229: EQUAL
57230: IFTRUE 57252
57232: LD_INT 23
57234: DOUBLE
57235: EQUAL
57236: IFTRUE 57252
57238: LD_INT 24
57240: DOUBLE
57241: EQUAL
57242: IFTRUE 57252
57244: LD_INT 25
57246: DOUBLE
57247: EQUAL
57248: IFTRUE 57252
57250: GO 57308
57252: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57253: LD_ADDR_VAR 0 9
57257: PUSH
57258: LD_VAR 0 35
57262: PUSH
57263: LD_VAR 0 36
57267: PUSH
57268: LD_VAR 0 37
57272: PUSH
57273: LD_VAR 0 38
57277: PUSH
57278: LD_VAR 0 39
57282: PUSH
57283: LD_VAR 0 40
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: PUSH
57296: LD_VAR 0 4
57300: PUSH
57301: LD_INT 1
57303: PLUS
57304: ARRAY
57305: ST_TO_ADDR
57306: GO 57673
57308: LD_INT 6
57310: DOUBLE
57311: EQUAL
57312: IFTRUE 57364
57314: LD_INT 7
57316: DOUBLE
57317: EQUAL
57318: IFTRUE 57364
57320: LD_INT 8
57322: DOUBLE
57323: EQUAL
57324: IFTRUE 57364
57326: LD_INT 13
57328: DOUBLE
57329: EQUAL
57330: IFTRUE 57364
57332: LD_INT 12
57334: DOUBLE
57335: EQUAL
57336: IFTRUE 57364
57338: LD_INT 15
57340: DOUBLE
57341: EQUAL
57342: IFTRUE 57364
57344: LD_INT 11
57346: DOUBLE
57347: EQUAL
57348: IFTRUE 57364
57350: LD_INT 14
57352: DOUBLE
57353: EQUAL
57354: IFTRUE 57364
57356: LD_INT 10
57358: DOUBLE
57359: EQUAL
57360: IFTRUE 57364
57362: GO 57420
57364: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57365: LD_ADDR_VAR 0 9
57369: PUSH
57370: LD_VAR 0 41
57374: PUSH
57375: LD_VAR 0 42
57379: PUSH
57380: LD_VAR 0 43
57384: PUSH
57385: LD_VAR 0 44
57389: PUSH
57390: LD_VAR 0 45
57394: PUSH
57395: LD_VAR 0 46
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: PUSH
57408: LD_VAR 0 4
57412: PUSH
57413: LD_INT 1
57415: PLUS
57416: ARRAY
57417: ST_TO_ADDR
57418: GO 57673
57420: LD_INT 36
57422: DOUBLE
57423: EQUAL
57424: IFTRUE 57428
57426: GO 57484
57428: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57429: LD_ADDR_VAR 0 9
57433: PUSH
57434: LD_VAR 0 47
57438: PUSH
57439: LD_VAR 0 48
57443: PUSH
57444: LD_VAR 0 49
57448: PUSH
57449: LD_VAR 0 50
57453: PUSH
57454: LD_VAR 0 51
57458: PUSH
57459: LD_VAR 0 52
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: PUSH
57472: LD_VAR 0 4
57476: PUSH
57477: LD_INT 1
57479: PLUS
57480: ARRAY
57481: ST_TO_ADDR
57482: GO 57673
57484: LD_INT 4
57486: DOUBLE
57487: EQUAL
57488: IFTRUE 57510
57490: LD_INT 5
57492: DOUBLE
57493: EQUAL
57494: IFTRUE 57510
57496: LD_INT 34
57498: DOUBLE
57499: EQUAL
57500: IFTRUE 57510
57502: LD_INT 37
57504: DOUBLE
57505: EQUAL
57506: IFTRUE 57510
57508: GO 57566
57510: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57511: LD_ADDR_VAR 0 9
57515: PUSH
57516: LD_VAR 0 53
57520: PUSH
57521: LD_VAR 0 54
57525: PUSH
57526: LD_VAR 0 55
57530: PUSH
57531: LD_VAR 0 56
57535: PUSH
57536: LD_VAR 0 57
57540: PUSH
57541: LD_VAR 0 58
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: PUSH
57554: LD_VAR 0 4
57558: PUSH
57559: LD_INT 1
57561: PLUS
57562: ARRAY
57563: ST_TO_ADDR
57564: GO 57673
57566: LD_INT 31
57568: DOUBLE
57569: EQUAL
57570: IFTRUE 57616
57572: LD_INT 32
57574: DOUBLE
57575: EQUAL
57576: IFTRUE 57616
57578: LD_INT 33
57580: DOUBLE
57581: EQUAL
57582: IFTRUE 57616
57584: LD_INT 27
57586: DOUBLE
57587: EQUAL
57588: IFTRUE 57616
57590: LD_INT 26
57592: DOUBLE
57593: EQUAL
57594: IFTRUE 57616
57596: LD_INT 28
57598: DOUBLE
57599: EQUAL
57600: IFTRUE 57616
57602: LD_INT 29
57604: DOUBLE
57605: EQUAL
57606: IFTRUE 57616
57608: LD_INT 30
57610: DOUBLE
57611: EQUAL
57612: IFTRUE 57616
57614: GO 57672
57616: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57617: LD_ADDR_VAR 0 9
57621: PUSH
57622: LD_VAR 0 59
57626: PUSH
57627: LD_VAR 0 60
57631: PUSH
57632: LD_VAR 0 61
57636: PUSH
57637: LD_VAR 0 62
57641: PUSH
57642: LD_VAR 0 63
57646: PUSH
57647: LD_VAR 0 64
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: PUSH
57660: LD_VAR 0 4
57664: PUSH
57665: LD_INT 1
57667: PLUS
57668: ARRAY
57669: ST_TO_ADDR
57670: GO 57673
57672: POP
// temp_list2 = [ ] ;
57673: LD_ADDR_VAR 0 10
57677: PUSH
57678: EMPTY
57679: ST_TO_ADDR
// for i in temp_list do
57680: LD_ADDR_VAR 0 8
57684: PUSH
57685: LD_VAR 0 9
57689: PUSH
57690: FOR_IN
57691: IFFALSE 57743
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57693: LD_ADDR_VAR 0 10
57697: PUSH
57698: LD_VAR 0 10
57702: PUSH
57703: LD_VAR 0 8
57707: PUSH
57708: LD_INT 1
57710: ARRAY
57711: PUSH
57712: LD_VAR 0 2
57716: PLUS
57717: PUSH
57718: LD_VAR 0 8
57722: PUSH
57723: LD_INT 2
57725: ARRAY
57726: PUSH
57727: LD_VAR 0 3
57731: PLUS
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: EMPTY
57738: LIST
57739: ADD
57740: ST_TO_ADDR
57741: GO 57690
57743: POP
57744: POP
// result = temp_list2 ;
57745: LD_ADDR_VAR 0 7
57749: PUSH
57750: LD_VAR 0 10
57754: ST_TO_ADDR
// end ;
57755: LD_VAR 0 7
57759: RET
// export function EnemyInRange ( unit , dist ) ; begin
57760: LD_INT 0
57762: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57763: LD_ADDR_VAR 0 3
57767: PUSH
57768: LD_VAR 0 1
57772: PPUSH
57773: CALL_OW 255
57777: PPUSH
57778: LD_VAR 0 1
57782: PPUSH
57783: CALL_OW 250
57787: PPUSH
57788: LD_VAR 0 1
57792: PPUSH
57793: CALL_OW 251
57797: PPUSH
57798: LD_VAR 0 2
57802: PPUSH
57803: CALL 31156 0 4
57807: PUSH
57808: LD_INT 4
57810: ARRAY
57811: ST_TO_ADDR
// end ;
57812: LD_VAR 0 3
57816: RET
// export function PlayerSeeMe ( unit ) ; begin
57817: LD_INT 0
57819: PPUSH
// result := See ( your_side , unit ) ;
57820: LD_ADDR_VAR 0 2
57824: PUSH
57825: LD_OWVAR 2
57829: PPUSH
57830: LD_VAR 0 1
57834: PPUSH
57835: CALL_OW 292
57839: ST_TO_ADDR
// end ;
57840: LD_VAR 0 2
57844: RET
// export function ReverseDir ( unit ) ; begin
57845: LD_INT 0
57847: PPUSH
// if not unit then
57848: LD_VAR 0 1
57852: NOT
57853: IFFALSE 57857
// exit ;
57855: GO 57880
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57857: LD_ADDR_VAR 0 2
57861: PUSH
57862: LD_VAR 0 1
57866: PPUSH
57867: CALL_OW 254
57871: PUSH
57872: LD_INT 3
57874: PLUS
57875: PUSH
57876: LD_INT 6
57878: MOD
57879: ST_TO_ADDR
// end ;
57880: LD_VAR 0 2
57884: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57885: LD_INT 0
57887: PPUSH
57888: PPUSH
57889: PPUSH
57890: PPUSH
57891: PPUSH
// if not hexes then
57892: LD_VAR 0 2
57896: NOT
57897: IFFALSE 57901
// exit ;
57899: GO 58049
// dist := 9999 ;
57901: LD_ADDR_VAR 0 5
57905: PUSH
57906: LD_INT 9999
57908: ST_TO_ADDR
// for i = 1 to hexes do
57909: LD_ADDR_VAR 0 4
57913: PUSH
57914: DOUBLE
57915: LD_INT 1
57917: DEC
57918: ST_TO_ADDR
57919: LD_VAR 0 2
57923: PUSH
57924: FOR_TO
57925: IFFALSE 58037
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57927: LD_VAR 0 1
57931: PPUSH
57932: LD_VAR 0 2
57936: PUSH
57937: LD_VAR 0 4
57941: ARRAY
57942: PUSH
57943: LD_INT 1
57945: ARRAY
57946: PPUSH
57947: LD_VAR 0 2
57951: PUSH
57952: LD_VAR 0 4
57956: ARRAY
57957: PUSH
57958: LD_INT 2
57960: ARRAY
57961: PPUSH
57962: CALL_OW 297
57966: PUSH
57967: LD_VAR 0 5
57971: LESS
57972: IFFALSE 58035
// begin hex := hexes [ i ] ;
57974: LD_ADDR_VAR 0 7
57978: PUSH
57979: LD_VAR 0 2
57983: PUSH
57984: LD_VAR 0 4
57988: ARRAY
57989: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57990: LD_ADDR_VAR 0 5
57994: PUSH
57995: LD_VAR 0 1
57999: PPUSH
58000: LD_VAR 0 2
58004: PUSH
58005: LD_VAR 0 4
58009: ARRAY
58010: PUSH
58011: LD_INT 1
58013: ARRAY
58014: PPUSH
58015: LD_VAR 0 2
58019: PUSH
58020: LD_VAR 0 4
58024: ARRAY
58025: PUSH
58026: LD_INT 2
58028: ARRAY
58029: PPUSH
58030: CALL_OW 297
58034: ST_TO_ADDR
// end ; end ;
58035: GO 57924
58037: POP
58038: POP
// result := hex ;
58039: LD_ADDR_VAR 0 3
58043: PUSH
58044: LD_VAR 0 7
58048: ST_TO_ADDR
// end ;
58049: LD_VAR 0 3
58053: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58054: LD_INT 0
58056: PPUSH
58057: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58058: LD_VAR 0 1
58062: NOT
58063: PUSH
58064: LD_VAR 0 1
58068: PUSH
58069: LD_INT 21
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 23
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PPUSH
58093: CALL_OW 69
58097: IN
58098: NOT
58099: OR
58100: IFFALSE 58104
// exit ;
58102: GO 58151
// for i = 1 to 3 do
58104: LD_ADDR_VAR 0 3
58108: PUSH
58109: DOUBLE
58110: LD_INT 1
58112: DEC
58113: ST_TO_ADDR
58114: LD_INT 3
58116: PUSH
58117: FOR_TO
58118: IFFALSE 58149
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58120: LD_VAR 0 1
58124: PPUSH
58125: CALL_OW 250
58129: PPUSH
58130: LD_VAR 0 1
58134: PPUSH
58135: CALL_OW 251
58139: PPUSH
58140: LD_INT 1
58142: PPUSH
58143: CALL_OW 453
58147: GO 58117
58149: POP
58150: POP
// end ;
58151: LD_VAR 0 2
58155: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58156: LD_INT 0
58158: PPUSH
58159: PPUSH
58160: PPUSH
58161: PPUSH
58162: PPUSH
58163: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58164: LD_VAR 0 1
58168: NOT
58169: PUSH
58170: LD_VAR 0 2
58174: NOT
58175: OR
58176: PUSH
58177: LD_VAR 0 1
58181: PPUSH
58182: CALL_OW 314
58186: OR
58187: IFFALSE 58191
// exit ;
58189: GO 58632
// x := GetX ( enemy_unit ) ;
58191: LD_ADDR_VAR 0 7
58195: PUSH
58196: LD_VAR 0 2
58200: PPUSH
58201: CALL_OW 250
58205: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58206: LD_ADDR_VAR 0 8
58210: PUSH
58211: LD_VAR 0 2
58215: PPUSH
58216: CALL_OW 251
58220: ST_TO_ADDR
// if not x or not y then
58221: LD_VAR 0 7
58225: NOT
58226: PUSH
58227: LD_VAR 0 8
58231: NOT
58232: OR
58233: IFFALSE 58237
// exit ;
58235: GO 58632
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58237: LD_ADDR_VAR 0 6
58241: PUSH
58242: LD_VAR 0 7
58246: PPUSH
58247: LD_INT 0
58249: PPUSH
58250: LD_INT 4
58252: PPUSH
58253: CALL_OW 272
58257: PUSH
58258: LD_VAR 0 8
58262: PPUSH
58263: LD_INT 0
58265: PPUSH
58266: LD_INT 4
58268: PPUSH
58269: CALL_OW 273
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_VAR 0 7
58282: PPUSH
58283: LD_INT 1
58285: PPUSH
58286: LD_INT 4
58288: PPUSH
58289: CALL_OW 272
58293: PUSH
58294: LD_VAR 0 8
58298: PPUSH
58299: LD_INT 1
58301: PPUSH
58302: LD_INT 4
58304: PPUSH
58305: CALL_OW 273
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_VAR 0 7
58318: PPUSH
58319: LD_INT 2
58321: PPUSH
58322: LD_INT 4
58324: PPUSH
58325: CALL_OW 272
58329: PUSH
58330: LD_VAR 0 8
58334: PPUSH
58335: LD_INT 2
58337: PPUSH
58338: LD_INT 4
58340: PPUSH
58341: CALL_OW 273
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_VAR 0 7
58354: PPUSH
58355: LD_INT 3
58357: PPUSH
58358: LD_INT 4
58360: PPUSH
58361: CALL_OW 272
58365: PUSH
58366: LD_VAR 0 8
58370: PPUSH
58371: LD_INT 3
58373: PPUSH
58374: LD_INT 4
58376: PPUSH
58377: CALL_OW 273
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_VAR 0 7
58390: PPUSH
58391: LD_INT 4
58393: PPUSH
58394: LD_INT 4
58396: PPUSH
58397: CALL_OW 272
58401: PUSH
58402: LD_VAR 0 8
58406: PPUSH
58407: LD_INT 4
58409: PPUSH
58410: LD_INT 4
58412: PPUSH
58413: CALL_OW 273
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_VAR 0 7
58426: PPUSH
58427: LD_INT 5
58429: PPUSH
58430: LD_INT 4
58432: PPUSH
58433: CALL_OW 272
58437: PUSH
58438: LD_VAR 0 8
58442: PPUSH
58443: LD_INT 5
58445: PPUSH
58446: LD_INT 4
58448: PPUSH
58449: CALL_OW 273
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: ST_TO_ADDR
// for i = tmp downto 1 do
58466: LD_ADDR_VAR 0 4
58470: PUSH
58471: DOUBLE
58472: LD_VAR 0 6
58476: INC
58477: ST_TO_ADDR
58478: LD_INT 1
58480: PUSH
58481: FOR_DOWNTO
58482: IFFALSE 58583
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58484: LD_VAR 0 6
58488: PUSH
58489: LD_VAR 0 4
58493: ARRAY
58494: PUSH
58495: LD_INT 1
58497: ARRAY
58498: PPUSH
58499: LD_VAR 0 6
58503: PUSH
58504: LD_VAR 0 4
58508: ARRAY
58509: PUSH
58510: LD_INT 2
58512: ARRAY
58513: PPUSH
58514: CALL_OW 488
58518: NOT
58519: PUSH
58520: LD_VAR 0 6
58524: PUSH
58525: LD_VAR 0 4
58529: ARRAY
58530: PUSH
58531: LD_INT 1
58533: ARRAY
58534: PPUSH
58535: LD_VAR 0 6
58539: PUSH
58540: LD_VAR 0 4
58544: ARRAY
58545: PUSH
58546: LD_INT 2
58548: ARRAY
58549: PPUSH
58550: CALL_OW 428
58554: PUSH
58555: LD_INT 0
58557: NONEQUAL
58558: OR
58559: IFFALSE 58581
// tmp := Delete ( tmp , i ) ;
58561: LD_ADDR_VAR 0 6
58565: PUSH
58566: LD_VAR 0 6
58570: PPUSH
58571: LD_VAR 0 4
58575: PPUSH
58576: CALL_OW 3
58580: ST_TO_ADDR
58581: GO 58481
58583: POP
58584: POP
// j := GetClosestHex ( unit , tmp ) ;
58585: LD_ADDR_VAR 0 5
58589: PUSH
58590: LD_VAR 0 1
58594: PPUSH
58595: LD_VAR 0 6
58599: PPUSH
58600: CALL 57885 0 2
58604: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58605: LD_VAR 0 1
58609: PPUSH
58610: LD_VAR 0 5
58614: PUSH
58615: LD_INT 1
58617: ARRAY
58618: PPUSH
58619: LD_VAR 0 5
58623: PUSH
58624: LD_INT 2
58626: ARRAY
58627: PPUSH
58628: CALL_OW 111
// end ;
58632: LD_VAR 0 3
58636: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58637: LD_INT 0
58639: PPUSH
58640: PPUSH
58641: PPUSH
// uc_side = 0 ;
58642: LD_ADDR_OWVAR 20
58646: PUSH
58647: LD_INT 0
58649: ST_TO_ADDR
// uc_nation = 0 ;
58650: LD_ADDR_OWVAR 21
58654: PUSH
58655: LD_INT 0
58657: ST_TO_ADDR
// InitHc_All ( ) ;
58658: CALL_OW 584
// InitVc ;
58662: CALL_OW 20
// if mastodonts then
58666: LD_VAR 0 6
58670: IFFALSE 58737
// for i = 1 to mastodonts do
58672: LD_ADDR_VAR 0 11
58676: PUSH
58677: DOUBLE
58678: LD_INT 1
58680: DEC
58681: ST_TO_ADDR
58682: LD_VAR 0 6
58686: PUSH
58687: FOR_TO
58688: IFFALSE 58735
// begin vc_chassis := 31 ;
58690: LD_ADDR_OWVAR 37
58694: PUSH
58695: LD_INT 31
58697: ST_TO_ADDR
// vc_control := control_rider ;
58698: LD_ADDR_OWVAR 38
58702: PUSH
58703: LD_INT 4
58705: ST_TO_ADDR
// animal := CreateVehicle ;
58706: LD_ADDR_VAR 0 12
58710: PUSH
58711: CALL_OW 45
58715: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58716: LD_VAR 0 12
58720: PPUSH
58721: LD_VAR 0 8
58725: PPUSH
58726: LD_INT 0
58728: PPUSH
58729: CALL 60925 0 3
// end ;
58733: GO 58687
58735: POP
58736: POP
// if horses then
58737: LD_VAR 0 5
58741: IFFALSE 58808
// for i = 1 to horses do
58743: LD_ADDR_VAR 0 11
58747: PUSH
58748: DOUBLE
58749: LD_INT 1
58751: DEC
58752: ST_TO_ADDR
58753: LD_VAR 0 5
58757: PUSH
58758: FOR_TO
58759: IFFALSE 58806
// begin hc_class := 21 ;
58761: LD_ADDR_OWVAR 28
58765: PUSH
58766: LD_INT 21
58768: ST_TO_ADDR
// hc_gallery :=  ;
58769: LD_ADDR_OWVAR 33
58773: PUSH
58774: LD_STRING 
58776: ST_TO_ADDR
// animal := CreateHuman ;
58777: LD_ADDR_VAR 0 12
58781: PUSH
58782: CALL_OW 44
58786: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58787: LD_VAR 0 12
58791: PPUSH
58792: LD_VAR 0 8
58796: PPUSH
58797: LD_INT 0
58799: PPUSH
58800: CALL 60925 0 3
// end ;
58804: GO 58758
58806: POP
58807: POP
// if birds then
58808: LD_VAR 0 1
58812: IFFALSE 58879
// for i = 1 to birds do
58814: LD_ADDR_VAR 0 11
58818: PUSH
58819: DOUBLE
58820: LD_INT 1
58822: DEC
58823: ST_TO_ADDR
58824: LD_VAR 0 1
58828: PUSH
58829: FOR_TO
58830: IFFALSE 58877
// begin hc_class = 18 ;
58832: LD_ADDR_OWVAR 28
58836: PUSH
58837: LD_INT 18
58839: ST_TO_ADDR
// hc_gallery =  ;
58840: LD_ADDR_OWVAR 33
58844: PUSH
58845: LD_STRING 
58847: ST_TO_ADDR
// animal := CreateHuman ;
58848: LD_ADDR_VAR 0 12
58852: PUSH
58853: CALL_OW 44
58857: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58858: LD_VAR 0 12
58862: PPUSH
58863: LD_VAR 0 8
58867: PPUSH
58868: LD_INT 0
58870: PPUSH
58871: CALL 60925 0 3
// end ;
58875: GO 58829
58877: POP
58878: POP
// if tigers then
58879: LD_VAR 0 2
58883: IFFALSE 58967
// for i = 1 to tigers do
58885: LD_ADDR_VAR 0 11
58889: PUSH
58890: DOUBLE
58891: LD_INT 1
58893: DEC
58894: ST_TO_ADDR
58895: LD_VAR 0 2
58899: PUSH
58900: FOR_TO
58901: IFFALSE 58965
// begin hc_class = class_tiger ;
58903: LD_ADDR_OWVAR 28
58907: PUSH
58908: LD_INT 14
58910: ST_TO_ADDR
// hc_gallery =  ;
58911: LD_ADDR_OWVAR 33
58915: PUSH
58916: LD_STRING 
58918: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58919: LD_ADDR_OWVAR 35
58923: PUSH
58924: LD_INT 7
58926: NEG
58927: PPUSH
58928: LD_INT 7
58930: PPUSH
58931: CALL_OW 12
58935: ST_TO_ADDR
// animal := CreateHuman ;
58936: LD_ADDR_VAR 0 12
58940: PUSH
58941: CALL_OW 44
58945: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58946: LD_VAR 0 12
58950: PPUSH
58951: LD_VAR 0 8
58955: PPUSH
58956: LD_INT 0
58958: PPUSH
58959: CALL 60925 0 3
// end ;
58963: GO 58900
58965: POP
58966: POP
// if apemans then
58967: LD_VAR 0 3
58971: IFFALSE 59094
// for i = 1 to apemans do
58973: LD_ADDR_VAR 0 11
58977: PUSH
58978: DOUBLE
58979: LD_INT 1
58981: DEC
58982: ST_TO_ADDR
58983: LD_VAR 0 3
58987: PUSH
58988: FOR_TO
58989: IFFALSE 59092
// begin hc_class = class_apeman ;
58991: LD_ADDR_OWVAR 28
58995: PUSH
58996: LD_INT 12
58998: ST_TO_ADDR
// hc_gallery =  ;
58999: LD_ADDR_OWVAR 33
59003: PUSH
59004: LD_STRING 
59006: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59007: LD_ADDR_OWVAR 35
59011: PUSH
59012: LD_INT 2
59014: NEG
59015: PPUSH
59016: LD_INT 2
59018: PPUSH
59019: CALL_OW 12
59023: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59024: LD_ADDR_OWVAR 31
59028: PUSH
59029: LD_INT 1
59031: PPUSH
59032: LD_INT 3
59034: PPUSH
59035: CALL_OW 12
59039: PUSH
59040: LD_INT 1
59042: PPUSH
59043: LD_INT 3
59045: PPUSH
59046: CALL_OW 12
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: ST_TO_ADDR
// animal := CreateHuman ;
59063: LD_ADDR_VAR 0 12
59067: PUSH
59068: CALL_OW 44
59072: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59073: LD_VAR 0 12
59077: PPUSH
59078: LD_VAR 0 8
59082: PPUSH
59083: LD_INT 0
59085: PPUSH
59086: CALL 60925 0 3
// end ;
59090: GO 58988
59092: POP
59093: POP
// if enchidnas then
59094: LD_VAR 0 4
59098: IFFALSE 59165
// for i = 1 to enchidnas do
59100: LD_ADDR_VAR 0 11
59104: PUSH
59105: DOUBLE
59106: LD_INT 1
59108: DEC
59109: ST_TO_ADDR
59110: LD_VAR 0 4
59114: PUSH
59115: FOR_TO
59116: IFFALSE 59163
// begin hc_class = 13 ;
59118: LD_ADDR_OWVAR 28
59122: PUSH
59123: LD_INT 13
59125: ST_TO_ADDR
// hc_gallery =  ;
59126: LD_ADDR_OWVAR 33
59130: PUSH
59131: LD_STRING 
59133: ST_TO_ADDR
// animal := CreateHuman ;
59134: LD_ADDR_VAR 0 12
59138: PUSH
59139: CALL_OW 44
59143: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59144: LD_VAR 0 12
59148: PPUSH
59149: LD_VAR 0 8
59153: PPUSH
59154: LD_INT 0
59156: PPUSH
59157: CALL 60925 0 3
// end ;
59161: GO 59115
59163: POP
59164: POP
// if fishes then
59165: LD_VAR 0 7
59169: IFFALSE 59236
// for i = 1 to fishes do
59171: LD_ADDR_VAR 0 11
59175: PUSH
59176: DOUBLE
59177: LD_INT 1
59179: DEC
59180: ST_TO_ADDR
59181: LD_VAR 0 7
59185: PUSH
59186: FOR_TO
59187: IFFALSE 59234
// begin hc_class = 20 ;
59189: LD_ADDR_OWVAR 28
59193: PUSH
59194: LD_INT 20
59196: ST_TO_ADDR
// hc_gallery =  ;
59197: LD_ADDR_OWVAR 33
59201: PUSH
59202: LD_STRING 
59204: ST_TO_ADDR
// animal := CreateHuman ;
59205: LD_ADDR_VAR 0 12
59209: PUSH
59210: CALL_OW 44
59214: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59215: LD_VAR 0 12
59219: PPUSH
59220: LD_VAR 0 9
59224: PPUSH
59225: LD_INT 0
59227: PPUSH
59228: CALL 60925 0 3
// end ;
59232: GO 59186
59234: POP
59235: POP
// end ;
59236: LD_VAR 0 10
59240: RET
// export function WantHeal ( sci , unit ) ; begin
59241: LD_INT 0
59243: PPUSH
// if GetTaskList ( sci ) > 0 then
59244: LD_VAR 0 1
59248: PPUSH
59249: CALL_OW 437
59253: PUSH
59254: LD_INT 0
59256: GREATER
59257: IFFALSE 59327
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59259: LD_VAR 0 1
59263: PPUSH
59264: CALL_OW 437
59268: PUSH
59269: LD_INT 1
59271: ARRAY
59272: PUSH
59273: LD_INT 1
59275: ARRAY
59276: PUSH
59277: LD_STRING l
59279: EQUAL
59280: PUSH
59281: LD_VAR 0 1
59285: PPUSH
59286: CALL_OW 437
59290: PUSH
59291: LD_INT 1
59293: ARRAY
59294: PUSH
59295: LD_INT 4
59297: ARRAY
59298: PUSH
59299: LD_VAR 0 2
59303: EQUAL
59304: AND
59305: IFFALSE 59317
// result := true else
59307: LD_ADDR_VAR 0 3
59311: PUSH
59312: LD_INT 1
59314: ST_TO_ADDR
59315: GO 59325
// result := false ;
59317: LD_ADDR_VAR 0 3
59321: PUSH
59322: LD_INT 0
59324: ST_TO_ADDR
// end else
59325: GO 59335
// result := false ;
59327: LD_ADDR_VAR 0 3
59331: PUSH
59332: LD_INT 0
59334: ST_TO_ADDR
// end ;
59335: LD_VAR 0 3
59339: RET
// export function HealTarget ( sci ) ; begin
59340: LD_INT 0
59342: PPUSH
// if not sci then
59343: LD_VAR 0 1
59347: NOT
59348: IFFALSE 59352
// exit ;
59350: GO 59417
// result := 0 ;
59352: LD_ADDR_VAR 0 2
59356: PUSH
59357: LD_INT 0
59359: ST_TO_ADDR
// if GetTaskList ( sci ) then
59360: LD_VAR 0 1
59364: PPUSH
59365: CALL_OW 437
59369: IFFALSE 59417
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59371: LD_VAR 0 1
59375: PPUSH
59376: CALL_OW 437
59380: PUSH
59381: LD_INT 1
59383: ARRAY
59384: PUSH
59385: LD_INT 1
59387: ARRAY
59388: PUSH
59389: LD_STRING l
59391: EQUAL
59392: IFFALSE 59417
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59394: LD_ADDR_VAR 0 2
59398: PUSH
59399: LD_VAR 0 1
59403: PPUSH
59404: CALL_OW 437
59408: PUSH
59409: LD_INT 1
59411: ARRAY
59412: PUSH
59413: LD_INT 4
59415: ARRAY
59416: ST_TO_ADDR
// end ;
59417: LD_VAR 0 2
59421: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59422: LD_INT 0
59424: PPUSH
59425: PPUSH
59426: PPUSH
59427: PPUSH
// if not base_units then
59428: LD_VAR 0 1
59432: NOT
59433: IFFALSE 59437
// exit ;
59435: GO 59524
// result := false ;
59437: LD_ADDR_VAR 0 2
59441: PUSH
59442: LD_INT 0
59444: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59445: LD_ADDR_VAR 0 5
59449: PUSH
59450: LD_VAR 0 1
59454: PPUSH
59455: LD_INT 21
59457: PUSH
59458: LD_INT 3
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PPUSH
59465: CALL_OW 72
59469: ST_TO_ADDR
// if not tmp then
59470: LD_VAR 0 5
59474: NOT
59475: IFFALSE 59479
// exit ;
59477: GO 59524
// for i in tmp do
59479: LD_ADDR_VAR 0 3
59483: PUSH
59484: LD_VAR 0 5
59488: PUSH
59489: FOR_IN
59490: IFFALSE 59522
// begin result := EnemyInRange ( i , 22 ) ;
59492: LD_ADDR_VAR 0 2
59496: PUSH
59497: LD_VAR 0 3
59501: PPUSH
59502: LD_INT 22
59504: PPUSH
59505: CALL 57760 0 2
59509: ST_TO_ADDR
// if result then
59510: LD_VAR 0 2
59514: IFFALSE 59520
// exit ;
59516: POP
59517: POP
59518: GO 59524
// end ;
59520: GO 59489
59522: POP
59523: POP
// end ;
59524: LD_VAR 0 2
59528: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59529: LD_INT 0
59531: PPUSH
59532: PPUSH
// if not units then
59533: LD_VAR 0 1
59537: NOT
59538: IFFALSE 59542
// exit ;
59540: GO 59612
// result := [ ] ;
59542: LD_ADDR_VAR 0 3
59546: PUSH
59547: EMPTY
59548: ST_TO_ADDR
// for i in units do
59549: LD_ADDR_VAR 0 4
59553: PUSH
59554: LD_VAR 0 1
59558: PUSH
59559: FOR_IN
59560: IFFALSE 59610
// if GetTag ( i ) = tag then
59562: LD_VAR 0 4
59566: PPUSH
59567: CALL_OW 110
59571: PUSH
59572: LD_VAR 0 2
59576: EQUAL
59577: IFFALSE 59608
// result := Replace ( result , result + 1 , i ) ;
59579: LD_ADDR_VAR 0 3
59583: PUSH
59584: LD_VAR 0 3
59588: PPUSH
59589: LD_VAR 0 3
59593: PUSH
59594: LD_INT 1
59596: PLUS
59597: PPUSH
59598: LD_VAR 0 4
59602: PPUSH
59603: CALL_OW 1
59607: ST_TO_ADDR
59608: GO 59559
59610: POP
59611: POP
// end ;
59612: LD_VAR 0 3
59616: RET
// export function IsDriver ( un ) ; begin
59617: LD_INT 0
59619: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59620: LD_ADDR_VAR 0 2
59624: PUSH
59625: LD_VAR 0 1
59629: PUSH
59630: LD_INT 55
59632: PUSH
59633: EMPTY
59634: LIST
59635: PPUSH
59636: CALL_OW 69
59640: IN
59641: ST_TO_ADDR
// end ;
59642: LD_VAR 0 2
59646: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59647: LD_INT 0
59649: PPUSH
59650: PPUSH
// list := [ ] ;
59651: LD_ADDR_VAR 0 5
59655: PUSH
59656: EMPTY
59657: ST_TO_ADDR
// case d of 0 :
59658: LD_VAR 0 3
59662: PUSH
59663: LD_INT 0
59665: DOUBLE
59666: EQUAL
59667: IFTRUE 59671
59669: GO 59804
59671: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59672: LD_ADDR_VAR 0 5
59676: PUSH
59677: LD_VAR 0 1
59681: PUSH
59682: LD_INT 4
59684: MINUS
59685: PUSH
59686: LD_VAR 0 2
59690: PUSH
59691: LD_INT 4
59693: MINUS
59694: PUSH
59695: LD_INT 2
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: LIST
59702: PUSH
59703: LD_VAR 0 1
59707: PUSH
59708: LD_INT 3
59710: MINUS
59711: PUSH
59712: LD_VAR 0 2
59716: PUSH
59717: LD_INT 1
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: LIST
59724: PUSH
59725: LD_VAR 0 1
59729: PUSH
59730: LD_INT 4
59732: PLUS
59733: PUSH
59734: LD_VAR 0 2
59738: PUSH
59739: LD_INT 4
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: LIST
59746: PUSH
59747: LD_VAR 0 1
59751: PUSH
59752: LD_INT 3
59754: PLUS
59755: PUSH
59756: LD_VAR 0 2
59760: PUSH
59761: LD_INT 3
59763: PLUS
59764: PUSH
59765: LD_INT 5
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: LIST
59772: PUSH
59773: LD_VAR 0 1
59777: PUSH
59778: LD_VAR 0 2
59782: PUSH
59783: LD_INT 4
59785: PLUS
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: LIST
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: ST_TO_ADDR
// end ; 1 :
59802: GO 60502
59804: LD_INT 1
59806: DOUBLE
59807: EQUAL
59808: IFTRUE 59812
59810: GO 59945
59812: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59813: LD_ADDR_VAR 0 5
59817: PUSH
59818: LD_VAR 0 1
59822: PUSH
59823: LD_VAR 0 2
59827: PUSH
59828: LD_INT 4
59830: MINUS
59831: PUSH
59832: LD_INT 3
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: LIST
59839: PUSH
59840: LD_VAR 0 1
59844: PUSH
59845: LD_INT 3
59847: MINUS
59848: PUSH
59849: LD_VAR 0 2
59853: PUSH
59854: LD_INT 3
59856: MINUS
59857: PUSH
59858: LD_INT 2
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: LIST
59865: PUSH
59866: LD_VAR 0 1
59870: PUSH
59871: LD_INT 4
59873: MINUS
59874: PUSH
59875: LD_VAR 0 2
59879: PUSH
59880: LD_INT 1
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: LIST
59887: PUSH
59888: LD_VAR 0 1
59892: PUSH
59893: LD_VAR 0 2
59897: PUSH
59898: LD_INT 3
59900: PLUS
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: LIST
59909: PUSH
59910: LD_VAR 0 1
59914: PUSH
59915: LD_INT 4
59917: PLUS
59918: PUSH
59919: LD_VAR 0 2
59923: PUSH
59924: LD_INT 4
59926: PLUS
59927: PUSH
59928: LD_INT 5
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: LIST
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: ST_TO_ADDR
// end ; 2 :
59943: GO 60502
59945: LD_INT 2
59947: DOUBLE
59948: EQUAL
59949: IFTRUE 59953
59951: GO 60082
59953: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59954: LD_ADDR_VAR 0 5
59958: PUSH
59959: LD_VAR 0 1
59963: PUSH
59964: LD_VAR 0 2
59968: PUSH
59969: LD_INT 3
59971: MINUS
59972: PUSH
59973: LD_INT 3
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: LIST
59980: PUSH
59981: LD_VAR 0 1
59985: PUSH
59986: LD_INT 4
59988: PLUS
59989: PUSH
59990: LD_VAR 0 2
59994: PUSH
59995: LD_INT 4
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: LIST
60002: PUSH
60003: LD_VAR 0 1
60007: PUSH
60008: LD_VAR 0 2
60012: PUSH
60013: LD_INT 4
60015: PLUS
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: LIST
60024: PUSH
60025: LD_VAR 0 1
60029: PUSH
60030: LD_INT 3
60032: MINUS
60033: PUSH
60034: LD_VAR 0 2
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: LIST
60046: PUSH
60047: LD_VAR 0 1
60051: PUSH
60052: LD_INT 4
60054: MINUS
60055: PUSH
60056: LD_VAR 0 2
60060: PUSH
60061: LD_INT 4
60063: MINUS
60064: PUSH
60065: LD_INT 2
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: LIST
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: ST_TO_ADDR
// end ; 3 :
60080: GO 60502
60082: LD_INT 3
60084: DOUBLE
60085: EQUAL
60086: IFTRUE 60090
60088: GO 60223
60090: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60091: LD_ADDR_VAR 0 5
60095: PUSH
60096: LD_VAR 0 1
60100: PUSH
60101: LD_INT 3
60103: PLUS
60104: PUSH
60105: LD_VAR 0 2
60109: PUSH
60110: LD_INT 4
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: LIST
60117: PUSH
60118: LD_VAR 0 1
60122: PUSH
60123: LD_INT 4
60125: PLUS
60126: PUSH
60127: LD_VAR 0 2
60131: PUSH
60132: LD_INT 4
60134: PLUS
60135: PUSH
60136: LD_INT 5
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: LIST
60143: PUSH
60144: LD_VAR 0 1
60148: PUSH
60149: LD_INT 4
60151: MINUS
60152: PUSH
60153: LD_VAR 0 2
60157: PUSH
60158: LD_INT 1
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: LIST
60165: PUSH
60166: LD_VAR 0 1
60170: PUSH
60171: LD_VAR 0 2
60175: PUSH
60176: LD_INT 4
60178: MINUS
60179: PUSH
60180: LD_INT 3
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: LIST
60187: PUSH
60188: LD_VAR 0 1
60192: PUSH
60193: LD_INT 3
60195: MINUS
60196: PUSH
60197: LD_VAR 0 2
60201: PUSH
60202: LD_INT 3
60204: MINUS
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: LIST
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: ST_TO_ADDR
// end ; 4 :
60221: GO 60502
60223: LD_INT 4
60225: DOUBLE
60226: EQUAL
60227: IFTRUE 60231
60229: GO 60364
60231: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60232: LD_ADDR_VAR 0 5
60236: PUSH
60237: LD_VAR 0 1
60241: PUSH
60242: LD_VAR 0 2
60246: PUSH
60247: LD_INT 4
60249: PLUS
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: LIST
60258: PUSH
60259: LD_VAR 0 1
60263: PUSH
60264: LD_INT 3
60266: PLUS
60267: PUSH
60268: LD_VAR 0 2
60272: PUSH
60273: LD_INT 3
60275: PLUS
60276: PUSH
60277: LD_INT 5
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: LIST
60284: PUSH
60285: LD_VAR 0 1
60289: PUSH
60290: LD_INT 4
60292: PLUS
60293: PUSH
60294: LD_VAR 0 2
60298: PUSH
60299: LD_INT 4
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: LIST
60306: PUSH
60307: LD_VAR 0 1
60311: PUSH
60312: LD_VAR 0 2
60316: PUSH
60317: LD_INT 3
60319: MINUS
60320: PUSH
60321: LD_INT 3
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: LIST
60328: PUSH
60329: LD_VAR 0 1
60333: PUSH
60334: LD_INT 4
60336: MINUS
60337: PUSH
60338: LD_VAR 0 2
60342: PUSH
60343: LD_INT 4
60345: MINUS
60346: PUSH
60347: LD_INT 2
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: LIST
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: ST_TO_ADDR
// end ; 5 :
60362: GO 60502
60364: LD_INT 5
60366: DOUBLE
60367: EQUAL
60368: IFTRUE 60372
60370: GO 60501
60372: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60373: LD_ADDR_VAR 0 5
60377: PUSH
60378: LD_VAR 0 1
60382: PUSH
60383: LD_INT 4
60385: MINUS
60386: PUSH
60387: LD_VAR 0 2
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: LIST
60399: PUSH
60400: LD_VAR 0 1
60404: PUSH
60405: LD_VAR 0 2
60409: PUSH
60410: LD_INT 4
60412: MINUS
60413: PUSH
60414: LD_INT 3
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: LIST
60421: PUSH
60422: LD_VAR 0 1
60426: PUSH
60427: LD_INT 4
60429: PLUS
60430: PUSH
60431: LD_VAR 0 2
60435: PUSH
60436: LD_INT 4
60438: PLUS
60439: PUSH
60440: LD_INT 5
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: PUSH
60448: LD_VAR 0 1
60452: PUSH
60453: LD_INT 3
60455: PLUS
60456: PUSH
60457: LD_VAR 0 2
60461: PUSH
60462: LD_INT 4
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: LIST
60469: PUSH
60470: LD_VAR 0 1
60474: PUSH
60475: LD_VAR 0 2
60479: PUSH
60480: LD_INT 3
60482: PLUS
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: LIST
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: ST_TO_ADDR
// end ; end ;
60499: GO 60502
60501: POP
// result := list ;
60502: LD_ADDR_VAR 0 4
60506: PUSH
60507: LD_VAR 0 5
60511: ST_TO_ADDR
// end ;
60512: LD_VAR 0 4
60516: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60517: LD_INT 0
60519: PPUSH
60520: PPUSH
60521: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60522: LD_VAR 0 1
60526: NOT
60527: PUSH
60528: LD_VAR 0 2
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: LD_INT 2
60538: PUSH
60539: LD_INT 3
60541: PUSH
60542: LD_INT 4
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: IN
60551: NOT
60552: OR
60553: IFFALSE 60557
// exit ;
60555: GO 60649
// tmp := [ ] ;
60557: LD_ADDR_VAR 0 5
60561: PUSH
60562: EMPTY
60563: ST_TO_ADDR
// for i in units do
60564: LD_ADDR_VAR 0 4
60568: PUSH
60569: LD_VAR 0 1
60573: PUSH
60574: FOR_IN
60575: IFFALSE 60618
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60577: LD_ADDR_VAR 0 5
60581: PUSH
60582: LD_VAR 0 5
60586: PPUSH
60587: LD_VAR 0 5
60591: PUSH
60592: LD_INT 1
60594: PLUS
60595: PPUSH
60596: LD_VAR 0 4
60600: PPUSH
60601: LD_VAR 0 2
60605: PPUSH
60606: CALL_OW 259
60610: PPUSH
60611: CALL_OW 2
60615: ST_TO_ADDR
60616: GO 60574
60618: POP
60619: POP
// if not tmp then
60620: LD_VAR 0 5
60624: NOT
60625: IFFALSE 60629
// exit ;
60627: GO 60649
// result := SortListByListDesc ( units , tmp ) ;
60629: LD_ADDR_VAR 0 3
60633: PUSH
60634: LD_VAR 0 1
60638: PPUSH
60639: LD_VAR 0 5
60643: PPUSH
60644: CALL_OW 77
60648: ST_TO_ADDR
// end ;
60649: LD_VAR 0 3
60653: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60654: LD_INT 0
60656: PPUSH
60657: PPUSH
60658: PPUSH
// result := false ;
60659: LD_ADDR_VAR 0 3
60663: PUSH
60664: LD_INT 0
60666: ST_TO_ADDR
// x := GetX ( building ) ;
60667: LD_ADDR_VAR 0 4
60671: PUSH
60672: LD_VAR 0 2
60676: PPUSH
60677: CALL_OW 250
60681: ST_TO_ADDR
// y := GetY ( building ) ;
60682: LD_ADDR_VAR 0 5
60686: PUSH
60687: LD_VAR 0 2
60691: PPUSH
60692: CALL_OW 251
60696: ST_TO_ADDR
// if not building or not x or not y then
60697: LD_VAR 0 2
60701: NOT
60702: PUSH
60703: LD_VAR 0 4
60707: NOT
60708: OR
60709: PUSH
60710: LD_VAR 0 5
60714: NOT
60715: OR
60716: IFFALSE 60720
// exit ;
60718: GO 60812
// if GetTaskList ( unit ) then
60720: LD_VAR 0 1
60724: PPUSH
60725: CALL_OW 437
60729: IFFALSE 60812
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60731: LD_STRING e
60733: PUSH
60734: LD_VAR 0 1
60738: PPUSH
60739: CALL_OW 437
60743: PUSH
60744: LD_INT 1
60746: ARRAY
60747: PUSH
60748: LD_INT 1
60750: ARRAY
60751: EQUAL
60752: PUSH
60753: LD_VAR 0 4
60757: PUSH
60758: LD_VAR 0 1
60762: PPUSH
60763: CALL_OW 437
60767: PUSH
60768: LD_INT 1
60770: ARRAY
60771: PUSH
60772: LD_INT 2
60774: ARRAY
60775: EQUAL
60776: AND
60777: PUSH
60778: LD_VAR 0 5
60782: PUSH
60783: LD_VAR 0 1
60787: PPUSH
60788: CALL_OW 437
60792: PUSH
60793: LD_INT 1
60795: ARRAY
60796: PUSH
60797: LD_INT 3
60799: ARRAY
60800: EQUAL
60801: AND
60802: IFFALSE 60812
// result := true end ;
60804: LD_ADDR_VAR 0 3
60808: PUSH
60809: LD_INT 1
60811: ST_TO_ADDR
// end ;
60812: LD_VAR 0 3
60816: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60817: LD_INT 0
60819: PPUSH
// result := false ;
60820: LD_ADDR_VAR 0 4
60824: PUSH
60825: LD_INT 0
60827: ST_TO_ADDR
// if GetTaskList ( unit ) then
60828: LD_VAR 0 1
60832: PPUSH
60833: CALL_OW 437
60837: IFFALSE 60920
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60839: LD_STRING M
60841: PUSH
60842: LD_VAR 0 1
60846: PPUSH
60847: CALL_OW 437
60851: PUSH
60852: LD_INT 1
60854: ARRAY
60855: PUSH
60856: LD_INT 1
60858: ARRAY
60859: EQUAL
60860: PUSH
60861: LD_VAR 0 2
60865: PUSH
60866: LD_VAR 0 1
60870: PPUSH
60871: CALL_OW 437
60875: PUSH
60876: LD_INT 1
60878: ARRAY
60879: PUSH
60880: LD_INT 2
60882: ARRAY
60883: EQUAL
60884: AND
60885: PUSH
60886: LD_VAR 0 3
60890: PUSH
60891: LD_VAR 0 1
60895: PPUSH
60896: CALL_OW 437
60900: PUSH
60901: LD_INT 1
60903: ARRAY
60904: PUSH
60905: LD_INT 3
60907: ARRAY
60908: EQUAL
60909: AND
60910: IFFALSE 60920
// result := true ;
60912: LD_ADDR_VAR 0 4
60916: PUSH
60917: LD_INT 1
60919: ST_TO_ADDR
// end ; end ;
60920: LD_VAR 0 4
60924: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60925: LD_INT 0
60927: PPUSH
60928: PPUSH
60929: PPUSH
60930: PPUSH
// if not unit or not area then
60931: LD_VAR 0 1
60935: NOT
60936: PUSH
60937: LD_VAR 0 2
60941: NOT
60942: OR
60943: IFFALSE 60947
// exit ;
60945: GO 61111
// tmp := AreaToList ( area , i ) ;
60947: LD_ADDR_VAR 0 6
60951: PUSH
60952: LD_VAR 0 2
60956: PPUSH
60957: LD_VAR 0 5
60961: PPUSH
60962: CALL_OW 517
60966: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60967: LD_ADDR_VAR 0 5
60971: PUSH
60972: DOUBLE
60973: LD_INT 1
60975: DEC
60976: ST_TO_ADDR
60977: LD_VAR 0 6
60981: PUSH
60982: LD_INT 1
60984: ARRAY
60985: PUSH
60986: FOR_TO
60987: IFFALSE 61109
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60989: LD_ADDR_VAR 0 7
60993: PUSH
60994: LD_VAR 0 6
60998: PUSH
60999: LD_INT 1
61001: ARRAY
61002: PUSH
61003: LD_VAR 0 5
61007: ARRAY
61008: PUSH
61009: LD_VAR 0 6
61013: PUSH
61014: LD_INT 2
61016: ARRAY
61017: PUSH
61018: LD_VAR 0 5
61022: ARRAY
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61028: LD_VAR 0 7
61032: PUSH
61033: LD_INT 1
61035: ARRAY
61036: PPUSH
61037: LD_VAR 0 7
61041: PUSH
61042: LD_INT 2
61044: ARRAY
61045: PPUSH
61046: CALL_OW 428
61050: PUSH
61051: LD_INT 0
61053: EQUAL
61054: IFFALSE 61107
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61056: LD_VAR 0 1
61060: PPUSH
61061: LD_VAR 0 7
61065: PUSH
61066: LD_INT 1
61068: ARRAY
61069: PPUSH
61070: LD_VAR 0 7
61074: PUSH
61075: LD_INT 2
61077: ARRAY
61078: PPUSH
61079: LD_VAR 0 3
61083: PPUSH
61084: CALL_OW 48
// result := IsPlaced ( unit ) ;
61088: LD_ADDR_VAR 0 4
61092: PUSH
61093: LD_VAR 0 1
61097: PPUSH
61098: CALL_OW 305
61102: ST_TO_ADDR
// exit ;
61103: POP
61104: POP
61105: GO 61111
// end ; end ;
61107: GO 60986
61109: POP
61110: POP
// end ;
61111: LD_VAR 0 4
61115: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61116: LD_INT 0
61118: PPUSH
61119: PPUSH
61120: PPUSH
// if not side or side > 8 then
61121: LD_VAR 0 1
61125: NOT
61126: PUSH
61127: LD_VAR 0 1
61131: PUSH
61132: LD_INT 8
61134: GREATER
61135: OR
61136: IFFALSE 61140
// exit ;
61138: GO 61327
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61140: LD_ADDR_VAR 0 4
61144: PUSH
61145: LD_INT 22
61147: PUSH
61148: LD_VAR 0 1
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 21
61159: PUSH
61160: LD_INT 3
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PPUSH
61171: CALL_OW 69
61175: ST_TO_ADDR
// if not tmp then
61176: LD_VAR 0 4
61180: NOT
61181: IFFALSE 61185
// exit ;
61183: GO 61327
// enable_addtolog := true ;
61185: LD_ADDR_OWVAR 81
61189: PUSH
61190: LD_INT 1
61192: ST_TO_ADDR
// AddToLog ( [ ) ;
61193: LD_STRING [
61195: PPUSH
61196: CALL_OW 561
// for i in tmp do
61200: LD_ADDR_VAR 0 3
61204: PUSH
61205: LD_VAR 0 4
61209: PUSH
61210: FOR_IN
61211: IFFALSE 61318
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61213: LD_STRING [
61215: PUSH
61216: LD_VAR 0 3
61220: PPUSH
61221: CALL_OW 266
61225: STR
61226: PUSH
61227: LD_STRING , 
61229: STR
61230: PUSH
61231: LD_VAR 0 3
61235: PPUSH
61236: CALL_OW 250
61240: STR
61241: PUSH
61242: LD_STRING , 
61244: STR
61245: PUSH
61246: LD_VAR 0 3
61250: PPUSH
61251: CALL_OW 251
61255: STR
61256: PUSH
61257: LD_STRING , 
61259: STR
61260: PUSH
61261: LD_VAR 0 3
61265: PPUSH
61266: CALL_OW 254
61270: STR
61271: PUSH
61272: LD_STRING , 
61274: STR
61275: PUSH
61276: LD_VAR 0 3
61280: PPUSH
61281: LD_INT 1
61283: PPUSH
61284: CALL_OW 268
61288: STR
61289: PUSH
61290: LD_STRING , 
61292: STR
61293: PUSH
61294: LD_VAR 0 3
61298: PPUSH
61299: LD_INT 2
61301: PPUSH
61302: CALL_OW 268
61306: STR
61307: PUSH
61308: LD_STRING ],
61310: STR
61311: PPUSH
61312: CALL_OW 561
// end ;
61316: GO 61210
61318: POP
61319: POP
// AddToLog ( ]; ) ;
61320: LD_STRING ];
61322: PPUSH
61323: CALL_OW 561
// end ;
61327: LD_VAR 0 2
61331: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61332: LD_INT 0
61334: PPUSH
61335: PPUSH
61336: PPUSH
61337: PPUSH
61338: PPUSH
// if not area or not rate or not max then
61339: LD_VAR 0 1
61343: NOT
61344: PUSH
61345: LD_VAR 0 2
61349: NOT
61350: OR
61351: PUSH
61352: LD_VAR 0 4
61356: NOT
61357: OR
61358: IFFALSE 61362
// exit ;
61360: GO 61554
// while 1 do
61362: LD_INT 1
61364: IFFALSE 61554
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61366: LD_ADDR_VAR 0 9
61370: PUSH
61371: LD_VAR 0 1
61375: PPUSH
61376: LD_INT 1
61378: PPUSH
61379: CALL_OW 287
61383: PUSH
61384: LD_INT 10
61386: MUL
61387: ST_TO_ADDR
// r := rate / 10 ;
61388: LD_ADDR_VAR 0 7
61392: PUSH
61393: LD_VAR 0 2
61397: PUSH
61398: LD_INT 10
61400: DIVREAL
61401: ST_TO_ADDR
// time := 1 1$00 ;
61402: LD_ADDR_VAR 0 8
61406: PUSH
61407: LD_INT 2100
61409: ST_TO_ADDR
// if amount < min then
61410: LD_VAR 0 9
61414: PUSH
61415: LD_VAR 0 3
61419: LESS
61420: IFFALSE 61438
// r := r * 2 else
61422: LD_ADDR_VAR 0 7
61426: PUSH
61427: LD_VAR 0 7
61431: PUSH
61432: LD_INT 2
61434: MUL
61435: ST_TO_ADDR
61436: GO 61464
// if amount > max then
61438: LD_VAR 0 9
61442: PUSH
61443: LD_VAR 0 4
61447: GREATER
61448: IFFALSE 61464
// r := r / 2 ;
61450: LD_ADDR_VAR 0 7
61454: PUSH
61455: LD_VAR 0 7
61459: PUSH
61460: LD_INT 2
61462: DIVREAL
61463: ST_TO_ADDR
// time := time / r ;
61464: LD_ADDR_VAR 0 8
61468: PUSH
61469: LD_VAR 0 8
61473: PUSH
61474: LD_VAR 0 7
61478: DIVREAL
61479: ST_TO_ADDR
// if time < 0 then
61480: LD_VAR 0 8
61484: PUSH
61485: LD_INT 0
61487: LESS
61488: IFFALSE 61505
// time := time * - 1 ;
61490: LD_ADDR_VAR 0 8
61494: PUSH
61495: LD_VAR 0 8
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: MUL
61504: ST_TO_ADDR
// wait ( time ) ;
61505: LD_VAR 0 8
61509: PPUSH
61510: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61514: LD_INT 35
61516: PPUSH
61517: LD_INT 875
61519: PPUSH
61520: CALL_OW 12
61524: PPUSH
61525: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61529: LD_INT 1
61531: PPUSH
61532: LD_INT 5
61534: PPUSH
61535: CALL_OW 12
61539: PPUSH
61540: LD_VAR 0 1
61544: PPUSH
61545: LD_INT 1
61547: PPUSH
61548: CALL_OW 55
// end ;
61552: GO 61362
// end ;
61554: LD_VAR 0 5
61558: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61559: LD_INT 0
61561: PPUSH
61562: PPUSH
61563: PPUSH
61564: PPUSH
61565: PPUSH
61566: PPUSH
61567: PPUSH
61568: PPUSH
// if not turrets or not factories then
61569: LD_VAR 0 1
61573: NOT
61574: PUSH
61575: LD_VAR 0 2
61579: NOT
61580: OR
61581: IFFALSE 61585
// exit ;
61583: GO 61892
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61585: LD_ADDR_VAR 0 10
61589: PUSH
61590: LD_INT 5
61592: PUSH
61593: LD_INT 6
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 2
61602: PUSH
61603: LD_INT 4
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 3
61612: PUSH
61613: LD_INT 5
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 24
61627: PUSH
61628: LD_INT 25
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 23
61637: PUSH
61638: LD_INT 27
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 42
61651: PUSH
61652: LD_INT 43
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 44
61661: PUSH
61662: LD_INT 46
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 45
61671: PUSH
61672: LD_INT 47
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: LIST
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: LIST
61688: ST_TO_ADDR
// result := [ ] ;
61689: LD_ADDR_VAR 0 3
61693: PUSH
61694: EMPTY
61695: ST_TO_ADDR
// for i in turrets do
61696: LD_ADDR_VAR 0 4
61700: PUSH
61701: LD_VAR 0 1
61705: PUSH
61706: FOR_IN
61707: IFFALSE 61890
// begin nat := GetNation ( i ) ;
61709: LD_ADDR_VAR 0 7
61713: PUSH
61714: LD_VAR 0 4
61718: PPUSH
61719: CALL_OW 248
61723: ST_TO_ADDR
// weapon := 0 ;
61724: LD_ADDR_VAR 0 8
61728: PUSH
61729: LD_INT 0
61731: ST_TO_ADDR
// if not nat then
61732: LD_VAR 0 7
61736: NOT
61737: IFFALSE 61741
// continue ;
61739: GO 61706
// for j in list [ nat ] do
61741: LD_ADDR_VAR 0 5
61745: PUSH
61746: LD_VAR 0 10
61750: PUSH
61751: LD_VAR 0 7
61755: ARRAY
61756: PUSH
61757: FOR_IN
61758: IFFALSE 61799
// if GetBWeapon ( i ) = j [ 1 ] then
61760: LD_VAR 0 4
61764: PPUSH
61765: CALL_OW 269
61769: PUSH
61770: LD_VAR 0 5
61774: PUSH
61775: LD_INT 1
61777: ARRAY
61778: EQUAL
61779: IFFALSE 61797
// begin weapon := j [ 2 ] ;
61781: LD_ADDR_VAR 0 8
61785: PUSH
61786: LD_VAR 0 5
61790: PUSH
61791: LD_INT 2
61793: ARRAY
61794: ST_TO_ADDR
// break ;
61795: GO 61799
// end ;
61797: GO 61757
61799: POP
61800: POP
// if not weapon then
61801: LD_VAR 0 8
61805: NOT
61806: IFFALSE 61810
// continue ;
61808: GO 61706
// for k in factories do
61810: LD_ADDR_VAR 0 6
61814: PUSH
61815: LD_VAR 0 2
61819: PUSH
61820: FOR_IN
61821: IFFALSE 61886
// begin weapons := AvailableWeaponList ( k ) ;
61823: LD_ADDR_VAR 0 9
61827: PUSH
61828: LD_VAR 0 6
61832: PPUSH
61833: CALL_OW 478
61837: ST_TO_ADDR
// if not weapons then
61838: LD_VAR 0 9
61842: NOT
61843: IFFALSE 61847
// continue ;
61845: GO 61820
// if weapon in weapons then
61847: LD_VAR 0 8
61851: PUSH
61852: LD_VAR 0 9
61856: IN
61857: IFFALSE 61884
// begin result := [ i , weapon ] ;
61859: LD_ADDR_VAR 0 3
61863: PUSH
61864: LD_VAR 0 4
61868: PUSH
61869: LD_VAR 0 8
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: ST_TO_ADDR
// exit ;
61878: POP
61879: POP
61880: POP
61881: POP
61882: GO 61892
// end ; end ;
61884: GO 61820
61886: POP
61887: POP
// end ;
61888: GO 61706
61890: POP
61891: POP
// end ;
61892: LD_VAR 0 3
61896: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61897: LD_INT 0
61899: PPUSH
// if not side or side > 8 then
61900: LD_VAR 0 3
61904: NOT
61905: PUSH
61906: LD_VAR 0 3
61910: PUSH
61911: LD_INT 8
61913: GREATER
61914: OR
61915: IFFALSE 61919
// exit ;
61917: GO 61978
// if not range then
61919: LD_VAR 0 4
61923: NOT
61924: IFFALSE 61935
// range := - 12 ;
61926: LD_ADDR_VAR 0 4
61930: PUSH
61931: LD_INT 12
61933: NEG
61934: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61935: LD_VAR 0 1
61939: PPUSH
61940: LD_VAR 0 2
61944: PPUSH
61945: LD_VAR 0 3
61949: PPUSH
61950: LD_VAR 0 4
61954: PPUSH
61955: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61959: LD_VAR 0 1
61963: PPUSH
61964: LD_VAR 0 2
61968: PPUSH
61969: LD_VAR 0 3
61973: PPUSH
61974: CALL_OW 331
// end ;
61978: LD_VAR 0 5
61982: RET
// export function Video ( mode ) ; begin
61983: LD_INT 0
61985: PPUSH
// ingame_video = mode ;
61986: LD_ADDR_OWVAR 52
61990: PUSH
61991: LD_VAR 0 1
61995: ST_TO_ADDR
// interface_hidden = mode ;
61996: LD_ADDR_OWVAR 54
62000: PUSH
62001: LD_VAR 0 1
62005: ST_TO_ADDR
// end ;
62006: LD_VAR 0 2
62010: RET
// export function Join ( array , element ) ; begin
62011: LD_INT 0
62013: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62014: LD_ADDR_VAR 0 3
62018: PUSH
62019: LD_VAR 0 1
62023: PPUSH
62024: LD_VAR 0 1
62028: PUSH
62029: LD_INT 1
62031: PLUS
62032: PPUSH
62033: LD_VAR 0 2
62037: PPUSH
62038: CALL_OW 1
62042: ST_TO_ADDR
// end ;
62043: LD_VAR 0 3
62047: RET
// export function JoinUnion ( array , element ) ; begin
62048: LD_INT 0
62050: PPUSH
// result := array union element ;
62051: LD_ADDR_VAR 0 3
62055: PUSH
62056: LD_VAR 0 1
62060: PUSH
62061: LD_VAR 0 2
62065: UNION
62066: ST_TO_ADDR
// end ;
62067: LD_VAR 0 3
62071: RET
// export function GetBehemoths ( side ) ; begin
62072: LD_INT 0
62074: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62075: LD_ADDR_VAR 0 2
62079: PUSH
62080: LD_INT 22
62082: PUSH
62083: LD_VAR 0 1
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 31
62094: PUSH
62095: LD_INT 25
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PPUSH
62106: CALL_OW 69
62110: ST_TO_ADDR
// end ;
62111: LD_VAR 0 2
62115: RET
// export function Shuffle ( array ) ; var i , index ; begin
62116: LD_INT 0
62118: PPUSH
62119: PPUSH
62120: PPUSH
// result := [ ] ;
62121: LD_ADDR_VAR 0 2
62125: PUSH
62126: EMPTY
62127: ST_TO_ADDR
// if not array then
62128: LD_VAR 0 1
62132: NOT
62133: IFFALSE 62137
// exit ;
62135: GO 62236
// Randomize ;
62137: CALL_OW 10
// for i = array downto 1 do
62141: LD_ADDR_VAR 0 3
62145: PUSH
62146: DOUBLE
62147: LD_VAR 0 1
62151: INC
62152: ST_TO_ADDR
62153: LD_INT 1
62155: PUSH
62156: FOR_DOWNTO
62157: IFFALSE 62234
// begin index := rand ( 1 , array ) ;
62159: LD_ADDR_VAR 0 4
62163: PUSH
62164: LD_INT 1
62166: PPUSH
62167: LD_VAR 0 1
62171: PPUSH
62172: CALL_OW 12
62176: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62177: LD_ADDR_VAR 0 2
62181: PUSH
62182: LD_VAR 0 2
62186: PPUSH
62187: LD_VAR 0 2
62191: PUSH
62192: LD_INT 1
62194: PLUS
62195: PPUSH
62196: LD_VAR 0 1
62200: PUSH
62201: LD_VAR 0 4
62205: ARRAY
62206: PPUSH
62207: CALL_OW 2
62211: ST_TO_ADDR
// array := Delete ( array , index ) ;
62212: LD_ADDR_VAR 0 1
62216: PUSH
62217: LD_VAR 0 1
62221: PPUSH
62222: LD_VAR 0 4
62226: PPUSH
62227: CALL_OW 3
62231: ST_TO_ADDR
// end ;
62232: GO 62156
62234: POP
62235: POP
// end ;
62236: LD_VAR 0 2
62240: RET
// export function GetBaseMaterials ( base ) ; begin
62241: LD_INT 0
62243: PPUSH
// result := [ 0 , 0 , 0 ] ;
62244: LD_ADDR_VAR 0 2
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: LIST
62262: ST_TO_ADDR
// if not base then
62263: LD_VAR 0 1
62267: NOT
62268: IFFALSE 62272
// exit ;
62270: GO 62321
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62272: LD_ADDR_VAR 0 2
62276: PUSH
62277: LD_VAR 0 1
62281: PPUSH
62282: LD_INT 1
62284: PPUSH
62285: CALL_OW 275
62289: PUSH
62290: LD_VAR 0 1
62294: PPUSH
62295: LD_INT 2
62297: PPUSH
62298: CALL_OW 275
62302: PUSH
62303: LD_VAR 0 1
62307: PPUSH
62308: LD_INT 3
62310: PPUSH
62311: CALL_OW 275
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: LIST
62320: ST_TO_ADDR
// end ;
62321: LD_VAR 0 2
62325: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62326: LD_INT 0
62328: PPUSH
62329: PPUSH
// result := array ;
62330: LD_ADDR_VAR 0 3
62334: PUSH
62335: LD_VAR 0 1
62339: ST_TO_ADDR
// if size > 0 then
62340: LD_VAR 0 2
62344: PUSH
62345: LD_INT 0
62347: GREATER
62348: IFFALSE 62394
// for i := array downto size do
62350: LD_ADDR_VAR 0 4
62354: PUSH
62355: DOUBLE
62356: LD_VAR 0 1
62360: INC
62361: ST_TO_ADDR
62362: LD_VAR 0 2
62366: PUSH
62367: FOR_DOWNTO
62368: IFFALSE 62392
// result := Delete ( result , result ) ;
62370: LD_ADDR_VAR 0 3
62374: PUSH
62375: LD_VAR 0 3
62379: PPUSH
62380: LD_VAR 0 3
62384: PPUSH
62385: CALL_OW 3
62389: ST_TO_ADDR
62390: GO 62367
62392: POP
62393: POP
// end ;
62394: LD_VAR 0 3
62398: RET
// export function ComExit ( unit ) ; var tmp ; begin
62399: LD_INT 0
62401: PPUSH
62402: PPUSH
// if not IsInUnit ( unit ) then
62403: LD_VAR 0 1
62407: PPUSH
62408: CALL_OW 310
62412: NOT
62413: IFFALSE 62417
// exit ;
62415: GO 62477
// tmp := IsInUnit ( unit ) ;
62417: LD_ADDR_VAR 0 3
62421: PUSH
62422: LD_VAR 0 1
62426: PPUSH
62427: CALL_OW 310
62431: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62432: LD_VAR 0 3
62436: PPUSH
62437: CALL_OW 247
62441: PUSH
62442: LD_INT 2
62444: EQUAL
62445: IFFALSE 62458
// ComExitVehicle ( unit ) else
62447: LD_VAR 0 1
62451: PPUSH
62452: CALL_OW 121
62456: GO 62467
// ComExitBuilding ( unit ) ;
62458: LD_VAR 0 1
62462: PPUSH
62463: CALL_OW 122
// result := tmp ;
62467: LD_ADDR_VAR 0 2
62471: PUSH
62472: LD_VAR 0 3
62476: ST_TO_ADDR
// end ;
62477: LD_VAR 0 2
62481: RET
// export function ComExitAll ( units ) ; var i ; begin
62482: LD_INT 0
62484: PPUSH
62485: PPUSH
// if not units then
62486: LD_VAR 0 1
62490: NOT
62491: IFFALSE 62495
// exit ;
62493: GO 62521
// for i in units do
62495: LD_ADDR_VAR 0 3
62499: PUSH
62500: LD_VAR 0 1
62504: PUSH
62505: FOR_IN
62506: IFFALSE 62519
// ComExit ( i ) ;
62508: LD_VAR 0 3
62512: PPUSH
62513: CALL 62399 0 1
62517: GO 62505
62519: POP
62520: POP
// end ;
62521: LD_VAR 0 2
62525: RET
// export function ResetHc ; begin
62526: LD_INT 0
62528: PPUSH
// InitHc ;
62529: CALL_OW 19
// hc_importance := 0 ;
62533: LD_ADDR_OWVAR 32
62537: PUSH
62538: LD_INT 0
62540: ST_TO_ADDR
// end ;
62541: LD_VAR 0 1
62545: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62546: LD_INT 0
62548: PPUSH
62549: PPUSH
62550: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62551: LD_ADDR_VAR 0 6
62555: PUSH
62556: LD_VAR 0 1
62560: PUSH
62561: LD_VAR 0 3
62565: PLUS
62566: PUSH
62567: LD_INT 2
62569: DIV
62570: ST_TO_ADDR
// if _x < 0 then
62571: LD_VAR 0 6
62575: PUSH
62576: LD_INT 0
62578: LESS
62579: IFFALSE 62596
// _x := _x * - 1 ;
62581: LD_ADDR_VAR 0 6
62585: PUSH
62586: LD_VAR 0 6
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: MUL
62595: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62596: LD_ADDR_VAR 0 7
62600: PUSH
62601: LD_VAR 0 2
62605: PUSH
62606: LD_VAR 0 4
62610: PLUS
62611: PUSH
62612: LD_INT 2
62614: DIV
62615: ST_TO_ADDR
// if _y < 0 then
62616: LD_VAR 0 7
62620: PUSH
62621: LD_INT 0
62623: LESS
62624: IFFALSE 62641
// _y := _y * - 1 ;
62626: LD_ADDR_VAR 0 7
62630: PUSH
62631: LD_VAR 0 7
62635: PUSH
62636: LD_INT 1
62638: NEG
62639: MUL
62640: ST_TO_ADDR
// result := [ _x , _y ] ;
62641: LD_ADDR_VAR 0 5
62645: PUSH
62646: LD_VAR 0 6
62650: PUSH
62651: LD_VAR 0 7
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: ST_TO_ADDR
// end ;
62660: LD_VAR 0 5
62664: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62665: LD_INT 0
62667: PPUSH
62668: PPUSH
62669: PPUSH
62670: PPUSH
// task := GetTaskList ( unit ) ;
62671: LD_ADDR_VAR 0 7
62675: PUSH
62676: LD_VAR 0 1
62680: PPUSH
62681: CALL_OW 437
62685: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62686: LD_VAR 0 7
62690: NOT
62691: PUSH
62692: LD_VAR 0 1
62696: PPUSH
62697: LD_VAR 0 2
62701: PPUSH
62702: CALL_OW 308
62706: NOT
62707: AND
62708: IFFALSE 62712
// exit ;
62710: GO 62830
// if IsInArea ( unit , area ) then
62712: LD_VAR 0 1
62716: PPUSH
62717: LD_VAR 0 2
62721: PPUSH
62722: CALL_OW 308
62726: IFFALSE 62744
// begin ComMoveToArea ( unit , goAway ) ;
62728: LD_VAR 0 1
62732: PPUSH
62733: LD_VAR 0 3
62737: PPUSH
62738: CALL_OW 113
// exit ;
62742: GO 62830
// end ; if task [ 1 ] [ 1 ] <> M then
62744: LD_VAR 0 7
62748: PUSH
62749: LD_INT 1
62751: ARRAY
62752: PUSH
62753: LD_INT 1
62755: ARRAY
62756: PUSH
62757: LD_STRING M
62759: NONEQUAL
62760: IFFALSE 62764
// exit ;
62762: GO 62830
// x := task [ 1 ] [ 2 ] ;
62764: LD_ADDR_VAR 0 5
62768: PUSH
62769: LD_VAR 0 7
62773: PUSH
62774: LD_INT 1
62776: ARRAY
62777: PUSH
62778: LD_INT 2
62780: ARRAY
62781: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62782: LD_ADDR_VAR 0 6
62786: PUSH
62787: LD_VAR 0 7
62791: PUSH
62792: LD_INT 1
62794: ARRAY
62795: PUSH
62796: LD_INT 3
62798: ARRAY
62799: ST_TO_ADDR
// if InArea ( x , y , area ) then
62800: LD_VAR 0 5
62804: PPUSH
62805: LD_VAR 0 6
62809: PPUSH
62810: LD_VAR 0 2
62814: PPUSH
62815: CALL_OW 309
62819: IFFALSE 62830
// ComStop ( unit ) ;
62821: LD_VAR 0 1
62825: PPUSH
62826: CALL_OW 141
// end ;
62830: LD_VAR 0 4
62834: RET
// export function Abs ( value ) ; begin
62835: LD_INT 0
62837: PPUSH
// result := value ;
62838: LD_ADDR_VAR 0 2
62842: PUSH
62843: LD_VAR 0 1
62847: ST_TO_ADDR
// if value < 0 then
62848: LD_VAR 0 1
62852: PUSH
62853: LD_INT 0
62855: LESS
62856: IFFALSE 62873
// result := value * - 1 ;
62858: LD_ADDR_VAR 0 2
62862: PUSH
62863: LD_VAR 0 1
62867: PUSH
62868: LD_INT 1
62870: NEG
62871: MUL
62872: ST_TO_ADDR
// end ;
62873: LD_VAR 0 2
62877: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62878: LD_INT 0
62880: PPUSH
62881: PPUSH
62882: PPUSH
62883: PPUSH
62884: PPUSH
62885: PPUSH
62886: PPUSH
62887: PPUSH
// if not unit or not building then
62888: LD_VAR 0 1
62892: NOT
62893: PUSH
62894: LD_VAR 0 2
62898: NOT
62899: OR
62900: IFFALSE 62904
// exit ;
62902: GO 63130
// x := GetX ( building ) ;
62904: LD_ADDR_VAR 0 4
62908: PUSH
62909: LD_VAR 0 2
62913: PPUSH
62914: CALL_OW 250
62918: ST_TO_ADDR
// y := GetY ( building ) ;
62919: LD_ADDR_VAR 0 6
62923: PUSH
62924: LD_VAR 0 2
62928: PPUSH
62929: CALL_OW 251
62933: ST_TO_ADDR
// d := GetDir ( building ) ;
62934: LD_ADDR_VAR 0 8
62938: PUSH
62939: LD_VAR 0 2
62943: PPUSH
62944: CALL_OW 254
62948: ST_TO_ADDR
// r := 4 ;
62949: LD_ADDR_VAR 0 9
62953: PUSH
62954: LD_INT 4
62956: ST_TO_ADDR
// for i := 1 to 5 do
62957: LD_ADDR_VAR 0 10
62961: PUSH
62962: DOUBLE
62963: LD_INT 1
62965: DEC
62966: ST_TO_ADDR
62967: LD_INT 5
62969: PUSH
62970: FOR_TO
62971: IFFALSE 63128
// begin _x := ShiftX ( x , d , r + i ) ;
62973: LD_ADDR_VAR 0 5
62977: PUSH
62978: LD_VAR 0 4
62982: PPUSH
62983: LD_VAR 0 8
62987: PPUSH
62988: LD_VAR 0 9
62992: PUSH
62993: LD_VAR 0 10
62997: PLUS
62998: PPUSH
62999: CALL_OW 272
63003: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63004: LD_ADDR_VAR 0 7
63008: PUSH
63009: LD_VAR 0 6
63013: PPUSH
63014: LD_VAR 0 8
63018: PPUSH
63019: LD_VAR 0 9
63023: PUSH
63024: LD_VAR 0 10
63028: PLUS
63029: PPUSH
63030: CALL_OW 273
63034: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63035: LD_VAR 0 5
63039: PPUSH
63040: LD_VAR 0 7
63044: PPUSH
63045: CALL_OW 488
63049: PUSH
63050: LD_VAR 0 5
63054: PPUSH
63055: LD_VAR 0 7
63059: PPUSH
63060: CALL_OW 428
63064: PPUSH
63065: CALL_OW 247
63069: PUSH
63070: LD_INT 3
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: IN
63080: NOT
63081: AND
63082: IFFALSE 63126
// begin ComMoveXY ( unit , _x , _y ) ;
63084: LD_VAR 0 1
63088: PPUSH
63089: LD_VAR 0 5
63093: PPUSH
63094: LD_VAR 0 7
63098: PPUSH
63099: CALL_OW 111
// result := [ _x , _y ] ;
63103: LD_ADDR_VAR 0 3
63107: PUSH
63108: LD_VAR 0 5
63112: PUSH
63113: LD_VAR 0 7
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: ST_TO_ADDR
// exit ;
63122: POP
63123: POP
63124: GO 63130
// end ; end ;
63126: GO 62970
63128: POP
63129: POP
// end ;
63130: LD_VAR 0 3
63134: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63135: LD_INT 0
63137: PPUSH
63138: PPUSH
63139: PPUSH
// result := 0 ;
63140: LD_ADDR_VAR 0 3
63144: PUSH
63145: LD_INT 0
63147: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63148: LD_VAR 0 1
63152: PUSH
63153: LD_INT 0
63155: LESS
63156: PUSH
63157: LD_VAR 0 1
63161: PUSH
63162: LD_INT 8
63164: GREATER
63165: OR
63166: PUSH
63167: LD_VAR 0 2
63171: PUSH
63172: LD_INT 0
63174: LESS
63175: OR
63176: PUSH
63177: LD_VAR 0 2
63181: PUSH
63182: LD_INT 8
63184: GREATER
63185: OR
63186: IFFALSE 63190
// exit ;
63188: GO 63265
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63190: LD_ADDR_VAR 0 4
63194: PUSH
63195: LD_INT 22
63197: PUSH
63198: LD_VAR 0 2
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PPUSH
63207: CALL_OW 69
63211: PUSH
63212: FOR_IN
63213: IFFALSE 63263
// begin un := UnitShoot ( i ) ;
63215: LD_ADDR_VAR 0 5
63219: PUSH
63220: LD_VAR 0 4
63224: PPUSH
63225: CALL_OW 504
63229: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63230: LD_VAR 0 5
63234: PPUSH
63235: CALL_OW 255
63239: PUSH
63240: LD_VAR 0 1
63244: EQUAL
63245: IFFALSE 63261
// begin result := un ;
63247: LD_ADDR_VAR 0 3
63251: PUSH
63252: LD_VAR 0 5
63256: ST_TO_ADDR
// exit ;
63257: POP
63258: POP
63259: GO 63265
// end ; end ;
63261: GO 63212
63263: POP
63264: POP
// end ;
63265: LD_VAR 0 3
63269: RET
// export function GetCargoBay ( units ) ; begin
63270: LD_INT 0
63272: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63273: LD_ADDR_VAR 0 2
63277: PUSH
63278: LD_VAR 0 1
63282: PPUSH
63283: LD_INT 2
63285: PUSH
63286: LD_INT 34
63288: PUSH
63289: LD_INT 12
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 34
63298: PUSH
63299: LD_INT 51
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 34
63308: PUSH
63309: LD_INT 32
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 34
63318: PUSH
63319: LD_EXP 60
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: PPUSH
63335: CALL_OW 72
63339: ST_TO_ADDR
// end ;
63340: LD_VAR 0 2
63344: RET
// export function Negate ( value ) ; begin
63345: LD_INT 0
63347: PPUSH
// result := not value ;
63348: LD_ADDR_VAR 0 2
63352: PUSH
63353: LD_VAR 0 1
63357: NOT
63358: ST_TO_ADDR
// end ;
63359: LD_VAR 0 2
63363: RET
// export function Inc ( value ) ; begin
63364: LD_INT 0
63366: PPUSH
// result := value + 1 ;
63367: LD_ADDR_VAR 0 2
63371: PUSH
63372: LD_VAR 0 1
63376: PUSH
63377: LD_INT 1
63379: PLUS
63380: ST_TO_ADDR
// end ;
63381: LD_VAR 0 2
63385: RET
// export function Dec ( value ) ; begin
63386: LD_INT 0
63388: PPUSH
// result := value - 1 ;
63389: LD_ADDR_VAR 0 2
63393: PUSH
63394: LD_VAR 0 1
63398: PUSH
63399: LD_INT 1
63401: MINUS
63402: ST_TO_ADDR
// end ;
63403: LD_VAR 0 2
63407: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63408: LD_INT 0
63410: PPUSH
63411: PPUSH
63412: PPUSH
63413: PPUSH
63414: PPUSH
63415: PPUSH
63416: PPUSH
63417: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63418: LD_VAR 0 1
63422: PPUSH
63423: LD_VAR 0 2
63427: PPUSH
63428: CALL_OW 488
63432: NOT
63433: PUSH
63434: LD_VAR 0 3
63438: PPUSH
63439: LD_VAR 0 4
63443: PPUSH
63444: CALL_OW 488
63448: NOT
63449: OR
63450: IFFALSE 63463
// begin result := - 1 ;
63452: LD_ADDR_VAR 0 5
63456: PUSH
63457: LD_INT 1
63459: NEG
63460: ST_TO_ADDR
// exit ;
63461: GO 63698
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63463: LD_ADDR_VAR 0 12
63467: PUSH
63468: LD_VAR 0 1
63472: PPUSH
63473: LD_VAR 0 2
63477: PPUSH
63478: LD_VAR 0 3
63482: PPUSH
63483: LD_VAR 0 4
63487: PPUSH
63488: CALL 62546 0 4
63492: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63493: LD_ADDR_VAR 0 11
63497: PUSH
63498: LD_VAR 0 1
63502: PPUSH
63503: LD_VAR 0 2
63507: PPUSH
63508: LD_VAR 0 12
63512: PUSH
63513: LD_INT 1
63515: ARRAY
63516: PPUSH
63517: LD_VAR 0 12
63521: PUSH
63522: LD_INT 2
63524: ARRAY
63525: PPUSH
63526: CALL_OW 298
63530: ST_TO_ADDR
// distance := 9999 ;
63531: LD_ADDR_VAR 0 10
63535: PUSH
63536: LD_INT 9999
63538: ST_TO_ADDR
// for i := 0 to 5 do
63539: LD_ADDR_VAR 0 6
63543: PUSH
63544: DOUBLE
63545: LD_INT 0
63547: DEC
63548: ST_TO_ADDR
63549: LD_INT 5
63551: PUSH
63552: FOR_TO
63553: IFFALSE 63696
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63555: LD_ADDR_VAR 0 7
63559: PUSH
63560: LD_VAR 0 1
63564: PPUSH
63565: LD_VAR 0 6
63569: PPUSH
63570: LD_VAR 0 11
63574: PPUSH
63575: CALL_OW 272
63579: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63580: LD_ADDR_VAR 0 8
63584: PUSH
63585: LD_VAR 0 2
63589: PPUSH
63590: LD_VAR 0 6
63594: PPUSH
63595: LD_VAR 0 11
63599: PPUSH
63600: CALL_OW 273
63604: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63605: LD_VAR 0 7
63609: PPUSH
63610: LD_VAR 0 8
63614: PPUSH
63615: CALL_OW 488
63619: NOT
63620: IFFALSE 63624
// continue ;
63622: GO 63552
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63624: LD_ADDR_VAR 0 9
63628: PUSH
63629: LD_VAR 0 12
63633: PUSH
63634: LD_INT 1
63636: ARRAY
63637: PPUSH
63638: LD_VAR 0 12
63642: PUSH
63643: LD_INT 2
63645: ARRAY
63646: PPUSH
63647: LD_VAR 0 7
63651: PPUSH
63652: LD_VAR 0 8
63656: PPUSH
63657: CALL_OW 298
63661: ST_TO_ADDR
// if tmp < distance then
63662: LD_VAR 0 9
63666: PUSH
63667: LD_VAR 0 10
63671: LESS
63672: IFFALSE 63694
// begin result := i ;
63674: LD_ADDR_VAR 0 5
63678: PUSH
63679: LD_VAR 0 6
63683: ST_TO_ADDR
// distance := tmp ;
63684: LD_ADDR_VAR 0 10
63688: PUSH
63689: LD_VAR 0 9
63693: ST_TO_ADDR
// end ; end ;
63694: GO 63552
63696: POP
63697: POP
// end ;
63698: LD_VAR 0 5
63702: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63703: LD_INT 0
63705: PPUSH
63706: PPUSH
// if not driver or not IsInUnit ( driver ) then
63707: LD_VAR 0 1
63711: NOT
63712: PUSH
63713: LD_VAR 0 1
63717: PPUSH
63718: CALL_OW 310
63722: NOT
63723: OR
63724: IFFALSE 63728
// exit ;
63726: GO 63818
// vehicle := IsInUnit ( driver ) ;
63728: LD_ADDR_VAR 0 3
63732: PUSH
63733: LD_VAR 0 1
63737: PPUSH
63738: CALL_OW 310
63742: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63743: LD_VAR 0 1
63747: PPUSH
63748: LD_STRING \
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: LD_INT 0
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: LD_INT 0
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: PUSH
63778: LD_STRING E
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: LD_VAR 0 3
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: LD_INT 0
63797: PUSH
63798: LD_INT 0
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PPUSH
63814: CALL_OW 446
// end ;
63818: LD_VAR 0 2
63822: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63823: LD_INT 0
63825: PPUSH
63826: PPUSH
// if not driver or not IsInUnit ( driver ) then
63827: LD_VAR 0 1
63831: NOT
63832: PUSH
63833: LD_VAR 0 1
63837: PPUSH
63838: CALL_OW 310
63842: NOT
63843: OR
63844: IFFALSE 63848
// exit ;
63846: GO 63938
// vehicle := IsInUnit ( driver ) ;
63848: LD_ADDR_VAR 0 3
63852: PUSH
63853: LD_VAR 0 1
63857: PPUSH
63858: CALL_OW 310
63862: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63863: LD_VAR 0 1
63867: PPUSH
63868: LD_STRING \
63870: PUSH
63871: LD_INT 0
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: LD_INT 0
63882: PUSH
63883: LD_INT 0
63885: PUSH
63886: LD_INT 0
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: PUSH
63898: LD_STRING E
63900: PUSH
63901: LD_INT 0
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: LD_VAR 0 3
63911: PUSH
63912: LD_INT 0
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PPUSH
63934: CALL_OW 447
// end ;
63938: LD_VAR 0 2
63942: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63943: LD_INT 0
63945: PPUSH
63946: PPUSH
63947: PPUSH
// tmp := [ ] ;
63948: LD_ADDR_VAR 0 5
63952: PUSH
63953: EMPTY
63954: ST_TO_ADDR
// for i in units do
63955: LD_ADDR_VAR 0 4
63959: PUSH
63960: LD_VAR 0 1
63964: PUSH
63965: FOR_IN
63966: IFFALSE 64004
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63968: LD_ADDR_VAR 0 5
63972: PUSH
63973: LD_VAR 0 5
63977: PPUSH
63978: LD_VAR 0 5
63982: PUSH
63983: LD_INT 1
63985: PLUS
63986: PPUSH
63987: LD_VAR 0 4
63991: PPUSH
63992: CALL_OW 256
63996: PPUSH
63997: CALL_OW 2
64001: ST_TO_ADDR
64002: GO 63965
64004: POP
64005: POP
// if not tmp then
64006: LD_VAR 0 5
64010: NOT
64011: IFFALSE 64015
// exit ;
64013: GO 64063
// if asc then
64015: LD_VAR 0 2
64019: IFFALSE 64043
// result := SortListByListAsc ( units , tmp ) else
64021: LD_ADDR_VAR 0 3
64025: PUSH
64026: LD_VAR 0 1
64030: PPUSH
64031: LD_VAR 0 5
64035: PPUSH
64036: CALL_OW 76
64040: ST_TO_ADDR
64041: GO 64063
// result := SortListByListDesc ( units , tmp ) ;
64043: LD_ADDR_VAR 0 3
64047: PUSH
64048: LD_VAR 0 1
64052: PPUSH
64053: LD_VAR 0 5
64057: PPUSH
64058: CALL_OW 77
64062: ST_TO_ADDR
// end ;
64063: LD_VAR 0 3
64067: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64068: LD_INT 0
64070: PPUSH
64071: PPUSH
// task := GetTaskList ( mech ) ;
64072: LD_ADDR_VAR 0 4
64076: PUSH
64077: LD_VAR 0 1
64081: PPUSH
64082: CALL_OW 437
64086: ST_TO_ADDR
// if not task then
64087: LD_VAR 0 4
64091: NOT
64092: IFFALSE 64096
// exit ;
64094: GO 64138
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64096: LD_ADDR_VAR 0 3
64100: PUSH
64101: LD_VAR 0 4
64105: PUSH
64106: LD_INT 1
64108: ARRAY
64109: PUSH
64110: LD_INT 1
64112: ARRAY
64113: PUSH
64114: LD_STRING r
64116: EQUAL
64117: PUSH
64118: LD_VAR 0 4
64122: PUSH
64123: LD_INT 1
64125: ARRAY
64126: PUSH
64127: LD_INT 4
64129: ARRAY
64130: PUSH
64131: LD_VAR 0 2
64135: EQUAL
64136: AND
64137: ST_TO_ADDR
// end ;
64138: LD_VAR 0 3
64142: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64143: LD_INT 0
64145: PPUSH
// SetDir ( unit , d ) ;
64146: LD_VAR 0 1
64150: PPUSH
64151: LD_VAR 0 4
64155: PPUSH
64156: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64160: LD_VAR 0 1
64164: PPUSH
64165: LD_VAR 0 2
64169: PPUSH
64170: LD_VAR 0 3
64174: PPUSH
64175: LD_VAR 0 5
64179: PPUSH
64180: CALL_OW 48
// end ;
64184: LD_VAR 0 6
64188: RET
// export function ToNaturalNumber ( number ) ; begin
64189: LD_INT 0
64191: PPUSH
// result := number div 1 ;
64192: LD_ADDR_VAR 0 2
64196: PUSH
64197: LD_VAR 0 1
64201: PUSH
64202: LD_INT 1
64204: DIV
64205: ST_TO_ADDR
// if number < 0 then
64206: LD_VAR 0 1
64210: PUSH
64211: LD_INT 0
64213: LESS
64214: IFFALSE 64224
// result := 0 ;
64216: LD_ADDR_VAR 0 2
64220: PUSH
64221: LD_INT 0
64223: ST_TO_ADDR
// end ;
64224: LD_VAR 0 2
64228: RET
// export function SortByClass ( units , class ) ; var un ; begin
64229: LD_INT 0
64231: PPUSH
64232: PPUSH
// if not units or not class then
64233: LD_VAR 0 1
64237: NOT
64238: PUSH
64239: LD_VAR 0 2
64243: NOT
64244: OR
64245: IFFALSE 64249
// exit ;
64247: GO 64344
// result := [ ] ;
64249: LD_ADDR_VAR 0 3
64253: PUSH
64254: EMPTY
64255: ST_TO_ADDR
// for un in units do
64256: LD_ADDR_VAR 0 4
64260: PUSH
64261: LD_VAR 0 1
64265: PUSH
64266: FOR_IN
64267: IFFALSE 64342
// if GetClass ( un ) = class then
64269: LD_VAR 0 4
64273: PPUSH
64274: CALL_OW 257
64278: PUSH
64279: LD_VAR 0 2
64283: EQUAL
64284: IFFALSE 64311
// result := Insert ( result , 1 , un ) else
64286: LD_ADDR_VAR 0 3
64290: PUSH
64291: LD_VAR 0 3
64295: PPUSH
64296: LD_INT 1
64298: PPUSH
64299: LD_VAR 0 4
64303: PPUSH
64304: CALL_OW 2
64308: ST_TO_ADDR
64309: GO 64340
// result := Replace ( result , result + 1 , un ) ;
64311: LD_ADDR_VAR 0 3
64315: PUSH
64316: LD_VAR 0 3
64320: PPUSH
64321: LD_VAR 0 3
64325: PUSH
64326: LD_INT 1
64328: PLUS
64329: PPUSH
64330: LD_VAR 0 4
64334: PPUSH
64335: CALL_OW 1
64339: ST_TO_ADDR
64340: GO 64266
64342: POP
64343: POP
// end ;
64344: LD_VAR 0 3
64348: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64349: LD_INT 0
64351: PPUSH
64352: PPUSH
64353: PPUSH
64354: PPUSH
64355: PPUSH
64356: PPUSH
64357: PPUSH
// result := [ ] ;
64358: LD_ADDR_VAR 0 4
64362: PUSH
64363: EMPTY
64364: ST_TO_ADDR
// if x - r < 0 then
64365: LD_VAR 0 1
64369: PUSH
64370: LD_VAR 0 3
64374: MINUS
64375: PUSH
64376: LD_INT 0
64378: LESS
64379: IFFALSE 64391
// min_x := 0 else
64381: LD_ADDR_VAR 0 8
64385: PUSH
64386: LD_INT 0
64388: ST_TO_ADDR
64389: GO 64407
// min_x := x - r ;
64391: LD_ADDR_VAR 0 8
64395: PUSH
64396: LD_VAR 0 1
64400: PUSH
64401: LD_VAR 0 3
64405: MINUS
64406: ST_TO_ADDR
// if y - r < 0 then
64407: LD_VAR 0 2
64411: PUSH
64412: LD_VAR 0 3
64416: MINUS
64417: PUSH
64418: LD_INT 0
64420: LESS
64421: IFFALSE 64433
// min_y := 0 else
64423: LD_ADDR_VAR 0 7
64427: PUSH
64428: LD_INT 0
64430: ST_TO_ADDR
64431: GO 64449
// min_y := y - r ;
64433: LD_ADDR_VAR 0 7
64437: PUSH
64438: LD_VAR 0 2
64442: PUSH
64443: LD_VAR 0 3
64447: MINUS
64448: ST_TO_ADDR
// max_x := x + r ;
64449: LD_ADDR_VAR 0 9
64453: PUSH
64454: LD_VAR 0 1
64458: PUSH
64459: LD_VAR 0 3
64463: PLUS
64464: ST_TO_ADDR
// max_y := y + r ;
64465: LD_ADDR_VAR 0 10
64469: PUSH
64470: LD_VAR 0 2
64474: PUSH
64475: LD_VAR 0 3
64479: PLUS
64480: ST_TO_ADDR
// for _x = min_x to max_x do
64481: LD_ADDR_VAR 0 5
64485: PUSH
64486: DOUBLE
64487: LD_VAR 0 8
64491: DEC
64492: ST_TO_ADDR
64493: LD_VAR 0 9
64497: PUSH
64498: FOR_TO
64499: IFFALSE 64600
// for _y = min_y to max_y do
64501: LD_ADDR_VAR 0 6
64505: PUSH
64506: DOUBLE
64507: LD_VAR 0 7
64511: DEC
64512: ST_TO_ADDR
64513: LD_VAR 0 10
64517: PUSH
64518: FOR_TO
64519: IFFALSE 64596
// begin if not ValidHex ( _x , _y ) then
64521: LD_VAR 0 5
64525: PPUSH
64526: LD_VAR 0 6
64530: PPUSH
64531: CALL_OW 488
64535: NOT
64536: IFFALSE 64540
// continue ;
64538: GO 64518
// if GetResourceTypeXY ( _x , _y ) then
64540: LD_VAR 0 5
64544: PPUSH
64545: LD_VAR 0 6
64549: PPUSH
64550: CALL_OW 283
64554: IFFALSE 64594
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64556: LD_ADDR_VAR 0 4
64560: PUSH
64561: LD_VAR 0 4
64565: PPUSH
64566: LD_VAR 0 4
64570: PUSH
64571: LD_INT 1
64573: PLUS
64574: PPUSH
64575: LD_VAR 0 5
64579: PUSH
64580: LD_VAR 0 6
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PPUSH
64589: CALL_OW 1
64593: ST_TO_ADDR
// end ;
64594: GO 64518
64596: POP
64597: POP
64598: GO 64498
64600: POP
64601: POP
// end ;
64602: LD_VAR 0 4
64606: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64607: LD_INT 0
64609: PPUSH
64610: PPUSH
64611: PPUSH
64612: PPUSH
64613: PPUSH
64614: PPUSH
64615: PPUSH
64616: PPUSH
// if not units then
64617: LD_VAR 0 1
64621: NOT
64622: IFFALSE 64626
// exit ;
64624: GO 65051
// result := UnitFilter ( units , [ f_ok ] ) ;
64626: LD_ADDR_VAR 0 3
64630: PUSH
64631: LD_VAR 0 1
64635: PPUSH
64636: LD_INT 50
64638: PUSH
64639: EMPTY
64640: LIST
64641: PPUSH
64642: CALL_OW 72
64646: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64647: LD_ADDR_VAR 0 8
64651: PUSH
64652: LD_VAR 0 1
64656: PUSH
64657: LD_INT 1
64659: ARRAY
64660: PPUSH
64661: CALL_OW 255
64665: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
64666: LD_ADDR_VAR 0 10
64670: PUSH
64671: LD_INT 29
64673: PUSH
64674: LD_EXP 63
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: ST_TO_ADDR
// if not result then
64683: LD_VAR 0 3
64687: NOT
64688: IFFALSE 64692
// exit ;
64690: GO 65051
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64692: LD_ADDR_VAR 0 5
64696: PUSH
64697: LD_INT 81
64699: PUSH
64700: LD_VAR 0 8
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PPUSH
64709: CALL_OW 69
64713: ST_TO_ADDR
// for i in result do
64714: LD_ADDR_VAR 0 4
64718: PUSH
64719: LD_VAR 0 3
64723: PUSH
64724: FOR_IN
64725: IFFALSE 65049
// begin tag := GetTag ( i ) + 1 ;
64727: LD_ADDR_VAR 0 9
64731: PUSH
64732: LD_VAR 0 4
64736: PPUSH
64737: CALL_OW 110
64741: PUSH
64742: LD_INT 1
64744: PLUS
64745: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64746: LD_ADDR_VAR 0 7
64750: PUSH
64751: LD_VAR 0 4
64755: PPUSH
64756: CALL_OW 250
64760: PPUSH
64761: LD_VAR 0 4
64765: PPUSH
64766: CALL_OW 251
64770: PPUSH
64771: LD_INT 6
64773: PPUSH
64774: CALL 64349 0 3
64778: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64779: LD_VAR 0 7
64783: PUSH
64784: LD_VAR 0 4
64788: PPUSH
64789: CALL_OW 264
64793: PUSH
64794: LD_VAR 0 10
64798: IN
64799: NOT
64800: AND
64801: IFFALSE 64840
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64803: LD_VAR 0 4
64807: PPUSH
64808: LD_VAR 0 7
64812: PUSH
64813: LD_INT 1
64815: ARRAY
64816: PUSH
64817: LD_INT 1
64819: ARRAY
64820: PPUSH
64821: LD_VAR 0 7
64825: PUSH
64826: LD_INT 1
64828: ARRAY
64829: PUSH
64830: LD_INT 2
64832: ARRAY
64833: PPUSH
64834: CALL_OW 116
64838: GO 65047
// if path > tag then
64840: LD_VAR 0 2
64844: PUSH
64845: LD_VAR 0 9
64849: GREATER
64850: IFFALSE 65017
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
64852: LD_ADDR_VAR 0 6
64856: PUSH
64857: LD_VAR 0 5
64861: PPUSH
64862: LD_INT 91
64864: PUSH
64865: LD_VAR 0 4
64869: PUSH
64870: LD_INT 12
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: LIST
64877: PPUSH
64878: CALL_OW 72
64882: ST_TO_ADDR
// if nearEnemy then
64883: LD_VAR 0 6
64887: IFFALSE 64915
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64889: LD_VAR 0 4
64893: PPUSH
64894: LD_VAR 0 6
64898: PPUSH
64899: LD_VAR 0 4
64903: PPUSH
64904: CALL_OW 74
64908: PPUSH
64909: CALL_OW 115
64913: GO 65015
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64915: LD_VAR 0 4
64919: PPUSH
64920: LD_VAR 0 2
64924: PUSH
64925: LD_VAR 0 9
64929: ARRAY
64930: PUSH
64931: LD_INT 1
64933: ARRAY
64934: PPUSH
64935: LD_VAR 0 2
64939: PUSH
64940: LD_VAR 0 9
64944: ARRAY
64945: PUSH
64946: LD_INT 2
64948: ARRAY
64949: PPUSH
64950: CALL_OW 297
64954: PUSH
64955: LD_INT 6
64957: GREATER
64958: IFFALSE 65001
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64960: LD_VAR 0 4
64964: PPUSH
64965: LD_VAR 0 2
64969: PUSH
64970: LD_VAR 0 9
64974: ARRAY
64975: PUSH
64976: LD_INT 1
64978: ARRAY
64979: PPUSH
64980: LD_VAR 0 2
64984: PUSH
64985: LD_VAR 0 9
64989: ARRAY
64990: PUSH
64991: LD_INT 2
64993: ARRAY
64994: PPUSH
64995: CALL_OW 114
64999: GO 65015
// SetTag ( i , tag ) ;
65001: LD_VAR 0 4
65005: PPUSH
65006: LD_VAR 0 9
65010: PPUSH
65011: CALL_OW 109
// end else
65015: GO 65047
// if enemy then
65017: LD_VAR 0 5
65021: IFFALSE 65047
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65023: LD_VAR 0 4
65027: PPUSH
65028: LD_VAR 0 5
65032: PPUSH
65033: LD_VAR 0 4
65037: PPUSH
65038: CALL_OW 74
65042: PPUSH
65043: CALL_OW 115
// end ;
65047: GO 64724
65049: POP
65050: POP
// end ;
65051: LD_VAR 0 3
65055: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65056: LD_INT 0
65058: PPUSH
65059: PPUSH
65060: PPUSH
// if not unit or IsInUnit ( unit ) then
65061: LD_VAR 0 1
65065: NOT
65066: PUSH
65067: LD_VAR 0 1
65071: PPUSH
65072: CALL_OW 310
65076: OR
65077: IFFALSE 65081
// exit ;
65079: GO 65172
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65081: LD_ADDR_VAR 0 4
65085: PUSH
65086: LD_VAR 0 1
65090: PPUSH
65091: CALL_OW 250
65095: PPUSH
65096: LD_VAR 0 2
65100: PPUSH
65101: LD_INT 1
65103: PPUSH
65104: CALL_OW 272
65108: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65109: LD_ADDR_VAR 0 5
65113: PUSH
65114: LD_VAR 0 1
65118: PPUSH
65119: CALL_OW 251
65123: PPUSH
65124: LD_VAR 0 2
65128: PPUSH
65129: LD_INT 1
65131: PPUSH
65132: CALL_OW 273
65136: ST_TO_ADDR
// if ValidHex ( x , y ) then
65137: LD_VAR 0 4
65141: PPUSH
65142: LD_VAR 0 5
65146: PPUSH
65147: CALL_OW 488
65151: IFFALSE 65172
// ComTurnXY ( unit , x , y ) ;
65153: LD_VAR 0 1
65157: PPUSH
65158: LD_VAR 0 4
65162: PPUSH
65163: LD_VAR 0 5
65167: PPUSH
65168: CALL_OW 118
// end ;
65172: LD_VAR 0 3
65176: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65177: LD_INT 0
65179: PPUSH
65180: PPUSH
// result := false ;
65181: LD_ADDR_VAR 0 3
65185: PUSH
65186: LD_INT 0
65188: ST_TO_ADDR
// if not units then
65189: LD_VAR 0 2
65193: NOT
65194: IFFALSE 65198
// exit ;
65196: GO 65243
// for i in units do
65198: LD_ADDR_VAR 0 4
65202: PUSH
65203: LD_VAR 0 2
65207: PUSH
65208: FOR_IN
65209: IFFALSE 65241
// if See ( side , i ) then
65211: LD_VAR 0 1
65215: PPUSH
65216: LD_VAR 0 4
65220: PPUSH
65221: CALL_OW 292
65225: IFFALSE 65239
// begin result := true ;
65227: LD_ADDR_VAR 0 3
65231: PUSH
65232: LD_INT 1
65234: ST_TO_ADDR
// exit ;
65235: POP
65236: POP
65237: GO 65243
// end ;
65239: GO 65208
65241: POP
65242: POP
// end ;
65243: LD_VAR 0 3
65247: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65248: LD_INT 0
65250: PPUSH
65251: PPUSH
65252: PPUSH
65253: PPUSH
// if not unit or not points then
65254: LD_VAR 0 1
65258: NOT
65259: PUSH
65260: LD_VAR 0 2
65264: NOT
65265: OR
65266: IFFALSE 65270
// exit ;
65268: GO 65360
// dist := 99999 ;
65270: LD_ADDR_VAR 0 5
65274: PUSH
65275: LD_INT 99999
65277: ST_TO_ADDR
// for i in points do
65278: LD_ADDR_VAR 0 4
65282: PUSH
65283: LD_VAR 0 2
65287: PUSH
65288: FOR_IN
65289: IFFALSE 65358
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65291: LD_ADDR_VAR 0 6
65295: PUSH
65296: LD_VAR 0 1
65300: PPUSH
65301: LD_VAR 0 4
65305: PUSH
65306: LD_INT 1
65308: ARRAY
65309: PPUSH
65310: LD_VAR 0 4
65314: PUSH
65315: LD_INT 2
65317: ARRAY
65318: PPUSH
65319: CALL_OW 297
65323: ST_TO_ADDR
// if tmpDist < dist then
65324: LD_VAR 0 6
65328: PUSH
65329: LD_VAR 0 5
65333: LESS
65334: IFFALSE 65356
// begin result := i ;
65336: LD_ADDR_VAR 0 3
65340: PUSH
65341: LD_VAR 0 4
65345: ST_TO_ADDR
// dist := tmpDist ;
65346: LD_ADDR_VAR 0 5
65350: PUSH
65351: LD_VAR 0 6
65355: ST_TO_ADDR
// end ; end ;
65356: GO 65288
65358: POP
65359: POP
// end ; end_of_file
65360: LD_VAR 0 3
65364: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
65365: LD_INT 0
65367: PPUSH
// ar_miner := 81 ;
65368: LD_ADDR_EXP 66
65372: PUSH
65373: LD_INT 81
65375: ST_TO_ADDR
// ar_crane := 88 ;
65376: LD_ADDR_EXP 65
65380: PUSH
65381: LD_INT 88
65383: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
65384: LD_ADDR_EXP 60
65388: PUSH
65389: LD_INT 89
65391: ST_TO_ADDR
// us_hack := 99 ;
65392: LD_ADDR_EXP 61
65396: PUSH
65397: LD_INT 99
65399: ST_TO_ADDR
// us_artillery := 97 ;
65400: LD_ADDR_EXP 62
65404: PUSH
65405: LD_INT 97
65407: ST_TO_ADDR
// ar_bio_bomb := 91 ;
65408: LD_ADDR_EXP 63
65412: PUSH
65413: LD_INT 91
65415: ST_TO_ADDR
// ar_mortar := 92 ;
65416: LD_ADDR_EXP 64
65420: PUSH
65421: LD_INT 92
65423: ST_TO_ADDR
// ru_radar := 98 ;
65424: LD_ADDR_EXP 59
65428: PUSH
65429: LD_INT 98
65431: ST_TO_ADDR
// tech_Artillery := 80 ;
65432: LD_ADDR_EXP 67
65436: PUSH
65437: LD_INT 80
65439: ST_TO_ADDR
// tech_RadMat := 81 ;
65440: LD_ADDR_EXP 68
65444: PUSH
65445: LD_INT 81
65447: ST_TO_ADDR
// tech_BasicTools := 82 ;
65448: LD_ADDR_EXP 69
65452: PUSH
65453: LD_INT 82
65455: ST_TO_ADDR
// tech_Cargo := 83 ;
65456: LD_ADDR_EXP 70
65460: PUSH
65461: LD_INT 83
65463: ST_TO_ADDR
// tech_Track := 84 ;
65464: LD_ADDR_EXP 71
65468: PUSH
65469: LD_INT 84
65471: ST_TO_ADDR
// tech_Crane := 85 ;
65472: LD_ADDR_EXP 72
65476: PUSH
65477: LD_INT 85
65479: ST_TO_ADDR
// tech_Bulldozer := 86 ;
65480: LD_ADDR_EXP 73
65484: PUSH
65485: LD_INT 86
65487: ST_TO_ADDR
// tech_Hovercraft := 87 ;
65488: LD_ADDR_EXP 74
65492: PUSH
65493: LD_INT 87
65495: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
65496: LD_ADDR_EXP 75
65500: PUSH
65501: LD_INT 88
65503: ST_TO_ADDR
// class_mastodont := 31 ;
65504: LD_ADDR_EXP 76
65508: PUSH
65509: LD_INT 31
65511: ST_TO_ADDR
// class_horse := 21 ;
65512: LD_ADDR_EXP 77
65516: PUSH
65517: LD_INT 21
65519: ST_TO_ADDR
// end ;
65520: LD_VAR 0 1
65524: RET
// every 1 do
65525: GO 65527
65527: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
65528: CALL 65365 0 0
65532: END
// every 0 0$1 do
65533: GO 65535
65535: DISABLE
// begin enable ;
65536: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
65537: LD_STRING updateTimer(
65539: PUSH
65540: LD_OWVAR 1
65544: STR
65545: PUSH
65546: LD_STRING );
65548: STR
65549: PPUSH
65550: CALL_OW 559
// end ;
65554: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65555: LD_INT 0
65557: PPUSH
// if p2 = 100 then
65558: LD_VAR 0 2
65562: PUSH
65563: LD_INT 100
65565: EQUAL
65566: IFFALSE 66569
// begin if not StreamModeActive then
65568: LD_EXP 78
65572: NOT
65573: IFFALSE 65583
// StreamModeActive := true ;
65575: LD_ADDR_EXP 78
65579: PUSH
65580: LD_INT 1
65582: ST_TO_ADDR
// if p3 = 0 then
65583: LD_VAR 0 3
65587: PUSH
65588: LD_INT 0
65590: EQUAL
65591: IFFALSE 65597
// InitStreamMode ;
65593: CALL 66729 0 0
// if p3 = 1 then
65597: LD_VAR 0 3
65601: PUSH
65602: LD_INT 1
65604: EQUAL
65605: IFFALSE 65615
// sRocket := true ;
65607: LD_ADDR_EXP 83
65611: PUSH
65612: LD_INT 1
65614: ST_TO_ADDR
// if p3 = 2 then
65615: LD_VAR 0 3
65619: PUSH
65620: LD_INT 2
65622: EQUAL
65623: IFFALSE 65633
// sSpeed := true ;
65625: LD_ADDR_EXP 82
65629: PUSH
65630: LD_INT 1
65632: ST_TO_ADDR
// if p3 = 3 then
65633: LD_VAR 0 3
65637: PUSH
65638: LD_INT 3
65640: EQUAL
65641: IFFALSE 65651
// sEngine := true ;
65643: LD_ADDR_EXP 84
65647: PUSH
65648: LD_INT 1
65650: ST_TO_ADDR
// if p3 = 4 then
65651: LD_VAR 0 3
65655: PUSH
65656: LD_INT 4
65658: EQUAL
65659: IFFALSE 65669
// sSpec := true ;
65661: LD_ADDR_EXP 81
65665: PUSH
65666: LD_INT 1
65668: ST_TO_ADDR
// if p3 = 5 then
65669: LD_VAR 0 3
65673: PUSH
65674: LD_INT 5
65676: EQUAL
65677: IFFALSE 65687
// sLevel := true ;
65679: LD_ADDR_EXP 85
65683: PUSH
65684: LD_INT 1
65686: ST_TO_ADDR
// if p3 = 6 then
65687: LD_VAR 0 3
65691: PUSH
65692: LD_INT 6
65694: EQUAL
65695: IFFALSE 65705
// sArmoury := true ;
65697: LD_ADDR_EXP 86
65701: PUSH
65702: LD_INT 1
65704: ST_TO_ADDR
// if p3 = 7 then
65705: LD_VAR 0 3
65709: PUSH
65710: LD_INT 7
65712: EQUAL
65713: IFFALSE 65723
// sRadar := true ;
65715: LD_ADDR_EXP 87
65719: PUSH
65720: LD_INT 1
65722: ST_TO_ADDR
// if p3 = 8 then
65723: LD_VAR 0 3
65727: PUSH
65728: LD_INT 8
65730: EQUAL
65731: IFFALSE 65741
// sBunker := true ;
65733: LD_ADDR_EXP 88
65737: PUSH
65738: LD_INT 1
65740: ST_TO_ADDR
// if p3 = 9 then
65741: LD_VAR 0 3
65745: PUSH
65746: LD_INT 9
65748: EQUAL
65749: IFFALSE 65759
// sHack := true ;
65751: LD_ADDR_EXP 89
65755: PUSH
65756: LD_INT 1
65758: ST_TO_ADDR
// if p3 = 10 then
65759: LD_VAR 0 3
65763: PUSH
65764: LD_INT 10
65766: EQUAL
65767: IFFALSE 65777
// sFire := true ;
65769: LD_ADDR_EXP 90
65773: PUSH
65774: LD_INT 1
65776: ST_TO_ADDR
// if p3 = 11 then
65777: LD_VAR 0 3
65781: PUSH
65782: LD_INT 11
65784: EQUAL
65785: IFFALSE 65795
// sRefresh := true ;
65787: LD_ADDR_EXP 91
65791: PUSH
65792: LD_INT 1
65794: ST_TO_ADDR
// if p3 = 12 then
65795: LD_VAR 0 3
65799: PUSH
65800: LD_INT 12
65802: EQUAL
65803: IFFALSE 65813
// sExp := true ;
65805: LD_ADDR_EXP 92
65809: PUSH
65810: LD_INT 1
65812: ST_TO_ADDR
// if p3 = 13 then
65813: LD_VAR 0 3
65817: PUSH
65818: LD_INT 13
65820: EQUAL
65821: IFFALSE 65831
// sDepot := true ;
65823: LD_ADDR_EXP 93
65827: PUSH
65828: LD_INT 1
65830: ST_TO_ADDR
// if p3 = 14 then
65831: LD_VAR 0 3
65835: PUSH
65836: LD_INT 14
65838: EQUAL
65839: IFFALSE 65849
// sFlag := true ;
65841: LD_ADDR_EXP 94
65845: PUSH
65846: LD_INT 1
65848: ST_TO_ADDR
// if p3 = 15 then
65849: LD_VAR 0 3
65853: PUSH
65854: LD_INT 15
65856: EQUAL
65857: IFFALSE 65867
// sKamikadze := true ;
65859: LD_ADDR_EXP 102
65863: PUSH
65864: LD_INT 1
65866: ST_TO_ADDR
// if p3 = 16 then
65867: LD_VAR 0 3
65871: PUSH
65872: LD_INT 16
65874: EQUAL
65875: IFFALSE 65885
// sTroll := true ;
65877: LD_ADDR_EXP 103
65881: PUSH
65882: LD_INT 1
65884: ST_TO_ADDR
// if p3 = 17 then
65885: LD_VAR 0 3
65889: PUSH
65890: LD_INT 17
65892: EQUAL
65893: IFFALSE 65903
// sSlow := true ;
65895: LD_ADDR_EXP 104
65899: PUSH
65900: LD_INT 1
65902: ST_TO_ADDR
// if p3 = 18 then
65903: LD_VAR 0 3
65907: PUSH
65908: LD_INT 18
65910: EQUAL
65911: IFFALSE 65921
// sLack := true ;
65913: LD_ADDR_EXP 105
65917: PUSH
65918: LD_INT 1
65920: ST_TO_ADDR
// if p3 = 19 then
65921: LD_VAR 0 3
65925: PUSH
65926: LD_INT 19
65928: EQUAL
65929: IFFALSE 65939
// sTank := true ;
65931: LD_ADDR_EXP 107
65935: PUSH
65936: LD_INT 1
65938: ST_TO_ADDR
// if p3 = 20 then
65939: LD_VAR 0 3
65943: PUSH
65944: LD_INT 20
65946: EQUAL
65947: IFFALSE 65957
// sRemote := true ;
65949: LD_ADDR_EXP 108
65953: PUSH
65954: LD_INT 1
65956: ST_TO_ADDR
// if p3 = 21 then
65957: LD_VAR 0 3
65961: PUSH
65962: LD_INT 21
65964: EQUAL
65965: IFFALSE 65975
// sPowell := true ;
65967: LD_ADDR_EXP 109
65971: PUSH
65972: LD_INT 1
65974: ST_TO_ADDR
// if p3 = 22 then
65975: LD_VAR 0 3
65979: PUSH
65980: LD_INT 22
65982: EQUAL
65983: IFFALSE 65993
// sTeleport := true ;
65985: LD_ADDR_EXP 112
65989: PUSH
65990: LD_INT 1
65992: ST_TO_ADDR
// if p3 = 23 then
65993: LD_VAR 0 3
65997: PUSH
65998: LD_INT 23
66000: EQUAL
66001: IFFALSE 66011
// sOilTower := true ;
66003: LD_ADDR_EXP 114
66007: PUSH
66008: LD_INT 1
66010: ST_TO_ADDR
// if p3 = 24 then
66011: LD_VAR 0 3
66015: PUSH
66016: LD_INT 24
66018: EQUAL
66019: IFFALSE 66029
// sShovel := true ;
66021: LD_ADDR_EXP 115
66025: PUSH
66026: LD_INT 1
66028: ST_TO_ADDR
// if p3 = 25 then
66029: LD_VAR 0 3
66033: PUSH
66034: LD_INT 25
66036: EQUAL
66037: IFFALSE 66047
// sSheik := true ;
66039: LD_ADDR_EXP 116
66043: PUSH
66044: LD_INT 1
66046: ST_TO_ADDR
// if p3 = 26 then
66047: LD_VAR 0 3
66051: PUSH
66052: LD_INT 26
66054: EQUAL
66055: IFFALSE 66065
// sEarthquake := true ;
66057: LD_ADDR_EXP 118
66061: PUSH
66062: LD_INT 1
66064: ST_TO_ADDR
// if p3 = 27 then
66065: LD_VAR 0 3
66069: PUSH
66070: LD_INT 27
66072: EQUAL
66073: IFFALSE 66083
// sAI := true ;
66075: LD_ADDR_EXP 119
66079: PUSH
66080: LD_INT 1
66082: ST_TO_ADDR
// if p3 = 28 then
66083: LD_VAR 0 3
66087: PUSH
66088: LD_INT 28
66090: EQUAL
66091: IFFALSE 66101
// sCargo := true ;
66093: LD_ADDR_EXP 122
66097: PUSH
66098: LD_INT 1
66100: ST_TO_ADDR
// if p3 = 29 then
66101: LD_VAR 0 3
66105: PUSH
66106: LD_INT 29
66108: EQUAL
66109: IFFALSE 66119
// sDLaser := true ;
66111: LD_ADDR_EXP 123
66115: PUSH
66116: LD_INT 1
66118: ST_TO_ADDR
// if p3 = 30 then
66119: LD_VAR 0 3
66123: PUSH
66124: LD_INT 30
66126: EQUAL
66127: IFFALSE 66137
// sExchange := true ;
66129: LD_ADDR_EXP 124
66133: PUSH
66134: LD_INT 1
66136: ST_TO_ADDR
// if p3 = 31 then
66137: LD_VAR 0 3
66141: PUSH
66142: LD_INT 31
66144: EQUAL
66145: IFFALSE 66155
// sFac := true ;
66147: LD_ADDR_EXP 125
66151: PUSH
66152: LD_INT 1
66154: ST_TO_ADDR
// if p3 = 32 then
66155: LD_VAR 0 3
66159: PUSH
66160: LD_INT 32
66162: EQUAL
66163: IFFALSE 66173
// sPower := true ;
66165: LD_ADDR_EXP 126
66169: PUSH
66170: LD_INT 1
66172: ST_TO_ADDR
// if p3 = 33 then
66173: LD_VAR 0 3
66177: PUSH
66178: LD_INT 33
66180: EQUAL
66181: IFFALSE 66191
// sRandom := true ;
66183: LD_ADDR_EXP 127
66187: PUSH
66188: LD_INT 1
66190: ST_TO_ADDR
// if p3 = 34 then
66191: LD_VAR 0 3
66195: PUSH
66196: LD_INT 34
66198: EQUAL
66199: IFFALSE 66209
// sShield := true ;
66201: LD_ADDR_EXP 128
66205: PUSH
66206: LD_INT 1
66208: ST_TO_ADDR
// if p3 = 35 then
66209: LD_VAR 0 3
66213: PUSH
66214: LD_INT 35
66216: EQUAL
66217: IFFALSE 66227
// sTime := true ;
66219: LD_ADDR_EXP 129
66223: PUSH
66224: LD_INT 1
66226: ST_TO_ADDR
// if p3 = 36 then
66227: LD_VAR 0 3
66231: PUSH
66232: LD_INT 36
66234: EQUAL
66235: IFFALSE 66245
// sTools := true ;
66237: LD_ADDR_EXP 130
66241: PUSH
66242: LD_INT 1
66244: ST_TO_ADDR
// if p3 = 101 then
66245: LD_VAR 0 3
66249: PUSH
66250: LD_INT 101
66252: EQUAL
66253: IFFALSE 66263
// sSold := true ;
66255: LD_ADDR_EXP 95
66259: PUSH
66260: LD_INT 1
66262: ST_TO_ADDR
// if p3 = 102 then
66263: LD_VAR 0 3
66267: PUSH
66268: LD_INT 102
66270: EQUAL
66271: IFFALSE 66281
// sDiff := true ;
66273: LD_ADDR_EXP 96
66277: PUSH
66278: LD_INT 1
66280: ST_TO_ADDR
// if p3 = 103 then
66281: LD_VAR 0 3
66285: PUSH
66286: LD_INT 103
66288: EQUAL
66289: IFFALSE 66299
// sFog := true ;
66291: LD_ADDR_EXP 99
66295: PUSH
66296: LD_INT 1
66298: ST_TO_ADDR
// if p3 = 104 then
66299: LD_VAR 0 3
66303: PUSH
66304: LD_INT 104
66306: EQUAL
66307: IFFALSE 66317
// sReset := true ;
66309: LD_ADDR_EXP 100
66313: PUSH
66314: LD_INT 1
66316: ST_TO_ADDR
// if p3 = 105 then
66317: LD_VAR 0 3
66321: PUSH
66322: LD_INT 105
66324: EQUAL
66325: IFFALSE 66335
// sSun := true ;
66327: LD_ADDR_EXP 101
66331: PUSH
66332: LD_INT 1
66334: ST_TO_ADDR
// if p3 = 106 then
66335: LD_VAR 0 3
66339: PUSH
66340: LD_INT 106
66342: EQUAL
66343: IFFALSE 66353
// sTiger := true ;
66345: LD_ADDR_EXP 97
66349: PUSH
66350: LD_INT 1
66352: ST_TO_ADDR
// if p3 = 107 then
66353: LD_VAR 0 3
66357: PUSH
66358: LD_INT 107
66360: EQUAL
66361: IFFALSE 66371
// sBomb := true ;
66363: LD_ADDR_EXP 98
66367: PUSH
66368: LD_INT 1
66370: ST_TO_ADDR
// if p3 = 108 then
66371: LD_VAR 0 3
66375: PUSH
66376: LD_INT 108
66378: EQUAL
66379: IFFALSE 66389
// sWound := true ;
66381: LD_ADDR_EXP 106
66385: PUSH
66386: LD_INT 1
66388: ST_TO_ADDR
// if p3 = 109 then
66389: LD_VAR 0 3
66393: PUSH
66394: LD_INT 109
66396: EQUAL
66397: IFFALSE 66407
// sBetray := true ;
66399: LD_ADDR_EXP 110
66403: PUSH
66404: LD_INT 1
66406: ST_TO_ADDR
// if p3 = 110 then
66407: LD_VAR 0 3
66411: PUSH
66412: LD_INT 110
66414: EQUAL
66415: IFFALSE 66425
// sContamin := true ;
66417: LD_ADDR_EXP 111
66421: PUSH
66422: LD_INT 1
66424: ST_TO_ADDR
// if p3 = 111 then
66425: LD_VAR 0 3
66429: PUSH
66430: LD_INT 111
66432: EQUAL
66433: IFFALSE 66443
// sOil := true ;
66435: LD_ADDR_EXP 113
66439: PUSH
66440: LD_INT 1
66442: ST_TO_ADDR
// if p3 = 112 then
66443: LD_VAR 0 3
66447: PUSH
66448: LD_INT 112
66450: EQUAL
66451: IFFALSE 66461
// sStu := true ;
66453: LD_ADDR_EXP 117
66457: PUSH
66458: LD_INT 1
66460: ST_TO_ADDR
// if p3 = 113 then
66461: LD_VAR 0 3
66465: PUSH
66466: LD_INT 113
66468: EQUAL
66469: IFFALSE 66479
// sBazooka := true ;
66471: LD_ADDR_EXP 120
66475: PUSH
66476: LD_INT 1
66478: ST_TO_ADDR
// if p3 = 114 then
66479: LD_VAR 0 3
66483: PUSH
66484: LD_INT 114
66486: EQUAL
66487: IFFALSE 66497
// sMortar := true ;
66489: LD_ADDR_EXP 121
66493: PUSH
66494: LD_INT 1
66496: ST_TO_ADDR
// if p3 = 115 then
66497: LD_VAR 0 3
66501: PUSH
66502: LD_INT 115
66504: EQUAL
66505: IFFALSE 66515
// sRanger := true ;
66507: LD_ADDR_EXP 131
66511: PUSH
66512: LD_INT 1
66514: ST_TO_ADDR
// if p3 = 116 then
66515: LD_VAR 0 3
66519: PUSH
66520: LD_INT 116
66522: EQUAL
66523: IFFALSE 66533
// sComputer := true ;
66525: LD_ADDR_EXP 132
66529: PUSH
66530: LD_INT 1
66532: ST_TO_ADDR
// if p3 = 117 then
66533: LD_VAR 0 3
66537: PUSH
66538: LD_INT 117
66540: EQUAL
66541: IFFALSE 66551
// s30 := true ;
66543: LD_ADDR_EXP 133
66547: PUSH
66548: LD_INT 1
66550: ST_TO_ADDR
// if p3 = 118 then
66551: LD_VAR 0 3
66555: PUSH
66556: LD_INT 118
66558: EQUAL
66559: IFFALSE 66569
// s60 := true ;
66561: LD_ADDR_EXP 134
66565: PUSH
66566: LD_INT 1
66568: ST_TO_ADDR
// end ; if p2 = 101 then
66569: LD_VAR 0 2
66573: PUSH
66574: LD_INT 101
66576: EQUAL
66577: IFFALSE 66705
// begin case p3 of 1 :
66579: LD_VAR 0 3
66583: PUSH
66584: LD_INT 1
66586: DOUBLE
66587: EQUAL
66588: IFTRUE 66592
66590: GO 66599
66592: POP
// hHackUnlimitedResources ; 2 :
66593: CALL 78301 0 0
66597: GO 66705
66599: LD_INT 2
66601: DOUBLE
66602: EQUAL
66603: IFTRUE 66607
66605: GO 66614
66607: POP
// hHackSetLevel10 ; 3 :
66608: CALL 78434 0 0
66612: GO 66705
66614: LD_INT 3
66616: DOUBLE
66617: EQUAL
66618: IFTRUE 66622
66620: GO 66629
66622: POP
// hHackSetLevel10YourUnits ; 4 :
66623: CALL 78519 0 0
66627: GO 66705
66629: LD_INT 4
66631: DOUBLE
66632: EQUAL
66633: IFTRUE 66637
66635: GO 66644
66637: POP
// hHackInvincible ; 5 :
66638: CALL 78967 0 0
66642: GO 66705
66644: LD_INT 5
66646: DOUBLE
66647: EQUAL
66648: IFTRUE 66652
66650: GO 66659
66652: POP
// hHackInvisible ; 6 :
66653: CALL 79078 0 0
66657: GO 66705
66659: LD_INT 6
66661: DOUBLE
66662: EQUAL
66663: IFTRUE 66667
66665: GO 66674
66667: POP
// hHackChangeYourSide ; 7 :
66668: CALL 79135 0 0
66672: GO 66705
66674: LD_INT 7
66676: DOUBLE
66677: EQUAL
66678: IFTRUE 66682
66680: GO 66689
66682: POP
// hHackChangeUnitSide ; 8 :
66683: CALL 79177 0 0
66687: GO 66705
66689: LD_INT 8
66691: DOUBLE
66692: EQUAL
66693: IFTRUE 66697
66695: GO 66704
66697: POP
// hHackFog ; end ;
66698: CALL 79278 0 0
66702: GO 66705
66704: POP
// end ; end ;
66705: LD_VAR 0 7
66709: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
66710: GO 66712
66712: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
66713: LD_STRING initStreamRollete();
66715: PPUSH
66716: CALL_OW 559
// InitStreamMode ;
66720: CALL 66729 0 0
// DefineStreamItems ( ) ;
66724: CALL 67193 0 0
// end ;
66728: END
// function InitStreamMode ; begin
66729: LD_INT 0
66731: PPUSH
// streamModeActive := false ;
66732: LD_ADDR_EXP 78
66736: PUSH
66737: LD_INT 0
66739: ST_TO_ADDR
// normalCounter := 36 ;
66740: LD_ADDR_EXP 79
66744: PUSH
66745: LD_INT 36
66747: ST_TO_ADDR
// hardcoreCounter := 16 ;
66748: LD_ADDR_EXP 80
66752: PUSH
66753: LD_INT 16
66755: ST_TO_ADDR
// sRocket := false ;
66756: LD_ADDR_EXP 83
66760: PUSH
66761: LD_INT 0
66763: ST_TO_ADDR
// sSpeed := false ;
66764: LD_ADDR_EXP 82
66768: PUSH
66769: LD_INT 0
66771: ST_TO_ADDR
// sEngine := false ;
66772: LD_ADDR_EXP 84
66776: PUSH
66777: LD_INT 0
66779: ST_TO_ADDR
// sSpec := false ;
66780: LD_ADDR_EXP 81
66784: PUSH
66785: LD_INT 0
66787: ST_TO_ADDR
// sLevel := false ;
66788: LD_ADDR_EXP 85
66792: PUSH
66793: LD_INT 0
66795: ST_TO_ADDR
// sArmoury := false ;
66796: LD_ADDR_EXP 86
66800: PUSH
66801: LD_INT 0
66803: ST_TO_ADDR
// sRadar := false ;
66804: LD_ADDR_EXP 87
66808: PUSH
66809: LD_INT 0
66811: ST_TO_ADDR
// sBunker := false ;
66812: LD_ADDR_EXP 88
66816: PUSH
66817: LD_INT 0
66819: ST_TO_ADDR
// sHack := false ;
66820: LD_ADDR_EXP 89
66824: PUSH
66825: LD_INT 0
66827: ST_TO_ADDR
// sFire := false ;
66828: LD_ADDR_EXP 90
66832: PUSH
66833: LD_INT 0
66835: ST_TO_ADDR
// sRefresh := false ;
66836: LD_ADDR_EXP 91
66840: PUSH
66841: LD_INT 0
66843: ST_TO_ADDR
// sExp := false ;
66844: LD_ADDR_EXP 92
66848: PUSH
66849: LD_INT 0
66851: ST_TO_ADDR
// sDepot := false ;
66852: LD_ADDR_EXP 93
66856: PUSH
66857: LD_INT 0
66859: ST_TO_ADDR
// sFlag := false ;
66860: LD_ADDR_EXP 94
66864: PUSH
66865: LD_INT 0
66867: ST_TO_ADDR
// sKamikadze := false ;
66868: LD_ADDR_EXP 102
66872: PUSH
66873: LD_INT 0
66875: ST_TO_ADDR
// sTroll := false ;
66876: LD_ADDR_EXP 103
66880: PUSH
66881: LD_INT 0
66883: ST_TO_ADDR
// sSlow := false ;
66884: LD_ADDR_EXP 104
66888: PUSH
66889: LD_INT 0
66891: ST_TO_ADDR
// sLack := false ;
66892: LD_ADDR_EXP 105
66896: PUSH
66897: LD_INT 0
66899: ST_TO_ADDR
// sTank := false ;
66900: LD_ADDR_EXP 107
66904: PUSH
66905: LD_INT 0
66907: ST_TO_ADDR
// sRemote := false ;
66908: LD_ADDR_EXP 108
66912: PUSH
66913: LD_INT 0
66915: ST_TO_ADDR
// sPowell := false ;
66916: LD_ADDR_EXP 109
66920: PUSH
66921: LD_INT 0
66923: ST_TO_ADDR
// sTeleport := false ;
66924: LD_ADDR_EXP 112
66928: PUSH
66929: LD_INT 0
66931: ST_TO_ADDR
// sOilTower := false ;
66932: LD_ADDR_EXP 114
66936: PUSH
66937: LD_INT 0
66939: ST_TO_ADDR
// sShovel := false ;
66940: LD_ADDR_EXP 115
66944: PUSH
66945: LD_INT 0
66947: ST_TO_ADDR
// sSheik := false ;
66948: LD_ADDR_EXP 116
66952: PUSH
66953: LD_INT 0
66955: ST_TO_ADDR
// sEarthquake := false ;
66956: LD_ADDR_EXP 118
66960: PUSH
66961: LD_INT 0
66963: ST_TO_ADDR
// sAI := false ;
66964: LD_ADDR_EXP 119
66968: PUSH
66969: LD_INT 0
66971: ST_TO_ADDR
// sCargo := false ;
66972: LD_ADDR_EXP 122
66976: PUSH
66977: LD_INT 0
66979: ST_TO_ADDR
// sDLaser := false ;
66980: LD_ADDR_EXP 123
66984: PUSH
66985: LD_INT 0
66987: ST_TO_ADDR
// sExchange := false ;
66988: LD_ADDR_EXP 124
66992: PUSH
66993: LD_INT 0
66995: ST_TO_ADDR
// sFac := false ;
66996: LD_ADDR_EXP 125
67000: PUSH
67001: LD_INT 0
67003: ST_TO_ADDR
// sPower := false ;
67004: LD_ADDR_EXP 126
67008: PUSH
67009: LD_INT 0
67011: ST_TO_ADDR
// sRandom := false ;
67012: LD_ADDR_EXP 127
67016: PUSH
67017: LD_INT 0
67019: ST_TO_ADDR
// sShield := false ;
67020: LD_ADDR_EXP 128
67024: PUSH
67025: LD_INT 0
67027: ST_TO_ADDR
// sTime := false ;
67028: LD_ADDR_EXP 129
67032: PUSH
67033: LD_INT 0
67035: ST_TO_ADDR
// sTools := false ;
67036: LD_ADDR_EXP 130
67040: PUSH
67041: LD_INT 0
67043: ST_TO_ADDR
// sSold := false ;
67044: LD_ADDR_EXP 95
67048: PUSH
67049: LD_INT 0
67051: ST_TO_ADDR
// sDiff := false ;
67052: LD_ADDR_EXP 96
67056: PUSH
67057: LD_INT 0
67059: ST_TO_ADDR
// sFog := false ;
67060: LD_ADDR_EXP 99
67064: PUSH
67065: LD_INT 0
67067: ST_TO_ADDR
// sReset := false ;
67068: LD_ADDR_EXP 100
67072: PUSH
67073: LD_INT 0
67075: ST_TO_ADDR
// sSun := false ;
67076: LD_ADDR_EXP 101
67080: PUSH
67081: LD_INT 0
67083: ST_TO_ADDR
// sTiger := false ;
67084: LD_ADDR_EXP 97
67088: PUSH
67089: LD_INT 0
67091: ST_TO_ADDR
// sBomb := false ;
67092: LD_ADDR_EXP 98
67096: PUSH
67097: LD_INT 0
67099: ST_TO_ADDR
// sWound := false ;
67100: LD_ADDR_EXP 106
67104: PUSH
67105: LD_INT 0
67107: ST_TO_ADDR
// sBetray := false ;
67108: LD_ADDR_EXP 110
67112: PUSH
67113: LD_INT 0
67115: ST_TO_ADDR
// sContamin := false ;
67116: LD_ADDR_EXP 111
67120: PUSH
67121: LD_INT 0
67123: ST_TO_ADDR
// sOil := false ;
67124: LD_ADDR_EXP 113
67128: PUSH
67129: LD_INT 0
67131: ST_TO_ADDR
// sStu := false ;
67132: LD_ADDR_EXP 117
67136: PUSH
67137: LD_INT 0
67139: ST_TO_ADDR
// sBazooka := false ;
67140: LD_ADDR_EXP 120
67144: PUSH
67145: LD_INT 0
67147: ST_TO_ADDR
// sMortar := false ;
67148: LD_ADDR_EXP 121
67152: PUSH
67153: LD_INT 0
67155: ST_TO_ADDR
// sRanger := false ;
67156: LD_ADDR_EXP 131
67160: PUSH
67161: LD_INT 0
67163: ST_TO_ADDR
// sComputer := false ;
67164: LD_ADDR_EXP 132
67168: PUSH
67169: LD_INT 0
67171: ST_TO_ADDR
// s30 := false ;
67172: LD_ADDR_EXP 133
67176: PUSH
67177: LD_INT 0
67179: ST_TO_ADDR
// s60 := false ;
67180: LD_ADDR_EXP 134
67184: PUSH
67185: LD_INT 0
67187: ST_TO_ADDR
// end ;
67188: LD_VAR 0 1
67192: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
67193: LD_INT 0
67195: PPUSH
67196: PPUSH
67197: PPUSH
67198: PPUSH
67199: PPUSH
// result := [ ] ;
67200: LD_ADDR_VAR 0 1
67204: PUSH
67205: EMPTY
67206: ST_TO_ADDR
// if campaign_id = 1 then
67207: LD_OWVAR 69
67211: PUSH
67212: LD_INT 1
67214: EQUAL
67215: IFFALSE 70381
// begin case mission_number of 1 :
67217: LD_OWVAR 70
67221: PUSH
67222: LD_INT 1
67224: DOUBLE
67225: EQUAL
67226: IFTRUE 67230
67228: GO 67306
67230: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
67231: LD_ADDR_VAR 0 1
67235: PUSH
67236: LD_INT 2
67238: PUSH
67239: LD_INT 4
67241: PUSH
67242: LD_INT 11
67244: PUSH
67245: LD_INT 12
67247: PUSH
67248: LD_INT 15
67250: PUSH
67251: LD_INT 16
67253: PUSH
67254: LD_INT 22
67256: PUSH
67257: LD_INT 23
67259: PUSH
67260: LD_INT 26
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 101
67276: PUSH
67277: LD_INT 102
67279: PUSH
67280: LD_INT 106
67282: PUSH
67283: LD_INT 116
67285: PUSH
67286: LD_INT 117
67288: PUSH
67289: LD_INT 118
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: ST_TO_ADDR
67304: GO 70379
67306: LD_INT 2
67308: DOUBLE
67309: EQUAL
67310: IFTRUE 67314
67312: GO 67398
67314: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
67315: LD_ADDR_VAR 0 1
67319: PUSH
67320: LD_INT 2
67322: PUSH
67323: LD_INT 4
67325: PUSH
67326: LD_INT 11
67328: PUSH
67329: LD_INT 12
67331: PUSH
67332: LD_INT 15
67334: PUSH
67335: LD_INT 16
67337: PUSH
67338: LD_INT 22
67340: PUSH
67341: LD_INT 23
67343: PUSH
67344: LD_INT 26
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 101
67360: PUSH
67361: LD_INT 102
67363: PUSH
67364: LD_INT 105
67366: PUSH
67367: LD_INT 106
67369: PUSH
67370: LD_INT 108
67372: PUSH
67373: LD_INT 116
67375: PUSH
67376: LD_INT 117
67378: PUSH
67379: LD_INT 118
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: ST_TO_ADDR
67396: GO 70379
67398: LD_INT 3
67400: DOUBLE
67401: EQUAL
67402: IFTRUE 67406
67404: GO 67494
67406: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
67407: LD_ADDR_VAR 0 1
67411: PUSH
67412: LD_INT 2
67414: PUSH
67415: LD_INT 4
67417: PUSH
67418: LD_INT 5
67420: PUSH
67421: LD_INT 11
67423: PUSH
67424: LD_INT 12
67426: PUSH
67427: LD_INT 15
67429: PUSH
67430: LD_INT 16
67432: PUSH
67433: LD_INT 22
67435: PUSH
67436: LD_INT 26
67438: PUSH
67439: LD_INT 36
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 101
67456: PUSH
67457: LD_INT 102
67459: PUSH
67460: LD_INT 105
67462: PUSH
67463: LD_INT 106
67465: PUSH
67466: LD_INT 108
67468: PUSH
67469: LD_INT 116
67471: PUSH
67472: LD_INT 117
67474: PUSH
67475: LD_INT 118
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: ST_TO_ADDR
67492: GO 70379
67494: LD_INT 4
67496: DOUBLE
67497: EQUAL
67498: IFTRUE 67502
67500: GO 67598
67502: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
67503: LD_ADDR_VAR 0 1
67507: PUSH
67508: LD_INT 2
67510: PUSH
67511: LD_INT 4
67513: PUSH
67514: LD_INT 5
67516: PUSH
67517: LD_INT 8
67519: PUSH
67520: LD_INT 11
67522: PUSH
67523: LD_INT 12
67525: PUSH
67526: LD_INT 15
67528: PUSH
67529: LD_INT 16
67531: PUSH
67532: LD_INT 22
67534: PUSH
67535: LD_INT 23
67537: PUSH
67538: LD_INT 26
67540: PUSH
67541: LD_INT 36
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 101
67560: PUSH
67561: LD_INT 102
67563: PUSH
67564: LD_INT 105
67566: PUSH
67567: LD_INT 106
67569: PUSH
67570: LD_INT 108
67572: PUSH
67573: LD_INT 116
67575: PUSH
67576: LD_INT 117
67578: PUSH
67579: LD_INT 118
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: LIST
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: ST_TO_ADDR
67596: GO 70379
67598: LD_INT 5
67600: DOUBLE
67601: EQUAL
67602: IFTRUE 67606
67604: GO 67718
67606: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
67607: LD_ADDR_VAR 0 1
67611: PUSH
67612: LD_INT 2
67614: PUSH
67615: LD_INT 4
67617: PUSH
67618: LD_INT 5
67620: PUSH
67621: LD_INT 6
67623: PUSH
67624: LD_INT 8
67626: PUSH
67627: LD_INT 11
67629: PUSH
67630: LD_INT 12
67632: PUSH
67633: LD_INT 15
67635: PUSH
67636: LD_INT 16
67638: PUSH
67639: LD_INT 22
67641: PUSH
67642: LD_INT 23
67644: PUSH
67645: LD_INT 25
67647: PUSH
67648: LD_INT 26
67650: PUSH
67651: LD_INT 36
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 101
67672: PUSH
67673: LD_INT 102
67675: PUSH
67676: LD_INT 105
67678: PUSH
67679: LD_INT 106
67681: PUSH
67682: LD_INT 108
67684: PUSH
67685: LD_INT 109
67687: PUSH
67688: LD_INT 112
67690: PUSH
67691: LD_INT 116
67693: PUSH
67694: LD_INT 117
67696: PUSH
67697: LD_INT 118
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: ST_TO_ADDR
67716: GO 70379
67718: LD_INT 6
67720: DOUBLE
67721: EQUAL
67722: IFTRUE 67726
67724: GO 67858
67726: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
67727: LD_ADDR_VAR 0 1
67731: PUSH
67732: LD_INT 2
67734: PUSH
67735: LD_INT 4
67737: PUSH
67738: LD_INT 5
67740: PUSH
67741: LD_INT 6
67743: PUSH
67744: LD_INT 8
67746: PUSH
67747: LD_INT 11
67749: PUSH
67750: LD_INT 12
67752: PUSH
67753: LD_INT 15
67755: PUSH
67756: LD_INT 16
67758: PUSH
67759: LD_INT 20
67761: PUSH
67762: LD_INT 21
67764: PUSH
67765: LD_INT 22
67767: PUSH
67768: LD_INT 23
67770: PUSH
67771: LD_INT 25
67773: PUSH
67774: LD_INT 26
67776: PUSH
67777: LD_INT 30
67779: PUSH
67780: LD_INT 31
67782: PUSH
67783: LD_INT 32
67785: PUSH
67786: LD_INT 36
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 101
67812: PUSH
67813: LD_INT 102
67815: PUSH
67816: LD_INT 105
67818: PUSH
67819: LD_INT 106
67821: PUSH
67822: LD_INT 108
67824: PUSH
67825: LD_INT 109
67827: PUSH
67828: LD_INT 112
67830: PUSH
67831: LD_INT 116
67833: PUSH
67834: LD_INT 117
67836: PUSH
67837: LD_INT 118
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: ST_TO_ADDR
67856: GO 70379
67858: LD_INT 7
67860: DOUBLE
67861: EQUAL
67862: IFTRUE 67866
67864: GO 67978
67866: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
67867: LD_ADDR_VAR 0 1
67871: PUSH
67872: LD_INT 2
67874: PUSH
67875: LD_INT 4
67877: PUSH
67878: LD_INT 5
67880: PUSH
67881: LD_INT 7
67883: PUSH
67884: LD_INT 11
67886: PUSH
67887: LD_INT 12
67889: PUSH
67890: LD_INT 15
67892: PUSH
67893: LD_INT 16
67895: PUSH
67896: LD_INT 20
67898: PUSH
67899: LD_INT 21
67901: PUSH
67902: LD_INT 22
67904: PUSH
67905: LD_INT 23
67907: PUSH
67908: LD_INT 25
67910: PUSH
67911: LD_INT 26
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 101
67932: PUSH
67933: LD_INT 102
67935: PUSH
67936: LD_INT 103
67938: PUSH
67939: LD_INT 105
67941: PUSH
67942: LD_INT 106
67944: PUSH
67945: LD_INT 108
67947: PUSH
67948: LD_INT 112
67950: PUSH
67951: LD_INT 116
67953: PUSH
67954: LD_INT 117
67956: PUSH
67957: LD_INT 118
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: ST_TO_ADDR
67976: GO 70379
67978: LD_INT 8
67980: DOUBLE
67981: EQUAL
67982: IFTRUE 67986
67984: GO 68126
67986: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
67987: LD_ADDR_VAR 0 1
67991: PUSH
67992: LD_INT 2
67994: PUSH
67995: LD_INT 4
67997: PUSH
67998: LD_INT 5
68000: PUSH
68001: LD_INT 6
68003: PUSH
68004: LD_INT 7
68006: PUSH
68007: LD_INT 8
68009: PUSH
68010: LD_INT 11
68012: PUSH
68013: LD_INT 12
68015: PUSH
68016: LD_INT 15
68018: PUSH
68019: LD_INT 16
68021: PUSH
68022: LD_INT 20
68024: PUSH
68025: LD_INT 21
68027: PUSH
68028: LD_INT 22
68030: PUSH
68031: LD_INT 23
68033: PUSH
68034: LD_INT 25
68036: PUSH
68037: LD_INT 26
68039: PUSH
68040: LD_INT 30
68042: PUSH
68043: LD_INT 31
68045: PUSH
68046: LD_INT 32
68048: PUSH
68049: LD_INT 36
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 101
68076: PUSH
68077: LD_INT 102
68079: PUSH
68080: LD_INT 103
68082: PUSH
68083: LD_INT 105
68085: PUSH
68086: LD_INT 106
68088: PUSH
68089: LD_INT 108
68091: PUSH
68092: LD_INT 109
68094: PUSH
68095: LD_INT 112
68097: PUSH
68098: LD_INT 116
68100: PUSH
68101: LD_INT 117
68103: PUSH
68104: LD_INT 118
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: ST_TO_ADDR
68124: GO 70379
68126: LD_INT 9
68128: DOUBLE
68129: EQUAL
68130: IFTRUE 68134
68132: GO 68282
68134: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
68135: LD_ADDR_VAR 0 1
68139: PUSH
68140: LD_INT 2
68142: PUSH
68143: LD_INT 4
68145: PUSH
68146: LD_INT 5
68148: PUSH
68149: LD_INT 6
68151: PUSH
68152: LD_INT 7
68154: PUSH
68155: LD_INT 8
68157: PUSH
68158: LD_INT 11
68160: PUSH
68161: LD_INT 12
68163: PUSH
68164: LD_INT 15
68166: PUSH
68167: LD_INT 16
68169: PUSH
68170: LD_INT 20
68172: PUSH
68173: LD_INT 21
68175: PUSH
68176: LD_INT 22
68178: PUSH
68179: LD_INT 23
68181: PUSH
68182: LD_INT 25
68184: PUSH
68185: LD_INT 26
68187: PUSH
68188: LD_INT 28
68190: PUSH
68191: LD_INT 30
68193: PUSH
68194: LD_INT 31
68196: PUSH
68197: LD_INT 32
68199: PUSH
68200: LD_INT 36
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 101
68228: PUSH
68229: LD_INT 102
68231: PUSH
68232: LD_INT 103
68234: PUSH
68235: LD_INT 105
68237: PUSH
68238: LD_INT 106
68240: PUSH
68241: LD_INT 108
68243: PUSH
68244: LD_INT 109
68246: PUSH
68247: LD_INT 112
68249: PUSH
68250: LD_INT 114
68252: PUSH
68253: LD_INT 116
68255: PUSH
68256: LD_INT 117
68258: PUSH
68259: LD_INT 118
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: ST_TO_ADDR
68280: GO 70379
68282: LD_INT 10
68284: DOUBLE
68285: EQUAL
68286: IFTRUE 68290
68288: GO 68486
68290: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
68291: LD_ADDR_VAR 0 1
68295: PUSH
68296: LD_INT 2
68298: PUSH
68299: LD_INT 4
68301: PUSH
68302: LD_INT 5
68304: PUSH
68305: LD_INT 6
68307: PUSH
68308: LD_INT 7
68310: PUSH
68311: LD_INT 8
68313: PUSH
68314: LD_INT 9
68316: PUSH
68317: LD_INT 10
68319: PUSH
68320: LD_INT 11
68322: PUSH
68323: LD_INT 12
68325: PUSH
68326: LD_INT 13
68328: PUSH
68329: LD_INT 14
68331: PUSH
68332: LD_INT 15
68334: PUSH
68335: LD_INT 16
68337: PUSH
68338: LD_INT 17
68340: PUSH
68341: LD_INT 18
68343: PUSH
68344: LD_INT 19
68346: PUSH
68347: LD_INT 20
68349: PUSH
68350: LD_INT 21
68352: PUSH
68353: LD_INT 22
68355: PUSH
68356: LD_INT 23
68358: PUSH
68359: LD_INT 24
68361: PUSH
68362: LD_INT 25
68364: PUSH
68365: LD_INT 26
68367: PUSH
68368: LD_INT 28
68370: PUSH
68371: LD_INT 30
68373: PUSH
68374: LD_INT 31
68376: PUSH
68377: LD_INT 32
68379: PUSH
68380: LD_INT 36
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 101
68416: PUSH
68417: LD_INT 102
68419: PUSH
68420: LD_INT 103
68422: PUSH
68423: LD_INT 104
68425: PUSH
68426: LD_INT 105
68428: PUSH
68429: LD_INT 106
68431: PUSH
68432: LD_INT 107
68434: PUSH
68435: LD_INT 108
68437: PUSH
68438: LD_INT 109
68440: PUSH
68441: LD_INT 110
68443: PUSH
68444: LD_INT 111
68446: PUSH
68447: LD_INT 112
68449: PUSH
68450: LD_INT 114
68452: PUSH
68453: LD_INT 116
68455: PUSH
68456: LD_INT 117
68458: PUSH
68459: LD_INT 118
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: ST_TO_ADDR
68484: GO 70379
68486: LD_INT 11
68488: DOUBLE
68489: EQUAL
68490: IFTRUE 68494
68492: GO 68698
68494: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
68495: LD_ADDR_VAR 0 1
68499: PUSH
68500: LD_INT 2
68502: PUSH
68503: LD_INT 3
68505: PUSH
68506: LD_INT 4
68508: PUSH
68509: LD_INT 5
68511: PUSH
68512: LD_INT 6
68514: PUSH
68515: LD_INT 7
68517: PUSH
68518: LD_INT 8
68520: PUSH
68521: LD_INT 9
68523: PUSH
68524: LD_INT 10
68526: PUSH
68527: LD_INT 11
68529: PUSH
68530: LD_INT 12
68532: PUSH
68533: LD_INT 13
68535: PUSH
68536: LD_INT 14
68538: PUSH
68539: LD_INT 15
68541: PUSH
68542: LD_INT 16
68544: PUSH
68545: LD_INT 17
68547: PUSH
68548: LD_INT 18
68550: PUSH
68551: LD_INT 19
68553: PUSH
68554: LD_INT 20
68556: PUSH
68557: LD_INT 21
68559: PUSH
68560: LD_INT 22
68562: PUSH
68563: LD_INT 23
68565: PUSH
68566: LD_INT 24
68568: PUSH
68569: LD_INT 25
68571: PUSH
68572: LD_INT 26
68574: PUSH
68575: LD_INT 28
68577: PUSH
68578: LD_INT 30
68580: PUSH
68581: LD_INT 31
68583: PUSH
68584: LD_INT 32
68586: PUSH
68587: LD_INT 34
68589: PUSH
68590: LD_INT 36
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: LIST
68614: LIST
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 101
68628: PUSH
68629: LD_INT 102
68631: PUSH
68632: LD_INT 103
68634: PUSH
68635: LD_INT 104
68637: PUSH
68638: LD_INT 105
68640: PUSH
68641: LD_INT 106
68643: PUSH
68644: LD_INT 107
68646: PUSH
68647: LD_INT 108
68649: PUSH
68650: LD_INT 109
68652: PUSH
68653: LD_INT 110
68655: PUSH
68656: LD_INT 111
68658: PUSH
68659: LD_INT 112
68661: PUSH
68662: LD_INT 114
68664: PUSH
68665: LD_INT 116
68667: PUSH
68668: LD_INT 117
68670: PUSH
68671: LD_INT 118
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: ST_TO_ADDR
68696: GO 70379
68698: LD_INT 12
68700: DOUBLE
68701: EQUAL
68702: IFTRUE 68706
68704: GO 68926
68706: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
68707: LD_ADDR_VAR 0 1
68711: PUSH
68712: LD_INT 1
68714: PUSH
68715: LD_INT 2
68717: PUSH
68718: LD_INT 3
68720: PUSH
68721: LD_INT 4
68723: PUSH
68724: LD_INT 5
68726: PUSH
68727: LD_INT 6
68729: PUSH
68730: LD_INT 7
68732: PUSH
68733: LD_INT 8
68735: PUSH
68736: LD_INT 9
68738: PUSH
68739: LD_INT 10
68741: PUSH
68742: LD_INT 11
68744: PUSH
68745: LD_INT 12
68747: PUSH
68748: LD_INT 13
68750: PUSH
68751: LD_INT 14
68753: PUSH
68754: LD_INT 15
68756: PUSH
68757: LD_INT 16
68759: PUSH
68760: LD_INT 17
68762: PUSH
68763: LD_INT 18
68765: PUSH
68766: LD_INT 19
68768: PUSH
68769: LD_INT 20
68771: PUSH
68772: LD_INT 21
68774: PUSH
68775: LD_INT 22
68777: PUSH
68778: LD_INT 23
68780: PUSH
68781: LD_INT 24
68783: PUSH
68784: LD_INT 25
68786: PUSH
68787: LD_INT 26
68789: PUSH
68790: LD_INT 27
68792: PUSH
68793: LD_INT 28
68795: PUSH
68796: LD_INT 30
68798: PUSH
68799: LD_INT 31
68801: PUSH
68802: LD_INT 32
68804: PUSH
68805: LD_INT 33
68807: PUSH
68808: LD_INT 34
68810: PUSH
68811: LD_INT 36
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 101
68852: PUSH
68853: LD_INT 102
68855: PUSH
68856: LD_INT 103
68858: PUSH
68859: LD_INT 104
68861: PUSH
68862: LD_INT 105
68864: PUSH
68865: LD_INT 106
68867: PUSH
68868: LD_INT 107
68870: PUSH
68871: LD_INT 108
68873: PUSH
68874: LD_INT 109
68876: PUSH
68877: LD_INT 110
68879: PUSH
68880: LD_INT 111
68882: PUSH
68883: LD_INT 112
68885: PUSH
68886: LD_INT 113
68888: PUSH
68889: LD_INT 114
68891: PUSH
68892: LD_INT 116
68894: PUSH
68895: LD_INT 117
68897: PUSH
68898: LD_INT 118
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: ST_TO_ADDR
68924: GO 70379
68926: LD_INT 13
68928: DOUBLE
68929: EQUAL
68930: IFTRUE 68934
68932: GO 69142
68934: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
68935: LD_ADDR_VAR 0 1
68939: PUSH
68940: LD_INT 1
68942: PUSH
68943: LD_INT 2
68945: PUSH
68946: LD_INT 3
68948: PUSH
68949: LD_INT 4
68951: PUSH
68952: LD_INT 5
68954: PUSH
68955: LD_INT 8
68957: PUSH
68958: LD_INT 9
68960: PUSH
68961: LD_INT 10
68963: PUSH
68964: LD_INT 11
68966: PUSH
68967: LD_INT 12
68969: PUSH
68970: LD_INT 14
68972: PUSH
68973: LD_INT 15
68975: PUSH
68976: LD_INT 16
68978: PUSH
68979: LD_INT 17
68981: PUSH
68982: LD_INT 18
68984: PUSH
68985: LD_INT 19
68987: PUSH
68988: LD_INT 20
68990: PUSH
68991: LD_INT 21
68993: PUSH
68994: LD_INT 22
68996: PUSH
68997: LD_INT 23
68999: PUSH
69000: LD_INT 24
69002: PUSH
69003: LD_INT 25
69005: PUSH
69006: LD_INT 26
69008: PUSH
69009: LD_INT 27
69011: PUSH
69012: LD_INT 28
69014: PUSH
69015: LD_INT 30
69017: PUSH
69018: LD_INT 31
69020: PUSH
69021: LD_INT 32
69023: PUSH
69024: LD_INT 33
69026: PUSH
69027: LD_INT 34
69029: PUSH
69030: LD_INT 36
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 101
69068: PUSH
69069: LD_INT 102
69071: PUSH
69072: LD_INT 103
69074: PUSH
69075: LD_INT 104
69077: PUSH
69078: LD_INT 105
69080: PUSH
69081: LD_INT 106
69083: PUSH
69084: LD_INT 107
69086: PUSH
69087: LD_INT 108
69089: PUSH
69090: LD_INT 109
69092: PUSH
69093: LD_INT 110
69095: PUSH
69096: LD_INT 111
69098: PUSH
69099: LD_INT 112
69101: PUSH
69102: LD_INT 113
69104: PUSH
69105: LD_INT 114
69107: PUSH
69108: LD_INT 116
69110: PUSH
69111: LD_INT 117
69113: PUSH
69114: LD_INT 118
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: ST_TO_ADDR
69140: GO 70379
69142: LD_INT 14
69144: DOUBLE
69145: EQUAL
69146: IFTRUE 69150
69148: GO 69374
69150: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
69151: LD_ADDR_VAR 0 1
69155: PUSH
69156: LD_INT 1
69158: PUSH
69159: LD_INT 2
69161: PUSH
69162: LD_INT 3
69164: PUSH
69165: LD_INT 4
69167: PUSH
69168: LD_INT 5
69170: PUSH
69171: LD_INT 6
69173: PUSH
69174: LD_INT 7
69176: PUSH
69177: LD_INT 8
69179: PUSH
69180: LD_INT 9
69182: PUSH
69183: LD_INT 10
69185: PUSH
69186: LD_INT 11
69188: PUSH
69189: LD_INT 12
69191: PUSH
69192: LD_INT 13
69194: PUSH
69195: LD_INT 14
69197: PUSH
69198: LD_INT 15
69200: PUSH
69201: LD_INT 16
69203: PUSH
69204: LD_INT 17
69206: PUSH
69207: LD_INT 18
69209: PUSH
69210: LD_INT 19
69212: PUSH
69213: LD_INT 20
69215: PUSH
69216: LD_INT 21
69218: PUSH
69219: LD_INT 22
69221: PUSH
69222: LD_INT 23
69224: PUSH
69225: LD_INT 24
69227: PUSH
69228: LD_INT 25
69230: PUSH
69231: LD_INT 26
69233: PUSH
69234: LD_INT 27
69236: PUSH
69237: LD_INT 28
69239: PUSH
69240: LD_INT 29
69242: PUSH
69243: LD_INT 30
69245: PUSH
69246: LD_INT 31
69248: PUSH
69249: LD_INT 32
69251: PUSH
69252: LD_INT 33
69254: PUSH
69255: LD_INT 34
69257: PUSH
69258: LD_INT 36
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 101
69300: PUSH
69301: LD_INT 102
69303: PUSH
69304: LD_INT 103
69306: PUSH
69307: LD_INT 104
69309: PUSH
69310: LD_INT 105
69312: PUSH
69313: LD_INT 106
69315: PUSH
69316: LD_INT 107
69318: PUSH
69319: LD_INT 108
69321: PUSH
69322: LD_INT 109
69324: PUSH
69325: LD_INT 110
69327: PUSH
69328: LD_INT 111
69330: PUSH
69331: LD_INT 112
69333: PUSH
69334: LD_INT 113
69336: PUSH
69337: LD_INT 114
69339: PUSH
69340: LD_INT 116
69342: PUSH
69343: LD_INT 117
69345: PUSH
69346: LD_INT 118
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: ST_TO_ADDR
69372: GO 70379
69374: LD_INT 15
69376: DOUBLE
69377: EQUAL
69378: IFTRUE 69382
69380: GO 69606
69382: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
69383: LD_ADDR_VAR 0 1
69387: PUSH
69388: LD_INT 1
69390: PUSH
69391: LD_INT 2
69393: PUSH
69394: LD_INT 3
69396: PUSH
69397: LD_INT 4
69399: PUSH
69400: LD_INT 5
69402: PUSH
69403: LD_INT 6
69405: PUSH
69406: LD_INT 7
69408: PUSH
69409: LD_INT 8
69411: PUSH
69412: LD_INT 9
69414: PUSH
69415: LD_INT 10
69417: PUSH
69418: LD_INT 11
69420: PUSH
69421: LD_INT 12
69423: PUSH
69424: LD_INT 13
69426: PUSH
69427: LD_INT 14
69429: PUSH
69430: LD_INT 15
69432: PUSH
69433: LD_INT 16
69435: PUSH
69436: LD_INT 17
69438: PUSH
69439: LD_INT 18
69441: PUSH
69442: LD_INT 19
69444: PUSH
69445: LD_INT 20
69447: PUSH
69448: LD_INT 21
69450: PUSH
69451: LD_INT 22
69453: PUSH
69454: LD_INT 23
69456: PUSH
69457: LD_INT 24
69459: PUSH
69460: LD_INT 25
69462: PUSH
69463: LD_INT 26
69465: PUSH
69466: LD_INT 27
69468: PUSH
69469: LD_INT 28
69471: PUSH
69472: LD_INT 29
69474: PUSH
69475: LD_INT 30
69477: PUSH
69478: LD_INT 31
69480: PUSH
69481: LD_INT 32
69483: PUSH
69484: LD_INT 33
69486: PUSH
69487: LD_INT 34
69489: PUSH
69490: LD_INT 36
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: PUSH
69530: LD_INT 101
69532: PUSH
69533: LD_INT 102
69535: PUSH
69536: LD_INT 103
69538: PUSH
69539: LD_INT 104
69541: PUSH
69542: LD_INT 105
69544: PUSH
69545: LD_INT 106
69547: PUSH
69548: LD_INT 107
69550: PUSH
69551: LD_INT 108
69553: PUSH
69554: LD_INT 109
69556: PUSH
69557: LD_INT 110
69559: PUSH
69560: LD_INT 111
69562: PUSH
69563: LD_INT 112
69565: PUSH
69566: LD_INT 113
69568: PUSH
69569: LD_INT 114
69571: PUSH
69572: LD_INT 116
69574: PUSH
69575: LD_INT 117
69577: PUSH
69578: LD_INT 118
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: ST_TO_ADDR
69604: GO 70379
69606: LD_INT 16
69608: DOUBLE
69609: EQUAL
69610: IFTRUE 69614
69612: GO 69750
69614: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
69615: LD_ADDR_VAR 0 1
69619: PUSH
69620: LD_INT 2
69622: PUSH
69623: LD_INT 4
69625: PUSH
69626: LD_INT 5
69628: PUSH
69629: LD_INT 7
69631: PUSH
69632: LD_INT 11
69634: PUSH
69635: LD_INT 12
69637: PUSH
69638: LD_INT 15
69640: PUSH
69641: LD_INT 16
69643: PUSH
69644: LD_INT 20
69646: PUSH
69647: LD_INT 21
69649: PUSH
69650: LD_INT 22
69652: PUSH
69653: LD_INT 23
69655: PUSH
69656: LD_INT 25
69658: PUSH
69659: LD_INT 26
69661: PUSH
69662: LD_INT 30
69664: PUSH
69665: LD_INT 31
69667: PUSH
69668: LD_INT 32
69670: PUSH
69671: LD_INT 33
69673: PUSH
69674: LD_INT 34
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 101
69700: PUSH
69701: LD_INT 102
69703: PUSH
69704: LD_INT 103
69706: PUSH
69707: LD_INT 106
69709: PUSH
69710: LD_INT 108
69712: PUSH
69713: LD_INT 112
69715: PUSH
69716: LD_INT 113
69718: PUSH
69719: LD_INT 114
69721: PUSH
69722: LD_INT 116
69724: PUSH
69725: LD_INT 117
69727: PUSH
69728: LD_INT 118
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: ST_TO_ADDR
69748: GO 70379
69750: LD_INT 17
69752: DOUBLE
69753: EQUAL
69754: IFTRUE 69758
69756: GO 69982
69758: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
69759: LD_ADDR_VAR 0 1
69763: PUSH
69764: LD_INT 1
69766: PUSH
69767: LD_INT 2
69769: PUSH
69770: LD_INT 3
69772: PUSH
69773: LD_INT 4
69775: PUSH
69776: LD_INT 5
69778: PUSH
69779: LD_INT 6
69781: PUSH
69782: LD_INT 7
69784: PUSH
69785: LD_INT 8
69787: PUSH
69788: LD_INT 9
69790: PUSH
69791: LD_INT 10
69793: PUSH
69794: LD_INT 11
69796: PUSH
69797: LD_INT 12
69799: PUSH
69800: LD_INT 13
69802: PUSH
69803: LD_INT 14
69805: PUSH
69806: LD_INT 15
69808: PUSH
69809: LD_INT 16
69811: PUSH
69812: LD_INT 17
69814: PUSH
69815: LD_INT 18
69817: PUSH
69818: LD_INT 19
69820: PUSH
69821: LD_INT 20
69823: PUSH
69824: LD_INT 21
69826: PUSH
69827: LD_INT 22
69829: PUSH
69830: LD_INT 23
69832: PUSH
69833: LD_INT 24
69835: PUSH
69836: LD_INT 25
69838: PUSH
69839: LD_INT 26
69841: PUSH
69842: LD_INT 27
69844: PUSH
69845: LD_INT 28
69847: PUSH
69848: LD_INT 29
69850: PUSH
69851: LD_INT 30
69853: PUSH
69854: LD_INT 31
69856: PUSH
69857: LD_INT 32
69859: PUSH
69860: LD_INT 33
69862: PUSH
69863: LD_INT 34
69865: PUSH
69866: LD_INT 36
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: LIST
69892: LIST
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 101
69908: PUSH
69909: LD_INT 102
69911: PUSH
69912: LD_INT 103
69914: PUSH
69915: LD_INT 104
69917: PUSH
69918: LD_INT 105
69920: PUSH
69921: LD_INT 106
69923: PUSH
69924: LD_INT 107
69926: PUSH
69927: LD_INT 108
69929: PUSH
69930: LD_INT 109
69932: PUSH
69933: LD_INT 110
69935: PUSH
69936: LD_INT 111
69938: PUSH
69939: LD_INT 112
69941: PUSH
69942: LD_INT 113
69944: PUSH
69945: LD_INT 114
69947: PUSH
69948: LD_INT 116
69950: PUSH
69951: LD_INT 117
69953: PUSH
69954: LD_INT 118
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: ST_TO_ADDR
69980: GO 70379
69982: LD_INT 18
69984: DOUBLE
69985: EQUAL
69986: IFTRUE 69990
69988: GO 70138
69990: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
69991: LD_ADDR_VAR 0 1
69995: PUSH
69996: LD_INT 2
69998: PUSH
69999: LD_INT 4
70001: PUSH
70002: LD_INT 5
70004: PUSH
70005: LD_INT 7
70007: PUSH
70008: LD_INT 11
70010: PUSH
70011: LD_INT 12
70013: PUSH
70014: LD_INT 15
70016: PUSH
70017: LD_INT 16
70019: PUSH
70020: LD_INT 20
70022: PUSH
70023: LD_INT 21
70025: PUSH
70026: LD_INT 22
70028: PUSH
70029: LD_INT 23
70031: PUSH
70032: LD_INT 25
70034: PUSH
70035: LD_INT 26
70037: PUSH
70038: LD_INT 30
70040: PUSH
70041: LD_INT 31
70043: PUSH
70044: LD_INT 32
70046: PUSH
70047: LD_INT 33
70049: PUSH
70050: LD_INT 34
70052: PUSH
70053: LD_INT 35
70055: PUSH
70056: LD_INT 36
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 101
70084: PUSH
70085: LD_INT 102
70087: PUSH
70088: LD_INT 103
70090: PUSH
70091: LD_INT 106
70093: PUSH
70094: LD_INT 108
70096: PUSH
70097: LD_INT 112
70099: PUSH
70100: LD_INT 113
70102: PUSH
70103: LD_INT 114
70105: PUSH
70106: LD_INT 115
70108: PUSH
70109: LD_INT 116
70111: PUSH
70112: LD_INT 117
70114: PUSH
70115: LD_INT 118
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: ST_TO_ADDR
70136: GO 70379
70138: LD_INT 19
70140: DOUBLE
70141: EQUAL
70142: IFTRUE 70146
70144: GO 70378
70146: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
70147: LD_ADDR_VAR 0 1
70151: PUSH
70152: LD_INT 1
70154: PUSH
70155: LD_INT 2
70157: PUSH
70158: LD_INT 3
70160: PUSH
70161: LD_INT 4
70163: PUSH
70164: LD_INT 5
70166: PUSH
70167: LD_INT 6
70169: PUSH
70170: LD_INT 7
70172: PUSH
70173: LD_INT 8
70175: PUSH
70176: LD_INT 9
70178: PUSH
70179: LD_INT 10
70181: PUSH
70182: LD_INT 11
70184: PUSH
70185: LD_INT 12
70187: PUSH
70188: LD_INT 13
70190: PUSH
70191: LD_INT 14
70193: PUSH
70194: LD_INT 15
70196: PUSH
70197: LD_INT 16
70199: PUSH
70200: LD_INT 17
70202: PUSH
70203: LD_INT 18
70205: PUSH
70206: LD_INT 19
70208: PUSH
70209: LD_INT 20
70211: PUSH
70212: LD_INT 21
70214: PUSH
70215: LD_INT 22
70217: PUSH
70218: LD_INT 23
70220: PUSH
70221: LD_INT 24
70223: PUSH
70224: LD_INT 25
70226: PUSH
70227: LD_INT 26
70229: PUSH
70230: LD_INT 27
70232: PUSH
70233: LD_INT 28
70235: PUSH
70236: LD_INT 29
70238: PUSH
70239: LD_INT 30
70241: PUSH
70242: LD_INT 31
70244: PUSH
70245: LD_INT 32
70247: PUSH
70248: LD_INT 33
70250: PUSH
70251: LD_INT 34
70253: PUSH
70254: LD_INT 35
70256: PUSH
70257: LD_INT 36
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 101
70300: PUSH
70301: LD_INT 102
70303: PUSH
70304: LD_INT 103
70306: PUSH
70307: LD_INT 104
70309: PUSH
70310: LD_INT 105
70312: PUSH
70313: LD_INT 106
70315: PUSH
70316: LD_INT 107
70318: PUSH
70319: LD_INT 108
70321: PUSH
70322: LD_INT 109
70324: PUSH
70325: LD_INT 110
70327: PUSH
70328: LD_INT 111
70330: PUSH
70331: LD_INT 112
70333: PUSH
70334: LD_INT 113
70336: PUSH
70337: LD_INT 114
70339: PUSH
70340: LD_INT 115
70342: PUSH
70343: LD_INT 116
70345: PUSH
70346: LD_INT 117
70348: PUSH
70349: LD_INT 118
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: LIST
70367: LIST
70368: LIST
70369: LIST
70370: LIST
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: ST_TO_ADDR
70376: GO 70379
70378: POP
// end else
70379: GO 70610
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
70381: LD_ADDR_VAR 0 1
70385: PUSH
70386: LD_INT 1
70388: PUSH
70389: LD_INT 2
70391: PUSH
70392: LD_INT 3
70394: PUSH
70395: LD_INT 4
70397: PUSH
70398: LD_INT 5
70400: PUSH
70401: LD_INT 6
70403: PUSH
70404: LD_INT 7
70406: PUSH
70407: LD_INT 8
70409: PUSH
70410: LD_INT 9
70412: PUSH
70413: LD_INT 10
70415: PUSH
70416: LD_INT 11
70418: PUSH
70419: LD_INT 12
70421: PUSH
70422: LD_INT 13
70424: PUSH
70425: LD_INT 14
70427: PUSH
70428: LD_INT 15
70430: PUSH
70431: LD_INT 16
70433: PUSH
70434: LD_INT 17
70436: PUSH
70437: LD_INT 18
70439: PUSH
70440: LD_INT 19
70442: PUSH
70443: LD_INT 20
70445: PUSH
70446: LD_INT 21
70448: PUSH
70449: LD_INT 22
70451: PUSH
70452: LD_INT 23
70454: PUSH
70455: LD_INT 24
70457: PUSH
70458: LD_INT 25
70460: PUSH
70461: LD_INT 26
70463: PUSH
70464: LD_INT 27
70466: PUSH
70467: LD_INT 28
70469: PUSH
70470: LD_INT 29
70472: PUSH
70473: LD_INT 30
70475: PUSH
70476: LD_INT 31
70478: PUSH
70479: LD_INT 32
70481: PUSH
70482: LD_INT 33
70484: PUSH
70485: LD_INT 34
70487: PUSH
70488: LD_INT 35
70490: PUSH
70491: LD_INT 36
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 101
70534: PUSH
70535: LD_INT 102
70537: PUSH
70538: LD_INT 103
70540: PUSH
70541: LD_INT 104
70543: PUSH
70544: LD_INT 105
70546: PUSH
70547: LD_INT 106
70549: PUSH
70550: LD_INT 107
70552: PUSH
70553: LD_INT 108
70555: PUSH
70556: LD_INT 109
70558: PUSH
70559: LD_INT 110
70561: PUSH
70562: LD_INT 111
70564: PUSH
70565: LD_INT 112
70567: PUSH
70568: LD_INT 113
70570: PUSH
70571: LD_INT 114
70573: PUSH
70574: LD_INT 115
70576: PUSH
70577: LD_INT 116
70579: PUSH
70580: LD_INT 117
70582: PUSH
70583: LD_INT 118
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: ST_TO_ADDR
// if result then
70610: LD_VAR 0 1
70614: IFFALSE 70903
// begin normal :=  ;
70616: LD_ADDR_VAR 0 3
70620: PUSH
70621: LD_STRING 
70623: ST_TO_ADDR
// hardcore :=  ;
70624: LD_ADDR_VAR 0 4
70628: PUSH
70629: LD_STRING 
70631: ST_TO_ADDR
// for i = 1 to normalCounter do
70632: LD_ADDR_VAR 0 5
70636: PUSH
70637: DOUBLE
70638: LD_INT 1
70640: DEC
70641: ST_TO_ADDR
70642: LD_EXP 79
70646: PUSH
70647: FOR_TO
70648: IFFALSE 70749
// begin tmp := 0 ;
70650: LD_ADDR_VAR 0 2
70654: PUSH
70655: LD_STRING 0
70657: ST_TO_ADDR
// if result [ 1 ] then
70658: LD_VAR 0 1
70662: PUSH
70663: LD_INT 1
70665: ARRAY
70666: IFFALSE 70731
// if result [ 1 ] [ 1 ] = i then
70668: LD_VAR 0 1
70672: PUSH
70673: LD_INT 1
70675: ARRAY
70676: PUSH
70677: LD_INT 1
70679: ARRAY
70680: PUSH
70681: LD_VAR 0 5
70685: EQUAL
70686: IFFALSE 70731
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
70688: LD_ADDR_VAR 0 1
70692: PUSH
70693: LD_VAR 0 1
70697: PPUSH
70698: LD_INT 1
70700: PPUSH
70701: LD_VAR 0 1
70705: PUSH
70706: LD_INT 1
70708: ARRAY
70709: PPUSH
70710: LD_INT 1
70712: PPUSH
70713: CALL_OW 3
70717: PPUSH
70718: CALL_OW 1
70722: ST_TO_ADDR
// tmp := 1 ;
70723: LD_ADDR_VAR 0 2
70727: PUSH
70728: LD_STRING 1
70730: ST_TO_ADDR
// end ; normal := normal & tmp ;
70731: LD_ADDR_VAR 0 3
70735: PUSH
70736: LD_VAR 0 3
70740: PUSH
70741: LD_VAR 0 2
70745: STR
70746: ST_TO_ADDR
// end ;
70747: GO 70647
70749: POP
70750: POP
// for i = 1 to hardcoreCounter do
70751: LD_ADDR_VAR 0 5
70755: PUSH
70756: DOUBLE
70757: LD_INT 1
70759: DEC
70760: ST_TO_ADDR
70761: LD_EXP 80
70765: PUSH
70766: FOR_TO
70767: IFFALSE 70872
// begin tmp := 0 ;
70769: LD_ADDR_VAR 0 2
70773: PUSH
70774: LD_STRING 0
70776: ST_TO_ADDR
// if result [ 2 ] then
70777: LD_VAR 0 1
70781: PUSH
70782: LD_INT 2
70784: ARRAY
70785: IFFALSE 70854
// if result [ 2 ] [ 1 ] = 100 + i then
70787: LD_VAR 0 1
70791: PUSH
70792: LD_INT 2
70794: ARRAY
70795: PUSH
70796: LD_INT 1
70798: ARRAY
70799: PUSH
70800: LD_INT 100
70802: PUSH
70803: LD_VAR 0 5
70807: PLUS
70808: EQUAL
70809: IFFALSE 70854
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
70811: LD_ADDR_VAR 0 1
70815: PUSH
70816: LD_VAR 0 1
70820: PPUSH
70821: LD_INT 2
70823: PPUSH
70824: LD_VAR 0 1
70828: PUSH
70829: LD_INT 2
70831: ARRAY
70832: PPUSH
70833: LD_INT 1
70835: PPUSH
70836: CALL_OW 3
70840: PPUSH
70841: CALL_OW 1
70845: ST_TO_ADDR
// tmp := 1 ;
70846: LD_ADDR_VAR 0 2
70850: PUSH
70851: LD_STRING 1
70853: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
70854: LD_ADDR_VAR 0 4
70858: PUSH
70859: LD_VAR 0 4
70863: PUSH
70864: LD_VAR 0 2
70868: STR
70869: ST_TO_ADDR
// end ;
70870: GO 70766
70872: POP
70873: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
70874: LD_STRING getStreamItemsFromMission("
70876: PUSH
70877: LD_VAR 0 3
70881: STR
70882: PUSH
70883: LD_STRING ","
70885: STR
70886: PUSH
70887: LD_VAR 0 4
70891: STR
70892: PUSH
70893: LD_STRING ")
70895: STR
70896: PPUSH
70897: CALL_OW 559
// end else
70901: GO 70910
// ToLua ( getStreamItemsFromMission("","") ) ;
70903: LD_STRING getStreamItemsFromMission("","")
70905: PPUSH
70906: CALL_OW 559
// end ;
70910: LD_VAR 0 1
70914: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
70915: LD_EXP 78
70919: PUSH
70920: LD_EXP 83
70924: AND
70925: IFFALSE 71049
70927: GO 70929
70929: DISABLE
70930: LD_INT 0
70932: PPUSH
70933: PPUSH
// begin enable ;
70934: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
70935: LD_ADDR_VAR 0 2
70939: PUSH
70940: LD_INT 22
70942: PUSH
70943: LD_OWVAR 2
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 2
70954: PUSH
70955: LD_INT 34
70957: PUSH
70958: LD_INT 7
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 34
70967: PUSH
70968: LD_INT 45
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PUSH
70975: LD_INT 34
70977: PUSH
70978: LD_INT 28
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: LD_INT 34
70987: PUSH
70988: LD_INT 47
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PPUSH
71006: CALL_OW 69
71010: ST_TO_ADDR
// if not tmp then
71011: LD_VAR 0 2
71015: NOT
71016: IFFALSE 71020
// exit ;
71018: GO 71049
// for i in tmp do
71020: LD_ADDR_VAR 0 1
71024: PUSH
71025: LD_VAR 0 2
71029: PUSH
71030: FOR_IN
71031: IFFALSE 71047
// begin SetLives ( i , 0 ) ;
71033: LD_VAR 0 1
71037: PPUSH
71038: LD_INT 0
71040: PPUSH
71041: CALL_OW 234
// end ;
71045: GO 71030
71047: POP
71048: POP
// end ;
71049: PPOPN 2
71051: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
71052: LD_EXP 78
71056: PUSH
71057: LD_EXP 84
71061: AND
71062: IFFALSE 71146
71064: GO 71066
71066: DISABLE
71067: LD_INT 0
71069: PPUSH
71070: PPUSH
// begin enable ;
71071: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
71072: LD_ADDR_VAR 0 2
71076: PUSH
71077: LD_INT 22
71079: PUSH
71080: LD_OWVAR 2
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 32
71091: PUSH
71092: LD_INT 3
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PPUSH
71103: CALL_OW 69
71107: ST_TO_ADDR
// if not tmp then
71108: LD_VAR 0 2
71112: NOT
71113: IFFALSE 71117
// exit ;
71115: GO 71146
// for i in tmp do
71117: LD_ADDR_VAR 0 1
71121: PUSH
71122: LD_VAR 0 2
71126: PUSH
71127: FOR_IN
71128: IFFALSE 71144
// begin SetLives ( i , 0 ) ;
71130: LD_VAR 0 1
71134: PPUSH
71135: LD_INT 0
71137: PPUSH
71138: CALL_OW 234
// end ;
71142: GO 71127
71144: POP
71145: POP
// end ;
71146: PPOPN 2
71148: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
71149: LD_EXP 78
71153: PUSH
71154: LD_EXP 81
71158: AND
71159: IFFALSE 71252
71161: GO 71163
71163: DISABLE
71164: LD_INT 0
71166: PPUSH
// begin enable ;
71167: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
71168: LD_ADDR_VAR 0 1
71172: PUSH
71173: LD_INT 22
71175: PUSH
71176: LD_OWVAR 2
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PUSH
71185: LD_INT 2
71187: PUSH
71188: LD_INT 25
71190: PUSH
71191: LD_INT 5
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 25
71200: PUSH
71201: LD_INT 9
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 25
71210: PUSH
71211: LD_INT 8
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PPUSH
71228: CALL_OW 69
71232: PUSH
71233: FOR_IN
71234: IFFALSE 71250
// begin SetClass ( i , 1 ) ;
71236: LD_VAR 0 1
71240: PPUSH
71241: LD_INT 1
71243: PPUSH
71244: CALL_OW 336
// end ;
71248: GO 71233
71250: POP
71251: POP
// end ;
71252: PPOPN 1
71254: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
71255: LD_EXP 78
71259: PUSH
71260: LD_EXP 82
71264: AND
71265: PUSH
71266: LD_OWVAR 65
71270: PUSH
71271: LD_INT 7
71273: LESS
71274: AND
71275: IFFALSE 71289
71277: GO 71279
71279: DISABLE
// begin enable ;
71280: ENABLE
// game_speed := 7 ;
71281: LD_ADDR_OWVAR 65
71285: PUSH
71286: LD_INT 7
71288: ST_TO_ADDR
// end ;
71289: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
71290: LD_EXP 78
71294: PUSH
71295: LD_EXP 85
71299: AND
71300: IFFALSE 71502
71302: GO 71304
71304: DISABLE
71305: LD_INT 0
71307: PPUSH
71308: PPUSH
71309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
71310: LD_ADDR_VAR 0 3
71314: PUSH
71315: LD_INT 81
71317: PUSH
71318: LD_OWVAR 2
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: PUSH
71327: LD_INT 21
71329: PUSH
71330: LD_INT 1
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: PPUSH
71341: CALL_OW 69
71345: ST_TO_ADDR
// if not tmp then
71346: LD_VAR 0 3
71350: NOT
71351: IFFALSE 71355
// exit ;
71353: GO 71502
// if tmp > 5 then
71355: LD_VAR 0 3
71359: PUSH
71360: LD_INT 5
71362: GREATER
71363: IFFALSE 71375
// k := 5 else
71365: LD_ADDR_VAR 0 2
71369: PUSH
71370: LD_INT 5
71372: ST_TO_ADDR
71373: GO 71385
// k := tmp ;
71375: LD_ADDR_VAR 0 2
71379: PUSH
71380: LD_VAR 0 3
71384: ST_TO_ADDR
// for i := 1 to k do
71385: LD_ADDR_VAR 0 1
71389: PUSH
71390: DOUBLE
71391: LD_INT 1
71393: DEC
71394: ST_TO_ADDR
71395: LD_VAR 0 2
71399: PUSH
71400: FOR_TO
71401: IFFALSE 71500
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
71403: LD_VAR 0 3
71407: PUSH
71408: LD_VAR 0 1
71412: ARRAY
71413: PPUSH
71414: LD_VAR 0 1
71418: PUSH
71419: LD_INT 4
71421: MOD
71422: PUSH
71423: LD_INT 1
71425: PLUS
71426: PPUSH
71427: CALL_OW 259
71431: PUSH
71432: LD_INT 10
71434: LESS
71435: IFFALSE 71498
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
71437: LD_VAR 0 3
71441: PUSH
71442: LD_VAR 0 1
71446: ARRAY
71447: PPUSH
71448: LD_VAR 0 1
71452: PUSH
71453: LD_INT 4
71455: MOD
71456: PUSH
71457: LD_INT 1
71459: PLUS
71460: PPUSH
71461: LD_VAR 0 3
71465: PUSH
71466: LD_VAR 0 1
71470: ARRAY
71471: PPUSH
71472: LD_VAR 0 1
71476: PUSH
71477: LD_INT 4
71479: MOD
71480: PUSH
71481: LD_INT 1
71483: PLUS
71484: PPUSH
71485: CALL_OW 259
71489: PUSH
71490: LD_INT 1
71492: PLUS
71493: PPUSH
71494: CALL_OW 237
71498: GO 71400
71500: POP
71501: POP
// end ;
71502: PPOPN 3
71504: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
71505: LD_EXP 78
71509: PUSH
71510: LD_EXP 86
71514: AND
71515: IFFALSE 71535
71517: GO 71519
71519: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
71520: LD_INT 4
71522: PPUSH
71523: LD_OWVAR 2
71527: PPUSH
71528: LD_INT 0
71530: PPUSH
71531: CALL_OW 324
71535: END
// every 0 0$1 trigger StreamModeActive and sShovel do
71536: LD_EXP 78
71540: PUSH
71541: LD_EXP 115
71545: AND
71546: IFFALSE 71566
71548: GO 71550
71550: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
71551: LD_INT 19
71553: PPUSH
71554: LD_OWVAR 2
71558: PPUSH
71559: LD_INT 0
71561: PPUSH
71562: CALL_OW 324
71566: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
71567: LD_EXP 78
71571: PUSH
71572: LD_EXP 87
71576: AND
71577: IFFALSE 71679
71579: GO 71581
71581: DISABLE
71582: LD_INT 0
71584: PPUSH
71585: PPUSH
// begin enable ;
71586: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
71587: LD_ADDR_VAR 0 2
71591: PUSH
71592: LD_INT 22
71594: PUSH
71595: LD_OWVAR 2
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: LD_INT 2
71606: PUSH
71607: LD_INT 34
71609: PUSH
71610: LD_INT 11
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 34
71619: PUSH
71620: LD_INT 30
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: LIST
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: PPUSH
71636: CALL_OW 69
71640: ST_TO_ADDR
// if not tmp then
71641: LD_VAR 0 2
71645: NOT
71646: IFFALSE 71650
// exit ;
71648: GO 71679
// for i in tmp do
71650: LD_ADDR_VAR 0 1
71654: PUSH
71655: LD_VAR 0 2
71659: PUSH
71660: FOR_IN
71661: IFFALSE 71677
// begin SetLives ( i , 0 ) ;
71663: LD_VAR 0 1
71667: PPUSH
71668: LD_INT 0
71670: PPUSH
71671: CALL_OW 234
// end ;
71675: GO 71660
71677: POP
71678: POP
// end ;
71679: PPOPN 2
71681: END
// every 0 0$1 trigger StreamModeActive and sBunker do
71682: LD_EXP 78
71686: PUSH
71687: LD_EXP 88
71691: AND
71692: IFFALSE 71712
71694: GO 71696
71696: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
71697: LD_INT 32
71699: PPUSH
71700: LD_OWVAR 2
71704: PPUSH
71705: LD_INT 0
71707: PPUSH
71708: CALL_OW 324
71712: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
71713: LD_EXP 78
71717: PUSH
71718: LD_EXP 89
71722: AND
71723: IFFALSE 71904
71725: GO 71727
71727: DISABLE
71728: LD_INT 0
71730: PPUSH
71731: PPUSH
71732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
71733: LD_ADDR_VAR 0 2
71737: PUSH
71738: LD_INT 22
71740: PUSH
71741: LD_OWVAR 2
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 33
71752: PUSH
71753: LD_INT 3
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: PPUSH
71764: CALL_OW 69
71768: ST_TO_ADDR
// if not tmp then
71769: LD_VAR 0 2
71773: NOT
71774: IFFALSE 71778
// exit ;
71776: GO 71904
// side := 0 ;
71778: LD_ADDR_VAR 0 3
71782: PUSH
71783: LD_INT 0
71785: ST_TO_ADDR
// for i := 1 to 8 do
71786: LD_ADDR_VAR 0 1
71790: PUSH
71791: DOUBLE
71792: LD_INT 1
71794: DEC
71795: ST_TO_ADDR
71796: LD_INT 8
71798: PUSH
71799: FOR_TO
71800: IFFALSE 71848
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
71802: LD_OWVAR 2
71806: PUSH
71807: LD_VAR 0 1
71811: NONEQUAL
71812: PUSH
71813: LD_OWVAR 2
71817: PPUSH
71818: LD_VAR 0 1
71822: PPUSH
71823: CALL_OW 81
71827: PUSH
71828: LD_INT 2
71830: EQUAL
71831: AND
71832: IFFALSE 71846
// begin side := i ;
71834: LD_ADDR_VAR 0 3
71838: PUSH
71839: LD_VAR 0 1
71843: ST_TO_ADDR
// break ;
71844: GO 71848
// end ;
71846: GO 71799
71848: POP
71849: POP
// if not side then
71850: LD_VAR 0 3
71854: NOT
71855: IFFALSE 71859
// exit ;
71857: GO 71904
// for i := 1 to tmp do
71859: LD_ADDR_VAR 0 1
71863: PUSH
71864: DOUBLE
71865: LD_INT 1
71867: DEC
71868: ST_TO_ADDR
71869: LD_VAR 0 2
71873: PUSH
71874: FOR_TO
71875: IFFALSE 71902
// if Prob ( 60 ) then
71877: LD_INT 60
71879: PPUSH
71880: CALL_OW 13
71884: IFFALSE 71900
// SetSide ( i , side ) ;
71886: LD_VAR 0 1
71890: PPUSH
71891: LD_VAR 0 3
71895: PPUSH
71896: CALL_OW 235
71900: GO 71874
71902: POP
71903: POP
// end ;
71904: PPOPN 3
71906: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
71907: LD_EXP 78
71911: PUSH
71912: LD_EXP 91
71916: AND
71917: IFFALSE 72036
71919: GO 71921
71921: DISABLE
71922: LD_INT 0
71924: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
71925: LD_ADDR_VAR 0 1
71929: PUSH
71930: LD_INT 22
71932: PUSH
71933: LD_OWVAR 2
71937: PUSH
71938: EMPTY
71939: LIST
71940: LIST
71941: PUSH
71942: LD_INT 21
71944: PUSH
71945: LD_INT 1
71947: PUSH
71948: EMPTY
71949: LIST
71950: LIST
71951: PUSH
71952: LD_INT 3
71954: PUSH
71955: LD_INT 23
71957: PUSH
71958: LD_INT 0
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: LIST
71973: PPUSH
71974: CALL_OW 69
71978: PUSH
71979: FOR_IN
71980: IFFALSE 72034
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
71982: LD_VAR 0 1
71986: PPUSH
71987: CALL_OW 257
71991: PUSH
71992: LD_INT 1
71994: PUSH
71995: LD_INT 2
71997: PUSH
71998: LD_INT 3
72000: PUSH
72001: LD_INT 4
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: LIST
72008: LIST
72009: IN
72010: IFFALSE 72032
// SetClass ( un , rand ( 1 , 4 ) ) ;
72012: LD_VAR 0 1
72016: PPUSH
72017: LD_INT 1
72019: PPUSH
72020: LD_INT 4
72022: PPUSH
72023: CALL_OW 12
72027: PPUSH
72028: CALL_OW 336
72032: GO 71979
72034: POP
72035: POP
// end ;
72036: PPOPN 1
72038: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
72039: LD_EXP 78
72043: PUSH
72044: LD_EXP 90
72048: AND
72049: IFFALSE 72128
72051: GO 72053
72053: DISABLE
72054: LD_INT 0
72056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
72057: LD_ADDR_VAR 0 1
72061: PUSH
72062: LD_INT 22
72064: PUSH
72065: LD_OWVAR 2
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 21
72076: PUSH
72077: LD_INT 3
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: PPUSH
72088: CALL_OW 69
72092: ST_TO_ADDR
// if not tmp then
72093: LD_VAR 0 1
72097: NOT
72098: IFFALSE 72102
// exit ;
72100: GO 72128
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
72102: LD_VAR 0 1
72106: PUSH
72107: LD_INT 1
72109: PPUSH
72110: LD_VAR 0 1
72114: PPUSH
72115: CALL_OW 12
72119: ARRAY
72120: PPUSH
72121: LD_INT 100
72123: PPUSH
72124: CALL_OW 234
// end ;
72128: PPOPN 1
72130: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
72131: LD_EXP 78
72135: PUSH
72136: LD_EXP 92
72140: AND
72141: IFFALSE 72239
72143: GO 72145
72145: DISABLE
72146: LD_INT 0
72148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72149: LD_ADDR_VAR 0 1
72153: PUSH
72154: LD_INT 22
72156: PUSH
72157: LD_OWVAR 2
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: PUSH
72166: LD_INT 21
72168: PUSH
72169: LD_INT 1
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: PPUSH
72180: CALL_OW 69
72184: ST_TO_ADDR
// if not tmp then
72185: LD_VAR 0 1
72189: NOT
72190: IFFALSE 72194
// exit ;
72192: GO 72239
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
72194: LD_VAR 0 1
72198: PUSH
72199: LD_INT 1
72201: PPUSH
72202: LD_VAR 0 1
72206: PPUSH
72207: CALL_OW 12
72211: ARRAY
72212: PPUSH
72213: LD_INT 1
72215: PPUSH
72216: LD_INT 4
72218: PPUSH
72219: CALL_OW 12
72223: PPUSH
72224: LD_INT 3000
72226: PPUSH
72227: LD_INT 9000
72229: PPUSH
72230: CALL_OW 12
72234: PPUSH
72235: CALL_OW 492
// end ;
72239: PPOPN 1
72241: END
// every 0 0$1 trigger StreamModeActive and sDepot do
72242: LD_EXP 78
72246: PUSH
72247: LD_EXP 93
72251: AND
72252: IFFALSE 72272
72254: GO 72256
72256: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
72257: LD_INT 1
72259: PPUSH
72260: LD_OWVAR 2
72264: PPUSH
72265: LD_INT 0
72267: PPUSH
72268: CALL_OW 324
72272: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
72273: LD_EXP 78
72277: PUSH
72278: LD_EXP 94
72282: AND
72283: IFFALSE 72366
72285: GO 72287
72287: DISABLE
72288: LD_INT 0
72290: PPUSH
72291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
72292: LD_ADDR_VAR 0 2
72296: PUSH
72297: LD_INT 22
72299: PUSH
72300: LD_OWVAR 2
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 21
72311: PUSH
72312: LD_INT 3
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: PUSH
72319: EMPTY
72320: LIST
72321: LIST
72322: PPUSH
72323: CALL_OW 69
72327: ST_TO_ADDR
// if not tmp then
72328: LD_VAR 0 2
72332: NOT
72333: IFFALSE 72337
// exit ;
72335: GO 72366
// for i in tmp do
72337: LD_ADDR_VAR 0 1
72341: PUSH
72342: LD_VAR 0 2
72346: PUSH
72347: FOR_IN
72348: IFFALSE 72364
// SetBLevel ( i , 10 ) ;
72350: LD_VAR 0 1
72354: PPUSH
72355: LD_INT 10
72357: PPUSH
72358: CALL_OW 241
72362: GO 72347
72364: POP
72365: POP
// end ;
72366: PPOPN 2
72368: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
72369: LD_EXP 78
72373: PUSH
72374: LD_EXP 95
72378: AND
72379: IFFALSE 72490
72381: GO 72383
72383: DISABLE
72384: LD_INT 0
72386: PPUSH
72387: PPUSH
72388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72389: LD_ADDR_VAR 0 3
72393: PUSH
72394: LD_INT 22
72396: PUSH
72397: LD_OWVAR 2
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: PUSH
72406: LD_INT 25
72408: PUSH
72409: LD_INT 1
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PPUSH
72420: CALL_OW 69
72424: ST_TO_ADDR
// if not tmp then
72425: LD_VAR 0 3
72429: NOT
72430: IFFALSE 72434
// exit ;
72432: GO 72490
// un := tmp [ rand ( 1 , tmp ) ] ;
72434: LD_ADDR_VAR 0 2
72438: PUSH
72439: LD_VAR 0 3
72443: PUSH
72444: LD_INT 1
72446: PPUSH
72447: LD_VAR 0 3
72451: PPUSH
72452: CALL_OW 12
72456: ARRAY
72457: ST_TO_ADDR
// if Crawls ( un ) then
72458: LD_VAR 0 2
72462: PPUSH
72463: CALL_OW 318
72467: IFFALSE 72478
// ComWalk ( un ) ;
72469: LD_VAR 0 2
72473: PPUSH
72474: CALL_OW 138
// SetClass ( un , class_sniper ) ;
72478: LD_VAR 0 2
72482: PPUSH
72483: LD_INT 5
72485: PPUSH
72486: CALL_OW 336
// end ;
72490: PPOPN 3
72492: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
72493: LD_EXP 78
72497: PUSH
72498: LD_EXP 96
72502: AND
72503: PUSH
72504: LD_OWVAR 67
72508: PUSH
72509: LD_INT 4
72511: LESS
72512: AND
72513: IFFALSE 72532
72515: GO 72517
72517: DISABLE
// begin Difficulty := Difficulty + 1 ;
72518: LD_ADDR_OWVAR 67
72522: PUSH
72523: LD_OWVAR 67
72527: PUSH
72528: LD_INT 1
72530: PLUS
72531: ST_TO_ADDR
// end ;
72532: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
72533: LD_EXP 78
72537: PUSH
72538: LD_EXP 97
72542: AND
72543: IFFALSE 72646
72545: GO 72547
72547: DISABLE
72548: LD_INT 0
72550: PPUSH
// begin for i := 1 to 5 do
72551: LD_ADDR_VAR 0 1
72555: PUSH
72556: DOUBLE
72557: LD_INT 1
72559: DEC
72560: ST_TO_ADDR
72561: LD_INT 5
72563: PUSH
72564: FOR_TO
72565: IFFALSE 72644
// begin uc_nation := nation_nature ;
72567: LD_ADDR_OWVAR 21
72571: PUSH
72572: LD_INT 0
72574: ST_TO_ADDR
// uc_side := 0 ;
72575: LD_ADDR_OWVAR 20
72579: PUSH
72580: LD_INT 0
72582: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72583: LD_ADDR_OWVAR 29
72587: PUSH
72588: LD_INT 12
72590: PUSH
72591: LD_INT 12
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: ST_TO_ADDR
// hc_agressivity := 20 ;
72598: LD_ADDR_OWVAR 35
72602: PUSH
72603: LD_INT 20
72605: ST_TO_ADDR
// hc_class := class_tiger ;
72606: LD_ADDR_OWVAR 28
72610: PUSH
72611: LD_INT 14
72613: ST_TO_ADDR
// hc_gallery :=  ;
72614: LD_ADDR_OWVAR 33
72618: PUSH
72619: LD_STRING 
72621: ST_TO_ADDR
// hc_name :=  ;
72622: LD_ADDR_OWVAR 26
72626: PUSH
72627: LD_STRING 
72629: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
72630: CALL_OW 44
72634: PPUSH
72635: LD_INT 0
72637: PPUSH
72638: CALL_OW 51
// end ;
72642: GO 72564
72644: POP
72645: POP
// end ;
72646: PPOPN 1
72648: END
// every 0 0$1 trigger StreamModeActive and sBomb do
72649: LD_EXP 78
72653: PUSH
72654: LD_EXP 98
72658: AND
72659: IFFALSE 72668
72661: GO 72663
72663: DISABLE
// StreamSibBomb ;
72664: CALL 72669 0 0
72668: END
// export function StreamSibBomb ; var i , x , y ; begin
72669: LD_INT 0
72671: PPUSH
72672: PPUSH
72673: PPUSH
72674: PPUSH
// result := false ;
72675: LD_ADDR_VAR 0 1
72679: PUSH
72680: LD_INT 0
72682: ST_TO_ADDR
// for i := 1 to 16 do
72683: LD_ADDR_VAR 0 2
72687: PUSH
72688: DOUBLE
72689: LD_INT 1
72691: DEC
72692: ST_TO_ADDR
72693: LD_INT 16
72695: PUSH
72696: FOR_TO
72697: IFFALSE 72896
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72699: LD_ADDR_VAR 0 3
72703: PUSH
72704: LD_INT 10
72706: PUSH
72707: LD_INT 20
72709: PUSH
72710: LD_INT 30
72712: PUSH
72713: LD_INT 40
72715: PUSH
72716: LD_INT 50
72718: PUSH
72719: LD_INT 60
72721: PUSH
72722: LD_INT 70
72724: PUSH
72725: LD_INT 80
72727: PUSH
72728: LD_INT 90
72730: PUSH
72731: LD_INT 100
72733: PUSH
72734: LD_INT 110
72736: PUSH
72737: LD_INT 120
72739: PUSH
72740: LD_INT 130
72742: PUSH
72743: LD_INT 140
72745: PUSH
72746: LD_INT 150
72748: PUSH
72749: EMPTY
72750: LIST
72751: LIST
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: PUSH
72766: LD_INT 1
72768: PPUSH
72769: LD_INT 15
72771: PPUSH
72772: CALL_OW 12
72776: ARRAY
72777: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72778: LD_ADDR_VAR 0 4
72782: PUSH
72783: LD_INT 10
72785: PUSH
72786: LD_INT 20
72788: PUSH
72789: LD_INT 30
72791: PUSH
72792: LD_INT 40
72794: PUSH
72795: LD_INT 50
72797: PUSH
72798: LD_INT 60
72800: PUSH
72801: LD_INT 70
72803: PUSH
72804: LD_INT 80
72806: PUSH
72807: LD_INT 90
72809: PUSH
72810: LD_INT 100
72812: PUSH
72813: LD_INT 110
72815: PUSH
72816: LD_INT 120
72818: PUSH
72819: LD_INT 130
72821: PUSH
72822: LD_INT 140
72824: PUSH
72825: LD_INT 150
72827: PUSH
72828: EMPTY
72829: LIST
72830: LIST
72831: LIST
72832: LIST
72833: LIST
72834: LIST
72835: LIST
72836: LIST
72837: LIST
72838: LIST
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: PUSH
72845: LD_INT 1
72847: PPUSH
72848: LD_INT 15
72850: PPUSH
72851: CALL_OW 12
72855: ARRAY
72856: ST_TO_ADDR
// if ValidHex ( x , y ) then
72857: LD_VAR 0 3
72861: PPUSH
72862: LD_VAR 0 4
72866: PPUSH
72867: CALL_OW 488
72871: IFFALSE 72894
// begin result := [ x , y ] ;
72873: LD_ADDR_VAR 0 1
72877: PUSH
72878: LD_VAR 0 3
72882: PUSH
72883: LD_VAR 0 4
72887: PUSH
72888: EMPTY
72889: LIST
72890: LIST
72891: ST_TO_ADDR
// break ;
72892: GO 72896
// end ; end ;
72894: GO 72696
72896: POP
72897: POP
// if result then
72898: LD_VAR 0 1
72902: IFFALSE 72962
// begin ToLua ( playSibBomb() ) ;
72904: LD_STRING playSibBomb()
72906: PPUSH
72907: CALL_OW 559
// wait ( 0 0$14 ) ;
72911: LD_INT 490
72913: PPUSH
72914: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
72918: LD_VAR 0 1
72922: PUSH
72923: LD_INT 1
72925: ARRAY
72926: PPUSH
72927: LD_VAR 0 1
72931: PUSH
72932: LD_INT 2
72934: ARRAY
72935: PPUSH
72936: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
72940: LD_VAR 0 1
72944: PUSH
72945: LD_INT 1
72947: ARRAY
72948: PPUSH
72949: LD_VAR 0 1
72953: PUSH
72954: LD_INT 2
72956: ARRAY
72957: PPUSH
72958: CALL_OW 429
// end ; end ;
72962: LD_VAR 0 1
72966: RET
// every 0 0$1 trigger StreamModeActive and sReset do
72967: LD_EXP 78
72971: PUSH
72972: LD_EXP 100
72976: AND
72977: IFFALSE 72989
72979: GO 72981
72981: DISABLE
// YouLost (  ) ;
72982: LD_STRING 
72984: PPUSH
72985: CALL_OW 104
72989: END
// every 0 0$1 trigger StreamModeActive and sFog do
72990: LD_EXP 78
72994: PUSH
72995: LD_EXP 99
72999: AND
73000: IFFALSE 73014
73002: GO 73004
73004: DISABLE
// FogOff ( your_side ) ;
73005: LD_OWVAR 2
73009: PPUSH
73010: CALL_OW 344
73014: END
// every 0 0$1 trigger StreamModeActive and sSun do
73015: LD_EXP 78
73019: PUSH
73020: LD_EXP 101
73024: AND
73025: IFFALSE 73053
73027: GO 73029
73029: DISABLE
// begin solar_recharge_percent := 0 ;
73030: LD_ADDR_OWVAR 79
73034: PUSH
73035: LD_INT 0
73037: ST_TO_ADDR
// wait ( 5 5$00 ) ;
73038: LD_INT 10500
73040: PPUSH
73041: CALL_OW 67
// solar_recharge_percent := 100 ;
73045: LD_ADDR_OWVAR 79
73049: PUSH
73050: LD_INT 100
73052: ST_TO_ADDR
// end ;
73053: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
73054: LD_EXP 78
73058: PUSH
73059: LD_EXP 102
73063: AND
73064: IFFALSE 73303
73066: GO 73068
73068: DISABLE
73069: LD_INT 0
73071: PPUSH
73072: PPUSH
73073: PPUSH
// begin tmp := [ ] ;
73074: LD_ADDR_VAR 0 3
73078: PUSH
73079: EMPTY
73080: ST_TO_ADDR
// for i := 1 to 6 do
73081: LD_ADDR_VAR 0 1
73085: PUSH
73086: DOUBLE
73087: LD_INT 1
73089: DEC
73090: ST_TO_ADDR
73091: LD_INT 6
73093: PUSH
73094: FOR_TO
73095: IFFALSE 73200
// begin uc_nation := nation_nature ;
73097: LD_ADDR_OWVAR 21
73101: PUSH
73102: LD_INT 0
73104: ST_TO_ADDR
// uc_side := 0 ;
73105: LD_ADDR_OWVAR 20
73109: PUSH
73110: LD_INT 0
73112: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
73113: LD_ADDR_OWVAR 29
73117: PUSH
73118: LD_INT 12
73120: PUSH
73121: LD_INT 12
73123: PUSH
73124: EMPTY
73125: LIST
73126: LIST
73127: ST_TO_ADDR
// hc_agressivity := 20 ;
73128: LD_ADDR_OWVAR 35
73132: PUSH
73133: LD_INT 20
73135: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
73136: LD_ADDR_OWVAR 28
73140: PUSH
73141: LD_INT 17
73143: ST_TO_ADDR
// hc_gallery :=  ;
73144: LD_ADDR_OWVAR 33
73148: PUSH
73149: LD_STRING 
73151: ST_TO_ADDR
// hc_name :=  ;
73152: LD_ADDR_OWVAR 26
73156: PUSH
73157: LD_STRING 
73159: ST_TO_ADDR
// un := CreateHuman ;
73160: LD_ADDR_VAR 0 2
73164: PUSH
73165: CALL_OW 44
73169: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
73170: LD_VAR 0 2
73174: PPUSH
73175: LD_INT 1
73177: PPUSH
73178: CALL_OW 51
// tmp := tmp ^ un ;
73182: LD_ADDR_VAR 0 3
73186: PUSH
73187: LD_VAR 0 3
73191: PUSH
73192: LD_VAR 0 2
73196: ADD
73197: ST_TO_ADDR
// end ;
73198: GO 73094
73200: POP
73201: POP
// repeat wait ( 0 0$1 ) ;
73202: LD_INT 35
73204: PPUSH
73205: CALL_OW 67
// for un in tmp do
73209: LD_ADDR_VAR 0 2
73213: PUSH
73214: LD_VAR 0 3
73218: PUSH
73219: FOR_IN
73220: IFFALSE 73294
// begin if IsDead ( un ) then
73222: LD_VAR 0 2
73226: PPUSH
73227: CALL_OW 301
73231: IFFALSE 73251
// begin tmp := tmp diff un ;
73233: LD_ADDR_VAR 0 3
73237: PUSH
73238: LD_VAR 0 3
73242: PUSH
73243: LD_VAR 0 2
73247: DIFF
73248: ST_TO_ADDR
// continue ;
73249: GO 73219
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
73251: LD_VAR 0 2
73255: PPUSH
73256: LD_INT 3
73258: PUSH
73259: LD_INT 22
73261: PUSH
73262: LD_INT 0
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: PUSH
73269: EMPTY
73270: LIST
73271: LIST
73272: PPUSH
73273: CALL_OW 69
73277: PPUSH
73278: LD_VAR 0 2
73282: PPUSH
73283: CALL_OW 74
73287: PPUSH
73288: CALL_OW 115
// end ;
73292: GO 73219
73294: POP
73295: POP
// until not tmp ;
73296: LD_VAR 0 3
73300: NOT
73301: IFFALSE 73202
// end ;
73303: PPOPN 3
73305: END
// every 0 0$1 trigger StreamModeActive and sTroll do
73306: LD_EXP 78
73310: PUSH
73311: LD_EXP 103
73315: AND
73316: IFFALSE 73370
73318: GO 73320
73320: DISABLE
// begin ToLua ( displayTroll(); ) ;
73321: LD_STRING displayTroll();
73323: PPUSH
73324: CALL_OW 559
// wait ( 3 3$00 ) ;
73328: LD_INT 6300
73330: PPUSH
73331: CALL_OW 67
// ToLua ( hideTroll(); ) ;
73335: LD_STRING hideTroll();
73337: PPUSH
73338: CALL_OW 559
// wait ( 1 1$00 ) ;
73342: LD_INT 2100
73344: PPUSH
73345: CALL_OW 67
// ToLua ( displayTroll(); ) ;
73349: LD_STRING displayTroll();
73351: PPUSH
73352: CALL_OW 559
// wait ( 1 1$00 ) ;
73356: LD_INT 2100
73358: PPUSH
73359: CALL_OW 67
// ToLua ( hideTroll(); ) ;
73363: LD_STRING hideTroll();
73365: PPUSH
73366: CALL_OW 559
// end ;
73370: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
73371: LD_EXP 78
73375: PUSH
73376: LD_EXP 104
73380: AND
73381: IFFALSE 73444
73383: GO 73385
73385: DISABLE
73386: LD_INT 0
73388: PPUSH
// begin p := 0 ;
73389: LD_ADDR_VAR 0 1
73393: PUSH
73394: LD_INT 0
73396: ST_TO_ADDR
// repeat game_speed := 1 ;
73397: LD_ADDR_OWVAR 65
73401: PUSH
73402: LD_INT 1
73404: ST_TO_ADDR
// wait ( 0 0$1 ) ;
73405: LD_INT 35
73407: PPUSH
73408: CALL_OW 67
// p := p + 1 ;
73412: LD_ADDR_VAR 0 1
73416: PUSH
73417: LD_VAR 0 1
73421: PUSH
73422: LD_INT 1
73424: PLUS
73425: ST_TO_ADDR
// until p >= 60 ;
73426: LD_VAR 0 1
73430: PUSH
73431: LD_INT 60
73433: GREATEREQUAL
73434: IFFALSE 73397
// game_speed := 4 ;
73436: LD_ADDR_OWVAR 65
73440: PUSH
73441: LD_INT 4
73443: ST_TO_ADDR
// end ;
73444: PPOPN 1
73446: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
73447: LD_EXP 78
73451: PUSH
73452: LD_EXP 105
73456: AND
73457: IFFALSE 73603
73459: GO 73461
73461: DISABLE
73462: LD_INT 0
73464: PPUSH
73465: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73466: LD_ADDR_VAR 0 1
73470: PUSH
73471: LD_INT 22
73473: PUSH
73474: LD_OWVAR 2
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: PUSH
73483: LD_INT 2
73485: PUSH
73486: LD_INT 30
73488: PUSH
73489: LD_INT 0
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: PUSH
73496: LD_INT 30
73498: PUSH
73499: LD_INT 1
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: PUSH
73506: EMPTY
73507: LIST
73508: LIST
73509: LIST
73510: PUSH
73511: EMPTY
73512: LIST
73513: LIST
73514: PPUSH
73515: CALL_OW 69
73519: ST_TO_ADDR
// if not depot then
73520: LD_VAR 0 1
73524: NOT
73525: IFFALSE 73529
// exit ;
73527: GO 73603
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
73529: LD_ADDR_VAR 0 2
73533: PUSH
73534: LD_VAR 0 1
73538: PUSH
73539: LD_INT 1
73541: PPUSH
73542: LD_VAR 0 1
73546: PPUSH
73547: CALL_OW 12
73551: ARRAY
73552: PPUSH
73553: CALL_OW 274
73557: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
73558: LD_VAR 0 2
73562: PPUSH
73563: LD_INT 1
73565: PPUSH
73566: LD_INT 0
73568: PPUSH
73569: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
73573: LD_VAR 0 2
73577: PPUSH
73578: LD_INT 2
73580: PPUSH
73581: LD_INT 0
73583: PPUSH
73584: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
73588: LD_VAR 0 2
73592: PPUSH
73593: LD_INT 3
73595: PPUSH
73596: LD_INT 0
73598: PPUSH
73599: CALL_OW 277
// end ;
73603: PPOPN 2
73605: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
73606: LD_EXP 78
73610: PUSH
73611: LD_EXP 106
73615: AND
73616: IFFALSE 73713
73618: GO 73620
73620: DISABLE
73621: LD_INT 0
73623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73624: LD_ADDR_VAR 0 1
73628: PUSH
73629: LD_INT 22
73631: PUSH
73632: LD_OWVAR 2
73636: PUSH
73637: EMPTY
73638: LIST
73639: LIST
73640: PUSH
73641: LD_INT 21
73643: PUSH
73644: LD_INT 1
73646: PUSH
73647: EMPTY
73648: LIST
73649: LIST
73650: PUSH
73651: LD_INT 3
73653: PUSH
73654: LD_INT 23
73656: PUSH
73657: LD_INT 0
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: PUSH
73664: EMPTY
73665: LIST
73666: LIST
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: LIST
73672: PPUSH
73673: CALL_OW 69
73677: ST_TO_ADDR
// if not tmp then
73678: LD_VAR 0 1
73682: NOT
73683: IFFALSE 73687
// exit ;
73685: GO 73713
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
73687: LD_VAR 0 1
73691: PUSH
73692: LD_INT 1
73694: PPUSH
73695: LD_VAR 0 1
73699: PPUSH
73700: CALL_OW 12
73704: ARRAY
73705: PPUSH
73706: LD_INT 200
73708: PPUSH
73709: CALL_OW 234
// end ;
73713: PPOPN 1
73715: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
73716: LD_EXP 78
73720: PUSH
73721: LD_EXP 107
73725: AND
73726: IFFALSE 73805
73728: GO 73730
73730: DISABLE
73731: LD_INT 0
73733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
73734: LD_ADDR_VAR 0 1
73738: PUSH
73739: LD_INT 22
73741: PUSH
73742: LD_OWVAR 2
73746: PUSH
73747: EMPTY
73748: LIST
73749: LIST
73750: PUSH
73751: LD_INT 21
73753: PUSH
73754: LD_INT 2
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: PPUSH
73765: CALL_OW 69
73769: ST_TO_ADDR
// if not tmp then
73770: LD_VAR 0 1
73774: NOT
73775: IFFALSE 73779
// exit ;
73777: GO 73805
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
73779: LD_VAR 0 1
73783: PUSH
73784: LD_INT 1
73786: PPUSH
73787: LD_VAR 0 1
73791: PPUSH
73792: CALL_OW 12
73796: ARRAY
73797: PPUSH
73798: LD_INT 60
73800: PPUSH
73801: CALL_OW 234
// end ;
73805: PPOPN 1
73807: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
73808: LD_EXP 78
73812: PUSH
73813: LD_EXP 108
73817: AND
73818: IFFALSE 73917
73820: GO 73822
73822: DISABLE
73823: LD_INT 0
73825: PPUSH
73826: PPUSH
// begin enable ;
73827: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
73828: LD_ADDR_VAR 0 1
73832: PUSH
73833: LD_INT 22
73835: PUSH
73836: LD_OWVAR 2
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: PUSH
73845: LD_INT 61
73847: PUSH
73848: EMPTY
73849: LIST
73850: PUSH
73851: LD_INT 33
73853: PUSH
73854: LD_INT 2
73856: PUSH
73857: EMPTY
73858: LIST
73859: LIST
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: LIST
73865: PPUSH
73866: CALL_OW 69
73870: ST_TO_ADDR
// if not tmp then
73871: LD_VAR 0 1
73875: NOT
73876: IFFALSE 73880
// exit ;
73878: GO 73917
// for i in tmp do
73880: LD_ADDR_VAR 0 2
73884: PUSH
73885: LD_VAR 0 1
73889: PUSH
73890: FOR_IN
73891: IFFALSE 73915
// if IsControledBy ( i ) then
73893: LD_VAR 0 2
73897: PPUSH
73898: CALL_OW 312
73902: IFFALSE 73913
// ComUnlink ( i ) ;
73904: LD_VAR 0 2
73908: PPUSH
73909: CALL_OW 136
73913: GO 73890
73915: POP
73916: POP
// end ;
73917: PPOPN 2
73919: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
73920: LD_EXP 78
73924: PUSH
73925: LD_EXP 109
73929: AND
73930: IFFALSE 74070
73932: GO 73934
73934: DISABLE
73935: LD_INT 0
73937: PPUSH
73938: PPUSH
// begin ToLua ( displayPowell(); ) ;
73939: LD_STRING displayPowell();
73941: PPUSH
73942: CALL_OW 559
// uc_side := 0 ;
73946: LD_ADDR_OWVAR 20
73950: PUSH
73951: LD_INT 0
73953: ST_TO_ADDR
// uc_nation := 2 ;
73954: LD_ADDR_OWVAR 21
73958: PUSH
73959: LD_INT 2
73961: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
73962: LD_ADDR_OWVAR 37
73966: PUSH
73967: LD_INT 14
73969: ST_TO_ADDR
// vc_engine := engine_siberite ;
73970: LD_ADDR_OWVAR 39
73974: PUSH
73975: LD_INT 3
73977: ST_TO_ADDR
// vc_control := control_apeman ;
73978: LD_ADDR_OWVAR 38
73982: PUSH
73983: LD_INT 5
73985: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
73986: LD_ADDR_OWVAR 40
73990: PUSH
73991: LD_INT 29
73993: ST_TO_ADDR
// un := CreateVehicle ;
73994: LD_ADDR_VAR 0 2
73998: PUSH
73999: CALL_OW 45
74003: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74004: LD_VAR 0 2
74008: PPUSH
74009: LD_INT 1
74011: PPUSH
74012: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
74016: LD_INT 35
74018: PPUSH
74019: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
74023: LD_VAR 0 2
74027: PPUSH
74028: LD_INT 22
74030: PUSH
74031: LD_OWVAR 2
74035: PUSH
74036: EMPTY
74037: LIST
74038: LIST
74039: PPUSH
74040: CALL_OW 69
74044: PPUSH
74045: LD_VAR 0 2
74049: PPUSH
74050: CALL_OW 74
74054: PPUSH
74055: CALL_OW 115
// until IsDead ( un ) ;
74059: LD_VAR 0 2
74063: PPUSH
74064: CALL_OW 301
74068: IFFALSE 74016
// end ;
74070: PPOPN 2
74072: END
// every 0 0$1 trigger StreamModeActive and sStu do
74073: LD_EXP 78
74077: PUSH
74078: LD_EXP 117
74082: AND
74083: IFFALSE 74099
74085: GO 74087
74087: DISABLE
// begin ToLua ( displayStucuk(); ) ;
74088: LD_STRING displayStucuk();
74090: PPUSH
74091: CALL_OW 559
// ResetFog ;
74095: CALL_OW 335
// end ;
74099: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
74100: LD_EXP 78
74104: PUSH
74105: LD_EXP 110
74109: AND
74110: IFFALSE 74251
74112: GO 74114
74114: DISABLE
74115: LD_INT 0
74117: PPUSH
74118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
74119: LD_ADDR_VAR 0 2
74123: PUSH
74124: LD_INT 22
74126: PUSH
74127: LD_OWVAR 2
74131: PUSH
74132: EMPTY
74133: LIST
74134: LIST
74135: PUSH
74136: LD_INT 21
74138: PUSH
74139: LD_INT 1
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PUSH
74146: EMPTY
74147: LIST
74148: LIST
74149: PPUSH
74150: CALL_OW 69
74154: ST_TO_ADDR
// if not tmp then
74155: LD_VAR 0 2
74159: NOT
74160: IFFALSE 74164
// exit ;
74162: GO 74251
// un := tmp [ rand ( 1 , tmp ) ] ;
74164: LD_ADDR_VAR 0 1
74168: PUSH
74169: LD_VAR 0 2
74173: PUSH
74174: LD_INT 1
74176: PPUSH
74177: LD_VAR 0 2
74181: PPUSH
74182: CALL_OW 12
74186: ARRAY
74187: ST_TO_ADDR
// SetSide ( un , 0 ) ;
74188: LD_VAR 0 1
74192: PPUSH
74193: LD_INT 0
74195: PPUSH
74196: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
74200: LD_VAR 0 1
74204: PPUSH
74205: LD_OWVAR 3
74209: PUSH
74210: LD_VAR 0 1
74214: DIFF
74215: PPUSH
74216: LD_VAR 0 1
74220: PPUSH
74221: CALL_OW 74
74225: PPUSH
74226: CALL_OW 115
// wait ( 0 0$20 ) ;
74230: LD_INT 700
74232: PPUSH
74233: CALL_OW 67
// SetSide ( un , your_side ) ;
74237: LD_VAR 0 1
74241: PPUSH
74242: LD_OWVAR 2
74246: PPUSH
74247: CALL_OW 235
// end ;
74251: PPOPN 2
74253: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
74254: LD_EXP 78
74258: PUSH
74259: LD_EXP 111
74263: AND
74264: IFFALSE 74370
74266: GO 74268
74268: DISABLE
74269: LD_INT 0
74271: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74272: LD_ADDR_VAR 0 1
74276: PUSH
74277: LD_INT 22
74279: PUSH
74280: LD_OWVAR 2
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: PUSH
74289: LD_INT 2
74291: PUSH
74292: LD_INT 30
74294: PUSH
74295: LD_INT 0
74297: PUSH
74298: EMPTY
74299: LIST
74300: LIST
74301: PUSH
74302: LD_INT 30
74304: PUSH
74305: LD_INT 1
74307: PUSH
74308: EMPTY
74309: LIST
74310: LIST
74311: PUSH
74312: EMPTY
74313: LIST
74314: LIST
74315: LIST
74316: PUSH
74317: EMPTY
74318: LIST
74319: LIST
74320: PPUSH
74321: CALL_OW 69
74325: ST_TO_ADDR
// if not depot then
74326: LD_VAR 0 1
74330: NOT
74331: IFFALSE 74335
// exit ;
74333: GO 74370
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
74335: LD_VAR 0 1
74339: PUSH
74340: LD_INT 1
74342: ARRAY
74343: PPUSH
74344: CALL_OW 250
74348: PPUSH
74349: LD_VAR 0 1
74353: PUSH
74354: LD_INT 1
74356: ARRAY
74357: PPUSH
74358: CALL_OW 251
74362: PPUSH
74363: LD_INT 70
74365: PPUSH
74366: CALL_OW 495
// end ;
74370: PPOPN 1
74372: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
74373: LD_EXP 78
74377: PUSH
74378: LD_EXP 112
74382: AND
74383: IFFALSE 74594
74385: GO 74387
74387: DISABLE
74388: LD_INT 0
74390: PPUSH
74391: PPUSH
74392: PPUSH
74393: PPUSH
74394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
74395: LD_ADDR_VAR 0 5
74399: PUSH
74400: LD_INT 22
74402: PUSH
74403: LD_OWVAR 2
74407: PUSH
74408: EMPTY
74409: LIST
74410: LIST
74411: PUSH
74412: LD_INT 21
74414: PUSH
74415: LD_INT 1
74417: PUSH
74418: EMPTY
74419: LIST
74420: LIST
74421: PUSH
74422: EMPTY
74423: LIST
74424: LIST
74425: PPUSH
74426: CALL_OW 69
74430: ST_TO_ADDR
// if not tmp then
74431: LD_VAR 0 5
74435: NOT
74436: IFFALSE 74440
// exit ;
74438: GO 74594
// for i in tmp do
74440: LD_ADDR_VAR 0 1
74444: PUSH
74445: LD_VAR 0 5
74449: PUSH
74450: FOR_IN
74451: IFFALSE 74592
// begin d := rand ( 0 , 5 ) ;
74453: LD_ADDR_VAR 0 4
74457: PUSH
74458: LD_INT 0
74460: PPUSH
74461: LD_INT 5
74463: PPUSH
74464: CALL_OW 12
74468: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
74469: LD_ADDR_VAR 0 2
74473: PUSH
74474: LD_VAR 0 1
74478: PPUSH
74479: CALL_OW 250
74483: PPUSH
74484: LD_VAR 0 4
74488: PPUSH
74489: LD_INT 3
74491: PPUSH
74492: LD_INT 12
74494: PPUSH
74495: CALL_OW 12
74499: PPUSH
74500: CALL_OW 272
74504: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
74505: LD_ADDR_VAR 0 3
74509: PUSH
74510: LD_VAR 0 1
74514: PPUSH
74515: CALL_OW 251
74519: PPUSH
74520: LD_VAR 0 4
74524: PPUSH
74525: LD_INT 3
74527: PPUSH
74528: LD_INT 12
74530: PPUSH
74531: CALL_OW 12
74535: PPUSH
74536: CALL_OW 273
74540: ST_TO_ADDR
// if ValidHex ( x , y ) then
74541: LD_VAR 0 2
74545: PPUSH
74546: LD_VAR 0 3
74550: PPUSH
74551: CALL_OW 488
74555: IFFALSE 74590
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
74557: LD_VAR 0 1
74561: PPUSH
74562: LD_VAR 0 2
74566: PPUSH
74567: LD_VAR 0 3
74571: PPUSH
74572: LD_INT 3
74574: PPUSH
74575: LD_INT 6
74577: PPUSH
74578: CALL_OW 12
74582: PPUSH
74583: LD_INT 1
74585: PPUSH
74586: CALL_OW 483
// end ;
74590: GO 74450
74592: POP
74593: POP
// end ;
74594: PPOPN 5
74596: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
74597: LD_EXP 78
74601: PUSH
74602: LD_EXP 113
74606: AND
74607: IFFALSE 74701
74609: GO 74611
74611: DISABLE
74612: LD_INT 0
74614: PPUSH
74615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
74616: LD_ADDR_VAR 0 2
74620: PUSH
74621: LD_INT 22
74623: PUSH
74624: LD_OWVAR 2
74628: PUSH
74629: EMPTY
74630: LIST
74631: LIST
74632: PUSH
74633: LD_INT 32
74635: PUSH
74636: LD_INT 1
74638: PUSH
74639: EMPTY
74640: LIST
74641: LIST
74642: PUSH
74643: LD_INT 21
74645: PUSH
74646: LD_INT 2
74648: PUSH
74649: EMPTY
74650: LIST
74651: LIST
74652: PUSH
74653: EMPTY
74654: LIST
74655: LIST
74656: LIST
74657: PPUSH
74658: CALL_OW 69
74662: ST_TO_ADDR
// if not tmp then
74663: LD_VAR 0 2
74667: NOT
74668: IFFALSE 74672
// exit ;
74670: GO 74701
// for i in tmp do
74672: LD_ADDR_VAR 0 1
74676: PUSH
74677: LD_VAR 0 2
74681: PUSH
74682: FOR_IN
74683: IFFALSE 74699
// SetFuel ( i , 0 ) ;
74685: LD_VAR 0 1
74689: PPUSH
74690: LD_INT 0
74692: PPUSH
74693: CALL_OW 240
74697: GO 74682
74699: POP
74700: POP
// end ;
74701: PPOPN 2
74703: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
74704: LD_EXP 78
74708: PUSH
74709: LD_EXP 114
74713: AND
74714: IFFALSE 74780
74716: GO 74718
74718: DISABLE
74719: LD_INT 0
74721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
74722: LD_ADDR_VAR 0 1
74726: PUSH
74727: LD_INT 22
74729: PUSH
74730: LD_OWVAR 2
74734: PUSH
74735: EMPTY
74736: LIST
74737: LIST
74738: PUSH
74739: LD_INT 30
74741: PUSH
74742: LD_INT 29
74744: PUSH
74745: EMPTY
74746: LIST
74747: LIST
74748: PUSH
74749: EMPTY
74750: LIST
74751: LIST
74752: PPUSH
74753: CALL_OW 69
74757: ST_TO_ADDR
// if not tmp then
74758: LD_VAR 0 1
74762: NOT
74763: IFFALSE 74767
// exit ;
74765: GO 74780
// DestroyUnit ( tmp [ 1 ] ) ;
74767: LD_VAR 0 1
74771: PUSH
74772: LD_INT 1
74774: ARRAY
74775: PPUSH
74776: CALL_OW 65
// end ;
74780: PPOPN 1
74782: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
74783: LD_EXP 78
74787: PUSH
74788: LD_EXP 116
74792: AND
74793: IFFALSE 74922
74795: GO 74797
74797: DISABLE
74798: LD_INT 0
74800: PPUSH
// begin uc_side := 0 ;
74801: LD_ADDR_OWVAR 20
74805: PUSH
74806: LD_INT 0
74808: ST_TO_ADDR
// uc_nation := nation_arabian ;
74809: LD_ADDR_OWVAR 21
74813: PUSH
74814: LD_INT 2
74816: ST_TO_ADDR
// hc_gallery :=  ;
74817: LD_ADDR_OWVAR 33
74821: PUSH
74822: LD_STRING 
74824: ST_TO_ADDR
// hc_name :=  ;
74825: LD_ADDR_OWVAR 26
74829: PUSH
74830: LD_STRING 
74832: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
74833: LD_INT 1
74835: PPUSH
74836: LD_INT 11
74838: PPUSH
74839: LD_INT 10
74841: PPUSH
74842: CALL_OW 380
// un := CreateHuman ;
74846: LD_ADDR_VAR 0 1
74850: PUSH
74851: CALL_OW 44
74855: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74856: LD_VAR 0 1
74860: PPUSH
74861: LD_INT 1
74863: PPUSH
74864: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
74868: LD_INT 35
74870: PPUSH
74871: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
74875: LD_VAR 0 1
74879: PPUSH
74880: LD_INT 22
74882: PUSH
74883: LD_OWVAR 2
74887: PUSH
74888: EMPTY
74889: LIST
74890: LIST
74891: PPUSH
74892: CALL_OW 69
74896: PPUSH
74897: LD_VAR 0 1
74901: PPUSH
74902: CALL_OW 74
74906: PPUSH
74907: CALL_OW 115
// until IsDead ( un ) ;
74911: LD_VAR 0 1
74915: PPUSH
74916: CALL_OW 301
74920: IFFALSE 74868
// end ;
74922: PPOPN 1
74924: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
74925: LD_EXP 78
74929: PUSH
74930: LD_EXP 118
74934: AND
74935: IFFALSE 74947
74937: GO 74939
74939: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
74940: LD_STRING earthquake(getX(game), 0, 32)
74942: PPUSH
74943: CALL_OW 559
74947: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
74948: LD_EXP 78
74952: PUSH
74953: LD_EXP 119
74957: AND
74958: IFFALSE 75049
74960: GO 74962
74962: DISABLE
74963: LD_INT 0
74965: PPUSH
// begin enable ;
74966: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
74967: LD_ADDR_VAR 0 1
74971: PUSH
74972: LD_INT 22
74974: PUSH
74975: LD_OWVAR 2
74979: PUSH
74980: EMPTY
74981: LIST
74982: LIST
74983: PUSH
74984: LD_INT 21
74986: PUSH
74987: LD_INT 2
74989: PUSH
74990: EMPTY
74991: LIST
74992: LIST
74993: PUSH
74994: LD_INT 33
74996: PUSH
74997: LD_INT 3
74999: PUSH
75000: EMPTY
75001: LIST
75002: LIST
75003: PUSH
75004: EMPTY
75005: LIST
75006: LIST
75007: LIST
75008: PPUSH
75009: CALL_OW 69
75013: ST_TO_ADDR
// if not tmp then
75014: LD_VAR 0 1
75018: NOT
75019: IFFALSE 75023
// exit ;
75021: GO 75049
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
75023: LD_VAR 0 1
75027: PUSH
75028: LD_INT 1
75030: PPUSH
75031: LD_VAR 0 1
75035: PPUSH
75036: CALL_OW 12
75040: ARRAY
75041: PPUSH
75042: LD_INT 1
75044: PPUSH
75045: CALL_OW 234
// end ;
75049: PPOPN 1
75051: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
75052: LD_EXP 78
75056: PUSH
75057: LD_EXP 120
75061: AND
75062: IFFALSE 75203
75064: GO 75066
75066: DISABLE
75067: LD_INT 0
75069: PPUSH
75070: PPUSH
75071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75072: LD_ADDR_VAR 0 3
75076: PUSH
75077: LD_INT 22
75079: PUSH
75080: LD_OWVAR 2
75084: PUSH
75085: EMPTY
75086: LIST
75087: LIST
75088: PUSH
75089: LD_INT 25
75091: PUSH
75092: LD_INT 1
75094: PUSH
75095: EMPTY
75096: LIST
75097: LIST
75098: PUSH
75099: EMPTY
75100: LIST
75101: LIST
75102: PPUSH
75103: CALL_OW 69
75107: ST_TO_ADDR
// if not tmp then
75108: LD_VAR 0 3
75112: NOT
75113: IFFALSE 75117
// exit ;
75115: GO 75203
// un := tmp [ rand ( 1 , tmp ) ] ;
75117: LD_ADDR_VAR 0 2
75121: PUSH
75122: LD_VAR 0 3
75126: PUSH
75127: LD_INT 1
75129: PPUSH
75130: LD_VAR 0 3
75134: PPUSH
75135: CALL_OW 12
75139: ARRAY
75140: ST_TO_ADDR
// if Crawls ( un ) then
75141: LD_VAR 0 2
75145: PPUSH
75146: CALL_OW 318
75150: IFFALSE 75161
// ComWalk ( un ) ;
75152: LD_VAR 0 2
75156: PPUSH
75157: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
75161: LD_VAR 0 2
75165: PPUSH
75166: LD_INT 9
75168: PPUSH
75169: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
75173: LD_INT 28
75175: PPUSH
75176: LD_OWVAR 2
75180: PPUSH
75181: LD_INT 2
75183: PPUSH
75184: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
75188: LD_INT 29
75190: PPUSH
75191: LD_OWVAR 2
75195: PPUSH
75196: LD_INT 2
75198: PPUSH
75199: CALL_OW 322
// end ;
75203: PPOPN 3
75205: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
75206: LD_EXP 78
75210: PUSH
75211: LD_EXP 121
75215: AND
75216: IFFALSE 75327
75218: GO 75220
75220: DISABLE
75221: LD_INT 0
75223: PPUSH
75224: PPUSH
75225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75226: LD_ADDR_VAR 0 3
75230: PUSH
75231: LD_INT 22
75233: PUSH
75234: LD_OWVAR 2
75238: PUSH
75239: EMPTY
75240: LIST
75241: LIST
75242: PUSH
75243: LD_INT 25
75245: PUSH
75246: LD_INT 1
75248: PUSH
75249: EMPTY
75250: LIST
75251: LIST
75252: PUSH
75253: EMPTY
75254: LIST
75255: LIST
75256: PPUSH
75257: CALL_OW 69
75261: ST_TO_ADDR
// if not tmp then
75262: LD_VAR 0 3
75266: NOT
75267: IFFALSE 75271
// exit ;
75269: GO 75327
// un := tmp [ rand ( 1 , tmp ) ] ;
75271: LD_ADDR_VAR 0 2
75275: PUSH
75276: LD_VAR 0 3
75280: PUSH
75281: LD_INT 1
75283: PPUSH
75284: LD_VAR 0 3
75288: PPUSH
75289: CALL_OW 12
75293: ARRAY
75294: ST_TO_ADDR
// if Crawls ( un ) then
75295: LD_VAR 0 2
75299: PPUSH
75300: CALL_OW 318
75304: IFFALSE 75315
// ComWalk ( un ) ;
75306: LD_VAR 0 2
75310: PPUSH
75311: CALL_OW 138
// SetClass ( un , class_mortar ) ;
75315: LD_VAR 0 2
75319: PPUSH
75320: LD_INT 8
75322: PPUSH
75323: CALL_OW 336
// end ;
75327: PPOPN 3
75329: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
75330: LD_EXP 78
75334: PUSH
75335: LD_EXP 122
75339: AND
75340: IFFALSE 75484
75342: GO 75344
75344: DISABLE
75345: LD_INT 0
75347: PPUSH
75348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
75349: LD_ADDR_VAR 0 2
75353: PUSH
75354: LD_INT 22
75356: PUSH
75357: LD_OWVAR 2
75361: PUSH
75362: EMPTY
75363: LIST
75364: LIST
75365: PUSH
75366: LD_INT 21
75368: PUSH
75369: LD_INT 2
75371: PUSH
75372: EMPTY
75373: LIST
75374: LIST
75375: PUSH
75376: LD_INT 2
75378: PUSH
75379: LD_INT 34
75381: PUSH
75382: LD_INT 12
75384: PUSH
75385: EMPTY
75386: LIST
75387: LIST
75388: PUSH
75389: LD_INT 34
75391: PUSH
75392: LD_INT 51
75394: PUSH
75395: EMPTY
75396: LIST
75397: LIST
75398: PUSH
75399: LD_INT 34
75401: PUSH
75402: LD_INT 32
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: PUSH
75409: EMPTY
75410: LIST
75411: LIST
75412: LIST
75413: LIST
75414: PUSH
75415: EMPTY
75416: LIST
75417: LIST
75418: LIST
75419: PPUSH
75420: CALL_OW 69
75424: ST_TO_ADDR
// if not tmp then
75425: LD_VAR 0 2
75429: NOT
75430: IFFALSE 75434
// exit ;
75432: GO 75484
// for i in tmp do
75434: LD_ADDR_VAR 0 1
75438: PUSH
75439: LD_VAR 0 2
75443: PUSH
75444: FOR_IN
75445: IFFALSE 75482
// if GetCargo ( i , mat_artifact ) = 0 then
75447: LD_VAR 0 1
75451: PPUSH
75452: LD_INT 4
75454: PPUSH
75455: CALL_OW 289
75459: PUSH
75460: LD_INT 0
75462: EQUAL
75463: IFFALSE 75480
// SetCargo ( i , mat_siberit , 100 ) ;
75465: LD_VAR 0 1
75469: PPUSH
75470: LD_INT 3
75472: PPUSH
75473: LD_INT 100
75475: PPUSH
75476: CALL_OW 290
75480: GO 75444
75482: POP
75483: POP
// end ;
75484: PPOPN 2
75486: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
75487: LD_EXP 78
75491: PUSH
75492: LD_EXP 123
75496: AND
75497: IFFALSE 75680
75499: GO 75501
75501: DISABLE
75502: LD_INT 0
75504: PPUSH
75505: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
75506: LD_ADDR_VAR 0 2
75510: PUSH
75511: LD_INT 22
75513: PUSH
75514: LD_OWVAR 2
75518: PUSH
75519: EMPTY
75520: LIST
75521: LIST
75522: PPUSH
75523: CALL_OW 69
75527: ST_TO_ADDR
// if not tmp then
75528: LD_VAR 0 2
75532: NOT
75533: IFFALSE 75537
// exit ;
75535: GO 75680
// for i := 1 to 2 do
75537: LD_ADDR_VAR 0 1
75541: PUSH
75542: DOUBLE
75543: LD_INT 1
75545: DEC
75546: ST_TO_ADDR
75547: LD_INT 2
75549: PUSH
75550: FOR_TO
75551: IFFALSE 75678
// begin uc_side := your_side ;
75553: LD_ADDR_OWVAR 20
75557: PUSH
75558: LD_OWVAR 2
75562: ST_TO_ADDR
// uc_nation := nation_american ;
75563: LD_ADDR_OWVAR 21
75567: PUSH
75568: LD_INT 1
75570: ST_TO_ADDR
// vc_chassis := us_morphling ;
75571: LD_ADDR_OWVAR 37
75575: PUSH
75576: LD_INT 5
75578: ST_TO_ADDR
// vc_engine := engine_siberite ;
75579: LD_ADDR_OWVAR 39
75583: PUSH
75584: LD_INT 3
75586: ST_TO_ADDR
// vc_control := control_computer ;
75587: LD_ADDR_OWVAR 38
75591: PUSH
75592: LD_INT 3
75594: ST_TO_ADDR
// vc_weapon := us_double_laser ;
75595: LD_ADDR_OWVAR 40
75599: PUSH
75600: LD_INT 10
75602: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
75603: LD_VAR 0 2
75607: PUSH
75608: LD_INT 1
75610: ARRAY
75611: PPUSH
75612: CALL_OW 310
75616: NOT
75617: IFFALSE 75664
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
75619: CALL_OW 45
75623: PPUSH
75624: LD_VAR 0 2
75628: PUSH
75629: LD_INT 1
75631: ARRAY
75632: PPUSH
75633: CALL_OW 250
75637: PPUSH
75638: LD_VAR 0 2
75642: PUSH
75643: LD_INT 1
75645: ARRAY
75646: PPUSH
75647: CALL_OW 251
75651: PPUSH
75652: LD_INT 12
75654: PPUSH
75655: LD_INT 1
75657: PPUSH
75658: CALL_OW 50
75662: GO 75676
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
75664: CALL_OW 45
75668: PPUSH
75669: LD_INT 1
75671: PPUSH
75672: CALL_OW 51
// end ;
75676: GO 75550
75678: POP
75679: POP
// end ;
75680: PPOPN 2
75682: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
75683: LD_EXP 78
75687: PUSH
75688: LD_EXP 124
75692: AND
75693: IFFALSE 75915
75695: GO 75697
75697: DISABLE
75698: LD_INT 0
75700: PPUSH
75701: PPUSH
75702: PPUSH
75703: PPUSH
75704: PPUSH
75705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75706: LD_ADDR_VAR 0 6
75710: PUSH
75711: LD_INT 22
75713: PUSH
75714: LD_OWVAR 2
75718: PUSH
75719: EMPTY
75720: LIST
75721: LIST
75722: PUSH
75723: LD_INT 21
75725: PUSH
75726: LD_INT 1
75728: PUSH
75729: EMPTY
75730: LIST
75731: LIST
75732: PUSH
75733: LD_INT 3
75735: PUSH
75736: LD_INT 23
75738: PUSH
75739: LD_INT 0
75741: PUSH
75742: EMPTY
75743: LIST
75744: LIST
75745: PUSH
75746: EMPTY
75747: LIST
75748: LIST
75749: PUSH
75750: EMPTY
75751: LIST
75752: LIST
75753: LIST
75754: PPUSH
75755: CALL_OW 69
75759: ST_TO_ADDR
// if not tmp then
75760: LD_VAR 0 6
75764: NOT
75765: IFFALSE 75769
// exit ;
75767: GO 75915
// s1 := rand ( 1 , 4 ) ;
75769: LD_ADDR_VAR 0 2
75773: PUSH
75774: LD_INT 1
75776: PPUSH
75777: LD_INT 4
75779: PPUSH
75780: CALL_OW 12
75784: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
75785: LD_ADDR_VAR 0 4
75789: PUSH
75790: LD_VAR 0 6
75794: PUSH
75795: LD_INT 1
75797: ARRAY
75798: PPUSH
75799: LD_VAR 0 2
75803: PPUSH
75804: CALL_OW 259
75808: ST_TO_ADDR
// if s1 = 1 then
75809: LD_VAR 0 2
75813: PUSH
75814: LD_INT 1
75816: EQUAL
75817: IFFALSE 75837
// s2 := rand ( 2 , 4 ) else
75819: LD_ADDR_VAR 0 3
75823: PUSH
75824: LD_INT 2
75826: PPUSH
75827: LD_INT 4
75829: PPUSH
75830: CALL_OW 12
75834: ST_TO_ADDR
75835: GO 75845
// s2 := 1 ;
75837: LD_ADDR_VAR 0 3
75841: PUSH
75842: LD_INT 1
75844: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
75845: LD_ADDR_VAR 0 5
75849: PUSH
75850: LD_VAR 0 6
75854: PUSH
75855: LD_INT 1
75857: ARRAY
75858: PPUSH
75859: LD_VAR 0 3
75863: PPUSH
75864: CALL_OW 259
75868: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
75869: LD_VAR 0 6
75873: PUSH
75874: LD_INT 1
75876: ARRAY
75877: PPUSH
75878: LD_VAR 0 2
75882: PPUSH
75883: LD_VAR 0 5
75887: PPUSH
75888: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
75892: LD_VAR 0 6
75896: PUSH
75897: LD_INT 1
75899: ARRAY
75900: PPUSH
75901: LD_VAR 0 3
75905: PPUSH
75906: LD_VAR 0 4
75910: PPUSH
75911: CALL_OW 237
// end ;
75915: PPOPN 6
75917: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
75918: LD_EXP 78
75922: PUSH
75923: LD_EXP 125
75927: AND
75928: IFFALSE 76007
75930: GO 75932
75932: DISABLE
75933: LD_INT 0
75935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
75936: LD_ADDR_VAR 0 1
75940: PUSH
75941: LD_INT 22
75943: PUSH
75944: LD_OWVAR 2
75948: PUSH
75949: EMPTY
75950: LIST
75951: LIST
75952: PUSH
75953: LD_INT 30
75955: PUSH
75956: LD_INT 3
75958: PUSH
75959: EMPTY
75960: LIST
75961: LIST
75962: PUSH
75963: EMPTY
75964: LIST
75965: LIST
75966: PPUSH
75967: CALL_OW 69
75971: ST_TO_ADDR
// if not tmp then
75972: LD_VAR 0 1
75976: NOT
75977: IFFALSE 75981
// exit ;
75979: GO 76007
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
75981: LD_VAR 0 1
75985: PUSH
75986: LD_INT 1
75988: PPUSH
75989: LD_VAR 0 1
75993: PPUSH
75994: CALL_OW 12
75998: ARRAY
75999: PPUSH
76000: LD_INT 1
76002: PPUSH
76003: CALL_OW 234
// end ;
76007: PPOPN 1
76009: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
76010: LD_EXP 78
76014: PUSH
76015: LD_EXP 126
76019: AND
76020: IFFALSE 76132
76022: GO 76024
76024: DISABLE
76025: LD_INT 0
76027: PPUSH
76028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
76029: LD_ADDR_VAR 0 2
76033: PUSH
76034: LD_INT 22
76036: PUSH
76037: LD_OWVAR 2
76041: PUSH
76042: EMPTY
76043: LIST
76044: LIST
76045: PUSH
76046: LD_INT 2
76048: PUSH
76049: LD_INT 30
76051: PUSH
76052: LD_INT 27
76054: PUSH
76055: EMPTY
76056: LIST
76057: LIST
76058: PUSH
76059: LD_INT 30
76061: PUSH
76062: LD_INT 26
76064: PUSH
76065: EMPTY
76066: LIST
76067: LIST
76068: PUSH
76069: LD_INT 30
76071: PUSH
76072: LD_INT 28
76074: PUSH
76075: EMPTY
76076: LIST
76077: LIST
76078: PUSH
76079: EMPTY
76080: LIST
76081: LIST
76082: LIST
76083: LIST
76084: PUSH
76085: EMPTY
76086: LIST
76087: LIST
76088: PPUSH
76089: CALL_OW 69
76093: ST_TO_ADDR
// if not tmp then
76094: LD_VAR 0 2
76098: NOT
76099: IFFALSE 76103
// exit ;
76101: GO 76132
// for i in tmp do
76103: LD_ADDR_VAR 0 1
76107: PUSH
76108: LD_VAR 0 2
76112: PUSH
76113: FOR_IN
76114: IFFALSE 76130
// SetLives ( i , 1 ) ;
76116: LD_VAR 0 1
76120: PPUSH
76121: LD_INT 1
76123: PPUSH
76124: CALL_OW 234
76128: GO 76113
76130: POP
76131: POP
// end ;
76132: PPOPN 2
76134: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
76135: LD_EXP 78
76139: PUSH
76140: LD_EXP 127
76144: AND
76145: IFFALSE 76432
76147: GO 76149
76149: DISABLE
76150: LD_INT 0
76152: PPUSH
76153: PPUSH
76154: PPUSH
// begin i := rand ( 1 , 7 ) ;
76155: LD_ADDR_VAR 0 1
76159: PUSH
76160: LD_INT 1
76162: PPUSH
76163: LD_INT 7
76165: PPUSH
76166: CALL_OW 12
76170: ST_TO_ADDR
// case i of 1 :
76171: LD_VAR 0 1
76175: PUSH
76176: LD_INT 1
76178: DOUBLE
76179: EQUAL
76180: IFTRUE 76184
76182: GO 76194
76184: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
76185: LD_STRING earthquake(getX(game), 0, 32)
76187: PPUSH
76188: CALL_OW 559
76192: GO 76432
76194: LD_INT 2
76196: DOUBLE
76197: EQUAL
76198: IFTRUE 76202
76200: GO 76216
76202: POP
// begin ToLua ( displayStucuk(); ) ;
76203: LD_STRING displayStucuk();
76205: PPUSH
76206: CALL_OW 559
// ResetFog ;
76210: CALL_OW 335
// end ; 3 :
76214: GO 76432
76216: LD_INT 3
76218: DOUBLE
76219: EQUAL
76220: IFTRUE 76224
76222: GO 76328
76224: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76225: LD_ADDR_VAR 0 2
76229: PUSH
76230: LD_INT 22
76232: PUSH
76233: LD_OWVAR 2
76237: PUSH
76238: EMPTY
76239: LIST
76240: LIST
76241: PUSH
76242: LD_INT 25
76244: PUSH
76245: LD_INT 1
76247: PUSH
76248: EMPTY
76249: LIST
76250: LIST
76251: PUSH
76252: EMPTY
76253: LIST
76254: LIST
76255: PPUSH
76256: CALL_OW 69
76260: ST_TO_ADDR
// if not tmp then
76261: LD_VAR 0 2
76265: NOT
76266: IFFALSE 76270
// exit ;
76268: GO 76432
// un := tmp [ rand ( 1 , tmp ) ] ;
76270: LD_ADDR_VAR 0 3
76274: PUSH
76275: LD_VAR 0 2
76279: PUSH
76280: LD_INT 1
76282: PPUSH
76283: LD_VAR 0 2
76287: PPUSH
76288: CALL_OW 12
76292: ARRAY
76293: ST_TO_ADDR
// if Crawls ( un ) then
76294: LD_VAR 0 3
76298: PPUSH
76299: CALL_OW 318
76303: IFFALSE 76314
// ComWalk ( un ) ;
76305: LD_VAR 0 3
76309: PPUSH
76310: CALL_OW 138
// SetClass ( un , class_mortar ) ;
76314: LD_VAR 0 3
76318: PPUSH
76319: LD_INT 8
76321: PPUSH
76322: CALL_OW 336
// end ; 4 :
76326: GO 76432
76328: LD_INT 4
76330: DOUBLE
76331: EQUAL
76332: IFTRUE 76336
76334: GO 76410
76336: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
76337: LD_ADDR_VAR 0 2
76341: PUSH
76342: LD_INT 22
76344: PUSH
76345: LD_OWVAR 2
76349: PUSH
76350: EMPTY
76351: LIST
76352: LIST
76353: PUSH
76354: LD_INT 30
76356: PUSH
76357: LD_INT 29
76359: PUSH
76360: EMPTY
76361: LIST
76362: LIST
76363: PUSH
76364: EMPTY
76365: LIST
76366: LIST
76367: PPUSH
76368: CALL_OW 69
76372: ST_TO_ADDR
// if not tmp then
76373: LD_VAR 0 2
76377: NOT
76378: IFFALSE 76382
// exit ;
76380: GO 76432
// CenterNowOnUnits ( tmp [ 1 ] ) ;
76382: LD_VAR 0 2
76386: PUSH
76387: LD_INT 1
76389: ARRAY
76390: PPUSH
76391: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
76395: LD_VAR 0 2
76399: PUSH
76400: LD_INT 1
76402: ARRAY
76403: PPUSH
76404: CALL_OW 65
// end ; 5 .. 7 :
76408: GO 76432
76410: LD_INT 5
76412: DOUBLE
76413: GREATEREQUAL
76414: IFFALSE 76422
76416: LD_INT 7
76418: DOUBLE
76419: LESSEQUAL
76420: IFTRUE 76424
76422: GO 76431
76424: POP
// StreamSibBomb ; end ;
76425: CALL 72669 0 0
76429: GO 76432
76431: POP
// end ;
76432: PPOPN 3
76434: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
76435: LD_EXP 78
76439: PUSH
76440: LD_EXP 128
76444: AND
76445: IFFALSE 76601
76447: GO 76449
76449: DISABLE
76450: LD_INT 0
76452: PPUSH
76453: PPUSH
76454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
76455: LD_ADDR_VAR 0 2
76459: PUSH
76460: LD_INT 81
76462: PUSH
76463: LD_OWVAR 2
76467: PUSH
76468: EMPTY
76469: LIST
76470: LIST
76471: PUSH
76472: LD_INT 2
76474: PUSH
76475: LD_INT 21
76477: PUSH
76478: LD_INT 1
76480: PUSH
76481: EMPTY
76482: LIST
76483: LIST
76484: PUSH
76485: LD_INT 21
76487: PUSH
76488: LD_INT 2
76490: PUSH
76491: EMPTY
76492: LIST
76493: LIST
76494: PUSH
76495: EMPTY
76496: LIST
76497: LIST
76498: LIST
76499: PUSH
76500: EMPTY
76501: LIST
76502: LIST
76503: PPUSH
76504: CALL_OW 69
76508: ST_TO_ADDR
// if not tmp then
76509: LD_VAR 0 2
76513: NOT
76514: IFFALSE 76518
// exit ;
76516: GO 76601
// p := 0 ;
76518: LD_ADDR_VAR 0 3
76522: PUSH
76523: LD_INT 0
76525: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76526: LD_INT 35
76528: PPUSH
76529: CALL_OW 67
// p := p + 1 ;
76533: LD_ADDR_VAR 0 3
76537: PUSH
76538: LD_VAR 0 3
76542: PUSH
76543: LD_INT 1
76545: PLUS
76546: ST_TO_ADDR
// for i in tmp do
76547: LD_ADDR_VAR 0 1
76551: PUSH
76552: LD_VAR 0 2
76556: PUSH
76557: FOR_IN
76558: IFFALSE 76589
// if GetLives ( i ) < 1000 then
76560: LD_VAR 0 1
76564: PPUSH
76565: CALL_OW 256
76569: PUSH
76570: LD_INT 1000
76572: LESS
76573: IFFALSE 76587
// SetLives ( i , 1000 ) ;
76575: LD_VAR 0 1
76579: PPUSH
76580: LD_INT 1000
76582: PPUSH
76583: CALL_OW 234
76587: GO 76557
76589: POP
76590: POP
// until p > 20 ;
76591: LD_VAR 0 3
76595: PUSH
76596: LD_INT 20
76598: GREATER
76599: IFFALSE 76526
// end ;
76601: PPOPN 3
76603: END
// every 0 0$1 trigger StreamModeActive and sTime do
76604: LD_EXP 78
76608: PUSH
76609: LD_EXP 129
76613: AND
76614: IFFALSE 76649
76616: GO 76618
76618: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
76619: LD_INT 28
76621: PPUSH
76622: LD_OWVAR 2
76626: PPUSH
76627: LD_INT 2
76629: PPUSH
76630: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
76634: LD_INT 30
76636: PPUSH
76637: LD_OWVAR 2
76641: PPUSH
76642: LD_INT 2
76644: PPUSH
76645: CALL_OW 322
// end ;
76649: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
76650: LD_EXP 78
76654: PUSH
76655: LD_EXP 130
76659: AND
76660: IFFALSE 76781
76662: GO 76664
76664: DISABLE
76665: LD_INT 0
76667: PPUSH
76668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76669: LD_ADDR_VAR 0 2
76673: PUSH
76674: LD_INT 22
76676: PUSH
76677: LD_OWVAR 2
76681: PUSH
76682: EMPTY
76683: LIST
76684: LIST
76685: PUSH
76686: LD_INT 21
76688: PUSH
76689: LD_INT 1
76691: PUSH
76692: EMPTY
76693: LIST
76694: LIST
76695: PUSH
76696: LD_INT 3
76698: PUSH
76699: LD_INT 23
76701: PUSH
76702: LD_INT 0
76704: PUSH
76705: EMPTY
76706: LIST
76707: LIST
76708: PUSH
76709: EMPTY
76710: LIST
76711: LIST
76712: PUSH
76713: EMPTY
76714: LIST
76715: LIST
76716: LIST
76717: PPUSH
76718: CALL_OW 69
76722: ST_TO_ADDR
// if not tmp then
76723: LD_VAR 0 2
76727: NOT
76728: IFFALSE 76732
// exit ;
76730: GO 76781
// for i in tmp do
76732: LD_ADDR_VAR 0 1
76736: PUSH
76737: LD_VAR 0 2
76741: PUSH
76742: FOR_IN
76743: IFFALSE 76779
// begin if Crawls ( i ) then
76745: LD_VAR 0 1
76749: PPUSH
76750: CALL_OW 318
76754: IFFALSE 76765
// ComWalk ( i ) ;
76756: LD_VAR 0 1
76760: PPUSH
76761: CALL_OW 138
// SetClass ( i , 2 ) ;
76765: LD_VAR 0 1
76769: PPUSH
76770: LD_INT 2
76772: PPUSH
76773: CALL_OW 336
// end ;
76777: GO 76742
76779: POP
76780: POP
// end ;
76781: PPOPN 2
76783: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
76784: LD_EXP 78
76788: PUSH
76789: LD_EXP 131
76793: AND
76794: IFFALSE 77082
76796: GO 76798
76798: DISABLE
76799: LD_INT 0
76801: PPUSH
76802: PPUSH
76803: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
76804: LD_OWVAR 2
76808: PPUSH
76809: LD_INT 9
76811: PPUSH
76812: LD_INT 1
76814: PPUSH
76815: LD_INT 1
76817: PPUSH
76818: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
76822: LD_INT 9
76824: PPUSH
76825: LD_OWVAR 2
76829: PPUSH
76830: CALL_OW 343
// uc_side := 9 ;
76834: LD_ADDR_OWVAR 20
76838: PUSH
76839: LD_INT 9
76841: ST_TO_ADDR
// uc_nation := 2 ;
76842: LD_ADDR_OWVAR 21
76846: PUSH
76847: LD_INT 2
76849: ST_TO_ADDR
// hc_name := Dark Warrior ;
76850: LD_ADDR_OWVAR 26
76854: PUSH
76855: LD_STRING Dark Warrior
76857: ST_TO_ADDR
// hc_gallery :=  ;
76858: LD_ADDR_OWVAR 33
76862: PUSH
76863: LD_STRING 
76865: ST_TO_ADDR
// hc_noskilllimit := true ;
76866: LD_ADDR_OWVAR 76
76870: PUSH
76871: LD_INT 1
76873: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
76874: LD_ADDR_OWVAR 31
76878: PUSH
76879: LD_INT 30
76881: PUSH
76882: LD_INT 30
76884: PUSH
76885: LD_INT 30
76887: PUSH
76888: LD_INT 30
76890: PUSH
76891: EMPTY
76892: LIST
76893: LIST
76894: LIST
76895: LIST
76896: ST_TO_ADDR
// un := CreateHuman ;
76897: LD_ADDR_VAR 0 3
76901: PUSH
76902: CALL_OW 44
76906: ST_TO_ADDR
// hc_noskilllimit := false ;
76907: LD_ADDR_OWVAR 76
76911: PUSH
76912: LD_INT 0
76914: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76915: LD_VAR 0 3
76919: PPUSH
76920: LD_INT 1
76922: PPUSH
76923: CALL_OW 51
// ToLua ( playRanger() ) ;
76927: LD_STRING playRanger()
76929: PPUSH
76930: CALL_OW 559
// p := 0 ;
76934: LD_ADDR_VAR 0 2
76938: PUSH
76939: LD_INT 0
76941: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76942: LD_INT 35
76944: PPUSH
76945: CALL_OW 67
// p := p + 1 ;
76949: LD_ADDR_VAR 0 2
76953: PUSH
76954: LD_VAR 0 2
76958: PUSH
76959: LD_INT 1
76961: PLUS
76962: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
76963: LD_VAR 0 3
76967: PPUSH
76968: CALL_OW 256
76972: PUSH
76973: LD_INT 1000
76975: LESS
76976: IFFALSE 76990
// SetLives ( un , 1000 ) ;
76978: LD_VAR 0 3
76982: PPUSH
76983: LD_INT 1000
76985: PPUSH
76986: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
76990: LD_VAR 0 3
76994: PPUSH
76995: LD_INT 81
76997: PUSH
76998: LD_OWVAR 2
77002: PUSH
77003: EMPTY
77004: LIST
77005: LIST
77006: PUSH
77007: LD_INT 91
77009: PUSH
77010: LD_VAR 0 3
77014: PUSH
77015: LD_INT 30
77017: PUSH
77018: EMPTY
77019: LIST
77020: LIST
77021: LIST
77022: PUSH
77023: EMPTY
77024: LIST
77025: LIST
77026: PPUSH
77027: CALL_OW 69
77031: PPUSH
77032: LD_VAR 0 3
77036: PPUSH
77037: CALL_OW 74
77041: PPUSH
77042: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
77046: LD_VAR 0 2
77050: PUSH
77051: LD_INT 80
77053: GREATER
77054: PUSH
77055: LD_VAR 0 3
77059: PPUSH
77060: CALL_OW 301
77064: OR
77065: IFFALSE 76942
// if un then
77067: LD_VAR 0 3
77071: IFFALSE 77082
// RemoveUnit ( un ) ;
77073: LD_VAR 0 3
77077: PPUSH
77078: CALL_OW 64
// end ;
77082: PPOPN 3
77084: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
77085: LD_EXP 132
77089: IFFALSE 77205
77091: GO 77093
77093: DISABLE
77094: LD_INT 0
77096: PPUSH
77097: PPUSH
77098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
77099: LD_ADDR_VAR 0 2
77103: PUSH
77104: LD_INT 81
77106: PUSH
77107: LD_OWVAR 2
77111: PUSH
77112: EMPTY
77113: LIST
77114: LIST
77115: PUSH
77116: LD_INT 21
77118: PUSH
77119: LD_INT 1
77121: PUSH
77122: EMPTY
77123: LIST
77124: LIST
77125: PUSH
77126: EMPTY
77127: LIST
77128: LIST
77129: PPUSH
77130: CALL_OW 69
77134: ST_TO_ADDR
// ToLua ( playComputer() ) ;
77135: LD_STRING playComputer()
77137: PPUSH
77138: CALL_OW 559
// if not tmp then
77142: LD_VAR 0 2
77146: NOT
77147: IFFALSE 77151
// exit ;
77149: GO 77205
// for i in tmp do
77151: LD_ADDR_VAR 0 1
77155: PUSH
77156: LD_VAR 0 2
77160: PUSH
77161: FOR_IN
77162: IFFALSE 77203
// for j := 1 to 4 do
77164: LD_ADDR_VAR 0 3
77168: PUSH
77169: DOUBLE
77170: LD_INT 1
77172: DEC
77173: ST_TO_ADDR
77174: LD_INT 4
77176: PUSH
77177: FOR_TO
77178: IFFALSE 77199
// SetSkill ( i , j , 10 ) ;
77180: LD_VAR 0 1
77184: PPUSH
77185: LD_VAR 0 3
77189: PPUSH
77190: LD_INT 10
77192: PPUSH
77193: CALL_OW 237
77197: GO 77177
77199: POP
77200: POP
77201: GO 77161
77203: POP
77204: POP
// end ;
77205: PPOPN 3
77207: END
// every 0 0$1 trigger s30 do var i , tmp ;
77208: LD_EXP 133
77212: IFFALSE 77281
77214: GO 77216
77216: DISABLE
77217: LD_INT 0
77219: PPUSH
77220: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77221: LD_ADDR_VAR 0 2
77225: PUSH
77226: LD_INT 22
77228: PUSH
77229: LD_OWVAR 2
77233: PUSH
77234: EMPTY
77235: LIST
77236: LIST
77237: PPUSH
77238: CALL_OW 69
77242: ST_TO_ADDR
// if not tmp then
77243: LD_VAR 0 2
77247: NOT
77248: IFFALSE 77252
// exit ;
77250: GO 77281
// for i in tmp do
77252: LD_ADDR_VAR 0 1
77256: PUSH
77257: LD_VAR 0 2
77261: PUSH
77262: FOR_IN
77263: IFFALSE 77279
// SetLives ( i , 300 ) ;
77265: LD_VAR 0 1
77269: PPUSH
77270: LD_INT 300
77272: PPUSH
77273: CALL_OW 234
77277: GO 77262
77279: POP
77280: POP
// end ;
77281: PPOPN 2
77283: END
// every 0 0$1 trigger s60 do var i , tmp ;
77284: LD_EXP 134
77288: IFFALSE 77357
77290: GO 77292
77292: DISABLE
77293: LD_INT 0
77295: PPUSH
77296: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77297: LD_ADDR_VAR 0 2
77301: PUSH
77302: LD_INT 22
77304: PUSH
77305: LD_OWVAR 2
77309: PUSH
77310: EMPTY
77311: LIST
77312: LIST
77313: PPUSH
77314: CALL_OW 69
77318: ST_TO_ADDR
// if not tmp then
77319: LD_VAR 0 2
77323: NOT
77324: IFFALSE 77328
// exit ;
77326: GO 77357
// for i in tmp do
77328: LD_ADDR_VAR 0 1
77332: PUSH
77333: LD_VAR 0 2
77337: PUSH
77338: FOR_IN
77339: IFFALSE 77355
// SetLives ( i , 600 ) ;
77341: LD_VAR 0 1
77345: PPUSH
77346: LD_INT 600
77348: PPUSH
77349: CALL_OW 234
77353: GO 77338
77355: POP
77356: POP
// end ;
77357: PPOPN 2
77359: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
77360: LD_INT 0
77362: PPUSH
// case cmd of 301 :
77363: LD_VAR 0 1
77367: PUSH
77368: LD_INT 301
77370: DOUBLE
77371: EQUAL
77372: IFTRUE 77376
77374: GO 77408
77376: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
77377: LD_VAR 0 6
77381: PPUSH
77382: LD_VAR 0 7
77386: PPUSH
77387: LD_VAR 0 8
77391: PPUSH
77392: LD_VAR 0 4
77396: PPUSH
77397: LD_VAR 0 5
77401: PPUSH
77402: CALL 78609 0 5
77406: GO 77529
77408: LD_INT 302
77410: DOUBLE
77411: EQUAL
77412: IFTRUE 77416
77414: GO 77453
77416: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
77417: LD_VAR 0 6
77421: PPUSH
77422: LD_VAR 0 7
77426: PPUSH
77427: LD_VAR 0 8
77431: PPUSH
77432: LD_VAR 0 9
77436: PPUSH
77437: LD_VAR 0 4
77441: PPUSH
77442: LD_VAR 0 5
77446: PPUSH
77447: CALL 78700 0 6
77451: GO 77529
77453: LD_INT 303
77455: DOUBLE
77456: EQUAL
77457: IFTRUE 77461
77459: GO 77498
77461: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
77462: LD_VAR 0 6
77466: PPUSH
77467: LD_VAR 0 7
77471: PPUSH
77472: LD_VAR 0 8
77476: PPUSH
77477: LD_VAR 0 9
77481: PPUSH
77482: LD_VAR 0 4
77486: PPUSH
77487: LD_VAR 0 5
77491: PPUSH
77492: CALL 77534 0 6
77496: GO 77529
77498: LD_INT 304
77500: DOUBLE
77501: EQUAL
77502: IFTRUE 77506
77504: GO 77528
77506: POP
// hHackTeleport ( unit , x , y ) ; end ;
77507: LD_VAR 0 2
77511: PPUSH
77512: LD_VAR 0 4
77516: PPUSH
77517: LD_VAR 0 5
77521: PPUSH
77522: CALL 79293 0 3
77526: GO 77529
77528: POP
// end ;
77529: LD_VAR 0 12
77533: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
77534: LD_INT 0
77536: PPUSH
77537: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
77538: LD_VAR 0 1
77542: PUSH
77543: LD_INT 1
77545: LESS
77546: PUSH
77547: LD_VAR 0 1
77551: PUSH
77552: LD_INT 3
77554: GREATER
77555: OR
77556: PUSH
77557: LD_VAR 0 5
77561: PPUSH
77562: LD_VAR 0 6
77566: PPUSH
77567: CALL_OW 428
77571: OR
77572: IFFALSE 77576
// exit ;
77574: GO 78296
// uc_side := your_side ;
77576: LD_ADDR_OWVAR 20
77580: PUSH
77581: LD_OWVAR 2
77585: ST_TO_ADDR
// uc_nation := nation ;
77586: LD_ADDR_OWVAR 21
77590: PUSH
77591: LD_VAR 0 1
77595: ST_TO_ADDR
// bc_level = 1 ;
77596: LD_ADDR_OWVAR 43
77600: PUSH
77601: LD_INT 1
77603: ST_TO_ADDR
// case btype of 1 :
77604: LD_VAR 0 2
77608: PUSH
77609: LD_INT 1
77611: DOUBLE
77612: EQUAL
77613: IFTRUE 77617
77615: GO 77628
77617: POP
// bc_type := b_depot ; 2 :
77618: LD_ADDR_OWVAR 42
77622: PUSH
77623: LD_INT 0
77625: ST_TO_ADDR
77626: GO 78240
77628: LD_INT 2
77630: DOUBLE
77631: EQUAL
77632: IFTRUE 77636
77634: GO 77647
77636: POP
// bc_type := b_warehouse ; 3 :
77637: LD_ADDR_OWVAR 42
77641: PUSH
77642: LD_INT 1
77644: ST_TO_ADDR
77645: GO 78240
77647: LD_INT 3
77649: DOUBLE
77650: EQUAL
77651: IFTRUE 77655
77653: GO 77666
77655: POP
// bc_type := b_lab ; 4 .. 9 :
77656: LD_ADDR_OWVAR 42
77660: PUSH
77661: LD_INT 6
77663: ST_TO_ADDR
77664: GO 78240
77666: LD_INT 4
77668: DOUBLE
77669: GREATEREQUAL
77670: IFFALSE 77678
77672: LD_INT 9
77674: DOUBLE
77675: LESSEQUAL
77676: IFTRUE 77680
77678: GO 77732
77680: POP
// begin bc_type := b_lab_half ;
77681: LD_ADDR_OWVAR 42
77685: PUSH
77686: LD_INT 7
77688: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
77689: LD_ADDR_OWVAR 44
77693: PUSH
77694: LD_INT 10
77696: PUSH
77697: LD_INT 11
77699: PUSH
77700: LD_INT 12
77702: PUSH
77703: LD_INT 15
77705: PUSH
77706: LD_INT 14
77708: PUSH
77709: LD_INT 13
77711: PUSH
77712: EMPTY
77713: LIST
77714: LIST
77715: LIST
77716: LIST
77717: LIST
77718: LIST
77719: PUSH
77720: LD_VAR 0 2
77724: PUSH
77725: LD_INT 3
77727: MINUS
77728: ARRAY
77729: ST_TO_ADDR
// end ; 10 .. 13 :
77730: GO 78240
77732: LD_INT 10
77734: DOUBLE
77735: GREATEREQUAL
77736: IFFALSE 77744
77738: LD_INT 13
77740: DOUBLE
77741: LESSEQUAL
77742: IFTRUE 77746
77744: GO 77823
77746: POP
// begin bc_type := b_lab_full ;
77747: LD_ADDR_OWVAR 42
77751: PUSH
77752: LD_INT 8
77754: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
77755: LD_ADDR_OWVAR 44
77759: PUSH
77760: LD_INT 10
77762: PUSH
77763: LD_INT 12
77765: PUSH
77766: LD_INT 14
77768: PUSH
77769: LD_INT 13
77771: PUSH
77772: EMPTY
77773: LIST
77774: LIST
77775: LIST
77776: LIST
77777: PUSH
77778: LD_VAR 0 2
77782: PUSH
77783: LD_INT 9
77785: MINUS
77786: ARRAY
77787: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
77788: LD_ADDR_OWVAR 45
77792: PUSH
77793: LD_INT 11
77795: PUSH
77796: LD_INT 15
77798: PUSH
77799: LD_INT 12
77801: PUSH
77802: LD_INT 15
77804: PUSH
77805: EMPTY
77806: LIST
77807: LIST
77808: LIST
77809: LIST
77810: PUSH
77811: LD_VAR 0 2
77815: PUSH
77816: LD_INT 9
77818: MINUS
77819: ARRAY
77820: ST_TO_ADDR
// end ; 14 :
77821: GO 78240
77823: LD_INT 14
77825: DOUBLE
77826: EQUAL
77827: IFTRUE 77831
77829: GO 77842
77831: POP
// bc_type := b_workshop ; 15 :
77832: LD_ADDR_OWVAR 42
77836: PUSH
77837: LD_INT 2
77839: ST_TO_ADDR
77840: GO 78240
77842: LD_INT 15
77844: DOUBLE
77845: EQUAL
77846: IFTRUE 77850
77848: GO 77861
77850: POP
// bc_type := b_factory ; 16 :
77851: LD_ADDR_OWVAR 42
77855: PUSH
77856: LD_INT 3
77858: ST_TO_ADDR
77859: GO 78240
77861: LD_INT 16
77863: DOUBLE
77864: EQUAL
77865: IFTRUE 77869
77867: GO 77880
77869: POP
// bc_type := b_ext_gun ; 17 :
77870: LD_ADDR_OWVAR 42
77874: PUSH
77875: LD_INT 17
77877: ST_TO_ADDR
77878: GO 78240
77880: LD_INT 17
77882: DOUBLE
77883: EQUAL
77884: IFTRUE 77888
77886: GO 77916
77888: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
77889: LD_ADDR_OWVAR 42
77893: PUSH
77894: LD_INT 19
77896: PUSH
77897: LD_INT 23
77899: PUSH
77900: LD_INT 19
77902: PUSH
77903: EMPTY
77904: LIST
77905: LIST
77906: LIST
77907: PUSH
77908: LD_VAR 0 1
77912: ARRAY
77913: ST_TO_ADDR
77914: GO 78240
77916: LD_INT 18
77918: DOUBLE
77919: EQUAL
77920: IFTRUE 77924
77922: GO 77935
77924: POP
// bc_type := b_ext_radar ; 19 :
77925: LD_ADDR_OWVAR 42
77929: PUSH
77930: LD_INT 20
77932: ST_TO_ADDR
77933: GO 78240
77935: LD_INT 19
77937: DOUBLE
77938: EQUAL
77939: IFTRUE 77943
77941: GO 77954
77943: POP
// bc_type := b_ext_radio ; 20 :
77944: LD_ADDR_OWVAR 42
77948: PUSH
77949: LD_INT 22
77951: ST_TO_ADDR
77952: GO 78240
77954: LD_INT 20
77956: DOUBLE
77957: EQUAL
77958: IFTRUE 77962
77960: GO 77973
77962: POP
// bc_type := b_ext_siberium ; 21 :
77963: LD_ADDR_OWVAR 42
77967: PUSH
77968: LD_INT 21
77970: ST_TO_ADDR
77971: GO 78240
77973: LD_INT 21
77975: DOUBLE
77976: EQUAL
77977: IFTRUE 77981
77979: GO 77992
77981: POP
// bc_type := b_ext_computer ; 22 :
77982: LD_ADDR_OWVAR 42
77986: PUSH
77987: LD_INT 24
77989: ST_TO_ADDR
77990: GO 78240
77992: LD_INT 22
77994: DOUBLE
77995: EQUAL
77996: IFTRUE 78000
77998: GO 78011
78000: POP
// bc_type := b_ext_track ; 23 :
78001: LD_ADDR_OWVAR 42
78005: PUSH
78006: LD_INT 16
78008: ST_TO_ADDR
78009: GO 78240
78011: LD_INT 23
78013: DOUBLE
78014: EQUAL
78015: IFTRUE 78019
78017: GO 78030
78019: POP
// bc_type := b_ext_laser ; 24 :
78020: LD_ADDR_OWVAR 42
78024: PUSH
78025: LD_INT 25
78027: ST_TO_ADDR
78028: GO 78240
78030: LD_INT 24
78032: DOUBLE
78033: EQUAL
78034: IFTRUE 78038
78036: GO 78049
78038: POP
// bc_type := b_control_tower ; 25 :
78039: LD_ADDR_OWVAR 42
78043: PUSH
78044: LD_INT 36
78046: ST_TO_ADDR
78047: GO 78240
78049: LD_INT 25
78051: DOUBLE
78052: EQUAL
78053: IFTRUE 78057
78055: GO 78068
78057: POP
// bc_type := b_breastwork ; 26 :
78058: LD_ADDR_OWVAR 42
78062: PUSH
78063: LD_INT 31
78065: ST_TO_ADDR
78066: GO 78240
78068: LD_INT 26
78070: DOUBLE
78071: EQUAL
78072: IFTRUE 78076
78074: GO 78087
78076: POP
// bc_type := b_bunker ; 27 :
78077: LD_ADDR_OWVAR 42
78081: PUSH
78082: LD_INT 32
78084: ST_TO_ADDR
78085: GO 78240
78087: LD_INT 27
78089: DOUBLE
78090: EQUAL
78091: IFTRUE 78095
78093: GO 78106
78095: POP
// bc_type := b_turret ; 28 :
78096: LD_ADDR_OWVAR 42
78100: PUSH
78101: LD_INT 33
78103: ST_TO_ADDR
78104: GO 78240
78106: LD_INT 28
78108: DOUBLE
78109: EQUAL
78110: IFTRUE 78114
78112: GO 78125
78114: POP
// bc_type := b_armoury ; 29 :
78115: LD_ADDR_OWVAR 42
78119: PUSH
78120: LD_INT 4
78122: ST_TO_ADDR
78123: GO 78240
78125: LD_INT 29
78127: DOUBLE
78128: EQUAL
78129: IFTRUE 78133
78131: GO 78144
78133: POP
// bc_type := b_barracks ; 30 :
78134: LD_ADDR_OWVAR 42
78138: PUSH
78139: LD_INT 5
78141: ST_TO_ADDR
78142: GO 78240
78144: LD_INT 30
78146: DOUBLE
78147: EQUAL
78148: IFTRUE 78152
78150: GO 78163
78152: POP
// bc_type := b_solar_power ; 31 :
78153: LD_ADDR_OWVAR 42
78157: PUSH
78158: LD_INT 27
78160: ST_TO_ADDR
78161: GO 78240
78163: LD_INT 31
78165: DOUBLE
78166: EQUAL
78167: IFTRUE 78171
78169: GO 78182
78171: POP
// bc_type := b_oil_power ; 32 :
78172: LD_ADDR_OWVAR 42
78176: PUSH
78177: LD_INT 26
78179: ST_TO_ADDR
78180: GO 78240
78182: LD_INT 32
78184: DOUBLE
78185: EQUAL
78186: IFTRUE 78190
78188: GO 78201
78190: POP
// bc_type := b_siberite_power ; 33 :
78191: LD_ADDR_OWVAR 42
78195: PUSH
78196: LD_INT 28
78198: ST_TO_ADDR
78199: GO 78240
78201: LD_INT 33
78203: DOUBLE
78204: EQUAL
78205: IFTRUE 78209
78207: GO 78220
78209: POP
// bc_type := b_oil_mine ; 34 :
78210: LD_ADDR_OWVAR 42
78214: PUSH
78215: LD_INT 29
78217: ST_TO_ADDR
78218: GO 78240
78220: LD_INT 34
78222: DOUBLE
78223: EQUAL
78224: IFTRUE 78228
78226: GO 78239
78228: POP
// bc_type := b_siberite_mine ; end ;
78229: LD_ADDR_OWVAR 42
78233: PUSH
78234: LD_INT 30
78236: ST_TO_ADDR
78237: GO 78240
78239: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
78240: LD_ADDR_VAR 0 8
78244: PUSH
78245: LD_VAR 0 5
78249: PPUSH
78250: LD_VAR 0 6
78254: PPUSH
78255: LD_VAR 0 3
78259: PPUSH
78260: CALL_OW 47
78264: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
78265: LD_OWVAR 42
78269: PUSH
78270: LD_INT 32
78272: PUSH
78273: LD_INT 33
78275: PUSH
78276: EMPTY
78277: LIST
78278: LIST
78279: IN
78280: IFFALSE 78296
// PlaceWeaponTurret ( b , weapon ) ;
78282: LD_VAR 0 8
78286: PPUSH
78287: LD_VAR 0 4
78291: PPUSH
78292: CALL_OW 431
// end ;
78296: LD_VAR 0 7
78300: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
78301: LD_INT 0
78303: PPUSH
78304: PPUSH
78305: PPUSH
78306: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
78307: LD_ADDR_VAR 0 4
78311: PUSH
78312: LD_INT 22
78314: PUSH
78315: LD_OWVAR 2
78319: PUSH
78320: EMPTY
78321: LIST
78322: LIST
78323: PUSH
78324: LD_INT 2
78326: PUSH
78327: LD_INT 30
78329: PUSH
78330: LD_INT 0
78332: PUSH
78333: EMPTY
78334: LIST
78335: LIST
78336: PUSH
78337: LD_INT 30
78339: PUSH
78340: LD_INT 1
78342: PUSH
78343: EMPTY
78344: LIST
78345: LIST
78346: PUSH
78347: EMPTY
78348: LIST
78349: LIST
78350: LIST
78351: PUSH
78352: EMPTY
78353: LIST
78354: LIST
78355: PPUSH
78356: CALL_OW 69
78360: ST_TO_ADDR
// if not tmp then
78361: LD_VAR 0 4
78365: NOT
78366: IFFALSE 78370
// exit ;
78368: GO 78429
// for i in tmp do
78370: LD_ADDR_VAR 0 2
78374: PUSH
78375: LD_VAR 0 4
78379: PUSH
78380: FOR_IN
78381: IFFALSE 78427
// for j = 1 to 3 do
78383: LD_ADDR_VAR 0 3
78387: PUSH
78388: DOUBLE
78389: LD_INT 1
78391: DEC
78392: ST_TO_ADDR
78393: LD_INT 3
78395: PUSH
78396: FOR_TO
78397: IFFALSE 78423
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
78399: LD_VAR 0 2
78403: PPUSH
78404: CALL_OW 274
78408: PPUSH
78409: LD_VAR 0 3
78413: PPUSH
78414: LD_INT 99999
78416: PPUSH
78417: CALL_OW 277
78421: GO 78396
78423: POP
78424: POP
78425: GO 78380
78427: POP
78428: POP
// end ;
78429: LD_VAR 0 1
78433: RET
// export function hHackSetLevel10 ; var i , j ; begin
78434: LD_INT 0
78436: PPUSH
78437: PPUSH
78438: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
78439: LD_ADDR_VAR 0 2
78443: PUSH
78444: LD_INT 21
78446: PUSH
78447: LD_INT 1
78449: PUSH
78450: EMPTY
78451: LIST
78452: LIST
78453: PPUSH
78454: CALL_OW 69
78458: PUSH
78459: FOR_IN
78460: IFFALSE 78512
// if IsSelected ( i ) then
78462: LD_VAR 0 2
78466: PPUSH
78467: CALL_OW 306
78471: IFFALSE 78510
// begin for j := 1 to 4 do
78473: LD_ADDR_VAR 0 3
78477: PUSH
78478: DOUBLE
78479: LD_INT 1
78481: DEC
78482: ST_TO_ADDR
78483: LD_INT 4
78485: PUSH
78486: FOR_TO
78487: IFFALSE 78508
// SetSkill ( i , j , 10 ) ;
78489: LD_VAR 0 2
78493: PPUSH
78494: LD_VAR 0 3
78498: PPUSH
78499: LD_INT 10
78501: PPUSH
78502: CALL_OW 237
78506: GO 78486
78508: POP
78509: POP
// end ;
78510: GO 78459
78512: POP
78513: POP
// end ;
78514: LD_VAR 0 1
78518: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
78519: LD_INT 0
78521: PPUSH
78522: PPUSH
78523: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
78524: LD_ADDR_VAR 0 2
78528: PUSH
78529: LD_INT 22
78531: PUSH
78532: LD_OWVAR 2
78536: PUSH
78537: EMPTY
78538: LIST
78539: LIST
78540: PUSH
78541: LD_INT 21
78543: PUSH
78544: LD_INT 1
78546: PUSH
78547: EMPTY
78548: LIST
78549: LIST
78550: PUSH
78551: EMPTY
78552: LIST
78553: LIST
78554: PPUSH
78555: CALL_OW 69
78559: PUSH
78560: FOR_IN
78561: IFFALSE 78602
// begin for j := 1 to 4 do
78563: LD_ADDR_VAR 0 3
78567: PUSH
78568: DOUBLE
78569: LD_INT 1
78571: DEC
78572: ST_TO_ADDR
78573: LD_INT 4
78575: PUSH
78576: FOR_TO
78577: IFFALSE 78598
// SetSkill ( i , j , 10 ) ;
78579: LD_VAR 0 2
78583: PPUSH
78584: LD_VAR 0 3
78588: PPUSH
78589: LD_INT 10
78591: PPUSH
78592: CALL_OW 237
78596: GO 78576
78598: POP
78599: POP
// end ;
78600: GO 78560
78602: POP
78603: POP
// end ;
78604: LD_VAR 0 1
78608: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
78609: LD_INT 0
78611: PPUSH
// uc_side := your_side ;
78612: LD_ADDR_OWVAR 20
78616: PUSH
78617: LD_OWVAR 2
78621: ST_TO_ADDR
// uc_nation := nation ;
78622: LD_ADDR_OWVAR 21
78626: PUSH
78627: LD_VAR 0 1
78631: ST_TO_ADDR
// InitHc ;
78632: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
78636: LD_INT 0
78638: PPUSH
78639: LD_VAR 0 2
78643: PPUSH
78644: LD_VAR 0 3
78648: PPUSH
78649: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
78653: LD_VAR 0 4
78657: PPUSH
78658: LD_VAR 0 5
78662: PPUSH
78663: CALL_OW 428
78667: PUSH
78668: LD_INT 0
78670: EQUAL
78671: IFFALSE 78695
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
78673: CALL_OW 44
78677: PPUSH
78678: LD_VAR 0 4
78682: PPUSH
78683: LD_VAR 0 5
78687: PPUSH
78688: LD_INT 1
78690: PPUSH
78691: CALL_OW 48
// end ;
78695: LD_VAR 0 6
78699: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
78700: LD_INT 0
78702: PPUSH
78703: PPUSH
// uc_side := your_side ;
78704: LD_ADDR_OWVAR 20
78708: PUSH
78709: LD_OWVAR 2
78713: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
78714: LD_VAR 0 1
78718: PUSH
78719: LD_INT 1
78721: PUSH
78722: LD_INT 2
78724: PUSH
78725: LD_INT 3
78727: PUSH
78728: LD_INT 4
78730: PUSH
78731: LD_INT 5
78733: PUSH
78734: EMPTY
78735: LIST
78736: LIST
78737: LIST
78738: LIST
78739: LIST
78740: IN
78741: IFFALSE 78753
// uc_nation := nation_american else
78743: LD_ADDR_OWVAR 21
78747: PUSH
78748: LD_INT 1
78750: ST_TO_ADDR
78751: GO 78796
// if chassis in [ 11 , 12 , 13 , 14 ] then
78753: LD_VAR 0 1
78757: PUSH
78758: LD_INT 11
78760: PUSH
78761: LD_INT 12
78763: PUSH
78764: LD_INT 13
78766: PUSH
78767: LD_INT 14
78769: PUSH
78770: EMPTY
78771: LIST
78772: LIST
78773: LIST
78774: LIST
78775: IN
78776: IFFALSE 78788
// uc_nation := nation_arabian else
78778: LD_ADDR_OWVAR 21
78782: PUSH
78783: LD_INT 2
78785: ST_TO_ADDR
78786: GO 78796
// uc_nation := nation_russian ;
78788: LD_ADDR_OWVAR 21
78792: PUSH
78793: LD_INT 3
78795: ST_TO_ADDR
// vc_chassis := chassis ;
78796: LD_ADDR_OWVAR 37
78800: PUSH
78801: LD_VAR 0 1
78805: ST_TO_ADDR
// vc_engine := engine ;
78806: LD_ADDR_OWVAR 39
78810: PUSH
78811: LD_VAR 0 2
78815: ST_TO_ADDR
// vc_control := control ;
78816: LD_ADDR_OWVAR 38
78820: PUSH
78821: LD_VAR 0 3
78825: ST_TO_ADDR
// vc_weapon := weapon ;
78826: LD_ADDR_OWVAR 40
78830: PUSH
78831: LD_VAR 0 4
78835: ST_TO_ADDR
// un := CreateVehicle ;
78836: LD_ADDR_VAR 0 8
78840: PUSH
78841: CALL_OW 45
78845: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
78846: LD_VAR 0 8
78850: PPUSH
78851: LD_INT 0
78853: PPUSH
78854: LD_INT 5
78856: PPUSH
78857: CALL_OW 12
78861: PPUSH
78862: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
78866: LD_VAR 0 8
78870: PPUSH
78871: LD_VAR 0 5
78875: PPUSH
78876: LD_VAR 0 6
78880: PPUSH
78881: LD_INT 1
78883: PPUSH
78884: CALL_OW 48
// end ;
78888: LD_VAR 0 7
78892: RET
// export hInvincible ; every 1 do
78893: GO 78895
78895: DISABLE
// hInvincible := [ ] ;
78896: LD_ADDR_EXP 135
78900: PUSH
78901: EMPTY
78902: ST_TO_ADDR
78903: END
// every 10 do var i ;
78904: GO 78906
78906: DISABLE
78907: LD_INT 0
78909: PPUSH
// begin enable ;
78910: ENABLE
// if not hInvincible then
78911: LD_EXP 135
78915: NOT
78916: IFFALSE 78920
// exit ;
78918: GO 78964
// for i in hInvincible do
78920: LD_ADDR_VAR 0 1
78924: PUSH
78925: LD_EXP 135
78929: PUSH
78930: FOR_IN
78931: IFFALSE 78962
// if GetLives ( i ) < 1000 then
78933: LD_VAR 0 1
78937: PPUSH
78938: CALL_OW 256
78942: PUSH
78943: LD_INT 1000
78945: LESS
78946: IFFALSE 78960
// SetLives ( i , 1000 ) ;
78948: LD_VAR 0 1
78952: PPUSH
78953: LD_INT 1000
78955: PPUSH
78956: CALL_OW 234
78960: GO 78930
78962: POP
78963: POP
// end ;
78964: PPOPN 1
78966: END
// export function hHackInvincible ; var i ; begin
78967: LD_INT 0
78969: PPUSH
78970: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
78971: LD_ADDR_VAR 0 2
78975: PUSH
78976: LD_INT 2
78978: PUSH
78979: LD_INT 21
78981: PUSH
78982: LD_INT 1
78984: PUSH
78985: EMPTY
78986: LIST
78987: LIST
78988: PUSH
78989: LD_INT 21
78991: PUSH
78992: LD_INT 2
78994: PUSH
78995: EMPTY
78996: LIST
78997: LIST
78998: PUSH
78999: EMPTY
79000: LIST
79001: LIST
79002: LIST
79003: PPUSH
79004: CALL_OW 69
79008: PUSH
79009: FOR_IN
79010: IFFALSE 79071
// if IsSelected ( i ) then
79012: LD_VAR 0 2
79016: PPUSH
79017: CALL_OW 306
79021: IFFALSE 79069
// begin if i in hInvincible then
79023: LD_VAR 0 2
79027: PUSH
79028: LD_EXP 135
79032: IN
79033: IFFALSE 79053
// hInvincible := hInvincible diff i else
79035: LD_ADDR_EXP 135
79039: PUSH
79040: LD_EXP 135
79044: PUSH
79045: LD_VAR 0 2
79049: DIFF
79050: ST_TO_ADDR
79051: GO 79069
// hInvincible := hInvincible union i ;
79053: LD_ADDR_EXP 135
79057: PUSH
79058: LD_EXP 135
79062: PUSH
79063: LD_VAR 0 2
79067: UNION
79068: ST_TO_ADDR
// end ;
79069: GO 79009
79071: POP
79072: POP
// end ;
79073: LD_VAR 0 1
79077: RET
// export function hHackInvisible ; var i , j ; begin
79078: LD_INT 0
79080: PPUSH
79081: PPUSH
79082: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
79083: LD_ADDR_VAR 0 2
79087: PUSH
79088: LD_INT 21
79090: PUSH
79091: LD_INT 1
79093: PUSH
79094: EMPTY
79095: LIST
79096: LIST
79097: PPUSH
79098: CALL_OW 69
79102: PUSH
79103: FOR_IN
79104: IFFALSE 79128
// if IsSelected ( i ) then
79106: LD_VAR 0 2
79110: PPUSH
79111: CALL_OW 306
79115: IFFALSE 79126
// ComForceInvisible ( i ) ;
79117: LD_VAR 0 2
79121: PPUSH
79122: CALL_OW 496
79126: GO 79103
79128: POP
79129: POP
// end ;
79130: LD_VAR 0 1
79134: RET
// export function hHackChangeYourSide ; begin
79135: LD_INT 0
79137: PPUSH
// if your_side = 8 then
79138: LD_OWVAR 2
79142: PUSH
79143: LD_INT 8
79145: EQUAL
79146: IFFALSE 79158
// your_side := 0 else
79148: LD_ADDR_OWVAR 2
79152: PUSH
79153: LD_INT 0
79155: ST_TO_ADDR
79156: GO 79172
// your_side := your_side + 1 ;
79158: LD_ADDR_OWVAR 2
79162: PUSH
79163: LD_OWVAR 2
79167: PUSH
79168: LD_INT 1
79170: PLUS
79171: ST_TO_ADDR
// end ;
79172: LD_VAR 0 1
79176: RET
// export function hHackChangeUnitSide ; var i , j ; begin
79177: LD_INT 0
79179: PPUSH
79180: PPUSH
79181: PPUSH
// for i in all_units do
79182: LD_ADDR_VAR 0 2
79186: PUSH
79187: LD_OWVAR 3
79191: PUSH
79192: FOR_IN
79193: IFFALSE 79271
// if IsSelected ( i ) then
79195: LD_VAR 0 2
79199: PPUSH
79200: CALL_OW 306
79204: IFFALSE 79269
// begin j := GetSide ( i ) ;
79206: LD_ADDR_VAR 0 3
79210: PUSH
79211: LD_VAR 0 2
79215: PPUSH
79216: CALL_OW 255
79220: ST_TO_ADDR
// if j = 8 then
79221: LD_VAR 0 3
79225: PUSH
79226: LD_INT 8
79228: EQUAL
79229: IFFALSE 79241
// j := 0 else
79231: LD_ADDR_VAR 0 3
79235: PUSH
79236: LD_INT 0
79238: ST_TO_ADDR
79239: GO 79255
// j := j + 1 ;
79241: LD_ADDR_VAR 0 3
79245: PUSH
79246: LD_VAR 0 3
79250: PUSH
79251: LD_INT 1
79253: PLUS
79254: ST_TO_ADDR
// SetSide ( i , j ) ;
79255: LD_VAR 0 2
79259: PPUSH
79260: LD_VAR 0 3
79264: PPUSH
79265: CALL_OW 235
// end ;
79269: GO 79192
79271: POP
79272: POP
// end ;
79273: LD_VAR 0 1
79277: RET
// export function hHackFog ; begin
79278: LD_INT 0
79280: PPUSH
// FogOff ( true ) ;
79281: LD_INT 1
79283: PPUSH
79284: CALL_OW 344
// end ;
79288: LD_VAR 0 1
79292: RET
// export function hHackTeleport ( unit , x , y ) ; begin
79293: LD_INT 0
79295: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
79296: LD_VAR 0 1
79300: PPUSH
79301: LD_VAR 0 2
79305: PPUSH
79306: LD_VAR 0 3
79310: PPUSH
79311: LD_INT 1
79313: PPUSH
79314: LD_INT 1
79316: PPUSH
79317: CALL_OW 483
// CenterOnXY ( x , y ) ;
79321: LD_VAR 0 2
79325: PPUSH
79326: LD_VAR 0 3
79330: PPUSH
79331: CALL_OW 84
// end ; end_of_file
79335: LD_VAR 0 4
79339: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79340: LD_VAR 0 1
79344: PUSH
79345: LD_INT 200
79347: DOUBLE
79348: GREATEREQUAL
79349: IFFALSE 79357
79351: LD_INT 299
79353: DOUBLE
79354: LESSEQUAL
79355: IFTRUE 79359
79357: GO 79391
79359: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79360: LD_VAR 0 1
79364: PPUSH
79365: LD_VAR 0 2
79369: PPUSH
79370: LD_VAR 0 3
79374: PPUSH
79375: LD_VAR 0 4
79379: PPUSH
79380: LD_VAR 0 5
79384: PPUSH
79385: CALL 79625 0 5
79389: GO 79468
79391: LD_INT 300
79393: DOUBLE
79394: GREATEREQUAL
79395: IFFALSE 79403
79397: LD_INT 399
79399: DOUBLE
79400: LESSEQUAL
79401: IFTRUE 79405
79403: GO 79467
79405: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79406: LD_VAR 0 1
79410: PPUSH
79411: LD_VAR 0 2
79415: PPUSH
79416: LD_VAR 0 3
79420: PPUSH
79421: LD_VAR 0 4
79425: PPUSH
79426: LD_VAR 0 5
79430: PPUSH
79431: LD_VAR 0 6
79435: PPUSH
79436: LD_VAR 0 7
79440: PPUSH
79441: LD_VAR 0 8
79445: PPUSH
79446: LD_VAR 0 9
79450: PPUSH
79451: LD_VAR 0 10
79455: PPUSH
79456: LD_VAR 0 11
79460: PPUSH
79461: CALL 77360 0 11
79465: GO 79468
79467: POP
// end ;
79468: PPOPN 11
79470: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79471: LD_VAR 0 1
79475: PPUSH
79476: LD_VAR 0 2
79480: PPUSH
79481: LD_VAR 0 3
79485: PPUSH
79486: LD_VAR 0 4
79490: PPUSH
79491: LD_VAR 0 5
79495: PPUSH
79496: CALL 79617 0 5
// end ; end_of_file
79500: PPOPN 5
79502: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
79503: LD_INT 0
79505: PPUSH
79506: PPUSH
79507: PPUSH
79508: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
79509: LD_VAR 0 1
79513: PPUSH
79514: CALL_OW 264
79518: PUSH
79519: LD_EXP 63
79523: EQUAL
79524: IFFALSE 79596
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
79526: LD_INT 68
79528: PPUSH
79529: LD_VAR 0 1
79533: PPUSH
79534: CALL_OW 255
79538: PPUSH
79539: CALL_OW 321
79543: PUSH
79544: LD_INT 2
79546: EQUAL
79547: IFFALSE 79559
// eff := 70 else
79549: LD_ADDR_VAR 0 4
79553: PUSH
79554: LD_INT 70
79556: ST_TO_ADDR
79557: GO 79567
// eff := 30 ;
79559: LD_ADDR_VAR 0 4
79563: PUSH
79564: LD_INT 30
79566: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
79567: LD_VAR 0 1
79571: PPUSH
79572: CALL_OW 250
79576: PPUSH
79577: LD_VAR 0 1
79581: PPUSH
79582: CALL_OW 251
79586: PPUSH
79587: LD_VAR 0 4
79591: PPUSH
79592: CALL_OW 495
// end ; end ;
79596: LD_VAR 0 2
79600: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
79601: LD_INT 0
79603: PPUSH
// end ;
79604: LD_VAR 0 4
79608: RET
// export function SOS_Command ( cmd ) ; begin
79609: LD_INT 0
79611: PPUSH
// end ;
79612: LD_VAR 0 2
79616: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
79617: LD_INT 0
79619: PPUSH
// end ;
79620: LD_VAR 0 6
79624: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
79625: LD_INT 0
79627: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
79628: LD_VAR 0 1
79632: PUSH
79633: LD_INT 250
79635: EQUAL
79636: PUSH
79637: LD_VAR 0 2
79641: PPUSH
79642: CALL_OW 264
79646: PUSH
79647: LD_EXP 66
79651: EQUAL
79652: AND
79653: IFFALSE 79674
// MinerPlaceMine ( unit , x , y ) ;
79655: LD_VAR 0 2
79659: PPUSH
79660: LD_VAR 0 4
79664: PPUSH
79665: LD_VAR 0 5
79669: PPUSH
79670: CALL 82023 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
79674: LD_VAR 0 1
79678: PUSH
79679: LD_INT 251
79681: EQUAL
79682: PUSH
79683: LD_VAR 0 2
79687: PPUSH
79688: CALL_OW 264
79692: PUSH
79693: LD_EXP 66
79697: EQUAL
79698: AND
79699: IFFALSE 79720
// MinerDetonateMine ( unit , x , y ) ;
79701: LD_VAR 0 2
79705: PPUSH
79706: LD_VAR 0 4
79710: PPUSH
79711: LD_VAR 0 5
79715: PPUSH
79716: CALL 82300 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
79720: LD_VAR 0 1
79724: PUSH
79725: LD_INT 252
79727: EQUAL
79728: PUSH
79729: LD_VAR 0 2
79733: PPUSH
79734: CALL_OW 264
79738: PUSH
79739: LD_EXP 66
79743: EQUAL
79744: AND
79745: IFFALSE 79766
// MinerCreateMinefield ( unit , x , y ) ;
79747: LD_VAR 0 2
79751: PPUSH
79752: LD_VAR 0 4
79756: PPUSH
79757: LD_VAR 0 5
79761: PPUSH
79762: CALL 82717 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
79766: LD_VAR 0 1
79770: PUSH
79771: LD_INT 253
79773: EQUAL
79774: PUSH
79775: LD_VAR 0 2
79779: PPUSH
79780: CALL_OW 257
79784: PUSH
79785: LD_INT 5
79787: EQUAL
79788: AND
79789: IFFALSE 79810
// ComBinocular ( unit , x , y ) ;
79791: LD_VAR 0 2
79795: PPUSH
79796: LD_VAR 0 4
79800: PPUSH
79801: LD_VAR 0 5
79805: PPUSH
79806: CALL 83088 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
79810: LD_VAR 0 1
79814: PUSH
79815: LD_INT 254
79817: EQUAL
79818: PUSH
79819: LD_VAR 0 2
79823: PPUSH
79824: CALL_OW 264
79828: PUSH
79829: LD_EXP 61
79833: EQUAL
79834: AND
79835: PUSH
79836: LD_VAR 0 3
79840: PPUSH
79841: CALL_OW 263
79845: PUSH
79846: LD_INT 3
79848: EQUAL
79849: AND
79850: IFFALSE 79866
// HackDestroyVehicle ( unit , selectedUnit ) ;
79852: LD_VAR 0 2
79856: PPUSH
79857: LD_VAR 0 3
79861: PPUSH
79862: CALL 81383 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
79866: LD_VAR 0 1
79870: PUSH
79871: LD_INT 255
79873: EQUAL
79874: PUSH
79875: LD_VAR 0 2
79879: PPUSH
79880: CALL_OW 264
79884: PUSH
79885: LD_INT 14
79887: PUSH
79888: LD_INT 53
79890: PUSH
79891: EMPTY
79892: LIST
79893: LIST
79894: IN
79895: AND
79896: PUSH
79897: LD_VAR 0 4
79901: PPUSH
79902: LD_VAR 0 5
79906: PPUSH
79907: CALL_OW 488
79911: AND
79912: IFFALSE 79936
// CutTreeXYR ( unit , x , y , 12 ) ;
79914: LD_VAR 0 2
79918: PPUSH
79919: LD_VAR 0 4
79923: PPUSH
79924: LD_VAR 0 5
79928: PPUSH
79929: LD_INT 12
79931: PPUSH
79932: CALL 79949 0 4
// end ;
79936: LD_VAR 0 6
79940: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
79941: LD_INT 0
79943: PPUSH
// end ;
79944: LD_VAR 0 4
79948: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
79949: LD_INT 0
79951: PPUSH
79952: PPUSH
79953: PPUSH
79954: PPUSH
79955: PPUSH
79956: PPUSH
79957: PPUSH
79958: PPUSH
79959: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
79960: LD_VAR 0 1
79964: NOT
79965: PUSH
79966: LD_VAR 0 2
79970: PPUSH
79971: LD_VAR 0 3
79975: PPUSH
79976: CALL_OW 488
79980: NOT
79981: OR
79982: PUSH
79983: LD_VAR 0 4
79987: NOT
79988: OR
79989: IFFALSE 79993
// exit ;
79991: GO 80333
// list := [ ] ;
79993: LD_ADDR_VAR 0 13
79997: PUSH
79998: EMPTY
79999: ST_TO_ADDR
// if x - r < 0 then
80000: LD_VAR 0 2
80004: PUSH
80005: LD_VAR 0 4
80009: MINUS
80010: PUSH
80011: LD_INT 0
80013: LESS
80014: IFFALSE 80026
// min_x := 0 else
80016: LD_ADDR_VAR 0 7
80020: PUSH
80021: LD_INT 0
80023: ST_TO_ADDR
80024: GO 80042
// min_x := x - r ;
80026: LD_ADDR_VAR 0 7
80030: PUSH
80031: LD_VAR 0 2
80035: PUSH
80036: LD_VAR 0 4
80040: MINUS
80041: ST_TO_ADDR
// if y - r < 0 then
80042: LD_VAR 0 3
80046: PUSH
80047: LD_VAR 0 4
80051: MINUS
80052: PUSH
80053: LD_INT 0
80055: LESS
80056: IFFALSE 80068
// min_y := 0 else
80058: LD_ADDR_VAR 0 8
80062: PUSH
80063: LD_INT 0
80065: ST_TO_ADDR
80066: GO 80084
// min_y := y - r ;
80068: LD_ADDR_VAR 0 8
80072: PUSH
80073: LD_VAR 0 3
80077: PUSH
80078: LD_VAR 0 4
80082: MINUS
80083: ST_TO_ADDR
// max_x := x + r ;
80084: LD_ADDR_VAR 0 9
80088: PUSH
80089: LD_VAR 0 2
80093: PUSH
80094: LD_VAR 0 4
80098: PLUS
80099: ST_TO_ADDR
// max_y := y + r ;
80100: LD_ADDR_VAR 0 10
80104: PUSH
80105: LD_VAR 0 3
80109: PUSH
80110: LD_VAR 0 4
80114: PLUS
80115: ST_TO_ADDR
// for _x = min_x to max_x do
80116: LD_ADDR_VAR 0 11
80120: PUSH
80121: DOUBLE
80122: LD_VAR 0 7
80126: DEC
80127: ST_TO_ADDR
80128: LD_VAR 0 9
80132: PUSH
80133: FOR_TO
80134: IFFALSE 80251
// for _y = min_y to max_y do
80136: LD_ADDR_VAR 0 12
80140: PUSH
80141: DOUBLE
80142: LD_VAR 0 8
80146: DEC
80147: ST_TO_ADDR
80148: LD_VAR 0 10
80152: PUSH
80153: FOR_TO
80154: IFFALSE 80247
// begin if not ValidHex ( _x , _y ) then
80156: LD_VAR 0 11
80160: PPUSH
80161: LD_VAR 0 12
80165: PPUSH
80166: CALL_OW 488
80170: NOT
80171: IFFALSE 80175
// continue ;
80173: GO 80153
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
80175: LD_VAR 0 11
80179: PPUSH
80180: LD_VAR 0 12
80184: PPUSH
80185: CALL_OW 351
80189: PUSH
80190: LD_VAR 0 11
80194: PPUSH
80195: LD_VAR 0 12
80199: PPUSH
80200: CALL_OW 554
80204: AND
80205: IFFALSE 80245
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
80207: LD_ADDR_VAR 0 13
80211: PUSH
80212: LD_VAR 0 13
80216: PPUSH
80217: LD_VAR 0 13
80221: PUSH
80222: LD_INT 1
80224: PLUS
80225: PPUSH
80226: LD_VAR 0 11
80230: PUSH
80231: LD_VAR 0 12
80235: PUSH
80236: EMPTY
80237: LIST
80238: LIST
80239: PPUSH
80240: CALL_OW 2
80244: ST_TO_ADDR
// end ;
80245: GO 80153
80247: POP
80248: POP
80249: GO 80133
80251: POP
80252: POP
// if not list then
80253: LD_VAR 0 13
80257: NOT
80258: IFFALSE 80262
// exit ;
80260: GO 80333
// for i in list do
80262: LD_ADDR_VAR 0 6
80266: PUSH
80267: LD_VAR 0 13
80271: PUSH
80272: FOR_IN
80273: IFFALSE 80331
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
80275: LD_VAR 0 1
80279: PPUSH
80280: LD_STRING M
80282: PUSH
80283: LD_VAR 0 6
80287: PUSH
80288: LD_INT 1
80290: ARRAY
80291: PUSH
80292: LD_VAR 0 6
80296: PUSH
80297: LD_INT 2
80299: ARRAY
80300: PUSH
80301: LD_INT 0
80303: PUSH
80304: LD_INT 0
80306: PUSH
80307: LD_INT 0
80309: PUSH
80310: LD_INT 0
80312: PUSH
80313: EMPTY
80314: LIST
80315: LIST
80316: LIST
80317: LIST
80318: LIST
80319: LIST
80320: LIST
80321: PUSH
80322: EMPTY
80323: LIST
80324: PPUSH
80325: CALL_OW 447
80329: GO 80272
80331: POP
80332: POP
// end ;
80333: LD_VAR 0 5
80337: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
80338: LD_EXP 138
80342: NOT
80343: IFFALSE 80393
80345: GO 80347
80347: DISABLE
// begin initHack := true ;
80348: LD_ADDR_EXP 138
80352: PUSH
80353: LD_INT 1
80355: ST_TO_ADDR
// hackTanks := [ ] ;
80356: LD_ADDR_EXP 139
80360: PUSH
80361: EMPTY
80362: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
80363: LD_ADDR_EXP 140
80367: PUSH
80368: EMPTY
80369: ST_TO_ADDR
// hackLimit := 3 ;
80370: LD_ADDR_EXP 141
80374: PUSH
80375: LD_INT 3
80377: ST_TO_ADDR
// hackDist := 12 ;
80378: LD_ADDR_EXP 142
80382: PUSH
80383: LD_INT 12
80385: ST_TO_ADDR
// hackCounter := [ ] ;
80386: LD_ADDR_EXP 143
80390: PUSH
80391: EMPTY
80392: ST_TO_ADDR
// end ;
80393: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
80394: LD_EXP 138
80398: PUSH
80399: LD_INT 34
80401: PUSH
80402: LD_EXP 61
80406: PUSH
80407: EMPTY
80408: LIST
80409: LIST
80410: PPUSH
80411: CALL_OW 69
80415: AND
80416: IFFALSE 80671
80418: GO 80420
80420: DISABLE
80421: LD_INT 0
80423: PPUSH
80424: PPUSH
// begin enable ;
80425: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
80426: LD_ADDR_VAR 0 1
80430: PUSH
80431: LD_INT 34
80433: PUSH
80434: LD_EXP 61
80438: PUSH
80439: EMPTY
80440: LIST
80441: LIST
80442: PPUSH
80443: CALL_OW 69
80447: PUSH
80448: FOR_IN
80449: IFFALSE 80669
// begin if not i in hackTanks then
80451: LD_VAR 0 1
80455: PUSH
80456: LD_EXP 139
80460: IN
80461: NOT
80462: IFFALSE 80545
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
80464: LD_ADDR_EXP 139
80468: PUSH
80469: LD_EXP 139
80473: PPUSH
80474: LD_EXP 139
80478: PUSH
80479: LD_INT 1
80481: PLUS
80482: PPUSH
80483: LD_VAR 0 1
80487: PPUSH
80488: CALL_OW 1
80492: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
80493: LD_ADDR_EXP 140
80497: PUSH
80498: LD_EXP 140
80502: PPUSH
80503: LD_EXP 140
80507: PUSH
80508: LD_INT 1
80510: PLUS
80511: PPUSH
80512: EMPTY
80513: PPUSH
80514: CALL_OW 1
80518: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
80519: LD_ADDR_EXP 143
80523: PUSH
80524: LD_EXP 143
80528: PPUSH
80529: LD_EXP 143
80533: PUSH
80534: LD_INT 1
80536: PLUS
80537: PPUSH
80538: EMPTY
80539: PPUSH
80540: CALL_OW 1
80544: ST_TO_ADDR
// end ; if not IsOk ( i ) then
80545: LD_VAR 0 1
80549: PPUSH
80550: CALL_OW 302
80554: NOT
80555: IFFALSE 80568
// begin HackUnlinkAll ( i ) ;
80557: LD_VAR 0 1
80561: PPUSH
80562: CALL 80674 0 1
// continue ;
80566: GO 80448
// end ; HackCheckCapturedStatus ( i ) ;
80568: LD_VAR 0 1
80572: PPUSH
80573: CALL 81117 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
80577: LD_ADDR_VAR 0 2
80581: PUSH
80582: LD_INT 81
80584: PUSH
80585: LD_VAR 0 1
80589: PPUSH
80590: CALL_OW 255
80594: PUSH
80595: EMPTY
80596: LIST
80597: LIST
80598: PUSH
80599: LD_INT 33
80601: PUSH
80602: LD_INT 3
80604: PUSH
80605: EMPTY
80606: LIST
80607: LIST
80608: PUSH
80609: LD_INT 91
80611: PUSH
80612: LD_VAR 0 1
80616: PUSH
80617: LD_EXP 142
80621: PUSH
80622: EMPTY
80623: LIST
80624: LIST
80625: LIST
80626: PUSH
80627: LD_INT 50
80629: PUSH
80630: EMPTY
80631: LIST
80632: PUSH
80633: EMPTY
80634: LIST
80635: LIST
80636: LIST
80637: LIST
80638: PPUSH
80639: CALL_OW 69
80643: ST_TO_ADDR
// if not tmp then
80644: LD_VAR 0 2
80648: NOT
80649: IFFALSE 80653
// continue ;
80651: GO 80448
// HackLink ( i , tmp ) ;
80653: LD_VAR 0 1
80657: PPUSH
80658: LD_VAR 0 2
80662: PPUSH
80663: CALL 80810 0 2
// end ;
80667: GO 80448
80669: POP
80670: POP
// end ;
80671: PPOPN 2
80673: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
80674: LD_INT 0
80676: PPUSH
80677: PPUSH
80678: PPUSH
// if not hack in hackTanks then
80679: LD_VAR 0 1
80683: PUSH
80684: LD_EXP 139
80688: IN
80689: NOT
80690: IFFALSE 80694
// exit ;
80692: GO 80805
// index := GetElementIndex ( hackTanks , hack ) ;
80694: LD_ADDR_VAR 0 4
80698: PUSH
80699: LD_EXP 139
80703: PPUSH
80704: LD_VAR 0 1
80708: PPUSH
80709: CALL 30045 0 2
80713: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
80714: LD_EXP 140
80718: PUSH
80719: LD_VAR 0 4
80723: ARRAY
80724: IFFALSE 80805
// begin for i in hackTanksCaptured [ index ] do
80726: LD_ADDR_VAR 0 3
80730: PUSH
80731: LD_EXP 140
80735: PUSH
80736: LD_VAR 0 4
80740: ARRAY
80741: PUSH
80742: FOR_IN
80743: IFFALSE 80769
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
80745: LD_VAR 0 3
80749: PUSH
80750: LD_INT 1
80752: ARRAY
80753: PPUSH
80754: LD_VAR 0 3
80758: PUSH
80759: LD_INT 2
80761: ARRAY
80762: PPUSH
80763: CALL_OW 235
80767: GO 80742
80769: POP
80770: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
80771: LD_ADDR_EXP 140
80775: PUSH
80776: LD_EXP 140
80780: PPUSH
80781: LD_VAR 0 4
80785: PPUSH
80786: EMPTY
80787: PPUSH
80788: CALL_OW 1
80792: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
80793: LD_VAR 0 1
80797: PPUSH
80798: LD_INT 0
80800: PPUSH
80801: CALL_OW 505
// end ; end ;
80805: LD_VAR 0 2
80809: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
80810: LD_INT 0
80812: PPUSH
80813: PPUSH
80814: PPUSH
// if not hack in hackTanks or not vehicles then
80815: LD_VAR 0 1
80819: PUSH
80820: LD_EXP 139
80824: IN
80825: NOT
80826: PUSH
80827: LD_VAR 0 2
80831: NOT
80832: OR
80833: IFFALSE 80837
// exit ;
80835: GO 81112
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
80837: LD_ADDR_VAR 0 2
80841: PUSH
80842: LD_VAR 0 1
80846: PPUSH
80847: LD_VAR 0 2
80851: PPUSH
80852: LD_INT 1
80854: PPUSH
80855: LD_INT 1
80857: PPUSH
80858: CALL 30695 0 4
80862: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
80863: LD_ADDR_VAR 0 5
80867: PUSH
80868: LD_EXP 139
80872: PPUSH
80873: LD_VAR 0 1
80877: PPUSH
80878: CALL 30045 0 2
80882: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
80883: LD_EXP 140
80887: PUSH
80888: LD_VAR 0 5
80892: ARRAY
80893: PUSH
80894: LD_EXP 141
80898: LESS
80899: IFFALSE 81088
// begin for i := 1 to vehicles do
80901: LD_ADDR_VAR 0 4
80905: PUSH
80906: DOUBLE
80907: LD_INT 1
80909: DEC
80910: ST_TO_ADDR
80911: LD_VAR 0 2
80915: PUSH
80916: FOR_TO
80917: IFFALSE 81086
// begin if hackTanksCaptured [ index ] = hackLimit then
80919: LD_EXP 140
80923: PUSH
80924: LD_VAR 0 5
80928: ARRAY
80929: PUSH
80930: LD_EXP 141
80934: EQUAL
80935: IFFALSE 80939
// break ;
80937: GO 81086
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
80939: LD_ADDR_EXP 143
80943: PUSH
80944: LD_EXP 143
80948: PPUSH
80949: LD_VAR 0 5
80953: PPUSH
80954: LD_EXP 143
80958: PUSH
80959: LD_VAR 0 5
80963: ARRAY
80964: PUSH
80965: LD_INT 1
80967: PLUS
80968: PPUSH
80969: CALL_OW 1
80973: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
80974: LD_ADDR_EXP 140
80978: PUSH
80979: LD_EXP 140
80983: PPUSH
80984: LD_VAR 0 5
80988: PUSH
80989: LD_EXP 140
80993: PUSH
80994: LD_VAR 0 5
80998: ARRAY
80999: PUSH
81000: LD_INT 1
81002: PLUS
81003: PUSH
81004: EMPTY
81005: LIST
81006: LIST
81007: PPUSH
81008: LD_VAR 0 2
81012: PUSH
81013: LD_VAR 0 4
81017: ARRAY
81018: PUSH
81019: LD_VAR 0 2
81023: PUSH
81024: LD_VAR 0 4
81028: ARRAY
81029: PPUSH
81030: CALL_OW 255
81034: PUSH
81035: EMPTY
81036: LIST
81037: LIST
81038: PPUSH
81039: CALL 30260 0 3
81043: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
81044: LD_VAR 0 2
81048: PUSH
81049: LD_VAR 0 4
81053: ARRAY
81054: PPUSH
81055: LD_VAR 0 1
81059: PPUSH
81060: CALL_OW 255
81064: PPUSH
81065: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
81069: LD_VAR 0 2
81073: PUSH
81074: LD_VAR 0 4
81078: ARRAY
81079: PPUSH
81080: CALL_OW 141
// end ;
81084: GO 80916
81086: POP
81087: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
81088: LD_VAR 0 1
81092: PPUSH
81093: LD_EXP 140
81097: PUSH
81098: LD_VAR 0 5
81102: ARRAY
81103: PUSH
81104: LD_INT 0
81106: PLUS
81107: PPUSH
81108: CALL_OW 505
// end ;
81112: LD_VAR 0 3
81116: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
81117: LD_INT 0
81119: PPUSH
81120: PPUSH
81121: PPUSH
81122: PPUSH
// if not hack in hackTanks then
81123: LD_VAR 0 1
81127: PUSH
81128: LD_EXP 139
81132: IN
81133: NOT
81134: IFFALSE 81138
// exit ;
81136: GO 81378
// index := GetElementIndex ( hackTanks , hack ) ;
81138: LD_ADDR_VAR 0 4
81142: PUSH
81143: LD_EXP 139
81147: PPUSH
81148: LD_VAR 0 1
81152: PPUSH
81153: CALL 30045 0 2
81157: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
81158: LD_ADDR_VAR 0 3
81162: PUSH
81163: DOUBLE
81164: LD_EXP 140
81168: PUSH
81169: LD_VAR 0 4
81173: ARRAY
81174: INC
81175: ST_TO_ADDR
81176: LD_INT 1
81178: PUSH
81179: FOR_DOWNTO
81180: IFFALSE 81352
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
81182: LD_ADDR_VAR 0 5
81186: PUSH
81187: LD_EXP 140
81191: PUSH
81192: LD_VAR 0 4
81196: ARRAY
81197: PUSH
81198: LD_VAR 0 3
81202: ARRAY
81203: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
81204: LD_VAR 0 5
81208: PUSH
81209: LD_INT 1
81211: ARRAY
81212: PPUSH
81213: CALL_OW 302
81217: NOT
81218: PUSH
81219: LD_VAR 0 5
81223: PUSH
81224: LD_INT 1
81226: ARRAY
81227: PPUSH
81228: CALL_OW 255
81232: PUSH
81233: LD_VAR 0 1
81237: PPUSH
81238: CALL_OW 255
81242: NONEQUAL
81243: OR
81244: IFFALSE 81350
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
81246: LD_VAR 0 5
81250: PUSH
81251: LD_INT 1
81253: ARRAY
81254: PPUSH
81255: CALL_OW 305
81259: PUSH
81260: LD_VAR 0 5
81264: PUSH
81265: LD_INT 1
81267: ARRAY
81268: PPUSH
81269: CALL_OW 255
81273: PUSH
81274: LD_VAR 0 1
81278: PPUSH
81279: CALL_OW 255
81283: EQUAL
81284: AND
81285: IFFALSE 81309
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
81287: LD_VAR 0 5
81291: PUSH
81292: LD_INT 1
81294: ARRAY
81295: PPUSH
81296: LD_VAR 0 5
81300: PUSH
81301: LD_INT 2
81303: ARRAY
81304: PPUSH
81305: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
81309: LD_ADDR_EXP 140
81313: PUSH
81314: LD_EXP 140
81318: PPUSH
81319: LD_VAR 0 4
81323: PPUSH
81324: LD_EXP 140
81328: PUSH
81329: LD_VAR 0 4
81333: ARRAY
81334: PPUSH
81335: LD_VAR 0 3
81339: PPUSH
81340: CALL_OW 3
81344: PPUSH
81345: CALL_OW 1
81349: ST_TO_ADDR
// end ; end ;
81350: GO 81179
81352: POP
81353: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
81354: LD_VAR 0 1
81358: PPUSH
81359: LD_EXP 140
81363: PUSH
81364: LD_VAR 0 4
81368: ARRAY
81369: PUSH
81370: LD_INT 0
81372: PLUS
81373: PPUSH
81374: CALL_OW 505
// end ;
81378: LD_VAR 0 2
81382: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
81383: LD_INT 0
81385: PPUSH
81386: PPUSH
81387: PPUSH
81388: PPUSH
// if not hack in hackTanks then
81389: LD_VAR 0 1
81393: PUSH
81394: LD_EXP 139
81398: IN
81399: NOT
81400: IFFALSE 81404
// exit ;
81402: GO 81489
// index := GetElementIndex ( hackTanks , hack ) ;
81404: LD_ADDR_VAR 0 5
81408: PUSH
81409: LD_EXP 139
81413: PPUSH
81414: LD_VAR 0 1
81418: PPUSH
81419: CALL 30045 0 2
81423: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
81424: LD_ADDR_VAR 0 4
81428: PUSH
81429: DOUBLE
81430: LD_INT 1
81432: DEC
81433: ST_TO_ADDR
81434: LD_EXP 140
81438: PUSH
81439: LD_VAR 0 5
81443: ARRAY
81444: PUSH
81445: FOR_TO
81446: IFFALSE 81487
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
81448: LD_EXP 140
81452: PUSH
81453: LD_VAR 0 5
81457: ARRAY
81458: PUSH
81459: LD_VAR 0 4
81463: ARRAY
81464: PUSH
81465: LD_INT 1
81467: ARRAY
81468: PUSH
81469: LD_VAR 0 2
81473: EQUAL
81474: IFFALSE 81485
// KillUnit ( vehicle ) ;
81476: LD_VAR 0 2
81480: PPUSH
81481: CALL_OW 66
81485: GO 81445
81487: POP
81488: POP
// end ;
81489: LD_VAR 0 3
81493: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
81494: LD_EXP 144
81498: NOT
81499: IFFALSE 81534
81501: GO 81503
81503: DISABLE
// begin initMiner := true ;
81504: LD_ADDR_EXP 144
81508: PUSH
81509: LD_INT 1
81511: ST_TO_ADDR
// minersList := [ ] ;
81512: LD_ADDR_EXP 145
81516: PUSH
81517: EMPTY
81518: ST_TO_ADDR
// minerMinesList := [ ] ;
81519: LD_ADDR_EXP 146
81523: PUSH
81524: EMPTY
81525: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
81526: LD_ADDR_EXP 147
81530: PUSH
81531: LD_INT 5
81533: ST_TO_ADDR
// end ;
81534: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
81535: LD_EXP 144
81539: PUSH
81540: LD_INT 34
81542: PUSH
81543: LD_EXP 66
81547: PUSH
81548: EMPTY
81549: LIST
81550: LIST
81551: PPUSH
81552: CALL_OW 69
81556: AND
81557: IFFALSE 82020
81559: GO 81561
81561: DISABLE
81562: LD_INT 0
81564: PPUSH
81565: PPUSH
81566: PPUSH
81567: PPUSH
// begin enable ;
81568: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
81569: LD_ADDR_VAR 0 1
81573: PUSH
81574: LD_INT 34
81576: PUSH
81577: LD_EXP 66
81581: PUSH
81582: EMPTY
81583: LIST
81584: LIST
81585: PPUSH
81586: CALL_OW 69
81590: PUSH
81591: FOR_IN
81592: IFFALSE 81664
// begin if not i in minersList then
81594: LD_VAR 0 1
81598: PUSH
81599: LD_EXP 145
81603: IN
81604: NOT
81605: IFFALSE 81662
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
81607: LD_ADDR_EXP 145
81611: PUSH
81612: LD_EXP 145
81616: PPUSH
81617: LD_EXP 145
81621: PUSH
81622: LD_INT 1
81624: PLUS
81625: PPUSH
81626: LD_VAR 0 1
81630: PPUSH
81631: CALL_OW 1
81635: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
81636: LD_ADDR_EXP 146
81640: PUSH
81641: LD_EXP 146
81645: PPUSH
81646: LD_EXP 146
81650: PUSH
81651: LD_INT 1
81653: PLUS
81654: PPUSH
81655: EMPTY
81656: PPUSH
81657: CALL_OW 1
81661: ST_TO_ADDR
// end end ;
81662: GO 81591
81664: POP
81665: POP
// for i := minerMinesList downto 1 do
81666: LD_ADDR_VAR 0 1
81670: PUSH
81671: DOUBLE
81672: LD_EXP 146
81676: INC
81677: ST_TO_ADDR
81678: LD_INT 1
81680: PUSH
81681: FOR_DOWNTO
81682: IFFALSE 82018
// begin if IsLive ( minersList [ i ] ) then
81684: LD_EXP 145
81688: PUSH
81689: LD_VAR 0 1
81693: ARRAY
81694: PPUSH
81695: CALL_OW 300
81699: IFFALSE 81727
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
81701: LD_EXP 145
81705: PUSH
81706: LD_VAR 0 1
81710: ARRAY
81711: PPUSH
81712: LD_EXP 146
81716: PUSH
81717: LD_VAR 0 1
81721: ARRAY
81722: PPUSH
81723: CALL_OW 505
// if not minerMinesList [ i ] then
81727: LD_EXP 146
81731: PUSH
81732: LD_VAR 0 1
81736: ARRAY
81737: NOT
81738: IFFALSE 81742
// continue ;
81740: GO 81681
// for j := minerMinesList [ i ] downto 1 do
81742: LD_ADDR_VAR 0 2
81746: PUSH
81747: DOUBLE
81748: LD_EXP 146
81752: PUSH
81753: LD_VAR 0 1
81757: ARRAY
81758: INC
81759: ST_TO_ADDR
81760: LD_INT 1
81762: PUSH
81763: FOR_DOWNTO
81764: IFFALSE 82014
// begin side := GetSide ( minersList [ i ] ) ;
81766: LD_ADDR_VAR 0 3
81770: PUSH
81771: LD_EXP 145
81775: PUSH
81776: LD_VAR 0 1
81780: ARRAY
81781: PPUSH
81782: CALL_OW 255
81786: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
81787: LD_ADDR_VAR 0 4
81791: PUSH
81792: LD_EXP 146
81796: PUSH
81797: LD_VAR 0 1
81801: ARRAY
81802: PUSH
81803: LD_VAR 0 2
81807: ARRAY
81808: PUSH
81809: LD_INT 1
81811: ARRAY
81812: PPUSH
81813: LD_EXP 146
81817: PUSH
81818: LD_VAR 0 1
81822: ARRAY
81823: PUSH
81824: LD_VAR 0 2
81828: ARRAY
81829: PUSH
81830: LD_INT 2
81832: ARRAY
81833: PPUSH
81834: CALL_OW 428
81838: ST_TO_ADDR
// if not tmp then
81839: LD_VAR 0 4
81843: NOT
81844: IFFALSE 81848
// continue ;
81846: GO 81763
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
81848: LD_VAR 0 4
81852: PUSH
81853: LD_INT 81
81855: PUSH
81856: LD_VAR 0 3
81860: PUSH
81861: EMPTY
81862: LIST
81863: LIST
81864: PPUSH
81865: CALL_OW 69
81869: IN
81870: PUSH
81871: LD_EXP 146
81875: PUSH
81876: LD_VAR 0 1
81880: ARRAY
81881: PUSH
81882: LD_VAR 0 2
81886: ARRAY
81887: PUSH
81888: LD_INT 1
81890: ARRAY
81891: PPUSH
81892: LD_EXP 146
81896: PUSH
81897: LD_VAR 0 1
81901: ARRAY
81902: PUSH
81903: LD_VAR 0 2
81907: ARRAY
81908: PUSH
81909: LD_INT 2
81911: ARRAY
81912: PPUSH
81913: CALL_OW 458
81917: AND
81918: IFFALSE 82012
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
81920: LD_EXP 146
81924: PUSH
81925: LD_VAR 0 1
81929: ARRAY
81930: PUSH
81931: LD_VAR 0 2
81935: ARRAY
81936: PUSH
81937: LD_INT 1
81939: ARRAY
81940: PPUSH
81941: LD_EXP 146
81945: PUSH
81946: LD_VAR 0 1
81950: ARRAY
81951: PUSH
81952: LD_VAR 0 2
81956: ARRAY
81957: PUSH
81958: LD_INT 2
81960: ARRAY
81961: PPUSH
81962: LD_VAR 0 3
81966: PPUSH
81967: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
81971: LD_ADDR_EXP 146
81975: PUSH
81976: LD_EXP 146
81980: PPUSH
81981: LD_VAR 0 1
81985: PPUSH
81986: LD_EXP 146
81990: PUSH
81991: LD_VAR 0 1
81995: ARRAY
81996: PPUSH
81997: LD_VAR 0 2
82001: PPUSH
82002: CALL_OW 3
82006: PPUSH
82007: CALL_OW 1
82011: ST_TO_ADDR
// end ; end ;
82012: GO 81763
82014: POP
82015: POP
// end ;
82016: GO 81681
82018: POP
82019: POP
// end ;
82020: PPOPN 4
82022: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
82023: LD_INT 0
82025: PPUSH
82026: PPUSH
// result := false ;
82027: LD_ADDR_VAR 0 4
82031: PUSH
82032: LD_INT 0
82034: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
82035: LD_VAR 0 1
82039: PPUSH
82040: CALL_OW 264
82044: PUSH
82045: LD_EXP 66
82049: EQUAL
82050: NOT
82051: IFFALSE 82055
// exit ;
82053: GO 82295
// index := GetElementIndex ( minersList , unit ) ;
82055: LD_ADDR_VAR 0 5
82059: PUSH
82060: LD_EXP 145
82064: PPUSH
82065: LD_VAR 0 1
82069: PPUSH
82070: CALL 30045 0 2
82074: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
82075: LD_EXP 146
82079: PUSH
82080: LD_VAR 0 5
82084: ARRAY
82085: PUSH
82086: LD_EXP 147
82090: GREATEREQUAL
82091: IFFALSE 82095
// exit ;
82093: GO 82295
// ComMoveXY ( unit , x , y ) ;
82095: LD_VAR 0 1
82099: PPUSH
82100: LD_VAR 0 2
82104: PPUSH
82105: LD_VAR 0 3
82109: PPUSH
82110: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
82114: LD_INT 35
82116: PPUSH
82117: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
82121: LD_VAR 0 1
82125: PPUSH
82126: LD_VAR 0 2
82130: PPUSH
82131: LD_VAR 0 3
82135: PPUSH
82136: CALL 60817 0 3
82140: NOT
82141: PUSH
82142: LD_VAR 0 1
82146: PPUSH
82147: CALL_OW 314
82151: AND
82152: IFFALSE 82156
// exit ;
82154: GO 82295
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
82156: LD_VAR 0 2
82160: PPUSH
82161: LD_VAR 0 3
82165: PPUSH
82166: CALL_OW 428
82170: PUSH
82171: LD_VAR 0 1
82175: EQUAL
82176: PUSH
82177: LD_VAR 0 1
82181: PPUSH
82182: CALL_OW 314
82186: NOT
82187: AND
82188: IFFALSE 82114
// PlaySoundXY ( x , y , PlantMine ) ;
82190: LD_VAR 0 2
82194: PPUSH
82195: LD_VAR 0 3
82199: PPUSH
82200: LD_STRING PlantMine
82202: PPUSH
82203: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
82207: LD_VAR 0 2
82211: PPUSH
82212: LD_VAR 0 3
82216: PPUSH
82217: LD_VAR 0 1
82221: PPUSH
82222: CALL_OW 255
82226: PPUSH
82227: LD_INT 0
82229: PPUSH
82230: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
82234: LD_ADDR_EXP 146
82238: PUSH
82239: LD_EXP 146
82243: PPUSH
82244: LD_VAR 0 5
82248: PUSH
82249: LD_EXP 146
82253: PUSH
82254: LD_VAR 0 5
82258: ARRAY
82259: PUSH
82260: LD_INT 1
82262: PLUS
82263: PUSH
82264: EMPTY
82265: LIST
82266: LIST
82267: PPUSH
82268: LD_VAR 0 2
82272: PUSH
82273: LD_VAR 0 3
82277: PUSH
82278: EMPTY
82279: LIST
82280: LIST
82281: PPUSH
82282: CALL 30260 0 3
82286: ST_TO_ADDR
// result := true ;
82287: LD_ADDR_VAR 0 4
82291: PUSH
82292: LD_INT 1
82294: ST_TO_ADDR
// end ;
82295: LD_VAR 0 4
82299: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
82300: LD_INT 0
82302: PPUSH
82303: PPUSH
82304: PPUSH
// if not unit in minersList then
82305: LD_VAR 0 1
82309: PUSH
82310: LD_EXP 145
82314: IN
82315: NOT
82316: IFFALSE 82320
// exit ;
82318: GO 82712
// index := GetElementIndex ( minersList , unit ) ;
82320: LD_ADDR_VAR 0 6
82324: PUSH
82325: LD_EXP 145
82329: PPUSH
82330: LD_VAR 0 1
82334: PPUSH
82335: CALL 30045 0 2
82339: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
82340: LD_ADDR_VAR 0 5
82344: PUSH
82345: DOUBLE
82346: LD_EXP 146
82350: PUSH
82351: LD_VAR 0 6
82355: ARRAY
82356: INC
82357: ST_TO_ADDR
82358: LD_INT 1
82360: PUSH
82361: FOR_DOWNTO
82362: IFFALSE 82523
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
82364: LD_EXP 146
82368: PUSH
82369: LD_VAR 0 6
82373: ARRAY
82374: PUSH
82375: LD_VAR 0 5
82379: ARRAY
82380: PUSH
82381: LD_INT 1
82383: ARRAY
82384: PUSH
82385: LD_VAR 0 2
82389: EQUAL
82390: PUSH
82391: LD_EXP 146
82395: PUSH
82396: LD_VAR 0 6
82400: ARRAY
82401: PUSH
82402: LD_VAR 0 5
82406: ARRAY
82407: PUSH
82408: LD_INT 2
82410: ARRAY
82411: PUSH
82412: LD_VAR 0 3
82416: EQUAL
82417: AND
82418: IFFALSE 82521
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
82420: LD_EXP 146
82424: PUSH
82425: LD_VAR 0 6
82429: ARRAY
82430: PUSH
82431: LD_VAR 0 5
82435: ARRAY
82436: PUSH
82437: LD_INT 1
82439: ARRAY
82440: PPUSH
82441: LD_EXP 146
82445: PUSH
82446: LD_VAR 0 6
82450: ARRAY
82451: PUSH
82452: LD_VAR 0 5
82456: ARRAY
82457: PUSH
82458: LD_INT 2
82460: ARRAY
82461: PPUSH
82462: LD_VAR 0 1
82466: PPUSH
82467: CALL_OW 255
82471: PPUSH
82472: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
82476: LD_ADDR_EXP 146
82480: PUSH
82481: LD_EXP 146
82485: PPUSH
82486: LD_VAR 0 6
82490: PPUSH
82491: LD_EXP 146
82495: PUSH
82496: LD_VAR 0 6
82500: ARRAY
82501: PPUSH
82502: LD_VAR 0 5
82506: PPUSH
82507: CALL_OW 3
82511: PPUSH
82512: CALL_OW 1
82516: ST_TO_ADDR
// exit ;
82517: POP
82518: POP
82519: GO 82712
// end ; end ;
82521: GO 82361
82523: POP
82524: POP
// for i := minerMinesList [ index ] downto 1 do
82525: LD_ADDR_VAR 0 5
82529: PUSH
82530: DOUBLE
82531: LD_EXP 146
82535: PUSH
82536: LD_VAR 0 6
82540: ARRAY
82541: INC
82542: ST_TO_ADDR
82543: LD_INT 1
82545: PUSH
82546: FOR_DOWNTO
82547: IFFALSE 82710
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
82549: LD_EXP 146
82553: PUSH
82554: LD_VAR 0 6
82558: ARRAY
82559: PUSH
82560: LD_VAR 0 5
82564: ARRAY
82565: PUSH
82566: LD_INT 1
82568: ARRAY
82569: PPUSH
82570: LD_EXP 146
82574: PUSH
82575: LD_VAR 0 6
82579: ARRAY
82580: PUSH
82581: LD_VAR 0 5
82585: ARRAY
82586: PUSH
82587: LD_INT 2
82589: ARRAY
82590: PPUSH
82591: LD_VAR 0 2
82595: PPUSH
82596: LD_VAR 0 3
82600: PPUSH
82601: CALL_OW 298
82605: PUSH
82606: LD_INT 6
82608: LESS
82609: IFFALSE 82708
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
82611: LD_EXP 146
82615: PUSH
82616: LD_VAR 0 6
82620: ARRAY
82621: PUSH
82622: LD_VAR 0 5
82626: ARRAY
82627: PUSH
82628: LD_INT 1
82630: ARRAY
82631: PPUSH
82632: LD_EXP 146
82636: PUSH
82637: LD_VAR 0 6
82641: ARRAY
82642: PUSH
82643: LD_VAR 0 5
82647: ARRAY
82648: PUSH
82649: LD_INT 2
82651: ARRAY
82652: PPUSH
82653: LD_VAR 0 1
82657: PPUSH
82658: CALL_OW 255
82662: PPUSH
82663: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
82667: LD_ADDR_EXP 146
82671: PUSH
82672: LD_EXP 146
82676: PPUSH
82677: LD_VAR 0 6
82681: PPUSH
82682: LD_EXP 146
82686: PUSH
82687: LD_VAR 0 6
82691: ARRAY
82692: PPUSH
82693: LD_VAR 0 5
82697: PPUSH
82698: CALL_OW 3
82702: PPUSH
82703: CALL_OW 1
82707: ST_TO_ADDR
// end ; end ;
82708: GO 82546
82710: POP
82711: POP
// end ;
82712: LD_VAR 0 4
82716: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
82717: LD_INT 0
82719: PPUSH
82720: PPUSH
82721: PPUSH
82722: PPUSH
82723: PPUSH
82724: PPUSH
82725: PPUSH
82726: PPUSH
82727: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
82728: LD_VAR 0 1
82732: PPUSH
82733: CALL_OW 264
82737: PUSH
82738: LD_EXP 66
82742: EQUAL
82743: NOT
82744: PUSH
82745: LD_VAR 0 1
82749: PUSH
82750: LD_EXP 145
82754: IN
82755: NOT
82756: OR
82757: IFFALSE 82761
// exit ;
82759: GO 83083
// index := GetElementIndex ( minersList , unit ) ;
82761: LD_ADDR_VAR 0 6
82765: PUSH
82766: LD_EXP 145
82770: PPUSH
82771: LD_VAR 0 1
82775: PPUSH
82776: CALL 30045 0 2
82780: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
82781: LD_ADDR_VAR 0 8
82785: PUSH
82786: LD_EXP 147
82790: PUSH
82791: LD_EXP 146
82795: PUSH
82796: LD_VAR 0 6
82800: ARRAY
82801: MINUS
82802: ST_TO_ADDR
// if not minesFreeAmount then
82803: LD_VAR 0 8
82807: NOT
82808: IFFALSE 82812
// exit ;
82810: GO 83083
// tmp := [ ] ;
82812: LD_ADDR_VAR 0 7
82816: PUSH
82817: EMPTY
82818: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
82819: LD_ADDR_VAR 0 5
82823: PUSH
82824: DOUBLE
82825: LD_INT 1
82827: DEC
82828: ST_TO_ADDR
82829: LD_VAR 0 8
82833: PUSH
82834: FOR_TO
82835: IFFALSE 83030
// begin _d := rand ( 0 , 5 ) ;
82837: LD_ADDR_VAR 0 11
82841: PUSH
82842: LD_INT 0
82844: PPUSH
82845: LD_INT 5
82847: PPUSH
82848: CALL_OW 12
82852: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
82853: LD_ADDR_VAR 0 12
82857: PUSH
82858: LD_INT 2
82860: PPUSH
82861: LD_INT 6
82863: PPUSH
82864: CALL_OW 12
82868: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
82869: LD_ADDR_VAR 0 9
82873: PUSH
82874: LD_VAR 0 2
82878: PPUSH
82879: LD_VAR 0 11
82883: PPUSH
82884: LD_VAR 0 12
82888: PPUSH
82889: CALL_OW 272
82893: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
82894: LD_ADDR_VAR 0 10
82898: PUSH
82899: LD_VAR 0 3
82903: PPUSH
82904: LD_VAR 0 11
82908: PPUSH
82909: LD_VAR 0 12
82913: PPUSH
82914: CALL_OW 273
82918: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
82919: LD_VAR 0 9
82923: PPUSH
82924: LD_VAR 0 10
82928: PPUSH
82929: CALL_OW 488
82933: PUSH
82934: LD_VAR 0 9
82938: PUSH
82939: LD_VAR 0 10
82943: PUSH
82944: EMPTY
82945: LIST
82946: LIST
82947: PUSH
82948: LD_VAR 0 7
82952: IN
82953: NOT
82954: AND
82955: PUSH
82956: LD_VAR 0 9
82960: PPUSH
82961: LD_VAR 0 10
82965: PPUSH
82966: CALL_OW 458
82970: NOT
82971: AND
82972: IFFALSE 83014
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
82974: LD_ADDR_VAR 0 7
82978: PUSH
82979: LD_VAR 0 7
82983: PPUSH
82984: LD_VAR 0 7
82988: PUSH
82989: LD_INT 1
82991: PLUS
82992: PPUSH
82993: LD_VAR 0 9
82997: PUSH
82998: LD_VAR 0 10
83002: PUSH
83003: EMPTY
83004: LIST
83005: LIST
83006: PPUSH
83007: CALL_OW 1
83011: ST_TO_ADDR
83012: GO 83028
// i := i - 1 ;
83014: LD_ADDR_VAR 0 5
83018: PUSH
83019: LD_VAR 0 5
83023: PUSH
83024: LD_INT 1
83026: MINUS
83027: ST_TO_ADDR
// end ;
83028: GO 82834
83030: POP
83031: POP
// for i in tmp do
83032: LD_ADDR_VAR 0 5
83036: PUSH
83037: LD_VAR 0 7
83041: PUSH
83042: FOR_IN
83043: IFFALSE 83081
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
83045: LD_VAR 0 1
83049: PPUSH
83050: LD_VAR 0 5
83054: PUSH
83055: LD_INT 1
83057: ARRAY
83058: PPUSH
83059: LD_VAR 0 5
83063: PUSH
83064: LD_INT 2
83066: ARRAY
83067: PPUSH
83068: CALL 82023 0 3
83072: NOT
83073: IFFALSE 83079
// exit ;
83075: POP
83076: POP
83077: GO 83083
83079: GO 83042
83081: POP
83082: POP
// end ;
83083: LD_VAR 0 4
83087: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
83088: LD_INT 0
83090: PPUSH
83091: PPUSH
83092: PPUSH
83093: PPUSH
83094: PPUSH
83095: PPUSH
83096: PPUSH
// if not GetClass ( unit ) = class_sniper then
83097: LD_VAR 0 1
83101: PPUSH
83102: CALL_OW 257
83106: PUSH
83107: LD_INT 5
83109: EQUAL
83110: NOT
83111: IFFALSE 83115
// exit ;
83113: GO 83503
// dist := 8 ;
83115: LD_ADDR_VAR 0 5
83119: PUSH
83120: LD_INT 8
83122: ST_TO_ADDR
// viewRange := 12 ;
83123: LD_ADDR_VAR 0 7
83127: PUSH
83128: LD_INT 12
83130: ST_TO_ADDR
// side := GetSide ( unit ) ;
83131: LD_ADDR_VAR 0 6
83135: PUSH
83136: LD_VAR 0 1
83140: PPUSH
83141: CALL_OW 255
83145: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
83146: LD_INT 61
83148: PPUSH
83149: LD_VAR 0 6
83153: PPUSH
83154: CALL_OW 321
83158: PUSH
83159: LD_INT 2
83161: EQUAL
83162: IFFALSE 83172
// viewRange := 16 ;
83164: LD_ADDR_VAR 0 7
83168: PUSH
83169: LD_INT 16
83171: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
83172: LD_VAR 0 1
83176: PPUSH
83177: LD_VAR 0 2
83181: PPUSH
83182: LD_VAR 0 3
83186: PPUSH
83187: CALL_OW 297
83191: PUSH
83192: LD_VAR 0 5
83196: GREATER
83197: IFFALSE 83276
// begin ComMoveXY ( unit , x , y ) ;
83199: LD_VAR 0 1
83203: PPUSH
83204: LD_VAR 0 2
83208: PPUSH
83209: LD_VAR 0 3
83213: PPUSH
83214: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
83218: LD_INT 35
83220: PPUSH
83221: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
83225: LD_VAR 0 1
83229: PPUSH
83230: LD_VAR 0 2
83234: PPUSH
83235: LD_VAR 0 3
83239: PPUSH
83240: CALL 60817 0 3
83244: NOT
83245: IFFALSE 83249
// exit ;
83247: GO 83503
// until GetDistUnitXY ( unit , x , y ) < dist ;
83249: LD_VAR 0 1
83253: PPUSH
83254: LD_VAR 0 2
83258: PPUSH
83259: LD_VAR 0 3
83263: PPUSH
83264: CALL_OW 297
83268: PUSH
83269: LD_VAR 0 5
83273: LESS
83274: IFFALSE 83218
// end ; ComTurnXY ( unit , x , y ) ;
83276: LD_VAR 0 1
83280: PPUSH
83281: LD_VAR 0 2
83285: PPUSH
83286: LD_VAR 0 3
83290: PPUSH
83291: CALL_OW 118
// wait ( 5 ) ;
83295: LD_INT 5
83297: PPUSH
83298: CALL_OW 67
// _d := GetDir ( unit ) ;
83302: LD_ADDR_VAR 0 10
83306: PUSH
83307: LD_VAR 0 1
83311: PPUSH
83312: CALL_OW 254
83316: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
83317: LD_ADDR_VAR 0 8
83321: PUSH
83322: LD_VAR 0 1
83326: PPUSH
83327: CALL_OW 250
83331: PPUSH
83332: LD_VAR 0 10
83336: PPUSH
83337: LD_VAR 0 5
83341: PPUSH
83342: CALL_OW 272
83346: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
83347: LD_ADDR_VAR 0 9
83351: PUSH
83352: LD_VAR 0 1
83356: PPUSH
83357: CALL_OW 251
83361: PPUSH
83362: LD_VAR 0 10
83366: PPUSH
83367: LD_VAR 0 5
83371: PPUSH
83372: CALL_OW 273
83376: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
83377: LD_VAR 0 8
83381: PPUSH
83382: LD_VAR 0 9
83386: PPUSH
83387: CALL_OW 488
83391: NOT
83392: IFFALSE 83396
// exit ;
83394: GO 83503
// ComAnimCustom ( unit , 1 ) ;
83396: LD_VAR 0 1
83400: PPUSH
83401: LD_INT 1
83403: PPUSH
83404: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
83408: LD_VAR 0 8
83412: PPUSH
83413: LD_VAR 0 9
83417: PPUSH
83418: LD_VAR 0 6
83422: PPUSH
83423: LD_VAR 0 7
83427: PPUSH
83428: CALL_OW 330
// repeat wait ( 1 ) ;
83432: LD_INT 1
83434: PPUSH
83435: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
83439: LD_VAR 0 1
83443: PPUSH
83444: CALL_OW 316
83448: PUSH
83449: LD_VAR 0 1
83453: PPUSH
83454: CALL_OW 314
83458: OR
83459: PUSH
83460: LD_VAR 0 1
83464: PPUSH
83465: CALL_OW 302
83469: NOT
83470: OR
83471: PUSH
83472: LD_VAR 0 1
83476: PPUSH
83477: CALL_OW 301
83481: OR
83482: IFFALSE 83432
// RemoveSeeing ( _x , _y , side ) ;
83484: LD_VAR 0 8
83488: PPUSH
83489: LD_VAR 0 9
83493: PPUSH
83494: LD_VAR 0 6
83498: PPUSH
83499: CALL_OW 331
// end ; end_of_file
83503: LD_VAR 0 4
83507: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83508: LD_VAR 0 1
83512: PPUSH
83513: LD_VAR 0 2
83517: PPUSH
83518: LD_VAR 0 3
83522: PPUSH
83523: LD_VAR 0 4
83527: PPUSH
83528: LD_VAR 0 5
83532: PPUSH
83533: LD_VAR 0 6
83537: PPUSH
83538: CALL 65555 0 6
// end ;
83542: PPOPN 6
83544: END
