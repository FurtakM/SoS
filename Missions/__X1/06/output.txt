// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 10248 0 2
// PrepareArabian ;
  32: CALL 501 0 0
// PrepareRussian ;
  36: CALL 11039 0 0
// Action ;
  40: CALL 19230 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin , buildingsFromPrev , gameActive , rolfAttack , collectedOil ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// buildingsFromPrev := LoadVariable ( 05_Buildings , [ ] ) ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_STRING 05_Buildings
 116: PPUSH
 117: EMPTY
 118: PPUSH
 119: CALL_OW 30
 123: ST_TO_ADDR
// bergkampfArrived := false ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// omarArrived := false ;
 132: LD_ADDR_EXP 6
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// outpostDestroyed := false ;
 140: LD_ADDR_EXP 4
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// ruLoseCounter := 0 ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// rolfScriptBase := false ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// omarScriptBase := false ;
 164: LD_ADDR_EXP 10
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// linkedWithRolf := 0 ;
 172: LD_ADDR_EXP 12
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 180: LD_ADDR_EXP 26
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// rolfDied := false ;
 188: LD_ADDR_EXP 13
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// leninSpotted := false ;
 196: LD_ADDR_EXP 14
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// mortarConstructed := false ;
 204: LD_ADDR_EXP 15
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// rolfHasVehicles := false ;
 212: LD_ADDR_EXP 16
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// leninScriptBase := true ;
 220: LD_ADDR_EXP 11
 224: PUSH
 225: LD_INT 1
 227: ST_TO_ADDR
// rolfWantVehicles := false ;
 228: LD_ADDR_EXP 17
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// omarWantVehicles := false ;
 236: LD_ADDR_EXP 18
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// omarHasVehicles := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// escapeAllowed := false ;
 252: LD_ADDR_EXP 24
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 19
 264: PUSH
 265: LD_INT 31500
 267: PUSH
 268: LD_INT 28350
 270: PUSH
 271: LD_INT 25900
 273: PUSH
 274: LD_INT 24150
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 289: LD_ADDR_EXP 20
 293: PUSH
 294: LD_INT 31500
 296: PUSH
 297: LD_INT 28350
 299: PUSH
 300: LD_INT 25900
 302: PUSH
 303: LD_INT 24150
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: LD_OWVAR 67
 316: ARRAY
 317: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 318: LD_ADDR_EXP 21
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: LD_INT 5
 328: PUSH
 329: LD_INT 6
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_OWVAR 67
 345: ARRAY
 346: ST_TO_ADDR
// omarAttack := false ;
 347: LD_ADDR_EXP 23
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// disableAttackOnHeike := false ;
 355: LD_ADDR_EXP 27
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// escapeTimer := 8 8$30 ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 17850
 370: ST_TO_ADDR
// firstAttack := true ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// canRolfJoin := true ;
 379: LD_ADDR_EXP 29
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// gameActive := false ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 0
 394: ST_TO_ADDR
// rolfAttack := false ;
 395: LD_ADDR_EXP 32
 399: PUSH
 400: LD_INT 0
 402: ST_TO_ADDR
// collectedOil := 0 ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 0
 410: ST_TO_ADDR
// end ;
 411: LD_VAR 0 1
 415: RET
// every 0 0$2 trigger GetSide ( Rolf ) = 2 and IsOk ( Rolf ) and not omarArrived do
 416: LD_EXP 47
 420: PPUSH
 421: CALL_OW 255
 425: PUSH
 426: LD_INT 2
 428: EQUAL
 429: PUSH
 430: LD_EXP 47
 434: PPUSH
 435: CALL_OW 302
 439: AND
 440: PUSH
 441: LD_EXP 6
 445: NOT
 446: AND
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_ROLF ) ;
 452: LD_STRING ACH_ROLF
 454: PPUSH
 455: CALL_OW 543
 459: END
// every 0 0$2 trigger collectedOil >= 300 do
 460: LD_EXP 33
 464: PUSH
 465: LD_INT 300
 467: GREATEREQUAL
 468: IFFALSE 480
 470: GO 472
 472: DISABLE
// SetAchievement ( ACH_OIL ) ;
 473: LD_STRING ACH_OIL
 475: PPUSH
 476: CALL_OW 543
 480: END
// every 0 0$2 trigger IsDead ( ruLenin ) do
 481: LD_INT 52
 483: PPUSH
 484: CALL_OW 301
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_LENIN ) ; end_of_file
 493: LD_STRING ACH_LENIN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , veh , tmp , limiter ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
 506: PPUSH
 507: PPUSH
 508: PPUSH
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
 515: PPUSH
 516: PPUSH
// uc_nation := 2 ;
 517: LD_ADDR_OWVAR 21
 521: PUSH
 522: LD_INT 2
 524: ST_TO_ADDR
// uc_side := 5 ;
 525: LD_ADDR_OWVAR 20
 529: PUSH
 530: LD_INT 5
 532: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 533: LD_ADDR_EXP 42
 537: PUSH
 538: LD_STRING Abdul
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: LD_STRING 
 546: PPUSH
 547: CALL 29437 0 3
 551: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 552: LD_ADDR_EXP 44
 556: PUSH
 557: LD_STRING Omar
 559: PPUSH
 560: LD_INT 0
 562: PPUSH
 563: LD_STRING 
 565: PPUSH
 566: CALL 29437 0 3
 570: ST_TO_ADDR
// uc_side := 2 ;
 571: LD_ADDR_OWVAR 20
 575: PUSH
 576: LD_INT 2
 578: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 579: LD_ADDR_EXP 34
 583: PUSH
 584: LD_STRING Heike
 586: PPUSH
 587: LD_EXP 1
 591: NOT
 592: PPUSH
 593: LD_EXP 2
 597: PPUSH
 598: CALL 29437 0 3
 602: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 603: LD_ADDR_EXP 37
 607: PUSH
 608: LD_STRING Ibrahim
 610: PPUSH
 611: LD_EXP 1
 615: NOT
 616: PPUSH
 617: LD_EXP 2
 621: PPUSH
 622: CALL 29437 0 3
 626: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 627: LD_ADDR_EXP 35
 631: PUSH
 632: LD_STRING Givi
 634: PPUSH
 635: LD_EXP 1
 639: NOT
 640: PPUSH
 641: LD_EXP 2
 645: PPUSH
 646: CALL 29437 0 3
 650: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 651: LD_ADDR_EXP 38
 655: PUSH
 656: LD_STRING Kamil
 658: PPUSH
 659: LD_EXP 1
 663: NOT
 664: PPUSH
 665: LD_EXP 2
 669: PPUSH
 670: CALL 29437 0 3
 674: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 675: LD_ADDR_EXP 39
 679: PUSH
 680: LD_STRING Kaia
 682: PPUSH
 683: LD_EXP 1
 687: NOT
 688: PPUSH
 689: LD_EXP 2
 693: PPUSH
 694: CALL 29437 0 3
 698: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 699: LD_ADDR_EXP 40
 703: PUSH
 704: LD_STRING Sophia
 706: PPUSH
 707: LD_EXP 1
 711: NOT
 712: PPUSH
 713: LD_EXP 2
 717: PPUSH
 718: CALL 29437 0 3
 722: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 723: LD_ADDR_EXP 41
 727: PUSH
 728: LD_STRING Markov
 730: PPUSH
 731: LD_EXP 1
 735: NOT
 736: PPUSH
 737: LD_EXP 2
 741: PPUSH
 742: CALL 29437 0 3
 746: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 747: LD_ADDR_EXP 46
 751: PUSH
 752: LD_STRING Aviradze
 754: PPUSH
 755: LD_EXP 1
 759: NOT
 760: PPUSH
 761: LD_EXP 2
 765: PPUSH
 766: CALL 29437 0 3
 770: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 771: LD_ADDR_EXP 45
 775: PUSH
 776: LD_STRING Kurt
 778: PPUSH
 779: LD_EXP 1
 783: NOT
 784: PPUSH
 785: LD_EXP 2
 789: PPUSH
 790: CALL 29437 0 3
 794: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 795: LD_ADDR_EXP 36
 799: PUSH
 800: LD_STRING Mike
 802: PPUSH
 803: LD_EXP 1
 807: NOT
 808: PPUSH
 809: LD_EXP 2
 813: PPUSH
 814: CALL 29437 0 3
 818: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 819: LD_ADDR_EXP 43
 823: PUSH
 824: LD_STRING Olaf
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_STRING 
 832: PPUSH
 833: CALL 29437 0 3
 837: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 838: LD_ADDR_EXP 49
 842: PUSH
 843: LD_STRING 05_others
 845: PPUSH
 846: CALL_OW 31
 850: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 851: LD_ADDR_EXP 50
 855: PUSH
 856: LD_STRING 05_apes
 858: PPUSH
 859: CALL_OW 31
 863: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_STRING 05_Radar
 871: PPUSH
 872: LD_EXP 1
 876: PPUSH
 877: CALL_OW 30
 881: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 882: LD_ADDR_VAR 0 6
 886: PUSH
 887: LD_STRING 05_RemoteControl
 889: PPUSH
 890: LD_EXP 1
 894: PPUSH
 895: CALL_OW 30
 899: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 900: LD_ADDR_VAR 0 7
 904: PUSH
 905: LD_STRING 05_DrugsTested
 907: PPUSH
 908: LD_EXP 1
 912: PPUSH
 913: CALL_OW 30
 917: ST_TO_ADDR
// if hasDrugs then
 918: LD_VAR 0 7
 922: IFFALSE 937
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 924: LD_INT 5
 926: PPUSH
 927: LD_INT 2
 929: PPUSH
 930: LD_INT 2
 932: PPUSH
 933: CALL_OW 322
// if hasRadar then
 937: LD_VAR 0 5
 941: IFFALSE 956
// SetTech ( tech_radar , 2 , state_researched ) ;
 943: LD_INT 6
 945: PPUSH
 946: LD_INT 2
 948: PPUSH
 949: LD_INT 2
 951: PPUSH
 952: CALL_OW 322
// if hasRemote then
 956: LD_VAR 0 6
 960: IFFALSE 975
// SetTech ( tech_remCont , 2 , state_researched ) ;
 962: LD_INT 15
 964: PPUSH
 965: LD_INT 2
 967: PPUSH
 968: LD_INT 2
 970: PPUSH
 971: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 975: LD_ADDR_VAR 0 13
 979: PUSH
 980: LD_INT 5
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 517
 990: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 991: LD_ADDR_VAR 0 2
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 13
1005: PUSH
1006: LD_INT 1
1008: ARRAY
1009: PUSH
1010: FOR_TO
1011: IFFALSE 1088
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
1013: LD_VAR 0 13
1017: PUSH
1018: LD_INT 1
1020: ARRAY
1021: PUSH
1022: LD_VAR 0 2
1026: ARRAY
1027: PPUSH
1028: LD_VAR 0 13
1032: PUSH
1033: LD_INT 2
1035: ARRAY
1036: PUSH
1037: LD_VAR 0 2
1041: ARRAY
1042: PPUSH
1043: CALL_OW 351
1047: IFFALSE 1086
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
1049: LD_VAR 0 13
1053: PUSH
1054: LD_INT 1
1056: ARRAY
1057: PUSH
1058: LD_VAR 0 2
1062: ARRAY
1063: PPUSH
1064: LD_VAR 0 13
1068: PUSH
1069: LD_INT 2
1071: ARRAY
1072: PUSH
1073: LD_VAR 0 2
1077: ARRAY
1078: PPUSH
1079: LD_INT 2
1081: PPUSH
1082: CALL_OW 244
1086: GO 1010
1088: POP
1089: POP
// base := [ ] ;
1090: LD_ADDR_VAR 0 4
1094: PUSH
1095: EMPTY
1096: ST_TO_ADDR
// if debug then
1097: LD_EXP 1
1101: IFFALSE 1151
// begin base := [ [ b_warehouse , 51 , 77 , 1 , nation_russian , 3 , 0 , 0 , 0 ] , ] ;
1103: LD_ADDR_VAR 0 4
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 51
1113: PUSH
1114: LD_INT 77
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 3
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: LD_INT 0
1128: PUSH
1129: LD_INT 0
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: ST_TO_ADDR
// end else
1149: GO 1167
// if buildingsFromPrev then
1151: LD_EXP 30
1155: IFFALSE 1167
// base := buildingsFromPrev ;
1157: LD_ADDR_VAR 0 4
1161: PUSH
1162: LD_EXP 30
1166: ST_TO_ADDR
// if base then
1167: LD_VAR 0 4
1171: IFFALSE 1369
// for i := 1 to base do
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: DOUBLE
1179: LD_INT 1
1181: DEC
1182: ST_TO_ADDR
1183: LD_VAR 0 4
1187: PUSH
1188: FOR_TO
1189: IFFALSE 1367
// base := Replace ( base , i , [ base [ i ] [ 1 ] , base [ i ] [ 2 ] + 155 , base [ i ] [ 3 ] + 3 , base [ i ] [ 4 ] , base [ i ] [ 5 ] , base [ i ] [ 6 ] , base [ i ] [ 7 ] , base [ i ] [ 8 ] , base [ i ] [ 9 ] ] ) ;
1191: LD_ADDR_VAR 0 4
1195: PUSH
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_VAR 0 2
1205: PPUSH
1206: LD_VAR 0 4
1210: PUSH
1211: LD_VAR 0 2
1215: ARRAY
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_VAR 0 2
1230: ARRAY
1231: PUSH
1232: LD_INT 2
1234: ARRAY
1235: PUSH
1236: LD_INT 155
1238: PLUS
1239: PUSH
1240: LD_VAR 0 4
1244: PUSH
1245: LD_VAR 0 2
1249: ARRAY
1250: PUSH
1251: LD_INT 3
1253: ARRAY
1254: PUSH
1255: LD_INT 3
1257: PLUS
1258: PUSH
1259: LD_VAR 0 4
1263: PUSH
1264: LD_VAR 0 2
1268: ARRAY
1269: PUSH
1270: LD_INT 4
1272: ARRAY
1273: PUSH
1274: LD_VAR 0 4
1278: PUSH
1279: LD_VAR 0 2
1283: ARRAY
1284: PUSH
1285: LD_INT 5
1287: ARRAY
1288: PUSH
1289: LD_VAR 0 4
1293: PUSH
1294: LD_VAR 0 2
1298: ARRAY
1299: PUSH
1300: LD_INT 6
1302: ARRAY
1303: PUSH
1304: LD_VAR 0 4
1308: PUSH
1309: LD_VAR 0 2
1313: ARRAY
1314: PUSH
1315: LD_INT 7
1317: ARRAY
1318: PUSH
1319: LD_VAR 0 4
1323: PUSH
1324: LD_VAR 0 2
1328: ARRAY
1329: PUSH
1330: LD_INT 8
1332: ARRAY
1333: PUSH
1334: LD_VAR 0 4
1338: PUSH
1339: LD_VAR 0 2
1343: ARRAY
1344: PUSH
1345: LD_INT 9
1347: ARRAY
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: PPUSH
1360: CALL_OW 1
1364: ST_TO_ADDR
1365: GO 1188
1367: POP
1368: POP
// base := base ^ [ [ b_depot , 206 , 80 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_bunker , 221 , 95 , 5 , nation_arabian , 3 , 0 , 0 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , nation_arabian , 3 , 0 , 0 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , nation_arabian , 3 , 0 , 0 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_lab_full , 217 , 78 , 4 , nation_arabian , 3 , b_lab_weapon , 0 , 0 ] , [ b_solar_power , 220 , 99 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 103 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 216 , 102 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_gun , 203 , 94 , 0 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_track , 199 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 81 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 78 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ] ;
1369: LD_ADDR_VAR 0 4
1373: PUSH
1374: LD_VAR 0 4
1378: PUSH
1379: LD_INT 0
1381: PUSH
1382: LD_INT 206
1384: PUSH
1385: LD_INT 80
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 2
1393: PUSH
1394: LD_INT 3
1396: PUSH
1397: LD_INT 0
1399: PUSH
1400: LD_INT 0
1402: PUSH
1403: LD_INT 0
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 32
1419: PUSH
1420: LD_INT 221
1422: PUSH
1423: LD_INT 95
1425: PUSH
1426: LD_INT 5
1428: PUSH
1429: LD_INT 2
1431: PUSH
1432: LD_INT 3
1434: PUSH
1435: LD_INT 0
1437: PUSH
1438: LD_INT 0
1440: PUSH
1441: LD_INT 23
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 32
1457: PUSH
1458: LD_INT 223
1460: PUSH
1461: LD_INT 88
1463: PUSH
1464: LD_INT 5
1466: PUSH
1467: LD_INT 2
1469: PUSH
1470: LD_INT 3
1472: PUSH
1473: LD_INT 0
1475: PUSH
1476: LD_INT 0
1478: PUSH
1479: LD_INT 24
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: PUSH
1493: LD_INT 32
1495: PUSH
1496: LD_INT 202
1498: PUSH
1499: LD_INT 64
1501: PUSH
1502: LD_INT 2
1504: PUSH
1505: LD_INT 2
1507: PUSH
1508: LD_INT 3
1510: PUSH
1511: LD_INT 0
1513: PUSH
1514: LD_INT 0
1516: PUSH
1517: LD_INT 25
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 3
1533: PUSH
1534: LD_INT 203
1536: PUSH
1537: LD_INT 91
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 3
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: LD_INT 0
1554: PUSH
1555: LD_INT 0
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 8
1571: PUSH
1572: LD_INT 217
1574: PUSH
1575: LD_INT 78
1577: PUSH
1578: LD_INT 4
1580: PUSH
1581: LD_INT 2
1583: PUSH
1584: LD_INT 3
1586: PUSH
1587: LD_INT 10
1589: PUSH
1590: LD_INT 0
1592: PUSH
1593: LD_INT 0
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 27
1609: PUSH
1610: LD_INT 220
1612: PUSH
1613: LD_INT 99
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 2
1621: PUSH
1622: LD_INT 3
1624: PUSH
1625: LD_INT 0
1627: PUSH
1628: LD_INT 0
1630: PUSH
1631: LD_INT 0
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 27
1647: PUSH
1648: LD_INT 220
1650: PUSH
1651: LD_INT 103
1653: PUSH
1654: LD_INT 1
1656: PUSH
1657: LD_INT 2
1659: PUSH
1660: LD_INT 3
1662: PUSH
1663: LD_INT 0
1665: PUSH
1666: LD_INT 0
1668: PUSH
1669: LD_INT 0
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: PUSH
1683: LD_INT 27
1685: PUSH
1686: LD_INT 216
1688: PUSH
1689: LD_INT 102
1691: PUSH
1692: LD_INT 1
1694: PUSH
1695: LD_INT 2
1697: PUSH
1698: LD_INT 3
1700: PUSH
1701: LD_INT 0
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: LD_INT 0
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 17
1723: PUSH
1724: LD_INT 203
1726: PUSH
1727: LD_INT 94
1729: PUSH
1730: LD_INT 0
1732: PUSH
1733: LD_INT 2
1735: PUSH
1736: LD_INT 3
1738: PUSH
1739: LD_INT 0
1741: PUSH
1742: LD_INT 0
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: LD_INT 23
1761: PUSH
1762: LD_INT 200
1764: PUSH
1765: LD_INT 88
1767: PUSH
1768: LD_INT 2
1770: PUSH
1771: LD_INT 2
1773: PUSH
1774: LD_INT 3
1776: PUSH
1777: LD_INT 0
1779: PUSH
1780: LD_INT 0
1782: PUSH
1783: LD_INT 0
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 16
1799: PUSH
1800: LD_INT 199
1802: PUSH
1803: LD_INT 91
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: LD_INT 2
1811: PUSH
1812: LD_INT 3
1814: PUSH
1815: LD_INT 0
1817: PUSH
1818: LD_INT 0
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 26
1837: PUSH
1838: LD_INT 197
1840: PUSH
1841: LD_INT 81
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 2
1849: PUSH
1850: LD_INT 3
1852: PUSH
1853: LD_INT 0
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 0
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 26
1875: PUSH
1876: LD_INT 197
1878: PUSH
1879: LD_INT 78
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: LD_INT 3
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: LD_INT 0
1896: PUSH
1897: LD_INT 0
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: ADD
1927: ST_TO_ADDR
// if hasRadar then
1928: LD_VAR 0 5
1932: IFFALSE 1996
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1934: LD_ADDR_VAR 0 4
1938: PUSH
1939: LD_VAR 0 4
1943: PPUSH
1944: LD_VAR 0 4
1948: PUSH
1949: LD_INT 1
1951: PLUS
1952: PPUSH
1953: LD_INT 20
1955: PUSH
1956: LD_INT 203
1958: PUSH
1959: LD_INT 87
1961: PUSH
1962: LD_INT 3
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: LD_INT 3
1970: PUSH
1971: LD_INT 0
1973: PUSH
1974: LD_INT 0
1976: PUSH
1977: LD_INT 0
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 1
1995: ST_TO_ADDR
// if hasRemote then
1996: LD_VAR 0 6
2000: IFFALSE 2064
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
2002: LD_ADDR_VAR 0 4
2006: PUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_VAR 0 4
2016: PUSH
2017: LD_INT 1
2019: PLUS
2020: PPUSH
2021: LD_INT 22
2023: PUSH
2024: LD_INT 207
2026: PUSH
2027: LD_INT 95
2029: PUSH
2030: LD_INT 5
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 3
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: LD_INT 0
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: PPUSH
2059: CALL_OW 1
2063: ST_TO_ADDR
// for i in base do
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: LD_VAR 0 4
2073: PUSH
2074: FOR_IN
2075: IFFALSE 2429
// begin if HexInfo ( i [ 2 ] , i [ 3 ] ) then
2077: LD_VAR 0 2
2081: PUSH
2082: LD_INT 2
2084: ARRAY
2085: PPUSH
2086: LD_VAR 0 2
2090: PUSH
2091: LD_INT 3
2093: ARRAY
2094: PPUSH
2095: CALL_OW 428
2099: IFFALSE 2103
// continue ;
2101: GO 2074
// uc_nation := i [ 5 ] ;
2103: LD_ADDR_OWVAR 21
2107: PUSH
2108: LD_VAR 0 2
2112: PUSH
2113: LD_INT 5
2115: ARRAY
2116: ST_TO_ADDR
// InitBc ;
2117: CALL_OW 21
// bc_type := i [ 1 ] ;
2121: LD_ADDR_OWVAR 42
2125: PUSH
2126: LD_VAR 0 2
2130: PUSH
2131: LD_INT 1
2133: ARRAY
2134: ST_TO_ADDR
// bc_level := i [ 6 ] ;
2135: LD_ADDR_OWVAR 43
2139: PUSH
2140: LD_VAR 0 2
2144: PUSH
2145: LD_INT 6
2147: ARRAY
2148: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2149: LD_ADDR_OWVAR 44
2153: PUSH
2154: LD_INT 9
2156: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2157: LD_ADDR_OWVAR 45
2161: PUSH
2162: LD_INT 9
2164: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 5 ] = nation_arabian and not i [ 8 ] then
2165: LD_VAR 0 2
2169: PUSH
2170: LD_INT 1
2172: ARRAY
2173: PUSH
2174: LD_INT 8
2176: EQUAL
2177: PUSH
2178: LD_VAR 0 2
2182: PUSH
2183: LD_INT 5
2185: ARRAY
2186: PUSH
2187: LD_INT 2
2189: EQUAL
2190: AND
2191: PUSH
2192: LD_VAR 0 2
2196: PUSH
2197: LD_INT 8
2199: ARRAY
2200: NOT
2201: AND
2202: IFFALSE 2236
// begin bc_kind1 := b_lab_weapon ;
2204: LD_ADDR_OWVAR 44
2208: PUSH
2209: LD_INT 10
2211: ST_TO_ADDR
// if hasRadar then
2212: LD_VAR 0 5
2216: IFFALSE 2228
// bc_kind2 := b_lab_opto else
2218: LD_ADDR_OWVAR 45
2222: PUSH
2223: LD_INT 15
2225: ST_TO_ADDR
2226: GO 2236
// bc_kind2 := b_lab_basic ;
2228: LD_ADDR_OWVAR 45
2232: PUSH
2233: LD_INT 9
2235: ST_TO_ADDR
// end ; if i [ 1 ] in [ b_lab_half , b_lab_full ] and i [ 7 ] then
2236: LD_VAR 0 2
2240: PUSH
2241: LD_INT 1
2243: ARRAY
2244: PUSH
2245: LD_INT 7
2247: PUSH
2248: LD_INT 8
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: IN
2255: PUSH
2256: LD_VAR 0 2
2260: PUSH
2261: LD_INT 7
2263: ARRAY
2264: AND
2265: IFFALSE 2281
// bc_kind1 := i [ 7 ] ;
2267: LD_ADDR_OWVAR 44
2271: PUSH
2272: LD_VAR 0 2
2276: PUSH
2277: LD_INT 7
2279: ARRAY
2280: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 8 ] then
2281: LD_VAR 0 2
2285: PUSH
2286: LD_INT 1
2288: ARRAY
2289: PUSH
2290: LD_INT 8
2292: EQUAL
2293: PUSH
2294: LD_VAR 0 2
2298: PUSH
2299: LD_INT 8
2301: ARRAY
2302: AND
2303: IFFALSE 2319
// bc_kind1 := i [ 8 ] ;
2305: LD_ADDR_OWVAR 44
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_INT 8
2317: ARRAY
2318: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2319: LD_ADDR_VAR 0 3
2323: PUSH
2324: LD_VAR 0 2
2328: PUSH
2329: LD_INT 2
2331: ARRAY
2332: PPUSH
2333: LD_VAR 0 2
2337: PUSH
2338: LD_INT 3
2340: ARRAY
2341: PPUSH
2342: LD_VAR 0 2
2346: PUSH
2347: LD_INT 4
2349: ARRAY
2350: PPUSH
2351: CALL_OW 47
2355: ST_TO_ADDR
// if i [ 9 ] then
2356: LD_VAR 0 2
2360: PUSH
2361: LD_INT 9
2363: ARRAY
2364: IFFALSE 2384
// PlaceWeaponTurret ( b , i [ 9 ] ) ;
2366: LD_VAR 0 3
2370: PPUSH
2371: LD_VAR 0 2
2375: PUSH
2376: LD_INT 9
2378: ARRAY
2379: PPUSH
2380: CALL_OW 431
// if i [ 1 ] = b_bunker then
2384: LD_VAR 0 2
2388: PUSH
2389: LD_INT 1
2391: ARRAY
2392: PUSH
2393: LD_INT 32
2395: EQUAL
2396: IFFALSE 2427
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
2398: LD_ADDR_VAR 0 11
2402: PUSH
2403: LD_VAR 0 11
2407: PPUSH
2408: LD_VAR 0 11
2412: PUSH
2413: LD_INT 1
2415: PLUS
2416: PPUSH
2417: LD_VAR 0 3
2421: PPUSH
2422: CALL_OW 1
2426: ST_TO_ADDR
// end ;
2427: GO 2074
2429: POP
2430: POP
// depot := HexInfo ( 206 , 80 ) ;
2431: LD_ADDR_VAR 0 9
2435: PUSH
2436: LD_INT 206
2438: PPUSH
2439: LD_INT 80
2441: PPUSH
2442: CALL_OW 428
2446: ST_TO_ADDR
// factory := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) ;
2447: LD_ADDR_VAR 0 8
2451: PUSH
2452: LD_INT 22
2454: PUSH
2455: LD_INT 2
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PUSH
2462: LD_INT 30
2464: PUSH
2465: LD_INT 3
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PPUSH
2476: CALL_OW 69
2480: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2481: LD_ADDR_VAR 0 10
2485: PUSH
2486: LD_INT 22
2488: PUSH
2489: LD_INT 2
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 2
2498: PUSH
2499: LD_INT 30
2501: PUSH
2502: LD_INT 6
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: PUSH
2509: LD_INT 30
2511: PUSH
2512: LD_INT 7
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: PUSH
2519: LD_INT 30
2521: PUSH
2522: LD_INT 8
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PPUSH
2539: CALL_OW 69
2543: ST_TO_ADDR
// arDepot := depot ;
2544: LD_ADDR_EXP 48
2548: PUSH
2549: LD_VAR 0 9
2553: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 190 , 150 ] [ Difficulty ] ) ;
2554: LD_VAR 0 9
2558: PPUSH
2559: CALL_OW 274
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 360
2569: PUSH
2570: LD_INT 260
2572: PUSH
2573: LD_INT 190
2575: PUSH
2576: LD_INT 150
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: PUSH
2585: LD_OWVAR 67
2589: ARRAY
2590: PPUSH
2591: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 150 , 120 ] [ Difficulty ] ) ;
2595: LD_VAR 0 9
2599: PPUSH
2600: CALL_OW 274
2604: PPUSH
2605: LD_INT 2
2607: PPUSH
2608: LD_INT 200
2610: PUSH
2611: LD_INT 170
2613: PUSH
2614: LD_INT 150
2616: PUSH
2617: LD_INT 120
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: PUSH
2626: LD_OWVAR 67
2630: ARRAY
2631: PPUSH
2632: CALL_OW 277
// uc_nation := 2 ;
2636: LD_ADDR_OWVAR 21
2640: PUSH
2641: LD_INT 2
2643: ST_TO_ADDR
// uc_side := 2 ;
2644: LD_ADDR_OWVAR 20
2648: PUSH
2649: LD_INT 2
2651: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
2652: LD_INT 13
2654: PPUSH
2655: LD_INT 1
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: LD_INT 27
2663: PPUSH
2664: LD_INT 33
2666: PPUSH
2667: CALL 34277 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
2671: CALL_OW 45
2675: PPUSH
2676: LD_INT 190
2678: PPUSH
2679: LD_INT 64
2681: PPUSH
2682: LD_INT 5
2684: PPUSH
2685: LD_INT 0
2687: PPUSH
2688: CALL 68898 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
2692: LD_INT 13
2694: PPUSH
2695: LD_INT 1
2697: PPUSH
2698: LD_INT 1
2700: PPUSH
2701: LD_INT 25
2703: PPUSH
2704: LD_INT 22
2706: PPUSH
2707: CALL 34277 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
2711: CALL_OW 45
2715: PPUSH
2716: LD_INT 188
2718: PPUSH
2719: LD_INT 67
2721: PPUSH
2722: LD_INT 5
2724: PPUSH
2725: LD_INT 0
2727: PPUSH
2728: CALL 68898 0 5
// PlaceUnitXY ( Heike , 213 , 87 , false ) ;
2732: LD_EXP 34
2736: PPUSH
2737: LD_INT 213
2739: PPUSH
2740: LD_INT 87
2742: PPUSH
2743: LD_INT 0
2745: PPUSH
2746: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
2750: LD_EXP 34
2754: PPUSH
2755: LD_INT 214
2757: PPUSH
2758: LD_INT 87
2760: PPUSH
2761: CALL_OW 118
// if Kaia then
2765: LD_EXP 39
2769: IFFALSE 2804
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
2771: LD_EXP 39
2775: PPUSH
2776: LD_INT 213
2778: PPUSH
2779: LD_INT 85
2781: PPUSH
2782: LD_INT 0
2784: PPUSH
2785: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
2789: LD_EXP 39
2793: PPUSH
2794: LD_INT 215
2796: PPUSH
2797: LD_INT 87
2799: PPUSH
2800: CALL_OW 118
// end ; if Olaf and Kaia then
2804: LD_EXP 43
2808: PUSH
2809: LD_EXP 39
2813: AND
2814: IFFALSE 2851
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
2816: LD_EXP 43
2820: PPUSH
2821: LD_INT 215
2823: PPUSH
2824: LD_INT 87
2826: PPUSH
2827: LD_INT 0
2829: PPUSH
2830: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
2834: LD_EXP 43
2838: PPUSH
2839: LD_INT 213
2841: PPUSH
2842: LD_INT 85
2844: PPUSH
2845: CALL_OW 118
// end else
2849: GO 2871
// if Olaf then
2851: LD_EXP 43
2855: IFFALSE 2871
// PlaceHumanInUnit ( Olaf , factory ) ;
2857: LD_EXP 43
2861: PPUSH
2862: LD_VAR 0 8
2866: PPUSH
2867: CALL_OW 52
// if Givi then
2871: LD_EXP 35
2875: IFFALSE 2956
// begin if Kaia and Olaf then
2877: LD_EXP 39
2881: PUSH
2882: LD_EXP 43
2886: AND
2887: IFFALSE 2924
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2889: LD_EXP 35
2893: PPUSH
2894: LD_INT 247
2896: PPUSH
2897: LD_INT 117
2899: PPUSH
2900: LD_INT 0
2902: PPUSH
2903: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2907: LD_EXP 35
2911: PPUSH
2912: LD_INT 248
2914: PPUSH
2915: LD_INT 118
2917: PPUSH
2918: CALL_OW 118
// end else
2922: GO 2956
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2924: LD_EXP 35
2928: PPUSH
2929: LD_INT 216
2931: PPUSH
2932: LD_INT 88
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2942: LD_EXP 35
2946: PPUSH
2947: LD_EXP 34
2951: PPUSH
2952: CALL_OW 119
// end ; end ; if Kurt then
2956: LD_EXP 45
2960: IFFALSE 2980
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2962: LD_EXP 45
2966: PPUSH
2967: LD_VAR 0 11
2971: PUSH
2972: LD_INT 2
2974: ARRAY
2975: PPUSH
2976: CALL_OW 52
// if Mike then
2980: LD_EXP 36
2984: IFFALSE 3004
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2986: LD_EXP 36
2990: PPUSH
2991: LD_VAR 0 11
2995: PUSH
2996: LD_INT 3
2998: ARRAY
2999: PPUSH
3000: CALL_OW 52
// if Kamil then
3004: LD_EXP 38
3008: IFFALSE 3070
// begin if Kaia and Olaf then
3010: LD_EXP 39
3014: PUSH
3015: LD_EXP 43
3019: AND
3020: IFFALSE 3038
// PlaceHumanInUnit ( Kamil , depot ) else
3022: LD_EXP 38
3026: PPUSH
3027: LD_VAR 0 9
3031: PPUSH
3032: CALL_OW 52
3036: GO 3070
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
3038: LD_EXP 38
3042: PPUSH
3043: LD_INT 213
3045: PPUSH
3046: LD_INT 87
3048: PPUSH
3049: LD_INT 0
3051: PPUSH
3052: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
3056: LD_EXP 38
3060: PPUSH
3061: LD_EXP 34
3065: PPUSH
3066: CALL_OW 119
// end ; end ; if Sophia then
3070: LD_EXP 40
3074: IFFALSE 3090
// PlaceHumanInUnit ( Sophia , depot ) ;
3076: LD_EXP 40
3080: PPUSH
3081: LD_VAR 0 9
3085: PPUSH
3086: CALL_OW 52
// if Aviradze then
3090: LD_EXP 46
3094: IFFALSE 3143
// if lab then
3096: LD_VAR 0 10
3100: IFFALSE 3122
// PlaceHumanInUnit ( Aviradze , lab [ 1 ] ) else
3102: LD_EXP 46
3106: PPUSH
3107: LD_VAR 0 10
3111: PUSH
3112: LD_INT 1
3114: ARRAY
3115: PPUSH
3116: CALL_OW 52
3120: GO 3143
// PlaceUnitXYR ( Aviradze , 210 , 87 , 3 , false ) ;
3122: LD_EXP 46
3126: PPUSH
3127: LD_INT 210
3129: PPUSH
3130: LD_INT 87
3132: PPUSH
3133: LD_INT 3
3135: PPUSH
3136: LD_INT 0
3138: PPUSH
3139: CALL_OW 50
// if Ibrahim then
3143: LD_EXP 37
3147: IFFALSE 3196
// if lab then
3149: LD_VAR 0 10
3153: IFFALSE 3175
// PlaceHumanInUnit ( Ibrahim , lab [ 1 ] ) else
3155: LD_EXP 37
3159: PPUSH
3160: LD_VAR 0 10
3164: PUSH
3165: LD_INT 1
3167: ARRAY
3168: PPUSH
3169: CALL_OW 52
3173: GO 3196
// PlaceUnitXYR ( Ibrahim , 210 , 87 , 3 , false ) ;
3175: LD_EXP 37
3179: PPUSH
3180: LD_INT 210
3182: PPUSH
3183: LD_INT 87
3185: PPUSH
3186: LD_INT 3
3188: PPUSH
3189: LD_INT 0
3191: PPUSH
3192: CALL_OW 50
// if Markov then
3196: LD_EXP 41
3200: IFFALSE 3249
// if factory then
3202: LD_VAR 0 8
3206: IFFALSE 3228
// PlaceHumanInUnit ( Markov , factory [ 1 ] ) else
3208: LD_EXP 41
3212: PPUSH
3213: LD_VAR 0 8
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: CALL_OW 52
3226: GO 3249
// PlaceUnitXYR ( Markov , 210 , 87 , 3 , false ) ;
3228: LD_EXP 41
3232: PPUSH
3233: LD_INT 210
3235: PPUSH
3236: LD_INT 87
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: LD_INT 0
3244: PPUSH
3245: CALL_OW 50
// if heikeSecondSquad then
3249: LD_EXP 49
3253: IFFALSE 3293
// for i in heikeSecondSquad do
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: LD_EXP 49
3264: PUSH
3265: FOR_IN
3266: IFFALSE 3291
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
3268: LD_VAR 0 2
3272: PPUSH
3273: LD_INT 190
3275: PPUSH
3276: LD_INT 65
3278: PPUSH
3279: LD_INT 5
3281: PPUSH
3282: LD_INT 0
3284: PPUSH
3285: CALL_OW 50
3289: GO 3265
3291: POP
3292: POP
// if heikeApes then
3293: LD_EXP 50
3297: IFFALSE 3337
// for i in heikeApes do
3299: LD_ADDR_VAR 0 2
3303: PUSH
3304: LD_EXP 50
3308: PUSH
3309: FOR_IN
3310: IFFALSE 3335
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
3312: LD_VAR 0 2
3316: PPUSH
3317: LD_INT 190
3319: PPUSH
3320: LD_INT 70
3322: PPUSH
3323: LD_INT 5
3325: PPUSH
3326: LD_INT 0
3328: PPUSH
3329: CALL_OW 50
3333: GO 3309
3335: POP
3336: POP
// tmp := LoadVariable ( 05_Vehicles , [ ] ) ;
3337: LD_ADDR_VAR 0 13
3341: PUSH
3342: LD_STRING 05_Vehicles
3344: PPUSH
3345: EMPTY
3346: PPUSH
3347: CALL_OW 30
3351: ST_TO_ADDR
// if tmp then
3352: LD_VAR 0 13
3356: IFFALSE 3526
// begin limiter := 10 ;
3358: LD_ADDR_VAR 0 14
3362: PUSH
3363: LD_INT 10
3365: ST_TO_ADDR
// for i in tmp do
3366: LD_ADDR_VAR 0 2
3370: PUSH
3371: LD_VAR 0 13
3375: PUSH
3376: FOR_IN
3377: IFFALSE 3524
// begin limiter := Dec ( limiter ) ;
3379: LD_ADDR_VAR 0 14
3383: PUSH
3384: LD_VAR 0 14
3388: PPUSH
3389: CALL 68141 0 1
3393: ST_TO_ADDR
// if limiter = 0 then
3394: LD_VAR 0 14
3398: PUSH
3399: LD_INT 0
3401: EQUAL
3402: IFFALSE 3406
// break ;
3404: GO 3524
// uc_side := 2 ;
3406: LD_ADDR_OWVAR 20
3410: PUSH
3411: LD_INT 2
3413: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
3414: LD_ADDR_OWVAR 21
3418: PUSH
3419: LD_VAR 0 2
3423: PUSH
3424: LD_INT 5
3426: ARRAY
3427: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 20 ) ;
3428: LD_VAR 0 2
3432: PUSH
3433: LD_INT 1
3435: ARRAY
3436: PPUSH
3437: LD_VAR 0 2
3441: PUSH
3442: LD_INT 2
3444: ARRAY
3445: PPUSH
3446: LD_VAR 0 2
3450: PUSH
3451: LD_INT 3
3453: ARRAY
3454: PPUSH
3455: LD_VAR 0 2
3459: PUSH
3460: LD_INT 4
3462: ARRAY
3463: PPUSH
3464: LD_INT 20
3466: PPUSH
3467: CALL 34277 0 5
// veh := CreateVehicle ;
3471: LD_ADDR_VAR 0 12
3475: PUSH
3476: CALL_OW 45
3480: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
3481: LD_VAR 0 12
3485: PPUSH
3486: LD_INT 0
3488: PPUSH
3489: LD_INT 5
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: CALL_OW 233
// PlaceUnitXYR ( veh , 252 , 111 , 8 , false ) ;
3501: LD_VAR 0 12
3505: PPUSH
3506: LD_INT 252
3508: PPUSH
3509: LD_INT 111
3511: PPUSH
3512: LD_INT 8
3514: PPUSH
3515: LD_INT 0
3517: PPUSH
3518: CALL_OW 50
// end ;
3522: GO 3376
3524: POP
3525: POP
// end ; end ;
3526: LD_VAR 0 1
3530: RET
// export function PrepareRolfSquad ; var i , j ; begin
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
3535: PPUSH
// uc_side := 8 ;
3536: LD_ADDR_OWVAR 20
3540: PUSH
3541: LD_INT 8
3543: ST_TO_ADDR
// uc_nation := 2 ;
3544: LD_ADDR_OWVAR 21
3548: PUSH
3549: LD_INT 2
3551: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
3552: LD_ADDR_EXP 47
3556: PUSH
3557: LD_STRING Bergkamp
3559: PPUSH
3560: CALL_OW 25
3564: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
3565: LD_ADDR_EXP 51
3569: PUSH
3570: LD_EXP 47
3574: PUSH
3575: EMPTY
3576: LIST
3577: ST_TO_ADDR
// for i := 1 to 4 do
3578: LD_ADDR_VAR 0 2
3582: PUSH
3583: DOUBLE
3584: LD_INT 1
3586: DEC
3587: ST_TO_ADDR
3588: LD_INT 4
3590: PUSH
3591: FOR_TO
3592: IFFALSE 3672
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
3594: LD_ADDR_VAR 0 3
3598: PUSH
3599: DOUBLE
3600: LD_INT 1
3602: DEC
3603: ST_TO_ADDR
3604: LD_INT 5
3606: PUSH
3607: LD_INT 2
3609: PUSH
3610: LD_INT 3
3612: PUSH
3613: LD_INT 1
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_VAR 0 2
3626: ARRAY
3627: PUSH
3628: FOR_TO
3629: IFFALSE 3668
// begin PrepareHuman ( false , i , 5 ) ;
3631: LD_INT 0
3633: PPUSH
3634: LD_VAR 0 2
3638: PPUSH
3639: LD_INT 5
3641: PPUSH
3642: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
3646: LD_ADDR_EXP 51
3650: PUSH
3651: LD_EXP 51
3655: PPUSH
3656: CALL_OW 44
3660: PPUSH
3661: CALL 66758 0 2
3665: ST_TO_ADDR
// end ;
3666: GO 3628
3668: POP
3669: POP
// end ;
3670: GO 3591
3672: POP
3673: POP
// if HexInfo ( 5 , 3 ) then
3674: LD_INT 5
3676: PPUSH
3677: LD_INT 3
3679: PPUSH
3680: CALL_OW 428
3684: IFFALSE 3701
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
3686: LD_INT 5
3688: PPUSH
3689: LD_INT 3
3691: PPUSH
3692: CALL_OW 428
3696: PPUSH
3697: CALL_OW 64
// for i in rolfSquad do
3701: LD_ADDR_VAR 0 2
3705: PUSH
3706: LD_EXP 51
3710: PUSH
3711: FOR_IN
3712: IFFALSE 3848
// begin uc_direction := 2 ;
3714: LD_ADDR_OWVAR 24
3718: PUSH
3719: LD_INT 2
3721: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
3722: LD_VAR 0 2
3726: PPUSH
3727: CALL_OW 257
3731: PUSH
3732: LD_INT 3
3734: EQUAL
3735: IFFALSE 3809
// begin uc_side := 8 ;
3737: LD_ADDR_OWVAR 20
3741: PUSH
3742: LD_INT 8
3744: ST_TO_ADDR
// uc_nation := 2 ;
3745: LD_ADDR_OWVAR 21
3749: PUSH
3750: LD_INT 2
3752: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
3753: LD_INT 13
3755: PPUSH
3756: LD_INT 1
3758: PPUSH
3759: LD_INT 1
3761: PPUSH
3762: LD_INT 27
3764: PPUSH
3765: LD_INT 88
3767: PPUSH
3768: CALL 34277 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
3772: CALL_OW 45
3776: PPUSH
3777: LD_INT 11
3779: PPUSH
3780: LD_INT 0
3782: PPUSH
3783: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_INT 5
3794: PPUSH
3795: LD_INT 3
3797: PPUSH
3798: CALL_OW 428
3802: PPUSH
3803: CALL_OW 52
// end else
3807: GO 3824
// PlaceUnitArea ( i , northSpawn , false ) ;
3809: LD_VAR 0 2
3813: PPUSH
3814: LD_INT 11
3816: PPUSH
3817: LD_INT 0
3819: PPUSH
3820: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
3824: LD_VAR 0 2
3828: PPUSH
3829: LD_INT 29
3831: PPUSH
3832: LD_INT 10
3834: PPUSH
3835: CALL_OW 111
// wait ( 0 0$2 ) ;
3839: LD_INT 70
3841: PPUSH
3842: CALL_OW 67
// end ;
3846: GO 3711
3848: POP
3849: POP
// wait ( 0 0$5 ) ;
3850: LD_INT 175
3852: PPUSH
3853: CALL_OW 67
// end ;
3857: LD_VAR 0 1
3861: RET
// export function PrepareRolfBase ; var i , tmp ; begin
3862: LD_INT 0
3864: PPUSH
3865: PPUSH
3866: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
3867: LD_EXP 47
3871: PPUSH
3872: LD_INT 94
3874: PPUSH
3875: LD_INT 63
3877: PPUSH
3878: CALL_OW 428
3882: PPUSH
3883: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
3887: LD_ADDR_VAR 0 3
3891: PUSH
3892: LD_INT 4
3894: PUSH
3895: LD_INT 82
3897: PUSH
3898: LD_INT 64
3900: PUSH
3901: LD_INT 1
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 31
3912: PUSH
3913: LD_INT 73
3915: PUSH
3916: LD_INT 58
3918: PUSH
3919: LD_INT 0
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: ST_TO_ADDR
// for i in tmp do
3932: LD_ADDR_VAR 0 2
3936: PUSH
3937: LD_VAR 0 3
3941: PUSH
3942: FOR_IN
3943: IFFALSE 4007
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3945: LD_EXP 51
3949: PPUSH
3950: LD_INT 25
3952: PUSH
3953: LD_INT 2
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PPUSH
3960: CALL_OW 72
3964: PPUSH
3965: LD_VAR 0 2
3969: PUSH
3970: LD_INT 1
3972: ARRAY
3973: PPUSH
3974: LD_VAR 0 2
3978: PUSH
3979: LD_INT 2
3981: ARRAY
3982: PPUSH
3983: LD_VAR 0 2
3987: PUSH
3988: LD_INT 3
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 2
3996: PUSH
3997: LD_INT 4
3999: ARRAY
4000: PPUSH
4001: CALL_OW 205
4005: GO 3942
4007: POP
4008: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
4009: LD_EXP 51
4013: PUSH
4014: LD_INT 2
4016: ARRAY
4017: PPUSH
4018: LD_INT 63
4020: PPUSH
4021: LD_INT 42
4023: PPUSH
4024: CALL_OW 428
4028: PPUSH
4029: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
4033: LD_EXP 51
4037: PUSH
4038: LD_INT 3
4040: ARRAY
4041: PPUSH
4042: LD_INT 94
4044: PPUSH
4045: LD_INT 63
4047: PPUSH
4048: CALL_OW 428
4052: PPUSH
4053: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4057: LD_INT 35
4059: PPUSH
4060: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
4064: LD_EXP 51
4068: PPUSH
4069: LD_INT 25
4071: PUSH
4072: LD_INT 2
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 3
4081: PUSH
4082: LD_INT 60
4084: PUSH
4085: EMPTY
4086: LIST
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PPUSH
4096: CALL_OW 72
4100: IFFALSE 4057
// rolfScriptBase := true ;
4102: LD_ADDR_EXP 9
4106: PUSH
4107: LD_INT 1
4109: ST_TO_ADDR
// end ;
4110: LD_VAR 0 1
4114: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4115: LD_EXP 9
4119: PUSH
4120: LD_EXP 47
4124: PPUSH
4125: CALL_OW 255
4129: PUSH
4130: LD_INT 8
4132: EQUAL
4133: AND
4134: IFFALSE 5141
4136: GO 4138
4138: DISABLE
4139: LD_INT 0
4141: PPUSH
4142: PPUSH
4143: PPUSH
4144: PPUSH
4145: PPUSH
4146: PPUSH
4147: PPUSH
4148: PPUSH
4149: PPUSH
4150: PPUSH
// begin enable ;
4151: ENABLE
// if not rolfSquad then
4152: LD_EXP 51
4156: NOT
4157: IFFALSE 4161
// exit ;
4159: GO 5141
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
4161: LD_ADDR_VAR 0 9
4165: PUSH
4166: LD_INT 12
4168: PPUSH
4169: LD_INT 81
4171: PUSH
4172: LD_INT 8
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 70
4183: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
4184: LD_ADDR_VAR 0 5
4188: PUSH
4189: LD_EXP 51
4193: PPUSH
4194: LD_INT 25
4196: PUSH
4197: LD_INT 1
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PPUSH
4204: CALL_OW 72
4208: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
4209: LD_ADDR_VAR 0 6
4213: PUSH
4214: LD_EXP 51
4218: PPUSH
4219: LD_INT 25
4221: PUSH
4222: LD_INT 2
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PPUSH
4229: CALL_OW 72
4233: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
4234: LD_ADDR_VAR 0 8
4238: PUSH
4239: LD_EXP 51
4243: PPUSH
4244: LD_INT 25
4246: PUSH
4247: LD_INT 3
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: PPUSH
4254: CALL_OW 72
4258: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
4259: LD_ADDR_VAR 0 7
4263: PUSH
4264: LD_EXP 51
4268: PPUSH
4269: LD_INT 25
4271: PUSH
4272: LD_INT 4
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PPUSH
4279: CALL_OW 72
4283: ST_TO_ADDR
// if sol then
4284: LD_VAR 0 5
4288: IFFALSE 4586
// for i in sol union Rolf do
4290: LD_ADDR_VAR 0 1
4294: PUSH
4295: LD_VAR 0 5
4299: PUSH
4300: LD_EXP 47
4304: UNION
4305: PUSH
4306: FOR_IN
4307: IFFALSE 4584
// if not IsInUnit ( i ) and not HasTask ( i ) then
4309: LD_VAR 0 1
4313: PPUSH
4314: CALL_OW 310
4318: NOT
4319: PUSH
4320: LD_VAR 0 1
4324: PPUSH
4325: CALL_OW 314
4329: NOT
4330: AND
4331: IFFALSE 4582
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
4333: LD_VAR 0 1
4337: PPUSH
4338: CALL_OW 256
4342: PUSH
4343: LD_INT 500
4345: LESS
4346: PUSH
4347: LD_VAR 0 1
4351: PPUSH
4352: LD_INT 80
4354: PPUSH
4355: LD_INT 49
4357: PPUSH
4358: CALL_OW 297
4362: PUSH
4363: LD_INT 6
4365: GREATER
4366: AND
4367: IFFALSE 4386
// begin ComMoveXY ( i , 80 , 49 ) ;
4369: LD_VAR 0 1
4373: PPUSH
4374: LD_INT 80
4376: PPUSH
4377: LD_INT 49
4379: PPUSH
4380: CALL_OW 111
// continue ;
4384: GO 4306
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4386: LD_ADDR_VAR 0 4
4390: PUSH
4391: LD_INT 22
4393: PUSH
4394: LD_INT 8
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: LD_INT 50
4403: PUSH
4404: EMPTY
4405: LIST
4406: PUSH
4407: LD_INT 2
4409: PUSH
4410: LD_INT 30
4412: PUSH
4413: LD_INT 4
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 30
4422: PUSH
4423: LD_INT 5
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PUSH
4430: LD_INT 30
4432: PUSH
4433: LD_INT 32
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PUSH
4440: LD_INT 30
4442: PUSH
4443: LD_INT 31
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 69
4466: ST_TO_ADDR
// if tmp then
4467: LD_VAR 0 4
4471: IFFALSE 4582
// begin for b in tmp do
4473: LD_ADDR_VAR 0 2
4477: PUSH
4478: LD_VAR 0 4
4482: PUSH
4483: FOR_IN
4484: IFFALSE 4580
// begin case GetBType ( b ) of b_armoury , b_barracks :
4486: LD_VAR 0 2
4490: PPUSH
4491: CALL_OW 266
4495: PUSH
4496: LD_INT 4
4498: DOUBLE
4499: EQUAL
4500: IFTRUE 4510
4502: LD_INT 5
4504: DOUBLE
4505: EQUAL
4506: IFTRUE 4510
4508: GO 4521
4510: POP
// p := 6 ; b_breastwork , b_bunker :
4511: LD_ADDR_VAR 0 3
4515: PUSH
4516: LD_INT 6
4518: ST_TO_ADDR
4519: GO 4547
4521: LD_INT 31
4523: DOUBLE
4524: EQUAL
4525: IFTRUE 4535
4527: LD_INT 32
4529: DOUBLE
4530: EQUAL
4531: IFTRUE 4535
4533: GO 4546
4535: POP
// p := 1 ; end ;
4536: LD_ADDR_VAR 0 3
4540: PUSH
4541: LD_INT 1
4543: ST_TO_ADDR
4544: GO 4547
4546: POP
// if UnitsInside ( b ) < p then
4547: LD_VAR 0 2
4551: PPUSH
4552: CALL_OW 313
4556: PUSH
4557: LD_VAR 0 3
4561: LESS
4562: IFFALSE 4578
// ComEnterUnit ( i , b ) ;
4564: LD_VAR 0 1
4568: PPUSH
4569: LD_VAR 0 2
4573: PPUSH
4574: CALL_OW 120
// end ;
4578: GO 4483
4580: POP
4581: POP
// end ; end ;
4582: GO 4306
4584: POP
4585: POP
// if sci then
4586: LD_VAR 0 7
4590: IFFALSE 4645
// for i in sci do
4592: LD_ADDR_VAR 0 1
4596: PUSH
4597: LD_VAR 0 7
4601: PUSH
4602: FOR_IN
4603: IFFALSE 4643
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
4605: LD_VAR 0 1
4609: PPUSH
4610: LD_INT 80
4612: PPUSH
4613: LD_INT 49
4615: PPUSH
4616: CALL_OW 297
4620: PUSH
4621: LD_INT 9
4623: GREATER
4624: IFFALSE 4641
// ComMoveXY ( i , 80 , 49 ) ;
4626: LD_VAR 0 1
4630: PPUSH
4631: LD_INT 80
4633: PPUSH
4634: LD_INT 49
4636: PPUSH
4637: CALL_OW 111
// end ;
4641: GO 4602
4643: POP
4644: POP
// if mech then
4645: LD_VAR 0 8
4649: IFFALSE 4863
// for i in mech do
4651: LD_ADDR_VAR 0 1
4655: PUSH
4656: LD_VAR 0 8
4660: PUSH
4661: FOR_IN
4662: IFFALSE 4861
// begin hasVehicle := IsInUnit ( i ) ;
4664: LD_ADDR_VAR 0 10
4668: PUSH
4669: LD_VAR 0 1
4673: PPUSH
4674: CALL_OW 310
4678: ST_TO_ADDR
// if enemyInBase then
4679: LD_VAR 0 9
4683: IFFALSE 4779
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4685: LD_VAR 0 10
4689: PUSH
4690: LD_VAR 0 10
4694: PPUSH
4695: CALL_OW 256
4699: PUSH
4700: LD_INT 500
4702: GREATER
4703: AND
4704: IFFALSE 4732
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4706: LD_VAR 0 10
4710: PPUSH
4711: LD_VAR 0 9
4715: PPUSH
4716: LD_VAR 0 10
4720: PPUSH
4721: CALL_OW 74
4725: PPUSH
4726: CALL_OW 115
4730: GO 4777
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
4732: LD_VAR 0 10
4736: PPUSH
4737: LD_INT 86
4739: PPUSH
4740: LD_INT 49
4742: PPUSH
4743: CALL_OW 297
4747: PUSH
4748: LD_INT 8
4750: GREATER
4751: IFFALSE 4777
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
4753: LD_VAR 0 10
4757: PPUSH
4758: LD_INT 86
4760: PPUSH
4761: LD_INT 49
4763: PPUSH
4764: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
4768: LD_VAR 0 1
4772: PPUSH
4773: CALL 68578 0 1
// end end else
4777: GO 4859
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
4779: LD_VAR 0 1
4783: PPUSH
4784: LD_INT 86
4786: PPUSH
4787: LD_INT 49
4789: PPUSH
4790: CALL_OW 297
4794: PUSH
4795: LD_INT 8
4797: GREATER
4798: IFFALSE 4817
// ComMoveXY ( i , 86 , 49 ) else
4800: LD_VAR 0 1
4804: PPUSH
4805: LD_INT 86
4807: PPUSH
4808: LD_INT 49
4810: PPUSH
4811: CALL_OW 111
4815: GO 4859
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4817: LD_VAR 0 10
4821: PUSH
4822: LD_VAR 0 10
4826: PPUSH
4827: CALL_OW 256
4831: PUSH
4832: LD_INT 1000
4834: LESS
4835: AND
4836: IFFALSE 4859
// begin SetFuel ( hasVehicle , 100 ) ;
4838: LD_VAR 0 10
4842: PPUSH
4843: LD_INT 100
4845: PPUSH
4846: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4850: LD_VAR 0 1
4854: PPUSH
4855: CALL 68458 0 1
// end ; end ; end ;
4859: GO 4661
4861: POP
4862: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4863: LD_ADDR_VAR 0 4
4867: PUSH
4868: LD_INT 12
4870: PPUSH
4871: LD_INT 3
4873: PUSH
4874: LD_INT 24
4876: PUSH
4877: LD_INT 1000
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 21
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 70
4906: ST_TO_ADDR
// if tmp and eng then
4907: LD_VAR 0 4
4911: PUSH
4912: LD_VAR 0 6
4916: AND
4917: IFFALSE 5023
// begin for i in eng do
4919: LD_ADDR_VAR 0 1
4923: PUSH
4924: LD_VAR 0 6
4928: PUSH
4929: FOR_IN
4930: IFFALSE 5021
// if IsInUnit ( i ) then
4932: LD_VAR 0 1
4936: PPUSH
4937: CALL_OW 310
4941: IFFALSE 4954
// ComExitBuilding ( i ) else
4943: LD_VAR 0 1
4947: PPUSH
4948: CALL_OW 122
4952: GO 5019
// if GetLives ( i ) = 1000 then
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 256
4963: PUSH
4964: LD_INT 1000
4966: EQUAL
4967: IFFALSE 4989
// ComRepairBuilding ( i , tmp [ 1 ] ) else
4969: LD_VAR 0 1
4973: PPUSH
4974: LD_VAR 0 4
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PPUSH
4983: CALL_OW 130
4987: GO 5019
// if GetLives ( i ) < 700 then
4989: LD_VAR 0 1
4993: PPUSH
4994: CALL_OW 256
4998: PUSH
4999: LD_INT 700
5001: LESS
5002: IFFALSE 5019
// ComMoveXY ( i , 80 , 49 ) ;
5004: LD_VAR 0 1
5008: PPUSH
5009: LD_INT 80
5011: PPUSH
5012: LD_INT 49
5014: PPUSH
5015: CALL_OW 111
5019: GO 4929
5021: POP
5022: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5023: LD_VAR 0 4
5027: NOT
5028: PUSH
5029: LD_VAR 0 6
5033: PPUSH
5034: LD_INT 3
5036: PUSH
5037: LD_INT 54
5039: PUSH
5040: EMPTY
5041: LIST
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PPUSH
5047: CALL_OW 72
5051: AND
5052: IFFALSE 5141
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5054: LD_ADDR_VAR 0 1
5058: PUSH
5059: LD_VAR 0 6
5063: PPUSH
5064: LD_INT 3
5066: PUSH
5067: LD_INT 54
5069: PUSH
5070: EMPTY
5071: LIST
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PPUSH
5077: CALL_OW 72
5081: PUSH
5082: FOR_IN
5083: IFFALSE 5139
// if GetLives ( i ) < 1000 then
5085: LD_VAR 0 1
5089: PPUSH
5090: CALL_OW 256
5094: PUSH
5095: LD_INT 1000
5097: LESS
5098: IFFALSE 5117
// ComMoveXY ( i , 80 , 49 ) else
5100: LD_VAR 0 1
5104: PPUSH
5105: LD_INT 80
5107: PPUSH
5108: LD_INT 49
5110: PPUSH
5111: CALL_OW 111
5115: GO 5137
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
5117: LD_VAR 0 1
5121: PPUSH
5122: LD_INT 86
5124: PPUSH
5125: LD_INT 54
5127: PPUSH
5128: CALL_OW 428
5132: PPUSH
5133: CALL_OW 120
5137: GO 5082
5139: POP
5140: POP
// end ;
5141: PPOPN 10
5143: END
// export function PrepareOmarSquad ; var i , j , p ; begin
5144: LD_INT 0
5146: PPUSH
5147: PPUSH
5148: PPUSH
5149: PPUSH
// uc_side := 5 ;
5150: LD_ADDR_OWVAR 20
5154: PUSH
5155: LD_INT 5
5157: ST_TO_ADDR
// uc_nation := 2 ;
5158: LD_ADDR_OWVAR 21
5162: PUSH
5163: LD_INT 2
5165: ST_TO_ADDR
// omarSquad := [ ] ;
5166: LD_ADDR_EXP 52
5170: PUSH
5171: EMPTY
5172: ST_TO_ADDR
// for i := 1 to 4 do
5173: LD_ADDR_VAR 0 2
5177: PUSH
5178: DOUBLE
5179: LD_INT 1
5181: DEC
5182: ST_TO_ADDR
5183: LD_INT 4
5185: PUSH
5186: FOR_TO
5187: IFFALSE 5310
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
5189: LD_ADDR_VAR 0 3
5193: PUSH
5194: DOUBLE
5195: LD_INT 1
5197: DEC
5198: ST_TO_ADDR
5199: LD_INT 6
5201: PUSH
5202: LD_INT 2
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: LD_EXP 21
5212: PLUS
5213: PUSH
5214: LD_INT 2
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: PUSH
5223: LD_VAR 0 2
5227: ARRAY
5228: PUSH
5229: FOR_TO
5230: IFFALSE 5306
// begin PrepareHuman ( false , i , 5 ) ;
5232: LD_INT 0
5234: PPUSH
5235: LD_VAR 0 2
5239: PPUSH
5240: LD_INT 5
5242: PPUSH
5243: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
5247: LD_ADDR_EXP 52
5251: PUSH
5252: LD_EXP 52
5256: PPUSH
5257: CALL_OW 44
5261: PPUSH
5262: CALL 66758 0 2
5266: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
5267: LD_VAR 0 2
5271: PUSH
5272: LD_INT 1
5274: EQUAL
5275: PUSH
5276: LD_INT 50
5278: PPUSH
5279: CALL_OW 13
5283: AND
5284: IFFALSE 5304
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
5286: LD_EXP 52
5290: PUSH
5291: LD_EXP 52
5295: ARRAY
5296: PPUSH
5297: LD_INT 8
5299: PPUSH
5300: CALL_OW 336
// end ;
5304: GO 5229
5306: POP
5307: POP
// end ;
5308: GO 5186
5310: POP
5311: POP
// if HexInfo ( 340 , 205 ) then
5312: LD_INT 340
5314: PPUSH
5315: LD_INT 205
5317: PPUSH
5318: CALL_OW 428
5322: IFFALSE 5339
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
5324: LD_INT 340
5326: PPUSH
5327: LD_INT 205
5329: PPUSH
5330: CALL_OW 428
5334: PPUSH
5335: CALL_OW 64
// p := 0 ;
5339: LD_ADDR_VAR 0 4
5343: PUSH
5344: LD_INT 0
5346: ST_TO_ADDR
// for i in omarSquad do
5347: LD_ADDR_VAR 0 2
5351: PUSH
5352: LD_EXP 52
5356: PUSH
5357: FOR_IN
5358: IFFALSE 5559
// begin uc_direction := 4 ;
5360: LD_ADDR_OWVAR 24
5364: PUSH
5365: LD_INT 4
5367: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
5368: LD_VAR 0 2
5372: PPUSH
5373: CALL_OW 257
5377: PUSH
5378: LD_INT 3
5380: EQUAL
5381: PUSH
5382: LD_VAR 0 4
5386: PUSH
5387: LD_INT 2
5389: LESS
5390: AND
5391: IFFALSE 5520
// begin p := p + 1 ;
5393: LD_ADDR_VAR 0 4
5397: PUSH
5398: LD_VAR 0 4
5402: PUSH
5403: LD_INT 1
5405: PLUS
5406: ST_TO_ADDR
// uc_side := 5 ;
5407: LD_ADDR_OWVAR 20
5411: PUSH
5412: LD_INT 5
5414: ST_TO_ADDR
// if rand ( 0 , 1 ) then
5415: LD_INT 0
5417: PPUSH
5418: LD_INT 1
5420: PPUSH
5421: CALL_OW 12
5425: IFFALSE 5456
// begin uc_nation := 2 ;
5427: LD_ADDR_OWVAR 21
5431: PUSH
5432: LD_INT 2
5434: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
5435: LD_INT 13
5437: PPUSH
5438: LD_INT 1
5440: PPUSH
5441: LD_INT 1
5443: PPUSH
5444: LD_INT 27
5446: PPUSH
5447: LD_INT 88
5449: PPUSH
5450: CALL 34277 0 5
// end else
5454: GO 5483
// begin uc_nation := 3 ;
5456: LD_ADDR_OWVAR 21
5460: PUSH
5461: LD_INT 3
5463: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
5464: LD_INT 22
5466: PPUSH
5467: LD_INT 1
5469: PPUSH
5470: LD_INT 1
5472: PPUSH
5473: LD_INT 45
5475: PPUSH
5476: LD_INT 88
5478: PPUSH
5479: CALL 34277 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
5483: CALL_OW 45
5487: PPUSH
5488: LD_INT 13
5490: PPUSH
5491: LD_INT 0
5493: PPUSH
5494: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
5498: LD_VAR 0 2
5502: PPUSH
5503: LD_INT 340
5505: PPUSH
5506: LD_INT 205
5508: PPUSH
5509: CALL_OW 428
5513: PPUSH
5514: CALL_OW 52
// end else
5518: GO 5535
// PlaceUnitArea ( i , southSpawn , false ) ;
5520: LD_VAR 0 2
5524: PPUSH
5525: LD_INT 13
5527: PPUSH
5528: LD_INT 0
5530: PPUSH
5531: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
5535: LD_VAR 0 2
5539: PPUSH
5540: LD_INT 333
5542: PPUSH
5543: LD_INT 210
5545: PPUSH
5546: CALL_OW 111
// wait ( 0 0$2 ) ;
5550: LD_INT 70
5552: PPUSH
5553: CALL_OW 67
// end ;
5557: GO 5357
5559: POP
5560: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
5561: LD_EXP 44
5565: PPUSH
5566: LD_INT 340
5568: PPUSH
5569: LD_INT 205
5571: PPUSH
5572: LD_INT 0
5574: PPUSH
5575: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
5579: LD_EXP 44
5583: PPUSH
5584: LD_INT 333
5586: PPUSH
5587: LD_INT 206
5589: PPUSH
5590: CALL_OW 111
// wait ( 0 0$2 ) ;
5594: LD_INT 70
5596: PPUSH
5597: CALL_OW 67
// ComHold ( omarSquad ) ;
5601: LD_EXP 52
5605: PPUSH
5606: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
5610: LD_EXP 44
5614: PUSH
5615: LD_EXP 52
5619: PPUSH
5620: LD_INT 2
5622: PUSH
5623: LD_INT 25
5625: PUSH
5626: LD_INT 1
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 25
5635: PUSH
5636: LD_INT 8
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: PPUSH
5648: CALL_OW 72
5652: UNION
5653: PUSH
5654: LD_INT 22
5656: PUSH
5657: LD_INT 5
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: PUSH
5664: LD_INT 21
5666: PUSH
5667: LD_INT 2
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PPUSH
5678: CALL_OW 69
5682: UNION
5683: PPUSH
5684: LD_INT 315
5686: PPUSH
5687: LD_INT 214
5689: PPUSH
5690: CALL_OW 114
// wait ( 0 0$22 ) ;
5694: LD_INT 770
5696: PPUSH
5697: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
5701: LD_EXP 52
5705: PUSH
5706: LD_EXP 44
5710: UNION
5711: PPUSH
5712: LD_INT 329
5714: PPUSH
5715: LD_INT 231
5717: PPUSH
5718: CALL_OW 114
// end ;
5722: LD_VAR 0 1
5726: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
5727: LD_EXP 10
5731: IFFALSE 6814
5733: GO 5735
5735: DISABLE
5736: LD_INT 0
5738: PPUSH
5739: PPUSH
5740: PPUSH
5741: PPUSH
5742: PPUSH
5743: PPUSH
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
// begin enable ;
5749: ENABLE
// if not omarSquad then
5750: LD_EXP 52
5754: NOT
5755: IFFALSE 5759
// exit ;
5757: GO 6814
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
5759: LD_ADDR_VAR 0 10
5763: PUSH
5764: LD_INT 14
5766: PPUSH
5767: LD_INT 81
5769: PUSH
5770: LD_INT 5
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PPUSH
5777: CALL_OW 70
5781: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
5782: LD_ADDR_VAR 0 6
5786: PUSH
5787: LD_EXP 52
5791: PPUSH
5792: LD_INT 2
5794: PUSH
5795: LD_INT 25
5797: PUSH
5798: LD_INT 1
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PUSH
5805: LD_INT 25
5807: PUSH
5808: LD_INT 8
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: LIST
5819: PPUSH
5820: CALL_OW 72
5824: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
5825: LD_ADDR_VAR 0 7
5829: PUSH
5830: LD_EXP 52
5834: PPUSH
5835: LD_INT 25
5837: PUSH
5838: LD_INT 2
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PPUSH
5845: CALL_OW 72
5849: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
5850: LD_ADDR_VAR 0 9
5854: PUSH
5855: LD_EXP 52
5859: PPUSH
5860: LD_INT 25
5862: PUSH
5863: LD_INT 3
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 72
5874: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
5875: LD_ADDR_VAR 0 8
5879: PUSH
5880: LD_EXP 52
5884: PPUSH
5885: LD_INT 25
5887: PUSH
5888: LD_INT 4
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 72
5899: ST_TO_ADDR
// if sol then
5900: LD_VAR 0 6
5904: IFFALSE 6268
// for i in sol do
5906: LD_ADDR_VAR 0 1
5910: PUSH
5911: LD_VAR 0 6
5915: PUSH
5916: FOR_IN
5917: IFFALSE 6266
// if not HasTask ( i ) then
5919: LD_VAR 0 1
5923: PPUSH
5924: CALL_OW 314
5928: NOT
5929: IFFALSE 6264
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
5931: LD_VAR 0 1
5935: PPUSH
5936: CALL_OW 310
5940: NOT
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: CALL_OW 256
5951: PUSH
5952: LD_INT 500
5954: LESS
5955: AND
5956: PUSH
5957: LD_VAR 0 1
5961: PPUSH
5962: LD_INT 333
5964: PPUSH
5965: LD_INT 234
5967: PPUSH
5968: CALL_OW 297
5972: PUSH
5973: LD_INT 6
5975: GREATER
5976: AND
5977: IFFALSE 5996
// begin ComMoveXY ( i , 333 , 234 ) ;
5979: LD_VAR 0 1
5983: PPUSH
5984: LD_INT 333
5986: PPUSH
5987: LD_INT 234
5989: PPUSH
5990: CALL_OW 111
// continue ;
5994: GO 5916
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
5996: LD_ADDR_VAR 0 5
6000: PUSH
6001: LD_INT 22
6003: PUSH
6004: LD_INT 5
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 58
6013: PUSH
6014: EMPTY
6015: LIST
6016: PUSH
6017: LD_INT 50
6019: PUSH
6020: EMPTY
6021: LIST
6022: PUSH
6023: LD_INT 2
6025: PUSH
6026: LD_INT 30
6028: PUSH
6029: LD_INT 32
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 30
6038: PUSH
6039: LD_INT 31
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: PPUSH
6057: CALL_OW 69
6061: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
6062: LD_VAR 0 5
6066: PUSH
6067: LD_VAR 0 1
6071: PPUSH
6072: CALL_OW 310
6076: PPUSH
6077: CALL_OW 266
6081: PUSH
6082: LD_INT 31
6084: NONEQUAL
6085: AND
6086: IFFALSE 6168
// begin for j in tmp do
6088: LD_ADDR_VAR 0 2
6092: PUSH
6093: LD_VAR 0 5
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6164
// if GetTag ( j ) <> 1 then
6101: LD_VAR 0 2
6105: PPUSH
6106: CALL_OW 110
6110: PUSH
6111: LD_INT 1
6113: NONEQUAL
6114: IFFALSE 6162
// begin SetTag ( j , 1 ) ;
6116: LD_VAR 0 2
6120: PPUSH
6121: LD_INT 1
6123: PPUSH
6124: CALL_OW 109
// if IsInUnit ( i ) then
6128: LD_VAR 0 1
6132: PPUSH
6133: CALL_OW 310
6137: IFFALSE 6148
// ComExit ( i ) ;
6139: LD_VAR 0 1
6143: PPUSH
6144: CALL 67156 0 1
// AddComEnterUnit ( i , j ) ;
6148: LD_VAR 0 1
6152: PPUSH
6153: LD_VAR 0 2
6157: PPUSH
6158: CALL_OW 180
// end ;
6162: GO 6098
6164: POP
6165: POP
// end else
6166: GO 6264
// if not IsInUnit ( i ) then
6168: LD_VAR 0 1
6172: PPUSH
6173: CALL_OW 310
6177: NOT
6178: IFFALSE 6264
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
6180: LD_ADDR_VAR 0 5
6184: PUSH
6185: LD_INT 22
6187: PUSH
6188: LD_INT 5
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: LD_INT 50
6197: PUSH
6198: EMPTY
6199: LIST
6200: PUSH
6201: LD_INT 30
6203: PUSH
6204: LD_INT 4
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: PPUSH
6216: CALL_OW 69
6220: ST_TO_ADDR
// if tmp then
6221: LD_VAR 0 5
6225: IFFALSE 6264
// if UnitsInside ( tmp [ 1 ] ) < 6 then
6227: LD_VAR 0 5
6231: PUSH
6232: LD_INT 1
6234: ARRAY
6235: PPUSH
6236: CALL_OW 313
6240: PUSH
6241: LD_INT 6
6243: LESS
6244: IFFALSE 6264
// ComEnterUnit ( i , tmp [ 1 ] ) ;
6246: LD_VAR 0 1
6250: PPUSH
6251: LD_VAR 0 5
6255: PUSH
6256: LD_INT 1
6258: ARRAY
6259: PPUSH
6260: CALL_OW 120
// end ; end ;
6264: GO 5916
6266: POP
6267: POP
// if sci then
6268: LD_VAR 0 8
6272: IFFALSE 6327
// for i in sci do
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: LD_VAR 0 8
6283: PUSH
6284: FOR_IN
6285: IFFALSE 6325
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
6287: LD_VAR 0 1
6291: PPUSH
6292: LD_INT 333
6294: PPUSH
6295: LD_INT 234
6297: PPUSH
6298: CALL_OW 297
6302: PUSH
6303: LD_INT 9
6305: GREATER
6306: IFFALSE 6323
// ComMoveXY ( i , 333 , 234 ) ;
6308: LD_VAR 0 1
6312: PPUSH
6313: LD_INT 333
6315: PPUSH
6316: LD_INT 234
6318: PPUSH
6319: CALL_OW 111
// end ;
6323: GO 6284
6325: POP
6326: POP
// if mech then
6327: LD_VAR 0 9
6331: IFFALSE 6536
// for i in mech do
6333: LD_ADDR_VAR 0 1
6337: PUSH
6338: LD_VAR 0 9
6342: PUSH
6343: FOR_IN
6344: IFFALSE 6534
// begin hasVehicle := IsInUnit ( i ) ;
6346: LD_ADDR_VAR 0 11
6350: PUSH
6351: LD_VAR 0 1
6355: PPUSH
6356: CALL_OW 310
6360: ST_TO_ADDR
// if enemyInBase then
6361: LD_VAR 0 10
6365: IFFALSE 6452
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
6367: LD_VAR 0 11
6371: PUSH
6372: LD_VAR 0 11
6376: PPUSH
6377: CALL_OW 256
6381: PUSH
6382: LD_INT 500
6384: GREATER
6385: AND
6386: IFFALSE 6414
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
6388: LD_VAR 0 11
6392: PPUSH
6393: LD_VAR 0 10
6397: PPUSH
6398: LD_VAR 0 11
6402: PPUSH
6403: CALL_OW 74
6407: PPUSH
6408: CALL_OW 115
6412: GO 6450
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
6414: LD_VAR 0 11
6418: PPUSH
6419: LD_INT 333
6421: PPUSH
6422: LD_INT 234
6424: PPUSH
6425: CALL_OW 297
6429: PUSH
6430: LD_INT 6
6432: GREATER
6433: IFFALSE 6450
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
6435: LD_VAR 0 11
6439: PPUSH
6440: LD_INT 333
6442: PPUSH
6443: LD_INT 234
6445: PPUSH
6446: CALL_OW 111
// end else
6450: GO 6532
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
6452: LD_VAR 0 1
6456: PPUSH
6457: LD_INT 333
6459: PPUSH
6460: LD_INT 234
6462: PPUSH
6463: CALL_OW 297
6467: PUSH
6468: LD_INT 6
6470: GREATER
6471: IFFALSE 6490
// ComMoveXY ( i , 333 , 234 ) else
6473: LD_VAR 0 1
6477: PPUSH
6478: LD_INT 333
6480: PPUSH
6481: LD_INT 234
6483: PPUSH
6484: CALL_OW 111
6488: GO 6532
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
6490: LD_VAR 0 11
6494: PUSH
6495: LD_VAR 0 11
6499: PPUSH
6500: CALL_OW 256
6504: PUSH
6505: LD_INT 1000
6507: LESS
6508: AND
6509: IFFALSE 6532
// begin SetFuel ( hasVehicle , 100 ) ;
6511: LD_VAR 0 11
6515: PPUSH
6516: LD_INT 100
6518: PPUSH
6519: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
6523: LD_VAR 0 1
6527: PPUSH
6528: CALL 68458 0 1
// end ; end ; end ;
6532: GO 6343
6534: POP
6535: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6536: LD_ADDR_VAR 0 5
6540: PUSH
6541: LD_INT 14
6543: PPUSH
6544: LD_INT 3
6546: PUSH
6547: LD_INT 24
6549: PUSH
6550: LD_INT 1000
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 21
6563: PUSH
6564: LD_INT 3
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PPUSH
6575: CALL_OW 70
6579: ST_TO_ADDR
// if tmp and eng then
6580: LD_VAR 0 5
6584: PUSH
6585: LD_VAR 0 7
6589: AND
6590: IFFALSE 6696
// begin for i in eng do
6592: LD_ADDR_VAR 0 1
6596: PUSH
6597: LD_VAR 0 7
6601: PUSH
6602: FOR_IN
6603: IFFALSE 6694
// if IsInUnit ( i ) then
6605: LD_VAR 0 1
6609: PPUSH
6610: CALL_OW 310
6614: IFFALSE 6627
// ComExitBuilding ( i ) else
6616: LD_VAR 0 1
6620: PPUSH
6621: CALL_OW 122
6625: GO 6692
// if GetLives ( i ) = 1000 then
6627: LD_VAR 0 1
6631: PPUSH
6632: CALL_OW 256
6636: PUSH
6637: LD_INT 1000
6639: EQUAL
6640: IFFALSE 6662
// ComRepairBuilding ( i , tmp [ 1 ] ) else
6642: LD_VAR 0 1
6646: PPUSH
6647: LD_VAR 0 5
6651: PUSH
6652: LD_INT 1
6654: ARRAY
6655: PPUSH
6656: CALL_OW 130
6660: GO 6692
// if GetLives ( i ) < 700 then
6662: LD_VAR 0 1
6666: PPUSH
6667: CALL_OW 256
6671: PUSH
6672: LD_INT 700
6674: LESS
6675: IFFALSE 6692
// ComMoveXY ( i , 333 , 234 ) ;
6677: LD_VAR 0 1
6681: PPUSH
6682: LD_INT 333
6684: PPUSH
6685: LD_INT 234
6687: PPUSH
6688: CALL_OW 111
6692: GO 6602
6694: POP
6695: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
6696: LD_VAR 0 5
6700: NOT
6701: PUSH
6702: LD_VAR 0 7
6706: PPUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 54
6712: PUSH
6713: EMPTY
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PPUSH
6720: CALL_OW 72
6724: AND
6725: IFFALSE 6814
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6727: LD_ADDR_VAR 0 1
6731: PUSH
6732: LD_VAR 0 7
6736: PPUSH
6737: LD_INT 3
6739: PUSH
6740: LD_INT 54
6742: PUSH
6743: EMPTY
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PPUSH
6750: CALL_OW 72
6754: PUSH
6755: FOR_IN
6756: IFFALSE 6812
// if GetLives ( i ) < 1000 then
6758: LD_VAR 0 1
6762: PPUSH
6763: CALL_OW 256
6767: PUSH
6768: LD_INT 1000
6770: LESS
6771: IFFALSE 6790
// ComMoveXY ( i , 333 , 234 ) else
6773: LD_VAR 0 1
6777: PPUSH
6778: LD_INT 333
6780: PPUSH
6781: LD_INT 234
6783: PPUSH
6784: CALL_OW 111
6788: GO 6810
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
6790: LD_VAR 0 1
6794: PPUSH
6795: LD_INT 341
6797: PPUSH
6798: LD_INT 232
6800: PPUSH
6801: CALL_OW 428
6805: PPUSH
6806: CALL_OW 120
6810: GO 6755
6812: POP
6813: POP
// end ;
6814: PPOPN 11
6816: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
6817: LD_EXP 44
6821: PPUSH
6822: CALL_OW 256
6826: PUSH
6827: LD_INT 1000
6829: LESS
6830: IFFALSE 6848
6832: GO 6834
6834: DISABLE
// begin enable ;
6835: ENABLE
// SetLives ( Omar , 1000 ) ;
6836: LD_EXP 44
6840: PPUSH
6841: LD_INT 1000
6843: PPUSH
6844: CALL_OW 234
// end ;
6848: END
// every 0 0$1 trigger GetLives ( Rolf ) < 1000 and rolfAttack do
6849: LD_EXP 47
6853: PPUSH
6854: CALL_OW 256
6858: PUSH
6859: LD_INT 1000
6861: LESS
6862: PUSH
6863: LD_EXP 32
6867: AND
6868: IFFALSE 6886
6870: GO 6872
6872: DISABLE
// begin enable ;
6873: ENABLE
// SetLives ( Rolf , 1000 ) ;
6874: LD_EXP 47
6878: PPUSH
6879: LD_INT 1000
6881: PPUSH
6882: CALL_OW 234
// end ;
6886: END
// every 0 0$1 trigger rolfAttack do var i , tmp , mech , path , tag , rolfCoords ;
6887: LD_EXP 32
6891: IFFALSE 7571
6893: GO 6895
6895: DISABLE
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
// begin path := [ [ 215 , 162 ] , [ 195 , 163 ] , [ 174 , 162 ] , [ 145 , 163 ] , [ 127 , 163 ] ] ;
6904: LD_ADDR_VAR 0 4
6908: PUSH
6909: LD_INT 215
6911: PUSH
6912: LD_INT 162
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 195
6921: PUSH
6922: LD_INT 163
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: LD_INT 174
6931: PUSH
6932: LD_INT 162
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 145
6941: PUSH
6942: LD_INT 163
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 127
6951: PUSH
6952: LD_INT 163
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: ST_TO_ADDR
// rolfCoords := [ 221 , 161 ] ;
6966: LD_ADDR_VAR 0 6
6970: PUSH
6971: LD_INT 221
6973: PUSH
6974: LD_INT 161
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: ST_TO_ADDR
// tmp := Rolf union rolfSquad ;
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: LD_EXP 47
6990: PUSH
6991: LD_EXP 51
6995: UNION
6996: ST_TO_ADDR
// if not tmp then
6997: LD_VAR 0 2
7001: NOT
7002: IFFALSE 7006
// exit ;
7004: GO 7571
// ComMoveXY ( tmp , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7006: LD_VAR 0 2
7010: PPUSH
7011: LD_VAR 0 6
7015: PUSH
7016: LD_INT 1
7018: ARRAY
7019: PPUSH
7020: LD_VAR 0 6
7024: PUSH
7025: LD_INT 2
7027: ARRAY
7028: PPUSH
7029: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7033: LD_INT 35
7035: PPUSH
7036: CALL_OW 67
// tmp := UnitFilter ( rolfSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
7040: LD_ADDR_VAR 0 2
7044: PUSH
7045: LD_EXP 51
7049: PPUSH
7050: LD_INT 3
7052: PUSH
7053: LD_INT 55
7055: PUSH
7056: EMPTY
7057: LIST
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: LD_INT 25
7068: PUSH
7069: LD_INT 1
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 25
7078: PUSH
7079: LD_INT 8
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PPUSH
7095: CALL_OW 72
7099: ST_TO_ADDR
// if tmp then
7100: LD_VAR 0 2
7104: IFFALSE 7257
// begin for i in tmp do
7106: LD_ADDR_VAR 0 1
7110: PUSH
7111: LD_VAR 0 2
7115: PUSH
7116: FOR_IN
7117: IFFALSE 7255
// begin tag := GetTag ( i ) ;
7119: LD_ADDR_VAR 0 5
7123: PUSH
7124: LD_VAR 0 1
7128: PPUSH
7129: CALL_OW 110
7133: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
7134: LD_VAR 0 1
7138: PPUSH
7139: CALL_OW 256
7143: PUSH
7144: LD_INT 800
7146: LESS
7147: PUSH
7148: LD_VAR 0 5
7152: PUSH
7153: LD_INT 101
7155: LESS
7156: AND
7157: IFFALSE 7200
// begin SetTag ( i , 101 ) ;
7159: LD_VAR 0 1
7163: PPUSH
7164: LD_INT 101
7166: PPUSH
7167: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7171: LD_VAR 0 1
7175: PPUSH
7176: LD_VAR 0 6
7180: PUSH
7181: LD_INT 1
7183: ARRAY
7184: PPUSH
7185: LD_VAR 0 6
7189: PUSH
7190: LD_INT 2
7192: ARRAY
7193: PPUSH
7194: CALL_OW 111
// end else
7198: GO 7253
// if tag = 101 then
7200: LD_VAR 0 5
7204: PUSH
7205: LD_INT 101
7207: EQUAL
7208: IFFALSE 7239
// begin if GetLives ( i ) = 1000 then
7210: LD_VAR 0 1
7214: PPUSH
7215: CALL_OW 256
7219: PUSH
7220: LD_INT 1000
7222: EQUAL
7223: IFFALSE 7237
// SetTag ( i , 0 ) ;
7225: LD_VAR 0 1
7229: PPUSH
7230: LD_INT 0
7232: PPUSH
7233: CALL_OW 109
// end else
7237: GO 7253
// AgressiveMove ( i , path ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_VAR 0 4
7248: PPUSH
7249: CALL 69362 0 2
// end ;
7253: GO 7116
7255: POP
7256: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
7257: LD_ADDR_VAR 0 2
7261: PUSH
7262: LD_INT 22
7264: PUSH
7265: LD_INT 8
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 21
7274: PUSH
7275: LD_INT 2
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: LD_INT 3
7284: PUSH
7285: LD_INT 34
7287: PUSH
7288: LD_INT 32
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: LIST
7303: PPUSH
7304: CALL_OW 69
7308: ST_TO_ADDR
// if not tmp then
7309: LD_VAR 0 2
7313: NOT
7314: IFFALSE 7318
// continue ;
7316: GO 7033
// for i in tmp do
7318: LD_ADDR_VAR 0 1
7322: PUSH
7323: LD_VAR 0 2
7327: PUSH
7328: FOR_IN
7329: IFFALSE 7562
// begin mech := IsDrivenBy ( i ) ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 311
7345: ST_TO_ADDR
// if not mech then
7346: LD_VAR 0 3
7350: NOT
7351: IFFALSE 7355
// continue ;
7353: GO 7328
// tag := GetTag ( i ) ;
7355: LD_ADDR_VAR 0 5
7359: PUSH
7360: LD_VAR 0 1
7364: PPUSH
7365: CALL_OW 110
7369: ST_TO_ADDR
// if GetLives ( i ) >= 600 and tag < 101 then
7370: LD_VAR 0 1
7374: PPUSH
7375: CALL_OW 256
7379: PUSH
7380: LD_INT 600
7382: GREATEREQUAL
7383: PUSH
7384: LD_VAR 0 5
7388: PUSH
7389: LD_INT 101
7391: LESS
7392: AND
7393: IFFALSE 7409
// AgressiveMove ( i , path ) ;
7395: LD_VAR 0 1
7399: PPUSH
7400: LD_VAR 0 4
7404: PPUSH
7405: CALL 69362 0 2
// if GetLives ( i ) < 600 and tag < 101 then
7409: LD_VAR 0 1
7413: PPUSH
7414: CALL_OW 256
7418: PUSH
7419: LD_INT 600
7421: LESS
7422: PUSH
7423: LD_VAR 0 5
7427: PUSH
7428: LD_INT 101
7430: LESS
7431: AND
7432: IFFALSE 7473
// begin SetTag ( i , 101 ) ;
7434: LD_VAR 0 1
7438: PPUSH
7439: LD_INT 101
7441: PPUSH
7442: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7446: LD_VAR 0 1
7450: PPUSH
7451: LD_VAR 0 6
7455: PUSH
7456: LD_INT 1
7458: ARRAY
7459: PPUSH
7460: LD_VAR 0 6
7464: PUSH
7465: LD_INT 2
7467: ARRAY
7468: PPUSH
7469: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) < 9 and mech then
7473: LD_VAR 0 5
7477: PUSH
7478: LD_INT 101
7480: EQUAL
7481: PUSH
7482: LD_VAR 0 1
7486: PPUSH
7487: LD_VAR 0 6
7491: PUSH
7492: LD_INT 1
7494: ARRAY
7495: PPUSH
7496: LD_VAR 0 6
7500: PUSH
7501: LD_INT 2
7503: ARRAY
7504: PPUSH
7505: CALL_OW 297
7509: PUSH
7510: LD_INT 9
7512: LESS
7513: AND
7514: PUSH
7515: LD_VAR 0 3
7519: AND
7520: IFFALSE 7560
// begin if GetLives ( i ) < 1000 then
7522: LD_VAR 0 1
7526: PPUSH
7527: CALL_OW 256
7531: PUSH
7532: LD_INT 1000
7534: LESS
7535: IFFALSE 7548
// AddComRepairVehicleAndReturn ( mech ) else
7537: LD_VAR 0 3
7541: PPUSH
7542: CALL 68578 0 1
7546: GO 7560
// SetTag ( i , 0 ) ;
7548: LD_VAR 0 1
7552: PPUSH
7553: LD_INT 0
7555: PPUSH
7556: CALL_OW 109
// end ; end ;
7560: GO 7328
7562: POP
7563: POP
// until not tmp ;
7564: LD_VAR 0 2
7568: NOT
7569: IFFALSE 7033
// end ;
7571: PPOPN 6
7573: END
// every 0 0$1 trigger omarAttack do var i , cargo , tmp , tag , mech , x , path , omarAttackCoords ;
7574: LD_EXP 23
7578: IFFALSE 8883
7580: GO 7582
7582: DISABLE
7583: LD_INT 0
7585: PPUSH
7586: PPUSH
7587: PPUSH
7588: PPUSH
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
// begin path := [ [ 209 , 221 ] , [ 190 , 220 ] , [ 177 , 220 ] , [ 168 , 223 ] , [ 150 , 206 ] ] ;
7593: LD_ADDR_VAR 0 7
7597: PUSH
7598: LD_INT 209
7600: PUSH
7601: LD_INT 221
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 190
7610: PUSH
7611: LD_INT 220
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: LD_INT 177
7620: PUSH
7621: LD_INT 220
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 168
7630: PUSH
7631: LD_INT 223
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 150
7640: PUSH
7641: LD_INT 206
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: ST_TO_ADDR
// omarAttackCoords := [ 219 , 225 , 0 ] ;
7655: LD_ADDR_VAR 0 8
7659: PUSH
7660: LD_INT 219
7662: PUSH
7663: LD_INT 225
7665: PUSH
7666: LD_INT 0
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: ST_TO_ADDR
// for i := 1 to 2 do
7674: LD_ADDR_VAR 0 1
7678: PUSH
7679: DOUBLE
7680: LD_INT 1
7682: DEC
7683: ST_TO_ADDR
7684: LD_INT 2
7686: PUSH
7687: FOR_TO
7688: IFFALSE 7837
// begin uc_side := 5 ;
7690: LD_ADDR_OWVAR 20
7694: PUSH
7695: LD_INT 5
7697: ST_TO_ADDR
// uc_nation := 2 ;
7698: LD_ADDR_OWVAR 21
7702: PUSH
7703: LD_INT 2
7705: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
7706: LD_INT 14
7708: PPUSH
7709: LD_INT 1
7711: PPUSH
7712: LD_INT 1
7714: PPUSH
7715: LD_INT 32
7717: PPUSH
7718: LD_INT 80
7720: PPUSH
7721: CALL 34277 0 5
// cargo := Join ( cargo , CreateVehicle ) ;
7725: LD_ADDR_VAR 0 2
7729: PUSH
7730: LD_VAR 0 2
7734: PPUSH
7735: CALL_OW 45
7739: PPUSH
7740: CALL 66758 0 2
7744: ST_TO_ADDR
// SetDir ( cargo [ i ] , 4 ) ;
7745: LD_VAR 0 2
7749: PUSH
7750: LD_VAR 0 1
7754: ARRAY
7755: PPUSH
7756: LD_INT 4
7758: PPUSH
7759: CALL_OW 233
// PlaceUnitArea ( cargo [ i ] , omarVehiclesArea , false ) ;
7763: LD_VAR 0 2
7767: PUSH
7768: LD_VAR 0 1
7772: ARRAY
7773: PPUSH
7774: LD_INT 16
7776: PPUSH
7777: LD_INT 0
7779: PPUSH
7780: CALL_OW 49
// PrepareMechanic ( false , 4 ) ;
7784: LD_INT 0
7786: PPUSH
7787: LD_INT 4
7789: PPUSH
7790: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo [ i ] ) ;
7794: CALL_OW 44
7798: PPUSH
7799: LD_VAR 0 2
7803: PUSH
7804: LD_VAR 0 1
7808: ARRAY
7809: PPUSH
7810: CALL_OW 52
// ComMoveXY ( cargo [ i ] , 337 , 232 ) ;
7814: LD_VAR 0 2
7818: PUSH
7819: LD_VAR 0 1
7823: ARRAY
7824: PPUSH
7825: LD_INT 337
7827: PPUSH
7828: LD_INT 232
7830: PPUSH
7831: CALL_OW 111
// end ;
7835: GO 7687
7837: POP
7838: POP
// wait ( 0 0$25 ) ;
7839: LD_INT 875
7841: PPUSH
7842: CALL_OW 67
// for i := 1 to 2 do
7846: LD_ADDR_VAR 0 1
7850: PUSH
7851: DOUBLE
7852: LD_INT 1
7854: DEC
7855: ST_TO_ADDR
7856: LD_INT 2
7858: PUSH
7859: FOR_TO
7860: IFFALSE 7885
// SetCargo ( cargo [ i ] , mat_oil , 100 ) ;
7862: LD_VAR 0 2
7866: PUSH
7867: LD_VAR 0 1
7871: ARRAY
7872: PPUSH
7873: LD_INT 2
7875: PPUSH
7876: LD_INT 100
7878: PPUSH
7879: CALL_OW 290
7883: GO 7859
7885: POP
7886: POP
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
7887: LD_EXP 52
7891: PPUSH
7892: LD_INT 2
7894: PUSH
7895: LD_INT 25
7897: PUSH
7898: LD_INT 1
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 25
7907: PUSH
7908: LD_INT 8
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: LIST
7919: PPUSH
7920: CALL_OW 72
7924: PPUSH
7925: CALL_OW 122
// wait ( 0 0$3 ) ;
7929: LD_INT 105
7931: PPUSH
7932: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
7936: LD_EXP 52
7940: PUSH
7941: LD_EXP 44
7945: UNION
7946: PPUSH
7947: LD_VAR 0 8
7951: PUSH
7952: LD_INT 1
7954: ARRAY
7955: PPUSH
7956: LD_VAR 0 8
7960: PUSH
7961: LD_INT 2
7963: ARRAY
7964: PPUSH
7965: CALL_OW 174
// wait ( 0 0$3 ) ;
7969: LD_INT 105
7971: PPUSH
7972: CALL_OW 67
// AddComMoveXY ( cargo , 218 , 217 ) ;
7976: LD_VAR 0 2
7980: PPUSH
7981: LD_INT 218
7983: PPUSH
7984: LD_INT 217
7986: PPUSH
7987: CALL_OW 171
// wait ( 1 1$00 ) ;
7991: LD_INT 2100
7993: PPUSH
7994: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7998: LD_INT 35
8000: PPUSH
8001: CALL_OW 67
// if omarAttackCoords [ 3 ] = 0 then
8005: LD_VAR 0 8
8009: PUSH
8010: LD_INT 3
8012: ARRAY
8013: PUSH
8014: LD_INT 0
8016: EQUAL
8017: IFFALSE 8122
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 168 , 229 , 12 ] ] ) = 0 then
8019: LD_INT 22
8021: PUSH
8022: LD_INT 3
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: LD_INT 92
8031: PUSH
8032: LD_INT 168
8034: PUSH
8035: LD_INT 229
8037: PUSH
8038: LD_INT 12
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PPUSH
8051: CALL_OW 69
8055: PUSH
8056: LD_INT 0
8058: EQUAL
8059: IFFALSE 8122
// begin omarAttackCoords := [ 167 , 222 , 1 ] ;
8061: LD_ADDR_VAR 0 8
8065: PUSH
8066: LD_INT 167
8068: PUSH
8069: LD_INT 222
8071: PUSH
8072: LD_INT 1
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: ST_TO_ADDR
// AddComMoveXY ( Omar ^ cargo ^ UnitFilter ( omarSquad , [ f_class , 4 ] ) , 167 , 222 ) ;
8080: LD_EXP 44
8084: PUSH
8085: LD_VAR 0 2
8089: ADD
8090: PUSH
8091: LD_EXP 52
8095: PPUSH
8096: LD_INT 25
8098: PUSH
8099: LD_INT 4
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 72
8110: ADD
8111: PPUSH
8112: LD_INT 167
8114: PPUSH
8115: LD_INT 222
8117: PPUSH
8118: CALL_OW 171
// end ; tmp := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
8122: LD_ADDR_VAR 0 3
8126: PUSH
8127: LD_EXP 52
8131: PPUSH
8132: LD_INT 3
8134: PUSH
8135: LD_INT 55
8137: PUSH
8138: EMPTY
8139: LIST
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 2
8147: PUSH
8148: LD_INT 25
8150: PUSH
8151: LD_INT 1
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 25
8160: PUSH
8161: LD_INT 8
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PPUSH
8177: CALL_OW 72
8181: ST_TO_ADDR
// if tmp then
8182: LD_VAR 0 3
8186: IFFALSE 8399
// begin for i in tmp do
8188: LD_ADDR_VAR 0 1
8192: PUSH
8193: LD_VAR 0 3
8197: PUSH
8198: FOR_IN
8199: IFFALSE 8397
// begin tag := GetTag ( i ) ;
8201: LD_ADDR_VAR 0 4
8205: PUSH
8206: LD_VAR 0 1
8210: PPUSH
8211: CALL_OW 110
8215: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
8216: LD_VAR 0 1
8220: PPUSH
8221: CALL_OW 256
8225: PUSH
8226: LD_INT 800
8228: LESS
8229: PUSH
8230: LD_VAR 0 4
8234: PUSH
8235: LD_INT 101
8237: LESS
8238: AND
8239: IFFALSE 8282
// begin SetTag ( i , 101 ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_INT 101
8248: PPUSH
8249: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8253: LD_VAR 0 1
8257: PPUSH
8258: LD_VAR 0 8
8262: PUSH
8263: LD_INT 1
8265: ARRAY
8266: PPUSH
8267: LD_VAR 0 8
8271: PUSH
8272: LD_INT 2
8274: ARRAY
8275: PPUSH
8276: CALL_OW 111
// end else
8280: GO 8395
// if tag = 101 then
8282: LD_VAR 0 4
8286: PUSH
8287: LD_INT 101
8289: EQUAL
8290: IFFALSE 8381
// begin if GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) > 10 then
8292: LD_VAR 0 1
8296: PPUSH
8297: LD_VAR 0 8
8301: PUSH
8302: LD_INT 1
8304: ARRAY
8305: PPUSH
8306: LD_VAR 0 8
8310: PUSH
8311: LD_INT 2
8313: ARRAY
8314: PPUSH
8315: CALL_OW 297
8319: PUSH
8320: LD_INT 10
8322: GREATER
8323: IFFALSE 8352
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8325: LD_VAR 0 1
8329: PPUSH
8330: LD_VAR 0 8
8334: PUSH
8335: LD_INT 1
8337: ARRAY
8338: PPUSH
8339: LD_VAR 0 8
8343: PUSH
8344: LD_INT 2
8346: ARRAY
8347: PPUSH
8348: CALL_OW 111
// if GetLives ( i ) = 1000 then
8352: LD_VAR 0 1
8356: PPUSH
8357: CALL_OW 256
8361: PUSH
8362: LD_INT 1000
8364: EQUAL
8365: IFFALSE 8379
// SetTag ( i , 0 ) ;
8367: LD_VAR 0 1
8371: PPUSH
8372: LD_INT 0
8374: PPUSH
8375: CALL_OW 109
// end else
8379: GO 8395
// AgressiveMove ( i , path ) ;
8381: LD_VAR 0 1
8385: PPUSH
8386: LD_VAR 0 7
8390: PPUSH
8391: CALL 69362 0 2
// end ;
8395: GO 8198
8397: POP
8398: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
8399: LD_ADDR_VAR 0 3
8403: PUSH
8404: LD_INT 22
8406: PUSH
8407: LD_INT 5
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 21
8416: PUSH
8417: LD_INT 2
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PUSH
8424: LD_INT 3
8426: PUSH
8427: LD_INT 34
8429: PUSH
8430: LD_INT 32
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 69
8450: ST_TO_ADDR
// if not tmp then
8451: LD_VAR 0 3
8455: NOT
8456: IFFALSE 8460
// continue ;
8458: GO 7998
// for i in tmp do
8460: LD_ADDR_VAR 0 1
8464: PUSH
8465: LD_VAR 0 3
8469: PUSH
8470: FOR_IN
8471: IFFALSE 8874
// begin mech := IsDrivenBy ( i ) ;
8473: LD_ADDR_VAR 0 5
8477: PUSH
8478: LD_VAR 0 1
8482: PPUSH
8483: CALL_OW 311
8487: ST_TO_ADDR
// if not mech then
8488: LD_VAR 0 5
8492: NOT
8493: IFFALSE 8497
// continue ;
8495: GO 8470
// tag := GetTag ( i ) ;
8497: LD_ADDR_VAR 0 4
8501: PUSH
8502: LD_VAR 0 1
8506: PPUSH
8507: CALL_OW 110
8511: ST_TO_ADDR
// if GetFuel ( i ) > 90 and tag = 102 then
8512: LD_VAR 0 1
8516: PPUSH
8517: CALL_OW 261
8521: PUSH
8522: LD_INT 90
8524: GREATER
8525: PUSH
8526: LD_VAR 0 4
8530: PUSH
8531: LD_INT 102
8533: EQUAL
8534: AND
8535: IFFALSE 8551
// SetTag ( i , 0 ) else
8537: LD_VAR 0 1
8541: PPUSH
8542: LD_INT 0
8544: PPUSH
8545: CALL_OW 109
8549: GO 8647
// if GetTag ( i ) = 102 then
8551: LD_VAR 0 1
8555: PPUSH
8556: CALL_OW 110
8560: PUSH
8561: LD_INT 102
8563: EQUAL
8564: IFFALSE 8647
// begin x := rand ( 1 , 2 ) ;
8566: LD_ADDR_VAR 0 6
8570: PUSH
8571: LD_INT 1
8573: PPUSH
8574: LD_INT 2
8576: PPUSH
8577: CALL_OW 12
8581: ST_TO_ADDR
// AddComMoveUnit ( i , cargo [ x ] ) ;
8582: LD_VAR 0 1
8586: PPUSH
8587: LD_VAR 0 2
8591: PUSH
8592: LD_VAR 0 6
8596: ARRAY
8597: PPUSH
8598: CALL_OW 172
// if GetCargo ( cargo [ x ] , mat_oil ) < 20 then
8602: LD_VAR 0 2
8606: PUSH
8607: LD_VAR 0 6
8611: ARRAY
8612: PPUSH
8613: LD_INT 2
8615: PPUSH
8616: CALL_OW 289
8620: PUSH
8621: LD_INT 20
8623: LESS
8624: IFFALSE 8647
// SetCargo ( cargo [ x ] , mat_oil , 100 ) ;
8626: LD_VAR 0 2
8630: PUSH
8631: LD_VAR 0 6
8635: ARRAY
8636: PPUSH
8637: LD_INT 2
8639: PPUSH
8640: LD_INT 100
8642: PPUSH
8643: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and tag < 101 then
8647: LD_VAR 0 1
8651: PPUSH
8652: CALL_OW 256
8656: PUSH
8657: LD_INT 600
8659: GREATEREQUAL
8660: PUSH
8661: LD_VAR 0 4
8665: PUSH
8666: LD_INT 101
8668: LESS
8669: AND
8670: IFFALSE 8686
// AgressiveMove ( i , path ) ;
8672: LD_VAR 0 1
8676: PPUSH
8677: LD_VAR 0 7
8681: PPUSH
8682: CALL 69362 0 2
// if GetLives ( i ) < 600 and tag < 101 then
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 256
8695: PUSH
8696: LD_INT 600
8698: LESS
8699: PUSH
8700: LD_VAR 0 4
8704: PUSH
8705: LD_INT 101
8707: LESS
8708: AND
8709: IFFALSE 8750
// begin SetTag ( i , 101 ) ;
8711: LD_VAR 0 1
8715: PPUSH
8716: LD_INT 101
8718: PPUSH
8719: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8723: LD_VAR 0 1
8727: PPUSH
8728: LD_VAR 0 8
8732: PUSH
8733: LD_INT 1
8735: ARRAY
8736: PPUSH
8737: LD_VAR 0 8
8741: PUSH
8742: LD_INT 2
8744: ARRAY
8745: PPUSH
8746: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) < 9 and mech then
8750: LD_VAR 0 4
8754: PUSH
8755: LD_INT 101
8757: EQUAL
8758: PUSH
8759: LD_VAR 0 1
8763: PPUSH
8764: LD_VAR 0 8
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_VAR 0 8
8777: PUSH
8778: LD_INT 2
8780: ARRAY
8781: PPUSH
8782: CALL_OW 297
8786: PUSH
8787: LD_INT 9
8789: LESS
8790: AND
8791: PUSH
8792: LD_VAR 0 5
8796: AND
8797: IFFALSE 8872
// begin if GetLives ( i ) < 1000 then
8799: LD_VAR 0 1
8803: PPUSH
8804: CALL_OW 256
8808: PUSH
8809: LD_INT 1000
8811: LESS
8812: IFFALSE 8825
// AddComRepairVehicleAndReturn ( mech ) else
8814: LD_VAR 0 5
8818: PPUSH
8819: CALL 68578 0 1
8823: GO 8872
// if GetFuel ( i ) <= 50 and cargo then
8825: LD_VAR 0 1
8829: PPUSH
8830: CALL_OW 261
8834: PUSH
8835: LD_INT 50
8837: LESSEQUAL
8838: PUSH
8839: LD_VAR 0 2
8843: AND
8844: IFFALSE 8860
// SetTag ( i , 102 ) else
8846: LD_VAR 0 1
8850: PPUSH
8851: LD_INT 102
8853: PPUSH
8854: CALL_OW 109
8858: GO 8872
// SetTag ( i , 0 ) ;
8860: LD_VAR 0 1
8864: PPUSH
8865: LD_INT 0
8867: PPUSH
8868: CALL_OW 109
// end ; end ;
8872: GO 8470
8874: POP
8875: POP
// until not tmp ;
8876: LD_VAR 0 3
8880: NOT
8881: IFFALSE 7998
// end ;
8883: PPOPN 8
8885: END
// export function GoForOil ; var i , tmp , data , chance , vehicle , needOil , heikeInConvoy , success ; begin
8886: LD_INT 0
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
8892: PPUSH
8893: PPUSH
8894: PPUSH
8895: PPUSH
8896: PPUSH
// SetAreaMapShow ( oilArea , 1 ) ;
8897: LD_INT 20
8899: PPUSH
8900: LD_INT 1
8902: PPUSH
8903: CALL_OW 424
// repeat wait ( 0 0$5 ) ;
8907: LD_INT 175
8909: PPUSH
8910: CALL_OW 67
// heikeInConvoy := false ;
8914: LD_ADDR_VAR 0 8
8918: PUSH
8919: LD_INT 0
8921: ST_TO_ADDR
// needOil := false ;
8922: LD_ADDR_VAR 0 7
8926: PUSH
8927: LD_INT 0
8929: ST_TO_ADDR
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] ] ) ;
8930: LD_ADDR_VAR 0 3
8934: PUSH
8935: LD_INT 20
8937: PPUSH
8938: LD_INT 22
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 3
8950: PUSH
8951: LD_INT 2
8953: PUSH
8954: LD_INT 34
8956: PUSH
8957: LD_INT 88
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PUSH
8964: LD_INT 34
8966: PUSH
8967: LD_INT 31
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: LD_INT 33
8985: PUSH
8986: LD_INT 1
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: LIST
8997: PPUSH
8998: CALL_OW 70
9002: ST_TO_ADDR
// for i in tmp do
9003: LD_ADDR_VAR 0 2
9007: PUSH
9008: LD_VAR 0 3
9012: PUSH
9013: FOR_IN
9014: IFFALSE 9099
// begin if IsDrivenBy ( i ) = Heike then
9016: LD_VAR 0 2
9020: PPUSH
9021: CALL_OW 311
9025: PUSH
9026: LD_EXP 34
9030: EQUAL
9031: IFFALSE 9050
// begin heikeInConvoy := true ;
9033: LD_ADDR_VAR 0 8
9037: PUSH
9038: LD_INT 1
9040: ST_TO_ADDR
// Query ( QHeikeConvoy ) ;
9041: LD_STRING QHeikeConvoy
9043: PPUSH
9044: CALL_OW 97
// break ;
9048: GO 9099
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 10 then
9050: LD_VAR 0 2
9054: PPUSH
9055: CALL_OW 262
9059: PUSH
9060: LD_INT 1
9062: EQUAL
9063: PUSH
9064: LD_VAR 0 2
9068: PPUSH
9069: CALL_OW 261
9073: PUSH
9074: LD_INT 10
9076: LESS
9077: AND
9078: IFFALSE 9097
// begin needOil := true ;
9080: LD_ADDR_VAR 0 7
9084: PUSH
9085: LD_INT 1
9087: ST_TO_ADDR
// Query ( QNeedOil ) ;
9088: LD_STRING QNeedOil
9090: PPUSH
9091: CALL_OW 97
// break ;
9095: GO 9099
// end ; end ;
9097: GO 9013
9099: POP
9100: POP
// if not needOil and not heikeInConvoy and UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
9101: LD_VAR 0 7
9105: NOT
9106: PUSH
9107: LD_VAR 0 8
9111: NOT
9112: AND
9113: PUSH
9114: LD_VAR 0 3
9118: PPUSH
9119: LD_INT 2
9121: PUSH
9122: LD_INT 34
9124: PUSH
9125: LD_INT 32
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 34
9134: PUSH
9135: LD_INT 51
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: PPUSH
9147: CALL_OW 72
9151: AND
9152: IFFALSE 9169
// if Query ( QConvoy ) = 1 then
9154: LD_STRING QConvoy
9156: PPUSH
9157: CALL_OW 97
9161: PUSH
9162: LD_INT 1
9164: EQUAL
9165: IFFALSE 9169
// break ;
9167: GO 9173
// until false ;
9169: LD_INT 0
9171: IFFALSE 8907
// SetAreaMapShow ( oilArea , 0 ) ;
9173: LD_INT 20
9175: PPUSH
9176: LD_INT 0
9178: PPUSH
9179: CALL_OW 424
// data := [ ] ;
9183: LD_ADDR_VAR 0 4
9187: PUSH
9188: EMPTY
9189: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
9190: LD_ADDR_VAR 0 5
9194: PUSH
9195: LD_INT 60
9197: PUSH
9198: LD_INT 50
9200: PUSH
9201: LD_INT 40
9203: PUSH
9204: LD_INT 30
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: PUSH
9213: LD_OWVAR 67
9217: ARRAY
9218: ST_TO_ADDR
// for i in tmp do
9219: LD_ADDR_VAR 0 2
9223: PUSH
9224: LD_VAR 0 3
9228: PUSH
9229: FOR_IN
9230: IFFALSE 9327
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , GetFuel ( i ) , ] ) ;
9232: LD_ADDR_VAR 0 4
9236: PUSH
9237: LD_VAR 0 4
9241: PPUSH
9242: LD_VAR 0 2
9246: PUSH
9247: LD_VAR 0 2
9251: PPUSH
9252: CALL_OW 311
9256: PUSH
9257: LD_VAR 0 2
9261: PPUSH
9262: CALL_OW 256
9266: PUSH
9267: LD_VAR 0 2
9271: PPUSH
9272: CALL_OW 261
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: PPUSH
9283: CALL 66758 0 2
9287: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
9288: LD_VAR 0 2
9292: PPUSH
9293: CALL_OW 311
9297: PPUSH
9298: CALL_OW 64
// RemoveUnit ( i ) ;
9302: LD_VAR 0 2
9306: PPUSH
9307: CALL_OW 64
// chance := chance + 20 ;
9311: LD_ADDR_VAR 0 5
9315: PUSH
9316: LD_VAR 0 5
9320: PUSH
9321: LD_INT 20
9323: PLUS
9324: ST_TO_ADDR
// end ;
9325: GO 9229
9327: POP
9328: POP
// wait ( rand ( 0 0$45 , 2 2$30 ) ) ;
9329: LD_INT 1575
9331: PPUSH
9332: LD_INT 5250
9334: PPUSH
9335: CALL_OW 12
9339: PPUSH
9340: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9344: LD_INT 35
9346: PPUSH
9347: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
9351: LD_INT 22
9353: PUSH
9354: LD_INT 3
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: PUSH
9361: LD_INT 92
9363: PUSH
9364: LD_INT 261
9366: PUSH
9367: LD_INT 71
9369: PUSH
9370: LD_INT 12
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PPUSH
9383: CALL_OW 69
9387: NOT
9388: PUSH
9389: LD_INT 277
9391: PPUSH
9392: LD_INT 80
9394: PPUSH
9395: CALL_OW 428
9399: NOT
9400: AND
9401: IFFALSE 9344
// for i in data do
9403: LD_ADDR_VAR 0 2
9407: PUSH
9408: LD_VAR 0 4
9412: PUSH
9413: FOR_IN
9414: IFFALSE 9815
// begin uc_nation := GetNation ( i [ 1 ] ) ;
9416: LD_ADDR_OWVAR 21
9420: PUSH
9421: LD_VAR 0 2
9425: PUSH
9426: LD_INT 1
9428: ARRAY
9429: PPUSH
9430: CALL_OW 248
9434: ST_TO_ADDR
// uc_side := 2 ;
9435: LD_ADDR_OWVAR 20
9439: PUSH
9440: LD_INT 2
9442: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
9443: LD_VAR 0 2
9447: PUSH
9448: LD_INT 1
9450: ARRAY
9451: PPUSH
9452: CALL_OW 265
9456: PPUSH
9457: LD_VAR 0 2
9461: PUSH
9462: LD_INT 1
9464: ARRAY
9465: PPUSH
9466: CALL_OW 262
9470: PPUSH
9471: LD_VAR 0 2
9475: PUSH
9476: LD_INT 1
9478: ARRAY
9479: PPUSH
9480: CALL_OW 263
9484: PPUSH
9485: LD_VAR 0 2
9489: PUSH
9490: LD_INT 1
9492: ARRAY
9493: PPUSH
9494: CALL_OW 264
9498: PPUSH
9499: LD_INT 66
9501: PPUSH
9502: CALL 34277 0 5
// vehicle := CreateVehicle ;
9506: LD_ADDR_VAR 0 6
9510: PUSH
9511: CALL_OW 45
9515: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
9516: LD_VAR 0 6
9520: PPUSH
9521: LD_INT 277
9523: PPUSH
9524: LD_INT 80
9526: PPUSH
9527: LD_INT 4
9529: PPUSH
9530: LD_INT 0
9532: PPUSH
9533: CALL 68898 0 5
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
9537: LD_VAR 0 2
9541: PUSH
9542: LD_INT 2
9544: ARRAY
9545: PPUSH
9546: LD_VAR 0 6
9550: PPUSH
9551: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
9555: LD_VAR 0 6
9559: PPUSH
9560: LD_VAR 0 2
9564: PUSH
9565: LD_INT 3
9567: ARRAY
9568: PPUSH
9569: CALL_OW 234
// success := Prob ( chance ) ;
9573: LD_ADDR_VAR 0 9
9577: PUSH
9578: LD_VAR 0 5
9582: PPUSH
9583: CALL_OW 13
9587: ST_TO_ADDR
// if success then
9588: LD_VAR 0 9
9592: IFFALSE 9674
// begin if GetEngine ( vehicle ) = engine_combustion then
9594: LD_VAR 0 6
9598: PPUSH
9599: CALL_OW 262
9603: PUSH
9604: LD_INT 1
9606: EQUAL
9607: IFFALSE 9621
// SetFuel ( vehicle , 90 ) ;
9609: LD_VAR 0 6
9613: PPUSH
9614: LD_INT 90
9616: PPUSH
9617: CALL_OW 240
// if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
9621: LD_VAR 0 6
9625: PPUSH
9626: CALL_OW 264
9630: PUSH
9631: LD_INT 32
9633: PUSH
9634: LD_INT 51
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: IN
9641: IFFALSE 9672
// begin collectedOil := collectedOil + 100 ;
9643: LD_ADDR_EXP 33
9647: PUSH
9648: LD_EXP 33
9652: PUSH
9653: LD_INT 100
9655: PLUS
9656: ST_TO_ADDR
// SetCargo ( vehicle , mat_oil , 100 ) ;
9657: LD_VAR 0 6
9661: PPUSH
9662: LD_INT 2
9664: PPUSH
9665: LD_INT 100
9667: PPUSH
9668: CALL_OW 290
// end ; end else
9672: GO 9746
// begin if i [ 3 ] > 333 then
9674: LD_VAR 0 2
9678: PUSH
9679: LD_INT 3
9681: ARRAY
9682: PUSH
9683: LD_INT 333
9685: GREATER
9686: IFFALSE 9700
// SetLives ( vehicle , 333 ) ;
9688: LD_VAR 0 6
9692: PPUSH
9693: LD_INT 333
9695: PPUSH
9696: CALL_OW 234
// if i [ 4 ] > 20 then
9700: LD_VAR 0 2
9704: PUSH
9705: LD_INT 4
9707: ARRAY
9708: PUSH
9709: LD_INT 20
9711: GREATER
9712: IFFALSE 9728
// SetFuel ( vehicle , 20 ) else
9714: LD_VAR 0 6
9718: PPUSH
9719: LD_INT 20
9721: PPUSH
9722: CALL_OW 240
9726: GO 9746
// SetFuel ( vehicle , i [ 4 ] ) ;
9728: LD_VAR 0 6
9732: PPUSH
9733: LD_VAR 0 2
9737: PUSH
9738: LD_INT 4
9740: ARRAY
9741: PPUSH
9742: CALL_OW 240
// end ; ComMoveXY ( vehicle , 250 , 119 ) ;
9746: LD_VAR 0 6
9750: PPUSH
9751: LD_INT 250
9753: PPUSH
9754: LD_INT 119
9756: PPUSH
9757: CALL_OW 111
// AddComMoveXY ( vehicle , 211 , 80 ) ;
9761: LD_VAR 0 6
9765: PPUSH
9766: LD_INT 211
9768: PPUSH
9769: LD_INT 80
9771: PPUSH
9772: CALL_OW 171
// repeat wait ( 0 0$5 ) ;
9776: LD_INT 175
9778: PPUSH
9779: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_placed ] ] ) ;
9783: LD_INT 20
9785: PPUSH
9786: LD_INT 22
9788: PUSH
9789: LD_INT 2
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: LD_INT 52
9798: PUSH
9799: EMPTY
9800: LIST
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PPUSH
9806: CALL_OW 70
9810: NOT
9811: IFFALSE 9776
// end ;
9813: GO 9413
9815: POP
9816: POP
// wait ( 0 0$10 ) ;
9817: LD_INT 350
9819: PPUSH
9820: CALL_OW 67
// GoForOil ;
9824: CALL 8886 0 0
// end ;
9828: LD_VAR 0 1
9832: RET
// every 0 0$2 trigger FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do var i ;
9833: LD_INT 22
9835: PPUSH
9836: LD_INT 21
9838: PUSH
9839: LD_INT 2
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 22
9848: PUSH
9849: LD_INT 5
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 58
9858: PUSH
9859: EMPTY
9860: LIST
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: LIST
9866: PPUSH
9867: CALL_OW 70
9871: IFFALSE 9940
9873: GO 9875
9875: DISABLE
9876: LD_INT 0
9878: PPUSH
// begin enable ;
9879: ENABLE
// for i in FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do
9880: LD_ADDR_VAR 0 1
9884: PUSH
9885: LD_INT 22
9887: PPUSH
9888: LD_INT 21
9890: PUSH
9891: LD_INT 2
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: LD_INT 22
9900: PUSH
9901: LD_INT 5
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PUSH
9908: LD_INT 58
9910: PUSH
9911: EMPTY
9912: LIST
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: LIST
9918: PPUSH
9919: CALL_OW 70
9923: PUSH
9924: FOR_IN
9925: IFFALSE 9938
// KillUnit ( i ) ;
9927: LD_VAR 0 1
9931: PPUSH
9932: CALL_OW 66
9936: GO 9924
9938: POP
9939: POP
// end ; end_of_file
9940: PPOPN 1
9942: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
9943: LD_INT 0
9945: PPUSH
// uc_side := side ;
9946: LD_ADDR_OWVAR 20
9950: PUSH
9951: LD_VAR 0 1
9955: ST_TO_ADDR
// uc_nation := nation ;
9956: LD_ADDR_OWVAR 21
9960: PUSH
9961: LD_VAR 0 2
9965: ST_TO_ADDR
// vc_chassis := chassis ;
9966: LD_ADDR_OWVAR 37
9970: PUSH
9971: LD_VAR 0 3
9975: ST_TO_ADDR
// vc_engine := engine ;
9976: LD_ADDR_OWVAR 39
9980: PUSH
9981: LD_VAR 0 4
9985: ST_TO_ADDR
// vc_control := control ;
9986: LD_ADDR_OWVAR 38
9990: PUSH
9991: LD_VAR 0 5
9995: ST_TO_ADDR
// vc_weapon := weapon ;
9996: LD_ADDR_OWVAR 40
10000: PUSH
10001: LD_VAR 0 6
10005: ST_TO_ADDR
// vc_fuel_battery := fuel ;
10006: LD_ADDR_OWVAR 41
10010: PUSH
10011: LD_VAR 0 7
10015: ST_TO_ADDR
// result := CreateVehicle ;
10016: LD_ADDR_VAR 0 8
10020: PUSH
10021: CALL_OW 45
10025: ST_TO_ADDR
// end ;
10026: LD_VAR 0 8
10030: RET
// export function SayX ( units , ident ) ; var i ; begin
10031: LD_INT 0
10033: PPUSH
10034: PPUSH
// result := false ;
10035: LD_ADDR_VAR 0 3
10039: PUSH
10040: LD_INT 0
10042: ST_TO_ADDR
// if not units then
10043: LD_VAR 0 1
10047: NOT
10048: IFFALSE 10052
// exit ;
10050: GO 10106
// for i in units do
10052: LD_ADDR_VAR 0 4
10056: PUSH
10057: LD_VAR 0 1
10061: PUSH
10062: FOR_IN
10063: IFFALSE 10104
// if IsOk ( i ) then
10065: LD_VAR 0 4
10069: PPUSH
10070: CALL_OW 302
10074: IFFALSE 10102
// begin Say ( i , ident ) ;
10076: LD_VAR 0 4
10080: PPUSH
10081: LD_VAR 0 2
10085: PPUSH
10086: CALL_OW 88
// result := i ;
10090: LD_ADDR_VAR 0 3
10094: PUSH
10095: LD_VAR 0 4
10099: ST_TO_ADDR
// break ;
10100: GO 10104
// end ;
10102: GO 10062
10104: POP
10105: POP
// end ;
10106: LD_VAR 0 3
10110: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
10111: LD_INT 0
10113: PPUSH
10114: PPUSH
// InitUc ;
10115: CALL_OW 18
// InitHc ;
10119: CALL_OW 19
// uc_side := 0 ;
10123: LD_ADDR_OWVAR 20
10127: PUSH
10128: LD_INT 0
10130: ST_TO_ADDR
// uc_nation := 0 ;
10131: LD_ADDR_OWVAR 21
10135: PUSH
10136: LD_INT 0
10138: ST_TO_ADDR
// for i = 1 to amount do
10139: LD_ADDR_VAR 0 4
10143: PUSH
10144: DOUBLE
10145: LD_INT 1
10147: DEC
10148: ST_TO_ADDR
10149: LD_VAR 0 2
10153: PUSH
10154: FOR_TO
10155: IFFALSE 10237
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
10157: LD_ADDR_OWVAR 29
10161: PUSH
10162: LD_INT 9
10164: PPUSH
10165: LD_INT 12
10167: PPUSH
10168: CALL_OW 12
10172: PUSH
10173: LD_INT 9
10175: PPUSH
10176: LD_INT 12
10178: PPUSH
10179: CALL_OW 12
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
10188: LD_ADDR_OWVAR 35
10192: PUSH
10193: LD_INT 1
10195: NEG
10196: PPUSH
10197: LD_INT 1
10199: PPUSH
10200: CALL_OW 12
10204: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
10205: LD_INT 0
10207: PPUSH
10208: LD_INT 12
10210: PPUSH
10211: LD_INT 1
10213: PPUSH
10214: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
10218: CALL_OW 44
10222: PPUSH
10223: LD_VAR 0 1
10227: PPUSH
10228: LD_INT 0
10230: PPUSH
10231: CALL_OW 49
// end ;
10235: GO 10154
10237: POP
10238: POP
// InitHc ;
10239: CALL_OW 19
// end ;
10243: LD_VAR 0 3
10247: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
10248: LD_INT 0
10250: PPUSH
10251: PPUSH
// uc_side := 0 ;
10252: LD_ADDR_OWVAR 20
10256: PUSH
10257: LD_INT 0
10259: ST_TO_ADDR
// uc_nation := 0 ;
10260: LD_ADDR_OWVAR 21
10264: PUSH
10265: LD_INT 0
10267: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
10268: LD_INT 7
10270: PPUSH
10271: LD_INT 6
10273: PUSH
10274: LD_INT 5
10276: PUSH
10277: LD_INT 4
10279: PUSH
10280: LD_INT 3
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: PUSH
10289: LD_OWVAR 67
10293: ARRAY
10294: PPUSH
10295: CALL 10111 0 2
// for i = 1 to 2 do
10299: LD_ADDR_VAR 0 4
10303: PUSH
10304: DOUBLE
10305: LD_INT 1
10307: DEC
10308: ST_TO_ADDR
10309: LD_INT 2
10311: PUSH
10312: FOR_TO
10313: IFFALSE 10350
// begin vc_chassis := class_mastodont ;
10315: LD_ADDR_OWVAR 37
10319: PUSH
10320: LD_INT 31
10322: ST_TO_ADDR
// vc_control := control_rider ;
10323: LD_ADDR_OWVAR 38
10327: PUSH
10328: LD_INT 4
10330: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
10331: CALL_OW 45
10335: PPUSH
10336: LD_VAR 0 1
10340: PPUSH
10341: LD_INT 0
10343: PPUSH
10344: CALL 65676 0 3
// end ;
10348: GO 10312
10350: POP
10351: POP
// InitHc ;
10352: CALL_OW 19
// for i := 1 to 3 do
10356: LD_ADDR_VAR 0 4
10360: PUSH
10361: DOUBLE
10362: LD_INT 1
10364: DEC
10365: ST_TO_ADDR
10366: LD_INT 3
10368: PUSH
10369: FOR_TO
10370: IFFALSE 10407
// begin hc_class := class_horse ;
10372: LD_ADDR_OWVAR 28
10376: PUSH
10377: LD_INT 21
10379: ST_TO_ADDR
// hc_gallery :=  ;
10380: LD_ADDR_OWVAR 33
10384: PUSH
10385: LD_STRING 
10387: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10388: CALL_OW 44
10392: PPUSH
10393: LD_VAR 0 1
10397: PPUSH
10398: LD_INT 0
10400: PPUSH
10401: CALL_OW 49
// end ;
10405: GO 10369
10407: POP
10408: POP
// InitHc ;
10409: CALL_OW 19
// for i = 1 to 3 do
10413: LD_ADDR_VAR 0 4
10417: PUSH
10418: DOUBLE
10419: LD_INT 1
10421: DEC
10422: ST_TO_ADDR
10423: LD_INT 3
10425: PUSH
10426: FOR_TO
10427: IFFALSE 10481
// begin hc_class = class_tiger ;
10429: LD_ADDR_OWVAR 28
10433: PUSH
10434: LD_INT 14
10436: ST_TO_ADDR
// hc_gallery =  ;
10437: LD_ADDR_OWVAR 33
10441: PUSH
10442: LD_STRING 
10444: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
10445: LD_ADDR_OWVAR 35
10449: PUSH
10450: LD_INT 7
10452: NEG
10453: PPUSH
10454: LD_INT 7
10456: PPUSH
10457: CALL_OW 12
10461: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
10462: CALL_OW 44
10466: PPUSH
10467: LD_VAR 0 1
10471: PPUSH
10472: LD_INT 0
10474: PPUSH
10475: CALL 65676 0 3
// end ;
10479: GO 10426
10481: POP
10482: POP
// InitHc ;
10483: CALL_OW 19
// for i := 1 to 4 do
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: DOUBLE
10493: LD_INT 1
10495: DEC
10496: ST_TO_ADDR
10497: LD_INT 4
10499: PUSH
10500: FOR_TO
10501: IFFALSE 10538
// begin hc_class := class_phororhacos ;
10503: LD_ADDR_OWVAR 28
10507: PUSH
10508: LD_INT 18
10510: ST_TO_ADDR
// hc_gallery :=  ;
10511: LD_ADDR_OWVAR 33
10515: PUSH
10516: LD_STRING 
10518: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10519: CALL_OW 44
10523: PPUSH
10524: LD_VAR 0 1
10528: PPUSH
10529: LD_INT 0
10531: PPUSH
10532: CALL_OW 49
// end ;
10536: GO 10500
10538: POP
10539: POP
// InitHc ;
10540: CALL_OW 19
// for i := 1 to 4 do
10544: LD_ADDR_VAR 0 4
10548: PUSH
10549: DOUBLE
10550: LD_INT 1
10552: DEC
10553: ST_TO_ADDR
10554: LD_INT 4
10556: PUSH
10557: FOR_TO
10558: IFFALSE 10595
// begin hc_class := class_baggie ;
10560: LD_ADDR_OWVAR 28
10564: PUSH
10565: LD_INT 13
10567: ST_TO_ADDR
// hc_gallery :=  ;
10568: LD_ADDR_OWVAR 33
10572: PUSH
10573: LD_STRING 
10575: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10576: CALL_OW 44
10580: PPUSH
10581: LD_VAR 0 1
10585: PPUSH
10586: LD_INT 0
10588: PPUSH
10589: CALL_OW 49
// end ;
10593: GO 10557
10595: POP
10596: POP
// InitHc ;
10597: CALL_OW 19
// for i := 1 to 7 do
10601: LD_ADDR_VAR 0 4
10605: PUSH
10606: DOUBLE
10607: LD_INT 1
10609: DEC
10610: ST_TO_ADDR
10611: LD_INT 7
10613: PUSH
10614: FOR_TO
10615: IFFALSE 10652
// begin hc_class := class_frog ;
10617: LD_ADDR_OWVAR 28
10621: PUSH
10622: LD_INT 19
10624: ST_TO_ADDR
// hc_gallery :=  ;
10625: LD_ADDR_OWVAR 33
10629: PUSH
10630: LD_STRING 
10632: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
10633: CALL_OW 44
10637: PPUSH
10638: LD_VAR 0 2
10642: PPUSH
10643: LD_INT 0
10645: PPUSH
10646: CALL_OW 49
// end ;
10650: GO 10614
10652: POP
10653: POP
// end ;
10654: LD_VAR 0 3
10658: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
10659: LD_INT 0
10661: PPUSH
10662: PPUSH
10663: PPUSH
// if not observer or not unit then
10664: LD_VAR 0 1
10668: NOT
10669: PUSH
10670: LD_VAR 0 2
10674: NOT
10675: OR
10676: IFFALSE 10680
// exit ;
10678: GO 10728
// if not See ( GetSide ( observer ) , unit ) then
10680: LD_VAR 0 1
10684: PPUSH
10685: CALL_OW 255
10689: PPUSH
10690: LD_VAR 0 2
10694: PPUSH
10695: CALL_OW 292
10699: NOT
10700: IFFALSE 10704
// exit ;
10702: GO 10728
// result := GetDistUnits ( observer , unit ) < 12 ;
10704: LD_ADDR_VAR 0 3
10708: PUSH
10709: LD_VAR 0 1
10713: PPUSH
10714: LD_VAR 0 2
10718: PPUSH
10719: CALL_OW 296
10723: PUSH
10724: LD_INT 12
10726: LESS
10727: ST_TO_ADDR
// end ;
10728: LD_VAR 0 3
10732: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
10733: LD_INT 0
10735: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
10736: LD_VAR 0 2
10740: PUSH
10741: LD_INT 1
10743: ARRAY
10744: PPUSH
10745: LD_VAR 0 2
10749: PUSH
10750: LD_INT 2
10752: ARRAY
10753: PPUSH
10754: CALL_OW 488
10758: PUSH
10759: LD_VAR 0 2
10763: PUSH
10764: LD_INT 1
10766: ARRAY
10767: PPUSH
10768: LD_VAR 0 2
10772: PUSH
10773: LD_INT 2
10775: ARRAY
10776: PPUSH
10777: CALL_OW 428
10781: PUSH
10782: LD_INT 0
10784: EQUAL
10785: AND
10786: IFFALSE 10820
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
10788: LD_VAR 0 1
10792: PPUSH
10793: LD_VAR 0 2
10797: PUSH
10798: LD_INT 1
10800: ARRAY
10801: PPUSH
10802: LD_VAR 0 2
10806: PUSH
10807: LD_INT 2
10809: ARRAY
10810: PPUSH
10811: LD_VAR 0 3
10815: PPUSH
10816: CALL_OW 48
// end ;
10820: LD_VAR 0 4
10824: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
10825: LD_INT 0
10827: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
10828: LD_VAR 0 1
10832: PPUSH
10833: LD_VAR 0 2
10837: PPUSH
10838: LD_VAR 0 3
10842: PPUSH
10843: LD_VAR 0 4
10847: PPUSH
10848: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
10852: LD_VAR 0 1
10856: PPUSH
10857: LD_VAR 0 2
10861: PPUSH
10862: LD_VAR 0 3
10866: PPUSH
10867: CALL_OW 331
// end ;
10871: LD_VAR 0 5
10875: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
10876: LD_INT 0
10878: PPUSH
// if not units then
10879: LD_VAR 0 1
10883: NOT
10884: IFFALSE 10888
// exit ;
10886: GO 10971
// result := true ;
10888: LD_ADDR_VAR 0 4
10892: PUSH
10893: LD_INT 1
10895: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
10896: LD_VAR 0 1
10900: PPUSH
10901: LD_INT 26
10903: PUSH
10904: LD_INT 1
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PPUSH
10911: CALL_OW 72
10915: PUSH
10916: LD_INT 1
10918: ARRAY
10919: PPUSH
10920: LD_VAR 0 2
10924: PPUSH
10925: CALL_OW 88
10929: NOT
10930: IFFALSE 10971
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
10932: LD_ADDR_VAR 0 4
10936: PUSH
10937: LD_VAR 0 1
10941: PPUSH
10942: LD_INT 26
10944: PUSH
10945: LD_INT 2
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PPUSH
10952: CALL_OW 72
10956: PUSH
10957: LD_INT 1
10959: ARRAY
10960: PPUSH
10961: LD_VAR 0 3
10965: PPUSH
10966: CALL_OW 88
10970: ST_TO_ADDR
// end ;
10971: LD_VAR 0 4
10975: RET
// export function SeeGroup ( side , group ) ; var i ; begin
10976: LD_INT 0
10978: PPUSH
10979: PPUSH
// if not group then
10980: LD_VAR 0 2
10984: NOT
10985: IFFALSE 10989
// exit ;
10987: GO 11034
// for i in group do
10989: LD_ADDR_VAR 0 4
10993: PUSH
10994: LD_VAR 0 2
10998: PUSH
10999: FOR_IN
11000: IFFALSE 11032
// if See ( side , i ) then
11002: LD_VAR 0 1
11006: PPUSH
11007: LD_VAR 0 4
11011: PPUSH
11012: CALL_OW 292
11016: IFFALSE 11030
// begin result := true ;
11018: LD_ADDR_VAR 0 3
11022: PUSH
11023: LD_INT 1
11025: ST_TO_ADDR
// exit ;
11026: POP
11027: POP
11028: GO 11034
// end ;
11030: GO 10999
11032: POP
11033: POP
// end ; end_of_file
11034: LD_VAR 0 3
11038: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
11039: LD_INT 0
11041: PPUSH
11042: PPUSH
11043: PPUSH
11044: PPUSH
11045: PPUSH
11046: PPUSH
11047: PPUSH
// uc_side := 3 ;
11048: LD_ADDR_OWVAR 20
11052: PUSH
11053: LD_INT 3
11055: ST_TO_ADDR
// uc_nation := 3 ;
11056: LD_ADDR_OWVAR 21
11060: PUSH
11061: LD_INT 3
11063: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
11064: LD_ADDR_EXP 53
11068: PUSH
11069: LD_STRING Morozov
11071: PPUSH
11072: CALL_OW 25
11076: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
11077: LD_EXP 53
11081: PPUSH
11082: LD_INT 52
11084: PPUSH
11085: CALL_OW 52
// if not gaidarKilled then
11089: LD_EXP 7
11093: NOT
11094: IFFALSE 11127
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
11096: LD_ADDR_EXP 54
11100: PUSH
11101: LD_STRING Gaydar
11103: PPUSH
11104: LD_INT 0
11106: PPUSH
11107: LD_STRING 
11109: PPUSH
11110: CALL 29437 0 3
11114: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
11115: LD_EXP 54
11119: PPUSH
11120: LD_INT 52
11122: PPUSH
11123: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
11127: LD_INT 52
11129: PPUSH
11130: LD_STRING lenin
11132: PPUSH
11133: CALL_OW 500
// ruOutsiders := [ ] ;
11137: LD_ADDR_EXP 56
11141: PUSH
11142: EMPTY
11143: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
11144: LD_ADDR_EXP 58
11148: PUSH
11149: EMPTY
11150: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
11151: LD_ADDR_EXP 59
11155: PUSH
11156: EMPTY
11157: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
11158: LD_ADDR_EXP 60
11162: PUSH
11163: EMPTY
11164: ST_TO_ADDR
// ruAttackers := [ ] ;
11165: LD_ADDR_EXP 61
11169: PUSH
11170: EMPTY
11171: ST_TO_ADDR
// waveStrength := 0 ;
11172: LD_ADDR_EXP 62
11176: PUSH
11177: LD_INT 0
11179: ST_TO_ADDR
// if not gaidarKilled then
11180: LD_EXP 7
11184: NOT
11185: IFFALSE 11195
// waveStrength := 2 ;
11187: LD_ADDR_EXP 62
11191: PUSH
11192: LD_INT 2
11194: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
11195: LD_ADDR_VAR 0 7
11199: PUSH
11200: LD_INT 22
11202: PUSH
11203: LD_INT 3
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: LD_INT 21
11212: PUSH
11213: LD_INT 3
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PPUSH
11224: CALL_OW 69
11228: ST_TO_ADDR
// for i in tmp do
11229: LD_ADDR_VAR 0 2
11233: PUSH
11234: LD_VAR 0 7
11238: PUSH
11239: FOR_IN
11240: IFFALSE 11277
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
11242: LD_VAR 0 2
11246: PPUSH
11247: LD_INT 5
11249: PUSH
11250: LD_INT 6
11252: PUSH
11253: LD_INT 7
11255: PUSH
11256: LD_INT 8
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: PUSH
11265: LD_OWVAR 67
11269: ARRAY
11270: PPUSH
11271: CALL_OW 241
11275: GO 11239
11277: POP
11278: POP
// for i := 1 to 3 do
11279: LD_ADDR_VAR 0 2
11283: PUSH
11284: DOUBLE
11285: LD_INT 1
11287: DEC
11288: ST_TO_ADDR
11289: LD_INT 3
11291: PUSH
11292: FOR_TO
11293: IFFALSE 11331
// begin PrepareHuman ( false , 1 , 0 ) ;
11295: LD_INT 0
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: LD_INT 0
11303: PPUSH
11304: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
11308: CALL_OW 44
11312: PPUSH
11313: LD_INT 75
11315: PPUSH
11316: LD_INT 49
11318: PPUSH
11319: LD_INT 3
11321: PPUSH
11322: LD_INT 0
11324: PPUSH
11325: CALL_OW 50
// end ;
11329: GO 11292
11331: POP
11332: POP
// for i := 1 to 4 do
11333: LD_ADDR_VAR 0 2
11337: PUSH
11338: DOUBLE
11339: LD_INT 1
11341: DEC
11342: ST_TO_ADDR
11343: LD_INT 4
11345: PUSH
11346: FOR_TO
11347: IFFALSE 11393
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
11349: LD_INT 0
11351: PPUSH
11352: LD_INT 1
11354: PPUSH
11355: LD_INT 2
11357: PPUSH
11358: CALL_OW 12
11362: PPUSH
11363: LD_INT 0
11365: PPUSH
11366: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
11370: CALL_OW 44
11374: PPUSH
11375: LD_INT 330
11377: PPUSH
11378: LD_INT 231
11380: PPUSH
11381: LD_INT 5
11383: PPUSH
11384: LD_INT 0
11386: PPUSH
11387: CALL_OW 50
// end ;
11391: GO 11346
11393: POP
11394: POP
// hc_class := 1 ;
11395: LD_ADDR_OWVAR 28
11399: PUSH
11400: LD_INT 1
11402: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
11403: CALL_OW 44
11407: PPUSH
11408: LD_INT 324
11410: PPUSH
11411: LD_INT 219
11413: PPUSH
11414: CALL_OW 428
11418: PPUSH
11419: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
11423: CALL_OW 44
11427: PPUSH
11428: LD_INT 316
11430: PPUSH
11431: LD_INT 223
11433: PPUSH
11434: CALL_OW 428
11438: PPUSH
11439: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
11443: LD_ADDR_VAR 0 7
11447: PUSH
11448: LD_INT 172
11450: PPUSH
11451: LD_INT 198
11453: PPUSH
11454: CALL_OW 428
11458: PPUSH
11459: CALL_OW 274
11463: PUSH
11464: LD_INT 189
11466: PPUSH
11467: LD_INT 156
11469: PPUSH
11470: CALL_OW 428
11474: PPUSH
11475: CALL_OW 274
11479: PUSH
11480: LD_INT 341
11482: PPUSH
11483: LD_INT 232
11485: PPUSH
11486: CALL_OW 428
11490: PPUSH
11491: CALL_OW 274
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: LIST
11500: ST_TO_ADDR
// for i in tmp do
11501: LD_ADDR_VAR 0 2
11505: PUSH
11506: LD_VAR 0 7
11510: PUSH
11511: FOR_IN
11512: IFFALSE 11546
// begin SetResourceType ( i , mat_cans , 200 ) ;
11514: LD_VAR 0 2
11518: PPUSH
11519: LD_INT 1
11521: PPUSH
11522: LD_INT 200
11524: PPUSH
11525: CALL_OW 277
// SetResourceType ( i , mat_oil , 300 ) ;
11529: LD_VAR 0 2
11533: PPUSH
11534: LD_INT 2
11536: PPUSH
11537: LD_INT 300
11539: PPUSH
11540: CALL_OW 277
// end ;
11544: GO 11511
11546: POP
11547: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
11548: LD_ADDR_VAR 0 7
11552: PUSH
11553: LD_INT 177
11555: PUSH
11556: LD_INT 114
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 138
11565: PUSH
11566: LD_INT 96
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: ST_TO_ADDR
// for i := 1 to tmp do
11577: LD_ADDR_VAR 0 2
11581: PUSH
11582: DOUBLE
11583: LD_INT 1
11585: DEC
11586: ST_TO_ADDR
11587: LD_VAR 0 7
11591: PUSH
11592: FOR_TO
11593: IFFALSE 11676
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
11595: LD_INT 0
11597: PPUSH
11598: LD_INT 9
11600: PPUSH
11601: LD_INT 6
11603: PPUSH
11604: CALL_OW 380
// un := CreateHuman ;
11608: LD_ADDR_VAR 0 5
11612: PUSH
11613: CALL_OW 44
11617: ST_TO_ADDR
// SetDir ( un , 2 ) ;
11618: LD_VAR 0 5
11622: PPUSH
11623: LD_INT 2
11625: PPUSH
11626: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
11630: LD_VAR 0 5
11634: PPUSH
11635: LD_VAR 0 7
11639: PUSH
11640: LD_VAR 0 2
11644: ARRAY
11645: PUSH
11646: LD_INT 1
11648: ARRAY
11649: PPUSH
11650: LD_VAR 0 7
11654: PUSH
11655: LD_VAR 0 2
11659: ARRAY
11660: PUSH
11661: LD_INT 2
11663: ARRAY
11664: PPUSH
11665: CALL_OW 428
11669: PPUSH
11670: CALL_OW 52
// end ;
11674: GO 11592
11676: POP
11677: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
11678: LD_ADDR_VAR 0 7
11682: PUSH
11683: LD_INT 198
11685: PUSH
11686: LD_INT 158
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 203
11695: PUSH
11696: LD_INT 166
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 181
11705: PUSH
11706: LD_INT 209
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 178
11715: PUSH
11716: LD_INT 196
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 181
11725: PUSH
11726: LD_INT 212
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: ST_TO_ADDR
// for i := 1 to tmp do
11740: LD_ADDR_VAR 0 2
11744: PUSH
11745: DOUBLE
11746: LD_INT 1
11748: DEC
11749: ST_TO_ADDR
11750: LD_VAR 0 7
11754: PUSH
11755: FOR_TO
11756: IFFALSE 11877
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
11758: LD_INT 0
11760: PPUSH
11761: LD_INT 1
11763: PPUSH
11764: LD_INT 4
11766: PUSH
11767: LD_INT 5
11769: PUSH
11770: LD_INT 6
11772: PUSH
11773: LD_INT 7
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: PUSH
11782: LD_OWVAR 67
11786: ARRAY
11787: PPUSH
11788: CALL_OW 380
// un := CreateHuman ;
11792: LD_ADDR_VAR 0 5
11796: PUSH
11797: CALL_OW 44
11801: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
11802: LD_ADDR_VAR 0 4
11806: PUSH
11807: LD_VAR 0 7
11811: PUSH
11812: LD_VAR 0 2
11816: ARRAY
11817: PUSH
11818: LD_INT 1
11820: ARRAY
11821: PPUSH
11822: LD_VAR 0 7
11826: PUSH
11827: LD_VAR 0 2
11831: ARRAY
11832: PUSH
11833: LD_INT 2
11835: ARRAY
11836: PPUSH
11837: CALL_OW 428
11841: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
11842: LD_VAR 0 5
11846: PPUSH
11847: LD_VAR 0 4
11851: PPUSH
11852: CALL 62007 0 1
11856: PPUSH
11857: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
11861: LD_VAR 0 5
11865: PPUSH
11866: LD_VAR 0 4
11870: PPUSH
11871: CALL_OW 52
// end ;
11875: GO 11755
11877: POP
11878: POP
// for i := 1 to 3 do
11879: LD_ADDR_VAR 0 2
11883: PUSH
11884: DOUBLE
11885: LD_INT 1
11887: DEC
11888: ST_TO_ADDR
11889: LD_INT 3
11891: PUSH
11892: FOR_TO
11893: IFFALSE 11948
// begin InitHc ;
11895: CALL_OW 19
// uc_nation := 0 ;
11899: LD_ADDR_OWVAR 21
11903: PUSH
11904: LD_INT 0
11906: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
11907: LD_ADDR_OWVAR 28
11911: PUSH
11912: LD_INT 16
11914: ST_TO_ADDR
// un := CreateHuman ;
11915: LD_ADDR_VAR 0 5
11919: PUSH
11920: CALL_OW 44
11924: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
11925: LD_VAR 0 5
11929: PPUSH
11930: LD_INT 194
11932: PPUSH
11933: LD_INT 164
11935: PPUSH
11936: LD_INT 6
11938: PPUSH
11939: LD_INT 0
11941: PPUSH
11942: CALL_OW 50
// end ;
11946: GO 11892
11948: POP
11949: POP
// uc_nation := 3 ;
11950: LD_ADDR_OWVAR 21
11954: PUSH
11955: LD_INT 3
11957: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
11958: LD_INT 24
11960: PPUSH
11961: LD_INT 1
11963: PPUSH
11964: LD_INT 1
11966: PPUSH
11967: LD_INT 44
11969: PPUSH
11970: LD_INT 10
11972: PPUSH
11973: CALL 34277 0 5
// un := CreateVehicle ;
11977: LD_ADDR_VAR 0 5
11981: PUSH
11982: CALL_OW 45
11986: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 166 , 1 , false ) ;
11987: LD_VAR 0 5
11991: PPUSH
11992: LD_INT 199
11994: PPUSH
11995: LD_INT 166
11997: PPUSH
11998: LD_INT 1
12000: PPUSH
12001: LD_INT 0
12003: PPUSH
12004: CALL 68898 0 5
// ComHold ( un ) ;
12008: LD_VAR 0 5
12012: PPUSH
12013: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
12017: LD_INT 0
12019: PPUSH
12020: LD_INT 3
12022: PPUSH
12023: LD_INT 4
12025: PPUSH
12026: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12030: CALL_OW 44
12034: PPUSH
12035: LD_VAR 0 5
12039: PPUSH
12040: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12044: LD_INT 24
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: LD_INT 1
12052: PPUSH
12053: LD_INT 45
12055: PPUSH
12056: LD_INT 10
12058: PPUSH
12059: CALL 34277 0 5
// un := CreateVehicle ;
12063: LD_ADDR_VAR 0 5
12067: PUSH
12068: CALL_OW 45
12072: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
12073: LD_VAR 0 5
12077: PPUSH
12078: LD_INT 129
12080: PPUSH
12081: LD_INT 93
12083: PPUSH
12084: LD_INT 1
12086: PPUSH
12087: LD_INT 0
12089: PPUSH
12090: CALL 68898 0 5
// ComHold ( un ) ;
12094: LD_VAR 0 5
12098: PPUSH
12099: CALL_OW 140
// if Difficulty > 1 then
12103: LD_OWVAR 67
12107: PUSH
12108: LD_INT 1
12110: GREATER
12111: IFFALSE 12199
// begin PrepareHuman ( false , 3 , 4 ) ;
12113: LD_INT 0
12115: PPUSH
12116: LD_INT 3
12118: PPUSH
12119: LD_INT 4
12121: PPUSH
12122: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12126: CALL_OW 44
12130: PPUSH
12131: LD_VAR 0 5
12135: PPUSH
12136: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12140: LD_INT 24
12142: PPUSH
12143: LD_INT 1
12145: PPUSH
12146: LD_INT 1
12148: PPUSH
12149: LD_INT 45
12151: PPUSH
12152: LD_INT 10
12154: PPUSH
12155: CALL 34277 0 5
// un := CreateVehicle ;
12159: LD_ADDR_VAR 0 5
12163: PUSH
12164: CALL_OW 45
12168: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
12169: LD_VAR 0 5
12173: PPUSH
12174: LD_INT 200
12176: PPUSH
12177: LD_INT 173
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: LD_INT 0
12185: PPUSH
12186: CALL 68898 0 5
// ComHold ( un ) ;
12190: LD_VAR 0 5
12194: PPUSH
12195: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
12199: LD_INT 0
12201: PPUSH
12202: LD_INT 3
12204: PPUSH
12205: LD_INT 4
12207: PPUSH
12208: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12212: CALL_OW 44
12216: PPUSH
12217: LD_VAR 0 5
12221: PPUSH
12222: CALL_OW 52
// bc_type := b_armoury ;
12226: LD_ADDR_OWVAR 42
12230: PUSH
12231: LD_INT 4
12233: ST_TO_ADDR
// if Difficulty > 1 then
12234: LD_OWVAR 67
12238: PUSH
12239: LD_INT 1
12241: GREATER
12242: IFFALSE 12252
// bc_type := b_barracks ;
12244: LD_ADDR_OWVAR 42
12248: PUSH
12249: LD_INT 5
12251: ST_TO_ADDR
// bc_level := 6 ;
12252: LD_ADDR_OWVAR 43
12256: PUSH
12257: LD_INT 6
12259: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
12260: LD_INT 120
12262: PPUSH
12263: LD_INT 100
12265: PPUSH
12266: LD_INT 5
12268: PPUSH
12269: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
12273: LD_ADDR_VAR 0 2
12277: PUSH
12278: DOUBLE
12279: LD_INT 1
12281: DEC
12282: ST_TO_ADDR
12283: LD_INT 3
12285: PUSH
12286: LD_INT 3
12288: PUSH
12289: LD_INT 4
12291: PUSH
12292: LD_INT 4
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: PUSH
12301: LD_OWVAR 67
12305: ARRAY
12306: PUSH
12307: FOR_TO
12308: IFFALSE 12366
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
12310: LD_INT 0
12312: PPUSH
12313: LD_INT 1
12315: PUSH
12316: LD_INT 1
12318: PUSH
12319: LD_INT 9
12321: PUSH
12322: LD_INT 9
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: PUSH
12331: LD_OWVAR 67
12335: ARRAY
12336: PPUSH
12337: LD_INT 5
12339: PPUSH
12340: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
12344: CALL_OW 44
12348: PPUSH
12349: LD_INT 120
12351: PPUSH
12352: LD_INT 100
12354: PPUSH
12355: CALL_OW 428
12359: PPUSH
12360: CALL_OW 52
// end ;
12364: GO 12307
12366: POP
12367: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
12368: LD_ADDR_VAR 0 7
12372: PUSH
12373: LD_INT 135
12375: PUSH
12376: LD_INT 100
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 137
12385: PUSH
12386: LD_INT 92
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: ST_TO_ADDR
// for i := 1 to tmp do
12397: LD_ADDR_VAR 0 2
12401: PUSH
12402: DOUBLE
12403: LD_INT 1
12405: DEC
12406: ST_TO_ADDR
12407: LD_VAR 0 7
12411: PUSH
12412: FOR_TO
12413: IFFALSE 12583
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
12415: LD_INT 22
12417: PUSH
12418: LD_INT 22
12420: PUSH
12421: LD_INT 24
12423: PUSH
12424: LD_INT 24
12426: PUSH
12427: LD_INT 24
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: PUSH
12437: LD_OWVAR 67
12441: PUSH
12442: LD_INT 0
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: CALL_OW 12
12452: PLUS
12453: ARRAY
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: LD_INT 1
12460: PPUSH
12461: LD_INT 44
12463: PPUSH
12464: LD_INT 25
12466: PPUSH
12467: CALL 34277 0 5
// veh := CreateVehicle ;
12471: LD_ADDR_VAR 0 6
12475: PUSH
12476: CALL_OW 45
12480: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12481: LD_VAR 0 6
12485: PPUSH
12486: LD_INT 2
12488: PPUSH
12489: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
12493: LD_VAR 0 6
12497: PPUSH
12498: LD_VAR 0 7
12502: PUSH
12503: LD_VAR 0 2
12507: ARRAY
12508: PUSH
12509: LD_INT 1
12511: ARRAY
12512: PPUSH
12513: LD_VAR 0 7
12517: PUSH
12518: LD_VAR 0 2
12522: ARRAY
12523: PUSH
12524: LD_INT 2
12526: ARRAY
12527: PPUSH
12528: LD_INT 0
12530: PPUSH
12531: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
12535: LD_INT 0
12537: PPUSH
12538: LD_INT 3
12540: PPUSH
12541: LD_INT 6
12543: PPUSH
12544: CALL_OW 380
// un := CreateHuman ;
12548: LD_ADDR_VAR 0 5
12552: PUSH
12553: CALL_OW 44
12557: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12558: LD_VAR 0 5
12562: PPUSH
12563: LD_VAR 0 6
12567: PPUSH
12568: CALL_OW 52
// ComHold ( veh ) ;
12572: LD_VAR 0 6
12576: PPUSH
12577: CALL_OW 140
// end ;
12581: GO 12412
12583: POP
12584: POP
// tmp := [ 191 , 122 ] ;
12585: LD_ADDR_VAR 0 7
12589: PUSH
12590: LD_INT 191
12592: PUSH
12593: LD_INT 122
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
12600: LD_INT 24
12602: PPUSH
12603: LD_INT 1
12605: PPUSH
12606: LD_INT 1
12608: PPUSH
12609: LD_INT 44
12611: PPUSH
12612: LD_INT 30
12614: PPUSH
12615: CALL 34277 0 5
// ruBlockadeTank := CreateVehicle ;
12619: LD_ADDR_EXP 55
12623: PUSH
12624: CALL_OW 45
12628: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
12629: LD_EXP 55
12633: PPUSH
12634: LD_INT 2
12636: PPUSH
12637: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
12641: LD_EXP 55
12645: PPUSH
12646: LD_INT 191
12648: PPUSH
12649: LD_INT 122
12651: PPUSH
12652: LD_INT 0
12654: PPUSH
12655: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
12659: LD_INT 1
12661: PPUSH
12662: LD_INT 5
12664: PUSH
12665: LD_INT 6
12667: PUSH
12668: LD_INT 7
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: LIST
12675: PUSH
12676: LD_OWVAR 67
12680: PUSH
12681: LD_INT 1
12683: MINUS
12684: ARRAY
12685: PPUSH
12686: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
12690: CALL_OW 44
12694: PPUSH
12695: LD_EXP 55
12699: PPUSH
12700: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
12704: LD_EXP 55
12708: PPUSH
12709: CALL_OW 140
// ruBlockadeSquad := [ ] ;
12713: LD_ADDR_EXP 57
12717: PUSH
12718: EMPTY
12719: ST_TO_ADDR
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
12720: LD_ADDR_VAR 0 2
12724: PUSH
12725: DOUBLE
12726: LD_INT 1
12728: DEC
12729: ST_TO_ADDR
12730: LD_INT 2
12732: PUSH
12733: LD_INT 2
12735: PUSH
12736: LD_INT 3
12738: PUSH
12739: LD_INT 3
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: LD_OWVAR 67
12752: ARRAY
12753: PUSH
12754: FOR_TO
12755: IFFALSE 12871
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
12757: LD_INT 0
12759: PPUSH
12760: LD_INT 1
12762: PPUSH
12763: LD_INT 4
12765: PUSH
12766: LD_INT 5
12768: PUSH
12769: LD_INT 6
12771: PUSH
12772: LD_INT 7
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: PUSH
12781: LD_OWVAR 67
12785: ARRAY
12786: PPUSH
12787: CALL_OW 380
// un := CreateHuman ;
12791: LD_ADDR_VAR 0 5
12795: PUSH
12796: CALL_OW 44
12800: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
12801: LD_VAR 0 5
12805: PPUSH
12806: LD_INT 9
12808: PPUSH
12809: LD_INT 0
12811: PPUSH
12812: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
12816: LD_VAR 0 5
12820: PPUSH
12821: LD_INT 198
12823: PPUSH
12824: LD_INT 129
12826: PPUSH
12827: CALL_OW 118
// AddComCrawl ( un ) ;
12831: LD_VAR 0 5
12835: PPUSH
12836: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12840: LD_ADDR_EXP 57
12844: PUSH
12845: LD_EXP 57
12849: PPUSH
12850: LD_EXP 57
12854: PUSH
12855: LD_INT 1
12857: PLUS
12858: PPUSH
12859: LD_VAR 0 5
12863: PPUSH
12864: CALL_OW 1
12868: ST_TO_ADDR
// end ;
12869: GO 12754
12871: POP
12872: POP
// PrepareHuman ( false , 4 , 5 ) ;
12873: LD_INT 0
12875: PPUSH
12876: LD_INT 4
12878: PPUSH
12879: LD_INT 5
12881: PPUSH
12882: CALL_OW 380
// un := CreateHuman ;
12886: LD_ADDR_VAR 0 5
12890: PUSH
12891: CALL_OW 44
12895: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
12896: LD_VAR 0 5
12900: PPUSH
12901: LD_INT 179
12903: PPUSH
12904: LD_INT 113
12906: PPUSH
12907: LD_INT 0
12909: PPUSH
12910: CALL_OW 48
// ComHold ( un ) ;
12914: LD_VAR 0 5
12918: PPUSH
12919: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12923: LD_ADDR_EXP 57
12927: PUSH
12928: LD_EXP 57
12932: PPUSH
12933: LD_EXP 57
12937: PUSH
12938: LD_INT 1
12940: PLUS
12941: PPUSH
12942: LD_VAR 0 5
12946: PPUSH
12947: CALL_OW 1
12951: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
12952: LD_ADDR_VAR 0 7
12956: PUSH
12957: LD_INT 167
12959: PPUSH
12960: LD_INT 243
12962: PPUSH
12963: CALL_OW 428
12967: PPUSH
12968: CALL_OW 274
12972: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
12973: LD_VAR 0 7
12977: PPUSH
12978: LD_INT 1
12980: PPUSH
12981: LD_INT 1000
12983: PPUSH
12984: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
12988: LD_VAR 0 7
12992: PPUSH
12993: LD_INT 2
12995: PPUSH
12996: LD_INT 400
12998: PPUSH
12999: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
13003: LD_ADDR_VAR 0 7
13007: PUSH
13008: LD_INT 169
13010: PPUSH
13011: LD_INT 229
13013: PPUSH
13014: CALL_OW 428
13018: ST_TO_ADDR
// for i := 1 to 3 do
13019: LD_ADDR_VAR 0 2
13023: PUSH
13024: DOUBLE
13025: LD_INT 1
13027: DEC
13028: ST_TO_ADDR
13029: LD_INT 3
13031: PUSH
13032: FOR_TO
13033: IFFALSE 13124
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13035: LD_INT 0
13037: PPUSH
13038: LD_INT 1
13040: PPUSH
13041: LD_INT 4
13043: PUSH
13044: LD_INT 5
13046: PUSH
13047: LD_INT 5
13049: PUSH
13050: LD_INT 6
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: PUSH
13059: LD_OWVAR 67
13063: ARRAY
13064: PPUSH
13065: CALL_OW 380
// un := CreateHuman ;
13069: LD_ADDR_VAR 0 5
13073: PUSH
13074: CALL_OW 44
13078: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
13079: LD_VAR 0 5
13083: PPUSH
13084: LD_VAR 0 7
13088: PPUSH
13089: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13093: LD_ADDR_EXP 58
13097: PUSH
13098: LD_EXP 58
13102: PPUSH
13103: LD_EXP 58
13107: PUSH
13108: LD_INT 1
13110: PLUS
13111: PPUSH
13112: LD_VAR 0 5
13116: PPUSH
13117: CALL_OW 1
13121: ST_TO_ADDR
// end ;
13122: GO 13032
13124: POP
13125: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
13126: LD_ADDR_VAR 0 7
13130: PUSH
13131: LD_INT 165
13133: PUSH
13134: LD_INT 227
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 173
13143: PUSH
13144: LD_INT 231
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: ST_TO_ADDR
// for i := 1 to tmp do
13155: LD_ADDR_VAR 0 2
13159: PUSH
13160: DOUBLE
13161: LD_INT 1
13163: DEC
13164: ST_TO_ADDR
13165: LD_VAR 0 7
13169: PUSH
13170: FOR_TO
13171: IFFALSE 13292
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13173: LD_INT 0
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: LD_INT 4
13181: PUSH
13182: LD_INT 5
13184: PUSH
13185: LD_INT 5
13187: PUSH
13188: LD_INT 6
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: PUSH
13197: LD_OWVAR 67
13201: ARRAY
13202: PPUSH
13203: CALL_OW 380
// un := CreateHuman ;
13207: LD_ADDR_VAR 0 5
13211: PUSH
13212: CALL_OW 44
13216: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
13217: LD_VAR 0 5
13221: PPUSH
13222: LD_VAR 0 7
13226: PUSH
13227: LD_VAR 0 2
13231: ARRAY
13232: PUSH
13233: LD_INT 1
13235: ARRAY
13236: PPUSH
13237: LD_VAR 0 7
13241: PUSH
13242: LD_VAR 0 2
13246: ARRAY
13247: PUSH
13248: LD_INT 2
13250: ARRAY
13251: PPUSH
13252: CALL_OW 428
13256: PPUSH
13257: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13261: LD_ADDR_EXP 58
13265: PUSH
13266: LD_EXP 58
13270: PPUSH
13271: LD_EXP 58
13275: PUSH
13276: LD_INT 1
13278: PLUS
13279: PPUSH
13280: LD_VAR 0 5
13284: PPUSH
13285: CALL_OW 1
13289: ST_TO_ADDR
// end ;
13290: GO 13170
13292: POP
13293: POP
// for i := 1 to 2 do
13294: LD_ADDR_VAR 0 2
13298: PUSH
13299: DOUBLE
13300: LD_INT 1
13302: DEC
13303: ST_TO_ADDR
13304: LD_INT 2
13306: PUSH
13307: FOR_TO
13308: IFFALSE 13363
// begin InitHc ;
13310: CALL_OW 19
// uc_nation := 0 ;
13314: LD_ADDR_OWVAR 21
13318: PUSH
13319: LD_INT 0
13321: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
13322: LD_ADDR_OWVAR 28
13326: PUSH
13327: LD_INT 16
13329: ST_TO_ADDR
// un := CreateHuman ;
13330: LD_ADDR_VAR 0 5
13334: PUSH
13335: CALL_OW 44
13339: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
13340: LD_VAR 0 5
13344: PPUSH
13345: LD_INT 166
13347: PPUSH
13348: LD_INT 233
13350: PPUSH
13351: LD_INT 2
13353: PPUSH
13354: LD_INT 0
13356: PPUSH
13357: CALL_OW 50
// end ;
13361: GO 13307
13363: POP
13364: POP
// uc_nation := 3 ;
13365: LD_ADDR_OWVAR 21
13369: PUSH
13370: LD_INT 3
13372: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
13373: LD_ADDR_VAR 0 7
13377: PUSH
13378: LD_INT 71
13380: PUSH
13381: LD_INT 52
13383: PUSH
13384: LD_INT 11
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: ST_TO_ADDR
// for i in tmp do
13392: LD_ADDR_VAR 0 2
13396: PUSH
13397: LD_VAR 0 7
13401: PUSH
13402: FOR_IN
13403: IFFALSE 13447
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
13405: LD_VAR 0 2
13409: PPUSH
13410: CALL_OW 274
13414: PPUSH
13415: LD_INT 1
13417: PPUSH
13418: LD_INT 3000
13420: PPUSH
13421: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
13425: LD_VAR 0 2
13429: PPUSH
13430: CALL_OW 274
13434: PPUSH
13435: LD_INT 2
13437: PPUSH
13438: LD_INT 600
13440: PPUSH
13441: CALL_OW 277
// end ;
13445: GO 13402
13447: POP
13448: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
13449: LD_ADDR_VAR 0 7
13453: PUSH
13454: LD_INT 41
13456: PUSH
13457: LD_INT 57
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 38
13466: PUSH
13467: LD_INT 55
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 50
13476: PUSH
13477: LD_INT 73
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 51
13486: PUSH
13487: LD_INT 65
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 82
13496: PUSH
13497: LD_INT 93
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 87
13506: PUSH
13507: LD_INT 100
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 91
13516: PUSH
13517: LD_INT 109
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 84
13526: PUSH
13527: LD_INT 120
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 113
13536: PUSH
13537: LD_INT 153
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 123
13546: PUSH
13547: LD_INT 171
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 125
13556: PUSH
13557: LD_INT 178
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 125
13566: PUSH
13567: LD_INT 188
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 125
13576: PUSH
13577: LD_INT 201
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 33
13586: PUSH
13587: LD_INT 60
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 76
13596: PUSH
13597: LD_INT 95
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 84
13606: PUSH
13607: LD_INT 111
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 112
13616: PUSH
13617: LD_INT 165
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: ST_TO_ADDR
// for i := 1 to tmp do
13643: LD_ADDR_VAR 0 2
13647: PUSH
13648: DOUBLE
13649: LD_INT 1
13651: DEC
13652: ST_TO_ADDR
13653: LD_VAR 0 7
13657: PUSH
13658: FOR_TO
13659: IFFALSE 13906
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
13661: LD_ADDR_VAR 0 4
13665: PUSH
13666: LD_VAR 0 7
13670: PUSH
13671: LD_VAR 0 2
13675: ARRAY
13676: PUSH
13677: LD_INT 1
13679: ARRAY
13680: PPUSH
13681: LD_VAR 0 7
13685: PUSH
13686: LD_VAR 0 2
13690: ARRAY
13691: PUSH
13692: LD_INT 2
13694: ARRAY
13695: PPUSH
13696: CALL_OW 428
13700: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
13701: LD_VAR 0 4
13705: PPUSH
13706: CALL_OW 266
13710: PUSH
13711: LD_INT 4
13713: PUSH
13714: LD_INT 5
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: IN
13721: IFFALSE 13817
// begin for j := 1 to Difficulty do
13723: LD_ADDR_VAR 0 3
13727: PUSH
13728: DOUBLE
13729: LD_INT 1
13731: DEC
13732: ST_TO_ADDR
13733: LD_OWVAR 67
13737: PUSH
13738: FOR_TO
13739: IFFALSE 13813
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13741: LD_INT 0
13743: PPUSH
13744: LD_INT 1
13746: PPUSH
13747: LD_INT 4
13749: PUSH
13750: LD_INT 5
13752: PUSH
13753: LD_INT 5
13755: PUSH
13756: LD_INT 6
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: PUSH
13765: LD_OWVAR 67
13769: ARRAY
13770: PPUSH
13771: CALL_OW 380
// un := CreateHuman ;
13775: LD_ADDR_VAR 0 5
13779: PUSH
13780: CALL_OW 44
13784: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13785: LD_VAR 0 5
13789: PPUSH
13790: LD_VAR 0 4
13794: PPUSH
13795: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
13799: LD_VAR 0 5
13803: PPUSH
13804: LD_INT 9
13806: PPUSH
13807: CALL_OW 336
// end ;
13811: GO 13738
13813: POP
13814: POP
// end else
13815: GO 13875
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13817: LD_INT 0
13819: PPUSH
13820: LD_INT 1
13822: PPUSH
13823: LD_INT 4
13825: PUSH
13826: LD_INT 5
13828: PUSH
13829: LD_INT 5
13831: PUSH
13832: LD_INT 6
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: PUSH
13841: LD_OWVAR 67
13845: ARRAY
13846: PPUSH
13847: CALL_OW 380
// un := CreateHuman ;
13851: LD_ADDR_VAR 0 5
13855: PUSH
13856: CALL_OW 44
13860: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13861: LD_VAR 0 5
13865: PPUSH
13866: LD_VAR 0 4
13870: PPUSH
13871: CALL_OW 52
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13875: LD_ADDR_EXP 59
13879: PUSH
13880: LD_EXP 59
13884: PPUSH
13885: LD_EXP 59
13889: PUSH
13890: LD_INT 1
13892: PLUS
13893: PPUSH
13894: LD_VAR 0 5
13898: PPUSH
13899: CALL_OW 1
13903: ST_TO_ADDR
// end ;
13904: GO 13658
13906: POP
13907: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
13908: LD_ADDR_VAR 0 4
13912: PUSH
13913: LD_INT 10
13915: PPUSH
13916: LD_INT 22
13918: PUSH
13919: LD_INT 3
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: LD_INT 30
13928: PUSH
13929: LD_INT 32
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 58
13938: PUSH
13939: EMPTY
13940: LIST
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: LIST
13946: PPUSH
13947: CALL_OW 70
13951: PUSH
13952: FOR_IN
13953: IFFALSE 14087
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
13955: LD_INT 40
13957: PUSH
13958: LD_INT 50
13960: PUSH
13961: LD_INT 75
13963: PUSH
13964: LD_INT 80
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: PUSH
13973: LD_OWVAR 67
13977: ARRAY
13978: PUSH
13979: LD_EXP 7
13983: PUSH
13984: LD_INT 10
13986: MUL
13987: MINUS
13988: PPUSH
13989: CALL_OW 13
13993: NOT
13994: IFFALSE 13998
// continue ;
13996: GO 13952
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13998: LD_INT 0
14000: PPUSH
14001: LD_INT 1
14003: PPUSH
14004: LD_INT 4
14006: PUSH
14007: LD_INT 5
14009: PUSH
14010: LD_INT 5
14012: PUSH
14013: LD_INT 6
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: PUSH
14022: LD_OWVAR 67
14026: ARRAY
14027: PPUSH
14028: CALL_OW 380
// un := CreateHuman ;
14032: LD_ADDR_VAR 0 5
14036: PUSH
14037: CALL_OW 44
14041: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
14042: LD_VAR 0 5
14046: PPUSH
14047: LD_VAR 0 4
14051: PPUSH
14052: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14056: LD_ADDR_EXP 59
14060: PUSH
14061: LD_EXP 59
14065: PPUSH
14066: LD_EXP 59
14070: PUSH
14071: LD_INT 1
14073: PLUS
14074: PPUSH
14075: LD_VAR 0 5
14079: PPUSH
14080: CALL_OW 1
14084: ST_TO_ADDR
// end ;
14085: GO 13952
14087: POP
14088: POP
// for i := 1 to 5 do
14089: LD_ADDR_VAR 0 2
14093: PUSH
14094: DOUBLE
14095: LD_INT 1
14097: DEC
14098: ST_TO_ADDR
14099: LD_INT 5
14101: PUSH
14102: FOR_TO
14103: IFFALSE 14201
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14105: LD_INT 0
14107: PPUSH
14108: LD_INT 2
14110: PPUSH
14111: LD_INT 4
14113: PUSH
14114: LD_INT 5
14116: PUSH
14117: LD_INT 5
14119: PUSH
14120: LD_INT 6
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: PUSH
14129: LD_OWVAR 67
14133: ARRAY
14134: PPUSH
14135: CALL_OW 380
// un := CreateHuman ;
14139: LD_ADDR_VAR 0 5
14143: PUSH
14144: CALL_OW 44
14148: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
14149: LD_VAR 0 5
14153: PPUSH
14154: LD_INT 66
14156: PPUSH
14157: LD_INT 101
14159: PPUSH
14160: LD_INT 3
14162: PPUSH
14163: LD_INT 0
14165: PPUSH
14166: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14170: LD_ADDR_EXP 59
14174: PUSH
14175: LD_EXP 59
14179: PPUSH
14180: LD_EXP 59
14184: PUSH
14185: LD_INT 1
14187: PLUS
14188: PPUSH
14189: LD_VAR 0 5
14193: PPUSH
14194: CALL_OW 1
14198: ST_TO_ADDR
// end ;
14199: GO 14102
14201: POP
14202: POP
// tmp := [ ruFac1 , ruFac2 ] ;
14203: LD_ADDR_VAR 0 7
14207: PUSH
14208: LD_INT 72
14210: PUSH
14211: LD_INT 12
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: ST_TO_ADDR
// for i := 1 to tmp do
14218: LD_ADDR_VAR 0 2
14222: PUSH
14223: DOUBLE
14224: LD_INT 1
14226: DEC
14227: ST_TO_ADDR
14228: LD_VAR 0 7
14232: PUSH
14233: FOR_TO
14234: IFFALSE 14351
// for j := 1 to 6 do
14236: LD_ADDR_VAR 0 3
14240: PUSH
14241: DOUBLE
14242: LD_INT 1
14244: DEC
14245: ST_TO_ADDR
14246: LD_INT 6
14248: PUSH
14249: FOR_TO
14250: IFFALSE 14347
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14252: LD_INT 0
14254: PPUSH
14255: LD_INT 3
14257: PPUSH
14258: LD_INT 4
14260: PUSH
14261: LD_INT 5
14263: PUSH
14264: LD_INT 5
14266: PUSH
14267: LD_INT 6
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: PUSH
14276: LD_OWVAR 67
14280: ARRAY
14281: PPUSH
14282: CALL_OW 380
// un := CreateHuman ;
14286: LD_ADDR_VAR 0 5
14290: PUSH
14291: CALL_OW 44
14295: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
14296: LD_VAR 0 5
14300: PPUSH
14301: LD_VAR 0 7
14305: PUSH
14306: LD_VAR 0 2
14310: ARRAY
14311: PPUSH
14312: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14316: LD_ADDR_EXP 59
14320: PUSH
14321: LD_EXP 59
14325: PPUSH
14326: LD_EXP 59
14330: PUSH
14331: LD_INT 1
14333: PLUS
14334: PPUSH
14335: LD_VAR 0 5
14339: PPUSH
14340: CALL_OW 1
14344: ST_TO_ADDR
// end ;
14345: GO 14249
14347: POP
14348: POP
14349: GO 14233
14351: POP
14352: POP
// for i := 1 to 3 do
14353: LD_ADDR_VAR 0 2
14357: PUSH
14358: DOUBLE
14359: LD_INT 1
14361: DEC
14362: ST_TO_ADDR
14363: LD_INT 3
14365: PUSH
14366: FOR_TO
14367: IFFALSE 14456
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14369: LD_INT 0
14371: PPUSH
14372: LD_INT 4
14374: PPUSH
14375: LD_INT 4
14377: PUSH
14378: LD_INT 5
14380: PUSH
14381: LD_INT 5
14383: PUSH
14384: LD_INT 6
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: PUSH
14393: LD_OWVAR 67
14397: ARRAY
14398: PPUSH
14399: CALL_OW 380
// un := CreateHuman ;
14403: LD_ADDR_VAR 0 5
14407: PUSH
14408: CALL_OW 44
14412: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
14413: LD_VAR 0 5
14417: PPUSH
14418: LD_INT 17
14420: PPUSH
14421: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14425: LD_ADDR_EXP 59
14429: PUSH
14430: LD_EXP 59
14434: PPUSH
14435: LD_EXP 59
14439: PUSH
14440: LD_INT 1
14442: PLUS
14443: PPUSH
14444: LD_VAR 0 5
14448: PPUSH
14449: CALL_OW 1
14453: ST_TO_ADDR
// end ;
14454: GO 14366
14456: POP
14457: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
14458: LD_ADDR_VAR 0 2
14462: PUSH
14463: DOUBLE
14464: LD_INT 1
14466: DEC
14467: ST_TO_ADDR
14468: LD_INT 2
14470: PUSH
14471: LD_INT 3
14473: PUSH
14474: LD_INT 3
14476: PUSH
14477: LD_INT 3
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: PUSH
14486: LD_OWVAR 67
14490: ARRAY
14491: PUSH
14492: FOR_TO
14493: IFFALSE 14613
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
14495: LD_INT 22
14497: PPUSH
14498: LD_INT 1
14500: PPUSH
14501: LD_INT 1
14503: PPUSH
14504: LD_INT 52
14506: PPUSH
14507: LD_INT 100
14509: PPUSH
14510: CALL 34277 0 5
// veh := CreateVehicle ;
14514: LD_ADDR_VAR 0 6
14518: PUSH
14519: CALL_OW 45
14523: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
14524: LD_INT 0
14526: PPUSH
14527: LD_INT 3
14529: PPUSH
14530: LD_INT 4
14532: PPUSH
14533: CALL_OW 380
// un := CreateHuman ;
14537: LD_ADDR_VAR 0 5
14541: PUSH
14542: CALL_OW 44
14546: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
14547: LD_VAR 0 6
14551: PPUSH
14552: LD_INT 107
14554: PPUSH
14555: LD_INT 182
14557: PPUSH
14558: LD_INT 4
14560: PPUSH
14561: LD_INT 0
14563: PPUSH
14564: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
14568: LD_VAR 0 5
14572: PPUSH
14573: LD_VAR 0 6
14577: PPUSH
14578: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14582: LD_ADDR_EXP 59
14586: PUSH
14587: LD_EXP 59
14591: PPUSH
14592: LD_EXP 59
14596: PUSH
14597: LD_INT 1
14599: PLUS
14600: PPUSH
14601: LD_VAR 0 5
14605: PPUSH
14606: CALL_OW 1
14610: ST_TO_ADDR
// end ;
14611: GO 14492
14613: POP
14614: POP
// InitHc ;
14615: CALL_OW 19
// for i := 1 to [ 3 , 5 , 6 , 8 ] [ Difficulty ] do
14619: LD_ADDR_VAR 0 2
14623: PUSH
14624: DOUBLE
14625: LD_INT 1
14627: DEC
14628: ST_TO_ADDR
14629: LD_INT 3
14631: PUSH
14632: LD_INT 5
14634: PUSH
14635: LD_INT 6
14637: PUSH
14638: LD_INT 8
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: PUSH
14647: LD_OWVAR 67
14651: ARRAY
14652: PUSH
14653: FOR_TO
14654: IFFALSE 14749
// begin uc_nation := 0 ;
14656: LD_ADDR_OWVAR 21
14660: PUSH
14661: LD_INT 0
14663: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
14664: LD_ADDR_OWVAR 28
14668: PUSH
14669: LD_INT 15
14671: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
14672: LD_ADDR_OWVAR 31
14676: PUSH
14677: LD_INT 3
14679: PUSH
14680: LD_INT 0
14682: PUSH
14683: LD_INT 0
14685: PUSH
14686: LD_INT 0
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: ST_TO_ADDR
// un := CreateHuman ;
14695: LD_ADDR_VAR 0 5
14699: PUSH
14700: CALL_OW 44
14704: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
14705: LD_VAR 0 5
14709: PPUSH
14710: LD_INT 269
14712: PUSH
14713: LD_INT 300
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: LD_VAR 0 2
14724: PUSH
14725: LD_INT 2
14727: MOD
14728: PUSH
14729: LD_INT 1
14731: PLUS
14732: ARRAY
14733: PPUSH
14734: LD_INT 182
14736: PPUSH
14737: LD_INT 4
14739: PPUSH
14740: LD_INT 0
14742: PPUSH
14743: CALL_OW 50
// end ;
14747: GO 14653
14749: POP
14750: POP
// uc_nation := 3 ;
14751: LD_ADDR_OWVAR 21
14755: PUSH
14756: LD_INT 3
14758: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14759: LD_EXP 8
14763: PUSH
14764: LD_INT 10
14766: PUSH
14767: LD_INT 8
14769: PUSH
14770: LD_INT 6
14772: PUSH
14773: LD_INT 5
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: PUSH
14782: LD_OWVAR 67
14786: ARRAY
14787: LESS
14788: IFFALSE 14867
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
14790: LD_INT 21
14792: PPUSH
14793: LD_INT 1
14795: PPUSH
14796: LD_INT 1
14798: PPUSH
14799: LD_INT 51
14801: PPUSH
14802: LD_INT 12
14804: PPUSH
14805: CALL 34277 0 5
// veh := CreateVehicle ;
14809: LD_ADDR_VAR 0 6
14813: PUSH
14814: CALL_OW 45
14818: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
14819: LD_VAR 0 6
14823: PPUSH
14824: LD_INT 269
14826: PPUSH
14827: LD_INT 66
14829: PPUSH
14830: LD_INT 4
14832: PPUSH
14833: LD_INT 0
14835: PPUSH
14836: CALL 68898 0 5
// SetLives ( veh , 333 ) ;
14840: LD_VAR 0 6
14844: PPUSH
14845: LD_INT 333
14847: PPUSH
14848: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
14852: LD_VAR 0 6
14856: PPUSH
14857: LD_INT 2
14859: PPUSH
14860: LD_INT 100
14862: PPUSH
14863: CALL_OW 290
// end ; end ;
14867: LD_VAR 0 1
14871: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
14872: LD_EXP 55
14876: PUSH
14877: LD_EXP 55
14881: PPUSH
14882: CALL_OW 255
14886: PUSH
14887: LD_INT 3
14889: EQUAL
14890: AND
14891: IFFALSE 15054
14893: GO 14895
14895: DISABLE
14896: LD_INT 0
14898: PPUSH
// begin enable ;
14899: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
14900: LD_INT 81
14902: PUSH
14903: LD_INT 3
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: LD_INT 91
14912: PUSH
14913: LD_EXP 55
14917: PUSH
14918: LD_INT 15
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: LIST
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PPUSH
14930: CALL_OW 69
14934: IFFALSE 15014
// begin if not IsDrivenBy ( ruBlockadeTank ) then
14936: LD_EXP 55
14940: PPUSH
14941: CALL_OW 311
14945: NOT
14946: IFFALSE 15012
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
14948: LD_ADDR_VAR 0 1
14952: PUSH
14953: LD_INT 22
14955: PUSH
14956: LD_INT 3
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: LD_INT 21
14965: PUSH
14966: LD_INT 1
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PPUSH
14977: CALL_OW 69
14981: PPUSH
14982: LD_EXP 55
14986: PPUSH
14987: CALL_OW 74
14991: ST_TO_ADDR
// if driver then
14992: LD_VAR 0 1
14996: IFFALSE 15012
// ComEnterUnit ( driver , ruBlockadeTank ) ;
14998: LD_VAR 0 1
15002: PPUSH
15003: LD_EXP 55
15007: PPUSH
15008: CALL_OW 120
// end ; exit ;
15012: GO 15054
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
15014: LD_EXP 55
15018: PPUSH
15019: CALL_OW 256
15023: PUSH
15024: LD_INT 1000
15026: LESS
15027: PUSH
15028: LD_EXP 55
15032: PPUSH
15033: CALL_OW 311
15037: AND
15038: IFFALSE 15054
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
15040: LD_EXP 55
15044: PPUSH
15045: CALL_OW 311
15049: PPUSH
15050: CALL 68458 0 1
// end ;
15054: PPOPN 1
15056: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
15057: LD_EXP 57
15061: PPUSH
15062: LD_INT 3
15064: PUSH
15065: LD_INT 24
15067: PUSH
15068: LD_INT 1000
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PPUSH
15079: CALL_OW 72
15083: PUSH
15084: LD_EXP 57
15088: PPUSH
15089: LD_INT 25
15091: PUSH
15092: LD_INT 4
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: LD_INT 50
15101: PUSH
15102: EMPTY
15103: LIST
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PPUSH
15109: CALL_OW 72
15113: AND
15114: IFFALSE 15302
15116: GO 15118
15118: DISABLE
15119: LD_INT 0
15121: PPUSH
15122: PPUSH
15123: PPUSH
// begin enable ;
15124: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
15125: LD_ADDR_VAR 0 3
15129: PUSH
15130: LD_EXP 57
15134: PPUSH
15135: LD_INT 3
15137: PUSH
15138: LD_INT 24
15140: PUSH
15141: LD_INT 1000
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PPUSH
15152: CALL_OW 72
15156: PPUSH
15157: LD_INT 1
15159: PPUSH
15160: CALL 68698 0 2
15164: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
15165: LD_ADDR_VAR 0 2
15169: PUSH
15170: LD_EXP 57
15174: PPUSH
15175: LD_INT 25
15177: PUSH
15178: LD_INT 4
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 50
15187: PUSH
15188: EMPTY
15189: LIST
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PPUSH
15195: CALL_OW 72
15199: PUSH
15200: LD_INT 1
15202: ARRAY
15203: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
15204: LD_VAR 0 2
15208: PPUSH
15209: LD_VAR 0 3
15213: PUSH
15214: LD_INT 1
15216: ARRAY
15217: PPUSH
15218: CALL 64052 0 2
15222: NOT
15223: IFFALSE 15302
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
15225: LD_VAR 0 3
15229: PUSH
15230: LD_INT 1
15232: ARRAY
15233: PPUSH
15234: LD_INT 9
15236: PPUSH
15237: CALL_OW 308
15241: NOT
15242: IFFALSE 15260
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
15244: LD_VAR 0 3
15248: PUSH
15249: LD_INT 1
15251: ARRAY
15252: PPUSH
15253: LD_INT 9
15255: PPUSH
15256: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
15260: LD_VAR 0 2
15264: PPUSH
15265: LD_VAR 0 3
15269: PUSH
15270: LD_INT 1
15272: ARRAY
15273: PPUSH
15274: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
15278: LD_VAR 0 2
15282: PPUSH
15283: LD_INT 179
15285: PPUSH
15286: LD_INT 113
15288: PPUSH
15289: CALL_OW 171
// AddComHold ( sci ) ;
15293: LD_VAR 0 2
15297: PPUSH
15298: CALL_OW 200
// end ; end ;
15302: PPOPN 3
15304: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
15305: LD_INT 2
15307: PPUSH
15308: LD_INT 52
15310: PPUSH
15311: CALL_OW 292
15315: IFFALSE 15420
15317: GO 15319
15319: DISABLE
15320: LD_INT 0
15322: PPUSH
15323: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
15324: LD_ADDR_VAR 0 2
15328: PUSH
15329: LD_EXP 59
15333: PPUSH
15334: LD_INT 25
15336: PUSH
15337: LD_INT 1
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 50
15346: PUSH
15347: EMPTY
15348: LIST
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PPUSH
15354: CALL_OW 72
15358: ST_TO_ADDR
// if not tmp then
15359: LD_VAR 0 2
15363: NOT
15364: IFFALSE 15368
// exit ;
15366: GO 15420
// for i in tmp do
15368: LD_ADDR_VAR 0 1
15372: PUSH
15373: LD_VAR 0 2
15377: PUSH
15378: FOR_IN
15379: IFFALSE 15418
// begin if IsInUnit ( i ) then
15381: LD_VAR 0 1
15385: PPUSH
15386: CALL_OW 310
15390: IFFALSE 15401
// ComExitBuilding ( i ) ;
15392: LD_VAR 0 1
15396: PPUSH
15397: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
15401: LD_VAR 0 1
15405: PPUSH
15406: LD_INT 84
15408: PPUSH
15409: LD_INT 133
15411: PPUSH
15412: CALL_OW 174
// end ;
15416: GO 15378
15418: POP
15419: POP
// end ;
15420: PPOPN 2
15422: END
// every 0 0$10 trigger leninSpotted do var i , tmp , weapon ;
15423: LD_EXP 14
15427: IFFALSE 15608
15429: GO 15431
15431: DISABLE
15432: LD_INT 0
15434: PPUSH
15435: PPUSH
15436: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
15437: LD_ADDR_VAR 0 2
15441: PUSH
15442: LD_INT 72
15444: PUSH
15445: LD_INT 12
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
15452: LD_ADDR_VAR 0 3
15456: PUSH
15457: LD_INT 44
15459: PUSH
15460: LD_INT 43
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 45
15469: PUSH
15470: LD_INT 44
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 45
15479: PUSH
15480: LD_INT 46
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 45
15489: PUSH
15490: LD_INT 46
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: PUSH
15503: LD_OWVAR 67
15507: ARRAY
15508: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
15509: LD_ADDR_VAR 0 1
15513: PUSH
15514: DOUBLE
15515: LD_INT 1
15517: DEC
15518: ST_TO_ADDR
15519: LD_INT 1
15521: PUSH
15522: LD_INT 2
15524: PUSH
15525: LD_INT 2
15527: PUSH
15528: LD_INT 3
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: PUSH
15537: LD_OWVAR 67
15541: ARRAY
15542: PUSH
15543: FOR_TO
15544: IFFALSE 15606
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
15546: LD_VAR 0 2
15550: PPUSH
15551: LD_INT 22
15553: PUSH
15554: LD_INT 23
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_VAR 0 1
15565: PUSH
15566: LD_INT 2
15568: MOD
15569: PUSH
15570: LD_INT 1
15572: PLUS
15573: ARRAY
15574: PPUSH
15575: LD_INT 1
15577: PPUSH
15578: LD_INT 1
15580: PPUSH
15581: LD_VAR 0 3
15585: PUSH
15586: LD_VAR 0 1
15590: PUSH
15591: LD_INT 2
15593: MOD
15594: PUSH
15595: LD_INT 1
15597: PLUS
15598: ARRAY
15599: PPUSH
15600: CALL_OW 185
15604: GO 15543
15606: POP
15607: POP
// end ;
15608: PPOPN 3
15610: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
15611: LD_EXP 11
15615: IFFALSE 16764
15617: GO 15619
15619: DISABLE
15620: LD_INT 0
15622: PPUSH
15623: PPUSH
15624: PPUSH
15625: PPUSH
15626: PPUSH
15627: PPUSH
// begin enable ;
15628: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
15629: LD_ADDR_VAR 0 6
15633: PUSH
15634: LD_INT 10
15636: PPUSH
15637: LD_INT 81
15639: PUSH
15640: LD_INT 3
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PPUSH
15647: CALL_OW 70
15651: ST_TO_ADDR
// if ruSpecialVehicleGroup then
15652: LD_EXP 60
15656: IFFALSE 15922
// begin for i in ruSpecialVehicleGroup do
15658: LD_ADDR_VAR 0 1
15662: PUSH
15663: LD_EXP 60
15667: PUSH
15668: FOR_IN
15669: IFFALSE 15920
// begin if enemyInBase then
15671: LD_VAR 0 6
15675: IFFALSE 15918
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
15677: LD_VAR 0 1
15681: PPUSH
15682: CALL_OW 256
15686: PUSH
15687: LD_INT 500
15689: GREATER
15690: PUSH
15691: LD_VAR 0 1
15695: PPUSH
15696: CALL_OW 110
15700: PUSH
15701: LD_INT 0
15703: EQUAL
15704: AND
15705: IFFALSE 15731
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
15707: LD_VAR 0 1
15711: PPUSH
15712: LD_VAR 0 6
15716: PPUSH
15717: LD_VAR 0 1
15721: PPUSH
15722: CALL_OW 74
15726: PPUSH
15727: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15731: LD_VAR 0 1
15735: PPUSH
15736: CALL_OW 256
15740: PUSH
15741: LD_INT 500
15743: LESSEQUAL
15744: PUSH
15745: LD_VAR 0 1
15749: PPUSH
15750: CALL_OW 110
15754: PUSH
15755: LD_INT 0
15757: EQUAL
15758: AND
15759: IFFALSE 15788
// begin SetTag ( i , 1 ) ;
15761: LD_VAR 0 1
15765: PPUSH
15766: LD_INT 1
15768: PPUSH
15769: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
15773: LD_VAR 0 1
15777: PPUSH
15778: LD_INT 83
15780: PPUSH
15781: LD_INT 134
15783: PPUSH
15784: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
15788: LD_VAR 0 1
15792: PPUSH
15793: CALL_OW 256
15797: PUSH
15798: LD_INT 1000
15800: LESS
15801: PUSH
15802: LD_VAR 0 1
15806: PPUSH
15807: CALL_OW 110
15811: PUSH
15812: LD_INT 1
15814: EQUAL
15815: AND
15816: PUSH
15817: LD_VAR 0 1
15821: PPUSH
15822: LD_INT 83
15824: PPUSH
15825: LD_INT 134
15827: PPUSH
15828: CALL_OW 297
15832: PUSH
15833: LD_INT 6
15835: LESS
15836: AND
15837: IFFALSE 15865
// begin SetFuel ( i , 100 ) ;
15839: LD_VAR 0 1
15843: PPUSH
15844: LD_INT 100
15846: PPUSH
15847: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
15851: LD_VAR 0 1
15855: PPUSH
15856: CALL_OW 310
15860: PPUSH
15861: CALL 68578 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
15865: LD_VAR 0 1
15869: PPUSH
15870: CALL_OW 256
15874: PUSH
15875: LD_INT 1000
15877: EQUAL
15878: PUSH
15879: LD_VAR 0 1
15883: PPUSH
15884: CALL_OW 110
15888: PUSH
15889: LD_INT 1
15891: EQUAL
15892: AND
15893: PUSH
15894: LD_VAR 0 1
15898: PPUSH
15899: CALL_OW 311
15903: AND
15904: IFFALSE 15918
// SetTag ( i , 0 ) ;
15906: LD_VAR 0 1
15910: PPUSH
15911: LD_INT 0
15913: PPUSH
15914: CALL_OW 109
// end ; end ;
15918: GO 15668
15920: POP
15921: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
15922: LD_ADDR_VAR 0 5
15926: PUSH
15927: LD_EXP 59
15931: PPUSH
15932: LD_INT 25
15934: PUSH
15935: LD_INT 4
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 72
15946: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15947: LD_ADDR_VAR 0 4
15951: PUSH
15952: LD_EXP 59
15956: PPUSH
15957: LD_INT 92
15959: PUSH
15960: LD_INT 92
15962: PUSH
15963: LD_INT 155
15965: PUSH
15966: LD_INT 12
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 3
15977: PUSH
15978: LD_INT 24
15980: PUSH
15981: LD_INT 1000
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PPUSH
15996: CALL_OW 72
16000: ST_TO_ADDR
// if sci then
16001: LD_VAR 0 5
16005: IFFALSE 16138
// begin if hurt then
16007: LD_VAR 0 4
16011: IFFALSE 16084
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16013: LD_VAR 0 5
16017: PPUSH
16018: LD_INT 3
16020: PUSH
16021: LD_INT 54
16023: PUSH
16024: EMPTY
16025: LIST
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PPUSH
16031: CALL_OW 72
16035: IFFALSE 16064
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
16037: LD_VAR 0 5
16041: PPUSH
16042: LD_INT 3
16044: PUSH
16045: LD_INT 54
16047: PUSH
16048: EMPTY
16049: LIST
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PPUSH
16055: CALL_OW 72
16059: PPUSH
16060: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
16064: LD_VAR 0 5
16068: PPUSH
16069: LD_VAR 0 4
16073: PUSH
16074: LD_INT 1
16076: ARRAY
16077: PPUSH
16078: CALL_OW 188
// end else
16082: GO 16138
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16084: LD_VAR 0 5
16088: PPUSH
16089: LD_INT 3
16091: PUSH
16092: LD_INT 54
16094: PUSH
16095: EMPTY
16096: LIST
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PPUSH
16102: CALL_OW 72
16106: IFFALSE 16138
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
16108: LD_VAR 0 5
16112: PPUSH
16113: LD_INT 3
16115: PUSH
16116: LD_INT 54
16118: PUSH
16119: EMPTY
16120: LIST
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PPUSH
16126: CALL_OW 72
16130: PPUSH
16131: LD_INT 17
16133: PPUSH
16134: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16138: LD_ADDR_VAR 0 3
16142: PUSH
16143: LD_INT 10
16145: PPUSH
16146: LD_INT 21
16148: PUSH
16149: LD_INT 3
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 3
16158: PUSH
16159: LD_INT 24
16161: PUSH
16162: LD_INT 1000
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PPUSH
16177: CALL_OW 70
16181: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
16182: LD_ADDR_VAR 0 2
16186: PUSH
16187: LD_EXP 59
16191: PPUSH
16192: LD_INT 25
16194: PUSH
16195: LD_INT 2
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PPUSH
16202: CALL_OW 72
16206: PUSH
16207: LD_INT 22
16209: PUSH
16210: LD_INT 3
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 34
16219: PUSH
16220: LD_INT 52
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PPUSH
16231: CALL_OW 69
16235: UNION
16236: ST_TO_ADDR
// if not tmp then
16237: LD_VAR 0 2
16241: NOT
16242: IFFALSE 16246
// exit ;
16244: GO 16764
// for i in tmp do
16246: LD_ADDR_VAR 0 1
16250: PUSH
16251: LD_VAR 0 2
16255: PUSH
16256: FOR_IN
16257: IFFALSE 16762
// begin if GetClass ( i ) = 2 then
16259: LD_VAR 0 1
16263: PPUSH
16264: CALL_OW 257
16268: PUSH
16269: LD_INT 2
16271: EQUAL
16272: IFFALSE 16495
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16274: LD_VAR 0 1
16278: PPUSH
16279: CALL_OW 256
16283: PUSH
16284: LD_INT 1000
16286: EQUAL
16287: PUSH
16288: LD_VAR 0 1
16292: PPUSH
16293: CALL_OW 110
16297: PUSH
16298: LD_INT 1
16300: EQUAL
16301: AND
16302: IFFALSE 16316
// SetTag ( i , 0 ) ;
16304: LD_VAR 0 1
16308: PPUSH
16309: LD_INT 0
16311: PPUSH
16312: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16316: LD_VAR 0 1
16320: PPUSH
16321: CALL_OW 256
16325: PUSH
16326: LD_INT 500
16328: LESSEQUAL
16329: PUSH
16330: LD_VAR 0 1
16334: PPUSH
16335: CALL_OW 110
16339: PUSH
16340: LD_INT 0
16342: EQUAL
16343: AND
16344: IFFALSE 16373
// begin SetTag ( i , 1 ) ;
16346: LD_VAR 0 1
16350: PPUSH
16351: LD_INT 1
16353: PPUSH
16354: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
16358: LD_VAR 0 1
16362: PPUSH
16363: LD_INT 92
16365: PPUSH
16366: LD_INT 155
16368: PPUSH
16369: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
16373: LD_VAR 0 3
16377: PUSH
16378: LD_VAR 0 1
16382: PPUSH
16383: CALL_OW 256
16387: PUSH
16388: LD_INT 500
16390: GREATER
16391: AND
16392: PUSH
16393: LD_VAR 0 1
16397: PPUSH
16398: CALL_OW 110
16402: PUSH
16403: LD_INT 0
16405: EQUAL
16406: AND
16407: PUSH
16408: LD_VAR 0 1
16412: PPUSH
16413: CALL_OW 314
16417: NOT
16418: AND
16419: IFFALSE 16493
// begin if b then
16421: LD_VAR 0 3
16425: IFFALSE 16457
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16427: LD_VAR 0 1
16431: PPUSH
16432: LD_VAR 0 3
16436: PUSH
16437: LD_INT 1
16439: PPUSH
16440: LD_VAR 0 3
16444: PPUSH
16445: CALL_OW 12
16449: ARRAY
16450: PPUSH
16451: CALL_OW 130
16455: GO 16493
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16457: LD_VAR 0 1
16461: PPUSH
16462: LD_INT 94
16464: PPUSH
16465: LD_INT 165
16467: PPUSH
16468: CALL_OW 297
16472: PUSH
16473: LD_INT 8
16475: GREATER
16476: IFFALSE 16493
// ComMoveXY ( i , 94 , 165 ) ;
16478: LD_VAR 0 1
16482: PPUSH
16483: LD_INT 94
16485: PPUSH
16486: LD_INT 165
16488: PPUSH
16489: CALL_OW 111
// end ; end else
16493: GO 16760
// if GetWeapon ( i ) = ru_crane then
16495: LD_VAR 0 1
16499: PPUSH
16500: CALL_OW 264
16504: PUSH
16505: LD_INT 52
16507: EQUAL
16508: IFFALSE 16760
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16510: LD_VAR 0 1
16514: PPUSH
16515: CALL_OW 256
16519: PUSH
16520: LD_INT 1000
16522: EQUAL
16523: PUSH
16524: LD_VAR 0 1
16528: PPUSH
16529: CALL_OW 110
16533: PUSH
16534: LD_INT 1
16536: EQUAL
16537: AND
16538: IFFALSE 16564
// begin SetTag ( i , 0 ) ;
16540: LD_VAR 0 1
16544: PPUSH
16545: LD_INT 0
16547: PPUSH
16548: CALL_OW 109
// SetFuel ( i , 100 ) ;
16552: LD_VAR 0 1
16556: PPUSH
16557: LD_INT 100
16559: PPUSH
16560: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16564: LD_VAR 0 1
16568: PPUSH
16569: CALL_OW 256
16573: PUSH
16574: LD_INT 500
16576: LESSEQUAL
16577: PUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL_OW 110
16587: PUSH
16588: LD_INT 0
16590: EQUAL
16591: AND
16592: IFFALSE 16635
// begin SetTag ( i , 1 ) ;
16594: LD_VAR 0 1
16598: PPUSH
16599: LD_INT 1
16601: PPUSH
16602: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
16606: LD_VAR 0 1
16610: PPUSH
16611: LD_INT 83
16613: PPUSH
16614: LD_INT 135
16616: PPUSH
16617: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
16621: LD_VAR 0 1
16625: PPUSH
16626: CALL_OW 310
16630: PPUSH
16631: CALL 68578 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
16635: LD_VAR 0 1
16639: PPUSH
16640: CALL_OW 256
16644: PUSH
16645: LD_INT 500
16647: GREATER
16648: PUSH
16649: LD_VAR 0 1
16653: PPUSH
16654: CALL_OW 110
16658: PUSH
16659: LD_INT 0
16661: EQUAL
16662: AND
16663: PUSH
16664: LD_VAR 0 1
16668: PPUSH
16669: CALL_OW 311
16673: AND
16674: PUSH
16675: LD_VAR 0 1
16679: PPUSH
16680: CALL_OW 314
16684: NOT
16685: AND
16686: IFFALSE 16760
// begin if b then
16688: LD_VAR 0 3
16692: IFFALSE 16724
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16694: LD_VAR 0 1
16698: PPUSH
16699: LD_VAR 0 3
16703: PUSH
16704: LD_INT 1
16706: PPUSH
16707: LD_VAR 0 3
16711: PPUSH
16712: CALL_OW 12
16716: ARRAY
16717: PPUSH
16718: CALL_OW 130
16722: GO 16760
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16724: LD_VAR 0 1
16728: PPUSH
16729: LD_INT 94
16731: PPUSH
16732: LD_INT 165
16734: PPUSH
16735: CALL_OW 297
16739: PUSH
16740: LD_INT 8
16742: GREATER
16743: IFFALSE 16760
// ComMoveXY ( i , 94 , 165 ) ;
16745: LD_VAR 0 1
16749: PPUSH
16750: LD_INT 94
16752: PPUSH
16753: LD_INT 165
16755: PPUSH
16756: CALL_OW 111
// end ; end ; end ;
16760: GO 16256
16762: POP
16763: POP
// end ;
16764: PPOPN 6
16766: END
// every 10 10$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp , tmp2 ;
16767: LD_EXP 23
16771: NOT
16772: PUSH
16773: LD_EXP 27
16777: NOT
16778: AND
16779: IFFALSE 17694
16781: GO 16783
16783: DISABLE
16784: LD_INT 0
16786: PPUSH
16787: PPUSH
16788: PPUSH
16789: PPUSH
16790: PPUSH
// begin enable ;
16791: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
16792: LD_INT 35
16794: PUSH
16795: LD_INT 45
16797: PUSH
16798: LD_INT 55
16800: PUSH
16801: LD_INT 60
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: PUSH
16810: LD_OWVAR 67
16814: ARRAY
16815: PPUSH
16816: CALL_OW 13
16820: IFFALSE 16836
// waveStrength := waveStrength + 1 ;
16822: LD_ADDR_EXP 62
16826: PUSH
16827: LD_EXP 62
16831: PUSH
16832: LD_INT 1
16834: PLUS
16835: ST_TO_ADDR
// if waveStrength > [ 2 , 3 , 4 , 4 ] [ Difficulty ] then
16836: LD_EXP 62
16840: PUSH
16841: LD_INT 2
16843: PUSH
16844: LD_INT 3
16846: PUSH
16847: LD_INT 4
16849: PUSH
16850: LD_INT 4
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: PUSH
16859: LD_OWVAR 67
16863: ARRAY
16864: GREATER
16865: IFFALSE 16897
// begin waveStrength := waveStrength + 2 ;
16867: LD_ADDR_EXP 62
16871: PUSH
16872: LD_EXP 62
16876: PUSH
16877: LD_INT 2
16879: PLUS
16880: ST_TO_ADDR
// disableAttackOnHeike := true ;
16881: LD_ADDR_EXP 27
16885: PUSH
16886: LD_INT 1
16888: ST_TO_ADDR
// disable ;
16889: DISABLE
// wait ( 3 3$00 ) ;
16890: LD_INT 6300
16892: PPUSH
16893: CALL_OW 67
// end ; for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
16897: LD_ADDR_VAR 0 1
16901: PUSH
16902: DOUBLE
16903: LD_INT 1
16905: DEC
16906: ST_TO_ADDR
16907: LD_INT 2
16909: PUSH
16910: LD_INT 2
16912: PUSH
16913: LD_INT 3
16915: PUSH
16916: LD_INT 4
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: PUSH
16925: LD_OWVAR 67
16929: ARRAY
16930: PUSH
16931: FOR_TO
16932: IFFALSE 17093
// begin InitHc ;
16934: CALL_OW 19
// InitVc ;
16938: CALL_OW 20
// uc_side := 3 ;
16942: LD_ADDR_OWVAR 20
16946: PUSH
16947: LD_INT 3
16949: ST_TO_ADDR
// uc_nation := 3 ;
16950: LD_ADDR_OWVAR 21
16954: PUSH
16955: LD_INT 3
16957: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
16958: LD_INT 0
16960: PPUSH
16961: LD_INT 1
16963: PPUSH
16964: LD_OWVAR 67
16968: PUSH
16969: LD_INT 2
16971: PLUS
16972: PPUSH
16973: CALL_OW 380
// un := CreateHuman ;
16977: LD_ADDR_VAR 0 2
16981: PUSH
16982: CALL_OW 44
16986: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
16987: LD_VAR 0 2
16991: PPUSH
16992: LD_INT 160
16994: PPUSH
16995: LD_INT 3
16997: PPUSH
16998: LD_INT 2
17000: PPUSH
17001: LD_INT 0
17003: PPUSH
17004: CALL 68898 0 5
// SetClass ( un , class_bazooker ) ;
17008: LD_VAR 0 2
17012: PPUSH
17013: LD_INT 9
17015: PPUSH
17016: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17020: LD_ADDR_EXP 61
17024: PUSH
17025: LD_EXP 61
17029: PPUSH
17030: LD_EXP 61
17034: PUSH
17035: LD_INT 1
17037: PLUS
17038: PPUSH
17039: LD_VAR 0 2
17043: PPUSH
17044: CALL_OW 1
17048: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17049: LD_VAR 0 2
17053: PPUSH
17054: LD_INT 177
17056: PPUSH
17057: LD_INT 17
17059: PPUSH
17060: CALL_OW 111
// wait ( 0 0$2 ) ;
17064: LD_INT 70
17066: PPUSH
17067: CALL_OW 67
// tmp2 := Join ( tmp2 , un ) ;
17071: LD_ADDR_VAR 0 5
17075: PUSH
17076: LD_VAR 0 5
17080: PPUSH
17081: LD_VAR 0 2
17085: PPUSH
17086: CALL 66758 0 2
17090: ST_TO_ADDR
// end ;
17091: GO 16931
17093: POP
17094: POP
// AddComAgressiveMove ( tmp2 , 196 , 53 ) ;
17095: LD_VAR 0 5
17099: PPUSH
17100: LD_INT 196
17102: PPUSH
17103: LD_INT 53
17105: PPUSH
17106: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 199 , 62 ) ;
17110: LD_VAR 0 5
17114: PPUSH
17115: LD_INT 199
17117: PPUSH
17118: LD_INT 62
17120: PPUSH
17121: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 205 , 75 ) ;
17125: LD_VAR 0 5
17129: PPUSH
17130: LD_INT 205
17132: PPUSH
17133: LD_INT 75
17135: PPUSH
17136: CALL_OW 174
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + waveStrength do
17140: LD_ADDR_VAR 0 1
17144: PUSH
17145: DOUBLE
17146: LD_INT 1
17148: DEC
17149: ST_TO_ADDR
17150: LD_INT 2
17152: PUSH
17153: LD_INT 3
17155: PUSH
17156: LD_INT 3
17158: PUSH
17159: LD_INT 4
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: PUSH
17168: LD_OWVAR 67
17172: ARRAY
17173: PUSH
17174: LD_EXP 62
17178: PLUS
17179: PUSH
17180: FOR_TO
17181: IFFALSE 17490
// begin InitHc ;
17183: CALL_OW 19
// InitVc ;
17187: CALL_OW 20
// uc_side := 3 ;
17191: LD_ADDR_OWVAR 20
17195: PUSH
17196: LD_INT 3
17198: ST_TO_ADDR
// uc_nation := 3 ;
17199: LD_ADDR_OWVAR 21
17203: PUSH
17204: LD_INT 3
17206: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
17207: LD_INT 22
17209: PUSH
17210: LD_INT 23
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 1
17219: PPUSH
17220: LD_INT 2
17222: PPUSH
17223: CALL_OW 12
17227: ARRAY
17228: PPUSH
17229: LD_INT 1
17231: PPUSH
17232: LD_INT 1
17234: PPUSH
17235: LD_INT 44
17237: PUSH
17238: LD_INT 45
17240: PUSH
17241: LD_INT 43
17243: PUSH
17244: LD_INT 42
17246: PUSH
17247: LD_INT 44
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 1
17259: PPUSH
17260: LD_INT 5
17262: PPUSH
17263: CALL_OW 12
17267: ARRAY
17268: PPUSH
17269: LD_INT 99
17271: PPUSH
17272: CALL 34277 0 5
// veh := CreateVehicle ;
17276: LD_ADDR_VAR 0 3
17280: PUSH
17281: CALL_OW 45
17285: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
17286: LD_VAR 0 3
17290: PPUSH
17291: LD_INT 160
17293: PPUSH
17294: LD_INT 3
17296: PPUSH
17297: LD_INT 2
17299: PPUSH
17300: LD_INT 0
17302: PPUSH
17303: CALL 68898 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17307: LD_ADDR_EXP 61
17311: PUSH
17312: LD_EXP 61
17316: PPUSH
17317: LD_EXP 61
17321: PUSH
17322: LD_INT 1
17324: PLUS
17325: PPUSH
17326: LD_VAR 0 3
17330: PPUSH
17331: CALL_OW 1
17335: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
17336: LD_INT 0
17338: PPUSH
17339: LD_INT 3
17341: PPUSH
17342: LD_OWVAR 67
17346: PUSH
17347: LD_INT 2
17349: PLUS
17350: PPUSH
17351: CALL_OW 380
// un := CreateHuman ;
17355: LD_ADDR_VAR 0 2
17359: PUSH
17360: CALL_OW 44
17364: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17365: LD_VAR 0 2
17369: PPUSH
17370: LD_VAR 0 3
17374: PPUSH
17375: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17379: LD_ADDR_EXP 61
17383: PUSH
17384: LD_EXP 61
17388: PPUSH
17389: LD_EXP 61
17393: PUSH
17394: LD_INT 1
17396: PLUS
17397: PPUSH
17398: LD_VAR 0 2
17402: PPUSH
17403: CALL_OW 1
17407: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17408: LD_VAR 0 2
17412: PPUSH
17413: LD_INT 177
17415: PPUSH
17416: LD_INT 17
17418: PPUSH
17419: CALL_OW 111
// wait ( 0 0$2 ) ;
17423: LD_INT 70
17425: PPUSH
17426: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17430: LD_ADDR_VAR 0 4
17434: PUSH
17435: LD_VAR 0 4
17439: PPUSH
17440: LD_VAR 0 4
17444: PUSH
17445: LD_INT 1
17447: PLUS
17448: PPUSH
17449: LD_VAR 0 3
17453: PPUSH
17454: CALL_OW 1
17458: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17459: LD_ADDR_VAR 0 4
17463: PUSH
17464: LD_VAR 0 4
17468: PPUSH
17469: LD_VAR 0 4
17473: PUSH
17474: LD_INT 1
17476: PLUS
17477: PPUSH
17478: LD_VAR 0 2
17482: PPUSH
17483: CALL_OW 1
17487: ST_TO_ADDR
// end ;
17488: GO 17180
17490: POP
17491: POP
// for i in tmp do
17492: LD_ADDR_VAR 0 1
17496: PUSH
17497: LD_VAR 0 4
17501: PUSH
17502: FOR_IN
17503: IFFALSE 17584
// AgressiveMove ( i , [ [ 206 , 37 ] , [ 239 , 53 ] , [ 260 , 67 ] , [ 263 , 79 ] , [ 257 , 105 ] , [ 227 , 97 ] ] ) ;
17505: LD_VAR 0 1
17509: PPUSH
17510: LD_INT 206
17512: PUSH
17513: LD_INT 37
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 239
17522: PUSH
17523: LD_INT 53
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 260
17532: PUSH
17533: LD_INT 67
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 263
17542: PUSH
17543: LD_INT 79
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 257
17552: PUSH
17553: LD_INT 105
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 227
17562: PUSH
17563: LD_INT 97
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: PPUSH
17578: CALL 69362 0 2
17582: GO 17502
17584: POP
17585: POP
// repeat wait ( 0 0$2 ) ;
17586: LD_INT 70
17588: PPUSH
17589: CALL_OW 67
// for i in tmp do
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_VAR 0 4
17602: PUSH
17603: FOR_IN
17604: IFFALSE 17671
// if IsDead ( i ) then
17606: LD_VAR 0 1
17610: PPUSH
17611: CALL_OW 301
17615: IFFALSE 17635
// tmp := tmp diff i else
17617: LD_ADDR_VAR 0 4
17621: PUSH
17622: LD_VAR 0 4
17626: PUSH
17627: LD_VAR 0 1
17631: DIFF
17632: ST_TO_ADDR
17633: GO 17669
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
17635: LD_VAR 0 1
17639: PPUSH
17640: LD_INT 81
17642: PUSH
17643: LD_INT 3
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PPUSH
17650: CALL_OW 69
17654: PPUSH
17655: LD_VAR 0 1
17659: PPUSH
17660: CALL_OW 74
17664: PPUSH
17665: CALL_OW 115
17669: GO 17603
17671: POP
17672: POP
// until not tmp ;
17673: LD_VAR 0 4
17677: NOT
17678: IFFALSE 17586
// if firstAttack then
17680: LD_EXP 28
17684: IFFALSE 17694
// firstAttack := false ;
17686: LD_ADDR_EXP 28
17690: PUSH
17691: LD_INT 0
17693: ST_TO_ADDR
// end ;
17694: PPOPN 5
17696: END
// every 12 12$00 + 3 3$00 trigger not omarAttack and not rolfAttack and bergkampfArrived and not disableAttackOnHeike do var i , un , veh , tmp ;
17697: LD_EXP 23
17701: NOT
17702: PUSH
17703: LD_EXP 32
17707: NOT
17708: AND
17709: PUSH
17710: LD_EXP 3
17714: AND
17715: PUSH
17716: LD_EXP 27
17720: NOT
17721: AND
17722: IFFALSE 18639
17724: GO 17726
17726: DISABLE
17727: LD_INT 0
17729: PPUSH
17730: PPUSH
17731: PPUSH
17732: PPUSH
// begin enable ;
17733: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
17734: LD_ADDR_VAR 0 1
17738: PUSH
17739: DOUBLE
17740: LD_INT 1
17742: DEC
17743: ST_TO_ADDR
17744: LD_INT 1
17746: PUSH
17747: LD_INT 2
17749: PUSH
17750: LD_INT 2
17752: PUSH
17753: LD_INT 3
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: PUSH
17762: LD_OWVAR 67
17766: ARRAY
17767: PUSH
17768: FOR_TO
17769: IFFALSE 18070
// begin InitHc ;
17771: CALL_OW 19
// InitVc ;
17775: CALL_OW 20
// uc_side := 3 ;
17779: LD_ADDR_OWVAR 20
17783: PUSH
17784: LD_INT 3
17786: ST_TO_ADDR
// uc_nation := 3 ;
17787: LD_ADDR_OWVAR 21
17791: PUSH
17792: LD_INT 3
17794: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
17795: LD_INT 22
17797: PUSH
17798: LD_INT 23
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 1
17807: PPUSH
17808: LD_INT 2
17810: PPUSH
17811: CALL_OW 12
17815: ARRAY
17816: PPUSH
17817: LD_INT 1
17819: PPUSH
17820: LD_INT 1
17822: PPUSH
17823: LD_INT 44
17825: PUSH
17826: LD_INT 43
17828: PUSH
17829: LD_INT 42
17831: PUSH
17832: LD_INT 44
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 1
17843: PPUSH
17844: LD_INT 4
17846: PPUSH
17847: CALL_OW 12
17851: ARRAY
17852: PPUSH
17853: LD_INT 99
17855: PPUSH
17856: CALL 34277 0 5
// veh := CreateVehicle ;
17860: LD_ADDR_VAR 0 3
17864: PUSH
17865: CALL_OW 45
17869: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
17870: LD_VAR 0 3
17874: PPUSH
17875: LD_INT 5
17877: PPUSH
17878: LD_INT 3
17880: PPUSH
17881: LD_INT 2
17883: PPUSH
17884: LD_INT 0
17886: PPUSH
17887: CALL 68898 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17891: LD_ADDR_EXP 61
17895: PUSH
17896: LD_EXP 61
17900: PPUSH
17901: LD_EXP 61
17905: PUSH
17906: LD_INT 1
17908: PLUS
17909: PPUSH
17910: LD_VAR 0 3
17914: PPUSH
17915: CALL_OW 1
17919: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
17920: LD_INT 0
17922: PPUSH
17923: LD_INT 3
17925: PPUSH
17926: LD_OWVAR 67
17930: PPUSH
17931: CALL_OW 380
// un := CreateHuman ;
17935: LD_ADDR_VAR 0 2
17939: PUSH
17940: CALL_OW 44
17944: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17945: LD_VAR 0 2
17949: PPUSH
17950: LD_VAR 0 3
17954: PPUSH
17955: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17959: LD_ADDR_EXP 61
17963: PUSH
17964: LD_EXP 61
17968: PPUSH
17969: LD_EXP 61
17973: PUSH
17974: LD_INT 1
17976: PLUS
17977: PPUSH
17978: LD_VAR 0 2
17982: PPUSH
17983: CALL_OW 1
17987: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
17988: LD_VAR 0 2
17992: PPUSH
17993: LD_INT 23
17995: PPUSH
17996: LD_INT 7
17998: PPUSH
17999: CALL_OW 111
// wait ( 0 0$2 ) ;
18003: LD_INT 70
18005: PPUSH
18006: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18010: LD_ADDR_VAR 0 4
18014: PUSH
18015: LD_VAR 0 4
18019: PPUSH
18020: LD_VAR 0 4
18024: PUSH
18025: LD_INT 1
18027: PLUS
18028: PPUSH
18029: LD_VAR 0 3
18033: PPUSH
18034: CALL_OW 1
18038: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18039: LD_ADDR_VAR 0 4
18043: PUSH
18044: LD_VAR 0 4
18048: PPUSH
18049: LD_VAR 0 4
18053: PUSH
18054: LD_INT 1
18056: PLUS
18057: PPUSH
18058: LD_VAR 0 2
18062: PPUSH
18063: CALL_OW 1
18067: ST_TO_ADDR
// end ;
18068: GO 17768
18070: POP
18071: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
18072: LD_ADDR_VAR 0 1
18076: PUSH
18077: DOUBLE
18078: LD_INT 1
18080: DEC
18081: ST_TO_ADDR
18082: LD_INT 2
18084: PUSH
18085: LD_INT 3
18087: PUSH
18088: LD_INT 3
18090: PUSH
18091: LD_INT 4
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: PUSH
18100: LD_OWVAR 67
18104: ARRAY
18105: PUSH
18106: FOR_TO
18107: IFFALSE 18416
// begin InitHc ;
18109: CALL_OW 19
// InitVc ;
18113: CALL_OW 20
// uc_side := 3 ;
18117: LD_ADDR_OWVAR 20
18121: PUSH
18122: LD_INT 3
18124: ST_TO_ADDR
// uc_nation := 3 ;
18125: LD_ADDR_OWVAR 21
18129: PUSH
18130: LD_INT 3
18132: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
18133: LD_INT 22
18135: PUSH
18136: LD_INT 23
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 1
18145: PPUSH
18146: LD_INT 2
18148: PPUSH
18149: CALL_OW 12
18153: ARRAY
18154: PPUSH
18155: LD_INT 1
18157: PPUSH
18158: LD_INT 1
18160: PPUSH
18161: LD_INT 44
18163: PUSH
18164: LD_INT 45
18166: PUSH
18167: LD_INT 43
18169: PUSH
18170: LD_INT 42
18172: PUSH
18173: LD_INT 44
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 1
18185: PPUSH
18186: LD_INT 5
18188: PPUSH
18189: CALL_OW 12
18193: ARRAY
18194: PPUSH
18195: LD_INT 99
18197: PPUSH
18198: CALL 34277 0 5
// veh := CreateVehicle ;
18202: LD_ADDR_VAR 0 3
18206: PUSH
18207: CALL_OW 45
18211: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
18212: LD_VAR 0 3
18216: PPUSH
18217: LD_INT 127
18219: PPUSH
18220: LD_INT 243
18222: PPUSH
18223: LD_INT 0
18225: PPUSH
18226: LD_INT 0
18228: PPUSH
18229: CALL 68898 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18233: LD_ADDR_EXP 61
18237: PUSH
18238: LD_EXP 61
18242: PPUSH
18243: LD_EXP 61
18247: PUSH
18248: LD_INT 1
18250: PLUS
18251: PPUSH
18252: LD_VAR 0 3
18256: PPUSH
18257: CALL_OW 1
18261: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
18262: LD_INT 0
18264: PPUSH
18265: LD_INT 3
18267: PPUSH
18268: LD_OWVAR 67
18272: PUSH
18273: LD_INT 2
18275: PLUS
18276: PPUSH
18277: CALL_OW 380
// un := CreateHuman ;
18281: LD_ADDR_VAR 0 2
18285: PUSH
18286: CALL_OW 44
18290: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18291: LD_VAR 0 2
18295: PPUSH
18296: LD_VAR 0 3
18300: PPUSH
18301: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18305: LD_ADDR_EXP 61
18309: PUSH
18310: LD_EXP 61
18314: PPUSH
18315: LD_EXP 61
18319: PUSH
18320: LD_INT 1
18322: PLUS
18323: PPUSH
18324: LD_VAR 0 2
18328: PPUSH
18329: CALL_OW 1
18333: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
18334: LD_VAR 0 2
18338: PPUSH
18339: LD_INT 130
18341: PPUSH
18342: LD_INT 233
18344: PPUSH
18345: CALL_OW 111
// wait ( 0 0$2 ) ;
18349: LD_INT 70
18351: PPUSH
18352: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18356: LD_ADDR_VAR 0 4
18360: PUSH
18361: LD_VAR 0 4
18365: PPUSH
18366: LD_VAR 0 4
18370: PUSH
18371: LD_INT 1
18373: PLUS
18374: PPUSH
18375: LD_VAR 0 3
18379: PPUSH
18380: CALL_OW 1
18384: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18385: LD_ADDR_VAR 0 4
18389: PUSH
18390: LD_VAR 0 4
18394: PPUSH
18395: LD_VAR 0 4
18399: PUSH
18400: LD_INT 1
18402: PLUS
18403: PPUSH
18404: LD_VAR 0 2
18408: PPUSH
18409: CALL_OW 1
18413: ST_TO_ADDR
// end ;
18414: GO 18106
18416: POP
18417: POP
// for i in tmp do
18418: LD_ADDR_VAR 0 1
18422: PUSH
18423: LD_VAR 0 4
18427: PUSH
18428: FOR_IN
18429: IFFALSE 18543
// AgressiveMove ( i , [ [ 130 , 229 ] , [ 137 , 216 ] , [ 142 , 194 ] , [ 140 , 169 ] , [ 146 , 162 ] , [ 174 , 161 ] , [ 158 , 134 ] , [ 136 , 107 ] , [ 115 , 89 ] ] ) ;
18431: LD_VAR 0 1
18435: PPUSH
18436: LD_INT 130
18438: PUSH
18439: LD_INT 229
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 137
18448: PUSH
18449: LD_INT 216
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 142
18458: PUSH
18459: LD_INT 194
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 140
18468: PUSH
18469: LD_INT 169
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 146
18478: PUSH
18479: LD_INT 162
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 174
18488: PUSH
18489: LD_INT 161
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 158
18498: PUSH
18499: LD_INT 134
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 136
18508: PUSH
18509: LD_INT 107
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 115
18518: PUSH
18519: LD_INT 89
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: PPUSH
18537: CALL 69362 0 2
18541: GO 18428
18543: POP
18544: POP
// repeat wait ( 0 0$2 ) ;
18545: LD_INT 70
18547: PPUSH
18548: CALL_OW 67
// for i in tmp do
18552: LD_ADDR_VAR 0 1
18556: PUSH
18557: LD_VAR 0 4
18561: PUSH
18562: FOR_IN
18563: IFFALSE 18630
// if IsDead ( i ) then
18565: LD_VAR 0 1
18569: PPUSH
18570: CALL_OW 301
18574: IFFALSE 18594
// tmp := tmp diff i else
18576: LD_ADDR_VAR 0 4
18580: PUSH
18581: LD_VAR 0 4
18585: PUSH
18586: LD_VAR 0 1
18590: DIFF
18591: ST_TO_ADDR
18592: GO 18628
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18594: LD_VAR 0 1
18598: PPUSH
18599: LD_INT 81
18601: PUSH
18602: LD_INT 3
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PPUSH
18609: CALL_OW 69
18613: PPUSH
18614: LD_VAR 0 1
18618: PPUSH
18619: CALL_OW 74
18623: PPUSH
18624: CALL_OW 115
18628: GO 18562
18630: POP
18631: POP
// until not tmp ;
18632: LD_VAR 0 4
18636: NOT
18637: IFFALSE 18545
// end ;
18639: PPOPN 4
18641: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
18642: LD_EXP 6
18646: IFFALSE 19105
18648: GO 18650
18650: DISABLE
18651: LD_INT 0
18653: PPUSH
18654: PPUSH
18655: PPUSH
18656: PPUSH
// begin wait ( 3 3$00 ) ;
18657: LD_INT 6300
18659: PPUSH
18660: CALL_OW 67
// for i := 1 to 3 do
18664: LD_ADDR_VAR 0 1
18668: PUSH
18669: DOUBLE
18670: LD_INT 1
18672: DEC
18673: ST_TO_ADDR
18674: LD_INT 3
18676: PUSH
18677: FOR_TO
18678: IFFALSE 18977
// begin InitHc ;
18680: CALL_OW 19
// InitVc ;
18684: CALL_OW 20
// uc_side := 3 ;
18688: LD_ADDR_OWVAR 20
18692: PUSH
18693: LD_INT 3
18695: ST_TO_ADDR
// uc_nation := 3 ;
18696: LD_ADDR_OWVAR 21
18700: PUSH
18701: LD_INT 3
18703: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
18704: LD_INT 22
18706: PUSH
18707: LD_INT 23
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 1
18716: PPUSH
18717: LD_INT 2
18719: PPUSH
18720: CALL_OW 12
18724: ARRAY
18725: PPUSH
18726: LD_INT 1
18728: PPUSH
18729: LD_INT 1
18731: PPUSH
18732: LD_INT 44
18734: PUSH
18735: LD_INT 43
18737: PUSH
18738: LD_INT 42
18740: PUSH
18741: LD_INT 44
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 1
18752: PPUSH
18753: LD_INT 4
18755: PPUSH
18756: CALL_OW 12
18760: ARRAY
18761: PPUSH
18762: LD_INT 99
18764: PPUSH
18765: CALL 34277 0 5
// veh := CreateVehicle ;
18769: LD_ADDR_VAR 0 3
18773: PUSH
18774: CALL_OW 45
18778: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
18779: LD_VAR 0 3
18783: PPUSH
18784: LD_INT 293
18786: PPUSH
18787: LD_INT 246
18789: PPUSH
18790: LD_INT 5
18792: PPUSH
18793: LD_INT 0
18795: PPUSH
18796: CALL 68898 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18800: LD_ADDR_EXP 61
18804: PUSH
18805: LD_EXP 61
18809: PPUSH
18810: LD_EXP 61
18814: PUSH
18815: LD_INT 1
18817: PLUS
18818: PPUSH
18819: LD_VAR 0 3
18823: PPUSH
18824: CALL_OW 1
18828: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
18829: LD_INT 0
18831: PPUSH
18832: LD_INT 3
18834: PPUSH
18835: LD_INT 3
18837: PPUSH
18838: CALL_OW 380
// un := CreateHuman ;
18842: LD_ADDR_VAR 0 2
18846: PUSH
18847: CALL_OW 44
18851: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18852: LD_VAR 0 2
18856: PPUSH
18857: LD_VAR 0 3
18861: PPUSH
18862: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18866: LD_ADDR_EXP 61
18870: PUSH
18871: LD_EXP 61
18875: PPUSH
18876: LD_EXP 61
18880: PUSH
18881: LD_INT 1
18883: PLUS
18884: PPUSH
18885: LD_VAR 0 2
18889: PPUSH
18890: CALL_OW 1
18894: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
18895: LD_VAR 0 2
18899: PPUSH
18900: LD_INT 273
18902: PPUSH
18903: LD_INT 227
18905: PPUSH
18906: CALL_OW 111
// wait ( 0 0$2 ) ;
18910: LD_INT 70
18912: PPUSH
18913: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18917: LD_ADDR_VAR 0 4
18921: PUSH
18922: LD_VAR 0 4
18926: PPUSH
18927: LD_VAR 0 4
18931: PUSH
18932: LD_INT 1
18934: PLUS
18935: PPUSH
18936: LD_VAR 0 3
18940: PPUSH
18941: CALL_OW 1
18945: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18946: LD_ADDR_VAR 0 4
18950: PUSH
18951: LD_VAR 0 4
18955: PPUSH
18956: LD_VAR 0 4
18960: PUSH
18961: LD_INT 1
18963: PLUS
18964: PPUSH
18965: LD_VAR 0 2
18969: PPUSH
18970: CALL_OW 1
18974: ST_TO_ADDR
// end ;
18975: GO 18677
18977: POP
18978: POP
// for i in tmp do
18979: LD_ADDR_VAR 0 1
18983: PUSH
18984: LD_VAR 0 4
18988: PUSH
18989: FOR_IN
18990: IFFALSE 19009
// ComAgressiveMove ( i , 330 , 231 ) ;
18992: LD_VAR 0 1
18996: PPUSH
18997: LD_INT 330
18999: PPUSH
19000: LD_INT 231
19002: PPUSH
19003: CALL_OW 114
19007: GO 18989
19009: POP
19010: POP
// repeat wait ( 0 0$2 ) ;
19011: LD_INT 70
19013: PPUSH
19014: CALL_OW 67
// for i in tmp do
19018: LD_ADDR_VAR 0 1
19022: PUSH
19023: LD_VAR 0 4
19027: PUSH
19028: FOR_IN
19029: IFFALSE 19096
// if IsDead ( i ) then
19031: LD_VAR 0 1
19035: PPUSH
19036: CALL_OW 301
19040: IFFALSE 19060
// tmp := tmp diff i else
19042: LD_ADDR_VAR 0 4
19046: PUSH
19047: LD_VAR 0 4
19051: PUSH
19052: LD_VAR 0 1
19056: DIFF
19057: ST_TO_ADDR
19058: GO 19094
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
19060: LD_VAR 0 1
19064: PPUSH
19065: LD_INT 81
19067: PUSH
19068: LD_INT 3
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PPUSH
19075: CALL_OW 69
19079: PPUSH
19080: LD_VAR 0 1
19084: PPUSH
19085: CALL_OW 74
19089: PPUSH
19090: CALL_OW 115
19094: GO 19028
19096: POP
19097: POP
// until not tmp ;
19098: LD_VAR 0 4
19102: NOT
19103: IFFALSE 19011
// end ;
19105: PPOPN 4
19107: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19108: LD_INT 3
19110: PUSH
19111: LD_INT 22
19113: PUSH
19114: LD_INT 2
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 32
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PPUSH
19139: CALL_OW 69
19143: IFFALSE 19227
19145: GO 19147
19147: DISABLE
19148: LD_INT 0
19150: PPUSH
// begin enable ;
19151: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19152: LD_ADDR_VAR 0 1
19156: PUSH
19157: LD_INT 3
19159: PUSH
19160: LD_INT 22
19162: PUSH
19163: LD_INT 2
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 32
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PPUSH
19188: CALL_OW 69
19192: PUSH
19193: FOR_IN
19194: IFFALSE 19225
// if GetFuel ( i ) < 3 then
19196: LD_VAR 0 1
19200: PPUSH
19201: CALL_OW 261
19205: PUSH
19206: LD_INT 3
19208: LESS
19209: IFFALSE 19223
// SetFuel ( i , 3 ) ;
19211: LD_VAR 0 1
19215: PPUSH
19216: LD_INT 3
19218: PPUSH
19219: CALL_OW 240
19223: GO 19193
19225: POP
19226: POP
// end ; end_of_file
19227: PPOPN 1
19229: END
// export function Action ; begin
19230: LD_INT 0
19232: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
19233: LD_INT 2
19235: PPUSH
19236: LD_INT 4
19238: PPUSH
19239: CALL_OW 332
// Video ( true ) ;
19243: LD_INT 1
19245: PPUSH
19246: CALL 66730 0 1
// music_nat := 3 ;
19250: LD_ADDR_OWVAR 71
19254: PUSH
19255: LD_INT 3
19257: ST_TO_ADDR
// music_class := music_recon ;
19258: LD_ADDR_OWVAR 72
19262: PUSH
19263: LD_INT 3
19265: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
19266: LD_INT 213
19268: PPUSH
19269: LD_INT 89
19271: PPUSH
19272: CALL_OW 86
// if Kaia and Olaf then
19276: LD_EXP 39
19280: PUSH
19281: LD_EXP 43
19285: AND
19286: IFFALSE 19292
// SceneKaiaWithOlaf ;
19288: CALL 19370 0 0
// if Givi and Kamil then
19292: LD_EXP 35
19296: PUSH
19297: LD_EXP 38
19301: AND
19302: IFFALSE 19308
// SceneWithGiviAndKamil ;
19304: CALL 19941 0 0
// tick := 0 ;
19308: LD_ADDR_OWVAR 1
19312: PUSH
19313: LD_INT 0
19315: ST_TO_ADDR
// wait ( 3 ) ;
19316: LD_INT 3
19318: PPUSH
19319: CALL_OW 67
// Video ( false ) ;
19323: LD_INT 0
19325: PPUSH
19326: CALL 66730 0 1
// ChangeMissionObjectives ( M1 ) ;
19330: LD_STRING M1
19332: PPUSH
19333: CALL_OW 337
// music_nat := music_auto ;
19337: LD_ADDR_OWVAR 71
19341: PUSH
19342: LD_INT 0
19344: ST_TO_ADDR
// music_class := music_auto ;
19345: LD_ADDR_OWVAR 72
19349: PUSH
19350: LD_INT 0
19352: ST_TO_ADDR
// SaveForQuickRestart ;
19353: CALL_OW 22
// gameActive := true ;
19357: LD_ADDR_EXP 31
19361: PUSH
19362: LD_INT 1
19364: ST_TO_ADDR
// end ;
19365: LD_VAR 0 1
19369: RET
// export function SceneKaiaWithOlaf ; begin
19370: LD_INT 0
19372: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
19373: LD_INT 22
19375: PUSH
19376: LD_INT 2
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 30
19385: PUSH
19386: LD_INT 3
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PPUSH
19397: CALL_OW 69
19401: PPUSH
19402: LD_INT 14
19404: PPUSH
19405: LD_INT 1
19407: PPUSH
19408: LD_INT 1
19410: PPUSH
19411: LD_INT 26
19413: PPUSH
19414: CALL_OW 125
// wait ( 0 0$1 ) ;
19418: LD_INT 35
19420: PPUSH
19421: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
19425: LD_EXP 39
19429: PPUSH
19430: LD_STRING DK-Mem-1
19432: PPUSH
19433: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
19437: LD_EXP 39
19441: PPUSH
19442: LD_STRING DK-Mem-2
19444: PPUSH
19445: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
19449: LD_EXP 43
19453: PPUSH
19454: LD_STRING DO-Mem-3
19456: PPUSH
19457: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
19461: LD_EXP 39
19465: PPUSH
19466: LD_STRING DK-Mem-4
19468: PPUSH
19469: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
19473: LD_EXP 43
19477: PPUSH
19478: LD_STRING DO-Mem-5
19480: PPUSH
19481: CALL_OW 88
// wait ( 0 0$2 ) ;
19485: LD_INT 70
19487: PPUSH
19488: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
19492: LD_INT 22
19494: PUSH
19495: LD_INT 2
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 30
19504: PUSH
19505: LD_INT 3
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PPUSH
19516: CALL_OW 69
19520: PPUSH
19521: LD_INT 90
19523: PPUSH
19524: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
19528: LD_EXP 43
19532: PPUSH
19533: LD_STRING DO-Mem-6
19535: PPUSH
19536: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
19540: LD_EXP 39
19544: PPUSH
19545: LD_STRING DK-Mem-7
19547: PPUSH
19548: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
19552: LD_EXP 34
19556: PPUSH
19557: LD_EXP 39
19561: PPUSH
19562: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
19566: LD_EXP 34
19570: PPUSH
19571: LD_STRING DH-Mem-8
19573: PPUSH
19574: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
19578: LD_EXP 39
19582: PUSH
19583: LD_EXP 43
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PPUSH
19592: LD_EXP 34
19596: PPUSH
19597: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
19601: LD_EXP 43
19605: PPUSH
19606: LD_STRING DO-Mem-9
19608: PPUSH
19609: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
19613: LD_EXP 43
19617: PPUSH
19618: LD_STRING DO-Mem-10
19620: PPUSH
19621: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
19625: LD_EXP 43
19629: PPUSH
19630: LD_STRING DO-Mem-11
19632: PPUSH
19633: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
19637: LD_EXP 43
19641: PPUSH
19642: LD_STRING DO-Mem-12
19644: PPUSH
19645: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
19649: LD_EXP 39
19653: PPUSH
19654: LD_STRING DK-Mem-13
19656: PPUSH
19657: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
19661: LD_EXP 39
19665: PPUSH
19666: LD_STRING DK-Mem-14
19668: PPUSH
19669: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
19673: LD_EXP 39
19677: PPUSH
19678: LD_STRING DK-Mem-15
19680: PPUSH
19681: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
19685: LD_EXP 39
19689: PPUSH
19690: LD_STRING DK-Mem-16
19692: PPUSH
19693: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
19697: LD_EXP 39
19701: PPUSH
19702: LD_STRING DK-Mem-17
19704: PPUSH
19705: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
19709: LD_EXP 43
19713: PPUSH
19714: LD_EXP 39
19718: PPUSH
19719: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
19723: LD_EXP 43
19727: PPUSH
19728: LD_STRING DO-Mem-18
19730: PPUSH
19731: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
19735: LD_EXP 39
19739: PPUSH
19740: LD_EXP 43
19744: PPUSH
19745: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
19749: LD_EXP 39
19753: PPUSH
19754: LD_STRING DK-Mem-19
19756: PPUSH
19757: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
19761: LD_EXP 43
19765: PPUSH
19766: LD_INT 214
19768: PPUSH
19769: LD_INT 86
19771: PPUSH
19772: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19776: LD_EXP 43
19780: PPUSH
19781: LD_EXP 39
19785: PPUSH
19786: CALL_OW 179
// if Givi then
19790: LD_EXP 35
19794: IFFALSE 19825
// begin ComMoveXY ( Givi , 217 , 86 ) ;
19796: LD_EXP 35
19800: PPUSH
19801: LD_INT 217
19803: PPUSH
19804: LD_INT 86
19806: PPUSH
19807: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
19811: LD_EXP 35
19815: PPUSH
19816: LD_EXP 34
19820: PPUSH
19821: CALL_OW 179
// end ; if Kamil then
19825: LD_EXP 38
19829: IFFALSE 19869
// begin ComExit ( Kamil ) ;
19831: LD_EXP 38
19835: PPUSH
19836: CALL 67156 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
19840: LD_EXP 38
19844: PPUSH
19845: LD_INT 212
19847: PPUSH
19848: LD_INT 86
19850: PPUSH
19851: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
19855: LD_EXP 38
19859: PPUSH
19860: LD_EXP 34
19864: PPUSH
19865: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
19869: LD_INT 70
19871: PPUSH
19872: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
19876: LD_EXP 34
19880: PPUSH
19881: LD_STRING DH-Mem-20
19883: PPUSH
19884: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
19888: LD_EXP 43
19892: PPUSH
19893: LD_INT 215
19895: PPUSH
19896: LD_INT 87
19898: PPUSH
19899: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19903: LD_EXP 43
19907: PPUSH
19908: LD_EXP 39
19912: PPUSH
19913: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
19917: LD_EXP 39
19921: PPUSH
19922: LD_STRING DK-Mem-21
19924: PPUSH
19925: CALL_OW 88
// wait ( 0 0$2 ) ;
19929: LD_INT 70
19931: PPUSH
19932: CALL_OW 67
// end ;
19936: LD_VAR 0 1
19940: RET
// export function SceneWithGiviAndKamil ; var p ; begin
19941: LD_INT 0
19943: PPUSH
19944: PPUSH
// if Markov then
19945: LD_EXP 41
19949: IFFALSE 20067
// begin p := 0 ;
19951: LD_ADDR_VAR 0 2
19955: PUSH
19956: LD_INT 0
19958: ST_TO_ADDR
// if IsInUnit ( Markov ) then
19959: LD_EXP 41
19963: PPUSH
19964: CALL_OW 310
19968: IFFALSE 19979
// ComExit ( Markov ) ;
19970: LD_EXP 41
19974: PPUSH
19975: CALL 67156 0 1
// wait ( 0 0$1 ) ;
19979: LD_INT 35
19981: PPUSH
19982: CALL_OW 67
// ComMoveXY ( Markov , 212 , 88 ) ;
19986: LD_EXP 41
19990: PPUSH
19991: LD_INT 212
19993: PPUSH
19994: LD_INT 88
19996: PPUSH
19997: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20001: LD_INT 35
20003: PPUSH
20004: CALL_OW 67
// p := Inc ( p ) ;
20008: LD_ADDR_VAR 0 2
20012: PUSH
20013: LD_VAR 0 2
20017: PPUSH
20018: CALL 68119 0 1
20022: ST_TO_ADDR
// until GetDistUnits ( Markov , Heike ) < 6 or p > 12 ;
20023: LD_EXP 41
20027: PPUSH
20028: LD_EXP 34
20032: PPUSH
20033: CALL_OW 296
20037: PUSH
20038: LD_INT 6
20040: LESS
20041: PUSH
20042: LD_VAR 0 2
20046: PUSH
20047: LD_INT 12
20049: GREATER
20050: OR
20051: IFFALSE 20001
// AddComTurnUnit ( Markov , Heike ) ;
20053: LD_EXP 41
20057: PPUSH
20058: LD_EXP 34
20062: PPUSH
20063: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
20067: LD_EXP 35
20071: PPUSH
20072: LD_STRING DG-Obj-1
20074: PPUSH
20075: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
20079: LD_EXP 38
20083: PPUSH
20084: LD_STRING DKam-Obj-2
20086: PPUSH
20087: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
20091: LD_EXP 34
20095: PPUSH
20096: LD_EXP 38
20100: PPUSH
20101: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
20105: LD_EXP 38
20109: PPUSH
20110: LD_STRING DKam-Obj-3
20112: PPUSH
20113: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
20117: LD_EXP 41
20121: PPUSH
20122: LD_STRING DMar-Obj-4
20124: PPUSH
20125: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
20129: LD_EXP 38
20133: PPUSH
20134: LD_STRING DKam-Obj-6
20136: PPUSH
20137: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
20141: LD_EXP 38
20145: PPUSH
20146: LD_STRING DKam-Obj-7
20148: PPUSH
20149: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
20153: LD_EXP 38
20157: PPUSH
20158: LD_STRING DKam-Obj-8
20160: PPUSH
20161: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
20165: LD_EXP 34
20169: PPUSH
20170: LD_STRING DH-Obj-9
20172: PPUSH
20173: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
20177: LD_EXP 38
20181: PPUSH
20182: LD_STRING DKam-Obj-10
20184: PPUSH
20185: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
20189: LD_EXP 38
20193: PPUSH
20194: LD_STRING DKam-Obj-11
20196: PPUSH
20197: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
20201: LD_EXP 41
20205: PPUSH
20206: LD_STRING DMar-Obj-12
20208: PPUSH
20209: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
20213: LD_EXP 41
20217: PPUSH
20218: LD_STRING DMar-Obj-13
20220: PPUSH
20221: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
20225: LD_EXP 41
20229: PPUSH
20230: LD_STRING DMar-Obj-14
20232: PPUSH
20233: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
20237: LD_EXP 43
20241: PPUSH
20242: LD_STRING DO-Obj-15
20244: PPUSH
20245: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
20249: LD_EXP 43
20253: PPUSH
20254: LD_STRING DO-Obj-16
20256: PPUSH
20257: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
20261: LD_EXP 34
20265: PPUSH
20266: LD_STRING DH-Obj-17
20268: PPUSH
20269: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
20273: LD_EXP 43
20277: PPUSH
20278: LD_STRING DO-Obj-18
20280: PPUSH
20281: CALL_OW 88
// end ;
20285: LD_VAR 0 1
20289: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
20290: LD_INT 34
20292: PUSH
20293: LD_INT 92
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PPUSH
20300: CALL_OW 69
20304: IFFALSE 20499
20306: GO 20308
20308: DISABLE
20309: LD_INT 0
20311: PPUSH
// begin wait ( 0 0$2 ) ;
20312: LD_INT 70
20314: PPUSH
20315: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
20319: LD_INT 34
20321: PUSH
20322: LD_INT 92
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PPUSH
20329: CALL_OW 69
20333: PPUSH
20334: CALL_OW 87
// DialogueOn ;
20338: CALL_OW 6
// if Markov then
20342: LD_EXP 41
20346: IFFALSE 20374
// begin Say ( Markov , DMar-Grn-1 ) ;
20348: LD_EXP 41
20352: PPUSH
20353: LD_STRING DMar-Grn-1
20355: PPUSH
20356: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
20360: LD_EXP 34
20364: PPUSH
20365: LD_STRING DH-Grn-2
20367: PPUSH
20368: CALL_OW 88
// end else
20372: GO 20473
// if heikeSecondSquad then
20374: LD_EXP 49
20378: IFFALSE 20473
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20380: LD_ADDR_VAR 0 1
20384: PUSH
20385: LD_EXP 49
20389: PUSH
20390: LD_INT 1
20392: PPUSH
20393: LD_EXP 49
20397: PPUSH
20398: CALL_OW 12
20402: ARRAY
20403: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20404: LD_VAR 0 1
20408: PPUSH
20409: CALL_OW 258
20413: PUSH
20414: LD_INT 1
20416: DOUBLE
20417: EQUAL
20418: IFTRUE 20422
20420: GO 20437
20422: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
20423: LD_VAR 0 1
20427: PPUSH
20428: LD_STRING DArm-Grn-1
20430: PPUSH
20431: CALL_OW 88
20435: GO 20461
20437: LD_INT 2
20439: DOUBLE
20440: EQUAL
20441: IFTRUE 20445
20443: GO 20460
20445: POP
// Say ( random , DArf-Grn-1 ) ; end ;
20446: LD_VAR 0 1
20450: PPUSH
20451: LD_STRING DArf-Grn-1
20453: PPUSH
20454: CALL_OW 88
20458: GO 20461
20460: POP
// Say ( Heike , DH-Grn-2 ) ;
20461: LD_EXP 34
20465: PPUSH
20466: LD_STRING DH-Grn-2
20468: PPUSH
20469: CALL_OW 88
// end ; DialogueOff ;
20473: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
20477: LD_STRING MortarConstructed
20479: PPUSH
20480: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
20484: LD_STRING SelfPropelledMortar
20486: PPUSH
20487: CALL_OW 339
// mortarConstructed := true ;
20491: LD_ADDR_EXP 15
20495: PUSH
20496: LD_INT 1
20498: ST_TO_ADDR
// end ;
20499: PPOPN 1
20501: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
20502: LD_INT 2
20504: PPUSH
20505: LD_INT 8
20507: PPUSH
20508: CALL_OW 294
20512: IFFALSE 20655
20514: GO 20516
20516: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
20517: LD_INT 200
20519: PPUSH
20520: LD_INT 162
20522: PPUSH
20523: LD_INT 2
20525: PPUSH
20526: LD_INT 6
20528: NEG
20529: PPUSH
20530: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
20534: LD_INT 200
20536: PPUSH
20537: LD_INT 162
20539: PPUSH
20540: LD_INT 2
20542: PPUSH
20543: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
20547: LD_INT 200
20549: PPUSH
20550: LD_INT 162
20552: PPUSH
20553: CALL_OW 84
// if not IsOk ( Kurt ) then
20557: LD_EXP 45
20561: PPUSH
20562: CALL_OW 302
20566: NOT
20567: IFFALSE 20571
// exit ;
20569: GO 20655
// Say ( Kurt , DKs-Otpst-2-1 ) ;
20571: LD_EXP 45
20575: PPUSH
20576: LD_STRING DKs-Otpst-2-1
20578: PPUSH
20579: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
20583: LD_EXP 39
20587: PPUSH
20588: LD_STRING DK-Otpst-2-2
20590: PPUSH
20591: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
20595: LD_EXP 45
20599: PPUSH
20600: LD_STRING DKs-Otpst-2-3
20602: PPUSH
20603: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
20607: LD_EXP 45
20611: PPUSH
20612: LD_STRING DKs-Otpst-2-4
20614: PPUSH
20615: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
20619: LD_EXP 45
20623: PPUSH
20624: LD_STRING DKs-Otpst-2-5
20626: PPUSH
20627: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
20631: LD_EXP 38
20635: PPUSH
20636: LD_STRING DKam-Otpst-2-6
20638: PPUSH
20639: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
20643: LD_EXP 45
20647: PPUSH
20648: LD_STRING DKs-Otpst-2-7
20650: PPUSH
20651: CALL_OW 88
// end ;
20655: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
20656: LD_INT 8
20658: PPUSH
20659: LD_INT 22
20661: PUSH
20662: LD_INT 3
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 21
20671: PUSH
20672: LD_INT 3
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PPUSH
20683: CALL_OW 70
20687: NOT
20688: PUSH
20689: LD_EXP 3
20693: NOT
20694: AND
20695: IFFALSE 20943
20697: GO 20699
20699: DISABLE
20700: LD_INT 0
20702: PPUSH
// begin outpostDestroyed := true ;
20703: LD_ADDR_EXP 4
20707: PUSH
20708: LD_INT 1
20710: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
20711: LD_INT 22
20713: PUSH
20714: LD_INT 2
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 34
20723: PUSH
20724: LD_INT 92
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 92
20733: PUSH
20734: LD_INT 195
20736: PUSH
20737: LD_INT 164
20739: PUSH
20740: LD_INT 12
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: PPUSH
20754: CALL_OW 69
20758: NOT
20759: IFFALSE 20763
// exit ;
20761: GO 20943
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
20763: LD_EXP 35
20767: PPUSH
20768: CALL_OW 302
20772: NOT
20773: PUSH
20774: LD_EXP 39
20778: PPUSH
20779: CALL_OW 302
20783: NOT
20784: OR
20785: IFFALSE 20789
// exit ;
20787: GO 20943
// Say ( Givi , DG-Otpst-1-1 ) ;
20789: LD_EXP 35
20793: PPUSH
20794: LD_STRING DG-Otpst-1-1
20796: PPUSH
20797: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
20801: LD_EXP 39
20805: PPUSH
20806: LD_STRING DK-Otpst-1-2
20808: PPUSH
20809: CALL_OW 88
// if IsOk ( Markov ) then
20813: LD_EXP 41
20817: PPUSH
20818: CALL_OW 302
20822: IFFALSE 20850
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
20824: LD_EXP 41
20828: PPUSH
20829: LD_STRING DMar-Otpst-1-3
20831: PPUSH
20832: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
20836: LD_EXP 41
20840: PPUSH
20841: LD_STRING DMar-Otpst-1-4
20843: PPUSH
20844: CALL_OW 88
// end else
20848: GO 20931
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20850: LD_ADDR_VAR 0 1
20854: PUSH
20855: LD_EXP 49
20859: PUSH
20860: LD_INT 1
20862: PPUSH
20863: LD_EXP 49
20867: PPUSH
20868: CALL_OW 12
20872: ARRAY
20873: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20874: LD_VAR 0 1
20878: PPUSH
20879: CALL_OW 258
20883: PUSH
20884: LD_INT 1
20886: DOUBLE
20887: EQUAL
20888: IFTRUE 20892
20890: GO 20907
20892: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
20893: LD_VAR 0 1
20897: PPUSH
20898: LD_STRING DArm-Otpst-1-a-3
20900: PPUSH
20901: CALL_OW 88
20905: GO 20931
20907: LD_INT 2
20909: DOUBLE
20910: EQUAL
20911: IFTRUE 20915
20913: GO 20930
20915: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
20916: LD_VAR 0 1
20920: PPUSH
20921: LD_STRING DArf-Otpst-1-a-3
20923: PPUSH
20924: CALL_OW 88
20928: GO 20931
20930: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
20931: LD_EXP 35
20935: PPUSH
20936: LD_STRING DG-Otpst-1-5
20938: PPUSH
20939: CALL_OW 88
// end ;
20943: PPOPN 1
20945: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
20946: LD_EXP 39
20950: PPUSH
20951: CALL_OW 256
20955: PUSH
20956: LD_INT 10
20958: LESS
20959: IFFALSE 21073
20961: GO 20963
20963: DISABLE
// begin DialogueOn ;
20964: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
20968: LD_EXP 39
20972: PPUSH
20973: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
20977: LD_EXP 39
20981: PPUSH
20982: LD_STRING DK-Dead-1
20984: PPUSH
20985: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
20989: LD_EXP 34
20993: PPUSH
20994: LD_STRING DH-Dead-2
20996: PPUSH
20997: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
21001: LD_EXP 39
21005: PPUSH
21006: LD_STRING DK-Dead-3
21008: PPUSH
21009: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
21013: LD_EXP 34
21017: PPUSH
21018: LD_STRING DH-Dead-4
21020: PPUSH
21021: CALL_OW 88
// if IsOk ( Mike ) then
21025: LD_EXP 36
21029: PPUSH
21030: CALL_OW 302
21034: IFFALSE 21060
// begin Say ( Mike , DM-Dead-5 ) ;
21036: LD_EXP 36
21040: PPUSH
21041: LD_STRING DM-Dead-5
21043: PPUSH
21044: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
21048: LD_EXP 34
21052: PPUSH
21053: LD_STRING DH-Dead-6
21055: PPUSH
21056: CALL_OW 88
// end ; DialogueOff ;
21060: CALL_OW 7
// KillUnit ( Kaia ) ;
21064: LD_EXP 39
21068: PPUSH
21069: CALL_OW 66
// end ;
21073: END
// every 0 0$1 trigger tick >= 15 15$00 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
21074: LD_OWVAR 1
21078: PUSH
21079: LD_INT 31500
21081: GREATEREQUAL
21082: PUSH
21083: LD_EXP 5
21087: PUSH
21088: LD_INT 5
21090: GREATER
21091: OR
21092: PUSH
21093: LD_INT 22
21095: PUSH
21096: LD_INT 2
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 92
21105: PUSH
21106: LD_INT 103
21108: PUSH
21109: LD_INT 81
21111: PUSH
21112: LD_INT 20
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PPUSH
21125: CALL_OW 69
21129: OR
21130: IFFALSE 21570
21132: GO 21134
21134: DISABLE
21135: LD_INT 0
21137: PPUSH
21138: PPUSH
21139: PPUSH
// begin PrepareRolfSquad ;
21140: CALL 3531 0 0
// dep := HexInfo ( 86 , 54 ) ;
21144: LD_ADDR_VAR 0 3
21148: PUSH
21149: LD_INT 86
21151: PPUSH
21152: LD_INT 54
21154: PPUSH
21155: CALL_OW 428
21159: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
21160: LD_VAR 0 3
21164: PPUSH
21165: CALL_OW 274
21169: PPUSH
21170: LD_INT 1
21172: PPUSH
21173: LD_INT 300
21175: PPUSH
21176: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
21180: LD_VAR 0 3
21184: PPUSH
21185: CALL_OW 274
21189: PPUSH
21190: LD_INT 2
21192: PPUSH
21193: LD_INT 300
21195: PPUSH
21196: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
21200: LD_EXP 51
21204: PPUSH
21205: LD_INT 79
21207: PPUSH
21208: LD_INT 52
21210: PPUSH
21211: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
21215: LD_INT 35
21217: PPUSH
21218: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( rolfSquad , [ f_not , [ f_hastask ] ] ) , 79 , 52 ) ;
21222: LD_EXP 51
21226: PPUSH
21227: LD_INT 3
21229: PUSH
21230: LD_INT 60
21232: PUSH
21233: EMPTY
21234: LIST
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PPUSH
21240: CALL_OW 72
21244: PPUSH
21245: LD_INT 79
21247: PPUSH
21248: LD_INT 52
21250: PPUSH
21251: CALL_OW 114
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
21255: LD_INT 12
21257: PPUSH
21258: LD_INT 22
21260: PUSH
21261: LD_INT 3
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 21
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PPUSH
21282: CALL_OW 70
21286: NOT
21287: IFFALSE 21215
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
21289: LD_ADDR_VAR 0 2
21293: PUSH
21294: LD_INT 12
21296: PPUSH
21297: LD_INT 21
21299: PUSH
21300: LD_INT 3
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PPUSH
21307: CALL_OW 70
21311: ST_TO_ADDR
// for i in tmp do
21312: LD_ADDR_VAR 0 1
21316: PUSH
21317: LD_VAR 0 2
21321: PUSH
21322: FOR_IN
21323: IFFALSE 21339
// SetSide ( i , 8 ) ;
21325: LD_VAR 0 1
21329: PPUSH
21330: LD_INT 8
21332: PPUSH
21333: CALL_OW 235
21337: GO 21322
21339: POP
21340: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
21341: LD_INT 63
21343: PPUSH
21344: LD_INT 42
21346: PPUSH
21347: CALL_OW 428
21351: PPUSH
21352: LD_INT 320
21354: PPUSH
21355: CALL_OW 234
// wait ( 0 0$10 ) ;
21359: LD_INT 350
21361: PPUSH
21362: CALL_OW 67
// DialogueOn ;
21366: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
21370: LD_INT 8
21372: PPUSH
21373: LD_INT 2
21375: PPUSH
21376: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
21380: LD_INT 86
21382: PPUSH
21383: LD_INT 54
21385: PPUSH
21386: CALL_OW 428
21390: PPUSH
21391: LD_STRING antwerp
21393: PPUSH
21394: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
21398: LD_EXP 47
21402: PPUSH
21403: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
21407: LD_EXP 47
21411: PPUSH
21412: LD_STRING DRf-rast-1
21414: PPUSH
21415: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
21419: LD_EXP 34
21423: PPUSH
21424: LD_STRING DH-rast-2
21426: PPUSH
21427: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
21431: LD_EXP 47
21435: PPUSH
21436: LD_STRING DRf-rast-3
21438: PPUSH
21439: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
21443: LD_EXP 47
21447: PPUSH
21448: LD_STRING DRf-rast-4
21450: PPUSH
21451: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
21455: LD_EXP 47
21459: PPUSH
21460: LD_STRING DRf-rast-5
21462: PPUSH
21463: CALL_OW 94
// if IsOk ( Aviradze ) then
21467: LD_EXP 46
21471: PPUSH
21472: CALL_OW 302
21476: IFFALSE 21535
// begin CenterNowOnUnits ( Aviradze ) ;
21478: LD_EXP 46
21482: PPUSH
21483: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
21487: LD_EXP 46
21491: PPUSH
21492: LD_STRING DA-rast-6
21494: PPUSH
21495: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
21499: LD_EXP 34
21503: PPUSH
21504: LD_STRING DH-rast-7
21506: PPUSH
21507: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
21511: LD_EXP 35
21515: PPUSH
21516: LD_STRING DG-rast-8
21518: PPUSH
21519: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
21523: LD_EXP 35
21527: PPUSH
21528: LD_STRING DG-rast-9
21530: PPUSH
21531: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
21535: LD_EXP 34
21539: PPUSH
21540: LD_STRING DH-rast-10
21542: PPUSH
21543: CALL_OW 88
// DialogueOff ;
21547: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
21551: LD_STRING M2
21553: PPUSH
21554: CALL_OW 337
// bergkampfArrived := true ;
21558: LD_ADDR_EXP 3
21562: PUSH
21563: LD_INT 1
21565: ST_TO_ADDR
// PrepareRolfBase ;
21566: CALL 3862 0 0
// end ;
21570: PPOPN 3
21572: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
21573: LD_INT 12
21575: PPUSH
21576: LD_INT 22
21578: PUSH
21579: LD_INT 2
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PPUSH
21586: CALL_OW 70
21590: PUSH
21591: LD_EXP 47
21595: PPUSH
21596: CALL_OW 302
21600: AND
21601: PUSH
21602: LD_EXP 29
21606: AND
21607: IFFALSE 22167
21609: GO 21611
21611: DISABLE
21612: LD_INT 0
21614: PPUSH
// begin rolfScriptBase := false ;
21615: LD_ADDR_EXP 9
21619: PUSH
21620: LD_INT 0
21622: ST_TO_ADDR
// DialogueOn ;
21623: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
21627: LD_EXP 47
21631: PPUSH
21632: CALL_OW 87
// if rolfSquad >= 10 then
21636: LD_EXP 51
21640: PUSH
21641: LD_INT 10
21643: GREATEREQUAL
21644: IFFALSE 21823
// begin linkedWithRolf := 2 ;
21646: LD_ADDR_EXP 12
21650: PUSH
21651: LD_INT 2
21653: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
21654: LD_EXP 47
21658: PPUSH
21659: LD_STRING DRf-rast-11
21661: PPUSH
21662: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
21666: LD_EXP 34
21670: PPUSH
21671: LD_STRING DH-rast-12
21673: PPUSH
21674: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
21678: LD_EXP 47
21682: PPUSH
21683: LD_STRING DRf-rast-13
21685: PPUSH
21686: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
21690: LD_EXP 34
21694: PPUSH
21695: LD_STRING DH-rast-14
21697: PPUSH
21698: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
21702: LD_EXP 47
21706: PPUSH
21707: LD_STRING DRf-rast-15
21709: PPUSH
21710: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
21714: LD_EXP 34
21718: PPUSH
21719: LD_STRING DH-rast-16
21721: PPUSH
21722: CALL_OW 88
// if IsOk ( Mike ) then
21726: LD_EXP 36
21730: PPUSH
21731: CALL_OW 302
21735: IFFALSE 21809
// begin Say ( Mike , DM-rast-17 ) ;
21737: LD_EXP 36
21741: PPUSH
21742: LD_STRING DM-rast-17
21744: PPUSH
21745: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
21749: LD_EXP 34
21753: PPUSH
21754: LD_STRING DH-rast-18
21756: PPUSH
21757: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
21761: LD_EXP 36
21765: PPUSH
21766: LD_STRING DM-rast-19
21768: PPUSH
21769: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
21773: LD_EXP 34
21777: PPUSH
21778: LD_STRING DH-rast-20
21780: PPUSH
21781: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
21785: LD_EXP 36
21789: PPUSH
21790: LD_STRING DM-rast-21
21792: PPUSH
21793: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
21797: LD_EXP 34
21801: PPUSH
21802: LD_STRING DH-rast-22
21804: PPUSH
21805: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
21809: LD_EXP 34
21813: PPUSH
21814: LD_STRING DH-rast-23
21816: PPUSH
21817: CALL_OW 88
// end else
21821: GO 21973
// begin linkedWithRolf := 1 ;
21823: LD_ADDR_EXP 12
21827: PUSH
21828: LD_INT 1
21830: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
21831: LD_EXP 47
21835: PPUSH
21836: LD_STRING DRf-rast-a-11
21838: PPUSH
21839: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
21843: LD_EXP 34
21847: PPUSH
21848: LD_STRING DH-rast-a-12
21850: PPUSH
21851: CALL_OW 88
// if IsOk ( Kurt ) then
21855: LD_EXP 45
21859: PPUSH
21860: CALL_OW 302
21864: IFFALSE 21961
// begin Say ( Kurt , DKs-rast-a-13 ) ;
21866: LD_EXP 45
21870: PPUSH
21871: LD_STRING DKs-rast-a-13
21873: PPUSH
21874: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
21878: LD_EXP 47
21882: PPUSH
21883: LD_STRING DRf-rast-a-14
21885: PPUSH
21886: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
21890: LD_EXP 47
21894: PPUSH
21895: LD_STRING DRf-rast-a-15
21897: PPUSH
21898: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
21902: LD_EXP 45
21906: PPUSH
21907: LD_STRING DKs-rast-a-16
21909: PPUSH
21910: CALL_OW 88
// if IsOk ( Givi ) then
21914: LD_EXP 35
21918: PPUSH
21919: CALL_OW 302
21923: IFFALSE 21961
// begin Say ( Givi , DG-rast-a-17 ) ;
21925: LD_EXP 35
21929: PPUSH
21930: LD_STRING DG-rast-a-17
21932: PPUSH
21933: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
21937: LD_EXP 35
21941: PPUSH
21942: LD_STRING DG-rast-a-18
21944: PPUSH
21945: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
21949: LD_EXP 45
21953: PPUSH
21954: LD_STRING DKs-rast-a-19
21956: PPUSH
21957: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
21961: LD_EXP 34
21965: PPUSH
21966: LD_STRING DH-rast-a-20
21968: PPUSH
21969: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
21973: LD_EXP 47
21977: PPUSH
21978: LD_STRING DRf-rast-24
21980: PPUSH
21981: CALL_OW 88
// if IsOk ( Aviradze ) then
21985: LD_EXP 46
21989: PPUSH
21990: CALL_OW 302
21994: IFFALSE 22094
// begin Say ( Aviradze , DA-rast-25 ) ;
21996: LD_EXP 46
22000: PPUSH
22001: LD_STRING DA-rast-25
22003: PPUSH
22004: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
22008: LD_EXP 34
22012: PPUSH
22013: LD_STRING DH-rast-26
22015: PPUSH
22016: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
22020: LD_EXP 46
22024: PPUSH
22025: LD_STRING DA-rast-27
22027: PPUSH
22028: CALL_OW 88
// if IsOk ( Markov ) then
22032: LD_EXP 41
22036: PPUSH
22037: CALL_OW 302
22041: IFFALSE 22069
// begin Say ( Markov , DMar-rast-28 ) ;
22043: LD_EXP 41
22047: PPUSH
22048: LD_STRING DMar-rast-28
22050: PPUSH
22051: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
22055: LD_EXP 41
22059: PPUSH
22060: LD_STRING DMar-rast-29
22062: PPUSH
22063: CALL_OW 88
// end else
22067: GO 22092
// if IsOk ( Sophia ) then
22069: LD_EXP 40
22073: PPUSH
22074: CALL_OW 302
22078: IFFALSE 22092
// begin Say ( Sophia , DS-rast-28 ) ;
22080: LD_EXP 40
22084: PPUSH
22085: LD_STRING DS-rast-28
22087: PPUSH
22088: CALL_OW 88
// end ; end else
22092: GO 22117
// if IsOk ( Sophia ) then
22094: LD_EXP 40
22098: PPUSH
22099: CALL_OW 302
22103: IFFALSE 22117
// Say ( Sophia , DS-rast-29 ) ;
22105: LD_EXP 40
22109: PPUSH
22110: LD_STRING DS-rast-29
22112: PPUSH
22113: CALL_OW 88
// DialogueOff ;
22117: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
22121: LD_STRING M3
22123: PPUSH
22124: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
22128: LD_ADDR_VAR 0 1
22132: PUSH
22133: LD_INT 22
22135: PUSH
22136: LD_INT 8
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PPUSH
22143: CALL_OW 69
22147: PUSH
22148: FOR_IN
22149: IFFALSE 22165
// SetSide ( i , 2 ) ;
22151: LD_VAR 0 1
22155: PPUSH
22156: LD_INT 2
22158: PPUSH
22159: CALL_OW 235
22163: GO 22148
22165: POP
22166: POP
// end ;
22167: PPOPN 1
22169: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
22170: LD_EXP 23
22174: PUSH
22175: LD_EXP 12
22179: NOT
22180: AND
22181: PUSH
22182: LD_EXP 29
22186: AND
22187: IFFALSE 22278
22189: GO 22191
22191: DISABLE
22192: LD_INT 0
22194: PPUSH
// begin canRolfJoin := false ;
22195: LD_ADDR_EXP 29
22199: PUSH
22200: LD_INT 0
22202: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
22203: LD_STRING M3
22205: PPUSH
22206: CALL_OW 337
// for i in rolfSquad do
22210: LD_ADDR_VAR 0 1
22214: PUSH
22215: LD_EXP 51
22219: PUSH
22220: FOR_IN
22221: IFFALSE 22276
// begin ComExit ( i ) ;
22223: LD_VAR 0 1
22227: PPUSH
22228: CALL 67156 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
22232: LD_VAR 0 1
22236: PPUSH
22237: LD_INT 147
22239: PPUSH
22240: LD_INT 162
22242: PPUSH
22243: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
22247: LD_VAR 0 1
22251: PPUSH
22252: LD_INT 1050
22254: PPUSH
22255: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
22259: LD_VAR 0 1
22263: PPUSH
22264: LD_INT 103
22266: PPUSH
22267: LD_INT 162
22269: PPUSH
22270: CALL_OW 174
// end ;
22274: GO 22220
22276: POP
22277: POP
// end ;
22278: PPOPN 1
22280: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
22281: LD_EXP 3
22285: PUSH
22286: LD_EXP 47
22290: PPUSH
22291: CALL_OW 256
22295: PUSH
22296: LD_INT 400
22298: LESS
22299: AND
22300: PUSH
22301: LD_EXP 12
22305: NOT
22306: AND
22307: PUSH
22308: LD_EXP 29
22312: AND
22313: IFFALSE 22587
22315: GO 22317
22317: DISABLE
22318: LD_INT 0
22320: PPUSH
// begin DialogueOn ;
22321: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
22325: LD_EXP 47
22329: PPUSH
22330: LD_STRING DRf-rast-f-11
22332: PPUSH
22333: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
22337: LD_EXP 47
22341: PPUSH
22342: LD_STRING DRf-rast-f-12
22344: PPUSH
22345: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
22349: LD_EXP 47
22353: PPUSH
22354: LD_STRING DRf-rast-f-13
22356: PPUSH
22357: CALL_OW 94
// DialogueOff ;
22361: CALL_OW 7
// KillUnit ( Rolf ) ;
22365: LD_EXP 47
22369: PPUSH
22370: CALL_OW 66
// wait ( 0 0$1 ) ;
22374: LD_INT 35
22376: PPUSH
22377: CALL_OW 67
// if not IsOk ( Givi ) then
22381: LD_EXP 35
22385: PPUSH
22386: CALL_OW 302
22390: NOT
22391: IFFALSE 22395
// exit ;
22393: GO 22587
// DialogueOn ;
22395: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
22399: LD_EXP 35
22403: PPUSH
22404: LD_STRING DG-rast-f-14
22406: PPUSH
22407: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
22411: LD_EXP 35
22415: PPUSH
22416: LD_STRING DG-rast-f-15
22418: PPUSH
22419: CALL_OW 88
// if IsOk ( Kaia ) then
22423: LD_EXP 39
22427: PPUSH
22428: CALL_OW 302
22432: IFFALSE 22448
// Say ( Kaia , DK-rast-f-16 ) else
22434: LD_EXP 39
22438: PPUSH
22439: LD_STRING DK-rast-f-16
22441: PPUSH
22442: CALL_OW 88
22446: GO 22535
// if heikeSecondSquad then
22448: LD_EXP 49
22452: IFFALSE 22535
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
22454: LD_ADDR_VAR 0 1
22458: PUSH
22459: LD_EXP 49
22463: PUSH
22464: LD_INT 1
22466: PPUSH
22467: LD_EXP 49
22471: PPUSH
22472: CALL_OW 12
22476: ARRAY
22477: ST_TO_ADDR
// case GetSex ( random ) of 1 :
22478: LD_VAR 0 1
22482: PPUSH
22483: CALL_OW 258
22487: PUSH
22488: LD_INT 1
22490: DOUBLE
22491: EQUAL
22492: IFTRUE 22496
22494: GO 22511
22496: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
22497: LD_VAR 0 1
22501: PPUSH
22502: LD_STRING DArm-rast-f-a-16
22504: PPUSH
22505: CALL_OW 88
22509: GO 22535
22511: LD_INT 2
22513: DOUBLE
22514: EQUAL
22515: IFTRUE 22519
22517: GO 22534
22519: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
22520: LD_VAR 0 1
22524: PPUSH
22525: LD_STRING DArf-rast-f-a-16
22527: PPUSH
22528: CALL_OW 88
22532: GO 22535
22534: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
22535: LD_EXP 35
22539: PPUSH
22540: LD_STRING DG-rast-f-17
22542: PPUSH
22543: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
22547: LD_EXP 35
22551: PPUSH
22552: LD_STRING DG-rast-f-18
22554: PPUSH
22555: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
22559: LD_EXP 35
22563: PPUSH
22564: LD_STRING DG-rast-f-19
22566: PPUSH
22567: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
22571: LD_EXP 35
22575: PPUSH
22576: LD_STRING DG-rast-f-20
22578: PPUSH
22579: CALL_OW 88
// DialogueOff ;
22583: CALL_OW 7
// end ;
22587: PPOPN 1
22589: END
// every 0 0$1 trigger gameActive and SeeArea ( 2 , ruMainBase ) do
22590: LD_EXP 31
22594: PUSH
22595: LD_INT 2
22597: PPUSH
22598: LD_INT 10
22600: PPUSH
22601: CALL_OW 294
22605: AND
22606: IFFALSE 22679
22608: GO 22610
22610: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
22611: LD_EXP 35
22615: PPUSH
22616: LD_STRING DG-Len-1
22618: PPUSH
22619: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
22623: LD_EXP 45
22627: PPUSH
22628: LD_STRING DKs-Len-2
22630: PPUSH
22631: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
22635: LD_EXP 45
22639: PPUSH
22640: LD_STRING DKs-Len-3
22642: PPUSH
22643: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
22647: LD_EXP 34
22651: PPUSH
22652: LD_STRING DH-Len-4
22654: PPUSH
22655: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
22659: LD_EXP 39
22663: PPUSH
22664: LD_STRING DK-Len-5
22666: PPUSH
22667: CALL_OW 88
// leninSpotted := true ;
22671: LD_ADDR_EXP 14
22675: PUSH
22676: LD_INT 1
22678: ST_TO_ADDR
// end ;
22679: END
// every 0 0$1 trigger debug or ( bergkampfArrived and tick > [ 32 32$00 , 30 30$00 , 28 28$00 , 26 26$00 ] [ Difficulty ] ) do var i , tmp , inOmarBase , heikeNearbyOmar ;
22680: LD_EXP 1
22684: PUSH
22685: LD_EXP 3
22689: PUSH
22690: LD_OWVAR 1
22694: PUSH
22695: LD_INT 67200
22697: PUSH
22698: LD_INT 63000
22700: PUSH
22701: LD_INT 58800
22703: PUSH
22704: LD_INT 54600
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: PUSH
22713: LD_OWVAR 67
22717: ARRAY
22718: GREATER
22719: AND
22720: OR
22721: IFFALSE 23458
22723: GO 22725
22725: DISABLE
22726: LD_INT 0
22728: PPUSH
22729: PPUSH
22730: PPUSH
22731: PPUSH
// begin PrepareOmarSquad ;
22732: CALL 5144 0 0
// repeat wait ( 0 0$1 ) ;
22736: LD_INT 35
22738: PPUSH
22739: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
22743: LD_INT 14
22745: PPUSH
22746: LD_INT 22
22748: PUSH
22749: LD_INT 3
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 21
22761: PUSH
22762: LD_INT 1
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 59
22771: PUSH
22772: EMPTY
22773: LIST
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: LIST
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PPUSH
22784: CALL_OW 70
22788: NOT
22789: IFFALSE 22736
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
22791: LD_ADDR_VAR 0 2
22795: PUSH
22796: LD_INT 14
22798: PPUSH
22799: LD_INT 22
22801: PUSH
22802: LD_INT 2
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PPUSH
22809: CALL_OW 70
22813: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
22814: LD_ADDR_VAR 0 3
22818: PUSH
22819: LD_VAR 0 2
22823: PUSH
22824: LD_INT 0
22826: GREATER
22827: ST_TO_ADDR
// heikeNearbyOmar := IsInArea ( Heike , ruOmarBase ) ;
22828: LD_ADDR_VAR 0 4
22832: PUSH
22833: LD_EXP 34
22837: PPUSH
22838: LD_INT 14
22840: PPUSH
22841: CALL_OW 308
22845: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
22846: LD_VAR 0 2
22850: PPUSH
22851: LD_INT 21
22853: PUSH
22854: LD_INT 3
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PPUSH
22861: CALL_OW 72
22865: IFFALSE 22970
// begin if heikeNearbyOmar then
22867: LD_VAR 0 4
22871: IFFALSE 22887
// Say ( Omar , DOm-Base-1b ) else
22873: LD_EXP 44
22877: PPUSH
22878: LD_STRING DOm-Base-1b
22880: PPUSH
22881: CALL_OW 88
22885: GO 22899
// SayRadio ( Omar , DOm-Base-1br ) ;
22887: LD_EXP 44
22891: PPUSH
22892: LD_STRING DOm-Base-1br
22894: PPUSH
22895: CALL_OW 94
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
22899: LD_ADDR_VAR 0 1
22903: PUSH
22904: LD_VAR 0 2
22908: PPUSH
22909: LD_INT 21
22911: PUSH
22912: LD_INT 3
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PPUSH
22919: CALL_OW 72
22923: PUSH
22924: FOR_IN
22925: IFFALSE 22966
// begin if UnitsInside ( i ) then
22927: LD_VAR 0 1
22931: PPUSH
22932: CALL_OW 313
22936: IFFALSE 22952
// ComExitBuilding ( UnitsInside ( i ) ) ;
22938: LD_VAR 0 1
22942: PPUSH
22943: CALL_OW 313
22947: PPUSH
22948: CALL_OW 122
// SetSide ( i , 5 ) ;
22952: LD_VAR 0 1
22956: PPUSH
22957: LD_INT 5
22959: PPUSH
22960: CALL_OW 235
// end ;
22964: GO 22924
22966: POP
22967: POP
// end else
22968: GO 23063
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
22970: LD_VAR 0 2
22974: PPUSH
22975: LD_INT 21
22977: PUSH
22978: LD_INT 2
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PPUSH
22985: CALL_OW 72
22989: IFFALSE 23025
// begin if heikeNearbyOmar then
22991: LD_VAR 0 4
22995: IFFALSE 23011
// Say ( Omar , DOm-Base-1v ) else
22997: LD_EXP 44
23001: PPUSH
23002: LD_STRING DOm-Base-1v
23004: PPUSH
23005: CALL_OW 88
23009: GO 23023
// SayRadio ( Omar , DOm-Base-1vr ) end else
23011: LD_EXP 44
23015: PPUSH
23016: LD_STRING DOm-Base-1vr
23018: PPUSH
23019: CALL_OW 94
23023: GO 23063
// if inOmarBase then
23025: LD_VAR 0 3
23029: IFFALSE 23063
// begin if heikeNearbyOmar then
23031: LD_VAR 0 4
23035: IFFALSE 23051
// Say ( Omar , DOm-Base-1h ) else
23037: LD_EXP 44
23041: PPUSH
23042: LD_STRING DOm-Base-1h
23044: PPUSH
23045: CALL_OW 88
23049: GO 23063
// SayRadio ( Omar , DOm-Base-1hr ) end ;
23051: LD_EXP 44
23055: PPUSH
23056: LD_STRING DOm-Base-1hr
23058: PPUSH
23059: CALL_OW 94
// for i in omarSquad do
23063: LD_ADDR_VAR 0 1
23067: PUSH
23068: LD_EXP 52
23072: PUSH
23073: FOR_IN
23074: IFFALSE 23105
// if GetLives ( i ) < 750 then
23076: LD_VAR 0 1
23080: PPUSH
23081: CALL_OW 256
23085: PUSH
23086: LD_INT 750
23088: LESS
23089: IFFALSE 23103
// SetLives ( i , 1000 ) ;
23091: LD_VAR 0 1
23095: PPUSH
23096: LD_INT 1000
23098: PPUSH
23099: CALL_OW 234
23103: GO 23073
23105: POP
23106: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
23107: LD_ADDR_VAR 0 1
23111: PUSH
23112: LD_INT 14
23114: PPUSH
23115: LD_INT 21
23117: PUSH
23118: LD_INT 3
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PPUSH
23125: CALL_OW 70
23129: PUSH
23130: FOR_IN
23131: IFFALSE 23147
// SetSide ( i , 5 ) ;
23133: LD_VAR 0 1
23137: PPUSH
23138: LD_INT 5
23140: PPUSH
23141: CALL_OW 235
23145: GO 23130
23147: POP
23148: POP
// wait ( 0 0$3 ) ;
23149: LD_INT 105
23151: PPUSH
23152: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
23156: LD_INT 5
23158: PPUSH
23159: LD_INT 2
23161: PPUSH
23162: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
23166: LD_EXP 44
23170: PPUSH
23171: CALL_OW 87
// DialogueOn ;
23175: CALL_OW 6
// if heikeNearbyOmar then
23179: LD_VAR 0 4
23183: IFFALSE 23241
// begin Say ( Omar , DOm-Veh-1a ) ;
23185: LD_EXP 44
23189: PPUSH
23190: LD_STRING DOm-Veh-1a
23192: PPUSH
23193: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
23197: LD_EXP 44
23201: PPUSH
23202: LD_STRING DOm-Veh-2a
23204: PPUSH
23205: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
23209: LD_EXP 44
23213: PPUSH
23214: LD_STRING DOm-Veh-3a
23216: PPUSH
23217: CALL_OW 88
// if mortarConstructed then
23221: LD_EXP 15
23225: IFFALSE 23239
// Say ( Omar , DOm-Veh-4a ) ;
23227: LD_EXP 44
23231: PPUSH
23232: LD_STRING DOm-Veh-4a
23234: PPUSH
23235: CALL_OW 88
// end else
23239: GO 23295
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
23241: LD_EXP 44
23245: PPUSH
23246: LD_STRING DOm-Veh-1
23248: PPUSH
23249: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
23253: LD_EXP 44
23257: PPUSH
23258: LD_STRING DOm-Veh-2
23260: PPUSH
23261: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
23265: LD_EXP 44
23269: PPUSH
23270: LD_STRING DOm-Veh-3
23272: PPUSH
23273: CALL_OW 94
// if mortarConstructed then
23277: LD_EXP 15
23281: IFFALSE 23295
// SayRadio ( Omar , DOm-Veh-4 ) ;
23283: LD_EXP 44
23287: PPUSH
23288: LD_STRING DOm-Veh-4
23290: PPUSH
23291: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
23295: LD_EXP 34
23299: PPUSH
23300: LD_STRING DH-Veh-5
23302: PPUSH
23303: CALL_OW 88
// if IsOk ( Kurt ) then
23307: LD_EXP 45
23311: PPUSH
23312: CALL_OW 302
23316: IFFALSE 23366
// begin Say ( Kurt , DKs-Veh-6 ) ;
23318: LD_EXP 45
23322: PPUSH
23323: LD_STRING DKs-Veh-6
23325: PPUSH
23326: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
23330: LD_EXP 45
23334: PPUSH
23335: LD_STRING DKs-Veh-7
23337: PPUSH
23338: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
23342: LD_EXP 35
23346: PPUSH
23347: LD_STRING DG-Veh-8
23349: PPUSH
23350: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
23354: LD_EXP 36
23358: PPUSH
23359: LD_STRING DM-Veh-9
23361: PPUSH
23362: CALL_OW 88
// end ; DialogueOff ;
23366: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23370: LD_STRING M4
23372: PPUSH
23373: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
23377: LD_EXP 44
23381: PPUSH
23382: LD_INT 341
23384: PPUSH
23385: LD_INT 232
23387: PPUSH
23388: CALL_OW 428
23392: PPUSH
23393: CALL_OW 120
// omarArrived := true ;
23397: LD_ADDR_EXP 6
23401: PUSH
23402: LD_INT 1
23404: ST_TO_ADDR
// omarScriptBase := true ;
23405: LD_ADDR_EXP 10
23409: PUSH
23410: LD_INT 1
23412: ST_TO_ADDR
// omarWantVehicles := true ;
23413: LD_ADDR_EXP 18
23417: PUSH
23418: LD_INT 1
23420: ST_TO_ADDR
// if debug then
23421: LD_EXP 1
23425: IFFALSE 23458
// begin wait ( 0 0$25 ) ;
23427: LD_INT 875
23429: PPUSH
23430: CALL_OW 67
// omarScriptBase := false ;
23434: LD_ADDR_EXP 10
23438: PUSH
23439: LD_INT 0
23441: ST_TO_ADDR
// omarWantVehicles := false ;
23442: LD_ADDR_EXP 18
23446: PUSH
23447: LD_INT 0
23449: ST_TO_ADDR
// omarAttack := true ;
23450: LD_ADDR_EXP 23
23454: PUSH
23455: LD_INT 1
23457: ST_TO_ADDR
// end ; end ;
23458: PPOPN 4
23460: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
23461: LD_INT 10
23463: PPUSH
23464: LD_INT 22
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PPUSH
23474: CALL_OW 70
23478: PUSH
23479: LD_EXP 6
23483: AND
23484: PUSH
23485: LD_EXP 44
23489: PPUSH
23490: CALL_OW 302
23494: AND
23495: PUSH
23496: LD_EXP 23
23500: NOT
23501: AND
23502: IFFALSE 23519
23504: GO 23506
23506: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
23507: LD_EXP 44
23511: PPUSH
23512: LD_STRING DOm-Lenin
23514: PPUSH
23515: CALL_OW 94
23519: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
23520: LD_EXP 47
23524: PPUSH
23525: CALL_OW 302
23529: PUSH
23530: LD_EXP 12
23534: AND
23535: PUSH
23536: LD_EXP 6
23540: AND
23541: IFFALSE 23645
23543: GO 23545
23545: DISABLE
// begin wait ( 1 1$00 ) ;
23546: LD_INT 2100
23548: PPUSH
23549: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
23553: LD_EXP 47
23557: PPUSH
23558: CALL_OW 87
// DialogueOn ;
23562: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
23566: LD_EXP 47
23570: PPUSH
23571: LD_STRING DRf-Veh-10
23573: PPUSH
23574: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
23578: LD_EXP 47
23582: PPUSH
23583: LD_STRING DRf-Veh-11
23585: PPUSH
23586: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
23590: LD_EXP 34
23594: PPUSH
23595: LD_STRING DH-Veh-12
23597: PPUSH
23598: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
23602: LD_EXP 34
23606: PPUSH
23607: LD_STRING DH-Veh-13
23609: PPUSH
23610: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
23614: LD_EXP 47
23618: PPUSH
23619: LD_STRING DRf-Veh-14
23621: PPUSH
23622: CALL_OW 88
// DialogueOff ;
23626: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
23630: LD_STRING M5
23632: PPUSH
23633: CALL_OW 337
// rolfWantVehicles := true ;
23637: LD_ADDR_EXP 17
23641: PUSH
23642: LD_INT 1
23644: ST_TO_ADDR
// end ;
23645: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
23646: LD_EXP 18
23650: IFFALSE 24413
23652: GO 23654
23654: DISABLE
23655: LD_INT 0
23657: PPUSH
23658: PPUSH
23659: PPUSH
23660: PPUSH
23661: PPUSH
23662: PPUSH
// begin wait ( 0 0$3 ) ;
23663: LD_INT 105
23665: PPUSH
23666: CALL_OW 67
// Hint ( OmarVehicles ) ;
23670: LD_STRING OmarVehicles
23672: PPUSH
23673: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
23677: LD_INT 16
23679: PPUSH
23680: LD_INT 1
23682: PPUSH
23683: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
23687: LD_INT 35
23689: PPUSH
23690: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
23694: LD_ADDR_EXP 20
23698: PUSH
23699: LD_EXP 20
23703: PUSH
23704: LD_INT 35
23706: MINUS
23707: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
23708: LD_EXP 20
23712: PUSH
23713: LD_INT 0
23715: LESSEQUAL
23716: IFFALSE 23816
// begin display_strings := [ ] ;
23718: LD_ADDR_OWVAR 47
23722: PUSH
23723: EMPTY
23724: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
23725: LD_STRING M4a
23727: PPUSH
23728: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23732: LD_INT 16
23734: PPUSH
23735: LD_INT 0
23737: PPUSH
23738: CALL_OW 424
// DialogueOn ;
23742: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
23746: LD_EXP 44
23750: PPUSH
23751: LD_STRING DOm-Veh-b-15
23753: PPUSH
23754: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
23758: LD_EXP 34
23762: PPUSH
23763: LD_STRING DH-Veh-b-16
23765: PPUSH
23766: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
23770: LD_EXP 44
23774: PPUSH
23775: LD_STRING DOm-Veh-b-17
23777: PPUSH
23778: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
23782: LD_EXP 39
23786: PPUSH
23787: LD_STRING DK-Veh-b-18
23789: PPUSH
23790: CALL_OW 88
// DialogueOff ;
23794: CALL_OW 7
// omarAttack := true ;
23798: LD_ADDR_EXP 23
23802: PUSH
23803: LD_INT 1
23805: ST_TO_ADDR
// omarScriptBase := false ;
23806: LD_ADDR_EXP 10
23810: PUSH
23811: LD_INT 0
23813: ST_TO_ADDR
// exit ;
23814: GO 24413
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
23816: LD_EXP 21
23820: PUSH
23821: LD_INT 16
23823: PPUSH
23824: LD_INT 22
23826: PUSH
23827: LD_INT 2
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 21
23836: PUSH
23837: LD_INT 2
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 3
23846: PUSH
23847: LD_INT 2
23849: PUSH
23850: LD_INT 34
23852: PUSH
23853: LD_INT 32
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 34
23862: PUSH
23863: LD_INT 88
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 34
23872: PUSH
23873: LD_INT 31
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 33
23892: PUSH
23893: LD_INT 1
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 58
23902: PUSH
23903: EMPTY
23904: LIST
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: PPUSH
23913: CALL_OW 70
23917: LESSEQUAL
23918: IFFALSE 23687
// omarWaitingForVehiclesTimer := 0 0$00 ;
23920: LD_ADDR_EXP 20
23924: PUSH
23925: LD_INT 0
23927: ST_TO_ADDR
// display_strings := [ ] ;
23928: LD_ADDR_OWVAR 47
23932: PUSH
23933: EMPTY
23934: ST_TO_ADDR
// DialogueOn ;
23935: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
23939: LD_EXP 44
23943: PPUSH
23944: LD_STRING DOm-Veh-a-15
23946: PPUSH
23947: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
23951: LD_EXP 39
23955: PPUSH
23956: LD_STRING DK-Veh-a-16
23958: PPUSH
23959: CALL_OW 88
// DialogueOff ;
23963: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
23967: LD_STRING M4a
23969: PPUSH
23970: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23974: LD_INT 16
23976: PPUSH
23977: LD_INT 0
23979: PPUSH
23980: CALL_OW 424
// omarHasVehicles := true ;
23984: LD_ADDR_EXP 22
23988: PUSH
23989: LD_INT 1
23991: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23992: LD_INT 35
23994: PPUSH
23995: CALL_OW 67
// until rolfWaitingForVehiclesTimer = 0 0$00 ;
23999: LD_EXP 19
24003: PUSH
24004: LD_INT 0
24006: EQUAL
24007: IFFALSE 23992
// wait ( 1 1$00 ) ;
24009: LD_INT 2100
24011: PPUSH
24012: CALL_OW 67
// omarAttack := true ;
24016: LD_ADDR_EXP 23
24020: PUSH
24021: LD_INT 1
24023: ST_TO_ADDR
// omarScriptBase := false ;
24024: LD_ADDR_EXP 10
24028: PUSH
24029: LD_INT 0
24031: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
24032: LD_ADDR_VAR 0 2
24036: PUSH
24037: LD_INT 16
24039: PPUSH
24040: LD_INT 22
24042: PUSH
24043: LD_INT 2
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 21
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 33
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 58
24072: PUSH
24073: EMPTY
24074: LIST
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: PPUSH
24082: CALL_OW 70
24086: ST_TO_ADDR
// for i in tmp do
24087: LD_ADDR_VAR 0 1
24091: PUSH
24092: LD_VAR 0 2
24096: PUSH
24097: FOR_IN
24098: IFFALSE 24126
// begin SetFuel ( i , 100 ) ;
24100: LD_VAR 0 1
24104: PPUSH
24105: LD_INT 100
24107: PPUSH
24108: CALL_OW 240
// SetSide ( i , 5 ) ;
24112: LD_VAR 0 1
24116: PPUSH
24117: LD_INT 5
24119: PPUSH
24120: CALL_OW 235
// end ;
24124: GO 24097
24126: POP
24127: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
24128: LD_ADDR_VAR 0 3
24132: PUSH
24133: LD_EXP 52
24137: PPUSH
24138: LD_INT 25
24140: PUSH
24141: LD_INT 2
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PPUSH
24148: CALL_OW 72
24152: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
24153: LD_ADDR_VAR 0 4
24157: PUSH
24158: LD_EXP 52
24162: PPUSH
24163: LD_INT 3
24165: PUSH
24166: LD_INT 55
24168: PUSH
24169: EMPTY
24170: LIST
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 25
24178: PUSH
24179: LD_INT 3
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PPUSH
24190: CALL_OW 72
24194: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
24195: LD_ADDR_VAR 0 5
24199: PUSH
24200: LD_INT 324
24202: PPUSH
24203: LD_INT 234
24205: PPUSH
24206: CALL_OW 428
24210: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
24211: LD_ADDR_VAR 0 6
24215: PUSH
24216: LD_INT 334
24218: PPUSH
24219: LD_INT 241
24221: PPUSH
24222: CALL_OW 428
24226: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
24227: LD_VAR 0 6
24231: PPUSH
24232: CALL_OW 313
24236: PPUSH
24237: CALL_OW 122
// if eng then
24241: LD_VAR 0 3
24245: IFFALSE 24353
// begin if eng + mech <= tmp then
24247: LD_VAR 0 3
24251: PUSH
24252: LD_VAR 0 4
24256: PLUS
24257: PUSH
24258: LD_VAR 0 2
24262: LESSEQUAL
24263: IFFALSE 24318
// begin ComEnterUnit ( eng , workshop ) ;
24265: LD_VAR 0 3
24269: PPUSH
24270: LD_VAR 0 5
24274: PPUSH
24275: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
24279: LD_VAR 0 3
24283: PPUSH
24284: LD_INT 3
24286: PPUSH
24287: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24291: LD_VAR 0 3
24295: PPUSH
24296: CALL_OW 182
// mech := mech union eng ;
24300: LD_ADDR_VAR 0 4
24304: PUSH
24305: LD_VAR 0 4
24309: PUSH
24310: LD_VAR 0 3
24314: UNION
24315: ST_TO_ADDR
// end else
24316: GO 24353
// begin ComEnterUnit ( eng , armoury ) ;
24318: LD_VAR 0 3
24322: PPUSH
24323: LD_VAR 0 6
24327: PPUSH
24328: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
24332: LD_VAR 0 3
24336: PPUSH
24337: LD_INT 1
24339: PPUSH
24340: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24344: LD_VAR 0 3
24348: PPUSH
24349: CALL_OW 182
// end ; end ; for i := 1 to tmp do
24353: LD_ADDR_VAR 0 1
24357: PUSH
24358: DOUBLE
24359: LD_INT 1
24361: DEC
24362: ST_TO_ADDR
24363: LD_VAR 0 2
24367: PUSH
24368: FOR_TO
24369: IFFALSE 24411
// if i <= mech then
24371: LD_VAR 0 1
24375: PUSH
24376: LD_VAR 0 4
24380: LESSEQUAL
24381: IFFALSE 24409
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
24383: LD_VAR 0 4
24387: PUSH
24388: LD_VAR 0 1
24392: ARRAY
24393: PPUSH
24394: LD_VAR 0 2
24398: PUSH
24399: LD_VAR 0 1
24403: ARRAY
24404: PPUSH
24405: CALL_OW 180
24409: GO 24368
24411: POP
24412: POP
// end ;
24413: PPOPN 6
24415: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i , hasBadWeapons ;
24416: LD_EXP 47
24420: PPUSH
24421: CALL_OW 302
24425: PUSH
24426: LD_EXP 17
24430: AND
24431: IFFALSE 25055
24433: GO 24435
24435: DISABLE
24436: LD_INT 0
24438: PPUSH
24439: PPUSH
// begin repeat wait ( 0 0$1 ) ;
24440: LD_INT 35
24442: PPUSH
24443: CALL_OW 67
// hasBadWeapons := false ;
24447: LD_ADDR_VAR 0 2
24451: PUSH
24452: LD_INT 0
24454: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
24455: LD_ADDR_EXP 19
24459: PUSH
24460: LD_EXP 19
24464: PUSH
24465: LD_INT 35
24467: MINUS
24468: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 then
24469: LD_EXP 19
24473: PUSH
24474: LD_INT 0
24476: LESSEQUAL
24477: IFFALSE 24739
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
24479: LD_ADDR_EXP 19
24483: PUSH
24484: LD_INT 0
24486: ST_TO_ADDR
// display_strings := [ ] ;
24487: LD_ADDR_OWVAR 47
24491: PUSH
24492: EMPTY
24493: ST_TO_ADDR
// DialogueOn ;
24494: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
24498: LD_EXP 47
24502: PPUSH
24503: LD_STRING DRf-Veh-b-19
24505: PPUSH
24506: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
24510: LD_EXP 47
24514: PPUSH
24515: LD_STRING DRf-Veh-b-20
24517: PPUSH
24518: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
24522: LD_EXP 34
24526: PPUSH
24527: LD_STRING DH-Veh-b-21
24529: PPUSH
24530: CALL_OW 88
// if IsOk ( Givi ) then
24534: LD_EXP 35
24538: PPUSH
24539: CALL_OW 302
24543: IFFALSE 24581
// begin Say ( Givi , DG-Veh-b-22 ) ;
24545: LD_EXP 35
24549: PPUSH
24550: LD_STRING DG-Veh-b-22
24552: PPUSH
24553: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
24557: LD_EXP 34
24561: PPUSH
24562: LD_STRING DH-Veh-b-23
24564: PPUSH
24565: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
24569: LD_EXP 35
24573: PPUSH
24574: LD_STRING DG-Veh-b-24
24576: PPUSH
24577: CALL_OW 88
// end ; DialogueOff ;
24581: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24585: LD_STRING M5a
24587: PPUSH
24588: CALL_OW 337
// for i in rolfSquad do
24592: LD_ADDR_VAR 0 1
24596: PUSH
24597: LD_EXP 51
24601: PUSH
24602: FOR_IN
24603: IFFALSE 24720
// begin SetSide ( i , 8 ) ;
24605: LD_VAR 0 1
24609: PPUSH
24610: LD_INT 8
24612: PPUSH
24613: CALL_OW 235
// if IsDriver ( i ) then
24617: LD_VAR 0 1
24621: PPUSH
24622: CALL 64375 0 1
24626: IFFALSE 24698
// begin if not GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24628: LD_VAR 0 1
24632: PPUSH
24633: CALL_OW 310
24637: PPUSH
24638: CALL_OW 264
24642: PUSH
24643: LD_INT 51
24645: PUSH
24646: LD_INT 52
24648: PUSH
24649: LD_INT 32
24651: PUSH
24652: LD_INT 88
24654: PUSH
24655: LD_INT 31
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: IN
24665: NOT
24666: IFFALSE 24687
// SetSide ( IsInUnit ( i ) , 8 ) else
24668: LD_VAR 0 1
24672: PPUSH
24673: CALL_OW 310
24677: PPUSH
24678: LD_INT 8
24680: PPUSH
24681: CALL_OW 235
24685: GO 24696
// ComExitVehicle ( i ) ;
24687: LD_VAR 0 1
24691: PPUSH
24692: CALL_OW 121
// end else
24696: GO 24718
// if IsInUnit ( i ) then
24698: LD_VAR 0 1
24702: PPUSH
24703: CALL_OW 310
24707: IFFALSE 24718
// ComExitBuilding ( i ) ;
24709: LD_VAR 0 1
24713: PPUSH
24714: CALL_OW 122
// end ;
24718: GO 24602
24720: POP
24721: POP
// wait ( 0 0$10 ) ;
24722: LD_INT 350
24724: PPUSH
24725: CALL_OW 67
// rolfAttack := true ;
24729: LD_ADDR_EXP 32
24733: PUSH
24734: LD_INT 1
24736: ST_TO_ADDR
// exit ;
24737: GO 25055
// end ; if IsDead ( Rolf ) then
24739: LD_EXP 47
24743: PPUSH
24744: CALL_OW 301
24748: IFFALSE 24759
// begin ChangeMissionObjectives ( M5a ) ;
24750: LD_STRING M5a
24752: PPUSH
24753: CALL_OW 337
// exit ;
24757: GO 25055
// end ; if Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) then
24759: LD_EXP 51
24763: PPUSH
24764: LD_INT 55
24766: PUSH
24767: EMPTY
24768: LIST
24769: PPUSH
24770: CALL_OW 72
24774: PPUSH
24775: CALL 31539 0 1
24779: PUSH
24780: LD_EXP 51
24784: PPUSH
24785: CALL 31539 0 1
24789: EQUAL
24790: IFFALSE 24907
// begin for i in UnitFilter ( rolfSquad , [ f_driving ] ) do
24792: LD_ADDR_VAR 0 1
24796: PUSH
24797: LD_EXP 51
24801: PPUSH
24802: LD_INT 55
24804: PUSH
24805: EMPTY
24806: LIST
24807: PPUSH
24808: CALL_OW 72
24812: PUSH
24813: FOR_IN
24814: IFFALSE 24874
// if GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24816: LD_VAR 0 1
24820: PPUSH
24821: CALL_OW 310
24825: PPUSH
24826: CALL_OW 264
24830: PUSH
24831: LD_INT 51
24833: PUSH
24834: LD_INT 52
24836: PUSH
24837: LD_INT 32
24839: PUSH
24840: LD_INT 88
24842: PUSH
24843: LD_INT 31
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: IN
24853: IFFALSE 24872
// begin hasBadWeapons := true ;
24855: LD_ADDR_VAR 0 2
24859: PUSH
24860: LD_INT 1
24862: ST_TO_ADDR
// Query ( QBadWeapon ) ;
24863: LD_STRING QBadWeapon
24865: PPUSH
24866: CALL_OW 97
// break ;
24870: GO 24874
// end ;
24872: GO 24813
24874: POP
24875: POP
// if not hasBadWeapons then
24876: LD_VAR 0 2
24880: NOT
24881: IFFALSE 24907
// if Query ( QRolf ) = 1 then
24883: LD_STRING QRolf
24885: PPUSH
24886: CALL_OW 97
24890: PUSH
24891: LD_INT 1
24893: EQUAL
24894: IFFALSE 24900
// break else
24896: GO 24911
24898: GO 24907
// wait ( 0 0$15 ) ;
24900: LD_INT 525
24902: PPUSH
24903: CALL_OW 67
// end ; until false ;
24907: LD_INT 0
24909: IFFALSE 24440
// rolfWaitingForVehiclesTimer := 0 0$00 ;
24911: LD_ADDR_EXP 19
24915: PUSH
24916: LD_INT 0
24918: ST_TO_ADDR
// display_strings := [ ] ;
24919: LD_ADDR_OWVAR 47
24923: PUSH
24924: EMPTY
24925: ST_TO_ADDR
// DialogueOn ;
24926: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
24930: LD_EXP 47
24934: PPUSH
24935: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
24939: LD_EXP 47
24943: PPUSH
24944: LD_STRING DRf-Veh-a-17
24946: PPUSH
24947: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
24951: LD_EXP 34
24955: PPUSH
24956: LD_STRING DH-08-Veh-a-18
24958: PPUSH
24959: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
24963: LD_EXP 47
24967: PPUSH
24968: LD_STRING DRf-Veh-a-19
24970: PPUSH
24971: CALL_OW 88
// DialogueOff ;
24975: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24979: LD_STRING M5a
24981: PPUSH
24982: CALL_OW 337
// rolfHasVehicles := true ;
24986: LD_ADDR_EXP 16
24990: PUSH
24991: LD_INT 1
24993: ST_TO_ADDR
// for i in rolfSquad do
24994: LD_ADDR_VAR 0 1
24998: PUSH
24999: LD_EXP 51
25003: PUSH
25004: FOR_IN
25005: IFFALSE 25038
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
25007: LD_VAR 0 1
25011: PPUSH
25012: CALL_OW 310
25016: PPUSH
25017: LD_INT 8
25019: PPUSH
25020: CALL_OW 235
// SetSide ( i , 8 ) ;
25024: LD_VAR 0 1
25028: PPUSH
25029: LD_INT 8
25031: PPUSH
25032: CALL_OW 235
// end ;
25036: GO 25004
25038: POP
25039: POP
// wait ( 0 0$10 ) ;
25040: LD_INT 350
25042: PPUSH
25043: CALL_OW 67
// rolfAttack := true ;
25047: LD_ADDR_EXP 32
25051: PUSH
25052: LD_INT 1
25054: ST_TO_ADDR
// end ;
25055: PPOPN 2
25057: END
// every 0 0$1 trigger rolfAttack and omarAttack do
25058: LD_EXP 32
25062: PUSH
25063: LD_EXP 23
25067: AND
25068: IFFALSE 25080
25070: GO 25072
25072: DISABLE
// ChangeMissionObjectives ( M6a ) ;
25073: LD_STRING M6a
25075: PPUSH
25076: CALL_OW 337
25080: END
// every 0 0$1 trigger leninSpotted do
25081: LD_EXP 14
25085: IFFALSE 25173
25087: GO 25089
25089: DISABLE
// begin wait ( 0 0$10 ) ;
25090: LD_INT 350
25092: PPUSH
25093: CALL_OW 67
// DialogueOn ;
25097: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
25101: LD_EXP 46
25105: PPUSH
25106: LD_STRING DA-Transmission-1
25108: PPUSH
25109: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
25113: LD_EXP 53
25117: PPUSH
25118: LD_STRING DMzw-Transmission-2
25120: PPUSH
25121: CALL_OW 94
// if gaidarKilled then
25125: LD_EXP 7
25129: IFFALSE 25145
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
25131: LD_EXP 53
25135: PPUSH
25136: LD_STRING DMzw-Transmission-3
25138: PPUSH
25139: CALL_OW 94
25143: GO 25157
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
25145: LD_EXP 53
25149: PPUSH
25150: LD_STRING DMzw-Transmission-a-3
25152: PPUSH
25153: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
25157: LD_EXP 34
25161: PPUSH
25162: LD_STRING DH-Transmission-4
25164: PPUSH
25165: CALL_OW 88
// DialogueOff ;
25169: CALL_OW 7
// end ;
25173: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
25174: LD_INT 22
25176: PUSH
25177: LD_INT 3
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 25
25186: PUSH
25187: LD_INT 9
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 101
25196: PUSH
25197: LD_INT 2
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: LIST
25208: PPUSH
25209: CALL_OW 69
25213: PUSH
25214: LD_EXP 34
25218: PPUSH
25219: CALL_OW 302
25223: AND
25224: IFFALSE 25304
25226: GO 25228
25228: DISABLE
// begin wait ( 0 0$3 ) ;
25229: LD_INT 105
25231: PPUSH
25232: CALL_OW 67
// DialogueOn ;
25236: CALL_OW 6
// CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
25240: LD_INT 22
25242: PUSH
25243: LD_INT 3
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 25
25252: PUSH
25253: LD_INT 9
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 101
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: LIST
25274: PPUSH
25275: CALL_OW 69
25279: PUSH
25280: LD_INT 1
25282: ARRAY
25283: PPUSH
25284: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
25288: LD_EXP 34
25292: PPUSH
25293: LD_STRING DH-Rubazooka-1
25295: PPUSH
25296: CALL_OW 88
// DialogueOff ;
25300: CALL_OW 7
// end ;
25304: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
25305: LD_INT 19
25307: PPUSH
25308: LD_INT 22
25310: PUSH
25311: LD_INT 3
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PPUSH
25318: CALL_OW 70
25322: PUSH
25323: LD_EXP 28
25327: AND
25328: IFFALSE 25387
25330: GO 25332
25332: DISABLE
// begin DialogueOn ;
25333: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25337: LD_INT 19
25339: PPUSH
25340: LD_INT 22
25342: PUSH
25343: LD_INT 3
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PPUSH
25350: CALL_OW 70
25354: PPUSH
25355: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
25359: LD_EXP 34
25363: PPUSH
25364: LD_STRING DH-Ruattfirst-1
25366: PPUSH
25367: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
25371: LD_EXP 34
25375: PPUSH
25376: LD_STRING DH-Ruattfirst-2
25378: PPUSH
25379: CALL_OW 88
// DialogueOff ;
25383: CALL_OW 7
// end ;
25387: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
25388: LD_INT 19
25390: PPUSH
25391: LD_INT 22
25393: PUSH
25394: LD_INT 3
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PPUSH
25401: CALL_OW 70
25405: PUSH
25406: LD_EXP 28
25410: NOT
25411: AND
25412: IFFALSE 25459
25414: GO 25416
25416: DISABLE
// begin DialogueOn ;
25417: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25421: LD_INT 19
25423: PPUSH
25424: LD_INT 22
25426: PUSH
25427: LD_INT 3
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PPUSH
25434: CALL_OW 70
25438: PPUSH
25439: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
25443: LD_EXP 34
25447: PPUSH
25448: LD_STRING DH-Ruattnext-1
25450: PPUSH
25451: CALL_OW 88
// DialogueOff ;
25455: CALL_OW 7
// end ;
25459: END
// every 0 0$3 trigger IsDead ( Morozov ) and IsOk ( Omar ) do
25460: LD_EXP 53
25464: PPUSH
25465: CALL_OW 301
25469: PUSH
25470: LD_EXP 44
25474: PPUSH
25475: CALL_OW 302
25479: AND
25480: IFFALSE 25497
25482: GO 25484
25484: DISABLE
// SayRadio ( Omar , DOm-Morozov ) ;
25485: LD_EXP 44
25489: PPUSH
25490: LD_STRING DOm-Morozov
25492: PPUSH
25493: CALL_OW 94
25497: END
// every 0 0$1 trigger gameActive and GetResourceType ( GetBase ( arDepot ) , mat_oil ) <= 30 do
25498: LD_EXP 31
25502: PUSH
25503: LD_EXP 48
25507: PPUSH
25508: CALL_OW 274
25512: PPUSH
25513: LD_INT 2
25515: PPUSH
25516: CALL_OW 275
25520: PUSH
25521: LD_INT 30
25523: LESSEQUAL
25524: AND
25525: IFFALSE 25615
25527: GO 25529
25529: DISABLE
// begin wait ( 0 0$10 ) ;
25530: LD_INT 350
25532: PPUSH
25533: CALL_OW 67
// DialogueOn ;
25537: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
25541: LD_EXP 34
25545: PPUSH
25546: LD_STRING DH-Fuel-1
25548: PPUSH
25549: CALL_OW 88
// if IsOk ( Givi ) then
25553: LD_EXP 35
25557: PPUSH
25558: CALL_OW 302
25562: IFFALSE 25600
// begin Say ( Givi , DG-Fuel-2 ) ;
25564: LD_EXP 35
25568: PPUSH
25569: LD_STRING DG-Fuel-2
25571: PPUSH
25572: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
25576: LD_EXP 35
25580: PPUSH
25581: LD_STRING DG-Fuel-3
25583: PPUSH
25584: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
25588: LD_EXP 35
25592: PPUSH
25593: LD_STRING DG-Fuel-4
25595: PPUSH
25596: CALL_OW 88
// end ; DialogueOff ;
25600: CALL_OW 7
// Query ( QOil ) ;
25604: LD_STRING QOil
25606: PPUSH
25607: CALL_OW 97
// GoForOil ( ) ;
25611: CALL 8886 0 0
// end ;
25615: END
// every 0 0$1 trigger ( leninSpotted and omarAttack ) or IsDead ( Morozov ) do
25616: LD_EXP 14
25620: PUSH
25621: LD_EXP 23
25625: AND
25626: PUSH
25627: LD_EXP 53
25631: PPUSH
25632: CALL_OW 301
25636: OR
25637: IFFALSE 25978
25639: GO 25641
25641: DISABLE
// begin if IsDead ( Morozov ) then
25642: LD_EXP 53
25646: PPUSH
25647: CALL_OW 301
25651: IFFALSE 25662
// wait ( 1 1$45 ) else
25653: LD_INT 3675
25655: PPUSH
25656: CALL_OW 67
25660: GO 25690
// wait ( [ 9 9$30 , 8 8$00 , 7 7$40 , 6 6$30 ] [ Difficulty ] ) ;
25662: LD_INT 19950
25664: PUSH
25665: LD_INT 16800
25667: PUSH
25668: LD_INT 16100
25670: PUSH
25671: LD_INT 13650
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: PUSH
25680: LD_OWVAR 67
25684: ARRAY
25685: PPUSH
25686: CALL_OW 67
// DialogueOn ;
25690: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
25694: LD_EXP 42
25698: PPUSH
25699: LD_STRING DShar-End-1
25701: PPUSH
25702: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
25706: LD_EXP 34
25710: PPUSH
25711: LD_STRING DH-End-2
25713: PPUSH
25714: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
25718: LD_EXP 42
25722: PPUSH
25723: LD_STRING DShar-End-3
25725: PPUSH
25726: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
25730: LD_EXP 34
25734: PPUSH
25735: LD_STRING DH-End-4
25737: PPUSH
25738: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
25742: LD_EXP 42
25746: PPUSH
25747: LD_STRING DShar-End-5
25749: PPUSH
25750: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
25754: LD_EXP 42
25758: PPUSH
25759: LD_STRING DShar-End-6
25761: PPUSH
25762: CALL_OW 94
// dwait ( 0 0$2 ) ;
25766: LD_INT 70
25768: PPUSH
25769: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
25773: LD_EXP 34
25777: PPUSH
25778: LD_STRING DH-End-7
25780: PPUSH
25781: CALL_OW 88
// DialogueOff ;
25785: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
25789: LD_STRING M6
25791: PPUSH
25792: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
25796: LD_INT 17
25798: PPUSH
25799: LD_INT 1
25801: PPUSH
25802: CALL_OW 424
// escapeAllowed := true ;
25806: LD_ADDR_EXP 24
25810: PUSH
25811: LD_INT 1
25813: ST_TO_ADDR
// wait ( 0 0$2 ) ;
25814: LD_INT 70
25816: PPUSH
25817: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
25821: LD_EXP 45
25825: PPUSH
25826: LD_STRING DKs-End-8
25828: PPUSH
25829: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
25833: LD_EXP 39
25837: PPUSH
25838: LD_STRING DK-End-10
25840: PPUSH
25841: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
25845: LD_EXP 45
25849: PPUSH
25850: LD_STRING DKs-End-9
25852: PPUSH
25853: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
25857: LD_EXP 41
25861: PPUSH
25862: LD_STRING DMar-End-11
25864: PPUSH
25865: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
25869: LD_STRING 05_DrugsTested
25871: PPUSH
25872: LD_EXP 1
25876: PPUSH
25877: CALL_OW 30
25881: IFFALSE 25895
// Say ( Mike , DM-End-12 ) ;
25883: LD_EXP 36
25887: PPUSH
25888: LD_STRING DM-End-12
25890: PPUSH
25891: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
25895: LD_EXP 43
25899: PPUSH
25900: LD_STRING DO-End-13
25902: PPUSH
25903: CALL_OW 88
// if IsOk ( Sophia ) then
25907: LD_EXP 40
25911: PPUSH
25912: CALL_OW 302
25916: IFFALSE 25942
// begin Say ( Sophia , DS-End-15 ) ;
25918: LD_EXP 40
25922: PPUSH
25923: LD_STRING DS-End-15
25925: PPUSH
25926: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
25930: LD_EXP 39
25934: PPUSH
25935: LD_STRING DK-End-16
25937: PPUSH
25938: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
25942: LD_EXP 35
25946: PPUSH
25947: LD_STRING DG-End-17
25949: PPUSH
25950: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
25954: LD_EXP 35
25958: PPUSH
25959: LD_STRING DG-End-18
25961: PPUSH
25962: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
25966: LD_EXP 35
25970: PPUSH
25971: LD_STRING DG-End-19
25973: PPUSH
25974: CALL_OW 88
// end ;
25978: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
25979: LD_EXP 24
25983: IFFALSE 26122
25985: GO 25987
25987: DISABLE
25988: LD_INT 0
25990: PPUSH
25991: PPUSH
// begin repeat wait ( 0 0$1 ) ;
25992: LD_INT 35
25994: PPUSH
25995: CALL_OW 67
// display_strings := [ #X106-2 , escapeTimer ] ;
25999: LD_ADDR_OWVAR 47
26003: PUSH
26004: LD_STRING #X106-2
26006: PUSH
26007: LD_EXP 25
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
26016: LD_ADDR_EXP 25
26020: PUSH
26021: LD_EXP 25
26025: PUSH
26026: LD_INT 35
26028: MINUS
26029: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
26030: LD_ADDR_VAR 0 2
26034: PUSH
26035: LD_INT 17
26037: PPUSH
26038: LD_INT 22
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 21
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 23
26060: PUSH
26061: LD_INT 2
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: LIST
26072: PPUSH
26073: CALL_OW 71
26077: ST_TO_ADDR
// if not outsiders then
26078: LD_VAR 0 2
26082: NOT
26083: IFFALSE 26099
// begin escapeAllowed := false ;
26085: LD_ADDR_EXP 24
26089: PUSH
26090: LD_INT 0
26092: ST_TO_ADDR
// MissionWin ;
26093: CALL 26125 0 0
// exit ;
26097: GO 26122
// end ; if escapeTimer <= 0 0$00 then
26099: LD_EXP 25
26103: PUSH
26104: LD_INT 0
26106: LESSEQUAL
26107: IFFALSE 26118
// begin YouLost ( TimeOut ) ;
26109: LD_STRING TimeOut
26111: PPUSH
26112: CALL_OW 104
// exit ;
26116: GO 26122
// end ; until false ;
26118: LD_INT 0
26120: IFFALSE 25992
// end ;
26122: PPOPN 2
26124: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
26125: LD_INT 0
26127: PPUSH
26128: PPUSH
26129: PPUSH
26130: PPUSH
26131: PPUSH
// if tick <= 55 55$00 then
26132: LD_OWVAR 1
26136: PUSH
26137: LD_INT 115500
26139: LESSEQUAL
26140: IFFALSE 26149
// SetAchievement ( ACH_HSPEED_6 ) ;
26142: LD_STRING ACH_HSPEED_6
26144: PPUSH
26145: CALL_OW 543
// Say ( Heike , DH-End-20 ) ;
26149: LD_EXP 34
26153: PPUSH
26154: LD_STRING DH-End-20
26156: PPUSH
26157: CALL_OW 88
// if rolfDied then
26161: LD_EXP 13
26165: IFFALSE 26180
// AddMedal ( med1 , - 1 ) else
26167: LD_STRING med1
26169: PPUSH
26170: LD_INT 1
26172: NEG
26173: PPUSH
26174: CALL_OW 101
26178: GO 26210
// if not canRolfJoin then
26180: LD_EXP 29
26184: NOT
26185: IFFALSE 26200
// AddMedal ( med1 , - 2 ) else
26187: LD_STRING med1
26189: PPUSH
26190: LD_INT 2
26192: NEG
26193: PPUSH
26194: CALL_OW 101
26198: GO 26210
// AddMedal ( med1 , 1 ) ;
26200: LD_STRING med1
26202: PPUSH
26203: LD_INT 1
26205: PPUSH
26206: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
26210: LD_EXP 22
26214: PUSH
26215: LD_EXP 16
26219: AND
26220: IFFALSE 26234
// AddMedal ( med2 , 1 ) else
26222: LD_STRING med2
26224: PPUSH
26225: LD_INT 1
26227: PPUSH
26228: CALL_OW 101
26232: GO 26283
// if omarHasVehicles then
26234: LD_EXP 22
26238: IFFALSE 26253
// AddMedal ( med2 , - 1 ) else
26240: LD_STRING med2
26242: PPUSH
26243: LD_INT 1
26245: NEG
26246: PPUSH
26247: CALL_OW 101
26251: GO 26283
// if rolfHasVehicles then
26253: LD_EXP 16
26257: IFFALSE 26272
// AddMedal ( med2 , - 2 ) else
26259: LD_STRING med2
26261: PPUSH
26262: LD_INT 2
26264: NEG
26265: PPUSH
26266: CALL_OW 101
26270: GO 26283
// AddMedal ( med2 , - 3 ) ;
26272: LD_STRING med2
26274: PPUSH
26275: LD_INT 3
26277: NEG
26278: PPUSH
26279: CALL_OW 101
// if ruLoseCounter >= [ 20 , 30 , 40 , 50 ] [ Difficulty ] and heikeLoseCounter = 0 then
26283: LD_EXP 5
26287: PUSH
26288: LD_INT 20
26290: PUSH
26291: LD_INT 30
26293: PUSH
26294: LD_INT 40
26296: PUSH
26297: LD_INT 50
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: PUSH
26306: LD_OWVAR 67
26310: ARRAY
26311: GREATEREQUAL
26312: PUSH
26313: LD_EXP 26
26317: PUSH
26318: LD_INT 0
26320: EQUAL
26321: AND
26322: IFFALSE 26336
// AddMedal ( med3 , 1 ) else
26324: LD_STRING med3
26326: PPUSH
26327: LD_INT 1
26329: PPUSH
26330: CALL_OW 101
26334: GO 26366
// if heikeLoseCounter then
26336: LD_EXP 26
26340: IFFALSE 26355
// AddMedal ( med3 , - 2 ) else
26342: LD_STRING med3
26344: PPUSH
26345: LD_INT 2
26347: NEG
26348: PPUSH
26349: CALL_OW 101
26353: GO 26366
// AddMedal ( med3 , - 1 ) ;
26355: LD_STRING med3
26357: PPUSH
26358: LD_INT 1
26360: NEG
26361: PPUSH
26362: CALL_OW 101
// GiveMedals ( MAIN ) ;
26366: LD_STRING MAIN
26368: PPUSH
26369: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
26373: LD_INT 22
26375: PUSH
26376: LD_INT 2
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 23
26385: PUSH
26386: LD_INT 2
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 21
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: LIST
26407: PPUSH
26408: CALL_OW 69
26412: PPUSH
26413: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
26417: LD_EXP 34
26421: PPUSH
26422: LD_STRING 06_Heike
26424: PPUSH
26425: CALL_OW 38
// if Aviradze then
26429: LD_EXP 46
26433: IFFALSE 26447
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
26435: LD_EXP 46
26439: PPUSH
26440: LD_STRING 06_Aviradze
26442: PPUSH
26443: CALL_OW 38
// if Ibrahim then
26447: LD_EXP 37
26451: IFFALSE 26465
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
26453: LD_EXP 37
26457: PPUSH
26458: LD_STRING 06_Ibrahim
26460: PPUSH
26461: CALL_OW 38
// if Kamil then
26465: LD_EXP 38
26469: IFFALSE 26483
// SaveCharacters ( Kamil , 06_Kamil ) ;
26471: LD_EXP 38
26475: PPUSH
26476: LD_STRING 06_Kamil
26478: PPUSH
26479: CALL_OW 38
// if Sophia then
26483: LD_EXP 40
26487: IFFALSE 26501
// SaveCharacters ( Sophia , 06_Sophia ) ;
26489: LD_EXP 40
26493: PPUSH
26494: LD_STRING 06_Sophia
26496: PPUSH
26497: CALL_OW 38
// if Kaia then
26501: LD_EXP 39
26505: IFFALSE 26519
// SaveCharacters ( Kaia , 06_Kaia ) ;
26507: LD_EXP 39
26511: PPUSH
26512: LD_STRING 06_Kaia
26514: PPUSH
26515: CALL_OW 38
// if Givi then
26519: LD_EXP 35
26523: IFFALSE 26537
// SaveCharacters ( Givi , 06_Givi ) ;
26525: LD_EXP 35
26529: PPUSH
26530: LD_STRING 06_Givi
26532: PPUSH
26533: CALL_OW 38
// if Olaf then
26537: LD_EXP 43
26541: IFFALSE 26555
// SaveCharacters ( Olaf , 06_Olaf ) ;
26543: LD_EXP 43
26547: PPUSH
26548: LD_STRING 06_Olaf
26550: PPUSH
26551: CALL_OW 38
// if Mike then
26555: LD_EXP 36
26559: IFFALSE 26573
// SaveCharacters ( Mike , 06_Mike ) ;
26561: LD_EXP 36
26565: PPUSH
26566: LD_STRING 06_Mike
26568: PPUSH
26569: CALL_OW 38
// if Markov then
26573: LD_EXP 41
26577: IFFALSE 26591
// SaveCharacters ( Markov , 06_Markov ) ;
26579: LD_EXP 41
26583: PPUSH
26584: LD_STRING 06_Markov
26586: PPUSH
26587: CALL_OW 38
// if Kurt then
26591: LD_EXP 45
26595: IFFALSE 26609
// SaveCharacters ( Kurt , 06_Kurt ) ;
26597: LD_EXP 45
26601: PPUSH
26602: LD_STRING 06_Kurt
26604: PPUSH
26605: CALL_OW 38
// if heikeSecondSquad then
26609: LD_EXP 49
26613: IFFALSE 26627
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
26615: LD_EXP 49
26619: PPUSH
26620: LD_STRING 06_others
26622: PPUSH
26623: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
26627: LD_ADDR_VAR 0 3
26631: PUSH
26632: LD_INT 22
26634: PUSH
26635: LD_INT 2
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 23
26644: PUSH
26645: LD_INT 0
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PPUSH
26656: CALL_OW 69
26660: ST_TO_ADDR
// if tmp then
26661: LD_VAR 0 3
26665: IFFALSE 26679
// SaveCharacters ( tmp , 06_apes ) ;
26667: LD_VAR 0 3
26671: PPUSH
26672: LD_STRING 06_apes
26674: PPUSH
26675: CALL_OW 38
// if Rolf then
26679: LD_EXP 47
26683: IFFALSE 26734
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
26685: LD_EXP 47
26689: PPUSH
26690: LD_STRING 06_Rolf
26692: PPUSH
26693: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
26697: LD_STRING enableBioCharacter(BIO_ROLF)
26699: PPUSH
26700: CALL_OW 559
// if rolfSquad diff Rolf then
26704: LD_EXP 51
26708: PUSH
26709: LD_EXP 47
26713: DIFF
26714: IFFALSE 26734
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
26716: LD_EXP 51
26720: PUSH
26721: LD_EXP 47
26725: DIFF
26726: PPUSH
26727: LD_STRING 06_RolfSquad
26729: PPUSH
26730: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
26734: LD_ADDR_VAR 0 3
26738: PUSH
26739: LD_INT 17
26741: PPUSH
26742: LD_INT 21
26744: PUSH
26745: LD_INT 2
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PPUSH
26752: CALL_OW 70
26756: ST_TO_ADDR
// if tmp then
26757: LD_VAR 0 3
26761: IFFALSE 27055
// begin tmp2 := [ ] ;
26763: LD_ADDR_VAR 0 4
26767: PUSH
26768: EMPTY
26769: ST_TO_ADDR
// for i in tmp do
26770: LD_ADDR_VAR 0 2
26774: PUSH
26775: LD_VAR 0 3
26779: PUSH
26780: FOR_IN
26781: IFFALSE 27041
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
26783: LD_VAR 0 2
26787: PPUSH
26788: CALL_OW 264
26792: PUSH
26793: LD_INT 32
26795: PUSH
26796: LD_INT 12
26798: PUSH
26799: LD_INT 51
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: LIST
26806: IN
26807: IFFALSE 26944
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
26809: LD_ADDR_VAR 0 5
26813: PUSH
26814: LD_VAR 0 2
26818: PPUSH
26819: LD_INT 1
26821: PPUSH
26822: CALL_OW 289
26826: PUSH
26827: LD_VAR 0 2
26831: PPUSH
26832: LD_INT 2
26834: PPUSH
26835: CALL_OW 289
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
26844: LD_ADDR_VAR 0 4
26848: PUSH
26849: LD_VAR 0 4
26853: PPUSH
26854: LD_VAR 0 4
26858: PUSH
26859: LD_INT 1
26861: PLUS
26862: PPUSH
26863: LD_VAR 0 2
26867: PPUSH
26868: CALL_OW 265
26872: PUSH
26873: LD_VAR 0 2
26877: PPUSH
26878: CALL_OW 262
26882: PUSH
26883: LD_VAR 0 2
26887: PPUSH
26888: CALL_OW 263
26892: PUSH
26893: LD_VAR 0 2
26897: PPUSH
26898: CALL_OW 264
26902: PUSH
26903: LD_VAR 0 2
26907: PPUSH
26908: CALL_OW 248
26912: PUSH
26913: LD_VAR 0 2
26917: PPUSH
26918: CALL_OW 256
26922: PUSH
26923: LD_VAR 0 5
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: PPUSH
26937: CALL_OW 1
26941: ST_TO_ADDR
// end else
26942: GO 27039
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
26944: LD_ADDR_VAR 0 4
26948: PUSH
26949: LD_VAR 0 4
26953: PPUSH
26954: LD_VAR 0 4
26958: PUSH
26959: LD_INT 1
26961: PLUS
26962: PPUSH
26963: LD_VAR 0 2
26967: PPUSH
26968: CALL_OW 265
26972: PUSH
26973: LD_VAR 0 2
26977: PPUSH
26978: CALL_OW 262
26982: PUSH
26983: LD_VAR 0 2
26987: PPUSH
26988: CALL_OW 263
26992: PUSH
26993: LD_VAR 0 2
26997: PPUSH
26998: CALL_OW 264
27002: PUSH
27003: LD_VAR 0 2
27007: PPUSH
27008: CALL_OW 248
27012: PUSH
27013: LD_VAR 0 2
27017: PPUSH
27018: CALL_OW 256
27022: PUSH
27023: EMPTY
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: PPUSH
27034: CALL_OW 1
27038: ST_TO_ADDR
27039: GO 26780
27041: POP
27042: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
27043: LD_VAR 0 4
27047: PPUSH
27048: LD_STRING 06_Vehicles
27050: PPUSH
27051: CALL_OW 39
// end ; YouWin ;
27055: CALL_OW 103
// end ; end_of_file
27059: LD_VAR 0 1
27063: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
27064: LD_INT 0
27066: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
27067: LD_VAR 0 1
27071: PPUSH
27072: LD_VAR 0 2
27076: PPUSH
27077: CALL 87065 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
27081: LD_VAR 0 1
27085: PPUSH
27086: CALL_OW 255
27090: PUSH
27091: LD_INT 2
27093: EQUAL
27094: PUSH
27095: LD_OWVAR 52
27099: AND
27100: PUSH
27101: LD_VAR 0 1
27105: PPUSH
27106: CALL_OW 263
27110: PUSH
27111: LD_INT 1
27113: EQUAL
27114: AND
27115: IFFALSE 27170
// begin driver := IsDrivenBy ( vehicle ) ;
27117: LD_ADDR_VAR 0 3
27121: PUSH
27122: LD_VAR 0 1
27126: PPUSH
27127: CALL_OW 311
27131: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
27132: LD_VAR 0 1
27136: PPUSH
27137: LD_INT 211
27139: PPUSH
27140: LD_INT 101
27142: PPUSH
27143: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27147: LD_VAR 0 3
27151: PPUSH
27152: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27156: LD_VAR 0 3
27160: PPUSH
27161: LD_VAR 0 2
27165: PPUSH
27166: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
27170: LD_VAR 0 1
27174: PPUSH
27175: CALL_OW 255
27179: PUSH
27180: LD_INT 3
27182: EQUAL
27183: IFFALSE 27214
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
27185: LD_ADDR_EXP 60
27189: PUSH
27190: LD_EXP 60
27194: PPUSH
27195: LD_EXP 60
27199: PUSH
27200: LD_INT 1
27202: PLUS
27203: PPUSH
27204: LD_VAR 0 1
27208: PPUSH
27209: CALL_OW 1
27213: ST_TO_ADDR
// end ;
27214: PPOPN 3
27216: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
27217: LD_VAR 0 1
27221: PPUSH
27222: CALL_OW 255
27226: PUSH
27227: LD_INT 8
27229: EQUAL
27230: PUSH
27231: LD_VAR 0 1
27235: PPUSH
27236: CALL_OW 266
27240: PUSH
27241: LD_INT 4
27243: EQUAL
27244: AND
27245: IFFALSE 27256
// ComUpgrade ( b ) ;
27247: LD_VAR 0 1
27251: PPUSH
27252: CALL_OW 146
// end ;
27256: PPOPN 1
27258: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
27259: LD_VAR 0 1
27263: PPUSH
27264: CALL 86945 0 1
// if un = Heike then
27268: LD_VAR 0 1
27272: PUSH
27273: LD_EXP 34
27277: EQUAL
27278: IFFALSE 27287
// YouLost ( Heike ) ;
27280: LD_STRING Heike
27282: PPUSH
27283: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
27287: LD_VAR 0 1
27291: PUSH
27292: LD_INT 22
27294: PUSH
27295: LD_INT 2
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 23
27304: PUSH
27305: LD_INT 2
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PPUSH
27316: CALL_OW 69
27320: IN
27321: IFFALSE 27337
// heikeLoseCounter := heikeLoseCounter + 1 ;
27323: LD_ADDR_EXP 26
27327: PUSH
27328: LD_EXP 26
27332: PUSH
27333: LD_INT 1
27335: PLUS
27336: ST_TO_ADDR
// if un = arDepot then
27337: LD_VAR 0 1
27341: PUSH
27342: LD_EXP 48
27346: EQUAL
27347: IFFALSE 27356
// YouLost ( Base ) ;
27349: LD_STRING Base
27351: PPUSH
27352: CALL_OW 104
// if un = Rolf then
27356: LD_VAR 0 1
27360: PUSH
27361: LD_EXP 47
27365: EQUAL
27366: IFFALSE 27376
// rolfDied := true ;
27368: LD_ADDR_EXP 13
27372: PUSH
27373: LD_INT 1
27375: ST_TO_ADDR
// if un in rolfSquad then
27376: LD_VAR 0 1
27380: PUSH
27381: LD_EXP 51
27385: IN
27386: IFFALSE 27404
// rolfSquad := rolfSquad diff un ;
27388: LD_ADDR_EXP 51
27392: PUSH
27393: LD_EXP 51
27397: PUSH
27398: LD_VAR 0 1
27402: DIFF
27403: ST_TO_ADDR
// if un in omarSquad then
27404: LD_VAR 0 1
27408: PUSH
27409: LD_EXP 52
27413: IN
27414: IFFALSE 27432
// omarSquad := omarSquad diff un ;
27416: LD_ADDR_EXP 52
27420: PUSH
27421: LD_EXP 52
27425: PUSH
27426: LD_VAR 0 1
27430: DIFF
27431: ST_TO_ADDR
// if GetSide ( un ) = 3 then
27432: LD_VAR 0 1
27436: PPUSH
27437: CALL_OW 255
27441: PUSH
27442: LD_INT 3
27444: EQUAL
27445: IFFALSE 27461
// ruLoseCounter := ruLoseCounter + 1 ;
27447: LD_ADDR_EXP 5
27451: PUSH
27452: LD_EXP 5
27456: PUSH
27457: LD_INT 1
27459: PLUS
27460: ST_TO_ADDR
// if un in ruAttackers then
27461: LD_VAR 0 1
27465: PUSH
27466: LD_EXP 61
27470: IN
27471: IFFALSE 27489
// ruAttackers := ruAttackers diff un ;
27473: LD_ADDR_EXP 61
27477: PUSH
27478: LD_EXP 61
27482: PUSH
27483: LD_VAR 0 1
27487: DIFF
27488: ST_TO_ADDR
// end ;
27489: PPOPN 1
27491: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) in [ 5 , 8 ] and GetLives ( unit ) < 1000 then
27492: LD_VAR 0 2
27496: PPUSH
27497: CALL_OW 255
27501: PUSH
27502: LD_INT 5
27504: PUSH
27505: LD_INT 8
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: IN
27512: PUSH
27513: LD_VAR 0 2
27517: PPUSH
27518: CALL_OW 256
27522: PUSH
27523: LD_INT 1000
27525: LESS
27526: AND
27527: IFFALSE 27541
// SetLives ( unit , 1000 ) ;
27529: LD_VAR 0 2
27533: PPUSH
27534: LD_INT 1000
27536: PPUSH
27537: CALL_OW 234
// end ;
27541: PPOPN 2
27543: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
27544: LD_INT 0
27546: PPUSH
27547: PPUSH
27548: PPUSH
27549: PPUSH
// begin if GetSide ( vehicle ) = 8 and rolfAttack then
27550: LD_VAR 0 2
27554: PPUSH
27555: CALL_OW 255
27559: PUSH
27560: LD_INT 8
27562: EQUAL
27563: PUSH
27564: LD_EXP 32
27568: AND
27569: IFFALSE 27586
// ComMoveXY ( un , 221 , 161 ) ;
27571: LD_VAR 0 1
27575: PPUSH
27576: LD_INT 221
27578: PPUSH
27579: LD_INT 161
27581: PPUSH
27582: CALL_OW 111
// if GetSide ( vehicle ) = 5 and omarAttack then
27586: LD_VAR 0 2
27590: PPUSH
27591: CALL_OW 255
27595: PUSH
27596: LD_INT 5
27598: EQUAL
27599: PUSH
27600: LD_EXP 23
27604: AND
27605: IFFALSE 27714
// begin ComMoveXY ( un , 333 , 233 ) ;
27607: LD_VAR 0 1
27611: PPUSH
27612: LD_INT 333
27614: PPUSH
27615: LD_INT 233
27617: PPUSH
27618: CALL_OW 111
// if not HexInfo ( 334 , 241 ) or not GetBType ( HexInfo ( 334 , 241 ) ) = b_armoury then
27622: LD_INT 334
27624: PPUSH
27625: LD_INT 241
27627: PPUSH
27628: CALL_OW 428
27632: NOT
27633: PUSH
27634: LD_INT 334
27636: PPUSH
27637: LD_INT 241
27639: PPUSH
27640: CALL_OW 428
27644: PPUSH
27645: CALL_OW 266
27649: PUSH
27650: LD_INT 4
27652: EQUAL
27653: NOT
27654: OR
27655: IFFALSE 27659
// exit ;
27657: GO 28239
// AddComEnterUnit ( un , HexInfo ( 334 , 241 ) ) ;
27659: LD_VAR 0 1
27663: PPUSH
27664: LD_INT 334
27666: PPUSH
27667: LD_INT 241
27669: PPUSH
27670: CALL_OW 428
27674: PPUSH
27675: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
27679: LD_VAR 0 1
27683: PPUSH
27684: LD_INT 1
27686: PPUSH
27687: CALL_OW 183
// AddComExitBuilding ( un ) ;
27691: LD_VAR 0 1
27695: PPUSH
27696: CALL_OW 182
// AddComMoveUnit ( un , Omar ) ;
27700: LD_VAR 0 1
27704: PPUSH
27705: LD_EXP 44
27709: PPUSH
27710: CALL_OW 172
// end ; if GetSide ( un ) = 3 and not un in ruAttackers then
27714: LD_VAR 0 1
27718: PPUSH
27719: CALL_OW 255
27723: PUSH
27724: LD_INT 3
27726: EQUAL
27727: PUSH
27728: LD_VAR 0 1
27732: PUSH
27733: LD_EXP 61
27737: IN
27738: NOT
27739: AND
27740: IFFALSE 28239
// begin if not IsInArea ( un , ruMainBase ) then
27742: LD_VAR 0 1
27746: PPUSH
27747: LD_INT 10
27749: PPUSH
27750: CALL_OW 308
27754: NOT
27755: IFFALSE 27772
// ComMoveXY ( un , 62 , 98 ) ;
27757: LD_VAR 0 1
27761: PPUSH
27762: LD_INT 62
27764: PPUSH
27765: LD_INT 98
27767: PPUSH
27768: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27772: LD_INT 35
27774: PPUSH
27775: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
27779: LD_VAR 0 1
27783: PPUSH
27784: CALL_OW 302
27788: NOT
27789: PUSH
27790: LD_VAR 0 1
27794: PPUSH
27795: LD_INT 10
27797: PPUSH
27798: CALL_OW 308
27802: OR
27803: IFFALSE 27772
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
27805: LD_ADDR_EXP 59
27809: PUSH
27810: LD_EXP 59
27814: PPUSH
27815: LD_EXP 59
27819: PUSH
27820: LD_INT 1
27822: PLUS
27823: PPUSH
27824: LD_VAR 0 1
27828: PPUSH
27829: CALL_OW 1
27833: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
27834: LD_ADDR_VAR 0 8
27838: PUSH
27839: LD_INT 72
27841: PUSH
27842: LD_INT 12
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: ST_TO_ADDR
// if tmp then
27849: LD_VAR 0 8
27853: IFFALSE 27968
// for i in tmp do
27855: LD_ADDR_VAR 0 5
27859: PUSH
27860: LD_VAR 0 8
27864: PUSH
27865: FOR_IN
27866: IFFALSE 27966
// if UnitsInside ( i ) < 6 then
27868: LD_VAR 0 5
27872: PPUSH
27873: CALL_OW 313
27877: PUSH
27878: LD_INT 6
27880: LESS
27881: IFFALSE 27964
// begin AddComEnterUnit ( un , i ) ;
27883: LD_VAR 0 1
27887: PPUSH
27888: LD_VAR 0 5
27892: PPUSH
27893: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
27897: LD_VAR 0 8
27901: PPUSH
27902: LD_INT 22
27904: PUSH
27905: LD_INT 23
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 1
27914: PPUSH
27915: LD_INT 2
27917: PPUSH
27918: CALL_OW 12
27922: ARRAY
27923: PPUSH
27924: LD_INT 1
27926: PPUSH
27927: LD_INT 1
27929: PPUSH
27930: LD_INT 44
27932: PUSH
27933: LD_INT 46
27935: PUSH
27936: LD_INT 47
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 1
27946: PPUSH
27947: LD_INT 3
27949: PPUSH
27950: CALL_OW 12
27954: ARRAY
27955: PPUSH
27956: CALL_OW 185
// exit ;
27960: POP
27961: POP
27962: GO 28239
// end ;
27964: GO 27865
27966: POP
27967: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
27968: LD_ADDR_VAR 0 8
27972: PUSH
27973: LD_INT 10
27975: PPUSH
27976: LD_INT 22
27978: PUSH
27979: LD_INT 3
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 50
27988: PUSH
27989: EMPTY
27990: LIST
27991: PUSH
27992: LD_INT 2
27994: PUSH
27995: LD_INT 30
27997: PUSH
27998: LD_INT 4
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 30
28007: PUSH
28008: LD_INT 5
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 30
28017: PUSH
28018: LD_INT 32
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 30
28027: PUSH
28028: LD_INT 31
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: LIST
28046: PPUSH
28047: CALL_OW 70
28051: ST_TO_ADDR
// if not tmp then
28052: LD_VAR 0 8
28056: NOT
28057: IFFALSE 28076
// begin ComMoveXY ( un , 83 , 133 ) ;
28059: LD_VAR 0 1
28063: PPUSH
28064: LD_INT 83
28066: PPUSH
28067: LD_INT 133
28069: PPUSH
28070: CALL_OW 111
// exit ;
28074: GO 28239
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28076: LD_ADDR_VAR 0 6
28080: PUSH
28081: LD_VAR 0 1
28085: PPUSH
28086: LD_VAR 0 8
28090: PPUSH
28091: LD_INT 1
28093: PPUSH
28094: LD_INT 1
28096: PPUSH
28097: CALL 34834 0 4
28101: PUSH
28102: FOR_IN
28103: IFFALSE 28237
// begin case GetBType ( b ) of b_armoury , b_barracks :
28105: LD_VAR 0 6
28109: PPUSH
28110: CALL_OW 266
28114: PUSH
28115: LD_INT 4
28117: DOUBLE
28118: EQUAL
28119: IFTRUE 28129
28121: LD_INT 5
28123: DOUBLE
28124: EQUAL
28125: IFTRUE 28129
28127: GO 28140
28129: POP
// p := 6 ; b_breastwork , b_bunker :
28130: LD_ADDR_VAR 0 7
28134: PUSH
28135: LD_INT 6
28137: ST_TO_ADDR
28138: GO 28166
28140: LD_INT 31
28142: DOUBLE
28143: EQUAL
28144: IFTRUE 28154
28146: LD_INT 32
28148: DOUBLE
28149: EQUAL
28150: IFTRUE 28154
28152: GO 28165
28154: POP
// p := 1 ; end ;
28155: LD_ADDR_VAR 0 7
28159: PUSH
28160: LD_INT 1
28162: ST_TO_ADDR
28163: GO 28166
28165: POP
// if UnitsInside ( b ) < p then
28166: LD_VAR 0 6
28170: PPUSH
28171: CALL_OW 313
28175: PUSH
28176: LD_VAR 0 7
28180: LESS
28181: IFFALSE 28235
// begin ComEnterUnit ( un , b ) ;
28183: LD_VAR 0 1
28187: PPUSH
28188: LD_VAR 0 6
28192: PPUSH
28193: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
28197: LD_VAR 0 6
28201: PPUSH
28202: CALL_OW 266
28206: PUSH
28207: LD_INT 4
28209: PUSH
28210: LD_INT 5
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: IN
28217: IFFALSE 28231
// AddComChangeProfession ( un , class_soldier ) ;
28219: LD_VAR 0 1
28223: PPUSH
28224: LD_INT 1
28226: PPUSH
28227: CALL_OW 183
// exit ;
28231: POP
28232: POP
28233: GO 28239
// end ; end ;
28235: GO 28102
28237: POP
28238: POP
// end ; end ;
28239: PPOPN 8
28241: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
28242: LD_INT 0
28244: PPUSH
28245: PPUSH
28246: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
28247: LD_VAR 0 2
28251: PPUSH
28252: CALL_OW 255
28256: PUSH
28257: LD_INT 3
28259: EQUAL
28260: PUSH
28261: LD_VAR 0 2
28265: PPUSH
28266: CALL_OW 257
28270: PUSH
28271: LD_INT 1
28273: EQUAL
28274: AND
28275: PUSH
28276: LD_VAR 0 2
28280: PUSH
28281: LD_EXP 59
28285: IN
28286: NOT
28287: AND
28288: IFFALSE 28601
// begin ComMoveToArea ( un , ruMainBase ) ;
28290: LD_VAR 0 2
28294: PPUSH
28295: LD_INT 10
28297: PPUSH
28298: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
28302: LD_INT 35
28304: PPUSH
28305: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
28309: LD_VAR 0 2
28313: PPUSH
28314: CALL_OW 302
28318: NOT
28319: PUSH
28320: LD_VAR 0 2
28324: PPUSH
28325: LD_INT 10
28327: PPUSH
28328: CALL_OW 308
28332: OR
28333: IFFALSE 28302
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
28335: LD_ADDR_EXP 59
28339: PUSH
28340: LD_EXP 59
28344: PPUSH
28345: LD_EXP 59
28349: PUSH
28350: LD_INT 1
28352: PLUS
28353: PPUSH
28354: LD_VAR 0 2
28358: PPUSH
28359: CALL_OW 1
28363: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28364: LD_ADDR_VAR 0 4
28368: PUSH
28369: LD_INT 10
28371: PPUSH
28372: LD_INT 22
28374: PUSH
28375: LD_INT 3
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 50
28384: PUSH
28385: EMPTY
28386: LIST
28387: PUSH
28388: LD_INT 2
28390: PUSH
28391: LD_INT 30
28393: PUSH
28394: LD_INT 4
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 30
28403: PUSH
28404: LD_INT 5
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 30
28413: PUSH
28414: LD_INT 32
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 30
28423: PUSH
28424: LD_INT 31
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: LIST
28442: PPUSH
28443: CALL_OW 70
28447: ST_TO_ADDR
// if not tmp then
28448: LD_VAR 0 4
28452: NOT
28453: IFFALSE 28472
// begin ComMoveXY ( un , 83 , 133 ) ;
28455: LD_VAR 0 2
28459: PPUSH
28460: LD_INT 83
28462: PPUSH
28463: LD_INT 133
28465: PPUSH
28466: CALL_OW 111
// exit ;
28470: GO 28850
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28472: LD_ADDR_VAR 0 5
28476: PUSH
28477: LD_VAR 0 2
28481: PPUSH
28482: LD_VAR 0 4
28486: PPUSH
28487: LD_INT 1
28489: PPUSH
28490: LD_INT 1
28492: PPUSH
28493: CALL 34834 0 4
28497: PUSH
28498: FOR_IN
28499: IFFALSE 28599
// begin case GetBType ( b ) of b_armoury , b_barracks :
28501: LD_VAR 0 5
28505: PPUSH
28506: CALL_OW 266
28510: PUSH
28511: LD_INT 4
28513: DOUBLE
28514: EQUAL
28515: IFTRUE 28525
28517: LD_INT 5
28519: DOUBLE
28520: EQUAL
28521: IFTRUE 28525
28523: GO 28536
28525: POP
// p := 6 ; b_breastwork , b_bunker :
28526: LD_ADDR_VAR 0 3
28530: PUSH
28531: LD_INT 6
28533: ST_TO_ADDR
28534: GO 28562
28536: LD_INT 31
28538: DOUBLE
28539: EQUAL
28540: IFTRUE 28550
28542: LD_INT 32
28544: DOUBLE
28545: EQUAL
28546: IFTRUE 28550
28548: GO 28561
28550: POP
// p := 1 ; end ;
28551: LD_ADDR_VAR 0 3
28555: PUSH
28556: LD_INT 1
28558: ST_TO_ADDR
28559: GO 28562
28561: POP
// if UnitsInside ( b ) < p then
28562: LD_VAR 0 5
28566: PPUSH
28567: CALL_OW 313
28571: PUSH
28572: LD_VAR 0 3
28576: LESS
28577: IFFALSE 28597
// begin ComEnterUnit ( un , b ) ;
28579: LD_VAR 0 2
28583: PPUSH
28584: LD_VAR 0 5
28588: PPUSH
28589: CALL_OW 120
// exit ;
28593: POP
28594: POP
28595: GO 28850
// end ; end ;
28597: GO 28498
28599: POP
28600: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
28601: LD_VAR 0 2
28605: PUSH
28606: LD_EXP 59
28610: IN
28611: PUSH
28612: LD_VAR 0 2
28616: PPUSH
28617: CALL_OW 257
28621: PUSH
28622: LD_INT 1
28624: EQUAL
28625: AND
28626: IFFALSE 28850
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28628: LD_ADDR_VAR 0 4
28632: PUSH
28633: LD_INT 10
28635: PPUSH
28636: LD_INT 22
28638: PUSH
28639: LD_INT 3
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 50
28648: PUSH
28649: EMPTY
28650: LIST
28651: PUSH
28652: LD_INT 2
28654: PUSH
28655: LD_INT 30
28657: PUSH
28658: LD_INT 4
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 30
28667: PUSH
28668: LD_INT 5
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 30
28677: PUSH
28678: LD_INT 32
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 30
28687: PUSH
28688: LD_INT 31
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: LIST
28706: PPUSH
28707: CALL_OW 70
28711: ST_TO_ADDR
// if not tmp then
28712: LD_VAR 0 4
28716: NOT
28717: IFFALSE 28721
// exit ;
28719: GO 28850
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
28721: LD_ADDR_VAR 0 5
28725: PUSH
28726: LD_VAR 0 2
28730: PPUSH
28731: LD_VAR 0 4
28735: PPUSH
28736: LD_INT 1
28738: PPUSH
28739: LD_INT 1
28741: PPUSH
28742: CALL 34834 0 4
28746: PUSH
28747: FOR_IN
28748: IFFALSE 28848
// begin case GetBType ( b ) of b_armoury , b_barracks :
28750: LD_VAR 0 5
28754: PPUSH
28755: CALL_OW 266
28759: PUSH
28760: LD_INT 4
28762: DOUBLE
28763: EQUAL
28764: IFTRUE 28774
28766: LD_INT 5
28768: DOUBLE
28769: EQUAL
28770: IFTRUE 28774
28772: GO 28785
28774: POP
// p := 6 ; b_breastwork , b_bunker :
28775: LD_ADDR_VAR 0 3
28779: PUSH
28780: LD_INT 6
28782: ST_TO_ADDR
28783: GO 28811
28785: LD_INT 31
28787: DOUBLE
28788: EQUAL
28789: IFTRUE 28799
28791: LD_INT 32
28793: DOUBLE
28794: EQUAL
28795: IFTRUE 28799
28797: GO 28810
28799: POP
// p := 1 ; end ;
28800: LD_ADDR_VAR 0 3
28804: PUSH
28805: LD_INT 1
28807: ST_TO_ADDR
28808: GO 28811
28810: POP
// if UnitsInside ( b ) < p then
28811: LD_VAR 0 5
28815: PPUSH
28816: CALL_OW 313
28820: PUSH
28821: LD_VAR 0 3
28825: LESS
28826: IFFALSE 28846
// begin ComEnterUnit ( un , b ) ;
28828: LD_VAR 0 2
28832: PPUSH
28833: LD_VAR 0 5
28837: PPUSH
28838: CALL_OW 120
// exit ;
28842: POP
28843: POP
28844: GO 28850
// end ; end ;
28846: GO 28747
28848: POP
28849: POP
// end ; end ;
28850: PPOPN 5
28852: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
28853: LD_VAR 0 1
28857: PUSH
28858: LD_INT 2
28860: EQUAL
28861: PUSH
28862: LD_VAR 0 2
28866: PUSH
28867: LD_INT 5
28869: PUSH
28870: LD_INT 8
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: IN
28877: AND
28878: IFFALSE 28887
// YouLost ( FriendlyFire ) ;
28880: LD_STRING FriendlyFire
28882: PPUSH
28883: CALL_OW 104
// end ;
28887: PPOPN 2
28889: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
28890: LD_VAR 0 1
28894: PPUSH
28895: CALL_OW 255
28899: PUSH
28900: LD_INT 8
28902: EQUAL
28903: PUSH
28904: LD_VAR 0 1
28908: PPUSH
28909: CALL_OW 266
28913: PUSH
28914: LD_INT 5
28916: EQUAL
28917: AND
28918: IFFALSE 28932
// SetClass ( unit , class_mortar ) ;
28920: LD_VAR 0 2
28924: PPUSH
28925: LD_INT 8
28927: PPUSH
28928: CALL_OW 336
// end ; end_of_file
28932: PPOPN 2
28934: END
// every 0 0$35 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 20 , 18 , 16 , 12 ] [ Difficulty ] do
28935: LD_INT 6
28937: PPUSH
28938: LD_INT 1
28940: PPUSH
28941: CALL_OW 287
28945: PUSH
28946: LD_INT 20
28948: PUSH
28949: LD_INT 18
28951: PUSH
28952: LD_INT 16
28954: PUSH
28955: LD_INT 12
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: PUSH
28964: LD_OWVAR 67
28968: ARRAY
28969: LESS
28970: IFFALSE 28997
28972: GO 28974
28974: DISABLE
// begin enable ;
28975: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
28976: LD_INT 1
28978: PPUSH
28979: LD_INT 5
28981: PPUSH
28982: CALL_OW 12
28986: PPUSH
28987: LD_INT 6
28989: PPUSH
28990: LD_INT 1
28992: PPUSH
28993: CALL_OW 55
// end ;
28997: END
// every 0 0$25 trigger Prob ( 50 ) and tick < [ 28 28$00 , 27 27$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] and GetResourceArea ( southCrates , mat_cans ) < 10 do
28998: LD_INT 50
29000: PPUSH
29001: CALL_OW 13
29005: PUSH
29006: LD_OWVAR 1
29010: PUSH
29011: LD_INT 58800
29013: PUSH
29014: LD_INT 56700
29016: PUSH
29017: LD_INT 54600
29019: PUSH
29020: LD_INT 52500
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: PUSH
29029: LD_OWVAR 67
29033: ARRAY
29034: LESS
29035: AND
29036: PUSH
29037: LD_INT 21
29039: PPUSH
29040: LD_INT 1
29042: PPUSH
29043: CALL_OW 287
29047: PUSH
29048: LD_INT 10
29050: LESS
29051: AND
29052: IFFALSE 29094
29054: GO 29056
29056: DISABLE
// begin enable ;
29057: ENABLE
// wait ( rand ( 0 0$1 , 0 0$10 ) ) ;
29058: LD_INT 35
29060: PPUSH
29061: LD_INT 350
29063: PPUSH
29064: CALL_OW 12
29068: PPUSH
29069: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , southCrates , true ) ;
29073: LD_INT 1
29075: PPUSH
29076: LD_INT 5
29078: PPUSH
29079: CALL_OW 12
29083: PPUSH
29084: LD_INT 21
29086: PPUSH
29087: LD_INT 1
29089: PPUSH
29090: CALL_OW 55
// end ; end_of_file
29094: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
29095: LD_EXP 18
29099: PUSH
29100: LD_EXP 20
29104: AND
29105: PUSH
29106: LD_EXP 17
29110: PUSH
29111: LD_EXP 19
29115: AND
29116: OR
29117: IFFALSE 29436
29119: GO 29121
29121: DISABLE
// begin enable ;
29122: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
29123: LD_EXP 18
29127: PUSH
29128: LD_EXP 20
29132: AND
29133: PUSH
29134: LD_EXP 17
29138: PUSH
29139: LD_EXP 19
29143: AND
29144: AND
29145: IFFALSE 29282
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29147: LD_ADDR_OWVAR 47
29151: PUSH
29152: LD_STRING #X106-1a
29154: PUSH
29155: LD_EXP 21
29159: PUSH
29160: LD_INT 16
29162: PPUSH
29163: LD_INT 22
29165: PUSH
29166: LD_INT 2
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 21
29175: PUSH
29176: LD_INT 2
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 33
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 58
29195: PUSH
29196: EMPTY
29197: LIST
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: PPUSH
29205: CALL_OW 70
29209: MINUS
29210: PPUSH
29211: CALL 68944 0 1
29215: PUSH
29216: LD_STRING #X106-3a
29218: PUSH
29219: LD_EXP 20
29223: PUSH
29224: LD_STRING #X106-1
29226: PUSH
29227: LD_EXP 51
29231: PUSH
29232: LD_INT 0
29234: PLUS
29235: PUSH
29236: LD_EXP 51
29240: PPUSH
29241: LD_INT 55
29243: PUSH
29244: EMPTY
29245: LIST
29246: PPUSH
29247: CALL_OW 72
29251: PUSH
29252: LD_INT 0
29254: PLUS
29255: MINUS
29256: PPUSH
29257: CALL 68944 0 1
29261: PUSH
29262: LD_STRING #X106-3
29264: PUSH
29265: LD_EXP 19
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: ST_TO_ADDR
// end else
29280: GO 29436
// if omarWantVehicles and omarWaitingForVehiclesTimer then
29282: LD_EXP 18
29286: PUSH
29287: LD_EXP 20
29291: AND
29292: IFFALSE 29379
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
29294: LD_ADDR_OWVAR 47
29298: PUSH
29299: LD_STRING #X106-1a
29301: PUSH
29302: LD_EXP 21
29306: PUSH
29307: LD_INT 16
29309: PPUSH
29310: LD_INT 22
29312: PUSH
29313: LD_INT 2
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 21
29322: PUSH
29323: LD_INT 2
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 33
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 58
29342: PUSH
29343: EMPTY
29344: LIST
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: PPUSH
29352: CALL_OW 70
29356: MINUS
29357: PPUSH
29358: CALL 68944 0 1
29362: PUSH
29363: LD_STRING #X106-3a
29365: PUSH
29366: LD_EXP 20
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: ST_TO_ADDR
// end else
29377: GO 29436
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29379: LD_ADDR_OWVAR 47
29383: PUSH
29384: LD_STRING #X106-1
29386: PUSH
29387: LD_EXP 51
29391: PUSH
29392: LD_INT 0
29394: PLUS
29395: PUSH
29396: LD_EXP 51
29400: PPUSH
29401: LD_INT 55
29403: PUSH
29404: EMPTY
29405: LIST
29406: PPUSH
29407: CALL_OW 72
29411: PUSH
29412: LD_INT 0
29414: PLUS
29415: MINUS
29416: PPUSH
29417: CALL 68944 0 1
29421: PUSH
29422: LD_STRING #X106-3
29424: PUSH
29425: LD_EXP 19
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: ST_TO_ADDR
// end ; end ; end_of_file
29436: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29437: LD_INT 0
29439: PPUSH
29440: PPUSH
// if exist_mode then
29441: LD_VAR 0 2
29445: IFFALSE 29470
// unit := CreateCharacter ( prefix & ident ) else
29447: LD_ADDR_VAR 0 5
29451: PUSH
29452: LD_VAR 0 3
29456: PUSH
29457: LD_VAR 0 1
29461: STR
29462: PPUSH
29463: CALL_OW 34
29467: ST_TO_ADDR
29468: GO 29485
// unit := NewCharacter ( ident ) ;
29470: LD_ADDR_VAR 0 5
29474: PUSH
29475: LD_VAR 0 1
29479: PPUSH
29480: CALL_OW 25
29484: ST_TO_ADDR
// result := unit ;
29485: LD_ADDR_VAR 0 4
29489: PUSH
29490: LD_VAR 0 5
29494: ST_TO_ADDR
// end ;
29495: LD_VAR 0 4
29499: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29500: LD_INT 0
29502: PPUSH
29503: PPUSH
// if not side or not nation then
29504: LD_VAR 0 1
29508: NOT
29509: PUSH
29510: LD_VAR 0 2
29514: NOT
29515: OR
29516: IFFALSE 29520
// exit ;
29518: GO 30288
// case nation of nation_american :
29520: LD_VAR 0 2
29524: PUSH
29525: LD_INT 1
29527: DOUBLE
29528: EQUAL
29529: IFTRUE 29533
29531: GO 29747
29533: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29534: LD_ADDR_VAR 0 4
29538: PUSH
29539: LD_INT 35
29541: PUSH
29542: LD_INT 45
29544: PUSH
29545: LD_INT 46
29547: PUSH
29548: LD_INT 47
29550: PUSH
29551: LD_INT 82
29553: PUSH
29554: LD_INT 83
29556: PUSH
29557: LD_INT 84
29559: PUSH
29560: LD_INT 85
29562: PUSH
29563: LD_INT 86
29565: PUSH
29566: LD_INT 1
29568: PUSH
29569: LD_INT 2
29571: PUSH
29572: LD_INT 6
29574: PUSH
29575: LD_INT 15
29577: PUSH
29578: LD_INT 16
29580: PUSH
29581: LD_INT 7
29583: PUSH
29584: LD_INT 12
29586: PUSH
29587: LD_INT 13
29589: PUSH
29590: LD_INT 10
29592: PUSH
29593: LD_INT 14
29595: PUSH
29596: LD_INT 20
29598: PUSH
29599: LD_INT 21
29601: PUSH
29602: LD_INT 22
29604: PUSH
29605: LD_INT 25
29607: PUSH
29608: LD_INT 32
29610: PUSH
29611: LD_INT 27
29613: PUSH
29614: LD_INT 36
29616: PUSH
29617: LD_INT 69
29619: PUSH
29620: LD_INT 39
29622: PUSH
29623: LD_INT 34
29625: PUSH
29626: LD_INT 40
29628: PUSH
29629: LD_INT 48
29631: PUSH
29632: LD_INT 49
29634: PUSH
29635: LD_INT 50
29637: PUSH
29638: LD_INT 51
29640: PUSH
29641: LD_INT 52
29643: PUSH
29644: LD_INT 53
29646: PUSH
29647: LD_INT 54
29649: PUSH
29650: LD_INT 55
29652: PUSH
29653: LD_INT 56
29655: PUSH
29656: LD_INT 57
29658: PUSH
29659: LD_INT 58
29661: PUSH
29662: LD_INT 59
29664: PUSH
29665: LD_INT 60
29667: PUSH
29668: LD_INT 61
29670: PUSH
29671: LD_INT 62
29673: PUSH
29674: LD_INT 80
29676: PUSH
29677: LD_INT 82
29679: PUSH
29680: LD_INT 83
29682: PUSH
29683: LD_INT 84
29685: PUSH
29686: LD_INT 85
29688: PUSH
29689: LD_INT 86
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: ST_TO_ADDR
29745: GO 30212
29747: LD_INT 2
29749: DOUBLE
29750: EQUAL
29751: IFTRUE 29755
29753: GO 29981
29755: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29756: LD_ADDR_VAR 0 4
29760: PUSH
29761: LD_INT 35
29763: PUSH
29764: LD_INT 45
29766: PUSH
29767: LD_INT 46
29769: PUSH
29770: LD_INT 47
29772: PUSH
29773: LD_INT 82
29775: PUSH
29776: LD_INT 83
29778: PUSH
29779: LD_INT 84
29781: PUSH
29782: LD_INT 85
29784: PUSH
29785: LD_INT 87
29787: PUSH
29788: LD_INT 70
29790: PUSH
29791: LD_INT 1
29793: PUSH
29794: LD_INT 11
29796: PUSH
29797: LD_INT 3
29799: PUSH
29800: LD_INT 4
29802: PUSH
29803: LD_INT 5
29805: PUSH
29806: LD_INT 6
29808: PUSH
29809: LD_INT 15
29811: PUSH
29812: LD_INT 18
29814: PUSH
29815: LD_INT 7
29817: PUSH
29818: LD_INT 17
29820: PUSH
29821: LD_INT 8
29823: PUSH
29824: LD_INT 20
29826: PUSH
29827: LD_INT 21
29829: PUSH
29830: LD_INT 22
29832: PUSH
29833: LD_INT 72
29835: PUSH
29836: LD_INT 26
29838: PUSH
29839: LD_INT 69
29841: PUSH
29842: LD_INT 39
29844: PUSH
29845: LD_INT 40
29847: PUSH
29848: LD_INT 41
29850: PUSH
29851: LD_INT 42
29853: PUSH
29854: LD_INT 43
29856: PUSH
29857: LD_INT 48
29859: PUSH
29860: LD_INT 49
29862: PUSH
29863: LD_INT 50
29865: PUSH
29866: LD_INT 51
29868: PUSH
29869: LD_INT 52
29871: PUSH
29872: LD_INT 53
29874: PUSH
29875: LD_INT 54
29877: PUSH
29878: LD_INT 55
29880: PUSH
29881: LD_INT 56
29883: PUSH
29884: LD_INT 60
29886: PUSH
29887: LD_INT 61
29889: PUSH
29890: LD_INT 62
29892: PUSH
29893: LD_INT 66
29895: PUSH
29896: LD_INT 67
29898: PUSH
29899: LD_INT 68
29901: PUSH
29902: LD_INT 81
29904: PUSH
29905: LD_INT 82
29907: PUSH
29908: LD_INT 83
29910: PUSH
29911: LD_INT 84
29913: PUSH
29914: LD_INT 85
29916: PUSH
29917: LD_INT 87
29919: PUSH
29920: LD_INT 88
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: ST_TO_ADDR
29979: GO 30212
29981: LD_INT 3
29983: DOUBLE
29984: EQUAL
29985: IFTRUE 29989
29987: GO 30211
29989: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29990: LD_ADDR_VAR 0 4
29994: PUSH
29995: LD_INT 46
29997: PUSH
29998: LD_INT 47
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: LD_INT 2
30006: PUSH
30007: LD_INT 82
30009: PUSH
30010: LD_INT 83
30012: PUSH
30013: LD_INT 84
30015: PUSH
30016: LD_INT 85
30018: PUSH
30019: LD_INT 86
30021: PUSH
30022: LD_INT 11
30024: PUSH
30025: LD_INT 9
30027: PUSH
30028: LD_INT 20
30030: PUSH
30031: LD_INT 19
30033: PUSH
30034: LD_INT 21
30036: PUSH
30037: LD_INT 24
30039: PUSH
30040: LD_INT 22
30042: PUSH
30043: LD_INT 25
30045: PUSH
30046: LD_INT 28
30048: PUSH
30049: LD_INT 29
30051: PUSH
30052: LD_INT 30
30054: PUSH
30055: LD_INT 31
30057: PUSH
30058: LD_INT 37
30060: PUSH
30061: LD_INT 38
30063: PUSH
30064: LD_INT 32
30066: PUSH
30067: LD_INT 27
30069: PUSH
30070: LD_INT 33
30072: PUSH
30073: LD_INT 69
30075: PUSH
30076: LD_INT 39
30078: PUSH
30079: LD_INT 34
30081: PUSH
30082: LD_INT 40
30084: PUSH
30085: LD_INT 71
30087: PUSH
30088: LD_INT 23
30090: PUSH
30091: LD_INT 44
30093: PUSH
30094: LD_INT 48
30096: PUSH
30097: LD_INT 49
30099: PUSH
30100: LD_INT 50
30102: PUSH
30103: LD_INT 51
30105: PUSH
30106: LD_INT 52
30108: PUSH
30109: LD_INT 53
30111: PUSH
30112: LD_INT 54
30114: PUSH
30115: LD_INT 55
30117: PUSH
30118: LD_INT 56
30120: PUSH
30121: LD_INT 57
30123: PUSH
30124: LD_INT 58
30126: PUSH
30127: LD_INT 59
30129: PUSH
30130: LD_INT 63
30132: PUSH
30133: LD_INT 64
30135: PUSH
30136: LD_INT 65
30138: PUSH
30139: LD_INT 82
30141: PUSH
30142: LD_INT 83
30144: PUSH
30145: LD_INT 84
30147: PUSH
30148: LD_INT 85
30150: PUSH
30151: LD_INT 86
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: ST_TO_ADDR
30209: GO 30212
30211: POP
// if state > - 1 and state < 3 then
30212: LD_VAR 0 3
30216: PUSH
30217: LD_INT 1
30219: NEG
30220: GREATER
30221: PUSH
30222: LD_VAR 0 3
30226: PUSH
30227: LD_INT 3
30229: LESS
30230: AND
30231: IFFALSE 30288
// for i in result do
30233: LD_ADDR_VAR 0 5
30237: PUSH
30238: LD_VAR 0 4
30242: PUSH
30243: FOR_IN
30244: IFFALSE 30286
// if GetTech ( i , side ) <> state then
30246: LD_VAR 0 5
30250: PPUSH
30251: LD_VAR 0 1
30255: PPUSH
30256: CALL_OW 321
30260: PUSH
30261: LD_VAR 0 3
30265: NONEQUAL
30266: IFFALSE 30284
// result := result diff i ;
30268: LD_ADDR_VAR 0 4
30272: PUSH
30273: LD_VAR 0 4
30277: PUSH
30278: LD_VAR 0 5
30282: DIFF
30283: ST_TO_ADDR
30284: GO 30243
30286: POP
30287: POP
// end ;
30288: LD_VAR 0 4
30292: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30293: LD_INT 0
30295: PPUSH
30296: PPUSH
30297: PPUSH
// result := true ;
30298: LD_ADDR_VAR 0 3
30302: PUSH
30303: LD_INT 1
30305: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30306: LD_ADDR_VAR 0 5
30310: PUSH
30311: LD_VAR 0 2
30315: PPUSH
30316: CALL_OW 480
30320: ST_TO_ADDR
// if not tmp then
30321: LD_VAR 0 5
30325: NOT
30326: IFFALSE 30330
// exit ;
30328: GO 30379
// for i in tmp do
30330: LD_ADDR_VAR 0 4
30334: PUSH
30335: LD_VAR 0 5
30339: PUSH
30340: FOR_IN
30341: IFFALSE 30377
// if GetTech ( i , side ) <> state_researched then
30343: LD_VAR 0 4
30347: PPUSH
30348: LD_VAR 0 1
30352: PPUSH
30353: CALL_OW 321
30357: PUSH
30358: LD_INT 2
30360: NONEQUAL
30361: IFFALSE 30375
// begin result := false ;
30363: LD_ADDR_VAR 0 3
30367: PUSH
30368: LD_INT 0
30370: ST_TO_ADDR
// exit ;
30371: POP
30372: POP
30373: GO 30379
// end ;
30375: GO 30340
30377: POP
30378: POP
// end ;
30379: LD_VAR 0 3
30383: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30384: LD_INT 0
30386: PPUSH
30387: PPUSH
30388: PPUSH
30389: PPUSH
30390: PPUSH
30391: PPUSH
30392: PPUSH
30393: PPUSH
30394: PPUSH
30395: PPUSH
30396: PPUSH
30397: PPUSH
30398: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30399: LD_VAR 0 1
30403: NOT
30404: PUSH
30405: LD_VAR 0 1
30409: PPUSH
30410: CALL_OW 257
30414: PUSH
30415: LD_INT 9
30417: NONEQUAL
30418: OR
30419: IFFALSE 30423
// exit ;
30421: GO 30996
// side := GetSide ( unit ) ;
30423: LD_ADDR_VAR 0 9
30427: PUSH
30428: LD_VAR 0 1
30432: PPUSH
30433: CALL_OW 255
30437: ST_TO_ADDR
// tech_space := tech_spacanom ;
30438: LD_ADDR_VAR 0 12
30442: PUSH
30443: LD_INT 29
30445: ST_TO_ADDR
// tech_time := tech_taurad ;
30446: LD_ADDR_VAR 0 13
30450: PUSH
30451: LD_INT 28
30453: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30454: LD_ADDR_VAR 0 11
30458: PUSH
30459: LD_VAR 0 1
30463: PPUSH
30464: CALL_OW 310
30468: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30469: LD_VAR 0 11
30473: PPUSH
30474: CALL_OW 247
30478: PUSH
30479: LD_INT 2
30481: EQUAL
30482: IFFALSE 30486
// exit ;
30484: GO 30996
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30486: LD_ADDR_VAR 0 8
30490: PUSH
30491: LD_INT 81
30493: PUSH
30494: LD_VAR 0 9
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 3
30505: PUSH
30506: LD_INT 21
30508: PUSH
30509: LD_INT 3
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PPUSH
30524: CALL_OW 69
30528: ST_TO_ADDR
// if not tmp then
30529: LD_VAR 0 8
30533: NOT
30534: IFFALSE 30538
// exit ;
30536: GO 30996
// if in_unit then
30538: LD_VAR 0 11
30542: IFFALSE 30566
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30544: LD_ADDR_VAR 0 10
30548: PUSH
30549: LD_VAR 0 8
30553: PPUSH
30554: LD_VAR 0 11
30558: PPUSH
30559: CALL_OW 74
30563: ST_TO_ADDR
30564: GO 30586
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30566: LD_ADDR_VAR 0 10
30570: PUSH
30571: LD_VAR 0 8
30575: PPUSH
30576: LD_VAR 0 1
30580: PPUSH
30581: CALL_OW 74
30585: ST_TO_ADDR
// if not enemy then
30586: LD_VAR 0 10
30590: NOT
30591: IFFALSE 30595
// exit ;
30593: GO 30996
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30595: LD_VAR 0 11
30599: PUSH
30600: LD_VAR 0 11
30604: PPUSH
30605: LD_VAR 0 10
30609: PPUSH
30610: CALL_OW 296
30614: PUSH
30615: LD_INT 13
30617: GREATER
30618: AND
30619: PUSH
30620: LD_VAR 0 1
30624: PPUSH
30625: LD_VAR 0 10
30629: PPUSH
30630: CALL_OW 296
30634: PUSH
30635: LD_INT 12
30637: GREATER
30638: OR
30639: IFFALSE 30643
// exit ;
30641: GO 30996
// missile := [ 1 ] ;
30643: LD_ADDR_VAR 0 14
30647: PUSH
30648: LD_INT 1
30650: PUSH
30651: EMPTY
30652: LIST
30653: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30654: LD_VAR 0 9
30658: PPUSH
30659: LD_VAR 0 12
30663: PPUSH
30664: CALL_OW 325
30668: IFFALSE 30697
// missile := Replace ( missile , missile + 1 , 2 ) ;
30670: LD_ADDR_VAR 0 14
30674: PUSH
30675: LD_VAR 0 14
30679: PPUSH
30680: LD_VAR 0 14
30684: PUSH
30685: LD_INT 1
30687: PLUS
30688: PPUSH
30689: LD_INT 2
30691: PPUSH
30692: CALL_OW 1
30696: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30697: LD_VAR 0 9
30701: PPUSH
30702: LD_VAR 0 13
30706: PPUSH
30707: CALL_OW 325
30711: PUSH
30712: LD_VAR 0 10
30716: PPUSH
30717: CALL_OW 255
30721: PPUSH
30722: LD_VAR 0 13
30726: PPUSH
30727: CALL_OW 325
30731: NOT
30732: AND
30733: IFFALSE 30762
// missile := Replace ( missile , missile + 1 , 3 ) ;
30735: LD_ADDR_VAR 0 14
30739: PUSH
30740: LD_VAR 0 14
30744: PPUSH
30745: LD_VAR 0 14
30749: PUSH
30750: LD_INT 1
30752: PLUS
30753: PPUSH
30754: LD_INT 3
30756: PPUSH
30757: CALL_OW 1
30761: ST_TO_ADDR
// if missile < 2 then
30762: LD_VAR 0 14
30766: PUSH
30767: LD_INT 2
30769: LESS
30770: IFFALSE 30774
// exit ;
30772: GO 30996
// x := GetX ( enemy ) ;
30774: LD_ADDR_VAR 0 4
30778: PUSH
30779: LD_VAR 0 10
30783: PPUSH
30784: CALL_OW 250
30788: ST_TO_ADDR
// y := GetY ( enemy ) ;
30789: LD_ADDR_VAR 0 5
30793: PUSH
30794: LD_VAR 0 10
30798: PPUSH
30799: CALL_OW 251
30803: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30804: LD_ADDR_VAR 0 6
30808: PUSH
30809: LD_VAR 0 4
30813: PUSH
30814: LD_INT 1
30816: NEG
30817: PPUSH
30818: LD_INT 1
30820: PPUSH
30821: CALL_OW 12
30825: PLUS
30826: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30827: LD_ADDR_VAR 0 7
30831: PUSH
30832: LD_VAR 0 5
30836: PUSH
30837: LD_INT 1
30839: NEG
30840: PPUSH
30841: LD_INT 1
30843: PPUSH
30844: CALL_OW 12
30848: PLUS
30849: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30850: LD_VAR 0 6
30854: PPUSH
30855: LD_VAR 0 7
30859: PPUSH
30860: CALL_OW 488
30864: NOT
30865: IFFALSE 30887
// begin _x := x ;
30867: LD_ADDR_VAR 0 6
30871: PUSH
30872: LD_VAR 0 4
30876: ST_TO_ADDR
// _y := y ;
30877: LD_ADDR_VAR 0 7
30881: PUSH
30882: LD_VAR 0 5
30886: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30887: LD_ADDR_VAR 0 3
30891: PUSH
30892: LD_INT 1
30894: PPUSH
30895: LD_VAR 0 14
30899: PPUSH
30900: CALL_OW 12
30904: ST_TO_ADDR
// case i of 1 :
30905: LD_VAR 0 3
30909: PUSH
30910: LD_INT 1
30912: DOUBLE
30913: EQUAL
30914: IFTRUE 30918
30916: GO 30935
30918: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30919: LD_VAR 0 1
30923: PPUSH
30924: LD_VAR 0 10
30928: PPUSH
30929: CALL_OW 115
30933: GO 30996
30935: LD_INT 2
30937: DOUBLE
30938: EQUAL
30939: IFTRUE 30943
30941: GO 30965
30943: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30944: LD_VAR 0 1
30948: PPUSH
30949: LD_VAR 0 6
30953: PPUSH
30954: LD_VAR 0 7
30958: PPUSH
30959: CALL_OW 153
30963: GO 30996
30965: LD_INT 3
30967: DOUBLE
30968: EQUAL
30969: IFTRUE 30973
30971: GO 30995
30973: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30974: LD_VAR 0 1
30978: PPUSH
30979: LD_VAR 0 6
30983: PPUSH
30984: LD_VAR 0 7
30988: PPUSH
30989: CALL_OW 154
30993: GO 30996
30995: POP
// end ;
30996: LD_VAR 0 2
31000: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31001: LD_INT 0
31003: PPUSH
31004: PPUSH
31005: PPUSH
31006: PPUSH
31007: PPUSH
31008: PPUSH
// if not unit or not building then
31009: LD_VAR 0 1
31013: NOT
31014: PUSH
31015: LD_VAR 0 2
31019: NOT
31020: OR
31021: IFFALSE 31025
// exit ;
31023: GO 31183
// x := GetX ( building ) ;
31025: LD_ADDR_VAR 0 5
31029: PUSH
31030: LD_VAR 0 2
31034: PPUSH
31035: CALL_OW 250
31039: ST_TO_ADDR
// y := GetY ( building ) ;
31040: LD_ADDR_VAR 0 6
31044: PUSH
31045: LD_VAR 0 2
31049: PPUSH
31050: CALL_OW 251
31054: ST_TO_ADDR
// for i = 0 to 5 do
31055: LD_ADDR_VAR 0 4
31059: PUSH
31060: DOUBLE
31061: LD_INT 0
31063: DEC
31064: ST_TO_ADDR
31065: LD_INT 5
31067: PUSH
31068: FOR_TO
31069: IFFALSE 31181
// begin _x := ShiftX ( x , i , 3 ) ;
31071: LD_ADDR_VAR 0 7
31075: PUSH
31076: LD_VAR 0 5
31080: PPUSH
31081: LD_VAR 0 4
31085: PPUSH
31086: LD_INT 3
31088: PPUSH
31089: CALL_OW 272
31093: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31094: LD_ADDR_VAR 0 8
31098: PUSH
31099: LD_VAR 0 6
31103: PPUSH
31104: LD_VAR 0 4
31108: PPUSH
31109: LD_INT 3
31111: PPUSH
31112: CALL_OW 273
31116: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31117: LD_VAR 0 7
31121: PPUSH
31122: LD_VAR 0 8
31126: PPUSH
31127: CALL_OW 488
31131: NOT
31132: IFFALSE 31136
// continue ;
31134: GO 31068
// if HexInfo ( _x , _y ) = 0 then
31136: LD_VAR 0 7
31140: PPUSH
31141: LD_VAR 0 8
31145: PPUSH
31146: CALL_OW 428
31150: PUSH
31151: LD_INT 0
31153: EQUAL
31154: IFFALSE 31179
// begin ComMoveXY ( unit , _x , _y ) ;
31156: LD_VAR 0 1
31160: PPUSH
31161: LD_VAR 0 7
31165: PPUSH
31166: LD_VAR 0 8
31170: PPUSH
31171: CALL_OW 111
// exit ;
31175: POP
31176: POP
31177: GO 31183
// end ; end ;
31179: GO 31068
31181: POP
31182: POP
// end ;
31183: LD_VAR 0 3
31187: RET
// export function ScanBase ( side , base_area ) ; begin
31188: LD_INT 0
31190: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31191: LD_ADDR_VAR 0 3
31195: PUSH
31196: LD_VAR 0 2
31200: PPUSH
31201: LD_INT 81
31203: PUSH
31204: LD_VAR 0 1
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PPUSH
31213: CALL_OW 70
31217: ST_TO_ADDR
// end ;
31218: LD_VAR 0 3
31222: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31223: LD_INT 0
31225: PPUSH
31226: PPUSH
31227: PPUSH
31228: PPUSH
// result := false ;
31229: LD_ADDR_VAR 0 2
31233: PUSH
31234: LD_INT 0
31236: ST_TO_ADDR
// side := GetSide ( unit ) ;
31237: LD_ADDR_VAR 0 3
31241: PUSH
31242: LD_VAR 0 1
31246: PPUSH
31247: CALL_OW 255
31251: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31252: LD_ADDR_VAR 0 4
31256: PUSH
31257: LD_VAR 0 1
31261: PPUSH
31262: CALL_OW 248
31266: ST_TO_ADDR
// case nat of 1 :
31267: LD_VAR 0 4
31271: PUSH
31272: LD_INT 1
31274: DOUBLE
31275: EQUAL
31276: IFTRUE 31280
31278: GO 31291
31280: POP
// tech := tech_lassight ; 2 :
31281: LD_ADDR_VAR 0 5
31285: PUSH
31286: LD_INT 12
31288: ST_TO_ADDR
31289: GO 31330
31291: LD_INT 2
31293: DOUBLE
31294: EQUAL
31295: IFTRUE 31299
31297: GO 31310
31299: POP
// tech := tech_mortar ; 3 :
31300: LD_ADDR_VAR 0 5
31304: PUSH
31305: LD_INT 41
31307: ST_TO_ADDR
31308: GO 31330
31310: LD_INT 3
31312: DOUBLE
31313: EQUAL
31314: IFTRUE 31318
31316: GO 31329
31318: POP
// tech := tech_bazooka ; end ;
31319: LD_ADDR_VAR 0 5
31323: PUSH
31324: LD_INT 44
31326: ST_TO_ADDR
31327: GO 31330
31329: POP
// if Researched ( side , tech ) then
31330: LD_VAR 0 3
31334: PPUSH
31335: LD_VAR 0 5
31339: PPUSH
31340: CALL_OW 325
31344: IFFALSE 31371
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31346: LD_ADDR_VAR 0 2
31350: PUSH
31351: LD_INT 5
31353: PUSH
31354: LD_INT 8
31356: PUSH
31357: LD_INT 9
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: PUSH
31365: LD_VAR 0 4
31369: ARRAY
31370: ST_TO_ADDR
// end ;
31371: LD_VAR 0 2
31375: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31376: LD_INT 0
31378: PPUSH
31379: PPUSH
31380: PPUSH
// if not mines then
31381: LD_VAR 0 2
31385: NOT
31386: IFFALSE 31390
// exit ;
31388: GO 31534
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31390: LD_ADDR_VAR 0 5
31394: PUSH
31395: LD_INT 81
31397: PUSH
31398: LD_VAR 0 1
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 3
31409: PUSH
31410: LD_INT 21
31412: PUSH
31413: LD_INT 3
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PPUSH
31428: CALL_OW 69
31432: ST_TO_ADDR
// for i in mines do
31433: LD_ADDR_VAR 0 4
31437: PUSH
31438: LD_VAR 0 2
31442: PUSH
31443: FOR_IN
31444: IFFALSE 31532
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31446: LD_VAR 0 4
31450: PUSH
31451: LD_INT 1
31453: ARRAY
31454: PPUSH
31455: LD_VAR 0 4
31459: PUSH
31460: LD_INT 2
31462: ARRAY
31463: PPUSH
31464: CALL_OW 458
31468: NOT
31469: IFFALSE 31473
// continue ;
31471: GO 31443
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31473: LD_VAR 0 4
31477: PUSH
31478: LD_INT 1
31480: ARRAY
31481: PPUSH
31482: LD_VAR 0 4
31486: PUSH
31487: LD_INT 2
31489: ARRAY
31490: PPUSH
31491: CALL_OW 428
31495: PUSH
31496: LD_VAR 0 5
31500: IN
31501: IFFALSE 31530
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31503: LD_VAR 0 4
31507: PUSH
31508: LD_INT 1
31510: ARRAY
31511: PPUSH
31512: LD_VAR 0 4
31516: PUSH
31517: LD_INT 2
31519: ARRAY
31520: PPUSH
31521: LD_VAR 0 1
31525: PPUSH
31526: CALL_OW 456
// end ;
31530: GO 31443
31532: POP
31533: POP
// end ;
31534: LD_VAR 0 3
31538: RET
// export function Count ( array ) ; begin
31539: LD_INT 0
31541: PPUSH
// result := array + 0 ;
31542: LD_ADDR_VAR 0 2
31546: PUSH
31547: LD_VAR 0 1
31551: PUSH
31552: LD_INT 0
31554: PLUS
31555: ST_TO_ADDR
// end ;
31556: LD_VAR 0 2
31560: RET
// export function IsEmpty ( building ) ; begin
31561: LD_INT 0
31563: PPUSH
// if not building then
31564: LD_VAR 0 1
31568: NOT
31569: IFFALSE 31573
// exit ;
31571: GO 31616
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31573: LD_ADDR_VAR 0 2
31577: PUSH
31578: LD_VAR 0 1
31582: PUSH
31583: LD_INT 22
31585: PUSH
31586: LD_VAR 0 1
31590: PPUSH
31591: CALL_OW 255
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 58
31602: PUSH
31603: EMPTY
31604: LIST
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PPUSH
31610: CALL_OW 69
31614: IN
31615: ST_TO_ADDR
// end ;
31616: LD_VAR 0 2
31620: RET
// export function IsNotFull ( building ) ; var places ; begin
31621: LD_INT 0
31623: PPUSH
31624: PPUSH
// if not building then
31625: LD_VAR 0 1
31629: NOT
31630: IFFALSE 31634
// exit ;
31632: GO 31662
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31634: LD_ADDR_VAR 0 2
31638: PUSH
31639: LD_VAR 0 1
31643: PPUSH
31644: LD_INT 3
31646: PUSH
31647: LD_INT 62
31649: PUSH
31650: EMPTY
31651: LIST
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PPUSH
31657: CALL_OW 72
31661: ST_TO_ADDR
// end ;
31662: LD_VAR 0 2
31666: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31667: LD_INT 0
31669: PPUSH
31670: PPUSH
31671: PPUSH
31672: PPUSH
// tmp := [ ] ;
31673: LD_ADDR_VAR 0 3
31677: PUSH
31678: EMPTY
31679: ST_TO_ADDR
// list := [ ] ;
31680: LD_ADDR_VAR 0 5
31684: PUSH
31685: EMPTY
31686: ST_TO_ADDR
// for i = 16 to 25 do
31687: LD_ADDR_VAR 0 4
31691: PUSH
31692: DOUBLE
31693: LD_INT 16
31695: DEC
31696: ST_TO_ADDR
31697: LD_INT 25
31699: PUSH
31700: FOR_TO
31701: IFFALSE 31774
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31703: LD_ADDR_VAR 0 3
31707: PUSH
31708: LD_VAR 0 3
31712: PUSH
31713: LD_INT 22
31715: PUSH
31716: LD_VAR 0 1
31720: PPUSH
31721: CALL_OW 255
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 91
31732: PUSH
31733: LD_VAR 0 1
31737: PUSH
31738: LD_INT 6
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 30
31748: PUSH
31749: LD_VAR 0 4
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: LIST
31762: PUSH
31763: EMPTY
31764: LIST
31765: PPUSH
31766: CALL_OW 69
31770: ADD
31771: ST_TO_ADDR
31772: GO 31700
31774: POP
31775: POP
// for i = 1 to tmp do
31776: LD_ADDR_VAR 0 4
31780: PUSH
31781: DOUBLE
31782: LD_INT 1
31784: DEC
31785: ST_TO_ADDR
31786: LD_VAR 0 3
31790: PUSH
31791: FOR_TO
31792: IFFALSE 31880
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31794: LD_ADDR_VAR 0 5
31798: PUSH
31799: LD_VAR 0 5
31803: PUSH
31804: LD_VAR 0 3
31808: PUSH
31809: LD_VAR 0 4
31813: ARRAY
31814: PPUSH
31815: CALL_OW 266
31819: PUSH
31820: LD_VAR 0 3
31824: PUSH
31825: LD_VAR 0 4
31829: ARRAY
31830: PPUSH
31831: CALL_OW 250
31835: PUSH
31836: LD_VAR 0 3
31840: PUSH
31841: LD_VAR 0 4
31845: ARRAY
31846: PPUSH
31847: CALL_OW 251
31851: PUSH
31852: LD_VAR 0 3
31856: PUSH
31857: LD_VAR 0 4
31861: ARRAY
31862: PPUSH
31863: CALL_OW 254
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: PUSH
31874: EMPTY
31875: LIST
31876: ADD
31877: ST_TO_ADDR
31878: GO 31791
31880: POP
31881: POP
// result := list ;
31882: LD_ADDR_VAR 0 2
31886: PUSH
31887: LD_VAR 0 5
31891: ST_TO_ADDR
// end ;
31892: LD_VAR 0 2
31896: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31897: LD_INT 0
31899: PPUSH
31900: PPUSH
31901: PPUSH
31902: PPUSH
31903: PPUSH
31904: PPUSH
31905: PPUSH
// if not factory then
31906: LD_VAR 0 1
31910: NOT
31911: IFFALSE 31915
// exit ;
31913: GO 32508
// if control = control_apeman then
31915: LD_VAR 0 4
31919: PUSH
31920: LD_INT 5
31922: EQUAL
31923: IFFALSE 32032
// begin tmp := UnitsInside ( factory ) ;
31925: LD_ADDR_VAR 0 8
31929: PUSH
31930: LD_VAR 0 1
31934: PPUSH
31935: CALL_OW 313
31939: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31940: LD_VAR 0 8
31944: PPUSH
31945: LD_INT 25
31947: PUSH
31948: LD_INT 12
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PPUSH
31955: CALL_OW 72
31959: NOT
31960: IFFALSE 31970
// control := control_manual ;
31962: LD_ADDR_VAR 0 4
31966: PUSH
31967: LD_INT 1
31969: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31970: LD_ADDR_VAR 0 8
31974: PUSH
31975: LD_VAR 0 1
31979: PPUSH
31980: CALL 31667 0 1
31984: ST_TO_ADDR
// if tmp then
31985: LD_VAR 0 8
31989: IFFALSE 32032
// begin for i in tmp do
31991: LD_ADDR_VAR 0 7
31995: PUSH
31996: LD_VAR 0 8
32000: PUSH
32001: FOR_IN
32002: IFFALSE 32030
// if i [ 1 ] = b_ext_radio then
32004: LD_VAR 0 7
32008: PUSH
32009: LD_INT 1
32011: ARRAY
32012: PUSH
32013: LD_INT 22
32015: EQUAL
32016: IFFALSE 32028
// begin control := control_remote ;
32018: LD_ADDR_VAR 0 4
32022: PUSH
32023: LD_INT 2
32025: ST_TO_ADDR
// break ;
32026: GO 32030
// end ;
32028: GO 32001
32030: POP
32031: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32032: LD_VAR 0 1
32036: PPUSH
32037: LD_VAR 0 2
32041: PPUSH
32042: LD_VAR 0 3
32046: PPUSH
32047: LD_VAR 0 4
32051: PPUSH
32052: LD_VAR 0 5
32056: PPUSH
32057: CALL_OW 448
32061: IFFALSE 32096
// begin result := [ chassis , engine , control , weapon ] ;
32063: LD_ADDR_VAR 0 6
32067: PUSH
32068: LD_VAR 0 2
32072: PUSH
32073: LD_VAR 0 3
32077: PUSH
32078: LD_VAR 0 4
32082: PUSH
32083: LD_VAR 0 5
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: ST_TO_ADDR
// exit ;
32094: GO 32508
// end ; _chassis := AvailableChassisList ( factory ) ;
32096: LD_ADDR_VAR 0 9
32100: PUSH
32101: LD_VAR 0 1
32105: PPUSH
32106: CALL_OW 475
32110: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32111: LD_ADDR_VAR 0 11
32115: PUSH
32116: LD_VAR 0 1
32120: PPUSH
32121: CALL_OW 476
32125: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32126: LD_ADDR_VAR 0 12
32130: PUSH
32131: LD_VAR 0 1
32135: PPUSH
32136: CALL_OW 477
32140: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32141: LD_ADDR_VAR 0 10
32145: PUSH
32146: LD_VAR 0 1
32150: PPUSH
32151: CALL_OW 478
32155: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32156: LD_VAR 0 9
32160: NOT
32161: PUSH
32162: LD_VAR 0 11
32166: NOT
32167: OR
32168: PUSH
32169: LD_VAR 0 12
32173: NOT
32174: OR
32175: PUSH
32176: LD_VAR 0 10
32180: NOT
32181: OR
32182: IFFALSE 32217
// begin result := [ chassis , engine , control , weapon ] ;
32184: LD_ADDR_VAR 0 6
32188: PUSH
32189: LD_VAR 0 2
32193: PUSH
32194: LD_VAR 0 3
32198: PUSH
32199: LD_VAR 0 4
32203: PUSH
32204: LD_VAR 0 5
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: ST_TO_ADDR
// exit ;
32215: GO 32508
// end ; if not chassis in _chassis then
32217: LD_VAR 0 2
32221: PUSH
32222: LD_VAR 0 9
32226: IN
32227: NOT
32228: IFFALSE 32254
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32230: LD_ADDR_VAR 0 2
32234: PUSH
32235: LD_VAR 0 9
32239: PUSH
32240: LD_INT 1
32242: PPUSH
32243: LD_VAR 0 9
32247: PPUSH
32248: CALL_OW 12
32252: ARRAY
32253: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32254: LD_VAR 0 2
32258: PPUSH
32259: LD_VAR 0 3
32263: PPUSH
32264: CALL 32513 0 2
32268: NOT
32269: IFFALSE 32328
// repeat engine := _engine [ 1 ] ;
32271: LD_ADDR_VAR 0 3
32275: PUSH
32276: LD_VAR 0 11
32280: PUSH
32281: LD_INT 1
32283: ARRAY
32284: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32285: LD_ADDR_VAR 0 11
32289: PUSH
32290: LD_VAR 0 11
32294: PPUSH
32295: LD_INT 1
32297: PPUSH
32298: CALL_OW 3
32302: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32303: LD_VAR 0 2
32307: PPUSH
32308: LD_VAR 0 3
32312: PPUSH
32313: CALL 32513 0 2
32317: PUSH
32318: LD_VAR 0 11
32322: PUSH
32323: EMPTY
32324: EQUAL
32325: OR
32326: IFFALSE 32271
// if not control in _control then
32328: LD_VAR 0 4
32332: PUSH
32333: LD_VAR 0 12
32337: IN
32338: NOT
32339: IFFALSE 32365
// control := _control [ rand ( 1 , _control ) ] ;
32341: LD_ADDR_VAR 0 4
32345: PUSH
32346: LD_VAR 0 12
32350: PUSH
32351: LD_INT 1
32353: PPUSH
32354: LD_VAR 0 12
32358: PPUSH
32359: CALL_OW 12
32363: ARRAY
32364: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32365: LD_VAR 0 2
32369: PPUSH
32370: LD_VAR 0 5
32374: PPUSH
32375: CALL 32733 0 2
32379: NOT
32380: IFFALSE 32439
// repeat weapon := _weapon [ 1 ] ;
32382: LD_ADDR_VAR 0 5
32386: PUSH
32387: LD_VAR 0 10
32391: PUSH
32392: LD_INT 1
32394: ARRAY
32395: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32396: LD_ADDR_VAR 0 10
32400: PUSH
32401: LD_VAR 0 10
32405: PPUSH
32406: LD_INT 1
32408: PPUSH
32409: CALL_OW 3
32413: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32414: LD_VAR 0 2
32418: PPUSH
32419: LD_VAR 0 5
32423: PPUSH
32424: CALL 32733 0 2
32428: PUSH
32429: LD_VAR 0 10
32433: PUSH
32434: EMPTY
32435: EQUAL
32436: OR
32437: IFFALSE 32382
// result := [ ] ;
32439: LD_ADDR_VAR 0 6
32443: PUSH
32444: EMPTY
32445: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32446: LD_VAR 0 1
32450: PPUSH
32451: LD_VAR 0 2
32455: PPUSH
32456: LD_VAR 0 3
32460: PPUSH
32461: LD_VAR 0 4
32465: PPUSH
32466: LD_VAR 0 5
32470: PPUSH
32471: CALL_OW 448
32475: IFFALSE 32508
// result := [ chassis , engine , control , weapon ] ;
32477: LD_ADDR_VAR 0 6
32481: PUSH
32482: LD_VAR 0 2
32486: PUSH
32487: LD_VAR 0 3
32491: PUSH
32492: LD_VAR 0 4
32496: PUSH
32497: LD_VAR 0 5
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: ST_TO_ADDR
// end ;
32508: LD_VAR 0 6
32512: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32513: LD_INT 0
32515: PPUSH
// if not chassis or not engine then
32516: LD_VAR 0 1
32520: NOT
32521: PUSH
32522: LD_VAR 0 2
32526: NOT
32527: OR
32528: IFFALSE 32532
// exit ;
32530: GO 32728
// case engine of engine_solar :
32532: LD_VAR 0 2
32536: PUSH
32537: LD_INT 2
32539: DOUBLE
32540: EQUAL
32541: IFTRUE 32545
32543: GO 32583
32545: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32546: LD_ADDR_VAR 0 3
32550: PUSH
32551: LD_INT 11
32553: PUSH
32554: LD_INT 12
32556: PUSH
32557: LD_INT 13
32559: PUSH
32560: LD_INT 14
32562: PUSH
32563: LD_INT 1
32565: PUSH
32566: LD_INT 2
32568: PUSH
32569: LD_INT 3
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: ST_TO_ADDR
32581: GO 32712
32583: LD_INT 1
32585: DOUBLE
32586: EQUAL
32587: IFTRUE 32591
32589: GO 32653
32591: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32592: LD_ADDR_VAR 0 3
32596: PUSH
32597: LD_INT 11
32599: PUSH
32600: LD_INT 12
32602: PUSH
32603: LD_INT 13
32605: PUSH
32606: LD_INT 14
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: LD_INT 2
32614: PUSH
32615: LD_INT 3
32617: PUSH
32618: LD_INT 4
32620: PUSH
32621: LD_INT 5
32623: PUSH
32624: LD_INT 21
32626: PUSH
32627: LD_INT 23
32629: PUSH
32630: LD_INT 22
32632: PUSH
32633: LD_INT 24
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: ST_TO_ADDR
32651: GO 32712
32653: LD_INT 3
32655: DOUBLE
32656: EQUAL
32657: IFTRUE 32661
32659: GO 32711
32661: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32662: LD_ADDR_VAR 0 3
32666: PUSH
32667: LD_INT 13
32669: PUSH
32670: LD_INT 14
32672: PUSH
32673: LD_INT 2
32675: PUSH
32676: LD_INT 3
32678: PUSH
32679: LD_INT 4
32681: PUSH
32682: LD_INT 5
32684: PUSH
32685: LD_INT 21
32687: PUSH
32688: LD_INT 22
32690: PUSH
32691: LD_INT 23
32693: PUSH
32694: LD_INT 24
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: ST_TO_ADDR
32709: GO 32712
32711: POP
// result := ( chassis in result ) ;
32712: LD_ADDR_VAR 0 3
32716: PUSH
32717: LD_VAR 0 1
32721: PUSH
32722: LD_VAR 0 3
32726: IN
32727: ST_TO_ADDR
// end ;
32728: LD_VAR 0 3
32732: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32733: LD_INT 0
32735: PPUSH
// if not chassis or not weapon then
32736: LD_VAR 0 1
32740: NOT
32741: PUSH
32742: LD_VAR 0 2
32746: NOT
32747: OR
32748: IFFALSE 32752
// exit ;
32750: GO 33812
// case weapon of us_machine_gun :
32752: LD_VAR 0 2
32756: PUSH
32757: LD_INT 2
32759: DOUBLE
32760: EQUAL
32761: IFTRUE 32765
32763: GO 32795
32765: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32766: LD_ADDR_VAR 0 3
32770: PUSH
32771: LD_INT 1
32773: PUSH
32774: LD_INT 2
32776: PUSH
32777: LD_INT 3
32779: PUSH
32780: LD_INT 4
32782: PUSH
32783: LD_INT 5
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: ST_TO_ADDR
32793: GO 33796
32795: LD_INT 3
32797: DOUBLE
32798: EQUAL
32799: IFTRUE 32803
32801: GO 32833
32803: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32804: LD_ADDR_VAR 0 3
32808: PUSH
32809: LD_INT 1
32811: PUSH
32812: LD_INT 2
32814: PUSH
32815: LD_INT 3
32817: PUSH
32818: LD_INT 4
32820: PUSH
32821: LD_INT 5
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: ST_TO_ADDR
32831: GO 33796
32833: LD_INT 11
32835: DOUBLE
32836: EQUAL
32837: IFTRUE 32841
32839: GO 32871
32841: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32842: LD_ADDR_VAR 0 3
32846: PUSH
32847: LD_INT 1
32849: PUSH
32850: LD_INT 2
32852: PUSH
32853: LD_INT 3
32855: PUSH
32856: LD_INT 4
32858: PUSH
32859: LD_INT 5
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: ST_TO_ADDR
32869: GO 33796
32871: LD_INT 4
32873: DOUBLE
32874: EQUAL
32875: IFTRUE 32879
32877: GO 32905
32879: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32880: LD_ADDR_VAR 0 3
32884: PUSH
32885: LD_INT 2
32887: PUSH
32888: LD_INT 3
32890: PUSH
32891: LD_INT 4
32893: PUSH
32894: LD_INT 5
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: ST_TO_ADDR
32903: GO 33796
32905: LD_INT 5
32907: DOUBLE
32908: EQUAL
32909: IFTRUE 32913
32911: GO 32939
32913: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32914: LD_ADDR_VAR 0 3
32918: PUSH
32919: LD_INT 2
32921: PUSH
32922: LD_INT 3
32924: PUSH
32925: LD_INT 4
32927: PUSH
32928: LD_INT 5
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: ST_TO_ADDR
32937: GO 33796
32939: LD_INT 9
32941: DOUBLE
32942: EQUAL
32943: IFTRUE 32947
32945: GO 32973
32947: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32948: LD_ADDR_VAR 0 3
32952: PUSH
32953: LD_INT 2
32955: PUSH
32956: LD_INT 3
32958: PUSH
32959: LD_INT 4
32961: PUSH
32962: LD_INT 5
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: ST_TO_ADDR
32971: GO 33796
32973: LD_INT 7
32975: DOUBLE
32976: EQUAL
32977: IFTRUE 32981
32979: GO 33007
32981: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32982: LD_ADDR_VAR 0 3
32986: PUSH
32987: LD_INT 2
32989: PUSH
32990: LD_INT 3
32992: PUSH
32993: LD_INT 4
32995: PUSH
32996: LD_INT 5
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: ST_TO_ADDR
33005: GO 33796
33007: LD_INT 12
33009: DOUBLE
33010: EQUAL
33011: IFTRUE 33015
33013: GO 33041
33015: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33016: LD_ADDR_VAR 0 3
33020: PUSH
33021: LD_INT 2
33023: PUSH
33024: LD_INT 3
33026: PUSH
33027: LD_INT 4
33029: PUSH
33030: LD_INT 5
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: ST_TO_ADDR
33039: GO 33796
33041: LD_INT 13
33043: DOUBLE
33044: EQUAL
33045: IFTRUE 33049
33047: GO 33075
33049: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33050: LD_ADDR_VAR 0 3
33054: PUSH
33055: LD_INT 2
33057: PUSH
33058: LD_INT 3
33060: PUSH
33061: LD_INT 4
33063: PUSH
33064: LD_INT 5
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: ST_TO_ADDR
33073: GO 33796
33075: LD_INT 14
33077: DOUBLE
33078: EQUAL
33079: IFTRUE 33083
33081: GO 33101
33083: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33084: LD_ADDR_VAR 0 3
33088: PUSH
33089: LD_INT 4
33091: PUSH
33092: LD_INT 5
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: ST_TO_ADDR
33099: GO 33796
33101: LD_INT 6
33103: DOUBLE
33104: EQUAL
33105: IFTRUE 33109
33107: GO 33127
33109: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33110: LD_ADDR_VAR 0 3
33114: PUSH
33115: LD_INT 4
33117: PUSH
33118: LD_INT 5
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: ST_TO_ADDR
33125: GO 33796
33127: LD_INT 10
33129: DOUBLE
33130: EQUAL
33131: IFTRUE 33135
33133: GO 33153
33135: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33136: LD_ADDR_VAR 0 3
33140: PUSH
33141: LD_INT 4
33143: PUSH
33144: LD_INT 5
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: ST_TO_ADDR
33151: GO 33796
33153: LD_INT 22
33155: DOUBLE
33156: EQUAL
33157: IFTRUE 33161
33159: GO 33187
33161: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33162: LD_ADDR_VAR 0 3
33166: PUSH
33167: LD_INT 11
33169: PUSH
33170: LD_INT 12
33172: PUSH
33173: LD_INT 13
33175: PUSH
33176: LD_INT 14
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: ST_TO_ADDR
33185: GO 33796
33187: LD_INT 23
33189: DOUBLE
33190: EQUAL
33191: IFTRUE 33195
33193: GO 33221
33195: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33196: LD_ADDR_VAR 0 3
33200: PUSH
33201: LD_INT 11
33203: PUSH
33204: LD_INT 12
33206: PUSH
33207: LD_INT 13
33209: PUSH
33210: LD_INT 14
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: ST_TO_ADDR
33219: GO 33796
33221: LD_INT 24
33223: DOUBLE
33224: EQUAL
33225: IFTRUE 33229
33227: GO 33255
33229: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33230: LD_ADDR_VAR 0 3
33234: PUSH
33235: LD_INT 11
33237: PUSH
33238: LD_INT 12
33240: PUSH
33241: LD_INT 13
33243: PUSH
33244: LD_INT 14
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: ST_TO_ADDR
33253: GO 33796
33255: LD_INT 30
33257: DOUBLE
33258: EQUAL
33259: IFTRUE 33263
33261: GO 33289
33263: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33264: LD_ADDR_VAR 0 3
33268: PUSH
33269: LD_INT 11
33271: PUSH
33272: LD_INT 12
33274: PUSH
33275: LD_INT 13
33277: PUSH
33278: LD_INT 14
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: ST_TO_ADDR
33287: GO 33796
33289: LD_INT 25
33291: DOUBLE
33292: EQUAL
33293: IFTRUE 33297
33295: GO 33315
33297: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33298: LD_ADDR_VAR 0 3
33302: PUSH
33303: LD_INT 13
33305: PUSH
33306: LD_INT 14
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: ST_TO_ADDR
33313: GO 33796
33315: LD_INT 27
33317: DOUBLE
33318: EQUAL
33319: IFTRUE 33323
33321: GO 33341
33323: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33324: LD_ADDR_VAR 0 3
33328: PUSH
33329: LD_INT 13
33331: PUSH
33332: LD_INT 14
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: ST_TO_ADDR
33339: GO 33796
33341: LD_INT 92
33343: DOUBLE
33344: EQUAL
33345: IFTRUE 33349
33347: GO 33375
33349: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33350: LD_ADDR_VAR 0 3
33354: PUSH
33355: LD_INT 11
33357: PUSH
33358: LD_INT 12
33360: PUSH
33361: LD_INT 13
33363: PUSH
33364: LD_INT 14
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: ST_TO_ADDR
33373: GO 33796
33375: LD_INT 28
33377: DOUBLE
33378: EQUAL
33379: IFTRUE 33383
33381: GO 33401
33383: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33384: LD_ADDR_VAR 0 3
33388: PUSH
33389: LD_INT 13
33391: PUSH
33392: LD_INT 14
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: ST_TO_ADDR
33399: GO 33796
33401: LD_INT 29
33403: DOUBLE
33404: EQUAL
33405: IFTRUE 33409
33407: GO 33427
33409: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33410: LD_ADDR_VAR 0 3
33414: PUSH
33415: LD_INT 13
33417: PUSH
33418: LD_INT 14
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: ST_TO_ADDR
33425: GO 33796
33427: LD_INT 31
33429: DOUBLE
33430: EQUAL
33431: IFTRUE 33435
33433: GO 33453
33435: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33436: LD_ADDR_VAR 0 3
33440: PUSH
33441: LD_INT 13
33443: PUSH
33444: LD_INT 14
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: ST_TO_ADDR
33451: GO 33796
33453: LD_INT 26
33455: DOUBLE
33456: EQUAL
33457: IFTRUE 33461
33459: GO 33479
33461: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33462: LD_ADDR_VAR 0 3
33466: PUSH
33467: LD_INT 13
33469: PUSH
33470: LD_INT 14
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: ST_TO_ADDR
33477: GO 33796
33479: LD_INT 42
33481: DOUBLE
33482: EQUAL
33483: IFTRUE 33487
33485: GO 33513
33487: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33488: LD_ADDR_VAR 0 3
33492: PUSH
33493: LD_INT 21
33495: PUSH
33496: LD_INT 22
33498: PUSH
33499: LD_INT 23
33501: PUSH
33502: LD_INT 24
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: ST_TO_ADDR
33511: GO 33796
33513: LD_INT 43
33515: DOUBLE
33516: EQUAL
33517: IFTRUE 33521
33519: GO 33547
33521: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33522: LD_ADDR_VAR 0 3
33526: PUSH
33527: LD_INT 21
33529: PUSH
33530: LD_INT 22
33532: PUSH
33533: LD_INT 23
33535: PUSH
33536: LD_INT 24
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: ST_TO_ADDR
33545: GO 33796
33547: LD_INT 44
33549: DOUBLE
33550: EQUAL
33551: IFTRUE 33555
33553: GO 33581
33555: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33556: LD_ADDR_VAR 0 3
33560: PUSH
33561: LD_INT 21
33563: PUSH
33564: LD_INT 22
33566: PUSH
33567: LD_INT 23
33569: PUSH
33570: LD_INT 24
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: ST_TO_ADDR
33579: GO 33796
33581: LD_INT 45
33583: DOUBLE
33584: EQUAL
33585: IFTRUE 33589
33587: GO 33615
33589: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33590: LD_ADDR_VAR 0 3
33594: PUSH
33595: LD_INT 21
33597: PUSH
33598: LD_INT 22
33600: PUSH
33601: LD_INT 23
33603: PUSH
33604: LD_INT 24
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: ST_TO_ADDR
33613: GO 33796
33615: LD_INT 49
33617: DOUBLE
33618: EQUAL
33619: IFTRUE 33623
33621: GO 33649
33623: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33624: LD_ADDR_VAR 0 3
33628: PUSH
33629: LD_INT 21
33631: PUSH
33632: LD_INT 22
33634: PUSH
33635: LD_INT 23
33637: PUSH
33638: LD_INT 24
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: ST_TO_ADDR
33647: GO 33796
33649: LD_INT 51
33651: DOUBLE
33652: EQUAL
33653: IFTRUE 33657
33655: GO 33683
33657: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33658: LD_ADDR_VAR 0 3
33662: PUSH
33663: LD_INT 21
33665: PUSH
33666: LD_INT 22
33668: PUSH
33669: LD_INT 23
33671: PUSH
33672: LD_INT 24
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: ST_TO_ADDR
33681: GO 33796
33683: LD_INT 52
33685: DOUBLE
33686: EQUAL
33687: IFTRUE 33691
33689: GO 33717
33691: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33692: LD_ADDR_VAR 0 3
33696: PUSH
33697: LD_INT 21
33699: PUSH
33700: LD_INT 22
33702: PUSH
33703: LD_INT 23
33705: PUSH
33706: LD_INT 24
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: ST_TO_ADDR
33715: GO 33796
33717: LD_INT 53
33719: DOUBLE
33720: EQUAL
33721: IFTRUE 33725
33723: GO 33743
33725: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33726: LD_ADDR_VAR 0 3
33730: PUSH
33731: LD_INT 23
33733: PUSH
33734: LD_INT 24
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: ST_TO_ADDR
33741: GO 33796
33743: LD_INT 46
33745: DOUBLE
33746: EQUAL
33747: IFTRUE 33751
33749: GO 33769
33751: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33752: LD_ADDR_VAR 0 3
33756: PUSH
33757: LD_INT 23
33759: PUSH
33760: LD_INT 24
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: ST_TO_ADDR
33767: GO 33796
33769: LD_INT 47
33771: DOUBLE
33772: EQUAL
33773: IFTRUE 33777
33775: GO 33795
33777: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33778: LD_ADDR_VAR 0 3
33782: PUSH
33783: LD_INT 23
33785: PUSH
33786: LD_INT 24
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: ST_TO_ADDR
33793: GO 33796
33795: POP
// result := ( chassis in result ) ;
33796: LD_ADDR_VAR 0 3
33800: PUSH
33801: LD_VAR 0 1
33805: PUSH
33806: LD_VAR 0 3
33810: IN
33811: ST_TO_ADDR
// end ;
33812: LD_VAR 0 3
33816: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33817: LD_INT 0
33819: PPUSH
33820: PPUSH
33821: PPUSH
33822: PPUSH
33823: PPUSH
33824: PPUSH
33825: PPUSH
// result := array ;
33826: LD_ADDR_VAR 0 5
33830: PUSH
33831: LD_VAR 0 1
33835: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33836: LD_VAR 0 1
33840: NOT
33841: PUSH
33842: LD_VAR 0 2
33846: NOT
33847: OR
33848: PUSH
33849: LD_VAR 0 3
33853: NOT
33854: OR
33855: PUSH
33856: LD_VAR 0 2
33860: PUSH
33861: LD_VAR 0 1
33865: GREATER
33866: OR
33867: PUSH
33868: LD_VAR 0 3
33872: PUSH
33873: LD_VAR 0 1
33877: GREATER
33878: OR
33879: IFFALSE 33883
// exit ;
33881: GO 34179
// if direction then
33883: LD_VAR 0 4
33887: IFFALSE 33951
// begin d := 1 ;
33889: LD_ADDR_VAR 0 9
33893: PUSH
33894: LD_INT 1
33896: ST_TO_ADDR
// if i_from > i_to then
33897: LD_VAR 0 2
33901: PUSH
33902: LD_VAR 0 3
33906: GREATER
33907: IFFALSE 33933
// length := ( array - i_from ) + i_to else
33909: LD_ADDR_VAR 0 11
33913: PUSH
33914: LD_VAR 0 1
33918: PUSH
33919: LD_VAR 0 2
33923: MINUS
33924: PUSH
33925: LD_VAR 0 3
33929: PLUS
33930: ST_TO_ADDR
33931: GO 33949
// length := i_to - i_from ;
33933: LD_ADDR_VAR 0 11
33937: PUSH
33938: LD_VAR 0 3
33942: PUSH
33943: LD_VAR 0 2
33947: MINUS
33948: ST_TO_ADDR
// end else
33949: GO 34012
// begin d := - 1 ;
33951: LD_ADDR_VAR 0 9
33955: PUSH
33956: LD_INT 1
33958: NEG
33959: ST_TO_ADDR
// if i_from > i_to then
33960: LD_VAR 0 2
33964: PUSH
33965: LD_VAR 0 3
33969: GREATER
33970: IFFALSE 33990
// length := i_from - i_to else
33972: LD_ADDR_VAR 0 11
33976: PUSH
33977: LD_VAR 0 2
33981: PUSH
33982: LD_VAR 0 3
33986: MINUS
33987: ST_TO_ADDR
33988: GO 34012
// length := ( array - i_to ) + i_from ;
33990: LD_ADDR_VAR 0 11
33994: PUSH
33995: LD_VAR 0 1
33999: PUSH
34000: LD_VAR 0 3
34004: MINUS
34005: PUSH
34006: LD_VAR 0 2
34010: PLUS
34011: ST_TO_ADDR
// end ; if not length then
34012: LD_VAR 0 11
34016: NOT
34017: IFFALSE 34021
// exit ;
34019: GO 34179
// tmp := array ;
34021: LD_ADDR_VAR 0 10
34025: PUSH
34026: LD_VAR 0 1
34030: ST_TO_ADDR
// for i = 1 to length do
34031: LD_ADDR_VAR 0 6
34035: PUSH
34036: DOUBLE
34037: LD_INT 1
34039: DEC
34040: ST_TO_ADDR
34041: LD_VAR 0 11
34045: PUSH
34046: FOR_TO
34047: IFFALSE 34167
// begin for j = 1 to array do
34049: LD_ADDR_VAR 0 7
34053: PUSH
34054: DOUBLE
34055: LD_INT 1
34057: DEC
34058: ST_TO_ADDR
34059: LD_VAR 0 1
34063: PUSH
34064: FOR_TO
34065: IFFALSE 34153
// begin k := j + d ;
34067: LD_ADDR_VAR 0 8
34071: PUSH
34072: LD_VAR 0 7
34076: PUSH
34077: LD_VAR 0 9
34081: PLUS
34082: ST_TO_ADDR
// if k > array then
34083: LD_VAR 0 8
34087: PUSH
34088: LD_VAR 0 1
34092: GREATER
34093: IFFALSE 34103
// k := 1 ;
34095: LD_ADDR_VAR 0 8
34099: PUSH
34100: LD_INT 1
34102: ST_TO_ADDR
// if not k then
34103: LD_VAR 0 8
34107: NOT
34108: IFFALSE 34120
// k := array ;
34110: LD_ADDR_VAR 0 8
34114: PUSH
34115: LD_VAR 0 1
34119: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34120: LD_ADDR_VAR 0 10
34124: PUSH
34125: LD_VAR 0 10
34129: PPUSH
34130: LD_VAR 0 8
34134: PPUSH
34135: LD_VAR 0 1
34139: PUSH
34140: LD_VAR 0 7
34144: ARRAY
34145: PPUSH
34146: CALL_OW 1
34150: ST_TO_ADDR
// end ;
34151: GO 34064
34153: POP
34154: POP
// array := tmp ;
34155: LD_ADDR_VAR 0 1
34159: PUSH
34160: LD_VAR 0 10
34164: ST_TO_ADDR
// end ;
34165: GO 34046
34167: POP
34168: POP
// result := array ;
34169: LD_ADDR_VAR 0 5
34173: PUSH
34174: LD_VAR 0 1
34178: ST_TO_ADDR
// end ;
34179: LD_VAR 0 5
34183: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34184: LD_INT 0
34186: PPUSH
34187: PPUSH
// result := 0 ;
34188: LD_ADDR_VAR 0 3
34192: PUSH
34193: LD_INT 0
34195: ST_TO_ADDR
// if not array or not value in array then
34196: LD_VAR 0 1
34200: NOT
34201: PUSH
34202: LD_VAR 0 2
34206: PUSH
34207: LD_VAR 0 1
34211: IN
34212: NOT
34213: OR
34214: IFFALSE 34218
// exit ;
34216: GO 34272
// for i = 1 to array do
34218: LD_ADDR_VAR 0 4
34222: PUSH
34223: DOUBLE
34224: LD_INT 1
34226: DEC
34227: ST_TO_ADDR
34228: LD_VAR 0 1
34232: PUSH
34233: FOR_TO
34234: IFFALSE 34270
// if value = array [ i ] then
34236: LD_VAR 0 2
34240: PUSH
34241: LD_VAR 0 1
34245: PUSH
34246: LD_VAR 0 4
34250: ARRAY
34251: EQUAL
34252: IFFALSE 34268
// begin result := i ;
34254: LD_ADDR_VAR 0 3
34258: PUSH
34259: LD_VAR 0 4
34263: ST_TO_ADDR
// exit ;
34264: POP
34265: POP
34266: GO 34272
// end ;
34268: GO 34233
34270: POP
34271: POP
// end ;
34272: LD_VAR 0 3
34276: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34277: LD_INT 0
34279: PPUSH
// vc_chassis := chassis ;
34280: LD_ADDR_OWVAR 37
34284: PUSH
34285: LD_VAR 0 1
34289: ST_TO_ADDR
// vc_engine := engine ;
34290: LD_ADDR_OWVAR 39
34294: PUSH
34295: LD_VAR 0 2
34299: ST_TO_ADDR
// vc_control := control ;
34300: LD_ADDR_OWVAR 38
34304: PUSH
34305: LD_VAR 0 3
34309: ST_TO_ADDR
// vc_weapon := weapon ;
34310: LD_ADDR_OWVAR 40
34314: PUSH
34315: LD_VAR 0 4
34319: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34320: LD_ADDR_OWVAR 41
34324: PUSH
34325: LD_VAR 0 5
34329: ST_TO_ADDR
// end ;
34330: LD_VAR 0 6
34334: RET
// export function WantPlant ( unit ) ; var task ; begin
34335: LD_INT 0
34337: PPUSH
34338: PPUSH
// result := false ;
34339: LD_ADDR_VAR 0 2
34343: PUSH
34344: LD_INT 0
34346: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34347: LD_ADDR_VAR 0 3
34351: PUSH
34352: LD_VAR 0 1
34356: PPUSH
34357: CALL_OW 437
34361: ST_TO_ADDR
// if task then
34362: LD_VAR 0 3
34366: IFFALSE 34394
// if task [ 1 ] [ 1 ] = p then
34368: LD_VAR 0 3
34372: PUSH
34373: LD_INT 1
34375: ARRAY
34376: PUSH
34377: LD_INT 1
34379: ARRAY
34380: PUSH
34381: LD_STRING p
34383: EQUAL
34384: IFFALSE 34394
// result := true ;
34386: LD_ADDR_VAR 0 2
34390: PUSH
34391: LD_INT 1
34393: ST_TO_ADDR
// end ;
34394: LD_VAR 0 2
34398: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34399: LD_INT 0
34401: PPUSH
34402: PPUSH
34403: PPUSH
34404: PPUSH
// if pos < 1 then
34405: LD_VAR 0 2
34409: PUSH
34410: LD_INT 1
34412: LESS
34413: IFFALSE 34417
// exit ;
34415: GO 34720
// if pos = 1 then
34417: LD_VAR 0 2
34421: PUSH
34422: LD_INT 1
34424: EQUAL
34425: IFFALSE 34458
// result := Replace ( arr , pos [ 1 ] , value ) else
34427: LD_ADDR_VAR 0 4
34431: PUSH
34432: LD_VAR 0 1
34436: PPUSH
34437: LD_VAR 0 2
34441: PUSH
34442: LD_INT 1
34444: ARRAY
34445: PPUSH
34446: LD_VAR 0 3
34450: PPUSH
34451: CALL_OW 1
34455: ST_TO_ADDR
34456: GO 34720
// begin tmp := arr ;
34458: LD_ADDR_VAR 0 6
34462: PUSH
34463: LD_VAR 0 1
34467: ST_TO_ADDR
// s_arr := [ tmp ] ;
34468: LD_ADDR_VAR 0 7
34472: PUSH
34473: LD_VAR 0 6
34477: PUSH
34478: EMPTY
34479: LIST
34480: ST_TO_ADDR
// for i = 1 to pos - 1 do
34481: LD_ADDR_VAR 0 5
34485: PUSH
34486: DOUBLE
34487: LD_INT 1
34489: DEC
34490: ST_TO_ADDR
34491: LD_VAR 0 2
34495: PUSH
34496: LD_INT 1
34498: MINUS
34499: PUSH
34500: FOR_TO
34501: IFFALSE 34546
// begin tmp := tmp [ pos [ i ] ] ;
34503: LD_ADDR_VAR 0 6
34507: PUSH
34508: LD_VAR 0 6
34512: PUSH
34513: LD_VAR 0 2
34517: PUSH
34518: LD_VAR 0 5
34522: ARRAY
34523: ARRAY
34524: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34525: LD_ADDR_VAR 0 7
34529: PUSH
34530: LD_VAR 0 7
34534: PUSH
34535: LD_VAR 0 6
34539: PUSH
34540: EMPTY
34541: LIST
34542: ADD
34543: ST_TO_ADDR
// end ;
34544: GO 34500
34546: POP
34547: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34548: LD_ADDR_VAR 0 6
34552: PUSH
34553: LD_VAR 0 6
34557: PPUSH
34558: LD_VAR 0 2
34562: PUSH
34563: LD_VAR 0 2
34567: ARRAY
34568: PPUSH
34569: LD_VAR 0 3
34573: PPUSH
34574: CALL_OW 1
34578: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34579: LD_ADDR_VAR 0 7
34583: PUSH
34584: LD_VAR 0 7
34588: PPUSH
34589: LD_VAR 0 7
34593: PPUSH
34594: LD_VAR 0 6
34598: PPUSH
34599: CALL_OW 1
34603: ST_TO_ADDR
// for i = s_arr downto 2 do
34604: LD_ADDR_VAR 0 5
34608: PUSH
34609: DOUBLE
34610: LD_VAR 0 7
34614: INC
34615: ST_TO_ADDR
34616: LD_INT 2
34618: PUSH
34619: FOR_DOWNTO
34620: IFFALSE 34704
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34622: LD_ADDR_VAR 0 6
34626: PUSH
34627: LD_VAR 0 7
34631: PUSH
34632: LD_VAR 0 5
34636: PUSH
34637: LD_INT 1
34639: MINUS
34640: ARRAY
34641: PPUSH
34642: LD_VAR 0 2
34646: PUSH
34647: LD_VAR 0 5
34651: PUSH
34652: LD_INT 1
34654: MINUS
34655: ARRAY
34656: PPUSH
34657: LD_VAR 0 7
34661: PUSH
34662: LD_VAR 0 5
34666: ARRAY
34667: PPUSH
34668: CALL_OW 1
34672: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34673: LD_ADDR_VAR 0 7
34677: PUSH
34678: LD_VAR 0 7
34682: PPUSH
34683: LD_VAR 0 5
34687: PUSH
34688: LD_INT 1
34690: MINUS
34691: PPUSH
34692: LD_VAR 0 6
34696: PPUSH
34697: CALL_OW 1
34701: ST_TO_ADDR
// end ;
34702: GO 34619
34704: POP
34705: POP
// result := s_arr [ 1 ] ;
34706: LD_ADDR_VAR 0 4
34710: PUSH
34711: LD_VAR 0 7
34715: PUSH
34716: LD_INT 1
34718: ARRAY
34719: ST_TO_ADDR
// end ; end ;
34720: LD_VAR 0 4
34724: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34725: LD_INT 0
34727: PPUSH
34728: PPUSH
// if not list then
34729: LD_VAR 0 1
34733: NOT
34734: IFFALSE 34738
// exit ;
34736: GO 34829
// i := list [ pos1 ] ;
34738: LD_ADDR_VAR 0 5
34742: PUSH
34743: LD_VAR 0 1
34747: PUSH
34748: LD_VAR 0 2
34752: ARRAY
34753: ST_TO_ADDR
// if not i then
34754: LD_VAR 0 5
34758: NOT
34759: IFFALSE 34763
// exit ;
34761: GO 34829
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34763: LD_ADDR_VAR 0 1
34767: PUSH
34768: LD_VAR 0 1
34772: PPUSH
34773: LD_VAR 0 2
34777: PPUSH
34778: LD_VAR 0 1
34782: PUSH
34783: LD_VAR 0 3
34787: ARRAY
34788: PPUSH
34789: CALL_OW 1
34793: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34794: LD_ADDR_VAR 0 1
34798: PUSH
34799: LD_VAR 0 1
34803: PPUSH
34804: LD_VAR 0 3
34808: PPUSH
34809: LD_VAR 0 5
34813: PPUSH
34814: CALL_OW 1
34818: ST_TO_ADDR
// result := list ;
34819: LD_ADDR_VAR 0 4
34823: PUSH
34824: LD_VAR 0 1
34828: ST_TO_ADDR
// end ;
34829: LD_VAR 0 4
34833: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34834: LD_INT 0
34836: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34837: LD_ADDR_VAR 0 5
34841: PUSH
34842: LD_VAR 0 1
34846: PPUSH
34847: CALL_OW 250
34851: PPUSH
34852: LD_VAR 0 1
34856: PPUSH
34857: CALL_OW 251
34861: PPUSH
34862: LD_VAR 0 2
34866: PPUSH
34867: LD_VAR 0 3
34871: PPUSH
34872: LD_VAR 0 4
34876: PPUSH
34877: CALL 34887 0 5
34881: ST_TO_ADDR
// end ;
34882: LD_VAR 0 5
34886: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34887: LD_INT 0
34889: PPUSH
34890: PPUSH
34891: PPUSH
34892: PPUSH
// if not list then
34893: LD_VAR 0 3
34897: NOT
34898: IFFALSE 34902
// exit ;
34900: GO 35290
// result := [ ] ;
34902: LD_ADDR_VAR 0 6
34906: PUSH
34907: EMPTY
34908: ST_TO_ADDR
// for i in list do
34909: LD_ADDR_VAR 0 7
34913: PUSH
34914: LD_VAR 0 3
34918: PUSH
34919: FOR_IN
34920: IFFALSE 35122
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34922: LD_ADDR_VAR 0 9
34926: PUSH
34927: LD_VAR 0 7
34931: PPUSH
34932: LD_VAR 0 1
34936: PPUSH
34937: LD_VAR 0 2
34941: PPUSH
34942: CALL_OW 297
34946: ST_TO_ADDR
// if not result then
34947: LD_VAR 0 6
34951: NOT
34952: IFFALSE 34978
// result := [ [ i , tmp ] ] else
34954: LD_ADDR_VAR 0 6
34958: PUSH
34959: LD_VAR 0 7
34963: PUSH
34964: LD_VAR 0 9
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: EMPTY
34974: LIST
34975: ST_TO_ADDR
34976: GO 35120
// begin if result [ result ] [ 2 ] < tmp then
34978: LD_VAR 0 6
34982: PUSH
34983: LD_VAR 0 6
34987: ARRAY
34988: PUSH
34989: LD_INT 2
34991: ARRAY
34992: PUSH
34993: LD_VAR 0 9
34997: LESS
34998: IFFALSE 35040
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35000: LD_ADDR_VAR 0 6
35004: PUSH
35005: LD_VAR 0 6
35009: PPUSH
35010: LD_VAR 0 6
35014: PUSH
35015: LD_INT 1
35017: PLUS
35018: PPUSH
35019: LD_VAR 0 7
35023: PUSH
35024: LD_VAR 0 9
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PPUSH
35033: CALL_OW 2
35037: ST_TO_ADDR
35038: GO 35120
// for j = 1 to result do
35040: LD_ADDR_VAR 0 8
35044: PUSH
35045: DOUBLE
35046: LD_INT 1
35048: DEC
35049: ST_TO_ADDR
35050: LD_VAR 0 6
35054: PUSH
35055: FOR_TO
35056: IFFALSE 35118
// begin if tmp < result [ j ] [ 2 ] then
35058: LD_VAR 0 9
35062: PUSH
35063: LD_VAR 0 6
35067: PUSH
35068: LD_VAR 0 8
35072: ARRAY
35073: PUSH
35074: LD_INT 2
35076: ARRAY
35077: LESS
35078: IFFALSE 35116
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35080: LD_ADDR_VAR 0 6
35084: PUSH
35085: LD_VAR 0 6
35089: PPUSH
35090: LD_VAR 0 8
35094: PPUSH
35095: LD_VAR 0 7
35099: PUSH
35100: LD_VAR 0 9
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PPUSH
35109: CALL_OW 2
35113: ST_TO_ADDR
// break ;
35114: GO 35118
// end ; end ;
35116: GO 35055
35118: POP
35119: POP
// end ; end ;
35120: GO 34919
35122: POP
35123: POP
// if result and not asc then
35124: LD_VAR 0 6
35128: PUSH
35129: LD_VAR 0 4
35133: NOT
35134: AND
35135: IFFALSE 35210
// begin tmp := result ;
35137: LD_ADDR_VAR 0 9
35141: PUSH
35142: LD_VAR 0 6
35146: ST_TO_ADDR
// for i = tmp downto 1 do
35147: LD_ADDR_VAR 0 7
35151: PUSH
35152: DOUBLE
35153: LD_VAR 0 9
35157: INC
35158: ST_TO_ADDR
35159: LD_INT 1
35161: PUSH
35162: FOR_DOWNTO
35163: IFFALSE 35208
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35165: LD_ADDR_VAR 0 6
35169: PUSH
35170: LD_VAR 0 6
35174: PPUSH
35175: LD_VAR 0 9
35179: PUSH
35180: LD_VAR 0 7
35184: MINUS
35185: PUSH
35186: LD_INT 1
35188: PLUS
35189: PPUSH
35190: LD_VAR 0 9
35194: PUSH
35195: LD_VAR 0 7
35199: ARRAY
35200: PPUSH
35201: CALL_OW 1
35205: ST_TO_ADDR
35206: GO 35162
35208: POP
35209: POP
// end ; tmp := [ ] ;
35210: LD_ADDR_VAR 0 9
35214: PUSH
35215: EMPTY
35216: ST_TO_ADDR
// if mode then
35217: LD_VAR 0 5
35221: IFFALSE 35290
// begin for i = 1 to result do
35223: LD_ADDR_VAR 0 7
35227: PUSH
35228: DOUBLE
35229: LD_INT 1
35231: DEC
35232: ST_TO_ADDR
35233: LD_VAR 0 6
35237: PUSH
35238: FOR_TO
35239: IFFALSE 35278
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35241: LD_ADDR_VAR 0 9
35245: PUSH
35246: LD_VAR 0 9
35250: PPUSH
35251: LD_VAR 0 7
35255: PPUSH
35256: LD_VAR 0 6
35260: PUSH
35261: LD_VAR 0 7
35265: ARRAY
35266: PUSH
35267: LD_INT 1
35269: ARRAY
35270: PPUSH
35271: CALL_OW 1
35275: ST_TO_ADDR
35276: GO 35238
35278: POP
35279: POP
// result := tmp ;
35280: LD_ADDR_VAR 0 6
35284: PUSH
35285: LD_VAR 0 9
35289: ST_TO_ADDR
// end ; end ;
35290: LD_VAR 0 6
35294: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35295: LD_INT 0
35297: PPUSH
35298: PPUSH
35299: PPUSH
35300: PPUSH
35301: PPUSH
35302: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35303: LD_ADDR_VAR 0 5
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: LD_INT 0
35313: PUSH
35314: LD_INT 0
35316: PUSH
35317: EMPTY
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: ST_TO_ADDR
// if not x or not y then
35325: LD_VAR 0 2
35329: NOT
35330: PUSH
35331: LD_VAR 0 3
35335: NOT
35336: OR
35337: IFFALSE 35341
// exit ;
35339: GO 36991
// if not range then
35341: LD_VAR 0 4
35345: NOT
35346: IFFALSE 35356
// range := 10 ;
35348: LD_ADDR_VAR 0 4
35352: PUSH
35353: LD_INT 10
35355: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35356: LD_ADDR_VAR 0 8
35360: PUSH
35361: LD_INT 81
35363: PUSH
35364: LD_VAR 0 1
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 92
35375: PUSH
35376: LD_VAR 0 2
35380: PUSH
35381: LD_VAR 0 3
35385: PUSH
35386: LD_VAR 0 4
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 3
35399: PUSH
35400: LD_INT 21
35402: PUSH
35403: LD_INT 3
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: LIST
35418: PPUSH
35419: CALL_OW 69
35423: ST_TO_ADDR
// if not tmp then
35424: LD_VAR 0 8
35428: NOT
35429: IFFALSE 35433
// exit ;
35431: GO 36991
// for i in tmp do
35433: LD_ADDR_VAR 0 6
35437: PUSH
35438: LD_VAR 0 8
35442: PUSH
35443: FOR_IN
35444: IFFALSE 36966
// begin points := [ 0 , 0 , 0 ] ;
35446: LD_ADDR_VAR 0 9
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: LD_INT 0
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: LIST
35464: ST_TO_ADDR
// bpoints := 1 ;
35465: LD_ADDR_VAR 0 10
35469: PUSH
35470: LD_INT 1
35472: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35473: LD_VAR 0 6
35477: PPUSH
35478: CALL_OW 247
35482: PUSH
35483: LD_INT 1
35485: DOUBLE
35486: EQUAL
35487: IFTRUE 35491
35489: GO 36069
35491: POP
// begin if GetClass ( i ) = 1 then
35492: LD_VAR 0 6
35496: PPUSH
35497: CALL_OW 257
35501: PUSH
35502: LD_INT 1
35504: EQUAL
35505: IFFALSE 35526
// points := [ 10 , 5 , 3 ] ;
35507: LD_ADDR_VAR 0 9
35511: PUSH
35512: LD_INT 10
35514: PUSH
35515: LD_INT 5
35517: PUSH
35518: LD_INT 3
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: LIST
35525: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35526: LD_VAR 0 6
35530: PPUSH
35531: CALL_OW 257
35535: PUSH
35536: LD_INT 2
35538: PUSH
35539: LD_INT 3
35541: PUSH
35542: LD_INT 4
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: LIST
35549: IN
35550: IFFALSE 35571
// points := [ 3 , 2 , 1 ] ;
35552: LD_ADDR_VAR 0 9
35556: PUSH
35557: LD_INT 3
35559: PUSH
35560: LD_INT 2
35562: PUSH
35563: LD_INT 1
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: LIST
35570: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35571: LD_VAR 0 6
35575: PPUSH
35576: CALL_OW 257
35580: PUSH
35581: LD_INT 5
35583: EQUAL
35584: IFFALSE 35605
// points := [ 130 , 5 , 2 ] ;
35586: LD_ADDR_VAR 0 9
35590: PUSH
35591: LD_INT 130
35593: PUSH
35594: LD_INT 5
35596: PUSH
35597: LD_INT 2
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: LIST
35604: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35605: LD_VAR 0 6
35609: PPUSH
35610: CALL_OW 257
35614: PUSH
35615: LD_INT 8
35617: EQUAL
35618: IFFALSE 35639
// points := [ 35 , 35 , 30 ] ;
35620: LD_ADDR_VAR 0 9
35624: PUSH
35625: LD_INT 35
35627: PUSH
35628: LD_INT 35
35630: PUSH
35631: LD_INT 30
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: LIST
35638: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35639: LD_VAR 0 6
35643: PPUSH
35644: CALL_OW 257
35648: PUSH
35649: LD_INT 9
35651: EQUAL
35652: IFFALSE 35673
// points := [ 20 , 55 , 40 ] ;
35654: LD_ADDR_VAR 0 9
35658: PUSH
35659: LD_INT 20
35661: PUSH
35662: LD_INT 55
35664: PUSH
35665: LD_INT 40
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: LIST
35672: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35673: LD_VAR 0 6
35677: PPUSH
35678: CALL_OW 257
35682: PUSH
35683: LD_INT 12
35685: PUSH
35686: LD_INT 16
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: IN
35693: IFFALSE 35714
// points := [ 5 , 3 , 2 ] ;
35695: LD_ADDR_VAR 0 9
35699: PUSH
35700: LD_INT 5
35702: PUSH
35703: LD_INT 3
35705: PUSH
35706: LD_INT 2
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: LIST
35713: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35714: LD_VAR 0 6
35718: PPUSH
35719: CALL_OW 257
35723: PUSH
35724: LD_INT 17
35726: EQUAL
35727: IFFALSE 35748
// points := [ 100 , 50 , 75 ] ;
35729: LD_ADDR_VAR 0 9
35733: PUSH
35734: LD_INT 100
35736: PUSH
35737: LD_INT 50
35739: PUSH
35740: LD_INT 75
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: LIST
35747: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35748: LD_VAR 0 6
35752: PPUSH
35753: CALL_OW 257
35757: PUSH
35758: LD_INT 15
35760: EQUAL
35761: IFFALSE 35782
// points := [ 10 , 5 , 3 ] ;
35763: LD_ADDR_VAR 0 9
35767: PUSH
35768: LD_INT 10
35770: PUSH
35771: LD_INT 5
35773: PUSH
35774: LD_INT 3
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: LIST
35781: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35782: LD_VAR 0 6
35786: PPUSH
35787: CALL_OW 257
35791: PUSH
35792: LD_INT 14
35794: EQUAL
35795: IFFALSE 35816
// points := [ 10 , 0 , 0 ] ;
35797: LD_ADDR_VAR 0 9
35801: PUSH
35802: LD_INT 10
35804: PUSH
35805: LD_INT 0
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: LIST
35815: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35816: LD_VAR 0 6
35820: PPUSH
35821: CALL_OW 257
35825: PUSH
35826: LD_INT 11
35828: EQUAL
35829: IFFALSE 35850
// points := [ 30 , 10 , 5 ] ;
35831: LD_ADDR_VAR 0 9
35835: PUSH
35836: LD_INT 30
35838: PUSH
35839: LD_INT 10
35841: PUSH
35842: LD_INT 5
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: LIST
35849: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35850: LD_VAR 0 1
35854: PPUSH
35855: LD_INT 5
35857: PPUSH
35858: CALL_OW 321
35862: PUSH
35863: LD_INT 2
35865: EQUAL
35866: IFFALSE 35883
// bpoints := bpoints * 1.8 ;
35868: LD_ADDR_VAR 0 10
35872: PUSH
35873: LD_VAR 0 10
35877: PUSH
35878: LD_REAL  1.80000000000000E+0000
35881: MUL
35882: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35883: LD_VAR 0 6
35887: PPUSH
35888: CALL_OW 257
35892: PUSH
35893: LD_INT 1
35895: PUSH
35896: LD_INT 2
35898: PUSH
35899: LD_INT 3
35901: PUSH
35902: LD_INT 4
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: IN
35911: PUSH
35912: LD_VAR 0 1
35916: PPUSH
35917: LD_INT 51
35919: PPUSH
35920: CALL_OW 321
35924: PUSH
35925: LD_INT 2
35927: EQUAL
35928: AND
35929: IFFALSE 35946
// bpoints := bpoints * 1.2 ;
35931: LD_ADDR_VAR 0 10
35935: PUSH
35936: LD_VAR 0 10
35940: PUSH
35941: LD_REAL  1.20000000000000E+0000
35944: MUL
35945: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35946: LD_VAR 0 6
35950: PPUSH
35951: CALL_OW 257
35955: PUSH
35956: LD_INT 5
35958: PUSH
35959: LD_INT 7
35961: PUSH
35962: LD_INT 9
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: LIST
35969: IN
35970: PUSH
35971: LD_VAR 0 1
35975: PPUSH
35976: LD_INT 52
35978: PPUSH
35979: CALL_OW 321
35983: PUSH
35984: LD_INT 2
35986: EQUAL
35987: AND
35988: IFFALSE 36005
// bpoints := bpoints * 1.5 ;
35990: LD_ADDR_VAR 0 10
35994: PUSH
35995: LD_VAR 0 10
35999: PUSH
36000: LD_REAL  1.50000000000000E+0000
36003: MUL
36004: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36005: LD_VAR 0 1
36009: PPUSH
36010: LD_INT 66
36012: PPUSH
36013: CALL_OW 321
36017: PUSH
36018: LD_INT 2
36020: EQUAL
36021: IFFALSE 36038
// bpoints := bpoints * 1.1 ;
36023: LD_ADDR_VAR 0 10
36027: PUSH
36028: LD_VAR 0 10
36032: PUSH
36033: LD_REAL  1.10000000000000E+0000
36036: MUL
36037: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36038: LD_ADDR_VAR 0 10
36042: PUSH
36043: LD_VAR 0 10
36047: PUSH
36048: LD_VAR 0 6
36052: PPUSH
36053: LD_INT 1
36055: PPUSH
36056: CALL_OW 259
36060: PUSH
36061: LD_REAL  1.15000000000000E+0000
36064: MUL
36065: MUL
36066: ST_TO_ADDR
// end ; unit_vehicle :
36067: GO 36895
36069: LD_INT 2
36071: DOUBLE
36072: EQUAL
36073: IFTRUE 36077
36075: GO 36883
36077: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36078: LD_VAR 0 6
36082: PPUSH
36083: CALL_OW 264
36087: PUSH
36088: LD_INT 2
36090: PUSH
36091: LD_INT 42
36093: PUSH
36094: LD_INT 24
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: IN
36102: IFFALSE 36123
// points := [ 25 , 5 , 3 ] ;
36104: LD_ADDR_VAR 0 9
36108: PUSH
36109: LD_INT 25
36111: PUSH
36112: LD_INT 5
36114: PUSH
36115: LD_INT 3
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: LIST
36122: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36123: LD_VAR 0 6
36127: PPUSH
36128: CALL_OW 264
36132: PUSH
36133: LD_INT 4
36135: PUSH
36136: LD_INT 43
36138: PUSH
36139: LD_INT 25
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: LIST
36146: IN
36147: IFFALSE 36168
// points := [ 40 , 15 , 5 ] ;
36149: LD_ADDR_VAR 0 9
36153: PUSH
36154: LD_INT 40
36156: PUSH
36157: LD_INT 15
36159: PUSH
36160: LD_INT 5
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: LIST
36167: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36168: LD_VAR 0 6
36172: PPUSH
36173: CALL_OW 264
36177: PUSH
36178: LD_INT 3
36180: PUSH
36181: LD_INT 23
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: IN
36188: IFFALSE 36209
// points := [ 7 , 25 , 8 ] ;
36190: LD_ADDR_VAR 0 9
36194: PUSH
36195: LD_INT 7
36197: PUSH
36198: LD_INT 25
36200: PUSH
36201: LD_INT 8
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: LIST
36208: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36209: LD_VAR 0 6
36213: PPUSH
36214: CALL_OW 264
36218: PUSH
36219: LD_INT 5
36221: PUSH
36222: LD_INT 27
36224: PUSH
36225: LD_INT 44
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: LIST
36232: IN
36233: IFFALSE 36254
// points := [ 14 , 50 , 16 ] ;
36235: LD_ADDR_VAR 0 9
36239: PUSH
36240: LD_INT 14
36242: PUSH
36243: LD_INT 50
36245: PUSH
36246: LD_INT 16
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: LIST
36253: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36254: LD_VAR 0 6
36258: PPUSH
36259: CALL_OW 264
36263: PUSH
36264: LD_INT 6
36266: PUSH
36267: LD_INT 46
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: IN
36274: IFFALSE 36295
// points := [ 32 , 120 , 70 ] ;
36276: LD_ADDR_VAR 0 9
36280: PUSH
36281: LD_INT 32
36283: PUSH
36284: LD_INT 120
36286: PUSH
36287: LD_INT 70
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: LIST
36294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36295: LD_VAR 0 6
36299: PPUSH
36300: CALL_OW 264
36304: PUSH
36305: LD_INT 7
36307: PUSH
36308: LD_INT 28
36310: PUSH
36311: LD_INT 45
36313: PUSH
36314: LD_INT 92
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: IN
36323: IFFALSE 36344
// points := [ 35 , 20 , 45 ] ;
36325: LD_ADDR_VAR 0 9
36329: PUSH
36330: LD_INT 35
36332: PUSH
36333: LD_INT 20
36335: PUSH
36336: LD_INT 45
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: LIST
36343: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36344: LD_VAR 0 6
36348: PPUSH
36349: CALL_OW 264
36353: PUSH
36354: LD_INT 47
36356: PUSH
36357: EMPTY
36358: LIST
36359: IN
36360: IFFALSE 36381
// points := [ 67 , 45 , 75 ] ;
36362: LD_ADDR_VAR 0 9
36366: PUSH
36367: LD_INT 67
36369: PUSH
36370: LD_INT 45
36372: PUSH
36373: LD_INT 75
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: LIST
36380: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36381: LD_VAR 0 6
36385: PPUSH
36386: CALL_OW 264
36390: PUSH
36391: LD_INT 26
36393: PUSH
36394: EMPTY
36395: LIST
36396: IN
36397: IFFALSE 36418
// points := [ 120 , 30 , 80 ] ;
36399: LD_ADDR_VAR 0 9
36403: PUSH
36404: LD_INT 120
36406: PUSH
36407: LD_INT 30
36409: PUSH
36410: LD_INT 80
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36418: LD_VAR 0 6
36422: PPUSH
36423: CALL_OW 264
36427: PUSH
36428: LD_INT 22
36430: PUSH
36431: EMPTY
36432: LIST
36433: IN
36434: IFFALSE 36455
// points := [ 40 , 1 , 1 ] ;
36436: LD_ADDR_VAR 0 9
36440: PUSH
36441: LD_INT 40
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: LD_INT 1
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: LIST
36454: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36455: LD_VAR 0 6
36459: PPUSH
36460: CALL_OW 264
36464: PUSH
36465: LD_INT 29
36467: PUSH
36468: EMPTY
36469: LIST
36470: IN
36471: IFFALSE 36492
// points := [ 70 , 200 , 400 ] ;
36473: LD_ADDR_VAR 0 9
36477: PUSH
36478: LD_INT 70
36480: PUSH
36481: LD_INT 200
36483: PUSH
36484: LD_INT 400
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: LIST
36491: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36492: LD_VAR 0 6
36496: PPUSH
36497: CALL_OW 264
36501: PUSH
36502: LD_INT 14
36504: PUSH
36505: LD_INT 53
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: IN
36512: IFFALSE 36533
// points := [ 40 , 10 , 20 ] ;
36514: LD_ADDR_VAR 0 9
36518: PUSH
36519: LD_INT 40
36521: PUSH
36522: LD_INT 10
36524: PUSH
36525: LD_INT 20
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: LIST
36532: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36533: LD_VAR 0 6
36537: PPUSH
36538: CALL_OW 264
36542: PUSH
36543: LD_INT 9
36545: PUSH
36546: EMPTY
36547: LIST
36548: IN
36549: IFFALSE 36570
// points := [ 5 , 70 , 20 ] ;
36551: LD_ADDR_VAR 0 9
36555: PUSH
36556: LD_INT 5
36558: PUSH
36559: LD_INT 70
36561: PUSH
36562: LD_INT 20
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: LIST
36569: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36570: LD_VAR 0 6
36574: PPUSH
36575: CALL_OW 264
36579: PUSH
36580: LD_INT 10
36582: PUSH
36583: EMPTY
36584: LIST
36585: IN
36586: IFFALSE 36607
// points := [ 35 , 110 , 70 ] ;
36588: LD_ADDR_VAR 0 9
36592: PUSH
36593: LD_INT 35
36595: PUSH
36596: LD_INT 110
36598: PUSH
36599: LD_INT 70
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: LIST
36606: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36607: LD_VAR 0 6
36611: PPUSH
36612: CALL_OW 265
36616: PUSH
36617: LD_INT 25
36619: EQUAL
36620: IFFALSE 36641
// points := [ 80 , 65 , 100 ] ;
36622: LD_ADDR_VAR 0 9
36626: PUSH
36627: LD_INT 80
36629: PUSH
36630: LD_INT 65
36632: PUSH
36633: LD_INT 100
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: LIST
36640: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36641: LD_VAR 0 6
36645: PPUSH
36646: CALL_OW 263
36650: PUSH
36651: LD_INT 1
36653: EQUAL
36654: IFFALSE 36689
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36656: LD_ADDR_VAR 0 10
36660: PUSH
36661: LD_VAR 0 10
36665: PUSH
36666: LD_VAR 0 6
36670: PPUSH
36671: CALL_OW 311
36675: PPUSH
36676: LD_INT 3
36678: PPUSH
36679: CALL_OW 259
36683: PUSH
36684: LD_INT 4
36686: MUL
36687: MUL
36688: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36689: LD_VAR 0 6
36693: PPUSH
36694: CALL_OW 263
36698: PUSH
36699: LD_INT 2
36701: EQUAL
36702: IFFALSE 36753
// begin j := IsControledBy ( i ) ;
36704: LD_ADDR_VAR 0 7
36708: PUSH
36709: LD_VAR 0 6
36713: PPUSH
36714: CALL_OW 312
36718: ST_TO_ADDR
// if j then
36719: LD_VAR 0 7
36723: IFFALSE 36753
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36725: LD_ADDR_VAR 0 10
36729: PUSH
36730: LD_VAR 0 10
36734: PUSH
36735: LD_VAR 0 7
36739: PPUSH
36740: LD_INT 3
36742: PPUSH
36743: CALL_OW 259
36747: PUSH
36748: LD_INT 3
36750: MUL
36751: MUL
36752: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36753: LD_VAR 0 6
36757: PPUSH
36758: CALL_OW 264
36762: PUSH
36763: LD_INT 5
36765: PUSH
36766: LD_INT 6
36768: PUSH
36769: LD_INT 46
36771: PUSH
36772: LD_INT 44
36774: PUSH
36775: LD_INT 47
36777: PUSH
36778: LD_INT 45
36780: PUSH
36781: LD_INT 28
36783: PUSH
36784: LD_INT 7
36786: PUSH
36787: LD_INT 27
36789: PUSH
36790: LD_INT 29
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: IN
36805: PUSH
36806: LD_VAR 0 1
36810: PPUSH
36811: LD_INT 52
36813: PPUSH
36814: CALL_OW 321
36818: PUSH
36819: LD_INT 2
36821: EQUAL
36822: AND
36823: IFFALSE 36840
// bpoints := bpoints * 1.2 ;
36825: LD_ADDR_VAR 0 10
36829: PUSH
36830: LD_VAR 0 10
36834: PUSH
36835: LD_REAL  1.20000000000000E+0000
36838: MUL
36839: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36840: LD_VAR 0 6
36844: PPUSH
36845: CALL_OW 264
36849: PUSH
36850: LD_INT 6
36852: PUSH
36853: LD_INT 46
36855: PUSH
36856: LD_INT 47
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: LIST
36863: IN
36864: IFFALSE 36881
// bpoints := bpoints * 1.2 ;
36866: LD_ADDR_VAR 0 10
36870: PUSH
36871: LD_VAR 0 10
36875: PUSH
36876: LD_REAL  1.20000000000000E+0000
36879: MUL
36880: ST_TO_ADDR
// end ; unit_building :
36881: GO 36895
36883: LD_INT 3
36885: DOUBLE
36886: EQUAL
36887: IFTRUE 36891
36889: GO 36894
36891: POP
// ; end ;
36892: GO 36895
36894: POP
// for j = 1 to 3 do
36895: LD_ADDR_VAR 0 7
36899: PUSH
36900: DOUBLE
36901: LD_INT 1
36903: DEC
36904: ST_TO_ADDR
36905: LD_INT 3
36907: PUSH
36908: FOR_TO
36909: IFFALSE 36962
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36911: LD_ADDR_VAR 0 5
36915: PUSH
36916: LD_VAR 0 5
36920: PPUSH
36921: LD_VAR 0 7
36925: PPUSH
36926: LD_VAR 0 5
36930: PUSH
36931: LD_VAR 0 7
36935: ARRAY
36936: PUSH
36937: LD_VAR 0 9
36941: PUSH
36942: LD_VAR 0 7
36946: ARRAY
36947: PUSH
36948: LD_VAR 0 10
36952: MUL
36953: PLUS
36954: PPUSH
36955: CALL_OW 1
36959: ST_TO_ADDR
36960: GO 36908
36962: POP
36963: POP
// end ;
36964: GO 35443
36966: POP
36967: POP
// result := Replace ( result , 4 , tmp ) ;
36968: LD_ADDR_VAR 0 5
36972: PUSH
36973: LD_VAR 0 5
36977: PPUSH
36978: LD_INT 4
36980: PPUSH
36981: LD_VAR 0 8
36985: PPUSH
36986: CALL_OW 1
36990: ST_TO_ADDR
// end ;
36991: LD_VAR 0 5
36995: RET
// export function DangerAtRange ( unit , range ) ; begin
36996: LD_INT 0
36998: PPUSH
// if not unit then
36999: LD_VAR 0 1
37003: NOT
37004: IFFALSE 37008
// exit ;
37006: GO 37053
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37008: LD_ADDR_VAR 0 3
37012: PUSH
37013: LD_VAR 0 1
37017: PPUSH
37018: CALL_OW 255
37022: PPUSH
37023: LD_VAR 0 1
37027: PPUSH
37028: CALL_OW 250
37032: PPUSH
37033: LD_VAR 0 1
37037: PPUSH
37038: CALL_OW 251
37042: PPUSH
37043: LD_VAR 0 2
37047: PPUSH
37048: CALL 35295 0 4
37052: ST_TO_ADDR
// end ;
37053: LD_VAR 0 3
37057: RET
// export function DangerInArea ( side , area ) ; begin
37058: LD_INT 0
37060: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37061: LD_ADDR_VAR 0 3
37065: PUSH
37066: LD_VAR 0 2
37070: PPUSH
37071: LD_INT 81
37073: PUSH
37074: LD_VAR 0 1
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PPUSH
37083: CALL_OW 70
37087: ST_TO_ADDR
// end ;
37088: LD_VAR 0 3
37092: RET
// export function IsExtension ( b ) ; begin
37093: LD_INT 0
37095: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37096: LD_ADDR_VAR 0 2
37100: PUSH
37101: LD_VAR 0 1
37105: PUSH
37106: LD_INT 23
37108: PUSH
37109: LD_INT 20
37111: PUSH
37112: LD_INT 22
37114: PUSH
37115: LD_INT 17
37117: PUSH
37118: LD_INT 24
37120: PUSH
37121: LD_INT 21
37123: PUSH
37124: LD_INT 19
37126: PUSH
37127: LD_INT 16
37129: PUSH
37130: LD_INT 25
37132: PUSH
37133: LD_INT 18
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: IN
37148: ST_TO_ADDR
// end ;
37149: LD_VAR 0 2
37153: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37154: LD_INT 0
37156: PPUSH
37157: PPUSH
37158: PPUSH
// result := [ ] ;
37159: LD_ADDR_VAR 0 4
37163: PUSH
37164: EMPTY
37165: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37166: LD_ADDR_VAR 0 5
37170: PUSH
37171: LD_VAR 0 2
37175: PPUSH
37176: LD_INT 21
37178: PUSH
37179: LD_INT 3
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PPUSH
37186: CALL_OW 70
37190: ST_TO_ADDR
// if not tmp then
37191: LD_VAR 0 5
37195: NOT
37196: IFFALSE 37200
// exit ;
37198: GO 37264
// if checkLink then
37200: LD_VAR 0 3
37204: IFFALSE 37254
// begin for i in tmp do
37206: LD_ADDR_VAR 0 6
37210: PUSH
37211: LD_VAR 0 5
37215: PUSH
37216: FOR_IN
37217: IFFALSE 37252
// if GetBase ( i ) <> base then
37219: LD_VAR 0 6
37223: PPUSH
37224: CALL_OW 274
37228: PUSH
37229: LD_VAR 0 1
37233: NONEQUAL
37234: IFFALSE 37250
// ComLinkToBase ( base , i ) ;
37236: LD_VAR 0 1
37240: PPUSH
37241: LD_VAR 0 6
37245: PPUSH
37246: CALL_OW 169
37250: GO 37216
37252: POP
37253: POP
// end ; result := tmp ;
37254: LD_ADDR_VAR 0 4
37258: PUSH
37259: LD_VAR 0 5
37263: ST_TO_ADDR
// end ;
37264: LD_VAR 0 4
37268: RET
// export function ComComplete ( units , b ) ; var i ; begin
37269: LD_INT 0
37271: PPUSH
37272: PPUSH
// if not units then
37273: LD_VAR 0 1
37277: NOT
37278: IFFALSE 37282
// exit ;
37280: GO 37372
// for i in units do
37282: LD_ADDR_VAR 0 4
37286: PUSH
37287: LD_VAR 0 1
37291: PUSH
37292: FOR_IN
37293: IFFALSE 37370
// if BuildingStatus ( b ) = bs_build then
37295: LD_VAR 0 2
37299: PPUSH
37300: CALL_OW 461
37304: PUSH
37305: LD_INT 1
37307: EQUAL
37308: IFFALSE 37368
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37310: LD_VAR 0 4
37314: PPUSH
37315: LD_STRING h
37317: PUSH
37318: LD_VAR 0 2
37322: PPUSH
37323: CALL_OW 250
37327: PUSH
37328: LD_VAR 0 2
37332: PPUSH
37333: CALL_OW 251
37337: PUSH
37338: LD_VAR 0 2
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: PUSH
37361: EMPTY
37362: LIST
37363: PPUSH
37364: CALL_OW 446
37368: GO 37292
37370: POP
37371: POP
// end ;
37372: LD_VAR 0 3
37376: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37377: LD_INT 0
37379: PPUSH
37380: PPUSH
37381: PPUSH
37382: PPUSH
37383: PPUSH
37384: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37385: LD_VAR 0 1
37389: NOT
37390: PUSH
37391: LD_VAR 0 1
37395: PPUSH
37396: CALL_OW 263
37400: PUSH
37401: LD_INT 2
37403: NONEQUAL
37404: OR
37405: IFFALSE 37409
// exit ;
37407: GO 37725
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37409: LD_ADDR_VAR 0 6
37413: PUSH
37414: LD_INT 22
37416: PUSH
37417: LD_VAR 0 1
37421: PPUSH
37422: CALL_OW 255
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 2
37433: PUSH
37434: LD_INT 30
37436: PUSH
37437: LD_INT 36
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 34
37446: PUSH
37447: LD_INT 31
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: LIST
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PPUSH
37463: CALL_OW 69
37467: ST_TO_ADDR
// if not tmp then
37468: LD_VAR 0 6
37472: NOT
37473: IFFALSE 37477
// exit ;
37475: GO 37725
// result := [ ] ;
37477: LD_ADDR_VAR 0 2
37481: PUSH
37482: EMPTY
37483: ST_TO_ADDR
// for i in tmp do
37484: LD_ADDR_VAR 0 3
37488: PUSH
37489: LD_VAR 0 6
37493: PUSH
37494: FOR_IN
37495: IFFALSE 37566
// begin t := UnitsInside ( i ) ;
37497: LD_ADDR_VAR 0 4
37501: PUSH
37502: LD_VAR 0 3
37506: PPUSH
37507: CALL_OW 313
37511: ST_TO_ADDR
// if t then
37512: LD_VAR 0 4
37516: IFFALSE 37564
// for j in t do
37518: LD_ADDR_VAR 0 7
37522: PUSH
37523: LD_VAR 0 4
37527: PUSH
37528: FOR_IN
37529: IFFALSE 37562
// result := Replace ( result , result + 1 , j ) ;
37531: LD_ADDR_VAR 0 2
37535: PUSH
37536: LD_VAR 0 2
37540: PPUSH
37541: LD_VAR 0 2
37545: PUSH
37546: LD_INT 1
37548: PLUS
37549: PPUSH
37550: LD_VAR 0 7
37554: PPUSH
37555: CALL_OW 1
37559: ST_TO_ADDR
37560: GO 37528
37562: POP
37563: POP
// end ;
37564: GO 37494
37566: POP
37567: POP
// if not result then
37568: LD_VAR 0 2
37572: NOT
37573: IFFALSE 37577
// exit ;
37575: GO 37725
// mech := result [ 1 ] ;
37577: LD_ADDR_VAR 0 5
37581: PUSH
37582: LD_VAR 0 2
37586: PUSH
37587: LD_INT 1
37589: ARRAY
37590: ST_TO_ADDR
// if result > 1 then
37591: LD_VAR 0 2
37595: PUSH
37596: LD_INT 1
37598: GREATER
37599: IFFALSE 37711
// begin for i = 2 to result do
37601: LD_ADDR_VAR 0 3
37605: PUSH
37606: DOUBLE
37607: LD_INT 2
37609: DEC
37610: ST_TO_ADDR
37611: LD_VAR 0 2
37615: PUSH
37616: FOR_TO
37617: IFFALSE 37709
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37619: LD_ADDR_VAR 0 4
37623: PUSH
37624: LD_VAR 0 2
37628: PUSH
37629: LD_VAR 0 3
37633: ARRAY
37634: PPUSH
37635: LD_INT 3
37637: PPUSH
37638: CALL_OW 259
37642: PUSH
37643: LD_VAR 0 2
37647: PUSH
37648: LD_VAR 0 3
37652: ARRAY
37653: PPUSH
37654: CALL_OW 432
37658: MINUS
37659: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37660: LD_VAR 0 4
37664: PUSH
37665: LD_VAR 0 5
37669: PPUSH
37670: LD_INT 3
37672: PPUSH
37673: CALL_OW 259
37677: PUSH
37678: LD_VAR 0 5
37682: PPUSH
37683: CALL_OW 432
37687: MINUS
37688: GREATEREQUAL
37689: IFFALSE 37707
// mech := result [ i ] ;
37691: LD_ADDR_VAR 0 5
37695: PUSH
37696: LD_VAR 0 2
37700: PUSH
37701: LD_VAR 0 3
37705: ARRAY
37706: ST_TO_ADDR
// end ;
37707: GO 37616
37709: POP
37710: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37711: LD_VAR 0 1
37715: PPUSH
37716: LD_VAR 0 5
37720: PPUSH
37721: CALL_OW 135
// end ;
37725: LD_VAR 0 2
37729: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37730: LD_INT 0
37732: PPUSH
37733: PPUSH
37734: PPUSH
37735: PPUSH
37736: PPUSH
37737: PPUSH
37738: PPUSH
37739: PPUSH
37740: PPUSH
37741: PPUSH
37742: PPUSH
37743: PPUSH
37744: PPUSH
// result := [ ] ;
37745: LD_ADDR_VAR 0 7
37749: PUSH
37750: EMPTY
37751: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37752: LD_VAR 0 1
37756: PPUSH
37757: CALL_OW 266
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: IN
37772: NOT
37773: IFFALSE 37777
// exit ;
37775: GO 39411
// if name then
37777: LD_VAR 0 3
37781: IFFALSE 37797
// SetBName ( base_dep , name ) ;
37783: LD_VAR 0 1
37787: PPUSH
37788: LD_VAR 0 3
37792: PPUSH
37793: CALL_OW 500
// base := GetBase ( base_dep ) ;
37797: LD_ADDR_VAR 0 15
37801: PUSH
37802: LD_VAR 0 1
37806: PPUSH
37807: CALL_OW 274
37811: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37812: LD_ADDR_VAR 0 16
37816: PUSH
37817: LD_VAR 0 1
37821: PPUSH
37822: CALL_OW 255
37826: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37827: LD_ADDR_VAR 0 17
37831: PUSH
37832: LD_VAR 0 1
37836: PPUSH
37837: CALL_OW 248
37841: ST_TO_ADDR
// if sources then
37842: LD_VAR 0 5
37846: IFFALSE 37893
// for i = 1 to 3 do
37848: LD_ADDR_VAR 0 8
37852: PUSH
37853: DOUBLE
37854: LD_INT 1
37856: DEC
37857: ST_TO_ADDR
37858: LD_INT 3
37860: PUSH
37861: FOR_TO
37862: IFFALSE 37891
// AddResourceType ( base , i , sources [ i ] ) ;
37864: LD_VAR 0 15
37868: PPUSH
37869: LD_VAR 0 8
37873: PPUSH
37874: LD_VAR 0 5
37878: PUSH
37879: LD_VAR 0 8
37883: ARRAY
37884: PPUSH
37885: CALL_OW 276
37889: GO 37861
37891: POP
37892: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37893: LD_ADDR_VAR 0 18
37897: PUSH
37898: LD_VAR 0 15
37902: PPUSH
37903: LD_VAR 0 2
37907: PPUSH
37908: LD_INT 1
37910: PPUSH
37911: CALL 37154 0 3
37915: ST_TO_ADDR
// InitHc ;
37916: CALL_OW 19
// InitUc ;
37920: CALL_OW 18
// uc_side := side ;
37924: LD_ADDR_OWVAR 20
37928: PUSH
37929: LD_VAR 0 16
37933: ST_TO_ADDR
// uc_nation := nation ;
37934: LD_ADDR_OWVAR 21
37938: PUSH
37939: LD_VAR 0 17
37943: ST_TO_ADDR
// if buildings then
37944: LD_VAR 0 18
37948: IFFALSE 39270
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37950: LD_ADDR_VAR 0 19
37954: PUSH
37955: LD_VAR 0 18
37959: PPUSH
37960: LD_INT 2
37962: PUSH
37963: LD_INT 30
37965: PUSH
37966: LD_INT 29
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 30
37975: PUSH
37976: LD_INT 30
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: LIST
37987: PPUSH
37988: CALL_OW 72
37992: ST_TO_ADDR
// if tmp then
37993: LD_VAR 0 19
37997: IFFALSE 38045
// for i in tmp do
37999: LD_ADDR_VAR 0 8
38003: PUSH
38004: LD_VAR 0 19
38008: PUSH
38009: FOR_IN
38010: IFFALSE 38043
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38012: LD_VAR 0 8
38016: PPUSH
38017: CALL_OW 250
38021: PPUSH
38022: LD_VAR 0 8
38026: PPUSH
38027: CALL_OW 251
38031: PPUSH
38032: LD_VAR 0 16
38036: PPUSH
38037: CALL_OW 441
38041: GO 38009
38043: POP
38044: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38045: LD_VAR 0 18
38049: PPUSH
38050: LD_INT 2
38052: PUSH
38053: LD_INT 30
38055: PUSH
38056: LD_INT 32
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 30
38065: PUSH
38066: LD_INT 33
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: LIST
38077: PPUSH
38078: CALL_OW 72
38082: IFFALSE 38170
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38084: LD_ADDR_VAR 0 8
38088: PUSH
38089: LD_VAR 0 18
38093: PPUSH
38094: LD_INT 2
38096: PUSH
38097: LD_INT 30
38099: PUSH
38100: LD_INT 32
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 30
38109: PUSH
38110: LD_INT 33
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: LIST
38121: PPUSH
38122: CALL_OW 72
38126: PUSH
38127: FOR_IN
38128: IFFALSE 38168
// begin if not GetBWeapon ( i ) then
38130: LD_VAR 0 8
38134: PPUSH
38135: CALL_OW 269
38139: NOT
38140: IFFALSE 38166
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38142: LD_VAR 0 8
38146: PPUSH
38147: LD_VAR 0 8
38151: PPUSH
38152: LD_VAR 0 2
38156: PPUSH
38157: CALL 39416 0 2
38161: PPUSH
38162: CALL_OW 431
// end ;
38166: GO 38127
38168: POP
38169: POP
// end ; for i = 1 to personel do
38170: LD_ADDR_VAR 0 8
38174: PUSH
38175: DOUBLE
38176: LD_INT 1
38178: DEC
38179: ST_TO_ADDR
38180: LD_VAR 0 6
38184: PUSH
38185: FOR_TO
38186: IFFALSE 39250
// begin if i > 4 then
38188: LD_VAR 0 8
38192: PUSH
38193: LD_INT 4
38195: GREATER
38196: IFFALSE 38200
// break ;
38198: GO 39250
// case i of 1 :
38200: LD_VAR 0 8
38204: PUSH
38205: LD_INT 1
38207: DOUBLE
38208: EQUAL
38209: IFTRUE 38213
38211: GO 38293
38213: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38214: LD_ADDR_VAR 0 12
38218: PUSH
38219: LD_VAR 0 18
38223: PPUSH
38224: LD_INT 22
38226: PUSH
38227: LD_VAR 0 16
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 58
38238: PUSH
38239: EMPTY
38240: LIST
38241: PUSH
38242: LD_INT 2
38244: PUSH
38245: LD_INT 30
38247: PUSH
38248: LD_INT 32
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 30
38257: PUSH
38258: LD_INT 4
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 30
38267: PUSH
38268: LD_INT 5
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: LIST
38285: PPUSH
38286: CALL_OW 72
38290: ST_TO_ADDR
38291: GO 38515
38293: LD_INT 2
38295: DOUBLE
38296: EQUAL
38297: IFTRUE 38301
38299: GO 38363
38301: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38302: LD_ADDR_VAR 0 12
38306: PUSH
38307: LD_VAR 0 18
38311: PPUSH
38312: LD_INT 22
38314: PUSH
38315: LD_VAR 0 16
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: PUSH
38327: LD_INT 30
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 30
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: LIST
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PPUSH
38356: CALL_OW 72
38360: ST_TO_ADDR
38361: GO 38515
38363: LD_INT 3
38365: DOUBLE
38366: EQUAL
38367: IFTRUE 38371
38369: GO 38433
38371: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38372: LD_ADDR_VAR 0 12
38376: PUSH
38377: LD_VAR 0 18
38381: PPUSH
38382: LD_INT 22
38384: PUSH
38385: LD_VAR 0 16
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 2
38396: PUSH
38397: LD_INT 30
38399: PUSH
38400: LD_INT 2
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 30
38409: PUSH
38410: LD_INT 3
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: LIST
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PPUSH
38426: CALL_OW 72
38430: ST_TO_ADDR
38431: GO 38515
38433: LD_INT 4
38435: DOUBLE
38436: EQUAL
38437: IFTRUE 38441
38439: GO 38514
38441: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38442: LD_ADDR_VAR 0 12
38446: PUSH
38447: LD_VAR 0 18
38451: PPUSH
38452: LD_INT 22
38454: PUSH
38455: LD_VAR 0 16
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 2
38466: PUSH
38467: LD_INT 30
38469: PUSH
38470: LD_INT 6
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 30
38479: PUSH
38480: LD_INT 7
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 30
38489: PUSH
38490: LD_INT 8
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PPUSH
38507: CALL_OW 72
38511: ST_TO_ADDR
38512: GO 38515
38514: POP
// if i = 1 then
38515: LD_VAR 0 8
38519: PUSH
38520: LD_INT 1
38522: EQUAL
38523: IFFALSE 38634
// begin tmp := [ ] ;
38525: LD_ADDR_VAR 0 19
38529: PUSH
38530: EMPTY
38531: ST_TO_ADDR
// for j in f do
38532: LD_ADDR_VAR 0 9
38536: PUSH
38537: LD_VAR 0 12
38541: PUSH
38542: FOR_IN
38543: IFFALSE 38616
// if GetBType ( j ) = b_bunker then
38545: LD_VAR 0 9
38549: PPUSH
38550: CALL_OW 266
38554: PUSH
38555: LD_INT 32
38557: EQUAL
38558: IFFALSE 38585
// tmp := Insert ( tmp , 1 , j ) else
38560: LD_ADDR_VAR 0 19
38564: PUSH
38565: LD_VAR 0 19
38569: PPUSH
38570: LD_INT 1
38572: PPUSH
38573: LD_VAR 0 9
38577: PPUSH
38578: CALL_OW 2
38582: ST_TO_ADDR
38583: GO 38614
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38585: LD_ADDR_VAR 0 19
38589: PUSH
38590: LD_VAR 0 19
38594: PPUSH
38595: LD_VAR 0 19
38599: PUSH
38600: LD_INT 1
38602: PLUS
38603: PPUSH
38604: LD_VAR 0 9
38608: PPUSH
38609: CALL_OW 2
38613: ST_TO_ADDR
38614: GO 38542
38616: POP
38617: POP
// if tmp then
38618: LD_VAR 0 19
38622: IFFALSE 38634
// f := tmp ;
38624: LD_ADDR_VAR 0 12
38628: PUSH
38629: LD_VAR 0 19
38633: ST_TO_ADDR
// end ; x := personel [ i ] ;
38634: LD_ADDR_VAR 0 13
38638: PUSH
38639: LD_VAR 0 6
38643: PUSH
38644: LD_VAR 0 8
38648: ARRAY
38649: ST_TO_ADDR
// if x = - 1 then
38650: LD_VAR 0 13
38654: PUSH
38655: LD_INT 1
38657: NEG
38658: EQUAL
38659: IFFALSE 38868
// begin for j in f do
38661: LD_ADDR_VAR 0 9
38665: PUSH
38666: LD_VAR 0 12
38670: PUSH
38671: FOR_IN
38672: IFFALSE 38864
// repeat InitHc ;
38674: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38678: LD_VAR 0 9
38682: PPUSH
38683: CALL_OW 266
38687: PUSH
38688: LD_INT 5
38690: EQUAL
38691: IFFALSE 38761
// begin if UnitsInside ( j ) < 3 then
38693: LD_VAR 0 9
38697: PPUSH
38698: CALL_OW 313
38702: PUSH
38703: LD_INT 3
38705: LESS
38706: IFFALSE 38742
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38708: LD_INT 0
38710: PPUSH
38711: LD_INT 5
38713: PUSH
38714: LD_INT 8
38716: PUSH
38717: LD_INT 9
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: LIST
38724: PUSH
38725: LD_VAR 0 17
38729: ARRAY
38730: PPUSH
38731: LD_VAR 0 4
38735: PPUSH
38736: CALL_OW 380
38740: GO 38759
// PrepareHuman ( false , i , skill ) ;
38742: LD_INT 0
38744: PPUSH
38745: LD_VAR 0 8
38749: PPUSH
38750: LD_VAR 0 4
38754: PPUSH
38755: CALL_OW 380
// end else
38759: GO 38778
// PrepareHuman ( false , i , skill ) ;
38761: LD_INT 0
38763: PPUSH
38764: LD_VAR 0 8
38768: PPUSH
38769: LD_VAR 0 4
38773: PPUSH
38774: CALL_OW 380
// un := CreateHuman ;
38778: LD_ADDR_VAR 0 14
38782: PUSH
38783: CALL_OW 44
38787: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38788: LD_ADDR_VAR 0 7
38792: PUSH
38793: LD_VAR 0 7
38797: PPUSH
38798: LD_INT 1
38800: PPUSH
38801: LD_VAR 0 14
38805: PPUSH
38806: CALL_OW 2
38810: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38811: LD_VAR 0 14
38815: PPUSH
38816: LD_VAR 0 9
38820: PPUSH
38821: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38825: LD_VAR 0 9
38829: PPUSH
38830: CALL_OW 313
38834: PUSH
38835: LD_INT 6
38837: EQUAL
38838: PUSH
38839: LD_VAR 0 9
38843: PPUSH
38844: CALL_OW 266
38848: PUSH
38849: LD_INT 32
38851: PUSH
38852: LD_INT 31
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: IN
38859: OR
38860: IFFALSE 38674
38862: GO 38671
38864: POP
38865: POP
// end else
38866: GO 39248
// for j = 1 to x do
38868: LD_ADDR_VAR 0 9
38872: PUSH
38873: DOUBLE
38874: LD_INT 1
38876: DEC
38877: ST_TO_ADDR
38878: LD_VAR 0 13
38882: PUSH
38883: FOR_TO
38884: IFFALSE 39246
// begin InitHc ;
38886: CALL_OW 19
// if not f then
38890: LD_VAR 0 12
38894: NOT
38895: IFFALSE 38984
// begin PrepareHuman ( false , i , skill ) ;
38897: LD_INT 0
38899: PPUSH
38900: LD_VAR 0 8
38904: PPUSH
38905: LD_VAR 0 4
38909: PPUSH
38910: CALL_OW 380
// un := CreateHuman ;
38914: LD_ADDR_VAR 0 14
38918: PUSH
38919: CALL_OW 44
38923: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38924: LD_ADDR_VAR 0 7
38928: PUSH
38929: LD_VAR 0 7
38933: PPUSH
38934: LD_INT 1
38936: PPUSH
38937: LD_VAR 0 14
38941: PPUSH
38942: CALL_OW 2
38946: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38947: LD_VAR 0 14
38951: PPUSH
38952: LD_VAR 0 1
38956: PPUSH
38957: CALL_OW 250
38961: PPUSH
38962: LD_VAR 0 1
38966: PPUSH
38967: CALL_OW 251
38971: PPUSH
38972: LD_INT 10
38974: PPUSH
38975: LD_INT 0
38977: PPUSH
38978: CALL_OW 50
// continue ;
38982: GO 38883
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38984: LD_VAR 0 12
38988: PUSH
38989: LD_INT 1
38991: ARRAY
38992: PPUSH
38993: CALL_OW 313
38997: PUSH
38998: LD_VAR 0 12
39002: PUSH
39003: LD_INT 1
39005: ARRAY
39006: PPUSH
39007: CALL_OW 266
39011: PUSH
39012: LD_INT 32
39014: PUSH
39015: LD_INT 31
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: IN
39022: AND
39023: PUSH
39024: LD_VAR 0 12
39028: PUSH
39029: LD_INT 1
39031: ARRAY
39032: PPUSH
39033: CALL_OW 313
39037: PUSH
39038: LD_INT 6
39040: EQUAL
39041: OR
39042: IFFALSE 39062
// f := Delete ( f , 1 ) ;
39044: LD_ADDR_VAR 0 12
39048: PUSH
39049: LD_VAR 0 12
39053: PPUSH
39054: LD_INT 1
39056: PPUSH
39057: CALL_OW 3
39061: ST_TO_ADDR
// if not f then
39062: LD_VAR 0 12
39066: NOT
39067: IFFALSE 39085
// begin x := x + 2 ;
39069: LD_ADDR_VAR 0 13
39073: PUSH
39074: LD_VAR 0 13
39078: PUSH
39079: LD_INT 2
39081: PLUS
39082: ST_TO_ADDR
// continue ;
39083: GO 38883
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39085: LD_VAR 0 12
39089: PUSH
39090: LD_INT 1
39092: ARRAY
39093: PPUSH
39094: CALL_OW 266
39098: PUSH
39099: LD_INT 5
39101: EQUAL
39102: IFFALSE 39176
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39104: LD_VAR 0 12
39108: PUSH
39109: LD_INT 1
39111: ARRAY
39112: PPUSH
39113: CALL_OW 313
39117: PUSH
39118: LD_INT 3
39120: LESS
39121: IFFALSE 39157
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39123: LD_INT 0
39125: PPUSH
39126: LD_INT 5
39128: PUSH
39129: LD_INT 8
39131: PUSH
39132: LD_INT 9
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: PUSH
39140: LD_VAR 0 17
39144: ARRAY
39145: PPUSH
39146: LD_VAR 0 4
39150: PPUSH
39151: CALL_OW 380
39155: GO 39174
// PrepareHuman ( false , i , skill ) ;
39157: LD_INT 0
39159: PPUSH
39160: LD_VAR 0 8
39164: PPUSH
39165: LD_VAR 0 4
39169: PPUSH
39170: CALL_OW 380
// end else
39174: GO 39193
// PrepareHuman ( false , i , skill ) ;
39176: LD_INT 0
39178: PPUSH
39179: LD_VAR 0 8
39183: PPUSH
39184: LD_VAR 0 4
39188: PPUSH
39189: CALL_OW 380
// un := CreateHuman ;
39193: LD_ADDR_VAR 0 14
39197: PUSH
39198: CALL_OW 44
39202: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39203: LD_ADDR_VAR 0 7
39207: PUSH
39208: LD_VAR 0 7
39212: PPUSH
39213: LD_INT 1
39215: PPUSH
39216: LD_VAR 0 14
39220: PPUSH
39221: CALL_OW 2
39225: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39226: LD_VAR 0 14
39230: PPUSH
39231: LD_VAR 0 12
39235: PUSH
39236: LD_INT 1
39238: ARRAY
39239: PPUSH
39240: CALL_OW 52
// end ;
39244: GO 38883
39246: POP
39247: POP
// end ;
39248: GO 38185
39250: POP
39251: POP
// result := result ^ buildings ;
39252: LD_ADDR_VAR 0 7
39256: PUSH
39257: LD_VAR 0 7
39261: PUSH
39262: LD_VAR 0 18
39266: ADD
39267: ST_TO_ADDR
// end else
39268: GO 39411
// begin for i = 1 to personel do
39270: LD_ADDR_VAR 0 8
39274: PUSH
39275: DOUBLE
39276: LD_INT 1
39278: DEC
39279: ST_TO_ADDR
39280: LD_VAR 0 6
39284: PUSH
39285: FOR_TO
39286: IFFALSE 39409
// begin if i > 4 then
39288: LD_VAR 0 8
39292: PUSH
39293: LD_INT 4
39295: GREATER
39296: IFFALSE 39300
// break ;
39298: GO 39409
// x := personel [ i ] ;
39300: LD_ADDR_VAR 0 13
39304: PUSH
39305: LD_VAR 0 6
39309: PUSH
39310: LD_VAR 0 8
39314: ARRAY
39315: ST_TO_ADDR
// if x = - 1 then
39316: LD_VAR 0 13
39320: PUSH
39321: LD_INT 1
39323: NEG
39324: EQUAL
39325: IFFALSE 39329
// continue ;
39327: GO 39285
// PrepareHuman ( false , i , skill ) ;
39329: LD_INT 0
39331: PPUSH
39332: LD_VAR 0 8
39336: PPUSH
39337: LD_VAR 0 4
39341: PPUSH
39342: CALL_OW 380
// un := CreateHuman ;
39346: LD_ADDR_VAR 0 14
39350: PUSH
39351: CALL_OW 44
39355: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39356: LD_VAR 0 14
39360: PPUSH
39361: LD_VAR 0 1
39365: PPUSH
39366: CALL_OW 250
39370: PPUSH
39371: LD_VAR 0 1
39375: PPUSH
39376: CALL_OW 251
39380: PPUSH
39381: LD_INT 10
39383: PPUSH
39384: LD_INT 0
39386: PPUSH
39387: CALL_OW 50
// result := result ^ un ;
39391: LD_ADDR_VAR 0 7
39395: PUSH
39396: LD_VAR 0 7
39400: PUSH
39401: LD_VAR 0 14
39405: ADD
39406: ST_TO_ADDR
// end ;
39407: GO 39285
39409: POP
39410: POP
// end ; end ;
39411: LD_VAR 0 7
39415: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39416: LD_INT 0
39418: PPUSH
39419: PPUSH
39420: PPUSH
39421: PPUSH
39422: PPUSH
39423: PPUSH
39424: PPUSH
39425: PPUSH
39426: PPUSH
39427: PPUSH
39428: PPUSH
39429: PPUSH
39430: PPUSH
39431: PPUSH
39432: PPUSH
39433: PPUSH
// result := false ;
39434: LD_ADDR_VAR 0 3
39438: PUSH
39439: LD_INT 0
39441: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39442: LD_VAR 0 1
39446: NOT
39447: PUSH
39448: LD_VAR 0 1
39452: PPUSH
39453: CALL_OW 266
39457: PUSH
39458: LD_INT 32
39460: PUSH
39461: LD_INT 33
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: IN
39468: NOT
39469: OR
39470: IFFALSE 39474
// exit ;
39472: GO 40583
// nat := GetNation ( tower ) ;
39474: LD_ADDR_VAR 0 12
39478: PUSH
39479: LD_VAR 0 1
39483: PPUSH
39484: CALL_OW 248
39488: ST_TO_ADDR
// side := GetSide ( tower ) ;
39489: LD_ADDR_VAR 0 16
39493: PUSH
39494: LD_VAR 0 1
39498: PPUSH
39499: CALL_OW 255
39503: ST_TO_ADDR
// x := GetX ( tower ) ;
39504: LD_ADDR_VAR 0 10
39508: PUSH
39509: LD_VAR 0 1
39513: PPUSH
39514: CALL_OW 250
39518: ST_TO_ADDR
// y := GetY ( tower ) ;
39519: LD_ADDR_VAR 0 11
39523: PUSH
39524: LD_VAR 0 1
39528: PPUSH
39529: CALL_OW 251
39533: ST_TO_ADDR
// if not x or not y then
39534: LD_VAR 0 10
39538: NOT
39539: PUSH
39540: LD_VAR 0 11
39544: NOT
39545: OR
39546: IFFALSE 39550
// exit ;
39548: GO 40583
// weapon := 0 ;
39550: LD_ADDR_VAR 0 18
39554: PUSH
39555: LD_INT 0
39557: ST_TO_ADDR
// fac_list := [ ] ;
39558: LD_ADDR_VAR 0 17
39562: PUSH
39563: EMPTY
39564: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39565: LD_ADDR_VAR 0 6
39569: PUSH
39570: LD_VAR 0 1
39574: PPUSH
39575: CALL_OW 274
39579: PPUSH
39580: LD_VAR 0 2
39584: PPUSH
39585: LD_INT 0
39587: PPUSH
39588: CALL 37154 0 3
39592: PPUSH
39593: LD_INT 30
39595: PUSH
39596: LD_INT 3
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PPUSH
39603: CALL_OW 72
39607: ST_TO_ADDR
// if not factories then
39608: LD_VAR 0 6
39612: NOT
39613: IFFALSE 39617
// exit ;
39615: GO 40583
// for i in factories do
39617: LD_ADDR_VAR 0 8
39621: PUSH
39622: LD_VAR 0 6
39626: PUSH
39627: FOR_IN
39628: IFFALSE 39653
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39630: LD_ADDR_VAR 0 17
39634: PUSH
39635: LD_VAR 0 17
39639: PUSH
39640: LD_VAR 0 8
39644: PPUSH
39645: CALL_OW 478
39649: UNION
39650: ST_TO_ADDR
39651: GO 39627
39653: POP
39654: POP
// if not fac_list then
39655: LD_VAR 0 17
39659: NOT
39660: IFFALSE 39664
// exit ;
39662: GO 40583
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39664: LD_ADDR_VAR 0 5
39668: PUSH
39669: LD_INT 4
39671: PUSH
39672: LD_INT 5
39674: PUSH
39675: LD_INT 9
39677: PUSH
39678: LD_INT 10
39680: PUSH
39681: LD_INT 6
39683: PUSH
39684: LD_INT 7
39686: PUSH
39687: LD_INT 11
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 27
39701: PUSH
39702: LD_INT 28
39704: PUSH
39705: LD_INT 26
39707: PUSH
39708: LD_INT 30
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 43
39719: PUSH
39720: LD_INT 44
39722: PUSH
39723: LD_INT 46
39725: PUSH
39726: LD_INT 45
39728: PUSH
39729: LD_INT 47
39731: PUSH
39732: LD_INT 49
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: LIST
39747: PUSH
39748: LD_VAR 0 12
39752: ARRAY
39753: ST_TO_ADDR
// list := list isect fac_list ;
39754: LD_ADDR_VAR 0 5
39758: PUSH
39759: LD_VAR 0 5
39763: PUSH
39764: LD_VAR 0 17
39768: ISECT
39769: ST_TO_ADDR
// if not list then
39770: LD_VAR 0 5
39774: NOT
39775: IFFALSE 39779
// exit ;
39777: GO 40583
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39779: LD_VAR 0 12
39783: PUSH
39784: LD_INT 3
39786: EQUAL
39787: PUSH
39788: LD_INT 49
39790: PUSH
39791: LD_VAR 0 5
39795: IN
39796: AND
39797: PUSH
39798: LD_INT 31
39800: PPUSH
39801: LD_VAR 0 16
39805: PPUSH
39806: CALL_OW 321
39810: PUSH
39811: LD_INT 2
39813: EQUAL
39814: AND
39815: IFFALSE 39875
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39817: LD_INT 22
39819: PUSH
39820: LD_VAR 0 16
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 35
39831: PUSH
39832: LD_INT 49
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 91
39841: PUSH
39842: LD_VAR 0 1
39846: PUSH
39847: LD_INT 10
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: LIST
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: LIST
39859: PPUSH
39860: CALL_OW 69
39864: NOT
39865: IFFALSE 39875
// weapon := ru_time_lapser ;
39867: LD_ADDR_VAR 0 18
39871: PUSH
39872: LD_INT 49
39874: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39875: LD_VAR 0 12
39879: PUSH
39880: LD_INT 1
39882: PUSH
39883: LD_INT 2
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: IN
39890: PUSH
39891: LD_INT 11
39893: PUSH
39894: LD_VAR 0 5
39898: IN
39899: PUSH
39900: LD_INT 30
39902: PUSH
39903: LD_VAR 0 5
39907: IN
39908: OR
39909: AND
39910: PUSH
39911: LD_INT 6
39913: PPUSH
39914: LD_VAR 0 16
39918: PPUSH
39919: CALL_OW 321
39923: PUSH
39924: LD_INT 2
39926: EQUAL
39927: AND
39928: IFFALSE 40093
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39930: LD_INT 22
39932: PUSH
39933: LD_VAR 0 16
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 2
39944: PUSH
39945: LD_INT 35
39947: PUSH
39948: LD_INT 11
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 35
39957: PUSH
39958: LD_INT 30
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 91
39972: PUSH
39973: LD_VAR 0 1
39977: PUSH
39978: LD_INT 18
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: LIST
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: LIST
39990: PPUSH
39991: CALL_OW 69
39995: NOT
39996: PUSH
39997: LD_INT 22
39999: PUSH
40000: LD_VAR 0 16
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 2
40011: PUSH
40012: LD_INT 30
40014: PUSH
40015: LD_INT 32
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 30
40024: PUSH
40025: LD_INT 33
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 91
40039: PUSH
40040: LD_VAR 0 1
40044: PUSH
40045: LD_INT 12
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: LIST
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: LIST
40057: PUSH
40058: EMPTY
40059: LIST
40060: PPUSH
40061: CALL_OW 69
40065: PUSH
40066: LD_INT 2
40068: GREATER
40069: AND
40070: IFFALSE 40093
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40072: LD_ADDR_VAR 0 18
40076: PUSH
40077: LD_INT 11
40079: PUSH
40080: LD_INT 30
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_VAR 0 12
40091: ARRAY
40092: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40093: LD_VAR 0 18
40097: NOT
40098: PUSH
40099: LD_INT 40
40101: PPUSH
40102: LD_VAR 0 16
40106: PPUSH
40107: CALL_OW 321
40111: PUSH
40112: LD_INT 2
40114: EQUAL
40115: AND
40116: PUSH
40117: LD_INT 7
40119: PUSH
40120: LD_VAR 0 5
40124: IN
40125: PUSH
40126: LD_INT 28
40128: PUSH
40129: LD_VAR 0 5
40133: IN
40134: OR
40135: PUSH
40136: LD_INT 45
40138: PUSH
40139: LD_VAR 0 5
40143: IN
40144: OR
40145: AND
40146: IFFALSE 40400
// begin hex := GetHexInfo ( x , y ) ;
40148: LD_ADDR_VAR 0 4
40152: PUSH
40153: LD_VAR 0 10
40157: PPUSH
40158: LD_VAR 0 11
40162: PPUSH
40163: CALL_OW 546
40167: ST_TO_ADDR
// if hex [ 1 ] then
40168: LD_VAR 0 4
40172: PUSH
40173: LD_INT 1
40175: ARRAY
40176: IFFALSE 40180
// exit ;
40178: GO 40583
// height := hex [ 2 ] ;
40180: LD_ADDR_VAR 0 15
40184: PUSH
40185: LD_VAR 0 4
40189: PUSH
40190: LD_INT 2
40192: ARRAY
40193: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40194: LD_ADDR_VAR 0 14
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: LD_INT 3
40207: PUSH
40208: LD_INT 5
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: ST_TO_ADDR
// for i in tmp do
40217: LD_ADDR_VAR 0 8
40221: PUSH
40222: LD_VAR 0 14
40226: PUSH
40227: FOR_IN
40228: IFFALSE 40398
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40230: LD_ADDR_VAR 0 9
40234: PUSH
40235: LD_VAR 0 10
40239: PPUSH
40240: LD_VAR 0 8
40244: PPUSH
40245: LD_INT 5
40247: PPUSH
40248: CALL_OW 272
40252: PUSH
40253: LD_VAR 0 11
40257: PPUSH
40258: LD_VAR 0 8
40262: PPUSH
40263: LD_INT 5
40265: PPUSH
40266: CALL_OW 273
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40275: LD_VAR 0 9
40279: PUSH
40280: LD_INT 1
40282: ARRAY
40283: PPUSH
40284: LD_VAR 0 9
40288: PUSH
40289: LD_INT 2
40291: ARRAY
40292: PPUSH
40293: CALL_OW 488
40297: IFFALSE 40396
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40299: LD_ADDR_VAR 0 4
40303: PUSH
40304: LD_VAR 0 9
40308: PUSH
40309: LD_INT 1
40311: ARRAY
40312: PPUSH
40313: LD_VAR 0 9
40317: PUSH
40318: LD_INT 2
40320: ARRAY
40321: PPUSH
40322: CALL_OW 546
40326: ST_TO_ADDR
// if hex [ 1 ] then
40327: LD_VAR 0 4
40331: PUSH
40332: LD_INT 1
40334: ARRAY
40335: IFFALSE 40339
// continue ;
40337: GO 40227
// h := hex [ 2 ] ;
40339: LD_ADDR_VAR 0 13
40343: PUSH
40344: LD_VAR 0 4
40348: PUSH
40349: LD_INT 2
40351: ARRAY
40352: ST_TO_ADDR
// if h + 7 < height then
40353: LD_VAR 0 13
40357: PUSH
40358: LD_INT 7
40360: PLUS
40361: PUSH
40362: LD_VAR 0 15
40366: LESS
40367: IFFALSE 40396
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40369: LD_ADDR_VAR 0 18
40373: PUSH
40374: LD_INT 7
40376: PUSH
40377: LD_INT 28
40379: PUSH
40380: LD_INT 45
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: LIST
40387: PUSH
40388: LD_VAR 0 12
40392: ARRAY
40393: ST_TO_ADDR
// break ;
40394: GO 40398
// end ; end ; end ;
40396: GO 40227
40398: POP
40399: POP
// end ; if not weapon then
40400: LD_VAR 0 18
40404: NOT
40405: IFFALSE 40465
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40407: LD_ADDR_VAR 0 5
40411: PUSH
40412: LD_VAR 0 5
40416: PUSH
40417: LD_INT 11
40419: PUSH
40420: LD_INT 30
40422: PUSH
40423: LD_INT 49
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: LIST
40430: DIFF
40431: ST_TO_ADDR
// if not list then
40432: LD_VAR 0 5
40436: NOT
40437: IFFALSE 40441
// exit ;
40439: GO 40583
// weapon := list [ rand ( 1 , list ) ] ;
40441: LD_ADDR_VAR 0 18
40445: PUSH
40446: LD_VAR 0 5
40450: PUSH
40451: LD_INT 1
40453: PPUSH
40454: LD_VAR 0 5
40458: PPUSH
40459: CALL_OW 12
40463: ARRAY
40464: ST_TO_ADDR
// end ; if weapon then
40465: LD_VAR 0 18
40469: IFFALSE 40583
// begin tmp := CostOfWeapon ( weapon ) ;
40471: LD_ADDR_VAR 0 14
40475: PUSH
40476: LD_VAR 0 18
40480: PPUSH
40481: CALL_OW 451
40485: ST_TO_ADDR
// j := GetBase ( tower ) ;
40486: LD_ADDR_VAR 0 9
40490: PUSH
40491: LD_VAR 0 1
40495: PPUSH
40496: CALL_OW 274
40500: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40501: LD_VAR 0 9
40505: PPUSH
40506: LD_INT 1
40508: PPUSH
40509: CALL_OW 275
40513: PUSH
40514: LD_VAR 0 14
40518: PUSH
40519: LD_INT 1
40521: ARRAY
40522: GREATEREQUAL
40523: PUSH
40524: LD_VAR 0 9
40528: PPUSH
40529: LD_INT 2
40531: PPUSH
40532: CALL_OW 275
40536: PUSH
40537: LD_VAR 0 14
40541: PUSH
40542: LD_INT 2
40544: ARRAY
40545: GREATEREQUAL
40546: AND
40547: PUSH
40548: LD_VAR 0 9
40552: PPUSH
40553: LD_INT 3
40555: PPUSH
40556: CALL_OW 275
40560: PUSH
40561: LD_VAR 0 14
40565: PUSH
40566: LD_INT 3
40568: ARRAY
40569: GREATEREQUAL
40570: AND
40571: IFFALSE 40583
// result := weapon ;
40573: LD_ADDR_VAR 0 3
40577: PUSH
40578: LD_VAR 0 18
40582: ST_TO_ADDR
// end ; end ;
40583: LD_VAR 0 3
40587: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40588: LD_INT 0
40590: PPUSH
40591: PPUSH
// result := true ;
40592: LD_ADDR_VAR 0 3
40596: PUSH
40597: LD_INT 1
40599: ST_TO_ADDR
// if array1 = array2 then
40600: LD_VAR 0 1
40604: PUSH
40605: LD_VAR 0 2
40609: EQUAL
40610: IFFALSE 40670
// begin for i = 1 to array1 do
40612: LD_ADDR_VAR 0 4
40616: PUSH
40617: DOUBLE
40618: LD_INT 1
40620: DEC
40621: ST_TO_ADDR
40622: LD_VAR 0 1
40626: PUSH
40627: FOR_TO
40628: IFFALSE 40666
// if array1 [ i ] <> array2 [ i ] then
40630: LD_VAR 0 1
40634: PUSH
40635: LD_VAR 0 4
40639: ARRAY
40640: PUSH
40641: LD_VAR 0 2
40645: PUSH
40646: LD_VAR 0 4
40650: ARRAY
40651: NONEQUAL
40652: IFFALSE 40664
// begin result := false ;
40654: LD_ADDR_VAR 0 3
40658: PUSH
40659: LD_INT 0
40661: ST_TO_ADDR
// break ;
40662: GO 40666
// end ;
40664: GO 40627
40666: POP
40667: POP
// end else
40668: GO 40678
// result := false ;
40670: LD_ADDR_VAR 0 3
40674: PUSH
40675: LD_INT 0
40677: ST_TO_ADDR
// end ;
40678: LD_VAR 0 3
40682: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40683: LD_INT 0
40685: PPUSH
40686: PPUSH
// if not array1 or not array2 then
40687: LD_VAR 0 1
40691: NOT
40692: PUSH
40693: LD_VAR 0 2
40697: NOT
40698: OR
40699: IFFALSE 40703
// exit ;
40701: GO 40767
// result := true ;
40703: LD_ADDR_VAR 0 3
40707: PUSH
40708: LD_INT 1
40710: ST_TO_ADDR
// for i = 1 to array1 do
40711: LD_ADDR_VAR 0 4
40715: PUSH
40716: DOUBLE
40717: LD_INT 1
40719: DEC
40720: ST_TO_ADDR
40721: LD_VAR 0 1
40725: PUSH
40726: FOR_TO
40727: IFFALSE 40765
// if array1 [ i ] <> array2 [ i ] then
40729: LD_VAR 0 1
40733: PUSH
40734: LD_VAR 0 4
40738: ARRAY
40739: PUSH
40740: LD_VAR 0 2
40744: PUSH
40745: LD_VAR 0 4
40749: ARRAY
40750: NONEQUAL
40751: IFFALSE 40763
// begin result := false ;
40753: LD_ADDR_VAR 0 3
40757: PUSH
40758: LD_INT 0
40760: ST_TO_ADDR
// break ;
40761: GO 40765
// end ;
40763: GO 40726
40765: POP
40766: POP
// end ;
40767: LD_VAR 0 3
40771: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40772: LD_INT 0
40774: PPUSH
40775: PPUSH
40776: PPUSH
// pom := GetBase ( fac ) ;
40777: LD_ADDR_VAR 0 5
40781: PUSH
40782: LD_VAR 0 1
40786: PPUSH
40787: CALL_OW 274
40791: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40792: LD_ADDR_VAR 0 4
40796: PUSH
40797: LD_VAR 0 2
40801: PUSH
40802: LD_INT 1
40804: ARRAY
40805: PPUSH
40806: LD_VAR 0 2
40810: PUSH
40811: LD_INT 2
40813: ARRAY
40814: PPUSH
40815: LD_VAR 0 2
40819: PUSH
40820: LD_INT 3
40822: ARRAY
40823: PPUSH
40824: LD_VAR 0 2
40828: PUSH
40829: LD_INT 4
40831: ARRAY
40832: PPUSH
40833: CALL_OW 449
40837: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40838: LD_ADDR_VAR 0 3
40842: PUSH
40843: LD_VAR 0 5
40847: PPUSH
40848: LD_INT 1
40850: PPUSH
40851: CALL_OW 275
40855: PUSH
40856: LD_VAR 0 4
40860: PUSH
40861: LD_INT 1
40863: ARRAY
40864: GREATEREQUAL
40865: PUSH
40866: LD_VAR 0 5
40870: PPUSH
40871: LD_INT 2
40873: PPUSH
40874: CALL_OW 275
40878: PUSH
40879: LD_VAR 0 4
40883: PUSH
40884: LD_INT 2
40886: ARRAY
40887: GREATEREQUAL
40888: AND
40889: PUSH
40890: LD_VAR 0 5
40894: PPUSH
40895: LD_INT 3
40897: PPUSH
40898: CALL_OW 275
40902: PUSH
40903: LD_VAR 0 4
40907: PUSH
40908: LD_INT 3
40910: ARRAY
40911: GREATEREQUAL
40912: AND
40913: ST_TO_ADDR
// end ;
40914: LD_VAR 0 3
40918: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40919: LD_INT 0
40921: PPUSH
40922: PPUSH
40923: PPUSH
40924: PPUSH
// pom := GetBase ( building ) ;
40925: LD_ADDR_VAR 0 3
40929: PUSH
40930: LD_VAR 0 1
40934: PPUSH
40935: CALL_OW 274
40939: ST_TO_ADDR
// if not pom then
40940: LD_VAR 0 3
40944: NOT
40945: IFFALSE 40949
// exit ;
40947: GO 41119
// btype := GetBType ( building ) ;
40949: LD_ADDR_VAR 0 5
40953: PUSH
40954: LD_VAR 0 1
40958: PPUSH
40959: CALL_OW 266
40963: ST_TO_ADDR
// if btype = b_armoury then
40964: LD_VAR 0 5
40968: PUSH
40969: LD_INT 4
40971: EQUAL
40972: IFFALSE 40982
// btype := b_barracks ;
40974: LD_ADDR_VAR 0 5
40978: PUSH
40979: LD_INT 5
40981: ST_TO_ADDR
// if btype = b_depot then
40982: LD_VAR 0 5
40986: PUSH
40987: LD_INT 0
40989: EQUAL
40990: IFFALSE 41000
// btype := b_warehouse ;
40992: LD_ADDR_VAR 0 5
40996: PUSH
40997: LD_INT 1
40999: ST_TO_ADDR
// if btype = b_workshop then
41000: LD_VAR 0 5
41004: PUSH
41005: LD_INT 2
41007: EQUAL
41008: IFFALSE 41018
// btype := b_factory ;
41010: LD_ADDR_VAR 0 5
41014: PUSH
41015: LD_INT 3
41017: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41018: LD_ADDR_VAR 0 4
41022: PUSH
41023: LD_VAR 0 5
41027: PPUSH
41028: LD_VAR 0 1
41032: PPUSH
41033: CALL_OW 248
41037: PPUSH
41038: CALL_OW 450
41042: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41043: LD_ADDR_VAR 0 2
41047: PUSH
41048: LD_VAR 0 3
41052: PPUSH
41053: LD_INT 1
41055: PPUSH
41056: CALL_OW 275
41060: PUSH
41061: LD_VAR 0 4
41065: PUSH
41066: LD_INT 1
41068: ARRAY
41069: GREATEREQUAL
41070: PUSH
41071: LD_VAR 0 3
41075: PPUSH
41076: LD_INT 2
41078: PPUSH
41079: CALL_OW 275
41083: PUSH
41084: LD_VAR 0 4
41088: PUSH
41089: LD_INT 2
41091: ARRAY
41092: GREATEREQUAL
41093: AND
41094: PUSH
41095: LD_VAR 0 3
41099: PPUSH
41100: LD_INT 3
41102: PPUSH
41103: CALL_OW 275
41107: PUSH
41108: LD_VAR 0 4
41112: PUSH
41113: LD_INT 3
41115: ARRAY
41116: GREATEREQUAL
41117: AND
41118: ST_TO_ADDR
// end ;
41119: LD_VAR 0 2
41123: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41124: LD_INT 0
41126: PPUSH
41127: PPUSH
41128: PPUSH
// pom := GetBase ( building ) ;
41129: LD_ADDR_VAR 0 4
41133: PUSH
41134: LD_VAR 0 1
41138: PPUSH
41139: CALL_OW 274
41143: ST_TO_ADDR
// if not pom then
41144: LD_VAR 0 4
41148: NOT
41149: IFFALSE 41153
// exit ;
41151: GO 41254
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41153: LD_ADDR_VAR 0 5
41157: PUSH
41158: LD_VAR 0 2
41162: PPUSH
41163: LD_VAR 0 1
41167: PPUSH
41168: CALL_OW 248
41172: PPUSH
41173: CALL_OW 450
41177: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41178: LD_ADDR_VAR 0 3
41182: PUSH
41183: LD_VAR 0 4
41187: PPUSH
41188: LD_INT 1
41190: PPUSH
41191: CALL_OW 275
41195: PUSH
41196: LD_VAR 0 5
41200: PUSH
41201: LD_INT 1
41203: ARRAY
41204: GREATEREQUAL
41205: PUSH
41206: LD_VAR 0 4
41210: PPUSH
41211: LD_INT 2
41213: PPUSH
41214: CALL_OW 275
41218: PUSH
41219: LD_VAR 0 5
41223: PUSH
41224: LD_INT 2
41226: ARRAY
41227: GREATEREQUAL
41228: AND
41229: PUSH
41230: LD_VAR 0 4
41234: PPUSH
41235: LD_INT 3
41237: PPUSH
41238: CALL_OW 275
41242: PUSH
41243: LD_VAR 0 5
41247: PUSH
41248: LD_INT 3
41250: ARRAY
41251: GREATEREQUAL
41252: AND
41253: ST_TO_ADDR
// end ;
41254: LD_VAR 0 3
41258: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41259: LD_INT 0
41261: PPUSH
41262: PPUSH
41263: PPUSH
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
41268: PPUSH
41269: PPUSH
41270: PPUSH
41271: PPUSH
// result := false ;
41272: LD_ADDR_VAR 0 8
41276: PUSH
41277: LD_INT 0
41279: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41280: LD_VAR 0 5
41284: NOT
41285: PUSH
41286: LD_VAR 0 1
41290: NOT
41291: OR
41292: PUSH
41293: LD_VAR 0 2
41297: NOT
41298: OR
41299: PUSH
41300: LD_VAR 0 3
41304: NOT
41305: OR
41306: IFFALSE 41310
// exit ;
41308: GO 42124
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41310: LD_ADDR_VAR 0 14
41314: PUSH
41315: LD_VAR 0 1
41319: PPUSH
41320: LD_VAR 0 2
41324: PPUSH
41325: LD_VAR 0 3
41329: PPUSH
41330: LD_VAR 0 4
41334: PPUSH
41335: LD_VAR 0 5
41339: PUSH
41340: LD_INT 1
41342: ARRAY
41343: PPUSH
41344: CALL_OW 248
41348: PPUSH
41349: LD_INT 0
41351: PPUSH
41352: CALL 43377 0 6
41356: ST_TO_ADDR
// if not hexes then
41357: LD_VAR 0 14
41361: NOT
41362: IFFALSE 41366
// exit ;
41364: GO 42124
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41366: LD_ADDR_VAR 0 17
41370: PUSH
41371: LD_VAR 0 5
41375: PPUSH
41376: LD_INT 22
41378: PUSH
41379: LD_VAR 0 13
41383: PPUSH
41384: CALL_OW 255
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 2
41395: PUSH
41396: LD_INT 30
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 30
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: LIST
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PPUSH
41425: CALL_OW 72
41429: ST_TO_ADDR
// for i = 1 to hexes do
41430: LD_ADDR_VAR 0 9
41434: PUSH
41435: DOUBLE
41436: LD_INT 1
41438: DEC
41439: ST_TO_ADDR
41440: LD_VAR 0 14
41444: PUSH
41445: FOR_TO
41446: IFFALSE 42122
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41448: LD_ADDR_VAR 0 13
41452: PUSH
41453: LD_VAR 0 14
41457: PUSH
41458: LD_VAR 0 9
41462: ARRAY
41463: PUSH
41464: LD_INT 1
41466: ARRAY
41467: PPUSH
41468: LD_VAR 0 14
41472: PUSH
41473: LD_VAR 0 9
41477: ARRAY
41478: PUSH
41479: LD_INT 2
41481: ARRAY
41482: PPUSH
41483: CALL_OW 428
41487: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41488: LD_VAR 0 14
41492: PUSH
41493: LD_VAR 0 9
41497: ARRAY
41498: PUSH
41499: LD_INT 1
41501: ARRAY
41502: PPUSH
41503: LD_VAR 0 14
41507: PUSH
41508: LD_VAR 0 9
41512: ARRAY
41513: PUSH
41514: LD_INT 2
41516: ARRAY
41517: PPUSH
41518: CALL_OW 351
41522: PUSH
41523: LD_VAR 0 14
41527: PUSH
41528: LD_VAR 0 9
41532: ARRAY
41533: PUSH
41534: LD_INT 1
41536: ARRAY
41537: PPUSH
41538: LD_VAR 0 14
41542: PUSH
41543: LD_VAR 0 9
41547: ARRAY
41548: PUSH
41549: LD_INT 2
41551: ARRAY
41552: PPUSH
41553: CALL_OW 488
41557: NOT
41558: OR
41559: PUSH
41560: LD_VAR 0 13
41564: PPUSH
41565: CALL_OW 247
41569: PUSH
41570: LD_INT 3
41572: EQUAL
41573: OR
41574: IFFALSE 41580
// exit ;
41576: POP
41577: POP
41578: GO 42124
// if not tmp then
41580: LD_VAR 0 13
41584: NOT
41585: IFFALSE 41589
// continue ;
41587: GO 41445
// result := true ;
41589: LD_ADDR_VAR 0 8
41593: PUSH
41594: LD_INT 1
41596: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41597: LD_VAR 0 6
41601: PUSH
41602: LD_VAR 0 13
41606: PPUSH
41607: CALL_OW 247
41611: PUSH
41612: LD_INT 2
41614: EQUAL
41615: AND
41616: PUSH
41617: LD_VAR 0 13
41621: PPUSH
41622: CALL_OW 263
41626: PUSH
41627: LD_INT 1
41629: EQUAL
41630: AND
41631: IFFALSE 41795
// begin if IsDrivenBy ( tmp ) then
41633: LD_VAR 0 13
41637: PPUSH
41638: CALL_OW 311
41642: IFFALSE 41646
// continue ;
41644: GO 41445
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41646: LD_VAR 0 6
41650: PPUSH
41651: LD_INT 3
41653: PUSH
41654: LD_INT 60
41656: PUSH
41657: EMPTY
41658: LIST
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 3
41666: PUSH
41667: LD_INT 55
41669: PUSH
41670: EMPTY
41671: LIST
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PPUSH
41681: CALL_OW 72
41685: IFFALSE 41793
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41687: LD_ADDR_VAR 0 18
41691: PUSH
41692: LD_VAR 0 6
41696: PPUSH
41697: LD_INT 3
41699: PUSH
41700: LD_INT 60
41702: PUSH
41703: EMPTY
41704: LIST
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 3
41712: PUSH
41713: LD_INT 55
41715: PUSH
41716: EMPTY
41717: LIST
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PPUSH
41727: CALL_OW 72
41731: PUSH
41732: LD_INT 1
41734: ARRAY
41735: ST_TO_ADDR
// if IsInUnit ( driver ) then
41736: LD_VAR 0 18
41740: PPUSH
41741: CALL_OW 310
41745: IFFALSE 41756
// ComExit ( driver ) ;
41747: LD_VAR 0 18
41751: PPUSH
41752: CALL 67156 0 1
// AddComEnterUnit ( driver , tmp ) ;
41756: LD_VAR 0 18
41760: PPUSH
41761: LD_VAR 0 13
41765: PPUSH
41766: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41770: LD_VAR 0 18
41774: PPUSH
41775: LD_VAR 0 7
41779: PPUSH
41780: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41784: LD_VAR 0 18
41788: PPUSH
41789: CALL_OW 181
// end ; continue ;
41793: GO 41445
// end ; if not cleaners or not tmp in cleaners then
41795: LD_VAR 0 6
41799: NOT
41800: PUSH
41801: LD_VAR 0 13
41805: PUSH
41806: LD_VAR 0 6
41810: IN
41811: NOT
41812: OR
41813: IFFALSE 42120
// begin if dep then
41815: LD_VAR 0 17
41819: IFFALSE 41955
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41821: LD_ADDR_VAR 0 16
41825: PUSH
41826: LD_VAR 0 17
41830: PUSH
41831: LD_INT 1
41833: ARRAY
41834: PPUSH
41835: CALL_OW 250
41839: PPUSH
41840: LD_VAR 0 17
41844: PUSH
41845: LD_INT 1
41847: ARRAY
41848: PPUSH
41849: CALL_OW 254
41853: PPUSH
41854: LD_INT 5
41856: PPUSH
41857: CALL_OW 272
41861: PUSH
41862: LD_VAR 0 17
41866: PUSH
41867: LD_INT 1
41869: ARRAY
41870: PPUSH
41871: CALL_OW 251
41875: PPUSH
41876: LD_VAR 0 17
41880: PUSH
41881: LD_INT 1
41883: ARRAY
41884: PPUSH
41885: CALL_OW 254
41889: PPUSH
41890: LD_INT 5
41892: PPUSH
41893: CALL_OW 273
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41902: LD_VAR 0 16
41906: PUSH
41907: LD_INT 1
41909: ARRAY
41910: PPUSH
41911: LD_VAR 0 16
41915: PUSH
41916: LD_INT 2
41918: ARRAY
41919: PPUSH
41920: CALL_OW 488
41924: IFFALSE 41955
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41926: LD_VAR 0 13
41930: PPUSH
41931: LD_VAR 0 16
41935: PUSH
41936: LD_INT 1
41938: ARRAY
41939: PPUSH
41940: LD_VAR 0 16
41944: PUSH
41945: LD_INT 2
41947: ARRAY
41948: PPUSH
41949: CALL_OW 111
// continue ;
41953: GO 41445
// end ; end ; r := GetDir ( tmp ) ;
41955: LD_ADDR_VAR 0 15
41959: PUSH
41960: LD_VAR 0 13
41964: PPUSH
41965: CALL_OW 254
41969: ST_TO_ADDR
// if r = 5 then
41970: LD_VAR 0 15
41974: PUSH
41975: LD_INT 5
41977: EQUAL
41978: IFFALSE 41988
// r := 0 ;
41980: LD_ADDR_VAR 0 15
41984: PUSH
41985: LD_INT 0
41987: ST_TO_ADDR
// for j = r to 5 do
41988: LD_ADDR_VAR 0 10
41992: PUSH
41993: DOUBLE
41994: LD_VAR 0 15
41998: DEC
41999: ST_TO_ADDR
42000: LD_INT 5
42002: PUSH
42003: FOR_TO
42004: IFFALSE 42118
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42006: LD_ADDR_VAR 0 11
42010: PUSH
42011: LD_VAR 0 13
42015: PPUSH
42016: CALL_OW 250
42020: PPUSH
42021: LD_VAR 0 10
42025: PPUSH
42026: LD_INT 2
42028: PPUSH
42029: CALL_OW 272
42033: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42034: LD_ADDR_VAR 0 12
42038: PUSH
42039: LD_VAR 0 13
42043: PPUSH
42044: CALL_OW 251
42048: PPUSH
42049: LD_VAR 0 10
42053: PPUSH
42054: LD_INT 2
42056: PPUSH
42057: CALL_OW 273
42061: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42062: LD_VAR 0 11
42066: PPUSH
42067: LD_VAR 0 12
42071: PPUSH
42072: CALL_OW 488
42076: PUSH
42077: LD_VAR 0 11
42081: PPUSH
42082: LD_VAR 0 12
42086: PPUSH
42087: CALL_OW 428
42091: NOT
42092: AND
42093: IFFALSE 42116
// begin ComMoveXY ( tmp , _x , _y ) ;
42095: LD_VAR 0 13
42099: PPUSH
42100: LD_VAR 0 11
42104: PPUSH
42105: LD_VAR 0 12
42109: PPUSH
42110: CALL_OW 111
// break ;
42114: GO 42118
// end ; end ;
42116: GO 42003
42118: POP
42119: POP
// end ; end ;
42120: GO 41445
42122: POP
42123: POP
// end ;
42124: LD_VAR 0 8
42128: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42129: LD_INT 0
42131: PPUSH
// result := true ;
42132: LD_ADDR_VAR 0 3
42136: PUSH
42137: LD_INT 1
42139: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42140: LD_VAR 0 2
42144: PUSH
42145: LD_INT 24
42147: DOUBLE
42148: EQUAL
42149: IFTRUE 42159
42151: LD_INT 33
42153: DOUBLE
42154: EQUAL
42155: IFTRUE 42159
42157: GO 42184
42159: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42160: LD_ADDR_VAR 0 3
42164: PUSH
42165: LD_INT 32
42167: PPUSH
42168: LD_VAR 0 1
42172: PPUSH
42173: CALL_OW 321
42177: PUSH
42178: LD_INT 2
42180: EQUAL
42181: ST_TO_ADDR
42182: GO 42500
42184: LD_INT 20
42186: DOUBLE
42187: EQUAL
42188: IFTRUE 42192
42190: GO 42217
42192: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42193: LD_ADDR_VAR 0 3
42197: PUSH
42198: LD_INT 6
42200: PPUSH
42201: LD_VAR 0 1
42205: PPUSH
42206: CALL_OW 321
42210: PUSH
42211: LD_INT 2
42213: EQUAL
42214: ST_TO_ADDR
42215: GO 42500
42217: LD_INT 22
42219: DOUBLE
42220: EQUAL
42221: IFTRUE 42231
42223: LD_INT 36
42225: DOUBLE
42226: EQUAL
42227: IFTRUE 42231
42229: GO 42256
42231: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42232: LD_ADDR_VAR 0 3
42236: PUSH
42237: LD_INT 15
42239: PPUSH
42240: LD_VAR 0 1
42244: PPUSH
42245: CALL_OW 321
42249: PUSH
42250: LD_INT 2
42252: EQUAL
42253: ST_TO_ADDR
42254: GO 42500
42256: LD_INT 30
42258: DOUBLE
42259: EQUAL
42260: IFTRUE 42264
42262: GO 42289
42264: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42265: LD_ADDR_VAR 0 3
42269: PUSH
42270: LD_INT 20
42272: PPUSH
42273: LD_VAR 0 1
42277: PPUSH
42278: CALL_OW 321
42282: PUSH
42283: LD_INT 2
42285: EQUAL
42286: ST_TO_ADDR
42287: GO 42500
42289: LD_INT 28
42291: DOUBLE
42292: EQUAL
42293: IFTRUE 42303
42295: LD_INT 21
42297: DOUBLE
42298: EQUAL
42299: IFTRUE 42303
42301: GO 42328
42303: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42304: LD_ADDR_VAR 0 3
42308: PUSH
42309: LD_INT 21
42311: PPUSH
42312: LD_VAR 0 1
42316: PPUSH
42317: CALL_OW 321
42321: PUSH
42322: LD_INT 2
42324: EQUAL
42325: ST_TO_ADDR
42326: GO 42500
42328: LD_INT 16
42330: DOUBLE
42331: EQUAL
42332: IFTRUE 42336
42334: GO 42361
42336: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42337: LD_ADDR_VAR 0 3
42341: PUSH
42342: LD_INT 84
42344: PPUSH
42345: LD_VAR 0 1
42349: PPUSH
42350: CALL_OW 321
42354: PUSH
42355: LD_INT 2
42357: EQUAL
42358: ST_TO_ADDR
42359: GO 42500
42361: LD_INT 19
42363: DOUBLE
42364: EQUAL
42365: IFTRUE 42375
42367: LD_INT 23
42369: DOUBLE
42370: EQUAL
42371: IFTRUE 42375
42373: GO 42400
42375: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42376: LD_ADDR_VAR 0 3
42380: PUSH
42381: LD_INT 83
42383: PPUSH
42384: LD_VAR 0 1
42388: PPUSH
42389: CALL_OW 321
42393: PUSH
42394: LD_INT 2
42396: EQUAL
42397: ST_TO_ADDR
42398: GO 42500
42400: LD_INT 17
42402: DOUBLE
42403: EQUAL
42404: IFTRUE 42408
42406: GO 42433
42408: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42409: LD_ADDR_VAR 0 3
42413: PUSH
42414: LD_INT 39
42416: PPUSH
42417: LD_VAR 0 1
42421: PPUSH
42422: CALL_OW 321
42426: PUSH
42427: LD_INT 2
42429: EQUAL
42430: ST_TO_ADDR
42431: GO 42500
42433: LD_INT 18
42435: DOUBLE
42436: EQUAL
42437: IFTRUE 42441
42439: GO 42466
42441: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42442: LD_ADDR_VAR 0 3
42446: PUSH
42447: LD_INT 40
42449: PPUSH
42450: LD_VAR 0 1
42454: PPUSH
42455: CALL_OW 321
42459: PUSH
42460: LD_INT 2
42462: EQUAL
42463: ST_TO_ADDR
42464: GO 42500
42466: LD_INT 27
42468: DOUBLE
42469: EQUAL
42470: IFTRUE 42474
42472: GO 42499
42474: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42475: LD_ADDR_VAR 0 3
42479: PUSH
42480: LD_INT 35
42482: PPUSH
42483: LD_VAR 0 1
42487: PPUSH
42488: CALL_OW 321
42492: PUSH
42493: LD_INT 2
42495: EQUAL
42496: ST_TO_ADDR
42497: GO 42500
42499: POP
// end ;
42500: LD_VAR 0 3
42504: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42505: LD_INT 0
42507: PPUSH
42508: PPUSH
42509: PPUSH
42510: PPUSH
42511: PPUSH
42512: PPUSH
42513: PPUSH
42514: PPUSH
42515: PPUSH
42516: PPUSH
42517: PPUSH
// result := false ;
42518: LD_ADDR_VAR 0 6
42522: PUSH
42523: LD_INT 0
42525: ST_TO_ADDR
// if btype = b_depot then
42526: LD_VAR 0 2
42530: PUSH
42531: LD_INT 0
42533: EQUAL
42534: IFFALSE 42546
// begin result := true ;
42536: LD_ADDR_VAR 0 6
42540: PUSH
42541: LD_INT 1
42543: ST_TO_ADDR
// exit ;
42544: GO 43372
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42546: LD_VAR 0 1
42550: NOT
42551: PUSH
42552: LD_VAR 0 1
42556: PPUSH
42557: CALL_OW 266
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: IN
42572: NOT
42573: OR
42574: PUSH
42575: LD_VAR 0 2
42579: NOT
42580: OR
42581: PUSH
42582: LD_VAR 0 5
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: LD_INT 3
42598: PUSH
42599: LD_INT 4
42601: PUSH
42602: LD_INT 5
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: IN
42613: NOT
42614: OR
42615: PUSH
42616: LD_VAR 0 3
42620: PPUSH
42621: LD_VAR 0 4
42625: PPUSH
42626: CALL_OW 488
42630: NOT
42631: OR
42632: IFFALSE 42636
// exit ;
42634: GO 43372
// side := GetSide ( depot ) ;
42636: LD_ADDR_VAR 0 9
42640: PUSH
42641: LD_VAR 0 1
42645: PPUSH
42646: CALL_OW 255
42650: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42651: LD_VAR 0 9
42655: PPUSH
42656: LD_VAR 0 2
42660: PPUSH
42661: CALL 42129 0 2
42665: NOT
42666: IFFALSE 42670
// exit ;
42668: GO 43372
// pom := GetBase ( depot ) ;
42670: LD_ADDR_VAR 0 10
42674: PUSH
42675: LD_VAR 0 1
42679: PPUSH
42680: CALL_OW 274
42684: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42685: LD_ADDR_VAR 0 11
42689: PUSH
42690: LD_VAR 0 2
42694: PPUSH
42695: LD_VAR 0 1
42699: PPUSH
42700: CALL_OW 248
42704: PPUSH
42705: CALL_OW 450
42709: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42710: LD_VAR 0 10
42714: PPUSH
42715: LD_INT 1
42717: PPUSH
42718: CALL_OW 275
42722: PUSH
42723: LD_VAR 0 11
42727: PUSH
42728: LD_INT 1
42730: ARRAY
42731: GREATEREQUAL
42732: PUSH
42733: LD_VAR 0 10
42737: PPUSH
42738: LD_INT 2
42740: PPUSH
42741: CALL_OW 275
42745: PUSH
42746: LD_VAR 0 11
42750: PUSH
42751: LD_INT 2
42753: ARRAY
42754: GREATEREQUAL
42755: AND
42756: PUSH
42757: LD_VAR 0 10
42761: PPUSH
42762: LD_INT 3
42764: PPUSH
42765: CALL_OW 275
42769: PUSH
42770: LD_VAR 0 11
42774: PUSH
42775: LD_INT 3
42777: ARRAY
42778: GREATEREQUAL
42779: AND
42780: NOT
42781: IFFALSE 42785
// exit ;
42783: GO 43372
// if GetBType ( depot ) = b_depot then
42785: LD_VAR 0 1
42789: PPUSH
42790: CALL_OW 266
42794: PUSH
42795: LD_INT 0
42797: EQUAL
42798: IFFALSE 42810
// dist := 28 else
42800: LD_ADDR_VAR 0 14
42804: PUSH
42805: LD_INT 28
42807: ST_TO_ADDR
42808: GO 42818
// dist := 36 ;
42810: LD_ADDR_VAR 0 14
42814: PUSH
42815: LD_INT 36
42817: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42818: LD_VAR 0 1
42822: PPUSH
42823: LD_VAR 0 3
42827: PPUSH
42828: LD_VAR 0 4
42832: PPUSH
42833: CALL_OW 297
42837: PUSH
42838: LD_VAR 0 14
42842: GREATER
42843: IFFALSE 42847
// exit ;
42845: GO 43372
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42847: LD_ADDR_VAR 0 12
42851: PUSH
42852: LD_VAR 0 2
42856: PPUSH
42857: LD_VAR 0 3
42861: PPUSH
42862: LD_VAR 0 4
42866: PPUSH
42867: LD_VAR 0 5
42871: PPUSH
42872: LD_VAR 0 1
42876: PPUSH
42877: CALL_OW 248
42881: PPUSH
42882: LD_INT 0
42884: PPUSH
42885: CALL 43377 0 6
42889: ST_TO_ADDR
// if not hexes then
42890: LD_VAR 0 12
42894: NOT
42895: IFFALSE 42899
// exit ;
42897: GO 43372
// hex := GetHexInfo ( x , y ) ;
42899: LD_ADDR_VAR 0 15
42903: PUSH
42904: LD_VAR 0 3
42908: PPUSH
42909: LD_VAR 0 4
42913: PPUSH
42914: CALL_OW 546
42918: ST_TO_ADDR
// if hex [ 1 ] then
42919: LD_VAR 0 15
42923: PUSH
42924: LD_INT 1
42926: ARRAY
42927: IFFALSE 42931
// exit ;
42929: GO 43372
// height := hex [ 2 ] ;
42931: LD_ADDR_VAR 0 13
42935: PUSH
42936: LD_VAR 0 15
42940: PUSH
42941: LD_INT 2
42943: ARRAY
42944: ST_TO_ADDR
// for i = 1 to hexes do
42945: LD_ADDR_VAR 0 7
42949: PUSH
42950: DOUBLE
42951: LD_INT 1
42953: DEC
42954: ST_TO_ADDR
42955: LD_VAR 0 12
42959: PUSH
42960: FOR_TO
42961: IFFALSE 43291
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42963: LD_VAR 0 12
42967: PUSH
42968: LD_VAR 0 7
42972: ARRAY
42973: PUSH
42974: LD_INT 1
42976: ARRAY
42977: PPUSH
42978: LD_VAR 0 12
42982: PUSH
42983: LD_VAR 0 7
42987: ARRAY
42988: PUSH
42989: LD_INT 2
42991: ARRAY
42992: PPUSH
42993: CALL_OW 488
42997: NOT
42998: PUSH
42999: LD_VAR 0 12
43003: PUSH
43004: LD_VAR 0 7
43008: ARRAY
43009: PUSH
43010: LD_INT 1
43012: ARRAY
43013: PPUSH
43014: LD_VAR 0 12
43018: PUSH
43019: LD_VAR 0 7
43023: ARRAY
43024: PUSH
43025: LD_INT 2
43027: ARRAY
43028: PPUSH
43029: CALL_OW 428
43033: PUSH
43034: LD_INT 0
43036: GREATER
43037: OR
43038: PUSH
43039: LD_VAR 0 12
43043: PUSH
43044: LD_VAR 0 7
43048: ARRAY
43049: PUSH
43050: LD_INT 1
43052: ARRAY
43053: PPUSH
43054: LD_VAR 0 12
43058: PUSH
43059: LD_VAR 0 7
43063: ARRAY
43064: PUSH
43065: LD_INT 2
43067: ARRAY
43068: PPUSH
43069: CALL_OW 351
43073: OR
43074: IFFALSE 43080
// exit ;
43076: POP
43077: POP
43078: GO 43372
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43080: LD_ADDR_VAR 0 8
43084: PUSH
43085: LD_VAR 0 12
43089: PUSH
43090: LD_VAR 0 7
43094: ARRAY
43095: PUSH
43096: LD_INT 1
43098: ARRAY
43099: PPUSH
43100: LD_VAR 0 12
43104: PUSH
43105: LD_VAR 0 7
43109: ARRAY
43110: PUSH
43111: LD_INT 2
43113: ARRAY
43114: PPUSH
43115: CALL_OW 546
43119: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43120: LD_VAR 0 8
43124: PUSH
43125: LD_INT 1
43127: ARRAY
43128: PUSH
43129: LD_VAR 0 8
43133: PUSH
43134: LD_INT 2
43136: ARRAY
43137: PUSH
43138: LD_VAR 0 13
43142: PUSH
43143: LD_INT 2
43145: PLUS
43146: GREATER
43147: OR
43148: PUSH
43149: LD_VAR 0 8
43153: PUSH
43154: LD_INT 2
43156: ARRAY
43157: PUSH
43158: LD_VAR 0 13
43162: PUSH
43163: LD_INT 2
43165: MINUS
43166: LESS
43167: OR
43168: PUSH
43169: LD_VAR 0 8
43173: PUSH
43174: LD_INT 3
43176: ARRAY
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: LD_INT 8
43183: PUSH
43184: LD_INT 9
43186: PUSH
43187: LD_INT 10
43189: PUSH
43190: LD_INT 11
43192: PUSH
43193: LD_INT 12
43195: PUSH
43196: LD_INT 13
43198: PUSH
43199: LD_INT 16
43201: PUSH
43202: LD_INT 17
43204: PUSH
43205: LD_INT 18
43207: PUSH
43208: LD_INT 19
43210: PUSH
43211: LD_INT 20
43213: PUSH
43214: LD_INT 21
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: IN
43232: NOT
43233: OR
43234: PUSH
43235: LD_VAR 0 8
43239: PUSH
43240: LD_INT 5
43242: ARRAY
43243: NOT
43244: OR
43245: PUSH
43246: LD_VAR 0 8
43250: PUSH
43251: LD_INT 6
43253: ARRAY
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: LD_INT 7
43263: PUSH
43264: LD_INT 9
43266: PUSH
43267: LD_INT 10
43269: PUSH
43270: LD_INT 11
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: IN
43281: NOT
43282: OR
43283: IFFALSE 43289
// exit ;
43285: POP
43286: POP
43287: GO 43372
// end ;
43289: GO 42960
43291: POP
43292: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43293: LD_VAR 0 9
43297: PPUSH
43298: LD_VAR 0 3
43302: PPUSH
43303: LD_VAR 0 4
43307: PPUSH
43308: LD_INT 20
43310: PPUSH
43311: CALL 35295 0 4
43315: PUSH
43316: LD_INT 4
43318: ARRAY
43319: IFFALSE 43323
// exit ;
43321: GO 43372
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43323: LD_VAR 0 2
43327: PUSH
43328: LD_INT 29
43330: PUSH
43331: LD_INT 30
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: IN
43338: PUSH
43339: LD_VAR 0 3
43343: PPUSH
43344: LD_VAR 0 4
43348: PPUSH
43349: LD_VAR 0 9
43353: PPUSH
43354: CALL_OW 440
43358: NOT
43359: AND
43360: IFFALSE 43364
// exit ;
43362: GO 43372
// result := true ;
43364: LD_ADDR_VAR 0 6
43368: PUSH
43369: LD_INT 1
43371: ST_TO_ADDR
// end ;
43372: LD_VAR 0 6
43376: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43377: LD_INT 0
43379: PPUSH
43380: PPUSH
43381: PPUSH
43382: PPUSH
43383: PPUSH
43384: PPUSH
43385: PPUSH
43386: PPUSH
43387: PPUSH
43388: PPUSH
43389: PPUSH
43390: PPUSH
43391: PPUSH
43392: PPUSH
43393: PPUSH
43394: PPUSH
43395: PPUSH
43396: PPUSH
43397: PPUSH
43398: PPUSH
43399: PPUSH
43400: PPUSH
43401: PPUSH
43402: PPUSH
43403: PPUSH
43404: PPUSH
43405: PPUSH
43406: PPUSH
43407: PPUSH
43408: PPUSH
43409: PPUSH
43410: PPUSH
43411: PPUSH
43412: PPUSH
43413: PPUSH
43414: PPUSH
43415: PPUSH
43416: PPUSH
43417: PPUSH
43418: PPUSH
43419: PPUSH
43420: PPUSH
43421: PPUSH
43422: PPUSH
43423: PPUSH
43424: PPUSH
43425: PPUSH
43426: PPUSH
43427: PPUSH
43428: PPUSH
43429: PPUSH
43430: PPUSH
43431: PPUSH
43432: PPUSH
43433: PPUSH
43434: PPUSH
43435: PPUSH
43436: PPUSH
// result = [ ] ;
43437: LD_ADDR_VAR 0 7
43441: PUSH
43442: EMPTY
43443: ST_TO_ADDR
// temp_list = [ ] ;
43444: LD_ADDR_VAR 0 9
43448: PUSH
43449: EMPTY
43450: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43451: LD_VAR 0 4
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: LD_INT 2
43464: PUSH
43465: LD_INT 3
43467: PUSH
43468: LD_INT 4
43470: PUSH
43471: LD_INT 5
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: IN
43482: NOT
43483: PUSH
43484: LD_VAR 0 1
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: IN
43499: PUSH
43500: LD_VAR 0 5
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: LD_INT 2
43510: PUSH
43511: LD_INT 3
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: LIST
43518: IN
43519: NOT
43520: AND
43521: OR
43522: IFFALSE 43526
// exit ;
43524: GO 61917
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43526: LD_VAR 0 1
43530: PUSH
43531: LD_INT 6
43533: PUSH
43534: LD_INT 7
43536: PUSH
43537: LD_INT 8
43539: PUSH
43540: LD_INT 13
43542: PUSH
43543: LD_INT 12
43545: PUSH
43546: LD_INT 15
43548: PUSH
43549: LD_INT 11
43551: PUSH
43552: LD_INT 14
43554: PUSH
43555: LD_INT 10
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: IN
43569: IFFALSE 43579
// btype = b_lab ;
43571: LD_ADDR_VAR 0 1
43575: PUSH
43576: LD_INT 6
43578: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43579: LD_VAR 0 6
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: LD_INT 2
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: LIST
43597: IN
43598: NOT
43599: PUSH
43600: LD_VAR 0 1
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: LD_INT 3
43616: PUSH
43617: LD_INT 6
43619: PUSH
43620: LD_INT 36
43622: PUSH
43623: LD_INT 4
43625: PUSH
43626: LD_INT 5
43628: PUSH
43629: LD_INT 31
43631: PUSH
43632: LD_INT 32
43634: PUSH
43635: LD_INT 33
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: IN
43651: NOT
43652: PUSH
43653: LD_VAR 0 6
43657: PUSH
43658: LD_INT 1
43660: EQUAL
43661: AND
43662: OR
43663: PUSH
43664: LD_VAR 0 1
43668: PUSH
43669: LD_INT 2
43671: PUSH
43672: LD_INT 3
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: IN
43679: NOT
43680: PUSH
43681: LD_VAR 0 6
43685: PUSH
43686: LD_INT 2
43688: EQUAL
43689: AND
43690: OR
43691: IFFALSE 43701
// mode = 0 ;
43693: LD_ADDR_VAR 0 6
43697: PUSH
43698: LD_INT 0
43700: ST_TO_ADDR
// case mode of 0 :
43701: LD_VAR 0 6
43705: PUSH
43706: LD_INT 0
43708: DOUBLE
43709: EQUAL
43710: IFTRUE 43714
43712: GO 55167
43714: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43715: LD_ADDR_VAR 0 11
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: LD_INT 2
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 2
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: LD_INT 2
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: LD_INT 3
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: LD_INT 3
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43908: LD_ADDR_VAR 0 12
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: NEG
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 2
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 2
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: NEG
44032: PUSH
44033: LD_INT 0
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 2
44042: NEG
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 2
44054: NEG
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 3
44065: NEG
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 3
44076: NEG
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44104: LD_ADDR_VAR 0 13
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: LD_INT 2
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 2
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: LD_INT 2
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 2
44227: NEG
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 2
44239: NEG
44240: PUSH
44241: LD_INT 2
44243: NEG
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 2
44251: NEG
44252: PUSH
44253: LD_INT 3
44255: NEG
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 3
44263: NEG
44264: PUSH
44265: LD_INT 2
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 3
44275: NEG
44276: PUSH
44277: LD_INT 3
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44303: LD_ADDR_VAR 0 14
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: LD_INT 2
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: LD_INT 2
44399: NEG
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 2
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 3
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: LD_INT 3
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: LD_INT 2
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44499: LD_ADDR_VAR 0 15
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: LD_INT 1
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 1
44557: NEG
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 2
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 2
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 2
44622: NEG
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 2
44633: NEG
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 3
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 3
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44692: LD_ADDR_VAR 0 16
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: LD_INT 1
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: LD_INT 0
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 1
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 1
44750: NEG
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: PUSH
44775: LD_INT 2
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 2
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 2
44795: PUSH
44796: LD_INT 2
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: LD_INT 2
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: NEG
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 2
44827: NEG
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 3
44839: PUSH
44840: LD_INT 2
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 3
44849: PUSH
44850: LD_INT 3
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 2
44859: PUSH
44860: LD_INT 3
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44885: LD_ADDR_VAR 0 17
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: LD_INT 2
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 2
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: LD_INT 2
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: LD_INT 2
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 2
45084: NEG
45085: PUSH
45086: LD_INT 2
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45115: LD_ADDR_VAR 0 18
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: LD_INT 1
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: LD_INT 2
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 2
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 2
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: PUSH
45251: LD_INT 2
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: LD_INT 2
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: LD_INT 2
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: LD_INT 1
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: LD_INT 2
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45345: LD_ADDR_VAR 0 19
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: LD_INT 2
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 2
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: NEG
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: LD_INT 1
45536: NEG
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: NEG
45545: PUSH
45546: LD_INT 2
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45575: LD_ADDR_VAR 0 20
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: NEG
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: LD_INT 2
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: LD_INT 2
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 2
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 2
45710: PUSH
45711: LD_INT 2
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: LD_INT 2
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: LD_INT 2
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 2
45751: NEG
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 2
45762: NEG
45763: PUSH
45764: LD_INT 1
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 2
45774: NEG
45775: PUSH
45776: LD_INT 2
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45805: LD_ADDR_VAR 0 21
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: LD_INT 2
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: LD_INT 2
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 2
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: LD_INT 2
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 1
45970: NEG
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 2
45992: NEG
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 2
46004: NEG
46005: PUSH
46006: LD_INT 2
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46035: LD_ADDR_VAR 0 22
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: LD_INT 1
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: LD_INT 2
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 2
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 2
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 2
46170: PUSH
46171: LD_INT 2
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: PUSH
46181: LD_INT 2
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: LD_INT 2
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 2
46211: NEG
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 2
46222: NEG
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 2
46234: NEG
46235: PUSH
46236: LD_INT 2
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46265: LD_ADDR_VAR 0 23
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: LD_INT 2
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: LD_INT 2
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 2
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 2
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: LD_INT 2
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 2
46441: NEG
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 2
46452: NEG
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 2
46464: NEG
46465: PUSH
46466: LD_INT 2
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 2
46476: NEG
46477: PUSH
46478: LD_INT 3
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: LD_INT 3
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: LD_INT 2
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 2
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46545: LD_ADDR_VAR 0 24
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: LD_INT 2
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: LD_INT 2
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 2
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 3
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 3
46788: PUSH
46789: LD_INT 2
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46821: LD_ADDR_VAR 0 25
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: LD_INT 2
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 2
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 2
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: LD_INT 2
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: NEG
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 2
47008: NEG
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: LD_INT 2
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 3
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 3
47042: PUSH
47043: LD_INT 2
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: PUSH
47053: LD_INT 3
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: LD_INT 3
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47095: LD_ADDR_VAR 0 26
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: LD_INT 2
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: LD_INT 2
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 2
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 2
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: LD_INT 2
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: NEG
47283: PUSH
47284: LD_INT 1
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: PUSH
47307: LD_INT 3
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 3
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 2
47337: NEG
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47371: LD_ADDR_VAR 0 27
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: LD_INT 2
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: LD_INT 2
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 2
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 2
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 2
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: LD_INT 2
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 2
47547: NEG
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 2
47558: NEG
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 2
47570: NEG
47571: PUSH
47572: LD_INT 2
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 2
47593: NEG
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 3
47604: NEG
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 3
47616: NEG
47617: PUSH
47618: LD_INT 2
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47651: LD_ADDR_VAR 0 28
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: LD_INT 1
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: LD_INT 2
47736: NEG
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: LD_INT 2
47747: NEG
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 2
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 2
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 2
47786: PUSH
47787: LD_INT 2
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: LD_INT 2
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: LD_INT 2
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 1
47816: NEG
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 2
47827: NEG
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 2
47838: NEG
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: LD_INT 2
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 2
47862: NEG
47863: PUSH
47864: LD_INT 3
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 3
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 3
47886: NEG
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 3
47898: NEG
47899: PUSH
47900: LD_INT 2
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47933: LD_ADDR_VAR 0 29
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: LD_INT 2
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: LD_INT 2
48029: NEG
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: NEG
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 2
48123: NEG
48124: PUSH
48125: LD_INT 3
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 3
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: LD_INT 3
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: LD_INT 2
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 3
48177: NEG
48178: PUSH
48179: LD_INT 2
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48212: LD_ADDR_VAR 0 30
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: LD_INT 2
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: LD_INT 2
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 2
48347: PUSH
48348: LD_INT 2
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 2
48378: NEG
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 2
48389: NEG
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: LD_INT 3
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: LD_INT 2
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 3
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 2
48434: PUSH
48435: LD_INT 3
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 3
48455: NEG
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48490: LD_ADDR_VAR 0 31
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 2
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 0
48634: PUSH
48635: LD_INT 2
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: NEG
48668: PUSH
48669: LD_INT 2
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 2
48679: NEG
48680: PUSH
48681: LD_INT 3
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 3
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: LD_INT 3
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 3
48733: NEG
48734: PUSH
48735: LD_INT 2
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48768: LD_ADDR_VAR 0 32
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: NEG
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: LD_INT 2
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: LD_INT 2
48864: NEG
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 2
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: LD_INT 2
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: LD_INT 2
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 2
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 2
48934: NEG
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 2
48945: NEG
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: LD_INT 3
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 3
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 2
48990: PUSH
48991: LD_INT 3
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 3
49011: NEG
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49046: LD_ADDR_VAR 0 33
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: NEG
49128: PUSH
49129: LD_INT 2
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 2
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 2
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: LD_INT 2
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: LD_INT 2
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: NEG
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: NEG
49225: PUSH
49226: LD_INT 2
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 2
49236: NEG
49237: PUSH
49238: LD_INT 3
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 2
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 3
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: LD_INT 3
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: LD_INT 2
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 3
49290: NEG
49291: PUSH
49292: LD_INT 2
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49325: LD_ADDR_VAR 0 34
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 2
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: NEG
49505: PUSH
49506: LD_INT 2
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: LD_INT 3
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: LD_INT 2
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 3
49539: PUSH
49540: LD_INT 2
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 2
49549: PUSH
49550: LD_INT 3
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 3
49570: NEG
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49605: LD_ADDR_VAR 0 35
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 2
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49717: LD_ADDR_VAR 0 36
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: LD_INT 2
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49829: LD_ADDR_VAR 0 37
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49941: LD_ADDR_VAR 0 38
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 2
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: NEG
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50053: LD_ADDR_VAR 0 39
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: LD_INT 2
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50165: LD_ADDR_VAR 0 40
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: NEG
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50277: LD_ADDR_VAR 0 41
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: LD_INT 2
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 2
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 2
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: LD_INT 2
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 2
50432: NEG
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 2
50443: NEG
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 2
50455: NEG
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 2
50467: NEG
50468: PUSH
50469: LD_INT 3
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 2
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 3
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 3
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 3
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 3
50520: PUSH
50521: LD_INT 3
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 2
50530: PUSH
50531: LD_INT 3
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 2
50540: NEG
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 3
50551: NEG
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 3
50562: NEG
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 3
50574: NEG
50575: PUSH
50576: LD_INT 2
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 3
50586: NEG
50587: PUSH
50588: LD_INT 3
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50627: LD_ADDR_VAR 0 42
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: NEG
50709: PUSH
50710: LD_INT 2
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: LD_INT 2
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: LD_INT 2
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 2
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 2
50805: NEG
50806: PUSH
50807: LD_INT 2
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: LD_INT 3
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: LD_INT 3
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 3
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: LD_INT 2
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 3
50863: PUSH
50864: LD_INT 2
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 3
50873: PUSH
50874: LD_INT 3
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: PUSH
50884: LD_INT 3
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: LD_INT 3
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: LD_INT 3
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: LD_INT 2
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 3
50924: NEG
50925: PUSH
50926: LD_INT 2
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 3
50936: NEG
50937: PUSH
50938: LD_INT 3
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50977: LD_ADDR_VAR 0 43
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: LD_INT 2
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: LD_INT 1
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 2
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 2
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: LD_INT 2
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: LD_INT 2
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 2
51143: NEG
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 2
51154: NEG
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: LD_INT 3
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 3
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: LD_INT 2
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 3
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 3
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: LD_INT 3
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 3
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 3
51273: NEG
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 3
51284: NEG
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51325: LD_ADDR_VAR 0 44
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: LD_INT 2
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 2
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 2
51449: PUSH
51450: LD_INT 2
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 2
51480: NEG
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 2
51491: NEG
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 2
51503: NEG
51504: PUSH
51505: LD_INT 2
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: LD_INT 3
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 2
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 3
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 3
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 3
51558: PUSH
51559: LD_INT 2
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 3
51568: PUSH
51569: LD_INT 3
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: LD_INT 3
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 2
51588: NEG
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 3
51599: NEG
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 3
51610: NEG
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 3
51622: NEG
51623: PUSH
51624: LD_INT 2
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 3
51634: NEG
51635: PUSH
51636: LD_INT 3
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51675: LD_ADDR_VAR 0 45
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: LD_INT 1
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: LD_INT 1
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: LD_INT 2
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 2
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: LD_INT 1
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 2
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 2
51800: PUSH
51801: LD_INT 2
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 2
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 2
51841: NEG
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 2
51865: NEG
51866: PUSH
51867: LD_INT 3
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: LD_INT 3
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: LD_INT 3
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: LD_INT 2
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 3
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 3
51921: PUSH
51922: LD_INT 3
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: LD_INT 3
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: LD_INT 3
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 3
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: LD_INT 2
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 3
51972: NEG
51973: PUSH
51974: LD_INT 2
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 3
51984: NEG
51985: PUSH
51986: LD_INT 3
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52025: LD_ADDR_VAR 0 46
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 1
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: LD_INT 2
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: LD_INT 1
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 2
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: LD_INT 2
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: NEG
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: LD_INT 3
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 3
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: LD_INT 2
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 3
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 3
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: LD_INT 3
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: LD_INT 3
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 1
52299: NEG
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 2
52310: NEG
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 3
52321: NEG
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 3
52332: NEG
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52373: LD_ADDR_VAR 0 47
52377: PUSH
52378: LD_INT 0
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: LD_INT 2
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 2
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 2
52488: NEG
52489: PUSH
52490: LD_INT 1
52492: NEG
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: LD_INT 2
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52524: LD_ADDR_VAR 0 48
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: LD_INT 2
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: LD_INT 2
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 2
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 2
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52671: LD_ADDR_VAR 0 49
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 2
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 2
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 2
52783: PUSH
52784: LD_INT 2
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: LD_INT 2
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52815: LD_ADDR_VAR 0 50
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: LD_INT 1
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52959: LD_ADDR_VAR 0 51
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 1
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: LD_INT 2
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 2
53071: NEG
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 2
53082: NEG
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53106: LD_ADDR_VAR 0 52
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 1
53164: NEG
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: LD_INT 2
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 2
53210: NEG
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 2
53221: NEG
53222: PUSH
53223: LD_INT 1
53225: NEG
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 2
53233: NEG
53234: PUSH
53235: LD_INT 2
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53257: LD_ADDR_VAR 0 53
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 2
53433: NEG
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53487: LD_ADDR_VAR 0 54
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 2
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: LD_INT 2
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: LD_INT 2
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 2
53686: NEG
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53717: LD_ADDR_VAR 0 55
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 1
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: NEG
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: LD_INT 2
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 2
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 2
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: LD_INT 2
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: LD_INT 2
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: LD_INT 2
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: NEG
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: NEG
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 2
53916: NEG
53917: PUSH
53918: LD_INT 2
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53947: LD_ADDR_VAR 0 56
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: LD_INT 2
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 2
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: NEG
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 2
54134: NEG
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 2
54146: NEG
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54177: LD_ADDR_VAR 0 57
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: LD_INT 2
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: LD_INT 2
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 2
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 2
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: LD_INT 2
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: LD_INT 2
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: LD_INT 2
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: NEG
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 2
54364: NEG
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 2
54376: NEG
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54407: LD_ADDR_VAR 0 58
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 2
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 2
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: LD_INT 2
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 2
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: NEG
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: LD_INT 2
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54637: LD_ADDR_VAR 0 59
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54725: LD_ADDR_VAR 0 60
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: NEG
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54813: LD_ADDR_VAR 0 61
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54901: LD_ADDR_VAR 0 62
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54989: LD_ADDR_VAR 0 63
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: LD_INT 0
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55077: LD_ADDR_VAR 0 64
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: ST_TO_ADDR
// end ; 1 :
55165: GO 61062
55167: LD_INT 1
55169: DOUBLE
55170: EQUAL
55171: IFTRUE 55175
55173: GO 57798
55175: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55176: LD_ADDR_VAR 0 11
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: LD_INT 3
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: LD_INT 3
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: LD_INT 2
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: LIST
55219: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55220: LD_ADDR_VAR 0 12
55224: PUSH
55225: LD_INT 2
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 3
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 3
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: LIST
55260: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55261: LD_ADDR_VAR 0 13
55265: PUSH
55266: LD_INT 3
55268: PUSH
55269: LD_INT 2
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 3
55278: PUSH
55279: LD_INT 3
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: LD_INT 3
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: LIST
55300: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55301: LD_ADDR_VAR 0 14
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: LD_INT 3
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: LD_INT 3
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: LD_INT 2
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: LIST
55341: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55342: LD_ADDR_VAR 0 15
55346: PUSH
55347: LD_INT 2
55349: NEG
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 3
55360: NEG
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 3
55371: NEG
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: LIST
55385: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55386: LD_ADDR_VAR 0 16
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: LD_INT 3
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 3
55405: NEG
55406: PUSH
55407: LD_INT 2
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 3
55417: NEG
55418: PUSH
55419: LD_INT 3
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: LIST
55431: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55432: LD_ADDR_VAR 0 17
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: LD_INT 3
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: LD_INT 3
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: LD_INT 2
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: LIST
55475: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55476: LD_ADDR_VAR 0 18
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 3
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 3
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: LIST
55516: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55517: LD_ADDR_VAR 0 19
55521: PUSH
55522: LD_INT 3
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 3
55534: PUSH
55535: LD_INT 3
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 2
55544: PUSH
55545: LD_INT 3
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: LIST
55556: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55557: LD_ADDR_VAR 0 20
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: LD_INT 3
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: LD_INT 3
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: LD_INT 2
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: LIST
55597: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55598: LD_ADDR_VAR 0 21
55602: PUSH
55603: LD_INT 2
55605: NEG
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 3
55616: NEG
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 3
55627: NEG
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: LIST
55641: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55642: LD_ADDR_VAR 0 22
55646: PUSH
55647: LD_INT 2
55649: NEG
55650: PUSH
55651: LD_INT 3
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 3
55661: NEG
55662: PUSH
55663: LD_INT 2
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 3
55673: NEG
55674: PUSH
55675: LD_INT 3
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: LIST
55687: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55688: LD_ADDR_VAR 0 23
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: LD_INT 3
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: LD_INT 4
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: LD_INT 3
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: LIST
55731: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55732: LD_ADDR_VAR 0 24
55736: PUSH
55737: LD_INT 3
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 3
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 4
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: LIST
55772: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55773: LD_ADDR_VAR 0 25
55777: PUSH
55778: LD_INT 3
55780: PUSH
55781: LD_INT 3
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 4
55790: PUSH
55791: LD_INT 3
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 3
55800: PUSH
55801: LD_INT 4
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: LIST
55812: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55813: LD_ADDR_VAR 0 26
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: LD_INT 3
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 4
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: LD_INT 3
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: LIST
55853: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55854: LD_ADDR_VAR 0 27
55858: PUSH
55859: LD_INT 3
55861: NEG
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 3
55872: NEG
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 4
55883: NEG
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: LIST
55897: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55898: LD_ADDR_VAR 0 28
55902: PUSH
55903: LD_INT 3
55905: NEG
55906: PUSH
55907: LD_INT 3
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 3
55917: NEG
55918: PUSH
55919: LD_INT 4
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 4
55929: NEG
55930: PUSH
55931: LD_INT 3
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: LIST
55943: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55944: LD_ADDR_VAR 0 29
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: LD_INT 3
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 3
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: LD_INT 2
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: LD_INT 4
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 4
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: LD_INT 3
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: LD_INT 5
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 5
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: LD_INT 4
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: LD_INT 6
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: LD_INT 6
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: LD_INT 5
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56099: LD_ADDR_VAR 0 30
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 3
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 3
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 3
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 4
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 4
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 4
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 5
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 5
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 5
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 6
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 6
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56242: LD_ADDR_VAR 0 31
56246: PUSH
56247: LD_INT 3
56249: PUSH
56250: LD_INT 2
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 3
56259: PUSH
56260: LD_INT 3
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: LD_INT 3
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 4
56279: PUSH
56280: LD_INT 3
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 4
56289: PUSH
56290: LD_INT 4
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 3
56299: PUSH
56300: LD_INT 4
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 5
56309: PUSH
56310: LD_INT 4
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 5
56319: PUSH
56320: LD_INT 5
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 4
56329: PUSH
56330: LD_INT 5
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 6
56339: PUSH
56340: LD_INT 5
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 6
56349: PUSH
56350: LD_INT 6
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 5
56359: PUSH
56360: LD_INT 6
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56381: LD_ADDR_VAR 0 32
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: LD_INT 3
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: LD_INT 3
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: LD_INT 4
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: LD_INT 4
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: LD_INT 3
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: LD_INT 5
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 5
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: LD_INT 4
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: LD_INT 6
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: LD_INT 6
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: LD_INT 5
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56524: LD_ADDR_VAR 0 33
56528: PUSH
56529: LD_INT 2
56531: NEG
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 3
56542: NEG
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 3
56553: NEG
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 3
56565: NEG
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 4
56576: NEG
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 4
56587: NEG
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 4
56599: NEG
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 5
56610: NEG
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 5
56621: NEG
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 5
56633: NEG
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 6
56644: NEG
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 6
56655: NEG
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56679: LD_ADDR_VAR 0 34
56683: PUSH
56684: LD_INT 2
56686: NEG
56687: PUSH
56688: LD_INT 3
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 3
56698: NEG
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 3
56710: NEG
56711: PUSH
56712: LD_INT 3
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 3
56722: NEG
56723: PUSH
56724: LD_INT 4
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 4
56734: NEG
56735: PUSH
56736: LD_INT 3
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 4
56746: NEG
56747: PUSH
56748: LD_INT 4
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 4
56758: NEG
56759: PUSH
56760: LD_INT 5
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 5
56770: NEG
56771: PUSH
56772: LD_INT 4
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 5
56782: NEG
56783: PUSH
56784: LD_INT 5
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 5
56794: NEG
56795: PUSH
56796: LD_INT 6
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 6
56806: NEG
56807: PUSH
56808: LD_INT 5
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 6
56818: NEG
56819: PUSH
56820: LD_INT 6
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56842: LD_ADDR_VAR 0 41
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: LD_INT 3
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: LIST
56885: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56886: LD_ADDR_VAR 0 42
56890: PUSH
56891: LD_INT 2
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 2
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 3
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: LIST
56926: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56927: LD_ADDR_VAR 0 43
56931: PUSH
56932: LD_INT 2
56934: PUSH
56935: LD_INT 2
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 3
56944: PUSH
56945: LD_INT 2
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 2
56954: PUSH
56955: LD_INT 3
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: LIST
56966: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56967: LD_ADDR_VAR 0 44
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: LD_INT 2
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: LD_INT 3
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 1
56994: NEG
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: LIST
57007: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57008: LD_ADDR_VAR 0 45
57012: PUSH
57013: LD_INT 2
57015: NEG
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 2
57026: NEG
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 3
57037: NEG
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: LIST
57051: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57052: LD_ADDR_VAR 0 46
57056: PUSH
57057: LD_INT 2
57059: NEG
57060: PUSH
57061: LD_INT 2
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 2
57071: NEG
57072: PUSH
57073: LD_INT 3
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 3
57083: NEG
57084: PUSH
57085: LD_INT 2
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: LIST
57097: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57098: LD_ADDR_VAR 0 47
57102: PUSH
57103: LD_INT 2
57105: NEG
57106: PUSH
57107: LD_INT 3
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: LD_INT 3
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57131: LD_ADDR_VAR 0 48
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: LD_INT 2
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 2
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57162: LD_ADDR_VAR 0 49
57166: PUSH
57167: LD_INT 3
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 3
57179: PUSH
57180: LD_INT 2
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57191: LD_ADDR_VAR 0 50
57195: PUSH
57196: LD_INT 2
57198: PUSH
57199: LD_INT 3
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: LD_INT 3
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57220: LD_ADDR_VAR 0 51
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57251: LD_ADDR_VAR 0 52
57255: PUSH
57256: LD_INT 3
57258: NEG
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 3
57270: NEG
57271: PUSH
57272: LD_INT 2
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57284: LD_ADDR_VAR 0 53
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: LD_INT 3
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: LD_INT 3
57306: NEG
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: PUSH
57315: LD_INT 2
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: LIST
57327: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57328: LD_ADDR_VAR 0 54
57332: PUSH
57333: LD_INT 2
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 3
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 3
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: LIST
57368: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57369: LD_ADDR_VAR 0 55
57373: PUSH
57374: LD_INT 3
57376: PUSH
57377: LD_INT 2
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 3
57386: PUSH
57387: LD_INT 3
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: PUSH
57397: LD_INT 3
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: LIST
57408: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57409: LD_ADDR_VAR 0 56
57413: PUSH
57414: LD_INT 1
57416: PUSH
57417: LD_INT 3
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: LD_INT 3
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: LD_INT 2
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: LIST
57449: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57450: LD_ADDR_VAR 0 57
57454: PUSH
57455: LD_INT 2
57457: NEG
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 3
57468: NEG
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 3
57479: NEG
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: LIST
57493: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57494: LD_ADDR_VAR 0 58
57498: PUSH
57499: LD_INT 2
57501: NEG
57502: PUSH
57503: LD_INT 3
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 3
57513: NEG
57514: PUSH
57515: LD_INT 2
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 3
57525: NEG
57526: PUSH
57527: LD_INT 3
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: LIST
57539: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57540: LD_ADDR_VAR 0 59
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: LD_INT 2
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: LIST
57583: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57584: LD_ADDR_VAR 0 60
57588: PUSH
57589: LD_INT 1
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 2
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 2
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: LIST
57624: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57625: LD_ADDR_VAR 0 61
57629: PUSH
57630: LD_INT 2
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: LD_INT 2
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: LD_INT 2
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: LIST
57664: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57665: LD_ADDR_VAR 0 62
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: LIST
57705: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57706: LD_ADDR_VAR 0 63
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: LD_INT 1
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 2
57724: NEG
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 2
57735: NEG
57736: PUSH
57737: LD_INT 1
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: LIST
57749: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57750: LD_ADDR_VAR 0 64
57754: PUSH
57755: LD_INT 1
57757: NEG
57758: PUSH
57759: LD_INT 2
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 2
57769: NEG
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 2
57781: NEG
57782: PUSH
57783: LD_INT 2
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: LIST
57795: ST_TO_ADDR
// end ; 2 :
57796: GO 61062
57798: LD_INT 2
57800: DOUBLE
57801: EQUAL
57802: IFTRUE 57806
57804: GO 61061
57806: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57807: LD_ADDR_VAR 0 29
57811: PUSH
57812: LD_INT 4
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 4
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 5
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 5
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 4
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 3
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 3
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 3
57886: PUSH
57887: LD_INT 2
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 5
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 3
57907: PUSH
57908: LD_INT 3
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 3
57917: PUSH
57918: LD_INT 2
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 4
57927: PUSH
57928: LD_INT 3
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 4
57937: PUSH
57938: LD_INT 4
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 3
57947: PUSH
57948: LD_INT 4
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 2
57957: PUSH
57958: LD_INT 3
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 2
57967: PUSH
57968: LD_INT 2
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 4
57977: PUSH
57978: LD_INT 2
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 2
57987: PUSH
57988: LD_INT 4
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: LD_INT 4
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: LD_INT 3
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: LD_INT 4
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 5
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: LD_INT 5
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: LD_INT 4
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: LD_INT 3
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 2
58069: PUSH
58070: LD_INT 5
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: LD_INT 3
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 3
58090: NEG
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 3
58101: NEG
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 2
58113: NEG
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 2
58124: NEG
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 3
58135: NEG
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 4
58146: NEG
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 4
58157: NEG
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 4
58169: NEG
58170: PUSH
58171: LD_INT 2
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: LD_INT 2
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 4
58192: NEG
58193: PUSH
58194: LD_INT 4
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 4
58204: NEG
58205: PUSH
58206: LD_INT 5
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 3
58216: NEG
58217: PUSH
58218: LD_INT 4
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 3
58228: NEG
58229: PUSH
58230: LD_INT 3
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 4
58240: NEG
58241: PUSH
58242: LD_INT 3
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 5
58252: NEG
58253: PUSH
58254: LD_INT 4
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 5
58264: NEG
58265: PUSH
58266: LD_INT 5
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 3
58276: NEG
58277: PUSH
58278: LD_INT 5
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 5
58288: NEG
58289: PUSH
58290: LD_INT 3
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58345: LD_ADDR_VAR 0 30
58349: PUSH
58350: LD_INT 4
58352: PUSH
58353: LD_INT 4
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 4
58362: PUSH
58363: LD_INT 3
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 5
58372: PUSH
58373: LD_INT 4
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 5
58382: PUSH
58383: LD_INT 5
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 4
58392: PUSH
58393: LD_INT 5
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 3
58402: PUSH
58403: LD_INT 4
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 3
58412: PUSH
58413: LD_INT 3
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 5
58422: PUSH
58423: LD_INT 3
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 3
58432: PUSH
58433: LD_INT 5
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: LD_INT 3
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: LD_INT 2
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: LD_INT 3
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: LD_INT 4
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 4
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: LD_INT 3
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: LD_INT 2
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 2
58514: PUSH
58515: LD_INT 4
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 2
58524: NEG
58525: PUSH
58526: LD_INT 2
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 4
58535: NEG
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 4
58546: NEG
58547: PUSH
58548: LD_INT 1
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 3
58558: NEG
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 4
58580: NEG
58581: PUSH
58582: LD_INT 1
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 5
58591: NEG
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 5
58602: NEG
58603: PUSH
58604: LD_INT 1
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 5
58614: NEG
58615: PUSH
58616: LD_INT 2
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 3
58626: NEG
58627: PUSH
58628: LD_INT 2
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 3
58637: NEG
58638: PUSH
58639: LD_INT 3
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 3
58649: NEG
58650: PUSH
58651: LD_INT 4
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 2
58661: NEG
58662: PUSH
58663: LD_INT 3
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 2
58673: NEG
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 3
58685: NEG
58686: PUSH
58687: LD_INT 2
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 4
58697: NEG
58698: PUSH
58699: LD_INT 3
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 4
58709: NEG
58710: PUSH
58711: LD_INT 4
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: LD_INT 4
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 4
58733: NEG
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: LD_INT 4
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 0
58756: PUSH
58757: LD_INT 5
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: LD_INT 4
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: LD_INT 3
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: LD_INT 3
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: LD_INT 4
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: LD_INT 5
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: LD_INT 3
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 2
58835: NEG
58836: PUSH
58837: LD_INT 5
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58892: LD_ADDR_VAR 0 31
58896: PUSH
58897: LD_INT 0
58899: PUSH
58900: LD_INT 4
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 0
58909: PUSH
58910: LD_INT 3
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: LD_INT 4
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: LD_INT 5
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: LD_INT 5
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: LD_INT 4
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: LD_INT 3
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 2
58971: PUSH
58972: LD_INT 5
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 2
58981: NEG
58982: PUSH
58983: LD_INT 3
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 3
58992: NEG
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 3
59003: NEG
59004: PUSH
59005: LD_INT 1
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 2
59015: NEG
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 2
59026: NEG
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 3
59037: NEG
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 4
59048: NEG
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 4
59059: NEG
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 4
59071: NEG
59072: PUSH
59073: LD_INT 2
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 2
59083: NEG
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 4
59094: NEG
59095: PUSH
59096: LD_INT 4
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 4
59106: NEG
59107: PUSH
59108: LD_INT 5
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 3
59118: NEG
59119: PUSH
59120: LD_INT 4
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 3
59130: NEG
59131: PUSH
59132: LD_INT 3
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 4
59142: NEG
59143: PUSH
59144: LD_INT 3
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 5
59154: NEG
59155: PUSH
59156: LD_INT 4
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 5
59166: NEG
59167: PUSH
59168: LD_INT 5
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 3
59178: NEG
59179: PUSH
59180: LD_INT 5
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 5
59190: NEG
59191: PUSH
59192: LD_INT 3
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: LD_INT 3
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: LD_INT 4
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 1
59224: PUSH
59225: LD_INT 3
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: LD_INT 2
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 0
59246: PUSH
59247: LD_INT 2
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: LD_INT 3
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 1
59269: NEG
59270: PUSH
59271: LD_INT 4
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 2
59281: PUSH
59282: LD_INT 2
59284: NEG
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 2
59292: NEG
59293: PUSH
59294: LD_INT 4
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 4
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 4
59314: PUSH
59315: LD_INT 1
59317: NEG
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 5
59325: PUSH
59326: LD_INT 0
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 5
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 4
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 3
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 3
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 3
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 5
59387: PUSH
59388: LD_INT 2
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59442: LD_ADDR_VAR 0 32
59446: PUSH
59447: LD_INT 4
59449: NEG
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 4
59460: NEG
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 3
59472: NEG
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 3
59483: NEG
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 4
59494: NEG
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 5
59505: NEG
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 5
59516: NEG
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 5
59528: NEG
59529: PUSH
59530: LD_INT 2
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 3
59540: NEG
59541: PUSH
59542: LD_INT 2
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 3
59551: NEG
59552: PUSH
59553: LD_INT 3
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 3
59563: NEG
59564: PUSH
59565: LD_INT 4
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 2
59575: NEG
59576: PUSH
59577: LD_INT 3
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 2
59587: NEG
59588: PUSH
59589: LD_INT 2
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 3
59599: NEG
59600: PUSH
59601: LD_INT 2
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 4
59611: NEG
59612: PUSH
59613: LD_INT 3
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 4
59623: NEG
59624: PUSH
59625: LD_INT 4
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 2
59635: NEG
59636: PUSH
59637: LD_INT 4
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 4
59647: NEG
59648: PUSH
59649: LD_INT 2
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: LD_INT 4
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: LD_INT 5
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: LD_INT 4
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: LD_INT 3
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: LD_INT 3
59706: NEG
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 1
59714: NEG
59715: PUSH
59716: LD_INT 4
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 1
59726: NEG
59727: PUSH
59728: LD_INT 5
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 2
59738: PUSH
59739: LD_INT 3
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 2
59749: NEG
59750: PUSH
59751: LD_INT 5
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 3
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 3
59771: PUSH
59772: LD_INT 1
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 4
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 4
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 3
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 2
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 2
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 2
59833: PUSH
59834: LD_INT 2
59836: NEG
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 4
59844: PUSH
59845: LD_INT 2
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 4
59854: PUSH
59855: LD_INT 4
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 4
59864: PUSH
59865: LD_INT 3
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 5
59874: PUSH
59875: LD_INT 4
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 5
59884: PUSH
59885: LD_INT 5
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 4
59894: PUSH
59895: LD_INT 5
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 3
59904: PUSH
59905: LD_INT 4
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 3
59914: PUSH
59915: LD_INT 3
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 5
59924: PUSH
59925: LD_INT 3
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 3
59934: PUSH
59935: LD_INT 5
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59989: LD_ADDR_VAR 0 33
59993: PUSH
59994: LD_INT 4
59996: NEG
59997: PUSH
59998: LD_INT 4
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 4
60008: NEG
60009: PUSH
60010: LD_INT 5
60012: NEG
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 3
60020: NEG
60021: PUSH
60022: LD_INT 4
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 3
60032: NEG
60033: PUSH
60034: LD_INT 3
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 4
60044: NEG
60045: PUSH
60046: LD_INT 3
60048: NEG
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 5
60056: NEG
60057: PUSH
60058: LD_INT 4
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 5
60068: NEG
60069: PUSH
60070: LD_INT 5
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 3
60080: NEG
60081: PUSH
60082: LD_INT 5
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 5
60092: NEG
60093: PUSH
60094: LD_INT 3
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: LD_INT 3
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: LD_INT 4
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: LD_INT 3
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: LD_INT 2
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: LD_INT 2
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 1
60159: NEG
60160: PUSH
60161: LD_INT 3
60163: NEG
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: LD_INT 4
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 2
60183: PUSH
60184: LD_INT 2
60186: NEG
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 2
60194: NEG
60195: PUSH
60196: LD_INT 4
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 4
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 4
60216: PUSH
60217: LD_INT 1
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 5
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 5
60237: PUSH
60238: LD_INT 1
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 4
60247: PUSH
60248: LD_INT 1
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 3
60257: PUSH
60258: LD_INT 0
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 3
60267: PUSH
60268: LD_INT 1
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 3
60278: PUSH
60279: LD_INT 2
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 5
60289: PUSH
60290: LD_INT 2
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 3
60299: PUSH
60300: LD_INT 3
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 3
60309: PUSH
60310: LD_INT 2
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 4
60319: PUSH
60320: LD_INT 3
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 4
60329: PUSH
60330: LD_INT 4
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 3
60339: PUSH
60340: LD_INT 4
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 2
60349: PUSH
60350: LD_INT 3
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 2
60359: PUSH
60360: LD_INT 2
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 4
60369: PUSH
60370: LD_INT 2
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 2
60379: PUSH
60380: LD_INT 4
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: LD_INT 4
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: LD_INT 3
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: LD_INT 4
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: LD_INT 5
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: LD_INT 5
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: LD_INT 4
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: LD_INT 3
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 2
60461: PUSH
60462: LD_INT 5
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 2
60471: NEG
60472: PUSH
60473: LD_INT 3
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60527: LD_ADDR_VAR 0 34
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: LD_INT 4
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: LD_INT 5
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: LD_INT 4
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: LD_INT 3
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: LD_INT 3
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: NEG
60590: PUSH
60591: LD_INT 4
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: LD_INT 5
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 2
60613: PUSH
60614: LD_INT 3
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 2
60624: NEG
60625: PUSH
60626: LD_INT 5
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 3
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 3
60646: PUSH
60647: LD_INT 1
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 4
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 4
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 3
60677: PUSH
60678: LD_INT 1
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 2
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 2
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 2
60708: PUSH
60709: LD_INT 2
60711: NEG
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 4
60719: PUSH
60720: LD_INT 2
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 4
60729: PUSH
60730: LD_INT 4
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 4
60739: PUSH
60740: LD_INT 3
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 5
60749: PUSH
60750: LD_INT 4
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 5
60759: PUSH
60760: LD_INT 5
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 4
60769: PUSH
60770: LD_INT 5
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 3
60779: PUSH
60780: LD_INT 4
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 3
60789: PUSH
60790: LD_INT 3
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 5
60799: PUSH
60800: LD_INT 3
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 3
60809: PUSH
60810: LD_INT 5
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: LD_INT 3
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: LD_INT 2
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 1
60839: PUSH
60840: LD_INT 3
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 1
60849: PUSH
60850: LD_INT 4
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: LD_INT 4
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: LD_INT 3
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 1
60880: NEG
60881: PUSH
60882: LD_INT 2
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 2
60891: PUSH
60892: LD_INT 4
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 2
60901: NEG
60902: PUSH
60903: LD_INT 2
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 4
60912: NEG
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 4
60923: NEG
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 3
60935: NEG
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 3
60946: NEG
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 4
60957: NEG
60958: PUSH
60959: LD_INT 1
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 5
60968: NEG
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 5
60979: NEG
60980: PUSH
60981: LD_INT 1
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 5
60991: NEG
60992: PUSH
60993: LD_INT 2
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 3
61003: NEG
61004: PUSH
61005: LD_INT 2
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: ST_TO_ADDR
// end ; end ;
61059: GO 61062
61061: POP
// case btype of b_depot , b_warehouse :
61062: LD_VAR 0 1
61066: PUSH
61067: LD_INT 0
61069: DOUBLE
61070: EQUAL
61071: IFTRUE 61081
61073: LD_INT 1
61075: DOUBLE
61076: EQUAL
61077: IFTRUE 61081
61079: GO 61282
61081: POP
// case nation of nation_american :
61082: LD_VAR 0 5
61086: PUSH
61087: LD_INT 1
61089: DOUBLE
61090: EQUAL
61091: IFTRUE 61095
61093: GO 61151
61095: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61096: LD_ADDR_VAR 0 9
61100: PUSH
61101: LD_VAR 0 11
61105: PUSH
61106: LD_VAR 0 12
61110: PUSH
61111: LD_VAR 0 13
61115: PUSH
61116: LD_VAR 0 14
61120: PUSH
61121: LD_VAR 0 15
61125: PUSH
61126: LD_VAR 0 16
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: PUSH
61139: LD_VAR 0 4
61143: PUSH
61144: LD_INT 1
61146: PLUS
61147: ARRAY
61148: ST_TO_ADDR
61149: GO 61280
61151: LD_INT 2
61153: DOUBLE
61154: EQUAL
61155: IFTRUE 61159
61157: GO 61215
61159: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61160: LD_ADDR_VAR 0 9
61164: PUSH
61165: LD_VAR 0 17
61169: PUSH
61170: LD_VAR 0 18
61174: PUSH
61175: LD_VAR 0 19
61179: PUSH
61180: LD_VAR 0 20
61184: PUSH
61185: LD_VAR 0 21
61189: PUSH
61190: LD_VAR 0 22
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: PUSH
61203: LD_VAR 0 4
61207: PUSH
61208: LD_INT 1
61210: PLUS
61211: ARRAY
61212: ST_TO_ADDR
61213: GO 61280
61215: LD_INT 3
61217: DOUBLE
61218: EQUAL
61219: IFTRUE 61223
61221: GO 61279
61223: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61224: LD_ADDR_VAR 0 9
61228: PUSH
61229: LD_VAR 0 23
61233: PUSH
61234: LD_VAR 0 24
61238: PUSH
61239: LD_VAR 0 25
61243: PUSH
61244: LD_VAR 0 26
61248: PUSH
61249: LD_VAR 0 27
61253: PUSH
61254: LD_VAR 0 28
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: PUSH
61267: LD_VAR 0 4
61271: PUSH
61272: LD_INT 1
61274: PLUS
61275: ARRAY
61276: ST_TO_ADDR
61277: GO 61280
61279: POP
61280: GO 61835
61282: LD_INT 2
61284: DOUBLE
61285: EQUAL
61286: IFTRUE 61296
61288: LD_INT 3
61290: DOUBLE
61291: EQUAL
61292: IFTRUE 61296
61294: GO 61352
61296: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61297: LD_ADDR_VAR 0 9
61301: PUSH
61302: LD_VAR 0 29
61306: PUSH
61307: LD_VAR 0 30
61311: PUSH
61312: LD_VAR 0 31
61316: PUSH
61317: LD_VAR 0 32
61321: PUSH
61322: LD_VAR 0 33
61326: PUSH
61327: LD_VAR 0 34
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: PUSH
61340: LD_VAR 0 4
61344: PUSH
61345: LD_INT 1
61347: PLUS
61348: ARRAY
61349: ST_TO_ADDR
61350: GO 61835
61352: LD_INT 16
61354: DOUBLE
61355: EQUAL
61356: IFTRUE 61414
61358: LD_INT 17
61360: DOUBLE
61361: EQUAL
61362: IFTRUE 61414
61364: LD_INT 18
61366: DOUBLE
61367: EQUAL
61368: IFTRUE 61414
61370: LD_INT 19
61372: DOUBLE
61373: EQUAL
61374: IFTRUE 61414
61376: LD_INT 22
61378: DOUBLE
61379: EQUAL
61380: IFTRUE 61414
61382: LD_INT 20
61384: DOUBLE
61385: EQUAL
61386: IFTRUE 61414
61388: LD_INT 21
61390: DOUBLE
61391: EQUAL
61392: IFTRUE 61414
61394: LD_INT 23
61396: DOUBLE
61397: EQUAL
61398: IFTRUE 61414
61400: LD_INT 24
61402: DOUBLE
61403: EQUAL
61404: IFTRUE 61414
61406: LD_INT 25
61408: DOUBLE
61409: EQUAL
61410: IFTRUE 61414
61412: GO 61470
61414: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61415: LD_ADDR_VAR 0 9
61419: PUSH
61420: LD_VAR 0 35
61424: PUSH
61425: LD_VAR 0 36
61429: PUSH
61430: LD_VAR 0 37
61434: PUSH
61435: LD_VAR 0 38
61439: PUSH
61440: LD_VAR 0 39
61444: PUSH
61445: LD_VAR 0 40
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: PUSH
61458: LD_VAR 0 4
61462: PUSH
61463: LD_INT 1
61465: PLUS
61466: ARRAY
61467: ST_TO_ADDR
61468: GO 61835
61470: LD_INT 6
61472: DOUBLE
61473: EQUAL
61474: IFTRUE 61526
61476: LD_INT 7
61478: DOUBLE
61479: EQUAL
61480: IFTRUE 61526
61482: LD_INT 8
61484: DOUBLE
61485: EQUAL
61486: IFTRUE 61526
61488: LD_INT 13
61490: DOUBLE
61491: EQUAL
61492: IFTRUE 61526
61494: LD_INT 12
61496: DOUBLE
61497: EQUAL
61498: IFTRUE 61526
61500: LD_INT 15
61502: DOUBLE
61503: EQUAL
61504: IFTRUE 61526
61506: LD_INT 11
61508: DOUBLE
61509: EQUAL
61510: IFTRUE 61526
61512: LD_INT 14
61514: DOUBLE
61515: EQUAL
61516: IFTRUE 61526
61518: LD_INT 10
61520: DOUBLE
61521: EQUAL
61522: IFTRUE 61526
61524: GO 61582
61526: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61527: LD_ADDR_VAR 0 9
61531: PUSH
61532: LD_VAR 0 41
61536: PUSH
61537: LD_VAR 0 42
61541: PUSH
61542: LD_VAR 0 43
61546: PUSH
61547: LD_VAR 0 44
61551: PUSH
61552: LD_VAR 0 45
61556: PUSH
61557: LD_VAR 0 46
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: PUSH
61570: LD_VAR 0 4
61574: PUSH
61575: LD_INT 1
61577: PLUS
61578: ARRAY
61579: ST_TO_ADDR
61580: GO 61835
61582: LD_INT 36
61584: DOUBLE
61585: EQUAL
61586: IFTRUE 61590
61588: GO 61646
61590: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61591: LD_ADDR_VAR 0 9
61595: PUSH
61596: LD_VAR 0 47
61600: PUSH
61601: LD_VAR 0 48
61605: PUSH
61606: LD_VAR 0 49
61610: PUSH
61611: LD_VAR 0 50
61615: PUSH
61616: LD_VAR 0 51
61620: PUSH
61621: LD_VAR 0 52
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: PUSH
61634: LD_VAR 0 4
61638: PUSH
61639: LD_INT 1
61641: PLUS
61642: ARRAY
61643: ST_TO_ADDR
61644: GO 61835
61646: LD_INT 4
61648: DOUBLE
61649: EQUAL
61650: IFTRUE 61672
61652: LD_INT 5
61654: DOUBLE
61655: EQUAL
61656: IFTRUE 61672
61658: LD_INT 34
61660: DOUBLE
61661: EQUAL
61662: IFTRUE 61672
61664: LD_INT 37
61666: DOUBLE
61667: EQUAL
61668: IFTRUE 61672
61670: GO 61728
61672: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61673: LD_ADDR_VAR 0 9
61677: PUSH
61678: LD_VAR 0 53
61682: PUSH
61683: LD_VAR 0 54
61687: PUSH
61688: LD_VAR 0 55
61692: PUSH
61693: LD_VAR 0 56
61697: PUSH
61698: LD_VAR 0 57
61702: PUSH
61703: LD_VAR 0 58
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: PUSH
61716: LD_VAR 0 4
61720: PUSH
61721: LD_INT 1
61723: PLUS
61724: ARRAY
61725: ST_TO_ADDR
61726: GO 61835
61728: LD_INT 31
61730: DOUBLE
61731: EQUAL
61732: IFTRUE 61778
61734: LD_INT 32
61736: DOUBLE
61737: EQUAL
61738: IFTRUE 61778
61740: LD_INT 33
61742: DOUBLE
61743: EQUAL
61744: IFTRUE 61778
61746: LD_INT 27
61748: DOUBLE
61749: EQUAL
61750: IFTRUE 61778
61752: LD_INT 26
61754: DOUBLE
61755: EQUAL
61756: IFTRUE 61778
61758: LD_INT 28
61760: DOUBLE
61761: EQUAL
61762: IFTRUE 61778
61764: LD_INT 29
61766: DOUBLE
61767: EQUAL
61768: IFTRUE 61778
61770: LD_INT 30
61772: DOUBLE
61773: EQUAL
61774: IFTRUE 61778
61776: GO 61834
61778: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61779: LD_ADDR_VAR 0 9
61783: PUSH
61784: LD_VAR 0 59
61788: PUSH
61789: LD_VAR 0 60
61793: PUSH
61794: LD_VAR 0 61
61798: PUSH
61799: LD_VAR 0 62
61803: PUSH
61804: LD_VAR 0 63
61808: PUSH
61809: LD_VAR 0 64
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: PUSH
61822: LD_VAR 0 4
61826: PUSH
61827: LD_INT 1
61829: PLUS
61830: ARRAY
61831: ST_TO_ADDR
61832: GO 61835
61834: POP
// temp_list2 = [ ] ;
61835: LD_ADDR_VAR 0 10
61839: PUSH
61840: EMPTY
61841: ST_TO_ADDR
// for i in temp_list do
61842: LD_ADDR_VAR 0 8
61846: PUSH
61847: LD_VAR 0 9
61851: PUSH
61852: FOR_IN
61853: IFFALSE 61905
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61855: LD_ADDR_VAR 0 10
61859: PUSH
61860: LD_VAR 0 10
61864: PUSH
61865: LD_VAR 0 8
61869: PUSH
61870: LD_INT 1
61872: ARRAY
61873: PUSH
61874: LD_VAR 0 2
61878: PLUS
61879: PUSH
61880: LD_VAR 0 8
61884: PUSH
61885: LD_INT 2
61887: ARRAY
61888: PUSH
61889: LD_VAR 0 3
61893: PLUS
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: EMPTY
61900: LIST
61901: ADD
61902: ST_TO_ADDR
61903: GO 61852
61905: POP
61906: POP
// result = temp_list2 ;
61907: LD_ADDR_VAR 0 7
61911: PUSH
61912: LD_VAR 0 10
61916: ST_TO_ADDR
// end ;
61917: LD_VAR 0 7
61921: RET
// export function EnemyInRange ( unit , dist ) ; begin
61922: LD_INT 0
61924: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61925: LD_ADDR_VAR 0 3
61929: PUSH
61930: LD_VAR 0 1
61934: PPUSH
61935: CALL_OW 255
61939: PPUSH
61940: LD_VAR 0 1
61944: PPUSH
61945: CALL_OW 250
61949: PPUSH
61950: LD_VAR 0 1
61954: PPUSH
61955: CALL_OW 251
61959: PPUSH
61960: LD_VAR 0 2
61964: PPUSH
61965: CALL 35295 0 4
61969: PUSH
61970: LD_INT 4
61972: ARRAY
61973: ST_TO_ADDR
// end ;
61974: LD_VAR 0 3
61978: RET
// export function PlayerSeeMe ( unit ) ; begin
61979: LD_INT 0
61981: PPUSH
// result := See ( your_side , unit ) ;
61982: LD_ADDR_VAR 0 2
61986: PUSH
61987: LD_OWVAR 2
61991: PPUSH
61992: LD_VAR 0 1
61996: PPUSH
61997: CALL_OW 292
62001: ST_TO_ADDR
// end ;
62002: LD_VAR 0 2
62006: RET
// export function ReverseDir ( unit ) ; begin
62007: LD_INT 0
62009: PPUSH
// if not unit then
62010: LD_VAR 0 1
62014: NOT
62015: IFFALSE 62019
// exit ;
62017: GO 62042
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62019: LD_ADDR_VAR 0 2
62023: PUSH
62024: LD_VAR 0 1
62028: PPUSH
62029: CALL_OW 254
62033: PUSH
62034: LD_INT 3
62036: PLUS
62037: PUSH
62038: LD_INT 6
62040: MOD
62041: ST_TO_ADDR
// end ;
62042: LD_VAR 0 2
62046: RET
// export function ReverseArray ( array ) ; var i ; begin
62047: LD_INT 0
62049: PPUSH
62050: PPUSH
// if not array then
62051: LD_VAR 0 1
62055: NOT
62056: IFFALSE 62060
// exit ;
62058: GO 62115
// result := [ ] ;
62060: LD_ADDR_VAR 0 2
62064: PUSH
62065: EMPTY
62066: ST_TO_ADDR
// for i := array downto 1 do
62067: LD_ADDR_VAR 0 3
62071: PUSH
62072: DOUBLE
62073: LD_VAR 0 1
62077: INC
62078: ST_TO_ADDR
62079: LD_INT 1
62081: PUSH
62082: FOR_DOWNTO
62083: IFFALSE 62113
// result := Join ( result , array [ i ] ) ;
62085: LD_ADDR_VAR 0 2
62089: PUSH
62090: LD_VAR 0 2
62094: PPUSH
62095: LD_VAR 0 1
62099: PUSH
62100: LD_VAR 0 3
62104: ARRAY
62105: PPUSH
62106: CALL 66758 0 2
62110: ST_TO_ADDR
62111: GO 62082
62113: POP
62114: POP
// end ;
62115: LD_VAR 0 2
62119: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62120: LD_INT 0
62122: PPUSH
62123: PPUSH
62124: PPUSH
62125: PPUSH
62126: PPUSH
62127: PPUSH
// if not unit or not hexes then
62128: LD_VAR 0 1
62132: NOT
62133: PUSH
62134: LD_VAR 0 2
62138: NOT
62139: OR
62140: IFFALSE 62144
// exit ;
62142: GO 62267
// dist := 9999 ;
62144: LD_ADDR_VAR 0 5
62148: PUSH
62149: LD_INT 9999
62151: ST_TO_ADDR
// for i = 1 to hexes do
62152: LD_ADDR_VAR 0 4
62156: PUSH
62157: DOUBLE
62158: LD_INT 1
62160: DEC
62161: ST_TO_ADDR
62162: LD_VAR 0 2
62166: PUSH
62167: FOR_TO
62168: IFFALSE 62255
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62170: LD_ADDR_VAR 0 6
62174: PUSH
62175: LD_VAR 0 1
62179: PPUSH
62180: LD_VAR 0 2
62184: PUSH
62185: LD_VAR 0 4
62189: ARRAY
62190: PUSH
62191: LD_INT 1
62193: ARRAY
62194: PPUSH
62195: LD_VAR 0 2
62199: PUSH
62200: LD_VAR 0 4
62204: ARRAY
62205: PUSH
62206: LD_INT 2
62208: ARRAY
62209: PPUSH
62210: CALL_OW 297
62214: ST_TO_ADDR
// if tdist < dist then
62215: LD_VAR 0 6
62219: PUSH
62220: LD_VAR 0 5
62224: LESS
62225: IFFALSE 62253
// begin hex := hexes [ i ] ;
62227: LD_ADDR_VAR 0 8
62231: PUSH
62232: LD_VAR 0 2
62236: PUSH
62237: LD_VAR 0 4
62241: ARRAY
62242: ST_TO_ADDR
// dist := tdist ;
62243: LD_ADDR_VAR 0 5
62247: PUSH
62248: LD_VAR 0 6
62252: ST_TO_ADDR
// end ; end ;
62253: GO 62167
62255: POP
62256: POP
// result := hex ;
62257: LD_ADDR_VAR 0 3
62261: PUSH
62262: LD_VAR 0 8
62266: ST_TO_ADDR
// end ;
62267: LD_VAR 0 3
62271: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62272: LD_INT 0
62274: PPUSH
62275: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62276: LD_VAR 0 1
62280: NOT
62281: PUSH
62282: LD_VAR 0 1
62286: PUSH
62287: LD_INT 21
62289: PUSH
62290: LD_INT 2
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 23
62299: PUSH
62300: LD_INT 2
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PPUSH
62311: CALL_OW 69
62315: IN
62316: NOT
62317: OR
62318: IFFALSE 62322
// exit ;
62320: GO 62369
// for i = 1 to 3 do
62322: LD_ADDR_VAR 0 3
62326: PUSH
62327: DOUBLE
62328: LD_INT 1
62330: DEC
62331: ST_TO_ADDR
62332: LD_INT 3
62334: PUSH
62335: FOR_TO
62336: IFFALSE 62367
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62338: LD_VAR 0 1
62342: PPUSH
62343: CALL_OW 250
62347: PPUSH
62348: LD_VAR 0 1
62352: PPUSH
62353: CALL_OW 251
62357: PPUSH
62358: LD_INT 1
62360: PPUSH
62361: CALL_OW 453
62365: GO 62335
62367: POP
62368: POP
// end ;
62369: LD_VAR 0 2
62373: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62374: LD_INT 0
62376: PPUSH
62377: PPUSH
62378: PPUSH
62379: PPUSH
62380: PPUSH
62381: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62382: LD_VAR 0 1
62386: NOT
62387: PUSH
62388: LD_VAR 0 2
62392: NOT
62393: OR
62394: PUSH
62395: LD_VAR 0 1
62399: PPUSH
62400: CALL_OW 314
62404: OR
62405: IFFALSE 62409
// exit ;
62407: GO 62876
// if GetLives ( i ) < 250 then
62409: LD_VAR 0 4
62413: PPUSH
62414: CALL_OW 256
62418: PUSH
62419: LD_INT 250
62421: LESS
62422: IFFALSE 62435
// begin ComAutodestruct ( i ) ;
62424: LD_VAR 0 4
62428: PPUSH
62429: CALL 62272 0 1
// exit ;
62433: GO 62876
// end ; x := GetX ( enemy_unit ) ;
62435: LD_ADDR_VAR 0 7
62439: PUSH
62440: LD_VAR 0 2
62444: PPUSH
62445: CALL_OW 250
62449: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62450: LD_ADDR_VAR 0 8
62454: PUSH
62455: LD_VAR 0 2
62459: PPUSH
62460: CALL_OW 251
62464: ST_TO_ADDR
// if not x or not y then
62465: LD_VAR 0 7
62469: NOT
62470: PUSH
62471: LD_VAR 0 8
62475: NOT
62476: OR
62477: IFFALSE 62481
// exit ;
62479: GO 62876
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62481: LD_ADDR_VAR 0 6
62485: PUSH
62486: LD_VAR 0 7
62490: PPUSH
62491: LD_INT 0
62493: PPUSH
62494: LD_INT 4
62496: PPUSH
62497: CALL_OW 272
62501: PUSH
62502: LD_VAR 0 8
62506: PPUSH
62507: LD_INT 0
62509: PPUSH
62510: LD_INT 4
62512: PPUSH
62513: CALL_OW 273
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_VAR 0 7
62526: PPUSH
62527: LD_INT 1
62529: PPUSH
62530: LD_INT 4
62532: PPUSH
62533: CALL_OW 272
62537: PUSH
62538: LD_VAR 0 8
62542: PPUSH
62543: LD_INT 1
62545: PPUSH
62546: LD_INT 4
62548: PPUSH
62549: CALL_OW 273
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_VAR 0 7
62562: PPUSH
62563: LD_INT 2
62565: PPUSH
62566: LD_INT 4
62568: PPUSH
62569: CALL_OW 272
62573: PUSH
62574: LD_VAR 0 8
62578: PPUSH
62579: LD_INT 2
62581: PPUSH
62582: LD_INT 4
62584: PPUSH
62585: CALL_OW 273
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_VAR 0 7
62598: PPUSH
62599: LD_INT 3
62601: PPUSH
62602: LD_INT 4
62604: PPUSH
62605: CALL_OW 272
62609: PUSH
62610: LD_VAR 0 8
62614: PPUSH
62615: LD_INT 3
62617: PPUSH
62618: LD_INT 4
62620: PPUSH
62621: CALL_OW 273
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_VAR 0 7
62634: PPUSH
62635: LD_INT 4
62637: PPUSH
62638: LD_INT 4
62640: PPUSH
62641: CALL_OW 272
62645: PUSH
62646: LD_VAR 0 8
62650: PPUSH
62651: LD_INT 4
62653: PPUSH
62654: LD_INT 4
62656: PPUSH
62657: CALL_OW 273
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_VAR 0 7
62670: PPUSH
62671: LD_INT 5
62673: PPUSH
62674: LD_INT 4
62676: PPUSH
62677: CALL_OW 272
62681: PUSH
62682: LD_VAR 0 8
62686: PPUSH
62687: LD_INT 5
62689: PPUSH
62690: LD_INT 4
62692: PPUSH
62693: CALL_OW 273
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: ST_TO_ADDR
// for i = tmp downto 1 do
62710: LD_ADDR_VAR 0 4
62714: PUSH
62715: DOUBLE
62716: LD_VAR 0 6
62720: INC
62721: ST_TO_ADDR
62722: LD_INT 1
62724: PUSH
62725: FOR_DOWNTO
62726: IFFALSE 62827
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62728: LD_VAR 0 6
62732: PUSH
62733: LD_VAR 0 4
62737: ARRAY
62738: PUSH
62739: LD_INT 1
62741: ARRAY
62742: PPUSH
62743: LD_VAR 0 6
62747: PUSH
62748: LD_VAR 0 4
62752: ARRAY
62753: PUSH
62754: LD_INT 2
62756: ARRAY
62757: PPUSH
62758: CALL_OW 488
62762: NOT
62763: PUSH
62764: LD_VAR 0 6
62768: PUSH
62769: LD_VAR 0 4
62773: ARRAY
62774: PUSH
62775: LD_INT 1
62777: ARRAY
62778: PPUSH
62779: LD_VAR 0 6
62783: PUSH
62784: LD_VAR 0 4
62788: ARRAY
62789: PUSH
62790: LD_INT 2
62792: ARRAY
62793: PPUSH
62794: CALL_OW 428
62798: PUSH
62799: LD_INT 0
62801: NONEQUAL
62802: OR
62803: IFFALSE 62825
// tmp := Delete ( tmp , i ) ;
62805: LD_ADDR_VAR 0 6
62809: PUSH
62810: LD_VAR 0 6
62814: PPUSH
62815: LD_VAR 0 4
62819: PPUSH
62820: CALL_OW 3
62824: ST_TO_ADDR
62825: GO 62725
62827: POP
62828: POP
// j := GetClosestHex ( unit , tmp ) ;
62829: LD_ADDR_VAR 0 5
62833: PUSH
62834: LD_VAR 0 1
62838: PPUSH
62839: LD_VAR 0 6
62843: PPUSH
62844: CALL 62120 0 2
62848: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62849: LD_VAR 0 1
62853: PPUSH
62854: LD_VAR 0 5
62858: PUSH
62859: LD_INT 1
62861: ARRAY
62862: PPUSH
62863: LD_VAR 0 5
62867: PUSH
62868: LD_INT 2
62870: ARRAY
62871: PPUSH
62872: CALL_OW 111
// end ;
62876: LD_VAR 0 3
62880: RET
// export function PrepareApemanSoldier ( ) ; begin
62881: LD_INT 0
62883: PPUSH
// uc_nation := 0 ;
62884: LD_ADDR_OWVAR 21
62888: PUSH
62889: LD_INT 0
62891: ST_TO_ADDR
// hc_sex := sex_male ;
62892: LD_ADDR_OWVAR 27
62896: PUSH
62897: LD_INT 1
62899: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62900: LD_ADDR_OWVAR 28
62904: PUSH
62905: LD_INT 15
62907: ST_TO_ADDR
// hc_gallery :=  ;
62908: LD_ADDR_OWVAR 33
62912: PUSH
62913: LD_STRING 
62915: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62916: LD_ADDR_OWVAR 31
62920: PUSH
62921: LD_INT 0
62923: PPUSH
62924: LD_INT 3
62926: PPUSH
62927: CALL_OW 12
62931: PUSH
62932: LD_INT 0
62934: PPUSH
62935: LD_INT 3
62937: PPUSH
62938: CALL_OW 12
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: ST_TO_ADDR
// end ;
62955: LD_VAR 0 1
62959: RET
// export function PrepareApemanEngineer ( ) ; begin
62960: LD_INT 0
62962: PPUSH
// uc_nation := 0 ;
62963: LD_ADDR_OWVAR 21
62967: PUSH
62968: LD_INT 0
62970: ST_TO_ADDR
// hc_sex := sex_male ;
62971: LD_ADDR_OWVAR 27
62975: PUSH
62976: LD_INT 1
62978: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62979: LD_ADDR_OWVAR 28
62983: PUSH
62984: LD_INT 16
62986: ST_TO_ADDR
// hc_gallery :=  ;
62987: LD_ADDR_OWVAR 33
62991: PUSH
62992: LD_STRING 
62994: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62995: LD_ADDR_OWVAR 31
62999: PUSH
63000: LD_INT 0
63002: PPUSH
63003: LD_INT 3
63005: PPUSH
63006: CALL_OW 12
63010: PUSH
63011: LD_INT 0
63013: PPUSH
63014: LD_INT 3
63016: PPUSH
63017: CALL_OW 12
63021: PUSH
63022: LD_INT 0
63024: PUSH
63025: LD_INT 0
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: ST_TO_ADDR
// end ;
63034: LD_VAR 0 1
63038: RET
// export function PrepareApeman ( agressivity ) ; begin
63039: LD_INT 0
63041: PPUSH
// uc_side := 0 ;
63042: LD_ADDR_OWVAR 20
63046: PUSH
63047: LD_INT 0
63049: ST_TO_ADDR
// uc_nation := 0 ;
63050: LD_ADDR_OWVAR 21
63054: PUSH
63055: LD_INT 0
63057: ST_TO_ADDR
// hc_sex := sex_male ;
63058: LD_ADDR_OWVAR 27
63062: PUSH
63063: LD_INT 1
63065: ST_TO_ADDR
// hc_class := class_apeman ;
63066: LD_ADDR_OWVAR 28
63070: PUSH
63071: LD_INT 12
63073: ST_TO_ADDR
// hc_gallery :=  ;
63074: LD_ADDR_OWVAR 33
63078: PUSH
63079: LD_STRING 
63081: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63082: LD_ADDR_OWVAR 35
63086: PUSH
63087: LD_VAR 0 1
63091: NEG
63092: PPUSH
63093: LD_VAR 0 1
63097: PPUSH
63098: CALL_OW 12
63102: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63103: LD_ADDR_OWVAR 31
63107: PUSH
63108: LD_INT 0
63110: PPUSH
63111: LD_INT 3
63113: PPUSH
63114: CALL_OW 12
63118: PUSH
63119: LD_INT 0
63121: PPUSH
63122: LD_INT 3
63124: PPUSH
63125: CALL_OW 12
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: LD_INT 0
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: ST_TO_ADDR
// end ;
63142: LD_VAR 0 2
63146: RET
// export function PrepareTiger ( agressivity ) ; begin
63147: LD_INT 0
63149: PPUSH
// uc_side := 0 ;
63150: LD_ADDR_OWVAR 20
63154: PUSH
63155: LD_INT 0
63157: ST_TO_ADDR
// uc_nation := 0 ;
63158: LD_ADDR_OWVAR 21
63162: PUSH
63163: LD_INT 0
63165: ST_TO_ADDR
// hc_class := class_tiger ;
63166: LD_ADDR_OWVAR 28
63170: PUSH
63171: LD_INT 14
63173: ST_TO_ADDR
// hc_gallery :=  ;
63174: LD_ADDR_OWVAR 33
63178: PUSH
63179: LD_STRING 
63181: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63182: LD_ADDR_OWVAR 35
63186: PUSH
63187: LD_VAR 0 1
63191: NEG
63192: PPUSH
63193: LD_VAR 0 1
63197: PPUSH
63198: CALL_OW 12
63202: ST_TO_ADDR
// end ;
63203: LD_VAR 0 2
63207: RET
// export function PrepareEnchidna ( ) ; begin
63208: LD_INT 0
63210: PPUSH
// uc_side := 0 ;
63211: LD_ADDR_OWVAR 20
63215: PUSH
63216: LD_INT 0
63218: ST_TO_ADDR
// uc_nation := 0 ;
63219: LD_ADDR_OWVAR 21
63223: PUSH
63224: LD_INT 0
63226: ST_TO_ADDR
// hc_class := class_baggie ;
63227: LD_ADDR_OWVAR 28
63231: PUSH
63232: LD_INT 13
63234: ST_TO_ADDR
// hc_gallery :=  ;
63235: LD_ADDR_OWVAR 33
63239: PUSH
63240: LD_STRING 
63242: ST_TO_ADDR
// end ;
63243: LD_VAR 0 1
63247: RET
// export function PrepareFrog ( ) ; begin
63248: LD_INT 0
63250: PPUSH
// uc_side := 0 ;
63251: LD_ADDR_OWVAR 20
63255: PUSH
63256: LD_INT 0
63258: ST_TO_ADDR
// uc_nation := 0 ;
63259: LD_ADDR_OWVAR 21
63263: PUSH
63264: LD_INT 0
63266: ST_TO_ADDR
// hc_class := class_frog ;
63267: LD_ADDR_OWVAR 28
63271: PUSH
63272: LD_INT 19
63274: ST_TO_ADDR
// hc_gallery :=  ;
63275: LD_ADDR_OWVAR 33
63279: PUSH
63280: LD_STRING 
63282: ST_TO_ADDR
// end ;
63283: LD_VAR 0 1
63287: RET
// export function PrepareFish ( ) ; begin
63288: LD_INT 0
63290: PPUSH
// uc_side := 0 ;
63291: LD_ADDR_OWVAR 20
63295: PUSH
63296: LD_INT 0
63298: ST_TO_ADDR
// uc_nation := 0 ;
63299: LD_ADDR_OWVAR 21
63303: PUSH
63304: LD_INT 0
63306: ST_TO_ADDR
// hc_class := class_fish ;
63307: LD_ADDR_OWVAR 28
63311: PUSH
63312: LD_INT 20
63314: ST_TO_ADDR
// hc_gallery :=  ;
63315: LD_ADDR_OWVAR 33
63319: PUSH
63320: LD_STRING 
63322: ST_TO_ADDR
// end ;
63323: LD_VAR 0 1
63327: RET
// export function PrepareBird ( ) ; begin
63328: LD_INT 0
63330: PPUSH
// uc_side := 0 ;
63331: LD_ADDR_OWVAR 20
63335: PUSH
63336: LD_INT 0
63338: ST_TO_ADDR
// uc_nation := 0 ;
63339: LD_ADDR_OWVAR 21
63343: PUSH
63344: LD_INT 0
63346: ST_TO_ADDR
// hc_class := class_phororhacos ;
63347: LD_ADDR_OWVAR 28
63351: PUSH
63352: LD_INT 18
63354: ST_TO_ADDR
// hc_gallery :=  ;
63355: LD_ADDR_OWVAR 33
63359: PUSH
63360: LD_STRING 
63362: ST_TO_ADDR
// end ;
63363: LD_VAR 0 1
63367: RET
// export function PrepareHorse ( ) ; begin
63368: LD_INT 0
63370: PPUSH
// uc_side := 0 ;
63371: LD_ADDR_OWVAR 20
63375: PUSH
63376: LD_INT 0
63378: ST_TO_ADDR
// uc_nation := 0 ;
63379: LD_ADDR_OWVAR 21
63383: PUSH
63384: LD_INT 0
63386: ST_TO_ADDR
// hc_class := class_horse ;
63387: LD_ADDR_OWVAR 28
63391: PUSH
63392: LD_INT 21
63394: ST_TO_ADDR
// hc_gallery :=  ;
63395: LD_ADDR_OWVAR 33
63399: PUSH
63400: LD_STRING 
63402: ST_TO_ADDR
// end ;
63403: LD_VAR 0 1
63407: RET
// export function PrepareMastodont ( ) ; begin
63408: LD_INT 0
63410: PPUSH
// uc_side := 0 ;
63411: LD_ADDR_OWVAR 20
63415: PUSH
63416: LD_INT 0
63418: ST_TO_ADDR
// uc_nation := 0 ;
63419: LD_ADDR_OWVAR 21
63423: PUSH
63424: LD_INT 0
63426: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63427: LD_ADDR_OWVAR 37
63431: PUSH
63432: LD_INT 31
63434: ST_TO_ADDR
// vc_control := control_rider ;
63435: LD_ADDR_OWVAR 38
63439: PUSH
63440: LD_INT 4
63442: ST_TO_ADDR
// end ;
63443: LD_VAR 0 1
63447: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63448: LD_INT 0
63450: PPUSH
63451: PPUSH
63452: PPUSH
// uc_side = 0 ;
63453: LD_ADDR_OWVAR 20
63457: PUSH
63458: LD_INT 0
63460: ST_TO_ADDR
// uc_nation = 0 ;
63461: LD_ADDR_OWVAR 21
63465: PUSH
63466: LD_INT 0
63468: ST_TO_ADDR
// InitHc_All ( ) ;
63469: CALL_OW 584
// InitVc ;
63473: CALL_OW 20
// if mastodonts then
63477: LD_VAR 0 6
63481: IFFALSE 63548
// for i = 1 to mastodonts do
63483: LD_ADDR_VAR 0 11
63487: PUSH
63488: DOUBLE
63489: LD_INT 1
63491: DEC
63492: ST_TO_ADDR
63493: LD_VAR 0 6
63497: PUSH
63498: FOR_TO
63499: IFFALSE 63546
// begin vc_chassis := 31 ;
63501: LD_ADDR_OWVAR 37
63505: PUSH
63506: LD_INT 31
63508: ST_TO_ADDR
// vc_control := control_rider ;
63509: LD_ADDR_OWVAR 38
63513: PUSH
63514: LD_INT 4
63516: ST_TO_ADDR
// animal := CreateVehicle ;
63517: LD_ADDR_VAR 0 12
63521: PUSH
63522: CALL_OW 45
63526: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63527: LD_VAR 0 12
63531: PPUSH
63532: LD_VAR 0 8
63536: PPUSH
63537: LD_INT 0
63539: PPUSH
63540: CALL 65676 0 3
// end ;
63544: GO 63498
63546: POP
63547: POP
// if horses then
63548: LD_VAR 0 5
63552: IFFALSE 63619
// for i = 1 to horses do
63554: LD_ADDR_VAR 0 11
63558: PUSH
63559: DOUBLE
63560: LD_INT 1
63562: DEC
63563: ST_TO_ADDR
63564: LD_VAR 0 5
63568: PUSH
63569: FOR_TO
63570: IFFALSE 63617
// begin hc_class := 21 ;
63572: LD_ADDR_OWVAR 28
63576: PUSH
63577: LD_INT 21
63579: ST_TO_ADDR
// hc_gallery :=  ;
63580: LD_ADDR_OWVAR 33
63584: PUSH
63585: LD_STRING 
63587: ST_TO_ADDR
// animal := CreateHuman ;
63588: LD_ADDR_VAR 0 12
63592: PUSH
63593: CALL_OW 44
63597: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63598: LD_VAR 0 12
63602: PPUSH
63603: LD_VAR 0 8
63607: PPUSH
63608: LD_INT 0
63610: PPUSH
63611: CALL 65676 0 3
// end ;
63615: GO 63569
63617: POP
63618: POP
// if birds then
63619: LD_VAR 0 1
63623: IFFALSE 63690
// for i = 1 to birds do
63625: LD_ADDR_VAR 0 11
63629: PUSH
63630: DOUBLE
63631: LD_INT 1
63633: DEC
63634: ST_TO_ADDR
63635: LD_VAR 0 1
63639: PUSH
63640: FOR_TO
63641: IFFALSE 63688
// begin hc_class := 18 ;
63643: LD_ADDR_OWVAR 28
63647: PUSH
63648: LD_INT 18
63650: ST_TO_ADDR
// hc_gallery =  ;
63651: LD_ADDR_OWVAR 33
63655: PUSH
63656: LD_STRING 
63658: ST_TO_ADDR
// animal := CreateHuman ;
63659: LD_ADDR_VAR 0 12
63663: PUSH
63664: CALL_OW 44
63668: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63669: LD_VAR 0 12
63673: PPUSH
63674: LD_VAR 0 8
63678: PPUSH
63679: LD_INT 0
63681: PPUSH
63682: CALL 65676 0 3
// end ;
63686: GO 63640
63688: POP
63689: POP
// if tigers then
63690: LD_VAR 0 2
63694: IFFALSE 63778
// for i = 1 to tigers do
63696: LD_ADDR_VAR 0 11
63700: PUSH
63701: DOUBLE
63702: LD_INT 1
63704: DEC
63705: ST_TO_ADDR
63706: LD_VAR 0 2
63710: PUSH
63711: FOR_TO
63712: IFFALSE 63776
// begin hc_class = class_tiger ;
63714: LD_ADDR_OWVAR 28
63718: PUSH
63719: LD_INT 14
63721: ST_TO_ADDR
// hc_gallery =  ;
63722: LD_ADDR_OWVAR 33
63726: PUSH
63727: LD_STRING 
63729: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63730: LD_ADDR_OWVAR 35
63734: PUSH
63735: LD_INT 7
63737: NEG
63738: PPUSH
63739: LD_INT 7
63741: PPUSH
63742: CALL_OW 12
63746: ST_TO_ADDR
// animal := CreateHuman ;
63747: LD_ADDR_VAR 0 12
63751: PUSH
63752: CALL_OW 44
63756: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63757: LD_VAR 0 12
63761: PPUSH
63762: LD_VAR 0 8
63766: PPUSH
63767: LD_INT 0
63769: PPUSH
63770: CALL 65676 0 3
// end ;
63774: GO 63711
63776: POP
63777: POP
// if apemans then
63778: LD_VAR 0 3
63782: IFFALSE 63905
// for i = 1 to apemans do
63784: LD_ADDR_VAR 0 11
63788: PUSH
63789: DOUBLE
63790: LD_INT 1
63792: DEC
63793: ST_TO_ADDR
63794: LD_VAR 0 3
63798: PUSH
63799: FOR_TO
63800: IFFALSE 63903
// begin hc_class = class_apeman ;
63802: LD_ADDR_OWVAR 28
63806: PUSH
63807: LD_INT 12
63809: ST_TO_ADDR
// hc_gallery =  ;
63810: LD_ADDR_OWVAR 33
63814: PUSH
63815: LD_STRING 
63817: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63818: LD_ADDR_OWVAR 35
63822: PUSH
63823: LD_INT 2
63825: NEG
63826: PPUSH
63827: LD_INT 2
63829: PPUSH
63830: CALL_OW 12
63834: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63835: LD_ADDR_OWVAR 31
63839: PUSH
63840: LD_INT 1
63842: PPUSH
63843: LD_INT 3
63845: PPUSH
63846: CALL_OW 12
63850: PUSH
63851: LD_INT 1
63853: PPUSH
63854: LD_INT 3
63856: PPUSH
63857: CALL_OW 12
63861: PUSH
63862: LD_INT 0
63864: PUSH
63865: LD_INT 0
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: ST_TO_ADDR
// animal := CreateHuman ;
63874: LD_ADDR_VAR 0 12
63878: PUSH
63879: CALL_OW 44
63883: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63884: LD_VAR 0 12
63888: PPUSH
63889: LD_VAR 0 8
63893: PPUSH
63894: LD_INT 0
63896: PPUSH
63897: CALL 65676 0 3
// end ;
63901: GO 63799
63903: POP
63904: POP
// if enchidnas then
63905: LD_VAR 0 4
63909: IFFALSE 63976
// for i = 1 to enchidnas do
63911: LD_ADDR_VAR 0 11
63915: PUSH
63916: DOUBLE
63917: LD_INT 1
63919: DEC
63920: ST_TO_ADDR
63921: LD_VAR 0 4
63925: PUSH
63926: FOR_TO
63927: IFFALSE 63974
// begin hc_class = 13 ;
63929: LD_ADDR_OWVAR 28
63933: PUSH
63934: LD_INT 13
63936: ST_TO_ADDR
// hc_gallery =  ;
63937: LD_ADDR_OWVAR 33
63941: PUSH
63942: LD_STRING 
63944: ST_TO_ADDR
// animal := CreateHuman ;
63945: LD_ADDR_VAR 0 12
63949: PUSH
63950: CALL_OW 44
63954: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63955: LD_VAR 0 12
63959: PPUSH
63960: LD_VAR 0 8
63964: PPUSH
63965: LD_INT 0
63967: PPUSH
63968: CALL 65676 0 3
// end ;
63972: GO 63926
63974: POP
63975: POP
// if fishes then
63976: LD_VAR 0 7
63980: IFFALSE 64047
// for i = 1 to fishes do
63982: LD_ADDR_VAR 0 11
63986: PUSH
63987: DOUBLE
63988: LD_INT 1
63990: DEC
63991: ST_TO_ADDR
63992: LD_VAR 0 7
63996: PUSH
63997: FOR_TO
63998: IFFALSE 64045
// begin hc_class = 20 ;
64000: LD_ADDR_OWVAR 28
64004: PUSH
64005: LD_INT 20
64007: ST_TO_ADDR
// hc_gallery =  ;
64008: LD_ADDR_OWVAR 33
64012: PUSH
64013: LD_STRING 
64015: ST_TO_ADDR
// animal := CreateHuman ;
64016: LD_ADDR_VAR 0 12
64020: PUSH
64021: CALL_OW 44
64025: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64026: LD_VAR 0 12
64030: PPUSH
64031: LD_VAR 0 9
64035: PPUSH
64036: LD_INT 0
64038: PPUSH
64039: CALL 65676 0 3
// end ;
64043: GO 63997
64045: POP
64046: POP
// end ;
64047: LD_VAR 0 10
64051: RET
// export function WantHeal ( sci , unit ) ; begin
64052: LD_INT 0
64054: PPUSH
// if GetTaskList ( sci ) > 0 then
64055: LD_VAR 0 1
64059: PPUSH
64060: CALL_OW 437
64064: PUSH
64065: LD_INT 0
64067: GREATER
64068: IFFALSE 64138
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64070: LD_VAR 0 1
64074: PPUSH
64075: CALL_OW 437
64079: PUSH
64080: LD_INT 1
64082: ARRAY
64083: PUSH
64084: LD_INT 1
64086: ARRAY
64087: PUSH
64088: LD_STRING l
64090: EQUAL
64091: PUSH
64092: LD_VAR 0 1
64096: PPUSH
64097: CALL_OW 437
64101: PUSH
64102: LD_INT 1
64104: ARRAY
64105: PUSH
64106: LD_INT 4
64108: ARRAY
64109: PUSH
64110: LD_VAR 0 2
64114: EQUAL
64115: AND
64116: IFFALSE 64128
// result := true else
64118: LD_ADDR_VAR 0 3
64122: PUSH
64123: LD_INT 1
64125: ST_TO_ADDR
64126: GO 64136
// result := false ;
64128: LD_ADDR_VAR 0 3
64132: PUSH
64133: LD_INT 0
64135: ST_TO_ADDR
// end else
64136: GO 64146
// result := false ;
64138: LD_ADDR_VAR 0 3
64142: PUSH
64143: LD_INT 0
64145: ST_TO_ADDR
// end ;
64146: LD_VAR 0 3
64150: RET
// export function HealTarget ( sci ) ; begin
64151: LD_INT 0
64153: PPUSH
// if not sci then
64154: LD_VAR 0 1
64158: NOT
64159: IFFALSE 64163
// exit ;
64161: GO 64228
// result := 0 ;
64163: LD_ADDR_VAR 0 2
64167: PUSH
64168: LD_INT 0
64170: ST_TO_ADDR
// if GetTaskList ( sci ) then
64171: LD_VAR 0 1
64175: PPUSH
64176: CALL_OW 437
64180: IFFALSE 64228
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64182: LD_VAR 0 1
64186: PPUSH
64187: CALL_OW 437
64191: PUSH
64192: LD_INT 1
64194: ARRAY
64195: PUSH
64196: LD_INT 1
64198: ARRAY
64199: PUSH
64200: LD_STRING l
64202: EQUAL
64203: IFFALSE 64228
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64205: LD_ADDR_VAR 0 2
64209: PUSH
64210: LD_VAR 0 1
64214: PPUSH
64215: CALL_OW 437
64219: PUSH
64220: LD_INT 1
64222: ARRAY
64223: PUSH
64224: LD_INT 4
64226: ARRAY
64227: ST_TO_ADDR
// end ;
64228: LD_VAR 0 2
64232: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64233: LD_INT 0
64235: PPUSH
64236: PPUSH
64237: PPUSH
64238: PPUSH
// if not base_units then
64239: LD_VAR 0 1
64243: NOT
64244: IFFALSE 64248
// exit ;
64246: GO 64335
// result := false ;
64248: LD_ADDR_VAR 0 2
64252: PUSH
64253: LD_INT 0
64255: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64256: LD_ADDR_VAR 0 5
64260: PUSH
64261: LD_VAR 0 1
64265: PPUSH
64266: LD_INT 21
64268: PUSH
64269: LD_INT 3
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PPUSH
64276: CALL_OW 72
64280: ST_TO_ADDR
// if not tmp then
64281: LD_VAR 0 5
64285: NOT
64286: IFFALSE 64290
// exit ;
64288: GO 64335
// for i in tmp do
64290: LD_ADDR_VAR 0 3
64294: PUSH
64295: LD_VAR 0 5
64299: PUSH
64300: FOR_IN
64301: IFFALSE 64333
// begin result := EnemyInRange ( i , 22 ) ;
64303: LD_ADDR_VAR 0 2
64307: PUSH
64308: LD_VAR 0 3
64312: PPUSH
64313: LD_INT 22
64315: PPUSH
64316: CALL 61922 0 2
64320: ST_TO_ADDR
// if result then
64321: LD_VAR 0 2
64325: IFFALSE 64331
// exit ;
64327: POP
64328: POP
64329: GO 64335
// end ;
64331: GO 64300
64333: POP
64334: POP
// end ;
64335: LD_VAR 0 2
64339: RET
// export function FilterByTag ( units , tag ) ; begin
64340: LD_INT 0
64342: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64343: LD_ADDR_VAR 0 3
64347: PUSH
64348: LD_VAR 0 1
64352: PPUSH
64353: LD_INT 120
64355: PUSH
64356: LD_VAR 0 2
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PPUSH
64365: CALL_OW 72
64369: ST_TO_ADDR
// end ;
64370: LD_VAR 0 3
64374: RET
// export function IsDriver ( un ) ; begin
64375: LD_INT 0
64377: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64378: LD_ADDR_VAR 0 2
64382: PUSH
64383: LD_VAR 0 1
64387: PUSH
64388: LD_INT 55
64390: PUSH
64391: EMPTY
64392: LIST
64393: PPUSH
64394: CALL_OW 69
64398: IN
64399: ST_TO_ADDR
// end ;
64400: LD_VAR 0 2
64404: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64405: LD_INT 0
64407: PPUSH
64408: PPUSH
// list := [ ] ;
64409: LD_ADDR_VAR 0 5
64413: PUSH
64414: EMPTY
64415: ST_TO_ADDR
// case d of 0 :
64416: LD_VAR 0 3
64420: PUSH
64421: LD_INT 0
64423: DOUBLE
64424: EQUAL
64425: IFTRUE 64429
64427: GO 64562
64429: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64430: LD_ADDR_VAR 0 5
64434: PUSH
64435: LD_VAR 0 1
64439: PUSH
64440: LD_INT 4
64442: MINUS
64443: PUSH
64444: LD_VAR 0 2
64448: PUSH
64449: LD_INT 4
64451: MINUS
64452: PUSH
64453: LD_INT 2
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: LIST
64460: PUSH
64461: LD_VAR 0 1
64465: PUSH
64466: LD_INT 3
64468: MINUS
64469: PUSH
64470: LD_VAR 0 2
64474: PUSH
64475: LD_INT 1
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: LIST
64482: PUSH
64483: LD_VAR 0 1
64487: PUSH
64488: LD_INT 4
64490: PLUS
64491: PUSH
64492: LD_VAR 0 2
64496: PUSH
64497: LD_INT 4
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: LIST
64504: PUSH
64505: LD_VAR 0 1
64509: PUSH
64510: LD_INT 3
64512: PLUS
64513: PUSH
64514: LD_VAR 0 2
64518: PUSH
64519: LD_INT 3
64521: PLUS
64522: PUSH
64523: LD_INT 5
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: LIST
64530: PUSH
64531: LD_VAR 0 1
64535: PUSH
64536: LD_VAR 0 2
64540: PUSH
64541: LD_INT 4
64543: PLUS
64544: PUSH
64545: LD_INT 0
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: LIST
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: ST_TO_ADDR
// end ; 1 :
64560: GO 65260
64562: LD_INT 1
64564: DOUBLE
64565: EQUAL
64566: IFTRUE 64570
64568: GO 64703
64570: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64571: LD_ADDR_VAR 0 5
64575: PUSH
64576: LD_VAR 0 1
64580: PUSH
64581: LD_VAR 0 2
64585: PUSH
64586: LD_INT 4
64588: MINUS
64589: PUSH
64590: LD_INT 3
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: LIST
64597: PUSH
64598: LD_VAR 0 1
64602: PUSH
64603: LD_INT 3
64605: MINUS
64606: PUSH
64607: LD_VAR 0 2
64611: PUSH
64612: LD_INT 3
64614: MINUS
64615: PUSH
64616: LD_INT 2
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: LIST
64623: PUSH
64624: LD_VAR 0 1
64628: PUSH
64629: LD_INT 4
64631: MINUS
64632: PUSH
64633: LD_VAR 0 2
64637: PUSH
64638: LD_INT 1
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: LIST
64645: PUSH
64646: LD_VAR 0 1
64650: PUSH
64651: LD_VAR 0 2
64655: PUSH
64656: LD_INT 3
64658: PLUS
64659: PUSH
64660: LD_INT 0
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: LIST
64667: PUSH
64668: LD_VAR 0 1
64672: PUSH
64673: LD_INT 4
64675: PLUS
64676: PUSH
64677: LD_VAR 0 2
64681: PUSH
64682: LD_INT 4
64684: PLUS
64685: PUSH
64686: LD_INT 5
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: LIST
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: ST_TO_ADDR
// end ; 2 :
64701: GO 65260
64703: LD_INT 2
64705: DOUBLE
64706: EQUAL
64707: IFTRUE 64711
64709: GO 64840
64711: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64712: LD_ADDR_VAR 0 5
64716: PUSH
64717: LD_VAR 0 1
64721: PUSH
64722: LD_VAR 0 2
64726: PUSH
64727: LD_INT 3
64729: MINUS
64730: PUSH
64731: LD_INT 3
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: LIST
64738: PUSH
64739: LD_VAR 0 1
64743: PUSH
64744: LD_INT 4
64746: PLUS
64747: PUSH
64748: LD_VAR 0 2
64752: PUSH
64753: LD_INT 4
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: LIST
64760: PUSH
64761: LD_VAR 0 1
64765: PUSH
64766: LD_VAR 0 2
64770: PUSH
64771: LD_INT 4
64773: PLUS
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: LIST
64782: PUSH
64783: LD_VAR 0 1
64787: PUSH
64788: LD_INT 3
64790: MINUS
64791: PUSH
64792: LD_VAR 0 2
64796: PUSH
64797: LD_INT 1
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: LIST
64804: PUSH
64805: LD_VAR 0 1
64809: PUSH
64810: LD_INT 4
64812: MINUS
64813: PUSH
64814: LD_VAR 0 2
64818: PUSH
64819: LD_INT 4
64821: MINUS
64822: PUSH
64823: LD_INT 2
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: LIST
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: ST_TO_ADDR
// end ; 3 :
64838: GO 65260
64840: LD_INT 3
64842: DOUBLE
64843: EQUAL
64844: IFTRUE 64848
64846: GO 64981
64848: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64849: LD_ADDR_VAR 0 5
64853: PUSH
64854: LD_VAR 0 1
64858: PUSH
64859: LD_INT 3
64861: PLUS
64862: PUSH
64863: LD_VAR 0 2
64867: PUSH
64868: LD_INT 4
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: LIST
64875: PUSH
64876: LD_VAR 0 1
64880: PUSH
64881: LD_INT 4
64883: PLUS
64884: PUSH
64885: LD_VAR 0 2
64889: PUSH
64890: LD_INT 4
64892: PLUS
64893: PUSH
64894: LD_INT 5
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: LIST
64901: PUSH
64902: LD_VAR 0 1
64906: PUSH
64907: LD_INT 4
64909: MINUS
64910: PUSH
64911: LD_VAR 0 2
64915: PUSH
64916: LD_INT 1
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: LIST
64923: PUSH
64924: LD_VAR 0 1
64928: PUSH
64929: LD_VAR 0 2
64933: PUSH
64934: LD_INT 4
64936: MINUS
64937: PUSH
64938: LD_INT 3
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: LIST
64945: PUSH
64946: LD_VAR 0 1
64950: PUSH
64951: LD_INT 3
64953: MINUS
64954: PUSH
64955: LD_VAR 0 2
64959: PUSH
64960: LD_INT 3
64962: MINUS
64963: PUSH
64964: LD_INT 2
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: LIST
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: ST_TO_ADDR
// end ; 4 :
64979: GO 65260
64981: LD_INT 4
64983: DOUBLE
64984: EQUAL
64985: IFTRUE 64989
64987: GO 65122
64989: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64990: LD_ADDR_VAR 0 5
64994: PUSH
64995: LD_VAR 0 1
64999: PUSH
65000: LD_VAR 0 2
65004: PUSH
65005: LD_INT 4
65007: PLUS
65008: PUSH
65009: LD_INT 0
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: LIST
65016: PUSH
65017: LD_VAR 0 1
65021: PUSH
65022: LD_INT 3
65024: PLUS
65025: PUSH
65026: LD_VAR 0 2
65030: PUSH
65031: LD_INT 3
65033: PLUS
65034: PUSH
65035: LD_INT 5
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: LIST
65042: PUSH
65043: LD_VAR 0 1
65047: PUSH
65048: LD_INT 4
65050: PLUS
65051: PUSH
65052: LD_VAR 0 2
65056: PUSH
65057: LD_INT 4
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: LIST
65064: PUSH
65065: LD_VAR 0 1
65069: PUSH
65070: LD_VAR 0 2
65074: PUSH
65075: LD_INT 3
65077: MINUS
65078: PUSH
65079: LD_INT 3
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: LIST
65086: PUSH
65087: LD_VAR 0 1
65091: PUSH
65092: LD_INT 4
65094: MINUS
65095: PUSH
65096: LD_VAR 0 2
65100: PUSH
65101: LD_INT 4
65103: MINUS
65104: PUSH
65105: LD_INT 2
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: LIST
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: ST_TO_ADDR
// end ; 5 :
65120: GO 65260
65122: LD_INT 5
65124: DOUBLE
65125: EQUAL
65126: IFTRUE 65130
65128: GO 65259
65130: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65131: LD_ADDR_VAR 0 5
65135: PUSH
65136: LD_VAR 0 1
65140: PUSH
65141: LD_INT 4
65143: MINUS
65144: PUSH
65145: LD_VAR 0 2
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: LIST
65157: PUSH
65158: LD_VAR 0 1
65162: PUSH
65163: LD_VAR 0 2
65167: PUSH
65168: LD_INT 4
65170: MINUS
65171: PUSH
65172: LD_INT 3
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: LIST
65179: PUSH
65180: LD_VAR 0 1
65184: PUSH
65185: LD_INT 4
65187: PLUS
65188: PUSH
65189: LD_VAR 0 2
65193: PUSH
65194: LD_INT 4
65196: PLUS
65197: PUSH
65198: LD_INT 5
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: LIST
65205: PUSH
65206: LD_VAR 0 1
65210: PUSH
65211: LD_INT 3
65213: PLUS
65214: PUSH
65215: LD_VAR 0 2
65219: PUSH
65220: LD_INT 4
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: LIST
65227: PUSH
65228: LD_VAR 0 1
65232: PUSH
65233: LD_VAR 0 2
65237: PUSH
65238: LD_INT 3
65240: PLUS
65241: PUSH
65242: LD_INT 0
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: LIST
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: ST_TO_ADDR
// end ; end ;
65257: GO 65260
65259: POP
// result := list ;
65260: LD_ADDR_VAR 0 4
65264: PUSH
65265: LD_VAR 0 5
65269: ST_TO_ADDR
// end ;
65270: LD_VAR 0 4
65274: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65275: LD_INT 0
65277: PPUSH
65278: PPUSH
65279: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65280: LD_VAR 0 1
65284: NOT
65285: PUSH
65286: LD_VAR 0 2
65290: PUSH
65291: LD_INT 1
65293: PUSH
65294: LD_INT 2
65296: PUSH
65297: LD_INT 3
65299: PUSH
65300: LD_INT 4
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: IN
65309: NOT
65310: OR
65311: IFFALSE 65315
// exit ;
65313: GO 65398
// tmp := [ ] ;
65315: LD_ADDR_VAR 0 5
65319: PUSH
65320: EMPTY
65321: ST_TO_ADDR
// for i in units do
65322: LD_ADDR_VAR 0 4
65326: PUSH
65327: LD_VAR 0 1
65331: PUSH
65332: FOR_IN
65333: IFFALSE 65367
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65335: LD_ADDR_VAR 0 5
65339: PUSH
65340: LD_VAR 0 5
65344: PPUSH
65345: LD_VAR 0 4
65349: PPUSH
65350: LD_VAR 0 2
65354: PPUSH
65355: CALL_OW 259
65359: PPUSH
65360: CALL 66758 0 2
65364: ST_TO_ADDR
65365: GO 65332
65367: POP
65368: POP
// if not tmp then
65369: LD_VAR 0 5
65373: NOT
65374: IFFALSE 65378
// exit ;
65376: GO 65398
// result := SortListByListDesc ( units , tmp ) ;
65378: LD_ADDR_VAR 0 3
65382: PUSH
65383: LD_VAR 0 1
65387: PPUSH
65388: LD_VAR 0 5
65392: PPUSH
65393: CALL_OW 77
65397: ST_TO_ADDR
// end ;
65398: LD_VAR 0 3
65402: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65403: LD_INT 0
65405: PPUSH
65406: PPUSH
65407: PPUSH
// result := false ;
65408: LD_ADDR_VAR 0 3
65412: PUSH
65413: LD_INT 0
65415: ST_TO_ADDR
// if not building then
65416: LD_VAR 0 2
65420: NOT
65421: IFFALSE 65425
// exit ;
65423: GO 65563
// x := GetX ( building ) ;
65425: LD_ADDR_VAR 0 4
65429: PUSH
65430: LD_VAR 0 2
65434: PPUSH
65435: CALL_OW 250
65439: ST_TO_ADDR
// y := GetY ( building ) ;
65440: LD_ADDR_VAR 0 5
65444: PUSH
65445: LD_VAR 0 2
65449: PPUSH
65450: CALL_OW 251
65454: ST_TO_ADDR
// if not x or not y then
65455: LD_VAR 0 4
65459: NOT
65460: PUSH
65461: LD_VAR 0 5
65465: NOT
65466: OR
65467: IFFALSE 65471
// exit ;
65469: GO 65563
// if GetTaskList ( unit ) then
65471: LD_VAR 0 1
65475: PPUSH
65476: CALL_OW 437
65480: IFFALSE 65563
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65482: LD_STRING e
65484: PUSH
65485: LD_VAR 0 1
65489: PPUSH
65490: CALL_OW 437
65494: PUSH
65495: LD_INT 1
65497: ARRAY
65498: PUSH
65499: LD_INT 1
65501: ARRAY
65502: EQUAL
65503: PUSH
65504: LD_VAR 0 4
65508: PUSH
65509: LD_VAR 0 1
65513: PPUSH
65514: CALL_OW 437
65518: PUSH
65519: LD_INT 1
65521: ARRAY
65522: PUSH
65523: LD_INT 2
65525: ARRAY
65526: EQUAL
65527: AND
65528: PUSH
65529: LD_VAR 0 5
65533: PUSH
65534: LD_VAR 0 1
65538: PPUSH
65539: CALL_OW 437
65543: PUSH
65544: LD_INT 1
65546: ARRAY
65547: PUSH
65548: LD_INT 3
65550: ARRAY
65551: EQUAL
65552: AND
65553: IFFALSE 65563
// result := true end ;
65555: LD_ADDR_VAR 0 3
65559: PUSH
65560: LD_INT 1
65562: ST_TO_ADDR
// end ;
65563: LD_VAR 0 3
65567: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65568: LD_INT 0
65570: PPUSH
// result := false ;
65571: LD_ADDR_VAR 0 4
65575: PUSH
65576: LD_INT 0
65578: ST_TO_ADDR
// if GetTaskList ( unit ) then
65579: LD_VAR 0 1
65583: PPUSH
65584: CALL_OW 437
65588: IFFALSE 65671
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65590: LD_STRING M
65592: PUSH
65593: LD_VAR 0 1
65597: PPUSH
65598: CALL_OW 437
65602: PUSH
65603: LD_INT 1
65605: ARRAY
65606: PUSH
65607: LD_INT 1
65609: ARRAY
65610: EQUAL
65611: PUSH
65612: LD_VAR 0 2
65616: PUSH
65617: LD_VAR 0 1
65621: PPUSH
65622: CALL_OW 437
65626: PUSH
65627: LD_INT 1
65629: ARRAY
65630: PUSH
65631: LD_INT 2
65633: ARRAY
65634: EQUAL
65635: AND
65636: PUSH
65637: LD_VAR 0 3
65641: PUSH
65642: LD_VAR 0 1
65646: PPUSH
65647: CALL_OW 437
65651: PUSH
65652: LD_INT 1
65654: ARRAY
65655: PUSH
65656: LD_INT 3
65658: ARRAY
65659: EQUAL
65660: AND
65661: IFFALSE 65671
// result := true ;
65663: LD_ADDR_VAR 0 4
65667: PUSH
65668: LD_INT 1
65670: ST_TO_ADDR
// end ; end ;
65671: LD_VAR 0 4
65675: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65676: LD_INT 0
65678: PPUSH
65679: PPUSH
65680: PPUSH
65681: PPUSH
// if not unit or not area then
65682: LD_VAR 0 1
65686: NOT
65687: PUSH
65688: LD_VAR 0 2
65692: NOT
65693: OR
65694: IFFALSE 65698
// exit ;
65696: GO 65861
// tmp := AreaToList ( area , i ) ;
65698: LD_ADDR_VAR 0 6
65702: PUSH
65703: LD_VAR 0 2
65707: PPUSH
65708: LD_VAR 0 5
65712: PPUSH
65713: CALL_OW 517
65717: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65718: LD_ADDR_VAR 0 5
65722: PUSH
65723: DOUBLE
65724: LD_INT 1
65726: DEC
65727: ST_TO_ADDR
65728: LD_VAR 0 6
65732: PUSH
65733: LD_INT 1
65735: ARRAY
65736: PUSH
65737: FOR_TO
65738: IFFALSE 65859
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65740: LD_ADDR_VAR 0 7
65744: PUSH
65745: LD_VAR 0 6
65749: PUSH
65750: LD_INT 1
65752: ARRAY
65753: PUSH
65754: LD_VAR 0 5
65758: ARRAY
65759: PUSH
65760: LD_VAR 0 6
65764: PUSH
65765: LD_INT 2
65767: ARRAY
65768: PUSH
65769: LD_VAR 0 5
65773: ARRAY
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
65779: LD_INT 92
65781: PUSH
65782: LD_VAR 0 7
65786: PUSH
65787: LD_INT 1
65789: ARRAY
65790: PUSH
65791: LD_VAR 0 7
65795: PUSH
65796: LD_INT 2
65798: ARRAY
65799: PUSH
65800: LD_INT 3
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: PPUSH
65809: CALL_OW 69
65813: PUSH
65814: LD_INT 0
65816: EQUAL
65817: IFFALSE 65857
// begin PlaceUnitArea ( unit , area , mode ) ;
65819: LD_VAR 0 1
65823: PPUSH
65824: LD_VAR 0 2
65828: PPUSH
65829: LD_VAR 0 3
65833: PPUSH
65834: CALL_OW 49
// result := IsPlaced ( unit ) ;
65838: LD_ADDR_VAR 0 4
65842: PUSH
65843: LD_VAR 0 1
65847: PPUSH
65848: CALL_OW 305
65852: ST_TO_ADDR
// exit ;
65853: POP
65854: POP
65855: GO 65861
// end ; end ;
65857: GO 65737
65859: POP
65860: POP
// end ;
65861: LD_VAR 0 4
65865: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65866: LD_INT 0
65868: PPUSH
65869: PPUSH
65870: PPUSH
// if not side or side > 8 then
65871: LD_VAR 0 1
65875: NOT
65876: PUSH
65877: LD_VAR 0 1
65881: PUSH
65882: LD_INT 8
65884: GREATER
65885: OR
65886: IFFALSE 65890
// exit ;
65888: GO 66077
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65890: LD_ADDR_VAR 0 4
65894: PUSH
65895: LD_INT 22
65897: PUSH
65898: LD_VAR 0 1
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 21
65909: PUSH
65910: LD_INT 3
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PPUSH
65921: CALL_OW 69
65925: ST_TO_ADDR
// if not tmp then
65926: LD_VAR 0 4
65930: NOT
65931: IFFALSE 65935
// exit ;
65933: GO 66077
// enable_addtolog := true ;
65935: LD_ADDR_OWVAR 81
65939: PUSH
65940: LD_INT 1
65942: ST_TO_ADDR
// AddToLog ( [ ) ;
65943: LD_STRING [
65945: PPUSH
65946: CALL_OW 561
// for i in tmp do
65950: LD_ADDR_VAR 0 3
65954: PUSH
65955: LD_VAR 0 4
65959: PUSH
65960: FOR_IN
65961: IFFALSE 66068
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65963: LD_STRING [
65965: PUSH
65966: LD_VAR 0 3
65970: PPUSH
65971: CALL_OW 266
65975: STR
65976: PUSH
65977: LD_STRING , 
65979: STR
65980: PUSH
65981: LD_VAR 0 3
65985: PPUSH
65986: CALL_OW 250
65990: STR
65991: PUSH
65992: LD_STRING , 
65994: STR
65995: PUSH
65996: LD_VAR 0 3
66000: PPUSH
66001: CALL_OW 251
66005: STR
66006: PUSH
66007: LD_STRING , 
66009: STR
66010: PUSH
66011: LD_VAR 0 3
66015: PPUSH
66016: CALL_OW 254
66020: STR
66021: PUSH
66022: LD_STRING , 
66024: STR
66025: PUSH
66026: LD_VAR 0 3
66030: PPUSH
66031: LD_INT 1
66033: PPUSH
66034: CALL_OW 268
66038: STR
66039: PUSH
66040: LD_STRING , 
66042: STR
66043: PUSH
66044: LD_VAR 0 3
66048: PPUSH
66049: LD_INT 2
66051: PPUSH
66052: CALL_OW 268
66056: STR
66057: PUSH
66058: LD_STRING ],
66060: STR
66061: PPUSH
66062: CALL_OW 561
// end ;
66066: GO 65960
66068: POP
66069: POP
// AddToLog ( ]; ) ;
66070: LD_STRING ];
66072: PPUSH
66073: CALL_OW 561
// end ;
66077: LD_VAR 0 2
66081: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66082: LD_INT 0
66084: PPUSH
66085: PPUSH
66086: PPUSH
66087: PPUSH
66088: PPUSH
// if not area or not rate or not max then
66089: LD_VAR 0 1
66093: NOT
66094: PUSH
66095: LD_VAR 0 2
66099: NOT
66100: OR
66101: PUSH
66102: LD_VAR 0 4
66106: NOT
66107: OR
66108: IFFALSE 66112
// exit ;
66110: GO 66301
// while 1 do
66112: LD_INT 1
66114: IFFALSE 66301
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66116: LD_ADDR_VAR 0 9
66120: PUSH
66121: LD_VAR 0 1
66125: PPUSH
66126: LD_INT 1
66128: PPUSH
66129: CALL_OW 287
66133: PUSH
66134: LD_INT 10
66136: MUL
66137: ST_TO_ADDR
// r := rate / 10 ;
66138: LD_ADDR_VAR 0 7
66142: PUSH
66143: LD_VAR 0 2
66147: PUSH
66148: LD_INT 10
66150: DIVREAL
66151: ST_TO_ADDR
// time := 1 1$00 ;
66152: LD_ADDR_VAR 0 8
66156: PUSH
66157: LD_INT 2100
66159: ST_TO_ADDR
// if amount < min then
66160: LD_VAR 0 9
66164: PUSH
66165: LD_VAR 0 3
66169: LESS
66170: IFFALSE 66188
// r := r * 2 else
66172: LD_ADDR_VAR 0 7
66176: PUSH
66177: LD_VAR 0 7
66181: PUSH
66182: LD_INT 2
66184: MUL
66185: ST_TO_ADDR
66186: GO 66214
// if amount > max then
66188: LD_VAR 0 9
66192: PUSH
66193: LD_VAR 0 4
66197: GREATER
66198: IFFALSE 66214
// r := r / 2 ;
66200: LD_ADDR_VAR 0 7
66204: PUSH
66205: LD_VAR 0 7
66209: PUSH
66210: LD_INT 2
66212: DIVREAL
66213: ST_TO_ADDR
// time := time / r ;
66214: LD_ADDR_VAR 0 8
66218: PUSH
66219: LD_VAR 0 8
66223: PUSH
66224: LD_VAR 0 7
66228: DIVREAL
66229: ST_TO_ADDR
// if time < 0 then
66230: LD_VAR 0 8
66234: PUSH
66235: LD_INT 0
66237: LESS
66238: IFFALSE 66255
// time := time * - 1 ;
66240: LD_ADDR_VAR 0 8
66244: PUSH
66245: LD_VAR 0 8
66249: PUSH
66250: LD_INT 1
66252: NEG
66253: MUL
66254: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66255: LD_VAR 0 8
66259: PUSH
66260: LD_INT 35
66262: PPUSH
66263: LD_INT 875
66265: PPUSH
66266: CALL_OW 12
66270: PLUS
66271: PPUSH
66272: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66276: LD_INT 1
66278: PPUSH
66279: LD_INT 5
66281: PPUSH
66282: CALL_OW 12
66286: PPUSH
66287: LD_VAR 0 1
66291: PPUSH
66292: LD_INT 1
66294: PPUSH
66295: CALL_OW 55
// end ;
66299: GO 66112
// end ;
66301: LD_VAR 0 5
66305: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66306: LD_INT 0
66308: PPUSH
66309: PPUSH
66310: PPUSH
66311: PPUSH
66312: PPUSH
66313: PPUSH
66314: PPUSH
66315: PPUSH
// if not turrets or not factories then
66316: LD_VAR 0 1
66320: NOT
66321: PUSH
66322: LD_VAR 0 2
66326: NOT
66327: OR
66328: IFFALSE 66332
// exit ;
66330: GO 66639
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66332: LD_ADDR_VAR 0 10
66336: PUSH
66337: LD_INT 5
66339: PUSH
66340: LD_INT 6
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 2
66349: PUSH
66350: LD_INT 4
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 3
66359: PUSH
66360: LD_INT 5
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 24
66374: PUSH
66375: LD_INT 25
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 23
66384: PUSH
66385: LD_INT 27
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 42
66398: PUSH
66399: LD_INT 43
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 44
66408: PUSH
66409: LD_INT 46
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 45
66418: PUSH
66419: LD_INT 47
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: LIST
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: LIST
66435: ST_TO_ADDR
// result := [ ] ;
66436: LD_ADDR_VAR 0 3
66440: PUSH
66441: EMPTY
66442: ST_TO_ADDR
// for i in turrets do
66443: LD_ADDR_VAR 0 4
66447: PUSH
66448: LD_VAR 0 1
66452: PUSH
66453: FOR_IN
66454: IFFALSE 66637
// begin nat := GetNation ( i ) ;
66456: LD_ADDR_VAR 0 7
66460: PUSH
66461: LD_VAR 0 4
66465: PPUSH
66466: CALL_OW 248
66470: ST_TO_ADDR
// weapon := 0 ;
66471: LD_ADDR_VAR 0 8
66475: PUSH
66476: LD_INT 0
66478: ST_TO_ADDR
// if not nat then
66479: LD_VAR 0 7
66483: NOT
66484: IFFALSE 66488
// continue ;
66486: GO 66453
// for j in list [ nat ] do
66488: LD_ADDR_VAR 0 5
66492: PUSH
66493: LD_VAR 0 10
66497: PUSH
66498: LD_VAR 0 7
66502: ARRAY
66503: PUSH
66504: FOR_IN
66505: IFFALSE 66546
// if GetBWeapon ( i ) = j [ 1 ] then
66507: LD_VAR 0 4
66511: PPUSH
66512: CALL_OW 269
66516: PUSH
66517: LD_VAR 0 5
66521: PUSH
66522: LD_INT 1
66524: ARRAY
66525: EQUAL
66526: IFFALSE 66544
// begin weapon := j [ 2 ] ;
66528: LD_ADDR_VAR 0 8
66532: PUSH
66533: LD_VAR 0 5
66537: PUSH
66538: LD_INT 2
66540: ARRAY
66541: ST_TO_ADDR
// break ;
66542: GO 66546
// end ;
66544: GO 66504
66546: POP
66547: POP
// if not weapon then
66548: LD_VAR 0 8
66552: NOT
66553: IFFALSE 66557
// continue ;
66555: GO 66453
// for k in factories do
66557: LD_ADDR_VAR 0 6
66561: PUSH
66562: LD_VAR 0 2
66566: PUSH
66567: FOR_IN
66568: IFFALSE 66633
// begin weapons := AvailableWeaponList ( k ) ;
66570: LD_ADDR_VAR 0 9
66574: PUSH
66575: LD_VAR 0 6
66579: PPUSH
66580: CALL_OW 478
66584: ST_TO_ADDR
// if not weapons then
66585: LD_VAR 0 9
66589: NOT
66590: IFFALSE 66594
// continue ;
66592: GO 66567
// if weapon in weapons then
66594: LD_VAR 0 8
66598: PUSH
66599: LD_VAR 0 9
66603: IN
66604: IFFALSE 66631
// begin result := [ i , weapon ] ;
66606: LD_ADDR_VAR 0 3
66610: PUSH
66611: LD_VAR 0 4
66615: PUSH
66616: LD_VAR 0 8
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: ST_TO_ADDR
// exit ;
66625: POP
66626: POP
66627: POP
66628: POP
66629: GO 66639
// end ; end ;
66631: GO 66567
66633: POP
66634: POP
// end ;
66635: GO 66453
66637: POP
66638: POP
// end ;
66639: LD_VAR 0 3
66643: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66644: LD_INT 0
66646: PPUSH
// if not side or side > 8 then
66647: LD_VAR 0 3
66651: NOT
66652: PUSH
66653: LD_VAR 0 3
66657: PUSH
66658: LD_INT 8
66660: GREATER
66661: OR
66662: IFFALSE 66666
// exit ;
66664: GO 66725
// if not range then
66666: LD_VAR 0 4
66670: NOT
66671: IFFALSE 66682
// range := - 12 ;
66673: LD_ADDR_VAR 0 4
66677: PUSH
66678: LD_INT 12
66680: NEG
66681: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66682: LD_VAR 0 1
66686: PPUSH
66687: LD_VAR 0 2
66691: PPUSH
66692: LD_VAR 0 3
66696: PPUSH
66697: LD_VAR 0 4
66701: PPUSH
66702: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66706: LD_VAR 0 1
66710: PPUSH
66711: LD_VAR 0 2
66715: PPUSH
66716: LD_VAR 0 3
66720: PPUSH
66721: CALL_OW 331
// end ;
66725: LD_VAR 0 5
66729: RET
// export function Video ( mode ) ; begin
66730: LD_INT 0
66732: PPUSH
// ingame_video = mode ;
66733: LD_ADDR_OWVAR 52
66737: PUSH
66738: LD_VAR 0 1
66742: ST_TO_ADDR
// interface_hidden = mode ;
66743: LD_ADDR_OWVAR 54
66747: PUSH
66748: LD_VAR 0 1
66752: ST_TO_ADDR
// end ;
66753: LD_VAR 0 2
66757: RET
// export function Join ( array , element ) ; begin
66758: LD_INT 0
66760: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66761: LD_ADDR_VAR 0 3
66765: PUSH
66766: LD_VAR 0 1
66770: PPUSH
66771: LD_VAR 0 1
66775: PUSH
66776: LD_INT 1
66778: PLUS
66779: PPUSH
66780: LD_VAR 0 2
66784: PPUSH
66785: CALL_OW 1
66789: ST_TO_ADDR
// end ;
66790: LD_VAR 0 3
66794: RET
// export function JoinUnion ( array , element ) ; begin
66795: LD_INT 0
66797: PPUSH
// result := array union element ;
66798: LD_ADDR_VAR 0 3
66802: PUSH
66803: LD_VAR 0 1
66807: PUSH
66808: LD_VAR 0 2
66812: UNION
66813: ST_TO_ADDR
// end ;
66814: LD_VAR 0 3
66818: RET
// export function GetBehemoths ( side ) ; begin
66819: LD_INT 0
66821: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66822: LD_ADDR_VAR 0 2
66826: PUSH
66827: LD_INT 22
66829: PUSH
66830: LD_VAR 0 1
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 31
66841: PUSH
66842: LD_INT 25
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PPUSH
66853: CALL_OW 69
66857: ST_TO_ADDR
// end ;
66858: LD_VAR 0 2
66862: RET
// export function Shuffle ( array ) ; var i , index ; begin
66863: LD_INT 0
66865: PPUSH
66866: PPUSH
66867: PPUSH
// result := [ ] ;
66868: LD_ADDR_VAR 0 2
66872: PUSH
66873: EMPTY
66874: ST_TO_ADDR
// if not array then
66875: LD_VAR 0 1
66879: NOT
66880: IFFALSE 66884
// exit ;
66882: GO 66983
// Randomize ;
66884: CALL_OW 10
// for i = array downto 1 do
66888: LD_ADDR_VAR 0 3
66892: PUSH
66893: DOUBLE
66894: LD_VAR 0 1
66898: INC
66899: ST_TO_ADDR
66900: LD_INT 1
66902: PUSH
66903: FOR_DOWNTO
66904: IFFALSE 66981
// begin index := rand ( 1 , array ) ;
66906: LD_ADDR_VAR 0 4
66910: PUSH
66911: LD_INT 1
66913: PPUSH
66914: LD_VAR 0 1
66918: PPUSH
66919: CALL_OW 12
66923: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66924: LD_ADDR_VAR 0 2
66928: PUSH
66929: LD_VAR 0 2
66933: PPUSH
66934: LD_VAR 0 2
66938: PUSH
66939: LD_INT 1
66941: PLUS
66942: PPUSH
66943: LD_VAR 0 1
66947: PUSH
66948: LD_VAR 0 4
66952: ARRAY
66953: PPUSH
66954: CALL_OW 2
66958: ST_TO_ADDR
// array := Delete ( array , index ) ;
66959: LD_ADDR_VAR 0 1
66963: PUSH
66964: LD_VAR 0 1
66968: PPUSH
66969: LD_VAR 0 4
66973: PPUSH
66974: CALL_OW 3
66978: ST_TO_ADDR
// end ;
66979: GO 66903
66981: POP
66982: POP
// end ;
66983: LD_VAR 0 2
66987: RET
// export function GetBaseMaterials ( base ) ; begin
66988: LD_INT 0
66990: PPUSH
// result := [ 0 , 0 , 0 ] ;
66991: LD_ADDR_VAR 0 2
66995: PUSH
66996: LD_INT 0
66998: PUSH
66999: LD_INT 0
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: LIST
67009: ST_TO_ADDR
// if not base then
67010: LD_VAR 0 1
67014: NOT
67015: IFFALSE 67019
// exit ;
67017: GO 67068
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67019: LD_ADDR_VAR 0 2
67023: PUSH
67024: LD_VAR 0 1
67028: PPUSH
67029: LD_INT 1
67031: PPUSH
67032: CALL_OW 275
67036: PUSH
67037: LD_VAR 0 1
67041: PPUSH
67042: LD_INT 2
67044: PPUSH
67045: CALL_OW 275
67049: PUSH
67050: LD_VAR 0 1
67054: PPUSH
67055: LD_INT 3
67057: PPUSH
67058: CALL_OW 275
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: LIST
67067: ST_TO_ADDR
// end ;
67068: LD_VAR 0 2
67072: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67073: LD_INT 0
67075: PPUSH
67076: PPUSH
// result := array ;
67077: LD_ADDR_VAR 0 3
67081: PUSH
67082: LD_VAR 0 1
67086: ST_TO_ADDR
// if size >= result then
67087: LD_VAR 0 2
67091: PUSH
67092: LD_VAR 0 3
67096: GREATEREQUAL
67097: IFFALSE 67101
// exit ;
67099: GO 67151
// if size then
67101: LD_VAR 0 2
67105: IFFALSE 67151
// for i := array downto size do
67107: LD_ADDR_VAR 0 4
67111: PUSH
67112: DOUBLE
67113: LD_VAR 0 1
67117: INC
67118: ST_TO_ADDR
67119: LD_VAR 0 2
67123: PUSH
67124: FOR_DOWNTO
67125: IFFALSE 67149
// result := Delete ( result , result ) ;
67127: LD_ADDR_VAR 0 3
67131: PUSH
67132: LD_VAR 0 3
67136: PPUSH
67137: LD_VAR 0 3
67141: PPUSH
67142: CALL_OW 3
67146: ST_TO_ADDR
67147: GO 67124
67149: POP
67150: POP
// end ;
67151: LD_VAR 0 3
67155: RET
// export function ComExit ( unit ) ; var tmp ; begin
67156: LD_INT 0
67158: PPUSH
67159: PPUSH
// if not IsInUnit ( unit ) then
67160: LD_VAR 0 1
67164: PPUSH
67165: CALL_OW 310
67169: NOT
67170: IFFALSE 67174
// exit ;
67172: GO 67234
// tmp := IsInUnit ( unit ) ;
67174: LD_ADDR_VAR 0 3
67178: PUSH
67179: LD_VAR 0 1
67183: PPUSH
67184: CALL_OW 310
67188: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67189: LD_VAR 0 3
67193: PPUSH
67194: CALL_OW 247
67198: PUSH
67199: LD_INT 2
67201: EQUAL
67202: IFFALSE 67215
// ComExitVehicle ( unit ) else
67204: LD_VAR 0 1
67208: PPUSH
67209: CALL_OW 121
67213: GO 67224
// ComExitBuilding ( unit ) ;
67215: LD_VAR 0 1
67219: PPUSH
67220: CALL_OW 122
// result := tmp ;
67224: LD_ADDR_VAR 0 2
67228: PUSH
67229: LD_VAR 0 3
67233: ST_TO_ADDR
// end ;
67234: LD_VAR 0 2
67238: RET
// export function ComExitAll ( units ) ; var i ; begin
67239: LD_INT 0
67241: PPUSH
67242: PPUSH
// if not units then
67243: LD_VAR 0 1
67247: NOT
67248: IFFALSE 67252
// exit ;
67250: GO 67278
// for i in units do
67252: LD_ADDR_VAR 0 3
67256: PUSH
67257: LD_VAR 0 1
67261: PUSH
67262: FOR_IN
67263: IFFALSE 67276
// ComExit ( i ) ;
67265: LD_VAR 0 3
67269: PPUSH
67270: CALL 67156 0 1
67274: GO 67262
67276: POP
67277: POP
// end ;
67278: LD_VAR 0 2
67282: RET
// export function ResetHc ; begin
67283: LD_INT 0
67285: PPUSH
// InitHc ;
67286: CALL_OW 19
// hc_importance := 0 ;
67290: LD_ADDR_OWVAR 32
67294: PUSH
67295: LD_INT 0
67297: ST_TO_ADDR
// end ;
67298: LD_VAR 0 1
67302: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67303: LD_INT 0
67305: PPUSH
67306: PPUSH
67307: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67308: LD_ADDR_VAR 0 6
67312: PUSH
67313: LD_VAR 0 1
67317: PUSH
67318: LD_VAR 0 3
67322: PLUS
67323: PUSH
67324: LD_INT 2
67326: DIV
67327: ST_TO_ADDR
// if _x < 0 then
67328: LD_VAR 0 6
67332: PUSH
67333: LD_INT 0
67335: LESS
67336: IFFALSE 67353
// _x := _x * - 1 ;
67338: LD_ADDR_VAR 0 6
67342: PUSH
67343: LD_VAR 0 6
67347: PUSH
67348: LD_INT 1
67350: NEG
67351: MUL
67352: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67353: LD_ADDR_VAR 0 7
67357: PUSH
67358: LD_VAR 0 2
67362: PUSH
67363: LD_VAR 0 4
67367: PLUS
67368: PUSH
67369: LD_INT 2
67371: DIV
67372: ST_TO_ADDR
// if _y < 0 then
67373: LD_VAR 0 7
67377: PUSH
67378: LD_INT 0
67380: LESS
67381: IFFALSE 67398
// _y := _y * - 1 ;
67383: LD_ADDR_VAR 0 7
67387: PUSH
67388: LD_VAR 0 7
67392: PUSH
67393: LD_INT 1
67395: NEG
67396: MUL
67397: ST_TO_ADDR
// result := [ _x , _y ] ;
67398: LD_ADDR_VAR 0 5
67402: PUSH
67403: LD_VAR 0 6
67407: PUSH
67408: LD_VAR 0 7
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: ST_TO_ADDR
// end ;
67417: LD_VAR 0 5
67421: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67422: LD_INT 0
67424: PPUSH
67425: PPUSH
67426: PPUSH
67427: PPUSH
// task := GetTaskList ( unit ) ;
67428: LD_ADDR_VAR 0 7
67432: PUSH
67433: LD_VAR 0 1
67437: PPUSH
67438: CALL_OW 437
67442: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67443: LD_VAR 0 7
67447: NOT
67448: PUSH
67449: LD_VAR 0 1
67453: PPUSH
67454: LD_VAR 0 2
67458: PPUSH
67459: CALL_OW 308
67463: NOT
67464: AND
67465: IFFALSE 67469
// exit ;
67467: GO 67587
// if IsInArea ( unit , area ) then
67469: LD_VAR 0 1
67473: PPUSH
67474: LD_VAR 0 2
67478: PPUSH
67479: CALL_OW 308
67483: IFFALSE 67501
// begin ComMoveToArea ( unit , goAway ) ;
67485: LD_VAR 0 1
67489: PPUSH
67490: LD_VAR 0 3
67494: PPUSH
67495: CALL_OW 113
// exit ;
67499: GO 67587
// end ; if task [ 1 ] [ 1 ] <> M then
67501: LD_VAR 0 7
67505: PUSH
67506: LD_INT 1
67508: ARRAY
67509: PUSH
67510: LD_INT 1
67512: ARRAY
67513: PUSH
67514: LD_STRING M
67516: NONEQUAL
67517: IFFALSE 67521
// exit ;
67519: GO 67587
// x := task [ 1 ] [ 2 ] ;
67521: LD_ADDR_VAR 0 5
67525: PUSH
67526: LD_VAR 0 7
67530: PUSH
67531: LD_INT 1
67533: ARRAY
67534: PUSH
67535: LD_INT 2
67537: ARRAY
67538: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67539: LD_ADDR_VAR 0 6
67543: PUSH
67544: LD_VAR 0 7
67548: PUSH
67549: LD_INT 1
67551: ARRAY
67552: PUSH
67553: LD_INT 3
67555: ARRAY
67556: ST_TO_ADDR
// if InArea ( x , y , area ) then
67557: LD_VAR 0 5
67561: PPUSH
67562: LD_VAR 0 6
67566: PPUSH
67567: LD_VAR 0 2
67571: PPUSH
67572: CALL_OW 309
67576: IFFALSE 67587
// ComStop ( unit ) ;
67578: LD_VAR 0 1
67582: PPUSH
67583: CALL_OW 141
// end ;
67587: LD_VAR 0 4
67591: RET
// export function Abs ( value ) ; begin
67592: LD_INT 0
67594: PPUSH
// result := value ;
67595: LD_ADDR_VAR 0 2
67599: PUSH
67600: LD_VAR 0 1
67604: ST_TO_ADDR
// if value < 0 then
67605: LD_VAR 0 1
67609: PUSH
67610: LD_INT 0
67612: LESS
67613: IFFALSE 67630
// result := value * - 1 ;
67615: LD_ADDR_VAR 0 2
67619: PUSH
67620: LD_VAR 0 1
67624: PUSH
67625: LD_INT 1
67627: NEG
67628: MUL
67629: ST_TO_ADDR
// end ;
67630: LD_VAR 0 2
67634: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67635: LD_INT 0
67637: PPUSH
67638: PPUSH
67639: PPUSH
67640: PPUSH
67641: PPUSH
67642: PPUSH
67643: PPUSH
67644: PPUSH
// if not unit or not building then
67645: LD_VAR 0 1
67649: NOT
67650: PUSH
67651: LD_VAR 0 2
67655: NOT
67656: OR
67657: IFFALSE 67661
// exit ;
67659: GO 67887
// x := GetX ( building ) ;
67661: LD_ADDR_VAR 0 4
67665: PUSH
67666: LD_VAR 0 2
67670: PPUSH
67671: CALL_OW 250
67675: ST_TO_ADDR
// y := GetY ( building ) ;
67676: LD_ADDR_VAR 0 6
67680: PUSH
67681: LD_VAR 0 2
67685: PPUSH
67686: CALL_OW 251
67690: ST_TO_ADDR
// d := GetDir ( building ) ;
67691: LD_ADDR_VAR 0 8
67695: PUSH
67696: LD_VAR 0 2
67700: PPUSH
67701: CALL_OW 254
67705: ST_TO_ADDR
// r := 4 ;
67706: LD_ADDR_VAR 0 9
67710: PUSH
67711: LD_INT 4
67713: ST_TO_ADDR
// for i := 1 to 5 do
67714: LD_ADDR_VAR 0 10
67718: PUSH
67719: DOUBLE
67720: LD_INT 1
67722: DEC
67723: ST_TO_ADDR
67724: LD_INT 5
67726: PUSH
67727: FOR_TO
67728: IFFALSE 67885
// begin _x := ShiftX ( x , d , r + i ) ;
67730: LD_ADDR_VAR 0 5
67734: PUSH
67735: LD_VAR 0 4
67739: PPUSH
67740: LD_VAR 0 8
67744: PPUSH
67745: LD_VAR 0 9
67749: PUSH
67750: LD_VAR 0 10
67754: PLUS
67755: PPUSH
67756: CALL_OW 272
67760: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67761: LD_ADDR_VAR 0 7
67765: PUSH
67766: LD_VAR 0 6
67770: PPUSH
67771: LD_VAR 0 8
67775: PPUSH
67776: LD_VAR 0 9
67780: PUSH
67781: LD_VAR 0 10
67785: PLUS
67786: PPUSH
67787: CALL_OW 273
67791: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67792: LD_VAR 0 5
67796: PPUSH
67797: LD_VAR 0 7
67801: PPUSH
67802: CALL_OW 488
67806: PUSH
67807: LD_VAR 0 5
67811: PPUSH
67812: LD_VAR 0 7
67816: PPUSH
67817: CALL_OW 428
67821: PPUSH
67822: CALL_OW 247
67826: PUSH
67827: LD_INT 3
67829: PUSH
67830: LD_INT 2
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: IN
67837: NOT
67838: AND
67839: IFFALSE 67883
// begin ComMoveXY ( unit , _x , _y ) ;
67841: LD_VAR 0 1
67845: PPUSH
67846: LD_VAR 0 5
67850: PPUSH
67851: LD_VAR 0 7
67855: PPUSH
67856: CALL_OW 111
// result := [ _x , _y ] ;
67860: LD_ADDR_VAR 0 3
67864: PUSH
67865: LD_VAR 0 5
67869: PUSH
67870: LD_VAR 0 7
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: ST_TO_ADDR
// exit ;
67879: POP
67880: POP
67881: GO 67887
// end ; end ;
67883: GO 67727
67885: POP
67886: POP
// end ;
67887: LD_VAR 0 3
67891: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67892: LD_INT 0
67894: PPUSH
67895: PPUSH
67896: PPUSH
// result := 0 ;
67897: LD_ADDR_VAR 0 3
67901: PUSH
67902: LD_INT 0
67904: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67905: LD_VAR 0 1
67909: PUSH
67910: LD_INT 0
67912: LESS
67913: PUSH
67914: LD_VAR 0 1
67918: PUSH
67919: LD_INT 8
67921: GREATER
67922: OR
67923: PUSH
67924: LD_VAR 0 2
67928: PUSH
67929: LD_INT 0
67931: LESS
67932: OR
67933: PUSH
67934: LD_VAR 0 2
67938: PUSH
67939: LD_INT 8
67941: GREATER
67942: OR
67943: IFFALSE 67947
// exit ;
67945: GO 68022
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67947: LD_ADDR_VAR 0 4
67951: PUSH
67952: LD_INT 22
67954: PUSH
67955: LD_VAR 0 2
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PPUSH
67964: CALL_OW 69
67968: PUSH
67969: FOR_IN
67970: IFFALSE 68020
// begin un := UnitShoot ( i ) ;
67972: LD_ADDR_VAR 0 5
67976: PUSH
67977: LD_VAR 0 4
67981: PPUSH
67982: CALL_OW 504
67986: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67987: LD_VAR 0 5
67991: PPUSH
67992: CALL_OW 255
67996: PUSH
67997: LD_VAR 0 1
68001: EQUAL
68002: IFFALSE 68018
// begin result := un ;
68004: LD_ADDR_VAR 0 3
68008: PUSH
68009: LD_VAR 0 5
68013: ST_TO_ADDR
// exit ;
68014: POP
68015: POP
68016: GO 68022
// end ; end ;
68018: GO 67969
68020: POP
68021: POP
// end ;
68022: LD_VAR 0 3
68026: RET
// export function GetCargoBay ( units ) ; begin
68027: LD_INT 0
68029: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68030: LD_ADDR_VAR 0 2
68034: PUSH
68035: LD_VAR 0 1
68039: PPUSH
68040: LD_INT 2
68042: PUSH
68043: LD_INT 34
68045: PUSH
68046: LD_INT 12
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 34
68055: PUSH
68056: LD_INT 51
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 34
68065: PUSH
68066: LD_INT 32
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 34
68075: PUSH
68076: LD_INT 89
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: PPUSH
68090: CALL_OW 72
68094: ST_TO_ADDR
// end ;
68095: LD_VAR 0 2
68099: RET
// export function Negate ( value ) ; begin
68100: LD_INT 0
68102: PPUSH
// result := not value ;
68103: LD_ADDR_VAR 0 2
68107: PUSH
68108: LD_VAR 0 1
68112: NOT
68113: ST_TO_ADDR
// end ;
68114: LD_VAR 0 2
68118: RET
// export function Inc ( value ) ; begin
68119: LD_INT 0
68121: PPUSH
// result := value + 1 ;
68122: LD_ADDR_VAR 0 2
68126: PUSH
68127: LD_VAR 0 1
68131: PUSH
68132: LD_INT 1
68134: PLUS
68135: ST_TO_ADDR
// end ;
68136: LD_VAR 0 2
68140: RET
// export function Dec ( value ) ; begin
68141: LD_INT 0
68143: PPUSH
// result := value - 1 ;
68144: LD_ADDR_VAR 0 2
68148: PUSH
68149: LD_VAR 0 1
68153: PUSH
68154: LD_INT 1
68156: MINUS
68157: ST_TO_ADDR
// end ;
68158: LD_VAR 0 2
68162: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68163: LD_INT 0
68165: PPUSH
68166: PPUSH
68167: PPUSH
68168: PPUSH
68169: PPUSH
68170: PPUSH
68171: PPUSH
68172: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68173: LD_VAR 0 1
68177: PPUSH
68178: LD_VAR 0 2
68182: PPUSH
68183: CALL_OW 488
68187: NOT
68188: PUSH
68189: LD_VAR 0 3
68193: PPUSH
68194: LD_VAR 0 4
68198: PPUSH
68199: CALL_OW 488
68203: NOT
68204: OR
68205: IFFALSE 68218
// begin result := - 1 ;
68207: LD_ADDR_VAR 0 5
68211: PUSH
68212: LD_INT 1
68214: NEG
68215: ST_TO_ADDR
// exit ;
68216: GO 68453
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68218: LD_ADDR_VAR 0 12
68222: PUSH
68223: LD_VAR 0 1
68227: PPUSH
68228: LD_VAR 0 2
68232: PPUSH
68233: LD_VAR 0 3
68237: PPUSH
68238: LD_VAR 0 4
68242: PPUSH
68243: CALL 67303 0 4
68247: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68248: LD_ADDR_VAR 0 11
68252: PUSH
68253: LD_VAR 0 1
68257: PPUSH
68258: LD_VAR 0 2
68262: PPUSH
68263: LD_VAR 0 12
68267: PUSH
68268: LD_INT 1
68270: ARRAY
68271: PPUSH
68272: LD_VAR 0 12
68276: PUSH
68277: LD_INT 2
68279: ARRAY
68280: PPUSH
68281: CALL_OW 298
68285: ST_TO_ADDR
// distance := 9999 ;
68286: LD_ADDR_VAR 0 10
68290: PUSH
68291: LD_INT 9999
68293: ST_TO_ADDR
// for i := 0 to 5 do
68294: LD_ADDR_VAR 0 6
68298: PUSH
68299: DOUBLE
68300: LD_INT 0
68302: DEC
68303: ST_TO_ADDR
68304: LD_INT 5
68306: PUSH
68307: FOR_TO
68308: IFFALSE 68451
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68310: LD_ADDR_VAR 0 7
68314: PUSH
68315: LD_VAR 0 1
68319: PPUSH
68320: LD_VAR 0 6
68324: PPUSH
68325: LD_VAR 0 11
68329: PPUSH
68330: CALL_OW 272
68334: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68335: LD_ADDR_VAR 0 8
68339: PUSH
68340: LD_VAR 0 2
68344: PPUSH
68345: LD_VAR 0 6
68349: PPUSH
68350: LD_VAR 0 11
68354: PPUSH
68355: CALL_OW 273
68359: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68360: LD_VAR 0 7
68364: PPUSH
68365: LD_VAR 0 8
68369: PPUSH
68370: CALL_OW 488
68374: NOT
68375: IFFALSE 68379
// continue ;
68377: GO 68307
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68379: LD_ADDR_VAR 0 9
68383: PUSH
68384: LD_VAR 0 12
68388: PUSH
68389: LD_INT 1
68391: ARRAY
68392: PPUSH
68393: LD_VAR 0 12
68397: PUSH
68398: LD_INT 2
68400: ARRAY
68401: PPUSH
68402: LD_VAR 0 7
68406: PPUSH
68407: LD_VAR 0 8
68411: PPUSH
68412: CALL_OW 298
68416: ST_TO_ADDR
// if tmp < distance then
68417: LD_VAR 0 9
68421: PUSH
68422: LD_VAR 0 10
68426: LESS
68427: IFFALSE 68449
// begin result := i ;
68429: LD_ADDR_VAR 0 5
68433: PUSH
68434: LD_VAR 0 6
68438: ST_TO_ADDR
// distance := tmp ;
68439: LD_ADDR_VAR 0 10
68443: PUSH
68444: LD_VAR 0 9
68448: ST_TO_ADDR
// end ; end ;
68449: GO 68307
68451: POP
68452: POP
// end ;
68453: LD_VAR 0 5
68457: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68458: LD_INT 0
68460: PPUSH
68461: PPUSH
// if not driver or not IsInUnit ( driver ) then
68462: LD_VAR 0 1
68466: NOT
68467: PUSH
68468: LD_VAR 0 1
68472: PPUSH
68473: CALL_OW 310
68477: NOT
68478: OR
68479: IFFALSE 68483
// exit ;
68481: GO 68573
// vehicle := IsInUnit ( driver ) ;
68483: LD_ADDR_VAR 0 3
68487: PUSH
68488: LD_VAR 0 1
68492: PPUSH
68493: CALL_OW 310
68497: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68498: LD_VAR 0 1
68502: PPUSH
68503: LD_STRING \
68505: PUSH
68506: LD_INT 0
68508: PUSH
68509: LD_INT 0
68511: PUSH
68512: LD_INT 0
68514: PUSH
68515: LD_INT 0
68517: PUSH
68518: LD_INT 0
68520: PUSH
68521: LD_INT 0
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: PUSH
68533: LD_STRING E
68535: PUSH
68536: LD_INT 0
68538: PUSH
68539: LD_INT 0
68541: PUSH
68542: LD_VAR 0 3
68546: PUSH
68547: LD_INT 0
68549: PUSH
68550: LD_INT 0
68552: PUSH
68553: LD_INT 0
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PPUSH
68569: CALL_OW 446
// end ;
68573: LD_VAR 0 2
68577: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68578: LD_INT 0
68580: PPUSH
68581: PPUSH
// if not driver or not IsInUnit ( driver ) then
68582: LD_VAR 0 1
68586: NOT
68587: PUSH
68588: LD_VAR 0 1
68592: PPUSH
68593: CALL_OW 310
68597: NOT
68598: OR
68599: IFFALSE 68603
// exit ;
68601: GO 68693
// vehicle := IsInUnit ( driver ) ;
68603: LD_ADDR_VAR 0 3
68607: PUSH
68608: LD_VAR 0 1
68612: PPUSH
68613: CALL_OW 310
68617: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68618: LD_VAR 0 1
68622: PPUSH
68623: LD_STRING \
68625: PUSH
68626: LD_INT 0
68628: PUSH
68629: LD_INT 0
68631: PUSH
68632: LD_INT 0
68634: PUSH
68635: LD_INT 0
68637: PUSH
68638: LD_INT 0
68640: PUSH
68641: LD_INT 0
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: PUSH
68653: LD_STRING E
68655: PUSH
68656: LD_INT 0
68658: PUSH
68659: LD_INT 0
68661: PUSH
68662: LD_VAR 0 3
68666: PUSH
68667: LD_INT 0
68669: PUSH
68670: LD_INT 0
68672: PUSH
68673: LD_INT 0
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PPUSH
68689: CALL_OW 447
// end ;
68693: LD_VAR 0 2
68697: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68698: LD_INT 0
68700: PPUSH
68701: PPUSH
68702: PPUSH
// tmp := [ ] ;
68703: LD_ADDR_VAR 0 5
68707: PUSH
68708: EMPTY
68709: ST_TO_ADDR
// for i in units do
68710: LD_ADDR_VAR 0 4
68714: PUSH
68715: LD_VAR 0 1
68719: PUSH
68720: FOR_IN
68721: IFFALSE 68759
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68723: LD_ADDR_VAR 0 5
68727: PUSH
68728: LD_VAR 0 5
68732: PPUSH
68733: LD_VAR 0 5
68737: PUSH
68738: LD_INT 1
68740: PLUS
68741: PPUSH
68742: LD_VAR 0 4
68746: PPUSH
68747: CALL_OW 256
68751: PPUSH
68752: CALL_OW 2
68756: ST_TO_ADDR
68757: GO 68720
68759: POP
68760: POP
// if not tmp then
68761: LD_VAR 0 5
68765: NOT
68766: IFFALSE 68770
// exit ;
68768: GO 68818
// if asc then
68770: LD_VAR 0 2
68774: IFFALSE 68798
// result := SortListByListAsc ( units , tmp ) else
68776: LD_ADDR_VAR 0 3
68780: PUSH
68781: LD_VAR 0 1
68785: PPUSH
68786: LD_VAR 0 5
68790: PPUSH
68791: CALL_OW 76
68795: ST_TO_ADDR
68796: GO 68818
// result := SortListByListDesc ( units , tmp ) ;
68798: LD_ADDR_VAR 0 3
68802: PUSH
68803: LD_VAR 0 1
68807: PPUSH
68808: LD_VAR 0 5
68812: PPUSH
68813: CALL_OW 77
68817: ST_TO_ADDR
// end ;
68818: LD_VAR 0 3
68822: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68823: LD_INT 0
68825: PPUSH
68826: PPUSH
// task := GetTaskList ( mech ) ;
68827: LD_ADDR_VAR 0 4
68831: PUSH
68832: LD_VAR 0 1
68836: PPUSH
68837: CALL_OW 437
68841: ST_TO_ADDR
// if not task then
68842: LD_VAR 0 4
68846: NOT
68847: IFFALSE 68851
// exit ;
68849: GO 68893
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68851: LD_ADDR_VAR 0 3
68855: PUSH
68856: LD_VAR 0 4
68860: PUSH
68861: LD_INT 1
68863: ARRAY
68864: PUSH
68865: LD_INT 1
68867: ARRAY
68868: PUSH
68869: LD_STRING r
68871: EQUAL
68872: PUSH
68873: LD_VAR 0 4
68877: PUSH
68878: LD_INT 1
68880: ARRAY
68881: PUSH
68882: LD_INT 4
68884: ARRAY
68885: PUSH
68886: LD_VAR 0 2
68890: EQUAL
68891: AND
68892: ST_TO_ADDR
// end ;
68893: LD_VAR 0 3
68897: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68898: LD_INT 0
68900: PPUSH
// SetDir ( unit , d ) ;
68901: LD_VAR 0 1
68905: PPUSH
68906: LD_VAR 0 4
68910: PPUSH
68911: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68915: LD_VAR 0 1
68919: PPUSH
68920: LD_VAR 0 2
68924: PPUSH
68925: LD_VAR 0 3
68929: PPUSH
68930: LD_VAR 0 5
68934: PPUSH
68935: CALL_OW 48
// end ;
68939: LD_VAR 0 6
68943: RET
// export function ToNaturalNumber ( number ) ; begin
68944: LD_INT 0
68946: PPUSH
// result := number div 1 ;
68947: LD_ADDR_VAR 0 2
68951: PUSH
68952: LD_VAR 0 1
68956: PUSH
68957: LD_INT 1
68959: DIV
68960: ST_TO_ADDR
// if number < 0 then
68961: LD_VAR 0 1
68965: PUSH
68966: LD_INT 0
68968: LESS
68969: IFFALSE 68979
// result := 0 ;
68971: LD_ADDR_VAR 0 2
68975: PUSH
68976: LD_INT 0
68978: ST_TO_ADDR
// end ;
68979: LD_VAR 0 2
68983: RET
// export function SortByClass ( units , class ) ; var un ; begin
68984: LD_INT 0
68986: PPUSH
68987: PPUSH
// if not units or not class then
68988: LD_VAR 0 1
68992: NOT
68993: PUSH
68994: LD_VAR 0 2
68998: NOT
68999: OR
69000: IFFALSE 69004
// exit ;
69002: GO 69099
// result := [ ] ;
69004: LD_ADDR_VAR 0 3
69008: PUSH
69009: EMPTY
69010: ST_TO_ADDR
// for un in units do
69011: LD_ADDR_VAR 0 4
69015: PUSH
69016: LD_VAR 0 1
69020: PUSH
69021: FOR_IN
69022: IFFALSE 69097
// if GetClass ( un ) = class then
69024: LD_VAR 0 4
69028: PPUSH
69029: CALL_OW 257
69033: PUSH
69034: LD_VAR 0 2
69038: EQUAL
69039: IFFALSE 69066
// result := Insert ( result , 1 , un ) else
69041: LD_ADDR_VAR 0 3
69045: PUSH
69046: LD_VAR 0 3
69050: PPUSH
69051: LD_INT 1
69053: PPUSH
69054: LD_VAR 0 4
69058: PPUSH
69059: CALL_OW 2
69063: ST_TO_ADDR
69064: GO 69095
// result := Replace ( result , result + 1 , un ) ;
69066: LD_ADDR_VAR 0 3
69070: PUSH
69071: LD_VAR 0 3
69075: PPUSH
69076: LD_VAR 0 3
69080: PUSH
69081: LD_INT 1
69083: PLUS
69084: PPUSH
69085: LD_VAR 0 4
69089: PPUSH
69090: CALL_OW 1
69094: ST_TO_ADDR
69095: GO 69021
69097: POP
69098: POP
// end ;
69099: LD_VAR 0 3
69103: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69104: LD_INT 0
69106: PPUSH
69107: PPUSH
69108: PPUSH
69109: PPUSH
69110: PPUSH
69111: PPUSH
69112: PPUSH
// result := [ ] ;
69113: LD_ADDR_VAR 0 4
69117: PUSH
69118: EMPTY
69119: ST_TO_ADDR
// if x - r < 0 then
69120: LD_VAR 0 1
69124: PUSH
69125: LD_VAR 0 3
69129: MINUS
69130: PUSH
69131: LD_INT 0
69133: LESS
69134: IFFALSE 69146
// min_x := 0 else
69136: LD_ADDR_VAR 0 8
69140: PUSH
69141: LD_INT 0
69143: ST_TO_ADDR
69144: GO 69162
// min_x := x - r ;
69146: LD_ADDR_VAR 0 8
69150: PUSH
69151: LD_VAR 0 1
69155: PUSH
69156: LD_VAR 0 3
69160: MINUS
69161: ST_TO_ADDR
// if y - r < 0 then
69162: LD_VAR 0 2
69166: PUSH
69167: LD_VAR 0 3
69171: MINUS
69172: PUSH
69173: LD_INT 0
69175: LESS
69176: IFFALSE 69188
// min_y := 0 else
69178: LD_ADDR_VAR 0 7
69182: PUSH
69183: LD_INT 0
69185: ST_TO_ADDR
69186: GO 69204
// min_y := y - r ;
69188: LD_ADDR_VAR 0 7
69192: PUSH
69193: LD_VAR 0 2
69197: PUSH
69198: LD_VAR 0 3
69202: MINUS
69203: ST_TO_ADDR
// max_x := x + r ;
69204: LD_ADDR_VAR 0 9
69208: PUSH
69209: LD_VAR 0 1
69213: PUSH
69214: LD_VAR 0 3
69218: PLUS
69219: ST_TO_ADDR
// max_y := y + r ;
69220: LD_ADDR_VAR 0 10
69224: PUSH
69225: LD_VAR 0 2
69229: PUSH
69230: LD_VAR 0 3
69234: PLUS
69235: ST_TO_ADDR
// for _x = min_x to max_x do
69236: LD_ADDR_VAR 0 5
69240: PUSH
69241: DOUBLE
69242: LD_VAR 0 8
69246: DEC
69247: ST_TO_ADDR
69248: LD_VAR 0 9
69252: PUSH
69253: FOR_TO
69254: IFFALSE 69355
// for _y = min_y to max_y do
69256: LD_ADDR_VAR 0 6
69260: PUSH
69261: DOUBLE
69262: LD_VAR 0 7
69266: DEC
69267: ST_TO_ADDR
69268: LD_VAR 0 10
69272: PUSH
69273: FOR_TO
69274: IFFALSE 69351
// begin if not ValidHex ( _x , _y ) then
69276: LD_VAR 0 5
69280: PPUSH
69281: LD_VAR 0 6
69285: PPUSH
69286: CALL_OW 488
69290: NOT
69291: IFFALSE 69295
// continue ;
69293: GO 69273
// if GetResourceTypeXY ( _x , _y ) then
69295: LD_VAR 0 5
69299: PPUSH
69300: LD_VAR 0 6
69304: PPUSH
69305: CALL_OW 283
69309: IFFALSE 69349
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69311: LD_ADDR_VAR 0 4
69315: PUSH
69316: LD_VAR 0 4
69320: PPUSH
69321: LD_VAR 0 4
69325: PUSH
69326: LD_INT 1
69328: PLUS
69329: PPUSH
69330: LD_VAR 0 5
69334: PUSH
69335: LD_VAR 0 6
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PPUSH
69344: CALL_OW 1
69348: ST_TO_ADDR
// end ;
69349: GO 69273
69351: POP
69352: POP
69353: GO 69253
69355: POP
69356: POP
// end ;
69357: LD_VAR 0 4
69361: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69362: LD_INT 0
69364: PPUSH
69365: PPUSH
69366: PPUSH
69367: PPUSH
69368: PPUSH
69369: PPUSH
69370: PPUSH
69371: PPUSH
// if not units then
69372: LD_VAR 0 1
69376: NOT
69377: IFFALSE 69381
// exit ;
69379: GO 69905
// result := UnitFilter ( units , [ f_ok ] ) ;
69381: LD_ADDR_VAR 0 3
69385: PUSH
69386: LD_VAR 0 1
69390: PPUSH
69391: LD_INT 50
69393: PUSH
69394: EMPTY
69395: LIST
69396: PPUSH
69397: CALL_OW 72
69401: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69402: LD_ADDR_VAR 0 8
69406: PUSH
69407: LD_VAR 0 1
69411: PUSH
69412: LD_INT 1
69414: ARRAY
69415: PPUSH
69416: CALL_OW 255
69420: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69421: LD_ADDR_VAR 0 10
69425: PUSH
69426: LD_INT 29
69428: PUSH
69429: LD_INT 91
69431: PUSH
69432: LD_INT 49
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: LIST
69439: ST_TO_ADDR
// if not result then
69440: LD_VAR 0 3
69444: NOT
69445: IFFALSE 69449
// exit ;
69447: GO 69905
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69449: LD_ADDR_VAR 0 5
69453: PUSH
69454: LD_INT 81
69456: PUSH
69457: LD_VAR 0 8
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PPUSH
69466: CALL_OW 69
69470: ST_TO_ADDR
// for i in result do
69471: LD_ADDR_VAR 0 4
69475: PUSH
69476: LD_VAR 0 3
69480: PUSH
69481: FOR_IN
69482: IFFALSE 69903
// begin tag := GetTag ( i ) + 1 ;
69484: LD_ADDR_VAR 0 9
69488: PUSH
69489: LD_VAR 0 4
69493: PPUSH
69494: CALL_OW 110
69498: PUSH
69499: LD_INT 1
69501: PLUS
69502: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69503: LD_ADDR_VAR 0 7
69507: PUSH
69508: LD_VAR 0 4
69512: PPUSH
69513: CALL_OW 250
69517: PPUSH
69518: LD_VAR 0 4
69522: PPUSH
69523: CALL_OW 251
69527: PPUSH
69528: LD_INT 6
69530: PPUSH
69531: CALL 69104 0 3
69535: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69536: LD_VAR 0 4
69540: PPUSH
69541: CALL_OW 247
69545: PUSH
69546: LD_INT 2
69548: EQUAL
69549: PUSH
69550: LD_VAR 0 7
69554: AND
69555: PUSH
69556: LD_VAR 0 4
69560: PPUSH
69561: CALL_OW 264
69565: PUSH
69566: LD_VAR 0 10
69570: IN
69571: NOT
69572: AND
69573: IFFALSE 69612
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69575: LD_VAR 0 4
69579: PPUSH
69580: LD_VAR 0 7
69584: PUSH
69585: LD_INT 1
69587: ARRAY
69588: PUSH
69589: LD_INT 1
69591: ARRAY
69592: PPUSH
69593: LD_VAR 0 7
69597: PUSH
69598: LD_INT 1
69600: ARRAY
69601: PUSH
69602: LD_INT 2
69604: ARRAY
69605: PPUSH
69606: CALL_OW 116
69610: GO 69901
// if path > tag then
69612: LD_VAR 0 2
69616: PUSH
69617: LD_VAR 0 9
69621: GREATER
69622: IFFALSE 69830
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69624: LD_ADDR_VAR 0 6
69628: PUSH
69629: LD_VAR 0 5
69633: PPUSH
69634: LD_INT 91
69636: PUSH
69637: LD_VAR 0 4
69641: PUSH
69642: LD_INT 8
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: LIST
69649: PPUSH
69650: CALL_OW 72
69654: ST_TO_ADDR
// if nearEnemy then
69655: LD_VAR 0 6
69659: IFFALSE 69728
// begin if GetWeapon ( i ) = ru_time_lapser then
69661: LD_VAR 0 4
69665: PPUSH
69666: CALL_OW 264
69670: PUSH
69671: LD_INT 49
69673: EQUAL
69674: IFFALSE 69702
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69676: LD_VAR 0 4
69680: PPUSH
69681: LD_VAR 0 6
69685: PPUSH
69686: LD_VAR 0 4
69690: PPUSH
69691: CALL_OW 74
69695: PPUSH
69696: CALL_OW 112
69700: GO 69726
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69702: LD_VAR 0 4
69706: PPUSH
69707: LD_VAR 0 6
69711: PPUSH
69712: LD_VAR 0 4
69716: PPUSH
69717: CALL_OW 74
69721: PPUSH
69722: CALL 70830 0 2
// end else
69726: GO 69828
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69728: LD_VAR 0 4
69732: PPUSH
69733: LD_VAR 0 2
69737: PUSH
69738: LD_VAR 0 9
69742: ARRAY
69743: PUSH
69744: LD_INT 1
69746: ARRAY
69747: PPUSH
69748: LD_VAR 0 2
69752: PUSH
69753: LD_VAR 0 9
69757: ARRAY
69758: PUSH
69759: LD_INT 2
69761: ARRAY
69762: PPUSH
69763: CALL_OW 297
69767: PUSH
69768: LD_INT 6
69770: GREATER
69771: IFFALSE 69814
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69773: LD_VAR 0 4
69777: PPUSH
69778: LD_VAR 0 2
69782: PUSH
69783: LD_VAR 0 9
69787: ARRAY
69788: PUSH
69789: LD_INT 1
69791: ARRAY
69792: PPUSH
69793: LD_VAR 0 2
69797: PUSH
69798: LD_VAR 0 9
69802: ARRAY
69803: PUSH
69804: LD_INT 2
69806: ARRAY
69807: PPUSH
69808: CALL_OW 114
69812: GO 69828
// SetTag ( i , tag ) ;
69814: LD_VAR 0 4
69818: PPUSH
69819: LD_VAR 0 9
69823: PPUSH
69824: CALL_OW 109
// end else
69828: GO 69901
// if enemy then
69830: LD_VAR 0 5
69834: IFFALSE 69901
// begin if GetWeapon ( i ) = ru_time_lapser then
69836: LD_VAR 0 4
69840: PPUSH
69841: CALL_OW 264
69845: PUSH
69846: LD_INT 49
69848: EQUAL
69849: IFFALSE 69877
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69851: LD_VAR 0 4
69855: PPUSH
69856: LD_VAR 0 5
69860: PPUSH
69861: LD_VAR 0 4
69865: PPUSH
69866: CALL_OW 74
69870: PPUSH
69871: CALL_OW 112
69875: GO 69901
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69877: LD_VAR 0 4
69881: PPUSH
69882: LD_VAR 0 5
69886: PPUSH
69887: LD_VAR 0 4
69891: PPUSH
69892: CALL_OW 74
69896: PPUSH
69897: CALL 70830 0 2
// end ; end ;
69901: GO 69481
69903: POP
69904: POP
// end ;
69905: LD_VAR 0 3
69909: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69910: LD_INT 0
69912: PPUSH
69913: PPUSH
69914: PPUSH
// if not unit or IsInUnit ( unit ) then
69915: LD_VAR 0 1
69919: NOT
69920: PUSH
69921: LD_VAR 0 1
69925: PPUSH
69926: CALL_OW 310
69930: OR
69931: IFFALSE 69935
// exit ;
69933: GO 70026
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69935: LD_ADDR_VAR 0 4
69939: PUSH
69940: LD_VAR 0 1
69944: PPUSH
69945: CALL_OW 250
69949: PPUSH
69950: LD_VAR 0 2
69954: PPUSH
69955: LD_INT 1
69957: PPUSH
69958: CALL_OW 272
69962: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69963: LD_ADDR_VAR 0 5
69967: PUSH
69968: LD_VAR 0 1
69972: PPUSH
69973: CALL_OW 251
69977: PPUSH
69978: LD_VAR 0 2
69982: PPUSH
69983: LD_INT 1
69985: PPUSH
69986: CALL_OW 273
69990: ST_TO_ADDR
// if ValidHex ( x , y ) then
69991: LD_VAR 0 4
69995: PPUSH
69996: LD_VAR 0 5
70000: PPUSH
70001: CALL_OW 488
70005: IFFALSE 70026
// ComTurnXY ( unit , x , y ) ;
70007: LD_VAR 0 1
70011: PPUSH
70012: LD_VAR 0 4
70016: PPUSH
70017: LD_VAR 0 5
70021: PPUSH
70022: CALL_OW 118
// end ;
70026: LD_VAR 0 3
70030: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70031: LD_INT 0
70033: PPUSH
70034: PPUSH
// result := false ;
70035: LD_ADDR_VAR 0 3
70039: PUSH
70040: LD_INT 0
70042: ST_TO_ADDR
// if not units then
70043: LD_VAR 0 2
70047: NOT
70048: IFFALSE 70052
// exit ;
70050: GO 70097
// for i in units do
70052: LD_ADDR_VAR 0 4
70056: PUSH
70057: LD_VAR 0 2
70061: PUSH
70062: FOR_IN
70063: IFFALSE 70095
// if See ( side , i ) then
70065: LD_VAR 0 1
70069: PPUSH
70070: LD_VAR 0 4
70074: PPUSH
70075: CALL_OW 292
70079: IFFALSE 70093
// begin result := true ;
70081: LD_ADDR_VAR 0 3
70085: PUSH
70086: LD_INT 1
70088: ST_TO_ADDR
// exit ;
70089: POP
70090: POP
70091: GO 70097
// end ;
70093: GO 70062
70095: POP
70096: POP
// end ;
70097: LD_VAR 0 3
70101: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70102: LD_INT 0
70104: PPUSH
70105: PPUSH
70106: PPUSH
70107: PPUSH
// if not unit or not points then
70108: LD_VAR 0 1
70112: NOT
70113: PUSH
70114: LD_VAR 0 2
70118: NOT
70119: OR
70120: IFFALSE 70124
// exit ;
70122: GO 70214
// dist := 99999 ;
70124: LD_ADDR_VAR 0 5
70128: PUSH
70129: LD_INT 99999
70131: ST_TO_ADDR
// for i in points do
70132: LD_ADDR_VAR 0 4
70136: PUSH
70137: LD_VAR 0 2
70141: PUSH
70142: FOR_IN
70143: IFFALSE 70212
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70145: LD_ADDR_VAR 0 6
70149: PUSH
70150: LD_VAR 0 1
70154: PPUSH
70155: LD_VAR 0 4
70159: PUSH
70160: LD_INT 1
70162: ARRAY
70163: PPUSH
70164: LD_VAR 0 4
70168: PUSH
70169: LD_INT 2
70171: ARRAY
70172: PPUSH
70173: CALL_OW 297
70177: ST_TO_ADDR
// if tmpDist < dist then
70178: LD_VAR 0 6
70182: PUSH
70183: LD_VAR 0 5
70187: LESS
70188: IFFALSE 70210
// begin result := i ;
70190: LD_ADDR_VAR 0 3
70194: PUSH
70195: LD_VAR 0 4
70199: ST_TO_ADDR
// dist := tmpDist ;
70200: LD_ADDR_VAR 0 5
70204: PUSH
70205: LD_VAR 0 6
70209: ST_TO_ADDR
// end ; end ;
70210: GO 70142
70212: POP
70213: POP
// end ;
70214: LD_VAR 0 3
70218: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70219: LD_INT 0
70221: PPUSH
// uc_side := side ;
70222: LD_ADDR_OWVAR 20
70226: PUSH
70227: LD_VAR 0 1
70231: ST_TO_ADDR
// uc_nation := 3 ;
70232: LD_ADDR_OWVAR 21
70236: PUSH
70237: LD_INT 3
70239: ST_TO_ADDR
// vc_chassis := 25 ;
70240: LD_ADDR_OWVAR 37
70244: PUSH
70245: LD_INT 25
70247: ST_TO_ADDR
// vc_engine := engine_siberite ;
70248: LD_ADDR_OWVAR 39
70252: PUSH
70253: LD_INT 3
70255: ST_TO_ADDR
// vc_control := control_computer ;
70256: LD_ADDR_OWVAR 38
70260: PUSH
70261: LD_INT 3
70263: ST_TO_ADDR
// vc_weapon := 59 ;
70264: LD_ADDR_OWVAR 40
70268: PUSH
70269: LD_INT 59
70271: ST_TO_ADDR
// result := CreateVehicle ;
70272: LD_ADDR_VAR 0 5
70276: PUSH
70277: CALL_OW 45
70281: ST_TO_ADDR
// SetDir ( result , d ) ;
70282: LD_VAR 0 5
70286: PPUSH
70287: LD_VAR 0 4
70291: PPUSH
70292: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70296: LD_VAR 0 5
70300: PPUSH
70301: LD_VAR 0 2
70305: PPUSH
70306: LD_VAR 0 3
70310: PPUSH
70311: LD_INT 0
70313: PPUSH
70314: CALL_OW 48
// end ;
70318: LD_VAR 0 5
70322: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70323: LD_INT 0
70325: PPUSH
70326: PPUSH
70327: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70328: LD_ADDR_VAR 0 2
70332: PUSH
70333: LD_INT 0
70335: PUSH
70336: LD_INT 0
70338: PUSH
70339: LD_INT 0
70341: PUSH
70342: LD_INT 0
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70351: LD_VAR 0 1
70355: NOT
70356: PUSH
70357: LD_VAR 0 1
70361: PPUSH
70362: CALL_OW 264
70366: PUSH
70367: LD_INT 12
70369: PUSH
70370: LD_INT 51
70372: PUSH
70373: LD_INT 32
70375: PUSH
70376: LD_INT 89
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: IN
70385: NOT
70386: OR
70387: IFFALSE 70391
// exit ;
70389: GO 70489
// for i := 1 to 3 do
70391: LD_ADDR_VAR 0 3
70395: PUSH
70396: DOUBLE
70397: LD_INT 1
70399: DEC
70400: ST_TO_ADDR
70401: LD_INT 3
70403: PUSH
70404: FOR_TO
70405: IFFALSE 70487
// begin tmp := GetCargo ( cargo , i ) ;
70407: LD_ADDR_VAR 0 4
70411: PUSH
70412: LD_VAR 0 1
70416: PPUSH
70417: LD_VAR 0 3
70421: PPUSH
70422: CALL_OW 289
70426: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70427: LD_ADDR_VAR 0 2
70431: PUSH
70432: LD_VAR 0 2
70436: PPUSH
70437: LD_VAR 0 3
70441: PPUSH
70442: LD_VAR 0 4
70446: PPUSH
70447: CALL_OW 1
70451: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70452: LD_ADDR_VAR 0 2
70456: PUSH
70457: LD_VAR 0 2
70461: PPUSH
70462: LD_INT 4
70464: PPUSH
70465: LD_VAR 0 2
70469: PUSH
70470: LD_INT 4
70472: ARRAY
70473: PUSH
70474: LD_VAR 0 4
70478: PLUS
70479: PPUSH
70480: CALL_OW 1
70484: ST_TO_ADDR
// end ;
70485: GO 70404
70487: POP
70488: POP
// end ;
70489: LD_VAR 0 2
70493: RET
// export function Length ( array ) ; begin
70494: LD_INT 0
70496: PPUSH
// result := array + 0 ;
70497: LD_ADDR_VAR 0 2
70501: PUSH
70502: LD_VAR 0 1
70506: PUSH
70507: LD_INT 0
70509: PLUS
70510: ST_TO_ADDR
// end ;
70511: LD_VAR 0 2
70515: RET
// export function PrepareArray ( array ) ; begin
70516: LD_INT 0
70518: PPUSH
// result := array diff 0 ;
70519: LD_ADDR_VAR 0 2
70523: PUSH
70524: LD_VAR 0 1
70528: PUSH
70529: LD_INT 0
70531: DIFF
70532: ST_TO_ADDR
// if not result [ 1 ] then
70533: LD_VAR 0 2
70537: PUSH
70538: LD_INT 1
70540: ARRAY
70541: NOT
70542: IFFALSE 70562
// result := Delete ( result , 1 ) ;
70544: LD_ADDR_VAR 0 2
70548: PUSH
70549: LD_VAR 0 2
70553: PPUSH
70554: LD_INT 1
70556: PPUSH
70557: CALL_OW 3
70561: ST_TO_ADDR
// end ;
70562: LD_VAR 0 2
70566: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70567: LD_INT 0
70569: PPUSH
70570: PPUSH
70571: PPUSH
70572: PPUSH
// sibRocketRange := 25 ;
70573: LD_ADDR_VAR 0 6
70577: PUSH
70578: LD_INT 25
70580: ST_TO_ADDR
// result := false ;
70581: LD_ADDR_VAR 0 4
70585: PUSH
70586: LD_INT 0
70588: ST_TO_ADDR
// for i := 0 to 5 do
70589: LD_ADDR_VAR 0 5
70593: PUSH
70594: DOUBLE
70595: LD_INT 0
70597: DEC
70598: ST_TO_ADDR
70599: LD_INT 5
70601: PUSH
70602: FOR_TO
70603: IFFALSE 70670
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70605: LD_VAR 0 1
70609: PPUSH
70610: LD_VAR 0 5
70614: PPUSH
70615: LD_VAR 0 6
70619: PPUSH
70620: CALL_OW 272
70624: PPUSH
70625: LD_VAR 0 2
70629: PPUSH
70630: LD_VAR 0 5
70634: PPUSH
70635: LD_VAR 0 6
70639: PPUSH
70640: CALL_OW 273
70644: PPUSH
70645: LD_VAR 0 3
70649: PPUSH
70650: CALL_OW 309
70654: IFFALSE 70668
// begin result := true ;
70656: LD_ADDR_VAR 0 4
70660: PUSH
70661: LD_INT 1
70663: ST_TO_ADDR
// exit ;
70664: POP
70665: POP
70666: GO 70672
// end ;
70668: GO 70602
70670: POP
70671: POP
// end ;
70672: LD_VAR 0 4
70676: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70677: LD_INT 0
70679: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70680: LD_VAR 0 1
70684: PPUSH
70685: LD_VAR 0 2
70689: PPUSH
70690: LD_INT 0
70692: PPUSH
70693: LD_INT 0
70695: PPUSH
70696: LD_INT 1
70698: PPUSH
70699: LD_INT 0
70701: PPUSH
70702: CALL_OW 587
// end ;
70706: LD_VAR 0 3
70710: RET
// export function CenterOnNow ( unit ) ; begin
70711: LD_INT 0
70713: PPUSH
// result := IsInUnit ( unit ) ;
70714: LD_ADDR_VAR 0 2
70718: PUSH
70719: LD_VAR 0 1
70723: PPUSH
70724: CALL_OW 310
70728: ST_TO_ADDR
// if not result then
70729: LD_VAR 0 2
70733: NOT
70734: IFFALSE 70746
// result := unit ;
70736: LD_ADDR_VAR 0 2
70740: PUSH
70741: LD_VAR 0 1
70745: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70746: LD_VAR 0 1
70750: PPUSH
70751: CALL_OW 87
// end ;
70755: LD_VAR 0 2
70759: RET
// export function ComMoveHex ( unit , hex ) ; begin
70760: LD_INT 0
70762: PPUSH
// if not hex then
70763: LD_VAR 0 2
70767: NOT
70768: IFFALSE 70772
// exit ;
70770: GO 70825
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70772: LD_VAR 0 2
70776: PUSH
70777: LD_INT 1
70779: ARRAY
70780: PPUSH
70781: LD_VAR 0 2
70785: PUSH
70786: LD_INT 2
70788: ARRAY
70789: PPUSH
70790: CALL_OW 428
70794: IFFALSE 70798
// exit ;
70796: GO 70825
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70798: LD_VAR 0 1
70802: PPUSH
70803: LD_VAR 0 2
70807: PUSH
70808: LD_INT 1
70810: ARRAY
70811: PPUSH
70812: LD_VAR 0 2
70816: PUSH
70817: LD_INT 2
70819: ARRAY
70820: PPUSH
70821: CALL_OW 111
// end ;
70825: LD_VAR 0 3
70829: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70830: LD_INT 0
70832: PPUSH
70833: PPUSH
70834: PPUSH
// if not unit or not enemy then
70835: LD_VAR 0 1
70839: NOT
70840: PUSH
70841: LD_VAR 0 2
70845: NOT
70846: OR
70847: IFFALSE 70851
// exit ;
70849: GO 70975
// x := GetX ( enemy ) ;
70851: LD_ADDR_VAR 0 4
70855: PUSH
70856: LD_VAR 0 2
70860: PPUSH
70861: CALL_OW 250
70865: ST_TO_ADDR
// y := GetY ( enemy ) ;
70866: LD_ADDR_VAR 0 5
70870: PUSH
70871: LD_VAR 0 2
70875: PPUSH
70876: CALL_OW 251
70880: ST_TO_ADDR
// if ValidHex ( x , y ) then
70881: LD_VAR 0 4
70885: PPUSH
70886: LD_VAR 0 5
70890: PPUSH
70891: CALL_OW 488
70895: IFFALSE 70975
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
70897: LD_VAR 0 2
70901: PPUSH
70902: CALL_OW 247
70906: PUSH
70907: LD_INT 3
70909: PUSH
70910: LD_INT 2
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: IN
70917: PUSH
70918: LD_VAR 0 1
70922: PPUSH
70923: CALL_OW 255
70927: PPUSH
70928: LD_VAR 0 2
70932: PPUSH
70933: CALL_OW 292
70937: AND
70938: IFFALSE 70956
// ComAttackUnit ( unit , enemy ) else
70940: LD_VAR 0 1
70944: PPUSH
70945: LD_VAR 0 2
70949: PPUSH
70950: CALL_OW 115
70954: GO 70975
// ComAgressiveMove ( unit , x , y ) ;
70956: LD_VAR 0 1
70960: PPUSH
70961: LD_VAR 0 4
70965: PPUSH
70966: LD_VAR 0 5
70970: PPUSH
70971: CALL_OW 114
// end ; end_of_file end_of_file
70975: LD_VAR 0 3
70979: RET
// export globalGameSaveCounter ; every 0 0$1 do
70980: GO 70982
70982: DISABLE
// begin enable ;
70983: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
70984: LD_STRING updateTimer(
70986: PUSH
70987: LD_OWVAR 1
70991: STR
70992: PUSH
70993: LD_STRING );
70995: STR
70996: PPUSH
70997: CALL_OW 559
// end ;
71001: END
// every 0 0$1 do
71002: GO 71004
71004: DISABLE
// begin globalGameSaveCounter := 0 ;
71005: LD_ADDR_EXP 63
71009: PUSH
71010: LD_INT 0
71012: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
71013: LD_STRING setGameSaveCounter(0)
71015: PPUSH
71016: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
71020: LD_STRING initStreamRollete();
71022: PPUSH
71023: CALL_OW 559
// InitStreamMode ;
71027: CALL 72353 0 0
// DefineStreamItems ( false ) ;
71031: LD_INT 0
71033: PPUSH
71034: CALL 72817 0 1
// end ;
71038: END
// export function SOS_MapStart ( ) ; begin
71039: LD_INT 0
71041: PPUSH
// if streamModeActive then
71042: LD_EXP 64
71046: IFFALSE 71055
// DefineStreamItems ( true ) ;
71048: LD_INT 1
71050: PPUSH
71051: CALL 72817 0 1
// UpdateLuaVariables ( ) ;
71055: CALL 71072 0 0
// UpdateFactoryWaypoints ( ) ;
71059: CALL 85686 0 0
// UpdateWarehouseGatheringPoints ( ) ;
71063: CALL 85943 0 0
// end ;
71067: LD_VAR 0 1
71071: RET
// function UpdateLuaVariables ( ) ; begin
71072: LD_INT 0
71074: PPUSH
// if globalGameSaveCounter then
71075: LD_EXP 63
71079: IFFALSE 71113
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
71081: LD_ADDR_EXP 63
71085: PUSH
71086: LD_EXP 63
71090: PPUSH
71091: CALL 68119 0 1
71095: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
71096: LD_STRING setGameSaveCounter(
71098: PUSH
71099: LD_EXP 63
71103: STR
71104: PUSH
71105: LD_STRING )
71107: STR
71108: PPUSH
71109: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
71113: LD_STRING setGameDifficulty(
71115: PUSH
71116: LD_OWVAR 67
71120: STR
71121: PUSH
71122: LD_STRING )
71124: STR
71125: PPUSH
71126: CALL_OW 559
// end ;
71130: LD_VAR 0 1
71134: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
71135: LD_INT 0
71137: PPUSH
// if p2 = stream_mode then
71138: LD_VAR 0 2
71142: PUSH
71143: LD_INT 100
71145: EQUAL
71146: IFFALSE 72149
// begin if not StreamModeActive then
71148: LD_EXP 64
71152: NOT
71153: IFFALSE 71163
// StreamModeActive := true ;
71155: LD_ADDR_EXP 64
71159: PUSH
71160: LD_INT 1
71162: ST_TO_ADDR
// if p3 = 0 then
71163: LD_VAR 0 3
71167: PUSH
71168: LD_INT 0
71170: EQUAL
71171: IFFALSE 71177
// InitStreamMode ;
71173: CALL 72353 0 0
// if p3 = 1 then
71177: LD_VAR 0 3
71181: PUSH
71182: LD_INT 1
71184: EQUAL
71185: IFFALSE 71195
// sRocket := true ;
71187: LD_ADDR_EXP 69
71191: PUSH
71192: LD_INT 1
71194: ST_TO_ADDR
// if p3 = 2 then
71195: LD_VAR 0 3
71199: PUSH
71200: LD_INT 2
71202: EQUAL
71203: IFFALSE 71213
// sSpeed := true ;
71205: LD_ADDR_EXP 68
71209: PUSH
71210: LD_INT 1
71212: ST_TO_ADDR
// if p3 = 3 then
71213: LD_VAR 0 3
71217: PUSH
71218: LD_INT 3
71220: EQUAL
71221: IFFALSE 71231
// sEngine := true ;
71223: LD_ADDR_EXP 70
71227: PUSH
71228: LD_INT 1
71230: ST_TO_ADDR
// if p3 = 4 then
71231: LD_VAR 0 3
71235: PUSH
71236: LD_INT 4
71238: EQUAL
71239: IFFALSE 71249
// sSpec := true ;
71241: LD_ADDR_EXP 67
71245: PUSH
71246: LD_INT 1
71248: ST_TO_ADDR
// if p3 = 5 then
71249: LD_VAR 0 3
71253: PUSH
71254: LD_INT 5
71256: EQUAL
71257: IFFALSE 71267
// sLevel := true ;
71259: LD_ADDR_EXP 71
71263: PUSH
71264: LD_INT 1
71266: ST_TO_ADDR
// if p3 = 6 then
71267: LD_VAR 0 3
71271: PUSH
71272: LD_INT 6
71274: EQUAL
71275: IFFALSE 71285
// sArmoury := true ;
71277: LD_ADDR_EXP 72
71281: PUSH
71282: LD_INT 1
71284: ST_TO_ADDR
// if p3 = 7 then
71285: LD_VAR 0 3
71289: PUSH
71290: LD_INT 7
71292: EQUAL
71293: IFFALSE 71303
// sRadar := true ;
71295: LD_ADDR_EXP 73
71299: PUSH
71300: LD_INT 1
71302: ST_TO_ADDR
// if p3 = 8 then
71303: LD_VAR 0 3
71307: PUSH
71308: LD_INT 8
71310: EQUAL
71311: IFFALSE 71321
// sBunker := true ;
71313: LD_ADDR_EXP 74
71317: PUSH
71318: LD_INT 1
71320: ST_TO_ADDR
// if p3 = 9 then
71321: LD_VAR 0 3
71325: PUSH
71326: LD_INT 9
71328: EQUAL
71329: IFFALSE 71339
// sHack := true ;
71331: LD_ADDR_EXP 75
71335: PUSH
71336: LD_INT 1
71338: ST_TO_ADDR
// if p3 = 10 then
71339: LD_VAR 0 3
71343: PUSH
71344: LD_INT 10
71346: EQUAL
71347: IFFALSE 71357
// sFire := true ;
71349: LD_ADDR_EXP 76
71353: PUSH
71354: LD_INT 1
71356: ST_TO_ADDR
// if p3 = 11 then
71357: LD_VAR 0 3
71361: PUSH
71362: LD_INT 11
71364: EQUAL
71365: IFFALSE 71375
// sRefresh := true ;
71367: LD_ADDR_EXP 77
71371: PUSH
71372: LD_INT 1
71374: ST_TO_ADDR
// if p3 = 12 then
71375: LD_VAR 0 3
71379: PUSH
71380: LD_INT 12
71382: EQUAL
71383: IFFALSE 71393
// sExp := true ;
71385: LD_ADDR_EXP 78
71389: PUSH
71390: LD_INT 1
71392: ST_TO_ADDR
// if p3 = 13 then
71393: LD_VAR 0 3
71397: PUSH
71398: LD_INT 13
71400: EQUAL
71401: IFFALSE 71411
// sDepot := true ;
71403: LD_ADDR_EXP 79
71407: PUSH
71408: LD_INT 1
71410: ST_TO_ADDR
// if p3 = 14 then
71411: LD_VAR 0 3
71415: PUSH
71416: LD_INT 14
71418: EQUAL
71419: IFFALSE 71429
// sFlag := true ;
71421: LD_ADDR_EXP 80
71425: PUSH
71426: LD_INT 1
71428: ST_TO_ADDR
// if p3 = 15 then
71429: LD_VAR 0 3
71433: PUSH
71434: LD_INT 15
71436: EQUAL
71437: IFFALSE 71447
// sKamikadze := true ;
71439: LD_ADDR_EXP 88
71443: PUSH
71444: LD_INT 1
71446: ST_TO_ADDR
// if p3 = 16 then
71447: LD_VAR 0 3
71451: PUSH
71452: LD_INT 16
71454: EQUAL
71455: IFFALSE 71465
// sTroll := true ;
71457: LD_ADDR_EXP 89
71461: PUSH
71462: LD_INT 1
71464: ST_TO_ADDR
// if p3 = 17 then
71465: LD_VAR 0 3
71469: PUSH
71470: LD_INT 17
71472: EQUAL
71473: IFFALSE 71483
// sSlow := true ;
71475: LD_ADDR_EXP 90
71479: PUSH
71480: LD_INT 1
71482: ST_TO_ADDR
// if p3 = 18 then
71483: LD_VAR 0 3
71487: PUSH
71488: LD_INT 18
71490: EQUAL
71491: IFFALSE 71501
// sLack := true ;
71493: LD_ADDR_EXP 91
71497: PUSH
71498: LD_INT 1
71500: ST_TO_ADDR
// if p3 = 19 then
71501: LD_VAR 0 3
71505: PUSH
71506: LD_INT 19
71508: EQUAL
71509: IFFALSE 71519
// sTank := true ;
71511: LD_ADDR_EXP 93
71515: PUSH
71516: LD_INT 1
71518: ST_TO_ADDR
// if p3 = 20 then
71519: LD_VAR 0 3
71523: PUSH
71524: LD_INT 20
71526: EQUAL
71527: IFFALSE 71537
// sRemote := true ;
71529: LD_ADDR_EXP 94
71533: PUSH
71534: LD_INT 1
71536: ST_TO_ADDR
// if p3 = 21 then
71537: LD_VAR 0 3
71541: PUSH
71542: LD_INT 21
71544: EQUAL
71545: IFFALSE 71555
// sPowell := true ;
71547: LD_ADDR_EXP 95
71551: PUSH
71552: LD_INT 1
71554: ST_TO_ADDR
// if p3 = 22 then
71555: LD_VAR 0 3
71559: PUSH
71560: LD_INT 22
71562: EQUAL
71563: IFFALSE 71573
// sTeleport := true ;
71565: LD_ADDR_EXP 98
71569: PUSH
71570: LD_INT 1
71572: ST_TO_ADDR
// if p3 = 23 then
71573: LD_VAR 0 3
71577: PUSH
71578: LD_INT 23
71580: EQUAL
71581: IFFALSE 71591
// sOilTower := true ;
71583: LD_ADDR_EXP 100
71587: PUSH
71588: LD_INT 1
71590: ST_TO_ADDR
// if p3 = 24 then
71591: LD_VAR 0 3
71595: PUSH
71596: LD_INT 24
71598: EQUAL
71599: IFFALSE 71609
// sShovel := true ;
71601: LD_ADDR_EXP 101
71605: PUSH
71606: LD_INT 1
71608: ST_TO_ADDR
// if p3 = 25 then
71609: LD_VAR 0 3
71613: PUSH
71614: LD_INT 25
71616: EQUAL
71617: IFFALSE 71627
// sSheik := true ;
71619: LD_ADDR_EXP 102
71623: PUSH
71624: LD_INT 1
71626: ST_TO_ADDR
// if p3 = 26 then
71627: LD_VAR 0 3
71631: PUSH
71632: LD_INT 26
71634: EQUAL
71635: IFFALSE 71645
// sEarthquake := true ;
71637: LD_ADDR_EXP 104
71641: PUSH
71642: LD_INT 1
71644: ST_TO_ADDR
// if p3 = 27 then
71645: LD_VAR 0 3
71649: PUSH
71650: LD_INT 27
71652: EQUAL
71653: IFFALSE 71663
// sAI := true ;
71655: LD_ADDR_EXP 105
71659: PUSH
71660: LD_INT 1
71662: ST_TO_ADDR
// if p3 = 28 then
71663: LD_VAR 0 3
71667: PUSH
71668: LD_INT 28
71670: EQUAL
71671: IFFALSE 71681
// sCargo := true ;
71673: LD_ADDR_EXP 108
71677: PUSH
71678: LD_INT 1
71680: ST_TO_ADDR
// if p3 = 29 then
71681: LD_VAR 0 3
71685: PUSH
71686: LD_INT 29
71688: EQUAL
71689: IFFALSE 71699
// sDLaser := true ;
71691: LD_ADDR_EXP 109
71695: PUSH
71696: LD_INT 1
71698: ST_TO_ADDR
// if p3 = 30 then
71699: LD_VAR 0 3
71703: PUSH
71704: LD_INT 30
71706: EQUAL
71707: IFFALSE 71717
// sExchange := true ;
71709: LD_ADDR_EXP 110
71713: PUSH
71714: LD_INT 1
71716: ST_TO_ADDR
// if p3 = 31 then
71717: LD_VAR 0 3
71721: PUSH
71722: LD_INT 31
71724: EQUAL
71725: IFFALSE 71735
// sFac := true ;
71727: LD_ADDR_EXP 111
71731: PUSH
71732: LD_INT 1
71734: ST_TO_ADDR
// if p3 = 32 then
71735: LD_VAR 0 3
71739: PUSH
71740: LD_INT 32
71742: EQUAL
71743: IFFALSE 71753
// sPower := true ;
71745: LD_ADDR_EXP 112
71749: PUSH
71750: LD_INT 1
71752: ST_TO_ADDR
// if p3 = 33 then
71753: LD_VAR 0 3
71757: PUSH
71758: LD_INT 33
71760: EQUAL
71761: IFFALSE 71771
// sRandom := true ;
71763: LD_ADDR_EXP 113
71767: PUSH
71768: LD_INT 1
71770: ST_TO_ADDR
// if p3 = 34 then
71771: LD_VAR 0 3
71775: PUSH
71776: LD_INT 34
71778: EQUAL
71779: IFFALSE 71789
// sShield := true ;
71781: LD_ADDR_EXP 114
71785: PUSH
71786: LD_INT 1
71788: ST_TO_ADDR
// if p3 = 35 then
71789: LD_VAR 0 3
71793: PUSH
71794: LD_INT 35
71796: EQUAL
71797: IFFALSE 71807
// sTime := true ;
71799: LD_ADDR_EXP 115
71803: PUSH
71804: LD_INT 1
71806: ST_TO_ADDR
// if p3 = 36 then
71807: LD_VAR 0 3
71811: PUSH
71812: LD_INT 36
71814: EQUAL
71815: IFFALSE 71825
// sTools := true ;
71817: LD_ADDR_EXP 116
71821: PUSH
71822: LD_INT 1
71824: ST_TO_ADDR
// if p3 = 101 then
71825: LD_VAR 0 3
71829: PUSH
71830: LD_INT 101
71832: EQUAL
71833: IFFALSE 71843
// sSold := true ;
71835: LD_ADDR_EXP 81
71839: PUSH
71840: LD_INT 1
71842: ST_TO_ADDR
// if p3 = 102 then
71843: LD_VAR 0 3
71847: PUSH
71848: LD_INT 102
71850: EQUAL
71851: IFFALSE 71861
// sDiff := true ;
71853: LD_ADDR_EXP 82
71857: PUSH
71858: LD_INT 1
71860: ST_TO_ADDR
// if p3 = 103 then
71861: LD_VAR 0 3
71865: PUSH
71866: LD_INT 103
71868: EQUAL
71869: IFFALSE 71879
// sFog := true ;
71871: LD_ADDR_EXP 85
71875: PUSH
71876: LD_INT 1
71878: ST_TO_ADDR
// if p3 = 104 then
71879: LD_VAR 0 3
71883: PUSH
71884: LD_INT 104
71886: EQUAL
71887: IFFALSE 71897
// sReset := true ;
71889: LD_ADDR_EXP 86
71893: PUSH
71894: LD_INT 1
71896: ST_TO_ADDR
// if p3 = 105 then
71897: LD_VAR 0 3
71901: PUSH
71902: LD_INT 105
71904: EQUAL
71905: IFFALSE 71915
// sSun := true ;
71907: LD_ADDR_EXP 87
71911: PUSH
71912: LD_INT 1
71914: ST_TO_ADDR
// if p3 = 106 then
71915: LD_VAR 0 3
71919: PUSH
71920: LD_INT 106
71922: EQUAL
71923: IFFALSE 71933
// sTiger := true ;
71925: LD_ADDR_EXP 83
71929: PUSH
71930: LD_INT 1
71932: ST_TO_ADDR
// if p3 = 107 then
71933: LD_VAR 0 3
71937: PUSH
71938: LD_INT 107
71940: EQUAL
71941: IFFALSE 71951
// sBomb := true ;
71943: LD_ADDR_EXP 84
71947: PUSH
71948: LD_INT 1
71950: ST_TO_ADDR
// if p3 = 108 then
71951: LD_VAR 0 3
71955: PUSH
71956: LD_INT 108
71958: EQUAL
71959: IFFALSE 71969
// sWound := true ;
71961: LD_ADDR_EXP 92
71965: PUSH
71966: LD_INT 1
71968: ST_TO_ADDR
// if p3 = 109 then
71969: LD_VAR 0 3
71973: PUSH
71974: LD_INT 109
71976: EQUAL
71977: IFFALSE 71987
// sBetray := true ;
71979: LD_ADDR_EXP 96
71983: PUSH
71984: LD_INT 1
71986: ST_TO_ADDR
// if p3 = 110 then
71987: LD_VAR 0 3
71991: PUSH
71992: LD_INT 110
71994: EQUAL
71995: IFFALSE 72005
// sContamin := true ;
71997: LD_ADDR_EXP 97
72001: PUSH
72002: LD_INT 1
72004: ST_TO_ADDR
// if p3 = 111 then
72005: LD_VAR 0 3
72009: PUSH
72010: LD_INT 111
72012: EQUAL
72013: IFFALSE 72023
// sOil := true ;
72015: LD_ADDR_EXP 99
72019: PUSH
72020: LD_INT 1
72022: ST_TO_ADDR
// if p3 = 112 then
72023: LD_VAR 0 3
72027: PUSH
72028: LD_INT 112
72030: EQUAL
72031: IFFALSE 72041
// sStu := true ;
72033: LD_ADDR_EXP 103
72037: PUSH
72038: LD_INT 1
72040: ST_TO_ADDR
// if p3 = 113 then
72041: LD_VAR 0 3
72045: PUSH
72046: LD_INT 113
72048: EQUAL
72049: IFFALSE 72059
// sBazooka := true ;
72051: LD_ADDR_EXP 106
72055: PUSH
72056: LD_INT 1
72058: ST_TO_ADDR
// if p3 = 114 then
72059: LD_VAR 0 3
72063: PUSH
72064: LD_INT 114
72066: EQUAL
72067: IFFALSE 72077
// sMortar := true ;
72069: LD_ADDR_EXP 107
72073: PUSH
72074: LD_INT 1
72076: ST_TO_ADDR
// if p3 = 115 then
72077: LD_VAR 0 3
72081: PUSH
72082: LD_INT 115
72084: EQUAL
72085: IFFALSE 72095
// sRanger := true ;
72087: LD_ADDR_EXP 117
72091: PUSH
72092: LD_INT 1
72094: ST_TO_ADDR
// if p3 = 116 then
72095: LD_VAR 0 3
72099: PUSH
72100: LD_INT 116
72102: EQUAL
72103: IFFALSE 72113
// sComputer := true ;
72105: LD_ADDR_EXP 118
72109: PUSH
72110: LD_INT 1
72112: ST_TO_ADDR
// if p3 = 117 then
72113: LD_VAR 0 3
72117: PUSH
72118: LD_INT 117
72120: EQUAL
72121: IFFALSE 72131
// s30 := true ;
72123: LD_ADDR_EXP 119
72127: PUSH
72128: LD_INT 1
72130: ST_TO_ADDR
// if p3 = 118 then
72131: LD_VAR 0 3
72135: PUSH
72136: LD_INT 118
72138: EQUAL
72139: IFFALSE 72149
// s60 := true ;
72141: LD_ADDR_EXP 120
72145: PUSH
72146: LD_INT 1
72148: ST_TO_ADDR
// end ; if p2 = hack_mode then
72149: LD_VAR 0 2
72153: PUSH
72154: LD_INT 101
72156: EQUAL
72157: IFFALSE 72285
// begin case p3 of 1 :
72159: LD_VAR 0 3
72163: PUSH
72164: LD_INT 1
72166: DOUBLE
72167: EQUAL
72168: IFTRUE 72172
72170: GO 72179
72172: POP
// hHackUnlimitedResources ; 2 :
72173: CALL 84432 0 0
72177: GO 72285
72179: LD_INT 2
72181: DOUBLE
72182: EQUAL
72183: IFTRUE 72187
72185: GO 72194
72187: POP
// hHackSetLevel10 ; 3 :
72188: CALL 84565 0 0
72192: GO 72285
72194: LD_INT 3
72196: DOUBLE
72197: EQUAL
72198: IFTRUE 72202
72200: GO 72209
72202: POP
// hHackSetLevel10YourUnits ; 4 :
72203: CALL 84650 0 0
72207: GO 72285
72209: LD_INT 4
72211: DOUBLE
72212: EQUAL
72213: IFTRUE 72217
72215: GO 72224
72217: POP
// hHackInvincible ; 5 :
72218: CALL 85098 0 0
72222: GO 72285
72224: LD_INT 5
72226: DOUBLE
72227: EQUAL
72228: IFTRUE 72232
72230: GO 72239
72232: POP
// hHackInvisible ; 6 :
72233: CALL 85209 0 0
72237: GO 72285
72239: LD_INT 6
72241: DOUBLE
72242: EQUAL
72243: IFTRUE 72247
72245: GO 72254
72247: POP
// hHackChangeYourSide ; 7 :
72248: CALL 85266 0 0
72252: GO 72285
72254: LD_INT 7
72256: DOUBLE
72257: EQUAL
72258: IFTRUE 72262
72260: GO 72269
72262: POP
// hHackChangeUnitSide ; 8 :
72263: CALL 85308 0 0
72267: GO 72285
72269: LD_INT 8
72271: DOUBLE
72272: EQUAL
72273: IFTRUE 72277
72275: GO 72284
72277: POP
// hHackFog ; end ;
72278: CALL 85409 0 0
72282: GO 72285
72284: POP
// end ; if p2 = game_save_mode then
72285: LD_VAR 0 2
72289: PUSH
72290: LD_INT 102
72292: EQUAL
72293: IFFALSE 72348
// begin if p3 = 1 then
72295: LD_VAR 0 3
72299: PUSH
72300: LD_INT 1
72302: EQUAL
72303: IFFALSE 72315
// globalGameSaveCounter := p4 ;
72305: LD_ADDR_EXP 63
72309: PUSH
72310: LD_VAR 0 4
72314: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
72315: LD_VAR 0 3
72319: PUSH
72320: LD_INT 2
72322: EQUAL
72323: PUSH
72324: LD_EXP 63
72328: AND
72329: IFFALSE 72348
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
72331: LD_STRING setGameSaveCounter(
72333: PUSH
72334: LD_EXP 63
72338: STR
72339: PUSH
72340: LD_STRING )
72342: STR
72343: PPUSH
72344: CALL_OW 559
// end ; end ;
72348: LD_VAR 0 7
72352: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
72353: LD_INT 0
72355: PPUSH
// streamModeActive := false ;
72356: LD_ADDR_EXP 64
72360: PUSH
72361: LD_INT 0
72363: ST_TO_ADDR
// normalCounter := 36 ;
72364: LD_ADDR_EXP 65
72368: PUSH
72369: LD_INT 36
72371: ST_TO_ADDR
// hardcoreCounter := 18 ;
72372: LD_ADDR_EXP 66
72376: PUSH
72377: LD_INT 18
72379: ST_TO_ADDR
// sRocket := false ;
72380: LD_ADDR_EXP 69
72384: PUSH
72385: LD_INT 0
72387: ST_TO_ADDR
// sSpeed := false ;
72388: LD_ADDR_EXP 68
72392: PUSH
72393: LD_INT 0
72395: ST_TO_ADDR
// sEngine := false ;
72396: LD_ADDR_EXP 70
72400: PUSH
72401: LD_INT 0
72403: ST_TO_ADDR
// sSpec := false ;
72404: LD_ADDR_EXP 67
72408: PUSH
72409: LD_INT 0
72411: ST_TO_ADDR
// sLevel := false ;
72412: LD_ADDR_EXP 71
72416: PUSH
72417: LD_INT 0
72419: ST_TO_ADDR
// sArmoury := false ;
72420: LD_ADDR_EXP 72
72424: PUSH
72425: LD_INT 0
72427: ST_TO_ADDR
// sRadar := false ;
72428: LD_ADDR_EXP 73
72432: PUSH
72433: LD_INT 0
72435: ST_TO_ADDR
// sBunker := false ;
72436: LD_ADDR_EXP 74
72440: PUSH
72441: LD_INT 0
72443: ST_TO_ADDR
// sHack := false ;
72444: LD_ADDR_EXP 75
72448: PUSH
72449: LD_INT 0
72451: ST_TO_ADDR
// sFire := false ;
72452: LD_ADDR_EXP 76
72456: PUSH
72457: LD_INT 0
72459: ST_TO_ADDR
// sRefresh := false ;
72460: LD_ADDR_EXP 77
72464: PUSH
72465: LD_INT 0
72467: ST_TO_ADDR
// sExp := false ;
72468: LD_ADDR_EXP 78
72472: PUSH
72473: LD_INT 0
72475: ST_TO_ADDR
// sDepot := false ;
72476: LD_ADDR_EXP 79
72480: PUSH
72481: LD_INT 0
72483: ST_TO_ADDR
// sFlag := false ;
72484: LD_ADDR_EXP 80
72488: PUSH
72489: LD_INT 0
72491: ST_TO_ADDR
// sKamikadze := false ;
72492: LD_ADDR_EXP 88
72496: PUSH
72497: LD_INT 0
72499: ST_TO_ADDR
// sTroll := false ;
72500: LD_ADDR_EXP 89
72504: PUSH
72505: LD_INT 0
72507: ST_TO_ADDR
// sSlow := false ;
72508: LD_ADDR_EXP 90
72512: PUSH
72513: LD_INT 0
72515: ST_TO_ADDR
// sLack := false ;
72516: LD_ADDR_EXP 91
72520: PUSH
72521: LD_INT 0
72523: ST_TO_ADDR
// sTank := false ;
72524: LD_ADDR_EXP 93
72528: PUSH
72529: LD_INT 0
72531: ST_TO_ADDR
// sRemote := false ;
72532: LD_ADDR_EXP 94
72536: PUSH
72537: LD_INT 0
72539: ST_TO_ADDR
// sPowell := false ;
72540: LD_ADDR_EXP 95
72544: PUSH
72545: LD_INT 0
72547: ST_TO_ADDR
// sTeleport := false ;
72548: LD_ADDR_EXP 98
72552: PUSH
72553: LD_INT 0
72555: ST_TO_ADDR
// sOilTower := false ;
72556: LD_ADDR_EXP 100
72560: PUSH
72561: LD_INT 0
72563: ST_TO_ADDR
// sShovel := false ;
72564: LD_ADDR_EXP 101
72568: PUSH
72569: LD_INT 0
72571: ST_TO_ADDR
// sSheik := false ;
72572: LD_ADDR_EXP 102
72576: PUSH
72577: LD_INT 0
72579: ST_TO_ADDR
// sEarthquake := false ;
72580: LD_ADDR_EXP 104
72584: PUSH
72585: LD_INT 0
72587: ST_TO_ADDR
// sAI := false ;
72588: LD_ADDR_EXP 105
72592: PUSH
72593: LD_INT 0
72595: ST_TO_ADDR
// sCargo := false ;
72596: LD_ADDR_EXP 108
72600: PUSH
72601: LD_INT 0
72603: ST_TO_ADDR
// sDLaser := false ;
72604: LD_ADDR_EXP 109
72608: PUSH
72609: LD_INT 0
72611: ST_TO_ADDR
// sExchange := false ;
72612: LD_ADDR_EXP 110
72616: PUSH
72617: LD_INT 0
72619: ST_TO_ADDR
// sFac := false ;
72620: LD_ADDR_EXP 111
72624: PUSH
72625: LD_INT 0
72627: ST_TO_ADDR
// sPower := false ;
72628: LD_ADDR_EXP 112
72632: PUSH
72633: LD_INT 0
72635: ST_TO_ADDR
// sRandom := false ;
72636: LD_ADDR_EXP 113
72640: PUSH
72641: LD_INT 0
72643: ST_TO_ADDR
// sShield := false ;
72644: LD_ADDR_EXP 114
72648: PUSH
72649: LD_INT 0
72651: ST_TO_ADDR
// sTime := false ;
72652: LD_ADDR_EXP 115
72656: PUSH
72657: LD_INT 0
72659: ST_TO_ADDR
// sTools := false ;
72660: LD_ADDR_EXP 116
72664: PUSH
72665: LD_INT 0
72667: ST_TO_ADDR
// sSold := false ;
72668: LD_ADDR_EXP 81
72672: PUSH
72673: LD_INT 0
72675: ST_TO_ADDR
// sDiff := false ;
72676: LD_ADDR_EXP 82
72680: PUSH
72681: LD_INT 0
72683: ST_TO_ADDR
// sFog := false ;
72684: LD_ADDR_EXP 85
72688: PUSH
72689: LD_INT 0
72691: ST_TO_ADDR
// sReset := false ;
72692: LD_ADDR_EXP 86
72696: PUSH
72697: LD_INT 0
72699: ST_TO_ADDR
// sSun := false ;
72700: LD_ADDR_EXP 87
72704: PUSH
72705: LD_INT 0
72707: ST_TO_ADDR
// sTiger := false ;
72708: LD_ADDR_EXP 83
72712: PUSH
72713: LD_INT 0
72715: ST_TO_ADDR
// sBomb := false ;
72716: LD_ADDR_EXP 84
72720: PUSH
72721: LD_INT 0
72723: ST_TO_ADDR
// sWound := false ;
72724: LD_ADDR_EXP 92
72728: PUSH
72729: LD_INT 0
72731: ST_TO_ADDR
// sBetray := false ;
72732: LD_ADDR_EXP 96
72736: PUSH
72737: LD_INT 0
72739: ST_TO_ADDR
// sContamin := false ;
72740: LD_ADDR_EXP 97
72744: PUSH
72745: LD_INT 0
72747: ST_TO_ADDR
// sOil := false ;
72748: LD_ADDR_EXP 99
72752: PUSH
72753: LD_INT 0
72755: ST_TO_ADDR
// sStu := false ;
72756: LD_ADDR_EXP 103
72760: PUSH
72761: LD_INT 0
72763: ST_TO_ADDR
// sBazooka := false ;
72764: LD_ADDR_EXP 106
72768: PUSH
72769: LD_INT 0
72771: ST_TO_ADDR
// sMortar := false ;
72772: LD_ADDR_EXP 107
72776: PUSH
72777: LD_INT 0
72779: ST_TO_ADDR
// sRanger := false ;
72780: LD_ADDR_EXP 117
72784: PUSH
72785: LD_INT 0
72787: ST_TO_ADDR
// sComputer := false ;
72788: LD_ADDR_EXP 118
72792: PUSH
72793: LD_INT 0
72795: ST_TO_ADDR
// s30 := false ;
72796: LD_ADDR_EXP 119
72800: PUSH
72801: LD_INT 0
72803: ST_TO_ADDR
// s60 := false ;
72804: LD_ADDR_EXP 120
72808: PUSH
72809: LD_INT 0
72811: ST_TO_ADDR
// end ;
72812: LD_VAR 0 1
72816: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
72817: LD_INT 0
72819: PPUSH
72820: PPUSH
72821: PPUSH
72822: PPUSH
72823: PPUSH
72824: PPUSH
72825: PPUSH
// result := [ ] ;
72826: LD_ADDR_VAR 0 2
72830: PUSH
72831: EMPTY
72832: ST_TO_ADDR
// if campaign_id = 1 then
72833: LD_OWVAR 69
72837: PUSH
72838: LD_INT 1
72840: EQUAL
72841: IFFALSE 76007
// begin case mission_number of 1 :
72843: LD_OWVAR 70
72847: PUSH
72848: LD_INT 1
72850: DOUBLE
72851: EQUAL
72852: IFTRUE 72856
72854: GO 72932
72856: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
72857: LD_ADDR_VAR 0 2
72861: PUSH
72862: LD_INT 2
72864: PUSH
72865: LD_INT 4
72867: PUSH
72868: LD_INT 11
72870: PUSH
72871: LD_INT 12
72873: PUSH
72874: LD_INT 15
72876: PUSH
72877: LD_INT 16
72879: PUSH
72880: LD_INT 22
72882: PUSH
72883: LD_INT 23
72885: PUSH
72886: LD_INT 26
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: PUSH
72900: LD_INT 101
72902: PUSH
72903: LD_INT 102
72905: PUSH
72906: LD_INT 106
72908: PUSH
72909: LD_INT 116
72911: PUSH
72912: LD_INT 117
72914: PUSH
72915: LD_INT 118
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: LIST
72922: LIST
72923: LIST
72924: LIST
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: ST_TO_ADDR
72930: GO 76005
72932: LD_INT 2
72934: DOUBLE
72935: EQUAL
72936: IFTRUE 72940
72938: GO 73024
72940: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
72941: LD_ADDR_VAR 0 2
72945: PUSH
72946: LD_INT 2
72948: PUSH
72949: LD_INT 4
72951: PUSH
72952: LD_INT 11
72954: PUSH
72955: LD_INT 12
72957: PUSH
72958: LD_INT 15
72960: PUSH
72961: LD_INT 16
72963: PUSH
72964: LD_INT 22
72966: PUSH
72967: LD_INT 23
72969: PUSH
72970: LD_INT 26
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: LIST
72977: LIST
72978: LIST
72979: LIST
72980: LIST
72981: LIST
72982: LIST
72983: PUSH
72984: LD_INT 101
72986: PUSH
72987: LD_INT 102
72989: PUSH
72990: LD_INT 105
72992: PUSH
72993: LD_INT 106
72995: PUSH
72996: LD_INT 108
72998: PUSH
72999: LD_INT 116
73001: PUSH
73002: LD_INT 117
73004: PUSH
73005: LD_INT 118
73007: PUSH
73008: EMPTY
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: PUSH
73018: EMPTY
73019: LIST
73020: LIST
73021: ST_TO_ADDR
73022: GO 76005
73024: LD_INT 3
73026: DOUBLE
73027: EQUAL
73028: IFTRUE 73032
73030: GO 73120
73032: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
73033: LD_ADDR_VAR 0 2
73037: PUSH
73038: LD_INT 2
73040: PUSH
73041: LD_INT 4
73043: PUSH
73044: LD_INT 5
73046: PUSH
73047: LD_INT 11
73049: PUSH
73050: LD_INT 12
73052: PUSH
73053: LD_INT 15
73055: PUSH
73056: LD_INT 16
73058: PUSH
73059: LD_INT 22
73061: PUSH
73062: LD_INT 26
73064: PUSH
73065: LD_INT 36
73067: PUSH
73068: EMPTY
73069: LIST
73070: LIST
73071: LIST
73072: LIST
73073: LIST
73074: LIST
73075: LIST
73076: LIST
73077: LIST
73078: LIST
73079: PUSH
73080: LD_INT 101
73082: PUSH
73083: LD_INT 102
73085: PUSH
73086: LD_INT 105
73088: PUSH
73089: LD_INT 106
73091: PUSH
73092: LD_INT 108
73094: PUSH
73095: LD_INT 116
73097: PUSH
73098: LD_INT 117
73100: PUSH
73101: LD_INT 118
73103: PUSH
73104: EMPTY
73105: LIST
73106: LIST
73107: LIST
73108: LIST
73109: LIST
73110: LIST
73111: LIST
73112: LIST
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: ST_TO_ADDR
73118: GO 76005
73120: LD_INT 4
73122: DOUBLE
73123: EQUAL
73124: IFTRUE 73128
73126: GO 73224
73128: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
73129: LD_ADDR_VAR 0 2
73133: PUSH
73134: LD_INT 2
73136: PUSH
73137: LD_INT 4
73139: PUSH
73140: LD_INT 5
73142: PUSH
73143: LD_INT 8
73145: PUSH
73146: LD_INT 11
73148: PUSH
73149: LD_INT 12
73151: PUSH
73152: LD_INT 15
73154: PUSH
73155: LD_INT 16
73157: PUSH
73158: LD_INT 22
73160: PUSH
73161: LD_INT 23
73163: PUSH
73164: LD_INT 26
73166: PUSH
73167: LD_INT 36
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: PUSH
73184: LD_INT 101
73186: PUSH
73187: LD_INT 102
73189: PUSH
73190: LD_INT 105
73192: PUSH
73193: LD_INT 106
73195: PUSH
73196: LD_INT 108
73198: PUSH
73199: LD_INT 116
73201: PUSH
73202: LD_INT 117
73204: PUSH
73205: LD_INT 118
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: PUSH
73218: EMPTY
73219: LIST
73220: LIST
73221: ST_TO_ADDR
73222: GO 76005
73224: LD_INT 5
73226: DOUBLE
73227: EQUAL
73228: IFTRUE 73232
73230: GO 73344
73232: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
73233: LD_ADDR_VAR 0 2
73237: PUSH
73238: LD_INT 2
73240: PUSH
73241: LD_INT 4
73243: PUSH
73244: LD_INT 5
73246: PUSH
73247: LD_INT 6
73249: PUSH
73250: LD_INT 8
73252: PUSH
73253: LD_INT 11
73255: PUSH
73256: LD_INT 12
73258: PUSH
73259: LD_INT 15
73261: PUSH
73262: LD_INT 16
73264: PUSH
73265: LD_INT 22
73267: PUSH
73268: LD_INT 23
73270: PUSH
73271: LD_INT 25
73273: PUSH
73274: LD_INT 26
73276: PUSH
73277: LD_INT 36
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: LIST
73284: LIST
73285: LIST
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: LIST
73294: LIST
73295: PUSH
73296: LD_INT 101
73298: PUSH
73299: LD_INT 102
73301: PUSH
73302: LD_INT 105
73304: PUSH
73305: LD_INT 106
73307: PUSH
73308: LD_INT 108
73310: PUSH
73311: LD_INT 109
73313: PUSH
73314: LD_INT 112
73316: PUSH
73317: LD_INT 116
73319: PUSH
73320: LD_INT 117
73322: PUSH
73323: LD_INT 118
73325: PUSH
73326: EMPTY
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: PUSH
73338: EMPTY
73339: LIST
73340: LIST
73341: ST_TO_ADDR
73342: GO 76005
73344: LD_INT 6
73346: DOUBLE
73347: EQUAL
73348: IFTRUE 73352
73350: GO 73484
73352: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
73353: LD_ADDR_VAR 0 2
73357: PUSH
73358: LD_INT 2
73360: PUSH
73361: LD_INT 4
73363: PUSH
73364: LD_INT 5
73366: PUSH
73367: LD_INT 6
73369: PUSH
73370: LD_INT 8
73372: PUSH
73373: LD_INT 11
73375: PUSH
73376: LD_INT 12
73378: PUSH
73379: LD_INT 15
73381: PUSH
73382: LD_INT 16
73384: PUSH
73385: LD_INT 20
73387: PUSH
73388: LD_INT 21
73390: PUSH
73391: LD_INT 22
73393: PUSH
73394: LD_INT 23
73396: PUSH
73397: LD_INT 25
73399: PUSH
73400: LD_INT 26
73402: PUSH
73403: LD_INT 30
73405: PUSH
73406: LD_INT 31
73408: PUSH
73409: LD_INT 32
73411: PUSH
73412: LD_INT 36
73414: PUSH
73415: EMPTY
73416: LIST
73417: LIST
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: LIST
73423: LIST
73424: LIST
73425: LIST
73426: LIST
73427: LIST
73428: LIST
73429: LIST
73430: LIST
73431: LIST
73432: LIST
73433: LIST
73434: LIST
73435: PUSH
73436: LD_INT 101
73438: PUSH
73439: LD_INT 102
73441: PUSH
73442: LD_INT 105
73444: PUSH
73445: LD_INT 106
73447: PUSH
73448: LD_INT 108
73450: PUSH
73451: LD_INT 109
73453: PUSH
73454: LD_INT 112
73456: PUSH
73457: LD_INT 116
73459: PUSH
73460: LD_INT 117
73462: PUSH
73463: LD_INT 118
73465: PUSH
73466: EMPTY
73467: LIST
73468: LIST
73469: LIST
73470: LIST
73471: LIST
73472: LIST
73473: LIST
73474: LIST
73475: LIST
73476: LIST
73477: PUSH
73478: EMPTY
73479: LIST
73480: LIST
73481: ST_TO_ADDR
73482: GO 76005
73484: LD_INT 7
73486: DOUBLE
73487: EQUAL
73488: IFTRUE 73492
73490: GO 73604
73492: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
73493: LD_ADDR_VAR 0 2
73497: PUSH
73498: LD_INT 2
73500: PUSH
73501: LD_INT 4
73503: PUSH
73504: LD_INT 5
73506: PUSH
73507: LD_INT 7
73509: PUSH
73510: LD_INT 11
73512: PUSH
73513: LD_INT 12
73515: PUSH
73516: LD_INT 15
73518: PUSH
73519: LD_INT 16
73521: PUSH
73522: LD_INT 20
73524: PUSH
73525: LD_INT 21
73527: PUSH
73528: LD_INT 22
73530: PUSH
73531: LD_INT 23
73533: PUSH
73534: LD_INT 25
73536: PUSH
73537: LD_INT 26
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: LIST
73544: LIST
73545: LIST
73546: LIST
73547: LIST
73548: LIST
73549: LIST
73550: LIST
73551: LIST
73552: LIST
73553: LIST
73554: LIST
73555: PUSH
73556: LD_INT 101
73558: PUSH
73559: LD_INT 102
73561: PUSH
73562: LD_INT 103
73564: PUSH
73565: LD_INT 105
73567: PUSH
73568: LD_INT 106
73570: PUSH
73571: LD_INT 108
73573: PUSH
73574: LD_INT 112
73576: PUSH
73577: LD_INT 116
73579: PUSH
73580: LD_INT 117
73582: PUSH
73583: LD_INT 118
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: ST_TO_ADDR
73602: GO 76005
73604: LD_INT 8
73606: DOUBLE
73607: EQUAL
73608: IFTRUE 73612
73610: GO 73752
73612: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
73613: LD_ADDR_VAR 0 2
73617: PUSH
73618: LD_INT 2
73620: PUSH
73621: LD_INT 4
73623: PUSH
73624: LD_INT 5
73626: PUSH
73627: LD_INT 6
73629: PUSH
73630: LD_INT 7
73632: PUSH
73633: LD_INT 8
73635: PUSH
73636: LD_INT 11
73638: PUSH
73639: LD_INT 12
73641: PUSH
73642: LD_INT 15
73644: PUSH
73645: LD_INT 16
73647: PUSH
73648: LD_INT 20
73650: PUSH
73651: LD_INT 21
73653: PUSH
73654: LD_INT 22
73656: PUSH
73657: LD_INT 23
73659: PUSH
73660: LD_INT 25
73662: PUSH
73663: LD_INT 26
73665: PUSH
73666: LD_INT 30
73668: PUSH
73669: LD_INT 31
73671: PUSH
73672: LD_INT 32
73674: PUSH
73675: LD_INT 36
73677: PUSH
73678: EMPTY
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: PUSH
73700: LD_INT 101
73702: PUSH
73703: LD_INT 102
73705: PUSH
73706: LD_INT 103
73708: PUSH
73709: LD_INT 105
73711: PUSH
73712: LD_INT 106
73714: PUSH
73715: LD_INT 108
73717: PUSH
73718: LD_INT 109
73720: PUSH
73721: LD_INT 112
73723: PUSH
73724: LD_INT 116
73726: PUSH
73727: LD_INT 117
73729: PUSH
73730: LD_INT 118
73732: PUSH
73733: EMPTY
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: PUSH
73746: EMPTY
73747: LIST
73748: LIST
73749: ST_TO_ADDR
73750: GO 76005
73752: LD_INT 9
73754: DOUBLE
73755: EQUAL
73756: IFTRUE 73760
73758: GO 73908
73760: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
73761: LD_ADDR_VAR 0 2
73765: PUSH
73766: LD_INT 2
73768: PUSH
73769: LD_INT 4
73771: PUSH
73772: LD_INT 5
73774: PUSH
73775: LD_INT 6
73777: PUSH
73778: LD_INT 7
73780: PUSH
73781: LD_INT 8
73783: PUSH
73784: LD_INT 11
73786: PUSH
73787: LD_INT 12
73789: PUSH
73790: LD_INT 15
73792: PUSH
73793: LD_INT 16
73795: PUSH
73796: LD_INT 20
73798: PUSH
73799: LD_INT 21
73801: PUSH
73802: LD_INT 22
73804: PUSH
73805: LD_INT 23
73807: PUSH
73808: LD_INT 25
73810: PUSH
73811: LD_INT 26
73813: PUSH
73814: LD_INT 28
73816: PUSH
73817: LD_INT 30
73819: PUSH
73820: LD_INT 31
73822: PUSH
73823: LD_INT 32
73825: PUSH
73826: LD_INT 36
73828: PUSH
73829: EMPTY
73830: LIST
73831: LIST
73832: LIST
73833: LIST
73834: LIST
73835: LIST
73836: LIST
73837: LIST
73838: LIST
73839: LIST
73840: LIST
73841: LIST
73842: LIST
73843: LIST
73844: LIST
73845: LIST
73846: LIST
73847: LIST
73848: LIST
73849: LIST
73850: LIST
73851: PUSH
73852: LD_INT 101
73854: PUSH
73855: LD_INT 102
73857: PUSH
73858: LD_INT 103
73860: PUSH
73861: LD_INT 105
73863: PUSH
73864: LD_INT 106
73866: PUSH
73867: LD_INT 108
73869: PUSH
73870: LD_INT 109
73872: PUSH
73873: LD_INT 112
73875: PUSH
73876: LD_INT 114
73878: PUSH
73879: LD_INT 116
73881: PUSH
73882: LD_INT 117
73884: PUSH
73885: LD_INT 118
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: LIST
73892: LIST
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: LIST
73900: LIST
73901: PUSH
73902: EMPTY
73903: LIST
73904: LIST
73905: ST_TO_ADDR
73906: GO 76005
73908: LD_INT 10
73910: DOUBLE
73911: EQUAL
73912: IFTRUE 73916
73914: GO 74112
73916: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
73917: LD_ADDR_VAR 0 2
73921: PUSH
73922: LD_INT 2
73924: PUSH
73925: LD_INT 4
73927: PUSH
73928: LD_INT 5
73930: PUSH
73931: LD_INT 6
73933: PUSH
73934: LD_INT 7
73936: PUSH
73937: LD_INT 8
73939: PUSH
73940: LD_INT 9
73942: PUSH
73943: LD_INT 10
73945: PUSH
73946: LD_INT 11
73948: PUSH
73949: LD_INT 12
73951: PUSH
73952: LD_INT 13
73954: PUSH
73955: LD_INT 14
73957: PUSH
73958: LD_INT 15
73960: PUSH
73961: LD_INT 16
73963: PUSH
73964: LD_INT 17
73966: PUSH
73967: LD_INT 18
73969: PUSH
73970: LD_INT 19
73972: PUSH
73973: LD_INT 20
73975: PUSH
73976: LD_INT 21
73978: PUSH
73979: LD_INT 22
73981: PUSH
73982: LD_INT 23
73984: PUSH
73985: LD_INT 24
73987: PUSH
73988: LD_INT 25
73990: PUSH
73991: LD_INT 26
73993: PUSH
73994: LD_INT 28
73996: PUSH
73997: LD_INT 30
73999: PUSH
74000: LD_INT 31
74002: PUSH
74003: LD_INT 32
74005: PUSH
74006: LD_INT 36
74008: PUSH
74009: EMPTY
74010: LIST
74011: LIST
74012: LIST
74013: LIST
74014: LIST
74015: LIST
74016: LIST
74017: LIST
74018: LIST
74019: LIST
74020: LIST
74021: LIST
74022: LIST
74023: LIST
74024: LIST
74025: LIST
74026: LIST
74027: LIST
74028: LIST
74029: LIST
74030: LIST
74031: LIST
74032: LIST
74033: LIST
74034: LIST
74035: LIST
74036: LIST
74037: LIST
74038: LIST
74039: PUSH
74040: LD_INT 101
74042: PUSH
74043: LD_INT 102
74045: PUSH
74046: LD_INT 103
74048: PUSH
74049: LD_INT 104
74051: PUSH
74052: LD_INT 105
74054: PUSH
74055: LD_INT 106
74057: PUSH
74058: LD_INT 107
74060: PUSH
74061: LD_INT 108
74063: PUSH
74064: LD_INT 109
74066: PUSH
74067: LD_INT 110
74069: PUSH
74070: LD_INT 111
74072: PUSH
74073: LD_INT 112
74075: PUSH
74076: LD_INT 114
74078: PUSH
74079: LD_INT 116
74081: PUSH
74082: LD_INT 117
74084: PUSH
74085: LD_INT 118
74087: PUSH
74088: EMPTY
74089: LIST
74090: LIST
74091: LIST
74092: LIST
74093: LIST
74094: LIST
74095: LIST
74096: LIST
74097: LIST
74098: LIST
74099: LIST
74100: LIST
74101: LIST
74102: LIST
74103: LIST
74104: LIST
74105: PUSH
74106: EMPTY
74107: LIST
74108: LIST
74109: ST_TO_ADDR
74110: GO 76005
74112: LD_INT 11
74114: DOUBLE
74115: EQUAL
74116: IFTRUE 74120
74118: GO 74324
74120: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
74121: LD_ADDR_VAR 0 2
74125: PUSH
74126: LD_INT 2
74128: PUSH
74129: LD_INT 3
74131: PUSH
74132: LD_INT 4
74134: PUSH
74135: LD_INT 5
74137: PUSH
74138: LD_INT 6
74140: PUSH
74141: LD_INT 7
74143: PUSH
74144: LD_INT 8
74146: PUSH
74147: LD_INT 9
74149: PUSH
74150: LD_INT 10
74152: PUSH
74153: LD_INT 11
74155: PUSH
74156: LD_INT 12
74158: PUSH
74159: LD_INT 13
74161: PUSH
74162: LD_INT 14
74164: PUSH
74165: LD_INT 15
74167: PUSH
74168: LD_INT 16
74170: PUSH
74171: LD_INT 17
74173: PUSH
74174: LD_INT 18
74176: PUSH
74177: LD_INT 19
74179: PUSH
74180: LD_INT 20
74182: PUSH
74183: LD_INT 21
74185: PUSH
74186: LD_INT 22
74188: PUSH
74189: LD_INT 23
74191: PUSH
74192: LD_INT 24
74194: PUSH
74195: LD_INT 25
74197: PUSH
74198: LD_INT 26
74200: PUSH
74201: LD_INT 28
74203: PUSH
74204: LD_INT 30
74206: PUSH
74207: LD_INT 31
74209: PUSH
74210: LD_INT 32
74212: PUSH
74213: LD_INT 34
74215: PUSH
74216: LD_INT 36
74218: PUSH
74219: EMPTY
74220: LIST
74221: LIST
74222: LIST
74223: LIST
74224: LIST
74225: LIST
74226: LIST
74227: LIST
74228: LIST
74229: LIST
74230: LIST
74231: LIST
74232: LIST
74233: LIST
74234: LIST
74235: LIST
74236: LIST
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: PUSH
74252: LD_INT 101
74254: PUSH
74255: LD_INT 102
74257: PUSH
74258: LD_INT 103
74260: PUSH
74261: LD_INT 104
74263: PUSH
74264: LD_INT 105
74266: PUSH
74267: LD_INT 106
74269: PUSH
74270: LD_INT 107
74272: PUSH
74273: LD_INT 108
74275: PUSH
74276: LD_INT 109
74278: PUSH
74279: LD_INT 110
74281: PUSH
74282: LD_INT 111
74284: PUSH
74285: LD_INT 112
74287: PUSH
74288: LD_INT 114
74290: PUSH
74291: LD_INT 116
74293: PUSH
74294: LD_INT 117
74296: PUSH
74297: LD_INT 118
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: LIST
74313: LIST
74314: LIST
74315: LIST
74316: LIST
74317: PUSH
74318: EMPTY
74319: LIST
74320: LIST
74321: ST_TO_ADDR
74322: GO 76005
74324: LD_INT 12
74326: DOUBLE
74327: EQUAL
74328: IFTRUE 74332
74330: GO 74552
74332: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
74333: LD_ADDR_VAR 0 2
74337: PUSH
74338: LD_INT 1
74340: PUSH
74341: LD_INT 2
74343: PUSH
74344: LD_INT 3
74346: PUSH
74347: LD_INT 4
74349: PUSH
74350: LD_INT 5
74352: PUSH
74353: LD_INT 6
74355: PUSH
74356: LD_INT 7
74358: PUSH
74359: LD_INT 8
74361: PUSH
74362: LD_INT 9
74364: PUSH
74365: LD_INT 10
74367: PUSH
74368: LD_INT 11
74370: PUSH
74371: LD_INT 12
74373: PUSH
74374: LD_INT 13
74376: PUSH
74377: LD_INT 14
74379: PUSH
74380: LD_INT 15
74382: PUSH
74383: LD_INT 16
74385: PUSH
74386: LD_INT 17
74388: PUSH
74389: LD_INT 18
74391: PUSH
74392: LD_INT 19
74394: PUSH
74395: LD_INT 20
74397: PUSH
74398: LD_INT 21
74400: PUSH
74401: LD_INT 22
74403: PUSH
74404: LD_INT 23
74406: PUSH
74407: LD_INT 24
74409: PUSH
74410: LD_INT 25
74412: PUSH
74413: LD_INT 26
74415: PUSH
74416: LD_INT 27
74418: PUSH
74419: LD_INT 28
74421: PUSH
74422: LD_INT 30
74424: PUSH
74425: LD_INT 31
74427: PUSH
74428: LD_INT 32
74430: PUSH
74431: LD_INT 33
74433: PUSH
74434: LD_INT 34
74436: PUSH
74437: LD_INT 36
74439: PUSH
74440: EMPTY
74441: LIST
74442: LIST
74443: LIST
74444: LIST
74445: LIST
74446: LIST
74447: LIST
74448: LIST
74449: LIST
74450: LIST
74451: LIST
74452: LIST
74453: LIST
74454: LIST
74455: LIST
74456: LIST
74457: LIST
74458: LIST
74459: LIST
74460: LIST
74461: LIST
74462: LIST
74463: LIST
74464: LIST
74465: LIST
74466: LIST
74467: LIST
74468: LIST
74469: LIST
74470: LIST
74471: LIST
74472: LIST
74473: LIST
74474: LIST
74475: PUSH
74476: LD_INT 101
74478: PUSH
74479: LD_INT 102
74481: PUSH
74482: LD_INT 103
74484: PUSH
74485: LD_INT 104
74487: PUSH
74488: LD_INT 105
74490: PUSH
74491: LD_INT 106
74493: PUSH
74494: LD_INT 107
74496: PUSH
74497: LD_INT 108
74499: PUSH
74500: LD_INT 109
74502: PUSH
74503: LD_INT 110
74505: PUSH
74506: LD_INT 111
74508: PUSH
74509: LD_INT 112
74511: PUSH
74512: LD_INT 113
74514: PUSH
74515: LD_INT 114
74517: PUSH
74518: LD_INT 116
74520: PUSH
74521: LD_INT 117
74523: PUSH
74524: LD_INT 118
74526: PUSH
74527: EMPTY
74528: LIST
74529: LIST
74530: LIST
74531: LIST
74532: LIST
74533: LIST
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: LIST
74539: LIST
74540: LIST
74541: LIST
74542: LIST
74543: LIST
74544: LIST
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: ST_TO_ADDR
74550: GO 76005
74552: LD_INT 13
74554: DOUBLE
74555: EQUAL
74556: IFTRUE 74560
74558: GO 74768
74560: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
74561: LD_ADDR_VAR 0 2
74565: PUSH
74566: LD_INT 1
74568: PUSH
74569: LD_INT 2
74571: PUSH
74572: LD_INT 3
74574: PUSH
74575: LD_INT 4
74577: PUSH
74578: LD_INT 5
74580: PUSH
74581: LD_INT 8
74583: PUSH
74584: LD_INT 9
74586: PUSH
74587: LD_INT 10
74589: PUSH
74590: LD_INT 11
74592: PUSH
74593: LD_INT 12
74595: PUSH
74596: LD_INT 14
74598: PUSH
74599: LD_INT 15
74601: PUSH
74602: LD_INT 16
74604: PUSH
74605: LD_INT 17
74607: PUSH
74608: LD_INT 18
74610: PUSH
74611: LD_INT 19
74613: PUSH
74614: LD_INT 20
74616: PUSH
74617: LD_INT 21
74619: PUSH
74620: LD_INT 22
74622: PUSH
74623: LD_INT 23
74625: PUSH
74626: LD_INT 24
74628: PUSH
74629: LD_INT 25
74631: PUSH
74632: LD_INT 26
74634: PUSH
74635: LD_INT 27
74637: PUSH
74638: LD_INT 28
74640: PUSH
74641: LD_INT 30
74643: PUSH
74644: LD_INT 31
74646: PUSH
74647: LD_INT 32
74649: PUSH
74650: LD_INT 33
74652: PUSH
74653: LD_INT 34
74655: PUSH
74656: LD_INT 36
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: LIST
74663: LIST
74664: LIST
74665: LIST
74666: LIST
74667: LIST
74668: LIST
74669: LIST
74670: LIST
74671: LIST
74672: LIST
74673: LIST
74674: LIST
74675: LIST
74676: LIST
74677: LIST
74678: LIST
74679: LIST
74680: LIST
74681: LIST
74682: LIST
74683: LIST
74684: LIST
74685: LIST
74686: LIST
74687: LIST
74688: LIST
74689: LIST
74690: LIST
74691: PUSH
74692: LD_INT 101
74694: PUSH
74695: LD_INT 102
74697: PUSH
74698: LD_INT 103
74700: PUSH
74701: LD_INT 104
74703: PUSH
74704: LD_INT 105
74706: PUSH
74707: LD_INT 106
74709: PUSH
74710: LD_INT 107
74712: PUSH
74713: LD_INT 108
74715: PUSH
74716: LD_INT 109
74718: PUSH
74719: LD_INT 110
74721: PUSH
74722: LD_INT 111
74724: PUSH
74725: LD_INT 112
74727: PUSH
74728: LD_INT 113
74730: PUSH
74731: LD_INT 114
74733: PUSH
74734: LD_INT 116
74736: PUSH
74737: LD_INT 117
74739: PUSH
74740: LD_INT 118
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: LIST
74747: LIST
74748: LIST
74749: LIST
74750: LIST
74751: LIST
74752: LIST
74753: LIST
74754: LIST
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: LIST
74760: LIST
74761: PUSH
74762: EMPTY
74763: LIST
74764: LIST
74765: ST_TO_ADDR
74766: GO 76005
74768: LD_INT 14
74770: DOUBLE
74771: EQUAL
74772: IFTRUE 74776
74774: GO 75000
74776: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
74777: LD_ADDR_VAR 0 2
74781: PUSH
74782: LD_INT 1
74784: PUSH
74785: LD_INT 2
74787: PUSH
74788: LD_INT 3
74790: PUSH
74791: LD_INT 4
74793: PUSH
74794: LD_INT 5
74796: PUSH
74797: LD_INT 6
74799: PUSH
74800: LD_INT 7
74802: PUSH
74803: LD_INT 8
74805: PUSH
74806: LD_INT 9
74808: PUSH
74809: LD_INT 10
74811: PUSH
74812: LD_INT 11
74814: PUSH
74815: LD_INT 12
74817: PUSH
74818: LD_INT 13
74820: PUSH
74821: LD_INT 14
74823: PUSH
74824: LD_INT 15
74826: PUSH
74827: LD_INT 16
74829: PUSH
74830: LD_INT 17
74832: PUSH
74833: LD_INT 18
74835: PUSH
74836: LD_INT 19
74838: PUSH
74839: LD_INT 20
74841: PUSH
74842: LD_INT 21
74844: PUSH
74845: LD_INT 22
74847: PUSH
74848: LD_INT 23
74850: PUSH
74851: LD_INT 24
74853: PUSH
74854: LD_INT 25
74856: PUSH
74857: LD_INT 26
74859: PUSH
74860: LD_INT 27
74862: PUSH
74863: LD_INT 28
74865: PUSH
74866: LD_INT 29
74868: PUSH
74869: LD_INT 30
74871: PUSH
74872: LD_INT 31
74874: PUSH
74875: LD_INT 32
74877: PUSH
74878: LD_INT 33
74880: PUSH
74881: LD_INT 34
74883: PUSH
74884: LD_INT 36
74886: PUSH
74887: EMPTY
74888: LIST
74889: LIST
74890: LIST
74891: LIST
74892: LIST
74893: LIST
74894: LIST
74895: LIST
74896: LIST
74897: LIST
74898: LIST
74899: LIST
74900: LIST
74901: LIST
74902: LIST
74903: LIST
74904: LIST
74905: LIST
74906: LIST
74907: LIST
74908: LIST
74909: LIST
74910: LIST
74911: LIST
74912: LIST
74913: LIST
74914: LIST
74915: LIST
74916: LIST
74917: LIST
74918: LIST
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: PUSH
74924: LD_INT 101
74926: PUSH
74927: LD_INT 102
74929: PUSH
74930: LD_INT 103
74932: PUSH
74933: LD_INT 104
74935: PUSH
74936: LD_INT 105
74938: PUSH
74939: LD_INT 106
74941: PUSH
74942: LD_INT 107
74944: PUSH
74945: LD_INT 108
74947: PUSH
74948: LD_INT 109
74950: PUSH
74951: LD_INT 110
74953: PUSH
74954: LD_INT 111
74956: PUSH
74957: LD_INT 112
74959: PUSH
74960: LD_INT 113
74962: PUSH
74963: LD_INT 114
74965: PUSH
74966: LD_INT 116
74968: PUSH
74969: LD_INT 117
74971: PUSH
74972: LD_INT 118
74974: PUSH
74975: EMPTY
74976: LIST
74977: LIST
74978: LIST
74979: LIST
74980: LIST
74981: LIST
74982: LIST
74983: LIST
74984: LIST
74985: LIST
74986: LIST
74987: LIST
74988: LIST
74989: LIST
74990: LIST
74991: LIST
74992: LIST
74993: PUSH
74994: EMPTY
74995: LIST
74996: LIST
74997: ST_TO_ADDR
74998: GO 76005
75000: LD_INT 15
75002: DOUBLE
75003: EQUAL
75004: IFTRUE 75008
75006: GO 75232
75008: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
75009: LD_ADDR_VAR 0 2
75013: PUSH
75014: LD_INT 1
75016: PUSH
75017: LD_INT 2
75019: PUSH
75020: LD_INT 3
75022: PUSH
75023: LD_INT 4
75025: PUSH
75026: LD_INT 5
75028: PUSH
75029: LD_INT 6
75031: PUSH
75032: LD_INT 7
75034: PUSH
75035: LD_INT 8
75037: PUSH
75038: LD_INT 9
75040: PUSH
75041: LD_INT 10
75043: PUSH
75044: LD_INT 11
75046: PUSH
75047: LD_INT 12
75049: PUSH
75050: LD_INT 13
75052: PUSH
75053: LD_INT 14
75055: PUSH
75056: LD_INT 15
75058: PUSH
75059: LD_INT 16
75061: PUSH
75062: LD_INT 17
75064: PUSH
75065: LD_INT 18
75067: PUSH
75068: LD_INT 19
75070: PUSH
75071: LD_INT 20
75073: PUSH
75074: LD_INT 21
75076: PUSH
75077: LD_INT 22
75079: PUSH
75080: LD_INT 23
75082: PUSH
75083: LD_INT 24
75085: PUSH
75086: LD_INT 25
75088: PUSH
75089: LD_INT 26
75091: PUSH
75092: LD_INT 27
75094: PUSH
75095: LD_INT 28
75097: PUSH
75098: LD_INT 29
75100: PUSH
75101: LD_INT 30
75103: PUSH
75104: LD_INT 31
75106: PUSH
75107: LD_INT 32
75109: PUSH
75110: LD_INT 33
75112: PUSH
75113: LD_INT 34
75115: PUSH
75116: LD_INT 36
75118: PUSH
75119: EMPTY
75120: LIST
75121: LIST
75122: LIST
75123: LIST
75124: LIST
75125: LIST
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: LIST
75132: LIST
75133: LIST
75134: LIST
75135: LIST
75136: LIST
75137: LIST
75138: LIST
75139: LIST
75140: LIST
75141: LIST
75142: LIST
75143: LIST
75144: LIST
75145: LIST
75146: LIST
75147: LIST
75148: LIST
75149: LIST
75150: LIST
75151: LIST
75152: LIST
75153: LIST
75154: LIST
75155: PUSH
75156: LD_INT 101
75158: PUSH
75159: LD_INT 102
75161: PUSH
75162: LD_INT 103
75164: PUSH
75165: LD_INT 104
75167: PUSH
75168: LD_INT 105
75170: PUSH
75171: LD_INT 106
75173: PUSH
75174: LD_INT 107
75176: PUSH
75177: LD_INT 108
75179: PUSH
75180: LD_INT 109
75182: PUSH
75183: LD_INT 110
75185: PUSH
75186: LD_INT 111
75188: PUSH
75189: LD_INT 112
75191: PUSH
75192: LD_INT 113
75194: PUSH
75195: LD_INT 114
75197: PUSH
75198: LD_INT 116
75200: PUSH
75201: LD_INT 117
75203: PUSH
75204: LD_INT 118
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: LIST
75211: LIST
75212: LIST
75213: LIST
75214: LIST
75215: LIST
75216: LIST
75217: LIST
75218: LIST
75219: LIST
75220: LIST
75221: LIST
75222: LIST
75223: LIST
75224: LIST
75225: PUSH
75226: EMPTY
75227: LIST
75228: LIST
75229: ST_TO_ADDR
75230: GO 76005
75232: LD_INT 16
75234: DOUBLE
75235: EQUAL
75236: IFTRUE 75240
75238: GO 75376
75240: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
75241: LD_ADDR_VAR 0 2
75245: PUSH
75246: LD_INT 2
75248: PUSH
75249: LD_INT 4
75251: PUSH
75252: LD_INT 5
75254: PUSH
75255: LD_INT 7
75257: PUSH
75258: LD_INT 11
75260: PUSH
75261: LD_INT 12
75263: PUSH
75264: LD_INT 15
75266: PUSH
75267: LD_INT 16
75269: PUSH
75270: LD_INT 20
75272: PUSH
75273: LD_INT 21
75275: PUSH
75276: LD_INT 22
75278: PUSH
75279: LD_INT 23
75281: PUSH
75282: LD_INT 25
75284: PUSH
75285: LD_INT 26
75287: PUSH
75288: LD_INT 30
75290: PUSH
75291: LD_INT 31
75293: PUSH
75294: LD_INT 32
75296: PUSH
75297: LD_INT 33
75299: PUSH
75300: LD_INT 34
75302: PUSH
75303: EMPTY
75304: LIST
75305: LIST
75306: LIST
75307: LIST
75308: LIST
75309: LIST
75310: LIST
75311: LIST
75312: LIST
75313: LIST
75314: LIST
75315: LIST
75316: LIST
75317: LIST
75318: LIST
75319: LIST
75320: LIST
75321: LIST
75322: LIST
75323: PUSH
75324: LD_INT 101
75326: PUSH
75327: LD_INT 102
75329: PUSH
75330: LD_INT 103
75332: PUSH
75333: LD_INT 106
75335: PUSH
75336: LD_INT 108
75338: PUSH
75339: LD_INT 112
75341: PUSH
75342: LD_INT 113
75344: PUSH
75345: LD_INT 114
75347: PUSH
75348: LD_INT 116
75350: PUSH
75351: LD_INT 117
75353: PUSH
75354: LD_INT 118
75356: PUSH
75357: EMPTY
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: LIST
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: PUSH
75370: EMPTY
75371: LIST
75372: LIST
75373: ST_TO_ADDR
75374: GO 76005
75376: LD_INT 17
75378: DOUBLE
75379: EQUAL
75380: IFTRUE 75384
75382: GO 75608
75384: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
75385: LD_ADDR_VAR 0 2
75389: PUSH
75390: LD_INT 1
75392: PUSH
75393: LD_INT 2
75395: PUSH
75396: LD_INT 3
75398: PUSH
75399: LD_INT 4
75401: PUSH
75402: LD_INT 5
75404: PUSH
75405: LD_INT 6
75407: PUSH
75408: LD_INT 7
75410: PUSH
75411: LD_INT 8
75413: PUSH
75414: LD_INT 9
75416: PUSH
75417: LD_INT 10
75419: PUSH
75420: LD_INT 11
75422: PUSH
75423: LD_INT 12
75425: PUSH
75426: LD_INT 13
75428: PUSH
75429: LD_INT 14
75431: PUSH
75432: LD_INT 15
75434: PUSH
75435: LD_INT 16
75437: PUSH
75438: LD_INT 17
75440: PUSH
75441: LD_INT 18
75443: PUSH
75444: LD_INT 19
75446: PUSH
75447: LD_INT 20
75449: PUSH
75450: LD_INT 21
75452: PUSH
75453: LD_INT 22
75455: PUSH
75456: LD_INT 23
75458: PUSH
75459: LD_INT 24
75461: PUSH
75462: LD_INT 25
75464: PUSH
75465: LD_INT 26
75467: PUSH
75468: LD_INT 27
75470: PUSH
75471: LD_INT 28
75473: PUSH
75474: LD_INT 29
75476: PUSH
75477: LD_INT 30
75479: PUSH
75480: LD_INT 31
75482: PUSH
75483: LD_INT 32
75485: PUSH
75486: LD_INT 33
75488: PUSH
75489: LD_INT 34
75491: PUSH
75492: LD_INT 36
75494: PUSH
75495: EMPTY
75496: LIST
75497: LIST
75498: LIST
75499: LIST
75500: LIST
75501: LIST
75502: LIST
75503: LIST
75504: LIST
75505: LIST
75506: LIST
75507: LIST
75508: LIST
75509: LIST
75510: LIST
75511: LIST
75512: LIST
75513: LIST
75514: LIST
75515: LIST
75516: LIST
75517: LIST
75518: LIST
75519: LIST
75520: LIST
75521: LIST
75522: LIST
75523: LIST
75524: LIST
75525: LIST
75526: LIST
75527: LIST
75528: LIST
75529: LIST
75530: LIST
75531: PUSH
75532: LD_INT 101
75534: PUSH
75535: LD_INT 102
75537: PUSH
75538: LD_INT 103
75540: PUSH
75541: LD_INT 104
75543: PUSH
75544: LD_INT 105
75546: PUSH
75547: LD_INT 106
75549: PUSH
75550: LD_INT 107
75552: PUSH
75553: LD_INT 108
75555: PUSH
75556: LD_INT 109
75558: PUSH
75559: LD_INT 110
75561: PUSH
75562: LD_INT 111
75564: PUSH
75565: LD_INT 112
75567: PUSH
75568: LD_INT 113
75570: PUSH
75571: LD_INT 114
75573: PUSH
75574: LD_INT 116
75576: PUSH
75577: LD_INT 117
75579: PUSH
75580: LD_INT 118
75582: PUSH
75583: EMPTY
75584: LIST
75585: LIST
75586: LIST
75587: LIST
75588: LIST
75589: LIST
75590: LIST
75591: LIST
75592: LIST
75593: LIST
75594: LIST
75595: LIST
75596: LIST
75597: LIST
75598: LIST
75599: LIST
75600: LIST
75601: PUSH
75602: EMPTY
75603: LIST
75604: LIST
75605: ST_TO_ADDR
75606: GO 76005
75608: LD_INT 18
75610: DOUBLE
75611: EQUAL
75612: IFTRUE 75616
75614: GO 75764
75616: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
75617: LD_ADDR_VAR 0 2
75621: PUSH
75622: LD_INT 2
75624: PUSH
75625: LD_INT 4
75627: PUSH
75628: LD_INT 5
75630: PUSH
75631: LD_INT 7
75633: PUSH
75634: LD_INT 11
75636: PUSH
75637: LD_INT 12
75639: PUSH
75640: LD_INT 15
75642: PUSH
75643: LD_INT 16
75645: PUSH
75646: LD_INT 20
75648: PUSH
75649: LD_INT 21
75651: PUSH
75652: LD_INT 22
75654: PUSH
75655: LD_INT 23
75657: PUSH
75658: LD_INT 25
75660: PUSH
75661: LD_INT 26
75663: PUSH
75664: LD_INT 30
75666: PUSH
75667: LD_INT 31
75669: PUSH
75670: LD_INT 32
75672: PUSH
75673: LD_INT 33
75675: PUSH
75676: LD_INT 34
75678: PUSH
75679: LD_INT 35
75681: PUSH
75682: LD_INT 36
75684: PUSH
75685: EMPTY
75686: LIST
75687: LIST
75688: LIST
75689: LIST
75690: LIST
75691: LIST
75692: LIST
75693: LIST
75694: LIST
75695: LIST
75696: LIST
75697: LIST
75698: LIST
75699: LIST
75700: LIST
75701: LIST
75702: LIST
75703: LIST
75704: LIST
75705: LIST
75706: LIST
75707: PUSH
75708: LD_INT 101
75710: PUSH
75711: LD_INT 102
75713: PUSH
75714: LD_INT 103
75716: PUSH
75717: LD_INT 106
75719: PUSH
75720: LD_INT 108
75722: PUSH
75723: LD_INT 112
75725: PUSH
75726: LD_INT 113
75728: PUSH
75729: LD_INT 114
75731: PUSH
75732: LD_INT 115
75734: PUSH
75735: LD_INT 116
75737: PUSH
75738: LD_INT 117
75740: PUSH
75741: LD_INT 118
75743: PUSH
75744: EMPTY
75745: LIST
75746: LIST
75747: LIST
75748: LIST
75749: LIST
75750: LIST
75751: LIST
75752: LIST
75753: LIST
75754: LIST
75755: LIST
75756: LIST
75757: PUSH
75758: EMPTY
75759: LIST
75760: LIST
75761: ST_TO_ADDR
75762: GO 76005
75764: LD_INT 19
75766: DOUBLE
75767: EQUAL
75768: IFTRUE 75772
75770: GO 76004
75772: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
75773: LD_ADDR_VAR 0 2
75777: PUSH
75778: LD_INT 1
75780: PUSH
75781: LD_INT 2
75783: PUSH
75784: LD_INT 3
75786: PUSH
75787: LD_INT 4
75789: PUSH
75790: LD_INT 5
75792: PUSH
75793: LD_INT 6
75795: PUSH
75796: LD_INT 7
75798: PUSH
75799: LD_INT 8
75801: PUSH
75802: LD_INT 9
75804: PUSH
75805: LD_INT 10
75807: PUSH
75808: LD_INT 11
75810: PUSH
75811: LD_INT 12
75813: PUSH
75814: LD_INT 13
75816: PUSH
75817: LD_INT 14
75819: PUSH
75820: LD_INT 15
75822: PUSH
75823: LD_INT 16
75825: PUSH
75826: LD_INT 17
75828: PUSH
75829: LD_INT 18
75831: PUSH
75832: LD_INT 19
75834: PUSH
75835: LD_INT 20
75837: PUSH
75838: LD_INT 21
75840: PUSH
75841: LD_INT 22
75843: PUSH
75844: LD_INT 23
75846: PUSH
75847: LD_INT 24
75849: PUSH
75850: LD_INT 25
75852: PUSH
75853: LD_INT 26
75855: PUSH
75856: LD_INT 27
75858: PUSH
75859: LD_INT 28
75861: PUSH
75862: LD_INT 29
75864: PUSH
75865: LD_INT 30
75867: PUSH
75868: LD_INT 31
75870: PUSH
75871: LD_INT 32
75873: PUSH
75874: LD_INT 33
75876: PUSH
75877: LD_INT 34
75879: PUSH
75880: LD_INT 35
75882: PUSH
75883: LD_INT 36
75885: PUSH
75886: EMPTY
75887: LIST
75888: LIST
75889: LIST
75890: LIST
75891: LIST
75892: LIST
75893: LIST
75894: LIST
75895: LIST
75896: LIST
75897: LIST
75898: LIST
75899: LIST
75900: LIST
75901: LIST
75902: LIST
75903: LIST
75904: LIST
75905: LIST
75906: LIST
75907: LIST
75908: LIST
75909: LIST
75910: LIST
75911: LIST
75912: LIST
75913: LIST
75914: LIST
75915: LIST
75916: LIST
75917: LIST
75918: LIST
75919: LIST
75920: LIST
75921: LIST
75922: LIST
75923: PUSH
75924: LD_INT 101
75926: PUSH
75927: LD_INT 102
75929: PUSH
75930: LD_INT 103
75932: PUSH
75933: LD_INT 104
75935: PUSH
75936: LD_INT 105
75938: PUSH
75939: LD_INT 106
75941: PUSH
75942: LD_INT 107
75944: PUSH
75945: LD_INT 108
75947: PUSH
75948: LD_INT 109
75950: PUSH
75951: LD_INT 110
75953: PUSH
75954: LD_INT 111
75956: PUSH
75957: LD_INT 112
75959: PUSH
75960: LD_INT 113
75962: PUSH
75963: LD_INT 114
75965: PUSH
75966: LD_INT 115
75968: PUSH
75969: LD_INT 116
75971: PUSH
75972: LD_INT 117
75974: PUSH
75975: LD_INT 118
75977: PUSH
75978: EMPTY
75979: LIST
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: LIST
75991: LIST
75992: LIST
75993: LIST
75994: LIST
75995: LIST
75996: LIST
75997: PUSH
75998: EMPTY
75999: LIST
76000: LIST
76001: ST_TO_ADDR
76002: GO 76005
76004: POP
// end else
76005: GO 76236
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
76007: LD_ADDR_VAR 0 2
76011: PUSH
76012: LD_INT 1
76014: PUSH
76015: LD_INT 2
76017: PUSH
76018: LD_INT 3
76020: PUSH
76021: LD_INT 4
76023: PUSH
76024: LD_INT 5
76026: PUSH
76027: LD_INT 6
76029: PUSH
76030: LD_INT 7
76032: PUSH
76033: LD_INT 8
76035: PUSH
76036: LD_INT 9
76038: PUSH
76039: LD_INT 10
76041: PUSH
76042: LD_INT 11
76044: PUSH
76045: LD_INT 12
76047: PUSH
76048: LD_INT 13
76050: PUSH
76051: LD_INT 14
76053: PUSH
76054: LD_INT 15
76056: PUSH
76057: LD_INT 16
76059: PUSH
76060: LD_INT 17
76062: PUSH
76063: LD_INT 18
76065: PUSH
76066: LD_INT 19
76068: PUSH
76069: LD_INT 20
76071: PUSH
76072: LD_INT 21
76074: PUSH
76075: LD_INT 22
76077: PUSH
76078: LD_INT 23
76080: PUSH
76081: LD_INT 24
76083: PUSH
76084: LD_INT 25
76086: PUSH
76087: LD_INT 26
76089: PUSH
76090: LD_INT 27
76092: PUSH
76093: LD_INT 28
76095: PUSH
76096: LD_INT 29
76098: PUSH
76099: LD_INT 30
76101: PUSH
76102: LD_INT 31
76104: PUSH
76105: LD_INT 32
76107: PUSH
76108: LD_INT 33
76110: PUSH
76111: LD_INT 34
76113: PUSH
76114: LD_INT 35
76116: PUSH
76117: LD_INT 36
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: LIST
76124: LIST
76125: LIST
76126: LIST
76127: LIST
76128: LIST
76129: LIST
76130: LIST
76131: LIST
76132: LIST
76133: LIST
76134: LIST
76135: LIST
76136: LIST
76137: LIST
76138: LIST
76139: LIST
76140: LIST
76141: LIST
76142: LIST
76143: LIST
76144: LIST
76145: LIST
76146: LIST
76147: LIST
76148: LIST
76149: LIST
76150: LIST
76151: LIST
76152: LIST
76153: LIST
76154: LIST
76155: LIST
76156: LIST
76157: PUSH
76158: LD_INT 101
76160: PUSH
76161: LD_INT 102
76163: PUSH
76164: LD_INT 103
76166: PUSH
76167: LD_INT 104
76169: PUSH
76170: LD_INT 105
76172: PUSH
76173: LD_INT 106
76175: PUSH
76176: LD_INT 107
76178: PUSH
76179: LD_INT 108
76181: PUSH
76182: LD_INT 109
76184: PUSH
76185: LD_INT 110
76187: PUSH
76188: LD_INT 111
76190: PUSH
76191: LD_INT 112
76193: PUSH
76194: LD_INT 113
76196: PUSH
76197: LD_INT 114
76199: PUSH
76200: LD_INT 115
76202: PUSH
76203: LD_INT 116
76205: PUSH
76206: LD_INT 117
76208: PUSH
76209: LD_INT 118
76211: PUSH
76212: EMPTY
76213: LIST
76214: LIST
76215: LIST
76216: LIST
76217: LIST
76218: LIST
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: LIST
76224: LIST
76225: LIST
76226: LIST
76227: LIST
76228: LIST
76229: LIST
76230: LIST
76231: PUSH
76232: EMPTY
76233: LIST
76234: LIST
76235: ST_TO_ADDR
// if result then
76236: LD_VAR 0 2
76240: IFFALSE 77026
// begin normal :=  ;
76242: LD_ADDR_VAR 0 5
76246: PUSH
76247: LD_STRING 
76249: ST_TO_ADDR
// hardcore :=  ;
76250: LD_ADDR_VAR 0 6
76254: PUSH
76255: LD_STRING 
76257: ST_TO_ADDR
// active :=  ;
76258: LD_ADDR_VAR 0 7
76262: PUSH
76263: LD_STRING 
76265: ST_TO_ADDR
// for i = 1 to normalCounter do
76266: LD_ADDR_VAR 0 8
76270: PUSH
76271: DOUBLE
76272: LD_INT 1
76274: DEC
76275: ST_TO_ADDR
76276: LD_EXP 65
76280: PUSH
76281: FOR_TO
76282: IFFALSE 76383
// begin tmp := 0 ;
76284: LD_ADDR_VAR 0 3
76288: PUSH
76289: LD_STRING 0
76291: ST_TO_ADDR
// if result [ 1 ] then
76292: LD_VAR 0 2
76296: PUSH
76297: LD_INT 1
76299: ARRAY
76300: IFFALSE 76365
// if result [ 1 ] [ 1 ] = i then
76302: LD_VAR 0 2
76306: PUSH
76307: LD_INT 1
76309: ARRAY
76310: PUSH
76311: LD_INT 1
76313: ARRAY
76314: PUSH
76315: LD_VAR 0 8
76319: EQUAL
76320: IFFALSE 76365
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
76322: LD_ADDR_VAR 0 2
76326: PUSH
76327: LD_VAR 0 2
76331: PPUSH
76332: LD_INT 1
76334: PPUSH
76335: LD_VAR 0 2
76339: PUSH
76340: LD_INT 1
76342: ARRAY
76343: PPUSH
76344: LD_INT 1
76346: PPUSH
76347: CALL_OW 3
76351: PPUSH
76352: CALL_OW 1
76356: ST_TO_ADDR
// tmp := 1 ;
76357: LD_ADDR_VAR 0 3
76361: PUSH
76362: LD_STRING 1
76364: ST_TO_ADDR
// end ; normal := normal & tmp ;
76365: LD_ADDR_VAR 0 5
76369: PUSH
76370: LD_VAR 0 5
76374: PUSH
76375: LD_VAR 0 3
76379: STR
76380: ST_TO_ADDR
// end ;
76381: GO 76281
76383: POP
76384: POP
// for i = 1 to hardcoreCounter do
76385: LD_ADDR_VAR 0 8
76389: PUSH
76390: DOUBLE
76391: LD_INT 1
76393: DEC
76394: ST_TO_ADDR
76395: LD_EXP 66
76399: PUSH
76400: FOR_TO
76401: IFFALSE 76506
// begin tmp := 0 ;
76403: LD_ADDR_VAR 0 3
76407: PUSH
76408: LD_STRING 0
76410: ST_TO_ADDR
// if result [ 2 ] then
76411: LD_VAR 0 2
76415: PUSH
76416: LD_INT 2
76418: ARRAY
76419: IFFALSE 76488
// if result [ 2 ] [ 1 ] = 100 + i then
76421: LD_VAR 0 2
76425: PUSH
76426: LD_INT 2
76428: ARRAY
76429: PUSH
76430: LD_INT 1
76432: ARRAY
76433: PUSH
76434: LD_INT 100
76436: PUSH
76437: LD_VAR 0 8
76441: PLUS
76442: EQUAL
76443: IFFALSE 76488
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
76445: LD_ADDR_VAR 0 2
76449: PUSH
76450: LD_VAR 0 2
76454: PPUSH
76455: LD_INT 2
76457: PPUSH
76458: LD_VAR 0 2
76462: PUSH
76463: LD_INT 2
76465: ARRAY
76466: PPUSH
76467: LD_INT 1
76469: PPUSH
76470: CALL_OW 3
76474: PPUSH
76475: CALL_OW 1
76479: ST_TO_ADDR
// tmp := 1 ;
76480: LD_ADDR_VAR 0 3
76484: PUSH
76485: LD_STRING 1
76487: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
76488: LD_ADDR_VAR 0 6
76492: PUSH
76493: LD_VAR 0 6
76497: PUSH
76498: LD_VAR 0 3
76502: STR
76503: ST_TO_ADDR
// end ;
76504: GO 76400
76506: POP
76507: POP
// if isGameLoad then
76508: LD_VAR 0 1
76512: IFFALSE 76987
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
76514: LD_ADDR_VAR 0 4
76518: PUSH
76519: LD_EXP 69
76523: PUSH
76524: LD_EXP 68
76528: PUSH
76529: LD_EXP 70
76533: PUSH
76534: LD_EXP 67
76538: PUSH
76539: LD_EXP 71
76543: PUSH
76544: LD_EXP 72
76548: PUSH
76549: LD_EXP 73
76553: PUSH
76554: LD_EXP 74
76558: PUSH
76559: LD_EXP 75
76563: PUSH
76564: LD_EXP 76
76568: PUSH
76569: LD_EXP 77
76573: PUSH
76574: LD_EXP 78
76578: PUSH
76579: LD_EXP 79
76583: PUSH
76584: LD_EXP 80
76588: PUSH
76589: LD_EXP 88
76593: PUSH
76594: LD_EXP 89
76598: PUSH
76599: LD_EXP 90
76603: PUSH
76604: LD_EXP 91
76608: PUSH
76609: LD_EXP 93
76613: PUSH
76614: LD_EXP 94
76618: PUSH
76619: LD_EXP 95
76623: PUSH
76624: LD_EXP 98
76628: PUSH
76629: LD_EXP 100
76633: PUSH
76634: LD_EXP 101
76638: PUSH
76639: LD_EXP 102
76643: PUSH
76644: LD_EXP 104
76648: PUSH
76649: LD_EXP 105
76653: PUSH
76654: LD_EXP 108
76658: PUSH
76659: LD_EXP 109
76663: PUSH
76664: LD_EXP 110
76668: PUSH
76669: LD_EXP 111
76673: PUSH
76674: LD_EXP 112
76678: PUSH
76679: LD_EXP 113
76683: PUSH
76684: LD_EXP 114
76688: PUSH
76689: LD_EXP 115
76693: PUSH
76694: LD_EXP 116
76698: PUSH
76699: LD_EXP 81
76703: PUSH
76704: LD_EXP 82
76708: PUSH
76709: LD_EXP 85
76713: PUSH
76714: LD_EXP 86
76718: PUSH
76719: LD_EXP 87
76723: PUSH
76724: LD_EXP 83
76728: PUSH
76729: LD_EXP 84
76733: PUSH
76734: LD_EXP 92
76738: PUSH
76739: LD_EXP 96
76743: PUSH
76744: LD_EXP 97
76748: PUSH
76749: LD_EXP 99
76753: PUSH
76754: LD_EXP 103
76758: PUSH
76759: LD_EXP 106
76763: PUSH
76764: LD_EXP 107
76768: PUSH
76769: LD_EXP 117
76773: PUSH
76774: LD_EXP 118
76778: PUSH
76779: LD_EXP 119
76783: PUSH
76784: LD_EXP 120
76788: PUSH
76789: EMPTY
76790: LIST
76791: LIST
76792: LIST
76793: LIST
76794: LIST
76795: LIST
76796: LIST
76797: LIST
76798: LIST
76799: LIST
76800: LIST
76801: LIST
76802: LIST
76803: LIST
76804: LIST
76805: LIST
76806: LIST
76807: LIST
76808: LIST
76809: LIST
76810: LIST
76811: LIST
76812: LIST
76813: LIST
76814: LIST
76815: LIST
76816: LIST
76817: LIST
76818: LIST
76819: LIST
76820: LIST
76821: LIST
76822: LIST
76823: LIST
76824: LIST
76825: LIST
76826: LIST
76827: LIST
76828: LIST
76829: LIST
76830: LIST
76831: LIST
76832: LIST
76833: LIST
76834: LIST
76835: LIST
76836: LIST
76837: LIST
76838: LIST
76839: LIST
76840: LIST
76841: LIST
76842: LIST
76843: LIST
76844: ST_TO_ADDR
// tmp :=  ;
76845: LD_ADDR_VAR 0 3
76849: PUSH
76850: LD_STRING 
76852: ST_TO_ADDR
// for i = 1 to normalCounter do
76853: LD_ADDR_VAR 0 8
76857: PUSH
76858: DOUBLE
76859: LD_INT 1
76861: DEC
76862: ST_TO_ADDR
76863: LD_EXP 65
76867: PUSH
76868: FOR_TO
76869: IFFALSE 76905
// begin if flags [ i ] then
76871: LD_VAR 0 4
76875: PUSH
76876: LD_VAR 0 8
76880: ARRAY
76881: IFFALSE 76903
// tmp := tmp & i & ; ;
76883: LD_ADDR_VAR 0 3
76887: PUSH
76888: LD_VAR 0 3
76892: PUSH
76893: LD_VAR 0 8
76897: STR
76898: PUSH
76899: LD_STRING ;
76901: STR
76902: ST_TO_ADDR
// end ;
76903: GO 76868
76905: POP
76906: POP
// for i = 1 to hardcoreCounter do
76907: LD_ADDR_VAR 0 8
76911: PUSH
76912: DOUBLE
76913: LD_INT 1
76915: DEC
76916: ST_TO_ADDR
76917: LD_EXP 66
76921: PUSH
76922: FOR_TO
76923: IFFALSE 76969
// begin if flags [ normalCounter + i ] then
76925: LD_VAR 0 4
76929: PUSH
76930: LD_EXP 65
76934: PUSH
76935: LD_VAR 0 8
76939: PLUS
76940: ARRAY
76941: IFFALSE 76967
// tmp := tmp & ( 100 + i ) & ; ;
76943: LD_ADDR_VAR 0 3
76947: PUSH
76948: LD_VAR 0 3
76952: PUSH
76953: LD_INT 100
76955: PUSH
76956: LD_VAR 0 8
76960: PLUS
76961: STR
76962: PUSH
76963: LD_STRING ;
76965: STR
76966: ST_TO_ADDR
// end ;
76967: GO 76922
76969: POP
76970: POP
// if tmp then
76971: LD_VAR 0 3
76975: IFFALSE 76987
// active := tmp ;
76977: LD_ADDR_VAR 0 7
76981: PUSH
76982: LD_VAR 0 3
76986: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
76987: LD_STRING getStreamItemsFromMission("
76989: PUSH
76990: LD_VAR 0 5
76994: STR
76995: PUSH
76996: LD_STRING ","
76998: STR
76999: PUSH
77000: LD_VAR 0 6
77004: STR
77005: PUSH
77006: LD_STRING ","
77008: STR
77009: PUSH
77010: LD_VAR 0 7
77014: STR
77015: PUSH
77016: LD_STRING ")
77018: STR
77019: PPUSH
77020: CALL_OW 559
// end else
77024: GO 77033
// ToLua ( getStreamItemsFromMission("","","") ) ;
77026: LD_STRING getStreamItemsFromMission("","","")
77028: PPUSH
77029: CALL_OW 559
// end ;
77033: LD_VAR 0 2
77037: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
77038: LD_EXP 64
77042: PUSH
77043: LD_EXP 69
77047: AND
77048: IFFALSE 77172
77050: GO 77052
77052: DISABLE
77053: LD_INT 0
77055: PPUSH
77056: PPUSH
// begin enable ;
77057: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
77058: LD_ADDR_VAR 0 2
77062: PUSH
77063: LD_INT 22
77065: PUSH
77066: LD_OWVAR 2
77070: PUSH
77071: EMPTY
77072: LIST
77073: LIST
77074: PUSH
77075: LD_INT 2
77077: PUSH
77078: LD_INT 34
77080: PUSH
77081: LD_INT 7
77083: PUSH
77084: EMPTY
77085: LIST
77086: LIST
77087: PUSH
77088: LD_INT 34
77090: PUSH
77091: LD_INT 45
77093: PUSH
77094: EMPTY
77095: LIST
77096: LIST
77097: PUSH
77098: LD_INT 34
77100: PUSH
77101: LD_INT 28
77103: PUSH
77104: EMPTY
77105: LIST
77106: LIST
77107: PUSH
77108: LD_INT 34
77110: PUSH
77111: LD_INT 47
77113: PUSH
77114: EMPTY
77115: LIST
77116: LIST
77117: PUSH
77118: EMPTY
77119: LIST
77120: LIST
77121: LIST
77122: LIST
77123: LIST
77124: PUSH
77125: EMPTY
77126: LIST
77127: LIST
77128: PPUSH
77129: CALL_OW 69
77133: ST_TO_ADDR
// if not tmp then
77134: LD_VAR 0 2
77138: NOT
77139: IFFALSE 77143
// exit ;
77141: GO 77172
// for i in tmp do
77143: LD_ADDR_VAR 0 1
77147: PUSH
77148: LD_VAR 0 2
77152: PUSH
77153: FOR_IN
77154: IFFALSE 77170
// begin SetLives ( i , 0 ) ;
77156: LD_VAR 0 1
77160: PPUSH
77161: LD_INT 0
77163: PPUSH
77164: CALL_OW 234
// end ;
77168: GO 77153
77170: POP
77171: POP
// end ;
77172: PPOPN 2
77174: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
77175: LD_EXP 64
77179: PUSH
77180: LD_EXP 70
77184: AND
77185: IFFALSE 77269
77187: GO 77189
77189: DISABLE
77190: LD_INT 0
77192: PPUSH
77193: PPUSH
// begin enable ;
77194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
77195: LD_ADDR_VAR 0 2
77199: PUSH
77200: LD_INT 22
77202: PUSH
77203: LD_OWVAR 2
77207: PUSH
77208: EMPTY
77209: LIST
77210: LIST
77211: PUSH
77212: LD_INT 32
77214: PUSH
77215: LD_INT 3
77217: PUSH
77218: EMPTY
77219: LIST
77220: LIST
77221: PUSH
77222: EMPTY
77223: LIST
77224: LIST
77225: PPUSH
77226: CALL_OW 69
77230: ST_TO_ADDR
// if not tmp then
77231: LD_VAR 0 2
77235: NOT
77236: IFFALSE 77240
// exit ;
77238: GO 77269
// for i in tmp do
77240: LD_ADDR_VAR 0 1
77244: PUSH
77245: LD_VAR 0 2
77249: PUSH
77250: FOR_IN
77251: IFFALSE 77267
// begin SetLives ( i , 0 ) ;
77253: LD_VAR 0 1
77257: PPUSH
77258: LD_INT 0
77260: PPUSH
77261: CALL_OW 234
// end ;
77265: GO 77250
77267: POP
77268: POP
// end ;
77269: PPOPN 2
77271: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
77272: LD_EXP 64
77276: PUSH
77277: LD_EXP 67
77281: AND
77282: IFFALSE 77375
77284: GO 77286
77286: DISABLE
77287: LD_INT 0
77289: PPUSH
// begin enable ;
77290: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
77291: LD_ADDR_VAR 0 1
77295: PUSH
77296: LD_INT 22
77298: PUSH
77299: LD_OWVAR 2
77303: PUSH
77304: EMPTY
77305: LIST
77306: LIST
77307: PUSH
77308: LD_INT 2
77310: PUSH
77311: LD_INT 25
77313: PUSH
77314: LD_INT 5
77316: PUSH
77317: EMPTY
77318: LIST
77319: LIST
77320: PUSH
77321: LD_INT 25
77323: PUSH
77324: LD_INT 9
77326: PUSH
77327: EMPTY
77328: LIST
77329: LIST
77330: PUSH
77331: LD_INT 25
77333: PUSH
77334: LD_INT 8
77336: PUSH
77337: EMPTY
77338: LIST
77339: LIST
77340: PUSH
77341: EMPTY
77342: LIST
77343: LIST
77344: LIST
77345: LIST
77346: PUSH
77347: EMPTY
77348: LIST
77349: LIST
77350: PPUSH
77351: CALL_OW 69
77355: PUSH
77356: FOR_IN
77357: IFFALSE 77373
// begin SetClass ( i , 1 ) ;
77359: LD_VAR 0 1
77363: PPUSH
77364: LD_INT 1
77366: PPUSH
77367: CALL_OW 336
// end ;
77371: GO 77356
77373: POP
77374: POP
// end ;
77375: PPOPN 1
77377: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
77378: LD_EXP 64
77382: PUSH
77383: LD_EXP 68
77387: AND
77388: PUSH
77389: LD_OWVAR 65
77393: PUSH
77394: LD_INT 7
77396: LESS
77397: AND
77398: IFFALSE 77412
77400: GO 77402
77402: DISABLE
// begin enable ;
77403: ENABLE
// game_speed := 7 ;
77404: LD_ADDR_OWVAR 65
77408: PUSH
77409: LD_INT 7
77411: ST_TO_ADDR
// end ;
77412: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
77413: LD_EXP 64
77417: PUSH
77418: LD_EXP 71
77422: AND
77423: IFFALSE 77625
77425: GO 77427
77427: DISABLE
77428: LD_INT 0
77430: PPUSH
77431: PPUSH
77432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
77433: LD_ADDR_VAR 0 3
77437: PUSH
77438: LD_INT 81
77440: PUSH
77441: LD_OWVAR 2
77445: PUSH
77446: EMPTY
77447: LIST
77448: LIST
77449: PUSH
77450: LD_INT 21
77452: PUSH
77453: LD_INT 1
77455: PUSH
77456: EMPTY
77457: LIST
77458: LIST
77459: PUSH
77460: EMPTY
77461: LIST
77462: LIST
77463: PPUSH
77464: CALL_OW 69
77468: ST_TO_ADDR
// if not tmp then
77469: LD_VAR 0 3
77473: NOT
77474: IFFALSE 77478
// exit ;
77476: GO 77625
// if tmp > 5 then
77478: LD_VAR 0 3
77482: PUSH
77483: LD_INT 5
77485: GREATER
77486: IFFALSE 77498
// k := 5 else
77488: LD_ADDR_VAR 0 2
77492: PUSH
77493: LD_INT 5
77495: ST_TO_ADDR
77496: GO 77508
// k := tmp ;
77498: LD_ADDR_VAR 0 2
77502: PUSH
77503: LD_VAR 0 3
77507: ST_TO_ADDR
// for i := 1 to k do
77508: LD_ADDR_VAR 0 1
77512: PUSH
77513: DOUBLE
77514: LD_INT 1
77516: DEC
77517: ST_TO_ADDR
77518: LD_VAR 0 2
77522: PUSH
77523: FOR_TO
77524: IFFALSE 77623
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
77526: LD_VAR 0 3
77530: PUSH
77531: LD_VAR 0 1
77535: ARRAY
77536: PPUSH
77537: LD_VAR 0 1
77541: PUSH
77542: LD_INT 4
77544: MOD
77545: PUSH
77546: LD_INT 1
77548: PLUS
77549: PPUSH
77550: CALL_OW 259
77554: PUSH
77555: LD_INT 10
77557: LESS
77558: IFFALSE 77621
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
77560: LD_VAR 0 3
77564: PUSH
77565: LD_VAR 0 1
77569: ARRAY
77570: PPUSH
77571: LD_VAR 0 1
77575: PUSH
77576: LD_INT 4
77578: MOD
77579: PUSH
77580: LD_INT 1
77582: PLUS
77583: PPUSH
77584: LD_VAR 0 3
77588: PUSH
77589: LD_VAR 0 1
77593: ARRAY
77594: PPUSH
77595: LD_VAR 0 1
77599: PUSH
77600: LD_INT 4
77602: MOD
77603: PUSH
77604: LD_INT 1
77606: PLUS
77607: PPUSH
77608: CALL_OW 259
77612: PUSH
77613: LD_INT 1
77615: PLUS
77616: PPUSH
77617: CALL_OW 237
77621: GO 77523
77623: POP
77624: POP
// end ;
77625: PPOPN 3
77627: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
77628: LD_EXP 64
77632: PUSH
77633: LD_EXP 72
77637: AND
77638: IFFALSE 77658
77640: GO 77642
77642: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
77643: LD_INT 4
77645: PPUSH
77646: LD_OWVAR 2
77650: PPUSH
77651: LD_INT 0
77653: PPUSH
77654: CALL_OW 324
77658: END
// every 0 0$1 trigger StreamModeActive and sShovel do
77659: LD_EXP 64
77663: PUSH
77664: LD_EXP 101
77668: AND
77669: IFFALSE 77689
77671: GO 77673
77673: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
77674: LD_INT 19
77676: PPUSH
77677: LD_OWVAR 2
77681: PPUSH
77682: LD_INT 0
77684: PPUSH
77685: CALL_OW 324
77689: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
77690: LD_EXP 64
77694: PUSH
77695: LD_EXP 73
77699: AND
77700: IFFALSE 77802
77702: GO 77704
77704: DISABLE
77705: LD_INT 0
77707: PPUSH
77708: PPUSH
// begin enable ;
77709: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
77710: LD_ADDR_VAR 0 2
77714: PUSH
77715: LD_INT 22
77717: PUSH
77718: LD_OWVAR 2
77722: PUSH
77723: EMPTY
77724: LIST
77725: LIST
77726: PUSH
77727: LD_INT 2
77729: PUSH
77730: LD_INT 34
77732: PUSH
77733: LD_INT 11
77735: PUSH
77736: EMPTY
77737: LIST
77738: LIST
77739: PUSH
77740: LD_INT 34
77742: PUSH
77743: LD_INT 30
77745: PUSH
77746: EMPTY
77747: LIST
77748: LIST
77749: PUSH
77750: EMPTY
77751: LIST
77752: LIST
77753: LIST
77754: PUSH
77755: EMPTY
77756: LIST
77757: LIST
77758: PPUSH
77759: CALL_OW 69
77763: ST_TO_ADDR
// if not tmp then
77764: LD_VAR 0 2
77768: NOT
77769: IFFALSE 77773
// exit ;
77771: GO 77802
// for i in tmp do
77773: LD_ADDR_VAR 0 1
77777: PUSH
77778: LD_VAR 0 2
77782: PUSH
77783: FOR_IN
77784: IFFALSE 77800
// begin SetLives ( i , 0 ) ;
77786: LD_VAR 0 1
77790: PPUSH
77791: LD_INT 0
77793: PPUSH
77794: CALL_OW 234
// end ;
77798: GO 77783
77800: POP
77801: POP
// end ;
77802: PPOPN 2
77804: END
// every 0 0$1 trigger StreamModeActive and sBunker do
77805: LD_EXP 64
77809: PUSH
77810: LD_EXP 74
77814: AND
77815: IFFALSE 77835
77817: GO 77819
77819: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
77820: LD_INT 32
77822: PPUSH
77823: LD_OWVAR 2
77827: PPUSH
77828: LD_INT 0
77830: PPUSH
77831: CALL_OW 324
77835: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
77836: LD_EXP 64
77840: PUSH
77841: LD_EXP 75
77845: AND
77846: IFFALSE 78027
77848: GO 77850
77850: DISABLE
77851: LD_INT 0
77853: PPUSH
77854: PPUSH
77855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
77856: LD_ADDR_VAR 0 2
77860: PUSH
77861: LD_INT 22
77863: PUSH
77864: LD_OWVAR 2
77868: PUSH
77869: EMPTY
77870: LIST
77871: LIST
77872: PUSH
77873: LD_INT 33
77875: PUSH
77876: LD_INT 3
77878: PUSH
77879: EMPTY
77880: LIST
77881: LIST
77882: PUSH
77883: EMPTY
77884: LIST
77885: LIST
77886: PPUSH
77887: CALL_OW 69
77891: ST_TO_ADDR
// if not tmp then
77892: LD_VAR 0 2
77896: NOT
77897: IFFALSE 77901
// exit ;
77899: GO 78027
// side := 0 ;
77901: LD_ADDR_VAR 0 3
77905: PUSH
77906: LD_INT 0
77908: ST_TO_ADDR
// for i := 1 to 8 do
77909: LD_ADDR_VAR 0 1
77913: PUSH
77914: DOUBLE
77915: LD_INT 1
77917: DEC
77918: ST_TO_ADDR
77919: LD_INT 8
77921: PUSH
77922: FOR_TO
77923: IFFALSE 77971
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
77925: LD_OWVAR 2
77929: PUSH
77930: LD_VAR 0 1
77934: NONEQUAL
77935: PUSH
77936: LD_OWVAR 2
77940: PPUSH
77941: LD_VAR 0 1
77945: PPUSH
77946: CALL_OW 81
77950: PUSH
77951: LD_INT 2
77953: EQUAL
77954: AND
77955: IFFALSE 77969
// begin side := i ;
77957: LD_ADDR_VAR 0 3
77961: PUSH
77962: LD_VAR 0 1
77966: ST_TO_ADDR
// break ;
77967: GO 77971
// end ;
77969: GO 77922
77971: POP
77972: POP
// if not side then
77973: LD_VAR 0 3
77977: NOT
77978: IFFALSE 77982
// exit ;
77980: GO 78027
// for i := 1 to tmp do
77982: LD_ADDR_VAR 0 1
77986: PUSH
77987: DOUBLE
77988: LD_INT 1
77990: DEC
77991: ST_TO_ADDR
77992: LD_VAR 0 2
77996: PUSH
77997: FOR_TO
77998: IFFALSE 78025
// if Prob ( 60 ) then
78000: LD_INT 60
78002: PPUSH
78003: CALL_OW 13
78007: IFFALSE 78023
// SetSide ( i , side ) ;
78009: LD_VAR 0 1
78013: PPUSH
78014: LD_VAR 0 3
78018: PPUSH
78019: CALL_OW 235
78023: GO 77997
78025: POP
78026: POP
// end ;
78027: PPOPN 3
78029: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
78030: LD_EXP 64
78034: PUSH
78035: LD_EXP 77
78039: AND
78040: IFFALSE 78159
78042: GO 78044
78044: DISABLE
78045: LD_INT 0
78047: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
78048: LD_ADDR_VAR 0 1
78052: PUSH
78053: LD_INT 22
78055: PUSH
78056: LD_OWVAR 2
78060: PUSH
78061: EMPTY
78062: LIST
78063: LIST
78064: PUSH
78065: LD_INT 21
78067: PUSH
78068: LD_INT 1
78070: PUSH
78071: EMPTY
78072: LIST
78073: LIST
78074: PUSH
78075: LD_INT 3
78077: PUSH
78078: LD_INT 23
78080: PUSH
78081: LD_INT 0
78083: PUSH
78084: EMPTY
78085: LIST
78086: LIST
78087: PUSH
78088: EMPTY
78089: LIST
78090: LIST
78091: PUSH
78092: EMPTY
78093: LIST
78094: LIST
78095: LIST
78096: PPUSH
78097: CALL_OW 69
78101: PUSH
78102: FOR_IN
78103: IFFALSE 78157
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
78105: LD_VAR 0 1
78109: PPUSH
78110: CALL_OW 257
78114: PUSH
78115: LD_INT 1
78117: PUSH
78118: LD_INT 2
78120: PUSH
78121: LD_INT 3
78123: PUSH
78124: LD_INT 4
78126: PUSH
78127: EMPTY
78128: LIST
78129: LIST
78130: LIST
78131: LIST
78132: IN
78133: IFFALSE 78155
// SetClass ( un , rand ( 1 , 4 ) ) ;
78135: LD_VAR 0 1
78139: PPUSH
78140: LD_INT 1
78142: PPUSH
78143: LD_INT 4
78145: PPUSH
78146: CALL_OW 12
78150: PPUSH
78151: CALL_OW 336
78155: GO 78102
78157: POP
78158: POP
// end ;
78159: PPOPN 1
78161: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
78162: LD_EXP 64
78166: PUSH
78167: LD_EXP 76
78171: AND
78172: IFFALSE 78251
78174: GO 78176
78176: DISABLE
78177: LD_INT 0
78179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78180: LD_ADDR_VAR 0 1
78184: PUSH
78185: LD_INT 22
78187: PUSH
78188: LD_OWVAR 2
78192: PUSH
78193: EMPTY
78194: LIST
78195: LIST
78196: PUSH
78197: LD_INT 21
78199: PUSH
78200: LD_INT 3
78202: PUSH
78203: EMPTY
78204: LIST
78205: LIST
78206: PUSH
78207: EMPTY
78208: LIST
78209: LIST
78210: PPUSH
78211: CALL_OW 69
78215: ST_TO_ADDR
// if not tmp then
78216: LD_VAR 0 1
78220: NOT
78221: IFFALSE 78225
// exit ;
78223: GO 78251
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
78225: LD_VAR 0 1
78229: PUSH
78230: LD_INT 1
78232: PPUSH
78233: LD_VAR 0 1
78237: PPUSH
78238: CALL_OW 12
78242: ARRAY
78243: PPUSH
78244: LD_INT 100
78246: PPUSH
78247: CALL_OW 234
// end ;
78251: PPOPN 1
78253: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
78254: LD_EXP 64
78258: PUSH
78259: LD_EXP 78
78263: AND
78264: IFFALSE 78362
78266: GO 78268
78268: DISABLE
78269: LD_INT 0
78271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
78272: LD_ADDR_VAR 0 1
78276: PUSH
78277: LD_INT 22
78279: PUSH
78280: LD_OWVAR 2
78284: PUSH
78285: EMPTY
78286: LIST
78287: LIST
78288: PUSH
78289: LD_INT 21
78291: PUSH
78292: LD_INT 1
78294: PUSH
78295: EMPTY
78296: LIST
78297: LIST
78298: PUSH
78299: EMPTY
78300: LIST
78301: LIST
78302: PPUSH
78303: CALL_OW 69
78307: ST_TO_ADDR
// if not tmp then
78308: LD_VAR 0 1
78312: NOT
78313: IFFALSE 78317
// exit ;
78315: GO 78362
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
78317: LD_VAR 0 1
78321: PUSH
78322: LD_INT 1
78324: PPUSH
78325: LD_VAR 0 1
78329: PPUSH
78330: CALL_OW 12
78334: ARRAY
78335: PPUSH
78336: LD_INT 1
78338: PPUSH
78339: LD_INT 4
78341: PPUSH
78342: CALL_OW 12
78346: PPUSH
78347: LD_INT 3000
78349: PPUSH
78350: LD_INT 9000
78352: PPUSH
78353: CALL_OW 12
78357: PPUSH
78358: CALL_OW 492
// end ;
78362: PPOPN 1
78364: END
// every 0 0$1 trigger StreamModeActive and sDepot do
78365: LD_EXP 64
78369: PUSH
78370: LD_EXP 79
78374: AND
78375: IFFALSE 78395
78377: GO 78379
78379: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
78380: LD_INT 1
78382: PPUSH
78383: LD_OWVAR 2
78387: PPUSH
78388: LD_INT 0
78390: PPUSH
78391: CALL_OW 324
78395: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
78396: LD_EXP 64
78400: PUSH
78401: LD_EXP 80
78405: AND
78406: IFFALSE 78489
78408: GO 78410
78410: DISABLE
78411: LD_INT 0
78413: PPUSH
78414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78415: LD_ADDR_VAR 0 2
78419: PUSH
78420: LD_INT 22
78422: PUSH
78423: LD_OWVAR 2
78427: PUSH
78428: EMPTY
78429: LIST
78430: LIST
78431: PUSH
78432: LD_INT 21
78434: PUSH
78435: LD_INT 3
78437: PUSH
78438: EMPTY
78439: LIST
78440: LIST
78441: PUSH
78442: EMPTY
78443: LIST
78444: LIST
78445: PPUSH
78446: CALL_OW 69
78450: ST_TO_ADDR
// if not tmp then
78451: LD_VAR 0 2
78455: NOT
78456: IFFALSE 78460
// exit ;
78458: GO 78489
// for i in tmp do
78460: LD_ADDR_VAR 0 1
78464: PUSH
78465: LD_VAR 0 2
78469: PUSH
78470: FOR_IN
78471: IFFALSE 78487
// SetBLevel ( i , 10 ) ;
78473: LD_VAR 0 1
78477: PPUSH
78478: LD_INT 10
78480: PPUSH
78481: CALL_OW 241
78485: GO 78470
78487: POP
78488: POP
// end ;
78489: PPOPN 2
78491: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
78492: LD_EXP 64
78496: PUSH
78497: LD_EXP 81
78501: AND
78502: IFFALSE 78613
78504: GO 78506
78506: DISABLE
78507: LD_INT 0
78509: PPUSH
78510: PPUSH
78511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78512: LD_ADDR_VAR 0 3
78516: PUSH
78517: LD_INT 22
78519: PUSH
78520: LD_OWVAR 2
78524: PUSH
78525: EMPTY
78526: LIST
78527: LIST
78528: PUSH
78529: LD_INT 25
78531: PUSH
78532: LD_INT 1
78534: PUSH
78535: EMPTY
78536: LIST
78537: LIST
78538: PUSH
78539: EMPTY
78540: LIST
78541: LIST
78542: PPUSH
78543: CALL_OW 69
78547: ST_TO_ADDR
// if not tmp then
78548: LD_VAR 0 3
78552: NOT
78553: IFFALSE 78557
// exit ;
78555: GO 78613
// un := tmp [ rand ( 1 , tmp ) ] ;
78557: LD_ADDR_VAR 0 2
78561: PUSH
78562: LD_VAR 0 3
78566: PUSH
78567: LD_INT 1
78569: PPUSH
78570: LD_VAR 0 3
78574: PPUSH
78575: CALL_OW 12
78579: ARRAY
78580: ST_TO_ADDR
// if Crawls ( un ) then
78581: LD_VAR 0 2
78585: PPUSH
78586: CALL_OW 318
78590: IFFALSE 78601
// ComWalk ( un ) ;
78592: LD_VAR 0 2
78596: PPUSH
78597: CALL_OW 138
// SetClass ( un , class_sniper ) ;
78601: LD_VAR 0 2
78605: PPUSH
78606: LD_INT 5
78608: PPUSH
78609: CALL_OW 336
// end ;
78613: PPOPN 3
78615: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
78616: LD_EXP 64
78620: PUSH
78621: LD_EXP 82
78625: AND
78626: PUSH
78627: LD_OWVAR 67
78631: PUSH
78632: LD_INT 4
78634: LESS
78635: AND
78636: IFFALSE 78655
78638: GO 78640
78640: DISABLE
// begin Difficulty := Difficulty + 1 ;
78641: LD_ADDR_OWVAR 67
78645: PUSH
78646: LD_OWVAR 67
78650: PUSH
78651: LD_INT 1
78653: PLUS
78654: ST_TO_ADDR
// end ;
78655: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
78656: LD_EXP 64
78660: PUSH
78661: LD_EXP 83
78665: AND
78666: IFFALSE 78769
78668: GO 78670
78670: DISABLE
78671: LD_INT 0
78673: PPUSH
// begin for i := 1 to 5 do
78674: LD_ADDR_VAR 0 1
78678: PUSH
78679: DOUBLE
78680: LD_INT 1
78682: DEC
78683: ST_TO_ADDR
78684: LD_INT 5
78686: PUSH
78687: FOR_TO
78688: IFFALSE 78767
// begin uc_nation := nation_nature ;
78690: LD_ADDR_OWVAR 21
78694: PUSH
78695: LD_INT 0
78697: ST_TO_ADDR
// uc_side := 0 ;
78698: LD_ADDR_OWVAR 20
78702: PUSH
78703: LD_INT 0
78705: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78706: LD_ADDR_OWVAR 29
78710: PUSH
78711: LD_INT 12
78713: PUSH
78714: LD_INT 12
78716: PUSH
78717: EMPTY
78718: LIST
78719: LIST
78720: ST_TO_ADDR
// hc_agressivity := 20 ;
78721: LD_ADDR_OWVAR 35
78725: PUSH
78726: LD_INT 20
78728: ST_TO_ADDR
// hc_class := class_tiger ;
78729: LD_ADDR_OWVAR 28
78733: PUSH
78734: LD_INT 14
78736: ST_TO_ADDR
// hc_gallery :=  ;
78737: LD_ADDR_OWVAR 33
78741: PUSH
78742: LD_STRING 
78744: ST_TO_ADDR
// hc_name :=  ;
78745: LD_ADDR_OWVAR 26
78749: PUSH
78750: LD_STRING 
78752: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
78753: CALL_OW 44
78757: PPUSH
78758: LD_INT 0
78760: PPUSH
78761: CALL_OW 51
// end ;
78765: GO 78687
78767: POP
78768: POP
// end ;
78769: PPOPN 1
78771: END
// every 0 0$1 trigger StreamModeActive and sBomb do
78772: LD_EXP 64
78776: PUSH
78777: LD_EXP 84
78781: AND
78782: IFFALSE 78791
78784: GO 78786
78786: DISABLE
// StreamSibBomb ;
78787: CALL 78792 0 0
78791: END
// export function StreamSibBomb ; var i , x , y ; begin
78792: LD_INT 0
78794: PPUSH
78795: PPUSH
78796: PPUSH
78797: PPUSH
// result := false ;
78798: LD_ADDR_VAR 0 1
78802: PUSH
78803: LD_INT 0
78805: ST_TO_ADDR
// for i := 1 to 16 do
78806: LD_ADDR_VAR 0 2
78810: PUSH
78811: DOUBLE
78812: LD_INT 1
78814: DEC
78815: ST_TO_ADDR
78816: LD_INT 16
78818: PUSH
78819: FOR_TO
78820: IFFALSE 79019
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78822: LD_ADDR_VAR 0 3
78826: PUSH
78827: LD_INT 10
78829: PUSH
78830: LD_INT 20
78832: PUSH
78833: LD_INT 30
78835: PUSH
78836: LD_INT 40
78838: PUSH
78839: LD_INT 50
78841: PUSH
78842: LD_INT 60
78844: PUSH
78845: LD_INT 70
78847: PUSH
78848: LD_INT 80
78850: PUSH
78851: LD_INT 90
78853: PUSH
78854: LD_INT 100
78856: PUSH
78857: LD_INT 110
78859: PUSH
78860: LD_INT 120
78862: PUSH
78863: LD_INT 130
78865: PUSH
78866: LD_INT 140
78868: PUSH
78869: LD_INT 150
78871: PUSH
78872: EMPTY
78873: LIST
78874: LIST
78875: LIST
78876: LIST
78877: LIST
78878: LIST
78879: LIST
78880: LIST
78881: LIST
78882: LIST
78883: LIST
78884: LIST
78885: LIST
78886: LIST
78887: LIST
78888: PUSH
78889: LD_INT 1
78891: PPUSH
78892: LD_INT 15
78894: PPUSH
78895: CALL_OW 12
78899: ARRAY
78900: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78901: LD_ADDR_VAR 0 4
78905: PUSH
78906: LD_INT 10
78908: PUSH
78909: LD_INT 20
78911: PUSH
78912: LD_INT 30
78914: PUSH
78915: LD_INT 40
78917: PUSH
78918: LD_INT 50
78920: PUSH
78921: LD_INT 60
78923: PUSH
78924: LD_INT 70
78926: PUSH
78927: LD_INT 80
78929: PUSH
78930: LD_INT 90
78932: PUSH
78933: LD_INT 100
78935: PUSH
78936: LD_INT 110
78938: PUSH
78939: LD_INT 120
78941: PUSH
78942: LD_INT 130
78944: PUSH
78945: LD_INT 140
78947: PUSH
78948: LD_INT 150
78950: PUSH
78951: EMPTY
78952: LIST
78953: LIST
78954: LIST
78955: LIST
78956: LIST
78957: LIST
78958: LIST
78959: LIST
78960: LIST
78961: LIST
78962: LIST
78963: LIST
78964: LIST
78965: LIST
78966: LIST
78967: PUSH
78968: LD_INT 1
78970: PPUSH
78971: LD_INT 15
78973: PPUSH
78974: CALL_OW 12
78978: ARRAY
78979: ST_TO_ADDR
// if ValidHex ( x , y ) then
78980: LD_VAR 0 3
78984: PPUSH
78985: LD_VAR 0 4
78989: PPUSH
78990: CALL_OW 488
78994: IFFALSE 79017
// begin result := [ x , y ] ;
78996: LD_ADDR_VAR 0 1
79000: PUSH
79001: LD_VAR 0 3
79005: PUSH
79006: LD_VAR 0 4
79010: PUSH
79011: EMPTY
79012: LIST
79013: LIST
79014: ST_TO_ADDR
// break ;
79015: GO 79019
// end ; end ;
79017: GO 78819
79019: POP
79020: POP
// if result then
79021: LD_VAR 0 1
79025: IFFALSE 79085
// begin ToLua ( playSibBomb() ) ;
79027: LD_STRING playSibBomb()
79029: PPUSH
79030: CALL_OW 559
// wait ( 0 0$14 ) ;
79034: LD_INT 490
79036: PPUSH
79037: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
79041: LD_VAR 0 1
79045: PUSH
79046: LD_INT 1
79048: ARRAY
79049: PPUSH
79050: LD_VAR 0 1
79054: PUSH
79055: LD_INT 2
79057: ARRAY
79058: PPUSH
79059: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
79063: LD_VAR 0 1
79067: PUSH
79068: LD_INT 1
79070: ARRAY
79071: PPUSH
79072: LD_VAR 0 1
79076: PUSH
79077: LD_INT 2
79079: ARRAY
79080: PPUSH
79081: CALL_OW 429
// end ; end ;
79085: LD_VAR 0 1
79089: RET
// every 0 0$1 trigger StreamModeActive and sReset do
79090: LD_EXP 64
79094: PUSH
79095: LD_EXP 86
79099: AND
79100: IFFALSE 79112
79102: GO 79104
79104: DISABLE
// YouLost (  ) ;
79105: LD_STRING 
79107: PPUSH
79108: CALL_OW 104
79112: END
// every 0 0$1 trigger StreamModeActive and sFog do
79113: LD_EXP 64
79117: PUSH
79118: LD_EXP 85
79122: AND
79123: IFFALSE 79137
79125: GO 79127
79127: DISABLE
// FogOff ( your_side ) ;
79128: LD_OWVAR 2
79132: PPUSH
79133: CALL_OW 344
79137: END
// every 0 0$1 trigger StreamModeActive and sSun do
79138: LD_EXP 64
79142: PUSH
79143: LD_EXP 87
79147: AND
79148: IFFALSE 79176
79150: GO 79152
79152: DISABLE
// begin solar_recharge_percent := 0 ;
79153: LD_ADDR_OWVAR 79
79157: PUSH
79158: LD_INT 0
79160: ST_TO_ADDR
// wait ( 5 5$00 ) ;
79161: LD_INT 10500
79163: PPUSH
79164: CALL_OW 67
// solar_recharge_percent := 100 ;
79168: LD_ADDR_OWVAR 79
79172: PUSH
79173: LD_INT 100
79175: ST_TO_ADDR
// end ;
79176: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
79177: LD_EXP 64
79181: PUSH
79182: LD_EXP 88
79186: AND
79187: IFFALSE 79426
79189: GO 79191
79191: DISABLE
79192: LD_INT 0
79194: PPUSH
79195: PPUSH
79196: PPUSH
// begin tmp := [ ] ;
79197: LD_ADDR_VAR 0 3
79201: PUSH
79202: EMPTY
79203: ST_TO_ADDR
// for i := 1 to 6 do
79204: LD_ADDR_VAR 0 1
79208: PUSH
79209: DOUBLE
79210: LD_INT 1
79212: DEC
79213: ST_TO_ADDR
79214: LD_INT 6
79216: PUSH
79217: FOR_TO
79218: IFFALSE 79323
// begin uc_nation := nation_nature ;
79220: LD_ADDR_OWVAR 21
79224: PUSH
79225: LD_INT 0
79227: ST_TO_ADDR
// uc_side := 0 ;
79228: LD_ADDR_OWVAR 20
79232: PUSH
79233: LD_INT 0
79235: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
79236: LD_ADDR_OWVAR 29
79240: PUSH
79241: LD_INT 12
79243: PUSH
79244: LD_INT 12
79246: PUSH
79247: EMPTY
79248: LIST
79249: LIST
79250: ST_TO_ADDR
// hc_agressivity := 20 ;
79251: LD_ADDR_OWVAR 35
79255: PUSH
79256: LD_INT 20
79258: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
79259: LD_ADDR_OWVAR 28
79263: PUSH
79264: LD_INT 17
79266: ST_TO_ADDR
// hc_gallery :=  ;
79267: LD_ADDR_OWVAR 33
79271: PUSH
79272: LD_STRING 
79274: ST_TO_ADDR
// hc_name :=  ;
79275: LD_ADDR_OWVAR 26
79279: PUSH
79280: LD_STRING 
79282: ST_TO_ADDR
// un := CreateHuman ;
79283: LD_ADDR_VAR 0 2
79287: PUSH
79288: CALL_OW 44
79292: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
79293: LD_VAR 0 2
79297: PPUSH
79298: LD_INT 1
79300: PPUSH
79301: CALL_OW 51
// tmp := tmp ^ un ;
79305: LD_ADDR_VAR 0 3
79309: PUSH
79310: LD_VAR 0 3
79314: PUSH
79315: LD_VAR 0 2
79319: ADD
79320: ST_TO_ADDR
// end ;
79321: GO 79217
79323: POP
79324: POP
// repeat wait ( 0 0$1 ) ;
79325: LD_INT 35
79327: PPUSH
79328: CALL_OW 67
// for un in tmp do
79332: LD_ADDR_VAR 0 2
79336: PUSH
79337: LD_VAR 0 3
79341: PUSH
79342: FOR_IN
79343: IFFALSE 79417
// begin if IsDead ( un ) then
79345: LD_VAR 0 2
79349: PPUSH
79350: CALL_OW 301
79354: IFFALSE 79374
// begin tmp := tmp diff un ;
79356: LD_ADDR_VAR 0 3
79360: PUSH
79361: LD_VAR 0 3
79365: PUSH
79366: LD_VAR 0 2
79370: DIFF
79371: ST_TO_ADDR
// continue ;
79372: GO 79342
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
79374: LD_VAR 0 2
79378: PPUSH
79379: LD_INT 3
79381: PUSH
79382: LD_INT 22
79384: PUSH
79385: LD_INT 0
79387: PUSH
79388: EMPTY
79389: LIST
79390: LIST
79391: PUSH
79392: EMPTY
79393: LIST
79394: LIST
79395: PPUSH
79396: CALL_OW 69
79400: PPUSH
79401: LD_VAR 0 2
79405: PPUSH
79406: CALL_OW 74
79410: PPUSH
79411: CALL_OW 115
// end ;
79415: GO 79342
79417: POP
79418: POP
// until not tmp ;
79419: LD_VAR 0 3
79423: NOT
79424: IFFALSE 79325
// end ;
79426: PPOPN 3
79428: END
// every 0 0$1 trigger StreamModeActive and sTroll do
79429: LD_EXP 64
79433: PUSH
79434: LD_EXP 89
79438: AND
79439: IFFALSE 79493
79441: GO 79443
79443: DISABLE
// begin ToLua ( displayTroll(); ) ;
79444: LD_STRING displayTroll();
79446: PPUSH
79447: CALL_OW 559
// wait ( 3 3$00 ) ;
79451: LD_INT 6300
79453: PPUSH
79454: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79458: LD_STRING hideTroll();
79460: PPUSH
79461: CALL_OW 559
// wait ( 1 1$00 ) ;
79465: LD_INT 2100
79467: PPUSH
79468: CALL_OW 67
// ToLua ( displayTroll(); ) ;
79472: LD_STRING displayTroll();
79474: PPUSH
79475: CALL_OW 559
// wait ( 1 1$00 ) ;
79479: LD_INT 2100
79481: PPUSH
79482: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79486: LD_STRING hideTroll();
79488: PPUSH
79489: CALL_OW 559
// end ;
79493: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
79494: LD_EXP 64
79498: PUSH
79499: LD_EXP 90
79503: AND
79504: IFFALSE 79567
79506: GO 79508
79508: DISABLE
79509: LD_INT 0
79511: PPUSH
// begin p := 0 ;
79512: LD_ADDR_VAR 0 1
79516: PUSH
79517: LD_INT 0
79519: ST_TO_ADDR
// repeat game_speed := 1 ;
79520: LD_ADDR_OWVAR 65
79524: PUSH
79525: LD_INT 1
79527: ST_TO_ADDR
// wait ( 0 0$1 ) ;
79528: LD_INT 35
79530: PPUSH
79531: CALL_OW 67
// p := p + 1 ;
79535: LD_ADDR_VAR 0 1
79539: PUSH
79540: LD_VAR 0 1
79544: PUSH
79545: LD_INT 1
79547: PLUS
79548: ST_TO_ADDR
// until p >= 60 ;
79549: LD_VAR 0 1
79553: PUSH
79554: LD_INT 60
79556: GREATEREQUAL
79557: IFFALSE 79520
// game_speed := 4 ;
79559: LD_ADDR_OWVAR 65
79563: PUSH
79564: LD_INT 4
79566: ST_TO_ADDR
// end ;
79567: PPOPN 1
79569: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
79570: LD_EXP 64
79574: PUSH
79575: LD_EXP 91
79579: AND
79580: IFFALSE 79726
79582: GO 79584
79584: DISABLE
79585: LD_INT 0
79587: PPUSH
79588: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79589: LD_ADDR_VAR 0 1
79593: PUSH
79594: LD_INT 22
79596: PUSH
79597: LD_OWVAR 2
79601: PUSH
79602: EMPTY
79603: LIST
79604: LIST
79605: PUSH
79606: LD_INT 2
79608: PUSH
79609: LD_INT 30
79611: PUSH
79612: LD_INT 0
79614: PUSH
79615: EMPTY
79616: LIST
79617: LIST
79618: PUSH
79619: LD_INT 30
79621: PUSH
79622: LD_INT 1
79624: PUSH
79625: EMPTY
79626: LIST
79627: LIST
79628: PUSH
79629: EMPTY
79630: LIST
79631: LIST
79632: LIST
79633: PUSH
79634: EMPTY
79635: LIST
79636: LIST
79637: PPUSH
79638: CALL_OW 69
79642: ST_TO_ADDR
// if not depot then
79643: LD_VAR 0 1
79647: NOT
79648: IFFALSE 79652
// exit ;
79650: GO 79726
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
79652: LD_ADDR_VAR 0 2
79656: PUSH
79657: LD_VAR 0 1
79661: PUSH
79662: LD_INT 1
79664: PPUSH
79665: LD_VAR 0 1
79669: PPUSH
79670: CALL_OW 12
79674: ARRAY
79675: PPUSH
79676: CALL_OW 274
79680: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
79681: LD_VAR 0 2
79685: PPUSH
79686: LD_INT 1
79688: PPUSH
79689: LD_INT 0
79691: PPUSH
79692: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
79696: LD_VAR 0 2
79700: PPUSH
79701: LD_INT 2
79703: PPUSH
79704: LD_INT 0
79706: PPUSH
79707: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
79711: LD_VAR 0 2
79715: PPUSH
79716: LD_INT 3
79718: PPUSH
79719: LD_INT 0
79721: PPUSH
79722: CALL_OW 277
// end ;
79726: PPOPN 2
79728: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
79729: LD_EXP 64
79733: PUSH
79734: LD_EXP 92
79738: AND
79739: IFFALSE 79836
79741: GO 79743
79743: DISABLE
79744: LD_INT 0
79746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79747: LD_ADDR_VAR 0 1
79751: PUSH
79752: LD_INT 22
79754: PUSH
79755: LD_OWVAR 2
79759: PUSH
79760: EMPTY
79761: LIST
79762: LIST
79763: PUSH
79764: LD_INT 21
79766: PUSH
79767: LD_INT 1
79769: PUSH
79770: EMPTY
79771: LIST
79772: LIST
79773: PUSH
79774: LD_INT 3
79776: PUSH
79777: LD_INT 23
79779: PUSH
79780: LD_INT 0
79782: PUSH
79783: EMPTY
79784: LIST
79785: LIST
79786: PUSH
79787: EMPTY
79788: LIST
79789: LIST
79790: PUSH
79791: EMPTY
79792: LIST
79793: LIST
79794: LIST
79795: PPUSH
79796: CALL_OW 69
79800: ST_TO_ADDR
// if not tmp then
79801: LD_VAR 0 1
79805: NOT
79806: IFFALSE 79810
// exit ;
79808: GO 79836
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
79810: LD_VAR 0 1
79814: PUSH
79815: LD_INT 1
79817: PPUSH
79818: LD_VAR 0 1
79822: PPUSH
79823: CALL_OW 12
79827: ARRAY
79828: PPUSH
79829: LD_INT 200
79831: PPUSH
79832: CALL_OW 234
// end ;
79836: PPOPN 1
79838: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
79839: LD_EXP 64
79843: PUSH
79844: LD_EXP 93
79848: AND
79849: IFFALSE 79928
79851: GO 79853
79853: DISABLE
79854: LD_INT 0
79856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
79857: LD_ADDR_VAR 0 1
79861: PUSH
79862: LD_INT 22
79864: PUSH
79865: LD_OWVAR 2
79869: PUSH
79870: EMPTY
79871: LIST
79872: LIST
79873: PUSH
79874: LD_INT 21
79876: PUSH
79877: LD_INT 2
79879: PUSH
79880: EMPTY
79881: LIST
79882: LIST
79883: PUSH
79884: EMPTY
79885: LIST
79886: LIST
79887: PPUSH
79888: CALL_OW 69
79892: ST_TO_ADDR
// if not tmp then
79893: LD_VAR 0 1
79897: NOT
79898: IFFALSE 79902
// exit ;
79900: GO 79928
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
79902: LD_VAR 0 1
79906: PUSH
79907: LD_INT 1
79909: PPUSH
79910: LD_VAR 0 1
79914: PPUSH
79915: CALL_OW 12
79919: ARRAY
79920: PPUSH
79921: LD_INT 60
79923: PPUSH
79924: CALL_OW 234
// end ;
79928: PPOPN 1
79930: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
79931: LD_EXP 64
79935: PUSH
79936: LD_EXP 94
79940: AND
79941: IFFALSE 80040
79943: GO 79945
79945: DISABLE
79946: LD_INT 0
79948: PPUSH
79949: PPUSH
// begin enable ;
79950: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
79951: LD_ADDR_VAR 0 1
79955: PUSH
79956: LD_INT 22
79958: PUSH
79959: LD_OWVAR 2
79963: PUSH
79964: EMPTY
79965: LIST
79966: LIST
79967: PUSH
79968: LD_INT 61
79970: PUSH
79971: EMPTY
79972: LIST
79973: PUSH
79974: LD_INT 33
79976: PUSH
79977: LD_INT 2
79979: PUSH
79980: EMPTY
79981: LIST
79982: LIST
79983: PUSH
79984: EMPTY
79985: LIST
79986: LIST
79987: LIST
79988: PPUSH
79989: CALL_OW 69
79993: ST_TO_ADDR
// if not tmp then
79994: LD_VAR 0 1
79998: NOT
79999: IFFALSE 80003
// exit ;
80001: GO 80040
// for i in tmp do
80003: LD_ADDR_VAR 0 2
80007: PUSH
80008: LD_VAR 0 1
80012: PUSH
80013: FOR_IN
80014: IFFALSE 80038
// if IsControledBy ( i ) then
80016: LD_VAR 0 2
80020: PPUSH
80021: CALL_OW 312
80025: IFFALSE 80036
// ComUnlink ( i ) ;
80027: LD_VAR 0 2
80031: PPUSH
80032: CALL_OW 136
80036: GO 80013
80038: POP
80039: POP
// end ;
80040: PPOPN 2
80042: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
80043: LD_EXP 64
80047: PUSH
80048: LD_EXP 95
80052: AND
80053: IFFALSE 80193
80055: GO 80057
80057: DISABLE
80058: LD_INT 0
80060: PPUSH
80061: PPUSH
// begin ToLua ( displayPowell(); ) ;
80062: LD_STRING displayPowell();
80064: PPUSH
80065: CALL_OW 559
// uc_side := 0 ;
80069: LD_ADDR_OWVAR 20
80073: PUSH
80074: LD_INT 0
80076: ST_TO_ADDR
// uc_nation := 2 ;
80077: LD_ADDR_OWVAR 21
80081: PUSH
80082: LD_INT 2
80084: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
80085: LD_ADDR_OWVAR 37
80089: PUSH
80090: LD_INT 14
80092: ST_TO_ADDR
// vc_engine := engine_siberite ;
80093: LD_ADDR_OWVAR 39
80097: PUSH
80098: LD_INT 3
80100: ST_TO_ADDR
// vc_control := control_apeman ;
80101: LD_ADDR_OWVAR 38
80105: PUSH
80106: LD_INT 5
80108: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
80109: LD_ADDR_OWVAR 40
80113: PUSH
80114: LD_INT 29
80116: ST_TO_ADDR
// un := CreateVehicle ;
80117: LD_ADDR_VAR 0 2
80121: PUSH
80122: CALL_OW 45
80126: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80127: LD_VAR 0 2
80131: PPUSH
80132: LD_INT 1
80134: PPUSH
80135: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80139: LD_INT 35
80141: PPUSH
80142: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80146: LD_VAR 0 2
80150: PPUSH
80151: LD_INT 22
80153: PUSH
80154: LD_OWVAR 2
80158: PUSH
80159: EMPTY
80160: LIST
80161: LIST
80162: PPUSH
80163: CALL_OW 69
80167: PPUSH
80168: LD_VAR 0 2
80172: PPUSH
80173: CALL_OW 74
80177: PPUSH
80178: CALL_OW 115
// until IsDead ( un ) ;
80182: LD_VAR 0 2
80186: PPUSH
80187: CALL_OW 301
80191: IFFALSE 80139
// end ;
80193: PPOPN 2
80195: END
// every 0 0$1 trigger StreamModeActive and sStu do
80196: LD_EXP 64
80200: PUSH
80201: LD_EXP 103
80205: AND
80206: IFFALSE 80222
80208: GO 80210
80210: DISABLE
// begin ToLua ( displayStucuk(); ) ;
80211: LD_STRING displayStucuk();
80213: PPUSH
80214: CALL_OW 559
// ResetFog ;
80218: CALL_OW 335
// end ;
80222: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
80223: LD_EXP 64
80227: PUSH
80228: LD_EXP 96
80232: AND
80233: IFFALSE 80374
80235: GO 80237
80237: DISABLE
80238: LD_INT 0
80240: PPUSH
80241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80242: LD_ADDR_VAR 0 2
80246: PUSH
80247: LD_INT 22
80249: PUSH
80250: LD_OWVAR 2
80254: PUSH
80255: EMPTY
80256: LIST
80257: LIST
80258: PUSH
80259: LD_INT 21
80261: PUSH
80262: LD_INT 1
80264: PUSH
80265: EMPTY
80266: LIST
80267: LIST
80268: PUSH
80269: EMPTY
80270: LIST
80271: LIST
80272: PPUSH
80273: CALL_OW 69
80277: ST_TO_ADDR
// if not tmp then
80278: LD_VAR 0 2
80282: NOT
80283: IFFALSE 80287
// exit ;
80285: GO 80374
// un := tmp [ rand ( 1 , tmp ) ] ;
80287: LD_ADDR_VAR 0 1
80291: PUSH
80292: LD_VAR 0 2
80296: PUSH
80297: LD_INT 1
80299: PPUSH
80300: LD_VAR 0 2
80304: PPUSH
80305: CALL_OW 12
80309: ARRAY
80310: ST_TO_ADDR
// SetSide ( un , 0 ) ;
80311: LD_VAR 0 1
80315: PPUSH
80316: LD_INT 0
80318: PPUSH
80319: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
80323: LD_VAR 0 1
80327: PPUSH
80328: LD_OWVAR 3
80332: PUSH
80333: LD_VAR 0 1
80337: DIFF
80338: PPUSH
80339: LD_VAR 0 1
80343: PPUSH
80344: CALL_OW 74
80348: PPUSH
80349: CALL_OW 115
// wait ( 0 0$20 ) ;
80353: LD_INT 700
80355: PPUSH
80356: CALL_OW 67
// SetSide ( un , your_side ) ;
80360: LD_VAR 0 1
80364: PPUSH
80365: LD_OWVAR 2
80369: PPUSH
80370: CALL_OW 235
// end ;
80374: PPOPN 2
80376: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
80377: LD_EXP 64
80381: PUSH
80382: LD_EXP 97
80386: AND
80387: IFFALSE 80493
80389: GO 80391
80391: DISABLE
80392: LD_INT 0
80394: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80395: LD_ADDR_VAR 0 1
80399: PUSH
80400: LD_INT 22
80402: PUSH
80403: LD_OWVAR 2
80407: PUSH
80408: EMPTY
80409: LIST
80410: LIST
80411: PUSH
80412: LD_INT 2
80414: PUSH
80415: LD_INT 30
80417: PUSH
80418: LD_INT 0
80420: PUSH
80421: EMPTY
80422: LIST
80423: LIST
80424: PUSH
80425: LD_INT 30
80427: PUSH
80428: LD_INT 1
80430: PUSH
80431: EMPTY
80432: LIST
80433: LIST
80434: PUSH
80435: EMPTY
80436: LIST
80437: LIST
80438: LIST
80439: PUSH
80440: EMPTY
80441: LIST
80442: LIST
80443: PPUSH
80444: CALL_OW 69
80448: ST_TO_ADDR
// if not depot then
80449: LD_VAR 0 1
80453: NOT
80454: IFFALSE 80458
// exit ;
80456: GO 80493
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
80458: LD_VAR 0 1
80462: PUSH
80463: LD_INT 1
80465: ARRAY
80466: PPUSH
80467: CALL_OW 250
80471: PPUSH
80472: LD_VAR 0 1
80476: PUSH
80477: LD_INT 1
80479: ARRAY
80480: PPUSH
80481: CALL_OW 251
80485: PPUSH
80486: LD_INT 70
80488: PPUSH
80489: CALL_OW 495
// end ;
80493: PPOPN 1
80495: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
80496: LD_EXP 64
80500: PUSH
80501: LD_EXP 98
80505: AND
80506: IFFALSE 80717
80508: GO 80510
80510: DISABLE
80511: LD_INT 0
80513: PPUSH
80514: PPUSH
80515: PPUSH
80516: PPUSH
80517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80518: LD_ADDR_VAR 0 5
80522: PUSH
80523: LD_INT 22
80525: PUSH
80526: LD_OWVAR 2
80530: PUSH
80531: EMPTY
80532: LIST
80533: LIST
80534: PUSH
80535: LD_INT 21
80537: PUSH
80538: LD_INT 1
80540: PUSH
80541: EMPTY
80542: LIST
80543: LIST
80544: PUSH
80545: EMPTY
80546: LIST
80547: LIST
80548: PPUSH
80549: CALL_OW 69
80553: ST_TO_ADDR
// if not tmp then
80554: LD_VAR 0 5
80558: NOT
80559: IFFALSE 80563
// exit ;
80561: GO 80717
// for i in tmp do
80563: LD_ADDR_VAR 0 1
80567: PUSH
80568: LD_VAR 0 5
80572: PUSH
80573: FOR_IN
80574: IFFALSE 80715
// begin d := rand ( 0 , 5 ) ;
80576: LD_ADDR_VAR 0 4
80580: PUSH
80581: LD_INT 0
80583: PPUSH
80584: LD_INT 5
80586: PPUSH
80587: CALL_OW 12
80591: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
80592: LD_ADDR_VAR 0 2
80596: PUSH
80597: LD_VAR 0 1
80601: PPUSH
80602: CALL_OW 250
80606: PPUSH
80607: LD_VAR 0 4
80611: PPUSH
80612: LD_INT 3
80614: PPUSH
80615: LD_INT 12
80617: PPUSH
80618: CALL_OW 12
80622: PPUSH
80623: CALL_OW 272
80627: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
80628: LD_ADDR_VAR 0 3
80632: PUSH
80633: LD_VAR 0 1
80637: PPUSH
80638: CALL_OW 251
80642: PPUSH
80643: LD_VAR 0 4
80647: PPUSH
80648: LD_INT 3
80650: PPUSH
80651: LD_INT 12
80653: PPUSH
80654: CALL_OW 12
80658: PPUSH
80659: CALL_OW 273
80663: ST_TO_ADDR
// if ValidHex ( x , y ) then
80664: LD_VAR 0 2
80668: PPUSH
80669: LD_VAR 0 3
80673: PPUSH
80674: CALL_OW 488
80678: IFFALSE 80713
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
80680: LD_VAR 0 1
80684: PPUSH
80685: LD_VAR 0 2
80689: PPUSH
80690: LD_VAR 0 3
80694: PPUSH
80695: LD_INT 3
80697: PPUSH
80698: LD_INT 6
80700: PPUSH
80701: CALL_OW 12
80705: PPUSH
80706: LD_INT 1
80708: PPUSH
80709: CALL_OW 483
// end ;
80713: GO 80573
80715: POP
80716: POP
// end ;
80717: PPOPN 5
80719: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
80720: LD_EXP 64
80724: PUSH
80725: LD_EXP 99
80729: AND
80730: IFFALSE 80824
80732: GO 80734
80734: DISABLE
80735: LD_INT 0
80737: PPUSH
80738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
80739: LD_ADDR_VAR 0 2
80743: PUSH
80744: LD_INT 22
80746: PUSH
80747: LD_OWVAR 2
80751: PUSH
80752: EMPTY
80753: LIST
80754: LIST
80755: PUSH
80756: LD_INT 32
80758: PUSH
80759: LD_INT 1
80761: PUSH
80762: EMPTY
80763: LIST
80764: LIST
80765: PUSH
80766: LD_INT 21
80768: PUSH
80769: LD_INT 2
80771: PUSH
80772: EMPTY
80773: LIST
80774: LIST
80775: PUSH
80776: EMPTY
80777: LIST
80778: LIST
80779: LIST
80780: PPUSH
80781: CALL_OW 69
80785: ST_TO_ADDR
// if not tmp then
80786: LD_VAR 0 2
80790: NOT
80791: IFFALSE 80795
// exit ;
80793: GO 80824
// for i in tmp do
80795: LD_ADDR_VAR 0 1
80799: PUSH
80800: LD_VAR 0 2
80804: PUSH
80805: FOR_IN
80806: IFFALSE 80822
// SetFuel ( i , 0 ) ;
80808: LD_VAR 0 1
80812: PPUSH
80813: LD_INT 0
80815: PPUSH
80816: CALL_OW 240
80820: GO 80805
80822: POP
80823: POP
// end ;
80824: PPOPN 2
80826: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
80827: LD_EXP 64
80831: PUSH
80832: LD_EXP 100
80836: AND
80837: IFFALSE 80903
80839: GO 80841
80841: DISABLE
80842: LD_INT 0
80844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
80845: LD_ADDR_VAR 0 1
80849: PUSH
80850: LD_INT 22
80852: PUSH
80853: LD_OWVAR 2
80857: PUSH
80858: EMPTY
80859: LIST
80860: LIST
80861: PUSH
80862: LD_INT 30
80864: PUSH
80865: LD_INT 29
80867: PUSH
80868: EMPTY
80869: LIST
80870: LIST
80871: PUSH
80872: EMPTY
80873: LIST
80874: LIST
80875: PPUSH
80876: CALL_OW 69
80880: ST_TO_ADDR
// if not tmp then
80881: LD_VAR 0 1
80885: NOT
80886: IFFALSE 80890
// exit ;
80888: GO 80903
// DestroyUnit ( tmp [ 1 ] ) ;
80890: LD_VAR 0 1
80894: PUSH
80895: LD_INT 1
80897: ARRAY
80898: PPUSH
80899: CALL_OW 65
// end ;
80903: PPOPN 1
80905: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
80906: LD_EXP 64
80910: PUSH
80911: LD_EXP 102
80915: AND
80916: IFFALSE 81045
80918: GO 80920
80920: DISABLE
80921: LD_INT 0
80923: PPUSH
// begin uc_side := 0 ;
80924: LD_ADDR_OWVAR 20
80928: PUSH
80929: LD_INT 0
80931: ST_TO_ADDR
// uc_nation := nation_arabian ;
80932: LD_ADDR_OWVAR 21
80936: PUSH
80937: LD_INT 2
80939: ST_TO_ADDR
// hc_gallery :=  ;
80940: LD_ADDR_OWVAR 33
80944: PUSH
80945: LD_STRING 
80947: ST_TO_ADDR
// hc_name :=  ;
80948: LD_ADDR_OWVAR 26
80952: PUSH
80953: LD_STRING 
80955: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
80956: LD_INT 1
80958: PPUSH
80959: LD_INT 11
80961: PPUSH
80962: LD_INT 10
80964: PPUSH
80965: CALL_OW 380
// un := CreateHuman ;
80969: LD_ADDR_VAR 0 1
80973: PUSH
80974: CALL_OW 44
80978: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80979: LD_VAR 0 1
80983: PPUSH
80984: LD_INT 1
80986: PPUSH
80987: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80991: LD_INT 35
80993: PPUSH
80994: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80998: LD_VAR 0 1
81002: PPUSH
81003: LD_INT 22
81005: PUSH
81006: LD_OWVAR 2
81010: PUSH
81011: EMPTY
81012: LIST
81013: LIST
81014: PPUSH
81015: CALL_OW 69
81019: PPUSH
81020: LD_VAR 0 1
81024: PPUSH
81025: CALL_OW 74
81029: PPUSH
81030: CALL_OW 115
// until IsDead ( un ) ;
81034: LD_VAR 0 1
81038: PPUSH
81039: CALL_OW 301
81043: IFFALSE 80991
// end ;
81045: PPOPN 1
81047: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
81048: LD_EXP 64
81052: PUSH
81053: LD_EXP 104
81057: AND
81058: IFFALSE 81070
81060: GO 81062
81062: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
81063: LD_STRING earthquake(getX(game), 0, 32)
81065: PPUSH
81066: CALL_OW 559
81070: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
81071: LD_EXP 64
81075: PUSH
81076: LD_EXP 105
81080: AND
81081: IFFALSE 81172
81083: GO 81085
81085: DISABLE
81086: LD_INT 0
81088: PPUSH
// begin enable ;
81089: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
81090: LD_ADDR_VAR 0 1
81094: PUSH
81095: LD_INT 22
81097: PUSH
81098: LD_OWVAR 2
81102: PUSH
81103: EMPTY
81104: LIST
81105: LIST
81106: PUSH
81107: LD_INT 21
81109: PUSH
81110: LD_INT 2
81112: PUSH
81113: EMPTY
81114: LIST
81115: LIST
81116: PUSH
81117: LD_INT 33
81119: PUSH
81120: LD_INT 3
81122: PUSH
81123: EMPTY
81124: LIST
81125: LIST
81126: PUSH
81127: EMPTY
81128: LIST
81129: LIST
81130: LIST
81131: PPUSH
81132: CALL_OW 69
81136: ST_TO_ADDR
// if not tmp then
81137: LD_VAR 0 1
81141: NOT
81142: IFFALSE 81146
// exit ;
81144: GO 81172
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
81146: LD_VAR 0 1
81150: PUSH
81151: LD_INT 1
81153: PPUSH
81154: LD_VAR 0 1
81158: PPUSH
81159: CALL_OW 12
81163: ARRAY
81164: PPUSH
81165: LD_INT 1
81167: PPUSH
81168: CALL_OW 234
// end ;
81172: PPOPN 1
81174: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
81175: LD_EXP 64
81179: PUSH
81180: LD_EXP 106
81184: AND
81185: IFFALSE 81326
81187: GO 81189
81189: DISABLE
81190: LD_INT 0
81192: PPUSH
81193: PPUSH
81194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81195: LD_ADDR_VAR 0 3
81199: PUSH
81200: LD_INT 22
81202: PUSH
81203: LD_OWVAR 2
81207: PUSH
81208: EMPTY
81209: LIST
81210: LIST
81211: PUSH
81212: LD_INT 25
81214: PUSH
81215: LD_INT 1
81217: PUSH
81218: EMPTY
81219: LIST
81220: LIST
81221: PUSH
81222: EMPTY
81223: LIST
81224: LIST
81225: PPUSH
81226: CALL_OW 69
81230: ST_TO_ADDR
// if not tmp then
81231: LD_VAR 0 3
81235: NOT
81236: IFFALSE 81240
// exit ;
81238: GO 81326
// un := tmp [ rand ( 1 , tmp ) ] ;
81240: LD_ADDR_VAR 0 2
81244: PUSH
81245: LD_VAR 0 3
81249: PUSH
81250: LD_INT 1
81252: PPUSH
81253: LD_VAR 0 3
81257: PPUSH
81258: CALL_OW 12
81262: ARRAY
81263: ST_TO_ADDR
// if Crawls ( un ) then
81264: LD_VAR 0 2
81268: PPUSH
81269: CALL_OW 318
81273: IFFALSE 81284
// ComWalk ( un ) ;
81275: LD_VAR 0 2
81279: PPUSH
81280: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
81284: LD_VAR 0 2
81288: PPUSH
81289: LD_INT 9
81291: PPUSH
81292: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
81296: LD_INT 28
81298: PPUSH
81299: LD_OWVAR 2
81303: PPUSH
81304: LD_INT 2
81306: PPUSH
81307: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
81311: LD_INT 29
81313: PPUSH
81314: LD_OWVAR 2
81318: PPUSH
81319: LD_INT 2
81321: PPUSH
81322: CALL_OW 322
// end ;
81326: PPOPN 3
81328: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
81329: LD_EXP 64
81333: PUSH
81334: LD_EXP 107
81338: AND
81339: IFFALSE 81450
81341: GO 81343
81343: DISABLE
81344: LD_INT 0
81346: PPUSH
81347: PPUSH
81348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81349: LD_ADDR_VAR 0 3
81353: PUSH
81354: LD_INT 22
81356: PUSH
81357: LD_OWVAR 2
81361: PUSH
81362: EMPTY
81363: LIST
81364: LIST
81365: PUSH
81366: LD_INT 25
81368: PUSH
81369: LD_INT 1
81371: PUSH
81372: EMPTY
81373: LIST
81374: LIST
81375: PUSH
81376: EMPTY
81377: LIST
81378: LIST
81379: PPUSH
81380: CALL_OW 69
81384: ST_TO_ADDR
// if not tmp then
81385: LD_VAR 0 3
81389: NOT
81390: IFFALSE 81394
// exit ;
81392: GO 81450
// un := tmp [ rand ( 1 , tmp ) ] ;
81394: LD_ADDR_VAR 0 2
81398: PUSH
81399: LD_VAR 0 3
81403: PUSH
81404: LD_INT 1
81406: PPUSH
81407: LD_VAR 0 3
81411: PPUSH
81412: CALL_OW 12
81416: ARRAY
81417: ST_TO_ADDR
// if Crawls ( un ) then
81418: LD_VAR 0 2
81422: PPUSH
81423: CALL_OW 318
81427: IFFALSE 81438
// ComWalk ( un ) ;
81429: LD_VAR 0 2
81433: PPUSH
81434: CALL_OW 138
// SetClass ( un , class_mortar ) ;
81438: LD_VAR 0 2
81442: PPUSH
81443: LD_INT 8
81445: PPUSH
81446: CALL_OW 336
// end ;
81450: PPOPN 3
81452: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
81453: LD_EXP 64
81457: PUSH
81458: LD_EXP 108
81462: AND
81463: IFFALSE 81607
81465: GO 81467
81467: DISABLE
81468: LD_INT 0
81470: PPUSH
81471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
81472: LD_ADDR_VAR 0 2
81476: PUSH
81477: LD_INT 22
81479: PUSH
81480: LD_OWVAR 2
81484: PUSH
81485: EMPTY
81486: LIST
81487: LIST
81488: PUSH
81489: LD_INT 21
81491: PUSH
81492: LD_INT 2
81494: PUSH
81495: EMPTY
81496: LIST
81497: LIST
81498: PUSH
81499: LD_INT 2
81501: PUSH
81502: LD_INT 34
81504: PUSH
81505: LD_INT 12
81507: PUSH
81508: EMPTY
81509: LIST
81510: LIST
81511: PUSH
81512: LD_INT 34
81514: PUSH
81515: LD_INT 51
81517: PUSH
81518: EMPTY
81519: LIST
81520: LIST
81521: PUSH
81522: LD_INT 34
81524: PUSH
81525: LD_INT 32
81527: PUSH
81528: EMPTY
81529: LIST
81530: LIST
81531: PUSH
81532: EMPTY
81533: LIST
81534: LIST
81535: LIST
81536: LIST
81537: PUSH
81538: EMPTY
81539: LIST
81540: LIST
81541: LIST
81542: PPUSH
81543: CALL_OW 69
81547: ST_TO_ADDR
// if not tmp then
81548: LD_VAR 0 2
81552: NOT
81553: IFFALSE 81557
// exit ;
81555: GO 81607
// for i in tmp do
81557: LD_ADDR_VAR 0 1
81561: PUSH
81562: LD_VAR 0 2
81566: PUSH
81567: FOR_IN
81568: IFFALSE 81605
// if GetCargo ( i , mat_artifact ) = 0 then
81570: LD_VAR 0 1
81574: PPUSH
81575: LD_INT 4
81577: PPUSH
81578: CALL_OW 289
81582: PUSH
81583: LD_INT 0
81585: EQUAL
81586: IFFALSE 81603
// SetCargo ( i , mat_siberit , 100 ) ;
81588: LD_VAR 0 1
81592: PPUSH
81593: LD_INT 3
81595: PPUSH
81596: LD_INT 100
81598: PPUSH
81599: CALL_OW 290
81603: GO 81567
81605: POP
81606: POP
// end ;
81607: PPOPN 2
81609: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
81610: LD_EXP 64
81614: PUSH
81615: LD_EXP 109
81619: AND
81620: IFFALSE 81803
81622: GO 81624
81624: DISABLE
81625: LD_INT 0
81627: PPUSH
81628: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
81629: LD_ADDR_VAR 0 2
81633: PUSH
81634: LD_INT 22
81636: PUSH
81637: LD_OWVAR 2
81641: PUSH
81642: EMPTY
81643: LIST
81644: LIST
81645: PPUSH
81646: CALL_OW 69
81650: ST_TO_ADDR
// if not tmp then
81651: LD_VAR 0 2
81655: NOT
81656: IFFALSE 81660
// exit ;
81658: GO 81803
// for i := 1 to 2 do
81660: LD_ADDR_VAR 0 1
81664: PUSH
81665: DOUBLE
81666: LD_INT 1
81668: DEC
81669: ST_TO_ADDR
81670: LD_INT 2
81672: PUSH
81673: FOR_TO
81674: IFFALSE 81801
// begin uc_side := your_side ;
81676: LD_ADDR_OWVAR 20
81680: PUSH
81681: LD_OWVAR 2
81685: ST_TO_ADDR
// uc_nation := nation_american ;
81686: LD_ADDR_OWVAR 21
81690: PUSH
81691: LD_INT 1
81693: ST_TO_ADDR
// vc_chassis := us_morphling ;
81694: LD_ADDR_OWVAR 37
81698: PUSH
81699: LD_INT 5
81701: ST_TO_ADDR
// vc_engine := engine_siberite ;
81702: LD_ADDR_OWVAR 39
81706: PUSH
81707: LD_INT 3
81709: ST_TO_ADDR
// vc_control := control_computer ;
81710: LD_ADDR_OWVAR 38
81714: PUSH
81715: LD_INT 3
81717: ST_TO_ADDR
// vc_weapon := us_double_laser ;
81718: LD_ADDR_OWVAR 40
81722: PUSH
81723: LD_INT 10
81725: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
81726: LD_VAR 0 2
81730: PUSH
81731: LD_INT 1
81733: ARRAY
81734: PPUSH
81735: CALL_OW 310
81739: NOT
81740: IFFALSE 81787
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
81742: CALL_OW 45
81746: PPUSH
81747: LD_VAR 0 2
81751: PUSH
81752: LD_INT 1
81754: ARRAY
81755: PPUSH
81756: CALL_OW 250
81760: PPUSH
81761: LD_VAR 0 2
81765: PUSH
81766: LD_INT 1
81768: ARRAY
81769: PPUSH
81770: CALL_OW 251
81774: PPUSH
81775: LD_INT 12
81777: PPUSH
81778: LD_INT 1
81780: PPUSH
81781: CALL_OW 50
81785: GO 81799
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
81787: CALL_OW 45
81791: PPUSH
81792: LD_INT 1
81794: PPUSH
81795: CALL_OW 51
// end ;
81799: GO 81673
81801: POP
81802: POP
// end ;
81803: PPOPN 2
81805: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
81806: LD_EXP 64
81810: PUSH
81811: LD_EXP 110
81815: AND
81816: IFFALSE 82038
81818: GO 81820
81820: DISABLE
81821: LD_INT 0
81823: PPUSH
81824: PPUSH
81825: PPUSH
81826: PPUSH
81827: PPUSH
81828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81829: LD_ADDR_VAR 0 6
81833: PUSH
81834: LD_INT 22
81836: PUSH
81837: LD_OWVAR 2
81841: PUSH
81842: EMPTY
81843: LIST
81844: LIST
81845: PUSH
81846: LD_INT 21
81848: PUSH
81849: LD_INT 1
81851: PUSH
81852: EMPTY
81853: LIST
81854: LIST
81855: PUSH
81856: LD_INT 3
81858: PUSH
81859: LD_INT 23
81861: PUSH
81862: LD_INT 0
81864: PUSH
81865: EMPTY
81866: LIST
81867: LIST
81868: PUSH
81869: EMPTY
81870: LIST
81871: LIST
81872: PUSH
81873: EMPTY
81874: LIST
81875: LIST
81876: LIST
81877: PPUSH
81878: CALL_OW 69
81882: ST_TO_ADDR
// if not tmp then
81883: LD_VAR 0 6
81887: NOT
81888: IFFALSE 81892
// exit ;
81890: GO 82038
// s1 := rand ( 1 , 4 ) ;
81892: LD_ADDR_VAR 0 2
81896: PUSH
81897: LD_INT 1
81899: PPUSH
81900: LD_INT 4
81902: PPUSH
81903: CALL_OW 12
81907: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
81908: LD_ADDR_VAR 0 4
81912: PUSH
81913: LD_VAR 0 6
81917: PUSH
81918: LD_INT 1
81920: ARRAY
81921: PPUSH
81922: LD_VAR 0 2
81926: PPUSH
81927: CALL_OW 259
81931: ST_TO_ADDR
// if s1 = 1 then
81932: LD_VAR 0 2
81936: PUSH
81937: LD_INT 1
81939: EQUAL
81940: IFFALSE 81960
// s2 := rand ( 2 , 4 ) else
81942: LD_ADDR_VAR 0 3
81946: PUSH
81947: LD_INT 2
81949: PPUSH
81950: LD_INT 4
81952: PPUSH
81953: CALL_OW 12
81957: ST_TO_ADDR
81958: GO 81968
// s2 := 1 ;
81960: LD_ADDR_VAR 0 3
81964: PUSH
81965: LD_INT 1
81967: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
81968: LD_ADDR_VAR 0 5
81972: PUSH
81973: LD_VAR 0 6
81977: PUSH
81978: LD_INT 1
81980: ARRAY
81981: PPUSH
81982: LD_VAR 0 3
81986: PPUSH
81987: CALL_OW 259
81991: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
81992: LD_VAR 0 6
81996: PUSH
81997: LD_INT 1
81999: ARRAY
82000: PPUSH
82001: LD_VAR 0 2
82005: PPUSH
82006: LD_VAR 0 5
82010: PPUSH
82011: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
82015: LD_VAR 0 6
82019: PUSH
82020: LD_INT 1
82022: ARRAY
82023: PPUSH
82024: LD_VAR 0 3
82028: PPUSH
82029: LD_VAR 0 4
82033: PPUSH
82034: CALL_OW 237
// end ;
82038: PPOPN 6
82040: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
82041: LD_EXP 64
82045: PUSH
82046: LD_EXP 111
82050: AND
82051: IFFALSE 82130
82053: GO 82055
82055: DISABLE
82056: LD_INT 0
82058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
82059: LD_ADDR_VAR 0 1
82063: PUSH
82064: LD_INT 22
82066: PUSH
82067: LD_OWVAR 2
82071: PUSH
82072: EMPTY
82073: LIST
82074: LIST
82075: PUSH
82076: LD_INT 30
82078: PUSH
82079: LD_INT 3
82081: PUSH
82082: EMPTY
82083: LIST
82084: LIST
82085: PUSH
82086: EMPTY
82087: LIST
82088: LIST
82089: PPUSH
82090: CALL_OW 69
82094: ST_TO_ADDR
// if not tmp then
82095: LD_VAR 0 1
82099: NOT
82100: IFFALSE 82104
// exit ;
82102: GO 82130
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
82104: LD_VAR 0 1
82108: PUSH
82109: LD_INT 1
82111: PPUSH
82112: LD_VAR 0 1
82116: PPUSH
82117: CALL_OW 12
82121: ARRAY
82122: PPUSH
82123: LD_INT 1
82125: PPUSH
82126: CALL_OW 234
// end ;
82130: PPOPN 1
82132: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
82133: LD_EXP 64
82137: PUSH
82138: LD_EXP 112
82142: AND
82143: IFFALSE 82255
82145: GO 82147
82147: DISABLE
82148: LD_INT 0
82150: PPUSH
82151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
82152: LD_ADDR_VAR 0 2
82156: PUSH
82157: LD_INT 22
82159: PUSH
82160: LD_OWVAR 2
82164: PUSH
82165: EMPTY
82166: LIST
82167: LIST
82168: PUSH
82169: LD_INT 2
82171: PUSH
82172: LD_INT 30
82174: PUSH
82175: LD_INT 27
82177: PUSH
82178: EMPTY
82179: LIST
82180: LIST
82181: PUSH
82182: LD_INT 30
82184: PUSH
82185: LD_INT 26
82187: PUSH
82188: EMPTY
82189: LIST
82190: LIST
82191: PUSH
82192: LD_INT 30
82194: PUSH
82195: LD_INT 28
82197: PUSH
82198: EMPTY
82199: LIST
82200: LIST
82201: PUSH
82202: EMPTY
82203: LIST
82204: LIST
82205: LIST
82206: LIST
82207: PUSH
82208: EMPTY
82209: LIST
82210: LIST
82211: PPUSH
82212: CALL_OW 69
82216: ST_TO_ADDR
// if not tmp then
82217: LD_VAR 0 2
82221: NOT
82222: IFFALSE 82226
// exit ;
82224: GO 82255
// for i in tmp do
82226: LD_ADDR_VAR 0 1
82230: PUSH
82231: LD_VAR 0 2
82235: PUSH
82236: FOR_IN
82237: IFFALSE 82253
// SetLives ( i , 1 ) ;
82239: LD_VAR 0 1
82243: PPUSH
82244: LD_INT 1
82246: PPUSH
82247: CALL_OW 234
82251: GO 82236
82253: POP
82254: POP
// end ;
82255: PPOPN 2
82257: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
82258: LD_EXP 64
82262: PUSH
82263: LD_EXP 113
82267: AND
82268: IFFALSE 82555
82270: GO 82272
82272: DISABLE
82273: LD_INT 0
82275: PPUSH
82276: PPUSH
82277: PPUSH
// begin i := rand ( 1 , 7 ) ;
82278: LD_ADDR_VAR 0 1
82282: PUSH
82283: LD_INT 1
82285: PPUSH
82286: LD_INT 7
82288: PPUSH
82289: CALL_OW 12
82293: ST_TO_ADDR
// case i of 1 :
82294: LD_VAR 0 1
82298: PUSH
82299: LD_INT 1
82301: DOUBLE
82302: EQUAL
82303: IFTRUE 82307
82305: GO 82317
82307: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
82308: LD_STRING earthquake(getX(game), 0, 32)
82310: PPUSH
82311: CALL_OW 559
82315: GO 82555
82317: LD_INT 2
82319: DOUBLE
82320: EQUAL
82321: IFTRUE 82325
82323: GO 82339
82325: POP
// begin ToLua ( displayStucuk(); ) ;
82326: LD_STRING displayStucuk();
82328: PPUSH
82329: CALL_OW 559
// ResetFog ;
82333: CALL_OW 335
// end ; 3 :
82337: GO 82555
82339: LD_INT 3
82341: DOUBLE
82342: EQUAL
82343: IFTRUE 82347
82345: GO 82451
82347: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82348: LD_ADDR_VAR 0 2
82352: PUSH
82353: LD_INT 22
82355: PUSH
82356: LD_OWVAR 2
82360: PUSH
82361: EMPTY
82362: LIST
82363: LIST
82364: PUSH
82365: LD_INT 25
82367: PUSH
82368: LD_INT 1
82370: PUSH
82371: EMPTY
82372: LIST
82373: LIST
82374: PUSH
82375: EMPTY
82376: LIST
82377: LIST
82378: PPUSH
82379: CALL_OW 69
82383: ST_TO_ADDR
// if not tmp then
82384: LD_VAR 0 2
82388: NOT
82389: IFFALSE 82393
// exit ;
82391: GO 82555
// un := tmp [ rand ( 1 , tmp ) ] ;
82393: LD_ADDR_VAR 0 3
82397: PUSH
82398: LD_VAR 0 2
82402: PUSH
82403: LD_INT 1
82405: PPUSH
82406: LD_VAR 0 2
82410: PPUSH
82411: CALL_OW 12
82415: ARRAY
82416: ST_TO_ADDR
// if Crawls ( un ) then
82417: LD_VAR 0 3
82421: PPUSH
82422: CALL_OW 318
82426: IFFALSE 82437
// ComWalk ( un ) ;
82428: LD_VAR 0 3
82432: PPUSH
82433: CALL_OW 138
// SetClass ( un , class_mortar ) ;
82437: LD_VAR 0 3
82441: PPUSH
82442: LD_INT 8
82444: PPUSH
82445: CALL_OW 336
// end ; 4 :
82449: GO 82555
82451: LD_INT 4
82453: DOUBLE
82454: EQUAL
82455: IFTRUE 82459
82457: GO 82533
82459: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
82460: LD_ADDR_VAR 0 2
82464: PUSH
82465: LD_INT 22
82467: PUSH
82468: LD_OWVAR 2
82472: PUSH
82473: EMPTY
82474: LIST
82475: LIST
82476: PUSH
82477: LD_INT 30
82479: PUSH
82480: LD_INT 29
82482: PUSH
82483: EMPTY
82484: LIST
82485: LIST
82486: PUSH
82487: EMPTY
82488: LIST
82489: LIST
82490: PPUSH
82491: CALL_OW 69
82495: ST_TO_ADDR
// if not tmp then
82496: LD_VAR 0 2
82500: NOT
82501: IFFALSE 82505
// exit ;
82503: GO 82555
// CenterNowOnUnits ( tmp [ 1 ] ) ;
82505: LD_VAR 0 2
82509: PUSH
82510: LD_INT 1
82512: ARRAY
82513: PPUSH
82514: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
82518: LD_VAR 0 2
82522: PUSH
82523: LD_INT 1
82525: ARRAY
82526: PPUSH
82527: CALL_OW 65
// end ; 5 .. 7 :
82531: GO 82555
82533: LD_INT 5
82535: DOUBLE
82536: GREATEREQUAL
82537: IFFALSE 82545
82539: LD_INT 7
82541: DOUBLE
82542: LESSEQUAL
82543: IFTRUE 82547
82545: GO 82554
82547: POP
// StreamSibBomb ; end ;
82548: CALL 78792 0 0
82552: GO 82555
82554: POP
// end ;
82555: PPOPN 3
82557: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
82558: LD_EXP 64
82562: PUSH
82563: LD_EXP 114
82567: AND
82568: IFFALSE 82724
82570: GO 82572
82572: DISABLE
82573: LD_INT 0
82575: PPUSH
82576: PPUSH
82577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
82578: LD_ADDR_VAR 0 2
82582: PUSH
82583: LD_INT 81
82585: PUSH
82586: LD_OWVAR 2
82590: PUSH
82591: EMPTY
82592: LIST
82593: LIST
82594: PUSH
82595: LD_INT 2
82597: PUSH
82598: LD_INT 21
82600: PUSH
82601: LD_INT 1
82603: PUSH
82604: EMPTY
82605: LIST
82606: LIST
82607: PUSH
82608: LD_INT 21
82610: PUSH
82611: LD_INT 2
82613: PUSH
82614: EMPTY
82615: LIST
82616: LIST
82617: PUSH
82618: EMPTY
82619: LIST
82620: LIST
82621: LIST
82622: PUSH
82623: EMPTY
82624: LIST
82625: LIST
82626: PPUSH
82627: CALL_OW 69
82631: ST_TO_ADDR
// if not tmp then
82632: LD_VAR 0 2
82636: NOT
82637: IFFALSE 82641
// exit ;
82639: GO 82724
// p := 0 ;
82641: LD_ADDR_VAR 0 3
82645: PUSH
82646: LD_INT 0
82648: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82649: LD_INT 35
82651: PPUSH
82652: CALL_OW 67
// p := p + 1 ;
82656: LD_ADDR_VAR 0 3
82660: PUSH
82661: LD_VAR 0 3
82665: PUSH
82666: LD_INT 1
82668: PLUS
82669: ST_TO_ADDR
// for i in tmp do
82670: LD_ADDR_VAR 0 1
82674: PUSH
82675: LD_VAR 0 2
82679: PUSH
82680: FOR_IN
82681: IFFALSE 82712
// if GetLives ( i ) < 1000 then
82683: LD_VAR 0 1
82687: PPUSH
82688: CALL_OW 256
82692: PUSH
82693: LD_INT 1000
82695: LESS
82696: IFFALSE 82710
// SetLives ( i , 1000 ) ;
82698: LD_VAR 0 1
82702: PPUSH
82703: LD_INT 1000
82705: PPUSH
82706: CALL_OW 234
82710: GO 82680
82712: POP
82713: POP
// until p > 20 ;
82714: LD_VAR 0 3
82718: PUSH
82719: LD_INT 20
82721: GREATER
82722: IFFALSE 82649
// end ;
82724: PPOPN 3
82726: END
// every 0 0$1 trigger StreamModeActive and sTime do
82727: LD_EXP 64
82731: PUSH
82732: LD_EXP 115
82736: AND
82737: IFFALSE 82772
82739: GO 82741
82741: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
82742: LD_INT 28
82744: PPUSH
82745: LD_OWVAR 2
82749: PPUSH
82750: LD_INT 2
82752: PPUSH
82753: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
82757: LD_INT 30
82759: PPUSH
82760: LD_OWVAR 2
82764: PPUSH
82765: LD_INT 2
82767: PPUSH
82768: CALL_OW 322
// end ;
82772: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
82773: LD_EXP 64
82777: PUSH
82778: LD_EXP 116
82782: AND
82783: IFFALSE 82904
82785: GO 82787
82787: DISABLE
82788: LD_INT 0
82790: PPUSH
82791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82792: LD_ADDR_VAR 0 2
82796: PUSH
82797: LD_INT 22
82799: PUSH
82800: LD_OWVAR 2
82804: PUSH
82805: EMPTY
82806: LIST
82807: LIST
82808: PUSH
82809: LD_INT 21
82811: PUSH
82812: LD_INT 1
82814: PUSH
82815: EMPTY
82816: LIST
82817: LIST
82818: PUSH
82819: LD_INT 3
82821: PUSH
82822: LD_INT 23
82824: PUSH
82825: LD_INT 0
82827: PUSH
82828: EMPTY
82829: LIST
82830: LIST
82831: PUSH
82832: EMPTY
82833: LIST
82834: LIST
82835: PUSH
82836: EMPTY
82837: LIST
82838: LIST
82839: LIST
82840: PPUSH
82841: CALL_OW 69
82845: ST_TO_ADDR
// if not tmp then
82846: LD_VAR 0 2
82850: NOT
82851: IFFALSE 82855
// exit ;
82853: GO 82904
// for i in tmp do
82855: LD_ADDR_VAR 0 1
82859: PUSH
82860: LD_VAR 0 2
82864: PUSH
82865: FOR_IN
82866: IFFALSE 82902
// begin if Crawls ( i ) then
82868: LD_VAR 0 1
82872: PPUSH
82873: CALL_OW 318
82877: IFFALSE 82888
// ComWalk ( i ) ;
82879: LD_VAR 0 1
82883: PPUSH
82884: CALL_OW 138
// SetClass ( i , 2 ) ;
82888: LD_VAR 0 1
82892: PPUSH
82893: LD_INT 2
82895: PPUSH
82896: CALL_OW 336
// end ;
82900: GO 82865
82902: POP
82903: POP
// end ;
82904: PPOPN 2
82906: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
82907: LD_EXP 64
82911: PUSH
82912: LD_EXP 117
82916: AND
82917: IFFALSE 83205
82919: GO 82921
82921: DISABLE
82922: LD_INT 0
82924: PPUSH
82925: PPUSH
82926: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
82927: LD_OWVAR 2
82931: PPUSH
82932: LD_INT 9
82934: PPUSH
82935: LD_INT 1
82937: PPUSH
82938: LD_INT 1
82940: PPUSH
82941: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
82945: LD_INT 9
82947: PPUSH
82948: LD_OWVAR 2
82952: PPUSH
82953: CALL_OW 343
// uc_side := 9 ;
82957: LD_ADDR_OWVAR 20
82961: PUSH
82962: LD_INT 9
82964: ST_TO_ADDR
// uc_nation := 2 ;
82965: LD_ADDR_OWVAR 21
82969: PUSH
82970: LD_INT 2
82972: ST_TO_ADDR
// hc_name := Dark Warrior ;
82973: LD_ADDR_OWVAR 26
82977: PUSH
82978: LD_STRING Dark Warrior
82980: ST_TO_ADDR
// hc_gallery :=  ;
82981: LD_ADDR_OWVAR 33
82985: PUSH
82986: LD_STRING 
82988: ST_TO_ADDR
// hc_noskilllimit := true ;
82989: LD_ADDR_OWVAR 76
82993: PUSH
82994: LD_INT 1
82996: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
82997: LD_ADDR_OWVAR 31
83001: PUSH
83002: LD_INT 30
83004: PUSH
83005: LD_INT 30
83007: PUSH
83008: LD_INT 30
83010: PUSH
83011: LD_INT 30
83013: PUSH
83014: EMPTY
83015: LIST
83016: LIST
83017: LIST
83018: LIST
83019: ST_TO_ADDR
// un := CreateHuman ;
83020: LD_ADDR_VAR 0 3
83024: PUSH
83025: CALL_OW 44
83029: ST_TO_ADDR
// hc_noskilllimit := false ;
83030: LD_ADDR_OWVAR 76
83034: PUSH
83035: LD_INT 0
83037: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
83038: LD_VAR 0 3
83042: PPUSH
83043: LD_INT 1
83045: PPUSH
83046: CALL_OW 51
// ToLua ( playRanger() ) ;
83050: LD_STRING playRanger()
83052: PPUSH
83053: CALL_OW 559
// p := 0 ;
83057: LD_ADDR_VAR 0 2
83061: PUSH
83062: LD_INT 0
83064: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
83065: LD_INT 35
83067: PPUSH
83068: CALL_OW 67
// p := p + 1 ;
83072: LD_ADDR_VAR 0 2
83076: PUSH
83077: LD_VAR 0 2
83081: PUSH
83082: LD_INT 1
83084: PLUS
83085: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
83086: LD_VAR 0 3
83090: PPUSH
83091: CALL_OW 256
83095: PUSH
83096: LD_INT 1000
83098: LESS
83099: IFFALSE 83113
// SetLives ( un , 1000 ) ;
83101: LD_VAR 0 3
83105: PPUSH
83106: LD_INT 1000
83108: PPUSH
83109: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
83113: LD_VAR 0 3
83117: PPUSH
83118: LD_INT 81
83120: PUSH
83121: LD_OWVAR 2
83125: PUSH
83126: EMPTY
83127: LIST
83128: LIST
83129: PUSH
83130: LD_INT 91
83132: PUSH
83133: LD_VAR 0 3
83137: PUSH
83138: LD_INT 30
83140: PUSH
83141: EMPTY
83142: LIST
83143: LIST
83144: LIST
83145: PUSH
83146: EMPTY
83147: LIST
83148: LIST
83149: PPUSH
83150: CALL_OW 69
83154: PPUSH
83155: LD_VAR 0 3
83159: PPUSH
83160: CALL_OW 74
83164: PPUSH
83165: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
83169: LD_VAR 0 2
83173: PUSH
83174: LD_INT 80
83176: GREATER
83177: PUSH
83178: LD_VAR 0 3
83182: PPUSH
83183: CALL_OW 301
83187: OR
83188: IFFALSE 83065
// if un then
83190: LD_VAR 0 3
83194: IFFALSE 83205
// RemoveUnit ( un ) ;
83196: LD_VAR 0 3
83200: PPUSH
83201: CALL_OW 64
// end ;
83205: PPOPN 3
83207: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
83208: LD_EXP 118
83212: IFFALSE 83328
83214: GO 83216
83216: DISABLE
83217: LD_INT 0
83219: PPUSH
83220: PPUSH
83221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
83222: LD_ADDR_VAR 0 2
83226: PUSH
83227: LD_INT 81
83229: PUSH
83230: LD_OWVAR 2
83234: PUSH
83235: EMPTY
83236: LIST
83237: LIST
83238: PUSH
83239: LD_INT 21
83241: PUSH
83242: LD_INT 1
83244: PUSH
83245: EMPTY
83246: LIST
83247: LIST
83248: PUSH
83249: EMPTY
83250: LIST
83251: LIST
83252: PPUSH
83253: CALL_OW 69
83257: ST_TO_ADDR
// ToLua ( playComputer() ) ;
83258: LD_STRING playComputer()
83260: PPUSH
83261: CALL_OW 559
// if not tmp then
83265: LD_VAR 0 2
83269: NOT
83270: IFFALSE 83274
// exit ;
83272: GO 83328
// for i in tmp do
83274: LD_ADDR_VAR 0 1
83278: PUSH
83279: LD_VAR 0 2
83283: PUSH
83284: FOR_IN
83285: IFFALSE 83326
// for j := 1 to 4 do
83287: LD_ADDR_VAR 0 3
83291: PUSH
83292: DOUBLE
83293: LD_INT 1
83295: DEC
83296: ST_TO_ADDR
83297: LD_INT 4
83299: PUSH
83300: FOR_TO
83301: IFFALSE 83322
// SetSkill ( i , j , 10 ) ;
83303: LD_VAR 0 1
83307: PPUSH
83308: LD_VAR 0 3
83312: PPUSH
83313: LD_INT 10
83315: PPUSH
83316: CALL_OW 237
83320: GO 83300
83322: POP
83323: POP
83324: GO 83284
83326: POP
83327: POP
// end ;
83328: PPOPN 3
83330: END
// every 0 0$1 trigger s30 do var i , tmp ;
83331: LD_EXP 119
83335: IFFALSE 83404
83337: GO 83339
83339: DISABLE
83340: LD_INT 0
83342: PPUSH
83343: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83344: LD_ADDR_VAR 0 2
83348: PUSH
83349: LD_INT 22
83351: PUSH
83352: LD_OWVAR 2
83356: PUSH
83357: EMPTY
83358: LIST
83359: LIST
83360: PPUSH
83361: CALL_OW 69
83365: ST_TO_ADDR
// if not tmp then
83366: LD_VAR 0 2
83370: NOT
83371: IFFALSE 83375
// exit ;
83373: GO 83404
// for i in tmp do
83375: LD_ADDR_VAR 0 1
83379: PUSH
83380: LD_VAR 0 2
83384: PUSH
83385: FOR_IN
83386: IFFALSE 83402
// SetLives ( i , 300 ) ;
83388: LD_VAR 0 1
83392: PPUSH
83393: LD_INT 300
83395: PPUSH
83396: CALL_OW 234
83400: GO 83385
83402: POP
83403: POP
// end ;
83404: PPOPN 2
83406: END
// every 0 0$1 trigger s60 do var i , tmp ;
83407: LD_EXP 120
83411: IFFALSE 83480
83413: GO 83415
83415: DISABLE
83416: LD_INT 0
83418: PPUSH
83419: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83420: LD_ADDR_VAR 0 2
83424: PUSH
83425: LD_INT 22
83427: PUSH
83428: LD_OWVAR 2
83432: PUSH
83433: EMPTY
83434: LIST
83435: LIST
83436: PPUSH
83437: CALL_OW 69
83441: ST_TO_ADDR
// if not tmp then
83442: LD_VAR 0 2
83446: NOT
83447: IFFALSE 83451
// exit ;
83449: GO 83480
// for i in tmp do
83451: LD_ADDR_VAR 0 1
83455: PUSH
83456: LD_VAR 0 2
83460: PUSH
83461: FOR_IN
83462: IFFALSE 83478
// SetLives ( i , 600 ) ;
83464: LD_VAR 0 1
83468: PPUSH
83469: LD_INT 600
83471: PPUSH
83472: CALL_OW 234
83476: GO 83461
83478: POP
83479: POP
// end ;
83480: PPOPN 2
83482: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
83483: LD_INT 0
83485: PPUSH
// case cmd of 301 :
83486: LD_VAR 0 1
83490: PUSH
83491: LD_INT 301
83493: DOUBLE
83494: EQUAL
83495: IFTRUE 83499
83497: GO 83531
83499: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
83500: LD_VAR 0 6
83504: PPUSH
83505: LD_VAR 0 7
83509: PPUSH
83510: LD_VAR 0 8
83514: PPUSH
83515: LD_VAR 0 4
83519: PPUSH
83520: LD_VAR 0 5
83524: PPUSH
83525: CALL 84740 0 5
83529: GO 83652
83531: LD_INT 302
83533: DOUBLE
83534: EQUAL
83535: IFTRUE 83539
83537: GO 83576
83539: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
83540: LD_VAR 0 6
83544: PPUSH
83545: LD_VAR 0 7
83549: PPUSH
83550: LD_VAR 0 8
83554: PPUSH
83555: LD_VAR 0 9
83559: PPUSH
83560: LD_VAR 0 4
83564: PPUSH
83565: LD_VAR 0 5
83569: PPUSH
83570: CALL 84831 0 6
83574: GO 83652
83576: LD_INT 303
83578: DOUBLE
83579: EQUAL
83580: IFTRUE 83584
83582: GO 83621
83584: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
83585: LD_VAR 0 6
83589: PPUSH
83590: LD_VAR 0 7
83594: PPUSH
83595: LD_VAR 0 8
83599: PPUSH
83600: LD_VAR 0 9
83604: PPUSH
83605: LD_VAR 0 4
83609: PPUSH
83610: LD_VAR 0 5
83614: PPUSH
83615: CALL 83657 0 6
83619: GO 83652
83621: LD_INT 304
83623: DOUBLE
83624: EQUAL
83625: IFTRUE 83629
83627: GO 83651
83629: POP
// hHackTeleport ( unit , x , y ) ; end ;
83630: LD_VAR 0 2
83634: PPUSH
83635: LD_VAR 0 4
83639: PPUSH
83640: LD_VAR 0 5
83644: PPUSH
83645: CALL 85424 0 3
83649: GO 83652
83651: POP
// end ;
83652: LD_VAR 0 12
83656: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
83657: LD_INT 0
83659: PPUSH
83660: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
83661: LD_VAR 0 1
83665: PUSH
83666: LD_INT 1
83668: LESS
83669: PUSH
83670: LD_VAR 0 1
83674: PUSH
83675: LD_INT 3
83677: GREATER
83678: OR
83679: PUSH
83680: LD_VAR 0 5
83684: PPUSH
83685: LD_VAR 0 6
83689: PPUSH
83690: CALL_OW 428
83694: OR
83695: IFFALSE 83699
// exit ;
83697: GO 84427
// uc_side := your_side ;
83699: LD_ADDR_OWVAR 20
83703: PUSH
83704: LD_OWVAR 2
83708: ST_TO_ADDR
// uc_nation := nation ;
83709: LD_ADDR_OWVAR 21
83713: PUSH
83714: LD_VAR 0 1
83718: ST_TO_ADDR
// bc_level = 1 ;
83719: LD_ADDR_OWVAR 43
83723: PUSH
83724: LD_INT 1
83726: ST_TO_ADDR
// case btype of 1 :
83727: LD_VAR 0 2
83731: PUSH
83732: LD_INT 1
83734: DOUBLE
83735: EQUAL
83736: IFTRUE 83740
83738: GO 83751
83740: POP
// bc_type := b_depot ; 2 :
83741: LD_ADDR_OWVAR 42
83745: PUSH
83746: LD_INT 0
83748: ST_TO_ADDR
83749: GO 84371
83751: LD_INT 2
83753: DOUBLE
83754: EQUAL
83755: IFTRUE 83759
83757: GO 83770
83759: POP
// bc_type := b_warehouse ; 3 :
83760: LD_ADDR_OWVAR 42
83764: PUSH
83765: LD_INT 1
83767: ST_TO_ADDR
83768: GO 84371
83770: LD_INT 3
83772: DOUBLE
83773: EQUAL
83774: IFTRUE 83778
83776: GO 83789
83778: POP
// bc_type := b_lab ; 4 .. 9 :
83779: LD_ADDR_OWVAR 42
83783: PUSH
83784: LD_INT 6
83786: ST_TO_ADDR
83787: GO 84371
83789: LD_INT 4
83791: DOUBLE
83792: GREATEREQUAL
83793: IFFALSE 83801
83795: LD_INT 9
83797: DOUBLE
83798: LESSEQUAL
83799: IFTRUE 83803
83801: GO 83863
83803: POP
// begin bc_type := b_lab_half ;
83804: LD_ADDR_OWVAR 42
83808: PUSH
83809: LD_INT 7
83811: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
83812: LD_ADDR_OWVAR 44
83816: PUSH
83817: LD_INT 10
83819: PUSH
83820: LD_INT 11
83822: PUSH
83823: LD_INT 12
83825: PUSH
83826: LD_INT 15
83828: PUSH
83829: LD_INT 14
83831: PUSH
83832: LD_INT 13
83834: PUSH
83835: EMPTY
83836: LIST
83837: LIST
83838: LIST
83839: LIST
83840: LIST
83841: LIST
83842: PUSH
83843: LD_VAR 0 2
83847: PUSH
83848: LD_INT 3
83850: MINUS
83851: ARRAY
83852: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
83853: LD_ADDR_OWVAR 45
83857: PUSH
83858: LD_INT 9
83860: ST_TO_ADDR
// end ; 10 .. 13 :
83861: GO 84371
83863: LD_INT 10
83865: DOUBLE
83866: GREATEREQUAL
83867: IFFALSE 83875
83869: LD_INT 13
83871: DOUBLE
83872: LESSEQUAL
83873: IFTRUE 83877
83875: GO 83954
83877: POP
// begin bc_type := b_lab_full ;
83878: LD_ADDR_OWVAR 42
83882: PUSH
83883: LD_INT 8
83885: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
83886: LD_ADDR_OWVAR 44
83890: PUSH
83891: LD_INT 10
83893: PUSH
83894: LD_INT 12
83896: PUSH
83897: LD_INT 14
83899: PUSH
83900: LD_INT 13
83902: PUSH
83903: EMPTY
83904: LIST
83905: LIST
83906: LIST
83907: LIST
83908: PUSH
83909: LD_VAR 0 2
83913: PUSH
83914: LD_INT 9
83916: MINUS
83917: ARRAY
83918: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
83919: LD_ADDR_OWVAR 45
83923: PUSH
83924: LD_INT 11
83926: PUSH
83927: LD_INT 15
83929: PUSH
83930: LD_INT 12
83932: PUSH
83933: LD_INT 15
83935: PUSH
83936: EMPTY
83937: LIST
83938: LIST
83939: LIST
83940: LIST
83941: PUSH
83942: LD_VAR 0 2
83946: PUSH
83947: LD_INT 9
83949: MINUS
83950: ARRAY
83951: ST_TO_ADDR
// end ; 14 :
83952: GO 84371
83954: LD_INT 14
83956: DOUBLE
83957: EQUAL
83958: IFTRUE 83962
83960: GO 83973
83962: POP
// bc_type := b_workshop ; 15 :
83963: LD_ADDR_OWVAR 42
83967: PUSH
83968: LD_INT 2
83970: ST_TO_ADDR
83971: GO 84371
83973: LD_INT 15
83975: DOUBLE
83976: EQUAL
83977: IFTRUE 83981
83979: GO 83992
83981: POP
// bc_type := b_factory ; 16 :
83982: LD_ADDR_OWVAR 42
83986: PUSH
83987: LD_INT 3
83989: ST_TO_ADDR
83990: GO 84371
83992: LD_INT 16
83994: DOUBLE
83995: EQUAL
83996: IFTRUE 84000
83998: GO 84011
84000: POP
// bc_type := b_ext_gun ; 17 :
84001: LD_ADDR_OWVAR 42
84005: PUSH
84006: LD_INT 17
84008: ST_TO_ADDR
84009: GO 84371
84011: LD_INT 17
84013: DOUBLE
84014: EQUAL
84015: IFTRUE 84019
84017: GO 84047
84019: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
84020: LD_ADDR_OWVAR 42
84024: PUSH
84025: LD_INT 19
84027: PUSH
84028: LD_INT 23
84030: PUSH
84031: LD_INT 19
84033: PUSH
84034: EMPTY
84035: LIST
84036: LIST
84037: LIST
84038: PUSH
84039: LD_VAR 0 1
84043: ARRAY
84044: ST_TO_ADDR
84045: GO 84371
84047: LD_INT 18
84049: DOUBLE
84050: EQUAL
84051: IFTRUE 84055
84053: GO 84066
84055: POP
// bc_type := b_ext_radar ; 19 :
84056: LD_ADDR_OWVAR 42
84060: PUSH
84061: LD_INT 20
84063: ST_TO_ADDR
84064: GO 84371
84066: LD_INT 19
84068: DOUBLE
84069: EQUAL
84070: IFTRUE 84074
84072: GO 84085
84074: POP
// bc_type := b_ext_radio ; 20 :
84075: LD_ADDR_OWVAR 42
84079: PUSH
84080: LD_INT 22
84082: ST_TO_ADDR
84083: GO 84371
84085: LD_INT 20
84087: DOUBLE
84088: EQUAL
84089: IFTRUE 84093
84091: GO 84104
84093: POP
// bc_type := b_ext_siberium ; 21 :
84094: LD_ADDR_OWVAR 42
84098: PUSH
84099: LD_INT 21
84101: ST_TO_ADDR
84102: GO 84371
84104: LD_INT 21
84106: DOUBLE
84107: EQUAL
84108: IFTRUE 84112
84110: GO 84123
84112: POP
// bc_type := b_ext_computer ; 22 :
84113: LD_ADDR_OWVAR 42
84117: PUSH
84118: LD_INT 24
84120: ST_TO_ADDR
84121: GO 84371
84123: LD_INT 22
84125: DOUBLE
84126: EQUAL
84127: IFTRUE 84131
84129: GO 84142
84131: POP
// bc_type := b_ext_track ; 23 :
84132: LD_ADDR_OWVAR 42
84136: PUSH
84137: LD_INT 16
84139: ST_TO_ADDR
84140: GO 84371
84142: LD_INT 23
84144: DOUBLE
84145: EQUAL
84146: IFTRUE 84150
84148: GO 84161
84150: POP
// bc_type := b_ext_laser ; 24 :
84151: LD_ADDR_OWVAR 42
84155: PUSH
84156: LD_INT 25
84158: ST_TO_ADDR
84159: GO 84371
84161: LD_INT 24
84163: DOUBLE
84164: EQUAL
84165: IFTRUE 84169
84167: GO 84180
84169: POP
// bc_type := b_control_tower ; 25 :
84170: LD_ADDR_OWVAR 42
84174: PUSH
84175: LD_INT 36
84177: ST_TO_ADDR
84178: GO 84371
84180: LD_INT 25
84182: DOUBLE
84183: EQUAL
84184: IFTRUE 84188
84186: GO 84199
84188: POP
// bc_type := b_breastwork ; 26 :
84189: LD_ADDR_OWVAR 42
84193: PUSH
84194: LD_INT 31
84196: ST_TO_ADDR
84197: GO 84371
84199: LD_INT 26
84201: DOUBLE
84202: EQUAL
84203: IFTRUE 84207
84205: GO 84218
84207: POP
// bc_type := b_bunker ; 27 :
84208: LD_ADDR_OWVAR 42
84212: PUSH
84213: LD_INT 32
84215: ST_TO_ADDR
84216: GO 84371
84218: LD_INT 27
84220: DOUBLE
84221: EQUAL
84222: IFTRUE 84226
84224: GO 84237
84226: POP
// bc_type := b_turret ; 28 :
84227: LD_ADDR_OWVAR 42
84231: PUSH
84232: LD_INT 33
84234: ST_TO_ADDR
84235: GO 84371
84237: LD_INT 28
84239: DOUBLE
84240: EQUAL
84241: IFTRUE 84245
84243: GO 84256
84245: POP
// bc_type := b_armoury ; 29 :
84246: LD_ADDR_OWVAR 42
84250: PUSH
84251: LD_INT 4
84253: ST_TO_ADDR
84254: GO 84371
84256: LD_INT 29
84258: DOUBLE
84259: EQUAL
84260: IFTRUE 84264
84262: GO 84275
84264: POP
// bc_type := b_barracks ; 30 :
84265: LD_ADDR_OWVAR 42
84269: PUSH
84270: LD_INT 5
84272: ST_TO_ADDR
84273: GO 84371
84275: LD_INT 30
84277: DOUBLE
84278: EQUAL
84279: IFTRUE 84283
84281: GO 84294
84283: POP
// bc_type := b_solar_power ; 31 :
84284: LD_ADDR_OWVAR 42
84288: PUSH
84289: LD_INT 27
84291: ST_TO_ADDR
84292: GO 84371
84294: LD_INT 31
84296: DOUBLE
84297: EQUAL
84298: IFTRUE 84302
84300: GO 84313
84302: POP
// bc_type := b_oil_power ; 32 :
84303: LD_ADDR_OWVAR 42
84307: PUSH
84308: LD_INT 26
84310: ST_TO_ADDR
84311: GO 84371
84313: LD_INT 32
84315: DOUBLE
84316: EQUAL
84317: IFTRUE 84321
84319: GO 84332
84321: POP
// bc_type := b_siberite_power ; 33 :
84322: LD_ADDR_OWVAR 42
84326: PUSH
84327: LD_INT 28
84329: ST_TO_ADDR
84330: GO 84371
84332: LD_INT 33
84334: DOUBLE
84335: EQUAL
84336: IFTRUE 84340
84338: GO 84351
84340: POP
// bc_type := b_oil_mine ; 34 :
84341: LD_ADDR_OWVAR 42
84345: PUSH
84346: LD_INT 29
84348: ST_TO_ADDR
84349: GO 84371
84351: LD_INT 34
84353: DOUBLE
84354: EQUAL
84355: IFTRUE 84359
84357: GO 84370
84359: POP
// bc_type := b_siberite_mine ; end ;
84360: LD_ADDR_OWVAR 42
84364: PUSH
84365: LD_INT 30
84367: ST_TO_ADDR
84368: GO 84371
84370: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
84371: LD_ADDR_VAR 0 8
84375: PUSH
84376: LD_VAR 0 5
84380: PPUSH
84381: LD_VAR 0 6
84385: PPUSH
84386: LD_VAR 0 3
84390: PPUSH
84391: CALL_OW 47
84395: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
84396: LD_OWVAR 42
84400: PUSH
84401: LD_INT 32
84403: PUSH
84404: LD_INT 33
84406: PUSH
84407: EMPTY
84408: LIST
84409: LIST
84410: IN
84411: IFFALSE 84427
// PlaceWeaponTurret ( b , weapon ) ;
84413: LD_VAR 0 8
84417: PPUSH
84418: LD_VAR 0 4
84422: PPUSH
84423: CALL_OW 431
// end ;
84427: LD_VAR 0 7
84431: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
84432: LD_INT 0
84434: PPUSH
84435: PPUSH
84436: PPUSH
84437: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
84438: LD_ADDR_VAR 0 4
84442: PUSH
84443: LD_INT 22
84445: PUSH
84446: LD_OWVAR 2
84450: PUSH
84451: EMPTY
84452: LIST
84453: LIST
84454: PUSH
84455: LD_INT 2
84457: PUSH
84458: LD_INT 30
84460: PUSH
84461: LD_INT 0
84463: PUSH
84464: EMPTY
84465: LIST
84466: LIST
84467: PUSH
84468: LD_INT 30
84470: PUSH
84471: LD_INT 1
84473: PUSH
84474: EMPTY
84475: LIST
84476: LIST
84477: PUSH
84478: EMPTY
84479: LIST
84480: LIST
84481: LIST
84482: PUSH
84483: EMPTY
84484: LIST
84485: LIST
84486: PPUSH
84487: CALL_OW 69
84491: ST_TO_ADDR
// if not tmp then
84492: LD_VAR 0 4
84496: NOT
84497: IFFALSE 84501
// exit ;
84499: GO 84560
// for i in tmp do
84501: LD_ADDR_VAR 0 2
84505: PUSH
84506: LD_VAR 0 4
84510: PUSH
84511: FOR_IN
84512: IFFALSE 84558
// for j = 1 to 3 do
84514: LD_ADDR_VAR 0 3
84518: PUSH
84519: DOUBLE
84520: LD_INT 1
84522: DEC
84523: ST_TO_ADDR
84524: LD_INT 3
84526: PUSH
84527: FOR_TO
84528: IFFALSE 84554
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
84530: LD_VAR 0 2
84534: PPUSH
84535: CALL_OW 274
84539: PPUSH
84540: LD_VAR 0 3
84544: PPUSH
84545: LD_INT 99999
84547: PPUSH
84548: CALL_OW 277
84552: GO 84527
84554: POP
84555: POP
84556: GO 84511
84558: POP
84559: POP
// end ;
84560: LD_VAR 0 1
84564: RET
// export function hHackSetLevel10 ; var i , j ; begin
84565: LD_INT 0
84567: PPUSH
84568: PPUSH
84569: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84570: LD_ADDR_VAR 0 2
84574: PUSH
84575: LD_INT 21
84577: PUSH
84578: LD_INT 1
84580: PUSH
84581: EMPTY
84582: LIST
84583: LIST
84584: PPUSH
84585: CALL_OW 69
84589: PUSH
84590: FOR_IN
84591: IFFALSE 84643
// if IsSelected ( i ) then
84593: LD_VAR 0 2
84597: PPUSH
84598: CALL_OW 306
84602: IFFALSE 84641
// begin for j := 1 to 4 do
84604: LD_ADDR_VAR 0 3
84608: PUSH
84609: DOUBLE
84610: LD_INT 1
84612: DEC
84613: ST_TO_ADDR
84614: LD_INT 4
84616: PUSH
84617: FOR_TO
84618: IFFALSE 84639
// SetSkill ( i , j , 10 ) ;
84620: LD_VAR 0 2
84624: PPUSH
84625: LD_VAR 0 3
84629: PPUSH
84630: LD_INT 10
84632: PPUSH
84633: CALL_OW 237
84637: GO 84617
84639: POP
84640: POP
// end ;
84641: GO 84590
84643: POP
84644: POP
// end ;
84645: LD_VAR 0 1
84649: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
84650: LD_INT 0
84652: PPUSH
84653: PPUSH
84654: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
84655: LD_ADDR_VAR 0 2
84659: PUSH
84660: LD_INT 22
84662: PUSH
84663: LD_OWVAR 2
84667: PUSH
84668: EMPTY
84669: LIST
84670: LIST
84671: PUSH
84672: LD_INT 21
84674: PUSH
84675: LD_INT 1
84677: PUSH
84678: EMPTY
84679: LIST
84680: LIST
84681: PUSH
84682: EMPTY
84683: LIST
84684: LIST
84685: PPUSH
84686: CALL_OW 69
84690: PUSH
84691: FOR_IN
84692: IFFALSE 84733
// begin for j := 1 to 4 do
84694: LD_ADDR_VAR 0 3
84698: PUSH
84699: DOUBLE
84700: LD_INT 1
84702: DEC
84703: ST_TO_ADDR
84704: LD_INT 4
84706: PUSH
84707: FOR_TO
84708: IFFALSE 84729
// SetSkill ( i , j , 10 ) ;
84710: LD_VAR 0 2
84714: PPUSH
84715: LD_VAR 0 3
84719: PPUSH
84720: LD_INT 10
84722: PPUSH
84723: CALL_OW 237
84727: GO 84707
84729: POP
84730: POP
// end ;
84731: GO 84691
84733: POP
84734: POP
// end ;
84735: LD_VAR 0 1
84739: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
84740: LD_INT 0
84742: PPUSH
// uc_side := your_side ;
84743: LD_ADDR_OWVAR 20
84747: PUSH
84748: LD_OWVAR 2
84752: ST_TO_ADDR
// uc_nation := nation ;
84753: LD_ADDR_OWVAR 21
84757: PUSH
84758: LD_VAR 0 1
84762: ST_TO_ADDR
// InitHc ;
84763: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
84767: LD_INT 0
84769: PPUSH
84770: LD_VAR 0 2
84774: PPUSH
84775: LD_VAR 0 3
84779: PPUSH
84780: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
84784: LD_VAR 0 4
84788: PPUSH
84789: LD_VAR 0 5
84793: PPUSH
84794: CALL_OW 428
84798: PUSH
84799: LD_INT 0
84801: EQUAL
84802: IFFALSE 84826
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
84804: CALL_OW 44
84808: PPUSH
84809: LD_VAR 0 4
84813: PPUSH
84814: LD_VAR 0 5
84818: PPUSH
84819: LD_INT 1
84821: PPUSH
84822: CALL_OW 48
// end ;
84826: LD_VAR 0 6
84830: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
84831: LD_INT 0
84833: PPUSH
84834: PPUSH
// uc_side := your_side ;
84835: LD_ADDR_OWVAR 20
84839: PUSH
84840: LD_OWVAR 2
84844: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
84845: LD_VAR 0 1
84849: PUSH
84850: LD_INT 1
84852: PUSH
84853: LD_INT 2
84855: PUSH
84856: LD_INT 3
84858: PUSH
84859: LD_INT 4
84861: PUSH
84862: LD_INT 5
84864: PUSH
84865: EMPTY
84866: LIST
84867: LIST
84868: LIST
84869: LIST
84870: LIST
84871: IN
84872: IFFALSE 84884
// uc_nation := nation_american else
84874: LD_ADDR_OWVAR 21
84878: PUSH
84879: LD_INT 1
84881: ST_TO_ADDR
84882: GO 84927
// if chassis in [ 11 , 12 , 13 , 14 ] then
84884: LD_VAR 0 1
84888: PUSH
84889: LD_INT 11
84891: PUSH
84892: LD_INT 12
84894: PUSH
84895: LD_INT 13
84897: PUSH
84898: LD_INT 14
84900: PUSH
84901: EMPTY
84902: LIST
84903: LIST
84904: LIST
84905: LIST
84906: IN
84907: IFFALSE 84919
// uc_nation := nation_arabian else
84909: LD_ADDR_OWVAR 21
84913: PUSH
84914: LD_INT 2
84916: ST_TO_ADDR
84917: GO 84927
// uc_nation := nation_russian ;
84919: LD_ADDR_OWVAR 21
84923: PUSH
84924: LD_INT 3
84926: ST_TO_ADDR
// vc_chassis := chassis ;
84927: LD_ADDR_OWVAR 37
84931: PUSH
84932: LD_VAR 0 1
84936: ST_TO_ADDR
// vc_engine := engine ;
84937: LD_ADDR_OWVAR 39
84941: PUSH
84942: LD_VAR 0 2
84946: ST_TO_ADDR
// vc_control := control ;
84947: LD_ADDR_OWVAR 38
84951: PUSH
84952: LD_VAR 0 3
84956: ST_TO_ADDR
// vc_weapon := weapon ;
84957: LD_ADDR_OWVAR 40
84961: PUSH
84962: LD_VAR 0 4
84966: ST_TO_ADDR
// un := CreateVehicle ;
84967: LD_ADDR_VAR 0 8
84971: PUSH
84972: CALL_OW 45
84976: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
84977: LD_VAR 0 8
84981: PPUSH
84982: LD_INT 0
84984: PPUSH
84985: LD_INT 5
84987: PPUSH
84988: CALL_OW 12
84992: PPUSH
84993: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
84997: LD_VAR 0 8
85001: PPUSH
85002: LD_VAR 0 5
85006: PPUSH
85007: LD_VAR 0 6
85011: PPUSH
85012: LD_INT 1
85014: PPUSH
85015: CALL_OW 48
// end ;
85019: LD_VAR 0 7
85023: RET
// export hInvincible ; every 1 do
85024: GO 85026
85026: DISABLE
// hInvincible := [ ] ;
85027: LD_ADDR_EXP 121
85031: PUSH
85032: EMPTY
85033: ST_TO_ADDR
85034: END
// every 10 do var i ;
85035: GO 85037
85037: DISABLE
85038: LD_INT 0
85040: PPUSH
// begin enable ;
85041: ENABLE
// if not hInvincible then
85042: LD_EXP 121
85046: NOT
85047: IFFALSE 85051
// exit ;
85049: GO 85095
// for i in hInvincible do
85051: LD_ADDR_VAR 0 1
85055: PUSH
85056: LD_EXP 121
85060: PUSH
85061: FOR_IN
85062: IFFALSE 85093
// if GetLives ( i ) < 1000 then
85064: LD_VAR 0 1
85068: PPUSH
85069: CALL_OW 256
85073: PUSH
85074: LD_INT 1000
85076: LESS
85077: IFFALSE 85091
// SetLives ( i , 1000 ) ;
85079: LD_VAR 0 1
85083: PPUSH
85084: LD_INT 1000
85086: PPUSH
85087: CALL_OW 234
85091: GO 85061
85093: POP
85094: POP
// end ;
85095: PPOPN 1
85097: END
// export function hHackInvincible ; var i ; begin
85098: LD_INT 0
85100: PPUSH
85101: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
85102: LD_ADDR_VAR 0 2
85106: PUSH
85107: LD_INT 2
85109: PUSH
85110: LD_INT 21
85112: PUSH
85113: LD_INT 1
85115: PUSH
85116: EMPTY
85117: LIST
85118: LIST
85119: PUSH
85120: LD_INT 21
85122: PUSH
85123: LD_INT 2
85125: PUSH
85126: EMPTY
85127: LIST
85128: LIST
85129: PUSH
85130: EMPTY
85131: LIST
85132: LIST
85133: LIST
85134: PPUSH
85135: CALL_OW 69
85139: PUSH
85140: FOR_IN
85141: IFFALSE 85202
// if IsSelected ( i ) then
85143: LD_VAR 0 2
85147: PPUSH
85148: CALL_OW 306
85152: IFFALSE 85200
// begin if i in hInvincible then
85154: LD_VAR 0 2
85158: PUSH
85159: LD_EXP 121
85163: IN
85164: IFFALSE 85184
// hInvincible := hInvincible diff i else
85166: LD_ADDR_EXP 121
85170: PUSH
85171: LD_EXP 121
85175: PUSH
85176: LD_VAR 0 2
85180: DIFF
85181: ST_TO_ADDR
85182: GO 85200
// hInvincible := hInvincible union i ;
85184: LD_ADDR_EXP 121
85188: PUSH
85189: LD_EXP 121
85193: PUSH
85194: LD_VAR 0 2
85198: UNION
85199: ST_TO_ADDR
// end ;
85200: GO 85140
85202: POP
85203: POP
// end ;
85204: LD_VAR 0 1
85208: RET
// export function hHackInvisible ; var i , j ; begin
85209: LD_INT 0
85211: PPUSH
85212: PPUSH
85213: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
85214: LD_ADDR_VAR 0 2
85218: PUSH
85219: LD_INT 21
85221: PUSH
85222: LD_INT 1
85224: PUSH
85225: EMPTY
85226: LIST
85227: LIST
85228: PPUSH
85229: CALL_OW 69
85233: PUSH
85234: FOR_IN
85235: IFFALSE 85259
// if IsSelected ( i ) then
85237: LD_VAR 0 2
85241: PPUSH
85242: CALL_OW 306
85246: IFFALSE 85257
// ComForceInvisible ( i ) ;
85248: LD_VAR 0 2
85252: PPUSH
85253: CALL_OW 496
85257: GO 85234
85259: POP
85260: POP
// end ;
85261: LD_VAR 0 1
85265: RET
// export function hHackChangeYourSide ; begin
85266: LD_INT 0
85268: PPUSH
// if your_side = 8 then
85269: LD_OWVAR 2
85273: PUSH
85274: LD_INT 8
85276: EQUAL
85277: IFFALSE 85289
// your_side := 0 else
85279: LD_ADDR_OWVAR 2
85283: PUSH
85284: LD_INT 0
85286: ST_TO_ADDR
85287: GO 85303
// your_side := your_side + 1 ;
85289: LD_ADDR_OWVAR 2
85293: PUSH
85294: LD_OWVAR 2
85298: PUSH
85299: LD_INT 1
85301: PLUS
85302: ST_TO_ADDR
// end ;
85303: LD_VAR 0 1
85307: RET
// export function hHackChangeUnitSide ; var i , j ; begin
85308: LD_INT 0
85310: PPUSH
85311: PPUSH
85312: PPUSH
// for i in all_units do
85313: LD_ADDR_VAR 0 2
85317: PUSH
85318: LD_OWVAR 3
85322: PUSH
85323: FOR_IN
85324: IFFALSE 85402
// if IsSelected ( i ) then
85326: LD_VAR 0 2
85330: PPUSH
85331: CALL_OW 306
85335: IFFALSE 85400
// begin j := GetSide ( i ) ;
85337: LD_ADDR_VAR 0 3
85341: PUSH
85342: LD_VAR 0 2
85346: PPUSH
85347: CALL_OW 255
85351: ST_TO_ADDR
// if j = 8 then
85352: LD_VAR 0 3
85356: PUSH
85357: LD_INT 8
85359: EQUAL
85360: IFFALSE 85372
// j := 0 else
85362: LD_ADDR_VAR 0 3
85366: PUSH
85367: LD_INT 0
85369: ST_TO_ADDR
85370: GO 85386
// j := j + 1 ;
85372: LD_ADDR_VAR 0 3
85376: PUSH
85377: LD_VAR 0 3
85381: PUSH
85382: LD_INT 1
85384: PLUS
85385: ST_TO_ADDR
// SetSide ( i , j ) ;
85386: LD_VAR 0 2
85390: PPUSH
85391: LD_VAR 0 3
85395: PPUSH
85396: CALL_OW 235
// end ;
85400: GO 85323
85402: POP
85403: POP
// end ;
85404: LD_VAR 0 1
85408: RET
// export function hHackFog ; begin
85409: LD_INT 0
85411: PPUSH
// FogOff ( true ) ;
85412: LD_INT 1
85414: PPUSH
85415: CALL_OW 344
// end ;
85419: LD_VAR 0 1
85423: RET
// export function hHackTeleport ( unit , x , y ) ; begin
85424: LD_INT 0
85426: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
85427: LD_VAR 0 1
85431: PPUSH
85432: LD_VAR 0 2
85436: PPUSH
85437: LD_VAR 0 3
85441: PPUSH
85442: LD_INT 1
85444: PPUSH
85445: LD_INT 1
85447: PPUSH
85448: CALL_OW 483
// CenterOnXY ( x , y ) ;
85452: LD_VAR 0 2
85456: PPUSH
85457: LD_VAR 0 3
85461: PPUSH
85462: CALL_OW 84
// end ;
85466: LD_VAR 0 4
85470: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
85471: LD_INT 0
85473: PPUSH
85474: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
85475: LD_VAR 0 1
85479: NOT
85480: PUSH
85481: LD_VAR 0 2
85485: PPUSH
85486: LD_VAR 0 3
85490: PPUSH
85491: CALL_OW 488
85495: NOT
85496: OR
85497: PUSH
85498: LD_VAR 0 1
85502: PPUSH
85503: CALL_OW 266
85507: PUSH
85508: LD_INT 3
85510: NONEQUAL
85511: PUSH
85512: LD_VAR 0 1
85516: PPUSH
85517: CALL_OW 247
85521: PUSH
85522: LD_INT 1
85524: EQUAL
85525: NOT
85526: AND
85527: OR
85528: IFFALSE 85532
// exit ;
85530: GO 85681
// if GetType ( factory ) = unit_human then
85532: LD_VAR 0 1
85536: PPUSH
85537: CALL_OW 247
85541: PUSH
85542: LD_INT 1
85544: EQUAL
85545: IFFALSE 85562
// factory := IsInUnit ( factory ) ;
85547: LD_ADDR_VAR 0 1
85551: PUSH
85552: LD_VAR 0 1
85556: PPUSH
85557: CALL_OW 310
85561: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
85562: LD_VAR 0 1
85566: PPUSH
85567: CALL_OW 266
85571: PUSH
85572: LD_INT 3
85574: NONEQUAL
85575: IFFALSE 85579
// exit ;
85577: GO 85681
// if HexInfo ( x , y ) = factory then
85579: LD_VAR 0 2
85583: PPUSH
85584: LD_VAR 0 3
85588: PPUSH
85589: CALL_OW 428
85593: PUSH
85594: LD_VAR 0 1
85598: EQUAL
85599: IFFALSE 85626
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
85601: LD_ADDR_EXP 122
85605: PUSH
85606: LD_EXP 122
85610: PPUSH
85611: LD_VAR 0 1
85615: PPUSH
85616: LD_INT 0
85618: PPUSH
85619: CALL_OW 1
85623: ST_TO_ADDR
85624: GO 85677
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
85626: LD_ADDR_EXP 122
85630: PUSH
85631: LD_EXP 122
85635: PPUSH
85636: LD_VAR 0 1
85640: PPUSH
85641: LD_VAR 0 1
85645: PPUSH
85646: CALL_OW 255
85650: PUSH
85651: LD_VAR 0 1
85655: PUSH
85656: LD_VAR 0 2
85660: PUSH
85661: LD_VAR 0 3
85665: PUSH
85666: EMPTY
85667: LIST
85668: LIST
85669: LIST
85670: LIST
85671: PPUSH
85672: CALL_OW 1
85676: ST_TO_ADDR
// UpdateFactoryWaypoints ;
85677: CALL 85686 0 0
// end ;
85681: LD_VAR 0 4
85685: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
85686: LD_INT 0
85688: PPUSH
85689: PPUSH
85690: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
85691: LD_STRING resetFactoryWaypoint();
85693: PPUSH
85694: CALL_OW 559
// if factoryWaypoints then
85698: LD_EXP 122
85702: IFFALSE 85828
// begin list := PrepareArray ( factoryWaypoints ) ;
85704: LD_ADDR_VAR 0 3
85708: PUSH
85709: LD_EXP 122
85713: PPUSH
85714: CALL 70516 0 1
85718: ST_TO_ADDR
// for i := 1 to list do
85719: LD_ADDR_VAR 0 2
85723: PUSH
85724: DOUBLE
85725: LD_INT 1
85727: DEC
85728: ST_TO_ADDR
85729: LD_VAR 0 3
85733: PUSH
85734: FOR_TO
85735: IFFALSE 85826
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85737: LD_STRING setFactoryWaypointXY(
85739: PUSH
85740: LD_VAR 0 3
85744: PUSH
85745: LD_VAR 0 2
85749: ARRAY
85750: PUSH
85751: LD_INT 1
85753: ARRAY
85754: STR
85755: PUSH
85756: LD_STRING ,
85758: STR
85759: PUSH
85760: LD_VAR 0 3
85764: PUSH
85765: LD_VAR 0 2
85769: ARRAY
85770: PUSH
85771: LD_INT 2
85773: ARRAY
85774: STR
85775: PUSH
85776: LD_STRING ,
85778: STR
85779: PUSH
85780: LD_VAR 0 3
85784: PUSH
85785: LD_VAR 0 2
85789: ARRAY
85790: PUSH
85791: LD_INT 3
85793: ARRAY
85794: STR
85795: PUSH
85796: LD_STRING ,
85798: STR
85799: PUSH
85800: LD_VAR 0 3
85804: PUSH
85805: LD_VAR 0 2
85809: ARRAY
85810: PUSH
85811: LD_INT 4
85813: ARRAY
85814: STR
85815: PUSH
85816: LD_STRING )
85818: STR
85819: PPUSH
85820: CALL_OW 559
85824: GO 85734
85826: POP
85827: POP
// end ; end ;
85828: LD_VAR 0 1
85832: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
85833: LD_INT 0
85835: PPUSH
// if HexInfo ( x , y ) = warehouse then
85836: LD_VAR 0 2
85840: PPUSH
85841: LD_VAR 0 3
85845: PPUSH
85846: CALL_OW 428
85850: PUSH
85851: LD_VAR 0 1
85855: EQUAL
85856: IFFALSE 85883
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
85858: LD_ADDR_EXP 123
85862: PUSH
85863: LD_EXP 123
85867: PPUSH
85868: LD_VAR 0 1
85872: PPUSH
85873: LD_INT 0
85875: PPUSH
85876: CALL_OW 1
85880: ST_TO_ADDR
85881: GO 85934
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
85883: LD_ADDR_EXP 123
85887: PUSH
85888: LD_EXP 123
85892: PPUSH
85893: LD_VAR 0 1
85897: PPUSH
85898: LD_VAR 0 1
85902: PPUSH
85903: CALL_OW 255
85907: PUSH
85908: LD_VAR 0 1
85912: PUSH
85913: LD_VAR 0 2
85917: PUSH
85918: LD_VAR 0 3
85922: PUSH
85923: EMPTY
85924: LIST
85925: LIST
85926: LIST
85927: LIST
85928: PPUSH
85929: CALL_OW 1
85933: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
85934: CALL 85943 0 0
// end ;
85938: LD_VAR 0 4
85942: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
85943: LD_INT 0
85945: PPUSH
85946: PPUSH
85947: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
85948: LD_STRING resetWarehouseGatheringPoints();
85950: PPUSH
85951: CALL_OW 559
// if warehouseGatheringPoints then
85955: LD_EXP 123
85959: IFFALSE 86085
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
85961: LD_ADDR_VAR 0 3
85965: PUSH
85966: LD_EXP 123
85970: PPUSH
85971: CALL 70516 0 1
85975: ST_TO_ADDR
// for i := 1 to list do
85976: LD_ADDR_VAR 0 2
85980: PUSH
85981: DOUBLE
85982: LD_INT 1
85984: DEC
85985: ST_TO_ADDR
85986: LD_VAR 0 3
85990: PUSH
85991: FOR_TO
85992: IFFALSE 86083
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85994: LD_STRING setWarehouseGatheringPointXY(
85996: PUSH
85997: LD_VAR 0 3
86001: PUSH
86002: LD_VAR 0 2
86006: ARRAY
86007: PUSH
86008: LD_INT 1
86010: ARRAY
86011: STR
86012: PUSH
86013: LD_STRING ,
86015: STR
86016: PUSH
86017: LD_VAR 0 3
86021: PUSH
86022: LD_VAR 0 2
86026: ARRAY
86027: PUSH
86028: LD_INT 2
86030: ARRAY
86031: STR
86032: PUSH
86033: LD_STRING ,
86035: STR
86036: PUSH
86037: LD_VAR 0 3
86041: PUSH
86042: LD_VAR 0 2
86046: ARRAY
86047: PUSH
86048: LD_INT 3
86050: ARRAY
86051: STR
86052: PUSH
86053: LD_STRING ,
86055: STR
86056: PUSH
86057: LD_VAR 0 3
86061: PUSH
86062: LD_VAR 0 2
86066: ARRAY
86067: PUSH
86068: LD_INT 4
86070: ARRAY
86071: STR
86072: PUSH
86073: LD_STRING )
86075: STR
86076: PPUSH
86077: CALL_OW 559
86081: GO 85991
86083: POP
86084: POP
// end ; end ;
86085: LD_VAR 0 1
86089: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
86090: LD_EXP 123
86094: IFFALSE 86779
86096: GO 86098
86098: DISABLE
86099: LD_INT 0
86101: PPUSH
86102: PPUSH
86103: PPUSH
86104: PPUSH
86105: PPUSH
86106: PPUSH
86107: PPUSH
86108: PPUSH
86109: PPUSH
// begin enable ;
86110: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
86111: LD_ADDR_VAR 0 3
86115: PUSH
86116: LD_EXP 123
86120: PPUSH
86121: CALL 70516 0 1
86125: ST_TO_ADDR
// if not list then
86126: LD_VAR 0 3
86130: NOT
86131: IFFALSE 86135
// exit ;
86133: GO 86779
// for i := 1 to list do
86135: LD_ADDR_VAR 0 1
86139: PUSH
86140: DOUBLE
86141: LD_INT 1
86143: DEC
86144: ST_TO_ADDR
86145: LD_VAR 0 3
86149: PUSH
86150: FOR_TO
86151: IFFALSE 86777
// begin depot := list [ i ] [ 2 ] ;
86153: LD_ADDR_VAR 0 8
86157: PUSH
86158: LD_VAR 0 3
86162: PUSH
86163: LD_VAR 0 1
86167: ARRAY
86168: PUSH
86169: LD_INT 2
86171: ARRAY
86172: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
86173: LD_ADDR_VAR 0 5
86177: PUSH
86178: LD_VAR 0 3
86182: PUSH
86183: LD_VAR 0 1
86187: ARRAY
86188: PUSH
86189: LD_INT 1
86191: ARRAY
86192: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
86193: LD_VAR 0 8
86197: PPUSH
86198: CALL_OW 301
86202: PUSH
86203: LD_VAR 0 5
86207: PUSH
86208: LD_VAR 0 8
86212: PPUSH
86213: CALL_OW 255
86217: NONEQUAL
86218: OR
86219: IFFALSE 86248
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
86221: LD_ADDR_EXP 123
86225: PUSH
86226: LD_EXP 123
86230: PPUSH
86231: LD_VAR 0 8
86235: PPUSH
86236: LD_INT 0
86238: PPUSH
86239: CALL_OW 1
86243: ST_TO_ADDR
// exit ;
86244: POP
86245: POP
86246: GO 86779
// end ; x := list [ i ] [ 3 ] ;
86248: LD_ADDR_VAR 0 6
86252: PUSH
86253: LD_VAR 0 3
86257: PUSH
86258: LD_VAR 0 1
86262: ARRAY
86263: PUSH
86264: LD_INT 3
86266: ARRAY
86267: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
86268: LD_ADDR_VAR 0 7
86272: PUSH
86273: LD_VAR 0 3
86277: PUSH
86278: LD_VAR 0 1
86282: ARRAY
86283: PUSH
86284: LD_INT 4
86286: ARRAY
86287: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
86288: LD_ADDR_VAR 0 9
86292: PUSH
86293: LD_VAR 0 6
86297: PPUSH
86298: LD_VAR 0 7
86302: PPUSH
86303: LD_INT 16
86305: PPUSH
86306: CALL 69104 0 3
86310: ST_TO_ADDR
// if not cratesNearbyPoint then
86311: LD_VAR 0 9
86315: NOT
86316: IFFALSE 86322
// exit ;
86318: POP
86319: POP
86320: GO 86779
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
86322: LD_ADDR_VAR 0 4
86326: PUSH
86327: LD_INT 22
86329: PUSH
86330: LD_VAR 0 5
86334: PUSH
86335: EMPTY
86336: LIST
86337: LIST
86338: PUSH
86339: LD_INT 3
86341: PUSH
86342: LD_INT 60
86344: PUSH
86345: EMPTY
86346: LIST
86347: PUSH
86348: EMPTY
86349: LIST
86350: LIST
86351: PUSH
86352: LD_INT 91
86354: PUSH
86355: LD_VAR 0 8
86359: PUSH
86360: LD_INT 6
86362: PUSH
86363: EMPTY
86364: LIST
86365: LIST
86366: LIST
86367: PUSH
86368: LD_INT 2
86370: PUSH
86371: LD_INT 25
86373: PUSH
86374: LD_INT 2
86376: PUSH
86377: EMPTY
86378: LIST
86379: LIST
86380: PUSH
86381: LD_INT 25
86383: PUSH
86384: LD_INT 16
86386: PUSH
86387: EMPTY
86388: LIST
86389: LIST
86390: PUSH
86391: EMPTY
86392: LIST
86393: LIST
86394: LIST
86395: PUSH
86396: EMPTY
86397: LIST
86398: LIST
86399: LIST
86400: LIST
86401: PPUSH
86402: CALL_OW 69
86406: PUSH
86407: LD_VAR 0 8
86411: PPUSH
86412: CALL_OW 313
86416: PPUSH
86417: LD_INT 3
86419: PUSH
86420: LD_INT 60
86422: PUSH
86423: EMPTY
86424: LIST
86425: PUSH
86426: EMPTY
86427: LIST
86428: LIST
86429: PUSH
86430: LD_INT 2
86432: PUSH
86433: LD_INT 25
86435: PUSH
86436: LD_INT 2
86438: PUSH
86439: EMPTY
86440: LIST
86441: LIST
86442: PUSH
86443: LD_INT 25
86445: PUSH
86446: LD_INT 16
86448: PUSH
86449: EMPTY
86450: LIST
86451: LIST
86452: PUSH
86453: EMPTY
86454: LIST
86455: LIST
86456: LIST
86457: PUSH
86458: EMPTY
86459: LIST
86460: LIST
86461: PPUSH
86462: CALL_OW 72
86466: UNION
86467: ST_TO_ADDR
// if tmp then
86468: LD_VAR 0 4
86472: IFFALSE 86552
// begin tmp := ShrinkArray ( tmp , 3 ) ;
86474: LD_ADDR_VAR 0 4
86478: PUSH
86479: LD_VAR 0 4
86483: PPUSH
86484: LD_INT 3
86486: PPUSH
86487: CALL 67073 0 2
86491: ST_TO_ADDR
// for j in tmp do
86492: LD_ADDR_VAR 0 2
86496: PUSH
86497: LD_VAR 0 4
86501: PUSH
86502: FOR_IN
86503: IFFALSE 86546
// begin if IsInUnit ( j ) then
86505: LD_VAR 0 2
86509: PPUSH
86510: CALL_OW 310
86514: IFFALSE 86525
// ComExit ( j ) ;
86516: LD_VAR 0 2
86520: PPUSH
86521: CALL 67156 0 1
// AddComCollect ( j , x , y ) ;
86525: LD_VAR 0 2
86529: PPUSH
86530: LD_VAR 0 6
86534: PPUSH
86535: LD_VAR 0 7
86539: PPUSH
86540: CALL_OW 177
// end ;
86544: GO 86502
86546: POP
86547: POP
// exit ;
86548: POP
86549: POP
86550: GO 86779
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
86552: LD_ADDR_VAR 0 4
86556: PUSH
86557: LD_INT 22
86559: PUSH
86560: LD_VAR 0 5
86564: PUSH
86565: EMPTY
86566: LIST
86567: LIST
86568: PUSH
86569: LD_INT 91
86571: PUSH
86572: LD_VAR 0 8
86576: PUSH
86577: LD_INT 8
86579: PUSH
86580: EMPTY
86581: LIST
86582: LIST
86583: LIST
86584: PUSH
86585: LD_INT 2
86587: PUSH
86588: LD_INT 34
86590: PUSH
86591: LD_INT 12
86593: PUSH
86594: EMPTY
86595: LIST
86596: LIST
86597: PUSH
86598: LD_INT 34
86600: PUSH
86601: LD_INT 51
86603: PUSH
86604: EMPTY
86605: LIST
86606: LIST
86607: PUSH
86608: LD_INT 34
86610: PUSH
86611: LD_INT 32
86613: PUSH
86614: EMPTY
86615: LIST
86616: LIST
86617: PUSH
86618: LD_INT 34
86620: PUSH
86621: LD_INT 89
86623: PUSH
86624: EMPTY
86625: LIST
86626: LIST
86627: PUSH
86628: EMPTY
86629: LIST
86630: LIST
86631: LIST
86632: LIST
86633: LIST
86634: PUSH
86635: EMPTY
86636: LIST
86637: LIST
86638: LIST
86639: PPUSH
86640: CALL_OW 69
86644: ST_TO_ADDR
// if tmp then
86645: LD_VAR 0 4
86649: IFFALSE 86775
// begin for j in tmp do
86651: LD_ADDR_VAR 0 2
86655: PUSH
86656: LD_VAR 0 4
86660: PUSH
86661: FOR_IN
86662: IFFALSE 86773
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
86664: LD_VAR 0 2
86668: PPUSH
86669: CALL_OW 262
86673: PUSH
86674: LD_INT 3
86676: EQUAL
86677: PUSH
86678: LD_VAR 0 2
86682: PPUSH
86683: CALL_OW 261
86687: PUSH
86688: LD_INT 20
86690: GREATER
86691: OR
86692: PUSH
86693: LD_VAR 0 2
86697: PPUSH
86698: CALL_OW 314
86702: NOT
86703: AND
86704: PUSH
86705: LD_VAR 0 2
86709: PPUSH
86710: CALL_OW 263
86714: PUSH
86715: LD_INT 1
86717: NONEQUAL
86718: PUSH
86719: LD_VAR 0 2
86723: PPUSH
86724: CALL_OW 311
86728: OR
86729: AND
86730: IFFALSE 86771
// begin ComCollect ( j , x , y ) ;
86732: LD_VAR 0 2
86736: PPUSH
86737: LD_VAR 0 6
86741: PPUSH
86742: LD_VAR 0 7
86746: PPUSH
86747: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
86751: LD_VAR 0 2
86755: PPUSH
86756: LD_VAR 0 8
86760: PPUSH
86761: CALL_OW 172
// exit ;
86765: POP
86766: POP
86767: POP
86768: POP
86769: GO 86779
// end ;
86771: GO 86661
86773: POP
86774: POP
// end ; end ;
86775: GO 86150
86777: POP
86778: POP
// end ; end_of_file
86779: PPOPN 9
86781: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86782: LD_VAR 0 1
86786: PUSH
86787: LD_INT 200
86789: DOUBLE
86790: GREATEREQUAL
86791: IFFALSE 86799
86793: LD_INT 299
86795: DOUBLE
86796: LESSEQUAL
86797: IFTRUE 86801
86799: GO 86833
86801: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86802: LD_VAR 0 1
86806: PPUSH
86807: LD_VAR 0 2
86811: PPUSH
86812: LD_VAR 0 3
86816: PPUSH
86817: LD_VAR 0 4
86821: PPUSH
86822: LD_VAR 0 5
86826: PPUSH
86827: CALL 87321 0 5
86831: GO 86910
86833: LD_INT 300
86835: DOUBLE
86836: GREATEREQUAL
86837: IFFALSE 86845
86839: LD_INT 399
86841: DOUBLE
86842: LESSEQUAL
86843: IFTRUE 86847
86845: GO 86909
86847: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86848: LD_VAR 0 1
86852: PPUSH
86853: LD_VAR 0 2
86857: PPUSH
86858: LD_VAR 0 3
86862: PPUSH
86863: LD_VAR 0 4
86867: PPUSH
86868: LD_VAR 0 5
86872: PPUSH
86873: LD_VAR 0 6
86877: PPUSH
86878: LD_VAR 0 7
86882: PPUSH
86883: LD_VAR 0 8
86887: PPUSH
86888: LD_VAR 0 9
86892: PPUSH
86893: LD_VAR 0 10
86897: PPUSH
86898: LD_VAR 0 11
86902: PPUSH
86903: CALL 83483 0 11
86907: GO 86910
86909: POP
// end ;
86910: PPOPN 11
86912: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86913: LD_VAR 0 1
86917: PPUSH
86918: LD_VAR 0 2
86922: PPUSH
86923: LD_VAR 0 3
86927: PPUSH
86928: LD_VAR 0 4
86932: PPUSH
86933: LD_VAR 0 5
86937: PPUSH
86938: CALL 87057 0 5
// end ; end_of_file
86942: PPOPN 5
86944: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
86945: LD_INT 0
86947: PPUSH
86948: PPUSH
86949: PPUSH
86950: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
86951: LD_VAR 0 1
86955: PPUSH
86956: CALL_OW 264
86960: PUSH
86961: LD_INT 91
86963: EQUAL
86964: IFFALSE 87036
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
86966: LD_INT 68
86968: PPUSH
86969: LD_VAR 0 1
86973: PPUSH
86974: CALL_OW 255
86978: PPUSH
86979: CALL_OW 321
86983: PUSH
86984: LD_INT 2
86986: EQUAL
86987: IFFALSE 86999
// eff := 70 else
86989: LD_ADDR_VAR 0 4
86993: PUSH
86994: LD_INT 70
86996: ST_TO_ADDR
86997: GO 87007
// eff := 30 ;
86999: LD_ADDR_VAR 0 4
87003: PUSH
87004: LD_INT 30
87006: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
87007: LD_VAR 0 1
87011: PPUSH
87012: CALL_OW 250
87016: PPUSH
87017: LD_VAR 0 1
87021: PPUSH
87022: CALL_OW 251
87026: PPUSH
87027: LD_VAR 0 4
87031: PPUSH
87032: CALL_OW 495
// end ; end ;
87036: LD_VAR 0 2
87040: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
87041: LD_INT 0
87043: PPUSH
// end ;
87044: LD_VAR 0 4
87048: RET
// export function SOS_Command ( cmd ) ; begin
87049: LD_INT 0
87051: PPUSH
// end ;
87052: LD_VAR 0 2
87056: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
87057: LD_INT 0
87059: PPUSH
// end ;
87060: LD_VAR 0 6
87064: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
87065: LD_INT 0
87067: PPUSH
87068: PPUSH
// if not vehicle or not factory then
87069: LD_VAR 0 1
87073: NOT
87074: PUSH
87075: LD_VAR 0 2
87079: NOT
87080: OR
87081: IFFALSE 87085
// exit ;
87083: GO 87316
// if factoryWaypoints >= factory then
87085: LD_EXP 122
87089: PUSH
87090: LD_VAR 0 2
87094: GREATEREQUAL
87095: IFFALSE 87316
// if factoryWaypoints [ factory ] then
87097: LD_EXP 122
87101: PUSH
87102: LD_VAR 0 2
87106: ARRAY
87107: IFFALSE 87316
// begin if GetControl ( vehicle ) = control_manual then
87109: LD_VAR 0 1
87113: PPUSH
87114: CALL_OW 263
87118: PUSH
87119: LD_INT 1
87121: EQUAL
87122: IFFALSE 87203
// begin driver := IsDrivenBy ( vehicle ) ;
87124: LD_ADDR_VAR 0 4
87128: PUSH
87129: LD_VAR 0 1
87133: PPUSH
87134: CALL_OW 311
87138: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87139: LD_VAR 0 4
87143: PPUSH
87144: LD_EXP 122
87148: PUSH
87149: LD_VAR 0 2
87153: ARRAY
87154: PUSH
87155: LD_INT 3
87157: ARRAY
87158: PPUSH
87159: LD_EXP 122
87163: PUSH
87164: LD_VAR 0 2
87168: ARRAY
87169: PUSH
87170: LD_INT 4
87172: ARRAY
87173: PPUSH
87174: CALL_OW 171
// AddComExitVehicle ( driver ) ;
87178: LD_VAR 0 4
87182: PPUSH
87183: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
87187: LD_VAR 0 4
87191: PPUSH
87192: LD_VAR 0 2
87196: PPUSH
87197: CALL_OW 180
// end else
87201: GO 87316
// if GetControl ( vehicle ) = control_remote then
87203: LD_VAR 0 1
87207: PPUSH
87208: CALL_OW 263
87212: PUSH
87213: LD_INT 2
87215: EQUAL
87216: IFFALSE 87277
// begin wait ( 0 0$2 ) ;
87218: LD_INT 70
87220: PPUSH
87221: CALL_OW 67
// if Connect ( vehicle ) then
87225: LD_VAR 0 1
87229: PPUSH
87230: CALL 37377 0 1
87234: IFFALSE 87275
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87236: LD_VAR 0 1
87240: PPUSH
87241: LD_EXP 122
87245: PUSH
87246: LD_VAR 0 2
87250: ARRAY
87251: PUSH
87252: LD_INT 3
87254: ARRAY
87255: PPUSH
87256: LD_EXP 122
87260: PUSH
87261: LD_VAR 0 2
87265: ARRAY
87266: PUSH
87267: LD_INT 4
87269: ARRAY
87270: PPUSH
87271: CALL_OW 171
// end else
87275: GO 87316
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87277: LD_VAR 0 1
87281: PPUSH
87282: LD_EXP 122
87286: PUSH
87287: LD_VAR 0 2
87291: ARRAY
87292: PUSH
87293: LD_INT 3
87295: ARRAY
87296: PPUSH
87297: LD_EXP 122
87301: PUSH
87302: LD_VAR 0 2
87306: ARRAY
87307: PUSH
87308: LD_INT 4
87310: ARRAY
87311: PPUSH
87312: CALL_OW 171
// end ; end ;
87316: LD_VAR 0 3
87320: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
87321: LD_INT 0
87323: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
87324: LD_VAR 0 1
87328: PUSH
87329: LD_INT 250
87331: EQUAL
87332: PUSH
87333: LD_VAR 0 2
87337: PPUSH
87338: CALL_OW 264
87342: PUSH
87343: LD_INT 81
87345: EQUAL
87346: AND
87347: IFFALSE 87368
// MinerPlaceMine ( unit , x , y ) ;
87349: LD_VAR 0 2
87353: PPUSH
87354: LD_VAR 0 4
87358: PPUSH
87359: LD_VAR 0 5
87363: PPUSH
87364: CALL 89753 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
87368: LD_VAR 0 1
87372: PUSH
87373: LD_INT 251
87375: EQUAL
87376: PUSH
87377: LD_VAR 0 2
87381: PPUSH
87382: CALL_OW 264
87386: PUSH
87387: LD_INT 81
87389: EQUAL
87390: AND
87391: IFFALSE 87412
// MinerDetonateMine ( unit , x , y ) ;
87393: LD_VAR 0 2
87397: PPUSH
87398: LD_VAR 0 4
87402: PPUSH
87403: LD_VAR 0 5
87407: PPUSH
87408: CALL 90028 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
87412: LD_VAR 0 1
87416: PUSH
87417: LD_INT 252
87419: EQUAL
87420: PUSH
87421: LD_VAR 0 2
87425: PPUSH
87426: CALL_OW 264
87430: PUSH
87431: LD_INT 81
87433: EQUAL
87434: AND
87435: IFFALSE 87456
// MinerCreateMinefield ( unit , x , y ) ;
87437: LD_VAR 0 2
87441: PPUSH
87442: LD_VAR 0 4
87446: PPUSH
87447: LD_VAR 0 5
87451: PPUSH
87452: CALL 90445 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
87456: LD_VAR 0 1
87460: PUSH
87461: LD_INT 253
87463: EQUAL
87464: PUSH
87465: LD_VAR 0 2
87469: PPUSH
87470: CALL_OW 257
87474: PUSH
87475: LD_INT 5
87477: EQUAL
87478: AND
87479: IFFALSE 87500
// ComBinocular ( unit , x , y ) ;
87481: LD_VAR 0 2
87485: PPUSH
87486: LD_VAR 0 4
87490: PPUSH
87491: LD_VAR 0 5
87495: PPUSH
87496: CALL 90814 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
87500: LD_VAR 0 1
87504: PUSH
87505: LD_INT 254
87507: EQUAL
87508: PUSH
87509: LD_VAR 0 2
87513: PPUSH
87514: CALL_OW 264
87518: PUSH
87519: LD_INT 99
87521: EQUAL
87522: AND
87523: PUSH
87524: LD_VAR 0 3
87528: PPUSH
87529: CALL_OW 263
87533: PUSH
87534: LD_INT 3
87536: EQUAL
87537: AND
87538: IFFALSE 87554
// HackDestroyVehicle ( unit , selectedUnit ) ;
87540: LD_VAR 0 2
87544: PPUSH
87545: LD_VAR 0 3
87549: PPUSH
87550: CALL 89117 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
87554: LD_VAR 0 1
87558: PUSH
87559: LD_INT 255
87561: EQUAL
87562: PUSH
87563: LD_VAR 0 2
87567: PPUSH
87568: CALL_OW 264
87572: PUSH
87573: LD_INT 14
87575: PUSH
87576: LD_INT 53
87578: PUSH
87579: EMPTY
87580: LIST
87581: LIST
87582: IN
87583: AND
87584: PUSH
87585: LD_VAR 0 4
87589: PPUSH
87590: LD_VAR 0 5
87594: PPUSH
87595: CALL_OW 488
87599: AND
87600: IFFALSE 87624
// CutTreeXYR ( unit , x , y , 12 ) ;
87602: LD_VAR 0 2
87606: PPUSH
87607: LD_VAR 0 4
87611: PPUSH
87612: LD_VAR 0 5
87616: PPUSH
87617: LD_INT 12
87619: PPUSH
87620: CALL 87687 0 4
// if cmd = 256 then
87624: LD_VAR 0 1
87628: PUSH
87629: LD_INT 256
87631: EQUAL
87632: IFFALSE 87653
// SetFactoryWaypoint ( unit , x , y ) ;
87634: LD_VAR 0 2
87638: PPUSH
87639: LD_VAR 0 4
87643: PPUSH
87644: LD_VAR 0 5
87648: PPUSH
87649: CALL 85471 0 3
// if cmd = 257 then
87653: LD_VAR 0 1
87657: PUSH
87658: LD_INT 257
87660: EQUAL
87661: IFFALSE 87682
// SetWarehouseGatheringPoint ( unit , x , y ) ;
87663: LD_VAR 0 2
87667: PPUSH
87668: LD_VAR 0 4
87672: PPUSH
87673: LD_VAR 0 5
87677: PPUSH
87678: CALL 85833 0 3
// end ;
87682: LD_VAR 0 6
87686: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
87687: LD_INT 0
87689: PPUSH
87690: PPUSH
87691: PPUSH
87692: PPUSH
87693: PPUSH
87694: PPUSH
87695: PPUSH
87696: PPUSH
87697: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
87698: LD_VAR 0 1
87702: NOT
87703: PUSH
87704: LD_VAR 0 2
87708: PPUSH
87709: LD_VAR 0 3
87713: PPUSH
87714: CALL_OW 488
87718: NOT
87719: OR
87720: PUSH
87721: LD_VAR 0 4
87725: NOT
87726: OR
87727: IFFALSE 87731
// exit ;
87729: GO 88071
// list := [ ] ;
87731: LD_ADDR_VAR 0 13
87735: PUSH
87736: EMPTY
87737: ST_TO_ADDR
// if x - r < 0 then
87738: LD_VAR 0 2
87742: PUSH
87743: LD_VAR 0 4
87747: MINUS
87748: PUSH
87749: LD_INT 0
87751: LESS
87752: IFFALSE 87764
// min_x := 0 else
87754: LD_ADDR_VAR 0 7
87758: PUSH
87759: LD_INT 0
87761: ST_TO_ADDR
87762: GO 87780
// min_x := x - r ;
87764: LD_ADDR_VAR 0 7
87768: PUSH
87769: LD_VAR 0 2
87773: PUSH
87774: LD_VAR 0 4
87778: MINUS
87779: ST_TO_ADDR
// if y - r < 0 then
87780: LD_VAR 0 3
87784: PUSH
87785: LD_VAR 0 4
87789: MINUS
87790: PUSH
87791: LD_INT 0
87793: LESS
87794: IFFALSE 87806
// min_y := 0 else
87796: LD_ADDR_VAR 0 8
87800: PUSH
87801: LD_INT 0
87803: ST_TO_ADDR
87804: GO 87822
// min_y := y - r ;
87806: LD_ADDR_VAR 0 8
87810: PUSH
87811: LD_VAR 0 3
87815: PUSH
87816: LD_VAR 0 4
87820: MINUS
87821: ST_TO_ADDR
// max_x := x + r ;
87822: LD_ADDR_VAR 0 9
87826: PUSH
87827: LD_VAR 0 2
87831: PUSH
87832: LD_VAR 0 4
87836: PLUS
87837: ST_TO_ADDR
// max_y := y + r ;
87838: LD_ADDR_VAR 0 10
87842: PUSH
87843: LD_VAR 0 3
87847: PUSH
87848: LD_VAR 0 4
87852: PLUS
87853: ST_TO_ADDR
// for _x = min_x to max_x do
87854: LD_ADDR_VAR 0 11
87858: PUSH
87859: DOUBLE
87860: LD_VAR 0 7
87864: DEC
87865: ST_TO_ADDR
87866: LD_VAR 0 9
87870: PUSH
87871: FOR_TO
87872: IFFALSE 87989
// for _y = min_y to max_y do
87874: LD_ADDR_VAR 0 12
87878: PUSH
87879: DOUBLE
87880: LD_VAR 0 8
87884: DEC
87885: ST_TO_ADDR
87886: LD_VAR 0 10
87890: PUSH
87891: FOR_TO
87892: IFFALSE 87985
// begin if not ValidHex ( _x , _y ) then
87894: LD_VAR 0 11
87898: PPUSH
87899: LD_VAR 0 12
87903: PPUSH
87904: CALL_OW 488
87908: NOT
87909: IFFALSE 87913
// continue ;
87911: GO 87891
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
87913: LD_VAR 0 11
87917: PPUSH
87918: LD_VAR 0 12
87922: PPUSH
87923: CALL_OW 351
87927: PUSH
87928: LD_VAR 0 11
87932: PPUSH
87933: LD_VAR 0 12
87937: PPUSH
87938: CALL_OW 554
87942: AND
87943: IFFALSE 87983
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
87945: LD_ADDR_VAR 0 13
87949: PUSH
87950: LD_VAR 0 13
87954: PPUSH
87955: LD_VAR 0 13
87959: PUSH
87960: LD_INT 1
87962: PLUS
87963: PPUSH
87964: LD_VAR 0 11
87968: PUSH
87969: LD_VAR 0 12
87973: PUSH
87974: EMPTY
87975: LIST
87976: LIST
87977: PPUSH
87978: CALL_OW 2
87982: ST_TO_ADDR
// end ;
87983: GO 87891
87985: POP
87986: POP
87987: GO 87871
87989: POP
87990: POP
// if not list then
87991: LD_VAR 0 13
87995: NOT
87996: IFFALSE 88000
// exit ;
87998: GO 88071
// for i in list do
88000: LD_ADDR_VAR 0 6
88004: PUSH
88005: LD_VAR 0 13
88009: PUSH
88010: FOR_IN
88011: IFFALSE 88069
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
88013: LD_VAR 0 1
88017: PPUSH
88018: LD_STRING M
88020: PUSH
88021: LD_VAR 0 6
88025: PUSH
88026: LD_INT 1
88028: ARRAY
88029: PUSH
88030: LD_VAR 0 6
88034: PUSH
88035: LD_INT 2
88037: ARRAY
88038: PUSH
88039: LD_INT 0
88041: PUSH
88042: LD_INT 0
88044: PUSH
88045: LD_INT 0
88047: PUSH
88048: LD_INT 0
88050: PUSH
88051: EMPTY
88052: LIST
88053: LIST
88054: LIST
88055: LIST
88056: LIST
88057: LIST
88058: LIST
88059: PUSH
88060: EMPTY
88061: LIST
88062: PPUSH
88063: CALL_OW 447
88067: GO 88010
88069: POP
88070: POP
// end ;
88071: LD_VAR 0 5
88075: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
88076: LD_EXP 125
88080: NOT
88081: IFFALSE 88131
88083: GO 88085
88085: DISABLE
// begin initHack := true ;
88086: LD_ADDR_EXP 125
88090: PUSH
88091: LD_INT 1
88093: ST_TO_ADDR
// hackTanks := [ ] ;
88094: LD_ADDR_EXP 126
88098: PUSH
88099: EMPTY
88100: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
88101: LD_ADDR_EXP 127
88105: PUSH
88106: EMPTY
88107: ST_TO_ADDR
// hackLimit := 3 ;
88108: LD_ADDR_EXP 128
88112: PUSH
88113: LD_INT 3
88115: ST_TO_ADDR
// hackDist := 12 ;
88116: LD_ADDR_EXP 129
88120: PUSH
88121: LD_INT 12
88123: ST_TO_ADDR
// hackCounter := [ ] ;
88124: LD_ADDR_EXP 130
88128: PUSH
88129: EMPTY
88130: ST_TO_ADDR
// end ;
88131: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
88132: LD_EXP 125
88136: PUSH
88137: LD_INT 34
88139: PUSH
88140: LD_INT 99
88142: PUSH
88143: EMPTY
88144: LIST
88145: LIST
88146: PPUSH
88147: CALL_OW 69
88151: AND
88152: IFFALSE 88405
88154: GO 88156
88156: DISABLE
88157: LD_INT 0
88159: PPUSH
88160: PPUSH
// begin enable ;
88161: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
88162: LD_ADDR_VAR 0 1
88166: PUSH
88167: LD_INT 34
88169: PUSH
88170: LD_INT 99
88172: PUSH
88173: EMPTY
88174: LIST
88175: LIST
88176: PPUSH
88177: CALL_OW 69
88181: PUSH
88182: FOR_IN
88183: IFFALSE 88403
// begin if not i in hackTanks then
88185: LD_VAR 0 1
88189: PUSH
88190: LD_EXP 126
88194: IN
88195: NOT
88196: IFFALSE 88279
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
88198: LD_ADDR_EXP 126
88202: PUSH
88203: LD_EXP 126
88207: PPUSH
88208: LD_EXP 126
88212: PUSH
88213: LD_INT 1
88215: PLUS
88216: PPUSH
88217: LD_VAR 0 1
88221: PPUSH
88222: CALL_OW 1
88226: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
88227: LD_ADDR_EXP 127
88231: PUSH
88232: LD_EXP 127
88236: PPUSH
88237: LD_EXP 127
88241: PUSH
88242: LD_INT 1
88244: PLUS
88245: PPUSH
88246: EMPTY
88247: PPUSH
88248: CALL_OW 1
88252: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
88253: LD_ADDR_EXP 130
88257: PUSH
88258: LD_EXP 130
88262: PPUSH
88263: LD_EXP 130
88267: PUSH
88268: LD_INT 1
88270: PLUS
88271: PPUSH
88272: EMPTY
88273: PPUSH
88274: CALL_OW 1
88278: ST_TO_ADDR
// end ; if not IsOk ( i ) then
88279: LD_VAR 0 1
88283: PPUSH
88284: CALL_OW 302
88288: NOT
88289: IFFALSE 88302
// begin HackUnlinkAll ( i ) ;
88291: LD_VAR 0 1
88295: PPUSH
88296: CALL 88408 0 1
// continue ;
88300: GO 88182
// end ; HackCheckCapturedStatus ( i ) ;
88302: LD_VAR 0 1
88306: PPUSH
88307: CALL 88851 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
88311: LD_ADDR_VAR 0 2
88315: PUSH
88316: LD_INT 81
88318: PUSH
88319: LD_VAR 0 1
88323: PPUSH
88324: CALL_OW 255
88328: PUSH
88329: EMPTY
88330: LIST
88331: LIST
88332: PUSH
88333: LD_INT 33
88335: PUSH
88336: LD_INT 3
88338: PUSH
88339: EMPTY
88340: LIST
88341: LIST
88342: PUSH
88343: LD_INT 91
88345: PUSH
88346: LD_VAR 0 1
88350: PUSH
88351: LD_EXP 129
88355: PUSH
88356: EMPTY
88357: LIST
88358: LIST
88359: LIST
88360: PUSH
88361: LD_INT 50
88363: PUSH
88364: EMPTY
88365: LIST
88366: PUSH
88367: EMPTY
88368: LIST
88369: LIST
88370: LIST
88371: LIST
88372: PPUSH
88373: CALL_OW 69
88377: ST_TO_ADDR
// if not tmp then
88378: LD_VAR 0 2
88382: NOT
88383: IFFALSE 88387
// continue ;
88385: GO 88182
// HackLink ( i , tmp ) ;
88387: LD_VAR 0 1
88391: PPUSH
88392: LD_VAR 0 2
88396: PPUSH
88397: CALL 88544 0 2
// end ;
88401: GO 88182
88403: POP
88404: POP
// end ;
88405: PPOPN 2
88407: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
88408: LD_INT 0
88410: PPUSH
88411: PPUSH
88412: PPUSH
// if not hack in hackTanks then
88413: LD_VAR 0 1
88417: PUSH
88418: LD_EXP 126
88422: IN
88423: NOT
88424: IFFALSE 88428
// exit ;
88426: GO 88539
// index := GetElementIndex ( hackTanks , hack ) ;
88428: LD_ADDR_VAR 0 4
88432: PUSH
88433: LD_EXP 126
88437: PPUSH
88438: LD_VAR 0 1
88442: PPUSH
88443: CALL 34184 0 2
88447: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
88448: LD_EXP 127
88452: PUSH
88453: LD_VAR 0 4
88457: ARRAY
88458: IFFALSE 88539
// begin for i in hackTanksCaptured [ index ] do
88460: LD_ADDR_VAR 0 3
88464: PUSH
88465: LD_EXP 127
88469: PUSH
88470: LD_VAR 0 4
88474: ARRAY
88475: PUSH
88476: FOR_IN
88477: IFFALSE 88503
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
88479: LD_VAR 0 3
88483: PUSH
88484: LD_INT 1
88486: ARRAY
88487: PPUSH
88488: LD_VAR 0 3
88492: PUSH
88493: LD_INT 2
88495: ARRAY
88496: PPUSH
88497: CALL_OW 235
88501: GO 88476
88503: POP
88504: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
88505: LD_ADDR_EXP 127
88509: PUSH
88510: LD_EXP 127
88514: PPUSH
88515: LD_VAR 0 4
88519: PPUSH
88520: EMPTY
88521: PPUSH
88522: CALL_OW 1
88526: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
88527: LD_VAR 0 1
88531: PPUSH
88532: LD_INT 0
88534: PPUSH
88535: CALL_OW 505
// end ; end ;
88539: LD_VAR 0 2
88543: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
88544: LD_INT 0
88546: PPUSH
88547: PPUSH
88548: PPUSH
// if not hack in hackTanks or not vehicles then
88549: LD_VAR 0 1
88553: PUSH
88554: LD_EXP 126
88558: IN
88559: NOT
88560: PUSH
88561: LD_VAR 0 2
88565: NOT
88566: OR
88567: IFFALSE 88571
// exit ;
88569: GO 88846
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
88571: LD_ADDR_VAR 0 2
88575: PUSH
88576: LD_VAR 0 1
88580: PPUSH
88581: LD_VAR 0 2
88585: PPUSH
88586: LD_INT 1
88588: PPUSH
88589: LD_INT 1
88591: PPUSH
88592: CALL 34834 0 4
88596: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
88597: LD_ADDR_VAR 0 5
88601: PUSH
88602: LD_EXP 126
88606: PPUSH
88607: LD_VAR 0 1
88611: PPUSH
88612: CALL 34184 0 2
88616: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
88617: LD_EXP 127
88621: PUSH
88622: LD_VAR 0 5
88626: ARRAY
88627: PUSH
88628: LD_EXP 128
88632: LESS
88633: IFFALSE 88822
// begin for i := 1 to vehicles do
88635: LD_ADDR_VAR 0 4
88639: PUSH
88640: DOUBLE
88641: LD_INT 1
88643: DEC
88644: ST_TO_ADDR
88645: LD_VAR 0 2
88649: PUSH
88650: FOR_TO
88651: IFFALSE 88820
// begin if hackTanksCaptured [ index ] = hackLimit then
88653: LD_EXP 127
88657: PUSH
88658: LD_VAR 0 5
88662: ARRAY
88663: PUSH
88664: LD_EXP 128
88668: EQUAL
88669: IFFALSE 88673
// break ;
88671: GO 88820
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
88673: LD_ADDR_EXP 130
88677: PUSH
88678: LD_EXP 130
88682: PPUSH
88683: LD_VAR 0 5
88687: PPUSH
88688: LD_EXP 130
88692: PUSH
88693: LD_VAR 0 5
88697: ARRAY
88698: PUSH
88699: LD_INT 1
88701: PLUS
88702: PPUSH
88703: CALL_OW 1
88707: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
88708: LD_ADDR_EXP 127
88712: PUSH
88713: LD_EXP 127
88717: PPUSH
88718: LD_VAR 0 5
88722: PUSH
88723: LD_EXP 127
88727: PUSH
88728: LD_VAR 0 5
88732: ARRAY
88733: PUSH
88734: LD_INT 1
88736: PLUS
88737: PUSH
88738: EMPTY
88739: LIST
88740: LIST
88741: PPUSH
88742: LD_VAR 0 2
88746: PUSH
88747: LD_VAR 0 4
88751: ARRAY
88752: PUSH
88753: LD_VAR 0 2
88757: PUSH
88758: LD_VAR 0 4
88762: ARRAY
88763: PPUSH
88764: CALL_OW 255
88768: PUSH
88769: EMPTY
88770: LIST
88771: LIST
88772: PPUSH
88773: CALL 34399 0 3
88777: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
88778: LD_VAR 0 2
88782: PUSH
88783: LD_VAR 0 4
88787: ARRAY
88788: PPUSH
88789: LD_VAR 0 1
88793: PPUSH
88794: CALL_OW 255
88798: PPUSH
88799: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
88803: LD_VAR 0 2
88807: PUSH
88808: LD_VAR 0 4
88812: ARRAY
88813: PPUSH
88814: CALL_OW 141
// end ;
88818: GO 88650
88820: POP
88821: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
88822: LD_VAR 0 1
88826: PPUSH
88827: LD_EXP 127
88831: PUSH
88832: LD_VAR 0 5
88836: ARRAY
88837: PUSH
88838: LD_INT 0
88840: PLUS
88841: PPUSH
88842: CALL_OW 505
// end ;
88846: LD_VAR 0 3
88850: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
88851: LD_INT 0
88853: PPUSH
88854: PPUSH
88855: PPUSH
88856: PPUSH
// if not hack in hackTanks then
88857: LD_VAR 0 1
88861: PUSH
88862: LD_EXP 126
88866: IN
88867: NOT
88868: IFFALSE 88872
// exit ;
88870: GO 89112
// index := GetElementIndex ( hackTanks , hack ) ;
88872: LD_ADDR_VAR 0 4
88876: PUSH
88877: LD_EXP 126
88881: PPUSH
88882: LD_VAR 0 1
88886: PPUSH
88887: CALL 34184 0 2
88891: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
88892: LD_ADDR_VAR 0 3
88896: PUSH
88897: DOUBLE
88898: LD_EXP 127
88902: PUSH
88903: LD_VAR 0 4
88907: ARRAY
88908: INC
88909: ST_TO_ADDR
88910: LD_INT 1
88912: PUSH
88913: FOR_DOWNTO
88914: IFFALSE 89086
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
88916: LD_ADDR_VAR 0 5
88920: PUSH
88921: LD_EXP 127
88925: PUSH
88926: LD_VAR 0 4
88930: ARRAY
88931: PUSH
88932: LD_VAR 0 3
88936: ARRAY
88937: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
88938: LD_VAR 0 5
88942: PUSH
88943: LD_INT 1
88945: ARRAY
88946: PPUSH
88947: CALL_OW 302
88951: NOT
88952: PUSH
88953: LD_VAR 0 5
88957: PUSH
88958: LD_INT 1
88960: ARRAY
88961: PPUSH
88962: CALL_OW 255
88966: PUSH
88967: LD_VAR 0 1
88971: PPUSH
88972: CALL_OW 255
88976: NONEQUAL
88977: OR
88978: IFFALSE 89084
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
88980: LD_VAR 0 5
88984: PUSH
88985: LD_INT 1
88987: ARRAY
88988: PPUSH
88989: CALL_OW 305
88993: PUSH
88994: LD_VAR 0 5
88998: PUSH
88999: LD_INT 1
89001: ARRAY
89002: PPUSH
89003: CALL_OW 255
89007: PUSH
89008: LD_VAR 0 1
89012: PPUSH
89013: CALL_OW 255
89017: EQUAL
89018: AND
89019: IFFALSE 89043
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
89021: LD_VAR 0 5
89025: PUSH
89026: LD_INT 1
89028: ARRAY
89029: PPUSH
89030: LD_VAR 0 5
89034: PUSH
89035: LD_INT 2
89037: ARRAY
89038: PPUSH
89039: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
89043: LD_ADDR_EXP 127
89047: PUSH
89048: LD_EXP 127
89052: PPUSH
89053: LD_VAR 0 4
89057: PPUSH
89058: LD_EXP 127
89062: PUSH
89063: LD_VAR 0 4
89067: ARRAY
89068: PPUSH
89069: LD_VAR 0 3
89073: PPUSH
89074: CALL_OW 3
89078: PPUSH
89079: CALL_OW 1
89083: ST_TO_ADDR
// end ; end ;
89084: GO 88913
89086: POP
89087: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
89088: LD_VAR 0 1
89092: PPUSH
89093: LD_EXP 127
89097: PUSH
89098: LD_VAR 0 4
89102: ARRAY
89103: PUSH
89104: LD_INT 0
89106: PLUS
89107: PPUSH
89108: CALL_OW 505
// end ;
89112: LD_VAR 0 2
89116: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
89117: LD_INT 0
89119: PPUSH
89120: PPUSH
89121: PPUSH
89122: PPUSH
// if not hack in hackTanks then
89123: LD_VAR 0 1
89127: PUSH
89128: LD_EXP 126
89132: IN
89133: NOT
89134: IFFALSE 89138
// exit ;
89136: GO 89223
// index := GetElementIndex ( hackTanks , hack ) ;
89138: LD_ADDR_VAR 0 5
89142: PUSH
89143: LD_EXP 126
89147: PPUSH
89148: LD_VAR 0 1
89152: PPUSH
89153: CALL 34184 0 2
89157: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
89158: LD_ADDR_VAR 0 4
89162: PUSH
89163: DOUBLE
89164: LD_INT 1
89166: DEC
89167: ST_TO_ADDR
89168: LD_EXP 127
89172: PUSH
89173: LD_VAR 0 5
89177: ARRAY
89178: PUSH
89179: FOR_TO
89180: IFFALSE 89221
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
89182: LD_EXP 127
89186: PUSH
89187: LD_VAR 0 5
89191: ARRAY
89192: PUSH
89193: LD_VAR 0 4
89197: ARRAY
89198: PUSH
89199: LD_INT 1
89201: ARRAY
89202: PUSH
89203: LD_VAR 0 2
89207: EQUAL
89208: IFFALSE 89219
// KillUnit ( vehicle ) ;
89210: LD_VAR 0 2
89214: PPUSH
89215: CALL_OW 66
89219: GO 89179
89221: POP
89222: POP
// end ;
89223: LD_VAR 0 3
89227: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
89228: LD_EXP 131
89232: NOT
89233: IFFALSE 89268
89235: GO 89237
89237: DISABLE
// begin initMiner := true ;
89238: LD_ADDR_EXP 131
89242: PUSH
89243: LD_INT 1
89245: ST_TO_ADDR
// minersList := [ ] ;
89246: LD_ADDR_EXP 132
89250: PUSH
89251: EMPTY
89252: ST_TO_ADDR
// minerMinesList := [ ] ;
89253: LD_ADDR_EXP 133
89257: PUSH
89258: EMPTY
89259: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
89260: LD_ADDR_EXP 134
89264: PUSH
89265: LD_INT 5
89267: ST_TO_ADDR
// end ;
89268: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
89269: LD_EXP 131
89273: PUSH
89274: LD_INT 34
89276: PUSH
89277: LD_INT 81
89279: PUSH
89280: EMPTY
89281: LIST
89282: LIST
89283: PPUSH
89284: CALL_OW 69
89288: AND
89289: IFFALSE 89750
89291: GO 89293
89293: DISABLE
89294: LD_INT 0
89296: PPUSH
89297: PPUSH
89298: PPUSH
89299: PPUSH
// begin enable ;
89300: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
89301: LD_ADDR_VAR 0 1
89305: PUSH
89306: LD_INT 34
89308: PUSH
89309: LD_INT 81
89311: PUSH
89312: EMPTY
89313: LIST
89314: LIST
89315: PPUSH
89316: CALL_OW 69
89320: PUSH
89321: FOR_IN
89322: IFFALSE 89394
// begin if not i in minersList then
89324: LD_VAR 0 1
89328: PUSH
89329: LD_EXP 132
89333: IN
89334: NOT
89335: IFFALSE 89392
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
89337: LD_ADDR_EXP 132
89341: PUSH
89342: LD_EXP 132
89346: PPUSH
89347: LD_EXP 132
89351: PUSH
89352: LD_INT 1
89354: PLUS
89355: PPUSH
89356: LD_VAR 0 1
89360: PPUSH
89361: CALL_OW 1
89365: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
89366: LD_ADDR_EXP 133
89370: PUSH
89371: LD_EXP 133
89375: PPUSH
89376: LD_EXP 133
89380: PUSH
89381: LD_INT 1
89383: PLUS
89384: PPUSH
89385: EMPTY
89386: PPUSH
89387: CALL_OW 1
89391: ST_TO_ADDR
// end end ;
89392: GO 89321
89394: POP
89395: POP
// for i := minerMinesList downto 1 do
89396: LD_ADDR_VAR 0 1
89400: PUSH
89401: DOUBLE
89402: LD_EXP 133
89406: INC
89407: ST_TO_ADDR
89408: LD_INT 1
89410: PUSH
89411: FOR_DOWNTO
89412: IFFALSE 89748
// begin if IsLive ( minersList [ i ] ) then
89414: LD_EXP 132
89418: PUSH
89419: LD_VAR 0 1
89423: ARRAY
89424: PPUSH
89425: CALL_OW 300
89429: IFFALSE 89457
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
89431: LD_EXP 132
89435: PUSH
89436: LD_VAR 0 1
89440: ARRAY
89441: PPUSH
89442: LD_EXP 133
89446: PUSH
89447: LD_VAR 0 1
89451: ARRAY
89452: PPUSH
89453: CALL_OW 505
// if not minerMinesList [ i ] then
89457: LD_EXP 133
89461: PUSH
89462: LD_VAR 0 1
89466: ARRAY
89467: NOT
89468: IFFALSE 89472
// continue ;
89470: GO 89411
// for j := minerMinesList [ i ] downto 1 do
89472: LD_ADDR_VAR 0 2
89476: PUSH
89477: DOUBLE
89478: LD_EXP 133
89482: PUSH
89483: LD_VAR 0 1
89487: ARRAY
89488: INC
89489: ST_TO_ADDR
89490: LD_INT 1
89492: PUSH
89493: FOR_DOWNTO
89494: IFFALSE 89744
// begin side := GetSide ( minersList [ i ] ) ;
89496: LD_ADDR_VAR 0 3
89500: PUSH
89501: LD_EXP 132
89505: PUSH
89506: LD_VAR 0 1
89510: ARRAY
89511: PPUSH
89512: CALL_OW 255
89516: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
89517: LD_ADDR_VAR 0 4
89521: PUSH
89522: LD_EXP 133
89526: PUSH
89527: LD_VAR 0 1
89531: ARRAY
89532: PUSH
89533: LD_VAR 0 2
89537: ARRAY
89538: PUSH
89539: LD_INT 1
89541: ARRAY
89542: PPUSH
89543: LD_EXP 133
89547: PUSH
89548: LD_VAR 0 1
89552: ARRAY
89553: PUSH
89554: LD_VAR 0 2
89558: ARRAY
89559: PUSH
89560: LD_INT 2
89562: ARRAY
89563: PPUSH
89564: CALL_OW 428
89568: ST_TO_ADDR
// if not tmp then
89569: LD_VAR 0 4
89573: NOT
89574: IFFALSE 89578
// continue ;
89576: GO 89493
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
89578: LD_VAR 0 4
89582: PUSH
89583: LD_INT 81
89585: PUSH
89586: LD_VAR 0 3
89590: PUSH
89591: EMPTY
89592: LIST
89593: LIST
89594: PPUSH
89595: CALL_OW 69
89599: IN
89600: PUSH
89601: LD_EXP 133
89605: PUSH
89606: LD_VAR 0 1
89610: ARRAY
89611: PUSH
89612: LD_VAR 0 2
89616: ARRAY
89617: PUSH
89618: LD_INT 1
89620: ARRAY
89621: PPUSH
89622: LD_EXP 133
89626: PUSH
89627: LD_VAR 0 1
89631: ARRAY
89632: PUSH
89633: LD_VAR 0 2
89637: ARRAY
89638: PUSH
89639: LD_INT 2
89641: ARRAY
89642: PPUSH
89643: CALL_OW 458
89647: AND
89648: IFFALSE 89742
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
89650: LD_EXP 133
89654: PUSH
89655: LD_VAR 0 1
89659: ARRAY
89660: PUSH
89661: LD_VAR 0 2
89665: ARRAY
89666: PUSH
89667: LD_INT 1
89669: ARRAY
89670: PPUSH
89671: LD_EXP 133
89675: PUSH
89676: LD_VAR 0 1
89680: ARRAY
89681: PUSH
89682: LD_VAR 0 2
89686: ARRAY
89687: PUSH
89688: LD_INT 2
89690: ARRAY
89691: PPUSH
89692: LD_VAR 0 3
89696: PPUSH
89697: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
89701: LD_ADDR_EXP 133
89705: PUSH
89706: LD_EXP 133
89710: PPUSH
89711: LD_VAR 0 1
89715: PPUSH
89716: LD_EXP 133
89720: PUSH
89721: LD_VAR 0 1
89725: ARRAY
89726: PPUSH
89727: LD_VAR 0 2
89731: PPUSH
89732: CALL_OW 3
89736: PPUSH
89737: CALL_OW 1
89741: ST_TO_ADDR
// end ; end ;
89742: GO 89493
89744: POP
89745: POP
// end ;
89746: GO 89411
89748: POP
89749: POP
// end ;
89750: PPOPN 4
89752: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
89753: LD_INT 0
89755: PPUSH
89756: PPUSH
// result := false ;
89757: LD_ADDR_VAR 0 4
89761: PUSH
89762: LD_INT 0
89764: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
89765: LD_VAR 0 1
89769: PPUSH
89770: CALL_OW 264
89774: PUSH
89775: LD_INT 81
89777: EQUAL
89778: NOT
89779: IFFALSE 89783
// exit ;
89781: GO 90023
// index := GetElementIndex ( minersList , unit ) ;
89783: LD_ADDR_VAR 0 5
89787: PUSH
89788: LD_EXP 132
89792: PPUSH
89793: LD_VAR 0 1
89797: PPUSH
89798: CALL 34184 0 2
89802: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
89803: LD_EXP 133
89807: PUSH
89808: LD_VAR 0 5
89812: ARRAY
89813: PUSH
89814: LD_EXP 134
89818: GREATEREQUAL
89819: IFFALSE 89823
// exit ;
89821: GO 90023
// ComMoveXY ( unit , x , y ) ;
89823: LD_VAR 0 1
89827: PPUSH
89828: LD_VAR 0 2
89832: PPUSH
89833: LD_VAR 0 3
89837: PPUSH
89838: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
89842: LD_INT 35
89844: PPUSH
89845: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
89849: LD_VAR 0 1
89853: PPUSH
89854: LD_VAR 0 2
89858: PPUSH
89859: LD_VAR 0 3
89863: PPUSH
89864: CALL 65568 0 3
89868: NOT
89869: PUSH
89870: LD_VAR 0 1
89874: PPUSH
89875: CALL_OW 314
89879: AND
89880: IFFALSE 89884
// exit ;
89882: GO 90023
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
89884: LD_VAR 0 2
89888: PPUSH
89889: LD_VAR 0 3
89893: PPUSH
89894: CALL_OW 428
89898: PUSH
89899: LD_VAR 0 1
89903: EQUAL
89904: PUSH
89905: LD_VAR 0 1
89909: PPUSH
89910: CALL_OW 314
89914: NOT
89915: AND
89916: IFFALSE 89842
// PlaySoundXY ( x , y , PlantMine ) ;
89918: LD_VAR 0 2
89922: PPUSH
89923: LD_VAR 0 3
89927: PPUSH
89928: LD_STRING PlantMine
89930: PPUSH
89931: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
89935: LD_VAR 0 2
89939: PPUSH
89940: LD_VAR 0 3
89944: PPUSH
89945: LD_VAR 0 1
89949: PPUSH
89950: CALL_OW 255
89954: PPUSH
89955: LD_INT 0
89957: PPUSH
89958: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
89962: LD_ADDR_EXP 133
89966: PUSH
89967: LD_EXP 133
89971: PPUSH
89972: LD_VAR 0 5
89976: PUSH
89977: LD_EXP 133
89981: PUSH
89982: LD_VAR 0 5
89986: ARRAY
89987: PUSH
89988: LD_INT 1
89990: PLUS
89991: PUSH
89992: EMPTY
89993: LIST
89994: LIST
89995: PPUSH
89996: LD_VAR 0 2
90000: PUSH
90001: LD_VAR 0 3
90005: PUSH
90006: EMPTY
90007: LIST
90008: LIST
90009: PPUSH
90010: CALL 34399 0 3
90014: ST_TO_ADDR
// result := true ;
90015: LD_ADDR_VAR 0 4
90019: PUSH
90020: LD_INT 1
90022: ST_TO_ADDR
// end ;
90023: LD_VAR 0 4
90027: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
90028: LD_INT 0
90030: PPUSH
90031: PPUSH
90032: PPUSH
// if not unit in minersList then
90033: LD_VAR 0 1
90037: PUSH
90038: LD_EXP 132
90042: IN
90043: NOT
90044: IFFALSE 90048
// exit ;
90046: GO 90440
// index := GetElementIndex ( minersList , unit ) ;
90048: LD_ADDR_VAR 0 6
90052: PUSH
90053: LD_EXP 132
90057: PPUSH
90058: LD_VAR 0 1
90062: PPUSH
90063: CALL 34184 0 2
90067: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
90068: LD_ADDR_VAR 0 5
90072: PUSH
90073: DOUBLE
90074: LD_EXP 133
90078: PUSH
90079: LD_VAR 0 6
90083: ARRAY
90084: INC
90085: ST_TO_ADDR
90086: LD_INT 1
90088: PUSH
90089: FOR_DOWNTO
90090: IFFALSE 90251
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
90092: LD_EXP 133
90096: PUSH
90097: LD_VAR 0 6
90101: ARRAY
90102: PUSH
90103: LD_VAR 0 5
90107: ARRAY
90108: PUSH
90109: LD_INT 1
90111: ARRAY
90112: PUSH
90113: LD_VAR 0 2
90117: EQUAL
90118: PUSH
90119: LD_EXP 133
90123: PUSH
90124: LD_VAR 0 6
90128: ARRAY
90129: PUSH
90130: LD_VAR 0 5
90134: ARRAY
90135: PUSH
90136: LD_INT 2
90138: ARRAY
90139: PUSH
90140: LD_VAR 0 3
90144: EQUAL
90145: AND
90146: IFFALSE 90249
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
90148: LD_EXP 133
90152: PUSH
90153: LD_VAR 0 6
90157: ARRAY
90158: PUSH
90159: LD_VAR 0 5
90163: ARRAY
90164: PUSH
90165: LD_INT 1
90167: ARRAY
90168: PPUSH
90169: LD_EXP 133
90173: PUSH
90174: LD_VAR 0 6
90178: ARRAY
90179: PUSH
90180: LD_VAR 0 5
90184: ARRAY
90185: PUSH
90186: LD_INT 2
90188: ARRAY
90189: PPUSH
90190: LD_VAR 0 1
90194: PPUSH
90195: CALL_OW 255
90199: PPUSH
90200: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
90204: LD_ADDR_EXP 133
90208: PUSH
90209: LD_EXP 133
90213: PPUSH
90214: LD_VAR 0 6
90218: PPUSH
90219: LD_EXP 133
90223: PUSH
90224: LD_VAR 0 6
90228: ARRAY
90229: PPUSH
90230: LD_VAR 0 5
90234: PPUSH
90235: CALL_OW 3
90239: PPUSH
90240: CALL_OW 1
90244: ST_TO_ADDR
// exit ;
90245: POP
90246: POP
90247: GO 90440
// end ; end ;
90249: GO 90089
90251: POP
90252: POP
// for i := minerMinesList [ index ] downto 1 do
90253: LD_ADDR_VAR 0 5
90257: PUSH
90258: DOUBLE
90259: LD_EXP 133
90263: PUSH
90264: LD_VAR 0 6
90268: ARRAY
90269: INC
90270: ST_TO_ADDR
90271: LD_INT 1
90273: PUSH
90274: FOR_DOWNTO
90275: IFFALSE 90438
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
90277: LD_EXP 133
90281: PUSH
90282: LD_VAR 0 6
90286: ARRAY
90287: PUSH
90288: LD_VAR 0 5
90292: ARRAY
90293: PUSH
90294: LD_INT 1
90296: ARRAY
90297: PPUSH
90298: LD_EXP 133
90302: PUSH
90303: LD_VAR 0 6
90307: ARRAY
90308: PUSH
90309: LD_VAR 0 5
90313: ARRAY
90314: PUSH
90315: LD_INT 2
90317: ARRAY
90318: PPUSH
90319: LD_VAR 0 2
90323: PPUSH
90324: LD_VAR 0 3
90328: PPUSH
90329: CALL_OW 298
90333: PUSH
90334: LD_INT 6
90336: LESS
90337: IFFALSE 90436
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
90339: LD_EXP 133
90343: PUSH
90344: LD_VAR 0 6
90348: ARRAY
90349: PUSH
90350: LD_VAR 0 5
90354: ARRAY
90355: PUSH
90356: LD_INT 1
90358: ARRAY
90359: PPUSH
90360: LD_EXP 133
90364: PUSH
90365: LD_VAR 0 6
90369: ARRAY
90370: PUSH
90371: LD_VAR 0 5
90375: ARRAY
90376: PUSH
90377: LD_INT 2
90379: ARRAY
90380: PPUSH
90381: LD_VAR 0 1
90385: PPUSH
90386: CALL_OW 255
90390: PPUSH
90391: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
90395: LD_ADDR_EXP 133
90399: PUSH
90400: LD_EXP 133
90404: PPUSH
90405: LD_VAR 0 6
90409: PPUSH
90410: LD_EXP 133
90414: PUSH
90415: LD_VAR 0 6
90419: ARRAY
90420: PPUSH
90421: LD_VAR 0 5
90425: PPUSH
90426: CALL_OW 3
90430: PPUSH
90431: CALL_OW 1
90435: ST_TO_ADDR
// end ; end ;
90436: GO 90274
90438: POP
90439: POP
// end ;
90440: LD_VAR 0 4
90444: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
90445: LD_INT 0
90447: PPUSH
90448: PPUSH
90449: PPUSH
90450: PPUSH
90451: PPUSH
90452: PPUSH
90453: PPUSH
90454: PPUSH
90455: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
90456: LD_VAR 0 1
90460: PPUSH
90461: CALL_OW 264
90465: PUSH
90466: LD_INT 81
90468: EQUAL
90469: NOT
90470: PUSH
90471: LD_VAR 0 1
90475: PUSH
90476: LD_EXP 132
90480: IN
90481: NOT
90482: OR
90483: IFFALSE 90487
// exit ;
90485: GO 90809
// index := GetElementIndex ( minersList , unit ) ;
90487: LD_ADDR_VAR 0 6
90491: PUSH
90492: LD_EXP 132
90496: PPUSH
90497: LD_VAR 0 1
90501: PPUSH
90502: CALL 34184 0 2
90506: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
90507: LD_ADDR_VAR 0 8
90511: PUSH
90512: LD_EXP 134
90516: PUSH
90517: LD_EXP 133
90521: PUSH
90522: LD_VAR 0 6
90526: ARRAY
90527: MINUS
90528: ST_TO_ADDR
// if not minesFreeAmount then
90529: LD_VAR 0 8
90533: NOT
90534: IFFALSE 90538
// exit ;
90536: GO 90809
// tmp := [ ] ;
90538: LD_ADDR_VAR 0 7
90542: PUSH
90543: EMPTY
90544: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
90545: LD_ADDR_VAR 0 5
90549: PUSH
90550: DOUBLE
90551: LD_INT 1
90553: DEC
90554: ST_TO_ADDR
90555: LD_VAR 0 8
90559: PUSH
90560: FOR_TO
90561: IFFALSE 90756
// begin _d := rand ( 0 , 5 ) ;
90563: LD_ADDR_VAR 0 11
90567: PUSH
90568: LD_INT 0
90570: PPUSH
90571: LD_INT 5
90573: PPUSH
90574: CALL_OW 12
90578: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
90579: LD_ADDR_VAR 0 12
90583: PUSH
90584: LD_INT 2
90586: PPUSH
90587: LD_INT 6
90589: PPUSH
90590: CALL_OW 12
90594: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
90595: LD_ADDR_VAR 0 9
90599: PUSH
90600: LD_VAR 0 2
90604: PPUSH
90605: LD_VAR 0 11
90609: PPUSH
90610: LD_VAR 0 12
90614: PPUSH
90615: CALL_OW 272
90619: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
90620: LD_ADDR_VAR 0 10
90624: PUSH
90625: LD_VAR 0 3
90629: PPUSH
90630: LD_VAR 0 11
90634: PPUSH
90635: LD_VAR 0 12
90639: PPUSH
90640: CALL_OW 273
90644: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
90645: LD_VAR 0 9
90649: PPUSH
90650: LD_VAR 0 10
90654: PPUSH
90655: CALL_OW 488
90659: PUSH
90660: LD_VAR 0 9
90664: PUSH
90665: LD_VAR 0 10
90669: PUSH
90670: EMPTY
90671: LIST
90672: LIST
90673: PUSH
90674: LD_VAR 0 7
90678: IN
90679: NOT
90680: AND
90681: PUSH
90682: LD_VAR 0 9
90686: PPUSH
90687: LD_VAR 0 10
90691: PPUSH
90692: CALL_OW 458
90696: NOT
90697: AND
90698: IFFALSE 90740
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
90700: LD_ADDR_VAR 0 7
90704: PUSH
90705: LD_VAR 0 7
90709: PPUSH
90710: LD_VAR 0 7
90714: PUSH
90715: LD_INT 1
90717: PLUS
90718: PPUSH
90719: LD_VAR 0 9
90723: PUSH
90724: LD_VAR 0 10
90728: PUSH
90729: EMPTY
90730: LIST
90731: LIST
90732: PPUSH
90733: CALL_OW 1
90737: ST_TO_ADDR
90738: GO 90754
// i := i - 1 ;
90740: LD_ADDR_VAR 0 5
90744: PUSH
90745: LD_VAR 0 5
90749: PUSH
90750: LD_INT 1
90752: MINUS
90753: ST_TO_ADDR
// end ;
90754: GO 90560
90756: POP
90757: POP
// for i in tmp do
90758: LD_ADDR_VAR 0 5
90762: PUSH
90763: LD_VAR 0 7
90767: PUSH
90768: FOR_IN
90769: IFFALSE 90807
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
90771: LD_VAR 0 1
90775: PPUSH
90776: LD_VAR 0 5
90780: PUSH
90781: LD_INT 1
90783: ARRAY
90784: PPUSH
90785: LD_VAR 0 5
90789: PUSH
90790: LD_INT 2
90792: ARRAY
90793: PPUSH
90794: CALL 89753 0 3
90798: NOT
90799: IFFALSE 90805
// exit ;
90801: POP
90802: POP
90803: GO 90809
90805: GO 90768
90807: POP
90808: POP
// end ;
90809: LD_VAR 0 4
90813: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
90814: LD_INT 0
90816: PPUSH
90817: PPUSH
90818: PPUSH
90819: PPUSH
90820: PPUSH
90821: PPUSH
90822: PPUSH
// if not GetClass ( unit ) = class_sniper then
90823: LD_VAR 0 1
90827: PPUSH
90828: CALL_OW 257
90832: PUSH
90833: LD_INT 5
90835: EQUAL
90836: NOT
90837: IFFALSE 90841
// exit ;
90839: GO 91229
// dist := 8 ;
90841: LD_ADDR_VAR 0 5
90845: PUSH
90846: LD_INT 8
90848: ST_TO_ADDR
// viewRange := 12 ;
90849: LD_ADDR_VAR 0 7
90853: PUSH
90854: LD_INT 12
90856: ST_TO_ADDR
// side := GetSide ( unit ) ;
90857: LD_ADDR_VAR 0 6
90861: PUSH
90862: LD_VAR 0 1
90866: PPUSH
90867: CALL_OW 255
90871: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
90872: LD_INT 61
90874: PPUSH
90875: LD_VAR 0 6
90879: PPUSH
90880: CALL_OW 321
90884: PUSH
90885: LD_INT 2
90887: EQUAL
90888: IFFALSE 90898
// viewRange := 16 ;
90890: LD_ADDR_VAR 0 7
90894: PUSH
90895: LD_INT 16
90897: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
90898: LD_VAR 0 1
90902: PPUSH
90903: LD_VAR 0 2
90907: PPUSH
90908: LD_VAR 0 3
90912: PPUSH
90913: CALL_OW 297
90917: PUSH
90918: LD_VAR 0 5
90922: GREATER
90923: IFFALSE 91002
// begin ComMoveXY ( unit , x , y ) ;
90925: LD_VAR 0 1
90929: PPUSH
90930: LD_VAR 0 2
90934: PPUSH
90935: LD_VAR 0 3
90939: PPUSH
90940: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
90944: LD_INT 35
90946: PPUSH
90947: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
90951: LD_VAR 0 1
90955: PPUSH
90956: LD_VAR 0 2
90960: PPUSH
90961: LD_VAR 0 3
90965: PPUSH
90966: CALL 65568 0 3
90970: NOT
90971: IFFALSE 90975
// exit ;
90973: GO 91229
// until GetDistUnitXY ( unit , x , y ) < dist ;
90975: LD_VAR 0 1
90979: PPUSH
90980: LD_VAR 0 2
90984: PPUSH
90985: LD_VAR 0 3
90989: PPUSH
90990: CALL_OW 297
90994: PUSH
90995: LD_VAR 0 5
90999: LESS
91000: IFFALSE 90944
// end ; ComTurnXY ( unit , x , y ) ;
91002: LD_VAR 0 1
91006: PPUSH
91007: LD_VAR 0 2
91011: PPUSH
91012: LD_VAR 0 3
91016: PPUSH
91017: CALL_OW 118
// wait ( 5 ) ;
91021: LD_INT 5
91023: PPUSH
91024: CALL_OW 67
// _d := GetDir ( unit ) ;
91028: LD_ADDR_VAR 0 10
91032: PUSH
91033: LD_VAR 0 1
91037: PPUSH
91038: CALL_OW 254
91042: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
91043: LD_ADDR_VAR 0 8
91047: PUSH
91048: LD_VAR 0 1
91052: PPUSH
91053: CALL_OW 250
91057: PPUSH
91058: LD_VAR 0 10
91062: PPUSH
91063: LD_VAR 0 5
91067: PPUSH
91068: CALL_OW 272
91072: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
91073: LD_ADDR_VAR 0 9
91077: PUSH
91078: LD_VAR 0 1
91082: PPUSH
91083: CALL_OW 251
91087: PPUSH
91088: LD_VAR 0 10
91092: PPUSH
91093: LD_VAR 0 5
91097: PPUSH
91098: CALL_OW 273
91102: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
91103: LD_VAR 0 8
91107: PPUSH
91108: LD_VAR 0 9
91112: PPUSH
91113: CALL_OW 488
91117: NOT
91118: IFFALSE 91122
// exit ;
91120: GO 91229
// ComAnimCustom ( unit , 1 ) ;
91122: LD_VAR 0 1
91126: PPUSH
91127: LD_INT 1
91129: PPUSH
91130: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
91134: LD_VAR 0 8
91138: PPUSH
91139: LD_VAR 0 9
91143: PPUSH
91144: LD_VAR 0 6
91148: PPUSH
91149: LD_VAR 0 7
91153: PPUSH
91154: CALL_OW 330
// repeat wait ( 1 ) ;
91158: LD_INT 1
91160: PPUSH
91161: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
91165: LD_VAR 0 1
91169: PPUSH
91170: CALL_OW 316
91174: PUSH
91175: LD_VAR 0 1
91179: PPUSH
91180: CALL_OW 314
91184: OR
91185: PUSH
91186: LD_VAR 0 1
91190: PPUSH
91191: CALL_OW 302
91195: NOT
91196: OR
91197: PUSH
91198: LD_VAR 0 1
91202: PPUSH
91203: CALL_OW 301
91207: OR
91208: IFFALSE 91158
// RemoveSeeing ( _x , _y , side ) ;
91210: LD_VAR 0 8
91214: PPUSH
91215: LD_VAR 0 9
91219: PPUSH
91220: LD_VAR 0 6
91224: PPUSH
91225: CALL_OW 331
// end ; end_of_file
91229: LD_VAR 0 4
91233: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
91234: LD_VAR 0 1
91238: PPUSH
91239: LD_VAR 0 2
91243: PPUSH
91244: LD_VAR 0 3
91248: PPUSH
91249: LD_VAR 0 4
91253: PPUSH
91254: LD_VAR 0 5
91258: PPUSH
91259: LD_VAR 0 6
91263: PPUSH
91264: CALL 71135 0 6
// end ;
91268: PPOPN 6
91270: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
91271: LD_INT 0
91273: PPUSH
// begin if not units then
91274: LD_VAR 0 1
91278: NOT
91279: IFFALSE 91283
// exit ;
91281: GO 91283
// end ;
91283: PPOPN 7
91285: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
91286: CALL 71039 0 0
// end ;
91290: PPOPN 1
91292: END
