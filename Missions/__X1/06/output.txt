// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 63820 0 0
// Init ;
   8: CALL 62 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 26
// Difficulty := 1 ;
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 1
  25: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  26: LD_INT 1
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: CALL 6854 0 2
// PrepareArabian ;
  36: CALL 361 0 0
// PrepareRussian ;
  40: CALL 7701 0 0
// Action ;
  44: CALL 15416 0 0
// if debug then
  48: LD_EXP 1
  52: IFFALSE 61
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ;
  61: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 05_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 05_
  80: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_STRING 04_2_GaidarKilled
  88: PPUSH
  89: LD_INT 1
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_STRING 05_ConvoySavedCounter
 104: PPUSH
 105: LD_INT 0
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// bergkampfArrived := false ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// omarArrived := false ;
 121: LD_ADDR_EXP 6
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// outpostDestroyed := false ;
 129: LD_ADDR_EXP 4
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ruLoseCounter := 0 ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// rolfScriptBase := false ;
 145: LD_ADDR_EXP 9
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// omarScriptBase := false ;
 153: LD_ADDR_EXP 10
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// linkedWithRolf := 0 ;
 161: LD_ADDR_EXP 12
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 169: LD_ADDR_EXP 26
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// rolfDied := false ;
 177: LD_ADDR_EXP 13
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// leninSpotted := false ;
 185: LD_ADDR_EXP 14
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// mortarConstructed := false ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// rolfHasVehicles := false ;
 201: LD_ADDR_EXP 16
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// leninScriptBase := true ;
 209: LD_ADDR_EXP 11
 213: PUSH
 214: LD_INT 1
 216: ST_TO_ADDR
// rolfWantVehicles := false ;
 217: LD_ADDR_EXP 17
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omarWantVehicles := false ;
 225: LD_ADDR_EXP 18
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// omarHasVehicles := false ;
 233: LD_ADDR_EXP 22
 237: PUSH
 238: LD_INT 0
 240: ST_TO_ADDR
// escapeAllowed := false ;
 241: LD_ADDR_EXP 24
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 8 8$00 , 6 6$00 , 5 5$00 ] [ Difficulty ] ;
 249: LD_ADDR_EXP 19
 253: PUSH
 254: LD_INT 16800
 256: PUSH
 257: LD_INT 12600
 259: PUSH
 260: LD_INT 10500
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] ;
 274: LD_ADDR_EXP 20
 278: PUSH
 279: LD_INT 21000
 281: PUSH
 282: LD_INT 18900
 284: PUSH
 285: LD_INT 16800
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: PUSH
 293: LD_OWVAR 67
 297: ARRAY
 298: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 299: LD_ADDR_EXP 21
 303: PUSH
 304: LD_INT 4
 306: PUSH
 307: LD_INT 5
 309: PUSH
 310: LD_INT 6
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: PUSH
 318: LD_OWVAR 67
 322: ARRAY
 323: ST_TO_ADDR
// omarAttack := false ;
 324: LD_ADDR_EXP 23
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// disableAttackOnHeike := false ;
 332: LD_ADDR_EXP 27
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// escapeTimer := 4 4$00 ;
 340: LD_ADDR_EXP 25
 344: PUSH
 345: LD_INT 8400
 347: ST_TO_ADDR
// firstAttack := true ;
 348: LD_ADDR_EXP 28
 352: PUSH
 353: LD_INT 1
 355: ST_TO_ADDR
// end ; end_of_file
 356: LD_VAR 0 1
 360: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 361: LD_INT 0
 363: PPUSH
 364: PPUSH
 365: PPUSH
 366: PPUSH
 367: PPUSH
 368: PPUSH
 369: PPUSH
 370: PPUSH
 371: PPUSH
 372: PPUSH
 373: PPUSH
 374: PPUSH
// uc_nation := 2 ;
 375: LD_ADDR_OWVAR 21
 379: PUSH
 380: LD_INT 2
 382: ST_TO_ADDR
// uc_side := 5 ;
 383: LD_ADDR_OWVAR 20
 387: PUSH
 388: LD_INT 5
 390: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 391: LD_ADDR_EXP 37
 395: PUSH
 396: LD_STRING Abdul
 398: PPUSH
 399: LD_INT 0
 401: PPUSH
 402: LD_STRING 
 404: PPUSH
 405: CALL 24619 0 3
 409: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 410: LD_ADDR_EXP 39
 414: PUSH
 415: LD_STRING Omar
 417: PPUSH
 418: LD_INT 0
 420: PPUSH
 421: LD_STRING 
 423: PPUSH
 424: CALL 24619 0 3
 428: ST_TO_ADDR
// uc_side := 2 ;
 429: LD_ADDR_OWVAR 20
 433: PUSH
 434: LD_INT 2
 436: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 437: LD_ADDR_EXP 29
 441: PUSH
 442: LD_STRING Heike
 444: PPUSH
 445: LD_EXP 1
 449: NOT
 450: PPUSH
 451: LD_EXP 2
 455: PPUSH
 456: CALL 24619 0 3
 460: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 461: LD_ADDR_EXP 32
 465: PUSH
 466: LD_STRING Ibrahim
 468: PPUSH
 469: LD_EXP 1
 473: NOT
 474: PPUSH
 475: LD_EXP 2
 479: PPUSH
 480: CALL 24619 0 3
 484: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 485: LD_ADDR_EXP 30
 489: PUSH
 490: LD_STRING Givi
 492: PPUSH
 493: LD_EXP 1
 497: NOT
 498: PPUSH
 499: LD_EXP 2
 503: PPUSH
 504: CALL 24619 0 3
 508: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 509: LD_ADDR_EXP 33
 513: PUSH
 514: LD_STRING Kamil
 516: PPUSH
 517: LD_EXP 1
 521: NOT
 522: PPUSH
 523: LD_EXP 2
 527: PPUSH
 528: CALL 24619 0 3
 532: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 533: LD_ADDR_EXP 34
 537: PUSH
 538: LD_STRING Kaia
 540: PPUSH
 541: LD_EXP 1
 545: NOT
 546: PPUSH
 547: LD_EXP 2
 551: PPUSH
 552: CALL 24619 0 3
 556: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 557: LD_ADDR_EXP 35
 561: PUSH
 562: LD_STRING Sophia
 564: PPUSH
 565: LD_EXP 1
 569: NOT
 570: PPUSH
 571: LD_EXP 2
 575: PPUSH
 576: CALL 24619 0 3
 580: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 581: LD_ADDR_EXP 36
 585: PUSH
 586: LD_STRING Markov
 588: PPUSH
 589: LD_EXP 1
 593: NOT
 594: PPUSH
 595: LD_EXP 2
 599: PPUSH
 600: CALL 24619 0 3
 604: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 605: LD_ADDR_EXP 41
 609: PUSH
 610: LD_STRING Aviradze
 612: PPUSH
 613: LD_EXP 1
 617: NOT
 618: PPUSH
 619: LD_EXP 2
 623: PPUSH
 624: CALL 24619 0 3
 628: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 629: LD_ADDR_EXP 40
 633: PUSH
 634: LD_STRING Kurt
 636: PPUSH
 637: LD_EXP 1
 641: NOT
 642: PPUSH
 643: LD_EXP 2
 647: PPUSH
 648: CALL 24619 0 3
 652: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 653: LD_ADDR_EXP 31
 657: PUSH
 658: LD_STRING Mike
 660: PPUSH
 661: LD_EXP 1
 665: NOT
 666: PPUSH
 667: LD_EXP 2
 671: PPUSH
 672: CALL 24619 0 3
 676: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 677: LD_ADDR_EXP 38
 681: PUSH
 682: LD_STRING Olaf
 684: PPUSH
 685: LD_INT 0
 687: PPUSH
 688: LD_STRING 
 690: PPUSH
 691: CALL 24619 0 3
 695: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 696: LD_ADDR_EXP 44
 700: PUSH
 701: LD_STRING 05_others
 703: PPUSH
 704: CALL_OW 31
 708: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 709: LD_ADDR_EXP 45
 713: PUSH
 714: LD_STRING 05_apes
 716: PPUSH
 717: CALL_OW 31
 721: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 722: LD_ADDR_VAR 0 5
 726: PUSH
 727: LD_STRING 05_Radar
 729: PPUSH
 730: LD_EXP 1
 734: PPUSH
 735: CALL_OW 30
 739: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 740: LD_ADDR_VAR 0 6
 744: PUSH
 745: LD_STRING 05_RemoteControl
 747: PPUSH
 748: LD_EXP 1
 752: PPUSH
 753: CALL_OW 30
 757: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 758: LD_ADDR_VAR 0 7
 762: PUSH
 763: LD_STRING 05_DrugsTested
 765: PPUSH
 766: LD_EXP 1
 770: PPUSH
 771: CALL_OW 30
 775: ST_TO_ADDR
// if hasDrugs then
 776: LD_VAR 0 7
 780: IFFALSE 795
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 782: LD_INT 5
 784: PPUSH
 785: LD_INT 2
 787: PPUSH
 788: LD_INT 2
 790: PPUSH
 791: CALL_OW 322
// if hasRadar then
 795: LD_VAR 0 5
 799: IFFALSE 814
// SetTech ( tech_radar , 2 , state_researched ) ;
 801: LD_INT 6
 803: PPUSH
 804: LD_INT 2
 806: PPUSH
 807: LD_INT 2
 809: PPUSH
 810: CALL_OW 322
// if hasRemote then
 814: LD_VAR 0 6
 818: IFFALSE 833
// SetTech ( tech_remCont , 2 , state_researched ) ;
 820: LD_INT 15
 822: PPUSH
 823: LD_INT 2
 825: PPUSH
 826: LD_INT 2
 828: PPUSH
 829: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 833: LD_ADDR_VAR 0 12
 837: PUSH
 838: LD_INT 5
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL_OW 517
 848: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 849: LD_ADDR_VAR 0 2
 853: PUSH
 854: DOUBLE
 855: LD_INT 1
 857: DEC
 858: ST_TO_ADDR
 859: LD_VAR 0 12
 863: PUSH
 864: LD_INT 1
 866: ARRAY
 867: PUSH
 868: FOR_TO
 869: IFFALSE 946
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 871: LD_VAR 0 12
 875: PUSH
 876: LD_INT 1
 878: ARRAY
 879: PUSH
 880: LD_VAR 0 2
 884: ARRAY
 885: PPUSH
 886: LD_VAR 0 12
 890: PUSH
 891: LD_INT 2
 893: ARRAY
 894: PUSH
 895: LD_VAR 0 2
 899: ARRAY
 900: PPUSH
 901: CALL_OW 351
 905: IFFALSE 944
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 907: LD_VAR 0 12
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PUSH
 916: LD_VAR 0 2
 920: ARRAY
 921: PPUSH
 922: LD_VAR 0 12
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: PUSH
 931: LD_VAR 0 2
 935: ARRAY
 936: PPUSH
 937: LD_INT 2
 939: PPUSH
 940: CALL_OW 244
 944: GO 868
 946: POP
 947: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 948: LD_ADDR_VAR 0 4
 952: PUSH
 953: LD_INT 0
 955: PUSH
 956: LD_INT 206
 958: PUSH
 959: LD_INT 80
 961: PUSH
 962: LD_INT 1
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 32
 973: PUSH
 974: LD_INT 221
 976: PUSH
 977: LD_INT 95
 979: PUSH
 980: LD_INT 5
 982: PUSH
 983: LD_INT 23
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 32
 995: PUSH
 996: LD_INT 223
 998: PUSH
 999: LD_INT 88
1001: PUSH
1002: LD_INT 5
1004: PUSH
1005: LD_INT 24
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: PUSH
1015: LD_INT 32
1017: PUSH
1018: LD_INT 202
1020: PUSH
1021: LD_INT 64
1023: PUSH
1024: LD_INT 2
1026: PUSH
1027: LD_INT 25
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: PUSH
1037: LD_INT 3
1039: PUSH
1040: LD_INT 203
1042: PUSH
1043: LD_INT 91
1045: PUSH
1046: LD_INT 1
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: PUSH
1055: LD_INT 8
1057: PUSH
1058: LD_INT 217
1060: PUSH
1061: LD_INT 78
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: PUSH
1073: LD_INT 27
1075: PUSH
1076: LD_INT 220
1078: PUSH
1079: LD_INT 99
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 27
1093: PUSH
1094: LD_INT 220
1096: PUSH
1097: LD_INT 103
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 27
1111: PUSH
1112: LD_INT 216
1114: PUSH
1115: LD_INT 102
1117: PUSH
1118: LD_INT 1
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 17
1129: PUSH
1130: LD_INT 203
1132: PUSH
1133: LD_INT 94
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: PUSH
1145: LD_INT 23
1147: PUSH
1148: LD_INT 200
1150: PUSH
1151: LD_INT 88
1153: PUSH
1154: LD_INT 2
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 16
1165: PUSH
1166: LD_INT 199
1168: PUSH
1169: LD_INT 91
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 26
1183: PUSH
1184: LD_INT 197
1186: PUSH
1187: LD_INT 81
1189: PUSH
1190: LD_INT 1
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 26
1201: PUSH
1202: LD_INT 197
1204: PUSH
1205: LD_INT 78
1207: PUSH
1208: LD_INT 3
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: ST_TO_ADDR
// if hasRadar then
1233: LD_VAR 0 5
1237: IFFALSE 1281
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
1239: LD_ADDR_VAR 0 4
1243: PUSH
1244: LD_VAR 0 4
1248: PPUSH
1249: LD_VAR 0 4
1253: PUSH
1254: LD_INT 1
1256: PLUS
1257: PPUSH
1258: LD_INT 20
1260: PUSH
1261: LD_INT 203
1263: PUSH
1264: LD_INT 87
1266: PUSH
1267: LD_INT 3
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: PPUSH
1276: CALL_OW 1
1280: ST_TO_ADDR
// if hasRemote then
1281: LD_VAR 0 6
1285: IFFALSE 1329
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
1287: LD_ADDR_VAR 0 4
1291: PUSH
1292: LD_VAR 0 4
1296: PPUSH
1297: LD_VAR 0 4
1301: PUSH
1302: LD_INT 1
1304: PLUS
1305: PPUSH
1306: LD_INT 22
1308: PUSH
1309: LD_INT 207
1311: PUSH
1312: LD_INT 95
1314: PUSH
1315: LD_INT 5
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: PPUSH
1324: CALL_OW 1
1328: ST_TO_ADDR
// for i in base do
1329: LD_ADDR_VAR 0 2
1333: PUSH
1334: LD_VAR 0 4
1338: PUSH
1339: FOR_IN
1340: IFFALSE 1521
// begin bc_type := i [ 1 ] ;
1342: LD_ADDR_OWVAR 42
1346: PUSH
1347: LD_VAR 0 2
1351: PUSH
1352: LD_INT 1
1354: ARRAY
1355: ST_TO_ADDR
// bc_level := 3 ;
1356: LD_ADDR_OWVAR 43
1360: PUSH
1361: LD_INT 3
1363: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1364: LD_VAR 0 2
1368: PUSH
1369: LD_INT 1
1371: ARRAY
1372: PUSH
1373: LD_INT 8
1375: EQUAL
1376: IFFALSE 1411
// begin bc_kind1 := b_lab_weapon ;
1378: LD_ADDR_OWVAR 44
1382: PUSH
1383: LD_INT 10
1385: ST_TO_ADDR
// if hasRadar then
1386: LD_VAR 0 5
1390: IFFALSE 1402
// bc_kind2 := b_lab_opto else
1392: LD_ADDR_OWVAR 45
1396: PUSH
1397: LD_INT 15
1399: ST_TO_ADDR
1400: GO 1411
// bc_kind2 := - 1 ;
1402: LD_ADDR_OWVAR 45
1406: PUSH
1407: LD_INT 1
1409: NEG
1410: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1411: LD_ADDR_VAR 0 3
1415: PUSH
1416: LD_VAR 0 2
1420: PUSH
1421: LD_INT 2
1423: ARRAY
1424: PPUSH
1425: LD_VAR 0 2
1429: PUSH
1430: LD_INT 3
1432: ARRAY
1433: PPUSH
1434: LD_VAR 0 2
1438: PUSH
1439: LD_INT 4
1441: ARRAY
1442: PPUSH
1443: CALL_OW 47
1447: ST_TO_ADDR
// if i > 4 then
1448: LD_VAR 0 2
1452: PUSH
1453: LD_INT 4
1455: GREATER
1456: IFFALSE 1476
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1458: LD_VAR 0 3
1462: PPUSH
1463: LD_VAR 0 2
1467: PUSH
1468: LD_INT 5
1470: ARRAY
1471: PPUSH
1472: CALL_OW 431
// if i [ 1 ] = b_bunker then
1476: LD_VAR 0 2
1480: PUSH
1481: LD_INT 1
1483: ARRAY
1484: PUSH
1485: LD_INT 32
1487: EQUAL
1488: IFFALSE 1519
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1490: LD_ADDR_VAR 0 11
1494: PUSH
1495: LD_VAR 0 11
1499: PPUSH
1500: LD_VAR 0 11
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 3
1513: PPUSH
1514: CALL_OW 1
1518: ST_TO_ADDR
// end ;
1519: GO 1339
1521: POP
1522: POP
// depot := HexInfo ( 206 , 80 ) ;
1523: LD_ADDR_VAR 0 9
1527: PUSH
1528: LD_INT 206
1530: PPUSH
1531: LD_INT 80
1533: PPUSH
1534: CALL_OW 428
1538: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1539: LD_ADDR_VAR 0 8
1543: PUSH
1544: LD_INT 203
1546: PPUSH
1547: LD_INT 91
1549: PPUSH
1550: CALL_OW 428
1554: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1555: LD_ADDR_VAR 0 10
1559: PUSH
1560: LD_INT 217
1562: PPUSH
1563: LD_INT 78
1565: PPUSH
1566: CALL_OW 428
1570: ST_TO_ADDR
// arDepot := depot ;
1571: LD_ADDR_EXP 43
1575: PUSH
1576: LD_VAR 0 9
1580: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 ] [ Difficulty ] ) ;
1581: LD_VAR 0 9
1585: PPUSH
1586: CALL_OW 274
1590: PPUSH
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 360
1596: PUSH
1597: LD_INT 260
1599: PUSH
1600: LD_INT 160
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: LD_OWVAR 67
1612: ARRAY
1613: PPUSH
1614: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 130 ] [ Difficulty ] ) ;
1618: LD_VAR 0 9
1622: PPUSH
1623: CALL_OW 274
1627: PPUSH
1628: LD_INT 2
1630: PPUSH
1631: LD_INT 200
1633: PUSH
1634: LD_INT 170
1636: PUSH
1637: LD_INT 130
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: LD_OWVAR 67
1649: ARRAY
1650: PPUSH
1651: CALL_OW 277
// uc_nation := 2 ;
1655: LD_ADDR_OWVAR 21
1659: PUSH
1660: LD_INT 2
1662: ST_TO_ADDR
// uc_side := 2 ;
1663: LD_ADDR_OWVAR 20
1667: PUSH
1668: LD_INT 2
1670: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
1671: LD_INT 13
1673: PPUSH
1674: LD_INT 1
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: LD_INT 27
1682: PPUSH
1683: LD_INT 33
1685: PPUSH
1686: CALL 29483 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
1690: CALL_OW 45
1694: PPUSH
1695: LD_INT 190
1697: PPUSH
1698: LD_INT 64
1700: PPUSH
1701: LD_INT 5
1703: PPUSH
1704: LD_INT 0
1706: PPUSH
1707: CALL 63287 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
1711: LD_INT 13
1713: PPUSH
1714: LD_INT 1
1716: PPUSH
1717: LD_INT 1
1719: PPUSH
1720: LD_INT 25
1722: PPUSH
1723: LD_INT 22
1725: PPUSH
1726: CALL 29483 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
1730: CALL_OW 45
1734: PPUSH
1735: LD_INT 188
1737: PPUSH
1738: LD_INT 67
1740: PPUSH
1741: LD_INT 5
1743: PPUSH
1744: LD_INT 0
1746: PPUSH
1747: CALL 63287 0 5
// if hasRemote then
1751: LD_VAR 0 6
1755: IFFALSE 1837
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
1757: LD_INT 13
1759: PPUSH
1760: LD_INT 1
1762: PPUSH
1763: LD_INT 1
1765: PPUSH
1766: LD_INT 31
1768: PPUSH
1769: LD_INT 35
1771: PPUSH
1772: CALL 29483 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
1776: CALL_OW 45
1780: PPUSH
1781: LD_INT 191
1783: PPUSH
1784: LD_INT 71
1786: PPUSH
1787: LD_INT 5
1789: PPUSH
1790: LD_INT 0
1792: PPUSH
1793: CALL 63287 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
1797: LD_INT 14
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 2
1805: PPUSH
1806: LD_INT 27
1808: PPUSH
1809: LD_INT 55
1811: PPUSH
1812: CALL 29483 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
1816: CALL_OW 45
1820: PPUSH
1821: LD_INT 199
1823: PPUSH
1824: LD_INT 67
1826: PPUSH
1827: LD_INT 0
1829: PPUSH
1830: LD_INT 0
1832: PPUSH
1833: CALL 63287 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1837: LD_EXP 29
1841: PPUSH
1842: LD_INT 213
1844: PPUSH
1845: LD_INT 87
1847: PPUSH
1848: LD_INT 0
1850: PPUSH
1851: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1855: LD_EXP 29
1859: PPUSH
1860: LD_INT 214
1862: PPUSH
1863: LD_INT 87
1865: PPUSH
1866: CALL_OW 118
// if Kaia then
1870: LD_EXP 34
1874: IFFALSE 1909
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1876: LD_EXP 34
1880: PPUSH
1881: LD_INT 213
1883: PPUSH
1884: LD_INT 85
1886: PPUSH
1887: LD_INT 0
1889: PPUSH
1890: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1894: LD_EXP 34
1898: PPUSH
1899: LD_INT 215
1901: PPUSH
1902: LD_INT 87
1904: PPUSH
1905: CALL_OW 118
// end ; if Olaf and Kaia then
1909: LD_EXP 38
1913: PUSH
1914: LD_EXP 34
1918: AND
1919: IFFALSE 1956
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1921: LD_EXP 38
1925: PPUSH
1926: LD_INT 215
1928: PPUSH
1929: LD_INT 87
1931: PPUSH
1932: LD_INT 0
1934: PPUSH
1935: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1939: LD_EXP 38
1943: PPUSH
1944: LD_INT 213
1946: PPUSH
1947: LD_INT 85
1949: PPUSH
1950: CALL_OW 118
// end else
1954: GO 1976
// if Olaf then
1956: LD_EXP 38
1960: IFFALSE 1976
// PlaceHumanInUnit ( Olaf , factory ) ;
1962: LD_EXP 38
1966: PPUSH
1967: LD_VAR 0 8
1971: PPUSH
1972: CALL_OW 52
// if Givi then
1976: LD_EXP 30
1980: IFFALSE 2061
// begin if Kaia and Olaf then
1982: LD_EXP 34
1986: PUSH
1987: LD_EXP 38
1991: AND
1992: IFFALSE 2029
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
1994: LD_EXP 30
1998: PPUSH
1999: LD_INT 247
2001: PPUSH
2002: LD_INT 117
2004: PPUSH
2005: LD_INT 0
2007: PPUSH
2008: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2012: LD_EXP 30
2016: PPUSH
2017: LD_INT 248
2019: PPUSH
2020: LD_INT 118
2022: PPUSH
2023: CALL_OW 118
// end else
2027: GO 2061
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2029: LD_EXP 30
2033: PPUSH
2034: LD_INT 216
2036: PPUSH
2037: LD_INT 88
2039: PPUSH
2040: LD_INT 0
2042: PPUSH
2043: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2047: LD_EXP 30
2051: PPUSH
2052: LD_EXP 29
2056: PPUSH
2057: CALL_OW 119
// end ; end ; if Kurt then
2061: LD_EXP 40
2065: IFFALSE 2085
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2067: LD_EXP 40
2071: PPUSH
2072: LD_VAR 0 11
2076: PUSH
2077: LD_INT 2
2079: ARRAY
2080: PPUSH
2081: CALL_OW 52
// if Mike then
2085: LD_EXP 31
2089: IFFALSE 2109
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2091: LD_EXP 31
2095: PPUSH
2096: LD_VAR 0 11
2100: PUSH
2101: LD_INT 3
2103: ARRAY
2104: PPUSH
2105: CALL_OW 52
// if Kamil then
2109: LD_EXP 33
2113: IFFALSE 2175
// begin if Kaia and Olaf then
2115: LD_EXP 34
2119: PUSH
2120: LD_EXP 38
2124: AND
2125: IFFALSE 2143
// PlaceHumanInUnit ( Kamil , depot ) else
2127: LD_EXP 33
2131: PPUSH
2132: LD_VAR 0 9
2136: PPUSH
2137: CALL_OW 52
2141: GO 2175
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
2143: LD_EXP 33
2147: PPUSH
2148: LD_INT 213
2150: PPUSH
2151: LD_INT 87
2153: PPUSH
2154: LD_INT 0
2156: PPUSH
2157: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
2161: LD_EXP 33
2165: PPUSH
2166: LD_EXP 29
2170: PPUSH
2171: CALL_OW 119
// end ; end ; if Sophia then
2175: LD_EXP 35
2179: IFFALSE 2195
// PlaceHumanInUnit ( Sophia , depot ) ;
2181: LD_EXP 35
2185: PPUSH
2186: LD_VAR 0 9
2190: PPUSH
2191: CALL_OW 52
// if Aviradze then
2195: LD_EXP 41
2199: IFFALSE 2215
// PlaceHumanInUnit ( Aviradze , lab ) ;
2201: LD_EXP 41
2205: PPUSH
2206: LD_VAR 0 10
2210: PPUSH
2211: CALL_OW 52
// if Ibrahim then
2215: LD_EXP 32
2219: IFFALSE 2235
// PlaceHumanInUnit ( Ibrahim , lab ) ;
2221: LD_EXP 32
2225: PPUSH
2226: LD_VAR 0 10
2230: PPUSH
2231: CALL_OW 52
// if Markov then
2235: LD_EXP 36
2239: IFFALSE 2255
// PlaceHumanInUnit ( Markov , factory ) ;
2241: LD_EXP 36
2245: PPUSH
2246: LD_VAR 0 8
2250: PPUSH
2251: CALL_OW 52
// if heikeSecondSquad then
2255: LD_EXP 44
2259: IFFALSE 2299
// for i in heikeSecondSquad do
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_EXP 44
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2297
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
2274: LD_VAR 0 2
2278: PPUSH
2279: LD_INT 190
2281: PPUSH
2282: LD_INT 65
2284: PPUSH
2285: LD_INT 5
2287: PPUSH
2288: LD_INT 0
2290: PPUSH
2291: CALL_OW 50
2295: GO 2271
2297: POP
2298: POP
// if heikeApes then
2299: LD_EXP 45
2303: IFFALSE 2343
// for i in heikeApes do
2305: LD_ADDR_VAR 0 2
2309: PUSH
2310: LD_EXP 45
2314: PUSH
2315: FOR_IN
2316: IFFALSE 2341
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
2318: LD_VAR 0 2
2322: PPUSH
2323: LD_INT 190
2325: PPUSH
2326: LD_INT 70
2328: PPUSH
2329: LD_INT 5
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 50
2339: GO 2315
2341: POP
2342: POP
// end ;
2343: LD_VAR 0 1
2347: RET
// export function PrepareRolfSquad ; var i , j ; begin
2348: LD_INT 0
2350: PPUSH
2351: PPUSH
2352: PPUSH
// uc_side := 8 ;
2353: LD_ADDR_OWVAR 20
2357: PUSH
2358: LD_INT 8
2360: ST_TO_ADDR
// uc_nation := 2 ;
2361: LD_ADDR_OWVAR 21
2365: PUSH
2366: LD_INT 2
2368: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
2369: LD_ADDR_EXP 42
2373: PUSH
2374: LD_STRING Bergkamp
2376: PPUSH
2377: CALL_OW 25
2381: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
2382: LD_ADDR_EXP 46
2386: PUSH
2387: LD_EXP 42
2391: PUSH
2392: EMPTY
2393: LIST
2394: ST_TO_ADDR
// for i := 1 to 4 do
2395: LD_ADDR_VAR 0 2
2399: PUSH
2400: DOUBLE
2401: LD_INT 1
2403: DEC
2404: ST_TO_ADDR
2405: LD_INT 4
2407: PUSH
2408: FOR_TO
2409: IFFALSE 2489
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
2411: LD_ADDR_VAR 0 3
2415: PUSH
2416: DOUBLE
2417: LD_INT 1
2419: DEC
2420: ST_TO_ADDR
2421: LD_INT 5
2423: PUSH
2424: LD_INT 2
2426: PUSH
2427: LD_INT 3
2429: PUSH
2430: LD_INT 1
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: PUSH
2439: LD_VAR 0 2
2443: ARRAY
2444: PUSH
2445: FOR_TO
2446: IFFALSE 2485
// begin PrepareHuman ( false , i , 5 ) ;
2448: LD_INT 0
2450: PPUSH
2451: LD_VAR 0 2
2455: PPUSH
2456: LD_INT 5
2458: PPUSH
2459: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
2463: LD_ADDR_EXP 46
2467: PUSH
2468: LD_EXP 46
2472: PPUSH
2473: CALL_OW 44
2477: PPUSH
2478: CALL 61356 0 2
2482: ST_TO_ADDR
// end ;
2483: GO 2445
2485: POP
2486: POP
// end ;
2487: GO 2408
2489: POP
2490: POP
// if HexInfo ( 5 , 3 ) then
2491: LD_INT 5
2493: PPUSH
2494: LD_INT 3
2496: PPUSH
2497: CALL_OW 428
2501: IFFALSE 2518
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
2503: LD_INT 5
2505: PPUSH
2506: LD_INT 3
2508: PPUSH
2509: CALL_OW 428
2513: PPUSH
2514: CALL_OW 64
// for i in rolfSquad do
2518: LD_ADDR_VAR 0 2
2522: PUSH
2523: LD_EXP 46
2527: PUSH
2528: FOR_IN
2529: IFFALSE 2665
// begin uc_direction := 2 ;
2531: LD_ADDR_OWVAR 24
2535: PUSH
2536: LD_INT 2
2538: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
2539: LD_VAR 0 2
2543: PPUSH
2544: CALL_OW 257
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: IFFALSE 2626
// begin uc_side := 8 ;
2554: LD_ADDR_OWVAR 20
2558: PUSH
2559: LD_INT 8
2561: ST_TO_ADDR
// uc_nation := 2 ;
2562: LD_ADDR_OWVAR 21
2566: PUSH
2567: LD_INT 2
2569: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
2570: LD_INT 13
2572: PPUSH
2573: LD_INT 1
2575: PPUSH
2576: LD_INT 1
2578: PPUSH
2579: LD_INT 27
2581: PPUSH
2582: LD_INT 88
2584: PPUSH
2585: CALL 29483 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
2589: CALL_OW 45
2593: PPUSH
2594: LD_INT 11
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
2604: LD_VAR 0 2
2608: PPUSH
2609: LD_INT 5
2611: PPUSH
2612: LD_INT 3
2614: PPUSH
2615: CALL_OW 428
2619: PPUSH
2620: CALL_OW 52
// end else
2624: GO 2641
// PlaceUnitArea ( i , northSpawn , false ) ;
2626: LD_VAR 0 2
2630: PPUSH
2631: LD_INT 11
2633: PPUSH
2634: LD_INT 0
2636: PPUSH
2637: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
2641: LD_VAR 0 2
2645: PPUSH
2646: LD_INT 29
2648: PPUSH
2649: LD_INT 10
2651: PPUSH
2652: CALL_OW 111
// wait ( 0 0$2 ) ;
2656: LD_INT 70
2658: PPUSH
2659: CALL_OW 67
// end ;
2663: GO 2528
2665: POP
2666: POP
// wait ( 0 0$5 ) ;
2667: LD_INT 175
2669: PPUSH
2670: CALL_OW 67
// end ;
2674: LD_VAR 0 1
2678: RET
// export function PrepareRolfBase ; var i , tmp ; begin
2679: LD_INT 0
2681: PPUSH
2682: PPUSH
2683: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
2684: LD_EXP 42
2688: PPUSH
2689: LD_INT 94
2691: PPUSH
2692: LD_INT 63
2694: PPUSH
2695: CALL_OW 428
2699: PPUSH
2700: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
2704: LD_ADDR_VAR 0 3
2708: PUSH
2709: LD_INT 4
2711: PUSH
2712: LD_INT 82
2714: PUSH
2715: LD_INT 64
2717: PUSH
2718: LD_INT 1
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: PUSH
2727: LD_INT 31
2729: PUSH
2730: LD_INT 73
2732: PUSH
2733: LD_INT 58
2735: PUSH
2736: LD_INT 0
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: LIST
2743: LIST
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: ST_TO_ADDR
// for i in tmp do
2749: LD_ADDR_VAR 0 2
2753: PUSH
2754: LD_VAR 0 3
2758: PUSH
2759: FOR_IN
2760: IFFALSE 2824
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2762: LD_EXP 46
2766: PPUSH
2767: LD_INT 25
2769: PUSH
2770: LD_INT 2
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PPUSH
2777: CALL_OW 72
2781: PPUSH
2782: LD_VAR 0 2
2786: PUSH
2787: LD_INT 1
2789: ARRAY
2790: PPUSH
2791: LD_VAR 0 2
2795: PUSH
2796: LD_INT 2
2798: ARRAY
2799: PPUSH
2800: LD_VAR 0 2
2804: PUSH
2805: LD_INT 3
2807: ARRAY
2808: PPUSH
2809: LD_VAR 0 2
2813: PUSH
2814: LD_INT 4
2816: ARRAY
2817: PPUSH
2818: CALL_OW 205
2822: GO 2759
2824: POP
2825: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
2826: LD_EXP 46
2830: PUSH
2831: LD_INT 2
2833: ARRAY
2834: PPUSH
2835: LD_INT 63
2837: PPUSH
2838: LD_INT 42
2840: PPUSH
2841: CALL_OW 428
2845: PPUSH
2846: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
2850: LD_EXP 46
2854: PUSH
2855: LD_INT 3
2857: ARRAY
2858: PPUSH
2859: LD_INT 94
2861: PPUSH
2862: LD_INT 63
2864: PPUSH
2865: CALL_OW 428
2869: PPUSH
2870: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2874: LD_INT 35
2876: PPUSH
2877: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
2881: LD_EXP 46
2885: PPUSH
2886: LD_INT 25
2888: PUSH
2889: LD_INT 2
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: PUSH
2896: LD_INT 3
2898: PUSH
2899: LD_INT 60
2901: PUSH
2902: EMPTY
2903: LIST
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PPUSH
2913: CALL_OW 72
2917: IFFALSE 2874
// rolfScriptBase := true ;
2919: LD_ADDR_EXP 9
2923: PUSH
2924: LD_INT 1
2926: ST_TO_ADDR
// end ;
2927: LD_VAR 0 1
2931: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
2932: LD_EXP 9
2936: PUSH
2937: LD_EXP 42
2941: PPUSH
2942: CALL_OW 255
2946: PUSH
2947: LD_INT 8
2949: EQUAL
2950: AND
2951: IFFALSE 3958
2953: GO 2955
2955: DISABLE
2956: LD_INT 0
2958: PPUSH
2959: PPUSH
2960: PPUSH
2961: PPUSH
2962: PPUSH
2963: PPUSH
2964: PPUSH
2965: PPUSH
2966: PPUSH
2967: PPUSH
// begin enable ;
2968: ENABLE
// if not rolfSquad then
2969: LD_EXP 46
2973: NOT
2974: IFFALSE 2978
// exit ;
2976: GO 3958
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
2978: LD_ADDR_VAR 0 9
2982: PUSH
2983: LD_INT 12
2985: PPUSH
2986: LD_INT 81
2988: PUSH
2989: LD_INT 8
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PPUSH
2996: CALL_OW 70
3000: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
3001: LD_ADDR_VAR 0 5
3005: PUSH
3006: LD_EXP 46
3010: PPUSH
3011: LD_INT 25
3013: PUSH
3014: LD_INT 1
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PPUSH
3021: CALL_OW 72
3025: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3026: LD_ADDR_VAR 0 6
3030: PUSH
3031: LD_EXP 46
3035: PPUSH
3036: LD_INT 25
3038: PUSH
3039: LD_INT 2
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PPUSH
3046: CALL_OW 72
3050: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
3051: LD_ADDR_VAR 0 8
3055: PUSH
3056: LD_EXP 46
3060: PPUSH
3061: LD_INT 25
3063: PUSH
3064: LD_INT 3
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PPUSH
3071: CALL_OW 72
3075: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
3076: LD_ADDR_VAR 0 7
3080: PUSH
3081: LD_EXP 46
3085: PPUSH
3086: LD_INT 25
3088: PUSH
3089: LD_INT 4
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PPUSH
3096: CALL_OW 72
3100: ST_TO_ADDR
// if sol then
3101: LD_VAR 0 5
3105: IFFALSE 3403
// for i in sol union Rolf do
3107: LD_ADDR_VAR 0 1
3111: PUSH
3112: LD_VAR 0 5
3116: PUSH
3117: LD_EXP 42
3121: UNION
3122: PUSH
3123: FOR_IN
3124: IFFALSE 3401
// if not IsInUnit ( i ) and not HasTask ( i ) then
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 310
3135: NOT
3136: PUSH
3137: LD_VAR 0 1
3141: PPUSH
3142: CALL_OW 314
3146: NOT
3147: AND
3148: IFFALSE 3399
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
3150: LD_VAR 0 1
3154: PPUSH
3155: CALL_OW 256
3159: PUSH
3160: LD_INT 500
3162: LESS
3163: PUSH
3164: LD_VAR 0 1
3168: PPUSH
3169: LD_INT 80
3171: PPUSH
3172: LD_INT 49
3174: PPUSH
3175: CALL_OW 297
3179: PUSH
3180: LD_INT 6
3182: GREATER
3183: AND
3184: IFFALSE 3203
// begin ComMoveXY ( i , 80 , 49 ) ;
3186: LD_VAR 0 1
3190: PPUSH
3191: LD_INT 80
3193: PPUSH
3194: LD_INT 49
3196: PPUSH
3197: CALL_OW 111
// continue ;
3201: GO 3123
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
3203: LD_ADDR_VAR 0 4
3207: PUSH
3208: LD_INT 22
3210: PUSH
3211: LD_INT 8
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: PUSH
3218: LD_INT 50
3220: PUSH
3221: EMPTY
3222: LIST
3223: PUSH
3224: LD_INT 2
3226: PUSH
3227: LD_INT 30
3229: PUSH
3230: LD_INT 4
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: LD_INT 30
3239: PUSH
3240: LD_INT 5
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: LD_INT 30
3249: PUSH
3250: LD_INT 32
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 30
3259: PUSH
3260: LD_INT 31
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: LIST
3278: PPUSH
3279: CALL_OW 69
3283: ST_TO_ADDR
// if tmp then
3284: LD_VAR 0 4
3288: IFFALSE 3399
// begin for b in tmp do
3290: LD_ADDR_VAR 0 2
3294: PUSH
3295: LD_VAR 0 4
3299: PUSH
3300: FOR_IN
3301: IFFALSE 3397
// begin case GetBType ( b ) of b_armoury , b_barracks :
3303: LD_VAR 0 2
3307: PPUSH
3308: CALL_OW 266
3312: PUSH
3313: LD_INT 4
3315: DOUBLE
3316: EQUAL
3317: IFTRUE 3327
3319: LD_INT 5
3321: DOUBLE
3322: EQUAL
3323: IFTRUE 3327
3325: GO 3338
3327: POP
// p := 6 ; b_breastwork , b_bunker :
3328: LD_ADDR_VAR 0 3
3332: PUSH
3333: LD_INT 6
3335: ST_TO_ADDR
3336: GO 3364
3338: LD_INT 31
3340: DOUBLE
3341: EQUAL
3342: IFTRUE 3352
3344: LD_INT 32
3346: DOUBLE
3347: EQUAL
3348: IFTRUE 3352
3350: GO 3363
3352: POP
// p := 1 ; end ;
3353: LD_ADDR_VAR 0 3
3357: PUSH
3358: LD_INT 1
3360: ST_TO_ADDR
3361: GO 3364
3363: POP
// if UnitsInside ( b ) < p then
3364: LD_VAR 0 2
3368: PPUSH
3369: CALL_OW 313
3373: PUSH
3374: LD_VAR 0 3
3378: LESS
3379: IFFALSE 3395
// ComEnterUnit ( i , b ) ;
3381: LD_VAR 0 1
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL_OW 120
// end ;
3395: GO 3300
3397: POP
3398: POP
// end ; end ;
3399: GO 3123
3401: POP
3402: POP
// if sci then
3403: LD_VAR 0 7
3407: IFFALSE 3462
// for i in sci do
3409: LD_ADDR_VAR 0 1
3413: PUSH
3414: LD_VAR 0 7
3418: PUSH
3419: FOR_IN
3420: IFFALSE 3460
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
3422: LD_VAR 0 1
3426: PPUSH
3427: LD_INT 80
3429: PPUSH
3430: LD_INT 49
3432: PPUSH
3433: CALL_OW 297
3437: PUSH
3438: LD_INT 9
3440: GREATER
3441: IFFALSE 3458
// ComMoveXY ( i , 80 , 49 ) ;
3443: LD_VAR 0 1
3447: PPUSH
3448: LD_INT 80
3450: PPUSH
3451: LD_INT 49
3453: PPUSH
3454: CALL_OW 111
// end ;
3458: GO 3419
3460: POP
3461: POP
// if mech then
3462: LD_VAR 0 8
3466: IFFALSE 3680
// for i in mech do
3468: LD_ADDR_VAR 0 1
3472: PUSH
3473: LD_VAR 0 8
3477: PUSH
3478: FOR_IN
3479: IFFALSE 3678
// begin hasVehicle := IsInUnit ( i ) ;
3481: LD_ADDR_VAR 0 10
3485: PUSH
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 310
3495: ST_TO_ADDR
// if enemyInBase then
3496: LD_VAR 0 9
3500: IFFALSE 3596
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
3502: LD_VAR 0 10
3506: PUSH
3507: LD_VAR 0 10
3511: PPUSH
3512: CALL_OW 256
3516: PUSH
3517: LD_INT 500
3519: GREATER
3520: AND
3521: IFFALSE 3549
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
3523: LD_VAR 0 10
3527: PPUSH
3528: LD_VAR 0 9
3532: PPUSH
3533: LD_VAR 0 10
3537: PPUSH
3538: CALL_OW 74
3542: PPUSH
3543: CALL_OW 115
3547: GO 3594
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
3549: LD_VAR 0 10
3553: PPUSH
3554: LD_INT 86
3556: PPUSH
3557: LD_INT 49
3559: PPUSH
3560: CALL_OW 297
3564: PUSH
3565: LD_INT 8
3567: GREATER
3568: IFFALSE 3594
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
3570: LD_VAR 0 10
3574: PPUSH
3575: LD_INT 86
3577: PPUSH
3578: LD_INT 49
3580: PPUSH
3581: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
3585: LD_VAR 0 1
3589: PPUSH
3590: CALL 62967 0 1
// end end else
3594: GO 3676
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
3596: LD_VAR 0 1
3600: PPUSH
3601: LD_INT 86
3603: PPUSH
3604: LD_INT 49
3606: PPUSH
3607: CALL_OW 297
3611: PUSH
3612: LD_INT 8
3614: GREATER
3615: IFFALSE 3634
// ComMoveXY ( i , 86 , 49 ) else
3617: LD_VAR 0 1
3621: PPUSH
3622: LD_INT 86
3624: PPUSH
3625: LD_INT 49
3627: PPUSH
3628: CALL_OW 111
3632: GO 3676
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
3634: LD_VAR 0 10
3638: PUSH
3639: LD_VAR 0 10
3643: PPUSH
3644: CALL_OW 256
3648: PUSH
3649: LD_INT 1000
3651: LESS
3652: AND
3653: IFFALSE 3676
// begin SetFuel ( hasVehicle , 100 ) ;
3655: LD_VAR 0 10
3659: PPUSH
3660: LD_INT 100
3662: PPUSH
3663: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
3667: LD_VAR 0 1
3671: PPUSH
3672: CALL 62847 0 1
// end ; end ; end ;
3676: GO 3478
3678: POP
3679: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3680: LD_ADDR_VAR 0 4
3684: PUSH
3685: LD_INT 12
3687: PPUSH
3688: LD_INT 3
3690: PUSH
3691: LD_INT 24
3693: PUSH
3694: LD_INT 1000
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: LD_INT 21
3707: PUSH
3708: LD_INT 3
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: PPUSH
3719: CALL_OW 70
3723: ST_TO_ADDR
// if tmp and eng then
3724: LD_VAR 0 4
3728: PUSH
3729: LD_VAR 0 6
3733: AND
3734: IFFALSE 3840
// begin for i in eng do
3736: LD_ADDR_VAR 0 1
3740: PUSH
3741: LD_VAR 0 6
3745: PUSH
3746: FOR_IN
3747: IFFALSE 3838
// if IsInUnit ( i ) then
3749: LD_VAR 0 1
3753: PPUSH
3754: CALL_OW 310
3758: IFFALSE 3771
// ComExitBuilding ( i ) else
3760: LD_VAR 0 1
3764: PPUSH
3765: CALL_OW 122
3769: GO 3836
// if GetLives ( i ) = 1000 then
3771: LD_VAR 0 1
3775: PPUSH
3776: CALL_OW 256
3780: PUSH
3781: LD_INT 1000
3783: EQUAL
3784: IFFALSE 3806
// ComRepairBuilding ( i , tmp [ 1 ] ) else
3786: LD_VAR 0 1
3790: PPUSH
3791: LD_VAR 0 4
3795: PUSH
3796: LD_INT 1
3798: ARRAY
3799: PPUSH
3800: CALL_OW 130
3804: GO 3836
// if GetLives ( i ) < 700 then
3806: LD_VAR 0 1
3810: PPUSH
3811: CALL_OW 256
3815: PUSH
3816: LD_INT 700
3818: LESS
3819: IFFALSE 3836
// ComMoveXY ( i , 80 , 49 ) ;
3821: LD_VAR 0 1
3825: PPUSH
3826: LD_INT 80
3828: PPUSH
3829: LD_INT 49
3831: PPUSH
3832: CALL_OW 111
3836: GO 3746
3838: POP
3839: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
3840: LD_VAR 0 4
3844: NOT
3845: PUSH
3846: LD_VAR 0 6
3850: PPUSH
3851: LD_INT 3
3853: PUSH
3854: LD_INT 54
3856: PUSH
3857: EMPTY
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: PPUSH
3864: CALL_OW 72
3868: AND
3869: IFFALSE 3958
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
3871: LD_ADDR_VAR 0 1
3875: PUSH
3876: LD_VAR 0 6
3880: PPUSH
3881: LD_INT 3
3883: PUSH
3884: LD_INT 54
3886: PUSH
3887: EMPTY
3888: LIST
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: PPUSH
3894: CALL_OW 72
3898: PUSH
3899: FOR_IN
3900: IFFALSE 3956
// if GetLives ( i ) < 1000 then
3902: LD_VAR 0 1
3906: PPUSH
3907: CALL_OW 256
3911: PUSH
3912: LD_INT 1000
3914: LESS
3915: IFFALSE 3934
// ComMoveXY ( i , 80 , 49 ) else
3917: LD_VAR 0 1
3921: PPUSH
3922: LD_INT 80
3924: PPUSH
3925: LD_INT 49
3927: PPUSH
3928: CALL_OW 111
3932: GO 3954
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
3934: LD_VAR 0 1
3938: PPUSH
3939: LD_INT 86
3941: PPUSH
3942: LD_INT 54
3944: PPUSH
3945: CALL_OW 428
3949: PPUSH
3950: CALL_OW 120
3954: GO 3899
3956: POP
3957: POP
// end ;
3958: PPOPN 10
3960: END
// export function PrepareOmarSquad ; var i , j , p ; begin
3961: LD_INT 0
3963: PPUSH
3964: PPUSH
3965: PPUSH
3966: PPUSH
// uc_side := 5 ;
3967: LD_ADDR_OWVAR 20
3971: PUSH
3972: LD_INT 5
3974: ST_TO_ADDR
// uc_nation := 2 ;
3975: LD_ADDR_OWVAR 21
3979: PUSH
3980: LD_INT 2
3982: ST_TO_ADDR
// omarSquad := [ ] ;
3983: LD_ADDR_EXP 47
3987: PUSH
3988: EMPTY
3989: ST_TO_ADDR
// for i := 1 to 4 do
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: DOUBLE
3996: LD_INT 1
3998: DEC
3999: ST_TO_ADDR
4000: LD_INT 4
4002: PUSH
4003: FOR_TO
4004: IFFALSE 4127
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
4006: LD_ADDR_VAR 0 3
4010: PUSH
4011: DOUBLE
4012: LD_INT 1
4014: DEC
4015: ST_TO_ADDR
4016: LD_INT 6
4018: PUSH
4019: LD_INT 2
4021: PUSH
4022: LD_INT 2
4024: PUSH
4025: LD_EXP 21
4029: PLUS
4030: PUSH
4031: LD_INT 2
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: PUSH
4040: LD_VAR 0 2
4044: ARRAY
4045: PUSH
4046: FOR_TO
4047: IFFALSE 4123
// begin PrepareHuman ( false , i , 5 ) ;
4049: LD_INT 0
4051: PPUSH
4052: LD_VAR 0 2
4056: PPUSH
4057: LD_INT 5
4059: PPUSH
4060: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
4064: LD_ADDR_EXP 47
4068: PUSH
4069: LD_EXP 47
4073: PPUSH
4074: CALL_OW 44
4078: PPUSH
4079: CALL 61356 0 2
4083: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
4084: LD_VAR 0 2
4088: PUSH
4089: LD_INT 1
4091: EQUAL
4092: PUSH
4093: LD_INT 50
4095: PPUSH
4096: CALL_OW 13
4100: AND
4101: IFFALSE 4121
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
4103: LD_EXP 47
4107: PUSH
4108: LD_EXP 47
4112: ARRAY
4113: PPUSH
4114: LD_INT 8
4116: PPUSH
4117: CALL_OW 336
// end ;
4121: GO 4046
4123: POP
4124: POP
// end ;
4125: GO 4003
4127: POP
4128: POP
// if HexInfo ( 340 , 205 ) then
4129: LD_INT 340
4131: PPUSH
4132: LD_INT 205
4134: PPUSH
4135: CALL_OW 428
4139: IFFALSE 4156
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
4141: LD_INT 340
4143: PPUSH
4144: LD_INT 205
4146: PPUSH
4147: CALL_OW 428
4151: PPUSH
4152: CALL_OW 64
// p := 0 ;
4156: LD_ADDR_VAR 0 4
4160: PUSH
4161: LD_INT 0
4163: ST_TO_ADDR
// for i in omarSquad do
4164: LD_ADDR_VAR 0 2
4168: PUSH
4169: LD_EXP 47
4173: PUSH
4174: FOR_IN
4175: IFFALSE 4376
// begin uc_direction := 4 ;
4177: LD_ADDR_OWVAR 24
4181: PUSH
4182: LD_INT 4
4184: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
4185: LD_VAR 0 2
4189: PPUSH
4190: CALL_OW 257
4194: PUSH
4195: LD_INT 3
4197: EQUAL
4198: PUSH
4199: LD_VAR 0 4
4203: PUSH
4204: LD_INT 2
4206: LESS
4207: AND
4208: IFFALSE 4337
// begin p := p + 1 ;
4210: LD_ADDR_VAR 0 4
4214: PUSH
4215: LD_VAR 0 4
4219: PUSH
4220: LD_INT 1
4222: PLUS
4223: ST_TO_ADDR
// uc_side := 5 ;
4224: LD_ADDR_OWVAR 20
4228: PUSH
4229: LD_INT 5
4231: ST_TO_ADDR
// if rand ( 0 , 1 ) then
4232: LD_INT 0
4234: PPUSH
4235: LD_INT 1
4237: PPUSH
4238: CALL_OW 12
4242: IFFALSE 4273
// begin uc_nation := 2 ;
4244: LD_ADDR_OWVAR 21
4248: PUSH
4249: LD_INT 2
4251: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
4252: LD_INT 13
4254: PPUSH
4255: LD_INT 1
4257: PPUSH
4258: LD_INT 1
4260: PPUSH
4261: LD_INT 27
4263: PPUSH
4264: LD_INT 88
4266: PPUSH
4267: CALL 29483 0 5
// end else
4271: GO 4300
// begin uc_nation := 3 ;
4273: LD_ADDR_OWVAR 21
4277: PUSH
4278: LD_INT 3
4280: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
4281: LD_INT 22
4283: PPUSH
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 1
4289: PPUSH
4290: LD_INT 45
4292: PPUSH
4293: LD_INT 88
4295: PPUSH
4296: CALL 29483 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
4300: CALL_OW 45
4304: PPUSH
4305: LD_INT 13
4307: PPUSH
4308: LD_INT 0
4310: PPUSH
4311: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
4315: LD_VAR 0 2
4319: PPUSH
4320: LD_INT 340
4322: PPUSH
4323: LD_INT 205
4325: PPUSH
4326: CALL_OW 428
4330: PPUSH
4331: CALL_OW 52
// end else
4335: GO 4352
// PlaceUnitArea ( i , southSpawn , false ) ;
4337: LD_VAR 0 2
4341: PPUSH
4342: LD_INT 13
4344: PPUSH
4345: LD_INT 0
4347: PPUSH
4348: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
4352: LD_VAR 0 2
4356: PPUSH
4357: LD_INT 333
4359: PPUSH
4360: LD_INT 210
4362: PPUSH
4363: CALL_OW 111
// wait ( 0 0$2 ) ;
4367: LD_INT 70
4369: PPUSH
4370: CALL_OW 67
// end ;
4374: GO 4174
4376: POP
4377: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
4378: LD_EXP 39
4382: PPUSH
4383: LD_INT 340
4385: PPUSH
4386: LD_INT 205
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
4396: LD_EXP 39
4400: PPUSH
4401: LD_INT 333
4403: PPUSH
4404: LD_INT 206
4406: PPUSH
4407: CALL_OW 111
// wait ( 0 0$2 ) ;
4411: LD_INT 70
4413: PPUSH
4414: CALL_OW 67
// ComHold ( omarSquad ) ;
4418: LD_EXP 47
4422: PPUSH
4423: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
4427: LD_EXP 39
4431: PUSH
4432: LD_EXP 47
4436: PPUSH
4437: LD_INT 2
4439: PUSH
4440: LD_INT 25
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: LD_INT 25
4452: PUSH
4453: LD_INT 8
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: PPUSH
4465: CALL_OW 72
4469: UNION
4470: PUSH
4471: LD_INT 22
4473: PUSH
4474: LD_INT 5
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: PUSH
4481: LD_INT 21
4483: PUSH
4484: LD_INT 2
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: PPUSH
4495: CALL_OW 69
4499: UNION
4500: PPUSH
4501: LD_INT 315
4503: PPUSH
4504: LD_INT 214
4506: PPUSH
4507: CALL_OW 114
// wait ( 0 0$22 ) ;
4511: LD_INT 770
4513: PPUSH
4514: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
4518: LD_EXP 47
4522: PUSH
4523: LD_EXP 39
4527: UNION
4528: PPUSH
4529: LD_INT 329
4531: PPUSH
4532: LD_INT 231
4534: PPUSH
4535: CALL_OW 114
// end ;
4539: LD_VAR 0 1
4543: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4544: LD_EXP 10
4548: IFFALSE 5631
4550: GO 4552
4552: DISABLE
4553: LD_INT 0
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
4559: PPUSH
4560: PPUSH
4561: PPUSH
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
// begin enable ;
4566: ENABLE
// if not omarSquad then
4567: LD_EXP 47
4571: NOT
4572: IFFALSE 4576
// exit ;
4574: GO 5631
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
4576: LD_ADDR_VAR 0 10
4580: PUSH
4581: LD_INT 14
4583: PPUSH
4584: LD_INT 81
4586: PUSH
4587: LD_INT 5
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PPUSH
4594: CALL_OW 70
4598: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
4599: LD_ADDR_VAR 0 6
4603: PUSH
4604: LD_EXP 47
4608: PPUSH
4609: LD_INT 2
4611: PUSH
4612: LD_INT 25
4614: PUSH
4615: LD_INT 1
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 25
4624: PUSH
4625: LD_INT 8
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: LIST
4636: PPUSH
4637: CALL_OW 72
4641: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
4642: LD_ADDR_VAR 0 7
4646: PUSH
4647: LD_EXP 47
4651: PPUSH
4652: LD_INT 25
4654: PUSH
4655: LD_INT 2
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PPUSH
4662: CALL_OW 72
4666: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
4667: LD_ADDR_VAR 0 9
4671: PUSH
4672: LD_EXP 47
4676: PPUSH
4677: LD_INT 25
4679: PUSH
4680: LD_INT 3
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PPUSH
4687: CALL_OW 72
4691: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
4692: LD_ADDR_VAR 0 8
4696: PUSH
4697: LD_EXP 47
4701: PPUSH
4702: LD_INT 25
4704: PUSH
4705: LD_INT 4
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: PPUSH
4712: CALL_OW 72
4716: ST_TO_ADDR
// if sol then
4717: LD_VAR 0 6
4721: IFFALSE 5085
// for i in sol do
4723: LD_ADDR_VAR 0 1
4727: PUSH
4728: LD_VAR 0 6
4732: PUSH
4733: FOR_IN
4734: IFFALSE 5083
// if not HasTask ( i ) then
4736: LD_VAR 0 1
4740: PPUSH
4741: CALL_OW 314
4745: NOT
4746: IFFALSE 5081
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
4748: LD_VAR 0 1
4752: PPUSH
4753: CALL_OW 310
4757: NOT
4758: PUSH
4759: LD_VAR 0 1
4763: PPUSH
4764: CALL_OW 256
4768: PUSH
4769: LD_INT 500
4771: LESS
4772: AND
4773: PUSH
4774: LD_VAR 0 1
4778: PPUSH
4779: LD_INT 333
4781: PPUSH
4782: LD_INT 234
4784: PPUSH
4785: CALL_OW 297
4789: PUSH
4790: LD_INT 6
4792: GREATER
4793: AND
4794: IFFALSE 4813
// begin ComMoveXY ( i , 333 , 234 ) ;
4796: LD_VAR 0 1
4800: PPUSH
4801: LD_INT 333
4803: PPUSH
4804: LD_INT 234
4806: PPUSH
4807: CALL_OW 111
// continue ;
4811: GO 4733
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4813: LD_ADDR_VAR 0 5
4817: PUSH
4818: LD_INT 22
4820: PUSH
4821: LD_INT 5
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 58
4830: PUSH
4831: EMPTY
4832: LIST
4833: PUSH
4834: LD_INT 50
4836: PUSH
4837: EMPTY
4838: LIST
4839: PUSH
4840: LD_INT 2
4842: PUSH
4843: LD_INT 30
4845: PUSH
4846: LD_INT 32
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 30
4855: PUSH
4856: LD_INT 31
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: PPUSH
4874: CALL_OW 69
4878: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
4879: LD_VAR 0 5
4883: PUSH
4884: LD_VAR 0 1
4888: PPUSH
4889: CALL_OW 310
4893: PPUSH
4894: CALL_OW 266
4898: PUSH
4899: LD_INT 31
4901: NONEQUAL
4902: AND
4903: IFFALSE 4985
// begin for j in tmp do
4905: LD_ADDR_VAR 0 2
4909: PUSH
4910: LD_VAR 0 5
4914: PUSH
4915: FOR_IN
4916: IFFALSE 4981
// if GetTag ( j ) <> 1 then
4918: LD_VAR 0 2
4922: PPUSH
4923: CALL_OW 110
4927: PUSH
4928: LD_INT 1
4930: NONEQUAL
4931: IFFALSE 4979
// begin SetTag ( j , 1 ) ;
4933: LD_VAR 0 2
4937: PPUSH
4938: LD_INT 1
4940: PPUSH
4941: CALL_OW 109
// if IsInUnit ( i ) then
4945: LD_VAR 0 1
4949: PPUSH
4950: CALL_OW 310
4954: IFFALSE 4965
// ComExit ( i ) ;
4956: LD_VAR 0 1
4960: PPUSH
4961: CALL 61744 0 1
// AddComEnterUnit ( i , j ) ;
4965: LD_VAR 0 1
4969: PPUSH
4970: LD_VAR 0 2
4974: PPUSH
4975: CALL_OW 180
// end ;
4979: GO 4915
4981: POP
4982: POP
// end else
4983: GO 5081
// if not IsInUnit ( i ) then
4985: LD_VAR 0 1
4989: PPUSH
4990: CALL_OW 310
4994: NOT
4995: IFFALSE 5081
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
4997: LD_ADDR_VAR 0 5
5001: PUSH
5002: LD_INT 22
5004: PUSH
5005: LD_INT 5
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 50
5014: PUSH
5015: EMPTY
5016: LIST
5017: PUSH
5018: LD_INT 30
5020: PUSH
5021: LD_INT 4
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: LIST
5032: PPUSH
5033: CALL_OW 69
5037: ST_TO_ADDR
// if tmp then
5038: LD_VAR 0 5
5042: IFFALSE 5081
// if UnitsInside ( tmp [ 1 ] ) < 6 then
5044: LD_VAR 0 5
5048: PUSH
5049: LD_INT 1
5051: ARRAY
5052: PPUSH
5053: CALL_OW 313
5057: PUSH
5058: LD_INT 6
5060: LESS
5061: IFFALSE 5081
// ComEnterUnit ( i , tmp [ 1 ] ) ;
5063: LD_VAR 0 1
5067: PPUSH
5068: LD_VAR 0 5
5072: PUSH
5073: LD_INT 1
5075: ARRAY
5076: PPUSH
5077: CALL_OW 120
// end ; end ;
5081: GO 4733
5083: POP
5084: POP
// if sci then
5085: LD_VAR 0 8
5089: IFFALSE 5144
// for i in sci do
5091: LD_ADDR_VAR 0 1
5095: PUSH
5096: LD_VAR 0 8
5100: PUSH
5101: FOR_IN
5102: IFFALSE 5142
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
5104: LD_VAR 0 1
5108: PPUSH
5109: LD_INT 333
5111: PPUSH
5112: LD_INT 234
5114: PPUSH
5115: CALL_OW 297
5119: PUSH
5120: LD_INT 9
5122: GREATER
5123: IFFALSE 5140
// ComMoveXY ( i , 333 , 234 ) ;
5125: LD_VAR 0 1
5129: PPUSH
5130: LD_INT 333
5132: PPUSH
5133: LD_INT 234
5135: PPUSH
5136: CALL_OW 111
// end ;
5140: GO 5101
5142: POP
5143: POP
// if mech then
5144: LD_VAR 0 9
5148: IFFALSE 5353
// for i in mech do
5150: LD_ADDR_VAR 0 1
5154: PUSH
5155: LD_VAR 0 9
5159: PUSH
5160: FOR_IN
5161: IFFALSE 5351
// begin hasVehicle := IsInUnit ( i ) ;
5163: LD_ADDR_VAR 0 11
5167: PUSH
5168: LD_VAR 0 1
5172: PPUSH
5173: CALL_OW 310
5177: ST_TO_ADDR
// if enemyInBase then
5178: LD_VAR 0 10
5182: IFFALSE 5269
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
5184: LD_VAR 0 11
5188: PUSH
5189: LD_VAR 0 11
5193: PPUSH
5194: CALL_OW 256
5198: PUSH
5199: LD_INT 500
5201: GREATER
5202: AND
5203: IFFALSE 5231
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
5205: LD_VAR 0 11
5209: PPUSH
5210: LD_VAR 0 10
5214: PPUSH
5215: LD_VAR 0 11
5219: PPUSH
5220: CALL_OW 74
5224: PPUSH
5225: CALL_OW 115
5229: GO 5267
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
5231: LD_VAR 0 11
5235: PPUSH
5236: LD_INT 333
5238: PPUSH
5239: LD_INT 234
5241: PPUSH
5242: CALL_OW 297
5246: PUSH
5247: LD_INT 6
5249: GREATER
5250: IFFALSE 5267
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
5252: LD_VAR 0 11
5256: PPUSH
5257: LD_INT 333
5259: PPUSH
5260: LD_INT 234
5262: PPUSH
5263: CALL_OW 111
// end else
5267: GO 5349
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
5269: LD_VAR 0 1
5273: PPUSH
5274: LD_INT 333
5276: PPUSH
5277: LD_INT 234
5279: PPUSH
5280: CALL_OW 297
5284: PUSH
5285: LD_INT 6
5287: GREATER
5288: IFFALSE 5307
// ComMoveXY ( i , 333 , 234 ) else
5290: LD_VAR 0 1
5294: PPUSH
5295: LD_INT 333
5297: PPUSH
5298: LD_INT 234
5300: PPUSH
5301: CALL_OW 111
5305: GO 5349
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
5307: LD_VAR 0 11
5311: PUSH
5312: LD_VAR 0 11
5316: PPUSH
5317: CALL_OW 256
5321: PUSH
5322: LD_INT 1000
5324: LESS
5325: AND
5326: IFFALSE 5349
// begin SetFuel ( hasVehicle , 100 ) ;
5328: LD_VAR 0 11
5332: PPUSH
5333: LD_INT 100
5335: PPUSH
5336: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
5340: LD_VAR 0 1
5344: PPUSH
5345: CALL 62847 0 1
// end ; end ; end ;
5349: GO 5160
5351: POP
5352: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
5353: LD_ADDR_VAR 0 5
5357: PUSH
5358: LD_INT 14
5360: PPUSH
5361: LD_INT 3
5363: PUSH
5364: LD_INT 24
5366: PUSH
5367: LD_INT 1000
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: PUSH
5378: LD_INT 21
5380: PUSH
5381: LD_INT 3
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: PPUSH
5392: CALL_OW 70
5396: ST_TO_ADDR
// if tmp and eng then
5397: LD_VAR 0 5
5401: PUSH
5402: LD_VAR 0 7
5406: AND
5407: IFFALSE 5513
// begin for i in eng do
5409: LD_ADDR_VAR 0 1
5413: PUSH
5414: LD_VAR 0 7
5418: PUSH
5419: FOR_IN
5420: IFFALSE 5511
// if IsInUnit ( i ) then
5422: LD_VAR 0 1
5426: PPUSH
5427: CALL_OW 310
5431: IFFALSE 5444
// ComExitBuilding ( i ) else
5433: LD_VAR 0 1
5437: PPUSH
5438: CALL_OW 122
5442: GO 5509
// if GetLives ( i ) = 1000 then
5444: LD_VAR 0 1
5448: PPUSH
5449: CALL_OW 256
5453: PUSH
5454: LD_INT 1000
5456: EQUAL
5457: IFFALSE 5479
// ComRepairBuilding ( i , tmp [ 1 ] ) else
5459: LD_VAR 0 1
5463: PPUSH
5464: LD_VAR 0 5
5468: PUSH
5469: LD_INT 1
5471: ARRAY
5472: PPUSH
5473: CALL_OW 130
5477: GO 5509
// if GetLives ( i ) < 700 then
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL_OW 256
5488: PUSH
5489: LD_INT 700
5491: LESS
5492: IFFALSE 5509
// ComMoveXY ( i , 333 , 234 ) ;
5494: LD_VAR 0 1
5498: PPUSH
5499: LD_INT 333
5501: PPUSH
5502: LD_INT 234
5504: PPUSH
5505: CALL_OW 111
5509: GO 5419
5511: POP
5512: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5513: LD_VAR 0 5
5517: NOT
5518: PUSH
5519: LD_VAR 0 7
5523: PPUSH
5524: LD_INT 3
5526: PUSH
5527: LD_INT 54
5529: PUSH
5530: EMPTY
5531: LIST
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: CALL_OW 72
5541: AND
5542: IFFALSE 5631
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5544: LD_ADDR_VAR 0 1
5548: PUSH
5549: LD_VAR 0 7
5553: PPUSH
5554: LD_INT 3
5556: PUSH
5557: LD_INT 54
5559: PUSH
5560: EMPTY
5561: LIST
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL_OW 72
5571: PUSH
5572: FOR_IN
5573: IFFALSE 5629
// if GetLives ( i ) < 1000 then
5575: LD_VAR 0 1
5579: PPUSH
5580: CALL_OW 256
5584: PUSH
5585: LD_INT 1000
5587: LESS
5588: IFFALSE 5607
// ComMoveXY ( i , 333 , 234 ) else
5590: LD_VAR 0 1
5594: PPUSH
5595: LD_INT 333
5597: PPUSH
5598: LD_INT 234
5600: PPUSH
5601: CALL_OW 111
5605: GO 5627
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
5607: LD_VAR 0 1
5611: PPUSH
5612: LD_INT 341
5614: PPUSH
5615: LD_INT 232
5617: PPUSH
5618: CALL_OW 428
5622: PPUSH
5623: CALL_OW 120
5627: GO 5572
5629: POP
5630: POP
// end ;
5631: PPOPN 11
5633: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
5634: LD_EXP 39
5638: PPUSH
5639: CALL_OW 256
5643: PUSH
5644: LD_INT 1000
5646: LESS
5647: IFFALSE 5665
5649: GO 5651
5651: DISABLE
// begin enable ;
5652: ENABLE
// SetLives ( Omar , 1000 ) ;
5653: LD_EXP 39
5657: PPUSH
5658: LD_INT 1000
5660: PPUSH
5661: CALL_OW 234
// end ;
5665: END
// every 0 0$1 trigger omarAttack do var i , nearestPoint ;
5666: LD_EXP 23
5670: IFFALSE 6546
5672: GO 5674
5674: DISABLE
5675: LD_INT 0
5677: PPUSH
5678: PPUSH
// begin wait ( 0 0$25 ) ;
5679: LD_INT 875
5681: PPUSH
5682: CALL_OW 67
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
5686: LD_EXP 47
5690: PPUSH
5691: LD_INT 2
5693: PUSH
5694: LD_INT 25
5696: PUSH
5697: LD_INT 1
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PUSH
5704: LD_INT 25
5706: PUSH
5707: LD_INT 8
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: LIST
5718: PPUSH
5719: CALL_OW 72
5723: PPUSH
5724: CALL_OW 122
// wait ( 0 0$3 ) ;
5728: LD_INT 105
5730: PPUSH
5731: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , 225 , 223 ) ;
5735: LD_EXP 47
5739: PUSH
5740: LD_EXP 39
5744: UNION
5745: PPUSH
5746: LD_INT 225
5748: PPUSH
5749: LD_INT 223
5751: PPUSH
5752: CALL_OW 174
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_type , unit_vehicle ] ] ] ) , 167 , 231 ) ;
5756: LD_INT 22
5758: PUSH
5759: LD_INT 5
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: PUSH
5766: LD_INT 2
5768: PUSH
5769: LD_INT 25
5771: PUSH
5772: LD_INT 1
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 25
5781: PUSH
5782: LD_INT 8
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 21
5791: PUSH
5792: LD_INT 2
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: PPUSH
5809: CALL_OW 69
5813: PPUSH
5814: LD_INT 167
5816: PPUSH
5817: LD_INT 231
5819: PPUSH
5820: CALL_OW 174
// AddComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 222 , 229 ) ;
5824: LD_EXP 47
5828: PPUSH
5829: LD_INT 25
5831: PUSH
5832: LD_INT 4
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: PPUSH
5839: CALL_OW 72
5843: PPUSH
5844: LD_INT 222
5846: PPUSH
5847: LD_INT 229
5849: PPUSH
5850: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5854: LD_INT 35
5856: PPUSH
5857: CALL_OW 67
// for i in omarSquad union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
5861: LD_ADDR_VAR 0 1
5865: PUSH
5866: LD_EXP 47
5870: PUSH
5871: LD_INT 22
5873: PUSH
5874: LD_INT 5
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: LD_INT 21
5883: PUSH
5884: LD_INT 2
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 69
5899: UNION
5900: PUSH
5901: FOR_IN
5902: IFFALSE 6537
// begin if IsDead ( i ) then
5904: LD_VAR 0 1
5908: PPUSH
5909: CALL_OW 301
5913: IFFALSE 5933
// begin omarSquad := omarSquad diff i ;
5915: LD_ADDR_EXP 47
5919: PUSH
5920: LD_EXP 47
5924: PUSH
5925: LD_VAR 0 1
5929: DIFF
5930: ST_TO_ADDR
// continue ;
5931: GO 5901
// end ; if GetClass ( i ) in [ 1 , 8 ] then
5933: LD_VAR 0 1
5937: PPUSH
5938: CALL_OW 257
5942: PUSH
5943: LD_INT 1
5945: PUSH
5946: LD_INT 8
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: IN
5953: IFFALSE 6147
// begin if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
5955: LD_VAR 0 1
5959: PPUSH
5960: CALL_OW 256
5964: PUSH
5965: LD_INT 700
5967: LESS
5968: PUSH
5969: LD_VAR 0 1
5973: PPUSH
5974: CALL_OW 110
5978: PUSH
5979: LD_INT 0
5981: EQUAL
5982: AND
5983: IFFALSE 6012
// begin SetTag ( i , 1 ) ;
5985: LD_VAR 0 1
5989: PPUSH
5990: LD_INT 1
5992: PPUSH
5993: CALL_OW 109
// ComMoveXY ( i , 222 , 229 ) ;
5997: LD_VAR 0 1
6001: PPUSH
6002: LD_INT 222
6004: PPUSH
6005: LD_INT 229
6007: PPUSH
6008: CALL_OW 111
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
6012: LD_VAR 0 1
6016: PPUSH
6017: CALL_OW 256
6021: PUSH
6022: LD_INT 1000
6024: EQUAL
6025: PUSH
6026: LD_VAR 0 1
6030: PPUSH
6031: CALL_OW 110
6035: PUSH
6036: LD_INT 1
6038: EQUAL
6039: AND
6040: IFFALSE 6054
// SetTag ( i , 0 ) ;
6042: LD_VAR 0 1
6046: PPUSH
6047: LD_INT 0
6049: PPUSH
6050: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and not HasTask ( i ) then
6054: LD_VAR 0 1
6058: PPUSH
6059: CALL_OW 110
6063: PUSH
6064: LD_INT 0
6066: EQUAL
6067: PUSH
6068: LD_VAR 0 1
6072: PPUSH
6073: CALL_OW 256
6077: PUSH
6078: LD_INT 700
6080: GREATEREQUAL
6081: AND
6082: PUSH
6083: LD_VAR 0 1
6087: PPUSH
6088: CALL_OW 314
6092: NOT
6093: AND
6094: IFFALSE 6147
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6096: LD_INT 18
6098: PPUSH
6099: LD_INT 22
6101: PUSH
6102: LD_INT 3
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PPUSH
6109: CALL_OW 70
6113: IFFALSE 6132
// ComAgressiveMove ( i , 167 , 231 ) else
6115: LD_VAR 0 1
6119: PPUSH
6120: LD_INT 167
6122: PPUSH
6123: LD_INT 231
6125: PPUSH
6126: CALL_OW 114
6130: GO 6147
// ComAgressiveMove ( i , 106 , 153 ) ;
6132: LD_VAR 0 1
6136: PPUSH
6137: LD_INT 106
6139: PPUSH
6140: LD_INT 153
6142: PPUSH
6143: CALL_OW 114
// end ; if GetType ( i ) = unit_vehicle then
6147: LD_VAR 0 1
6151: PPUSH
6152: CALL_OW 247
6156: PUSH
6157: LD_INT 2
6159: EQUAL
6160: IFFALSE 6535
// begin nearestPoint := [ 219 , 219 ] ;
6162: LD_ADDR_VAR 0 2
6166: PUSH
6167: LD_INT 219
6169: PUSH
6170: LD_INT 219
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: ST_TO_ADDR
// if GetDistUnitXY ( i , 156 , 202 ) < GetDistUnitXY ( i , 219 , 219 ) then
6177: LD_VAR 0 1
6181: PPUSH
6182: LD_INT 156
6184: PPUSH
6185: LD_INT 202
6187: PPUSH
6188: CALL_OW 297
6192: PUSH
6193: LD_VAR 0 1
6197: PPUSH
6198: LD_INT 219
6200: PPUSH
6201: LD_INT 219
6203: PPUSH
6204: CALL_OW 297
6208: LESS
6209: IFFALSE 6226
// nearestPoint := [ 156 , 202 ] ;
6211: LD_ADDR_VAR 0 2
6215: PUSH
6216: LD_INT 156
6218: PUSH
6219: LD_INT 202
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: ST_TO_ADDR
// if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
6226: LD_VAR 0 1
6230: PPUSH
6231: CALL_OW 256
6235: PUSH
6236: LD_INT 700
6238: LESS
6239: PUSH
6240: LD_VAR 0 1
6244: PPUSH
6245: CALL_OW 110
6249: PUSH
6250: LD_INT 0
6252: EQUAL
6253: AND
6254: IFFALSE 6295
// begin SetTag ( i , 1 ) ;
6256: LD_VAR 0 1
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 109
// ComMoveXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) ;
6268: LD_VAR 0 1
6272: PPUSH
6273: LD_VAR 0 2
6277: PUSH
6278: LD_INT 1
6280: ARRAY
6281: PPUSH
6282: LD_VAR 0 2
6286: PUSH
6287: LD_INT 2
6289: ARRAY
6290: PPUSH
6291: CALL_OW 111
// end ; if GetLives ( i ) < 700 and GetTag ( i ) = 1 and IsDrivenBy ( i ) and GetDistUnitXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) < 10 then
6295: LD_VAR 0 1
6299: PPUSH
6300: CALL_OW 256
6304: PUSH
6305: LD_INT 700
6307: LESS
6308: PUSH
6309: LD_VAR 0 1
6313: PPUSH
6314: CALL_OW 110
6318: PUSH
6319: LD_INT 1
6321: EQUAL
6322: AND
6323: PUSH
6324: LD_VAR 0 1
6328: PPUSH
6329: CALL_OW 311
6333: AND
6334: PUSH
6335: LD_VAR 0 1
6339: PPUSH
6340: LD_VAR 0 2
6344: PUSH
6345: LD_INT 1
6347: ARRAY
6348: PPUSH
6349: LD_VAR 0 2
6353: PUSH
6354: LD_INT 2
6356: ARRAY
6357: PPUSH
6358: CALL_OW 297
6362: PUSH
6363: LD_INT 10
6365: LESS
6366: AND
6367: IFFALSE 6378
// ComRepairVehicleAndReturn ( i ) ;
6369: LD_VAR 0 1
6373: PPUSH
6374: CALL 62847 0 1
// if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
6378: LD_VAR 0 1
6382: PPUSH
6383: CALL_OW 256
6387: PUSH
6388: LD_INT 1000
6390: EQUAL
6391: PUSH
6392: LD_VAR 0 1
6396: PPUSH
6397: CALL_OW 110
6401: PUSH
6402: LD_INT 1
6404: EQUAL
6405: AND
6406: PUSH
6407: LD_VAR 0 1
6411: PPUSH
6412: CALL_OW 311
6416: AND
6417: IFFALSE 6431
// SetTag ( i , 0 ) ;
6419: LD_VAR 0 1
6423: PPUSH
6424: LD_INT 0
6426: PPUSH
6427: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and IsDrivenBy ( i ) and not HasTask ( i ) then
6431: LD_VAR 0 1
6435: PPUSH
6436: CALL_OW 110
6440: PUSH
6441: LD_INT 0
6443: EQUAL
6444: PUSH
6445: LD_VAR 0 1
6449: PPUSH
6450: CALL_OW 256
6454: PUSH
6455: LD_INT 700
6457: GREATEREQUAL
6458: AND
6459: PUSH
6460: LD_VAR 0 1
6464: PPUSH
6465: CALL_OW 311
6469: AND
6470: PUSH
6471: LD_VAR 0 1
6475: PPUSH
6476: CALL_OW 314
6480: NOT
6481: AND
6482: IFFALSE 6535
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6484: LD_INT 18
6486: PPUSH
6487: LD_INT 22
6489: PUSH
6490: LD_INT 3
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PPUSH
6497: CALL_OW 70
6501: IFFALSE 6520
// ComAgressiveMove ( i , 167 , 231 ) else
6503: LD_VAR 0 1
6507: PPUSH
6508: LD_INT 167
6510: PPUSH
6511: LD_INT 231
6513: PPUSH
6514: CALL_OW 114
6518: GO 6535
// ComAgressiveMove ( i , 106 , 153 ) ;
6520: LD_VAR 0 1
6524: PPUSH
6525: LD_INT 106
6527: PPUSH
6528: LD_INT 153
6530: PPUSH
6531: CALL_OW 114
// end ; end ;
6535: GO 5901
6537: POP
6538: POP
// until not omarSquad ;
6539: LD_EXP 47
6543: NOT
6544: IFFALSE 5854
// end ; end_of_file
6546: PPOPN 2
6548: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
6549: LD_INT 0
6551: PPUSH
// uc_side := side ;
6552: LD_ADDR_OWVAR 20
6556: PUSH
6557: LD_VAR 0 1
6561: ST_TO_ADDR
// uc_nation := nation ;
6562: LD_ADDR_OWVAR 21
6566: PUSH
6567: LD_VAR 0 2
6571: ST_TO_ADDR
// vc_chassis := chassis ;
6572: LD_ADDR_OWVAR 37
6576: PUSH
6577: LD_VAR 0 3
6581: ST_TO_ADDR
// vc_engine := engine ;
6582: LD_ADDR_OWVAR 39
6586: PUSH
6587: LD_VAR 0 4
6591: ST_TO_ADDR
// vc_control := control ;
6592: LD_ADDR_OWVAR 38
6596: PUSH
6597: LD_VAR 0 5
6601: ST_TO_ADDR
// vc_weapon := weapon ;
6602: LD_ADDR_OWVAR 40
6606: PUSH
6607: LD_VAR 0 6
6611: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6612: LD_ADDR_OWVAR 41
6616: PUSH
6617: LD_VAR 0 7
6621: ST_TO_ADDR
// result := CreateVehicle ;
6622: LD_ADDR_VAR 0 8
6626: PUSH
6627: CALL_OW 45
6631: ST_TO_ADDR
// end ;
6632: LD_VAR 0 8
6636: RET
// export function SayX ( units , ident ) ; var i ; begin
6637: LD_INT 0
6639: PPUSH
6640: PPUSH
// result := false ;
6641: LD_ADDR_VAR 0 3
6645: PUSH
6646: LD_INT 0
6648: ST_TO_ADDR
// if not units then
6649: LD_VAR 0 1
6653: NOT
6654: IFFALSE 6658
// exit ;
6656: GO 6712
// for i in units do
6658: LD_ADDR_VAR 0 4
6662: PUSH
6663: LD_VAR 0 1
6667: PUSH
6668: FOR_IN
6669: IFFALSE 6710
// if IsOk ( i ) then
6671: LD_VAR 0 4
6675: PPUSH
6676: CALL_OW 302
6680: IFFALSE 6708
// begin Say ( i , ident ) ;
6682: LD_VAR 0 4
6686: PPUSH
6687: LD_VAR 0 2
6691: PPUSH
6692: CALL_OW 88
// result := i ;
6696: LD_ADDR_VAR 0 3
6700: PUSH
6701: LD_VAR 0 4
6705: ST_TO_ADDR
// break ;
6706: GO 6710
// end ;
6708: GO 6668
6710: POP
6711: POP
// end ;
6712: LD_VAR 0 3
6716: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
6717: LD_INT 0
6719: PPUSH
6720: PPUSH
// InitUc ;
6721: CALL_OW 18
// InitHc ;
6725: CALL_OW 19
// uc_side := 0 ;
6729: LD_ADDR_OWVAR 20
6733: PUSH
6734: LD_INT 0
6736: ST_TO_ADDR
// uc_nation := 0 ;
6737: LD_ADDR_OWVAR 21
6741: PUSH
6742: LD_INT 0
6744: ST_TO_ADDR
// for i = 1 to amount do
6745: LD_ADDR_VAR 0 4
6749: PUSH
6750: DOUBLE
6751: LD_INT 1
6753: DEC
6754: ST_TO_ADDR
6755: LD_VAR 0 2
6759: PUSH
6760: FOR_TO
6761: IFFALSE 6843
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
6763: LD_ADDR_OWVAR 29
6767: PUSH
6768: LD_INT 9
6770: PPUSH
6771: LD_INT 12
6773: PPUSH
6774: CALL_OW 12
6778: PUSH
6779: LD_INT 9
6781: PPUSH
6782: LD_INT 12
6784: PPUSH
6785: CALL_OW 12
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
6794: LD_ADDR_OWVAR 35
6798: PUSH
6799: LD_INT 1
6801: NEG
6802: PPUSH
6803: LD_INT 1
6805: PPUSH
6806: CALL_OW 12
6810: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
6811: LD_INT 0
6813: PPUSH
6814: LD_INT 12
6816: PPUSH
6817: LD_INT 1
6819: PPUSH
6820: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
6824: CALL_OW 44
6828: PPUSH
6829: LD_VAR 0 1
6833: PPUSH
6834: LD_INT 0
6836: PPUSH
6837: CALL_OW 49
// end ;
6841: GO 6760
6843: POP
6844: POP
// InitHc ;
6845: CALL_OW 19
// end ;
6849: LD_VAR 0 3
6853: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
6854: LD_INT 0
6856: PPUSH
6857: PPUSH
// uc_side := 0 ;
6858: LD_ADDR_OWVAR 20
6862: PUSH
6863: LD_INT 0
6865: ST_TO_ADDR
// uc_nation := 0 ;
6866: LD_ADDR_OWVAR 21
6870: PUSH
6871: LD_INT 0
6873: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
6874: LD_INT 7
6876: PPUSH
6877: LD_INT 6
6879: PUSH
6880: LD_INT 5
6882: PUSH
6883: LD_INT 4
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: PUSH
6891: LD_OWVAR 67
6895: ARRAY
6896: PPUSH
6897: CALL 6717 0 2
// for i = 1 to 2 do
6901: LD_ADDR_VAR 0 4
6905: PUSH
6906: DOUBLE
6907: LD_INT 1
6909: DEC
6910: ST_TO_ADDR
6911: LD_INT 2
6913: PUSH
6914: FOR_TO
6915: IFFALSE 6954
// begin vc_chassis := class_mastodont ;
6917: LD_ADDR_OWVAR 37
6921: PUSH
6922: LD_EXP 75
6926: ST_TO_ADDR
// vc_control := control_rider ;
6927: LD_ADDR_OWVAR 38
6931: PUSH
6932: LD_INT 4
6934: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
6935: CALL_OW 45
6939: PPUSH
6940: LD_VAR 0 1
6944: PPUSH
6945: LD_INT 0
6947: PPUSH
6948: CALL 60270 0 3
// end ;
6952: GO 6914
6954: POP
6955: POP
// for i := 1 to 4 do
6956: LD_ADDR_VAR 0 4
6960: PUSH
6961: DOUBLE
6962: LD_INT 1
6964: DEC
6965: ST_TO_ADDR
6966: LD_INT 4
6968: PUSH
6969: FOR_TO
6970: IFFALSE 7009
// begin hc_class := class_horse ;
6972: LD_ADDR_OWVAR 28
6976: PUSH
6977: LD_EXP 76
6981: ST_TO_ADDR
// hc_gallery :=  ;
6982: LD_ADDR_OWVAR 33
6986: PUSH
6987: LD_STRING 
6989: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
6990: CALL_OW 44
6994: PPUSH
6995: LD_VAR 0 1
6999: PPUSH
7000: LD_INT 0
7002: PPUSH
7003: CALL_OW 49
// end ;
7007: GO 6969
7009: POP
7010: POP
// for i = 1 to 5 do
7011: LD_ADDR_VAR 0 4
7015: PUSH
7016: DOUBLE
7017: LD_INT 1
7019: DEC
7020: ST_TO_ADDR
7021: LD_INT 5
7023: PUSH
7024: FOR_TO
7025: IFFALSE 7079
// begin hc_class = class_tiger ;
7027: LD_ADDR_OWVAR 28
7031: PUSH
7032: LD_INT 14
7034: ST_TO_ADDR
// hc_gallery =  ;
7035: LD_ADDR_OWVAR 33
7039: PUSH
7040: LD_STRING 
7042: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
7043: LD_ADDR_OWVAR 35
7047: PUSH
7048: LD_INT 7
7050: NEG
7051: PPUSH
7052: LD_INT 7
7054: PPUSH
7055: CALL_OW 12
7059: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
7060: CALL_OW 44
7064: PPUSH
7065: LD_VAR 0 1
7069: PPUSH
7070: LD_INT 0
7072: PPUSH
7073: CALL 60270 0 3
// end ;
7077: GO 7024
7079: POP
7080: POP
// for i := 1 to 4 do
7081: LD_ADDR_VAR 0 4
7085: PUSH
7086: DOUBLE
7087: LD_INT 1
7089: DEC
7090: ST_TO_ADDR
7091: LD_INT 4
7093: PUSH
7094: FOR_TO
7095: IFFALSE 7132
// begin hc_class := class_phororhacos ;
7097: LD_ADDR_OWVAR 28
7101: PUSH
7102: LD_INT 18
7104: ST_TO_ADDR
// hc_gallery :=  ;
7105: LD_ADDR_OWVAR 33
7109: PUSH
7110: LD_STRING 
7112: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7113: CALL_OW 44
7117: PPUSH
7118: LD_VAR 0 1
7122: PPUSH
7123: LD_INT 0
7125: PPUSH
7126: CALL_OW 49
// end ;
7130: GO 7094
7132: POP
7133: POP
// for i := 1 to 4 do
7134: LD_ADDR_VAR 0 4
7138: PUSH
7139: DOUBLE
7140: LD_INT 1
7142: DEC
7143: ST_TO_ADDR
7144: LD_INT 4
7146: PUSH
7147: FOR_TO
7148: IFFALSE 7185
// begin hc_class := class_baggie ;
7150: LD_ADDR_OWVAR 28
7154: PUSH
7155: LD_INT 13
7157: ST_TO_ADDR
// hc_gallery :=  ;
7158: LD_ADDR_OWVAR 33
7162: PUSH
7163: LD_STRING 
7165: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7166: CALL_OW 44
7170: PPUSH
7171: LD_VAR 0 1
7175: PPUSH
7176: LD_INT 0
7178: PPUSH
7179: CALL_OW 49
// end ;
7183: GO 7147
7185: POP
7186: POP
// for i := 1 to 7 do
7187: LD_ADDR_VAR 0 4
7191: PUSH
7192: DOUBLE
7193: LD_INT 1
7195: DEC
7196: ST_TO_ADDR
7197: LD_INT 7
7199: PUSH
7200: FOR_TO
7201: IFFALSE 7238
// begin hc_class := class_frog ;
7203: LD_ADDR_OWVAR 28
7207: PUSH
7208: LD_INT 19
7210: ST_TO_ADDR
// hc_gallery :=  ;
7211: LD_ADDR_OWVAR 33
7215: PUSH
7216: LD_STRING 
7218: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
7219: CALL_OW 44
7223: PPUSH
7224: LD_VAR 0 2
7228: PPUSH
7229: LD_INT 0
7231: PPUSH
7232: CALL_OW 49
// end ;
7236: GO 7200
7238: POP
7239: POP
// end ;
7240: LD_VAR 0 3
7244: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
7245: LD_INT 0
7247: PPUSH
7248: PPUSH
7249: PPUSH
// if not observer or not unit then
7250: LD_VAR 0 1
7254: NOT
7255: PUSH
7256: LD_VAR 0 2
7260: NOT
7261: OR
7262: IFFALSE 7266
// exit ;
7264: GO 7314
// if not See ( GetSide ( observer ) , unit ) then
7266: LD_VAR 0 1
7270: PPUSH
7271: CALL_OW 255
7275: PPUSH
7276: LD_VAR 0 2
7280: PPUSH
7281: CALL_OW 292
7285: NOT
7286: IFFALSE 7290
// exit ;
7288: GO 7314
// result := GetDistUnits ( observer , unit ) < 12 ;
7290: LD_ADDR_VAR 0 3
7294: PUSH
7295: LD_VAR 0 1
7299: PPUSH
7300: LD_VAR 0 2
7304: PPUSH
7305: CALL_OW 296
7309: PUSH
7310: LD_INT 12
7312: LESS
7313: ST_TO_ADDR
// end ;
7314: LD_VAR 0 3
7318: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
7319: LD_INT 0
7321: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
7322: LD_VAR 0 2
7326: PUSH
7327: LD_INT 1
7329: ARRAY
7330: PPUSH
7331: LD_VAR 0 2
7335: PUSH
7336: LD_INT 2
7338: ARRAY
7339: PPUSH
7340: CALL_OW 488
7344: PUSH
7345: LD_VAR 0 2
7349: PUSH
7350: LD_INT 1
7352: ARRAY
7353: PPUSH
7354: LD_VAR 0 2
7358: PUSH
7359: LD_INT 2
7361: ARRAY
7362: PPUSH
7363: CALL_OW 428
7367: PUSH
7368: LD_INT 0
7370: EQUAL
7371: AND
7372: IFFALSE 7406
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
7374: LD_VAR 0 1
7378: PPUSH
7379: LD_VAR 0 2
7383: PUSH
7384: LD_INT 1
7386: ARRAY
7387: PPUSH
7388: LD_VAR 0 2
7392: PUSH
7393: LD_INT 2
7395: ARRAY
7396: PPUSH
7397: LD_VAR 0 3
7401: PPUSH
7402: CALL_OW 48
// end ;
7406: LD_VAR 0 4
7410: RET
// export function ReverseArray ( array ) ; var i ; begin
7411: LD_INT 0
7413: PPUSH
7414: PPUSH
// if not array then
7415: LD_VAR 0 1
7419: NOT
7420: IFFALSE 7424
// exit ;
7422: GO 7482
// result := [ ] ;
7424: LD_ADDR_VAR 0 2
7428: PUSH
7429: EMPTY
7430: ST_TO_ADDR
// for i := 1 to array do
7431: LD_ADDR_VAR 0 3
7435: PUSH
7436: DOUBLE
7437: LD_INT 1
7439: DEC
7440: ST_TO_ADDR
7441: LD_VAR 0 1
7445: PUSH
7446: FOR_TO
7447: IFFALSE 7480
// result := Insert ( result , 1 , array [ i ] ) ;
7449: LD_ADDR_VAR 0 2
7453: PUSH
7454: LD_VAR 0 2
7458: PPUSH
7459: LD_INT 1
7461: PPUSH
7462: LD_VAR 0 1
7466: PUSH
7467: LD_VAR 0 3
7471: ARRAY
7472: PPUSH
7473: CALL_OW 2
7477: ST_TO_ADDR
7478: GO 7446
7480: POP
7481: POP
// end ;
7482: LD_VAR 0 2
7486: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
7487: LD_INT 0
7489: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
7490: LD_VAR 0 1
7494: PPUSH
7495: LD_VAR 0 2
7499: PPUSH
7500: LD_VAR 0 3
7504: PPUSH
7505: LD_VAR 0 4
7509: PPUSH
7510: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
7514: LD_VAR 0 1
7518: PPUSH
7519: LD_VAR 0 2
7523: PPUSH
7524: LD_VAR 0 3
7528: PPUSH
7529: CALL_OW 331
// end ;
7533: LD_VAR 0 5
7537: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
7538: LD_INT 0
7540: PPUSH
// if not units then
7541: LD_VAR 0 1
7545: NOT
7546: IFFALSE 7550
// exit ;
7548: GO 7633
// result := true ;
7550: LD_ADDR_VAR 0 4
7554: PUSH
7555: LD_INT 1
7557: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
7558: LD_VAR 0 1
7562: PPUSH
7563: LD_INT 26
7565: PUSH
7566: LD_INT 1
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PPUSH
7573: CALL_OW 72
7577: PUSH
7578: LD_INT 1
7580: ARRAY
7581: PPUSH
7582: LD_VAR 0 2
7586: PPUSH
7587: CALL_OW 88
7591: NOT
7592: IFFALSE 7633
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
7594: LD_ADDR_VAR 0 4
7598: PUSH
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_INT 26
7606: PUSH
7607: LD_INT 2
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PPUSH
7614: CALL_OW 72
7618: PUSH
7619: LD_INT 1
7621: ARRAY
7622: PPUSH
7623: LD_VAR 0 3
7627: PPUSH
7628: CALL_OW 88
7632: ST_TO_ADDR
// end ;
7633: LD_VAR 0 4
7637: RET
// export function SeeGroup ( side , group ) ; var i ; begin
7638: LD_INT 0
7640: PPUSH
7641: PPUSH
// if not group then
7642: LD_VAR 0 2
7646: NOT
7647: IFFALSE 7651
// exit ;
7649: GO 7696
// for i in group do
7651: LD_ADDR_VAR 0 4
7655: PUSH
7656: LD_VAR 0 2
7660: PUSH
7661: FOR_IN
7662: IFFALSE 7694
// if See ( side , i ) then
7664: LD_VAR 0 1
7668: PPUSH
7669: LD_VAR 0 4
7673: PPUSH
7674: CALL_OW 292
7678: IFFALSE 7692
// begin result := true ;
7680: LD_ADDR_VAR 0 3
7684: PUSH
7685: LD_INT 1
7687: ST_TO_ADDR
// exit ;
7688: POP
7689: POP
7690: GO 7696
// end ;
7692: GO 7661
7694: POP
7695: POP
// end ; end_of_file
7696: LD_VAR 0 3
7700: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
7701: LD_INT 0
7703: PPUSH
7704: PPUSH
7705: PPUSH
7706: PPUSH
7707: PPUSH
7708: PPUSH
7709: PPUSH
// uc_side := 3 ;
7710: LD_ADDR_OWVAR 20
7714: PUSH
7715: LD_INT 3
7717: ST_TO_ADDR
// uc_nation := 3 ;
7718: LD_ADDR_OWVAR 21
7722: PUSH
7723: LD_INT 3
7725: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
7726: LD_ADDR_EXP 48
7730: PUSH
7731: LD_STRING Morozov
7733: PPUSH
7734: CALL_OW 25
7738: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
7739: LD_EXP 48
7743: PPUSH
7744: LD_INT 52
7746: PPUSH
7747: CALL_OW 52
// if not gaidarKilled then
7751: LD_EXP 7
7755: NOT
7756: IFFALSE 7789
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
7758: LD_ADDR_EXP 49
7762: PUSH
7763: LD_STRING Gaydar
7765: PPUSH
7766: LD_INT 0
7768: PPUSH
7769: LD_STRING 
7771: PPUSH
7772: CALL 24619 0 3
7776: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
7777: LD_EXP 49
7781: PPUSH
7782: LD_INT 52
7784: PPUSH
7785: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
7789: LD_INT 52
7791: PPUSH
7792: LD_STRING lenin
7794: PPUSH
7795: CALL_OW 500
// ruOutsiders := [ ] ;
7799: LD_ADDR_EXP 51
7803: PUSH
7804: EMPTY
7805: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
7806: LD_ADDR_EXP 53
7810: PUSH
7811: EMPTY
7812: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
7813: LD_ADDR_EXP 54
7817: PUSH
7818: EMPTY
7819: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
7820: LD_ADDR_EXP 55
7824: PUSH
7825: EMPTY
7826: ST_TO_ADDR
// ruAttackers := [ ] ;
7827: LD_ADDR_EXP 56
7831: PUSH
7832: EMPTY
7833: ST_TO_ADDR
// waveStrength := 0 ;
7834: LD_ADDR_EXP 57
7838: PUSH
7839: LD_INT 0
7841: ST_TO_ADDR
// if not gaidarKilled then
7842: LD_EXP 7
7846: NOT
7847: IFFALSE 7857
// waveStrength := 2 ;
7849: LD_ADDR_EXP 57
7853: PUSH
7854: LD_INT 2
7856: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
7857: LD_ADDR_VAR 0 7
7861: PUSH
7862: LD_INT 22
7864: PUSH
7865: LD_INT 3
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 21
7874: PUSH
7875: LD_INT 3
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PPUSH
7886: CALL_OW 69
7890: ST_TO_ADDR
// for i in tmp do
7891: LD_ADDR_VAR 0 2
7895: PUSH
7896: LD_VAR 0 7
7900: PUSH
7901: FOR_IN
7902: IFFALSE 7935
// SetBLevel ( i , [ 5 , 5 , 6 ] [ Difficulty ] ) ;
7904: LD_VAR 0 2
7908: PPUSH
7909: LD_INT 5
7911: PUSH
7912: LD_INT 5
7914: PUSH
7915: LD_INT 6
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: LIST
7922: PUSH
7923: LD_OWVAR 67
7927: ARRAY
7928: PPUSH
7929: CALL_OW 241
7933: GO 7901
7935: POP
7936: POP
// for i := 1 to 3 do
7937: LD_ADDR_VAR 0 2
7941: PUSH
7942: DOUBLE
7943: LD_INT 1
7945: DEC
7946: ST_TO_ADDR
7947: LD_INT 3
7949: PUSH
7950: FOR_TO
7951: IFFALSE 7989
// begin PrepareHuman ( false , 1 , 0 ) ;
7953: LD_INT 0
7955: PPUSH
7956: LD_INT 1
7958: PPUSH
7959: LD_INT 0
7961: PPUSH
7962: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
7966: CALL_OW 44
7970: PPUSH
7971: LD_INT 75
7973: PPUSH
7974: LD_INT 49
7976: PPUSH
7977: LD_INT 3
7979: PPUSH
7980: LD_INT 0
7982: PPUSH
7983: CALL_OW 50
// end ;
7987: GO 7950
7989: POP
7990: POP
// for i := 1 to 4 do
7991: LD_ADDR_VAR 0 2
7995: PUSH
7996: DOUBLE
7997: LD_INT 1
7999: DEC
8000: ST_TO_ADDR
8001: LD_INT 4
8003: PUSH
8004: FOR_TO
8005: IFFALSE 8051
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
8007: LD_INT 0
8009: PPUSH
8010: LD_INT 1
8012: PPUSH
8013: LD_INT 2
8015: PPUSH
8016: CALL_OW 12
8020: PPUSH
8021: LD_INT 0
8023: PPUSH
8024: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
8028: CALL_OW 44
8032: PPUSH
8033: LD_INT 330
8035: PPUSH
8036: LD_INT 231
8038: PPUSH
8039: LD_INT 5
8041: PPUSH
8042: LD_INT 0
8044: PPUSH
8045: CALL_OW 50
// end ;
8049: GO 8004
8051: POP
8052: POP
// hc_class := 1 ;
8053: LD_ADDR_OWVAR 28
8057: PUSH
8058: LD_INT 1
8060: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
8061: CALL_OW 44
8065: PPUSH
8066: LD_INT 324
8068: PPUSH
8069: LD_INT 219
8071: PPUSH
8072: CALL_OW 428
8076: PPUSH
8077: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
8081: CALL_OW 44
8085: PPUSH
8086: LD_INT 316
8088: PPUSH
8089: LD_INT 223
8091: PPUSH
8092: CALL_OW 428
8096: PPUSH
8097: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
8101: LD_ADDR_VAR 0 7
8105: PUSH
8106: LD_INT 172
8108: PPUSH
8109: LD_INT 198
8111: PPUSH
8112: CALL_OW 428
8116: PPUSH
8117: CALL_OW 274
8121: PUSH
8122: LD_INT 189
8124: PPUSH
8125: LD_INT 156
8127: PPUSH
8128: CALL_OW 428
8132: PPUSH
8133: CALL_OW 274
8137: PUSH
8138: LD_INT 341
8140: PPUSH
8141: LD_INT 232
8143: PPUSH
8144: CALL_OW 428
8148: PPUSH
8149: CALL_OW 274
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: LIST
8158: ST_TO_ADDR
// for i in tmp do
8159: LD_ADDR_VAR 0 2
8163: PUSH
8164: LD_VAR 0 7
8168: PUSH
8169: FOR_IN
8170: IFFALSE 8204
// begin SetResourceType ( i , mat_cans , 200 ) ;
8172: LD_VAR 0 2
8176: PPUSH
8177: LD_INT 1
8179: PPUSH
8180: LD_INT 200
8182: PPUSH
8183: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
8187: LD_VAR 0 2
8191: PPUSH
8192: LD_INT 2
8194: PPUSH
8195: LD_INT 200
8197: PPUSH
8198: CALL_OW 277
// end ;
8202: GO 8169
8204: POP
8205: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 177 , 114 ] , [ 138 , 96 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
8206: LD_ADDR_VAR 0 7
8210: PUSH
8211: LD_INT 198
8213: PUSH
8214: LD_INT 158
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: LD_INT 203
8223: PUSH
8224: LD_INT 166
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PUSH
8231: LD_INT 177
8233: PUSH
8234: LD_INT 114
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PUSH
8241: LD_INT 138
8243: PUSH
8244: LD_INT 96
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: PUSH
8251: LD_INT 181
8253: PUSH
8254: LD_INT 209
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PUSH
8261: LD_INT 178
8263: PUSH
8264: LD_INT 196
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 181
8273: PUSH
8274: LD_INT 212
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: ST_TO_ADDR
// for i := 1 to tmp do
8290: LD_ADDR_VAR 0 2
8294: PUSH
8295: DOUBLE
8296: LD_INT 1
8298: DEC
8299: ST_TO_ADDR
8300: LD_VAR 0 7
8304: PUSH
8305: FOR_TO
8306: IFFALSE 8423
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
8308: LD_INT 0
8310: PPUSH
8311: LD_INT 1
8313: PPUSH
8314: LD_INT 4
8316: PUSH
8317: LD_INT 5
8319: PUSH
8320: LD_INT 6
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: PUSH
8328: LD_OWVAR 67
8332: ARRAY
8333: PPUSH
8334: CALL_OW 380
// un := CreateHuman ;
8338: LD_ADDR_VAR 0 5
8342: PUSH
8343: CALL_OW 44
8347: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
8348: LD_ADDR_VAR 0 4
8352: PUSH
8353: LD_VAR 0 7
8357: PUSH
8358: LD_VAR 0 2
8362: ARRAY
8363: PUSH
8364: LD_INT 1
8366: ARRAY
8367: PPUSH
8368: LD_VAR 0 7
8372: PUSH
8373: LD_VAR 0 2
8377: ARRAY
8378: PUSH
8379: LD_INT 2
8381: ARRAY
8382: PPUSH
8383: CALL_OW 428
8387: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
8388: LD_VAR 0 5
8392: PPUSH
8393: LD_VAR 0 4
8397: PPUSH
8398: CALL 57190 0 1
8402: PPUSH
8403: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8407: LD_VAR 0 5
8411: PPUSH
8412: LD_VAR 0 4
8416: PPUSH
8417: CALL_OW 52
// end ;
8421: GO 8305
8423: POP
8424: POP
// for i := 1 to 3 do
8425: LD_ADDR_VAR 0 2
8429: PUSH
8430: DOUBLE
8431: LD_INT 1
8433: DEC
8434: ST_TO_ADDR
8435: LD_INT 3
8437: PUSH
8438: FOR_TO
8439: IFFALSE 8494
// begin InitHc ;
8441: CALL_OW 19
// uc_nation := 0 ;
8445: LD_ADDR_OWVAR 21
8449: PUSH
8450: LD_INT 0
8452: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
8453: LD_ADDR_OWVAR 28
8457: PUSH
8458: LD_INT 16
8460: ST_TO_ADDR
// un := CreateHuman ;
8461: LD_ADDR_VAR 0 5
8465: PUSH
8466: CALL_OW 44
8470: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
8471: LD_VAR 0 5
8475: PPUSH
8476: LD_INT 194
8478: PPUSH
8479: LD_INT 164
8481: PPUSH
8482: LD_INT 6
8484: PPUSH
8485: LD_INT 0
8487: PPUSH
8488: CALL_OW 50
// end ;
8492: GO 8438
8494: POP
8495: POP
// uc_nation := 3 ;
8496: LD_ADDR_OWVAR 21
8500: PUSH
8501: LD_INT 3
8503: ST_TO_ADDR
// if Difficulty > 1 then
8504: LD_OWVAR 67
8508: PUSH
8509: LD_INT 1
8511: GREATER
8512: IFFALSE 8768
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
8514: LD_INT 24
8516: PPUSH
8517: LD_INT 1
8519: PPUSH
8520: LD_INT 1
8522: PPUSH
8523: LD_INT 44
8525: PPUSH
8526: LD_INT 10
8528: PPUSH
8529: CALL 29483 0 5
// un := CreateVehicle ;
8533: LD_ADDR_VAR 0 5
8537: PUSH
8538: CALL_OW 45
8542: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 162 , 1 , false ) ;
8543: LD_VAR 0 5
8547: PPUSH
8548: LD_INT 199
8550: PPUSH
8551: LD_INT 162
8553: PPUSH
8554: LD_INT 1
8556: PPUSH
8557: LD_INT 0
8559: PPUSH
8560: CALL 63287 0 5
// ComHold ( un ) ;
8564: LD_VAR 0 5
8568: PPUSH
8569: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8573: LD_INT 0
8575: PPUSH
8576: LD_INT 3
8578: PPUSH
8579: LD_INT 4
8581: PPUSH
8582: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8586: CALL_OW 44
8590: PPUSH
8591: LD_VAR 0 5
8595: PPUSH
8596: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8600: LD_INT 24
8602: PPUSH
8603: LD_INT 1
8605: PPUSH
8606: LD_INT 1
8608: PPUSH
8609: LD_INT 45
8611: PPUSH
8612: LD_INT 10
8614: PPUSH
8615: CALL 29483 0 5
// un := CreateVehicle ;
8619: LD_ADDR_VAR 0 5
8623: PUSH
8624: CALL_OW 45
8628: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
8629: LD_VAR 0 5
8633: PPUSH
8634: LD_INT 129
8636: PPUSH
8637: LD_INT 93
8639: PPUSH
8640: LD_INT 1
8642: PPUSH
8643: LD_INT 0
8645: PPUSH
8646: CALL 63287 0 5
// ComHold ( un ) ;
8650: LD_VAR 0 5
8654: PPUSH
8655: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8659: LD_INT 0
8661: PPUSH
8662: LD_INT 3
8664: PPUSH
8665: LD_INT 4
8667: PPUSH
8668: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8672: CALL_OW 44
8676: PPUSH
8677: LD_VAR 0 5
8681: PPUSH
8682: CALL_OW 52
// bc_type := b_armoury ;
8686: LD_ADDR_OWVAR 42
8690: PUSH
8691: LD_INT 4
8693: ST_TO_ADDR
// bc_level := 6 ;
8694: LD_ADDR_OWVAR 43
8698: PUSH
8699: LD_INT 6
8701: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
8702: LD_INT 120
8704: PPUSH
8705: LD_INT 100
8707: PPUSH
8708: LD_INT 5
8710: PPUSH
8711: CALL_OW 47
// for i := 1 to 3 do
8715: LD_ADDR_VAR 0 2
8719: PUSH
8720: DOUBLE
8721: LD_INT 1
8723: DEC
8724: ST_TO_ADDR
8725: LD_INT 3
8727: PUSH
8728: FOR_TO
8729: IFFALSE 8766
// begin PrepareHuman ( false , 1 , 5 ) ;
8731: LD_INT 0
8733: PPUSH
8734: LD_INT 1
8736: PPUSH
8737: LD_INT 5
8739: PPUSH
8740: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
8744: CALL_OW 44
8748: PPUSH
8749: LD_INT 120
8751: PPUSH
8752: LD_INT 100
8754: PPUSH
8755: CALL_OW 428
8759: PPUSH
8760: CALL_OW 52
// end ;
8764: GO 8728
8766: POP
8767: POP
// end ; tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
8768: LD_ADDR_VAR 0 7
8772: PUSH
8773: LD_INT 135
8775: PUSH
8776: LD_INT 100
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: LD_INT 137
8785: PUSH
8786: LD_INT 92
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: ST_TO_ADDR
// for i := 1 to tmp do
8797: LD_ADDR_VAR 0 2
8801: PUSH
8802: DOUBLE
8803: LD_INT 1
8805: DEC
8806: ST_TO_ADDR
8807: LD_VAR 0 7
8811: PUSH
8812: FOR_TO
8813: IFFALSE 8979
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
8815: LD_INT 22
8817: PUSH
8818: LD_INT 22
8820: PUSH
8821: LD_INT 24
8823: PUSH
8824: LD_INT 24
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: PUSH
8833: LD_OWVAR 67
8837: PUSH
8838: LD_INT 0
8840: PPUSH
8841: LD_INT 1
8843: PPUSH
8844: CALL_OW 12
8848: PLUS
8849: ARRAY
8850: PPUSH
8851: LD_INT 1
8853: PPUSH
8854: LD_INT 1
8856: PPUSH
8857: LD_INT 44
8859: PPUSH
8860: LD_INT 25
8862: PPUSH
8863: CALL 29483 0 5
// veh := CreateVehicle ;
8867: LD_ADDR_VAR 0 6
8871: PUSH
8872: CALL_OW 45
8876: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8877: LD_VAR 0 6
8881: PPUSH
8882: LD_INT 2
8884: PPUSH
8885: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
8889: LD_VAR 0 6
8893: PPUSH
8894: LD_VAR 0 7
8898: PUSH
8899: LD_VAR 0 2
8903: ARRAY
8904: PUSH
8905: LD_INT 1
8907: ARRAY
8908: PPUSH
8909: LD_VAR 0 7
8913: PUSH
8914: LD_VAR 0 2
8918: ARRAY
8919: PUSH
8920: LD_INT 2
8922: ARRAY
8923: PPUSH
8924: LD_INT 0
8926: PPUSH
8927: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
8931: LD_INT 0
8933: PPUSH
8934: LD_INT 3
8936: PPUSH
8937: LD_INT 6
8939: PPUSH
8940: CALL_OW 380
// un := CreateHuman ;
8944: LD_ADDR_VAR 0 5
8948: PUSH
8949: CALL_OW 44
8953: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8954: LD_VAR 0 5
8958: PPUSH
8959: LD_VAR 0 6
8963: PPUSH
8964: CALL_OW 52
// ComHold ( veh ) ;
8968: LD_VAR 0 6
8972: PPUSH
8973: CALL_OW 140
// end ;
8977: GO 8812
8979: POP
8980: POP
// tmp := [ 191 , 122 ] ;
8981: LD_ADDR_VAR 0 7
8985: PUSH
8986: LD_INT 191
8988: PUSH
8989: LD_INT 122
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
8996: LD_INT 24
8998: PPUSH
8999: LD_INT 1
9001: PPUSH
9002: LD_INT 1
9004: PPUSH
9005: LD_INT 44
9007: PPUSH
9008: LD_INT 30
9010: PPUSH
9011: CALL 29483 0 5
// ruBlockadeTank := CreateVehicle ;
9015: LD_ADDR_EXP 50
9019: PUSH
9020: CALL_OW 45
9024: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
9025: LD_EXP 50
9029: PPUSH
9030: LD_INT 2
9032: PPUSH
9033: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
9037: LD_EXP 50
9041: PPUSH
9042: LD_INT 191
9044: PPUSH
9045: LD_INT 122
9047: PPUSH
9048: LD_INT 0
9050: PPUSH
9051: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 ] [ Difficulty - 1 ] ) ;
9055: LD_INT 1
9057: PPUSH
9058: LD_INT 5
9060: PUSH
9061: LD_INT 6
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: PUSH
9068: LD_OWVAR 67
9072: PUSH
9073: LD_INT 1
9075: MINUS
9076: ARRAY
9077: PPUSH
9078: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
9082: CALL_OW 44
9086: PPUSH
9087: LD_EXP 50
9091: PPUSH
9092: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
9096: LD_EXP 50
9100: PPUSH
9101: CALL_OW 140
// ruBlockadeSquad := [ ] ;
9105: LD_ADDR_EXP 52
9109: PUSH
9110: EMPTY
9111: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 6 ] [ Difficulty ] do
9112: LD_ADDR_VAR 0 2
9116: PUSH
9117: DOUBLE
9118: LD_INT 1
9120: DEC
9121: ST_TO_ADDR
9122: LD_INT 3
9124: PUSH
9125: LD_INT 4
9127: PUSH
9128: LD_INT 6
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: LIST
9135: PUSH
9136: LD_OWVAR 67
9140: ARRAY
9141: PUSH
9142: FOR_TO
9143: IFFALSE 9255
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
9145: LD_INT 0
9147: PPUSH
9148: LD_INT 1
9150: PPUSH
9151: LD_INT 4
9153: PUSH
9154: LD_INT 5
9156: PUSH
9157: LD_INT 6
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: PUSH
9165: LD_OWVAR 67
9169: ARRAY
9170: PPUSH
9171: CALL_OW 380
// un := CreateHuman ;
9175: LD_ADDR_VAR 0 5
9179: PUSH
9180: CALL_OW 44
9184: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
9185: LD_VAR 0 5
9189: PPUSH
9190: LD_INT 9
9192: PPUSH
9193: LD_INT 0
9195: PPUSH
9196: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
9200: LD_VAR 0 5
9204: PPUSH
9205: LD_INT 198
9207: PPUSH
9208: LD_INT 129
9210: PPUSH
9211: CALL_OW 118
// AddComCrawl ( un ) ;
9215: LD_VAR 0 5
9219: PPUSH
9220: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9224: LD_ADDR_EXP 52
9228: PUSH
9229: LD_EXP 52
9233: PPUSH
9234: LD_EXP 52
9238: PUSH
9239: LD_INT 1
9241: PLUS
9242: PPUSH
9243: LD_VAR 0 5
9247: PPUSH
9248: CALL_OW 1
9252: ST_TO_ADDR
// end ;
9253: GO 9142
9255: POP
9256: POP
// PrepareHuman ( false , 4 , 5 ) ;
9257: LD_INT 0
9259: PPUSH
9260: LD_INT 4
9262: PPUSH
9263: LD_INT 5
9265: PPUSH
9266: CALL_OW 380
// un := CreateHuman ;
9270: LD_ADDR_VAR 0 5
9274: PUSH
9275: CALL_OW 44
9279: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
9280: LD_VAR 0 5
9284: PPUSH
9285: LD_INT 179
9287: PPUSH
9288: LD_INT 113
9290: PPUSH
9291: LD_INT 0
9293: PPUSH
9294: CALL_OW 48
// ComHold ( un ) ;
9298: LD_VAR 0 5
9302: PPUSH
9303: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9307: LD_ADDR_EXP 52
9311: PUSH
9312: LD_EXP 52
9316: PPUSH
9317: LD_EXP 52
9321: PUSH
9322: LD_INT 1
9324: PLUS
9325: PPUSH
9326: LD_VAR 0 5
9330: PPUSH
9331: CALL_OW 1
9335: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
9336: LD_ADDR_VAR 0 7
9340: PUSH
9341: LD_INT 167
9343: PPUSH
9344: LD_INT 243
9346: PPUSH
9347: CALL_OW 428
9351: PPUSH
9352: CALL_OW 274
9356: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
9357: LD_VAR 0 7
9361: PPUSH
9362: LD_INT 1
9364: PPUSH
9365: LD_INT 1000
9367: PPUSH
9368: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
9372: LD_VAR 0 7
9376: PPUSH
9377: LD_INT 2
9379: PPUSH
9380: LD_INT 400
9382: PPUSH
9383: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
9387: LD_ADDR_VAR 0 7
9391: PUSH
9392: LD_INT 169
9394: PPUSH
9395: LD_INT 229
9397: PPUSH
9398: CALL_OW 428
9402: ST_TO_ADDR
// for i := 1 to 3 do
9403: LD_ADDR_VAR 0 2
9407: PUSH
9408: DOUBLE
9409: LD_INT 1
9411: DEC
9412: ST_TO_ADDR
9413: LD_INT 3
9415: PUSH
9416: FOR_TO
9417: IFFALSE 9504
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
9419: LD_INT 0
9421: PPUSH
9422: LD_INT 1
9424: PPUSH
9425: LD_INT 4
9427: PUSH
9428: LD_INT 5
9430: PUSH
9431: LD_INT 5
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: LIST
9438: PUSH
9439: LD_OWVAR 67
9443: ARRAY
9444: PPUSH
9445: CALL_OW 380
// un := CreateHuman ;
9449: LD_ADDR_VAR 0 5
9453: PUSH
9454: CALL_OW 44
9458: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
9459: LD_VAR 0 5
9463: PPUSH
9464: LD_VAR 0 7
9468: PPUSH
9469: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9473: LD_ADDR_EXP 53
9477: PUSH
9478: LD_EXP 53
9482: PPUSH
9483: LD_EXP 53
9487: PUSH
9488: LD_INT 1
9490: PLUS
9491: PPUSH
9492: LD_VAR 0 5
9496: PPUSH
9497: CALL_OW 1
9501: ST_TO_ADDR
// end ;
9502: GO 9416
9504: POP
9505: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
9506: LD_ADDR_VAR 0 7
9510: PUSH
9511: LD_INT 165
9513: PUSH
9514: LD_INT 227
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 173
9523: PUSH
9524: LD_INT 231
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: ST_TO_ADDR
// for i := 1 to tmp do
9535: LD_ADDR_VAR 0 2
9539: PUSH
9540: DOUBLE
9541: LD_INT 1
9543: DEC
9544: ST_TO_ADDR
9545: LD_VAR 0 7
9549: PUSH
9550: FOR_TO
9551: IFFALSE 9668
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
9553: LD_INT 0
9555: PPUSH
9556: LD_INT 1
9558: PPUSH
9559: LD_INT 4
9561: PUSH
9562: LD_INT 5
9564: PUSH
9565: LD_INT 5
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: LD_OWVAR 67
9577: ARRAY
9578: PPUSH
9579: CALL_OW 380
// un := CreateHuman ;
9583: LD_ADDR_VAR 0 5
9587: PUSH
9588: CALL_OW 44
9592: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
9593: LD_VAR 0 5
9597: PPUSH
9598: LD_VAR 0 7
9602: PUSH
9603: LD_VAR 0 2
9607: ARRAY
9608: PUSH
9609: LD_INT 1
9611: ARRAY
9612: PPUSH
9613: LD_VAR 0 7
9617: PUSH
9618: LD_VAR 0 2
9622: ARRAY
9623: PUSH
9624: LD_INT 2
9626: ARRAY
9627: PPUSH
9628: CALL_OW 428
9632: PPUSH
9633: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9637: LD_ADDR_EXP 53
9641: PUSH
9642: LD_EXP 53
9646: PPUSH
9647: LD_EXP 53
9651: PUSH
9652: LD_INT 1
9654: PLUS
9655: PPUSH
9656: LD_VAR 0 5
9660: PPUSH
9661: CALL_OW 1
9665: ST_TO_ADDR
// end ;
9666: GO 9550
9668: POP
9669: POP
// for i := 1 to 2 do
9670: LD_ADDR_VAR 0 2
9674: PUSH
9675: DOUBLE
9676: LD_INT 1
9678: DEC
9679: ST_TO_ADDR
9680: LD_INT 2
9682: PUSH
9683: FOR_TO
9684: IFFALSE 9739
// begin InitHc ;
9686: CALL_OW 19
// uc_nation := 0 ;
9690: LD_ADDR_OWVAR 21
9694: PUSH
9695: LD_INT 0
9697: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
9698: LD_ADDR_OWVAR 28
9702: PUSH
9703: LD_INT 16
9705: ST_TO_ADDR
// un := CreateHuman ;
9706: LD_ADDR_VAR 0 5
9710: PUSH
9711: CALL_OW 44
9715: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
9716: LD_VAR 0 5
9720: PPUSH
9721: LD_INT 166
9723: PPUSH
9724: LD_INT 233
9726: PPUSH
9727: LD_INT 2
9729: PPUSH
9730: LD_INT 0
9732: PPUSH
9733: CALL_OW 50
// end ;
9737: GO 9683
9739: POP
9740: POP
// uc_nation := 3 ;
9741: LD_ADDR_OWVAR 21
9745: PUSH
9746: LD_INT 3
9748: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
9749: LD_ADDR_VAR 0 7
9753: PUSH
9754: LD_INT 71
9756: PUSH
9757: LD_INT 52
9759: PUSH
9760: LD_INT 11
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: ST_TO_ADDR
// for i in tmp do
9768: LD_ADDR_VAR 0 2
9772: PUSH
9773: LD_VAR 0 7
9777: PUSH
9778: FOR_IN
9779: IFFALSE 9823
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
9781: LD_VAR 0 2
9785: PPUSH
9786: CALL_OW 274
9790: PPUSH
9791: LD_INT 1
9793: PPUSH
9794: LD_INT 3000
9796: PPUSH
9797: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
9801: LD_VAR 0 2
9805: PPUSH
9806: CALL_OW 274
9810: PPUSH
9811: LD_INT 2
9813: PPUSH
9814: LD_INT 600
9816: PPUSH
9817: CALL_OW 277
// end ;
9821: GO 9778
9823: POP
9824: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
9825: LD_ADDR_VAR 0 7
9829: PUSH
9830: LD_INT 41
9832: PUSH
9833: LD_INT 57
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 38
9842: PUSH
9843: LD_INT 55
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 50
9852: PUSH
9853: LD_INT 73
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PUSH
9860: LD_INT 51
9862: PUSH
9863: LD_INT 65
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: LD_INT 82
9872: PUSH
9873: LD_INT 93
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: LD_INT 87
9882: PUSH
9883: LD_INT 100
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 91
9892: PUSH
9893: LD_INT 109
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: LD_INT 84
9902: PUSH
9903: LD_INT 120
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PUSH
9910: LD_INT 113
9912: PUSH
9913: LD_INT 153
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PUSH
9920: LD_INT 123
9922: PUSH
9923: LD_INT 171
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: LD_INT 125
9932: PUSH
9933: LD_INT 178
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PUSH
9940: LD_INT 125
9942: PUSH
9943: LD_INT 188
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 125
9952: PUSH
9953: LD_INT 201
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 33
9962: PUSH
9963: LD_INT 60
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 76
9972: PUSH
9973: LD_INT 95
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 84
9982: PUSH
9983: LD_INT 111
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: PUSH
9990: LD_INT 112
9992: PUSH
9993: LD_INT 165
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: ST_TO_ADDR
// for i := 1 to tmp do
10019: LD_ADDR_VAR 0 2
10023: PUSH
10024: DOUBLE
10025: LD_INT 1
10027: DEC
10028: ST_TO_ADDR
10029: LD_VAR 0 7
10033: PUSH
10034: FOR_TO
10035: IFFALSE 10274
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10037: LD_ADDR_VAR 0 4
10041: PUSH
10042: LD_VAR 0 7
10046: PUSH
10047: LD_VAR 0 2
10051: ARRAY
10052: PUSH
10053: LD_INT 1
10055: ARRAY
10056: PPUSH
10057: LD_VAR 0 7
10061: PUSH
10062: LD_VAR 0 2
10066: ARRAY
10067: PUSH
10068: LD_INT 2
10070: ARRAY
10071: PPUSH
10072: CALL_OW 428
10076: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
10077: LD_VAR 0 4
10081: PPUSH
10082: CALL_OW 266
10086: PUSH
10087: LD_INT 4
10089: PUSH
10090: LD_INT 5
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: IN
10097: IFFALSE 10177
// begin for j := 1 to Difficulty do
10099: LD_ADDR_VAR 0 3
10103: PUSH
10104: DOUBLE
10105: LD_INT 1
10107: DEC
10108: ST_TO_ADDR
10109: LD_OWVAR 67
10113: PUSH
10114: FOR_TO
10115: IFFALSE 10173
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10117: LD_INT 0
10119: PPUSH
10120: LD_INT 1
10122: PPUSH
10123: LD_INT 4
10125: PUSH
10126: LD_INT 5
10128: PUSH
10129: LD_INT 5
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: LIST
10136: PUSH
10137: LD_OWVAR 67
10141: ARRAY
10142: PPUSH
10143: CALL_OW 380
// un := CreateHuman ;
10147: LD_ADDR_VAR 0 5
10151: PUSH
10152: CALL_OW 44
10156: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10157: LD_VAR 0 5
10161: PPUSH
10162: LD_VAR 0 4
10166: PPUSH
10167: CALL_OW 52
// end ;
10171: GO 10114
10173: POP
10174: POP
// end else
10175: GO 10243
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10177: LD_INT 0
10179: PPUSH
10180: LD_INT 1
10182: PPUSH
10183: LD_INT 4
10185: PUSH
10186: LD_INT 5
10188: PUSH
10189: LD_INT 5
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: LIST
10196: PUSH
10197: LD_OWVAR 67
10201: ARRAY
10202: PPUSH
10203: CALL_OW 380
// un := CreateHuman ;
10207: LD_ADDR_VAR 0 5
10211: PUSH
10212: CALL_OW 44
10216: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10217: LD_VAR 0 5
10221: PPUSH
10222: LD_VAR 0 4
10226: PPUSH
10227: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
10231: LD_VAR 0 5
10235: PPUSH
10236: LD_INT 9
10238: PPUSH
10239: CALL_OW 336
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10243: LD_ADDR_EXP 54
10247: PUSH
10248: LD_EXP 54
10252: PPUSH
10253: LD_EXP 54
10257: PUSH
10258: LD_INT 1
10260: PLUS
10261: PPUSH
10262: LD_VAR 0 5
10266: PPUSH
10267: CALL_OW 1
10271: ST_TO_ADDR
// end ;
10272: GO 10034
10274: POP
10275: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
10276: LD_ADDR_VAR 0 4
10280: PUSH
10281: LD_INT 10
10283: PPUSH
10284: LD_INT 22
10286: PUSH
10287: LD_INT 3
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 30
10296: PUSH
10297: LD_INT 32
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PUSH
10304: LD_INT 58
10306: PUSH
10307: EMPTY
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: PPUSH
10315: CALL_OW 70
10319: PUSH
10320: FOR_IN
10321: IFFALSE 10447
// begin if not Prob ( [ 40 , 50 , 75 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
10323: LD_INT 40
10325: PUSH
10326: LD_INT 50
10328: PUSH
10329: LD_INT 75
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: LIST
10336: PUSH
10337: LD_OWVAR 67
10341: ARRAY
10342: PUSH
10343: LD_EXP 7
10347: PUSH
10348: LD_INT 10
10350: MUL
10351: MINUS
10352: PPUSH
10353: CALL_OW 13
10357: NOT
10358: IFFALSE 10362
// continue ;
10360: GO 10320
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10362: LD_INT 0
10364: PPUSH
10365: LD_INT 1
10367: PPUSH
10368: LD_INT 4
10370: PUSH
10371: LD_INT 5
10373: PUSH
10374: LD_INT 5
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: LIST
10381: PUSH
10382: LD_OWVAR 67
10386: ARRAY
10387: PPUSH
10388: CALL_OW 380
// un := CreateHuman ;
10392: LD_ADDR_VAR 0 5
10396: PUSH
10397: CALL_OW 44
10401: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10402: LD_VAR 0 5
10406: PPUSH
10407: LD_VAR 0 4
10411: PPUSH
10412: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10416: LD_ADDR_EXP 54
10420: PUSH
10421: LD_EXP 54
10425: PPUSH
10426: LD_EXP 54
10430: PUSH
10431: LD_INT 1
10433: PLUS
10434: PPUSH
10435: LD_VAR 0 5
10439: PPUSH
10440: CALL_OW 1
10444: ST_TO_ADDR
// end ;
10445: GO 10320
10447: POP
10448: POP
// for i := 1 to 5 do
10449: LD_ADDR_VAR 0 2
10453: PUSH
10454: DOUBLE
10455: LD_INT 1
10457: DEC
10458: ST_TO_ADDR
10459: LD_INT 5
10461: PUSH
10462: FOR_TO
10463: IFFALSE 10557
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10465: LD_INT 0
10467: PPUSH
10468: LD_INT 2
10470: PPUSH
10471: LD_INT 4
10473: PUSH
10474: LD_INT 5
10476: PUSH
10477: LD_INT 5
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: LIST
10484: PUSH
10485: LD_OWVAR 67
10489: ARRAY
10490: PPUSH
10491: CALL_OW 380
// un := CreateHuman ;
10495: LD_ADDR_VAR 0 5
10499: PUSH
10500: CALL_OW 44
10504: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
10505: LD_VAR 0 5
10509: PPUSH
10510: LD_INT 66
10512: PPUSH
10513: LD_INT 101
10515: PPUSH
10516: LD_INT 3
10518: PPUSH
10519: LD_INT 0
10521: PPUSH
10522: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10526: LD_ADDR_EXP 54
10530: PUSH
10531: LD_EXP 54
10535: PPUSH
10536: LD_EXP 54
10540: PUSH
10541: LD_INT 1
10543: PLUS
10544: PPUSH
10545: LD_VAR 0 5
10549: PPUSH
10550: CALL_OW 1
10554: ST_TO_ADDR
// end ;
10555: GO 10462
10557: POP
10558: POP
// tmp := [ ruFac1 , ruFac2 ] ;
10559: LD_ADDR_VAR 0 7
10563: PUSH
10564: LD_INT 72
10566: PUSH
10567: LD_INT 12
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: ST_TO_ADDR
// for i := 1 to tmp do
10574: LD_ADDR_VAR 0 2
10578: PUSH
10579: DOUBLE
10580: LD_INT 1
10582: DEC
10583: ST_TO_ADDR
10584: LD_VAR 0 7
10588: PUSH
10589: FOR_TO
10590: IFFALSE 10703
// for j := 1 to 6 do
10592: LD_ADDR_VAR 0 3
10596: PUSH
10597: DOUBLE
10598: LD_INT 1
10600: DEC
10601: ST_TO_ADDR
10602: LD_INT 6
10604: PUSH
10605: FOR_TO
10606: IFFALSE 10699
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10608: LD_INT 0
10610: PPUSH
10611: LD_INT 3
10613: PPUSH
10614: LD_INT 4
10616: PUSH
10617: LD_INT 5
10619: PUSH
10620: LD_INT 5
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: LIST
10627: PUSH
10628: LD_OWVAR 67
10632: ARRAY
10633: PPUSH
10634: CALL_OW 380
// un := CreateHuman ;
10638: LD_ADDR_VAR 0 5
10642: PUSH
10643: CALL_OW 44
10647: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
10648: LD_VAR 0 5
10652: PPUSH
10653: LD_VAR 0 7
10657: PUSH
10658: LD_VAR 0 2
10662: ARRAY
10663: PPUSH
10664: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10668: LD_ADDR_EXP 54
10672: PUSH
10673: LD_EXP 54
10677: PPUSH
10678: LD_EXP 54
10682: PUSH
10683: LD_INT 1
10685: PLUS
10686: PPUSH
10687: LD_VAR 0 5
10691: PPUSH
10692: CALL_OW 1
10696: ST_TO_ADDR
// end ;
10697: GO 10605
10699: POP
10700: POP
10701: GO 10589
10703: POP
10704: POP
// for i := 1 to 3 do
10705: LD_ADDR_VAR 0 2
10709: PUSH
10710: DOUBLE
10711: LD_INT 1
10713: DEC
10714: ST_TO_ADDR
10715: LD_INT 3
10717: PUSH
10718: FOR_TO
10719: IFFALSE 10804
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10721: LD_INT 0
10723: PPUSH
10724: LD_INT 4
10726: PPUSH
10727: LD_INT 4
10729: PUSH
10730: LD_INT 5
10732: PUSH
10733: LD_INT 5
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: PUSH
10741: LD_OWVAR 67
10745: ARRAY
10746: PPUSH
10747: CALL_OW 380
// un := CreateHuman ;
10751: LD_ADDR_VAR 0 5
10755: PUSH
10756: CALL_OW 44
10760: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
10761: LD_VAR 0 5
10765: PPUSH
10766: LD_INT 17
10768: PPUSH
10769: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10773: LD_ADDR_EXP 54
10777: PUSH
10778: LD_EXP 54
10782: PPUSH
10783: LD_EXP 54
10787: PUSH
10788: LD_INT 1
10790: PLUS
10791: PPUSH
10792: LD_VAR 0 5
10796: PPUSH
10797: CALL_OW 1
10801: ST_TO_ADDR
// end ;
10802: GO 10718
10804: POP
10805: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
10806: LD_ADDR_VAR 0 2
10810: PUSH
10811: DOUBLE
10812: LD_INT 1
10814: DEC
10815: ST_TO_ADDR
10816: LD_INT 2
10818: PUSH
10819: LD_INT 3
10821: PUSH
10822: LD_INT 3
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: LIST
10829: PUSH
10830: LD_OWVAR 67
10834: ARRAY
10835: PUSH
10836: FOR_TO
10837: IFFALSE 10957
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
10839: LD_INT 22
10841: PPUSH
10842: LD_INT 1
10844: PPUSH
10845: LD_INT 1
10847: PPUSH
10848: LD_INT 52
10850: PPUSH
10851: LD_INT 100
10853: PPUSH
10854: CALL 29483 0 5
// veh := CreateVehicle ;
10858: LD_ADDR_VAR 0 6
10862: PUSH
10863: CALL_OW 45
10867: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
10868: LD_INT 0
10870: PPUSH
10871: LD_INT 3
10873: PPUSH
10874: LD_INT 4
10876: PPUSH
10877: CALL_OW 380
// un := CreateHuman ;
10881: LD_ADDR_VAR 0 5
10885: PUSH
10886: CALL_OW 44
10890: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
10891: LD_VAR 0 6
10895: PPUSH
10896: LD_INT 107
10898: PPUSH
10899: LD_INT 182
10901: PPUSH
10902: LD_INT 4
10904: PPUSH
10905: LD_INT 0
10907: PPUSH
10908: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10912: LD_VAR 0 5
10916: PPUSH
10917: LD_VAR 0 6
10921: PPUSH
10922: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10926: LD_ADDR_EXP 54
10930: PUSH
10931: LD_EXP 54
10935: PPUSH
10936: LD_EXP 54
10940: PUSH
10941: LD_INT 1
10943: PLUS
10944: PPUSH
10945: LD_VAR 0 5
10949: PPUSH
10950: CALL_OW 1
10954: ST_TO_ADDR
// end ;
10955: GO 10836
10957: POP
10958: POP
// InitHc ;
10959: CALL_OW 19
// for i := 1 to [ 6 , 8 , 10 ] [ Difficulty ] do
10963: LD_ADDR_VAR 0 2
10967: PUSH
10968: DOUBLE
10969: LD_INT 1
10971: DEC
10972: ST_TO_ADDR
10973: LD_INT 6
10975: PUSH
10976: LD_INT 8
10978: PUSH
10979: LD_INT 10
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: LIST
10986: PUSH
10987: LD_OWVAR 67
10991: ARRAY
10992: PUSH
10993: FOR_TO
10994: IFFALSE 11066
// begin uc_nation := 0 ;
10996: LD_ADDR_OWVAR 21
11000: PUSH
11001: LD_INT 0
11003: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
11004: LD_ADDR_OWVAR 28
11008: PUSH
11009: LD_INT 15
11011: ST_TO_ADDR
// un := CreateHuman ;
11012: LD_ADDR_VAR 0 5
11016: PUSH
11017: CALL_OW 44
11021: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
11022: LD_VAR 0 5
11026: PPUSH
11027: LD_INT 269
11029: PUSH
11030: LD_INT 300
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_VAR 0 2
11041: PUSH
11042: LD_INT 2
11044: MOD
11045: PUSH
11046: LD_INT 1
11048: PLUS
11049: ARRAY
11050: PPUSH
11051: LD_INT 182
11053: PPUSH
11054: LD_INT 4
11056: PPUSH
11057: LD_INT 0
11059: PPUSH
11060: CALL_OW 50
// end ;
11064: GO 10993
11066: POP
11067: POP
// uc_nation := 3 ;
11068: LD_ADDR_OWVAR 21
11072: PUSH
11073: LD_INT 3
11075: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
11076: LD_EXP 8
11080: PUSH
11081: LD_INT 10
11083: PUSH
11084: LD_INT 8
11086: PUSH
11087: LD_INT 6
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: LIST
11094: PUSH
11095: LD_OWVAR 67
11099: ARRAY
11100: LESS
11101: IFFALSE 11180
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
11103: LD_INT 21
11105: PPUSH
11106: LD_INT 1
11108: PPUSH
11109: LD_INT 1
11111: PPUSH
11112: LD_INT 51
11114: PPUSH
11115: LD_INT 12
11117: PPUSH
11118: CALL 29483 0 5
// veh := CreateVehicle ;
11122: LD_ADDR_VAR 0 6
11126: PUSH
11127: CALL_OW 45
11131: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
11132: LD_VAR 0 6
11136: PPUSH
11137: LD_INT 269
11139: PPUSH
11140: LD_INT 66
11142: PPUSH
11143: LD_INT 4
11145: PPUSH
11146: LD_INT 0
11148: PPUSH
11149: CALL 63287 0 5
// SetLives ( veh , 333 ) ;
11153: LD_VAR 0 6
11157: PPUSH
11158: LD_INT 333
11160: PPUSH
11161: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
11165: LD_VAR 0 6
11169: PPUSH
11170: LD_INT 2
11172: PPUSH
11173: LD_INT 100
11175: PPUSH
11176: CALL_OW 290
// end ; end ;
11180: LD_VAR 0 1
11184: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
11185: LD_EXP 50
11189: PUSH
11190: LD_EXP 50
11194: PPUSH
11195: CALL_OW 255
11199: PUSH
11200: LD_INT 3
11202: EQUAL
11203: AND
11204: IFFALSE 11367
11206: GO 11208
11208: DISABLE
11209: LD_INT 0
11211: PPUSH
// begin enable ;
11212: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
11213: LD_INT 81
11215: PUSH
11216: LD_INT 3
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 91
11225: PUSH
11226: LD_EXP 50
11230: PUSH
11231: LD_INT 15
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PPUSH
11243: CALL_OW 69
11247: IFFALSE 11327
// begin if not IsDrivenBy ( ruBlockadeTank ) then
11249: LD_EXP 50
11253: PPUSH
11254: CALL_OW 311
11258: NOT
11259: IFFALSE 11325
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
11261: LD_ADDR_VAR 0 1
11265: PUSH
11266: LD_INT 22
11268: PUSH
11269: LD_INT 3
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 21
11278: PUSH
11279: LD_INT 1
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PPUSH
11290: CALL_OW 69
11294: PPUSH
11295: LD_EXP 50
11299: PPUSH
11300: CALL_OW 74
11304: ST_TO_ADDR
// if driver then
11305: LD_VAR 0 1
11309: IFFALSE 11325
// ComEnterUnit ( driver , ruBlockadeTank ) ;
11311: LD_VAR 0 1
11315: PPUSH
11316: LD_EXP 50
11320: PPUSH
11321: CALL_OW 120
// end ; exit ;
11325: GO 11367
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
11327: LD_EXP 50
11331: PPUSH
11332: CALL_OW 256
11336: PUSH
11337: LD_INT 1000
11339: LESS
11340: PUSH
11341: LD_EXP 50
11345: PPUSH
11346: CALL_OW 311
11350: AND
11351: IFFALSE 11367
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
11353: LD_EXP 50
11357: PPUSH
11358: CALL_OW 311
11362: PPUSH
11363: CALL 62847 0 1
// end ;
11367: PPOPN 1
11369: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
11370: LD_EXP 52
11374: PPUSH
11375: LD_INT 3
11377: PUSH
11378: LD_INT 24
11380: PUSH
11381: LD_INT 1000
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PPUSH
11392: CALL_OW 72
11396: PUSH
11397: LD_EXP 52
11401: PPUSH
11402: LD_INT 25
11404: PUSH
11405: LD_INT 4
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 50
11414: PUSH
11415: EMPTY
11416: LIST
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PPUSH
11422: CALL_OW 72
11426: AND
11427: IFFALSE 11615
11429: GO 11431
11431: DISABLE
11432: LD_INT 0
11434: PPUSH
11435: PPUSH
11436: PPUSH
// begin enable ;
11437: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
11438: LD_ADDR_VAR 0 3
11442: PUSH
11443: LD_EXP 52
11447: PPUSH
11448: LD_INT 3
11450: PUSH
11451: LD_INT 24
11453: PUSH
11454: LD_INT 1000
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PPUSH
11465: CALL_OW 72
11469: PPUSH
11470: LD_INT 1
11472: PPUSH
11473: CALL 63087 0 2
11477: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
11478: LD_ADDR_VAR 0 2
11482: PUSH
11483: LD_EXP 52
11487: PPUSH
11488: LD_INT 25
11490: PUSH
11491: LD_INT 4
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PUSH
11498: LD_INT 50
11500: PUSH
11501: EMPTY
11502: LIST
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PPUSH
11508: CALL_OW 72
11512: PUSH
11513: LD_INT 1
11515: ARRAY
11516: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
11517: LD_VAR 0 2
11521: PPUSH
11522: LD_VAR 0 3
11526: PUSH
11527: LD_INT 1
11529: ARRAY
11530: PPUSH
11531: CALL 58586 0 2
11535: NOT
11536: IFFALSE 11615
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
11538: LD_VAR 0 3
11542: PUSH
11543: LD_INT 1
11545: ARRAY
11546: PPUSH
11547: LD_INT 9
11549: PPUSH
11550: CALL_OW 308
11554: NOT
11555: IFFALSE 11573
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
11557: LD_VAR 0 3
11561: PUSH
11562: LD_INT 1
11564: ARRAY
11565: PPUSH
11566: LD_INT 9
11568: PPUSH
11569: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
11573: LD_VAR 0 2
11577: PPUSH
11578: LD_VAR 0 3
11582: PUSH
11583: LD_INT 1
11585: ARRAY
11586: PPUSH
11587: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
11591: LD_VAR 0 2
11595: PPUSH
11596: LD_INT 179
11598: PPUSH
11599: LD_INT 113
11601: PPUSH
11602: CALL_OW 171
// AddComHold ( sci ) ;
11606: LD_VAR 0 2
11610: PPUSH
11611: CALL_OW 200
// end ; end ;
11615: PPOPN 3
11617: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
11618: LD_INT 2
11620: PPUSH
11621: LD_INT 52
11623: PPUSH
11624: CALL_OW 292
11628: IFFALSE 11733
11630: GO 11632
11632: DISABLE
11633: LD_INT 0
11635: PPUSH
11636: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
11637: LD_ADDR_VAR 0 2
11641: PUSH
11642: LD_EXP 54
11646: PPUSH
11647: LD_INT 25
11649: PUSH
11650: LD_INT 1
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 50
11659: PUSH
11660: EMPTY
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PPUSH
11667: CALL_OW 72
11671: ST_TO_ADDR
// if not tmp then
11672: LD_VAR 0 2
11676: NOT
11677: IFFALSE 11681
// exit ;
11679: GO 11733
// for i in tmp do
11681: LD_ADDR_VAR 0 1
11685: PUSH
11686: LD_VAR 0 2
11690: PUSH
11691: FOR_IN
11692: IFFALSE 11731
// begin if IsInUnit ( i ) then
11694: LD_VAR 0 1
11698: PPUSH
11699: CALL_OW 310
11703: IFFALSE 11714
// ComExitBuilding ( i ) ;
11705: LD_VAR 0 1
11709: PPUSH
11710: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
11714: LD_VAR 0 1
11718: PPUSH
11719: LD_INT 84
11721: PPUSH
11722: LD_INT 133
11724: PPUSH
11725: CALL_OW 174
// end ;
11729: GO 11691
11731: POP
11732: POP
// end ;
11733: PPOPN 2
11735: END
// every 0 0$1 trigger leninSpotted do var i , tmp , weapon ;
11736: LD_EXP 14
11740: IFFALSE 11889
11742: GO 11744
11744: DISABLE
11745: LD_INT 0
11747: PPUSH
11748: PPUSH
11749: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
11750: LD_ADDR_VAR 0 2
11754: PUSH
11755: LD_INT 72
11757: PUSH
11758: LD_INT 12
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket , ru_gun ] , [ ru_rocket , ru_heavy_gun ] ] [ Difficulty ] ;
11765: LD_ADDR_VAR 0 3
11769: PUSH
11770: LD_INT 44
11772: PUSH
11773: LD_INT 43
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: LD_INT 47
11782: PUSH
11783: LD_INT 44
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: PUSH
11790: LD_INT 47
11792: PUSH
11793: LD_INT 46
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: LIST
11804: PUSH
11805: LD_OWVAR 67
11809: ARRAY
11810: ST_TO_ADDR
// for i := 1 to 6 do
11811: LD_ADDR_VAR 0 1
11815: PUSH
11816: DOUBLE
11817: LD_INT 1
11819: DEC
11820: ST_TO_ADDR
11821: LD_INT 6
11823: PUSH
11824: FOR_TO
11825: IFFALSE 11887
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
11827: LD_VAR 0 2
11831: PPUSH
11832: LD_INT 22
11834: PUSH
11835: LD_INT 23
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: LD_VAR 0 1
11846: PUSH
11847: LD_INT 2
11849: MOD
11850: PUSH
11851: LD_INT 1
11853: PLUS
11854: ARRAY
11855: PPUSH
11856: LD_INT 1
11858: PPUSH
11859: LD_INT 1
11861: PPUSH
11862: LD_VAR 0 3
11866: PUSH
11867: LD_VAR 0 1
11871: PUSH
11872: LD_INT 2
11874: MOD
11875: PUSH
11876: LD_INT 1
11878: PLUS
11879: ARRAY
11880: PPUSH
11881: CALL_OW 185
11885: GO 11824
11887: POP
11888: POP
// end ;
11889: PPOPN 3
11891: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
11892: LD_EXP 11
11896: IFFALSE 13045
11898: GO 11900
11900: DISABLE
11901: LD_INT 0
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
11907: PPUSH
11908: PPUSH
// begin enable ;
11909: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
11910: LD_ADDR_VAR 0 6
11914: PUSH
11915: LD_INT 10
11917: PPUSH
11918: LD_INT 81
11920: PUSH
11921: LD_INT 3
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PPUSH
11928: CALL_OW 70
11932: ST_TO_ADDR
// if ruSpecialVehicleGroup then
11933: LD_EXP 55
11937: IFFALSE 12203
// begin for i in ruSpecialVehicleGroup do
11939: LD_ADDR_VAR 0 1
11943: PUSH
11944: LD_EXP 55
11948: PUSH
11949: FOR_IN
11950: IFFALSE 12201
// begin if enemyInBase then
11952: LD_VAR 0 6
11956: IFFALSE 12199
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
11958: LD_VAR 0 1
11962: PPUSH
11963: CALL_OW 256
11967: PUSH
11968: LD_INT 500
11970: GREATER
11971: PUSH
11972: LD_VAR 0 1
11976: PPUSH
11977: CALL_OW 110
11981: PUSH
11982: LD_INT 0
11984: EQUAL
11985: AND
11986: IFFALSE 12012
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
11988: LD_VAR 0 1
11992: PPUSH
11993: LD_VAR 0 6
11997: PPUSH
11998: LD_VAR 0 1
12002: PPUSH
12003: CALL_OW 74
12007: PPUSH
12008: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12012: LD_VAR 0 1
12016: PPUSH
12017: CALL_OW 256
12021: PUSH
12022: LD_INT 500
12024: LESSEQUAL
12025: PUSH
12026: LD_VAR 0 1
12030: PPUSH
12031: CALL_OW 110
12035: PUSH
12036: LD_INT 0
12038: EQUAL
12039: AND
12040: IFFALSE 12069
// begin SetTag ( i , 1 ) ;
12042: LD_VAR 0 1
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
12054: LD_VAR 0 1
12058: PPUSH
12059: LD_INT 83
12061: PPUSH
12062: LD_INT 134
12064: PPUSH
12065: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
12069: LD_VAR 0 1
12073: PPUSH
12074: CALL_OW 256
12078: PUSH
12079: LD_INT 1000
12081: LESS
12082: PUSH
12083: LD_VAR 0 1
12087: PPUSH
12088: CALL_OW 110
12092: PUSH
12093: LD_INT 1
12095: EQUAL
12096: AND
12097: PUSH
12098: LD_VAR 0 1
12102: PPUSH
12103: LD_INT 83
12105: PPUSH
12106: LD_INT 134
12108: PPUSH
12109: CALL_OW 297
12113: PUSH
12114: LD_INT 6
12116: LESS
12117: AND
12118: IFFALSE 12146
// begin SetFuel ( i , 100 ) ;
12120: LD_VAR 0 1
12124: PPUSH
12125: LD_INT 100
12127: PPUSH
12128: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12132: LD_VAR 0 1
12136: PPUSH
12137: CALL_OW 310
12141: PPUSH
12142: CALL 62967 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
12146: LD_VAR 0 1
12150: PPUSH
12151: CALL_OW 256
12155: PUSH
12156: LD_INT 1000
12158: EQUAL
12159: PUSH
12160: LD_VAR 0 1
12164: PPUSH
12165: CALL_OW 110
12169: PUSH
12170: LD_INT 1
12172: EQUAL
12173: AND
12174: PUSH
12175: LD_VAR 0 1
12179: PPUSH
12180: CALL_OW 311
12184: AND
12185: IFFALSE 12199
// SetTag ( i , 0 ) ;
12187: LD_VAR 0 1
12191: PPUSH
12192: LD_INT 0
12194: PPUSH
12195: CALL_OW 109
// end ; end ;
12199: GO 11949
12201: POP
12202: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
12203: LD_ADDR_VAR 0 5
12207: PUSH
12208: LD_EXP 54
12212: PPUSH
12213: LD_INT 25
12215: PUSH
12216: LD_INT 4
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: PPUSH
12223: CALL_OW 72
12227: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12228: LD_ADDR_VAR 0 4
12232: PUSH
12233: LD_EXP 54
12237: PPUSH
12238: LD_INT 92
12240: PUSH
12241: LD_INT 92
12243: PUSH
12244: LD_INT 155
12246: PUSH
12247: LD_INT 12
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: PUSH
12256: LD_INT 3
12258: PUSH
12259: LD_INT 24
12261: PUSH
12262: LD_INT 1000
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PPUSH
12277: CALL_OW 72
12281: ST_TO_ADDR
// if sci then
12282: LD_VAR 0 5
12286: IFFALSE 12419
// begin if hurt then
12288: LD_VAR 0 4
12292: IFFALSE 12365
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12294: LD_VAR 0 5
12298: PPUSH
12299: LD_INT 3
12301: PUSH
12302: LD_INT 54
12304: PUSH
12305: EMPTY
12306: LIST
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PPUSH
12312: CALL_OW 72
12316: IFFALSE 12345
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
12318: LD_VAR 0 5
12322: PPUSH
12323: LD_INT 3
12325: PUSH
12326: LD_INT 54
12328: PUSH
12329: EMPTY
12330: LIST
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PPUSH
12336: CALL_OW 72
12340: PPUSH
12341: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
12345: LD_VAR 0 5
12349: PPUSH
12350: LD_VAR 0 4
12354: PUSH
12355: LD_INT 1
12357: ARRAY
12358: PPUSH
12359: CALL_OW 188
// end else
12363: GO 12419
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12365: LD_VAR 0 5
12369: PPUSH
12370: LD_INT 3
12372: PUSH
12373: LD_INT 54
12375: PUSH
12376: EMPTY
12377: LIST
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PPUSH
12383: CALL_OW 72
12387: IFFALSE 12419
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
12389: LD_VAR 0 5
12393: PPUSH
12394: LD_INT 3
12396: PUSH
12397: LD_INT 54
12399: PUSH
12400: EMPTY
12401: LIST
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PPUSH
12407: CALL_OW 72
12411: PPUSH
12412: LD_INT 17
12414: PPUSH
12415: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12419: LD_ADDR_VAR 0 3
12423: PUSH
12424: LD_INT 10
12426: PPUSH
12427: LD_INT 21
12429: PUSH
12430: LD_INT 3
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 3
12439: PUSH
12440: LD_INT 24
12442: PUSH
12443: LD_INT 1000
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PPUSH
12458: CALL_OW 70
12462: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
12463: LD_ADDR_VAR 0 2
12467: PUSH
12468: LD_EXP 54
12472: PPUSH
12473: LD_INT 25
12475: PUSH
12476: LD_INT 2
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PPUSH
12483: CALL_OW 72
12487: PUSH
12488: LD_INT 22
12490: PUSH
12491: LD_INT 3
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 34
12500: PUSH
12501: LD_INT 52
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PPUSH
12512: CALL_OW 69
12516: UNION
12517: ST_TO_ADDR
// if not tmp then
12518: LD_VAR 0 2
12522: NOT
12523: IFFALSE 12527
// exit ;
12525: GO 13045
// for i in tmp do
12527: LD_ADDR_VAR 0 1
12531: PUSH
12532: LD_VAR 0 2
12536: PUSH
12537: FOR_IN
12538: IFFALSE 13043
// begin if GetClass ( i ) = 2 then
12540: LD_VAR 0 1
12544: PPUSH
12545: CALL_OW 257
12549: PUSH
12550: LD_INT 2
12552: EQUAL
12553: IFFALSE 12776
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
12555: LD_VAR 0 1
12559: PPUSH
12560: CALL_OW 256
12564: PUSH
12565: LD_INT 1000
12567: EQUAL
12568: PUSH
12569: LD_VAR 0 1
12573: PPUSH
12574: CALL_OW 110
12578: PUSH
12579: LD_INT 1
12581: EQUAL
12582: AND
12583: IFFALSE 12597
// SetTag ( i , 0 ) ;
12585: LD_VAR 0 1
12589: PPUSH
12590: LD_INT 0
12592: PPUSH
12593: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12597: LD_VAR 0 1
12601: PPUSH
12602: CALL_OW 256
12606: PUSH
12607: LD_INT 500
12609: LESSEQUAL
12610: PUSH
12611: LD_VAR 0 1
12615: PPUSH
12616: CALL_OW 110
12620: PUSH
12621: LD_INT 0
12623: EQUAL
12624: AND
12625: IFFALSE 12654
// begin SetTag ( i , 1 ) ;
12627: LD_VAR 0 1
12631: PPUSH
12632: LD_INT 1
12634: PPUSH
12635: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
12639: LD_VAR 0 1
12643: PPUSH
12644: LD_INT 92
12646: PPUSH
12647: LD_INT 155
12649: PPUSH
12650: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
12654: LD_VAR 0 3
12658: PUSH
12659: LD_VAR 0 1
12663: PPUSH
12664: CALL_OW 256
12668: PUSH
12669: LD_INT 500
12671: GREATER
12672: AND
12673: PUSH
12674: LD_VAR 0 1
12678: PPUSH
12679: CALL_OW 110
12683: PUSH
12684: LD_INT 0
12686: EQUAL
12687: AND
12688: PUSH
12689: LD_VAR 0 1
12693: PPUSH
12694: CALL_OW 314
12698: NOT
12699: AND
12700: IFFALSE 12774
// begin if b then
12702: LD_VAR 0 3
12706: IFFALSE 12738
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
12708: LD_VAR 0 1
12712: PPUSH
12713: LD_VAR 0 3
12717: PUSH
12718: LD_INT 1
12720: PPUSH
12721: LD_VAR 0 3
12725: PPUSH
12726: CALL_OW 12
12730: ARRAY
12731: PPUSH
12732: CALL_OW 130
12736: GO 12774
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
12738: LD_VAR 0 1
12742: PPUSH
12743: LD_INT 94
12745: PPUSH
12746: LD_INT 165
12748: PPUSH
12749: CALL_OW 297
12753: PUSH
12754: LD_INT 8
12756: GREATER
12757: IFFALSE 12774
// ComMoveXY ( i , 94 , 165 ) ;
12759: LD_VAR 0 1
12763: PPUSH
12764: LD_INT 94
12766: PPUSH
12767: LD_INT 165
12769: PPUSH
12770: CALL_OW 111
// end ; end else
12774: GO 13041
// if GetWeapon ( i ) = ru_crane then
12776: LD_VAR 0 1
12780: PPUSH
12781: CALL_OW 264
12785: PUSH
12786: LD_INT 52
12788: EQUAL
12789: IFFALSE 13041
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
12791: LD_VAR 0 1
12795: PPUSH
12796: CALL_OW 256
12800: PUSH
12801: LD_INT 1000
12803: EQUAL
12804: PUSH
12805: LD_VAR 0 1
12809: PPUSH
12810: CALL_OW 110
12814: PUSH
12815: LD_INT 1
12817: EQUAL
12818: AND
12819: IFFALSE 12845
// begin SetTag ( i , 0 ) ;
12821: LD_VAR 0 1
12825: PPUSH
12826: LD_INT 0
12828: PPUSH
12829: CALL_OW 109
// SetFuel ( i , 100 ) ;
12833: LD_VAR 0 1
12837: PPUSH
12838: LD_INT 100
12840: PPUSH
12841: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12845: LD_VAR 0 1
12849: PPUSH
12850: CALL_OW 256
12854: PUSH
12855: LD_INT 500
12857: LESSEQUAL
12858: PUSH
12859: LD_VAR 0 1
12863: PPUSH
12864: CALL_OW 110
12868: PUSH
12869: LD_INT 0
12871: EQUAL
12872: AND
12873: IFFALSE 12916
// begin SetTag ( i , 1 ) ;
12875: LD_VAR 0 1
12879: PPUSH
12880: LD_INT 1
12882: PPUSH
12883: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
12887: LD_VAR 0 1
12891: PPUSH
12892: LD_INT 83
12894: PPUSH
12895: LD_INT 135
12897: PPUSH
12898: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12902: LD_VAR 0 1
12906: PPUSH
12907: CALL_OW 310
12911: PPUSH
12912: CALL 62967 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
12916: LD_VAR 0 1
12920: PPUSH
12921: CALL_OW 256
12925: PUSH
12926: LD_INT 500
12928: GREATER
12929: PUSH
12930: LD_VAR 0 1
12934: PPUSH
12935: CALL_OW 110
12939: PUSH
12940: LD_INT 0
12942: EQUAL
12943: AND
12944: PUSH
12945: LD_VAR 0 1
12949: PPUSH
12950: CALL_OW 311
12954: AND
12955: PUSH
12956: LD_VAR 0 1
12960: PPUSH
12961: CALL_OW 314
12965: NOT
12966: AND
12967: IFFALSE 13041
// begin if b then
12969: LD_VAR 0 3
12973: IFFALSE 13005
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
12975: LD_VAR 0 1
12979: PPUSH
12980: LD_VAR 0 3
12984: PUSH
12985: LD_INT 1
12987: PPUSH
12988: LD_VAR 0 3
12992: PPUSH
12993: CALL_OW 12
12997: ARRAY
12998: PPUSH
12999: CALL_OW 130
13003: GO 13041
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13005: LD_VAR 0 1
13009: PPUSH
13010: LD_INT 94
13012: PPUSH
13013: LD_INT 165
13015: PPUSH
13016: CALL_OW 297
13020: PUSH
13021: LD_INT 8
13023: GREATER
13024: IFFALSE 13041
// ComMoveXY ( i , 94 , 165 ) ;
13026: LD_VAR 0 1
13030: PPUSH
13031: LD_INT 94
13033: PPUSH
13034: LD_INT 165
13036: PPUSH
13037: CALL_OW 111
// end ; end ; end ;
13041: GO 12537
13043: POP
13044: POP
// end ;
13045: PPOPN 6
13047: END
// every 7 7$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp ;
13048: LD_EXP 23
13052: NOT
13053: PUSH
13054: LD_EXP 27
13058: NOT
13059: AND
13060: IFFALSE 13960
13062: GO 13064
13064: DISABLE
13065: LD_INT 0
13067: PPUSH
13068: PPUSH
13069: PPUSH
13070: PPUSH
// begin enable ;
13071: ENABLE
// if Prob ( [ 35 , 45 , 55 ] [ Difficulty ] ) then
13072: LD_INT 35
13074: PUSH
13075: LD_INT 45
13077: PUSH
13078: LD_INT 55
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: LIST
13085: PUSH
13086: LD_OWVAR 67
13090: ARRAY
13091: PPUSH
13092: CALL_OW 13
13096: IFFALSE 13112
// waveStrength := waveStrength + 1 ;
13098: LD_ADDR_EXP 57
13102: PUSH
13103: LD_EXP 57
13107: PUSH
13108: LD_INT 1
13110: PLUS
13111: ST_TO_ADDR
// if waveStrength > [ 4 , 5 , 6 ] [ Difficulty ] then
13112: LD_EXP 57
13116: PUSH
13117: LD_INT 4
13119: PUSH
13120: LD_INT 5
13122: PUSH
13123: LD_INT 6
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: PUSH
13131: LD_OWVAR 67
13135: ARRAY
13136: GREATER
13137: IFFALSE 13170
// begin waveStrength := waveStrength + Difficulty ;
13139: LD_ADDR_EXP 57
13143: PUSH
13144: LD_EXP 57
13148: PUSH
13149: LD_OWVAR 67
13153: PLUS
13154: ST_TO_ADDR
// disableAttackOnHeike := true ;
13155: LD_ADDR_EXP 27
13159: PUSH
13160: LD_INT 1
13162: ST_TO_ADDR
// wait ( 3 3$00 ) ;
13163: LD_INT 6300
13165: PPUSH
13166: CALL_OW 67
// end ; if disableAttackOnHeike and Difficulty > 1 then
13170: LD_EXP 27
13174: PUSH
13175: LD_OWVAR 67
13179: PUSH
13180: LD_INT 1
13182: GREATER
13183: AND
13184: IFFALSE 13389
// begin for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
13186: LD_ADDR_VAR 0 1
13190: PUSH
13191: DOUBLE
13192: LD_INT 1
13194: DEC
13195: ST_TO_ADDR
13196: LD_INT 3
13198: PUSH
13199: LD_INT 3
13201: PUSH
13202: LD_INT 4
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: LIST
13209: PUSH
13210: LD_OWVAR 67
13214: ARRAY
13215: PUSH
13216: FOR_TO
13217: IFFALSE 13387
// begin InitHc ;
13219: CALL_OW 19
// InitVc ;
13223: CALL_OW 20
// uc_side := 3 ;
13227: LD_ADDR_OWVAR 20
13231: PUSH
13232: LD_INT 3
13234: ST_TO_ADDR
// uc_nation := 3 ;
13235: LD_ADDR_OWVAR 21
13239: PUSH
13240: LD_INT 3
13242: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
13243: LD_INT 0
13245: PPUSH
13246: LD_INT 1
13248: PPUSH
13249: LD_OWVAR 67
13253: PUSH
13254: LD_INT 2
13256: PLUS
13257: PPUSH
13258: CALL_OW 380
// un := CreateHuman ;
13262: LD_ADDR_VAR 0 2
13266: PUSH
13267: CALL_OW 44
13271: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
13272: LD_VAR 0 2
13276: PPUSH
13277: LD_INT 160
13279: PPUSH
13280: LD_INT 3
13282: PPUSH
13283: LD_INT 2
13285: PPUSH
13286: LD_INT 0
13288: PPUSH
13289: CALL 63287 0 5
// SetClass ( un , class_bazooker ) ;
13293: LD_VAR 0 2
13297: PPUSH
13298: LD_INT 9
13300: PPUSH
13301: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13305: LD_ADDR_EXP 56
13309: PUSH
13310: LD_EXP 56
13314: PPUSH
13315: LD_EXP 56
13319: PUSH
13320: LD_INT 1
13322: PLUS
13323: PPUSH
13324: LD_VAR 0 2
13328: PPUSH
13329: CALL_OW 1
13333: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13334: LD_VAR 0 2
13338: PPUSH
13339: LD_INT 177
13341: PPUSH
13342: LD_INT 17
13344: PPUSH
13345: CALL_OW 111
// wait ( 0 0$2 ) ;
13349: LD_INT 70
13351: PPUSH
13352: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13356: LD_ADDR_VAR 0 4
13360: PUSH
13361: LD_VAR 0 4
13365: PPUSH
13366: LD_VAR 0 4
13370: PUSH
13371: LD_INT 1
13373: PLUS
13374: PPUSH
13375: LD_VAR 0 2
13379: PPUSH
13380: CALL_OW 1
13384: ST_TO_ADDR
// end ;
13385: GO 13216
13387: POP
13388: POP
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] + waveStrength do
13389: LD_ADDR_VAR 0 1
13393: PUSH
13394: DOUBLE
13395: LD_INT 1
13397: DEC
13398: ST_TO_ADDR
13399: LD_INT 2
13401: PUSH
13402: LD_INT 3
13404: PUSH
13405: LD_INT 4
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: LIST
13412: PUSH
13413: LD_OWVAR 67
13417: ARRAY
13418: PUSH
13419: LD_EXP 57
13423: PLUS
13424: PUSH
13425: FOR_TO
13426: IFFALSE 13735
// begin InitHc ;
13428: CALL_OW 19
// InitVc ;
13432: CALL_OW 20
// uc_side := 3 ;
13436: LD_ADDR_OWVAR 20
13440: PUSH
13441: LD_INT 3
13443: ST_TO_ADDR
// uc_nation := 3 ;
13444: LD_ADDR_OWVAR 21
13448: PUSH
13449: LD_INT 3
13451: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
13452: LD_INT 22
13454: PUSH
13455: LD_INT 23
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PUSH
13462: LD_INT 1
13464: PPUSH
13465: LD_INT 2
13467: PPUSH
13468: CALL_OW 12
13472: ARRAY
13473: PPUSH
13474: LD_INT 1
13476: PPUSH
13477: LD_INT 1
13479: PPUSH
13480: LD_INT 44
13482: PUSH
13483: LD_INT 45
13485: PUSH
13486: LD_INT 43
13488: PUSH
13489: LD_INT 42
13491: PUSH
13492: LD_INT 44
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 1
13504: PPUSH
13505: LD_INT 5
13507: PPUSH
13508: CALL_OW 12
13512: ARRAY
13513: PPUSH
13514: LD_INT 99
13516: PPUSH
13517: CALL 29483 0 5
// veh := CreateVehicle ;
13521: LD_ADDR_VAR 0 3
13525: PUSH
13526: CALL_OW 45
13530: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
13531: LD_VAR 0 3
13535: PPUSH
13536: LD_INT 160
13538: PPUSH
13539: LD_INT 3
13541: PPUSH
13542: LD_INT 2
13544: PPUSH
13545: LD_INT 0
13547: PPUSH
13548: CALL 63287 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
13552: LD_ADDR_EXP 56
13556: PUSH
13557: LD_EXP 56
13561: PPUSH
13562: LD_EXP 56
13566: PUSH
13567: LD_INT 1
13569: PLUS
13570: PPUSH
13571: LD_VAR 0 3
13575: PPUSH
13576: CALL_OW 1
13580: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
13581: LD_INT 0
13583: PPUSH
13584: LD_INT 3
13586: PPUSH
13587: LD_OWVAR 67
13591: PUSH
13592: LD_INT 2
13594: PLUS
13595: PPUSH
13596: CALL_OW 380
// un := CreateHuman ;
13600: LD_ADDR_VAR 0 2
13604: PUSH
13605: CALL_OW 44
13609: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13610: LD_VAR 0 2
13614: PPUSH
13615: LD_VAR 0 3
13619: PPUSH
13620: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13624: LD_ADDR_EXP 56
13628: PUSH
13629: LD_EXP 56
13633: PPUSH
13634: LD_EXP 56
13638: PUSH
13639: LD_INT 1
13641: PLUS
13642: PPUSH
13643: LD_VAR 0 2
13647: PPUSH
13648: CALL_OW 1
13652: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13653: LD_VAR 0 2
13657: PPUSH
13658: LD_INT 177
13660: PPUSH
13661: LD_INT 17
13663: PPUSH
13664: CALL_OW 111
// wait ( 0 0$2 ) ;
13668: LD_INT 70
13670: PPUSH
13671: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
13675: LD_ADDR_VAR 0 4
13679: PUSH
13680: LD_VAR 0 4
13684: PPUSH
13685: LD_VAR 0 4
13689: PUSH
13690: LD_INT 1
13692: PLUS
13693: PPUSH
13694: LD_VAR 0 3
13698: PPUSH
13699: CALL_OW 1
13703: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13704: LD_ADDR_VAR 0 4
13708: PUSH
13709: LD_VAR 0 4
13713: PPUSH
13714: LD_VAR 0 4
13718: PUSH
13719: LD_INT 1
13721: PLUS
13722: PPUSH
13723: LD_VAR 0 2
13727: PPUSH
13728: CALL_OW 1
13732: ST_TO_ADDR
// end ;
13733: GO 13425
13735: POP
13736: POP
// for i in tmp do
13737: LD_ADDR_VAR 0 1
13741: PUSH
13742: LD_VAR 0 4
13746: PUSH
13747: FOR_IN
13748: IFFALSE 13838
// begin if Prob ( 50 ) then
13750: LD_INT 50
13752: PPUSH
13753: CALL_OW 13
13757: IFFALSE 13776
// ComAgressiveMove ( i , 206 , 73 ) else
13759: LD_VAR 0 1
13763: PPUSH
13764: LD_INT 206
13766: PPUSH
13767: LD_INT 73
13769: PPUSH
13770: CALL_OW 114
13774: GO 13836
// begin ComAgressiveMove ( i , 206 , 73 ) ;
13776: LD_VAR 0 1
13780: PPUSH
13781: LD_INT 206
13783: PPUSH
13784: LD_INT 73
13786: PPUSH
13787: CALL_OW 114
// AddComAgressiveMove ( i , 257 , 105 ) ;
13791: LD_VAR 0 1
13795: PPUSH
13796: LD_INT 257
13798: PPUSH
13799: LD_INT 105
13801: PPUSH
13802: CALL_OW 174
// AddComAgressiveMove ( i , 227 , 97 ) ;
13806: LD_VAR 0 1
13810: PPUSH
13811: LD_INT 227
13813: PPUSH
13814: LD_INT 97
13816: PPUSH
13817: CALL_OW 174
// AddComAgressiveMove ( i , 206 , 73 ) ;
13821: LD_VAR 0 1
13825: PPUSH
13826: LD_INT 206
13828: PPUSH
13829: LD_INT 73
13831: PPUSH
13832: CALL_OW 174
// end ; end ;
13836: GO 13747
13838: POP
13839: POP
// repeat wait ( 0 0$1 ) ;
13840: LD_INT 35
13842: PPUSH
13843: CALL_OW 67
// for i in tmp do
13847: LD_ADDR_VAR 0 1
13851: PUSH
13852: LD_VAR 0 4
13856: PUSH
13857: FOR_IN
13858: IFFALSE 13937
// if IsDead ( i ) then
13860: LD_VAR 0 1
13864: PPUSH
13865: CALL_OW 301
13869: IFFALSE 13889
// tmp := tmp diff i else
13871: LD_ADDR_VAR 0 4
13875: PUSH
13876: LD_VAR 0 4
13880: PUSH
13881: LD_VAR 0 1
13885: DIFF
13886: ST_TO_ADDR
13887: GO 13935
// if not HasTask ( i ) then
13889: LD_VAR 0 1
13893: PPUSH
13894: CALL_OW 314
13898: NOT
13899: IFFALSE 13935
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
13901: LD_VAR 0 1
13905: PPUSH
13906: LD_INT 81
13908: PUSH
13909: LD_INT 3
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PPUSH
13916: CALL_OW 69
13920: PPUSH
13921: LD_VAR 0 1
13925: PPUSH
13926: CALL_OW 74
13930: PPUSH
13931: CALL_OW 115
13935: GO 13857
13937: POP
13938: POP
// until not tmp ;
13939: LD_VAR 0 4
13943: NOT
13944: IFFALSE 13840
// if firstAttack then
13946: LD_EXP 28
13950: IFFALSE 13960
// firstAttack := false ;
13952: LD_ADDR_EXP 28
13956: PUSH
13957: LD_INT 0
13959: ST_TO_ADDR
// end ;
13960: PPOPN 4
13962: END
// every 8 8$00 trigger not omarAttack and bergkampfArrived and not rolfHasVehicles do var i , un , veh , tmp ;
13963: LD_EXP 23
13967: NOT
13968: PUSH
13969: LD_EXP 3
13973: AND
13974: PUSH
13975: LD_EXP 16
13979: NOT
13980: AND
13981: IFFALSE 14813
13983: GO 13985
13985: DISABLE
13986: LD_INT 0
13988: PPUSH
13989: PPUSH
13990: PPUSH
13991: PPUSH
// begin enable ;
13992: ENABLE
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
13993: LD_ADDR_VAR 0 1
13997: PUSH
13998: DOUBLE
13999: LD_INT 1
14001: DEC
14002: ST_TO_ADDR
14003: LD_INT 1
14005: PUSH
14006: LD_INT 2
14008: PUSH
14009: LD_INT 2
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: LD_OWVAR 67
14021: ARRAY
14022: PUSH
14023: FOR_TO
14024: IFFALSE 14325
// begin InitHc ;
14026: CALL_OW 19
// InitVc ;
14030: CALL_OW 20
// uc_side := 3 ;
14034: LD_ADDR_OWVAR 20
14038: PUSH
14039: LD_INT 3
14041: ST_TO_ADDR
// uc_nation := 3 ;
14042: LD_ADDR_OWVAR 21
14046: PUSH
14047: LD_INT 3
14049: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14050: LD_INT 22
14052: PUSH
14053: LD_INT 23
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 1
14062: PPUSH
14063: LD_INT 2
14065: PPUSH
14066: CALL_OW 12
14070: ARRAY
14071: PPUSH
14072: LD_INT 1
14074: PPUSH
14075: LD_INT 1
14077: PPUSH
14078: LD_INT 44
14080: PUSH
14081: LD_INT 43
14083: PUSH
14084: LD_INT 42
14086: PUSH
14087: LD_INT 44
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 1
14098: PPUSH
14099: LD_INT 4
14101: PPUSH
14102: CALL_OW 12
14106: ARRAY
14107: PPUSH
14108: LD_INT 99
14110: PPUSH
14111: CALL 29483 0 5
// veh := CreateVehicle ;
14115: LD_ADDR_VAR 0 3
14119: PUSH
14120: CALL_OW 45
14124: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
14125: LD_VAR 0 3
14129: PPUSH
14130: LD_INT 5
14132: PPUSH
14133: LD_INT 3
14135: PPUSH
14136: LD_INT 2
14138: PPUSH
14139: LD_INT 0
14141: PPUSH
14142: CALL 63287 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14146: LD_ADDR_EXP 56
14150: PUSH
14151: LD_EXP 56
14155: PPUSH
14156: LD_EXP 56
14160: PUSH
14161: LD_INT 1
14163: PLUS
14164: PPUSH
14165: LD_VAR 0 3
14169: PPUSH
14170: CALL_OW 1
14174: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
14175: LD_INT 0
14177: PPUSH
14178: LD_INT 3
14180: PPUSH
14181: LD_OWVAR 67
14185: PPUSH
14186: CALL_OW 380
// un := CreateHuman ;
14190: LD_ADDR_VAR 0 2
14194: PUSH
14195: CALL_OW 44
14199: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14200: LD_VAR 0 2
14204: PPUSH
14205: LD_VAR 0 3
14209: PPUSH
14210: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14214: LD_ADDR_EXP 56
14218: PUSH
14219: LD_EXP 56
14223: PPUSH
14224: LD_EXP 56
14228: PUSH
14229: LD_INT 1
14231: PLUS
14232: PPUSH
14233: LD_VAR 0 2
14237: PPUSH
14238: CALL_OW 1
14242: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
14243: LD_VAR 0 2
14247: PPUSH
14248: LD_INT 23
14250: PPUSH
14251: LD_INT 7
14253: PPUSH
14254: CALL_OW 111
// wait ( 0 0$2 ) ;
14258: LD_INT 70
14260: PPUSH
14261: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14265: LD_ADDR_VAR 0 4
14269: PUSH
14270: LD_VAR 0 4
14274: PPUSH
14275: LD_VAR 0 4
14279: PUSH
14280: LD_INT 1
14282: PLUS
14283: PPUSH
14284: LD_VAR 0 3
14288: PPUSH
14289: CALL_OW 1
14293: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14294: LD_ADDR_VAR 0 4
14298: PUSH
14299: LD_VAR 0 4
14303: PPUSH
14304: LD_VAR 0 4
14308: PUSH
14309: LD_INT 1
14311: PLUS
14312: PPUSH
14313: LD_VAR 0 2
14317: PPUSH
14318: CALL_OW 1
14322: ST_TO_ADDR
// end ;
14323: GO 14023
14325: POP
14326: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + waveStrength do
14327: LD_ADDR_VAR 0 1
14331: PUSH
14332: DOUBLE
14333: LD_INT 1
14335: DEC
14336: ST_TO_ADDR
14337: LD_INT 2
14339: PUSH
14340: LD_INT 3
14342: PUSH
14343: LD_INT 3
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: PUSH
14351: LD_OWVAR 67
14355: ARRAY
14356: PUSH
14357: LD_EXP 57
14361: PLUS
14362: PUSH
14363: FOR_TO
14364: IFFALSE 14673
// begin InitHc ;
14366: CALL_OW 19
// InitVc ;
14370: CALL_OW 20
// uc_side := 3 ;
14374: LD_ADDR_OWVAR 20
14378: PUSH
14379: LD_INT 3
14381: ST_TO_ADDR
// uc_nation := 3 ;
14382: LD_ADDR_OWVAR 21
14386: PUSH
14387: LD_INT 3
14389: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
14390: LD_INT 22
14392: PUSH
14393: LD_INT 23
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 1
14402: PPUSH
14403: LD_INT 2
14405: PPUSH
14406: CALL_OW 12
14410: ARRAY
14411: PPUSH
14412: LD_INT 1
14414: PPUSH
14415: LD_INT 1
14417: PPUSH
14418: LD_INT 44
14420: PUSH
14421: LD_INT 45
14423: PUSH
14424: LD_INT 43
14426: PUSH
14427: LD_INT 42
14429: PUSH
14430: LD_INT 44
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: PUSH
14440: LD_INT 1
14442: PPUSH
14443: LD_INT 5
14445: PPUSH
14446: CALL_OW 12
14450: ARRAY
14451: PPUSH
14452: LD_INT 99
14454: PPUSH
14455: CALL 29483 0 5
// veh := CreateVehicle ;
14459: LD_ADDR_VAR 0 3
14463: PUSH
14464: CALL_OW 45
14468: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
14469: LD_VAR 0 3
14473: PPUSH
14474: LD_INT 127
14476: PPUSH
14477: LD_INT 243
14479: PPUSH
14480: LD_INT 0
14482: PPUSH
14483: LD_INT 0
14485: PPUSH
14486: CALL 63287 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14490: LD_ADDR_EXP 56
14494: PUSH
14495: LD_EXP 56
14499: PPUSH
14500: LD_EXP 56
14504: PUSH
14505: LD_INT 1
14507: PLUS
14508: PPUSH
14509: LD_VAR 0 3
14513: PPUSH
14514: CALL_OW 1
14518: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14519: LD_INT 0
14521: PPUSH
14522: LD_INT 3
14524: PPUSH
14525: LD_OWVAR 67
14529: PUSH
14530: LD_INT 2
14532: PLUS
14533: PPUSH
14534: CALL_OW 380
// un := CreateHuman ;
14538: LD_ADDR_VAR 0 2
14542: PUSH
14543: CALL_OW 44
14547: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14548: LD_VAR 0 2
14552: PPUSH
14553: LD_VAR 0 3
14557: PPUSH
14558: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14562: LD_ADDR_EXP 56
14566: PUSH
14567: LD_EXP 56
14571: PPUSH
14572: LD_EXP 56
14576: PUSH
14577: LD_INT 1
14579: PLUS
14580: PPUSH
14581: LD_VAR 0 2
14585: PPUSH
14586: CALL_OW 1
14590: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
14591: LD_VAR 0 2
14595: PPUSH
14596: LD_INT 130
14598: PPUSH
14599: LD_INT 233
14601: PPUSH
14602: CALL_OW 111
// wait ( 0 0$2 ) ;
14606: LD_INT 70
14608: PPUSH
14609: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14613: LD_ADDR_VAR 0 4
14617: PUSH
14618: LD_VAR 0 4
14622: PPUSH
14623: LD_VAR 0 4
14627: PUSH
14628: LD_INT 1
14630: PLUS
14631: PPUSH
14632: LD_VAR 0 3
14636: PPUSH
14637: CALL_OW 1
14641: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14642: LD_ADDR_VAR 0 4
14646: PUSH
14647: LD_VAR 0 4
14651: PPUSH
14652: LD_VAR 0 4
14656: PUSH
14657: LD_INT 1
14659: PLUS
14660: PPUSH
14661: LD_VAR 0 2
14665: PPUSH
14666: CALL_OW 1
14670: ST_TO_ADDR
// end ;
14671: GO 14363
14673: POP
14674: POP
// for i in tmp do
14675: LD_ADDR_VAR 0 1
14679: PUSH
14680: LD_VAR 0 4
14684: PUSH
14685: FOR_IN
14686: IFFALSE 14705
// begin ComAgressiveMove ( i , 76 , 49 ) ;
14688: LD_VAR 0 1
14692: PPUSH
14693: LD_INT 76
14695: PPUSH
14696: LD_INT 49
14698: PPUSH
14699: CALL_OW 114
// end ;
14703: GO 14685
14705: POP
14706: POP
// repeat wait ( 0 0$1 ) ;
14707: LD_INT 35
14709: PPUSH
14710: CALL_OW 67
// for i in tmp do
14714: LD_ADDR_VAR 0 1
14718: PUSH
14719: LD_VAR 0 4
14723: PUSH
14724: FOR_IN
14725: IFFALSE 14804
// if IsDead ( i ) then
14727: LD_VAR 0 1
14731: PPUSH
14732: CALL_OW 301
14736: IFFALSE 14756
// tmp := tmp diff i else
14738: LD_ADDR_VAR 0 4
14742: PUSH
14743: LD_VAR 0 4
14747: PUSH
14748: LD_VAR 0 1
14752: DIFF
14753: ST_TO_ADDR
14754: GO 14802
// if not HasTask ( i ) then
14756: LD_VAR 0 1
14760: PPUSH
14761: CALL_OW 314
14765: NOT
14766: IFFALSE 14802
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
14768: LD_VAR 0 1
14772: PPUSH
14773: LD_INT 81
14775: PUSH
14776: LD_INT 3
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PPUSH
14783: CALL_OW 69
14787: PPUSH
14788: LD_VAR 0 1
14792: PPUSH
14793: CALL_OW 74
14797: PPUSH
14798: CALL_OW 115
14802: GO 14724
14804: POP
14805: POP
// until not tmp ;
14806: LD_VAR 0 4
14810: NOT
14811: IFFALSE 14707
// end ;
14813: PPOPN 4
14815: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
14816: LD_EXP 6
14820: IFFALSE 15291
14822: GO 14824
14824: DISABLE
14825: LD_INT 0
14827: PPUSH
14828: PPUSH
14829: PPUSH
14830: PPUSH
// begin wait ( 3 3$00 ) ;
14831: LD_INT 6300
14833: PPUSH
14834: CALL_OW 67
// for i := 1 to 3 do
14838: LD_ADDR_VAR 0 1
14842: PUSH
14843: DOUBLE
14844: LD_INT 1
14846: DEC
14847: ST_TO_ADDR
14848: LD_INT 3
14850: PUSH
14851: FOR_TO
14852: IFFALSE 15151
// begin InitHc ;
14854: CALL_OW 19
// InitVc ;
14858: CALL_OW 20
// uc_side := 3 ;
14862: LD_ADDR_OWVAR 20
14866: PUSH
14867: LD_INT 3
14869: ST_TO_ADDR
// uc_nation := 3 ;
14870: LD_ADDR_OWVAR 21
14874: PUSH
14875: LD_INT 3
14877: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14878: LD_INT 22
14880: PUSH
14881: LD_INT 23
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 1
14890: PPUSH
14891: LD_INT 2
14893: PPUSH
14894: CALL_OW 12
14898: ARRAY
14899: PPUSH
14900: LD_INT 1
14902: PPUSH
14903: LD_INT 1
14905: PPUSH
14906: LD_INT 44
14908: PUSH
14909: LD_INT 43
14911: PUSH
14912: LD_INT 42
14914: PUSH
14915: LD_INT 44
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 1
14926: PPUSH
14927: LD_INT 4
14929: PPUSH
14930: CALL_OW 12
14934: ARRAY
14935: PPUSH
14936: LD_INT 99
14938: PPUSH
14939: CALL 29483 0 5
// veh := CreateVehicle ;
14943: LD_ADDR_VAR 0 3
14947: PUSH
14948: CALL_OW 45
14952: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
14953: LD_VAR 0 3
14957: PPUSH
14958: LD_INT 293
14960: PPUSH
14961: LD_INT 246
14963: PPUSH
14964: LD_INT 5
14966: PPUSH
14967: LD_INT 0
14969: PPUSH
14970: CALL 63287 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14974: LD_ADDR_EXP 56
14978: PUSH
14979: LD_EXP 56
14983: PPUSH
14984: LD_EXP 56
14988: PUSH
14989: LD_INT 1
14991: PLUS
14992: PPUSH
14993: LD_VAR 0 3
14997: PPUSH
14998: CALL_OW 1
15002: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
15003: LD_INT 0
15005: PPUSH
15006: LD_INT 3
15008: PPUSH
15009: LD_INT 3
15011: PPUSH
15012: CALL_OW 380
// un := CreateHuman ;
15016: LD_ADDR_VAR 0 2
15020: PUSH
15021: CALL_OW 44
15025: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15026: LD_VAR 0 2
15030: PPUSH
15031: LD_VAR 0 3
15035: PPUSH
15036: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15040: LD_ADDR_EXP 56
15044: PUSH
15045: LD_EXP 56
15049: PPUSH
15050: LD_EXP 56
15054: PUSH
15055: LD_INT 1
15057: PLUS
15058: PPUSH
15059: LD_VAR 0 2
15063: PPUSH
15064: CALL_OW 1
15068: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
15069: LD_VAR 0 2
15073: PPUSH
15074: LD_INT 273
15076: PPUSH
15077: LD_INT 227
15079: PPUSH
15080: CALL_OW 111
// wait ( 0 0$2 ) ;
15084: LD_INT 70
15086: PPUSH
15087: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15091: LD_ADDR_VAR 0 4
15095: PUSH
15096: LD_VAR 0 4
15100: PPUSH
15101: LD_VAR 0 4
15105: PUSH
15106: LD_INT 1
15108: PLUS
15109: PPUSH
15110: LD_VAR 0 3
15114: PPUSH
15115: CALL_OW 1
15119: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15120: LD_ADDR_VAR 0 4
15124: PUSH
15125: LD_VAR 0 4
15129: PPUSH
15130: LD_VAR 0 4
15134: PUSH
15135: LD_INT 1
15137: PLUS
15138: PPUSH
15139: LD_VAR 0 2
15143: PPUSH
15144: CALL_OW 1
15148: ST_TO_ADDR
// end ;
15149: GO 14851
15151: POP
15152: POP
// for i in tmp do
15153: LD_ADDR_VAR 0 1
15157: PUSH
15158: LD_VAR 0 4
15162: PUSH
15163: FOR_IN
15164: IFFALSE 15183
// begin ComAgressiveMove ( i , 330 , 231 ) ;
15166: LD_VAR 0 1
15170: PPUSH
15171: LD_INT 330
15173: PPUSH
15174: LD_INT 231
15176: PPUSH
15177: CALL_OW 114
// end ;
15181: GO 15163
15183: POP
15184: POP
// repeat wait ( 0 0$1 ) ;
15185: LD_INT 35
15187: PPUSH
15188: CALL_OW 67
// for i in tmp do
15192: LD_ADDR_VAR 0 1
15196: PUSH
15197: LD_VAR 0 4
15201: PUSH
15202: FOR_IN
15203: IFFALSE 15282
// if IsDead ( i ) then
15205: LD_VAR 0 1
15209: PPUSH
15210: CALL_OW 301
15214: IFFALSE 15234
// tmp := tmp diff i else
15216: LD_ADDR_VAR 0 4
15220: PUSH
15221: LD_VAR 0 4
15225: PUSH
15226: LD_VAR 0 1
15230: DIFF
15231: ST_TO_ADDR
15232: GO 15280
// if not HasTask ( i ) then
15234: LD_VAR 0 1
15238: PPUSH
15239: CALL_OW 314
15243: NOT
15244: IFFALSE 15280
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15246: LD_VAR 0 1
15250: PPUSH
15251: LD_INT 81
15253: PUSH
15254: LD_INT 3
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PPUSH
15261: CALL_OW 69
15265: PPUSH
15266: LD_VAR 0 1
15270: PPUSH
15271: CALL_OW 74
15275: PPUSH
15276: CALL_OW 115
15280: GO 15202
15282: POP
15283: POP
// until not tmp ;
15284: LD_VAR 0 4
15288: NOT
15289: IFFALSE 15185
// end ;
15291: PPOPN 4
15293: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
15294: LD_INT 3
15296: PUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 2
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: LD_INT 32
15313: PUSH
15314: LD_INT 1
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PPUSH
15325: CALL_OW 69
15329: IFFALSE 15413
15331: GO 15333
15333: DISABLE
15334: LD_INT 0
15336: PPUSH
// begin enable ;
15337: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
15338: LD_ADDR_VAR 0 1
15342: PUSH
15343: LD_INT 3
15345: PUSH
15346: LD_INT 22
15348: PUSH
15349: LD_INT 2
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 32
15362: PUSH
15363: LD_INT 1
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PPUSH
15374: CALL_OW 69
15378: PUSH
15379: FOR_IN
15380: IFFALSE 15411
// if GetFuel ( i ) < 3 then
15382: LD_VAR 0 1
15386: PPUSH
15387: CALL_OW 261
15391: PUSH
15392: LD_INT 3
15394: LESS
15395: IFFALSE 15409
// SetFuel ( i , 3 ) ;
15397: LD_VAR 0 1
15401: PPUSH
15402: LD_INT 3
15404: PPUSH
15405: CALL_OW 240
15409: GO 15379
15411: POP
15412: POP
// end ; end_of_file
15413: PPOPN 1
15415: END
// export function Action ; begin
15416: LD_INT 0
15418: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
15419: LD_INT 2
15421: PPUSH
15422: LD_INT 4
15424: PPUSH
15425: CALL_OW 332
// Video ( true ) ;
15429: LD_INT 1
15431: PPUSH
15432: CALL 61328 0 1
// music_nat := 3 ;
15436: LD_ADDR_OWVAR 71
15440: PUSH
15441: LD_INT 3
15443: ST_TO_ADDR
// music_class := music_recon ;
15444: LD_ADDR_OWVAR 72
15448: PUSH
15449: LD_INT 3
15451: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
15452: LD_INT 213
15454: PPUSH
15455: LD_INT 89
15457: PPUSH
15458: CALL_OW 86
// if Kaia and Olaf then
15462: LD_EXP 34
15466: PUSH
15467: LD_EXP 38
15471: AND
15472: IFFALSE 15478
// SceneKaiaWithOlaf ;
15474: CALL 15533 0 0
// if Givi and Kamil then
15478: LD_EXP 30
15482: PUSH
15483: LD_EXP 33
15487: AND
15488: IFFALSE 15494
// SceneWithGiviAndKamil ;
15490: CALL 16104 0 0
// Video ( false ) ;
15494: LD_INT 0
15496: PPUSH
15497: CALL 61328 0 1
// ChangeMissionObjectives ( M1 ) ;
15501: LD_STRING M1
15503: PPUSH
15504: CALL_OW 337
// music_nat := music_auto ;
15508: LD_ADDR_OWVAR 71
15512: PUSH
15513: LD_INT 0
15515: ST_TO_ADDR
// music_class := music_auto ;
15516: LD_ADDR_OWVAR 72
15520: PUSH
15521: LD_INT 0
15523: ST_TO_ADDR
// SaveForQuickRestart ;
15524: CALL_OW 22
// end ;
15528: LD_VAR 0 1
15532: RET
// export function SceneKaiaWithOlaf ; begin
15533: LD_INT 0
15535: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
15536: LD_INT 22
15538: PUSH
15539: LD_INT 2
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 30
15548: PUSH
15549: LD_INT 3
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PPUSH
15560: CALL_OW 69
15564: PPUSH
15565: LD_INT 14
15567: PPUSH
15568: LD_INT 1
15570: PPUSH
15571: LD_INT 1
15573: PPUSH
15574: LD_INT 26
15576: PPUSH
15577: CALL_OW 125
// wait ( 0 0$1 ) ;
15581: LD_INT 35
15583: PPUSH
15584: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
15588: LD_EXP 34
15592: PPUSH
15593: LD_STRING DK-Mem-1
15595: PPUSH
15596: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
15600: LD_EXP 34
15604: PPUSH
15605: LD_STRING DK-Mem-2
15607: PPUSH
15608: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
15612: LD_EXP 38
15616: PPUSH
15617: LD_STRING DO-Mem-3
15619: PPUSH
15620: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
15624: LD_EXP 34
15628: PPUSH
15629: LD_STRING DK-Mem-4
15631: PPUSH
15632: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
15636: LD_EXP 38
15640: PPUSH
15641: LD_STRING DO-Mem-5
15643: PPUSH
15644: CALL_OW 88
// wait ( 0 0$2 ) ;
15648: LD_INT 70
15650: PPUSH
15651: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
15655: LD_INT 22
15657: PUSH
15658: LD_INT 2
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PUSH
15665: LD_INT 30
15667: PUSH
15668: LD_INT 3
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PPUSH
15679: CALL_OW 69
15683: PPUSH
15684: LD_INT 90
15686: PPUSH
15687: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
15691: LD_EXP 38
15695: PPUSH
15696: LD_STRING DO-Mem-6
15698: PPUSH
15699: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
15703: LD_EXP 34
15707: PPUSH
15708: LD_STRING DK-Mem-7
15710: PPUSH
15711: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
15715: LD_EXP 29
15719: PPUSH
15720: LD_EXP 34
15724: PPUSH
15725: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
15729: LD_EXP 29
15733: PPUSH
15734: LD_STRING DH-Mem-8
15736: PPUSH
15737: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
15741: LD_EXP 34
15745: PUSH
15746: LD_EXP 38
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PPUSH
15755: LD_EXP 29
15759: PPUSH
15760: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
15764: LD_EXP 38
15768: PPUSH
15769: LD_STRING DO-Mem-9
15771: PPUSH
15772: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
15776: LD_EXP 38
15780: PPUSH
15781: LD_STRING DO-Mem-10
15783: PPUSH
15784: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
15788: LD_EXP 38
15792: PPUSH
15793: LD_STRING DO-Mem-11
15795: PPUSH
15796: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
15800: LD_EXP 38
15804: PPUSH
15805: LD_STRING DO-Mem-12
15807: PPUSH
15808: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
15812: LD_EXP 34
15816: PPUSH
15817: LD_STRING DK-Mem-13
15819: PPUSH
15820: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
15824: LD_EXP 34
15828: PPUSH
15829: LD_STRING DK-Mem-14
15831: PPUSH
15832: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
15836: LD_EXP 34
15840: PPUSH
15841: LD_STRING DK-Mem-15
15843: PPUSH
15844: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
15848: LD_EXP 34
15852: PPUSH
15853: LD_STRING DK-Mem-16
15855: PPUSH
15856: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
15860: LD_EXP 34
15864: PPUSH
15865: LD_STRING DK-Mem-17
15867: PPUSH
15868: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
15872: LD_EXP 38
15876: PPUSH
15877: LD_EXP 34
15881: PPUSH
15882: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
15886: LD_EXP 38
15890: PPUSH
15891: LD_STRING DO-Mem-18
15893: PPUSH
15894: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
15898: LD_EXP 34
15902: PPUSH
15903: LD_EXP 38
15907: PPUSH
15908: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
15912: LD_EXP 34
15916: PPUSH
15917: LD_STRING DK-Mem-19
15919: PPUSH
15920: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
15924: LD_EXP 38
15928: PPUSH
15929: LD_INT 214
15931: PPUSH
15932: LD_INT 86
15934: PPUSH
15935: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
15939: LD_EXP 38
15943: PPUSH
15944: LD_EXP 34
15948: PPUSH
15949: CALL_OW 179
// if Givi then
15953: LD_EXP 30
15957: IFFALSE 15988
// begin ComMoveXY ( Givi , 217 , 86 ) ;
15959: LD_EXP 30
15963: PPUSH
15964: LD_INT 217
15966: PPUSH
15967: LD_INT 86
15969: PPUSH
15970: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
15974: LD_EXP 30
15978: PPUSH
15979: LD_EXP 29
15983: PPUSH
15984: CALL_OW 179
// end ; if Kamil then
15988: LD_EXP 33
15992: IFFALSE 16032
// begin ComExit ( Kamil ) ;
15994: LD_EXP 33
15998: PPUSH
15999: CALL 61744 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
16003: LD_EXP 33
16007: PPUSH
16008: LD_INT 212
16010: PPUSH
16011: LD_INT 86
16013: PPUSH
16014: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
16018: LD_EXP 33
16022: PPUSH
16023: LD_EXP 29
16027: PPUSH
16028: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
16032: LD_INT 70
16034: PPUSH
16035: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
16039: LD_EXP 29
16043: PPUSH
16044: LD_STRING DH-Mem-20
16046: PPUSH
16047: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
16051: LD_EXP 38
16055: PPUSH
16056: LD_INT 215
16058: PPUSH
16059: LD_INT 87
16061: PPUSH
16062: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16066: LD_EXP 38
16070: PPUSH
16071: LD_EXP 34
16075: PPUSH
16076: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
16080: LD_EXP 34
16084: PPUSH
16085: LD_STRING DK-Mem-21
16087: PPUSH
16088: CALL_OW 88
// wait ( 0 0$2 ) ;
16092: LD_INT 70
16094: PPUSH
16095: CALL_OW 67
// end ;
16099: LD_VAR 0 1
16103: RET
// export function SceneWithGiviAndKamil ; begin
16104: LD_INT 0
16106: PPUSH
// if Markov then
16107: LD_EXP 36
16111: IFFALSE 16162
// begin if IsInUnit ( Markov ) then
16113: LD_EXP 36
16117: PPUSH
16118: CALL_OW 310
16122: IFFALSE 16133
// ComExit ( Markov ) ;
16124: LD_EXP 36
16128: PPUSH
16129: CALL 61744 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
16133: LD_EXP 36
16137: PPUSH
16138: LD_INT 212
16140: PPUSH
16141: LD_INT 88
16143: PPUSH
16144: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
16148: LD_EXP 36
16152: PPUSH
16153: LD_EXP 29
16157: PPUSH
16158: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
16162: LD_EXP 30
16166: PPUSH
16167: LD_STRING DG-Obj-1
16169: PPUSH
16170: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
16174: LD_EXP 33
16178: PPUSH
16179: LD_STRING DKam-Obj-2
16181: PPUSH
16182: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
16186: LD_EXP 29
16190: PPUSH
16191: LD_EXP 33
16195: PPUSH
16196: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
16200: LD_EXP 33
16204: PPUSH
16205: LD_STRING DKam-Obj-3
16207: PPUSH
16208: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
16212: LD_EXP 36
16216: PPUSH
16217: LD_STRING DMar-Obj-4
16219: PPUSH
16220: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
16224: LD_EXP 33
16228: PPUSH
16229: LD_STRING DKam-Obj-6
16231: PPUSH
16232: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
16236: LD_EXP 33
16240: PPUSH
16241: LD_STRING DKam-Obj-7
16243: PPUSH
16244: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
16248: LD_EXP 33
16252: PPUSH
16253: LD_STRING DKam-Obj-8
16255: PPUSH
16256: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
16260: LD_EXP 29
16264: PPUSH
16265: LD_STRING DH-Obj-9
16267: PPUSH
16268: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
16272: LD_EXP 33
16276: PPUSH
16277: LD_STRING DKam-Obj-10
16279: PPUSH
16280: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
16284: LD_EXP 33
16288: PPUSH
16289: LD_STRING DKam-Obj-11
16291: PPUSH
16292: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
16296: LD_EXP 36
16300: PPUSH
16301: LD_STRING DMar-Obj-12
16303: PPUSH
16304: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
16308: LD_EXP 36
16312: PPUSH
16313: LD_STRING DMar-Obj-13
16315: PPUSH
16316: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
16320: LD_EXP 36
16324: PPUSH
16325: LD_STRING DMar-Obj-14
16327: PPUSH
16328: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
16332: LD_EXP 38
16336: PPUSH
16337: LD_STRING DO-Obj-15
16339: PPUSH
16340: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
16344: LD_EXP 38
16348: PPUSH
16349: LD_STRING DO-Obj-16
16351: PPUSH
16352: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
16356: LD_EXP 29
16360: PPUSH
16361: LD_STRING DH-Obj-17
16363: PPUSH
16364: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
16368: LD_EXP 38
16372: PPUSH
16373: LD_STRING DO-Obj-18
16375: PPUSH
16376: CALL_OW 88
// end ;
16380: LD_VAR 0 1
16384: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
16385: LD_INT 34
16387: PUSH
16388: LD_EXP 63
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PPUSH
16397: CALL_OW 69
16401: IFFALSE 16598
16403: GO 16405
16405: DISABLE
16406: LD_INT 0
16408: PPUSH
// begin wait ( 0 0$2 ) ;
16409: LD_INT 70
16411: PPUSH
16412: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
16416: LD_INT 34
16418: PUSH
16419: LD_EXP 63
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PPUSH
16428: CALL_OW 69
16432: PPUSH
16433: CALL_OW 87
// DialogueOn ;
16437: CALL_OW 6
// if Markov then
16441: LD_EXP 36
16445: IFFALSE 16473
// begin Say ( Markov , DMar-Grn-1 ) ;
16447: LD_EXP 36
16451: PPUSH
16452: LD_STRING DMar-Grn-1
16454: PPUSH
16455: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
16459: LD_EXP 29
16463: PPUSH
16464: LD_STRING DH-Grn-2
16466: PPUSH
16467: CALL_OW 88
// end else
16471: GO 16572
// if heikeSecondSquad then
16473: LD_EXP 44
16477: IFFALSE 16572
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16479: LD_ADDR_VAR 0 1
16483: PUSH
16484: LD_EXP 44
16488: PUSH
16489: LD_INT 1
16491: PPUSH
16492: LD_EXP 44
16496: PPUSH
16497: CALL_OW 12
16501: ARRAY
16502: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16503: LD_VAR 0 1
16507: PPUSH
16508: CALL_OW 258
16512: PUSH
16513: LD_INT 1
16515: DOUBLE
16516: EQUAL
16517: IFTRUE 16521
16519: GO 16536
16521: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
16522: LD_VAR 0 1
16526: PPUSH
16527: LD_STRING DArm-Grn-1
16529: PPUSH
16530: CALL_OW 88
16534: GO 16560
16536: LD_INT 2
16538: DOUBLE
16539: EQUAL
16540: IFTRUE 16544
16542: GO 16559
16544: POP
// Say ( random , DArf-Grn-1 ) ; end ;
16545: LD_VAR 0 1
16549: PPUSH
16550: LD_STRING DArf-Grn-1
16552: PPUSH
16553: CALL_OW 88
16557: GO 16560
16559: POP
// Say ( Heike , DH-Grn-2 ) ;
16560: LD_EXP 29
16564: PPUSH
16565: LD_STRING DH-Grn-2
16567: PPUSH
16568: CALL_OW 88
// end ; DialogueOff ;
16572: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
16576: LD_STRING MortarConstructed
16578: PPUSH
16579: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
16583: LD_STRING SelfPropelledMortar
16585: PPUSH
16586: CALL_OW 339
// mortarConstructed := true ;
16590: LD_ADDR_EXP 15
16594: PUSH
16595: LD_INT 1
16597: ST_TO_ADDR
// end ;
16598: PPOPN 1
16600: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
16601: LD_INT 2
16603: PPUSH
16604: LD_INT 8
16606: PPUSH
16607: CALL_OW 294
16611: IFFALSE 16754
16613: GO 16615
16615: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
16616: LD_INT 200
16618: PPUSH
16619: LD_INT 162
16621: PPUSH
16622: LD_INT 2
16624: PPUSH
16625: LD_INT 6
16627: NEG
16628: PPUSH
16629: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
16633: LD_INT 200
16635: PPUSH
16636: LD_INT 162
16638: PPUSH
16639: LD_INT 2
16641: PPUSH
16642: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
16646: LD_INT 200
16648: PPUSH
16649: LD_INT 162
16651: PPUSH
16652: CALL_OW 84
// if not IsOk ( Kurt ) then
16656: LD_EXP 40
16660: PPUSH
16661: CALL_OW 302
16665: NOT
16666: IFFALSE 16670
// exit ;
16668: GO 16754
// Say ( Kurt , DKs-Otpst-2-1 ) ;
16670: LD_EXP 40
16674: PPUSH
16675: LD_STRING DKs-Otpst-2-1
16677: PPUSH
16678: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
16682: LD_EXP 34
16686: PPUSH
16687: LD_STRING DK-Otpst-2-2
16689: PPUSH
16690: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
16694: LD_EXP 40
16698: PPUSH
16699: LD_STRING DKs-Otpst-2-3
16701: PPUSH
16702: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
16706: LD_EXP 40
16710: PPUSH
16711: LD_STRING DKs-Otpst-2-4
16713: PPUSH
16714: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
16718: LD_EXP 40
16722: PPUSH
16723: LD_STRING DKs-Otpst-2-5
16725: PPUSH
16726: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
16730: LD_EXP 33
16734: PPUSH
16735: LD_STRING DKam-Otpst-2-6
16737: PPUSH
16738: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
16742: LD_EXP 40
16746: PPUSH
16747: LD_STRING DKs-Otpst-2-7
16749: PPUSH
16750: CALL_OW 88
// end ;
16754: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
16755: LD_INT 8
16757: PPUSH
16758: LD_INT 22
16760: PUSH
16761: LD_INT 3
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 21
16770: PUSH
16771: LD_INT 3
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PPUSH
16782: CALL_OW 70
16786: NOT
16787: PUSH
16788: LD_EXP 3
16792: NOT
16793: AND
16794: IFFALSE 17044
16796: GO 16798
16798: DISABLE
16799: LD_INT 0
16801: PPUSH
// begin outpostDestroyed := true ;
16802: LD_ADDR_EXP 4
16806: PUSH
16807: LD_INT 1
16809: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
16810: LD_INT 22
16812: PUSH
16813: LD_INT 2
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 34
16822: PUSH
16823: LD_EXP 63
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: LD_INT 92
16834: PUSH
16835: LD_INT 195
16837: PUSH
16838: LD_INT 164
16840: PUSH
16841: LD_INT 12
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: LIST
16854: PPUSH
16855: CALL_OW 69
16859: NOT
16860: IFFALSE 16864
// exit ;
16862: GO 17044
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
16864: LD_EXP 30
16868: PPUSH
16869: CALL_OW 302
16873: NOT
16874: PUSH
16875: LD_EXP 34
16879: PPUSH
16880: CALL_OW 302
16884: NOT
16885: OR
16886: IFFALSE 16890
// exit ;
16888: GO 17044
// Say ( Givi , DG-Otpst-1-1 ) ;
16890: LD_EXP 30
16894: PPUSH
16895: LD_STRING DG-Otpst-1-1
16897: PPUSH
16898: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
16902: LD_EXP 34
16906: PPUSH
16907: LD_STRING DK-Otpst-1-2
16909: PPUSH
16910: CALL_OW 88
// if IsOk ( Markov ) then
16914: LD_EXP 36
16918: PPUSH
16919: CALL_OW 302
16923: IFFALSE 16951
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
16925: LD_EXP 36
16929: PPUSH
16930: LD_STRING DMar-Otpst-1-3
16932: PPUSH
16933: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
16937: LD_EXP 36
16941: PPUSH
16942: LD_STRING DMar-Otpst-1-4
16944: PPUSH
16945: CALL_OW 88
// end else
16949: GO 17032
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16951: LD_ADDR_VAR 0 1
16955: PUSH
16956: LD_EXP 44
16960: PUSH
16961: LD_INT 1
16963: PPUSH
16964: LD_EXP 44
16968: PPUSH
16969: CALL_OW 12
16973: ARRAY
16974: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16975: LD_VAR 0 1
16979: PPUSH
16980: CALL_OW 258
16984: PUSH
16985: LD_INT 1
16987: DOUBLE
16988: EQUAL
16989: IFTRUE 16993
16991: GO 17008
16993: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
16994: LD_VAR 0 1
16998: PPUSH
16999: LD_STRING DArm-Otpst-1-a-3
17001: PPUSH
17002: CALL_OW 88
17006: GO 17032
17008: LD_INT 2
17010: DOUBLE
17011: EQUAL
17012: IFTRUE 17016
17014: GO 17031
17016: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
17017: LD_VAR 0 1
17021: PPUSH
17022: LD_STRING DArf-Otpst-1-a-3
17024: PPUSH
17025: CALL_OW 88
17029: GO 17032
17031: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
17032: LD_EXP 30
17036: PPUSH
17037: LD_STRING DG-Otpst-1-5
17039: PPUSH
17040: CALL_OW 88
// end ;
17044: PPOPN 1
17046: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
17047: LD_EXP 34
17051: PPUSH
17052: CALL_OW 256
17056: PUSH
17057: LD_INT 10
17059: LESS
17060: IFFALSE 17174
17062: GO 17064
17064: DISABLE
// begin DialogueOn ;
17065: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17069: LD_EXP 34
17073: PPUSH
17074: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
17078: LD_EXP 34
17082: PPUSH
17083: LD_STRING DK-Dead-1
17085: PPUSH
17086: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
17090: LD_EXP 29
17094: PPUSH
17095: LD_STRING DH-Dead-2
17097: PPUSH
17098: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
17102: LD_EXP 34
17106: PPUSH
17107: LD_STRING DK-Dead-3
17109: PPUSH
17110: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
17114: LD_EXP 29
17118: PPUSH
17119: LD_STRING DH-Dead-4
17121: PPUSH
17122: CALL_OW 88
// if IsOk ( Mike ) then
17126: LD_EXP 31
17130: PPUSH
17131: CALL_OW 302
17135: IFFALSE 17161
// begin Say ( Mike , DM-Dead-5 ) ;
17137: LD_EXP 31
17141: PPUSH
17142: LD_STRING DM-Dead-5
17144: PPUSH
17145: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
17149: LD_EXP 29
17153: PPUSH
17154: LD_STRING DH-Dead-6
17156: PPUSH
17157: CALL_OW 88
// end ; DialogueOff ;
17161: CALL_OW 7
// KillUnit ( Kaia ) ;
17165: LD_EXP 34
17169: PPUSH
17170: CALL_OW 66
// end ;
17174: END
// every 0 0$1 trigger tick >= 10 10$20 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
17175: LD_OWVAR 1
17179: PUSH
17180: LD_INT 21700
17182: GREATEREQUAL
17183: PUSH
17184: LD_EXP 5
17188: PUSH
17189: LD_INT 5
17191: GREATER
17192: OR
17193: PUSH
17194: LD_INT 22
17196: PUSH
17197: LD_INT 2
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 92
17206: PUSH
17207: LD_INT 103
17209: PUSH
17210: LD_INT 81
17212: PUSH
17213: LD_INT 20
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PPUSH
17226: CALL_OW 69
17230: OR
17231: IFFALSE 17638
17233: GO 17235
17235: DISABLE
17236: LD_INT 0
17238: PPUSH
17239: PPUSH
17240: PPUSH
// begin PrepareRolfSquad ;
17241: CALL 2348 0 0
// dep := HexInfo ( 86 , 54 ) ;
17245: LD_ADDR_VAR 0 3
17249: PUSH
17250: LD_INT 86
17252: PPUSH
17253: LD_INT 54
17255: PPUSH
17256: CALL_OW 428
17260: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
17261: LD_VAR 0 3
17265: PPUSH
17266: CALL_OW 274
17270: PPUSH
17271: LD_INT 1
17273: PPUSH
17274: LD_INT 300
17276: PPUSH
17277: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
17281: LD_VAR 0 3
17285: PPUSH
17286: CALL_OW 274
17290: PPUSH
17291: LD_INT 2
17293: PPUSH
17294: LD_INT 300
17296: PPUSH
17297: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
17301: LD_EXP 46
17305: PPUSH
17306: LD_INT 79
17308: PPUSH
17309: LD_INT 52
17311: PPUSH
17312: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
17316: LD_INT 35
17318: PPUSH
17319: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
17323: LD_INT 12
17325: PPUSH
17326: LD_INT 22
17328: PUSH
17329: LD_INT 3
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: LD_INT 21
17338: PUSH
17339: LD_INT 1
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PPUSH
17350: CALL_OW 70
17354: NOT
17355: IFFALSE 17316
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
17357: LD_ADDR_VAR 0 2
17361: PUSH
17362: LD_INT 12
17364: PPUSH
17365: LD_INT 21
17367: PUSH
17368: LD_INT 3
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PPUSH
17375: CALL_OW 70
17379: ST_TO_ADDR
// for i in tmp do
17380: LD_ADDR_VAR 0 1
17384: PUSH
17385: LD_VAR 0 2
17389: PUSH
17390: FOR_IN
17391: IFFALSE 17407
// SetSide ( i , 8 ) ;
17393: LD_VAR 0 1
17397: PPUSH
17398: LD_INT 8
17400: PPUSH
17401: CALL_OW 235
17405: GO 17390
17407: POP
17408: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
17409: LD_INT 63
17411: PPUSH
17412: LD_INT 42
17414: PPUSH
17415: CALL_OW 428
17419: PPUSH
17420: LD_INT 320
17422: PPUSH
17423: CALL_OW 234
// wait ( 0 0$10 ) ;
17427: LD_INT 350
17429: PPUSH
17430: CALL_OW 67
// DialogueOn ;
17434: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
17438: LD_INT 8
17440: PPUSH
17441: LD_INT 2
17443: PPUSH
17444: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
17448: LD_INT 86
17450: PPUSH
17451: LD_INT 54
17453: PPUSH
17454: CALL_OW 428
17458: PPUSH
17459: LD_STRING antwerp
17461: PPUSH
17462: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
17466: LD_EXP 42
17470: PPUSH
17471: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
17475: LD_EXP 42
17479: PPUSH
17480: LD_STRING DRf-rast-1
17482: PPUSH
17483: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
17487: LD_EXP 29
17491: PPUSH
17492: LD_STRING DH-rast-2
17494: PPUSH
17495: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
17499: LD_EXP 42
17503: PPUSH
17504: LD_STRING DRf-rast-3
17506: PPUSH
17507: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
17511: LD_EXP 42
17515: PPUSH
17516: LD_STRING DRf-rast-4
17518: PPUSH
17519: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
17523: LD_EXP 42
17527: PPUSH
17528: LD_STRING DRf-rast-5
17530: PPUSH
17531: CALL_OW 94
// if IsOk ( Aviradze ) then
17535: LD_EXP 41
17539: PPUSH
17540: CALL_OW 302
17544: IFFALSE 17603
// begin CenterNowOnUnits ( Aviradze ) ;
17546: LD_EXP 41
17550: PPUSH
17551: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
17555: LD_EXP 41
17559: PPUSH
17560: LD_STRING DA-rast-6
17562: PPUSH
17563: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
17567: LD_EXP 29
17571: PPUSH
17572: LD_STRING DH-rast-7
17574: PPUSH
17575: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
17579: LD_EXP 30
17583: PPUSH
17584: LD_STRING DG-rast-8
17586: PPUSH
17587: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
17591: LD_EXP 30
17595: PPUSH
17596: LD_STRING DG-rast-9
17598: PPUSH
17599: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
17603: LD_EXP 29
17607: PPUSH
17608: LD_STRING DH-rast-10
17610: PPUSH
17611: CALL_OW 88
// DialogueOff ;
17615: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
17619: LD_STRING M2
17621: PPUSH
17622: CALL_OW 337
// bergkampfArrived := true ;
17626: LD_ADDR_EXP 3
17630: PUSH
17631: LD_INT 1
17633: ST_TO_ADDR
// PrepareRolfBase ;
17634: CALL 2679 0 0
// end ;
17638: PPOPN 3
17640: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) do var i ;
17641: LD_INT 12
17643: PPUSH
17644: LD_INT 22
17646: PUSH
17647: LD_INT 2
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PPUSH
17654: CALL_OW 70
17658: PUSH
17659: LD_EXP 42
17663: PPUSH
17664: CALL_OW 302
17668: AND
17669: IFFALSE 18229
17671: GO 17673
17673: DISABLE
17674: LD_INT 0
17676: PPUSH
// begin rolfScriptBase := false ;
17677: LD_ADDR_EXP 9
17681: PUSH
17682: LD_INT 0
17684: ST_TO_ADDR
// DialogueOn ;
17685: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
17689: LD_EXP 42
17693: PPUSH
17694: CALL_OW 87
// if rolfSquad >= 10 then
17698: LD_EXP 46
17702: PUSH
17703: LD_INT 10
17705: GREATEREQUAL
17706: IFFALSE 17885
// begin linkedWithRolf := 2 ;
17708: LD_ADDR_EXP 12
17712: PUSH
17713: LD_INT 2
17715: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
17716: LD_EXP 42
17720: PPUSH
17721: LD_STRING DRf-rast-11
17723: PPUSH
17724: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
17728: LD_EXP 29
17732: PPUSH
17733: LD_STRING DH-rast-12
17735: PPUSH
17736: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
17740: LD_EXP 42
17744: PPUSH
17745: LD_STRING DRf-rast-13
17747: PPUSH
17748: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
17752: LD_EXP 29
17756: PPUSH
17757: LD_STRING DH-rast-14
17759: PPUSH
17760: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
17764: LD_EXP 42
17768: PPUSH
17769: LD_STRING DRf-rast-15
17771: PPUSH
17772: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
17776: LD_EXP 29
17780: PPUSH
17781: LD_STRING DH-rast-16
17783: PPUSH
17784: CALL_OW 88
// if IsOk ( Mike ) then
17788: LD_EXP 31
17792: PPUSH
17793: CALL_OW 302
17797: IFFALSE 17871
// begin Say ( Mike , DM-rast-17 ) ;
17799: LD_EXP 31
17803: PPUSH
17804: LD_STRING DM-rast-17
17806: PPUSH
17807: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
17811: LD_EXP 29
17815: PPUSH
17816: LD_STRING DH-rast-18
17818: PPUSH
17819: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
17823: LD_EXP 31
17827: PPUSH
17828: LD_STRING DM-rast-19
17830: PPUSH
17831: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
17835: LD_EXP 29
17839: PPUSH
17840: LD_STRING DH-rast-20
17842: PPUSH
17843: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
17847: LD_EXP 31
17851: PPUSH
17852: LD_STRING DM-rast-21
17854: PPUSH
17855: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
17859: LD_EXP 29
17863: PPUSH
17864: LD_STRING DH-rast-22
17866: PPUSH
17867: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
17871: LD_EXP 29
17875: PPUSH
17876: LD_STRING DH-rast-23
17878: PPUSH
17879: CALL_OW 88
// end else
17883: GO 18035
// begin linkedWithRolf := 1 ;
17885: LD_ADDR_EXP 12
17889: PUSH
17890: LD_INT 1
17892: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
17893: LD_EXP 42
17897: PPUSH
17898: LD_STRING DRf-rast-a-11
17900: PPUSH
17901: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
17905: LD_EXP 29
17909: PPUSH
17910: LD_STRING DH-rast-a-12
17912: PPUSH
17913: CALL_OW 88
// if IsOk ( Kurt ) then
17917: LD_EXP 40
17921: PPUSH
17922: CALL_OW 302
17926: IFFALSE 18023
// begin Say ( Kurt , DKs-rast-a-13 ) ;
17928: LD_EXP 40
17932: PPUSH
17933: LD_STRING DKs-rast-a-13
17935: PPUSH
17936: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
17940: LD_EXP 42
17944: PPUSH
17945: LD_STRING DRf-rast-a-14
17947: PPUSH
17948: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
17952: LD_EXP 42
17956: PPUSH
17957: LD_STRING DRf-rast-a-15
17959: PPUSH
17960: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
17964: LD_EXP 40
17968: PPUSH
17969: LD_STRING DKs-rast-a-16
17971: PPUSH
17972: CALL_OW 88
// if IsOk ( Givi ) then
17976: LD_EXP 30
17980: PPUSH
17981: CALL_OW 302
17985: IFFALSE 18023
// begin Say ( Givi , DG-rast-a-17 ) ;
17987: LD_EXP 30
17991: PPUSH
17992: LD_STRING DG-rast-a-17
17994: PPUSH
17995: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
17999: LD_EXP 30
18003: PPUSH
18004: LD_STRING DG-rast-a-18
18006: PPUSH
18007: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
18011: LD_EXP 40
18015: PPUSH
18016: LD_STRING DKs-rast-a-19
18018: PPUSH
18019: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
18023: LD_EXP 29
18027: PPUSH
18028: LD_STRING DH-rast-a-20
18030: PPUSH
18031: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
18035: LD_EXP 42
18039: PPUSH
18040: LD_STRING DRf-rast-24
18042: PPUSH
18043: CALL_OW 88
// if IsOk ( Aviradze ) then
18047: LD_EXP 41
18051: PPUSH
18052: CALL_OW 302
18056: IFFALSE 18156
// begin Say ( Aviradze , DA-rast-25 ) ;
18058: LD_EXP 41
18062: PPUSH
18063: LD_STRING DA-rast-25
18065: PPUSH
18066: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
18070: LD_EXP 29
18074: PPUSH
18075: LD_STRING DH-rast-26
18077: PPUSH
18078: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
18082: LD_EXP 41
18086: PPUSH
18087: LD_STRING DA-rast-27
18089: PPUSH
18090: CALL_OW 88
// if IsOk ( Markov ) then
18094: LD_EXP 36
18098: PPUSH
18099: CALL_OW 302
18103: IFFALSE 18131
// begin Say ( Markov , DMar-rast-28 ) ;
18105: LD_EXP 36
18109: PPUSH
18110: LD_STRING DMar-rast-28
18112: PPUSH
18113: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
18117: LD_EXP 36
18121: PPUSH
18122: LD_STRING DMar-rast-29
18124: PPUSH
18125: CALL_OW 88
// end else
18129: GO 18154
// if IsOk ( Sophia ) then
18131: LD_EXP 35
18135: PPUSH
18136: CALL_OW 302
18140: IFFALSE 18154
// begin Say ( Sophia , DS-rast-28 ) ;
18142: LD_EXP 35
18146: PPUSH
18147: LD_STRING DS-rast-28
18149: PPUSH
18150: CALL_OW 88
// end ; end else
18154: GO 18179
// if IsOk ( Sophia ) then
18156: LD_EXP 35
18160: PPUSH
18161: CALL_OW 302
18165: IFFALSE 18179
// Say ( Sophia , DS-rast-29 ) ;
18167: LD_EXP 35
18171: PPUSH
18172: LD_STRING DS-rast-29
18174: PPUSH
18175: CALL_OW 88
// DialogueOff ;
18179: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
18183: LD_STRING M3
18185: PPUSH
18186: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
18190: LD_ADDR_VAR 0 1
18194: PUSH
18195: LD_INT 22
18197: PUSH
18198: LD_INT 8
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PPUSH
18205: CALL_OW 69
18209: PUSH
18210: FOR_IN
18211: IFFALSE 18227
// SetSide ( i , 2 ) ;
18213: LD_VAR 0 1
18217: PPUSH
18218: LD_INT 2
18220: PPUSH
18221: CALL_OW 235
18225: GO 18210
18227: POP
18228: POP
// end ;
18229: PPOPN 1
18231: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf do var random ;
18232: LD_EXP 3
18236: PUSH
18237: LD_EXP 42
18241: PPUSH
18242: CALL_OW 256
18246: PUSH
18247: LD_INT 400
18249: LESS
18250: AND
18251: PUSH
18252: LD_EXP 12
18256: NOT
18257: AND
18258: IFFALSE 18532
18260: GO 18262
18262: DISABLE
18263: LD_INT 0
18265: PPUSH
// begin DialogueOn ;
18266: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
18270: LD_EXP 42
18274: PPUSH
18275: LD_STRING DRf-rast-f-11
18277: PPUSH
18278: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
18282: LD_EXP 42
18286: PPUSH
18287: LD_STRING DRf-rast-f-12
18289: PPUSH
18290: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
18294: LD_EXP 42
18298: PPUSH
18299: LD_STRING DRf-rast-f-13
18301: PPUSH
18302: CALL_OW 94
// DialogueOff ;
18306: CALL_OW 7
// KillUnit ( Rolf ) ;
18310: LD_EXP 42
18314: PPUSH
18315: CALL_OW 66
// wait ( 0 0$1 ) ;
18319: LD_INT 35
18321: PPUSH
18322: CALL_OW 67
// if not IsOk ( Givi ) then
18326: LD_EXP 30
18330: PPUSH
18331: CALL_OW 302
18335: NOT
18336: IFFALSE 18340
// exit ;
18338: GO 18532
// DialogueOn ;
18340: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
18344: LD_EXP 30
18348: PPUSH
18349: LD_STRING DG-rast-f-14
18351: PPUSH
18352: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
18356: LD_EXP 30
18360: PPUSH
18361: LD_STRING DG-rast-f-15
18363: PPUSH
18364: CALL_OW 88
// if IsOk ( Kaia ) then
18368: LD_EXP 34
18372: PPUSH
18373: CALL_OW 302
18377: IFFALSE 18393
// Say ( Kaia , DK-rast-f-16 ) else
18379: LD_EXP 34
18383: PPUSH
18384: LD_STRING DK-rast-f-16
18386: PPUSH
18387: CALL_OW 88
18391: GO 18480
// if heikeSecondSquad then
18393: LD_EXP 44
18397: IFFALSE 18480
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
18399: LD_ADDR_VAR 0 1
18403: PUSH
18404: LD_EXP 44
18408: PUSH
18409: LD_INT 1
18411: PPUSH
18412: LD_EXP 44
18416: PPUSH
18417: CALL_OW 12
18421: ARRAY
18422: ST_TO_ADDR
// case GetSex ( random ) of 1 :
18423: LD_VAR 0 1
18427: PPUSH
18428: CALL_OW 258
18432: PUSH
18433: LD_INT 1
18435: DOUBLE
18436: EQUAL
18437: IFTRUE 18441
18439: GO 18456
18441: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
18442: LD_VAR 0 1
18446: PPUSH
18447: LD_STRING DArm-rast-f-a-16
18449: PPUSH
18450: CALL_OW 88
18454: GO 18480
18456: LD_INT 2
18458: DOUBLE
18459: EQUAL
18460: IFTRUE 18464
18462: GO 18479
18464: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
18465: LD_VAR 0 1
18469: PPUSH
18470: LD_STRING DArf-rast-f-a-16
18472: PPUSH
18473: CALL_OW 88
18477: GO 18480
18479: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
18480: LD_EXP 30
18484: PPUSH
18485: LD_STRING DG-rast-f-17
18487: PPUSH
18488: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
18492: LD_EXP 30
18496: PPUSH
18497: LD_STRING DG-rast-f-18
18499: PPUSH
18500: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
18504: LD_EXP 30
18508: PPUSH
18509: LD_STRING DG-rast-f-19
18511: PPUSH
18512: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
18516: LD_EXP 30
18520: PPUSH
18521: LD_STRING DG-rast-f-20
18523: PPUSH
18524: CALL_OW 88
// DialogueOff ;
18528: CALL_OW 7
// end ;
18532: PPOPN 1
18534: END
// every 0 0$1 trigger SeeArea ( 2 , ruMainBase ) do
18535: LD_INT 2
18537: PPUSH
18538: LD_INT 10
18540: PPUSH
18541: CALL_OW 294
18545: IFFALSE 18618
18547: GO 18549
18549: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
18550: LD_EXP 30
18554: PPUSH
18555: LD_STRING DG-Len-1
18557: PPUSH
18558: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
18562: LD_EXP 40
18566: PPUSH
18567: LD_STRING DKs-Len-2
18569: PPUSH
18570: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
18574: LD_EXP 40
18578: PPUSH
18579: LD_STRING DKs-Len-3
18581: PPUSH
18582: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
18586: LD_EXP 29
18590: PPUSH
18591: LD_STRING DH-Len-4
18593: PPUSH
18594: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
18598: LD_EXP 34
18602: PPUSH
18603: LD_STRING DK-Len-5
18605: PPUSH
18606: CALL_OW 88
// leninSpotted := true ;
18610: LD_ADDR_EXP 14
18614: PUSH
18615: LD_INT 1
18617: ST_TO_ADDR
// end ;
18618: END
// every 0 0$1 trigger ( bergkampfArrived and tick > 14 14$00 ) or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 322 , 215 , 20 ] ] ) do var i ;
18619: LD_EXP 3
18623: PUSH
18624: LD_OWVAR 1
18628: PUSH
18629: LD_INT 29400
18631: GREATER
18632: AND
18633: PUSH
18634: LD_INT 22
18636: PUSH
18637: LD_INT 2
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 92
18646: PUSH
18647: LD_INT 322
18649: PUSH
18650: LD_INT 215
18652: PUSH
18653: LD_INT 20
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PPUSH
18666: CALL_OW 69
18670: OR
18671: IFFALSE 19034
18673: GO 18675
18675: DISABLE
18676: LD_INT 0
18678: PPUSH
// begin PrepareOmarSquad ;
18679: CALL 3961 0 0
// repeat wait ( 0 0$1 ) ;
18683: LD_INT 35
18685: PPUSH
18686: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
18690: LD_INT 14
18692: PPUSH
18693: LD_INT 22
18695: PUSH
18696: LD_INT 3
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 2
18705: PUSH
18706: LD_INT 21
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 59
18718: PUSH
18719: EMPTY
18720: LIST
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: LIST
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PPUSH
18731: CALL_OW 70
18735: NOT
18736: IFFALSE 18683
// for i in omarSquad do
18738: LD_ADDR_VAR 0 1
18742: PUSH
18743: LD_EXP 47
18747: PUSH
18748: FOR_IN
18749: IFFALSE 18780
// if GetLives ( i ) < 750 then
18751: LD_VAR 0 1
18755: PPUSH
18756: CALL_OW 256
18760: PUSH
18761: LD_INT 750
18763: LESS
18764: IFFALSE 18778
// SetLives ( i , 1000 ) ;
18766: LD_VAR 0 1
18770: PPUSH
18771: LD_INT 1000
18773: PPUSH
18774: CALL_OW 234
18778: GO 18748
18780: POP
18781: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
18782: LD_ADDR_VAR 0 1
18786: PUSH
18787: LD_INT 14
18789: PPUSH
18790: LD_INT 21
18792: PUSH
18793: LD_INT 3
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PPUSH
18800: CALL_OW 70
18804: PUSH
18805: FOR_IN
18806: IFFALSE 18822
// SetSide ( i , 5 ) ;
18808: LD_VAR 0 1
18812: PPUSH
18813: LD_INT 5
18815: PPUSH
18816: CALL_OW 235
18820: GO 18805
18822: POP
18823: POP
// wait ( 0 0$3 ) ;
18824: LD_INT 105
18826: PPUSH
18827: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
18831: LD_INT 5
18833: PPUSH
18834: LD_INT 2
18836: PPUSH
18837: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
18841: LD_EXP 39
18845: PPUSH
18846: CALL_OW 87
// DialogueOn ;
18850: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-1 ) ;
18854: LD_EXP 39
18858: PPUSH
18859: LD_STRING DOm-Veh-1
18861: PPUSH
18862: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
18866: LD_EXP 39
18870: PPUSH
18871: LD_STRING DOm-Veh-2
18873: PPUSH
18874: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
18878: LD_EXP 39
18882: PPUSH
18883: LD_STRING DOm-Veh-3
18885: PPUSH
18886: CALL_OW 94
// if mortarConstructed then
18890: LD_EXP 15
18894: IFFALSE 18908
// SayRadio ( Omar , DOm-Veh-4 ) ;
18896: LD_EXP 39
18900: PPUSH
18901: LD_STRING DOm-Veh-4
18903: PPUSH
18904: CALL_OW 94
// Say ( Heike , DH-Veh-5 ) ;
18908: LD_EXP 29
18912: PPUSH
18913: LD_STRING DH-Veh-5
18915: PPUSH
18916: CALL_OW 88
// if IsOk ( Kurt ) then
18920: LD_EXP 40
18924: PPUSH
18925: CALL_OW 302
18929: IFFALSE 18979
// begin Say ( Kurt , DKs-Veh-6 ) ;
18931: LD_EXP 40
18935: PPUSH
18936: LD_STRING DKs-Veh-6
18938: PPUSH
18939: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
18943: LD_EXP 40
18947: PPUSH
18948: LD_STRING DKs-Veh-7
18950: PPUSH
18951: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
18955: LD_EXP 30
18959: PPUSH
18960: LD_STRING DG-Veh-8
18962: PPUSH
18963: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
18967: LD_EXP 31
18971: PPUSH
18972: LD_STRING DM-Veh-9
18974: PPUSH
18975: CALL_OW 88
// end ; DialogueOff ;
18979: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
18983: LD_STRING M4
18985: PPUSH
18986: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
18990: LD_EXP 39
18994: PPUSH
18995: LD_INT 341
18997: PPUSH
18998: LD_INT 232
19000: PPUSH
19001: CALL_OW 428
19005: PPUSH
19006: CALL_OW 120
// omarArrived := true ;
19010: LD_ADDR_EXP 6
19014: PUSH
19015: LD_INT 1
19017: ST_TO_ADDR
// omarScriptBase := true ;
19018: LD_ADDR_EXP 10
19022: PUSH
19023: LD_INT 1
19025: ST_TO_ADDR
// omarWantVehicles := true ;
19026: LD_ADDR_EXP 18
19030: PUSH
19031: LD_INT 1
19033: ST_TO_ADDR
// end ;
19034: PPOPN 1
19036: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
19037: LD_EXP 42
19041: PPUSH
19042: CALL_OW 302
19046: PUSH
19047: LD_EXP 12
19051: AND
19052: PUSH
19053: LD_EXP 6
19057: AND
19058: IFFALSE 19155
19060: GO 19062
19062: DISABLE
// begin CenterNowOnUnits ( Rolf ) ;
19063: LD_EXP 42
19067: PPUSH
19068: CALL_OW 87
// DialogueOn ;
19072: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
19076: LD_EXP 42
19080: PPUSH
19081: LD_STRING DRf-Veh-10
19083: PPUSH
19084: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
19088: LD_EXP 42
19092: PPUSH
19093: LD_STRING DRf-Veh-11
19095: PPUSH
19096: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
19100: LD_EXP 29
19104: PPUSH
19105: LD_STRING DH-Veh-12
19107: PPUSH
19108: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
19112: LD_EXP 29
19116: PPUSH
19117: LD_STRING DH-Veh-13
19119: PPUSH
19120: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
19124: LD_EXP 42
19128: PPUSH
19129: LD_STRING DRf-Veh-14
19131: PPUSH
19132: CALL_OW 88
// DialogueOff ;
19136: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
19140: LD_STRING M5
19142: PPUSH
19143: CALL_OW 337
// rolfWantVehicles := true ;
19147: LD_ADDR_EXP 17
19151: PUSH
19152: LD_INT 1
19154: ST_TO_ADDR
// end ;
19155: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
19156: LD_EXP 18
19160: IFFALSE 19852
19162: GO 19164
19164: DISABLE
19165: LD_INT 0
19167: PPUSH
19168: PPUSH
19169: PPUSH
19170: PPUSH
19171: PPUSH
19172: PPUSH
// begin wait ( 0 0$3 ) ;
19173: LD_INT 105
19175: PPUSH
19176: CALL_OW 67
// Hint ( OmarVehicles ) ;
19180: LD_STRING OmarVehicles
19182: PPUSH
19183: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
19187: LD_INT 16
19189: PPUSH
19190: LD_INT 1
19192: PPUSH
19193: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
19197: LD_INT 35
19199: PPUSH
19200: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
19204: LD_ADDR_EXP 20
19208: PUSH
19209: LD_EXP 20
19213: PUSH
19214: LD_INT 35
19216: MINUS
19217: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
19218: LD_EXP 20
19222: PUSH
19223: LD_INT 0
19225: LESSEQUAL
19226: IFFALSE 19326
// begin display_strings := [ ] ;
19228: LD_ADDR_OWVAR 47
19232: PUSH
19233: EMPTY
19234: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
19235: LD_STRING M4a
19237: PPUSH
19238: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19242: LD_INT 16
19244: PPUSH
19245: LD_INT 0
19247: PPUSH
19248: CALL_OW 424
// DialogueOn ;
19252: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
19256: LD_EXP 39
19260: PPUSH
19261: LD_STRING DOm-Veh-b-15
19263: PPUSH
19264: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
19268: LD_EXP 29
19272: PPUSH
19273: LD_STRING DH-Veh-b-16
19275: PPUSH
19276: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
19280: LD_EXP 39
19284: PPUSH
19285: LD_STRING DOm-Veh-b-17
19287: PPUSH
19288: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
19292: LD_EXP 34
19296: PPUSH
19297: LD_STRING DK-Veh-b-18
19299: PPUSH
19300: CALL_OW 88
// DialogueOff ;
19304: CALL_OW 7
// omarAttack := true ;
19308: LD_ADDR_EXP 23
19312: PUSH
19313: LD_INT 1
19315: ST_TO_ADDR
// omarScriptBase := false ;
19316: LD_ADDR_EXP 10
19320: PUSH
19321: LD_INT 0
19323: ST_TO_ADDR
// exit ;
19324: GO 19852
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19326: LD_EXP 21
19330: PUSH
19331: LD_INT 16
19333: PPUSH
19334: LD_INT 22
19336: PUSH
19337: LD_INT 2
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 21
19346: PUSH
19347: LD_INT 2
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 33
19356: PUSH
19357: LD_INT 1
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 58
19366: PUSH
19367: EMPTY
19368: LIST
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: PPUSH
19376: CALL_OW 70
19380: LESSEQUAL
19381: IFFALSE 19197
// omarWaitingForVehiclesTimer := 0 0$00 ;
19383: LD_ADDR_EXP 20
19387: PUSH
19388: LD_INT 0
19390: ST_TO_ADDR
// display_strings := [ ] ;
19391: LD_ADDR_OWVAR 47
19395: PUSH
19396: EMPTY
19397: ST_TO_ADDR
// DialogueOn ;
19398: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
19402: LD_EXP 39
19406: PPUSH
19407: LD_STRING DOm-Veh-a-15
19409: PPUSH
19410: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
19414: LD_EXP 34
19418: PPUSH
19419: LD_STRING DK-Veh-a-16
19421: PPUSH
19422: CALL_OW 88
// DialogueOff ;
19426: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
19430: LD_STRING M4a
19432: PPUSH
19433: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19437: LD_INT 16
19439: PPUSH
19440: LD_INT 0
19442: PPUSH
19443: CALL_OW 424
// omarHasVehicles := true ;
19447: LD_ADDR_EXP 22
19451: PUSH
19452: LD_INT 1
19454: ST_TO_ADDR
// omarAttack := true ;
19455: LD_ADDR_EXP 23
19459: PUSH
19460: LD_INT 1
19462: ST_TO_ADDR
// omarScriptBase := false ;
19463: LD_ADDR_EXP 10
19467: PUSH
19468: LD_INT 0
19470: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19471: LD_ADDR_VAR 0 2
19475: PUSH
19476: LD_INT 16
19478: PPUSH
19479: LD_INT 22
19481: PUSH
19482: LD_INT 2
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 21
19491: PUSH
19492: LD_INT 2
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 33
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 58
19511: PUSH
19512: EMPTY
19513: LIST
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: PPUSH
19521: CALL_OW 70
19525: ST_TO_ADDR
// for i in tmp do
19526: LD_ADDR_VAR 0 1
19530: PUSH
19531: LD_VAR 0 2
19535: PUSH
19536: FOR_IN
19537: IFFALSE 19565
// begin SetFuel ( i , 100 ) ;
19539: LD_VAR 0 1
19543: PPUSH
19544: LD_INT 100
19546: PPUSH
19547: CALL_OW 240
// SetSide ( i , 5 ) ;
19551: LD_VAR 0 1
19555: PPUSH
19556: LD_INT 5
19558: PPUSH
19559: CALL_OW 235
// end ;
19563: GO 19536
19565: POP
19566: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
19567: LD_ADDR_VAR 0 3
19571: PUSH
19572: LD_EXP 47
19576: PPUSH
19577: LD_INT 25
19579: PUSH
19580: LD_INT 2
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PPUSH
19587: CALL_OW 72
19591: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
19592: LD_ADDR_VAR 0 4
19596: PUSH
19597: LD_EXP 47
19601: PPUSH
19602: LD_INT 3
19604: PUSH
19605: LD_INT 55
19607: PUSH
19608: EMPTY
19609: LIST
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 25
19617: PUSH
19618: LD_INT 3
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PPUSH
19629: CALL_OW 72
19633: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
19634: LD_ADDR_VAR 0 5
19638: PUSH
19639: LD_INT 324
19641: PPUSH
19642: LD_INT 234
19644: PPUSH
19645: CALL_OW 428
19649: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
19650: LD_ADDR_VAR 0 6
19654: PUSH
19655: LD_INT 334
19657: PPUSH
19658: LD_INT 241
19660: PPUSH
19661: CALL_OW 428
19665: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
19666: LD_VAR 0 6
19670: PPUSH
19671: CALL_OW 313
19675: PPUSH
19676: CALL_OW 122
// if eng then
19680: LD_VAR 0 3
19684: IFFALSE 19792
// begin if eng + mech <= tmp then
19686: LD_VAR 0 3
19690: PUSH
19691: LD_VAR 0 4
19695: PLUS
19696: PUSH
19697: LD_VAR 0 2
19701: LESSEQUAL
19702: IFFALSE 19757
// begin ComEnterUnit ( eng , workshop ) ;
19704: LD_VAR 0 3
19708: PPUSH
19709: LD_VAR 0 5
19713: PPUSH
19714: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
19718: LD_VAR 0 3
19722: PPUSH
19723: LD_INT 3
19725: PPUSH
19726: CALL_OW 183
// AddComExitBuilding ( eng ) ;
19730: LD_VAR 0 3
19734: PPUSH
19735: CALL_OW 182
// mech := mech union eng ;
19739: LD_ADDR_VAR 0 4
19743: PUSH
19744: LD_VAR 0 4
19748: PUSH
19749: LD_VAR 0 3
19753: UNION
19754: ST_TO_ADDR
// end else
19755: GO 19792
// begin ComEnterUnit ( eng , armoury ) ;
19757: LD_VAR 0 3
19761: PPUSH
19762: LD_VAR 0 6
19766: PPUSH
19767: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
19771: LD_VAR 0 3
19775: PPUSH
19776: LD_INT 1
19778: PPUSH
19779: CALL_OW 183
// AddComExitBuilding ( eng ) ;
19783: LD_VAR 0 3
19787: PPUSH
19788: CALL_OW 182
// end ; end ; for i := 1 to tmp do
19792: LD_ADDR_VAR 0 1
19796: PUSH
19797: DOUBLE
19798: LD_INT 1
19800: DEC
19801: ST_TO_ADDR
19802: LD_VAR 0 2
19806: PUSH
19807: FOR_TO
19808: IFFALSE 19850
// if i <= mech then
19810: LD_VAR 0 1
19814: PUSH
19815: LD_VAR 0 4
19819: LESSEQUAL
19820: IFFALSE 19848
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
19822: LD_VAR 0 4
19826: PUSH
19827: LD_VAR 0 1
19831: ARRAY
19832: PPUSH
19833: LD_VAR 0 2
19837: PUSH
19838: LD_VAR 0 1
19842: ARRAY
19843: PPUSH
19844: CALL_OW 180
19848: GO 19807
19850: POP
19851: POP
// end ;
19852: PPOPN 6
19854: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i ;
19855: LD_EXP 42
19859: PPUSH
19860: CALL_OW 302
19864: PUSH
19865: LD_EXP 17
19869: AND
19870: IFFALSE 20326
19872: GO 19874
19874: DISABLE
19875: LD_INT 0
19877: PPUSH
// begin repeat wait ( 0 0$1 ) ;
19878: LD_INT 35
19880: PPUSH
19881: CALL_OW 67
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
19885: LD_ADDR_EXP 19
19889: PUSH
19890: LD_EXP 19
19894: PUSH
19895: LD_INT 35
19897: MINUS
19898: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 or omarAttack then
19899: LD_EXP 19
19903: PUSH
19904: LD_INT 0
19906: LESSEQUAL
19907: PUSH
19908: LD_EXP 23
19912: OR
19913: IFFALSE 20131
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
19915: LD_ADDR_EXP 19
19919: PUSH
19920: LD_INT 0
19922: ST_TO_ADDR
// display_strings := [ ] ;
19923: LD_ADDR_OWVAR 47
19927: PUSH
19928: EMPTY
19929: ST_TO_ADDR
// DialogueOn ;
19930: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
19934: LD_EXP 42
19938: PPUSH
19939: LD_STRING DRf-Veh-b-19
19941: PPUSH
19942: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
19946: LD_EXP 42
19950: PPUSH
19951: LD_STRING DRf-Veh-b-20
19953: PPUSH
19954: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
19958: LD_EXP 29
19962: PPUSH
19963: LD_STRING DH-Veh-b-21
19965: PPUSH
19966: CALL_OW 88
// if IsOk ( Givi ) then
19970: LD_EXP 30
19974: PPUSH
19975: CALL_OW 302
19979: IFFALSE 20017
// begin Say ( Givi , DG-Veh-b-22 ) ;
19981: LD_EXP 30
19985: PPUSH
19986: LD_STRING DG-Veh-b-22
19988: PPUSH
19989: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
19993: LD_EXP 29
19997: PPUSH
19998: LD_STRING DH-Veh-b-23
20000: PPUSH
20001: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
20005: LD_EXP 30
20009: PPUSH
20010: LD_STRING DG-Veh-b-24
20012: PPUSH
20013: CALL_OW 88
// end ; DialogueOff ;
20017: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20021: LD_STRING M5a
20023: PPUSH
20024: CALL_OW 337
// for i in rolfSquad do
20028: LD_ADDR_VAR 0 1
20032: PUSH
20033: LD_EXP 46
20037: PUSH
20038: FOR_IN
20039: IFFALSE 20105
// begin SetSide ( i , 8 ) ;
20041: LD_VAR 0 1
20045: PPUSH
20046: LD_INT 8
20048: PPUSH
20049: CALL_OW 235
// if IsDriver ( i ) then
20053: LD_VAR 0 1
20057: PPUSH
20058: CALL 58962 0 1
20062: IFFALSE 20083
// SetSide ( IsInUnit ( i ) , 8 ) else
20064: LD_VAR 0 1
20068: PPUSH
20069: CALL_OW 310
20073: PPUSH
20074: LD_INT 8
20076: PPUSH
20077: CALL_OW 235
20081: GO 20103
// if IsInUnit ( i ) then
20083: LD_VAR 0 1
20087: PPUSH
20088: CALL_OW 310
20092: IFFALSE 20103
// ComExitBuilding ( i ) ;
20094: LD_VAR 0 1
20098: PPUSH
20099: CALL_OW 122
// end ;
20103: GO 20038
20105: POP
20106: POP
// wait ( 0 0$1 ) ;
20107: LD_INT 35
20109: PPUSH
20110: CALL_OW 67
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20114: LD_EXP 46
20118: PPUSH
20119: LD_INT 229
20121: PPUSH
20122: LD_INT 154
20124: PPUSH
20125: CALL_OW 114
// exit ;
20129: GO 20326
// end ; if IsDead ( Rolf ) then
20131: LD_EXP 42
20135: PPUSH
20136: CALL_OW 301
20140: IFFALSE 20151
// begin ChangeMissionObjectives ( M5a ) ;
20142: LD_STRING M5a
20144: PPUSH
20145: CALL_OW 337
// exit ;
20149: GO 20326
// end ; until UnitFilter ( rolfSquad , [ f_driving ] ) + 0 = rolfSquad + 0 ;
20151: LD_EXP 46
20155: PPUSH
20156: LD_INT 55
20158: PUSH
20159: EMPTY
20160: LIST
20161: PPUSH
20162: CALL_OW 72
20166: PUSH
20167: LD_INT 0
20169: PLUS
20170: PUSH
20171: LD_EXP 46
20175: PUSH
20176: LD_INT 0
20178: PLUS
20179: EQUAL
20180: IFFALSE 19878
// rolfWaitingForVehiclesTimer := 0 0$00 ;
20182: LD_ADDR_EXP 19
20186: PUSH
20187: LD_INT 0
20189: ST_TO_ADDR
// display_strings := [ ] ;
20190: LD_ADDR_OWVAR 47
20194: PUSH
20195: EMPTY
20196: ST_TO_ADDR
// DialogueOn ;
20197: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
20201: LD_EXP 42
20205: PPUSH
20206: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
20210: LD_EXP 42
20214: PPUSH
20215: LD_STRING DRf-Veh-a-17
20217: PPUSH
20218: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
20222: LD_EXP 29
20226: PPUSH
20227: LD_STRING DH-08-Veh-a-18
20229: PPUSH
20230: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
20234: LD_EXP 42
20238: PPUSH
20239: LD_STRING DRf-Veh-a-19
20241: PPUSH
20242: CALL_OW 88
// DialogueOff ;
20246: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20250: LD_STRING M5a
20252: PPUSH
20253: CALL_OW 337
// rolfHasVehicles := true ;
20257: LD_ADDR_EXP 16
20261: PUSH
20262: LD_INT 1
20264: ST_TO_ADDR
// for i in rolfSquad do
20265: LD_ADDR_VAR 0 1
20269: PUSH
20270: LD_EXP 46
20274: PUSH
20275: FOR_IN
20276: IFFALSE 20309
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
20278: LD_VAR 0 1
20282: PPUSH
20283: CALL_OW 310
20287: PPUSH
20288: LD_INT 8
20290: PPUSH
20291: CALL_OW 235
// SetSide ( i , 8 ) ;
20295: LD_VAR 0 1
20299: PPUSH
20300: LD_INT 8
20302: PPUSH
20303: CALL_OW 235
// end ;
20307: GO 20275
20309: POP
20310: POP
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20311: LD_EXP 46
20315: PPUSH
20316: LD_INT 229
20318: PPUSH
20319: LD_INT 154
20321: PPUSH
20322: CALL_OW 114
// end ;
20326: PPOPN 1
20328: END
// every 0 0$1 trigger leninSpotted do
20329: LD_EXP 14
20333: IFFALSE 20421
20335: GO 20337
20337: DISABLE
// begin wait ( 0 0$10 ) ;
20338: LD_INT 350
20340: PPUSH
20341: CALL_OW 67
// DialogueOn ;
20345: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
20349: LD_EXP 41
20353: PPUSH
20354: LD_STRING DA-Transmission-1
20356: PPUSH
20357: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
20361: LD_EXP 48
20365: PPUSH
20366: LD_STRING DMzw-Transmission-2
20368: PPUSH
20369: CALL_OW 94
// if gaidarKilled then
20373: LD_EXP 7
20377: IFFALSE 20393
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
20379: LD_EXP 48
20383: PPUSH
20384: LD_STRING DMzw-Transmission-3
20386: PPUSH
20387: CALL_OW 94
20391: GO 20405
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
20393: LD_EXP 48
20397: PPUSH
20398: LD_STRING DMzw-Transmission-a-3
20400: PPUSH
20401: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
20405: LD_EXP 29
20409: PPUSH
20410: LD_STRING DH-Transmission-4
20412: PPUSH
20413: CALL_OW 88
// DialogueOff ;
20417: CALL_OW 7
// end ;
20421: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
20422: LD_INT 22
20424: PUSH
20425: LD_INT 3
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 25
20434: PUSH
20435: LD_INT 9
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 101
20444: PUSH
20445: LD_INT 2
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: LIST
20456: PPUSH
20457: CALL_OW 69
20461: PUSH
20462: LD_EXP 29
20466: PPUSH
20467: CALL_OW 302
20471: AND
20472: IFFALSE 20537
20474: GO 20476
20476: DISABLE
// begin CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
20477: LD_INT 22
20479: PUSH
20480: LD_INT 3
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 25
20489: PUSH
20490: LD_INT 9
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 101
20499: PUSH
20500: LD_INT 2
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: LIST
20511: PPUSH
20512: CALL_OW 69
20516: PUSH
20517: LD_INT 1
20519: ARRAY
20520: PPUSH
20521: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
20525: LD_EXP 29
20529: PPUSH
20530: LD_STRING DH-Rubazooka-1
20532: PPUSH
20533: CALL_OW 88
// end ;
20537: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
20538: LD_INT 19
20540: PPUSH
20541: LD_INT 22
20543: PUSH
20544: LD_INT 3
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PPUSH
20551: CALL_OW 70
20555: PUSH
20556: LD_EXP 28
20560: AND
20561: IFFALSE 20612
20563: GO 20565
20565: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
20566: LD_INT 19
20568: PPUSH
20569: LD_INT 22
20571: PUSH
20572: LD_INT 3
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PPUSH
20579: CALL_OW 70
20583: PPUSH
20584: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
20588: LD_EXP 29
20592: PPUSH
20593: LD_STRING DH-Ruattfirst-1
20595: PPUSH
20596: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
20600: LD_EXP 29
20604: PPUSH
20605: LD_STRING DH-Ruattfirst-2
20607: PPUSH
20608: CALL_OW 88
// end ;
20612: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
20613: LD_INT 19
20615: PPUSH
20616: LD_INT 22
20618: PUSH
20619: LD_INT 3
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PPUSH
20626: CALL_OW 70
20630: PUSH
20631: LD_EXP 28
20635: NOT
20636: AND
20637: IFFALSE 20676
20639: GO 20641
20641: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
20642: LD_INT 19
20644: PPUSH
20645: LD_INT 22
20647: PUSH
20648: LD_INT 3
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PPUSH
20655: CALL_OW 70
20659: PPUSH
20660: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
20664: LD_EXP 29
20668: PPUSH
20669: LD_STRING DH-Ruattnext-1
20671: PPUSH
20672: CALL_OW 88
// end ;
20676: END
// every 0 0$1 trigger GetResourceType ( GetBase ( arDepot ) , mat_oil ) < 31 and IsOk ( Givi ) do var vehicle , driver , live ;
20677: LD_EXP 43
20681: PPUSH
20682: CALL_OW 274
20686: PPUSH
20687: LD_INT 2
20689: PPUSH
20690: CALL_OW 275
20694: PUSH
20695: LD_INT 31
20697: LESS
20698: PUSH
20699: LD_EXP 30
20703: PPUSH
20704: CALL_OW 302
20708: AND
20709: IFFALSE 21260
20711: GO 20713
20713: DISABLE
20714: LD_INT 0
20716: PPUSH
20717: PPUSH
20718: PPUSH
// begin DialogueOn ;
20719: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
20723: LD_EXP 29
20727: PPUSH
20728: LD_STRING DH-Fuel-1
20730: PPUSH
20731: CALL_OW 88
// Say ( Givi , DG-Fuel-2 ) ;
20735: LD_EXP 30
20739: PPUSH
20740: LD_STRING DG-Fuel-2
20742: PPUSH
20743: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
20747: LD_EXP 30
20751: PPUSH
20752: LD_STRING DG-Fuel-3
20754: PPUSH
20755: CALL_OW 88
// DialogueOff ;
20759: CALL_OW 7
// Query ( Oil ) ;
20763: LD_STRING Oil
20765: PPUSH
20766: CALL_OW 97
// SetAreaMapShow ( oilArea , 1 ) ;
20770: LD_INT 20
20772: PPUSH
20773: LD_INT 1
20775: PPUSH
20776: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
20780: LD_INT 35
20782: PPUSH
20783: CALL_OW 67
// until FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
20787: LD_INT 20
20789: PPUSH
20790: LD_INT 22
20792: PUSH
20793: LD_INT 2
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 33
20802: PUSH
20803: LD_INT 1
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 2
20812: PUSH
20813: LD_INT 34
20815: PUSH
20816: LD_INT 32
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 34
20825: PUSH
20826: LD_INT 51
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: LIST
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: LIST
20842: PPUSH
20843: CALL_OW 70
20847: IFFALSE 20780
// SetAreaMapShow ( oilArea , 0 ) ;
20849: LD_INT 20
20851: PPUSH
20852: LD_INT 0
20854: PPUSH
20855: CALL_OW 424
// vehicle := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) [ 1 ] ;
20859: LD_ADDR_VAR 0 1
20863: PUSH
20864: LD_INT 20
20866: PPUSH
20867: LD_INT 22
20869: PUSH
20870: LD_INT 2
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 33
20879: PUSH
20880: LD_INT 1
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 2
20889: PUSH
20890: LD_INT 34
20892: PUSH
20893: LD_INT 32
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 34
20902: PUSH
20903: LD_INT 51
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: LIST
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: LIST
20919: PPUSH
20920: CALL_OW 70
20924: PUSH
20925: LD_INT 1
20927: ARRAY
20928: ST_TO_ADDR
// driver := IsDrivenBy ( vehicle ) ;
20929: LD_ADDR_VAR 0 2
20933: PUSH
20934: LD_VAR 0 1
20938: PPUSH
20939: CALL_OW 311
20943: ST_TO_ADDR
// live := GetLives ( vehicle ) ;
20944: LD_ADDR_VAR 0 3
20948: PUSH
20949: LD_VAR 0 1
20953: PPUSH
20954: CALL_OW 256
20958: ST_TO_ADDR
// RemoveUnit ( driver ) ;
20959: LD_VAR 0 2
20963: PPUSH
20964: CALL_OW 64
// RemoveUnit ( vehicle ) ;
20968: LD_VAR 0 1
20972: PPUSH
20973: CALL_OW 64
// wait ( rand ( 4 4$30 , 5 5$30 ) ) ;
20977: LD_INT 9450
20979: PPUSH
20980: LD_INT 11550
20982: PPUSH
20983: CALL_OW 12
20987: PPUSH
20988: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20992: LD_INT 35
20994: PPUSH
20995: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
20999: LD_INT 22
21001: PUSH
21002: LD_INT 3
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 92
21011: PUSH
21012: LD_INT 261
21014: PUSH
21015: LD_INT 71
21017: PUSH
21018: LD_INT 12
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PPUSH
21031: CALL_OW 69
21035: NOT
21036: PUSH
21037: LD_INT 277
21039: PPUSH
21040: LD_INT 80
21042: PPUSH
21043: CALL_OW 428
21047: NOT
21048: AND
21049: IFFALSE 20992
// uc_nation := GetNation ( vehicle ) ;
21051: LD_ADDR_OWVAR 21
21055: PUSH
21056: LD_VAR 0 1
21060: PPUSH
21061: CALL_OW 248
21065: ST_TO_ADDR
// uc_side := 2 ;
21066: LD_ADDR_OWVAR 20
21070: PUSH
21071: LD_INT 2
21073: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( vehicle ) , GetEngine ( vehicle ) , GetControl ( vehicle ) , GetWeapon ( vehicle ) , 66 ) ;
21074: LD_VAR 0 1
21078: PPUSH
21079: CALL_OW 265
21083: PPUSH
21084: LD_VAR 0 1
21088: PPUSH
21089: CALL_OW 262
21093: PPUSH
21094: LD_VAR 0 1
21098: PPUSH
21099: CALL_OW 263
21103: PPUSH
21104: LD_VAR 0 1
21108: PPUSH
21109: CALL_OW 264
21113: PPUSH
21114: LD_INT 66
21116: PPUSH
21117: CALL 29483 0 5
// vehicle := CreateVehicle ;
21121: LD_ADDR_VAR 0 1
21125: PUSH
21126: CALL_OW 45
21130: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
21131: LD_VAR 0 1
21135: PPUSH
21136: LD_INT 277
21138: PPUSH
21139: LD_INT 80
21141: PPUSH
21142: LD_INT 4
21144: PPUSH
21145: LD_INT 0
21147: PPUSH
21148: CALL 63287 0 5
// PlaceHumanInUnit ( driver , vehicle ) ;
21152: LD_VAR 0 2
21156: PPUSH
21157: LD_VAR 0 1
21161: PPUSH
21162: CALL_OW 52
// SetLives ( vehicle , live ) ;
21166: LD_VAR 0 1
21170: PPUSH
21171: LD_VAR 0 3
21175: PPUSH
21176: CALL_OW 234
// if Prob ( [ 70 , 60 , 50 ] [ Difficulty ] ) then
21180: LD_INT 70
21182: PUSH
21183: LD_INT 60
21185: PUSH
21186: LD_INT 50
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: LIST
21193: PUSH
21194: LD_OWVAR 67
21198: ARRAY
21199: PPUSH
21200: CALL_OW 13
21204: IFFALSE 21223
// SetCargo ( vehicle , mat_oil , 100 ) else
21206: LD_VAR 0 1
21210: PPUSH
21211: LD_INT 2
21213: PPUSH
21214: LD_INT 100
21216: PPUSH
21217: CALL_OW 290
21221: GO 21245
// if live > 333 then
21223: LD_VAR 0 3
21227: PUSH
21228: LD_INT 333
21230: GREATER
21231: IFFALSE 21245
// SetLives ( vehicle , 333 ) ;
21233: LD_VAR 0 1
21237: PPUSH
21238: LD_INT 333
21240: PPUSH
21241: CALL_OW 234
// ComMoveXY ( vehicle , 250 , 119 ) ;
21245: LD_VAR 0 1
21249: PPUSH
21250: LD_INT 250
21252: PPUSH
21253: LD_INT 119
21255: PPUSH
21256: CALL_OW 111
// end ;
21260: PPOPN 3
21262: END
// every 0 0$1 trigger leninSpotted and omarAttack do
21263: LD_EXP 14
21267: PUSH
21268: LD_EXP 23
21272: AND
21273: IFFALSE 21573
21275: GO 21277
21277: DISABLE
// begin wait ( 0 0$45 ) ;
21278: LD_INT 1575
21280: PPUSH
21281: CALL_OW 67
// DialogueOn ;
21285: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
21289: LD_EXP 37
21293: PPUSH
21294: LD_STRING DShar-End-1
21296: PPUSH
21297: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
21301: LD_EXP 29
21305: PPUSH
21306: LD_STRING DH-End-2
21308: PPUSH
21309: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
21313: LD_EXP 37
21317: PPUSH
21318: LD_STRING DShar-End-3
21320: PPUSH
21321: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
21325: LD_EXP 29
21329: PPUSH
21330: LD_STRING DH-End-4
21332: PPUSH
21333: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
21337: LD_EXP 37
21341: PPUSH
21342: LD_STRING DShar-End-5
21344: PPUSH
21345: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
21349: LD_EXP 37
21353: PPUSH
21354: LD_STRING DShar-End-6
21356: PPUSH
21357: CALL_OW 94
// dwait ( 0 0$2 ) ;
21361: LD_INT 70
21363: PPUSH
21364: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
21368: LD_EXP 29
21372: PPUSH
21373: LD_STRING DH-End-7
21375: PPUSH
21376: CALL_OW 88
// DialogueOff ;
21380: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
21384: LD_STRING M6
21386: PPUSH
21387: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
21391: LD_INT 17
21393: PPUSH
21394: LD_INT 1
21396: PPUSH
21397: CALL_OW 424
// escapeAllowed := true ;
21401: LD_ADDR_EXP 24
21405: PUSH
21406: LD_INT 1
21408: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21409: LD_INT 35
21411: PPUSH
21412: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
21416: LD_EXP 40
21420: PPUSH
21421: LD_STRING DKs-End-8
21423: PPUSH
21424: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
21428: LD_EXP 34
21432: PPUSH
21433: LD_STRING DK-End-10
21435: PPUSH
21436: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
21440: LD_EXP 40
21444: PPUSH
21445: LD_STRING DKs-End-9
21447: PPUSH
21448: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
21452: LD_EXP 36
21456: PPUSH
21457: LD_STRING DMar-End-11
21459: PPUSH
21460: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
21464: LD_STRING 05_DrugsTested
21466: PPUSH
21467: LD_EXP 1
21471: PPUSH
21472: CALL_OW 30
21476: IFFALSE 21490
// Say ( Mike , DM-End-12 ) ;
21478: LD_EXP 31
21482: PPUSH
21483: LD_STRING DM-End-12
21485: PPUSH
21486: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
21490: LD_EXP 38
21494: PPUSH
21495: LD_STRING DO-End-13
21497: PPUSH
21498: CALL_OW 88
// if IsOk ( Sophia ) then
21502: LD_EXP 35
21506: PPUSH
21507: CALL_OW 302
21511: IFFALSE 21537
// begin Say ( Sophia , DS-End-15 ) ;
21513: LD_EXP 35
21517: PPUSH
21518: LD_STRING DS-End-15
21520: PPUSH
21521: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
21525: LD_EXP 34
21529: PPUSH
21530: LD_STRING DK-End-16
21532: PPUSH
21533: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
21537: LD_EXP 30
21541: PPUSH
21542: LD_STRING DG-End-17
21544: PPUSH
21545: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
21549: LD_EXP 30
21553: PPUSH
21554: LD_STRING DG-End-18
21556: PPUSH
21557: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
21561: LD_EXP 30
21565: PPUSH
21566: LD_STRING DG-End-19
21568: PPUSH
21569: CALL_OW 88
// end ;
21573: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
21574: LD_EXP 24
21578: IFFALSE 21706
21580: GO 21582
21582: DISABLE
21583: LD_INT 0
21585: PPUSH
21586: PPUSH
// begin enable ;
21587: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
21588: LD_ADDR_OWVAR 47
21592: PUSH
21593: LD_STRING #X106-2
21595: PUSH
21596: LD_EXP 25
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
21605: LD_ADDR_EXP 25
21609: PUSH
21610: LD_EXP 25
21614: PUSH
21615: LD_INT 35
21617: MINUS
21618: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
21619: LD_ADDR_VAR 0 2
21623: PUSH
21624: LD_INT 17
21626: PPUSH
21627: LD_INT 22
21629: PUSH
21630: LD_INT 2
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 21
21639: PUSH
21640: LD_INT 1
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 23
21649: PUSH
21650: LD_INT 2
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: LIST
21661: PPUSH
21662: CALL_OW 71
21666: ST_TO_ADDR
// if not outsiders then
21667: LD_VAR 0 2
21671: NOT
21672: IFFALSE 21689
// begin escapeAllowed := false ;
21674: LD_ADDR_EXP 24
21678: PUSH
21679: LD_INT 0
21681: ST_TO_ADDR
// disable ;
21682: DISABLE
// MissionWin ;
21683: CALL 21709 0 0
// exit ;
21687: GO 21706
// end ; if escapeTimer <= 0 0$00 then
21689: LD_EXP 25
21693: PUSH
21694: LD_INT 0
21696: LESSEQUAL
21697: IFFALSE 21706
// YouLost ( TimeOut ) ;
21699: LD_STRING TimeOut
21701: PPUSH
21702: CALL_OW 104
// end ;
21706: PPOPN 2
21708: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
21709: LD_INT 0
21711: PPUSH
21712: PPUSH
21713: PPUSH
21714: PPUSH
21715: PPUSH
// Say ( Heike , DH-End-20 ) ;
21716: LD_EXP 29
21720: PPUSH
21721: LD_STRING DH-End-20
21723: PPUSH
21724: CALL_OW 88
// if rolfDied then
21728: LD_EXP 13
21732: IFFALSE 21747
// AddMedal ( med1 , - 1 ) else
21734: LD_STRING med1
21736: PPUSH
21737: LD_INT 1
21739: NEG
21740: PPUSH
21741: CALL_OW 101
21745: GO 21757
// AddMedal ( med1 , 1 ) ;
21747: LD_STRING med1
21749: PPUSH
21750: LD_INT 1
21752: PPUSH
21753: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
21757: LD_EXP 22
21761: PUSH
21762: LD_EXP 16
21766: AND
21767: IFFALSE 21781
// AddMedal ( med2 , 1 ) else
21769: LD_STRING med2
21771: PPUSH
21772: LD_INT 1
21774: PPUSH
21775: CALL_OW 101
21779: GO 21830
// if omarHasVehicles then
21781: LD_EXP 22
21785: IFFALSE 21800
// AddMedal ( med2 , - 1 ) else
21787: LD_STRING med2
21789: PPUSH
21790: LD_INT 1
21792: NEG
21793: PPUSH
21794: CALL_OW 101
21798: GO 21830
// if rolfHasVehicles then
21800: LD_EXP 16
21804: IFFALSE 21819
// AddMedal ( med2 , - 2 ) else
21806: LD_STRING med2
21808: PPUSH
21809: LD_INT 2
21811: NEG
21812: PPUSH
21813: CALL_OW 101
21817: GO 21830
// AddMedal ( med2 , - 3 ) ;
21819: LD_STRING med2
21821: PPUSH
21822: LD_INT 3
21824: NEG
21825: PPUSH
21826: CALL_OW 101
// if ruLoseCounter >= [ 40 , 55 , 70 ] [ Difficulty ] and heikeLoseCounter = 0 then
21830: LD_EXP 5
21834: PUSH
21835: LD_INT 40
21837: PUSH
21838: LD_INT 55
21840: PUSH
21841: LD_INT 70
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: LIST
21848: PUSH
21849: LD_OWVAR 67
21853: ARRAY
21854: GREATEREQUAL
21855: PUSH
21856: LD_EXP 26
21860: PUSH
21861: LD_INT 0
21863: EQUAL
21864: AND
21865: IFFALSE 21879
// AddMedal ( med3 , 1 ) else
21867: LD_STRING med3
21869: PPUSH
21870: LD_INT 1
21872: PPUSH
21873: CALL_OW 101
21877: GO 21909
// if heikeLoseCounter then
21879: LD_EXP 26
21883: IFFALSE 21898
// AddMedal ( med3 , - 2 ) else
21885: LD_STRING med3
21887: PPUSH
21888: LD_INT 2
21890: NEG
21891: PPUSH
21892: CALL_OW 101
21896: GO 21909
// AddMedal ( med3 , - 1 ) ;
21898: LD_STRING med3
21900: PPUSH
21901: LD_INT 1
21903: NEG
21904: PPUSH
21905: CALL_OW 101
// GiveMedals ( MAIN ) ;
21909: LD_STRING MAIN
21911: PPUSH
21912: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
21916: LD_INT 22
21918: PUSH
21919: LD_INT 2
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: LD_INT 23
21928: PUSH
21929: LD_INT 2
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 21
21938: PUSH
21939: LD_INT 1
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: LIST
21950: PPUSH
21951: CALL_OW 69
21955: PPUSH
21956: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
21960: LD_EXP 29
21964: PPUSH
21965: LD_STRING 06_Heike
21967: PPUSH
21968: CALL_OW 38
// if Aviradze then
21972: LD_EXP 41
21976: IFFALSE 21990
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
21978: LD_EXP 41
21982: PPUSH
21983: LD_STRING 06_Aviradze
21985: PPUSH
21986: CALL_OW 38
// if Ibrahim then
21990: LD_EXP 32
21994: IFFALSE 22008
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
21996: LD_EXP 32
22000: PPUSH
22001: LD_STRING 06_Ibrahim
22003: PPUSH
22004: CALL_OW 38
// if Kamil then
22008: LD_EXP 33
22012: IFFALSE 22026
// SaveCharacters ( Kamil , 06_Kamil ) ;
22014: LD_EXP 33
22018: PPUSH
22019: LD_STRING 06_Kamil
22021: PPUSH
22022: CALL_OW 38
// if Sophia then
22026: LD_EXP 35
22030: IFFALSE 22044
// SaveCharacters ( Sophia , 06_Sophia ) ;
22032: LD_EXP 35
22036: PPUSH
22037: LD_STRING 06_Sophia
22039: PPUSH
22040: CALL_OW 38
// if Kaia then
22044: LD_EXP 34
22048: IFFALSE 22062
// SaveCharacters ( Kaia , 06_Kaia ) ;
22050: LD_EXP 34
22054: PPUSH
22055: LD_STRING 06_Kaia
22057: PPUSH
22058: CALL_OW 38
// if Givi then
22062: LD_EXP 30
22066: IFFALSE 22080
// SaveCharacters ( Givi , 06_Givi ) ;
22068: LD_EXP 30
22072: PPUSH
22073: LD_STRING 06_Givi
22075: PPUSH
22076: CALL_OW 38
// if Mike then
22080: LD_EXP 31
22084: IFFALSE 22098
// SaveCharacters ( Mike , 06_Mike ) ;
22086: LD_EXP 31
22090: PPUSH
22091: LD_STRING 06_Mike
22093: PPUSH
22094: CALL_OW 38
// if Markov then
22098: LD_EXP 36
22102: IFFALSE 22116
// SaveCharacters ( Markov , 06_Markov ) ;
22104: LD_EXP 36
22108: PPUSH
22109: LD_STRING 06_Markov
22111: PPUSH
22112: CALL_OW 38
// if Kurt then
22116: LD_EXP 40
22120: IFFALSE 22134
// SaveCharacters ( Kurt , 06_Kurt ) ;
22122: LD_EXP 40
22126: PPUSH
22127: LD_STRING 06_Kurt
22129: PPUSH
22130: CALL_OW 38
// if heikeSecondSquad then
22134: LD_EXP 44
22138: IFFALSE 22152
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
22140: LD_EXP 44
22144: PPUSH
22145: LD_STRING 06_others
22147: PPUSH
22148: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
22152: LD_ADDR_VAR 0 3
22156: PUSH
22157: LD_INT 22
22159: PUSH
22160: LD_INT 2
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 23
22169: PUSH
22170: LD_INT 0
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PPUSH
22181: CALL_OW 69
22185: ST_TO_ADDR
// if tmp then
22186: LD_VAR 0 3
22190: IFFALSE 22204
// SaveCharacters ( tmp , 06_apes ) ;
22192: LD_VAR 0 3
22196: PPUSH
22197: LD_STRING 06_apes
22199: PPUSH
22200: CALL_OW 38
// if Rolf then
22204: LD_EXP 42
22208: IFFALSE 22259
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
22210: LD_EXP 42
22214: PPUSH
22215: LD_STRING 06_Rolf
22217: PPUSH
22218: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
22222: LD_STRING enableBioCharacter(BIO_ROLF)
22224: PPUSH
22225: CALL_OW 559
// if rolfSquad diff Rolf then
22229: LD_EXP 46
22233: PUSH
22234: LD_EXP 42
22238: DIFF
22239: IFFALSE 22259
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
22241: LD_EXP 46
22245: PUSH
22246: LD_EXP 42
22250: DIFF
22251: PPUSH
22252: LD_STRING 06_RolfSquad
22254: PPUSH
22255: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
22259: LD_ADDR_VAR 0 3
22263: PUSH
22264: LD_INT 17
22266: PPUSH
22267: LD_INT 21
22269: PUSH
22270: LD_INT 2
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PPUSH
22277: CALL_OW 70
22281: ST_TO_ADDR
// if tmp then
22282: LD_VAR 0 3
22286: IFFALSE 22580
// begin tmp2 := [ ] ;
22288: LD_ADDR_VAR 0 4
22292: PUSH
22293: EMPTY
22294: ST_TO_ADDR
// for i in tmp do
22295: LD_ADDR_VAR 0 2
22299: PUSH
22300: LD_VAR 0 3
22304: PUSH
22305: FOR_IN
22306: IFFALSE 22566
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
22308: LD_VAR 0 2
22312: PPUSH
22313: CALL_OW 264
22317: PUSH
22318: LD_INT 32
22320: PUSH
22321: LD_INT 12
22323: PUSH
22324: LD_INT 51
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: LIST
22331: IN
22332: IFFALSE 22469
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
22334: LD_ADDR_VAR 0 5
22338: PUSH
22339: LD_VAR 0 2
22343: PPUSH
22344: LD_INT 1
22346: PPUSH
22347: CALL_OW 289
22351: PUSH
22352: LD_VAR 0 2
22356: PPUSH
22357: LD_INT 2
22359: PPUSH
22360: CALL_OW 289
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
22369: LD_ADDR_VAR 0 4
22373: PUSH
22374: LD_VAR 0 4
22378: PPUSH
22379: LD_VAR 0 4
22383: PUSH
22384: LD_INT 1
22386: PLUS
22387: PPUSH
22388: LD_VAR 0 2
22392: PPUSH
22393: CALL_OW 265
22397: PUSH
22398: LD_VAR 0 2
22402: PPUSH
22403: CALL_OW 262
22407: PUSH
22408: LD_VAR 0 2
22412: PPUSH
22413: CALL_OW 263
22417: PUSH
22418: LD_VAR 0 2
22422: PPUSH
22423: CALL_OW 264
22427: PUSH
22428: LD_VAR 0 2
22432: PPUSH
22433: CALL_OW 248
22437: PUSH
22438: LD_VAR 0 2
22442: PPUSH
22443: CALL_OW 256
22447: PUSH
22448: LD_VAR 0 5
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: PPUSH
22462: CALL_OW 1
22466: ST_TO_ADDR
// end else
22467: GO 22564
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
22469: LD_ADDR_VAR 0 4
22473: PUSH
22474: LD_VAR 0 4
22478: PPUSH
22479: LD_VAR 0 4
22483: PUSH
22484: LD_INT 1
22486: PLUS
22487: PPUSH
22488: LD_VAR 0 2
22492: PPUSH
22493: CALL_OW 265
22497: PUSH
22498: LD_VAR 0 2
22502: PPUSH
22503: CALL_OW 262
22507: PUSH
22508: LD_VAR 0 2
22512: PPUSH
22513: CALL_OW 263
22517: PUSH
22518: LD_VAR 0 2
22522: PPUSH
22523: CALL_OW 264
22527: PUSH
22528: LD_VAR 0 2
22532: PPUSH
22533: CALL_OW 248
22537: PUSH
22538: LD_VAR 0 2
22542: PPUSH
22543: CALL_OW 256
22547: PUSH
22548: EMPTY
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: PPUSH
22559: CALL_OW 1
22563: ST_TO_ADDR
22564: GO 22305
22566: POP
22567: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
22568: LD_VAR 0 4
22572: PPUSH
22573: LD_STRING 06_Vehicles
22575: PPUSH
22576: CALL_OW 39
// end ; YouWin ;
22580: CALL_OW 103
// end ; end_of_file
22584: LD_VAR 0 1
22588: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
22589: LD_INT 0
22591: PPUSH
// begin if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
22592: LD_VAR 0 1
22596: PPUSH
22597: CALL_OW 255
22601: PUSH
22602: LD_INT 2
22604: EQUAL
22605: PUSH
22606: LD_OWVAR 52
22610: AND
22611: PUSH
22612: LD_VAR 0 1
22616: PPUSH
22617: CALL_OW 263
22621: PUSH
22622: LD_INT 1
22624: EQUAL
22625: AND
22626: IFFALSE 22681
// begin driver := IsDrivenBy ( vehicle ) ;
22628: LD_ADDR_VAR 0 3
22632: PUSH
22633: LD_VAR 0 1
22637: PPUSH
22638: CALL_OW 311
22642: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
22643: LD_VAR 0 1
22647: PPUSH
22648: LD_INT 211
22650: PPUSH
22651: LD_INT 101
22653: PPUSH
22654: CALL_OW 111
// AddComExitVehicle ( driver ) ;
22658: LD_VAR 0 3
22662: PPUSH
22663: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22667: LD_VAR 0 3
22671: PPUSH
22672: LD_VAR 0 2
22676: PPUSH
22677: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
22681: LD_VAR 0 1
22685: PPUSH
22686: CALL_OW 255
22690: PUSH
22691: LD_INT 3
22693: EQUAL
22694: IFFALSE 22725
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
22696: LD_ADDR_EXP 55
22700: PUSH
22701: LD_EXP 55
22705: PPUSH
22706: LD_EXP 55
22710: PUSH
22711: LD_INT 1
22713: PLUS
22714: PPUSH
22715: LD_VAR 0 1
22719: PPUSH
22720: CALL_OW 1
22724: ST_TO_ADDR
// end ;
22725: PPOPN 3
22727: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
22728: LD_VAR 0 1
22732: PPUSH
22733: CALL_OW 255
22737: PUSH
22738: LD_INT 8
22740: EQUAL
22741: PUSH
22742: LD_VAR 0 1
22746: PPUSH
22747: CALL_OW 266
22751: PUSH
22752: LD_INT 4
22754: EQUAL
22755: AND
22756: IFFALSE 22767
// ComUpgrade ( b ) ;
22758: LD_VAR 0 1
22762: PPUSH
22763: CALL_OW 146
// end ;
22767: PPOPN 1
22769: END
// on UnitDestroyed ( un ) do begin if un = Heike then
22770: LD_VAR 0 1
22774: PUSH
22775: LD_EXP 29
22779: EQUAL
22780: IFFALSE 22789
// YouLost ( Heike ) ;
22782: LD_STRING Heike
22784: PPUSH
22785: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
22789: LD_VAR 0 1
22793: PUSH
22794: LD_INT 22
22796: PUSH
22797: LD_INT 2
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 23
22806: PUSH
22807: LD_INT 2
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PPUSH
22818: CALL_OW 69
22822: IN
22823: IFFALSE 22839
// heikeLoseCounter := heikeLoseCounter + 1 ;
22825: LD_ADDR_EXP 26
22829: PUSH
22830: LD_EXP 26
22834: PUSH
22835: LD_INT 1
22837: PLUS
22838: ST_TO_ADDR
// if un = arDepot then
22839: LD_VAR 0 1
22843: PUSH
22844: LD_EXP 43
22848: EQUAL
22849: IFFALSE 22858
// YouLost ( Base ) ;
22851: LD_STRING Base
22853: PPUSH
22854: CALL_OW 104
// if un = Rolf then
22858: LD_VAR 0 1
22862: PUSH
22863: LD_EXP 42
22867: EQUAL
22868: IFFALSE 22878
// rolfDied := true ;
22870: LD_ADDR_EXP 13
22874: PUSH
22875: LD_INT 1
22877: ST_TO_ADDR
// if un in rolfSquad then
22878: LD_VAR 0 1
22882: PUSH
22883: LD_EXP 46
22887: IN
22888: IFFALSE 22906
// rolfSquad := rolfSquad diff un ;
22890: LD_ADDR_EXP 46
22894: PUSH
22895: LD_EXP 46
22899: PUSH
22900: LD_VAR 0 1
22904: DIFF
22905: ST_TO_ADDR
// if un in omarSquad then
22906: LD_VAR 0 1
22910: PUSH
22911: LD_EXP 47
22915: IN
22916: IFFALSE 22934
// omarSquad := omarSquad diff un ;
22918: LD_ADDR_EXP 47
22922: PUSH
22923: LD_EXP 47
22927: PUSH
22928: LD_VAR 0 1
22932: DIFF
22933: ST_TO_ADDR
// if GetSide ( un ) = 3 then
22934: LD_VAR 0 1
22938: PPUSH
22939: CALL_OW 255
22943: PUSH
22944: LD_INT 3
22946: EQUAL
22947: IFFALSE 22963
// ruLoseCounter := ruLoseCounter + 1 ;
22949: LD_ADDR_EXP 5
22953: PUSH
22954: LD_EXP 5
22958: PUSH
22959: LD_INT 1
22961: PLUS
22962: ST_TO_ADDR
// if un in ruAttackers then
22963: LD_VAR 0 1
22967: PUSH
22968: LD_EXP 56
22972: IN
22973: IFFALSE 22991
// ruAttackers := ruAttackers diff un ;
22975: LD_ADDR_EXP 56
22979: PUSH
22980: LD_EXP 56
22984: PUSH
22985: LD_VAR 0 1
22989: DIFF
22990: ST_TO_ADDR
// end ;
22991: PPOPN 1
22993: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
22994: LD_INT 0
22996: PPUSH
22997: PPUSH
22998: PPUSH
22999: PPUSH
// begin if GetSide ( un ) = 3 and not un in ruAttackers then
23000: LD_VAR 0 1
23004: PPUSH
23005: CALL_OW 255
23009: PUSH
23010: LD_INT 3
23012: EQUAL
23013: PUSH
23014: LD_VAR 0 1
23018: PUSH
23019: LD_EXP 56
23023: IN
23024: NOT
23025: AND
23026: IFFALSE 23522
// begin if not IsInArea ( un , ruMainBase ) then
23028: LD_VAR 0 1
23032: PPUSH
23033: LD_INT 10
23035: PPUSH
23036: CALL_OW 308
23040: NOT
23041: IFFALSE 23055
// ComMoveToArea ( un , ruMainBase ) ;
23043: LD_VAR 0 1
23047: PPUSH
23048: LD_INT 10
23050: PPUSH
23051: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
23055: LD_INT 35
23057: PPUSH
23058: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
23062: LD_VAR 0 1
23066: PPUSH
23067: CALL_OW 302
23071: NOT
23072: PUSH
23073: LD_VAR 0 1
23077: PPUSH
23078: LD_INT 10
23080: PPUSH
23081: CALL_OW 308
23085: OR
23086: IFFALSE 23055
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
23088: LD_ADDR_EXP 54
23092: PUSH
23093: LD_EXP 54
23097: PPUSH
23098: LD_EXP 54
23102: PUSH
23103: LD_INT 1
23105: PLUS
23106: PPUSH
23107: LD_VAR 0 1
23111: PPUSH
23112: CALL_OW 1
23116: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
23117: LD_ADDR_VAR 0 8
23121: PUSH
23122: LD_INT 72
23124: PUSH
23125: LD_INT 12
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: ST_TO_ADDR
// if tmp then
23132: LD_VAR 0 8
23136: IFFALSE 23251
// for i in tmp do
23138: LD_ADDR_VAR 0 5
23142: PUSH
23143: LD_VAR 0 8
23147: PUSH
23148: FOR_IN
23149: IFFALSE 23249
// if UnitsInside ( i ) < 6 then
23151: LD_VAR 0 5
23155: PPUSH
23156: CALL_OW 313
23160: PUSH
23161: LD_INT 6
23163: LESS
23164: IFFALSE 23247
// begin AddComEnterUnit ( un , i ) ;
23166: LD_VAR 0 1
23170: PPUSH
23171: LD_VAR 0 5
23175: PPUSH
23176: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
23180: LD_VAR 0 8
23184: PPUSH
23185: LD_INT 22
23187: PUSH
23188: LD_INT 23
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 1
23197: PPUSH
23198: LD_INT 2
23200: PPUSH
23201: CALL_OW 12
23205: ARRAY
23206: PPUSH
23207: LD_INT 1
23209: PPUSH
23210: LD_INT 1
23212: PPUSH
23213: LD_INT 44
23215: PUSH
23216: LD_INT 46
23218: PUSH
23219: LD_INT 47
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 1
23229: PPUSH
23230: LD_INT 3
23232: PPUSH
23233: CALL_OW 12
23237: ARRAY
23238: PPUSH
23239: CALL_OW 185
// exit ;
23243: POP
23244: POP
23245: GO 23522
// end ;
23247: GO 23148
23249: POP
23250: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23251: LD_ADDR_VAR 0 8
23255: PUSH
23256: LD_INT 10
23258: PPUSH
23259: LD_INT 22
23261: PUSH
23262: LD_INT 3
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 50
23271: PUSH
23272: EMPTY
23273: LIST
23274: PUSH
23275: LD_INT 2
23277: PUSH
23278: LD_INT 30
23280: PUSH
23281: LD_INT 4
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 30
23290: PUSH
23291: LD_INT 5
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 30
23300: PUSH
23301: LD_INT 32
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: LD_INT 30
23310: PUSH
23311: LD_INT 31
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: LIST
23329: PPUSH
23330: CALL_OW 70
23334: ST_TO_ADDR
// if not tmp then
23335: LD_VAR 0 8
23339: NOT
23340: IFFALSE 23359
// begin ComMoveXY ( un , 83 , 133 ) ;
23342: LD_VAR 0 1
23346: PPUSH
23347: LD_INT 83
23349: PPUSH
23350: LD_INT 133
23352: PPUSH
23353: CALL_OW 111
// exit ;
23357: GO 23522
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
23359: LD_ADDR_VAR 0 6
23363: PUSH
23364: LD_VAR 0 1
23368: PPUSH
23369: LD_VAR 0 8
23373: PPUSH
23374: LD_INT 1
23376: PPUSH
23377: LD_INT 1
23379: PPUSH
23380: CALL 30040 0 4
23384: PUSH
23385: FOR_IN
23386: IFFALSE 23520
// begin case GetBType ( b ) of b_armoury , b_barracks :
23388: LD_VAR 0 6
23392: PPUSH
23393: CALL_OW 266
23397: PUSH
23398: LD_INT 4
23400: DOUBLE
23401: EQUAL
23402: IFTRUE 23412
23404: LD_INT 5
23406: DOUBLE
23407: EQUAL
23408: IFTRUE 23412
23410: GO 23423
23412: POP
// p := 6 ; b_breastwork , b_bunker :
23413: LD_ADDR_VAR 0 7
23417: PUSH
23418: LD_INT 6
23420: ST_TO_ADDR
23421: GO 23449
23423: LD_INT 31
23425: DOUBLE
23426: EQUAL
23427: IFTRUE 23437
23429: LD_INT 32
23431: DOUBLE
23432: EQUAL
23433: IFTRUE 23437
23435: GO 23448
23437: POP
// p := 1 ; end ;
23438: LD_ADDR_VAR 0 7
23442: PUSH
23443: LD_INT 1
23445: ST_TO_ADDR
23446: GO 23449
23448: POP
// if UnitsInside ( b ) < p then
23449: LD_VAR 0 6
23453: PPUSH
23454: CALL_OW 313
23458: PUSH
23459: LD_VAR 0 7
23463: LESS
23464: IFFALSE 23518
// begin ComEnterUnit ( un , b ) ;
23466: LD_VAR 0 1
23470: PPUSH
23471: LD_VAR 0 6
23475: PPUSH
23476: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
23480: LD_VAR 0 6
23484: PPUSH
23485: CALL_OW 266
23489: PUSH
23490: LD_INT 4
23492: PUSH
23493: LD_INT 5
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: IN
23500: IFFALSE 23514
// AddComChangeProfession ( un , class_soldier ) ;
23502: LD_VAR 0 1
23506: PPUSH
23507: LD_INT 1
23509: PPUSH
23510: CALL_OW 183
// exit ;
23514: POP
23515: POP
23516: GO 23522
// end ; end ;
23518: GO 23385
23520: POP
23521: POP
// end ; end ;
23522: PPOPN 8
23524: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
23525: LD_INT 0
23527: PPUSH
23528: PPUSH
23529: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
23530: LD_VAR 0 2
23534: PPUSH
23535: CALL_OW 255
23539: PUSH
23540: LD_INT 3
23542: EQUAL
23543: PUSH
23544: LD_VAR 0 2
23548: PPUSH
23549: CALL_OW 257
23553: PUSH
23554: LD_INT 1
23556: EQUAL
23557: AND
23558: PUSH
23559: LD_VAR 0 2
23563: PUSH
23564: LD_EXP 54
23568: IN
23569: NOT
23570: AND
23571: IFFALSE 23884
// begin ComMoveToArea ( un , ruMainBase ) ;
23573: LD_VAR 0 2
23577: PPUSH
23578: LD_INT 10
23580: PPUSH
23581: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
23585: LD_INT 35
23587: PPUSH
23588: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
23592: LD_VAR 0 2
23596: PPUSH
23597: CALL_OW 302
23601: NOT
23602: PUSH
23603: LD_VAR 0 2
23607: PPUSH
23608: LD_INT 10
23610: PPUSH
23611: CALL_OW 308
23615: OR
23616: IFFALSE 23585
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
23618: LD_ADDR_EXP 54
23622: PUSH
23623: LD_EXP 54
23627: PPUSH
23628: LD_EXP 54
23632: PUSH
23633: LD_INT 1
23635: PLUS
23636: PPUSH
23637: LD_VAR 0 2
23641: PPUSH
23642: CALL_OW 1
23646: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23647: LD_ADDR_VAR 0 4
23651: PUSH
23652: LD_INT 10
23654: PPUSH
23655: LD_INT 22
23657: PUSH
23658: LD_INT 3
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 50
23667: PUSH
23668: EMPTY
23669: LIST
23670: PUSH
23671: LD_INT 2
23673: PUSH
23674: LD_INT 30
23676: PUSH
23677: LD_INT 4
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 30
23686: PUSH
23687: LD_INT 5
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 30
23696: PUSH
23697: LD_INT 32
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 30
23706: PUSH
23707: LD_INT 31
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: LIST
23725: PPUSH
23726: CALL_OW 70
23730: ST_TO_ADDR
// if not tmp then
23731: LD_VAR 0 4
23735: NOT
23736: IFFALSE 23755
// begin ComMoveXY ( un , 83 , 133 ) ;
23738: LD_VAR 0 2
23742: PPUSH
23743: LD_INT 83
23745: PPUSH
23746: LD_INT 133
23748: PPUSH
23749: CALL_OW 111
// exit ;
23753: GO 24133
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
23755: LD_ADDR_VAR 0 5
23759: PUSH
23760: LD_VAR 0 2
23764: PPUSH
23765: LD_VAR 0 4
23769: PPUSH
23770: LD_INT 1
23772: PPUSH
23773: LD_INT 1
23775: PPUSH
23776: CALL 30040 0 4
23780: PUSH
23781: FOR_IN
23782: IFFALSE 23882
// begin case GetBType ( b ) of b_armoury , b_barracks :
23784: LD_VAR 0 5
23788: PPUSH
23789: CALL_OW 266
23793: PUSH
23794: LD_INT 4
23796: DOUBLE
23797: EQUAL
23798: IFTRUE 23808
23800: LD_INT 5
23802: DOUBLE
23803: EQUAL
23804: IFTRUE 23808
23806: GO 23819
23808: POP
// p := 6 ; b_breastwork , b_bunker :
23809: LD_ADDR_VAR 0 3
23813: PUSH
23814: LD_INT 6
23816: ST_TO_ADDR
23817: GO 23845
23819: LD_INT 31
23821: DOUBLE
23822: EQUAL
23823: IFTRUE 23833
23825: LD_INT 32
23827: DOUBLE
23828: EQUAL
23829: IFTRUE 23833
23831: GO 23844
23833: POP
// p := 1 ; end ;
23834: LD_ADDR_VAR 0 3
23838: PUSH
23839: LD_INT 1
23841: ST_TO_ADDR
23842: GO 23845
23844: POP
// if UnitsInside ( b ) < p then
23845: LD_VAR 0 5
23849: PPUSH
23850: CALL_OW 313
23854: PUSH
23855: LD_VAR 0 3
23859: LESS
23860: IFFALSE 23880
// begin ComEnterUnit ( un , b ) ;
23862: LD_VAR 0 2
23866: PPUSH
23867: LD_VAR 0 5
23871: PPUSH
23872: CALL_OW 120
// exit ;
23876: POP
23877: POP
23878: GO 24133
// end ; end ;
23880: GO 23781
23882: POP
23883: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
23884: LD_VAR 0 2
23888: PUSH
23889: LD_EXP 54
23893: IN
23894: PUSH
23895: LD_VAR 0 2
23899: PPUSH
23900: CALL_OW 257
23904: PUSH
23905: LD_INT 1
23907: EQUAL
23908: AND
23909: IFFALSE 24133
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23911: LD_ADDR_VAR 0 4
23915: PUSH
23916: LD_INT 10
23918: PPUSH
23919: LD_INT 22
23921: PUSH
23922: LD_INT 3
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 50
23931: PUSH
23932: EMPTY
23933: LIST
23934: PUSH
23935: LD_INT 2
23937: PUSH
23938: LD_INT 30
23940: PUSH
23941: LD_INT 4
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 30
23950: PUSH
23951: LD_INT 5
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 30
23960: PUSH
23961: LD_INT 32
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 30
23970: PUSH
23971: LD_INT 31
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: LIST
23989: PPUSH
23990: CALL_OW 70
23994: ST_TO_ADDR
// if not tmp then
23995: LD_VAR 0 4
23999: NOT
24000: IFFALSE 24004
// exit ;
24002: GO 24133
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
24004: LD_ADDR_VAR 0 5
24008: PUSH
24009: LD_VAR 0 2
24013: PPUSH
24014: LD_VAR 0 4
24018: PPUSH
24019: LD_INT 1
24021: PPUSH
24022: LD_INT 1
24024: PPUSH
24025: CALL 30040 0 4
24029: PUSH
24030: FOR_IN
24031: IFFALSE 24131
// begin case GetBType ( b ) of b_armoury , b_barracks :
24033: LD_VAR 0 5
24037: PPUSH
24038: CALL_OW 266
24042: PUSH
24043: LD_INT 4
24045: DOUBLE
24046: EQUAL
24047: IFTRUE 24057
24049: LD_INT 5
24051: DOUBLE
24052: EQUAL
24053: IFTRUE 24057
24055: GO 24068
24057: POP
// p := 6 ; b_breastwork , b_bunker :
24058: LD_ADDR_VAR 0 3
24062: PUSH
24063: LD_INT 6
24065: ST_TO_ADDR
24066: GO 24094
24068: LD_INT 31
24070: DOUBLE
24071: EQUAL
24072: IFTRUE 24082
24074: LD_INT 32
24076: DOUBLE
24077: EQUAL
24078: IFTRUE 24082
24080: GO 24093
24082: POP
// p := 1 ; end ;
24083: LD_ADDR_VAR 0 3
24087: PUSH
24088: LD_INT 1
24090: ST_TO_ADDR
24091: GO 24094
24093: POP
// if UnitsInside ( b ) < p then
24094: LD_VAR 0 5
24098: PPUSH
24099: CALL_OW 313
24103: PUSH
24104: LD_VAR 0 3
24108: LESS
24109: IFFALSE 24129
// begin ComEnterUnit ( un , b ) ;
24111: LD_VAR 0 2
24115: PPUSH
24116: LD_VAR 0 5
24120: PPUSH
24121: CALL_OW 120
// exit ;
24125: POP
24126: POP
24127: GO 24133
// end ; end ;
24129: GO 24030
24131: POP
24132: POP
// end ; end ;
24133: PPOPN 5
24135: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
24136: LD_VAR 0 1
24140: PUSH
24141: LD_INT 2
24143: EQUAL
24144: PUSH
24145: LD_VAR 0 2
24149: PUSH
24150: LD_INT 5
24152: PUSH
24153: LD_INT 8
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: IN
24160: AND
24161: IFFALSE 24170
// YouLost ( FriendlyFire ) ;
24163: LD_STRING FriendlyFire
24165: PPUSH
24166: CALL_OW 104
// end ;
24170: PPOPN 2
24172: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
24173: LD_VAR 0 1
24177: PPUSH
24178: CALL_OW 255
24182: PUSH
24183: LD_INT 8
24185: EQUAL
24186: PUSH
24187: LD_VAR 0 1
24191: PPUSH
24192: CALL_OW 266
24196: PUSH
24197: LD_INT 5
24199: EQUAL
24200: AND
24201: IFFALSE 24215
// SetClass ( unit , class_mortar ) ;
24203: LD_VAR 0 2
24207: PPUSH
24208: LD_INT 8
24210: PPUSH
24211: CALL_OW 336
// end ; end_of_file
24215: PPOPN 2
24217: END
// every 0 0$30 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 ] [ Difficulty ] do
24218: LD_INT 6
24220: PPUSH
24221: LD_INT 1
24223: PPUSH
24224: CALL_OW 287
24228: PUSH
24229: LD_INT 300
24231: PUSH
24232: LD_INT 250
24234: PUSH
24235: LD_INT 200
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: LIST
24242: PUSH
24243: LD_OWVAR 67
24247: ARRAY
24248: LESS
24249: IFFALSE 24276
24251: GO 24253
24253: DISABLE
// begin enable ;
24254: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
24255: LD_INT 1
24257: PPUSH
24258: LD_INT 5
24260: PPUSH
24261: CALL_OW 12
24265: PPUSH
24266: LD_INT 6
24268: PPUSH
24269: LD_INT 1
24271: PPUSH
24272: CALL_OW 55
// end ; end_of_file
24276: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
24277: LD_EXP 18
24281: PUSH
24282: LD_EXP 20
24286: AND
24287: PUSH
24288: LD_EXP 17
24292: PUSH
24293: LD_EXP 19
24297: AND
24298: OR
24299: IFFALSE 24618
24301: GO 24303
24303: DISABLE
// begin enable ;
24304: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
24305: LD_EXP 18
24309: PUSH
24310: LD_EXP 20
24314: AND
24315: PUSH
24316: LD_EXP 17
24320: PUSH
24321: LD_EXP 19
24325: AND
24326: AND
24327: IFFALSE 24464
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
24329: LD_ADDR_OWVAR 47
24333: PUSH
24334: LD_STRING #X106-1a
24336: PUSH
24337: LD_EXP 21
24341: PUSH
24342: LD_INT 16
24344: PPUSH
24345: LD_INT 22
24347: PUSH
24348: LD_INT 2
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 21
24357: PUSH
24358: LD_INT 2
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 33
24367: PUSH
24368: LD_INT 1
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 58
24377: PUSH
24378: EMPTY
24379: LIST
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: PPUSH
24387: CALL_OW 70
24391: MINUS
24392: PPUSH
24393: CALL 63333 0 1
24397: PUSH
24398: LD_STRING #X106-3a
24400: PUSH
24401: LD_EXP 20
24405: PUSH
24406: LD_STRING #X106-1
24408: PUSH
24409: LD_EXP 46
24413: PUSH
24414: LD_INT 0
24416: PLUS
24417: PUSH
24418: LD_EXP 46
24422: PPUSH
24423: LD_INT 55
24425: PUSH
24426: EMPTY
24427: LIST
24428: PPUSH
24429: CALL_OW 72
24433: PUSH
24434: LD_INT 0
24436: PLUS
24437: MINUS
24438: PPUSH
24439: CALL 63333 0 1
24443: PUSH
24444: LD_STRING #X106-3
24446: PUSH
24447: LD_EXP 19
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: ST_TO_ADDR
// end else
24462: GO 24618
// if omarWantVehicles and omarWaitingForVehiclesTimer then
24464: LD_EXP 18
24468: PUSH
24469: LD_EXP 20
24473: AND
24474: IFFALSE 24561
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
24476: LD_ADDR_OWVAR 47
24480: PUSH
24481: LD_STRING #X106-1a
24483: PUSH
24484: LD_EXP 21
24488: PUSH
24489: LD_INT 16
24491: PPUSH
24492: LD_INT 22
24494: PUSH
24495: LD_INT 2
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 21
24504: PUSH
24505: LD_INT 2
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 33
24514: PUSH
24515: LD_INT 1
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 58
24524: PUSH
24525: EMPTY
24526: LIST
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: PPUSH
24534: CALL_OW 70
24538: MINUS
24539: PPUSH
24540: CALL 63333 0 1
24544: PUSH
24545: LD_STRING #X106-3a
24547: PUSH
24548: LD_EXP 20
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: ST_TO_ADDR
// end else
24559: GO 24618
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
24561: LD_ADDR_OWVAR 47
24565: PUSH
24566: LD_STRING #X106-1
24568: PUSH
24569: LD_EXP 46
24573: PUSH
24574: LD_INT 0
24576: PLUS
24577: PUSH
24578: LD_EXP 46
24582: PPUSH
24583: LD_INT 55
24585: PUSH
24586: EMPTY
24587: LIST
24588: PPUSH
24589: CALL_OW 72
24593: PUSH
24594: LD_INT 0
24596: PLUS
24597: MINUS
24598: PPUSH
24599: CALL 63333 0 1
24603: PUSH
24604: LD_STRING #X106-3
24606: PUSH
24607: LD_EXP 19
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: ST_TO_ADDR
// end ; end ; end_of_file
24618: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24619: LD_INT 0
24621: PPUSH
24622: PPUSH
// if exist_mode then
24623: LD_VAR 0 2
24627: IFFALSE 24652
// unit := CreateCharacter ( prefix & ident ) else
24629: LD_ADDR_VAR 0 5
24633: PUSH
24634: LD_VAR 0 3
24638: PUSH
24639: LD_VAR 0 1
24643: STR
24644: PPUSH
24645: CALL_OW 34
24649: ST_TO_ADDR
24650: GO 24667
// unit := NewCharacter ( ident ) ;
24652: LD_ADDR_VAR 0 5
24656: PUSH
24657: LD_VAR 0 1
24661: PPUSH
24662: CALL_OW 25
24666: ST_TO_ADDR
// result := unit ;
24667: LD_ADDR_VAR 0 4
24671: PUSH
24672: LD_VAR 0 5
24676: ST_TO_ADDR
// end ;
24677: LD_VAR 0 4
24681: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24682: LD_INT 0
24684: PPUSH
24685: PPUSH
// if not side or not nation then
24686: LD_VAR 0 1
24690: NOT
24691: PUSH
24692: LD_VAR 0 2
24696: NOT
24697: OR
24698: IFFALSE 24702
// exit ;
24700: GO 25470
// case nation of nation_american :
24702: LD_VAR 0 2
24706: PUSH
24707: LD_INT 1
24709: DOUBLE
24710: EQUAL
24711: IFTRUE 24715
24713: GO 24929
24715: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24716: LD_ADDR_VAR 0 4
24720: PUSH
24721: LD_INT 35
24723: PUSH
24724: LD_INT 45
24726: PUSH
24727: LD_INT 46
24729: PUSH
24730: LD_INT 47
24732: PUSH
24733: LD_INT 82
24735: PUSH
24736: LD_INT 83
24738: PUSH
24739: LD_INT 84
24741: PUSH
24742: LD_INT 85
24744: PUSH
24745: LD_INT 86
24747: PUSH
24748: LD_INT 1
24750: PUSH
24751: LD_INT 2
24753: PUSH
24754: LD_INT 6
24756: PUSH
24757: LD_INT 15
24759: PUSH
24760: LD_INT 16
24762: PUSH
24763: LD_INT 7
24765: PUSH
24766: LD_INT 12
24768: PUSH
24769: LD_INT 13
24771: PUSH
24772: LD_INT 10
24774: PUSH
24775: LD_INT 14
24777: PUSH
24778: LD_INT 20
24780: PUSH
24781: LD_INT 21
24783: PUSH
24784: LD_INT 22
24786: PUSH
24787: LD_INT 25
24789: PUSH
24790: LD_INT 32
24792: PUSH
24793: LD_INT 27
24795: PUSH
24796: LD_INT 36
24798: PUSH
24799: LD_INT 69
24801: PUSH
24802: LD_INT 39
24804: PUSH
24805: LD_INT 34
24807: PUSH
24808: LD_INT 40
24810: PUSH
24811: LD_INT 48
24813: PUSH
24814: LD_INT 49
24816: PUSH
24817: LD_INT 50
24819: PUSH
24820: LD_INT 51
24822: PUSH
24823: LD_INT 52
24825: PUSH
24826: LD_INT 53
24828: PUSH
24829: LD_INT 54
24831: PUSH
24832: LD_INT 55
24834: PUSH
24835: LD_INT 56
24837: PUSH
24838: LD_INT 57
24840: PUSH
24841: LD_INT 58
24843: PUSH
24844: LD_INT 59
24846: PUSH
24847: LD_INT 60
24849: PUSH
24850: LD_INT 61
24852: PUSH
24853: LD_INT 62
24855: PUSH
24856: LD_INT 80
24858: PUSH
24859: LD_INT 82
24861: PUSH
24862: LD_INT 83
24864: PUSH
24865: LD_INT 84
24867: PUSH
24868: LD_INT 85
24870: PUSH
24871: LD_INT 86
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: ST_TO_ADDR
24927: GO 25394
24929: LD_INT 2
24931: DOUBLE
24932: EQUAL
24933: IFTRUE 24937
24935: GO 25163
24937: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24938: LD_ADDR_VAR 0 4
24942: PUSH
24943: LD_INT 35
24945: PUSH
24946: LD_INT 45
24948: PUSH
24949: LD_INT 46
24951: PUSH
24952: LD_INT 47
24954: PUSH
24955: LD_INT 82
24957: PUSH
24958: LD_INT 83
24960: PUSH
24961: LD_INT 84
24963: PUSH
24964: LD_INT 85
24966: PUSH
24967: LD_INT 87
24969: PUSH
24970: LD_INT 70
24972: PUSH
24973: LD_INT 1
24975: PUSH
24976: LD_INT 11
24978: PUSH
24979: LD_INT 3
24981: PUSH
24982: LD_INT 4
24984: PUSH
24985: LD_INT 5
24987: PUSH
24988: LD_INT 6
24990: PUSH
24991: LD_INT 15
24993: PUSH
24994: LD_INT 18
24996: PUSH
24997: LD_INT 7
24999: PUSH
25000: LD_INT 17
25002: PUSH
25003: LD_INT 8
25005: PUSH
25006: LD_INT 20
25008: PUSH
25009: LD_INT 21
25011: PUSH
25012: LD_INT 22
25014: PUSH
25015: LD_INT 72
25017: PUSH
25018: LD_INT 26
25020: PUSH
25021: LD_INT 69
25023: PUSH
25024: LD_INT 39
25026: PUSH
25027: LD_INT 40
25029: PUSH
25030: LD_INT 41
25032: PUSH
25033: LD_INT 42
25035: PUSH
25036: LD_INT 43
25038: PUSH
25039: LD_INT 48
25041: PUSH
25042: LD_INT 49
25044: PUSH
25045: LD_INT 50
25047: PUSH
25048: LD_INT 51
25050: PUSH
25051: LD_INT 52
25053: PUSH
25054: LD_INT 53
25056: PUSH
25057: LD_INT 54
25059: PUSH
25060: LD_INT 55
25062: PUSH
25063: LD_INT 56
25065: PUSH
25066: LD_INT 60
25068: PUSH
25069: LD_INT 61
25071: PUSH
25072: LD_INT 62
25074: PUSH
25075: LD_INT 66
25077: PUSH
25078: LD_INT 67
25080: PUSH
25081: LD_INT 68
25083: PUSH
25084: LD_INT 81
25086: PUSH
25087: LD_INT 82
25089: PUSH
25090: LD_INT 83
25092: PUSH
25093: LD_INT 84
25095: PUSH
25096: LD_INT 85
25098: PUSH
25099: LD_INT 87
25101: PUSH
25102: LD_INT 88
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: ST_TO_ADDR
25161: GO 25394
25163: LD_INT 3
25165: DOUBLE
25166: EQUAL
25167: IFTRUE 25171
25169: GO 25393
25171: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25172: LD_ADDR_VAR 0 4
25176: PUSH
25177: LD_INT 46
25179: PUSH
25180: LD_INT 47
25182: PUSH
25183: LD_INT 1
25185: PUSH
25186: LD_INT 2
25188: PUSH
25189: LD_INT 82
25191: PUSH
25192: LD_INT 83
25194: PUSH
25195: LD_INT 84
25197: PUSH
25198: LD_INT 85
25200: PUSH
25201: LD_INT 86
25203: PUSH
25204: LD_INT 11
25206: PUSH
25207: LD_INT 9
25209: PUSH
25210: LD_INT 20
25212: PUSH
25213: LD_INT 19
25215: PUSH
25216: LD_INT 21
25218: PUSH
25219: LD_INT 24
25221: PUSH
25222: LD_INT 22
25224: PUSH
25225: LD_INT 25
25227: PUSH
25228: LD_INT 28
25230: PUSH
25231: LD_INT 29
25233: PUSH
25234: LD_INT 30
25236: PUSH
25237: LD_INT 31
25239: PUSH
25240: LD_INT 37
25242: PUSH
25243: LD_INT 38
25245: PUSH
25246: LD_INT 32
25248: PUSH
25249: LD_INT 27
25251: PUSH
25252: LD_INT 33
25254: PUSH
25255: LD_INT 69
25257: PUSH
25258: LD_INT 39
25260: PUSH
25261: LD_INT 34
25263: PUSH
25264: LD_INT 40
25266: PUSH
25267: LD_INT 71
25269: PUSH
25270: LD_INT 23
25272: PUSH
25273: LD_INT 44
25275: PUSH
25276: LD_INT 48
25278: PUSH
25279: LD_INT 49
25281: PUSH
25282: LD_INT 50
25284: PUSH
25285: LD_INT 51
25287: PUSH
25288: LD_INT 52
25290: PUSH
25291: LD_INT 53
25293: PUSH
25294: LD_INT 54
25296: PUSH
25297: LD_INT 55
25299: PUSH
25300: LD_INT 56
25302: PUSH
25303: LD_INT 57
25305: PUSH
25306: LD_INT 58
25308: PUSH
25309: LD_INT 59
25311: PUSH
25312: LD_INT 63
25314: PUSH
25315: LD_INT 64
25317: PUSH
25318: LD_INT 65
25320: PUSH
25321: LD_INT 82
25323: PUSH
25324: LD_INT 83
25326: PUSH
25327: LD_INT 84
25329: PUSH
25330: LD_INT 85
25332: PUSH
25333: LD_INT 86
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: ST_TO_ADDR
25391: GO 25394
25393: POP
// if state > - 1 and state < 3 then
25394: LD_VAR 0 3
25398: PUSH
25399: LD_INT 1
25401: NEG
25402: GREATER
25403: PUSH
25404: LD_VAR 0 3
25408: PUSH
25409: LD_INT 3
25411: LESS
25412: AND
25413: IFFALSE 25470
// for i in result do
25415: LD_ADDR_VAR 0 5
25419: PUSH
25420: LD_VAR 0 4
25424: PUSH
25425: FOR_IN
25426: IFFALSE 25468
// if GetTech ( i , side ) <> state then
25428: LD_VAR 0 5
25432: PPUSH
25433: LD_VAR 0 1
25437: PPUSH
25438: CALL_OW 321
25442: PUSH
25443: LD_VAR 0 3
25447: NONEQUAL
25448: IFFALSE 25466
// result := result diff i ;
25450: LD_ADDR_VAR 0 4
25454: PUSH
25455: LD_VAR 0 4
25459: PUSH
25460: LD_VAR 0 5
25464: DIFF
25465: ST_TO_ADDR
25466: GO 25425
25468: POP
25469: POP
// end ;
25470: LD_VAR 0 4
25474: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25475: LD_INT 0
25477: PPUSH
25478: PPUSH
25479: PPUSH
// result := true ;
25480: LD_ADDR_VAR 0 3
25484: PUSH
25485: LD_INT 1
25487: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25488: LD_ADDR_VAR 0 5
25492: PUSH
25493: LD_VAR 0 2
25497: PPUSH
25498: CALL_OW 480
25502: ST_TO_ADDR
// if not tmp then
25503: LD_VAR 0 5
25507: NOT
25508: IFFALSE 25512
// exit ;
25510: GO 25561
// for i in tmp do
25512: LD_ADDR_VAR 0 4
25516: PUSH
25517: LD_VAR 0 5
25521: PUSH
25522: FOR_IN
25523: IFFALSE 25559
// if GetTech ( i , side ) <> state_researched then
25525: LD_VAR 0 4
25529: PPUSH
25530: LD_VAR 0 1
25534: PPUSH
25535: CALL_OW 321
25539: PUSH
25540: LD_INT 2
25542: NONEQUAL
25543: IFFALSE 25557
// begin result := false ;
25545: LD_ADDR_VAR 0 3
25549: PUSH
25550: LD_INT 0
25552: ST_TO_ADDR
// exit ;
25553: POP
25554: POP
25555: GO 25561
// end ;
25557: GO 25522
25559: POP
25560: POP
// end ;
25561: LD_VAR 0 3
25565: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25566: LD_INT 0
25568: PPUSH
25569: PPUSH
25570: PPUSH
25571: PPUSH
25572: PPUSH
25573: PPUSH
25574: PPUSH
25575: PPUSH
25576: PPUSH
25577: PPUSH
25578: PPUSH
25579: PPUSH
25580: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25581: LD_VAR 0 1
25585: NOT
25586: PUSH
25587: LD_VAR 0 1
25591: PPUSH
25592: CALL_OW 257
25596: PUSH
25597: LD_INT 9
25599: NONEQUAL
25600: OR
25601: IFFALSE 25605
// exit ;
25603: GO 26178
// side := GetSide ( unit ) ;
25605: LD_ADDR_VAR 0 9
25609: PUSH
25610: LD_VAR 0 1
25614: PPUSH
25615: CALL_OW 255
25619: ST_TO_ADDR
// tech_space := tech_spacanom ;
25620: LD_ADDR_VAR 0 12
25624: PUSH
25625: LD_INT 29
25627: ST_TO_ADDR
// tech_time := tech_taurad ;
25628: LD_ADDR_VAR 0 13
25632: PUSH
25633: LD_INT 28
25635: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25636: LD_ADDR_VAR 0 11
25640: PUSH
25641: LD_VAR 0 1
25645: PPUSH
25646: CALL_OW 310
25650: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25651: LD_VAR 0 11
25655: PPUSH
25656: CALL_OW 247
25660: PUSH
25661: LD_INT 2
25663: EQUAL
25664: IFFALSE 25668
// exit ;
25666: GO 26178
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25668: LD_ADDR_VAR 0 8
25672: PUSH
25673: LD_INT 81
25675: PUSH
25676: LD_VAR 0 9
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 3
25687: PUSH
25688: LD_INT 21
25690: PUSH
25691: LD_INT 3
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PPUSH
25706: CALL_OW 69
25710: ST_TO_ADDR
// if not tmp then
25711: LD_VAR 0 8
25715: NOT
25716: IFFALSE 25720
// exit ;
25718: GO 26178
// if in_unit then
25720: LD_VAR 0 11
25724: IFFALSE 25748
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25726: LD_ADDR_VAR 0 10
25730: PUSH
25731: LD_VAR 0 8
25735: PPUSH
25736: LD_VAR 0 11
25740: PPUSH
25741: CALL_OW 74
25745: ST_TO_ADDR
25746: GO 25768
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25748: LD_ADDR_VAR 0 10
25752: PUSH
25753: LD_VAR 0 8
25757: PPUSH
25758: LD_VAR 0 1
25762: PPUSH
25763: CALL_OW 74
25767: ST_TO_ADDR
// if not enemy then
25768: LD_VAR 0 10
25772: NOT
25773: IFFALSE 25777
// exit ;
25775: GO 26178
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25777: LD_VAR 0 11
25781: PUSH
25782: LD_VAR 0 11
25786: PPUSH
25787: LD_VAR 0 10
25791: PPUSH
25792: CALL_OW 296
25796: PUSH
25797: LD_INT 13
25799: GREATER
25800: AND
25801: PUSH
25802: LD_VAR 0 1
25806: PPUSH
25807: LD_VAR 0 10
25811: PPUSH
25812: CALL_OW 296
25816: PUSH
25817: LD_INT 12
25819: GREATER
25820: OR
25821: IFFALSE 25825
// exit ;
25823: GO 26178
// missile := [ 1 ] ;
25825: LD_ADDR_VAR 0 14
25829: PUSH
25830: LD_INT 1
25832: PUSH
25833: EMPTY
25834: LIST
25835: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25836: LD_VAR 0 9
25840: PPUSH
25841: LD_VAR 0 12
25845: PPUSH
25846: CALL_OW 325
25850: IFFALSE 25879
// missile := Insert ( missile , missile + 1 , 2 ) ;
25852: LD_ADDR_VAR 0 14
25856: PUSH
25857: LD_VAR 0 14
25861: PPUSH
25862: LD_VAR 0 14
25866: PUSH
25867: LD_INT 1
25869: PLUS
25870: PPUSH
25871: LD_INT 2
25873: PPUSH
25874: CALL_OW 2
25878: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25879: LD_VAR 0 9
25883: PPUSH
25884: LD_VAR 0 13
25888: PPUSH
25889: CALL_OW 325
25893: PUSH
25894: LD_VAR 0 10
25898: PPUSH
25899: CALL_OW 255
25903: PPUSH
25904: LD_VAR 0 13
25908: PPUSH
25909: CALL_OW 325
25913: NOT
25914: AND
25915: IFFALSE 25944
// missile := Insert ( missile , missile + 1 , 3 ) ;
25917: LD_ADDR_VAR 0 14
25921: PUSH
25922: LD_VAR 0 14
25926: PPUSH
25927: LD_VAR 0 14
25931: PUSH
25932: LD_INT 1
25934: PLUS
25935: PPUSH
25936: LD_INT 3
25938: PPUSH
25939: CALL_OW 2
25943: ST_TO_ADDR
// if missile < 2 then
25944: LD_VAR 0 14
25948: PUSH
25949: LD_INT 2
25951: LESS
25952: IFFALSE 25956
// exit ;
25954: GO 26178
// x := GetX ( enemy ) ;
25956: LD_ADDR_VAR 0 4
25960: PUSH
25961: LD_VAR 0 10
25965: PPUSH
25966: CALL_OW 250
25970: ST_TO_ADDR
// y := GetY ( enemy ) ;
25971: LD_ADDR_VAR 0 5
25975: PUSH
25976: LD_VAR 0 10
25980: PPUSH
25981: CALL_OW 251
25985: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25986: LD_ADDR_VAR 0 6
25990: PUSH
25991: LD_VAR 0 4
25995: PUSH
25996: LD_INT 1
25998: NEG
25999: PPUSH
26000: LD_INT 1
26002: PPUSH
26003: CALL_OW 12
26007: PLUS
26008: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26009: LD_ADDR_VAR 0 7
26013: PUSH
26014: LD_VAR 0 5
26018: PUSH
26019: LD_INT 1
26021: NEG
26022: PPUSH
26023: LD_INT 1
26025: PPUSH
26026: CALL_OW 12
26030: PLUS
26031: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26032: LD_VAR 0 6
26036: PPUSH
26037: LD_VAR 0 7
26041: PPUSH
26042: CALL_OW 488
26046: NOT
26047: IFFALSE 26069
// begin _x := x ;
26049: LD_ADDR_VAR 0 6
26053: PUSH
26054: LD_VAR 0 4
26058: ST_TO_ADDR
// _y := y ;
26059: LD_ADDR_VAR 0 7
26063: PUSH
26064: LD_VAR 0 5
26068: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26069: LD_ADDR_VAR 0 3
26073: PUSH
26074: LD_INT 1
26076: PPUSH
26077: LD_VAR 0 14
26081: PPUSH
26082: CALL_OW 12
26086: ST_TO_ADDR
// case i of 1 :
26087: LD_VAR 0 3
26091: PUSH
26092: LD_INT 1
26094: DOUBLE
26095: EQUAL
26096: IFTRUE 26100
26098: GO 26117
26100: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26101: LD_VAR 0 1
26105: PPUSH
26106: LD_VAR 0 10
26110: PPUSH
26111: CALL_OW 115
26115: GO 26178
26117: LD_INT 2
26119: DOUBLE
26120: EQUAL
26121: IFTRUE 26125
26123: GO 26147
26125: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26126: LD_VAR 0 1
26130: PPUSH
26131: LD_VAR 0 6
26135: PPUSH
26136: LD_VAR 0 7
26140: PPUSH
26141: CALL_OW 153
26145: GO 26178
26147: LD_INT 3
26149: DOUBLE
26150: EQUAL
26151: IFTRUE 26155
26153: GO 26177
26155: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26156: LD_VAR 0 1
26160: PPUSH
26161: LD_VAR 0 6
26165: PPUSH
26166: LD_VAR 0 7
26170: PPUSH
26171: CALL_OW 154
26175: GO 26178
26177: POP
// end ;
26178: LD_VAR 0 2
26182: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26183: LD_INT 0
26185: PPUSH
26186: PPUSH
26187: PPUSH
26188: PPUSH
26189: PPUSH
26190: PPUSH
// if not unit or not building then
26191: LD_VAR 0 1
26195: NOT
26196: PUSH
26197: LD_VAR 0 2
26201: NOT
26202: OR
26203: IFFALSE 26207
// exit ;
26205: GO 26365
// x := GetX ( building ) ;
26207: LD_ADDR_VAR 0 5
26211: PUSH
26212: LD_VAR 0 2
26216: PPUSH
26217: CALL_OW 250
26221: ST_TO_ADDR
// y := GetY ( building ) ;
26222: LD_ADDR_VAR 0 6
26226: PUSH
26227: LD_VAR 0 2
26231: PPUSH
26232: CALL_OW 251
26236: ST_TO_ADDR
// for i = 0 to 5 do
26237: LD_ADDR_VAR 0 4
26241: PUSH
26242: DOUBLE
26243: LD_INT 0
26245: DEC
26246: ST_TO_ADDR
26247: LD_INT 5
26249: PUSH
26250: FOR_TO
26251: IFFALSE 26363
// begin _x := ShiftX ( x , i , 3 ) ;
26253: LD_ADDR_VAR 0 7
26257: PUSH
26258: LD_VAR 0 5
26262: PPUSH
26263: LD_VAR 0 4
26267: PPUSH
26268: LD_INT 3
26270: PPUSH
26271: CALL_OW 272
26275: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26276: LD_ADDR_VAR 0 8
26280: PUSH
26281: LD_VAR 0 6
26285: PPUSH
26286: LD_VAR 0 4
26290: PPUSH
26291: LD_INT 3
26293: PPUSH
26294: CALL_OW 273
26298: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26299: LD_VAR 0 7
26303: PPUSH
26304: LD_VAR 0 8
26308: PPUSH
26309: CALL_OW 488
26313: NOT
26314: IFFALSE 26318
// continue ;
26316: GO 26250
// if HexInfo ( _x , _y ) = 0 then
26318: LD_VAR 0 7
26322: PPUSH
26323: LD_VAR 0 8
26327: PPUSH
26328: CALL_OW 428
26332: PUSH
26333: LD_INT 0
26335: EQUAL
26336: IFFALSE 26361
// begin ComMoveXY ( unit , _x , _y ) ;
26338: LD_VAR 0 1
26342: PPUSH
26343: LD_VAR 0 7
26347: PPUSH
26348: LD_VAR 0 8
26352: PPUSH
26353: CALL_OW 111
// exit ;
26357: POP
26358: POP
26359: GO 26365
// end ; end ;
26361: GO 26250
26363: POP
26364: POP
// end ;
26365: LD_VAR 0 3
26369: RET
// export function ScanBase ( side , base_area ) ; begin
26370: LD_INT 0
26372: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26373: LD_ADDR_VAR 0 3
26377: PUSH
26378: LD_VAR 0 2
26382: PPUSH
26383: LD_INT 81
26385: PUSH
26386: LD_VAR 0 1
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PPUSH
26395: CALL_OW 70
26399: ST_TO_ADDR
// end ;
26400: LD_VAR 0 3
26404: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26405: LD_INT 0
26407: PPUSH
26408: PPUSH
26409: PPUSH
26410: PPUSH
// result := false ;
26411: LD_ADDR_VAR 0 2
26415: PUSH
26416: LD_INT 0
26418: ST_TO_ADDR
// side := GetSide ( unit ) ;
26419: LD_ADDR_VAR 0 3
26423: PUSH
26424: LD_VAR 0 1
26428: PPUSH
26429: CALL_OW 255
26433: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26434: LD_ADDR_VAR 0 4
26438: PUSH
26439: LD_VAR 0 1
26443: PPUSH
26444: CALL_OW 248
26448: ST_TO_ADDR
// case nat of 1 :
26449: LD_VAR 0 4
26453: PUSH
26454: LD_INT 1
26456: DOUBLE
26457: EQUAL
26458: IFTRUE 26462
26460: GO 26473
26462: POP
// tech := tech_lassight ; 2 :
26463: LD_ADDR_VAR 0 5
26467: PUSH
26468: LD_INT 12
26470: ST_TO_ADDR
26471: GO 26512
26473: LD_INT 2
26475: DOUBLE
26476: EQUAL
26477: IFTRUE 26481
26479: GO 26492
26481: POP
// tech := tech_mortar ; 3 :
26482: LD_ADDR_VAR 0 5
26486: PUSH
26487: LD_INT 41
26489: ST_TO_ADDR
26490: GO 26512
26492: LD_INT 3
26494: DOUBLE
26495: EQUAL
26496: IFTRUE 26500
26498: GO 26511
26500: POP
// tech := tech_bazooka ; end ;
26501: LD_ADDR_VAR 0 5
26505: PUSH
26506: LD_INT 44
26508: ST_TO_ADDR
26509: GO 26512
26511: POP
// if Researched ( side , tech ) then
26512: LD_VAR 0 3
26516: PPUSH
26517: LD_VAR 0 5
26521: PPUSH
26522: CALL_OW 325
26526: IFFALSE 26553
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26528: LD_ADDR_VAR 0 2
26532: PUSH
26533: LD_INT 5
26535: PUSH
26536: LD_INT 8
26538: PUSH
26539: LD_INT 9
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: LIST
26546: PUSH
26547: LD_VAR 0 4
26551: ARRAY
26552: ST_TO_ADDR
// end ;
26553: LD_VAR 0 2
26557: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26558: LD_INT 0
26560: PPUSH
26561: PPUSH
26562: PPUSH
// if not mines then
26563: LD_VAR 0 2
26567: NOT
26568: IFFALSE 26572
// exit ;
26570: GO 26716
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26572: LD_ADDR_VAR 0 5
26576: PUSH
26577: LD_INT 81
26579: PUSH
26580: LD_VAR 0 1
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 3
26591: PUSH
26592: LD_INT 21
26594: PUSH
26595: LD_INT 3
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PPUSH
26610: CALL_OW 69
26614: ST_TO_ADDR
// for i in mines do
26615: LD_ADDR_VAR 0 4
26619: PUSH
26620: LD_VAR 0 2
26624: PUSH
26625: FOR_IN
26626: IFFALSE 26714
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26628: LD_VAR 0 4
26632: PUSH
26633: LD_INT 1
26635: ARRAY
26636: PPUSH
26637: LD_VAR 0 4
26641: PUSH
26642: LD_INT 2
26644: ARRAY
26645: PPUSH
26646: CALL_OW 458
26650: NOT
26651: IFFALSE 26655
// continue ;
26653: GO 26625
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26655: LD_VAR 0 4
26659: PUSH
26660: LD_INT 1
26662: ARRAY
26663: PPUSH
26664: LD_VAR 0 4
26668: PUSH
26669: LD_INT 2
26671: ARRAY
26672: PPUSH
26673: CALL_OW 428
26677: PUSH
26678: LD_VAR 0 5
26682: IN
26683: IFFALSE 26712
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26685: LD_VAR 0 4
26689: PUSH
26690: LD_INT 1
26692: ARRAY
26693: PPUSH
26694: LD_VAR 0 4
26698: PUSH
26699: LD_INT 2
26701: ARRAY
26702: PPUSH
26703: LD_VAR 0 1
26707: PPUSH
26708: CALL_OW 456
// end ;
26712: GO 26625
26714: POP
26715: POP
// end ;
26716: LD_VAR 0 3
26720: RET
// export function Count ( array ) ; var i ; begin
26721: LD_INT 0
26723: PPUSH
26724: PPUSH
// result := 0 ;
26725: LD_ADDR_VAR 0 2
26729: PUSH
26730: LD_INT 0
26732: ST_TO_ADDR
// for i in array do
26733: LD_ADDR_VAR 0 3
26737: PUSH
26738: LD_VAR 0 1
26742: PUSH
26743: FOR_IN
26744: IFFALSE 26768
// if i then
26746: LD_VAR 0 3
26750: IFFALSE 26766
// result := result + 1 ;
26752: LD_ADDR_VAR 0 2
26756: PUSH
26757: LD_VAR 0 2
26761: PUSH
26762: LD_INT 1
26764: PLUS
26765: ST_TO_ADDR
26766: GO 26743
26768: POP
26769: POP
// end ;
26770: LD_VAR 0 2
26774: RET
// export function IsEmpty ( building ) ; begin
26775: LD_INT 0
26777: PPUSH
// if not building then
26778: LD_VAR 0 1
26782: NOT
26783: IFFALSE 26787
// exit ;
26785: GO 26830
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26787: LD_ADDR_VAR 0 2
26791: PUSH
26792: LD_VAR 0 1
26796: PUSH
26797: LD_INT 22
26799: PUSH
26800: LD_VAR 0 1
26804: PPUSH
26805: CALL_OW 255
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 58
26816: PUSH
26817: EMPTY
26818: LIST
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PPUSH
26824: CALL_OW 69
26828: IN
26829: ST_TO_ADDR
// end ;
26830: LD_VAR 0 2
26834: RET
// export function IsNotFull ( building ) ; begin
26835: LD_INT 0
26837: PPUSH
// if not building then
26838: LD_VAR 0 1
26842: NOT
26843: IFFALSE 26847
// exit ;
26845: GO 26866
// result := UnitsInside ( building ) < 6 ;
26847: LD_ADDR_VAR 0 2
26851: PUSH
26852: LD_VAR 0 1
26856: PPUSH
26857: CALL_OW 313
26861: PUSH
26862: LD_INT 6
26864: LESS
26865: ST_TO_ADDR
// end ;
26866: LD_VAR 0 2
26870: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26871: LD_INT 0
26873: PPUSH
26874: PPUSH
26875: PPUSH
26876: PPUSH
// tmp := [ ] ;
26877: LD_ADDR_VAR 0 3
26881: PUSH
26882: EMPTY
26883: ST_TO_ADDR
// list := [ ] ;
26884: LD_ADDR_VAR 0 5
26888: PUSH
26889: EMPTY
26890: ST_TO_ADDR
// for i = 16 to 25 do
26891: LD_ADDR_VAR 0 4
26895: PUSH
26896: DOUBLE
26897: LD_INT 16
26899: DEC
26900: ST_TO_ADDR
26901: LD_INT 25
26903: PUSH
26904: FOR_TO
26905: IFFALSE 26978
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26907: LD_ADDR_VAR 0 3
26911: PUSH
26912: LD_VAR 0 3
26916: PUSH
26917: LD_INT 22
26919: PUSH
26920: LD_VAR 0 1
26924: PPUSH
26925: CALL_OW 255
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 91
26936: PUSH
26937: LD_VAR 0 1
26941: PUSH
26942: LD_INT 6
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 30
26952: PUSH
26953: LD_VAR 0 4
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: LIST
26966: PUSH
26967: EMPTY
26968: LIST
26969: PPUSH
26970: CALL_OW 69
26974: ADD
26975: ST_TO_ADDR
26976: GO 26904
26978: POP
26979: POP
// for i = 1 to tmp do
26980: LD_ADDR_VAR 0 4
26984: PUSH
26985: DOUBLE
26986: LD_INT 1
26988: DEC
26989: ST_TO_ADDR
26990: LD_VAR 0 3
26994: PUSH
26995: FOR_TO
26996: IFFALSE 27084
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26998: LD_ADDR_VAR 0 5
27002: PUSH
27003: LD_VAR 0 5
27007: PUSH
27008: LD_VAR 0 3
27012: PUSH
27013: LD_VAR 0 4
27017: ARRAY
27018: PPUSH
27019: CALL_OW 266
27023: PUSH
27024: LD_VAR 0 3
27028: PUSH
27029: LD_VAR 0 4
27033: ARRAY
27034: PPUSH
27035: CALL_OW 250
27039: PUSH
27040: LD_VAR 0 3
27044: PUSH
27045: LD_VAR 0 4
27049: ARRAY
27050: PPUSH
27051: CALL_OW 251
27055: PUSH
27056: LD_VAR 0 3
27060: PUSH
27061: LD_VAR 0 4
27065: ARRAY
27066: PPUSH
27067: CALL_OW 254
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: PUSH
27078: EMPTY
27079: LIST
27080: ADD
27081: ST_TO_ADDR
27082: GO 26995
27084: POP
27085: POP
// result := list ;
27086: LD_ADDR_VAR 0 2
27090: PUSH
27091: LD_VAR 0 5
27095: ST_TO_ADDR
// end ;
27096: LD_VAR 0 2
27100: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27101: LD_INT 0
27103: PPUSH
27104: PPUSH
27105: PPUSH
27106: PPUSH
27107: PPUSH
27108: PPUSH
27109: PPUSH
// if not factory then
27110: LD_VAR 0 1
27114: NOT
27115: IFFALSE 27119
// exit ;
27117: GO 27712
// if control = control_apeman then
27119: LD_VAR 0 4
27123: PUSH
27124: LD_INT 5
27126: EQUAL
27127: IFFALSE 27236
// begin tmp := UnitsInside ( factory ) ;
27129: LD_ADDR_VAR 0 8
27133: PUSH
27134: LD_VAR 0 1
27138: PPUSH
27139: CALL_OW 313
27143: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27144: LD_VAR 0 8
27148: PPUSH
27149: LD_INT 25
27151: PUSH
27152: LD_INT 12
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PPUSH
27159: CALL_OW 72
27163: NOT
27164: IFFALSE 27174
// control := control_manual ;
27166: LD_ADDR_VAR 0 4
27170: PUSH
27171: LD_INT 1
27173: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27174: LD_ADDR_VAR 0 8
27178: PUSH
27179: LD_VAR 0 1
27183: PPUSH
27184: CALL 26871 0 1
27188: ST_TO_ADDR
// if tmp then
27189: LD_VAR 0 8
27193: IFFALSE 27236
// begin for i in tmp do
27195: LD_ADDR_VAR 0 7
27199: PUSH
27200: LD_VAR 0 8
27204: PUSH
27205: FOR_IN
27206: IFFALSE 27234
// if i [ 1 ] = b_ext_radio then
27208: LD_VAR 0 7
27212: PUSH
27213: LD_INT 1
27215: ARRAY
27216: PUSH
27217: LD_INT 22
27219: EQUAL
27220: IFFALSE 27232
// begin control := control_remote ;
27222: LD_ADDR_VAR 0 4
27226: PUSH
27227: LD_INT 2
27229: ST_TO_ADDR
// break ;
27230: GO 27234
// end ;
27232: GO 27205
27234: POP
27235: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27236: LD_VAR 0 1
27240: PPUSH
27241: LD_VAR 0 2
27245: PPUSH
27246: LD_VAR 0 3
27250: PPUSH
27251: LD_VAR 0 4
27255: PPUSH
27256: LD_VAR 0 5
27260: PPUSH
27261: CALL_OW 448
27265: IFFALSE 27300
// begin result := [ chassis , engine , control , weapon ] ;
27267: LD_ADDR_VAR 0 6
27271: PUSH
27272: LD_VAR 0 2
27276: PUSH
27277: LD_VAR 0 3
27281: PUSH
27282: LD_VAR 0 4
27286: PUSH
27287: LD_VAR 0 5
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: ST_TO_ADDR
// exit ;
27298: GO 27712
// end ; _chassis := AvailableChassisList ( factory ) ;
27300: LD_ADDR_VAR 0 9
27304: PUSH
27305: LD_VAR 0 1
27309: PPUSH
27310: CALL_OW 475
27314: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27315: LD_ADDR_VAR 0 11
27319: PUSH
27320: LD_VAR 0 1
27324: PPUSH
27325: CALL_OW 476
27329: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27330: LD_ADDR_VAR 0 12
27334: PUSH
27335: LD_VAR 0 1
27339: PPUSH
27340: CALL_OW 477
27344: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27345: LD_ADDR_VAR 0 10
27349: PUSH
27350: LD_VAR 0 1
27354: PPUSH
27355: CALL_OW 478
27359: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27360: LD_VAR 0 9
27364: NOT
27365: PUSH
27366: LD_VAR 0 11
27370: NOT
27371: OR
27372: PUSH
27373: LD_VAR 0 12
27377: NOT
27378: OR
27379: PUSH
27380: LD_VAR 0 10
27384: NOT
27385: OR
27386: IFFALSE 27421
// begin result := [ chassis , engine , control , weapon ] ;
27388: LD_ADDR_VAR 0 6
27392: PUSH
27393: LD_VAR 0 2
27397: PUSH
27398: LD_VAR 0 3
27402: PUSH
27403: LD_VAR 0 4
27407: PUSH
27408: LD_VAR 0 5
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: ST_TO_ADDR
// exit ;
27419: GO 27712
// end ; if not chassis in _chassis then
27421: LD_VAR 0 2
27425: PUSH
27426: LD_VAR 0 9
27430: IN
27431: NOT
27432: IFFALSE 27458
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27434: LD_ADDR_VAR 0 2
27438: PUSH
27439: LD_VAR 0 9
27443: PUSH
27444: LD_INT 1
27446: PPUSH
27447: LD_VAR 0 9
27451: PPUSH
27452: CALL_OW 12
27456: ARRAY
27457: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27458: LD_VAR 0 2
27462: PPUSH
27463: LD_VAR 0 3
27467: PPUSH
27468: CALL 27717 0 2
27472: NOT
27473: IFFALSE 27532
// repeat engine := _engine [ 1 ] ;
27475: LD_ADDR_VAR 0 3
27479: PUSH
27480: LD_VAR 0 11
27484: PUSH
27485: LD_INT 1
27487: ARRAY
27488: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27489: LD_ADDR_VAR 0 11
27493: PUSH
27494: LD_VAR 0 11
27498: PPUSH
27499: LD_INT 1
27501: PPUSH
27502: CALL_OW 3
27506: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27507: LD_VAR 0 2
27511: PPUSH
27512: LD_VAR 0 3
27516: PPUSH
27517: CALL 27717 0 2
27521: PUSH
27522: LD_VAR 0 11
27526: PUSH
27527: EMPTY
27528: EQUAL
27529: OR
27530: IFFALSE 27475
// if not control in _control then
27532: LD_VAR 0 4
27536: PUSH
27537: LD_VAR 0 12
27541: IN
27542: NOT
27543: IFFALSE 27569
// control := _control [ rand ( 1 , _control ) ] ;
27545: LD_ADDR_VAR 0 4
27549: PUSH
27550: LD_VAR 0 12
27554: PUSH
27555: LD_INT 1
27557: PPUSH
27558: LD_VAR 0 12
27562: PPUSH
27563: CALL_OW 12
27567: ARRAY
27568: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27569: LD_VAR 0 2
27573: PPUSH
27574: LD_VAR 0 5
27578: PPUSH
27579: CALL 27937 0 2
27583: NOT
27584: IFFALSE 27643
// repeat weapon := _weapon [ 1 ] ;
27586: LD_ADDR_VAR 0 5
27590: PUSH
27591: LD_VAR 0 10
27595: PUSH
27596: LD_INT 1
27598: ARRAY
27599: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27600: LD_ADDR_VAR 0 10
27604: PUSH
27605: LD_VAR 0 10
27609: PPUSH
27610: LD_INT 1
27612: PPUSH
27613: CALL_OW 3
27617: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27618: LD_VAR 0 2
27622: PPUSH
27623: LD_VAR 0 5
27627: PPUSH
27628: CALL 27937 0 2
27632: PUSH
27633: LD_VAR 0 10
27637: PUSH
27638: EMPTY
27639: EQUAL
27640: OR
27641: IFFALSE 27586
// result := [ ] ;
27643: LD_ADDR_VAR 0 6
27647: PUSH
27648: EMPTY
27649: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27650: LD_VAR 0 1
27654: PPUSH
27655: LD_VAR 0 2
27659: PPUSH
27660: LD_VAR 0 3
27664: PPUSH
27665: LD_VAR 0 4
27669: PPUSH
27670: LD_VAR 0 5
27674: PPUSH
27675: CALL_OW 448
27679: IFFALSE 27712
// result := [ chassis , engine , control , weapon ] ;
27681: LD_ADDR_VAR 0 6
27685: PUSH
27686: LD_VAR 0 2
27690: PUSH
27691: LD_VAR 0 3
27695: PUSH
27696: LD_VAR 0 4
27700: PUSH
27701: LD_VAR 0 5
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: ST_TO_ADDR
// end ;
27712: LD_VAR 0 6
27716: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27717: LD_INT 0
27719: PPUSH
// if not chassis or not engine then
27720: LD_VAR 0 1
27724: NOT
27725: PUSH
27726: LD_VAR 0 2
27730: NOT
27731: OR
27732: IFFALSE 27736
// exit ;
27734: GO 27932
// case engine of engine_solar :
27736: LD_VAR 0 2
27740: PUSH
27741: LD_INT 2
27743: DOUBLE
27744: EQUAL
27745: IFTRUE 27749
27747: GO 27787
27749: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27750: LD_ADDR_VAR 0 3
27754: PUSH
27755: LD_INT 11
27757: PUSH
27758: LD_INT 12
27760: PUSH
27761: LD_INT 13
27763: PUSH
27764: LD_INT 14
27766: PUSH
27767: LD_INT 1
27769: PUSH
27770: LD_INT 2
27772: PUSH
27773: LD_INT 3
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: ST_TO_ADDR
27785: GO 27916
27787: LD_INT 1
27789: DOUBLE
27790: EQUAL
27791: IFTRUE 27795
27793: GO 27857
27795: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27796: LD_ADDR_VAR 0 3
27800: PUSH
27801: LD_INT 11
27803: PUSH
27804: LD_INT 12
27806: PUSH
27807: LD_INT 13
27809: PUSH
27810: LD_INT 14
27812: PUSH
27813: LD_INT 1
27815: PUSH
27816: LD_INT 2
27818: PUSH
27819: LD_INT 3
27821: PUSH
27822: LD_INT 4
27824: PUSH
27825: LD_INT 5
27827: PUSH
27828: LD_INT 21
27830: PUSH
27831: LD_INT 23
27833: PUSH
27834: LD_INT 22
27836: PUSH
27837: LD_INT 24
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: ST_TO_ADDR
27855: GO 27916
27857: LD_INT 3
27859: DOUBLE
27860: EQUAL
27861: IFTRUE 27865
27863: GO 27915
27865: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27866: LD_ADDR_VAR 0 3
27870: PUSH
27871: LD_INT 13
27873: PUSH
27874: LD_INT 14
27876: PUSH
27877: LD_INT 2
27879: PUSH
27880: LD_INT 3
27882: PUSH
27883: LD_INT 4
27885: PUSH
27886: LD_INT 5
27888: PUSH
27889: LD_INT 21
27891: PUSH
27892: LD_INT 22
27894: PUSH
27895: LD_INT 23
27897: PUSH
27898: LD_INT 24
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: ST_TO_ADDR
27913: GO 27916
27915: POP
// result := ( chassis in result ) ;
27916: LD_ADDR_VAR 0 3
27920: PUSH
27921: LD_VAR 0 1
27925: PUSH
27926: LD_VAR 0 3
27930: IN
27931: ST_TO_ADDR
// end ;
27932: LD_VAR 0 3
27936: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27937: LD_INT 0
27939: PPUSH
// if not chassis or not weapon then
27940: LD_VAR 0 1
27944: NOT
27945: PUSH
27946: LD_VAR 0 2
27950: NOT
27951: OR
27952: IFFALSE 27956
// exit ;
27954: GO 29018
// case weapon of us_machine_gun :
27956: LD_VAR 0 2
27960: PUSH
27961: LD_INT 2
27963: DOUBLE
27964: EQUAL
27965: IFTRUE 27969
27967: GO 27999
27969: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27970: LD_ADDR_VAR 0 3
27974: PUSH
27975: LD_INT 1
27977: PUSH
27978: LD_INT 2
27980: PUSH
27981: LD_INT 3
27983: PUSH
27984: LD_INT 4
27986: PUSH
27987: LD_INT 5
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: ST_TO_ADDR
27997: GO 29002
27999: LD_INT 3
28001: DOUBLE
28002: EQUAL
28003: IFTRUE 28007
28005: GO 28037
28007: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28008: LD_ADDR_VAR 0 3
28012: PUSH
28013: LD_INT 1
28015: PUSH
28016: LD_INT 2
28018: PUSH
28019: LD_INT 3
28021: PUSH
28022: LD_INT 4
28024: PUSH
28025: LD_INT 5
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: ST_TO_ADDR
28035: GO 29002
28037: LD_INT 11
28039: DOUBLE
28040: EQUAL
28041: IFTRUE 28045
28043: GO 28075
28045: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28046: LD_ADDR_VAR 0 3
28050: PUSH
28051: LD_INT 1
28053: PUSH
28054: LD_INT 2
28056: PUSH
28057: LD_INT 3
28059: PUSH
28060: LD_INT 4
28062: PUSH
28063: LD_INT 5
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: ST_TO_ADDR
28073: GO 29002
28075: LD_INT 4
28077: DOUBLE
28078: EQUAL
28079: IFTRUE 28083
28081: GO 28109
28083: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28084: LD_ADDR_VAR 0 3
28088: PUSH
28089: LD_INT 2
28091: PUSH
28092: LD_INT 3
28094: PUSH
28095: LD_INT 4
28097: PUSH
28098: LD_INT 5
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: ST_TO_ADDR
28107: GO 29002
28109: LD_INT 5
28111: DOUBLE
28112: EQUAL
28113: IFTRUE 28117
28115: GO 28143
28117: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28118: LD_ADDR_VAR 0 3
28122: PUSH
28123: LD_INT 2
28125: PUSH
28126: LD_INT 3
28128: PUSH
28129: LD_INT 4
28131: PUSH
28132: LD_INT 5
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: ST_TO_ADDR
28141: GO 29002
28143: LD_INT 9
28145: DOUBLE
28146: EQUAL
28147: IFTRUE 28151
28149: GO 28177
28151: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28152: LD_ADDR_VAR 0 3
28156: PUSH
28157: LD_INT 2
28159: PUSH
28160: LD_INT 3
28162: PUSH
28163: LD_INT 4
28165: PUSH
28166: LD_INT 5
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: ST_TO_ADDR
28175: GO 29002
28177: LD_INT 7
28179: DOUBLE
28180: EQUAL
28181: IFTRUE 28185
28183: GO 28211
28185: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28186: LD_ADDR_VAR 0 3
28190: PUSH
28191: LD_INT 2
28193: PUSH
28194: LD_INT 3
28196: PUSH
28197: LD_INT 4
28199: PUSH
28200: LD_INT 5
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: ST_TO_ADDR
28209: GO 29002
28211: LD_INT 12
28213: DOUBLE
28214: EQUAL
28215: IFTRUE 28219
28217: GO 28245
28219: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28220: LD_ADDR_VAR 0 3
28224: PUSH
28225: LD_INT 2
28227: PUSH
28228: LD_INT 3
28230: PUSH
28231: LD_INT 4
28233: PUSH
28234: LD_INT 5
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: ST_TO_ADDR
28243: GO 29002
28245: LD_INT 13
28247: DOUBLE
28248: EQUAL
28249: IFTRUE 28253
28251: GO 28279
28253: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28254: LD_ADDR_VAR 0 3
28258: PUSH
28259: LD_INT 2
28261: PUSH
28262: LD_INT 3
28264: PUSH
28265: LD_INT 4
28267: PUSH
28268: LD_INT 5
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: ST_TO_ADDR
28277: GO 29002
28279: LD_INT 14
28281: DOUBLE
28282: EQUAL
28283: IFTRUE 28287
28285: GO 28305
28287: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28288: LD_ADDR_VAR 0 3
28292: PUSH
28293: LD_INT 4
28295: PUSH
28296: LD_INT 5
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: ST_TO_ADDR
28303: GO 29002
28305: LD_INT 6
28307: DOUBLE
28308: EQUAL
28309: IFTRUE 28313
28311: GO 28331
28313: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28314: LD_ADDR_VAR 0 3
28318: PUSH
28319: LD_INT 4
28321: PUSH
28322: LD_INT 5
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: ST_TO_ADDR
28329: GO 29002
28331: LD_INT 10
28333: DOUBLE
28334: EQUAL
28335: IFTRUE 28339
28337: GO 28357
28339: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28340: LD_ADDR_VAR 0 3
28344: PUSH
28345: LD_INT 4
28347: PUSH
28348: LD_INT 5
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: ST_TO_ADDR
28355: GO 29002
28357: LD_INT 22
28359: DOUBLE
28360: EQUAL
28361: IFTRUE 28365
28363: GO 28391
28365: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28366: LD_ADDR_VAR 0 3
28370: PUSH
28371: LD_INT 11
28373: PUSH
28374: LD_INT 12
28376: PUSH
28377: LD_INT 13
28379: PUSH
28380: LD_INT 14
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: ST_TO_ADDR
28389: GO 29002
28391: LD_INT 23
28393: DOUBLE
28394: EQUAL
28395: IFTRUE 28399
28397: GO 28425
28399: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28400: LD_ADDR_VAR 0 3
28404: PUSH
28405: LD_INT 11
28407: PUSH
28408: LD_INT 12
28410: PUSH
28411: LD_INT 13
28413: PUSH
28414: LD_INT 14
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: ST_TO_ADDR
28423: GO 29002
28425: LD_INT 24
28427: DOUBLE
28428: EQUAL
28429: IFTRUE 28433
28431: GO 28459
28433: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28434: LD_ADDR_VAR 0 3
28438: PUSH
28439: LD_INT 11
28441: PUSH
28442: LD_INT 12
28444: PUSH
28445: LD_INT 13
28447: PUSH
28448: LD_INT 14
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: ST_TO_ADDR
28457: GO 29002
28459: LD_INT 30
28461: DOUBLE
28462: EQUAL
28463: IFTRUE 28467
28465: GO 28493
28467: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28468: LD_ADDR_VAR 0 3
28472: PUSH
28473: LD_INT 11
28475: PUSH
28476: LD_INT 12
28478: PUSH
28479: LD_INT 13
28481: PUSH
28482: LD_INT 14
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: ST_TO_ADDR
28491: GO 29002
28493: LD_INT 25
28495: DOUBLE
28496: EQUAL
28497: IFTRUE 28501
28499: GO 28519
28501: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28502: LD_ADDR_VAR 0 3
28506: PUSH
28507: LD_INT 13
28509: PUSH
28510: LD_INT 14
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: ST_TO_ADDR
28517: GO 29002
28519: LD_INT 27
28521: DOUBLE
28522: EQUAL
28523: IFTRUE 28527
28525: GO 28545
28527: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28528: LD_ADDR_VAR 0 3
28532: PUSH
28533: LD_INT 13
28535: PUSH
28536: LD_INT 14
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: ST_TO_ADDR
28543: GO 29002
28545: LD_EXP 63
28549: DOUBLE
28550: EQUAL
28551: IFTRUE 28555
28553: GO 28581
28555: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28556: LD_ADDR_VAR 0 3
28560: PUSH
28561: LD_INT 11
28563: PUSH
28564: LD_INT 12
28566: PUSH
28567: LD_INT 13
28569: PUSH
28570: LD_INT 14
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: ST_TO_ADDR
28579: GO 29002
28581: LD_INT 28
28583: DOUBLE
28584: EQUAL
28585: IFTRUE 28589
28587: GO 28607
28589: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28590: LD_ADDR_VAR 0 3
28594: PUSH
28595: LD_INT 13
28597: PUSH
28598: LD_INT 14
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: ST_TO_ADDR
28605: GO 29002
28607: LD_INT 29
28609: DOUBLE
28610: EQUAL
28611: IFTRUE 28615
28613: GO 28633
28615: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28616: LD_ADDR_VAR 0 3
28620: PUSH
28621: LD_INT 13
28623: PUSH
28624: LD_INT 14
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: ST_TO_ADDR
28631: GO 29002
28633: LD_INT 31
28635: DOUBLE
28636: EQUAL
28637: IFTRUE 28641
28639: GO 28659
28641: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28642: LD_ADDR_VAR 0 3
28646: PUSH
28647: LD_INT 13
28649: PUSH
28650: LD_INT 14
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: ST_TO_ADDR
28657: GO 29002
28659: LD_INT 26
28661: DOUBLE
28662: EQUAL
28663: IFTRUE 28667
28665: GO 28685
28667: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28668: LD_ADDR_VAR 0 3
28672: PUSH
28673: LD_INT 13
28675: PUSH
28676: LD_INT 14
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: ST_TO_ADDR
28683: GO 29002
28685: LD_INT 42
28687: DOUBLE
28688: EQUAL
28689: IFTRUE 28693
28691: GO 28719
28693: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28694: LD_ADDR_VAR 0 3
28698: PUSH
28699: LD_INT 21
28701: PUSH
28702: LD_INT 22
28704: PUSH
28705: LD_INT 23
28707: PUSH
28708: LD_INT 24
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: ST_TO_ADDR
28717: GO 29002
28719: LD_INT 43
28721: DOUBLE
28722: EQUAL
28723: IFTRUE 28727
28725: GO 28753
28727: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28728: LD_ADDR_VAR 0 3
28732: PUSH
28733: LD_INT 21
28735: PUSH
28736: LD_INT 22
28738: PUSH
28739: LD_INT 23
28741: PUSH
28742: LD_INT 24
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: ST_TO_ADDR
28751: GO 29002
28753: LD_INT 44
28755: DOUBLE
28756: EQUAL
28757: IFTRUE 28761
28759: GO 28787
28761: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28762: LD_ADDR_VAR 0 3
28766: PUSH
28767: LD_INT 21
28769: PUSH
28770: LD_INT 22
28772: PUSH
28773: LD_INT 23
28775: PUSH
28776: LD_INT 24
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: ST_TO_ADDR
28785: GO 29002
28787: LD_INT 45
28789: DOUBLE
28790: EQUAL
28791: IFTRUE 28795
28793: GO 28821
28795: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28796: LD_ADDR_VAR 0 3
28800: PUSH
28801: LD_INT 21
28803: PUSH
28804: LD_INT 22
28806: PUSH
28807: LD_INT 23
28809: PUSH
28810: LD_INT 24
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: ST_TO_ADDR
28819: GO 29002
28821: LD_INT 49
28823: DOUBLE
28824: EQUAL
28825: IFTRUE 28829
28827: GO 28855
28829: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28830: LD_ADDR_VAR 0 3
28834: PUSH
28835: LD_INT 21
28837: PUSH
28838: LD_INT 22
28840: PUSH
28841: LD_INT 23
28843: PUSH
28844: LD_INT 24
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: ST_TO_ADDR
28853: GO 29002
28855: LD_INT 51
28857: DOUBLE
28858: EQUAL
28859: IFTRUE 28863
28861: GO 28889
28863: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28864: LD_ADDR_VAR 0 3
28868: PUSH
28869: LD_INT 21
28871: PUSH
28872: LD_INT 22
28874: PUSH
28875: LD_INT 23
28877: PUSH
28878: LD_INT 24
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: ST_TO_ADDR
28887: GO 29002
28889: LD_INT 52
28891: DOUBLE
28892: EQUAL
28893: IFTRUE 28897
28895: GO 28923
28897: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28898: LD_ADDR_VAR 0 3
28902: PUSH
28903: LD_INT 21
28905: PUSH
28906: LD_INT 22
28908: PUSH
28909: LD_INT 23
28911: PUSH
28912: LD_INT 24
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: ST_TO_ADDR
28921: GO 29002
28923: LD_INT 53
28925: DOUBLE
28926: EQUAL
28927: IFTRUE 28931
28929: GO 28949
28931: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28932: LD_ADDR_VAR 0 3
28936: PUSH
28937: LD_INT 23
28939: PUSH
28940: LD_INT 24
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: ST_TO_ADDR
28947: GO 29002
28949: LD_INT 46
28951: DOUBLE
28952: EQUAL
28953: IFTRUE 28957
28955: GO 28975
28957: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28958: LD_ADDR_VAR 0 3
28962: PUSH
28963: LD_INT 23
28965: PUSH
28966: LD_INT 24
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: ST_TO_ADDR
28973: GO 29002
28975: LD_INT 47
28977: DOUBLE
28978: EQUAL
28979: IFTRUE 28983
28981: GO 29001
28983: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28984: LD_ADDR_VAR 0 3
28988: PUSH
28989: LD_INT 23
28991: PUSH
28992: LD_INT 24
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: ST_TO_ADDR
28999: GO 29002
29001: POP
// result := ( chassis in result ) ;
29002: LD_ADDR_VAR 0 3
29006: PUSH
29007: LD_VAR 0 1
29011: PUSH
29012: LD_VAR 0 3
29016: IN
29017: ST_TO_ADDR
// end ;
29018: LD_VAR 0 3
29022: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29023: LD_INT 0
29025: PPUSH
29026: PPUSH
29027: PPUSH
29028: PPUSH
29029: PPUSH
29030: PPUSH
29031: PPUSH
// result := array ;
29032: LD_ADDR_VAR 0 5
29036: PUSH
29037: LD_VAR 0 1
29041: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29042: LD_VAR 0 1
29046: NOT
29047: PUSH
29048: LD_VAR 0 2
29052: NOT
29053: OR
29054: PUSH
29055: LD_VAR 0 3
29059: NOT
29060: OR
29061: PUSH
29062: LD_VAR 0 2
29066: PUSH
29067: LD_VAR 0 1
29071: GREATER
29072: OR
29073: PUSH
29074: LD_VAR 0 3
29078: PUSH
29079: LD_VAR 0 1
29083: GREATER
29084: OR
29085: IFFALSE 29089
// exit ;
29087: GO 29385
// if direction then
29089: LD_VAR 0 4
29093: IFFALSE 29157
// begin d := 1 ;
29095: LD_ADDR_VAR 0 9
29099: PUSH
29100: LD_INT 1
29102: ST_TO_ADDR
// if i_from > i_to then
29103: LD_VAR 0 2
29107: PUSH
29108: LD_VAR 0 3
29112: GREATER
29113: IFFALSE 29139
// length := ( array - i_from ) + i_to else
29115: LD_ADDR_VAR 0 11
29119: PUSH
29120: LD_VAR 0 1
29124: PUSH
29125: LD_VAR 0 2
29129: MINUS
29130: PUSH
29131: LD_VAR 0 3
29135: PLUS
29136: ST_TO_ADDR
29137: GO 29155
// length := i_to - i_from ;
29139: LD_ADDR_VAR 0 11
29143: PUSH
29144: LD_VAR 0 3
29148: PUSH
29149: LD_VAR 0 2
29153: MINUS
29154: ST_TO_ADDR
// end else
29155: GO 29218
// begin d := - 1 ;
29157: LD_ADDR_VAR 0 9
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: ST_TO_ADDR
// if i_from > i_to then
29166: LD_VAR 0 2
29170: PUSH
29171: LD_VAR 0 3
29175: GREATER
29176: IFFALSE 29196
// length := i_from - i_to else
29178: LD_ADDR_VAR 0 11
29182: PUSH
29183: LD_VAR 0 2
29187: PUSH
29188: LD_VAR 0 3
29192: MINUS
29193: ST_TO_ADDR
29194: GO 29218
// length := ( array - i_to ) + i_from ;
29196: LD_ADDR_VAR 0 11
29200: PUSH
29201: LD_VAR 0 1
29205: PUSH
29206: LD_VAR 0 3
29210: MINUS
29211: PUSH
29212: LD_VAR 0 2
29216: PLUS
29217: ST_TO_ADDR
// end ; if not length then
29218: LD_VAR 0 11
29222: NOT
29223: IFFALSE 29227
// exit ;
29225: GO 29385
// tmp := array ;
29227: LD_ADDR_VAR 0 10
29231: PUSH
29232: LD_VAR 0 1
29236: ST_TO_ADDR
// for i = 1 to length do
29237: LD_ADDR_VAR 0 6
29241: PUSH
29242: DOUBLE
29243: LD_INT 1
29245: DEC
29246: ST_TO_ADDR
29247: LD_VAR 0 11
29251: PUSH
29252: FOR_TO
29253: IFFALSE 29373
// begin for j = 1 to array do
29255: LD_ADDR_VAR 0 7
29259: PUSH
29260: DOUBLE
29261: LD_INT 1
29263: DEC
29264: ST_TO_ADDR
29265: LD_VAR 0 1
29269: PUSH
29270: FOR_TO
29271: IFFALSE 29359
// begin k := j + d ;
29273: LD_ADDR_VAR 0 8
29277: PUSH
29278: LD_VAR 0 7
29282: PUSH
29283: LD_VAR 0 9
29287: PLUS
29288: ST_TO_ADDR
// if k > array then
29289: LD_VAR 0 8
29293: PUSH
29294: LD_VAR 0 1
29298: GREATER
29299: IFFALSE 29309
// k := 1 ;
29301: LD_ADDR_VAR 0 8
29305: PUSH
29306: LD_INT 1
29308: ST_TO_ADDR
// if not k then
29309: LD_VAR 0 8
29313: NOT
29314: IFFALSE 29326
// k := array ;
29316: LD_ADDR_VAR 0 8
29320: PUSH
29321: LD_VAR 0 1
29325: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29326: LD_ADDR_VAR 0 10
29330: PUSH
29331: LD_VAR 0 10
29335: PPUSH
29336: LD_VAR 0 8
29340: PPUSH
29341: LD_VAR 0 1
29345: PUSH
29346: LD_VAR 0 7
29350: ARRAY
29351: PPUSH
29352: CALL_OW 1
29356: ST_TO_ADDR
// end ;
29357: GO 29270
29359: POP
29360: POP
// array := tmp ;
29361: LD_ADDR_VAR 0 1
29365: PUSH
29366: LD_VAR 0 10
29370: ST_TO_ADDR
// end ;
29371: GO 29252
29373: POP
29374: POP
// result := array ;
29375: LD_ADDR_VAR 0 5
29379: PUSH
29380: LD_VAR 0 1
29384: ST_TO_ADDR
// end ;
29385: LD_VAR 0 5
29389: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29390: LD_INT 0
29392: PPUSH
29393: PPUSH
// result := 0 ;
29394: LD_ADDR_VAR 0 3
29398: PUSH
29399: LD_INT 0
29401: ST_TO_ADDR
// if not array or not value in array then
29402: LD_VAR 0 1
29406: NOT
29407: PUSH
29408: LD_VAR 0 2
29412: PUSH
29413: LD_VAR 0 1
29417: IN
29418: NOT
29419: OR
29420: IFFALSE 29424
// exit ;
29422: GO 29478
// for i = 1 to array do
29424: LD_ADDR_VAR 0 4
29428: PUSH
29429: DOUBLE
29430: LD_INT 1
29432: DEC
29433: ST_TO_ADDR
29434: LD_VAR 0 1
29438: PUSH
29439: FOR_TO
29440: IFFALSE 29476
// if value = array [ i ] then
29442: LD_VAR 0 2
29446: PUSH
29447: LD_VAR 0 1
29451: PUSH
29452: LD_VAR 0 4
29456: ARRAY
29457: EQUAL
29458: IFFALSE 29474
// begin result := i ;
29460: LD_ADDR_VAR 0 3
29464: PUSH
29465: LD_VAR 0 4
29469: ST_TO_ADDR
// exit ;
29470: POP
29471: POP
29472: GO 29478
// end ;
29474: GO 29439
29476: POP
29477: POP
// end ;
29478: LD_VAR 0 3
29482: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29483: LD_INT 0
29485: PPUSH
// vc_chassis := chassis ;
29486: LD_ADDR_OWVAR 37
29490: PUSH
29491: LD_VAR 0 1
29495: ST_TO_ADDR
// vc_engine := engine ;
29496: LD_ADDR_OWVAR 39
29500: PUSH
29501: LD_VAR 0 2
29505: ST_TO_ADDR
// vc_control := control ;
29506: LD_ADDR_OWVAR 38
29510: PUSH
29511: LD_VAR 0 3
29515: ST_TO_ADDR
// vc_weapon := weapon ;
29516: LD_ADDR_OWVAR 40
29520: PUSH
29521: LD_VAR 0 4
29525: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29526: LD_ADDR_OWVAR 41
29530: PUSH
29531: LD_VAR 0 5
29535: ST_TO_ADDR
// end ;
29536: LD_VAR 0 6
29540: RET
// export function WantPlant ( unit ) ; var task ; begin
29541: LD_INT 0
29543: PPUSH
29544: PPUSH
// result := false ;
29545: LD_ADDR_VAR 0 2
29549: PUSH
29550: LD_INT 0
29552: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29553: LD_ADDR_VAR 0 3
29557: PUSH
29558: LD_VAR 0 1
29562: PPUSH
29563: CALL_OW 437
29567: ST_TO_ADDR
// if task then
29568: LD_VAR 0 3
29572: IFFALSE 29600
// if task [ 1 ] [ 1 ] = p then
29574: LD_VAR 0 3
29578: PUSH
29579: LD_INT 1
29581: ARRAY
29582: PUSH
29583: LD_INT 1
29585: ARRAY
29586: PUSH
29587: LD_STRING p
29589: EQUAL
29590: IFFALSE 29600
// result := true ;
29592: LD_ADDR_VAR 0 2
29596: PUSH
29597: LD_INT 1
29599: ST_TO_ADDR
// end ;
29600: LD_VAR 0 2
29604: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29605: LD_INT 0
29607: PPUSH
29608: PPUSH
29609: PPUSH
29610: PPUSH
// if pos < 1 then
29611: LD_VAR 0 2
29615: PUSH
29616: LD_INT 1
29618: LESS
29619: IFFALSE 29623
// exit ;
29621: GO 29926
// if pos = 1 then
29623: LD_VAR 0 2
29627: PUSH
29628: LD_INT 1
29630: EQUAL
29631: IFFALSE 29664
// result := Replace ( arr , pos [ 1 ] , value ) else
29633: LD_ADDR_VAR 0 4
29637: PUSH
29638: LD_VAR 0 1
29642: PPUSH
29643: LD_VAR 0 2
29647: PUSH
29648: LD_INT 1
29650: ARRAY
29651: PPUSH
29652: LD_VAR 0 3
29656: PPUSH
29657: CALL_OW 1
29661: ST_TO_ADDR
29662: GO 29926
// begin tmp := arr ;
29664: LD_ADDR_VAR 0 6
29668: PUSH
29669: LD_VAR 0 1
29673: ST_TO_ADDR
// s_arr := [ tmp ] ;
29674: LD_ADDR_VAR 0 7
29678: PUSH
29679: LD_VAR 0 6
29683: PUSH
29684: EMPTY
29685: LIST
29686: ST_TO_ADDR
// for i = 1 to pos - 1 do
29687: LD_ADDR_VAR 0 5
29691: PUSH
29692: DOUBLE
29693: LD_INT 1
29695: DEC
29696: ST_TO_ADDR
29697: LD_VAR 0 2
29701: PUSH
29702: LD_INT 1
29704: MINUS
29705: PUSH
29706: FOR_TO
29707: IFFALSE 29752
// begin tmp := tmp [ pos [ i ] ] ;
29709: LD_ADDR_VAR 0 6
29713: PUSH
29714: LD_VAR 0 6
29718: PUSH
29719: LD_VAR 0 2
29723: PUSH
29724: LD_VAR 0 5
29728: ARRAY
29729: ARRAY
29730: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29731: LD_ADDR_VAR 0 7
29735: PUSH
29736: LD_VAR 0 7
29740: PUSH
29741: LD_VAR 0 6
29745: PUSH
29746: EMPTY
29747: LIST
29748: ADD
29749: ST_TO_ADDR
// end ;
29750: GO 29706
29752: POP
29753: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29754: LD_ADDR_VAR 0 6
29758: PUSH
29759: LD_VAR 0 6
29763: PPUSH
29764: LD_VAR 0 2
29768: PUSH
29769: LD_VAR 0 2
29773: ARRAY
29774: PPUSH
29775: LD_VAR 0 3
29779: PPUSH
29780: CALL_OW 1
29784: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29785: LD_ADDR_VAR 0 7
29789: PUSH
29790: LD_VAR 0 7
29794: PPUSH
29795: LD_VAR 0 7
29799: PPUSH
29800: LD_VAR 0 6
29804: PPUSH
29805: CALL_OW 1
29809: ST_TO_ADDR
// for i = s_arr downto 2 do
29810: LD_ADDR_VAR 0 5
29814: PUSH
29815: DOUBLE
29816: LD_VAR 0 7
29820: INC
29821: ST_TO_ADDR
29822: LD_INT 2
29824: PUSH
29825: FOR_DOWNTO
29826: IFFALSE 29910
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29828: LD_ADDR_VAR 0 6
29832: PUSH
29833: LD_VAR 0 7
29837: PUSH
29838: LD_VAR 0 5
29842: PUSH
29843: LD_INT 1
29845: MINUS
29846: ARRAY
29847: PPUSH
29848: LD_VAR 0 2
29852: PUSH
29853: LD_VAR 0 5
29857: PUSH
29858: LD_INT 1
29860: MINUS
29861: ARRAY
29862: PPUSH
29863: LD_VAR 0 7
29867: PUSH
29868: LD_VAR 0 5
29872: ARRAY
29873: PPUSH
29874: CALL_OW 1
29878: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29879: LD_ADDR_VAR 0 7
29883: PUSH
29884: LD_VAR 0 7
29888: PPUSH
29889: LD_VAR 0 5
29893: PUSH
29894: LD_INT 1
29896: MINUS
29897: PPUSH
29898: LD_VAR 0 6
29902: PPUSH
29903: CALL_OW 1
29907: ST_TO_ADDR
// end ;
29908: GO 29825
29910: POP
29911: POP
// result := s_arr [ 1 ] ;
29912: LD_ADDR_VAR 0 4
29916: PUSH
29917: LD_VAR 0 7
29921: PUSH
29922: LD_INT 1
29924: ARRAY
29925: ST_TO_ADDR
// end ; end ;
29926: LD_VAR 0 4
29930: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29931: LD_INT 0
29933: PPUSH
29934: PPUSH
// if not list then
29935: LD_VAR 0 1
29939: NOT
29940: IFFALSE 29944
// exit ;
29942: GO 30035
// i := list [ pos1 ] ;
29944: LD_ADDR_VAR 0 5
29948: PUSH
29949: LD_VAR 0 1
29953: PUSH
29954: LD_VAR 0 2
29958: ARRAY
29959: ST_TO_ADDR
// if not i then
29960: LD_VAR 0 5
29964: NOT
29965: IFFALSE 29969
// exit ;
29967: GO 30035
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29969: LD_ADDR_VAR 0 1
29973: PUSH
29974: LD_VAR 0 1
29978: PPUSH
29979: LD_VAR 0 2
29983: PPUSH
29984: LD_VAR 0 1
29988: PUSH
29989: LD_VAR 0 3
29993: ARRAY
29994: PPUSH
29995: CALL_OW 1
29999: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30000: LD_ADDR_VAR 0 1
30004: PUSH
30005: LD_VAR 0 1
30009: PPUSH
30010: LD_VAR 0 3
30014: PPUSH
30015: LD_VAR 0 5
30019: PPUSH
30020: CALL_OW 1
30024: ST_TO_ADDR
// result := list ;
30025: LD_ADDR_VAR 0 4
30029: PUSH
30030: LD_VAR 0 1
30034: ST_TO_ADDR
// end ;
30035: LD_VAR 0 4
30039: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30040: LD_INT 0
30042: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30043: LD_ADDR_VAR 0 5
30047: PUSH
30048: LD_VAR 0 1
30052: PPUSH
30053: CALL_OW 250
30057: PPUSH
30058: LD_VAR 0 1
30062: PPUSH
30063: CALL_OW 251
30067: PPUSH
30068: LD_VAR 0 2
30072: PPUSH
30073: LD_VAR 0 3
30077: PPUSH
30078: LD_VAR 0 4
30082: PPUSH
30083: CALL 30093 0 5
30087: ST_TO_ADDR
// end ;
30088: LD_VAR 0 5
30092: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30093: LD_INT 0
30095: PPUSH
30096: PPUSH
30097: PPUSH
30098: PPUSH
// if not list then
30099: LD_VAR 0 3
30103: NOT
30104: IFFALSE 30108
// exit ;
30106: GO 30496
// result := [ ] ;
30108: LD_ADDR_VAR 0 6
30112: PUSH
30113: EMPTY
30114: ST_TO_ADDR
// for i in list do
30115: LD_ADDR_VAR 0 7
30119: PUSH
30120: LD_VAR 0 3
30124: PUSH
30125: FOR_IN
30126: IFFALSE 30328
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30128: LD_ADDR_VAR 0 9
30132: PUSH
30133: LD_VAR 0 7
30137: PPUSH
30138: LD_VAR 0 1
30142: PPUSH
30143: LD_VAR 0 2
30147: PPUSH
30148: CALL_OW 297
30152: ST_TO_ADDR
// if not result then
30153: LD_VAR 0 6
30157: NOT
30158: IFFALSE 30184
// result := [ [ i , tmp ] ] else
30160: LD_ADDR_VAR 0 6
30164: PUSH
30165: LD_VAR 0 7
30169: PUSH
30170: LD_VAR 0 9
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: EMPTY
30180: LIST
30181: ST_TO_ADDR
30182: GO 30326
// begin if result [ result ] [ 2 ] < tmp then
30184: LD_VAR 0 6
30188: PUSH
30189: LD_VAR 0 6
30193: ARRAY
30194: PUSH
30195: LD_INT 2
30197: ARRAY
30198: PUSH
30199: LD_VAR 0 9
30203: LESS
30204: IFFALSE 30246
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30206: LD_ADDR_VAR 0 6
30210: PUSH
30211: LD_VAR 0 6
30215: PPUSH
30216: LD_VAR 0 6
30220: PUSH
30221: LD_INT 1
30223: PLUS
30224: PPUSH
30225: LD_VAR 0 7
30229: PUSH
30230: LD_VAR 0 9
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PPUSH
30239: CALL_OW 2
30243: ST_TO_ADDR
30244: GO 30326
// for j = 1 to result do
30246: LD_ADDR_VAR 0 8
30250: PUSH
30251: DOUBLE
30252: LD_INT 1
30254: DEC
30255: ST_TO_ADDR
30256: LD_VAR 0 6
30260: PUSH
30261: FOR_TO
30262: IFFALSE 30324
// begin if tmp < result [ j ] [ 2 ] then
30264: LD_VAR 0 9
30268: PUSH
30269: LD_VAR 0 6
30273: PUSH
30274: LD_VAR 0 8
30278: ARRAY
30279: PUSH
30280: LD_INT 2
30282: ARRAY
30283: LESS
30284: IFFALSE 30322
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30286: LD_ADDR_VAR 0 6
30290: PUSH
30291: LD_VAR 0 6
30295: PPUSH
30296: LD_VAR 0 8
30300: PPUSH
30301: LD_VAR 0 7
30305: PUSH
30306: LD_VAR 0 9
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PPUSH
30315: CALL_OW 2
30319: ST_TO_ADDR
// break ;
30320: GO 30324
// end ; end ;
30322: GO 30261
30324: POP
30325: POP
// end ; end ;
30326: GO 30125
30328: POP
30329: POP
// if result and not asc then
30330: LD_VAR 0 6
30334: PUSH
30335: LD_VAR 0 4
30339: NOT
30340: AND
30341: IFFALSE 30416
// begin tmp := result ;
30343: LD_ADDR_VAR 0 9
30347: PUSH
30348: LD_VAR 0 6
30352: ST_TO_ADDR
// for i = tmp downto 1 do
30353: LD_ADDR_VAR 0 7
30357: PUSH
30358: DOUBLE
30359: LD_VAR 0 9
30363: INC
30364: ST_TO_ADDR
30365: LD_INT 1
30367: PUSH
30368: FOR_DOWNTO
30369: IFFALSE 30414
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30371: LD_ADDR_VAR 0 6
30375: PUSH
30376: LD_VAR 0 6
30380: PPUSH
30381: LD_VAR 0 9
30385: PUSH
30386: LD_VAR 0 7
30390: MINUS
30391: PUSH
30392: LD_INT 1
30394: PLUS
30395: PPUSH
30396: LD_VAR 0 9
30400: PUSH
30401: LD_VAR 0 7
30405: ARRAY
30406: PPUSH
30407: CALL_OW 1
30411: ST_TO_ADDR
30412: GO 30368
30414: POP
30415: POP
// end ; tmp := [ ] ;
30416: LD_ADDR_VAR 0 9
30420: PUSH
30421: EMPTY
30422: ST_TO_ADDR
// if mode then
30423: LD_VAR 0 5
30427: IFFALSE 30496
// begin for i = 1 to result do
30429: LD_ADDR_VAR 0 7
30433: PUSH
30434: DOUBLE
30435: LD_INT 1
30437: DEC
30438: ST_TO_ADDR
30439: LD_VAR 0 6
30443: PUSH
30444: FOR_TO
30445: IFFALSE 30484
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30447: LD_ADDR_VAR 0 9
30451: PUSH
30452: LD_VAR 0 9
30456: PPUSH
30457: LD_VAR 0 7
30461: PPUSH
30462: LD_VAR 0 6
30466: PUSH
30467: LD_VAR 0 7
30471: ARRAY
30472: PUSH
30473: LD_INT 1
30475: ARRAY
30476: PPUSH
30477: CALL_OW 1
30481: ST_TO_ADDR
30482: GO 30444
30484: POP
30485: POP
// result := tmp ;
30486: LD_ADDR_VAR 0 6
30490: PUSH
30491: LD_VAR 0 9
30495: ST_TO_ADDR
// end ; end ;
30496: LD_VAR 0 6
30500: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30501: LD_INT 0
30503: PPUSH
30504: PPUSH
30505: PPUSH
30506: PPUSH
30507: PPUSH
30508: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30509: LD_ADDR_VAR 0 5
30513: PUSH
30514: LD_INT 0
30516: PUSH
30517: LD_INT 0
30519: PUSH
30520: LD_INT 0
30522: PUSH
30523: EMPTY
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: ST_TO_ADDR
// if not x or not y then
30531: LD_VAR 0 2
30535: NOT
30536: PUSH
30537: LD_VAR 0 3
30541: NOT
30542: OR
30543: IFFALSE 30547
// exit ;
30545: GO 32199
// if not range then
30547: LD_VAR 0 4
30551: NOT
30552: IFFALSE 30562
// range := 10 ;
30554: LD_ADDR_VAR 0 4
30558: PUSH
30559: LD_INT 10
30561: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30562: LD_ADDR_VAR 0 8
30566: PUSH
30567: LD_INT 81
30569: PUSH
30570: LD_VAR 0 1
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 92
30581: PUSH
30582: LD_VAR 0 2
30586: PUSH
30587: LD_VAR 0 3
30591: PUSH
30592: LD_VAR 0 4
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 3
30605: PUSH
30606: LD_INT 21
30608: PUSH
30609: LD_INT 3
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: LIST
30624: PPUSH
30625: CALL_OW 69
30629: ST_TO_ADDR
// if not tmp then
30630: LD_VAR 0 8
30634: NOT
30635: IFFALSE 30639
// exit ;
30637: GO 32199
// for i in tmp do
30639: LD_ADDR_VAR 0 6
30643: PUSH
30644: LD_VAR 0 8
30648: PUSH
30649: FOR_IN
30650: IFFALSE 32174
// begin points := [ 0 , 0 , 0 ] ;
30652: LD_ADDR_VAR 0 9
30656: PUSH
30657: LD_INT 0
30659: PUSH
30660: LD_INT 0
30662: PUSH
30663: LD_INT 0
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: LIST
30670: ST_TO_ADDR
// bpoints := 1 ;
30671: LD_ADDR_VAR 0 10
30675: PUSH
30676: LD_INT 1
30678: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30679: LD_VAR 0 6
30683: PPUSH
30684: CALL_OW 247
30688: PUSH
30689: LD_INT 1
30691: DOUBLE
30692: EQUAL
30693: IFTRUE 30697
30695: GO 31275
30697: POP
// begin if GetClass ( i ) = 1 then
30698: LD_VAR 0 6
30702: PPUSH
30703: CALL_OW 257
30707: PUSH
30708: LD_INT 1
30710: EQUAL
30711: IFFALSE 30732
// points := [ 10 , 5 , 3 ] ;
30713: LD_ADDR_VAR 0 9
30717: PUSH
30718: LD_INT 10
30720: PUSH
30721: LD_INT 5
30723: PUSH
30724: LD_INT 3
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: LIST
30731: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30732: LD_VAR 0 6
30736: PPUSH
30737: CALL_OW 257
30741: PUSH
30742: LD_INT 2
30744: PUSH
30745: LD_INT 3
30747: PUSH
30748: LD_INT 4
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: LIST
30755: IN
30756: IFFALSE 30777
// points := [ 3 , 2 , 1 ] ;
30758: LD_ADDR_VAR 0 9
30762: PUSH
30763: LD_INT 3
30765: PUSH
30766: LD_INT 2
30768: PUSH
30769: LD_INT 1
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: LIST
30776: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30777: LD_VAR 0 6
30781: PPUSH
30782: CALL_OW 257
30786: PUSH
30787: LD_INT 5
30789: EQUAL
30790: IFFALSE 30811
// points := [ 130 , 5 , 2 ] ;
30792: LD_ADDR_VAR 0 9
30796: PUSH
30797: LD_INT 130
30799: PUSH
30800: LD_INT 5
30802: PUSH
30803: LD_INT 2
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: LIST
30810: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30811: LD_VAR 0 6
30815: PPUSH
30816: CALL_OW 257
30820: PUSH
30821: LD_INT 8
30823: EQUAL
30824: IFFALSE 30845
// points := [ 35 , 35 , 30 ] ;
30826: LD_ADDR_VAR 0 9
30830: PUSH
30831: LD_INT 35
30833: PUSH
30834: LD_INT 35
30836: PUSH
30837: LD_INT 30
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: LIST
30844: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30845: LD_VAR 0 6
30849: PPUSH
30850: CALL_OW 257
30854: PUSH
30855: LD_INT 9
30857: EQUAL
30858: IFFALSE 30879
// points := [ 20 , 55 , 40 ] ;
30860: LD_ADDR_VAR 0 9
30864: PUSH
30865: LD_INT 20
30867: PUSH
30868: LD_INT 55
30870: PUSH
30871: LD_INT 40
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: LIST
30878: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30879: LD_VAR 0 6
30883: PPUSH
30884: CALL_OW 257
30888: PUSH
30889: LD_INT 12
30891: PUSH
30892: LD_INT 16
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: IN
30899: IFFALSE 30920
// points := [ 5 , 3 , 2 ] ;
30901: LD_ADDR_VAR 0 9
30905: PUSH
30906: LD_INT 5
30908: PUSH
30909: LD_INT 3
30911: PUSH
30912: LD_INT 2
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: LIST
30919: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30920: LD_VAR 0 6
30924: PPUSH
30925: CALL_OW 257
30929: PUSH
30930: LD_INT 17
30932: EQUAL
30933: IFFALSE 30954
// points := [ 100 , 50 , 75 ] ;
30935: LD_ADDR_VAR 0 9
30939: PUSH
30940: LD_INT 100
30942: PUSH
30943: LD_INT 50
30945: PUSH
30946: LD_INT 75
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: LIST
30953: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30954: LD_VAR 0 6
30958: PPUSH
30959: CALL_OW 257
30963: PUSH
30964: LD_INT 15
30966: EQUAL
30967: IFFALSE 30988
// points := [ 10 , 5 , 3 ] ;
30969: LD_ADDR_VAR 0 9
30973: PUSH
30974: LD_INT 10
30976: PUSH
30977: LD_INT 5
30979: PUSH
30980: LD_INT 3
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: LIST
30987: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30988: LD_VAR 0 6
30992: PPUSH
30993: CALL_OW 257
30997: PUSH
30998: LD_INT 14
31000: EQUAL
31001: IFFALSE 31022
// points := [ 10 , 0 , 0 ] ;
31003: LD_ADDR_VAR 0 9
31007: PUSH
31008: LD_INT 10
31010: PUSH
31011: LD_INT 0
31013: PUSH
31014: LD_INT 0
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: LIST
31021: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31022: LD_VAR 0 6
31026: PPUSH
31027: CALL_OW 257
31031: PUSH
31032: LD_INT 11
31034: EQUAL
31035: IFFALSE 31056
// points := [ 30 , 10 , 5 ] ;
31037: LD_ADDR_VAR 0 9
31041: PUSH
31042: LD_INT 30
31044: PUSH
31045: LD_INT 10
31047: PUSH
31048: LD_INT 5
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: LIST
31055: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31056: LD_VAR 0 1
31060: PPUSH
31061: LD_INT 5
31063: PPUSH
31064: CALL_OW 321
31068: PUSH
31069: LD_INT 2
31071: EQUAL
31072: IFFALSE 31089
// bpoints := bpoints * 1.8 ;
31074: LD_ADDR_VAR 0 10
31078: PUSH
31079: LD_VAR 0 10
31083: PUSH
31084: LD_REAL  1.80000000000000E+0000
31087: MUL
31088: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31089: LD_VAR 0 6
31093: PPUSH
31094: CALL_OW 257
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: LD_INT 2
31104: PUSH
31105: LD_INT 3
31107: PUSH
31108: LD_INT 4
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: IN
31117: PUSH
31118: LD_VAR 0 1
31122: PPUSH
31123: LD_INT 51
31125: PPUSH
31126: CALL_OW 321
31130: PUSH
31131: LD_INT 2
31133: EQUAL
31134: AND
31135: IFFALSE 31152
// bpoints := bpoints * 1.2 ;
31137: LD_ADDR_VAR 0 10
31141: PUSH
31142: LD_VAR 0 10
31146: PUSH
31147: LD_REAL  1.20000000000000E+0000
31150: MUL
31151: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31152: LD_VAR 0 6
31156: PPUSH
31157: CALL_OW 257
31161: PUSH
31162: LD_INT 5
31164: PUSH
31165: LD_INT 7
31167: PUSH
31168: LD_INT 9
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: LIST
31175: IN
31176: PUSH
31177: LD_VAR 0 1
31181: PPUSH
31182: LD_INT 52
31184: PPUSH
31185: CALL_OW 321
31189: PUSH
31190: LD_INT 2
31192: EQUAL
31193: AND
31194: IFFALSE 31211
// bpoints := bpoints * 1.5 ;
31196: LD_ADDR_VAR 0 10
31200: PUSH
31201: LD_VAR 0 10
31205: PUSH
31206: LD_REAL  1.50000000000000E+0000
31209: MUL
31210: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31211: LD_VAR 0 1
31215: PPUSH
31216: LD_INT 66
31218: PPUSH
31219: CALL_OW 321
31223: PUSH
31224: LD_INT 2
31226: EQUAL
31227: IFFALSE 31244
// bpoints := bpoints * 1.1 ;
31229: LD_ADDR_VAR 0 10
31233: PUSH
31234: LD_VAR 0 10
31238: PUSH
31239: LD_REAL  1.10000000000000E+0000
31242: MUL
31243: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31244: LD_ADDR_VAR 0 10
31248: PUSH
31249: LD_VAR 0 10
31253: PUSH
31254: LD_VAR 0 6
31258: PPUSH
31259: LD_INT 1
31261: PPUSH
31262: CALL_OW 259
31266: PUSH
31267: LD_REAL  1.15000000000000E+0000
31270: MUL
31271: MUL
31272: ST_TO_ADDR
// end ; unit_vehicle :
31273: GO 32103
31275: LD_INT 2
31277: DOUBLE
31278: EQUAL
31279: IFTRUE 31283
31281: GO 32091
31283: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31284: LD_VAR 0 6
31288: PPUSH
31289: CALL_OW 264
31293: PUSH
31294: LD_INT 2
31296: PUSH
31297: LD_INT 42
31299: PUSH
31300: LD_INT 24
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: LIST
31307: IN
31308: IFFALSE 31329
// points := [ 25 , 5 , 3 ] ;
31310: LD_ADDR_VAR 0 9
31314: PUSH
31315: LD_INT 25
31317: PUSH
31318: LD_INT 5
31320: PUSH
31321: LD_INT 3
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: LIST
31328: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31329: LD_VAR 0 6
31333: PPUSH
31334: CALL_OW 264
31338: PUSH
31339: LD_INT 4
31341: PUSH
31342: LD_INT 43
31344: PUSH
31345: LD_INT 25
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: LIST
31352: IN
31353: IFFALSE 31374
// points := [ 40 , 15 , 5 ] ;
31355: LD_ADDR_VAR 0 9
31359: PUSH
31360: LD_INT 40
31362: PUSH
31363: LD_INT 15
31365: PUSH
31366: LD_INT 5
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: LIST
31373: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31374: LD_VAR 0 6
31378: PPUSH
31379: CALL_OW 264
31383: PUSH
31384: LD_INT 3
31386: PUSH
31387: LD_INT 23
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: IN
31394: IFFALSE 31415
// points := [ 7 , 25 , 8 ] ;
31396: LD_ADDR_VAR 0 9
31400: PUSH
31401: LD_INT 7
31403: PUSH
31404: LD_INT 25
31406: PUSH
31407: LD_INT 8
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: LIST
31414: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31415: LD_VAR 0 6
31419: PPUSH
31420: CALL_OW 264
31424: PUSH
31425: LD_INT 5
31427: PUSH
31428: LD_INT 27
31430: PUSH
31431: LD_INT 44
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: LIST
31438: IN
31439: IFFALSE 31460
// points := [ 14 , 50 , 16 ] ;
31441: LD_ADDR_VAR 0 9
31445: PUSH
31446: LD_INT 14
31448: PUSH
31449: LD_INT 50
31451: PUSH
31452: LD_INT 16
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: LIST
31459: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31460: LD_VAR 0 6
31464: PPUSH
31465: CALL_OW 264
31469: PUSH
31470: LD_INT 6
31472: PUSH
31473: LD_INT 46
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: IN
31480: IFFALSE 31501
// points := [ 32 , 120 , 70 ] ;
31482: LD_ADDR_VAR 0 9
31486: PUSH
31487: LD_INT 32
31489: PUSH
31490: LD_INT 120
31492: PUSH
31493: LD_INT 70
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: LIST
31500: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31501: LD_VAR 0 6
31505: PPUSH
31506: CALL_OW 264
31510: PUSH
31511: LD_INT 7
31513: PUSH
31514: LD_INT 28
31516: PUSH
31517: LD_INT 45
31519: PUSH
31520: LD_EXP 63
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: IN
31531: IFFALSE 31552
// points := [ 35 , 20 , 45 ] ;
31533: LD_ADDR_VAR 0 9
31537: PUSH
31538: LD_INT 35
31540: PUSH
31541: LD_INT 20
31543: PUSH
31544: LD_INT 45
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: LIST
31551: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31552: LD_VAR 0 6
31556: PPUSH
31557: CALL_OW 264
31561: PUSH
31562: LD_INT 47
31564: PUSH
31565: EMPTY
31566: LIST
31567: IN
31568: IFFALSE 31589
// points := [ 67 , 45 , 75 ] ;
31570: LD_ADDR_VAR 0 9
31574: PUSH
31575: LD_INT 67
31577: PUSH
31578: LD_INT 45
31580: PUSH
31581: LD_INT 75
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: LIST
31588: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31589: LD_VAR 0 6
31593: PPUSH
31594: CALL_OW 264
31598: PUSH
31599: LD_INT 26
31601: PUSH
31602: EMPTY
31603: LIST
31604: IN
31605: IFFALSE 31626
// points := [ 120 , 30 , 80 ] ;
31607: LD_ADDR_VAR 0 9
31611: PUSH
31612: LD_INT 120
31614: PUSH
31615: LD_INT 30
31617: PUSH
31618: LD_INT 80
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: LIST
31625: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31626: LD_VAR 0 6
31630: PPUSH
31631: CALL_OW 264
31635: PUSH
31636: LD_INT 22
31638: PUSH
31639: EMPTY
31640: LIST
31641: IN
31642: IFFALSE 31663
// points := [ 40 , 1 , 1 ] ;
31644: LD_ADDR_VAR 0 9
31648: PUSH
31649: LD_INT 40
31651: PUSH
31652: LD_INT 1
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: LIST
31662: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31663: LD_VAR 0 6
31667: PPUSH
31668: CALL_OW 264
31672: PUSH
31673: LD_INT 29
31675: PUSH
31676: EMPTY
31677: LIST
31678: IN
31679: IFFALSE 31700
// points := [ 70 , 200 , 400 ] ;
31681: LD_ADDR_VAR 0 9
31685: PUSH
31686: LD_INT 70
31688: PUSH
31689: LD_INT 200
31691: PUSH
31692: LD_INT 400
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: LIST
31699: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31700: LD_VAR 0 6
31704: PPUSH
31705: CALL_OW 264
31709: PUSH
31710: LD_INT 14
31712: PUSH
31713: LD_INT 53
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: IN
31720: IFFALSE 31741
// points := [ 40 , 10 , 20 ] ;
31722: LD_ADDR_VAR 0 9
31726: PUSH
31727: LD_INT 40
31729: PUSH
31730: LD_INT 10
31732: PUSH
31733: LD_INT 20
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: LIST
31740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31741: LD_VAR 0 6
31745: PPUSH
31746: CALL_OW 264
31750: PUSH
31751: LD_INT 9
31753: PUSH
31754: EMPTY
31755: LIST
31756: IN
31757: IFFALSE 31778
// points := [ 5 , 70 , 20 ] ;
31759: LD_ADDR_VAR 0 9
31763: PUSH
31764: LD_INT 5
31766: PUSH
31767: LD_INT 70
31769: PUSH
31770: LD_INT 20
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: LIST
31777: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31778: LD_VAR 0 6
31782: PPUSH
31783: CALL_OW 264
31787: PUSH
31788: LD_INT 10
31790: PUSH
31791: EMPTY
31792: LIST
31793: IN
31794: IFFALSE 31815
// points := [ 35 , 110 , 70 ] ;
31796: LD_ADDR_VAR 0 9
31800: PUSH
31801: LD_INT 35
31803: PUSH
31804: LD_INT 110
31806: PUSH
31807: LD_INT 70
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: LIST
31814: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31815: LD_VAR 0 6
31819: PPUSH
31820: CALL_OW 265
31824: PUSH
31825: LD_INT 25
31827: EQUAL
31828: IFFALSE 31849
// points := [ 80 , 65 , 100 ] ;
31830: LD_ADDR_VAR 0 9
31834: PUSH
31835: LD_INT 80
31837: PUSH
31838: LD_INT 65
31840: PUSH
31841: LD_INT 100
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: LIST
31848: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31849: LD_VAR 0 6
31853: PPUSH
31854: CALL_OW 263
31858: PUSH
31859: LD_INT 1
31861: EQUAL
31862: IFFALSE 31897
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31864: LD_ADDR_VAR 0 10
31868: PUSH
31869: LD_VAR 0 10
31873: PUSH
31874: LD_VAR 0 6
31878: PPUSH
31879: CALL_OW 311
31883: PPUSH
31884: LD_INT 3
31886: PPUSH
31887: CALL_OW 259
31891: PUSH
31892: LD_INT 4
31894: MUL
31895: MUL
31896: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31897: LD_VAR 0 6
31901: PPUSH
31902: CALL_OW 263
31906: PUSH
31907: LD_INT 2
31909: EQUAL
31910: IFFALSE 31961
// begin j := IsControledBy ( i ) ;
31912: LD_ADDR_VAR 0 7
31916: PUSH
31917: LD_VAR 0 6
31921: PPUSH
31922: CALL_OW 312
31926: ST_TO_ADDR
// if j then
31927: LD_VAR 0 7
31931: IFFALSE 31961
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31933: LD_ADDR_VAR 0 10
31937: PUSH
31938: LD_VAR 0 10
31942: PUSH
31943: LD_VAR 0 7
31947: PPUSH
31948: LD_INT 3
31950: PPUSH
31951: CALL_OW 259
31955: PUSH
31956: LD_INT 3
31958: MUL
31959: MUL
31960: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31961: LD_VAR 0 6
31965: PPUSH
31966: CALL_OW 264
31970: PUSH
31971: LD_INT 5
31973: PUSH
31974: LD_INT 6
31976: PUSH
31977: LD_INT 46
31979: PUSH
31980: LD_INT 44
31982: PUSH
31983: LD_INT 47
31985: PUSH
31986: LD_INT 45
31988: PUSH
31989: LD_INT 28
31991: PUSH
31992: LD_INT 7
31994: PUSH
31995: LD_INT 27
31997: PUSH
31998: LD_INT 29
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: IN
32013: PUSH
32014: LD_VAR 0 1
32018: PPUSH
32019: LD_INT 52
32021: PPUSH
32022: CALL_OW 321
32026: PUSH
32027: LD_INT 2
32029: EQUAL
32030: AND
32031: IFFALSE 32048
// bpoints := bpoints * 1.2 ;
32033: LD_ADDR_VAR 0 10
32037: PUSH
32038: LD_VAR 0 10
32042: PUSH
32043: LD_REAL  1.20000000000000E+0000
32046: MUL
32047: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32048: LD_VAR 0 6
32052: PPUSH
32053: CALL_OW 264
32057: PUSH
32058: LD_INT 6
32060: PUSH
32061: LD_INT 46
32063: PUSH
32064: LD_INT 47
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: LIST
32071: IN
32072: IFFALSE 32089
// bpoints := bpoints * 1.2 ;
32074: LD_ADDR_VAR 0 10
32078: PUSH
32079: LD_VAR 0 10
32083: PUSH
32084: LD_REAL  1.20000000000000E+0000
32087: MUL
32088: ST_TO_ADDR
// end ; unit_building :
32089: GO 32103
32091: LD_INT 3
32093: DOUBLE
32094: EQUAL
32095: IFTRUE 32099
32097: GO 32102
32099: POP
// ; end ;
32100: GO 32103
32102: POP
// for j = 1 to 3 do
32103: LD_ADDR_VAR 0 7
32107: PUSH
32108: DOUBLE
32109: LD_INT 1
32111: DEC
32112: ST_TO_ADDR
32113: LD_INT 3
32115: PUSH
32116: FOR_TO
32117: IFFALSE 32170
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32119: LD_ADDR_VAR 0 5
32123: PUSH
32124: LD_VAR 0 5
32128: PPUSH
32129: LD_VAR 0 7
32133: PPUSH
32134: LD_VAR 0 5
32138: PUSH
32139: LD_VAR 0 7
32143: ARRAY
32144: PUSH
32145: LD_VAR 0 9
32149: PUSH
32150: LD_VAR 0 7
32154: ARRAY
32155: PUSH
32156: LD_VAR 0 10
32160: MUL
32161: PLUS
32162: PPUSH
32163: CALL_OW 1
32167: ST_TO_ADDR
32168: GO 32116
32170: POP
32171: POP
// end ;
32172: GO 30649
32174: POP
32175: POP
// result := Replace ( result , 4 , tmp ) ;
32176: LD_ADDR_VAR 0 5
32180: PUSH
32181: LD_VAR 0 5
32185: PPUSH
32186: LD_INT 4
32188: PPUSH
32189: LD_VAR 0 8
32193: PPUSH
32194: CALL_OW 1
32198: ST_TO_ADDR
// end ;
32199: LD_VAR 0 5
32203: RET
// export function DangerAtRange ( unit , range ) ; begin
32204: LD_INT 0
32206: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32207: LD_ADDR_VAR 0 3
32211: PUSH
32212: LD_VAR 0 1
32216: PPUSH
32217: CALL_OW 255
32221: PPUSH
32222: LD_VAR 0 1
32226: PPUSH
32227: CALL_OW 250
32231: PPUSH
32232: LD_VAR 0 1
32236: PPUSH
32237: CALL_OW 251
32241: PPUSH
32242: LD_VAR 0 2
32246: PPUSH
32247: CALL 30501 0 4
32251: ST_TO_ADDR
// end ;
32252: LD_VAR 0 3
32256: RET
// export function DangerInArea ( side , area ) ; begin
32257: LD_INT 0
32259: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32260: LD_ADDR_VAR 0 3
32264: PUSH
32265: LD_VAR 0 2
32269: PPUSH
32270: LD_INT 81
32272: PUSH
32273: LD_VAR 0 1
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PPUSH
32282: CALL_OW 70
32286: ST_TO_ADDR
// end ;
32287: LD_VAR 0 3
32291: RET
// export function IsExtension ( b ) ; begin
32292: LD_INT 0
32294: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32295: LD_ADDR_VAR 0 2
32299: PUSH
32300: LD_VAR 0 1
32304: PUSH
32305: LD_INT 23
32307: PUSH
32308: LD_INT 20
32310: PUSH
32311: LD_INT 22
32313: PUSH
32314: LD_INT 17
32316: PUSH
32317: LD_INT 24
32319: PUSH
32320: LD_INT 21
32322: PUSH
32323: LD_INT 19
32325: PUSH
32326: LD_INT 16
32328: PUSH
32329: LD_INT 25
32331: PUSH
32332: LD_INT 18
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: IN
32347: ST_TO_ADDR
// end ;
32348: LD_VAR 0 2
32352: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32353: LD_INT 0
32355: PPUSH
32356: PPUSH
32357: PPUSH
// result := [ ] ;
32358: LD_ADDR_VAR 0 4
32362: PUSH
32363: EMPTY
32364: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32365: LD_ADDR_VAR 0 5
32369: PUSH
32370: LD_VAR 0 2
32374: PPUSH
32375: LD_INT 21
32377: PUSH
32378: LD_INT 3
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PPUSH
32385: CALL_OW 70
32389: ST_TO_ADDR
// if not tmp then
32390: LD_VAR 0 5
32394: NOT
32395: IFFALSE 32399
// exit ;
32397: GO 32463
// if checkLink then
32399: LD_VAR 0 3
32403: IFFALSE 32453
// begin for i in tmp do
32405: LD_ADDR_VAR 0 6
32409: PUSH
32410: LD_VAR 0 5
32414: PUSH
32415: FOR_IN
32416: IFFALSE 32451
// if GetBase ( i ) <> base then
32418: LD_VAR 0 6
32422: PPUSH
32423: CALL_OW 274
32427: PUSH
32428: LD_VAR 0 1
32432: NONEQUAL
32433: IFFALSE 32449
// ComLinkToBase ( base , i ) ;
32435: LD_VAR 0 1
32439: PPUSH
32440: LD_VAR 0 6
32444: PPUSH
32445: CALL_OW 169
32449: GO 32415
32451: POP
32452: POP
// end ; result := tmp ;
32453: LD_ADDR_VAR 0 4
32457: PUSH
32458: LD_VAR 0 5
32462: ST_TO_ADDR
// end ;
32463: LD_VAR 0 4
32467: RET
// export function ComComplete ( units , b ) ; var i ; begin
32468: LD_INT 0
32470: PPUSH
32471: PPUSH
// if not units then
32472: LD_VAR 0 1
32476: NOT
32477: IFFALSE 32481
// exit ;
32479: GO 32571
// for i in units do
32481: LD_ADDR_VAR 0 4
32485: PUSH
32486: LD_VAR 0 1
32490: PUSH
32491: FOR_IN
32492: IFFALSE 32569
// if BuildingStatus ( b ) = bs_build then
32494: LD_VAR 0 2
32498: PPUSH
32499: CALL_OW 461
32503: PUSH
32504: LD_INT 1
32506: EQUAL
32507: IFFALSE 32567
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32509: LD_VAR 0 4
32513: PPUSH
32514: LD_STRING h
32516: PUSH
32517: LD_VAR 0 2
32521: PPUSH
32522: CALL_OW 250
32526: PUSH
32527: LD_VAR 0 2
32531: PPUSH
32532: CALL_OW 251
32536: PUSH
32537: LD_VAR 0 2
32541: PUSH
32542: LD_INT 0
32544: PUSH
32545: LD_INT 0
32547: PUSH
32548: LD_INT 0
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: PUSH
32560: EMPTY
32561: LIST
32562: PPUSH
32563: CALL_OW 446
32567: GO 32491
32569: POP
32570: POP
// end ;
32571: LD_VAR 0 3
32575: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32576: LD_INT 0
32578: PPUSH
32579: PPUSH
32580: PPUSH
32581: PPUSH
32582: PPUSH
32583: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32584: LD_VAR 0 1
32588: NOT
32589: PUSH
32590: LD_VAR 0 1
32594: PPUSH
32595: CALL_OW 263
32599: PUSH
32600: LD_INT 2
32602: NONEQUAL
32603: OR
32604: IFFALSE 32608
// exit ;
32606: GO 32924
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32608: LD_ADDR_VAR 0 6
32612: PUSH
32613: LD_INT 22
32615: PUSH
32616: LD_VAR 0 1
32620: PPUSH
32621: CALL_OW 255
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 2
32632: PUSH
32633: LD_INT 30
32635: PUSH
32636: LD_INT 36
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 34
32645: PUSH
32646: LD_INT 31
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: LIST
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PPUSH
32662: CALL_OW 69
32666: ST_TO_ADDR
// if not tmp then
32667: LD_VAR 0 6
32671: NOT
32672: IFFALSE 32676
// exit ;
32674: GO 32924
// result := [ ] ;
32676: LD_ADDR_VAR 0 2
32680: PUSH
32681: EMPTY
32682: ST_TO_ADDR
// for i in tmp do
32683: LD_ADDR_VAR 0 3
32687: PUSH
32688: LD_VAR 0 6
32692: PUSH
32693: FOR_IN
32694: IFFALSE 32765
// begin t := UnitsInside ( i ) ;
32696: LD_ADDR_VAR 0 4
32700: PUSH
32701: LD_VAR 0 3
32705: PPUSH
32706: CALL_OW 313
32710: ST_TO_ADDR
// if t then
32711: LD_VAR 0 4
32715: IFFALSE 32763
// for j in t do
32717: LD_ADDR_VAR 0 7
32721: PUSH
32722: LD_VAR 0 4
32726: PUSH
32727: FOR_IN
32728: IFFALSE 32761
// result := Replace ( result , result + 1 , j ) ;
32730: LD_ADDR_VAR 0 2
32734: PUSH
32735: LD_VAR 0 2
32739: PPUSH
32740: LD_VAR 0 2
32744: PUSH
32745: LD_INT 1
32747: PLUS
32748: PPUSH
32749: LD_VAR 0 7
32753: PPUSH
32754: CALL_OW 1
32758: ST_TO_ADDR
32759: GO 32727
32761: POP
32762: POP
// end ;
32763: GO 32693
32765: POP
32766: POP
// if not result then
32767: LD_VAR 0 2
32771: NOT
32772: IFFALSE 32776
// exit ;
32774: GO 32924
// mech := result [ 1 ] ;
32776: LD_ADDR_VAR 0 5
32780: PUSH
32781: LD_VAR 0 2
32785: PUSH
32786: LD_INT 1
32788: ARRAY
32789: ST_TO_ADDR
// if result > 1 then
32790: LD_VAR 0 2
32794: PUSH
32795: LD_INT 1
32797: GREATER
32798: IFFALSE 32910
// begin for i = 2 to result do
32800: LD_ADDR_VAR 0 3
32804: PUSH
32805: DOUBLE
32806: LD_INT 2
32808: DEC
32809: ST_TO_ADDR
32810: LD_VAR 0 2
32814: PUSH
32815: FOR_TO
32816: IFFALSE 32908
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32818: LD_ADDR_VAR 0 4
32822: PUSH
32823: LD_VAR 0 2
32827: PUSH
32828: LD_VAR 0 3
32832: ARRAY
32833: PPUSH
32834: LD_INT 3
32836: PPUSH
32837: CALL_OW 259
32841: PUSH
32842: LD_VAR 0 2
32846: PUSH
32847: LD_VAR 0 3
32851: ARRAY
32852: PPUSH
32853: CALL_OW 432
32857: MINUS
32858: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32859: LD_VAR 0 4
32863: PUSH
32864: LD_VAR 0 5
32868: PPUSH
32869: LD_INT 3
32871: PPUSH
32872: CALL_OW 259
32876: PUSH
32877: LD_VAR 0 5
32881: PPUSH
32882: CALL_OW 432
32886: MINUS
32887: GREATEREQUAL
32888: IFFALSE 32906
// mech := result [ i ] ;
32890: LD_ADDR_VAR 0 5
32894: PUSH
32895: LD_VAR 0 2
32899: PUSH
32900: LD_VAR 0 3
32904: ARRAY
32905: ST_TO_ADDR
// end ;
32906: GO 32815
32908: POP
32909: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32910: LD_VAR 0 1
32914: PPUSH
32915: LD_VAR 0 5
32919: PPUSH
32920: CALL_OW 135
// end ;
32924: LD_VAR 0 2
32928: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32929: LD_INT 0
32931: PPUSH
32932: PPUSH
32933: PPUSH
32934: PPUSH
32935: PPUSH
32936: PPUSH
32937: PPUSH
32938: PPUSH
32939: PPUSH
32940: PPUSH
32941: PPUSH
32942: PPUSH
32943: PPUSH
// result := [ ] ;
32944: LD_ADDR_VAR 0 7
32948: PUSH
32949: EMPTY
32950: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32951: LD_VAR 0 1
32955: PPUSH
32956: CALL_OW 266
32960: PUSH
32961: LD_INT 0
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: IN
32971: NOT
32972: IFFALSE 32976
// exit ;
32974: GO 34610
// if name then
32976: LD_VAR 0 3
32980: IFFALSE 32996
// SetBName ( base_dep , name ) ;
32982: LD_VAR 0 1
32986: PPUSH
32987: LD_VAR 0 3
32991: PPUSH
32992: CALL_OW 500
// base := GetBase ( base_dep ) ;
32996: LD_ADDR_VAR 0 15
33000: PUSH
33001: LD_VAR 0 1
33005: PPUSH
33006: CALL_OW 274
33010: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33011: LD_ADDR_VAR 0 16
33015: PUSH
33016: LD_VAR 0 1
33020: PPUSH
33021: CALL_OW 255
33025: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33026: LD_ADDR_VAR 0 17
33030: PUSH
33031: LD_VAR 0 1
33035: PPUSH
33036: CALL_OW 248
33040: ST_TO_ADDR
// if sources then
33041: LD_VAR 0 5
33045: IFFALSE 33092
// for i = 1 to 3 do
33047: LD_ADDR_VAR 0 8
33051: PUSH
33052: DOUBLE
33053: LD_INT 1
33055: DEC
33056: ST_TO_ADDR
33057: LD_INT 3
33059: PUSH
33060: FOR_TO
33061: IFFALSE 33090
// AddResourceType ( base , i , sources [ i ] ) ;
33063: LD_VAR 0 15
33067: PPUSH
33068: LD_VAR 0 8
33072: PPUSH
33073: LD_VAR 0 5
33077: PUSH
33078: LD_VAR 0 8
33082: ARRAY
33083: PPUSH
33084: CALL_OW 276
33088: GO 33060
33090: POP
33091: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33092: LD_ADDR_VAR 0 18
33096: PUSH
33097: LD_VAR 0 15
33101: PPUSH
33102: LD_VAR 0 2
33106: PPUSH
33107: LD_INT 1
33109: PPUSH
33110: CALL 32353 0 3
33114: ST_TO_ADDR
// InitHc ;
33115: CALL_OW 19
// InitUc ;
33119: CALL_OW 18
// uc_side := side ;
33123: LD_ADDR_OWVAR 20
33127: PUSH
33128: LD_VAR 0 16
33132: ST_TO_ADDR
// uc_nation := nation ;
33133: LD_ADDR_OWVAR 21
33137: PUSH
33138: LD_VAR 0 17
33142: ST_TO_ADDR
// if buildings then
33143: LD_VAR 0 18
33147: IFFALSE 34469
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33149: LD_ADDR_VAR 0 19
33153: PUSH
33154: LD_VAR 0 18
33158: PPUSH
33159: LD_INT 2
33161: PUSH
33162: LD_INT 30
33164: PUSH
33165: LD_INT 29
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 30
33174: PUSH
33175: LD_INT 30
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: LIST
33186: PPUSH
33187: CALL_OW 72
33191: ST_TO_ADDR
// if tmp then
33192: LD_VAR 0 19
33196: IFFALSE 33244
// for i in tmp do
33198: LD_ADDR_VAR 0 8
33202: PUSH
33203: LD_VAR 0 19
33207: PUSH
33208: FOR_IN
33209: IFFALSE 33242
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33211: LD_VAR 0 8
33215: PPUSH
33216: CALL_OW 250
33220: PPUSH
33221: LD_VAR 0 8
33225: PPUSH
33226: CALL_OW 251
33230: PPUSH
33231: LD_VAR 0 16
33235: PPUSH
33236: CALL_OW 441
33240: GO 33208
33242: POP
33243: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33244: LD_VAR 0 18
33248: PPUSH
33249: LD_INT 2
33251: PUSH
33252: LD_INT 30
33254: PUSH
33255: LD_INT 32
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 30
33264: PUSH
33265: LD_INT 33
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: LIST
33276: PPUSH
33277: CALL_OW 72
33281: IFFALSE 33369
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33283: LD_ADDR_VAR 0 8
33287: PUSH
33288: LD_VAR 0 18
33292: PPUSH
33293: LD_INT 2
33295: PUSH
33296: LD_INT 30
33298: PUSH
33299: LD_INT 32
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 30
33308: PUSH
33309: LD_INT 33
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: LIST
33320: PPUSH
33321: CALL_OW 72
33325: PUSH
33326: FOR_IN
33327: IFFALSE 33367
// begin if not GetBWeapon ( i ) then
33329: LD_VAR 0 8
33333: PPUSH
33334: CALL_OW 269
33338: NOT
33339: IFFALSE 33365
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33341: LD_VAR 0 8
33345: PPUSH
33346: LD_VAR 0 8
33350: PPUSH
33351: LD_VAR 0 2
33355: PPUSH
33356: CALL 34615 0 2
33360: PPUSH
33361: CALL_OW 431
// end ;
33365: GO 33326
33367: POP
33368: POP
// end ; for i = 1 to personel do
33369: LD_ADDR_VAR 0 8
33373: PUSH
33374: DOUBLE
33375: LD_INT 1
33377: DEC
33378: ST_TO_ADDR
33379: LD_VAR 0 6
33383: PUSH
33384: FOR_TO
33385: IFFALSE 34449
// begin if i > 4 then
33387: LD_VAR 0 8
33391: PUSH
33392: LD_INT 4
33394: GREATER
33395: IFFALSE 33399
// break ;
33397: GO 34449
// case i of 1 :
33399: LD_VAR 0 8
33403: PUSH
33404: LD_INT 1
33406: DOUBLE
33407: EQUAL
33408: IFTRUE 33412
33410: GO 33492
33412: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33413: LD_ADDR_VAR 0 12
33417: PUSH
33418: LD_VAR 0 18
33422: PPUSH
33423: LD_INT 22
33425: PUSH
33426: LD_VAR 0 16
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 58
33437: PUSH
33438: EMPTY
33439: LIST
33440: PUSH
33441: LD_INT 2
33443: PUSH
33444: LD_INT 30
33446: PUSH
33447: LD_INT 32
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 30
33456: PUSH
33457: LD_INT 4
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 30
33466: PUSH
33467: LD_INT 5
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: LIST
33484: PPUSH
33485: CALL_OW 72
33489: ST_TO_ADDR
33490: GO 33714
33492: LD_INT 2
33494: DOUBLE
33495: EQUAL
33496: IFTRUE 33500
33498: GO 33562
33500: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33501: LD_ADDR_VAR 0 12
33505: PUSH
33506: LD_VAR 0 18
33510: PPUSH
33511: LD_INT 22
33513: PUSH
33514: LD_VAR 0 16
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 2
33525: PUSH
33526: LD_INT 30
33528: PUSH
33529: LD_INT 0
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 30
33538: PUSH
33539: LD_INT 1
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: LIST
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PPUSH
33555: CALL_OW 72
33559: ST_TO_ADDR
33560: GO 33714
33562: LD_INT 3
33564: DOUBLE
33565: EQUAL
33566: IFTRUE 33570
33568: GO 33632
33570: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33571: LD_ADDR_VAR 0 12
33575: PUSH
33576: LD_VAR 0 18
33580: PPUSH
33581: LD_INT 22
33583: PUSH
33584: LD_VAR 0 16
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 2
33595: PUSH
33596: LD_INT 30
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 30
33608: PUSH
33609: LD_INT 3
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: LIST
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PPUSH
33625: CALL_OW 72
33629: ST_TO_ADDR
33630: GO 33714
33632: LD_INT 4
33634: DOUBLE
33635: EQUAL
33636: IFTRUE 33640
33638: GO 33713
33640: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33641: LD_ADDR_VAR 0 12
33645: PUSH
33646: LD_VAR 0 18
33650: PPUSH
33651: LD_INT 22
33653: PUSH
33654: LD_VAR 0 16
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 2
33665: PUSH
33666: LD_INT 30
33668: PUSH
33669: LD_INT 6
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 30
33678: PUSH
33679: LD_INT 7
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 30
33688: PUSH
33689: LD_INT 8
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PPUSH
33706: CALL_OW 72
33710: ST_TO_ADDR
33711: GO 33714
33713: POP
// if i = 1 then
33714: LD_VAR 0 8
33718: PUSH
33719: LD_INT 1
33721: EQUAL
33722: IFFALSE 33833
// begin tmp := [ ] ;
33724: LD_ADDR_VAR 0 19
33728: PUSH
33729: EMPTY
33730: ST_TO_ADDR
// for j in f do
33731: LD_ADDR_VAR 0 9
33735: PUSH
33736: LD_VAR 0 12
33740: PUSH
33741: FOR_IN
33742: IFFALSE 33815
// if GetBType ( j ) = b_bunker then
33744: LD_VAR 0 9
33748: PPUSH
33749: CALL_OW 266
33753: PUSH
33754: LD_INT 32
33756: EQUAL
33757: IFFALSE 33784
// tmp := Insert ( tmp , 1 , j ) else
33759: LD_ADDR_VAR 0 19
33763: PUSH
33764: LD_VAR 0 19
33768: PPUSH
33769: LD_INT 1
33771: PPUSH
33772: LD_VAR 0 9
33776: PPUSH
33777: CALL_OW 2
33781: ST_TO_ADDR
33782: GO 33813
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33784: LD_ADDR_VAR 0 19
33788: PUSH
33789: LD_VAR 0 19
33793: PPUSH
33794: LD_VAR 0 19
33798: PUSH
33799: LD_INT 1
33801: PLUS
33802: PPUSH
33803: LD_VAR 0 9
33807: PPUSH
33808: CALL_OW 2
33812: ST_TO_ADDR
33813: GO 33741
33815: POP
33816: POP
// if tmp then
33817: LD_VAR 0 19
33821: IFFALSE 33833
// f := tmp ;
33823: LD_ADDR_VAR 0 12
33827: PUSH
33828: LD_VAR 0 19
33832: ST_TO_ADDR
// end ; x := personel [ i ] ;
33833: LD_ADDR_VAR 0 13
33837: PUSH
33838: LD_VAR 0 6
33842: PUSH
33843: LD_VAR 0 8
33847: ARRAY
33848: ST_TO_ADDR
// if x = - 1 then
33849: LD_VAR 0 13
33853: PUSH
33854: LD_INT 1
33856: NEG
33857: EQUAL
33858: IFFALSE 34067
// begin for j in f do
33860: LD_ADDR_VAR 0 9
33864: PUSH
33865: LD_VAR 0 12
33869: PUSH
33870: FOR_IN
33871: IFFALSE 34063
// repeat InitHc ;
33873: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33877: LD_VAR 0 9
33881: PPUSH
33882: CALL_OW 266
33886: PUSH
33887: LD_INT 5
33889: EQUAL
33890: IFFALSE 33960
// begin if UnitsInside ( j ) < 3 then
33892: LD_VAR 0 9
33896: PPUSH
33897: CALL_OW 313
33901: PUSH
33902: LD_INT 3
33904: LESS
33905: IFFALSE 33941
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33907: LD_INT 0
33909: PPUSH
33910: LD_INT 5
33912: PUSH
33913: LD_INT 8
33915: PUSH
33916: LD_INT 9
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: LIST
33923: PUSH
33924: LD_VAR 0 17
33928: ARRAY
33929: PPUSH
33930: LD_VAR 0 4
33934: PPUSH
33935: CALL_OW 380
33939: GO 33958
// PrepareHuman ( false , i , skill ) ;
33941: LD_INT 0
33943: PPUSH
33944: LD_VAR 0 8
33948: PPUSH
33949: LD_VAR 0 4
33953: PPUSH
33954: CALL_OW 380
// end else
33958: GO 33977
// PrepareHuman ( false , i , skill ) ;
33960: LD_INT 0
33962: PPUSH
33963: LD_VAR 0 8
33967: PPUSH
33968: LD_VAR 0 4
33972: PPUSH
33973: CALL_OW 380
// un := CreateHuman ;
33977: LD_ADDR_VAR 0 14
33981: PUSH
33982: CALL_OW 44
33986: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33987: LD_ADDR_VAR 0 7
33991: PUSH
33992: LD_VAR 0 7
33996: PPUSH
33997: LD_INT 1
33999: PPUSH
34000: LD_VAR 0 14
34004: PPUSH
34005: CALL_OW 2
34009: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34010: LD_VAR 0 14
34014: PPUSH
34015: LD_VAR 0 9
34019: PPUSH
34020: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34024: LD_VAR 0 9
34028: PPUSH
34029: CALL_OW 313
34033: PUSH
34034: LD_INT 6
34036: EQUAL
34037: PUSH
34038: LD_VAR 0 9
34042: PPUSH
34043: CALL_OW 266
34047: PUSH
34048: LD_INT 32
34050: PUSH
34051: LD_INT 31
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: IN
34058: OR
34059: IFFALSE 33873
34061: GO 33870
34063: POP
34064: POP
// end else
34065: GO 34447
// for j = 1 to x do
34067: LD_ADDR_VAR 0 9
34071: PUSH
34072: DOUBLE
34073: LD_INT 1
34075: DEC
34076: ST_TO_ADDR
34077: LD_VAR 0 13
34081: PUSH
34082: FOR_TO
34083: IFFALSE 34445
// begin InitHc ;
34085: CALL_OW 19
// if not f then
34089: LD_VAR 0 12
34093: NOT
34094: IFFALSE 34183
// begin PrepareHuman ( false , i , skill ) ;
34096: LD_INT 0
34098: PPUSH
34099: LD_VAR 0 8
34103: PPUSH
34104: LD_VAR 0 4
34108: PPUSH
34109: CALL_OW 380
// un := CreateHuman ;
34113: LD_ADDR_VAR 0 14
34117: PUSH
34118: CALL_OW 44
34122: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34123: LD_ADDR_VAR 0 7
34127: PUSH
34128: LD_VAR 0 7
34132: PPUSH
34133: LD_INT 1
34135: PPUSH
34136: LD_VAR 0 14
34140: PPUSH
34141: CALL_OW 2
34145: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34146: LD_VAR 0 14
34150: PPUSH
34151: LD_VAR 0 1
34155: PPUSH
34156: CALL_OW 250
34160: PPUSH
34161: LD_VAR 0 1
34165: PPUSH
34166: CALL_OW 251
34170: PPUSH
34171: LD_INT 10
34173: PPUSH
34174: LD_INT 0
34176: PPUSH
34177: CALL_OW 50
// continue ;
34181: GO 34082
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34183: LD_VAR 0 12
34187: PUSH
34188: LD_INT 1
34190: ARRAY
34191: PPUSH
34192: CALL_OW 313
34196: PUSH
34197: LD_VAR 0 12
34201: PUSH
34202: LD_INT 1
34204: ARRAY
34205: PPUSH
34206: CALL_OW 266
34210: PUSH
34211: LD_INT 32
34213: PUSH
34214: LD_INT 31
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: IN
34221: AND
34222: PUSH
34223: LD_VAR 0 12
34227: PUSH
34228: LD_INT 1
34230: ARRAY
34231: PPUSH
34232: CALL_OW 313
34236: PUSH
34237: LD_INT 6
34239: EQUAL
34240: OR
34241: IFFALSE 34261
// f := Delete ( f , 1 ) ;
34243: LD_ADDR_VAR 0 12
34247: PUSH
34248: LD_VAR 0 12
34252: PPUSH
34253: LD_INT 1
34255: PPUSH
34256: CALL_OW 3
34260: ST_TO_ADDR
// if not f then
34261: LD_VAR 0 12
34265: NOT
34266: IFFALSE 34284
// begin x := x + 2 ;
34268: LD_ADDR_VAR 0 13
34272: PUSH
34273: LD_VAR 0 13
34277: PUSH
34278: LD_INT 2
34280: PLUS
34281: ST_TO_ADDR
// continue ;
34282: GO 34082
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34284: LD_VAR 0 12
34288: PUSH
34289: LD_INT 1
34291: ARRAY
34292: PPUSH
34293: CALL_OW 266
34297: PUSH
34298: LD_INT 5
34300: EQUAL
34301: IFFALSE 34375
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34303: LD_VAR 0 12
34307: PUSH
34308: LD_INT 1
34310: ARRAY
34311: PPUSH
34312: CALL_OW 313
34316: PUSH
34317: LD_INT 3
34319: LESS
34320: IFFALSE 34356
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34322: LD_INT 0
34324: PPUSH
34325: LD_INT 5
34327: PUSH
34328: LD_INT 8
34330: PUSH
34331: LD_INT 9
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: LIST
34338: PUSH
34339: LD_VAR 0 17
34343: ARRAY
34344: PPUSH
34345: LD_VAR 0 4
34349: PPUSH
34350: CALL_OW 380
34354: GO 34373
// PrepareHuman ( false , i , skill ) ;
34356: LD_INT 0
34358: PPUSH
34359: LD_VAR 0 8
34363: PPUSH
34364: LD_VAR 0 4
34368: PPUSH
34369: CALL_OW 380
// end else
34373: GO 34392
// PrepareHuman ( false , i , skill ) ;
34375: LD_INT 0
34377: PPUSH
34378: LD_VAR 0 8
34382: PPUSH
34383: LD_VAR 0 4
34387: PPUSH
34388: CALL_OW 380
// un := CreateHuman ;
34392: LD_ADDR_VAR 0 14
34396: PUSH
34397: CALL_OW 44
34401: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34402: LD_ADDR_VAR 0 7
34406: PUSH
34407: LD_VAR 0 7
34411: PPUSH
34412: LD_INT 1
34414: PPUSH
34415: LD_VAR 0 14
34419: PPUSH
34420: CALL_OW 2
34424: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34425: LD_VAR 0 14
34429: PPUSH
34430: LD_VAR 0 12
34434: PUSH
34435: LD_INT 1
34437: ARRAY
34438: PPUSH
34439: CALL_OW 52
// end ;
34443: GO 34082
34445: POP
34446: POP
// end ;
34447: GO 33384
34449: POP
34450: POP
// result := result ^ buildings ;
34451: LD_ADDR_VAR 0 7
34455: PUSH
34456: LD_VAR 0 7
34460: PUSH
34461: LD_VAR 0 18
34465: ADD
34466: ST_TO_ADDR
// end else
34467: GO 34610
// begin for i = 1 to personel do
34469: LD_ADDR_VAR 0 8
34473: PUSH
34474: DOUBLE
34475: LD_INT 1
34477: DEC
34478: ST_TO_ADDR
34479: LD_VAR 0 6
34483: PUSH
34484: FOR_TO
34485: IFFALSE 34608
// begin if i > 4 then
34487: LD_VAR 0 8
34491: PUSH
34492: LD_INT 4
34494: GREATER
34495: IFFALSE 34499
// break ;
34497: GO 34608
// x := personel [ i ] ;
34499: LD_ADDR_VAR 0 13
34503: PUSH
34504: LD_VAR 0 6
34508: PUSH
34509: LD_VAR 0 8
34513: ARRAY
34514: ST_TO_ADDR
// if x = - 1 then
34515: LD_VAR 0 13
34519: PUSH
34520: LD_INT 1
34522: NEG
34523: EQUAL
34524: IFFALSE 34528
// continue ;
34526: GO 34484
// PrepareHuman ( false , i , skill ) ;
34528: LD_INT 0
34530: PPUSH
34531: LD_VAR 0 8
34535: PPUSH
34536: LD_VAR 0 4
34540: PPUSH
34541: CALL_OW 380
// un := CreateHuman ;
34545: LD_ADDR_VAR 0 14
34549: PUSH
34550: CALL_OW 44
34554: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34555: LD_VAR 0 14
34559: PPUSH
34560: LD_VAR 0 1
34564: PPUSH
34565: CALL_OW 250
34569: PPUSH
34570: LD_VAR 0 1
34574: PPUSH
34575: CALL_OW 251
34579: PPUSH
34580: LD_INT 10
34582: PPUSH
34583: LD_INT 0
34585: PPUSH
34586: CALL_OW 50
// result := result ^ un ;
34590: LD_ADDR_VAR 0 7
34594: PUSH
34595: LD_VAR 0 7
34599: PUSH
34600: LD_VAR 0 14
34604: ADD
34605: ST_TO_ADDR
// end ;
34606: GO 34484
34608: POP
34609: POP
// end ; end ;
34610: LD_VAR 0 7
34614: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34615: LD_INT 0
34617: PPUSH
34618: PPUSH
34619: PPUSH
34620: PPUSH
34621: PPUSH
34622: PPUSH
34623: PPUSH
34624: PPUSH
34625: PPUSH
34626: PPUSH
34627: PPUSH
34628: PPUSH
34629: PPUSH
34630: PPUSH
34631: PPUSH
34632: PPUSH
// result := false ;
34633: LD_ADDR_VAR 0 3
34637: PUSH
34638: LD_INT 0
34640: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34641: LD_VAR 0 1
34645: NOT
34646: PUSH
34647: LD_VAR 0 1
34651: PPUSH
34652: CALL_OW 266
34656: PUSH
34657: LD_INT 32
34659: PUSH
34660: LD_INT 33
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: IN
34667: NOT
34668: OR
34669: IFFALSE 34673
// exit ;
34671: GO 35782
// nat := GetNation ( tower ) ;
34673: LD_ADDR_VAR 0 12
34677: PUSH
34678: LD_VAR 0 1
34682: PPUSH
34683: CALL_OW 248
34687: ST_TO_ADDR
// side := GetSide ( tower ) ;
34688: LD_ADDR_VAR 0 16
34692: PUSH
34693: LD_VAR 0 1
34697: PPUSH
34698: CALL_OW 255
34702: ST_TO_ADDR
// x := GetX ( tower ) ;
34703: LD_ADDR_VAR 0 10
34707: PUSH
34708: LD_VAR 0 1
34712: PPUSH
34713: CALL_OW 250
34717: ST_TO_ADDR
// y := GetY ( tower ) ;
34718: LD_ADDR_VAR 0 11
34722: PUSH
34723: LD_VAR 0 1
34727: PPUSH
34728: CALL_OW 251
34732: ST_TO_ADDR
// if not x or not y then
34733: LD_VAR 0 10
34737: NOT
34738: PUSH
34739: LD_VAR 0 11
34743: NOT
34744: OR
34745: IFFALSE 34749
// exit ;
34747: GO 35782
// weapon := 0 ;
34749: LD_ADDR_VAR 0 18
34753: PUSH
34754: LD_INT 0
34756: ST_TO_ADDR
// fac_list := [ ] ;
34757: LD_ADDR_VAR 0 17
34761: PUSH
34762: EMPTY
34763: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34764: LD_ADDR_VAR 0 6
34768: PUSH
34769: LD_VAR 0 1
34773: PPUSH
34774: CALL_OW 274
34778: PPUSH
34779: LD_VAR 0 2
34783: PPUSH
34784: LD_INT 0
34786: PPUSH
34787: CALL 32353 0 3
34791: PPUSH
34792: LD_INT 30
34794: PUSH
34795: LD_INT 3
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PPUSH
34802: CALL_OW 72
34806: ST_TO_ADDR
// if not factories then
34807: LD_VAR 0 6
34811: NOT
34812: IFFALSE 34816
// exit ;
34814: GO 35782
// for i in factories do
34816: LD_ADDR_VAR 0 8
34820: PUSH
34821: LD_VAR 0 6
34825: PUSH
34826: FOR_IN
34827: IFFALSE 34852
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34829: LD_ADDR_VAR 0 17
34833: PUSH
34834: LD_VAR 0 17
34838: PUSH
34839: LD_VAR 0 8
34843: PPUSH
34844: CALL_OW 478
34848: UNION
34849: ST_TO_ADDR
34850: GO 34826
34852: POP
34853: POP
// if not fac_list then
34854: LD_VAR 0 17
34858: NOT
34859: IFFALSE 34863
// exit ;
34861: GO 35782
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34863: LD_ADDR_VAR 0 5
34867: PUSH
34868: LD_INT 4
34870: PUSH
34871: LD_INT 5
34873: PUSH
34874: LD_INT 9
34876: PUSH
34877: LD_INT 10
34879: PUSH
34880: LD_INT 6
34882: PUSH
34883: LD_INT 7
34885: PUSH
34886: LD_INT 11
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 27
34900: PUSH
34901: LD_INT 28
34903: PUSH
34904: LD_INT 26
34906: PUSH
34907: LD_INT 30
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 43
34918: PUSH
34919: LD_INT 44
34921: PUSH
34922: LD_INT 46
34924: PUSH
34925: LD_INT 45
34927: PUSH
34928: LD_INT 47
34930: PUSH
34931: LD_INT 49
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: LIST
34946: PUSH
34947: LD_VAR 0 12
34951: ARRAY
34952: ST_TO_ADDR
// list := list isect fac_list ;
34953: LD_ADDR_VAR 0 5
34957: PUSH
34958: LD_VAR 0 5
34962: PUSH
34963: LD_VAR 0 17
34967: ISECT
34968: ST_TO_ADDR
// if not list then
34969: LD_VAR 0 5
34973: NOT
34974: IFFALSE 34978
// exit ;
34976: GO 35782
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34978: LD_VAR 0 12
34982: PUSH
34983: LD_INT 3
34985: EQUAL
34986: PUSH
34987: LD_INT 49
34989: PUSH
34990: LD_VAR 0 5
34994: IN
34995: AND
34996: PUSH
34997: LD_INT 31
34999: PPUSH
35000: LD_VAR 0 16
35004: PPUSH
35005: CALL_OW 321
35009: PUSH
35010: LD_INT 2
35012: EQUAL
35013: AND
35014: IFFALSE 35074
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35016: LD_INT 22
35018: PUSH
35019: LD_VAR 0 16
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 35
35030: PUSH
35031: LD_INT 49
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 91
35040: PUSH
35041: LD_VAR 0 1
35045: PUSH
35046: LD_INT 10
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: LIST
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: LIST
35058: PPUSH
35059: CALL_OW 69
35063: NOT
35064: IFFALSE 35074
// weapon := ru_time_lapser ;
35066: LD_ADDR_VAR 0 18
35070: PUSH
35071: LD_INT 49
35073: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35074: LD_VAR 0 12
35078: PUSH
35079: LD_INT 1
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: IN
35089: PUSH
35090: LD_INT 11
35092: PUSH
35093: LD_VAR 0 5
35097: IN
35098: PUSH
35099: LD_INT 30
35101: PUSH
35102: LD_VAR 0 5
35106: IN
35107: OR
35108: AND
35109: PUSH
35110: LD_INT 6
35112: PPUSH
35113: LD_VAR 0 16
35117: PPUSH
35118: CALL_OW 321
35122: PUSH
35123: LD_INT 2
35125: EQUAL
35126: AND
35127: IFFALSE 35292
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35129: LD_INT 22
35131: PUSH
35132: LD_VAR 0 16
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 2
35143: PUSH
35144: LD_INT 35
35146: PUSH
35147: LD_INT 11
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 35
35156: PUSH
35157: LD_INT 30
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 91
35171: PUSH
35172: LD_VAR 0 1
35176: PUSH
35177: LD_INT 18
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: LIST
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: LIST
35189: PPUSH
35190: CALL_OW 69
35194: NOT
35195: PUSH
35196: LD_INT 22
35198: PUSH
35199: LD_VAR 0 16
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 2
35210: PUSH
35211: LD_INT 30
35213: PUSH
35214: LD_INT 32
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 30
35223: PUSH
35224: LD_INT 33
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 91
35238: PUSH
35239: LD_VAR 0 1
35243: PUSH
35244: LD_INT 12
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: LIST
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: LIST
35256: PUSH
35257: EMPTY
35258: LIST
35259: PPUSH
35260: CALL_OW 69
35264: PUSH
35265: LD_INT 2
35267: GREATER
35268: AND
35269: IFFALSE 35292
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35271: LD_ADDR_VAR 0 18
35275: PUSH
35276: LD_INT 11
35278: PUSH
35279: LD_INT 30
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_VAR 0 12
35290: ARRAY
35291: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35292: LD_VAR 0 18
35296: NOT
35297: PUSH
35298: LD_INT 40
35300: PPUSH
35301: LD_VAR 0 16
35305: PPUSH
35306: CALL_OW 321
35310: PUSH
35311: LD_INT 2
35313: EQUAL
35314: AND
35315: PUSH
35316: LD_INT 7
35318: PUSH
35319: LD_VAR 0 5
35323: IN
35324: PUSH
35325: LD_INT 28
35327: PUSH
35328: LD_VAR 0 5
35332: IN
35333: OR
35334: PUSH
35335: LD_INT 45
35337: PUSH
35338: LD_VAR 0 5
35342: IN
35343: OR
35344: AND
35345: IFFALSE 35599
// begin hex := GetHexInfo ( x , y ) ;
35347: LD_ADDR_VAR 0 4
35351: PUSH
35352: LD_VAR 0 10
35356: PPUSH
35357: LD_VAR 0 11
35361: PPUSH
35362: CALL_OW 546
35366: ST_TO_ADDR
// if hex [ 1 ] then
35367: LD_VAR 0 4
35371: PUSH
35372: LD_INT 1
35374: ARRAY
35375: IFFALSE 35379
// exit ;
35377: GO 35782
// height := hex [ 2 ] ;
35379: LD_ADDR_VAR 0 15
35383: PUSH
35384: LD_VAR 0 4
35388: PUSH
35389: LD_INT 2
35391: ARRAY
35392: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35393: LD_ADDR_VAR 0 14
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: LD_INT 2
35403: PUSH
35404: LD_INT 3
35406: PUSH
35407: LD_INT 5
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: ST_TO_ADDR
// for i in tmp do
35416: LD_ADDR_VAR 0 8
35420: PUSH
35421: LD_VAR 0 14
35425: PUSH
35426: FOR_IN
35427: IFFALSE 35597
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35429: LD_ADDR_VAR 0 9
35433: PUSH
35434: LD_VAR 0 10
35438: PPUSH
35439: LD_VAR 0 8
35443: PPUSH
35444: LD_INT 5
35446: PPUSH
35447: CALL_OW 272
35451: PUSH
35452: LD_VAR 0 11
35456: PPUSH
35457: LD_VAR 0 8
35461: PPUSH
35462: LD_INT 5
35464: PPUSH
35465: CALL_OW 273
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35474: LD_VAR 0 9
35478: PUSH
35479: LD_INT 1
35481: ARRAY
35482: PPUSH
35483: LD_VAR 0 9
35487: PUSH
35488: LD_INT 2
35490: ARRAY
35491: PPUSH
35492: CALL_OW 488
35496: IFFALSE 35595
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35498: LD_ADDR_VAR 0 4
35502: PUSH
35503: LD_VAR 0 9
35507: PUSH
35508: LD_INT 1
35510: ARRAY
35511: PPUSH
35512: LD_VAR 0 9
35516: PUSH
35517: LD_INT 2
35519: ARRAY
35520: PPUSH
35521: CALL_OW 546
35525: ST_TO_ADDR
// if hex [ 1 ] then
35526: LD_VAR 0 4
35530: PUSH
35531: LD_INT 1
35533: ARRAY
35534: IFFALSE 35538
// continue ;
35536: GO 35426
// h := hex [ 2 ] ;
35538: LD_ADDR_VAR 0 13
35542: PUSH
35543: LD_VAR 0 4
35547: PUSH
35548: LD_INT 2
35550: ARRAY
35551: ST_TO_ADDR
// if h + 7 < height then
35552: LD_VAR 0 13
35556: PUSH
35557: LD_INT 7
35559: PLUS
35560: PUSH
35561: LD_VAR 0 15
35565: LESS
35566: IFFALSE 35595
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35568: LD_ADDR_VAR 0 18
35572: PUSH
35573: LD_INT 7
35575: PUSH
35576: LD_INT 28
35578: PUSH
35579: LD_INT 45
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: LIST
35586: PUSH
35587: LD_VAR 0 12
35591: ARRAY
35592: ST_TO_ADDR
// break ;
35593: GO 35597
// end ; end ; end ;
35595: GO 35426
35597: POP
35598: POP
// end ; if not weapon then
35599: LD_VAR 0 18
35603: NOT
35604: IFFALSE 35664
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35606: LD_ADDR_VAR 0 5
35610: PUSH
35611: LD_VAR 0 5
35615: PUSH
35616: LD_INT 11
35618: PUSH
35619: LD_INT 30
35621: PUSH
35622: LD_INT 49
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: LIST
35629: DIFF
35630: ST_TO_ADDR
// if not list then
35631: LD_VAR 0 5
35635: NOT
35636: IFFALSE 35640
// exit ;
35638: GO 35782
// weapon := list [ rand ( 1 , list ) ] ;
35640: LD_ADDR_VAR 0 18
35644: PUSH
35645: LD_VAR 0 5
35649: PUSH
35650: LD_INT 1
35652: PPUSH
35653: LD_VAR 0 5
35657: PPUSH
35658: CALL_OW 12
35662: ARRAY
35663: ST_TO_ADDR
// end ; if weapon then
35664: LD_VAR 0 18
35668: IFFALSE 35782
// begin tmp := CostOfWeapon ( weapon ) ;
35670: LD_ADDR_VAR 0 14
35674: PUSH
35675: LD_VAR 0 18
35679: PPUSH
35680: CALL_OW 451
35684: ST_TO_ADDR
// j := GetBase ( tower ) ;
35685: LD_ADDR_VAR 0 9
35689: PUSH
35690: LD_VAR 0 1
35694: PPUSH
35695: CALL_OW 274
35699: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35700: LD_VAR 0 9
35704: PPUSH
35705: LD_INT 1
35707: PPUSH
35708: CALL_OW 275
35712: PUSH
35713: LD_VAR 0 14
35717: PUSH
35718: LD_INT 1
35720: ARRAY
35721: GREATEREQUAL
35722: PUSH
35723: LD_VAR 0 9
35727: PPUSH
35728: LD_INT 2
35730: PPUSH
35731: CALL_OW 275
35735: PUSH
35736: LD_VAR 0 14
35740: PUSH
35741: LD_INT 2
35743: ARRAY
35744: GREATEREQUAL
35745: AND
35746: PUSH
35747: LD_VAR 0 9
35751: PPUSH
35752: LD_INT 3
35754: PPUSH
35755: CALL_OW 275
35759: PUSH
35760: LD_VAR 0 14
35764: PUSH
35765: LD_INT 3
35767: ARRAY
35768: GREATEREQUAL
35769: AND
35770: IFFALSE 35782
// result := weapon ;
35772: LD_ADDR_VAR 0 3
35776: PUSH
35777: LD_VAR 0 18
35781: ST_TO_ADDR
// end ; end ;
35782: LD_VAR 0 3
35786: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35787: LD_INT 0
35789: PPUSH
35790: PPUSH
// result := true ;
35791: LD_ADDR_VAR 0 3
35795: PUSH
35796: LD_INT 1
35798: ST_TO_ADDR
// if array1 = array2 then
35799: LD_VAR 0 1
35803: PUSH
35804: LD_VAR 0 2
35808: EQUAL
35809: IFFALSE 35869
// begin for i = 1 to array1 do
35811: LD_ADDR_VAR 0 4
35815: PUSH
35816: DOUBLE
35817: LD_INT 1
35819: DEC
35820: ST_TO_ADDR
35821: LD_VAR 0 1
35825: PUSH
35826: FOR_TO
35827: IFFALSE 35865
// if array1 [ i ] <> array2 [ i ] then
35829: LD_VAR 0 1
35833: PUSH
35834: LD_VAR 0 4
35838: ARRAY
35839: PUSH
35840: LD_VAR 0 2
35844: PUSH
35845: LD_VAR 0 4
35849: ARRAY
35850: NONEQUAL
35851: IFFALSE 35863
// begin result := false ;
35853: LD_ADDR_VAR 0 3
35857: PUSH
35858: LD_INT 0
35860: ST_TO_ADDR
// break ;
35861: GO 35865
// end ;
35863: GO 35826
35865: POP
35866: POP
// end else
35867: GO 35877
// result := false ;
35869: LD_ADDR_VAR 0 3
35873: PUSH
35874: LD_INT 0
35876: ST_TO_ADDR
// end ;
35877: LD_VAR 0 3
35881: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35882: LD_INT 0
35884: PPUSH
35885: PPUSH
// if not array1 or not array2 then
35886: LD_VAR 0 1
35890: NOT
35891: PUSH
35892: LD_VAR 0 2
35896: NOT
35897: OR
35898: IFFALSE 35902
// exit ;
35900: GO 35966
// result := true ;
35902: LD_ADDR_VAR 0 3
35906: PUSH
35907: LD_INT 1
35909: ST_TO_ADDR
// for i = 1 to array1 do
35910: LD_ADDR_VAR 0 4
35914: PUSH
35915: DOUBLE
35916: LD_INT 1
35918: DEC
35919: ST_TO_ADDR
35920: LD_VAR 0 1
35924: PUSH
35925: FOR_TO
35926: IFFALSE 35964
// if array1 [ i ] <> array2 [ i ] then
35928: LD_VAR 0 1
35932: PUSH
35933: LD_VAR 0 4
35937: ARRAY
35938: PUSH
35939: LD_VAR 0 2
35943: PUSH
35944: LD_VAR 0 4
35948: ARRAY
35949: NONEQUAL
35950: IFFALSE 35962
// begin result := false ;
35952: LD_ADDR_VAR 0 3
35956: PUSH
35957: LD_INT 0
35959: ST_TO_ADDR
// break ;
35960: GO 35964
// end ;
35962: GO 35925
35964: POP
35965: POP
// end ;
35966: LD_VAR 0 3
35970: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35971: LD_INT 0
35973: PPUSH
35974: PPUSH
35975: PPUSH
// pom := GetBase ( fac ) ;
35976: LD_ADDR_VAR 0 5
35980: PUSH
35981: LD_VAR 0 1
35985: PPUSH
35986: CALL_OW 274
35990: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35991: LD_ADDR_VAR 0 4
35995: PUSH
35996: LD_VAR 0 2
36000: PUSH
36001: LD_INT 1
36003: ARRAY
36004: PPUSH
36005: LD_VAR 0 2
36009: PUSH
36010: LD_INT 2
36012: ARRAY
36013: PPUSH
36014: LD_VAR 0 2
36018: PUSH
36019: LD_INT 3
36021: ARRAY
36022: PPUSH
36023: LD_VAR 0 2
36027: PUSH
36028: LD_INT 4
36030: ARRAY
36031: PPUSH
36032: CALL_OW 449
36036: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36037: LD_ADDR_VAR 0 3
36041: PUSH
36042: LD_VAR 0 5
36046: PPUSH
36047: LD_INT 1
36049: PPUSH
36050: CALL_OW 275
36054: PUSH
36055: LD_VAR 0 4
36059: PUSH
36060: LD_INT 1
36062: ARRAY
36063: GREATEREQUAL
36064: PUSH
36065: LD_VAR 0 5
36069: PPUSH
36070: LD_INT 2
36072: PPUSH
36073: CALL_OW 275
36077: PUSH
36078: LD_VAR 0 4
36082: PUSH
36083: LD_INT 2
36085: ARRAY
36086: GREATEREQUAL
36087: AND
36088: PUSH
36089: LD_VAR 0 5
36093: PPUSH
36094: LD_INT 3
36096: PPUSH
36097: CALL_OW 275
36101: PUSH
36102: LD_VAR 0 4
36106: PUSH
36107: LD_INT 3
36109: ARRAY
36110: GREATEREQUAL
36111: AND
36112: ST_TO_ADDR
// end ;
36113: LD_VAR 0 3
36117: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36118: LD_INT 0
36120: PPUSH
36121: PPUSH
36122: PPUSH
36123: PPUSH
// pom := GetBase ( building ) ;
36124: LD_ADDR_VAR 0 3
36128: PUSH
36129: LD_VAR 0 1
36133: PPUSH
36134: CALL_OW 274
36138: ST_TO_ADDR
// if not pom then
36139: LD_VAR 0 3
36143: NOT
36144: IFFALSE 36148
// exit ;
36146: GO 36318
// btype := GetBType ( building ) ;
36148: LD_ADDR_VAR 0 5
36152: PUSH
36153: LD_VAR 0 1
36157: PPUSH
36158: CALL_OW 266
36162: ST_TO_ADDR
// if btype = b_armoury then
36163: LD_VAR 0 5
36167: PUSH
36168: LD_INT 4
36170: EQUAL
36171: IFFALSE 36181
// btype := b_barracks ;
36173: LD_ADDR_VAR 0 5
36177: PUSH
36178: LD_INT 5
36180: ST_TO_ADDR
// if btype = b_depot then
36181: LD_VAR 0 5
36185: PUSH
36186: LD_INT 0
36188: EQUAL
36189: IFFALSE 36199
// btype := b_warehouse ;
36191: LD_ADDR_VAR 0 5
36195: PUSH
36196: LD_INT 1
36198: ST_TO_ADDR
// if btype = b_workshop then
36199: LD_VAR 0 5
36203: PUSH
36204: LD_INT 2
36206: EQUAL
36207: IFFALSE 36217
// btype := b_factory ;
36209: LD_ADDR_VAR 0 5
36213: PUSH
36214: LD_INT 3
36216: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36217: LD_ADDR_VAR 0 4
36221: PUSH
36222: LD_VAR 0 5
36226: PPUSH
36227: LD_VAR 0 1
36231: PPUSH
36232: CALL_OW 248
36236: PPUSH
36237: CALL_OW 450
36241: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36242: LD_ADDR_VAR 0 2
36246: PUSH
36247: LD_VAR 0 3
36251: PPUSH
36252: LD_INT 1
36254: PPUSH
36255: CALL_OW 275
36259: PUSH
36260: LD_VAR 0 4
36264: PUSH
36265: LD_INT 1
36267: ARRAY
36268: GREATEREQUAL
36269: PUSH
36270: LD_VAR 0 3
36274: PPUSH
36275: LD_INT 2
36277: PPUSH
36278: CALL_OW 275
36282: PUSH
36283: LD_VAR 0 4
36287: PUSH
36288: LD_INT 2
36290: ARRAY
36291: GREATEREQUAL
36292: AND
36293: PUSH
36294: LD_VAR 0 3
36298: PPUSH
36299: LD_INT 3
36301: PPUSH
36302: CALL_OW 275
36306: PUSH
36307: LD_VAR 0 4
36311: PUSH
36312: LD_INT 3
36314: ARRAY
36315: GREATEREQUAL
36316: AND
36317: ST_TO_ADDR
// end ;
36318: LD_VAR 0 2
36322: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36323: LD_INT 0
36325: PPUSH
36326: PPUSH
36327: PPUSH
// pom := GetBase ( building ) ;
36328: LD_ADDR_VAR 0 4
36332: PUSH
36333: LD_VAR 0 1
36337: PPUSH
36338: CALL_OW 274
36342: ST_TO_ADDR
// if not pom then
36343: LD_VAR 0 4
36347: NOT
36348: IFFALSE 36352
// exit ;
36350: GO 36453
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36352: LD_ADDR_VAR 0 5
36356: PUSH
36357: LD_VAR 0 2
36361: PPUSH
36362: LD_VAR 0 1
36366: PPUSH
36367: CALL_OW 248
36371: PPUSH
36372: CALL_OW 450
36376: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36377: LD_ADDR_VAR 0 3
36381: PUSH
36382: LD_VAR 0 4
36386: PPUSH
36387: LD_INT 1
36389: PPUSH
36390: CALL_OW 275
36394: PUSH
36395: LD_VAR 0 5
36399: PUSH
36400: LD_INT 1
36402: ARRAY
36403: GREATEREQUAL
36404: PUSH
36405: LD_VAR 0 4
36409: PPUSH
36410: LD_INT 2
36412: PPUSH
36413: CALL_OW 275
36417: PUSH
36418: LD_VAR 0 5
36422: PUSH
36423: LD_INT 2
36425: ARRAY
36426: GREATEREQUAL
36427: AND
36428: PUSH
36429: LD_VAR 0 4
36433: PPUSH
36434: LD_INT 3
36436: PPUSH
36437: CALL_OW 275
36441: PUSH
36442: LD_VAR 0 5
36446: PUSH
36447: LD_INT 3
36449: ARRAY
36450: GREATEREQUAL
36451: AND
36452: ST_TO_ADDR
// end ;
36453: LD_VAR 0 3
36457: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36458: LD_INT 0
36460: PPUSH
36461: PPUSH
36462: PPUSH
36463: PPUSH
36464: PPUSH
36465: PPUSH
36466: PPUSH
36467: PPUSH
36468: PPUSH
36469: PPUSH
36470: PPUSH
// result := false ;
36471: LD_ADDR_VAR 0 8
36475: PUSH
36476: LD_INT 0
36478: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36479: LD_VAR 0 5
36483: NOT
36484: PUSH
36485: LD_VAR 0 1
36489: NOT
36490: OR
36491: PUSH
36492: LD_VAR 0 2
36496: NOT
36497: OR
36498: PUSH
36499: LD_VAR 0 3
36503: NOT
36504: OR
36505: IFFALSE 36509
// exit ;
36507: GO 37323
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36509: LD_ADDR_VAR 0 14
36513: PUSH
36514: LD_VAR 0 1
36518: PPUSH
36519: LD_VAR 0 2
36523: PPUSH
36524: LD_VAR 0 3
36528: PPUSH
36529: LD_VAR 0 4
36533: PPUSH
36534: LD_VAR 0 5
36538: PUSH
36539: LD_INT 1
36541: ARRAY
36542: PPUSH
36543: CALL_OW 248
36547: PPUSH
36548: LD_INT 0
36550: PPUSH
36551: CALL 38560 0 6
36555: ST_TO_ADDR
// if not hexes then
36556: LD_VAR 0 14
36560: NOT
36561: IFFALSE 36565
// exit ;
36563: GO 37323
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36565: LD_ADDR_VAR 0 17
36569: PUSH
36570: LD_VAR 0 5
36574: PPUSH
36575: LD_INT 22
36577: PUSH
36578: LD_VAR 0 13
36582: PPUSH
36583: CALL_OW 255
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 2
36594: PUSH
36595: LD_INT 30
36597: PUSH
36598: LD_INT 0
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 30
36607: PUSH
36608: LD_INT 1
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: LIST
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PPUSH
36624: CALL_OW 72
36628: ST_TO_ADDR
// for i = 1 to hexes do
36629: LD_ADDR_VAR 0 9
36633: PUSH
36634: DOUBLE
36635: LD_INT 1
36637: DEC
36638: ST_TO_ADDR
36639: LD_VAR 0 14
36643: PUSH
36644: FOR_TO
36645: IFFALSE 37321
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36647: LD_ADDR_VAR 0 13
36651: PUSH
36652: LD_VAR 0 14
36656: PUSH
36657: LD_VAR 0 9
36661: ARRAY
36662: PUSH
36663: LD_INT 1
36665: ARRAY
36666: PPUSH
36667: LD_VAR 0 14
36671: PUSH
36672: LD_VAR 0 9
36676: ARRAY
36677: PUSH
36678: LD_INT 2
36680: ARRAY
36681: PPUSH
36682: CALL_OW 428
36686: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36687: LD_VAR 0 14
36691: PUSH
36692: LD_VAR 0 9
36696: ARRAY
36697: PUSH
36698: LD_INT 1
36700: ARRAY
36701: PPUSH
36702: LD_VAR 0 14
36706: PUSH
36707: LD_VAR 0 9
36711: ARRAY
36712: PUSH
36713: LD_INT 2
36715: ARRAY
36716: PPUSH
36717: CALL_OW 351
36721: PUSH
36722: LD_VAR 0 14
36726: PUSH
36727: LD_VAR 0 9
36731: ARRAY
36732: PUSH
36733: LD_INT 1
36735: ARRAY
36736: PPUSH
36737: LD_VAR 0 14
36741: PUSH
36742: LD_VAR 0 9
36746: ARRAY
36747: PUSH
36748: LD_INT 2
36750: ARRAY
36751: PPUSH
36752: CALL_OW 488
36756: NOT
36757: OR
36758: PUSH
36759: LD_VAR 0 13
36763: PPUSH
36764: CALL_OW 247
36768: PUSH
36769: LD_INT 3
36771: EQUAL
36772: OR
36773: IFFALSE 36779
// exit ;
36775: POP
36776: POP
36777: GO 37323
// if not tmp then
36779: LD_VAR 0 13
36783: NOT
36784: IFFALSE 36788
// continue ;
36786: GO 36644
// result := true ;
36788: LD_ADDR_VAR 0 8
36792: PUSH
36793: LD_INT 1
36795: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36796: LD_VAR 0 6
36800: PUSH
36801: LD_VAR 0 13
36805: PPUSH
36806: CALL_OW 247
36810: PUSH
36811: LD_INT 2
36813: EQUAL
36814: AND
36815: PUSH
36816: LD_VAR 0 13
36820: PPUSH
36821: CALL_OW 263
36825: PUSH
36826: LD_INT 1
36828: EQUAL
36829: AND
36830: IFFALSE 36994
// begin if IsDrivenBy ( tmp ) then
36832: LD_VAR 0 13
36836: PPUSH
36837: CALL_OW 311
36841: IFFALSE 36845
// continue ;
36843: GO 36644
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36845: LD_VAR 0 6
36849: PPUSH
36850: LD_INT 3
36852: PUSH
36853: LD_INT 60
36855: PUSH
36856: EMPTY
36857: LIST
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 3
36865: PUSH
36866: LD_INT 55
36868: PUSH
36869: EMPTY
36870: LIST
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PPUSH
36880: CALL_OW 72
36884: IFFALSE 36992
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36886: LD_ADDR_VAR 0 18
36890: PUSH
36891: LD_VAR 0 6
36895: PPUSH
36896: LD_INT 3
36898: PUSH
36899: LD_INT 60
36901: PUSH
36902: EMPTY
36903: LIST
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 3
36911: PUSH
36912: LD_INT 55
36914: PUSH
36915: EMPTY
36916: LIST
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PPUSH
36926: CALL_OW 72
36930: PUSH
36931: LD_INT 1
36933: ARRAY
36934: ST_TO_ADDR
// if IsInUnit ( driver ) then
36935: LD_VAR 0 18
36939: PPUSH
36940: CALL_OW 310
36944: IFFALSE 36955
// ComExit ( driver ) ;
36946: LD_VAR 0 18
36950: PPUSH
36951: CALL 61744 0 1
// AddComEnterUnit ( driver , tmp ) ;
36955: LD_VAR 0 18
36959: PPUSH
36960: LD_VAR 0 13
36964: PPUSH
36965: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36969: LD_VAR 0 18
36973: PPUSH
36974: LD_VAR 0 7
36978: PPUSH
36979: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36983: LD_VAR 0 18
36987: PPUSH
36988: CALL_OW 181
// end ; continue ;
36992: GO 36644
// end ; if not cleaners or not tmp in cleaners then
36994: LD_VAR 0 6
36998: NOT
36999: PUSH
37000: LD_VAR 0 13
37004: PUSH
37005: LD_VAR 0 6
37009: IN
37010: NOT
37011: OR
37012: IFFALSE 37319
// begin if dep then
37014: LD_VAR 0 17
37018: IFFALSE 37154
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37020: LD_ADDR_VAR 0 16
37024: PUSH
37025: LD_VAR 0 17
37029: PUSH
37030: LD_INT 1
37032: ARRAY
37033: PPUSH
37034: CALL_OW 250
37038: PPUSH
37039: LD_VAR 0 17
37043: PUSH
37044: LD_INT 1
37046: ARRAY
37047: PPUSH
37048: CALL_OW 254
37052: PPUSH
37053: LD_INT 5
37055: PPUSH
37056: CALL_OW 272
37060: PUSH
37061: LD_VAR 0 17
37065: PUSH
37066: LD_INT 1
37068: ARRAY
37069: PPUSH
37070: CALL_OW 251
37074: PPUSH
37075: LD_VAR 0 17
37079: PUSH
37080: LD_INT 1
37082: ARRAY
37083: PPUSH
37084: CALL_OW 254
37088: PPUSH
37089: LD_INT 5
37091: PPUSH
37092: CALL_OW 273
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37101: LD_VAR 0 16
37105: PUSH
37106: LD_INT 1
37108: ARRAY
37109: PPUSH
37110: LD_VAR 0 16
37114: PUSH
37115: LD_INT 2
37117: ARRAY
37118: PPUSH
37119: CALL_OW 488
37123: IFFALSE 37154
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37125: LD_VAR 0 13
37129: PPUSH
37130: LD_VAR 0 16
37134: PUSH
37135: LD_INT 1
37137: ARRAY
37138: PPUSH
37139: LD_VAR 0 16
37143: PUSH
37144: LD_INT 2
37146: ARRAY
37147: PPUSH
37148: CALL_OW 111
// continue ;
37152: GO 36644
// end ; end ; r := GetDir ( tmp ) ;
37154: LD_ADDR_VAR 0 15
37158: PUSH
37159: LD_VAR 0 13
37163: PPUSH
37164: CALL_OW 254
37168: ST_TO_ADDR
// if r = 5 then
37169: LD_VAR 0 15
37173: PUSH
37174: LD_INT 5
37176: EQUAL
37177: IFFALSE 37187
// r := 0 ;
37179: LD_ADDR_VAR 0 15
37183: PUSH
37184: LD_INT 0
37186: ST_TO_ADDR
// for j = r to 5 do
37187: LD_ADDR_VAR 0 10
37191: PUSH
37192: DOUBLE
37193: LD_VAR 0 15
37197: DEC
37198: ST_TO_ADDR
37199: LD_INT 5
37201: PUSH
37202: FOR_TO
37203: IFFALSE 37317
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37205: LD_ADDR_VAR 0 11
37209: PUSH
37210: LD_VAR 0 13
37214: PPUSH
37215: CALL_OW 250
37219: PPUSH
37220: LD_VAR 0 10
37224: PPUSH
37225: LD_INT 2
37227: PPUSH
37228: CALL_OW 272
37232: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37233: LD_ADDR_VAR 0 12
37237: PUSH
37238: LD_VAR 0 13
37242: PPUSH
37243: CALL_OW 251
37247: PPUSH
37248: LD_VAR 0 10
37252: PPUSH
37253: LD_INT 2
37255: PPUSH
37256: CALL_OW 273
37260: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37261: LD_VAR 0 11
37265: PPUSH
37266: LD_VAR 0 12
37270: PPUSH
37271: CALL_OW 488
37275: PUSH
37276: LD_VAR 0 11
37280: PPUSH
37281: LD_VAR 0 12
37285: PPUSH
37286: CALL_OW 428
37290: NOT
37291: AND
37292: IFFALSE 37315
// begin ComMoveXY ( tmp , _x , _y ) ;
37294: LD_VAR 0 13
37298: PPUSH
37299: LD_VAR 0 11
37303: PPUSH
37304: LD_VAR 0 12
37308: PPUSH
37309: CALL_OW 111
// break ;
37313: GO 37317
// end ; end ;
37315: GO 37202
37317: POP
37318: POP
// end ; end ;
37319: GO 36644
37321: POP
37322: POP
// end ;
37323: LD_VAR 0 8
37327: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37328: LD_INT 0
37330: PPUSH
// result := true ;
37331: LD_ADDR_VAR 0 3
37335: PUSH
37336: LD_INT 1
37338: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37339: LD_VAR 0 2
37343: PUSH
37344: LD_INT 24
37346: DOUBLE
37347: EQUAL
37348: IFTRUE 37358
37350: LD_INT 33
37352: DOUBLE
37353: EQUAL
37354: IFTRUE 37358
37356: GO 37383
37358: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37359: LD_ADDR_VAR 0 3
37363: PUSH
37364: LD_INT 32
37366: PPUSH
37367: LD_VAR 0 1
37371: PPUSH
37372: CALL_OW 321
37376: PUSH
37377: LD_INT 2
37379: EQUAL
37380: ST_TO_ADDR
37381: GO 37703
37383: LD_INT 20
37385: DOUBLE
37386: EQUAL
37387: IFTRUE 37391
37389: GO 37416
37391: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37392: LD_ADDR_VAR 0 3
37396: PUSH
37397: LD_INT 6
37399: PPUSH
37400: LD_VAR 0 1
37404: PPUSH
37405: CALL_OW 321
37409: PUSH
37410: LD_INT 2
37412: EQUAL
37413: ST_TO_ADDR
37414: GO 37703
37416: LD_INT 22
37418: DOUBLE
37419: EQUAL
37420: IFTRUE 37430
37422: LD_INT 36
37424: DOUBLE
37425: EQUAL
37426: IFTRUE 37430
37428: GO 37455
37430: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37431: LD_ADDR_VAR 0 3
37435: PUSH
37436: LD_INT 15
37438: PPUSH
37439: LD_VAR 0 1
37443: PPUSH
37444: CALL_OW 321
37448: PUSH
37449: LD_INT 2
37451: EQUAL
37452: ST_TO_ADDR
37453: GO 37703
37455: LD_INT 30
37457: DOUBLE
37458: EQUAL
37459: IFTRUE 37463
37461: GO 37488
37463: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37464: LD_ADDR_VAR 0 3
37468: PUSH
37469: LD_INT 20
37471: PPUSH
37472: LD_VAR 0 1
37476: PPUSH
37477: CALL_OW 321
37481: PUSH
37482: LD_INT 2
37484: EQUAL
37485: ST_TO_ADDR
37486: GO 37703
37488: LD_INT 28
37490: DOUBLE
37491: EQUAL
37492: IFTRUE 37502
37494: LD_INT 21
37496: DOUBLE
37497: EQUAL
37498: IFTRUE 37502
37500: GO 37527
37502: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37503: LD_ADDR_VAR 0 3
37507: PUSH
37508: LD_INT 21
37510: PPUSH
37511: LD_VAR 0 1
37515: PPUSH
37516: CALL_OW 321
37520: PUSH
37521: LD_INT 2
37523: EQUAL
37524: ST_TO_ADDR
37525: GO 37703
37527: LD_INT 16
37529: DOUBLE
37530: EQUAL
37531: IFTRUE 37535
37533: GO 37562
37535: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37536: LD_ADDR_VAR 0 3
37540: PUSH
37541: LD_EXP 70
37545: PPUSH
37546: LD_VAR 0 1
37550: PPUSH
37551: CALL_OW 321
37555: PUSH
37556: LD_INT 2
37558: EQUAL
37559: ST_TO_ADDR
37560: GO 37703
37562: LD_INT 19
37564: DOUBLE
37565: EQUAL
37566: IFTRUE 37576
37568: LD_INT 23
37570: DOUBLE
37571: EQUAL
37572: IFTRUE 37576
37574: GO 37603
37576: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37577: LD_ADDR_VAR 0 3
37581: PUSH
37582: LD_EXP 69
37586: PPUSH
37587: LD_VAR 0 1
37591: PPUSH
37592: CALL_OW 321
37596: PUSH
37597: LD_INT 2
37599: EQUAL
37600: ST_TO_ADDR
37601: GO 37703
37603: LD_INT 17
37605: DOUBLE
37606: EQUAL
37607: IFTRUE 37611
37609: GO 37636
37611: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37612: LD_ADDR_VAR 0 3
37616: PUSH
37617: LD_INT 39
37619: PPUSH
37620: LD_VAR 0 1
37624: PPUSH
37625: CALL_OW 321
37629: PUSH
37630: LD_INT 2
37632: EQUAL
37633: ST_TO_ADDR
37634: GO 37703
37636: LD_INT 18
37638: DOUBLE
37639: EQUAL
37640: IFTRUE 37644
37642: GO 37669
37644: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37645: LD_ADDR_VAR 0 3
37649: PUSH
37650: LD_INT 40
37652: PPUSH
37653: LD_VAR 0 1
37657: PPUSH
37658: CALL_OW 321
37662: PUSH
37663: LD_INT 2
37665: EQUAL
37666: ST_TO_ADDR
37667: GO 37703
37669: LD_INT 27
37671: DOUBLE
37672: EQUAL
37673: IFTRUE 37677
37675: GO 37702
37677: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37678: LD_ADDR_VAR 0 3
37682: PUSH
37683: LD_INT 35
37685: PPUSH
37686: LD_VAR 0 1
37690: PPUSH
37691: CALL_OW 321
37695: PUSH
37696: LD_INT 2
37698: EQUAL
37699: ST_TO_ADDR
37700: GO 37703
37702: POP
// end ;
37703: LD_VAR 0 3
37707: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37708: LD_INT 0
37710: PPUSH
37711: PPUSH
37712: PPUSH
37713: PPUSH
37714: PPUSH
37715: PPUSH
37716: PPUSH
37717: PPUSH
37718: PPUSH
37719: PPUSH
37720: PPUSH
// result := false ;
37721: LD_ADDR_VAR 0 6
37725: PUSH
37726: LD_INT 0
37728: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37729: LD_VAR 0 1
37733: NOT
37734: PUSH
37735: LD_VAR 0 1
37739: PPUSH
37740: CALL_OW 266
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: LD_INT 1
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: IN
37755: NOT
37756: OR
37757: PUSH
37758: LD_VAR 0 2
37762: NOT
37763: OR
37764: PUSH
37765: LD_VAR 0 5
37769: PUSH
37770: LD_INT 0
37772: PUSH
37773: LD_INT 1
37775: PUSH
37776: LD_INT 2
37778: PUSH
37779: LD_INT 3
37781: PUSH
37782: LD_INT 4
37784: PUSH
37785: LD_INT 5
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: IN
37796: NOT
37797: OR
37798: PUSH
37799: LD_VAR 0 3
37803: PPUSH
37804: LD_VAR 0 4
37808: PPUSH
37809: CALL_OW 488
37813: NOT
37814: OR
37815: IFFALSE 37819
// exit ;
37817: GO 38555
// side := GetSide ( depot ) ;
37819: LD_ADDR_VAR 0 9
37823: PUSH
37824: LD_VAR 0 1
37828: PPUSH
37829: CALL_OW 255
37833: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37834: LD_VAR 0 9
37838: PPUSH
37839: LD_VAR 0 2
37843: PPUSH
37844: CALL 37328 0 2
37848: NOT
37849: IFFALSE 37853
// exit ;
37851: GO 38555
// pom := GetBase ( depot ) ;
37853: LD_ADDR_VAR 0 10
37857: PUSH
37858: LD_VAR 0 1
37862: PPUSH
37863: CALL_OW 274
37867: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37868: LD_ADDR_VAR 0 11
37872: PUSH
37873: LD_VAR 0 2
37877: PPUSH
37878: LD_VAR 0 1
37882: PPUSH
37883: CALL_OW 248
37887: PPUSH
37888: CALL_OW 450
37892: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37893: LD_VAR 0 10
37897: PPUSH
37898: LD_INT 1
37900: PPUSH
37901: CALL_OW 275
37905: PUSH
37906: LD_VAR 0 11
37910: PUSH
37911: LD_INT 1
37913: ARRAY
37914: GREATEREQUAL
37915: PUSH
37916: LD_VAR 0 10
37920: PPUSH
37921: LD_INT 2
37923: PPUSH
37924: CALL_OW 275
37928: PUSH
37929: LD_VAR 0 11
37933: PUSH
37934: LD_INT 2
37936: ARRAY
37937: GREATEREQUAL
37938: AND
37939: PUSH
37940: LD_VAR 0 10
37944: PPUSH
37945: LD_INT 3
37947: PPUSH
37948: CALL_OW 275
37952: PUSH
37953: LD_VAR 0 11
37957: PUSH
37958: LD_INT 3
37960: ARRAY
37961: GREATEREQUAL
37962: AND
37963: NOT
37964: IFFALSE 37968
// exit ;
37966: GO 38555
// if GetBType ( depot ) = b_depot then
37968: LD_VAR 0 1
37972: PPUSH
37973: CALL_OW 266
37977: PUSH
37978: LD_INT 0
37980: EQUAL
37981: IFFALSE 37993
// dist := 28 else
37983: LD_ADDR_VAR 0 14
37987: PUSH
37988: LD_INT 28
37990: ST_TO_ADDR
37991: GO 38001
// dist := 36 ;
37993: LD_ADDR_VAR 0 14
37997: PUSH
37998: LD_INT 36
38000: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38001: LD_VAR 0 1
38005: PPUSH
38006: LD_VAR 0 3
38010: PPUSH
38011: LD_VAR 0 4
38015: PPUSH
38016: CALL_OW 297
38020: PUSH
38021: LD_VAR 0 14
38025: GREATER
38026: IFFALSE 38030
// exit ;
38028: GO 38555
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38030: LD_ADDR_VAR 0 12
38034: PUSH
38035: LD_VAR 0 2
38039: PPUSH
38040: LD_VAR 0 3
38044: PPUSH
38045: LD_VAR 0 4
38049: PPUSH
38050: LD_VAR 0 5
38054: PPUSH
38055: LD_VAR 0 1
38059: PPUSH
38060: CALL_OW 248
38064: PPUSH
38065: LD_INT 0
38067: PPUSH
38068: CALL 38560 0 6
38072: ST_TO_ADDR
// if not hexes then
38073: LD_VAR 0 12
38077: NOT
38078: IFFALSE 38082
// exit ;
38080: GO 38555
// hex := GetHexInfo ( x , y ) ;
38082: LD_ADDR_VAR 0 15
38086: PUSH
38087: LD_VAR 0 3
38091: PPUSH
38092: LD_VAR 0 4
38096: PPUSH
38097: CALL_OW 546
38101: ST_TO_ADDR
// if hex [ 1 ] then
38102: LD_VAR 0 15
38106: PUSH
38107: LD_INT 1
38109: ARRAY
38110: IFFALSE 38114
// exit ;
38112: GO 38555
// height := hex [ 2 ] ;
38114: LD_ADDR_VAR 0 13
38118: PUSH
38119: LD_VAR 0 15
38123: PUSH
38124: LD_INT 2
38126: ARRAY
38127: ST_TO_ADDR
// for i = 1 to hexes do
38128: LD_ADDR_VAR 0 7
38132: PUSH
38133: DOUBLE
38134: LD_INT 1
38136: DEC
38137: ST_TO_ADDR
38138: LD_VAR 0 12
38142: PUSH
38143: FOR_TO
38144: IFFALSE 38474
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38146: LD_VAR 0 12
38150: PUSH
38151: LD_VAR 0 7
38155: ARRAY
38156: PUSH
38157: LD_INT 1
38159: ARRAY
38160: PPUSH
38161: LD_VAR 0 12
38165: PUSH
38166: LD_VAR 0 7
38170: ARRAY
38171: PUSH
38172: LD_INT 2
38174: ARRAY
38175: PPUSH
38176: CALL_OW 488
38180: NOT
38181: PUSH
38182: LD_VAR 0 12
38186: PUSH
38187: LD_VAR 0 7
38191: ARRAY
38192: PUSH
38193: LD_INT 1
38195: ARRAY
38196: PPUSH
38197: LD_VAR 0 12
38201: PUSH
38202: LD_VAR 0 7
38206: ARRAY
38207: PUSH
38208: LD_INT 2
38210: ARRAY
38211: PPUSH
38212: CALL_OW 428
38216: PUSH
38217: LD_INT 0
38219: GREATER
38220: OR
38221: PUSH
38222: LD_VAR 0 12
38226: PUSH
38227: LD_VAR 0 7
38231: ARRAY
38232: PUSH
38233: LD_INT 1
38235: ARRAY
38236: PPUSH
38237: LD_VAR 0 12
38241: PUSH
38242: LD_VAR 0 7
38246: ARRAY
38247: PUSH
38248: LD_INT 2
38250: ARRAY
38251: PPUSH
38252: CALL_OW 351
38256: OR
38257: IFFALSE 38263
// exit ;
38259: POP
38260: POP
38261: GO 38555
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38263: LD_ADDR_VAR 0 8
38267: PUSH
38268: LD_VAR 0 12
38272: PUSH
38273: LD_VAR 0 7
38277: ARRAY
38278: PUSH
38279: LD_INT 1
38281: ARRAY
38282: PPUSH
38283: LD_VAR 0 12
38287: PUSH
38288: LD_VAR 0 7
38292: ARRAY
38293: PUSH
38294: LD_INT 2
38296: ARRAY
38297: PPUSH
38298: CALL_OW 546
38302: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38303: LD_VAR 0 8
38307: PUSH
38308: LD_INT 1
38310: ARRAY
38311: PUSH
38312: LD_VAR 0 8
38316: PUSH
38317: LD_INT 2
38319: ARRAY
38320: PUSH
38321: LD_VAR 0 13
38325: PUSH
38326: LD_INT 2
38328: PLUS
38329: GREATER
38330: OR
38331: PUSH
38332: LD_VAR 0 8
38336: PUSH
38337: LD_INT 2
38339: ARRAY
38340: PUSH
38341: LD_VAR 0 13
38345: PUSH
38346: LD_INT 2
38348: MINUS
38349: LESS
38350: OR
38351: PUSH
38352: LD_VAR 0 8
38356: PUSH
38357: LD_INT 3
38359: ARRAY
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: LD_INT 8
38366: PUSH
38367: LD_INT 9
38369: PUSH
38370: LD_INT 10
38372: PUSH
38373: LD_INT 11
38375: PUSH
38376: LD_INT 12
38378: PUSH
38379: LD_INT 13
38381: PUSH
38382: LD_INT 16
38384: PUSH
38385: LD_INT 17
38387: PUSH
38388: LD_INT 18
38390: PUSH
38391: LD_INT 19
38393: PUSH
38394: LD_INT 20
38396: PUSH
38397: LD_INT 21
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: IN
38415: NOT
38416: OR
38417: PUSH
38418: LD_VAR 0 8
38422: PUSH
38423: LD_INT 5
38425: ARRAY
38426: NOT
38427: OR
38428: PUSH
38429: LD_VAR 0 8
38433: PUSH
38434: LD_INT 6
38436: ARRAY
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: LD_INT 2
38443: PUSH
38444: LD_INT 7
38446: PUSH
38447: LD_INT 9
38449: PUSH
38450: LD_INT 10
38452: PUSH
38453: LD_INT 11
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: IN
38464: NOT
38465: OR
38466: IFFALSE 38472
// exit ;
38468: POP
38469: POP
38470: GO 38555
// end ;
38472: GO 38143
38474: POP
38475: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38476: LD_VAR 0 9
38480: PPUSH
38481: LD_VAR 0 3
38485: PPUSH
38486: LD_VAR 0 4
38490: PPUSH
38491: LD_INT 20
38493: PPUSH
38494: CALL 30501 0 4
38498: PUSH
38499: LD_INT 4
38501: ARRAY
38502: IFFALSE 38506
// exit ;
38504: GO 38555
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38506: LD_VAR 0 2
38510: PUSH
38511: LD_INT 29
38513: PUSH
38514: LD_INT 30
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: IN
38521: PUSH
38522: LD_VAR 0 3
38526: PPUSH
38527: LD_VAR 0 4
38531: PPUSH
38532: LD_VAR 0 9
38536: PPUSH
38537: CALL_OW 440
38541: NOT
38542: AND
38543: IFFALSE 38547
// exit ;
38545: GO 38555
// result := true ;
38547: LD_ADDR_VAR 0 6
38551: PUSH
38552: LD_INT 1
38554: ST_TO_ADDR
// end ;
38555: LD_VAR 0 6
38559: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38560: LD_INT 0
38562: PPUSH
38563: PPUSH
38564: PPUSH
38565: PPUSH
38566: PPUSH
38567: PPUSH
38568: PPUSH
38569: PPUSH
38570: PPUSH
38571: PPUSH
38572: PPUSH
38573: PPUSH
38574: PPUSH
38575: PPUSH
38576: PPUSH
38577: PPUSH
38578: PPUSH
38579: PPUSH
38580: PPUSH
38581: PPUSH
38582: PPUSH
38583: PPUSH
38584: PPUSH
38585: PPUSH
38586: PPUSH
38587: PPUSH
38588: PPUSH
38589: PPUSH
38590: PPUSH
38591: PPUSH
38592: PPUSH
38593: PPUSH
38594: PPUSH
38595: PPUSH
38596: PPUSH
38597: PPUSH
38598: PPUSH
38599: PPUSH
38600: PPUSH
38601: PPUSH
38602: PPUSH
38603: PPUSH
38604: PPUSH
38605: PPUSH
38606: PPUSH
38607: PPUSH
38608: PPUSH
38609: PPUSH
38610: PPUSH
38611: PPUSH
38612: PPUSH
38613: PPUSH
38614: PPUSH
38615: PPUSH
38616: PPUSH
38617: PPUSH
38618: PPUSH
38619: PPUSH
// result = [ ] ;
38620: LD_ADDR_VAR 0 7
38624: PUSH
38625: EMPTY
38626: ST_TO_ADDR
// temp_list = [ ] ;
38627: LD_ADDR_VAR 0 9
38631: PUSH
38632: EMPTY
38633: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38634: LD_VAR 0 4
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: LD_INT 2
38647: PUSH
38648: LD_INT 3
38650: PUSH
38651: LD_INT 4
38653: PUSH
38654: LD_INT 5
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: IN
38665: NOT
38666: PUSH
38667: LD_VAR 0 1
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: LD_INT 1
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: IN
38682: PUSH
38683: LD_VAR 0 5
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: LD_INT 2
38693: PUSH
38694: LD_INT 3
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: LIST
38701: IN
38702: NOT
38703: AND
38704: OR
38705: IFFALSE 38709
// exit ;
38707: GO 57100
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38709: LD_VAR 0 1
38713: PUSH
38714: LD_INT 6
38716: PUSH
38717: LD_INT 7
38719: PUSH
38720: LD_INT 8
38722: PUSH
38723: LD_INT 13
38725: PUSH
38726: LD_INT 12
38728: PUSH
38729: LD_INT 15
38731: PUSH
38732: LD_INT 11
38734: PUSH
38735: LD_INT 14
38737: PUSH
38738: LD_INT 10
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: IN
38752: IFFALSE 38762
// btype = b_lab ;
38754: LD_ADDR_VAR 0 1
38758: PUSH
38759: LD_INT 6
38761: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38762: LD_VAR 0 6
38766: PUSH
38767: LD_INT 0
38769: PUSH
38770: LD_INT 1
38772: PUSH
38773: LD_INT 2
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: LIST
38780: IN
38781: NOT
38782: PUSH
38783: LD_VAR 0 1
38787: PUSH
38788: LD_INT 0
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: LD_INT 3
38799: PUSH
38800: LD_INT 6
38802: PUSH
38803: LD_INT 36
38805: PUSH
38806: LD_INT 4
38808: PUSH
38809: LD_INT 5
38811: PUSH
38812: LD_INT 31
38814: PUSH
38815: LD_INT 32
38817: PUSH
38818: LD_INT 33
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: IN
38834: NOT
38835: PUSH
38836: LD_VAR 0 6
38840: PUSH
38841: LD_INT 1
38843: EQUAL
38844: AND
38845: OR
38846: PUSH
38847: LD_VAR 0 1
38851: PUSH
38852: LD_INT 2
38854: PUSH
38855: LD_INT 3
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: IN
38862: NOT
38863: PUSH
38864: LD_VAR 0 6
38868: PUSH
38869: LD_INT 2
38871: EQUAL
38872: AND
38873: OR
38874: IFFALSE 38884
// mode = 0 ;
38876: LD_ADDR_VAR 0 6
38880: PUSH
38881: LD_INT 0
38883: ST_TO_ADDR
// case mode of 0 :
38884: LD_VAR 0 6
38888: PUSH
38889: LD_INT 0
38891: DOUBLE
38892: EQUAL
38893: IFTRUE 38897
38895: GO 50350
38897: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38898: LD_ADDR_VAR 0 11
38902: PUSH
38903: LD_INT 0
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 0
38915: PUSH
38916: LD_INT 1
38918: NEG
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 1
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 1
38936: PUSH
38937: LD_INT 1
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 0
38946: PUSH
38947: LD_INT 1
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: LD_INT 0
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 1
38967: NEG
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: LD_INT 2
38983: NEG
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: LD_INT 2
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 1
39002: PUSH
39003: LD_INT 1
39005: NEG
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 1
39013: PUSH
39014: LD_INT 2
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 0
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 1
39033: NEG
39034: PUSH
39035: LD_INT 1
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 1
39044: PUSH
39045: LD_INT 3
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 0
39054: PUSH
39055: LD_INT 3
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 1
39064: NEG
39065: PUSH
39066: LD_INT 2
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39091: LD_ADDR_VAR 0 12
39095: PUSH
39096: LD_INT 0
39098: PUSH
39099: LD_INT 0
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 1
39129: PUSH
39130: LD_INT 1
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 0
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: LD_INT 1
39164: NEG
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: LD_INT 1
39175: NEG
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 2
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 2
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 1
39203: NEG
39204: PUSH
39205: LD_INT 1
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 2
39214: NEG
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 2
39225: NEG
39226: PUSH
39227: LD_INT 1
39229: NEG
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 2
39237: NEG
39238: PUSH
39239: LD_INT 1
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 3
39248: NEG
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 3
39259: NEG
39260: PUSH
39261: LD_INT 1
39263: NEG
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39287: LD_ADDR_VAR 0 13
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 0
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 1
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: LD_INT 1
39360: NEG
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: LD_INT 2
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 2
39380: PUSH
39381: LD_INT 1
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 2
39390: PUSH
39391: LD_INT 2
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 1
39400: PUSH
39401: LD_INT 2
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 2
39410: NEG
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: LD_INT 2
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 2
39434: NEG
39435: PUSH
39436: LD_INT 3
39438: NEG
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 3
39446: NEG
39447: PUSH
39448: LD_INT 2
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 3
39458: NEG
39459: PUSH
39460: LD_INT 3
39462: NEG
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39486: LD_ADDR_VAR 0 14
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: NEG
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: NEG
39556: PUSH
39557: LD_INT 1
39559: NEG
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: LD_INT 2
39571: NEG
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: LD_INT 2
39582: NEG
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: LD_INT 1
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 1
39601: PUSH
39602: LD_INT 2
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: LD_INT 2
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 1
39621: NEG
39622: PUSH
39623: LD_INT 1
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 1
39632: NEG
39633: PUSH
39634: LD_INT 3
39636: NEG
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: LD_INT 3
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: LD_INT 2
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39682: LD_ADDR_VAR 0 15
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 1
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: LD_INT 1
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 0
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: LD_INT 1
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 2
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 2
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 1
39794: NEG
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 2
39805: NEG
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 2
39816: NEG
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 2
39828: PUSH
39829: LD_INT 1
39831: NEG
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 3
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 3
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39875: LD_ADDR_VAR 0 16
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 0
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 1
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 1
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 0
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 1
39956: NEG
39957: PUSH
39958: LD_INT 2
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 2
39968: PUSH
39969: LD_INT 1
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 2
39978: PUSH
39979: LD_INT 2
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 1
39988: PUSH
39989: LD_INT 2
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 2
39998: NEG
39999: PUSH
40000: LD_INT 1
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 2
40010: NEG
40011: PUSH
40012: LD_INT 2
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 3
40022: PUSH
40023: LD_INT 2
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 3
40032: PUSH
40033: LD_INT 3
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 2
40042: PUSH
40043: LD_INT 3
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40068: LD_ADDR_VAR 0 17
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: LD_INT 0
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: LD_INT 1
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: LD_INT 1
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: LD_INT 2
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: LD_INT 2
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 2
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 2
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: LD_INT 2
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: LD_INT 2
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: LD_INT 2
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: NEG
40234: PUSH
40235: LD_INT 1
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 2
40244: NEG
40245: PUSH
40246: LD_INT 0
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 2
40255: NEG
40256: PUSH
40257: LD_INT 1
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 2
40267: NEG
40268: PUSH
40269: LD_INT 2
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40298: LD_ADDR_VAR 0 18
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: LD_INT 0
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: LD_INT 2
40383: NEG
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: LD_INT 2
40394: NEG
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: LD_INT 1
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 2
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 2
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: LD_INT 2
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 1
40443: PUSH
40444: LD_INT 2
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: LD_INT 2
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 2
40474: NEG
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: LD_INT 2
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40528: LD_ADDR_VAR 0 19
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: NEG
40610: PUSH
40611: LD_INT 2
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 2
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 2
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: LD_INT 2
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: LD_INT 2
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 2
40704: NEG
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: NEG
40716: PUSH
40717: LD_INT 1
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 2
40727: NEG
40728: PUSH
40729: LD_INT 2
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40758: LD_ADDR_VAR 0 20
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: LD_INT 2
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 2
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: LD_INT 2
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 2
40934: NEG
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: NEG
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40988: LD_ADDR_VAR 0 21
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: LD_INT 1
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 1
41069: NEG
41070: PUSH
41071: LD_INT 2
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: LD_INT 2
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: LD_INT 1
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 2
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 2
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 2
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: LD_INT 2
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 2
41164: NEG
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 2
41175: NEG
41176: PUSH
41177: LD_INT 1
41179: NEG
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 2
41187: NEG
41188: PUSH
41189: LD_INT 2
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41218: LD_ADDR_VAR 0 22
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: NEG
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: NEG
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 2
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 2
41333: PUSH
41334: LD_INT 0
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 2
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: LD_INT 2
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 2
41394: NEG
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 2
41405: NEG
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 2
41417: NEG
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41448: LD_ADDR_VAR 0 23
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: LD_INT 2
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 2
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 2
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: LD_INT 2
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 2
41624: NEG
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 2
41635: NEG
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 2
41647: NEG
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 2
41659: NEG
41660: PUSH
41661: LD_INT 3
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: NEG
41672: PUSH
41673: LD_INT 3
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: LD_INT 2
41686: NEG
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 2
41694: PUSH
41695: LD_INT 1
41697: NEG
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41728: LD_ADDR_VAR 0 24
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: LD_INT 1
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: NEG
41798: PUSH
41799: LD_INT 1
41801: NEG
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: NEG
41810: PUSH
41811: LD_INT 2
41813: NEG
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 2
41853: PUSH
41854: LD_INT 1
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 2
41863: PUSH
41864: LD_INT 2
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: LD_INT 2
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 2
41904: NEG
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: NEG
41928: PUSH
41929: LD_INT 2
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: LD_INT 2
41942: NEG
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 2
41950: PUSH
41951: LD_INT 1
41953: NEG
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 3
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 3
41971: PUSH
41972: LD_INT 2
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42004: LD_ADDR_VAR 0 25
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: LD_INT 2
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 2
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 2
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: LD_INT 2
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 2
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 2
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 2
42180: NEG
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 2
42191: NEG
42192: PUSH
42193: LD_INT 1
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 3
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 3
42225: PUSH
42226: LD_INT 2
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: LD_INT 3
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: LD_INT 3
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42278: LD_ADDR_VAR 0 26
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 1
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 1
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: LD_INT 1
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 1
42336: NEG
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: NEG
42360: PUSH
42361: LD_INT 2
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: LD_INT 2
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: LD_INT 1
42385: NEG
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 2
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 2
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 2
42413: PUSH
42414: LD_INT 2
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 1
42423: PUSH
42424: LD_INT 2
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: LD_INT 2
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 1
42443: NEG
42444: PUSH
42445: LD_INT 1
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 2
42454: NEG
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 2
42465: NEG
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 2
42477: NEG
42478: PUSH
42479: LD_INT 2
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 2
42489: PUSH
42490: LD_INT 3
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: LD_INT 3
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: LD_INT 2
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 2
42520: NEG
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42554: LD_ADDR_VAR 0 27
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: LD_INT 2
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: LD_INT 2
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 1
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 2
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 2
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 2
42689: PUSH
42690: LD_INT 2
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: LD_INT 2
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 0
42709: PUSH
42710: LD_INT 2
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 2
42730: NEG
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 2
42741: NEG
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 2
42753: NEG
42754: PUSH
42755: LD_INT 2
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: LD_INT 2
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 2
42776: NEG
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 3
42787: NEG
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 3
42799: NEG
42800: PUSH
42801: LD_INT 2
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42834: LD_ADDR_VAR 0 28
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: LD_INT 1
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 1
42903: NEG
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: LD_INT 2
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: LD_INT 2
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 2
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 2
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 2
42969: PUSH
42970: LD_INT 2
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: PUSH
42980: LD_INT 2
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: LD_INT 2
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: LD_INT 1
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 2
43010: NEG
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 2
43021: NEG
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 2
43033: NEG
43034: PUSH
43035: LD_INT 2
43037: NEG
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 2
43045: NEG
43046: PUSH
43047: LD_INT 3
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: LD_INT 3
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 3
43069: NEG
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 3
43081: NEG
43082: PUSH
43083: LD_INT 2
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43116: LD_ADDR_VAR 0 29
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 1
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: LD_INT 1
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: LD_INT 2
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: LD_INT 2
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 2
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: LD_INT 1
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: LD_INT 2
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 2
43282: NEG
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 2
43294: NEG
43295: PUSH
43296: LD_INT 2
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: NEG
43307: PUSH
43308: LD_INT 3
43310: NEG
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 2
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 3
43329: PUSH
43330: LD_INT 1
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: LD_INT 3
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: NEG
43350: PUSH
43351: LD_INT 2
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 3
43360: NEG
43361: PUSH
43362: LD_INT 2
43364: NEG
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43395: LD_ADDR_VAR 0 30
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: NEG
43477: PUSH
43478: LD_INT 2
43480: NEG
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: LD_INT 2
43491: NEG
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 2
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 2
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 2
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: LD_INT 2
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 2
43561: NEG
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 2
43572: NEG
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 1
43584: NEG
43585: PUSH
43586: LD_INT 3
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: LD_INT 2
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 3
43607: PUSH
43608: LD_INT 2
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 2
43617: PUSH
43618: LD_INT 3
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 3
43638: NEG
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43673: LD_ADDR_VAR 0 31
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 0
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: LD_INT 0
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: LD_INT 2
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 2
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 2
43797: PUSH
43798: LD_INT 2
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 2
43838: NEG
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: LD_INT 2
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: LD_INT 3
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 2
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 3
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: LD_INT 3
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: PUSH
43907: LD_INT 2
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 3
43916: NEG
43917: PUSH
43918: LD_INT 2
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43951: LD_ADDR_VAR 0 32
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: LD_INT 2
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 2
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 2
44117: NEG
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 2
44128: NEG
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: NEG
44141: PUSH
44142: LD_INT 3
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: LD_INT 2
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 3
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: LD_INT 3
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 2
44183: NEG
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 3
44194: NEG
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44229: LD_ADDR_VAR 0 33
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: LD_INT 2
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: LD_INT 1
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 2
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: LD_INT 2
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: LD_INT 2
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 2
44384: NEG
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 2
44395: NEG
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 2
44407: NEG
44408: PUSH
44409: LD_INT 2
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 2
44419: NEG
44420: PUSH
44421: LD_INT 3
44423: NEG
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 2
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 3
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: LD_INT 3
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 1
44462: NEG
44463: PUSH
44464: LD_INT 2
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 3
44473: NEG
44474: PUSH
44475: LD_INT 2
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44508: LD_ADDR_VAR 0 34
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: LD_INT 1
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: LD_INT 2
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: LD_INT 2
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 2
44664: NEG
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 2
44675: NEG
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 2
44687: NEG
44688: PUSH
44689: LD_INT 2
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: LD_INT 3
44703: NEG
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 3
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 2
44732: PUSH
44733: LD_INT 3
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 2
44742: NEG
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 3
44753: NEG
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44788: LD_ADDR_VAR 0 35
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: LD_INT 1
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 2
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 2
44879: NEG
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44900: LD_ADDR_VAR 0 36
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: LD_INT 2
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45012: LD_ADDR_VAR 0 37
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45124: LD_ADDR_VAR 0 38
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45236: LD_ADDR_VAR 0 39
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: LD_INT 2
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 1
45329: PUSH
45330: LD_INT 2
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45348: LD_ADDR_VAR 0 40
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45460: LD_ADDR_VAR 0 41
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 2
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: LD_INT 2
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 2
45615: NEG
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: NEG
45639: PUSH
45640: LD_INT 2
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 2
45650: NEG
45651: PUSH
45652: LD_INT 3
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 3
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 3
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 3
45693: PUSH
45694: LD_INT 2
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 3
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 2
45713: PUSH
45714: LD_INT 3
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 2
45723: NEG
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 3
45734: NEG
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 3
45745: NEG
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 3
45757: NEG
45758: PUSH
45759: LD_INT 2
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 3
45769: NEG
45770: PUSH
45771: LD_INT 3
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45810: LD_ADDR_VAR 0 42
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: LD_INT 2
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: LD_INT 2
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 1
45965: NEG
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 2
45976: NEG
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: LD_INT 2
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 2
46000: NEG
46001: PUSH
46002: LD_INT 3
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: LD_INT 3
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: LD_INT 3
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 3
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 3
46056: PUSH
46057: LD_INT 3
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: LD_INT 3
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: LD_INT 3
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: LD_INT 3
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: LD_INT 2
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 3
46107: NEG
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 3
46119: NEG
46120: PUSH
46121: LD_INT 3
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46160: LD_ADDR_VAR 0 43
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: LD_INT 2
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: LD_INT 2
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 2
46326: NEG
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 3
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 3
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: LD_INT 2
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 3
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 3
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 3
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: LD_INT 3
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: LD_INT 2
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: LD_INT 1
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 3
46456: NEG
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 3
46467: NEG
46468: PUSH
46469: LD_INT 1
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46508: LD_ADDR_VAR 0 44
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: LD_INT 1
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: LD_INT 2
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 2
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 2
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: LD_INT 2
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: NEG
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 2
46686: NEG
46687: PUSH
46688: LD_INT 2
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: NEG
46699: PUSH
46700: LD_INT 3
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 2
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 3
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 3
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 3
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 3
46751: PUSH
46752: LD_INT 3
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 2
46761: PUSH
46762: LD_INT 3
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 2
46771: NEG
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 3
46782: NEG
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 3
46793: NEG
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 3
46805: NEG
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 3
46817: NEG
46818: PUSH
46819: LD_INT 3
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46858: LD_ADDR_VAR 0 45
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: LD_INT 2
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 2
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 2
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: LD_INT 2
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: LD_INT 2
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: LD_INT 2
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 2
47024: NEG
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 2
47036: NEG
47037: PUSH
47038: LD_INT 2
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: LD_INT 3
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: LD_INT 3
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: LD_INT 3
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 3
47094: PUSH
47095: LD_INT 2
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 3
47104: PUSH
47105: LD_INT 3
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: LD_INT 3
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 3
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: LD_INT 3
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 3
47155: NEG
47156: PUSH
47157: LD_INT 2
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 3
47167: NEG
47168: PUSH
47169: LD_INT 3
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47208: LD_ADDR_VAR 0 46
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: LD_INT 2
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 2
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: LD_INT 1
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 2
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: LD_INT 3
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: LD_INT 3
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: LD_INT 2
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 3
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 3
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: PUSH
47463: LD_INT 3
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: LD_INT 3
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: LD_INT 2
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 2
47493: NEG
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 3
47504: NEG
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 3
47515: NEG
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47556: LD_ADDR_VAR 0 47
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: LD_INT 2
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: LD_INT 2
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 2
47671: NEG
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 2
47683: NEG
47684: PUSH
47685: LD_INT 2
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47707: LD_ADDR_VAR 0 48
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: LD_INT 2
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47854: LD_ADDR_VAR 0 49
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 2
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 2
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47998: LD_ADDR_VAR 0 50
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: LD_INT 2
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: LD_INT 2
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: LD_INT 2
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48142: LD_ADDR_VAR 0 51
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 2
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 2
48265: NEG
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48289: LD_ADDR_VAR 0 52
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 2
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 2
48393: NEG
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 2
48404: NEG
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 2
48416: NEG
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48440: LD_ADDR_VAR 0 53
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 2
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 2
48616: NEG
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: LD_INT 2
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48670: LD_ADDR_VAR 0 54
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: LD_INT 1
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 2
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 2
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: LD_INT 2
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: LD_INT 2
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 2
48846: NEG
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48900: LD_ADDR_VAR 0 55
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: LD_INT 2
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 2
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 2
49076: NEG
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: NEG
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49130: LD_ADDR_VAR 0 56
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: LD_INT 2
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 2
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 2
49265: PUSH
49266: LD_INT 2
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: LD_INT 2
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: NEG
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49360: LD_ADDR_VAR 0 57
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 2
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 2
49495: PUSH
49496: LD_INT 2
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 2
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: LD_INT 2
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49590: LD_ADDR_VAR 0 58
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: LD_INT 2
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 2
49725: PUSH
49726: LD_INT 2
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: LD_INT 2
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 2
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: NEG
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 2
49789: NEG
49790: PUSH
49791: LD_INT 2
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49820: LD_ADDR_VAR 0 59
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49908: LD_ADDR_VAR 0 60
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 1
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 1
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49996: LD_ADDR_VAR 0 61
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50084: LD_ADDR_VAR 0 62
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50172: LD_ADDR_VAR 0 63
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 1
50241: NEG
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50260: LD_ADDR_VAR 0 64
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: ST_TO_ADDR
// end ; 1 :
50348: GO 56245
50350: LD_INT 1
50352: DOUBLE
50353: EQUAL
50354: IFTRUE 50358
50356: GO 52981
50358: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50359: LD_ADDR_VAR 0 11
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: LD_INT 3
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 3
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: LIST
50402: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50403: LD_ADDR_VAR 0 12
50407: PUSH
50408: LD_INT 2
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 3
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 3
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: LIST
50443: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50444: LD_ADDR_VAR 0 13
50448: PUSH
50449: LD_INT 3
50451: PUSH
50452: LD_INT 2
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 3
50461: PUSH
50462: LD_INT 3
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: LD_INT 3
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: LIST
50483: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50484: LD_ADDR_VAR 0 14
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: LD_INT 3
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: LD_INT 3
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: LD_INT 2
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: LIST
50524: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50525: LD_ADDR_VAR 0 15
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 3
50543: NEG
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 3
50554: NEG
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: LIST
50568: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50569: LD_ADDR_VAR 0 16
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: LD_INT 3
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 3
50588: NEG
50589: PUSH
50590: LD_INT 2
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 3
50600: NEG
50601: PUSH
50602: LD_INT 3
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: LIST
50614: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50615: LD_ADDR_VAR 0 17
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: LD_INT 3
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 3
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 2
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: LIST
50658: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50659: LD_ADDR_VAR 0 18
50663: PUSH
50664: LD_INT 2
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 3
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 3
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: LIST
50699: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50700: LD_ADDR_VAR 0 19
50704: PUSH
50705: LD_INT 3
50707: PUSH
50708: LD_INT 2
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 3
50717: PUSH
50718: LD_INT 3
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 2
50727: PUSH
50728: LD_INT 3
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: LIST
50739: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50740: LD_ADDR_VAR 0 20
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: LD_INT 3
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 3
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: LIST
50780: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50781: LD_ADDR_VAR 0 21
50785: PUSH
50786: LD_INT 2
50788: NEG
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 3
50799: NEG
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 3
50810: NEG
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: LIST
50824: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50825: LD_ADDR_VAR 0 22
50829: PUSH
50830: LD_INT 2
50832: NEG
50833: PUSH
50834: LD_INT 3
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 3
50844: NEG
50845: PUSH
50846: LD_INT 2
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 3
50856: NEG
50857: PUSH
50858: LD_INT 3
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: LIST
50870: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50871: LD_ADDR_VAR 0 23
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: LD_INT 3
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: LD_INT 4
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 3
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: LIST
50914: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50915: LD_ADDR_VAR 0 24
50919: PUSH
50920: LD_INT 3
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 3
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 4
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: LIST
50955: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50956: LD_ADDR_VAR 0 25
50960: PUSH
50961: LD_INT 3
50963: PUSH
50964: LD_INT 3
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 4
50973: PUSH
50974: LD_INT 3
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 3
50983: PUSH
50984: LD_INT 4
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: LIST
50995: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50996: LD_ADDR_VAR 0 26
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: LD_INT 3
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: LD_INT 4
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: LD_INT 3
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: LIST
51036: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51037: LD_ADDR_VAR 0 27
51041: PUSH
51042: LD_INT 3
51044: NEG
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 3
51055: NEG
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 4
51066: NEG
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: LIST
51080: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51081: LD_ADDR_VAR 0 28
51085: PUSH
51086: LD_INT 3
51088: NEG
51089: PUSH
51090: LD_INT 3
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 3
51100: NEG
51101: PUSH
51102: LD_INT 4
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 4
51112: NEG
51113: PUSH
51114: LD_INT 3
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: LIST
51126: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51127: LD_ADDR_VAR 0 29
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: LD_INT 3
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: LD_INT 3
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: LD_INT 2
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: NEG
51169: PUSH
51170: LD_INT 4
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: LD_INT 4
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: LD_INT 3
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: LD_INT 5
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 5
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: LD_INT 4
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: LD_INT 6
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 6
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: LD_INT 5
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51282: LD_ADDR_VAR 0 30
51286: PUSH
51287: LD_INT 2
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 3
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 3
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 3
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 4
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 4
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 4
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 5
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 5
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 5
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 6
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 6
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51425: LD_ADDR_VAR 0 31
51429: PUSH
51430: LD_INT 3
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 3
51442: PUSH
51443: LD_INT 3
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 2
51452: PUSH
51453: LD_INT 3
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 4
51462: PUSH
51463: LD_INT 3
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 4
51472: PUSH
51473: LD_INT 4
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 3
51482: PUSH
51483: LD_INT 4
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 5
51492: PUSH
51493: LD_INT 4
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 5
51502: PUSH
51503: LD_INT 5
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 4
51512: PUSH
51513: LD_INT 5
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 6
51522: PUSH
51523: LD_INT 5
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 6
51532: PUSH
51533: LD_INT 6
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 5
51542: PUSH
51543: LD_INT 6
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51564: LD_ADDR_VAR 0 32
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: LD_INT 3
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 3
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: LD_INT 2
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 4
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 4
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 3
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: LD_INT 5
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: LD_INT 5
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: LD_INT 4
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: LD_INT 6
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: LD_INT 6
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: LD_INT 5
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51707: LD_ADDR_VAR 0 33
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 3
51725: NEG
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 3
51736: NEG
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 3
51748: NEG
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 4
51759: NEG
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 4
51770: NEG
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 4
51782: NEG
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 5
51793: NEG
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 5
51804: NEG
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 5
51816: NEG
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 6
51827: NEG
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 6
51838: NEG
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51862: LD_ADDR_VAR 0 34
51866: PUSH
51867: LD_INT 2
51869: NEG
51870: PUSH
51871: LD_INT 3
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 3
51881: NEG
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 3
51893: NEG
51894: PUSH
51895: LD_INT 3
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 3
51905: NEG
51906: PUSH
51907: LD_INT 4
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 4
51917: NEG
51918: PUSH
51919: LD_INT 3
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 4
51929: NEG
51930: PUSH
51931: LD_INT 4
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 4
51941: NEG
51942: PUSH
51943: LD_INT 5
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 5
51953: NEG
51954: PUSH
51955: LD_INT 4
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 5
51965: NEG
51966: PUSH
51967: LD_INT 5
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 5
51977: NEG
51978: PUSH
51979: LD_INT 6
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 6
51989: NEG
51990: PUSH
51991: LD_INT 5
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 6
52001: NEG
52002: PUSH
52003: LD_INT 6
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52025: LD_ADDR_VAR 0 41
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: LD_INT 3
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: LD_INT 2
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: LIST
52068: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52069: LD_ADDR_VAR 0 42
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 3
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: LIST
52109: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52110: LD_ADDR_VAR 0 43
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 3
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 2
52137: PUSH
52138: LD_INT 3
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: LIST
52149: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52150: LD_ADDR_VAR 0 44
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: LD_INT 3
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: LIST
52190: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52191: LD_ADDR_VAR 0 45
52195: PUSH
52196: LD_INT 2
52198: NEG
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 3
52220: NEG
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: LIST
52234: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52235: LD_ADDR_VAR 0 46
52239: PUSH
52240: LD_INT 2
52242: NEG
52243: PUSH
52244: LD_INT 2
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: LD_INT 3
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 3
52266: NEG
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: LIST
52280: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52281: LD_ADDR_VAR 0 47
52285: PUSH
52286: LD_INT 2
52288: NEG
52289: PUSH
52290: LD_INT 3
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: LD_INT 3
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52314: LD_ADDR_VAR 0 48
52318: PUSH
52319: LD_INT 1
52321: PUSH
52322: LD_INT 2
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 2
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52345: LD_ADDR_VAR 0 49
52349: PUSH
52350: LD_INT 3
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 3
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52374: LD_ADDR_VAR 0 50
52378: PUSH
52379: LD_INT 2
52381: PUSH
52382: LD_INT 3
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: LD_INT 3
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52403: LD_ADDR_VAR 0 51
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52434: LD_ADDR_VAR 0 52
52438: PUSH
52439: LD_INT 3
52441: NEG
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 3
52453: NEG
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52467: LD_ADDR_VAR 0 53
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: LD_INT 3
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: LD_INT 3
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: LIST
52510: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52511: LD_ADDR_VAR 0 54
52515: PUSH
52516: LD_INT 2
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 3
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 3
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: LIST
52551: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52552: LD_ADDR_VAR 0 55
52556: PUSH
52557: LD_INT 3
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 3
52569: PUSH
52570: LD_INT 3
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: LD_INT 3
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: LIST
52591: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52592: LD_ADDR_VAR 0 56
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: LD_INT 3
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 3
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: LD_INT 2
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: LIST
52632: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52633: LD_ADDR_VAR 0 57
52637: PUSH
52638: LD_INT 2
52640: NEG
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 3
52651: NEG
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 3
52662: NEG
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: LIST
52676: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52677: LD_ADDR_VAR 0 58
52681: PUSH
52682: LD_INT 2
52684: NEG
52685: PUSH
52686: LD_INT 3
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 3
52696: NEG
52697: PUSH
52698: LD_INT 2
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 3
52708: NEG
52709: PUSH
52710: LD_INT 3
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: LIST
52722: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52723: LD_ADDR_VAR 0 59
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: LD_INT 2
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: LD_INT 2
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: LIST
52766: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52767: LD_ADDR_VAR 0 60
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: LD_INT 1
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 2
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 2
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: LIST
52807: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52808: LD_ADDR_VAR 0 61
52812: PUSH
52813: LD_INT 2
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: LIST
52847: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52848: LD_ADDR_VAR 0 62
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: LD_INT 2
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: LD_INT 2
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: LIST
52888: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52889: LD_ADDR_VAR 0 63
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 2
52907: NEG
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 2
52918: NEG
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: LIST
52932: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52933: LD_ADDR_VAR 0 64
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: LD_INT 2
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 2
52952: NEG
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 2
52964: NEG
52965: PUSH
52966: LD_INT 2
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: LIST
52978: ST_TO_ADDR
// end ; 2 :
52979: GO 56245
52981: LD_INT 2
52983: DOUBLE
52984: EQUAL
52985: IFTRUE 52989
52987: GO 56244
52989: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52990: LD_ADDR_VAR 0 29
52994: PUSH
52995: LD_INT 4
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 4
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 5
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 5
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 4
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 3
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 3
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 3
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 5
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 3
53090: PUSH
53091: LD_INT 3
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 3
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 4
53110: PUSH
53111: LD_INT 3
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 4
53120: PUSH
53121: LD_INT 4
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 3
53130: PUSH
53131: LD_INT 4
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 2
53140: PUSH
53141: LD_INT 3
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 2
53150: PUSH
53151: LD_INT 2
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 4
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 2
53170: PUSH
53171: LD_INT 4
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: LD_INT 4
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: LD_INT 3
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: LD_INT 4
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: LD_INT 5
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: LD_INT 5
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: LD_INT 4
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: LD_INT 3
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 2
53252: PUSH
53253: LD_INT 5
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 2
53262: NEG
53263: PUSH
53264: LD_INT 3
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 3
53273: NEG
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 3
53284: NEG
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 2
53296: NEG
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 2
53307: NEG
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 3
53318: NEG
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 4
53329: NEG
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 4
53340: NEG
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 4
53352: NEG
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 4
53375: NEG
53376: PUSH
53377: LD_INT 4
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 4
53387: NEG
53388: PUSH
53389: LD_INT 5
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 3
53399: NEG
53400: PUSH
53401: LD_INT 4
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 3
53411: NEG
53412: PUSH
53413: LD_INT 3
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 4
53423: NEG
53424: PUSH
53425: LD_INT 3
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 5
53435: NEG
53436: PUSH
53437: LD_INT 4
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 5
53447: NEG
53448: PUSH
53449: LD_INT 5
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 3
53459: NEG
53460: PUSH
53461: LD_INT 5
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 5
53471: NEG
53472: PUSH
53473: LD_INT 3
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53528: LD_ADDR_VAR 0 30
53532: PUSH
53533: LD_INT 4
53535: PUSH
53536: LD_INT 4
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 4
53545: PUSH
53546: LD_INT 3
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 5
53555: PUSH
53556: LD_INT 4
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 5
53565: PUSH
53566: LD_INT 5
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 4
53575: PUSH
53576: LD_INT 5
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 3
53585: PUSH
53586: LD_INT 4
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 3
53595: PUSH
53596: LD_INT 3
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 5
53605: PUSH
53606: LD_INT 3
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 3
53615: PUSH
53616: LD_INT 5
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: LD_INT 3
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: LD_INT 3
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 4
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 4
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: LD_INT 3
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: LD_INT 4
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: NEG
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 4
53718: NEG
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 4
53729: NEG
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 3
53741: NEG
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 3
53752: NEG
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 4
53763: NEG
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 5
53774: NEG
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 5
53785: NEG
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 5
53797: NEG
53798: PUSH
53799: LD_INT 2
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 3
53809: NEG
53810: PUSH
53811: LD_INT 2
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 3
53820: NEG
53821: PUSH
53822: LD_INT 3
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 3
53832: NEG
53833: PUSH
53834: LD_INT 4
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 2
53844: NEG
53845: PUSH
53846: LD_INT 3
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: LD_INT 2
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 3
53868: NEG
53869: PUSH
53870: LD_INT 2
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 4
53880: NEG
53881: PUSH
53882: LD_INT 3
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 4
53892: NEG
53893: PUSH
53894: LD_INT 4
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: NEG
53905: PUSH
53906: LD_INT 4
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 4
53916: NEG
53917: PUSH
53918: LD_INT 2
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: LD_INT 4
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: LD_INT 5
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: LD_INT 4
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: LD_INT 3
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: LD_INT 3
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: LD_INT 4
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: LD_INT 5
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: LD_INT 3
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 2
54018: NEG
54019: PUSH
54020: LD_INT 5
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54075: LD_ADDR_VAR 0 31
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 4
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: LD_INT 3
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: LD_INT 4
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: LD_INT 5
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 5
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 4
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: LD_INT 3
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: LD_INT 5
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: LD_INT 3
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 3
54175: NEG
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 3
54186: NEG
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 2
54198: NEG
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 2
54209: NEG
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 3
54220: NEG
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 4
54231: NEG
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 4
54242: NEG
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 4
54254: NEG
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 4
54277: NEG
54278: PUSH
54279: LD_INT 4
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 4
54289: NEG
54290: PUSH
54291: LD_INT 5
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 3
54301: NEG
54302: PUSH
54303: LD_INT 4
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 3
54313: NEG
54314: PUSH
54315: LD_INT 3
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 4
54325: NEG
54326: PUSH
54327: LD_INT 3
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 5
54337: NEG
54338: PUSH
54339: LD_INT 4
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 5
54349: NEG
54350: PUSH
54351: LD_INT 5
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 3
54361: NEG
54362: PUSH
54363: LD_INT 5
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 5
54373: NEG
54374: PUSH
54375: LD_INT 3
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: LD_INT 3
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: LD_INT 4
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: LD_INT 3
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: LD_INT 2
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: LD_INT 3
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: LD_INT 4
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: LD_INT 2
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: LD_INT 4
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 4
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 4
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 5
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 5
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 4
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 3
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 3
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 3
54559: PUSH
54560: LD_INT 2
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 5
54570: PUSH
54571: LD_INT 2
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54625: LD_ADDR_VAR 0 32
54629: PUSH
54630: LD_INT 4
54632: NEG
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 4
54643: NEG
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 3
54655: NEG
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 3
54666: NEG
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 4
54677: NEG
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 5
54688: NEG
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 5
54699: NEG
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 5
54711: NEG
54712: PUSH
54713: LD_INT 2
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 3
54723: NEG
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 3
54734: NEG
54735: PUSH
54736: LD_INT 3
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 3
54746: NEG
54747: PUSH
54748: LD_INT 4
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: LD_INT 3
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 2
54770: NEG
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 3
54782: NEG
54783: PUSH
54784: LD_INT 2
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 4
54794: NEG
54795: PUSH
54796: LD_INT 3
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 4
54806: NEG
54807: PUSH
54808: LD_INT 4
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 2
54818: NEG
54819: PUSH
54820: LD_INT 4
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 4
54830: NEG
54831: PUSH
54832: LD_INT 2
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: LD_INT 4
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 5
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: LD_INT 4
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: LD_INT 3
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: LD_INT 3
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: LD_INT 4
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: LD_INT 5
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: LD_INT 3
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 2
54932: NEG
54933: PUSH
54934: LD_INT 5
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 3
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 3
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 4
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 4
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 3
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 2
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 2
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 2
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 4
55027: PUSH
55028: LD_INT 2
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 4
55037: PUSH
55038: LD_INT 4
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 4
55047: PUSH
55048: LD_INT 3
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 5
55057: PUSH
55058: LD_INT 4
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 5
55067: PUSH
55068: LD_INT 5
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 4
55077: PUSH
55078: LD_INT 5
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 3
55087: PUSH
55088: LD_INT 4
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 3
55097: PUSH
55098: LD_INT 3
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 5
55107: PUSH
55108: LD_INT 3
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 3
55117: PUSH
55118: LD_INT 5
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55172: LD_ADDR_VAR 0 33
55176: PUSH
55177: LD_INT 4
55179: NEG
55180: PUSH
55181: LD_INT 4
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 4
55191: NEG
55192: PUSH
55193: LD_INT 5
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 3
55203: NEG
55204: PUSH
55205: LD_INT 4
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 3
55215: NEG
55216: PUSH
55217: LD_INT 3
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 4
55227: NEG
55228: PUSH
55229: LD_INT 3
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 5
55239: NEG
55240: PUSH
55241: LD_INT 4
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 5
55251: NEG
55252: PUSH
55253: LD_INT 5
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 3
55263: NEG
55264: PUSH
55265: LD_INT 5
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 5
55275: NEG
55276: PUSH
55277: LD_INT 3
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: LD_INT 3
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: LD_INT 4
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: LD_INT 3
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: LD_INT 2
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 2
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: LD_INT 3
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: LD_INT 4
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 2
55366: PUSH
55367: LD_INT 2
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: LD_INT 4
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 4
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 4
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 5
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 5
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 4
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 3
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 3
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 3
55461: PUSH
55462: LD_INT 2
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 5
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 3
55482: PUSH
55483: LD_INT 3
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 3
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 4
55502: PUSH
55503: LD_INT 3
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 4
55512: PUSH
55513: LD_INT 4
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 3
55522: PUSH
55523: LD_INT 4
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: LD_INT 3
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: LD_INT 2
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 4
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 2
55562: PUSH
55563: LD_INT 4
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 4
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 3
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: LD_INT 4
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: LD_INT 5
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: LD_INT 5
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: LD_INT 4
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: LD_INT 3
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 2
55644: PUSH
55645: LD_INT 5
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: LD_INT 3
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55710: LD_ADDR_VAR 0 34
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 4
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: LD_INT 5
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: LD_INT 4
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: LD_INT 3
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 3
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: LD_INT 4
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: LD_INT 5
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 2
55796: PUSH
55797: LD_INT 3
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: LD_INT 5
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 3
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 3
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 4
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 4
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 3
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 2
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 2
55891: PUSH
55892: LD_INT 2
55894: NEG
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 4
55902: PUSH
55903: LD_INT 2
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 4
55912: PUSH
55913: LD_INT 4
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 4
55922: PUSH
55923: LD_INT 3
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 5
55932: PUSH
55933: LD_INT 4
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 5
55942: PUSH
55943: LD_INT 5
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 4
55952: PUSH
55953: LD_INT 5
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: LD_INT 4
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 3
55972: PUSH
55973: LD_INT 3
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 5
55982: PUSH
55983: LD_INT 3
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 3
55992: PUSH
55993: LD_INT 5
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: LD_INT 3
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: LD_INT 2
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: LD_INT 3
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: LD_INT 4
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 4
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: LD_INT 3
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 2
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 2
56074: PUSH
56075: LD_INT 4
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: LD_INT 2
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 4
56095: NEG
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 4
56106: NEG
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 3
56118: NEG
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 3
56129: NEG
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 4
56140: NEG
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 5
56151: NEG
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 5
56162: NEG
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 5
56174: NEG
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 3
56186: NEG
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: ST_TO_ADDR
// end ; end ;
56242: GO 56245
56244: POP
// case btype of b_depot , b_warehouse :
56245: LD_VAR 0 1
56249: PUSH
56250: LD_INT 0
56252: DOUBLE
56253: EQUAL
56254: IFTRUE 56264
56256: LD_INT 1
56258: DOUBLE
56259: EQUAL
56260: IFTRUE 56264
56262: GO 56465
56264: POP
// case nation of nation_american :
56265: LD_VAR 0 5
56269: PUSH
56270: LD_INT 1
56272: DOUBLE
56273: EQUAL
56274: IFTRUE 56278
56276: GO 56334
56278: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56279: LD_ADDR_VAR 0 9
56283: PUSH
56284: LD_VAR 0 11
56288: PUSH
56289: LD_VAR 0 12
56293: PUSH
56294: LD_VAR 0 13
56298: PUSH
56299: LD_VAR 0 14
56303: PUSH
56304: LD_VAR 0 15
56308: PUSH
56309: LD_VAR 0 16
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: PUSH
56322: LD_VAR 0 4
56326: PUSH
56327: LD_INT 1
56329: PLUS
56330: ARRAY
56331: ST_TO_ADDR
56332: GO 56463
56334: LD_INT 2
56336: DOUBLE
56337: EQUAL
56338: IFTRUE 56342
56340: GO 56398
56342: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56343: LD_ADDR_VAR 0 9
56347: PUSH
56348: LD_VAR 0 17
56352: PUSH
56353: LD_VAR 0 18
56357: PUSH
56358: LD_VAR 0 19
56362: PUSH
56363: LD_VAR 0 20
56367: PUSH
56368: LD_VAR 0 21
56372: PUSH
56373: LD_VAR 0 22
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: PUSH
56386: LD_VAR 0 4
56390: PUSH
56391: LD_INT 1
56393: PLUS
56394: ARRAY
56395: ST_TO_ADDR
56396: GO 56463
56398: LD_INT 3
56400: DOUBLE
56401: EQUAL
56402: IFTRUE 56406
56404: GO 56462
56406: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56407: LD_ADDR_VAR 0 9
56411: PUSH
56412: LD_VAR 0 23
56416: PUSH
56417: LD_VAR 0 24
56421: PUSH
56422: LD_VAR 0 25
56426: PUSH
56427: LD_VAR 0 26
56431: PUSH
56432: LD_VAR 0 27
56436: PUSH
56437: LD_VAR 0 28
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: PUSH
56450: LD_VAR 0 4
56454: PUSH
56455: LD_INT 1
56457: PLUS
56458: ARRAY
56459: ST_TO_ADDR
56460: GO 56463
56462: POP
56463: GO 57018
56465: LD_INT 2
56467: DOUBLE
56468: EQUAL
56469: IFTRUE 56479
56471: LD_INT 3
56473: DOUBLE
56474: EQUAL
56475: IFTRUE 56479
56477: GO 56535
56479: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56480: LD_ADDR_VAR 0 9
56484: PUSH
56485: LD_VAR 0 29
56489: PUSH
56490: LD_VAR 0 30
56494: PUSH
56495: LD_VAR 0 31
56499: PUSH
56500: LD_VAR 0 32
56504: PUSH
56505: LD_VAR 0 33
56509: PUSH
56510: LD_VAR 0 34
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: PUSH
56523: LD_VAR 0 4
56527: PUSH
56528: LD_INT 1
56530: PLUS
56531: ARRAY
56532: ST_TO_ADDR
56533: GO 57018
56535: LD_INT 16
56537: DOUBLE
56538: EQUAL
56539: IFTRUE 56597
56541: LD_INT 17
56543: DOUBLE
56544: EQUAL
56545: IFTRUE 56597
56547: LD_INT 18
56549: DOUBLE
56550: EQUAL
56551: IFTRUE 56597
56553: LD_INT 19
56555: DOUBLE
56556: EQUAL
56557: IFTRUE 56597
56559: LD_INT 22
56561: DOUBLE
56562: EQUAL
56563: IFTRUE 56597
56565: LD_INT 20
56567: DOUBLE
56568: EQUAL
56569: IFTRUE 56597
56571: LD_INT 21
56573: DOUBLE
56574: EQUAL
56575: IFTRUE 56597
56577: LD_INT 23
56579: DOUBLE
56580: EQUAL
56581: IFTRUE 56597
56583: LD_INT 24
56585: DOUBLE
56586: EQUAL
56587: IFTRUE 56597
56589: LD_INT 25
56591: DOUBLE
56592: EQUAL
56593: IFTRUE 56597
56595: GO 56653
56597: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56598: LD_ADDR_VAR 0 9
56602: PUSH
56603: LD_VAR 0 35
56607: PUSH
56608: LD_VAR 0 36
56612: PUSH
56613: LD_VAR 0 37
56617: PUSH
56618: LD_VAR 0 38
56622: PUSH
56623: LD_VAR 0 39
56627: PUSH
56628: LD_VAR 0 40
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: PUSH
56641: LD_VAR 0 4
56645: PUSH
56646: LD_INT 1
56648: PLUS
56649: ARRAY
56650: ST_TO_ADDR
56651: GO 57018
56653: LD_INT 6
56655: DOUBLE
56656: EQUAL
56657: IFTRUE 56709
56659: LD_INT 7
56661: DOUBLE
56662: EQUAL
56663: IFTRUE 56709
56665: LD_INT 8
56667: DOUBLE
56668: EQUAL
56669: IFTRUE 56709
56671: LD_INT 13
56673: DOUBLE
56674: EQUAL
56675: IFTRUE 56709
56677: LD_INT 12
56679: DOUBLE
56680: EQUAL
56681: IFTRUE 56709
56683: LD_INT 15
56685: DOUBLE
56686: EQUAL
56687: IFTRUE 56709
56689: LD_INT 11
56691: DOUBLE
56692: EQUAL
56693: IFTRUE 56709
56695: LD_INT 14
56697: DOUBLE
56698: EQUAL
56699: IFTRUE 56709
56701: LD_INT 10
56703: DOUBLE
56704: EQUAL
56705: IFTRUE 56709
56707: GO 56765
56709: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56710: LD_ADDR_VAR 0 9
56714: PUSH
56715: LD_VAR 0 41
56719: PUSH
56720: LD_VAR 0 42
56724: PUSH
56725: LD_VAR 0 43
56729: PUSH
56730: LD_VAR 0 44
56734: PUSH
56735: LD_VAR 0 45
56739: PUSH
56740: LD_VAR 0 46
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: PUSH
56753: LD_VAR 0 4
56757: PUSH
56758: LD_INT 1
56760: PLUS
56761: ARRAY
56762: ST_TO_ADDR
56763: GO 57018
56765: LD_INT 36
56767: DOUBLE
56768: EQUAL
56769: IFTRUE 56773
56771: GO 56829
56773: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56774: LD_ADDR_VAR 0 9
56778: PUSH
56779: LD_VAR 0 47
56783: PUSH
56784: LD_VAR 0 48
56788: PUSH
56789: LD_VAR 0 49
56793: PUSH
56794: LD_VAR 0 50
56798: PUSH
56799: LD_VAR 0 51
56803: PUSH
56804: LD_VAR 0 52
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: PUSH
56817: LD_VAR 0 4
56821: PUSH
56822: LD_INT 1
56824: PLUS
56825: ARRAY
56826: ST_TO_ADDR
56827: GO 57018
56829: LD_INT 4
56831: DOUBLE
56832: EQUAL
56833: IFTRUE 56855
56835: LD_INT 5
56837: DOUBLE
56838: EQUAL
56839: IFTRUE 56855
56841: LD_INT 34
56843: DOUBLE
56844: EQUAL
56845: IFTRUE 56855
56847: LD_INT 37
56849: DOUBLE
56850: EQUAL
56851: IFTRUE 56855
56853: GO 56911
56855: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56856: LD_ADDR_VAR 0 9
56860: PUSH
56861: LD_VAR 0 53
56865: PUSH
56866: LD_VAR 0 54
56870: PUSH
56871: LD_VAR 0 55
56875: PUSH
56876: LD_VAR 0 56
56880: PUSH
56881: LD_VAR 0 57
56885: PUSH
56886: LD_VAR 0 58
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: PUSH
56899: LD_VAR 0 4
56903: PUSH
56904: LD_INT 1
56906: PLUS
56907: ARRAY
56908: ST_TO_ADDR
56909: GO 57018
56911: LD_INT 31
56913: DOUBLE
56914: EQUAL
56915: IFTRUE 56961
56917: LD_INT 32
56919: DOUBLE
56920: EQUAL
56921: IFTRUE 56961
56923: LD_INT 33
56925: DOUBLE
56926: EQUAL
56927: IFTRUE 56961
56929: LD_INT 27
56931: DOUBLE
56932: EQUAL
56933: IFTRUE 56961
56935: LD_INT 26
56937: DOUBLE
56938: EQUAL
56939: IFTRUE 56961
56941: LD_INT 28
56943: DOUBLE
56944: EQUAL
56945: IFTRUE 56961
56947: LD_INT 29
56949: DOUBLE
56950: EQUAL
56951: IFTRUE 56961
56953: LD_INT 30
56955: DOUBLE
56956: EQUAL
56957: IFTRUE 56961
56959: GO 57017
56961: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56962: LD_ADDR_VAR 0 9
56966: PUSH
56967: LD_VAR 0 59
56971: PUSH
56972: LD_VAR 0 60
56976: PUSH
56977: LD_VAR 0 61
56981: PUSH
56982: LD_VAR 0 62
56986: PUSH
56987: LD_VAR 0 63
56991: PUSH
56992: LD_VAR 0 64
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: PUSH
57005: LD_VAR 0 4
57009: PUSH
57010: LD_INT 1
57012: PLUS
57013: ARRAY
57014: ST_TO_ADDR
57015: GO 57018
57017: POP
// temp_list2 = [ ] ;
57018: LD_ADDR_VAR 0 10
57022: PUSH
57023: EMPTY
57024: ST_TO_ADDR
// for i in temp_list do
57025: LD_ADDR_VAR 0 8
57029: PUSH
57030: LD_VAR 0 9
57034: PUSH
57035: FOR_IN
57036: IFFALSE 57088
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57038: LD_ADDR_VAR 0 10
57042: PUSH
57043: LD_VAR 0 10
57047: PUSH
57048: LD_VAR 0 8
57052: PUSH
57053: LD_INT 1
57055: ARRAY
57056: PUSH
57057: LD_VAR 0 2
57061: PLUS
57062: PUSH
57063: LD_VAR 0 8
57067: PUSH
57068: LD_INT 2
57070: ARRAY
57071: PUSH
57072: LD_VAR 0 3
57076: PLUS
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: EMPTY
57083: LIST
57084: ADD
57085: ST_TO_ADDR
57086: GO 57035
57088: POP
57089: POP
// result = temp_list2 ;
57090: LD_ADDR_VAR 0 7
57094: PUSH
57095: LD_VAR 0 10
57099: ST_TO_ADDR
// end ;
57100: LD_VAR 0 7
57104: RET
// export function EnemyInRange ( unit , dist ) ; begin
57105: LD_INT 0
57107: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57108: LD_ADDR_VAR 0 3
57112: PUSH
57113: LD_VAR 0 1
57117: PPUSH
57118: CALL_OW 255
57122: PPUSH
57123: LD_VAR 0 1
57127: PPUSH
57128: CALL_OW 250
57132: PPUSH
57133: LD_VAR 0 1
57137: PPUSH
57138: CALL_OW 251
57142: PPUSH
57143: LD_VAR 0 2
57147: PPUSH
57148: CALL 30501 0 4
57152: PUSH
57153: LD_INT 4
57155: ARRAY
57156: ST_TO_ADDR
// end ;
57157: LD_VAR 0 3
57161: RET
// export function PlayerSeeMe ( unit ) ; begin
57162: LD_INT 0
57164: PPUSH
// result := See ( your_side , unit ) ;
57165: LD_ADDR_VAR 0 2
57169: PUSH
57170: LD_OWVAR 2
57174: PPUSH
57175: LD_VAR 0 1
57179: PPUSH
57180: CALL_OW 292
57184: ST_TO_ADDR
// end ;
57185: LD_VAR 0 2
57189: RET
// export function ReverseDir ( unit ) ; begin
57190: LD_INT 0
57192: PPUSH
// if not unit then
57193: LD_VAR 0 1
57197: NOT
57198: IFFALSE 57202
// exit ;
57200: GO 57225
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57202: LD_ADDR_VAR 0 2
57206: PUSH
57207: LD_VAR 0 1
57211: PPUSH
57212: CALL_OW 254
57216: PUSH
57217: LD_INT 3
57219: PLUS
57220: PUSH
57221: LD_INT 6
57223: MOD
57224: ST_TO_ADDR
// end ;
57225: LD_VAR 0 2
57229: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57230: LD_INT 0
57232: PPUSH
57233: PPUSH
57234: PPUSH
57235: PPUSH
57236: PPUSH
// if not hexes then
57237: LD_VAR 0 2
57241: NOT
57242: IFFALSE 57246
// exit ;
57244: GO 57394
// dist := 9999 ;
57246: LD_ADDR_VAR 0 5
57250: PUSH
57251: LD_INT 9999
57253: ST_TO_ADDR
// for i = 1 to hexes do
57254: LD_ADDR_VAR 0 4
57258: PUSH
57259: DOUBLE
57260: LD_INT 1
57262: DEC
57263: ST_TO_ADDR
57264: LD_VAR 0 2
57268: PUSH
57269: FOR_TO
57270: IFFALSE 57382
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57272: LD_VAR 0 1
57276: PPUSH
57277: LD_VAR 0 2
57281: PUSH
57282: LD_VAR 0 4
57286: ARRAY
57287: PUSH
57288: LD_INT 1
57290: ARRAY
57291: PPUSH
57292: LD_VAR 0 2
57296: PUSH
57297: LD_VAR 0 4
57301: ARRAY
57302: PUSH
57303: LD_INT 2
57305: ARRAY
57306: PPUSH
57307: CALL_OW 297
57311: PUSH
57312: LD_VAR 0 5
57316: LESS
57317: IFFALSE 57380
// begin hex := hexes [ i ] ;
57319: LD_ADDR_VAR 0 7
57323: PUSH
57324: LD_VAR 0 2
57328: PUSH
57329: LD_VAR 0 4
57333: ARRAY
57334: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57335: LD_ADDR_VAR 0 5
57339: PUSH
57340: LD_VAR 0 1
57344: PPUSH
57345: LD_VAR 0 2
57349: PUSH
57350: LD_VAR 0 4
57354: ARRAY
57355: PUSH
57356: LD_INT 1
57358: ARRAY
57359: PPUSH
57360: LD_VAR 0 2
57364: PUSH
57365: LD_VAR 0 4
57369: ARRAY
57370: PUSH
57371: LD_INT 2
57373: ARRAY
57374: PPUSH
57375: CALL_OW 297
57379: ST_TO_ADDR
// end ; end ;
57380: GO 57269
57382: POP
57383: POP
// result := hex ;
57384: LD_ADDR_VAR 0 3
57388: PUSH
57389: LD_VAR 0 7
57393: ST_TO_ADDR
// end ;
57394: LD_VAR 0 3
57398: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57399: LD_INT 0
57401: PPUSH
57402: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57403: LD_VAR 0 1
57407: NOT
57408: PUSH
57409: LD_VAR 0 1
57413: PUSH
57414: LD_INT 21
57416: PUSH
57417: LD_INT 2
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 23
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PPUSH
57438: CALL_OW 69
57442: IN
57443: NOT
57444: OR
57445: IFFALSE 57449
// exit ;
57447: GO 57496
// for i = 1 to 3 do
57449: LD_ADDR_VAR 0 3
57453: PUSH
57454: DOUBLE
57455: LD_INT 1
57457: DEC
57458: ST_TO_ADDR
57459: LD_INT 3
57461: PUSH
57462: FOR_TO
57463: IFFALSE 57494
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57465: LD_VAR 0 1
57469: PPUSH
57470: CALL_OW 250
57474: PPUSH
57475: LD_VAR 0 1
57479: PPUSH
57480: CALL_OW 251
57484: PPUSH
57485: LD_INT 1
57487: PPUSH
57488: CALL_OW 453
57492: GO 57462
57494: POP
57495: POP
// end ;
57496: LD_VAR 0 2
57500: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57501: LD_INT 0
57503: PPUSH
57504: PPUSH
57505: PPUSH
57506: PPUSH
57507: PPUSH
57508: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57509: LD_VAR 0 1
57513: NOT
57514: PUSH
57515: LD_VAR 0 2
57519: NOT
57520: OR
57521: PUSH
57522: LD_VAR 0 1
57526: PPUSH
57527: CALL_OW 314
57531: OR
57532: IFFALSE 57536
// exit ;
57534: GO 57977
// x := GetX ( enemy_unit ) ;
57536: LD_ADDR_VAR 0 7
57540: PUSH
57541: LD_VAR 0 2
57545: PPUSH
57546: CALL_OW 250
57550: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57551: LD_ADDR_VAR 0 8
57555: PUSH
57556: LD_VAR 0 2
57560: PPUSH
57561: CALL_OW 251
57565: ST_TO_ADDR
// if not x or not y then
57566: LD_VAR 0 7
57570: NOT
57571: PUSH
57572: LD_VAR 0 8
57576: NOT
57577: OR
57578: IFFALSE 57582
// exit ;
57580: GO 57977
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57582: LD_ADDR_VAR 0 6
57586: PUSH
57587: LD_VAR 0 7
57591: PPUSH
57592: LD_INT 0
57594: PPUSH
57595: LD_INT 4
57597: PPUSH
57598: CALL_OW 272
57602: PUSH
57603: LD_VAR 0 8
57607: PPUSH
57608: LD_INT 0
57610: PPUSH
57611: LD_INT 4
57613: PPUSH
57614: CALL_OW 273
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_VAR 0 7
57627: PPUSH
57628: LD_INT 1
57630: PPUSH
57631: LD_INT 4
57633: PPUSH
57634: CALL_OW 272
57638: PUSH
57639: LD_VAR 0 8
57643: PPUSH
57644: LD_INT 1
57646: PPUSH
57647: LD_INT 4
57649: PPUSH
57650: CALL_OW 273
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_VAR 0 7
57663: PPUSH
57664: LD_INT 2
57666: PPUSH
57667: LD_INT 4
57669: PPUSH
57670: CALL_OW 272
57674: PUSH
57675: LD_VAR 0 8
57679: PPUSH
57680: LD_INT 2
57682: PPUSH
57683: LD_INT 4
57685: PPUSH
57686: CALL_OW 273
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_VAR 0 7
57699: PPUSH
57700: LD_INT 3
57702: PPUSH
57703: LD_INT 4
57705: PPUSH
57706: CALL_OW 272
57710: PUSH
57711: LD_VAR 0 8
57715: PPUSH
57716: LD_INT 3
57718: PPUSH
57719: LD_INT 4
57721: PPUSH
57722: CALL_OW 273
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_VAR 0 7
57735: PPUSH
57736: LD_INT 4
57738: PPUSH
57739: LD_INT 4
57741: PPUSH
57742: CALL_OW 272
57746: PUSH
57747: LD_VAR 0 8
57751: PPUSH
57752: LD_INT 4
57754: PPUSH
57755: LD_INT 4
57757: PPUSH
57758: CALL_OW 273
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_VAR 0 7
57771: PPUSH
57772: LD_INT 5
57774: PPUSH
57775: LD_INT 4
57777: PPUSH
57778: CALL_OW 272
57782: PUSH
57783: LD_VAR 0 8
57787: PPUSH
57788: LD_INT 5
57790: PPUSH
57791: LD_INT 4
57793: PPUSH
57794: CALL_OW 273
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: ST_TO_ADDR
// for i = tmp downto 1 do
57811: LD_ADDR_VAR 0 4
57815: PUSH
57816: DOUBLE
57817: LD_VAR 0 6
57821: INC
57822: ST_TO_ADDR
57823: LD_INT 1
57825: PUSH
57826: FOR_DOWNTO
57827: IFFALSE 57928
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57829: LD_VAR 0 6
57833: PUSH
57834: LD_VAR 0 4
57838: ARRAY
57839: PUSH
57840: LD_INT 1
57842: ARRAY
57843: PPUSH
57844: LD_VAR 0 6
57848: PUSH
57849: LD_VAR 0 4
57853: ARRAY
57854: PUSH
57855: LD_INT 2
57857: ARRAY
57858: PPUSH
57859: CALL_OW 488
57863: NOT
57864: PUSH
57865: LD_VAR 0 6
57869: PUSH
57870: LD_VAR 0 4
57874: ARRAY
57875: PUSH
57876: LD_INT 1
57878: ARRAY
57879: PPUSH
57880: LD_VAR 0 6
57884: PUSH
57885: LD_VAR 0 4
57889: ARRAY
57890: PUSH
57891: LD_INT 2
57893: ARRAY
57894: PPUSH
57895: CALL_OW 428
57899: PUSH
57900: LD_INT 0
57902: NONEQUAL
57903: OR
57904: IFFALSE 57926
// tmp := Delete ( tmp , i ) ;
57906: LD_ADDR_VAR 0 6
57910: PUSH
57911: LD_VAR 0 6
57915: PPUSH
57916: LD_VAR 0 4
57920: PPUSH
57921: CALL_OW 3
57925: ST_TO_ADDR
57926: GO 57826
57928: POP
57929: POP
// j := GetClosestHex ( unit , tmp ) ;
57930: LD_ADDR_VAR 0 5
57934: PUSH
57935: LD_VAR 0 1
57939: PPUSH
57940: LD_VAR 0 6
57944: PPUSH
57945: CALL 57230 0 2
57949: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57950: LD_VAR 0 1
57954: PPUSH
57955: LD_VAR 0 5
57959: PUSH
57960: LD_INT 1
57962: ARRAY
57963: PPUSH
57964: LD_VAR 0 5
57968: PUSH
57969: LD_INT 2
57971: ARRAY
57972: PPUSH
57973: CALL_OW 111
// end ;
57977: LD_VAR 0 3
57981: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57982: LD_INT 0
57984: PPUSH
57985: PPUSH
57986: PPUSH
// uc_side = 0 ;
57987: LD_ADDR_OWVAR 20
57991: PUSH
57992: LD_INT 0
57994: ST_TO_ADDR
// uc_nation = 0 ;
57995: LD_ADDR_OWVAR 21
57999: PUSH
58000: LD_INT 0
58002: ST_TO_ADDR
// InitHc_All ( ) ;
58003: CALL_OW 584
// InitVc ;
58007: CALL_OW 20
// if mastodonts then
58011: LD_VAR 0 6
58015: IFFALSE 58082
// for i = 1 to mastodonts do
58017: LD_ADDR_VAR 0 11
58021: PUSH
58022: DOUBLE
58023: LD_INT 1
58025: DEC
58026: ST_TO_ADDR
58027: LD_VAR 0 6
58031: PUSH
58032: FOR_TO
58033: IFFALSE 58080
// begin vc_chassis := 31 ;
58035: LD_ADDR_OWVAR 37
58039: PUSH
58040: LD_INT 31
58042: ST_TO_ADDR
// vc_control := control_rider ;
58043: LD_ADDR_OWVAR 38
58047: PUSH
58048: LD_INT 4
58050: ST_TO_ADDR
// animal := CreateVehicle ;
58051: LD_ADDR_VAR 0 12
58055: PUSH
58056: CALL_OW 45
58060: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58061: LD_VAR 0 12
58065: PPUSH
58066: LD_VAR 0 8
58070: PPUSH
58071: LD_INT 0
58073: PPUSH
58074: CALL 60270 0 3
// end ;
58078: GO 58032
58080: POP
58081: POP
// if horses then
58082: LD_VAR 0 5
58086: IFFALSE 58153
// for i = 1 to horses do
58088: LD_ADDR_VAR 0 11
58092: PUSH
58093: DOUBLE
58094: LD_INT 1
58096: DEC
58097: ST_TO_ADDR
58098: LD_VAR 0 5
58102: PUSH
58103: FOR_TO
58104: IFFALSE 58151
// begin hc_class := 21 ;
58106: LD_ADDR_OWVAR 28
58110: PUSH
58111: LD_INT 21
58113: ST_TO_ADDR
// hc_gallery :=  ;
58114: LD_ADDR_OWVAR 33
58118: PUSH
58119: LD_STRING 
58121: ST_TO_ADDR
// animal := CreateHuman ;
58122: LD_ADDR_VAR 0 12
58126: PUSH
58127: CALL_OW 44
58131: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58132: LD_VAR 0 12
58136: PPUSH
58137: LD_VAR 0 8
58141: PPUSH
58142: LD_INT 0
58144: PPUSH
58145: CALL 60270 0 3
// end ;
58149: GO 58103
58151: POP
58152: POP
// if birds then
58153: LD_VAR 0 1
58157: IFFALSE 58224
// for i = 1 to birds do
58159: LD_ADDR_VAR 0 11
58163: PUSH
58164: DOUBLE
58165: LD_INT 1
58167: DEC
58168: ST_TO_ADDR
58169: LD_VAR 0 1
58173: PUSH
58174: FOR_TO
58175: IFFALSE 58222
// begin hc_class = 18 ;
58177: LD_ADDR_OWVAR 28
58181: PUSH
58182: LD_INT 18
58184: ST_TO_ADDR
// hc_gallery =  ;
58185: LD_ADDR_OWVAR 33
58189: PUSH
58190: LD_STRING 
58192: ST_TO_ADDR
// animal := CreateHuman ;
58193: LD_ADDR_VAR 0 12
58197: PUSH
58198: CALL_OW 44
58202: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58203: LD_VAR 0 12
58207: PPUSH
58208: LD_VAR 0 8
58212: PPUSH
58213: LD_INT 0
58215: PPUSH
58216: CALL 60270 0 3
// end ;
58220: GO 58174
58222: POP
58223: POP
// if tigers then
58224: LD_VAR 0 2
58228: IFFALSE 58312
// for i = 1 to tigers do
58230: LD_ADDR_VAR 0 11
58234: PUSH
58235: DOUBLE
58236: LD_INT 1
58238: DEC
58239: ST_TO_ADDR
58240: LD_VAR 0 2
58244: PUSH
58245: FOR_TO
58246: IFFALSE 58310
// begin hc_class = class_tiger ;
58248: LD_ADDR_OWVAR 28
58252: PUSH
58253: LD_INT 14
58255: ST_TO_ADDR
// hc_gallery =  ;
58256: LD_ADDR_OWVAR 33
58260: PUSH
58261: LD_STRING 
58263: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58264: LD_ADDR_OWVAR 35
58268: PUSH
58269: LD_INT 7
58271: NEG
58272: PPUSH
58273: LD_INT 7
58275: PPUSH
58276: CALL_OW 12
58280: ST_TO_ADDR
// animal := CreateHuman ;
58281: LD_ADDR_VAR 0 12
58285: PUSH
58286: CALL_OW 44
58290: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58291: LD_VAR 0 12
58295: PPUSH
58296: LD_VAR 0 8
58300: PPUSH
58301: LD_INT 0
58303: PPUSH
58304: CALL 60270 0 3
// end ;
58308: GO 58245
58310: POP
58311: POP
// if apemans then
58312: LD_VAR 0 3
58316: IFFALSE 58439
// for i = 1 to apemans do
58318: LD_ADDR_VAR 0 11
58322: PUSH
58323: DOUBLE
58324: LD_INT 1
58326: DEC
58327: ST_TO_ADDR
58328: LD_VAR 0 3
58332: PUSH
58333: FOR_TO
58334: IFFALSE 58437
// begin hc_class = class_apeman ;
58336: LD_ADDR_OWVAR 28
58340: PUSH
58341: LD_INT 12
58343: ST_TO_ADDR
// hc_gallery =  ;
58344: LD_ADDR_OWVAR 33
58348: PUSH
58349: LD_STRING 
58351: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58352: LD_ADDR_OWVAR 35
58356: PUSH
58357: LD_INT 2
58359: NEG
58360: PPUSH
58361: LD_INT 2
58363: PPUSH
58364: CALL_OW 12
58368: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58369: LD_ADDR_OWVAR 31
58373: PUSH
58374: LD_INT 1
58376: PPUSH
58377: LD_INT 3
58379: PPUSH
58380: CALL_OW 12
58384: PUSH
58385: LD_INT 1
58387: PPUSH
58388: LD_INT 3
58390: PPUSH
58391: CALL_OW 12
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: ST_TO_ADDR
// animal := CreateHuman ;
58408: LD_ADDR_VAR 0 12
58412: PUSH
58413: CALL_OW 44
58417: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58418: LD_VAR 0 12
58422: PPUSH
58423: LD_VAR 0 8
58427: PPUSH
58428: LD_INT 0
58430: PPUSH
58431: CALL 60270 0 3
// end ;
58435: GO 58333
58437: POP
58438: POP
// if enchidnas then
58439: LD_VAR 0 4
58443: IFFALSE 58510
// for i = 1 to enchidnas do
58445: LD_ADDR_VAR 0 11
58449: PUSH
58450: DOUBLE
58451: LD_INT 1
58453: DEC
58454: ST_TO_ADDR
58455: LD_VAR 0 4
58459: PUSH
58460: FOR_TO
58461: IFFALSE 58508
// begin hc_class = 13 ;
58463: LD_ADDR_OWVAR 28
58467: PUSH
58468: LD_INT 13
58470: ST_TO_ADDR
// hc_gallery =  ;
58471: LD_ADDR_OWVAR 33
58475: PUSH
58476: LD_STRING 
58478: ST_TO_ADDR
// animal := CreateHuman ;
58479: LD_ADDR_VAR 0 12
58483: PUSH
58484: CALL_OW 44
58488: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58489: LD_VAR 0 12
58493: PPUSH
58494: LD_VAR 0 8
58498: PPUSH
58499: LD_INT 0
58501: PPUSH
58502: CALL 60270 0 3
// end ;
58506: GO 58460
58508: POP
58509: POP
// if fishes then
58510: LD_VAR 0 7
58514: IFFALSE 58581
// for i = 1 to fishes do
58516: LD_ADDR_VAR 0 11
58520: PUSH
58521: DOUBLE
58522: LD_INT 1
58524: DEC
58525: ST_TO_ADDR
58526: LD_VAR 0 7
58530: PUSH
58531: FOR_TO
58532: IFFALSE 58579
// begin hc_class = 20 ;
58534: LD_ADDR_OWVAR 28
58538: PUSH
58539: LD_INT 20
58541: ST_TO_ADDR
// hc_gallery =  ;
58542: LD_ADDR_OWVAR 33
58546: PUSH
58547: LD_STRING 
58549: ST_TO_ADDR
// animal := CreateHuman ;
58550: LD_ADDR_VAR 0 12
58554: PUSH
58555: CALL_OW 44
58559: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58560: LD_VAR 0 12
58564: PPUSH
58565: LD_VAR 0 9
58569: PPUSH
58570: LD_INT 0
58572: PPUSH
58573: CALL 60270 0 3
// end ;
58577: GO 58531
58579: POP
58580: POP
// end ;
58581: LD_VAR 0 10
58585: RET
// export function WantHeal ( sci , unit ) ; begin
58586: LD_INT 0
58588: PPUSH
// if GetTaskList ( sci ) > 0 then
58589: LD_VAR 0 1
58593: PPUSH
58594: CALL_OW 437
58598: PUSH
58599: LD_INT 0
58601: GREATER
58602: IFFALSE 58672
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58604: LD_VAR 0 1
58608: PPUSH
58609: CALL_OW 437
58613: PUSH
58614: LD_INT 1
58616: ARRAY
58617: PUSH
58618: LD_INT 1
58620: ARRAY
58621: PUSH
58622: LD_STRING l
58624: EQUAL
58625: PUSH
58626: LD_VAR 0 1
58630: PPUSH
58631: CALL_OW 437
58635: PUSH
58636: LD_INT 1
58638: ARRAY
58639: PUSH
58640: LD_INT 4
58642: ARRAY
58643: PUSH
58644: LD_VAR 0 2
58648: EQUAL
58649: AND
58650: IFFALSE 58662
// result := true else
58652: LD_ADDR_VAR 0 3
58656: PUSH
58657: LD_INT 1
58659: ST_TO_ADDR
58660: GO 58670
// result := false ;
58662: LD_ADDR_VAR 0 3
58666: PUSH
58667: LD_INT 0
58669: ST_TO_ADDR
// end else
58670: GO 58680
// result := false ;
58672: LD_ADDR_VAR 0 3
58676: PUSH
58677: LD_INT 0
58679: ST_TO_ADDR
// end ;
58680: LD_VAR 0 3
58684: RET
// export function HealTarget ( sci ) ; begin
58685: LD_INT 0
58687: PPUSH
// if not sci then
58688: LD_VAR 0 1
58692: NOT
58693: IFFALSE 58697
// exit ;
58695: GO 58762
// result := 0 ;
58697: LD_ADDR_VAR 0 2
58701: PUSH
58702: LD_INT 0
58704: ST_TO_ADDR
// if GetTaskList ( sci ) then
58705: LD_VAR 0 1
58709: PPUSH
58710: CALL_OW 437
58714: IFFALSE 58762
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58716: LD_VAR 0 1
58720: PPUSH
58721: CALL_OW 437
58725: PUSH
58726: LD_INT 1
58728: ARRAY
58729: PUSH
58730: LD_INT 1
58732: ARRAY
58733: PUSH
58734: LD_STRING l
58736: EQUAL
58737: IFFALSE 58762
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58739: LD_ADDR_VAR 0 2
58743: PUSH
58744: LD_VAR 0 1
58748: PPUSH
58749: CALL_OW 437
58753: PUSH
58754: LD_INT 1
58756: ARRAY
58757: PUSH
58758: LD_INT 4
58760: ARRAY
58761: ST_TO_ADDR
// end ;
58762: LD_VAR 0 2
58766: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58767: LD_INT 0
58769: PPUSH
58770: PPUSH
58771: PPUSH
58772: PPUSH
// if not base_units then
58773: LD_VAR 0 1
58777: NOT
58778: IFFALSE 58782
// exit ;
58780: GO 58869
// result := false ;
58782: LD_ADDR_VAR 0 2
58786: PUSH
58787: LD_INT 0
58789: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58790: LD_ADDR_VAR 0 5
58794: PUSH
58795: LD_VAR 0 1
58799: PPUSH
58800: LD_INT 21
58802: PUSH
58803: LD_INT 3
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PPUSH
58810: CALL_OW 72
58814: ST_TO_ADDR
// if not tmp then
58815: LD_VAR 0 5
58819: NOT
58820: IFFALSE 58824
// exit ;
58822: GO 58869
// for i in tmp do
58824: LD_ADDR_VAR 0 3
58828: PUSH
58829: LD_VAR 0 5
58833: PUSH
58834: FOR_IN
58835: IFFALSE 58867
// begin result := EnemyInRange ( i , 22 ) ;
58837: LD_ADDR_VAR 0 2
58841: PUSH
58842: LD_VAR 0 3
58846: PPUSH
58847: LD_INT 22
58849: PPUSH
58850: CALL 57105 0 2
58854: ST_TO_ADDR
// if result then
58855: LD_VAR 0 2
58859: IFFALSE 58865
// exit ;
58861: POP
58862: POP
58863: GO 58869
// end ;
58865: GO 58834
58867: POP
58868: POP
// end ;
58869: LD_VAR 0 2
58873: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58874: LD_INT 0
58876: PPUSH
58877: PPUSH
// if not units then
58878: LD_VAR 0 1
58882: NOT
58883: IFFALSE 58887
// exit ;
58885: GO 58957
// result := [ ] ;
58887: LD_ADDR_VAR 0 3
58891: PUSH
58892: EMPTY
58893: ST_TO_ADDR
// for i in units do
58894: LD_ADDR_VAR 0 4
58898: PUSH
58899: LD_VAR 0 1
58903: PUSH
58904: FOR_IN
58905: IFFALSE 58955
// if GetTag ( i ) = tag then
58907: LD_VAR 0 4
58911: PPUSH
58912: CALL_OW 110
58916: PUSH
58917: LD_VAR 0 2
58921: EQUAL
58922: IFFALSE 58953
// result := Replace ( result , result + 1 , i ) ;
58924: LD_ADDR_VAR 0 3
58928: PUSH
58929: LD_VAR 0 3
58933: PPUSH
58934: LD_VAR 0 3
58938: PUSH
58939: LD_INT 1
58941: PLUS
58942: PPUSH
58943: LD_VAR 0 4
58947: PPUSH
58948: CALL_OW 1
58952: ST_TO_ADDR
58953: GO 58904
58955: POP
58956: POP
// end ;
58957: LD_VAR 0 3
58961: RET
// export function IsDriver ( un ) ; begin
58962: LD_INT 0
58964: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58965: LD_ADDR_VAR 0 2
58969: PUSH
58970: LD_VAR 0 1
58974: PUSH
58975: LD_INT 55
58977: PUSH
58978: EMPTY
58979: LIST
58980: PPUSH
58981: CALL_OW 69
58985: IN
58986: ST_TO_ADDR
// end ;
58987: LD_VAR 0 2
58991: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58992: LD_INT 0
58994: PPUSH
58995: PPUSH
// list := [ ] ;
58996: LD_ADDR_VAR 0 5
59000: PUSH
59001: EMPTY
59002: ST_TO_ADDR
// case d of 0 :
59003: LD_VAR 0 3
59007: PUSH
59008: LD_INT 0
59010: DOUBLE
59011: EQUAL
59012: IFTRUE 59016
59014: GO 59149
59016: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59017: LD_ADDR_VAR 0 5
59021: PUSH
59022: LD_VAR 0 1
59026: PUSH
59027: LD_INT 4
59029: MINUS
59030: PUSH
59031: LD_VAR 0 2
59035: PUSH
59036: LD_INT 4
59038: MINUS
59039: PUSH
59040: LD_INT 2
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: LIST
59047: PUSH
59048: LD_VAR 0 1
59052: PUSH
59053: LD_INT 3
59055: MINUS
59056: PUSH
59057: LD_VAR 0 2
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: LIST
59069: PUSH
59070: LD_VAR 0 1
59074: PUSH
59075: LD_INT 4
59077: PLUS
59078: PUSH
59079: LD_VAR 0 2
59083: PUSH
59084: LD_INT 4
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: LIST
59091: PUSH
59092: LD_VAR 0 1
59096: PUSH
59097: LD_INT 3
59099: PLUS
59100: PUSH
59101: LD_VAR 0 2
59105: PUSH
59106: LD_INT 3
59108: PLUS
59109: PUSH
59110: LD_INT 5
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: LIST
59117: PUSH
59118: LD_VAR 0 1
59122: PUSH
59123: LD_VAR 0 2
59127: PUSH
59128: LD_INT 4
59130: PLUS
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: LIST
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: ST_TO_ADDR
// end ; 1 :
59147: GO 59847
59149: LD_INT 1
59151: DOUBLE
59152: EQUAL
59153: IFTRUE 59157
59155: GO 59290
59157: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59158: LD_ADDR_VAR 0 5
59162: PUSH
59163: LD_VAR 0 1
59167: PUSH
59168: LD_VAR 0 2
59172: PUSH
59173: LD_INT 4
59175: MINUS
59176: PUSH
59177: LD_INT 3
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: LIST
59184: PUSH
59185: LD_VAR 0 1
59189: PUSH
59190: LD_INT 3
59192: MINUS
59193: PUSH
59194: LD_VAR 0 2
59198: PUSH
59199: LD_INT 3
59201: MINUS
59202: PUSH
59203: LD_INT 2
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: LIST
59210: PUSH
59211: LD_VAR 0 1
59215: PUSH
59216: LD_INT 4
59218: MINUS
59219: PUSH
59220: LD_VAR 0 2
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: LIST
59232: PUSH
59233: LD_VAR 0 1
59237: PUSH
59238: LD_VAR 0 2
59242: PUSH
59243: LD_INT 3
59245: PLUS
59246: PUSH
59247: LD_INT 0
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: LIST
59254: PUSH
59255: LD_VAR 0 1
59259: PUSH
59260: LD_INT 4
59262: PLUS
59263: PUSH
59264: LD_VAR 0 2
59268: PUSH
59269: LD_INT 4
59271: PLUS
59272: PUSH
59273: LD_INT 5
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: LIST
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: ST_TO_ADDR
// end ; 2 :
59288: GO 59847
59290: LD_INT 2
59292: DOUBLE
59293: EQUAL
59294: IFTRUE 59298
59296: GO 59427
59298: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59299: LD_ADDR_VAR 0 5
59303: PUSH
59304: LD_VAR 0 1
59308: PUSH
59309: LD_VAR 0 2
59313: PUSH
59314: LD_INT 3
59316: MINUS
59317: PUSH
59318: LD_INT 3
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: LIST
59325: PUSH
59326: LD_VAR 0 1
59330: PUSH
59331: LD_INT 4
59333: PLUS
59334: PUSH
59335: LD_VAR 0 2
59339: PUSH
59340: LD_INT 4
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: LIST
59347: PUSH
59348: LD_VAR 0 1
59352: PUSH
59353: LD_VAR 0 2
59357: PUSH
59358: LD_INT 4
59360: PLUS
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: LIST
59369: PUSH
59370: LD_VAR 0 1
59374: PUSH
59375: LD_INT 3
59377: MINUS
59378: PUSH
59379: LD_VAR 0 2
59383: PUSH
59384: LD_INT 1
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: LIST
59391: PUSH
59392: LD_VAR 0 1
59396: PUSH
59397: LD_INT 4
59399: MINUS
59400: PUSH
59401: LD_VAR 0 2
59405: PUSH
59406: LD_INT 4
59408: MINUS
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: LIST
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: ST_TO_ADDR
// end ; 3 :
59425: GO 59847
59427: LD_INT 3
59429: DOUBLE
59430: EQUAL
59431: IFTRUE 59435
59433: GO 59568
59435: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59436: LD_ADDR_VAR 0 5
59440: PUSH
59441: LD_VAR 0 1
59445: PUSH
59446: LD_INT 3
59448: PLUS
59449: PUSH
59450: LD_VAR 0 2
59454: PUSH
59455: LD_INT 4
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: LIST
59462: PUSH
59463: LD_VAR 0 1
59467: PUSH
59468: LD_INT 4
59470: PLUS
59471: PUSH
59472: LD_VAR 0 2
59476: PUSH
59477: LD_INT 4
59479: PLUS
59480: PUSH
59481: LD_INT 5
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: LIST
59488: PUSH
59489: LD_VAR 0 1
59493: PUSH
59494: LD_INT 4
59496: MINUS
59497: PUSH
59498: LD_VAR 0 2
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: LIST
59510: PUSH
59511: LD_VAR 0 1
59515: PUSH
59516: LD_VAR 0 2
59520: PUSH
59521: LD_INT 4
59523: MINUS
59524: PUSH
59525: LD_INT 3
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: LIST
59532: PUSH
59533: LD_VAR 0 1
59537: PUSH
59538: LD_INT 3
59540: MINUS
59541: PUSH
59542: LD_VAR 0 2
59546: PUSH
59547: LD_INT 3
59549: MINUS
59550: PUSH
59551: LD_INT 2
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: LIST
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: ST_TO_ADDR
// end ; 4 :
59566: GO 59847
59568: LD_INT 4
59570: DOUBLE
59571: EQUAL
59572: IFTRUE 59576
59574: GO 59709
59576: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59577: LD_ADDR_VAR 0 5
59581: PUSH
59582: LD_VAR 0 1
59586: PUSH
59587: LD_VAR 0 2
59591: PUSH
59592: LD_INT 4
59594: PLUS
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: LIST
59603: PUSH
59604: LD_VAR 0 1
59608: PUSH
59609: LD_INT 3
59611: PLUS
59612: PUSH
59613: LD_VAR 0 2
59617: PUSH
59618: LD_INT 3
59620: PLUS
59621: PUSH
59622: LD_INT 5
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: LIST
59629: PUSH
59630: LD_VAR 0 1
59634: PUSH
59635: LD_INT 4
59637: PLUS
59638: PUSH
59639: LD_VAR 0 2
59643: PUSH
59644: LD_INT 4
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: LIST
59651: PUSH
59652: LD_VAR 0 1
59656: PUSH
59657: LD_VAR 0 2
59661: PUSH
59662: LD_INT 3
59664: MINUS
59665: PUSH
59666: LD_INT 3
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: LIST
59673: PUSH
59674: LD_VAR 0 1
59678: PUSH
59679: LD_INT 4
59681: MINUS
59682: PUSH
59683: LD_VAR 0 2
59687: PUSH
59688: LD_INT 4
59690: MINUS
59691: PUSH
59692: LD_INT 2
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: LIST
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: ST_TO_ADDR
// end ; 5 :
59707: GO 59847
59709: LD_INT 5
59711: DOUBLE
59712: EQUAL
59713: IFTRUE 59717
59715: GO 59846
59717: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59718: LD_ADDR_VAR 0 5
59722: PUSH
59723: LD_VAR 0 1
59727: PUSH
59728: LD_INT 4
59730: MINUS
59731: PUSH
59732: LD_VAR 0 2
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: LIST
59744: PUSH
59745: LD_VAR 0 1
59749: PUSH
59750: LD_VAR 0 2
59754: PUSH
59755: LD_INT 4
59757: MINUS
59758: PUSH
59759: LD_INT 3
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: LIST
59766: PUSH
59767: LD_VAR 0 1
59771: PUSH
59772: LD_INT 4
59774: PLUS
59775: PUSH
59776: LD_VAR 0 2
59780: PUSH
59781: LD_INT 4
59783: PLUS
59784: PUSH
59785: LD_INT 5
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: LIST
59792: PUSH
59793: LD_VAR 0 1
59797: PUSH
59798: LD_INT 3
59800: PLUS
59801: PUSH
59802: LD_VAR 0 2
59806: PUSH
59807: LD_INT 4
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: LIST
59814: PUSH
59815: LD_VAR 0 1
59819: PUSH
59820: LD_VAR 0 2
59824: PUSH
59825: LD_INT 3
59827: PLUS
59828: PUSH
59829: LD_INT 0
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: LIST
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: ST_TO_ADDR
// end ; end ;
59844: GO 59847
59846: POP
// result := list ;
59847: LD_ADDR_VAR 0 4
59851: PUSH
59852: LD_VAR 0 5
59856: ST_TO_ADDR
// end ;
59857: LD_VAR 0 4
59861: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59862: LD_INT 0
59864: PPUSH
59865: PPUSH
59866: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59867: LD_VAR 0 1
59871: NOT
59872: PUSH
59873: LD_VAR 0 2
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: LD_INT 2
59883: PUSH
59884: LD_INT 3
59886: PUSH
59887: LD_INT 4
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: IN
59896: NOT
59897: OR
59898: IFFALSE 59902
// exit ;
59900: GO 59994
// tmp := [ ] ;
59902: LD_ADDR_VAR 0 5
59906: PUSH
59907: EMPTY
59908: ST_TO_ADDR
// for i in units do
59909: LD_ADDR_VAR 0 4
59913: PUSH
59914: LD_VAR 0 1
59918: PUSH
59919: FOR_IN
59920: IFFALSE 59963
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59922: LD_ADDR_VAR 0 5
59926: PUSH
59927: LD_VAR 0 5
59931: PPUSH
59932: LD_VAR 0 5
59936: PUSH
59937: LD_INT 1
59939: PLUS
59940: PPUSH
59941: LD_VAR 0 4
59945: PPUSH
59946: LD_VAR 0 2
59950: PPUSH
59951: CALL_OW 259
59955: PPUSH
59956: CALL_OW 2
59960: ST_TO_ADDR
59961: GO 59919
59963: POP
59964: POP
// if not tmp then
59965: LD_VAR 0 5
59969: NOT
59970: IFFALSE 59974
// exit ;
59972: GO 59994
// result := SortListByListDesc ( units , tmp ) ;
59974: LD_ADDR_VAR 0 3
59978: PUSH
59979: LD_VAR 0 1
59983: PPUSH
59984: LD_VAR 0 5
59988: PPUSH
59989: CALL_OW 77
59993: ST_TO_ADDR
// end ;
59994: LD_VAR 0 3
59998: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59999: LD_INT 0
60001: PPUSH
60002: PPUSH
60003: PPUSH
// result := false ;
60004: LD_ADDR_VAR 0 3
60008: PUSH
60009: LD_INT 0
60011: ST_TO_ADDR
// x := GetX ( building ) ;
60012: LD_ADDR_VAR 0 4
60016: PUSH
60017: LD_VAR 0 2
60021: PPUSH
60022: CALL_OW 250
60026: ST_TO_ADDR
// y := GetY ( building ) ;
60027: LD_ADDR_VAR 0 5
60031: PUSH
60032: LD_VAR 0 2
60036: PPUSH
60037: CALL_OW 251
60041: ST_TO_ADDR
// if not building or not x or not y then
60042: LD_VAR 0 2
60046: NOT
60047: PUSH
60048: LD_VAR 0 4
60052: NOT
60053: OR
60054: PUSH
60055: LD_VAR 0 5
60059: NOT
60060: OR
60061: IFFALSE 60065
// exit ;
60063: GO 60157
// if GetTaskList ( unit ) then
60065: LD_VAR 0 1
60069: PPUSH
60070: CALL_OW 437
60074: IFFALSE 60157
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60076: LD_STRING e
60078: PUSH
60079: LD_VAR 0 1
60083: PPUSH
60084: CALL_OW 437
60088: PUSH
60089: LD_INT 1
60091: ARRAY
60092: PUSH
60093: LD_INT 1
60095: ARRAY
60096: EQUAL
60097: PUSH
60098: LD_VAR 0 4
60102: PUSH
60103: LD_VAR 0 1
60107: PPUSH
60108: CALL_OW 437
60112: PUSH
60113: LD_INT 1
60115: ARRAY
60116: PUSH
60117: LD_INT 2
60119: ARRAY
60120: EQUAL
60121: AND
60122: PUSH
60123: LD_VAR 0 5
60127: PUSH
60128: LD_VAR 0 1
60132: PPUSH
60133: CALL_OW 437
60137: PUSH
60138: LD_INT 1
60140: ARRAY
60141: PUSH
60142: LD_INT 3
60144: ARRAY
60145: EQUAL
60146: AND
60147: IFFALSE 60157
// result := true end ;
60149: LD_ADDR_VAR 0 3
60153: PUSH
60154: LD_INT 1
60156: ST_TO_ADDR
// end ;
60157: LD_VAR 0 3
60161: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60162: LD_INT 0
60164: PPUSH
// result := false ;
60165: LD_ADDR_VAR 0 4
60169: PUSH
60170: LD_INT 0
60172: ST_TO_ADDR
// if GetTaskList ( unit ) then
60173: LD_VAR 0 1
60177: PPUSH
60178: CALL_OW 437
60182: IFFALSE 60265
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60184: LD_STRING M
60186: PUSH
60187: LD_VAR 0 1
60191: PPUSH
60192: CALL_OW 437
60196: PUSH
60197: LD_INT 1
60199: ARRAY
60200: PUSH
60201: LD_INT 1
60203: ARRAY
60204: EQUAL
60205: PUSH
60206: LD_VAR 0 2
60210: PUSH
60211: LD_VAR 0 1
60215: PPUSH
60216: CALL_OW 437
60220: PUSH
60221: LD_INT 1
60223: ARRAY
60224: PUSH
60225: LD_INT 2
60227: ARRAY
60228: EQUAL
60229: AND
60230: PUSH
60231: LD_VAR 0 3
60235: PUSH
60236: LD_VAR 0 1
60240: PPUSH
60241: CALL_OW 437
60245: PUSH
60246: LD_INT 1
60248: ARRAY
60249: PUSH
60250: LD_INT 3
60252: ARRAY
60253: EQUAL
60254: AND
60255: IFFALSE 60265
// result := true ;
60257: LD_ADDR_VAR 0 4
60261: PUSH
60262: LD_INT 1
60264: ST_TO_ADDR
// end ; end ;
60265: LD_VAR 0 4
60269: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60270: LD_INT 0
60272: PPUSH
60273: PPUSH
60274: PPUSH
60275: PPUSH
// if not unit or not area then
60276: LD_VAR 0 1
60280: NOT
60281: PUSH
60282: LD_VAR 0 2
60286: NOT
60287: OR
60288: IFFALSE 60292
// exit ;
60290: GO 60456
// tmp := AreaToList ( area , i ) ;
60292: LD_ADDR_VAR 0 6
60296: PUSH
60297: LD_VAR 0 2
60301: PPUSH
60302: LD_VAR 0 5
60306: PPUSH
60307: CALL_OW 517
60311: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60312: LD_ADDR_VAR 0 5
60316: PUSH
60317: DOUBLE
60318: LD_INT 1
60320: DEC
60321: ST_TO_ADDR
60322: LD_VAR 0 6
60326: PUSH
60327: LD_INT 1
60329: ARRAY
60330: PUSH
60331: FOR_TO
60332: IFFALSE 60454
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60334: LD_ADDR_VAR 0 7
60338: PUSH
60339: LD_VAR 0 6
60343: PUSH
60344: LD_INT 1
60346: ARRAY
60347: PUSH
60348: LD_VAR 0 5
60352: ARRAY
60353: PUSH
60354: LD_VAR 0 6
60358: PUSH
60359: LD_INT 2
60361: ARRAY
60362: PUSH
60363: LD_VAR 0 5
60367: ARRAY
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60373: LD_VAR 0 7
60377: PUSH
60378: LD_INT 1
60380: ARRAY
60381: PPUSH
60382: LD_VAR 0 7
60386: PUSH
60387: LD_INT 2
60389: ARRAY
60390: PPUSH
60391: CALL_OW 428
60395: PUSH
60396: LD_INT 0
60398: EQUAL
60399: IFFALSE 60452
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60401: LD_VAR 0 1
60405: PPUSH
60406: LD_VAR 0 7
60410: PUSH
60411: LD_INT 1
60413: ARRAY
60414: PPUSH
60415: LD_VAR 0 7
60419: PUSH
60420: LD_INT 2
60422: ARRAY
60423: PPUSH
60424: LD_VAR 0 3
60428: PPUSH
60429: CALL_OW 48
// result := IsPlaced ( unit ) ;
60433: LD_ADDR_VAR 0 4
60437: PUSH
60438: LD_VAR 0 1
60442: PPUSH
60443: CALL_OW 305
60447: ST_TO_ADDR
// exit ;
60448: POP
60449: POP
60450: GO 60456
// end ; end ;
60452: GO 60331
60454: POP
60455: POP
// end ;
60456: LD_VAR 0 4
60460: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60461: LD_INT 0
60463: PPUSH
60464: PPUSH
60465: PPUSH
// if not side or side > 8 then
60466: LD_VAR 0 1
60470: NOT
60471: PUSH
60472: LD_VAR 0 1
60476: PUSH
60477: LD_INT 8
60479: GREATER
60480: OR
60481: IFFALSE 60485
// exit ;
60483: GO 60672
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60485: LD_ADDR_VAR 0 4
60489: PUSH
60490: LD_INT 22
60492: PUSH
60493: LD_VAR 0 1
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 21
60504: PUSH
60505: LD_INT 3
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PPUSH
60516: CALL_OW 69
60520: ST_TO_ADDR
// if not tmp then
60521: LD_VAR 0 4
60525: NOT
60526: IFFALSE 60530
// exit ;
60528: GO 60672
// enable_addtolog := true ;
60530: LD_ADDR_OWVAR 81
60534: PUSH
60535: LD_INT 1
60537: ST_TO_ADDR
// AddToLog ( [ ) ;
60538: LD_STRING [
60540: PPUSH
60541: CALL_OW 561
// for i in tmp do
60545: LD_ADDR_VAR 0 3
60549: PUSH
60550: LD_VAR 0 4
60554: PUSH
60555: FOR_IN
60556: IFFALSE 60663
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60558: LD_STRING [
60560: PUSH
60561: LD_VAR 0 3
60565: PPUSH
60566: CALL_OW 266
60570: STR
60571: PUSH
60572: LD_STRING , 
60574: STR
60575: PUSH
60576: LD_VAR 0 3
60580: PPUSH
60581: CALL_OW 250
60585: STR
60586: PUSH
60587: LD_STRING , 
60589: STR
60590: PUSH
60591: LD_VAR 0 3
60595: PPUSH
60596: CALL_OW 251
60600: STR
60601: PUSH
60602: LD_STRING , 
60604: STR
60605: PUSH
60606: LD_VAR 0 3
60610: PPUSH
60611: CALL_OW 254
60615: STR
60616: PUSH
60617: LD_STRING , 
60619: STR
60620: PUSH
60621: LD_VAR 0 3
60625: PPUSH
60626: LD_INT 1
60628: PPUSH
60629: CALL_OW 268
60633: STR
60634: PUSH
60635: LD_STRING , 
60637: STR
60638: PUSH
60639: LD_VAR 0 3
60643: PPUSH
60644: LD_INT 2
60646: PPUSH
60647: CALL_OW 268
60651: STR
60652: PUSH
60653: LD_STRING ],
60655: STR
60656: PPUSH
60657: CALL_OW 561
// end ;
60661: GO 60555
60663: POP
60664: POP
// AddToLog ( ]; ) ;
60665: LD_STRING ];
60667: PPUSH
60668: CALL_OW 561
// end ;
60672: LD_VAR 0 2
60676: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60677: LD_INT 0
60679: PPUSH
60680: PPUSH
60681: PPUSH
60682: PPUSH
60683: PPUSH
// if not area or not rate or not max then
60684: LD_VAR 0 1
60688: NOT
60689: PUSH
60690: LD_VAR 0 2
60694: NOT
60695: OR
60696: PUSH
60697: LD_VAR 0 4
60701: NOT
60702: OR
60703: IFFALSE 60707
// exit ;
60705: GO 60899
// while 1 do
60707: LD_INT 1
60709: IFFALSE 60899
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60711: LD_ADDR_VAR 0 9
60715: PUSH
60716: LD_VAR 0 1
60720: PPUSH
60721: LD_INT 1
60723: PPUSH
60724: CALL_OW 287
60728: PUSH
60729: LD_INT 10
60731: MUL
60732: ST_TO_ADDR
// r := rate / 10 ;
60733: LD_ADDR_VAR 0 7
60737: PUSH
60738: LD_VAR 0 2
60742: PUSH
60743: LD_INT 10
60745: DIVREAL
60746: ST_TO_ADDR
// time := 1 1$00 ;
60747: LD_ADDR_VAR 0 8
60751: PUSH
60752: LD_INT 2100
60754: ST_TO_ADDR
// if amount < min then
60755: LD_VAR 0 9
60759: PUSH
60760: LD_VAR 0 3
60764: LESS
60765: IFFALSE 60783
// r := r * 2 else
60767: LD_ADDR_VAR 0 7
60771: PUSH
60772: LD_VAR 0 7
60776: PUSH
60777: LD_INT 2
60779: MUL
60780: ST_TO_ADDR
60781: GO 60809
// if amount > max then
60783: LD_VAR 0 9
60787: PUSH
60788: LD_VAR 0 4
60792: GREATER
60793: IFFALSE 60809
// r := r / 2 ;
60795: LD_ADDR_VAR 0 7
60799: PUSH
60800: LD_VAR 0 7
60804: PUSH
60805: LD_INT 2
60807: DIVREAL
60808: ST_TO_ADDR
// time := time / r ;
60809: LD_ADDR_VAR 0 8
60813: PUSH
60814: LD_VAR 0 8
60818: PUSH
60819: LD_VAR 0 7
60823: DIVREAL
60824: ST_TO_ADDR
// if time < 0 then
60825: LD_VAR 0 8
60829: PUSH
60830: LD_INT 0
60832: LESS
60833: IFFALSE 60850
// time := time * - 1 ;
60835: LD_ADDR_VAR 0 8
60839: PUSH
60840: LD_VAR 0 8
60844: PUSH
60845: LD_INT 1
60847: NEG
60848: MUL
60849: ST_TO_ADDR
// wait ( time ) ;
60850: LD_VAR 0 8
60854: PPUSH
60855: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60859: LD_INT 35
60861: PPUSH
60862: LD_INT 875
60864: PPUSH
60865: CALL_OW 12
60869: PPUSH
60870: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60874: LD_INT 1
60876: PPUSH
60877: LD_INT 5
60879: PPUSH
60880: CALL_OW 12
60884: PPUSH
60885: LD_VAR 0 1
60889: PPUSH
60890: LD_INT 1
60892: PPUSH
60893: CALL_OW 55
// end ;
60897: GO 60707
// end ;
60899: LD_VAR 0 5
60903: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60904: LD_INT 0
60906: PPUSH
60907: PPUSH
60908: PPUSH
60909: PPUSH
60910: PPUSH
60911: PPUSH
60912: PPUSH
60913: PPUSH
// if not turrets or not factories then
60914: LD_VAR 0 1
60918: NOT
60919: PUSH
60920: LD_VAR 0 2
60924: NOT
60925: OR
60926: IFFALSE 60930
// exit ;
60928: GO 61237
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60930: LD_ADDR_VAR 0 10
60934: PUSH
60935: LD_INT 5
60937: PUSH
60938: LD_INT 6
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 2
60947: PUSH
60948: LD_INT 4
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 3
60957: PUSH
60958: LD_INT 5
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 24
60972: PUSH
60973: LD_INT 25
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 23
60982: PUSH
60983: LD_INT 27
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 42
60996: PUSH
60997: LD_INT 43
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 44
61006: PUSH
61007: LD_INT 46
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 45
61016: PUSH
61017: LD_INT 47
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: LIST
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: LIST
61033: ST_TO_ADDR
// result := [ ] ;
61034: LD_ADDR_VAR 0 3
61038: PUSH
61039: EMPTY
61040: ST_TO_ADDR
// for i in turrets do
61041: LD_ADDR_VAR 0 4
61045: PUSH
61046: LD_VAR 0 1
61050: PUSH
61051: FOR_IN
61052: IFFALSE 61235
// begin nat := GetNation ( i ) ;
61054: LD_ADDR_VAR 0 7
61058: PUSH
61059: LD_VAR 0 4
61063: PPUSH
61064: CALL_OW 248
61068: ST_TO_ADDR
// weapon := 0 ;
61069: LD_ADDR_VAR 0 8
61073: PUSH
61074: LD_INT 0
61076: ST_TO_ADDR
// if not nat then
61077: LD_VAR 0 7
61081: NOT
61082: IFFALSE 61086
// continue ;
61084: GO 61051
// for j in list [ nat ] do
61086: LD_ADDR_VAR 0 5
61090: PUSH
61091: LD_VAR 0 10
61095: PUSH
61096: LD_VAR 0 7
61100: ARRAY
61101: PUSH
61102: FOR_IN
61103: IFFALSE 61144
// if GetBWeapon ( i ) = j [ 1 ] then
61105: LD_VAR 0 4
61109: PPUSH
61110: CALL_OW 269
61114: PUSH
61115: LD_VAR 0 5
61119: PUSH
61120: LD_INT 1
61122: ARRAY
61123: EQUAL
61124: IFFALSE 61142
// begin weapon := j [ 2 ] ;
61126: LD_ADDR_VAR 0 8
61130: PUSH
61131: LD_VAR 0 5
61135: PUSH
61136: LD_INT 2
61138: ARRAY
61139: ST_TO_ADDR
// break ;
61140: GO 61144
// end ;
61142: GO 61102
61144: POP
61145: POP
// if not weapon then
61146: LD_VAR 0 8
61150: NOT
61151: IFFALSE 61155
// continue ;
61153: GO 61051
// for k in factories do
61155: LD_ADDR_VAR 0 6
61159: PUSH
61160: LD_VAR 0 2
61164: PUSH
61165: FOR_IN
61166: IFFALSE 61231
// begin weapons := AvailableWeaponList ( k ) ;
61168: LD_ADDR_VAR 0 9
61172: PUSH
61173: LD_VAR 0 6
61177: PPUSH
61178: CALL_OW 478
61182: ST_TO_ADDR
// if not weapons then
61183: LD_VAR 0 9
61187: NOT
61188: IFFALSE 61192
// continue ;
61190: GO 61165
// if weapon in weapons then
61192: LD_VAR 0 8
61196: PUSH
61197: LD_VAR 0 9
61201: IN
61202: IFFALSE 61229
// begin result := [ i , weapon ] ;
61204: LD_ADDR_VAR 0 3
61208: PUSH
61209: LD_VAR 0 4
61213: PUSH
61214: LD_VAR 0 8
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: ST_TO_ADDR
// exit ;
61223: POP
61224: POP
61225: POP
61226: POP
61227: GO 61237
// end ; end ;
61229: GO 61165
61231: POP
61232: POP
// end ;
61233: GO 61051
61235: POP
61236: POP
// end ;
61237: LD_VAR 0 3
61241: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61242: LD_INT 0
61244: PPUSH
// if not side or side > 8 then
61245: LD_VAR 0 3
61249: NOT
61250: PUSH
61251: LD_VAR 0 3
61255: PUSH
61256: LD_INT 8
61258: GREATER
61259: OR
61260: IFFALSE 61264
// exit ;
61262: GO 61323
// if not range then
61264: LD_VAR 0 4
61268: NOT
61269: IFFALSE 61280
// range := - 12 ;
61271: LD_ADDR_VAR 0 4
61275: PUSH
61276: LD_INT 12
61278: NEG
61279: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61280: LD_VAR 0 1
61284: PPUSH
61285: LD_VAR 0 2
61289: PPUSH
61290: LD_VAR 0 3
61294: PPUSH
61295: LD_VAR 0 4
61299: PPUSH
61300: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61304: LD_VAR 0 1
61308: PPUSH
61309: LD_VAR 0 2
61313: PPUSH
61314: LD_VAR 0 3
61318: PPUSH
61319: CALL_OW 331
// end ;
61323: LD_VAR 0 5
61327: RET
// export function Video ( mode ) ; begin
61328: LD_INT 0
61330: PPUSH
// ingame_video = mode ;
61331: LD_ADDR_OWVAR 52
61335: PUSH
61336: LD_VAR 0 1
61340: ST_TO_ADDR
// interface_hidden = mode ;
61341: LD_ADDR_OWVAR 54
61345: PUSH
61346: LD_VAR 0 1
61350: ST_TO_ADDR
// end ;
61351: LD_VAR 0 2
61355: RET
// export function Join ( array , element ) ; begin
61356: LD_INT 0
61358: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61359: LD_ADDR_VAR 0 3
61363: PUSH
61364: LD_VAR 0 1
61368: PPUSH
61369: LD_VAR 0 1
61373: PUSH
61374: LD_INT 1
61376: PLUS
61377: PPUSH
61378: LD_VAR 0 2
61382: PPUSH
61383: CALL_OW 1
61387: ST_TO_ADDR
// end ;
61388: LD_VAR 0 3
61392: RET
// export function JoinUnion ( array , element ) ; begin
61393: LD_INT 0
61395: PPUSH
// result := array union element ;
61396: LD_ADDR_VAR 0 3
61400: PUSH
61401: LD_VAR 0 1
61405: PUSH
61406: LD_VAR 0 2
61410: UNION
61411: ST_TO_ADDR
// end ;
61412: LD_VAR 0 3
61416: RET
// export function GetBehemoths ( side ) ; begin
61417: LD_INT 0
61419: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61420: LD_ADDR_VAR 0 2
61424: PUSH
61425: LD_INT 22
61427: PUSH
61428: LD_VAR 0 1
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 31
61439: PUSH
61440: LD_INT 25
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PPUSH
61451: CALL_OW 69
61455: ST_TO_ADDR
// end ;
61456: LD_VAR 0 2
61460: RET
// export function Shuffle ( array ) ; var i , index ; begin
61461: LD_INT 0
61463: PPUSH
61464: PPUSH
61465: PPUSH
// result := [ ] ;
61466: LD_ADDR_VAR 0 2
61470: PUSH
61471: EMPTY
61472: ST_TO_ADDR
// if not array then
61473: LD_VAR 0 1
61477: NOT
61478: IFFALSE 61482
// exit ;
61480: GO 61581
// Randomize ;
61482: CALL_OW 10
// for i = array downto 1 do
61486: LD_ADDR_VAR 0 3
61490: PUSH
61491: DOUBLE
61492: LD_VAR 0 1
61496: INC
61497: ST_TO_ADDR
61498: LD_INT 1
61500: PUSH
61501: FOR_DOWNTO
61502: IFFALSE 61579
// begin index := rand ( 1 , array ) ;
61504: LD_ADDR_VAR 0 4
61508: PUSH
61509: LD_INT 1
61511: PPUSH
61512: LD_VAR 0 1
61516: PPUSH
61517: CALL_OW 12
61521: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61522: LD_ADDR_VAR 0 2
61526: PUSH
61527: LD_VAR 0 2
61531: PPUSH
61532: LD_VAR 0 2
61536: PUSH
61537: LD_INT 1
61539: PLUS
61540: PPUSH
61541: LD_VAR 0 1
61545: PUSH
61546: LD_VAR 0 4
61550: ARRAY
61551: PPUSH
61552: CALL_OW 2
61556: ST_TO_ADDR
// array := Delete ( array , index ) ;
61557: LD_ADDR_VAR 0 1
61561: PUSH
61562: LD_VAR 0 1
61566: PPUSH
61567: LD_VAR 0 4
61571: PPUSH
61572: CALL_OW 3
61576: ST_TO_ADDR
// end ;
61577: GO 61501
61579: POP
61580: POP
// end ;
61581: LD_VAR 0 2
61585: RET
// export function GetBaseMaterials ( base ) ; begin
61586: LD_INT 0
61588: PPUSH
// result := [ 0 , 0 , 0 ] ;
61589: LD_ADDR_VAR 0 2
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: LD_INT 0
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: LIST
61607: ST_TO_ADDR
// if not base then
61608: LD_VAR 0 1
61612: NOT
61613: IFFALSE 61617
// exit ;
61615: GO 61666
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61617: LD_ADDR_VAR 0 2
61621: PUSH
61622: LD_VAR 0 1
61626: PPUSH
61627: LD_INT 1
61629: PPUSH
61630: CALL_OW 275
61634: PUSH
61635: LD_VAR 0 1
61639: PPUSH
61640: LD_INT 2
61642: PPUSH
61643: CALL_OW 275
61647: PUSH
61648: LD_VAR 0 1
61652: PPUSH
61653: LD_INT 3
61655: PPUSH
61656: CALL_OW 275
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: LIST
61665: ST_TO_ADDR
// end ;
61666: LD_VAR 0 2
61670: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61671: LD_INT 0
61673: PPUSH
61674: PPUSH
// result := array ;
61675: LD_ADDR_VAR 0 3
61679: PUSH
61680: LD_VAR 0 1
61684: ST_TO_ADDR
// if size > 0 then
61685: LD_VAR 0 2
61689: PUSH
61690: LD_INT 0
61692: GREATER
61693: IFFALSE 61739
// for i := array downto size do
61695: LD_ADDR_VAR 0 4
61699: PUSH
61700: DOUBLE
61701: LD_VAR 0 1
61705: INC
61706: ST_TO_ADDR
61707: LD_VAR 0 2
61711: PUSH
61712: FOR_DOWNTO
61713: IFFALSE 61737
// result := Delete ( result , result ) ;
61715: LD_ADDR_VAR 0 3
61719: PUSH
61720: LD_VAR 0 3
61724: PPUSH
61725: LD_VAR 0 3
61729: PPUSH
61730: CALL_OW 3
61734: ST_TO_ADDR
61735: GO 61712
61737: POP
61738: POP
// end ;
61739: LD_VAR 0 3
61743: RET
// export function ComExit ( unit ) ; var tmp ; begin
61744: LD_INT 0
61746: PPUSH
61747: PPUSH
// if not IsInUnit ( unit ) then
61748: LD_VAR 0 1
61752: PPUSH
61753: CALL_OW 310
61757: NOT
61758: IFFALSE 61762
// exit ;
61760: GO 61822
// tmp := IsInUnit ( unit ) ;
61762: LD_ADDR_VAR 0 3
61766: PUSH
61767: LD_VAR 0 1
61771: PPUSH
61772: CALL_OW 310
61776: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61777: LD_VAR 0 3
61781: PPUSH
61782: CALL_OW 247
61786: PUSH
61787: LD_INT 2
61789: EQUAL
61790: IFFALSE 61803
// ComExitVehicle ( unit ) else
61792: LD_VAR 0 1
61796: PPUSH
61797: CALL_OW 121
61801: GO 61812
// ComExitBuilding ( unit ) ;
61803: LD_VAR 0 1
61807: PPUSH
61808: CALL_OW 122
// result := tmp ;
61812: LD_ADDR_VAR 0 2
61816: PUSH
61817: LD_VAR 0 3
61821: ST_TO_ADDR
// end ;
61822: LD_VAR 0 2
61826: RET
// export function ComExitAll ( units ) ; var i ; begin
61827: LD_INT 0
61829: PPUSH
61830: PPUSH
// if not units then
61831: LD_VAR 0 1
61835: NOT
61836: IFFALSE 61840
// exit ;
61838: GO 61866
// for i in units do
61840: LD_ADDR_VAR 0 3
61844: PUSH
61845: LD_VAR 0 1
61849: PUSH
61850: FOR_IN
61851: IFFALSE 61864
// ComExit ( i ) ;
61853: LD_VAR 0 3
61857: PPUSH
61858: CALL 61744 0 1
61862: GO 61850
61864: POP
61865: POP
// end ;
61866: LD_VAR 0 2
61870: RET
// export function ResetHc ; begin
61871: LD_INT 0
61873: PPUSH
// InitHc ;
61874: CALL_OW 19
// hc_importance := 0 ;
61878: LD_ADDR_OWVAR 32
61882: PUSH
61883: LD_INT 0
61885: ST_TO_ADDR
// end ;
61886: LD_VAR 0 1
61890: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61891: LD_INT 0
61893: PPUSH
61894: PPUSH
61895: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61896: LD_ADDR_VAR 0 6
61900: PUSH
61901: LD_VAR 0 1
61905: PUSH
61906: LD_VAR 0 3
61910: PLUS
61911: PUSH
61912: LD_INT 2
61914: DIV
61915: ST_TO_ADDR
// if _x < 0 then
61916: LD_VAR 0 6
61920: PUSH
61921: LD_INT 0
61923: LESS
61924: IFFALSE 61941
// _x := _x * - 1 ;
61926: LD_ADDR_VAR 0 6
61930: PUSH
61931: LD_VAR 0 6
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: MUL
61940: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61941: LD_ADDR_VAR 0 7
61945: PUSH
61946: LD_VAR 0 2
61950: PUSH
61951: LD_VAR 0 4
61955: PLUS
61956: PUSH
61957: LD_INT 2
61959: DIV
61960: ST_TO_ADDR
// if _y < 0 then
61961: LD_VAR 0 7
61965: PUSH
61966: LD_INT 0
61968: LESS
61969: IFFALSE 61986
// _y := _y * - 1 ;
61971: LD_ADDR_VAR 0 7
61975: PUSH
61976: LD_VAR 0 7
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: MUL
61985: ST_TO_ADDR
// result := [ _x , _y ] ;
61986: LD_ADDR_VAR 0 5
61990: PUSH
61991: LD_VAR 0 6
61995: PUSH
61996: LD_VAR 0 7
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: ST_TO_ADDR
// end ;
62005: LD_VAR 0 5
62009: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62010: LD_INT 0
62012: PPUSH
62013: PPUSH
62014: PPUSH
62015: PPUSH
// task := GetTaskList ( unit ) ;
62016: LD_ADDR_VAR 0 7
62020: PUSH
62021: LD_VAR 0 1
62025: PPUSH
62026: CALL_OW 437
62030: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62031: LD_VAR 0 7
62035: NOT
62036: PUSH
62037: LD_VAR 0 1
62041: PPUSH
62042: LD_VAR 0 2
62046: PPUSH
62047: CALL_OW 308
62051: NOT
62052: AND
62053: IFFALSE 62057
// exit ;
62055: GO 62175
// if IsInArea ( unit , area ) then
62057: LD_VAR 0 1
62061: PPUSH
62062: LD_VAR 0 2
62066: PPUSH
62067: CALL_OW 308
62071: IFFALSE 62089
// begin ComMoveToArea ( unit , goAway ) ;
62073: LD_VAR 0 1
62077: PPUSH
62078: LD_VAR 0 3
62082: PPUSH
62083: CALL_OW 113
// exit ;
62087: GO 62175
// end ; if task [ 1 ] [ 1 ] <> M then
62089: LD_VAR 0 7
62093: PUSH
62094: LD_INT 1
62096: ARRAY
62097: PUSH
62098: LD_INT 1
62100: ARRAY
62101: PUSH
62102: LD_STRING M
62104: NONEQUAL
62105: IFFALSE 62109
// exit ;
62107: GO 62175
// x := task [ 1 ] [ 2 ] ;
62109: LD_ADDR_VAR 0 5
62113: PUSH
62114: LD_VAR 0 7
62118: PUSH
62119: LD_INT 1
62121: ARRAY
62122: PUSH
62123: LD_INT 2
62125: ARRAY
62126: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62127: LD_ADDR_VAR 0 6
62131: PUSH
62132: LD_VAR 0 7
62136: PUSH
62137: LD_INT 1
62139: ARRAY
62140: PUSH
62141: LD_INT 3
62143: ARRAY
62144: ST_TO_ADDR
// if InArea ( x , y , area ) then
62145: LD_VAR 0 5
62149: PPUSH
62150: LD_VAR 0 6
62154: PPUSH
62155: LD_VAR 0 2
62159: PPUSH
62160: CALL_OW 309
62164: IFFALSE 62175
// ComStop ( unit ) ;
62166: LD_VAR 0 1
62170: PPUSH
62171: CALL_OW 141
// end ;
62175: LD_VAR 0 4
62179: RET
// export function Abs ( value ) ; begin
62180: LD_INT 0
62182: PPUSH
// result := value ;
62183: LD_ADDR_VAR 0 2
62187: PUSH
62188: LD_VAR 0 1
62192: ST_TO_ADDR
// if value < 0 then
62193: LD_VAR 0 1
62197: PUSH
62198: LD_INT 0
62200: LESS
62201: IFFALSE 62218
// result := value * - 1 ;
62203: LD_ADDR_VAR 0 2
62207: PUSH
62208: LD_VAR 0 1
62212: PUSH
62213: LD_INT 1
62215: NEG
62216: MUL
62217: ST_TO_ADDR
// end ;
62218: LD_VAR 0 2
62222: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62223: LD_INT 0
62225: PPUSH
62226: PPUSH
62227: PPUSH
62228: PPUSH
62229: PPUSH
62230: PPUSH
62231: PPUSH
62232: PPUSH
// if not unit or not building then
62233: LD_VAR 0 1
62237: NOT
62238: PUSH
62239: LD_VAR 0 2
62243: NOT
62244: OR
62245: IFFALSE 62249
// exit ;
62247: GO 62475
// x := GetX ( building ) ;
62249: LD_ADDR_VAR 0 4
62253: PUSH
62254: LD_VAR 0 2
62258: PPUSH
62259: CALL_OW 250
62263: ST_TO_ADDR
// y := GetY ( building ) ;
62264: LD_ADDR_VAR 0 6
62268: PUSH
62269: LD_VAR 0 2
62273: PPUSH
62274: CALL_OW 251
62278: ST_TO_ADDR
// d := GetDir ( building ) ;
62279: LD_ADDR_VAR 0 8
62283: PUSH
62284: LD_VAR 0 2
62288: PPUSH
62289: CALL_OW 254
62293: ST_TO_ADDR
// r := 4 ;
62294: LD_ADDR_VAR 0 9
62298: PUSH
62299: LD_INT 4
62301: ST_TO_ADDR
// for i := 1 to 5 do
62302: LD_ADDR_VAR 0 10
62306: PUSH
62307: DOUBLE
62308: LD_INT 1
62310: DEC
62311: ST_TO_ADDR
62312: LD_INT 5
62314: PUSH
62315: FOR_TO
62316: IFFALSE 62473
// begin _x := ShiftX ( x , d , r + i ) ;
62318: LD_ADDR_VAR 0 5
62322: PUSH
62323: LD_VAR 0 4
62327: PPUSH
62328: LD_VAR 0 8
62332: PPUSH
62333: LD_VAR 0 9
62337: PUSH
62338: LD_VAR 0 10
62342: PLUS
62343: PPUSH
62344: CALL_OW 272
62348: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62349: LD_ADDR_VAR 0 7
62353: PUSH
62354: LD_VAR 0 6
62358: PPUSH
62359: LD_VAR 0 8
62363: PPUSH
62364: LD_VAR 0 9
62368: PUSH
62369: LD_VAR 0 10
62373: PLUS
62374: PPUSH
62375: CALL_OW 273
62379: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62380: LD_VAR 0 5
62384: PPUSH
62385: LD_VAR 0 7
62389: PPUSH
62390: CALL_OW 488
62394: PUSH
62395: LD_VAR 0 5
62399: PPUSH
62400: LD_VAR 0 7
62404: PPUSH
62405: CALL_OW 428
62409: PPUSH
62410: CALL_OW 247
62414: PUSH
62415: LD_INT 3
62417: PUSH
62418: LD_INT 2
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: IN
62425: NOT
62426: AND
62427: IFFALSE 62471
// begin ComMoveXY ( unit , _x , _y ) ;
62429: LD_VAR 0 1
62433: PPUSH
62434: LD_VAR 0 5
62438: PPUSH
62439: LD_VAR 0 7
62443: PPUSH
62444: CALL_OW 111
// result := [ _x , _y ] ;
62448: LD_ADDR_VAR 0 3
62452: PUSH
62453: LD_VAR 0 5
62457: PUSH
62458: LD_VAR 0 7
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: ST_TO_ADDR
// exit ;
62467: POP
62468: POP
62469: GO 62475
// end ; end ;
62471: GO 62315
62473: POP
62474: POP
// end ;
62475: LD_VAR 0 3
62479: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62480: LD_INT 0
62482: PPUSH
62483: PPUSH
62484: PPUSH
// result := 0 ;
62485: LD_ADDR_VAR 0 3
62489: PUSH
62490: LD_INT 0
62492: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62493: LD_VAR 0 1
62497: PUSH
62498: LD_INT 0
62500: LESS
62501: PUSH
62502: LD_VAR 0 1
62506: PUSH
62507: LD_INT 8
62509: GREATER
62510: OR
62511: PUSH
62512: LD_VAR 0 2
62516: PUSH
62517: LD_INT 0
62519: LESS
62520: OR
62521: PUSH
62522: LD_VAR 0 2
62526: PUSH
62527: LD_INT 8
62529: GREATER
62530: OR
62531: IFFALSE 62535
// exit ;
62533: GO 62610
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62535: LD_ADDR_VAR 0 4
62539: PUSH
62540: LD_INT 22
62542: PUSH
62543: LD_VAR 0 2
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PPUSH
62552: CALL_OW 69
62556: PUSH
62557: FOR_IN
62558: IFFALSE 62608
// begin un := UnitShoot ( i ) ;
62560: LD_ADDR_VAR 0 5
62564: PUSH
62565: LD_VAR 0 4
62569: PPUSH
62570: CALL_OW 504
62574: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62575: LD_VAR 0 5
62579: PPUSH
62580: CALL_OW 255
62584: PUSH
62585: LD_VAR 0 1
62589: EQUAL
62590: IFFALSE 62606
// begin result := un ;
62592: LD_ADDR_VAR 0 3
62596: PUSH
62597: LD_VAR 0 5
62601: ST_TO_ADDR
// exit ;
62602: POP
62603: POP
62604: GO 62610
// end ; end ;
62606: GO 62557
62608: POP
62609: POP
// end ;
62610: LD_VAR 0 3
62614: RET
// export function GetCargoBay ( units ) ; begin
62615: LD_INT 0
62617: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62618: LD_ADDR_VAR 0 2
62622: PUSH
62623: LD_VAR 0 1
62627: PPUSH
62628: LD_INT 2
62630: PUSH
62631: LD_INT 34
62633: PUSH
62634: LD_INT 12
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 34
62643: PUSH
62644: LD_INT 51
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 34
62653: PUSH
62654: LD_INT 32
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 34
62663: PUSH
62664: LD_EXP 59
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: PPUSH
62680: CALL_OW 72
62684: ST_TO_ADDR
// end ;
62685: LD_VAR 0 2
62689: RET
// export function Negate ( value ) ; begin
62690: LD_INT 0
62692: PPUSH
// result := not value ;
62693: LD_ADDR_VAR 0 2
62697: PUSH
62698: LD_VAR 0 1
62702: NOT
62703: ST_TO_ADDR
// end ;
62704: LD_VAR 0 2
62708: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
62709: LD_INT 0
62711: PPUSH
// if x1 = x2 then
62712: LD_VAR 0 1
62716: PUSH
62717: LD_VAR 0 3
62721: EQUAL
62722: IFFALSE 62756
// begin if y1 > y2 then
62724: LD_VAR 0 2
62728: PUSH
62729: LD_VAR 0 4
62733: GREATER
62734: IFFALSE 62746
// result := 0 else
62736: LD_ADDR_VAR 0 5
62740: PUSH
62741: LD_INT 0
62743: ST_TO_ADDR
62744: GO 62754
// result := 3 ;
62746: LD_ADDR_VAR 0 5
62750: PUSH
62751: LD_INT 3
62753: ST_TO_ADDR
// exit ;
62754: GO 62842
// end ; if y1 = y2 then
62756: LD_VAR 0 2
62760: PUSH
62761: LD_VAR 0 4
62765: EQUAL
62766: IFFALSE 62800
// begin if x1 > x2 then
62768: LD_VAR 0 1
62772: PUSH
62773: LD_VAR 0 3
62777: GREATER
62778: IFFALSE 62790
// result := 1 else
62780: LD_ADDR_VAR 0 5
62784: PUSH
62785: LD_INT 1
62787: ST_TO_ADDR
62788: GO 62798
// result := 4 ;
62790: LD_ADDR_VAR 0 5
62794: PUSH
62795: LD_INT 4
62797: ST_TO_ADDR
// exit ;
62798: GO 62842
// end ; if x1 > x2 and y1 > y2 then
62800: LD_VAR 0 1
62804: PUSH
62805: LD_VAR 0 3
62809: GREATER
62810: PUSH
62811: LD_VAR 0 2
62815: PUSH
62816: LD_VAR 0 4
62820: GREATER
62821: AND
62822: IFFALSE 62834
// result := 2 else
62824: LD_ADDR_VAR 0 5
62828: PUSH
62829: LD_INT 2
62831: ST_TO_ADDR
62832: GO 62842
// result := 5 ;
62834: LD_ADDR_VAR 0 5
62838: PUSH
62839: LD_INT 5
62841: ST_TO_ADDR
// end ;
62842: LD_VAR 0 5
62846: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62847: LD_INT 0
62849: PPUSH
62850: PPUSH
// if not driver or not IsInUnit ( driver ) then
62851: LD_VAR 0 1
62855: NOT
62856: PUSH
62857: LD_VAR 0 1
62861: PPUSH
62862: CALL_OW 310
62866: NOT
62867: OR
62868: IFFALSE 62872
// exit ;
62870: GO 62962
// vehicle := IsInUnit ( driver ) ;
62872: LD_ADDR_VAR 0 3
62876: PUSH
62877: LD_VAR 0 1
62881: PPUSH
62882: CALL_OW 310
62886: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62887: LD_VAR 0 1
62891: PPUSH
62892: LD_STRING \
62894: PUSH
62895: LD_INT 0
62897: PUSH
62898: LD_INT 0
62900: PUSH
62901: LD_INT 0
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: LD_INT 0
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: PUSH
62922: LD_STRING E
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: LD_INT 0
62930: PUSH
62931: LD_VAR 0 3
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: LD_INT 0
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PPUSH
62958: CALL_OW 446
// end ;
62962: LD_VAR 0 2
62966: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62967: LD_INT 0
62969: PPUSH
62970: PPUSH
// if not driver or not IsInUnit ( driver ) then
62971: LD_VAR 0 1
62975: NOT
62976: PUSH
62977: LD_VAR 0 1
62981: PPUSH
62982: CALL_OW 310
62986: NOT
62987: OR
62988: IFFALSE 62992
// exit ;
62990: GO 63082
// vehicle := IsInUnit ( driver ) ;
62992: LD_ADDR_VAR 0 3
62996: PUSH
62997: LD_VAR 0 1
63001: PPUSH
63002: CALL_OW 310
63006: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63007: LD_VAR 0 1
63011: PPUSH
63012: LD_STRING \
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: LD_INT 0
63023: PUSH
63024: LD_INT 0
63026: PUSH
63027: LD_INT 0
63029: PUSH
63030: LD_INT 0
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: PUSH
63042: LD_STRING E
63044: PUSH
63045: LD_INT 0
63047: PUSH
63048: LD_INT 0
63050: PUSH
63051: LD_VAR 0 3
63055: PUSH
63056: LD_INT 0
63058: PUSH
63059: LD_INT 0
63061: PUSH
63062: LD_INT 0
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PPUSH
63078: CALL_OW 447
// end ;
63082: LD_VAR 0 2
63086: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63087: LD_INT 0
63089: PPUSH
63090: PPUSH
63091: PPUSH
// tmp := [ ] ;
63092: LD_ADDR_VAR 0 5
63096: PUSH
63097: EMPTY
63098: ST_TO_ADDR
// for i in units do
63099: LD_ADDR_VAR 0 4
63103: PUSH
63104: LD_VAR 0 1
63108: PUSH
63109: FOR_IN
63110: IFFALSE 63148
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63112: LD_ADDR_VAR 0 5
63116: PUSH
63117: LD_VAR 0 5
63121: PPUSH
63122: LD_VAR 0 5
63126: PUSH
63127: LD_INT 1
63129: PLUS
63130: PPUSH
63131: LD_VAR 0 4
63135: PPUSH
63136: CALL_OW 256
63140: PPUSH
63141: CALL_OW 2
63145: ST_TO_ADDR
63146: GO 63109
63148: POP
63149: POP
// if not tmp then
63150: LD_VAR 0 5
63154: NOT
63155: IFFALSE 63159
// exit ;
63157: GO 63207
// if asc then
63159: LD_VAR 0 2
63163: IFFALSE 63187
// result := SortListByListAsc ( units , tmp ) else
63165: LD_ADDR_VAR 0 3
63169: PUSH
63170: LD_VAR 0 1
63174: PPUSH
63175: LD_VAR 0 5
63179: PPUSH
63180: CALL_OW 76
63184: ST_TO_ADDR
63185: GO 63207
// result := SortListByListDesc ( units , tmp ) ;
63187: LD_ADDR_VAR 0 3
63191: PUSH
63192: LD_VAR 0 1
63196: PPUSH
63197: LD_VAR 0 5
63201: PPUSH
63202: CALL_OW 77
63206: ST_TO_ADDR
// end ;
63207: LD_VAR 0 3
63211: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63212: LD_INT 0
63214: PPUSH
63215: PPUSH
// task := GetTaskList ( mech ) ;
63216: LD_ADDR_VAR 0 4
63220: PUSH
63221: LD_VAR 0 1
63225: PPUSH
63226: CALL_OW 437
63230: ST_TO_ADDR
// if not task then
63231: LD_VAR 0 4
63235: NOT
63236: IFFALSE 63240
// exit ;
63238: GO 63282
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63240: LD_ADDR_VAR 0 3
63244: PUSH
63245: LD_VAR 0 4
63249: PUSH
63250: LD_INT 1
63252: ARRAY
63253: PUSH
63254: LD_INT 1
63256: ARRAY
63257: PUSH
63258: LD_STRING r
63260: EQUAL
63261: PUSH
63262: LD_VAR 0 4
63266: PUSH
63267: LD_INT 1
63269: ARRAY
63270: PUSH
63271: LD_INT 4
63273: ARRAY
63274: PUSH
63275: LD_VAR 0 2
63279: EQUAL
63280: AND
63281: ST_TO_ADDR
// end ;
63282: LD_VAR 0 3
63286: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63287: LD_INT 0
63289: PPUSH
// SetDir ( unit , d ) ;
63290: LD_VAR 0 1
63294: PPUSH
63295: LD_VAR 0 4
63299: PPUSH
63300: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63304: LD_VAR 0 1
63308: PPUSH
63309: LD_VAR 0 2
63313: PPUSH
63314: LD_VAR 0 3
63318: PPUSH
63319: LD_VAR 0 5
63323: PPUSH
63324: CALL_OW 48
// end ;
63328: LD_VAR 0 6
63332: RET
// export function ToNaturalNumber ( number ) ; begin
63333: LD_INT 0
63335: PPUSH
// result := number div 1 ;
63336: LD_ADDR_VAR 0 2
63340: PUSH
63341: LD_VAR 0 1
63345: PUSH
63346: LD_INT 1
63348: DIV
63349: ST_TO_ADDR
// if number < 0 then
63350: LD_VAR 0 1
63354: PUSH
63355: LD_INT 0
63357: LESS
63358: IFFALSE 63368
// result := 0 ;
63360: LD_ADDR_VAR 0 2
63364: PUSH
63365: LD_INT 0
63367: ST_TO_ADDR
// end ;
63368: LD_VAR 0 2
63372: RET
// export function SortByClass ( units , class ) ; var un ; begin
63373: LD_INT 0
63375: PPUSH
63376: PPUSH
// if not units or not class then
63377: LD_VAR 0 1
63381: NOT
63382: PUSH
63383: LD_VAR 0 2
63387: NOT
63388: OR
63389: IFFALSE 63393
// exit ;
63391: GO 63488
// result := [ ] ;
63393: LD_ADDR_VAR 0 3
63397: PUSH
63398: EMPTY
63399: ST_TO_ADDR
// for un in units do
63400: LD_ADDR_VAR 0 4
63404: PUSH
63405: LD_VAR 0 1
63409: PUSH
63410: FOR_IN
63411: IFFALSE 63486
// if GetClass ( un ) = class then
63413: LD_VAR 0 4
63417: PPUSH
63418: CALL_OW 257
63422: PUSH
63423: LD_VAR 0 2
63427: EQUAL
63428: IFFALSE 63455
// result := Insert ( result , 1 , un ) else
63430: LD_ADDR_VAR 0 3
63434: PUSH
63435: LD_VAR 0 3
63439: PPUSH
63440: LD_INT 1
63442: PPUSH
63443: LD_VAR 0 4
63447: PPUSH
63448: CALL_OW 2
63452: ST_TO_ADDR
63453: GO 63484
// result := Replace ( result , result + 1 , un ) ;
63455: LD_ADDR_VAR 0 3
63459: PUSH
63460: LD_VAR 0 3
63464: PPUSH
63465: LD_VAR 0 3
63469: PUSH
63470: LD_INT 1
63472: PLUS
63473: PPUSH
63474: LD_VAR 0 4
63478: PPUSH
63479: CALL_OW 1
63483: ST_TO_ADDR
63484: GO 63410
63486: POP
63487: POP
// end ;
63488: LD_VAR 0 3
63492: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , side , tag ; begin
63493: LD_INT 0
63495: PPUSH
63496: PPUSH
63497: PPUSH
63498: PPUSH
63499: PPUSH
// if not units then
63500: LD_VAR 0 1
63504: NOT
63505: IFFALSE 63509
// exit ;
63507: GO 63815
// side := GetSide ( units [ 1 ] ) ;
63509: LD_ADDR_VAR 0 6
63513: PUSH
63514: LD_VAR 0 1
63518: PUSH
63519: LD_INT 1
63521: ARRAY
63522: PPUSH
63523: CALL_OW 255
63527: ST_TO_ADDR
// for i in units do
63528: LD_ADDR_VAR 0 4
63532: PUSH
63533: LD_VAR 0 1
63537: PUSH
63538: FOR_IN
63539: IFFALSE 63813
// begin if IsOk ( i ) then
63541: LD_VAR 0 4
63545: PPUSH
63546: CALL_OW 302
63550: IFFALSE 63811
// begin tag := GetTag ( i ) + 1 ;
63552: LD_ADDR_VAR 0 7
63556: PUSH
63557: LD_VAR 0 4
63561: PPUSH
63562: CALL_OW 110
63566: PUSH
63567: LD_INT 1
63569: PLUS
63570: ST_TO_ADDR
// if path > tag then
63571: LD_VAR 0 2
63575: PUSH
63576: LD_VAR 0 7
63580: GREATER
63581: IFFALSE 63759
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
63583: LD_ADDR_VAR 0 5
63587: PUSH
63588: LD_INT 81
63590: PUSH
63591: LD_VAR 0 6
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 91
63602: PUSH
63603: LD_VAR 0 4
63607: PUSH
63608: LD_INT 12
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: LIST
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PPUSH
63620: CALL_OW 69
63624: ST_TO_ADDR
// if enemy then
63625: LD_VAR 0 5
63629: IFFALSE 63657
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63631: LD_VAR 0 4
63635: PPUSH
63636: LD_VAR 0 5
63640: PPUSH
63641: LD_VAR 0 4
63645: PPUSH
63646: CALL_OW 74
63650: PPUSH
63651: CALL_OW 115
63655: GO 63757
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63657: LD_VAR 0 4
63661: PPUSH
63662: LD_VAR 0 2
63666: PUSH
63667: LD_VAR 0 7
63671: ARRAY
63672: PUSH
63673: LD_INT 1
63675: ARRAY
63676: PPUSH
63677: LD_VAR 0 2
63681: PUSH
63682: LD_VAR 0 7
63686: ARRAY
63687: PUSH
63688: LD_INT 2
63690: ARRAY
63691: PPUSH
63692: CALL_OW 297
63696: PUSH
63697: LD_INT 6
63699: GREATER
63700: IFFALSE 63743
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63702: LD_VAR 0 4
63706: PPUSH
63707: LD_VAR 0 2
63711: PUSH
63712: LD_VAR 0 7
63716: ARRAY
63717: PUSH
63718: LD_INT 1
63720: ARRAY
63721: PPUSH
63722: LD_VAR 0 2
63726: PUSH
63727: LD_VAR 0 7
63731: ARRAY
63732: PUSH
63733: LD_INT 2
63735: ARRAY
63736: PPUSH
63737: CALL_OW 114
63741: GO 63757
// SetTag ( i , tag ) ;
63743: LD_VAR 0 4
63747: PPUSH
63748: LD_VAR 0 7
63752: PPUSH
63753: CALL_OW 109
// end else
63757: GO 63811
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63759: LD_ADDR_VAR 0 5
63763: PUSH
63764: LD_INT 81
63766: PUSH
63767: LD_VAR 0 6
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PPUSH
63776: CALL_OW 69
63780: ST_TO_ADDR
// if enemy then
63781: LD_VAR 0 5
63785: IFFALSE 63811
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63787: LD_VAR 0 4
63791: PPUSH
63792: LD_VAR 0 5
63796: PPUSH
63797: LD_VAR 0 4
63801: PPUSH
63802: CALL_OW 74
63806: PPUSH
63807: CALL_OW 115
// end ; end ; end ;
63811: GO 63538
63813: POP
63814: POP
// end ; end_of_file
63815: LD_VAR 0 3
63819: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
63820: LD_INT 0
63822: PPUSH
// ar_miner := 81 ;
63823: LD_ADDR_EXP 65
63827: PUSH
63828: LD_INT 81
63830: ST_TO_ADDR
// ar_crane := 88 ;
63831: LD_ADDR_EXP 64
63835: PUSH
63836: LD_INT 88
63838: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
63839: LD_ADDR_EXP 59
63843: PUSH
63844: LD_INT 89
63846: ST_TO_ADDR
// us_hack := 99 ;
63847: LD_ADDR_EXP 60
63851: PUSH
63852: LD_INT 99
63854: ST_TO_ADDR
// us_artillery := 97 ;
63855: LD_ADDR_EXP 61
63859: PUSH
63860: LD_INT 97
63862: ST_TO_ADDR
// ar_bio_bomb := 91 ;
63863: LD_ADDR_EXP 62
63867: PUSH
63868: LD_INT 91
63870: ST_TO_ADDR
// ar_mortar := 92 ;
63871: LD_ADDR_EXP 63
63875: PUSH
63876: LD_INT 92
63878: ST_TO_ADDR
// ru_radar := 98 ;
63879: LD_ADDR_EXP 58
63883: PUSH
63884: LD_INT 98
63886: ST_TO_ADDR
// tech_Artillery := 80 ;
63887: LD_ADDR_EXP 66
63891: PUSH
63892: LD_INT 80
63894: ST_TO_ADDR
// tech_RadMat := 81 ;
63895: LD_ADDR_EXP 67
63899: PUSH
63900: LD_INT 81
63902: ST_TO_ADDR
// tech_BasicTools := 82 ;
63903: LD_ADDR_EXP 68
63907: PUSH
63908: LD_INT 82
63910: ST_TO_ADDR
// tech_Cargo := 83 ;
63911: LD_ADDR_EXP 69
63915: PUSH
63916: LD_INT 83
63918: ST_TO_ADDR
// tech_Track := 84 ;
63919: LD_ADDR_EXP 70
63923: PUSH
63924: LD_INT 84
63926: ST_TO_ADDR
// tech_Crane := 85 ;
63927: LD_ADDR_EXP 71
63931: PUSH
63932: LD_INT 85
63934: ST_TO_ADDR
// tech_Bulldozer := 86 ;
63935: LD_ADDR_EXP 72
63939: PUSH
63940: LD_INT 86
63942: ST_TO_ADDR
// tech_Hovercraft := 87 ;
63943: LD_ADDR_EXP 73
63947: PUSH
63948: LD_INT 87
63950: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
63951: LD_ADDR_EXP 74
63955: PUSH
63956: LD_INT 88
63958: ST_TO_ADDR
// class_mastodont := 31 ;
63959: LD_ADDR_EXP 75
63963: PUSH
63964: LD_INT 31
63966: ST_TO_ADDR
// class_horse := 21 ;
63967: LD_ADDR_EXP 76
63971: PUSH
63972: LD_INT 21
63974: ST_TO_ADDR
// end ;
63975: LD_VAR 0 1
63979: RET
// every 1 do
63980: GO 63982
63982: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
63983: CALL 63820 0 0
63987: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63988: LD_INT 0
63990: PPUSH
// if p2 = 100 then
63991: LD_VAR 0 2
63995: PUSH
63996: LD_INT 100
63998: EQUAL
63999: IFFALSE 64948
// begin if not StreamModeActive then
64001: LD_EXP 77
64005: NOT
64006: IFFALSE 64016
// StreamModeActive := true ;
64008: LD_ADDR_EXP 77
64012: PUSH
64013: LD_INT 1
64015: ST_TO_ADDR
// if p3 = 0 then
64016: LD_VAR 0 3
64020: PUSH
64021: LD_INT 0
64023: EQUAL
64024: IFFALSE 64030
// InitStreamMode ;
64026: CALL 65108 0 0
// if p3 = 1 then
64030: LD_VAR 0 3
64034: PUSH
64035: LD_INT 1
64037: EQUAL
64038: IFFALSE 64048
// sRocket := true ;
64040: LD_ADDR_EXP 82
64044: PUSH
64045: LD_INT 1
64047: ST_TO_ADDR
// if p3 = 2 then
64048: LD_VAR 0 3
64052: PUSH
64053: LD_INT 2
64055: EQUAL
64056: IFFALSE 64066
// sSpeed := true ;
64058: LD_ADDR_EXP 81
64062: PUSH
64063: LD_INT 1
64065: ST_TO_ADDR
// if p3 = 3 then
64066: LD_VAR 0 3
64070: PUSH
64071: LD_INT 3
64073: EQUAL
64074: IFFALSE 64084
// sEngine := true ;
64076: LD_ADDR_EXP 83
64080: PUSH
64081: LD_INT 1
64083: ST_TO_ADDR
// if p3 = 4 then
64084: LD_VAR 0 3
64088: PUSH
64089: LD_INT 4
64091: EQUAL
64092: IFFALSE 64102
// sSpec := true ;
64094: LD_ADDR_EXP 80
64098: PUSH
64099: LD_INT 1
64101: ST_TO_ADDR
// if p3 = 5 then
64102: LD_VAR 0 3
64106: PUSH
64107: LD_INT 5
64109: EQUAL
64110: IFFALSE 64120
// sLevel := true ;
64112: LD_ADDR_EXP 84
64116: PUSH
64117: LD_INT 1
64119: ST_TO_ADDR
// if p3 = 6 then
64120: LD_VAR 0 3
64124: PUSH
64125: LD_INT 6
64127: EQUAL
64128: IFFALSE 64138
// sArmoury := true ;
64130: LD_ADDR_EXP 85
64134: PUSH
64135: LD_INT 1
64137: ST_TO_ADDR
// if p3 = 7 then
64138: LD_VAR 0 3
64142: PUSH
64143: LD_INT 7
64145: EQUAL
64146: IFFALSE 64156
// sRadar := true ;
64148: LD_ADDR_EXP 86
64152: PUSH
64153: LD_INT 1
64155: ST_TO_ADDR
// if p3 = 8 then
64156: LD_VAR 0 3
64160: PUSH
64161: LD_INT 8
64163: EQUAL
64164: IFFALSE 64174
// sBunker := true ;
64166: LD_ADDR_EXP 87
64170: PUSH
64171: LD_INT 1
64173: ST_TO_ADDR
// if p3 = 9 then
64174: LD_VAR 0 3
64178: PUSH
64179: LD_INT 9
64181: EQUAL
64182: IFFALSE 64192
// sHack := true ;
64184: LD_ADDR_EXP 88
64188: PUSH
64189: LD_INT 1
64191: ST_TO_ADDR
// if p3 = 10 then
64192: LD_VAR 0 3
64196: PUSH
64197: LD_INT 10
64199: EQUAL
64200: IFFALSE 64210
// sFire := true ;
64202: LD_ADDR_EXP 89
64206: PUSH
64207: LD_INT 1
64209: ST_TO_ADDR
// if p3 = 11 then
64210: LD_VAR 0 3
64214: PUSH
64215: LD_INT 11
64217: EQUAL
64218: IFFALSE 64228
// sRefresh := true ;
64220: LD_ADDR_EXP 90
64224: PUSH
64225: LD_INT 1
64227: ST_TO_ADDR
// if p3 = 12 then
64228: LD_VAR 0 3
64232: PUSH
64233: LD_INT 12
64235: EQUAL
64236: IFFALSE 64246
// sExp := true ;
64238: LD_ADDR_EXP 91
64242: PUSH
64243: LD_INT 1
64245: ST_TO_ADDR
// if p3 = 13 then
64246: LD_VAR 0 3
64250: PUSH
64251: LD_INT 13
64253: EQUAL
64254: IFFALSE 64264
// sDepot := true ;
64256: LD_ADDR_EXP 92
64260: PUSH
64261: LD_INT 1
64263: ST_TO_ADDR
// if p3 = 14 then
64264: LD_VAR 0 3
64268: PUSH
64269: LD_INT 14
64271: EQUAL
64272: IFFALSE 64282
// sFlag := true ;
64274: LD_ADDR_EXP 93
64278: PUSH
64279: LD_INT 1
64281: ST_TO_ADDR
// if p3 = 15 then
64282: LD_VAR 0 3
64286: PUSH
64287: LD_INT 15
64289: EQUAL
64290: IFFALSE 64300
// sKamikadze := true ;
64292: LD_ADDR_EXP 101
64296: PUSH
64297: LD_INT 1
64299: ST_TO_ADDR
// if p3 = 16 then
64300: LD_VAR 0 3
64304: PUSH
64305: LD_INT 16
64307: EQUAL
64308: IFFALSE 64318
// sTroll := true ;
64310: LD_ADDR_EXP 102
64314: PUSH
64315: LD_INT 1
64317: ST_TO_ADDR
// if p3 = 17 then
64318: LD_VAR 0 3
64322: PUSH
64323: LD_INT 17
64325: EQUAL
64326: IFFALSE 64336
// sSlow := true ;
64328: LD_ADDR_EXP 103
64332: PUSH
64333: LD_INT 1
64335: ST_TO_ADDR
// if p3 = 18 then
64336: LD_VAR 0 3
64340: PUSH
64341: LD_INT 18
64343: EQUAL
64344: IFFALSE 64354
// sLack := true ;
64346: LD_ADDR_EXP 104
64350: PUSH
64351: LD_INT 1
64353: ST_TO_ADDR
// if p3 = 19 then
64354: LD_VAR 0 3
64358: PUSH
64359: LD_INT 19
64361: EQUAL
64362: IFFALSE 64372
// sTank := true ;
64364: LD_ADDR_EXP 106
64368: PUSH
64369: LD_INT 1
64371: ST_TO_ADDR
// if p3 = 20 then
64372: LD_VAR 0 3
64376: PUSH
64377: LD_INT 20
64379: EQUAL
64380: IFFALSE 64390
// sRemote := true ;
64382: LD_ADDR_EXP 107
64386: PUSH
64387: LD_INT 1
64389: ST_TO_ADDR
// if p3 = 21 then
64390: LD_VAR 0 3
64394: PUSH
64395: LD_INT 21
64397: EQUAL
64398: IFFALSE 64408
// sPowell := true ;
64400: LD_ADDR_EXP 108
64404: PUSH
64405: LD_INT 1
64407: ST_TO_ADDR
// if p3 = 22 then
64408: LD_VAR 0 3
64412: PUSH
64413: LD_INT 22
64415: EQUAL
64416: IFFALSE 64426
// sTeleport := true ;
64418: LD_ADDR_EXP 111
64422: PUSH
64423: LD_INT 1
64425: ST_TO_ADDR
// if p3 = 23 then
64426: LD_VAR 0 3
64430: PUSH
64431: LD_INT 23
64433: EQUAL
64434: IFFALSE 64444
// sOilTower := true ;
64436: LD_ADDR_EXP 113
64440: PUSH
64441: LD_INT 1
64443: ST_TO_ADDR
// if p3 = 24 then
64444: LD_VAR 0 3
64448: PUSH
64449: LD_INT 24
64451: EQUAL
64452: IFFALSE 64462
// sShovel := true ;
64454: LD_ADDR_EXP 114
64458: PUSH
64459: LD_INT 1
64461: ST_TO_ADDR
// if p3 = 25 then
64462: LD_VAR 0 3
64466: PUSH
64467: LD_INT 25
64469: EQUAL
64470: IFFALSE 64480
// sSheik := true ;
64472: LD_ADDR_EXP 115
64476: PUSH
64477: LD_INT 1
64479: ST_TO_ADDR
// if p3 = 26 then
64480: LD_VAR 0 3
64484: PUSH
64485: LD_INT 26
64487: EQUAL
64488: IFFALSE 64498
// sEarthquake := true ;
64490: LD_ADDR_EXP 117
64494: PUSH
64495: LD_INT 1
64497: ST_TO_ADDR
// if p3 = 27 then
64498: LD_VAR 0 3
64502: PUSH
64503: LD_INT 27
64505: EQUAL
64506: IFFALSE 64516
// sAI := true ;
64508: LD_ADDR_EXP 118
64512: PUSH
64513: LD_INT 1
64515: ST_TO_ADDR
// if p3 = 28 then
64516: LD_VAR 0 3
64520: PUSH
64521: LD_INT 28
64523: EQUAL
64524: IFFALSE 64534
// sCargo := true ;
64526: LD_ADDR_EXP 121
64530: PUSH
64531: LD_INT 1
64533: ST_TO_ADDR
// if p3 = 29 then
64534: LD_VAR 0 3
64538: PUSH
64539: LD_INT 29
64541: EQUAL
64542: IFFALSE 64552
// sDLaser := true ;
64544: LD_ADDR_EXP 122
64548: PUSH
64549: LD_INT 1
64551: ST_TO_ADDR
// if p3 = 30 then
64552: LD_VAR 0 3
64556: PUSH
64557: LD_INT 30
64559: EQUAL
64560: IFFALSE 64570
// sExchange := true ;
64562: LD_ADDR_EXP 123
64566: PUSH
64567: LD_INT 1
64569: ST_TO_ADDR
// if p3 = 31 then
64570: LD_VAR 0 3
64574: PUSH
64575: LD_INT 31
64577: EQUAL
64578: IFFALSE 64588
// sFac := true ;
64580: LD_ADDR_EXP 124
64584: PUSH
64585: LD_INT 1
64587: ST_TO_ADDR
// if p3 = 32 then
64588: LD_VAR 0 3
64592: PUSH
64593: LD_INT 32
64595: EQUAL
64596: IFFALSE 64606
// sPower := true ;
64598: LD_ADDR_EXP 125
64602: PUSH
64603: LD_INT 1
64605: ST_TO_ADDR
// if p3 = 33 then
64606: LD_VAR 0 3
64610: PUSH
64611: LD_INT 33
64613: EQUAL
64614: IFFALSE 64624
// sRandom := true ;
64616: LD_ADDR_EXP 126
64620: PUSH
64621: LD_INT 1
64623: ST_TO_ADDR
// if p3 = 34 then
64624: LD_VAR 0 3
64628: PUSH
64629: LD_INT 34
64631: EQUAL
64632: IFFALSE 64642
// sShield := true ;
64634: LD_ADDR_EXP 127
64638: PUSH
64639: LD_INT 1
64641: ST_TO_ADDR
// if p3 = 35 then
64642: LD_VAR 0 3
64646: PUSH
64647: LD_INT 35
64649: EQUAL
64650: IFFALSE 64660
// sTime := true ;
64652: LD_ADDR_EXP 128
64656: PUSH
64657: LD_INT 1
64659: ST_TO_ADDR
// if p3 = 36 then
64660: LD_VAR 0 3
64664: PUSH
64665: LD_INT 36
64667: EQUAL
64668: IFFALSE 64678
// sTools := true ;
64670: LD_ADDR_EXP 129
64674: PUSH
64675: LD_INT 1
64677: ST_TO_ADDR
// if p3 = 101 then
64678: LD_VAR 0 3
64682: PUSH
64683: LD_INT 101
64685: EQUAL
64686: IFFALSE 64696
// sSold := true ;
64688: LD_ADDR_EXP 94
64692: PUSH
64693: LD_INT 1
64695: ST_TO_ADDR
// if p3 = 102 then
64696: LD_VAR 0 3
64700: PUSH
64701: LD_INT 102
64703: EQUAL
64704: IFFALSE 64714
// sDiff := true ;
64706: LD_ADDR_EXP 95
64710: PUSH
64711: LD_INT 1
64713: ST_TO_ADDR
// if p3 = 103 then
64714: LD_VAR 0 3
64718: PUSH
64719: LD_INT 103
64721: EQUAL
64722: IFFALSE 64732
// sFog := true ;
64724: LD_ADDR_EXP 98
64728: PUSH
64729: LD_INT 1
64731: ST_TO_ADDR
// if p3 = 104 then
64732: LD_VAR 0 3
64736: PUSH
64737: LD_INT 104
64739: EQUAL
64740: IFFALSE 64750
// sReset := true ;
64742: LD_ADDR_EXP 99
64746: PUSH
64747: LD_INT 1
64749: ST_TO_ADDR
// if p3 = 105 then
64750: LD_VAR 0 3
64754: PUSH
64755: LD_INT 105
64757: EQUAL
64758: IFFALSE 64768
// sSun := true ;
64760: LD_ADDR_EXP 100
64764: PUSH
64765: LD_INT 1
64767: ST_TO_ADDR
// if p3 = 106 then
64768: LD_VAR 0 3
64772: PUSH
64773: LD_INT 106
64775: EQUAL
64776: IFFALSE 64786
// sTiger := true ;
64778: LD_ADDR_EXP 96
64782: PUSH
64783: LD_INT 1
64785: ST_TO_ADDR
// if p3 = 107 then
64786: LD_VAR 0 3
64790: PUSH
64791: LD_INT 107
64793: EQUAL
64794: IFFALSE 64804
// sBomb := true ;
64796: LD_ADDR_EXP 97
64800: PUSH
64801: LD_INT 1
64803: ST_TO_ADDR
// if p3 = 108 then
64804: LD_VAR 0 3
64808: PUSH
64809: LD_INT 108
64811: EQUAL
64812: IFFALSE 64822
// sWound := true ;
64814: LD_ADDR_EXP 105
64818: PUSH
64819: LD_INT 1
64821: ST_TO_ADDR
// if p3 = 109 then
64822: LD_VAR 0 3
64826: PUSH
64827: LD_INT 109
64829: EQUAL
64830: IFFALSE 64840
// sBetray := true ;
64832: LD_ADDR_EXP 109
64836: PUSH
64837: LD_INT 1
64839: ST_TO_ADDR
// if p3 = 110 then
64840: LD_VAR 0 3
64844: PUSH
64845: LD_INT 110
64847: EQUAL
64848: IFFALSE 64858
// sContamin := true ;
64850: LD_ADDR_EXP 110
64854: PUSH
64855: LD_INT 1
64857: ST_TO_ADDR
// if p3 = 111 then
64858: LD_VAR 0 3
64862: PUSH
64863: LD_INT 111
64865: EQUAL
64866: IFFALSE 64876
// sOil := true ;
64868: LD_ADDR_EXP 112
64872: PUSH
64873: LD_INT 1
64875: ST_TO_ADDR
// if p3 = 112 then
64876: LD_VAR 0 3
64880: PUSH
64881: LD_INT 112
64883: EQUAL
64884: IFFALSE 64894
// sStu := true ;
64886: LD_ADDR_EXP 116
64890: PUSH
64891: LD_INT 1
64893: ST_TO_ADDR
// if p3 = 113 then
64894: LD_VAR 0 3
64898: PUSH
64899: LD_INT 113
64901: EQUAL
64902: IFFALSE 64912
// sBazooka := true ;
64904: LD_ADDR_EXP 119
64908: PUSH
64909: LD_INT 1
64911: ST_TO_ADDR
// if p3 = 114 then
64912: LD_VAR 0 3
64916: PUSH
64917: LD_INT 114
64919: EQUAL
64920: IFFALSE 64930
// sMortar := true ;
64922: LD_ADDR_EXP 120
64926: PUSH
64927: LD_INT 1
64929: ST_TO_ADDR
// if p3 = 115 then
64930: LD_VAR 0 3
64934: PUSH
64935: LD_INT 115
64937: EQUAL
64938: IFFALSE 64948
// sRanger := true ;
64940: LD_ADDR_EXP 130
64944: PUSH
64945: LD_INT 1
64947: ST_TO_ADDR
// end ; if p2 = 101 then
64948: LD_VAR 0 2
64952: PUSH
64953: LD_INT 101
64955: EQUAL
64956: IFFALSE 65084
// begin case p3 of 1 :
64958: LD_VAR 0 3
64962: PUSH
64963: LD_INT 1
64965: DOUBLE
64966: EQUAL
64967: IFTRUE 64971
64969: GO 64978
64971: POP
// hHackUnlimitedResources ; 2 :
64972: CALL 76121 0 0
64976: GO 65084
64978: LD_INT 2
64980: DOUBLE
64981: EQUAL
64982: IFTRUE 64986
64984: GO 64993
64986: POP
// hHackSetLevel10 ; 3 :
64987: CALL 76254 0 0
64991: GO 65084
64993: LD_INT 3
64995: DOUBLE
64996: EQUAL
64997: IFTRUE 65001
64999: GO 65008
65001: POP
// hHackSetLevel10YourUnits ; 4 :
65002: CALL 76339 0 0
65006: GO 65084
65008: LD_INT 4
65010: DOUBLE
65011: EQUAL
65012: IFTRUE 65016
65014: GO 65023
65016: POP
// hHackInvincible ; 5 :
65017: CALL 76787 0 0
65021: GO 65084
65023: LD_INT 5
65025: DOUBLE
65026: EQUAL
65027: IFTRUE 65031
65029: GO 65038
65031: POP
// hHackInvisible ; 6 :
65032: CALL 76898 0 0
65036: GO 65084
65038: LD_INT 6
65040: DOUBLE
65041: EQUAL
65042: IFTRUE 65046
65044: GO 65053
65046: POP
// hHackChangeYourSide ; 7 :
65047: CALL 76955 0 0
65051: GO 65084
65053: LD_INT 7
65055: DOUBLE
65056: EQUAL
65057: IFTRUE 65061
65059: GO 65068
65061: POP
// hHackChangeUnitSide ; 8 :
65062: CALL 76997 0 0
65066: GO 65084
65068: LD_INT 8
65070: DOUBLE
65071: EQUAL
65072: IFTRUE 65076
65074: GO 65083
65076: POP
// hHackFog ; end ;
65077: CALL 77098 0 0
65081: GO 65084
65083: POP
// end ; end ;
65084: LD_VAR 0 7
65088: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
65089: GO 65091
65091: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
65092: LD_STRING initStreamRollete();
65094: PPUSH
65095: CALL_OW 559
// InitStreamMode ;
65099: CALL 65108 0 0
// DefineStreamItems ( ) ;
65103: CALL 65548 0 0
// end ;
65107: END
// function InitStreamMode ; begin
65108: LD_INT 0
65110: PPUSH
// streamModeActive := false ;
65111: LD_ADDR_EXP 77
65115: PUSH
65116: LD_INT 0
65118: ST_TO_ADDR
// normalCounter := 36 ;
65119: LD_ADDR_EXP 78
65123: PUSH
65124: LD_INT 36
65126: ST_TO_ADDR
// hardcoreCounter := 16 ;
65127: LD_ADDR_EXP 79
65131: PUSH
65132: LD_INT 16
65134: ST_TO_ADDR
// sRocket := false ;
65135: LD_ADDR_EXP 82
65139: PUSH
65140: LD_INT 0
65142: ST_TO_ADDR
// sSpeed := false ;
65143: LD_ADDR_EXP 81
65147: PUSH
65148: LD_INT 0
65150: ST_TO_ADDR
// sEngine := false ;
65151: LD_ADDR_EXP 83
65155: PUSH
65156: LD_INT 0
65158: ST_TO_ADDR
// sSpec := false ;
65159: LD_ADDR_EXP 80
65163: PUSH
65164: LD_INT 0
65166: ST_TO_ADDR
// sLevel := false ;
65167: LD_ADDR_EXP 84
65171: PUSH
65172: LD_INT 0
65174: ST_TO_ADDR
// sArmoury := false ;
65175: LD_ADDR_EXP 85
65179: PUSH
65180: LD_INT 0
65182: ST_TO_ADDR
// sRadar := false ;
65183: LD_ADDR_EXP 86
65187: PUSH
65188: LD_INT 0
65190: ST_TO_ADDR
// sBunker := false ;
65191: LD_ADDR_EXP 87
65195: PUSH
65196: LD_INT 0
65198: ST_TO_ADDR
// sHack := false ;
65199: LD_ADDR_EXP 88
65203: PUSH
65204: LD_INT 0
65206: ST_TO_ADDR
// sFire := false ;
65207: LD_ADDR_EXP 89
65211: PUSH
65212: LD_INT 0
65214: ST_TO_ADDR
// sRefresh := false ;
65215: LD_ADDR_EXP 90
65219: PUSH
65220: LD_INT 0
65222: ST_TO_ADDR
// sExp := false ;
65223: LD_ADDR_EXP 91
65227: PUSH
65228: LD_INT 0
65230: ST_TO_ADDR
// sDepot := false ;
65231: LD_ADDR_EXP 92
65235: PUSH
65236: LD_INT 0
65238: ST_TO_ADDR
// sFlag := false ;
65239: LD_ADDR_EXP 93
65243: PUSH
65244: LD_INT 0
65246: ST_TO_ADDR
// sKamikadze := false ;
65247: LD_ADDR_EXP 101
65251: PUSH
65252: LD_INT 0
65254: ST_TO_ADDR
// sTroll := false ;
65255: LD_ADDR_EXP 102
65259: PUSH
65260: LD_INT 0
65262: ST_TO_ADDR
// sSlow := false ;
65263: LD_ADDR_EXP 103
65267: PUSH
65268: LD_INT 0
65270: ST_TO_ADDR
// sLack := false ;
65271: LD_ADDR_EXP 104
65275: PUSH
65276: LD_INT 0
65278: ST_TO_ADDR
// sTank := false ;
65279: LD_ADDR_EXP 106
65283: PUSH
65284: LD_INT 0
65286: ST_TO_ADDR
// sRemote := false ;
65287: LD_ADDR_EXP 107
65291: PUSH
65292: LD_INT 0
65294: ST_TO_ADDR
// sPowell := false ;
65295: LD_ADDR_EXP 108
65299: PUSH
65300: LD_INT 0
65302: ST_TO_ADDR
// sTeleport := false ;
65303: LD_ADDR_EXP 111
65307: PUSH
65308: LD_INT 0
65310: ST_TO_ADDR
// sOilTower := false ;
65311: LD_ADDR_EXP 113
65315: PUSH
65316: LD_INT 0
65318: ST_TO_ADDR
// sShovel := false ;
65319: LD_ADDR_EXP 114
65323: PUSH
65324: LD_INT 0
65326: ST_TO_ADDR
// sSheik := false ;
65327: LD_ADDR_EXP 115
65331: PUSH
65332: LD_INT 0
65334: ST_TO_ADDR
// sEarthquake := false ;
65335: LD_ADDR_EXP 117
65339: PUSH
65340: LD_INT 0
65342: ST_TO_ADDR
// sAI := false ;
65343: LD_ADDR_EXP 118
65347: PUSH
65348: LD_INT 0
65350: ST_TO_ADDR
// sCargo := false ;
65351: LD_ADDR_EXP 121
65355: PUSH
65356: LD_INT 0
65358: ST_TO_ADDR
// sDLaser := false ;
65359: LD_ADDR_EXP 122
65363: PUSH
65364: LD_INT 0
65366: ST_TO_ADDR
// sExchange := false ;
65367: LD_ADDR_EXP 123
65371: PUSH
65372: LD_INT 0
65374: ST_TO_ADDR
// sFac := false ;
65375: LD_ADDR_EXP 124
65379: PUSH
65380: LD_INT 0
65382: ST_TO_ADDR
// sPower := false ;
65383: LD_ADDR_EXP 125
65387: PUSH
65388: LD_INT 0
65390: ST_TO_ADDR
// sRandom := false ;
65391: LD_ADDR_EXP 126
65395: PUSH
65396: LD_INT 0
65398: ST_TO_ADDR
// sShield := false ;
65399: LD_ADDR_EXP 127
65403: PUSH
65404: LD_INT 0
65406: ST_TO_ADDR
// sTime := false ;
65407: LD_ADDR_EXP 128
65411: PUSH
65412: LD_INT 0
65414: ST_TO_ADDR
// sTools := false ;
65415: LD_ADDR_EXP 129
65419: PUSH
65420: LD_INT 0
65422: ST_TO_ADDR
// sSold := false ;
65423: LD_ADDR_EXP 94
65427: PUSH
65428: LD_INT 0
65430: ST_TO_ADDR
// sDiff := false ;
65431: LD_ADDR_EXP 95
65435: PUSH
65436: LD_INT 0
65438: ST_TO_ADDR
// sFog := false ;
65439: LD_ADDR_EXP 98
65443: PUSH
65444: LD_INT 0
65446: ST_TO_ADDR
// sReset := false ;
65447: LD_ADDR_EXP 99
65451: PUSH
65452: LD_INT 0
65454: ST_TO_ADDR
// sSun := false ;
65455: LD_ADDR_EXP 100
65459: PUSH
65460: LD_INT 0
65462: ST_TO_ADDR
// sTiger := false ;
65463: LD_ADDR_EXP 96
65467: PUSH
65468: LD_INT 0
65470: ST_TO_ADDR
// sBomb := false ;
65471: LD_ADDR_EXP 97
65475: PUSH
65476: LD_INT 0
65478: ST_TO_ADDR
// sWound := false ;
65479: LD_ADDR_EXP 105
65483: PUSH
65484: LD_INT 0
65486: ST_TO_ADDR
// sBetray := false ;
65487: LD_ADDR_EXP 109
65491: PUSH
65492: LD_INT 0
65494: ST_TO_ADDR
// sContamin := false ;
65495: LD_ADDR_EXP 110
65499: PUSH
65500: LD_INT 0
65502: ST_TO_ADDR
// sOil := false ;
65503: LD_ADDR_EXP 112
65507: PUSH
65508: LD_INT 0
65510: ST_TO_ADDR
// sStu := false ;
65511: LD_ADDR_EXP 116
65515: PUSH
65516: LD_INT 0
65518: ST_TO_ADDR
// sBazooka := false ;
65519: LD_ADDR_EXP 119
65523: PUSH
65524: LD_INT 0
65526: ST_TO_ADDR
// sMortar := false ;
65527: LD_ADDR_EXP 120
65531: PUSH
65532: LD_INT 0
65534: ST_TO_ADDR
// sRanger := false ;
65535: LD_ADDR_EXP 130
65539: PUSH
65540: LD_INT 0
65542: ST_TO_ADDR
// end ;
65543: LD_VAR 0 1
65547: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
65548: LD_INT 0
65550: PPUSH
65551: PPUSH
65552: PPUSH
65553: PPUSH
65554: PPUSH
// result := [ ] ;
65555: LD_ADDR_VAR 0 1
65559: PUSH
65560: EMPTY
65561: ST_TO_ADDR
// if campaign_id = 1 then
65562: LD_OWVAR 69
65566: PUSH
65567: LD_INT 1
65569: EQUAL
65570: IFFALSE 68508
// begin case mission_number of 1 :
65572: LD_OWVAR 70
65576: PUSH
65577: LD_INT 1
65579: DOUBLE
65580: EQUAL
65581: IFTRUE 65585
65583: GO 65649
65585: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
65586: LD_ADDR_VAR 0 1
65590: PUSH
65591: LD_INT 2
65593: PUSH
65594: LD_INT 4
65596: PUSH
65597: LD_INT 11
65599: PUSH
65600: LD_INT 12
65602: PUSH
65603: LD_INT 15
65605: PUSH
65606: LD_INT 16
65608: PUSH
65609: LD_INT 22
65611: PUSH
65612: LD_INT 23
65614: PUSH
65615: LD_INT 26
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 101
65631: PUSH
65632: LD_INT 102
65634: PUSH
65635: LD_INT 106
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: LIST
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: ST_TO_ADDR
65647: GO 68506
65649: LD_INT 2
65651: DOUBLE
65652: EQUAL
65653: IFTRUE 65657
65655: GO 65729
65657: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
65658: LD_ADDR_VAR 0 1
65662: PUSH
65663: LD_INT 2
65665: PUSH
65666: LD_INT 4
65668: PUSH
65669: LD_INT 11
65671: PUSH
65672: LD_INT 12
65674: PUSH
65675: LD_INT 15
65677: PUSH
65678: LD_INT 16
65680: PUSH
65681: LD_INT 22
65683: PUSH
65684: LD_INT 23
65686: PUSH
65687: LD_INT 26
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 101
65703: PUSH
65704: LD_INT 102
65706: PUSH
65707: LD_INT 105
65709: PUSH
65710: LD_INT 106
65712: PUSH
65713: LD_INT 108
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: ST_TO_ADDR
65727: GO 68506
65729: LD_INT 3
65731: DOUBLE
65732: EQUAL
65733: IFTRUE 65737
65735: GO 65813
65737: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
65738: LD_ADDR_VAR 0 1
65742: PUSH
65743: LD_INT 2
65745: PUSH
65746: LD_INT 4
65748: PUSH
65749: LD_INT 5
65751: PUSH
65752: LD_INT 11
65754: PUSH
65755: LD_INT 12
65757: PUSH
65758: LD_INT 15
65760: PUSH
65761: LD_INT 16
65763: PUSH
65764: LD_INT 22
65766: PUSH
65767: LD_INT 26
65769: PUSH
65770: LD_INT 36
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 101
65787: PUSH
65788: LD_INT 102
65790: PUSH
65791: LD_INT 105
65793: PUSH
65794: LD_INT 106
65796: PUSH
65797: LD_INT 108
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: ST_TO_ADDR
65811: GO 68506
65813: LD_INT 4
65815: DOUBLE
65816: EQUAL
65817: IFTRUE 65821
65819: GO 65905
65821: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
65822: LD_ADDR_VAR 0 1
65826: PUSH
65827: LD_INT 2
65829: PUSH
65830: LD_INT 4
65832: PUSH
65833: LD_INT 5
65835: PUSH
65836: LD_INT 8
65838: PUSH
65839: LD_INT 11
65841: PUSH
65842: LD_INT 12
65844: PUSH
65845: LD_INT 15
65847: PUSH
65848: LD_INT 16
65850: PUSH
65851: LD_INT 22
65853: PUSH
65854: LD_INT 23
65856: PUSH
65857: LD_INT 26
65859: PUSH
65860: LD_INT 36
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 101
65879: PUSH
65880: LD_INT 102
65882: PUSH
65883: LD_INT 105
65885: PUSH
65886: LD_INT 106
65888: PUSH
65889: LD_INT 108
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: ST_TO_ADDR
65903: GO 68506
65905: LD_INT 5
65907: DOUBLE
65908: EQUAL
65909: IFTRUE 65913
65911: GO 66013
65913: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
65914: LD_ADDR_VAR 0 1
65918: PUSH
65919: LD_INT 2
65921: PUSH
65922: LD_INT 4
65924: PUSH
65925: LD_INT 5
65927: PUSH
65928: LD_INT 6
65930: PUSH
65931: LD_INT 8
65933: PUSH
65934: LD_INT 11
65936: PUSH
65937: LD_INT 12
65939: PUSH
65940: LD_INT 15
65942: PUSH
65943: LD_INT 16
65945: PUSH
65946: LD_INT 22
65948: PUSH
65949: LD_INT 23
65951: PUSH
65952: LD_INT 25
65954: PUSH
65955: LD_INT 26
65957: PUSH
65958: LD_INT 36
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 101
65979: PUSH
65980: LD_INT 102
65982: PUSH
65983: LD_INT 105
65985: PUSH
65986: LD_INT 106
65988: PUSH
65989: LD_INT 108
65991: PUSH
65992: LD_INT 109
65994: PUSH
65995: LD_INT 112
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: ST_TO_ADDR
66011: GO 68506
66013: LD_INT 6
66015: DOUBLE
66016: EQUAL
66017: IFTRUE 66021
66019: GO 66141
66021: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
66022: LD_ADDR_VAR 0 1
66026: PUSH
66027: LD_INT 2
66029: PUSH
66030: LD_INT 4
66032: PUSH
66033: LD_INT 5
66035: PUSH
66036: LD_INT 6
66038: PUSH
66039: LD_INT 8
66041: PUSH
66042: LD_INT 11
66044: PUSH
66045: LD_INT 12
66047: PUSH
66048: LD_INT 15
66050: PUSH
66051: LD_INT 16
66053: PUSH
66054: LD_INT 20
66056: PUSH
66057: LD_INT 21
66059: PUSH
66060: LD_INT 22
66062: PUSH
66063: LD_INT 23
66065: PUSH
66066: LD_INT 25
66068: PUSH
66069: LD_INT 26
66071: PUSH
66072: LD_INT 30
66074: PUSH
66075: LD_INT 31
66077: PUSH
66078: LD_INT 32
66080: PUSH
66081: LD_INT 36
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 101
66107: PUSH
66108: LD_INT 102
66110: PUSH
66111: LD_INT 105
66113: PUSH
66114: LD_INT 106
66116: PUSH
66117: LD_INT 108
66119: PUSH
66120: LD_INT 109
66122: PUSH
66123: LD_INT 112
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: ST_TO_ADDR
66139: GO 68506
66141: LD_INT 7
66143: DOUBLE
66144: EQUAL
66145: IFTRUE 66149
66147: GO 66249
66149: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
66150: LD_ADDR_VAR 0 1
66154: PUSH
66155: LD_INT 2
66157: PUSH
66158: LD_INT 4
66160: PUSH
66161: LD_INT 5
66163: PUSH
66164: LD_INT 7
66166: PUSH
66167: LD_INT 11
66169: PUSH
66170: LD_INT 12
66172: PUSH
66173: LD_INT 15
66175: PUSH
66176: LD_INT 16
66178: PUSH
66179: LD_INT 20
66181: PUSH
66182: LD_INT 21
66184: PUSH
66185: LD_INT 22
66187: PUSH
66188: LD_INT 23
66190: PUSH
66191: LD_INT 25
66193: PUSH
66194: LD_INT 26
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 101
66215: PUSH
66216: LD_INT 102
66218: PUSH
66219: LD_INT 103
66221: PUSH
66222: LD_INT 105
66224: PUSH
66225: LD_INT 106
66227: PUSH
66228: LD_INT 108
66230: PUSH
66231: LD_INT 112
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: ST_TO_ADDR
66247: GO 68506
66249: LD_INT 8
66251: DOUBLE
66252: EQUAL
66253: IFTRUE 66257
66255: GO 66385
66257: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
66258: LD_ADDR_VAR 0 1
66262: PUSH
66263: LD_INT 2
66265: PUSH
66266: LD_INT 4
66268: PUSH
66269: LD_INT 5
66271: PUSH
66272: LD_INT 6
66274: PUSH
66275: LD_INT 7
66277: PUSH
66278: LD_INT 8
66280: PUSH
66281: LD_INT 11
66283: PUSH
66284: LD_INT 12
66286: PUSH
66287: LD_INT 15
66289: PUSH
66290: LD_INT 16
66292: PUSH
66293: LD_INT 20
66295: PUSH
66296: LD_INT 21
66298: PUSH
66299: LD_INT 22
66301: PUSH
66302: LD_INT 23
66304: PUSH
66305: LD_INT 25
66307: PUSH
66308: LD_INT 26
66310: PUSH
66311: LD_INT 30
66313: PUSH
66314: LD_INT 31
66316: PUSH
66317: LD_INT 32
66319: PUSH
66320: LD_INT 36
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 101
66347: PUSH
66348: LD_INT 102
66350: PUSH
66351: LD_INT 103
66353: PUSH
66354: LD_INT 105
66356: PUSH
66357: LD_INT 106
66359: PUSH
66360: LD_INT 108
66362: PUSH
66363: LD_INT 109
66365: PUSH
66366: LD_INT 112
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: ST_TO_ADDR
66383: GO 68506
66385: LD_INT 9
66387: DOUBLE
66388: EQUAL
66389: IFTRUE 66393
66391: GO 66529
66393: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
66394: LD_ADDR_VAR 0 1
66398: PUSH
66399: LD_INT 2
66401: PUSH
66402: LD_INT 4
66404: PUSH
66405: LD_INT 5
66407: PUSH
66408: LD_INT 6
66410: PUSH
66411: LD_INT 7
66413: PUSH
66414: LD_INT 8
66416: PUSH
66417: LD_INT 11
66419: PUSH
66420: LD_INT 12
66422: PUSH
66423: LD_INT 15
66425: PUSH
66426: LD_INT 16
66428: PUSH
66429: LD_INT 20
66431: PUSH
66432: LD_INT 21
66434: PUSH
66435: LD_INT 22
66437: PUSH
66438: LD_INT 23
66440: PUSH
66441: LD_INT 25
66443: PUSH
66444: LD_INT 26
66446: PUSH
66447: LD_INT 28
66449: PUSH
66450: LD_INT 30
66452: PUSH
66453: LD_INT 31
66455: PUSH
66456: LD_INT 32
66458: PUSH
66459: LD_INT 36
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 101
66487: PUSH
66488: LD_INT 102
66490: PUSH
66491: LD_INT 103
66493: PUSH
66494: LD_INT 105
66496: PUSH
66497: LD_INT 106
66499: PUSH
66500: LD_INT 108
66502: PUSH
66503: LD_INT 109
66505: PUSH
66506: LD_INT 112
66508: PUSH
66509: LD_INT 114
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: ST_TO_ADDR
66527: GO 68506
66529: LD_INT 10
66531: DOUBLE
66532: EQUAL
66533: IFTRUE 66537
66535: GO 66721
66537: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
66538: LD_ADDR_VAR 0 1
66542: PUSH
66543: LD_INT 2
66545: PUSH
66546: LD_INT 4
66548: PUSH
66549: LD_INT 5
66551: PUSH
66552: LD_INT 6
66554: PUSH
66555: LD_INT 7
66557: PUSH
66558: LD_INT 8
66560: PUSH
66561: LD_INT 9
66563: PUSH
66564: LD_INT 10
66566: PUSH
66567: LD_INT 11
66569: PUSH
66570: LD_INT 12
66572: PUSH
66573: LD_INT 13
66575: PUSH
66576: LD_INT 14
66578: PUSH
66579: LD_INT 15
66581: PUSH
66582: LD_INT 16
66584: PUSH
66585: LD_INT 17
66587: PUSH
66588: LD_INT 18
66590: PUSH
66591: LD_INT 19
66593: PUSH
66594: LD_INT 20
66596: PUSH
66597: LD_INT 21
66599: PUSH
66600: LD_INT 22
66602: PUSH
66603: LD_INT 23
66605: PUSH
66606: LD_INT 24
66608: PUSH
66609: LD_INT 25
66611: PUSH
66612: LD_INT 26
66614: PUSH
66615: LD_INT 28
66617: PUSH
66618: LD_INT 30
66620: PUSH
66621: LD_INT 31
66623: PUSH
66624: LD_INT 32
66626: PUSH
66627: LD_INT 36
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 101
66663: PUSH
66664: LD_INT 102
66666: PUSH
66667: LD_INT 103
66669: PUSH
66670: LD_INT 104
66672: PUSH
66673: LD_INT 105
66675: PUSH
66676: LD_INT 106
66678: PUSH
66679: LD_INT 107
66681: PUSH
66682: LD_INT 108
66684: PUSH
66685: LD_INT 109
66687: PUSH
66688: LD_INT 110
66690: PUSH
66691: LD_INT 111
66693: PUSH
66694: LD_INT 112
66696: PUSH
66697: LD_INT 114
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: ST_TO_ADDR
66719: GO 68506
66721: LD_INT 11
66723: DOUBLE
66724: EQUAL
66725: IFTRUE 66729
66727: GO 66921
66729: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
66730: LD_ADDR_VAR 0 1
66734: PUSH
66735: LD_INT 2
66737: PUSH
66738: LD_INT 3
66740: PUSH
66741: LD_INT 4
66743: PUSH
66744: LD_INT 5
66746: PUSH
66747: LD_INT 6
66749: PUSH
66750: LD_INT 7
66752: PUSH
66753: LD_INT 8
66755: PUSH
66756: LD_INT 9
66758: PUSH
66759: LD_INT 10
66761: PUSH
66762: LD_INT 11
66764: PUSH
66765: LD_INT 12
66767: PUSH
66768: LD_INT 13
66770: PUSH
66771: LD_INT 14
66773: PUSH
66774: LD_INT 15
66776: PUSH
66777: LD_INT 16
66779: PUSH
66780: LD_INT 17
66782: PUSH
66783: LD_INT 18
66785: PUSH
66786: LD_INT 19
66788: PUSH
66789: LD_INT 20
66791: PUSH
66792: LD_INT 21
66794: PUSH
66795: LD_INT 22
66797: PUSH
66798: LD_INT 23
66800: PUSH
66801: LD_INT 24
66803: PUSH
66804: LD_INT 25
66806: PUSH
66807: LD_INT 26
66809: PUSH
66810: LD_INT 28
66812: PUSH
66813: LD_INT 30
66815: PUSH
66816: LD_INT 31
66818: PUSH
66819: LD_INT 32
66821: PUSH
66822: LD_INT 34
66824: PUSH
66825: LD_INT 36
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 101
66863: PUSH
66864: LD_INT 102
66866: PUSH
66867: LD_INT 103
66869: PUSH
66870: LD_INT 104
66872: PUSH
66873: LD_INT 105
66875: PUSH
66876: LD_INT 106
66878: PUSH
66879: LD_INT 107
66881: PUSH
66882: LD_INT 108
66884: PUSH
66885: LD_INT 109
66887: PUSH
66888: LD_INT 110
66890: PUSH
66891: LD_INT 111
66893: PUSH
66894: LD_INT 112
66896: PUSH
66897: LD_INT 114
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: ST_TO_ADDR
66919: GO 68506
66921: LD_INT 12
66923: DOUBLE
66924: EQUAL
66925: IFTRUE 66929
66927: GO 67137
66929: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
66930: LD_ADDR_VAR 0 1
66934: PUSH
66935: LD_INT 1
66937: PUSH
66938: LD_INT 2
66940: PUSH
66941: LD_INT 3
66943: PUSH
66944: LD_INT 4
66946: PUSH
66947: LD_INT 5
66949: PUSH
66950: LD_INT 6
66952: PUSH
66953: LD_INT 7
66955: PUSH
66956: LD_INT 8
66958: PUSH
66959: LD_INT 9
66961: PUSH
66962: LD_INT 10
66964: PUSH
66965: LD_INT 11
66967: PUSH
66968: LD_INT 12
66970: PUSH
66971: LD_INT 13
66973: PUSH
66974: LD_INT 14
66976: PUSH
66977: LD_INT 15
66979: PUSH
66980: LD_INT 16
66982: PUSH
66983: LD_INT 17
66985: PUSH
66986: LD_INT 18
66988: PUSH
66989: LD_INT 19
66991: PUSH
66992: LD_INT 20
66994: PUSH
66995: LD_INT 21
66997: PUSH
66998: LD_INT 22
67000: PUSH
67001: LD_INT 23
67003: PUSH
67004: LD_INT 24
67006: PUSH
67007: LD_INT 25
67009: PUSH
67010: LD_INT 26
67012: PUSH
67013: LD_INT 27
67015: PUSH
67016: LD_INT 28
67018: PUSH
67019: LD_INT 30
67021: PUSH
67022: LD_INT 31
67024: PUSH
67025: LD_INT 32
67027: PUSH
67028: LD_INT 33
67030: PUSH
67031: LD_INT 34
67033: PUSH
67034: LD_INT 36
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 101
67075: PUSH
67076: LD_INT 102
67078: PUSH
67079: LD_INT 103
67081: PUSH
67082: LD_INT 104
67084: PUSH
67085: LD_INT 105
67087: PUSH
67088: LD_INT 106
67090: PUSH
67091: LD_INT 107
67093: PUSH
67094: LD_INT 108
67096: PUSH
67097: LD_INT 109
67099: PUSH
67100: LD_INT 110
67102: PUSH
67103: LD_INT 111
67105: PUSH
67106: LD_INT 112
67108: PUSH
67109: LD_INT 113
67111: PUSH
67112: LD_INT 114
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: ST_TO_ADDR
67135: GO 68506
67137: LD_INT 13
67139: DOUBLE
67140: EQUAL
67141: IFTRUE 67145
67143: GO 67341
67145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
67146: LD_ADDR_VAR 0 1
67150: PUSH
67151: LD_INT 1
67153: PUSH
67154: LD_INT 2
67156: PUSH
67157: LD_INT 3
67159: PUSH
67160: LD_INT 4
67162: PUSH
67163: LD_INT 5
67165: PUSH
67166: LD_INT 8
67168: PUSH
67169: LD_INT 9
67171: PUSH
67172: LD_INT 10
67174: PUSH
67175: LD_INT 11
67177: PUSH
67178: LD_INT 12
67180: PUSH
67181: LD_INT 14
67183: PUSH
67184: LD_INT 15
67186: PUSH
67187: LD_INT 16
67189: PUSH
67190: LD_INT 17
67192: PUSH
67193: LD_INT 18
67195: PUSH
67196: LD_INT 19
67198: PUSH
67199: LD_INT 20
67201: PUSH
67202: LD_INT 21
67204: PUSH
67205: LD_INT 22
67207: PUSH
67208: LD_INT 23
67210: PUSH
67211: LD_INT 24
67213: PUSH
67214: LD_INT 25
67216: PUSH
67217: LD_INT 26
67219: PUSH
67220: LD_INT 27
67222: PUSH
67223: LD_INT 28
67225: PUSH
67226: LD_INT 30
67228: PUSH
67229: LD_INT 31
67231: PUSH
67232: LD_INT 32
67234: PUSH
67235: LD_INT 33
67237: PUSH
67238: LD_INT 34
67240: PUSH
67241: LD_INT 36
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 101
67279: PUSH
67280: LD_INT 102
67282: PUSH
67283: LD_INT 103
67285: PUSH
67286: LD_INT 104
67288: PUSH
67289: LD_INT 105
67291: PUSH
67292: LD_INT 106
67294: PUSH
67295: LD_INT 107
67297: PUSH
67298: LD_INT 108
67300: PUSH
67301: LD_INT 109
67303: PUSH
67304: LD_INT 110
67306: PUSH
67307: LD_INT 111
67309: PUSH
67310: LD_INT 112
67312: PUSH
67313: LD_INT 113
67315: PUSH
67316: LD_INT 114
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: ST_TO_ADDR
67339: GO 68506
67341: LD_INT 14
67343: DOUBLE
67344: EQUAL
67345: IFTRUE 67349
67347: GO 67561
67349: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
67350: LD_ADDR_VAR 0 1
67354: PUSH
67355: LD_INT 1
67357: PUSH
67358: LD_INT 2
67360: PUSH
67361: LD_INT 3
67363: PUSH
67364: LD_INT 4
67366: PUSH
67367: LD_INT 5
67369: PUSH
67370: LD_INT 6
67372: PUSH
67373: LD_INT 7
67375: PUSH
67376: LD_INT 8
67378: PUSH
67379: LD_INT 9
67381: PUSH
67382: LD_INT 10
67384: PUSH
67385: LD_INT 11
67387: PUSH
67388: LD_INT 12
67390: PUSH
67391: LD_INT 13
67393: PUSH
67394: LD_INT 14
67396: PUSH
67397: LD_INT 15
67399: PUSH
67400: LD_INT 16
67402: PUSH
67403: LD_INT 17
67405: PUSH
67406: LD_INT 18
67408: PUSH
67409: LD_INT 19
67411: PUSH
67412: LD_INT 20
67414: PUSH
67415: LD_INT 21
67417: PUSH
67418: LD_INT 22
67420: PUSH
67421: LD_INT 23
67423: PUSH
67424: LD_INT 24
67426: PUSH
67427: LD_INT 25
67429: PUSH
67430: LD_INT 26
67432: PUSH
67433: LD_INT 27
67435: PUSH
67436: LD_INT 28
67438: PUSH
67439: LD_INT 29
67441: PUSH
67442: LD_INT 30
67444: PUSH
67445: LD_INT 31
67447: PUSH
67448: LD_INT 32
67450: PUSH
67451: LD_INT 33
67453: PUSH
67454: LD_INT 34
67456: PUSH
67457: LD_INT 36
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 101
67499: PUSH
67500: LD_INT 102
67502: PUSH
67503: LD_INT 103
67505: PUSH
67506: LD_INT 104
67508: PUSH
67509: LD_INT 105
67511: PUSH
67512: LD_INT 106
67514: PUSH
67515: LD_INT 107
67517: PUSH
67518: LD_INT 108
67520: PUSH
67521: LD_INT 109
67523: PUSH
67524: LD_INT 110
67526: PUSH
67527: LD_INT 111
67529: PUSH
67530: LD_INT 112
67532: PUSH
67533: LD_INT 113
67535: PUSH
67536: LD_INT 114
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: ST_TO_ADDR
67559: GO 68506
67561: LD_INT 15
67563: DOUBLE
67564: EQUAL
67565: IFTRUE 67569
67567: GO 67781
67569: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
67570: LD_ADDR_VAR 0 1
67574: PUSH
67575: LD_INT 1
67577: PUSH
67578: LD_INT 2
67580: PUSH
67581: LD_INT 3
67583: PUSH
67584: LD_INT 4
67586: PUSH
67587: LD_INT 5
67589: PUSH
67590: LD_INT 6
67592: PUSH
67593: LD_INT 7
67595: PUSH
67596: LD_INT 8
67598: PUSH
67599: LD_INT 9
67601: PUSH
67602: LD_INT 10
67604: PUSH
67605: LD_INT 11
67607: PUSH
67608: LD_INT 12
67610: PUSH
67611: LD_INT 13
67613: PUSH
67614: LD_INT 14
67616: PUSH
67617: LD_INT 15
67619: PUSH
67620: LD_INT 16
67622: PUSH
67623: LD_INT 17
67625: PUSH
67626: LD_INT 18
67628: PUSH
67629: LD_INT 19
67631: PUSH
67632: LD_INT 20
67634: PUSH
67635: LD_INT 21
67637: PUSH
67638: LD_INT 22
67640: PUSH
67641: LD_INT 23
67643: PUSH
67644: LD_INT 24
67646: PUSH
67647: LD_INT 25
67649: PUSH
67650: LD_INT 26
67652: PUSH
67653: LD_INT 27
67655: PUSH
67656: LD_INT 28
67658: PUSH
67659: LD_INT 29
67661: PUSH
67662: LD_INT 30
67664: PUSH
67665: LD_INT 31
67667: PUSH
67668: LD_INT 32
67670: PUSH
67671: LD_INT 33
67673: PUSH
67674: LD_INT 34
67676: PUSH
67677: LD_INT 36
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 101
67719: PUSH
67720: LD_INT 102
67722: PUSH
67723: LD_INT 103
67725: PUSH
67726: LD_INT 104
67728: PUSH
67729: LD_INT 105
67731: PUSH
67732: LD_INT 106
67734: PUSH
67735: LD_INT 107
67737: PUSH
67738: LD_INT 108
67740: PUSH
67741: LD_INT 109
67743: PUSH
67744: LD_INT 110
67746: PUSH
67747: LD_INT 111
67749: PUSH
67750: LD_INT 112
67752: PUSH
67753: LD_INT 113
67755: PUSH
67756: LD_INT 114
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: ST_TO_ADDR
67779: GO 68506
67781: LD_INT 16
67783: DOUBLE
67784: EQUAL
67785: IFTRUE 67789
67787: GO 67913
67789: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
67790: LD_ADDR_VAR 0 1
67794: PUSH
67795: LD_INT 2
67797: PUSH
67798: LD_INT 4
67800: PUSH
67801: LD_INT 5
67803: PUSH
67804: LD_INT 7
67806: PUSH
67807: LD_INT 11
67809: PUSH
67810: LD_INT 12
67812: PUSH
67813: LD_INT 15
67815: PUSH
67816: LD_INT 16
67818: PUSH
67819: LD_INT 20
67821: PUSH
67822: LD_INT 21
67824: PUSH
67825: LD_INT 22
67827: PUSH
67828: LD_INT 23
67830: PUSH
67831: LD_INT 25
67833: PUSH
67834: LD_INT 26
67836: PUSH
67837: LD_INT 30
67839: PUSH
67840: LD_INT 31
67842: PUSH
67843: LD_INT 32
67845: PUSH
67846: LD_INT 33
67848: PUSH
67849: LD_INT 34
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 101
67875: PUSH
67876: LD_INT 102
67878: PUSH
67879: LD_INT 103
67881: PUSH
67882: LD_INT 106
67884: PUSH
67885: LD_INT 108
67887: PUSH
67888: LD_INT 112
67890: PUSH
67891: LD_INT 113
67893: PUSH
67894: LD_INT 114
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: ST_TO_ADDR
67911: GO 68506
67913: LD_INT 17
67915: DOUBLE
67916: EQUAL
67917: IFTRUE 67921
67919: GO 68133
67921: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
67922: LD_ADDR_VAR 0 1
67926: PUSH
67927: LD_INT 1
67929: PUSH
67930: LD_INT 2
67932: PUSH
67933: LD_INT 3
67935: PUSH
67936: LD_INT 4
67938: PUSH
67939: LD_INT 5
67941: PUSH
67942: LD_INT 6
67944: PUSH
67945: LD_INT 7
67947: PUSH
67948: LD_INT 8
67950: PUSH
67951: LD_INT 9
67953: PUSH
67954: LD_INT 10
67956: PUSH
67957: LD_INT 11
67959: PUSH
67960: LD_INT 12
67962: PUSH
67963: LD_INT 13
67965: PUSH
67966: LD_INT 14
67968: PUSH
67969: LD_INT 15
67971: PUSH
67972: LD_INT 16
67974: PUSH
67975: LD_INT 17
67977: PUSH
67978: LD_INT 18
67980: PUSH
67981: LD_INT 19
67983: PUSH
67984: LD_INT 20
67986: PUSH
67987: LD_INT 21
67989: PUSH
67990: LD_INT 22
67992: PUSH
67993: LD_INT 23
67995: PUSH
67996: LD_INT 24
67998: PUSH
67999: LD_INT 25
68001: PUSH
68002: LD_INT 26
68004: PUSH
68005: LD_INT 27
68007: PUSH
68008: LD_INT 28
68010: PUSH
68011: LD_INT 29
68013: PUSH
68014: LD_INT 30
68016: PUSH
68017: LD_INT 31
68019: PUSH
68020: LD_INT 32
68022: PUSH
68023: LD_INT 33
68025: PUSH
68026: LD_INT 34
68028: PUSH
68029: LD_INT 36
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 101
68071: PUSH
68072: LD_INT 102
68074: PUSH
68075: LD_INT 103
68077: PUSH
68078: LD_INT 104
68080: PUSH
68081: LD_INT 105
68083: PUSH
68084: LD_INT 106
68086: PUSH
68087: LD_INT 107
68089: PUSH
68090: LD_INT 108
68092: PUSH
68093: LD_INT 109
68095: PUSH
68096: LD_INT 110
68098: PUSH
68099: LD_INT 111
68101: PUSH
68102: LD_INT 112
68104: PUSH
68105: LD_INT 113
68107: PUSH
68108: LD_INT 114
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: ST_TO_ADDR
68131: GO 68506
68133: LD_INT 18
68135: DOUBLE
68136: EQUAL
68137: IFTRUE 68141
68139: GO 68277
68141: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
68142: LD_ADDR_VAR 0 1
68146: PUSH
68147: LD_INT 2
68149: PUSH
68150: LD_INT 4
68152: PUSH
68153: LD_INT 5
68155: PUSH
68156: LD_INT 7
68158: PUSH
68159: LD_INT 11
68161: PUSH
68162: LD_INT 12
68164: PUSH
68165: LD_INT 15
68167: PUSH
68168: LD_INT 16
68170: PUSH
68171: LD_INT 20
68173: PUSH
68174: LD_INT 21
68176: PUSH
68177: LD_INT 22
68179: PUSH
68180: LD_INT 23
68182: PUSH
68183: LD_INT 25
68185: PUSH
68186: LD_INT 26
68188: PUSH
68189: LD_INT 30
68191: PUSH
68192: LD_INT 31
68194: PUSH
68195: LD_INT 32
68197: PUSH
68198: LD_INT 33
68200: PUSH
68201: LD_INT 34
68203: PUSH
68204: LD_INT 35
68206: PUSH
68207: LD_INT 36
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 101
68235: PUSH
68236: LD_INT 102
68238: PUSH
68239: LD_INT 103
68241: PUSH
68242: LD_INT 106
68244: PUSH
68245: LD_INT 108
68247: PUSH
68248: LD_INT 112
68250: PUSH
68251: LD_INT 113
68253: PUSH
68254: LD_INT 114
68256: PUSH
68257: LD_INT 115
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: ST_TO_ADDR
68275: GO 68506
68277: LD_INT 19
68279: DOUBLE
68280: EQUAL
68281: IFTRUE 68285
68283: GO 68505
68285: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
68286: LD_ADDR_VAR 0 1
68290: PUSH
68291: LD_INT 1
68293: PUSH
68294: LD_INT 2
68296: PUSH
68297: LD_INT 3
68299: PUSH
68300: LD_INT 4
68302: PUSH
68303: LD_INT 5
68305: PUSH
68306: LD_INT 6
68308: PUSH
68309: LD_INT 7
68311: PUSH
68312: LD_INT 8
68314: PUSH
68315: LD_INT 9
68317: PUSH
68318: LD_INT 10
68320: PUSH
68321: LD_INT 11
68323: PUSH
68324: LD_INT 12
68326: PUSH
68327: LD_INT 13
68329: PUSH
68330: LD_INT 14
68332: PUSH
68333: LD_INT 15
68335: PUSH
68336: LD_INT 16
68338: PUSH
68339: LD_INT 17
68341: PUSH
68342: LD_INT 18
68344: PUSH
68345: LD_INT 19
68347: PUSH
68348: LD_INT 20
68350: PUSH
68351: LD_INT 21
68353: PUSH
68354: LD_INT 22
68356: PUSH
68357: LD_INT 23
68359: PUSH
68360: LD_INT 24
68362: PUSH
68363: LD_INT 25
68365: PUSH
68366: LD_INT 26
68368: PUSH
68369: LD_INT 27
68371: PUSH
68372: LD_INT 28
68374: PUSH
68375: LD_INT 29
68377: PUSH
68378: LD_INT 30
68380: PUSH
68381: LD_INT 31
68383: PUSH
68384: LD_INT 32
68386: PUSH
68387: LD_INT 33
68389: PUSH
68390: LD_INT 34
68392: PUSH
68393: LD_INT 35
68395: PUSH
68396: LD_INT 36
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 101
68439: PUSH
68440: LD_INT 102
68442: PUSH
68443: LD_INT 103
68445: PUSH
68446: LD_INT 104
68448: PUSH
68449: LD_INT 105
68451: PUSH
68452: LD_INT 106
68454: PUSH
68455: LD_INT 107
68457: PUSH
68458: LD_INT 108
68460: PUSH
68461: LD_INT 109
68463: PUSH
68464: LD_INT 110
68466: PUSH
68467: LD_INT 111
68469: PUSH
68470: LD_INT 112
68472: PUSH
68473: LD_INT 113
68475: PUSH
68476: LD_INT 114
68478: PUSH
68479: LD_INT 115
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: ST_TO_ADDR
68503: GO 68506
68505: POP
// end else
68506: GO 68725
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
68508: LD_ADDR_VAR 0 1
68512: PUSH
68513: LD_INT 1
68515: PUSH
68516: LD_INT 2
68518: PUSH
68519: LD_INT 3
68521: PUSH
68522: LD_INT 4
68524: PUSH
68525: LD_INT 5
68527: PUSH
68528: LD_INT 6
68530: PUSH
68531: LD_INT 7
68533: PUSH
68534: LD_INT 8
68536: PUSH
68537: LD_INT 9
68539: PUSH
68540: LD_INT 10
68542: PUSH
68543: LD_INT 11
68545: PUSH
68546: LD_INT 12
68548: PUSH
68549: LD_INT 13
68551: PUSH
68552: LD_INT 14
68554: PUSH
68555: LD_INT 15
68557: PUSH
68558: LD_INT 16
68560: PUSH
68561: LD_INT 17
68563: PUSH
68564: LD_INT 18
68566: PUSH
68567: LD_INT 19
68569: PUSH
68570: LD_INT 20
68572: PUSH
68573: LD_INT 21
68575: PUSH
68576: LD_INT 22
68578: PUSH
68579: LD_INT 23
68581: PUSH
68582: LD_INT 24
68584: PUSH
68585: LD_INT 25
68587: PUSH
68588: LD_INT 26
68590: PUSH
68591: LD_INT 27
68593: PUSH
68594: LD_INT 28
68596: PUSH
68597: LD_INT 29
68599: PUSH
68600: LD_INT 30
68602: PUSH
68603: LD_INT 31
68605: PUSH
68606: LD_INT 32
68608: PUSH
68609: LD_INT 33
68611: PUSH
68612: LD_INT 34
68614: PUSH
68615: LD_INT 35
68617: PUSH
68618: LD_INT 36
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 101
68661: PUSH
68662: LD_INT 102
68664: PUSH
68665: LD_INT 103
68667: PUSH
68668: LD_INT 104
68670: PUSH
68671: LD_INT 105
68673: PUSH
68674: LD_INT 106
68676: PUSH
68677: LD_INT 107
68679: PUSH
68680: LD_INT 108
68682: PUSH
68683: LD_INT 109
68685: PUSH
68686: LD_INT 110
68688: PUSH
68689: LD_INT 111
68691: PUSH
68692: LD_INT 112
68694: PUSH
68695: LD_INT 113
68697: PUSH
68698: LD_INT 114
68700: PUSH
68701: LD_INT 115
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: ST_TO_ADDR
// if result then
68725: LD_VAR 0 1
68729: IFFALSE 69018
// begin normal :=  ;
68731: LD_ADDR_VAR 0 3
68735: PUSH
68736: LD_STRING 
68738: ST_TO_ADDR
// hardcore :=  ;
68739: LD_ADDR_VAR 0 4
68743: PUSH
68744: LD_STRING 
68746: ST_TO_ADDR
// for i = 1 to normalCounter do
68747: LD_ADDR_VAR 0 5
68751: PUSH
68752: DOUBLE
68753: LD_INT 1
68755: DEC
68756: ST_TO_ADDR
68757: LD_EXP 78
68761: PUSH
68762: FOR_TO
68763: IFFALSE 68864
// begin tmp := 0 ;
68765: LD_ADDR_VAR 0 2
68769: PUSH
68770: LD_STRING 0
68772: ST_TO_ADDR
// if result [ 1 ] then
68773: LD_VAR 0 1
68777: PUSH
68778: LD_INT 1
68780: ARRAY
68781: IFFALSE 68846
// if result [ 1 ] [ 1 ] = i then
68783: LD_VAR 0 1
68787: PUSH
68788: LD_INT 1
68790: ARRAY
68791: PUSH
68792: LD_INT 1
68794: ARRAY
68795: PUSH
68796: LD_VAR 0 5
68800: EQUAL
68801: IFFALSE 68846
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
68803: LD_ADDR_VAR 0 1
68807: PUSH
68808: LD_VAR 0 1
68812: PPUSH
68813: LD_INT 1
68815: PPUSH
68816: LD_VAR 0 1
68820: PUSH
68821: LD_INT 1
68823: ARRAY
68824: PPUSH
68825: LD_INT 1
68827: PPUSH
68828: CALL_OW 3
68832: PPUSH
68833: CALL_OW 1
68837: ST_TO_ADDR
// tmp := 1 ;
68838: LD_ADDR_VAR 0 2
68842: PUSH
68843: LD_STRING 1
68845: ST_TO_ADDR
// end ; normal := normal & tmp ;
68846: LD_ADDR_VAR 0 3
68850: PUSH
68851: LD_VAR 0 3
68855: PUSH
68856: LD_VAR 0 2
68860: STR
68861: ST_TO_ADDR
// end ;
68862: GO 68762
68864: POP
68865: POP
// for i = 1 to hardcoreCounter do
68866: LD_ADDR_VAR 0 5
68870: PUSH
68871: DOUBLE
68872: LD_INT 1
68874: DEC
68875: ST_TO_ADDR
68876: LD_EXP 79
68880: PUSH
68881: FOR_TO
68882: IFFALSE 68987
// begin tmp := 0 ;
68884: LD_ADDR_VAR 0 2
68888: PUSH
68889: LD_STRING 0
68891: ST_TO_ADDR
// if result [ 2 ] then
68892: LD_VAR 0 1
68896: PUSH
68897: LD_INT 2
68899: ARRAY
68900: IFFALSE 68969
// if result [ 2 ] [ 1 ] = 100 + i then
68902: LD_VAR 0 1
68906: PUSH
68907: LD_INT 2
68909: ARRAY
68910: PUSH
68911: LD_INT 1
68913: ARRAY
68914: PUSH
68915: LD_INT 100
68917: PUSH
68918: LD_VAR 0 5
68922: PLUS
68923: EQUAL
68924: IFFALSE 68969
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
68926: LD_ADDR_VAR 0 1
68930: PUSH
68931: LD_VAR 0 1
68935: PPUSH
68936: LD_INT 2
68938: PPUSH
68939: LD_VAR 0 1
68943: PUSH
68944: LD_INT 2
68946: ARRAY
68947: PPUSH
68948: LD_INT 1
68950: PPUSH
68951: CALL_OW 3
68955: PPUSH
68956: CALL_OW 1
68960: ST_TO_ADDR
// tmp := 1 ;
68961: LD_ADDR_VAR 0 2
68965: PUSH
68966: LD_STRING 1
68968: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
68969: LD_ADDR_VAR 0 4
68973: PUSH
68974: LD_VAR 0 4
68978: PUSH
68979: LD_VAR 0 2
68983: STR
68984: ST_TO_ADDR
// end ;
68985: GO 68881
68987: POP
68988: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
68989: LD_STRING getStreamItemsFromMission("
68991: PUSH
68992: LD_VAR 0 3
68996: STR
68997: PUSH
68998: LD_STRING ","
69000: STR
69001: PUSH
69002: LD_VAR 0 4
69006: STR
69007: PUSH
69008: LD_STRING ")
69010: STR
69011: PPUSH
69012: CALL_OW 559
// end else
69016: GO 69025
// ToLua ( getStreamItemsFromMission("","") ) ;
69018: LD_STRING getStreamItemsFromMission("","")
69020: PPUSH
69021: CALL_OW 559
// end ;
69025: LD_VAR 0 1
69029: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
69030: LD_EXP 77
69034: PUSH
69035: LD_EXP 82
69039: AND
69040: IFFALSE 69164
69042: GO 69044
69044: DISABLE
69045: LD_INT 0
69047: PPUSH
69048: PPUSH
// begin enable ;
69049: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
69050: LD_ADDR_VAR 0 2
69054: PUSH
69055: LD_INT 22
69057: PUSH
69058: LD_OWVAR 2
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 2
69069: PUSH
69070: LD_INT 34
69072: PUSH
69073: LD_INT 7
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 34
69082: PUSH
69083: LD_INT 45
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 34
69092: PUSH
69093: LD_INT 28
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 34
69102: PUSH
69103: LD_INT 47
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PPUSH
69121: CALL_OW 69
69125: ST_TO_ADDR
// if not tmp then
69126: LD_VAR 0 2
69130: NOT
69131: IFFALSE 69135
// exit ;
69133: GO 69164
// for i in tmp do
69135: LD_ADDR_VAR 0 1
69139: PUSH
69140: LD_VAR 0 2
69144: PUSH
69145: FOR_IN
69146: IFFALSE 69162
// begin SetLives ( i , 0 ) ;
69148: LD_VAR 0 1
69152: PPUSH
69153: LD_INT 0
69155: PPUSH
69156: CALL_OW 234
// end ;
69160: GO 69145
69162: POP
69163: POP
// end ;
69164: PPOPN 2
69166: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
69167: LD_EXP 77
69171: PUSH
69172: LD_EXP 83
69176: AND
69177: IFFALSE 69261
69179: GO 69181
69181: DISABLE
69182: LD_INT 0
69184: PPUSH
69185: PPUSH
// begin enable ;
69186: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
69187: LD_ADDR_VAR 0 2
69191: PUSH
69192: LD_INT 22
69194: PUSH
69195: LD_OWVAR 2
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 32
69206: PUSH
69207: LD_INT 3
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PPUSH
69218: CALL_OW 69
69222: ST_TO_ADDR
// if not tmp then
69223: LD_VAR 0 2
69227: NOT
69228: IFFALSE 69232
// exit ;
69230: GO 69261
// for i in tmp do
69232: LD_ADDR_VAR 0 1
69236: PUSH
69237: LD_VAR 0 2
69241: PUSH
69242: FOR_IN
69243: IFFALSE 69259
// begin SetLives ( i , 0 ) ;
69245: LD_VAR 0 1
69249: PPUSH
69250: LD_INT 0
69252: PPUSH
69253: CALL_OW 234
// end ;
69257: GO 69242
69259: POP
69260: POP
// end ;
69261: PPOPN 2
69263: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
69264: LD_EXP 77
69268: PUSH
69269: LD_EXP 80
69273: AND
69274: IFFALSE 69367
69276: GO 69278
69278: DISABLE
69279: LD_INT 0
69281: PPUSH
// begin enable ;
69282: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
69283: LD_ADDR_VAR 0 1
69287: PUSH
69288: LD_INT 22
69290: PUSH
69291: LD_OWVAR 2
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 2
69302: PUSH
69303: LD_INT 25
69305: PUSH
69306: LD_INT 5
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 25
69315: PUSH
69316: LD_INT 9
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 25
69325: PUSH
69326: LD_INT 8
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PPUSH
69343: CALL_OW 69
69347: PUSH
69348: FOR_IN
69349: IFFALSE 69365
// begin SetClass ( i , 1 ) ;
69351: LD_VAR 0 1
69355: PPUSH
69356: LD_INT 1
69358: PPUSH
69359: CALL_OW 336
// end ;
69363: GO 69348
69365: POP
69366: POP
// end ;
69367: PPOPN 1
69369: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
69370: LD_EXP 77
69374: PUSH
69375: LD_EXP 81
69379: AND
69380: PUSH
69381: LD_OWVAR 65
69385: PUSH
69386: LD_INT 7
69388: LESS
69389: AND
69390: IFFALSE 69404
69392: GO 69394
69394: DISABLE
// begin enable ;
69395: ENABLE
// game_speed := 7 ;
69396: LD_ADDR_OWVAR 65
69400: PUSH
69401: LD_INT 7
69403: ST_TO_ADDR
// end ;
69404: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
69405: LD_EXP 77
69409: PUSH
69410: LD_EXP 84
69414: AND
69415: IFFALSE 69617
69417: GO 69419
69419: DISABLE
69420: LD_INT 0
69422: PPUSH
69423: PPUSH
69424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
69425: LD_ADDR_VAR 0 3
69429: PUSH
69430: LD_INT 81
69432: PUSH
69433: LD_OWVAR 2
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: LD_INT 21
69444: PUSH
69445: LD_INT 1
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PPUSH
69456: CALL_OW 69
69460: ST_TO_ADDR
// if not tmp then
69461: LD_VAR 0 3
69465: NOT
69466: IFFALSE 69470
// exit ;
69468: GO 69617
// if tmp > 5 then
69470: LD_VAR 0 3
69474: PUSH
69475: LD_INT 5
69477: GREATER
69478: IFFALSE 69490
// k := 5 else
69480: LD_ADDR_VAR 0 2
69484: PUSH
69485: LD_INT 5
69487: ST_TO_ADDR
69488: GO 69500
// k := tmp ;
69490: LD_ADDR_VAR 0 2
69494: PUSH
69495: LD_VAR 0 3
69499: ST_TO_ADDR
// for i := 1 to k do
69500: LD_ADDR_VAR 0 1
69504: PUSH
69505: DOUBLE
69506: LD_INT 1
69508: DEC
69509: ST_TO_ADDR
69510: LD_VAR 0 2
69514: PUSH
69515: FOR_TO
69516: IFFALSE 69615
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
69518: LD_VAR 0 3
69522: PUSH
69523: LD_VAR 0 1
69527: ARRAY
69528: PPUSH
69529: LD_VAR 0 1
69533: PUSH
69534: LD_INT 4
69536: MOD
69537: PUSH
69538: LD_INT 1
69540: PLUS
69541: PPUSH
69542: CALL_OW 259
69546: PUSH
69547: LD_INT 10
69549: LESS
69550: IFFALSE 69613
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
69552: LD_VAR 0 3
69556: PUSH
69557: LD_VAR 0 1
69561: ARRAY
69562: PPUSH
69563: LD_VAR 0 1
69567: PUSH
69568: LD_INT 4
69570: MOD
69571: PUSH
69572: LD_INT 1
69574: PLUS
69575: PPUSH
69576: LD_VAR 0 3
69580: PUSH
69581: LD_VAR 0 1
69585: ARRAY
69586: PPUSH
69587: LD_VAR 0 1
69591: PUSH
69592: LD_INT 4
69594: MOD
69595: PUSH
69596: LD_INT 1
69598: PLUS
69599: PPUSH
69600: CALL_OW 259
69604: PUSH
69605: LD_INT 1
69607: PLUS
69608: PPUSH
69609: CALL_OW 237
69613: GO 69515
69615: POP
69616: POP
// end ;
69617: PPOPN 3
69619: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
69620: LD_EXP 77
69624: PUSH
69625: LD_EXP 85
69629: AND
69630: IFFALSE 69650
69632: GO 69634
69634: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
69635: LD_INT 4
69637: PPUSH
69638: LD_OWVAR 2
69642: PPUSH
69643: LD_INT 0
69645: PPUSH
69646: CALL_OW 324
69650: END
// every 0 0$1 trigger StreamModeActive and sShovel do
69651: LD_EXP 77
69655: PUSH
69656: LD_EXP 114
69660: AND
69661: IFFALSE 69681
69663: GO 69665
69665: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
69666: LD_INT 19
69668: PPUSH
69669: LD_OWVAR 2
69673: PPUSH
69674: LD_INT 0
69676: PPUSH
69677: CALL_OW 324
69681: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
69682: LD_EXP 77
69686: PUSH
69687: LD_EXP 86
69691: AND
69692: IFFALSE 69794
69694: GO 69696
69696: DISABLE
69697: LD_INT 0
69699: PPUSH
69700: PPUSH
// begin enable ;
69701: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
69702: LD_ADDR_VAR 0 2
69706: PUSH
69707: LD_INT 22
69709: PUSH
69710: LD_OWVAR 2
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 2
69721: PUSH
69722: LD_INT 34
69724: PUSH
69725: LD_INT 11
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 34
69734: PUSH
69735: LD_INT 30
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: LIST
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PPUSH
69751: CALL_OW 69
69755: ST_TO_ADDR
// if not tmp then
69756: LD_VAR 0 2
69760: NOT
69761: IFFALSE 69765
// exit ;
69763: GO 69794
// for i in tmp do
69765: LD_ADDR_VAR 0 1
69769: PUSH
69770: LD_VAR 0 2
69774: PUSH
69775: FOR_IN
69776: IFFALSE 69792
// begin SetLives ( i , 0 ) ;
69778: LD_VAR 0 1
69782: PPUSH
69783: LD_INT 0
69785: PPUSH
69786: CALL_OW 234
// end ;
69790: GO 69775
69792: POP
69793: POP
// end ;
69794: PPOPN 2
69796: END
// every 0 0$1 trigger StreamModeActive and sBunker do
69797: LD_EXP 77
69801: PUSH
69802: LD_EXP 87
69806: AND
69807: IFFALSE 69827
69809: GO 69811
69811: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
69812: LD_INT 32
69814: PPUSH
69815: LD_OWVAR 2
69819: PPUSH
69820: LD_INT 0
69822: PPUSH
69823: CALL_OW 324
69827: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
69828: LD_EXP 77
69832: PUSH
69833: LD_EXP 88
69837: AND
69838: IFFALSE 70019
69840: GO 69842
69842: DISABLE
69843: LD_INT 0
69845: PPUSH
69846: PPUSH
69847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
69848: LD_ADDR_VAR 0 2
69852: PUSH
69853: LD_INT 22
69855: PUSH
69856: LD_OWVAR 2
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 33
69867: PUSH
69868: LD_INT 3
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PPUSH
69879: CALL_OW 69
69883: ST_TO_ADDR
// if not tmp then
69884: LD_VAR 0 2
69888: NOT
69889: IFFALSE 69893
// exit ;
69891: GO 70019
// side := 0 ;
69893: LD_ADDR_VAR 0 3
69897: PUSH
69898: LD_INT 0
69900: ST_TO_ADDR
// for i := 1 to 8 do
69901: LD_ADDR_VAR 0 1
69905: PUSH
69906: DOUBLE
69907: LD_INT 1
69909: DEC
69910: ST_TO_ADDR
69911: LD_INT 8
69913: PUSH
69914: FOR_TO
69915: IFFALSE 69963
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
69917: LD_OWVAR 2
69921: PUSH
69922: LD_VAR 0 1
69926: NONEQUAL
69927: PUSH
69928: LD_OWVAR 2
69932: PPUSH
69933: LD_VAR 0 1
69937: PPUSH
69938: CALL_OW 81
69942: PUSH
69943: LD_INT 2
69945: EQUAL
69946: AND
69947: IFFALSE 69961
// begin side := i ;
69949: LD_ADDR_VAR 0 3
69953: PUSH
69954: LD_VAR 0 1
69958: ST_TO_ADDR
// break ;
69959: GO 69963
// end ;
69961: GO 69914
69963: POP
69964: POP
// if not side then
69965: LD_VAR 0 3
69969: NOT
69970: IFFALSE 69974
// exit ;
69972: GO 70019
// for i := 1 to tmp do
69974: LD_ADDR_VAR 0 1
69978: PUSH
69979: DOUBLE
69980: LD_INT 1
69982: DEC
69983: ST_TO_ADDR
69984: LD_VAR 0 2
69988: PUSH
69989: FOR_TO
69990: IFFALSE 70017
// if Prob ( 60 ) then
69992: LD_INT 60
69994: PPUSH
69995: CALL_OW 13
69999: IFFALSE 70015
// SetSide ( i , side ) ;
70001: LD_VAR 0 1
70005: PPUSH
70006: LD_VAR 0 3
70010: PPUSH
70011: CALL_OW 235
70015: GO 69989
70017: POP
70018: POP
// end ;
70019: PPOPN 3
70021: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
70022: LD_EXP 77
70026: PUSH
70027: LD_EXP 90
70031: AND
70032: IFFALSE 70151
70034: GO 70036
70036: DISABLE
70037: LD_INT 0
70039: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
70040: LD_ADDR_VAR 0 1
70044: PUSH
70045: LD_INT 22
70047: PUSH
70048: LD_OWVAR 2
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 21
70059: PUSH
70060: LD_INT 1
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 3
70069: PUSH
70070: LD_INT 23
70072: PUSH
70073: LD_INT 0
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: LIST
70088: PPUSH
70089: CALL_OW 69
70093: PUSH
70094: FOR_IN
70095: IFFALSE 70149
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
70097: LD_VAR 0 1
70101: PPUSH
70102: CALL_OW 257
70106: PUSH
70107: LD_INT 1
70109: PUSH
70110: LD_INT 2
70112: PUSH
70113: LD_INT 3
70115: PUSH
70116: LD_INT 4
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: IN
70125: IFFALSE 70147
// SetClass ( un , rand ( 1 , 4 ) ) ;
70127: LD_VAR 0 1
70131: PPUSH
70132: LD_INT 1
70134: PPUSH
70135: LD_INT 4
70137: PPUSH
70138: CALL_OW 12
70142: PPUSH
70143: CALL_OW 336
70147: GO 70094
70149: POP
70150: POP
// end ;
70151: PPOPN 1
70153: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
70154: LD_EXP 77
70158: PUSH
70159: LD_EXP 89
70163: AND
70164: IFFALSE 70243
70166: GO 70168
70168: DISABLE
70169: LD_INT 0
70171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
70172: LD_ADDR_VAR 0 1
70176: PUSH
70177: LD_INT 22
70179: PUSH
70180: LD_OWVAR 2
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 21
70191: PUSH
70192: LD_INT 3
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PPUSH
70203: CALL_OW 69
70207: ST_TO_ADDR
// if not tmp then
70208: LD_VAR 0 1
70212: NOT
70213: IFFALSE 70217
// exit ;
70215: GO 70243
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
70217: LD_VAR 0 1
70221: PUSH
70222: LD_INT 1
70224: PPUSH
70225: LD_VAR 0 1
70229: PPUSH
70230: CALL_OW 12
70234: ARRAY
70235: PPUSH
70236: LD_INT 100
70238: PPUSH
70239: CALL_OW 234
// end ;
70243: PPOPN 1
70245: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
70246: LD_EXP 77
70250: PUSH
70251: LD_EXP 91
70255: AND
70256: IFFALSE 70354
70258: GO 70260
70260: DISABLE
70261: LD_INT 0
70263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70264: LD_ADDR_VAR 0 1
70268: PUSH
70269: LD_INT 22
70271: PUSH
70272: LD_OWVAR 2
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 21
70283: PUSH
70284: LD_INT 1
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PPUSH
70295: CALL_OW 69
70299: ST_TO_ADDR
// if not tmp then
70300: LD_VAR 0 1
70304: NOT
70305: IFFALSE 70309
// exit ;
70307: GO 70354
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
70309: LD_VAR 0 1
70313: PUSH
70314: LD_INT 1
70316: PPUSH
70317: LD_VAR 0 1
70321: PPUSH
70322: CALL_OW 12
70326: ARRAY
70327: PPUSH
70328: LD_INT 1
70330: PPUSH
70331: LD_INT 4
70333: PPUSH
70334: CALL_OW 12
70338: PPUSH
70339: LD_INT 3000
70341: PPUSH
70342: LD_INT 9000
70344: PPUSH
70345: CALL_OW 12
70349: PPUSH
70350: CALL_OW 492
// end ;
70354: PPOPN 1
70356: END
// every 0 0$1 trigger StreamModeActive and sDepot do
70357: LD_EXP 77
70361: PUSH
70362: LD_EXP 92
70366: AND
70367: IFFALSE 70387
70369: GO 70371
70371: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
70372: LD_INT 1
70374: PPUSH
70375: LD_OWVAR 2
70379: PPUSH
70380: LD_INT 0
70382: PPUSH
70383: CALL_OW 324
70387: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
70388: LD_EXP 77
70392: PUSH
70393: LD_EXP 93
70397: AND
70398: IFFALSE 70481
70400: GO 70402
70402: DISABLE
70403: LD_INT 0
70405: PPUSH
70406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
70407: LD_ADDR_VAR 0 2
70411: PUSH
70412: LD_INT 22
70414: PUSH
70415: LD_OWVAR 2
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 21
70426: PUSH
70427: LD_INT 3
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PPUSH
70438: CALL_OW 69
70442: ST_TO_ADDR
// if not tmp then
70443: LD_VAR 0 2
70447: NOT
70448: IFFALSE 70452
// exit ;
70450: GO 70481
// for i in tmp do
70452: LD_ADDR_VAR 0 1
70456: PUSH
70457: LD_VAR 0 2
70461: PUSH
70462: FOR_IN
70463: IFFALSE 70479
// SetBLevel ( i , 10 ) ;
70465: LD_VAR 0 1
70469: PPUSH
70470: LD_INT 10
70472: PPUSH
70473: CALL_OW 241
70477: GO 70462
70479: POP
70480: POP
// end ;
70481: PPOPN 2
70483: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
70484: LD_EXP 77
70488: PUSH
70489: LD_EXP 94
70493: AND
70494: IFFALSE 70605
70496: GO 70498
70498: DISABLE
70499: LD_INT 0
70501: PPUSH
70502: PPUSH
70503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70504: LD_ADDR_VAR 0 3
70508: PUSH
70509: LD_INT 22
70511: PUSH
70512: LD_OWVAR 2
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 25
70523: PUSH
70524: LD_INT 1
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PPUSH
70535: CALL_OW 69
70539: ST_TO_ADDR
// if not tmp then
70540: LD_VAR 0 3
70544: NOT
70545: IFFALSE 70549
// exit ;
70547: GO 70605
// un := tmp [ rand ( 1 , tmp ) ] ;
70549: LD_ADDR_VAR 0 2
70553: PUSH
70554: LD_VAR 0 3
70558: PUSH
70559: LD_INT 1
70561: PPUSH
70562: LD_VAR 0 3
70566: PPUSH
70567: CALL_OW 12
70571: ARRAY
70572: ST_TO_ADDR
// if Crawls ( un ) then
70573: LD_VAR 0 2
70577: PPUSH
70578: CALL_OW 318
70582: IFFALSE 70593
// ComWalk ( un ) ;
70584: LD_VAR 0 2
70588: PPUSH
70589: CALL_OW 138
// SetClass ( un , class_sniper ) ;
70593: LD_VAR 0 2
70597: PPUSH
70598: LD_INT 5
70600: PPUSH
70601: CALL_OW 336
// end ;
70605: PPOPN 3
70607: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
70608: LD_EXP 77
70612: PUSH
70613: LD_EXP 95
70617: AND
70618: PUSH
70619: LD_OWVAR 67
70623: PUSH
70624: LD_INT 3
70626: LESS
70627: AND
70628: IFFALSE 70647
70630: GO 70632
70632: DISABLE
// Difficulty := Difficulty + 1 ;
70633: LD_ADDR_OWVAR 67
70637: PUSH
70638: LD_OWVAR 67
70642: PUSH
70643: LD_INT 1
70645: PLUS
70646: ST_TO_ADDR
70647: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
70648: LD_EXP 77
70652: PUSH
70653: LD_EXP 96
70657: AND
70658: IFFALSE 70761
70660: GO 70662
70662: DISABLE
70663: LD_INT 0
70665: PPUSH
// begin for i := 1 to 5 do
70666: LD_ADDR_VAR 0 1
70670: PUSH
70671: DOUBLE
70672: LD_INT 1
70674: DEC
70675: ST_TO_ADDR
70676: LD_INT 5
70678: PUSH
70679: FOR_TO
70680: IFFALSE 70759
// begin uc_nation := nation_nature ;
70682: LD_ADDR_OWVAR 21
70686: PUSH
70687: LD_INT 0
70689: ST_TO_ADDR
// uc_side := 0 ;
70690: LD_ADDR_OWVAR 20
70694: PUSH
70695: LD_INT 0
70697: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
70698: LD_ADDR_OWVAR 29
70702: PUSH
70703: LD_INT 12
70705: PUSH
70706: LD_INT 12
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: ST_TO_ADDR
// hc_agressivity := 20 ;
70713: LD_ADDR_OWVAR 35
70717: PUSH
70718: LD_INT 20
70720: ST_TO_ADDR
// hc_class := class_tiger ;
70721: LD_ADDR_OWVAR 28
70725: PUSH
70726: LD_INT 14
70728: ST_TO_ADDR
// hc_gallery :=  ;
70729: LD_ADDR_OWVAR 33
70733: PUSH
70734: LD_STRING 
70736: ST_TO_ADDR
// hc_name :=  ;
70737: LD_ADDR_OWVAR 26
70741: PUSH
70742: LD_STRING 
70744: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
70745: CALL_OW 44
70749: PPUSH
70750: LD_INT 0
70752: PPUSH
70753: CALL_OW 51
// end ;
70757: GO 70679
70759: POP
70760: POP
// end ;
70761: PPOPN 1
70763: END
// every 0 0$1 trigger StreamModeActive and sBomb do
70764: LD_EXP 77
70768: PUSH
70769: LD_EXP 97
70773: AND
70774: IFFALSE 70783
70776: GO 70778
70778: DISABLE
// StreamSibBomb ;
70779: CALL 70784 0 0
70783: END
// export function StreamSibBomb ; var i , x , y ; begin
70784: LD_INT 0
70786: PPUSH
70787: PPUSH
70788: PPUSH
70789: PPUSH
// result := false ;
70790: LD_ADDR_VAR 0 1
70794: PUSH
70795: LD_INT 0
70797: ST_TO_ADDR
// for i := 1 to 16 do
70798: LD_ADDR_VAR 0 2
70802: PUSH
70803: DOUBLE
70804: LD_INT 1
70806: DEC
70807: ST_TO_ADDR
70808: LD_INT 16
70810: PUSH
70811: FOR_TO
70812: IFFALSE 71011
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70814: LD_ADDR_VAR 0 3
70818: PUSH
70819: LD_INT 10
70821: PUSH
70822: LD_INT 20
70824: PUSH
70825: LD_INT 30
70827: PUSH
70828: LD_INT 40
70830: PUSH
70831: LD_INT 50
70833: PUSH
70834: LD_INT 60
70836: PUSH
70837: LD_INT 70
70839: PUSH
70840: LD_INT 80
70842: PUSH
70843: LD_INT 90
70845: PUSH
70846: LD_INT 100
70848: PUSH
70849: LD_INT 110
70851: PUSH
70852: LD_INT 120
70854: PUSH
70855: LD_INT 130
70857: PUSH
70858: LD_INT 140
70860: PUSH
70861: LD_INT 150
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: PUSH
70881: LD_INT 1
70883: PPUSH
70884: LD_INT 15
70886: PPUSH
70887: CALL_OW 12
70891: ARRAY
70892: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70893: LD_ADDR_VAR 0 4
70897: PUSH
70898: LD_INT 10
70900: PUSH
70901: LD_INT 20
70903: PUSH
70904: LD_INT 30
70906: PUSH
70907: LD_INT 40
70909: PUSH
70910: LD_INT 50
70912: PUSH
70913: LD_INT 60
70915: PUSH
70916: LD_INT 70
70918: PUSH
70919: LD_INT 80
70921: PUSH
70922: LD_INT 90
70924: PUSH
70925: LD_INT 100
70927: PUSH
70928: LD_INT 110
70930: PUSH
70931: LD_INT 120
70933: PUSH
70934: LD_INT 130
70936: PUSH
70937: LD_INT 140
70939: PUSH
70940: LD_INT 150
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: LIST
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: PUSH
70960: LD_INT 1
70962: PPUSH
70963: LD_INT 15
70965: PPUSH
70966: CALL_OW 12
70970: ARRAY
70971: ST_TO_ADDR
// if ValidHex ( x , y ) then
70972: LD_VAR 0 3
70976: PPUSH
70977: LD_VAR 0 4
70981: PPUSH
70982: CALL_OW 488
70986: IFFALSE 71009
// begin result := [ x , y ] ;
70988: LD_ADDR_VAR 0 1
70992: PUSH
70993: LD_VAR 0 3
70997: PUSH
70998: LD_VAR 0 4
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: ST_TO_ADDR
// break ;
71007: GO 71011
// end ; end ;
71009: GO 70811
71011: POP
71012: POP
// if result then
71013: LD_VAR 0 1
71017: IFFALSE 71077
// begin ToLua ( playSibBomb() ) ;
71019: LD_STRING playSibBomb()
71021: PPUSH
71022: CALL_OW 559
// wait ( 0 0$14 ) ;
71026: LD_INT 490
71028: PPUSH
71029: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
71033: LD_VAR 0 1
71037: PUSH
71038: LD_INT 1
71040: ARRAY
71041: PPUSH
71042: LD_VAR 0 1
71046: PUSH
71047: LD_INT 2
71049: ARRAY
71050: PPUSH
71051: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
71055: LD_VAR 0 1
71059: PUSH
71060: LD_INT 1
71062: ARRAY
71063: PPUSH
71064: LD_VAR 0 1
71068: PUSH
71069: LD_INT 2
71071: ARRAY
71072: PPUSH
71073: CALL_OW 429
// end ; end ;
71077: LD_VAR 0 1
71081: RET
// every 0 0$1 trigger StreamModeActive and sReset do
71082: LD_EXP 77
71086: PUSH
71087: LD_EXP 99
71091: AND
71092: IFFALSE 71104
71094: GO 71096
71096: DISABLE
// YouLost (  ) ;
71097: LD_STRING 
71099: PPUSH
71100: CALL_OW 104
71104: END
// every 0 0$1 trigger StreamModeActive and sFog do
71105: LD_EXP 77
71109: PUSH
71110: LD_EXP 98
71114: AND
71115: IFFALSE 71129
71117: GO 71119
71119: DISABLE
// FogOff ( your_side ) ;
71120: LD_OWVAR 2
71124: PPUSH
71125: CALL_OW 344
71129: END
// every 0 0$1 trigger StreamModeActive and sSun do
71130: LD_EXP 77
71134: PUSH
71135: LD_EXP 100
71139: AND
71140: IFFALSE 71168
71142: GO 71144
71144: DISABLE
// begin solar_recharge_percent := 0 ;
71145: LD_ADDR_OWVAR 79
71149: PUSH
71150: LD_INT 0
71152: ST_TO_ADDR
// wait ( 5 5$00 ) ;
71153: LD_INT 10500
71155: PPUSH
71156: CALL_OW 67
// solar_recharge_percent := 100 ;
71160: LD_ADDR_OWVAR 79
71164: PUSH
71165: LD_INT 100
71167: ST_TO_ADDR
// end ;
71168: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
71169: LD_EXP 77
71173: PUSH
71174: LD_EXP 101
71178: AND
71179: IFFALSE 71418
71181: GO 71183
71183: DISABLE
71184: LD_INT 0
71186: PPUSH
71187: PPUSH
71188: PPUSH
// begin tmp := [ ] ;
71189: LD_ADDR_VAR 0 3
71193: PUSH
71194: EMPTY
71195: ST_TO_ADDR
// for i := 1 to 6 do
71196: LD_ADDR_VAR 0 1
71200: PUSH
71201: DOUBLE
71202: LD_INT 1
71204: DEC
71205: ST_TO_ADDR
71206: LD_INT 6
71208: PUSH
71209: FOR_TO
71210: IFFALSE 71315
// begin uc_nation := nation_nature ;
71212: LD_ADDR_OWVAR 21
71216: PUSH
71217: LD_INT 0
71219: ST_TO_ADDR
// uc_side := 0 ;
71220: LD_ADDR_OWVAR 20
71224: PUSH
71225: LD_INT 0
71227: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71228: LD_ADDR_OWVAR 29
71232: PUSH
71233: LD_INT 12
71235: PUSH
71236: LD_INT 12
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: ST_TO_ADDR
// hc_agressivity := 20 ;
71243: LD_ADDR_OWVAR 35
71247: PUSH
71248: LD_INT 20
71250: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
71251: LD_ADDR_OWVAR 28
71255: PUSH
71256: LD_INT 17
71258: ST_TO_ADDR
// hc_gallery :=  ;
71259: LD_ADDR_OWVAR 33
71263: PUSH
71264: LD_STRING 
71266: ST_TO_ADDR
// hc_name :=  ;
71267: LD_ADDR_OWVAR 26
71271: PUSH
71272: LD_STRING 
71274: ST_TO_ADDR
// un := CreateHuman ;
71275: LD_ADDR_VAR 0 2
71279: PUSH
71280: CALL_OW 44
71284: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
71285: LD_VAR 0 2
71289: PPUSH
71290: LD_INT 1
71292: PPUSH
71293: CALL_OW 51
// tmp := tmp ^ un ;
71297: LD_ADDR_VAR 0 3
71301: PUSH
71302: LD_VAR 0 3
71306: PUSH
71307: LD_VAR 0 2
71311: ADD
71312: ST_TO_ADDR
// end ;
71313: GO 71209
71315: POP
71316: POP
// repeat wait ( 0 0$1 ) ;
71317: LD_INT 35
71319: PPUSH
71320: CALL_OW 67
// for un in tmp do
71324: LD_ADDR_VAR 0 2
71328: PUSH
71329: LD_VAR 0 3
71333: PUSH
71334: FOR_IN
71335: IFFALSE 71409
// begin if IsDead ( un ) then
71337: LD_VAR 0 2
71341: PPUSH
71342: CALL_OW 301
71346: IFFALSE 71366
// begin tmp := tmp diff un ;
71348: LD_ADDR_VAR 0 3
71352: PUSH
71353: LD_VAR 0 3
71357: PUSH
71358: LD_VAR 0 2
71362: DIFF
71363: ST_TO_ADDR
// continue ;
71364: GO 71334
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
71366: LD_VAR 0 2
71370: PPUSH
71371: LD_INT 3
71373: PUSH
71374: LD_INT 22
71376: PUSH
71377: LD_INT 0
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PPUSH
71388: CALL_OW 69
71392: PPUSH
71393: LD_VAR 0 2
71397: PPUSH
71398: CALL_OW 74
71402: PPUSH
71403: CALL_OW 115
// end ;
71407: GO 71334
71409: POP
71410: POP
// until not tmp ;
71411: LD_VAR 0 3
71415: NOT
71416: IFFALSE 71317
// end ;
71418: PPOPN 3
71420: END
// every 0 0$1 trigger StreamModeActive and sTroll do
71421: LD_EXP 77
71425: PUSH
71426: LD_EXP 102
71430: AND
71431: IFFALSE 71485
71433: GO 71435
71435: DISABLE
// begin ToLua ( displayTroll(); ) ;
71436: LD_STRING displayTroll();
71438: PPUSH
71439: CALL_OW 559
// wait ( 3 3$00 ) ;
71443: LD_INT 6300
71445: PPUSH
71446: CALL_OW 67
// ToLua ( hideTroll(); ) ;
71450: LD_STRING hideTroll();
71452: PPUSH
71453: CALL_OW 559
// wait ( 1 1$00 ) ;
71457: LD_INT 2100
71459: PPUSH
71460: CALL_OW 67
// ToLua ( displayTroll(); ) ;
71464: LD_STRING displayTroll();
71466: PPUSH
71467: CALL_OW 559
// wait ( 1 1$00 ) ;
71471: LD_INT 2100
71473: PPUSH
71474: CALL_OW 67
// ToLua ( hideTroll(); ) ;
71478: LD_STRING hideTroll();
71480: PPUSH
71481: CALL_OW 559
// end ;
71485: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
71486: LD_EXP 77
71490: PUSH
71491: LD_EXP 103
71495: AND
71496: IFFALSE 71559
71498: GO 71500
71500: DISABLE
71501: LD_INT 0
71503: PPUSH
// begin p := 0 ;
71504: LD_ADDR_VAR 0 1
71508: PUSH
71509: LD_INT 0
71511: ST_TO_ADDR
// repeat game_speed := 1 ;
71512: LD_ADDR_OWVAR 65
71516: PUSH
71517: LD_INT 1
71519: ST_TO_ADDR
// wait ( 0 0$1 ) ;
71520: LD_INT 35
71522: PPUSH
71523: CALL_OW 67
// p := p + 1 ;
71527: LD_ADDR_VAR 0 1
71531: PUSH
71532: LD_VAR 0 1
71536: PUSH
71537: LD_INT 1
71539: PLUS
71540: ST_TO_ADDR
// until p >= 60 ;
71541: LD_VAR 0 1
71545: PUSH
71546: LD_INT 60
71548: GREATEREQUAL
71549: IFFALSE 71512
// game_speed := 4 ;
71551: LD_ADDR_OWVAR 65
71555: PUSH
71556: LD_INT 4
71558: ST_TO_ADDR
// end ;
71559: PPOPN 1
71561: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
71562: LD_EXP 77
71566: PUSH
71567: LD_EXP 104
71571: AND
71572: IFFALSE 71718
71574: GO 71576
71576: DISABLE
71577: LD_INT 0
71579: PPUSH
71580: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71581: LD_ADDR_VAR 0 1
71585: PUSH
71586: LD_INT 22
71588: PUSH
71589: LD_OWVAR 2
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: LD_INT 2
71600: PUSH
71601: LD_INT 30
71603: PUSH
71604: LD_INT 0
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 30
71613: PUSH
71614: LD_INT 1
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: LIST
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PPUSH
71630: CALL_OW 69
71634: ST_TO_ADDR
// if not depot then
71635: LD_VAR 0 1
71639: NOT
71640: IFFALSE 71644
// exit ;
71642: GO 71718
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
71644: LD_ADDR_VAR 0 2
71648: PUSH
71649: LD_VAR 0 1
71653: PUSH
71654: LD_INT 1
71656: PPUSH
71657: LD_VAR 0 1
71661: PPUSH
71662: CALL_OW 12
71666: ARRAY
71667: PPUSH
71668: CALL_OW 274
71672: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
71673: LD_VAR 0 2
71677: PPUSH
71678: LD_INT 1
71680: PPUSH
71681: LD_INT 0
71683: PPUSH
71684: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
71688: LD_VAR 0 2
71692: PPUSH
71693: LD_INT 2
71695: PPUSH
71696: LD_INT 0
71698: PPUSH
71699: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
71703: LD_VAR 0 2
71707: PPUSH
71708: LD_INT 3
71710: PPUSH
71711: LD_INT 0
71713: PPUSH
71714: CALL_OW 277
// end ;
71718: PPOPN 2
71720: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
71721: LD_EXP 77
71725: PUSH
71726: LD_EXP 105
71730: AND
71731: IFFALSE 71828
71733: GO 71735
71735: DISABLE
71736: LD_INT 0
71738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71739: LD_ADDR_VAR 0 1
71743: PUSH
71744: LD_INT 22
71746: PUSH
71747: LD_OWVAR 2
71751: PUSH
71752: EMPTY
71753: LIST
71754: LIST
71755: PUSH
71756: LD_INT 21
71758: PUSH
71759: LD_INT 1
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PUSH
71766: LD_INT 3
71768: PUSH
71769: LD_INT 23
71771: PUSH
71772: LD_INT 0
71774: PUSH
71775: EMPTY
71776: LIST
71777: LIST
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: LIST
71787: PPUSH
71788: CALL_OW 69
71792: ST_TO_ADDR
// if not tmp then
71793: LD_VAR 0 1
71797: NOT
71798: IFFALSE 71802
// exit ;
71800: GO 71828
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
71802: LD_VAR 0 1
71806: PUSH
71807: LD_INT 1
71809: PPUSH
71810: LD_VAR 0 1
71814: PPUSH
71815: CALL_OW 12
71819: ARRAY
71820: PPUSH
71821: LD_INT 200
71823: PPUSH
71824: CALL_OW 234
// end ;
71828: PPOPN 1
71830: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
71831: LD_EXP 77
71835: PUSH
71836: LD_EXP 106
71840: AND
71841: IFFALSE 71920
71843: GO 71845
71845: DISABLE
71846: LD_INT 0
71848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
71849: LD_ADDR_VAR 0 1
71853: PUSH
71854: LD_INT 22
71856: PUSH
71857: LD_OWVAR 2
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: PUSH
71866: LD_INT 21
71868: PUSH
71869: LD_INT 2
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PPUSH
71880: CALL_OW 69
71884: ST_TO_ADDR
// if not tmp then
71885: LD_VAR 0 1
71889: NOT
71890: IFFALSE 71894
// exit ;
71892: GO 71920
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
71894: LD_VAR 0 1
71898: PUSH
71899: LD_INT 1
71901: PPUSH
71902: LD_VAR 0 1
71906: PPUSH
71907: CALL_OW 12
71911: ARRAY
71912: PPUSH
71913: LD_INT 60
71915: PPUSH
71916: CALL_OW 234
// end ;
71920: PPOPN 1
71922: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
71923: LD_EXP 77
71927: PUSH
71928: LD_EXP 107
71932: AND
71933: IFFALSE 72032
71935: GO 71937
71937: DISABLE
71938: LD_INT 0
71940: PPUSH
71941: PPUSH
// begin enable ;
71942: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
71943: LD_ADDR_VAR 0 1
71947: PUSH
71948: LD_INT 22
71950: PUSH
71951: LD_OWVAR 2
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: LD_INT 61
71962: PUSH
71963: EMPTY
71964: LIST
71965: PUSH
71966: LD_INT 33
71968: PUSH
71969: LD_INT 2
71971: PUSH
71972: EMPTY
71973: LIST
71974: LIST
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: LIST
71980: PPUSH
71981: CALL_OW 69
71985: ST_TO_ADDR
// if not tmp then
71986: LD_VAR 0 1
71990: NOT
71991: IFFALSE 71995
// exit ;
71993: GO 72032
// for i in tmp do
71995: LD_ADDR_VAR 0 2
71999: PUSH
72000: LD_VAR 0 1
72004: PUSH
72005: FOR_IN
72006: IFFALSE 72030
// if IsControledBy ( i ) then
72008: LD_VAR 0 2
72012: PPUSH
72013: CALL_OW 312
72017: IFFALSE 72028
// ComUnlink ( i ) ;
72019: LD_VAR 0 2
72023: PPUSH
72024: CALL_OW 136
72028: GO 72005
72030: POP
72031: POP
// end ;
72032: PPOPN 2
72034: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
72035: LD_EXP 77
72039: PUSH
72040: LD_EXP 108
72044: AND
72045: IFFALSE 72185
72047: GO 72049
72049: DISABLE
72050: LD_INT 0
72052: PPUSH
72053: PPUSH
// begin ToLua ( displayPowell(); ) ;
72054: LD_STRING displayPowell();
72056: PPUSH
72057: CALL_OW 559
// uc_side := 0 ;
72061: LD_ADDR_OWVAR 20
72065: PUSH
72066: LD_INT 0
72068: ST_TO_ADDR
// uc_nation := 2 ;
72069: LD_ADDR_OWVAR 21
72073: PUSH
72074: LD_INT 2
72076: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
72077: LD_ADDR_OWVAR 37
72081: PUSH
72082: LD_INT 14
72084: ST_TO_ADDR
// vc_engine := engine_siberite ;
72085: LD_ADDR_OWVAR 39
72089: PUSH
72090: LD_INT 3
72092: ST_TO_ADDR
// vc_control := control_apeman ;
72093: LD_ADDR_OWVAR 38
72097: PUSH
72098: LD_INT 5
72100: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
72101: LD_ADDR_OWVAR 40
72105: PUSH
72106: LD_INT 29
72108: ST_TO_ADDR
// un := CreateVehicle ;
72109: LD_ADDR_VAR 0 2
72113: PUSH
72114: CALL_OW 45
72118: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72119: LD_VAR 0 2
72123: PPUSH
72124: LD_INT 1
72126: PPUSH
72127: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72131: LD_INT 35
72133: PPUSH
72134: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72138: LD_VAR 0 2
72142: PPUSH
72143: LD_INT 22
72145: PUSH
72146: LD_OWVAR 2
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: PPUSH
72155: CALL_OW 69
72159: PPUSH
72160: LD_VAR 0 2
72164: PPUSH
72165: CALL_OW 74
72169: PPUSH
72170: CALL_OW 115
// until IsDead ( un ) ;
72174: LD_VAR 0 2
72178: PPUSH
72179: CALL_OW 301
72183: IFFALSE 72131
// end ;
72185: PPOPN 2
72187: END
// every 0 0$1 trigger StreamModeActive and sStu do
72188: LD_EXP 77
72192: PUSH
72193: LD_EXP 116
72197: AND
72198: IFFALSE 72214
72200: GO 72202
72202: DISABLE
// begin ToLua ( displayStucuk(); ) ;
72203: LD_STRING displayStucuk();
72205: PPUSH
72206: CALL_OW 559
// ResetFog ;
72210: CALL_OW 335
// end ;
72214: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
72215: LD_EXP 77
72219: PUSH
72220: LD_EXP 109
72224: AND
72225: IFFALSE 72366
72227: GO 72229
72229: DISABLE
72230: LD_INT 0
72232: PPUSH
72233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72234: LD_ADDR_VAR 0 2
72238: PUSH
72239: LD_INT 22
72241: PUSH
72242: LD_OWVAR 2
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: PUSH
72251: LD_INT 21
72253: PUSH
72254: LD_INT 1
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PPUSH
72265: CALL_OW 69
72269: ST_TO_ADDR
// if not tmp then
72270: LD_VAR 0 2
72274: NOT
72275: IFFALSE 72279
// exit ;
72277: GO 72366
// un := tmp [ rand ( 1 , tmp ) ] ;
72279: LD_ADDR_VAR 0 1
72283: PUSH
72284: LD_VAR 0 2
72288: PUSH
72289: LD_INT 1
72291: PPUSH
72292: LD_VAR 0 2
72296: PPUSH
72297: CALL_OW 12
72301: ARRAY
72302: ST_TO_ADDR
// SetSide ( un , 0 ) ;
72303: LD_VAR 0 1
72307: PPUSH
72308: LD_INT 0
72310: PPUSH
72311: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
72315: LD_VAR 0 1
72319: PPUSH
72320: LD_OWVAR 3
72324: PUSH
72325: LD_VAR 0 1
72329: DIFF
72330: PPUSH
72331: LD_VAR 0 1
72335: PPUSH
72336: CALL_OW 74
72340: PPUSH
72341: CALL_OW 115
// wait ( 0 0$20 ) ;
72345: LD_INT 700
72347: PPUSH
72348: CALL_OW 67
// SetSide ( un , your_side ) ;
72352: LD_VAR 0 1
72356: PPUSH
72357: LD_OWVAR 2
72361: PPUSH
72362: CALL_OW 235
// end ;
72366: PPOPN 2
72368: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
72369: LD_EXP 77
72373: PUSH
72374: LD_EXP 110
72378: AND
72379: IFFALSE 72485
72381: GO 72383
72383: DISABLE
72384: LD_INT 0
72386: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72387: LD_ADDR_VAR 0 1
72391: PUSH
72392: LD_INT 22
72394: PUSH
72395: LD_OWVAR 2
72399: PUSH
72400: EMPTY
72401: LIST
72402: LIST
72403: PUSH
72404: LD_INT 2
72406: PUSH
72407: LD_INT 30
72409: PUSH
72410: LD_INT 0
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: PUSH
72417: LD_INT 30
72419: PUSH
72420: LD_INT 1
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: LIST
72431: PUSH
72432: EMPTY
72433: LIST
72434: LIST
72435: PPUSH
72436: CALL_OW 69
72440: ST_TO_ADDR
// if not depot then
72441: LD_VAR 0 1
72445: NOT
72446: IFFALSE 72450
// exit ;
72448: GO 72485
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
72450: LD_VAR 0 1
72454: PUSH
72455: LD_INT 1
72457: ARRAY
72458: PPUSH
72459: CALL_OW 250
72463: PPUSH
72464: LD_VAR 0 1
72468: PUSH
72469: LD_INT 1
72471: ARRAY
72472: PPUSH
72473: CALL_OW 251
72477: PPUSH
72478: LD_INT 70
72480: PPUSH
72481: CALL_OW 495
// end ;
72485: PPOPN 1
72487: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
72488: LD_EXP 77
72492: PUSH
72493: LD_EXP 111
72497: AND
72498: IFFALSE 72709
72500: GO 72502
72502: DISABLE
72503: LD_INT 0
72505: PPUSH
72506: PPUSH
72507: PPUSH
72508: PPUSH
72509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72510: LD_ADDR_VAR 0 5
72514: PUSH
72515: LD_INT 22
72517: PUSH
72518: LD_OWVAR 2
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: PUSH
72527: LD_INT 21
72529: PUSH
72530: LD_INT 1
72532: PUSH
72533: EMPTY
72534: LIST
72535: LIST
72536: PUSH
72537: EMPTY
72538: LIST
72539: LIST
72540: PPUSH
72541: CALL_OW 69
72545: ST_TO_ADDR
// if not tmp then
72546: LD_VAR 0 5
72550: NOT
72551: IFFALSE 72555
// exit ;
72553: GO 72709
// for i in tmp do
72555: LD_ADDR_VAR 0 1
72559: PUSH
72560: LD_VAR 0 5
72564: PUSH
72565: FOR_IN
72566: IFFALSE 72707
// begin d := rand ( 0 , 5 ) ;
72568: LD_ADDR_VAR 0 4
72572: PUSH
72573: LD_INT 0
72575: PPUSH
72576: LD_INT 5
72578: PPUSH
72579: CALL_OW 12
72583: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
72584: LD_ADDR_VAR 0 2
72588: PUSH
72589: LD_VAR 0 1
72593: PPUSH
72594: CALL_OW 250
72598: PPUSH
72599: LD_VAR 0 4
72603: PPUSH
72604: LD_INT 3
72606: PPUSH
72607: LD_INT 12
72609: PPUSH
72610: CALL_OW 12
72614: PPUSH
72615: CALL_OW 272
72619: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
72620: LD_ADDR_VAR 0 3
72624: PUSH
72625: LD_VAR 0 1
72629: PPUSH
72630: CALL_OW 251
72634: PPUSH
72635: LD_VAR 0 4
72639: PPUSH
72640: LD_INT 3
72642: PPUSH
72643: LD_INT 12
72645: PPUSH
72646: CALL_OW 12
72650: PPUSH
72651: CALL_OW 273
72655: ST_TO_ADDR
// if ValidHex ( x , y ) then
72656: LD_VAR 0 2
72660: PPUSH
72661: LD_VAR 0 3
72665: PPUSH
72666: CALL_OW 488
72670: IFFALSE 72705
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
72672: LD_VAR 0 1
72676: PPUSH
72677: LD_VAR 0 2
72681: PPUSH
72682: LD_VAR 0 3
72686: PPUSH
72687: LD_INT 3
72689: PPUSH
72690: LD_INT 6
72692: PPUSH
72693: CALL_OW 12
72697: PPUSH
72698: LD_INT 1
72700: PPUSH
72701: CALL_OW 483
// end ;
72705: GO 72565
72707: POP
72708: POP
// end ;
72709: PPOPN 5
72711: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
72712: LD_EXP 77
72716: PUSH
72717: LD_EXP 112
72721: AND
72722: IFFALSE 72816
72724: GO 72726
72726: DISABLE
72727: LD_INT 0
72729: PPUSH
72730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
72731: LD_ADDR_VAR 0 2
72735: PUSH
72736: LD_INT 22
72738: PUSH
72739: LD_OWVAR 2
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 32
72750: PUSH
72751: LD_INT 1
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PUSH
72758: LD_INT 21
72760: PUSH
72761: LD_INT 2
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: LIST
72772: PPUSH
72773: CALL_OW 69
72777: ST_TO_ADDR
// if not tmp then
72778: LD_VAR 0 2
72782: NOT
72783: IFFALSE 72787
// exit ;
72785: GO 72816
// for i in tmp do
72787: LD_ADDR_VAR 0 1
72791: PUSH
72792: LD_VAR 0 2
72796: PUSH
72797: FOR_IN
72798: IFFALSE 72814
// SetFuel ( i , 0 ) ;
72800: LD_VAR 0 1
72804: PPUSH
72805: LD_INT 0
72807: PPUSH
72808: CALL_OW 240
72812: GO 72797
72814: POP
72815: POP
// end ;
72816: PPOPN 2
72818: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
72819: LD_EXP 77
72823: PUSH
72824: LD_EXP 113
72828: AND
72829: IFFALSE 72895
72831: GO 72833
72833: DISABLE
72834: LD_INT 0
72836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72837: LD_ADDR_VAR 0 1
72841: PUSH
72842: LD_INT 22
72844: PUSH
72845: LD_OWVAR 2
72849: PUSH
72850: EMPTY
72851: LIST
72852: LIST
72853: PUSH
72854: LD_INT 30
72856: PUSH
72857: LD_INT 29
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: PPUSH
72868: CALL_OW 69
72872: ST_TO_ADDR
// if not tmp then
72873: LD_VAR 0 1
72877: NOT
72878: IFFALSE 72882
// exit ;
72880: GO 72895
// DestroyUnit ( tmp [ 1 ] ) ;
72882: LD_VAR 0 1
72886: PUSH
72887: LD_INT 1
72889: ARRAY
72890: PPUSH
72891: CALL_OW 65
// end ;
72895: PPOPN 1
72897: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
72898: LD_EXP 77
72902: PUSH
72903: LD_EXP 115
72907: AND
72908: IFFALSE 73037
72910: GO 72912
72912: DISABLE
72913: LD_INT 0
72915: PPUSH
// begin uc_side := 0 ;
72916: LD_ADDR_OWVAR 20
72920: PUSH
72921: LD_INT 0
72923: ST_TO_ADDR
// uc_nation := nation_arabian ;
72924: LD_ADDR_OWVAR 21
72928: PUSH
72929: LD_INT 2
72931: ST_TO_ADDR
// hc_gallery :=  ;
72932: LD_ADDR_OWVAR 33
72936: PUSH
72937: LD_STRING 
72939: ST_TO_ADDR
// hc_name :=  ;
72940: LD_ADDR_OWVAR 26
72944: PUSH
72945: LD_STRING 
72947: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
72948: LD_INT 1
72950: PPUSH
72951: LD_INT 11
72953: PPUSH
72954: LD_INT 10
72956: PPUSH
72957: CALL_OW 380
// un := CreateHuman ;
72961: LD_ADDR_VAR 0 1
72965: PUSH
72966: CALL_OW 44
72970: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72971: LD_VAR 0 1
72975: PPUSH
72976: LD_INT 1
72978: PPUSH
72979: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72983: LD_INT 35
72985: PPUSH
72986: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72990: LD_VAR 0 1
72994: PPUSH
72995: LD_INT 22
72997: PUSH
72998: LD_OWVAR 2
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PPUSH
73007: CALL_OW 69
73011: PPUSH
73012: LD_VAR 0 1
73016: PPUSH
73017: CALL_OW 74
73021: PPUSH
73022: CALL_OW 115
// until IsDead ( un ) ;
73026: LD_VAR 0 1
73030: PPUSH
73031: CALL_OW 301
73035: IFFALSE 72983
// end ;
73037: PPOPN 1
73039: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
73040: LD_EXP 77
73044: PUSH
73045: LD_EXP 117
73049: AND
73050: IFFALSE 73062
73052: GO 73054
73054: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
73055: LD_STRING earthquake(getX(game), 0, 32)
73057: PPUSH
73058: CALL_OW 559
73062: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
73063: LD_EXP 77
73067: PUSH
73068: LD_EXP 118
73072: AND
73073: IFFALSE 73164
73075: GO 73077
73077: DISABLE
73078: LD_INT 0
73080: PPUSH
// begin enable ;
73081: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
73082: LD_ADDR_VAR 0 1
73086: PUSH
73087: LD_INT 22
73089: PUSH
73090: LD_OWVAR 2
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: PUSH
73099: LD_INT 21
73101: PUSH
73102: LD_INT 2
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: PUSH
73109: LD_INT 33
73111: PUSH
73112: LD_INT 3
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: LIST
73123: PPUSH
73124: CALL_OW 69
73128: ST_TO_ADDR
// if not tmp then
73129: LD_VAR 0 1
73133: NOT
73134: IFFALSE 73138
// exit ;
73136: GO 73164
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
73138: LD_VAR 0 1
73142: PUSH
73143: LD_INT 1
73145: PPUSH
73146: LD_VAR 0 1
73150: PPUSH
73151: CALL_OW 12
73155: ARRAY
73156: PPUSH
73157: LD_INT 1
73159: PPUSH
73160: CALL_OW 234
// end ;
73164: PPOPN 1
73166: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
73167: LD_EXP 77
73171: PUSH
73172: LD_EXP 119
73176: AND
73177: IFFALSE 73318
73179: GO 73181
73181: DISABLE
73182: LD_INT 0
73184: PPUSH
73185: PPUSH
73186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73187: LD_ADDR_VAR 0 3
73191: PUSH
73192: LD_INT 22
73194: PUSH
73195: LD_OWVAR 2
73199: PUSH
73200: EMPTY
73201: LIST
73202: LIST
73203: PUSH
73204: LD_INT 25
73206: PUSH
73207: LD_INT 1
73209: PUSH
73210: EMPTY
73211: LIST
73212: LIST
73213: PUSH
73214: EMPTY
73215: LIST
73216: LIST
73217: PPUSH
73218: CALL_OW 69
73222: ST_TO_ADDR
// if not tmp then
73223: LD_VAR 0 3
73227: NOT
73228: IFFALSE 73232
// exit ;
73230: GO 73318
// un := tmp [ rand ( 1 , tmp ) ] ;
73232: LD_ADDR_VAR 0 2
73236: PUSH
73237: LD_VAR 0 3
73241: PUSH
73242: LD_INT 1
73244: PPUSH
73245: LD_VAR 0 3
73249: PPUSH
73250: CALL_OW 12
73254: ARRAY
73255: ST_TO_ADDR
// if Crawls ( un ) then
73256: LD_VAR 0 2
73260: PPUSH
73261: CALL_OW 318
73265: IFFALSE 73276
// ComWalk ( un ) ;
73267: LD_VAR 0 2
73271: PPUSH
73272: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
73276: LD_VAR 0 2
73280: PPUSH
73281: LD_INT 9
73283: PPUSH
73284: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
73288: LD_INT 28
73290: PPUSH
73291: LD_OWVAR 2
73295: PPUSH
73296: LD_INT 2
73298: PPUSH
73299: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
73303: LD_INT 29
73305: PPUSH
73306: LD_OWVAR 2
73310: PPUSH
73311: LD_INT 2
73313: PPUSH
73314: CALL_OW 322
// end ;
73318: PPOPN 3
73320: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
73321: LD_EXP 77
73325: PUSH
73326: LD_EXP 120
73330: AND
73331: IFFALSE 73442
73333: GO 73335
73335: DISABLE
73336: LD_INT 0
73338: PPUSH
73339: PPUSH
73340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73341: LD_ADDR_VAR 0 3
73345: PUSH
73346: LD_INT 22
73348: PUSH
73349: LD_OWVAR 2
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: PUSH
73358: LD_INT 25
73360: PUSH
73361: LD_INT 1
73363: PUSH
73364: EMPTY
73365: LIST
73366: LIST
73367: PUSH
73368: EMPTY
73369: LIST
73370: LIST
73371: PPUSH
73372: CALL_OW 69
73376: ST_TO_ADDR
// if not tmp then
73377: LD_VAR 0 3
73381: NOT
73382: IFFALSE 73386
// exit ;
73384: GO 73442
// un := tmp [ rand ( 1 , tmp ) ] ;
73386: LD_ADDR_VAR 0 2
73390: PUSH
73391: LD_VAR 0 3
73395: PUSH
73396: LD_INT 1
73398: PPUSH
73399: LD_VAR 0 3
73403: PPUSH
73404: CALL_OW 12
73408: ARRAY
73409: ST_TO_ADDR
// if Crawls ( un ) then
73410: LD_VAR 0 2
73414: PPUSH
73415: CALL_OW 318
73419: IFFALSE 73430
// ComWalk ( un ) ;
73421: LD_VAR 0 2
73425: PPUSH
73426: CALL_OW 138
// SetClass ( un , class_mortar ) ;
73430: LD_VAR 0 2
73434: PPUSH
73435: LD_INT 8
73437: PPUSH
73438: CALL_OW 336
// end ;
73442: PPOPN 3
73444: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
73445: LD_EXP 77
73449: PUSH
73450: LD_EXP 121
73454: AND
73455: IFFALSE 73599
73457: GO 73459
73459: DISABLE
73460: LD_INT 0
73462: PPUSH
73463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
73464: LD_ADDR_VAR 0 2
73468: PUSH
73469: LD_INT 22
73471: PUSH
73472: LD_OWVAR 2
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: LD_INT 21
73483: PUSH
73484: LD_INT 2
73486: PUSH
73487: EMPTY
73488: LIST
73489: LIST
73490: PUSH
73491: LD_INT 2
73493: PUSH
73494: LD_INT 34
73496: PUSH
73497: LD_INT 12
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: PUSH
73504: LD_INT 34
73506: PUSH
73507: LD_INT 51
73509: PUSH
73510: EMPTY
73511: LIST
73512: LIST
73513: PUSH
73514: LD_INT 34
73516: PUSH
73517: LD_INT 32
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PUSH
73524: EMPTY
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: PUSH
73530: EMPTY
73531: LIST
73532: LIST
73533: LIST
73534: PPUSH
73535: CALL_OW 69
73539: ST_TO_ADDR
// if not tmp then
73540: LD_VAR 0 2
73544: NOT
73545: IFFALSE 73549
// exit ;
73547: GO 73599
// for i in tmp do
73549: LD_ADDR_VAR 0 1
73553: PUSH
73554: LD_VAR 0 2
73558: PUSH
73559: FOR_IN
73560: IFFALSE 73597
// if GetCargo ( i , mat_artifact ) = 0 then
73562: LD_VAR 0 1
73566: PPUSH
73567: LD_INT 4
73569: PPUSH
73570: CALL_OW 289
73574: PUSH
73575: LD_INT 0
73577: EQUAL
73578: IFFALSE 73595
// SetCargo ( i , mat_siberit , 100 ) ;
73580: LD_VAR 0 1
73584: PPUSH
73585: LD_INT 3
73587: PPUSH
73588: LD_INT 100
73590: PPUSH
73591: CALL_OW 290
73595: GO 73559
73597: POP
73598: POP
// end ;
73599: PPOPN 2
73601: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
73602: LD_EXP 77
73606: PUSH
73607: LD_EXP 122
73611: AND
73612: IFFALSE 73795
73614: GO 73616
73616: DISABLE
73617: LD_INT 0
73619: PPUSH
73620: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73621: LD_ADDR_VAR 0 2
73625: PUSH
73626: LD_INT 22
73628: PUSH
73629: LD_OWVAR 2
73633: PUSH
73634: EMPTY
73635: LIST
73636: LIST
73637: PPUSH
73638: CALL_OW 69
73642: ST_TO_ADDR
// if not tmp then
73643: LD_VAR 0 2
73647: NOT
73648: IFFALSE 73652
// exit ;
73650: GO 73795
// for i := 1 to 2 do
73652: LD_ADDR_VAR 0 1
73656: PUSH
73657: DOUBLE
73658: LD_INT 1
73660: DEC
73661: ST_TO_ADDR
73662: LD_INT 2
73664: PUSH
73665: FOR_TO
73666: IFFALSE 73793
// begin uc_side := your_side ;
73668: LD_ADDR_OWVAR 20
73672: PUSH
73673: LD_OWVAR 2
73677: ST_TO_ADDR
// uc_nation := nation_american ;
73678: LD_ADDR_OWVAR 21
73682: PUSH
73683: LD_INT 1
73685: ST_TO_ADDR
// vc_chassis := us_morphling ;
73686: LD_ADDR_OWVAR 37
73690: PUSH
73691: LD_INT 5
73693: ST_TO_ADDR
// vc_engine := engine_siberite ;
73694: LD_ADDR_OWVAR 39
73698: PUSH
73699: LD_INT 3
73701: ST_TO_ADDR
// vc_control := control_computer ;
73702: LD_ADDR_OWVAR 38
73706: PUSH
73707: LD_INT 3
73709: ST_TO_ADDR
// vc_weapon := us_double_laser ;
73710: LD_ADDR_OWVAR 40
73714: PUSH
73715: LD_INT 10
73717: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
73718: LD_VAR 0 2
73722: PUSH
73723: LD_INT 1
73725: ARRAY
73726: PPUSH
73727: CALL_OW 310
73731: NOT
73732: IFFALSE 73779
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
73734: CALL_OW 45
73738: PPUSH
73739: LD_VAR 0 2
73743: PUSH
73744: LD_INT 1
73746: ARRAY
73747: PPUSH
73748: CALL_OW 250
73752: PPUSH
73753: LD_VAR 0 2
73757: PUSH
73758: LD_INT 1
73760: ARRAY
73761: PPUSH
73762: CALL_OW 251
73766: PPUSH
73767: LD_INT 12
73769: PPUSH
73770: LD_INT 1
73772: PPUSH
73773: CALL_OW 50
73777: GO 73791
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
73779: CALL_OW 45
73783: PPUSH
73784: LD_INT 1
73786: PPUSH
73787: CALL_OW 51
// end ;
73791: GO 73665
73793: POP
73794: POP
// end ;
73795: PPOPN 2
73797: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
73798: LD_EXP 77
73802: PUSH
73803: LD_EXP 123
73807: AND
73808: IFFALSE 74030
73810: GO 73812
73812: DISABLE
73813: LD_INT 0
73815: PPUSH
73816: PPUSH
73817: PPUSH
73818: PPUSH
73819: PPUSH
73820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73821: LD_ADDR_VAR 0 6
73825: PUSH
73826: LD_INT 22
73828: PUSH
73829: LD_OWVAR 2
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: PUSH
73838: LD_INT 21
73840: PUSH
73841: LD_INT 1
73843: PUSH
73844: EMPTY
73845: LIST
73846: LIST
73847: PUSH
73848: LD_INT 3
73850: PUSH
73851: LD_INT 23
73853: PUSH
73854: LD_INT 0
73856: PUSH
73857: EMPTY
73858: LIST
73859: LIST
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: PUSH
73865: EMPTY
73866: LIST
73867: LIST
73868: LIST
73869: PPUSH
73870: CALL_OW 69
73874: ST_TO_ADDR
// if not tmp then
73875: LD_VAR 0 6
73879: NOT
73880: IFFALSE 73884
// exit ;
73882: GO 74030
// s1 := rand ( 1 , 4 ) ;
73884: LD_ADDR_VAR 0 2
73888: PUSH
73889: LD_INT 1
73891: PPUSH
73892: LD_INT 4
73894: PPUSH
73895: CALL_OW 12
73899: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
73900: LD_ADDR_VAR 0 4
73904: PUSH
73905: LD_VAR 0 6
73909: PUSH
73910: LD_INT 1
73912: ARRAY
73913: PPUSH
73914: LD_VAR 0 2
73918: PPUSH
73919: CALL_OW 259
73923: ST_TO_ADDR
// if s1 = 1 then
73924: LD_VAR 0 2
73928: PUSH
73929: LD_INT 1
73931: EQUAL
73932: IFFALSE 73952
// s2 := rand ( 2 , 4 ) else
73934: LD_ADDR_VAR 0 3
73938: PUSH
73939: LD_INT 2
73941: PPUSH
73942: LD_INT 4
73944: PPUSH
73945: CALL_OW 12
73949: ST_TO_ADDR
73950: GO 73960
// s2 := 1 ;
73952: LD_ADDR_VAR 0 3
73956: PUSH
73957: LD_INT 1
73959: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
73960: LD_ADDR_VAR 0 5
73964: PUSH
73965: LD_VAR 0 6
73969: PUSH
73970: LD_INT 1
73972: ARRAY
73973: PPUSH
73974: LD_VAR 0 3
73978: PPUSH
73979: CALL_OW 259
73983: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
73984: LD_VAR 0 6
73988: PUSH
73989: LD_INT 1
73991: ARRAY
73992: PPUSH
73993: LD_VAR 0 2
73997: PPUSH
73998: LD_VAR 0 5
74002: PPUSH
74003: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
74007: LD_VAR 0 6
74011: PUSH
74012: LD_INT 1
74014: ARRAY
74015: PPUSH
74016: LD_VAR 0 3
74020: PPUSH
74021: LD_VAR 0 4
74025: PPUSH
74026: CALL_OW 237
// end ;
74030: PPOPN 6
74032: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
74033: LD_EXP 77
74037: PUSH
74038: LD_EXP 124
74042: AND
74043: IFFALSE 74122
74045: GO 74047
74047: DISABLE
74048: LD_INT 0
74050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
74051: LD_ADDR_VAR 0 1
74055: PUSH
74056: LD_INT 22
74058: PUSH
74059: LD_OWVAR 2
74063: PUSH
74064: EMPTY
74065: LIST
74066: LIST
74067: PUSH
74068: LD_INT 30
74070: PUSH
74071: LD_INT 3
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: PUSH
74078: EMPTY
74079: LIST
74080: LIST
74081: PPUSH
74082: CALL_OW 69
74086: ST_TO_ADDR
// if not tmp then
74087: LD_VAR 0 1
74091: NOT
74092: IFFALSE 74096
// exit ;
74094: GO 74122
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
74096: LD_VAR 0 1
74100: PUSH
74101: LD_INT 1
74103: PPUSH
74104: LD_VAR 0 1
74108: PPUSH
74109: CALL_OW 12
74113: ARRAY
74114: PPUSH
74115: LD_INT 1
74117: PPUSH
74118: CALL_OW 234
// end ;
74122: PPOPN 1
74124: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
74125: LD_EXP 77
74129: PUSH
74130: LD_EXP 125
74134: AND
74135: IFFALSE 74247
74137: GO 74139
74139: DISABLE
74140: LD_INT 0
74142: PPUSH
74143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
74144: LD_ADDR_VAR 0 2
74148: PUSH
74149: LD_INT 22
74151: PUSH
74152: LD_OWVAR 2
74156: PUSH
74157: EMPTY
74158: LIST
74159: LIST
74160: PUSH
74161: LD_INT 2
74163: PUSH
74164: LD_INT 30
74166: PUSH
74167: LD_INT 27
74169: PUSH
74170: EMPTY
74171: LIST
74172: LIST
74173: PUSH
74174: LD_INT 30
74176: PUSH
74177: LD_INT 26
74179: PUSH
74180: EMPTY
74181: LIST
74182: LIST
74183: PUSH
74184: LD_INT 30
74186: PUSH
74187: LD_INT 28
74189: PUSH
74190: EMPTY
74191: LIST
74192: LIST
74193: PUSH
74194: EMPTY
74195: LIST
74196: LIST
74197: LIST
74198: LIST
74199: PUSH
74200: EMPTY
74201: LIST
74202: LIST
74203: PPUSH
74204: CALL_OW 69
74208: ST_TO_ADDR
// if not tmp then
74209: LD_VAR 0 2
74213: NOT
74214: IFFALSE 74218
// exit ;
74216: GO 74247
// for i in tmp do
74218: LD_ADDR_VAR 0 1
74222: PUSH
74223: LD_VAR 0 2
74227: PUSH
74228: FOR_IN
74229: IFFALSE 74245
// SetLives ( i , 1 ) ;
74231: LD_VAR 0 1
74235: PPUSH
74236: LD_INT 1
74238: PPUSH
74239: CALL_OW 234
74243: GO 74228
74245: POP
74246: POP
// end ;
74247: PPOPN 2
74249: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
74250: LD_EXP 77
74254: PUSH
74255: LD_EXP 126
74259: AND
74260: IFFALSE 74534
74262: GO 74264
74264: DISABLE
74265: LD_INT 0
74267: PPUSH
74268: PPUSH
74269: PPUSH
// begin i := rand ( 1 , 7 ) ;
74270: LD_ADDR_VAR 0 1
74274: PUSH
74275: LD_INT 1
74277: PPUSH
74278: LD_INT 7
74280: PPUSH
74281: CALL_OW 12
74285: ST_TO_ADDR
// case i of 1 :
74286: LD_VAR 0 1
74290: PUSH
74291: LD_INT 1
74293: DOUBLE
74294: EQUAL
74295: IFTRUE 74299
74297: GO 74309
74299: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
74300: LD_STRING earthquake(getX(game), 0, 32)
74302: PPUSH
74303: CALL_OW 559
74307: GO 74534
74309: LD_INT 2
74311: DOUBLE
74312: EQUAL
74313: IFTRUE 74317
74315: GO 74331
74317: POP
// begin ToLua ( displayStucuk(); ) ;
74318: LD_STRING displayStucuk();
74320: PPUSH
74321: CALL_OW 559
// ResetFog ;
74325: CALL_OW 335
// end ; 3 :
74329: GO 74534
74331: LD_INT 3
74333: DOUBLE
74334: EQUAL
74335: IFTRUE 74339
74337: GO 74443
74339: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74340: LD_ADDR_VAR 0 2
74344: PUSH
74345: LD_INT 22
74347: PUSH
74348: LD_OWVAR 2
74352: PUSH
74353: EMPTY
74354: LIST
74355: LIST
74356: PUSH
74357: LD_INT 25
74359: PUSH
74360: LD_INT 1
74362: PUSH
74363: EMPTY
74364: LIST
74365: LIST
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: PPUSH
74371: CALL_OW 69
74375: ST_TO_ADDR
// if not tmp then
74376: LD_VAR 0 2
74380: NOT
74381: IFFALSE 74385
// exit ;
74383: GO 74534
// un := tmp [ rand ( 1 , tmp ) ] ;
74385: LD_ADDR_VAR 0 3
74389: PUSH
74390: LD_VAR 0 2
74394: PUSH
74395: LD_INT 1
74397: PPUSH
74398: LD_VAR 0 2
74402: PPUSH
74403: CALL_OW 12
74407: ARRAY
74408: ST_TO_ADDR
// if Crawls ( un ) then
74409: LD_VAR 0 3
74413: PPUSH
74414: CALL_OW 318
74418: IFFALSE 74429
// ComWalk ( un ) ;
74420: LD_VAR 0 3
74424: PPUSH
74425: CALL_OW 138
// SetClass ( un , class_mortar ) ;
74429: LD_VAR 0 3
74433: PPUSH
74434: LD_INT 8
74436: PPUSH
74437: CALL_OW 336
// end ; 4 :
74441: GO 74534
74443: LD_INT 4
74445: DOUBLE
74446: EQUAL
74447: IFTRUE 74451
74449: GO 74512
74451: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
74452: LD_ADDR_VAR 0 2
74456: PUSH
74457: LD_INT 22
74459: PUSH
74460: LD_OWVAR 2
74464: PUSH
74465: EMPTY
74466: LIST
74467: LIST
74468: PUSH
74469: LD_INT 30
74471: PUSH
74472: LD_INT 29
74474: PUSH
74475: EMPTY
74476: LIST
74477: LIST
74478: PUSH
74479: EMPTY
74480: LIST
74481: LIST
74482: PPUSH
74483: CALL_OW 69
74487: ST_TO_ADDR
// if not tmp then
74488: LD_VAR 0 2
74492: NOT
74493: IFFALSE 74497
// exit ;
74495: GO 74534
// DestroyUnit ( tmp [ 1 ] ) ;
74497: LD_VAR 0 2
74501: PUSH
74502: LD_INT 1
74504: ARRAY
74505: PPUSH
74506: CALL_OW 65
// end ; 5 .. 7 :
74510: GO 74534
74512: LD_INT 5
74514: DOUBLE
74515: GREATEREQUAL
74516: IFFALSE 74524
74518: LD_INT 7
74520: DOUBLE
74521: LESSEQUAL
74522: IFTRUE 74526
74524: GO 74533
74526: POP
// StreamSibBomb ; end ;
74527: CALL 70784 0 0
74531: GO 74534
74533: POP
// end ;
74534: PPOPN 3
74536: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
74537: LD_EXP 77
74541: PUSH
74542: LD_EXP 127
74546: AND
74547: IFFALSE 74703
74549: GO 74551
74551: DISABLE
74552: LD_INT 0
74554: PPUSH
74555: PPUSH
74556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
74557: LD_ADDR_VAR 0 2
74561: PUSH
74562: LD_INT 81
74564: PUSH
74565: LD_OWVAR 2
74569: PUSH
74570: EMPTY
74571: LIST
74572: LIST
74573: PUSH
74574: LD_INT 2
74576: PUSH
74577: LD_INT 21
74579: PUSH
74580: LD_INT 1
74582: PUSH
74583: EMPTY
74584: LIST
74585: LIST
74586: PUSH
74587: LD_INT 21
74589: PUSH
74590: LD_INT 2
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: PUSH
74597: EMPTY
74598: LIST
74599: LIST
74600: LIST
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: PPUSH
74606: CALL_OW 69
74610: ST_TO_ADDR
// if not tmp then
74611: LD_VAR 0 2
74615: NOT
74616: IFFALSE 74620
// exit ;
74618: GO 74703
// p := 0 ;
74620: LD_ADDR_VAR 0 3
74624: PUSH
74625: LD_INT 0
74627: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74628: LD_INT 35
74630: PPUSH
74631: CALL_OW 67
// p := p + 1 ;
74635: LD_ADDR_VAR 0 3
74639: PUSH
74640: LD_VAR 0 3
74644: PUSH
74645: LD_INT 1
74647: PLUS
74648: ST_TO_ADDR
// for i in tmp do
74649: LD_ADDR_VAR 0 1
74653: PUSH
74654: LD_VAR 0 2
74658: PUSH
74659: FOR_IN
74660: IFFALSE 74691
// if GetLives ( i ) < 1000 then
74662: LD_VAR 0 1
74666: PPUSH
74667: CALL_OW 256
74671: PUSH
74672: LD_INT 1000
74674: LESS
74675: IFFALSE 74689
// SetLives ( i , 1000 ) ;
74677: LD_VAR 0 1
74681: PPUSH
74682: LD_INT 1000
74684: PPUSH
74685: CALL_OW 234
74689: GO 74659
74691: POP
74692: POP
// until p > 20 ;
74693: LD_VAR 0 3
74697: PUSH
74698: LD_INT 20
74700: GREATER
74701: IFFALSE 74628
// end ;
74703: PPOPN 3
74705: END
// every 0 0$1 trigger StreamModeActive and sTime do
74706: LD_EXP 77
74710: PUSH
74711: LD_EXP 128
74715: AND
74716: IFFALSE 74751
74718: GO 74720
74720: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
74721: LD_INT 28
74723: PPUSH
74724: LD_OWVAR 2
74728: PPUSH
74729: LD_INT 2
74731: PPUSH
74732: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
74736: LD_INT 30
74738: PPUSH
74739: LD_OWVAR 2
74743: PPUSH
74744: LD_INT 2
74746: PPUSH
74747: CALL_OW 322
// end ;
74751: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
74752: LD_EXP 77
74756: PUSH
74757: LD_EXP 129
74761: AND
74762: IFFALSE 74883
74764: GO 74766
74766: DISABLE
74767: LD_INT 0
74769: PPUSH
74770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74771: LD_ADDR_VAR 0 2
74775: PUSH
74776: LD_INT 22
74778: PUSH
74779: LD_OWVAR 2
74783: PUSH
74784: EMPTY
74785: LIST
74786: LIST
74787: PUSH
74788: LD_INT 21
74790: PUSH
74791: LD_INT 1
74793: PUSH
74794: EMPTY
74795: LIST
74796: LIST
74797: PUSH
74798: LD_INT 3
74800: PUSH
74801: LD_INT 23
74803: PUSH
74804: LD_INT 0
74806: PUSH
74807: EMPTY
74808: LIST
74809: LIST
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: PUSH
74815: EMPTY
74816: LIST
74817: LIST
74818: LIST
74819: PPUSH
74820: CALL_OW 69
74824: ST_TO_ADDR
// if not tmp then
74825: LD_VAR 0 2
74829: NOT
74830: IFFALSE 74834
// exit ;
74832: GO 74883
// for i in tmp do
74834: LD_ADDR_VAR 0 1
74838: PUSH
74839: LD_VAR 0 2
74843: PUSH
74844: FOR_IN
74845: IFFALSE 74881
// begin if Crawls ( i ) then
74847: LD_VAR 0 1
74851: PPUSH
74852: CALL_OW 318
74856: IFFALSE 74867
// ComWalk ( i ) ;
74858: LD_VAR 0 1
74862: PPUSH
74863: CALL_OW 138
// SetClass ( i , 2 ) ;
74867: LD_VAR 0 1
74871: PPUSH
74872: LD_INT 2
74874: PPUSH
74875: CALL_OW 336
// end ;
74879: GO 74844
74881: POP
74882: POP
// end ;
74883: PPOPN 2
74885: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
74886: LD_EXP 77
74890: PUSH
74891: LD_EXP 130
74895: AND
74896: IFFALSE 75177
74898: GO 74900
74900: DISABLE
74901: LD_INT 0
74903: PPUSH
74904: PPUSH
74905: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
74906: LD_OWVAR 2
74910: PPUSH
74911: LD_INT 9
74913: PPUSH
74914: LD_INT 1
74916: PPUSH
74917: LD_INT 1
74919: PPUSH
74920: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
74924: LD_INT 9
74926: PPUSH
74927: LD_OWVAR 2
74931: PPUSH
74932: CALL_OW 343
// uc_side := 9 ;
74936: LD_ADDR_OWVAR 20
74940: PUSH
74941: LD_INT 9
74943: ST_TO_ADDR
// uc_nation := 2 ;
74944: LD_ADDR_OWVAR 21
74948: PUSH
74949: LD_INT 2
74951: ST_TO_ADDR
// hc_name := Dark Warrior ;
74952: LD_ADDR_OWVAR 26
74956: PUSH
74957: LD_STRING Dark Warrior
74959: ST_TO_ADDR
// hc_gallery :=  ;
74960: LD_ADDR_OWVAR 33
74964: PUSH
74965: LD_STRING 
74967: ST_TO_ADDR
// hc_noskilllimit := true ;
74968: LD_ADDR_OWVAR 76
74972: PUSH
74973: LD_INT 1
74975: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
74976: LD_ADDR_OWVAR 31
74980: PUSH
74981: LD_INT 30
74983: PUSH
74984: LD_INT 30
74986: PUSH
74987: LD_INT 30
74989: PUSH
74990: LD_INT 30
74992: PUSH
74993: EMPTY
74994: LIST
74995: LIST
74996: LIST
74997: LIST
74998: ST_TO_ADDR
// un := CreateHuman ;
74999: LD_ADDR_VAR 0 3
75003: PUSH
75004: CALL_OW 44
75008: ST_TO_ADDR
// hc_noskilllimit := false ;
75009: LD_ADDR_OWVAR 76
75013: PUSH
75014: LD_INT 0
75016: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75017: LD_VAR 0 3
75021: PPUSH
75022: LD_INT 1
75024: PPUSH
75025: CALL_OW 51
// p := 0 ;
75029: LD_ADDR_VAR 0 2
75033: PUSH
75034: LD_INT 0
75036: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75037: LD_INT 35
75039: PPUSH
75040: CALL_OW 67
// p := p + 1 ;
75044: LD_ADDR_VAR 0 2
75048: PUSH
75049: LD_VAR 0 2
75053: PUSH
75054: LD_INT 1
75056: PLUS
75057: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
75058: LD_VAR 0 3
75062: PPUSH
75063: CALL_OW 256
75067: PUSH
75068: LD_INT 1000
75070: LESS
75071: IFFALSE 75085
// SetLives ( un , 1000 ) ;
75073: LD_VAR 0 3
75077: PPUSH
75078: LD_INT 1000
75080: PPUSH
75081: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
75085: LD_VAR 0 3
75089: PPUSH
75090: LD_INT 81
75092: PUSH
75093: LD_OWVAR 2
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: PUSH
75102: LD_INT 91
75104: PUSH
75105: LD_VAR 0 3
75109: PUSH
75110: LD_INT 30
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: LIST
75117: PUSH
75118: EMPTY
75119: LIST
75120: LIST
75121: PPUSH
75122: CALL_OW 69
75126: PPUSH
75127: LD_VAR 0 3
75131: PPUSH
75132: CALL_OW 74
75136: PPUSH
75137: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
75141: LD_VAR 0 2
75145: PUSH
75146: LD_INT 60
75148: GREATER
75149: PUSH
75150: LD_VAR 0 3
75154: PPUSH
75155: CALL_OW 301
75159: OR
75160: IFFALSE 75037
// if un then
75162: LD_VAR 0 3
75166: IFFALSE 75177
// RemoveUnit ( un ) ;
75168: LD_VAR 0 3
75172: PPUSH
75173: CALL_OW 64
// end ;
75177: PPOPN 3
75179: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
75180: LD_INT 0
75182: PPUSH
// case cmd of 301 :
75183: LD_VAR 0 1
75187: PUSH
75188: LD_INT 301
75190: DOUBLE
75191: EQUAL
75192: IFTRUE 75196
75194: GO 75228
75196: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
75197: LD_VAR 0 6
75201: PPUSH
75202: LD_VAR 0 7
75206: PPUSH
75207: LD_VAR 0 8
75211: PPUSH
75212: LD_VAR 0 4
75216: PPUSH
75217: LD_VAR 0 5
75221: PPUSH
75222: CALL 76429 0 5
75226: GO 75349
75228: LD_INT 302
75230: DOUBLE
75231: EQUAL
75232: IFTRUE 75236
75234: GO 75273
75236: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
75237: LD_VAR 0 6
75241: PPUSH
75242: LD_VAR 0 7
75246: PPUSH
75247: LD_VAR 0 8
75251: PPUSH
75252: LD_VAR 0 9
75256: PPUSH
75257: LD_VAR 0 4
75261: PPUSH
75262: LD_VAR 0 5
75266: PPUSH
75267: CALL 76520 0 6
75271: GO 75349
75273: LD_INT 303
75275: DOUBLE
75276: EQUAL
75277: IFTRUE 75281
75279: GO 75318
75281: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
75282: LD_VAR 0 6
75286: PPUSH
75287: LD_VAR 0 7
75291: PPUSH
75292: LD_VAR 0 8
75296: PPUSH
75297: LD_VAR 0 9
75301: PPUSH
75302: LD_VAR 0 4
75306: PPUSH
75307: LD_VAR 0 5
75311: PPUSH
75312: CALL 75354 0 6
75316: GO 75349
75318: LD_INT 304
75320: DOUBLE
75321: EQUAL
75322: IFTRUE 75326
75324: GO 75348
75326: POP
// hHackTeleport ( unit , x , y ) ; end ;
75327: LD_VAR 0 2
75331: PPUSH
75332: LD_VAR 0 4
75336: PPUSH
75337: LD_VAR 0 5
75341: PPUSH
75342: CALL 77113 0 3
75346: GO 75349
75348: POP
// end ;
75349: LD_VAR 0 12
75353: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
75354: LD_INT 0
75356: PPUSH
75357: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
75358: LD_VAR 0 1
75362: PUSH
75363: LD_INT 1
75365: LESS
75366: PUSH
75367: LD_VAR 0 1
75371: PUSH
75372: LD_INT 3
75374: GREATER
75375: OR
75376: PUSH
75377: LD_VAR 0 5
75381: PPUSH
75382: LD_VAR 0 6
75386: PPUSH
75387: CALL_OW 428
75391: OR
75392: IFFALSE 75396
// exit ;
75394: GO 76116
// uc_side := your_side ;
75396: LD_ADDR_OWVAR 20
75400: PUSH
75401: LD_OWVAR 2
75405: ST_TO_ADDR
// uc_nation := nation ;
75406: LD_ADDR_OWVAR 21
75410: PUSH
75411: LD_VAR 0 1
75415: ST_TO_ADDR
// bc_level = 1 ;
75416: LD_ADDR_OWVAR 43
75420: PUSH
75421: LD_INT 1
75423: ST_TO_ADDR
// case btype of 1 :
75424: LD_VAR 0 2
75428: PUSH
75429: LD_INT 1
75431: DOUBLE
75432: EQUAL
75433: IFTRUE 75437
75435: GO 75448
75437: POP
// bc_type := b_depot ; 2 :
75438: LD_ADDR_OWVAR 42
75442: PUSH
75443: LD_INT 0
75445: ST_TO_ADDR
75446: GO 76060
75448: LD_INT 2
75450: DOUBLE
75451: EQUAL
75452: IFTRUE 75456
75454: GO 75467
75456: POP
// bc_type := b_warehouse ; 3 :
75457: LD_ADDR_OWVAR 42
75461: PUSH
75462: LD_INT 1
75464: ST_TO_ADDR
75465: GO 76060
75467: LD_INT 3
75469: DOUBLE
75470: EQUAL
75471: IFTRUE 75475
75473: GO 75486
75475: POP
// bc_type := b_lab ; 4 .. 9 :
75476: LD_ADDR_OWVAR 42
75480: PUSH
75481: LD_INT 6
75483: ST_TO_ADDR
75484: GO 76060
75486: LD_INT 4
75488: DOUBLE
75489: GREATEREQUAL
75490: IFFALSE 75498
75492: LD_INT 9
75494: DOUBLE
75495: LESSEQUAL
75496: IFTRUE 75500
75498: GO 75552
75500: POP
// begin bc_type := b_lab_half ;
75501: LD_ADDR_OWVAR 42
75505: PUSH
75506: LD_INT 7
75508: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
75509: LD_ADDR_OWVAR 44
75513: PUSH
75514: LD_INT 10
75516: PUSH
75517: LD_INT 11
75519: PUSH
75520: LD_INT 12
75522: PUSH
75523: LD_INT 15
75525: PUSH
75526: LD_INT 14
75528: PUSH
75529: LD_INT 13
75531: PUSH
75532: EMPTY
75533: LIST
75534: LIST
75535: LIST
75536: LIST
75537: LIST
75538: LIST
75539: PUSH
75540: LD_VAR 0 2
75544: PUSH
75545: LD_INT 3
75547: MINUS
75548: ARRAY
75549: ST_TO_ADDR
// end ; 10 .. 13 :
75550: GO 76060
75552: LD_INT 10
75554: DOUBLE
75555: GREATEREQUAL
75556: IFFALSE 75564
75558: LD_INT 13
75560: DOUBLE
75561: LESSEQUAL
75562: IFTRUE 75566
75564: GO 75643
75566: POP
// begin bc_type := b_lab_full ;
75567: LD_ADDR_OWVAR 42
75571: PUSH
75572: LD_INT 8
75574: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
75575: LD_ADDR_OWVAR 44
75579: PUSH
75580: LD_INT 10
75582: PUSH
75583: LD_INT 12
75585: PUSH
75586: LD_INT 14
75588: PUSH
75589: LD_INT 13
75591: PUSH
75592: EMPTY
75593: LIST
75594: LIST
75595: LIST
75596: LIST
75597: PUSH
75598: LD_VAR 0 2
75602: PUSH
75603: LD_INT 9
75605: MINUS
75606: ARRAY
75607: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
75608: LD_ADDR_OWVAR 45
75612: PUSH
75613: LD_INT 11
75615: PUSH
75616: LD_INT 15
75618: PUSH
75619: LD_INT 12
75621: PUSH
75622: LD_INT 15
75624: PUSH
75625: EMPTY
75626: LIST
75627: LIST
75628: LIST
75629: LIST
75630: PUSH
75631: LD_VAR 0 2
75635: PUSH
75636: LD_INT 9
75638: MINUS
75639: ARRAY
75640: ST_TO_ADDR
// end ; 14 :
75641: GO 76060
75643: LD_INT 14
75645: DOUBLE
75646: EQUAL
75647: IFTRUE 75651
75649: GO 75662
75651: POP
// bc_type := b_workshop ; 15 :
75652: LD_ADDR_OWVAR 42
75656: PUSH
75657: LD_INT 2
75659: ST_TO_ADDR
75660: GO 76060
75662: LD_INT 15
75664: DOUBLE
75665: EQUAL
75666: IFTRUE 75670
75668: GO 75681
75670: POP
// bc_type := b_factory ; 16 :
75671: LD_ADDR_OWVAR 42
75675: PUSH
75676: LD_INT 3
75678: ST_TO_ADDR
75679: GO 76060
75681: LD_INT 16
75683: DOUBLE
75684: EQUAL
75685: IFTRUE 75689
75687: GO 75700
75689: POP
// bc_type := b_ext_gun ; 17 :
75690: LD_ADDR_OWVAR 42
75694: PUSH
75695: LD_INT 17
75697: ST_TO_ADDR
75698: GO 76060
75700: LD_INT 17
75702: DOUBLE
75703: EQUAL
75704: IFTRUE 75708
75706: GO 75736
75708: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
75709: LD_ADDR_OWVAR 42
75713: PUSH
75714: LD_INT 19
75716: PUSH
75717: LD_INT 23
75719: PUSH
75720: LD_INT 19
75722: PUSH
75723: EMPTY
75724: LIST
75725: LIST
75726: LIST
75727: PUSH
75728: LD_VAR 0 1
75732: ARRAY
75733: ST_TO_ADDR
75734: GO 76060
75736: LD_INT 18
75738: DOUBLE
75739: EQUAL
75740: IFTRUE 75744
75742: GO 75755
75744: POP
// bc_type := b_ext_radar ; 19 :
75745: LD_ADDR_OWVAR 42
75749: PUSH
75750: LD_INT 20
75752: ST_TO_ADDR
75753: GO 76060
75755: LD_INT 19
75757: DOUBLE
75758: EQUAL
75759: IFTRUE 75763
75761: GO 75774
75763: POP
// bc_type := b_ext_radio ; 20 :
75764: LD_ADDR_OWVAR 42
75768: PUSH
75769: LD_INT 22
75771: ST_TO_ADDR
75772: GO 76060
75774: LD_INT 20
75776: DOUBLE
75777: EQUAL
75778: IFTRUE 75782
75780: GO 75793
75782: POP
// bc_type := b_ext_siberium ; 21 :
75783: LD_ADDR_OWVAR 42
75787: PUSH
75788: LD_INT 21
75790: ST_TO_ADDR
75791: GO 76060
75793: LD_INT 21
75795: DOUBLE
75796: EQUAL
75797: IFTRUE 75801
75799: GO 75812
75801: POP
// bc_type := b_ext_computer ; 22 :
75802: LD_ADDR_OWVAR 42
75806: PUSH
75807: LD_INT 24
75809: ST_TO_ADDR
75810: GO 76060
75812: LD_INT 22
75814: DOUBLE
75815: EQUAL
75816: IFTRUE 75820
75818: GO 75831
75820: POP
// bc_type := b_ext_track ; 23 :
75821: LD_ADDR_OWVAR 42
75825: PUSH
75826: LD_INT 16
75828: ST_TO_ADDR
75829: GO 76060
75831: LD_INT 23
75833: DOUBLE
75834: EQUAL
75835: IFTRUE 75839
75837: GO 75850
75839: POP
// bc_type := b_ext_laser ; 24 :
75840: LD_ADDR_OWVAR 42
75844: PUSH
75845: LD_INT 25
75847: ST_TO_ADDR
75848: GO 76060
75850: LD_INT 24
75852: DOUBLE
75853: EQUAL
75854: IFTRUE 75858
75856: GO 75869
75858: POP
// bc_type := b_control_tower ; 25 :
75859: LD_ADDR_OWVAR 42
75863: PUSH
75864: LD_INT 36
75866: ST_TO_ADDR
75867: GO 76060
75869: LD_INT 25
75871: DOUBLE
75872: EQUAL
75873: IFTRUE 75877
75875: GO 75888
75877: POP
// bc_type := b_breastwork ; 26 :
75878: LD_ADDR_OWVAR 42
75882: PUSH
75883: LD_INT 31
75885: ST_TO_ADDR
75886: GO 76060
75888: LD_INT 26
75890: DOUBLE
75891: EQUAL
75892: IFTRUE 75896
75894: GO 75907
75896: POP
// bc_type := b_bunker ; 27 :
75897: LD_ADDR_OWVAR 42
75901: PUSH
75902: LD_INT 32
75904: ST_TO_ADDR
75905: GO 76060
75907: LD_INT 27
75909: DOUBLE
75910: EQUAL
75911: IFTRUE 75915
75913: GO 75926
75915: POP
// bc_type := b_turret ; 28 :
75916: LD_ADDR_OWVAR 42
75920: PUSH
75921: LD_INT 33
75923: ST_TO_ADDR
75924: GO 76060
75926: LD_INT 28
75928: DOUBLE
75929: EQUAL
75930: IFTRUE 75934
75932: GO 75945
75934: POP
// bc_type := b_armoury ; 29 :
75935: LD_ADDR_OWVAR 42
75939: PUSH
75940: LD_INT 4
75942: ST_TO_ADDR
75943: GO 76060
75945: LD_INT 29
75947: DOUBLE
75948: EQUAL
75949: IFTRUE 75953
75951: GO 75964
75953: POP
// bc_type := b_barracks ; 30 :
75954: LD_ADDR_OWVAR 42
75958: PUSH
75959: LD_INT 5
75961: ST_TO_ADDR
75962: GO 76060
75964: LD_INT 30
75966: DOUBLE
75967: EQUAL
75968: IFTRUE 75972
75970: GO 75983
75972: POP
// bc_type := b_solar_power ; 31 :
75973: LD_ADDR_OWVAR 42
75977: PUSH
75978: LD_INT 27
75980: ST_TO_ADDR
75981: GO 76060
75983: LD_INT 31
75985: DOUBLE
75986: EQUAL
75987: IFTRUE 75991
75989: GO 76002
75991: POP
// bc_type := b_oil_power ; 32 :
75992: LD_ADDR_OWVAR 42
75996: PUSH
75997: LD_INT 26
75999: ST_TO_ADDR
76000: GO 76060
76002: LD_INT 32
76004: DOUBLE
76005: EQUAL
76006: IFTRUE 76010
76008: GO 76021
76010: POP
// bc_type := b_siberite_power ; 33 :
76011: LD_ADDR_OWVAR 42
76015: PUSH
76016: LD_INT 28
76018: ST_TO_ADDR
76019: GO 76060
76021: LD_INT 33
76023: DOUBLE
76024: EQUAL
76025: IFTRUE 76029
76027: GO 76040
76029: POP
// bc_type := b_oil_mine ; 34 :
76030: LD_ADDR_OWVAR 42
76034: PUSH
76035: LD_INT 29
76037: ST_TO_ADDR
76038: GO 76060
76040: LD_INT 34
76042: DOUBLE
76043: EQUAL
76044: IFTRUE 76048
76046: GO 76059
76048: POP
// bc_type := b_siberite_mine ; end ;
76049: LD_ADDR_OWVAR 42
76053: PUSH
76054: LD_INT 30
76056: ST_TO_ADDR
76057: GO 76060
76059: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
76060: LD_ADDR_VAR 0 8
76064: PUSH
76065: LD_VAR 0 5
76069: PPUSH
76070: LD_VAR 0 6
76074: PPUSH
76075: LD_VAR 0 3
76079: PPUSH
76080: CALL_OW 47
76084: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
76085: LD_OWVAR 42
76089: PUSH
76090: LD_INT 32
76092: PUSH
76093: LD_INT 33
76095: PUSH
76096: EMPTY
76097: LIST
76098: LIST
76099: IN
76100: IFFALSE 76116
// PlaceWeaponTurret ( b , weapon ) ;
76102: LD_VAR 0 8
76106: PPUSH
76107: LD_VAR 0 4
76111: PPUSH
76112: CALL_OW 431
// end ;
76116: LD_VAR 0 7
76120: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
76121: LD_INT 0
76123: PPUSH
76124: PPUSH
76125: PPUSH
76126: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76127: LD_ADDR_VAR 0 4
76131: PUSH
76132: LD_INT 22
76134: PUSH
76135: LD_OWVAR 2
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: PUSH
76144: LD_INT 2
76146: PUSH
76147: LD_INT 30
76149: PUSH
76150: LD_INT 0
76152: PUSH
76153: EMPTY
76154: LIST
76155: LIST
76156: PUSH
76157: LD_INT 30
76159: PUSH
76160: LD_INT 1
76162: PUSH
76163: EMPTY
76164: LIST
76165: LIST
76166: PUSH
76167: EMPTY
76168: LIST
76169: LIST
76170: LIST
76171: PUSH
76172: EMPTY
76173: LIST
76174: LIST
76175: PPUSH
76176: CALL_OW 69
76180: ST_TO_ADDR
// if not tmp then
76181: LD_VAR 0 4
76185: NOT
76186: IFFALSE 76190
// exit ;
76188: GO 76249
// for i in tmp do
76190: LD_ADDR_VAR 0 2
76194: PUSH
76195: LD_VAR 0 4
76199: PUSH
76200: FOR_IN
76201: IFFALSE 76247
// for j = 1 to 3 do
76203: LD_ADDR_VAR 0 3
76207: PUSH
76208: DOUBLE
76209: LD_INT 1
76211: DEC
76212: ST_TO_ADDR
76213: LD_INT 3
76215: PUSH
76216: FOR_TO
76217: IFFALSE 76243
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
76219: LD_VAR 0 2
76223: PPUSH
76224: CALL_OW 274
76228: PPUSH
76229: LD_VAR 0 3
76233: PPUSH
76234: LD_INT 99999
76236: PPUSH
76237: CALL_OW 277
76241: GO 76216
76243: POP
76244: POP
76245: GO 76200
76247: POP
76248: POP
// end ;
76249: LD_VAR 0 1
76253: RET
// export function hHackSetLevel10 ; var i , j ; begin
76254: LD_INT 0
76256: PPUSH
76257: PPUSH
76258: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
76259: LD_ADDR_VAR 0 2
76263: PUSH
76264: LD_INT 21
76266: PUSH
76267: LD_INT 1
76269: PUSH
76270: EMPTY
76271: LIST
76272: LIST
76273: PPUSH
76274: CALL_OW 69
76278: PUSH
76279: FOR_IN
76280: IFFALSE 76332
// if IsSelected ( i ) then
76282: LD_VAR 0 2
76286: PPUSH
76287: CALL_OW 306
76291: IFFALSE 76330
// begin for j := 1 to 4 do
76293: LD_ADDR_VAR 0 3
76297: PUSH
76298: DOUBLE
76299: LD_INT 1
76301: DEC
76302: ST_TO_ADDR
76303: LD_INT 4
76305: PUSH
76306: FOR_TO
76307: IFFALSE 76328
// SetSkill ( i , j , 10 ) ;
76309: LD_VAR 0 2
76313: PPUSH
76314: LD_VAR 0 3
76318: PPUSH
76319: LD_INT 10
76321: PPUSH
76322: CALL_OW 237
76326: GO 76306
76328: POP
76329: POP
// end ;
76330: GO 76279
76332: POP
76333: POP
// end ;
76334: LD_VAR 0 1
76338: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
76339: LD_INT 0
76341: PPUSH
76342: PPUSH
76343: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
76344: LD_ADDR_VAR 0 2
76348: PUSH
76349: LD_INT 22
76351: PUSH
76352: LD_OWVAR 2
76356: PUSH
76357: EMPTY
76358: LIST
76359: LIST
76360: PUSH
76361: LD_INT 21
76363: PUSH
76364: LD_INT 1
76366: PUSH
76367: EMPTY
76368: LIST
76369: LIST
76370: PUSH
76371: EMPTY
76372: LIST
76373: LIST
76374: PPUSH
76375: CALL_OW 69
76379: PUSH
76380: FOR_IN
76381: IFFALSE 76422
// begin for j := 1 to 4 do
76383: LD_ADDR_VAR 0 3
76387: PUSH
76388: DOUBLE
76389: LD_INT 1
76391: DEC
76392: ST_TO_ADDR
76393: LD_INT 4
76395: PUSH
76396: FOR_TO
76397: IFFALSE 76418
// SetSkill ( i , j , 10 ) ;
76399: LD_VAR 0 2
76403: PPUSH
76404: LD_VAR 0 3
76408: PPUSH
76409: LD_INT 10
76411: PPUSH
76412: CALL_OW 237
76416: GO 76396
76418: POP
76419: POP
// end ;
76420: GO 76380
76422: POP
76423: POP
// end ;
76424: LD_VAR 0 1
76428: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
76429: LD_INT 0
76431: PPUSH
// uc_side := your_side ;
76432: LD_ADDR_OWVAR 20
76436: PUSH
76437: LD_OWVAR 2
76441: ST_TO_ADDR
// uc_nation := nation ;
76442: LD_ADDR_OWVAR 21
76446: PUSH
76447: LD_VAR 0 1
76451: ST_TO_ADDR
// InitHc ;
76452: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
76456: LD_INT 0
76458: PPUSH
76459: LD_VAR 0 2
76463: PPUSH
76464: LD_VAR 0 3
76468: PPUSH
76469: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
76473: LD_VAR 0 4
76477: PPUSH
76478: LD_VAR 0 5
76482: PPUSH
76483: CALL_OW 428
76487: PUSH
76488: LD_INT 0
76490: EQUAL
76491: IFFALSE 76515
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
76493: CALL_OW 44
76497: PPUSH
76498: LD_VAR 0 4
76502: PPUSH
76503: LD_VAR 0 5
76507: PPUSH
76508: LD_INT 1
76510: PPUSH
76511: CALL_OW 48
// end ;
76515: LD_VAR 0 6
76519: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
76520: LD_INT 0
76522: PPUSH
76523: PPUSH
// uc_side := your_side ;
76524: LD_ADDR_OWVAR 20
76528: PUSH
76529: LD_OWVAR 2
76533: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
76534: LD_VAR 0 1
76538: PUSH
76539: LD_INT 1
76541: PUSH
76542: LD_INT 2
76544: PUSH
76545: LD_INT 3
76547: PUSH
76548: LD_INT 4
76550: PUSH
76551: LD_INT 5
76553: PUSH
76554: EMPTY
76555: LIST
76556: LIST
76557: LIST
76558: LIST
76559: LIST
76560: IN
76561: IFFALSE 76573
// uc_nation := nation_american else
76563: LD_ADDR_OWVAR 21
76567: PUSH
76568: LD_INT 1
76570: ST_TO_ADDR
76571: GO 76616
// if chassis in [ 11 , 12 , 13 , 14 ] then
76573: LD_VAR 0 1
76577: PUSH
76578: LD_INT 11
76580: PUSH
76581: LD_INT 12
76583: PUSH
76584: LD_INT 13
76586: PUSH
76587: LD_INT 14
76589: PUSH
76590: EMPTY
76591: LIST
76592: LIST
76593: LIST
76594: LIST
76595: IN
76596: IFFALSE 76608
// uc_nation := nation_arabian else
76598: LD_ADDR_OWVAR 21
76602: PUSH
76603: LD_INT 2
76605: ST_TO_ADDR
76606: GO 76616
// uc_nation := nation_russian ;
76608: LD_ADDR_OWVAR 21
76612: PUSH
76613: LD_INT 3
76615: ST_TO_ADDR
// vc_chassis := chassis ;
76616: LD_ADDR_OWVAR 37
76620: PUSH
76621: LD_VAR 0 1
76625: ST_TO_ADDR
// vc_engine := engine ;
76626: LD_ADDR_OWVAR 39
76630: PUSH
76631: LD_VAR 0 2
76635: ST_TO_ADDR
// vc_control := control ;
76636: LD_ADDR_OWVAR 38
76640: PUSH
76641: LD_VAR 0 3
76645: ST_TO_ADDR
// vc_weapon := weapon ;
76646: LD_ADDR_OWVAR 40
76650: PUSH
76651: LD_VAR 0 4
76655: ST_TO_ADDR
// un := CreateVehicle ;
76656: LD_ADDR_VAR 0 8
76660: PUSH
76661: CALL_OW 45
76665: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
76666: LD_VAR 0 8
76670: PPUSH
76671: LD_INT 0
76673: PPUSH
76674: LD_INT 5
76676: PPUSH
76677: CALL_OW 12
76681: PPUSH
76682: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
76686: LD_VAR 0 8
76690: PPUSH
76691: LD_VAR 0 5
76695: PPUSH
76696: LD_VAR 0 6
76700: PPUSH
76701: LD_INT 1
76703: PPUSH
76704: CALL_OW 48
// end ;
76708: LD_VAR 0 7
76712: RET
// export hInvincible ; every 1 do
76713: GO 76715
76715: DISABLE
// hInvincible := [ ] ;
76716: LD_ADDR_EXP 131
76720: PUSH
76721: EMPTY
76722: ST_TO_ADDR
76723: END
// every 10 do var i ;
76724: GO 76726
76726: DISABLE
76727: LD_INT 0
76729: PPUSH
// begin enable ;
76730: ENABLE
// if not hInvincible then
76731: LD_EXP 131
76735: NOT
76736: IFFALSE 76740
// exit ;
76738: GO 76784
// for i in hInvincible do
76740: LD_ADDR_VAR 0 1
76744: PUSH
76745: LD_EXP 131
76749: PUSH
76750: FOR_IN
76751: IFFALSE 76782
// if GetLives ( i ) < 1000 then
76753: LD_VAR 0 1
76757: PPUSH
76758: CALL_OW 256
76762: PUSH
76763: LD_INT 1000
76765: LESS
76766: IFFALSE 76780
// SetLives ( i , 1000 ) ;
76768: LD_VAR 0 1
76772: PPUSH
76773: LD_INT 1000
76775: PPUSH
76776: CALL_OW 234
76780: GO 76750
76782: POP
76783: POP
// end ;
76784: PPOPN 1
76786: END
// export function hHackInvincible ; var i ; begin
76787: LD_INT 0
76789: PPUSH
76790: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
76791: LD_ADDR_VAR 0 2
76795: PUSH
76796: LD_INT 2
76798: PUSH
76799: LD_INT 21
76801: PUSH
76802: LD_INT 1
76804: PUSH
76805: EMPTY
76806: LIST
76807: LIST
76808: PUSH
76809: LD_INT 21
76811: PUSH
76812: LD_INT 2
76814: PUSH
76815: EMPTY
76816: LIST
76817: LIST
76818: PUSH
76819: EMPTY
76820: LIST
76821: LIST
76822: LIST
76823: PPUSH
76824: CALL_OW 69
76828: PUSH
76829: FOR_IN
76830: IFFALSE 76891
// if IsSelected ( i ) then
76832: LD_VAR 0 2
76836: PPUSH
76837: CALL_OW 306
76841: IFFALSE 76889
// begin if i in hInvincible then
76843: LD_VAR 0 2
76847: PUSH
76848: LD_EXP 131
76852: IN
76853: IFFALSE 76873
// hInvincible := hInvincible diff i else
76855: LD_ADDR_EXP 131
76859: PUSH
76860: LD_EXP 131
76864: PUSH
76865: LD_VAR 0 2
76869: DIFF
76870: ST_TO_ADDR
76871: GO 76889
// hInvincible := hInvincible union i ;
76873: LD_ADDR_EXP 131
76877: PUSH
76878: LD_EXP 131
76882: PUSH
76883: LD_VAR 0 2
76887: UNION
76888: ST_TO_ADDR
// end ;
76889: GO 76829
76891: POP
76892: POP
// end ;
76893: LD_VAR 0 1
76897: RET
// export function hHackInvisible ; var i , j ; begin
76898: LD_INT 0
76900: PPUSH
76901: PPUSH
76902: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
76903: LD_ADDR_VAR 0 2
76907: PUSH
76908: LD_INT 21
76910: PUSH
76911: LD_INT 1
76913: PUSH
76914: EMPTY
76915: LIST
76916: LIST
76917: PPUSH
76918: CALL_OW 69
76922: PUSH
76923: FOR_IN
76924: IFFALSE 76948
// if IsSelected ( i ) then
76926: LD_VAR 0 2
76930: PPUSH
76931: CALL_OW 306
76935: IFFALSE 76946
// ComForceInvisible ( i ) ;
76937: LD_VAR 0 2
76941: PPUSH
76942: CALL_OW 496
76946: GO 76923
76948: POP
76949: POP
// end ;
76950: LD_VAR 0 1
76954: RET
// export function hHackChangeYourSide ; begin
76955: LD_INT 0
76957: PPUSH
// if your_side = 8 then
76958: LD_OWVAR 2
76962: PUSH
76963: LD_INT 8
76965: EQUAL
76966: IFFALSE 76978
// your_side := 0 else
76968: LD_ADDR_OWVAR 2
76972: PUSH
76973: LD_INT 0
76975: ST_TO_ADDR
76976: GO 76992
// your_side := your_side + 1 ;
76978: LD_ADDR_OWVAR 2
76982: PUSH
76983: LD_OWVAR 2
76987: PUSH
76988: LD_INT 1
76990: PLUS
76991: ST_TO_ADDR
// end ;
76992: LD_VAR 0 1
76996: RET
// export function hHackChangeUnitSide ; var i , j ; begin
76997: LD_INT 0
76999: PPUSH
77000: PPUSH
77001: PPUSH
// for i in all_units do
77002: LD_ADDR_VAR 0 2
77006: PUSH
77007: LD_OWVAR 3
77011: PUSH
77012: FOR_IN
77013: IFFALSE 77091
// if IsSelected ( i ) then
77015: LD_VAR 0 2
77019: PPUSH
77020: CALL_OW 306
77024: IFFALSE 77089
// begin j := GetSide ( i ) ;
77026: LD_ADDR_VAR 0 3
77030: PUSH
77031: LD_VAR 0 2
77035: PPUSH
77036: CALL_OW 255
77040: ST_TO_ADDR
// if j = 8 then
77041: LD_VAR 0 3
77045: PUSH
77046: LD_INT 8
77048: EQUAL
77049: IFFALSE 77061
// j := 0 else
77051: LD_ADDR_VAR 0 3
77055: PUSH
77056: LD_INT 0
77058: ST_TO_ADDR
77059: GO 77075
// j := j + 1 ;
77061: LD_ADDR_VAR 0 3
77065: PUSH
77066: LD_VAR 0 3
77070: PUSH
77071: LD_INT 1
77073: PLUS
77074: ST_TO_ADDR
// SetSide ( i , j ) ;
77075: LD_VAR 0 2
77079: PPUSH
77080: LD_VAR 0 3
77084: PPUSH
77085: CALL_OW 235
// end ;
77089: GO 77012
77091: POP
77092: POP
// end ;
77093: LD_VAR 0 1
77097: RET
// export function hHackFog ; begin
77098: LD_INT 0
77100: PPUSH
// FogOff ( true ) ;
77101: LD_INT 1
77103: PPUSH
77104: CALL_OW 344
// end ;
77108: LD_VAR 0 1
77112: RET
// export function hHackTeleport ( unit , x , y ) ; begin
77113: LD_INT 0
77115: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
77116: LD_VAR 0 1
77120: PPUSH
77121: LD_VAR 0 2
77125: PPUSH
77126: LD_VAR 0 3
77130: PPUSH
77131: LD_INT 1
77133: PPUSH
77134: LD_INT 1
77136: PPUSH
77137: CALL_OW 483
// CenterOnXY ( x , y ) ;
77141: LD_VAR 0 2
77145: PPUSH
77146: LD_VAR 0 3
77150: PPUSH
77151: CALL_OW 84
// end ; end_of_file
77155: LD_VAR 0 4
77159: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77160: LD_VAR 0 1
77164: PUSH
77165: LD_INT 200
77167: DOUBLE
77168: GREATEREQUAL
77169: IFFALSE 77177
77171: LD_INT 299
77173: DOUBLE
77174: LESSEQUAL
77175: IFTRUE 77179
77177: GO 77211
77179: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77180: LD_VAR 0 1
77184: PPUSH
77185: LD_VAR 0 2
77189: PPUSH
77190: LD_VAR 0 3
77194: PPUSH
77195: LD_VAR 0 4
77199: PPUSH
77200: LD_VAR 0 5
77204: PPUSH
77205: CALL 77455 0 5
77209: GO 77288
77211: LD_INT 300
77213: DOUBLE
77214: GREATEREQUAL
77215: IFFALSE 77223
77217: LD_INT 399
77219: DOUBLE
77220: LESSEQUAL
77221: IFTRUE 77225
77223: GO 77287
77225: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77226: LD_VAR 0 1
77230: PPUSH
77231: LD_VAR 0 2
77235: PPUSH
77236: LD_VAR 0 3
77240: PPUSH
77241: LD_VAR 0 4
77245: PPUSH
77246: LD_VAR 0 5
77250: PPUSH
77251: LD_VAR 0 6
77255: PPUSH
77256: LD_VAR 0 7
77260: PPUSH
77261: LD_VAR 0 8
77265: PPUSH
77266: LD_VAR 0 9
77270: PPUSH
77271: LD_VAR 0 10
77275: PPUSH
77276: LD_VAR 0 11
77280: PPUSH
77281: CALL 75180 0 11
77285: GO 77288
77287: POP
// end ;
77288: PPOPN 11
77290: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77291: LD_VAR 0 1
77295: PPUSH
77296: LD_VAR 0 2
77300: PPUSH
77301: LD_VAR 0 3
77305: PPUSH
77306: LD_VAR 0 4
77310: PPUSH
77311: LD_VAR 0 5
77315: PPUSH
77316: CALL 77437 0 5
// end ; end_of_file
77320: PPOPN 5
77322: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
77323: LD_INT 0
77325: PPUSH
77326: PPUSH
77327: PPUSH
77328: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
77329: LD_VAR 0 1
77333: PPUSH
77334: CALL_OW 264
77338: PUSH
77339: LD_EXP 62
77343: EQUAL
77344: IFFALSE 77416
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
77346: LD_INT 68
77348: PPUSH
77349: LD_VAR 0 1
77353: PPUSH
77354: CALL_OW 255
77358: PPUSH
77359: CALL_OW 321
77363: PUSH
77364: LD_INT 2
77366: EQUAL
77367: IFFALSE 77379
// eff := 70 else
77369: LD_ADDR_VAR 0 4
77373: PUSH
77374: LD_INT 70
77376: ST_TO_ADDR
77377: GO 77387
// eff := 30 ;
77379: LD_ADDR_VAR 0 4
77383: PUSH
77384: LD_INT 30
77386: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
77387: LD_VAR 0 1
77391: PPUSH
77392: CALL_OW 250
77396: PPUSH
77397: LD_VAR 0 1
77401: PPUSH
77402: CALL_OW 251
77406: PPUSH
77407: LD_VAR 0 4
77411: PPUSH
77412: CALL_OW 495
// end ; end ;
77416: LD_VAR 0 2
77420: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
77421: LD_INT 0
77423: PPUSH
// end ;
77424: LD_VAR 0 4
77428: RET
// export function SOS_Command ( cmd ) ; begin
77429: LD_INT 0
77431: PPUSH
// end ;
77432: LD_VAR 0 2
77436: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
77437: LD_INT 0
77439: PPUSH
// if cmd = 121 then
77440: LD_VAR 0 1
77444: PUSH
77445: LD_INT 121
77447: EQUAL
77448: IFFALSE 77450
// end ;
77450: LD_VAR 0 6
77454: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
77455: LD_INT 0
77457: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
77458: LD_VAR 0 1
77462: PUSH
77463: LD_INT 250
77465: EQUAL
77466: PUSH
77467: LD_VAR 0 2
77471: PPUSH
77472: CALL_OW 264
77476: PUSH
77477: LD_EXP 65
77481: EQUAL
77482: AND
77483: IFFALSE 77504
// MinerPlaceMine ( unit , x , y ) ;
77485: LD_VAR 0 2
77489: PPUSH
77490: LD_VAR 0 4
77494: PPUSH
77495: LD_VAR 0 5
77499: PPUSH
77500: CALL 79853 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
77504: LD_VAR 0 1
77508: PUSH
77509: LD_INT 251
77511: EQUAL
77512: PUSH
77513: LD_VAR 0 2
77517: PPUSH
77518: CALL_OW 264
77522: PUSH
77523: LD_EXP 65
77527: EQUAL
77528: AND
77529: IFFALSE 77550
// MinerDetonateMine ( unit , x , y ) ;
77531: LD_VAR 0 2
77535: PPUSH
77536: LD_VAR 0 4
77540: PPUSH
77541: LD_VAR 0 5
77545: PPUSH
77546: CALL 80130 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
77550: LD_VAR 0 1
77554: PUSH
77555: LD_INT 252
77557: EQUAL
77558: PUSH
77559: LD_VAR 0 2
77563: PPUSH
77564: CALL_OW 264
77568: PUSH
77569: LD_EXP 65
77573: EQUAL
77574: AND
77575: IFFALSE 77596
// MinerCreateMinefield ( unit , x , y ) ;
77577: LD_VAR 0 2
77581: PPUSH
77582: LD_VAR 0 4
77586: PPUSH
77587: LD_VAR 0 5
77591: PPUSH
77592: CALL 80547 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
77596: LD_VAR 0 1
77600: PUSH
77601: LD_INT 253
77603: EQUAL
77604: PUSH
77605: LD_VAR 0 2
77609: PPUSH
77610: CALL_OW 257
77614: PUSH
77615: LD_INT 5
77617: EQUAL
77618: AND
77619: IFFALSE 77640
// ComBinocular ( unit , x , y ) ;
77621: LD_VAR 0 2
77625: PPUSH
77626: LD_VAR 0 4
77630: PPUSH
77631: LD_VAR 0 5
77635: PPUSH
77636: CALL 80918 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
77640: LD_VAR 0 1
77644: PUSH
77645: LD_INT 254
77647: EQUAL
77648: PUSH
77649: LD_VAR 0 2
77653: PPUSH
77654: CALL_OW 264
77658: PUSH
77659: LD_EXP 60
77663: EQUAL
77664: AND
77665: PUSH
77666: LD_VAR 0 3
77670: PPUSH
77671: CALL_OW 263
77675: PUSH
77676: LD_INT 3
77678: EQUAL
77679: AND
77680: IFFALSE 77696
// HackDestroyVehicle ( unit , selectedUnit ) ;
77682: LD_VAR 0 2
77686: PPUSH
77687: LD_VAR 0 3
77691: PPUSH
77692: CALL 79213 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
77696: LD_VAR 0 1
77700: PUSH
77701: LD_INT 255
77703: EQUAL
77704: PUSH
77705: LD_VAR 0 2
77709: PPUSH
77710: CALL_OW 264
77714: PUSH
77715: LD_INT 14
77717: PUSH
77718: LD_INT 53
77720: PUSH
77721: EMPTY
77722: LIST
77723: LIST
77724: IN
77725: AND
77726: PUSH
77727: LD_VAR 0 4
77731: PPUSH
77732: LD_VAR 0 5
77736: PPUSH
77737: CALL_OW 488
77741: AND
77742: IFFALSE 77766
// CutTreeXYR ( unit , x , y , 12 ) ;
77744: LD_VAR 0 2
77748: PPUSH
77749: LD_VAR 0 4
77753: PPUSH
77754: LD_VAR 0 5
77758: PPUSH
77759: LD_INT 12
77761: PPUSH
77762: CALL 77779 0 4
// end ;
77766: LD_VAR 0 6
77770: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
77771: LD_INT 0
77773: PPUSH
// end ;
77774: LD_VAR 0 4
77778: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
77779: LD_INT 0
77781: PPUSH
77782: PPUSH
77783: PPUSH
77784: PPUSH
77785: PPUSH
77786: PPUSH
77787: PPUSH
77788: PPUSH
77789: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
77790: LD_VAR 0 1
77794: NOT
77795: PUSH
77796: LD_VAR 0 2
77800: PPUSH
77801: LD_VAR 0 3
77805: PPUSH
77806: CALL_OW 488
77810: NOT
77811: OR
77812: PUSH
77813: LD_VAR 0 4
77817: NOT
77818: OR
77819: IFFALSE 77823
// exit ;
77821: GO 78163
// list := [ ] ;
77823: LD_ADDR_VAR 0 13
77827: PUSH
77828: EMPTY
77829: ST_TO_ADDR
// if x - r < 0 then
77830: LD_VAR 0 2
77834: PUSH
77835: LD_VAR 0 4
77839: MINUS
77840: PUSH
77841: LD_INT 0
77843: LESS
77844: IFFALSE 77856
// min_x := 0 else
77846: LD_ADDR_VAR 0 7
77850: PUSH
77851: LD_INT 0
77853: ST_TO_ADDR
77854: GO 77872
// min_x := x - r ;
77856: LD_ADDR_VAR 0 7
77860: PUSH
77861: LD_VAR 0 2
77865: PUSH
77866: LD_VAR 0 4
77870: MINUS
77871: ST_TO_ADDR
// if y - r < 0 then
77872: LD_VAR 0 3
77876: PUSH
77877: LD_VAR 0 4
77881: MINUS
77882: PUSH
77883: LD_INT 0
77885: LESS
77886: IFFALSE 77898
// min_y := 0 else
77888: LD_ADDR_VAR 0 8
77892: PUSH
77893: LD_INT 0
77895: ST_TO_ADDR
77896: GO 77914
// min_y := y - r ;
77898: LD_ADDR_VAR 0 8
77902: PUSH
77903: LD_VAR 0 3
77907: PUSH
77908: LD_VAR 0 4
77912: MINUS
77913: ST_TO_ADDR
// max_x := x + r ;
77914: LD_ADDR_VAR 0 9
77918: PUSH
77919: LD_VAR 0 2
77923: PUSH
77924: LD_VAR 0 4
77928: PLUS
77929: ST_TO_ADDR
// max_y := y + r ;
77930: LD_ADDR_VAR 0 10
77934: PUSH
77935: LD_VAR 0 3
77939: PUSH
77940: LD_VAR 0 4
77944: PLUS
77945: ST_TO_ADDR
// for _x = min_x to max_x do
77946: LD_ADDR_VAR 0 11
77950: PUSH
77951: DOUBLE
77952: LD_VAR 0 7
77956: DEC
77957: ST_TO_ADDR
77958: LD_VAR 0 9
77962: PUSH
77963: FOR_TO
77964: IFFALSE 78081
// for _y = min_y to max_y do
77966: LD_ADDR_VAR 0 12
77970: PUSH
77971: DOUBLE
77972: LD_VAR 0 8
77976: DEC
77977: ST_TO_ADDR
77978: LD_VAR 0 10
77982: PUSH
77983: FOR_TO
77984: IFFALSE 78077
// begin if not ValidHex ( _x , _y ) then
77986: LD_VAR 0 11
77990: PPUSH
77991: LD_VAR 0 12
77995: PPUSH
77996: CALL_OW 488
78000: NOT
78001: IFFALSE 78005
// continue ;
78003: GO 77983
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
78005: LD_VAR 0 11
78009: PPUSH
78010: LD_VAR 0 12
78014: PPUSH
78015: CALL_OW 351
78019: PUSH
78020: LD_VAR 0 11
78024: PPUSH
78025: LD_VAR 0 12
78029: PPUSH
78030: CALL_OW 554
78034: AND
78035: IFFALSE 78075
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
78037: LD_ADDR_VAR 0 13
78041: PUSH
78042: LD_VAR 0 13
78046: PPUSH
78047: LD_VAR 0 13
78051: PUSH
78052: LD_INT 1
78054: PLUS
78055: PPUSH
78056: LD_VAR 0 11
78060: PUSH
78061: LD_VAR 0 12
78065: PUSH
78066: EMPTY
78067: LIST
78068: LIST
78069: PPUSH
78070: CALL_OW 2
78074: ST_TO_ADDR
// end ;
78075: GO 77983
78077: POP
78078: POP
78079: GO 77963
78081: POP
78082: POP
// if not list then
78083: LD_VAR 0 13
78087: NOT
78088: IFFALSE 78092
// exit ;
78090: GO 78163
// for i in list do
78092: LD_ADDR_VAR 0 6
78096: PUSH
78097: LD_VAR 0 13
78101: PUSH
78102: FOR_IN
78103: IFFALSE 78161
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
78105: LD_VAR 0 1
78109: PPUSH
78110: LD_STRING M
78112: PUSH
78113: LD_VAR 0 6
78117: PUSH
78118: LD_INT 1
78120: ARRAY
78121: PUSH
78122: LD_VAR 0 6
78126: PUSH
78127: LD_INT 2
78129: ARRAY
78130: PUSH
78131: LD_INT 0
78133: PUSH
78134: LD_INT 0
78136: PUSH
78137: LD_INT 0
78139: PUSH
78140: LD_INT 0
78142: PUSH
78143: EMPTY
78144: LIST
78145: LIST
78146: LIST
78147: LIST
78148: LIST
78149: LIST
78150: LIST
78151: PUSH
78152: EMPTY
78153: LIST
78154: PPUSH
78155: CALL_OW 447
78159: GO 78102
78161: POP
78162: POP
// end ;
78163: LD_VAR 0 5
78167: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
78168: LD_EXP 134
78172: NOT
78173: IFFALSE 78223
78175: GO 78177
78177: DISABLE
// begin initHack := true ;
78178: LD_ADDR_EXP 134
78182: PUSH
78183: LD_INT 1
78185: ST_TO_ADDR
// hackTanks := [ ] ;
78186: LD_ADDR_EXP 135
78190: PUSH
78191: EMPTY
78192: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
78193: LD_ADDR_EXP 136
78197: PUSH
78198: EMPTY
78199: ST_TO_ADDR
// hackLimit := 3 ;
78200: LD_ADDR_EXP 137
78204: PUSH
78205: LD_INT 3
78207: ST_TO_ADDR
// hackDist := 12 ;
78208: LD_ADDR_EXP 138
78212: PUSH
78213: LD_INT 12
78215: ST_TO_ADDR
// hackCounter := [ ] ;
78216: LD_ADDR_EXP 139
78220: PUSH
78221: EMPTY
78222: ST_TO_ADDR
// end ;
78223: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
78224: LD_EXP 134
78228: PUSH
78229: LD_INT 34
78231: PUSH
78232: LD_EXP 60
78236: PUSH
78237: EMPTY
78238: LIST
78239: LIST
78240: PPUSH
78241: CALL_OW 69
78245: AND
78246: IFFALSE 78501
78248: GO 78250
78250: DISABLE
78251: LD_INT 0
78253: PPUSH
78254: PPUSH
// begin enable ;
78255: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
78256: LD_ADDR_VAR 0 1
78260: PUSH
78261: LD_INT 34
78263: PUSH
78264: LD_EXP 60
78268: PUSH
78269: EMPTY
78270: LIST
78271: LIST
78272: PPUSH
78273: CALL_OW 69
78277: PUSH
78278: FOR_IN
78279: IFFALSE 78499
// begin if not i in hackTanks then
78281: LD_VAR 0 1
78285: PUSH
78286: LD_EXP 135
78290: IN
78291: NOT
78292: IFFALSE 78375
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
78294: LD_ADDR_EXP 135
78298: PUSH
78299: LD_EXP 135
78303: PPUSH
78304: LD_EXP 135
78308: PUSH
78309: LD_INT 1
78311: PLUS
78312: PPUSH
78313: LD_VAR 0 1
78317: PPUSH
78318: CALL_OW 1
78322: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
78323: LD_ADDR_EXP 136
78327: PUSH
78328: LD_EXP 136
78332: PPUSH
78333: LD_EXP 136
78337: PUSH
78338: LD_INT 1
78340: PLUS
78341: PPUSH
78342: EMPTY
78343: PPUSH
78344: CALL_OW 1
78348: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
78349: LD_ADDR_EXP 139
78353: PUSH
78354: LD_EXP 139
78358: PPUSH
78359: LD_EXP 139
78363: PUSH
78364: LD_INT 1
78366: PLUS
78367: PPUSH
78368: EMPTY
78369: PPUSH
78370: CALL_OW 1
78374: ST_TO_ADDR
// end ; if not IsOk ( i ) then
78375: LD_VAR 0 1
78379: PPUSH
78380: CALL_OW 302
78384: NOT
78385: IFFALSE 78398
// begin HackUnlinkAll ( i ) ;
78387: LD_VAR 0 1
78391: PPUSH
78392: CALL 78504 0 1
// continue ;
78396: GO 78278
// end ; HackCheckCapturedStatus ( i ) ;
78398: LD_VAR 0 1
78402: PPUSH
78403: CALL 78947 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
78407: LD_ADDR_VAR 0 2
78411: PUSH
78412: LD_INT 81
78414: PUSH
78415: LD_VAR 0 1
78419: PPUSH
78420: CALL_OW 255
78424: PUSH
78425: EMPTY
78426: LIST
78427: LIST
78428: PUSH
78429: LD_INT 33
78431: PUSH
78432: LD_INT 3
78434: PUSH
78435: EMPTY
78436: LIST
78437: LIST
78438: PUSH
78439: LD_INT 91
78441: PUSH
78442: LD_VAR 0 1
78446: PUSH
78447: LD_EXP 138
78451: PUSH
78452: EMPTY
78453: LIST
78454: LIST
78455: LIST
78456: PUSH
78457: LD_INT 50
78459: PUSH
78460: EMPTY
78461: LIST
78462: PUSH
78463: EMPTY
78464: LIST
78465: LIST
78466: LIST
78467: LIST
78468: PPUSH
78469: CALL_OW 69
78473: ST_TO_ADDR
// if not tmp then
78474: LD_VAR 0 2
78478: NOT
78479: IFFALSE 78483
// continue ;
78481: GO 78278
// HackLink ( i , tmp ) ;
78483: LD_VAR 0 1
78487: PPUSH
78488: LD_VAR 0 2
78492: PPUSH
78493: CALL 78640 0 2
// end ;
78497: GO 78278
78499: POP
78500: POP
// end ;
78501: PPOPN 2
78503: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
78504: LD_INT 0
78506: PPUSH
78507: PPUSH
78508: PPUSH
// if not hack in hackTanks then
78509: LD_VAR 0 1
78513: PUSH
78514: LD_EXP 135
78518: IN
78519: NOT
78520: IFFALSE 78524
// exit ;
78522: GO 78635
// index := GetElementIndex ( hackTanks , hack ) ;
78524: LD_ADDR_VAR 0 4
78528: PUSH
78529: LD_EXP 135
78533: PPUSH
78534: LD_VAR 0 1
78538: PPUSH
78539: CALL 29390 0 2
78543: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
78544: LD_EXP 136
78548: PUSH
78549: LD_VAR 0 4
78553: ARRAY
78554: IFFALSE 78635
// begin for i in hackTanksCaptured [ index ] do
78556: LD_ADDR_VAR 0 3
78560: PUSH
78561: LD_EXP 136
78565: PUSH
78566: LD_VAR 0 4
78570: ARRAY
78571: PUSH
78572: FOR_IN
78573: IFFALSE 78599
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
78575: LD_VAR 0 3
78579: PUSH
78580: LD_INT 1
78582: ARRAY
78583: PPUSH
78584: LD_VAR 0 3
78588: PUSH
78589: LD_INT 2
78591: ARRAY
78592: PPUSH
78593: CALL_OW 235
78597: GO 78572
78599: POP
78600: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
78601: LD_ADDR_EXP 136
78605: PUSH
78606: LD_EXP 136
78610: PPUSH
78611: LD_VAR 0 4
78615: PPUSH
78616: EMPTY
78617: PPUSH
78618: CALL_OW 1
78622: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
78623: LD_VAR 0 1
78627: PPUSH
78628: LD_INT 0
78630: PPUSH
78631: CALL_OW 505
// end ; end ;
78635: LD_VAR 0 2
78639: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
78640: LD_INT 0
78642: PPUSH
78643: PPUSH
78644: PPUSH
// if not hack in hackTanks or not vehicles then
78645: LD_VAR 0 1
78649: PUSH
78650: LD_EXP 135
78654: IN
78655: NOT
78656: PUSH
78657: LD_VAR 0 2
78661: NOT
78662: OR
78663: IFFALSE 78667
// exit ;
78665: GO 78942
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
78667: LD_ADDR_VAR 0 2
78671: PUSH
78672: LD_VAR 0 1
78676: PPUSH
78677: LD_VAR 0 2
78681: PPUSH
78682: LD_INT 1
78684: PPUSH
78685: LD_INT 1
78687: PPUSH
78688: CALL 30040 0 4
78692: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
78693: LD_ADDR_VAR 0 5
78697: PUSH
78698: LD_EXP 135
78702: PPUSH
78703: LD_VAR 0 1
78707: PPUSH
78708: CALL 29390 0 2
78712: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
78713: LD_EXP 136
78717: PUSH
78718: LD_VAR 0 5
78722: ARRAY
78723: PUSH
78724: LD_EXP 137
78728: LESS
78729: IFFALSE 78918
// begin for i := 1 to vehicles do
78731: LD_ADDR_VAR 0 4
78735: PUSH
78736: DOUBLE
78737: LD_INT 1
78739: DEC
78740: ST_TO_ADDR
78741: LD_VAR 0 2
78745: PUSH
78746: FOR_TO
78747: IFFALSE 78916
// begin if hackTanksCaptured [ index ] = hackLimit then
78749: LD_EXP 136
78753: PUSH
78754: LD_VAR 0 5
78758: ARRAY
78759: PUSH
78760: LD_EXP 137
78764: EQUAL
78765: IFFALSE 78769
// break ;
78767: GO 78916
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
78769: LD_ADDR_EXP 139
78773: PUSH
78774: LD_EXP 139
78778: PPUSH
78779: LD_VAR 0 5
78783: PPUSH
78784: LD_EXP 139
78788: PUSH
78789: LD_VAR 0 5
78793: ARRAY
78794: PUSH
78795: LD_INT 1
78797: PLUS
78798: PPUSH
78799: CALL_OW 1
78803: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
78804: LD_ADDR_EXP 136
78808: PUSH
78809: LD_EXP 136
78813: PPUSH
78814: LD_VAR 0 5
78818: PUSH
78819: LD_EXP 136
78823: PUSH
78824: LD_VAR 0 5
78828: ARRAY
78829: PUSH
78830: LD_INT 1
78832: PLUS
78833: PUSH
78834: EMPTY
78835: LIST
78836: LIST
78837: PPUSH
78838: LD_VAR 0 2
78842: PUSH
78843: LD_VAR 0 4
78847: ARRAY
78848: PUSH
78849: LD_VAR 0 2
78853: PUSH
78854: LD_VAR 0 4
78858: ARRAY
78859: PPUSH
78860: CALL_OW 255
78864: PUSH
78865: EMPTY
78866: LIST
78867: LIST
78868: PPUSH
78869: CALL 29605 0 3
78873: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
78874: LD_VAR 0 2
78878: PUSH
78879: LD_VAR 0 4
78883: ARRAY
78884: PPUSH
78885: LD_VAR 0 1
78889: PPUSH
78890: CALL_OW 255
78894: PPUSH
78895: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
78899: LD_VAR 0 2
78903: PUSH
78904: LD_VAR 0 4
78908: ARRAY
78909: PPUSH
78910: CALL_OW 141
// end ;
78914: GO 78746
78916: POP
78917: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78918: LD_VAR 0 1
78922: PPUSH
78923: LD_EXP 136
78927: PUSH
78928: LD_VAR 0 5
78932: ARRAY
78933: PUSH
78934: LD_INT 0
78936: PLUS
78937: PPUSH
78938: CALL_OW 505
// end ;
78942: LD_VAR 0 3
78946: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
78947: LD_INT 0
78949: PPUSH
78950: PPUSH
78951: PPUSH
78952: PPUSH
// if not hack in hackTanks then
78953: LD_VAR 0 1
78957: PUSH
78958: LD_EXP 135
78962: IN
78963: NOT
78964: IFFALSE 78968
// exit ;
78966: GO 79208
// index := GetElementIndex ( hackTanks , hack ) ;
78968: LD_ADDR_VAR 0 4
78972: PUSH
78973: LD_EXP 135
78977: PPUSH
78978: LD_VAR 0 1
78982: PPUSH
78983: CALL 29390 0 2
78987: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
78988: LD_ADDR_VAR 0 3
78992: PUSH
78993: DOUBLE
78994: LD_EXP 136
78998: PUSH
78999: LD_VAR 0 4
79003: ARRAY
79004: INC
79005: ST_TO_ADDR
79006: LD_INT 1
79008: PUSH
79009: FOR_DOWNTO
79010: IFFALSE 79182
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
79012: LD_ADDR_VAR 0 5
79016: PUSH
79017: LD_EXP 136
79021: PUSH
79022: LD_VAR 0 4
79026: ARRAY
79027: PUSH
79028: LD_VAR 0 3
79032: ARRAY
79033: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
79034: LD_VAR 0 5
79038: PUSH
79039: LD_INT 1
79041: ARRAY
79042: PPUSH
79043: CALL_OW 302
79047: NOT
79048: PUSH
79049: LD_VAR 0 5
79053: PUSH
79054: LD_INT 1
79056: ARRAY
79057: PPUSH
79058: CALL_OW 255
79062: PUSH
79063: LD_VAR 0 1
79067: PPUSH
79068: CALL_OW 255
79072: NONEQUAL
79073: OR
79074: IFFALSE 79180
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
79076: LD_VAR 0 5
79080: PUSH
79081: LD_INT 1
79083: ARRAY
79084: PPUSH
79085: CALL_OW 305
79089: PUSH
79090: LD_VAR 0 5
79094: PUSH
79095: LD_INT 1
79097: ARRAY
79098: PPUSH
79099: CALL_OW 255
79103: PUSH
79104: LD_VAR 0 1
79108: PPUSH
79109: CALL_OW 255
79113: EQUAL
79114: AND
79115: IFFALSE 79139
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
79117: LD_VAR 0 5
79121: PUSH
79122: LD_INT 1
79124: ARRAY
79125: PPUSH
79126: LD_VAR 0 5
79130: PUSH
79131: LD_INT 2
79133: ARRAY
79134: PPUSH
79135: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
79139: LD_ADDR_EXP 136
79143: PUSH
79144: LD_EXP 136
79148: PPUSH
79149: LD_VAR 0 4
79153: PPUSH
79154: LD_EXP 136
79158: PUSH
79159: LD_VAR 0 4
79163: ARRAY
79164: PPUSH
79165: LD_VAR 0 3
79169: PPUSH
79170: CALL_OW 3
79174: PPUSH
79175: CALL_OW 1
79179: ST_TO_ADDR
// end ; end ;
79180: GO 79009
79182: POP
79183: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
79184: LD_VAR 0 1
79188: PPUSH
79189: LD_EXP 136
79193: PUSH
79194: LD_VAR 0 4
79198: ARRAY
79199: PUSH
79200: LD_INT 0
79202: PLUS
79203: PPUSH
79204: CALL_OW 505
// end ;
79208: LD_VAR 0 2
79212: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
79213: LD_INT 0
79215: PPUSH
79216: PPUSH
79217: PPUSH
79218: PPUSH
// if not hack in hackTanks then
79219: LD_VAR 0 1
79223: PUSH
79224: LD_EXP 135
79228: IN
79229: NOT
79230: IFFALSE 79234
// exit ;
79232: GO 79319
// index := GetElementIndex ( hackTanks , hack ) ;
79234: LD_ADDR_VAR 0 5
79238: PUSH
79239: LD_EXP 135
79243: PPUSH
79244: LD_VAR 0 1
79248: PPUSH
79249: CALL 29390 0 2
79253: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
79254: LD_ADDR_VAR 0 4
79258: PUSH
79259: DOUBLE
79260: LD_INT 1
79262: DEC
79263: ST_TO_ADDR
79264: LD_EXP 136
79268: PUSH
79269: LD_VAR 0 5
79273: ARRAY
79274: PUSH
79275: FOR_TO
79276: IFFALSE 79317
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
79278: LD_EXP 136
79282: PUSH
79283: LD_VAR 0 5
79287: ARRAY
79288: PUSH
79289: LD_VAR 0 4
79293: ARRAY
79294: PUSH
79295: LD_INT 1
79297: ARRAY
79298: PUSH
79299: LD_VAR 0 2
79303: EQUAL
79304: IFFALSE 79315
// KillUnit ( vehicle ) ;
79306: LD_VAR 0 2
79310: PPUSH
79311: CALL_OW 66
79315: GO 79275
79317: POP
79318: POP
// end ;
79319: LD_VAR 0 3
79323: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
79324: LD_EXP 140
79328: NOT
79329: IFFALSE 79364
79331: GO 79333
79333: DISABLE
// begin initMiner := true ;
79334: LD_ADDR_EXP 140
79338: PUSH
79339: LD_INT 1
79341: ST_TO_ADDR
// minersList := [ ] ;
79342: LD_ADDR_EXP 141
79346: PUSH
79347: EMPTY
79348: ST_TO_ADDR
// minerMinesList := [ ] ;
79349: LD_ADDR_EXP 142
79353: PUSH
79354: EMPTY
79355: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
79356: LD_ADDR_EXP 143
79360: PUSH
79361: LD_INT 5
79363: ST_TO_ADDR
// end ;
79364: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
79365: LD_EXP 140
79369: PUSH
79370: LD_INT 34
79372: PUSH
79373: LD_EXP 65
79377: PUSH
79378: EMPTY
79379: LIST
79380: LIST
79381: PPUSH
79382: CALL_OW 69
79386: AND
79387: IFFALSE 79850
79389: GO 79391
79391: DISABLE
79392: LD_INT 0
79394: PPUSH
79395: PPUSH
79396: PPUSH
79397: PPUSH
// begin enable ;
79398: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
79399: LD_ADDR_VAR 0 1
79403: PUSH
79404: LD_INT 34
79406: PUSH
79407: LD_EXP 65
79411: PUSH
79412: EMPTY
79413: LIST
79414: LIST
79415: PPUSH
79416: CALL_OW 69
79420: PUSH
79421: FOR_IN
79422: IFFALSE 79494
// begin if not i in minersList then
79424: LD_VAR 0 1
79428: PUSH
79429: LD_EXP 141
79433: IN
79434: NOT
79435: IFFALSE 79492
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
79437: LD_ADDR_EXP 141
79441: PUSH
79442: LD_EXP 141
79446: PPUSH
79447: LD_EXP 141
79451: PUSH
79452: LD_INT 1
79454: PLUS
79455: PPUSH
79456: LD_VAR 0 1
79460: PPUSH
79461: CALL_OW 1
79465: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
79466: LD_ADDR_EXP 142
79470: PUSH
79471: LD_EXP 142
79475: PPUSH
79476: LD_EXP 142
79480: PUSH
79481: LD_INT 1
79483: PLUS
79484: PPUSH
79485: EMPTY
79486: PPUSH
79487: CALL_OW 1
79491: ST_TO_ADDR
// end end ;
79492: GO 79421
79494: POP
79495: POP
// for i := minerMinesList downto 1 do
79496: LD_ADDR_VAR 0 1
79500: PUSH
79501: DOUBLE
79502: LD_EXP 142
79506: INC
79507: ST_TO_ADDR
79508: LD_INT 1
79510: PUSH
79511: FOR_DOWNTO
79512: IFFALSE 79848
// begin if IsLive ( minersList [ i ] ) then
79514: LD_EXP 141
79518: PUSH
79519: LD_VAR 0 1
79523: ARRAY
79524: PPUSH
79525: CALL_OW 300
79529: IFFALSE 79557
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
79531: LD_EXP 141
79535: PUSH
79536: LD_VAR 0 1
79540: ARRAY
79541: PPUSH
79542: LD_EXP 142
79546: PUSH
79547: LD_VAR 0 1
79551: ARRAY
79552: PPUSH
79553: CALL_OW 505
// if not minerMinesList [ i ] then
79557: LD_EXP 142
79561: PUSH
79562: LD_VAR 0 1
79566: ARRAY
79567: NOT
79568: IFFALSE 79572
// continue ;
79570: GO 79511
// for j := minerMinesList [ i ] downto 1 do
79572: LD_ADDR_VAR 0 2
79576: PUSH
79577: DOUBLE
79578: LD_EXP 142
79582: PUSH
79583: LD_VAR 0 1
79587: ARRAY
79588: INC
79589: ST_TO_ADDR
79590: LD_INT 1
79592: PUSH
79593: FOR_DOWNTO
79594: IFFALSE 79844
// begin side := GetSide ( minersList [ i ] ) ;
79596: LD_ADDR_VAR 0 3
79600: PUSH
79601: LD_EXP 141
79605: PUSH
79606: LD_VAR 0 1
79610: ARRAY
79611: PPUSH
79612: CALL_OW 255
79616: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
79617: LD_ADDR_VAR 0 4
79621: PUSH
79622: LD_EXP 142
79626: PUSH
79627: LD_VAR 0 1
79631: ARRAY
79632: PUSH
79633: LD_VAR 0 2
79637: ARRAY
79638: PUSH
79639: LD_INT 1
79641: ARRAY
79642: PPUSH
79643: LD_EXP 142
79647: PUSH
79648: LD_VAR 0 1
79652: ARRAY
79653: PUSH
79654: LD_VAR 0 2
79658: ARRAY
79659: PUSH
79660: LD_INT 2
79662: ARRAY
79663: PPUSH
79664: CALL_OW 428
79668: ST_TO_ADDR
// if not tmp then
79669: LD_VAR 0 4
79673: NOT
79674: IFFALSE 79678
// continue ;
79676: GO 79593
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
79678: LD_VAR 0 4
79682: PUSH
79683: LD_INT 81
79685: PUSH
79686: LD_VAR 0 3
79690: PUSH
79691: EMPTY
79692: LIST
79693: LIST
79694: PPUSH
79695: CALL_OW 69
79699: IN
79700: PUSH
79701: LD_EXP 142
79705: PUSH
79706: LD_VAR 0 1
79710: ARRAY
79711: PUSH
79712: LD_VAR 0 2
79716: ARRAY
79717: PUSH
79718: LD_INT 1
79720: ARRAY
79721: PPUSH
79722: LD_EXP 142
79726: PUSH
79727: LD_VAR 0 1
79731: ARRAY
79732: PUSH
79733: LD_VAR 0 2
79737: ARRAY
79738: PUSH
79739: LD_INT 2
79741: ARRAY
79742: PPUSH
79743: CALL_OW 458
79747: AND
79748: IFFALSE 79842
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
79750: LD_EXP 142
79754: PUSH
79755: LD_VAR 0 1
79759: ARRAY
79760: PUSH
79761: LD_VAR 0 2
79765: ARRAY
79766: PUSH
79767: LD_INT 1
79769: ARRAY
79770: PPUSH
79771: LD_EXP 142
79775: PUSH
79776: LD_VAR 0 1
79780: ARRAY
79781: PUSH
79782: LD_VAR 0 2
79786: ARRAY
79787: PUSH
79788: LD_INT 2
79790: ARRAY
79791: PPUSH
79792: LD_VAR 0 3
79796: PPUSH
79797: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
79801: LD_ADDR_EXP 142
79805: PUSH
79806: LD_EXP 142
79810: PPUSH
79811: LD_VAR 0 1
79815: PPUSH
79816: LD_EXP 142
79820: PUSH
79821: LD_VAR 0 1
79825: ARRAY
79826: PPUSH
79827: LD_VAR 0 2
79831: PPUSH
79832: CALL_OW 3
79836: PPUSH
79837: CALL_OW 1
79841: ST_TO_ADDR
// end ; end ;
79842: GO 79593
79844: POP
79845: POP
// end ;
79846: GO 79511
79848: POP
79849: POP
// end ;
79850: PPOPN 4
79852: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
79853: LD_INT 0
79855: PPUSH
79856: PPUSH
// result := false ;
79857: LD_ADDR_VAR 0 4
79861: PUSH
79862: LD_INT 0
79864: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
79865: LD_VAR 0 1
79869: PPUSH
79870: CALL_OW 264
79874: PUSH
79875: LD_EXP 65
79879: EQUAL
79880: NOT
79881: IFFALSE 79885
// exit ;
79883: GO 80125
// index := GetElementIndex ( minersList , unit ) ;
79885: LD_ADDR_VAR 0 5
79889: PUSH
79890: LD_EXP 141
79894: PPUSH
79895: LD_VAR 0 1
79899: PPUSH
79900: CALL 29390 0 2
79904: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
79905: LD_EXP 142
79909: PUSH
79910: LD_VAR 0 5
79914: ARRAY
79915: PUSH
79916: LD_EXP 143
79920: GREATEREQUAL
79921: IFFALSE 79925
// exit ;
79923: GO 80125
// ComMoveXY ( unit , x , y ) ;
79925: LD_VAR 0 1
79929: PPUSH
79930: LD_VAR 0 2
79934: PPUSH
79935: LD_VAR 0 3
79939: PPUSH
79940: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
79944: LD_INT 35
79946: PPUSH
79947: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
79951: LD_VAR 0 1
79955: PPUSH
79956: LD_VAR 0 2
79960: PPUSH
79961: LD_VAR 0 3
79965: PPUSH
79966: CALL 60162 0 3
79970: NOT
79971: PUSH
79972: LD_VAR 0 1
79976: PPUSH
79977: CALL_OW 314
79981: AND
79982: IFFALSE 79986
// exit ;
79984: GO 80125
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
79986: LD_VAR 0 2
79990: PPUSH
79991: LD_VAR 0 3
79995: PPUSH
79996: CALL_OW 428
80000: PUSH
80001: LD_VAR 0 1
80005: EQUAL
80006: PUSH
80007: LD_VAR 0 1
80011: PPUSH
80012: CALL_OW 314
80016: NOT
80017: AND
80018: IFFALSE 79944
// PlaySoundXY ( x , y , PlantMine ) ;
80020: LD_VAR 0 2
80024: PPUSH
80025: LD_VAR 0 3
80029: PPUSH
80030: LD_STRING PlantMine
80032: PPUSH
80033: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
80037: LD_VAR 0 2
80041: PPUSH
80042: LD_VAR 0 3
80046: PPUSH
80047: LD_VAR 0 1
80051: PPUSH
80052: CALL_OW 255
80056: PPUSH
80057: LD_INT 0
80059: PPUSH
80060: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
80064: LD_ADDR_EXP 142
80068: PUSH
80069: LD_EXP 142
80073: PPUSH
80074: LD_VAR 0 5
80078: PUSH
80079: LD_EXP 142
80083: PUSH
80084: LD_VAR 0 5
80088: ARRAY
80089: PUSH
80090: LD_INT 1
80092: PLUS
80093: PUSH
80094: EMPTY
80095: LIST
80096: LIST
80097: PPUSH
80098: LD_VAR 0 2
80102: PUSH
80103: LD_VAR 0 3
80107: PUSH
80108: EMPTY
80109: LIST
80110: LIST
80111: PPUSH
80112: CALL 29605 0 3
80116: ST_TO_ADDR
// result := true ;
80117: LD_ADDR_VAR 0 4
80121: PUSH
80122: LD_INT 1
80124: ST_TO_ADDR
// end ;
80125: LD_VAR 0 4
80129: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
80130: LD_INT 0
80132: PPUSH
80133: PPUSH
80134: PPUSH
// if not unit in minersList then
80135: LD_VAR 0 1
80139: PUSH
80140: LD_EXP 141
80144: IN
80145: NOT
80146: IFFALSE 80150
// exit ;
80148: GO 80542
// index := GetElementIndex ( minersList , unit ) ;
80150: LD_ADDR_VAR 0 6
80154: PUSH
80155: LD_EXP 141
80159: PPUSH
80160: LD_VAR 0 1
80164: PPUSH
80165: CALL 29390 0 2
80169: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
80170: LD_ADDR_VAR 0 5
80174: PUSH
80175: DOUBLE
80176: LD_EXP 142
80180: PUSH
80181: LD_VAR 0 6
80185: ARRAY
80186: INC
80187: ST_TO_ADDR
80188: LD_INT 1
80190: PUSH
80191: FOR_DOWNTO
80192: IFFALSE 80353
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
80194: LD_EXP 142
80198: PUSH
80199: LD_VAR 0 6
80203: ARRAY
80204: PUSH
80205: LD_VAR 0 5
80209: ARRAY
80210: PUSH
80211: LD_INT 1
80213: ARRAY
80214: PUSH
80215: LD_VAR 0 2
80219: EQUAL
80220: PUSH
80221: LD_EXP 142
80225: PUSH
80226: LD_VAR 0 6
80230: ARRAY
80231: PUSH
80232: LD_VAR 0 5
80236: ARRAY
80237: PUSH
80238: LD_INT 2
80240: ARRAY
80241: PUSH
80242: LD_VAR 0 3
80246: EQUAL
80247: AND
80248: IFFALSE 80351
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80250: LD_EXP 142
80254: PUSH
80255: LD_VAR 0 6
80259: ARRAY
80260: PUSH
80261: LD_VAR 0 5
80265: ARRAY
80266: PUSH
80267: LD_INT 1
80269: ARRAY
80270: PPUSH
80271: LD_EXP 142
80275: PUSH
80276: LD_VAR 0 6
80280: ARRAY
80281: PUSH
80282: LD_VAR 0 5
80286: ARRAY
80287: PUSH
80288: LD_INT 2
80290: ARRAY
80291: PPUSH
80292: LD_VAR 0 1
80296: PPUSH
80297: CALL_OW 255
80301: PPUSH
80302: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80306: LD_ADDR_EXP 142
80310: PUSH
80311: LD_EXP 142
80315: PPUSH
80316: LD_VAR 0 6
80320: PPUSH
80321: LD_EXP 142
80325: PUSH
80326: LD_VAR 0 6
80330: ARRAY
80331: PPUSH
80332: LD_VAR 0 5
80336: PPUSH
80337: CALL_OW 3
80341: PPUSH
80342: CALL_OW 1
80346: ST_TO_ADDR
// exit ;
80347: POP
80348: POP
80349: GO 80542
// end ; end ;
80351: GO 80191
80353: POP
80354: POP
// for i := minerMinesList [ index ] downto 1 do
80355: LD_ADDR_VAR 0 5
80359: PUSH
80360: DOUBLE
80361: LD_EXP 142
80365: PUSH
80366: LD_VAR 0 6
80370: ARRAY
80371: INC
80372: ST_TO_ADDR
80373: LD_INT 1
80375: PUSH
80376: FOR_DOWNTO
80377: IFFALSE 80540
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
80379: LD_EXP 142
80383: PUSH
80384: LD_VAR 0 6
80388: ARRAY
80389: PUSH
80390: LD_VAR 0 5
80394: ARRAY
80395: PUSH
80396: LD_INT 1
80398: ARRAY
80399: PPUSH
80400: LD_EXP 142
80404: PUSH
80405: LD_VAR 0 6
80409: ARRAY
80410: PUSH
80411: LD_VAR 0 5
80415: ARRAY
80416: PUSH
80417: LD_INT 2
80419: ARRAY
80420: PPUSH
80421: LD_VAR 0 2
80425: PPUSH
80426: LD_VAR 0 3
80430: PPUSH
80431: CALL_OW 298
80435: PUSH
80436: LD_INT 6
80438: LESS
80439: IFFALSE 80538
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80441: LD_EXP 142
80445: PUSH
80446: LD_VAR 0 6
80450: ARRAY
80451: PUSH
80452: LD_VAR 0 5
80456: ARRAY
80457: PUSH
80458: LD_INT 1
80460: ARRAY
80461: PPUSH
80462: LD_EXP 142
80466: PUSH
80467: LD_VAR 0 6
80471: ARRAY
80472: PUSH
80473: LD_VAR 0 5
80477: ARRAY
80478: PUSH
80479: LD_INT 2
80481: ARRAY
80482: PPUSH
80483: LD_VAR 0 1
80487: PPUSH
80488: CALL_OW 255
80492: PPUSH
80493: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80497: LD_ADDR_EXP 142
80501: PUSH
80502: LD_EXP 142
80506: PPUSH
80507: LD_VAR 0 6
80511: PPUSH
80512: LD_EXP 142
80516: PUSH
80517: LD_VAR 0 6
80521: ARRAY
80522: PPUSH
80523: LD_VAR 0 5
80527: PPUSH
80528: CALL_OW 3
80532: PPUSH
80533: CALL_OW 1
80537: ST_TO_ADDR
// end ; end ;
80538: GO 80376
80540: POP
80541: POP
// end ;
80542: LD_VAR 0 4
80546: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
80547: LD_INT 0
80549: PPUSH
80550: PPUSH
80551: PPUSH
80552: PPUSH
80553: PPUSH
80554: PPUSH
80555: PPUSH
80556: PPUSH
80557: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
80558: LD_VAR 0 1
80562: PPUSH
80563: CALL_OW 264
80567: PUSH
80568: LD_EXP 65
80572: EQUAL
80573: NOT
80574: PUSH
80575: LD_VAR 0 1
80579: PUSH
80580: LD_EXP 141
80584: IN
80585: NOT
80586: OR
80587: IFFALSE 80591
// exit ;
80589: GO 80913
// index := GetElementIndex ( minersList , unit ) ;
80591: LD_ADDR_VAR 0 6
80595: PUSH
80596: LD_EXP 141
80600: PPUSH
80601: LD_VAR 0 1
80605: PPUSH
80606: CALL 29390 0 2
80610: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
80611: LD_ADDR_VAR 0 8
80615: PUSH
80616: LD_EXP 143
80620: PUSH
80621: LD_EXP 142
80625: PUSH
80626: LD_VAR 0 6
80630: ARRAY
80631: MINUS
80632: ST_TO_ADDR
// if not minesFreeAmount then
80633: LD_VAR 0 8
80637: NOT
80638: IFFALSE 80642
// exit ;
80640: GO 80913
// tmp := [ ] ;
80642: LD_ADDR_VAR 0 7
80646: PUSH
80647: EMPTY
80648: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
80649: LD_ADDR_VAR 0 5
80653: PUSH
80654: DOUBLE
80655: LD_INT 1
80657: DEC
80658: ST_TO_ADDR
80659: LD_VAR 0 8
80663: PUSH
80664: FOR_TO
80665: IFFALSE 80860
// begin _d := rand ( 0 , 5 ) ;
80667: LD_ADDR_VAR 0 11
80671: PUSH
80672: LD_INT 0
80674: PPUSH
80675: LD_INT 5
80677: PPUSH
80678: CALL_OW 12
80682: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
80683: LD_ADDR_VAR 0 12
80687: PUSH
80688: LD_INT 2
80690: PPUSH
80691: LD_INT 6
80693: PPUSH
80694: CALL_OW 12
80698: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
80699: LD_ADDR_VAR 0 9
80703: PUSH
80704: LD_VAR 0 2
80708: PPUSH
80709: LD_VAR 0 11
80713: PPUSH
80714: LD_VAR 0 12
80718: PPUSH
80719: CALL_OW 272
80723: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
80724: LD_ADDR_VAR 0 10
80728: PUSH
80729: LD_VAR 0 3
80733: PPUSH
80734: LD_VAR 0 11
80738: PPUSH
80739: LD_VAR 0 12
80743: PPUSH
80744: CALL_OW 273
80748: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
80749: LD_VAR 0 9
80753: PPUSH
80754: LD_VAR 0 10
80758: PPUSH
80759: CALL_OW 488
80763: PUSH
80764: LD_VAR 0 9
80768: PUSH
80769: LD_VAR 0 10
80773: PUSH
80774: EMPTY
80775: LIST
80776: LIST
80777: PUSH
80778: LD_VAR 0 7
80782: IN
80783: NOT
80784: AND
80785: PUSH
80786: LD_VAR 0 9
80790: PPUSH
80791: LD_VAR 0 10
80795: PPUSH
80796: CALL_OW 458
80800: NOT
80801: AND
80802: IFFALSE 80844
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
80804: LD_ADDR_VAR 0 7
80808: PUSH
80809: LD_VAR 0 7
80813: PPUSH
80814: LD_VAR 0 7
80818: PUSH
80819: LD_INT 1
80821: PLUS
80822: PPUSH
80823: LD_VAR 0 9
80827: PUSH
80828: LD_VAR 0 10
80832: PUSH
80833: EMPTY
80834: LIST
80835: LIST
80836: PPUSH
80837: CALL_OW 1
80841: ST_TO_ADDR
80842: GO 80858
// i := i - 1 ;
80844: LD_ADDR_VAR 0 5
80848: PUSH
80849: LD_VAR 0 5
80853: PUSH
80854: LD_INT 1
80856: MINUS
80857: ST_TO_ADDR
// end ;
80858: GO 80664
80860: POP
80861: POP
// for i in tmp do
80862: LD_ADDR_VAR 0 5
80866: PUSH
80867: LD_VAR 0 7
80871: PUSH
80872: FOR_IN
80873: IFFALSE 80911
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
80875: LD_VAR 0 1
80879: PPUSH
80880: LD_VAR 0 5
80884: PUSH
80885: LD_INT 1
80887: ARRAY
80888: PPUSH
80889: LD_VAR 0 5
80893: PUSH
80894: LD_INT 2
80896: ARRAY
80897: PPUSH
80898: CALL 79853 0 3
80902: NOT
80903: IFFALSE 80909
// exit ;
80905: POP
80906: POP
80907: GO 80913
80909: GO 80872
80911: POP
80912: POP
// end ;
80913: LD_VAR 0 4
80917: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
80918: LD_INT 0
80920: PPUSH
80921: PPUSH
80922: PPUSH
80923: PPUSH
80924: PPUSH
80925: PPUSH
80926: PPUSH
// if not GetClass ( unit ) = class_sniper then
80927: LD_VAR 0 1
80931: PPUSH
80932: CALL_OW 257
80936: PUSH
80937: LD_INT 5
80939: EQUAL
80940: NOT
80941: IFFALSE 80945
// exit ;
80943: GO 81333
// dist := 8 ;
80945: LD_ADDR_VAR 0 5
80949: PUSH
80950: LD_INT 8
80952: ST_TO_ADDR
// viewRange := 12 ;
80953: LD_ADDR_VAR 0 7
80957: PUSH
80958: LD_INT 12
80960: ST_TO_ADDR
// side := GetSide ( unit ) ;
80961: LD_ADDR_VAR 0 6
80965: PUSH
80966: LD_VAR 0 1
80970: PPUSH
80971: CALL_OW 255
80975: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
80976: LD_INT 61
80978: PPUSH
80979: LD_VAR 0 6
80983: PPUSH
80984: CALL_OW 321
80988: PUSH
80989: LD_INT 2
80991: EQUAL
80992: IFFALSE 81002
// viewRange := 16 ;
80994: LD_ADDR_VAR 0 7
80998: PUSH
80999: LD_INT 16
81001: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
81002: LD_VAR 0 1
81006: PPUSH
81007: LD_VAR 0 2
81011: PPUSH
81012: LD_VAR 0 3
81016: PPUSH
81017: CALL_OW 297
81021: PUSH
81022: LD_VAR 0 5
81026: GREATER
81027: IFFALSE 81106
// begin ComMoveXY ( unit , x , y ) ;
81029: LD_VAR 0 1
81033: PPUSH
81034: LD_VAR 0 2
81038: PPUSH
81039: LD_VAR 0 3
81043: PPUSH
81044: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
81048: LD_INT 35
81050: PPUSH
81051: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
81055: LD_VAR 0 1
81059: PPUSH
81060: LD_VAR 0 2
81064: PPUSH
81065: LD_VAR 0 3
81069: PPUSH
81070: CALL 60162 0 3
81074: NOT
81075: IFFALSE 81079
// exit ;
81077: GO 81333
// until GetDistUnitXY ( unit , x , y ) < dist ;
81079: LD_VAR 0 1
81083: PPUSH
81084: LD_VAR 0 2
81088: PPUSH
81089: LD_VAR 0 3
81093: PPUSH
81094: CALL_OW 297
81098: PUSH
81099: LD_VAR 0 5
81103: LESS
81104: IFFALSE 81048
// end ; ComTurnXY ( unit , x , y ) ;
81106: LD_VAR 0 1
81110: PPUSH
81111: LD_VAR 0 2
81115: PPUSH
81116: LD_VAR 0 3
81120: PPUSH
81121: CALL_OW 118
// wait ( 5 ) ;
81125: LD_INT 5
81127: PPUSH
81128: CALL_OW 67
// _d := GetDir ( unit ) ;
81132: LD_ADDR_VAR 0 10
81136: PUSH
81137: LD_VAR 0 1
81141: PPUSH
81142: CALL_OW 254
81146: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
81147: LD_ADDR_VAR 0 8
81151: PUSH
81152: LD_VAR 0 1
81156: PPUSH
81157: CALL_OW 250
81161: PPUSH
81162: LD_VAR 0 10
81166: PPUSH
81167: LD_VAR 0 5
81171: PPUSH
81172: CALL_OW 272
81176: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
81177: LD_ADDR_VAR 0 9
81181: PUSH
81182: LD_VAR 0 1
81186: PPUSH
81187: CALL_OW 251
81191: PPUSH
81192: LD_VAR 0 10
81196: PPUSH
81197: LD_VAR 0 5
81201: PPUSH
81202: CALL_OW 273
81206: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81207: LD_VAR 0 8
81211: PPUSH
81212: LD_VAR 0 9
81216: PPUSH
81217: CALL_OW 488
81221: NOT
81222: IFFALSE 81226
// exit ;
81224: GO 81333
// ComAnimCustom ( unit , 1 ) ;
81226: LD_VAR 0 1
81230: PPUSH
81231: LD_INT 1
81233: PPUSH
81234: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
81238: LD_VAR 0 8
81242: PPUSH
81243: LD_VAR 0 9
81247: PPUSH
81248: LD_VAR 0 6
81252: PPUSH
81253: LD_VAR 0 7
81257: PPUSH
81258: CALL_OW 330
// repeat wait ( 1 ) ;
81262: LD_INT 1
81264: PPUSH
81265: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
81269: LD_VAR 0 1
81273: PPUSH
81274: CALL_OW 316
81278: PUSH
81279: LD_VAR 0 1
81283: PPUSH
81284: CALL_OW 314
81288: OR
81289: PUSH
81290: LD_VAR 0 1
81294: PPUSH
81295: CALL_OW 302
81299: NOT
81300: OR
81301: PUSH
81302: LD_VAR 0 1
81306: PPUSH
81307: CALL_OW 301
81311: OR
81312: IFFALSE 81262
// RemoveSeeing ( _x , _y , side ) ;
81314: LD_VAR 0 8
81318: PPUSH
81319: LD_VAR 0 9
81323: PPUSH
81324: LD_VAR 0 6
81328: PPUSH
81329: CALL_OW 331
// end ; end_of_file
81333: LD_VAR 0 4
81337: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81338: LD_VAR 0 1
81342: PPUSH
81343: LD_VAR 0 2
81347: PPUSH
81348: LD_VAR 0 3
81352: PPUSH
81353: LD_VAR 0 4
81357: PPUSH
81358: LD_VAR 0 5
81362: PPUSH
81363: LD_VAR 0 6
81367: PPUSH
81368: CALL 63988 0 6
// end ;
81372: PPOPN 6
81374: END
