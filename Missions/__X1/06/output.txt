// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 13 0 0
// PrepareArabian ;
   8: CALL 1035 0 0
// end ;
  12: END
// export debug , prefix ; function Init ; begin
  13: LD_INT 0
  15: PPUSH
// debug := true ;
  16: LD_ADDR_EXP 1
  20: PUSH
  21: LD_INT 1
  23: ST_TO_ADDR
// prefix := 05_ ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_STRING 05_
  31: ST_TO_ADDR
// end ; end_of_file
  32: LD_VAR 0 1
  36: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
  37: LD_INT 0
  39: PPUSH
// uc_side := side ;
  40: LD_ADDR_OWVAR 20
  44: PUSH
  45: LD_VAR 0 1
  49: ST_TO_ADDR
// uc_nation := nation ;
  50: LD_ADDR_OWVAR 21
  54: PUSH
  55: LD_VAR 0 2
  59: ST_TO_ADDR
// vc_chassis := chassis ;
  60: LD_ADDR_OWVAR 37
  64: PUSH
  65: LD_VAR 0 3
  69: ST_TO_ADDR
// vc_engine := engine ;
  70: LD_ADDR_OWVAR 39
  74: PUSH
  75: LD_VAR 0 4
  79: ST_TO_ADDR
// vc_control := control ;
  80: LD_ADDR_OWVAR 38
  84: PUSH
  85: LD_VAR 0 5
  89: ST_TO_ADDR
// vc_weapon := weapon ;
  90: LD_ADDR_OWVAR 40
  94: PUSH
  95: LD_VAR 0 6
  99: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 100: LD_ADDR_OWVAR 41
 104: PUSH
 105: LD_VAR 0 7
 109: ST_TO_ADDR
// result := CreateVehicle ;
 110: LD_ADDR_VAR 0 8
 114: PUSH
 115: CALL_OW 45
 119: ST_TO_ADDR
// end ;
 120: LD_VAR 0 8
 124: RET
// export function SayX ( units , ident ) ; var i ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
// result := false ;
 129: LD_ADDR_VAR 0 3
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// if not units then
 137: LD_VAR 0 1
 141: NOT
 142: IFFALSE 146
// exit ;
 144: GO 200
// for i in units do
 146: LD_ADDR_VAR 0 4
 150: PUSH
 151: LD_VAR 0 1
 155: PUSH
 156: FOR_IN
 157: IFFALSE 198
// if IsOk ( i ) then
 159: LD_VAR 0 4
 163: PPUSH
 164: CALL_OW 302
 168: IFFALSE 196
// begin Say ( i , ident ) ;
 170: LD_VAR 0 4
 174: PPUSH
 175: LD_VAR 0 2
 179: PPUSH
 180: CALL_OW 88
// result := i ;
 184: LD_ADDR_VAR 0 3
 188: PUSH
 189: LD_VAR 0 4
 193: ST_TO_ADDR
// break ;
 194: GO 198
// end ;
 196: GO 156
 198: POP
 199: POP
// end ;
 200: LD_VAR 0 3
 204: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 205: LD_INT 0
 207: PPUSH
 208: PPUSH
// InitUc ;
 209: CALL_OW 18
// InitHc ;
 213: CALL_OW 19
// uc_side := 0 ;
 217: LD_ADDR_OWVAR 20
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// uc_nation := 0 ;
 225: LD_ADDR_OWVAR 21
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// for i = 1 to amount do
 233: LD_ADDR_VAR 0 4
 237: PUSH
 238: DOUBLE
 239: LD_INT 1
 241: DEC
 242: ST_TO_ADDR
 243: LD_VAR 0 2
 247: PUSH
 248: FOR_TO
 249: IFFALSE 331
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 251: LD_ADDR_OWVAR 29
 255: PUSH
 256: LD_INT 9
 258: PPUSH
 259: LD_INT 12
 261: PPUSH
 262: CALL_OW 12
 266: PUSH
 267: LD_INT 9
 269: PPUSH
 270: LD_INT 12
 272: PPUSH
 273: CALL_OW 12
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 282: LD_ADDR_OWVAR 35
 286: PUSH
 287: LD_INT 1
 289: NEG
 290: PPUSH
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 12
 298: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 299: LD_INT 0
 301: PPUSH
 302: LD_INT 12
 304: PPUSH
 305: LD_INT 1
 307: PPUSH
 308: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 312: CALL_OW 44
 316: PPUSH
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 49
// end ;
 329: GO 248
 331: POP
 332: POP
// InitHc ;
 333: CALL_OW 19
// end ;
 337: LD_VAR 0 3
 341: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 342: LD_INT 0
 344: PPUSH
 345: PPUSH
// uc_side := 0 ;
 346: LD_ADDR_OWVAR 20
 350: PUSH
 351: LD_INT 0
 353: ST_TO_ADDR
// uc_nation := 0 ;
 354: LD_ADDR_OWVAR 21
 358: PUSH
 359: LD_INT 0
 361: ST_TO_ADDR
// for i := 1 to 3 do
 362: LD_ADDR_VAR 0 4
 366: PUSH
 367: DOUBLE
 368: LD_INT 1
 370: DEC
 371: ST_TO_ADDR
 372: LD_INT 3
 374: PUSH
 375: FOR_TO
 376: IFFALSE 413
// begin hc_class := 21 ;
 378: LD_ADDR_OWVAR 28
 382: PUSH
 383: LD_INT 21
 385: ST_TO_ADDR
// hc_gallery :=  ;
 386: LD_ADDR_OWVAR 33
 390: PUSH
 391: LD_STRING 
 393: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 394: CALL_OW 44
 398: PPUSH
 399: LD_VAR 0 1
 403: PPUSH
 404: LD_INT 0
 406: PPUSH
 407: CALL_OW 49
// end ;
 411: GO 375
 413: POP
 414: POP
// for i := 1 to 3 do
 415: LD_ADDR_VAR 0 4
 419: PUSH
 420: DOUBLE
 421: LD_INT 1
 423: DEC
 424: ST_TO_ADDR
 425: LD_INT 3
 427: PUSH
 428: FOR_TO
 429: IFFALSE 466
// begin hc_class := 18 ;
 431: LD_ADDR_OWVAR 28
 435: PUSH
 436: LD_INT 18
 438: ST_TO_ADDR
// hc_gallery :=  ;
 439: LD_ADDR_OWVAR 33
 443: PUSH
 444: LD_STRING 
 446: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 447: CALL_OW 44
 451: PPUSH
 452: LD_VAR 0 1
 456: PPUSH
 457: LD_INT 0
 459: PPUSH
 460: CALL_OW 49
// end ;
 464: GO 428
 466: POP
 467: POP
// for i := 1 to 3 do
 468: LD_ADDR_VAR 0 4
 472: PUSH
 473: DOUBLE
 474: LD_INT 1
 476: DEC
 477: ST_TO_ADDR
 478: LD_INT 3
 480: PUSH
 481: FOR_TO
 482: IFFALSE 519
// begin hc_class := 13 ;
 484: LD_ADDR_OWVAR 28
 488: PUSH
 489: LD_INT 13
 491: ST_TO_ADDR
// hc_gallery :=  ;
 492: LD_ADDR_OWVAR 33
 496: PUSH
 497: LD_STRING 
 499: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 500: CALL_OW 44
 504: PPUSH
 505: LD_VAR 0 1
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// end ;
 517: GO 481
 519: POP
 520: POP
// for i := 1 to 4 do
 521: LD_ADDR_VAR 0 4
 525: PUSH
 526: DOUBLE
 527: LD_INT 1
 529: DEC
 530: ST_TO_ADDR
 531: LD_INT 4
 533: PUSH
 534: FOR_TO
 535: IFFALSE 572
// begin hc_class := class_frog ;
 537: LD_ADDR_OWVAR 28
 541: PUSH
 542: LD_INT 19
 544: ST_TO_ADDR
// hc_gallery :=  ;
 545: LD_ADDR_OWVAR 33
 549: PUSH
 550: LD_STRING 
 552: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 553: CALL_OW 44
 557: PPUSH
 558: LD_VAR 0 2
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL_OW 49
// end ;
 570: GO 534
 572: POP
 573: POP
// end ;
 574: LD_VAR 0 3
 578: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
 583: PPUSH
// if not observer or not unit then
 584: LD_VAR 0 1
 588: NOT
 589: PUSH
 590: LD_VAR 0 2
 594: NOT
 595: OR
 596: IFFALSE 600
// exit ;
 598: GO 648
// if not See ( GetSide ( observer ) , unit ) then
 600: LD_VAR 0 1
 604: PPUSH
 605: CALL_OW 255
 609: PPUSH
 610: LD_VAR 0 2
 614: PPUSH
 615: CALL_OW 292
 619: NOT
 620: IFFALSE 624
// exit ;
 622: GO 648
// result := GetDistUnits ( observer , unit ) < 12 ;
 624: LD_ADDR_VAR 0 3
 628: PUSH
 629: LD_VAR 0 1
 633: PPUSH
 634: LD_VAR 0 2
 638: PPUSH
 639: CALL_OW 296
 643: PUSH
 644: LD_INT 12
 646: LESS
 647: ST_TO_ADDR
// end ;
 648: LD_VAR 0 3
 652: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 653: LD_INT 0
 655: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 656: LD_VAR 0 2
 660: PUSH
 661: LD_INT 1
 663: ARRAY
 664: PPUSH
 665: LD_VAR 0 2
 669: PUSH
 670: LD_INT 2
 672: ARRAY
 673: PPUSH
 674: CALL_OW 488
 678: PUSH
 679: LD_VAR 0 2
 683: PUSH
 684: LD_INT 1
 686: ARRAY
 687: PPUSH
 688: LD_VAR 0 2
 692: PUSH
 693: LD_INT 2
 695: ARRAY
 696: PPUSH
 697: CALL_OW 428
 701: PUSH
 702: LD_INT 0
 704: EQUAL
 705: AND
 706: IFFALSE 740
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 708: LD_VAR 0 1
 712: PPUSH
 713: LD_VAR 0 2
 717: PUSH
 718: LD_INT 1
 720: ARRAY
 721: PPUSH
 722: LD_VAR 0 2
 726: PUSH
 727: LD_INT 2
 729: ARRAY
 730: PPUSH
 731: LD_VAR 0 3
 735: PPUSH
 736: CALL_OW 48
// end ;
 740: LD_VAR 0 4
 744: RET
// export function ReverseArray ( array ) ; var i ; begin
 745: LD_INT 0
 747: PPUSH
 748: PPUSH
// if not array then
 749: LD_VAR 0 1
 753: NOT
 754: IFFALSE 758
// exit ;
 756: GO 816
// result := [ ] ;
 758: LD_ADDR_VAR 0 2
 762: PUSH
 763: EMPTY
 764: ST_TO_ADDR
// for i := 1 to array do
 765: LD_ADDR_VAR 0 3
 769: PUSH
 770: DOUBLE
 771: LD_INT 1
 773: DEC
 774: ST_TO_ADDR
 775: LD_VAR 0 1
 779: PUSH
 780: FOR_TO
 781: IFFALSE 814
// result := Insert ( result , 1 , array [ i ] ) ;
 783: LD_ADDR_VAR 0 2
 787: PUSH
 788: LD_VAR 0 2
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: LD_VAR 0 1
 800: PUSH
 801: LD_VAR 0 3
 805: ARRAY
 806: PPUSH
 807: CALL_OW 2
 811: ST_TO_ADDR
 812: GO 780
 814: POP
 815: POP
// end ;
 816: LD_VAR 0 2
 820: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 821: LD_INT 0
 823: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 824: LD_VAR 0 1
 828: PPUSH
 829: LD_VAR 0 2
 833: PPUSH
 834: LD_VAR 0 3
 838: PPUSH
 839: LD_VAR 0 4
 843: PPUSH
 844: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 848: LD_VAR 0 1
 852: PPUSH
 853: LD_VAR 0 2
 857: PPUSH
 858: LD_VAR 0 3
 862: PPUSH
 863: CALL_OW 331
// end ;
 867: LD_VAR 0 5
 871: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
 872: LD_INT 0
 874: PPUSH
// if not units then
 875: LD_VAR 0 1
 879: NOT
 880: IFFALSE 884
// exit ;
 882: GO 967
// result := true ;
 884: LD_ADDR_VAR 0 4
 888: PUSH
 889: LD_INT 1
 891: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
 892: LD_VAR 0 1
 896: PPUSH
 897: LD_INT 26
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PPUSH
 907: CALL_OW 72
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 2
 920: PPUSH
 921: CALL_OW 88
 925: NOT
 926: IFFALSE 967
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
 928: LD_ADDR_VAR 0 4
 932: PUSH
 933: LD_VAR 0 1
 937: PPUSH
 938: LD_INT 26
 940: PUSH
 941: LD_INT 2
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PPUSH
 948: CALL_OW 72
 952: PUSH
 953: LD_INT 1
 955: ARRAY
 956: PPUSH
 957: LD_VAR 0 3
 961: PPUSH
 962: CALL_OW 88
 966: ST_TO_ADDR
// end ;
 967: LD_VAR 0 4
 971: RET
// export function SeeGroup ( side , group ) ; var i ; begin
 972: LD_INT 0
 974: PPUSH
 975: PPUSH
// if not group then
 976: LD_VAR 0 2
 980: NOT
 981: IFFALSE 985
// exit ;
 983: GO 1030
// for i in group do
 985: LD_ADDR_VAR 0 4
 989: PUSH
 990: LD_VAR 0 2
 994: PUSH
 995: FOR_IN
 996: IFFALSE 1028
// if See ( side , i ) then
 998: LD_VAR 0 1
1002: PPUSH
1003: LD_VAR 0 4
1007: PPUSH
1008: CALL_OW 292
1012: IFFALSE 1026
// begin result := true ;
1014: LD_ADDR_VAR 0 3
1018: PUSH
1019: LD_INT 1
1021: ST_TO_ADDR
// exit ;
1022: POP
1023: POP
1024: GO 1030
// end ;
1026: GO 995
1028: POP
1029: POP
// end ; end_of_file
1030: LD_VAR 0 3
1034: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeApes ; export function PrepareArabian ; var i ; begin
1035: LD_INT 0
1037: PPUSH
1038: PPUSH
// uc_side := 2 ;
1039: LD_ADDR_OWVAR 20
1043: PUSH
1044: LD_INT 2
1046: ST_TO_ADDR
// uc_nation := 2 ;
1047: LD_ADDR_OWVAR 21
1051: PUSH
1052: LD_INT 2
1054: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1055: LD_ADDR_EXP 3
1059: PUSH
1060: LD_STRING Heike
1062: PPUSH
1063: LD_EXP 1
1067: NOT
1068: PPUSH
1069: LD_EXP 2
1073: PPUSH
1074: CALL 1391 0 3
1078: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1079: LD_ADDR_EXP 6
1083: PUSH
1084: LD_STRING Ibrahim
1086: PPUSH
1087: LD_EXP 1
1091: NOT
1092: PPUSH
1093: LD_EXP 2
1097: PPUSH
1098: CALL 1391 0 3
1102: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1103: LD_ADDR_EXP 4
1107: PUSH
1108: LD_STRING Givi
1110: PPUSH
1111: LD_EXP 1
1115: NOT
1116: PPUSH
1117: LD_EXP 2
1121: PPUSH
1122: CALL 1391 0 3
1126: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1127: LD_ADDR_EXP 7
1131: PUSH
1132: LD_STRING Kamil
1134: PPUSH
1135: LD_EXP 1
1139: NOT
1140: PPUSH
1141: LD_EXP 2
1145: PPUSH
1146: CALL 1391 0 3
1150: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1151: LD_ADDR_EXP 8
1155: PUSH
1156: LD_STRING Kaia
1158: PPUSH
1159: LD_EXP 1
1163: NOT
1164: PPUSH
1165: LD_EXP 2
1169: PPUSH
1170: CALL 1391 0 3
1174: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1175: LD_ADDR_EXP 9
1179: PUSH
1180: LD_STRING Sophia
1182: PPUSH
1183: LD_EXP 1
1187: NOT
1188: PPUSH
1189: LD_EXP 2
1193: PPUSH
1194: CALL 1391 0 3
1198: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1199: LD_ADDR_EXP 10
1203: PUSH
1204: LD_STRING Markov
1206: PPUSH
1207: LD_EXP 1
1211: NOT
1212: PPUSH
1213: LD_EXP 2
1217: PPUSH
1218: CALL 1391 0 3
1222: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1223: LD_ADDR_EXP 15
1227: PUSH
1228: LD_STRING Aviradze
1230: PPUSH
1231: LD_EXP 1
1235: NOT
1236: PPUSH
1237: LD_EXP 2
1241: PPUSH
1242: CALL 1391 0 3
1246: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1247: LD_ADDR_EXP 14
1251: PUSH
1252: LD_STRING Kurt
1254: PPUSH
1255: LD_EXP 1
1259: NOT
1260: PPUSH
1261: LD_EXP 2
1265: PPUSH
1266: CALL 1391 0 3
1270: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1271: LD_ADDR_EXP 5
1275: PUSH
1276: LD_STRING Mike
1278: PPUSH
1279: LD_EXP 1
1283: NOT
1284: PPUSH
1285: LD_EXP 2
1289: PPUSH
1290: CALL 1391 0 3
1294: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1295: LD_ADDR_EXP 12
1299: PUSH
1300: LD_STRING Olaf
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: LD_STRING 
1308: PPUSH
1309: CALL 1391 0 3
1313: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
1314: LD_ADDR_EXP 16
1318: PUSH
1319: LD_STRING 05_others
1321: PPUSH
1322: CALL_OW 31
1326: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
1327: LD_ADDR_EXP 17
1331: PUSH
1332: LD_STRING 05_apes
1334: PPUSH
1335: CALL_OW 31
1339: ST_TO_ADDR
// uc_side := 5 ;
1340: LD_ADDR_OWVAR 20
1344: PUSH
1345: LD_INT 5
1347: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1348: LD_ADDR_EXP 11
1352: PUSH
1353: LD_STRING Abdul
1355: PPUSH
1356: LD_INT 0
1358: PPUSH
1359: LD_STRING 
1361: PPUSH
1362: CALL 1391 0 3
1366: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1367: LD_ADDR_EXP 13
1371: PUSH
1372: LD_STRING Omar
1374: PPUSH
1375: LD_INT 0
1377: PPUSH
1378: LD_STRING 
1380: PPUSH
1381: CALL 1391 0 3
1385: ST_TO_ADDR
// end ; end_of_file
1386: LD_VAR 0 1
1390: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1391: LD_INT 0
1393: PPUSH
1394: PPUSH
// if exist_mode then
1395: LD_VAR 0 2
1399: IFFALSE 1424
// unit := CreateCharacter ( prefix & ident ) else
1401: LD_ADDR_VAR 0 5
1405: PUSH
1406: LD_VAR 0 3
1410: PUSH
1411: LD_VAR 0 1
1415: STR
1416: PPUSH
1417: CALL_OW 34
1421: ST_TO_ADDR
1422: GO 1439
// unit := NewCharacter ( ident ) ;
1424: LD_ADDR_VAR 0 5
1428: PUSH
1429: LD_VAR 0 1
1433: PPUSH
1434: CALL_OW 25
1438: ST_TO_ADDR
// result := unit ;
1439: LD_ADDR_VAR 0 4
1443: PUSH
1444: LD_VAR 0 5
1448: ST_TO_ADDR
// end ;
1449: LD_VAR 0 4
1453: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
// if not side or not nation then
1458: LD_VAR 0 1
1462: NOT
1463: PUSH
1464: LD_VAR 0 2
1468: NOT
1469: OR
1470: IFFALSE 1474
// exit ;
1472: GO 2238
// case nation of nation_american :
1474: LD_VAR 0 2
1478: PUSH
1479: LD_INT 1
1481: DOUBLE
1482: EQUAL
1483: IFTRUE 1487
1485: GO 1701
1487: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1488: LD_ADDR_VAR 0 4
1492: PUSH
1493: LD_INT 35
1495: PUSH
1496: LD_INT 45
1498: PUSH
1499: LD_INT 46
1501: PUSH
1502: LD_INT 47
1504: PUSH
1505: LD_INT 82
1507: PUSH
1508: LD_INT 83
1510: PUSH
1511: LD_INT 84
1513: PUSH
1514: LD_INT 85
1516: PUSH
1517: LD_INT 86
1519: PUSH
1520: LD_INT 1
1522: PUSH
1523: LD_INT 2
1525: PUSH
1526: LD_INT 6
1528: PUSH
1529: LD_INT 15
1531: PUSH
1532: LD_INT 16
1534: PUSH
1535: LD_INT 7
1537: PUSH
1538: LD_INT 12
1540: PUSH
1541: LD_INT 13
1543: PUSH
1544: LD_INT 10
1546: PUSH
1547: LD_INT 14
1549: PUSH
1550: LD_INT 20
1552: PUSH
1553: LD_INT 21
1555: PUSH
1556: LD_INT 22
1558: PUSH
1559: LD_INT 25
1561: PUSH
1562: LD_INT 32
1564: PUSH
1565: LD_INT 27
1567: PUSH
1568: LD_INT 36
1570: PUSH
1571: LD_INT 69
1573: PUSH
1574: LD_INT 39
1576: PUSH
1577: LD_INT 34
1579: PUSH
1580: LD_INT 40
1582: PUSH
1583: LD_INT 48
1585: PUSH
1586: LD_INT 49
1588: PUSH
1589: LD_INT 50
1591: PUSH
1592: LD_INT 51
1594: PUSH
1595: LD_INT 52
1597: PUSH
1598: LD_INT 53
1600: PUSH
1601: LD_INT 54
1603: PUSH
1604: LD_INT 55
1606: PUSH
1607: LD_INT 56
1609: PUSH
1610: LD_INT 57
1612: PUSH
1613: LD_INT 58
1615: PUSH
1616: LD_INT 59
1618: PUSH
1619: LD_INT 60
1621: PUSH
1622: LD_INT 61
1624: PUSH
1625: LD_INT 62
1627: PUSH
1628: LD_INT 80
1630: PUSH
1631: LD_INT 82
1633: PUSH
1634: LD_INT 83
1636: PUSH
1637: LD_INT 84
1639: PUSH
1640: LD_INT 85
1642: PUSH
1643: LD_INT 86
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: ST_TO_ADDR
1699: GO 2162
1701: LD_INT 2
1703: DOUBLE
1704: EQUAL
1705: IFTRUE 1709
1707: GO 1931
1709: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1710: LD_ADDR_VAR 0 4
1714: PUSH
1715: LD_INT 35
1717: PUSH
1718: LD_INT 45
1720: PUSH
1721: LD_INT 46
1723: PUSH
1724: LD_INT 47
1726: PUSH
1727: LD_INT 82
1729: PUSH
1730: LD_INT 83
1732: PUSH
1733: LD_INT 84
1735: PUSH
1736: LD_INT 85
1738: PUSH
1739: LD_INT 87
1741: PUSH
1742: LD_INT 70
1744: PUSH
1745: LD_INT 1
1747: PUSH
1748: LD_INT 11
1750: PUSH
1751: LD_INT 3
1753: PUSH
1754: LD_INT 4
1756: PUSH
1757: LD_INT 5
1759: PUSH
1760: LD_INT 6
1762: PUSH
1763: LD_INT 15
1765: PUSH
1766: LD_INT 18
1768: PUSH
1769: LD_INT 7
1771: PUSH
1772: LD_INT 17
1774: PUSH
1775: LD_INT 8
1777: PUSH
1778: LD_INT 20
1780: PUSH
1781: LD_INT 21
1783: PUSH
1784: LD_INT 22
1786: PUSH
1787: LD_INT 72
1789: PUSH
1790: LD_INT 26
1792: PUSH
1793: LD_INT 69
1795: PUSH
1796: LD_INT 39
1798: PUSH
1799: LD_INT 40
1801: PUSH
1802: LD_INT 41
1804: PUSH
1805: LD_INT 42
1807: PUSH
1808: LD_INT 43
1810: PUSH
1811: LD_INT 48
1813: PUSH
1814: LD_INT 49
1816: PUSH
1817: LD_INT 50
1819: PUSH
1820: LD_INT 51
1822: PUSH
1823: LD_INT 52
1825: PUSH
1826: LD_INT 53
1828: PUSH
1829: LD_INT 54
1831: PUSH
1832: LD_INT 55
1834: PUSH
1835: LD_INT 56
1837: PUSH
1838: LD_INT 60
1840: PUSH
1841: LD_INT 61
1843: PUSH
1844: LD_INT 62
1846: PUSH
1847: LD_INT 66
1849: PUSH
1850: LD_INT 67
1852: PUSH
1853: LD_INT 68
1855: PUSH
1856: LD_INT 81
1858: PUSH
1859: LD_INT 82
1861: PUSH
1862: LD_INT 83
1864: PUSH
1865: LD_INT 84
1867: PUSH
1868: LD_INT 85
1870: PUSH
1871: LD_INT 87
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: ST_TO_ADDR
1929: GO 2162
1931: LD_INT 3
1933: DOUBLE
1934: EQUAL
1935: IFTRUE 1939
1937: GO 2161
1939: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1940: LD_ADDR_VAR 0 4
1944: PUSH
1945: LD_INT 46
1947: PUSH
1948: LD_INT 47
1950: PUSH
1951: LD_INT 1
1953: PUSH
1954: LD_INT 2
1956: PUSH
1957: LD_INT 82
1959: PUSH
1960: LD_INT 83
1962: PUSH
1963: LD_INT 84
1965: PUSH
1966: LD_INT 85
1968: PUSH
1969: LD_INT 86
1971: PUSH
1972: LD_INT 11
1974: PUSH
1975: LD_INT 9
1977: PUSH
1978: LD_INT 20
1980: PUSH
1981: LD_INT 19
1983: PUSH
1984: LD_INT 21
1986: PUSH
1987: LD_INT 24
1989: PUSH
1990: LD_INT 22
1992: PUSH
1993: LD_INT 25
1995: PUSH
1996: LD_INT 28
1998: PUSH
1999: LD_INT 29
2001: PUSH
2002: LD_INT 30
2004: PUSH
2005: LD_INT 31
2007: PUSH
2008: LD_INT 37
2010: PUSH
2011: LD_INT 38
2013: PUSH
2014: LD_INT 32
2016: PUSH
2017: LD_INT 27
2019: PUSH
2020: LD_INT 33
2022: PUSH
2023: LD_INT 69
2025: PUSH
2026: LD_INT 39
2028: PUSH
2029: LD_INT 34
2031: PUSH
2032: LD_INT 40
2034: PUSH
2035: LD_INT 71
2037: PUSH
2038: LD_INT 23
2040: PUSH
2041: LD_INT 44
2043: PUSH
2044: LD_INT 48
2046: PUSH
2047: LD_INT 49
2049: PUSH
2050: LD_INT 50
2052: PUSH
2053: LD_INT 51
2055: PUSH
2056: LD_INT 52
2058: PUSH
2059: LD_INT 53
2061: PUSH
2062: LD_INT 54
2064: PUSH
2065: LD_INT 55
2067: PUSH
2068: LD_INT 56
2070: PUSH
2071: LD_INT 57
2073: PUSH
2074: LD_INT 58
2076: PUSH
2077: LD_INT 59
2079: PUSH
2080: LD_INT 63
2082: PUSH
2083: LD_INT 64
2085: PUSH
2086: LD_INT 65
2088: PUSH
2089: LD_INT 82
2091: PUSH
2092: LD_INT 83
2094: PUSH
2095: LD_INT 84
2097: PUSH
2098: LD_INT 85
2100: PUSH
2101: LD_INT 86
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: ST_TO_ADDR
2159: GO 2162
2161: POP
// if state > - 1 and state < 3 then
2162: LD_VAR 0 3
2166: PUSH
2167: LD_INT 1
2169: NEG
2170: GREATER
2171: PUSH
2172: LD_VAR 0 3
2176: PUSH
2177: LD_INT 3
2179: LESS
2180: AND
2181: IFFALSE 2238
// for i in result do
2183: LD_ADDR_VAR 0 5
2187: PUSH
2188: LD_VAR 0 4
2192: PUSH
2193: FOR_IN
2194: IFFALSE 2236
// if GetTech ( i , side ) <> state then
2196: LD_VAR 0 5
2200: PPUSH
2201: LD_VAR 0 1
2205: PPUSH
2206: CALL_OW 321
2210: PUSH
2211: LD_VAR 0 3
2215: NONEQUAL
2216: IFFALSE 2234
// result := result diff i ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: LD_VAR 0 4
2227: PUSH
2228: LD_VAR 0 5
2232: DIFF
2233: ST_TO_ADDR
2234: GO 2193
2236: POP
2237: POP
// end ;
2238: LD_VAR 0 4
2242: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2243: LD_INT 0
2245: PPUSH
2246: PPUSH
2247: PPUSH
// result := true ;
2248: LD_ADDR_VAR 0 3
2252: PUSH
2253: LD_INT 1
2255: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2256: LD_ADDR_VAR 0 5
2260: PUSH
2261: LD_VAR 0 2
2265: PPUSH
2266: CALL_OW 480
2270: ST_TO_ADDR
// if not tmp then
2271: LD_VAR 0 5
2275: NOT
2276: IFFALSE 2280
// exit ;
2278: GO 2329
// for i in tmp do
2280: LD_ADDR_VAR 0 4
2284: PUSH
2285: LD_VAR 0 5
2289: PUSH
2290: FOR_IN
2291: IFFALSE 2327
// if GetTech ( i , side ) <> state_researched then
2293: LD_VAR 0 4
2297: PPUSH
2298: LD_VAR 0 1
2302: PPUSH
2303: CALL_OW 321
2307: PUSH
2308: LD_INT 2
2310: NONEQUAL
2311: IFFALSE 2325
// begin result := false ;
2313: LD_ADDR_VAR 0 3
2317: PUSH
2318: LD_INT 0
2320: ST_TO_ADDR
// exit ;
2321: POP
2322: POP
2323: GO 2329
// end ;
2325: GO 2290
2327: POP
2328: POP
// end ;
2329: LD_VAR 0 3
2333: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2334: LD_INT 0
2336: PPUSH
2337: PPUSH
2338: PPUSH
2339: PPUSH
2340: PPUSH
2341: PPUSH
2342: PPUSH
2343: PPUSH
2344: PPUSH
2345: PPUSH
2346: PPUSH
2347: PPUSH
2348: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2349: LD_VAR 0 1
2353: NOT
2354: PUSH
2355: LD_VAR 0 1
2359: PPUSH
2360: CALL_OW 257
2364: PUSH
2365: LD_INT 9
2367: NONEQUAL
2368: OR
2369: IFFALSE 2373
// exit ;
2371: GO 2946
// side := GetSide ( unit ) ;
2373: LD_ADDR_VAR 0 9
2377: PUSH
2378: LD_VAR 0 1
2382: PPUSH
2383: CALL_OW 255
2387: ST_TO_ADDR
// tech_space := tech_spacanom ;
2388: LD_ADDR_VAR 0 12
2392: PUSH
2393: LD_INT 29
2395: ST_TO_ADDR
// tech_time := tech_taurad ;
2396: LD_ADDR_VAR 0 13
2400: PUSH
2401: LD_INT 28
2403: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2404: LD_ADDR_VAR 0 11
2408: PUSH
2409: LD_VAR 0 1
2413: PPUSH
2414: CALL_OW 310
2418: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2419: LD_VAR 0 11
2423: PPUSH
2424: CALL_OW 247
2428: PUSH
2429: LD_INT 2
2431: EQUAL
2432: IFFALSE 2436
// exit ;
2434: GO 2946
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2436: LD_ADDR_VAR 0 8
2440: PUSH
2441: LD_INT 81
2443: PUSH
2444: LD_VAR 0 9
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: PUSH
2453: LD_INT 3
2455: PUSH
2456: LD_INT 21
2458: PUSH
2459: LD_INT 3
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: PPUSH
2474: CALL_OW 69
2478: ST_TO_ADDR
// if not tmp then
2479: LD_VAR 0 8
2483: NOT
2484: IFFALSE 2488
// exit ;
2486: GO 2946
// if in_unit then
2488: LD_VAR 0 11
2492: IFFALSE 2516
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2494: LD_ADDR_VAR 0 10
2498: PUSH
2499: LD_VAR 0 8
2503: PPUSH
2504: LD_VAR 0 11
2508: PPUSH
2509: CALL_OW 74
2513: ST_TO_ADDR
2514: GO 2536
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2516: LD_ADDR_VAR 0 10
2520: PUSH
2521: LD_VAR 0 8
2525: PPUSH
2526: LD_VAR 0 1
2530: PPUSH
2531: CALL_OW 74
2535: ST_TO_ADDR
// if not enemy then
2536: LD_VAR 0 10
2540: NOT
2541: IFFALSE 2545
// exit ;
2543: GO 2946
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2545: LD_VAR 0 11
2549: PUSH
2550: LD_VAR 0 11
2554: PPUSH
2555: LD_VAR 0 10
2559: PPUSH
2560: CALL_OW 296
2564: PUSH
2565: LD_INT 13
2567: GREATER
2568: AND
2569: PUSH
2570: LD_VAR 0 1
2574: PPUSH
2575: LD_VAR 0 10
2579: PPUSH
2580: CALL_OW 296
2584: PUSH
2585: LD_INT 12
2587: GREATER
2588: OR
2589: IFFALSE 2593
// exit ;
2591: GO 2946
// missile := [ 1 ] ;
2593: LD_ADDR_VAR 0 14
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2604: LD_VAR 0 9
2608: PPUSH
2609: LD_VAR 0 12
2613: PPUSH
2614: CALL_OW 325
2618: IFFALSE 2647
// missile := Insert ( missile , missile + 1 , 2 ) ;
2620: LD_ADDR_VAR 0 14
2624: PUSH
2625: LD_VAR 0 14
2629: PPUSH
2630: LD_VAR 0 14
2634: PUSH
2635: LD_INT 1
2637: PLUS
2638: PPUSH
2639: LD_INT 2
2641: PPUSH
2642: CALL_OW 2
2646: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2647: LD_VAR 0 9
2651: PPUSH
2652: LD_VAR 0 13
2656: PPUSH
2657: CALL_OW 325
2661: PUSH
2662: LD_VAR 0 10
2666: PPUSH
2667: CALL_OW 255
2671: PPUSH
2672: LD_VAR 0 13
2676: PPUSH
2677: CALL_OW 325
2681: NOT
2682: AND
2683: IFFALSE 2712
// missile := Insert ( missile , missile + 1 , 3 ) ;
2685: LD_ADDR_VAR 0 14
2689: PUSH
2690: LD_VAR 0 14
2694: PPUSH
2695: LD_VAR 0 14
2699: PUSH
2700: LD_INT 1
2702: PLUS
2703: PPUSH
2704: LD_INT 3
2706: PPUSH
2707: CALL_OW 2
2711: ST_TO_ADDR
// if missile < 2 then
2712: LD_VAR 0 14
2716: PUSH
2717: LD_INT 2
2719: LESS
2720: IFFALSE 2724
// exit ;
2722: GO 2946
// x := GetX ( enemy ) ;
2724: LD_ADDR_VAR 0 4
2728: PUSH
2729: LD_VAR 0 10
2733: PPUSH
2734: CALL_OW 250
2738: ST_TO_ADDR
// y := GetY ( enemy ) ;
2739: LD_ADDR_VAR 0 5
2743: PUSH
2744: LD_VAR 0 10
2748: PPUSH
2749: CALL_OW 251
2753: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2754: LD_ADDR_VAR 0 6
2758: PUSH
2759: LD_VAR 0 4
2763: PUSH
2764: LD_INT 1
2766: NEG
2767: PPUSH
2768: LD_INT 1
2770: PPUSH
2771: CALL_OW 12
2775: PLUS
2776: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2777: LD_ADDR_VAR 0 7
2781: PUSH
2782: LD_VAR 0 5
2786: PUSH
2787: LD_INT 1
2789: NEG
2790: PPUSH
2791: LD_INT 1
2793: PPUSH
2794: CALL_OW 12
2798: PLUS
2799: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2800: LD_VAR 0 6
2804: PPUSH
2805: LD_VAR 0 7
2809: PPUSH
2810: CALL_OW 488
2814: NOT
2815: IFFALSE 2837
// begin _x := x ;
2817: LD_ADDR_VAR 0 6
2821: PUSH
2822: LD_VAR 0 4
2826: ST_TO_ADDR
// _y := y ;
2827: LD_ADDR_VAR 0 7
2831: PUSH
2832: LD_VAR 0 5
2836: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2837: LD_ADDR_VAR 0 3
2841: PUSH
2842: LD_INT 1
2844: PPUSH
2845: LD_VAR 0 14
2849: PPUSH
2850: CALL_OW 12
2854: ST_TO_ADDR
// case i of 1 :
2855: LD_VAR 0 3
2859: PUSH
2860: LD_INT 1
2862: DOUBLE
2863: EQUAL
2864: IFTRUE 2868
2866: GO 2885
2868: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2869: LD_VAR 0 1
2873: PPUSH
2874: LD_VAR 0 10
2878: PPUSH
2879: CALL_OW 115
2883: GO 2946
2885: LD_INT 2
2887: DOUBLE
2888: EQUAL
2889: IFTRUE 2893
2891: GO 2915
2893: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2894: LD_VAR 0 1
2898: PPUSH
2899: LD_VAR 0 6
2903: PPUSH
2904: LD_VAR 0 7
2908: PPUSH
2909: CALL_OW 153
2913: GO 2946
2915: LD_INT 3
2917: DOUBLE
2918: EQUAL
2919: IFTRUE 2923
2921: GO 2945
2923: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2924: LD_VAR 0 1
2928: PPUSH
2929: LD_VAR 0 6
2933: PPUSH
2934: LD_VAR 0 7
2938: PPUSH
2939: CALL_OW 154
2943: GO 2946
2945: POP
// end ;
2946: LD_VAR 0 2
2950: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2951: LD_INT 0
2953: PPUSH
2954: PPUSH
2955: PPUSH
2956: PPUSH
2957: PPUSH
2958: PPUSH
// if not unit or not building then
2959: LD_VAR 0 1
2963: NOT
2964: PUSH
2965: LD_VAR 0 2
2969: NOT
2970: OR
2971: IFFALSE 2975
// exit ;
2973: GO 3133
// x := GetX ( building ) ;
2975: LD_ADDR_VAR 0 5
2979: PUSH
2980: LD_VAR 0 2
2984: PPUSH
2985: CALL_OW 250
2989: ST_TO_ADDR
// y := GetY ( building ) ;
2990: LD_ADDR_VAR 0 6
2994: PUSH
2995: LD_VAR 0 2
2999: PPUSH
3000: CALL_OW 251
3004: ST_TO_ADDR
// for i = 0 to 5 do
3005: LD_ADDR_VAR 0 4
3009: PUSH
3010: DOUBLE
3011: LD_INT 0
3013: DEC
3014: ST_TO_ADDR
3015: LD_INT 5
3017: PUSH
3018: FOR_TO
3019: IFFALSE 3131
// begin _x := ShiftX ( x , i , 3 ) ;
3021: LD_ADDR_VAR 0 7
3025: PUSH
3026: LD_VAR 0 5
3030: PPUSH
3031: LD_VAR 0 4
3035: PPUSH
3036: LD_INT 3
3038: PPUSH
3039: CALL_OW 272
3043: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3044: LD_ADDR_VAR 0 8
3048: PUSH
3049: LD_VAR 0 6
3053: PPUSH
3054: LD_VAR 0 4
3058: PPUSH
3059: LD_INT 3
3061: PPUSH
3062: CALL_OW 273
3066: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3067: LD_VAR 0 7
3071: PPUSH
3072: LD_VAR 0 8
3076: PPUSH
3077: CALL_OW 488
3081: NOT
3082: IFFALSE 3086
// continue ;
3084: GO 3018
// if HexInfo ( _x , _y ) = 0 then
3086: LD_VAR 0 7
3090: PPUSH
3091: LD_VAR 0 8
3095: PPUSH
3096: CALL_OW 428
3100: PUSH
3101: LD_INT 0
3103: EQUAL
3104: IFFALSE 3129
// begin ComMoveXY ( unit , _x , _y ) ;
3106: LD_VAR 0 1
3110: PPUSH
3111: LD_VAR 0 7
3115: PPUSH
3116: LD_VAR 0 8
3120: PPUSH
3121: CALL_OW 111
// exit ;
3125: POP
3126: POP
3127: GO 3133
// end ; end ;
3129: GO 3018
3131: POP
3132: POP
// end ;
3133: LD_VAR 0 3
3137: RET
// export function ScanBase ( side , base_area ) ; begin
3138: LD_INT 0
3140: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3141: LD_ADDR_VAR 0 3
3145: PUSH
3146: LD_VAR 0 2
3150: PPUSH
3151: LD_INT 81
3153: PUSH
3154: LD_VAR 0 1
3158: PUSH
3159: EMPTY
3160: LIST
3161: LIST
3162: PPUSH
3163: CALL_OW 70
3167: ST_TO_ADDR
// end ;
3168: LD_VAR 0 3
3172: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3173: LD_INT 0
3175: PPUSH
3176: PPUSH
3177: PPUSH
3178: PPUSH
// result := false ;
3179: LD_ADDR_VAR 0 2
3183: PUSH
3184: LD_INT 0
3186: ST_TO_ADDR
// side := GetSide ( unit ) ;
3187: LD_ADDR_VAR 0 3
3191: PUSH
3192: LD_VAR 0 1
3196: PPUSH
3197: CALL_OW 255
3201: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3202: LD_ADDR_VAR 0 4
3206: PUSH
3207: LD_VAR 0 1
3211: PPUSH
3212: CALL_OW 248
3216: ST_TO_ADDR
// case nat of 1 :
3217: LD_VAR 0 4
3221: PUSH
3222: LD_INT 1
3224: DOUBLE
3225: EQUAL
3226: IFTRUE 3230
3228: GO 3241
3230: POP
// tech := tech_lassight ; 2 :
3231: LD_ADDR_VAR 0 5
3235: PUSH
3236: LD_INT 12
3238: ST_TO_ADDR
3239: GO 3280
3241: LD_INT 2
3243: DOUBLE
3244: EQUAL
3245: IFTRUE 3249
3247: GO 3260
3249: POP
// tech := tech_mortar ; 3 :
3250: LD_ADDR_VAR 0 5
3254: PUSH
3255: LD_INT 41
3257: ST_TO_ADDR
3258: GO 3280
3260: LD_INT 3
3262: DOUBLE
3263: EQUAL
3264: IFTRUE 3268
3266: GO 3279
3268: POP
// tech := tech_bazooka ; end ;
3269: LD_ADDR_VAR 0 5
3273: PUSH
3274: LD_INT 44
3276: ST_TO_ADDR
3277: GO 3280
3279: POP
// if Researched ( side , tech ) then
3280: LD_VAR 0 3
3284: PPUSH
3285: LD_VAR 0 5
3289: PPUSH
3290: CALL_OW 325
3294: IFFALSE 3321
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3296: LD_ADDR_VAR 0 2
3300: PUSH
3301: LD_INT 5
3303: PUSH
3304: LD_INT 8
3306: PUSH
3307: LD_INT 9
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: LIST
3314: PUSH
3315: LD_VAR 0 4
3319: ARRAY
3320: ST_TO_ADDR
// end ;
3321: LD_VAR 0 2
3325: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3326: LD_INT 0
3328: PPUSH
3329: PPUSH
3330: PPUSH
// if not mines then
3331: LD_VAR 0 2
3335: NOT
3336: IFFALSE 3340
// exit ;
3338: GO 3484
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3340: LD_ADDR_VAR 0 5
3344: PUSH
3345: LD_INT 81
3347: PUSH
3348: LD_VAR 0 1
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PUSH
3357: LD_INT 3
3359: PUSH
3360: LD_INT 21
3362: PUSH
3363: LD_INT 3
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: PPUSH
3378: CALL_OW 69
3382: ST_TO_ADDR
// for i in mines do
3383: LD_ADDR_VAR 0 4
3387: PUSH
3388: LD_VAR 0 2
3392: PUSH
3393: FOR_IN
3394: IFFALSE 3482
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3396: LD_VAR 0 4
3400: PUSH
3401: LD_INT 1
3403: ARRAY
3404: PPUSH
3405: LD_VAR 0 4
3409: PUSH
3410: LD_INT 2
3412: ARRAY
3413: PPUSH
3414: CALL_OW 458
3418: NOT
3419: IFFALSE 3423
// continue ;
3421: GO 3393
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3423: LD_VAR 0 4
3427: PUSH
3428: LD_INT 1
3430: ARRAY
3431: PPUSH
3432: LD_VAR 0 4
3436: PUSH
3437: LD_INT 2
3439: ARRAY
3440: PPUSH
3441: CALL_OW 428
3445: PUSH
3446: LD_VAR 0 5
3450: IN
3451: IFFALSE 3480
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3453: LD_VAR 0 4
3457: PUSH
3458: LD_INT 1
3460: ARRAY
3461: PPUSH
3462: LD_VAR 0 4
3466: PUSH
3467: LD_INT 2
3469: ARRAY
3470: PPUSH
3471: LD_VAR 0 1
3475: PPUSH
3476: CALL_OW 456
// end ;
3480: GO 3393
3482: POP
3483: POP
// end ;
3484: LD_VAR 0 3
3488: RET
// export function Count ( array ) ; var i ; begin
3489: LD_INT 0
3491: PPUSH
3492: PPUSH
// result := 0 ;
3493: LD_ADDR_VAR 0 2
3497: PUSH
3498: LD_INT 0
3500: ST_TO_ADDR
// for i in array do
3501: LD_ADDR_VAR 0 3
3505: PUSH
3506: LD_VAR 0 1
3510: PUSH
3511: FOR_IN
3512: IFFALSE 3536
// if i then
3514: LD_VAR 0 3
3518: IFFALSE 3534
// result := result + 1 ;
3520: LD_ADDR_VAR 0 2
3524: PUSH
3525: LD_VAR 0 2
3529: PUSH
3530: LD_INT 1
3532: PLUS
3533: ST_TO_ADDR
3534: GO 3511
3536: POP
3537: POP
// end ;
3538: LD_VAR 0 2
3542: RET
// export function IsEmpty ( building ) ; begin
3543: LD_INT 0
3545: PPUSH
// if not building then
3546: LD_VAR 0 1
3550: NOT
3551: IFFALSE 3555
// exit ;
3553: GO 3598
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3555: LD_ADDR_VAR 0 2
3559: PUSH
3560: LD_VAR 0 1
3564: PUSH
3565: LD_INT 22
3567: PUSH
3568: LD_VAR 0 1
3572: PPUSH
3573: CALL_OW 255
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: PUSH
3582: LD_INT 58
3584: PUSH
3585: EMPTY
3586: LIST
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: PPUSH
3592: CALL_OW 69
3596: IN
3597: ST_TO_ADDR
// end ;
3598: LD_VAR 0 2
3602: RET
// export function IsNotFull ( building ) ; begin
3603: LD_INT 0
3605: PPUSH
// if not building then
3606: LD_VAR 0 1
3610: NOT
3611: IFFALSE 3615
// exit ;
3613: GO 3634
// result := UnitsInside ( building ) < 6 ;
3615: LD_ADDR_VAR 0 2
3619: PUSH
3620: LD_VAR 0 1
3624: PPUSH
3625: CALL_OW 313
3629: PUSH
3630: LD_INT 6
3632: LESS
3633: ST_TO_ADDR
// end ;
3634: LD_VAR 0 2
3638: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3639: LD_INT 0
3641: PPUSH
3642: PPUSH
3643: PPUSH
3644: PPUSH
// tmp := [ ] ;
3645: LD_ADDR_VAR 0 3
3649: PUSH
3650: EMPTY
3651: ST_TO_ADDR
// list := [ ] ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: EMPTY
3658: ST_TO_ADDR
// for i = 16 to 25 do
3659: LD_ADDR_VAR 0 4
3663: PUSH
3664: DOUBLE
3665: LD_INT 16
3667: DEC
3668: ST_TO_ADDR
3669: LD_INT 25
3671: PUSH
3672: FOR_TO
3673: IFFALSE 3746
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3675: LD_ADDR_VAR 0 3
3679: PUSH
3680: LD_VAR 0 3
3684: PUSH
3685: LD_INT 22
3687: PUSH
3688: LD_VAR 0 1
3692: PPUSH
3693: CALL_OW 255
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: PUSH
3702: LD_INT 91
3704: PUSH
3705: LD_VAR 0 1
3709: PUSH
3710: LD_INT 6
3712: PUSH
3713: EMPTY
3714: LIST
3715: LIST
3716: LIST
3717: PUSH
3718: LD_INT 30
3720: PUSH
3721: LD_VAR 0 4
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: LIST
3734: PUSH
3735: EMPTY
3736: LIST
3737: PPUSH
3738: CALL_OW 69
3742: ADD
3743: ST_TO_ADDR
3744: GO 3672
3746: POP
3747: POP
// for i = 1 to tmp do
3748: LD_ADDR_VAR 0 4
3752: PUSH
3753: DOUBLE
3754: LD_INT 1
3756: DEC
3757: ST_TO_ADDR
3758: LD_VAR 0 3
3762: PUSH
3763: FOR_TO
3764: IFFALSE 3852
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3766: LD_ADDR_VAR 0 5
3770: PUSH
3771: LD_VAR 0 5
3775: PUSH
3776: LD_VAR 0 3
3780: PUSH
3781: LD_VAR 0 4
3785: ARRAY
3786: PPUSH
3787: CALL_OW 266
3791: PUSH
3792: LD_VAR 0 3
3796: PUSH
3797: LD_VAR 0 4
3801: ARRAY
3802: PPUSH
3803: CALL_OW 250
3807: PUSH
3808: LD_VAR 0 3
3812: PUSH
3813: LD_VAR 0 4
3817: ARRAY
3818: PPUSH
3819: CALL_OW 251
3823: PUSH
3824: LD_VAR 0 3
3828: PUSH
3829: LD_VAR 0 4
3833: ARRAY
3834: PPUSH
3835: CALL_OW 254
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: ADD
3849: ST_TO_ADDR
3850: GO 3763
3852: POP
3853: POP
// result := list ;
3854: LD_ADDR_VAR 0 2
3858: PUSH
3859: LD_VAR 0 5
3863: ST_TO_ADDR
// end ;
3864: LD_VAR 0 2
3868: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3869: LD_INT 0
3871: PPUSH
3872: PPUSH
3873: PPUSH
3874: PPUSH
3875: PPUSH
3876: PPUSH
3877: PPUSH
// if not factory then
3878: LD_VAR 0 1
3882: NOT
3883: IFFALSE 3887
// exit ;
3885: GO 4480
// if control = control_apeman then
3887: LD_VAR 0 4
3891: PUSH
3892: LD_INT 5
3894: EQUAL
3895: IFFALSE 4004
// begin tmp := UnitsInside ( factory ) ;
3897: LD_ADDR_VAR 0 8
3901: PUSH
3902: LD_VAR 0 1
3906: PPUSH
3907: CALL_OW 313
3911: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3912: LD_VAR 0 8
3916: PPUSH
3917: LD_INT 25
3919: PUSH
3920: LD_INT 12
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PPUSH
3927: CALL_OW 72
3931: NOT
3932: IFFALSE 3942
// control := control_manual ;
3934: LD_ADDR_VAR 0 4
3938: PUSH
3939: LD_INT 1
3941: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3942: LD_ADDR_VAR 0 8
3946: PUSH
3947: LD_VAR 0 1
3951: PPUSH
3952: CALL 3639 0 1
3956: ST_TO_ADDR
// if tmp then
3957: LD_VAR 0 8
3961: IFFALSE 4004
// begin for i in tmp do
3963: LD_ADDR_VAR 0 7
3967: PUSH
3968: LD_VAR 0 8
3972: PUSH
3973: FOR_IN
3974: IFFALSE 4002
// if i [ 1 ] = b_ext_radio then
3976: LD_VAR 0 7
3980: PUSH
3981: LD_INT 1
3983: ARRAY
3984: PUSH
3985: LD_INT 22
3987: EQUAL
3988: IFFALSE 4000
// begin control := control_remote ;
3990: LD_ADDR_VAR 0 4
3994: PUSH
3995: LD_INT 2
3997: ST_TO_ADDR
// break ;
3998: GO 4002
// end ;
4000: GO 3973
4002: POP
4003: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4004: LD_VAR 0 1
4008: PPUSH
4009: LD_VAR 0 2
4013: PPUSH
4014: LD_VAR 0 3
4018: PPUSH
4019: LD_VAR 0 4
4023: PPUSH
4024: LD_VAR 0 5
4028: PPUSH
4029: CALL_OW 448
4033: IFFALSE 4068
// begin result := [ chassis , engine , control , weapon ] ;
4035: LD_ADDR_VAR 0 6
4039: PUSH
4040: LD_VAR 0 2
4044: PUSH
4045: LD_VAR 0 3
4049: PUSH
4050: LD_VAR 0 4
4054: PUSH
4055: LD_VAR 0 5
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: ST_TO_ADDR
// exit ;
4066: GO 4480
// end ; _chassis := AvailableChassisList ( factory ) ;
4068: LD_ADDR_VAR 0 9
4072: PUSH
4073: LD_VAR 0 1
4077: PPUSH
4078: CALL_OW 475
4082: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4083: LD_ADDR_VAR 0 11
4087: PUSH
4088: LD_VAR 0 1
4092: PPUSH
4093: CALL_OW 476
4097: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4098: LD_ADDR_VAR 0 12
4102: PUSH
4103: LD_VAR 0 1
4107: PPUSH
4108: CALL_OW 477
4112: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4113: LD_ADDR_VAR 0 10
4117: PUSH
4118: LD_VAR 0 1
4122: PPUSH
4123: CALL_OW 478
4127: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4128: LD_VAR 0 9
4132: NOT
4133: PUSH
4134: LD_VAR 0 11
4138: NOT
4139: OR
4140: PUSH
4141: LD_VAR 0 12
4145: NOT
4146: OR
4147: PUSH
4148: LD_VAR 0 10
4152: NOT
4153: OR
4154: IFFALSE 4189
// begin result := [ chassis , engine , control , weapon ] ;
4156: LD_ADDR_VAR 0 6
4160: PUSH
4161: LD_VAR 0 2
4165: PUSH
4166: LD_VAR 0 3
4170: PUSH
4171: LD_VAR 0 4
4175: PUSH
4176: LD_VAR 0 5
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: ST_TO_ADDR
// exit ;
4187: GO 4480
// end ; if not chassis in _chassis then
4189: LD_VAR 0 2
4193: PUSH
4194: LD_VAR 0 9
4198: IN
4199: NOT
4200: IFFALSE 4226
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4202: LD_ADDR_VAR 0 2
4206: PUSH
4207: LD_VAR 0 9
4211: PUSH
4212: LD_INT 1
4214: PPUSH
4215: LD_VAR 0 9
4219: PPUSH
4220: CALL_OW 12
4224: ARRAY
4225: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4226: LD_VAR 0 2
4230: PPUSH
4231: LD_VAR 0 3
4235: PPUSH
4236: CALL 4485 0 2
4240: NOT
4241: IFFALSE 4300
// repeat engine := _engine [ 1 ] ;
4243: LD_ADDR_VAR 0 3
4247: PUSH
4248: LD_VAR 0 11
4252: PUSH
4253: LD_INT 1
4255: ARRAY
4256: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4257: LD_ADDR_VAR 0 11
4261: PUSH
4262: LD_VAR 0 11
4266: PPUSH
4267: LD_INT 1
4269: PPUSH
4270: CALL_OW 3
4274: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4275: LD_VAR 0 2
4279: PPUSH
4280: LD_VAR 0 3
4284: PPUSH
4285: CALL 4485 0 2
4289: PUSH
4290: LD_VAR 0 11
4294: PUSH
4295: EMPTY
4296: EQUAL
4297: OR
4298: IFFALSE 4243
// if not control in _control then
4300: LD_VAR 0 4
4304: PUSH
4305: LD_VAR 0 12
4309: IN
4310: NOT
4311: IFFALSE 4337
// control := _control [ rand ( 1 , _control ) ] ;
4313: LD_ADDR_VAR 0 4
4317: PUSH
4318: LD_VAR 0 12
4322: PUSH
4323: LD_INT 1
4325: PPUSH
4326: LD_VAR 0 12
4330: PPUSH
4331: CALL_OW 12
4335: ARRAY
4336: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4337: LD_VAR 0 2
4341: PPUSH
4342: LD_VAR 0 5
4346: PPUSH
4347: CALL 4705 0 2
4351: NOT
4352: IFFALSE 4411
// repeat weapon := _weapon [ 1 ] ;
4354: LD_ADDR_VAR 0 5
4358: PUSH
4359: LD_VAR 0 10
4363: PUSH
4364: LD_INT 1
4366: ARRAY
4367: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4368: LD_ADDR_VAR 0 10
4372: PUSH
4373: LD_VAR 0 10
4377: PPUSH
4378: LD_INT 1
4380: PPUSH
4381: CALL_OW 3
4385: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4386: LD_VAR 0 2
4390: PPUSH
4391: LD_VAR 0 5
4395: PPUSH
4396: CALL 4705 0 2
4400: PUSH
4401: LD_VAR 0 10
4405: PUSH
4406: EMPTY
4407: EQUAL
4408: OR
4409: IFFALSE 4354
// result := [ ] ;
4411: LD_ADDR_VAR 0 6
4415: PUSH
4416: EMPTY
4417: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4418: LD_VAR 0 1
4422: PPUSH
4423: LD_VAR 0 2
4427: PPUSH
4428: LD_VAR 0 3
4432: PPUSH
4433: LD_VAR 0 4
4437: PPUSH
4438: LD_VAR 0 5
4442: PPUSH
4443: CALL_OW 448
4447: IFFALSE 4480
// result := [ chassis , engine , control , weapon ] ;
4449: LD_ADDR_VAR 0 6
4453: PUSH
4454: LD_VAR 0 2
4458: PUSH
4459: LD_VAR 0 3
4463: PUSH
4464: LD_VAR 0 4
4468: PUSH
4469: LD_VAR 0 5
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
// end ;
4480: LD_VAR 0 6
4484: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4485: LD_INT 0
4487: PPUSH
// if not chassis or not engine then
4488: LD_VAR 0 1
4492: NOT
4493: PUSH
4494: LD_VAR 0 2
4498: NOT
4499: OR
4500: IFFALSE 4504
// exit ;
4502: GO 4700
// case engine of engine_solar :
4504: LD_VAR 0 2
4508: PUSH
4509: LD_INT 2
4511: DOUBLE
4512: EQUAL
4513: IFTRUE 4517
4515: GO 4555
4517: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4518: LD_ADDR_VAR 0 3
4522: PUSH
4523: LD_INT 11
4525: PUSH
4526: LD_INT 12
4528: PUSH
4529: LD_INT 13
4531: PUSH
4532: LD_INT 14
4534: PUSH
4535: LD_INT 1
4537: PUSH
4538: LD_INT 2
4540: PUSH
4541: LD_INT 3
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: ST_TO_ADDR
4553: GO 4684
4555: LD_INT 1
4557: DOUBLE
4558: EQUAL
4559: IFTRUE 4563
4561: GO 4625
4563: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4564: LD_ADDR_VAR 0 3
4568: PUSH
4569: LD_INT 11
4571: PUSH
4572: LD_INT 12
4574: PUSH
4575: LD_INT 13
4577: PUSH
4578: LD_INT 14
4580: PUSH
4581: LD_INT 1
4583: PUSH
4584: LD_INT 2
4586: PUSH
4587: LD_INT 3
4589: PUSH
4590: LD_INT 4
4592: PUSH
4593: LD_INT 5
4595: PUSH
4596: LD_INT 21
4598: PUSH
4599: LD_INT 23
4601: PUSH
4602: LD_INT 22
4604: PUSH
4605: LD_INT 24
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: ST_TO_ADDR
4623: GO 4684
4625: LD_INT 3
4627: DOUBLE
4628: EQUAL
4629: IFTRUE 4633
4631: GO 4683
4633: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4634: LD_ADDR_VAR 0 3
4638: PUSH
4639: LD_INT 13
4641: PUSH
4642: LD_INT 14
4644: PUSH
4645: LD_INT 2
4647: PUSH
4648: LD_INT 3
4650: PUSH
4651: LD_INT 4
4653: PUSH
4654: LD_INT 5
4656: PUSH
4657: LD_INT 21
4659: PUSH
4660: LD_INT 22
4662: PUSH
4663: LD_INT 23
4665: PUSH
4666: LD_INT 24
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: ST_TO_ADDR
4681: GO 4684
4683: POP
// result := ( chassis in result ) ;
4684: LD_ADDR_VAR 0 3
4688: PUSH
4689: LD_VAR 0 1
4693: PUSH
4694: LD_VAR 0 3
4698: IN
4699: ST_TO_ADDR
// end ;
4700: LD_VAR 0 3
4704: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4705: LD_INT 0
4707: PPUSH
// if not chassis or not weapon then
4708: LD_VAR 0 1
4712: NOT
4713: PUSH
4714: LD_VAR 0 2
4718: NOT
4719: OR
4720: IFFALSE 4724
// exit ;
4722: GO 5750
// case weapon of us_machine_gun :
4724: LD_VAR 0 2
4728: PUSH
4729: LD_INT 2
4731: DOUBLE
4732: EQUAL
4733: IFTRUE 4737
4735: GO 4767
4737: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4738: LD_ADDR_VAR 0 3
4742: PUSH
4743: LD_INT 1
4745: PUSH
4746: LD_INT 2
4748: PUSH
4749: LD_INT 3
4751: PUSH
4752: LD_INT 4
4754: PUSH
4755: LD_INT 5
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: ST_TO_ADDR
4765: GO 5734
4767: LD_INT 3
4769: DOUBLE
4770: EQUAL
4771: IFTRUE 4775
4773: GO 4805
4775: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4776: LD_ADDR_VAR 0 3
4780: PUSH
4781: LD_INT 1
4783: PUSH
4784: LD_INT 2
4786: PUSH
4787: LD_INT 3
4789: PUSH
4790: LD_INT 4
4792: PUSH
4793: LD_INT 5
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: ST_TO_ADDR
4803: GO 5734
4805: LD_INT 11
4807: DOUBLE
4808: EQUAL
4809: IFTRUE 4813
4811: GO 4843
4813: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4814: LD_ADDR_VAR 0 3
4818: PUSH
4819: LD_INT 1
4821: PUSH
4822: LD_INT 2
4824: PUSH
4825: LD_INT 3
4827: PUSH
4828: LD_INT 4
4830: PUSH
4831: LD_INT 5
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: ST_TO_ADDR
4841: GO 5734
4843: LD_INT 4
4845: DOUBLE
4846: EQUAL
4847: IFTRUE 4851
4849: GO 4877
4851: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4852: LD_ADDR_VAR 0 3
4856: PUSH
4857: LD_INT 2
4859: PUSH
4860: LD_INT 3
4862: PUSH
4863: LD_INT 4
4865: PUSH
4866: LD_INT 5
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: ST_TO_ADDR
4875: GO 5734
4877: LD_INT 5
4879: DOUBLE
4880: EQUAL
4881: IFTRUE 4885
4883: GO 4911
4885: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4886: LD_ADDR_VAR 0 3
4890: PUSH
4891: LD_INT 2
4893: PUSH
4894: LD_INT 3
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: LD_INT 5
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: ST_TO_ADDR
4909: GO 5734
4911: LD_INT 9
4913: DOUBLE
4914: EQUAL
4915: IFTRUE 4919
4917: GO 4945
4919: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4920: LD_ADDR_VAR 0 3
4924: PUSH
4925: LD_INT 2
4927: PUSH
4928: LD_INT 3
4930: PUSH
4931: LD_INT 4
4933: PUSH
4934: LD_INT 5
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: ST_TO_ADDR
4943: GO 5734
4945: LD_INT 7
4947: DOUBLE
4948: EQUAL
4949: IFTRUE 4953
4951: GO 4979
4953: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4954: LD_ADDR_VAR 0 3
4958: PUSH
4959: LD_INT 2
4961: PUSH
4962: LD_INT 3
4964: PUSH
4965: LD_INT 4
4967: PUSH
4968: LD_INT 5
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: ST_TO_ADDR
4977: GO 5734
4979: LD_INT 12
4981: DOUBLE
4982: EQUAL
4983: IFTRUE 4987
4985: GO 5013
4987: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4988: LD_ADDR_VAR 0 3
4992: PUSH
4993: LD_INT 2
4995: PUSH
4996: LD_INT 3
4998: PUSH
4999: LD_INT 4
5001: PUSH
5002: LD_INT 5
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: ST_TO_ADDR
5011: GO 5734
5013: LD_INT 13
5015: DOUBLE
5016: EQUAL
5017: IFTRUE 5021
5019: GO 5047
5021: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5022: LD_ADDR_VAR 0 3
5026: PUSH
5027: LD_INT 2
5029: PUSH
5030: LD_INT 3
5032: PUSH
5033: LD_INT 4
5035: PUSH
5036: LD_INT 5
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: ST_TO_ADDR
5045: GO 5734
5047: LD_INT 14
5049: DOUBLE
5050: EQUAL
5051: IFTRUE 5055
5053: GO 5073
5055: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5056: LD_ADDR_VAR 0 3
5060: PUSH
5061: LD_INT 4
5063: PUSH
5064: LD_INT 5
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: ST_TO_ADDR
5071: GO 5734
5073: LD_INT 6
5075: DOUBLE
5076: EQUAL
5077: IFTRUE 5081
5079: GO 5099
5081: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5082: LD_ADDR_VAR 0 3
5086: PUSH
5087: LD_INT 4
5089: PUSH
5090: LD_INT 5
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: ST_TO_ADDR
5097: GO 5734
5099: LD_INT 10
5101: DOUBLE
5102: EQUAL
5103: IFTRUE 5107
5105: GO 5125
5107: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5108: LD_ADDR_VAR 0 3
5112: PUSH
5113: LD_INT 4
5115: PUSH
5116: LD_INT 5
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: ST_TO_ADDR
5123: GO 5734
5125: LD_INT 22
5127: DOUBLE
5128: EQUAL
5129: IFTRUE 5133
5131: GO 5159
5133: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5134: LD_ADDR_VAR 0 3
5138: PUSH
5139: LD_INT 11
5141: PUSH
5142: LD_INT 12
5144: PUSH
5145: LD_INT 13
5147: PUSH
5148: LD_INT 14
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: ST_TO_ADDR
5157: GO 5734
5159: LD_INT 23
5161: DOUBLE
5162: EQUAL
5163: IFTRUE 5167
5165: GO 5193
5167: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5168: LD_ADDR_VAR 0 3
5172: PUSH
5173: LD_INT 11
5175: PUSH
5176: LD_INT 12
5178: PUSH
5179: LD_INT 13
5181: PUSH
5182: LD_INT 14
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: ST_TO_ADDR
5191: GO 5734
5193: LD_INT 24
5195: DOUBLE
5196: EQUAL
5197: IFTRUE 5201
5199: GO 5227
5201: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5202: LD_ADDR_VAR 0 3
5206: PUSH
5207: LD_INT 11
5209: PUSH
5210: LD_INT 12
5212: PUSH
5213: LD_INT 13
5215: PUSH
5216: LD_INT 14
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: ST_TO_ADDR
5225: GO 5734
5227: LD_INT 30
5229: DOUBLE
5230: EQUAL
5231: IFTRUE 5235
5233: GO 5261
5235: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5236: LD_ADDR_VAR 0 3
5240: PUSH
5241: LD_INT 11
5243: PUSH
5244: LD_INT 12
5246: PUSH
5247: LD_INT 13
5249: PUSH
5250: LD_INT 14
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: ST_TO_ADDR
5259: GO 5734
5261: LD_INT 25
5263: DOUBLE
5264: EQUAL
5265: IFTRUE 5269
5267: GO 5287
5269: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5270: LD_ADDR_VAR 0 3
5274: PUSH
5275: LD_INT 13
5277: PUSH
5278: LD_INT 14
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: ST_TO_ADDR
5285: GO 5734
5287: LD_INT 27
5289: DOUBLE
5290: EQUAL
5291: IFTRUE 5295
5293: GO 5313
5295: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5296: LD_ADDR_VAR 0 3
5300: PUSH
5301: LD_INT 13
5303: PUSH
5304: LD_INT 14
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: ST_TO_ADDR
5311: GO 5734
5313: LD_INT 28
5315: DOUBLE
5316: EQUAL
5317: IFTRUE 5321
5319: GO 5339
5321: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5322: LD_ADDR_VAR 0 3
5326: PUSH
5327: LD_INT 13
5329: PUSH
5330: LD_INT 14
5332: PUSH
5333: EMPTY
5334: LIST
5335: LIST
5336: ST_TO_ADDR
5337: GO 5734
5339: LD_INT 29
5341: DOUBLE
5342: EQUAL
5343: IFTRUE 5347
5345: GO 5365
5347: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5348: LD_ADDR_VAR 0 3
5352: PUSH
5353: LD_INT 13
5355: PUSH
5356: LD_INT 14
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: ST_TO_ADDR
5363: GO 5734
5365: LD_INT 31
5367: DOUBLE
5368: EQUAL
5369: IFTRUE 5373
5371: GO 5391
5373: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5374: LD_ADDR_VAR 0 3
5378: PUSH
5379: LD_INT 13
5381: PUSH
5382: LD_INT 14
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: ST_TO_ADDR
5389: GO 5734
5391: LD_INT 26
5393: DOUBLE
5394: EQUAL
5395: IFTRUE 5399
5397: GO 5417
5399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5400: LD_ADDR_VAR 0 3
5404: PUSH
5405: LD_INT 13
5407: PUSH
5408: LD_INT 14
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: ST_TO_ADDR
5415: GO 5734
5417: LD_INT 42
5419: DOUBLE
5420: EQUAL
5421: IFTRUE 5425
5423: GO 5451
5425: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5426: LD_ADDR_VAR 0 3
5430: PUSH
5431: LD_INT 21
5433: PUSH
5434: LD_INT 22
5436: PUSH
5437: LD_INT 23
5439: PUSH
5440: LD_INT 24
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: ST_TO_ADDR
5449: GO 5734
5451: LD_INT 43
5453: DOUBLE
5454: EQUAL
5455: IFTRUE 5459
5457: GO 5485
5459: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5460: LD_ADDR_VAR 0 3
5464: PUSH
5465: LD_INT 21
5467: PUSH
5468: LD_INT 22
5470: PUSH
5471: LD_INT 23
5473: PUSH
5474: LD_INT 24
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: ST_TO_ADDR
5483: GO 5734
5485: LD_INT 44
5487: DOUBLE
5488: EQUAL
5489: IFTRUE 5493
5491: GO 5519
5493: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5494: LD_ADDR_VAR 0 3
5498: PUSH
5499: LD_INT 21
5501: PUSH
5502: LD_INT 22
5504: PUSH
5505: LD_INT 23
5507: PUSH
5508: LD_INT 24
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: ST_TO_ADDR
5517: GO 5734
5519: LD_INT 45
5521: DOUBLE
5522: EQUAL
5523: IFTRUE 5527
5525: GO 5553
5527: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5528: LD_ADDR_VAR 0 3
5532: PUSH
5533: LD_INT 21
5535: PUSH
5536: LD_INT 22
5538: PUSH
5539: LD_INT 23
5541: PUSH
5542: LD_INT 24
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: ST_TO_ADDR
5551: GO 5734
5553: LD_INT 49
5555: DOUBLE
5556: EQUAL
5557: IFTRUE 5561
5559: GO 5587
5561: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5562: LD_ADDR_VAR 0 3
5566: PUSH
5567: LD_INT 21
5569: PUSH
5570: LD_INT 22
5572: PUSH
5573: LD_INT 23
5575: PUSH
5576: LD_INT 24
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: ST_TO_ADDR
5585: GO 5734
5587: LD_INT 51
5589: DOUBLE
5590: EQUAL
5591: IFTRUE 5595
5593: GO 5621
5595: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5596: LD_ADDR_VAR 0 3
5600: PUSH
5601: LD_INT 21
5603: PUSH
5604: LD_INT 22
5606: PUSH
5607: LD_INT 23
5609: PUSH
5610: LD_INT 24
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: ST_TO_ADDR
5619: GO 5734
5621: LD_INT 52
5623: DOUBLE
5624: EQUAL
5625: IFTRUE 5629
5627: GO 5655
5629: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5630: LD_ADDR_VAR 0 3
5634: PUSH
5635: LD_INT 21
5637: PUSH
5638: LD_INT 22
5640: PUSH
5641: LD_INT 23
5643: PUSH
5644: LD_INT 24
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: ST_TO_ADDR
5653: GO 5734
5655: LD_INT 53
5657: DOUBLE
5658: EQUAL
5659: IFTRUE 5663
5661: GO 5681
5663: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5664: LD_ADDR_VAR 0 3
5668: PUSH
5669: LD_INT 23
5671: PUSH
5672: LD_INT 24
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: ST_TO_ADDR
5679: GO 5734
5681: LD_INT 46
5683: DOUBLE
5684: EQUAL
5685: IFTRUE 5689
5687: GO 5707
5689: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5690: LD_ADDR_VAR 0 3
5694: PUSH
5695: LD_INT 23
5697: PUSH
5698: LD_INT 24
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: ST_TO_ADDR
5705: GO 5734
5707: LD_INT 47
5709: DOUBLE
5710: EQUAL
5711: IFTRUE 5715
5713: GO 5733
5715: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5716: LD_ADDR_VAR 0 3
5720: PUSH
5721: LD_INT 23
5723: PUSH
5724: LD_INT 24
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: ST_TO_ADDR
5731: GO 5734
5733: POP
// result := ( chassis in result ) ;
5734: LD_ADDR_VAR 0 3
5738: PUSH
5739: LD_VAR 0 1
5743: PUSH
5744: LD_VAR 0 3
5748: IN
5749: ST_TO_ADDR
// end ;
5750: LD_VAR 0 3
5754: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5755: LD_INT 0
5757: PPUSH
5758: PPUSH
5759: PPUSH
5760: PPUSH
5761: PPUSH
5762: PPUSH
5763: PPUSH
// result := array ;
5764: LD_ADDR_VAR 0 5
5768: PUSH
5769: LD_VAR 0 1
5773: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5774: LD_VAR 0 1
5778: NOT
5779: PUSH
5780: LD_VAR 0 2
5784: NOT
5785: OR
5786: PUSH
5787: LD_VAR 0 3
5791: NOT
5792: OR
5793: PUSH
5794: LD_VAR 0 2
5798: PUSH
5799: LD_VAR 0 1
5803: GREATER
5804: OR
5805: PUSH
5806: LD_VAR 0 3
5810: PUSH
5811: LD_VAR 0 1
5815: GREATER
5816: OR
5817: IFFALSE 5821
// exit ;
5819: GO 6117
// if direction then
5821: LD_VAR 0 4
5825: IFFALSE 5889
// begin d := 1 ;
5827: LD_ADDR_VAR 0 9
5831: PUSH
5832: LD_INT 1
5834: ST_TO_ADDR
// if i_from > i_to then
5835: LD_VAR 0 2
5839: PUSH
5840: LD_VAR 0 3
5844: GREATER
5845: IFFALSE 5871
// length := ( array - i_from ) + i_to else
5847: LD_ADDR_VAR 0 11
5851: PUSH
5852: LD_VAR 0 1
5856: PUSH
5857: LD_VAR 0 2
5861: MINUS
5862: PUSH
5863: LD_VAR 0 3
5867: PLUS
5868: ST_TO_ADDR
5869: GO 5887
// length := i_to - i_from ;
5871: LD_ADDR_VAR 0 11
5875: PUSH
5876: LD_VAR 0 3
5880: PUSH
5881: LD_VAR 0 2
5885: MINUS
5886: ST_TO_ADDR
// end else
5887: GO 5950
// begin d := - 1 ;
5889: LD_ADDR_VAR 0 9
5893: PUSH
5894: LD_INT 1
5896: NEG
5897: ST_TO_ADDR
// if i_from > i_to then
5898: LD_VAR 0 2
5902: PUSH
5903: LD_VAR 0 3
5907: GREATER
5908: IFFALSE 5928
// length := i_from - i_to else
5910: LD_ADDR_VAR 0 11
5914: PUSH
5915: LD_VAR 0 2
5919: PUSH
5920: LD_VAR 0 3
5924: MINUS
5925: ST_TO_ADDR
5926: GO 5950
// length := ( array - i_to ) + i_from ;
5928: LD_ADDR_VAR 0 11
5932: PUSH
5933: LD_VAR 0 1
5937: PUSH
5938: LD_VAR 0 3
5942: MINUS
5943: PUSH
5944: LD_VAR 0 2
5948: PLUS
5949: ST_TO_ADDR
// end ; if not length then
5950: LD_VAR 0 11
5954: NOT
5955: IFFALSE 5959
// exit ;
5957: GO 6117
// tmp := array ;
5959: LD_ADDR_VAR 0 10
5963: PUSH
5964: LD_VAR 0 1
5968: ST_TO_ADDR
// for i = 1 to length do
5969: LD_ADDR_VAR 0 6
5973: PUSH
5974: DOUBLE
5975: LD_INT 1
5977: DEC
5978: ST_TO_ADDR
5979: LD_VAR 0 11
5983: PUSH
5984: FOR_TO
5985: IFFALSE 6105
// begin for j = 1 to array do
5987: LD_ADDR_VAR 0 7
5991: PUSH
5992: DOUBLE
5993: LD_INT 1
5995: DEC
5996: ST_TO_ADDR
5997: LD_VAR 0 1
6001: PUSH
6002: FOR_TO
6003: IFFALSE 6091
// begin k := j + d ;
6005: LD_ADDR_VAR 0 8
6009: PUSH
6010: LD_VAR 0 7
6014: PUSH
6015: LD_VAR 0 9
6019: PLUS
6020: ST_TO_ADDR
// if k > array then
6021: LD_VAR 0 8
6025: PUSH
6026: LD_VAR 0 1
6030: GREATER
6031: IFFALSE 6041
// k := 1 ;
6033: LD_ADDR_VAR 0 8
6037: PUSH
6038: LD_INT 1
6040: ST_TO_ADDR
// if not k then
6041: LD_VAR 0 8
6045: NOT
6046: IFFALSE 6058
// k := array ;
6048: LD_ADDR_VAR 0 8
6052: PUSH
6053: LD_VAR 0 1
6057: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6058: LD_ADDR_VAR 0 10
6062: PUSH
6063: LD_VAR 0 10
6067: PPUSH
6068: LD_VAR 0 8
6072: PPUSH
6073: LD_VAR 0 1
6077: PUSH
6078: LD_VAR 0 7
6082: ARRAY
6083: PPUSH
6084: CALL_OW 1
6088: ST_TO_ADDR
// end ;
6089: GO 6002
6091: POP
6092: POP
// array := tmp ;
6093: LD_ADDR_VAR 0 1
6097: PUSH
6098: LD_VAR 0 10
6102: ST_TO_ADDR
// end ;
6103: GO 5984
6105: POP
6106: POP
// result := array ;
6107: LD_ADDR_VAR 0 5
6111: PUSH
6112: LD_VAR 0 1
6116: ST_TO_ADDR
// end ;
6117: LD_VAR 0 5
6121: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6122: LD_INT 0
6124: PPUSH
6125: PPUSH
// result := 0 ;
6126: LD_ADDR_VAR 0 3
6130: PUSH
6131: LD_INT 0
6133: ST_TO_ADDR
// if not array or not value in array then
6134: LD_VAR 0 1
6138: NOT
6139: PUSH
6140: LD_VAR 0 2
6144: PUSH
6145: LD_VAR 0 1
6149: IN
6150: NOT
6151: OR
6152: IFFALSE 6156
// exit ;
6154: GO 6210
// for i = 1 to array do
6156: LD_ADDR_VAR 0 4
6160: PUSH
6161: DOUBLE
6162: LD_INT 1
6164: DEC
6165: ST_TO_ADDR
6166: LD_VAR 0 1
6170: PUSH
6171: FOR_TO
6172: IFFALSE 6208
// if value = array [ i ] then
6174: LD_VAR 0 2
6178: PUSH
6179: LD_VAR 0 1
6183: PUSH
6184: LD_VAR 0 4
6188: ARRAY
6189: EQUAL
6190: IFFALSE 6206
// begin result := i ;
6192: LD_ADDR_VAR 0 3
6196: PUSH
6197: LD_VAR 0 4
6201: ST_TO_ADDR
// exit ;
6202: POP
6203: POP
6204: GO 6210
// end ;
6206: GO 6171
6208: POP
6209: POP
// end ;
6210: LD_VAR 0 3
6214: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6215: LD_INT 0
6217: PPUSH
// vc_chassis := chassis ;
6218: LD_ADDR_OWVAR 37
6222: PUSH
6223: LD_VAR 0 1
6227: ST_TO_ADDR
// vc_engine := engine ;
6228: LD_ADDR_OWVAR 39
6232: PUSH
6233: LD_VAR 0 2
6237: ST_TO_ADDR
// vc_control := control ;
6238: LD_ADDR_OWVAR 38
6242: PUSH
6243: LD_VAR 0 3
6247: ST_TO_ADDR
// vc_weapon := weapon ;
6248: LD_ADDR_OWVAR 40
6252: PUSH
6253: LD_VAR 0 4
6257: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6258: LD_ADDR_OWVAR 41
6262: PUSH
6263: LD_VAR 0 5
6267: ST_TO_ADDR
// end ;
6268: LD_VAR 0 6
6272: RET
// export function WantPlant ( unit ) ; var task ; begin
6273: LD_INT 0
6275: PPUSH
6276: PPUSH
// result := false ;
6277: LD_ADDR_VAR 0 2
6281: PUSH
6282: LD_INT 0
6284: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6285: LD_ADDR_VAR 0 3
6289: PUSH
6290: LD_VAR 0 1
6294: PPUSH
6295: CALL_OW 437
6299: ST_TO_ADDR
// if task then
6300: LD_VAR 0 3
6304: IFFALSE 6332
// if task [ 1 ] [ 1 ] = p then
6306: LD_VAR 0 3
6310: PUSH
6311: LD_INT 1
6313: ARRAY
6314: PUSH
6315: LD_INT 1
6317: ARRAY
6318: PUSH
6319: LD_STRING p
6321: EQUAL
6322: IFFALSE 6332
// result := true ;
6324: LD_ADDR_VAR 0 2
6328: PUSH
6329: LD_INT 1
6331: ST_TO_ADDR
// end ;
6332: LD_VAR 0 2
6336: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6337: LD_INT 0
6339: PPUSH
6340: PPUSH
6341: PPUSH
6342: PPUSH
// if pos < 1 then
6343: LD_VAR 0 2
6347: PUSH
6348: LD_INT 1
6350: LESS
6351: IFFALSE 6355
// exit ;
6353: GO 6658
// if pos = 1 then
6355: LD_VAR 0 2
6359: PUSH
6360: LD_INT 1
6362: EQUAL
6363: IFFALSE 6396
// result := Replace ( arr , pos [ 1 ] , value ) else
6365: LD_ADDR_VAR 0 4
6369: PUSH
6370: LD_VAR 0 1
6374: PPUSH
6375: LD_VAR 0 2
6379: PUSH
6380: LD_INT 1
6382: ARRAY
6383: PPUSH
6384: LD_VAR 0 3
6388: PPUSH
6389: CALL_OW 1
6393: ST_TO_ADDR
6394: GO 6658
// begin tmp := arr ;
6396: LD_ADDR_VAR 0 6
6400: PUSH
6401: LD_VAR 0 1
6405: ST_TO_ADDR
// s_arr := [ tmp ] ;
6406: LD_ADDR_VAR 0 7
6410: PUSH
6411: LD_VAR 0 6
6415: PUSH
6416: EMPTY
6417: LIST
6418: ST_TO_ADDR
// for i = 1 to pos - 1 do
6419: LD_ADDR_VAR 0 5
6423: PUSH
6424: DOUBLE
6425: LD_INT 1
6427: DEC
6428: ST_TO_ADDR
6429: LD_VAR 0 2
6433: PUSH
6434: LD_INT 1
6436: MINUS
6437: PUSH
6438: FOR_TO
6439: IFFALSE 6484
// begin tmp := tmp [ pos [ i ] ] ;
6441: LD_ADDR_VAR 0 6
6445: PUSH
6446: LD_VAR 0 6
6450: PUSH
6451: LD_VAR 0 2
6455: PUSH
6456: LD_VAR 0 5
6460: ARRAY
6461: ARRAY
6462: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6463: LD_ADDR_VAR 0 7
6467: PUSH
6468: LD_VAR 0 7
6472: PUSH
6473: LD_VAR 0 6
6477: PUSH
6478: EMPTY
6479: LIST
6480: ADD
6481: ST_TO_ADDR
// end ;
6482: GO 6438
6484: POP
6485: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6486: LD_ADDR_VAR 0 6
6490: PUSH
6491: LD_VAR 0 6
6495: PPUSH
6496: LD_VAR 0 2
6500: PUSH
6501: LD_VAR 0 2
6505: ARRAY
6506: PPUSH
6507: LD_VAR 0 3
6511: PPUSH
6512: CALL_OW 1
6516: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6517: LD_ADDR_VAR 0 7
6521: PUSH
6522: LD_VAR 0 7
6526: PPUSH
6527: LD_VAR 0 7
6531: PPUSH
6532: LD_VAR 0 6
6536: PPUSH
6537: CALL_OW 1
6541: ST_TO_ADDR
// for i = s_arr downto 2 do
6542: LD_ADDR_VAR 0 5
6546: PUSH
6547: DOUBLE
6548: LD_VAR 0 7
6552: INC
6553: ST_TO_ADDR
6554: LD_INT 2
6556: PUSH
6557: FOR_DOWNTO
6558: IFFALSE 6642
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6560: LD_ADDR_VAR 0 6
6564: PUSH
6565: LD_VAR 0 7
6569: PUSH
6570: LD_VAR 0 5
6574: PUSH
6575: LD_INT 1
6577: MINUS
6578: ARRAY
6579: PPUSH
6580: LD_VAR 0 2
6584: PUSH
6585: LD_VAR 0 5
6589: PUSH
6590: LD_INT 1
6592: MINUS
6593: ARRAY
6594: PPUSH
6595: LD_VAR 0 7
6599: PUSH
6600: LD_VAR 0 5
6604: ARRAY
6605: PPUSH
6606: CALL_OW 1
6610: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6611: LD_ADDR_VAR 0 7
6615: PUSH
6616: LD_VAR 0 7
6620: PPUSH
6621: LD_VAR 0 5
6625: PUSH
6626: LD_INT 1
6628: MINUS
6629: PPUSH
6630: LD_VAR 0 6
6634: PPUSH
6635: CALL_OW 1
6639: ST_TO_ADDR
// end ;
6640: GO 6557
6642: POP
6643: POP
// result := s_arr [ 1 ] ;
6644: LD_ADDR_VAR 0 4
6648: PUSH
6649: LD_VAR 0 7
6653: PUSH
6654: LD_INT 1
6656: ARRAY
6657: ST_TO_ADDR
// end ; end ;
6658: LD_VAR 0 4
6662: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6663: LD_INT 0
6665: PPUSH
6666: PPUSH
// if not list then
6667: LD_VAR 0 1
6671: NOT
6672: IFFALSE 6676
// exit ;
6674: GO 6767
// i := list [ pos1 ] ;
6676: LD_ADDR_VAR 0 5
6680: PUSH
6681: LD_VAR 0 1
6685: PUSH
6686: LD_VAR 0 2
6690: ARRAY
6691: ST_TO_ADDR
// if not i then
6692: LD_VAR 0 5
6696: NOT
6697: IFFALSE 6701
// exit ;
6699: GO 6767
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6701: LD_ADDR_VAR 0 1
6705: PUSH
6706: LD_VAR 0 1
6710: PPUSH
6711: LD_VAR 0 2
6715: PPUSH
6716: LD_VAR 0 1
6720: PUSH
6721: LD_VAR 0 3
6725: ARRAY
6726: PPUSH
6727: CALL_OW 1
6731: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6732: LD_ADDR_VAR 0 1
6736: PUSH
6737: LD_VAR 0 1
6741: PPUSH
6742: LD_VAR 0 3
6746: PPUSH
6747: LD_VAR 0 5
6751: PPUSH
6752: CALL_OW 1
6756: ST_TO_ADDR
// result := list ;
6757: LD_ADDR_VAR 0 4
6761: PUSH
6762: LD_VAR 0 1
6766: ST_TO_ADDR
// end ;
6767: LD_VAR 0 4
6771: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6772: LD_INT 0
6774: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6775: LD_ADDR_VAR 0 5
6779: PUSH
6780: LD_VAR 0 1
6784: PPUSH
6785: CALL_OW 250
6789: PPUSH
6790: LD_VAR 0 1
6794: PPUSH
6795: CALL_OW 251
6799: PPUSH
6800: LD_VAR 0 2
6804: PPUSH
6805: LD_VAR 0 3
6809: PPUSH
6810: LD_VAR 0 4
6814: PPUSH
6815: CALL 6825 0 5
6819: ST_TO_ADDR
// end ;
6820: LD_VAR 0 5
6824: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6825: LD_INT 0
6827: PPUSH
6828: PPUSH
6829: PPUSH
6830: PPUSH
// if not list then
6831: LD_VAR 0 3
6835: NOT
6836: IFFALSE 6840
// exit ;
6838: GO 7228
// result := [ ] ;
6840: LD_ADDR_VAR 0 6
6844: PUSH
6845: EMPTY
6846: ST_TO_ADDR
// for i in list do
6847: LD_ADDR_VAR 0 7
6851: PUSH
6852: LD_VAR 0 3
6856: PUSH
6857: FOR_IN
6858: IFFALSE 7060
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6860: LD_ADDR_VAR 0 9
6864: PUSH
6865: LD_VAR 0 7
6869: PPUSH
6870: LD_VAR 0 1
6874: PPUSH
6875: LD_VAR 0 2
6879: PPUSH
6880: CALL_OW 297
6884: ST_TO_ADDR
// if not result then
6885: LD_VAR 0 6
6889: NOT
6890: IFFALSE 6916
// result := [ [ i , tmp ] ] else
6892: LD_ADDR_VAR 0 6
6896: PUSH
6897: LD_VAR 0 7
6901: PUSH
6902: LD_VAR 0 9
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PUSH
6911: EMPTY
6912: LIST
6913: ST_TO_ADDR
6914: GO 7058
// begin if result [ result ] [ 2 ] < tmp then
6916: LD_VAR 0 6
6920: PUSH
6921: LD_VAR 0 6
6925: ARRAY
6926: PUSH
6927: LD_INT 2
6929: ARRAY
6930: PUSH
6931: LD_VAR 0 9
6935: LESS
6936: IFFALSE 6978
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6938: LD_ADDR_VAR 0 6
6942: PUSH
6943: LD_VAR 0 6
6947: PPUSH
6948: LD_VAR 0 6
6952: PUSH
6953: LD_INT 1
6955: PLUS
6956: PPUSH
6957: LD_VAR 0 7
6961: PUSH
6962: LD_VAR 0 9
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PPUSH
6971: CALL_OW 2
6975: ST_TO_ADDR
6976: GO 7058
// for j = 1 to result do
6978: LD_ADDR_VAR 0 8
6982: PUSH
6983: DOUBLE
6984: LD_INT 1
6986: DEC
6987: ST_TO_ADDR
6988: LD_VAR 0 6
6992: PUSH
6993: FOR_TO
6994: IFFALSE 7056
// begin if tmp < result [ j ] [ 2 ] then
6996: LD_VAR 0 9
7000: PUSH
7001: LD_VAR 0 6
7005: PUSH
7006: LD_VAR 0 8
7010: ARRAY
7011: PUSH
7012: LD_INT 2
7014: ARRAY
7015: LESS
7016: IFFALSE 7054
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7018: LD_ADDR_VAR 0 6
7022: PUSH
7023: LD_VAR 0 6
7027: PPUSH
7028: LD_VAR 0 8
7032: PPUSH
7033: LD_VAR 0 7
7037: PUSH
7038: LD_VAR 0 9
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 2
7051: ST_TO_ADDR
// break ;
7052: GO 7056
// end ; end ;
7054: GO 6993
7056: POP
7057: POP
// end ; end ;
7058: GO 6857
7060: POP
7061: POP
// if result and not asc then
7062: LD_VAR 0 6
7066: PUSH
7067: LD_VAR 0 4
7071: NOT
7072: AND
7073: IFFALSE 7148
// begin tmp := result ;
7075: LD_ADDR_VAR 0 9
7079: PUSH
7080: LD_VAR 0 6
7084: ST_TO_ADDR
// for i = tmp downto 1 do
7085: LD_ADDR_VAR 0 7
7089: PUSH
7090: DOUBLE
7091: LD_VAR 0 9
7095: INC
7096: ST_TO_ADDR
7097: LD_INT 1
7099: PUSH
7100: FOR_DOWNTO
7101: IFFALSE 7146
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7103: LD_ADDR_VAR 0 6
7107: PUSH
7108: LD_VAR 0 6
7112: PPUSH
7113: LD_VAR 0 9
7117: PUSH
7118: LD_VAR 0 7
7122: MINUS
7123: PUSH
7124: LD_INT 1
7126: PLUS
7127: PPUSH
7128: LD_VAR 0 9
7132: PUSH
7133: LD_VAR 0 7
7137: ARRAY
7138: PPUSH
7139: CALL_OW 1
7143: ST_TO_ADDR
7144: GO 7100
7146: POP
7147: POP
// end ; tmp := [ ] ;
7148: LD_ADDR_VAR 0 9
7152: PUSH
7153: EMPTY
7154: ST_TO_ADDR
// if mode then
7155: LD_VAR 0 5
7159: IFFALSE 7228
// begin for i = 1 to result do
7161: LD_ADDR_VAR 0 7
7165: PUSH
7166: DOUBLE
7167: LD_INT 1
7169: DEC
7170: ST_TO_ADDR
7171: LD_VAR 0 6
7175: PUSH
7176: FOR_TO
7177: IFFALSE 7216
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7179: LD_ADDR_VAR 0 9
7183: PUSH
7184: LD_VAR 0 9
7188: PPUSH
7189: LD_VAR 0 7
7193: PPUSH
7194: LD_VAR 0 6
7198: PUSH
7199: LD_VAR 0 7
7203: ARRAY
7204: PUSH
7205: LD_INT 1
7207: ARRAY
7208: PPUSH
7209: CALL_OW 1
7213: ST_TO_ADDR
7214: GO 7176
7216: POP
7217: POP
// result := tmp ;
7218: LD_ADDR_VAR 0 6
7222: PUSH
7223: LD_VAR 0 9
7227: ST_TO_ADDR
// end ; end ;
7228: LD_VAR 0 6
7232: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7233: LD_INT 0
7235: PPUSH
7236: PPUSH
7237: PPUSH
7238: PPUSH
7239: PPUSH
7240: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7241: LD_ADDR_VAR 0 5
7245: PUSH
7246: LD_INT 0
7248: PUSH
7249: LD_INT 0
7251: PUSH
7252: LD_INT 0
7254: PUSH
7255: EMPTY
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: ST_TO_ADDR
// if not x or not y then
7263: LD_VAR 0 2
7267: NOT
7268: PUSH
7269: LD_VAR 0 3
7273: NOT
7274: OR
7275: IFFALSE 7279
// exit ;
7277: GO 8925
// if not range then
7279: LD_VAR 0 4
7283: NOT
7284: IFFALSE 7294
// range := 10 ;
7286: LD_ADDR_VAR 0 4
7290: PUSH
7291: LD_INT 10
7293: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7294: LD_ADDR_VAR 0 8
7298: PUSH
7299: LD_INT 81
7301: PUSH
7302: LD_VAR 0 1
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: PUSH
7311: LD_INT 92
7313: PUSH
7314: LD_VAR 0 2
7318: PUSH
7319: LD_VAR 0 3
7323: PUSH
7324: LD_VAR 0 4
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: PUSH
7335: LD_INT 3
7337: PUSH
7338: LD_INT 21
7340: PUSH
7341: LD_INT 3
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: LIST
7356: PPUSH
7357: CALL_OW 69
7361: ST_TO_ADDR
// if not tmp then
7362: LD_VAR 0 8
7366: NOT
7367: IFFALSE 7371
// exit ;
7369: GO 8925
// for i in tmp do
7371: LD_ADDR_VAR 0 6
7375: PUSH
7376: LD_VAR 0 8
7380: PUSH
7381: FOR_IN
7382: IFFALSE 8900
// begin points := [ 0 , 0 , 0 ] ;
7384: LD_ADDR_VAR 0 9
7388: PUSH
7389: LD_INT 0
7391: PUSH
7392: LD_INT 0
7394: PUSH
7395: LD_INT 0
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: LIST
7402: ST_TO_ADDR
// bpoints := 1 ;
7403: LD_ADDR_VAR 0 10
7407: PUSH
7408: LD_INT 1
7410: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7411: LD_VAR 0 6
7415: PPUSH
7416: CALL_OW 247
7420: PUSH
7421: LD_INT 1
7423: DOUBLE
7424: EQUAL
7425: IFTRUE 7429
7427: GO 8007
7429: POP
// begin if GetClass ( i ) = 1 then
7430: LD_VAR 0 6
7434: PPUSH
7435: CALL_OW 257
7439: PUSH
7440: LD_INT 1
7442: EQUAL
7443: IFFALSE 7464
// points := [ 10 , 5 , 3 ] ;
7445: LD_ADDR_VAR 0 9
7449: PUSH
7450: LD_INT 10
7452: PUSH
7453: LD_INT 5
7455: PUSH
7456: LD_INT 3
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: LIST
7463: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7464: LD_VAR 0 6
7468: PPUSH
7469: CALL_OW 257
7473: PUSH
7474: LD_INT 2
7476: PUSH
7477: LD_INT 3
7479: PUSH
7480: LD_INT 4
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: LIST
7487: IN
7488: IFFALSE 7509
// points := [ 3 , 2 , 1 ] ;
7490: LD_ADDR_VAR 0 9
7494: PUSH
7495: LD_INT 3
7497: PUSH
7498: LD_INT 2
7500: PUSH
7501: LD_INT 1
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7509: LD_VAR 0 6
7513: PPUSH
7514: CALL_OW 257
7518: PUSH
7519: LD_INT 5
7521: EQUAL
7522: IFFALSE 7543
// points := [ 130 , 5 , 2 ] ;
7524: LD_ADDR_VAR 0 9
7528: PUSH
7529: LD_INT 130
7531: PUSH
7532: LD_INT 5
7534: PUSH
7535: LD_INT 2
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: LIST
7542: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7543: LD_VAR 0 6
7547: PPUSH
7548: CALL_OW 257
7552: PUSH
7553: LD_INT 8
7555: EQUAL
7556: IFFALSE 7577
// points := [ 35 , 35 , 30 ] ;
7558: LD_ADDR_VAR 0 9
7562: PUSH
7563: LD_INT 35
7565: PUSH
7566: LD_INT 35
7568: PUSH
7569: LD_INT 30
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: LIST
7576: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7577: LD_VAR 0 6
7581: PPUSH
7582: CALL_OW 257
7586: PUSH
7587: LD_INT 9
7589: EQUAL
7590: IFFALSE 7611
// points := [ 20 , 55 , 40 ] ;
7592: LD_ADDR_VAR 0 9
7596: PUSH
7597: LD_INT 20
7599: PUSH
7600: LD_INT 55
7602: PUSH
7603: LD_INT 40
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: LIST
7610: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7611: LD_VAR 0 6
7615: PPUSH
7616: CALL_OW 257
7620: PUSH
7621: LD_INT 12
7623: PUSH
7624: LD_INT 16
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: IN
7631: IFFALSE 7652
// points := [ 5 , 3 , 2 ] ;
7633: LD_ADDR_VAR 0 9
7637: PUSH
7638: LD_INT 5
7640: PUSH
7641: LD_INT 3
7643: PUSH
7644: LD_INT 2
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: LIST
7651: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7652: LD_VAR 0 6
7656: PPUSH
7657: CALL_OW 257
7661: PUSH
7662: LD_INT 17
7664: EQUAL
7665: IFFALSE 7686
// points := [ 100 , 50 , 75 ] ;
7667: LD_ADDR_VAR 0 9
7671: PUSH
7672: LD_INT 100
7674: PUSH
7675: LD_INT 50
7677: PUSH
7678: LD_INT 75
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: LIST
7685: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7686: LD_VAR 0 6
7690: PPUSH
7691: CALL_OW 257
7695: PUSH
7696: LD_INT 15
7698: EQUAL
7699: IFFALSE 7720
// points := [ 10 , 5 , 3 ] ;
7701: LD_ADDR_VAR 0 9
7705: PUSH
7706: LD_INT 10
7708: PUSH
7709: LD_INT 5
7711: PUSH
7712: LD_INT 3
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: LIST
7719: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7720: LD_VAR 0 6
7724: PPUSH
7725: CALL_OW 257
7729: PUSH
7730: LD_INT 14
7732: EQUAL
7733: IFFALSE 7754
// points := [ 10 , 0 , 0 ] ;
7735: LD_ADDR_VAR 0 9
7739: PUSH
7740: LD_INT 10
7742: PUSH
7743: LD_INT 0
7745: PUSH
7746: LD_INT 0
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: LIST
7753: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7754: LD_VAR 0 6
7758: PPUSH
7759: CALL_OW 257
7763: PUSH
7764: LD_INT 11
7766: EQUAL
7767: IFFALSE 7788
// points := [ 30 , 10 , 5 ] ;
7769: LD_ADDR_VAR 0 9
7773: PUSH
7774: LD_INT 30
7776: PUSH
7777: LD_INT 10
7779: PUSH
7780: LD_INT 5
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: LIST
7787: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7788: LD_VAR 0 1
7792: PPUSH
7793: LD_INT 5
7795: PPUSH
7796: CALL_OW 321
7800: PUSH
7801: LD_INT 2
7803: EQUAL
7804: IFFALSE 7821
// bpoints := bpoints * 1.8 ;
7806: LD_ADDR_VAR 0 10
7810: PUSH
7811: LD_VAR 0 10
7815: PUSH
7816: LD_REAL  1.80000000000000E+0000
7819: MUL
7820: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7821: LD_VAR 0 6
7825: PPUSH
7826: CALL_OW 257
7830: PUSH
7831: LD_INT 1
7833: PUSH
7834: LD_INT 2
7836: PUSH
7837: LD_INT 3
7839: PUSH
7840: LD_INT 4
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: IN
7849: PUSH
7850: LD_VAR 0 1
7854: PPUSH
7855: LD_INT 51
7857: PPUSH
7858: CALL_OW 321
7862: PUSH
7863: LD_INT 2
7865: EQUAL
7866: AND
7867: IFFALSE 7884
// bpoints := bpoints * 1.2 ;
7869: LD_ADDR_VAR 0 10
7873: PUSH
7874: LD_VAR 0 10
7878: PUSH
7879: LD_REAL  1.20000000000000E+0000
7882: MUL
7883: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7884: LD_VAR 0 6
7888: PPUSH
7889: CALL_OW 257
7893: PUSH
7894: LD_INT 5
7896: PUSH
7897: LD_INT 7
7899: PUSH
7900: LD_INT 9
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: LIST
7907: IN
7908: PUSH
7909: LD_VAR 0 1
7913: PPUSH
7914: LD_INT 52
7916: PPUSH
7917: CALL_OW 321
7921: PUSH
7922: LD_INT 2
7924: EQUAL
7925: AND
7926: IFFALSE 7943
// bpoints := bpoints * 1.5 ;
7928: LD_ADDR_VAR 0 10
7932: PUSH
7933: LD_VAR 0 10
7937: PUSH
7938: LD_REAL  1.50000000000000E+0000
7941: MUL
7942: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7943: LD_VAR 0 1
7947: PPUSH
7948: LD_INT 66
7950: PPUSH
7951: CALL_OW 321
7955: PUSH
7956: LD_INT 2
7958: EQUAL
7959: IFFALSE 7976
// bpoints := bpoints * 1.1 ;
7961: LD_ADDR_VAR 0 10
7965: PUSH
7966: LD_VAR 0 10
7970: PUSH
7971: LD_REAL  1.10000000000000E+0000
7974: MUL
7975: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7976: LD_ADDR_VAR 0 10
7980: PUSH
7981: LD_VAR 0 10
7985: PUSH
7986: LD_VAR 0 6
7990: PPUSH
7991: LD_INT 1
7993: PPUSH
7994: CALL_OW 259
7998: PUSH
7999: LD_REAL  1.15000000000000E+0000
8002: MUL
8003: MUL
8004: ST_TO_ADDR
// end ; unit_vehicle :
8005: GO 8829
8007: LD_INT 2
8009: DOUBLE
8010: EQUAL
8011: IFTRUE 8015
8013: GO 8817
8015: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8016: LD_VAR 0 6
8020: PPUSH
8021: CALL_OW 264
8025: PUSH
8026: LD_INT 2
8028: PUSH
8029: LD_INT 42
8031: PUSH
8032: LD_INT 24
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: IN
8040: IFFALSE 8061
// points := [ 25 , 5 , 3 ] ;
8042: LD_ADDR_VAR 0 9
8046: PUSH
8047: LD_INT 25
8049: PUSH
8050: LD_INT 5
8052: PUSH
8053: LD_INT 3
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: LIST
8060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8061: LD_VAR 0 6
8065: PPUSH
8066: CALL_OW 264
8070: PUSH
8071: LD_INT 4
8073: PUSH
8074: LD_INT 43
8076: PUSH
8077: LD_INT 25
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: IN
8085: IFFALSE 8106
// points := [ 40 , 15 , 5 ] ;
8087: LD_ADDR_VAR 0 9
8091: PUSH
8092: LD_INT 40
8094: PUSH
8095: LD_INT 15
8097: PUSH
8098: LD_INT 5
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: LIST
8105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8106: LD_VAR 0 6
8110: PPUSH
8111: CALL_OW 264
8115: PUSH
8116: LD_INT 3
8118: PUSH
8119: LD_INT 23
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: IN
8126: IFFALSE 8147
// points := [ 7 , 25 , 8 ] ;
8128: LD_ADDR_VAR 0 9
8132: PUSH
8133: LD_INT 7
8135: PUSH
8136: LD_INT 25
8138: PUSH
8139: LD_INT 8
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: LIST
8146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8147: LD_VAR 0 6
8151: PPUSH
8152: CALL_OW 264
8156: PUSH
8157: LD_INT 5
8159: PUSH
8160: LD_INT 27
8162: PUSH
8163: LD_INT 44
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: LIST
8170: IN
8171: IFFALSE 8192
// points := [ 14 , 50 , 16 ] ;
8173: LD_ADDR_VAR 0 9
8177: PUSH
8178: LD_INT 14
8180: PUSH
8181: LD_INT 50
8183: PUSH
8184: LD_INT 16
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: LIST
8191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8192: LD_VAR 0 6
8196: PPUSH
8197: CALL_OW 264
8201: PUSH
8202: LD_INT 6
8204: PUSH
8205: LD_INT 46
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: IN
8212: IFFALSE 8233
// points := [ 32 , 120 , 70 ] ;
8214: LD_ADDR_VAR 0 9
8218: PUSH
8219: LD_INT 32
8221: PUSH
8222: LD_INT 120
8224: PUSH
8225: LD_INT 70
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
8233: LD_VAR 0 6
8237: PPUSH
8238: CALL_OW 264
8242: PUSH
8243: LD_INT 7
8245: PUSH
8246: LD_INT 28
8248: PUSH
8249: LD_INT 45
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: LIST
8256: IN
8257: IFFALSE 8278
// points := [ 35 , 20 , 45 ] ;
8259: LD_ADDR_VAR 0 9
8263: PUSH
8264: LD_INT 35
8266: PUSH
8267: LD_INT 20
8269: PUSH
8270: LD_INT 45
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: LIST
8277: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8278: LD_VAR 0 6
8282: PPUSH
8283: CALL_OW 264
8287: PUSH
8288: LD_INT 47
8290: PUSH
8291: EMPTY
8292: LIST
8293: IN
8294: IFFALSE 8315
// points := [ 67 , 45 , 75 ] ;
8296: LD_ADDR_VAR 0 9
8300: PUSH
8301: LD_INT 67
8303: PUSH
8304: LD_INT 45
8306: PUSH
8307: LD_INT 75
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: LIST
8314: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8315: LD_VAR 0 6
8319: PPUSH
8320: CALL_OW 264
8324: PUSH
8325: LD_INT 26
8327: PUSH
8328: EMPTY
8329: LIST
8330: IN
8331: IFFALSE 8352
// points := [ 120 , 30 , 80 ] ;
8333: LD_ADDR_VAR 0 9
8337: PUSH
8338: LD_INT 120
8340: PUSH
8341: LD_INT 30
8343: PUSH
8344: LD_INT 80
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8352: LD_VAR 0 6
8356: PPUSH
8357: CALL_OW 264
8361: PUSH
8362: LD_INT 22
8364: PUSH
8365: EMPTY
8366: LIST
8367: IN
8368: IFFALSE 8389
// points := [ 40 , 1 , 1 ] ;
8370: LD_ADDR_VAR 0 9
8374: PUSH
8375: LD_INT 40
8377: PUSH
8378: LD_INT 1
8380: PUSH
8381: LD_INT 1
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: LIST
8388: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8389: LD_VAR 0 6
8393: PPUSH
8394: CALL_OW 264
8398: PUSH
8399: LD_INT 29
8401: PUSH
8402: EMPTY
8403: LIST
8404: IN
8405: IFFALSE 8426
// points := [ 70 , 200 , 400 ] ;
8407: LD_ADDR_VAR 0 9
8411: PUSH
8412: LD_INT 70
8414: PUSH
8415: LD_INT 200
8417: PUSH
8418: LD_INT 400
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: LIST
8425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8426: LD_VAR 0 6
8430: PPUSH
8431: CALL_OW 264
8435: PUSH
8436: LD_INT 14
8438: PUSH
8439: LD_INT 53
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: IN
8446: IFFALSE 8467
// points := [ 40 , 10 , 20 ] ;
8448: LD_ADDR_VAR 0 9
8452: PUSH
8453: LD_INT 40
8455: PUSH
8456: LD_INT 10
8458: PUSH
8459: LD_INT 20
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: LIST
8466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8467: LD_VAR 0 6
8471: PPUSH
8472: CALL_OW 264
8476: PUSH
8477: LD_INT 9
8479: PUSH
8480: EMPTY
8481: LIST
8482: IN
8483: IFFALSE 8504
// points := [ 5 , 70 , 20 ] ;
8485: LD_ADDR_VAR 0 9
8489: PUSH
8490: LD_INT 5
8492: PUSH
8493: LD_INT 70
8495: PUSH
8496: LD_INT 20
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: LIST
8503: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8504: LD_VAR 0 6
8508: PPUSH
8509: CALL_OW 264
8513: PUSH
8514: LD_INT 10
8516: PUSH
8517: EMPTY
8518: LIST
8519: IN
8520: IFFALSE 8541
// points := [ 35 , 110 , 70 ] ;
8522: LD_ADDR_VAR 0 9
8526: PUSH
8527: LD_INT 35
8529: PUSH
8530: LD_INT 110
8532: PUSH
8533: LD_INT 70
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8541: LD_VAR 0 6
8545: PPUSH
8546: CALL_OW 265
8550: PUSH
8551: LD_INT 25
8553: EQUAL
8554: IFFALSE 8575
// points := [ 80 , 65 , 100 ] ;
8556: LD_ADDR_VAR 0 9
8560: PUSH
8561: LD_INT 80
8563: PUSH
8564: LD_INT 65
8566: PUSH
8567: LD_INT 100
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: LIST
8574: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8575: LD_VAR 0 6
8579: PPUSH
8580: CALL_OW 263
8584: PUSH
8585: LD_INT 1
8587: EQUAL
8588: IFFALSE 8623
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8590: LD_ADDR_VAR 0 10
8594: PUSH
8595: LD_VAR 0 10
8599: PUSH
8600: LD_VAR 0 6
8604: PPUSH
8605: CALL_OW 311
8609: PPUSH
8610: LD_INT 3
8612: PPUSH
8613: CALL_OW 259
8617: PUSH
8618: LD_INT 4
8620: MUL
8621: MUL
8622: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8623: LD_VAR 0 6
8627: PPUSH
8628: CALL_OW 263
8632: PUSH
8633: LD_INT 2
8635: EQUAL
8636: IFFALSE 8687
// begin j := IsControledBy ( i ) ;
8638: LD_ADDR_VAR 0 7
8642: PUSH
8643: LD_VAR 0 6
8647: PPUSH
8648: CALL_OW 312
8652: ST_TO_ADDR
// if j then
8653: LD_VAR 0 7
8657: IFFALSE 8687
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8659: LD_ADDR_VAR 0 10
8663: PUSH
8664: LD_VAR 0 10
8668: PUSH
8669: LD_VAR 0 7
8673: PPUSH
8674: LD_INT 3
8676: PPUSH
8677: CALL_OW 259
8681: PUSH
8682: LD_INT 3
8684: MUL
8685: MUL
8686: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8687: LD_VAR 0 6
8691: PPUSH
8692: CALL_OW 264
8696: PUSH
8697: LD_INT 5
8699: PUSH
8700: LD_INT 6
8702: PUSH
8703: LD_INT 46
8705: PUSH
8706: LD_INT 44
8708: PUSH
8709: LD_INT 47
8711: PUSH
8712: LD_INT 45
8714: PUSH
8715: LD_INT 28
8717: PUSH
8718: LD_INT 7
8720: PUSH
8721: LD_INT 27
8723: PUSH
8724: LD_INT 29
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: IN
8739: PUSH
8740: LD_VAR 0 1
8744: PPUSH
8745: LD_INT 52
8747: PPUSH
8748: CALL_OW 321
8752: PUSH
8753: LD_INT 2
8755: EQUAL
8756: AND
8757: IFFALSE 8774
// bpoints := bpoints * 1.2 ;
8759: LD_ADDR_VAR 0 10
8763: PUSH
8764: LD_VAR 0 10
8768: PUSH
8769: LD_REAL  1.20000000000000E+0000
8772: MUL
8773: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8774: LD_VAR 0 6
8778: PPUSH
8779: CALL_OW 264
8783: PUSH
8784: LD_INT 6
8786: PUSH
8787: LD_INT 46
8789: PUSH
8790: LD_INT 47
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: LIST
8797: IN
8798: IFFALSE 8815
// bpoints := bpoints * 1.2 ;
8800: LD_ADDR_VAR 0 10
8804: PUSH
8805: LD_VAR 0 10
8809: PUSH
8810: LD_REAL  1.20000000000000E+0000
8813: MUL
8814: ST_TO_ADDR
// end ; unit_building :
8815: GO 8829
8817: LD_INT 3
8819: DOUBLE
8820: EQUAL
8821: IFTRUE 8825
8823: GO 8828
8825: POP
// ; end ;
8826: GO 8829
8828: POP
// for j = 1 to 3 do
8829: LD_ADDR_VAR 0 7
8833: PUSH
8834: DOUBLE
8835: LD_INT 1
8837: DEC
8838: ST_TO_ADDR
8839: LD_INT 3
8841: PUSH
8842: FOR_TO
8843: IFFALSE 8896
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8845: LD_ADDR_VAR 0 5
8849: PUSH
8850: LD_VAR 0 5
8854: PPUSH
8855: LD_VAR 0 7
8859: PPUSH
8860: LD_VAR 0 5
8864: PUSH
8865: LD_VAR 0 7
8869: ARRAY
8870: PUSH
8871: LD_VAR 0 9
8875: PUSH
8876: LD_VAR 0 7
8880: ARRAY
8881: PUSH
8882: LD_VAR 0 10
8886: MUL
8887: PLUS
8888: PPUSH
8889: CALL_OW 1
8893: ST_TO_ADDR
8894: GO 8842
8896: POP
8897: POP
// end ;
8898: GO 7381
8900: POP
8901: POP
// result := Replace ( result , 4 , tmp ) ;
8902: LD_ADDR_VAR 0 5
8906: PUSH
8907: LD_VAR 0 5
8911: PPUSH
8912: LD_INT 4
8914: PPUSH
8915: LD_VAR 0 8
8919: PPUSH
8920: CALL_OW 1
8924: ST_TO_ADDR
// end ;
8925: LD_VAR 0 5
8929: RET
// export function DangerAtRange ( unit , range ) ; begin
8930: LD_INT 0
8932: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8933: LD_ADDR_VAR 0 3
8937: PUSH
8938: LD_VAR 0 1
8942: PPUSH
8943: CALL_OW 255
8947: PPUSH
8948: LD_VAR 0 1
8952: PPUSH
8953: CALL_OW 250
8957: PPUSH
8958: LD_VAR 0 1
8962: PPUSH
8963: CALL_OW 251
8967: PPUSH
8968: LD_VAR 0 2
8972: PPUSH
8973: CALL 7233 0 4
8977: ST_TO_ADDR
// end ;
8978: LD_VAR 0 3
8982: RET
// export function DangerInArea ( side , area ) ; begin
8983: LD_INT 0
8985: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8986: LD_ADDR_VAR 0 3
8990: PUSH
8991: LD_VAR 0 2
8995: PPUSH
8996: LD_INT 81
8998: PUSH
8999: LD_VAR 0 1
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PPUSH
9008: CALL_OW 70
9012: ST_TO_ADDR
// end ;
9013: LD_VAR 0 3
9017: RET
// export function IsExtension ( b ) ; begin
9018: LD_INT 0
9020: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9021: LD_ADDR_VAR 0 2
9025: PUSH
9026: LD_VAR 0 1
9030: PUSH
9031: LD_INT 23
9033: PUSH
9034: LD_INT 20
9036: PUSH
9037: LD_INT 22
9039: PUSH
9040: LD_INT 17
9042: PUSH
9043: LD_INT 24
9045: PUSH
9046: LD_INT 21
9048: PUSH
9049: LD_INT 19
9051: PUSH
9052: LD_INT 16
9054: PUSH
9055: LD_INT 25
9057: PUSH
9058: LD_INT 18
9060: PUSH
9061: EMPTY
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: IN
9073: ST_TO_ADDR
// end ;
9074: LD_VAR 0 2
9078: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
9079: LD_INT 0
9081: PPUSH
9082: PPUSH
9083: PPUSH
// result := [ ] ;
9084: LD_ADDR_VAR 0 3
9088: PUSH
9089: EMPTY
9090: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9091: LD_ADDR_VAR 0 4
9095: PUSH
9096: LD_VAR 0 2
9100: PPUSH
9101: LD_INT 21
9103: PUSH
9104: LD_INT 3
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PPUSH
9111: CALL_OW 70
9115: ST_TO_ADDR
// if not tmp then
9116: LD_VAR 0 4
9120: NOT
9121: IFFALSE 9125
// exit ;
9123: GO 9183
// for i in tmp do
9125: LD_ADDR_VAR 0 5
9129: PUSH
9130: LD_VAR 0 4
9134: PUSH
9135: FOR_IN
9136: IFFALSE 9171
// if GetBase ( i ) <> base then
9138: LD_VAR 0 5
9142: PPUSH
9143: CALL_OW 274
9147: PUSH
9148: LD_VAR 0 1
9152: NONEQUAL
9153: IFFALSE 9169
// ComLinkToBase ( base , i ) ;
9155: LD_VAR 0 1
9159: PPUSH
9160: LD_VAR 0 5
9164: PPUSH
9165: CALL_OW 169
9169: GO 9135
9171: POP
9172: POP
// result := tmp ;
9173: LD_ADDR_VAR 0 3
9177: PUSH
9178: LD_VAR 0 4
9182: ST_TO_ADDR
// end ;
9183: LD_VAR 0 3
9187: RET
// export function ComComplete ( unit , b ) ; var i ; begin
9188: LD_INT 0
9190: PPUSH
9191: PPUSH
// if BuildingStatus ( b ) = bs_build then
9192: LD_VAR 0 2
9196: PPUSH
9197: CALL_OW 461
9201: PUSH
9202: LD_INT 1
9204: EQUAL
9205: IFFALSE 9265
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9207: LD_VAR 0 1
9211: PPUSH
9212: LD_STRING h
9214: PUSH
9215: LD_VAR 0 2
9219: PPUSH
9220: CALL_OW 250
9224: PUSH
9225: LD_VAR 0 2
9229: PPUSH
9230: CALL_OW 251
9234: PUSH
9235: LD_VAR 0 2
9239: PUSH
9240: LD_INT 0
9242: PUSH
9243: LD_INT 0
9245: PUSH
9246: LD_INT 0
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: PUSH
9258: EMPTY
9259: LIST
9260: PPUSH
9261: CALL_OW 446
// end ;
9265: LD_VAR 0 3
9269: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9270: LD_INT 0
9272: PPUSH
9273: PPUSH
9274: PPUSH
9275: PPUSH
9276: PPUSH
9277: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
9278: LD_VAR 0 1
9282: NOT
9283: PUSH
9284: LD_VAR 0 1
9288: PPUSH
9289: CALL_OW 263
9293: PUSH
9294: LD_INT 2
9296: EQUAL
9297: NOT
9298: OR
9299: IFFALSE 9303
// exit ;
9301: GO 9619
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9303: LD_ADDR_VAR 0 6
9307: PUSH
9308: LD_INT 22
9310: PUSH
9311: LD_VAR 0 1
9315: PPUSH
9316: CALL_OW 255
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: PUSH
9325: LD_INT 2
9327: PUSH
9328: LD_INT 30
9330: PUSH
9331: LD_INT 36
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PUSH
9338: LD_INT 34
9340: PUSH
9341: LD_INT 31
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: LIST
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: PPUSH
9357: CALL_OW 69
9361: ST_TO_ADDR
// if not tmp then
9362: LD_VAR 0 6
9366: NOT
9367: IFFALSE 9371
// exit ;
9369: GO 9619
// result := [ ] ;
9371: LD_ADDR_VAR 0 2
9375: PUSH
9376: EMPTY
9377: ST_TO_ADDR
// for i in tmp do
9378: LD_ADDR_VAR 0 3
9382: PUSH
9383: LD_VAR 0 6
9387: PUSH
9388: FOR_IN
9389: IFFALSE 9460
// begin t := UnitsInside ( i ) ;
9391: LD_ADDR_VAR 0 4
9395: PUSH
9396: LD_VAR 0 3
9400: PPUSH
9401: CALL_OW 313
9405: ST_TO_ADDR
// if t then
9406: LD_VAR 0 4
9410: IFFALSE 9458
// for j in t do
9412: LD_ADDR_VAR 0 7
9416: PUSH
9417: LD_VAR 0 4
9421: PUSH
9422: FOR_IN
9423: IFFALSE 9456
// result := Insert ( result , result + 1 , j ) ;
9425: LD_ADDR_VAR 0 2
9429: PUSH
9430: LD_VAR 0 2
9434: PPUSH
9435: LD_VAR 0 2
9439: PUSH
9440: LD_INT 1
9442: PLUS
9443: PPUSH
9444: LD_VAR 0 7
9448: PPUSH
9449: CALL_OW 2
9453: ST_TO_ADDR
9454: GO 9422
9456: POP
9457: POP
// end ;
9458: GO 9388
9460: POP
9461: POP
// if not result then
9462: LD_VAR 0 2
9466: NOT
9467: IFFALSE 9471
// exit ;
9469: GO 9619
// mech := result [ 1 ] ;
9471: LD_ADDR_VAR 0 5
9475: PUSH
9476: LD_VAR 0 2
9480: PUSH
9481: LD_INT 1
9483: ARRAY
9484: ST_TO_ADDR
// if result > 1 then
9485: LD_VAR 0 2
9489: PUSH
9490: LD_INT 1
9492: GREATER
9493: IFFALSE 9605
// for i = 2 to result do
9495: LD_ADDR_VAR 0 3
9499: PUSH
9500: DOUBLE
9501: LD_INT 2
9503: DEC
9504: ST_TO_ADDR
9505: LD_VAR 0 2
9509: PUSH
9510: FOR_TO
9511: IFFALSE 9603
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9513: LD_ADDR_VAR 0 4
9517: PUSH
9518: LD_VAR 0 2
9522: PUSH
9523: LD_VAR 0 3
9527: ARRAY
9528: PPUSH
9529: LD_INT 3
9531: PPUSH
9532: CALL_OW 259
9536: PUSH
9537: LD_VAR 0 2
9541: PUSH
9542: LD_VAR 0 3
9546: ARRAY
9547: PPUSH
9548: CALL_OW 432
9552: MINUS
9553: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9554: LD_VAR 0 4
9558: PUSH
9559: LD_VAR 0 5
9563: PPUSH
9564: LD_INT 3
9566: PPUSH
9567: CALL_OW 259
9571: PUSH
9572: LD_VAR 0 5
9576: PPUSH
9577: CALL_OW 432
9581: MINUS
9582: GREATEREQUAL
9583: IFFALSE 9601
// mech := result [ i ] ;
9585: LD_ADDR_VAR 0 5
9589: PUSH
9590: LD_VAR 0 2
9594: PUSH
9595: LD_VAR 0 3
9599: ARRAY
9600: ST_TO_ADDR
// end ;
9601: GO 9510
9603: POP
9604: POP
// ComLinkTo ( vehicle , mech ) ;
9605: LD_VAR 0 1
9609: PPUSH
9610: LD_VAR 0 5
9614: PPUSH
9615: CALL_OW 135
// end ;
9619: LD_VAR 0 2
9623: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9624: LD_INT 0
9626: PPUSH
9627: PPUSH
9628: PPUSH
9629: PPUSH
9630: PPUSH
9631: PPUSH
9632: PPUSH
9633: PPUSH
9634: PPUSH
9635: PPUSH
9636: PPUSH
9637: PPUSH
9638: PPUSH
// result := [ ] ;
9639: LD_ADDR_VAR 0 7
9643: PUSH
9644: EMPTY
9645: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9646: LD_VAR 0 1
9650: PPUSH
9651: CALL_OW 266
9655: PUSH
9656: LD_INT 0
9658: PUSH
9659: LD_INT 1
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: IN
9666: NOT
9667: IFFALSE 9671
// exit ;
9669: GO 11302
// if name then
9671: LD_VAR 0 3
9675: IFFALSE 9691
// SetBName ( base_dep , name ) ;
9677: LD_VAR 0 1
9681: PPUSH
9682: LD_VAR 0 3
9686: PPUSH
9687: CALL_OW 500
// base := GetBase ( base_dep ) ;
9691: LD_ADDR_VAR 0 15
9695: PUSH
9696: LD_VAR 0 1
9700: PPUSH
9701: CALL_OW 274
9705: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9706: LD_ADDR_VAR 0 16
9710: PUSH
9711: LD_VAR 0 1
9715: PPUSH
9716: CALL_OW 255
9720: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9721: LD_ADDR_VAR 0 17
9725: PUSH
9726: LD_VAR 0 1
9730: PPUSH
9731: CALL_OW 248
9735: ST_TO_ADDR
// if sources then
9736: LD_VAR 0 5
9740: IFFALSE 9787
// for i = 1 to 3 do
9742: LD_ADDR_VAR 0 8
9746: PUSH
9747: DOUBLE
9748: LD_INT 1
9750: DEC
9751: ST_TO_ADDR
9752: LD_INT 3
9754: PUSH
9755: FOR_TO
9756: IFFALSE 9785
// AddResourceType ( base , i , sources [ i ] ) ;
9758: LD_VAR 0 15
9762: PPUSH
9763: LD_VAR 0 8
9767: PPUSH
9768: LD_VAR 0 5
9772: PUSH
9773: LD_VAR 0 8
9777: ARRAY
9778: PPUSH
9779: CALL_OW 276
9783: GO 9755
9785: POP
9786: POP
// buildings := GetBaseBuildings ( base , area ) ;
9787: LD_ADDR_VAR 0 18
9791: PUSH
9792: LD_VAR 0 15
9796: PPUSH
9797: LD_VAR 0 2
9801: PPUSH
9802: CALL 9079 0 2
9806: ST_TO_ADDR
// InitHc ;
9807: CALL_OW 19
// InitUc ;
9811: CALL_OW 18
// uc_side := side ;
9815: LD_ADDR_OWVAR 20
9819: PUSH
9820: LD_VAR 0 16
9824: ST_TO_ADDR
// uc_nation := nation ;
9825: LD_ADDR_OWVAR 21
9829: PUSH
9830: LD_VAR 0 17
9834: ST_TO_ADDR
// if buildings then
9835: LD_VAR 0 18
9839: IFFALSE 11161
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9841: LD_ADDR_VAR 0 19
9845: PUSH
9846: LD_VAR 0 18
9850: PPUSH
9851: LD_INT 2
9853: PUSH
9854: LD_INT 30
9856: PUSH
9857: LD_INT 29
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: PUSH
9864: LD_INT 30
9866: PUSH
9867: LD_INT 30
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: PPUSH
9879: CALL_OW 72
9883: ST_TO_ADDR
// if tmp then
9884: LD_VAR 0 19
9888: IFFALSE 9936
// for i in tmp do
9890: LD_ADDR_VAR 0 8
9894: PUSH
9895: LD_VAR 0 19
9899: PUSH
9900: FOR_IN
9901: IFFALSE 9934
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9903: LD_VAR 0 8
9907: PPUSH
9908: CALL_OW 250
9912: PPUSH
9913: LD_VAR 0 8
9917: PPUSH
9918: CALL_OW 251
9922: PPUSH
9923: LD_VAR 0 16
9927: PPUSH
9928: CALL_OW 441
9932: GO 9900
9934: POP
9935: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9936: LD_VAR 0 18
9940: PPUSH
9941: LD_INT 2
9943: PUSH
9944: LD_INT 30
9946: PUSH
9947: LD_INT 32
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PUSH
9954: LD_INT 30
9956: PUSH
9957: LD_INT 33
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: LIST
9968: PPUSH
9969: CALL_OW 72
9973: IFFALSE 10061
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9975: LD_ADDR_VAR 0 8
9979: PUSH
9980: LD_VAR 0 18
9984: PPUSH
9985: LD_INT 2
9987: PUSH
9988: LD_INT 30
9990: PUSH
9991: LD_INT 32
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: LD_INT 30
10000: PUSH
10001: LD_INT 33
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: LIST
10012: PPUSH
10013: CALL_OW 72
10017: PUSH
10018: FOR_IN
10019: IFFALSE 10059
// begin if not GetBWeapon ( i ) then
10021: LD_VAR 0 8
10025: PPUSH
10026: CALL_OW 269
10030: NOT
10031: IFFALSE 10057
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10033: LD_VAR 0 8
10037: PPUSH
10038: LD_VAR 0 8
10042: PPUSH
10043: LD_VAR 0 2
10047: PPUSH
10048: CALL 11307 0 2
10052: PPUSH
10053: CALL_OW 431
// end ;
10057: GO 10018
10059: POP
10060: POP
// end ; for i = 1 to personel do
10061: LD_ADDR_VAR 0 8
10065: PUSH
10066: DOUBLE
10067: LD_INT 1
10069: DEC
10070: ST_TO_ADDR
10071: LD_VAR 0 6
10075: PUSH
10076: FOR_TO
10077: IFFALSE 11141
// begin if i > 4 then
10079: LD_VAR 0 8
10083: PUSH
10084: LD_INT 4
10086: GREATER
10087: IFFALSE 10091
// break ;
10089: GO 11141
// case i of 1 :
10091: LD_VAR 0 8
10095: PUSH
10096: LD_INT 1
10098: DOUBLE
10099: EQUAL
10100: IFTRUE 10104
10102: GO 10184
10104: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10105: LD_ADDR_VAR 0 12
10109: PUSH
10110: LD_VAR 0 18
10114: PPUSH
10115: LD_INT 22
10117: PUSH
10118: LD_VAR 0 16
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: LD_INT 58
10129: PUSH
10130: EMPTY
10131: LIST
10132: PUSH
10133: LD_INT 2
10135: PUSH
10136: LD_INT 30
10138: PUSH
10139: LD_INT 32
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: LD_INT 30
10148: PUSH
10149: LD_INT 4
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PUSH
10156: LD_INT 30
10158: PUSH
10159: LD_INT 5
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: LIST
10176: PPUSH
10177: CALL_OW 72
10181: ST_TO_ADDR
10182: GO 10406
10184: LD_INT 2
10186: DOUBLE
10187: EQUAL
10188: IFTRUE 10192
10190: GO 10254
10192: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10193: LD_ADDR_VAR 0 12
10197: PUSH
10198: LD_VAR 0 18
10202: PPUSH
10203: LD_INT 22
10205: PUSH
10206: LD_VAR 0 16
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PUSH
10215: LD_INT 2
10217: PUSH
10218: LD_INT 30
10220: PUSH
10221: LD_INT 0
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PUSH
10228: LD_INT 30
10230: PUSH
10231: LD_INT 1
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: LIST
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PPUSH
10247: CALL_OW 72
10251: ST_TO_ADDR
10252: GO 10406
10254: LD_INT 3
10256: DOUBLE
10257: EQUAL
10258: IFTRUE 10262
10260: GO 10324
10262: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10263: LD_ADDR_VAR 0 12
10267: PUSH
10268: LD_VAR 0 18
10272: PPUSH
10273: LD_INT 22
10275: PUSH
10276: LD_VAR 0 16
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 2
10287: PUSH
10288: LD_INT 30
10290: PUSH
10291: LD_INT 2
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 30
10300: PUSH
10301: LD_INT 3
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: LIST
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PPUSH
10317: CALL_OW 72
10321: ST_TO_ADDR
10322: GO 10406
10324: LD_INT 4
10326: DOUBLE
10327: EQUAL
10328: IFTRUE 10332
10330: GO 10405
10332: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10333: LD_ADDR_VAR 0 12
10337: PUSH
10338: LD_VAR 0 18
10342: PPUSH
10343: LD_INT 22
10345: PUSH
10346: LD_VAR 0 16
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 2
10357: PUSH
10358: LD_INT 30
10360: PUSH
10361: LD_INT 6
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 30
10370: PUSH
10371: LD_INT 7
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 30
10380: PUSH
10381: LD_INT 8
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PPUSH
10398: CALL_OW 72
10402: ST_TO_ADDR
10403: GO 10406
10405: POP
// if i = 1 then
10406: LD_VAR 0 8
10410: PUSH
10411: LD_INT 1
10413: EQUAL
10414: IFFALSE 10525
// begin tmp := [ ] ;
10416: LD_ADDR_VAR 0 19
10420: PUSH
10421: EMPTY
10422: ST_TO_ADDR
// for j in f do
10423: LD_ADDR_VAR 0 9
10427: PUSH
10428: LD_VAR 0 12
10432: PUSH
10433: FOR_IN
10434: IFFALSE 10507
// if GetBType ( j ) = b_bunker then
10436: LD_VAR 0 9
10440: PPUSH
10441: CALL_OW 266
10445: PUSH
10446: LD_INT 32
10448: EQUAL
10449: IFFALSE 10476
// tmp := Insert ( tmp , 1 , j ) else
10451: LD_ADDR_VAR 0 19
10455: PUSH
10456: LD_VAR 0 19
10460: PPUSH
10461: LD_INT 1
10463: PPUSH
10464: LD_VAR 0 9
10468: PPUSH
10469: CALL_OW 2
10473: ST_TO_ADDR
10474: GO 10505
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10476: LD_ADDR_VAR 0 19
10480: PUSH
10481: LD_VAR 0 19
10485: PPUSH
10486: LD_VAR 0 19
10490: PUSH
10491: LD_INT 1
10493: PLUS
10494: PPUSH
10495: LD_VAR 0 9
10499: PPUSH
10500: CALL_OW 2
10504: ST_TO_ADDR
10505: GO 10433
10507: POP
10508: POP
// if tmp then
10509: LD_VAR 0 19
10513: IFFALSE 10525
// f := tmp ;
10515: LD_ADDR_VAR 0 12
10519: PUSH
10520: LD_VAR 0 19
10524: ST_TO_ADDR
// end ; x := personel [ i ] ;
10525: LD_ADDR_VAR 0 13
10529: PUSH
10530: LD_VAR 0 6
10534: PUSH
10535: LD_VAR 0 8
10539: ARRAY
10540: ST_TO_ADDR
// if x = - 1 then
10541: LD_VAR 0 13
10545: PUSH
10546: LD_INT 1
10548: NEG
10549: EQUAL
10550: IFFALSE 10759
// begin for j in f do
10552: LD_ADDR_VAR 0 9
10556: PUSH
10557: LD_VAR 0 12
10561: PUSH
10562: FOR_IN
10563: IFFALSE 10755
// repeat InitHc ;
10565: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10569: LD_VAR 0 9
10573: PPUSH
10574: CALL_OW 266
10578: PUSH
10579: LD_INT 5
10581: EQUAL
10582: IFFALSE 10652
// begin if UnitsInside ( j ) < 3 then
10584: LD_VAR 0 9
10588: PPUSH
10589: CALL_OW 313
10593: PUSH
10594: LD_INT 3
10596: LESS
10597: IFFALSE 10633
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10599: LD_INT 0
10601: PPUSH
10602: LD_INT 5
10604: PUSH
10605: LD_INT 8
10607: PUSH
10608: LD_INT 9
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: LIST
10615: PUSH
10616: LD_VAR 0 17
10620: ARRAY
10621: PPUSH
10622: LD_VAR 0 4
10626: PPUSH
10627: CALL_OW 380
10631: GO 10650
// PrepareHuman ( false , i , skill ) ;
10633: LD_INT 0
10635: PPUSH
10636: LD_VAR 0 8
10640: PPUSH
10641: LD_VAR 0 4
10645: PPUSH
10646: CALL_OW 380
// end else
10650: GO 10669
// PrepareHuman ( false , i , skill ) ;
10652: LD_INT 0
10654: PPUSH
10655: LD_VAR 0 8
10659: PPUSH
10660: LD_VAR 0 4
10664: PPUSH
10665: CALL_OW 380
// un := CreateHuman ;
10669: LD_ADDR_VAR 0 14
10673: PUSH
10674: CALL_OW 44
10678: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10679: LD_ADDR_VAR 0 7
10683: PUSH
10684: LD_VAR 0 7
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: LD_VAR 0 14
10696: PPUSH
10697: CALL_OW 2
10701: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10702: LD_VAR 0 14
10706: PPUSH
10707: LD_VAR 0 9
10711: PPUSH
10712: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10716: LD_VAR 0 9
10720: PPUSH
10721: CALL_OW 313
10725: PUSH
10726: LD_INT 6
10728: EQUAL
10729: PUSH
10730: LD_VAR 0 9
10734: PPUSH
10735: CALL_OW 266
10739: PUSH
10740: LD_INT 32
10742: PUSH
10743: LD_INT 31
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: IN
10750: OR
10751: IFFALSE 10565
10753: GO 10562
10755: POP
10756: POP
// end else
10757: GO 11139
// for j = 1 to x do
10759: LD_ADDR_VAR 0 9
10763: PUSH
10764: DOUBLE
10765: LD_INT 1
10767: DEC
10768: ST_TO_ADDR
10769: LD_VAR 0 13
10773: PUSH
10774: FOR_TO
10775: IFFALSE 11137
// begin InitHc ;
10777: CALL_OW 19
// if not f then
10781: LD_VAR 0 12
10785: NOT
10786: IFFALSE 10875
// begin PrepareHuman ( false , i , skill ) ;
10788: LD_INT 0
10790: PPUSH
10791: LD_VAR 0 8
10795: PPUSH
10796: LD_VAR 0 4
10800: PPUSH
10801: CALL_OW 380
// un := CreateHuman ;
10805: LD_ADDR_VAR 0 14
10809: PUSH
10810: CALL_OW 44
10814: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10815: LD_ADDR_VAR 0 7
10819: PUSH
10820: LD_VAR 0 7
10824: PPUSH
10825: LD_INT 1
10827: PPUSH
10828: LD_VAR 0 14
10832: PPUSH
10833: CALL_OW 2
10837: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10838: LD_VAR 0 14
10842: PPUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 250
10852: PPUSH
10853: LD_VAR 0 1
10857: PPUSH
10858: CALL_OW 251
10862: PPUSH
10863: LD_INT 10
10865: PPUSH
10866: LD_INT 0
10868: PPUSH
10869: CALL_OW 50
// continue ;
10873: GO 10774
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10875: LD_VAR 0 12
10879: PUSH
10880: LD_INT 1
10882: ARRAY
10883: PPUSH
10884: CALL_OW 313
10888: PUSH
10889: LD_VAR 0 12
10893: PUSH
10894: LD_INT 1
10896: ARRAY
10897: PPUSH
10898: CALL_OW 266
10902: PUSH
10903: LD_INT 32
10905: PUSH
10906: LD_INT 31
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: IN
10913: AND
10914: PUSH
10915: LD_VAR 0 12
10919: PUSH
10920: LD_INT 1
10922: ARRAY
10923: PPUSH
10924: CALL_OW 313
10928: PUSH
10929: LD_INT 6
10931: EQUAL
10932: OR
10933: IFFALSE 10953
// f := Delete ( f , 1 ) ;
10935: LD_ADDR_VAR 0 12
10939: PUSH
10940: LD_VAR 0 12
10944: PPUSH
10945: LD_INT 1
10947: PPUSH
10948: CALL_OW 3
10952: ST_TO_ADDR
// if not f then
10953: LD_VAR 0 12
10957: NOT
10958: IFFALSE 10976
// begin x := x + 2 ;
10960: LD_ADDR_VAR 0 13
10964: PUSH
10965: LD_VAR 0 13
10969: PUSH
10970: LD_INT 2
10972: PLUS
10973: ST_TO_ADDR
// continue ;
10974: GO 10774
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10976: LD_VAR 0 12
10980: PUSH
10981: LD_INT 1
10983: ARRAY
10984: PPUSH
10985: CALL_OW 266
10989: PUSH
10990: LD_INT 5
10992: EQUAL
10993: IFFALSE 11067
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10995: LD_VAR 0 12
10999: PUSH
11000: LD_INT 1
11002: ARRAY
11003: PPUSH
11004: CALL_OW 313
11008: PUSH
11009: LD_INT 3
11011: LESS
11012: IFFALSE 11048
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11014: LD_INT 0
11016: PPUSH
11017: LD_INT 5
11019: PUSH
11020: LD_INT 8
11022: PUSH
11023: LD_INT 9
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: LIST
11030: PUSH
11031: LD_VAR 0 17
11035: ARRAY
11036: PPUSH
11037: LD_VAR 0 4
11041: PPUSH
11042: CALL_OW 380
11046: GO 11065
// PrepareHuman ( false , i , skill ) ;
11048: LD_INT 0
11050: PPUSH
11051: LD_VAR 0 8
11055: PPUSH
11056: LD_VAR 0 4
11060: PPUSH
11061: CALL_OW 380
// end else
11065: GO 11084
// PrepareHuman ( false , i , skill ) ;
11067: LD_INT 0
11069: PPUSH
11070: LD_VAR 0 8
11074: PPUSH
11075: LD_VAR 0 4
11079: PPUSH
11080: CALL_OW 380
// un := CreateHuman ;
11084: LD_ADDR_VAR 0 14
11088: PUSH
11089: CALL_OW 44
11093: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11094: LD_ADDR_VAR 0 7
11098: PUSH
11099: LD_VAR 0 7
11103: PPUSH
11104: LD_INT 1
11106: PPUSH
11107: LD_VAR 0 14
11111: PPUSH
11112: CALL_OW 2
11116: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11117: LD_VAR 0 14
11121: PPUSH
11122: LD_VAR 0 12
11126: PUSH
11127: LD_INT 1
11129: ARRAY
11130: PPUSH
11131: CALL_OW 52
// end ;
11135: GO 10774
11137: POP
11138: POP
// end ;
11139: GO 10076
11141: POP
11142: POP
// result := result ^ buildings ;
11143: LD_ADDR_VAR 0 7
11147: PUSH
11148: LD_VAR 0 7
11152: PUSH
11153: LD_VAR 0 18
11157: ADD
11158: ST_TO_ADDR
// end else
11159: GO 11302
// begin for i = 1 to personel do
11161: LD_ADDR_VAR 0 8
11165: PUSH
11166: DOUBLE
11167: LD_INT 1
11169: DEC
11170: ST_TO_ADDR
11171: LD_VAR 0 6
11175: PUSH
11176: FOR_TO
11177: IFFALSE 11300
// begin if i > 4 then
11179: LD_VAR 0 8
11183: PUSH
11184: LD_INT 4
11186: GREATER
11187: IFFALSE 11191
// break ;
11189: GO 11300
// x := personel [ i ] ;
11191: LD_ADDR_VAR 0 13
11195: PUSH
11196: LD_VAR 0 6
11200: PUSH
11201: LD_VAR 0 8
11205: ARRAY
11206: ST_TO_ADDR
// if x = - 1 then
11207: LD_VAR 0 13
11211: PUSH
11212: LD_INT 1
11214: NEG
11215: EQUAL
11216: IFFALSE 11220
// continue ;
11218: GO 11176
// PrepareHuman ( false , i , skill ) ;
11220: LD_INT 0
11222: PPUSH
11223: LD_VAR 0 8
11227: PPUSH
11228: LD_VAR 0 4
11232: PPUSH
11233: CALL_OW 380
// un := CreateHuman ;
11237: LD_ADDR_VAR 0 14
11241: PUSH
11242: CALL_OW 44
11246: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11247: LD_VAR 0 14
11251: PPUSH
11252: LD_VAR 0 1
11256: PPUSH
11257: CALL_OW 250
11261: PPUSH
11262: LD_VAR 0 1
11266: PPUSH
11267: CALL_OW 251
11271: PPUSH
11272: LD_INT 10
11274: PPUSH
11275: LD_INT 0
11277: PPUSH
11278: CALL_OW 50
// result := result ^ un ;
11282: LD_ADDR_VAR 0 7
11286: PUSH
11287: LD_VAR 0 7
11291: PUSH
11292: LD_VAR 0 14
11296: ADD
11297: ST_TO_ADDR
// end ;
11298: GO 11176
11300: POP
11301: POP
// end ; end ;
11302: LD_VAR 0 7
11306: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11307: LD_INT 0
11309: PPUSH
11310: PPUSH
11311: PPUSH
11312: PPUSH
11313: PPUSH
11314: PPUSH
11315: PPUSH
11316: PPUSH
11317: PPUSH
11318: PPUSH
11319: PPUSH
11320: PPUSH
11321: PPUSH
11322: PPUSH
11323: PPUSH
11324: PPUSH
// result := false ;
11325: LD_ADDR_VAR 0 3
11329: PUSH
11330: LD_INT 0
11332: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11333: LD_VAR 0 1
11337: NOT
11338: PUSH
11339: LD_VAR 0 1
11343: PPUSH
11344: CALL_OW 266
11348: PUSH
11349: LD_INT 32
11351: PUSH
11352: LD_INT 33
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: IN
11359: NOT
11360: OR
11361: IFFALSE 11365
// exit ;
11363: GO 12501
// nat := GetNation ( tower ) ;
11365: LD_ADDR_VAR 0 12
11369: PUSH
11370: LD_VAR 0 1
11374: PPUSH
11375: CALL_OW 248
11379: ST_TO_ADDR
// side := GetSide ( tower ) ;
11380: LD_ADDR_VAR 0 16
11384: PUSH
11385: LD_VAR 0 1
11389: PPUSH
11390: CALL_OW 255
11394: ST_TO_ADDR
// x := GetX ( tower ) ;
11395: LD_ADDR_VAR 0 10
11399: PUSH
11400: LD_VAR 0 1
11404: PPUSH
11405: CALL_OW 250
11409: ST_TO_ADDR
// y := GetY ( tower ) ;
11410: LD_ADDR_VAR 0 11
11414: PUSH
11415: LD_VAR 0 1
11419: PPUSH
11420: CALL_OW 251
11424: ST_TO_ADDR
// if not x or not y then
11425: LD_VAR 0 10
11429: NOT
11430: PUSH
11431: LD_VAR 0 11
11435: NOT
11436: OR
11437: IFFALSE 11441
// exit ;
11439: GO 12501
// weapon := 0 ;
11441: LD_ADDR_VAR 0 18
11445: PUSH
11446: LD_INT 0
11448: ST_TO_ADDR
// fac_list := [ ] ;
11449: LD_ADDR_VAR 0 17
11453: PUSH
11454: EMPTY
11455: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
11456: LD_ADDR_VAR 0 6
11460: PUSH
11461: LD_VAR 0 1
11465: PPUSH
11466: CALL_OW 274
11470: PPUSH
11471: LD_VAR 0 2
11475: PPUSH
11476: CALL 9079 0 2
11480: PPUSH
11481: LD_INT 30
11483: PUSH
11484: LD_INT 3
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PPUSH
11491: CALL_OW 72
11495: ST_TO_ADDR
// if not factories then
11496: LD_VAR 0 6
11500: NOT
11501: IFFALSE 11505
// exit ;
11503: GO 12501
// for i in factories do
11505: LD_ADDR_VAR 0 8
11509: PUSH
11510: LD_VAR 0 6
11514: PUSH
11515: FOR_IN
11516: IFFALSE 11541
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11518: LD_ADDR_VAR 0 17
11522: PUSH
11523: LD_VAR 0 17
11527: PUSH
11528: LD_VAR 0 8
11532: PPUSH
11533: CALL_OW 478
11537: UNION
11538: ST_TO_ADDR
11539: GO 11515
11541: POP
11542: POP
// if not fac_list then
11543: LD_VAR 0 17
11547: NOT
11548: IFFALSE 11552
// exit ;
11550: GO 12501
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11552: LD_ADDR_VAR 0 5
11556: PUSH
11557: LD_INT 4
11559: PUSH
11560: LD_INT 5
11562: PUSH
11563: LD_INT 9
11565: PUSH
11566: LD_INT 10
11568: PUSH
11569: LD_INT 6
11571: PUSH
11572: LD_INT 7
11574: PUSH
11575: LD_INT 11
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 27
11589: PUSH
11590: LD_INT 28
11592: PUSH
11593: LD_INT 26
11595: PUSH
11596: LD_INT 30
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: PUSH
11605: LD_INT 43
11607: PUSH
11608: LD_INT 44
11610: PUSH
11611: LD_INT 46
11613: PUSH
11614: LD_INT 45
11616: PUSH
11617: LD_INT 47
11619: PUSH
11620: LD_INT 49
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: LIST
11635: PUSH
11636: LD_VAR 0 12
11640: ARRAY
11641: ST_TO_ADDR
// for i in list do
11642: LD_ADDR_VAR 0 8
11646: PUSH
11647: LD_VAR 0 5
11651: PUSH
11652: FOR_IN
11653: IFFALSE 11686
// if not i in fac_list then
11655: LD_VAR 0 8
11659: PUSH
11660: LD_VAR 0 17
11664: IN
11665: NOT
11666: IFFALSE 11684
// list := list diff i ;
11668: LD_ADDR_VAR 0 5
11672: PUSH
11673: LD_VAR 0 5
11677: PUSH
11678: LD_VAR 0 8
11682: DIFF
11683: ST_TO_ADDR
11684: GO 11652
11686: POP
11687: POP
// if not list then
11688: LD_VAR 0 5
11692: NOT
11693: IFFALSE 11697
// exit ;
11695: GO 12501
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11697: LD_VAR 0 12
11701: PUSH
11702: LD_INT 3
11704: EQUAL
11705: PUSH
11706: LD_INT 49
11708: PUSH
11709: LD_VAR 0 5
11713: IN
11714: AND
11715: PUSH
11716: LD_INT 31
11718: PPUSH
11719: LD_VAR 0 16
11723: PPUSH
11724: CALL_OW 321
11728: PUSH
11729: LD_INT 2
11731: EQUAL
11732: AND
11733: IFFALSE 11793
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11735: LD_INT 22
11737: PUSH
11738: LD_VAR 0 16
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: LD_INT 35
11749: PUSH
11750: LD_INT 49
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: LD_INT 91
11759: PUSH
11760: LD_VAR 0 1
11764: PUSH
11765: LD_INT 10
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: LIST
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: LIST
11777: PPUSH
11778: CALL_OW 69
11782: NOT
11783: IFFALSE 11793
// weapon := ru_time_lapser ;
11785: LD_ADDR_VAR 0 18
11789: PUSH
11790: LD_INT 49
11792: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11793: LD_VAR 0 12
11797: PUSH
11798: LD_INT 1
11800: PUSH
11801: LD_INT 2
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: IN
11808: PUSH
11809: LD_INT 11
11811: PUSH
11812: LD_VAR 0 5
11816: IN
11817: PUSH
11818: LD_INT 30
11820: PUSH
11821: LD_VAR 0 5
11825: IN
11826: OR
11827: AND
11828: PUSH
11829: LD_INT 6
11831: PPUSH
11832: LD_VAR 0 16
11836: PPUSH
11837: CALL_OW 321
11841: PUSH
11842: LD_INT 2
11844: EQUAL
11845: AND
11846: IFFALSE 12011
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11848: LD_INT 22
11850: PUSH
11851: LD_VAR 0 16
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: LD_INT 2
11862: PUSH
11863: LD_INT 35
11865: PUSH
11866: LD_INT 11
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 35
11875: PUSH
11876: LD_INT 30
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: LIST
11887: PUSH
11888: LD_INT 91
11890: PUSH
11891: LD_VAR 0 1
11895: PUSH
11896: LD_INT 18
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: LIST
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: LIST
11908: PPUSH
11909: CALL_OW 69
11913: NOT
11914: PUSH
11915: LD_INT 22
11917: PUSH
11918: LD_VAR 0 16
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 2
11929: PUSH
11930: LD_INT 30
11932: PUSH
11933: LD_INT 32
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 30
11942: PUSH
11943: LD_INT 33
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 91
11957: PUSH
11958: LD_VAR 0 1
11962: PUSH
11963: LD_INT 12
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: LIST
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: LIST
11975: PUSH
11976: EMPTY
11977: LIST
11978: PPUSH
11979: CALL_OW 69
11983: PUSH
11984: LD_INT 2
11986: GREATER
11987: AND
11988: IFFALSE 12011
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11990: LD_ADDR_VAR 0 18
11994: PUSH
11995: LD_INT 11
11997: PUSH
11998: LD_INT 30
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PUSH
12005: LD_VAR 0 12
12009: ARRAY
12010: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12011: LD_VAR 0 18
12015: NOT
12016: PUSH
12017: LD_INT 40
12019: PPUSH
12020: LD_VAR 0 16
12024: PPUSH
12025: CALL_OW 321
12029: PUSH
12030: LD_INT 2
12032: EQUAL
12033: AND
12034: PUSH
12035: LD_INT 7
12037: PUSH
12038: LD_VAR 0 5
12042: IN
12043: PUSH
12044: LD_INT 28
12046: PUSH
12047: LD_VAR 0 5
12051: IN
12052: OR
12053: PUSH
12054: LD_INT 45
12056: PUSH
12057: LD_VAR 0 5
12061: IN
12062: OR
12063: AND
12064: IFFALSE 12318
// begin hex := GetHexInfo ( x , y ) ;
12066: LD_ADDR_VAR 0 4
12070: PUSH
12071: LD_VAR 0 10
12075: PPUSH
12076: LD_VAR 0 11
12080: PPUSH
12081: CALL_OW 546
12085: ST_TO_ADDR
// if hex [ 1 ] then
12086: LD_VAR 0 4
12090: PUSH
12091: LD_INT 1
12093: ARRAY
12094: IFFALSE 12098
// exit ;
12096: GO 12501
// height := hex [ 2 ] ;
12098: LD_ADDR_VAR 0 15
12102: PUSH
12103: LD_VAR 0 4
12107: PUSH
12108: LD_INT 2
12110: ARRAY
12111: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12112: LD_ADDR_VAR 0 14
12116: PUSH
12117: LD_INT 0
12119: PUSH
12120: LD_INT 2
12122: PUSH
12123: LD_INT 3
12125: PUSH
12126: LD_INT 5
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: ST_TO_ADDR
// for i in tmp do
12135: LD_ADDR_VAR 0 8
12139: PUSH
12140: LD_VAR 0 14
12144: PUSH
12145: FOR_IN
12146: IFFALSE 12316
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12148: LD_ADDR_VAR 0 9
12152: PUSH
12153: LD_VAR 0 10
12157: PPUSH
12158: LD_VAR 0 8
12162: PPUSH
12163: LD_INT 5
12165: PPUSH
12166: CALL_OW 272
12170: PUSH
12171: LD_VAR 0 11
12175: PPUSH
12176: LD_VAR 0 8
12180: PPUSH
12181: LD_INT 5
12183: PPUSH
12184: CALL_OW 273
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12193: LD_VAR 0 9
12197: PUSH
12198: LD_INT 1
12200: ARRAY
12201: PPUSH
12202: LD_VAR 0 9
12206: PUSH
12207: LD_INT 2
12209: ARRAY
12210: PPUSH
12211: CALL_OW 488
12215: IFFALSE 12314
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12217: LD_ADDR_VAR 0 4
12221: PUSH
12222: LD_VAR 0 9
12226: PUSH
12227: LD_INT 1
12229: ARRAY
12230: PPUSH
12231: LD_VAR 0 9
12235: PUSH
12236: LD_INT 2
12238: ARRAY
12239: PPUSH
12240: CALL_OW 546
12244: ST_TO_ADDR
// if hex [ 1 ] then
12245: LD_VAR 0 4
12249: PUSH
12250: LD_INT 1
12252: ARRAY
12253: IFFALSE 12257
// continue ;
12255: GO 12145
// h := hex [ 2 ] ;
12257: LD_ADDR_VAR 0 13
12261: PUSH
12262: LD_VAR 0 4
12266: PUSH
12267: LD_INT 2
12269: ARRAY
12270: ST_TO_ADDR
// if h + 7 < height then
12271: LD_VAR 0 13
12275: PUSH
12276: LD_INT 7
12278: PLUS
12279: PUSH
12280: LD_VAR 0 15
12284: LESS
12285: IFFALSE 12314
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12287: LD_ADDR_VAR 0 18
12291: PUSH
12292: LD_INT 7
12294: PUSH
12295: LD_INT 28
12297: PUSH
12298: LD_INT 45
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: LIST
12305: PUSH
12306: LD_VAR 0 12
12310: ARRAY
12311: ST_TO_ADDR
// break ;
12312: GO 12316
// end ; end ; end ;
12314: GO 12145
12316: POP
12317: POP
// end ; if not weapon then
12318: LD_VAR 0 18
12322: NOT
12323: IFFALSE 12383
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12325: LD_ADDR_VAR 0 5
12329: PUSH
12330: LD_VAR 0 5
12334: PUSH
12335: LD_INT 11
12337: PUSH
12338: LD_INT 30
12340: PUSH
12341: LD_INT 49
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: DIFF
12349: ST_TO_ADDR
// if not list then
12350: LD_VAR 0 5
12354: NOT
12355: IFFALSE 12359
// exit ;
12357: GO 12501
// weapon := list [ rand ( 1 , list ) ] ;
12359: LD_ADDR_VAR 0 18
12363: PUSH
12364: LD_VAR 0 5
12368: PUSH
12369: LD_INT 1
12371: PPUSH
12372: LD_VAR 0 5
12376: PPUSH
12377: CALL_OW 12
12381: ARRAY
12382: ST_TO_ADDR
// end ; if weapon then
12383: LD_VAR 0 18
12387: IFFALSE 12501
// begin tmp := CostOfWeapon ( weapon ) ;
12389: LD_ADDR_VAR 0 14
12393: PUSH
12394: LD_VAR 0 18
12398: PPUSH
12399: CALL_OW 451
12403: ST_TO_ADDR
// j := GetBase ( tower ) ;
12404: LD_ADDR_VAR 0 9
12408: PUSH
12409: LD_VAR 0 1
12413: PPUSH
12414: CALL_OW 274
12418: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12419: LD_VAR 0 9
12423: PPUSH
12424: LD_INT 1
12426: PPUSH
12427: CALL_OW 275
12431: PUSH
12432: LD_VAR 0 14
12436: PUSH
12437: LD_INT 1
12439: ARRAY
12440: GREATEREQUAL
12441: PUSH
12442: LD_VAR 0 9
12446: PPUSH
12447: LD_INT 2
12449: PPUSH
12450: CALL_OW 275
12454: PUSH
12455: LD_VAR 0 14
12459: PUSH
12460: LD_INT 2
12462: ARRAY
12463: GREATEREQUAL
12464: AND
12465: PUSH
12466: LD_VAR 0 9
12470: PPUSH
12471: LD_INT 3
12473: PPUSH
12474: CALL_OW 275
12478: PUSH
12479: LD_VAR 0 14
12483: PUSH
12484: LD_INT 3
12486: ARRAY
12487: GREATEREQUAL
12488: AND
12489: IFFALSE 12501
// result := weapon ;
12491: LD_ADDR_VAR 0 3
12495: PUSH
12496: LD_VAR 0 18
12500: ST_TO_ADDR
// end ; end ;
12501: LD_VAR 0 3
12505: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12506: LD_INT 0
12508: PPUSH
12509: PPUSH
// result := true ;
12510: LD_ADDR_VAR 0 3
12514: PUSH
12515: LD_INT 1
12517: ST_TO_ADDR
// if array1 = array2 then
12518: LD_VAR 0 1
12522: PUSH
12523: LD_VAR 0 2
12527: EQUAL
12528: IFFALSE 12588
// begin for i = 1 to array1 do
12530: LD_ADDR_VAR 0 4
12534: PUSH
12535: DOUBLE
12536: LD_INT 1
12538: DEC
12539: ST_TO_ADDR
12540: LD_VAR 0 1
12544: PUSH
12545: FOR_TO
12546: IFFALSE 12584
// if array1 [ i ] <> array2 [ i ] then
12548: LD_VAR 0 1
12552: PUSH
12553: LD_VAR 0 4
12557: ARRAY
12558: PUSH
12559: LD_VAR 0 2
12563: PUSH
12564: LD_VAR 0 4
12568: ARRAY
12569: NONEQUAL
12570: IFFALSE 12582
// begin result := false ;
12572: LD_ADDR_VAR 0 3
12576: PUSH
12577: LD_INT 0
12579: ST_TO_ADDR
// break ;
12580: GO 12584
// end ;
12582: GO 12545
12584: POP
12585: POP
// end else
12586: GO 12596
// result := false ;
12588: LD_ADDR_VAR 0 3
12592: PUSH
12593: LD_INT 0
12595: ST_TO_ADDR
// end ;
12596: LD_VAR 0 3
12600: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12601: LD_INT 0
12603: PPUSH
12604: PPUSH
12605: PPUSH
// pom := GetBase ( fac ) ;
12606: LD_ADDR_VAR 0 5
12610: PUSH
12611: LD_VAR 0 1
12615: PPUSH
12616: CALL_OW 274
12620: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12621: LD_ADDR_VAR 0 4
12625: PUSH
12626: LD_VAR 0 2
12630: PUSH
12631: LD_INT 1
12633: ARRAY
12634: PPUSH
12635: LD_VAR 0 2
12639: PUSH
12640: LD_INT 2
12642: ARRAY
12643: PPUSH
12644: LD_VAR 0 2
12648: PUSH
12649: LD_INT 3
12651: ARRAY
12652: PPUSH
12653: LD_VAR 0 2
12657: PUSH
12658: LD_INT 4
12660: ARRAY
12661: PPUSH
12662: CALL_OW 449
12666: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12667: LD_ADDR_VAR 0 3
12671: PUSH
12672: LD_VAR 0 5
12676: PPUSH
12677: LD_INT 1
12679: PPUSH
12680: CALL_OW 275
12684: PUSH
12685: LD_VAR 0 4
12689: PUSH
12690: LD_INT 1
12692: ARRAY
12693: GREATEREQUAL
12694: PUSH
12695: LD_VAR 0 5
12699: PPUSH
12700: LD_INT 2
12702: PPUSH
12703: CALL_OW 275
12707: PUSH
12708: LD_VAR 0 4
12712: PUSH
12713: LD_INT 2
12715: ARRAY
12716: GREATEREQUAL
12717: AND
12718: PUSH
12719: LD_VAR 0 5
12723: PPUSH
12724: LD_INT 3
12726: PPUSH
12727: CALL_OW 275
12731: PUSH
12732: LD_VAR 0 4
12736: PUSH
12737: LD_INT 3
12739: ARRAY
12740: GREATEREQUAL
12741: AND
12742: ST_TO_ADDR
// end ;
12743: LD_VAR 0 3
12747: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12748: LD_INT 0
12750: PPUSH
12751: PPUSH
12752: PPUSH
12753: PPUSH
// pom := GetBase ( building ) ;
12754: LD_ADDR_VAR 0 3
12758: PUSH
12759: LD_VAR 0 1
12763: PPUSH
12764: CALL_OW 274
12768: ST_TO_ADDR
// if not pom then
12769: LD_VAR 0 3
12773: NOT
12774: IFFALSE 12778
// exit ;
12776: GO 12948
// btype := GetBType ( building ) ;
12778: LD_ADDR_VAR 0 5
12782: PUSH
12783: LD_VAR 0 1
12787: PPUSH
12788: CALL_OW 266
12792: ST_TO_ADDR
// if btype = b_armoury then
12793: LD_VAR 0 5
12797: PUSH
12798: LD_INT 4
12800: EQUAL
12801: IFFALSE 12811
// btype := b_barracks ;
12803: LD_ADDR_VAR 0 5
12807: PUSH
12808: LD_INT 5
12810: ST_TO_ADDR
// if btype = b_depot then
12811: LD_VAR 0 5
12815: PUSH
12816: LD_INT 0
12818: EQUAL
12819: IFFALSE 12829
// btype := b_warehouse ;
12821: LD_ADDR_VAR 0 5
12825: PUSH
12826: LD_INT 1
12828: ST_TO_ADDR
// if btype = b_workshop then
12829: LD_VAR 0 5
12833: PUSH
12834: LD_INT 2
12836: EQUAL
12837: IFFALSE 12847
// btype := b_factory ;
12839: LD_ADDR_VAR 0 5
12843: PUSH
12844: LD_INT 3
12846: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12847: LD_ADDR_VAR 0 4
12851: PUSH
12852: LD_VAR 0 5
12856: PPUSH
12857: LD_VAR 0 1
12861: PPUSH
12862: CALL_OW 248
12866: PPUSH
12867: CALL_OW 450
12871: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12872: LD_ADDR_VAR 0 2
12876: PUSH
12877: LD_VAR 0 3
12881: PPUSH
12882: LD_INT 1
12884: PPUSH
12885: CALL_OW 275
12889: PUSH
12890: LD_VAR 0 4
12894: PUSH
12895: LD_INT 1
12897: ARRAY
12898: GREATEREQUAL
12899: PUSH
12900: LD_VAR 0 3
12904: PPUSH
12905: LD_INT 2
12907: PPUSH
12908: CALL_OW 275
12912: PUSH
12913: LD_VAR 0 4
12917: PUSH
12918: LD_INT 2
12920: ARRAY
12921: GREATEREQUAL
12922: AND
12923: PUSH
12924: LD_VAR 0 3
12928: PPUSH
12929: LD_INT 3
12931: PPUSH
12932: CALL_OW 275
12936: PUSH
12937: LD_VAR 0 4
12941: PUSH
12942: LD_INT 3
12944: ARRAY
12945: GREATEREQUAL
12946: AND
12947: ST_TO_ADDR
// end ;
12948: LD_VAR 0 2
12952: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12953: LD_INT 0
12955: PPUSH
12956: PPUSH
12957: PPUSH
// pom := GetBase ( building ) ;
12958: LD_ADDR_VAR 0 4
12962: PUSH
12963: LD_VAR 0 1
12967: PPUSH
12968: CALL_OW 274
12972: ST_TO_ADDR
// if not pom then
12973: LD_VAR 0 4
12977: NOT
12978: IFFALSE 12982
// exit ;
12980: GO 13083
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12982: LD_ADDR_VAR 0 5
12986: PUSH
12987: LD_VAR 0 2
12991: PPUSH
12992: LD_VAR 0 1
12996: PPUSH
12997: CALL_OW 248
13001: PPUSH
13002: CALL_OW 450
13006: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13007: LD_ADDR_VAR 0 3
13011: PUSH
13012: LD_VAR 0 4
13016: PPUSH
13017: LD_INT 1
13019: PPUSH
13020: CALL_OW 275
13024: PUSH
13025: LD_VAR 0 5
13029: PUSH
13030: LD_INT 1
13032: ARRAY
13033: GREATEREQUAL
13034: PUSH
13035: LD_VAR 0 4
13039: PPUSH
13040: LD_INT 2
13042: PPUSH
13043: CALL_OW 275
13047: PUSH
13048: LD_VAR 0 5
13052: PUSH
13053: LD_INT 2
13055: ARRAY
13056: GREATEREQUAL
13057: AND
13058: PUSH
13059: LD_VAR 0 4
13063: PPUSH
13064: LD_INT 3
13066: PPUSH
13067: CALL_OW 275
13071: PUSH
13072: LD_VAR 0 5
13076: PUSH
13077: LD_INT 3
13079: ARRAY
13080: GREATEREQUAL
13081: AND
13082: ST_TO_ADDR
// end ;
13083: LD_VAR 0 3
13087: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
13088: LD_INT 0
13090: PPUSH
13091: PPUSH
13092: PPUSH
13093: PPUSH
13094: PPUSH
13095: PPUSH
13096: PPUSH
13097: PPUSH
13098: PPUSH
13099: PPUSH
// result := false ;
13100: LD_ADDR_VAR 0 6
13104: PUSH
13105: LD_INT 0
13107: ST_TO_ADDR
// if not base or not btype or not x or not y then
13108: LD_VAR 0 1
13112: NOT
13113: PUSH
13114: LD_VAR 0 2
13118: NOT
13119: OR
13120: PUSH
13121: LD_VAR 0 3
13125: NOT
13126: OR
13127: PUSH
13128: LD_VAR 0 4
13132: NOT
13133: OR
13134: IFFALSE 13138
// exit ;
13136: GO 13747
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
13138: LD_ADDR_VAR 0 12
13142: PUSH
13143: LD_VAR 0 2
13147: PPUSH
13148: LD_VAR 0 3
13152: PPUSH
13153: LD_VAR 0 4
13157: PPUSH
13158: LD_VAR 0 5
13162: PPUSH
13163: LD_VAR 0 1
13167: PUSH
13168: LD_INT 1
13170: ARRAY
13171: PPUSH
13172: CALL_OW 248
13176: PPUSH
13177: LD_INT 0
13179: PPUSH
13180: CALL 14584 0 6
13184: ST_TO_ADDR
// if not hexes then
13185: LD_VAR 0 12
13189: NOT
13190: IFFALSE 13194
// exit ;
13192: GO 13747
// for i = 1 to hexes do
13194: LD_ADDR_VAR 0 7
13198: PUSH
13199: DOUBLE
13200: LD_INT 1
13202: DEC
13203: ST_TO_ADDR
13204: LD_VAR 0 12
13208: PUSH
13209: FOR_TO
13210: IFFALSE 13745
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13212: LD_ADDR_VAR 0 11
13216: PUSH
13217: LD_VAR 0 12
13221: PUSH
13222: LD_VAR 0 7
13226: ARRAY
13227: PUSH
13228: LD_INT 1
13230: ARRAY
13231: PPUSH
13232: LD_VAR 0 12
13236: PUSH
13237: LD_VAR 0 7
13241: ARRAY
13242: PUSH
13243: LD_INT 2
13245: ARRAY
13246: PPUSH
13247: CALL_OW 428
13251: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13252: LD_VAR 0 12
13256: PUSH
13257: LD_VAR 0 7
13261: ARRAY
13262: PUSH
13263: LD_INT 1
13265: ARRAY
13266: PPUSH
13267: LD_VAR 0 12
13271: PUSH
13272: LD_VAR 0 7
13276: ARRAY
13277: PUSH
13278: LD_INT 2
13280: ARRAY
13281: PPUSH
13282: CALL_OW 351
13286: PUSH
13287: LD_VAR 0 12
13291: PUSH
13292: LD_VAR 0 7
13296: ARRAY
13297: PUSH
13298: LD_INT 1
13300: ARRAY
13301: PPUSH
13302: LD_VAR 0 12
13306: PUSH
13307: LD_VAR 0 7
13311: ARRAY
13312: PUSH
13313: LD_INT 2
13315: ARRAY
13316: PPUSH
13317: CALL_OW 488
13321: NOT
13322: OR
13323: PUSH
13324: LD_VAR 0 11
13328: PPUSH
13329: CALL_OW 247
13333: PUSH
13334: LD_INT 3
13336: EQUAL
13337: OR
13338: IFFALSE 13344
// exit ;
13340: POP
13341: POP
13342: GO 13747
// if not tmp or not tmp in base then
13344: LD_VAR 0 11
13348: NOT
13349: PUSH
13350: LD_VAR 0 11
13354: PUSH
13355: LD_VAR 0 1
13359: IN
13360: NOT
13361: OR
13362: IFFALSE 13366
// continue ;
13364: GO 13209
// result := true ;
13366: LD_ADDR_VAR 0 6
13370: PUSH
13371: LD_INT 1
13373: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13374: LD_ADDR_VAR 0 15
13378: PUSH
13379: LD_VAR 0 1
13383: PPUSH
13384: LD_INT 22
13386: PUSH
13387: LD_VAR 0 11
13391: PPUSH
13392: CALL_OW 255
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 2
13403: PUSH
13404: LD_INT 30
13406: PUSH
13407: LD_INT 0
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: LD_INT 30
13416: PUSH
13417: LD_INT 1
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: LIST
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PPUSH
13433: CALL_OW 72
13437: ST_TO_ADDR
// if dep then
13438: LD_VAR 0 15
13442: IFFALSE 13578
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13444: LD_ADDR_VAR 0 14
13448: PUSH
13449: LD_VAR 0 15
13453: PUSH
13454: LD_INT 1
13456: ARRAY
13457: PPUSH
13458: CALL_OW 250
13462: PPUSH
13463: LD_VAR 0 15
13467: PUSH
13468: LD_INT 1
13470: ARRAY
13471: PPUSH
13472: CALL_OW 254
13476: PPUSH
13477: LD_INT 5
13479: PPUSH
13480: CALL_OW 272
13484: PUSH
13485: LD_VAR 0 15
13489: PUSH
13490: LD_INT 1
13492: ARRAY
13493: PPUSH
13494: CALL_OW 251
13498: PPUSH
13499: LD_VAR 0 15
13503: PUSH
13504: LD_INT 1
13506: ARRAY
13507: PPUSH
13508: CALL_OW 254
13512: PPUSH
13513: LD_INT 5
13515: PPUSH
13516: CALL_OW 273
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13525: LD_VAR 0 14
13529: PUSH
13530: LD_INT 1
13532: ARRAY
13533: PPUSH
13534: LD_VAR 0 14
13538: PUSH
13539: LD_INT 2
13541: ARRAY
13542: PPUSH
13543: CALL_OW 488
13547: IFFALSE 13578
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13549: LD_VAR 0 11
13553: PPUSH
13554: LD_VAR 0 14
13558: PUSH
13559: LD_INT 1
13561: ARRAY
13562: PPUSH
13563: LD_VAR 0 14
13567: PUSH
13568: LD_INT 2
13570: ARRAY
13571: PPUSH
13572: CALL_OW 111
// continue ;
13576: GO 13209
// end ; end ; r := GetDir ( tmp ) ;
13578: LD_ADDR_VAR 0 13
13582: PUSH
13583: LD_VAR 0 11
13587: PPUSH
13588: CALL_OW 254
13592: ST_TO_ADDR
// if r = 5 then
13593: LD_VAR 0 13
13597: PUSH
13598: LD_INT 5
13600: EQUAL
13601: IFFALSE 13611
// r := 0 ;
13603: LD_ADDR_VAR 0 13
13607: PUSH
13608: LD_INT 0
13610: ST_TO_ADDR
// for j = r to 5 do
13611: LD_ADDR_VAR 0 8
13615: PUSH
13616: DOUBLE
13617: LD_VAR 0 13
13621: DEC
13622: ST_TO_ADDR
13623: LD_INT 5
13625: PUSH
13626: FOR_TO
13627: IFFALSE 13741
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13629: LD_ADDR_VAR 0 9
13633: PUSH
13634: LD_VAR 0 11
13638: PPUSH
13639: CALL_OW 250
13643: PPUSH
13644: LD_VAR 0 8
13648: PPUSH
13649: LD_INT 2
13651: PPUSH
13652: CALL_OW 272
13656: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13657: LD_ADDR_VAR 0 10
13661: PUSH
13662: LD_VAR 0 11
13666: PPUSH
13667: CALL_OW 251
13671: PPUSH
13672: LD_VAR 0 8
13676: PPUSH
13677: LD_INT 2
13679: PPUSH
13680: CALL_OW 273
13684: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13685: LD_VAR 0 9
13689: PPUSH
13690: LD_VAR 0 10
13694: PPUSH
13695: CALL_OW 488
13699: PUSH
13700: LD_VAR 0 9
13704: PPUSH
13705: LD_VAR 0 10
13709: PPUSH
13710: CALL_OW 428
13714: NOT
13715: AND
13716: IFFALSE 13739
// begin ComMoveXY ( tmp , _x , _y ) ;
13718: LD_VAR 0 11
13722: PPUSH
13723: LD_VAR 0 9
13727: PPUSH
13728: LD_VAR 0 10
13732: PPUSH
13733: CALL_OW 111
// break ;
13737: GO 13741
// end ; end ;
13739: GO 13626
13741: POP
13742: POP
// end ;
13743: GO 13209
13745: POP
13746: POP
// end ;
13747: LD_VAR 0 6
13751: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
13752: LD_INT 0
13754: PPUSH
13755: PPUSH
13756: PPUSH
13757: PPUSH
13758: PPUSH
13759: PPUSH
13760: PPUSH
13761: PPUSH
13762: PPUSH
13763: PPUSH
// result := false ;
13764: LD_ADDR_VAR 0 6
13768: PUSH
13769: LD_INT 0
13771: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13772: LD_VAR 0 1
13776: NOT
13777: PUSH
13778: LD_VAR 0 1
13782: PPUSH
13783: CALL_OW 266
13787: PUSH
13788: LD_INT 0
13790: PUSH
13791: LD_INT 1
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: IN
13798: NOT
13799: OR
13800: PUSH
13801: LD_VAR 0 2
13805: NOT
13806: OR
13807: PUSH
13808: LD_VAR 0 5
13812: PUSH
13813: LD_INT 0
13815: PUSH
13816: LD_INT 1
13818: PUSH
13819: LD_INT 2
13821: PUSH
13822: LD_INT 3
13824: PUSH
13825: LD_INT 4
13827: PUSH
13828: LD_INT 5
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: IN
13839: NOT
13840: OR
13841: PUSH
13842: LD_VAR 0 3
13846: PPUSH
13847: LD_VAR 0 4
13851: PPUSH
13852: CALL_OW 488
13856: NOT
13857: OR
13858: IFFALSE 13862
// exit ;
13860: GO 14579
// pom := GetBase ( depot ) ;
13862: LD_ADDR_VAR 0 10
13866: PUSH
13867: LD_VAR 0 1
13871: PPUSH
13872: CALL_OW 274
13876: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13877: LD_ADDR_VAR 0 11
13881: PUSH
13882: LD_VAR 0 2
13886: PPUSH
13887: LD_VAR 0 1
13891: PPUSH
13892: CALL_OW 248
13896: PPUSH
13897: CALL_OW 450
13901: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13902: LD_VAR 0 10
13906: PPUSH
13907: LD_INT 1
13909: PPUSH
13910: CALL_OW 275
13914: PUSH
13915: LD_VAR 0 11
13919: PUSH
13920: LD_INT 1
13922: ARRAY
13923: GREATEREQUAL
13924: PUSH
13925: LD_VAR 0 10
13929: PPUSH
13930: LD_INT 2
13932: PPUSH
13933: CALL_OW 275
13937: PUSH
13938: LD_VAR 0 11
13942: PUSH
13943: LD_INT 2
13945: ARRAY
13946: GREATEREQUAL
13947: AND
13948: PUSH
13949: LD_VAR 0 10
13953: PPUSH
13954: LD_INT 3
13956: PPUSH
13957: CALL_OW 275
13961: PUSH
13962: LD_VAR 0 11
13966: PUSH
13967: LD_INT 3
13969: ARRAY
13970: GREATEREQUAL
13971: AND
13972: NOT
13973: IFFALSE 13977
// exit ;
13975: GO 14579
// if GetBType ( depot ) = b_depot then
13977: LD_VAR 0 1
13981: PPUSH
13982: CALL_OW 266
13986: PUSH
13987: LD_INT 0
13989: EQUAL
13990: IFFALSE 14002
// dist := 28 else
13992: LD_ADDR_VAR 0 14
13996: PUSH
13997: LD_INT 28
13999: ST_TO_ADDR
14000: GO 14010
// dist := 36 ;
14002: LD_ADDR_VAR 0 14
14006: PUSH
14007: LD_INT 36
14009: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14010: LD_VAR 0 1
14014: PPUSH
14015: LD_VAR 0 3
14019: PPUSH
14020: LD_VAR 0 4
14024: PPUSH
14025: CALL_OW 297
14029: PUSH
14030: LD_VAR 0 14
14034: GREATER
14035: IFFALSE 14039
// exit ;
14037: GO 14579
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14039: LD_ADDR_VAR 0 12
14043: PUSH
14044: LD_VAR 0 2
14048: PPUSH
14049: LD_VAR 0 3
14053: PPUSH
14054: LD_VAR 0 4
14058: PPUSH
14059: LD_VAR 0 5
14063: PPUSH
14064: LD_VAR 0 1
14068: PPUSH
14069: CALL_OW 248
14073: PPUSH
14074: LD_INT 0
14076: PPUSH
14077: CALL 14584 0 6
14081: ST_TO_ADDR
// if not hexes then
14082: LD_VAR 0 12
14086: NOT
14087: IFFALSE 14091
// exit ;
14089: GO 14579
// hex := GetHexInfo ( x , y ) ;
14091: LD_ADDR_VAR 0 15
14095: PUSH
14096: LD_VAR 0 3
14100: PPUSH
14101: LD_VAR 0 4
14105: PPUSH
14106: CALL_OW 546
14110: ST_TO_ADDR
// if hex [ 1 ] then
14111: LD_VAR 0 15
14115: PUSH
14116: LD_INT 1
14118: ARRAY
14119: IFFALSE 14123
// exit ;
14121: GO 14579
// height := hex [ 2 ] ;
14123: LD_ADDR_VAR 0 13
14127: PUSH
14128: LD_VAR 0 15
14132: PUSH
14133: LD_INT 2
14135: ARRAY
14136: ST_TO_ADDR
// for i = 1 to hexes do
14137: LD_ADDR_VAR 0 7
14141: PUSH
14142: DOUBLE
14143: LD_INT 1
14145: DEC
14146: ST_TO_ADDR
14147: LD_VAR 0 12
14151: PUSH
14152: FOR_TO
14153: IFFALSE 14483
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14155: LD_VAR 0 12
14159: PUSH
14160: LD_VAR 0 7
14164: ARRAY
14165: PUSH
14166: LD_INT 1
14168: ARRAY
14169: PPUSH
14170: LD_VAR 0 12
14174: PUSH
14175: LD_VAR 0 7
14179: ARRAY
14180: PUSH
14181: LD_INT 2
14183: ARRAY
14184: PPUSH
14185: CALL_OW 488
14189: NOT
14190: PUSH
14191: LD_VAR 0 12
14195: PUSH
14196: LD_VAR 0 7
14200: ARRAY
14201: PUSH
14202: LD_INT 1
14204: ARRAY
14205: PPUSH
14206: LD_VAR 0 12
14210: PUSH
14211: LD_VAR 0 7
14215: ARRAY
14216: PUSH
14217: LD_INT 2
14219: ARRAY
14220: PPUSH
14221: CALL_OW 428
14225: PUSH
14226: LD_INT 0
14228: GREATER
14229: OR
14230: PUSH
14231: LD_VAR 0 12
14235: PUSH
14236: LD_VAR 0 7
14240: ARRAY
14241: PUSH
14242: LD_INT 1
14244: ARRAY
14245: PPUSH
14246: LD_VAR 0 12
14250: PUSH
14251: LD_VAR 0 7
14255: ARRAY
14256: PUSH
14257: LD_INT 2
14259: ARRAY
14260: PPUSH
14261: CALL_OW 351
14265: OR
14266: IFFALSE 14272
// exit ;
14268: POP
14269: POP
14270: GO 14579
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14272: LD_ADDR_VAR 0 8
14276: PUSH
14277: LD_VAR 0 12
14281: PUSH
14282: LD_VAR 0 7
14286: ARRAY
14287: PUSH
14288: LD_INT 1
14290: ARRAY
14291: PPUSH
14292: LD_VAR 0 12
14296: PUSH
14297: LD_VAR 0 7
14301: ARRAY
14302: PUSH
14303: LD_INT 2
14305: ARRAY
14306: PPUSH
14307: CALL_OW 546
14311: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14312: LD_VAR 0 8
14316: PUSH
14317: LD_INT 1
14319: ARRAY
14320: PUSH
14321: LD_VAR 0 8
14325: PUSH
14326: LD_INT 2
14328: ARRAY
14329: PUSH
14330: LD_VAR 0 13
14334: PUSH
14335: LD_INT 2
14337: PLUS
14338: GREATER
14339: OR
14340: PUSH
14341: LD_VAR 0 8
14345: PUSH
14346: LD_INT 2
14348: ARRAY
14349: PUSH
14350: LD_VAR 0 13
14354: PUSH
14355: LD_INT 2
14357: MINUS
14358: LESS
14359: OR
14360: PUSH
14361: LD_VAR 0 8
14365: PUSH
14366: LD_INT 3
14368: ARRAY
14369: PUSH
14370: LD_INT 0
14372: PUSH
14373: LD_INT 8
14375: PUSH
14376: LD_INT 9
14378: PUSH
14379: LD_INT 10
14381: PUSH
14382: LD_INT 11
14384: PUSH
14385: LD_INT 12
14387: PUSH
14388: LD_INT 13
14390: PUSH
14391: LD_INT 16
14393: PUSH
14394: LD_INT 17
14396: PUSH
14397: LD_INT 18
14399: PUSH
14400: LD_INT 19
14402: PUSH
14403: LD_INT 20
14405: PUSH
14406: LD_INT 21
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: IN
14424: NOT
14425: OR
14426: PUSH
14427: LD_VAR 0 8
14431: PUSH
14432: LD_INT 5
14434: ARRAY
14435: NOT
14436: OR
14437: PUSH
14438: LD_VAR 0 8
14442: PUSH
14443: LD_INT 6
14445: ARRAY
14446: PUSH
14447: LD_INT 1
14449: PUSH
14450: LD_INT 2
14452: PUSH
14453: LD_INT 7
14455: PUSH
14456: LD_INT 9
14458: PUSH
14459: LD_INT 10
14461: PUSH
14462: LD_INT 11
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: IN
14473: NOT
14474: OR
14475: IFFALSE 14481
// exit ;
14477: POP
14478: POP
14479: GO 14579
// end ;
14481: GO 14152
14483: POP
14484: POP
// side := GetSide ( depot ) ;
14485: LD_ADDR_VAR 0 9
14489: PUSH
14490: LD_VAR 0 1
14494: PPUSH
14495: CALL_OW 255
14499: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14500: LD_VAR 0 9
14504: PPUSH
14505: LD_VAR 0 3
14509: PPUSH
14510: LD_VAR 0 4
14514: PPUSH
14515: LD_INT 20
14517: PPUSH
14518: CALL 7233 0 4
14522: PUSH
14523: LD_INT 4
14525: ARRAY
14526: IFFALSE 14530
// exit ;
14528: GO 14579
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14530: LD_VAR 0 2
14534: PUSH
14535: LD_INT 29
14537: PUSH
14538: LD_INT 30
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: IN
14545: PUSH
14546: LD_VAR 0 3
14550: PPUSH
14551: LD_VAR 0 4
14555: PPUSH
14556: LD_VAR 0 9
14560: PPUSH
14561: CALL_OW 440
14565: NOT
14566: AND
14567: IFFALSE 14571
// exit ;
14569: GO 14579
// result := true ;
14571: LD_ADDR_VAR 0 6
14575: PUSH
14576: LD_INT 1
14578: ST_TO_ADDR
// end ;
14579: LD_VAR 0 6
14583: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14584: LD_INT 0
14586: PPUSH
14587: PPUSH
14588: PPUSH
14589: PPUSH
14590: PPUSH
14591: PPUSH
14592: PPUSH
14593: PPUSH
14594: PPUSH
14595: PPUSH
14596: PPUSH
14597: PPUSH
14598: PPUSH
14599: PPUSH
14600: PPUSH
14601: PPUSH
14602: PPUSH
14603: PPUSH
14604: PPUSH
14605: PPUSH
14606: PPUSH
14607: PPUSH
14608: PPUSH
14609: PPUSH
14610: PPUSH
14611: PPUSH
14612: PPUSH
14613: PPUSH
14614: PPUSH
14615: PPUSH
14616: PPUSH
14617: PPUSH
14618: PPUSH
14619: PPUSH
14620: PPUSH
14621: PPUSH
14622: PPUSH
14623: PPUSH
14624: PPUSH
14625: PPUSH
14626: PPUSH
14627: PPUSH
14628: PPUSH
14629: PPUSH
14630: PPUSH
14631: PPUSH
14632: PPUSH
14633: PPUSH
14634: PPUSH
14635: PPUSH
14636: PPUSH
14637: PPUSH
14638: PPUSH
14639: PPUSH
14640: PPUSH
14641: PPUSH
14642: PPUSH
14643: PPUSH
// result = [ ] ;
14644: LD_ADDR_VAR 0 7
14648: PUSH
14649: EMPTY
14650: ST_TO_ADDR
// temp_list = [ ] ;
14651: LD_ADDR_VAR 0 9
14655: PUSH
14656: EMPTY
14657: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14658: LD_VAR 0 4
14662: PUSH
14663: LD_INT 0
14665: PUSH
14666: LD_INT 1
14668: PUSH
14669: LD_INT 2
14671: PUSH
14672: LD_INT 3
14674: PUSH
14675: LD_INT 4
14677: PUSH
14678: LD_INT 5
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: IN
14689: NOT
14690: PUSH
14691: LD_VAR 0 1
14695: PUSH
14696: LD_INT 0
14698: PUSH
14699: LD_INT 1
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: IN
14706: PUSH
14707: LD_VAR 0 5
14711: PUSH
14712: LD_INT 1
14714: PUSH
14715: LD_INT 2
14717: PUSH
14718: LD_INT 3
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: LIST
14725: IN
14726: NOT
14727: AND
14728: OR
14729: IFFALSE 14733
// exit ;
14731: GO 33124
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14733: LD_VAR 0 1
14737: PUSH
14738: LD_INT 6
14740: PUSH
14741: LD_INT 7
14743: PUSH
14744: LD_INT 8
14746: PUSH
14747: LD_INT 13
14749: PUSH
14750: LD_INT 12
14752: PUSH
14753: LD_INT 15
14755: PUSH
14756: LD_INT 11
14758: PUSH
14759: LD_INT 14
14761: PUSH
14762: LD_INT 10
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: IN
14776: IFFALSE 14786
// btype = b_lab ;
14778: LD_ADDR_VAR 0 1
14782: PUSH
14783: LD_INT 6
14785: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14786: LD_VAR 0 6
14790: PUSH
14791: LD_INT 0
14793: PUSH
14794: LD_INT 1
14796: PUSH
14797: LD_INT 2
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: LIST
14804: IN
14805: NOT
14806: PUSH
14807: LD_VAR 0 1
14811: PUSH
14812: LD_INT 0
14814: PUSH
14815: LD_INT 1
14817: PUSH
14818: LD_INT 2
14820: PUSH
14821: LD_INT 3
14823: PUSH
14824: LD_INT 6
14826: PUSH
14827: LD_INT 36
14829: PUSH
14830: LD_INT 4
14832: PUSH
14833: LD_INT 5
14835: PUSH
14836: LD_INT 31
14838: PUSH
14839: LD_INT 32
14841: PUSH
14842: LD_INT 33
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: IN
14858: NOT
14859: PUSH
14860: LD_VAR 0 6
14864: PUSH
14865: LD_INT 1
14867: EQUAL
14868: AND
14869: OR
14870: PUSH
14871: LD_VAR 0 1
14875: PUSH
14876: LD_INT 2
14878: PUSH
14879: LD_INT 3
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: IN
14886: NOT
14887: PUSH
14888: LD_VAR 0 6
14892: PUSH
14893: LD_INT 2
14895: EQUAL
14896: AND
14897: OR
14898: IFFALSE 14908
// mode = 0 ;
14900: LD_ADDR_VAR 0 6
14904: PUSH
14905: LD_INT 0
14907: ST_TO_ADDR
// case mode of 0 :
14908: LD_VAR 0 6
14912: PUSH
14913: LD_INT 0
14915: DOUBLE
14916: EQUAL
14917: IFTRUE 14921
14919: GO 26374
14921: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14922: LD_ADDR_VAR 0 11
14926: PUSH
14927: LD_INT 0
14929: PUSH
14930: LD_INT 0
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 0
14939: PUSH
14940: LD_INT 1
14942: NEG
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: LD_INT 1
14950: PUSH
14951: LD_INT 0
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 1
14960: PUSH
14961: LD_INT 1
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 0
14970: PUSH
14971: LD_INT 1
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 1
14980: NEG
14981: PUSH
14982: LD_INT 0
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: LD_INT 1
14991: NEG
14992: PUSH
14993: LD_INT 1
14995: NEG
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 1
15003: NEG
15004: PUSH
15005: LD_INT 2
15007: NEG
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: LD_INT 0
15015: PUSH
15016: LD_INT 2
15018: NEG
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 1
15026: PUSH
15027: LD_INT 1
15029: NEG
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PUSH
15035: LD_INT 1
15037: PUSH
15038: LD_INT 2
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PUSH
15045: LD_INT 0
15047: PUSH
15048: LD_INT 2
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 1
15057: NEG
15058: PUSH
15059: LD_INT 1
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: LD_INT 1
15068: PUSH
15069: LD_INT 3
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: LD_INT 0
15078: PUSH
15079: LD_INT 3
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: LD_INT 1
15088: NEG
15089: PUSH
15090: LD_INT 2
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15115: LD_ADDR_VAR 0 12
15119: PUSH
15120: LD_INT 0
15122: PUSH
15123: LD_INT 0
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: LD_INT 0
15132: PUSH
15133: LD_INT 1
15135: NEG
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: LD_INT 1
15143: PUSH
15144: LD_INT 0
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: LD_INT 1
15153: PUSH
15154: LD_INT 1
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PUSH
15161: LD_INT 0
15163: PUSH
15164: LD_INT 1
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PUSH
15171: LD_INT 1
15173: NEG
15174: PUSH
15175: LD_INT 0
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: LD_INT 1
15184: NEG
15185: PUSH
15186: LD_INT 1
15188: NEG
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 1
15196: PUSH
15197: LD_INT 1
15199: NEG
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: LD_INT 2
15207: PUSH
15208: LD_INT 0
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 2
15217: PUSH
15218: LD_INT 1
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PUSH
15225: LD_INT 1
15227: NEG
15228: PUSH
15229: LD_INT 1
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PUSH
15236: LD_INT 2
15238: NEG
15239: PUSH
15240: LD_INT 0
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: PUSH
15247: LD_INT 2
15249: NEG
15250: PUSH
15251: LD_INT 1
15253: NEG
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: LD_INT 2
15261: NEG
15262: PUSH
15263: LD_INT 1
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: LD_INT 3
15272: NEG
15273: PUSH
15274: LD_INT 0
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PUSH
15281: LD_INT 3
15283: NEG
15284: PUSH
15285: LD_INT 1
15287: NEG
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15311: LD_ADDR_VAR 0 13
15315: PUSH
15316: LD_INT 0
15318: PUSH
15319: LD_INT 0
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 0
15328: PUSH
15329: LD_INT 1
15331: NEG
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 1
15339: PUSH
15340: LD_INT 0
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 1
15349: PUSH
15350: LD_INT 1
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 0
15359: PUSH
15360: LD_INT 1
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 1
15369: NEG
15370: PUSH
15371: LD_INT 0
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 1
15380: NEG
15381: PUSH
15382: LD_INT 1
15384: NEG
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 1
15392: NEG
15393: PUSH
15394: LD_INT 2
15396: NEG
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: LD_INT 2
15404: PUSH
15405: LD_INT 1
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 2
15414: PUSH
15415: LD_INT 2
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: LD_INT 1
15424: PUSH
15425: LD_INT 2
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 2
15434: NEG
15435: PUSH
15436: LD_INT 1
15438: NEG
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 2
15446: NEG
15447: PUSH
15448: LD_INT 2
15450: NEG
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: LD_INT 2
15458: NEG
15459: PUSH
15460: LD_INT 3
15462: NEG
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 3
15470: NEG
15471: PUSH
15472: LD_INT 2
15474: NEG
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PUSH
15480: LD_INT 3
15482: NEG
15483: PUSH
15484: LD_INT 3
15486: NEG
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15510: LD_ADDR_VAR 0 14
15514: PUSH
15515: LD_INT 0
15517: PUSH
15518: LD_INT 0
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: PUSH
15525: LD_INT 0
15527: PUSH
15528: LD_INT 1
15530: NEG
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 1
15538: PUSH
15539: LD_INT 0
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 1
15548: PUSH
15549: LD_INT 1
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 0
15558: PUSH
15559: LD_INT 1
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 1
15568: NEG
15569: PUSH
15570: LD_INT 0
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 1
15579: NEG
15580: PUSH
15581: LD_INT 1
15583: NEG
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: LD_INT 1
15591: NEG
15592: PUSH
15593: LD_INT 2
15595: NEG
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: LD_INT 0
15603: PUSH
15604: LD_INT 2
15606: NEG
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 1
15614: PUSH
15615: LD_INT 1
15617: NEG
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PUSH
15623: LD_INT 1
15625: PUSH
15626: LD_INT 2
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 0
15635: PUSH
15636: LD_INT 2
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 1
15645: NEG
15646: PUSH
15647: LD_INT 1
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 1
15656: NEG
15657: PUSH
15658: LD_INT 3
15660: NEG
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 0
15668: PUSH
15669: LD_INT 3
15671: NEG
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 1
15679: PUSH
15680: LD_INT 2
15682: NEG
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15706: LD_ADDR_VAR 0 15
15710: PUSH
15711: LD_INT 0
15713: PUSH
15714: LD_INT 0
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: LD_INT 0
15723: PUSH
15724: LD_INT 1
15726: NEG
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: LD_INT 1
15734: PUSH
15735: LD_INT 0
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: LD_INT 1
15744: PUSH
15745: LD_INT 1
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: PUSH
15752: LD_INT 0
15754: PUSH
15755: LD_INT 1
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 1
15764: NEG
15765: PUSH
15766: LD_INT 0
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PUSH
15773: LD_INT 1
15775: NEG
15776: PUSH
15777: LD_INT 1
15779: NEG
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: LD_INT 1
15787: PUSH
15788: LD_INT 1
15790: NEG
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 2
15798: PUSH
15799: LD_INT 0
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 2
15808: PUSH
15809: LD_INT 1
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 1
15818: NEG
15819: PUSH
15820: LD_INT 1
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 2
15829: NEG
15830: PUSH
15831: LD_INT 0
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: LD_INT 2
15840: NEG
15841: PUSH
15842: LD_INT 1
15844: NEG
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 2
15852: PUSH
15853: LD_INT 1
15855: NEG
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: LD_INT 3
15863: PUSH
15864: LD_INT 0
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 3
15873: PUSH
15874: LD_INT 1
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15899: LD_ADDR_VAR 0 16
15903: PUSH
15904: LD_INT 0
15906: PUSH
15907: LD_INT 0
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 0
15916: PUSH
15917: LD_INT 1
15919: NEG
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 1
15927: PUSH
15928: LD_INT 0
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: LD_INT 1
15937: PUSH
15938: LD_INT 1
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PUSH
15945: LD_INT 0
15947: PUSH
15948: LD_INT 1
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 1
15957: NEG
15958: PUSH
15959: LD_INT 0
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: PUSH
15966: LD_INT 1
15968: NEG
15969: PUSH
15970: LD_INT 1
15972: NEG
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PUSH
15978: LD_INT 1
15980: NEG
15981: PUSH
15982: LD_INT 2
15984: NEG
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: LD_INT 2
15992: PUSH
15993: LD_INT 1
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: LD_INT 2
16002: PUSH
16003: LD_INT 2
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: LD_INT 1
16012: PUSH
16013: LD_INT 2
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 2
16022: NEG
16023: PUSH
16024: LD_INT 1
16026: NEG
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 2
16034: NEG
16035: PUSH
16036: LD_INT 2
16038: NEG
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 3
16046: PUSH
16047: LD_INT 2
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: LD_INT 3
16056: PUSH
16057: LD_INT 3
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: LD_INT 2
16066: PUSH
16067: LD_INT 3
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16092: LD_ADDR_VAR 0 17
16096: PUSH
16097: LD_INT 0
16099: PUSH
16100: LD_INT 0
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PUSH
16107: LD_INT 0
16109: PUSH
16110: LD_INT 1
16112: NEG
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 1
16120: PUSH
16121: LD_INT 0
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 1
16130: PUSH
16131: LD_INT 1
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 0
16140: PUSH
16141: LD_INT 1
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 1
16150: NEG
16151: PUSH
16152: LD_INT 0
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 1
16161: NEG
16162: PUSH
16163: LD_INT 1
16165: NEG
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: PUSH
16171: LD_INT 1
16173: NEG
16174: PUSH
16175: LD_INT 2
16177: NEG
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: LD_INT 0
16185: PUSH
16186: LD_INT 2
16188: NEG
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 1
16196: PUSH
16197: LD_INT 1
16199: NEG
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PUSH
16205: LD_INT 2
16207: PUSH
16208: LD_INT 0
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: PUSH
16215: LD_INT 2
16217: PUSH
16218: LD_INT 1
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: PUSH
16225: LD_INT 2
16227: PUSH
16228: LD_INT 2
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PUSH
16235: LD_INT 1
16237: PUSH
16238: LD_INT 2
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: LD_INT 0
16247: PUSH
16248: LD_INT 2
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: LD_INT 1
16257: NEG
16258: PUSH
16259: LD_INT 1
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 2
16268: NEG
16269: PUSH
16270: LD_INT 0
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: LD_INT 2
16279: NEG
16280: PUSH
16281: LD_INT 1
16283: NEG
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 2
16291: NEG
16292: PUSH
16293: LD_INT 2
16295: NEG
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16322: LD_ADDR_VAR 0 18
16326: PUSH
16327: LD_INT 0
16329: PUSH
16330: LD_INT 0
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 0
16339: PUSH
16340: LD_INT 1
16342: NEG
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 1
16350: PUSH
16351: LD_INT 0
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: LD_INT 1
16360: PUSH
16361: LD_INT 1
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 0
16370: PUSH
16371: LD_INT 1
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 1
16380: NEG
16381: PUSH
16382: LD_INT 0
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 1
16391: NEG
16392: PUSH
16393: LD_INT 1
16395: NEG
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 1
16403: NEG
16404: PUSH
16405: LD_INT 2
16407: NEG
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: LD_INT 0
16415: PUSH
16416: LD_INT 2
16418: NEG
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 1
16426: PUSH
16427: LD_INT 1
16429: NEG
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 2
16437: PUSH
16438: LD_INT 0
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 2
16447: PUSH
16448: LD_INT 1
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 2
16457: PUSH
16458: LD_INT 2
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 1
16467: PUSH
16468: LD_INT 2
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 0
16477: PUSH
16478: LD_INT 2
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 1
16487: NEG
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 2
16498: NEG
16499: PUSH
16500: LD_INT 0
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 2
16509: NEG
16510: PUSH
16511: LD_INT 1
16513: NEG
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 2
16521: NEG
16522: PUSH
16523: LD_INT 2
16525: NEG
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16552: LD_ADDR_VAR 0 19
16556: PUSH
16557: LD_INT 0
16559: PUSH
16560: LD_INT 0
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 0
16569: PUSH
16570: LD_INT 1
16572: NEG
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: LD_INT 1
16580: PUSH
16581: LD_INT 0
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 1
16590: PUSH
16591: LD_INT 1
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 0
16600: PUSH
16601: LD_INT 1
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 1
16610: NEG
16611: PUSH
16612: LD_INT 0
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 1
16621: NEG
16622: PUSH
16623: LD_INT 1
16625: NEG
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PUSH
16631: LD_INT 1
16633: NEG
16634: PUSH
16635: LD_INT 2
16637: NEG
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 0
16645: PUSH
16646: LD_INT 2
16648: NEG
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 1
16656: PUSH
16657: LD_INT 1
16659: NEG
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: LD_INT 2
16667: PUSH
16668: LD_INT 0
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 2
16677: PUSH
16678: LD_INT 1
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: LD_INT 2
16687: PUSH
16688: LD_INT 2
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 1
16697: PUSH
16698: LD_INT 2
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 0
16707: PUSH
16708: LD_INT 2
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 1
16717: NEG
16718: PUSH
16719: LD_INT 1
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 2
16728: NEG
16729: PUSH
16730: LD_INT 0
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 2
16739: NEG
16740: PUSH
16741: LD_INT 1
16743: NEG
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: LD_INT 2
16751: NEG
16752: PUSH
16753: LD_INT 2
16755: NEG
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16782: LD_ADDR_VAR 0 20
16786: PUSH
16787: LD_INT 0
16789: PUSH
16790: LD_INT 0
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PUSH
16797: LD_INT 0
16799: PUSH
16800: LD_INT 1
16802: NEG
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: LD_INT 1
16810: PUSH
16811: LD_INT 0
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: LD_INT 1
16820: PUSH
16821: LD_INT 1
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: LD_INT 0
16830: PUSH
16831: LD_INT 1
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PUSH
16838: LD_INT 1
16840: NEG
16841: PUSH
16842: LD_INT 0
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: LD_INT 1
16851: NEG
16852: PUSH
16853: LD_INT 1
16855: NEG
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 1
16863: NEG
16864: PUSH
16865: LD_INT 2
16867: NEG
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: LD_INT 0
16875: PUSH
16876: LD_INT 2
16878: NEG
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 1
16886: PUSH
16887: LD_INT 1
16889: NEG
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: PUSH
16895: LD_INT 2
16897: PUSH
16898: LD_INT 0
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 2
16907: PUSH
16908: LD_INT 1
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 2
16917: PUSH
16918: LD_INT 2
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 1
16927: PUSH
16928: LD_INT 2
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 0
16937: PUSH
16938: LD_INT 2
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 1
16947: NEG
16948: PUSH
16949: LD_INT 1
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: LD_INT 2
16958: NEG
16959: PUSH
16960: LD_INT 0
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 2
16969: NEG
16970: PUSH
16971: LD_INT 1
16973: NEG
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 2
16981: NEG
16982: PUSH
16983: LD_INT 2
16985: NEG
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17012: LD_ADDR_VAR 0 21
17016: PUSH
17017: LD_INT 0
17019: PUSH
17020: LD_INT 0
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 0
17029: PUSH
17030: LD_INT 1
17032: NEG
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 1
17040: PUSH
17041: LD_INT 0
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 1
17050: PUSH
17051: LD_INT 1
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 0
17060: PUSH
17061: LD_INT 1
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 1
17070: NEG
17071: PUSH
17072: LD_INT 0
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 1
17081: NEG
17082: PUSH
17083: LD_INT 1
17085: NEG
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: LD_INT 1
17093: NEG
17094: PUSH
17095: LD_INT 2
17097: NEG
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: LD_INT 0
17105: PUSH
17106: LD_INT 2
17108: NEG
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 1
17116: PUSH
17117: LD_INT 1
17119: NEG
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 2
17127: PUSH
17128: LD_INT 0
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: LD_INT 2
17137: PUSH
17138: LD_INT 1
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 2
17147: PUSH
17148: LD_INT 2
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 1
17157: PUSH
17158: LD_INT 2
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 0
17167: PUSH
17168: LD_INT 2
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 1
17177: NEG
17178: PUSH
17179: LD_INT 1
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 2
17188: NEG
17189: PUSH
17190: LD_INT 0
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 2
17199: NEG
17200: PUSH
17201: LD_INT 1
17203: NEG
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 2
17211: NEG
17212: PUSH
17213: LD_INT 2
17215: NEG
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17242: LD_ADDR_VAR 0 22
17246: PUSH
17247: LD_INT 0
17249: PUSH
17250: LD_INT 0
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 0
17259: PUSH
17260: LD_INT 1
17262: NEG
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 1
17270: PUSH
17271: LD_INT 0
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 1
17280: PUSH
17281: LD_INT 1
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 0
17290: PUSH
17291: LD_INT 1
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 1
17300: NEG
17301: PUSH
17302: LD_INT 0
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 1
17311: NEG
17312: PUSH
17313: LD_INT 1
17315: NEG
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 1
17323: NEG
17324: PUSH
17325: LD_INT 2
17327: NEG
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 0
17335: PUSH
17336: LD_INT 2
17338: NEG
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 1
17346: PUSH
17347: LD_INT 1
17349: NEG
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: LD_INT 2
17357: PUSH
17358: LD_INT 0
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 2
17367: PUSH
17368: LD_INT 1
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 2
17377: PUSH
17378: LD_INT 2
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 1
17387: PUSH
17388: LD_INT 2
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 0
17397: PUSH
17398: LD_INT 2
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 1
17407: NEG
17408: PUSH
17409: LD_INT 1
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 2
17418: NEG
17419: PUSH
17420: LD_INT 0
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: LD_INT 2
17429: NEG
17430: PUSH
17431: LD_INT 1
17433: NEG
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 2
17441: NEG
17442: PUSH
17443: LD_INT 2
17445: NEG
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17472: LD_ADDR_VAR 0 23
17476: PUSH
17477: LD_INT 0
17479: PUSH
17480: LD_INT 0
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 0
17489: PUSH
17490: LD_INT 1
17492: NEG
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 1
17500: PUSH
17501: LD_INT 0
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 1
17510: PUSH
17511: LD_INT 1
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 0
17520: PUSH
17521: LD_INT 1
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 1
17530: NEG
17531: PUSH
17532: LD_INT 0
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 1
17541: NEG
17542: PUSH
17543: LD_INT 1
17545: NEG
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 1
17553: NEG
17554: PUSH
17555: LD_INT 2
17557: NEG
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PUSH
17563: LD_INT 0
17565: PUSH
17566: LD_INT 2
17568: NEG
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 1
17576: PUSH
17577: LD_INT 1
17579: NEG
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 2
17587: PUSH
17588: LD_INT 0
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: LD_INT 2
17597: PUSH
17598: LD_INT 1
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 2
17607: PUSH
17608: LD_INT 2
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 1
17617: PUSH
17618: LD_INT 2
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 0
17627: PUSH
17628: LD_INT 2
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 1
17637: NEG
17638: PUSH
17639: LD_INT 1
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 2
17648: NEG
17649: PUSH
17650: LD_INT 0
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: LD_INT 2
17659: NEG
17660: PUSH
17661: LD_INT 1
17663: NEG
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 2
17671: NEG
17672: PUSH
17673: LD_INT 2
17675: NEG
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 2
17683: NEG
17684: PUSH
17685: LD_INT 3
17687: NEG
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 1
17695: NEG
17696: PUSH
17697: LD_INT 3
17699: NEG
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 1
17707: PUSH
17708: LD_INT 2
17710: NEG
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 2
17718: PUSH
17719: LD_INT 1
17721: NEG
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17752: LD_ADDR_VAR 0 24
17756: PUSH
17757: LD_INT 0
17759: PUSH
17760: LD_INT 0
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 0
17769: PUSH
17770: LD_INT 1
17772: NEG
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 1
17780: PUSH
17781: LD_INT 0
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 1
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 0
17800: PUSH
17801: LD_INT 1
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 1
17810: NEG
17811: PUSH
17812: LD_INT 0
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: LD_INT 1
17821: NEG
17822: PUSH
17823: LD_INT 1
17825: NEG
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 1
17833: NEG
17834: PUSH
17835: LD_INT 2
17837: NEG
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 0
17845: PUSH
17846: LD_INT 2
17848: NEG
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: LD_INT 1
17859: NEG
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 2
17867: PUSH
17868: LD_INT 0
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 2
17877: PUSH
17878: LD_INT 1
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 2
17887: PUSH
17888: LD_INT 2
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 1
17897: PUSH
17898: LD_INT 2
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 0
17907: PUSH
17908: LD_INT 2
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 1
17917: NEG
17918: PUSH
17919: LD_INT 1
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 2
17928: NEG
17929: PUSH
17930: LD_INT 0
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 2
17939: NEG
17940: PUSH
17941: LD_INT 1
17943: NEG
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 2
17951: NEG
17952: PUSH
17953: LD_INT 2
17955: NEG
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 1
17963: PUSH
17964: LD_INT 2
17966: NEG
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: LD_INT 2
17974: PUSH
17975: LD_INT 1
17977: NEG
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 3
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 3
17995: PUSH
17996: LD_INT 2
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18028: LD_ADDR_VAR 0 25
18032: PUSH
18033: LD_INT 0
18035: PUSH
18036: LD_INT 0
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: LD_INT 0
18045: PUSH
18046: LD_INT 1
18048: NEG
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 1
18056: PUSH
18057: LD_INT 0
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 1
18066: PUSH
18067: LD_INT 1
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 0
18076: PUSH
18077: LD_INT 1
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 1
18086: NEG
18087: PUSH
18088: LD_INT 0
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 1
18097: NEG
18098: PUSH
18099: LD_INT 1
18101: NEG
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 1
18109: NEG
18110: PUSH
18111: LD_INT 2
18113: NEG
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 0
18121: PUSH
18122: LD_INT 2
18124: NEG
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 1
18132: PUSH
18133: LD_INT 1
18135: NEG
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 2
18143: PUSH
18144: LD_INT 0
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 2
18153: PUSH
18154: LD_INT 1
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 2
18163: PUSH
18164: LD_INT 2
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 1
18173: PUSH
18174: LD_INT 2
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 0
18183: PUSH
18184: LD_INT 2
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 1
18193: NEG
18194: PUSH
18195: LD_INT 1
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 2
18204: NEG
18205: PUSH
18206: LD_INT 0
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 2
18215: NEG
18216: PUSH
18217: LD_INT 1
18219: NEG
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: PUSH
18225: LD_INT 2
18227: NEG
18228: PUSH
18229: LD_INT 2
18231: NEG
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 3
18239: PUSH
18240: LD_INT 1
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 3
18249: PUSH
18250: LD_INT 2
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 2
18259: PUSH
18260: LD_INT 3
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 1
18269: PUSH
18270: LD_INT 3
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18302: LD_ADDR_VAR 0 26
18306: PUSH
18307: LD_INT 0
18309: PUSH
18310: LD_INT 0
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 0
18319: PUSH
18320: LD_INT 1
18322: NEG
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 1
18330: PUSH
18331: LD_INT 0
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 1
18340: PUSH
18341: LD_INT 1
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 0
18350: PUSH
18351: LD_INT 1
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 1
18360: NEG
18361: PUSH
18362: LD_INT 0
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 1
18371: NEG
18372: PUSH
18373: LD_INT 1
18375: NEG
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 1
18383: NEG
18384: PUSH
18385: LD_INT 2
18387: NEG
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 0
18395: PUSH
18396: LD_INT 2
18398: NEG
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 1
18406: PUSH
18407: LD_INT 1
18409: NEG
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 2
18417: PUSH
18418: LD_INT 0
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 2
18427: PUSH
18428: LD_INT 1
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 2
18437: PUSH
18438: LD_INT 2
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 1
18447: PUSH
18448: LD_INT 2
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 0
18457: PUSH
18458: LD_INT 2
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 1
18467: NEG
18468: PUSH
18469: LD_INT 1
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 2
18478: NEG
18479: PUSH
18480: LD_INT 0
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 2
18489: NEG
18490: PUSH
18491: LD_INT 1
18493: NEG
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 2
18501: NEG
18502: PUSH
18503: LD_INT 2
18505: NEG
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 2
18513: PUSH
18514: LD_INT 3
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 1
18523: PUSH
18524: LD_INT 3
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 1
18533: NEG
18534: PUSH
18535: LD_INT 2
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 2
18544: NEG
18545: PUSH
18546: LD_INT 1
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18578: LD_ADDR_VAR 0 27
18582: PUSH
18583: LD_INT 0
18585: PUSH
18586: LD_INT 0
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 0
18595: PUSH
18596: LD_INT 1
18598: NEG
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 1
18606: PUSH
18607: LD_INT 0
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 1
18616: PUSH
18617: LD_INT 1
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 0
18626: PUSH
18627: LD_INT 1
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 1
18636: NEG
18637: PUSH
18638: LD_INT 0
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 1
18647: NEG
18648: PUSH
18649: LD_INT 1
18651: NEG
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 1
18659: NEG
18660: PUSH
18661: LD_INT 2
18663: NEG
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 0
18671: PUSH
18672: LD_INT 2
18674: NEG
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 1
18682: PUSH
18683: LD_INT 1
18685: NEG
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 2
18693: PUSH
18694: LD_INT 0
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 2
18703: PUSH
18704: LD_INT 1
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 2
18713: PUSH
18714: LD_INT 2
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 0
18733: PUSH
18734: LD_INT 2
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 1
18743: NEG
18744: PUSH
18745: LD_INT 1
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 2
18754: NEG
18755: PUSH
18756: LD_INT 0
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 2
18765: NEG
18766: PUSH
18767: LD_INT 1
18769: NEG
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 2
18777: NEG
18778: PUSH
18779: LD_INT 2
18781: NEG
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 1
18789: NEG
18790: PUSH
18791: LD_INT 2
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 2
18800: NEG
18801: PUSH
18802: LD_INT 1
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 3
18811: NEG
18812: PUSH
18813: LD_INT 1
18815: NEG
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 3
18823: NEG
18824: PUSH
18825: LD_INT 2
18827: NEG
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18858: LD_ADDR_VAR 0 28
18862: PUSH
18863: LD_INT 0
18865: PUSH
18866: LD_INT 0
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 0
18875: PUSH
18876: LD_INT 1
18878: NEG
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 1
18886: PUSH
18887: LD_INT 0
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 1
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 0
18906: PUSH
18907: LD_INT 1
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 1
18916: NEG
18917: PUSH
18918: LD_INT 0
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 1
18927: NEG
18928: PUSH
18929: LD_INT 1
18931: NEG
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 1
18939: NEG
18940: PUSH
18941: LD_INT 2
18943: NEG
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 0
18951: PUSH
18952: LD_INT 2
18954: NEG
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 1
18962: PUSH
18963: LD_INT 1
18965: NEG
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 2
18973: PUSH
18974: LD_INT 0
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 2
18983: PUSH
18984: LD_INT 1
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 2
18993: PUSH
18994: LD_INT 2
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 1
19003: PUSH
19004: LD_INT 2
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 0
19013: PUSH
19014: LD_INT 2
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 1
19023: NEG
19024: PUSH
19025: LD_INT 1
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: LD_INT 2
19034: NEG
19035: PUSH
19036: LD_INT 0
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 2
19045: NEG
19046: PUSH
19047: LD_INT 1
19049: NEG
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 2
19057: NEG
19058: PUSH
19059: LD_INT 2
19061: NEG
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 2
19069: NEG
19070: PUSH
19071: LD_INT 3
19073: NEG
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 1
19081: NEG
19082: PUSH
19083: LD_INT 3
19085: NEG
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 3
19093: NEG
19094: PUSH
19095: LD_INT 1
19097: NEG
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 3
19105: NEG
19106: PUSH
19107: LD_INT 2
19109: NEG
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19140: LD_ADDR_VAR 0 29
19144: PUSH
19145: LD_INT 0
19147: PUSH
19148: LD_INT 0
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 0
19157: PUSH
19158: LD_INT 1
19160: NEG
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 1
19168: PUSH
19169: LD_INT 0
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 1
19178: PUSH
19179: LD_INT 1
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 0
19188: PUSH
19189: LD_INT 1
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 1
19198: NEG
19199: PUSH
19200: LD_INT 0
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 1
19209: NEG
19210: PUSH
19211: LD_INT 1
19213: NEG
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 1
19221: NEG
19222: PUSH
19223: LD_INT 2
19225: NEG
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 0
19233: PUSH
19234: LD_INT 2
19236: NEG
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 1
19244: PUSH
19245: LD_INT 1
19247: NEG
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 2
19255: PUSH
19256: LD_INT 0
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 2
19265: PUSH
19266: LD_INT 1
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 1
19275: PUSH
19276: LD_INT 2
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 0
19285: PUSH
19286: LD_INT 2
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 1
19295: NEG
19296: PUSH
19297: LD_INT 1
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 2
19306: NEG
19307: PUSH
19308: LD_INT 1
19310: NEG
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 2
19318: NEG
19319: PUSH
19320: LD_INT 2
19322: NEG
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 2
19330: NEG
19331: PUSH
19332: LD_INT 3
19334: NEG
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 2
19342: PUSH
19343: LD_INT 1
19345: NEG
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 3
19353: PUSH
19354: LD_INT 1
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: LD_INT 3
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 1
19373: NEG
19374: PUSH
19375: LD_INT 2
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: LD_INT 3
19384: NEG
19385: PUSH
19386: LD_INT 2
19388: NEG
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19419: LD_ADDR_VAR 0 30
19423: PUSH
19424: LD_INT 0
19426: PUSH
19427: LD_INT 0
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 0
19436: PUSH
19437: LD_INT 1
19439: NEG
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 1
19447: PUSH
19448: LD_INT 0
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 1
19457: PUSH
19458: LD_INT 1
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 0
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 1
19477: NEG
19478: PUSH
19479: LD_INT 0
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 1
19488: NEG
19489: PUSH
19490: LD_INT 1
19492: NEG
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 1
19500: NEG
19501: PUSH
19502: LD_INT 2
19504: NEG
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 0
19512: PUSH
19513: LD_INT 2
19515: NEG
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 1
19523: PUSH
19524: LD_INT 1
19526: NEG
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 2
19534: PUSH
19535: LD_INT 0
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 2
19544: PUSH
19545: LD_INT 1
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 2
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: LD_INT 2
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 1
19574: NEG
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 2
19585: NEG
19586: PUSH
19587: LD_INT 0
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 2
19596: NEG
19597: PUSH
19598: LD_INT 1
19600: NEG
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 1
19608: NEG
19609: PUSH
19610: LD_INT 3
19612: NEG
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 1
19620: PUSH
19621: LD_INT 2
19623: NEG
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 3
19631: PUSH
19632: LD_INT 2
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 2
19641: PUSH
19642: LD_INT 3
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 2
19651: NEG
19652: PUSH
19653: LD_INT 1
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 3
19662: NEG
19663: PUSH
19664: LD_INT 1
19666: NEG
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19697: LD_ADDR_VAR 0 31
19701: PUSH
19702: LD_INT 0
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 0
19714: PUSH
19715: LD_INT 1
19717: NEG
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 1
19725: PUSH
19726: LD_INT 0
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 1
19735: PUSH
19736: LD_INT 1
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 0
19745: PUSH
19746: LD_INT 1
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 1
19755: NEG
19756: PUSH
19757: LD_INT 0
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 1
19766: NEG
19767: PUSH
19768: LD_INT 1
19770: NEG
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 1
19778: NEG
19779: PUSH
19780: LD_INT 2
19782: NEG
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 1
19790: PUSH
19791: LD_INT 1
19793: NEG
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: LD_INT 2
19801: PUSH
19802: LD_INT 0
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: LD_INT 2
19811: PUSH
19812: LD_INT 1
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 2
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 1
19831: PUSH
19832: LD_INT 2
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 0
19841: PUSH
19842: LD_INT 2
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 1
19851: NEG
19852: PUSH
19853: LD_INT 1
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 2
19862: NEG
19863: PUSH
19864: LD_INT 1
19866: NEG
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 2
19874: NEG
19875: PUSH
19876: LD_INT 2
19878: NEG
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 2
19886: NEG
19887: PUSH
19888: LD_INT 3
19890: NEG
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 2
19898: PUSH
19899: LD_INT 1
19901: NEG
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 3
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 1
19919: PUSH
19920: LD_INT 3
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 1
19929: NEG
19930: PUSH
19931: LD_INT 2
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 3
19940: NEG
19941: PUSH
19942: LD_INT 2
19944: NEG
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19975: LD_ADDR_VAR 0 32
19979: PUSH
19980: LD_INT 0
19982: PUSH
19983: LD_INT 0
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 0
19992: PUSH
19993: LD_INT 1
19995: NEG
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 1
20003: PUSH
20004: LD_INT 0
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 1
20013: PUSH
20014: LD_INT 1
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 0
20023: PUSH
20024: LD_INT 1
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 1
20033: NEG
20034: PUSH
20035: LD_INT 0
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 1
20044: NEG
20045: PUSH
20046: LD_INT 1
20048: NEG
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 1
20056: NEG
20057: PUSH
20058: LD_INT 2
20060: NEG
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 0
20068: PUSH
20069: LD_INT 2
20071: NEG
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 1
20079: PUSH
20080: LD_INT 1
20082: NEG
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 2
20090: PUSH
20091: LD_INT 1
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 2
20100: PUSH
20101: LD_INT 2
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 1
20110: PUSH
20111: LD_INT 2
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 0
20120: PUSH
20121: LD_INT 2
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 1
20130: NEG
20131: PUSH
20132: LD_INT 1
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 2
20141: NEG
20142: PUSH
20143: LD_INT 0
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 2
20152: NEG
20153: PUSH
20154: LD_INT 1
20156: NEG
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 1
20164: NEG
20165: PUSH
20166: LD_INT 3
20168: NEG
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 1
20176: PUSH
20177: LD_INT 2
20179: NEG
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 3
20187: PUSH
20188: LD_INT 2
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 2
20197: PUSH
20198: LD_INT 3
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 2
20207: NEG
20208: PUSH
20209: LD_INT 1
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 3
20218: NEG
20219: PUSH
20220: LD_INT 1
20222: NEG
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20253: LD_ADDR_VAR 0 33
20257: PUSH
20258: LD_INT 0
20260: PUSH
20261: LD_INT 0
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: LD_INT 1
20273: NEG
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 1
20281: PUSH
20282: LD_INT 0
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 1
20291: PUSH
20292: LD_INT 1
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 0
20301: PUSH
20302: LD_INT 1
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 1
20311: NEG
20312: PUSH
20313: LD_INT 0
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 1
20322: NEG
20323: PUSH
20324: LD_INT 1
20326: NEG
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 1
20334: NEG
20335: PUSH
20336: LD_INT 2
20338: NEG
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 1
20346: PUSH
20347: LD_INT 1
20349: NEG
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 2
20357: PUSH
20358: LD_INT 0
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 2
20367: PUSH
20368: LD_INT 1
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 1
20377: PUSH
20378: LD_INT 2
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 0
20387: PUSH
20388: LD_INT 2
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 1
20397: NEG
20398: PUSH
20399: LD_INT 1
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 2
20408: NEG
20409: PUSH
20410: LD_INT 0
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 2
20419: NEG
20420: PUSH
20421: LD_INT 1
20423: NEG
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 2
20431: NEG
20432: PUSH
20433: LD_INT 2
20435: NEG
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 2
20443: NEG
20444: PUSH
20445: LD_INT 3
20447: NEG
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: LD_INT 1
20458: NEG
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 3
20466: PUSH
20467: LD_INT 1
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 1
20476: PUSH
20477: LD_INT 3
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 1
20486: NEG
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 3
20497: NEG
20498: PUSH
20499: LD_INT 2
20501: NEG
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20532: LD_ADDR_VAR 0 34
20536: PUSH
20537: LD_INT 0
20539: PUSH
20540: LD_INT 0
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 0
20549: PUSH
20550: LD_INT 1
20552: NEG
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 1
20560: PUSH
20561: LD_INT 0
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 1
20570: PUSH
20571: LD_INT 1
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 0
20580: PUSH
20581: LD_INT 1
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 1
20590: NEG
20591: PUSH
20592: LD_INT 0
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 1
20601: NEG
20602: PUSH
20603: LD_INT 1
20605: NEG
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 1
20613: NEG
20614: PUSH
20615: LD_INT 2
20617: NEG
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 0
20625: PUSH
20626: LD_INT 2
20628: NEG
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: LD_INT 1
20636: PUSH
20637: LD_INT 1
20639: NEG
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 2
20647: PUSH
20648: LD_INT 1
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 2
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: LD_INT 2
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 1
20677: NEG
20678: PUSH
20679: LD_INT 1
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 2
20688: NEG
20689: PUSH
20690: LD_INT 0
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 2
20699: NEG
20700: PUSH
20701: LD_INT 1
20703: NEG
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 2
20711: NEG
20712: PUSH
20713: LD_INT 2
20715: NEG
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 1
20723: NEG
20724: PUSH
20725: LD_INT 3
20727: NEG
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 1
20735: PUSH
20736: LD_INT 2
20738: NEG
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 3
20746: PUSH
20747: LD_INT 2
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 2
20756: PUSH
20757: LD_INT 3
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 2
20766: NEG
20767: PUSH
20768: LD_INT 1
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 3
20777: NEG
20778: PUSH
20779: LD_INT 1
20781: NEG
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20812: LD_ADDR_VAR 0 35
20816: PUSH
20817: LD_INT 0
20819: PUSH
20820: LD_INT 0
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 0
20829: PUSH
20830: LD_INT 1
20832: NEG
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 1
20840: PUSH
20841: LD_INT 0
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PUSH
20848: LD_INT 1
20850: PUSH
20851: LD_INT 1
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 0
20860: PUSH
20861: LD_INT 1
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 1
20870: NEG
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 1
20881: NEG
20882: PUSH
20883: LD_INT 1
20885: NEG
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 2
20893: PUSH
20894: LD_INT 1
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 2
20903: NEG
20904: PUSH
20905: LD_INT 1
20907: NEG
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20924: LD_ADDR_VAR 0 36
20928: PUSH
20929: LD_INT 0
20931: PUSH
20932: LD_INT 0
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 0
20941: PUSH
20942: LD_INT 1
20944: NEG
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 1
20952: PUSH
20953: LD_INT 0
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 1
20962: PUSH
20963: LD_INT 1
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 0
20972: PUSH
20973: LD_INT 1
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 1
20982: NEG
20983: PUSH
20984: LD_INT 0
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 1
20993: NEG
20994: PUSH
20995: LD_INT 1
20997: NEG
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 1
21005: NEG
21006: PUSH
21007: LD_INT 2
21009: NEG
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 1
21017: PUSH
21018: LD_INT 2
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21036: LD_ADDR_VAR 0 37
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: LD_INT 0
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 0
21053: PUSH
21054: LD_INT 1
21056: NEG
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 1
21064: PUSH
21065: LD_INT 0
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 1
21074: PUSH
21075: LD_INT 1
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 0
21084: PUSH
21085: LD_INT 1
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 1
21094: NEG
21095: PUSH
21096: LD_INT 0
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 1
21105: NEG
21106: PUSH
21107: LD_INT 1
21109: NEG
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 1
21117: PUSH
21118: LD_INT 1
21120: NEG
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 1
21128: NEG
21129: PUSH
21130: LD_INT 1
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21148: LD_ADDR_VAR 0 38
21152: PUSH
21153: LD_INT 0
21155: PUSH
21156: LD_INT 0
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 0
21165: PUSH
21166: LD_INT 1
21168: NEG
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 1
21176: PUSH
21177: LD_INT 0
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 1
21186: PUSH
21187: LD_INT 1
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 0
21196: PUSH
21197: LD_INT 1
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 1
21206: NEG
21207: PUSH
21208: LD_INT 0
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 1
21217: NEG
21218: PUSH
21219: LD_INT 1
21221: NEG
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 2
21229: PUSH
21230: LD_INT 1
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 2
21239: NEG
21240: PUSH
21241: LD_INT 1
21243: NEG
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21260: LD_ADDR_VAR 0 39
21264: PUSH
21265: LD_INT 0
21267: PUSH
21268: LD_INT 0
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 0
21277: PUSH
21278: LD_INT 1
21280: NEG
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 1
21288: PUSH
21289: LD_INT 0
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 1
21298: PUSH
21299: LD_INT 1
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 0
21308: PUSH
21309: LD_INT 1
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 1
21318: NEG
21319: PUSH
21320: LD_INT 0
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 1
21329: NEG
21330: PUSH
21331: LD_INT 1
21333: NEG
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 1
21341: NEG
21342: PUSH
21343: LD_INT 2
21345: NEG
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 1
21353: PUSH
21354: LD_INT 2
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21372: LD_ADDR_VAR 0 40
21376: PUSH
21377: LD_INT 0
21379: PUSH
21380: LD_INT 0
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 0
21389: PUSH
21390: LD_INT 1
21392: NEG
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 1
21400: PUSH
21401: LD_INT 0
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 1
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 0
21420: PUSH
21421: LD_INT 1
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 1
21430: NEG
21431: PUSH
21432: LD_INT 0
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 1
21441: NEG
21442: PUSH
21443: LD_INT 1
21445: NEG
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 1
21453: PUSH
21454: LD_INT 1
21456: NEG
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 1
21464: NEG
21465: PUSH
21466: LD_INT 1
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21484: LD_ADDR_VAR 0 41
21488: PUSH
21489: LD_INT 0
21491: PUSH
21492: LD_INT 0
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 0
21501: PUSH
21502: LD_INT 1
21504: NEG
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 1
21512: PUSH
21513: LD_INT 0
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: LD_INT 1
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 0
21532: PUSH
21533: LD_INT 1
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 1
21542: NEG
21543: PUSH
21544: LD_INT 0
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 1
21553: NEG
21554: PUSH
21555: LD_INT 1
21557: NEG
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 1
21565: NEG
21566: PUSH
21567: LD_INT 2
21569: NEG
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 1
21577: PUSH
21578: LD_INT 1
21580: NEG
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 2
21588: PUSH
21589: LD_INT 0
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 2
21598: PUSH
21599: LD_INT 1
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 2
21608: PUSH
21609: LD_INT 2
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 1
21618: PUSH
21619: LD_INT 2
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 1
21628: NEG
21629: PUSH
21630: LD_INT 1
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 2
21639: NEG
21640: PUSH
21641: LD_INT 0
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 2
21650: NEG
21651: PUSH
21652: LD_INT 1
21654: NEG
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 2
21662: NEG
21663: PUSH
21664: LD_INT 2
21666: NEG
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 2
21674: NEG
21675: PUSH
21676: LD_INT 3
21678: NEG
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 2
21686: PUSH
21687: LD_INT 1
21689: NEG
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 3
21697: PUSH
21698: LD_INT 0
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 3
21707: PUSH
21708: LD_INT 1
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 3
21717: PUSH
21718: LD_INT 2
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 3
21727: PUSH
21728: LD_INT 3
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: LD_INT 2
21737: PUSH
21738: LD_INT 3
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 2
21747: NEG
21748: PUSH
21749: LD_INT 1
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 3
21758: NEG
21759: PUSH
21760: LD_INT 0
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 3
21769: NEG
21770: PUSH
21771: LD_INT 1
21773: NEG
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 3
21781: NEG
21782: PUSH
21783: LD_INT 2
21785: NEG
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: LD_INT 3
21793: NEG
21794: PUSH
21795: LD_INT 3
21797: NEG
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21834: LD_ADDR_VAR 0 42
21838: PUSH
21839: LD_INT 0
21841: PUSH
21842: LD_INT 0
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 0
21851: PUSH
21852: LD_INT 1
21854: NEG
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 1
21862: PUSH
21863: LD_INT 0
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: LD_INT 1
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 0
21882: PUSH
21883: LD_INT 1
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 1
21892: NEG
21893: PUSH
21894: LD_INT 0
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 1
21903: NEG
21904: PUSH
21905: LD_INT 1
21907: NEG
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 1
21915: NEG
21916: PUSH
21917: LD_INT 2
21919: NEG
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 0
21927: PUSH
21928: LD_INT 2
21930: NEG
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 1
21938: PUSH
21939: LD_INT 1
21941: NEG
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 2
21949: PUSH
21950: LD_INT 1
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 2
21959: PUSH
21960: LD_INT 2
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 1
21969: PUSH
21970: LD_INT 2
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 0
21979: PUSH
21980: LD_INT 2
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 1
21989: NEG
21990: PUSH
21991: LD_INT 1
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 2
22000: NEG
22001: PUSH
22002: LD_INT 1
22004: NEG
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 2
22012: NEG
22013: PUSH
22014: LD_INT 2
22016: NEG
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 2
22024: NEG
22025: PUSH
22026: LD_INT 3
22028: NEG
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 1
22036: NEG
22037: PUSH
22038: LD_INT 3
22040: NEG
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 0
22048: PUSH
22049: LD_INT 3
22051: NEG
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 1
22059: PUSH
22060: LD_INT 2
22062: NEG
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 3
22070: PUSH
22071: LD_INT 2
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 3
22080: PUSH
22081: LD_INT 3
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 2
22090: PUSH
22091: LD_INT 3
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 1
22100: PUSH
22101: LD_INT 3
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 0
22110: PUSH
22111: LD_INT 3
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 1
22120: NEG
22121: PUSH
22122: LD_INT 2
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 3
22131: NEG
22132: PUSH
22133: LD_INT 2
22135: NEG
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 3
22143: NEG
22144: PUSH
22145: LD_INT 3
22147: NEG
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22184: LD_ADDR_VAR 0 43
22188: PUSH
22189: LD_INT 0
22191: PUSH
22192: LD_INT 0
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 0
22201: PUSH
22202: LD_INT 1
22204: NEG
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 1
22212: PUSH
22213: LD_INT 0
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 1
22222: PUSH
22223: LD_INT 1
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 0
22232: PUSH
22233: LD_INT 1
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 1
22242: NEG
22243: PUSH
22244: LD_INT 0
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 1
22253: NEG
22254: PUSH
22255: LD_INT 1
22257: NEG
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 1
22265: NEG
22266: PUSH
22267: LD_INT 2
22269: NEG
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 0
22277: PUSH
22278: LD_INT 2
22280: NEG
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 1
22288: PUSH
22289: LD_INT 1
22291: NEG
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 2
22299: PUSH
22300: LD_INT 0
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 2
22309: PUSH
22310: LD_INT 1
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 1
22319: PUSH
22320: LD_INT 2
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 0
22329: PUSH
22330: LD_INT 2
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 1
22339: NEG
22340: PUSH
22341: LD_INT 1
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 2
22350: NEG
22351: PUSH
22352: LD_INT 0
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 2
22361: NEG
22362: PUSH
22363: LD_INT 1
22365: NEG
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: LD_INT 1
22373: NEG
22374: PUSH
22375: LD_INT 3
22377: NEG
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 0
22385: PUSH
22386: LD_INT 3
22388: NEG
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: LD_INT 2
22399: NEG
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 2
22407: PUSH
22408: LD_INT 1
22410: NEG
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 3
22418: PUSH
22419: LD_INT 0
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 3
22428: PUSH
22429: LD_INT 1
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 1
22438: PUSH
22439: LD_INT 3
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 0
22448: PUSH
22449: LD_INT 3
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 1
22458: NEG
22459: PUSH
22460: LD_INT 2
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 2
22469: NEG
22470: PUSH
22471: LD_INT 1
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 3
22480: NEG
22481: PUSH
22482: LD_INT 0
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 3
22491: NEG
22492: PUSH
22493: LD_INT 1
22495: NEG
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22532: LD_ADDR_VAR 0 44
22536: PUSH
22537: LD_INT 0
22539: PUSH
22540: LD_INT 0
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 0
22549: PUSH
22550: LD_INT 1
22552: NEG
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 1
22560: PUSH
22561: LD_INT 0
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 1
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 0
22580: PUSH
22581: LD_INT 1
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 1
22590: NEG
22591: PUSH
22592: LD_INT 0
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 1
22601: NEG
22602: PUSH
22603: LD_INT 1
22605: NEG
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 1
22613: NEG
22614: PUSH
22615: LD_INT 2
22617: NEG
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 1
22625: PUSH
22626: LD_INT 1
22628: NEG
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 2
22636: PUSH
22637: LD_INT 0
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 2
22646: PUSH
22647: LD_INT 1
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 2
22656: PUSH
22657: LD_INT 2
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: LD_INT 2
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 1
22676: NEG
22677: PUSH
22678: LD_INT 1
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 2
22687: NEG
22688: PUSH
22689: LD_INT 0
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 2
22698: NEG
22699: PUSH
22700: LD_INT 1
22702: NEG
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 2
22710: NEG
22711: PUSH
22712: LD_INT 2
22714: NEG
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 2
22722: NEG
22723: PUSH
22724: LD_INT 3
22726: NEG
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 2
22734: PUSH
22735: LD_INT 1
22737: NEG
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 3
22745: PUSH
22746: LD_INT 0
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 3
22755: PUSH
22756: LD_INT 1
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 3
22765: PUSH
22766: LD_INT 2
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 3
22775: PUSH
22776: LD_INT 3
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 2
22785: PUSH
22786: LD_INT 3
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 2
22795: NEG
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 3
22806: NEG
22807: PUSH
22808: LD_INT 0
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 3
22817: NEG
22818: PUSH
22819: LD_INT 1
22821: NEG
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 3
22829: NEG
22830: PUSH
22831: LD_INT 2
22833: NEG
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 3
22841: NEG
22842: PUSH
22843: LD_INT 3
22845: NEG
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22882: LD_ADDR_VAR 0 45
22886: PUSH
22887: LD_INT 0
22889: PUSH
22890: LD_INT 0
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 0
22899: PUSH
22900: LD_INT 1
22902: NEG
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: LD_INT 1
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 0
22930: PUSH
22931: LD_INT 1
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 1
22940: NEG
22941: PUSH
22942: LD_INT 0
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 1
22951: NEG
22952: PUSH
22953: LD_INT 1
22955: NEG
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 1
22963: NEG
22964: PUSH
22965: LD_INT 2
22967: NEG
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 0
22975: PUSH
22976: LD_INT 2
22978: NEG
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 1
22986: PUSH
22987: LD_INT 1
22989: NEG
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 2
22997: PUSH
22998: LD_INT 1
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 2
23007: PUSH
23008: LD_INT 2
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 1
23017: PUSH
23018: LD_INT 2
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 0
23027: PUSH
23028: LD_INT 2
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 1
23037: NEG
23038: PUSH
23039: LD_INT 1
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 2
23048: NEG
23049: PUSH
23050: LD_INT 1
23052: NEG
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 2
23060: NEG
23061: PUSH
23062: LD_INT 2
23064: NEG
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 2
23072: NEG
23073: PUSH
23074: LD_INT 3
23076: NEG
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 1
23084: NEG
23085: PUSH
23086: LD_INT 3
23088: NEG
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 0
23096: PUSH
23097: LD_INT 3
23099: NEG
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 1
23107: PUSH
23108: LD_INT 2
23110: NEG
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 3
23118: PUSH
23119: LD_INT 2
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 3
23128: PUSH
23129: LD_INT 3
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 2
23138: PUSH
23139: LD_INT 3
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 1
23148: PUSH
23149: LD_INT 3
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 0
23158: PUSH
23159: LD_INT 3
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 1
23168: NEG
23169: PUSH
23170: LD_INT 2
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 3
23179: NEG
23180: PUSH
23181: LD_INT 2
23183: NEG
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 3
23191: NEG
23192: PUSH
23193: LD_INT 3
23195: NEG
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23232: LD_ADDR_VAR 0 46
23236: PUSH
23237: LD_INT 0
23239: PUSH
23240: LD_INT 0
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 0
23249: PUSH
23250: LD_INT 1
23252: NEG
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: LD_INT 0
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: LD_INT 1
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 0
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 1
23290: NEG
23291: PUSH
23292: LD_INT 0
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 1
23301: NEG
23302: PUSH
23303: LD_INT 1
23305: NEG
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 1
23313: NEG
23314: PUSH
23315: LD_INT 2
23317: NEG
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 0
23325: PUSH
23326: LD_INT 2
23328: NEG
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 1
23336: PUSH
23337: LD_INT 1
23339: NEG
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 2
23347: PUSH
23348: LD_INT 0
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 2
23357: PUSH
23358: LD_INT 1
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 1
23367: PUSH
23368: LD_INT 2
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 0
23377: PUSH
23378: LD_INT 2
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 1
23387: NEG
23388: PUSH
23389: LD_INT 1
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 2
23398: NEG
23399: PUSH
23400: LD_INT 0
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 2
23409: NEG
23410: PUSH
23411: LD_INT 1
23413: NEG
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 1
23421: NEG
23422: PUSH
23423: LD_INT 3
23425: NEG
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 0
23433: PUSH
23434: LD_INT 3
23436: NEG
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 1
23444: PUSH
23445: LD_INT 2
23447: NEG
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 2
23455: PUSH
23456: LD_INT 1
23458: NEG
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 3
23466: PUSH
23467: LD_INT 0
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 3
23476: PUSH
23477: LD_INT 1
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: LD_INT 3
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 0
23496: PUSH
23497: LD_INT 3
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 1
23506: NEG
23507: PUSH
23508: LD_INT 2
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 2
23517: NEG
23518: PUSH
23519: LD_INT 1
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 3
23528: NEG
23529: PUSH
23530: LD_INT 0
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 3
23539: NEG
23540: PUSH
23541: LD_INT 1
23543: NEG
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23580: LD_ADDR_VAR 0 47
23584: PUSH
23585: LD_INT 0
23587: PUSH
23588: LD_INT 0
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 0
23597: PUSH
23598: LD_INT 1
23600: NEG
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 1
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: PUSH
23619: LD_INT 1
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 0
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 1
23638: NEG
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 1
23649: NEG
23650: PUSH
23651: LD_INT 1
23653: NEG
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 1
23661: NEG
23662: PUSH
23663: LD_INT 2
23665: NEG
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 0
23673: PUSH
23674: LD_INT 2
23676: NEG
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 1
23684: PUSH
23685: LD_INT 1
23687: NEG
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 2
23695: NEG
23696: PUSH
23697: LD_INT 1
23699: NEG
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 2
23707: NEG
23708: PUSH
23709: LD_INT 2
23711: NEG
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23731: LD_ADDR_VAR 0 48
23735: PUSH
23736: LD_INT 0
23738: PUSH
23739: LD_INT 0
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 0
23748: PUSH
23749: LD_INT 1
23751: NEG
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 1
23759: PUSH
23760: LD_INT 0
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 1
23769: PUSH
23770: LD_INT 1
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 0
23779: PUSH
23780: LD_INT 1
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 1
23789: NEG
23790: PUSH
23791: LD_INT 0
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 1
23800: NEG
23801: PUSH
23802: LD_INT 1
23804: NEG
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 1
23812: NEG
23813: PUSH
23814: LD_INT 2
23816: NEG
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 0
23824: PUSH
23825: LD_INT 2
23827: NEG
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 1
23835: PUSH
23836: LD_INT 1
23838: NEG
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 2
23846: PUSH
23847: LD_INT 0
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 2
23856: PUSH
23857: LD_INT 1
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23878: LD_ADDR_VAR 0 49
23882: PUSH
23883: LD_INT 0
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 0
23895: PUSH
23896: LD_INT 1
23898: NEG
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 1
23906: PUSH
23907: LD_INT 0
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 1
23916: PUSH
23917: LD_INT 1
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 0
23926: PUSH
23927: LD_INT 1
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 1
23936: NEG
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 1
23947: NEG
23948: PUSH
23949: LD_INT 1
23951: NEG
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 1
23959: PUSH
23960: LD_INT 1
23962: NEG
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 2
23970: PUSH
23971: LD_INT 0
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 2
23980: PUSH
23981: LD_INT 1
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 2
23990: PUSH
23991: LD_INT 2
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 1
24000: PUSH
24001: LD_INT 2
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24022: LD_ADDR_VAR 0 50
24026: PUSH
24027: LD_INT 0
24029: PUSH
24030: LD_INT 0
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 0
24039: PUSH
24040: LD_INT 1
24042: NEG
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: LD_INT 0
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 1
24060: PUSH
24061: LD_INT 1
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 0
24070: PUSH
24071: LD_INT 1
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: NEG
24081: PUSH
24082: LD_INT 0
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 1
24091: NEG
24092: PUSH
24093: LD_INT 1
24095: NEG
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 2
24103: PUSH
24104: LD_INT 1
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 2
24113: PUSH
24114: LD_INT 2
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: PUSH
24124: LD_INT 2
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 0
24133: PUSH
24134: LD_INT 2
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 1
24143: NEG
24144: PUSH
24145: LD_INT 1
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24166: LD_ADDR_VAR 0 51
24170: PUSH
24171: LD_INT 0
24173: PUSH
24174: LD_INT 0
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 0
24183: PUSH
24184: LD_INT 1
24186: NEG
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 1
24194: PUSH
24195: LD_INT 0
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 1
24204: PUSH
24205: LD_INT 1
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 0
24214: PUSH
24215: LD_INT 1
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 1
24224: NEG
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: NEG
24236: PUSH
24237: LD_INT 1
24239: NEG
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 1
24247: PUSH
24248: LD_INT 2
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 0
24257: PUSH
24258: LD_INT 2
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 1
24267: NEG
24268: PUSH
24269: LD_INT 1
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 2
24278: NEG
24279: PUSH
24280: LD_INT 0
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 2
24289: NEG
24290: PUSH
24291: LD_INT 1
24293: NEG
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24313: LD_ADDR_VAR 0 52
24317: PUSH
24318: LD_INT 0
24320: PUSH
24321: LD_INT 0
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 0
24330: PUSH
24331: LD_INT 1
24333: NEG
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 1
24341: PUSH
24342: LD_INT 0
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 1
24351: PUSH
24352: LD_INT 1
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 0
24361: PUSH
24362: LD_INT 1
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 1
24371: NEG
24372: PUSH
24373: LD_INT 0
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 1
24382: NEG
24383: PUSH
24384: LD_INT 1
24386: NEG
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 1
24394: NEG
24395: PUSH
24396: LD_INT 2
24398: NEG
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 1
24406: NEG
24407: PUSH
24408: LD_INT 1
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 2
24417: NEG
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 2
24428: NEG
24429: PUSH
24430: LD_INT 1
24432: NEG
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 2
24440: NEG
24441: PUSH
24442: LD_INT 2
24444: NEG
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24464: LD_ADDR_VAR 0 53
24468: PUSH
24469: LD_INT 0
24471: PUSH
24472: LD_INT 0
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 0
24481: PUSH
24482: LD_INT 1
24484: NEG
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: LD_INT 0
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 1
24502: PUSH
24503: LD_INT 1
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 0
24512: PUSH
24513: LD_INT 1
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: NEG
24523: PUSH
24524: LD_INT 0
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 1
24533: NEG
24534: PUSH
24535: LD_INT 1
24537: NEG
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 1
24545: NEG
24546: PUSH
24547: LD_INT 2
24549: NEG
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 0
24557: PUSH
24558: LD_INT 2
24560: NEG
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 1
24568: PUSH
24569: LD_INT 1
24571: NEG
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 2
24579: PUSH
24580: LD_INT 0
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 2
24589: PUSH
24590: LD_INT 1
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: LD_INT 2
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 1
24609: PUSH
24610: LD_INT 2
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 0
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 1
24629: NEG
24630: PUSH
24631: LD_INT 1
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 2
24640: NEG
24641: PUSH
24642: LD_INT 0
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 2
24651: NEG
24652: PUSH
24653: LD_INT 1
24655: NEG
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 2
24663: NEG
24664: PUSH
24665: LD_INT 2
24667: NEG
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24694: LD_ADDR_VAR 0 54
24698: PUSH
24699: LD_INT 0
24701: PUSH
24702: LD_INT 0
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 0
24711: PUSH
24712: LD_INT 1
24714: NEG
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 1
24722: PUSH
24723: LD_INT 0
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 1
24732: PUSH
24733: LD_INT 1
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 0
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 1
24752: NEG
24753: PUSH
24754: LD_INT 0
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 1
24763: NEG
24764: PUSH
24765: LD_INT 1
24767: NEG
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 1
24775: NEG
24776: PUSH
24777: LD_INT 2
24779: NEG
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 0
24787: PUSH
24788: LD_INT 2
24790: NEG
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 1
24798: PUSH
24799: LD_INT 1
24801: NEG
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 2
24809: PUSH
24810: LD_INT 0
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 2
24819: PUSH
24820: LD_INT 1
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 2
24829: PUSH
24830: LD_INT 2
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 1
24839: PUSH
24840: LD_INT 2
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 0
24849: PUSH
24850: LD_INT 2
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: LD_INT 1
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 2
24870: NEG
24871: PUSH
24872: LD_INT 0
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 2
24881: NEG
24882: PUSH
24883: LD_INT 1
24885: NEG
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 2
24893: NEG
24894: PUSH
24895: LD_INT 2
24897: NEG
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24924: LD_ADDR_VAR 0 55
24928: PUSH
24929: LD_INT 0
24931: PUSH
24932: LD_INT 0
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: LD_INT 1
24944: NEG
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 1
24952: PUSH
24953: LD_INT 0
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 1
24962: PUSH
24963: LD_INT 1
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 0
24972: PUSH
24973: LD_INT 1
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 1
24982: NEG
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 1
24993: NEG
24994: PUSH
24995: LD_INT 1
24997: NEG
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 1
25005: NEG
25006: PUSH
25007: LD_INT 2
25009: NEG
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: LD_INT 2
25020: NEG
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 1
25028: PUSH
25029: LD_INT 1
25031: NEG
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 2
25039: PUSH
25040: LD_INT 0
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 2
25049: PUSH
25050: LD_INT 1
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: PUSH
25060: LD_INT 2
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 1
25069: PUSH
25070: LD_INT 2
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 0
25079: PUSH
25080: LD_INT 2
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 1
25089: NEG
25090: PUSH
25091: LD_INT 1
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 2
25100: NEG
25101: PUSH
25102: LD_INT 0
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 2
25111: NEG
25112: PUSH
25113: LD_INT 1
25115: NEG
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 2
25123: NEG
25124: PUSH
25125: LD_INT 2
25127: NEG
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25154: LD_ADDR_VAR 0 56
25158: PUSH
25159: LD_INT 0
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 1
25182: PUSH
25183: LD_INT 0
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 1
25192: PUSH
25193: LD_INT 1
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 1
25212: NEG
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 1
25223: NEG
25224: PUSH
25225: LD_INT 1
25227: NEG
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 1
25235: NEG
25236: PUSH
25237: LD_INT 2
25239: NEG
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: LD_INT 2
25250: NEG
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 1
25258: PUSH
25259: LD_INT 1
25261: NEG
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 2
25269: PUSH
25270: LD_INT 0
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 2
25279: PUSH
25280: LD_INT 1
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 2
25289: PUSH
25290: LD_INT 2
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 1
25299: PUSH
25300: LD_INT 2
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 0
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 1
25319: NEG
25320: PUSH
25321: LD_INT 1
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 2
25330: NEG
25331: PUSH
25332: LD_INT 0
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 2
25341: NEG
25342: PUSH
25343: LD_INT 1
25345: NEG
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 2
25353: NEG
25354: PUSH
25355: LD_INT 2
25357: NEG
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25384: LD_ADDR_VAR 0 57
25388: PUSH
25389: LD_INT 0
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 0
25401: PUSH
25402: LD_INT 1
25404: NEG
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: LD_INT 0
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: LD_INT 1
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: NEG
25443: PUSH
25444: LD_INT 0
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 1
25453: NEG
25454: PUSH
25455: LD_INT 1
25457: NEG
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 1
25465: NEG
25466: PUSH
25467: LD_INT 2
25469: NEG
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 0
25477: PUSH
25478: LD_INT 2
25480: NEG
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 1
25488: PUSH
25489: LD_INT 1
25491: NEG
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 2
25499: PUSH
25500: LD_INT 0
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 2
25509: PUSH
25510: LD_INT 1
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 2
25519: PUSH
25520: LD_INT 2
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 1
25529: PUSH
25530: LD_INT 2
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: LD_INT 2
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 1
25549: NEG
25550: PUSH
25551: LD_INT 1
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 2
25560: NEG
25561: PUSH
25562: LD_INT 0
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 2
25571: NEG
25572: PUSH
25573: LD_INT 1
25575: NEG
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 2
25583: NEG
25584: PUSH
25585: LD_INT 2
25587: NEG
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25614: LD_ADDR_VAR 0 58
25618: PUSH
25619: LD_INT 0
25621: PUSH
25622: LD_INT 0
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: LD_INT 1
25634: NEG
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 1
25642: PUSH
25643: LD_INT 0
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: LD_INT 1
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 1
25672: NEG
25673: PUSH
25674: LD_INT 0
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 1
25683: NEG
25684: PUSH
25685: LD_INT 1
25687: NEG
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 1
25695: NEG
25696: PUSH
25697: LD_INT 2
25699: NEG
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 0
25707: PUSH
25708: LD_INT 2
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 1
25718: PUSH
25719: LD_INT 1
25721: NEG
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 2
25729: PUSH
25730: LD_INT 0
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 2
25739: PUSH
25740: LD_INT 1
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 2
25749: PUSH
25750: LD_INT 2
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 1
25759: PUSH
25760: LD_INT 2
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: LD_INT 2
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 1
25779: NEG
25780: PUSH
25781: LD_INT 1
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 2
25790: NEG
25791: PUSH
25792: LD_INT 0
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 2
25801: NEG
25802: PUSH
25803: LD_INT 1
25805: NEG
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 2
25813: NEG
25814: PUSH
25815: LD_INT 2
25817: NEG
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25844: LD_ADDR_VAR 0 59
25848: PUSH
25849: LD_INT 0
25851: PUSH
25852: LD_INT 0
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 0
25861: PUSH
25862: LD_INT 1
25864: NEG
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 1
25872: PUSH
25873: LD_INT 0
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: LD_INT 1
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 0
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 1
25902: NEG
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 1
25913: NEG
25914: PUSH
25915: LD_INT 1
25917: NEG
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25932: LD_ADDR_VAR 0 60
25936: PUSH
25937: LD_INT 0
25939: PUSH
25940: LD_INT 0
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 0
25949: PUSH
25950: LD_INT 1
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: LD_INT 0
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 1
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 0
25980: PUSH
25981: LD_INT 1
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: LD_INT 0
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 1
26001: NEG
26002: PUSH
26003: LD_INT 1
26005: NEG
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26020: LD_ADDR_VAR 0 61
26024: PUSH
26025: LD_INT 0
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 0
26037: PUSH
26038: LD_INT 1
26040: NEG
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 1
26048: PUSH
26049: LD_INT 0
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 1
26058: PUSH
26059: LD_INT 1
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: LD_INT 1
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 1
26078: NEG
26079: PUSH
26080: LD_INT 0
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 1
26089: NEG
26090: PUSH
26091: LD_INT 1
26093: NEG
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26108: LD_ADDR_VAR 0 62
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: LD_INT 0
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 0
26125: PUSH
26126: LD_INT 1
26128: NEG
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 1
26136: PUSH
26137: LD_INT 0
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 1
26146: PUSH
26147: LD_INT 1
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 0
26156: PUSH
26157: LD_INT 1
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: NEG
26167: PUSH
26168: LD_INT 0
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 1
26177: NEG
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26196: LD_ADDR_VAR 0 63
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: LD_INT 0
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: LD_INT 1
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: LD_INT 0
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 1
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 0
26244: PUSH
26245: LD_INT 1
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 1
26254: NEG
26255: PUSH
26256: LD_INT 0
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 1
26265: NEG
26266: PUSH
26267: LD_INT 1
26269: NEG
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26284: LD_ADDR_VAR 0 64
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 0
26301: PUSH
26302: LD_INT 1
26304: NEG
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 1
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: LD_INT 1
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: LD_INT 1
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 1
26353: NEG
26354: PUSH
26355: LD_INT 1
26357: NEG
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: ST_TO_ADDR
// end ; 1 :
26372: GO 32269
26374: LD_INT 1
26376: DOUBLE
26377: EQUAL
26378: IFTRUE 26382
26380: GO 29005
26382: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26383: LD_ADDR_VAR 0 11
26387: PUSH
26388: LD_INT 1
26390: NEG
26391: PUSH
26392: LD_INT 3
26394: NEG
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 0
26402: PUSH
26403: LD_INT 3
26405: NEG
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 1
26413: PUSH
26414: LD_INT 2
26416: NEG
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: LIST
26426: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26427: LD_ADDR_VAR 0 12
26431: PUSH
26432: LD_INT 2
26434: PUSH
26435: LD_INT 1
26437: NEG
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 3
26445: PUSH
26446: LD_INT 0
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 3
26455: PUSH
26456: LD_INT 1
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: LIST
26467: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26468: LD_ADDR_VAR 0 13
26472: PUSH
26473: LD_INT 3
26475: PUSH
26476: LD_INT 2
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 3
26485: PUSH
26486: LD_INT 3
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 2
26495: PUSH
26496: LD_INT 3
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: LIST
26507: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26508: LD_ADDR_VAR 0 14
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: LD_INT 3
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 0
26525: PUSH
26526: LD_INT 3
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 1
26535: NEG
26536: PUSH
26537: LD_INT 2
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: LIST
26548: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26549: LD_ADDR_VAR 0 15
26553: PUSH
26554: LD_INT 2
26556: NEG
26557: PUSH
26558: LD_INT 1
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 3
26567: NEG
26568: PUSH
26569: LD_INT 0
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 3
26578: NEG
26579: PUSH
26580: LD_INT 1
26582: NEG
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: LIST
26592: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26593: LD_ADDR_VAR 0 16
26597: PUSH
26598: LD_INT 2
26600: NEG
26601: PUSH
26602: LD_INT 3
26604: NEG
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 3
26612: NEG
26613: PUSH
26614: LD_INT 2
26616: NEG
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 3
26624: NEG
26625: PUSH
26626: LD_INT 3
26628: NEG
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: LIST
26638: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26639: LD_ADDR_VAR 0 17
26643: PUSH
26644: LD_INT 1
26646: NEG
26647: PUSH
26648: LD_INT 3
26650: NEG
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 0
26658: PUSH
26659: LD_INT 3
26661: NEG
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 1
26669: PUSH
26670: LD_INT 2
26672: NEG
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: LIST
26682: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26683: LD_ADDR_VAR 0 18
26687: PUSH
26688: LD_INT 2
26690: PUSH
26691: LD_INT 1
26693: NEG
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 3
26701: PUSH
26702: LD_INT 0
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 3
26711: PUSH
26712: LD_INT 1
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: LIST
26723: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26724: LD_ADDR_VAR 0 19
26728: PUSH
26729: LD_INT 3
26731: PUSH
26732: LD_INT 2
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 3
26741: PUSH
26742: LD_INT 3
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 2
26751: PUSH
26752: LD_INT 3
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: LIST
26763: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26764: LD_ADDR_VAR 0 20
26768: PUSH
26769: LD_INT 1
26771: PUSH
26772: LD_INT 3
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: LD_INT 3
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 1
26791: NEG
26792: PUSH
26793: LD_INT 2
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: LIST
26804: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26805: LD_ADDR_VAR 0 21
26809: PUSH
26810: LD_INT 2
26812: NEG
26813: PUSH
26814: LD_INT 1
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 3
26823: NEG
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 3
26834: NEG
26835: PUSH
26836: LD_INT 1
26838: NEG
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: LIST
26848: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26849: LD_ADDR_VAR 0 22
26853: PUSH
26854: LD_INT 2
26856: NEG
26857: PUSH
26858: LD_INT 3
26860: NEG
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 3
26868: NEG
26869: PUSH
26870: LD_INT 2
26872: NEG
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 3
26880: NEG
26881: PUSH
26882: LD_INT 3
26884: NEG
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: LIST
26894: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26895: LD_ADDR_VAR 0 23
26899: PUSH
26900: LD_INT 0
26902: PUSH
26903: LD_INT 3
26905: NEG
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 1
26913: NEG
26914: PUSH
26915: LD_INT 4
26917: NEG
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: LD_INT 3
26928: NEG
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: LIST
26938: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26939: LD_ADDR_VAR 0 24
26943: PUSH
26944: LD_INT 3
26946: PUSH
26947: LD_INT 0
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 3
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 4
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: LIST
26979: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
26980: LD_ADDR_VAR 0 25
26984: PUSH
26985: LD_INT 3
26987: PUSH
26988: LD_INT 3
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 4
26997: PUSH
26998: LD_INT 3
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 3
27007: PUSH
27008: LD_INT 4
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: LIST
27019: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27020: LD_ADDR_VAR 0 26
27024: PUSH
27025: LD_INT 0
27027: PUSH
27028: LD_INT 3
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 1
27037: PUSH
27038: LD_INT 4
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 1
27047: NEG
27048: PUSH
27049: LD_INT 3
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: LIST
27060: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27061: LD_ADDR_VAR 0 27
27065: PUSH
27066: LD_INT 3
27068: NEG
27069: PUSH
27070: LD_INT 0
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 3
27079: NEG
27080: PUSH
27081: LD_INT 1
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 4
27090: NEG
27091: PUSH
27092: LD_INT 1
27094: NEG
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: LIST
27104: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27105: LD_ADDR_VAR 0 28
27109: PUSH
27110: LD_INT 3
27112: NEG
27113: PUSH
27114: LD_INT 3
27116: NEG
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 3
27124: NEG
27125: PUSH
27126: LD_INT 4
27128: NEG
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 4
27136: NEG
27137: PUSH
27138: LD_INT 3
27140: NEG
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: LIST
27150: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27151: LD_ADDR_VAR 0 29
27155: PUSH
27156: LD_INT 1
27158: NEG
27159: PUSH
27160: LD_INT 3
27162: NEG
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 0
27170: PUSH
27171: LD_INT 3
27173: NEG
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 1
27181: PUSH
27182: LD_INT 2
27184: NEG
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 1
27192: NEG
27193: PUSH
27194: LD_INT 4
27196: NEG
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 0
27204: PUSH
27205: LD_INT 4
27207: NEG
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 1
27215: PUSH
27216: LD_INT 3
27218: NEG
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: NEG
27227: PUSH
27228: LD_INT 5
27230: NEG
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 0
27238: PUSH
27239: LD_INT 5
27241: NEG
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 1
27249: PUSH
27250: LD_INT 4
27252: NEG
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 1
27260: NEG
27261: PUSH
27262: LD_INT 6
27264: NEG
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: LD_INT 6
27275: NEG
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 1
27283: PUSH
27284: LD_INT 5
27286: NEG
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27306: LD_ADDR_VAR 0 30
27310: PUSH
27311: LD_INT 2
27313: PUSH
27314: LD_INT 1
27316: NEG
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 3
27324: PUSH
27325: LD_INT 0
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 3
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 3
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 4
27355: PUSH
27356: LD_INT 0
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 4
27365: PUSH
27366: LD_INT 1
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 4
27375: PUSH
27376: LD_INT 1
27378: NEG
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 5
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 5
27396: PUSH
27397: LD_INT 1
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 5
27406: PUSH
27407: LD_INT 1
27409: NEG
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 6
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 6
27427: PUSH
27428: LD_INT 1
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27449: LD_ADDR_VAR 0 31
27453: PUSH
27454: LD_INT 3
27456: PUSH
27457: LD_INT 2
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 3
27466: PUSH
27467: LD_INT 3
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 2
27476: PUSH
27477: LD_INT 3
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 4
27486: PUSH
27487: LD_INT 3
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 4
27496: PUSH
27497: LD_INT 4
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 3
27506: PUSH
27507: LD_INT 4
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 5
27516: PUSH
27517: LD_INT 4
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 5
27526: PUSH
27527: LD_INT 5
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 4
27536: PUSH
27537: LD_INT 5
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 6
27546: PUSH
27547: LD_INT 5
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 6
27556: PUSH
27557: LD_INT 6
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 5
27566: PUSH
27567: LD_INT 6
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27588: LD_ADDR_VAR 0 32
27592: PUSH
27593: LD_INT 1
27595: PUSH
27596: LD_INT 3
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: LD_INT 3
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 1
27615: NEG
27616: PUSH
27617: LD_INT 2
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 1
27626: PUSH
27627: LD_INT 4
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 0
27636: PUSH
27637: LD_INT 4
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 1
27646: NEG
27647: PUSH
27648: LD_INT 3
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 1
27657: PUSH
27658: LD_INT 5
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 0
27667: PUSH
27668: LD_INT 5
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 1
27677: NEG
27678: PUSH
27679: LD_INT 4
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 1
27688: PUSH
27689: LD_INT 6
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 0
27698: PUSH
27699: LD_INT 6
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 1
27708: NEG
27709: PUSH
27710: LD_INT 5
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27731: LD_ADDR_VAR 0 33
27735: PUSH
27736: LD_INT 2
27738: NEG
27739: PUSH
27740: LD_INT 1
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 3
27749: NEG
27750: PUSH
27751: LD_INT 0
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 3
27760: NEG
27761: PUSH
27762: LD_INT 1
27764: NEG
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 3
27772: NEG
27773: PUSH
27774: LD_INT 1
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 4
27783: NEG
27784: PUSH
27785: LD_INT 0
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 4
27794: NEG
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 4
27806: NEG
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 5
27817: NEG
27818: PUSH
27819: LD_INT 0
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 5
27828: NEG
27829: PUSH
27830: LD_INT 1
27832: NEG
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 5
27840: NEG
27841: PUSH
27842: LD_INT 1
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 6
27851: NEG
27852: PUSH
27853: LD_INT 0
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 6
27862: NEG
27863: PUSH
27864: LD_INT 1
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27886: LD_ADDR_VAR 0 34
27890: PUSH
27891: LD_INT 2
27893: NEG
27894: PUSH
27895: LD_INT 3
27897: NEG
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 3
27905: NEG
27906: PUSH
27907: LD_INT 2
27909: NEG
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 3
27917: NEG
27918: PUSH
27919: LD_INT 3
27921: NEG
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 3
27929: NEG
27930: PUSH
27931: LD_INT 4
27933: NEG
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 4
27941: NEG
27942: PUSH
27943: LD_INT 3
27945: NEG
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 4
27953: NEG
27954: PUSH
27955: LD_INT 4
27957: NEG
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 4
27965: NEG
27966: PUSH
27967: LD_INT 5
27969: NEG
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 5
27977: NEG
27978: PUSH
27979: LD_INT 4
27981: NEG
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 5
27989: NEG
27990: PUSH
27991: LD_INT 5
27993: NEG
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 5
28001: NEG
28002: PUSH
28003: LD_INT 6
28005: NEG
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 6
28013: NEG
28014: PUSH
28015: LD_INT 5
28017: NEG
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 6
28025: NEG
28026: PUSH
28027: LD_INT 6
28029: NEG
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28049: LD_ADDR_VAR 0 41
28053: PUSH
28054: LD_INT 0
28056: PUSH
28057: LD_INT 2
28059: NEG
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 1
28067: NEG
28068: PUSH
28069: LD_INT 3
28071: NEG
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 1
28079: PUSH
28080: LD_INT 2
28082: NEG
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: LIST
28092: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28093: LD_ADDR_VAR 0 42
28097: PUSH
28098: LD_INT 2
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 2
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 3
28121: PUSH
28122: LD_INT 1
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: LIST
28133: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28134: LD_ADDR_VAR 0 43
28138: PUSH
28139: LD_INT 2
28141: PUSH
28142: LD_INT 2
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 3
28151: PUSH
28152: LD_INT 2
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 2
28161: PUSH
28162: LD_INT 3
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: LIST
28173: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28174: LD_ADDR_VAR 0 44
28178: PUSH
28179: LD_INT 0
28181: PUSH
28182: LD_INT 2
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 1
28191: PUSH
28192: LD_INT 3
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 1
28201: NEG
28202: PUSH
28203: LD_INT 2
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: LIST
28214: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28215: LD_ADDR_VAR 0 45
28219: PUSH
28220: LD_INT 2
28222: NEG
28223: PUSH
28224: LD_INT 0
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 2
28233: NEG
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 3
28244: NEG
28245: PUSH
28246: LD_INT 1
28248: NEG
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: LIST
28258: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28259: LD_ADDR_VAR 0 46
28263: PUSH
28264: LD_INT 2
28266: NEG
28267: PUSH
28268: LD_INT 2
28270: NEG
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 2
28278: NEG
28279: PUSH
28280: LD_INT 3
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 3
28290: NEG
28291: PUSH
28292: LD_INT 2
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: LIST
28304: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28305: LD_ADDR_VAR 0 47
28309: PUSH
28310: LD_INT 2
28312: NEG
28313: PUSH
28314: LD_INT 3
28316: NEG
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 1
28324: NEG
28325: PUSH
28326: LD_INT 3
28328: NEG
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28338: LD_ADDR_VAR 0 48
28342: PUSH
28343: LD_INT 1
28345: PUSH
28346: LD_INT 2
28348: NEG
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 2
28356: PUSH
28357: LD_INT 1
28359: NEG
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28369: LD_ADDR_VAR 0 49
28373: PUSH
28374: LD_INT 3
28376: PUSH
28377: LD_INT 1
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 3
28386: PUSH
28387: LD_INT 2
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28398: LD_ADDR_VAR 0 50
28402: PUSH
28403: LD_INT 2
28405: PUSH
28406: LD_INT 3
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: LD_INT 3
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28427: LD_ADDR_VAR 0 51
28431: PUSH
28432: LD_INT 1
28434: NEG
28435: PUSH
28436: LD_INT 2
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 2
28445: NEG
28446: PUSH
28447: LD_INT 1
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28458: LD_ADDR_VAR 0 52
28462: PUSH
28463: LD_INT 3
28465: NEG
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 3
28477: NEG
28478: PUSH
28479: LD_INT 2
28481: NEG
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28491: LD_ADDR_VAR 0 53
28495: PUSH
28496: LD_INT 1
28498: NEG
28499: PUSH
28500: LD_INT 3
28502: NEG
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: LD_INT 3
28513: NEG
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 1
28521: PUSH
28522: LD_INT 2
28524: NEG
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: LIST
28534: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28535: LD_ADDR_VAR 0 54
28539: PUSH
28540: LD_INT 2
28542: PUSH
28543: LD_INT 1
28545: NEG
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 3
28553: PUSH
28554: LD_INT 0
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 3
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: LIST
28575: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28576: LD_ADDR_VAR 0 55
28580: PUSH
28581: LD_INT 3
28583: PUSH
28584: LD_INT 2
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 3
28593: PUSH
28594: LD_INT 3
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 2
28603: PUSH
28604: LD_INT 3
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: LIST
28615: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28616: LD_ADDR_VAR 0 56
28620: PUSH
28621: LD_INT 1
28623: PUSH
28624: LD_INT 3
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: LD_INT 3
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 1
28643: NEG
28644: PUSH
28645: LD_INT 2
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: LIST
28656: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28657: LD_ADDR_VAR 0 57
28661: PUSH
28662: LD_INT 2
28664: NEG
28665: PUSH
28666: LD_INT 1
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 3
28675: NEG
28676: PUSH
28677: LD_INT 0
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 3
28686: NEG
28687: PUSH
28688: LD_INT 1
28690: NEG
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: LIST
28700: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28701: LD_ADDR_VAR 0 58
28705: PUSH
28706: LD_INT 2
28708: NEG
28709: PUSH
28710: LD_INT 3
28712: NEG
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 3
28720: NEG
28721: PUSH
28722: LD_INT 2
28724: NEG
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 3
28732: NEG
28733: PUSH
28734: LD_INT 3
28736: NEG
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: LIST
28746: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28747: LD_ADDR_VAR 0 59
28751: PUSH
28752: LD_INT 1
28754: NEG
28755: PUSH
28756: LD_INT 2
28758: NEG
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 0
28766: PUSH
28767: LD_INT 2
28769: NEG
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: LD_INT 1
28780: NEG
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: LIST
28790: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28791: LD_ADDR_VAR 0 60
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: LD_INT 1
28801: NEG
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 2
28809: PUSH
28810: LD_INT 0
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 2
28819: PUSH
28820: LD_INT 1
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: LIST
28831: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28832: LD_ADDR_VAR 0 61
28836: PUSH
28837: LD_INT 2
28839: PUSH
28840: LD_INT 1
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 2
28849: PUSH
28850: LD_INT 2
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 1
28859: PUSH
28860: LD_INT 2
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: LIST
28871: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28872: LD_ADDR_VAR 0 62
28876: PUSH
28877: LD_INT 1
28879: PUSH
28880: LD_INT 2
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 0
28889: PUSH
28890: LD_INT 2
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 1
28899: NEG
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: LIST
28912: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28913: LD_ADDR_VAR 0 63
28917: PUSH
28918: LD_INT 1
28920: NEG
28921: PUSH
28922: LD_INT 1
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 2
28931: NEG
28932: PUSH
28933: LD_INT 0
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 2
28942: NEG
28943: PUSH
28944: LD_INT 1
28946: NEG
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: LIST
28956: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28957: LD_ADDR_VAR 0 64
28961: PUSH
28962: LD_INT 1
28964: NEG
28965: PUSH
28966: LD_INT 2
28968: NEG
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 2
28976: NEG
28977: PUSH
28978: LD_INT 1
28980: NEG
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 2
28988: NEG
28989: PUSH
28990: LD_INT 2
28992: NEG
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: LIST
29002: ST_TO_ADDR
// end ; 2 :
29003: GO 32269
29005: LD_INT 2
29007: DOUBLE
29008: EQUAL
29009: IFTRUE 29013
29011: GO 32268
29013: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29014: LD_ADDR_VAR 0 29
29018: PUSH
29019: LD_INT 4
29021: PUSH
29022: LD_INT 0
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 4
29031: PUSH
29032: LD_INT 1
29034: NEG
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 5
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 5
29052: PUSH
29053: LD_INT 1
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 4
29062: PUSH
29063: LD_INT 1
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 3
29072: PUSH
29073: LD_INT 0
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 3
29082: PUSH
29083: LD_INT 1
29085: NEG
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 3
29093: PUSH
29094: LD_INT 2
29096: NEG
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 5
29104: PUSH
29105: LD_INT 2
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 3
29114: PUSH
29115: LD_INT 3
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 3
29124: PUSH
29125: LD_INT 2
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 4
29134: PUSH
29135: LD_INT 3
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 4
29144: PUSH
29145: LD_INT 4
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 3
29154: PUSH
29155: LD_INT 4
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 2
29164: PUSH
29165: LD_INT 3
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 2
29174: PUSH
29175: LD_INT 2
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 4
29184: PUSH
29185: LD_INT 2
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 2
29194: PUSH
29195: LD_INT 4
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 0
29204: PUSH
29205: LD_INT 4
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 0
29214: PUSH
29215: LD_INT 3
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: LD_INT 4
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 1
29234: PUSH
29235: LD_INT 5
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 0
29244: PUSH
29245: LD_INT 5
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 1
29254: NEG
29255: PUSH
29256: LD_INT 4
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 1
29265: NEG
29266: PUSH
29267: LD_INT 3
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 2
29276: PUSH
29277: LD_INT 5
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 2
29286: NEG
29287: PUSH
29288: LD_INT 3
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 3
29297: NEG
29298: PUSH
29299: LD_INT 0
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 3
29308: NEG
29309: PUSH
29310: LD_INT 1
29312: NEG
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 2
29320: NEG
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 2
29331: NEG
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 3
29342: NEG
29343: PUSH
29344: LD_INT 1
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 4
29353: NEG
29354: PUSH
29355: LD_INT 0
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 4
29364: NEG
29365: PUSH
29366: LD_INT 1
29368: NEG
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 4
29376: NEG
29377: PUSH
29378: LD_INT 2
29380: NEG
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 2
29388: NEG
29389: PUSH
29390: LD_INT 2
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 4
29399: NEG
29400: PUSH
29401: LD_INT 4
29403: NEG
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 4
29411: NEG
29412: PUSH
29413: LD_INT 5
29415: NEG
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 3
29423: NEG
29424: PUSH
29425: LD_INT 4
29427: NEG
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 3
29435: NEG
29436: PUSH
29437: LD_INT 3
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 4
29447: NEG
29448: PUSH
29449: LD_INT 3
29451: NEG
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 5
29459: NEG
29460: PUSH
29461: LD_INT 4
29463: NEG
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 5
29471: NEG
29472: PUSH
29473: LD_INT 5
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 3
29483: NEG
29484: PUSH
29485: LD_INT 5
29487: NEG
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 5
29495: NEG
29496: PUSH
29497: LD_INT 3
29499: NEG
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29552: LD_ADDR_VAR 0 30
29556: PUSH
29557: LD_INT 4
29559: PUSH
29560: LD_INT 4
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 4
29569: PUSH
29570: LD_INT 3
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 5
29579: PUSH
29580: LD_INT 4
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 5
29589: PUSH
29590: LD_INT 5
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 4
29599: PUSH
29600: LD_INT 5
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 3
29609: PUSH
29610: LD_INT 4
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 3
29619: PUSH
29620: LD_INT 3
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 5
29629: PUSH
29630: LD_INT 3
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 3
29639: PUSH
29640: LD_INT 5
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 0
29649: PUSH
29650: LD_INT 3
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 0
29659: PUSH
29660: LD_INT 2
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 1
29669: PUSH
29670: LD_INT 3
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 1
29679: PUSH
29680: LD_INT 4
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: LD_INT 4
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 1
29699: NEG
29700: PUSH
29701: LD_INT 3
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 1
29710: NEG
29711: PUSH
29712: LD_INT 2
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 2
29721: PUSH
29722: LD_INT 4
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 2
29731: NEG
29732: PUSH
29733: LD_INT 2
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 4
29742: NEG
29743: PUSH
29744: LD_INT 0
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 4
29753: NEG
29754: PUSH
29755: LD_INT 1
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 3
29765: NEG
29766: PUSH
29767: LD_INT 0
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 3
29776: NEG
29777: PUSH
29778: LD_INT 1
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 4
29787: NEG
29788: PUSH
29789: LD_INT 1
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 5
29798: NEG
29799: PUSH
29800: LD_INT 0
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 5
29809: NEG
29810: PUSH
29811: LD_INT 1
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 5
29821: NEG
29822: PUSH
29823: LD_INT 2
29825: NEG
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 3
29833: NEG
29834: PUSH
29835: LD_INT 2
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 3
29844: NEG
29845: PUSH
29846: LD_INT 3
29848: NEG
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 3
29856: NEG
29857: PUSH
29858: LD_INT 4
29860: NEG
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 2
29868: NEG
29869: PUSH
29870: LD_INT 3
29872: NEG
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 2
29880: NEG
29881: PUSH
29882: LD_INT 2
29884: NEG
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 3
29892: NEG
29893: PUSH
29894: LD_INT 2
29896: NEG
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 4
29904: NEG
29905: PUSH
29906: LD_INT 3
29908: NEG
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 4
29916: NEG
29917: PUSH
29918: LD_INT 4
29920: NEG
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 2
29928: NEG
29929: PUSH
29930: LD_INT 4
29932: NEG
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 4
29940: NEG
29941: PUSH
29942: LD_INT 2
29944: NEG
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 0
29952: PUSH
29953: LD_INT 4
29955: NEG
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 0
29963: PUSH
29964: LD_INT 5
29966: NEG
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 1
29974: PUSH
29975: LD_INT 4
29977: NEG
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 1
29985: PUSH
29986: LD_INT 3
29988: NEG
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 0
29996: PUSH
29997: LD_INT 3
29999: NEG
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 1
30007: NEG
30008: PUSH
30009: LD_INT 4
30011: NEG
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 1
30019: NEG
30020: PUSH
30021: LD_INT 5
30023: NEG
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 2
30031: PUSH
30032: LD_INT 3
30034: NEG
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 2
30042: NEG
30043: PUSH
30044: LD_INT 5
30046: NEG
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30099: LD_ADDR_VAR 0 31
30103: PUSH
30104: LD_INT 0
30106: PUSH
30107: LD_INT 4
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 0
30116: PUSH
30117: LD_INT 3
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 1
30126: PUSH
30127: LD_INT 4
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 1
30136: PUSH
30137: LD_INT 5
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 0
30146: PUSH
30147: LD_INT 5
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 1
30156: NEG
30157: PUSH
30158: LD_INT 4
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 1
30167: NEG
30168: PUSH
30169: LD_INT 3
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 2
30178: PUSH
30179: LD_INT 5
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 2
30188: NEG
30189: PUSH
30190: LD_INT 3
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 3
30199: NEG
30200: PUSH
30201: LD_INT 0
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 3
30210: NEG
30211: PUSH
30212: LD_INT 1
30214: NEG
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 2
30222: NEG
30223: PUSH
30224: LD_INT 0
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 2
30233: NEG
30234: PUSH
30235: LD_INT 1
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 3
30244: NEG
30245: PUSH
30246: LD_INT 1
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 4
30255: NEG
30256: PUSH
30257: LD_INT 0
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 4
30266: NEG
30267: PUSH
30268: LD_INT 1
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 4
30278: NEG
30279: PUSH
30280: LD_INT 2
30282: NEG
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 2
30290: NEG
30291: PUSH
30292: LD_INT 2
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 4
30301: NEG
30302: PUSH
30303: LD_INT 4
30305: NEG
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 4
30313: NEG
30314: PUSH
30315: LD_INT 5
30317: NEG
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 3
30325: NEG
30326: PUSH
30327: LD_INT 4
30329: NEG
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 3
30337: NEG
30338: PUSH
30339: LD_INT 3
30341: NEG
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 4
30349: NEG
30350: PUSH
30351: LD_INT 3
30353: NEG
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 5
30361: NEG
30362: PUSH
30363: LD_INT 4
30365: NEG
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 5
30373: NEG
30374: PUSH
30375: LD_INT 5
30377: NEG
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 3
30385: NEG
30386: PUSH
30387: LD_INT 5
30389: NEG
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 5
30397: NEG
30398: PUSH
30399: LD_INT 3
30401: NEG
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 0
30409: PUSH
30410: LD_INT 3
30412: NEG
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 0
30420: PUSH
30421: LD_INT 4
30423: NEG
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 1
30431: PUSH
30432: LD_INT 3
30434: NEG
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 1
30442: PUSH
30443: LD_INT 2
30445: NEG
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: LD_INT 2
30456: NEG
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 1
30464: NEG
30465: PUSH
30466: LD_INT 3
30468: NEG
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 1
30476: NEG
30477: PUSH
30478: LD_INT 4
30480: NEG
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 2
30488: PUSH
30489: LD_INT 2
30491: NEG
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 2
30499: NEG
30500: PUSH
30501: LD_INT 4
30503: NEG
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 4
30511: PUSH
30512: LD_INT 0
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 4
30521: PUSH
30522: LD_INT 1
30524: NEG
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 5
30532: PUSH
30533: LD_INT 0
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 5
30542: PUSH
30543: LD_INT 1
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 4
30552: PUSH
30553: LD_INT 1
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 3
30562: PUSH
30563: LD_INT 0
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 3
30572: PUSH
30573: LD_INT 1
30575: NEG
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 3
30583: PUSH
30584: LD_INT 2
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 5
30594: PUSH
30595: LD_INT 2
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30649: LD_ADDR_VAR 0 32
30653: PUSH
30654: LD_INT 4
30656: NEG
30657: PUSH
30658: LD_INT 0
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 4
30667: NEG
30668: PUSH
30669: LD_INT 1
30671: NEG
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 3
30679: NEG
30680: PUSH
30681: LD_INT 0
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 3
30690: NEG
30691: PUSH
30692: LD_INT 1
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 4
30701: NEG
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 5
30712: NEG
30713: PUSH
30714: LD_INT 0
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 5
30723: NEG
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 5
30735: NEG
30736: PUSH
30737: LD_INT 2
30739: NEG
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 3
30747: NEG
30748: PUSH
30749: LD_INT 2
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 3
30758: NEG
30759: PUSH
30760: LD_INT 3
30762: NEG
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 3
30770: NEG
30771: PUSH
30772: LD_INT 4
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 2
30782: NEG
30783: PUSH
30784: LD_INT 3
30786: NEG
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 2
30794: NEG
30795: PUSH
30796: LD_INT 2
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 3
30806: NEG
30807: PUSH
30808: LD_INT 2
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 4
30818: NEG
30819: PUSH
30820: LD_INT 3
30822: NEG
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 4
30830: NEG
30831: PUSH
30832: LD_INT 4
30834: NEG
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 2
30842: NEG
30843: PUSH
30844: LD_INT 4
30846: NEG
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 4
30854: NEG
30855: PUSH
30856: LD_INT 2
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 0
30866: PUSH
30867: LD_INT 4
30869: NEG
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 0
30877: PUSH
30878: LD_INT 5
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 1
30888: PUSH
30889: LD_INT 4
30891: NEG
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: LD_INT 3
30902: NEG
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 0
30910: PUSH
30911: LD_INT 3
30913: NEG
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 1
30921: NEG
30922: PUSH
30923: LD_INT 4
30925: NEG
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 1
30933: NEG
30934: PUSH
30935: LD_INT 5
30937: NEG
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 2
30945: PUSH
30946: LD_INT 3
30948: NEG
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 2
30956: NEG
30957: PUSH
30958: LD_INT 5
30960: NEG
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 3
30968: PUSH
30969: LD_INT 0
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 3
30978: PUSH
30979: LD_INT 1
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 4
30989: PUSH
30990: LD_INT 0
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 4
30999: PUSH
31000: LD_INT 1
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 3
31009: PUSH
31010: LD_INT 1
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 2
31019: PUSH
31020: LD_INT 0
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 2
31029: PUSH
31030: LD_INT 1
31032: NEG
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 2
31040: PUSH
31041: LD_INT 2
31043: NEG
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 4
31051: PUSH
31052: LD_INT 2
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 4
31061: PUSH
31062: LD_INT 4
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 4
31071: PUSH
31072: LD_INT 3
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 5
31081: PUSH
31082: LD_INT 4
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 5
31091: PUSH
31092: LD_INT 5
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 4
31101: PUSH
31102: LD_INT 5
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 3
31111: PUSH
31112: LD_INT 4
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 3
31121: PUSH
31122: LD_INT 3
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 5
31131: PUSH
31132: LD_INT 3
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 3
31141: PUSH
31142: LD_INT 5
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31196: LD_ADDR_VAR 0 33
31200: PUSH
31201: LD_INT 4
31203: NEG
31204: PUSH
31205: LD_INT 4
31207: NEG
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 4
31215: NEG
31216: PUSH
31217: LD_INT 5
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 3
31227: NEG
31228: PUSH
31229: LD_INT 4
31231: NEG
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 3
31239: NEG
31240: PUSH
31241: LD_INT 3
31243: NEG
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 4
31251: NEG
31252: PUSH
31253: LD_INT 3
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 5
31263: NEG
31264: PUSH
31265: LD_INT 4
31267: NEG
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 5
31275: NEG
31276: PUSH
31277: LD_INT 5
31279: NEG
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 3
31287: NEG
31288: PUSH
31289: LD_INT 5
31291: NEG
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 5
31299: NEG
31300: PUSH
31301: LD_INT 3
31303: NEG
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 0
31311: PUSH
31312: LD_INT 3
31314: NEG
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 0
31322: PUSH
31323: LD_INT 4
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: LD_INT 3
31336: NEG
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 1
31344: PUSH
31345: LD_INT 2
31347: NEG
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: LD_INT 2
31358: NEG
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 1
31366: NEG
31367: PUSH
31368: LD_INT 3
31370: NEG
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 1
31378: NEG
31379: PUSH
31380: LD_INT 4
31382: NEG
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 2
31390: PUSH
31391: LD_INT 2
31393: NEG
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 2
31401: NEG
31402: PUSH
31403: LD_INT 4
31405: NEG
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 4
31413: PUSH
31414: LD_INT 0
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 4
31423: PUSH
31424: LD_INT 1
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 5
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 5
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 4
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 3
31464: PUSH
31465: LD_INT 0
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 3
31474: PUSH
31475: LD_INT 1
31477: NEG
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 3
31485: PUSH
31486: LD_INT 2
31488: NEG
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 5
31496: PUSH
31497: LD_INT 2
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 3
31506: PUSH
31507: LD_INT 3
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 3
31516: PUSH
31517: LD_INT 2
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 4
31526: PUSH
31527: LD_INT 3
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 4
31536: PUSH
31537: LD_INT 4
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 3
31546: PUSH
31547: LD_INT 4
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 2
31556: PUSH
31557: LD_INT 3
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 2
31566: PUSH
31567: LD_INT 2
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 4
31576: PUSH
31577: LD_INT 2
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 2
31586: PUSH
31587: LD_INT 4
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 0
31596: PUSH
31597: LD_INT 4
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 0
31606: PUSH
31607: LD_INT 3
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: LD_INT 4
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 1
31626: PUSH
31627: LD_INT 5
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: LD_INT 5
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 1
31646: NEG
31647: PUSH
31648: LD_INT 4
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 1
31657: NEG
31658: PUSH
31659: LD_INT 3
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 2
31668: PUSH
31669: LD_INT 5
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 2
31678: NEG
31679: PUSH
31680: LD_INT 3
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31734: LD_ADDR_VAR 0 34
31738: PUSH
31739: LD_INT 0
31741: PUSH
31742: LD_INT 4
31744: NEG
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 0
31752: PUSH
31753: LD_INT 5
31755: NEG
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 1
31763: PUSH
31764: LD_INT 4
31766: NEG
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: PUSH
31775: LD_INT 3
31777: NEG
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 0
31785: PUSH
31786: LD_INT 3
31788: NEG
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 1
31796: NEG
31797: PUSH
31798: LD_INT 4
31800: NEG
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 1
31808: NEG
31809: PUSH
31810: LD_INT 5
31812: NEG
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 2
31820: PUSH
31821: LD_INT 3
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 2
31831: NEG
31832: PUSH
31833: LD_INT 5
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 3
31843: PUSH
31844: LD_INT 0
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 3
31853: PUSH
31854: LD_INT 1
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 4
31864: PUSH
31865: LD_INT 0
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 4
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 3
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 2
31894: PUSH
31895: LD_INT 0
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 2
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 2
31915: PUSH
31916: LD_INT 2
31918: NEG
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 4
31926: PUSH
31927: LD_INT 2
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 4
31936: PUSH
31937: LD_INT 4
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 4
31946: PUSH
31947: LD_INT 3
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 5
31956: PUSH
31957: LD_INT 4
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 5
31966: PUSH
31967: LD_INT 5
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 4
31976: PUSH
31977: LD_INT 5
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 3
31986: PUSH
31987: LD_INT 4
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 3
31996: PUSH
31997: LD_INT 3
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 5
32006: PUSH
32007: LD_INT 3
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 3
32016: PUSH
32017: LD_INT 5
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 0
32026: PUSH
32027: LD_INT 3
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 0
32036: PUSH
32037: LD_INT 2
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 1
32046: PUSH
32047: LD_INT 3
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 1
32056: PUSH
32057: LD_INT 4
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 0
32066: PUSH
32067: LD_INT 4
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 1
32076: NEG
32077: PUSH
32078: LD_INT 3
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 1
32087: NEG
32088: PUSH
32089: LD_INT 2
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 2
32098: PUSH
32099: LD_INT 4
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 2
32108: NEG
32109: PUSH
32110: LD_INT 2
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 4
32119: NEG
32120: PUSH
32121: LD_INT 0
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 4
32130: NEG
32131: PUSH
32132: LD_INT 1
32134: NEG
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 3
32142: NEG
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 3
32153: NEG
32154: PUSH
32155: LD_INT 1
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 4
32164: NEG
32165: PUSH
32166: LD_INT 1
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 5
32175: NEG
32176: PUSH
32177: LD_INT 0
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 5
32186: NEG
32187: PUSH
32188: LD_INT 1
32190: NEG
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 5
32198: NEG
32199: PUSH
32200: LD_INT 2
32202: NEG
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 3
32210: NEG
32211: PUSH
32212: LD_INT 2
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: ST_TO_ADDR
// end ; end ;
32266: GO 32269
32268: POP
// case btype of b_depot , b_warehouse :
32269: LD_VAR 0 1
32273: PUSH
32274: LD_INT 0
32276: DOUBLE
32277: EQUAL
32278: IFTRUE 32288
32280: LD_INT 1
32282: DOUBLE
32283: EQUAL
32284: IFTRUE 32288
32286: GO 32489
32288: POP
// case nation of nation_american :
32289: LD_VAR 0 5
32293: PUSH
32294: LD_INT 1
32296: DOUBLE
32297: EQUAL
32298: IFTRUE 32302
32300: GO 32358
32302: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32303: LD_ADDR_VAR 0 9
32307: PUSH
32308: LD_VAR 0 11
32312: PUSH
32313: LD_VAR 0 12
32317: PUSH
32318: LD_VAR 0 13
32322: PUSH
32323: LD_VAR 0 14
32327: PUSH
32328: LD_VAR 0 15
32332: PUSH
32333: LD_VAR 0 16
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: PUSH
32346: LD_VAR 0 4
32350: PUSH
32351: LD_INT 1
32353: PLUS
32354: ARRAY
32355: ST_TO_ADDR
32356: GO 32487
32358: LD_INT 2
32360: DOUBLE
32361: EQUAL
32362: IFTRUE 32366
32364: GO 32422
32366: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32367: LD_ADDR_VAR 0 9
32371: PUSH
32372: LD_VAR 0 17
32376: PUSH
32377: LD_VAR 0 18
32381: PUSH
32382: LD_VAR 0 19
32386: PUSH
32387: LD_VAR 0 20
32391: PUSH
32392: LD_VAR 0 21
32396: PUSH
32397: LD_VAR 0 22
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: PUSH
32410: LD_VAR 0 4
32414: PUSH
32415: LD_INT 1
32417: PLUS
32418: ARRAY
32419: ST_TO_ADDR
32420: GO 32487
32422: LD_INT 3
32424: DOUBLE
32425: EQUAL
32426: IFTRUE 32430
32428: GO 32486
32430: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32431: LD_ADDR_VAR 0 9
32435: PUSH
32436: LD_VAR 0 23
32440: PUSH
32441: LD_VAR 0 24
32445: PUSH
32446: LD_VAR 0 25
32450: PUSH
32451: LD_VAR 0 26
32455: PUSH
32456: LD_VAR 0 27
32460: PUSH
32461: LD_VAR 0 28
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: PUSH
32474: LD_VAR 0 4
32478: PUSH
32479: LD_INT 1
32481: PLUS
32482: ARRAY
32483: ST_TO_ADDR
32484: GO 32487
32486: POP
32487: GO 33042
32489: LD_INT 2
32491: DOUBLE
32492: EQUAL
32493: IFTRUE 32503
32495: LD_INT 3
32497: DOUBLE
32498: EQUAL
32499: IFTRUE 32503
32501: GO 32559
32503: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32504: LD_ADDR_VAR 0 9
32508: PUSH
32509: LD_VAR 0 29
32513: PUSH
32514: LD_VAR 0 30
32518: PUSH
32519: LD_VAR 0 31
32523: PUSH
32524: LD_VAR 0 32
32528: PUSH
32529: LD_VAR 0 33
32533: PUSH
32534: LD_VAR 0 34
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: PUSH
32547: LD_VAR 0 4
32551: PUSH
32552: LD_INT 1
32554: PLUS
32555: ARRAY
32556: ST_TO_ADDR
32557: GO 33042
32559: LD_INT 16
32561: DOUBLE
32562: EQUAL
32563: IFTRUE 32621
32565: LD_INT 17
32567: DOUBLE
32568: EQUAL
32569: IFTRUE 32621
32571: LD_INT 18
32573: DOUBLE
32574: EQUAL
32575: IFTRUE 32621
32577: LD_INT 19
32579: DOUBLE
32580: EQUAL
32581: IFTRUE 32621
32583: LD_INT 22
32585: DOUBLE
32586: EQUAL
32587: IFTRUE 32621
32589: LD_INT 20
32591: DOUBLE
32592: EQUAL
32593: IFTRUE 32621
32595: LD_INT 21
32597: DOUBLE
32598: EQUAL
32599: IFTRUE 32621
32601: LD_INT 23
32603: DOUBLE
32604: EQUAL
32605: IFTRUE 32621
32607: LD_INT 24
32609: DOUBLE
32610: EQUAL
32611: IFTRUE 32621
32613: LD_INT 25
32615: DOUBLE
32616: EQUAL
32617: IFTRUE 32621
32619: GO 32677
32621: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32622: LD_ADDR_VAR 0 9
32626: PUSH
32627: LD_VAR 0 35
32631: PUSH
32632: LD_VAR 0 36
32636: PUSH
32637: LD_VAR 0 37
32641: PUSH
32642: LD_VAR 0 38
32646: PUSH
32647: LD_VAR 0 39
32651: PUSH
32652: LD_VAR 0 40
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: PUSH
32665: LD_VAR 0 4
32669: PUSH
32670: LD_INT 1
32672: PLUS
32673: ARRAY
32674: ST_TO_ADDR
32675: GO 33042
32677: LD_INT 6
32679: DOUBLE
32680: EQUAL
32681: IFTRUE 32733
32683: LD_INT 7
32685: DOUBLE
32686: EQUAL
32687: IFTRUE 32733
32689: LD_INT 8
32691: DOUBLE
32692: EQUAL
32693: IFTRUE 32733
32695: LD_INT 13
32697: DOUBLE
32698: EQUAL
32699: IFTRUE 32733
32701: LD_INT 12
32703: DOUBLE
32704: EQUAL
32705: IFTRUE 32733
32707: LD_INT 15
32709: DOUBLE
32710: EQUAL
32711: IFTRUE 32733
32713: LD_INT 11
32715: DOUBLE
32716: EQUAL
32717: IFTRUE 32733
32719: LD_INT 14
32721: DOUBLE
32722: EQUAL
32723: IFTRUE 32733
32725: LD_INT 10
32727: DOUBLE
32728: EQUAL
32729: IFTRUE 32733
32731: GO 32789
32733: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32734: LD_ADDR_VAR 0 9
32738: PUSH
32739: LD_VAR 0 41
32743: PUSH
32744: LD_VAR 0 42
32748: PUSH
32749: LD_VAR 0 43
32753: PUSH
32754: LD_VAR 0 44
32758: PUSH
32759: LD_VAR 0 45
32763: PUSH
32764: LD_VAR 0 46
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: PUSH
32777: LD_VAR 0 4
32781: PUSH
32782: LD_INT 1
32784: PLUS
32785: ARRAY
32786: ST_TO_ADDR
32787: GO 33042
32789: LD_INT 36
32791: DOUBLE
32792: EQUAL
32793: IFTRUE 32797
32795: GO 32853
32797: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32798: LD_ADDR_VAR 0 9
32802: PUSH
32803: LD_VAR 0 47
32807: PUSH
32808: LD_VAR 0 48
32812: PUSH
32813: LD_VAR 0 49
32817: PUSH
32818: LD_VAR 0 50
32822: PUSH
32823: LD_VAR 0 51
32827: PUSH
32828: LD_VAR 0 52
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: PUSH
32841: LD_VAR 0 4
32845: PUSH
32846: LD_INT 1
32848: PLUS
32849: ARRAY
32850: ST_TO_ADDR
32851: GO 33042
32853: LD_INT 4
32855: DOUBLE
32856: EQUAL
32857: IFTRUE 32879
32859: LD_INT 5
32861: DOUBLE
32862: EQUAL
32863: IFTRUE 32879
32865: LD_INT 34
32867: DOUBLE
32868: EQUAL
32869: IFTRUE 32879
32871: LD_INT 37
32873: DOUBLE
32874: EQUAL
32875: IFTRUE 32879
32877: GO 32935
32879: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32880: LD_ADDR_VAR 0 9
32884: PUSH
32885: LD_VAR 0 53
32889: PUSH
32890: LD_VAR 0 54
32894: PUSH
32895: LD_VAR 0 55
32899: PUSH
32900: LD_VAR 0 56
32904: PUSH
32905: LD_VAR 0 57
32909: PUSH
32910: LD_VAR 0 58
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: PUSH
32923: LD_VAR 0 4
32927: PUSH
32928: LD_INT 1
32930: PLUS
32931: ARRAY
32932: ST_TO_ADDR
32933: GO 33042
32935: LD_INT 31
32937: DOUBLE
32938: EQUAL
32939: IFTRUE 32985
32941: LD_INT 32
32943: DOUBLE
32944: EQUAL
32945: IFTRUE 32985
32947: LD_INT 33
32949: DOUBLE
32950: EQUAL
32951: IFTRUE 32985
32953: LD_INT 27
32955: DOUBLE
32956: EQUAL
32957: IFTRUE 32985
32959: LD_INT 26
32961: DOUBLE
32962: EQUAL
32963: IFTRUE 32985
32965: LD_INT 28
32967: DOUBLE
32968: EQUAL
32969: IFTRUE 32985
32971: LD_INT 29
32973: DOUBLE
32974: EQUAL
32975: IFTRUE 32985
32977: LD_INT 30
32979: DOUBLE
32980: EQUAL
32981: IFTRUE 32985
32983: GO 33041
32985: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
32986: LD_ADDR_VAR 0 9
32990: PUSH
32991: LD_VAR 0 59
32995: PUSH
32996: LD_VAR 0 60
33000: PUSH
33001: LD_VAR 0 61
33005: PUSH
33006: LD_VAR 0 62
33010: PUSH
33011: LD_VAR 0 63
33015: PUSH
33016: LD_VAR 0 64
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: PUSH
33029: LD_VAR 0 4
33033: PUSH
33034: LD_INT 1
33036: PLUS
33037: ARRAY
33038: ST_TO_ADDR
33039: GO 33042
33041: POP
// temp_list2 = [ ] ;
33042: LD_ADDR_VAR 0 10
33046: PUSH
33047: EMPTY
33048: ST_TO_ADDR
// for i in temp_list do
33049: LD_ADDR_VAR 0 8
33053: PUSH
33054: LD_VAR 0 9
33058: PUSH
33059: FOR_IN
33060: IFFALSE 33112
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33062: LD_ADDR_VAR 0 10
33066: PUSH
33067: LD_VAR 0 10
33071: PUSH
33072: LD_VAR 0 8
33076: PUSH
33077: LD_INT 1
33079: ARRAY
33080: PUSH
33081: LD_VAR 0 2
33085: PLUS
33086: PUSH
33087: LD_VAR 0 8
33091: PUSH
33092: LD_INT 2
33094: ARRAY
33095: PUSH
33096: LD_VAR 0 3
33100: PLUS
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: EMPTY
33107: LIST
33108: ADD
33109: ST_TO_ADDR
33110: GO 33059
33112: POP
33113: POP
// result = temp_list2 ;
33114: LD_ADDR_VAR 0 7
33118: PUSH
33119: LD_VAR 0 10
33123: ST_TO_ADDR
// end ;
33124: LD_VAR 0 7
33128: RET
// export function EnemyInRange ( unit , dist ) ; begin
33129: LD_INT 0
33131: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33132: LD_ADDR_VAR 0 3
33136: PUSH
33137: LD_VAR 0 1
33141: PPUSH
33142: CALL_OW 255
33146: PPUSH
33147: LD_VAR 0 1
33151: PPUSH
33152: CALL_OW 250
33156: PPUSH
33157: LD_VAR 0 1
33161: PPUSH
33162: CALL_OW 251
33166: PPUSH
33167: LD_VAR 0 2
33171: PPUSH
33172: CALL 7233 0 4
33176: PUSH
33177: LD_INT 4
33179: ARRAY
33180: ST_TO_ADDR
// end ;
33181: LD_VAR 0 3
33185: RET
// export function PlayerSeeMe ( unit ) ; begin
33186: LD_INT 0
33188: PPUSH
// result := See ( your_side , unit ) ;
33189: LD_ADDR_VAR 0 2
33193: PUSH
33194: LD_OWVAR 2
33198: PPUSH
33199: LD_VAR 0 1
33203: PPUSH
33204: CALL_OW 292
33208: ST_TO_ADDR
// end ;
33209: LD_VAR 0 2
33213: RET
// export function ReverseDir ( unit ) ; begin
33214: LD_INT 0
33216: PPUSH
// if not unit then
33217: LD_VAR 0 1
33221: NOT
33222: IFFALSE 33226
// exit ;
33224: GO 33249
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33226: LD_ADDR_VAR 0 2
33230: PUSH
33231: LD_VAR 0 1
33235: PPUSH
33236: CALL_OW 254
33240: PUSH
33241: LD_INT 3
33243: PLUS
33244: PUSH
33245: LD_INT 6
33247: MOD
33248: ST_TO_ADDR
// end ;
33249: LD_VAR 0 2
33253: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
33254: LD_INT 0
33256: PPUSH
33257: PPUSH
33258: PPUSH
33259: PPUSH
33260: PPUSH
// if not hexes then
33261: LD_VAR 0 2
33265: NOT
33266: IFFALSE 33270
// exit ;
33268: GO 33418
// dist := 9999 ;
33270: LD_ADDR_VAR 0 5
33274: PUSH
33275: LD_INT 9999
33277: ST_TO_ADDR
// for i = 1 to hexes do
33278: LD_ADDR_VAR 0 4
33282: PUSH
33283: DOUBLE
33284: LD_INT 1
33286: DEC
33287: ST_TO_ADDR
33288: LD_VAR 0 2
33292: PUSH
33293: FOR_TO
33294: IFFALSE 33406
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
33296: LD_VAR 0 1
33300: PPUSH
33301: LD_VAR 0 2
33305: PUSH
33306: LD_VAR 0 4
33310: ARRAY
33311: PUSH
33312: LD_INT 1
33314: ARRAY
33315: PPUSH
33316: LD_VAR 0 2
33320: PUSH
33321: LD_VAR 0 4
33325: ARRAY
33326: PUSH
33327: LD_INT 2
33329: ARRAY
33330: PPUSH
33331: CALL_OW 297
33335: PUSH
33336: LD_VAR 0 5
33340: LESS
33341: IFFALSE 33404
// begin hex := hexes [ i ] ;
33343: LD_ADDR_VAR 0 7
33347: PUSH
33348: LD_VAR 0 2
33352: PUSH
33353: LD_VAR 0 4
33357: ARRAY
33358: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33359: LD_ADDR_VAR 0 5
33363: PUSH
33364: LD_VAR 0 1
33368: PPUSH
33369: LD_VAR 0 2
33373: PUSH
33374: LD_VAR 0 4
33378: ARRAY
33379: PUSH
33380: LD_INT 1
33382: ARRAY
33383: PPUSH
33384: LD_VAR 0 2
33388: PUSH
33389: LD_VAR 0 4
33393: ARRAY
33394: PUSH
33395: LD_INT 2
33397: ARRAY
33398: PPUSH
33399: CALL_OW 297
33403: ST_TO_ADDR
// end ; end ;
33404: GO 33293
33406: POP
33407: POP
// result := hex ;
33408: LD_ADDR_VAR 0 3
33412: PUSH
33413: LD_VAR 0 7
33417: ST_TO_ADDR
// end ;
33418: LD_VAR 0 3
33422: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33423: LD_INT 0
33425: PPUSH
33426: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33427: LD_VAR 0 1
33431: NOT
33432: PUSH
33433: LD_VAR 0 1
33437: PUSH
33438: LD_INT 21
33440: PUSH
33441: LD_INT 2
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 23
33450: PUSH
33451: LD_INT 2
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PPUSH
33462: CALL_OW 69
33466: IN
33467: NOT
33468: OR
33469: IFFALSE 33473
// exit ;
33471: GO 33520
// for i = 1 to 3 do
33473: LD_ADDR_VAR 0 3
33477: PUSH
33478: DOUBLE
33479: LD_INT 1
33481: DEC
33482: ST_TO_ADDR
33483: LD_INT 3
33485: PUSH
33486: FOR_TO
33487: IFFALSE 33518
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33489: LD_VAR 0 1
33493: PPUSH
33494: CALL_OW 250
33498: PPUSH
33499: LD_VAR 0 1
33503: PPUSH
33504: CALL_OW 251
33508: PPUSH
33509: LD_INT 1
33511: PPUSH
33512: CALL_OW 453
33516: GO 33486
33518: POP
33519: POP
// end ;
33520: LD_VAR 0 2
33524: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33525: LD_INT 0
33527: PPUSH
33528: PPUSH
33529: PPUSH
33530: PPUSH
33531: PPUSH
33532: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
33533: LD_VAR 0 1
33537: NOT
33538: PUSH
33539: LD_VAR 0 2
33543: NOT
33544: OR
33545: PUSH
33546: LD_VAR 0 1
33550: PPUSH
33551: CALL_OW 314
33555: OR
33556: IFFALSE 33560
// exit ;
33558: GO 34001
// x := GetX ( enemy_unit ) ;
33560: LD_ADDR_VAR 0 7
33564: PUSH
33565: LD_VAR 0 2
33569: PPUSH
33570: CALL_OW 250
33574: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33575: LD_ADDR_VAR 0 8
33579: PUSH
33580: LD_VAR 0 2
33584: PPUSH
33585: CALL_OW 251
33589: ST_TO_ADDR
// if not x or not y then
33590: LD_VAR 0 7
33594: NOT
33595: PUSH
33596: LD_VAR 0 8
33600: NOT
33601: OR
33602: IFFALSE 33606
// exit ;
33604: GO 34001
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33606: LD_ADDR_VAR 0 6
33610: PUSH
33611: LD_VAR 0 7
33615: PPUSH
33616: LD_INT 0
33618: PPUSH
33619: LD_INT 4
33621: PPUSH
33622: CALL_OW 272
33626: PUSH
33627: LD_VAR 0 8
33631: PPUSH
33632: LD_INT 0
33634: PPUSH
33635: LD_INT 4
33637: PPUSH
33638: CALL_OW 273
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_VAR 0 7
33651: PPUSH
33652: LD_INT 1
33654: PPUSH
33655: LD_INT 4
33657: PPUSH
33658: CALL_OW 272
33662: PUSH
33663: LD_VAR 0 8
33667: PPUSH
33668: LD_INT 1
33670: PPUSH
33671: LD_INT 4
33673: PPUSH
33674: CALL_OW 273
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_VAR 0 7
33687: PPUSH
33688: LD_INT 2
33690: PPUSH
33691: LD_INT 4
33693: PPUSH
33694: CALL_OW 272
33698: PUSH
33699: LD_VAR 0 8
33703: PPUSH
33704: LD_INT 2
33706: PPUSH
33707: LD_INT 4
33709: PPUSH
33710: CALL_OW 273
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_VAR 0 7
33723: PPUSH
33724: LD_INT 3
33726: PPUSH
33727: LD_INT 4
33729: PPUSH
33730: CALL_OW 272
33734: PUSH
33735: LD_VAR 0 8
33739: PPUSH
33740: LD_INT 3
33742: PPUSH
33743: LD_INT 4
33745: PPUSH
33746: CALL_OW 273
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_VAR 0 7
33759: PPUSH
33760: LD_INT 4
33762: PPUSH
33763: LD_INT 4
33765: PPUSH
33766: CALL_OW 272
33770: PUSH
33771: LD_VAR 0 8
33775: PPUSH
33776: LD_INT 4
33778: PPUSH
33779: LD_INT 4
33781: PPUSH
33782: CALL_OW 273
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_VAR 0 7
33795: PPUSH
33796: LD_INT 5
33798: PPUSH
33799: LD_INT 4
33801: PPUSH
33802: CALL_OW 272
33806: PUSH
33807: LD_VAR 0 8
33811: PPUSH
33812: LD_INT 5
33814: PPUSH
33815: LD_INT 4
33817: PPUSH
33818: CALL_OW 273
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: ST_TO_ADDR
// for i = tmp downto 1 do
33835: LD_ADDR_VAR 0 4
33839: PUSH
33840: DOUBLE
33841: LD_VAR 0 6
33845: INC
33846: ST_TO_ADDR
33847: LD_INT 1
33849: PUSH
33850: FOR_DOWNTO
33851: IFFALSE 33952
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33853: LD_VAR 0 6
33857: PUSH
33858: LD_VAR 0 4
33862: ARRAY
33863: PUSH
33864: LD_INT 1
33866: ARRAY
33867: PPUSH
33868: LD_VAR 0 6
33872: PUSH
33873: LD_VAR 0 4
33877: ARRAY
33878: PUSH
33879: LD_INT 2
33881: ARRAY
33882: PPUSH
33883: CALL_OW 488
33887: NOT
33888: PUSH
33889: LD_VAR 0 6
33893: PUSH
33894: LD_VAR 0 4
33898: ARRAY
33899: PUSH
33900: LD_INT 1
33902: ARRAY
33903: PPUSH
33904: LD_VAR 0 6
33908: PUSH
33909: LD_VAR 0 4
33913: ARRAY
33914: PUSH
33915: LD_INT 2
33917: ARRAY
33918: PPUSH
33919: CALL_OW 428
33923: PUSH
33924: LD_INT 0
33926: NONEQUAL
33927: OR
33928: IFFALSE 33950
// tmp := Delete ( tmp , i ) ;
33930: LD_ADDR_VAR 0 6
33934: PUSH
33935: LD_VAR 0 6
33939: PPUSH
33940: LD_VAR 0 4
33944: PPUSH
33945: CALL_OW 3
33949: ST_TO_ADDR
33950: GO 33850
33952: POP
33953: POP
// j := GetClosestHex ( unit , tmp ) ;
33954: LD_ADDR_VAR 0 5
33958: PUSH
33959: LD_VAR 0 1
33963: PPUSH
33964: LD_VAR 0 6
33968: PPUSH
33969: CALL 33254 0 2
33973: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
33974: LD_VAR 0 1
33978: PPUSH
33979: LD_VAR 0 5
33983: PUSH
33984: LD_INT 1
33986: ARRAY
33987: PPUSH
33988: LD_VAR 0 5
33992: PUSH
33993: LD_INT 2
33995: ARRAY
33996: PPUSH
33997: CALL_OW 111
// end ;
34001: LD_VAR 0 3
34005: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34006: LD_INT 0
34008: PPUSH
34009: PPUSH
34010: PPUSH
// uc_side = 0 ;
34011: LD_ADDR_OWVAR 20
34015: PUSH
34016: LD_INT 0
34018: ST_TO_ADDR
// uc_nation = 0 ;
34019: LD_ADDR_OWVAR 21
34023: PUSH
34024: LD_INT 0
34026: ST_TO_ADDR
// InitHc_All ( ) ;
34027: CALL_OW 584
// InitVc ;
34031: CALL_OW 20
// if mastodonts then
34035: LD_VAR 0 6
34039: IFFALSE 34106
// for i = 1 to mastodonts do
34041: LD_ADDR_VAR 0 11
34045: PUSH
34046: DOUBLE
34047: LD_INT 1
34049: DEC
34050: ST_TO_ADDR
34051: LD_VAR 0 6
34055: PUSH
34056: FOR_TO
34057: IFFALSE 34104
// begin vc_chassis := 31 ;
34059: LD_ADDR_OWVAR 37
34063: PUSH
34064: LD_INT 31
34066: ST_TO_ADDR
// vc_control := control_rider ;
34067: LD_ADDR_OWVAR 38
34071: PUSH
34072: LD_INT 4
34074: ST_TO_ADDR
// animal := CreateVehicle ;
34075: LD_ADDR_VAR 0 12
34079: PUSH
34080: CALL_OW 45
34084: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34085: LD_VAR 0 12
34089: PPUSH
34090: LD_VAR 0 8
34094: PPUSH
34095: LD_INT 0
34097: PPUSH
34098: CALL 36294 0 3
// end ;
34102: GO 34056
34104: POP
34105: POP
// if horses then
34106: LD_VAR 0 5
34110: IFFALSE 34177
// for i = 1 to horses do
34112: LD_ADDR_VAR 0 11
34116: PUSH
34117: DOUBLE
34118: LD_INT 1
34120: DEC
34121: ST_TO_ADDR
34122: LD_VAR 0 5
34126: PUSH
34127: FOR_TO
34128: IFFALSE 34175
// begin hc_class := 21 ;
34130: LD_ADDR_OWVAR 28
34134: PUSH
34135: LD_INT 21
34137: ST_TO_ADDR
// hc_gallery :=  ;
34138: LD_ADDR_OWVAR 33
34142: PUSH
34143: LD_STRING 
34145: ST_TO_ADDR
// animal := CreateHuman ;
34146: LD_ADDR_VAR 0 12
34150: PUSH
34151: CALL_OW 44
34155: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34156: LD_VAR 0 12
34160: PPUSH
34161: LD_VAR 0 8
34165: PPUSH
34166: LD_INT 0
34168: PPUSH
34169: CALL 36294 0 3
// end ;
34173: GO 34127
34175: POP
34176: POP
// if birds then
34177: LD_VAR 0 1
34181: IFFALSE 34248
// for i = 1 to birds do
34183: LD_ADDR_VAR 0 11
34187: PUSH
34188: DOUBLE
34189: LD_INT 1
34191: DEC
34192: ST_TO_ADDR
34193: LD_VAR 0 1
34197: PUSH
34198: FOR_TO
34199: IFFALSE 34246
// begin hc_class = 18 ;
34201: LD_ADDR_OWVAR 28
34205: PUSH
34206: LD_INT 18
34208: ST_TO_ADDR
// hc_gallery =  ;
34209: LD_ADDR_OWVAR 33
34213: PUSH
34214: LD_STRING 
34216: ST_TO_ADDR
// animal := CreateHuman ;
34217: LD_ADDR_VAR 0 12
34221: PUSH
34222: CALL_OW 44
34226: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34227: LD_VAR 0 12
34231: PPUSH
34232: LD_VAR 0 8
34236: PPUSH
34237: LD_INT 0
34239: PPUSH
34240: CALL 36294 0 3
// end ;
34244: GO 34198
34246: POP
34247: POP
// if tigers then
34248: LD_VAR 0 2
34252: IFFALSE 34336
// for i = 1 to tigers do
34254: LD_ADDR_VAR 0 11
34258: PUSH
34259: DOUBLE
34260: LD_INT 1
34262: DEC
34263: ST_TO_ADDR
34264: LD_VAR 0 2
34268: PUSH
34269: FOR_TO
34270: IFFALSE 34334
// begin hc_class = class_tiger ;
34272: LD_ADDR_OWVAR 28
34276: PUSH
34277: LD_INT 14
34279: ST_TO_ADDR
// hc_gallery =  ;
34280: LD_ADDR_OWVAR 33
34284: PUSH
34285: LD_STRING 
34287: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34288: LD_ADDR_OWVAR 35
34292: PUSH
34293: LD_INT 7
34295: NEG
34296: PPUSH
34297: LD_INT 7
34299: PPUSH
34300: CALL_OW 12
34304: ST_TO_ADDR
// animal := CreateHuman ;
34305: LD_ADDR_VAR 0 12
34309: PUSH
34310: CALL_OW 44
34314: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34315: LD_VAR 0 12
34319: PPUSH
34320: LD_VAR 0 8
34324: PPUSH
34325: LD_INT 0
34327: PPUSH
34328: CALL 36294 0 3
// end ;
34332: GO 34269
34334: POP
34335: POP
// if apemans then
34336: LD_VAR 0 3
34340: IFFALSE 34463
// for i = 1 to apemans do
34342: LD_ADDR_VAR 0 11
34346: PUSH
34347: DOUBLE
34348: LD_INT 1
34350: DEC
34351: ST_TO_ADDR
34352: LD_VAR 0 3
34356: PUSH
34357: FOR_TO
34358: IFFALSE 34461
// begin hc_class = class_apeman ;
34360: LD_ADDR_OWVAR 28
34364: PUSH
34365: LD_INT 12
34367: ST_TO_ADDR
// hc_gallery =  ;
34368: LD_ADDR_OWVAR 33
34372: PUSH
34373: LD_STRING 
34375: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
34376: LD_ADDR_OWVAR 35
34380: PUSH
34381: LD_INT 5
34383: NEG
34384: PPUSH
34385: LD_INT 5
34387: PPUSH
34388: CALL_OW 12
34392: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
34393: LD_ADDR_OWVAR 31
34397: PUSH
34398: LD_INT 1
34400: PPUSH
34401: LD_INT 3
34403: PPUSH
34404: CALL_OW 12
34408: PUSH
34409: LD_INT 1
34411: PPUSH
34412: LD_INT 3
34414: PPUSH
34415: CALL_OW 12
34419: PUSH
34420: LD_INT 0
34422: PUSH
34423: LD_INT 0
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: ST_TO_ADDR
// animal := CreateHuman ;
34432: LD_ADDR_VAR 0 12
34436: PUSH
34437: CALL_OW 44
34441: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34442: LD_VAR 0 12
34446: PPUSH
34447: LD_VAR 0 8
34451: PPUSH
34452: LD_INT 0
34454: PPUSH
34455: CALL 36294 0 3
// end ;
34459: GO 34357
34461: POP
34462: POP
// if enchidnas then
34463: LD_VAR 0 4
34467: IFFALSE 34534
// for i = 1 to enchidnas do
34469: LD_ADDR_VAR 0 11
34473: PUSH
34474: DOUBLE
34475: LD_INT 1
34477: DEC
34478: ST_TO_ADDR
34479: LD_VAR 0 4
34483: PUSH
34484: FOR_TO
34485: IFFALSE 34532
// begin hc_class = 13 ;
34487: LD_ADDR_OWVAR 28
34491: PUSH
34492: LD_INT 13
34494: ST_TO_ADDR
// hc_gallery =  ;
34495: LD_ADDR_OWVAR 33
34499: PUSH
34500: LD_STRING 
34502: ST_TO_ADDR
// animal := CreateHuman ;
34503: LD_ADDR_VAR 0 12
34507: PUSH
34508: CALL_OW 44
34512: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34513: LD_VAR 0 12
34517: PPUSH
34518: LD_VAR 0 8
34522: PPUSH
34523: LD_INT 0
34525: PPUSH
34526: CALL 36294 0 3
// end ;
34530: GO 34484
34532: POP
34533: POP
// if fishes then
34534: LD_VAR 0 7
34538: IFFALSE 34605
// for i = 1 to fishes do
34540: LD_ADDR_VAR 0 11
34544: PUSH
34545: DOUBLE
34546: LD_INT 1
34548: DEC
34549: ST_TO_ADDR
34550: LD_VAR 0 7
34554: PUSH
34555: FOR_TO
34556: IFFALSE 34603
// begin hc_class = 20 ;
34558: LD_ADDR_OWVAR 28
34562: PUSH
34563: LD_INT 20
34565: ST_TO_ADDR
// hc_gallery =  ;
34566: LD_ADDR_OWVAR 33
34570: PUSH
34571: LD_STRING 
34573: ST_TO_ADDR
// animal := CreateHuman ;
34574: LD_ADDR_VAR 0 12
34578: PUSH
34579: CALL_OW 44
34583: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
34584: LD_VAR 0 12
34588: PPUSH
34589: LD_VAR 0 9
34593: PPUSH
34594: LD_INT 0
34596: PPUSH
34597: CALL 36294 0 3
// end ;
34601: GO 34555
34603: POP
34604: POP
// end ;
34605: LD_VAR 0 10
34609: RET
// export function WantHeal ( sci , unit ) ; begin
34610: LD_INT 0
34612: PPUSH
// if GetTaskList ( sci ) > 0 then
34613: LD_VAR 0 1
34617: PPUSH
34618: CALL_OW 437
34622: PUSH
34623: LD_INT 0
34625: GREATER
34626: IFFALSE 34696
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
34628: LD_VAR 0 1
34632: PPUSH
34633: CALL_OW 437
34637: PUSH
34638: LD_INT 1
34640: ARRAY
34641: PUSH
34642: LD_INT 1
34644: ARRAY
34645: PUSH
34646: LD_STRING l
34648: EQUAL
34649: PUSH
34650: LD_VAR 0 1
34654: PPUSH
34655: CALL_OW 437
34659: PUSH
34660: LD_INT 1
34662: ARRAY
34663: PUSH
34664: LD_INT 4
34666: ARRAY
34667: PUSH
34668: LD_VAR 0 2
34672: EQUAL
34673: AND
34674: IFFALSE 34686
// result := true else
34676: LD_ADDR_VAR 0 3
34680: PUSH
34681: LD_INT 1
34683: ST_TO_ADDR
34684: GO 34694
// result := false ;
34686: LD_ADDR_VAR 0 3
34690: PUSH
34691: LD_INT 0
34693: ST_TO_ADDR
// end else
34694: GO 34704
// result := false ;
34696: LD_ADDR_VAR 0 3
34700: PUSH
34701: LD_INT 0
34703: ST_TO_ADDR
// end ;
34704: LD_VAR 0 3
34708: RET
// export function HealTarget ( sci ) ; begin
34709: LD_INT 0
34711: PPUSH
// if not sci then
34712: LD_VAR 0 1
34716: NOT
34717: IFFALSE 34721
// exit ;
34719: GO 34786
// result := 0 ;
34721: LD_ADDR_VAR 0 2
34725: PUSH
34726: LD_INT 0
34728: ST_TO_ADDR
// if GetTaskList ( sci ) then
34729: LD_VAR 0 1
34733: PPUSH
34734: CALL_OW 437
34738: IFFALSE 34786
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
34740: LD_VAR 0 1
34744: PPUSH
34745: CALL_OW 437
34749: PUSH
34750: LD_INT 1
34752: ARRAY
34753: PUSH
34754: LD_INT 1
34756: ARRAY
34757: PUSH
34758: LD_STRING l
34760: EQUAL
34761: IFFALSE 34786
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
34763: LD_ADDR_VAR 0 2
34767: PUSH
34768: LD_VAR 0 1
34772: PPUSH
34773: CALL_OW 437
34777: PUSH
34778: LD_INT 1
34780: ARRAY
34781: PUSH
34782: LD_INT 4
34784: ARRAY
34785: ST_TO_ADDR
// end ;
34786: LD_VAR 0 2
34790: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
34791: LD_INT 0
34793: PPUSH
34794: PPUSH
34795: PPUSH
34796: PPUSH
// if not base_units then
34797: LD_VAR 0 1
34801: NOT
34802: IFFALSE 34806
// exit ;
34804: GO 34893
// result := false ;
34806: LD_ADDR_VAR 0 2
34810: PUSH
34811: LD_INT 0
34813: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
34814: LD_ADDR_VAR 0 5
34818: PUSH
34819: LD_VAR 0 1
34823: PPUSH
34824: LD_INT 21
34826: PUSH
34827: LD_INT 3
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PPUSH
34834: CALL_OW 72
34838: ST_TO_ADDR
// if not tmp then
34839: LD_VAR 0 5
34843: NOT
34844: IFFALSE 34848
// exit ;
34846: GO 34893
// for i in tmp do
34848: LD_ADDR_VAR 0 3
34852: PUSH
34853: LD_VAR 0 5
34857: PUSH
34858: FOR_IN
34859: IFFALSE 34891
// begin result := EnemyInRange ( i , 22 ) ;
34861: LD_ADDR_VAR 0 2
34865: PUSH
34866: LD_VAR 0 3
34870: PPUSH
34871: LD_INT 22
34873: PPUSH
34874: CALL 33129 0 2
34878: ST_TO_ADDR
// if result then
34879: LD_VAR 0 2
34883: IFFALSE 34889
// exit ;
34885: POP
34886: POP
34887: GO 34893
// end ;
34889: GO 34858
34891: POP
34892: POP
// end ;
34893: LD_VAR 0 2
34897: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
34898: LD_INT 0
34900: PPUSH
34901: PPUSH
// if not units then
34902: LD_VAR 0 1
34906: NOT
34907: IFFALSE 34911
// exit ;
34909: GO 34981
// result := [ ] ;
34911: LD_ADDR_VAR 0 3
34915: PUSH
34916: EMPTY
34917: ST_TO_ADDR
// for i in units do
34918: LD_ADDR_VAR 0 4
34922: PUSH
34923: LD_VAR 0 1
34927: PUSH
34928: FOR_IN
34929: IFFALSE 34979
// if GetTag ( i ) = tag then
34931: LD_VAR 0 4
34935: PPUSH
34936: CALL_OW 110
34940: PUSH
34941: LD_VAR 0 2
34945: EQUAL
34946: IFFALSE 34977
// result := Insert ( result , result + 1 , i ) ;
34948: LD_ADDR_VAR 0 3
34952: PUSH
34953: LD_VAR 0 3
34957: PPUSH
34958: LD_VAR 0 3
34962: PUSH
34963: LD_INT 1
34965: PLUS
34966: PPUSH
34967: LD_VAR 0 4
34971: PPUSH
34972: CALL_OW 2
34976: ST_TO_ADDR
34977: GO 34928
34979: POP
34980: POP
// end ;
34981: LD_VAR 0 3
34985: RET
// export function IsDriver ( un ) ; begin
34986: LD_INT 0
34988: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
34989: LD_ADDR_VAR 0 2
34993: PUSH
34994: LD_VAR 0 1
34998: PUSH
34999: LD_INT 55
35001: PUSH
35002: EMPTY
35003: LIST
35004: PPUSH
35005: CALL_OW 69
35009: IN
35010: ST_TO_ADDR
// end ;
35011: LD_VAR 0 2
35015: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35016: LD_INT 0
35018: PPUSH
35019: PPUSH
// list := [ ] ;
35020: LD_ADDR_VAR 0 5
35024: PUSH
35025: EMPTY
35026: ST_TO_ADDR
// case d of 0 :
35027: LD_VAR 0 3
35031: PUSH
35032: LD_INT 0
35034: DOUBLE
35035: EQUAL
35036: IFTRUE 35040
35038: GO 35173
35040: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35041: LD_ADDR_VAR 0 5
35045: PUSH
35046: LD_VAR 0 1
35050: PUSH
35051: LD_INT 4
35053: MINUS
35054: PUSH
35055: LD_VAR 0 2
35059: PUSH
35060: LD_INT 4
35062: MINUS
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: LIST
35071: PUSH
35072: LD_VAR 0 1
35076: PUSH
35077: LD_INT 3
35079: MINUS
35080: PUSH
35081: LD_VAR 0 2
35085: PUSH
35086: LD_INT 1
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: LIST
35093: PUSH
35094: LD_VAR 0 1
35098: PUSH
35099: LD_INT 4
35101: PLUS
35102: PUSH
35103: LD_VAR 0 2
35107: PUSH
35108: LD_INT 4
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: LIST
35115: PUSH
35116: LD_VAR 0 1
35120: PUSH
35121: LD_INT 3
35123: PLUS
35124: PUSH
35125: LD_VAR 0 2
35129: PUSH
35130: LD_INT 3
35132: PLUS
35133: PUSH
35134: LD_INT 5
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: LIST
35141: PUSH
35142: LD_VAR 0 1
35146: PUSH
35147: LD_VAR 0 2
35151: PUSH
35152: LD_INT 4
35154: PLUS
35155: PUSH
35156: LD_INT 0
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: LIST
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: ST_TO_ADDR
// end ; 1 :
35171: GO 35871
35173: LD_INT 1
35175: DOUBLE
35176: EQUAL
35177: IFTRUE 35181
35179: GO 35314
35181: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35182: LD_ADDR_VAR 0 5
35186: PUSH
35187: LD_VAR 0 1
35191: PUSH
35192: LD_VAR 0 2
35196: PUSH
35197: LD_INT 4
35199: MINUS
35200: PUSH
35201: LD_INT 3
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: LIST
35208: PUSH
35209: LD_VAR 0 1
35213: PUSH
35214: LD_INT 3
35216: MINUS
35217: PUSH
35218: LD_VAR 0 2
35222: PUSH
35223: LD_INT 3
35225: MINUS
35226: PUSH
35227: LD_INT 2
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: LIST
35234: PUSH
35235: LD_VAR 0 1
35239: PUSH
35240: LD_INT 4
35242: MINUS
35243: PUSH
35244: LD_VAR 0 2
35248: PUSH
35249: LD_INT 1
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: LIST
35256: PUSH
35257: LD_VAR 0 1
35261: PUSH
35262: LD_VAR 0 2
35266: PUSH
35267: LD_INT 3
35269: PLUS
35270: PUSH
35271: LD_INT 0
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: LIST
35278: PUSH
35279: LD_VAR 0 1
35283: PUSH
35284: LD_INT 4
35286: PLUS
35287: PUSH
35288: LD_VAR 0 2
35292: PUSH
35293: LD_INT 4
35295: PLUS
35296: PUSH
35297: LD_INT 5
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: LIST
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: ST_TO_ADDR
// end ; 2 :
35312: GO 35871
35314: LD_INT 2
35316: DOUBLE
35317: EQUAL
35318: IFTRUE 35322
35320: GO 35451
35322: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35323: LD_ADDR_VAR 0 5
35327: PUSH
35328: LD_VAR 0 1
35332: PUSH
35333: LD_VAR 0 2
35337: PUSH
35338: LD_INT 3
35340: MINUS
35341: PUSH
35342: LD_INT 3
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: LIST
35349: PUSH
35350: LD_VAR 0 1
35354: PUSH
35355: LD_INT 4
35357: PLUS
35358: PUSH
35359: LD_VAR 0 2
35363: PUSH
35364: LD_INT 4
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: LIST
35371: PUSH
35372: LD_VAR 0 1
35376: PUSH
35377: LD_VAR 0 2
35381: PUSH
35382: LD_INT 4
35384: PLUS
35385: PUSH
35386: LD_INT 0
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: LIST
35393: PUSH
35394: LD_VAR 0 1
35398: PUSH
35399: LD_INT 3
35401: MINUS
35402: PUSH
35403: LD_VAR 0 2
35407: PUSH
35408: LD_INT 1
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: LIST
35415: PUSH
35416: LD_VAR 0 1
35420: PUSH
35421: LD_INT 4
35423: MINUS
35424: PUSH
35425: LD_VAR 0 2
35429: PUSH
35430: LD_INT 4
35432: MINUS
35433: PUSH
35434: LD_INT 2
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: LIST
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: ST_TO_ADDR
// end ; 3 :
35449: GO 35871
35451: LD_INT 3
35453: DOUBLE
35454: EQUAL
35455: IFTRUE 35459
35457: GO 35592
35459: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
35460: LD_ADDR_VAR 0 5
35464: PUSH
35465: LD_VAR 0 1
35469: PUSH
35470: LD_INT 3
35472: PLUS
35473: PUSH
35474: LD_VAR 0 2
35478: PUSH
35479: LD_INT 4
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: LIST
35486: PUSH
35487: LD_VAR 0 1
35491: PUSH
35492: LD_INT 4
35494: PLUS
35495: PUSH
35496: LD_VAR 0 2
35500: PUSH
35501: LD_INT 4
35503: PLUS
35504: PUSH
35505: LD_INT 5
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: LIST
35512: PUSH
35513: LD_VAR 0 1
35517: PUSH
35518: LD_INT 4
35520: MINUS
35521: PUSH
35522: LD_VAR 0 2
35526: PUSH
35527: LD_INT 1
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: LIST
35534: PUSH
35535: LD_VAR 0 1
35539: PUSH
35540: LD_VAR 0 2
35544: PUSH
35545: LD_INT 4
35547: MINUS
35548: PUSH
35549: LD_INT 3
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: LIST
35556: PUSH
35557: LD_VAR 0 1
35561: PUSH
35562: LD_INT 3
35564: MINUS
35565: PUSH
35566: LD_VAR 0 2
35570: PUSH
35571: LD_INT 3
35573: MINUS
35574: PUSH
35575: LD_INT 2
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: LIST
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: ST_TO_ADDR
// end ; 4 :
35590: GO 35871
35592: LD_INT 4
35594: DOUBLE
35595: EQUAL
35596: IFTRUE 35600
35598: GO 35733
35600: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
35601: LD_ADDR_VAR 0 5
35605: PUSH
35606: LD_VAR 0 1
35610: PUSH
35611: LD_VAR 0 2
35615: PUSH
35616: LD_INT 4
35618: PLUS
35619: PUSH
35620: LD_INT 0
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: LIST
35627: PUSH
35628: LD_VAR 0 1
35632: PUSH
35633: LD_INT 3
35635: PLUS
35636: PUSH
35637: LD_VAR 0 2
35641: PUSH
35642: LD_INT 3
35644: PLUS
35645: PUSH
35646: LD_INT 5
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: LIST
35653: PUSH
35654: LD_VAR 0 1
35658: PUSH
35659: LD_INT 4
35661: PLUS
35662: PUSH
35663: LD_VAR 0 2
35667: PUSH
35668: LD_INT 4
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: LIST
35675: PUSH
35676: LD_VAR 0 1
35680: PUSH
35681: LD_VAR 0 2
35685: PUSH
35686: LD_INT 3
35688: MINUS
35689: PUSH
35690: LD_INT 3
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: LIST
35697: PUSH
35698: LD_VAR 0 1
35702: PUSH
35703: LD_INT 4
35705: MINUS
35706: PUSH
35707: LD_VAR 0 2
35711: PUSH
35712: LD_INT 4
35714: MINUS
35715: PUSH
35716: LD_INT 2
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: LIST
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: ST_TO_ADDR
// end ; 5 :
35731: GO 35871
35733: LD_INT 5
35735: DOUBLE
35736: EQUAL
35737: IFTRUE 35741
35739: GO 35870
35741: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
35742: LD_ADDR_VAR 0 5
35746: PUSH
35747: LD_VAR 0 1
35751: PUSH
35752: LD_INT 4
35754: MINUS
35755: PUSH
35756: LD_VAR 0 2
35760: PUSH
35761: LD_INT 1
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: LIST
35768: PUSH
35769: LD_VAR 0 1
35773: PUSH
35774: LD_VAR 0 2
35778: PUSH
35779: LD_INT 4
35781: MINUS
35782: PUSH
35783: LD_INT 3
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: LIST
35790: PUSH
35791: LD_VAR 0 1
35795: PUSH
35796: LD_INT 4
35798: PLUS
35799: PUSH
35800: LD_VAR 0 2
35804: PUSH
35805: LD_INT 4
35807: PLUS
35808: PUSH
35809: LD_INT 5
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: LIST
35816: PUSH
35817: LD_VAR 0 1
35821: PUSH
35822: LD_INT 3
35824: PLUS
35825: PUSH
35826: LD_VAR 0 2
35830: PUSH
35831: LD_INT 4
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: LIST
35838: PUSH
35839: LD_VAR 0 1
35843: PUSH
35844: LD_VAR 0 2
35848: PUSH
35849: LD_INT 3
35851: PLUS
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: LIST
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: ST_TO_ADDR
// end ; end ;
35868: GO 35871
35870: POP
// result := list ;
35871: LD_ADDR_VAR 0 4
35875: PUSH
35876: LD_VAR 0 5
35880: ST_TO_ADDR
// end ;
35881: LD_VAR 0 4
35885: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
35886: LD_INT 0
35888: PPUSH
35889: PPUSH
35890: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
35891: LD_VAR 0 1
35895: NOT
35896: PUSH
35897: LD_VAR 0 2
35901: PUSH
35902: LD_INT 1
35904: PUSH
35905: LD_INT 2
35907: PUSH
35908: LD_INT 3
35910: PUSH
35911: LD_INT 4
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: IN
35920: NOT
35921: OR
35922: IFFALSE 35926
// exit ;
35924: GO 36018
// tmp := [ ] ;
35926: LD_ADDR_VAR 0 5
35930: PUSH
35931: EMPTY
35932: ST_TO_ADDR
// for i in units do
35933: LD_ADDR_VAR 0 4
35937: PUSH
35938: LD_VAR 0 1
35942: PUSH
35943: FOR_IN
35944: IFFALSE 35987
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
35946: LD_ADDR_VAR 0 5
35950: PUSH
35951: LD_VAR 0 5
35955: PPUSH
35956: LD_VAR 0 5
35960: PUSH
35961: LD_INT 1
35963: PLUS
35964: PPUSH
35965: LD_VAR 0 4
35969: PPUSH
35970: LD_VAR 0 2
35974: PPUSH
35975: CALL_OW 259
35979: PPUSH
35980: CALL_OW 2
35984: ST_TO_ADDR
35985: GO 35943
35987: POP
35988: POP
// if not tmp then
35989: LD_VAR 0 5
35993: NOT
35994: IFFALSE 35998
// exit ;
35996: GO 36018
// result := SortListByListDesc ( units , tmp ) ;
35998: LD_ADDR_VAR 0 3
36002: PUSH
36003: LD_VAR 0 1
36007: PPUSH
36008: LD_VAR 0 5
36012: PPUSH
36013: CALL_OW 77
36017: ST_TO_ADDR
// end ;
36018: LD_VAR 0 3
36022: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36023: LD_INT 0
36025: PPUSH
36026: PPUSH
36027: PPUSH
// result := false ;
36028: LD_ADDR_VAR 0 3
36032: PUSH
36033: LD_INT 0
36035: ST_TO_ADDR
// x := GetX ( building ) ;
36036: LD_ADDR_VAR 0 4
36040: PUSH
36041: LD_VAR 0 2
36045: PPUSH
36046: CALL_OW 250
36050: ST_TO_ADDR
// y := GetY ( building ) ;
36051: LD_ADDR_VAR 0 5
36055: PUSH
36056: LD_VAR 0 2
36060: PPUSH
36061: CALL_OW 251
36065: ST_TO_ADDR
// if not building or not x or not y then
36066: LD_VAR 0 2
36070: NOT
36071: PUSH
36072: LD_VAR 0 4
36076: NOT
36077: OR
36078: PUSH
36079: LD_VAR 0 5
36083: NOT
36084: OR
36085: IFFALSE 36089
// exit ;
36087: GO 36181
// if GetTaskList ( unit ) then
36089: LD_VAR 0 1
36093: PPUSH
36094: CALL_OW 437
36098: IFFALSE 36181
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36100: LD_STRING e
36102: PUSH
36103: LD_VAR 0 1
36107: PPUSH
36108: CALL_OW 437
36112: PUSH
36113: LD_INT 1
36115: ARRAY
36116: PUSH
36117: LD_INT 1
36119: ARRAY
36120: EQUAL
36121: PUSH
36122: LD_VAR 0 4
36126: PUSH
36127: LD_VAR 0 1
36131: PPUSH
36132: CALL_OW 437
36136: PUSH
36137: LD_INT 1
36139: ARRAY
36140: PUSH
36141: LD_INT 2
36143: ARRAY
36144: EQUAL
36145: AND
36146: PUSH
36147: LD_VAR 0 5
36151: PUSH
36152: LD_VAR 0 1
36156: PPUSH
36157: CALL_OW 437
36161: PUSH
36162: LD_INT 1
36164: ARRAY
36165: PUSH
36166: LD_INT 3
36168: ARRAY
36169: EQUAL
36170: AND
36171: IFFALSE 36181
// result := true end ;
36173: LD_ADDR_VAR 0 3
36177: PUSH
36178: LD_INT 1
36180: ST_TO_ADDR
// end ;
36181: LD_VAR 0 3
36185: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36186: LD_INT 0
36188: PPUSH
// result := false ;
36189: LD_ADDR_VAR 0 4
36193: PUSH
36194: LD_INT 0
36196: ST_TO_ADDR
// if GetTaskList ( unit ) then
36197: LD_VAR 0 1
36201: PPUSH
36202: CALL_OW 437
36206: IFFALSE 36289
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36208: LD_STRING M
36210: PUSH
36211: LD_VAR 0 1
36215: PPUSH
36216: CALL_OW 437
36220: PUSH
36221: LD_INT 1
36223: ARRAY
36224: PUSH
36225: LD_INT 1
36227: ARRAY
36228: EQUAL
36229: PUSH
36230: LD_VAR 0 2
36234: PUSH
36235: LD_VAR 0 1
36239: PPUSH
36240: CALL_OW 437
36244: PUSH
36245: LD_INT 1
36247: ARRAY
36248: PUSH
36249: LD_INT 2
36251: ARRAY
36252: EQUAL
36253: AND
36254: PUSH
36255: LD_VAR 0 3
36259: PUSH
36260: LD_VAR 0 1
36264: PPUSH
36265: CALL_OW 437
36269: PUSH
36270: LD_INT 1
36272: ARRAY
36273: PUSH
36274: LD_INT 3
36276: ARRAY
36277: EQUAL
36278: AND
36279: IFFALSE 36289
// result := true ;
36281: LD_ADDR_VAR 0 4
36285: PUSH
36286: LD_INT 1
36288: ST_TO_ADDR
// end ; end ;
36289: LD_VAR 0 4
36293: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36294: LD_INT 0
36296: PPUSH
36297: PPUSH
36298: PPUSH
36299: PPUSH
// if not unit or not area then
36300: LD_VAR 0 1
36304: NOT
36305: PUSH
36306: LD_VAR 0 2
36310: NOT
36311: OR
36312: IFFALSE 36316
// exit ;
36314: GO 36480
// tmp := AreaToList ( area , i ) ;
36316: LD_ADDR_VAR 0 6
36320: PUSH
36321: LD_VAR 0 2
36325: PPUSH
36326: LD_VAR 0 5
36330: PPUSH
36331: CALL_OW 517
36335: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36336: LD_ADDR_VAR 0 5
36340: PUSH
36341: DOUBLE
36342: LD_INT 1
36344: DEC
36345: ST_TO_ADDR
36346: LD_VAR 0 6
36350: PUSH
36351: LD_INT 1
36353: ARRAY
36354: PUSH
36355: FOR_TO
36356: IFFALSE 36478
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36358: LD_ADDR_VAR 0 7
36362: PUSH
36363: LD_VAR 0 6
36367: PUSH
36368: LD_INT 1
36370: ARRAY
36371: PUSH
36372: LD_VAR 0 5
36376: ARRAY
36377: PUSH
36378: LD_VAR 0 6
36382: PUSH
36383: LD_INT 2
36385: ARRAY
36386: PUSH
36387: LD_VAR 0 5
36391: ARRAY
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
36397: LD_VAR 0 7
36401: PUSH
36402: LD_INT 1
36404: ARRAY
36405: PPUSH
36406: LD_VAR 0 7
36410: PUSH
36411: LD_INT 2
36413: ARRAY
36414: PPUSH
36415: CALL_OW 428
36419: PUSH
36420: LD_INT 0
36422: EQUAL
36423: IFFALSE 36476
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
36425: LD_VAR 0 1
36429: PPUSH
36430: LD_VAR 0 7
36434: PUSH
36435: LD_INT 1
36437: ARRAY
36438: PPUSH
36439: LD_VAR 0 7
36443: PUSH
36444: LD_INT 2
36446: ARRAY
36447: PPUSH
36448: LD_VAR 0 3
36452: PPUSH
36453: CALL_OW 48
// result := IsPlaced ( unit ) ;
36457: LD_ADDR_VAR 0 4
36461: PUSH
36462: LD_VAR 0 1
36466: PPUSH
36467: CALL_OW 305
36471: ST_TO_ADDR
// exit ;
36472: POP
36473: POP
36474: GO 36480
// end ; end ;
36476: GO 36355
36478: POP
36479: POP
// end ;
36480: LD_VAR 0 4
36484: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
36485: LD_INT 0
36487: PPUSH
36488: PPUSH
36489: PPUSH
// if not side or side > 8 then
36490: LD_VAR 0 1
36494: NOT
36495: PUSH
36496: LD_VAR 0 1
36500: PUSH
36501: LD_INT 8
36503: GREATER
36504: OR
36505: IFFALSE 36509
// exit ;
36507: GO 36696
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
36509: LD_ADDR_VAR 0 4
36513: PUSH
36514: LD_INT 22
36516: PUSH
36517: LD_VAR 0 1
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 21
36528: PUSH
36529: LD_INT 3
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PPUSH
36540: CALL_OW 69
36544: ST_TO_ADDR
// if not tmp then
36545: LD_VAR 0 4
36549: NOT
36550: IFFALSE 36554
// exit ;
36552: GO 36696
// enable_addtolog := true ;
36554: LD_ADDR_OWVAR 81
36558: PUSH
36559: LD_INT 1
36561: ST_TO_ADDR
// AddToLog ( [ ) ;
36562: LD_STRING [
36564: PPUSH
36565: CALL_OW 561
// for i in tmp do
36569: LD_ADDR_VAR 0 3
36573: PUSH
36574: LD_VAR 0 4
36578: PUSH
36579: FOR_IN
36580: IFFALSE 36687
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
36582: LD_STRING [
36584: PUSH
36585: LD_VAR 0 3
36589: PPUSH
36590: CALL_OW 266
36594: STR
36595: PUSH
36596: LD_STRING , 
36598: STR
36599: PUSH
36600: LD_VAR 0 3
36604: PPUSH
36605: CALL_OW 250
36609: STR
36610: PUSH
36611: LD_STRING , 
36613: STR
36614: PUSH
36615: LD_VAR 0 3
36619: PPUSH
36620: CALL_OW 251
36624: STR
36625: PUSH
36626: LD_STRING , 
36628: STR
36629: PUSH
36630: LD_VAR 0 3
36634: PPUSH
36635: CALL_OW 254
36639: STR
36640: PUSH
36641: LD_STRING , 
36643: STR
36644: PUSH
36645: LD_VAR 0 3
36649: PPUSH
36650: LD_INT 1
36652: PPUSH
36653: CALL_OW 268
36657: STR
36658: PUSH
36659: LD_STRING , 
36661: STR
36662: PUSH
36663: LD_VAR 0 3
36667: PPUSH
36668: LD_INT 2
36670: PPUSH
36671: CALL_OW 268
36675: STR
36676: PUSH
36677: LD_STRING ],
36679: STR
36680: PPUSH
36681: CALL_OW 561
// end ;
36685: GO 36579
36687: POP
36688: POP
// AddToLog ( ]; ) ;
36689: LD_STRING ];
36691: PPUSH
36692: CALL_OW 561
// end ;
36696: LD_VAR 0 2
36700: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
36701: LD_INT 0
36703: PPUSH
36704: PPUSH
36705: PPUSH
36706: PPUSH
36707: PPUSH
// if not area or not rate or not max then
36708: LD_VAR 0 1
36712: NOT
36713: PUSH
36714: LD_VAR 0 2
36718: NOT
36719: OR
36720: PUSH
36721: LD_VAR 0 4
36725: NOT
36726: OR
36727: IFFALSE 36731
// exit ;
36729: GO 36923
// while 1 do
36731: LD_INT 1
36733: IFFALSE 36923
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
36735: LD_ADDR_VAR 0 9
36739: PUSH
36740: LD_VAR 0 1
36744: PPUSH
36745: LD_INT 1
36747: PPUSH
36748: CALL_OW 287
36752: PUSH
36753: LD_INT 10
36755: MUL
36756: ST_TO_ADDR
// r := rate / 10 ;
36757: LD_ADDR_VAR 0 7
36761: PUSH
36762: LD_VAR 0 2
36766: PUSH
36767: LD_INT 10
36769: DIVREAL
36770: ST_TO_ADDR
// time := 1 1$00 ;
36771: LD_ADDR_VAR 0 8
36775: PUSH
36776: LD_INT 2100
36778: ST_TO_ADDR
// if amount < min then
36779: LD_VAR 0 9
36783: PUSH
36784: LD_VAR 0 3
36788: LESS
36789: IFFALSE 36807
// r := r * 2 else
36791: LD_ADDR_VAR 0 7
36795: PUSH
36796: LD_VAR 0 7
36800: PUSH
36801: LD_INT 2
36803: MUL
36804: ST_TO_ADDR
36805: GO 36833
// if amount > max then
36807: LD_VAR 0 9
36811: PUSH
36812: LD_VAR 0 4
36816: GREATER
36817: IFFALSE 36833
// r := r / 2 ;
36819: LD_ADDR_VAR 0 7
36823: PUSH
36824: LD_VAR 0 7
36828: PUSH
36829: LD_INT 2
36831: DIVREAL
36832: ST_TO_ADDR
// time := time / r ;
36833: LD_ADDR_VAR 0 8
36837: PUSH
36838: LD_VAR 0 8
36842: PUSH
36843: LD_VAR 0 7
36847: DIVREAL
36848: ST_TO_ADDR
// if time < 0 then
36849: LD_VAR 0 8
36853: PUSH
36854: LD_INT 0
36856: LESS
36857: IFFALSE 36874
// time := time * - 1 ;
36859: LD_ADDR_VAR 0 8
36863: PUSH
36864: LD_VAR 0 8
36868: PUSH
36869: LD_INT 1
36871: NEG
36872: MUL
36873: ST_TO_ADDR
// wait ( time ) ;
36874: LD_VAR 0 8
36878: PPUSH
36879: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
36883: LD_INT 35
36885: PPUSH
36886: LD_INT 875
36888: PPUSH
36889: CALL_OW 12
36893: PPUSH
36894: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
36898: LD_INT 1
36900: PPUSH
36901: LD_INT 5
36903: PPUSH
36904: CALL_OW 12
36908: PPUSH
36909: LD_VAR 0 1
36913: PPUSH
36914: LD_INT 1
36916: PPUSH
36917: CALL_OW 55
// end ;
36921: GO 36731
// end ;
36923: LD_VAR 0 5
36927: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
36928: LD_INT 0
36930: PPUSH
36931: PPUSH
36932: PPUSH
36933: PPUSH
36934: PPUSH
36935: PPUSH
36936: PPUSH
36937: PPUSH
// if not turrets or not factories then
36938: LD_VAR 0 1
36942: NOT
36943: PUSH
36944: LD_VAR 0 2
36948: NOT
36949: OR
36950: IFFALSE 36954
// exit ;
36952: GO 37261
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
36954: LD_ADDR_VAR 0 10
36958: PUSH
36959: LD_INT 5
36961: PUSH
36962: LD_INT 6
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 2
36971: PUSH
36972: LD_INT 4
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 3
36981: PUSH
36982: LD_INT 5
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 24
36996: PUSH
36997: LD_INT 25
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 23
37006: PUSH
37007: LD_INT 27
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 42
37020: PUSH
37021: LD_INT 43
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 44
37030: PUSH
37031: LD_INT 46
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 45
37040: PUSH
37041: LD_INT 47
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: LIST
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: ST_TO_ADDR
// result := [ ] ;
37058: LD_ADDR_VAR 0 3
37062: PUSH
37063: EMPTY
37064: ST_TO_ADDR
// for i in turrets do
37065: LD_ADDR_VAR 0 4
37069: PUSH
37070: LD_VAR 0 1
37074: PUSH
37075: FOR_IN
37076: IFFALSE 37259
// begin nat := GetNation ( i ) ;
37078: LD_ADDR_VAR 0 7
37082: PUSH
37083: LD_VAR 0 4
37087: PPUSH
37088: CALL_OW 248
37092: ST_TO_ADDR
// weapon := 0 ;
37093: LD_ADDR_VAR 0 8
37097: PUSH
37098: LD_INT 0
37100: ST_TO_ADDR
// if not nat then
37101: LD_VAR 0 7
37105: NOT
37106: IFFALSE 37110
// continue ;
37108: GO 37075
// for j in list [ nat ] do
37110: LD_ADDR_VAR 0 5
37114: PUSH
37115: LD_VAR 0 10
37119: PUSH
37120: LD_VAR 0 7
37124: ARRAY
37125: PUSH
37126: FOR_IN
37127: IFFALSE 37168
// if GetBWeapon ( i ) = j [ 1 ] then
37129: LD_VAR 0 4
37133: PPUSH
37134: CALL_OW 269
37138: PUSH
37139: LD_VAR 0 5
37143: PUSH
37144: LD_INT 1
37146: ARRAY
37147: EQUAL
37148: IFFALSE 37166
// begin weapon := j [ 2 ] ;
37150: LD_ADDR_VAR 0 8
37154: PUSH
37155: LD_VAR 0 5
37159: PUSH
37160: LD_INT 2
37162: ARRAY
37163: ST_TO_ADDR
// break ;
37164: GO 37168
// end ;
37166: GO 37126
37168: POP
37169: POP
// if not weapon then
37170: LD_VAR 0 8
37174: NOT
37175: IFFALSE 37179
// continue ;
37177: GO 37075
// for k in factories do
37179: LD_ADDR_VAR 0 6
37183: PUSH
37184: LD_VAR 0 2
37188: PUSH
37189: FOR_IN
37190: IFFALSE 37255
// begin weapons := AvailableWeaponList ( k ) ;
37192: LD_ADDR_VAR 0 9
37196: PUSH
37197: LD_VAR 0 6
37201: PPUSH
37202: CALL_OW 478
37206: ST_TO_ADDR
// if not weapons then
37207: LD_VAR 0 9
37211: NOT
37212: IFFALSE 37216
// continue ;
37214: GO 37189
// if weapon in weapons then
37216: LD_VAR 0 8
37220: PUSH
37221: LD_VAR 0 9
37225: IN
37226: IFFALSE 37253
// begin result := [ i , weapon ] ;
37228: LD_ADDR_VAR 0 3
37232: PUSH
37233: LD_VAR 0 4
37237: PUSH
37238: LD_VAR 0 8
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: ST_TO_ADDR
// exit ;
37247: POP
37248: POP
37249: POP
37250: POP
37251: GO 37261
// end ; end ;
37253: GO 37189
37255: POP
37256: POP
// end ;
37257: GO 37075
37259: POP
37260: POP
// end ;
37261: LD_VAR 0 3
37265: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37266: LD_INT 0
37268: PPUSH
// if not side or side > 8 then
37269: LD_VAR 0 3
37273: NOT
37274: PUSH
37275: LD_VAR 0 3
37279: PUSH
37280: LD_INT 8
37282: GREATER
37283: OR
37284: IFFALSE 37288
// exit ;
37286: GO 37347
// if not range then
37288: LD_VAR 0 4
37292: NOT
37293: IFFALSE 37304
// range := - 12 ;
37295: LD_ADDR_VAR 0 4
37299: PUSH
37300: LD_INT 12
37302: NEG
37303: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37304: LD_VAR 0 1
37308: PPUSH
37309: LD_VAR 0 2
37313: PPUSH
37314: LD_VAR 0 3
37318: PPUSH
37319: LD_VAR 0 4
37323: PPUSH
37324: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37328: LD_VAR 0 1
37332: PPUSH
37333: LD_VAR 0 2
37337: PPUSH
37338: LD_VAR 0 3
37342: PPUSH
37343: CALL_OW 331
// end ;
37347: LD_VAR 0 5
37351: RET
// export function Video ( mode ) ; begin
37352: LD_INT 0
37354: PPUSH
// ingame_video = mode ;
37355: LD_ADDR_OWVAR 52
37359: PUSH
37360: LD_VAR 0 1
37364: ST_TO_ADDR
// interface_hidden = mode ;
37365: LD_ADDR_OWVAR 54
37369: PUSH
37370: LD_VAR 0 1
37374: ST_TO_ADDR
// end ;
37375: LD_VAR 0 2
37379: RET
// export function Join ( array , element ) ; begin
37380: LD_INT 0
37382: PPUSH
// result := Replace ( array , array + 1 , element ) ;
37383: LD_ADDR_VAR 0 3
37387: PUSH
37388: LD_VAR 0 1
37392: PPUSH
37393: LD_VAR 0 1
37397: PUSH
37398: LD_INT 1
37400: PLUS
37401: PPUSH
37402: LD_VAR 0 2
37406: PPUSH
37407: CALL_OW 1
37411: ST_TO_ADDR
// end ;
37412: LD_VAR 0 3
37416: RET
// export function JoinUnion ( array , element ) ; begin
37417: LD_INT 0
37419: PPUSH
// result := array union element ;
37420: LD_ADDR_VAR 0 3
37424: PUSH
37425: LD_VAR 0 1
37429: PUSH
37430: LD_VAR 0 2
37434: UNION
37435: ST_TO_ADDR
// end ;
37436: LD_VAR 0 3
37440: RET
// export function GetBehemoths ( side ) ; begin
37441: LD_INT 0
37443: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
37444: LD_ADDR_VAR 0 2
37448: PUSH
37449: LD_INT 22
37451: PUSH
37452: LD_VAR 0 1
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 31
37463: PUSH
37464: LD_INT 25
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PPUSH
37475: CALL_OW 69
37479: ST_TO_ADDR
// end ;
37480: LD_VAR 0 2
37484: RET
// export function Shuffle ( array ) ; var i , index ; begin
37485: LD_INT 0
37487: PPUSH
37488: PPUSH
37489: PPUSH
// result := [ ] ;
37490: LD_ADDR_VAR 0 2
37494: PUSH
37495: EMPTY
37496: ST_TO_ADDR
// if not array then
37497: LD_VAR 0 1
37501: NOT
37502: IFFALSE 37506
// exit ;
37504: GO 37605
// Randomize ;
37506: CALL_OW 10
// for i = array downto 1 do
37510: LD_ADDR_VAR 0 3
37514: PUSH
37515: DOUBLE
37516: LD_VAR 0 1
37520: INC
37521: ST_TO_ADDR
37522: LD_INT 1
37524: PUSH
37525: FOR_DOWNTO
37526: IFFALSE 37603
// begin index := rand ( 1 , array ) ;
37528: LD_ADDR_VAR 0 4
37532: PUSH
37533: LD_INT 1
37535: PPUSH
37536: LD_VAR 0 1
37540: PPUSH
37541: CALL_OW 12
37545: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
37546: LD_ADDR_VAR 0 2
37550: PUSH
37551: LD_VAR 0 2
37555: PPUSH
37556: LD_VAR 0 2
37560: PUSH
37561: LD_INT 1
37563: PLUS
37564: PPUSH
37565: LD_VAR 0 1
37569: PUSH
37570: LD_VAR 0 4
37574: ARRAY
37575: PPUSH
37576: CALL_OW 2
37580: ST_TO_ADDR
// array := Delete ( array , index ) ;
37581: LD_ADDR_VAR 0 1
37585: PUSH
37586: LD_VAR 0 1
37590: PPUSH
37591: LD_VAR 0 4
37595: PPUSH
37596: CALL_OW 3
37600: ST_TO_ADDR
// end ;
37601: GO 37525
37603: POP
37604: POP
// end ;
37605: LD_VAR 0 2
37609: RET
// export function GetBaseMaterials ( base ) ; begin
37610: LD_INT 0
37612: PPUSH
// result := [ 0 , 0 , 0 ] ;
37613: LD_ADDR_VAR 0 2
37617: PUSH
37618: LD_INT 0
37620: PUSH
37621: LD_INT 0
37623: PUSH
37624: LD_INT 0
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: LIST
37631: ST_TO_ADDR
// if not base then
37632: LD_VAR 0 1
37636: NOT
37637: IFFALSE 37641
// exit ;
37639: GO 37690
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
37641: LD_ADDR_VAR 0 2
37645: PUSH
37646: LD_VAR 0 1
37650: PPUSH
37651: LD_INT 1
37653: PPUSH
37654: CALL_OW 275
37658: PUSH
37659: LD_VAR 0 1
37663: PPUSH
37664: LD_INT 2
37666: PPUSH
37667: CALL_OW 275
37671: PUSH
37672: LD_VAR 0 1
37676: PPUSH
37677: LD_INT 3
37679: PPUSH
37680: CALL_OW 275
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: LIST
37689: ST_TO_ADDR
// end ;
37690: LD_VAR 0 2
37694: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
37695: LD_INT 0
37697: PPUSH
37698: PPUSH
// result := array ;
37699: LD_ADDR_VAR 0 3
37703: PUSH
37704: LD_VAR 0 1
37708: ST_TO_ADDR
// if size > 0 then
37709: LD_VAR 0 2
37713: PUSH
37714: LD_INT 0
37716: GREATER
37717: IFFALSE 37763
// for i := array downto size do
37719: LD_ADDR_VAR 0 4
37723: PUSH
37724: DOUBLE
37725: LD_VAR 0 1
37729: INC
37730: ST_TO_ADDR
37731: LD_VAR 0 2
37735: PUSH
37736: FOR_DOWNTO
37737: IFFALSE 37761
// result := Delete ( result , result ) ;
37739: LD_ADDR_VAR 0 3
37743: PUSH
37744: LD_VAR 0 3
37748: PPUSH
37749: LD_VAR 0 3
37753: PPUSH
37754: CALL_OW 3
37758: ST_TO_ADDR
37759: GO 37736
37761: POP
37762: POP
// end ;
37763: LD_VAR 0 3
37767: RET
// export function ComExit ( unit ) ; var tmp ; begin
37768: LD_INT 0
37770: PPUSH
37771: PPUSH
// if not IsInUnit ( unit ) then
37772: LD_VAR 0 1
37776: PPUSH
37777: CALL_OW 310
37781: NOT
37782: IFFALSE 37786
// exit ;
37784: GO 37846
// tmp := IsInUnit ( unit ) ;
37786: LD_ADDR_VAR 0 3
37790: PUSH
37791: LD_VAR 0 1
37795: PPUSH
37796: CALL_OW 310
37800: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
37801: LD_VAR 0 3
37805: PPUSH
37806: CALL_OW 247
37810: PUSH
37811: LD_INT 2
37813: EQUAL
37814: IFFALSE 37827
// ComExitVehicle ( unit ) else
37816: LD_VAR 0 1
37820: PPUSH
37821: CALL_OW 121
37825: GO 37836
// ComExitBuilding ( unit ) ;
37827: LD_VAR 0 1
37831: PPUSH
37832: CALL_OW 122
// result := tmp ;
37836: LD_ADDR_VAR 0 2
37840: PUSH
37841: LD_VAR 0 3
37845: ST_TO_ADDR
// end ;
37846: LD_VAR 0 2
37850: RET
// export function ResetHc ; begin
37851: LD_INT 0
37853: PPUSH
// InitHc ;
37854: CALL_OW 19
// hc_importance := 0 ;
37858: LD_ADDR_OWVAR 32
37862: PUSH
37863: LD_INT 0
37865: ST_TO_ADDR
// end ;
37866: LD_VAR 0 1
37870: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
37871: LD_INT 0
37873: PPUSH
37874: PPUSH
37875: PPUSH
// _x := ( x1 + x2 ) div 2 ;
37876: LD_ADDR_VAR 0 6
37880: PUSH
37881: LD_VAR 0 1
37885: PUSH
37886: LD_VAR 0 3
37890: PLUS
37891: PUSH
37892: LD_INT 2
37894: DIV
37895: ST_TO_ADDR
// if _x < 0 then
37896: LD_VAR 0 6
37900: PUSH
37901: LD_INT 0
37903: LESS
37904: IFFALSE 37921
// _x := _x * - 1 ;
37906: LD_ADDR_VAR 0 6
37910: PUSH
37911: LD_VAR 0 6
37915: PUSH
37916: LD_INT 1
37918: NEG
37919: MUL
37920: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
37921: LD_ADDR_VAR 0 7
37925: PUSH
37926: LD_VAR 0 2
37930: PUSH
37931: LD_VAR 0 4
37935: PLUS
37936: PUSH
37937: LD_INT 2
37939: DIV
37940: ST_TO_ADDR
// if _y < 0 then
37941: LD_VAR 0 7
37945: PUSH
37946: LD_INT 0
37948: LESS
37949: IFFALSE 37966
// _y := _y * - 1 ;
37951: LD_ADDR_VAR 0 7
37955: PUSH
37956: LD_VAR 0 7
37960: PUSH
37961: LD_INT 1
37963: NEG
37964: MUL
37965: ST_TO_ADDR
// result := [ _x , _y ] ;
37966: LD_ADDR_VAR 0 5
37970: PUSH
37971: LD_VAR 0 6
37975: PUSH
37976: LD_VAR 0 7
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: ST_TO_ADDR
// end ;
37985: LD_VAR 0 5
37989: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
37990: LD_INT 0
37992: PPUSH
37993: PPUSH
37994: PPUSH
37995: PPUSH
// task := GetTaskList ( unit ) ;
37996: LD_ADDR_VAR 0 7
38000: PUSH
38001: LD_VAR 0 1
38005: PPUSH
38006: CALL_OW 437
38010: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38011: LD_VAR 0 7
38015: NOT
38016: PUSH
38017: LD_VAR 0 1
38021: PPUSH
38022: LD_VAR 0 2
38026: PPUSH
38027: CALL_OW 308
38031: NOT
38032: AND
38033: IFFALSE 38037
// exit ;
38035: GO 38155
// if IsInArea ( unit , area ) then
38037: LD_VAR 0 1
38041: PPUSH
38042: LD_VAR 0 2
38046: PPUSH
38047: CALL_OW 308
38051: IFFALSE 38069
// begin ComMoveToArea ( unit , goAway ) ;
38053: LD_VAR 0 1
38057: PPUSH
38058: LD_VAR 0 3
38062: PPUSH
38063: CALL_OW 113
// exit ;
38067: GO 38155
// end ; if task [ 1 ] [ 1 ] <> M then
38069: LD_VAR 0 7
38073: PUSH
38074: LD_INT 1
38076: ARRAY
38077: PUSH
38078: LD_INT 1
38080: ARRAY
38081: PUSH
38082: LD_STRING M
38084: NONEQUAL
38085: IFFALSE 38089
// exit ;
38087: GO 38155
// x := task [ 1 ] [ 2 ] ;
38089: LD_ADDR_VAR 0 5
38093: PUSH
38094: LD_VAR 0 7
38098: PUSH
38099: LD_INT 1
38101: ARRAY
38102: PUSH
38103: LD_INT 2
38105: ARRAY
38106: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38107: LD_ADDR_VAR 0 6
38111: PUSH
38112: LD_VAR 0 7
38116: PUSH
38117: LD_INT 1
38119: ARRAY
38120: PUSH
38121: LD_INT 3
38123: ARRAY
38124: ST_TO_ADDR
// if InArea ( x , y , area ) then
38125: LD_VAR 0 5
38129: PPUSH
38130: LD_VAR 0 6
38134: PPUSH
38135: LD_VAR 0 2
38139: PPUSH
38140: CALL_OW 309
38144: IFFALSE 38155
// ComStop ( unit ) ;
38146: LD_VAR 0 1
38150: PPUSH
38151: CALL_OW 141
// end ;
38155: LD_VAR 0 4
38159: RET
// export function Abs ( value ) ; begin
38160: LD_INT 0
38162: PPUSH
// result := value ;
38163: LD_ADDR_VAR 0 2
38167: PUSH
38168: LD_VAR 0 1
38172: ST_TO_ADDR
// if value < 0 then
38173: LD_VAR 0 1
38177: PUSH
38178: LD_INT 0
38180: LESS
38181: IFFALSE 38198
// result := value * - 1 ;
38183: LD_ADDR_VAR 0 2
38187: PUSH
38188: LD_VAR 0 1
38192: PUSH
38193: LD_INT 1
38195: NEG
38196: MUL
38197: ST_TO_ADDR
// end ;
38198: LD_VAR 0 2
38202: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38203: LD_INT 0
38205: PPUSH
38206: PPUSH
38207: PPUSH
38208: PPUSH
38209: PPUSH
38210: PPUSH
38211: PPUSH
38212: PPUSH
// if not unit or not building then
38213: LD_VAR 0 1
38217: NOT
38218: PUSH
38219: LD_VAR 0 2
38223: NOT
38224: OR
38225: IFFALSE 38229
// exit ;
38227: GO 38455
// x := GetX ( building ) ;
38229: LD_ADDR_VAR 0 4
38233: PUSH
38234: LD_VAR 0 2
38238: PPUSH
38239: CALL_OW 250
38243: ST_TO_ADDR
// y := GetY ( building ) ;
38244: LD_ADDR_VAR 0 6
38248: PUSH
38249: LD_VAR 0 2
38253: PPUSH
38254: CALL_OW 251
38258: ST_TO_ADDR
// d := GetDir ( building ) ;
38259: LD_ADDR_VAR 0 8
38263: PUSH
38264: LD_VAR 0 2
38268: PPUSH
38269: CALL_OW 254
38273: ST_TO_ADDR
// r := 4 ;
38274: LD_ADDR_VAR 0 9
38278: PUSH
38279: LD_INT 4
38281: ST_TO_ADDR
// for i := 1 to 5 do
38282: LD_ADDR_VAR 0 10
38286: PUSH
38287: DOUBLE
38288: LD_INT 1
38290: DEC
38291: ST_TO_ADDR
38292: LD_INT 5
38294: PUSH
38295: FOR_TO
38296: IFFALSE 38453
// begin _x := ShiftX ( x , d , r + i ) ;
38298: LD_ADDR_VAR 0 5
38302: PUSH
38303: LD_VAR 0 4
38307: PPUSH
38308: LD_VAR 0 8
38312: PPUSH
38313: LD_VAR 0 9
38317: PUSH
38318: LD_VAR 0 10
38322: PLUS
38323: PPUSH
38324: CALL_OW 272
38328: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
38329: LD_ADDR_VAR 0 7
38333: PUSH
38334: LD_VAR 0 6
38338: PPUSH
38339: LD_VAR 0 8
38343: PPUSH
38344: LD_VAR 0 9
38348: PUSH
38349: LD_VAR 0 10
38353: PLUS
38354: PPUSH
38355: CALL_OW 273
38359: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
38360: LD_VAR 0 5
38364: PPUSH
38365: LD_VAR 0 7
38369: PPUSH
38370: CALL_OW 488
38374: PUSH
38375: LD_VAR 0 5
38379: PPUSH
38380: LD_VAR 0 7
38384: PPUSH
38385: CALL_OW 428
38389: PPUSH
38390: CALL_OW 247
38394: PUSH
38395: LD_INT 3
38397: PUSH
38398: LD_INT 2
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: IN
38405: NOT
38406: AND
38407: IFFALSE 38451
// begin ComMoveXY ( unit , _x , _y ) ;
38409: LD_VAR 0 1
38413: PPUSH
38414: LD_VAR 0 5
38418: PPUSH
38419: LD_VAR 0 7
38423: PPUSH
38424: CALL_OW 111
// result := [ _x , _y ] ;
38428: LD_ADDR_VAR 0 3
38432: PUSH
38433: LD_VAR 0 5
38437: PUSH
38438: LD_VAR 0 7
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: ST_TO_ADDR
// exit ;
38447: POP
38448: POP
38449: GO 38455
// end ; end ;
38451: GO 38295
38453: POP
38454: POP
// end ;
38455: LD_VAR 0 3
38459: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
38460: LD_INT 0
38462: PPUSH
38463: PPUSH
38464: PPUSH
// result := 0 ;
38465: LD_ADDR_VAR 0 3
38469: PUSH
38470: LD_INT 0
38472: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
38473: LD_VAR 0 1
38477: PUSH
38478: LD_INT 0
38480: LESS
38481: PUSH
38482: LD_VAR 0 1
38486: PUSH
38487: LD_INT 8
38489: GREATER
38490: OR
38491: PUSH
38492: LD_VAR 0 2
38496: PUSH
38497: LD_INT 0
38499: LESS
38500: OR
38501: PUSH
38502: LD_VAR 0 2
38506: PUSH
38507: LD_INT 8
38509: GREATER
38510: OR
38511: IFFALSE 38515
// exit ;
38513: GO 38590
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
38515: LD_ADDR_VAR 0 4
38519: PUSH
38520: LD_INT 22
38522: PUSH
38523: LD_VAR 0 2
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PPUSH
38532: CALL_OW 69
38536: PUSH
38537: FOR_IN
38538: IFFALSE 38588
// begin un := UnitShoot ( i ) ;
38540: LD_ADDR_VAR 0 5
38544: PUSH
38545: LD_VAR 0 4
38549: PPUSH
38550: CALL_OW 504
38554: ST_TO_ADDR
// if GetSide ( un ) = side1 then
38555: LD_VAR 0 5
38559: PPUSH
38560: CALL_OW 255
38564: PUSH
38565: LD_VAR 0 1
38569: EQUAL
38570: IFFALSE 38586
// begin result := un ;
38572: LD_ADDR_VAR 0 3
38576: PUSH
38577: LD_VAR 0 5
38581: ST_TO_ADDR
// exit ;
38582: POP
38583: POP
38584: GO 38590
// end ; end ;
38586: GO 38537
38588: POP
38589: POP
// end ;
38590: LD_VAR 0 3
38594: RET
