// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 66509 0 0
// Init ;
   8: CALL 62 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 26
// Difficulty := 4 ;
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 4
  25: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  26: LD_INT 1
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: CALL 6882 0 2
// PrepareArabian ;
  36: CALL 381 0 0
// PrepareRussian ;
  40: CALL 7729 0 0
// Action ;
  44: CALL 15891 0 0
// if debug then
  48: LD_EXP 1
  52: IFFALSE 61
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ;
  61: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 05_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 05_
  80: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_STRING 04_2_GaidarKilled
  88: PPUSH
  89: LD_INT 1
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_STRING 05_ConvoySavedCounter
 104: PPUSH
 105: LD_INT 0
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// bergkampfArrived := false ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// omarArrived := false ;
 121: LD_ADDR_EXP 6
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// outpostDestroyed := false ;
 129: LD_ADDR_EXP 4
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ruLoseCounter := 0 ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// rolfScriptBase := false ;
 145: LD_ADDR_EXP 9
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// omarScriptBase := false ;
 153: LD_ADDR_EXP 10
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// linkedWithRolf := 0 ;
 161: LD_ADDR_EXP 12
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 169: LD_ADDR_EXP 26
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// rolfDied := false ;
 177: LD_ADDR_EXP 13
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// leninSpotted := false ;
 185: LD_ADDR_EXP 14
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// mortarConstructed := false ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// rolfHasVehicles := false ;
 201: LD_ADDR_EXP 16
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// leninScriptBase := true ;
 209: LD_ADDR_EXP 11
 213: PUSH
 214: LD_INT 1
 216: ST_TO_ADDR
// rolfWantVehicles := false ;
 217: LD_ADDR_EXP 17
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omarWantVehicles := false ;
 225: LD_ADDR_EXP 18
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// omarHasVehicles := false ;
 233: LD_ADDR_EXP 22
 237: PUSH
 238: LD_INT 0
 240: ST_TO_ADDR
// escapeAllowed := false ;
 241: LD_ADDR_EXP 24
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 8 8$00 , 6 6$00 , 5 5$30 , 5 5$00 ] [ Difficulty ] ;
 249: LD_ADDR_EXP 19
 253: PUSH
 254: LD_INT 16800
 256: PUSH
 257: LD_INT 12600
 259: PUSH
 260: LD_INT 11550
 262: PUSH
 263: LD_INT 10500
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: PUSH
 272: LD_OWVAR 67
 276: ARRAY
 277: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 10 10$00 , 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] ;
 278: LD_ADDR_EXP 20
 282: PUSH
 283: LD_INT 21000
 285: PUSH
 286: LD_INT 18900
 288: PUSH
 289: LD_INT 16800
 291: PUSH
 292: LD_INT 14700
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: PUSH
 301: LD_OWVAR 67
 305: ARRAY
 306: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 307: LD_ADDR_EXP 21
 311: PUSH
 312: LD_INT 4
 314: PUSH
 315: LD_INT 5
 317: PUSH
 318: LD_INT 6
 320: PUSH
 321: LD_INT 6
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: PUSH
 330: LD_OWVAR 67
 334: ARRAY
 335: ST_TO_ADDR
// omarAttack := false ;
 336: LD_ADDR_EXP 23
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// disableAttackOnHeike := false ;
 344: LD_ADDR_EXP 27
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// escapeTimer := 4 4$00 ;
 352: LD_ADDR_EXP 25
 356: PUSH
 357: LD_INT 8400
 359: ST_TO_ADDR
// firstAttack := true ;
 360: LD_ADDR_EXP 28
 364: PUSH
 365: LD_INT 1
 367: ST_TO_ADDR
// canRolfJoin := true ;
 368: LD_ADDR_EXP 29
 372: PUSH
 373: LD_INT 1
 375: ST_TO_ADDR
// end ; end_of_file
 376: LD_VAR 0 1
 380: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 381: LD_INT 0
 383: PPUSH
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
 389: PPUSH
 390: PPUSH
 391: PPUSH
 392: PPUSH
 393: PPUSH
 394: PPUSH
// uc_nation := 2 ;
 395: LD_ADDR_OWVAR 21
 399: PUSH
 400: LD_INT 2
 402: ST_TO_ADDR
// uc_side := 5 ;
 403: LD_ADDR_OWVAR 20
 407: PUSH
 408: LD_INT 5
 410: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 411: LD_ADDR_EXP 38
 415: PUSH
 416: LD_STRING Abdul
 418: PPUSH
 419: LD_INT 0
 421: PPUSH
 422: LD_STRING 
 424: PPUSH
 425: CALL 25293 0 3
 429: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 430: LD_ADDR_EXP 40
 434: PUSH
 435: LD_STRING Omar
 437: PPUSH
 438: LD_INT 0
 440: PPUSH
 441: LD_STRING 
 443: PPUSH
 444: CALL 25293 0 3
 448: ST_TO_ADDR
// uc_side := 2 ;
 449: LD_ADDR_OWVAR 20
 453: PUSH
 454: LD_INT 2
 456: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 457: LD_ADDR_EXP 30
 461: PUSH
 462: LD_STRING Heike
 464: PPUSH
 465: LD_EXP 1
 469: NOT
 470: PPUSH
 471: LD_EXP 2
 475: PPUSH
 476: CALL 25293 0 3
 480: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 481: LD_ADDR_EXP 33
 485: PUSH
 486: LD_STRING Ibrahim
 488: PPUSH
 489: LD_EXP 1
 493: NOT
 494: PPUSH
 495: LD_EXP 2
 499: PPUSH
 500: CALL 25293 0 3
 504: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 505: LD_ADDR_EXP 31
 509: PUSH
 510: LD_STRING Givi
 512: PPUSH
 513: LD_EXP 1
 517: NOT
 518: PPUSH
 519: LD_EXP 2
 523: PPUSH
 524: CALL 25293 0 3
 528: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 529: LD_ADDR_EXP 34
 533: PUSH
 534: LD_STRING Kamil
 536: PPUSH
 537: LD_EXP 1
 541: NOT
 542: PPUSH
 543: LD_EXP 2
 547: PPUSH
 548: CALL 25293 0 3
 552: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 553: LD_ADDR_EXP 35
 557: PUSH
 558: LD_STRING Kaia
 560: PPUSH
 561: LD_EXP 1
 565: NOT
 566: PPUSH
 567: LD_EXP 2
 571: PPUSH
 572: CALL 25293 0 3
 576: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 577: LD_ADDR_EXP 36
 581: PUSH
 582: LD_STRING Sophia
 584: PPUSH
 585: LD_EXP 1
 589: NOT
 590: PPUSH
 591: LD_EXP 2
 595: PPUSH
 596: CALL 25293 0 3
 600: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 601: LD_ADDR_EXP 37
 605: PUSH
 606: LD_STRING Markov
 608: PPUSH
 609: LD_EXP 1
 613: NOT
 614: PPUSH
 615: LD_EXP 2
 619: PPUSH
 620: CALL 25293 0 3
 624: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 625: LD_ADDR_EXP 42
 629: PUSH
 630: LD_STRING Aviradze
 632: PPUSH
 633: LD_EXP 1
 637: NOT
 638: PPUSH
 639: LD_EXP 2
 643: PPUSH
 644: CALL 25293 0 3
 648: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 649: LD_ADDR_EXP 41
 653: PUSH
 654: LD_STRING Kurt
 656: PPUSH
 657: LD_EXP 1
 661: NOT
 662: PPUSH
 663: LD_EXP 2
 667: PPUSH
 668: CALL 25293 0 3
 672: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 673: LD_ADDR_EXP 32
 677: PUSH
 678: LD_STRING Mike
 680: PPUSH
 681: LD_EXP 1
 685: NOT
 686: PPUSH
 687: LD_EXP 2
 691: PPUSH
 692: CALL 25293 0 3
 696: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 697: LD_ADDR_EXP 39
 701: PUSH
 702: LD_STRING Olaf
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: LD_STRING 
 710: PPUSH
 711: CALL 25293 0 3
 715: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 716: LD_ADDR_EXP 45
 720: PUSH
 721: LD_STRING 05_others
 723: PPUSH
 724: CALL_OW 31
 728: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 729: LD_ADDR_EXP 46
 733: PUSH
 734: LD_STRING 05_apes
 736: PPUSH
 737: CALL_OW 31
 741: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 742: LD_ADDR_VAR 0 5
 746: PUSH
 747: LD_STRING 05_Radar
 749: PPUSH
 750: LD_EXP 1
 754: PPUSH
 755: CALL_OW 30
 759: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 760: LD_ADDR_VAR 0 6
 764: PUSH
 765: LD_STRING 05_RemoteControl
 767: PPUSH
 768: LD_EXP 1
 772: PPUSH
 773: CALL_OW 30
 777: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 778: LD_ADDR_VAR 0 7
 782: PUSH
 783: LD_STRING 05_DrugsTested
 785: PPUSH
 786: LD_EXP 1
 790: PPUSH
 791: CALL_OW 30
 795: ST_TO_ADDR
// if hasDrugs then
 796: LD_VAR 0 7
 800: IFFALSE 815
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 802: LD_INT 5
 804: PPUSH
 805: LD_INT 2
 807: PPUSH
 808: LD_INT 2
 810: PPUSH
 811: CALL_OW 322
// if hasRadar then
 815: LD_VAR 0 5
 819: IFFALSE 834
// SetTech ( tech_radar , 2 , state_researched ) ;
 821: LD_INT 6
 823: PPUSH
 824: LD_INT 2
 826: PPUSH
 827: LD_INT 2
 829: PPUSH
 830: CALL_OW 322
// if hasRemote then
 834: LD_VAR 0 6
 838: IFFALSE 853
// SetTech ( tech_remCont , 2 , state_researched ) ;
 840: LD_INT 15
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 2
 848: PPUSH
 849: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 853: LD_ADDR_VAR 0 12
 857: PUSH
 858: LD_INT 5
 860: PPUSH
 861: LD_INT 0
 863: PPUSH
 864: CALL_OW 517
 868: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: DOUBLE
 875: LD_INT 1
 877: DEC
 878: ST_TO_ADDR
 879: LD_VAR 0 12
 883: PUSH
 884: LD_INT 1
 886: ARRAY
 887: PUSH
 888: FOR_TO
 889: IFFALSE 966
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 891: LD_VAR 0 12
 895: PUSH
 896: LD_INT 1
 898: ARRAY
 899: PUSH
 900: LD_VAR 0 2
 904: ARRAY
 905: PPUSH
 906: LD_VAR 0 12
 910: PUSH
 911: LD_INT 2
 913: ARRAY
 914: PUSH
 915: LD_VAR 0 2
 919: ARRAY
 920: PPUSH
 921: CALL_OW 351
 925: IFFALSE 964
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 927: LD_VAR 0 12
 931: PUSH
 932: LD_INT 1
 934: ARRAY
 935: PUSH
 936: LD_VAR 0 2
 940: ARRAY
 941: PPUSH
 942: LD_VAR 0 12
 946: PUSH
 947: LD_INT 2
 949: ARRAY
 950: PUSH
 951: LD_VAR 0 2
 955: ARRAY
 956: PPUSH
 957: LD_INT 2
 959: PPUSH
 960: CALL_OW 244
 964: GO 888
 966: POP
 967: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 968: LD_ADDR_VAR 0 4
 972: PUSH
 973: LD_INT 0
 975: PUSH
 976: LD_INT 206
 978: PUSH
 979: LD_INT 80
 981: PUSH
 982: LD_INT 1
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: LIST
 989: LIST
 990: PUSH
 991: LD_INT 32
 993: PUSH
 994: LD_INT 221
 996: PUSH
 997: LD_INT 95
 999: PUSH
1000: LD_INT 5
1002: PUSH
1003: LD_INT 23
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: PUSH
1013: LD_INT 32
1015: PUSH
1016: LD_INT 223
1018: PUSH
1019: LD_INT 88
1021: PUSH
1022: LD_INT 5
1024: PUSH
1025: LD_INT 24
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 32
1037: PUSH
1038: LD_INT 202
1040: PUSH
1041: LD_INT 64
1043: PUSH
1044: LD_INT 2
1046: PUSH
1047: LD_INT 25
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: PUSH
1057: LD_INT 3
1059: PUSH
1060: LD_INT 203
1062: PUSH
1063: LD_INT 91
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: PUSH
1075: LD_INT 8
1077: PUSH
1078: LD_INT 217
1080: PUSH
1081: LD_INT 78
1083: PUSH
1084: LD_INT 4
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 27
1095: PUSH
1096: LD_INT 220
1098: PUSH
1099: LD_INT 99
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 27
1113: PUSH
1114: LD_INT 220
1116: PUSH
1117: LD_INT 103
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 27
1131: PUSH
1132: LD_INT 216
1134: PUSH
1135: LD_INT 102
1137: PUSH
1138: LD_INT 1
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: PUSH
1147: LD_INT 17
1149: PUSH
1150: LD_INT 203
1152: PUSH
1153: LD_INT 94
1155: PUSH
1156: LD_INT 0
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 23
1167: PUSH
1168: LD_INT 200
1170: PUSH
1171: LD_INT 88
1173: PUSH
1174: LD_INT 2
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: LIST
1181: LIST
1182: PUSH
1183: LD_INT 16
1185: PUSH
1186: LD_INT 199
1188: PUSH
1189: LD_INT 91
1191: PUSH
1192: LD_INT 1
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: PUSH
1201: LD_INT 26
1203: PUSH
1204: LD_INT 197
1206: PUSH
1207: LD_INT 81
1209: PUSH
1210: LD_INT 1
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: LIST
1218: PUSH
1219: LD_INT 26
1221: PUSH
1222: LD_INT 197
1224: PUSH
1225: LD_INT 78
1227: PUSH
1228: LD_INT 3
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: ST_TO_ADDR
// if hasRadar then
1253: LD_VAR 0 5
1257: IFFALSE 1301
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
1259: LD_ADDR_VAR 0 4
1263: PUSH
1264: LD_VAR 0 4
1268: PPUSH
1269: LD_VAR 0 4
1273: PUSH
1274: LD_INT 1
1276: PLUS
1277: PPUSH
1278: LD_INT 20
1280: PUSH
1281: LD_INT 203
1283: PUSH
1284: LD_INT 87
1286: PUSH
1287: LD_INT 3
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: PPUSH
1296: CALL_OW 1
1300: ST_TO_ADDR
// if hasRemote then
1301: LD_VAR 0 6
1305: IFFALSE 1349
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
1307: LD_ADDR_VAR 0 4
1311: PUSH
1312: LD_VAR 0 4
1316: PPUSH
1317: LD_VAR 0 4
1321: PUSH
1322: LD_INT 1
1324: PLUS
1325: PPUSH
1326: LD_INT 22
1328: PUSH
1329: LD_INT 207
1331: PUSH
1332: LD_INT 95
1334: PUSH
1335: LD_INT 5
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: PPUSH
1344: CALL_OW 1
1348: ST_TO_ADDR
// for i in base do
1349: LD_ADDR_VAR 0 2
1353: PUSH
1354: LD_VAR 0 4
1358: PUSH
1359: FOR_IN
1360: IFFALSE 1541
// begin bc_type := i [ 1 ] ;
1362: LD_ADDR_OWVAR 42
1366: PUSH
1367: LD_VAR 0 2
1371: PUSH
1372: LD_INT 1
1374: ARRAY
1375: ST_TO_ADDR
// bc_level := 3 ;
1376: LD_ADDR_OWVAR 43
1380: PUSH
1381: LD_INT 3
1383: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1384: LD_VAR 0 2
1388: PUSH
1389: LD_INT 1
1391: ARRAY
1392: PUSH
1393: LD_INT 8
1395: EQUAL
1396: IFFALSE 1431
// begin bc_kind1 := b_lab_weapon ;
1398: LD_ADDR_OWVAR 44
1402: PUSH
1403: LD_INT 10
1405: ST_TO_ADDR
// if hasRadar then
1406: LD_VAR 0 5
1410: IFFALSE 1422
// bc_kind2 := b_lab_opto else
1412: LD_ADDR_OWVAR 45
1416: PUSH
1417: LD_INT 15
1419: ST_TO_ADDR
1420: GO 1431
// bc_kind2 := - 1 ;
1422: LD_ADDR_OWVAR 45
1426: PUSH
1427: LD_INT 1
1429: NEG
1430: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 2
1443: ARRAY
1444: PPUSH
1445: LD_VAR 0 2
1449: PUSH
1450: LD_INT 3
1452: ARRAY
1453: PPUSH
1454: LD_VAR 0 2
1458: PUSH
1459: LD_INT 4
1461: ARRAY
1462: PPUSH
1463: CALL_OW 47
1467: ST_TO_ADDR
// if i > 4 then
1468: LD_VAR 0 2
1472: PUSH
1473: LD_INT 4
1475: GREATER
1476: IFFALSE 1496
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1478: LD_VAR 0 3
1482: PPUSH
1483: LD_VAR 0 2
1487: PUSH
1488: LD_INT 5
1490: ARRAY
1491: PPUSH
1492: CALL_OW 431
// if i [ 1 ] = b_bunker then
1496: LD_VAR 0 2
1500: PUSH
1501: LD_INT 1
1503: ARRAY
1504: PUSH
1505: LD_INT 32
1507: EQUAL
1508: IFFALSE 1539
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1510: LD_ADDR_VAR 0 11
1514: PUSH
1515: LD_VAR 0 11
1519: PPUSH
1520: LD_VAR 0 11
1524: PUSH
1525: LD_INT 1
1527: PLUS
1528: PPUSH
1529: LD_VAR 0 3
1533: PPUSH
1534: CALL_OW 1
1538: ST_TO_ADDR
// end ;
1539: GO 1359
1541: POP
1542: POP
// depot := HexInfo ( 206 , 80 ) ;
1543: LD_ADDR_VAR 0 9
1547: PUSH
1548: LD_INT 206
1550: PPUSH
1551: LD_INT 80
1553: PPUSH
1554: CALL_OW 428
1558: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1559: LD_ADDR_VAR 0 8
1563: PUSH
1564: LD_INT 203
1566: PPUSH
1567: LD_INT 91
1569: PPUSH
1570: CALL_OW 428
1574: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1575: LD_ADDR_VAR 0 10
1579: PUSH
1580: LD_INT 217
1582: PPUSH
1583: LD_INT 78
1585: PPUSH
1586: CALL_OW 428
1590: ST_TO_ADDR
// arDepot := depot ;
1591: LD_ADDR_EXP 44
1595: PUSH
1596: LD_VAR 0 9
1600: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 , 120 ] [ Difficulty ] ) ;
1601: LD_VAR 0 9
1605: PPUSH
1606: CALL_OW 274
1610: PPUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_INT 360
1616: PUSH
1617: LD_INT 260
1619: PUSH
1620: LD_INT 160
1622: PUSH
1623: LD_INT 120
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: LD_OWVAR 67
1636: ARRAY
1637: PPUSH
1638: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 130 , 100 ] [ Difficulty ] ) ;
1642: LD_VAR 0 9
1646: PPUSH
1647: CALL_OW 274
1651: PPUSH
1652: LD_INT 2
1654: PPUSH
1655: LD_INT 200
1657: PUSH
1658: LD_INT 170
1660: PUSH
1661: LD_INT 130
1663: PUSH
1664: LD_INT 100
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_OWVAR 67
1677: ARRAY
1678: PPUSH
1679: CALL_OW 277
// uc_nation := 2 ;
1683: LD_ADDR_OWVAR 21
1687: PUSH
1688: LD_INT 2
1690: ST_TO_ADDR
// uc_side := 2 ;
1691: LD_ADDR_OWVAR 20
1695: PUSH
1696: LD_INT 2
1698: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
1699: LD_INT 13
1701: PPUSH
1702: LD_INT 1
1704: PPUSH
1705: LD_INT 1
1707: PPUSH
1708: LD_INT 27
1710: PPUSH
1711: LD_INT 33
1713: PPUSH
1714: CALL 30310 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
1718: CALL_OW 45
1722: PPUSH
1723: LD_INT 190
1725: PPUSH
1726: LD_INT 64
1728: PPUSH
1729: LD_INT 5
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: CALL 64836 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
1739: LD_INT 13
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 25
1750: PPUSH
1751: LD_INT 22
1753: PPUSH
1754: CALL 30310 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
1758: CALL_OW 45
1762: PPUSH
1763: LD_INT 188
1765: PPUSH
1766: LD_INT 67
1768: PPUSH
1769: LD_INT 5
1771: PPUSH
1772: LD_INT 0
1774: PPUSH
1775: CALL 64836 0 5
// if hasRemote then
1779: LD_VAR 0 6
1783: IFFALSE 1865
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
1785: LD_INT 13
1787: PPUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_INT 31
1796: PPUSH
1797: LD_INT 35
1799: PPUSH
1800: CALL 30310 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
1804: CALL_OW 45
1808: PPUSH
1809: LD_INT 191
1811: PPUSH
1812: LD_INT 71
1814: PPUSH
1815: LD_INT 5
1817: PPUSH
1818: LD_INT 0
1820: PPUSH
1821: CALL 64836 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
1825: LD_INT 14
1827: PPUSH
1828: LD_INT 1
1830: PPUSH
1831: LD_INT 2
1833: PPUSH
1834: LD_INT 27
1836: PPUSH
1837: LD_INT 55
1839: PPUSH
1840: CALL 30310 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
1844: CALL_OW 45
1848: PPUSH
1849: LD_INT 199
1851: PPUSH
1852: LD_INT 67
1854: PPUSH
1855: LD_INT 0
1857: PPUSH
1858: LD_INT 0
1860: PPUSH
1861: CALL 64836 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1865: LD_EXP 30
1869: PPUSH
1870: LD_INT 213
1872: PPUSH
1873: LD_INT 87
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1883: LD_EXP 30
1887: PPUSH
1888: LD_INT 214
1890: PPUSH
1891: LD_INT 87
1893: PPUSH
1894: CALL_OW 118
// if Kaia then
1898: LD_EXP 35
1902: IFFALSE 1937
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1904: LD_EXP 35
1908: PPUSH
1909: LD_INT 213
1911: PPUSH
1912: LD_INT 85
1914: PPUSH
1915: LD_INT 0
1917: PPUSH
1918: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1922: LD_EXP 35
1926: PPUSH
1927: LD_INT 215
1929: PPUSH
1930: LD_INT 87
1932: PPUSH
1933: CALL_OW 118
// end ; if Olaf and Kaia then
1937: LD_EXP 39
1941: PUSH
1942: LD_EXP 35
1946: AND
1947: IFFALSE 1984
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1949: LD_EXP 39
1953: PPUSH
1954: LD_INT 215
1956: PPUSH
1957: LD_INT 87
1959: PPUSH
1960: LD_INT 0
1962: PPUSH
1963: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1967: LD_EXP 39
1971: PPUSH
1972: LD_INT 213
1974: PPUSH
1975: LD_INT 85
1977: PPUSH
1978: CALL_OW 118
// end else
1982: GO 2004
// if Olaf then
1984: LD_EXP 39
1988: IFFALSE 2004
// PlaceHumanInUnit ( Olaf , factory ) ;
1990: LD_EXP 39
1994: PPUSH
1995: LD_VAR 0 8
1999: PPUSH
2000: CALL_OW 52
// if Givi then
2004: LD_EXP 31
2008: IFFALSE 2089
// begin if Kaia and Olaf then
2010: LD_EXP 35
2014: PUSH
2015: LD_EXP 39
2019: AND
2020: IFFALSE 2057
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2022: LD_EXP 31
2026: PPUSH
2027: LD_INT 247
2029: PPUSH
2030: LD_INT 117
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2040: LD_EXP 31
2044: PPUSH
2045: LD_INT 248
2047: PPUSH
2048: LD_INT 118
2050: PPUSH
2051: CALL_OW 118
// end else
2055: GO 2089
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2057: LD_EXP 31
2061: PPUSH
2062: LD_INT 216
2064: PPUSH
2065: LD_INT 88
2067: PPUSH
2068: LD_INT 0
2070: PPUSH
2071: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2075: LD_EXP 31
2079: PPUSH
2080: LD_EXP 30
2084: PPUSH
2085: CALL_OW 119
// end ; end ; if Kurt then
2089: LD_EXP 41
2093: IFFALSE 2113
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2095: LD_EXP 41
2099: PPUSH
2100: LD_VAR 0 11
2104: PUSH
2105: LD_INT 2
2107: ARRAY
2108: PPUSH
2109: CALL_OW 52
// if Mike then
2113: LD_EXP 32
2117: IFFALSE 2137
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2119: LD_EXP 32
2123: PPUSH
2124: LD_VAR 0 11
2128: PUSH
2129: LD_INT 3
2131: ARRAY
2132: PPUSH
2133: CALL_OW 52
// if Kamil then
2137: LD_EXP 34
2141: IFFALSE 2203
// begin if Kaia and Olaf then
2143: LD_EXP 35
2147: PUSH
2148: LD_EXP 39
2152: AND
2153: IFFALSE 2171
// PlaceHumanInUnit ( Kamil , depot ) else
2155: LD_EXP 34
2159: PPUSH
2160: LD_VAR 0 9
2164: PPUSH
2165: CALL_OW 52
2169: GO 2203
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
2171: LD_EXP 34
2175: PPUSH
2176: LD_INT 213
2178: PPUSH
2179: LD_INT 87
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
2189: LD_EXP 34
2193: PPUSH
2194: LD_EXP 30
2198: PPUSH
2199: CALL_OW 119
// end ; end ; if Sophia then
2203: LD_EXP 36
2207: IFFALSE 2223
// PlaceHumanInUnit ( Sophia , depot ) ;
2209: LD_EXP 36
2213: PPUSH
2214: LD_VAR 0 9
2218: PPUSH
2219: CALL_OW 52
// if Aviradze then
2223: LD_EXP 42
2227: IFFALSE 2243
// PlaceHumanInUnit ( Aviradze , lab ) ;
2229: LD_EXP 42
2233: PPUSH
2234: LD_VAR 0 10
2238: PPUSH
2239: CALL_OW 52
// if Ibrahim then
2243: LD_EXP 33
2247: IFFALSE 2263
// PlaceHumanInUnit ( Ibrahim , lab ) ;
2249: LD_EXP 33
2253: PPUSH
2254: LD_VAR 0 10
2258: PPUSH
2259: CALL_OW 52
// if Markov then
2263: LD_EXP 37
2267: IFFALSE 2283
// PlaceHumanInUnit ( Markov , factory ) ;
2269: LD_EXP 37
2273: PPUSH
2274: LD_VAR 0 8
2278: PPUSH
2279: CALL_OW 52
// if heikeSecondSquad then
2283: LD_EXP 45
2287: IFFALSE 2327
// for i in heikeSecondSquad do
2289: LD_ADDR_VAR 0 2
2293: PUSH
2294: LD_EXP 45
2298: PUSH
2299: FOR_IN
2300: IFFALSE 2325
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
2302: LD_VAR 0 2
2306: PPUSH
2307: LD_INT 190
2309: PPUSH
2310: LD_INT 65
2312: PPUSH
2313: LD_INT 5
2315: PPUSH
2316: LD_INT 0
2318: PPUSH
2319: CALL_OW 50
2323: GO 2299
2325: POP
2326: POP
// if heikeApes then
2327: LD_EXP 46
2331: IFFALSE 2371
// for i in heikeApes do
2333: LD_ADDR_VAR 0 2
2337: PUSH
2338: LD_EXP 46
2342: PUSH
2343: FOR_IN
2344: IFFALSE 2369
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_INT 190
2353: PPUSH
2354: LD_INT 70
2356: PPUSH
2357: LD_INT 5
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 50
2367: GO 2343
2369: POP
2370: POP
// end ;
2371: LD_VAR 0 1
2375: RET
// export function PrepareRolfSquad ; var i , j ; begin
2376: LD_INT 0
2378: PPUSH
2379: PPUSH
2380: PPUSH
// uc_side := 8 ;
2381: LD_ADDR_OWVAR 20
2385: PUSH
2386: LD_INT 8
2388: ST_TO_ADDR
// uc_nation := 2 ;
2389: LD_ADDR_OWVAR 21
2393: PUSH
2394: LD_INT 2
2396: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
2397: LD_ADDR_EXP 43
2401: PUSH
2402: LD_STRING Bergkamp
2404: PPUSH
2405: CALL_OW 25
2409: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
2410: LD_ADDR_EXP 47
2414: PUSH
2415: LD_EXP 43
2419: PUSH
2420: EMPTY
2421: LIST
2422: ST_TO_ADDR
// for i := 1 to 4 do
2423: LD_ADDR_VAR 0 2
2427: PUSH
2428: DOUBLE
2429: LD_INT 1
2431: DEC
2432: ST_TO_ADDR
2433: LD_INT 4
2435: PUSH
2436: FOR_TO
2437: IFFALSE 2517
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
2439: LD_ADDR_VAR 0 3
2443: PUSH
2444: DOUBLE
2445: LD_INT 1
2447: DEC
2448: ST_TO_ADDR
2449: LD_INT 5
2451: PUSH
2452: LD_INT 2
2454: PUSH
2455: LD_INT 3
2457: PUSH
2458: LD_INT 1
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: PUSH
2467: LD_VAR 0 2
2471: ARRAY
2472: PUSH
2473: FOR_TO
2474: IFFALSE 2513
// begin PrepareHuman ( false , i , 5 ) ;
2476: LD_INT 0
2478: PPUSH
2479: LD_VAR 0 2
2483: PPUSH
2484: LD_INT 5
2486: PPUSH
2487: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
2491: LD_ADDR_EXP 47
2495: PUSH
2496: LD_EXP 47
2500: PPUSH
2501: CALL_OW 44
2505: PPUSH
2506: CALL 62694 0 2
2510: ST_TO_ADDR
// end ;
2511: GO 2473
2513: POP
2514: POP
// end ;
2515: GO 2436
2517: POP
2518: POP
// if HexInfo ( 5 , 3 ) then
2519: LD_INT 5
2521: PPUSH
2522: LD_INT 3
2524: PPUSH
2525: CALL_OW 428
2529: IFFALSE 2546
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
2531: LD_INT 5
2533: PPUSH
2534: LD_INT 3
2536: PPUSH
2537: CALL_OW 428
2541: PPUSH
2542: CALL_OW 64
// for i in rolfSquad do
2546: LD_ADDR_VAR 0 2
2550: PUSH
2551: LD_EXP 47
2555: PUSH
2556: FOR_IN
2557: IFFALSE 2693
// begin uc_direction := 2 ;
2559: LD_ADDR_OWVAR 24
2563: PUSH
2564: LD_INT 2
2566: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
2567: LD_VAR 0 2
2571: PPUSH
2572: CALL_OW 257
2576: PUSH
2577: LD_INT 3
2579: EQUAL
2580: IFFALSE 2654
// begin uc_side := 8 ;
2582: LD_ADDR_OWVAR 20
2586: PUSH
2587: LD_INT 8
2589: ST_TO_ADDR
// uc_nation := 2 ;
2590: LD_ADDR_OWVAR 21
2594: PUSH
2595: LD_INT 2
2597: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
2598: LD_INT 13
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: LD_INT 27
2609: PPUSH
2610: LD_INT 88
2612: PPUSH
2613: CALL 30310 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
2617: CALL_OW 45
2621: PPUSH
2622: LD_INT 11
2624: PPUSH
2625: LD_INT 0
2627: PPUSH
2628: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
2632: LD_VAR 0 2
2636: PPUSH
2637: LD_INT 5
2639: PPUSH
2640: LD_INT 3
2642: PPUSH
2643: CALL_OW 428
2647: PPUSH
2648: CALL_OW 52
// end else
2652: GO 2669
// PlaceUnitArea ( i , northSpawn , false ) ;
2654: LD_VAR 0 2
2658: PPUSH
2659: LD_INT 11
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
2669: LD_VAR 0 2
2673: PPUSH
2674: LD_INT 29
2676: PPUSH
2677: LD_INT 10
2679: PPUSH
2680: CALL_OW 111
// wait ( 0 0$2 ) ;
2684: LD_INT 70
2686: PPUSH
2687: CALL_OW 67
// end ;
2691: GO 2556
2693: POP
2694: POP
// wait ( 0 0$5 ) ;
2695: LD_INT 175
2697: PPUSH
2698: CALL_OW 67
// end ;
2702: LD_VAR 0 1
2706: RET
// export function PrepareRolfBase ; var i , tmp ; begin
2707: LD_INT 0
2709: PPUSH
2710: PPUSH
2711: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
2712: LD_EXP 43
2716: PPUSH
2717: LD_INT 94
2719: PPUSH
2720: LD_INT 63
2722: PPUSH
2723: CALL_OW 428
2727: PPUSH
2728: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
2732: LD_ADDR_VAR 0 3
2736: PUSH
2737: LD_INT 4
2739: PUSH
2740: LD_INT 82
2742: PUSH
2743: LD_INT 64
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 31
2757: PUSH
2758: LD_INT 73
2760: PUSH
2761: LD_INT 58
2763: PUSH
2764: LD_INT 0
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: LIST
2771: LIST
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: ST_TO_ADDR
// for i in tmp do
2777: LD_ADDR_VAR 0 2
2781: PUSH
2782: LD_VAR 0 3
2786: PUSH
2787: FOR_IN
2788: IFFALSE 2852
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2790: LD_EXP 47
2794: PPUSH
2795: LD_INT 25
2797: PUSH
2798: LD_INT 2
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PPUSH
2805: CALL_OW 72
2809: PPUSH
2810: LD_VAR 0 2
2814: PUSH
2815: LD_INT 1
2817: ARRAY
2818: PPUSH
2819: LD_VAR 0 2
2823: PUSH
2824: LD_INT 2
2826: ARRAY
2827: PPUSH
2828: LD_VAR 0 2
2832: PUSH
2833: LD_INT 3
2835: ARRAY
2836: PPUSH
2837: LD_VAR 0 2
2841: PUSH
2842: LD_INT 4
2844: ARRAY
2845: PPUSH
2846: CALL_OW 205
2850: GO 2787
2852: POP
2853: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
2854: LD_EXP 47
2858: PUSH
2859: LD_INT 2
2861: ARRAY
2862: PPUSH
2863: LD_INT 63
2865: PPUSH
2866: LD_INT 42
2868: PPUSH
2869: CALL_OW 428
2873: PPUSH
2874: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
2878: LD_EXP 47
2882: PUSH
2883: LD_INT 3
2885: ARRAY
2886: PPUSH
2887: LD_INT 94
2889: PPUSH
2890: LD_INT 63
2892: PPUSH
2893: CALL_OW 428
2897: PPUSH
2898: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2902: LD_INT 35
2904: PPUSH
2905: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
2909: LD_EXP 47
2913: PPUSH
2914: LD_INT 25
2916: PUSH
2917: LD_INT 2
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: PUSH
2924: LD_INT 3
2926: PUSH
2927: LD_INT 60
2929: PUSH
2930: EMPTY
2931: LIST
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PPUSH
2941: CALL_OW 72
2945: IFFALSE 2902
// rolfScriptBase := true ;
2947: LD_ADDR_EXP 9
2951: PUSH
2952: LD_INT 1
2954: ST_TO_ADDR
// end ;
2955: LD_VAR 0 1
2959: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
2960: LD_EXP 9
2964: PUSH
2965: LD_EXP 43
2969: PPUSH
2970: CALL_OW 255
2974: PUSH
2975: LD_INT 8
2977: EQUAL
2978: AND
2979: IFFALSE 3986
2981: GO 2983
2983: DISABLE
2984: LD_INT 0
2986: PPUSH
2987: PPUSH
2988: PPUSH
2989: PPUSH
2990: PPUSH
2991: PPUSH
2992: PPUSH
2993: PPUSH
2994: PPUSH
2995: PPUSH
// begin enable ;
2996: ENABLE
// if not rolfSquad then
2997: LD_EXP 47
3001: NOT
3002: IFFALSE 3006
// exit ;
3004: GO 3986
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
3006: LD_ADDR_VAR 0 9
3010: PUSH
3011: LD_INT 12
3013: PPUSH
3014: LD_INT 81
3016: PUSH
3017: LD_INT 8
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PPUSH
3024: CALL_OW 70
3028: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
3029: LD_ADDR_VAR 0 5
3033: PUSH
3034: LD_EXP 47
3038: PPUSH
3039: LD_INT 25
3041: PUSH
3042: LD_INT 1
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 72
3053: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3054: LD_ADDR_VAR 0 6
3058: PUSH
3059: LD_EXP 47
3063: PPUSH
3064: LD_INT 25
3066: PUSH
3067: LD_INT 2
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: PPUSH
3074: CALL_OW 72
3078: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
3079: LD_ADDR_VAR 0 8
3083: PUSH
3084: LD_EXP 47
3088: PPUSH
3089: LD_INT 25
3091: PUSH
3092: LD_INT 3
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PPUSH
3099: CALL_OW 72
3103: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
3104: LD_ADDR_VAR 0 7
3108: PUSH
3109: LD_EXP 47
3113: PPUSH
3114: LD_INT 25
3116: PUSH
3117: LD_INT 4
3119: PUSH
3120: EMPTY
3121: LIST
3122: LIST
3123: PPUSH
3124: CALL_OW 72
3128: ST_TO_ADDR
// if sol then
3129: LD_VAR 0 5
3133: IFFALSE 3431
// for i in sol union Rolf do
3135: LD_ADDR_VAR 0 1
3139: PUSH
3140: LD_VAR 0 5
3144: PUSH
3145: LD_EXP 43
3149: UNION
3150: PUSH
3151: FOR_IN
3152: IFFALSE 3429
// if not IsInUnit ( i ) and not HasTask ( i ) then
3154: LD_VAR 0 1
3158: PPUSH
3159: CALL_OW 310
3163: NOT
3164: PUSH
3165: LD_VAR 0 1
3169: PPUSH
3170: CALL_OW 314
3174: NOT
3175: AND
3176: IFFALSE 3427
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
3178: LD_VAR 0 1
3182: PPUSH
3183: CALL_OW 256
3187: PUSH
3188: LD_INT 500
3190: LESS
3191: PUSH
3192: LD_VAR 0 1
3196: PPUSH
3197: LD_INT 80
3199: PPUSH
3200: LD_INT 49
3202: PPUSH
3203: CALL_OW 297
3207: PUSH
3208: LD_INT 6
3210: GREATER
3211: AND
3212: IFFALSE 3231
// begin ComMoveXY ( i , 80 , 49 ) ;
3214: LD_VAR 0 1
3218: PPUSH
3219: LD_INT 80
3221: PPUSH
3222: LD_INT 49
3224: PPUSH
3225: CALL_OW 111
// continue ;
3229: GO 3151
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
3231: LD_ADDR_VAR 0 4
3235: PUSH
3236: LD_INT 22
3238: PUSH
3239: LD_INT 8
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: LD_INT 50
3248: PUSH
3249: EMPTY
3250: LIST
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: LD_INT 30
3257: PUSH
3258: LD_INT 4
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: LD_INT 30
3267: PUSH
3268: LD_INT 5
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 30
3277: PUSH
3278: LD_INT 32
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: LD_INT 30
3287: PUSH
3288: LD_INT 31
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: LIST
3306: PPUSH
3307: CALL_OW 69
3311: ST_TO_ADDR
// if tmp then
3312: LD_VAR 0 4
3316: IFFALSE 3427
// begin for b in tmp do
3318: LD_ADDR_VAR 0 2
3322: PUSH
3323: LD_VAR 0 4
3327: PUSH
3328: FOR_IN
3329: IFFALSE 3425
// begin case GetBType ( b ) of b_armoury , b_barracks :
3331: LD_VAR 0 2
3335: PPUSH
3336: CALL_OW 266
3340: PUSH
3341: LD_INT 4
3343: DOUBLE
3344: EQUAL
3345: IFTRUE 3355
3347: LD_INT 5
3349: DOUBLE
3350: EQUAL
3351: IFTRUE 3355
3353: GO 3366
3355: POP
// p := 6 ; b_breastwork , b_bunker :
3356: LD_ADDR_VAR 0 3
3360: PUSH
3361: LD_INT 6
3363: ST_TO_ADDR
3364: GO 3392
3366: LD_INT 31
3368: DOUBLE
3369: EQUAL
3370: IFTRUE 3380
3372: LD_INT 32
3374: DOUBLE
3375: EQUAL
3376: IFTRUE 3380
3378: GO 3391
3380: POP
// p := 1 ; end ;
3381: LD_ADDR_VAR 0 3
3385: PUSH
3386: LD_INT 1
3388: ST_TO_ADDR
3389: GO 3392
3391: POP
// if UnitsInside ( b ) < p then
3392: LD_VAR 0 2
3396: PPUSH
3397: CALL_OW 313
3401: PUSH
3402: LD_VAR 0 3
3406: LESS
3407: IFFALSE 3423
// ComEnterUnit ( i , b ) ;
3409: LD_VAR 0 1
3413: PPUSH
3414: LD_VAR 0 2
3418: PPUSH
3419: CALL_OW 120
// end ;
3423: GO 3328
3425: POP
3426: POP
// end ; end ;
3427: GO 3151
3429: POP
3430: POP
// if sci then
3431: LD_VAR 0 7
3435: IFFALSE 3490
// for i in sci do
3437: LD_ADDR_VAR 0 1
3441: PUSH
3442: LD_VAR 0 7
3446: PUSH
3447: FOR_IN
3448: IFFALSE 3488
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
3450: LD_VAR 0 1
3454: PPUSH
3455: LD_INT 80
3457: PPUSH
3458: LD_INT 49
3460: PPUSH
3461: CALL_OW 297
3465: PUSH
3466: LD_INT 9
3468: GREATER
3469: IFFALSE 3486
// ComMoveXY ( i , 80 , 49 ) ;
3471: LD_VAR 0 1
3475: PPUSH
3476: LD_INT 80
3478: PPUSH
3479: LD_INT 49
3481: PPUSH
3482: CALL_OW 111
// end ;
3486: GO 3447
3488: POP
3489: POP
// if mech then
3490: LD_VAR 0 8
3494: IFFALSE 3708
// for i in mech do
3496: LD_ADDR_VAR 0 1
3500: PUSH
3501: LD_VAR 0 8
3505: PUSH
3506: FOR_IN
3507: IFFALSE 3706
// begin hasVehicle := IsInUnit ( i ) ;
3509: LD_ADDR_VAR 0 10
3513: PUSH
3514: LD_VAR 0 1
3518: PPUSH
3519: CALL_OW 310
3523: ST_TO_ADDR
// if enemyInBase then
3524: LD_VAR 0 9
3528: IFFALSE 3624
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
3530: LD_VAR 0 10
3534: PUSH
3535: LD_VAR 0 10
3539: PPUSH
3540: CALL_OW 256
3544: PUSH
3545: LD_INT 500
3547: GREATER
3548: AND
3549: IFFALSE 3577
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
3551: LD_VAR 0 10
3555: PPUSH
3556: LD_VAR 0 9
3560: PPUSH
3561: LD_VAR 0 10
3565: PPUSH
3566: CALL_OW 74
3570: PPUSH
3571: CALL_OW 115
3575: GO 3622
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
3577: LD_VAR 0 10
3581: PPUSH
3582: LD_INT 86
3584: PPUSH
3585: LD_INT 49
3587: PPUSH
3588: CALL_OW 297
3592: PUSH
3593: LD_INT 8
3595: GREATER
3596: IFFALSE 3622
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
3598: LD_VAR 0 10
3602: PPUSH
3603: LD_INT 86
3605: PPUSH
3606: LD_INT 49
3608: PPUSH
3609: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
3613: LD_VAR 0 1
3617: PPUSH
3618: CALL 64516 0 1
// end end else
3622: GO 3704
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
3624: LD_VAR 0 1
3628: PPUSH
3629: LD_INT 86
3631: PPUSH
3632: LD_INT 49
3634: PPUSH
3635: CALL_OW 297
3639: PUSH
3640: LD_INT 8
3642: GREATER
3643: IFFALSE 3662
// ComMoveXY ( i , 86 , 49 ) else
3645: LD_VAR 0 1
3649: PPUSH
3650: LD_INT 86
3652: PPUSH
3653: LD_INT 49
3655: PPUSH
3656: CALL_OW 111
3660: GO 3704
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
3662: LD_VAR 0 10
3666: PUSH
3667: LD_VAR 0 10
3671: PPUSH
3672: CALL_OW 256
3676: PUSH
3677: LD_INT 1000
3679: LESS
3680: AND
3681: IFFALSE 3704
// begin SetFuel ( hasVehicle , 100 ) ;
3683: LD_VAR 0 10
3687: PPUSH
3688: LD_INT 100
3690: PPUSH
3691: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
3695: LD_VAR 0 1
3699: PPUSH
3700: CALL 64396 0 1
// end ; end ; end ;
3704: GO 3506
3706: POP
3707: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3708: LD_ADDR_VAR 0 4
3712: PUSH
3713: LD_INT 12
3715: PPUSH
3716: LD_INT 3
3718: PUSH
3719: LD_INT 24
3721: PUSH
3722: LD_INT 1000
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: PUSH
3733: LD_INT 21
3735: PUSH
3736: LD_INT 3
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: PPUSH
3747: CALL_OW 70
3751: ST_TO_ADDR
// if tmp and eng then
3752: LD_VAR 0 4
3756: PUSH
3757: LD_VAR 0 6
3761: AND
3762: IFFALSE 3868
// begin for i in eng do
3764: LD_ADDR_VAR 0 1
3768: PUSH
3769: LD_VAR 0 6
3773: PUSH
3774: FOR_IN
3775: IFFALSE 3866
// if IsInUnit ( i ) then
3777: LD_VAR 0 1
3781: PPUSH
3782: CALL_OW 310
3786: IFFALSE 3799
// ComExitBuilding ( i ) else
3788: LD_VAR 0 1
3792: PPUSH
3793: CALL_OW 122
3797: GO 3864
// if GetLives ( i ) = 1000 then
3799: LD_VAR 0 1
3803: PPUSH
3804: CALL_OW 256
3808: PUSH
3809: LD_INT 1000
3811: EQUAL
3812: IFFALSE 3834
// ComRepairBuilding ( i , tmp [ 1 ] ) else
3814: LD_VAR 0 1
3818: PPUSH
3819: LD_VAR 0 4
3823: PUSH
3824: LD_INT 1
3826: ARRAY
3827: PPUSH
3828: CALL_OW 130
3832: GO 3864
// if GetLives ( i ) < 700 then
3834: LD_VAR 0 1
3838: PPUSH
3839: CALL_OW 256
3843: PUSH
3844: LD_INT 700
3846: LESS
3847: IFFALSE 3864
// ComMoveXY ( i , 80 , 49 ) ;
3849: LD_VAR 0 1
3853: PPUSH
3854: LD_INT 80
3856: PPUSH
3857: LD_INT 49
3859: PPUSH
3860: CALL_OW 111
3864: GO 3774
3866: POP
3867: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
3868: LD_VAR 0 4
3872: NOT
3873: PUSH
3874: LD_VAR 0 6
3878: PPUSH
3879: LD_INT 3
3881: PUSH
3882: LD_INT 54
3884: PUSH
3885: EMPTY
3886: LIST
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PPUSH
3892: CALL_OW 72
3896: AND
3897: IFFALSE 3986
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
3899: LD_ADDR_VAR 0 1
3903: PUSH
3904: LD_VAR 0 6
3908: PPUSH
3909: LD_INT 3
3911: PUSH
3912: LD_INT 54
3914: PUSH
3915: EMPTY
3916: LIST
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PPUSH
3922: CALL_OW 72
3926: PUSH
3927: FOR_IN
3928: IFFALSE 3984
// if GetLives ( i ) < 1000 then
3930: LD_VAR 0 1
3934: PPUSH
3935: CALL_OW 256
3939: PUSH
3940: LD_INT 1000
3942: LESS
3943: IFFALSE 3962
// ComMoveXY ( i , 80 , 49 ) else
3945: LD_VAR 0 1
3949: PPUSH
3950: LD_INT 80
3952: PPUSH
3953: LD_INT 49
3955: PPUSH
3956: CALL_OW 111
3960: GO 3982
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
3962: LD_VAR 0 1
3966: PPUSH
3967: LD_INT 86
3969: PPUSH
3970: LD_INT 54
3972: PPUSH
3973: CALL_OW 428
3977: PPUSH
3978: CALL_OW 120
3982: GO 3927
3984: POP
3985: POP
// end ;
3986: PPOPN 10
3988: END
// export function PrepareOmarSquad ; var i , j , p ; begin
3989: LD_INT 0
3991: PPUSH
3992: PPUSH
3993: PPUSH
3994: PPUSH
// uc_side := 5 ;
3995: LD_ADDR_OWVAR 20
3999: PUSH
4000: LD_INT 5
4002: ST_TO_ADDR
// uc_nation := 2 ;
4003: LD_ADDR_OWVAR 21
4007: PUSH
4008: LD_INT 2
4010: ST_TO_ADDR
// omarSquad := [ ] ;
4011: LD_ADDR_EXP 48
4015: PUSH
4016: EMPTY
4017: ST_TO_ADDR
// for i := 1 to 4 do
4018: LD_ADDR_VAR 0 2
4022: PUSH
4023: DOUBLE
4024: LD_INT 1
4026: DEC
4027: ST_TO_ADDR
4028: LD_INT 4
4030: PUSH
4031: FOR_TO
4032: IFFALSE 4155
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
4034: LD_ADDR_VAR 0 3
4038: PUSH
4039: DOUBLE
4040: LD_INT 1
4042: DEC
4043: ST_TO_ADDR
4044: LD_INT 6
4046: PUSH
4047: LD_INT 2
4049: PUSH
4050: LD_INT 2
4052: PUSH
4053: LD_EXP 21
4057: PLUS
4058: PUSH
4059: LD_INT 2
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: PUSH
4068: LD_VAR 0 2
4072: ARRAY
4073: PUSH
4074: FOR_TO
4075: IFFALSE 4151
// begin PrepareHuman ( false , i , 5 ) ;
4077: LD_INT 0
4079: PPUSH
4080: LD_VAR 0 2
4084: PPUSH
4085: LD_INT 5
4087: PPUSH
4088: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
4092: LD_ADDR_EXP 48
4096: PUSH
4097: LD_EXP 48
4101: PPUSH
4102: CALL_OW 44
4106: PPUSH
4107: CALL 62694 0 2
4111: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
4112: LD_VAR 0 2
4116: PUSH
4117: LD_INT 1
4119: EQUAL
4120: PUSH
4121: LD_INT 50
4123: PPUSH
4124: CALL_OW 13
4128: AND
4129: IFFALSE 4149
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
4131: LD_EXP 48
4135: PUSH
4136: LD_EXP 48
4140: ARRAY
4141: PPUSH
4142: LD_INT 8
4144: PPUSH
4145: CALL_OW 336
// end ;
4149: GO 4074
4151: POP
4152: POP
// end ;
4153: GO 4031
4155: POP
4156: POP
// if HexInfo ( 340 , 205 ) then
4157: LD_INT 340
4159: PPUSH
4160: LD_INT 205
4162: PPUSH
4163: CALL_OW 428
4167: IFFALSE 4184
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
4169: LD_INT 340
4171: PPUSH
4172: LD_INT 205
4174: PPUSH
4175: CALL_OW 428
4179: PPUSH
4180: CALL_OW 64
// p := 0 ;
4184: LD_ADDR_VAR 0 4
4188: PUSH
4189: LD_INT 0
4191: ST_TO_ADDR
// for i in omarSquad do
4192: LD_ADDR_VAR 0 2
4196: PUSH
4197: LD_EXP 48
4201: PUSH
4202: FOR_IN
4203: IFFALSE 4404
// begin uc_direction := 4 ;
4205: LD_ADDR_OWVAR 24
4209: PUSH
4210: LD_INT 4
4212: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
4213: LD_VAR 0 2
4217: PPUSH
4218: CALL_OW 257
4222: PUSH
4223: LD_INT 3
4225: EQUAL
4226: PUSH
4227: LD_VAR 0 4
4231: PUSH
4232: LD_INT 2
4234: LESS
4235: AND
4236: IFFALSE 4365
// begin p := p + 1 ;
4238: LD_ADDR_VAR 0 4
4242: PUSH
4243: LD_VAR 0 4
4247: PUSH
4248: LD_INT 1
4250: PLUS
4251: ST_TO_ADDR
// uc_side := 5 ;
4252: LD_ADDR_OWVAR 20
4256: PUSH
4257: LD_INT 5
4259: ST_TO_ADDR
// if rand ( 0 , 1 ) then
4260: LD_INT 0
4262: PPUSH
4263: LD_INT 1
4265: PPUSH
4266: CALL_OW 12
4270: IFFALSE 4301
// begin uc_nation := 2 ;
4272: LD_ADDR_OWVAR 21
4276: PUSH
4277: LD_INT 2
4279: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
4280: LD_INT 13
4282: PPUSH
4283: LD_INT 1
4285: PPUSH
4286: LD_INT 1
4288: PPUSH
4289: LD_INT 27
4291: PPUSH
4292: LD_INT 88
4294: PPUSH
4295: CALL 30310 0 5
// end else
4299: GO 4328
// begin uc_nation := 3 ;
4301: LD_ADDR_OWVAR 21
4305: PUSH
4306: LD_INT 3
4308: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
4309: LD_INT 22
4311: PPUSH
4312: LD_INT 1
4314: PPUSH
4315: LD_INT 1
4317: PPUSH
4318: LD_INT 45
4320: PPUSH
4321: LD_INT 88
4323: PPUSH
4324: CALL 30310 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
4328: CALL_OW 45
4332: PPUSH
4333: LD_INT 13
4335: PPUSH
4336: LD_INT 0
4338: PPUSH
4339: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
4343: LD_VAR 0 2
4347: PPUSH
4348: LD_INT 340
4350: PPUSH
4351: LD_INT 205
4353: PPUSH
4354: CALL_OW 428
4358: PPUSH
4359: CALL_OW 52
// end else
4363: GO 4380
// PlaceUnitArea ( i , southSpawn , false ) ;
4365: LD_VAR 0 2
4369: PPUSH
4370: LD_INT 13
4372: PPUSH
4373: LD_INT 0
4375: PPUSH
4376: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
4380: LD_VAR 0 2
4384: PPUSH
4385: LD_INT 333
4387: PPUSH
4388: LD_INT 210
4390: PPUSH
4391: CALL_OW 111
// wait ( 0 0$2 ) ;
4395: LD_INT 70
4397: PPUSH
4398: CALL_OW 67
// end ;
4402: GO 4202
4404: POP
4405: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
4406: LD_EXP 40
4410: PPUSH
4411: LD_INT 340
4413: PPUSH
4414: LD_INT 205
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
4424: LD_EXP 40
4428: PPUSH
4429: LD_INT 333
4431: PPUSH
4432: LD_INT 206
4434: PPUSH
4435: CALL_OW 111
// wait ( 0 0$2 ) ;
4439: LD_INT 70
4441: PPUSH
4442: CALL_OW 67
// ComHold ( omarSquad ) ;
4446: LD_EXP 48
4450: PPUSH
4451: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
4455: LD_EXP 40
4459: PUSH
4460: LD_EXP 48
4464: PPUSH
4465: LD_INT 2
4467: PUSH
4468: LD_INT 25
4470: PUSH
4471: LD_INT 1
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: PUSH
4478: LD_INT 25
4480: PUSH
4481: LD_INT 8
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: LIST
4492: PPUSH
4493: CALL_OW 72
4497: UNION
4498: PUSH
4499: LD_INT 22
4501: PUSH
4502: LD_INT 5
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: PUSH
4509: LD_INT 21
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PPUSH
4523: CALL_OW 69
4527: UNION
4528: PPUSH
4529: LD_INT 315
4531: PPUSH
4532: LD_INT 214
4534: PPUSH
4535: CALL_OW 114
// wait ( 0 0$22 ) ;
4539: LD_INT 770
4541: PPUSH
4542: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
4546: LD_EXP 48
4550: PUSH
4551: LD_EXP 40
4555: UNION
4556: PPUSH
4557: LD_INT 329
4559: PPUSH
4560: LD_INT 231
4562: PPUSH
4563: CALL_OW 114
// end ;
4567: LD_VAR 0 1
4571: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4572: LD_EXP 10
4576: IFFALSE 5659
4578: GO 4580
4580: DISABLE
4581: LD_INT 0
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
// begin enable ;
4594: ENABLE
// if not omarSquad then
4595: LD_EXP 48
4599: NOT
4600: IFFALSE 4604
// exit ;
4602: GO 5659
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
4604: LD_ADDR_VAR 0 10
4608: PUSH
4609: LD_INT 14
4611: PPUSH
4612: LD_INT 81
4614: PUSH
4615: LD_INT 5
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PPUSH
4622: CALL_OW 70
4626: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
4627: LD_ADDR_VAR 0 6
4631: PUSH
4632: LD_EXP 48
4636: PPUSH
4637: LD_INT 2
4639: PUSH
4640: LD_INT 25
4642: PUSH
4643: LD_INT 1
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: LD_INT 25
4652: PUSH
4653: LD_INT 8
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: LIST
4664: PPUSH
4665: CALL_OW 72
4669: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
4670: LD_ADDR_VAR 0 7
4674: PUSH
4675: LD_EXP 48
4679: PPUSH
4680: LD_INT 25
4682: PUSH
4683: LD_INT 2
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: PPUSH
4690: CALL_OW 72
4694: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
4695: LD_ADDR_VAR 0 9
4699: PUSH
4700: LD_EXP 48
4704: PPUSH
4705: LD_INT 25
4707: PUSH
4708: LD_INT 3
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PPUSH
4715: CALL_OW 72
4719: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
4720: LD_ADDR_VAR 0 8
4724: PUSH
4725: LD_EXP 48
4729: PPUSH
4730: LD_INT 25
4732: PUSH
4733: LD_INT 4
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PPUSH
4740: CALL_OW 72
4744: ST_TO_ADDR
// if sol then
4745: LD_VAR 0 6
4749: IFFALSE 5113
// for i in sol do
4751: LD_ADDR_VAR 0 1
4755: PUSH
4756: LD_VAR 0 6
4760: PUSH
4761: FOR_IN
4762: IFFALSE 5111
// if not HasTask ( i ) then
4764: LD_VAR 0 1
4768: PPUSH
4769: CALL_OW 314
4773: NOT
4774: IFFALSE 5109
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
4776: LD_VAR 0 1
4780: PPUSH
4781: CALL_OW 310
4785: NOT
4786: PUSH
4787: LD_VAR 0 1
4791: PPUSH
4792: CALL_OW 256
4796: PUSH
4797: LD_INT 500
4799: LESS
4800: AND
4801: PUSH
4802: LD_VAR 0 1
4806: PPUSH
4807: LD_INT 333
4809: PPUSH
4810: LD_INT 234
4812: PPUSH
4813: CALL_OW 297
4817: PUSH
4818: LD_INT 6
4820: GREATER
4821: AND
4822: IFFALSE 4841
// begin ComMoveXY ( i , 333 , 234 ) ;
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 333
4831: PPUSH
4832: LD_INT 234
4834: PPUSH
4835: CALL_OW 111
// continue ;
4839: GO 4761
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4841: LD_ADDR_VAR 0 5
4845: PUSH
4846: LD_INT 22
4848: PUSH
4849: LD_INT 5
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 58
4858: PUSH
4859: EMPTY
4860: LIST
4861: PUSH
4862: LD_INT 50
4864: PUSH
4865: EMPTY
4866: LIST
4867: PUSH
4868: LD_INT 2
4870: PUSH
4871: LD_INT 30
4873: PUSH
4874: LD_INT 32
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 30
4883: PUSH
4884: LD_INT 31
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: LIST
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 69
4906: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
4907: LD_VAR 0 5
4911: PUSH
4912: LD_VAR 0 1
4916: PPUSH
4917: CALL_OW 310
4921: PPUSH
4922: CALL_OW 266
4926: PUSH
4927: LD_INT 31
4929: NONEQUAL
4930: AND
4931: IFFALSE 5013
// begin for j in tmp do
4933: LD_ADDR_VAR 0 2
4937: PUSH
4938: LD_VAR 0 5
4942: PUSH
4943: FOR_IN
4944: IFFALSE 5009
// if GetTag ( j ) <> 1 then
4946: LD_VAR 0 2
4950: PPUSH
4951: CALL_OW 110
4955: PUSH
4956: LD_INT 1
4958: NONEQUAL
4959: IFFALSE 5007
// begin SetTag ( j , 1 ) ;
4961: LD_VAR 0 2
4965: PPUSH
4966: LD_INT 1
4968: PPUSH
4969: CALL_OW 109
// if IsInUnit ( i ) then
4973: LD_VAR 0 1
4977: PPUSH
4978: CALL_OW 310
4982: IFFALSE 4993
// ComExit ( i ) ;
4984: LD_VAR 0 1
4988: PPUSH
4989: CALL 63092 0 1
// AddComEnterUnit ( i , j ) ;
4993: LD_VAR 0 1
4997: PPUSH
4998: LD_VAR 0 2
5002: PPUSH
5003: CALL_OW 180
// end ;
5007: GO 4943
5009: POP
5010: POP
// end else
5011: GO 5109
// if not IsInUnit ( i ) then
5013: LD_VAR 0 1
5017: PPUSH
5018: CALL_OW 310
5022: NOT
5023: IFFALSE 5109
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
5025: LD_ADDR_VAR 0 5
5029: PUSH
5030: LD_INT 22
5032: PUSH
5033: LD_INT 5
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 50
5042: PUSH
5043: EMPTY
5044: LIST
5045: PUSH
5046: LD_INT 30
5048: PUSH
5049: LD_INT 4
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: LIST
5060: PPUSH
5061: CALL_OW 69
5065: ST_TO_ADDR
// if tmp then
5066: LD_VAR 0 5
5070: IFFALSE 5109
// if UnitsInside ( tmp [ 1 ] ) < 6 then
5072: LD_VAR 0 5
5076: PUSH
5077: LD_INT 1
5079: ARRAY
5080: PPUSH
5081: CALL_OW 313
5085: PUSH
5086: LD_INT 6
5088: LESS
5089: IFFALSE 5109
// ComEnterUnit ( i , tmp [ 1 ] ) ;
5091: LD_VAR 0 1
5095: PPUSH
5096: LD_VAR 0 5
5100: PUSH
5101: LD_INT 1
5103: ARRAY
5104: PPUSH
5105: CALL_OW 120
// end ; end ;
5109: GO 4761
5111: POP
5112: POP
// if sci then
5113: LD_VAR 0 8
5117: IFFALSE 5172
// for i in sci do
5119: LD_ADDR_VAR 0 1
5123: PUSH
5124: LD_VAR 0 8
5128: PUSH
5129: FOR_IN
5130: IFFALSE 5170
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
5132: LD_VAR 0 1
5136: PPUSH
5137: LD_INT 333
5139: PPUSH
5140: LD_INT 234
5142: PPUSH
5143: CALL_OW 297
5147: PUSH
5148: LD_INT 9
5150: GREATER
5151: IFFALSE 5168
// ComMoveXY ( i , 333 , 234 ) ;
5153: LD_VAR 0 1
5157: PPUSH
5158: LD_INT 333
5160: PPUSH
5161: LD_INT 234
5163: PPUSH
5164: CALL_OW 111
// end ;
5168: GO 5129
5170: POP
5171: POP
// if mech then
5172: LD_VAR 0 9
5176: IFFALSE 5381
// for i in mech do
5178: LD_ADDR_VAR 0 1
5182: PUSH
5183: LD_VAR 0 9
5187: PUSH
5188: FOR_IN
5189: IFFALSE 5379
// begin hasVehicle := IsInUnit ( i ) ;
5191: LD_ADDR_VAR 0 11
5195: PUSH
5196: LD_VAR 0 1
5200: PPUSH
5201: CALL_OW 310
5205: ST_TO_ADDR
// if enemyInBase then
5206: LD_VAR 0 10
5210: IFFALSE 5297
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
5212: LD_VAR 0 11
5216: PUSH
5217: LD_VAR 0 11
5221: PPUSH
5222: CALL_OW 256
5226: PUSH
5227: LD_INT 500
5229: GREATER
5230: AND
5231: IFFALSE 5259
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
5233: LD_VAR 0 11
5237: PPUSH
5238: LD_VAR 0 10
5242: PPUSH
5243: LD_VAR 0 11
5247: PPUSH
5248: CALL_OW 74
5252: PPUSH
5253: CALL_OW 115
5257: GO 5295
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
5259: LD_VAR 0 11
5263: PPUSH
5264: LD_INT 333
5266: PPUSH
5267: LD_INT 234
5269: PPUSH
5270: CALL_OW 297
5274: PUSH
5275: LD_INT 6
5277: GREATER
5278: IFFALSE 5295
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
5280: LD_VAR 0 11
5284: PPUSH
5285: LD_INT 333
5287: PPUSH
5288: LD_INT 234
5290: PPUSH
5291: CALL_OW 111
// end else
5295: GO 5377
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
5297: LD_VAR 0 1
5301: PPUSH
5302: LD_INT 333
5304: PPUSH
5305: LD_INT 234
5307: PPUSH
5308: CALL_OW 297
5312: PUSH
5313: LD_INT 6
5315: GREATER
5316: IFFALSE 5335
// ComMoveXY ( i , 333 , 234 ) else
5318: LD_VAR 0 1
5322: PPUSH
5323: LD_INT 333
5325: PPUSH
5326: LD_INT 234
5328: PPUSH
5329: CALL_OW 111
5333: GO 5377
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
5335: LD_VAR 0 11
5339: PUSH
5340: LD_VAR 0 11
5344: PPUSH
5345: CALL_OW 256
5349: PUSH
5350: LD_INT 1000
5352: LESS
5353: AND
5354: IFFALSE 5377
// begin SetFuel ( hasVehicle , 100 ) ;
5356: LD_VAR 0 11
5360: PPUSH
5361: LD_INT 100
5363: PPUSH
5364: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
5368: LD_VAR 0 1
5372: PPUSH
5373: CALL 64396 0 1
// end ; end ; end ;
5377: GO 5188
5379: POP
5380: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
5381: LD_ADDR_VAR 0 5
5385: PUSH
5386: LD_INT 14
5388: PPUSH
5389: LD_INT 3
5391: PUSH
5392: LD_INT 24
5394: PUSH
5395: LD_INT 1000
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PUSH
5406: LD_INT 21
5408: PUSH
5409: LD_INT 3
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: PPUSH
5420: CALL_OW 70
5424: ST_TO_ADDR
// if tmp and eng then
5425: LD_VAR 0 5
5429: PUSH
5430: LD_VAR 0 7
5434: AND
5435: IFFALSE 5541
// begin for i in eng do
5437: LD_ADDR_VAR 0 1
5441: PUSH
5442: LD_VAR 0 7
5446: PUSH
5447: FOR_IN
5448: IFFALSE 5539
// if IsInUnit ( i ) then
5450: LD_VAR 0 1
5454: PPUSH
5455: CALL_OW 310
5459: IFFALSE 5472
// ComExitBuilding ( i ) else
5461: LD_VAR 0 1
5465: PPUSH
5466: CALL_OW 122
5470: GO 5537
// if GetLives ( i ) = 1000 then
5472: LD_VAR 0 1
5476: PPUSH
5477: CALL_OW 256
5481: PUSH
5482: LD_INT 1000
5484: EQUAL
5485: IFFALSE 5507
// ComRepairBuilding ( i , tmp [ 1 ] ) else
5487: LD_VAR 0 1
5491: PPUSH
5492: LD_VAR 0 5
5496: PUSH
5497: LD_INT 1
5499: ARRAY
5500: PPUSH
5501: CALL_OW 130
5505: GO 5537
// if GetLives ( i ) < 700 then
5507: LD_VAR 0 1
5511: PPUSH
5512: CALL_OW 256
5516: PUSH
5517: LD_INT 700
5519: LESS
5520: IFFALSE 5537
// ComMoveXY ( i , 333 , 234 ) ;
5522: LD_VAR 0 1
5526: PPUSH
5527: LD_INT 333
5529: PPUSH
5530: LD_INT 234
5532: PPUSH
5533: CALL_OW 111
5537: GO 5447
5539: POP
5540: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5541: LD_VAR 0 5
5545: NOT
5546: PUSH
5547: LD_VAR 0 7
5551: PPUSH
5552: LD_INT 3
5554: PUSH
5555: LD_INT 54
5557: PUSH
5558: EMPTY
5559: LIST
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PPUSH
5565: CALL_OW 72
5569: AND
5570: IFFALSE 5659
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5572: LD_ADDR_VAR 0 1
5576: PUSH
5577: LD_VAR 0 7
5581: PPUSH
5582: LD_INT 3
5584: PUSH
5585: LD_INT 54
5587: PUSH
5588: EMPTY
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PPUSH
5595: CALL_OW 72
5599: PUSH
5600: FOR_IN
5601: IFFALSE 5657
// if GetLives ( i ) < 1000 then
5603: LD_VAR 0 1
5607: PPUSH
5608: CALL_OW 256
5612: PUSH
5613: LD_INT 1000
5615: LESS
5616: IFFALSE 5635
// ComMoveXY ( i , 333 , 234 ) else
5618: LD_VAR 0 1
5622: PPUSH
5623: LD_INT 333
5625: PPUSH
5626: LD_INT 234
5628: PPUSH
5629: CALL_OW 111
5633: GO 5655
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
5635: LD_VAR 0 1
5639: PPUSH
5640: LD_INT 341
5642: PPUSH
5643: LD_INT 232
5645: PPUSH
5646: CALL_OW 428
5650: PPUSH
5651: CALL_OW 120
5655: GO 5600
5657: POP
5658: POP
// end ;
5659: PPOPN 11
5661: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
5662: LD_EXP 40
5666: PPUSH
5667: CALL_OW 256
5671: PUSH
5672: LD_INT 1000
5674: LESS
5675: IFFALSE 5693
5677: GO 5679
5679: DISABLE
// begin enable ;
5680: ENABLE
// SetLives ( Omar , 1000 ) ;
5681: LD_EXP 40
5685: PPUSH
5686: LD_INT 1000
5688: PPUSH
5689: CALL_OW 234
// end ;
5693: END
// every 0 0$1 trigger omarAttack do var i , nearestPoint ;
5694: LD_EXP 23
5698: IFFALSE 6574
5700: GO 5702
5702: DISABLE
5703: LD_INT 0
5705: PPUSH
5706: PPUSH
// begin wait ( 0 0$25 ) ;
5707: LD_INT 875
5709: PPUSH
5710: CALL_OW 67
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
5714: LD_EXP 48
5718: PPUSH
5719: LD_INT 2
5721: PUSH
5722: LD_INT 25
5724: PUSH
5725: LD_INT 1
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: PUSH
5732: LD_INT 25
5734: PUSH
5735: LD_INT 8
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: LIST
5746: PPUSH
5747: CALL_OW 72
5751: PPUSH
5752: CALL_OW 122
// wait ( 0 0$3 ) ;
5756: LD_INT 105
5758: PPUSH
5759: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , 225 , 223 ) ;
5763: LD_EXP 48
5767: PUSH
5768: LD_EXP 40
5772: UNION
5773: PPUSH
5774: LD_INT 225
5776: PPUSH
5777: LD_INT 223
5779: PPUSH
5780: CALL_OW 174
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_type , unit_vehicle ] ] ] ) , 167 , 231 ) ;
5784: LD_INT 22
5786: PUSH
5787: LD_INT 5
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PUSH
5794: LD_INT 2
5796: PUSH
5797: LD_INT 25
5799: PUSH
5800: LD_INT 1
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: PUSH
5807: LD_INT 25
5809: PUSH
5810: LD_INT 8
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: PUSH
5817: LD_INT 21
5819: PUSH
5820: LD_INT 2
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PPUSH
5837: CALL_OW 69
5841: PPUSH
5842: LD_INT 167
5844: PPUSH
5845: LD_INT 231
5847: PPUSH
5848: CALL_OW 174
// AddComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 222 , 229 ) ;
5852: LD_EXP 48
5856: PPUSH
5857: LD_INT 25
5859: PUSH
5860: LD_INT 4
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PPUSH
5867: CALL_OW 72
5871: PPUSH
5872: LD_INT 222
5874: PPUSH
5875: LD_INT 229
5877: PPUSH
5878: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5882: LD_INT 35
5884: PPUSH
5885: CALL_OW 67
// for i in omarSquad union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_EXP 48
5898: PUSH
5899: LD_INT 22
5901: PUSH
5902: LD_INT 5
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: PUSH
5909: LD_INT 21
5911: PUSH
5912: LD_INT 2
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PPUSH
5923: CALL_OW 69
5927: UNION
5928: PUSH
5929: FOR_IN
5930: IFFALSE 6565
// begin if IsDead ( i ) then
5932: LD_VAR 0 1
5936: PPUSH
5937: CALL_OW 301
5941: IFFALSE 5961
// begin omarSquad := omarSquad diff i ;
5943: LD_ADDR_EXP 48
5947: PUSH
5948: LD_EXP 48
5952: PUSH
5953: LD_VAR 0 1
5957: DIFF
5958: ST_TO_ADDR
// continue ;
5959: GO 5929
// end ; if GetClass ( i ) in [ 1 , 8 ] then
5961: LD_VAR 0 1
5965: PPUSH
5966: CALL_OW 257
5970: PUSH
5971: LD_INT 1
5973: PUSH
5974: LD_INT 8
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: IN
5981: IFFALSE 6175
// begin if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
5983: LD_VAR 0 1
5987: PPUSH
5988: CALL_OW 256
5992: PUSH
5993: LD_INT 700
5995: LESS
5996: PUSH
5997: LD_VAR 0 1
6001: PPUSH
6002: CALL_OW 110
6006: PUSH
6007: LD_INT 0
6009: EQUAL
6010: AND
6011: IFFALSE 6040
// begin SetTag ( i , 1 ) ;
6013: LD_VAR 0 1
6017: PPUSH
6018: LD_INT 1
6020: PPUSH
6021: CALL_OW 109
// ComMoveXY ( i , 222 , 229 ) ;
6025: LD_VAR 0 1
6029: PPUSH
6030: LD_INT 222
6032: PPUSH
6033: LD_INT 229
6035: PPUSH
6036: CALL_OW 111
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
6040: LD_VAR 0 1
6044: PPUSH
6045: CALL_OW 256
6049: PUSH
6050: LD_INT 1000
6052: EQUAL
6053: PUSH
6054: LD_VAR 0 1
6058: PPUSH
6059: CALL_OW 110
6063: PUSH
6064: LD_INT 1
6066: EQUAL
6067: AND
6068: IFFALSE 6082
// SetTag ( i , 0 ) ;
6070: LD_VAR 0 1
6074: PPUSH
6075: LD_INT 0
6077: PPUSH
6078: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and not HasTask ( i ) then
6082: LD_VAR 0 1
6086: PPUSH
6087: CALL_OW 110
6091: PUSH
6092: LD_INT 0
6094: EQUAL
6095: PUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 256
6105: PUSH
6106: LD_INT 700
6108: GREATEREQUAL
6109: AND
6110: PUSH
6111: LD_VAR 0 1
6115: PPUSH
6116: CALL_OW 314
6120: NOT
6121: AND
6122: IFFALSE 6175
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6124: LD_INT 18
6126: PPUSH
6127: LD_INT 22
6129: PUSH
6130: LD_INT 3
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PPUSH
6137: CALL_OW 70
6141: IFFALSE 6160
// ComAgressiveMove ( i , 167 , 231 ) else
6143: LD_VAR 0 1
6147: PPUSH
6148: LD_INT 167
6150: PPUSH
6151: LD_INT 231
6153: PPUSH
6154: CALL_OW 114
6158: GO 6175
// ComAgressiveMove ( i , 106 , 153 ) ;
6160: LD_VAR 0 1
6164: PPUSH
6165: LD_INT 106
6167: PPUSH
6168: LD_INT 153
6170: PPUSH
6171: CALL_OW 114
// end ; if GetType ( i ) = unit_vehicle then
6175: LD_VAR 0 1
6179: PPUSH
6180: CALL_OW 247
6184: PUSH
6185: LD_INT 2
6187: EQUAL
6188: IFFALSE 6563
// begin nearestPoint := [ 219 , 219 ] ;
6190: LD_ADDR_VAR 0 2
6194: PUSH
6195: LD_INT 219
6197: PUSH
6198: LD_INT 219
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: ST_TO_ADDR
// if GetDistUnitXY ( i , 156 , 202 ) < GetDistUnitXY ( i , 219 , 219 ) then
6205: LD_VAR 0 1
6209: PPUSH
6210: LD_INT 156
6212: PPUSH
6213: LD_INT 202
6215: PPUSH
6216: CALL_OW 297
6220: PUSH
6221: LD_VAR 0 1
6225: PPUSH
6226: LD_INT 219
6228: PPUSH
6229: LD_INT 219
6231: PPUSH
6232: CALL_OW 297
6236: LESS
6237: IFFALSE 6254
// nearestPoint := [ 156 , 202 ] ;
6239: LD_ADDR_VAR 0 2
6243: PUSH
6244: LD_INT 156
6246: PUSH
6247: LD_INT 202
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: ST_TO_ADDR
// if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
6254: LD_VAR 0 1
6258: PPUSH
6259: CALL_OW 256
6263: PUSH
6264: LD_INT 700
6266: LESS
6267: PUSH
6268: LD_VAR 0 1
6272: PPUSH
6273: CALL_OW 110
6277: PUSH
6278: LD_INT 0
6280: EQUAL
6281: AND
6282: IFFALSE 6323
// begin SetTag ( i , 1 ) ;
6284: LD_VAR 0 1
6288: PPUSH
6289: LD_INT 1
6291: PPUSH
6292: CALL_OW 109
// ComMoveXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) ;
6296: LD_VAR 0 1
6300: PPUSH
6301: LD_VAR 0 2
6305: PUSH
6306: LD_INT 1
6308: ARRAY
6309: PPUSH
6310: LD_VAR 0 2
6314: PUSH
6315: LD_INT 2
6317: ARRAY
6318: PPUSH
6319: CALL_OW 111
// end ; if GetLives ( i ) < 700 and GetTag ( i ) = 1 and IsDrivenBy ( i ) and GetDistUnitXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) < 10 then
6323: LD_VAR 0 1
6327: PPUSH
6328: CALL_OW 256
6332: PUSH
6333: LD_INT 700
6335: LESS
6336: PUSH
6337: LD_VAR 0 1
6341: PPUSH
6342: CALL_OW 110
6346: PUSH
6347: LD_INT 1
6349: EQUAL
6350: AND
6351: PUSH
6352: LD_VAR 0 1
6356: PPUSH
6357: CALL_OW 311
6361: AND
6362: PUSH
6363: LD_VAR 0 1
6367: PPUSH
6368: LD_VAR 0 2
6372: PUSH
6373: LD_INT 1
6375: ARRAY
6376: PPUSH
6377: LD_VAR 0 2
6381: PUSH
6382: LD_INT 2
6384: ARRAY
6385: PPUSH
6386: CALL_OW 297
6390: PUSH
6391: LD_INT 10
6393: LESS
6394: AND
6395: IFFALSE 6406
// ComRepairVehicleAndReturn ( i ) ;
6397: LD_VAR 0 1
6401: PPUSH
6402: CALL 64396 0 1
// if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
6406: LD_VAR 0 1
6410: PPUSH
6411: CALL_OW 256
6415: PUSH
6416: LD_INT 1000
6418: EQUAL
6419: PUSH
6420: LD_VAR 0 1
6424: PPUSH
6425: CALL_OW 110
6429: PUSH
6430: LD_INT 1
6432: EQUAL
6433: AND
6434: PUSH
6435: LD_VAR 0 1
6439: PPUSH
6440: CALL_OW 311
6444: AND
6445: IFFALSE 6459
// SetTag ( i , 0 ) ;
6447: LD_VAR 0 1
6451: PPUSH
6452: LD_INT 0
6454: PPUSH
6455: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and IsDrivenBy ( i ) and not HasTask ( i ) then
6459: LD_VAR 0 1
6463: PPUSH
6464: CALL_OW 110
6468: PUSH
6469: LD_INT 0
6471: EQUAL
6472: PUSH
6473: LD_VAR 0 1
6477: PPUSH
6478: CALL_OW 256
6482: PUSH
6483: LD_INT 700
6485: GREATEREQUAL
6486: AND
6487: PUSH
6488: LD_VAR 0 1
6492: PPUSH
6493: CALL_OW 311
6497: AND
6498: PUSH
6499: LD_VAR 0 1
6503: PPUSH
6504: CALL_OW 314
6508: NOT
6509: AND
6510: IFFALSE 6563
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6512: LD_INT 18
6514: PPUSH
6515: LD_INT 22
6517: PUSH
6518: LD_INT 3
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PPUSH
6525: CALL_OW 70
6529: IFFALSE 6548
// ComAgressiveMove ( i , 167 , 231 ) else
6531: LD_VAR 0 1
6535: PPUSH
6536: LD_INT 167
6538: PPUSH
6539: LD_INT 231
6541: PPUSH
6542: CALL_OW 114
6546: GO 6563
// ComAgressiveMove ( i , 106 , 153 ) ;
6548: LD_VAR 0 1
6552: PPUSH
6553: LD_INT 106
6555: PPUSH
6556: LD_INT 153
6558: PPUSH
6559: CALL_OW 114
// end ; end ;
6563: GO 5929
6565: POP
6566: POP
// until not omarSquad ;
6567: LD_EXP 48
6571: NOT
6572: IFFALSE 5882
// end ; end_of_file
6574: PPOPN 2
6576: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
6577: LD_INT 0
6579: PPUSH
// uc_side := side ;
6580: LD_ADDR_OWVAR 20
6584: PUSH
6585: LD_VAR 0 1
6589: ST_TO_ADDR
// uc_nation := nation ;
6590: LD_ADDR_OWVAR 21
6594: PUSH
6595: LD_VAR 0 2
6599: ST_TO_ADDR
// vc_chassis := chassis ;
6600: LD_ADDR_OWVAR 37
6604: PUSH
6605: LD_VAR 0 3
6609: ST_TO_ADDR
// vc_engine := engine ;
6610: LD_ADDR_OWVAR 39
6614: PUSH
6615: LD_VAR 0 4
6619: ST_TO_ADDR
// vc_control := control ;
6620: LD_ADDR_OWVAR 38
6624: PUSH
6625: LD_VAR 0 5
6629: ST_TO_ADDR
// vc_weapon := weapon ;
6630: LD_ADDR_OWVAR 40
6634: PUSH
6635: LD_VAR 0 6
6639: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6640: LD_ADDR_OWVAR 41
6644: PUSH
6645: LD_VAR 0 7
6649: ST_TO_ADDR
// result := CreateVehicle ;
6650: LD_ADDR_VAR 0 8
6654: PUSH
6655: CALL_OW 45
6659: ST_TO_ADDR
// end ;
6660: LD_VAR 0 8
6664: RET
// export function SayX ( units , ident ) ; var i ; begin
6665: LD_INT 0
6667: PPUSH
6668: PPUSH
// result := false ;
6669: LD_ADDR_VAR 0 3
6673: PUSH
6674: LD_INT 0
6676: ST_TO_ADDR
// if not units then
6677: LD_VAR 0 1
6681: NOT
6682: IFFALSE 6686
// exit ;
6684: GO 6740
// for i in units do
6686: LD_ADDR_VAR 0 4
6690: PUSH
6691: LD_VAR 0 1
6695: PUSH
6696: FOR_IN
6697: IFFALSE 6738
// if IsOk ( i ) then
6699: LD_VAR 0 4
6703: PPUSH
6704: CALL_OW 302
6708: IFFALSE 6736
// begin Say ( i , ident ) ;
6710: LD_VAR 0 4
6714: PPUSH
6715: LD_VAR 0 2
6719: PPUSH
6720: CALL_OW 88
// result := i ;
6724: LD_ADDR_VAR 0 3
6728: PUSH
6729: LD_VAR 0 4
6733: ST_TO_ADDR
// break ;
6734: GO 6738
// end ;
6736: GO 6696
6738: POP
6739: POP
// end ;
6740: LD_VAR 0 3
6744: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
6745: LD_INT 0
6747: PPUSH
6748: PPUSH
// InitUc ;
6749: CALL_OW 18
// InitHc ;
6753: CALL_OW 19
// uc_side := 0 ;
6757: LD_ADDR_OWVAR 20
6761: PUSH
6762: LD_INT 0
6764: ST_TO_ADDR
// uc_nation := 0 ;
6765: LD_ADDR_OWVAR 21
6769: PUSH
6770: LD_INT 0
6772: ST_TO_ADDR
// for i = 1 to amount do
6773: LD_ADDR_VAR 0 4
6777: PUSH
6778: DOUBLE
6779: LD_INT 1
6781: DEC
6782: ST_TO_ADDR
6783: LD_VAR 0 2
6787: PUSH
6788: FOR_TO
6789: IFFALSE 6871
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
6791: LD_ADDR_OWVAR 29
6795: PUSH
6796: LD_INT 9
6798: PPUSH
6799: LD_INT 12
6801: PPUSH
6802: CALL_OW 12
6806: PUSH
6807: LD_INT 9
6809: PPUSH
6810: LD_INT 12
6812: PPUSH
6813: CALL_OW 12
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
6822: LD_ADDR_OWVAR 35
6826: PUSH
6827: LD_INT 1
6829: NEG
6830: PPUSH
6831: LD_INT 1
6833: PPUSH
6834: CALL_OW 12
6838: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
6839: LD_INT 0
6841: PPUSH
6842: LD_INT 12
6844: PPUSH
6845: LD_INT 1
6847: PPUSH
6848: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
6852: CALL_OW 44
6856: PPUSH
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_INT 0
6864: PPUSH
6865: CALL_OW 49
// end ;
6869: GO 6788
6871: POP
6872: POP
// InitHc ;
6873: CALL_OW 19
// end ;
6877: LD_VAR 0 3
6881: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
6882: LD_INT 0
6884: PPUSH
6885: PPUSH
// uc_side := 0 ;
6886: LD_ADDR_OWVAR 20
6890: PUSH
6891: LD_INT 0
6893: ST_TO_ADDR
// uc_nation := 0 ;
6894: LD_ADDR_OWVAR 21
6898: PUSH
6899: LD_INT 0
6901: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
6902: LD_INT 7
6904: PPUSH
6905: LD_INT 6
6907: PUSH
6908: LD_INT 5
6910: PUSH
6911: LD_INT 4
6913: PUSH
6914: LD_INT 3
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: PUSH
6923: LD_OWVAR 67
6927: ARRAY
6928: PPUSH
6929: CALL 6745 0 2
// for i = 1 to 2 do
6933: LD_ADDR_VAR 0 4
6937: PUSH
6938: DOUBLE
6939: LD_INT 1
6941: DEC
6942: ST_TO_ADDR
6943: LD_INT 2
6945: PUSH
6946: FOR_TO
6947: IFFALSE 6984
// begin vc_chassis := class_mastodont ;
6949: LD_ADDR_OWVAR 37
6953: PUSH
6954: LD_INT 31
6956: ST_TO_ADDR
// vc_control := control_rider ;
6957: LD_ADDR_OWVAR 38
6961: PUSH
6962: LD_INT 4
6964: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
6965: CALL_OW 45
6969: PPUSH
6970: LD_VAR 0 1
6974: PPUSH
6975: LD_INT 0
6977: PPUSH
6978: CALL 61611 0 3
// end ;
6982: GO 6946
6984: POP
6985: POP
// for i := 1 to 4 do
6986: LD_ADDR_VAR 0 4
6990: PUSH
6991: DOUBLE
6992: LD_INT 1
6994: DEC
6995: ST_TO_ADDR
6996: LD_INT 4
6998: PUSH
6999: FOR_TO
7000: IFFALSE 7037
// begin hc_class := class_horse ;
7002: LD_ADDR_OWVAR 28
7006: PUSH
7007: LD_INT 21
7009: ST_TO_ADDR
// hc_gallery :=  ;
7010: LD_ADDR_OWVAR 33
7014: PUSH
7015: LD_STRING 
7017: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7018: CALL_OW 44
7022: PPUSH
7023: LD_VAR 0 1
7027: PPUSH
7028: LD_INT 0
7030: PPUSH
7031: CALL_OW 49
// end ;
7035: GO 6999
7037: POP
7038: POP
// for i = 1 to 5 do
7039: LD_ADDR_VAR 0 4
7043: PUSH
7044: DOUBLE
7045: LD_INT 1
7047: DEC
7048: ST_TO_ADDR
7049: LD_INT 5
7051: PUSH
7052: FOR_TO
7053: IFFALSE 7107
// begin hc_class = class_tiger ;
7055: LD_ADDR_OWVAR 28
7059: PUSH
7060: LD_INT 14
7062: ST_TO_ADDR
// hc_gallery =  ;
7063: LD_ADDR_OWVAR 33
7067: PUSH
7068: LD_STRING 
7070: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
7071: LD_ADDR_OWVAR 35
7075: PUSH
7076: LD_INT 7
7078: NEG
7079: PPUSH
7080: LD_INT 7
7082: PPUSH
7083: CALL_OW 12
7087: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
7088: CALL_OW 44
7092: PPUSH
7093: LD_VAR 0 1
7097: PPUSH
7098: LD_INT 0
7100: PPUSH
7101: CALL 61611 0 3
// end ;
7105: GO 7052
7107: POP
7108: POP
// for i := 1 to 4 do
7109: LD_ADDR_VAR 0 4
7113: PUSH
7114: DOUBLE
7115: LD_INT 1
7117: DEC
7118: ST_TO_ADDR
7119: LD_INT 4
7121: PUSH
7122: FOR_TO
7123: IFFALSE 7160
// begin hc_class := class_phororhacos ;
7125: LD_ADDR_OWVAR 28
7129: PUSH
7130: LD_INT 18
7132: ST_TO_ADDR
// hc_gallery :=  ;
7133: LD_ADDR_OWVAR 33
7137: PUSH
7138: LD_STRING 
7140: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7141: CALL_OW 44
7145: PPUSH
7146: LD_VAR 0 1
7150: PPUSH
7151: LD_INT 0
7153: PPUSH
7154: CALL_OW 49
// end ;
7158: GO 7122
7160: POP
7161: POP
// for i := 1 to 4 do
7162: LD_ADDR_VAR 0 4
7166: PUSH
7167: DOUBLE
7168: LD_INT 1
7170: DEC
7171: ST_TO_ADDR
7172: LD_INT 4
7174: PUSH
7175: FOR_TO
7176: IFFALSE 7213
// begin hc_class := class_baggie ;
7178: LD_ADDR_OWVAR 28
7182: PUSH
7183: LD_INT 13
7185: ST_TO_ADDR
// hc_gallery :=  ;
7186: LD_ADDR_OWVAR 33
7190: PUSH
7191: LD_STRING 
7193: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7194: CALL_OW 44
7198: PPUSH
7199: LD_VAR 0 1
7203: PPUSH
7204: LD_INT 0
7206: PPUSH
7207: CALL_OW 49
// end ;
7211: GO 7175
7213: POP
7214: POP
// for i := 1 to 7 do
7215: LD_ADDR_VAR 0 4
7219: PUSH
7220: DOUBLE
7221: LD_INT 1
7223: DEC
7224: ST_TO_ADDR
7225: LD_INT 7
7227: PUSH
7228: FOR_TO
7229: IFFALSE 7266
// begin hc_class := class_frog ;
7231: LD_ADDR_OWVAR 28
7235: PUSH
7236: LD_INT 19
7238: ST_TO_ADDR
// hc_gallery :=  ;
7239: LD_ADDR_OWVAR 33
7243: PUSH
7244: LD_STRING 
7246: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
7247: CALL_OW 44
7251: PPUSH
7252: LD_VAR 0 2
7256: PPUSH
7257: LD_INT 0
7259: PPUSH
7260: CALL_OW 49
// end ;
7264: GO 7228
7266: POP
7267: POP
// end ;
7268: LD_VAR 0 3
7272: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
7273: LD_INT 0
7275: PPUSH
7276: PPUSH
7277: PPUSH
// if not observer or not unit then
7278: LD_VAR 0 1
7282: NOT
7283: PUSH
7284: LD_VAR 0 2
7288: NOT
7289: OR
7290: IFFALSE 7294
// exit ;
7292: GO 7342
// if not See ( GetSide ( observer ) , unit ) then
7294: LD_VAR 0 1
7298: PPUSH
7299: CALL_OW 255
7303: PPUSH
7304: LD_VAR 0 2
7308: PPUSH
7309: CALL_OW 292
7313: NOT
7314: IFFALSE 7318
// exit ;
7316: GO 7342
// result := GetDistUnits ( observer , unit ) < 12 ;
7318: LD_ADDR_VAR 0 3
7322: PUSH
7323: LD_VAR 0 1
7327: PPUSH
7328: LD_VAR 0 2
7332: PPUSH
7333: CALL_OW 296
7337: PUSH
7338: LD_INT 12
7340: LESS
7341: ST_TO_ADDR
// end ;
7342: LD_VAR 0 3
7346: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
7347: LD_INT 0
7349: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
7350: LD_VAR 0 2
7354: PUSH
7355: LD_INT 1
7357: ARRAY
7358: PPUSH
7359: LD_VAR 0 2
7363: PUSH
7364: LD_INT 2
7366: ARRAY
7367: PPUSH
7368: CALL_OW 488
7372: PUSH
7373: LD_VAR 0 2
7377: PUSH
7378: LD_INT 1
7380: ARRAY
7381: PPUSH
7382: LD_VAR 0 2
7386: PUSH
7387: LD_INT 2
7389: ARRAY
7390: PPUSH
7391: CALL_OW 428
7395: PUSH
7396: LD_INT 0
7398: EQUAL
7399: AND
7400: IFFALSE 7434
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
7402: LD_VAR 0 1
7406: PPUSH
7407: LD_VAR 0 2
7411: PUSH
7412: LD_INT 1
7414: ARRAY
7415: PPUSH
7416: LD_VAR 0 2
7420: PUSH
7421: LD_INT 2
7423: ARRAY
7424: PPUSH
7425: LD_VAR 0 3
7429: PPUSH
7430: CALL_OW 48
// end ;
7434: LD_VAR 0 4
7438: RET
// export function ReverseArray ( array ) ; var i ; begin
7439: LD_INT 0
7441: PPUSH
7442: PPUSH
// if not array then
7443: LD_VAR 0 1
7447: NOT
7448: IFFALSE 7452
// exit ;
7450: GO 7510
// result := [ ] ;
7452: LD_ADDR_VAR 0 2
7456: PUSH
7457: EMPTY
7458: ST_TO_ADDR
// for i := 1 to array do
7459: LD_ADDR_VAR 0 3
7463: PUSH
7464: DOUBLE
7465: LD_INT 1
7467: DEC
7468: ST_TO_ADDR
7469: LD_VAR 0 1
7473: PUSH
7474: FOR_TO
7475: IFFALSE 7508
// result := Insert ( result , 1 , array [ i ] ) ;
7477: LD_ADDR_VAR 0 2
7481: PUSH
7482: LD_VAR 0 2
7486: PPUSH
7487: LD_INT 1
7489: PPUSH
7490: LD_VAR 0 1
7494: PUSH
7495: LD_VAR 0 3
7499: ARRAY
7500: PPUSH
7501: CALL_OW 2
7505: ST_TO_ADDR
7506: GO 7474
7508: POP
7509: POP
// end ;
7510: LD_VAR 0 2
7514: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
7515: LD_INT 0
7517: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
7518: LD_VAR 0 1
7522: PPUSH
7523: LD_VAR 0 2
7527: PPUSH
7528: LD_VAR 0 3
7532: PPUSH
7533: LD_VAR 0 4
7537: PPUSH
7538: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
7542: LD_VAR 0 1
7546: PPUSH
7547: LD_VAR 0 2
7551: PPUSH
7552: LD_VAR 0 3
7556: PPUSH
7557: CALL_OW 331
// end ;
7561: LD_VAR 0 5
7565: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
7566: LD_INT 0
7568: PPUSH
// if not units then
7569: LD_VAR 0 1
7573: NOT
7574: IFFALSE 7578
// exit ;
7576: GO 7661
// result := true ;
7578: LD_ADDR_VAR 0 4
7582: PUSH
7583: LD_INT 1
7585: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
7586: LD_VAR 0 1
7590: PPUSH
7591: LD_INT 26
7593: PUSH
7594: LD_INT 1
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PPUSH
7601: CALL_OW 72
7605: PUSH
7606: LD_INT 1
7608: ARRAY
7609: PPUSH
7610: LD_VAR 0 2
7614: PPUSH
7615: CALL_OW 88
7619: NOT
7620: IFFALSE 7661
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
7622: LD_ADDR_VAR 0 4
7626: PUSH
7627: LD_VAR 0 1
7631: PPUSH
7632: LD_INT 26
7634: PUSH
7635: LD_INT 2
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PPUSH
7642: CALL_OW 72
7646: PUSH
7647: LD_INT 1
7649: ARRAY
7650: PPUSH
7651: LD_VAR 0 3
7655: PPUSH
7656: CALL_OW 88
7660: ST_TO_ADDR
// end ;
7661: LD_VAR 0 4
7665: RET
// export function SeeGroup ( side , group ) ; var i ; begin
7666: LD_INT 0
7668: PPUSH
7669: PPUSH
// if not group then
7670: LD_VAR 0 2
7674: NOT
7675: IFFALSE 7679
// exit ;
7677: GO 7724
// for i in group do
7679: LD_ADDR_VAR 0 4
7683: PUSH
7684: LD_VAR 0 2
7688: PUSH
7689: FOR_IN
7690: IFFALSE 7722
// if See ( side , i ) then
7692: LD_VAR 0 1
7696: PPUSH
7697: LD_VAR 0 4
7701: PPUSH
7702: CALL_OW 292
7706: IFFALSE 7720
// begin result := true ;
7708: LD_ADDR_VAR 0 3
7712: PUSH
7713: LD_INT 1
7715: ST_TO_ADDR
// exit ;
7716: POP
7717: POP
7718: GO 7724
// end ;
7720: GO 7689
7722: POP
7723: POP
// end ; end_of_file
7724: LD_VAR 0 3
7728: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
7729: LD_INT 0
7731: PPUSH
7732: PPUSH
7733: PPUSH
7734: PPUSH
7735: PPUSH
7736: PPUSH
7737: PPUSH
// uc_side := 3 ;
7738: LD_ADDR_OWVAR 20
7742: PUSH
7743: LD_INT 3
7745: ST_TO_ADDR
// uc_nation := 3 ;
7746: LD_ADDR_OWVAR 21
7750: PUSH
7751: LD_INT 3
7753: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
7754: LD_ADDR_EXP 49
7758: PUSH
7759: LD_STRING Morozov
7761: PPUSH
7762: CALL_OW 25
7766: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
7767: LD_EXP 49
7771: PPUSH
7772: LD_INT 52
7774: PPUSH
7775: CALL_OW 52
// if not gaidarKilled then
7779: LD_EXP 7
7783: NOT
7784: IFFALSE 7817
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
7786: LD_ADDR_EXP 50
7790: PUSH
7791: LD_STRING Gaydar
7793: PPUSH
7794: LD_INT 0
7796: PPUSH
7797: LD_STRING 
7799: PPUSH
7800: CALL 25293 0 3
7804: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
7805: LD_EXP 50
7809: PPUSH
7810: LD_INT 52
7812: PPUSH
7813: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
7817: LD_INT 52
7819: PPUSH
7820: LD_STRING lenin
7822: PPUSH
7823: CALL_OW 500
// ruOutsiders := [ ] ;
7827: LD_ADDR_EXP 52
7831: PUSH
7832: EMPTY
7833: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
7834: LD_ADDR_EXP 54
7838: PUSH
7839: EMPTY
7840: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
7841: LD_ADDR_EXP 55
7845: PUSH
7846: EMPTY
7847: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
7848: LD_ADDR_EXP 56
7852: PUSH
7853: EMPTY
7854: ST_TO_ADDR
// ruAttackers := [ ] ;
7855: LD_ADDR_EXP 57
7859: PUSH
7860: EMPTY
7861: ST_TO_ADDR
// waveStrength := 0 ;
7862: LD_ADDR_EXP 58
7866: PUSH
7867: LD_INT 0
7869: ST_TO_ADDR
// if not gaidarKilled then
7870: LD_EXP 7
7874: NOT
7875: IFFALSE 7885
// waveStrength := 2 ;
7877: LD_ADDR_EXP 58
7881: PUSH
7882: LD_INT 2
7884: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
7885: LD_ADDR_VAR 0 7
7889: PUSH
7890: LD_INT 22
7892: PUSH
7893: LD_INT 3
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: LD_INT 21
7902: PUSH
7903: LD_INT 3
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PPUSH
7914: CALL_OW 69
7918: ST_TO_ADDR
// for i in tmp do
7919: LD_ADDR_VAR 0 2
7923: PUSH
7924: LD_VAR 0 7
7928: PUSH
7929: FOR_IN
7930: IFFALSE 7967
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
7932: LD_VAR 0 2
7936: PPUSH
7937: LD_INT 5
7939: PUSH
7940: LD_INT 6
7942: PUSH
7943: LD_INT 7
7945: PUSH
7946: LD_INT 8
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: PUSH
7955: LD_OWVAR 67
7959: ARRAY
7960: PPUSH
7961: CALL_OW 241
7965: GO 7929
7967: POP
7968: POP
// for i := 1 to 3 do
7969: LD_ADDR_VAR 0 2
7973: PUSH
7974: DOUBLE
7975: LD_INT 1
7977: DEC
7978: ST_TO_ADDR
7979: LD_INT 3
7981: PUSH
7982: FOR_TO
7983: IFFALSE 8021
// begin PrepareHuman ( false , 1 , 0 ) ;
7985: LD_INT 0
7987: PPUSH
7988: LD_INT 1
7990: PPUSH
7991: LD_INT 0
7993: PPUSH
7994: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
7998: CALL_OW 44
8002: PPUSH
8003: LD_INT 75
8005: PPUSH
8006: LD_INT 49
8008: PPUSH
8009: LD_INT 3
8011: PPUSH
8012: LD_INT 0
8014: PPUSH
8015: CALL_OW 50
// end ;
8019: GO 7982
8021: POP
8022: POP
// for i := 1 to 4 do
8023: LD_ADDR_VAR 0 2
8027: PUSH
8028: DOUBLE
8029: LD_INT 1
8031: DEC
8032: ST_TO_ADDR
8033: LD_INT 4
8035: PUSH
8036: FOR_TO
8037: IFFALSE 8083
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
8039: LD_INT 0
8041: PPUSH
8042: LD_INT 1
8044: PPUSH
8045: LD_INT 2
8047: PPUSH
8048: CALL_OW 12
8052: PPUSH
8053: LD_INT 0
8055: PPUSH
8056: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
8060: CALL_OW 44
8064: PPUSH
8065: LD_INT 330
8067: PPUSH
8068: LD_INT 231
8070: PPUSH
8071: LD_INT 5
8073: PPUSH
8074: LD_INT 0
8076: PPUSH
8077: CALL_OW 50
// end ;
8081: GO 8036
8083: POP
8084: POP
// hc_class := 1 ;
8085: LD_ADDR_OWVAR 28
8089: PUSH
8090: LD_INT 1
8092: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
8093: CALL_OW 44
8097: PPUSH
8098: LD_INT 324
8100: PPUSH
8101: LD_INT 219
8103: PPUSH
8104: CALL_OW 428
8108: PPUSH
8109: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
8113: CALL_OW 44
8117: PPUSH
8118: LD_INT 316
8120: PPUSH
8121: LD_INT 223
8123: PPUSH
8124: CALL_OW 428
8128: PPUSH
8129: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
8133: LD_ADDR_VAR 0 7
8137: PUSH
8138: LD_INT 172
8140: PPUSH
8141: LD_INT 198
8143: PPUSH
8144: CALL_OW 428
8148: PPUSH
8149: CALL_OW 274
8153: PUSH
8154: LD_INT 189
8156: PPUSH
8157: LD_INT 156
8159: PPUSH
8160: CALL_OW 428
8164: PPUSH
8165: CALL_OW 274
8169: PUSH
8170: LD_INT 341
8172: PPUSH
8173: LD_INT 232
8175: PPUSH
8176: CALL_OW 428
8180: PPUSH
8181: CALL_OW 274
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: LIST
8190: ST_TO_ADDR
// for i in tmp do
8191: LD_ADDR_VAR 0 2
8195: PUSH
8196: LD_VAR 0 7
8200: PUSH
8201: FOR_IN
8202: IFFALSE 8236
// begin SetResourceType ( i , mat_cans , 200 ) ;
8204: LD_VAR 0 2
8208: PPUSH
8209: LD_INT 1
8211: PPUSH
8212: LD_INT 200
8214: PPUSH
8215: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
8219: LD_VAR 0 2
8223: PPUSH
8224: LD_INT 2
8226: PPUSH
8227: LD_INT 200
8229: PPUSH
8230: CALL_OW 277
// end ;
8234: GO 8201
8236: POP
8237: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
8238: LD_ADDR_VAR 0 7
8242: PUSH
8243: LD_INT 177
8245: PUSH
8246: LD_INT 114
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: PUSH
8253: LD_INT 138
8255: PUSH
8256: LD_INT 96
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: ST_TO_ADDR
// for i := 1 to tmp do
8267: LD_ADDR_VAR 0 2
8271: PUSH
8272: DOUBLE
8273: LD_INT 1
8275: DEC
8276: ST_TO_ADDR
8277: LD_VAR 0 7
8281: PUSH
8282: FOR_TO
8283: IFFALSE 8366
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
8285: LD_INT 0
8287: PPUSH
8288: LD_INT 9
8290: PPUSH
8291: LD_INT 6
8293: PPUSH
8294: CALL_OW 380
// un := CreateHuman ;
8298: LD_ADDR_VAR 0 5
8302: PUSH
8303: CALL_OW 44
8307: ST_TO_ADDR
// SetDir ( un , 2 ) ;
8308: LD_VAR 0 5
8312: PPUSH
8313: LD_INT 2
8315: PPUSH
8316: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
8320: LD_VAR 0 5
8324: PPUSH
8325: LD_VAR 0 7
8329: PUSH
8330: LD_VAR 0 2
8334: ARRAY
8335: PUSH
8336: LD_INT 1
8338: ARRAY
8339: PPUSH
8340: LD_VAR 0 7
8344: PUSH
8345: LD_VAR 0 2
8349: ARRAY
8350: PUSH
8351: LD_INT 2
8353: ARRAY
8354: PPUSH
8355: CALL_OW 428
8359: PPUSH
8360: CALL_OW 52
// end ;
8364: GO 8282
8366: POP
8367: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
8368: LD_ADDR_VAR 0 7
8372: PUSH
8373: LD_INT 198
8375: PUSH
8376: LD_INT 158
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PUSH
8383: LD_INT 203
8385: PUSH
8386: LD_INT 166
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: LD_INT 181
8395: PUSH
8396: LD_INT 209
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PUSH
8403: LD_INT 178
8405: PUSH
8406: LD_INT 196
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: PUSH
8413: LD_INT 181
8415: PUSH
8416: LD_INT 212
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: ST_TO_ADDR
// for i := 1 to tmp do
8430: LD_ADDR_VAR 0 2
8434: PUSH
8435: DOUBLE
8436: LD_INT 1
8438: DEC
8439: ST_TO_ADDR
8440: LD_VAR 0 7
8444: PUSH
8445: FOR_TO
8446: IFFALSE 8567
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
8448: LD_INT 0
8450: PPUSH
8451: LD_INT 1
8453: PPUSH
8454: LD_INT 4
8456: PUSH
8457: LD_INT 5
8459: PUSH
8460: LD_INT 6
8462: PUSH
8463: LD_INT 7
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: PUSH
8472: LD_OWVAR 67
8476: ARRAY
8477: PPUSH
8478: CALL_OW 380
// un := CreateHuman ;
8482: LD_ADDR_VAR 0 5
8486: PUSH
8487: CALL_OW 44
8491: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
8492: LD_ADDR_VAR 0 4
8496: PUSH
8497: LD_VAR 0 7
8501: PUSH
8502: LD_VAR 0 2
8506: ARRAY
8507: PUSH
8508: LD_INT 1
8510: ARRAY
8511: PPUSH
8512: LD_VAR 0 7
8516: PUSH
8517: LD_VAR 0 2
8521: ARRAY
8522: PUSH
8523: LD_INT 2
8525: ARRAY
8526: PPUSH
8527: CALL_OW 428
8531: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
8532: LD_VAR 0 5
8536: PPUSH
8537: LD_VAR 0 4
8541: PPUSH
8542: CALL 58017 0 1
8546: PPUSH
8547: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8551: LD_VAR 0 5
8555: PPUSH
8556: LD_VAR 0 4
8560: PPUSH
8561: CALL_OW 52
// end ;
8565: GO 8445
8567: POP
8568: POP
// for i := 1 to 3 do
8569: LD_ADDR_VAR 0 2
8573: PUSH
8574: DOUBLE
8575: LD_INT 1
8577: DEC
8578: ST_TO_ADDR
8579: LD_INT 3
8581: PUSH
8582: FOR_TO
8583: IFFALSE 8638
// begin InitHc ;
8585: CALL_OW 19
// uc_nation := 0 ;
8589: LD_ADDR_OWVAR 21
8593: PUSH
8594: LD_INT 0
8596: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
8597: LD_ADDR_OWVAR 28
8601: PUSH
8602: LD_INT 16
8604: ST_TO_ADDR
// un := CreateHuman ;
8605: LD_ADDR_VAR 0 5
8609: PUSH
8610: CALL_OW 44
8614: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
8615: LD_VAR 0 5
8619: PPUSH
8620: LD_INT 194
8622: PPUSH
8623: LD_INT 164
8625: PPUSH
8626: LD_INT 6
8628: PPUSH
8629: LD_INT 0
8631: PPUSH
8632: CALL_OW 50
// end ;
8636: GO 8582
8638: POP
8639: POP
// uc_nation := 3 ;
8640: LD_ADDR_OWVAR 21
8644: PUSH
8645: LD_INT 3
8647: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
8648: LD_INT 24
8650: PPUSH
8651: LD_INT 1
8653: PPUSH
8654: LD_INT 1
8656: PPUSH
8657: LD_INT 44
8659: PPUSH
8660: LD_INT 10
8662: PPUSH
8663: CALL 30310 0 5
// un := CreateVehicle ;
8667: LD_ADDR_VAR 0 5
8671: PUSH
8672: CALL_OW 45
8676: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 162 , 1 , false ) ;
8677: LD_VAR 0 5
8681: PPUSH
8682: LD_INT 199
8684: PPUSH
8685: LD_INT 162
8687: PPUSH
8688: LD_INT 1
8690: PPUSH
8691: LD_INT 0
8693: PPUSH
8694: CALL 64836 0 5
// ComHold ( un ) ;
8698: LD_VAR 0 5
8702: PPUSH
8703: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8707: LD_INT 0
8709: PPUSH
8710: LD_INT 3
8712: PPUSH
8713: LD_INT 4
8715: PPUSH
8716: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8720: CALL_OW 44
8724: PPUSH
8725: LD_VAR 0 5
8729: PPUSH
8730: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8734: LD_INT 24
8736: PPUSH
8737: LD_INT 1
8739: PPUSH
8740: LD_INT 1
8742: PPUSH
8743: LD_INT 45
8745: PPUSH
8746: LD_INT 10
8748: PPUSH
8749: CALL 30310 0 5
// un := CreateVehicle ;
8753: LD_ADDR_VAR 0 5
8757: PUSH
8758: CALL_OW 45
8762: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
8763: LD_VAR 0 5
8767: PPUSH
8768: LD_INT 129
8770: PPUSH
8771: LD_INT 93
8773: PPUSH
8774: LD_INT 1
8776: PPUSH
8777: LD_INT 0
8779: PPUSH
8780: CALL 64836 0 5
// ComHold ( un ) ;
8784: LD_VAR 0 5
8788: PPUSH
8789: CALL_OW 140
// if Difficulty > 1 then
8793: LD_OWVAR 67
8797: PUSH
8798: LD_INT 1
8800: GREATER
8801: IFFALSE 8975
// begin PrepareHuman ( false , 3 , 4 ) ;
8803: LD_INT 0
8805: PPUSH
8806: LD_INT 3
8808: PPUSH
8809: LD_INT 4
8811: PPUSH
8812: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8816: CALL_OW 44
8820: PPUSH
8821: LD_VAR 0 5
8825: PPUSH
8826: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8830: LD_INT 24
8832: PPUSH
8833: LD_INT 1
8835: PPUSH
8836: LD_INT 1
8838: PPUSH
8839: LD_INT 45
8841: PPUSH
8842: LD_INT 10
8844: PPUSH
8845: CALL 30310 0 5
// un := CreateVehicle ;
8849: LD_ADDR_VAR 0 5
8853: PUSH
8854: CALL_OW 45
8858: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 92 , 2 , false ) ;
8859: LD_VAR 0 5
8863: PPUSH
8864: LD_INT 134
8866: PPUSH
8867: LD_INT 92
8869: PPUSH
8870: LD_INT 2
8872: PPUSH
8873: LD_INT 0
8875: PPUSH
8876: CALL 64836 0 5
// ComHold ( un ) ;
8880: LD_VAR 0 5
8884: PPUSH
8885: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8889: LD_INT 0
8891: PPUSH
8892: LD_INT 3
8894: PPUSH
8895: LD_INT 4
8897: PPUSH
8898: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8902: CALL_OW 44
8906: PPUSH
8907: LD_VAR 0 5
8911: PPUSH
8912: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8916: LD_INT 24
8918: PPUSH
8919: LD_INT 1
8921: PPUSH
8922: LD_INT 1
8924: PPUSH
8925: LD_INT 45
8927: PPUSH
8928: LD_INT 10
8930: PPUSH
8931: CALL 30310 0 5
// un := CreateVehicle ;
8935: LD_ADDR_VAR 0 5
8939: PUSH
8940: CALL_OW 45
8944: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
8945: LD_VAR 0 5
8949: PPUSH
8950: LD_INT 200
8952: PPUSH
8953: LD_INT 173
8955: PPUSH
8956: LD_INT 1
8958: PPUSH
8959: LD_INT 0
8961: PPUSH
8962: CALL 64836 0 5
// ComHold ( un ) ;
8966: LD_VAR 0 5
8970: PPUSH
8971: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
8975: LD_INT 0
8977: PPUSH
8978: LD_INT 3
8980: PPUSH
8981: LD_INT 4
8983: PPUSH
8984: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8988: CALL_OW 44
8992: PPUSH
8993: LD_VAR 0 5
8997: PPUSH
8998: CALL_OW 52
// bc_type := b_armoury ;
9002: LD_ADDR_OWVAR 42
9006: PUSH
9007: LD_INT 4
9009: ST_TO_ADDR
// if Difficulty > 1 then
9010: LD_OWVAR 67
9014: PUSH
9015: LD_INT 1
9017: GREATER
9018: IFFALSE 9028
// bc_type := b_barracks ;
9020: LD_ADDR_OWVAR 42
9024: PUSH
9025: LD_INT 5
9027: ST_TO_ADDR
// bc_level := 6 ;
9028: LD_ADDR_OWVAR 43
9032: PUSH
9033: LD_INT 6
9035: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
9036: LD_INT 120
9038: PPUSH
9039: LD_INT 100
9041: PPUSH
9042: LD_INT 5
9044: PPUSH
9045: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
9049: LD_ADDR_VAR 0 2
9053: PUSH
9054: DOUBLE
9055: LD_INT 1
9057: DEC
9058: ST_TO_ADDR
9059: LD_INT 3
9061: PUSH
9062: LD_INT 3
9064: PUSH
9065: LD_INT 4
9067: PUSH
9068: LD_INT 4
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: PUSH
9077: LD_OWVAR 67
9081: ARRAY
9082: PUSH
9083: FOR_TO
9084: IFFALSE 9142
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
9086: LD_INT 0
9088: PPUSH
9089: LD_INT 1
9091: PUSH
9092: LD_INT 1
9094: PUSH
9095: LD_INT 9
9097: PUSH
9098: LD_INT 9
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: PUSH
9107: LD_OWVAR 67
9111: ARRAY
9112: PPUSH
9113: LD_INT 5
9115: PPUSH
9116: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
9120: CALL_OW 44
9124: PPUSH
9125: LD_INT 120
9127: PPUSH
9128: LD_INT 100
9130: PPUSH
9131: CALL_OW 428
9135: PPUSH
9136: CALL_OW 52
// end ;
9140: GO 9083
9142: POP
9143: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
9144: LD_ADDR_VAR 0 7
9148: PUSH
9149: LD_INT 135
9151: PUSH
9152: LD_INT 100
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: LD_INT 137
9161: PUSH
9162: LD_INT 92
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: ST_TO_ADDR
// for i := 1 to tmp do
9173: LD_ADDR_VAR 0 2
9177: PUSH
9178: DOUBLE
9179: LD_INT 1
9181: DEC
9182: ST_TO_ADDR
9183: LD_VAR 0 7
9187: PUSH
9188: FOR_TO
9189: IFFALSE 9359
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
9191: LD_INT 22
9193: PUSH
9194: LD_INT 22
9196: PUSH
9197: LD_INT 24
9199: PUSH
9200: LD_INT 24
9202: PUSH
9203: LD_INT 24
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: PUSH
9213: LD_OWVAR 67
9217: PUSH
9218: LD_INT 0
9220: PPUSH
9221: LD_INT 1
9223: PPUSH
9224: CALL_OW 12
9228: PLUS
9229: ARRAY
9230: PPUSH
9231: LD_INT 1
9233: PPUSH
9234: LD_INT 1
9236: PPUSH
9237: LD_INT 44
9239: PPUSH
9240: LD_INT 25
9242: PPUSH
9243: CALL 30310 0 5
// veh := CreateVehicle ;
9247: LD_ADDR_VAR 0 6
9251: PUSH
9252: CALL_OW 45
9256: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
9257: LD_VAR 0 6
9261: PPUSH
9262: LD_INT 2
9264: PPUSH
9265: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
9269: LD_VAR 0 6
9273: PPUSH
9274: LD_VAR 0 7
9278: PUSH
9279: LD_VAR 0 2
9283: ARRAY
9284: PUSH
9285: LD_INT 1
9287: ARRAY
9288: PPUSH
9289: LD_VAR 0 7
9293: PUSH
9294: LD_VAR 0 2
9298: ARRAY
9299: PUSH
9300: LD_INT 2
9302: ARRAY
9303: PPUSH
9304: LD_INT 0
9306: PPUSH
9307: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
9311: LD_INT 0
9313: PPUSH
9314: LD_INT 3
9316: PPUSH
9317: LD_INT 6
9319: PPUSH
9320: CALL_OW 380
// un := CreateHuman ;
9324: LD_ADDR_VAR 0 5
9328: PUSH
9329: CALL_OW 44
9333: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9334: LD_VAR 0 5
9338: PPUSH
9339: LD_VAR 0 6
9343: PPUSH
9344: CALL_OW 52
// ComHold ( veh ) ;
9348: LD_VAR 0 6
9352: PPUSH
9353: CALL_OW 140
// end ;
9357: GO 9188
9359: POP
9360: POP
// tmp := [ 191 , 122 ] ;
9361: LD_ADDR_VAR 0 7
9365: PUSH
9366: LD_INT 191
9368: PUSH
9369: LD_INT 122
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
9376: LD_INT 24
9378: PPUSH
9379: LD_INT 1
9381: PPUSH
9382: LD_INT 1
9384: PPUSH
9385: LD_INT 44
9387: PPUSH
9388: LD_INT 30
9390: PPUSH
9391: CALL 30310 0 5
// ruBlockadeTank := CreateVehicle ;
9395: LD_ADDR_EXP 51
9399: PUSH
9400: CALL_OW 45
9404: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
9405: LD_EXP 51
9409: PPUSH
9410: LD_INT 2
9412: PPUSH
9413: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
9417: LD_EXP 51
9421: PPUSH
9422: LD_INT 191
9424: PPUSH
9425: LD_INT 122
9427: PPUSH
9428: LD_INT 0
9430: PPUSH
9431: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
9435: LD_INT 1
9437: PPUSH
9438: LD_INT 5
9440: PUSH
9441: LD_INT 6
9443: PUSH
9444: LD_INT 7
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: LIST
9451: PUSH
9452: LD_OWVAR 67
9456: PUSH
9457: LD_INT 1
9459: MINUS
9460: ARRAY
9461: PPUSH
9462: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
9466: CALL_OW 44
9470: PPUSH
9471: LD_EXP 51
9475: PPUSH
9476: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
9480: LD_EXP 51
9484: PPUSH
9485: CALL_OW 140
// ruBlockadeSquad := [ ] ;
9489: LD_ADDR_EXP 53
9493: PUSH
9494: EMPTY
9495: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 6 , 6 ] [ Difficulty ] do
9496: LD_ADDR_VAR 0 2
9500: PUSH
9501: DOUBLE
9502: LD_INT 1
9504: DEC
9505: ST_TO_ADDR
9506: LD_INT 3
9508: PUSH
9509: LD_INT 4
9511: PUSH
9512: LD_INT 6
9514: PUSH
9515: LD_INT 6
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: PUSH
9524: LD_OWVAR 67
9528: ARRAY
9529: PUSH
9530: FOR_TO
9531: IFFALSE 9647
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
9533: LD_INT 0
9535: PPUSH
9536: LD_INT 1
9538: PPUSH
9539: LD_INT 4
9541: PUSH
9542: LD_INT 5
9544: PUSH
9545: LD_INT 6
9547: PUSH
9548: LD_INT 7
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: PUSH
9557: LD_OWVAR 67
9561: ARRAY
9562: PPUSH
9563: CALL_OW 380
// un := CreateHuman ;
9567: LD_ADDR_VAR 0 5
9571: PUSH
9572: CALL_OW 44
9576: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
9577: LD_VAR 0 5
9581: PPUSH
9582: LD_INT 9
9584: PPUSH
9585: LD_INT 0
9587: PPUSH
9588: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
9592: LD_VAR 0 5
9596: PPUSH
9597: LD_INT 198
9599: PPUSH
9600: LD_INT 129
9602: PPUSH
9603: CALL_OW 118
// AddComCrawl ( un ) ;
9607: LD_VAR 0 5
9611: PPUSH
9612: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9616: LD_ADDR_EXP 53
9620: PUSH
9621: LD_EXP 53
9625: PPUSH
9626: LD_EXP 53
9630: PUSH
9631: LD_INT 1
9633: PLUS
9634: PPUSH
9635: LD_VAR 0 5
9639: PPUSH
9640: CALL_OW 1
9644: ST_TO_ADDR
// end ;
9645: GO 9530
9647: POP
9648: POP
// PrepareHuman ( false , 4 , 5 ) ;
9649: LD_INT 0
9651: PPUSH
9652: LD_INT 4
9654: PPUSH
9655: LD_INT 5
9657: PPUSH
9658: CALL_OW 380
// un := CreateHuman ;
9662: LD_ADDR_VAR 0 5
9666: PUSH
9667: CALL_OW 44
9671: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
9672: LD_VAR 0 5
9676: PPUSH
9677: LD_INT 179
9679: PPUSH
9680: LD_INT 113
9682: PPUSH
9683: LD_INT 0
9685: PPUSH
9686: CALL_OW 48
// ComHold ( un ) ;
9690: LD_VAR 0 5
9694: PPUSH
9695: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9699: LD_ADDR_EXP 53
9703: PUSH
9704: LD_EXP 53
9708: PPUSH
9709: LD_EXP 53
9713: PUSH
9714: LD_INT 1
9716: PLUS
9717: PPUSH
9718: LD_VAR 0 5
9722: PPUSH
9723: CALL_OW 1
9727: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
9728: LD_ADDR_VAR 0 7
9732: PUSH
9733: LD_INT 167
9735: PPUSH
9736: LD_INT 243
9738: PPUSH
9739: CALL_OW 428
9743: PPUSH
9744: CALL_OW 274
9748: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
9749: LD_VAR 0 7
9753: PPUSH
9754: LD_INT 1
9756: PPUSH
9757: LD_INT 1000
9759: PPUSH
9760: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
9764: LD_VAR 0 7
9768: PPUSH
9769: LD_INT 2
9771: PPUSH
9772: LD_INT 400
9774: PPUSH
9775: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
9779: LD_ADDR_VAR 0 7
9783: PUSH
9784: LD_INT 169
9786: PPUSH
9787: LD_INT 229
9789: PPUSH
9790: CALL_OW 428
9794: ST_TO_ADDR
// for i := 1 to 3 do
9795: LD_ADDR_VAR 0 2
9799: PUSH
9800: DOUBLE
9801: LD_INT 1
9803: DEC
9804: ST_TO_ADDR
9805: LD_INT 3
9807: PUSH
9808: FOR_TO
9809: IFFALSE 9900
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9811: LD_INT 0
9813: PPUSH
9814: LD_INT 1
9816: PPUSH
9817: LD_INT 4
9819: PUSH
9820: LD_INT 5
9822: PUSH
9823: LD_INT 5
9825: PUSH
9826: LD_INT 6
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: PUSH
9835: LD_OWVAR 67
9839: ARRAY
9840: PPUSH
9841: CALL_OW 380
// un := CreateHuman ;
9845: LD_ADDR_VAR 0 5
9849: PUSH
9850: CALL_OW 44
9854: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
9855: LD_VAR 0 5
9859: PPUSH
9860: LD_VAR 0 7
9864: PPUSH
9865: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9869: LD_ADDR_EXP 54
9873: PUSH
9874: LD_EXP 54
9878: PPUSH
9879: LD_EXP 54
9883: PUSH
9884: LD_INT 1
9886: PLUS
9887: PPUSH
9888: LD_VAR 0 5
9892: PPUSH
9893: CALL_OW 1
9897: ST_TO_ADDR
// end ;
9898: GO 9808
9900: POP
9901: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
9902: LD_ADDR_VAR 0 7
9906: PUSH
9907: LD_INT 165
9909: PUSH
9910: LD_INT 227
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 173
9919: PUSH
9920: LD_INT 231
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: ST_TO_ADDR
// for i := 1 to tmp do
9931: LD_ADDR_VAR 0 2
9935: PUSH
9936: DOUBLE
9937: LD_INT 1
9939: DEC
9940: ST_TO_ADDR
9941: LD_VAR 0 7
9945: PUSH
9946: FOR_TO
9947: IFFALSE 10068
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9949: LD_INT 0
9951: PPUSH
9952: LD_INT 1
9954: PPUSH
9955: LD_INT 4
9957: PUSH
9958: LD_INT 5
9960: PUSH
9961: LD_INT 5
9963: PUSH
9964: LD_INT 6
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: PUSH
9973: LD_OWVAR 67
9977: ARRAY
9978: PPUSH
9979: CALL_OW 380
// un := CreateHuman ;
9983: LD_ADDR_VAR 0 5
9987: PUSH
9988: CALL_OW 44
9992: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
9993: LD_VAR 0 5
9997: PPUSH
9998: LD_VAR 0 7
10002: PUSH
10003: LD_VAR 0 2
10007: ARRAY
10008: PUSH
10009: LD_INT 1
10011: ARRAY
10012: PPUSH
10013: LD_VAR 0 7
10017: PUSH
10018: LD_VAR 0 2
10022: ARRAY
10023: PUSH
10024: LD_INT 2
10026: ARRAY
10027: PPUSH
10028: CALL_OW 428
10032: PPUSH
10033: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
10037: LD_ADDR_EXP 54
10041: PUSH
10042: LD_EXP 54
10046: PPUSH
10047: LD_EXP 54
10051: PUSH
10052: LD_INT 1
10054: PLUS
10055: PPUSH
10056: LD_VAR 0 5
10060: PPUSH
10061: CALL_OW 1
10065: ST_TO_ADDR
// end ;
10066: GO 9946
10068: POP
10069: POP
// for i := 1 to 2 do
10070: LD_ADDR_VAR 0 2
10074: PUSH
10075: DOUBLE
10076: LD_INT 1
10078: DEC
10079: ST_TO_ADDR
10080: LD_INT 2
10082: PUSH
10083: FOR_TO
10084: IFFALSE 10139
// begin InitHc ;
10086: CALL_OW 19
// uc_nation := 0 ;
10090: LD_ADDR_OWVAR 21
10094: PUSH
10095: LD_INT 0
10097: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
10098: LD_ADDR_OWVAR 28
10102: PUSH
10103: LD_INT 16
10105: ST_TO_ADDR
// un := CreateHuman ;
10106: LD_ADDR_VAR 0 5
10110: PUSH
10111: CALL_OW 44
10115: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
10116: LD_VAR 0 5
10120: PPUSH
10121: LD_INT 166
10123: PPUSH
10124: LD_INT 233
10126: PPUSH
10127: LD_INT 2
10129: PPUSH
10130: LD_INT 0
10132: PPUSH
10133: CALL_OW 50
// end ;
10137: GO 10083
10139: POP
10140: POP
// uc_nation := 3 ;
10141: LD_ADDR_OWVAR 21
10145: PUSH
10146: LD_INT 3
10148: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
10149: LD_ADDR_VAR 0 7
10153: PUSH
10154: LD_INT 71
10156: PUSH
10157: LD_INT 52
10159: PUSH
10160: LD_INT 11
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: ST_TO_ADDR
// for i in tmp do
10168: LD_ADDR_VAR 0 2
10172: PUSH
10173: LD_VAR 0 7
10177: PUSH
10178: FOR_IN
10179: IFFALSE 10223
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
10181: LD_VAR 0 2
10185: PPUSH
10186: CALL_OW 274
10190: PPUSH
10191: LD_INT 1
10193: PPUSH
10194: LD_INT 3000
10196: PPUSH
10197: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
10201: LD_VAR 0 2
10205: PPUSH
10206: CALL_OW 274
10210: PPUSH
10211: LD_INT 2
10213: PPUSH
10214: LD_INT 600
10216: PPUSH
10217: CALL_OW 277
// end ;
10221: GO 10178
10223: POP
10224: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
10225: LD_ADDR_VAR 0 7
10229: PUSH
10230: LD_INT 41
10232: PUSH
10233: LD_INT 57
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: PUSH
10240: LD_INT 38
10242: PUSH
10243: LD_INT 55
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PUSH
10250: LD_INT 50
10252: PUSH
10253: LD_INT 73
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 51
10262: PUSH
10263: LD_INT 65
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 82
10272: PUSH
10273: LD_INT 93
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: LD_INT 87
10282: PUSH
10283: LD_INT 100
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: LD_INT 91
10292: PUSH
10293: LD_INT 109
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 84
10302: PUSH
10303: LD_INT 120
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: LD_INT 113
10312: PUSH
10313: LD_INT 153
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: LD_INT 123
10322: PUSH
10323: LD_INT 171
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: LD_INT 125
10332: PUSH
10333: LD_INT 178
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PUSH
10340: LD_INT 125
10342: PUSH
10343: LD_INT 188
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: PUSH
10350: LD_INT 125
10352: PUSH
10353: LD_INT 201
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 33
10362: PUSH
10363: LD_INT 60
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PUSH
10370: LD_INT 76
10372: PUSH
10373: LD_INT 95
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PUSH
10380: LD_INT 84
10382: PUSH
10383: LD_INT 111
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: LD_INT 112
10392: PUSH
10393: LD_INT 165
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: ST_TO_ADDR
// for i := 1 to tmp do
10419: LD_ADDR_VAR 0 2
10423: PUSH
10424: DOUBLE
10425: LD_INT 1
10427: DEC
10428: ST_TO_ADDR
10429: LD_VAR 0 7
10433: PUSH
10434: FOR_TO
10435: IFFALSE 10682
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10437: LD_ADDR_VAR 0 4
10441: PUSH
10442: LD_VAR 0 7
10446: PUSH
10447: LD_VAR 0 2
10451: ARRAY
10452: PUSH
10453: LD_INT 1
10455: ARRAY
10456: PPUSH
10457: LD_VAR 0 7
10461: PUSH
10462: LD_VAR 0 2
10466: ARRAY
10467: PUSH
10468: LD_INT 2
10470: ARRAY
10471: PPUSH
10472: CALL_OW 428
10476: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
10477: LD_VAR 0 4
10481: PPUSH
10482: CALL_OW 266
10486: PUSH
10487: LD_INT 4
10489: PUSH
10490: LD_INT 5
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: IN
10497: IFFALSE 10581
// begin for j := 1 to Difficulty do
10499: LD_ADDR_VAR 0 3
10503: PUSH
10504: DOUBLE
10505: LD_INT 1
10507: DEC
10508: ST_TO_ADDR
10509: LD_OWVAR 67
10513: PUSH
10514: FOR_TO
10515: IFFALSE 10577
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10517: LD_INT 0
10519: PPUSH
10520: LD_INT 1
10522: PPUSH
10523: LD_INT 4
10525: PUSH
10526: LD_INT 5
10528: PUSH
10529: LD_INT 5
10531: PUSH
10532: LD_INT 6
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: PUSH
10541: LD_OWVAR 67
10545: ARRAY
10546: PPUSH
10547: CALL_OW 380
// un := CreateHuman ;
10551: LD_ADDR_VAR 0 5
10555: PUSH
10556: CALL_OW 44
10560: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10561: LD_VAR 0 5
10565: PPUSH
10566: LD_VAR 0 4
10570: PPUSH
10571: CALL_OW 52
// end ;
10575: GO 10514
10577: POP
10578: POP
// end else
10579: GO 10651
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10581: LD_INT 0
10583: PPUSH
10584: LD_INT 1
10586: PPUSH
10587: LD_INT 4
10589: PUSH
10590: LD_INT 5
10592: PUSH
10593: LD_INT 5
10595: PUSH
10596: LD_INT 6
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: PUSH
10605: LD_OWVAR 67
10609: ARRAY
10610: PPUSH
10611: CALL_OW 380
// un := CreateHuman ;
10615: LD_ADDR_VAR 0 5
10619: PUSH
10620: CALL_OW 44
10624: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10625: LD_VAR 0 5
10629: PPUSH
10630: LD_VAR 0 4
10634: PPUSH
10635: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
10639: LD_VAR 0 5
10643: PPUSH
10644: LD_INT 9
10646: PPUSH
10647: CALL_OW 336
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10651: LD_ADDR_EXP 55
10655: PUSH
10656: LD_EXP 55
10660: PPUSH
10661: LD_EXP 55
10665: PUSH
10666: LD_INT 1
10668: PLUS
10669: PPUSH
10670: LD_VAR 0 5
10674: PPUSH
10675: CALL_OW 1
10679: ST_TO_ADDR
// end ;
10680: GO 10434
10682: POP
10683: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
10684: LD_ADDR_VAR 0 4
10688: PUSH
10689: LD_INT 10
10691: PPUSH
10692: LD_INT 22
10694: PUSH
10695: LD_INT 3
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 30
10704: PUSH
10705: LD_INT 32
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: LD_INT 58
10714: PUSH
10715: EMPTY
10716: LIST
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: LIST
10722: PPUSH
10723: CALL_OW 70
10727: PUSH
10728: FOR_IN
10729: IFFALSE 10863
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
10731: LD_INT 40
10733: PUSH
10734: LD_INT 50
10736: PUSH
10737: LD_INT 75
10739: PUSH
10740: LD_INT 80
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: PUSH
10749: LD_OWVAR 67
10753: ARRAY
10754: PUSH
10755: LD_EXP 7
10759: PUSH
10760: LD_INT 10
10762: MUL
10763: MINUS
10764: PPUSH
10765: CALL_OW 13
10769: NOT
10770: IFFALSE 10774
// continue ;
10772: GO 10728
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10774: LD_INT 0
10776: PPUSH
10777: LD_INT 1
10779: PPUSH
10780: LD_INT 4
10782: PUSH
10783: LD_INT 5
10785: PUSH
10786: LD_INT 5
10788: PUSH
10789: LD_INT 6
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: PUSH
10798: LD_OWVAR 67
10802: ARRAY
10803: PPUSH
10804: CALL_OW 380
// un := CreateHuman ;
10808: LD_ADDR_VAR 0 5
10812: PUSH
10813: CALL_OW 44
10817: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10818: LD_VAR 0 5
10822: PPUSH
10823: LD_VAR 0 4
10827: PPUSH
10828: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10832: LD_ADDR_EXP 55
10836: PUSH
10837: LD_EXP 55
10841: PPUSH
10842: LD_EXP 55
10846: PUSH
10847: LD_INT 1
10849: PLUS
10850: PPUSH
10851: LD_VAR 0 5
10855: PPUSH
10856: CALL_OW 1
10860: ST_TO_ADDR
// end ;
10861: GO 10728
10863: POP
10864: POP
// for i := 1 to 5 do
10865: LD_ADDR_VAR 0 2
10869: PUSH
10870: DOUBLE
10871: LD_INT 1
10873: DEC
10874: ST_TO_ADDR
10875: LD_INT 5
10877: PUSH
10878: FOR_TO
10879: IFFALSE 10977
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10881: LD_INT 0
10883: PPUSH
10884: LD_INT 2
10886: PPUSH
10887: LD_INT 4
10889: PUSH
10890: LD_INT 5
10892: PUSH
10893: LD_INT 5
10895: PUSH
10896: LD_INT 6
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: PUSH
10905: LD_OWVAR 67
10909: ARRAY
10910: PPUSH
10911: CALL_OW 380
// un := CreateHuman ;
10915: LD_ADDR_VAR 0 5
10919: PUSH
10920: CALL_OW 44
10924: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
10925: LD_VAR 0 5
10929: PPUSH
10930: LD_INT 66
10932: PPUSH
10933: LD_INT 101
10935: PPUSH
10936: LD_INT 3
10938: PPUSH
10939: LD_INT 0
10941: PPUSH
10942: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10946: LD_ADDR_EXP 55
10950: PUSH
10951: LD_EXP 55
10955: PPUSH
10956: LD_EXP 55
10960: PUSH
10961: LD_INT 1
10963: PLUS
10964: PPUSH
10965: LD_VAR 0 5
10969: PPUSH
10970: CALL_OW 1
10974: ST_TO_ADDR
// end ;
10975: GO 10878
10977: POP
10978: POP
// tmp := [ ruFac1 , ruFac2 ] ;
10979: LD_ADDR_VAR 0 7
10983: PUSH
10984: LD_INT 72
10986: PUSH
10987: LD_INT 12
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: ST_TO_ADDR
// for i := 1 to tmp do
10994: LD_ADDR_VAR 0 2
10998: PUSH
10999: DOUBLE
11000: LD_INT 1
11002: DEC
11003: ST_TO_ADDR
11004: LD_VAR 0 7
11008: PUSH
11009: FOR_TO
11010: IFFALSE 11127
// for j := 1 to 6 do
11012: LD_ADDR_VAR 0 3
11016: PUSH
11017: DOUBLE
11018: LD_INT 1
11020: DEC
11021: ST_TO_ADDR
11022: LD_INT 6
11024: PUSH
11025: FOR_TO
11026: IFFALSE 11123
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11028: LD_INT 0
11030: PPUSH
11031: LD_INT 3
11033: PPUSH
11034: LD_INT 4
11036: PUSH
11037: LD_INT 5
11039: PUSH
11040: LD_INT 5
11042: PUSH
11043: LD_INT 6
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: PUSH
11052: LD_OWVAR 67
11056: ARRAY
11057: PPUSH
11058: CALL_OW 380
// un := CreateHuman ;
11062: LD_ADDR_VAR 0 5
11066: PUSH
11067: CALL_OW 44
11071: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
11072: LD_VAR 0 5
11076: PPUSH
11077: LD_VAR 0 7
11081: PUSH
11082: LD_VAR 0 2
11086: ARRAY
11087: PPUSH
11088: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11092: LD_ADDR_EXP 55
11096: PUSH
11097: LD_EXP 55
11101: PPUSH
11102: LD_EXP 55
11106: PUSH
11107: LD_INT 1
11109: PLUS
11110: PPUSH
11111: LD_VAR 0 5
11115: PPUSH
11116: CALL_OW 1
11120: ST_TO_ADDR
// end ;
11121: GO 11025
11123: POP
11124: POP
11125: GO 11009
11127: POP
11128: POP
// for i := 1 to 3 do
11129: LD_ADDR_VAR 0 2
11133: PUSH
11134: DOUBLE
11135: LD_INT 1
11137: DEC
11138: ST_TO_ADDR
11139: LD_INT 3
11141: PUSH
11142: FOR_TO
11143: IFFALSE 11232
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11145: LD_INT 0
11147: PPUSH
11148: LD_INT 4
11150: PPUSH
11151: LD_INT 4
11153: PUSH
11154: LD_INT 5
11156: PUSH
11157: LD_INT 5
11159: PUSH
11160: LD_INT 6
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PUSH
11169: LD_OWVAR 67
11173: ARRAY
11174: PPUSH
11175: CALL_OW 380
// un := CreateHuman ;
11179: LD_ADDR_VAR 0 5
11183: PUSH
11184: CALL_OW 44
11188: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
11189: LD_VAR 0 5
11193: PPUSH
11194: LD_INT 17
11196: PPUSH
11197: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11201: LD_ADDR_EXP 55
11205: PUSH
11206: LD_EXP 55
11210: PPUSH
11211: LD_EXP 55
11215: PUSH
11216: LD_INT 1
11218: PLUS
11219: PPUSH
11220: LD_VAR 0 5
11224: PPUSH
11225: CALL_OW 1
11229: ST_TO_ADDR
// end ;
11230: GO 11142
11232: POP
11233: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
11234: LD_ADDR_VAR 0 2
11238: PUSH
11239: DOUBLE
11240: LD_INT 1
11242: DEC
11243: ST_TO_ADDR
11244: LD_INT 2
11246: PUSH
11247: LD_INT 3
11249: PUSH
11250: LD_INT 3
11252: PUSH
11253: LD_INT 3
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: PUSH
11262: LD_OWVAR 67
11266: ARRAY
11267: PUSH
11268: FOR_TO
11269: IFFALSE 11389
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
11271: LD_INT 22
11273: PPUSH
11274: LD_INT 1
11276: PPUSH
11277: LD_INT 1
11279: PPUSH
11280: LD_INT 52
11282: PPUSH
11283: LD_INT 100
11285: PPUSH
11286: CALL 30310 0 5
// veh := CreateVehicle ;
11290: LD_ADDR_VAR 0 6
11294: PUSH
11295: CALL_OW 45
11299: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
11300: LD_INT 0
11302: PPUSH
11303: LD_INT 3
11305: PPUSH
11306: LD_INT 4
11308: PPUSH
11309: CALL_OW 380
// un := CreateHuman ;
11313: LD_ADDR_VAR 0 5
11317: PUSH
11318: CALL_OW 44
11322: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
11323: LD_VAR 0 6
11327: PPUSH
11328: LD_INT 107
11330: PPUSH
11331: LD_INT 182
11333: PPUSH
11334: LD_INT 4
11336: PPUSH
11337: LD_INT 0
11339: PPUSH
11340: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
11344: LD_VAR 0 5
11348: PPUSH
11349: LD_VAR 0 6
11353: PPUSH
11354: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11358: LD_ADDR_EXP 55
11362: PUSH
11363: LD_EXP 55
11367: PPUSH
11368: LD_EXP 55
11372: PUSH
11373: LD_INT 1
11375: PLUS
11376: PPUSH
11377: LD_VAR 0 5
11381: PPUSH
11382: CALL_OW 1
11386: ST_TO_ADDR
// end ;
11387: GO 11268
11389: POP
11390: POP
// InitHc ;
11391: CALL_OW 19
// for i := 1 to [ 6 , 8 , 10 , 12 ] [ Difficulty ] do
11395: LD_ADDR_VAR 0 2
11399: PUSH
11400: DOUBLE
11401: LD_INT 1
11403: DEC
11404: ST_TO_ADDR
11405: LD_INT 6
11407: PUSH
11408: LD_INT 8
11410: PUSH
11411: LD_INT 10
11413: PUSH
11414: LD_INT 12
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: PUSH
11423: LD_OWVAR 67
11427: ARRAY
11428: PUSH
11429: FOR_TO
11430: IFFALSE 11502
// begin uc_nation := 0 ;
11432: LD_ADDR_OWVAR 21
11436: PUSH
11437: LD_INT 0
11439: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
11440: LD_ADDR_OWVAR 28
11444: PUSH
11445: LD_INT 15
11447: ST_TO_ADDR
// un := CreateHuman ;
11448: LD_ADDR_VAR 0 5
11452: PUSH
11453: CALL_OW 44
11457: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
11458: LD_VAR 0 5
11462: PPUSH
11463: LD_INT 269
11465: PUSH
11466: LD_INT 300
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PUSH
11473: LD_VAR 0 2
11477: PUSH
11478: LD_INT 2
11480: MOD
11481: PUSH
11482: LD_INT 1
11484: PLUS
11485: ARRAY
11486: PPUSH
11487: LD_INT 182
11489: PPUSH
11490: LD_INT 4
11492: PPUSH
11493: LD_INT 0
11495: PPUSH
11496: CALL_OW 50
// end ;
11500: GO 11429
11502: POP
11503: POP
// uc_nation := 3 ;
11504: LD_ADDR_OWVAR 21
11508: PUSH
11509: LD_INT 3
11511: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
11512: LD_EXP 8
11516: PUSH
11517: LD_INT 10
11519: PUSH
11520: LD_INT 8
11522: PUSH
11523: LD_INT 6
11525: PUSH
11526: LD_INT 5
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: PUSH
11535: LD_OWVAR 67
11539: ARRAY
11540: LESS
11541: IFFALSE 11620
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
11543: LD_INT 21
11545: PPUSH
11546: LD_INT 1
11548: PPUSH
11549: LD_INT 1
11551: PPUSH
11552: LD_INT 51
11554: PPUSH
11555: LD_INT 12
11557: PPUSH
11558: CALL 30310 0 5
// veh := CreateVehicle ;
11562: LD_ADDR_VAR 0 6
11566: PUSH
11567: CALL_OW 45
11571: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
11572: LD_VAR 0 6
11576: PPUSH
11577: LD_INT 269
11579: PPUSH
11580: LD_INT 66
11582: PPUSH
11583: LD_INT 4
11585: PPUSH
11586: LD_INT 0
11588: PPUSH
11589: CALL 64836 0 5
// SetLives ( veh , 333 ) ;
11593: LD_VAR 0 6
11597: PPUSH
11598: LD_INT 333
11600: PPUSH
11601: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
11605: LD_VAR 0 6
11609: PPUSH
11610: LD_INT 2
11612: PPUSH
11613: LD_INT 100
11615: PPUSH
11616: CALL_OW 290
// end ; end ;
11620: LD_VAR 0 1
11624: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
11625: LD_EXP 51
11629: PUSH
11630: LD_EXP 51
11634: PPUSH
11635: CALL_OW 255
11639: PUSH
11640: LD_INT 3
11642: EQUAL
11643: AND
11644: IFFALSE 11807
11646: GO 11648
11648: DISABLE
11649: LD_INT 0
11651: PPUSH
// begin enable ;
11652: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
11653: LD_INT 81
11655: PUSH
11656: LD_INT 3
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PUSH
11663: LD_INT 91
11665: PUSH
11666: LD_EXP 51
11670: PUSH
11671: LD_INT 15
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: LIST
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PPUSH
11683: CALL_OW 69
11687: IFFALSE 11767
// begin if not IsDrivenBy ( ruBlockadeTank ) then
11689: LD_EXP 51
11693: PPUSH
11694: CALL_OW 311
11698: NOT
11699: IFFALSE 11765
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
11701: LD_ADDR_VAR 0 1
11705: PUSH
11706: LD_INT 22
11708: PUSH
11709: LD_INT 3
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: LD_INT 21
11718: PUSH
11719: LD_INT 1
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PPUSH
11730: CALL_OW 69
11734: PPUSH
11735: LD_EXP 51
11739: PPUSH
11740: CALL_OW 74
11744: ST_TO_ADDR
// if driver then
11745: LD_VAR 0 1
11749: IFFALSE 11765
// ComEnterUnit ( driver , ruBlockadeTank ) ;
11751: LD_VAR 0 1
11755: PPUSH
11756: LD_EXP 51
11760: PPUSH
11761: CALL_OW 120
// end ; exit ;
11765: GO 11807
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
11767: LD_EXP 51
11771: PPUSH
11772: CALL_OW 256
11776: PUSH
11777: LD_INT 1000
11779: LESS
11780: PUSH
11781: LD_EXP 51
11785: PPUSH
11786: CALL_OW 311
11790: AND
11791: IFFALSE 11807
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
11793: LD_EXP 51
11797: PPUSH
11798: CALL_OW 311
11802: PPUSH
11803: CALL 64396 0 1
// end ;
11807: PPOPN 1
11809: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
11810: LD_EXP 53
11814: PPUSH
11815: LD_INT 3
11817: PUSH
11818: LD_INT 24
11820: PUSH
11821: LD_INT 1000
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PPUSH
11832: CALL_OW 72
11836: PUSH
11837: LD_EXP 53
11841: PPUSH
11842: LD_INT 25
11844: PUSH
11845: LD_INT 4
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: LD_INT 50
11854: PUSH
11855: EMPTY
11856: LIST
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PPUSH
11862: CALL_OW 72
11866: AND
11867: IFFALSE 12055
11869: GO 11871
11871: DISABLE
11872: LD_INT 0
11874: PPUSH
11875: PPUSH
11876: PPUSH
// begin enable ;
11877: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
11878: LD_ADDR_VAR 0 3
11882: PUSH
11883: LD_EXP 53
11887: PPUSH
11888: LD_INT 3
11890: PUSH
11891: LD_INT 24
11893: PUSH
11894: LD_INT 1000
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PPUSH
11905: CALL_OW 72
11909: PPUSH
11910: LD_INT 1
11912: PPUSH
11913: CALL 64636 0 2
11917: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
11918: LD_ADDR_VAR 0 2
11922: PUSH
11923: LD_EXP 53
11927: PPUSH
11928: LD_INT 25
11930: PUSH
11931: LD_INT 4
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 50
11940: PUSH
11941: EMPTY
11942: LIST
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PPUSH
11948: CALL_OW 72
11952: PUSH
11953: LD_INT 1
11955: ARRAY
11956: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
11957: LD_VAR 0 2
11961: PPUSH
11962: LD_VAR 0 3
11966: PUSH
11967: LD_INT 1
11969: ARRAY
11970: PPUSH
11971: CALL 59980 0 2
11975: NOT
11976: IFFALSE 12055
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
11978: LD_VAR 0 3
11982: PUSH
11983: LD_INT 1
11985: ARRAY
11986: PPUSH
11987: LD_INT 9
11989: PPUSH
11990: CALL_OW 308
11994: NOT
11995: IFFALSE 12013
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
11997: LD_VAR 0 3
12001: PUSH
12002: LD_INT 1
12004: ARRAY
12005: PPUSH
12006: LD_INT 9
12008: PPUSH
12009: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
12013: LD_VAR 0 2
12017: PPUSH
12018: LD_VAR 0 3
12022: PUSH
12023: LD_INT 1
12025: ARRAY
12026: PPUSH
12027: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
12031: LD_VAR 0 2
12035: PPUSH
12036: LD_INT 179
12038: PPUSH
12039: LD_INT 113
12041: PPUSH
12042: CALL_OW 171
// AddComHold ( sci ) ;
12046: LD_VAR 0 2
12050: PPUSH
12051: CALL_OW 200
// end ; end ;
12055: PPOPN 3
12057: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
12058: LD_INT 2
12060: PPUSH
12061: LD_INT 52
12063: PPUSH
12064: CALL_OW 292
12068: IFFALSE 12173
12070: GO 12072
12072: DISABLE
12073: LD_INT 0
12075: PPUSH
12076: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
12077: LD_ADDR_VAR 0 2
12081: PUSH
12082: LD_EXP 55
12086: PPUSH
12087: LD_INT 25
12089: PUSH
12090: LD_INT 1
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PUSH
12097: LD_INT 50
12099: PUSH
12100: EMPTY
12101: LIST
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: PPUSH
12107: CALL_OW 72
12111: ST_TO_ADDR
// if not tmp then
12112: LD_VAR 0 2
12116: NOT
12117: IFFALSE 12121
// exit ;
12119: GO 12173
// for i in tmp do
12121: LD_ADDR_VAR 0 1
12125: PUSH
12126: LD_VAR 0 2
12130: PUSH
12131: FOR_IN
12132: IFFALSE 12171
// begin if IsInUnit ( i ) then
12134: LD_VAR 0 1
12138: PPUSH
12139: CALL_OW 310
12143: IFFALSE 12154
// ComExitBuilding ( i ) ;
12145: LD_VAR 0 1
12149: PPUSH
12150: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
12154: LD_VAR 0 1
12158: PPUSH
12159: LD_INT 84
12161: PPUSH
12162: LD_INT 133
12164: PPUSH
12165: CALL_OW 174
// end ;
12169: GO 12131
12171: POP
12172: POP
// end ;
12173: PPOPN 2
12175: END
// every 0 0$1 trigger leninSpotted do var i , tmp , weapon ;
12176: LD_EXP 14
12180: IFFALSE 12340
12182: GO 12184
12184: DISABLE
12185: LD_INT 0
12187: PPUSH
12188: PPUSH
12189: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
12190: LD_ADDR_VAR 0 2
12194: PUSH
12195: LD_INT 72
12197: PUSH
12198: LD_INT 12
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
12205: LD_ADDR_VAR 0 3
12209: PUSH
12210: LD_INT 44
12212: PUSH
12213: LD_INT 43
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 45
12222: PUSH
12223: LD_INT 44
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 45
12232: PUSH
12233: LD_INT 46
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PUSH
12240: LD_INT 45
12242: PUSH
12243: LD_INT 46
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: PUSH
12256: LD_OWVAR 67
12260: ARRAY
12261: ST_TO_ADDR
// for i := 1 to 6 do
12262: LD_ADDR_VAR 0 1
12266: PUSH
12267: DOUBLE
12268: LD_INT 1
12270: DEC
12271: ST_TO_ADDR
12272: LD_INT 6
12274: PUSH
12275: FOR_TO
12276: IFFALSE 12338
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
12278: LD_VAR 0 2
12282: PPUSH
12283: LD_INT 22
12285: PUSH
12286: LD_INT 23
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: LD_VAR 0 1
12297: PUSH
12298: LD_INT 2
12300: MOD
12301: PUSH
12302: LD_INT 1
12304: PLUS
12305: ARRAY
12306: PPUSH
12307: LD_INT 1
12309: PPUSH
12310: LD_INT 1
12312: PPUSH
12313: LD_VAR 0 3
12317: PUSH
12318: LD_VAR 0 1
12322: PUSH
12323: LD_INT 2
12325: MOD
12326: PUSH
12327: LD_INT 1
12329: PLUS
12330: ARRAY
12331: PPUSH
12332: CALL_OW 185
12336: GO 12275
12338: POP
12339: POP
// end ;
12340: PPOPN 3
12342: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
12343: LD_EXP 11
12347: IFFALSE 13496
12349: GO 12351
12351: DISABLE
12352: LD_INT 0
12354: PPUSH
12355: PPUSH
12356: PPUSH
12357: PPUSH
12358: PPUSH
12359: PPUSH
// begin enable ;
12360: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
12361: LD_ADDR_VAR 0 6
12365: PUSH
12366: LD_INT 10
12368: PPUSH
12369: LD_INT 81
12371: PUSH
12372: LD_INT 3
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PPUSH
12379: CALL_OW 70
12383: ST_TO_ADDR
// if ruSpecialVehicleGroup then
12384: LD_EXP 56
12388: IFFALSE 12654
// begin for i in ruSpecialVehicleGroup do
12390: LD_ADDR_VAR 0 1
12394: PUSH
12395: LD_EXP 56
12399: PUSH
12400: FOR_IN
12401: IFFALSE 12652
// begin if enemyInBase then
12403: LD_VAR 0 6
12407: IFFALSE 12650
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
12409: LD_VAR 0 1
12413: PPUSH
12414: CALL_OW 256
12418: PUSH
12419: LD_INT 500
12421: GREATER
12422: PUSH
12423: LD_VAR 0 1
12427: PPUSH
12428: CALL_OW 110
12432: PUSH
12433: LD_INT 0
12435: EQUAL
12436: AND
12437: IFFALSE 12463
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
12439: LD_VAR 0 1
12443: PPUSH
12444: LD_VAR 0 6
12448: PPUSH
12449: LD_VAR 0 1
12453: PPUSH
12454: CALL_OW 74
12458: PPUSH
12459: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12463: LD_VAR 0 1
12467: PPUSH
12468: CALL_OW 256
12472: PUSH
12473: LD_INT 500
12475: LESSEQUAL
12476: PUSH
12477: LD_VAR 0 1
12481: PPUSH
12482: CALL_OW 110
12486: PUSH
12487: LD_INT 0
12489: EQUAL
12490: AND
12491: IFFALSE 12520
// begin SetTag ( i , 1 ) ;
12493: LD_VAR 0 1
12497: PPUSH
12498: LD_INT 1
12500: PPUSH
12501: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
12505: LD_VAR 0 1
12509: PPUSH
12510: LD_INT 83
12512: PPUSH
12513: LD_INT 134
12515: PPUSH
12516: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
12520: LD_VAR 0 1
12524: PPUSH
12525: CALL_OW 256
12529: PUSH
12530: LD_INT 1000
12532: LESS
12533: PUSH
12534: LD_VAR 0 1
12538: PPUSH
12539: CALL_OW 110
12543: PUSH
12544: LD_INT 1
12546: EQUAL
12547: AND
12548: PUSH
12549: LD_VAR 0 1
12553: PPUSH
12554: LD_INT 83
12556: PPUSH
12557: LD_INT 134
12559: PPUSH
12560: CALL_OW 297
12564: PUSH
12565: LD_INT 6
12567: LESS
12568: AND
12569: IFFALSE 12597
// begin SetFuel ( i , 100 ) ;
12571: LD_VAR 0 1
12575: PPUSH
12576: LD_INT 100
12578: PPUSH
12579: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12583: LD_VAR 0 1
12587: PPUSH
12588: CALL_OW 310
12592: PPUSH
12593: CALL 64516 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
12597: LD_VAR 0 1
12601: PPUSH
12602: CALL_OW 256
12606: PUSH
12607: LD_INT 1000
12609: EQUAL
12610: PUSH
12611: LD_VAR 0 1
12615: PPUSH
12616: CALL_OW 110
12620: PUSH
12621: LD_INT 1
12623: EQUAL
12624: AND
12625: PUSH
12626: LD_VAR 0 1
12630: PPUSH
12631: CALL_OW 311
12635: AND
12636: IFFALSE 12650
// SetTag ( i , 0 ) ;
12638: LD_VAR 0 1
12642: PPUSH
12643: LD_INT 0
12645: PPUSH
12646: CALL_OW 109
// end ; end ;
12650: GO 12400
12652: POP
12653: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
12654: LD_ADDR_VAR 0 5
12658: PUSH
12659: LD_EXP 55
12663: PPUSH
12664: LD_INT 25
12666: PUSH
12667: LD_INT 4
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PPUSH
12674: CALL_OW 72
12678: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12679: LD_ADDR_VAR 0 4
12683: PUSH
12684: LD_EXP 55
12688: PPUSH
12689: LD_INT 92
12691: PUSH
12692: LD_INT 92
12694: PUSH
12695: LD_INT 155
12697: PUSH
12698: LD_INT 12
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: PUSH
12707: LD_INT 3
12709: PUSH
12710: LD_INT 24
12712: PUSH
12713: LD_INT 1000
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PPUSH
12728: CALL_OW 72
12732: ST_TO_ADDR
// if sci then
12733: LD_VAR 0 5
12737: IFFALSE 12870
// begin if hurt then
12739: LD_VAR 0 4
12743: IFFALSE 12816
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12745: LD_VAR 0 5
12749: PPUSH
12750: LD_INT 3
12752: PUSH
12753: LD_INT 54
12755: PUSH
12756: EMPTY
12757: LIST
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PPUSH
12763: CALL_OW 72
12767: IFFALSE 12796
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
12769: LD_VAR 0 5
12773: PPUSH
12774: LD_INT 3
12776: PUSH
12777: LD_INT 54
12779: PUSH
12780: EMPTY
12781: LIST
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PPUSH
12787: CALL_OW 72
12791: PPUSH
12792: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
12796: LD_VAR 0 5
12800: PPUSH
12801: LD_VAR 0 4
12805: PUSH
12806: LD_INT 1
12808: ARRAY
12809: PPUSH
12810: CALL_OW 188
// end else
12814: GO 12870
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12816: LD_VAR 0 5
12820: PPUSH
12821: LD_INT 3
12823: PUSH
12824: LD_INT 54
12826: PUSH
12827: EMPTY
12828: LIST
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PPUSH
12834: CALL_OW 72
12838: IFFALSE 12870
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
12840: LD_VAR 0 5
12844: PPUSH
12845: LD_INT 3
12847: PUSH
12848: LD_INT 54
12850: PUSH
12851: EMPTY
12852: LIST
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PPUSH
12858: CALL_OW 72
12862: PPUSH
12863: LD_INT 17
12865: PPUSH
12866: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12870: LD_ADDR_VAR 0 3
12874: PUSH
12875: LD_INT 10
12877: PPUSH
12878: LD_INT 21
12880: PUSH
12881: LD_INT 3
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: PUSH
12888: LD_INT 3
12890: PUSH
12891: LD_INT 24
12893: PUSH
12894: LD_INT 1000
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PPUSH
12909: CALL_OW 70
12913: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
12914: LD_ADDR_VAR 0 2
12918: PUSH
12919: LD_EXP 55
12923: PPUSH
12924: LD_INT 25
12926: PUSH
12927: LD_INT 2
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: PPUSH
12934: CALL_OW 72
12938: PUSH
12939: LD_INT 22
12941: PUSH
12942: LD_INT 3
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 34
12951: PUSH
12952: LD_INT 52
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PPUSH
12963: CALL_OW 69
12967: UNION
12968: ST_TO_ADDR
// if not tmp then
12969: LD_VAR 0 2
12973: NOT
12974: IFFALSE 12978
// exit ;
12976: GO 13496
// for i in tmp do
12978: LD_ADDR_VAR 0 1
12982: PUSH
12983: LD_VAR 0 2
12987: PUSH
12988: FOR_IN
12989: IFFALSE 13494
// begin if GetClass ( i ) = 2 then
12991: LD_VAR 0 1
12995: PPUSH
12996: CALL_OW 257
13000: PUSH
13001: LD_INT 2
13003: EQUAL
13004: IFFALSE 13227
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
13006: LD_VAR 0 1
13010: PPUSH
13011: CALL_OW 256
13015: PUSH
13016: LD_INT 1000
13018: EQUAL
13019: PUSH
13020: LD_VAR 0 1
13024: PPUSH
13025: CALL_OW 110
13029: PUSH
13030: LD_INT 1
13032: EQUAL
13033: AND
13034: IFFALSE 13048
// SetTag ( i , 0 ) ;
13036: LD_VAR 0 1
13040: PPUSH
13041: LD_INT 0
13043: PPUSH
13044: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
13048: LD_VAR 0 1
13052: PPUSH
13053: CALL_OW 256
13057: PUSH
13058: LD_INT 500
13060: LESSEQUAL
13061: PUSH
13062: LD_VAR 0 1
13066: PPUSH
13067: CALL_OW 110
13071: PUSH
13072: LD_INT 0
13074: EQUAL
13075: AND
13076: IFFALSE 13105
// begin SetTag ( i , 1 ) ;
13078: LD_VAR 0 1
13082: PPUSH
13083: LD_INT 1
13085: PPUSH
13086: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
13090: LD_VAR 0 1
13094: PPUSH
13095: LD_INT 92
13097: PPUSH
13098: LD_INT 155
13100: PPUSH
13101: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
13105: LD_VAR 0 3
13109: PUSH
13110: LD_VAR 0 1
13114: PPUSH
13115: CALL_OW 256
13119: PUSH
13120: LD_INT 500
13122: GREATER
13123: AND
13124: PUSH
13125: LD_VAR 0 1
13129: PPUSH
13130: CALL_OW 110
13134: PUSH
13135: LD_INT 0
13137: EQUAL
13138: AND
13139: PUSH
13140: LD_VAR 0 1
13144: PPUSH
13145: CALL_OW 314
13149: NOT
13150: AND
13151: IFFALSE 13225
// begin if b then
13153: LD_VAR 0 3
13157: IFFALSE 13189
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
13159: LD_VAR 0 1
13163: PPUSH
13164: LD_VAR 0 3
13168: PUSH
13169: LD_INT 1
13171: PPUSH
13172: LD_VAR 0 3
13176: PPUSH
13177: CALL_OW 12
13181: ARRAY
13182: PPUSH
13183: CALL_OW 130
13187: GO 13225
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13189: LD_VAR 0 1
13193: PPUSH
13194: LD_INT 94
13196: PPUSH
13197: LD_INT 165
13199: PPUSH
13200: CALL_OW 297
13204: PUSH
13205: LD_INT 8
13207: GREATER
13208: IFFALSE 13225
// ComMoveXY ( i , 94 , 165 ) ;
13210: LD_VAR 0 1
13214: PPUSH
13215: LD_INT 94
13217: PPUSH
13218: LD_INT 165
13220: PPUSH
13221: CALL_OW 111
// end ; end else
13225: GO 13492
// if GetWeapon ( i ) = ru_crane then
13227: LD_VAR 0 1
13231: PPUSH
13232: CALL_OW 264
13236: PUSH
13237: LD_INT 52
13239: EQUAL
13240: IFFALSE 13492
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
13242: LD_VAR 0 1
13246: PPUSH
13247: CALL_OW 256
13251: PUSH
13252: LD_INT 1000
13254: EQUAL
13255: PUSH
13256: LD_VAR 0 1
13260: PPUSH
13261: CALL_OW 110
13265: PUSH
13266: LD_INT 1
13268: EQUAL
13269: AND
13270: IFFALSE 13296
// begin SetTag ( i , 0 ) ;
13272: LD_VAR 0 1
13276: PPUSH
13277: LD_INT 0
13279: PPUSH
13280: CALL_OW 109
// SetFuel ( i , 100 ) ;
13284: LD_VAR 0 1
13288: PPUSH
13289: LD_INT 100
13291: PPUSH
13292: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
13296: LD_VAR 0 1
13300: PPUSH
13301: CALL_OW 256
13305: PUSH
13306: LD_INT 500
13308: LESSEQUAL
13309: PUSH
13310: LD_VAR 0 1
13314: PPUSH
13315: CALL_OW 110
13319: PUSH
13320: LD_INT 0
13322: EQUAL
13323: AND
13324: IFFALSE 13367
// begin SetTag ( i , 1 ) ;
13326: LD_VAR 0 1
13330: PPUSH
13331: LD_INT 1
13333: PPUSH
13334: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
13338: LD_VAR 0 1
13342: PPUSH
13343: LD_INT 83
13345: PPUSH
13346: LD_INT 135
13348: PPUSH
13349: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
13353: LD_VAR 0 1
13357: PPUSH
13358: CALL_OW 310
13362: PPUSH
13363: CALL 64516 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
13367: LD_VAR 0 1
13371: PPUSH
13372: CALL_OW 256
13376: PUSH
13377: LD_INT 500
13379: GREATER
13380: PUSH
13381: LD_VAR 0 1
13385: PPUSH
13386: CALL_OW 110
13390: PUSH
13391: LD_INT 0
13393: EQUAL
13394: AND
13395: PUSH
13396: LD_VAR 0 1
13400: PPUSH
13401: CALL_OW 311
13405: AND
13406: PUSH
13407: LD_VAR 0 1
13411: PPUSH
13412: CALL_OW 314
13416: NOT
13417: AND
13418: IFFALSE 13492
// begin if b then
13420: LD_VAR 0 3
13424: IFFALSE 13456
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
13426: LD_VAR 0 1
13430: PPUSH
13431: LD_VAR 0 3
13435: PUSH
13436: LD_INT 1
13438: PPUSH
13439: LD_VAR 0 3
13443: PPUSH
13444: CALL_OW 12
13448: ARRAY
13449: PPUSH
13450: CALL_OW 130
13454: GO 13492
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13456: LD_VAR 0 1
13460: PPUSH
13461: LD_INT 94
13463: PPUSH
13464: LD_INT 165
13466: PPUSH
13467: CALL_OW 297
13471: PUSH
13472: LD_INT 8
13474: GREATER
13475: IFFALSE 13492
// ComMoveXY ( i , 94 , 165 ) ;
13477: LD_VAR 0 1
13481: PPUSH
13482: LD_INT 94
13484: PPUSH
13485: LD_INT 165
13487: PPUSH
13488: CALL_OW 111
// end ; end ; end ;
13492: GO 12988
13494: POP
13495: POP
// end ;
13496: PPOPN 6
13498: END
// every 8 8$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp ;
13499: LD_EXP 23
13503: NOT
13504: PUSH
13505: LD_EXP 27
13509: NOT
13510: AND
13511: IFFALSE 14427
13513: GO 13515
13515: DISABLE
13516: LD_INT 0
13518: PPUSH
13519: PPUSH
13520: PPUSH
13521: PPUSH
// begin enable ;
13522: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
13523: LD_INT 35
13525: PUSH
13526: LD_INT 45
13528: PUSH
13529: LD_INT 55
13531: PUSH
13532: LD_INT 60
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: PUSH
13541: LD_OWVAR 67
13545: ARRAY
13546: PPUSH
13547: CALL_OW 13
13551: IFFALSE 13567
// waveStrength := waveStrength + 1 ;
13553: LD_ADDR_EXP 58
13557: PUSH
13558: LD_EXP 58
13562: PUSH
13563: LD_INT 1
13565: PLUS
13566: ST_TO_ADDR
// if waveStrength > [ 4 , 5 , 6 , 7 ] [ Difficulty ] then
13567: LD_EXP 58
13571: PUSH
13572: LD_INT 4
13574: PUSH
13575: LD_INT 5
13577: PUSH
13578: LD_INT 6
13580: PUSH
13581: LD_INT 7
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: PUSH
13590: LD_OWVAR 67
13594: ARRAY
13595: GREATER
13596: IFFALSE 13629
// begin waveStrength := waveStrength + Difficulty ;
13598: LD_ADDR_EXP 58
13602: PUSH
13603: LD_EXP 58
13607: PUSH
13608: LD_OWVAR 67
13612: PLUS
13613: ST_TO_ADDR
// disableAttackOnHeike := true ;
13614: LD_ADDR_EXP 27
13618: PUSH
13619: LD_INT 1
13621: ST_TO_ADDR
// wait ( 3 3$00 ) ;
13622: LD_INT 6300
13624: PPUSH
13625: CALL_OW 67
// end ; if disableAttackOnHeike and Difficulty > 1 then
13629: LD_EXP 27
13633: PUSH
13634: LD_OWVAR 67
13638: PUSH
13639: LD_INT 1
13641: GREATER
13642: AND
13643: IFFALSE 13852
// begin for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
13645: LD_ADDR_VAR 0 1
13649: PUSH
13650: DOUBLE
13651: LD_INT 1
13653: DEC
13654: ST_TO_ADDR
13655: LD_INT 3
13657: PUSH
13658: LD_INT 3
13660: PUSH
13661: LD_INT 4
13663: PUSH
13664: LD_INT 4
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PUSH
13673: LD_OWVAR 67
13677: ARRAY
13678: PUSH
13679: FOR_TO
13680: IFFALSE 13850
// begin InitHc ;
13682: CALL_OW 19
// InitVc ;
13686: CALL_OW 20
// uc_side := 3 ;
13690: LD_ADDR_OWVAR 20
13694: PUSH
13695: LD_INT 3
13697: ST_TO_ADDR
// uc_nation := 3 ;
13698: LD_ADDR_OWVAR 21
13702: PUSH
13703: LD_INT 3
13705: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
13706: LD_INT 0
13708: PPUSH
13709: LD_INT 1
13711: PPUSH
13712: LD_OWVAR 67
13716: PUSH
13717: LD_INT 2
13719: PLUS
13720: PPUSH
13721: CALL_OW 380
// un := CreateHuman ;
13725: LD_ADDR_VAR 0 2
13729: PUSH
13730: CALL_OW 44
13734: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
13735: LD_VAR 0 2
13739: PPUSH
13740: LD_INT 160
13742: PPUSH
13743: LD_INT 3
13745: PPUSH
13746: LD_INT 2
13748: PPUSH
13749: LD_INT 0
13751: PPUSH
13752: CALL 64836 0 5
// SetClass ( un , class_bazooker ) ;
13756: LD_VAR 0 2
13760: PPUSH
13761: LD_INT 9
13763: PPUSH
13764: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13768: LD_ADDR_EXP 57
13772: PUSH
13773: LD_EXP 57
13777: PPUSH
13778: LD_EXP 57
13782: PUSH
13783: LD_INT 1
13785: PLUS
13786: PPUSH
13787: LD_VAR 0 2
13791: PPUSH
13792: CALL_OW 1
13796: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13797: LD_VAR 0 2
13801: PPUSH
13802: LD_INT 177
13804: PPUSH
13805: LD_INT 17
13807: PPUSH
13808: CALL_OW 111
// wait ( 0 0$2 ) ;
13812: LD_INT 70
13814: PPUSH
13815: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13819: LD_ADDR_VAR 0 4
13823: PUSH
13824: LD_VAR 0 4
13828: PPUSH
13829: LD_VAR 0 4
13833: PUSH
13834: LD_INT 1
13836: PLUS
13837: PPUSH
13838: LD_VAR 0 2
13842: PPUSH
13843: CALL_OW 1
13847: ST_TO_ADDR
// end ;
13848: GO 13679
13850: POP
13851: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] + waveStrength do
13852: LD_ADDR_VAR 0 1
13856: PUSH
13857: DOUBLE
13858: LD_INT 1
13860: DEC
13861: ST_TO_ADDR
13862: LD_INT 2
13864: PUSH
13865: LD_INT 3
13867: PUSH
13868: LD_INT 4
13870: PUSH
13871: LD_INT 5
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: PUSH
13880: LD_OWVAR 67
13884: ARRAY
13885: PUSH
13886: LD_EXP 58
13890: PLUS
13891: PUSH
13892: FOR_TO
13893: IFFALSE 14202
// begin InitHc ;
13895: CALL_OW 19
// InitVc ;
13899: CALL_OW 20
// uc_side := 3 ;
13903: LD_ADDR_OWVAR 20
13907: PUSH
13908: LD_INT 3
13910: ST_TO_ADDR
// uc_nation := 3 ;
13911: LD_ADDR_OWVAR 21
13915: PUSH
13916: LD_INT 3
13918: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
13919: LD_INT 22
13921: PUSH
13922: LD_INT 23
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PUSH
13929: LD_INT 1
13931: PPUSH
13932: LD_INT 2
13934: PPUSH
13935: CALL_OW 12
13939: ARRAY
13940: PPUSH
13941: LD_INT 1
13943: PPUSH
13944: LD_INT 1
13946: PPUSH
13947: LD_INT 44
13949: PUSH
13950: LD_INT 45
13952: PUSH
13953: LD_INT 43
13955: PUSH
13956: LD_INT 42
13958: PUSH
13959: LD_INT 44
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: PUSH
13969: LD_INT 1
13971: PPUSH
13972: LD_INT 5
13974: PPUSH
13975: CALL_OW 12
13979: ARRAY
13980: PPUSH
13981: LD_INT 99
13983: PPUSH
13984: CALL 30310 0 5
// veh := CreateVehicle ;
13988: LD_ADDR_VAR 0 3
13992: PUSH
13993: CALL_OW 45
13997: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
13998: LD_VAR 0 3
14002: PPUSH
14003: LD_INT 160
14005: PPUSH
14006: LD_INT 3
14008: PPUSH
14009: LD_INT 2
14011: PPUSH
14012: LD_INT 0
14014: PPUSH
14015: CALL 64836 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14019: LD_ADDR_EXP 57
14023: PUSH
14024: LD_EXP 57
14028: PPUSH
14029: LD_EXP 57
14033: PUSH
14034: LD_INT 1
14036: PLUS
14037: PPUSH
14038: LD_VAR 0 3
14042: PPUSH
14043: CALL_OW 1
14047: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14048: LD_INT 0
14050: PPUSH
14051: LD_INT 3
14053: PPUSH
14054: LD_OWVAR 67
14058: PUSH
14059: LD_INT 2
14061: PLUS
14062: PPUSH
14063: CALL_OW 380
// un := CreateHuman ;
14067: LD_ADDR_VAR 0 2
14071: PUSH
14072: CALL_OW 44
14076: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14077: LD_VAR 0 2
14081: PPUSH
14082: LD_VAR 0 3
14086: PPUSH
14087: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14091: LD_ADDR_EXP 57
14095: PUSH
14096: LD_EXP 57
14100: PPUSH
14101: LD_EXP 57
14105: PUSH
14106: LD_INT 1
14108: PLUS
14109: PPUSH
14110: LD_VAR 0 2
14114: PPUSH
14115: CALL_OW 1
14119: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
14120: LD_VAR 0 2
14124: PPUSH
14125: LD_INT 177
14127: PPUSH
14128: LD_INT 17
14130: PPUSH
14131: CALL_OW 111
// wait ( 0 0$2 ) ;
14135: LD_INT 70
14137: PPUSH
14138: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14142: LD_ADDR_VAR 0 4
14146: PUSH
14147: LD_VAR 0 4
14151: PPUSH
14152: LD_VAR 0 4
14156: PUSH
14157: LD_INT 1
14159: PLUS
14160: PPUSH
14161: LD_VAR 0 3
14165: PPUSH
14166: CALL_OW 1
14170: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14171: LD_ADDR_VAR 0 4
14175: PUSH
14176: LD_VAR 0 4
14180: PPUSH
14181: LD_VAR 0 4
14185: PUSH
14186: LD_INT 1
14188: PLUS
14189: PPUSH
14190: LD_VAR 0 2
14194: PPUSH
14195: CALL_OW 1
14199: ST_TO_ADDR
// end ;
14200: GO 13892
14202: POP
14203: POP
// for i in tmp do
14204: LD_ADDR_VAR 0 1
14208: PUSH
14209: LD_VAR 0 4
14213: PUSH
14214: FOR_IN
14215: IFFALSE 14305
// begin if Prob ( 50 ) then
14217: LD_INT 50
14219: PPUSH
14220: CALL_OW 13
14224: IFFALSE 14243
// ComAgressiveMove ( i , 206 , 73 ) else
14226: LD_VAR 0 1
14230: PPUSH
14231: LD_INT 206
14233: PPUSH
14234: LD_INT 73
14236: PPUSH
14237: CALL_OW 114
14241: GO 14303
// begin ComAgressiveMove ( i , 206 , 73 ) ;
14243: LD_VAR 0 1
14247: PPUSH
14248: LD_INT 206
14250: PPUSH
14251: LD_INT 73
14253: PPUSH
14254: CALL_OW 114
// AddComAgressiveMove ( i , 257 , 105 ) ;
14258: LD_VAR 0 1
14262: PPUSH
14263: LD_INT 257
14265: PPUSH
14266: LD_INT 105
14268: PPUSH
14269: CALL_OW 174
// AddComAgressiveMove ( i , 227 , 97 ) ;
14273: LD_VAR 0 1
14277: PPUSH
14278: LD_INT 227
14280: PPUSH
14281: LD_INT 97
14283: PPUSH
14284: CALL_OW 174
// AddComAgressiveMove ( i , 206 , 73 ) ;
14288: LD_VAR 0 1
14292: PPUSH
14293: LD_INT 206
14295: PPUSH
14296: LD_INT 73
14298: PPUSH
14299: CALL_OW 174
// end ; end ;
14303: GO 14214
14305: POP
14306: POP
// repeat wait ( 0 0$1 ) ;
14307: LD_INT 35
14309: PPUSH
14310: CALL_OW 67
// for i in tmp do
14314: LD_ADDR_VAR 0 1
14318: PUSH
14319: LD_VAR 0 4
14323: PUSH
14324: FOR_IN
14325: IFFALSE 14404
// if IsDead ( i ) then
14327: LD_VAR 0 1
14331: PPUSH
14332: CALL_OW 301
14336: IFFALSE 14356
// tmp := tmp diff i else
14338: LD_ADDR_VAR 0 4
14342: PUSH
14343: LD_VAR 0 4
14347: PUSH
14348: LD_VAR 0 1
14352: DIFF
14353: ST_TO_ADDR
14354: GO 14402
// if not HasTask ( i ) then
14356: LD_VAR 0 1
14360: PPUSH
14361: CALL_OW 314
14365: NOT
14366: IFFALSE 14402
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
14368: LD_VAR 0 1
14372: PPUSH
14373: LD_INT 81
14375: PUSH
14376: LD_INT 3
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PPUSH
14383: CALL_OW 69
14387: PPUSH
14388: LD_VAR 0 1
14392: PPUSH
14393: CALL_OW 74
14397: PPUSH
14398: CALL_OW 115
14402: GO 14324
14404: POP
14405: POP
// until not tmp ;
14406: LD_VAR 0 4
14410: NOT
14411: IFFALSE 14307
// if firstAttack then
14413: LD_EXP 28
14417: IFFALSE 14427
// firstAttack := false ;
14419: LD_ADDR_EXP 28
14423: PUSH
14424: LD_INT 0
14426: ST_TO_ADDR
// end ;
14427: PPOPN 4
14429: END
// every 8 8$00 trigger not omarAttack and bergkampfArrived and not rolfHasVehicles do var i , un , veh , tmp ;
14430: LD_EXP 23
14434: NOT
14435: PUSH
14436: LD_EXP 3
14440: AND
14441: PUSH
14442: LD_EXP 16
14446: NOT
14447: AND
14448: IFFALSE 15288
14450: GO 14452
14452: DISABLE
14453: LD_INT 0
14455: PPUSH
14456: PPUSH
14457: PPUSH
14458: PPUSH
// begin enable ;
14459: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
14460: LD_ADDR_VAR 0 1
14464: PUSH
14465: DOUBLE
14466: LD_INT 1
14468: DEC
14469: ST_TO_ADDR
14470: LD_INT 1
14472: PUSH
14473: LD_INT 2
14475: PUSH
14476: LD_INT 2
14478: PUSH
14479: LD_INT 3
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: PUSH
14488: LD_OWVAR 67
14492: ARRAY
14493: PUSH
14494: FOR_TO
14495: IFFALSE 14796
// begin InitHc ;
14497: CALL_OW 19
// InitVc ;
14501: CALL_OW 20
// uc_side := 3 ;
14505: LD_ADDR_OWVAR 20
14509: PUSH
14510: LD_INT 3
14512: ST_TO_ADDR
// uc_nation := 3 ;
14513: LD_ADDR_OWVAR 21
14517: PUSH
14518: LD_INT 3
14520: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14521: LD_INT 22
14523: PUSH
14524: LD_INT 23
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: LD_INT 1
14533: PPUSH
14534: LD_INT 2
14536: PPUSH
14537: CALL_OW 12
14541: ARRAY
14542: PPUSH
14543: LD_INT 1
14545: PPUSH
14546: LD_INT 1
14548: PPUSH
14549: LD_INT 44
14551: PUSH
14552: LD_INT 43
14554: PUSH
14555: LD_INT 42
14557: PUSH
14558: LD_INT 44
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: PUSH
14567: LD_INT 1
14569: PPUSH
14570: LD_INT 4
14572: PPUSH
14573: CALL_OW 12
14577: ARRAY
14578: PPUSH
14579: LD_INT 99
14581: PPUSH
14582: CALL 30310 0 5
// veh := CreateVehicle ;
14586: LD_ADDR_VAR 0 3
14590: PUSH
14591: CALL_OW 45
14595: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
14596: LD_VAR 0 3
14600: PPUSH
14601: LD_INT 5
14603: PPUSH
14604: LD_INT 3
14606: PPUSH
14607: LD_INT 2
14609: PPUSH
14610: LD_INT 0
14612: PPUSH
14613: CALL 64836 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14617: LD_ADDR_EXP 57
14621: PUSH
14622: LD_EXP 57
14626: PPUSH
14627: LD_EXP 57
14631: PUSH
14632: LD_INT 1
14634: PLUS
14635: PPUSH
14636: LD_VAR 0 3
14640: PPUSH
14641: CALL_OW 1
14645: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
14646: LD_INT 0
14648: PPUSH
14649: LD_INT 3
14651: PPUSH
14652: LD_OWVAR 67
14656: PPUSH
14657: CALL_OW 380
// un := CreateHuman ;
14661: LD_ADDR_VAR 0 2
14665: PUSH
14666: CALL_OW 44
14670: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14671: LD_VAR 0 2
14675: PPUSH
14676: LD_VAR 0 3
14680: PPUSH
14681: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14685: LD_ADDR_EXP 57
14689: PUSH
14690: LD_EXP 57
14694: PPUSH
14695: LD_EXP 57
14699: PUSH
14700: LD_INT 1
14702: PLUS
14703: PPUSH
14704: LD_VAR 0 2
14708: PPUSH
14709: CALL_OW 1
14713: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
14714: LD_VAR 0 2
14718: PPUSH
14719: LD_INT 23
14721: PPUSH
14722: LD_INT 7
14724: PPUSH
14725: CALL_OW 111
// wait ( 0 0$2 ) ;
14729: LD_INT 70
14731: PPUSH
14732: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14736: LD_ADDR_VAR 0 4
14740: PUSH
14741: LD_VAR 0 4
14745: PPUSH
14746: LD_VAR 0 4
14750: PUSH
14751: LD_INT 1
14753: PLUS
14754: PPUSH
14755: LD_VAR 0 3
14759: PPUSH
14760: CALL_OW 1
14764: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14765: LD_ADDR_VAR 0 4
14769: PUSH
14770: LD_VAR 0 4
14774: PPUSH
14775: LD_VAR 0 4
14779: PUSH
14780: LD_INT 1
14782: PLUS
14783: PPUSH
14784: LD_VAR 0 2
14788: PPUSH
14789: CALL_OW 1
14793: ST_TO_ADDR
// end ;
14794: GO 14494
14796: POP
14797: POP
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + waveStrength do
14798: LD_ADDR_VAR 0 1
14802: PUSH
14803: DOUBLE
14804: LD_INT 1
14806: DEC
14807: ST_TO_ADDR
14808: LD_INT 3
14810: PUSH
14811: LD_INT 4
14813: PUSH
14814: LD_INT 4
14816: PUSH
14817: LD_INT 5
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: PUSH
14826: LD_OWVAR 67
14830: ARRAY
14831: PUSH
14832: LD_EXP 58
14836: PLUS
14837: PUSH
14838: FOR_TO
14839: IFFALSE 15148
// begin InitHc ;
14841: CALL_OW 19
// InitVc ;
14845: CALL_OW 20
// uc_side := 3 ;
14849: LD_ADDR_OWVAR 20
14853: PUSH
14854: LD_INT 3
14856: ST_TO_ADDR
// uc_nation := 3 ;
14857: LD_ADDR_OWVAR 21
14861: PUSH
14862: LD_INT 3
14864: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
14865: LD_INT 22
14867: PUSH
14868: LD_INT 23
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 1
14877: PPUSH
14878: LD_INT 2
14880: PPUSH
14881: CALL_OW 12
14885: ARRAY
14886: PPUSH
14887: LD_INT 1
14889: PPUSH
14890: LD_INT 1
14892: PPUSH
14893: LD_INT 44
14895: PUSH
14896: LD_INT 45
14898: PUSH
14899: LD_INT 43
14901: PUSH
14902: LD_INT 42
14904: PUSH
14905: LD_INT 44
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: PUSH
14915: LD_INT 1
14917: PPUSH
14918: LD_INT 5
14920: PPUSH
14921: CALL_OW 12
14925: ARRAY
14926: PPUSH
14927: LD_INT 99
14929: PPUSH
14930: CALL 30310 0 5
// veh := CreateVehicle ;
14934: LD_ADDR_VAR 0 3
14938: PUSH
14939: CALL_OW 45
14943: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
14944: LD_VAR 0 3
14948: PPUSH
14949: LD_INT 127
14951: PPUSH
14952: LD_INT 243
14954: PPUSH
14955: LD_INT 0
14957: PPUSH
14958: LD_INT 0
14960: PPUSH
14961: CALL 64836 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14965: LD_ADDR_EXP 57
14969: PUSH
14970: LD_EXP 57
14974: PPUSH
14975: LD_EXP 57
14979: PUSH
14980: LD_INT 1
14982: PLUS
14983: PPUSH
14984: LD_VAR 0 3
14988: PPUSH
14989: CALL_OW 1
14993: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14994: LD_INT 0
14996: PPUSH
14997: LD_INT 3
14999: PPUSH
15000: LD_OWVAR 67
15004: PUSH
15005: LD_INT 2
15007: PLUS
15008: PPUSH
15009: CALL_OW 380
// un := CreateHuman ;
15013: LD_ADDR_VAR 0 2
15017: PUSH
15018: CALL_OW 44
15022: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15023: LD_VAR 0 2
15027: PPUSH
15028: LD_VAR 0 3
15032: PPUSH
15033: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15037: LD_ADDR_EXP 57
15041: PUSH
15042: LD_EXP 57
15046: PPUSH
15047: LD_EXP 57
15051: PUSH
15052: LD_INT 1
15054: PLUS
15055: PPUSH
15056: LD_VAR 0 2
15060: PPUSH
15061: CALL_OW 1
15065: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
15066: LD_VAR 0 2
15070: PPUSH
15071: LD_INT 130
15073: PPUSH
15074: LD_INT 233
15076: PPUSH
15077: CALL_OW 111
// wait ( 0 0$2 ) ;
15081: LD_INT 70
15083: PPUSH
15084: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15088: LD_ADDR_VAR 0 4
15092: PUSH
15093: LD_VAR 0 4
15097: PPUSH
15098: LD_VAR 0 4
15102: PUSH
15103: LD_INT 1
15105: PLUS
15106: PPUSH
15107: LD_VAR 0 3
15111: PPUSH
15112: CALL_OW 1
15116: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15117: LD_ADDR_VAR 0 4
15121: PUSH
15122: LD_VAR 0 4
15126: PPUSH
15127: LD_VAR 0 4
15131: PUSH
15132: LD_INT 1
15134: PLUS
15135: PPUSH
15136: LD_VAR 0 2
15140: PPUSH
15141: CALL_OW 1
15145: ST_TO_ADDR
// end ;
15146: GO 14838
15148: POP
15149: POP
// for i in tmp do
15150: LD_ADDR_VAR 0 1
15154: PUSH
15155: LD_VAR 0 4
15159: PUSH
15160: FOR_IN
15161: IFFALSE 15180
// ComAgressiveMove ( i , 76 , 49 ) ;
15163: LD_VAR 0 1
15167: PPUSH
15168: LD_INT 76
15170: PPUSH
15171: LD_INT 49
15173: PPUSH
15174: CALL_OW 114
15178: GO 15160
15180: POP
15181: POP
// repeat wait ( 0 0$1 ) ;
15182: LD_INT 35
15184: PPUSH
15185: CALL_OW 67
// for i in tmp do
15189: LD_ADDR_VAR 0 1
15193: PUSH
15194: LD_VAR 0 4
15198: PUSH
15199: FOR_IN
15200: IFFALSE 15279
// if IsDead ( i ) then
15202: LD_VAR 0 1
15206: PPUSH
15207: CALL_OW 301
15211: IFFALSE 15231
// tmp := tmp diff i else
15213: LD_ADDR_VAR 0 4
15217: PUSH
15218: LD_VAR 0 4
15222: PUSH
15223: LD_VAR 0 1
15227: DIFF
15228: ST_TO_ADDR
15229: GO 15277
// if not HasTask ( i ) then
15231: LD_VAR 0 1
15235: PPUSH
15236: CALL_OW 314
15240: NOT
15241: IFFALSE 15277
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15243: LD_VAR 0 1
15247: PPUSH
15248: LD_INT 81
15250: PUSH
15251: LD_INT 3
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: PPUSH
15258: CALL_OW 69
15262: PPUSH
15263: LD_VAR 0 1
15267: PPUSH
15268: CALL_OW 74
15272: PPUSH
15273: CALL_OW 115
15277: GO 15199
15279: POP
15280: POP
// until not tmp ;
15281: LD_VAR 0 4
15285: NOT
15286: IFFALSE 15182
// end ;
15288: PPOPN 4
15290: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
15291: LD_EXP 6
15295: IFFALSE 15766
15297: GO 15299
15299: DISABLE
15300: LD_INT 0
15302: PPUSH
15303: PPUSH
15304: PPUSH
15305: PPUSH
// begin wait ( 3 3$00 ) ;
15306: LD_INT 6300
15308: PPUSH
15309: CALL_OW 67
// for i := 1 to 3 do
15313: LD_ADDR_VAR 0 1
15317: PUSH
15318: DOUBLE
15319: LD_INT 1
15321: DEC
15322: ST_TO_ADDR
15323: LD_INT 3
15325: PUSH
15326: FOR_TO
15327: IFFALSE 15626
// begin InitHc ;
15329: CALL_OW 19
// InitVc ;
15333: CALL_OW 20
// uc_side := 3 ;
15337: LD_ADDR_OWVAR 20
15341: PUSH
15342: LD_INT 3
15344: ST_TO_ADDR
// uc_nation := 3 ;
15345: LD_ADDR_OWVAR 21
15349: PUSH
15350: LD_INT 3
15352: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
15353: LD_INT 22
15355: PUSH
15356: LD_INT 23
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: LD_INT 1
15365: PPUSH
15366: LD_INT 2
15368: PPUSH
15369: CALL_OW 12
15373: ARRAY
15374: PPUSH
15375: LD_INT 1
15377: PPUSH
15378: LD_INT 1
15380: PPUSH
15381: LD_INT 44
15383: PUSH
15384: LD_INT 43
15386: PUSH
15387: LD_INT 42
15389: PUSH
15390: LD_INT 44
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: PUSH
15399: LD_INT 1
15401: PPUSH
15402: LD_INT 4
15404: PPUSH
15405: CALL_OW 12
15409: ARRAY
15410: PPUSH
15411: LD_INT 99
15413: PPUSH
15414: CALL 30310 0 5
// veh := CreateVehicle ;
15418: LD_ADDR_VAR 0 3
15422: PUSH
15423: CALL_OW 45
15427: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
15428: LD_VAR 0 3
15432: PPUSH
15433: LD_INT 293
15435: PPUSH
15436: LD_INT 246
15438: PPUSH
15439: LD_INT 5
15441: PPUSH
15442: LD_INT 0
15444: PPUSH
15445: CALL 64836 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
15449: LD_ADDR_EXP 57
15453: PUSH
15454: LD_EXP 57
15458: PPUSH
15459: LD_EXP 57
15463: PUSH
15464: LD_INT 1
15466: PLUS
15467: PPUSH
15468: LD_VAR 0 3
15472: PPUSH
15473: CALL_OW 1
15477: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
15478: LD_INT 0
15480: PPUSH
15481: LD_INT 3
15483: PPUSH
15484: LD_INT 3
15486: PPUSH
15487: CALL_OW 380
// un := CreateHuman ;
15491: LD_ADDR_VAR 0 2
15495: PUSH
15496: CALL_OW 44
15500: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15501: LD_VAR 0 2
15505: PPUSH
15506: LD_VAR 0 3
15510: PPUSH
15511: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15515: LD_ADDR_EXP 57
15519: PUSH
15520: LD_EXP 57
15524: PPUSH
15525: LD_EXP 57
15529: PUSH
15530: LD_INT 1
15532: PLUS
15533: PPUSH
15534: LD_VAR 0 2
15538: PPUSH
15539: CALL_OW 1
15543: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
15544: LD_VAR 0 2
15548: PPUSH
15549: LD_INT 273
15551: PPUSH
15552: LD_INT 227
15554: PPUSH
15555: CALL_OW 111
// wait ( 0 0$2 ) ;
15559: LD_INT 70
15561: PPUSH
15562: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15566: LD_ADDR_VAR 0 4
15570: PUSH
15571: LD_VAR 0 4
15575: PPUSH
15576: LD_VAR 0 4
15580: PUSH
15581: LD_INT 1
15583: PLUS
15584: PPUSH
15585: LD_VAR 0 3
15589: PPUSH
15590: CALL_OW 1
15594: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15595: LD_ADDR_VAR 0 4
15599: PUSH
15600: LD_VAR 0 4
15604: PPUSH
15605: LD_VAR 0 4
15609: PUSH
15610: LD_INT 1
15612: PLUS
15613: PPUSH
15614: LD_VAR 0 2
15618: PPUSH
15619: CALL_OW 1
15623: ST_TO_ADDR
// end ;
15624: GO 15326
15626: POP
15627: POP
// for i in tmp do
15628: LD_ADDR_VAR 0 1
15632: PUSH
15633: LD_VAR 0 4
15637: PUSH
15638: FOR_IN
15639: IFFALSE 15658
// ComAgressiveMove ( i , 330 , 231 ) ;
15641: LD_VAR 0 1
15645: PPUSH
15646: LD_INT 330
15648: PPUSH
15649: LD_INT 231
15651: PPUSH
15652: CALL_OW 114
15656: GO 15638
15658: POP
15659: POP
// repeat wait ( 0 0$1 ) ;
15660: LD_INT 35
15662: PPUSH
15663: CALL_OW 67
// for i in tmp do
15667: LD_ADDR_VAR 0 1
15671: PUSH
15672: LD_VAR 0 4
15676: PUSH
15677: FOR_IN
15678: IFFALSE 15757
// if IsDead ( i ) then
15680: LD_VAR 0 1
15684: PPUSH
15685: CALL_OW 301
15689: IFFALSE 15709
// tmp := tmp diff i else
15691: LD_ADDR_VAR 0 4
15695: PUSH
15696: LD_VAR 0 4
15700: PUSH
15701: LD_VAR 0 1
15705: DIFF
15706: ST_TO_ADDR
15707: GO 15755
// if not HasTask ( i ) then
15709: LD_VAR 0 1
15713: PPUSH
15714: CALL_OW 314
15718: NOT
15719: IFFALSE 15755
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15721: LD_VAR 0 1
15725: PPUSH
15726: LD_INT 81
15728: PUSH
15729: LD_INT 3
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PPUSH
15736: CALL_OW 69
15740: PPUSH
15741: LD_VAR 0 1
15745: PPUSH
15746: CALL_OW 74
15750: PPUSH
15751: CALL_OW 115
15755: GO 15677
15757: POP
15758: POP
// until not tmp ;
15759: LD_VAR 0 4
15763: NOT
15764: IFFALSE 15660
// end ;
15766: PPOPN 4
15768: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
15769: LD_INT 3
15771: PUSH
15772: LD_INT 22
15774: PUSH
15775: LD_INT 2
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 32
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PPUSH
15800: CALL_OW 69
15804: IFFALSE 15888
15806: GO 15808
15808: DISABLE
15809: LD_INT 0
15811: PPUSH
// begin enable ;
15812: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
15813: LD_ADDR_VAR 0 1
15817: PUSH
15818: LD_INT 3
15820: PUSH
15821: LD_INT 22
15823: PUSH
15824: LD_INT 2
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PUSH
15835: LD_INT 32
15837: PUSH
15838: LD_INT 1
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PPUSH
15849: CALL_OW 69
15853: PUSH
15854: FOR_IN
15855: IFFALSE 15886
// if GetFuel ( i ) < 3 then
15857: LD_VAR 0 1
15861: PPUSH
15862: CALL_OW 261
15866: PUSH
15867: LD_INT 3
15869: LESS
15870: IFFALSE 15884
// SetFuel ( i , 3 ) ;
15872: LD_VAR 0 1
15876: PPUSH
15877: LD_INT 3
15879: PPUSH
15880: CALL_OW 240
15884: GO 15854
15886: POP
15887: POP
// end ; end_of_file
15888: PPOPN 1
15890: END
// export function Action ; begin
15891: LD_INT 0
15893: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
15894: LD_INT 2
15896: PPUSH
15897: LD_INT 4
15899: PPUSH
15900: CALL_OW 332
// Video ( true ) ;
15904: LD_INT 1
15906: PPUSH
15907: CALL 62666 0 1
// music_nat := 3 ;
15911: LD_ADDR_OWVAR 71
15915: PUSH
15916: LD_INT 3
15918: ST_TO_ADDR
// music_class := music_recon ;
15919: LD_ADDR_OWVAR 72
15923: PUSH
15924: LD_INT 3
15926: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
15927: LD_INT 213
15929: PPUSH
15930: LD_INT 89
15932: PPUSH
15933: CALL_OW 86
// if not debug then
15937: LD_EXP 1
15941: NOT
15942: IFFALSE 15976
// begin if Kaia and Olaf then
15944: LD_EXP 35
15948: PUSH
15949: LD_EXP 39
15953: AND
15954: IFFALSE 15960
// SceneKaiaWithOlaf ;
15956: CALL 16015 0 0
// if Givi and Kamil then
15960: LD_EXP 31
15964: PUSH
15965: LD_EXP 34
15969: AND
15970: IFFALSE 15976
// SceneWithGiviAndKamil ;
15972: CALL 16586 0 0
// end ; Video ( false ) ;
15976: LD_INT 0
15978: PPUSH
15979: CALL 62666 0 1
// ChangeMissionObjectives ( M1 ) ;
15983: LD_STRING M1
15985: PPUSH
15986: CALL_OW 337
// music_nat := music_auto ;
15990: LD_ADDR_OWVAR 71
15994: PUSH
15995: LD_INT 0
15997: ST_TO_ADDR
// music_class := music_auto ;
15998: LD_ADDR_OWVAR 72
16002: PUSH
16003: LD_INT 0
16005: ST_TO_ADDR
// SaveForQuickRestart ;
16006: CALL_OW 22
// end ;
16010: LD_VAR 0 1
16014: RET
// export function SceneKaiaWithOlaf ; begin
16015: LD_INT 0
16017: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
16018: LD_INT 22
16020: PUSH
16021: LD_INT 2
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: LD_INT 30
16030: PUSH
16031: LD_INT 3
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PPUSH
16042: CALL_OW 69
16046: PPUSH
16047: LD_INT 14
16049: PPUSH
16050: LD_INT 1
16052: PPUSH
16053: LD_INT 1
16055: PPUSH
16056: LD_INT 26
16058: PPUSH
16059: CALL_OW 125
// wait ( 0 0$1 ) ;
16063: LD_INT 35
16065: PPUSH
16066: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
16070: LD_EXP 35
16074: PPUSH
16075: LD_STRING DK-Mem-1
16077: PPUSH
16078: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
16082: LD_EXP 35
16086: PPUSH
16087: LD_STRING DK-Mem-2
16089: PPUSH
16090: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
16094: LD_EXP 39
16098: PPUSH
16099: LD_STRING DO-Mem-3
16101: PPUSH
16102: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
16106: LD_EXP 35
16110: PPUSH
16111: LD_STRING DK-Mem-4
16113: PPUSH
16114: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
16118: LD_EXP 39
16122: PPUSH
16123: LD_STRING DO-Mem-5
16125: PPUSH
16126: CALL_OW 88
// wait ( 0 0$2 ) ;
16130: LD_INT 70
16132: PPUSH
16133: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
16137: LD_INT 22
16139: PUSH
16140: LD_INT 2
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: PUSH
16147: LD_INT 30
16149: PUSH
16150: LD_INT 3
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PPUSH
16161: CALL_OW 69
16165: PPUSH
16166: LD_INT 90
16168: PPUSH
16169: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
16173: LD_EXP 39
16177: PPUSH
16178: LD_STRING DO-Mem-6
16180: PPUSH
16181: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
16185: LD_EXP 35
16189: PPUSH
16190: LD_STRING DK-Mem-7
16192: PPUSH
16193: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
16197: LD_EXP 30
16201: PPUSH
16202: LD_EXP 35
16206: PPUSH
16207: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
16211: LD_EXP 30
16215: PPUSH
16216: LD_STRING DH-Mem-8
16218: PPUSH
16219: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
16223: LD_EXP 35
16227: PUSH
16228: LD_EXP 39
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PPUSH
16237: LD_EXP 30
16241: PPUSH
16242: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
16246: LD_EXP 39
16250: PPUSH
16251: LD_STRING DO-Mem-9
16253: PPUSH
16254: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
16258: LD_EXP 39
16262: PPUSH
16263: LD_STRING DO-Mem-10
16265: PPUSH
16266: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
16270: LD_EXP 39
16274: PPUSH
16275: LD_STRING DO-Mem-11
16277: PPUSH
16278: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
16282: LD_EXP 39
16286: PPUSH
16287: LD_STRING DO-Mem-12
16289: PPUSH
16290: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
16294: LD_EXP 35
16298: PPUSH
16299: LD_STRING DK-Mem-13
16301: PPUSH
16302: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
16306: LD_EXP 35
16310: PPUSH
16311: LD_STRING DK-Mem-14
16313: PPUSH
16314: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
16318: LD_EXP 35
16322: PPUSH
16323: LD_STRING DK-Mem-15
16325: PPUSH
16326: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
16330: LD_EXP 35
16334: PPUSH
16335: LD_STRING DK-Mem-16
16337: PPUSH
16338: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
16342: LD_EXP 35
16346: PPUSH
16347: LD_STRING DK-Mem-17
16349: PPUSH
16350: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
16354: LD_EXP 39
16358: PPUSH
16359: LD_EXP 35
16363: PPUSH
16364: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
16368: LD_EXP 39
16372: PPUSH
16373: LD_STRING DO-Mem-18
16375: PPUSH
16376: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
16380: LD_EXP 35
16384: PPUSH
16385: LD_EXP 39
16389: PPUSH
16390: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
16394: LD_EXP 35
16398: PPUSH
16399: LD_STRING DK-Mem-19
16401: PPUSH
16402: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
16406: LD_EXP 39
16410: PPUSH
16411: LD_INT 214
16413: PPUSH
16414: LD_INT 86
16416: PPUSH
16417: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16421: LD_EXP 39
16425: PPUSH
16426: LD_EXP 35
16430: PPUSH
16431: CALL_OW 179
// if Givi then
16435: LD_EXP 31
16439: IFFALSE 16470
// begin ComMoveXY ( Givi , 217 , 86 ) ;
16441: LD_EXP 31
16445: PPUSH
16446: LD_INT 217
16448: PPUSH
16449: LD_INT 86
16451: PPUSH
16452: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
16456: LD_EXP 31
16460: PPUSH
16461: LD_EXP 30
16465: PPUSH
16466: CALL_OW 179
// end ; if Kamil then
16470: LD_EXP 34
16474: IFFALSE 16514
// begin ComExit ( Kamil ) ;
16476: LD_EXP 34
16480: PPUSH
16481: CALL 63092 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
16485: LD_EXP 34
16489: PPUSH
16490: LD_INT 212
16492: PPUSH
16493: LD_INT 86
16495: PPUSH
16496: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
16500: LD_EXP 34
16504: PPUSH
16505: LD_EXP 30
16509: PPUSH
16510: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
16514: LD_INT 70
16516: PPUSH
16517: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
16521: LD_EXP 30
16525: PPUSH
16526: LD_STRING DH-Mem-20
16528: PPUSH
16529: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
16533: LD_EXP 39
16537: PPUSH
16538: LD_INT 215
16540: PPUSH
16541: LD_INT 87
16543: PPUSH
16544: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16548: LD_EXP 39
16552: PPUSH
16553: LD_EXP 35
16557: PPUSH
16558: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
16562: LD_EXP 35
16566: PPUSH
16567: LD_STRING DK-Mem-21
16569: PPUSH
16570: CALL_OW 88
// wait ( 0 0$2 ) ;
16574: LD_INT 70
16576: PPUSH
16577: CALL_OW 67
// end ;
16581: LD_VAR 0 1
16585: RET
// export function SceneWithGiviAndKamil ; begin
16586: LD_INT 0
16588: PPUSH
// if Markov then
16589: LD_EXP 37
16593: IFFALSE 16644
// begin if IsInUnit ( Markov ) then
16595: LD_EXP 37
16599: PPUSH
16600: CALL_OW 310
16604: IFFALSE 16615
// ComExit ( Markov ) ;
16606: LD_EXP 37
16610: PPUSH
16611: CALL 63092 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
16615: LD_EXP 37
16619: PPUSH
16620: LD_INT 212
16622: PPUSH
16623: LD_INT 88
16625: PPUSH
16626: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
16630: LD_EXP 37
16634: PPUSH
16635: LD_EXP 30
16639: PPUSH
16640: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
16644: LD_EXP 31
16648: PPUSH
16649: LD_STRING DG-Obj-1
16651: PPUSH
16652: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
16656: LD_EXP 34
16660: PPUSH
16661: LD_STRING DKam-Obj-2
16663: PPUSH
16664: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
16668: LD_EXP 30
16672: PPUSH
16673: LD_EXP 34
16677: PPUSH
16678: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
16682: LD_EXP 34
16686: PPUSH
16687: LD_STRING DKam-Obj-3
16689: PPUSH
16690: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
16694: LD_EXP 37
16698: PPUSH
16699: LD_STRING DMar-Obj-4
16701: PPUSH
16702: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
16706: LD_EXP 34
16710: PPUSH
16711: LD_STRING DKam-Obj-6
16713: PPUSH
16714: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
16718: LD_EXP 34
16722: PPUSH
16723: LD_STRING DKam-Obj-7
16725: PPUSH
16726: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
16730: LD_EXP 34
16734: PPUSH
16735: LD_STRING DKam-Obj-8
16737: PPUSH
16738: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
16742: LD_EXP 30
16746: PPUSH
16747: LD_STRING DH-Obj-9
16749: PPUSH
16750: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
16754: LD_EXP 34
16758: PPUSH
16759: LD_STRING DKam-Obj-10
16761: PPUSH
16762: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
16766: LD_EXP 34
16770: PPUSH
16771: LD_STRING DKam-Obj-11
16773: PPUSH
16774: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
16778: LD_EXP 37
16782: PPUSH
16783: LD_STRING DMar-Obj-12
16785: PPUSH
16786: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
16790: LD_EXP 37
16794: PPUSH
16795: LD_STRING DMar-Obj-13
16797: PPUSH
16798: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
16802: LD_EXP 37
16806: PPUSH
16807: LD_STRING DMar-Obj-14
16809: PPUSH
16810: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
16814: LD_EXP 39
16818: PPUSH
16819: LD_STRING DO-Obj-15
16821: PPUSH
16822: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
16826: LD_EXP 39
16830: PPUSH
16831: LD_STRING DO-Obj-16
16833: PPUSH
16834: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
16838: LD_EXP 30
16842: PPUSH
16843: LD_STRING DH-Obj-17
16845: PPUSH
16846: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
16850: LD_EXP 39
16854: PPUSH
16855: LD_STRING DO-Obj-18
16857: PPUSH
16858: CALL_OW 88
// end ;
16862: LD_VAR 0 1
16866: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
16867: LD_INT 34
16869: PUSH
16870: LD_EXP 64
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PPUSH
16879: CALL_OW 69
16883: IFFALSE 17080
16885: GO 16887
16887: DISABLE
16888: LD_INT 0
16890: PPUSH
// begin wait ( 0 0$2 ) ;
16891: LD_INT 70
16893: PPUSH
16894: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
16898: LD_INT 34
16900: PUSH
16901: LD_EXP 64
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PPUSH
16910: CALL_OW 69
16914: PPUSH
16915: CALL_OW 87
// DialogueOn ;
16919: CALL_OW 6
// if Markov then
16923: LD_EXP 37
16927: IFFALSE 16955
// begin Say ( Markov , DMar-Grn-1 ) ;
16929: LD_EXP 37
16933: PPUSH
16934: LD_STRING DMar-Grn-1
16936: PPUSH
16937: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
16941: LD_EXP 30
16945: PPUSH
16946: LD_STRING DH-Grn-2
16948: PPUSH
16949: CALL_OW 88
// end else
16953: GO 17054
// if heikeSecondSquad then
16955: LD_EXP 45
16959: IFFALSE 17054
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16961: LD_ADDR_VAR 0 1
16965: PUSH
16966: LD_EXP 45
16970: PUSH
16971: LD_INT 1
16973: PPUSH
16974: LD_EXP 45
16978: PPUSH
16979: CALL_OW 12
16983: ARRAY
16984: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16985: LD_VAR 0 1
16989: PPUSH
16990: CALL_OW 258
16994: PUSH
16995: LD_INT 1
16997: DOUBLE
16998: EQUAL
16999: IFTRUE 17003
17001: GO 17018
17003: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
17004: LD_VAR 0 1
17008: PPUSH
17009: LD_STRING DArm-Grn-1
17011: PPUSH
17012: CALL_OW 88
17016: GO 17042
17018: LD_INT 2
17020: DOUBLE
17021: EQUAL
17022: IFTRUE 17026
17024: GO 17041
17026: POP
// Say ( random , DArf-Grn-1 ) ; end ;
17027: LD_VAR 0 1
17031: PPUSH
17032: LD_STRING DArf-Grn-1
17034: PPUSH
17035: CALL_OW 88
17039: GO 17042
17041: POP
// Say ( Heike , DH-Grn-2 ) ;
17042: LD_EXP 30
17046: PPUSH
17047: LD_STRING DH-Grn-2
17049: PPUSH
17050: CALL_OW 88
// end ; DialogueOff ;
17054: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
17058: LD_STRING MortarConstructed
17060: PPUSH
17061: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
17065: LD_STRING SelfPropelledMortar
17067: PPUSH
17068: CALL_OW 339
// mortarConstructed := true ;
17072: LD_ADDR_EXP 15
17076: PUSH
17077: LD_INT 1
17079: ST_TO_ADDR
// end ;
17080: PPOPN 1
17082: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
17083: LD_INT 2
17085: PPUSH
17086: LD_INT 8
17088: PPUSH
17089: CALL_OW 294
17093: IFFALSE 17236
17095: GO 17097
17097: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
17098: LD_INT 200
17100: PPUSH
17101: LD_INT 162
17103: PPUSH
17104: LD_INT 2
17106: PPUSH
17107: LD_INT 6
17109: NEG
17110: PPUSH
17111: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
17115: LD_INT 200
17117: PPUSH
17118: LD_INT 162
17120: PPUSH
17121: LD_INT 2
17123: PPUSH
17124: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
17128: LD_INT 200
17130: PPUSH
17131: LD_INT 162
17133: PPUSH
17134: CALL_OW 84
// if not IsOk ( Kurt ) then
17138: LD_EXP 41
17142: PPUSH
17143: CALL_OW 302
17147: NOT
17148: IFFALSE 17152
// exit ;
17150: GO 17236
// Say ( Kurt , DKs-Otpst-2-1 ) ;
17152: LD_EXP 41
17156: PPUSH
17157: LD_STRING DKs-Otpst-2-1
17159: PPUSH
17160: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
17164: LD_EXP 35
17168: PPUSH
17169: LD_STRING DK-Otpst-2-2
17171: PPUSH
17172: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
17176: LD_EXP 41
17180: PPUSH
17181: LD_STRING DKs-Otpst-2-3
17183: PPUSH
17184: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
17188: LD_EXP 41
17192: PPUSH
17193: LD_STRING DKs-Otpst-2-4
17195: PPUSH
17196: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
17200: LD_EXP 41
17204: PPUSH
17205: LD_STRING DKs-Otpst-2-5
17207: PPUSH
17208: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
17212: LD_EXP 34
17216: PPUSH
17217: LD_STRING DKam-Otpst-2-6
17219: PPUSH
17220: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
17224: LD_EXP 41
17228: PPUSH
17229: LD_STRING DKs-Otpst-2-7
17231: PPUSH
17232: CALL_OW 88
// end ;
17236: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
17237: LD_INT 8
17239: PPUSH
17240: LD_INT 22
17242: PUSH
17243: LD_INT 3
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 21
17252: PUSH
17253: LD_INT 3
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PPUSH
17264: CALL_OW 70
17268: NOT
17269: PUSH
17270: LD_EXP 3
17274: NOT
17275: AND
17276: IFFALSE 17526
17278: GO 17280
17280: DISABLE
17281: LD_INT 0
17283: PPUSH
// begin outpostDestroyed := true ;
17284: LD_ADDR_EXP 4
17288: PUSH
17289: LD_INT 1
17291: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
17292: LD_INT 22
17294: PUSH
17295: LD_INT 2
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 34
17304: PUSH
17305: LD_EXP 64
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 92
17316: PUSH
17317: LD_INT 195
17319: PUSH
17320: LD_INT 164
17322: PUSH
17323: LD_INT 12
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: LIST
17336: PPUSH
17337: CALL_OW 69
17341: NOT
17342: IFFALSE 17346
// exit ;
17344: GO 17526
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
17346: LD_EXP 31
17350: PPUSH
17351: CALL_OW 302
17355: NOT
17356: PUSH
17357: LD_EXP 35
17361: PPUSH
17362: CALL_OW 302
17366: NOT
17367: OR
17368: IFFALSE 17372
// exit ;
17370: GO 17526
// Say ( Givi , DG-Otpst-1-1 ) ;
17372: LD_EXP 31
17376: PPUSH
17377: LD_STRING DG-Otpst-1-1
17379: PPUSH
17380: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
17384: LD_EXP 35
17388: PPUSH
17389: LD_STRING DK-Otpst-1-2
17391: PPUSH
17392: CALL_OW 88
// if IsOk ( Markov ) then
17396: LD_EXP 37
17400: PPUSH
17401: CALL_OW 302
17405: IFFALSE 17433
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
17407: LD_EXP 37
17411: PPUSH
17412: LD_STRING DMar-Otpst-1-3
17414: PPUSH
17415: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
17419: LD_EXP 37
17423: PPUSH
17424: LD_STRING DMar-Otpst-1-4
17426: PPUSH
17427: CALL_OW 88
// end else
17431: GO 17514
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
17433: LD_ADDR_VAR 0 1
17437: PUSH
17438: LD_EXP 45
17442: PUSH
17443: LD_INT 1
17445: PPUSH
17446: LD_EXP 45
17450: PPUSH
17451: CALL_OW 12
17455: ARRAY
17456: ST_TO_ADDR
// case GetSex ( random ) of 1 :
17457: LD_VAR 0 1
17461: PPUSH
17462: CALL_OW 258
17466: PUSH
17467: LD_INT 1
17469: DOUBLE
17470: EQUAL
17471: IFTRUE 17475
17473: GO 17490
17475: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
17476: LD_VAR 0 1
17480: PPUSH
17481: LD_STRING DArm-Otpst-1-a-3
17483: PPUSH
17484: CALL_OW 88
17488: GO 17514
17490: LD_INT 2
17492: DOUBLE
17493: EQUAL
17494: IFTRUE 17498
17496: GO 17513
17498: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
17499: LD_VAR 0 1
17503: PPUSH
17504: LD_STRING DArf-Otpst-1-a-3
17506: PPUSH
17507: CALL_OW 88
17511: GO 17514
17513: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
17514: LD_EXP 31
17518: PPUSH
17519: LD_STRING DG-Otpst-1-5
17521: PPUSH
17522: CALL_OW 88
// end ;
17526: PPOPN 1
17528: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
17529: LD_EXP 35
17533: PPUSH
17534: CALL_OW 256
17538: PUSH
17539: LD_INT 10
17541: LESS
17542: IFFALSE 17656
17544: GO 17546
17546: DISABLE
// begin DialogueOn ;
17547: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17551: LD_EXP 35
17555: PPUSH
17556: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
17560: LD_EXP 35
17564: PPUSH
17565: LD_STRING DK-Dead-1
17567: PPUSH
17568: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
17572: LD_EXP 30
17576: PPUSH
17577: LD_STRING DH-Dead-2
17579: PPUSH
17580: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
17584: LD_EXP 35
17588: PPUSH
17589: LD_STRING DK-Dead-3
17591: PPUSH
17592: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
17596: LD_EXP 30
17600: PPUSH
17601: LD_STRING DH-Dead-4
17603: PPUSH
17604: CALL_OW 88
// if IsOk ( Mike ) then
17608: LD_EXP 32
17612: PPUSH
17613: CALL_OW 302
17617: IFFALSE 17643
// begin Say ( Mike , DM-Dead-5 ) ;
17619: LD_EXP 32
17623: PPUSH
17624: LD_STRING DM-Dead-5
17626: PPUSH
17627: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
17631: LD_EXP 30
17635: PPUSH
17636: LD_STRING DH-Dead-6
17638: PPUSH
17639: CALL_OW 88
// end ; DialogueOff ;
17643: CALL_OW 7
// KillUnit ( Kaia ) ;
17647: LD_EXP 35
17651: PPUSH
17652: CALL_OW 66
// end ;
17656: END
// every 0 0$1 trigger tick >= 10 10$20 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
17657: LD_OWVAR 1
17661: PUSH
17662: LD_INT 21700
17664: GREATEREQUAL
17665: PUSH
17666: LD_EXP 5
17670: PUSH
17671: LD_INT 5
17673: GREATER
17674: OR
17675: PUSH
17676: LD_INT 22
17678: PUSH
17679: LD_INT 2
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: LD_INT 92
17688: PUSH
17689: LD_INT 103
17691: PUSH
17692: LD_INT 81
17694: PUSH
17695: LD_INT 20
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PPUSH
17708: CALL_OW 69
17712: OR
17713: IFFALSE 18120
17715: GO 17717
17717: DISABLE
17718: LD_INT 0
17720: PPUSH
17721: PPUSH
17722: PPUSH
// begin PrepareRolfSquad ;
17723: CALL 2376 0 0
// dep := HexInfo ( 86 , 54 ) ;
17727: LD_ADDR_VAR 0 3
17731: PUSH
17732: LD_INT 86
17734: PPUSH
17735: LD_INT 54
17737: PPUSH
17738: CALL_OW 428
17742: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
17743: LD_VAR 0 3
17747: PPUSH
17748: CALL_OW 274
17752: PPUSH
17753: LD_INT 1
17755: PPUSH
17756: LD_INT 300
17758: PPUSH
17759: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
17763: LD_VAR 0 3
17767: PPUSH
17768: CALL_OW 274
17772: PPUSH
17773: LD_INT 2
17775: PPUSH
17776: LD_INT 300
17778: PPUSH
17779: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
17783: LD_EXP 47
17787: PPUSH
17788: LD_INT 79
17790: PPUSH
17791: LD_INT 52
17793: PPUSH
17794: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
17798: LD_INT 35
17800: PPUSH
17801: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
17805: LD_INT 12
17807: PPUSH
17808: LD_INT 22
17810: PUSH
17811: LD_INT 3
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 21
17820: PUSH
17821: LD_INT 1
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PPUSH
17832: CALL_OW 70
17836: NOT
17837: IFFALSE 17798
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
17839: LD_ADDR_VAR 0 2
17843: PUSH
17844: LD_INT 12
17846: PPUSH
17847: LD_INT 21
17849: PUSH
17850: LD_INT 3
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PPUSH
17857: CALL_OW 70
17861: ST_TO_ADDR
// for i in tmp do
17862: LD_ADDR_VAR 0 1
17866: PUSH
17867: LD_VAR 0 2
17871: PUSH
17872: FOR_IN
17873: IFFALSE 17889
// SetSide ( i , 8 ) ;
17875: LD_VAR 0 1
17879: PPUSH
17880: LD_INT 8
17882: PPUSH
17883: CALL_OW 235
17887: GO 17872
17889: POP
17890: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
17891: LD_INT 63
17893: PPUSH
17894: LD_INT 42
17896: PPUSH
17897: CALL_OW 428
17901: PPUSH
17902: LD_INT 320
17904: PPUSH
17905: CALL_OW 234
// wait ( 0 0$10 ) ;
17909: LD_INT 350
17911: PPUSH
17912: CALL_OW 67
// DialogueOn ;
17916: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
17920: LD_INT 8
17922: PPUSH
17923: LD_INT 2
17925: PPUSH
17926: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
17930: LD_INT 86
17932: PPUSH
17933: LD_INT 54
17935: PPUSH
17936: CALL_OW 428
17940: PPUSH
17941: LD_STRING antwerp
17943: PPUSH
17944: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
17948: LD_EXP 43
17952: PPUSH
17953: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
17957: LD_EXP 43
17961: PPUSH
17962: LD_STRING DRf-rast-1
17964: PPUSH
17965: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
17969: LD_EXP 30
17973: PPUSH
17974: LD_STRING DH-rast-2
17976: PPUSH
17977: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
17981: LD_EXP 43
17985: PPUSH
17986: LD_STRING DRf-rast-3
17988: PPUSH
17989: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
17993: LD_EXP 43
17997: PPUSH
17998: LD_STRING DRf-rast-4
18000: PPUSH
18001: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
18005: LD_EXP 43
18009: PPUSH
18010: LD_STRING DRf-rast-5
18012: PPUSH
18013: CALL_OW 94
// if IsOk ( Aviradze ) then
18017: LD_EXP 42
18021: PPUSH
18022: CALL_OW 302
18026: IFFALSE 18085
// begin CenterNowOnUnits ( Aviradze ) ;
18028: LD_EXP 42
18032: PPUSH
18033: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
18037: LD_EXP 42
18041: PPUSH
18042: LD_STRING DA-rast-6
18044: PPUSH
18045: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
18049: LD_EXP 30
18053: PPUSH
18054: LD_STRING DH-rast-7
18056: PPUSH
18057: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
18061: LD_EXP 31
18065: PPUSH
18066: LD_STRING DG-rast-8
18068: PPUSH
18069: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
18073: LD_EXP 31
18077: PPUSH
18078: LD_STRING DG-rast-9
18080: PPUSH
18081: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
18085: LD_EXP 30
18089: PPUSH
18090: LD_STRING DH-rast-10
18092: PPUSH
18093: CALL_OW 88
// DialogueOff ;
18097: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18101: LD_STRING M2
18103: PPUSH
18104: CALL_OW 337
// bergkampfArrived := true ;
18108: LD_ADDR_EXP 3
18112: PUSH
18113: LD_INT 1
18115: ST_TO_ADDR
// PrepareRolfBase ;
18116: CALL 2707 0 0
// end ;
18120: PPOPN 3
18122: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
18123: LD_INT 12
18125: PPUSH
18126: LD_INT 22
18128: PUSH
18129: LD_INT 2
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PPUSH
18136: CALL_OW 70
18140: PUSH
18141: LD_EXP 43
18145: PPUSH
18146: CALL_OW 302
18150: AND
18151: PUSH
18152: LD_EXP 29
18156: AND
18157: IFFALSE 18717
18159: GO 18161
18161: DISABLE
18162: LD_INT 0
18164: PPUSH
// begin rolfScriptBase := false ;
18165: LD_ADDR_EXP 9
18169: PUSH
18170: LD_INT 0
18172: ST_TO_ADDR
// DialogueOn ;
18173: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
18177: LD_EXP 43
18181: PPUSH
18182: CALL_OW 87
// if rolfSquad >= 10 then
18186: LD_EXP 47
18190: PUSH
18191: LD_INT 10
18193: GREATEREQUAL
18194: IFFALSE 18373
// begin linkedWithRolf := 2 ;
18196: LD_ADDR_EXP 12
18200: PUSH
18201: LD_INT 2
18203: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
18204: LD_EXP 43
18208: PPUSH
18209: LD_STRING DRf-rast-11
18211: PPUSH
18212: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
18216: LD_EXP 30
18220: PPUSH
18221: LD_STRING DH-rast-12
18223: PPUSH
18224: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
18228: LD_EXP 43
18232: PPUSH
18233: LD_STRING DRf-rast-13
18235: PPUSH
18236: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
18240: LD_EXP 30
18244: PPUSH
18245: LD_STRING DH-rast-14
18247: PPUSH
18248: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
18252: LD_EXP 43
18256: PPUSH
18257: LD_STRING DRf-rast-15
18259: PPUSH
18260: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
18264: LD_EXP 30
18268: PPUSH
18269: LD_STRING DH-rast-16
18271: PPUSH
18272: CALL_OW 88
// if IsOk ( Mike ) then
18276: LD_EXP 32
18280: PPUSH
18281: CALL_OW 302
18285: IFFALSE 18359
// begin Say ( Mike , DM-rast-17 ) ;
18287: LD_EXP 32
18291: PPUSH
18292: LD_STRING DM-rast-17
18294: PPUSH
18295: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
18299: LD_EXP 30
18303: PPUSH
18304: LD_STRING DH-rast-18
18306: PPUSH
18307: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
18311: LD_EXP 32
18315: PPUSH
18316: LD_STRING DM-rast-19
18318: PPUSH
18319: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
18323: LD_EXP 30
18327: PPUSH
18328: LD_STRING DH-rast-20
18330: PPUSH
18331: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
18335: LD_EXP 32
18339: PPUSH
18340: LD_STRING DM-rast-21
18342: PPUSH
18343: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
18347: LD_EXP 30
18351: PPUSH
18352: LD_STRING DH-rast-22
18354: PPUSH
18355: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
18359: LD_EXP 30
18363: PPUSH
18364: LD_STRING DH-rast-23
18366: PPUSH
18367: CALL_OW 88
// end else
18371: GO 18523
// begin linkedWithRolf := 1 ;
18373: LD_ADDR_EXP 12
18377: PUSH
18378: LD_INT 1
18380: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
18381: LD_EXP 43
18385: PPUSH
18386: LD_STRING DRf-rast-a-11
18388: PPUSH
18389: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
18393: LD_EXP 30
18397: PPUSH
18398: LD_STRING DH-rast-a-12
18400: PPUSH
18401: CALL_OW 88
// if IsOk ( Kurt ) then
18405: LD_EXP 41
18409: PPUSH
18410: CALL_OW 302
18414: IFFALSE 18511
// begin Say ( Kurt , DKs-rast-a-13 ) ;
18416: LD_EXP 41
18420: PPUSH
18421: LD_STRING DKs-rast-a-13
18423: PPUSH
18424: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
18428: LD_EXP 43
18432: PPUSH
18433: LD_STRING DRf-rast-a-14
18435: PPUSH
18436: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
18440: LD_EXP 43
18444: PPUSH
18445: LD_STRING DRf-rast-a-15
18447: PPUSH
18448: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
18452: LD_EXP 41
18456: PPUSH
18457: LD_STRING DKs-rast-a-16
18459: PPUSH
18460: CALL_OW 88
// if IsOk ( Givi ) then
18464: LD_EXP 31
18468: PPUSH
18469: CALL_OW 302
18473: IFFALSE 18511
// begin Say ( Givi , DG-rast-a-17 ) ;
18475: LD_EXP 31
18479: PPUSH
18480: LD_STRING DG-rast-a-17
18482: PPUSH
18483: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
18487: LD_EXP 31
18491: PPUSH
18492: LD_STRING DG-rast-a-18
18494: PPUSH
18495: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
18499: LD_EXP 41
18503: PPUSH
18504: LD_STRING DKs-rast-a-19
18506: PPUSH
18507: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
18511: LD_EXP 30
18515: PPUSH
18516: LD_STRING DH-rast-a-20
18518: PPUSH
18519: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
18523: LD_EXP 43
18527: PPUSH
18528: LD_STRING DRf-rast-24
18530: PPUSH
18531: CALL_OW 88
// if IsOk ( Aviradze ) then
18535: LD_EXP 42
18539: PPUSH
18540: CALL_OW 302
18544: IFFALSE 18644
// begin Say ( Aviradze , DA-rast-25 ) ;
18546: LD_EXP 42
18550: PPUSH
18551: LD_STRING DA-rast-25
18553: PPUSH
18554: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
18558: LD_EXP 30
18562: PPUSH
18563: LD_STRING DH-rast-26
18565: PPUSH
18566: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
18570: LD_EXP 42
18574: PPUSH
18575: LD_STRING DA-rast-27
18577: PPUSH
18578: CALL_OW 88
// if IsOk ( Markov ) then
18582: LD_EXP 37
18586: PPUSH
18587: CALL_OW 302
18591: IFFALSE 18619
// begin Say ( Markov , DMar-rast-28 ) ;
18593: LD_EXP 37
18597: PPUSH
18598: LD_STRING DMar-rast-28
18600: PPUSH
18601: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
18605: LD_EXP 37
18609: PPUSH
18610: LD_STRING DMar-rast-29
18612: PPUSH
18613: CALL_OW 88
// end else
18617: GO 18642
// if IsOk ( Sophia ) then
18619: LD_EXP 36
18623: PPUSH
18624: CALL_OW 302
18628: IFFALSE 18642
// begin Say ( Sophia , DS-rast-28 ) ;
18630: LD_EXP 36
18634: PPUSH
18635: LD_STRING DS-rast-28
18637: PPUSH
18638: CALL_OW 88
// end ; end else
18642: GO 18667
// if IsOk ( Sophia ) then
18644: LD_EXP 36
18648: PPUSH
18649: CALL_OW 302
18653: IFFALSE 18667
// Say ( Sophia , DS-rast-29 ) ;
18655: LD_EXP 36
18659: PPUSH
18660: LD_STRING DS-rast-29
18662: PPUSH
18663: CALL_OW 88
// DialogueOff ;
18667: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
18671: LD_STRING M3
18673: PPUSH
18674: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
18678: LD_ADDR_VAR 0 1
18682: PUSH
18683: LD_INT 22
18685: PUSH
18686: LD_INT 8
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PPUSH
18693: CALL_OW 69
18697: PUSH
18698: FOR_IN
18699: IFFALSE 18715
// SetSide ( i , 2 ) ;
18701: LD_VAR 0 1
18705: PPUSH
18706: LD_INT 2
18708: PPUSH
18709: CALL_OW 235
18713: GO 18698
18715: POP
18716: POP
// end ;
18717: PPOPN 1
18719: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
18720: LD_EXP 23
18724: PUSH
18725: LD_EXP 12
18729: NOT
18730: AND
18731: PUSH
18732: LD_EXP 29
18736: AND
18737: IFFALSE 18828
18739: GO 18741
18741: DISABLE
18742: LD_INT 0
18744: PPUSH
// begin canRolfJoin := false ;
18745: LD_ADDR_EXP 29
18749: PUSH
18750: LD_INT 0
18752: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
18753: LD_STRING M3
18755: PPUSH
18756: CALL_OW 337
// for i in rolfSquad do
18760: LD_ADDR_VAR 0 1
18764: PUSH
18765: LD_EXP 47
18769: PUSH
18770: FOR_IN
18771: IFFALSE 18826
// begin ComExit ( i ) ;
18773: LD_VAR 0 1
18777: PPUSH
18778: CALL 63092 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
18782: LD_VAR 0 1
18786: PPUSH
18787: LD_INT 147
18789: PPUSH
18790: LD_INT 162
18792: PPUSH
18793: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
18797: LD_VAR 0 1
18801: PPUSH
18802: LD_INT 1050
18804: PPUSH
18805: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
18809: LD_VAR 0 1
18813: PPUSH
18814: LD_INT 103
18816: PPUSH
18817: LD_INT 162
18819: PPUSH
18820: CALL_OW 174
// end ;
18824: GO 18770
18826: POP
18827: POP
// end ;
18828: PPOPN 1
18830: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
18831: LD_EXP 3
18835: PUSH
18836: LD_EXP 43
18840: PPUSH
18841: CALL_OW 256
18845: PUSH
18846: LD_INT 400
18848: LESS
18849: AND
18850: PUSH
18851: LD_EXP 12
18855: NOT
18856: AND
18857: PUSH
18858: LD_EXP 29
18862: AND
18863: IFFALSE 19137
18865: GO 18867
18867: DISABLE
18868: LD_INT 0
18870: PPUSH
// begin DialogueOn ;
18871: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
18875: LD_EXP 43
18879: PPUSH
18880: LD_STRING DRf-rast-f-11
18882: PPUSH
18883: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
18887: LD_EXP 43
18891: PPUSH
18892: LD_STRING DRf-rast-f-12
18894: PPUSH
18895: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
18899: LD_EXP 43
18903: PPUSH
18904: LD_STRING DRf-rast-f-13
18906: PPUSH
18907: CALL_OW 94
// DialogueOff ;
18911: CALL_OW 7
// KillUnit ( Rolf ) ;
18915: LD_EXP 43
18919: PPUSH
18920: CALL_OW 66
// wait ( 0 0$1 ) ;
18924: LD_INT 35
18926: PPUSH
18927: CALL_OW 67
// if not IsOk ( Givi ) then
18931: LD_EXP 31
18935: PPUSH
18936: CALL_OW 302
18940: NOT
18941: IFFALSE 18945
// exit ;
18943: GO 19137
// DialogueOn ;
18945: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
18949: LD_EXP 31
18953: PPUSH
18954: LD_STRING DG-rast-f-14
18956: PPUSH
18957: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
18961: LD_EXP 31
18965: PPUSH
18966: LD_STRING DG-rast-f-15
18968: PPUSH
18969: CALL_OW 88
// if IsOk ( Kaia ) then
18973: LD_EXP 35
18977: PPUSH
18978: CALL_OW 302
18982: IFFALSE 18998
// Say ( Kaia , DK-rast-f-16 ) else
18984: LD_EXP 35
18988: PPUSH
18989: LD_STRING DK-rast-f-16
18991: PPUSH
18992: CALL_OW 88
18996: GO 19085
// if heikeSecondSquad then
18998: LD_EXP 45
19002: IFFALSE 19085
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
19004: LD_ADDR_VAR 0 1
19008: PUSH
19009: LD_EXP 45
19013: PUSH
19014: LD_INT 1
19016: PPUSH
19017: LD_EXP 45
19021: PPUSH
19022: CALL_OW 12
19026: ARRAY
19027: ST_TO_ADDR
// case GetSex ( random ) of 1 :
19028: LD_VAR 0 1
19032: PPUSH
19033: CALL_OW 258
19037: PUSH
19038: LD_INT 1
19040: DOUBLE
19041: EQUAL
19042: IFTRUE 19046
19044: GO 19061
19046: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
19047: LD_VAR 0 1
19051: PPUSH
19052: LD_STRING DArm-rast-f-a-16
19054: PPUSH
19055: CALL_OW 88
19059: GO 19085
19061: LD_INT 2
19063: DOUBLE
19064: EQUAL
19065: IFTRUE 19069
19067: GO 19084
19069: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
19070: LD_VAR 0 1
19074: PPUSH
19075: LD_STRING DArf-rast-f-a-16
19077: PPUSH
19078: CALL_OW 88
19082: GO 19085
19084: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
19085: LD_EXP 31
19089: PPUSH
19090: LD_STRING DG-rast-f-17
19092: PPUSH
19093: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
19097: LD_EXP 31
19101: PPUSH
19102: LD_STRING DG-rast-f-18
19104: PPUSH
19105: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
19109: LD_EXP 31
19113: PPUSH
19114: LD_STRING DG-rast-f-19
19116: PPUSH
19117: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
19121: LD_EXP 31
19125: PPUSH
19126: LD_STRING DG-rast-f-20
19128: PPUSH
19129: CALL_OW 88
// DialogueOff ;
19133: CALL_OW 7
// end ;
19137: PPOPN 1
19139: END
// every 0 0$1 trigger SeeArea ( 2 , ruMainBase ) do
19140: LD_INT 2
19142: PPUSH
19143: LD_INT 10
19145: PPUSH
19146: CALL_OW 294
19150: IFFALSE 19223
19152: GO 19154
19154: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
19155: LD_EXP 31
19159: PPUSH
19160: LD_STRING DG-Len-1
19162: PPUSH
19163: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
19167: LD_EXP 41
19171: PPUSH
19172: LD_STRING DKs-Len-2
19174: PPUSH
19175: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
19179: LD_EXP 41
19183: PPUSH
19184: LD_STRING DKs-Len-3
19186: PPUSH
19187: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
19191: LD_EXP 30
19195: PPUSH
19196: LD_STRING DH-Len-4
19198: PPUSH
19199: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
19203: LD_EXP 35
19207: PPUSH
19208: LD_STRING DK-Len-5
19210: PPUSH
19211: CALL_OW 88
// leninSpotted := true ;
19215: LD_ADDR_EXP 14
19219: PUSH
19220: LD_INT 1
19222: ST_TO_ADDR
// end ;
19223: END
// every 0 0$1 trigger ( bergkampfArrived and tick > 17 17$00 ) or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 322 , 215 , 20 ] ] ) do var i ;
19224: LD_EXP 3
19228: PUSH
19229: LD_OWVAR 1
19233: PUSH
19234: LD_INT 35700
19236: GREATER
19237: AND
19238: PUSH
19239: LD_INT 22
19241: PUSH
19242: LD_INT 2
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 92
19251: PUSH
19252: LD_INT 322
19254: PUSH
19255: LD_INT 215
19257: PUSH
19258: LD_INT 20
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PPUSH
19271: CALL_OW 69
19275: OR
19276: IFFALSE 19639
19278: GO 19280
19280: DISABLE
19281: LD_INT 0
19283: PPUSH
// begin PrepareOmarSquad ;
19284: CALL 3989 0 0
// repeat wait ( 0 0$1 ) ;
19288: LD_INT 35
19290: PPUSH
19291: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
19295: LD_INT 14
19297: PPUSH
19298: LD_INT 22
19300: PUSH
19301: LD_INT 3
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 2
19310: PUSH
19311: LD_INT 21
19313: PUSH
19314: LD_INT 1
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 59
19323: PUSH
19324: EMPTY
19325: LIST
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: LIST
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PPUSH
19336: CALL_OW 70
19340: NOT
19341: IFFALSE 19288
// for i in omarSquad do
19343: LD_ADDR_VAR 0 1
19347: PUSH
19348: LD_EXP 48
19352: PUSH
19353: FOR_IN
19354: IFFALSE 19385
// if GetLives ( i ) < 750 then
19356: LD_VAR 0 1
19360: PPUSH
19361: CALL_OW 256
19365: PUSH
19366: LD_INT 750
19368: LESS
19369: IFFALSE 19383
// SetLives ( i , 1000 ) ;
19371: LD_VAR 0 1
19375: PPUSH
19376: LD_INT 1000
19378: PPUSH
19379: CALL_OW 234
19383: GO 19353
19385: POP
19386: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
19387: LD_ADDR_VAR 0 1
19391: PUSH
19392: LD_INT 14
19394: PPUSH
19395: LD_INT 21
19397: PUSH
19398: LD_INT 3
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PPUSH
19405: CALL_OW 70
19409: PUSH
19410: FOR_IN
19411: IFFALSE 19427
// SetSide ( i , 5 ) ;
19413: LD_VAR 0 1
19417: PPUSH
19418: LD_INT 5
19420: PPUSH
19421: CALL_OW 235
19425: GO 19410
19427: POP
19428: POP
// wait ( 0 0$3 ) ;
19429: LD_INT 105
19431: PPUSH
19432: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
19436: LD_INT 5
19438: PPUSH
19439: LD_INT 2
19441: PPUSH
19442: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
19446: LD_EXP 40
19450: PPUSH
19451: CALL_OW 87
// DialogueOn ;
19455: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-1 ) ;
19459: LD_EXP 40
19463: PPUSH
19464: LD_STRING DOm-Veh-1
19466: PPUSH
19467: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
19471: LD_EXP 40
19475: PPUSH
19476: LD_STRING DOm-Veh-2
19478: PPUSH
19479: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
19483: LD_EXP 40
19487: PPUSH
19488: LD_STRING DOm-Veh-3
19490: PPUSH
19491: CALL_OW 94
// if mortarConstructed then
19495: LD_EXP 15
19499: IFFALSE 19513
// SayRadio ( Omar , DOm-Veh-4 ) ;
19501: LD_EXP 40
19505: PPUSH
19506: LD_STRING DOm-Veh-4
19508: PPUSH
19509: CALL_OW 94
// Say ( Heike , DH-Veh-5 ) ;
19513: LD_EXP 30
19517: PPUSH
19518: LD_STRING DH-Veh-5
19520: PPUSH
19521: CALL_OW 88
// if IsOk ( Kurt ) then
19525: LD_EXP 41
19529: PPUSH
19530: CALL_OW 302
19534: IFFALSE 19584
// begin Say ( Kurt , DKs-Veh-6 ) ;
19536: LD_EXP 41
19540: PPUSH
19541: LD_STRING DKs-Veh-6
19543: PPUSH
19544: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
19548: LD_EXP 41
19552: PPUSH
19553: LD_STRING DKs-Veh-7
19555: PPUSH
19556: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
19560: LD_EXP 31
19564: PPUSH
19565: LD_STRING DG-Veh-8
19567: PPUSH
19568: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
19572: LD_EXP 32
19576: PPUSH
19577: LD_STRING DM-Veh-9
19579: PPUSH
19580: CALL_OW 88
// end ; DialogueOff ;
19584: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
19588: LD_STRING M4
19590: PPUSH
19591: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
19595: LD_EXP 40
19599: PPUSH
19600: LD_INT 341
19602: PPUSH
19603: LD_INT 232
19605: PPUSH
19606: CALL_OW 428
19610: PPUSH
19611: CALL_OW 120
// omarArrived := true ;
19615: LD_ADDR_EXP 6
19619: PUSH
19620: LD_INT 1
19622: ST_TO_ADDR
// omarScriptBase := true ;
19623: LD_ADDR_EXP 10
19627: PUSH
19628: LD_INT 1
19630: ST_TO_ADDR
// omarWantVehicles := true ;
19631: LD_ADDR_EXP 18
19635: PUSH
19636: LD_INT 1
19638: ST_TO_ADDR
// end ;
19639: PPOPN 1
19641: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
19642: LD_EXP 43
19646: PPUSH
19647: CALL_OW 302
19651: PUSH
19652: LD_EXP 12
19656: AND
19657: PUSH
19658: LD_EXP 6
19662: AND
19663: IFFALSE 19767
19665: GO 19667
19667: DISABLE
// begin wait ( 0 0$20 ) ;
19668: LD_INT 700
19670: PPUSH
19671: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
19675: LD_EXP 43
19679: PPUSH
19680: CALL_OW 87
// DialogueOn ;
19684: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
19688: LD_EXP 43
19692: PPUSH
19693: LD_STRING DRf-Veh-10
19695: PPUSH
19696: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
19700: LD_EXP 43
19704: PPUSH
19705: LD_STRING DRf-Veh-11
19707: PPUSH
19708: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
19712: LD_EXP 30
19716: PPUSH
19717: LD_STRING DH-Veh-12
19719: PPUSH
19720: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
19724: LD_EXP 30
19728: PPUSH
19729: LD_STRING DH-Veh-13
19731: PPUSH
19732: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
19736: LD_EXP 43
19740: PPUSH
19741: LD_STRING DRf-Veh-14
19743: PPUSH
19744: CALL_OW 88
// DialogueOff ;
19748: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
19752: LD_STRING M5
19754: PPUSH
19755: CALL_OW 337
// rolfWantVehicles := true ;
19759: LD_ADDR_EXP 17
19763: PUSH
19764: LD_INT 1
19766: ST_TO_ADDR
// end ;
19767: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
19768: LD_EXP 18
19772: IFFALSE 20471
19774: GO 19776
19776: DISABLE
19777: LD_INT 0
19779: PPUSH
19780: PPUSH
19781: PPUSH
19782: PPUSH
19783: PPUSH
19784: PPUSH
// begin wait ( 0 0$3 ) ;
19785: LD_INT 105
19787: PPUSH
19788: CALL_OW 67
// Hint ( OmarVehicles ) ;
19792: LD_STRING OmarVehicles
19794: PPUSH
19795: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
19799: LD_INT 16
19801: PPUSH
19802: LD_INT 1
19804: PPUSH
19805: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
19809: LD_INT 35
19811: PPUSH
19812: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
19816: LD_ADDR_EXP 20
19820: PUSH
19821: LD_EXP 20
19825: PUSH
19826: LD_INT 35
19828: MINUS
19829: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
19830: LD_EXP 20
19834: PUSH
19835: LD_INT 0
19837: LESSEQUAL
19838: IFFALSE 19938
// begin display_strings := [ ] ;
19840: LD_ADDR_OWVAR 47
19844: PUSH
19845: EMPTY
19846: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
19847: LD_STRING M4a
19849: PPUSH
19850: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19854: LD_INT 16
19856: PPUSH
19857: LD_INT 0
19859: PPUSH
19860: CALL_OW 424
// DialogueOn ;
19864: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
19868: LD_EXP 40
19872: PPUSH
19873: LD_STRING DOm-Veh-b-15
19875: PPUSH
19876: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
19880: LD_EXP 30
19884: PPUSH
19885: LD_STRING DH-Veh-b-16
19887: PPUSH
19888: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
19892: LD_EXP 40
19896: PPUSH
19897: LD_STRING DOm-Veh-b-17
19899: PPUSH
19900: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
19904: LD_EXP 35
19908: PPUSH
19909: LD_STRING DK-Veh-b-18
19911: PPUSH
19912: CALL_OW 88
// DialogueOff ;
19916: CALL_OW 7
// omarAttack := true ;
19920: LD_ADDR_EXP 23
19924: PUSH
19925: LD_INT 1
19927: ST_TO_ADDR
// omarScriptBase := false ;
19928: LD_ADDR_EXP 10
19932: PUSH
19933: LD_INT 0
19935: ST_TO_ADDR
// exit ;
19936: GO 20471
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19938: LD_EXP 21
19942: PUSH
19943: LD_INT 16
19945: PPUSH
19946: LD_INT 22
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 21
19958: PUSH
19959: LD_INT 2
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 33
19968: PUSH
19969: LD_INT 1
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 58
19978: PUSH
19979: EMPTY
19980: LIST
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: PPUSH
19988: CALL_OW 70
19992: LESSEQUAL
19993: IFFALSE 19809
// omarWaitingForVehiclesTimer := 0 0$00 ;
19995: LD_ADDR_EXP 20
19999: PUSH
20000: LD_INT 0
20002: ST_TO_ADDR
// display_strings := [ ] ;
20003: LD_ADDR_OWVAR 47
20007: PUSH
20008: EMPTY
20009: ST_TO_ADDR
// DialogueOn ;
20010: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
20014: LD_EXP 40
20018: PPUSH
20019: LD_STRING DOm-Veh-a-15
20021: PPUSH
20022: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
20026: LD_EXP 35
20030: PPUSH
20031: LD_STRING DK-Veh-a-16
20033: PPUSH
20034: CALL_OW 88
// DialogueOff ;
20038: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
20042: LD_STRING M4a
20044: PPUSH
20045: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
20049: LD_INT 16
20051: PPUSH
20052: LD_INT 0
20054: PPUSH
20055: CALL_OW 424
// omarHasVehicles := true ;
20059: LD_ADDR_EXP 22
20063: PUSH
20064: LD_INT 1
20066: ST_TO_ADDR
// wait ( 1 1$00 ) ;
20067: LD_INT 2100
20069: PPUSH
20070: CALL_OW 67
// omarAttack := true ;
20074: LD_ADDR_EXP 23
20078: PUSH
20079: LD_INT 1
20081: ST_TO_ADDR
// omarScriptBase := false ;
20082: LD_ADDR_EXP 10
20086: PUSH
20087: LD_INT 0
20089: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
20090: LD_ADDR_VAR 0 2
20094: PUSH
20095: LD_INT 16
20097: PPUSH
20098: LD_INT 22
20100: PUSH
20101: LD_INT 2
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 21
20110: PUSH
20111: LD_INT 2
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 33
20120: PUSH
20121: LD_INT 1
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 58
20130: PUSH
20131: EMPTY
20132: LIST
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: PPUSH
20140: CALL_OW 70
20144: ST_TO_ADDR
// for i in tmp do
20145: LD_ADDR_VAR 0 1
20149: PUSH
20150: LD_VAR 0 2
20154: PUSH
20155: FOR_IN
20156: IFFALSE 20184
// begin SetFuel ( i , 100 ) ;
20158: LD_VAR 0 1
20162: PPUSH
20163: LD_INT 100
20165: PPUSH
20166: CALL_OW 240
// SetSide ( i , 5 ) ;
20170: LD_VAR 0 1
20174: PPUSH
20175: LD_INT 5
20177: PPUSH
20178: CALL_OW 235
// end ;
20182: GO 20155
20184: POP
20185: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
20186: LD_ADDR_VAR 0 3
20190: PUSH
20191: LD_EXP 48
20195: PPUSH
20196: LD_INT 25
20198: PUSH
20199: LD_INT 2
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PPUSH
20206: CALL_OW 72
20210: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
20211: LD_ADDR_VAR 0 4
20215: PUSH
20216: LD_EXP 48
20220: PPUSH
20221: LD_INT 3
20223: PUSH
20224: LD_INT 55
20226: PUSH
20227: EMPTY
20228: LIST
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 25
20236: PUSH
20237: LD_INT 3
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PPUSH
20248: CALL_OW 72
20252: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
20253: LD_ADDR_VAR 0 5
20257: PUSH
20258: LD_INT 324
20260: PPUSH
20261: LD_INT 234
20263: PPUSH
20264: CALL_OW 428
20268: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
20269: LD_ADDR_VAR 0 6
20273: PUSH
20274: LD_INT 334
20276: PPUSH
20277: LD_INT 241
20279: PPUSH
20280: CALL_OW 428
20284: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
20285: LD_VAR 0 6
20289: PPUSH
20290: CALL_OW 313
20294: PPUSH
20295: CALL_OW 122
// if eng then
20299: LD_VAR 0 3
20303: IFFALSE 20411
// begin if eng + mech <= tmp then
20305: LD_VAR 0 3
20309: PUSH
20310: LD_VAR 0 4
20314: PLUS
20315: PUSH
20316: LD_VAR 0 2
20320: LESSEQUAL
20321: IFFALSE 20376
// begin ComEnterUnit ( eng , workshop ) ;
20323: LD_VAR 0 3
20327: PPUSH
20328: LD_VAR 0 5
20332: PPUSH
20333: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
20337: LD_VAR 0 3
20341: PPUSH
20342: LD_INT 3
20344: PPUSH
20345: CALL_OW 183
// AddComExitBuilding ( eng ) ;
20349: LD_VAR 0 3
20353: PPUSH
20354: CALL_OW 182
// mech := mech union eng ;
20358: LD_ADDR_VAR 0 4
20362: PUSH
20363: LD_VAR 0 4
20367: PUSH
20368: LD_VAR 0 3
20372: UNION
20373: ST_TO_ADDR
// end else
20374: GO 20411
// begin ComEnterUnit ( eng , armoury ) ;
20376: LD_VAR 0 3
20380: PPUSH
20381: LD_VAR 0 6
20385: PPUSH
20386: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
20390: LD_VAR 0 3
20394: PPUSH
20395: LD_INT 1
20397: PPUSH
20398: CALL_OW 183
// AddComExitBuilding ( eng ) ;
20402: LD_VAR 0 3
20406: PPUSH
20407: CALL_OW 182
// end ; end ; for i := 1 to tmp do
20411: LD_ADDR_VAR 0 1
20415: PUSH
20416: DOUBLE
20417: LD_INT 1
20419: DEC
20420: ST_TO_ADDR
20421: LD_VAR 0 2
20425: PUSH
20426: FOR_TO
20427: IFFALSE 20469
// if i <= mech then
20429: LD_VAR 0 1
20433: PUSH
20434: LD_VAR 0 4
20438: LESSEQUAL
20439: IFFALSE 20467
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
20441: LD_VAR 0 4
20445: PUSH
20446: LD_VAR 0 1
20450: ARRAY
20451: PPUSH
20452: LD_VAR 0 2
20456: PUSH
20457: LD_VAR 0 1
20461: ARRAY
20462: PPUSH
20463: CALL_OW 180
20467: GO 20426
20469: POP
20470: POP
// end ;
20471: PPOPN 6
20473: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i ;
20474: LD_EXP 43
20478: PPUSH
20479: CALL_OW 302
20483: PUSH
20484: LD_EXP 17
20488: AND
20489: IFFALSE 20945
20491: GO 20493
20493: DISABLE
20494: LD_INT 0
20496: PPUSH
// begin repeat wait ( 0 0$1 ) ;
20497: LD_INT 35
20499: PPUSH
20500: CALL_OW 67
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
20504: LD_ADDR_EXP 19
20508: PUSH
20509: LD_EXP 19
20513: PUSH
20514: LD_INT 35
20516: MINUS
20517: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 or omarAttack then
20518: LD_EXP 19
20522: PUSH
20523: LD_INT 0
20525: LESSEQUAL
20526: PUSH
20527: LD_EXP 23
20531: OR
20532: IFFALSE 20750
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
20534: LD_ADDR_EXP 19
20538: PUSH
20539: LD_INT 0
20541: ST_TO_ADDR
// display_strings := [ ] ;
20542: LD_ADDR_OWVAR 47
20546: PUSH
20547: EMPTY
20548: ST_TO_ADDR
// DialogueOn ;
20549: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
20553: LD_EXP 43
20557: PPUSH
20558: LD_STRING DRf-Veh-b-19
20560: PPUSH
20561: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
20565: LD_EXP 43
20569: PPUSH
20570: LD_STRING DRf-Veh-b-20
20572: PPUSH
20573: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
20577: LD_EXP 30
20581: PPUSH
20582: LD_STRING DH-Veh-b-21
20584: PPUSH
20585: CALL_OW 88
// if IsOk ( Givi ) then
20589: LD_EXP 31
20593: PPUSH
20594: CALL_OW 302
20598: IFFALSE 20636
// begin Say ( Givi , DG-Veh-b-22 ) ;
20600: LD_EXP 31
20604: PPUSH
20605: LD_STRING DG-Veh-b-22
20607: PPUSH
20608: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
20612: LD_EXP 30
20616: PPUSH
20617: LD_STRING DH-Veh-b-23
20619: PPUSH
20620: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
20624: LD_EXP 31
20628: PPUSH
20629: LD_STRING DG-Veh-b-24
20631: PPUSH
20632: CALL_OW 88
// end ; DialogueOff ;
20636: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20640: LD_STRING M5a
20642: PPUSH
20643: CALL_OW 337
// for i in rolfSquad do
20647: LD_ADDR_VAR 0 1
20651: PUSH
20652: LD_EXP 47
20656: PUSH
20657: FOR_IN
20658: IFFALSE 20724
// begin SetSide ( i , 8 ) ;
20660: LD_VAR 0 1
20664: PPUSH
20665: LD_INT 8
20667: PPUSH
20668: CALL_OW 235
// if IsDriver ( i ) then
20672: LD_VAR 0 1
20676: PPUSH
20677: CALL 60303 0 1
20681: IFFALSE 20702
// SetSide ( IsInUnit ( i ) , 8 ) else
20683: LD_VAR 0 1
20687: PPUSH
20688: CALL_OW 310
20692: PPUSH
20693: LD_INT 8
20695: PPUSH
20696: CALL_OW 235
20700: GO 20722
// if IsInUnit ( i ) then
20702: LD_VAR 0 1
20706: PPUSH
20707: CALL_OW 310
20711: IFFALSE 20722
// ComExitBuilding ( i ) ;
20713: LD_VAR 0 1
20717: PPUSH
20718: CALL_OW 122
// end ;
20722: GO 20657
20724: POP
20725: POP
// wait ( 0 0$1 ) ;
20726: LD_INT 35
20728: PPUSH
20729: CALL_OW 67
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20733: LD_EXP 47
20737: PPUSH
20738: LD_INT 229
20740: PPUSH
20741: LD_INT 154
20743: PPUSH
20744: CALL_OW 114
// exit ;
20748: GO 20945
// end ; if IsDead ( Rolf ) then
20750: LD_EXP 43
20754: PPUSH
20755: CALL_OW 301
20759: IFFALSE 20770
// begin ChangeMissionObjectives ( M5a ) ;
20761: LD_STRING M5a
20763: PPUSH
20764: CALL_OW 337
// exit ;
20768: GO 20945
// end ; until UnitFilter ( rolfSquad , [ f_driving ] ) + 0 = rolfSquad + 0 ;
20770: LD_EXP 47
20774: PPUSH
20775: LD_INT 55
20777: PUSH
20778: EMPTY
20779: LIST
20780: PPUSH
20781: CALL_OW 72
20785: PUSH
20786: LD_INT 0
20788: PLUS
20789: PUSH
20790: LD_EXP 47
20794: PUSH
20795: LD_INT 0
20797: PLUS
20798: EQUAL
20799: IFFALSE 20497
// rolfWaitingForVehiclesTimer := 0 0$00 ;
20801: LD_ADDR_EXP 19
20805: PUSH
20806: LD_INT 0
20808: ST_TO_ADDR
// display_strings := [ ] ;
20809: LD_ADDR_OWVAR 47
20813: PUSH
20814: EMPTY
20815: ST_TO_ADDR
// DialogueOn ;
20816: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
20820: LD_EXP 43
20824: PPUSH
20825: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
20829: LD_EXP 43
20833: PPUSH
20834: LD_STRING DRf-Veh-a-17
20836: PPUSH
20837: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
20841: LD_EXP 30
20845: PPUSH
20846: LD_STRING DH-08-Veh-a-18
20848: PPUSH
20849: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
20853: LD_EXP 43
20857: PPUSH
20858: LD_STRING DRf-Veh-a-19
20860: PPUSH
20861: CALL_OW 88
// DialogueOff ;
20865: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20869: LD_STRING M5a
20871: PPUSH
20872: CALL_OW 337
// rolfHasVehicles := true ;
20876: LD_ADDR_EXP 16
20880: PUSH
20881: LD_INT 1
20883: ST_TO_ADDR
// for i in rolfSquad do
20884: LD_ADDR_VAR 0 1
20888: PUSH
20889: LD_EXP 47
20893: PUSH
20894: FOR_IN
20895: IFFALSE 20928
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
20897: LD_VAR 0 1
20901: PPUSH
20902: CALL_OW 310
20906: PPUSH
20907: LD_INT 8
20909: PPUSH
20910: CALL_OW 235
// SetSide ( i , 8 ) ;
20914: LD_VAR 0 1
20918: PPUSH
20919: LD_INT 8
20921: PPUSH
20922: CALL_OW 235
// end ;
20926: GO 20894
20928: POP
20929: POP
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20930: LD_EXP 47
20934: PPUSH
20935: LD_INT 229
20937: PPUSH
20938: LD_INT 154
20940: PPUSH
20941: CALL_OW 114
// end ;
20945: PPOPN 1
20947: END
// every 0 0$1 trigger leninSpotted do
20948: LD_EXP 14
20952: IFFALSE 21040
20954: GO 20956
20956: DISABLE
// begin wait ( 0 0$10 ) ;
20957: LD_INT 350
20959: PPUSH
20960: CALL_OW 67
// DialogueOn ;
20964: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
20968: LD_EXP 42
20972: PPUSH
20973: LD_STRING DA-Transmission-1
20975: PPUSH
20976: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
20980: LD_EXP 49
20984: PPUSH
20985: LD_STRING DMzw-Transmission-2
20987: PPUSH
20988: CALL_OW 94
// if gaidarKilled then
20992: LD_EXP 7
20996: IFFALSE 21012
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
20998: LD_EXP 49
21002: PPUSH
21003: LD_STRING DMzw-Transmission-3
21005: PPUSH
21006: CALL_OW 94
21010: GO 21024
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
21012: LD_EXP 49
21016: PPUSH
21017: LD_STRING DMzw-Transmission-a-3
21019: PPUSH
21020: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
21024: LD_EXP 30
21028: PPUSH
21029: LD_STRING DH-Transmission-4
21031: PPUSH
21032: CALL_OW 88
// DialogueOff ;
21036: CALL_OW 7
// end ;
21040: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
21041: LD_INT 22
21043: PUSH
21044: LD_INT 3
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 25
21053: PUSH
21054: LD_INT 9
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 101
21063: PUSH
21064: LD_INT 2
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: LIST
21075: PPUSH
21076: CALL_OW 69
21080: PUSH
21081: LD_EXP 30
21085: PPUSH
21086: CALL_OW 302
21090: AND
21091: IFFALSE 21156
21093: GO 21095
21095: DISABLE
// begin CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
21096: LD_INT 22
21098: PUSH
21099: LD_INT 3
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 25
21108: PUSH
21109: LD_INT 9
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 101
21118: PUSH
21119: LD_INT 2
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: LIST
21130: PPUSH
21131: CALL_OW 69
21135: PUSH
21136: LD_INT 1
21138: ARRAY
21139: PPUSH
21140: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
21144: LD_EXP 30
21148: PPUSH
21149: LD_STRING DH-Rubazooka-1
21151: PPUSH
21152: CALL_OW 88
// end ;
21156: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
21157: LD_INT 19
21159: PPUSH
21160: LD_INT 22
21162: PUSH
21163: LD_INT 3
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PPUSH
21170: CALL_OW 70
21174: PUSH
21175: LD_EXP 28
21179: AND
21180: IFFALSE 21231
21182: GO 21184
21184: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
21185: LD_INT 19
21187: PPUSH
21188: LD_INT 22
21190: PUSH
21191: LD_INT 3
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PPUSH
21198: CALL_OW 70
21202: PPUSH
21203: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
21207: LD_EXP 30
21211: PPUSH
21212: LD_STRING DH-Ruattfirst-1
21214: PPUSH
21215: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
21219: LD_EXP 30
21223: PPUSH
21224: LD_STRING DH-Ruattfirst-2
21226: PPUSH
21227: CALL_OW 88
// end ;
21231: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
21232: LD_INT 19
21234: PPUSH
21235: LD_INT 22
21237: PUSH
21238: LD_INT 3
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PPUSH
21245: CALL_OW 70
21249: PUSH
21250: LD_EXP 28
21254: NOT
21255: AND
21256: IFFALSE 21295
21258: GO 21260
21260: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
21261: LD_INT 19
21263: PPUSH
21264: LD_INT 22
21266: PUSH
21267: LD_INT 3
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PPUSH
21274: CALL_OW 70
21278: PPUSH
21279: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
21283: LD_EXP 30
21287: PPUSH
21288: LD_STRING DH-Ruattnext-1
21290: PPUSH
21291: CALL_OW 88
// end ;
21295: END
// every 0 0$1 trigger GetResourceType ( GetBase ( arDepot ) , mat_oil ) < 31 and IsOk ( Givi ) do var vehicle , driver , live ;
21296: LD_EXP 44
21300: PPUSH
21301: CALL_OW 274
21305: PPUSH
21306: LD_INT 2
21308: PPUSH
21309: CALL_OW 275
21313: PUSH
21314: LD_INT 31
21316: LESS
21317: PUSH
21318: LD_EXP 31
21322: PPUSH
21323: CALL_OW 302
21327: AND
21328: IFFALSE 21883
21330: GO 21332
21332: DISABLE
21333: LD_INT 0
21335: PPUSH
21336: PPUSH
21337: PPUSH
// begin DialogueOn ;
21338: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
21342: LD_EXP 30
21346: PPUSH
21347: LD_STRING DH-Fuel-1
21349: PPUSH
21350: CALL_OW 88
// Say ( Givi , DG-Fuel-2 ) ;
21354: LD_EXP 31
21358: PPUSH
21359: LD_STRING DG-Fuel-2
21361: PPUSH
21362: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
21366: LD_EXP 31
21370: PPUSH
21371: LD_STRING DG-Fuel-3
21373: PPUSH
21374: CALL_OW 88
// DialogueOff ;
21378: CALL_OW 7
// Query ( Oil ) ;
21382: LD_STRING Oil
21384: PPUSH
21385: CALL_OW 97
// SetAreaMapShow ( oilArea , 1 ) ;
21389: LD_INT 20
21391: PPUSH
21392: LD_INT 1
21394: PPUSH
21395: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
21399: LD_INT 35
21401: PPUSH
21402: CALL_OW 67
// until FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
21406: LD_INT 20
21408: PPUSH
21409: LD_INT 22
21411: PUSH
21412: LD_INT 2
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 33
21421: PUSH
21422: LD_INT 1
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 2
21431: PUSH
21432: LD_INT 34
21434: PUSH
21435: LD_INT 32
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 34
21444: PUSH
21445: LD_INT 51
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: LIST
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: LIST
21461: PPUSH
21462: CALL_OW 70
21466: IFFALSE 21399
// SetAreaMapShow ( oilArea , 0 ) ;
21468: LD_INT 20
21470: PPUSH
21471: LD_INT 0
21473: PPUSH
21474: CALL_OW 424
// vehicle := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) [ 1 ] ;
21478: LD_ADDR_VAR 0 1
21482: PUSH
21483: LD_INT 20
21485: PPUSH
21486: LD_INT 22
21488: PUSH
21489: LD_INT 2
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 33
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 2
21508: PUSH
21509: LD_INT 34
21511: PUSH
21512: LD_INT 32
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 34
21521: PUSH
21522: LD_INT 51
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: LIST
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: LIST
21538: PPUSH
21539: CALL_OW 70
21543: PUSH
21544: LD_INT 1
21546: ARRAY
21547: ST_TO_ADDR
// driver := IsDrivenBy ( vehicle ) ;
21548: LD_ADDR_VAR 0 2
21552: PUSH
21553: LD_VAR 0 1
21557: PPUSH
21558: CALL_OW 311
21562: ST_TO_ADDR
// live := GetLives ( vehicle ) ;
21563: LD_ADDR_VAR 0 3
21567: PUSH
21568: LD_VAR 0 1
21572: PPUSH
21573: CALL_OW 256
21577: ST_TO_ADDR
// RemoveUnit ( driver ) ;
21578: LD_VAR 0 2
21582: PPUSH
21583: CALL_OW 64
// RemoveUnit ( vehicle ) ;
21587: LD_VAR 0 1
21591: PPUSH
21592: CALL_OW 64
// wait ( rand ( 4 4$30 , 5 5$30 ) ) ;
21596: LD_INT 9450
21598: PPUSH
21599: LD_INT 11550
21601: PPUSH
21602: CALL_OW 12
21606: PPUSH
21607: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21611: LD_INT 35
21613: PPUSH
21614: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
21618: LD_INT 22
21620: PUSH
21621: LD_INT 3
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 92
21630: PUSH
21631: LD_INT 261
21633: PUSH
21634: LD_INT 71
21636: PUSH
21637: LD_INT 12
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PPUSH
21650: CALL_OW 69
21654: NOT
21655: PUSH
21656: LD_INT 277
21658: PPUSH
21659: LD_INT 80
21661: PPUSH
21662: CALL_OW 428
21666: NOT
21667: AND
21668: IFFALSE 21611
// uc_nation := GetNation ( vehicle ) ;
21670: LD_ADDR_OWVAR 21
21674: PUSH
21675: LD_VAR 0 1
21679: PPUSH
21680: CALL_OW 248
21684: ST_TO_ADDR
// uc_side := 2 ;
21685: LD_ADDR_OWVAR 20
21689: PUSH
21690: LD_INT 2
21692: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( vehicle ) , GetEngine ( vehicle ) , GetControl ( vehicle ) , GetWeapon ( vehicle ) , 66 ) ;
21693: LD_VAR 0 1
21697: PPUSH
21698: CALL_OW 265
21702: PPUSH
21703: LD_VAR 0 1
21707: PPUSH
21708: CALL_OW 262
21712: PPUSH
21713: LD_VAR 0 1
21717: PPUSH
21718: CALL_OW 263
21722: PPUSH
21723: LD_VAR 0 1
21727: PPUSH
21728: CALL_OW 264
21732: PPUSH
21733: LD_INT 66
21735: PPUSH
21736: CALL 30310 0 5
// vehicle := CreateVehicle ;
21740: LD_ADDR_VAR 0 1
21744: PUSH
21745: CALL_OW 45
21749: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
21750: LD_VAR 0 1
21754: PPUSH
21755: LD_INT 277
21757: PPUSH
21758: LD_INT 80
21760: PPUSH
21761: LD_INT 4
21763: PPUSH
21764: LD_INT 0
21766: PPUSH
21767: CALL 64836 0 5
// PlaceHumanInUnit ( driver , vehicle ) ;
21771: LD_VAR 0 2
21775: PPUSH
21776: LD_VAR 0 1
21780: PPUSH
21781: CALL_OW 52
// SetLives ( vehicle , live ) ;
21785: LD_VAR 0 1
21789: PPUSH
21790: LD_VAR 0 3
21794: PPUSH
21795: CALL_OW 234
// if Prob ( [ 70 , 60 , 50 , 40 ] [ Difficulty ] ) then
21799: LD_INT 70
21801: PUSH
21802: LD_INT 60
21804: PUSH
21805: LD_INT 50
21807: PUSH
21808: LD_INT 40
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: PUSH
21817: LD_OWVAR 67
21821: ARRAY
21822: PPUSH
21823: CALL_OW 13
21827: IFFALSE 21846
// SetCargo ( vehicle , mat_oil , 100 ) else
21829: LD_VAR 0 1
21833: PPUSH
21834: LD_INT 2
21836: PPUSH
21837: LD_INT 100
21839: PPUSH
21840: CALL_OW 290
21844: GO 21868
// if live > 333 then
21846: LD_VAR 0 3
21850: PUSH
21851: LD_INT 333
21853: GREATER
21854: IFFALSE 21868
// SetLives ( vehicle , 333 ) ;
21856: LD_VAR 0 1
21860: PPUSH
21861: LD_INT 333
21863: PPUSH
21864: CALL_OW 234
// ComMoveXY ( vehicle , 250 , 119 ) ;
21868: LD_VAR 0 1
21872: PPUSH
21873: LD_INT 250
21875: PPUSH
21876: LD_INT 119
21878: PPUSH
21879: CALL_OW 111
// end ;
21883: PPOPN 3
21885: END
// every 0 0$1 trigger leninSpotted and omarAttack do
21886: LD_EXP 14
21890: PUSH
21891: LD_EXP 23
21895: AND
21896: IFFALSE 22196
21898: GO 21900
21900: DISABLE
// begin wait ( 0 0$45 ) ;
21901: LD_INT 1575
21903: PPUSH
21904: CALL_OW 67
// DialogueOn ;
21908: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
21912: LD_EXP 38
21916: PPUSH
21917: LD_STRING DShar-End-1
21919: PPUSH
21920: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
21924: LD_EXP 30
21928: PPUSH
21929: LD_STRING DH-End-2
21931: PPUSH
21932: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
21936: LD_EXP 38
21940: PPUSH
21941: LD_STRING DShar-End-3
21943: PPUSH
21944: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
21948: LD_EXP 30
21952: PPUSH
21953: LD_STRING DH-End-4
21955: PPUSH
21956: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
21960: LD_EXP 38
21964: PPUSH
21965: LD_STRING DShar-End-5
21967: PPUSH
21968: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
21972: LD_EXP 38
21976: PPUSH
21977: LD_STRING DShar-End-6
21979: PPUSH
21980: CALL_OW 94
// dwait ( 0 0$2 ) ;
21984: LD_INT 70
21986: PPUSH
21987: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
21991: LD_EXP 30
21995: PPUSH
21996: LD_STRING DH-End-7
21998: PPUSH
21999: CALL_OW 88
// DialogueOff ;
22003: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
22007: LD_STRING M6
22009: PPUSH
22010: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
22014: LD_INT 17
22016: PPUSH
22017: LD_INT 1
22019: PPUSH
22020: CALL_OW 424
// escapeAllowed := true ;
22024: LD_ADDR_EXP 24
22028: PUSH
22029: LD_INT 1
22031: ST_TO_ADDR
// wait ( 0 0$2 ) ;
22032: LD_INT 70
22034: PPUSH
22035: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
22039: LD_EXP 41
22043: PPUSH
22044: LD_STRING DKs-End-8
22046: PPUSH
22047: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
22051: LD_EXP 35
22055: PPUSH
22056: LD_STRING DK-End-10
22058: PPUSH
22059: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
22063: LD_EXP 41
22067: PPUSH
22068: LD_STRING DKs-End-9
22070: PPUSH
22071: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
22075: LD_EXP 37
22079: PPUSH
22080: LD_STRING DMar-End-11
22082: PPUSH
22083: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
22087: LD_STRING 05_DrugsTested
22089: PPUSH
22090: LD_EXP 1
22094: PPUSH
22095: CALL_OW 30
22099: IFFALSE 22113
// Say ( Mike , DM-End-12 ) ;
22101: LD_EXP 32
22105: PPUSH
22106: LD_STRING DM-End-12
22108: PPUSH
22109: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
22113: LD_EXP 39
22117: PPUSH
22118: LD_STRING DO-End-13
22120: PPUSH
22121: CALL_OW 88
// if IsOk ( Sophia ) then
22125: LD_EXP 36
22129: PPUSH
22130: CALL_OW 302
22134: IFFALSE 22160
// begin Say ( Sophia , DS-End-15 ) ;
22136: LD_EXP 36
22140: PPUSH
22141: LD_STRING DS-End-15
22143: PPUSH
22144: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
22148: LD_EXP 35
22152: PPUSH
22153: LD_STRING DK-End-16
22155: PPUSH
22156: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
22160: LD_EXP 31
22164: PPUSH
22165: LD_STRING DG-End-17
22167: PPUSH
22168: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
22172: LD_EXP 31
22176: PPUSH
22177: LD_STRING DG-End-18
22179: PPUSH
22180: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
22184: LD_EXP 31
22188: PPUSH
22189: LD_STRING DG-End-19
22191: PPUSH
22192: CALL_OW 88
// end ;
22196: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
22197: LD_EXP 24
22201: IFFALSE 22329
22203: GO 22205
22205: DISABLE
22206: LD_INT 0
22208: PPUSH
22209: PPUSH
// begin enable ;
22210: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
22211: LD_ADDR_OWVAR 47
22215: PUSH
22216: LD_STRING #X106-2
22218: PUSH
22219: LD_EXP 25
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
22228: LD_ADDR_EXP 25
22232: PUSH
22233: LD_EXP 25
22237: PUSH
22238: LD_INT 35
22240: MINUS
22241: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
22242: LD_ADDR_VAR 0 2
22246: PUSH
22247: LD_INT 17
22249: PPUSH
22250: LD_INT 22
22252: PUSH
22253: LD_INT 2
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 21
22262: PUSH
22263: LD_INT 1
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 23
22272: PUSH
22273: LD_INT 2
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: LIST
22284: PPUSH
22285: CALL_OW 71
22289: ST_TO_ADDR
// if not outsiders then
22290: LD_VAR 0 2
22294: NOT
22295: IFFALSE 22312
// begin escapeAllowed := false ;
22297: LD_ADDR_EXP 24
22301: PUSH
22302: LD_INT 0
22304: ST_TO_ADDR
// disable ;
22305: DISABLE
// MissionWin ;
22306: CALL 22332 0 0
// exit ;
22310: GO 22329
// end ; if escapeTimer <= 0 0$00 then
22312: LD_EXP 25
22316: PUSH
22317: LD_INT 0
22319: LESSEQUAL
22320: IFFALSE 22329
// YouLost ( TimeOut ) ;
22322: LD_STRING TimeOut
22324: PPUSH
22325: CALL_OW 104
// end ;
22329: PPOPN 2
22331: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
22332: LD_INT 0
22334: PPUSH
22335: PPUSH
22336: PPUSH
22337: PPUSH
22338: PPUSH
// Say ( Heike , DH-End-20 ) ;
22339: LD_EXP 30
22343: PPUSH
22344: LD_STRING DH-End-20
22346: PPUSH
22347: CALL_OW 88
// if rolfDied then
22351: LD_EXP 13
22355: IFFALSE 22370
// AddMedal ( med1 , - 1 ) else
22357: LD_STRING med1
22359: PPUSH
22360: LD_INT 1
22362: NEG
22363: PPUSH
22364: CALL_OW 101
22368: GO 22400
// if not canRolfJoin then
22370: LD_EXP 29
22374: NOT
22375: IFFALSE 22390
// AddMedal ( med1 , - 2 ) else
22377: LD_STRING med1
22379: PPUSH
22380: LD_INT 2
22382: NEG
22383: PPUSH
22384: CALL_OW 101
22388: GO 22400
// AddMedal ( med1 , 1 ) ;
22390: LD_STRING med1
22392: PPUSH
22393: LD_INT 1
22395: PPUSH
22396: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
22400: LD_EXP 22
22404: PUSH
22405: LD_EXP 16
22409: AND
22410: IFFALSE 22424
// AddMedal ( med2 , 1 ) else
22412: LD_STRING med2
22414: PPUSH
22415: LD_INT 1
22417: PPUSH
22418: CALL_OW 101
22422: GO 22473
// if omarHasVehicles then
22424: LD_EXP 22
22428: IFFALSE 22443
// AddMedal ( med2 , - 1 ) else
22430: LD_STRING med2
22432: PPUSH
22433: LD_INT 1
22435: NEG
22436: PPUSH
22437: CALL_OW 101
22441: GO 22473
// if rolfHasVehicles then
22443: LD_EXP 16
22447: IFFALSE 22462
// AddMedal ( med2 , - 2 ) else
22449: LD_STRING med2
22451: PPUSH
22452: LD_INT 2
22454: NEG
22455: PPUSH
22456: CALL_OW 101
22460: GO 22473
// AddMedal ( med2 , - 3 ) ;
22462: LD_STRING med2
22464: PPUSH
22465: LD_INT 3
22467: NEG
22468: PPUSH
22469: CALL_OW 101
// if ruLoseCounter >= [ 30 , 45 , 50 , 62 ] [ Difficulty ] and heikeLoseCounter = 0 then
22473: LD_EXP 5
22477: PUSH
22478: LD_INT 30
22480: PUSH
22481: LD_INT 45
22483: PUSH
22484: LD_INT 50
22486: PUSH
22487: LD_INT 62
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: PUSH
22496: LD_OWVAR 67
22500: ARRAY
22501: GREATEREQUAL
22502: PUSH
22503: LD_EXP 26
22507: PUSH
22508: LD_INT 0
22510: EQUAL
22511: AND
22512: IFFALSE 22526
// AddMedal ( med3 , 1 ) else
22514: LD_STRING med3
22516: PPUSH
22517: LD_INT 1
22519: PPUSH
22520: CALL_OW 101
22524: GO 22556
// if heikeLoseCounter then
22526: LD_EXP 26
22530: IFFALSE 22545
// AddMedal ( med3 , - 2 ) else
22532: LD_STRING med3
22534: PPUSH
22535: LD_INT 2
22537: NEG
22538: PPUSH
22539: CALL_OW 101
22543: GO 22556
// AddMedal ( med3 , - 1 ) ;
22545: LD_STRING med3
22547: PPUSH
22548: LD_INT 1
22550: NEG
22551: PPUSH
22552: CALL_OW 101
// GiveMedals ( MAIN ) ;
22556: LD_STRING MAIN
22558: PPUSH
22559: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
22563: LD_INT 22
22565: PUSH
22566: LD_INT 2
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 23
22575: PUSH
22576: LD_INT 2
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 21
22585: PUSH
22586: LD_INT 1
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: LIST
22597: PPUSH
22598: CALL_OW 69
22602: PPUSH
22603: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
22607: LD_EXP 30
22611: PPUSH
22612: LD_STRING 06_Heike
22614: PPUSH
22615: CALL_OW 38
// if Aviradze then
22619: LD_EXP 42
22623: IFFALSE 22637
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
22625: LD_EXP 42
22629: PPUSH
22630: LD_STRING 06_Aviradze
22632: PPUSH
22633: CALL_OW 38
// if Ibrahim then
22637: LD_EXP 33
22641: IFFALSE 22655
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
22643: LD_EXP 33
22647: PPUSH
22648: LD_STRING 06_Ibrahim
22650: PPUSH
22651: CALL_OW 38
// if Kamil then
22655: LD_EXP 34
22659: IFFALSE 22673
// SaveCharacters ( Kamil , 06_Kamil ) ;
22661: LD_EXP 34
22665: PPUSH
22666: LD_STRING 06_Kamil
22668: PPUSH
22669: CALL_OW 38
// if Sophia then
22673: LD_EXP 36
22677: IFFALSE 22691
// SaveCharacters ( Sophia , 06_Sophia ) ;
22679: LD_EXP 36
22683: PPUSH
22684: LD_STRING 06_Sophia
22686: PPUSH
22687: CALL_OW 38
// if Kaia then
22691: LD_EXP 35
22695: IFFALSE 22709
// SaveCharacters ( Kaia , 06_Kaia ) ;
22697: LD_EXP 35
22701: PPUSH
22702: LD_STRING 06_Kaia
22704: PPUSH
22705: CALL_OW 38
// if Givi then
22709: LD_EXP 31
22713: IFFALSE 22727
// SaveCharacters ( Givi , 06_Givi ) ;
22715: LD_EXP 31
22719: PPUSH
22720: LD_STRING 06_Givi
22722: PPUSH
22723: CALL_OW 38
// if Mike then
22727: LD_EXP 32
22731: IFFALSE 22745
// SaveCharacters ( Mike , 06_Mike ) ;
22733: LD_EXP 32
22737: PPUSH
22738: LD_STRING 06_Mike
22740: PPUSH
22741: CALL_OW 38
// if Markov then
22745: LD_EXP 37
22749: IFFALSE 22763
// SaveCharacters ( Markov , 06_Markov ) ;
22751: LD_EXP 37
22755: PPUSH
22756: LD_STRING 06_Markov
22758: PPUSH
22759: CALL_OW 38
// if Kurt then
22763: LD_EXP 41
22767: IFFALSE 22781
// SaveCharacters ( Kurt , 06_Kurt ) ;
22769: LD_EXP 41
22773: PPUSH
22774: LD_STRING 06_Kurt
22776: PPUSH
22777: CALL_OW 38
// if heikeSecondSquad then
22781: LD_EXP 45
22785: IFFALSE 22799
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
22787: LD_EXP 45
22791: PPUSH
22792: LD_STRING 06_others
22794: PPUSH
22795: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
22799: LD_ADDR_VAR 0 3
22803: PUSH
22804: LD_INT 22
22806: PUSH
22807: LD_INT 2
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 23
22816: PUSH
22817: LD_INT 0
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PPUSH
22828: CALL_OW 69
22832: ST_TO_ADDR
// if tmp then
22833: LD_VAR 0 3
22837: IFFALSE 22851
// SaveCharacters ( tmp , 06_apes ) ;
22839: LD_VAR 0 3
22843: PPUSH
22844: LD_STRING 06_apes
22846: PPUSH
22847: CALL_OW 38
// if Rolf then
22851: LD_EXP 43
22855: IFFALSE 22906
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
22857: LD_EXP 43
22861: PPUSH
22862: LD_STRING 06_Rolf
22864: PPUSH
22865: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
22869: LD_STRING enableBioCharacter(BIO_ROLF)
22871: PPUSH
22872: CALL_OW 559
// if rolfSquad diff Rolf then
22876: LD_EXP 47
22880: PUSH
22881: LD_EXP 43
22885: DIFF
22886: IFFALSE 22906
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
22888: LD_EXP 47
22892: PUSH
22893: LD_EXP 43
22897: DIFF
22898: PPUSH
22899: LD_STRING 06_RolfSquad
22901: PPUSH
22902: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
22906: LD_ADDR_VAR 0 3
22910: PUSH
22911: LD_INT 17
22913: PPUSH
22914: LD_INT 21
22916: PUSH
22917: LD_INT 2
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PPUSH
22924: CALL_OW 70
22928: ST_TO_ADDR
// if tmp then
22929: LD_VAR 0 3
22933: IFFALSE 23227
// begin tmp2 := [ ] ;
22935: LD_ADDR_VAR 0 4
22939: PUSH
22940: EMPTY
22941: ST_TO_ADDR
// for i in tmp do
22942: LD_ADDR_VAR 0 2
22946: PUSH
22947: LD_VAR 0 3
22951: PUSH
22952: FOR_IN
22953: IFFALSE 23213
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
22955: LD_VAR 0 2
22959: PPUSH
22960: CALL_OW 264
22964: PUSH
22965: LD_INT 32
22967: PUSH
22968: LD_INT 12
22970: PUSH
22971: LD_INT 51
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: IN
22979: IFFALSE 23116
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
22981: LD_ADDR_VAR 0 5
22985: PUSH
22986: LD_VAR 0 2
22990: PPUSH
22991: LD_INT 1
22993: PPUSH
22994: CALL_OW 289
22998: PUSH
22999: LD_VAR 0 2
23003: PPUSH
23004: LD_INT 2
23006: PPUSH
23007: CALL_OW 289
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
23016: LD_ADDR_VAR 0 4
23020: PUSH
23021: LD_VAR 0 4
23025: PPUSH
23026: LD_VAR 0 4
23030: PUSH
23031: LD_INT 1
23033: PLUS
23034: PPUSH
23035: LD_VAR 0 2
23039: PPUSH
23040: CALL_OW 265
23044: PUSH
23045: LD_VAR 0 2
23049: PPUSH
23050: CALL_OW 262
23054: PUSH
23055: LD_VAR 0 2
23059: PPUSH
23060: CALL_OW 263
23064: PUSH
23065: LD_VAR 0 2
23069: PPUSH
23070: CALL_OW 264
23074: PUSH
23075: LD_VAR 0 2
23079: PPUSH
23080: CALL_OW 248
23084: PUSH
23085: LD_VAR 0 2
23089: PPUSH
23090: CALL_OW 256
23094: PUSH
23095: LD_VAR 0 5
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: PPUSH
23109: CALL_OW 1
23113: ST_TO_ADDR
// end else
23114: GO 23211
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
23116: LD_ADDR_VAR 0 4
23120: PUSH
23121: LD_VAR 0 4
23125: PPUSH
23126: LD_VAR 0 4
23130: PUSH
23131: LD_INT 1
23133: PLUS
23134: PPUSH
23135: LD_VAR 0 2
23139: PPUSH
23140: CALL_OW 265
23144: PUSH
23145: LD_VAR 0 2
23149: PPUSH
23150: CALL_OW 262
23154: PUSH
23155: LD_VAR 0 2
23159: PPUSH
23160: CALL_OW 263
23164: PUSH
23165: LD_VAR 0 2
23169: PPUSH
23170: CALL_OW 264
23174: PUSH
23175: LD_VAR 0 2
23179: PPUSH
23180: CALL_OW 248
23184: PUSH
23185: LD_VAR 0 2
23189: PPUSH
23190: CALL_OW 256
23194: PUSH
23195: EMPTY
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: PPUSH
23206: CALL_OW 1
23210: ST_TO_ADDR
23211: GO 22952
23213: POP
23214: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
23215: LD_VAR 0 4
23219: PPUSH
23220: LD_STRING 06_Vehicles
23222: PPUSH
23223: CALL_OW 39
// end ; YouWin ;
23227: CALL_OW 103
// end ; end_of_file
23231: LD_VAR 0 1
23235: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
23236: LD_INT 0
23238: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
23239: LD_VAR 0 1
23243: PPUSH
23244: LD_VAR 0 2
23248: PPUSH
23249: CALL 82605 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
23253: LD_VAR 0 1
23257: PPUSH
23258: CALL_OW 255
23262: PUSH
23263: LD_INT 2
23265: EQUAL
23266: PUSH
23267: LD_OWVAR 52
23271: AND
23272: PUSH
23273: LD_VAR 0 1
23277: PPUSH
23278: CALL_OW 263
23282: PUSH
23283: LD_INT 1
23285: EQUAL
23286: AND
23287: IFFALSE 23342
// begin driver := IsDrivenBy ( vehicle ) ;
23289: LD_ADDR_VAR 0 3
23293: PUSH
23294: LD_VAR 0 1
23298: PPUSH
23299: CALL_OW 311
23303: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
23304: LD_VAR 0 1
23308: PPUSH
23309: LD_INT 211
23311: PPUSH
23312: LD_INT 101
23314: PPUSH
23315: CALL_OW 111
// AddComExitVehicle ( driver ) ;
23319: LD_VAR 0 3
23323: PPUSH
23324: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23328: LD_VAR 0 3
23332: PPUSH
23333: LD_VAR 0 2
23337: PPUSH
23338: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
23342: LD_VAR 0 1
23346: PPUSH
23347: CALL_OW 255
23351: PUSH
23352: LD_INT 3
23354: EQUAL
23355: IFFALSE 23386
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
23357: LD_ADDR_EXP 56
23361: PUSH
23362: LD_EXP 56
23366: PPUSH
23367: LD_EXP 56
23371: PUSH
23372: LD_INT 1
23374: PLUS
23375: PPUSH
23376: LD_VAR 0 1
23380: PPUSH
23381: CALL_OW 1
23385: ST_TO_ADDR
// end ;
23386: PPOPN 3
23388: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
23389: LD_VAR 0 1
23393: PPUSH
23394: CALL_OW 255
23398: PUSH
23399: LD_INT 8
23401: EQUAL
23402: PUSH
23403: LD_VAR 0 1
23407: PPUSH
23408: CALL_OW 266
23412: PUSH
23413: LD_INT 4
23415: EQUAL
23416: AND
23417: IFFALSE 23428
// ComUpgrade ( b ) ;
23419: LD_VAR 0 1
23423: PPUSH
23424: CALL_OW 146
// end ;
23428: PPOPN 1
23430: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
23431: LD_VAR 0 1
23435: PPUSH
23436: CALL 82483 0 1
// if un = Heike then
23440: LD_VAR 0 1
23444: PUSH
23445: LD_EXP 30
23449: EQUAL
23450: IFFALSE 23459
// YouLost ( Heike ) ;
23452: LD_STRING Heike
23454: PPUSH
23455: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
23459: LD_VAR 0 1
23463: PUSH
23464: LD_INT 22
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 23
23476: PUSH
23477: LD_INT 2
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PPUSH
23488: CALL_OW 69
23492: IN
23493: IFFALSE 23509
// heikeLoseCounter := heikeLoseCounter + 1 ;
23495: LD_ADDR_EXP 26
23499: PUSH
23500: LD_EXP 26
23504: PUSH
23505: LD_INT 1
23507: PLUS
23508: ST_TO_ADDR
// if un = arDepot then
23509: LD_VAR 0 1
23513: PUSH
23514: LD_EXP 44
23518: EQUAL
23519: IFFALSE 23528
// YouLost ( Base ) ;
23521: LD_STRING Base
23523: PPUSH
23524: CALL_OW 104
// if un = Rolf then
23528: LD_VAR 0 1
23532: PUSH
23533: LD_EXP 43
23537: EQUAL
23538: IFFALSE 23548
// rolfDied := true ;
23540: LD_ADDR_EXP 13
23544: PUSH
23545: LD_INT 1
23547: ST_TO_ADDR
// if un in rolfSquad then
23548: LD_VAR 0 1
23552: PUSH
23553: LD_EXP 47
23557: IN
23558: IFFALSE 23576
// rolfSquad := rolfSquad diff un ;
23560: LD_ADDR_EXP 47
23564: PUSH
23565: LD_EXP 47
23569: PUSH
23570: LD_VAR 0 1
23574: DIFF
23575: ST_TO_ADDR
// if un in omarSquad then
23576: LD_VAR 0 1
23580: PUSH
23581: LD_EXP 48
23585: IN
23586: IFFALSE 23604
// omarSquad := omarSquad diff un ;
23588: LD_ADDR_EXP 48
23592: PUSH
23593: LD_EXP 48
23597: PUSH
23598: LD_VAR 0 1
23602: DIFF
23603: ST_TO_ADDR
// if GetSide ( un ) = 3 then
23604: LD_VAR 0 1
23608: PPUSH
23609: CALL_OW 255
23613: PUSH
23614: LD_INT 3
23616: EQUAL
23617: IFFALSE 23633
// ruLoseCounter := ruLoseCounter + 1 ;
23619: LD_ADDR_EXP 5
23623: PUSH
23624: LD_EXP 5
23628: PUSH
23629: LD_INT 1
23631: PLUS
23632: ST_TO_ADDR
// if un in ruAttackers then
23633: LD_VAR 0 1
23637: PUSH
23638: LD_EXP 57
23642: IN
23643: IFFALSE 23661
// ruAttackers := ruAttackers diff un ;
23645: LD_ADDR_EXP 57
23649: PUSH
23650: LD_EXP 57
23654: PUSH
23655: LD_VAR 0 1
23659: DIFF
23660: ST_TO_ADDR
// end ;
23661: PPOPN 1
23663: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
23664: LD_INT 0
23666: PPUSH
23667: PPUSH
23668: PPUSH
23669: PPUSH
// begin if GetSide ( un ) = 3 and not un in ruAttackers then
23670: LD_VAR 0 1
23674: PPUSH
23675: CALL_OW 255
23679: PUSH
23680: LD_INT 3
23682: EQUAL
23683: PUSH
23684: LD_VAR 0 1
23688: PUSH
23689: LD_EXP 57
23693: IN
23694: NOT
23695: AND
23696: IFFALSE 24192
// begin if not IsInArea ( un , ruMainBase ) then
23698: LD_VAR 0 1
23702: PPUSH
23703: LD_INT 10
23705: PPUSH
23706: CALL_OW 308
23710: NOT
23711: IFFALSE 23725
// ComMoveToArea ( un , ruMainBase ) ;
23713: LD_VAR 0 1
23717: PPUSH
23718: LD_INT 10
23720: PPUSH
23721: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
23725: LD_INT 35
23727: PPUSH
23728: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
23732: LD_VAR 0 1
23736: PPUSH
23737: CALL_OW 302
23741: NOT
23742: PUSH
23743: LD_VAR 0 1
23747: PPUSH
23748: LD_INT 10
23750: PPUSH
23751: CALL_OW 308
23755: OR
23756: IFFALSE 23725
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
23758: LD_ADDR_EXP 55
23762: PUSH
23763: LD_EXP 55
23767: PPUSH
23768: LD_EXP 55
23772: PUSH
23773: LD_INT 1
23775: PLUS
23776: PPUSH
23777: LD_VAR 0 1
23781: PPUSH
23782: CALL_OW 1
23786: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
23787: LD_ADDR_VAR 0 8
23791: PUSH
23792: LD_INT 72
23794: PUSH
23795: LD_INT 12
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: ST_TO_ADDR
// if tmp then
23802: LD_VAR 0 8
23806: IFFALSE 23921
// for i in tmp do
23808: LD_ADDR_VAR 0 5
23812: PUSH
23813: LD_VAR 0 8
23817: PUSH
23818: FOR_IN
23819: IFFALSE 23919
// if UnitsInside ( i ) < 6 then
23821: LD_VAR 0 5
23825: PPUSH
23826: CALL_OW 313
23830: PUSH
23831: LD_INT 6
23833: LESS
23834: IFFALSE 23917
// begin AddComEnterUnit ( un , i ) ;
23836: LD_VAR 0 1
23840: PPUSH
23841: LD_VAR 0 5
23845: PPUSH
23846: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
23850: LD_VAR 0 8
23854: PPUSH
23855: LD_INT 22
23857: PUSH
23858: LD_INT 23
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 1
23867: PPUSH
23868: LD_INT 2
23870: PPUSH
23871: CALL_OW 12
23875: ARRAY
23876: PPUSH
23877: LD_INT 1
23879: PPUSH
23880: LD_INT 1
23882: PPUSH
23883: LD_INT 44
23885: PUSH
23886: LD_INT 46
23888: PUSH
23889: LD_INT 47
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 1
23899: PPUSH
23900: LD_INT 3
23902: PPUSH
23903: CALL_OW 12
23907: ARRAY
23908: PPUSH
23909: CALL_OW 185
// exit ;
23913: POP
23914: POP
23915: GO 24192
// end ;
23917: GO 23818
23919: POP
23920: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23921: LD_ADDR_VAR 0 8
23925: PUSH
23926: LD_INT 10
23928: PPUSH
23929: LD_INT 22
23931: PUSH
23932: LD_INT 3
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 50
23941: PUSH
23942: EMPTY
23943: LIST
23944: PUSH
23945: LD_INT 2
23947: PUSH
23948: LD_INT 30
23950: PUSH
23951: LD_INT 4
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 30
23960: PUSH
23961: LD_INT 5
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 30
23970: PUSH
23971: LD_INT 32
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 30
23980: PUSH
23981: LD_INT 31
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: LIST
23999: PPUSH
24000: CALL_OW 70
24004: ST_TO_ADDR
// if not tmp then
24005: LD_VAR 0 8
24009: NOT
24010: IFFALSE 24029
// begin ComMoveXY ( un , 83 , 133 ) ;
24012: LD_VAR 0 1
24016: PPUSH
24017: LD_INT 83
24019: PPUSH
24020: LD_INT 133
24022: PPUSH
24023: CALL_OW 111
// exit ;
24027: GO 24192
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
24029: LD_ADDR_VAR 0 6
24033: PUSH
24034: LD_VAR 0 1
24038: PPUSH
24039: LD_VAR 0 8
24043: PPUSH
24044: LD_INT 1
24046: PPUSH
24047: LD_INT 1
24049: PPUSH
24050: CALL 30867 0 4
24054: PUSH
24055: FOR_IN
24056: IFFALSE 24190
// begin case GetBType ( b ) of b_armoury , b_barracks :
24058: LD_VAR 0 6
24062: PPUSH
24063: CALL_OW 266
24067: PUSH
24068: LD_INT 4
24070: DOUBLE
24071: EQUAL
24072: IFTRUE 24082
24074: LD_INT 5
24076: DOUBLE
24077: EQUAL
24078: IFTRUE 24082
24080: GO 24093
24082: POP
// p := 6 ; b_breastwork , b_bunker :
24083: LD_ADDR_VAR 0 7
24087: PUSH
24088: LD_INT 6
24090: ST_TO_ADDR
24091: GO 24119
24093: LD_INT 31
24095: DOUBLE
24096: EQUAL
24097: IFTRUE 24107
24099: LD_INT 32
24101: DOUBLE
24102: EQUAL
24103: IFTRUE 24107
24105: GO 24118
24107: POP
// p := 1 ; end ;
24108: LD_ADDR_VAR 0 7
24112: PUSH
24113: LD_INT 1
24115: ST_TO_ADDR
24116: GO 24119
24118: POP
// if UnitsInside ( b ) < p then
24119: LD_VAR 0 6
24123: PPUSH
24124: CALL_OW 313
24128: PUSH
24129: LD_VAR 0 7
24133: LESS
24134: IFFALSE 24188
// begin ComEnterUnit ( un , b ) ;
24136: LD_VAR 0 1
24140: PPUSH
24141: LD_VAR 0 6
24145: PPUSH
24146: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
24150: LD_VAR 0 6
24154: PPUSH
24155: CALL_OW 266
24159: PUSH
24160: LD_INT 4
24162: PUSH
24163: LD_INT 5
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: IN
24170: IFFALSE 24184
// AddComChangeProfession ( un , class_soldier ) ;
24172: LD_VAR 0 1
24176: PPUSH
24177: LD_INT 1
24179: PPUSH
24180: CALL_OW 183
// exit ;
24184: POP
24185: POP
24186: GO 24192
// end ; end ;
24188: GO 24055
24190: POP
24191: POP
// end ; end ;
24192: PPOPN 8
24194: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
24195: LD_INT 0
24197: PPUSH
24198: PPUSH
24199: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
24200: LD_VAR 0 2
24204: PPUSH
24205: CALL_OW 255
24209: PUSH
24210: LD_INT 3
24212: EQUAL
24213: PUSH
24214: LD_VAR 0 2
24218: PPUSH
24219: CALL_OW 257
24223: PUSH
24224: LD_INT 1
24226: EQUAL
24227: AND
24228: PUSH
24229: LD_VAR 0 2
24233: PUSH
24234: LD_EXP 55
24238: IN
24239: NOT
24240: AND
24241: IFFALSE 24554
// begin ComMoveToArea ( un , ruMainBase ) ;
24243: LD_VAR 0 2
24247: PPUSH
24248: LD_INT 10
24250: PPUSH
24251: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
24255: LD_INT 35
24257: PPUSH
24258: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
24262: LD_VAR 0 2
24266: PPUSH
24267: CALL_OW 302
24271: NOT
24272: PUSH
24273: LD_VAR 0 2
24277: PPUSH
24278: LD_INT 10
24280: PPUSH
24281: CALL_OW 308
24285: OR
24286: IFFALSE 24255
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
24288: LD_ADDR_EXP 55
24292: PUSH
24293: LD_EXP 55
24297: PPUSH
24298: LD_EXP 55
24302: PUSH
24303: LD_INT 1
24305: PLUS
24306: PPUSH
24307: LD_VAR 0 2
24311: PPUSH
24312: CALL_OW 1
24316: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
24317: LD_ADDR_VAR 0 4
24321: PUSH
24322: LD_INT 10
24324: PPUSH
24325: LD_INT 22
24327: PUSH
24328: LD_INT 3
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 50
24337: PUSH
24338: EMPTY
24339: LIST
24340: PUSH
24341: LD_INT 2
24343: PUSH
24344: LD_INT 30
24346: PUSH
24347: LD_INT 4
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 30
24356: PUSH
24357: LD_INT 5
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 30
24366: PUSH
24367: LD_INT 32
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 30
24376: PUSH
24377: LD_INT 31
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: LIST
24395: PPUSH
24396: CALL_OW 70
24400: ST_TO_ADDR
// if not tmp then
24401: LD_VAR 0 4
24405: NOT
24406: IFFALSE 24425
// begin ComMoveXY ( un , 83 , 133 ) ;
24408: LD_VAR 0 2
24412: PPUSH
24413: LD_INT 83
24415: PPUSH
24416: LD_INT 133
24418: PPUSH
24419: CALL_OW 111
// exit ;
24423: GO 24803
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
24425: LD_ADDR_VAR 0 5
24429: PUSH
24430: LD_VAR 0 2
24434: PPUSH
24435: LD_VAR 0 4
24439: PPUSH
24440: LD_INT 1
24442: PPUSH
24443: LD_INT 1
24445: PPUSH
24446: CALL 30867 0 4
24450: PUSH
24451: FOR_IN
24452: IFFALSE 24552
// begin case GetBType ( b ) of b_armoury , b_barracks :
24454: LD_VAR 0 5
24458: PPUSH
24459: CALL_OW 266
24463: PUSH
24464: LD_INT 4
24466: DOUBLE
24467: EQUAL
24468: IFTRUE 24478
24470: LD_INT 5
24472: DOUBLE
24473: EQUAL
24474: IFTRUE 24478
24476: GO 24489
24478: POP
// p := 6 ; b_breastwork , b_bunker :
24479: LD_ADDR_VAR 0 3
24483: PUSH
24484: LD_INT 6
24486: ST_TO_ADDR
24487: GO 24515
24489: LD_INT 31
24491: DOUBLE
24492: EQUAL
24493: IFTRUE 24503
24495: LD_INT 32
24497: DOUBLE
24498: EQUAL
24499: IFTRUE 24503
24501: GO 24514
24503: POP
// p := 1 ; end ;
24504: LD_ADDR_VAR 0 3
24508: PUSH
24509: LD_INT 1
24511: ST_TO_ADDR
24512: GO 24515
24514: POP
// if UnitsInside ( b ) < p then
24515: LD_VAR 0 5
24519: PPUSH
24520: CALL_OW 313
24524: PUSH
24525: LD_VAR 0 3
24529: LESS
24530: IFFALSE 24550
// begin ComEnterUnit ( un , b ) ;
24532: LD_VAR 0 2
24536: PPUSH
24537: LD_VAR 0 5
24541: PPUSH
24542: CALL_OW 120
// exit ;
24546: POP
24547: POP
24548: GO 24803
// end ; end ;
24550: GO 24451
24552: POP
24553: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
24554: LD_VAR 0 2
24558: PUSH
24559: LD_EXP 55
24563: IN
24564: PUSH
24565: LD_VAR 0 2
24569: PPUSH
24570: CALL_OW 257
24574: PUSH
24575: LD_INT 1
24577: EQUAL
24578: AND
24579: IFFALSE 24803
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
24581: LD_ADDR_VAR 0 4
24585: PUSH
24586: LD_INT 10
24588: PPUSH
24589: LD_INT 22
24591: PUSH
24592: LD_INT 3
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 50
24601: PUSH
24602: EMPTY
24603: LIST
24604: PUSH
24605: LD_INT 2
24607: PUSH
24608: LD_INT 30
24610: PUSH
24611: LD_INT 4
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 30
24620: PUSH
24621: LD_INT 5
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 30
24630: PUSH
24631: LD_INT 32
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 30
24640: PUSH
24641: LD_INT 31
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: LIST
24659: PPUSH
24660: CALL_OW 70
24664: ST_TO_ADDR
// if not tmp then
24665: LD_VAR 0 4
24669: NOT
24670: IFFALSE 24674
// exit ;
24672: GO 24803
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
24674: LD_ADDR_VAR 0 5
24678: PUSH
24679: LD_VAR 0 2
24683: PPUSH
24684: LD_VAR 0 4
24688: PPUSH
24689: LD_INT 1
24691: PPUSH
24692: LD_INT 1
24694: PPUSH
24695: CALL 30867 0 4
24699: PUSH
24700: FOR_IN
24701: IFFALSE 24801
// begin case GetBType ( b ) of b_armoury , b_barracks :
24703: LD_VAR 0 5
24707: PPUSH
24708: CALL_OW 266
24712: PUSH
24713: LD_INT 4
24715: DOUBLE
24716: EQUAL
24717: IFTRUE 24727
24719: LD_INT 5
24721: DOUBLE
24722: EQUAL
24723: IFTRUE 24727
24725: GO 24738
24727: POP
// p := 6 ; b_breastwork , b_bunker :
24728: LD_ADDR_VAR 0 3
24732: PUSH
24733: LD_INT 6
24735: ST_TO_ADDR
24736: GO 24764
24738: LD_INT 31
24740: DOUBLE
24741: EQUAL
24742: IFTRUE 24752
24744: LD_INT 32
24746: DOUBLE
24747: EQUAL
24748: IFTRUE 24752
24750: GO 24763
24752: POP
// p := 1 ; end ;
24753: LD_ADDR_VAR 0 3
24757: PUSH
24758: LD_INT 1
24760: ST_TO_ADDR
24761: GO 24764
24763: POP
// if UnitsInside ( b ) < p then
24764: LD_VAR 0 5
24768: PPUSH
24769: CALL_OW 313
24773: PUSH
24774: LD_VAR 0 3
24778: LESS
24779: IFFALSE 24799
// begin ComEnterUnit ( un , b ) ;
24781: LD_VAR 0 2
24785: PPUSH
24786: LD_VAR 0 5
24790: PPUSH
24791: CALL_OW 120
// exit ;
24795: POP
24796: POP
24797: GO 24803
// end ; end ;
24799: GO 24700
24801: POP
24802: POP
// end ; end ;
24803: PPOPN 5
24805: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
24806: LD_VAR 0 1
24810: PUSH
24811: LD_INT 2
24813: EQUAL
24814: PUSH
24815: LD_VAR 0 2
24819: PUSH
24820: LD_INT 5
24822: PUSH
24823: LD_INT 8
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: IN
24830: AND
24831: IFFALSE 24840
// YouLost ( FriendlyFire ) ;
24833: LD_STRING FriendlyFire
24835: PPUSH
24836: CALL_OW 104
// end ;
24840: PPOPN 2
24842: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
24843: LD_VAR 0 1
24847: PPUSH
24848: CALL_OW 255
24852: PUSH
24853: LD_INT 8
24855: EQUAL
24856: PUSH
24857: LD_VAR 0 1
24861: PPUSH
24862: CALL_OW 266
24866: PUSH
24867: LD_INT 5
24869: EQUAL
24870: AND
24871: IFFALSE 24885
// SetClass ( unit , class_mortar ) ;
24873: LD_VAR 0 2
24877: PPUSH
24878: LD_INT 8
24880: PPUSH
24881: CALL_OW 336
// end ; end_of_file
24885: PPOPN 2
24887: END
// every 0 0$50 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 , 150 ] [ Difficulty ] do
24888: LD_INT 6
24890: PPUSH
24891: LD_INT 1
24893: PPUSH
24894: CALL_OW 287
24898: PUSH
24899: LD_INT 300
24901: PUSH
24902: LD_INT 250
24904: PUSH
24905: LD_INT 200
24907: PUSH
24908: LD_INT 150
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: PUSH
24917: LD_OWVAR 67
24921: ARRAY
24922: LESS
24923: IFFALSE 24950
24925: GO 24927
24927: DISABLE
// begin enable ;
24928: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
24929: LD_INT 1
24931: PPUSH
24932: LD_INT 5
24934: PPUSH
24935: CALL_OW 12
24939: PPUSH
24940: LD_INT 6
24942: PPUSH
24943: LD_INT 1
24945: PPUSH
24946: CALL_OW 55
// end ; end_of_file
24950: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
24951: LD_EXP 18
24955: PUSH
24956: LD_EXP 20
24960: AND
24961: PUSH
24962: LD_EXP 17
24966: PUSH
24967: LD_EXP 19
24971: AND
24972: OR
24973: IFFALSE 25292
24975: GO 24977
24977: DISABLE
// begin enable ;
24978: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
24979: LD_EXP 18
24983: PUSH
24984: LD_EXP 20
24988: AND
24989: PUSH
24990: LD_EXP 17
24994: PUSH
24995: LD_EXP 19
24999: AND
25000: AND
25001: IFFALSE 25138
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
25003: LD_ADDR_OWVAR 47
25007: PUSH
25008: LD_STRING #X106-1a
25010: PUSH
25011: LD_EXP 21
25015: PUSH
25016: LD_INT 16
25018: PPUSH
25019: LD_INT 22
25021: PUSH
25022: LD_INT 2
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 21
25031: PUSH
25032: LD_INT 2
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 33
25041: PUSH
25042: LD_INT 1
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 58
25051: PUSH
25052: EMPTY
25053: LIST
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: PPUSH
25061: CALL_OW 70
25065: MINUS
25066: PPUSH
25067: CALL 64882 0 1
25071: PUSH
25072: LD_STRING #X106-3a
25074: PUSH
25075: LD_EXP 20
25079: PUSH
25080: LD_STRING #X106-1
25082: PUSH
25083: LD_EXP 47
25087: PUSH
25088: LD_INT 0
25090: PLUS
25091: PUSH
25092: LD_EXP 47
25096: PPUSH
25097: LD_INT 55
25099: PUSH
25100: EMPTY
25101: LIST
25102: PPUSH
25103: CALL_OW 72
25107: PUSH
25108: LD_INT 0
25110: PLUS
25111: MINUS
25112: PPUSH
25113: CALL 64882 0 1
25117: PUSH
25118: LD_STRING #X106-3
25120: PUSH
25121: LD_EXP 19
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: ST_TO_ADDR
// end else
25136: GO 25292
// if omarWantVehicles and omarWaitingForVehiclesTimer then
25138: LD_EXP 18
25142: PUSH
25143: LD_EXP 20
25147: AND
25148: IFFALSE 25235
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
25150: LD_ADDR_OWVAR 47
25154: PUSH
25155: LD_STRING #X106-1a
25157: PUSH
25158: LD_EXP 21
25162: PUSH
25163: LD_INT 16
25165: PPUSH
25166: LD_INT 22
25168: PUSH
25169: LD_INT 2
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 21
25178: PUSH
25179: LD_INT 2
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 33
25188: PUSH
25189: LD_INT 1
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 58
25198: PUSH
25199: EMPTY
25200: LIST
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: PPUSH
25208: CALL_OW 70
25212: MINUS
25213: PPUSH
25214: CALL 64882 0 1
25218: PUSH
25219: LD_STRING #X106-3a
25221: PUSH
25222: LD_EXP 20
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: ST_TO_ADDR
// end else
25233: GO 25292
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
25235: LD_ADDR_OWVAR 47
25239: PUSH
25240: LD_STRING #X106-1
25242: PUSH
25243: LD_EXP 47
25247: PUSH
25248: LD_INT 0
25250: PLUS
25251: PUSH
25252: LD_EXP 47
25256: PPUSH
25257: LD_INT 55
25259: PUSH
25260: EMPTY
25261: LIST
25262: PPUSH
25263: CALL_OW 72
25267: PUSH
25268: LD_INT 0
25270: PLUS
25271: MINUS
25272: PPUSH
25273: CALL 64882 0 1
25277: PUSH
25278: LD_STRING #X106-3
25280: PUSH
25281: LD_EXP 19
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: ST_TO_ADDR
// end ; end ; end_of_file
25292: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25293: LD_INT 0
25295: PPUSH
25296: PPUSH
// if exist_mode then
25297: LD_VAR 0 2
25301: IFFALSE 25326
// unit := CreateCharacter ( prefix & ident ) else
25303: LD_ADDR_VAR 0 5
25307: PUSH
25308: LD_VAR 0 3
25312: PUSH
25313: LD_VAR 0 1
25317: STR
25318: PPUSH
25319: CALL_OW 34
25323: ST_TO_ADDR
25324: GO 25341
// unit := NewCharacter ( ident ) ;
25326: LD_ADDR_VAR 0 5
25330: PUSH
25331: LD_VAR 0 1
25335: PPUSH
25336: CALL_OW 25
25340: ST_TO_ADDR
// result := unit ;
25341: LD_ADDR_VAR 0 4
25345: PUSH
25346: LD_VAR 0 5
25350: ST_TO_ADDR
// end ;
25351: LD_VAR 0 4
25355: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25356: LD_INT 0
25358: PPUSH
25359: PPUSH
// if not side or not nation then
25360: LD_VAR 0 1
25364: NOT
25365: PUSH
25366: LD_VAR 0 2
25370: NOT
25371: OR
25372: IFFALSE 25376
// exit ;
25374: GO 26144
// case nation of nation_american :
25376: LD_VAR 0 2
25380: PUSH
25381: LD_INT 1
25383: DOUBLE
25384: EQUAL
25385: IFTRUE 25389
25387: GO 25603
25389: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25390: LD_ADDR_VAR 0 4
25394: PUSH
25395: LD_INT 35
25397: PUSH
25398: LD_INT 45
25400: PUSH
25401: LD_INT 46
25403: PUSH
25404: LD_INT 47
25406: PUSH
25407: LD_INT 82
25409: PUSH
25410: LD_INT 83
25412: PUSH
25413: LD_INT 84
25415: PUSH
25416: LD_INT 85
25418: PUSH
25419: LD_INT 86
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: LD_INT 2
25427: PUSH
25428: LD_INT 6
25430: PUSH
25431: LD_INT 15
25433: PUSH
25434: LD_INT 16
25436: PUSH
25437: LD_INT 7
25439: PUSH
25440: LD_INT 12
25442: PUSH
25443: LD_INT 13
25445: PUSH
25446: LD_INT 10
25448: PUSH
25449: LD_INT 14
25451: PUSH
25452: LD_INT 20
25454: PUSH
25455: LD_INT 21
25457: PUSH
25458: LD_INT 22
25460: PUSH
25461: LD_INT 25
25463: PUSH
25464: LD_INT 32
25466: PUSH
25467: LD_INT 27
25469: PUSH
25470: LD_INT 36
25472: PUSH
25473: LD_INT 69
25475: PUSH
25476: LD_INT 39
25478: PUSH
25479: LD_INT 34
25481: PUSH
25482: LD_INT 40
25484: PUSH
25485: LD_INT 48
25487: PUSH
25488: LD_INT 49
25490: PUSH
25491: LD_INT 50
25493: PUSH
25494: LD_INT 51
25496: PUSH
25497: LD_INT 52
25499: PUSH
25500: LD_INT 53
25502: PUSH
25503: LD_INT 54
25505: PUSH
25506: LD_INT 55
25508: PUSH
25509: LD_INT 56
25511: PUSH
25512: LD_INT 57
25514: PUSH
25515: LD_INT 58
25517: PUSH
25518: LD_INT 59
25520: PUSH
25521: LD_INT 60
25523: PUSH
25524: LD_INT 61
25526: PUSH
25527: LD_INT 62
25529: PUSH
25530: LD_INT 80
25532: PUSH
25533: LD_INT 82
25535: PUSH
25536: LD_INT 83
25538: PUSH
25539: LD_INT 84
25541: PUSH
25542: LD_INT 85
25544: PUSH
25545: LD_INT 86
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: ST_TO_ADDR
25601: GO 26068
25603: LD_INT 2
25605: DOUBLE
25606: EQUAL
25607: IFTRUE 25611
25609: GO 25837
25611: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25612: LD_ADDR_VAR 0 4
25616: PUSH
25617: LD_INT 35
25619: PUSH
25620: LD_INT 45
25622: PUSH
25623: LD_INT 46
25625: PUSH
25626: LD_INT 47
25628: PUSH
25629: LD_INT 82
25631: PUSH
25632: LD_INT 83
25634: PUSH
25635: LD_INT 84
25637: PUSH
25638: LD_INT 85
25640: PUSH
25641: LD_INT 87
25643: PUSH
25644: LD_INT 70
25646: PUSH
25647: LD_INT 1
25649: PUSH
25650: LD_INT 11
25652: PUSH
25653: LD_INT 3
25655: PUSH
25656: LD_INT 4
25658: PUSH
25659: LD_INT 5
25661: PUSH
25662: LD_INT 6
25664: PUSH
25665: LD_INT 15
25667: PUSH
25668: LD_INT 18
25670: PUSH
25671: LD_INT 7
25673: PUSH
25674: LD_INT 17
25676: PUSH
25677: LD_INT 8
25679: PUSH
25680: LD_INT 20
25682: PUSH
25683: LD_INT 21
25685: PUSH
25686: LD_INT 22
25688: PUSH
25689: LD_INT 72
25691: PUSH
25692: LD_INT 26
25694: PUSH
25695: LD_INT 69
25697: PUSH
25698: LD_INT 39
25700: PUSH
25701: LD_INT 40
25703: PUSH
25704: LD_INT 41
25706: PUSH
25707: LD_INT 42
25709: PUSH
25710: LD_INT 43
25712: PUSH
25713: LD_INT 48
25715: PUSH
25716: LD_INT 49
25718: PUSH
25719: LD_INT 50
25721: PUSH
25722: LD_INT 51
25724: PUSH
25725: LD_INT 52
25727: PUSH
25728: LD_INT 53
25730: PUSH
25731: LD_INT 54
25733: PUSH
25734: LD_INT 55
25736: PUSH
25737: LD_INT 56
25739: PUSH
25740: LD_INT 60
25742: PUSH
25743: LD_INT 61
25745: PUSH
25746: LD_INT 62
25748: PUSH
25749: LD_INT 66
25751: PUSH
25752: LD_INT 67
25754: PUSH
25755: LD_INT 68
25757: PUSH
25758: LD_INT 81
25760: PUSH
25761: LD_INT 82
25763: PUSH
25764: LD_INT 83
25766: PUSH
25767: LD_INT 84
25769: PUSH
25770: LD_INT 85
25772: PUSH
25773: LD_INT 87
25775: PUSH
25776: LD_INT 88
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: ST_TO_ADDR
25835: GO 26068
25837: LD_INT 3
25839: DOUBLE
25840: EQUAL
25841: IFTRUE 25845
25843: GO 26067
25845: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25846: LD_ADDR_VAR 0 4
25850: PUSH
25851: LD_INT 46
25853: PUSH
25854: LD_INT 47
25856: PUSH
25857: LD_INT 1
25859: PUSH
25860: LD_INT 2
25862: PUSH
25863: LD_INT 82
25865: PUSH
25866: LD_INT 83
25868: PUSH
25869: LD_INT 84
25871: PUSH
25872: LD_INT 85
25874: PUSH
25875: LD_INT 86
25877: PUSH
25878: LD_INT 11
25880: PUSH
25881: LD_INT 9
25883: PUSH
25884: LD_INT 20
25886: PUSH
25887: LD_INT 19
25889: PUSH
25890: LD_INT 21
25892: PUSH
25893: LD_INT 24
25895: PUSH
25896: LD_INT 22
25898: PUSH
25899: LD_INT 25
25901: PUSH
25902: LD_INT 28
25904: PUSH
25905: LD_INT 29
25907: PUSH
25908: LD_INT 30
25910: PUSH
25911: LD_INT 31
25913: PUSH
25914: LD_INT 37
25916: PUSH
25917: LD_INT 38
25919: PUSH
25920: LD_INT 32
25922: PUSH
25923: LD_INT 27
25925: PUSH
25926: LD_INT 33
25928: PUSH
25929: LD_INT 69
25931: PUSH
25932: LD_INT 39
25934: PUSH
25935: LD_INT 34
25937: PUSH
25938: LD_INT 40
25940: PUSH
25941: LD_INT 71
25943: PUSH
25944: LD_INT 23
25946: PUSH
25947: LD_INT 44
25949: PUSH
25950: LD_INT 48
25952: PUSH
25953: LD_INT 49
25955: PUSH
25956: LD_INT 50
25958: PUSH
25959: LD_INT 51
25961: PUSH
25962: LD_INT 52
25964: PUSH
25965: LD_INT 53
25967: PUSH
25968: LD_INT 54
25970: PUSH
25971: LD_INT 55
25973: PUSH
25974: LD_INT 56
25976: PUSH
25977: LD_INT 57
25979: PUSH
25980: LD_INT 58
25982: PUSH
25983: LD_INT 59
25985: PUSH
25986: LD_INT 63
25988: PUSH
25989: LD_INT 64
25991: PUSH
25992: LD_INT 65
25994: PUSH
25995: LD_INT 82
25997: PUSH
25998: LD_INT 83
26000: PUSH
26001: LD_INT 84
26003: PUSH
26004: LD_INT 85
26006: PUSH
26007: LD_INT 86
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: ST_TO_ADDR
26065: GO 26068
26067: POP
// if state > - 1 and state < 3 then
26068: LD_VAR 0 3
26072: PUSH
26073: LD_INT 1
26075: NEG
26076: GREATER
26077: PUSH
26078: LD_VAR 0 3
26082: PUSH
26083: LD_INT 3
26085: LESS
26086: AND
26087: IFFALSE 26144
// for i in result do
26089: LD_ADDR_VAR 0 5
26093: PUSH
26094: LD_VAR 0 4
26098: PUSH
26099: FOR_IN
26100: IFFALSE 26142
// if GetTech ( i , side ) <> state then
26102: LD_VAR 0 5
26106: PPUSH
26107: LD_VAR 0 1
26111: PPUSH
26112: CALL_OW 321
26116: PUSH
26117: LD_VAR 0 3
26121: NONEQUAL
26122: IFFALSE 26140
// result := result diff i ;
26124: LD_ADDR_VAR 0 4
26128: PUSH
26129: LD_VAR 0 4
26133: PUSH
26134: LD_VAR 0 5
26138: DIFF
26139: ST_TO_ADDR
26140: GO 26099
26142: POP
26143: POP
// end ;
26144: LD_VAR 0 4
26148: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26149: LD_INT 0
26151: PPUSH
26152: PPUSH
26153: PPUSH
// result := true ;
26154: LD_ADDR_VAR 0 3
26158: PUSH
26159: LD_INT 1
26161: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26162: LD_ADDR_VAR 0 5
26166: PUSH
26167: LD_VAR 0 2
26171: PPUSH
26172: CALL_OW 480
26176: ST_TO_ADDR
// if not tmp then
26177: LD_VAR 0 5
26181: NOT
26182: IFFALSE 26186
// exit ;
26184: GO 26235
// for i in tmp do
26186: LD_ADDR_VAR 0 4
26190: PUSH
26191: LD_VAR 0 5
26195: PUSH
26196: FOR_IN
26197: IFFALSE 26233
// if GetTech ( i , side ) <> state_researched then
26199: LD_VAR 0 4
26203: PPUSH
26204: LD_VAR 0 1
26208: PPUSH
26209: CALL_OW 321
26213: PUSH
26214: LD_INT 2
26216: NONEQUAL
26217: IFFALSE 26231
// begin result := false ;
26219: LD_ADDR_VAR 0 3
26223: PUSH
26224: LD_INT 0
26226: ST_TO_ADDR
// exit ;
26227: POP
26228: POP
26229: GO 26235
// end ;
26231: GO 26196
26233: POP
26234: POP
// end ;
26235: LD_VAR 0 3
26239: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26240: LD_INT 0
26242: PPUSH
26243: PPUSH
26244: PPUSH
26245: PPUSH
26246: PPUSH
26247: PPUSH
26248: PPUSH
26249: PPUSH
26250: PPUSH
26251: PPUSH
26252: PPUSH
26253: PPUSH
26254: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26255: LD_VAR 0 1
26259: NOT
26260: PUSH
26261: LD_VAR 0 1
26265: PPUSH
26266: CALL_OW 257
26270: PUSH
26271: LD_INT 9
26273: NONEQUAL
26274: OR
26275: IFFALSE 26279
// exit ;
26277: GO 26852
// side := GetSide ( unit ) ;
26279: LD_ADDR_VAR 0 9
26283: PUSH
26284: LD_VAR 0 1
26288: PPUSH
26289: CALL_OW 255
26293: ST_TO_ADDR
// tech_space := tech_spacanom ;
26294: LD_ADDR_VAR 0 12
26298: PUSH
26299: LD_INT 29
26301: ST_TO_ADDR
// tech_time := tech_taurad ;
26302: LD_ADDR_VAR 0 13
26306: PUSH
26307: LD_INT 28
26309: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26310: LD_ADDR_VAR 0 11
26314: PUSH
26315: LD_VAR 0 1
26319: PPUSH
26320: CALL_OW 310
26324: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26325: LD_VAR 0 11
26329: PPUSH
26330: CALL_OW 247
26334: PUSH
26335: LD_INT 2
26337: EQUAL
26338: IFFALSE 26342
// exit ;
26340: GO 26852
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26342: LD_ADDR_VAR 0 8
26346: PUSH
26347: LD_INT 81
26349: PUSH
26350: LD_VAR 0 9
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 3
26361: PUSH
26362: LD_INT 21
26364: PUSH
26365: LD_INT 3
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PPUSH
26380: CALL_OW 69
26384: ST_TO_ADDR
// if not tmp then
26385: LD_VAR 0 8
26389: NOT
26390: IFFALSE 26394
// exit ;
26392: GO 26852
// if in_unit then
26394: LD_VAR 0 11
26398: IFFALSE 26422
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26400: LD_ADDR_VAR 0 10
26404: PUSH
26405: LD_VAR 0 8
26409: PPUSH
26410: LD_VAR 0 11
26414: PPUSH
26415: CALL_OW 74
26419: ST_TO_ADDR
26420: GO 26442
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26422: LD_ADDR_VAR 0 10
26426: PUSH
26427: LD_VAR 0 8
26431: PPUSH
26432: LD_VAR 0 1
26436: PPUSH
26437: CALL_OW 74
26441: ST_TO_ADDR
// if not enemy then
26442: LD_VAR 0 10
26446: NOT
26447: IFFALSE 26451
// exit ;
26449: GO 26852
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26451: LD_VAR 0 11
26455: PUSH
26456: LD_VAR 0 11
26460: PPUSH
26461: LD_VAR 0 10
26465: PPUSH
26466: CALL_OW 296
26470: PUSH
26471: LD_INT 13
26473: GREATER
26474: AND
26475: PUSH
26476: LD_VAR 0 1
26480: PPUSH
26481: LD_VAR 0 10
26485: PPUSH
26486: CALL_OW 296
26490: PUSH
26491: LD_INT 12
26493: GREATER
26494: OR
26495: IFFALSE 26499
// exit ;
26497: GO 26852
// missile := [ 1 ] ;
26499: LD_ADDR_VAR 0 14
26503: PUSH
26504: LD_INT 1
26506: PUSH
26507: EMPTY
26508: LIST
26509: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26510: LD_VAR 0 9
26514: PPUSH
26515: LD_VAR 0 12
26519: PPUSH
26520: CALL_OW 325
26524: IFFALSE 26553
// missile := Replace ( missile , missile + 1 , 2 ) ;
26526: LD_ADDR_VAR 0 14
26530: PUSH
26531: LD_VAR 0 14
26535: PPUSH
26536: LD_VAR 0 14
26540: PUSH
26541: LD_INT 1
26543: PLUS
26544: PPUSH
26545: LD_INT 2
26547: PPUSH
26548: CALL_OW 1
26552: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26553: LD_VAR 0 9
26557: PPUSH
26558: LD_VAR 0 13
26562: PPUSH
26563: CALL_OW 325
26567: PUSH
26568: LD_VAR 0 10
26572: PPUSH
26573: CALL_OW 255
26577: PPUSH
26578: LD_VAR 0 13
26582: PPUSH
26583: CALL_OW 325
26587: NOT
26588: AND
26589: IFFALSE 26618
// missile := Replace ( missile , missile + 1 , 3 ) ;
26591: LD_ADDR_VAR 0 14
26595: PUSH
26596: LD_VAR 0 14
26600: PPUSH
26601: LD_VAR 0 14
26605: PUSH
26606: LD_INT 1
26608: PLUS
26609: PPUSH
26610: LD_INT 3
26612: PPUSH
26613: CALL_OW 1
26617: ST_TO_ADDR
// if missile < 2 then
26618: LD_VAR 0 14
26622: PUSH
26623: LD_INT 2
26625: LESS
26626: IFFALSE 26630
// exit ;
26628: GO 26852
// x := GetX ( enemy ) ;
26630: LD_ADDR_VAR 0 4
26634: PUSH
26635: LD_VAR 0 10
26639: PPUSH
26640: CALL_OW 250
26644: ST_TO_ADDR
// y := GetY ( enemy ) ;
26645: LD_ADDR_VAR 0 5
26649: PUSH
26650: LD_VAR 0 10
26654: PPUSH
26655: CALL_OW 251
26659: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26660: LD_ADDR_VAR 0 6
26664: PUSH
26665: LD_VAR 0 4
26669: PUSH
26670: LD_INT 1
26672: NEG
26673: PPUSH
26674: LD_INT 1
26676: PPUSH
26677: CALL_OW 12
26681: PLUS
26682: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26683: LD_ADDR_VAR 0 7
26687: PUSH
26688: LD_VAR 0 5
26692: PUSH
26693: LD_INT 1
26695: NEG
26696: PPUSH
26697: LD_INT 1
26699: PPUSH
26700: CALL_OW 12
26704: PLUS
26705: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26706: LD_VAR 0 6
26710: PPUSH
26711: LD_VAR 0 7
26715: PPUSH
26716: CALL_OW 488
26720: NOT
26721: IFFALSE 26743
// begin _x := x ;
26723: LD_ADDR_VAR 0 6
26727: PUSH
26728: LD_VAR 0 4
26732: ST_TO_ADDR
// _y := y ;
26733: LD_ADDR_VAR 0 7
26737: PUSH
26738: LD_VAR 0 5
26742: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26743: LD_ADDR_VAR 0 3
26747: PUSH
26748: LD_INT 1
26750: PPUSH
26751: LD_VAR 0 14
26755: PPUSH
26756: CALL_OW 12
26760: ST_TO_ADDR
// case i of 1 :
26761: LD_VAR 0 3
26765: PUSH
26766: LD_INT 1
26768: DOUBLE
26769: EQUAL
26770: IFTRUE 26774
26772: GO 26791
26774: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26775: LD_VAR 0 1
26779: PPUSH
26780: LD_VAR 0 10
26784: PPUSH
26785: CALL_OW 115
26789: GO 26852
26791: LD_INT 2
26793: DOUBLE
26794: EQUAL
26795: IFTRUE 26799
26797: GO 26821
26799: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26800: LD_VAR 0 1
26804: PPUSH
26805: LD_VAR 0 6
26809: PPUSH
26810: LD_VAR 0 7
26814: PPUSH
26815: CALL_OW 153
26819: GO 26852
26821: LD_INT 3
26823: DOUBLE
26824: EQUAL
26825: IFTRUE 26829
26827: GO 26851
26829: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26830: LD_VAR 0 1
26834: PPUSH
26835: LD_VAR 0 6
26839: PPUSH
26840: LD_VAR 0 7
26844: PPUSH
26845: CALL_OW 154
26849: GO 26852
26851: POP
// end ;
26852: LD_VAR 0 2
26856: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26857: LD_INT 0
26859: PPUSH
26860: PPUSH
26861: PPUSH
26862: PPUSH
26863: PPUSH
26864: PPUSH
// if not unit or not building then
26865: LD_VAR 0 1
26869: NOT
26870: PUSH
26871: LD_VAR 0 2
26875: NOT
26876: OR
26877: IFFALSE 26881
// exit ;
26879: GO 27039
// x := GetX ( building ) ;
26881: LD_ADDR_VAR 0 5
26885: PUSH
26886: LD_VAR 0 2
26890: PPUSH
26891: CALL_OW 250
26895: ST_TO_ADDR
// y := GetY ( building ) ;
26896: LD_ADDR_VAR 0 6
26900: PUSH
26901: LD_VAR 0 2
26905: PPUSH
26906: CALL_OW 251
26910: ST_TO_ADDR
// for i = 0 to 5 do
26911: LD_ADDR_VAR 0 4
26915: PUSH
26916: DOUBLE
26917: LD_INT 0
26919: DEC
26920: ST_TO_ADDR
26921: LD_INT 5
26923: PUSH
26924: FOR_TO
26925: IFFALSE 27037
// begin _x := ShiftX ( x , i , 3 ) ;
26927: LD_ADDR_VAR 0 7
26931: PUSH
26932: LD_VAR 0 5
26936: PPUSH
26937: LD_VAR 0 4
26941: PPUSH
26942: LD_INT 3
26944: PPUSH
26945: CALL_OW 272
26949: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26950: LD_ADDR_VAR 0 8
26954: PUSH
26955: LD_VAR 0 6
26959: PPUSH
26960: LD_VAR 0 4
26964: PPUSH
26965: LD_INT 3
26967: PPUSH
26968: CALL_OW 273
26972: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26973: LD_VAR 0 7
26977: PPUSH
26978: LD_VAR 0 8
26982: PPUSH
26983: CALL_OW 488
26987: NOT
26988: IFFALSE 26992
// continue ;
26990: GO 26924
// if HexInfo ( _x , _y ) = 0 then
26992: LD_VAR 0 7
26996: PPUSH
26997: LD_VAR 0 8
27001: PPUSH
27002: CALL_OW 428
27006: PUSH
27007: LD_INT 0
27009: EQUAL
27010: IFFALSE 27035
// begin ComMoveXY ( unit , _x , _y ) ;
27012: LD_VAR 0 1
27016: PPUSH
27017: LD_VAR 0 7
27021: PPUSH
27022: LD_VAR 0 8
27026: PPUSH
27027: CALL_OW 111
// exit ;
27031: POP
27032: POP
27033: GO 27039
// end ; end ;
27035: GO 26924
27037: POP
27038: POP
// end ;
27039: LD_VAR 0 3
27043: RET
// export function ScanBase ( side , base_area ) ; begin
27044: LD_INT 0
27046: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27047: LD_ADDR_VAR 0 3
27051: PUSH
27052: LD_VAR 0 2
27056: PPUSH
27057: LD_INT 81
27059: PUSH
27060: LD_VAR 0 1
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PPUSH
27069: CALL_OW 70
27073: ST_TO_ADDR
// end ;
27074: LD_VAR 0 3
27078: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27079: LD_INT 0
27081: PPUSH
27082: PPUSH
27083: PPUSH
27084: PPUSH
// result := false ;
27085: LD_ADDR_VAR 0 2
27089: PUSH
27090: LD_INT 0
27092: ST_TO_ADDR
// side := GetSide ( unit ) ;
27093: LD_ADDR_VAR 0 3
27097: PUSH
27098: LD_VAR 0 1
27102: PPUSH
27103: CALL_OW 255
27107: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27108: LD_ADDR_VAR 0 4
27112: PUSH
27113: LD_VAR 0 1
27117: PPUSH
27118: CALL_OW 248
27122: ST_TO_ADDR
// case nat of 1 :
27123: LD_VAR 0 4
27127: PUSH
27128: LD_INT 1
27130: DOUBLE
27131: EQUAL
27132: IFTRUE 27136
27134: GO 27147
27136: POP
// tech := tech_lassight ; 2 :
27137: LD_ADDR_VAR 0 5
27141: PUSH
27142: LD_INT 12
27144: ST_TO_ADDR
27145: GO 27186
27147: LD_INT 2
27149: DOUBLE
27150: EQUAL
27151: IFTRUE 27155
27153: GO 27166
27155: POP
// tech := tech_mortar ; 3 :
27156: LD_ADDR_VAR 0 5
27160: PUSH
27161: LD_INT 41
27163: ST_TO_ADDR
27164: GO 27186
27166: LD_INT 3
27168: DOUBLE
27169: EQUAL
27170: IFTRUE 27174
27172: GO 27185
27174: POP
// tech := tech_bazooka ; end ;
27175: LD_ADDR_VAR 0 5
27179: PUSH
27180: LD_INT 44
27182: ST_TO_ADDR
27183: GO 27186
27185: POP
// if Researched ( side , tech ) then
27186: LD_VAR 0 3
27190: PPUSH
27191: LD_VAR 0 5
27195: PPUSH
27196: CALL_OW 325
27200: IFFALSE 27227
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27202: LD_ADDR_VAR 0 2
27206: PUSH
27207: LD_INT 5
27209: PUSH
27210: LD_INT 8
27212: PUSH
27213: LD_INT 9
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: LIST
27220: PUSH
27221: LD_VAR 0 4
27225: ARRAY
27226: ST_TO_ADDR
// end ;
27227: LD_VAR 0 2
27231: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27232: LD_INT 0
27234: PPUSH
27235: PPUSH
27236: PPUSH
// if not mines then
27237: LD_VAR 0 2
27241: NOT
27242: IFFALSE 27246
// exit ;
27244: GO 27390
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27246: LD_ADDR_VAR 0 5
27250: PUSH
27251: LD_INT 81
27253: PUSH
27254: LD_VAR 0 1
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 3
27265: PUSH
27266: LD_INT 21
27268: PUSH
27269: LD_INT 3
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PPUSH
27284: CALL_OW 69
27288: ST_TO_ADDR
// for i in mines do
27289: LD_ADDR_VAR 0 4
27293: PUSH
27294: LD_VAR 0 2
27298: PUSH
27299: FOR_IN
27300: IFFALSE 27388
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27302: LD_VAR 0 4
27306: PUSH
27307: LD_INT 1
27309: ARRAY
27310: PPUSH
27311: LD_VAR 0 4
27315: PUSH
27316: LD_INT 2
27318: ARRAY
27319: PPUSH
27320: CALL_OW 458
27324: NOT
27325: IFFALSE 27329
// continue ;
27327: GO 27299
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27329: LD_VAR 0 4
27333: PUSH
27334: LD_INT 1
27336: ARRAY
27337: PPUSH
27338: LD_VAR 0 4
27342: PUSH
27343: LD_INT 2
27345: ARRAY
27346: PPUSH
27347: CALL_OW 428
27351: PUSH
27352: LD_VAR 0 5
27356: IN
27357: IFFALSE 27386
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27359: LD_VAR 0 4
27363: PUSH
27364: LD_INT 1
27366: ARRAY
27367: PPUSH
27368: LD_VAR 0 4
27372: PUSH
27373: LD_INT 2
27375: ARRAY
27376: PPUSH
27377: LD_VAR 0 1
27381: PPUSH
27382: CALL_OW 456
// end ;
27386: GO 27299
27388: POP
27389: POP
// end ;
27390: LD_VAR 0 3
27394: RET
// export function Count ( array ) ; var i ; begin
27395: LD_INT 0
27397: PPUSH
27398: PPUSH
// result := 0 ;
27399: LD_ADDR_VAR 0 2
27403: PUSH
27404: LD_INT 0
27406: ST_TO_ADDR
// for i in array do
27407: LD_ADDR_VAR 0 3
27411: PUSH
27412: LD_VAR 0 1
27416: PUSH
27417: FOR_IN
27418: IFFALSE 27442
// if i then
27420: LD_VAR 0 3
27424: IFFALSE 27440
// result := result + 1 ;
27426: LD_ADDR_VAR 0 2
27430: PUSH
27431: LD_VAR 0 2
27435: PUSH
27436: LD_INT 1
27438: PLUS
27439: ST_TO_ADDR
27440: GO 27417
27442: POP
27443: POP
// end ;
27444: LD_VAR 0 2
27448: RET
// export function IsEmpty ( building ) ; begin
27449: LD_INT 0
27451: PPUSH
// if not building then
27452: LD_VAR 0 1
27456: NOT
27457: IFFALSE 27461
// exit ;
27459: GO 27504
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27461: LD_ADDR_VAR 0 2
27465: PUSH
27466: LD_VAR 0 1
27470: PUSH
27471: LD_INT 22
27473: PUSH
27474: LD_VAR 0 1
27478: PPUSH
27479: CALL_OW 255
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 58
27490: PUSH
27491: EMPTY
27492: LIST
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PPUSH
27498: CALL_OW 69
27502: IN
27503: ST_TO_ADDR
// end ;
27504: LD_VAR 0 2
27508: RET
// export function IsNotFull ( building ) ; var places ; begin
27509: LD_INT 0
27511: PPUSH
27512: PPUSH
// if not building then
27513: LD_VAR 0 1
27517: NOT
27518: IFFALSE 27522
// exit ;
27520: GO 27693
// result := false ;
27522: LD_ADDR_VAR 0 2
27526: PUSH
27527: LD_INT 0
27529: ST_TO_ADDR
// places := 0 ;
27530: LD_ADDR_VAR 0 3
27534: PUSH
27535: LD_INT 0
27537: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27538: LD_VAR 0 1
27542: PPUSH
27543: CALL_OW 266
27547: PUSH
27548: LD_INT 0
27550: DOUBLE
27551: EQUAL
27552: IFTRUE 27610
27554: LD_INT 1
27556: DOUBLE
27557: EQUAL
27558: IFTRUE 27610
27560: LD_INT 6
27562: DOUBLE
27563: EQUAL
27564: IFTRUE 27610
27566: LD_INT 7
27568: DOUBLE
27569: EQUAL
27570: IFTRUE 27610
27572: LD_INT 8
27574: DOUBLE
27575: EQUAL
27576: IFTRUE 27610
27578: LD_INT 4
27580: DOUBLE
27581: EQUAL
27582: IFTRUE 27610
27584: LD_INT 5
27586: DOUBLE
27587: EQUAL
27588: IFTRUE 27610
27590: LD_INT 2
27592: DOUBLE
27593: EQUAL
27594: IFTRUE 27610
27596: LD_INT 3
27598: DOUBLE
27599: EQUAL
27600: IFTRUE 27610
27602: LD_INT 35
27604: DOUBLE
27605: EQUAL
27606: IFTRUE 27610
27608: GO 27621
27610: POP
// places := 6 ; b_bunker , b_breastwork :
27611: LD_ADDR_VAR 0 3
27615: PUSH
27616: LD_INT 6
27618: ST_TO_ADDR
27619: GO 27666
27621: LD_INT 32
27623: DOUBLE
27624: EQUAL
27625: IFTRUE 27635
27627: LD_INT 31
27629: DOUBLE
27630: EQUAL
27631: IFTRUE 27635
27633: GO 27646
27635: POP
// places := 1 ; b_control_tower :
27636: LD_ADDR_VAR 0 3
27640: PUSH
27641: LD_INT 1
27643: ST_TO_ADDR
27644: GO 27666
27646: LD_INT 36
27648: DOUBLE
27649: EQUAL
27650: IFTRUE 27654
27652: GO 27665
27654: POP
// places := 3 ; end ;
27655: LD_ADDR_VAR 0 3
27659: PUSH
27660: LD_INT 3
27662: ST_TO_ADDR
27663: GO 27666
27665: POP
// if places then
27666: LD_VAR 0 3
27670: IFFALSE 27693
// result := UnitsInside ( building ) < places ;
27672: LD_ADDR_VAR 0 2
27676: PUSH
27677: LD_VAR 0 1
27681: PPUSH
27682: CALL_OW 313
27686: PUSH
27687: LD_VAR 0 3
27691: LESS
27692: ST_TO_ADDR
// end ;
27693: LD_VAR 0 2
27697: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27698: LD_INT 0
27700: PPUSH
27701: PPUSH
27702: PPUSH
27703: PPUSH
// tmp := [ ] ;
27704: LD_ADDR_VAR 0 3
27708: PUSH
27709: EMPTY
27710: ST_TO_ADDR
// list := [ ] ;
27711: LD_ADDR_VAR 0 5
27715: PUSH
27716: EMPTY
27717: ST_TO_ADDR
// for i = 16 to 25 do
27718: LD_ADDR_VAR 0 4
27722: PUSH
27723: DOUBLE
27724: LD_INT 16
27726: DEC
27727: ST_TO_ADDR
27728: LD_INT 25
27730: PUSH
27731: FOR_TO
27732: IFFALSE 27805
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27734: LD_ADDR_VAR 0 3
27738: PUSH
27739: LD_VAR 0 3
27743: PUSH
27744: LD_INT 22
27746: PUSH
27747: LD_VAR 0 1
27751: PPUSH
27752: CALL_OW 255
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 91
27763: PUSH
27764: LD_VAR 0 1
27768: PUSH
27769: LD_INT 6
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 30
27779: PUSH
27780: LD_VAR 0 4
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: LIST
27793: PUSH
27794: EMPTY
27795: LIST
27796: PPUSH
27797: CALL_OW 69
27801: ADD
27802: ST_TO_ADDR
27803: GO 27731
27805: POP
27806: POP
// for i = 1 to tmp do
27807: LD_ADDR_VAR 0 4
27811: PUSH
27812: DOUBLE
27813: LD_INT 1
27815: DEC
27816: ST_TO_ADDR
27817: LD_VAR 0 3
27821: PUSH
27822: FOR_TO
27823: IFFALSE 27911
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27825: LD_ADDR_VAR 0 5
27829: PUSH
27830: LD_VAR 0 5
27834: PUSH
27835: LD_VAR 0 3
27839: PUSH
27840: LD_VAR 0 4
27844: ARRAY
27845: PPUSH
27846: CALL_OW 266
27850: PUSH
27851: LD_VAR 0 3
27855: PUSH
27856: LD_VAR 0 4
27860: ARRAY
27861: PPUSH
27862: CALL_OW 250
27866: PUSH
27867: LD_VAR 0 3
27871: PUSH
27872: LD_VAR 0 4
27876: ARRAY
27877: PPUSH
27878: CALL_OW 251
27882: PUSH
27883: LD_VAR 0 3
27887: PUSH
27888: LD_VAR 0 4
27892: ARRAY
27893: PPUSH
27894: CALL_OW 254
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: PUSH
27905: EMPTY
27906: LIST
27907: ADD
27908: ST_TO_ADDR
27909: GO 27822
27911: POP
27912: POP
// result := list ;
27913: LD_ADDR_VAR 0 2
27917: PUSH
27918: LD_VAR 0 5
27922: ST_TO_ADDR
// end ;
27923: LD_VAR 0 2
27927: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27928: LD_INT 0
27930: PPUSH
27931: PPUSH
27932: PPUSH
27933: PPUSH
27934: PPUSH
27935: PPUSH
27936: PPUSH
// if not factory then
27937: LD_VAR 0 1
27941: NOT
27942: IFFALSE 27946
// exit ;
27944: GO 28539
// if control = control_apeman then
27946: LD_VAR 0 4
27950: PUSH
27951: LD_INT 5
27953: EQUAL
27954: IFFALSE 28063
// begin tmp := UnitsInside ( factory ) ;
27956: LD_ADDR_VAR 0 8
27960: PUSH
27961: LD_VAR 0 1
27965: PPUSH
27966: CALL_OW 313
27970: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27971: LD_VAR 0 8
27975: PPUSH
27976: LD_INT 25
27978: PUSH
27979: LD_INT 12
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PPUSH
27986: CALL_OW 72
27990: NOT
27991: IFFALSE 28001
// control := control_manual ;
27993: LD_ADDR_VAR 0 4
27997: PUSH
27998: LD_INT 1
28000: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28001: LD_ADDR_VAR 0 8
28005: PUSH
28006: LD_VAR 0 1
28010: PPUSH
28011: CALL 27698 0 1
28015: ST_TO_ADDR
// if tmp then
28016: LD_VAR 0 8
28020: IFFALSE 28063
// begin for i in tmp do
28022: LD_ADDR_VAR 0 7
28026: PUSH
28027: LD_VAR 0 8
28031: PUSH
28032: FOR_IN
28033: IFFALSE 28061
// if i [ 1 ] = b_ext_radio then
28035: LD_VAR 0 7
28039: PUSH
28040: LD_INT 1
28042: ARRAY
28043: PUSH
28044: LD_INT 22
28046: EQUAL
28047: IFFALSE 28059
// begin control := control_remote ;
28049: LD_ADDR_VAR 0 4
28053: PUSH
28054: LD_INT 2
28056: ST_TO_ADDR
// break ;
28057: GO 28061
// end ;
28059: GO 28032
28061: POP
28062: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28063: LD_VAR 0 1
28067: PPUSH
28068: LD_VAR 0 2
28072: PPUSH
28073: LD_VAR 0 3
28077: PPUSH
28078: LD_VAR 0 4
28082: PPUSH
28083: LD_VAR 0 5
28087: PPUSH
28088: CALL_OW 448
28092: IFFALSE 28127
// begin result := [ chassis , engine , control , weapon ] ;
28094: LD_ADDR_VAR 0 6
28098: PUSH
28099: LD_VAR 0 2
28103: PUSH
28104: LD_VAR 0 3
28108: PUSH
28109: LD_VAR 0 4
28113: PUSH
28114: LD_VAR 0 5
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: ST_TO_ADDR
// exit ;
28125: GO 28539
// end ; _chassis := AvailableChassisList ( factory ) ;
28127: LD_ADDR_VAR 0 9
28131: PUSH
28132: LD_VAR 0 1
28136: PPUSH
28137: CALL_OW 475
28141: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28142: LD_ADDR_VAR 0 11
28146: PUSH
28147: LD_VAR 0 1
28151: PPUSH
28152: CALL_OW 476
28156: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28157: LD_ADDR_VAR 0 12
28161: PUSH
28162: LD_VAR 0 1
28166: PPUSH
28167: CALL_OW 477
28171: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28172: LD_ADDR_VAR 0 10
28176: PUSH
28177: LD_VAR 0 1
28181: PPUSH
28182: CALL_OW 478
28186: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28187: LD_VAR 0 9
28191: NOT
28192: PUSH
28193: LD_VAR 0 11
28197: NOT
28198: OR
28199: PUSH
28200: LD_VAR 0 12
28204: NOT
28205: OR
28206: PUSH
28207: LD_VAR 0 10
28211: NOT
28212: OR
28213: IFFALSE 28248
// begin result := [ chassis , engine , control , weapon ] ;
28215: LD_ADDR_VAR 0 6
28219: PUSH
28220: LD_VAR 0 2
28224: PUSH
28225: LD_VAR 0 3
28229: PUSH
28230: LD_VAR 0 4
28234: PUSH
28235: LD_VAR 0 5
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: ST_TO_ADDR
// exit ;
28246: GO 28539
// end ; if not chassis in _chassis then
28248: LD_VAR 0 2
28252: PUSH
28253: LD_VAR 0 9
28257: IN
28258: NOT
28259: IFFALSE 28285
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28261: LD_ADDR_VAR 0 2
28265: PUSH
28266: LD_VAR 0 9
28270: PUSH
28271: LD_INT 1
28273: PPUSH
28274: LD_VAR 0 9
28278: PPUSH
28279: CALL_OW 12
28283: ARRAY
28284: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28285: LD_VAR 0 2
28289: PPUSH
28290: LD_VAR 0 3
28294: PPUSH
28295: CALL 28544 0 2
28299: NOT
28300: IFFALSE 28359
// repeat engine := _engine [ 1 ] ;
28302: LD_ADDR_VAR 0 3
28306: PUSH
28307: LD_VAR 0 11
28311: PUSH
28312: LD_INT 1
28314: ARRAY
28315: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28316: LD_ADDR_VAR 0 11
28320: PUSH
28321: LD_VAR 0 11
28325: PPUSH
28326: LD_INT 1
28328: PPUSH
28329: CALL_OW 3
28333: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28334: LD_VAR 0 2
28338: PPUSH
28339: LD_VAR 0 3
28343: PPUSH
28344: CALL 28544 0 2
28348: PUSH
28349: LD_VAR 0 11
28353: PUSH
28354: EMPTY
28355: EQUAL
28356: OR
28357: IFFALSE 28302
// if not control in _control then
28359: LD_VAR 0 4
28363: PUSH
28364: LD_VAR 0 12
28368: IN
28369: NOT
28370: IFFALSE 28396
// control := _control [ rand ( 1 , _control ) ] ;
28372: LD_ADDR_VAR 0 4
28376: PUSH
28377: LD_VAR 0 12
28381: PUSH
28382: LD_INT 1
28384: PPUSH
28385: LD_VAR 0 12
28389: PPUSH
28390: CALL_OW 12
28394: ARRAY
28395: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28396: LD_VAR 0 2
28400: PPUSH
28401: LD_VAR 0 5
28405: PPUSH
28406: CALL 28764 0 2
28410: NOT
28411: IFFALSE 28470
// repeat weapon := _weapon [ 1 ] ;
28413: LD_ADDR_VAR 0 5
28417: PUSH
28418: LD_VAR 0 10
28422: PUSH
28423: LD_INT 1
28425: ARRAY
28426: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28427: LD_ADDR_VAR 0 10
28431: PUSH
28432: LD_VAR 0 10
28436: PPUSH
28437: LD_INT 1
28439: PPUSH
28440: CALL_OW 3
28444: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28445: LD_VAR 0 2
28449: PPUSH
28450: LD_VAR 0 5
28454: PPUSH
28455: CALL 28764 0 2
28459: PUSH
28460: LD_VAR 0 10
28464: PUSH
28465: EMPTY
28466: EQUAL
28467: OR
28468: IFFALSE 28413
// result := [ ] ;
28470: LD_ADDR_VAR 0 6
28474: PUSH
28475: EMPTY
28476: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28477: LD_VAR 0 1
28481: PPUSH
28482: LD_VAR 0 2
28486: PPUSH
28487: LD_VAR 0 3
28491: PPUSH
28492: LD_VAR 0 4
28496: PPUSH
28497: LD_VAR 0 5
28501: PPUSH
28502: CALL_OW 448
28506: IFFALSE 28539
// result := [ chassis , engine , control , weapon ] ;
28508: LD_ADDR_VAR 0 6
28512: PUSH
28513: LD_VAR 0 2
28517: PUSH
28518: LD_VAR 0 3
28522: PUSH
28523: LD_VAR 0 4
28527: PUSH
28528: LD_VAR 0 5
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: ST_TO_ADDR
// end ;
28539: LD_VAR 0 6
28543: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28544: LD_INT 0
28546: PPUSH
// if not chassis or not engine then
28547: LD_VAR 0 1
28551: NOT
28552: PUSH
28553: LD_VAR 0 2
28557: NOT
28558: OR
28559: IFFALSE 28563
// exit ;
28561: GO 28759
// case engine of engine_solar :
28563: LD_VAR 0 2
28567: PUSH
28568: LD_INT 2
28570: DOUBLE
28571: EQUAL
28572: IFTRUE 28576
28574: GO 28614
28576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28577: LD_ADDR_VAR 0 3
28581: PUSH
28582: LD_INT 11
28584: PUSH
28585: LD_INT 12
28587: PUSH
28588: LD_INT 13
28590: PUSH
28591: LD_INT 14
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: LD_INT 2
28599: PUSH
28600: LD_INT 3
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: ST_TO_ADDR
28612: GO 28743
28614: LD_INT 1
28616: DOUBLE
28617: EQUAL
28618: IFTRUE 28622
28620: GO 28684
28622: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28623: LD_ADDR_VAR 0 3
28627: PUSH
28628: LD_INT 11
28630: PUSH
28631: LD_INT 12
28633: PUSH
28634: LD_INT 13
28636: PUSH
28637: LD_INT 14
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: LD_INT 2
28645: PUSH
28646: LD_INT 3
28648: PUSH
28649: LD_INT 4
28651: PUSH
28652: LD_INT 5
28654: PUSH
28655: LD_INT 21
28657: PUSH
28658: LD_INT 23
28660: PUSH
28661: LD_INT 22
28663: PUSH
28664: LD_INT 24
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: ST_TO_ADDR
28682: GO 28743
28684: LD_INT 3
28686: DOUBLE
28687: EQUAL
28688: IFTRUE 28692
28690: GO 28742
28692: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28693: LD_ADDR_VAR 0 3
28697: PUSH
28698: LD_INT 13
28700: PUSH
28701: LD_INT 14
28703: PUSH
28704: LD_INT 2
28706: PUSH
28707: LD_INT 3
28709: PUSH
28710: LD_INT 4
28712: PUSH
28713: LD_INT 5
28715: PUSH
28716: LD_INT 21
28718: PUSH
28719: LD_INT 22
28721: PUSH
28722: LD_INT 23
28724: PUSH
28725: LD_INT 24
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: ST_TO_ADDR
28740: GO 28743
28742: POP
// result := ( chassis in result ) ;
28743: LD_ADDR_VAR 0 3
28747: PUSH
28748: LD_VAR 0 1
28752: PUSH
28753: LD_VAR 0 3
28757: IN
28758: ST_TO_ADDR
// end ;
28759: LD_VAR 0 3
28763: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28764: LD_INT 0
28766: PPUSH
// if not chassis or not weapon then
28767: LD_VAR 0 1
28771: NOT
28772: PUSH
28773: LD_VAR 0 2
28777: NOT
28778: OR
28779: IFFALSE 28783
// exit ;
28781: GO 29845
// case weapon of us_machine_gun :
28783: LD_VAR 0 2
28787: PUSH
28788: LD_INT 2
28790: DOUBLE
28791: EQUAL
28792: IFTRUE 28796
28794: GO 28826
28796: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28797: LD_ADDR_VAR 0 3
28801: PUSH
28802: LD_INT 1
28804: PUSH
28805: LD_INT 2
28807: PUSH
28808: LD_INT 3
28810: PUSH
28811: LD_INT 4
28813: PUSH
28814: LD_INT 5
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: ST_TO_ADDR
28824: GO 29829
28826: LD_INT 3
28828: DOUBLE
28829: EQUAL
28830: IFTRUE 28834
28832: GO 28864
28834: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28835: LD_ADDR_VAR 0 3
28839: PUSH
28840: LD_INT 1
28842: PUSH
28843: LD_INT 2
28845: PUSH
28846: LD_INT 3
28848: PUSH
28849: LD_INT 4
28851: PUSH
28852: LD_INT 5
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: ST_TO_ADDR
28862: GO 29829
28864: LD_INT 11
28866: DOUBLE
28867: EQUAL
28868: IFTRUE 28872
28870: GO 28902
28872: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28873: LD_ADDR_VAR 0 3
28877: PUSH
28878: LD_INT 1
28880: PUSH
28881: LD_INT 2
28883: PUSH
28884: LD_INT 3
28886: PUSH
28887: LD_INT 4
28889: PUSH
28890: LD_INT 5
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: ST_TO_ADDR
28900: GO 29829
28902: LD_INT 4
28904: DOUBLE
28905: EQUAL
28906: IFTRUE 28910
28908: GO 28936
28910: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28911: LD_ADDR_VAR 0 3
28915: PUSH
28916: LD_INT 2
28918: PUSH
28919: LD_INT 3
28921: PUSH
28922: LD_INT 4
28924: PUSH
28925: LD_INT 5
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: ST_TO_ADDR
28934: GO 29829
28936: LD_INT 5
28938: DOUBLE
28939: EQUAL
28940: IFTRUE 28944
28942: GO 28970
28944: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28945: LD_ADDR_VAR 0 3
28949: PUSH
28950: LD_INT 2
28952: PUSH
28953: LD_INT 3
28955: PUSH
28956: LD_INT 4
28958: PUSH
28959: LD_INT 5
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: ST_TO_ADDR
28968: GO 29829
28970: LD_INT 9
28972: DOUBLE
28973: EQUAL
28974: IFTRUE 28978
28976: GO 29004
28978: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28979: LD_ADDR_VAR 0 3
28983: PUSH
28984: LD_INT 2
28986: PUSH
28987: LD_INT 3
28989: PUSH
28990: LD_INT 4
28992: PUSH
28993: LD_INT 5
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: ST_TO_ADDR
29002: GO 29829
29004: LD_INT 7
29006: DOUBLE
29007: EQUAL
29008: IFTRUE 29012
29010: GO 29038
29012: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29013: LD_ADDR_VAR 0 3
29017: PUSH
29018: LD_INT 2
29020: PUSH
29021: LD_INT 3
29023: PUSH
29024: LD_INT 4
29026: PUSH
29027: LD_INT 5
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: ST_TO_ADDR
29036: GO 29829
29038: LD_INT 12
29040: DOUBLE
29041: EQUAL
29042: IFTRUE 29046
29044: GO 29072
29046: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29047: LD_ADDR_VAR 0 3
29051: PUSH
29052: LD_INT 2
29054: PUSH
29055: LD_INT 3
29057: PUSH
29058: LD_INT 4
29060: PUSH
29061: LD_INT 5
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: ST_TO_ADDR
29070: GO 29829
29072: LD_INT 13
29074: DOUBLE
29075: EQUAL
29076: IFTRUE 29080
29078: GO 29106
29080: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29081: LD_ADDR_VAR 0 3
29085: PUSH
29086: LD_INT 2
29088: PUSH
29089: LD_INT 3
29091: PUSH
29092: LD_INT 4
29094: PUSH
29095: LD_INT 5
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: ST_TO_ADDR
29104: GO 29829
29106: LD_INT 14
29108: DOUBLE
29109: EQUAL
29110: IFTRUE 29114
29112: GO 29132
29114: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29115: LD_ADDR_VAR 0 3
29119: PUSH
29120: LD_INT 4
29122: PUSH
29123: LD_INT 5
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: ST_TO_ADDR
29130: GO 29829
29132: LD_INT 6
29134: DOUBLE
29135: EQUAL
29136: IFTRUE 29140
29138: GO 29158
29140: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29141: LD_ADDR_VAR 0 3
29145: PUSH
29146: LD_INT 4
29148: PUSH
29149: LD_INT 5
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: ST_TO_ADDR
29156: GO 29829
29158: LD_INT 10
29160: DOUBLE
29161: EQUAL
29162: IFTRUE 29166
29164: GO 29184
29166: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29167: LD_ADDR_VAR 0 3
29171: PUSH
29172: LD_INT 4
29174: PUSH
29175: LD_INT 5
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: ST_TO_ADDR
29182: GO 29829
29184: LD_INT 22
29186: DOUBLE
29187: EQUAL
29188: IFTRUE 29192
29190: GO 29218
29192: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29193: LD_ADDR_VAR 0 3
29197: PUSH
29198: LD_INT 11
29200: PUSH
29201: LD_INT 12
29203: PUSH
29204: LD_INT 13
29206: PUSH
29207: LD_INT 14
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: ST_TO_ADDR
29216: GO 29829
29218: LD_INT 23
29220: DOUBLE
29221: EQUAL
29222: IFTRUE 29226
29224: GO 29252
29226: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29227: LD_ADDR_VAR 0 3
29231: PUSH
29232: LD_INT 11
29234: PUSH
29235: LD_INT 12
29237: PUSH
29238: LD_INT 13
29240: PUSH
29241: LD_INT 14
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: ST_TO_ADDR
29250: GO 29829
29252: LD_INT 24
29254: DOUBLE
29255: EQUAL
29256: IFTRUE 29260
29258: GO 29286
29260: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29261: LD_ADDR_VAR 0 3
29265: PUSH
29266: LD_INT 11
29268: PUSH
29269: LD_INT 12
29271: PUSH
29272: LD_INT 13
29274: PUSH
29275: LD_INT 14
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: ST_TO_ADDR
29284: GO 29829
29286: LD_INT 30
29288: DOUBLE
29289: EQUAL
29290: IFTRUE 29294
29292: GO 29320
29294: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29295: LD_ADDR_VAR 0 3
29299: PUSH
29300: LD_INT 11
29302: PUSH
29303: LD_INT 12
29305: PUSH
29306: LD_INT 13
29308: PUSH
29309: LD_INT 14
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: ST_TO_ADDR
29318: GO 29829
29320: LD_INT 25
29322: DOUBLE
29323: EQUAL
29324: IFTRUE 29328
29326: GO 29346
29328: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29329: LD_ADDR_VAR 0 3
29333: PUSH
29334: LD_INT 13
29336: PUSH
29337: LD_INT 14
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: ST_TO_ADDR
29344: GO 29829
29346: LD_INT 27
29348: DOUBLE
29349: EQUAL
29350: IFTRUE 29354
29352: GO 29372
29354: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29355: LD_ADDR_VAR 0 3
29359: PUSH
29360: LD_INT 13
29362: PUSH
29363: LD_INT 14
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: ST_TO_ADDR
29370: GO 29829
29372: LD_EXP 64
29376: DOUBLE
29377: EQUAL
29378: IFTRUE 29382
29380: GO 29408
29382: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29383: LD_ADDR_VAR 0 3
29387: PUSH
29388: LD_INT 11
29390: PUSH
29391: LD_INT 12
29393: PUSH
29394: LD_INT 13
29396: PUSH
29397: LD_INT 14
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: ST_TO_ADDR
29406: GO 29829
29408: LD_INT 28
29410: DOUBLE
29411: EQUAL
29412: IFTRUE 29416
29414: GO 29434
29416: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29417: LD_ADDR_VAR 0 3
29421: PUSH
29422: LD_INT 13
29424: PUSH
29425: LD_INT 14
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: ST_TO_ADDR
29432: GO 29829
29434: LD_INT 29
29436: DOUBLE
29437: EQUAL
29438: IFTRUE 29442
29440: GO 29460
29442: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29443: LD_ADDR_VAR 0 3
29447: PUSH
29448: LD_INT 13
29450: PUSH
29451: LD_INT 14
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: ST_TO_ADDR
29458: GO 29829
29460: LD_INT 31
29462: DOUBLE
29463: EQUAL
29464: IFTRUE 29468
29466: GO 29486
29468: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29469: LD_ADDR_VAR 0 3
29473: PUSH
29474: LD_INT 13
29476: PUSH
29477: LD_INT 14
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: ST_TO_ADDR
29484: GO 29829
29486: LD_INT 26
29488: DOUBLE
29489: EQUAL
29490: IFTRUE 29494
29492: GO 29512
29494: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29495: LD_ADDR_VAR 0 3
29499: PUSH
29500: LD_INT 13
29502: PUSH
29503: LD_INT 14
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: ST_TO_ADDR
29510: GO 29829
29512: LD_INT 42
29514: DOUBLE
29515: EQUAL
29516: IFTRUE 29520
29518: GO 29546
29520: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29521: LD_ADDR_VAR 0 3
29525: PUSH
29526: LD_INT 21
29528: PUSH
29529: LD_INT 22
29531: PUSH
29532: LD_INT 23
29534: PUSH
29535: LD_INT 24
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: ST_TO_ADDR
29544: GO 29829
29546: LD_INT 43
29548: DOUBLE
29549: EQUAL
29550: IFTRUE 29554
29552: GO 29580
29554: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29555: LD_ADDR_VAR 0 3
29559: PUSH
29560: LD_INT 21
29562: PUSH
29563: LD_INT 22
29565: PUSH
29566: LD_INT 23
29568: PUSH
29569: LD_INT 24
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: ST_TO_ADDR
29578: GO 29829
29580: LD_INT 44
29582: DOUBLE
29583: EQUAL
29584: IFTRUE 29588
29586: GO 29614
29588: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29589: LD_ADDR_VAR 0 3
29593: PUSH
29594: LD_INT 21
29596: PUSH
29597: LD_INT 22
29599: PUSH
29600: LD_INT 23
29602: PUSH
29603: LD_INT 24
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: ST_TO_ADDR
29612: GO 29829
29614: LD_INT 45
29616: DOUBLE
29617: EQUAL
29618: IFTRUE 29622
29620: GO 29648
29622: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29623: LD_ADDR_VAR 0 3
29627: PUSH
29628: LD_INT 21
29630: PUSH
29631: LD_INT 22
29633: PUSH
29634: LD_INT 23
29636: PUSH
29637: LD_INT 24
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: ST_TO_ADDR
29646: GO 29829
29648: LD_INT 49
29650: DOUBLE
29651: EQUAL
29652: IFTRUE 29656
29654: GO 29682
29656: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29657: LD_ADDR_VAR 0 3
29661: PUSH
29662: LD_INT 21
29664: PUSH
29665: LD_INT 22
29667: PUSH
29668: LD_INT 23
29670: PUSH
29671: LD_INT 24
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: ST_TO_ADDR
29680: GO 29829
29682: LD_INT 51
29684: DOUBLE
29685: EQUAL
29686: IFTRUE 29690
29688: GO 29716
29690: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29691: LD_ADDR_VAR 0 3
29695: PUSH
29696: LD_INT 21
29698: PUSH
29699: LD_INT 22
29701: PUSH
29702: LD_INT 23
29704: PUSH
29705: LD_INT 24
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: ST_TO_ADDR
29714: GO 29829
29716: LD_INT 52
29718: DOUBLE
29719: EQUAL
29720: IFTRUE 29724
29722: GO 29750
29724: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29725: LD_ADDR_VAR 0 3
29729: PUSH
29730: LD_INT 21
29732: PUSH
29733: LD_INT 22
29735: PUSH
29736: LD_INT 23
29738: PUSH
29739: LD_INT 24
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: ST_TO_ADDR
29748: GO 29829
29750: LD_INT 53
29752: DOUBLE
29753: EQUAL
29754: IFTRUE 29758
29756: GO 29776
29758: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29759: LD_ADDR_VAR 0 3
29763: PUSH
29764: LD_INT 23
29766: PUSH
29767: LD_INT 24
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: ST_TO_ADDR
29774: GO 29829
29776: LD_INT 46
29778: DOUBLE
29779: EQUAL
29780: IFTRUE 29784
29782: GO 29802
29784: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29785: LD_ADDR_VAR 0 3
29789: PUSH
29790: LD_INT 23
29792: PUSH
29793: LD_INT 24
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: ST_TO_ADDR
29800: GO 29829
29802: LD_INT 47
29804: DOUBLE
29805: EQUAL
29806: IFTRUE 29810
29808: GO 29828
29810: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29811: LD_ADDR_VAR 0 3
29815: PUSH
29816: LD_INT 23
29818: PUSH
29819: LD_INT 24
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: ST_TO_ADDR
29826: GO 29829
29828: POP
// result := ( chassis in result ) ;
29829: LD_ADDR_VAR 0 3
29833: PUSH
29834: LD_VAR 0 1
29838: PUSH
29839: LD_VAR 0 3
29843: IN
29844: ST_TO_ADDR
// end ;
29845: LD_VAR 0 3
29849: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29850: LD_INT 0
29852: PPUSH
29853: PPUSH
29854: PPUSH
29855: PPUSH
29856: PPUSH
29857: PPUSH
29858: PPUSH
// result := array ;
29859: LD_ADDR_VAR 0 5
29863: PUSH
29864: LD_VAR 0 1
29868: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29869: LD_VAR 0 1
29873: NOT
29874: PUSH
29875: LD_VAR 0 2
29879: NOT
29880: OR
29881: PUSH
29882: LD_VAR 0 3
29886: NOT
29887: OR
29888: PUSH
29889: LD_VAR 0 2
29893: PUSH
29894: LD_VAR 0 1
29898: GREATER
29899: OR
29900: PUSH
29901: LD_VAR 0 3
29905: PUSH
29906: LD_VAR 0 1
29910: GREATER
29911: OR
29912: IFFALSE 29916
// exit ;
29914: GO 30212
// if direction then
29916: LD_VAR 0 4
29920: IFFALSE 29984
// begin d := 1 ;
29922: LD_ADDR_VAR 0 9
29926: PUSH
29927: LD_INT 1
29929: ST_TO_ADDR
// if i_from > i_to then
29930: LD_VAR 0 2
29934: PUSH
29935: LD_VAR 0 3
29939: GREATER
29940: IFFALSE 29966
// length := ( array - i_from ) + i_to else
29942: LD_ADDR_VAR 0 11
29946: PUSH
29947: LD_VAR 0 1
29951: PUSH
29952: LD_VAR 0 2
29956: MINUS
29957: PUSH
29958: LD_VAR 0 3
29962: PLUS
29963: ST_TO_ADDR
29964: GO 29982
// length := i_to - i_from ;
29966: LD_ADDR_VAR 0 11
29970: PUSH
29971: LD_VAR 0 3
29975: PUSH
29976: LD_VAR 0 2
29980: MINUS
29981: ST_TO_ADDR
// end else
29982: GO 30045
// begin d := - 1 ;
29984: LD_ADDR_VAR 0 9
29988: PUSH
29989: LD_INT 1
29991: NEG
29992: ST_TO_ADDR
// if i_from > i_to then
29993: LD_VAR 0 2
29997: PUSH
29998: LD_VAR 0 3
30002: GREATER
30003: IFFALSE 30023
// length := i_from - i_to else
30005: LD_ADDR_VAR 0 11
30009: PUSH
30010: LD_VAR 0 2
30014: PUSH
30015: LD_VAR 0 3
30019: MINUS
30020: ST_TO_ADDR
30021: GO 30045
// length := ( array - i_to ) + i_from ;
30023: LD_ADDR_VAR 0 11
30027: PUSH
30028: LD_VAR 0 1
30032: PUSH
30033: LD_VAR 0 3
30037: MINUS
30038: PUSH
30039: LD_VAR 0 2
30043: PLUS
30044: ST_TO_ADDR
// end ; if not length then
30045: LD_VAR 0 11
30049: NOT
30050: IFFALSE 30054
// exit ;
30052: GO 30212
// tmp := array ;
30054: LD_ADDR_VAR 0 10
30058: PUSH
30059: LD_VAR 0 1
30063: ST_TO_ADDR
// for i = 1 to length do
30064: LD_ADDR_VAR 0 6
30068: PUSH
30069: DOUBLE
30070: LD_INT 1
30072: DEC
30073: ST_TO_ADDR
30074: LD_VAR 0 11
30078: PUSH
30079: FOR_TO
30080: IFFALSE 30200
// begin for j = 1 to array do
30082: LD_ADDR_VAR 0 7
30086: PUSH
30087: DOUBLE
30088: LD_INT 1
30090: DEC
30091: ST_TO_ADDR
30092: LD_VAR 0 1
30096: PUSH
30097: FOR_TO
30098: IFFALSE 30186
// begin k := j + d ;
30100: LD_ADDR_VAR 0 8
30104: PUSH
30105: LD_VAR 0 7
30109: PUSH
30110: LD_VAR 0 9
30114: PLUS
30115: ST_TO_ADDR
// if k > array then
30116: LD_VAR 0 8
30120: PUSH
30121: LD_VAR 0 1
30125: GREATER
30126: IFFALSE 30136
// k := 1 ;
30128: LD_ADDR_VAR 0 8
30132: PUSH
30133: LD_INT 1
30135: ST_TO_ADDR
// if not k then
30136: LD_VAR 0 8
30140: NOT
30141: IFFALSE 30153
// k := array ;
30143: LD_ADDR_VAR 0 8
30147: PUSH
30148: LD_VAR 0 1
30152: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30153: LD_ADDR_VAR 0 10
30157: PUSH
30158: LD_VAR 0 10
30162: PPUSH
30163: LD_VAR 0 8
30167: PPUSH
30168: LD_VAR 0 1
30172: PUSH
30173: LD_VAR 0 7
30177: ARRAY
30178: PPUSH
30179: CALL_OW 1
30183: ST_TO_ADDR
// end ;
30184: GO 30097
30186: POP
30187: POP
// array := tmp ;
30188: LD_ADDR_VAR 0 1
30192: PUSH
30193: LD_VAR 0 10
30197: ST_TO_ADDR
// end ;
30198: GO 30079
30200: POP
30201: POP
// result := array ;
30202: LD_ADDR_VAR 0 5
30206: PUSH
30207: LD_VAR 0 1
30211: ST_TO_ADDR
// end ;
30212: LD_VAR 0 5
30216: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30217: LD_INT 0
30219: PPUSH
30220: PPUSH
// result := 0 ;
30221: LD_ADDR_VAR 0 3
30225: PUSH
30226: LD_INT 0
30228: ST_TO_ADDR
// if not array or not value in array then
30229: LD_VAR 0 1
30233: NOT
30234: PUSH
30235: LD_VAR 0 2
30239: PUSH
30240: LD_VAR 0 1
30244: IN
30245: NOT
30246: OR
30247: IFFALSE 30251
// exit ;
30249: GO 30305
// for i = 1 to array do
30251: LD_ADDR_VAR 0 4
30255: PUSH
30256: DOUBLE
30257: LD_INT 1
30259: DEC
30260: ST_TO_ADDR
30261: LD_VAR 0 1
30265: PUSH
30266: FOR_TO
30267: IFFALSE 30303
// if value = array [ i ] then
30269: LD_VAR 0 2
30273: PUSH
30274: LD_VAR 0 1
30278: PUSH
30279: LD_VAR 0 4
30283: ARRAY
30284: EQUAL
30285: IFFALSE 30301
// begin result := i ;
30287: LD_ADDR_VAR 0 3
30291: PUSH
30292: LD_VAR 0 4
30296: ST_TO_ADDR
// exit ;
30297: POP
30298: POP
30299: GO 30305
// end ;
30301: GO 30266
30303: POP
30304: POP
// end ;
30305: LD_VAR 0 3
30309: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30310: LD_INT 0
30312: PPUSH
// vc_chassis := chassis ;
30313: LD_ADDR_OWVAR 37
30317: PUSH
30318: LD_VAR 0 1
30322: ST_TO_ADDR
// vc_engine := engine ;
30323: LD_ADDR_OWVAR 39
30327: PUSH
30328: LD_VAR 0 2
30332: ST_TO_ADDR
// vc_control := control ;
30333: LD_ADDR_OWVAR 38
30337: PUSH
30338: LD_VAR 0 3
30342: ST_TO_ADDR
// vc_weapon := weapon ;
30343: LD_ADDR_OWVAR 40
30347: PUSH
30348: LD_VAR 0 4
30352: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30353: LD_ADDR_OWVAR 41
30357: PUSH
30358: LD_VAR 0 5
30362: ST_TO_ADDR
// end ;
30363: LD_VAR 0 6
30367: RET
// export function WantPlant ( unit ) ; var task ; begin
30368: LD_INT 0
30370: PPUSH
30371: PPUSH
// result := false ;
30372: LD_ADDR_VAR 0 2
30376: PUSH
30377: LD_INT 0
30379: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30380: LD_ADDR_VAR 0 3
30384: PUSH
30385: LD_VAR 0 1
30389: PPUSH
30390: CALL_OW 437
30394: ST_TO_ADDR
// if task then
30395: LD_VAR 0 3
30399: IFFALSE 30427
// if task [ 1 ] [ 1 ] = p then
30401: LD_VAR 0 3
30405: PUSH
30406: LD_INT 1
30408: ARRAY
30409: PUSH
30410: LD_INT 1
30412: ARRAY
30413: PUSH
30414: LD_STRING p
30416: EQUAL
30417: IFFALSE 30427
// result := true ;
30419: LD_ADDR_VAR 0 2
30423: PUSH
30424: LD_INT 1
30426: ST_TO_ADDR
// end ;
30427: LD_VAR 0 2
30431: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30432: LD_INT 0
30434: PPUSH
30435: PPUSH
30436: PPUSH
30437: PPUSH
// if pos < 1 then
30438: LD_VAR 0 2
30442: PUSH
30443: LD_INT 1
30445: LESS
30446: IFFALSE 30450
// exit ;
30448: GO 30753
// if pos = 1 then
30450: LD_VAR 0 2
30454: PUSH
30455: LD_INT 1
30457: EQUAL
30458: IFFALSE 30491
// result := Replace ( arr , pos [ 1 ] , value ) else
30460: LD_ADDR_VAR 0 4
30464: PUSH
30465: LD_VAR 0 1
30469: PPUSH
30470: LD_VAR 0 2
30474: PUSH
30475: LD_INT 1
30477: ARRAY
30478: PPUSH
30479: LD_VAR 0 3
30483: PPUSH
30484: CALL_OW 1
30488: ST_TO_ADDR
30489: GO 30753
// begin tmp := arr ;
30491: LD_ADDR_VAR 0 6
30495: PUSH
30496: LD_VAR 0 1
30500: ST_TO_ADDR
// s_arr := [ tmp ] ;
30501: LD_ADDR_VAR 0 7
30505: PUSH
30506: LD_VAR 0 6
30510: PUSH
30511: EMPTY
30512: LIST
30513: ST_TO_ADDR
// for i = 1 to pos - 1 do
30514: LD_ADDR_VAR 0 5
30518: PUSH
30519: DOUBLE
30520: LD_INT 1
30522: DEC
30523: ST_TO_ADDR
30524: LD_VAR 0 2
30528: PUSH
30529: LD_INT 1
30531: MINUS
30532: PUSH
30533: FOR_TO
30534: IFFALSE 30579
// begin tmp := tmp [ pos [ i ] ] ;
30536: LD_ADDR_VAR 0 6
30540: PUSH
30541: LD_VAR 0 6
30545: PUSH
30546: LD_VAR 0 2
30550: PUSH
30551: LD_VAR 0 5
30555: ARRAY
30556: ARRAY
30557: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30558: LD_ADDR_VAR 0 7
30562: PUSH
30563: LD_VAR 0 7
30567: PUSH
30568: LD_VAR 0 6
30572: PUSH
30573: EMPTY
30574: LIST
30575: ADD
30576: ST_TO_ADDR
// end ;
30577: GO 30533
30579: POP
30580: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30581: LD_ADDR_VAR 0 6
30585: PUSH
30586: LD_VAR 0 6
30590: PPUSH
30591: LD_VAR 0 2
30595: PUSH
30596: LD_VAR 0 2
30600: ARRAY
30601: PPUSH
30602: LD_VAR 0 3
30606: PPUSH
30607: CALL_OW 1
30611: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30612: LD_ADDR_VAR 0 7
30616: PUSH
30617: LD_VAR 0 7
30621: PPUSH
30622: LD_VAR 0 7
30626: PPUSH
30627: LD_VAR 0 6
30631: PPUSH
30632: CALL_OW 1
30636: ST_TO_ADDR
// for i = s_arr downto 2 do
30637: LD_ADDR_VAR 0 5
30641: PUSH
30642: DOUBLE
30643: LD_VAR 0 7
30647: INC
30648: ST_TO_ADDR
30649: LD_INT 2
30651: PUSH
30652: FOR_DOWNTO
30653: IFFALSE 30737
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30655: LD_ADDR_VAR 0 6
30659: PUSH
30660: LD_VAR 0 7
30664: PUSH
30665: LD_VAR 0 5
30669: PUSH
30670: LD_INT 1
30672: MINUS
30673: ARRAY
30674: PPUSH
30675: LD_VAR 0 2
30679: PUSH
30680: LD_VAR 0 5
30684: PUSH
30685: LD_INT 1
30687: MINUS
30688: ARRAY
30689: PPUSH
30690: LD_VAR 0 7
30694: PUSH
30695: LD_VAR 0 5
30699: ARRAY
30700: PPUSH
30701: CALL_OW 1
30705: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30706: LD_ADDR_VAR 0 7
30710: PUSH
30711: LD_VAR 0 7
30715: PPUSH
30716: LD_VAR 0 5
30720: PUSH
30721: LD_INT 1
30723: MINUS
30724: PPUSH
30725: LD_VAR 0 6
30729: PPUSH
30730: CALL_OW 1
30734: ST_TO_ADDR
// end ;
30735: GO 30652
30737: POP
30738: POP
// result := s_arr [ 1 ] ;
30739: LD_ADDR_VAR 0 4
30743: PUSH
30744: LD_VAR 0 7
30748: PUSH
30749: LD_INT 1
30751: ARRAY
30752: ST_TO_ADDR
// end ; end ;
30753: LD_VAR 0 4
30757: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30758: LD_INT 0
30760: PPUSH
30761: PPUSH
// if not list then
30762: LD_VAR 0 1
30766: NOT
30767: IFFALSE 30771
// exit ;
30769: GO 30862
// i := list [ pos1 ] ;
30771: LD_ADDR_VAR 0 5
30775: PUSH
30776: LD_VAR 0 1
30780: PUSH
30781: LD_VAR 0 2
30785: ARRAY
30786: ST_TO_ADDR
// if not i then
30787: LD_VAR 0 5
30791: NOT
30792: IFFALSE 30796
// exit ;
30794: GO 30862
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30796: LD_ADDR_VAR 0 1
30800: PUSH
30801: LD_VAR 0 1
30805: PPUSH
30806: LD_VAR 0 2
30810: PPUSH
30811: LD_VAR 0 1
30815: PUSH
30816: LD_VAR 0 3
30820: ARRAY
30821: PPUSH
30822: CALL_OW 1
30826: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30827: LD_ADDR_VAR 0 1
30831: PUSH
30832: LD_VAR 0 1
30836: PPUSH
30837: LD_VAR 0 3
30841: PPUSH
30842: LD_VAR 0 5
30846: PPUSH
30847: CALL_OW 1
30851: ST_TO_ADDR
// result := list ;
30852: LD_ADDR_VAR 0 4
30856: PUSH
30857: LD_VAR 0 1
30861: ST_TO_ADDR
// end ;
30862: LD_VAR 0 4
30866: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30867: LD_INT 0
30869: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30870: LD_ADDR_VAR 0 5
30874: PUSH
30875: LD_VAR 0 1
30879: PPUSH
30880: CALL_OW 250
30884: PPUSH
30885: LD_VAR 0 1
30889: PPUSH
30890: CALL_OW 251
30894: PPUSH
30895: LD_VAR 0 2
30899: PPUSH
30900: LD_VAR 0 3
30904: PPUSH
30905: LD_VAR 0 4
30909: PPUSH
30910: CALL 30920 0 5
30914: ST_TO_ADDR
// end ;
30915: LD_VAR 0 5
30919: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30920: LD_INT 0
30922: PPUSH
30923: PPUSH
30924: PPUSH
30925: PPUSH
// if not list then
30926: LD_VAR 0 3
30930: NOT
30931: IFFALSE 30935
// exit ;
30933: GO 31323
// result := [ ] ;
30935: LD_ADDR_VAR 0 6
30939: PUSH
30940: EMPTY
30941: ST_TO_ADDR
// for i in list do
30942: LD_ADDR_VAR 0 7
30946: PUSH
30947: LD_VAR 0 3
30951: PUSH
30952: FOR_IN
30953: IFFALSE 31155
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30955: LD_ADDR_VAR 0 9
30959: PUSH
30960: LD_VAR 0 7
30964: PPUSH
30965: LD_VAR 0 1
30969: PPUSH
30970: LD_VAR 0 2
30974: PPUSH
30975: CALL_OW 297
30979: ST_TO_ADDR
// if not result then
30980: LD_VAR 0 6
30984: NOT
30985: IFFALSE 31011
// result := [ [ i , tmp ] ] else
30987: LD_ADDR_VAR 0 6
30991: PUSH
30992: LD_VAR 0 7
30996: PUSH
30997: LD_VAR 0 9
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: EMPTY
31007: LIST
31008: ST_TO_ADDR
31009: GO 31153
// begin if result [ result ] [ 2 ] < tmp then
31011: LD_VAR 0 6
31015: PUSH
31016: LD_VAR 0 6
31020: ARRAY
31021: PUSH
31022: LD_INT 2
31024: ARRAY
31025: PUSH
31026: LD_VAR 0 9
31030: LESS
31031: IFFALSE 31073
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31033: LD_ADDR_VAR 0 6
31037: PUSH
31038: LD_VAR 0 6
31042: PPUSH
31043: LD_VAR 0 6
31047: PUSH
31048: LD_INT 1
31050: PLUS
31051: PPUSH
31052: LD_VAR 0 7
31056: PUSH
31057: LD_VAR 0 9
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PPUSH
31066: CALL_OW 2
31070: ST_TO_ADDR
31071: GO 31153
// for j = 1 to result do
31073: LD_ADDR_VAR 0 8
31077: PUSH
31078: DOUBLE
31079: LD_INT 1
31081: DEC
31082: ST_TO_ADDR
31083: LD_VAR 0 6
31087: PUSH
31088: FOR_TO
31089: IFFALSE 31151
// begin if tmp < result [ j ] [ 2 ] then
31091: LD_VAR 0 9
31095: PUSH
31096: LD_VAR 0 6
31100: PUSH
31101: LD_VAR 0 8
31105: ARRAY
31106: PUSH
31107: LD_INT 2
31109: ARRAY
31110: LESS
31111: IFFALSE 31149
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31113: LD_ADDR_VAR 0 6
31117: PUSH
31118: LD_VAR 0 6
31122: PPUSH
31123: LD_VAR 0 8
31127: PPUSH
31128: LD_VAR 0 7
31132: PUSH
31133: LD_VAR 0 9
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PPUSH
31142: CALL_OW 2
31146: ST_TO_ADDR
// break ;
31147: GO 31151
// end ; end ;
31149: GO 31088
31151: POP
31152: POP
// end ; end ;
31153: GO 30952
31155: POP
31156: POP
// if result and not asc then
31157: LD_VAR 0 6
31161: PUSH
31162: LD_VAR 0 4
31166: NOT
31167: AND
31168: IFFALSE 31243
// begin tmp := result ;
31170: LD_ADDR_VAR 0 9
31174: PUSH
31175: LD_VAR 0 6
31179: ST_TO_ADDR
// for i = tmp downto 1 do
31180: LD_ADDR_VAR 0 7
31184: PUSH
31185: DOUBLE
31186: LD_VAR 0 9
31190: INC
31191: ST_TO_ADDR
31192: LD_INT 1
31194: PUSH
31195: FOR_DOWNTO
31196: IFFALSE 31241
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31198: LD_ADDR_VAR 0 6
31202: PUSH
31203: LD_VAR 0 6
31207: PPUSH
31208: LD_VAR 0 9
31212: PUSH
31213: LD_VAR 0 7
31217: MINUS
31218: PUSH
31219: LD_INT 1
31221: PLUS
31222: PPUSH
31223: LD_VAR 0 9
31227: PUSH
31228: LD_VAR 0 7
31232: ARRAY
31233: PPUSH
31234: CALL_OW 1
31238: ST_TO_ADDR
31239: GO 31195
31241: POP
31242: POP
// end ; tmp := [ ] ;
31243: LD_ADDR_VAR 0 9
31247: PUSH
31248: EMPTY
31249: ST_TO_ADDR
// if mode then
31250: LD_VAR 0 5
31254: IFFALSE 31323
// begin for i = 1 to result do
31256: LD_ADDR_VAR 0 7
31260: PUSH
31261: DOUBLE
31262: LD_INT 1
31264: DEC
31265: ST_TO_ADDR
31266: LD_VAR 0 6
31270: PUSH
31271: FOR_TO
31272: IFFALSE 31311
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31274: LD_ADDR_VAR 0 9
31278: PUSH
31279: LD_VAR 0 9
31283: PPUSH
31284: LD_VAR 0 7
31288: PPUSH
31289: LD_VAR 0 6
31293: PUSH
31294: LD_VAR 0 7
31298: ARRAY
31299: PUSH
31300: LD_INT 1
31302: ARRAY
31303: PPUSH
31304: CALL_OW 1
31308: ST_TO_ADDR
31309: GO 31271
31311: POP
31312: POP
// result := tmp ;
31313: LD_ADDR_VAR 0 6
31317: PUSH
31318: LD_VAR 0 9
31322: ST_TO_ADDR
// end ; end ;
31323: LD_VAR 0 6
31327: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31328: LD_INT 0
31330: PPUSH
31331: PPUSH
31332: PPUSH
31333: PPUSH
31334: PPUSH
31335: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31336: LD_ADDR_VAR 0 5
31340: PUSH
31341: LD_INT 0
31343: PUSH
31344: LD_INT 0
31346: PUSH
31347: LD_INT 0
31349: PUSH
31350: EMPTY
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: ST_TO_ADDR
// if not x or not y then
31358: LD_VAR 0 2
31362: NOT
31363: PUSH
31364: LD_VAR 0 3
31368: NOT
31369: OR
31370: IFFALSE 31374
// exit ;
31372: GO 33026
// if not range then
31374: LD_VAR 0 4
31378: NOT
31379: IFFALSE 31389
// range := 10 ;
31381: LD_ADDR_VAR 0 4
31385: PUSH
31386: LD_INT 10
31388: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31389: LD_ADDR_VAR 0 8
31393: PUSH
31394: LD_INT 81
31396: PUSH
31397: LD_VAR 0 1
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 92
31408: PUSH
31409: LD_VAR 0 2
31413: PUSH
31414: LD_VAR 0 3
31418: PUSH
31419: LD_VAR 0 4
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 3
31432: PUSH
31433: LD_INT 21
31435: PUSH
31436: LD_INT 3
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: LIST
31451: PPUSH
31452: CALL_OW 69
31456: ST_TO_ADDR
// if not tmp then
31457: LD_VAR 0 8
31461: NOT
31462: IFFALSE 31466
// exit ;
31464: GO 33026
// for i in tmp do
31466: LD_ADDR_VAR 0 6
31470: PUSH
31471: LD_VAR 0 8
31475: PUSH
31476: FOR_IN
31477: IFFALSE 33001
// begin points := [ 0 , 0 , 0 ] ;
31479: LD_ADDR_VAR 0 9
31483: PUSH
31484: LD_INT 0
31486: PUSH
31487: LD_INT 0
31489: PUSH
31490: LD_INT 0
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: LIST
31497: ST_TO_ADDR
// bpoints := 1 ;
31498: LD_ADDR_VAR 0 10
31502: PUSH
31503: LD_INT 1
31505: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31506: LD_VAR 0 6
31510: PPUSH
31511: CALL_OW 247
31515: PUSH
31516: LD_INT 1
31518: DOUBLE
31519: EQUAL
31520: IFTRUE 31524
31522: GO 32102
31524: POP
// begin if GetClass ( i ) = 1 then
31525: LD_VAR 0 6
31529: PPUSH
31530: CALL_OW 257
31534: PUSH
31535: LD_INT 1
31537: EQUAL
31538: IFFALSE 31559
// points := [ 10 , 5 , 3 ] ;
31540: LD_ADDR_VAR 0 9
31544: PUSH
31545: LD_INT 10
31547: PUSH
31548: LD_INT 5
31550: PUSH
31551: LD_INT 3
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31559: LD_VAR 0 6
31563: PPUSH
31564: CALL_OW 257
31568: PUSH
31569: LD_INT 2
31571: PUSH
31572: LD_INT 3
31574: PUSH
31575: LD_INT 4
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: LIST
31582: IN
31583: IFFALSE 31604
// points := [ 3 , 2 , 1 ] ;
31585: LD_ADDR_VAR 0 9
31589: PUSH
31590: LD_INT 3
31592: PUSH
31593: LD_INT 2
31595: PUSH
31596: LD_INT 1
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: LIST
31603: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31604: LD_VAR 0 6
31608: PPUSH
31609: CALL_OW 257
31613: PUSH
31614: LD_INT 5
31616: EQUAL
31617: IFFALSE 31638
// points := [ 130 , 5 , 2 ] ;
31619: LD_ADDR_VAR 0 9
31623: PUSH
31624: LD_INT 130
31626: PUSH
31627: LD_INT 5
31629: PUSH
31630: LD_INT 2
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: LIST
31637: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31638: LD_VAR 0 6
31642: PPUSH
31643: CALL_OW 257
31647: PUSH
31648: LD_INT 8
31650: EQUAL
31651: IFFALSE 31672
// points := [ 35 , 35 , 30 ] ;
31653: LD_ADDR_VAR 0 9
31657: PUSH
31658: LD_INT 35
31660: PUSH
31661: LD_INT 35
31663: PUSH
31664: LD_INT 30
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: LIST
31671: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31672: LD_VAR 0 6
31676: PPUSH
31677: CALL_OW 257
31681: PUSH
31682: LD_INT 9
31684: EQUAL
31685: IFFALSE 31706
// points := [ 20 , 55 , 40 ] ;
31687: LD_ADDR_VAR 0 9
31691: PUSH
31692: LD_INT 20
31694: PUSH
31695: LD_INT 55
31697: PUSH
31698: LD_INT 40
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: LIST
31705: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31706: LD_VAR 0 6
31710: PPUSH
31711: CALL_OW 257
31715: PUSH
31716: LD_INT 12
31718: PUSH
31719: LD_INT 16
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: IN
31726: IFFALSE 31747
// points := [ 5 , 3 , 2 ] ;
31728: LD_ADDR_VAR 0 9
31732: PUSH
31733: LD_INT 5
31735: PUSH
31736: LD_INT 3
31738: PUSH
31739: LD_INT 2
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: LIST
31746: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31747: LD_VAR 0 6
31751: PPUSH
31752: CALL_OW 257
31756: PUSH
31757: LD_INT 17
31759: EQUAL
31760: IFFALSE 31781
// points := [ 100 , 50 , 75 ] ;
31762: LD_ADDR_VAR 0 9
31766: PUSH
31767: LD_INT 100
31769: PUSH
31770: LD_INT 50
31772: PUSH
31773: LD_INT 75
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: LIST
31780: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31781: LD_VAR 0 6
31785: PPUSH
31786: CALL_OW 257
31790: PUSH
31791: LD_INT 15
31793: EQUAL
31794: IFFALSE 31815
// points := [ 10 , 5 , 3 ] ;
31796: LD_ADDR_VAR 0 9
31800: PUSH
31801: LD_INT 10
31803: PUSH
31804: LD_INT 5
31806: PUSH
31807: LD_INT 3
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: LIST
31814: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31815: LD_VAR 0 6
31819: PPUSH
31820: CALL_OW 257
31824: PUSH
31825: LD_INT 14
31827: EQUAL
31828: IFFALSE 31849
// points := [ 10 , 0 , 0 ] ;
31830: LD_ADDR_VAR 0 9
31834: PUSH
31835: LD_INT 10
31837: PUSH
31838: LD_INT 0
31840: PUSH
31841: LD_INT 0
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: LIST
31848: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31849: LD_VAR 0 6
31853: PPUSH
31854: CALL_OW 257
31858: PUSH
31859: LD_INT 11
31861: EQUAL
31862: IFFALSE 31883
// points := [ 30 , 10 , 5 ] ;
31864: LD_ADDR_VAR 0 9
31868: PUSH
31869: LD_INT 30
31871: PUSH
31872: LD_INT 10
31874: PUSH
31875: LD_INT 5
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: LIST
31882: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31883: LD_VAR 0 1
31887: PPUSH
31888: LD_INT 5
31890: PPUSH
31891: CALL_OW 321
31895: PUSH
31896: LD_INT 2
31898: EQUAL
31899: IFFALSE 31916
// bpoints := bpoints * 1.8 ;
31901: LD_ADDR_VAR 0 10
31905: PUSH
31906: LD_VAR 0 10
31910: PUSH
31911: LD_REAL  1.80000000000000E+0000
31914: MUL
31915: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31916: LD_VAR 0 6
31920: PPUSH
31921: CALL_OW 257
31925: PUSH
31926: LD_INT 1
31928: PUSH
31929: LD_INT 2
31931: PUSH
31932: LD_INT 3
31934: PUSH
31935: LD_INT 4
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: IN
31944: PUSH
31945: LD_VAR 0 1
31949: PPUSH
31950: LD_INT 51
31952: PPUSH
31953: CALL_OW 321
31957: PUSH
31958: LD_INT 2
31960: EQUAL
31961: AND
31962: IFFALSE 31979
// bpoints := bpoints * 1.2 ;
31964: LD_ADDR_VAR 0 10
31968: PUSH
31969: LD_VAR 0 10
31973: PUSH
31974: LD_REAL  1.20000000000000E+0000
31977: MUL
31978: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31979: LD_VAR 0 6
31983: PPUSH
31984: CALL_OW 257
31988: PUSH
31989: LD_INT 5
31991: PUSH
31992: LD_INT 7
31994: PUSH
31995: LD_INT 9
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: LIST
32002: IN
32003: PUSH
32004: LD_VAR 0 1
32008: PPUSH
32009: LD_INT 52
32011: PPUSH
32012: CALL_OW 321
32016: PUSH
32017: LD_INT 2
32019: EQUAL
32020: AND
32021: IFFALSE 32038
// bpoints := bpoints * 1.5 ;
32023: LD_ADDR_VAR 0 10
32027: PUSH
32028: LD_VAR 0 10
32032: PUSH
32033: LD_REAL  1.50000000000000E+0000
32036: MUL
32037: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32038: LD_VAR 0 1
32042: PPUSH
32043: LD_INT 66
32045: PPUSH
32046: CALL_OW 321
32050: PUSH
32051: LD_INT 2
32053: EQUAL
32054: IFFALSE 32071
// bpoints := bpoints * 1.1 ;
32056: LD_ADDR_VAR 0 10
32060: PUSH
32061: LD_VAR 0 10
32065: PUSH
32066: LD_REAL  1.10000000000000E+0000
32069: MUL
32070: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32071: LD_ADDR_VAR 0 10
32075: PUSH
32076: LD_VAR 0 10
32080: PUSH
32081: LD_VAR 0 6
32085: PPUSH
32086: LD_INT 1
32088: PPUSH
32089: CALL_OW 259
32093: PUSH
32094: LD_REAL  1.15000000000000E+0000
32097: MUL
32098: MUL
32099: ST_TO_ADDR
// end ; unit_vehicle :
32100: GO 32930
32102: LD_INT 2
32104: DOUBLE
32105: EQUAL
32106: IFTRUE 32110
32108: GO 32918
32110: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32111: LD_VAR 0 6
32115: PPUSH
32116: CALL_OW 264
32120: PUSH
32121: LD_INT 2
32123: PUSH
32124: LD_INT 42
32126: PUSH
32127: LD_INT 24
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: LIST
32134: IN
32135: IFFALSE 32156
// points := [ 25 , 5 , 3 ] ;
32137: LD_ADDR_VAR 0 9
32141: PUSH
32142: LD_INT 25
32144: PUSH
32145: LD_INT 5
32147: PUSH
32148: LD_INT 3
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: LIST
32155: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32156: LD_VAR 0 6
32160: PPUSH
32161: CALL_OW 264
32165: PUSH
32166: LD_INT 4
32168: PUSH
32169: LD_INT 43
32171: PUSH
32172: LD_INT 25
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: LIST
32179: IN
32180: IFFALSE 32201
// points := [ 40 , 15 , 5 ] ;
32182: LD_ADDR_VAR 0 9
32186: PUSH
32187: LD_INT 40
32189: PUSH
32190: LD_INT 15
32192: PUSH
32193: LD_INT 5
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: LIST
32200: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32201: LD_VAR 0 6
32205: PPUSH
32206: CALL_OW 264
32210: PUSH
32211: LD_INT 3
32213: PUSH
32214: LD_INT 23
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: IN
32221: IFFALSE 32242
// points := [ 7 , 25 , 8 ] ;
32223: LD_ADDR_VAR 0 9
32227: PUSH
32228: LD_INT 7
32230: PUSH
32231: LD_INT 25
32233: PUSH
32234: LD_INT 8
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: LIST
32241: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32242: LD_VAR 0 6
32246: PPUSH
32247: CALL_OW 264
32251: PUSH
32252: LD_INT 5
32254: PUSH
32255: LD_INT 27
32257: PUSH
32258: LD_INT 44
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: LIST
32265: IN
32266: IFFALSE 32287
// points := [ 14 , 50 , 16 ] ;
32268: LD_ADDR_VAR 0 9
32272: PUSH
32273: LD_INT 14
32275: PUSH
32276: LD_INT 50
32278: PUSH
32279: LD_INT 16
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: LIST
32286: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32287: LD_VAR 0 6
32291: PPUSH
32292: CALL_OW 264
32296: PUSH
32297: LD_INT 6
32299: PUSH
32300: LD_INT 46
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: IN
32307: IFFALSE 32328
// points := [ 32 , 120 , 70 ] ;
32309: LD_ADDR_VAR 0 9
32313: PUSH
32314: LD_INT 32
32316: PUSH
32317: LD_INT 120
32319: PUSH
32320: LD_INT 70
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: LIST
32327: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32328: LD_VAR 0 6
32332: PPUSH
32333: CALL_OW 264
32337: PUSH
32338: LD_INT 7
32340: PUSH
32341: LD_INT 28
32343: PUSH
32344: LD_INT 45
32346: PUSH
32347: LD_EXP 64
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: IN
32358: IFFALSE 32379
// points := [ 35 , 20 , 45 ] ;
32360: LD_ADDR_VAR 0 9
32364: PUSH
32365: LD_INT 35
32367: PUSH
32368: LD_INT 20
32370: PUSH
32371: LD_INT 45
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: LIST
32378: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32379: LD_VAR 0 6
32383: PPUSH
32384: CALL_OW 264
32388: PUSH
32389: LD_INT 47
32391: PUSH
32392: EMPTY
32393: LIST
32394: IN
32395: IFFALSE 32416
// points := [ 67 , 45 , 75 ] ;
32397: LD_ADDR_VAR 0 9
32401: PUSH
32402: LD_INT 67
32404: PUSH
32405: LD_INT 45
32407: PUSH
32408: LD_INT 75
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: LIST
32415: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32416: LD_VAR 0 6
32420: PPUSH
32421: CALL_OW 264
32425: PUSH
32426: LD_INT 26
32428: PUSH
32429: EMPTY
32430: LIST
32431: IN
32432: IFFALSE 32453
// points := [ 120 , 30 , 80 ] ;
32434: LD_ADDR_VAR 0 9
32438: PUSH
32439: LD_INT 120
32441: PUSH
32442: LD_INT 30
32444: PUSH
32445: LD_INT 80
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: LIST
32452: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32453: LD_VAR 0 6
32457: PPUSH
32458: CALL_OW 264
32462: PUSH
32463: LD_INT 22
32465: PUSH
32466: EMPTY
32467: LIST
32468: IN
32469: IFFALSE 32490
// points := [ 40 , 1 , 1 ] ;
32471: LD_ADDR_VAR 0 9
32475: PUSH
32476: LD_INT 40
32478: PUSH
32479: LD_INT 1
32481: PUSH
32482: LD_INT 1
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: LIST
32489: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32490: LD_VAR 0 6
32494: PPUSH
32495: CALL_OW 264
32499: PUSH
32500: LD_INT 29
32502: PUSH
32503: EMPTY
32504: LIST
32505: IN
32506: IFFALSE 32527
// points := [ 70 , 200 , 400 ] ;
32508: LD_ADDR_VAR 0 9
32512: PUSH
32513: LD_INT 70
32515: PUSH
32516: LD_INT 200
32518: PUSH
32519: LD_INT 400
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: LIST
32526: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32527: LD_VAR 0 6
32531: PPUSH
32532: CALL_OW 264
32536: PUSH
32537: LD_INT 14
32539: PUSH
32540: LD_INT 53
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: IN
32547: IFFALSE 32568
// points := [ 40 , 10 , 20 ] ;
32549: LD_ADDR_VAR 0 9
32553: PUSH
32554: LD_INT 40
32556: PUSH
32557: LD_INT 10
32559: PUSH
32560: LD_INT 20
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: LIST
32567: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32568: LD_VAR 0 6
32572: PPUSH
32573: CALL_OW 264
32577: PUSH
32578: LD_INT 9
32580: PUSH
32581: EMPTY
32582: LIST
32583: IN
32584: IFFALSE 32605
// points := [ 5 , 70 , 20 ] ;
32586: LD_ADDR_VAR 0 9
32590: PUSH
32591: LD_INT 5
32593: PUSH
32594: LD_INT 70
32596: PUSH
32597: LD_INT 20
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: LIST
32604: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32605: LD_VAR 0 6
32609: PPUSH
32610: CALL_OW 264
32614: PUSH
32615: LD_INT 10
32617: PUSH
32618: EMPTY
32619: LIST
32620: IN
32621: IFFALSE 32642
// points := [ 35 , 110 , 70 ] ;
32623: LD_ADDR_VAR 0 9
32627: PUSH
32628: LD_INT 35
32630: PUSH
32631: LD_INT 110
32633: PUSH
32634: LD_INT 70
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: LIST
32641: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32642: LD_VAR 0 6
32646: PPUSH
32647: CALL_OW 265
32651: PUSH
32652: LD_INT 25
32654: EQUAL
32655: IFFALSE 32676
// points := [ 80 , 65 , 100 ] ;
32657: LD_ADDR_VAR 0 9
32661: PUSH
32662: LD_INT 80
32664: PUSH
32665: LD_INT 65
32667: PUSH
32668: LD_INT 100
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: LIST
32675: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32676: LD_VAR 0 6
32680: PPUSH
32681: CALL_OW 263
32685: PUSH
32686: LD_INT 1
32688: EQUAL
32689: IFFALSE 32724
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32691: LD_ADDR_VAR 0 10
32695: PUSH
32696: LD_VAR 0 10
32700: PUSH
32701: LD_VAR 0 6
32705: PPUSH
32706: CALL_OW 311
32710: PPUSH
32711: LD_INT 3
32713: PPUSH
32714: CALL_OW 259
32718: PUSH
32719: LD_INT 4
32721: MUL
32722: MUL
32723: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32724: LD_VAR 0 6
32728: PPUSH
32729: CALL_OW 263
32733: PUSH
32734: LD_INT 2
32736: EQUAL
32737: IFFALSE 32788
// begin j := IsControledBy ( i ) ;
32739: LD_ADDR_VAR 0 7
32743: PUSH
32744: LD_VAR 0 6
32748: PPUSH
32749: CALL_OW 312
32753: ST_TO_ADDR
// if j then
32754: LD_VAR 0 7
32758: IFFALSE 32788
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32760: LD_ADDR_VAR 0 10
32764: PUSH
32765: LD_VAR 0 10
32769: PUSH
32770: LD_VAR 0 7
32774: PPUSH
32775: LD_INT 3
32777: PPUSH
32778: CALL_OW 259
32782: PUSH
32783: LD_INT 3
32785: MUL
32786: MUL
32787: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32788: LD_VAR 0 6
32792: PPUSH
32793: CALL_OW 264
32797: PUSH
32798: LD_INT 5
32800: PUSH
32801: LD_INT 6
32803: PUSH
32804: LD_INT 46
32806: PUSH
32807: LD_INT 44
32809: PUSH
32810: LD_INT 47
32812: PUSH
32813: LD_INT 45
32815: PUSH
32816: LD_INT 28
32818: PUSH
32819: LD_INT 7
32821: PUSH
32822: LD_INT 27
32824: PUSH
32825: LD_INT 29
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: IN
32840: PUSH
32841: LD_VAR 0 1
32845: PPUSH
32846: LD_INT 52
32848: PPUSH
32849: CALL_OW 321
32853: PUSH
32854: LD_INT 2
32856: EQUAL
32857: AND
32858: IFFALSE 32875
// bpoints := bpoints * 1.2 ;
32860: LD_ADDR_VAR 0 10
32864: PUSH
32865: LD_VAR 0 10
32869: PUSH
32870: LD_REAL  1.20000000000000E+0000
32873: MUL
32874: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32875: LD_VAR 0 6
32879: PPUSH
32880: CALL_OW 264
32884: PUSH
32885: LD_INT 6
32887: PUSH
32888: LD_INT 46
32890: PUSH
32891: LD_INT 47
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: LIST
32898: IN
32899: IFFALSE 32916
// bpoints := bpoints * 1.2 ;
32901: LD_ADDR_VAR 0 10
32905: PUSH
32906: LD_VAR 0 10
32910: PUSH
32911: LD_REAL  1.20000000000000E+0000
32914: MUL
32915: ST_TO_ADDR
// end ; unit_building :
32916: GO 32930
32918: LD_INT 3
32920: DOUBLE
32921: EQUAL
32922: IFTRUE 32926
32924: GO 32929
32926: POP
// ; end ;
32927: GO 32930
32929: POP
// for j = 1 to 3 do
32930: LD_ADDR_VAR 0 7
32934: PUSH
32935: DOUBLE
32936: LD_INT 1
32938: DEC
32939: ST_TO_ADDR
32940: LD_INT 3
32942: PUSH
32943: FOR_TO
32944: IFFALSE 32997
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32946: LD_ADDR_VAR 0 5
32950: PUSH
32951: LD_VAR 0 5
32955: PPUSH
32956: LD_VAR 0 7
32960: PPUSH
32961: LD_VAR 0 5
32965: PUSH
32966: LD_VAR 0 7
32970: ARRAY
32971: PUSH
32972: LD_VAR 0 9
32976: PUSH
32977: LD_VAR 0 7
32981: ARRAY
32982: PUSH
32983: LD_VAR 0 10
32987: MUL
32988: PLUS
32989: PPUSH
32990: CALL_OW 1
32994: ST_TO_ADDR
32995: GO 32943
32997: POP
32998: POP
// end ;
32999: GO 31476
33001: POP
33002: POP
// result := Replace ( result , 4 , tmp ) ;
33003: LD_ADDR_VAR 0 5
33007: PUSH
33008: LD_VAR 0 5
33012: PPUSH
33013: LD_INT 4
33015: PPUSH
33016: LD_VAR 0 8
33020: PPUSH
33021: CALL_OW 1
33025: ST_TO_ADDR
// end ;
33026: LD_VAR 0 5
33030: RET
// export function DangerAtRange ( unit , range ) ; begin
33031: LD_INT 0
33033: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33034: LD_ADDR_VAR 0 3
33038: PUSH
33039: LD_VAR 0 1
33043: PPUSH
33044: CALL_OW 255
33048: PPUSH
33049: LD_VAR 0 1
33053: PPUSH
33054: CALL_OW 250
33058: PPUSH
33059: LD_VAR 0 1
33063: PPUSH
33064: CALL_OW 251
33068: PPUSH
33069: LD_VAR 0 2
33073: PPUSH
33074: CALL 31328 0 4
33078: ST_TO_ADDR
// end ;
33079: LD_VAR 0 3
33083: RET
// export function DangerInArea ( side , area ) ; begin
33084: LD_INT 0
33086: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33087: LD_ADDR_VAR 0 3
33091: PUSH
33092: LD_VAR 0 2
33096: PPUSH
33097: LD_INT 81
33099: PUSH
33100: LD_VAR 0 1
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PPUSH
33109: CALL_OW 70
33113: ST_TO_ADDR
// end ;
33114: LD_VAR 0 3
33118: RET
// export function IsExtension ( b ) ; begin
33119: LD_INT 0
33121: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33122: LD_ADDR_VAR 0 2
33126: PUSH
33127: LD_VAR 0 1
33131: PUSH
33132: LD_INT 23
33134: PUSH
33135: LD_INT 20
33137: PUSH
33138: LD_INT 22
33140: PUSH
33141: LD_INT 17
33143: PUSH
33144: LD_INT 24
33146: PUSH
33147: LD_INT 21
33149: PUSH
33150: LD_INT 19
33152: PUSH
33153: LD_INT 16
33155: PUSH
33156: LD_INT 25
33158: PUSH
33159: LD_INT 18
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: IN
33174: ST_TO_ADDR
// end ;
33175: LD_VAR 0 2
33179: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33180: LD_INT 0
33182: PPUSH
33183: PPUSH
33184: PPUSH
// result := [ ] ;
33185: LD_ADDR_VAR 0 4
33189: PUSH
33190: EMPTY
33191: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33192: LD_ADDR_VAR 0 5
33196: PUSH
33197: LD_VAR 0 2
33201: PPUSH
33202: LD_INT 21
33204: PUSH
33205: LD_INT 3
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PPUSH
33212: CALL_OW 70
33216: ST_TO_ADDR
// if not tmp then
33217: LD_VAR 0 5
33221: NOT
33222: IFFALSE 33226
// exit ;
33224: GO 33290
// if checkLink then
33226: LD_VAR 0 3
33230: IFFALSE 33280
// begin for i in tmp do
33232: LD_ADDR_VAR 0 6
33236: PUSH
33237: LD_VAR 0 5
33241: PUSH
33242: FOR_IN
33243: IFFALSE 33278
// if GetBase ( i ) <> base then
33245: LD_VAR 0 6
33249: PPUSH
33250: CALL_OW 274
33254: PUSH
33255: LD_VAR 0 1
33259: NONEQUAL
33260: IFFALSE 33276
// ComLinkToBase ( base , i ) ;
33262: LD_VAR 0 1
33266: PPUSH
33267: LD_VAR 0 6
33271: PPUSH
33272: CALL_OW 169
33276: GO 33242
33278: POP
33279: POP
// end ; result := tmp ;
33280: LD_ADDR_VAR 0 4
33284: PUSH
33285: LD_VAR 0 5
33289: ST_TO_ADDR
// end ;
33290: LD_VAR 0 4
33294: RET
// export function ComComplete ( units , b ) ; var i ; begin
33295: LD_INT 0
33297: PPUSH
33298: PPUSH
// if not units then
33299: LD_VAR 0 1
33303: NOT
33304: IFFALSE 33308
// exit ;
33306: GO 33398
// for i in units do
33308: LD_ADDR_VAR 0 4
33312: PUSH
33313: LD_VAR 0 1
33317: PUSH
33318: FOR_IN
33319: IFFALSE 33396
// if BuildingStatus ( b ) = bs_build then
33321: LD_VAR 0 2
33325: PPUSH
33326: CALL_OW 461
33330: PUSH
33331: LD_INT 1
33333: EQUAL
33334: IFFALSE 33394
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33336: LD_VAR 0 4
33340: PPUSH
33341: LD_STRING h
33343: PUSH
33344: LD_VAR 0 2
33348: PPUSH
33349: CALL_OW 250
33353: PUSH
33354: LD_VAR 0 2
33358: PPUSH
33359: CALL_OW 251
33363: PUSH
33364: LD_VAR 0 2
33368: PUSH
33369: LD_INT 0
33371: PUSH
33372: LD_INT 0
33374: PUSH
33375: LD_INT 0
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: PUSH
33387: EMPTY
33388: LIST
33389: PPUSH
33390: CALL_OW 446
33394: GO 33318
33396: POP
33397: POP
// end ;
33398: LD_VAR 0 3
33402: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33403: LD_INT 0
33405: PPUSH
33406: PPUSH
33407: PPUSH
33408: PPUSH
33409: PPUSH
33410: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33411: LD_VAR 0 1
33415: NOT
33416: PUSH
33417: LD_VAR 0 1
33421: PPUSH
33422: CALL_OW 263
33426: PUSH
33427: LD_INT 2
33429: NONEQUAL
33430: OR
33431: IFFALSE 33435
// exit ;
33433: GO 33751
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33435: LD_ADDR_VAR 0 6
33439: PUSH
33440: LD_INT 22
33442: PUSH
33443: LD_VAR 0 1
33447: PPUSH
33448: CALL_OW 255
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 2
33459: PUSH
33460: LD_INT 30
33462: PUSH
33463: LD_INT 36
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 34
33472: PUSH
33473: LD_INT 31
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: LIST
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PPUSH
33489: CALL_OW 69
33493: ST_TO_ADDR
// if not tmp then
33494: LD_VAR 0 6
33498: NOT
33499: IFFALSE 33503
// exit ;
33501: GO 33751
// result := [ ] ;
33503: LD_ADDR_VAR 0 2
33507: PUSH
33508: EMPTY
33509: ST_TO_ADDR
// for i in tmp do
33510: LD_ADDR_VAR 0 3
33514: PUSH
33515: LD_VAR 0 6
33519: PUSH
33520: FOR_IN
33521: IFFALSE 33592
// begin t := UnitsInside ( i ) ;
33523: LD_ADDR_VAR 0 4
33527: PUSH
33528: LD_VAR 0 3
33532: PPUSH
33533: CALL_OW 313
33537: ST_TO_ADDR
// if t then
33538: LD_VAR 0 4
33542: IFFALSE 33590
// for j in t do
33544: LD_ADDR_VAR 0 7
33548: PUSH
33549: LD_VAR 0 4
33553: PUSH
33554: FOR_IN
33555: IFFALSE 33588
// result := Replace ( result , result + 1 , j ) ;
33557: LD_ADDR_VAR 0 2
33561: PUSH
33562: LD_VAR 0 2
33566: PPUSH
33567: LD_VAR 0 2
33571: PUSH
33572: LD_INT 1
33574: PLUS
33575: PPUSH
33576: LD_VAR 0 7
33580: PPUSH
33581: CALL_OW 1
33585: ST_TO_ADDR
33586: GO 33554
33588: POP
33589: POP
// end ;
33590: GO 33520
33592: POP
33593: POP
// if not result then
33594: LD_VAR 0 2
33598: NOT
33599: IFFALSE 33603
// exit ;
33601: GO 33751
// mech := result [ 1 ] ;
33603: LD_ADDR_VAR 0 5
33607: PUSH
33608: LD_VAR 0 2
33612: PUSH
33613: LD_INT 1
33615: ARRAY
33616: ST_TO_ADDR
// if result > 1 then
33617: LD_VAR 0 2
33621: PUSH
33622: LD_INT 1
33624: GREATER
33625: IFFALSE 33737
// begin for i = 2 to result do
33627: LD_ADDR_VAR 0 3
33631: PUSH
33632: DOUBLE
33633: LD_INT 2
33635: DEC
33636: ST_TO_ADDR
33637: LD_VAR 0 2
33641: PUSH
33642: FOR_TO
33643: IFFALSE 33735
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33645: LD_ADDR_VAR 0 4
33649: PUSH
33650: LD_VAR 0 2
33654: PUSH
33655: LD_VAR 0 3
33659: ARRAY
33660: PPUSH
33661: LD_INT 3
33663: PPUSH
33664: CALL_OW 259
33668: PUSH
33669: LD_VAR 0 2
33673: PUSH
33674: LD_VAR 0 3
33678: ARRAY
33679: PPUSH
33680: CALL_OW 432
33684: MINUS
33685: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33686: LD_VAR 0 4
33690: PUSH
33691: LD_VAR 0 5
33695: PPUSH
33696: LD_INT 3
33698: PPUSH
33699: CALL_OW 259
33703: PUSH
33704: LD_VAR 0 5
33708: PPUSH
33709: CALL_OW 432
33713: MINUS
33714: GREATEREQUAL
33715: IFFALSE 33733
// mech := result [ i ] ;
33717: LD_ADDR_VAR 0 5
33721: PUSH
33722: LD_VAR 0 2
33726: PUSH
33727: LD_VAR 0 3
33731: ARRAY
33732: ST_TO_ADDR
// end ;
33733: GO 33642
33735: POP
33736: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33737: LD_VAR 0 1
33741: PPUSH
33742: LD_VAR 0 5
33746: PPUSH
33747: CALL_OW 135
// end ;
33751: LD_VAR 0 2
33755: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33756: LD_INT 0
33758: PPUSH
33759: PPUSH
33760: PPUSH
33761: PPUSH
33762: PPUSH
33763: PPUSH
33764: PPUSH
33765: PPUSH
33766: PPUSH
33767: PPUSH
33768: PPUSH
33769: PPUSH
33770: PPUSH
// result := [ ] ;
33771: LD_ADDR_VAR 0 7
33775: PUSH
33776: EMPTY
33777: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33778: LD_VAR 0 1
33782: PPUSH
33783: CALL_OW 266
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: LD_INT 1
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: IN
33798: NOT
33799: IFFALSE 33803
// exit ;
33801: GO 35437
// if name then
33803: LD_VAR 0 3
33807: IFFALSE 33823
// SetBName ( base_dep , name ) ;
33809: LD_VAR 0 1
33813: PPUSH
33814: LD_VAR 0 3
33818: PPUSH
33819: CALL_OW 500
// base := GetBase ( base_dep ) ;
33823: LD_ADDR_VAR 0 15
33827: PUSH
33828: LD_VAR 0 1
33832: PPUSH
33833: CALL_OW 274
33837: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33838: LD_ADDR_VAR 0 16
33842: PUSH
33843: LD_VAR 0 1
33847: PPUSH
33848: CALL_OW 255
33852: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33853: LD_ADDR_VAR 0 17
33857: PUSH
33858: LD_VAR 0 1
33862: PPUSH
33863: CALL_OW 248
33867: ST_TO_ADDR
// if sources then
33868: LD_VAR 0 5
33872: IFFALSE 33919
// for i = 1 to 3 do
33874: LD_ADDR_VAR 0 8
33878: PUSH
33879: DOUBLE
33880: LD_INT 1
33882: DEC
33883: ST_TO_ADDR
33884: LD_INT 3
33886: PUSH
33887: FOR_TO
33888: IFFALSE 33917
// AddResourceType ( base , i , sources [ i ] ) ;
33890: LD_VAR 0 15
33894: PPUSH
33895: LD_VAR 0 8
33899: PPUSH
33900: LD_VAR 0 5
33904: PUSH
33905: LD_VAR 0 8
33909: ARRAY
33910: PPUSH
33911: CALL_OW 276
33915: GO 33887
33917: POP
33918: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33919: LD_ADDR_VAR 0 18
33923: PUSH
33924: LD_VAR 0 15
33928: PPUSH
33929: LD_VAR 0 2
33933: PPUSH
33934: LD_INT 1
33936: PPUSH
33937: CALL 33180 0 3
33941: ST_TO_ADDR
// InitHc ;
33942: CALL_OW 19
// InitUc ;
33946: CALL_OW 18
// uc_side := side ;
33950: LD_ADDR_OWVAR 20
33954: PUSH
33955: LD_VAR 0 16
33959: ST_TO_ADDR
// uc_nation := nation ;
33960: LD_ADDR_OWVAR 21
33964: PUSH
33965: LD_VAR 0 17
33969: ST_TO_ADDR
// if buildings then
33970: LD_VAR 0 18
33974: IFFALSE 35296
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33976: LD_ADDR_VAR 0 19
33980: PUSH
33981: LD_VAR 0 18
33985: PPUSH
33986: LD_INT 2
33988: PUSH
33989: LD_INT 30
33991: PUSH
33992: LD_INT 29
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 30
34001: PUSH
34002: LD_INT 30
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: LIST
34013: PPUSH
34014: CALL_OW 72
34018: ST_TO_ADDR
// if tmp then
34019: LD_VAR 0 19
34023: IFFALSE 34071
// for i in tmp do
34025: LD_ADDR_VAR 0 8
34029: PUSH
34030: LD_VAR 0 19
34034: PUSH
34035: FOR_IN
34036: IFFALSE 34069
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34038: LD_VAR 0 8
34042: PPUSH
34043: CALL_OW 250
34047: PPUSH
34048: LD_VAR 0 8
34052: PPUSH
34053: CALL_OW 251
34057: PPUSH
34058: LD_VAR 0 16
34062: PPUSH
34063: CALL_OW 441
34067: GO 34035
34069: POP
34070: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34071: LD_VAR 0 18
34075: PPUSH
34076: LD_INT 2
34078: PUSH
34079: LD_INT 30
34081: PUSH
34082: LD_INT 32
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 30
34091: PUSH
34092: LD_INT 33
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: LIST
34103: PPUSH
34104: CALL_OW 72
34108: IFFALSE 34196
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34110: LD_ADDR_VAR 0 8
34114: PUSH
34115: LD_VAR 0 18
34119: PPUSH
34120: LD_INT 2
34122: PUSH
34123: LD_INT 30
34125: PUSH
34126: LD_INT 32
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 30
34135: PUSH
34136: LD_INT 33
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: LIST
34147: PPUSH
34148: CALL_OW 72
34152: PUSH
34153: FOR_IN
34154: IFFALSE 34194
// begin if not GetBWeapon ( i ) then
34156: LD_VAR 0 8
34160: PPUSH
34161: CALL_OW 269
34165: NOT
34166: IFFALSE 34192
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34168: LD_VAR 0 8
34172: PPUSH
34173: LD_VAR 0 8
34177: PPUSH
34178: LD_VAR 0 2
34182: PPUSH
34183: CALL 35442 0 2
34187: PPUSH
34188: CALL_OW 431
// end ;
34192: GO 34153
34194: POP
34195: POP
// end ; for i = 1 to personel do
34196: LD_ADDR_VAR 0 8
34200: PUSH
34201: DOUBLE
34202: LD_INT 1
34204: DEC
34205: ST_TO_ADDR
34206: LD_VAR 0 6
34210: PUSH
34211: FOR_TO
34212: IFFALSE 35276
// begin if i > 4 then
34214: LD_VAR 0 8
34218: PUSH
34219: LD_INT 4
34221: GREATER
34222: IFFALSE 34226
// break ;
34224: GO 35276
// case i of 1 :
34226: LD_VAR 0 8
34230: PUSH
34231: LD_INT 1
34233: DOUBLE
34234: EQUAL
34235: IFTRUE 34239
34237: GO 34319
34239: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34240: LD_ADDR_VAR 0 12
34244: PUSH
34245: LD_VAR 0 18
34249: PPUSH
34250: LD_INT 22
34252: PUSH
34253: LD_VAR 0 16
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 58
34264: PUSH
34265: EMPTY
34266: LIST
34267: PUSH
34268: LD_INT 2
34270: PUSH
34271: LD_INT 30
34273: PUSH
34274: LD_INT 32
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 30
34283: PUSH
34284: LD_INT 4
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 30
34293: PUSH
34294: LD_INT 5
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: LIST
34311: PPUSH
34312: CALL_OW 72
34316: ST_TO_ADDR
34317: GO 34541
34319: LD_INT 2
34321: DOUBLE
34322: EQUAL
34323: IFTRUE 34327
34325: GO 34389
34327: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34328: LD_ADDR_VAR 0 12
34332: PUSH
34333: LD_VAR 0 18
34337: PPUSH
34338: LD_INT 22
34340: PUSH
34341: LD_VAR 0 16
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 2
34352: PUSH
34353: LD_INT 30
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 30
34365: PUSH
34366: LD_INT 1
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: LIST
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PPUSH
34382: CALL_OW 72
34386: ST_TO_ADDR
34387: GO 34541
34389: LD_INT 3
34391: DOUBLE
34392: EQUAL
34393: IFTRUE 34397
34395: GO 34459
34397: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34398: LD_ADDR_VAR 0 12
34402: PUSH
34403: LD_VAR 0 18
34407: PPUSH
34408: LD_INT 22
34410: PUSH
34411: LD_VAR 0 16
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 2
34422: PUSH
34423: LD_INT 30
34425: PUSH
34426: LD_INT 2
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 30
34435: PUSH
34436: LD_INT 3
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: LIST
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PPUSH
34452: CALL_OW 72
34456: ST_TO_ADDR
34457: GO 34541
34459: LD_INT 4
34461: DOUBLE
34462: EQUAL
34463: IFTRUE 34467
34465: GO 34540
34467: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34468: LD_ADDR_VAR 0 12
34472: PUSH
34473: LD_VAR 0 18
34477: PPUSH
34478: LD_INT 22
34480: PUSH
34481: LD_VAR 0 16
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 2
34492: PUSH
34493: LD_INT 30
34495: PUSH
34496: LD_INT 6
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 30
34505: PUSH
34506: LD_INT 7
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 30
34515: PUSH
34516: LD_INT 8
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PPUSH
34533: CALL_OW 72
34537: ST_TO_ADDR
34538: GO 34541
34540: POP
// if i = 1 then
34541: LD_VAR 0 8
34545: PUSH
34546: LD_INT 1
34548: EQUAL
34549: IFFALSE 34660
// begin tmp := [ ] ;
34551: LD_ADDR_VAR 0 19
34555: PUSH
34556: EMPTY
34557: ST_TO_ADDR
// for j in f do
34558: LD_ADDR_VAR 0 9
34562: PUSH
34563: LD_VAR 0 12
34567: PUSH
34568: FOR_IN
34569: IFFALSE 34642
// if GetBType ( j ) = b_bunker then
34571: LD_VAR 0 9
34575: PPUSH
34576: CALL_OW 266
34580: PUSH
34581: LD_INT 32
34583: EQUAL
34584: IFFALSE 34611
// tmp := Insert ( tmp , 1 , j ) else
34586: LD_ADDR_VAR 0 19
34590: PUSH
34591: LD_VAR 0 19
34595: PPUSH
34596: LD_INT 1
34598: PPUSH
34599: LD_VAR 0 9
34603: PPUSH
34604: CALL_OW 2
34608: ST_TO_ADDR
34609: GO 34640
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34611: LD_ADDR_VAR 0 19
34615: PUSH
34616: LD_VAR 0 19
34620: PPUSH
34621: LD_VAR 0 19
34625: PUSH
34626: LD_INT 1
34628: PLUS
34629: PPUSH
34630: LD_VAR 0 9
34634: PPUSH
34635: CALL_OW 2
34639: ST_TO_ADDR
34640: GO 34568
34642: POP
34643: POP
// if tmp then
34644: LD_VAR 0 19
34648: IFFALSE 34660
// f := tmp ;
34650: LD_ADDR_VAR 0 12
34654: PUSH
34655: LD_VAR 0 19
34659: ST_TO_ADDR
// end ; x := personel [ i ] ;
34660: LD_ADDR_VAR 0 13
34664: PUSH
34665: LD_VAR 0 6
34669: PUSH
34670: LD_VAR 0 8
34674: ARRAY
34675: ST_TO_ADDR
// if x = - 1 then
34676: LD_VAR 0 13
34680: PUSH
34681: LD_INT 1
34683: NEG
34684: EQUAL
34685: IFFALSE 34894
// begin for j in f do
34687: LD_ADDR_VAR 0 9
34691: PUSH
34692: LD_VAR 0 12
34696: PUSH
34697: FOR_IN
34698: IFFALSE 34890
// repeat InitHc ;
34700: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34704: LD_VAR 0 9
34708: PPUSH
34709: CALL_OW 266
34713: PUSH
34714: LD_INT 5
34716: EQUAL
34717: IFFALSE 34787
// begin if UnitsInside ( j ) < 3 then
34719: LD_VAR 0 9
34723: PPUSH
34724: CALL_OW 313
34728: PUSH
34729: LD_INT 3
34731: LESS
34732: IFFALSE 34768
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34734: LD_INT 0
34736: PPUSH
34737: LD_INT 5
34739: PUSH
34740: LD_INT 8
34742: PUSH
34743: LD_INT 9
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: LIST
34750: PUSH
34751: LD_VAR 0 17
34755: ARRAY
34756: PPUSH
34757: LD_VAR 0 4
34761: PPUSH
34762: CALL_OW 380
34766: GO 34785
// PrepareHuman ( false , i , skill ) ;
34768: LD_INT 0
34770: PPUSH
34771: LD_VAR 0 8
34775: PPUSH
34776: LD_VAR 0 4
34780: PPUSH
34781: CALL_OW 380
// end else
34785: GO 34804
// PrepareHuman ( false , i , skill ) ;
34787: LD_INT 0
34789: PPUSH
34790: LD_VAR 0 8
34794: PPUSH
34795: LD_VAR 0 4
34799: PPUSH
34800: CALL_OW 380
// un := CreateHuman ;
34804: LD_ADDR_VAR 0 14
34808: PUSH
34809: CALL_OW 44
34813: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34814: LD_ADDR_VAR 0 7
34818: PUSH
34819: LD_VAR 0 7
34823: PPUSH
34824: LD_INT 1
34826: PPUSH
34827: LD_VAR 0 14
34831: PPUSH
34832: CALL_OW 2
34836: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34837: LD_VAR 0 14
34841: PPUSH
34842: LD_VAR 0 9
34846: PPUSH
34847: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34851: LD_VAR 0 9
34855: PPUSH
34856: CALL_OW 313
34860: PUSH
34861: LD_INT 6
34863: EQUAL
34864: PUSH
34865: LD_VAR 0 9
34869: PPUSH
34870: CALL_OW 266
34874: PUSH
34875: LD_INT 32
34877: PUSH
34878: LD_INT 31
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: IN
34885: OR
34886: IFFALSE 34700
34888: GO 34697
34890: POP
34891: POP
// end else
34892: GO 35274
// for j = 1 to x do
34894: LD_ADDR_VAR 0 9
34898: PUSH
34899: DOUBLE
34900: LD_INT 1
34902: DEC
34903: ST_TO_ADDR
34904: LD_VAR 0 13
34908: PUSH
34909: FOR_TO
34910: IFFALSE 35272
// begin InitHc ;
34912: CALL_OW 19
// if not f then
34916: LD_VAR 0 12
34920: NOT
34921: IFFALSE 35010
// begin PrepareHuman ( false , i , skill ) ;
34923: LD_INT 0
34925: PPUSH
34926: LD_VAR 0 8
34930: PPUSH
34931: LD_VAR 0 4
34935: PPUSH
34936: CALL_OW 380
// un := CreateHuman ;
34940: LD_ADDR_VAR 0 14
34944: PUSH
34945: CALL_OW 44
34949: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34950: LD_ADDR_VAR 0 7
34954: PUSH
34955: LD_VAR 0 7
34959: PPUSH
34960: LD_INT 1
34962: PPUSH
34963: LD_VAR 0 14
34967: PPUSH
34968: CALL_OW 2
34972: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34973: LD_VAR 0 14
34977: PPUSH
34978: LD_VAR 0 1
34982: PPUSH
34983: CALL_OW 250
34987: PPUSH
34988: LD_VAR 0 1
34992: PPUSH
34993: CALL_OW 251
34997: PPUSH
34998: LD_INT 10
35000: PPUSH
35001: LD_INT 0
35003: PPUSH
35004: CALL_OW 50
// continue ;
35008: GO 34909
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35010: LD_VAR 0 12
35014: PUSH
35015: LD_INT 1
35017: ARRAY
35018: PPUSH
35019: CALL_OW 313
35023: PUSH
35024: LD_VAR 0 12
35028: PUSH
35029: LD_INT 1
35031: ARRAY
35032: PPUSH
35033: CALL_OW 266
35037: PUSH
35038: LD_INT 32
35040: PUSH
35041: LD_INT 31
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: IN
35048: AND
35049: PUSH
35050: LD_VAR 0 12
35054: PUSH
35055: LD_INT 1
35057: ARRAY
35058: PPUSH
35059: CALL_OW 313
35063: PUSH
35064: LD_INT 6
35066: EQUAL
35067: OR
35068: IFFALSE 35088
// f := Delete ( f , 1 ) ;
35070: LD_ADDR_VAR 0 12
35074: PUSH
35075: LD_VAR 0 12
35079: PPUSH
35080: LD_INT 1
35082: PPUSH
35083: CALL_OW 3
35087: ST_TO_ADDR
// if not f then
35088: LD_VAR 0 12
35092: NOT
35093: IFFALSE 35111
// begin x := x + 2 ;
35095: LD_ADDR_VAR 0 13
35099: PUSH
35100: LD_VAR 0 13
35104: PUSH
35105: LD_INT 2
35107: PLUS
35108: ST_TO_ADDR
// continue ;
35109: GO 34909
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35111: LD_VAR 0 12
35115: PUSH
35116: LD_INT 1
35118: ARRAY
35119: PPUSH
35120: CALL_OW 266
35124: PUSH
35125: LD_INT 5
35127: EQUAL
35128: IFFALSE 35202
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35130: LD_VAR 0 12
35134: PUSH
35135: LD_INT 1
35137: ARRAY
35138: PPUSH
35139: CALL_OW 313
35143: PUSH
35144: LD_INT 3
35146: LESS
35147: IFFALSE 35183
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35149: LD_INT 0
35151: PPUSH
35152: LD_INT 5
35154: PUSH
35155: LD_INT 8
35157: PUSH
35158: LD_INT 9
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: LIST
35165: PUSH
35166: LD_VAR 0 17
35170: ARRAY
35171: PPUSH
35172: LD_VAR 0 4
35176: PPUSH
35177: CALL_OW 380
35181: GO 35200
// PrepareHuman ( false , i , skill ) ;
35183: LD_INT 0
35185: PPUSH
35186: LD_VAR 0 8
35190: PPUSH
35191: LD_VAR 0 4
35195: PPUSH
35196: CALL_OW 380
// end else
35200: GO 35219
// PrepareHuman ( false , i , skill ) ;
35202: LD_INT 0
35204: PPUSH
35205: LD_VAR 0 8
35209: PPUSH
35210: LD_VAR 0 4
35214: PPUSH
35215: CALL_OW 380
// un := CreateHuman ;
35219: LD_ADDR_VAR 0 14
35223: PUSH
35224: CALL_OW 44
35228: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35229: LD_ADDR_VAR 0 7
35233: PUSH
35234: LD_VAR 0 7
35238: PPUSH
35239: LD_INT 1
35241: PPUSH
35242: LD_VAR 0 14
35246: PPUSH
35247: CALL_OW 2
35251: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35252: LD_VAR 0 14
35256: PPUSH
35257: LD_VAR 0 12
35261: PUSH
35262: LD_INT 1
35264: ARRAY
35265: PPUSH
35266: CALL_OW 52
// end ;
35270: GO 34909
35272: POP
35273: POP
// end ;
35274: GO 34211
35276: POP
35277: POP
// result := result ^ buildings ;
35278: LD_ADDR_VAR 0 7
35282: PUSH
35283: LD_VAR 0 7
35287: PUSH
35288: LD_VAR 0 18
35292: ADD
35293: ST_TO_ADDR
// end else
35294: GO 35437
// begin for i = 1 to personel do
35296: LD_ADDR_VAR 0 8
35300: PUSH
35301: DOUBLE
35302: LD_INT 1
35304: DEC
35305: ST_TO_ADDR
35306: LD_VAR 0 6
35310: PUSH
35311: FOR_TO
35312: IFFALSE 35435
// begin if i > 4 then
35314: LD_VAR 0 8
35318: PUSH
35319: LD_INT 4
35321: GREATER
35322: IFFALSE 35326
// break ;
35324: GO 35435
// x := personel [ i ] ;
35326: LD_ADDR_VAR 0 13
35330: PUSH
35331: LD_VAR 0 6
35335: PUSH
35336: LD_VAR 0 8
35340: ARRAY
35341: ST_TO_ADDR
// if x = - 1 then
35342: LD_VAR 0 13
35346: PUSH
35347: LD_INT 1
35349: NEG
35350: EQUAL
35351: IFFALSE 35355
// continue ;
35353: GO 35311
// PrepareHuman ( false , i , skill ) ;
35355: LD_INT 0
35357: PPUSH
35358: LD_VAR 0 8
35362: PPUSH
35363: LD_VAR 0 4
35367: PPUSH
35368: CALL_OW 380
// un := CreateHuman ;
35372: LD_ADDR_VAR 0 14
35376: PUSH
35377: CALL_OW 44
35381: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35382: LD_VAR 0 14
35386: PPUSH
35387: LD_VAR 0 1
35391: PPUSH
35392: CALL_OW 250
35396: PPUSH
35397: LD_VAR 0 1
35401: PPUSH
35402: CALL_OW 251
35406: PPUSH
35407: LD_INT 10
35409: PPUSH
35410: LD_INT 0
35412: PPUSH
35413: CALL_OW 50
// result := result ^ un ;
35417: LD_ADDR_VAR 0 7
35421: PUSH
35422: LD_VAR 0 7
35426: PUSH
35427: LD_VAR 0 14
35431: ADD
35432: ST_TO_ADDR
// end ;
35433: GO 35311
35435: POP
35436: POP
// end ; end ;
35437: LD_VAR 0 7
35441: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35442: LD_INT 0
35444: PPUSH
35445: PPUSH
35446: PPUSH
35447: PPUSH
35448: PPUSH
35449: PPUSH
35450: PPUSH
35451: PPUSH
35452: PPUSH
35453: PPUSH
35454: PPUSH
35455: PPUSH
35456: PPUSH
35457: PPUSH
35458: PPUSH
35459: PPUSH
// result := false ;
35460: LD_ADDR_VAR 0 3
35464: PUSH
35465: LD_INT 0
35467: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35468: LD_VAR 0 1
35472: NOT
35473: PUSH
35474: LD_VAR 0 1
35478: PPUSH
35479: CALL_OW 266
35483: PUSH
35484: LD_INT 32
35486: PUSH
35487: LD_INT 33
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: IN
35494: NOT
35495: OR
35496: IFFALSE 35500
// exit ;
35498: GO 36609
// nat := GetNation ( tower ) ;
35500: LD_ADDR_VAR 0 12
35504: PUSH
35505: LD_VAR 0 1
35509: PPUSH
35510: CALL_OW 248
35514: ST_TO_ADDR
// side := GetSide ( tower ) ;
35515: LD_ADDR_VAR 0 16
35519: PUSH
35520: LD_VAR 0 1
35524: PPUSH
35525: CALL_OW 255
35529: ST_TO_ADDR
// x := GetX ( tower ) ;
35530: LD_ADDR_VAR 0 10
35534: PUSH
35535: LD_VAR 0 1
35539: PPUSH
35540: CALL_OW 250
35544: ST_TO_ADDR
// y := GetY ( tower ) ;
35545: LD_ADDR_VAR 0 11
35549: PUSH
35550: LD_VAR 0 1
35554: PPUSH
35555: CALL_OW 251
35559: ST_TO_ADDR
// if not x or not y then
35560: LD_VAR 0 10
35564: NOT
35565: PUSH
35566: LD_VAR 0 11
35570: NOT
35571: OR
35572: IFFALSE 35576
// exit ;
35574: GO 36609
// weapon := 0 ;
35576: LD_ADDR_VAR 0 18
35580: PUSH
35581: LD_INT 0
35583: ST_TO_ADDR
// fac_list := [ ] ;
35584: LD_ADDR_VAR 0 17
35588: PUSH
35589: EMPTY
35590: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35591: LD_ADDR_VAR 0 6
35595: PUSH
35596: LD_VAR 0 1
35600: PPUSH
35601: CALL_OW 274
35605: PPUSH
35606: LD_VAR 0 2
35610: PPUSH
35611: LD_INT 0
35613: PPUSH
35614: CALL 33180 0 3
35618: PPUSH
35619: LD_INT 30
35621: PUSH
35622: LD_INT 3
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PPUSH
35629: CALL_OW 72
35633: ST_TO_ADDR
// if not factories then
35634: LD_VAR 0 6
35638: NOT
35639: IFFALSE 35643
// exit ;
35641: GO 36609
// for i in factories do
35643: LD_ADDR_VAR 0 8
35647: PUSH
35648: LD_VAR 0 6
35652: PUSH
35653: FOR_IN
35654: IFFALSE 35679
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35656: LD_ADDR_VAR 0 17
35660: PUSH
35661: LD_VAR 0 17
35665: PUSH
35666: LD_VAR 0 8
35670: PPUSH
35671: CALL_OW 478
35675: UNION
35676: ST_TO_ADDR
35677: GO 35653
35679: POP
35680: POP
// if not fac_list then
35681: LD_VAR 0 17
35685: NOT
35686: IFFALSE 35690
// exit ;
35688: GO 36609
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35690: LD_ADDR_VAR 0 5
35694: PUSH
35695: LD_INT 4
35697: PUSH
35698: LD_INT 5
35700: PUSH
35701: LD_INT 9
35703: PUSH
35704: LD_INT 10
35706: PUSH
35707: LD_INT 6
35709: PUSH
35710: LD_INT 7
35712: PUSH
35713: LD_INT 11
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 27
35727: PUSH
35728: LD_INT 28
35730: PUSH
35731: LD_INT 26
35733: PUSH
35734: LD_INT 30
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 43
35745: PUSH
35746: LD_INT 44
35748: PUSH
35749: LD_INT 46
35751: PUSH
35752: LD_INT 45
35754: PUSH
35755: LD_INT 47
35757: PUSH
35758: LD_INT 49
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: LIST
35773: PUSH
35774: LD_VAR 0 12
35778: ARRAY
35779: ST_TO_ADDR
// list := list isect fac_list ;
35780: LD_ADDR_VAR 0 5
35784: PUSH
35785: LD_VAR 0 5
35789: PUSH
35790: LD_VAR 0 17
35794: ISECT
35795: ST_TO_ADDR
// if not list then
35796: LD_VAR 0 5
35800: NOT
35801: IFFALSE 35805
// exit ;
35803: GO 36609
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35805: LD_VAR 0 12
35809: PUSH
35810: LD_INT 3
35812: EQUAL
35813: PUSH
35814: LD_INT 49
35816: PUSH
35817: LD_VAR 0 5
35821: IN
35822: AND
35823: PUSH
35824: LD_INT 31
35826: PPUSH
35827: LD_VAR 0 16
35831: PPUSH
35832: CALL_OW 321
35836: PUSH
35837: LD_INT 2
35839: EQUAL
35840: AND
35841: IFFALSE 35901
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35843: LD_INT 22
35845: PUSH
35846: LD_VAR 0 16
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 35
35857: PUSH
35858: LD_INT 49
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 91
35867: PUSH
35868: LD_VAR 0 1
35872: PUSH
35873: LD_INT 10
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: LIST
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: LIST
35885: PPUSH
35886: CALL_OW 69
35890: NOT
35891: IFFALSE 35901
// weapon := ru_time_lapser ;
35893: LD_ADDR_VAR 0 18
35897: PUSH
35898: LD_INT 49
35900: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35901: LD_VAR 0 12
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: LD_INT 2
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: IN
35916: PUSH
35917: LD_INT 11
35919: PUSH
35920: LD_VAR 0 5
35924: IN
35925: PUSH
35926: LD_INT 30
35928: PUSH
35929: LD_VAR 0 5
35933: IN
35934: OR
35935: AND
35936: PUSH
35937: LD_INT 6
35939: PPUSH
35940: LD_VAR 0 16
35944: PPUSH
35945: CALL_OW 321
35949: PUSH
35950: LD_INT 2
35952: EQUAL
35953: AND
35954: IFFALSE 36119
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35956: LD_INT 22
35958: PUSH
35959: LD_VAR 0 16
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 2
35970: PUSH
35971: LD_INT 35
35973: PUSH
35974: LD_INT 11
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 35
35983: PUSH
35984: LD_INT 30
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 91
35998: PUSH
35999: LD_VAR 0 1
36003: PUSH
36004: LD_INT 18
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: LIST
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: LIST
36016: PPUSH
36017: CALL_OW 69
36021: NOT
36022: PUSH
36023: LD_INT 22
36025: PUSH
36026: LD_VAR 0 16
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 2
36037: PUSH
36038: LD_INT 30
36040: PUSH
36041: LD_INT 32
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 30
36050: PUSH
36051: LD_INT 33
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 91
36065: PUSH
36066: LD_VAR 0 1
36070: PUSH
36071: LD_INT 12
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: LIST
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: LIST
36083: PUSH
36084: EMPTY
36085: LIST
36086: PPUSH
36087: CALL_OW 69
36091: PUSH
36092: LD_INT 2
36094: GREATER
36095: AND
36096: IFFALSE 36119
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36098: LD_ADDR_VAR 0 18
36102: PUSH
36103: LD_INT 11
36105: PUSH
36106: LD_INT 30
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_VAR 0 12
36117: ARRAY
36118: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36119: LD_VAR 0 18
36123: NOT
36124: PUSH
36125: LD_INT 40
36127: PPUSH
36128: LD_VAR 0 16
36132: PPUSH
36133: CALL_OW 321
36137: PUSH
36138: LD_INT 2
36140: EQUAL
36141: AND
36142: PUSH
36143: LD_INT 7
36145: PUSH
36146: LD_VAR 0 5
36150: IN
36151: PUSH
36152: LD_INT 28
36154: PUSH
36155: LD_VAR 0 5
36159: IN
36160: OR
36161: PUSH
36162: LD_INT 45
36164: PUSH
36165: LD_VAR 0 5
36169: IN
36170: OR
36171: AND
36172: IFFALSE 36426
// begin hex := GetHexInfo ( x , y ) ;
36174: LD_ADDR_VAR 0 4
36178: PUSH
36179: LD_VAR 0 10
36183: PPUSH
36184: LD_VAR 0 11
36188: PPUSH
36189: CALL_OW 546
36193: ST_TO_ADDR
// if hex [ 1 ] then
36194: LD_VAR 0 4
36198: PUSH
36199: LD_INT 1
36201: ARRAY
36202: IFFALSE 36206
// exit ;
36204: GO 36609
// height := hex [ 2 ] ;
36206: LD_ADDR_VAR 0 15
36210: PUSH
36211: LD_VAR 0 4
36215: PUSH
36216: LD_INT 2
36218: ARRAY
36219: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36220: LD_ADDR_VAR 0 14
36224: PUSH
36225: LD_INT 0
36227: PUSH
36228: LD_INT 2
36230: PUSH
36231: LD_INT 3
36233: PUSH
36234: LD_INT 5
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: ST_TO_ADDR
// for i in tmp do
36243: LD_ADDR_VAR 0 8
36247: PUSH
36248: LD_VAR 0 14
36252: PUSH
36253: FOR_IN
36254: IFFALSE 36424
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36256: LD_ADDR_VAR 0 9
36260: PUSH
36261: LD_VAR 0 10
36265: PPUSH
36266: LD_VAR 0 8
36270: PPUSH
36271: LD_INT 5
36273: PPUSH
36274: CALL_OW 272
36278: PUSH
36279: LD_VAR 0 11
36283: PPUSH
36284: LD_VAR 0 8
36288: PPUSH
36289: LD_INT 5
36291: PPUSH
36292: CALL_OW 273
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36301: LD_VAR 0 9
36305: PUSH
36306: LD_INT 1
36308: ARRAY
36309: PPUSH
36310: LD_VAR 0 9
36314: PUSH
36315: LD_INT 2
36317: ARRAY
36318: PPUSH
36319: CALL_OW 488
36323: IFFALSE 36422
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36325: LD_ADDR_VAR 0 4
36329: PUSH
36330: LD_VAR 0 9
36334: PUSH
36335: LD_INT 1
36337: ARRAY
36338: PPUSH
36339: LD_VAR 0 9
36343: PUSH
36344: LD_INT 2
36346: ARRAY
36347: PPUSH
36348: CALL_OW 546
36352: ST_TO_ADDR
// if hex [ 1 ] then
36353: LD_VAR 0 4
36357: PUSH
36358: LD_INT 1
36360: ARRAY
36361: IFFALSE 36365
// continue ;
36363: GO 36253
// h := hex [ 2 ] ;
36365: LD_ADDR_VAR 0 13
36369: PUSH
36370: LD_VAR 0 4
36374: PUSH
36375: LD_INT 2
36377: ARRAY
36378: ST_TO_ADDR
// if h + 7 < height then
36379: LD_VAR 0 13
36383: PUSH
36384: LD_INT 7
36386: PLUS
36387: PUSH
36388: LD_VAR 0 15
36392: LESS
36393: IFFALSE 36422
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36395: LD_ADDR_VAR 0 18
36399: PUSH
36400: LD_INT 7
36402: PUSH
36403: LD_INT 28
36405: PUSH
36406: LD_INT 45
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: LIST
36413: PUSH
36414: LD_VAR 0 12
36418: ARRAY
36419: ST_TO_ADDR
// break ;
36420: GO 36424
// end ; end ; end ;
36422: GO 36253
36424: POP
36425: POP
// end ; if not weapon then
36426: LD_VAR 0 18
36430: NOT
36431: IFFALSE 36491
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36433: LD_ADDR_VAR 0 5
36437: PUSH
36438: LD_VAR 0 5
36442: PUSH
36443: LD_INT 11
36445: PUSH
36446: LD_INT 30
36448: PUSH
36449: LD_INT 49
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: LIST
36456: DIFF
36457: ST_TO_ADDR
// if not list then
36458: LD_VAR 0 5
36462: NOT
36463: IFFALSE 36467
// exit ;
36465: GO 36609
// weapon := list [ rand ( 1 , list ) ] ;
36467: LD_ADDR_VAR 0 18
36471: PUSH
36472: LD_VAR 0 5
36476: PUSH
36477: LD_INT 1
36479: PPUSH
36480: LD_VAR 0 5
36484: PPUSH
36485: CALL_OW 12
36489: ARRAY
36490: ST_TO_ADDR
// end ; if weapon then
36491: LD_VAR 0 18
36495: IFFALSE 36609
// begin tmp := CostOfWeapon ( weapon ) ;
36497: LD_ADDR_VAR 0 14
36501: PUSH
36502: LD_VAR 0 18
36506: PPUSH
36507: CALL_OW 451
36511: ST_TO_ADDR
// j := GetBase ( tower ) ;
36512: LD_ADDR_VAR 0 9
36516: PUSH
36517: LD_VAR 0 1
36521: PPUSH
36522: CALL_OW 274
36526: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36527: LD_VAR 0 9
36531: PPUSH
36532: LD_INT 1
36534: PPUSH
36535: CALL_OW 275
36539: PUSH
36540: LD_VAR 0 14
36544: PUSH
36545: LD_INT 1
36547: ARRAY
36548: GREATEREQUAL
36549: PUSH
36550: LD_VAR 0 9
36554: PPUSH
36555: LD_INT 2
36557: PPUSH
36558: CALL_OW 275
36562: PUSH
36563: LD_VAR 0 14
36567: PUSH
36568: LD_INT 2
36570: ARRAY
36571: GREATEREQUAL
36572: AND
36573: PUSH
36574: LD_VAR 0 9
36578: PPUSH
36579: LD_INT 3
36581: PPUSH
36582: CALL_OW 275
36586: PUSH
36587: LD_VAR 0 14
36591: PUSH
36592: LD_INT 3
36594: ARRAY
36595: GREATEREQUAL
36596: AND
36597: IFFALSE 36609
// result := weapon ;
36599: LD_ADDR_VAR 0 3
36603: PUSH
36604: LD_VAR 0 18
36608: ST_TO_ADDR
// end ; end ;
36609: LD_VAR 0 3
36613: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36614: LD_INT 0
36616: PPUSH
36617: PPUSH
// result := true ;
36618: LD_ADDR_VAR 0 3
36622: PUSH
36623: LD_INT 1
36625: ST_TO_ADDR
// if array1 = array2 then
36626: LD_VAR 0 1
36630: PUSH
36631: LD_VAR 0 2
36635: EQUAL
36636: IFFALSE 36696
// begin for i = 1 to array1 do
36638: LD_ADDR_VAR 0 4
36642: PUSH
36643: DOUBLE
36644: LD_INT 1
36646: DEC
36647: ST_TO_ADDR
36648: LD_VAR 0 1
36652: PUSH
36653: FOR_TO
36654: IFFALSE 36692
// if array1 [ i ] <> array2 [ i ] then
36656: LD_VAR 0 1
36660: PUSH
36661: LD_VAR 0 4
36665: ARRAY
36666: PUSH
36667: LD_VAR 0 2
36671: PUSH
36672: LD_VAR 0 4
36676: ARRAY
36677: NONEQUAL
36678: IFFALSE 36690
// begin result := false ;
36680: LD_ADDR_VAR 0 3
36684: PUSH
36685: LD_INT 0
36687: ST_TO_ADDR
// break ;
36688: GO 36692
// end ;
36690: GO 36653
36692: POP
36693: POP
// end else
36694: GO 36704
// result := false ;
36696: LD_ADDR_VAR 0 3
36700: PUSH
36701: LD_INT 0
36703: ST_TO_ADDR
// end ;
36704: LD_VAR 0 3
36708: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36709: LD_INT 0
36711: PPUSH
36712: PPUSH
// if not array1 or not array2 then
36713: LD_VAR 0 1
36717: NOT
36718: PUSH
36719: LD_VAR 0 2
36723: NOT
36724: OR
36725: IFFALSE 36729
// exit ;
36727: GO 36793
// result := true ;
36729: LD_ADDR_VAR 0 3
36733: PUSH
36734: LD_INT 1
36736: ST_TO_ADDR
// for i = 1 to array1 do
36737: LD_ADDR_VAR 0 4
36741: PUSH
36742: DOUBLE
36743: LD_INT 1
36745: DEC
36746: ST_TO_ADDR
36747: LD_VAR 0 1
36751: PUSH
36752: FOR_TO
36753: IFFALSE 36791
// if array1 [ i ] <> array2 [ i ] then
36755: LD_VAR 0 1
36759: PUSH
36760: LD_VAR 0 4
36764: ARRAY
36765: PUSH
36766: LD_VAR 0 2
36770: PUSH
36771: LD_VAR 0 4
36775: ARRAY
36776: NONEQUAL
36777: IFFALSE 36789
// begin result := false ;
36779: LD_ADDR_VAR 0 3
36783: PUSH
36784: LD_INT 0
36786: ST_TO_ADDR
// break ;
36787: GO 36791
// end ;
36789: GO 36752
36791: POP
36792: POP
// end ;
36793: LD_VAR 0 3
36797: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36798: LD_INT 0
36800: PPUSH
36801: PPUSH
36802: PPUSH
// pom := GetBase ( fac ) ;
36803: LD_ADDR_VAR 0 5
36807: PUSH
36808: LD_VAR 0 1
36812: PPUSH
36813: CALL_OW 274
36817: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36818: LD_ADDR_VAR 0 4
36822: PUSH
36823: LD_VAR 0 2
36827: PUSH
36828: LD_INT 1
36830: ARRAY
36831: PPUSH
36832: LD_VAR 0 2
36836: PUSH
36837: LD_INT 2
36839: ARRAY
36840: PPUSH
36841: LD_VAR 0 2
36845: PUSH
36846: LD_INT 3
36848: ARRAY
36849: PPUSH
36850: LD_VAR 0 2
36854: PUSH
36855: LD_INT 4
36857: ARRAY
36858: PPUSH
36859: CALL_OW 449
36863: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36864: LD_ADDR_VAR 0 3
36868: PUSH
36869: LD_VAR 0 5
36873: PPUSH
36874: LD_INT 1
36876: PPUSH
36877: CALL_OW 275
36881: PUSH
36882: LD_VAR 0 4
36886: PUSH
36887: LD_INT 1
36889: ARRAY
36890: GREATEREQUAL
36891: PUSH
36892: LD_VAR 0 5
36896: PPUSH
36897: LD_INT 2
36899: PPUSH
36900: CALL_OW 275
36904: PUSH
36905: LD_VAR 0 4
36909: PUSH
36910: LD_INT 2
36912: ARRAY
36913: GREATEREQUAL
36914: AND
36915: PUSH
36916: LD_VAR 0 5
36920: PPUSH
36921: LD_INT 3
36923: PPUSH
36924: CALL_OW 275
36928: PUSH
36929: LD_VAR 0 4
36933: PUSH
36934: LD_INT 3
36936: ARRAY
36937: GREATEREQUAL
36938: AND
36939: ST_TO_ADDR
// end ;
36940: LD_VAR 0 3
36944: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36945: LD_INT 0
36947: PPUSH
36948: PPUSH
36949: PPUSH
36950: PPUSH
// pom := GetBase ( building ) ;
36951: LD_ADDR_VAR 0 3
36955: PUSH
36956: LD_VAR 0 1
36960: PPUSH
36961: CALL_OW 274
36965: ST_TO_ADDR
// if not pom then
36966: LD_VAR 0 3
36970: NOT
36971: IFFALSE 36975
// exit ;
36973: GO 37145
// btype := GetBType ( building ) ;
36975: LD_ADDR_VAR 0 5
36979: PUSH
36980: LD_VAR 0 1
36984: PPUSH
36985: CALL_OW 266
36989: ST_TO_ADDR
// if btype = b_armoury then
36990: LD_VAR 0 5
36994: PUSH
36995: LD_INT 4
36997: EQUAL
36998: IFFALSE 37008
// btype := b_barracks ;
37000: LD_ADDR_VAR 0 5
37004: PUSH
37005: LD_INT 5
37007: ST_TO_ADDR
// if btype = b_depot then
37008: LD_VAR 0 5
37012: PUSH
37013: LD_INT 0
37015: EQUAL
37016: IFFALSE 37026
// btype := b_warehouse ;
37018: LD_ADDR_VAR 0 5
37022: PUSH
37023: LD_INT 1
37025: ST_TO_ADDR
// if btype = b_workshop then
37026: LD_VAR 0 5
37030: PUSH
37031: LD_INT 2
37033: EQUAL
37034: IFFALSE 37044
// btype := b_factory ;
37036: LD_ADDR_VAR 0 5
37040: PUSH
37041: LD_INT 3
37043: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37044: LD_ADDR_VAR 0 4
37048: PUSH
37049: LD_VAR 0 5
37053: PPUSH
37054: LD_VAR 0 1
37058: PPUSH
37059: CALL_OW 248
37063: PPUSH
37064: CALL_OW 450
37068: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37069: LD_ADDR_VAR 0 2
37073: PUSH
37074: LD_VAR 0 3
37078: PPUSH
37079: LD_INT 1
37081: PPUSH
37082: CALL_OW 275
37086: PUSH
37087: LD_VAR 0 4
37091: PUSH
37092: LD_INT 1
37094: ARRAY
37095: GREATEREQUAL
37096: PUSH
37097: LD_VAR 0 3
37101: PPUSH
37102: LD_INT 2
37104: PPUSH
37105: CALL_OW 275
37109: PUSH
37110: LD_VAR 0 4
37114: PUSH
37115: LD_INT 2
37117: ARRAY
37118: GREATEREQUAL
37119: AND
37120: PUSH
37121: LD_VAR 0 3
37125: PPUSH
37126: LD_INT 3
37128: PPUSH
37129: CALL_OW 275
37133: PUSH
37134: LD_VAR 0 4
37138: PUSH
37139: LD_INT 3
37141: ARRAY
37142: GREATEREQUAL
37143: AND
37144: ST_TO_ADDR
// end ;
37145: LD_VAR 0 2
37149: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37150: LD_INT 0
37152: PPUSH
37153: PPUSH
37154: PPUSH
// pom := GetBase ( building ) ;
37155: LD_ADDR_VAR 0 4
37159: PUSH
37160: LD_VAR 0 1
37164: PPUSH
37165: CALL_OW 274
37169: ST_TO_ADDR
// if not pom then
37170: LD_VAR 0 4
37174: NOT
37175: IFFALSE 37179
// exit ;
37177: GO 37280
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37179: LD_ADDR_VAR 0 5
37183: PUSH
37184: LD_VAR 0 2
37188: PPUSH
37189: LD_VAR 0 1
37193: PPUSH
37194: CALL_OW 248
37198: PPUSH
37199: CALL_OW 450
37203: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37204: LD_ADDR_VAR 0 3
37208: PUSH
37209: LD_VAR 0 4
37213: PPUSH
37214: LD_INT 1
37216: PPUSH
37217: CALL_OW 275
37221: PUSH
37222: LD_VAR 0 5
37226: PUSH
37227: LD_INT 1
37229: ARRAY
37230: GREATEREQUAL
37231: PUSH
37232: LD_VAR 0 4
37236: PPUSH
37237: LD_INT 2
37239: PPUSH
37240: CALL_OW 275
37244: PUSH
37245: LD_VAR 0 5
37249: PUSH
37250: LD_INT 2
37252: ARRAY
37253: GREATEREQUAL
37254: AND
37255: PUSH
37256: LD_VAR 0 4
37260: PPUSH
37261: LD_INT 3
37263: PPUSH
37264: CALL_OW 275
37268: PUSH
37269: LD_VAR 0 5
37273: PUSH
37274: LD_INT 3
37276: ARRAY
37277: GREATEREQUAL
37278: AND
37279: ST_TO_ADDR
// end ;
37280: LD_VAR 0 3
37284: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37285: LD_INT 0
37287: PPUSH
37288: PPUSH
37289: PPUSH
37290: PPUSH
37291: PPUSH
37292: PPUSH
37293: PPUSH
37294: PPUSH
37295: PPUSH
37296: PPUSH
37297: PPUSH
// result := false ;
37298: LD_ADDR_VAR 0 8
37302: PUSH
37303: LD_INT 0
37305: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37306: LD_VAR 0 5
37310: NOT
37311: PUSH
37312: LD_VAR 0 1
37316: NOT
37317: OR
37318: PUSH
37319: LD_VAR 0 2
37323: NOT
37324: OR
37325: PUSH
37326: LD_VAR 0 3
37330: NOT
37331: OR
37332: IFFALSE 37336
// exit ;
37334: GO 38150
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37336: LD_ADDR_VAR 0 14
37340: PUSH
37341: LD_VAR 0 1
37345: PPUSH
37346: LD_VAR 0 2
37350: PPUSH
37351: LD_VAR 0 3
37355: PPUSH
37356: LD_VAR 0 4
37360: PPUSH
37361: LD_VAR 0 5
37365: PUSH
37366: LD_INT 1
37368: ARRAY
37369: PPUSH
37370: CALL_OW 248
37374: PPUSH
37375: LD_INT 0
37377: PPUSH
37378: CALL 39387 0 6
37382: ST_TO_ADDR
// if not hexes then
37383: LD_VAR 0 14
37387: NOT
37388: IFFALSE 37392
// exit ;
37390: GO 38150
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37392: LD_ADDR_VAR 0 17
37396: PUSH
37397: LD_VAR 0 5
37401: PPUSH
37402: LD_INT 22
37404: PUSH
37405: LD_VAR 0 13
37409: PPUSH
37410: CALL_OW 255
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 2
37421: PUSH
37422: LD_INT 30
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 30
37434: PUSH
37435: LD_INT 1
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: LIST
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PPUSH
37451: CALL_OW 72
37455: ST_TO_ADDR
// for i = 1 to hexes do
37456: LD_ADDR_VAR 0 9
37460: PUSH
37461: DOUBLE
37462: LD_INT 1
37464: DEC
37465: ST_TO_ADDR
37466: LD_VAR 0 14
37470: PUSH
37471: FOR_TO
37472: IFFALSE 38148
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37474: LD_ADDR_VAR 0 13
37478: PUSH
37479: LD_VAR 0 14
37483: PUSH
37484: LD_VAR 0 9
37488: ARRAY
37489: PUSH
37490: LD_INT 1
37492: ARRAY
37493: PPUSH
37494: LD_VAR 0 14
37498: PUSH
37499: LD_VAR 0 9
37503: ARRAY
37504: PUSH
37505: LD_INT 2
37507: ARRAY
37508: PPUSH
37509: CALL_OW 428
37513: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37514: LD_VAR 0 14
37518: PUSH
37519: LD_VAR 0 9
37523: ARRAY
37524: PUSH
37525: LD_INT 1
37527: ARRAY
37528: PPUSH
37529: LD_VAR 0 14
37533: PUSH
37534: LD_VAR 0 9
37538: ARRAY
37539: PUSH
37540: LD_INT 2
37542: ARRAY
37543: PPUSH
37544: CALL_OW 351
37548: PUSH
37549: LD_VAR 0 14
37553: PUSH
37554: LD_VAR 0 9
37558: ARRAY
37559: PUSH
37560: LD_INT 1
37562: ARRAY
37563: PPUSH
37564: LD_VAR 0 14
37568: PUSH
37569: LD_VAR 0 9
37573: ARRAY
37574: PUSH
37575: LD_INT 2
37577: ARRAY
37578: PPUSH
37579: CALL_OW 488
37583: NOT
37584: OR
37585: PUSH
37586: LD_VAR 0 13
37590: PPUSH
37591: CALL_OW 247
37595: PUSH
37596: LD_INT 3
37598: EQUAL
37599: OR
37600: IFFALSE 37606
// exit ;
37602: POP
37603: POP
37604: GO 38150
// if not tmp then
37606: LD_VAR 0 13
37610: NOT
37611: IFFALSE 37615
// continue ;
37613: GO 37471
// result := true ;
37615: LD_ADDR_VAR 0 8
37619: PUSH
37620: LD_INT 1
37622: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37623: LD_VAR 0 6
37627: PUSH
37628: LD_VAR 0 13
37632: PPUSH
37633: CALL_OW 247
37637: PUSH
37638: LD_INT 2
37640: EQUAL
37641: AND
37642: PUSH
37643: LD_VAR 0 13
37647: PPUSH
37648: CALL_OW 263
37652: PUSH
37653: LD_INT 1
37655: EQUAL
37656: AND
37657: IFFALSE 37821
// begin if IsDrivenBy ( tmp ) then
37659: LD_VAR 0 13
37663: PPUSH
37664: CALL_OW 311
37668: IFFALSE 37672
// continue ;
37670: GO 37471
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37672: LD_VAR 0 6
37676: PPUSH
37677: LD_INT 3
37679: PUSH
37680: LD_INT 60
37682: PUSH
37683: EMPTY
37684: LIST
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 3
37692: PUSH
37693: LD_INT 55
37695: PUSH
37696: EMPTY
37697: LIST
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PPUSH
37707: CALL_OW 72
37711: IFFALSE 37819
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37713: LD_ADDR_VAR 0 18
37717: PUSH
37718: LD_VAR 0 6
37722: PPUSH
37723: LD_INT 3
37725: PUSH
37726: LD_INT 60
37728: PUSH
37729: EMPTY
37730: LIST
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 3
37738: PUSH
37739: LD_INT 55
37741: PUSH
37742: EMPTY
37743: LIST
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PPUSH
37753: CALL_OW 72
37757: PUSH
37758: LD_INT 1
37760: ARRAY
37761: ST_TO_ADDR
// if IsInUnit ( driver ) then
37762: LD_VAR 0 18
37766: PPUSH
37767: CALL_OW 310
37771: IFFALSE 37782
// ComExit ( driver ) ;
37773: LD_VAR 0 18
37777: PPUSH
37778: CALL 63092 0 1
// AddComEnterUnit ( driver , tmp ) ;
37782: LD_VAR 0 18
37786: PPUSH
37787: LD_VAR 0 13
37791: PPUSH
37792: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37796: LD_VAR 0 18
37800: PPUSH
37801: LD_VAR 0 7
37805: PPUSH
37806: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37810: LD_VAR 0 18
37814: PPUSH
37815: CALL_OW 181
// end ; continue ;
37819: GO 37471
// end ; if not cleaners or not tmp in cleaners then
37821: LD_VAR 0 6
37825: NOT
37826: PUSH
37827: LD_VAR 0 13
37831: PUSH
37832: LD_VAR 0 6
37836: IN
37837: NOT
37838: OR
37839: IFFALSE 38146
// begin if dep then
37841: LD_VAR 0 17
37845: IFFALSE 37981
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37847: LD_ADDR_VAR 0 16
37851: PUSH
37852: LD_VAR 0 17
37856: PUSH
37857: LD_INT 1
37859: ARRAY
37860: PPUSH
37861: CALL_OW 250
37865: PPUSH
37866: LD_VAR 0 17
37870: PUSH
37871: LD_INT 1
37873: ARRAY
37874: PPUSH
37875: CALL_OW 254
37879: PPUSH
37880: LD_INT 5
37882: PPUSH
37883: CALL_OW 272
37887: PUSH
37888: LD_VAR 0 17
37892: PUSH
37893: LD_INT 1
37895: ARRAY
37896: PPUSH
37897: CALL_OW 251
37901: PPUSH
37902: LD_VAR 0 17
37906: PUSH
37907: LD_INT 1
37909: ARRAY
37910: PPUSH
37911: CALL_OW 254
37915: PPUSH
37916: LD_INT 5
37918: PPUSH
37919: CALL_OW 273
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37928: LD_VAR 0 16
37932: PUSH
37933: LD_INT 1
37935: ARRAY
37936: PPUSH
37937: LD_VAR 0 16
37941: PUSH
37942: LD_INT 2
37944: ARRAY
37945: PPUSH
37946: CALL_OW 488
37950: IFFALSE 37981
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37952: LD_VAR 0 13
37956: PPUSH
37957: LD_VAR 0 16
37961: PUSH
37962: LD_INT 1
37964: ARRAY
37965: PPUSH
37966: LD_VAR 0 16
37970: PUSH
37971: LD_INT 2
37973: ARRAY
37974: PPUSH
37975: CALL_OW 111
// continue ;
37979: GO 37471
// end ; end ; r := GetDir ( tmp ) ;
37981: LD_ADDR_VAR 0 15
37985: PUSH
37986: LD_VAR 0 13
37990: PPUSH
37991: CALL_OW 254
37995: ST_TO_ADDR
// if r = 5 then
37996: LD_VAR 0 15
38000: PUSH
38001: LD_INT 5
38003: EQUAL
38004: IFFALSE 38014
// r := 0 ;
38006: LD_ADDR_VAR 0 15
38010: PUSH
38011: LD_INT 0
38013: ST_TO_ADDR
// for j = r to 5 do
38014: LD_ADDR_VAR 0 10
38018: PUSH
38019: DOUBLE
38020: LD_VAR 0 15
38024: DEC
38025: ST_TO_ADDR
38026: LD_INT 5
38028: PUSH
38029: FOR_TO
38030: IFFALSE 38144
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38032: LD_ADDR_VAR 0 11
38036: PUSH
38037: LD_VAR 0 13
38041: PPUSH
38042: CALL_OW 250
38046: PPUSH
38047: LD_VAR 0 10
38051: PPUSH
38052: LD_INT 2
38054: PPUSH
38055: CALL_OW 272
38059: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38060: LD_ADDR_VAR 0 12
38064: PUSH
38065: LD_VAR 0 13
38069: PPUSH
38070: CALL_OW 251
38074: PPUSH
38075: LD_VAR 0 10
38079: PPUSH
38080: LD_INT 2
38082: PPUSH
38083: CALL_OW 273
38087: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38088: LD_VAR 0 11
38092: PPUSH
38093: LD_VAR 0 12
38097: PPUSH
38098: CALL_OW 488
38102: PUSH
38103: LD_VAR 0 11
38107: PPUSH
38108: LD_VAR 0 12
38112: PPUSH
38113: CALL_OW 428
38117: NOT
38118: AND
38119: IFFALSE 38142
// begin ComMoveXY ( tmp , _x , _y ) ;
38121: LD_VAR 0 13
38125: PPUSH
38126: LD_VAR 0 11
38130: PPUSH
38131: LD_VAR 0 12
38135: PPUSH
38136: CALL_OW 111
// break ;
38140: GO 38144
// end ; end ;
38142: GO 38029
38144: POP
38145: POP
// end ; end ;
38146: GO 37471
38148: POP
38149: POP
// end ;
38150: LD_VAR 0 8
38154: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38155: LD_INT 0
38157: PPUSH
// result := true ;
38158: LD_ADDR_VAR 0 3
38162: PUSH
38163: LD_INT 1
38165: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38166: LD_VAR 0 2
38170: PUSH
38171: LD_INT 24
38173: DOUBLE
38174: EQUAL
38175: IFTRUE 38185
38177: LD_INT 33
38179: DOUBLE
38180: EQUAL
38181: IFTRUE 38185
38183: GO 38210
38185: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38186: LD_ADDR_VAR 0 3
38190: PUSH
38191: LD_INT 32
38193: PPUSH
38194: LD_VAR 0 1
38198: PPUSH
38199: CALL_OW 321
38203: PUSH
38204: LD_INT 2
38206: EQUAL
38207: ST_TO_ADDR
38208: GO 38530
38210: LD_INT 20
38212: DOUBLE
38213: EQUAL
38214: IFTRUE 38218
38216: GO 38243
38218: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38219: LD_ADDR_VAR 0 3
38223: PUSH
38224: LD_INT 6
38226: PPUSH
38227: LD_VAR 0 1
38231: PPUSH
38232: CALL_OW 321
38236: PUSH
38237: LD_INT 2
38239: EQUAL
38240: ST_TO_ADDR
38241: GO 38530
38243: LD_INT 22
38245: DOUBLE
38246: EQUAL
38247: IFTRUE 38257
38249: LD_INT 36
38251: DOUBLE
38252: EQUAL
38253: IFTRUE 38257
38255: GO 38282
38257: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38258: LD_ADDR_VAR 0 3
38262: PUSH
38263: LD_INT 15
38265: PPUSH
38266: LD_VAR 0 1
38270: PPUSH
38271: CALL_OW 321
38275: PUSH
38276: LD_INT 2
38278: EQUAL
38279: ST_TO_ADDR
38280: GO 38530
38282: LD_INT 30
38284: DOUBLE
38285: EQUAL
38286: IFTRUE 38290
38288: GO 38315
38290: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38291: LD_ADDR_VAR 0 3
38295: PUSH
38296: LD_INT 20
38298: PPUSH
38299: LD_VAR 0 1
38303: PPUSH
38304: CALL_OW 321
38308: PUSH
38309: LD_INT 2
38311: EQUAL
38312: ST_TO_ADDR
38313: GO 38530
38315: LD_INT 28
38317: DOUBLE
38318: EQUAL
38319: IFTRUE 38329
38321: LD_INT 21
38323: DOUBLE
38324: EQUAL
38325: IFTRUE 38329
38327: GO 38354
38329: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38330: LD_ADDR_VAR 0 3
38334: PUSH
38335: LD_INT 21
38337: PPUSH
38338: LD_VAR 0 1
38342: PPUSH
38343: CALL_OW 321
38347: PUSH
38348: LD_INT 2
38350: EQUAL
38351: ST_TO_ADDR
38352: GO 38530
38354: LD_INT 16
38356: DOUBLE
38357: EQUAL
38358: IFTRUE 38362
38360: GO 38389
38362: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38363: LD_ADDR_VAR 0 3
38367: PUSH
38368: LD_EXP 72
38372: PPUSH
38373: LD_VAR 0 1
38377: PPUSH
38378: CALL_OW 321
38382: PUSH
38383: LD_INT 2
38385: EQUAL
38386: ST_TO_ADDR
38387: GO 38530
38389: LD_INT 19
38391: DOUBLE
38392: EQUAL
38393: IFTRUE 38403
38395: LD_INT 23
38397: DOUBLE
38398: EQUAL
38399: IFTRUE 38403
38401: GO 38430
38403: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38404: LD_ADDR_VAR 0 3
38408: PUSH
38409: LD_EXP 71
38413: PPUSH
38414: LD_VAR 0 1
38418: PPUSH
38419: CALL_OW 321
38423: PUSH
38424: LD_INT 2
38426: EQUAL
38427: ST_TO_ADDR
38428: GO 38530
38430: LD_INT 17
38432: DOUBLE
38433: EQUAL
38434: IFTRUE 38438
38436: GO 38463
38438: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38439: LD_ADDR_VAR 0 3
38443: PUSH
38444: LD_INT 39
38446: PPUSH
38447: LD_VAR 0 1
38451: PPUSH
38452: CALL_OW 321
38456: PUSH
38457: LD_INT 2
38459: EQUAL
38460: ST_TO_ADDR
38461: GO 38530
38463: LD_INT 18
38465: DOUBLE
38466: EQUAL
38467: IFTRUE 38471
38469: GO 38496
38471: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38472: LD_ADDR_VAR 0 3
38476: PUSH
38477: LD_INT 40
38479: PPUSH
38480: LD_VAR 0 1
38484: PPUSH
38485: CALL_OW 321
38489: PUSH
38490: LD_INT 2
38492: EQUAL
38493: ST_TO_ADDR
38494: GO 38530
38496: LD_INT 27
38498: DOUBLE
38499: EQUAL
38500: IFTRUE 38504
38502: GO 38529
38504: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38505: LD_ADDR_VAR 0 3
38509: PUSH
38510: LD_INT 35
38512: PPUSH
38513: LD_VAR 0 1
38517: PPUSH
38518: CALL_OW 321
38522: PUSH
38523: LD_INT 2
38525: EQUAL
38526: ST_TO_ADDR
38527: GO 38530
38529: POP
// end ;
38530: LD_VAR 0 3
38534: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38535: LD_INT 0
38537: PPUSH
38538: PPUSH
38539: PPUSH
38540: PPUSH
38541: PPUSH
38542: PPUSH
38543: PPUSH
38544: PPUSH
38545: PPUSH
38546: PPUSH
38547: PPUSH
// result := false ;
38548: LD_ADDR_VAR 0 6
38552: PUSH
38553: LD_INT 0
38555: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38556: LD_VAR 0 1
38560: NOT
38561: PUSH
38562: LD_VAR 0 1
38566: PPUSH
38567: CALL_OW 266
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: LD_INT 1
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: IN
38582: NOT
38583: OR
38584: PUSH
38585: LD_VAR 0 2
38589: NOT
38590: OR
38591: PUSH
38592: LD_VAR 0 5
38596: PUSH
38597: LD_INT 0
38599: PUSH
38600: LD_INT 1
38602: PUSH
38603: LD_INT 2
38605: PUSH
38606: LD_INT 3
38608: PUSH
38609: LD_INT 4
38611: PUSH
38612: LD_INT 5
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: IN
38623: NOT
38624: OR
38625: PUSH
38626: LD_VAR 0 3
38630: PPUSH
38631: LD_VAR 0 4
38635: PPUSH
38636: CALL_OW 488
38640: NOT
38641: OR
38642: IFFALSE 38646
// exit ;
38644: GO 39382
// side := GetSide ( depot ) ;
38646: LD_ADDR_VAR 0 9
38650: PUSH
38651: LD_VAR 0 1
38655: PPUSH
38656: CALL_OW 255
38660: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38661: LD_VAR 0 9
38665: PPUSH
38666: LD_VAR 0 2
38670: PPUSH
38671: CALL 38155 0 2
38675: NOT
38676: IFFALSE 38680
// exit ;
38678: GO 39382
// pom := GetBase ( depot ) ;
38680: LD_ADDR_VAR 0 10
38684: PUSH
38685: LD_VAR 0 1
38689: PPUSH
38690: CALL_OW 274
38694: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38695: LD_ADDR_VAR 0 11
38699: PUSH
38700: LD_VAR 0 2
38704: PPUSH
38705: LD_VAR 0 1
38709: PPUSH
38710: CALL_OW 248
38714: PPUSH
38715: CALL_OW 450
38719: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38720: LD_VAR 0 10
38724: PPUSH
38725: LD_INT 1
38727: PPUSH
38728: CALL_OW 275
38732: PUSH
38733: LD_VAR 0 11
38737: PUSH
38738: LD_INT 1
38740: ARRAY
38741: GREATEREQUAL
38742: PUSH
38743: LD_VAR 0 10
38747: PPUSH
38748: LD_INT 2
38750: PPUSH
38751: CALL_OW 275
38755: PUSH
38756: LD_VAR 0 11
38760: PUSH
38761: LD_INT 2
38763: ARRAY
38764: GREATEREQUAL
38765: AND
38766: PUSH
38767: LD_VAR 0 10
38771: PPUSH
38772: LD_INT 3
38774: PPUSH
38775: CALL_OW 275
38779: PUSH
38780: LD_VAR 0 11
38784: PUSH
38785: LD_INT 3
38787: ARRAY
38788: GREATEREQUAL
38789: AND
38790: NOT
38791: IFFALSE 38795
// exit ;
38793: GO 39382
// if GetBType ( depot ) = b_depot then
38795: LD_VAR 0 1
38799: PPUSH
38800: CALL_OW 266
38804: PUSH
38805: LD_INT 0
38807: EQUAL
38808: IFFALSE 38820
// dist := 28 else
38810: LD_ADDR_VAR 0 14
38814: PUSH
38815: LD_INT 28
38817: ST_TO_ADDR
38818: GO 38828
// dist := 36 ;
38820: LD_ADDR_VAR 0 14
38824: PUSH
38825: LD_INT 36
38827: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38828: LD_VAR 0 1
38832: PPUSH
38833: LD_VAR 0 3
38837: PPUSH
38838: LD_VAR 0 4
38842: PPUSH
38843: CALL_OW 297
38847: PUSH
38848: LD_VAR 0 14
38852: GREATER
38853: IFFALSE 38857
// exit ;
38855: GO 39382
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38857: LD_ADDR_VAR 0 12
38861: PUSH
38862: LD_VAR 0 2
38866: PPUSH
38867: LD_VAR 0 3
38871: PPUSH
38872: LD_VAR 0 4
38876: PPUSH
38877: LD_VAR 0 5
38881: PPUSH
38882: LD_VAR 0 1
38886: PPUSH
38887: CALL_OW 248
38891: PPUSH
38892: LD_INT 0
38894: PPUSH
38895: CALL 39387 0 6
38899: ST_TO_ADDR
// if not hexes then
38900: LD_VAR 0 12
38904: NOT
38905: IFFALSE 38909
// exit ;
38907: GO 39382
// hex := GetHexInfo ( x , y ) ;
38909: LD_ADDR_VAR 0 15
38913: PUSH
38914: LD_VAR 0 3
38918: PPUSH
38919: LD_VAR 0 4
38923: PPUSH
38924: CALL_OW 546
38928: ST_TO_ADDR
// if hex [ 1 ] then
38929: LD_VAR 0 15
38933: PUSH
38934: LD_INT 1
38936: ARRAY
38937: IFFALSE 38941
// exit ;
38939: GO 39382
// height := hex [ 2 ] ;
38941: LD_ADDR_VAR 0 13
38945: PUSH
38946: LD_VAR 0 15
38950: PUSH
38951: LD_INT 2
38953: ARRAY
38954: ST_TO_ADDR
// for i = 1 to hexes do
38955: LD_ADDR_VAR 0 7
38959: PUSH
38960: DOUBLE
38961: LD_INT 1
38963: DEC
38964: ST_TO_ADDR
38965: LD_VAR 0 12
38969: PUSH
38970: FOR_TO
38971: IFFALSE 39301
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38973: LD_VAR 0 12
38977: PUSH
38978: LD_VAR 0 7
38982: ARRAY
38983: PUSH
38984: LD_INT 1
38986: ARRAY
38987: PPUSH
38988: LD_VAR 0 12
38992: PUSH
38993: LD_VAR 0 7
38997: ARRAY
38998: PUSH
38999: LD_INT 2
39001: ARRAY
39002: PPUSH
39003: CALL_OW 488
39007: NOT
39008: PUSH
39009: LD_VAR 0 12
39013: PUSH
39014: LD_VAR 0 7
39018: ARRAY
39019: PUSH
39020: LD_INT 1
39022: ARRAY
39023: PPUSH
39024: LD_VAR 0 12
39028: PUSH
39029: LD_VAR 0 7
39033: ARRAY
39034: PUSH
39035: LD_INT 2
39037: ARRAY
39038: PPUSH
39039: CALL_OW 428
39043: PUSH
39044: LD_INT 0
39046: GREATER
39047: OR
39048: PUSH
39049: LD_VAR 0 12
39053: PUSH
39054: LD_VAR 0 7
39058: ARRAY
39059: PUSH
39060: LD_INT 1
39062: ARRAY
39063: PPUSH
39064: LD_VAR 0 12
39068: PUSH
39069: LD_VAR 0 7
39073: ARRAY
39074: PUSH
39075: LD_INT 2
39077: ARRAY
39078: PPUSH
39079: CALL_OW 351
39083: OR
39084: IFFALSE 39090
// exit ;
39086: POP
39087: POP
39088: GO 39382
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39090: LD_ADDR_VAR 0 8
39094: PUSH
39095: LD_VAR 0 12
39099: PUSH
39100: LD_VAR 0 7
39104: ARRAY
39105: PUSH
39106: LD_INT 1
39108: ARRAY
39109: PPUSH
39110: LD_VAR 0 12
39114: PUSH
39115: LD_VAR 0 7
39119: ARRAY
39120: PUSH
39121: LD_INT 2
39123: ARRAY
39124: PPUSH
39125: CALL_OW 546
39129: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39130: LD_VAR 0 8
39134: PUSH
39135: LD_INT 1
39137: ARRAY
39138: PUSH
39139: LD_VAR 0 8
39143: PUSH
39144: LD_INT 2
39146: ARRAY
39147: PUSH
39148: LD_VAR 0 13
39152: PUSH
39153: LD_INT 2
39155: PLUS
39156: GREATER
39157: OR
39158: PUSH
39159: LD_VAR 0 8
39163: PUSH
39164: LD_INT 2
39166: ARRAY
39167: PUSH
39168: LD_VAR 0 13
39172: PUSH
39173: LD_INT 2
39175: MINUS
39176: LESS
39177: OR
39178: PUSH
39179: LD_VAR 0 8
39183: PUSH
39184: LD_INT 3
39186: ARRAY
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: LD_INT 8
39193: PUSH
39194: LD_INT 9
39196: PUSH
39197: LD_INT 10
39199: PUSH
39200: LD_INT 11
39202: PUSH
39203: LD_INT 12
39205: PUSH
39206: LD_INT 13
39208: PUSH
39209: LD_INT 16
39211: PUSH
39212: LD_INT 17
39214: PUSH
39215: LD_INT 18
39217: PUSH
39218: LD_INT 19
39220: PUSH
39221: LD_INT 20
39223: PUSH
39224: LD_INT 21
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: IN
39242: NOT
39243: OR
39244: PUSH
39245: LD_VAR 0 8
39249: PUSH
39250: LD_INT 5
39252: ARRAY
39253: NOT
39254: OR
39255: PUSH
39256: LD_VAR 0 8
39260: PUSH
39261: LD_INT 6
39263: ARRAY
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: LD_INT 2
39270: PUSH
39271: LD_INT 7
39273: PUSH
39274: LD_INT 9
39276: PUSH
39277: LD_INT 10
39279: PUSH
39280: LD_INT 11
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: IN
39291: NOT
39292: OR
39293: IFFALSE 39299
// exit ;
39295: POP
39296: POP
39297: GO 39382
// end ;
39299: GO 38970
39301: POP
39302: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39303: LD_VAR 0 9
39307: PPUSH
39308: LD_VAR 0 3
39312: PPUSH
39313: LD_VAR 0 4
39317: PPUSH
39318: LD_INT 20
39320: PPUSH
39321: CALL 31328 0 4
39325: PUSH
39326: LD_INT 4
39328: ARRAY
39329: IFFALSE 39333
// exit ;
39331: GO 39382
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39333: LD_VAR 0 2
39337: PUSH
39338: LD_INT 29
39340: PUSH
39341: LD_INT 30
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: IN
39348: PUSH
39349: LD_VAR 0 3
39353: PPUSH
39354: LD_VAR 0 4
39358: PPUSH
39359: LD_VAR 0 9
39363: PPUSH
39364: CALL_OW 440
39368: NOT
39369: AND
39370: IFFALSE 39374
// exit ;
39372: GO 39382
// result := true ;
39374: LD_ADDR_VAR 0 6
39378: PUSH
39379: LD_INT 1
39381: ST_TO_ADDR
// end ;
39382: LD_VAR 0 6
39386: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39387: LD_INT 0
39389: PPUSH
39390: PPUSH
39391: PPUSH
39392: PPUSH
39393: PPUSH
39394: PPUSH
39395: PPUSH
39396: PPUSH
39397: PPUSH
39398: PPUSH
39399: PPUSH
39400: PPUSH
39401: PPUSH
39402: PPUSH
39403: PPUSH
39404: PPUSH
39405: PPUSH
39406: PPUSH
39407: PPUSH
39408: PPUSH
39409: PPUSH
39410: PPUSH
39411: PPUSH
39412: PPUSH
39413: PPUSH
39414: PPUSH
39415: PPUSH
39416: PPUSH
39417: PPUSH
39418: PPUSH
39419: PPUSH
39420: PPUSH
39421: PPUSH
39422: PPUSH
39423: PPUSH
39424: PPUSH
39425: PPUSH
39426: PPUSH
39427: PPUSH
39428: PPUSH
39429: PPUSH
39430: PPUSH
39431: PPUSH
39432: PPUSH
39433: PPUSH
39434: PPUSH
39435: PPUSH
39436: PPUSH
39437: PPUSH
39438: PPUSH
39439: PPUSH
39440: PPUSH
39441: PPUSH
39442: PPUSH
39443: PPUSH
39444: PPUSH
39445: PPUSH
39446: PPUSH
// result = [ ] ;
39447: LD_ADDR_VAR 0 7
39451: PUSH
39452: EMPTY
39453: ST_TO_ADDR
// temp_list = [ ] ;
39454: LD_ADDR_VAR 0 9
39458: PUSH
39459: EMPTY
39460: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39461: LD_VAR 0 4
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: LD_INT 2
39474: PUSH
39475: LD_INT 3
39477: PUSH
39478: LD_INT 4
39480: PUSH
39481: LD_INT 5
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: IN
39492: NOT
39493: PUSH
39494: LD_VAR 0 1
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: IN
39509: PUSH
39510: LD_VAR 0 5
39514: PUSH
39515: LD_INT 1
39517: PUSH
39518: LD_INT 2
39520: PUSH
39521: LD_INT 3
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: LIST
39528: IN
39529: NOT
39530: AND
39531: OR
39532: IFFALSE 39536
// exit ;
39534: GO 57927
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39536: LD_VAR 0 1
39540: PUSH
39541: LD_INT 6
39543: PUSH
39544: LD_INT 7
39546: PUSH
39547: LD_INT 8
39549: PUSH
39550: LD_INT 13
39552: PUSH
39553: LD_INT 12
39555: PUSH
39556: LD_INT 15
39558: PUSH
39559: LD_INT 11
39561: PUSH
39562: LD_INT 14
39564: PUSH
39565: LD_INT 10
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: IN
39579: IFFALSE 39589
// btype = b_lab ;
39581: LD_ADDR_VAR 0 1
39585: PUSH
39586: LD_INT 6
39588: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39589: LD_VAR 0 6
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: LD_INT 2
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: LIST
39607: IN
39608: NOT
39609: PUSH
39610: LD_VAR 0 1
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: LD_INT 1
39620: PUSH
39621: LD_INT 2
39623: PUSH
39624: LD_INT 3
39626: PUSH
39627: LD_INT 6
39629: PUSH
39630: LD_INT 36
39632: PUSH
39633: LD_INT 4
39635: PUSH
39636: LD_INT 5
39638: PUSH
39639: LD_INT 31
39641: PUSH
39642: LD_INT 32
39644: PUSH
39645: LD_INT 33
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: IN
39661: NOT
39662: PUSH
39663: LD_VAR 0 6
39667: PUSH
39668: LD_INT 1
39670: EQUAL
39671: AND
39672: OR
39673: PUSH
39674: LD_VAR 0 1
39678: PUSH
39679: LD_INT 2
39681: PUSH
39682: LD_INT 3
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: IN
39689: NOT
39690: PUSH
39691: LD_VAR 0 6
39695: PUSH
39696: LD_INT 2
39698: EQUAL
39699: AND
39700: OR
39701: IFFALSE 39711
// mode = 0 ;
39703: LD_ADDR_VAR 0 6
39707: PUSH
39708: LD_INT 0
39710: ST_TO_ADDR
// case mode of 0 :
39711: LD_VAR 0 6
39715: PUSH
39716: LD_INT 0
39718: DOUBLE
39719: EQUAL
39720: IFTRUE 39724
39722: GO 51177
39724: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39725: LD_ADDR_VAR 0 11
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 0
39742: PUSH
39743: LD_INT 1
39745: NEG
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: LD_INT 1
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: LD_INT 1
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 1
39794: NEG
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 1
39806: NEG
39807: PUSH
39808: LD_INT 2
39810: NEG
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: LD_INT 2
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: LD_INT 1
39832: NEG
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: LD_INT 2
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 0
39850: PUSH
39851: LD_INT 2
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 1
39860: NEG
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 1
39871: PUSH
39872: LD_INT 3
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: LD_INT 3
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39918: LD_ADDR_VAR 0 12
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 0
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 1
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: LD_INT 1
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: LD_INT 1
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: LD_INT 1
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 2
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: NEG
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 2
40041: NEG
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 2
40052: NEG
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 2
40064: NEG
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 3
40075: NEG
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 3
40086: NEG
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40114: LD_ADDR_VAR 0 13
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: NEG
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: LD_INT 2
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 2
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 2
40217: PUSH
40218: LD_INT 2
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 1
40227: PUSH
40228: LD_INT 2
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 2
40237: NEG
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 2
40249: NEG
40250: PUSH
40251: LD_INT 2
40253: NEG
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 2
40261: NEG
40262: PUSH
40263: LD_INT 3
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 3
40273: NEG
40274: PUSH
40275: LD_INT 2
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 3
40285: NEG
40286: PUSH
40287: LD_INT 3
40289: NEG
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40313: LD_ADDR_VAR 0 14
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: LD_INT 1
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: LD_INT 1
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: LD_INT 1
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 1
40394: NEG
40395: PUSH
40396: LD_INT 2
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: LD_INT 2
40409: NEG
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: LD_INT 1
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: LD_INT 2
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: LD_INT 2
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 1
40448: NEG
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: LD_INT 3
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 3
40474: NEG
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40509: LD_ADDR_VAR 0 15
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: LD_INT 0
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 1
40537: PUSH
40538: LD_INT 0
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: LD_INT 1
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 1
40567: NEG
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 1
40578: NEG
40579: PUSH
40580: LD_INT 1
40582: NEG
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 2
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 2
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: LD_INT 1
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 2
40632: NEG
40633: PUSH
40634: LD_INT 0
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 2
40643: NEG
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 2
40655: PUSH
40656: LD_INT 1
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 3
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 3
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40702: LD_ADDR_VAR 0 16
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: LD_INT 1
40722: NEG
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 1
40740: PUSH
40741: LD_INT 1
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: LD_INT 1
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 1
40760: NEG
40761: PUSH
40762: LD_INT 0
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: LD_INT 1
40775: NEG
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 1
40783: NEG
40784: PUSH
40785: LD_INT 2
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 2
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 2
40805: PUSH
40806: LD_INT 2
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 1
40815: PUSH
40816: LD_INT 2
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 2
40825: NEG
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 2
40837: NEG
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 3
40849: PUSH
40850: LD_INT 2
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 3
40859: PUSH
40860: LD_INT 3
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 2
40869: PUSH
40870: LD_INT 3
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40895: LD_ADDR_VAR 0 17
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: LD_INT 1
40968: NEG
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: LD_INT 2
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: LD_INT 2
40991: NEG
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 2
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 2
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 2
41030: PUSH
41031: LD_INT 2
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: LD_INT 2
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 2
41071: NEG
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 2
41082: NEG
41083: PUSH
41084: LD_INT 1
41086: NEG
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 2
41094: NEG
41095: PUSH
41096: LD_INT 2
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41125: LD_ADDR_VAR 0 18
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 0
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: NEG
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 1
41194: NEG
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: LD_INT 2
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: LD_INT 2
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 2
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 2
41260: PUSH
41261: LD_INT 2
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: PUSH
41271: LD_INT 2
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 2
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 2
41301: NEG
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: NEG
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 2
41324: NEG
41325: PUSH
41326: LD_INT 2
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41355: LD_ADDR_VAR 0 19
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: LD_INT 1
41375: NEG
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 1
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: LD_INT 1
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 0
41403: PUSH
41404: LD_INT 1
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 1
41413: NEG
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: LD_INT 1
41428: NEG
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: LD_INT 2
41440: NEG
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: LD_INT 2
41451: NEG
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: LD_INT 1
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 2
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 2
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: PUSH
41491: LD_INT 2
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: LD_INT 2
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 2
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 2
41531: NEG
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 2
41542: NEG
41543: PUSH
41544: LD_INT 1
41546: NEG
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 2
41554: NEG
41555: PUSH
41556: LD_INT 2
41558: NEG
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41585: LD_ADDR_VAR 0 20
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: LD_INT 1
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: NEG
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: LD_INT 2
41670: NEG
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: LD_INT 2
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 2
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 2
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: LD_INT 2
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: LD_INT 2
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 2
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 2
41761: NEG
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: NEG
41773: PUSH
41774: LD_INT 1
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 2
41784: NEG
41785: PUSH
41786: LD_INT 2
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41815: LD_ADDR_VAR 0 21
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: LD_INT 1
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: LD_INT 2
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: LD_INT 2
41911: NEG
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 1
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 2
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 2
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 2
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 2
41991: NEG
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 2
42002: NEG
42003: PUSH
42004: LD_INT 1
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 2
42014: NEG
42015: PUSH
42016: LD_INT 2
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42045: LD_ADDR_VAR 0 22
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 1
42114: NEG
42115: PUSH
42116: LD_INT 1
42118: NEG
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: LD_INT 2
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: LD_INT 2
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 2
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: PUSH
42191: LD_INT 2
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 2
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 2
42221: NEG
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 2
42232: NEG
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: LD_INT 2
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42275: LD_ADDR_VAR 0 23
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: PUSH
42314: LD_INT 1
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: LD_INT 1
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: NEG
42357: PUSH
42358: LD_INT 2
42360: NEG
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: LD_INT 2
42371: NEG
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 2
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 2
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 2
42410: PUSH
42411: LD_INT 2
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: LD_INT 2
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 2
42451: NEG
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 2
42462: NEG
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: LD_INT 2
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 2
42486: NEG
42487: PUSH
42488: LD_INT 3
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 1
42498: NEG
42499: PUSH
42500: LD_INT 3
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: LD_INT 2
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 2
42521: PUSH
42522: LD_INT 1
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42555: LD_ADDR_VAR 0 24
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: LD_INT 1
42575: NEG
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: NEG
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: LD_INT 2
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: LD_INT 2
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 2
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 2
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: LD_INT 2
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: LD_INT 2
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: LD_INT 2
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 2
42731: NEG
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 2
42742: NEG
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: LD_INT 2
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 1
42766: PUSH
42767: LD_INT 2
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 2
42777: PUSH
42778: LD_INT 1
42780: NEG
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 3
42788: PUSH
42789: LD_INT 1
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 3
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42831: LD_ADDR_VAR 0 25
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: LD_INT 2
42916: NEG
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: LD_INT 2
42927: NEG
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 2
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 2
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 2
42966: PUSH
42967: LD_INT 2
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: LD_INT 2
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: LD_INT 2
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 2
43007: NEG
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 2
43018: NEG
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 2
43030: NEG
43031: PUSH
43032: LD_INT 2
43034: NEG
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 3
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 3
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 2
43062: PUSH
43063: LD_INT 3
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: LD_INT 3
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43105: LD_ADDR_VAR 0 26
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: LD_INT 1
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: LD_INT 1
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: NEG
43164: PUSH
43165: LD_INT 0
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: LD_INT 1
43178: NEG
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: LD_INT 2
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: LD_INT 2
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 2
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 2
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 2
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 2
43281: NEG
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 2
43292: NEG
43293: PUSH
43294: LD_INT 1
43296: NEG
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 2
43304: NEG
43305: PUSH
43306: LD_INT 2
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: LD_INT 3
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: LD_INT 3
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: NEG
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43381: LD_ADDR_VAR 0 27
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 1
43439: NEG
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: LD_INT 2
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: LD_INT 2
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 2
43506: PUSH
43507: LD_INT 1
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 2
43516: PUSH
43517: LD_INT 2
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 1
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: NEG
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 2
43557: NEG
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: NEG
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 2
43580: NEG
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 3
43614: NEG
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 3
43626: NEG
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43661: LD_ADDR_VAR 0 28
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 1
43719: NEG
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: LD_INT 2
43746: NEG
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 2
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 2
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 2
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: LD_INT 2
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 2
43837: NEG
43838: PUSH
43839: LD_INT 0
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 2
43848: NEG
43849: PUSH
43850: LD_INT 1
43852: NEG
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: LD_INT 2
43864: NEG
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 2
43872: NEG
43873: PUSH
43874: LD_INT 3
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: LD_INT 3
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 3
43896: NEG
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 3
43908: NEG
43909: PUSH
43910: LD_INT 2
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43943: LD_ADDR_VAR 0 29
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: LD_INT 2
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: LD_INT 2
44039: NEG
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 2
44109: NEG
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 2
44121: NEG
44122: PUSH
44123: LD_INT 2
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 2
44133: NEG
44134: PUSH
44135: LD_INT 3
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 2
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 3
44156: PUSH
44157: LD_INT 1
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: LD_INT 3
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 2
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 3
44187: NEG
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44222: LD_ADDR_VAR 0 30
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: LD_INT 2
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: LD_INT 2
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 2
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 2
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: LD_INT 2
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 2
44388: NEG
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 2
44399: NEG
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: LD_INT 3
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: LD_INT 2
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 3
44434: PUSH
44435: LD_INT 2
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 2
44444: PUSH
44445: LD_INT 3
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 2
44454: NEG
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 3
44465: NEG
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44500: LD_ADDR_VAR 0 31
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: LD_INT 1
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: NEG
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 1
44569: NEG
44570: PUSH
44571: LD_INT 1
44573: NEG
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 1
44581: NEG
44582: PUSH
44583: LD_INT 2
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: PUSH
44625: LD_INT 2
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: LD_INT 2
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: LD_INT 1
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: LD_INT 2
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 2
44689: NEG
44690: PUSH
44691: LD_INT 3
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 3
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: LD_INT 3
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: LD_INT 2
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 3
44743: NEG
44744: PUSH
44745: LD_INT 2
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44778: LD_ADDR_VAR 0 32
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 1
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 1
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: LD_INT 2
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 2
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: LD_INT 2
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: LD_INT 2
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: LD_INT 1
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 2
44944: NEG
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 2
44955: NEG
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: LD_INT 3
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 3
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: LD_INT 3
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 3
45021: NEG
45022: PUSH
45023: LD_INT 1
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45056: LD_ADDR_VAR 0 33
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: NEG
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: LD_INT 2
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 2
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 2
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: LD_INT 2
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: LD_INT 2
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 2
45211: NEG
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 2
45222: NEG
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 2
45234: NEG
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 2
45246: NEG
45247: PUSH
45248: LD_INT 3
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 2
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 3
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: LD_INT 3
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: LD_INT 2
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 3
45300: NEG
45301: PUSH
45302: LD_INT 2
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45335: LD_ADDR_VAR 0 34
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 1
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 2
45514: NEG
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: LD_INT 3
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: LD_INT 2
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 3
45549: PUSH
45550: LD_INT 2
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 2
45559: PUSH
45560: LD_INT 3
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 2
45569: NEG
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 3
45580: NEG
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45615: LD_ADDR_VAR 0 35
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 2
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45727: LD_ADDR_VAR 0 36
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: LD_INT 2
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45839: LD_ADDR_VAR 0 37
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45951: LD_ADDR_VAR 0 38
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46063: LD_ADDR_VAR 0 39
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: LD_INT 0
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: LD_INT 1
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: LD_INT 1
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: LD_INT 2
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46175: LD_ADDR_VAR 0 40
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46287: LD_ADDR_VAR 0 41
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: NEG
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 2
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: LD_INT 2
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: LD_INT 2
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 2
46442: NEG
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 2
46453: NEG
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 2
46465: NEG
46466: PUSH
46467: LD_INT 2
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 2
46477: NEG
46478: PUSH
46479: LD_INT 3
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: LD_INT 1
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 3
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 3
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 3
46520: PUSH
46521: LD_INT 2
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 3
46530: PUSH
46531: LD_INT 3
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: LD_INT 3
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 3
46561: NEG
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 3
46572: NEG
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 3
46584: NEG
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 3
46596: NEG
46597: PUSH
46598: LD_INT 3
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46637: LD_ADDR_VAR 0 42
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 2
46815: NEG
46816: PUSH
46817: LD_INT 2
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 2
46827: NEG
46828: PUSH
46829: LD_INT 3
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: LD_INT 3
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 3
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: LD_INT 2
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 3
46873: PUSH
46874: LD_INT 2
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 3
46883: PUSH
46884: LD_INT 3
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: LD_INT 3
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: LD_INT 3
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: LD_INT 3
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 3
46934: NEG
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 3
46946: NEG
46947: PUSH
46948: LD_INT 3
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46987: LD_ADDR_VAR 0 43
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: LD_INT 2
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 2
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 2
47153: NEG
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 2
47164: NEG
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: LD_INT 3
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: LD_INT 3
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: LD_INT 2
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 3
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 3
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: LD_INT 3
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: LD_INT 3
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: LD_INT 2
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 2
47272: NEG
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 3
47283: NEG
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 3
47294: NEG
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47335: LD_ADDR_VAR 0 44
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: LD_INT 2
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 2
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 2
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: LD_INT 2
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: LD_INT 2
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: LD_INT 1
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 2
47501: NEG
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 2
47513: NEG
47514: PUSH
47515: LD_INT 2
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 2
47525: NEG
47526: PUSH
47527: LD_INT 3
47529: NEG
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 3
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 3
47558: PUSH
47559: LD_INT 1
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 3
47568: PUSH
47569: LD_INT 2
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 3
47578: PUSH
47579: LD_INT 3
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 2
47588: PUSH
47589: LD_INT 3
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: NEG
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 3
47609: NEG
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 3
47620: NEG
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 3
47632: NEG
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 3
47644: NEG
47645: PUSH
47646: LD_INT 3
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47685: LD_ADDR_VAR 0 45
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: LD_INT 2
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: LD_INT 2
47781: NEG
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 2
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 2
47810: PUSH
47811: LD_INT 2
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 2
47851: NEG
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 2
47863: NEG
47864: PUSH
47865: LD_INT 2
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 2
47875: NEG
47876: PUSH
47877: LD_INT 3
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: LD_INT 3
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 3
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: LD_INT 2
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 3
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 3
47931: PUSH
47932: LD_INT 3
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 2
47941: PUSH
47942: LD_INT 3
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: LD_INT 3
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: LD_INT 3
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 3
47982: NEG
47983: PUSH
47984: LD_INT 2
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 3
47994: NEG
47995: PUSH
47996: LD_INT 3
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48035: LD_ADDR_VAR 0 46
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: LD_INT 2
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 2
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 2
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 2
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: NEG
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: LD_INT 3
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: LD_INT 3
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: LD_INT 2
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 2
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 3
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 3
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: LD_INT 3
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: LD_INT 3
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: LD_INT 2
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 2
48320: NEG
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 3
48331: NEG
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 3
48342: NEG
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48383: LD_ADDR_VAR 0 47
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: LD_INT 2
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 2
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 1
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 2
48498: NEG
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48534: LD_ADDR_VAR 0 48
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: LD_INT 2
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48681: LD_ADDR_VAR 0 49
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 2
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48825: LD_ADDR_VAR 0 50
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 2
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 2
48916: PUSH
48917: LD_INT 2
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: LD_INT 2
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: LD_INT 2
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48969: LD_ADDR_VAR 0 51
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: LD_INT 2
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: LD_INT 2
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 2
49092: NEG
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49116: LD_ADDR_VAR 0 52
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: LD_INT 2
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: NEG
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: NEG
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: NEG
49244: PUSH
49245: LD_INT 2
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49267: LD_ADDR_VAR 0 53
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: LD_INT 2
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 2
49402: PUSH
49403: LD_INT 2
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: LD_INT 2
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 2
49443: NEG
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 2
49454: NEG
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 2
49466: NEG
49467: PUSH
49468: LD_INT 2
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49497: LD_ADDR_VAR 0 54
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: LD_INT 2
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: LD_INT 2
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49727: LD_ADDR_VAR 0 55
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: LD_INT 2
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: LD_INT 2
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: LD_INT 2
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 2
49903: NEG
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 2
49914: NEG
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 2
49926: NEG
49927: PUSH
49928: LD_INT 2
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49957: LD_ADDR_VAR 0 56
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: LD_INT 2
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: LD_INT 2
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 2
50144: NEG
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 2
50156: NEG
50157: PUSH
50158: LD_INT 2
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50187: LD_ADDR_VAR 0 57
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: LD_INT 2
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: LD_INT 2
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: LD_INT 1
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50417: LD_ADDR_VAR 0 58
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: LD_INT 2
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 2
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: LD_INT 2
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: LD_INT 2
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 2
50604: NEG
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 2
50616: NEG
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50647: LD_ADDR_VAR 0 59
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50735: LD_ADDR_VAR 0 60
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50823: LD_ADDR_VAR 0 61
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50911: LD_ADDR_VAR 0 62
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50999: LD_ADDR_VAR 0 63
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51087: LD_ADDR_VAR 0 64
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: ST_TO_ADDR
// end ; 1 :
51175: GO 57072
51177: LD_INT 1
51179: DOUBLE
51180: EQUAL
51181: IFTRUE 51185
51183: GO 53808
51185: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51186: LD_ADDR_VAR 0 11
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: LD_INT 3
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 3
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: LD_INT 2
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: LIST
51229: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51230: LD_ADDR_VAR 0 12
51234: PUSH
51235: LD_INT 2
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 3
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 3
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: LIST
51270: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51271: LD_ADDR_VAR 0 13
51275: PUSH
51276: LD_INT 3
51278: PUSH
51279: LD_INT 2
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 3
51288: PUSH
51289: LD_INT 3
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 2
51298: PUSH
51299: LD_INT 3
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: LIST
51310: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51311: LD_ADDR_VAR 0 14
51315: PUSH
51316: LD_INT 1
51318: PUSH
51319: LD_INT 3
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: LD_INT 3
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: LIST
51351: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51352: LD_ADDR_VAR 0 15
51356: PUSH
51357: LD_INT 2
51359: NEG
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 3
51370: NEG
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 3
51381: NEG
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: LIST
51395: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51396: LD_ADDR_VAR 0 16
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: LD_INT 3
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 3
51415: NEG
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 3
51427: NEG
51428: PUSH
51429: LD_INT 3
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: LIST
51441: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51442: LD_ADDR_VAR 0 17
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: LD_INT 3
51453: NEG
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: LD_INT 3
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: LD_INT 2
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: LIST
51485: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51486: LD_ADDR_VAR 0 18
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: LD_INT 1
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 3
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 3
51514: PUSH
51515: LD_INT 1
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: LIST
51526: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51527: LD_ADDR_VAR 0 19
51531: PUSH
51532: LD_INT 3
51534: PUSH
51535: LD_INT 2
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 3
51544: PUSH
51545: LD_INT 3
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 2
51554: PUSH
51555: LD_INT 3
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: LIST
51566: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51567: LD_ADDR_VAR 0 20
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: LD_INT 3
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 3
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: LD_INT 2
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: LIST
51607: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51608: LD_ADDR_VAR 0 21
51612: PUSH
51613: LD_INT 2
51615: NEG
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 3
51626: NEG
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 3
51637: NEG
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: LIST
51651: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51652: LD_ADDR_VAR 0 22
51656: PUSH
51657: LD_INT 2
51659: NEG
51660: PUSH
51661: LD_INT 3
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 3
51671: NEG
51672: PUSH
51673: LD_INT 2
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 3
51683: NEG
51684: PUSH
51685: LD_INT 3
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: LIST
51697: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51698: LD_ADDR_VAR 0 23
51702: PUSH
51703: LD_INT 0
51705: PUSH
51706: LD_INT 3
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: LD_INT 4
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: LD_INT 3
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: LIST
51741: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51742: LD_ADDR_VAR 0 24
51746: PUSH
51747: LD_INT 3
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 3
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 4
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: LIST
51782: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51783: LD_ADDR_VAR 0 25
51787: PUSH
51788: LD_INT 3
51790: PUSH
51791: LD_INT 3
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 4
51800: PUSH
51801: LD_INT 3
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 3
51810: PUSH
51811: LD_INT 4
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: LIST
51822: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51823: LD_ADDR_VAR 0 26
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: LD_INT 3
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: LD_INT 4
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: LD_INT 3
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: LIST
51863: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51864: LD_ADDR_VAR 0 27
51868: PUSH
51869: LD_INT 3
51871: NEG
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 3
51882: NEG
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 4
51893: NEG
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: LIST
51907: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51908: LD_ADDR_VAR 0 28
51912: PUSH
51913: LD_INT 3
51915: NEG
51916: PUSH
51917: LD_INT 3
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 3
51927: NEG
51928: PUSH
51929: LD_INT 4
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 4
51939: NEG
51940: PUSH
51941: LD_INT 3
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: LIST
51953: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51954: LD_ADDR_VAR 0 29
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: LD_INT 3
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: LD_INT 3
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 2
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: LD_INT 4
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: LD_INT 4
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: LD_INT 3
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: LD_INT 5
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 5
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: LD_INT 4
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: LD_INT 6
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 6
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: LD_INT 5
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52109: LD_ADDR_VAR 0 30
52113: PUSH
52114: LD_INT 2
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 3
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 3
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 3
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 4
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 4
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 4
52178: PUSH
52179: LD_INT 1
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 5
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 5
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 5
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 6
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 6
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52252: LD_ADDR_VAR 0 31
52256: PUSH
52257: LD_INT 3
52259: PUSH
52260: LD_INT 2
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 3
52269: PUSH
52270: LD_INT 3
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: PUSH
52280: LD_INT 3
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 4
52289: PUSH
52290: LD_INT 3
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 4
52299: PUSH
52300: LD_INT 4
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 3
52309: PUSH
52310: LD_INT 4
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 5
52319: PUSH
52320: LD_INT 4
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 5
52329: PUSH
52330: LD_INT 5
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 4
52339: PUSH
52340: LD_INT 5
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 6
52349: PUSH
52350: LD_INT 5
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 6
52359: PUSH
52360: LD_INT 6
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 5
52369: PUSH
52370: LD_INT 6
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52391: LD_ADDR_VAR 0 32
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: LD_INT 3
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: LD_INT 3
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: LD_INT 4
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: LD_INT 4
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: PUSH
52451: LD_INT 3
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: LD_INT 5
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 5
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: LD_INT 4
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: LD_INT 6
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 6
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 5
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52534: LD_ADDR_VAR 0 33
52538: PUSH
52539: LD_INT 2
52541: NEG
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 3
52552: NEG
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 3
52563: NEG
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 3
52575: NEG
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 4
52586: NEG
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 4
52597: NEG
52598: PUSH
52599: LD_INT 1
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 4
52609: NEG
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 5
52620: NEG
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 5
52631: NEG
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 5
52643: NEG
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 6
52654: NEG
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 6
52665: NEG
52666: PUSH
52667: LD_INT 1
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52689: LD_ADDR_VAR 0 34
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: LD_INT 3
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 3
52708: NEG
52709: PUSH
52710: LD_INT 2
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 3
52720: NEG
52721: PUSH
52722: LD_INT 3
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 3
52732: NEG
52733: PUSH
52734: LD_INT 4
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 4
52744: NEG
52745: PUSH
52746: LD_INT 3
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 4
52756: NEG
52757: PUSH
52758: LD_INT 4
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 4
52768: NEG
52769: PUSH
52770: LD_INT 5
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 5
52780: NEG
52781: PUSH
52782: LD_INT 4
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 5
52792: NEG
52793: PUSH
52794: LD_INT 5
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 5
52804: NEG
52805: PUSH
52806: LD_INT 6
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 6
52816: NEG
52817: PUSH
52818: LD_INT 5
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 6
52828: NEG
52829: PUSH
52830: LD_INT 6
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52852: LD_ADDR_VAR 0 41
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: LD_INT 3
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: LIST
52895: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52896: LD_ADDR_VAR 0 42
52900: PUSH
52901: LD_INT 2
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 2
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 3
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: LIST
52936: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52937: LD_ADDR_VAR 0 43
52941: PUSH
52942: LD_INT 2
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 3
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: LD_INT 3
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: LIST
52976: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52977: LD_ADDR_VAR 0 44
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 2
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: LD_INT 3
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: LD_INT 2
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: LIST
53017: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53018: LD_ADDR_VAR 0 45
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 2
53036: NEG
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 3
53047: NEG
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: LIST
53061: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53062: LD_ADDR_VAR 0 46
53066: PUSH
53067: LD_INT 2
53069: NEG
53070: PUSH
53071: LD_INT 2
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 2
53081: NEG
53082: PUSH
53083: LD_INT 3
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 3
53093: NEG
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: LIST
53107: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53108: LD_ADDR_VAR 0 47
53112: PUSH
53113: LD_INT 2
53115: NEG
53116: PUSH
53117: LD_INT 3
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: LD_INT 3
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53141: LD_ADDR_VAR 0 48
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 2
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53172: LD_ADDR_VAR 0 49
53176: PUSH
53177: LD_INT 3
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 3
53189: PUSH
53190: LD_INT 2
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53201: LD_ADDR_VAR 0 50
53205: PUSH
53206: LD_INT 2
53208: PUSH
53209: LD_INT 3
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: LD_INT 3
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53230: LD_ADDR_VAR 0 51
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: LD_INT 2
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 2
53248: NEG
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53261: LD_ADDR_VAR 0 52
53265: PUSH
53266: LD_INT 3
53268: NEG
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 3
53280: NEG
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53294: LD_ADDR_VAR 0 53
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: LD_INT 3
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: LD_INT 3
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: LD_INT 2
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: LIST
53337: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53338: LD_ADDR_VAR 0 54
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 3
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 3
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: LIST
53378: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53379: LD_ADDR_VAR 0 55
53383: PUSH
53384: LD_INT 3
53386: PUSH
53387: LD_INT 2
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 3
53396: PUSH
53397: LD_INT 3
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 2
53406: PUSH
53407: LD_INT 3
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: LIST
53418: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53419: LD_ADDR_VAR 0 56
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: LD_INT 3
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: LD_INT 3
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: LIST
53459: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53460: LD_ADDR_VAR 0 57
53464: PUSH
53465: LD_INT 2
53467: NEG
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 3
53478: NEG
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 3
53489: NEG
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: LIST
53503: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53504: LD_ADDR_VAR 0 58
53508: PUSH
53509: LD_INT 2
53511: NEG
53512: PUSH
53513: LD_INT 3
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 3
53523: NEG
53524: PUSH
53525: LD_INT 2
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 3
53535: NEG
53536: PUSH
53537: LD_INT 3
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: LIST
53549: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53550: LD_ADDR_VAR 0 59
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: LD_INT 2
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: LIST
53593: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53594: LD_ADDR_VAR 0 60
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 2
53622: PUSH
53623: LD_INT 1
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: LIST
53634: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53635: LD_ADDR_VAR 0 61
53639: PUSH
53640: LD_INT 2
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 2
53652: PUSH
53653: LD_INT 2
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: LIST
53674: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53675: LD_ADDR_VAR 0 62
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: LD_INT 2
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: LIST
53715: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53716: LD_ADDR_VAR 0 63
53720: PUSH
53721: LD_INT 1
53723: NEG
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 2
53745: NEG
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: LIST
53759: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53760: LD_ADDR_VAR 0 64
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: LD_INT 2
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: NEG
53792: PUSH
53793: LD_INT 2
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: LIST
53805: ST_TO_ADDR
// end ; 2 :
53806: GO 57072
53808: LD_INT 2
53810: DOUBLE
53811: EQUAL
53812: IFTRUE 53816
53814: GO 57071
53816: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53817: LD_ADDR_VAR 0 29
53821: PUSH
53822: LD_INT 4
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 4
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 5
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 5
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 4
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 3
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 3
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 3
53896: PUSH
53897: LD_INT 2
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 5
53907: PUSH
53908: LD_INT 2
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 3
53917: PUSH
53918: LD_INT 3
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 3
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 4
53937: PUSH
53938: LD_INT 3
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 4
53947: PUSH
53948: LD_INT 4
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 3
53957: PUSH
53958: LD_INT 4
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 2
53967: PUSH
53968: LD_INT 3
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 4
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: LD_INT 4
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: LD_INT 4
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 3
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: LD_INT 4
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: LD_INT 5
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: LD_INT 5
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: LD_INT 4
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: LD_INT 3
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: LD_INT 5
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 2
54089: NEG
54090: PUSH
54091: LD_INT 3
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 3
54100: NEG
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 3
54111: NEG
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: NEG
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 2
54134: NEG
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 3
54145: NEG
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 4
54156: NEG
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 4
54167: NEG
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 4
54179: NEG
54180: PUSH
54181: LD_INT 2
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 2
54191: NEG
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 4
54202: NEG
54203: PUSH
54204: LD_INT 4
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 4
54214: NEG
54215: PUSH
54216: LD_INT 5
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 3
54226: NEG
54227: PUSH
54228: LD_INT 4
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 3
54238: NEG
54239: PUSH
54240: LD_INT 3
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 4
54250: NEG
54251: PUSH
54252: LD_INT 3
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 5
54262: NEG
54263: PUSH
54264: LD_INT 4
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 5
54274: NEG
54275: PUSH
54276: LD_INT 5
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 3
54286: NEG
54287: PUSH
54288: LD_INT 5
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 5
54298: NEG
54299: PUSH
54300: LD_INT 3
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54355: LD_ADDR_VAR 0 30
54359: PUSH
54360: LD_INT 4
54362: PUSH
54363: LD_INT 4
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 4
54372: PUSH
54373: LD_INT 3
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 5
54382: PUSH
54383: LD_INT 4
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 5
54392: PUSH
54393: LD_INT 5
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 4
54402: PUSH
54403: LD_INT 5
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 3
54412: PUSH
54413: LD_INT 4
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 3
54422: PUSH
54423: LD_INT 3
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 5
54432: PUSH
54433: LD_INT 3
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 3
54442: PUSH
54443: LD_INT 5
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: LD_INT 3
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: LD_INT 3
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: LD_INT 4
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: LD_INT 4
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: LD_INT 3
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: LD_INT 2
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: LD_INT 4
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 4
54545: NEG
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 4
54556: NEG
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 3
54568: NEG
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 3
54579: NEG
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 4
54590: NEG
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 5
54601: NEG
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 5
54612: NEG
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 5
54624: NEG
54625: PUSH
54626: LD_INT 2
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 3
54636: NEG
54637: PUSH
54638: LD_INT 2
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 3
54647: NEG
54648: PUSH
54649: LD_INT 3
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 3
54659: NEG
54660: PUSH
54661: LD_INT 4
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: LD_INT 3
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 3
54695: NEG
54696: PUSH
54697: LD_INT 2
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 4
54707: NEG
54708: PUSH
54709: LD_INT 3
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 4
54719: NEG
54720: PUSH
54721: LD_INT 4
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 2
54731: NEG
54732: PUSH
54733: LD_INT 4
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 4
54743: NEG
54744: PUSH
54745: LD_INT 2
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 4
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 5
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: LD_INT 4
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: LD_INT 3
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: LD_INT 3
54802: NEG
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: LD_INT 4
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: LD_INT 5
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: LD_INT 3
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 2
54845: NEG
54846: PUSH
54847: LD_INT 5
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54902: LD_ADDR_VAR 0 31
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: LD_INT 4
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: LD_INT 3
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: LD_INT 4
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: LD_INT 5
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 5
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: LD_INT 4
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: LD_INT 3
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: LD_INT 5
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: LD_INT 3
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 3
55002: NEG
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 3
55013: NEG
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: NEG
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 3
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 4
55058: NEG
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 4
55069: NEG
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 4
55081: NEG
55082: PUSH
55083: LD_INT 2
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 4
55104: NEG
55105: PUSH
55106: LD_INT 4
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 4
55116: NEG
55117: PUSH
55118: LD_INT 5
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 3
55128: NEG
55129: PUSH
55130: LD_INT 4
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 3
55140: NEG
55141: PUSH
55142: LD_INT 3
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 4
55152: NEG
55153: PUSH
55154: LD_INT 3
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 5
55164: NEG
55165: PUSH
55166: LD_INT 4
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 5
55176: NEG
55177: PUSH
55178: LD_INT 5
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 3
55188: NEG
55189: PUSH
55190: LD_INT 5
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 5
55200: NEG
55201: PUSH
55202: LD_INT 3
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: LD_INT 3
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: LD_INT 4
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: LD_INT 3
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: LD_INT 2
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 2
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: LD_INT 3
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 1
55279: NEG
55280: PUSH
55281: LD_INT 4
55283: NEG
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 2
55291: PUSH
55292: LD_INT 2
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 2
55302: NEG
55303: PUSH
55304: LD_INT 4
55306: NEG
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 4
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 4
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 5
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 5
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 4
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 3
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 3
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 3
55386: PUSH
55387: LD_INT 2
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 5
55397: PUSH
55398: LD_INT 2
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55452: LD_ADDR_VAR 0 32
55456: PUSH
55457: LD_INT 4
55459: NEG
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 4
55470: NEG
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 3
55482: NEG
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 3
55493: NEG
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 4
55504: NEG
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 5
55515: NEG
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 5
55526: NEG
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 5
55538: NEG
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 3
55550: NEG
55551: PUSH
55552: LD_INT 2
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 3
55561: NEG
55562: PUSH
55563: LD_INT 3
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 3
55573: NEG
55574: PUSH
55575: LD_INT 4
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 2
55585: NEG
55586: PUSH
55587: LD_INT 3
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: LD_INT 2
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 3
55609: NEG
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 4
55621: NEG
55622: PUSH
55623: LD_INT 3
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 4
55633: NEG
55634: PUSH
55635: LD_INT 4
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: LD_INT 4
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 4
55657: NEG
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: LD_INT 4
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: LD_INT 5
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: LD_INT 4
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: LD_INT 3
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: LD_INT 3
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: NEG
55725: PUSH
55726: LD_INT 4
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: LD_INT 5
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: PUSH
55749: LD_INT 3
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: LD_INT 5
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 3
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 3
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 4
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 4
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 3
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 2
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: LD_INT 2
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 4
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 4
55864: PUSH
55865: LD_INT 4
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 4
55874: PUSH
55875: LD_INT 3
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 5
55884: PUSH
55885: LD_INT 4
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 5
55894: PUSH
55895: LD_INT 5
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 4
55904: PUSH
55905: LD_INT 5
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 3
55914: PUSH
55915: LD_INT 4
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 3
55924: PUSH
55925: LD_INT 3
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 5
55934: PUSH
55935: LD_INT 3
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 3
55944: PUSH
55945: LD_INT 5
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55999: LD_ADDR_VAR 0 33
56003: PUSH
56004: LD_INT 4
56006: NEG
56007: PUSH
56008: LD_INT 4
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 4
56018: NEG
56019: PUSH
56020: LD_INT 5
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 3
56030: NEG
56031: PUSH
56032: LD_INT 4
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 3
56042: NEG
56043: PUSH
56044: LD_INT 3
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 4
56054: NEG
56055: PUSH
56056: LD_INT 3
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 5
56066: NEG
56067: PUSH
56068: LD_INT 4
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 5
56078: NEG
56079: PUSH
56080: LD_INT 5
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 3
56090: NEG
56091: PUSH
56092: LD_INT 5
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 5
56102: NEG
56103: PUSH
56104: LD_INT 3
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 3
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: LD_INT 4
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: LD_INT 3
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: LD_INT 2
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: LD_INT 2
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 3
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: LD_INT 4
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 2
56204: NEG
56205: PUSH
56206: LD_INT 4
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 4
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 4
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 5
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 5
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 4
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 3
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 3
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 5
56299: PUSH
56300: LD_INT 2
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 3
56309: PUSH
56310: LD_INT 3
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 3
56319: PUSH
56320: LD_INT 2
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 4
56329: PUSH
56330: LD_INT 3
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 4
56339: PUSH
56340: LD_INT 4
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 3
56349: PUSH
56350: LD_INT 4
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: LD_INT 3
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 2
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 4
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: LD_INT 4
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: LD_INT 4
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: LD_INT 3
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: LD_INT 4
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 1
56429: PUSH
56430: LD_INT 5
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: LD_INT 5
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: LD_INT 4
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 2
56471: PUSH
56472: LD_INT 5
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 2
56481: NEG
56482: PUSH
56483: LD_INT 3
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56537: LD_ADDR_VAR 0 34
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: LD_INT 4
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: LD_INT 5
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 4
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: LD_INT 3
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 3
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: LD_INT 4
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: LD_INT 5
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 2
56623: PUSH
56624: LD_INT 3
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: NEG
56635: PUSH
56636: LD_INT 5
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 3
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 3
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 4
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 4
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 3
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 2
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 2
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 2
56718: PUSH
56719: LD_INT 2
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 4
56729: PUSH
56730: LD_INT 2
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 4
56739: PUSH
56740: LD_INT 4
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 4
56749: PUSH
56750: LD_INT 3
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 5
56759: PUSH
56760: LD_INT 4
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 5
56769: PUSH
56770: LD_INT 5
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 4
56779: PUSH
56780: LD_INT 5
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 3
56789: PUSH
56790: LD_INT 4
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 3
56799: PUSH
56800: LD_INT 3
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 5
56809: PUSH
56810: LD_INT 3
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 3
56819: PUSH
56820: LD_INT 5
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: LD_INT 3
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 2
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: LD_INT 3
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 4
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: LD_INT 4
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: LD_INT 3
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: LD_INT 2
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 2
56901: PUSH
56902: LD_INT 4
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: LD_INT 2
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 4
56922: NEG
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 4
56933: NEG
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 3
56945: NEG
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 3
56956: NEG
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 4
56967: NEG
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 5
56978: NEG
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 5
56989: NEG
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 5
57001: NEG
57002: PUSH
57003: LD_INT 2
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 3
57013: NEG
57014: PUSH
57015: LD_INT 2
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: ST_TO_ADDR
// end ; end ;
57069: GO 57072
57071: POP
// case btype of b_depot , b_warehouse :
57072: LD_VAR 0 1
57076: PUSH
57077: LD_INT 0
57079: DOUBLE
57080: EQUAL
57081: IFTRUE 57091
57083: LD_INT 1
57085: DOUBLE
57086: EQUAL
57087: IFTRUE 57091
57089: GO 57292
57091: POP
// case nation of nation_american :
57092: LD_VAR 0 5
57096: PUSH
57097: LD_INT 1
57099: DOUBLE
57100: EQUAL
57101: IFTRUE 57105
57103: GO 57161
57105: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57106: LD_ADDR_VAR 0 9
57110: PUSH
57111: LD_VAR 0 11
57115: PUSH
57116: LD_VAR 0 12
57120: PUSH
57121: LD_VAR 0 13
57125: PUSH
57126: LD_VAR 0 14
57130: PUSH
57131: LD_VAR 0 15
57135: PUSH
57136: LD_VAR 0 16
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: PUSH
57149: LD_VAR 0 4
57153: PUSH
57154: LD_INT 1
57156: PLUS
57157: ARRAY
57158: ST_TO_ADDR
57159: GO 57290
57161: LD_INT 2
57163: DOUBLE
57164: EQUAL
57165: IFTRUE 57169
57167: GO 57225
57169: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57170: LD_ADDR_VAR 0 9
57174: PUSH
57175: LD_VAR 0 17
57179: PUSH
57180: LD_VAR 0 18
57184: PUSH
57185: LD_VAR 0 19
57189: PUSH
57190: LD_VAR 0 20
57194: PUSH
57195: LD_VAR 0 21
57199: PUSH
57200: LD_VAR 0 22
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: PUSH
57213: LD_VAR 0 4
57217: PUSH
57218: LD_INT 1
57220: PLUS
57221: ARRAY
57222: ST_TO_ADDR
57223: GO 57290
57225: LD_INT 3
57227: DOUBLE
57228: EQUAL
57229: IFTRUE 57233
57231: GO 57289
57233: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57234: LD_ADDR_VAR 0 9
57238: PUSH
57239: LD_VAR 0 23
57243: PUSH
57244: LD_VAR 0 24
57248: PUSH
57249: LD_VAR 0 25
57253: PUSH
57254: LD_VAR 0 26
57258: PUSH
57259: LD_VAR 0 27
57263: PUSH
57264: LD_VAR 0 28
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: PUSH
57277: LD_VAR 0 4
57281: PUSH
57282: LD_INT 1
57284: PLUS
57285: ARRAY
57286: ST_TO_ADDR
57287: GO 57290
57289: POP
57290: GO 57845
57292: LD_INT 2
57294: DOUBLE
57295: EQUAL
57296: IFTRUE 57306
57298: LD_INT 3
57300: DOUBLE
57301: EQUAL
57302: IFTRUE 57306
57304: GO 57362
57306: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57307: LD_ADDR_VAR 0 9
57311: PUSH
57312: LD_VAR 0 29
57316: PUSH
57317: LD_VAR 0 30
57321: PUSH
57322: LD_VAR 0 31
57326: PUSH
57327: LD_VAR 0 32
57331: PUSH
57332: LD_VAR 0 33
57336: PUSH
57337: LD_VAR 0 34
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: PUSH
57350: LD_VAR 0 4
57354: PUSH
57355: LD_INT 1
57357: PLUS
57358: ARRAY
57359: ST_TO_ADDR
57360: GO 57845
57362: LD_INT 16
57364: DOUBLE
57365: EQUAL
57366: IFTRUE 57424
57368: LD_INT 17
57370: DOUBLE
57371: EQUAL
57372: IFTRUE 57424
57374: LD_INT 18
57376: DOUBLE
57377: EQUAL
57378: IFTRUE 57424
57380: LD_INT 19
57382: DOUBLE
57383: EQUAL
57384: IFTRUE 57424
57386: LD_INT 22
57388: DOUBLE
57389: EQUAL
57390: IFTRUE 57424
57392: LD_INT 20
57394: DOUBLE
57395: EQUAL
57396: IFTRUE 57424
57398: LD_INT 21
57400: DOUBLE
57401: EQUAL
57402: IFTRUE 57424
57404: LD_INT 23
57406: DOUBLE
57407: EQUAL
57408: IFTRUE 57424
57410: LD_INT 24
57412: DOUBLE
57413: EQUAL
57414: IFTRUE 57424
57416: LD_INT 25
57418: DOUBLE
57419: EQUAL
57420: IFTRUE 57424
57422: GO 57480
57424: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57425: LD_ADDR_VAR 0 9
57429: PUSH
57430: LD_VAR 0 35
57434: PUSH
57435: LD_VAR 0 36
57439: PUSH
57440: LD_VAR 0 37
57444: PUSH
57445: LD_VAR 0 38
57449: PUSH
57450: LD_VAR 0 39
57454: PUSH
57455: LD_VAR 0 40
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: PUSH
57468: LD_VAR 0 4
57472: PUSH
57473: LD_INT 1
57475: PLUS
57476: ARRAY
57477: ST_TO_ADDR
57478: GO 57845
57480: LD_INT 6
57482: DOUBLE
57483: EQUAL
57484: IFTRUE 57536
57486: LD_INT 7
57488: DOUBLE
57489: EQUAL
57490: IFTRUE 57536
57492: LD_INT 8
57494: DOUBLE
57495: EQUAL
57496: IFTRUE 57536
57498: LD_INT 13
57500: DOUBLE
57501: EQUAL
57502: IFTRUE 57536
57504: LD_INT 12
57506: DOUBLE
57507: EQUAL
57508: IFTRUE 57536
57510: LD_INT 15
57512: DOUBLE
57513: EQUAL
57514: IFTRUE 57536
57516: LD_INT 11
57518: DOUBLE
57519: EQUAL
57520: IFTRUE 57536
57522: LD_INT 14
57524: DOUBLE
57525: EQUAL
57526: IFTRUE 57536
57528: LD_INT 10
57530: DOUBLE
57531: EQUAL
57532: IFTRUE 57536
57534: GO 57592
57536: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57537: LD_ADDR_VAR 0 9
57541: PUSH
57542: LD_VAR 0 41
57546: PUSH
57547: LD_VAR 0 42
57551: PUSH
57552: LD_VAR 0 43
57556: PUSH
57557: LD_VAR 0 44
57561: PUSH
57562: LD_VAR 0 45
57566: PUSH
57567: LD_VAR 0 46
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: PUSH
57580: LD_VAR 0 4
57584: PUSH
57585: LD_INT 1
57587: PLUS
57588: ARRAY
57589: ST_TO_ADDR
57590: GO 57845
57592: LD_INT 36
57594: DOUBLE
57595: EQUAL
57596: IFTRUE 57600
57598: GO 57656
57600: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57601: LD_ADDR_VAR 0 9
57605: PUSH
57606: LD_VAR 0 47
57610: PUSH
57611: LD_VAR 0 48
57615: PUSH
57616: LD_VAR 0 49
57620: PUSH
57621: LD_VAR 0 50
57625: PUSH
57626: LD_VAR 0 51
57630: PUSH
57631: LD_VAR 0 52
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: PUSH
57644: LD_VAR 0 4
57648: PUSH
57649: LD_INT 1
57651: PLUS
57652: ARRAY
57653: ST_TO_ADDR
57654: GO 57845
57656: LD_INT 4
57658: DOUBLE
57659: EQUAL
57660: IFTRUE 57682
57662: LD_INT 5
57664: DOUBLE
57665: EQUAL
57666: IFTRUE 57682
57668: LD_INT 34
57670: DOUBLE
57671: EQUAL
57672: IFTRUE 57682
57674: LD_INT 37
57676: DOUBLE
57677: EQUAL
57678: IFTRUE 57682
57680: GO 57738
57682: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57683: LD_ADDR_VAR 0 9
57687: PUSH
57688: LD_VAR 0 53
57692: PUSH
57693: LD_VAR 0 54
57697: PUSH
57698: LD_VAR 0 55
57702: PUSH
57703: LD_VAR 0 56
57707: PUSH
57708: LD_VAR 0 57
57712: PUSH
57713: LD_VAR 0 58
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: PUSH
57726: LD_VAR 0 4
57730: PUSH
57731: LD_INT 1
57733: PLUS
57734: ARRAY
57735: ST_TO_ADDR
57736: GO 57845
57738: LD_INT 31
57740: DOUBLE
57741: EQUAL
57742: IFTRUE 57788
57744: LD_INT 32
57746: DOUBLE
57747: EQUAL
57748: IFTRUE 57788
57750: LD_INT 33
57752: DOUBLE
57753: EQUAL
57754: IFTRUE 57788
57756: LD_INT 27
57758: DOUBLE
57759: EQUAL
57760: IFTRUE 57788
57762: LD_INT 26
57764: DOUBLE
57765: EQUAL
57766: IFTRUE 57788
57768: LD_INT 28
57770: DOUBLE
57771: EQUAL
57772: IFTRUE 57788
57774: LD_INT 29
57776: DOUBLE
57777: EQUAL
57778: IFTRUE 57788
57780: LD_INT 30
57782: DOUBLE
57783: EQUAL
57784: IFTRUE 57788
57786: GO 57844
57788: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57789: LD_ADDR_VAR 0 9
57793: PUSH
57794: LD_VAR 0 59
57798: PUSH
57799: LD_VAR 0 60
57803: PUSH
57804: LD_VAR 0 61
57808: PUSH
57809: LD_VAR 0 62
57813: PUSH
57814: LD_VAR 0 63
57818: PUSH
57819: LD_VAR 0 64
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: PUSH
57832: LD_VAR 0 4
57836: PUSH
57837: LD_INT 1
57839: PLUS
57840: ARRAY
57841: ST_TO_ADDR
57842: GO 57845
57844: POP
// temp_list2 = [ ] ;
57845: LD_ADDR_VAR 0 10
57849: PUSH
57850: EMPTY
57851: ST_TO_ADDR
// for i in temp_list do
57852: LD_ADDR_VAR 0 8
57856: PUSH
57857: LD_VAR 0 9
57861: PUSH
57862: FOR_IN
57863: IFFALSE 57915
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57865: LD_ADDR_VAR 0 10
57869: PUSH
57870: LD_VAR 0 10
57874: PUSH
57875: LD_VAR 0 8
57879: PUSH
57880: LD_INT 1
57882: ARRAY
57883: PUSH
57884: LD_VAR 0 2
57888: PLUS
57889: PUSH
57890: LD_VAR 0 8
57894: PUSH
57895: LD_INT 2
57897: ARRAY
57898: PUSH
57899: LD_VAR 0 3
57903: PLUS
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: EMPTY
57910: LIST
57911: ADD
57912: ST_TO_ADDR
57913: GO 57862
57915: POP
57916: POP
// result = temp_list2 ;
57917: LD_ADDR_VAR 0 7
57921: PUSH
57922: LD_VAR 0 10
57926: ST_TO_ADDR
// end ;
57927: LD_VAR 0 7
57931: RET
// export function EnemyInRange ( unit , dist ) ; begin
57932: LD_INT 0
57934: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57935: LD_ADDR_VAR 0 3
57939: PUSH
57940: LD_VAR 0 1
57944: PPUSH
57945: CALL_OW 255
57949: PPUSH
57950: LD_VAR 0 1
57954: PPUSH
57955: CALL_OW 250
57959: PPUSH
57960: LD_VAR 0 1
57964: PPUSH
57965: CALL_OW 251
57969: PPUSH
57970: LD_VAR 0 2
57974: PPUSH
57975: CALL 31328 0 4
57979: PUSH
57980: LD_INT 4
57982: ARRAY
57983: ST_TO_ADDR
// end ;
57984: LD_VAR 0 3
57988: RET
// export function PlayerSeeMe ( unit ) ; begin
57989: LD_INT 0
57991: PPUSH
// result := See ( your_side , unit ) ;
57992: LD_ADDR_VAR 0 2
57996: PUSH
57997: LD_OWVAR 2
58001: PPUSH
58002: LD_VAR 0 1
58006: PPUSH
58007: CALL_OW 292
58011: ST_TO_ADDR
// end ;
58012: LD_VAR 0 2
58016: RET
// export function ReverseDir ( unit ) ; begin
58017: LD_INT 0
58019: PPUSH
// if not unit then
58020: LD_VAR 0 1
58024: NOT
58025: IFFALSE 58029
// exit ;
58027: GO 58052
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58029: LD_ADDR_VAR 0 2
58033: PUSH
58034: LD_VAR 0 1
58038: PPUSH
58039: CALL_OW 254
58043: PUSH
58044: LD_INT 3
58046: PLUS
58047: PUSH
58048: LD_INT 6
58050: MOD
58051: ST_TO_ADDR
// end ;
58052: LD_VAR 0 2
58056: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58057: LD_INT 0
58059: PPUSH
58060: PPUSH
58061: PPUSH
58062: PPUSH
58063: PPUSH
// if not hexes then
58064: LD_VAR 0 2
58068: NOT
58069: IFFALSE 58073
// exit ;
58071: GO 58221
// dist := 9999 ;
58073: LD_ADDR_VAR 0 5
58077: PUSH
58078: LD_INT 9999
58080: ST_TO_ADDR
// for i = 1 to hexes do
58081: LD_ADDR_VAR 0 4
58085: PUSH
58086: DOUBLE
58087: LD_INT 1
58089: DEC
58090: ST_TO_ADDR
58091: LD_VAR 0 2
58095: PUSH
58096: FOR_TO
58097: IFFALSE 58209
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58099: LD_VAR 0 1
58103: PPUSH
58104: LD_VAR 0 2
58108: PUSH
58109: LD_VAR 0 4
58113: ARRAY
58114: PUSH
58115: LD_INT 1
58117: ARRAY
58118: PPUSH
58119: LD_VAR 0 2
58123: PUSH
58124: LD_VAR 0 4
58128: ARRAY
58129: PUSH
58130: LD_INT 2
58132: ARRAY
58133: PPUSH
58134: CALL_OW 297
58138: PUSH
58139: LD_VAR 0 5
58143: LESS
58144: IFFALSE 58207
// begin hex := hexes [ i ] ;
58146: LD_ADDR_VAR 0 7
58150: PUSH
58151: LD_VAR 0 2
58155: PUSH
58156: LD_VAR 0 4
58160: ARRAY
58161: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58162: LD_ADDR_VAR 0 5
58166: PUSH
58167: LD_VAR 0 1
58171: PPUSH
58172: LD_VAR 0 2
58176: PUSH
58177: LD_VAR 0 4
58181: ARRAY
58182: PUSH
58183: LD_INT 1
58185: ARRAY
58186: PPUSH
58187: LD_VAR 0 2
58191: PUSH
58192: LD_VAR 0 4
58196: ARRAY
58197: PUSH
58198: LD_INT 2
58200: ARRAY
58201: PPUSH
58202: CALL_OW 297
58206: ST_TO_ADDR
// end ; end ;
58207: GO 58096
58209: POP
58210: POP
// result := hex ;
58211: LD_ADDR_VAR 0 3
58215: PUSH
58216: LD_VAR 0 7
58220: ST_TO_ADDR
// end ;
58221: LD_VAR 0 3
58225: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58226: LD_INT 0
58228: PPUSH
58229: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58230: LD_VAR 0 1
58234: NOT
58235: PUSH
58236: LD_VAR 0 1
58240: PUSH
58241: LD_INT 21
58243: PUSH
58244: LD_INT 2
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 23
58253: PUSH
58254: LD_INT 2
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PPUSH
58265: CALL_OW 69
58269: IN
58270: NOT
58271: OR
58272: IFFALSE 58276
// exit ;
58274: GO 58323
// for i = 1 to 3 do
58276: LD_ADDR_VAR 0 3
58280: PUSH
58281: DOUBLE
58282: LD_INT 1
58284: DEC
58285: ST_TO_ADDR
58286: LD_INT 3
58288: PUSH
58289: FOR_TO
58290: IFFALSE 58321
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58292: LD_VAR 0 1
58296: PPUSH
58297: CALL_OW 250
58301: PPUSH
58302: LD_VAR 0 1
58306: PPUSH
58307: CALL_OW 251
58311: PPUSH
58312: LD_INT 1
58314: PPUSH
58315: CALL_OW 453
58319: GO 58289
58321: POP
58322: POP
// end ;
58323: LD_VAR 0 2
58327: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58328: LD_INT 0
58330: PPUSH
58331: PPUSH
58332: PPUSH
58333: PPUSH
58334: PPUSH
58335: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58336: LD_VAR 0 1
58340: NOT
58341: PUSH
58342: LD_VAR 0 2
58346: NOT
58347: OR
58348: PUSH
58349: LD_VAR 0 1
58353: PPUSH
58354: CALL_OW 314
58358: OR
58359: IFFALSE 58363
// exit ;
58361: GO 58804
// x := GetX ( enemy_unit ) ;
58363: LD_ADDR_VAR 0 7
58367: PUSH
58368: LD_VAR 0 2
58372: PPUSH
58373: CALL_OW 250
58377: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58378: LD_ADDR_VAR 0 8
58382: PUSH
58383: LD_VAR 0 2
58387: PPUSH
58388: CALL_OW 251
58392: ST_TO_ADDR
// if not x or not y then
58393: LD_VAR 0 7
58397: NOT
58398: PUSH
58399: LD_VAR 0 8
58403: NOT
58404: OR
58405: IFFALSE 58409
// exit ;
58407: GO 58804
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58409: LD_ADDR_VAR 0 6
58413: PUSH
58414: LD_VAR 0 7
58418: PPUSH
58419: LD_INT 0
58421: PPUSH
58422: LD_INT 4
58424: PPUSH
58425: CALL_OW 272
58429: PUSH
58430: LD_VAR 0 8
58434: PPUSH
58435: LD_INT 0
58437: PPUSH
58438: LD_INT 4
58440: PPUSH
58441: CALL_OW 273
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_VAR 0 7
58454: PPUSH
58455: LD_INT 1
58457: PPUSH
58458: LD_INT 4
58460: PPUSH
58461: CALL_OW 272
58465: PUSH
58466: LD_VAR 0 8
58470: PPUSH
58471: LD_INT 1
58473: PPUSH
58474: LD_INT 4
58476: PPUSH
58477: CALL_OW 273
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_VAR 0 7
58490: PPUSH
58491: LD_INT 2
58493: PPUSH
58494: LD_INT 4
58496: PPUSH
58497: CALL_OW 272
58501: PUSH
58502: LD_VAR 0 8
58506: PPUSH
58507: LD_INT 2
58509: PPUSH
58510: LD_INT 4
58512: PPUSH
58513: CALL_OW 273
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_VAR 0 7
58526: PPUSH
58527: LD_INT 3
58529: PPUSH
58530: LD_INT 4
58532: PPUSH
58533: CALL_OW 272
58537: PUSH
58538: LD_VAR 0 8
58542: PPUSH
58543: LD_INT 3
58545: PPUSH
58546: LD_INT 4
58548: PPUSH
58549: CALL_OW 273
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_VAR 0 7
58562: PPUSH
58563: LD_INT 4
58565: PPUSH
58566: LD_INT 4
58568: PPUSH
58569: CALL_OW 272
58573: PUSH
58574: LD_VAR 0 8
58578: PPUSH
58579: LD_INT 4
58581: PPUSH
58582: LD_INT 4
58584: PPUSH
58585: CALL_OW 273
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_VAR 0 7
58598: PPUSH
58599: LD_INT 5
58601: PPUSH
58602: LD_INT 4
58604: PPUSH
58605: CALL_OW 272
58609: PUSH
58610: LD_VAR 0 8
58614: PPUSH
58615: LD_INT 5
58617: PPUSH
58618: LD_INT 4
58620: PPUSH
58621: CALL_OW 273
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: ST_TO_ADDR
// for i = tmp downto 1 do
58638: LD_ADDR_VAR 0 4
58642: PUSH
58643: DOUBLE
58644: LD_VAR 0 6
58648: INC
58649: ST_TO_ADDR
58650: LD_INT 1
58652: PUSH
58653: FOR_DOWNTO
58654: IFFALSE 58755
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58656: LD_VAR 0 6
58660: PUSH
58661: LD_VAR 0 4
58665: ARRAY
58666: PUSH
58667: LD_INT 1
58669: ARRAY
58670: PPUSH
58671: LD_VAR 0 6
58675: PUSH
58676: LD_VAR 0 4
58680: ARRAY
58681: PUSH
58682: LD_INT 2
58684: ARRAY
58685: PPUSH
58686: CALL_OW 488
58690: NOT
58691: PUSH
58692: LD_VAR 0 6
58696: PUSH
58697: LD_VAR 0 4
58701: ARRAY
58702: PUSH
58703: LD_INT 1
58705: ARRAY
58706: PPUSH
58707: LD_VAR 0 6
58711: PUSH
58712: LD_VAR 0 4
58716: ARRAY
58717: PUSH
58718: LD_INT 2
58720: ARRAY
58721: PPUSH
58722: CALL_OW 428
58726: PUSH
58727: LD_INT 0
58729: NONEQUAL
58730: OR
58731: IFFALSE 58753
// tmp := Delete ( tmp , i ) ;
58733: LD_ADDR_VAR 0 6
58737: PUSH
58738: LD_VAR 0 6
58742: PPUSH
58743: LD_VAR 0 4
58747: PPUSH
58748: CALL_OW 3
58752: ST_TO_ADDR
58753: GO 58653
58755: POP
58756: POP
// j := GetClosestHex ( unit , tmp ) ;
58757: LD_ADDR_VAR 0 5
58761: PUSH
58762: LD_VAR 0 1
58766: PPUSH
58767: LD_VAR 0 6
58771: PPUSH
58772: CALL 58057 0 2
58776: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58777: LD_VAR 0 1
58781: PPUSH
58782: LD_VAR 0 5
58786: PUSH
58787: LD_INT 1
58789: ARRAY
58790: PPUSH
58791: LD_VAR 0 5
58795: PUSH
58796: LD_INT 2
58798: ARRAY
58799: PPUSH
58800: CALL_OW 111
// end ;
58804: LD_VAR 0 3
58808: RET
// export function PrepareApemanSoldier ( ) ; begin
58809: LD_INT 0
58811: PPUSH
// uc_nation := 0 ;
58812: LD_ADDR_OWVAR 21
58816: PUSH
58817: LD_INT 0
58819: ST_TO_ADDR
// hc_sex := sex_male ;
58820: LD_ADDR_OWVAR 27
58824: PUSH
58825: LD_INT 1
58827: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58828: LD_ADDR_OWVAR 28
58832: PUSH
58833: LD_INT 15
58835: ST_TO_ADDR
// hc_gallery :=  ;
58836: LD_ADDR_OWVAR 33
58840: PUSH
58841: LD_STRING 
58843: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58844: LD_ADDR_OWVAR 31
58848: PUSH
58849: LD_INT 0
58851: PPUSH
58852: LD_INT 3
58854: PPUSH
58855: CALL_OW 12
58859: PUSH
58860: LD_INT 0
58862: PPUSH
58863: LD_INT 3
58865: PPUSH
58866: CALL_OW 12
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: ST_TO_ADDR
// end ;
58883: LD_VAR 0 1
58887: RET
// export function PrepareApemanEngineer ( ) ; begin
58888: LD_INT 0
58890: PPUSH
// uc_nation := 0 ;
58891: LD_ADDR_OWVAR 21
58895: PUSH
58896: LD_INT 0
58898: ST_TO_ADDR
// hc_sex := sex_male ;
58899: LD_ADDR_OWVAR 27
58903: PUSH
58904: LD_INT 1
58906: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58907: LD_ADDR_OWVAR 28
58911: PUSH
58912: LD_INT 16
58914: ST_TO_ADDR
// hc_gallery :=  ;
58915: LD_ADDR_OWVAR 33
58919: PUSH
58920: LD_STRING 
58922: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58923: LD_ADDR_OWVAR 31
58927: PUSH
58928: LD_INT 0
58930: PPUSH
58931: LD_INT 3
58933: PPUSH
58934: CALL_OW 12
58938: PUSH
58939: LD_INT 0
58941: PPUSH
58942: LD_INT 3
58944: PPUSH
58945: CALL_OW 12
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: ST_TO_ADDR
// end ;
58962: LD_VAR 0 1
58966: RET
// export function PrepareApeman ( agressivity ) ; begin
58967: LD_INT 0
58969: PPUSH
// uc_side := 0 ;
58970: LD_ADDR_OWVAR 20
58974: PUSH
58975: LD_INT 0
58977: ST_TO_ADDR
// uc_nation := 0 ;
58978: LD_ADDR_OWVAR 21
58982: PUSH
58983: LD_INT 0
58985: ST_TO_ADDR
// hc_sex := sex_male ;
58986: LD_ADDR_OWVAR 27
58990: PUSH
58991: LD_INT 1
58993: ST_TO_ADDR
// hc_class := class_apeman ;
58994: LD_ADDR_OWVAR 28
58998: PUSH
58999: LD_INT 12
59001: ST_TO_ADDR
// hc_gallery :=  ;
59002: LD_ADDR_OWVAR 33
59006: PUSH
59007: LD_STRING 
59009: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59010: LD_ADDR_OWVAR 35
59014: PUSH
59015: LD_VAR 0 1
59019: NEG
59020: PPUSH
59021: LD_VAR 0 1
59025: PPUSH
59026: CALL_OW 12
59030: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59031: LD_ADDR_OWVAR 31
59035: PUSH
59036: LD_INT 0
59038: PPUSH
59039: LD_INT 3
59041: PPUSH
59042: CALL_OW 12
59046: PUSH
59047: LD_INT 0
59049: PPUSH
59050: LD_INT 3
59052: PPUSH
59053: CALL_OW 12
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: ST_TO_ADDR
// end ;
59070: LD_VAR 0 2
59074: RET
// export function PrepareTiger ( agressivity ) ; begin
59075: LD_INT 0
59077: PPUSH
// uc_side := 0 ;
59078: LD_ADDR_OWVAR 20
59082: PUSH
59083: LD_INT 0
59085: ST_TO_ADDR
// uc_nation := 0 ;
59086: LD_ADDR_OWVAR 21
59090: PUSH
59091: LD_INT 0
59093: ST_TO_ADDR
// hc_class := class_tiger ;
59094: LD_ADDR_OWVAR 28
59098: PUSH
59099: LD_INT 14
59101: ST_TO_ADDR
// hc_gallery :=  ;
59102: LD_ADDR_OWVAR 33
59106: PUSH
59107: LD_STRING 
59109: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59110: LD_ADDR_OWVAR 35
59114: PUSH
59115: LD_VAR 0 1
59119: NEG
59120: PPUSH
59121: LD_VAR 0 1
59125: PPUSH
59126: CALL_OW 12
59130: ST_TO_ADDR
// end ;
59131: LD_VAR 0 2
59135: RET
// export function PrepareEnchidna ( ) ; begin
59136: LD_INT 0
59138: PPUSH
// uc_side := 0 ;
59139: LD_ADDR_OWVAR 20
59143: PUSH
59144: LD_INT 0
59146: ST_TO_ADDR
// uc_nation := 0 ;
59147: LD_ADDR_OWVAR 21
59151: PUSH
59152: LD_INT 0
59154: ST_TO_ADDR
// hc_class := class_baggie ;
59155: LD_ADDR_OWVAR 28
59159: PUSH
59160: LD_INT 13
59162: ST_TO_ADDR
// hc_gallery :=  ;
59163: LD_ADDR_OWVAR 33
59167: PUSH
59168: LD_STRING 
59170: ST_TO_ADDR
// end ;
59171: LD_VAR 0 1
59175: RET
// export function PrepareFrog ( ) ; begin
59176: LD_INT 0
59178: PPUSH
// uc_side := 0 ;
59179: LD_ADDR_OWVAR 20
59183: PUSH
59184: LD_INT 0
59186: ST_TO_ADDR
// uc_nation := 0 ;
59187: LD_ADDR_OWVAR 21
59191: PUSH
59192: LD_INT 0
59194: ST_TO_ADDR
// hc_class := class_frog ;
59195: LD_ADDR_OWVAR 28
59199: PUSH
59200: LD_INT 19
59202: ST_TO_ADDR
// hc_gallery :=  ;
59203: LD_ADDR_OWVAR 33
59207: PUSH
59208: LD_STRING 
59210: ST_TO_ADDR
// end ;
59211: LD_VAR 0 1
59215: RET
// export function PrepareFish ( ) ; begin
59216: LD_INT 0
59218: PPUSH
// uc_side := 0 ;
59219: LD_ADDR_OWVAR 20
59223: PUSH
59224: LD_INT 0
59226: ST_TO_ADDR
// uc_nation := 0 ;
59227: LD_ADDR_OWVAR 21
59231: PUSH
59232: LD_INT 0
59234: ST_TO_ADDR
// hc_class := class_fish ;
59235: LD_ADDR_OWVAR 28
59239: PUSH
59240: LD_INT 20
59242: ST_TO_ADDR
// hc_gallery :=  ;
59243: LD_ADDR_OWVAR 33
59247: PUSH
59248: LD_STRING 
59250: ST_TO_ADDR
// end ;
59251: LD_VAR 0 1
59255: RET
// export function PrepareBird ( ) ; begin
59256: LD_INT 0
59258: PPUSH
// uc_side := 0 ;
59259: LD_ADDR_OWVAR 20
59263: PUSH
59264: LD_INT 0
59266: ST_TO_ADDR
// uc_nation := 0 ;
59267: LD_ADDR_OWVAR 21
59271: PUSH
59272: LD_INT 0
59274: ST_TO_ADDR
// hc_class := class_phororhacos ;
59275: LD_ADDR_OWVAR 28
59279: PUSH
59280: LD_INT 18
59282: ST_TO_ADDR
// hc_gallery :=  ;
59283: LD_ADDR_OWVAR 33
59287: PUSH
59288: LD_STRING 
59290: ST_TO_ADDR
// end ;
59291: LD_VAR 0 1
59295: RET
// export function PrepareHorse ( ) ; begin
59296: LD_INT 0
59298: PPUSH
// uc_side := 0 ;
59299: LD_ADDR_OWVAR 20
59303: PUSH
59304: LD_INT 0
59306: ST_TO_ADDR
// uc_nation := 0 ;
59307: LD_ADDR_OWVAR 21
59311: PUSH
59312: LD_INT 0
59314: ST_TO_ADDR
// hc_class := class_horse ;
59315: LD_ADDR_OWVAR 28
59319: PUSH
59320: LD_INT 21
59322: ST_TO_ADDR
// hc_gallery :=  ;
59323: LD_ADDR_OWVAR 33
59327: PUSH
59328: LD_STRING 
59330: ST_TO_ADDR
// end ;
59331: LD_VAR 0 1
59335: RET
// export function PrepareMastodont ( ) ; begin
59336: LD_INT 0
59338: PPUSH
// uc_side := 0 ;
59339: LD_ADDR_OWVAR 20
59343: PUSH
59344: LD_INT 0
59346: ST_TO_ADDR
// uc_nation := 0 ;
59347: LD_ADDR_OWVAR 21
59351: PUSH
59352: LD_INT 0
59354: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59355: LD_ADDR_OWVAR 37
59359: PUSH
59360: LD_INT 31
59362: ST_TO_ADDR
// vc_control := control_rider ;
59363: LD_ADDR_OWVAR 38
59367: PUSH
59368: LD_INT 4
59370: ST_TO_ADDR
// end ;
59371: LD_VAR 0 1
59375: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59376: LD_INT 0
59378: PPUSH
59379: PPUSH
59380: PPUSH
// uc_side = 0 ;
59381: LD_ADDR_OWVAR 20
59385: PUSH
59386: LD_INT 0
59388: ST_TO_ADDR
// uc_nation = 0 ;
59389: LD_ADDR_OWVAR 21
59393: PUSH
59394: LD_INT 0
59396: ST_TO_ADDR
// InitHc_All ( ) ;
59397: CALL_OW 584
// InitVc ;
59401: CALL_OW 20
// if mastodonts then
59405: LD_VAR 0 6
59409: IFFALSE 59476
// for i = 1 to mastodonts do
59411: LD_ADDR_VAR 0 11
59415: PUSH
59416: DOUBLE
59417: LD_INT 1
59419: DEC
59420: ST_TO_ADDR
59421: LD_VAR 0 6
59425: PUSH
59426: FOR_TO
59427: IFFALSE 59474
// begin vc_chassis := 31 ;
59429: LD_ADDR_OWVAR 37
59433: PUSH
59434: LD_INT 31
59436: ST_TO_ADDR
// vc_control := control_rider ;
59437: LD_ADDR_OWVAR 38
59441: PUSH
59442: LD_INT 4
59444: ST_TO_ADDR
// animal := CreateVehicle ;
59445: LD_ADDR_VAR 0 12
59449: PUSH
59450: CALL_OW 45
59454: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59455: LD_VAR 0 12
59459: PPUSH
59460: LD_VAR 0 8
59464: PPUSH
59465: LD_INT 0
59467: PPUSH
59468: CALL 61611 0 3
// end ;
59472: GO 59426
59474: POP
59475: POP
// if horses then
59476: LD_VAR 0 5
59480: IFFALSE 59547
// for i = 1 to horses do
59482: LD_ADDR_VAR 0 11
59486: PUSH
59487: DOUBLE
59488: LD_INT 1
59490: DEC
59491: ST_TO_ADDR
59492: LD_VAR 0 5
59496: PUSH
59497: FOR_TO
59498: IFFALSE 59545
// begin hc_class := 21 ;
59500: LD_ADDR_OWVAR 28
59504: PUSH
59505: LD_INT 21
59507: ST_TO_ADDR
// hc_gallery :=  ;
59508: LD_ADDR_OWVAR 33
59512: PUSH
59513: LD_STRING 
59515: ST_TO_ADDR
// animal := CreateHuman ;
59516: LD_ADDR_VAR 0 12
59520: PUSH
59521: CALL_OW 44
59525: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59526: LD_VAR 0 12
59530: PPUSH
59531: LD_VAR 0 8
59535: PPUSH
59536: LD_INT 0
59538: PPUSH
59539: CALL 61611 0 3
// end ;
59543: GO 59497
59545: POP
59546: POP
// if birds then
59547: LD_VAR 0 1
59551: IFFALSE 59618
// for i = 1 to birds do
59553: LD_ADDR_VAR 0 11
59557: PUSH
59558: DOUBLE
59559: LD_INT 1
59561: DEC
59562: ST_TO_ADDR
59563: LD_VAR 0 1
59567: PUSH
59568: FOR_TO
59569: IFFALSE 59616
// begin hc_class = 18 ;
59571: LD_ADDR_OWVAR 28
59575: PUSH
59576: LD_INT 18
59578: ST_TO_ADDR
// hc_gallery =  ;
59579: LD_ADDR_OWVAR 33
59583: PUSH
59584: LD_STRING 
59586: ST_TO_ADDR
// animal := CreateHuman ;
59587: LD_ADDR_VAR 0 12
59591: PUSH
59592: CALL_OW 44
59596: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59597: LD_VAR 0 12
59601: PPUSH
59602: LD_VAR 0 8
59606: PPUSH
59607: LD_INT 0
59609: PPUSH
59610: CALL 61611 0 3
// end ;
59614: GO 59568
59616: POP
59617: POP
// if tigers then
59618: LD_VAR 0 2
59622: IFFALSE 59706
// for i = 1 to tigers do
59624: LD_ADDR_VAR 0 11
59628: PUSH
59629: DOUBLE
59630: LD_INT 1
59632: DEC
59633: ST_TO_ADDR
59634: LD_VAR 0 2
59638: PUSH
59639: FOR_TO
59640: IFFALSE 59704
// begin hc_class = class_tiger ;
59642: LD_ADDR_OWVAR 28
59646: PUSH
59647: LD_INT 14
59649: ST_TO_ADDR
// hc_gallery =  ;
59650: LD_ADDR_OWVAR 33
59654: PUSH
59655: LD_STRING 
59657: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59658: LD_ADDR_OWVAR 35
59662: PUSH
59663: LD_INT 7
59665: NEG
59666: PPUSH
59667: LD_INT 7
59669: PPUSH
59670: CALL_OW 12
59674: ST_TO_ADDR
// animal := CreateHuman ;
59675: LD_ADDR_VAR 0 12
59679: PUSH
59680: CALL_OW 44
59684: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59685: LD_VAR 0 12
59689: PPUSH
59690: LD_VAR 0 8
59694: PPUSH
59695: LD_INT 0
59697: PPUSH
59698: CALL 61611 0 3
// end ;
59702: GO 59639
59704: POP
59705: POP
// if apemans then
59706: LD_VAR 0 3
59710: IFFALSE 59833
// for i = 1 to apemans do
59712: LD_ADDR_VAR 0 11
59716: PUSH
59717: DOUBLE
59718: LD_INT 1
59720: DEC
59721: ST_TO_ADDR
59722: LD_VAR 0 3
59726: PUSH
59727: FOR_TO
59728: IFFALSE 59831
// begin hc_class = class_apeman ;
59730: LD_ADDR_OWVAR 28
59734: PUSH
59735: LD_INT 12
59737: ST_TO_ADDR
// hc_gallery =  ;
59738: LD_ADDR_OWVAR 33
59742: PUSH
59743: LD_STRING 
59745: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59746: LD_ADDR_OWVAR 35
59750: PUSH
59751: LD_INT 2
59753: NEG
59754: PPUSH
59755: LD_INT 2
59757: PPUSH
59758: CALL_OW 12
59762: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59763: LD_ADDR_OWVAR 31
59767: PUSH
59768: LD_INT 1
59770: PPUSH
59771: LD_INT 3
59773: PPUSH
59774: CALL_OW 12
59778: PUSH
59779: LD_INT 1
59781: PPUSH
59782: LD_INT 3
59784: PPUSH
59785: CALL_OW 12
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: ST_TO_ADDR
// animal := CreateHuman ;
59802: LD_ADDR_VAR 0 12
59806: PUSH
59807: CALL_OW 44
59811: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59812: LD_VAR 0 12
59816: PPUSH
59817: LD_VAR 0 8
59821: PPUSH
59822: LD_INT 0
59824: PPUSH
59825: CALL 61611 0 3
// end ;
59829: GO 59727
59831: POP
59832: POP
// if enchidnas then
59833: LD_VAR 0 4
59837: IFFALSE 59904
// for i = 1 to enchidnas do
59839: LD_ADDR_VAR 0 11
59843: PUSH
59844: DOUBLE
59845: LD_INT 1
59847: DEC
59848: ST_TO_ADDR
59849: LD_VAR 0 4
59853: PUSH
59854: FOR_TO
59855: IFFALSE 59902
// begin hc_class = 13 ;
59857: LD_ADDR_OWVAR 28
59861: PUSH
59862: LD_INT 13
59864: ST_TO_ADDR
// hc_gallery =  ;
59865: LD_ADDR_OWVAR 33
59869: PUSH
59870: LD_STRING 
59872: ST_TO_ADDR
// animal := CreateHuman ;
59873: LD_ADDR_VAR 0 12
59877: PUSH
59878: CALL_OW 44
59882: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59883: LD_VAR 0 12
59887: PPUSH
59888: LD_VAR 0 8
59892: PPUSH
59893: LD_INT 0
59895: PPUSH
59896: CALL 61611 0 3
// end ;
59900: GO 59854
59902: POP
59903: POP
// if fishes then
59904: LD_VAR 0 7
59908: IFFALSE 59975
// for i = 1 to fishes do
59910: LD_ADDR_VAR 0 11
59914: PUSH
59915: DOUBLE
59916: LD_INT 1
59918: DEC
59919: ST_TO_ADDR
59920: LD_VAR 0 7
59924: PUSH
59925: FOR_TO
59926: IFFALSE 59973
// begin hc_class = 20 ;
59928: LD_ADDR_OWVAR 28
59932: PUSH
59933: LD_INT 20
59935: ST_TO_ADDR
// hc_gallery =  ;
59936: LD_ADDR_OWVAR 33
59940: PUSH
59941: LD_STRING 
59943: ST_TO_ADDR
// animal := CreateHuman ;
59944: LD_ADDR_VAR 0 12
59948: PUSH
59949: CALL_OW 44
59953: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59954: LD_VAR 0 12
59958: PPUSH
59959: LD_VAR 0 9
59963: PPUSH
59964: LD_INT 0
59966: PPUSH
59967: CALL 61611 0 3
// end ;
59971: GO 59925
59973: POP
59974: POP
// end ;
59975: LD_VAR 0 10
59979: RET
// export function WantHeal ( sci , unit ) ; begin
59980: LD_INT 0
59982: PPUSH
// if GetTaskList ( sci ) > 0 then
59983: LD_VAR 0 1
59987: PPUSH
59988: CALL_OW 437
59992: PUSH
59993: LD_INT 0
59995: GREATER
59996: IFFALSE 60066
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59998: LD_VAR 0 1
60002: PPUSH
60003: CALL_OW 437
60007: PUSH
60008: LD_INT 1
60010: ARRAY
60011: PUSH
60012: LD_INT 1
60014: ARRAY
60015: PUSH
60016: LD_STRING l
60018: EQUAL
60019: PUSH
60020: LD_VAR 0 1
60024: PPUSH
60025: CALL_OW 437
60029: PUSH
60030: LD_INT 1
60032: ARRAY
60033: PUSH
60034: LD_INT 4
60036: ARRAY
60037: PUSH
60038: LD_VAR 0 2
60042: EQUAL
60043: AND
60044: IFFALSE 60056
// result := true else
60046: LD_ADDR_VAR 0 3
60050: PUSH
60051: LD_INT 1
60053: ST_TO_ADDR
60054: GO 60064
// result := false ;
60056: LD_ADDR_VAR 0 3
60060: PUSH
60061: LD_INT 0
60063: ST_TO_ADDR
// end else
60064: GO 60074
// result := false ;
60066: LD_ADDR_VAR 0 3
60070: PUSH
60071: LD_INT 0
60073: ST_TO_ADDR
// end ;
60074: LD_VAR 0 3
60078: RET
// export function HealTarget ( sci ) ; begin
60079: LD_INT 0
60081: PPUSH
// if not sci then
60082: LD_VAR 0 1
60086: NOT
60087: IFFALSE 60091
// exit ;
60089: GO 60156
// result := 0 ;
60091: LD_ADDR_VAR 0 2
60095: PUSH
60096: LD_INT 0
60098: ST_TO_ADDR
// if GetTaskList ( sci ) then
60099: LD_VAR 0 1
60103: PPUSH
60104: CALL_OW 437
60108: IFFALSE 60156
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60110: LD_VAR 0 1
60114: PPUSH
60115: CALL_OW 437
60119: PUSH
60120: LD_INT 1
60122: ARRAY
60123: PUSH
60124: LD_INT 1
60126: ARRAY
60127: PUSH
60128: LD_STRING l
60130: EQUAL
60131: IFFALSE 60156
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60133: LD_ADDR_VAR 0 2
60137: PUSH
60138: LD_VAR 0 1
60142: PPUSH
60143: CALL_OW 437
60147: PUSH
60148: LD_INT 1
60150: ARRAY
60151: PUSH
60152: LD_INT 4
60154: ARRAY
60155: ST_TO_ADDR
// end ;
60156: LD_VAR 0 2
60160: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60161: LD_INT 0
60163: PPUSH
60164: PPUSH
60165: PPUSH
60166: PPUSH
// if not base_units then
60167: LD_VAR 0 1
60171: NOT
60172: IFFALSE 60176
// exit ;
60174: GO 60263
// result := false ;
60176: LD_ADDR_VAR 0 2
60180: PUSH
60181: LD_INT 0
60183: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60184: LD_ADDR_VAR 0 5
60188: PUSH
60189: LD_VAR 0 1
60193: PPUSH
60194: LD_INT 21
60196: PUSH
60197: LD_INT 3
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PPUSH
60204: CALL_OW 72
60208: ST_TO_ADDR
// if not tmp then
60209: LD_VAR 0 5
60213: NOT
60214: IFFALSE 60218
// exit ;
60216: GO 60263
// for i in tmp do
60218: LD_ADDR_VAR 0 3
60222: PUSH
60223: LD_VAR 0 5
60227: PUSH
60228: FOR_IN
60229: IFFALSE 60261
// begin result := EnemyInRange ( i , 22 ) ;
60231: LD_ADDR_VAR 0 2
60235: PUSH
60236: LD_VAR 0 3
60240: PPUSH
60241: LD_INT 22
60243: PPUSH
60244: CALL 57932 0 2
60248: ST_TO_ADDR
// if result then
60249: LD_VAR 0 2
60253: IFFALSE 60259
// exit ;
60255: POP
60256: POP
60257: GO 60263
// end ;
60259: GO 60228
60261: POP
60262: POP
// end ;
60263: LD_VAR 0 2
60267: RET
// export function FilterByTag ( units , tag ) ; begin
60268: LD_INT 0
60270: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60271: LD_ADDR_VAR 0 3
60275: PUSH
60276: LD_VAR 0 1
60280: PPUSH
60281: LD_INT 120
60283: PUSH
60284: LD_VAR 0 2
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PPUSH
60293: CALL_OW 72
60297: ST_TO_ADDR
// end ;
60298: LD_VAR 0 3
60302: RET
// export function IsDriver ( un ) ; begin
60303: LD_INT 0
60305: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60306: LD_ADDR_VAR 0 2
60310: PUSH
60311: LD_VAR 0 1
60315: PUSH
60316: LD_INT 55
60318: PUSH
60319: EMPTY
60320: LIST
60321: PPUSH
60322: CALL_OW 69
60326: IN
60327: ST_TO_ADDR
// end ;
60328: LD_VAR 0 2
60332: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60333: LD_INT 0
60335: PPUSH
60336: PPUSH
// list := [ ] ;
60337: LD_ADDR_VAR 0 5
60341: PUSH
60342: EMPTY
60343: ST_TO_ADDR
// case d of 0 :
60344: LD_VAR 0 3
60348: PUSH
60349: LD_INT 0
60351: DOUBLE
60352: EQUAL
60353: IFTRUE 60357
60355: GO 60490
60357: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60358: LD_ADDR_VAR 0 5
60362: PUSH
60363: LD_VAR 0 1
60367: PUSH
60368: LD_INT 4
60370: MINUS
60371: PUSH
60372: LD_VAR 0 2
60376: PUSH
60377: LD_INT 4
60379: MINUS
60380: PUSH
60381: LD_INT 2
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: LIST
60388: PUSH
60389: LD_VAR 0 1
60393: PUSH
60394: LD_INT 3
60396: MINUS
60397: PUSH
60398: LD_VAR 0 2
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: LIST
60410: PUSH
60411: LD_VAR 0 1
60415: PUSH
60416: LD_INT 4
60418: PLUS
60419: PUSH
60420: LD_VAR 0 2
60424: PUSH
60425: LD_INT 4
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: LIST
60432: PUSH
60433: LD_VAR 0 1
60437: PUSH
60438: LD_INT 3
60440: PLUS
60441: PUSH
60442: LD_VAR 0 2
60446: PUSH
60447: LD_INT 3
60449: PLUS
60450: PUSH
60451: LD_INT 5
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: LIST
60458: PUSH
60459: LD_VAR 0 1
60463: PUSH
60464: LD_VAR 0 2
60468: PUSH
60469: LD_INT 4
60471: PLUS
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: LIST
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: ST_TO_ADDR
// end ; 1 :
60488: GO 61188
60490: LD_INT 1
60492: DOUBLE
60493: EQUAL
60494: IFTRUE 60498
60496: GO 60631
60498: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60499: LD_ADDR_VAR 0 5
60503: PUSH
60504: LD_VAR 0 1
60508: PUSH
60509: LD_VAR 0 2
60513: PUSH
60514: LD_INT 4
60516: MINUS
60517: PUSH
60518: LD_INT 3
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: LIST
60525: PUSH
60526: LD_VAR 0 1
60530: PUSH
60531: LD_INT 3
60533: MINUS
60534: PUSH
60535: LD_VAR 0 2
60539: PUSH
60540: LD_INT 3
60542: MINUS
60543: PUSH
60544: LD_INT 2
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: LIST
60551: PUSH
60552: LD_VAR 0 1
60556: PUSH
60557: LD_INT 4
60559: MINUS
60560: PUSH
60561: LD_VAR 0 2
60565: PUSH
60566: LD_INT 1
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: LIST
60573: PUSH
60574: LD_VAR 0 1
60578: PUSH
60579: LD_VAR 0 2
60583: PUSH
60584: LD_INT 3
60586: PLUS
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: LIST
60595: PUSH
60596: LD_VAR 0 1
60600: PUSH
60601: LD_INT 4
60603: PLUS
60604: PUSH
60605: LD_VAR 0 2
60609: PUSH
60610: LD_INT 4
60612: PLUS
60613: PUSH
60614: LD_INT 5
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: LIST
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: ST_TO_ADDR
// end ; 2 :
60629: GO 61188
60631: LD_INT 2
60633: DOUBLE
60634: EQUAL
60635: IFTRUE 60639
60637: GO 60768
60639: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60640: LD_ADDR_VAR 0 5
60644: PUSH
60645: LD_VAR 0 1
60649: PUSH
60650: LD_VAR 0 2
60654: PUSH
60655: LD_INT 3
60657: MINUS
60658: PUSH
60659: LD_INT 3
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: LIST
60666: PUSH
60667: LD_VAR 0 1
60671: PUSH
60672: LD_INT 4
60674: PLUS
60675: PUSH
60676: LD_VAR 0 2
60680: PUSH
60681: LD_INT 4
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: LIST
60688: PUSH
60689: LD_VAR 0 1
60693: PUSH
60694: LD_VAR 0 2
60698: PUSH
60699: LD_INT 4
60701: PLUS
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: LIST
60710: PUSH
60711: LD_VAR 0 1
60715: PUSH
60716: LD_INT 3
60718: MINUS
60719: PUSH
60720: LD_VAR 0 2
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: LIST
60732: PUSH
60733: LD_VAR 0 1
60737: PUSH
60738: LD_INT 4
60740: MINUS
60741: PUSH
60742: LD_VAR 0 2
60746: PUSH
60747: LD_INT 4
60749: MINUS
60750: PUSH
60751: LD_INT 2
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: LIST
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: ST_TO_ADDR
// end ; 3 :
60766: GO 61188
60768: LD_INT 3
60770: DOUBLE
60771: EQUAL
60772: IFTRUE 60776
60774: GO 60909
60776: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60777: LD_ADDR_VAR 0 5
60781: PUSH
60782: LD_VAR 0 1
60786: PUSH
60787: LD_INT 3
60789: PLUS
60790: PUSH
60791: LD_VAR 0 2
60795: PUSH
60796: LD_INT 4
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: LIST
60803: PUSH
60804: LD_VAR 0 1
60808: PUSH
60809: LD_INT 4
60811: PLUS
60812: PUSH
60813: LD_VAR 0 2
60817: PUSH
60818: LD_INT 4
60820: PLUS
60821: PUSH
60822: LD_INT 5
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: LIST
60829: PUSH
60830: LD_VAR 0 1
60834: PUSH
60835: LD_INT 4
60837: MINUS
60838: PUSH
60839: LD_VAR 0 2
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: LIST
60851: PUSH
60852: LD_VAR 0 1
60856: PUSH
60857: LD_VAR 0 2
60861: PUSH
60862: LD_INT 4
60864: MINUS
60865: PUSH
60866: LD_INT 3
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: LIST
60873: PUSH
60874: LD_VAR 0 1
60878: PUSH
60879: LD_INT 3
60881: MINUS
60882: PUSH
60883: LD_VAR 0 2
60887: PUSH
60888: LD_INT 3
60890: MINUS
60891: PUSH
60892: LD_INT 2
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: LIST
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: ST_TO_ADDR
// end ; 4 :
60907: GO 61188
60909: LD_INT 4
60911: DOUBLE
60912: EQUAL
60913: IFTRUE 60917
60915: GO 61050
60917: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60918: LD_ADDR_VAR 0 5
60922: PUSH
60923: LD_VAR 0 1
60927: PUSH
60928: LD_VAR 0 2
60932: PUSH
60933: LD_INT 4
60935: PLUS
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: LIST
60944: PUSH
60945: LD_VAR 0 1
60949: PUSH
60950: LD_INT 3
60952: PLUS
60953: PUSH
60954: LD_VAR 0 2
60958: PUSH
60959: LD_INT 3
60961: PLUS
60962: PUSH
60963: LD_INT 5
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: LIST
60970: PUSH
60971: LD_VAR 0 1
60975: PUSH
60976: LD_INT 4
60978: PLUS
60979: PUSH
60980: LD_VAR 0 2
60984: PUSH
60985: LD_INT 4
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: LIST
60992: PUSH
60993: LD_VAR 0 1
60997: PUSH
60998: LD_VAR 0 2
61002: PUSH
61003: LD_INT 3
61005: MINUS
61006: PUSH
61007: LD_INT 3
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: LIST
61014: PUSH
61015: LD_VAR 0 1
61019: PUSH
61020: LD_INT 4
61022: MINUS
61023: PUSH
61024: LD_VAR 0 2
61028: PUSH
61029: LD_INT 4
61031: MINUS
61032: PUSH
61033: LD_INT 2
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: LIST
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: ST_TO_ADDR
// end ; 5 :
61048: GO 61188
61050: LD_INT 5
61052: DOUBLE
61053: EQUAL
61054: IFTRUE 61058
61056: GO 61187
61058: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61059: LD_ADDR_VAR 0 5
61063: PUSH
61064: LD_VAR 0 1
61068: PUSH
61069: LD_INT 4
61071: MINUS
61072: PUSH
61073: LD_VAR 0 2
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: LIST
61085: PUSH
61086: LD_VAR 0 1
61090: PUSH
61091: LD_VAR 0 2
61095: PUSH
61096: LD_INT 4
61098: MINUS
61099: PUSH
61100: LD_INT 3
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: LIST
61107: PUSH
61108: LD_VAR 0 1
61112: PUSH
61113: LD_INT 4
61115: PLUS
61116: PUSH
61117: LD_VAR 0 2
61121: PUSH
61122: LD_INT 4
61124: PLUS
61125: PUSH
61126: LD_INT 5
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: LIST
61133: PUSH
61134: LD_VAR 0 1
61138: PUSH
61139: LD_INT 3
61141: PLUS
61142: PUSH
61143: LD_VAR 0 2
61147: PUSH
61148: LD_INT 4
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: LIST
61155: PUSH
61156: LD_VAR 0 1
61160: PUSH
61161: LD_VAR 0 2
61165: PUSH
61166: LD_INT 3
61168: PLUS
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: LIST
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: ST_TO_ADDR
// end ; end ;
61185: GO 61188
61187: POP
// result := list ;
61188: LD_ADDR_VAR 0 4
61192: PUSH
61193: LD_VAR 0 5
61197: ST_TO_ADDR
// end ;
61198: LD_VAR 0 4
61202: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61203: LD_INT 0
61205: PPUSH
61206: PPUSH
61207: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61208: LD_VAR 0 1
61212: NOT
61213: PUSH
61214: LD_VAR 0 2
61218: PUSH
61219: LD_INT 1
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: LD_INT 3
61227: PUSH
61228: LD_INT 4
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: IN
61237: NOT
61238: OR
61239: IFFALSE 61243
// exit ;
61241: GO 61335
// tmp := [ ] ;
61243: LD_ADDR_VAR 0 5
61247: PUSH
61248: EMPTY
61249: ST_TO_ADDR
// for i in units do
61250: LD_ADDR_VAR 0 4
61254: PUSH
61255: LD_VAR 0 1
61259: PUSH
61260: FOR_IN
61261: IFFALSE 61304
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61263: LD_ADDR_VAR 0 5
61267: PUSH
61268: LD_VAR 0 5
61272: PPUSH
61273: LD_VAR 0 5
61277: PUSH
61278: LD_INT 1
61280: PLUS
61281: PPUSH
61282: LD_VAR 0 4
61286: PPUSH
61287: LD_VAR 0 2
61291: PPUSH
61292: CALL_OW 259
61296: PPUSH
61297: CALL_OW 2
61301: ST_TO_ADDR
61302: GO 61260
61304: POP
61305: POP
// if not tmp then
61306: LD_VAR 0 5
61310: NOT
61311: IFFALSE 61315
// exit ;
61313: GO 61335
// result := SortListByListDesc ( units , tmp ) ;
61315: LD_ADDR_VAR 0 3
61319: PUSH
61320: LD_VAR 0 1
61324: PPUSH
61325: LD_VAR 0 5
61329: PPUSH
61330: CALL_OW 77
61334: ST_TO_ADDR
// end ;
61335: LD_VAR 0 3
61339: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61340: LD_INT 0
61342: PPUSH
61343: PPUSH
61344: PPUSH
// result := false ;
61345: LD_ADDR_VAR 0 3
61349: PUSH
61350: LD_INT 0
61352: ST_TO_ADDR
// x := GetX ( building ) ;
61353: LD_ADDR_VAR 0 4
61357: PUSH
61358: LD_VAR 0 2
61362: PPUSH
61363: CALL_OW 250
61367: ST_TO_ADDR
// y := GetY ( building ) ;
61368: LD_ADDR_VAR 0 5
61372: PUSH
61373: LD_VAR 0 2
61377: PPUSH
61378: CALL_OW 251
61382: ST_TO_ADDR
// if not building or not x or not y then
61383: LD_VAR 0 2
61387: NOT
61388: PUSH
61389: LD_VAR 0 4
61393: NOT
61394: OR
61395: PUSH
61396: LD_VAR 0 5
61400: NOT
61401: OR
61402: IFFALSE 61406
// exit ;
61404: GO 61498
// if GetTaskList ( unit ) then
61406: LD_VAR 0 1
61410: PPUSH
61411: CALL_OW 437
61415: IFFALSE 61498
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61417: LD_STRING e
61419: PUSH
61420: LD_VAR 0 1
61424: PPUSH
61425: CALL_OW 437
61429: PUSH
61430: LD_INT 1
61432: ARRAY
61433: PUSH
61434: LD_INT 1
61436: ARRAY
61437: EQUAL
61438: PUSH
61439: LD_VAR 0 4
61443: PUSH
61444: LD_VAR 0 1
61448: PPUSH
61449: CALL_OW 437
61453: PUSH
61454: LD_INT 1
61456: ARRAY
61457: PUSH
61458: LD_INT 2
61460: ARRAY
61461: EQUAL
61462: AND
61463: PUSH
61464: LD_VAR 0 5
61468: PUSH
61469: LD_VAR 0 1
61473: PPUSH
61474: CALL_OW 437
61478: PUSH
61479: LD_INT 1
61481: ARRAY
61482: PUSH
61483: LD_INT 3
61485: ARRAY
61486: EQUAL
61487: AND
61488: IFFALSE 61498
// result := true end ;
61490: LD_ADDR_VAR 0 3
61494: PUSH
61495: LD_INT 1
61497: ST_TO_ADDR
// end ;
61498: LD_VAR 0 3
61502: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61503: LD_INT 0
61505: PPUSH
// result := false ;
61506: LD_ADDR_VAR 0 4
61510: PUSH
61511: LD_INT 0
61513: ST_TO_ADDR
// if GetTaskList ( unit ) then
61514: LD_VAR 0 1
61518: PPUSH
61519: CALL_OW 437
61523: IFFALSE 61606
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61525: LD_STRING M
61527: PUSH
61528: LD_VAR 0 1
61532: PPUSH
61533: CALL_OW 437
61537: PUSH
61538: LD_INT 1
61540: ARRAY
61541: PUSH
61542: LD_INT 1
61544: ARRAY
61545: EQUAL
61546: PUSH
61547: LD_VAR 0 2
61551: PUSH
61552: LD_VAR 0 1
61556: PPUSH
61557: CALL_OW 437
61561: PUSH
61562: LD_INT 1
61564: ARRAY
61565: PUSH
61566: LD_INT 2
61568: ARRAY
61569: EQUAL
61570: AND
61571: PUSH
61572: LD_VAR 0 3
61576: PUSH
61577: LD_VAR 0 1
61581: PPUSH
61582: CALL_OW 437
61586: PUSH
61587: LD_INT 1
61589: ARRAY
61590: PUSH
61591: LD_INT 3
61593: ARRAY
61594: EQUAL
61595: AND
61596: IFFALSE 61606
// result := true ;
61598: LD_ADDR_VAR 0 4
61602: PUSH
61603: LD_INT 1
61605: ST_TO_ADDR
// end ; end ;
61606: LD_VAR 0 4
61610: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61611: LD_INT 0
61613: PPUSH
61614: PPUSH
61615: PPUSH
61616: PPUSH
// if not unit or not area then
61617: LD_VAR 0 1
61621: NOT
61622: PUSH
61623: LD_VAR 0 2
61627: NOT
61628: OR
61629: IFFALSE 61633
// exit ;
61631: GO 61797
// tmp := AreaToList ( area , i ) ;
61633: LD_ADDR_VAR 0 6
61637: PUSH
61638: LD_VAR 0 2
61642: PPUSH
61643: LD_VAR 0 5
61647: PPUSH
61648: CALL_OW 517
61652: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61653: LD_ADDR_VAR 0 5
61657: PUSH
61658: DOUBLE
61659: LD_INT 1
61661: DEC
61662: ST_TO_ADDR
61663: LD_VAR 0 6
61667: PUSH
61668: LD_INT 1
61670: ARRAY
61671: PUSH
61672: FOR_TO
61673: IFFALSE 61795
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61675: LD_ADDR_VAR 0 7
61679: PUSH
61680: LD_VAR 0 6
61684: PUSH
61685: LD_INT 1
61687: ARRAY
61688: PUSH
61689: LD_VAR 0 5
61693: ARRAY
61694: PUSH
61695: LD_VAR 0 6
61699: PUSH
61700: LD_INT 2
61702: ARRAY
61703: PUSH
61704: LD_VAR 0 5
61708: ARRAY
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61714: LD_VAR 0 7
61718: PUSH
61719: LD_INT 1
61721: ARRAY
61722: PPUSH
61723: LD_VAR 0 7
61727: PUSH
61728: LD_INT 2
61730: ARRAY
61731: PPUSH
61732: CALL_OW 428
61736: PUSH
61737: LD_INT 0
61739: EQUAL
61740: IFFALSE 61793
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61742: LD_VAR 0 1
61746: PPUSH
61747: LD_VAR 0 7
61751: PUSH
61752: LD_INT 1
61754: ARRAY
61755: PPUSH
61756: LD_VAR 0 7
61760: PUSH
61761: LD_INT 2
61763: ARRAY
61764: PPUSH
61765: LD_VAR 0 3
61769: PPUSH
61770: CALL_OW 48
// result := IsPlaced ( unit ) ;
61774: LD_ADDR_VAR 0 4
61778: PUSH
61779: LD_VAR 0 1
61783: PPUSH
61784: CALL_OW 305
61788: ST_TO_ADDR
// exit ;
61789: POP
61790: POP
61791: GO 61797
// end ; end ;
61793: GO 61672
61795: POP
61796: POP
// end ;
61797: LD_VAR 0 4
61801: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61802: LD_INT 0
61804: PPUSH
61805: PPUSH
61806: PPUSH
// if not side or side > 8 then
61807: LD_VAR 0 1
61811: NOT
61812: PUSH
61813: LD_VAR 0 1
61817: PUSH
61818: LD_INT 8
61820: GREATER
61821: OR
61822: IFFALSE 61826
// exit ;
61824: GO 62013
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61826: LD_ADDR_VAR 0 4
61830: PUSH
61831: LD_INT 22
61833: PUSH
61834: LD_VAR 0 1
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 21
61845: PUSH
61846: LD_INT 3
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PPUSH
61857: CALL_OW 69
61861: ST_TO_ADDR
// if not tmp then
61862: LD_VAR 0 4
61866: NOT
61867: IFFALSE 61871
// exit ;
61869: GO 62013
// enable_addtolog := true ;
61871: LD_ADDR_OWVAR 81
61875: PUSH
61876: LD_INT 1
61878: ST_TO_ADDR
// AddToLog ( [ ) ;
61879: LD_STRING [
61881: PPUSH
61882: CALL_OW 561
// for i in tmp do
61886: LD_ADDR_VAR 0 3
61890: PUSH
61891: LD_VAR 0 4
61895: PUSH
61896: FOR_IN
61897: IFFALSE 62004
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61899: LD_STRING [
61901: PUSH
61902: LD_VAR 0 3
61906: PPUSH
61907: CALL_OW 266
61911: STR
61912: PUSH
61913: LD_STRING , 
61915: STR
61916: PUSH
61917: LD_VAR 0 3
61921: PPUSH
61922: CALL_OW 250
61926: STR
61927: PUSH
61928: LD_STRING , 
61930: STR
61931: PUSH
61932: LD_VAR 0 3
61936: PPUSH
61937: CALL_OW 251
61941: STR
61942: PUSH
61943: LD_STRING , 
61945: STR
61946: PUSH
61947: LD_VAR 0 3
61951: PPUSH
61952: CALL_OW 254
61956: STR
61957: PUSH
61958: LD_STRING , 
61960: STR
61961: PUSH
61962: LD_VAR 0 3
61966: PPUSH
61967: LD_INT 1
61969: PPUSH
61970: CALL_OW 268
61974: STR
61975: PUSH
61976: LD_STRING , 
61978: STR
61979: PUSH
61980: LD_VAR 0 3
61984: PPUSH
61985: LD_INT 2
61987: PPUSH
61988: CALL_OW 268
61992: STR
61993: PUSH
61994: LD_STRING ],
61996: STR
61997: PPUSH
61998: CALL_OW 561
// end ;
62002: GO 61896
62004: POP
62005: POP
// AddToLog ( ]; ) ;
62006: LD_STRING ];
62008: PPUSH
62009: CALL_OW 561
// end ;
62013: LD_VAR 0 2
62017: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62018: LD_INT 0
62020: PPUSH
62021: PPUSH
62022: PPUSH
62023: PPUSH
62024: PPUSH
// if not area or not rate or not max then
62025: LD_VAR 0 1
62029: NOT
62030: PUSH
62031: LD_VAR 0 2
62035: NOT
62036: OR
62037: PUSH
62038: LD_VAR 0 4
62042: NOT
62043: OR
62044: IFFALSE 62048
// exit ;
62046: GO 62237
// while 1 do
62048: LD_INT 1
62050: IFFALSE 62237
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62052: LD_ADDR_VAR 0 9
62056: PUSH
62057: LD_VAR 0 1
62061: PPUSH
62062: LD_INT 1
62064: PPUSH
62065: CALL_OW 287
62069: PUSH
62070: LD_INT 10
62072: MUL
62073: ST_TO_ADDR
// r := rate / 10 ;
62074: LD_ADDR_VAR 0 7
62078: PUSH
62079: LD_VAR 0 2
62083: PUSH
62084: LD_INT 10
62086: DIVREAL
62087: ST_TO_ADDR
// time := 1 1$00 ;
62088: LD_ADDR_VAR 0 8
62092: PUSH
62093: LD_INT 2100
62095: ST_TO_ADDR
// if amount < min then
62096: LD_VAR 0 9
62100: PUSH
62101: LD_VAR 0 3
62105: LESS
62106: IFFALSE 62124
// r := r * 2 else
62108: LD_ADDR_VAR 0 7
62112: PUSH
62113: LD_VAR 0 7
62117: PUSH
62118: LD_INT 2
62120: MUL
62121: ST_TO_ADDR
62122: GO 62150
// if amount > max then
62124: LD_VAR 0 9
62128: PUSH
62129: LD_VAR 0 4
62133: GREATER
62134: IFFALSE 62150
// r := r / 2 ;
62136: LD_ADDR_VAR 0 7
62140: PUSH
62141: LD_VAR 0 7
62145: PUSH
62146: LD_INT 2
62148: DIVREAL
62149: ST_TO_ADDR
// time := time / r ;
62150: LD_ADDR_VAR 0 8
62154: PUSH
62155: LD_VAR 0 8
62159: PUSH
62160: LD_VAR 0 7
62164: DIVREAL
62165: ST_TO_ADDR
// if time < 0 then
62166: LD_VAR 0 8
62170: PUSH
62171: LD_INT 0
62173: LESS
62174: IFFALSE 62191
// time := time * - 1 ;
62176: LD_ADDR_VAR 0 8
62180: PUSH
62181: LD_VAR 0 8
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: MUL
62190: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62191: LD_VAR 0 8
62195: PUSH
62196: LD_INT 35
62198: PPUSH
62199: LD_INT 875
62201: PPUSH
62202: CALL_OW 12
62206: PLUS
62207: PPUSH
62208: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62212: LD_INT 1
62214: PPUSH
62215: LD_INT 5
62217: PPUSH
62218: CALL_OW 12
62222: PPUSH
62223: LD_VAR 0 1
62227: PPUSH
62228: LD_INT 1
62230: PPUSH
62231: CALL_OW 55
// end ;
62235: GO 62048
// end ;
62237: LD_VAR 0 5
62241: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62242: LD_INT 0
62244: PPUSH
62245: PPUSH
62246: PPUSH
62247: PPUSH
62248: PPUSH
62249: PPUSH
62250: PPUSH
62251: PPUSH
// if not turrets or not factories then
62252: LD_VAR 0 1
62256: NOT
62257: PUSH
62258: LD_VAR 0 2
62262: NOT
62263: OR
62264: IFFALSE 62268
// exit ;
62266: GO 62575
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62268: LD_ADDR_VAR 0 10
62272: PUSH
62273: LD_INT 5
62275: PUSH
62276: LD_INT 6
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 2
62285: PUSH
62286: LD_INT 4
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 3
62295: PUSH
62296: LD_INT 5
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 24
62310: PUSH
62311: LD_INT 25
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 23
62320: PUSH
62321: LD_INT 27
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 42
62334: PUSH
62335: LD_INT 43
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 44
62344: PUSH
62345: LD_INT 46
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 45
62354: PUSH
62355: LD_INT 47
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: LIST
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: LIST
62371: ST_TO_ADDR
// result := [ ] ;
62372: LD_ADDR_VAR 0 3
62376: PUSH
62377: EMPTY
62378: ST_TO_ADDR
// for i in turrets do
62379: LD_ADDR_VAR 0 4
62383: PUSH
62384: LD_VAR 0 1
62388: PUSH
62389: FOR_IN
62390: IFFALSE 62573
// begin nat := GetNation ( i ) ;
62392: LD_ADDR_VAR 0 7
62396: PUSH
62397: LD_VAR 0 4
62401: PPUSH
62402: CALL_OW 248
62406: ST_TO_ADDR
// weapon := 0 ;
62407: LD_ADDR_VAR 0 8
62411: PUSH
62412: LD_INT 0
62414: ST_TO_ADDR
// if not nat then
62415: LD_VAR 0 7
62419: NOT
62420: IFFALSE 62424
// continue ;
62422: GO 62389
// for j in list [ nat ] do
62424: LD_ADDR_VAR 0 5
62428: PUSH
62429: LD_VAR 0 10
62433: PUSH
62434: LD_VAR 0 7
62438: ARRAY
62439: PUSH
62440: FOR_IN
62441: IFFALSE 62482
// if GetBWeapon ( i ) = j [ 1 ] then
62443: LD_VAR 0 4
62447: PPUSH
62448: CALL_OW 269
62452: PUSH
62453: LD_VAR 0 5
62457: PUSH
62458: LD_INT 1
62460: ARRAY
62461: EQUAL
62462: IFFALSE 62480
// begin weapon := j [ 2 ] ;
62464: LD_ADDR_VAR 0 8
62468: PUSH
62469: LD_VAR 0 5
62473: PUSH
62474: LD_INT 2
62476: ARRAY
62477: ST_TO_ADDR
// break ;
62478: GO 62482
// end ;
62480: GO 62440
62482: POP
62483: POP
// if not weapon then
62484: LD_VAR 0 8
62488: NOT
62489: IFFALSE 62493
// continue ;
62491: GO 62389
// for k in factories do
62493: LD_ADDR_VAR 0 6
62497: PUSH
62498: LD_VAR 0 2
62502: PUSH
62503: FOR_IN
62504: IFFALSE 62569
// begin weapons := AvailableWeaponList ( k ) ;
62506: LD_ADDR_VAR 0 9
62510: PUSH
62511: LD_VAR 0 6
62515: PPUSH
62516: CALL_OW 478
62520: ST_TO_ADDR
// if not weapons then
62521: LD_VAR 0 9
62525: NOT
62526: IFFALSE 62530
// continue ;
62528: GO 62503
// if weapon in weapons then
62530: LD_VAR 0 8
62534: PUSH
62535: LD_VAR 0 9
62539: IN
62540: IFFALSE 62567
// begin result := [ i , weapon ] ;
62542: LD_ADDR_VAR 0 3
62546: PUSH
62547: LD_VAR 0 4
62551: PUSH
62552: LD_VAR 0 8
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: ST_TO_ADDR
// exit ;
62561: POP
62562: POP
62563: POP
62564: POP
62565: GO 62575
// end ; end ;
62567: GO 62503
62569: POP
62570: POP
// end ;
62571: GO 62389
62573: POP
62574: POP
// end ;
62575: LD_VAR 0 3
62579: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62580: LD_INT 0
62582: PPUSH
// if not side or side > 8 then
62583: LD_VAR 0 3
62587: NOT
62588: PUSH
62589: LD_VAR 0 3
62593: PUSH
62594: LD_INT 8
62596: GREATER
62597: OR
62598: IFFALSE 62602
// exit ;
62600: GO 62661
// if not range then
62602: LD_VAR 0 4
62606: NOT
62607: IFFALSE 62618
// range := - 12 ;
62609: LD_ADDR_VAR 0 4
62613: PUSH
62614: LD_INT 12
62616: NEG
62617: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62618: LD_VAR 0 1
62622: PPUSH
62623: LD_VAR 0 2
62627: PPUSH
62628: LD_VAR 0 3
62632: PPUSH
62633: LD_VAR 0 4
62637: PPUSH
62638: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62642: LD_VAR 0 1
62646: PPUSH
62647: LD_VAR 0 2
62651: PPUSH
62652: LD_VAR 0 3
62656: PPUSH
62657: CALL_OW 331
// end ;
62661: LD_VAR 0 5
62665: RET
// export function Video ( mode ) ; begin
62666: LD_INT 0
62668: PPUSH
// ingame_video = mode ;
62669: LD_ADDR_OWVAR 52
62673: PUSH
62674: LD_VAR 0 1
62678: ST_TO_ADDR
// interface_hidden = mode ;
62679: LD_ADDR_OWVAR 54
62683: PUSH
62684: LD_VAR 0 1
62688: ST_TO_ADDR
// end ;
62689: LD_VAR 0 2
62693: RET
// export function Join ( array , element ) ; begin
62694: LD_INT 0
62696: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62697: LD_ADDR_VAR 0 3
62701: PUSH
62702: LD_VAR 0 1
62706: PPUSH
62707: LD_VAR 0 1
62711: PUSH
62712: LD_INT 1
62714: PLUS
62715: PPUSH
62716: LD_VAR 0 2
62720: PPUSH
62721: CALL_OW 1
62725: ST_TO_ADDR
// end ;
62726: LD_VAR 0 3
62730: RET
// export function JoinUnion ( array , element ) ; begin
62731: LD_INT 0
62733: PPUSH
// result := array union element ;
62734: LD_ADDR_VAR 0 3
62738: PUSH
62739: LD_VAR 0 1
62743: PUSH
62744: LD_VAR 0 2
62748: UNION
62749: ST_TO_ADDR
// end ;
62750: LD_VAR 0 3
62754: RET
// export function GetBehemoths ( side ) ; begin
62755: LD_INT 0
62757: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62758: LD_ADDR_VAR 0 2
62762: PUSH
62763: LD_INT 22
62765: PUSH
62766: LD_VAR 0 1
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 31
62777: PUSH
62778: LD_INT 25
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PPUSH
62789: CALL_OW 69
62793: ST_TO_ADDR
// end ;
62794: LD_VAR 0 2
62798: RET
// export function Shuffle ( array ) ; var i , index ; begin
62799: LD_INT 0
62801: PPUSH
62802: PPUSH
62803: PPUSH
// result := [ ] ;
62804: LD_ADDR_VAR 0 2
62808: PUSH
62809: EMPTY
62810: ST_TO_ADDR
// if not array then
62811: LD_VAR 0 1
62815: NOT
62816: IFFALSE 62820
// exit ;
62818: GO 62919
// Randomize ;
62820: CALL_OW 10
// for i = array downto 1 do
62824: LD_ADDR_VAR 0 3
62828: PUSH
62829: DOUBLE
62830: LD_VAR 0 1
62834: INC
62835: ST_TO_ADDR
62836: LD_INT 1
62838: PUSH
62839: FOR_DOWNTO
62840: IFFALSE 62917
// begin index := rand ( 1 , array ) ;
62842: LD_ADDR_VAR 0 4
62846: PUSH
62847: LD_INT 1
62849: PPUSH
62850: LD_VAR 0 1
62854: PPUSH
62855: CALL_OW 12
62859: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62860: LD_ADDR_VAR 0 2
62864: PUSH
62865: LD_VAR 0 2
62869: PPUSH
62870: LD_VAR 0 2
62874: PUSH
62875: LD_INT 1
62877: PLUS
62878: PPUSH
62879: LD_VAR 0 1
62883: PUSH
62884: LD_VAR 0 4
62888: ARRAY
62889: PPUSH
62890: CALL_OW 2
62894: ST_TO_ADDR
// array := Delete ( array , index ) ;
62895: LD_ADDR_VAR 0 1
62899: PUSH
62900: LD_VAR 0 1
62904: PPUSH
62905: LD_VAR 0 4
62909: PPUSH
62910: CALL_OW 3
62914: ST_TO_ADDR
// end ;
62915: GO 62839
62917: POP
62918: POP
// end ;
62919: LD_VAR 0 2
62923: RET
// export function GetBaseMaterials ( base ) ; begin
62924: LD_INT 0
62926: PPUSH
// result := [ 0 , 0 , 0 ] ;
62927: LD_ADDR_VAR 0 2
62931: PUSH
62932: LD_INT 0
62934: PUSH
62935: LD_INT 0
62937: PUSH
62938: LD_INT 0
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: LIST
62945: ST_TO_ADDR
// if not base then
62946: LD_VAR 0 1
62950: NOT
62951: IFFALSE 62955
// exit ;
62953: GO 63004
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62955: LD_ADDR_VAR 0 2
62959: PUSH
62960: LD_VAR 0 1
62964: PPUSH
62965: LD_INT 1
62967: PPUSH
62968: CALL_OW 275
62972: PUSH
62973: LD_VAR 0 1
62977: PPUSH
62978: LD_INT 2
62980: PPUSH
62981: CALL_OW 275
62985: PUSH
62986: LD_VAR 0 1
62990: PPUSH
62991: LD_INT 3
62993: PPUSH
62994: CALL_OW 275
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: LIST
63003: ST_TO_ADDR
// end ;
63004: LD_VAR 0 2
63008: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63009: LD_INT 0
63011: PPUSH
63012: PPUSH
// result := array ;
63013: LD_ADDR_VAR 0 3
63017: PUSH
63018: LD_VAR 0 1
63022: ST_TO_ADDR
// if size >= result then
63023: LD_VAR 0 2
63027: PUSH
63028: LD_VAR 0 3
63032: GREATEREQUAL
63033: IFFALSE 63037
// exit ;
63035: GO 63087
// if size then
63037: LD_VAR 0 2
63041: IFFALSE 63087
// for i := array downto size do
63043: LD_ADDR_VAR 0 4
63047: PUSH
63048: DOUBLE
63049: LD_VAR 0 1
63053: INC
63054: ST_TO_ADDR
63055: LD_VAR 0 2
63059: PUSH
63060: FOR_DOWNTO
63061: IFFALSE 63085
// result := Delete ( result , result ) ;
63063: LD_ADDR_VAR 0 3
63067: PUSH
63068: LD_VAR 0 3
63072: PPUSH
63073: LD_VAR 0 3
63077: PPUSH
63078: CALL_OW 3
63082: ST_TO_ADDR
63083: GO 63060
63085: POP
63086: POP
// end ;
63087: LD_VAR 0 3
63091: RET
// export function ComExit ( unit ) ; var tmp ; begin
63092: LD_INT 0
63094: PPUSH
63095: PPUSH
// if not IsInUnit ( unit ) then
63096: LD_VAR 0 1
63100: PPUSH
63101: CALL_OW 310
63105: NOT
63106: IFFALSE 63110
// exit ;
63108: GO 63170
// tmp := IsInUnit ( unit ) ;
63110: LD_ADDR_VAR 0 3
63114: PUSH
63115: LD_VAR 0 1
63119: PPUSH
63120: CALL_OW 310
63124: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63125: LD_VAR 0 3
63129: PPUSH
63130: CALL_OW 247
63134: PUSH
63135: LD_INT 2
63137: EQUAL
63138: IFFALSE 63151
// ComExitVehicle ( unit ) else
63140: LD_VAR 0 1
63144: PPUSH
63145: CALL_OW 121
63149: GO 63160
// ComExitBuilding ( unit ) ;
63151: LD_VAR 0 1
63155: PPUSH
63156: CALL_OW 122
// result := tmp ;
63160: LD_ADDR_VAR 0 2
63164: PUSH
63165: LD_VAR 0 3
63169: ST_TO_ADDR
// end ;
63170: LD_VAR 0 2
63174: RET
// export function ComExitAll ( units ) ; var i ; begin
63175: LD_INT 0
63177: PPUSH
63178: PPUSH
// if not units then
63179: LD_VAR 0 1
63183: NOT
63184: IFFALSE 63188
// exit ;
63186: GO 63214
// for i in units do
63188: LD_ADDR_VAR 0 3
63192: PUSH
63193: LD_VAR 0 1
63197: PUSH
63198: FOR_IN
63199: IFFALSE 63212
// ComExit ( i ) ;
63201: LD_VAR 0 3
63205: PPUSH
63206: CALL 63092 0 1
63210: GO 63198
63212: POP
63213: POP
// end ;
63214: LD_VAR 0 2
63218: RET
// export function ResetHc ; begin
63219: LD_INT 0
63221: PPUSH
// InitHc ;
63222: CALL_OW 19
// hc_importance := 0 ;
63226: LD_ADDR_OWVAR 32
63230: PUSH
63231: LD_INT 0
63233: ST_TO_ADDR
// end ;
63234: LD_VAR 0 1
63238: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63239: LD_INT 0
63241: PPUSH
63242: PPUSH
63243: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63244: LD_ADDR_VAR 0 6
63248: PUSH
63249: LD_VAR 0 1
63253: PUSH
63254: LD_VAR 0 3
63258: PLUS
63259: PUSH
63260: LD_INT 2
63262: DIV
63263: ST_TO_ADDR
// if _x < 0 then
63264: LD_VAR 0 6
63268: PUSH
63269: LD_INT 0
63271: LESS
63272: IFFALSE 63289
// _x := _x * - 1 ;
63274: LD_ADDR_VAR 0 6
63278: PUSH
63279: LD_VAR 0 6
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: MUL
63288: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63289: LD_ADDR_VAR 0 7
63293: PUSH
63294: LD_VAR 0 2
63298: PUSH
63299: LD_VAR 0 4
63303: PLUS
63304: PUSH
63305: LD_INT 2
63307: DIV
63308: ST_TO_ADDR
// if _y < 0 then
63309: LD_VAR 0 7
63313: PUSH
63314: LD_INT 0
63316: LESS
63317: IFFALSE 63334
// _y := _y * - 1 ;
63319: LD_ADDR_VAR 0 7
63323: PUSH
63324: LD_VAR 0 7
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: MUL
63333: ST_TO_ADDR
// result := [ _x , _y ] ;
63334: LD_ADDR_VAR 0 5
63338: PUSH
63339: LD_VAR 0 6
63343: PUSH
63344: LD_VAR 0 7
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: ST_TO_ADDR
// end ;
63353: LD_VAR 0 5
63357: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63358: LD_INT 0
63360: PPUSH
63361: PPUSH
63362: PPUSH
63363: PPUSH
// task := GetTaskList ( unit ) ;
63364: LD_ADDR_VAR 0 7
63368: PUSH
63369: LD_VAR 0 1
63373: PPUSH
63374: CALL_OW 437
63378: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63379: LD_VAR 0 7
63383: NOT
63384: PUSH
63385: LD_VAR 0 1
63389: PPUSH
63390: LD_VAR 0 2
63394: PPUSH
63395: CALL_OW 308
63399: NOT
63400: AND
63401: IFFALSE 63405
// exit ;
63403: GO 63523
// if IsInArea ( unit , area ) then
63405: LD_VAR 0 1
63409: PPUSH
63410: LD_VAR 0 2
63414: PPUSH
63415: CALL_OW 308
63419: IFFALSE 63437
// begin ComMoveToArea ( unit , goAway ) ;
63421: LD_VAR 0 1
63425: PPUSH
63426: LD_VAR 0 3
63430: PPUSH
63431: CALL_OW 113
// exit ;
63435: GO 63523
// end ; if task [ 1 ] [ 1 ] <> M then
63437: LD_VAR 0 7
63441: PUSH
63442: LD_INT 1
63444: ARRAY
63445: PUSH
63446: LD_INT 1
63448: ARRAY
63449: PUSH
63450: LD_STRING M
63452: NONEQUAL
63453: IFFALSE 63457
// exit ;
63455: GO 63523
// x := task [ 1 ] [ 2 ] ;
63457: LD_ADDR_VAR 0 5
63461: PUSH
63462: LD_VAR 0 7
63466: PUSH
63467: LD_INT 1
63469: ARRAY
63470: PUSH
63471: LD_INT 2
63473: ARRAY
63474: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63475: LD_ADDR_VAR 0 6
63479: PUSH
63480: LD_VAR 0 7
63484: PUSH
63485: LD_INT 1
63487: ARRAY
63488: PUSH
63489: LD_INT 3
63491: ARRAY
63492: ST_TO_ADDR
// if InArea ( x , y , area ) then
63493: LD_VAR 0 5
63497: PPUSH
63498: LD_VAR 0 6
63502: PPUSH
63503: LD_VAR 0 2
63507: PPUSH
63508: CALL_OW 309
63512: IFFALSE 63523
// ComStop ( unit ) ;
63514: LD_VAR 0 1
63518: PPUSH
63519: CALL_OW 141
// end ;
63523: LD_VAR 0 4
63527: RET
// export function Abs ( value ) ; begin
63528: LD_INT 0
63530: PPUSH
// result := value ;
63531: LD_ADDR_VAR 0 2
63535: PUSH
63536: LD_VAR 0 1
63540: ST_TO_ADDR
// if value < 0 then
63541: LD_VAR 0 1
63545: PUSH
63546: LD_INT 0
63548: LESS
63549: IFFALSE 63566
// result := value * - 1 ;
63551: LD_ADDR_VAR 0 2
63555: PUSH
63556: LD_VAR 0 1
63560: PUSH
63561: LD_INT 1
63563: NEG
63564: MUL
63565: ST_TO_ADDR
// end ;
63566: LD_VAR 0 2
63570: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63571: LD_INT 0
63573: PPUSH
63574: PPUSH
63575: PPUSH
63576: PPUSH
63577: PPUSH
63578: PPUSH
63579: PPUSH
63580: PPUSH
// if not unit or not building then
63581: LD_VAR 0 1
63585: NOT
63586: PUSH
63587: LD_VAR 0 2
63591: NOT
63592: OR
63593: IFFALSE 63597
// exit ;
63595: GO 63823
// x := GetX ( building ) ;
63597: LD_ADDR_VAR 0 4
63601: PUSH
63602: LD_VAR 0 2
63606: PPUSH
63607: CALL_OW 250
63611: ST_TO_ADDR
// y := GetY ( building ) ;
63612: LD_ADDR_VAR 0 6
63616: PUSH
63617: LD_VAR 0 2
63621: PPUSH
63622: CALL_OW 251
63626: ST_TO_ADDR
// d := GetDir ( building ) ;
63627: LD_ADDR_VAR 0 8
63631: PUSH
63632: LD_VAR 0 2
63636: PPUSH
63637: CALL_OW 254
63641: ST_TO_ADDR
// r := 4 ;
63642: LD_ADDR_VAR 0 9
63646: PUSH
63647: LD_INT 4
63649: ST_TO_ADDR
// for i := 1 to 5 do
63650: LD_ADDR_VAR 0 10
63654: PUSH
63655: DOUBLE
63656: LD_INT 1
63658: DEC
63659: ST_TO_ADDR
63660: LD_INT 5
63662: PUSH
63663: FOR_TO
63664: IFFALSE 63821
// begin _x := ShiftX ( x , d , r + i ) ;
63666: LD_ADDR_VAR 0 5
63670: PUSH
63671: LD_VAR 0 4
63675: PPUSH
63676: LD_VAR 0 8
63680: PPUSH
63681: LD_VAR 0 9
63685: PUSH
63686: LD_VAR 0 10
63690: PLUS
63691: PPUSH
63692: CALL_OW 272
63696: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63697: LD_ADDR_VAR 0 7
63701: PUSH
63702: LD_VAR 0 6
63706: PPUSH
63707: LD_VAR 0 8
63711: PPUSH
63712: LD_VAR 0 9
63716: PUSH
63717: LD_VAR 0 10
63721: PLUS
63722: PPUSH
63723: CALL_OW 273
63727: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63728: LD_VAR 0 5
63732: PPUSH
63733: LD_VAR 0 7
63737: PPUSH
63738: CALL_OW 488
63742: PUSH
63743: LD_VAR 0 5
63747: PPUSH
63748: LD_VAR 0 7
63752: PPUSH
63753: CALL_OW 428
63757: PPUSH
63758: CALL_OW 247
63762: PUSH
63763: LD_INT 3
63765: PUSH
63766: LD_INT 2
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: IN
63773: NOT
63774: AND
63775: IFFALSE 63819
// begin ComMoveXY ( unit , _x , _y ) ;
63777: LD_VAR 0 1
63781: PPUSH
63782: LD_VAR 0 5
63786: PPUSH
63787: LD_VAR 0 7
63791: PPUSH
63792: CALL_OW 111
// result := [ _x , _y ] ;
63796: LD_ADDR_VAR 0 3
63800: PUSH
63801: LD_VAR 0 5
63805: PUSH
63806: LD_VAR 0 7
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: ST_TO_ADDR
// exit ;
63815: POP
63816: POP
63817: GO 63823
// end ; end ;
63819: GO 63663
63821: POP
63822: POP
// end ;
63823: LD_VAR 0 3
63827: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63828: LD_INT 0
63830: PPUSH
63831: PPUSH
63832: PPUSH
// result := 0 ;
63833: LD_ADDR_VAR 0 3
63837: PUSH
63838: LD_INT 0
63840: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63841: LD_VAR 0 1
63845: PUSH
63846: LD_INT 0
63848: LESS
63849: PUSH
63850: LD_VAR 0 1
63854: PUSH
63855: LD_INT 8
63857: GREATER
63858: OR
63859: PUSH
63860: LD_VAR 0 2
63864: PUSH
63865: LD_INT 0
63867: LESS
63868: OR
63869: PUSH
63870: LD_VAR 0 2
63874: PUSH
63875: LD_INT 8
63877: GREATER
63878: OR
63879: IFFALSE 63883
// exit ;
63881: GO 63958
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63883: LD_ADDR_VAR 0 4
63887: PUSH
63888: LD_INT 22
63890: PUSH
63891: LD_VAR 0 2
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PPUSH
63900: CALL_OW 69
63904: PUSH
63905: FOR_IN
63906: IFFALSE 63956
// begin un := UnitShoot ( i ) ;
63908: LD_ADDR_VAR 0 5
63912: PUSH
63913: LD_VAR 0 4
63917: PPUSH
63918: CALL_OW 504
63922: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63923: LD_VAR 0 5
63927: PPUSH
63928: CALL_OW 255
63932: PUSH
63933: LD_VAR 0 1
63937: EQUAL
63938: IFFALSE 63954
// begin result := un ;
63940: LD_ADDR_VAR 0 3
63944: PUSH
63945: LD_VAR 0 5
63949: ST_TO_ADDR
// exit ;
63950: POP
63951: POP
63952: GO 63958
// end ; end ;
63954: GO 63905
63956: POP
63957: POP
// end ;
63958: LD_VAR 0 3
63962: RET
// export function GetCargoBay ( units ) ; begin
63963: LD_INT 0
63965: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63966: LD_ADDR_VAR 0 2
63970: PUSH
63971: LD_VAR 0 1
63975: PPUSH
63976: LD_INT 2
63978: PUSH
63979: LD_INT 34
63981: PUSH
63982: LD_INT 12
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 34
63991: PUSH
63992: LD_INT 51
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 34
64001: PUSH
64002: LD_INT 32
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 34
64011: PUSH
64012: LD_EXP 60
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: PPUSH
64028: CALL_OW 72
64032: ST_TO_ADDR
// end ;
64033: LD_VAR 0 2
64037: RET
// export function Negate ( value ) ; begin
64038: LD_INT 0
64040: PPUSH
// result := not value ;
64041: LD_ADDR_VAR 0 2
64045: PUSH
64046: LD_VAR 0 1
64050: NOT
64051: ST_TO_ADDR
// end ;
64052: LD_VAR 0 2
64056: RET
// export function Inc ( value ) ; begin
64057: LD_INT 0
64059: PPUSH
// result := value + 1 ;
64060: LD_ADDR_VAR 0 2
64064: PUSH
64065: LD_VAR 0 1
64069: PUSH
64070: LD_INT 1
64072: PLUS
64073: ST_TO_ADDR
// end ;
64074: LD_VAR 0 2
64078: RET
// export function Dec ( value ) ; begin
64079: LD_INT 0
64081: PPUSH
// result := value - 1 ;
64082: LD_ADDR_VAR 0 2
64086: PUSH
64087: LD_VAR 0 1
64091: PUSH
64092: LD_INT 1
64094: MINUS
64095: ST_TO_ADDR
// end ;
64096: LD_VAR 0 2
64100: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64101: LD_INT 0
64103: PPUSH
64104: PPUSH
64105: PPUSH
64106: PPUSH
64107: PPUSH
64108: PPUSH
64109: PPUSH
64110: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64111: LD_VAR 0 1
64115: PPUSH
64116: LD_VAR 0 2
64120: PPUSH
64121: CALL_OW 488
64125: NOT
64126: PUSH
64127: LD_VAR 0 3
64131: PPUSH
64132: LD_VAR 0 4
64136: PPUSH
64137: CALL_OW 488
64141: NOT
64142: OR
64143: IFFALSE 64156
// begin result := - 1 ;
64145: LD_ADDR_VAR 0 5
64149: PUSH
64150: LD_INT 1
64152: NEG
64153: ST_TO_ADDR
// exit ;
64154: GO 64391
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64156: LD_ADDR_VAR 0 12
64160: PUSH
64161: LD_VAR 0 1
64165: PPUSH
64166: LD_VAR 0 2
64170: PPUSH
64171: LD_VAR 0 3
64175: PPUSH
64176: LD_VAR 0 4
64180: PPUSH
64181: CALL 63239 0 4
64185: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64186: LD_ADDR_VAR 0 11
64190: PUSH
64191: LD_VAR 0 1
64195: PPUSH
64196: LD_VAR 0 2
64200: PPUSH
64201: LD_VAR 0 12
64205: PUSH
64206: LD_INT 1
64208: ARRAY
64209: PPUSH
64210: LD_VAR 0 12
64214: PUSH
64215: LD_INT 2
64217: ARRAY
64218: PPUSH
64219: CALL_OW 298
64223: ST_TO_ADDR
// distance := 9999 ;
64224: LD_ADDR_VAR 0 10
64228: PUSH
64229: LD_INT 9999
64231: ST_TO_ADDR
// for i := 0 to 5 do
64232: LD_ADDR_VAR 0 6
64236: PUSH
64237: DOUBLE
64238: LD_INT 0
64240: DEC
64241: ST_TO_ADDR
64242: LD_INT 5
64244: PUSH
64245: FOR_TO
64246: IFFALSE 64389
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64248: LD_ADDR_VAR 0 7
64252: PUSH
64253: LD_VAR 0 1
64257: PPUSH
64258: LD_VAR 0 6
64262: PPUSH
64263: LD_VAR 0 11
64267: PPUSH
64268: CALL_OW 272
64272: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64273: LD_ADDR_VAR 0 8
64277: PUSH
64278: LD_VAR 0 2
64282: PPUSH
64283: LD_VAR 0 6
64287: PPUSH
64288: LD_VAR 0 11
64292: PPUSH
64293: CALL_OW 273
64297: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64298: LD_VAR 0 7
64302: PPUSH
64303: LD_VAR 0 8
64307: PPUSH
64308: CALL_OW 488
64312: NOT
64313: IFFALSE 64317
// continue ;
64315: GO 64245
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64317: LD_ADDR_VAR 0 9
64321: PUSH
64322: LD_VAR 0 12
64326: PUSH
64327: LD_INT 1
64329: ARRAY
64330: PPUSH
64331: LD_VAR 0 12
64335: PUSH
64336: LD_INT 2
64338: ARRAY
64339: PPUSH
64340: LD_VAR 0 7
64344: PPUSH
64345: LD_VAR 0 8
64349: PPUSH
64350: CALL_OW 298
64354: ST_TO_ADDR
// if tmp < distance then
64355: LD_VAR 0 9
64359: PUSH
64360: LD_VAR 0 10
64364: LESS
64365: IFFALSE 64387
// begin result := i ;
64367: LD_ADDR_VAR 0 5
64371: PUSH
64372: LD_VAR 0 6
64376: ST_TO_ADDR
// distance := tmp ;
64377: LD_ADDR_VAR 0 10
64381: PUSH
64382: LD_VAR 0 9
64386: ST_TO_ADDR
// end ; end ;
64387: GO 64245
64389: POP
64390: POP
// end ;
64391: LD_VAR 0 5
64395: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64396: LD_INT 0
64398: PPUSH
64399: PPUSH
// if not driver or not IsInUnit ( driver ) then
64400: LD_VAR 0 1
64404: NOT
64405: PUSH
64406: LD_VAR 0 1
64410: PPUSH
64411: CALL_OW 310
64415: NOT
64416: OR
64417: IFFALSE 64421
// exit ;
64419: GO 64511
// vehicle := IsInUnit ( driver ) ;
64421: LD_ADDR_VAR 0 3
64425: PUSH
64426: LD_VAR 0 1
64430: PPUSH
64431: CALL_OW 310
64435: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64436: LD_VAR 0 1
64440: PPUSH
64441: LD_STRING \
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: LD_INT 0
64452: PUSH
64453: LD_INT 0
64455: PUSH
64456: LD_INT 0
64458: PUSH
64459: LD_INT 0
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: PUSH
64471: LD_STRING E
64473: PUSH
64474: LD_INT 0
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: LD_VAR 0 3
64484: PUSH
64485: LD_INT 0
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: LD_INT 0
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PPUSH
64507: CALL_OW 446
// end ;
64511: LD_VAR 0 2
64515: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64516: LD_INT 0
64518: PPUSH
64519: PPUSH
// if not driver or not IsInUnit ( driver ) then
64520: LD_VAR 0 1
64524: NOT
64525: PUSH
64526: LD_VAR 0 1
64530: PPUSH
64531: CALL_OW 310
64535: NOT
64536: OR
64537: IFFALSE 64541
// exit ;
64539: GO 64631
// vehicle := IsInUnit ( driver ) ;
64541: LD_ADDR_VAR 0 3
64545: PUSH
64546: LD_VAR 0 1
64550: PPUSH
64551: CALL_OW 310
64555: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64556: LD_VAR 0 1
64560: PPUSH
64561: LD_STRING \
64563: PUSH
64564: LD_INT 0
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: LD_INT 0
64572: PUSH
64573: LD_INT 0
64575: PUSH
64576: LD_INT 0
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: PUSH
64591: LD_STRING E
64593: PUSH
64594: LD_INT 0
64596: PUSH
64597: LD_INT 0
64599: PUSH
64600: LD_VAR 0 3
64604: PUSH
64605: LD_INT 0
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: LD_INT 0
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PPUSH
64627: CALL_OW 447
// end ;
64631: LD_VAR 0 2
64635: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64636: LD_INT 0
64638: PPUSH
64639: PPUSH
64640: PPUSH
// tmp := [ ] ;
64641: LD_ADDR_VAR 0 5
64645: PUSH
64646: EMPTY
64647: ST_TO_ADDR
// for i in units do
64648: LD_ADDR_VAR 0 4
64652: PUSH
64653: LD_VAR 0 1
64657: PUSH
64658: FOR_IN
64659: IFFALSE 64697
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64661: LD_ADDR_VAR 0 5
64665: PUSH
64666: LD_VAR 0 5
64670: PPUSH
64671: LD_VAR 0 5
64675: PUSH
64676: LD_INT 1
64678: PLUS
64679: PPUSH
64680: LD_VAR 0 4
64684: PPUSH
64685: CALL_OW 256
64689: PPUSH
64690: CALL_OW 2
64694: ST_TO_ADDR
64695: GO 64658
64697: POP
64698: POP
// if not tmp then
64699: LD_VAR 0 5
64703: NOT
64704: IFFALSE 64708
// exit ;
64706: GO 64756
// if asc then
64708: LD_VAR 0 2
64712: IFFALSE 64736
// result := SortListByListAsc ( units , tmp ) else
64714: LD_ADDR_VAR 0 3
64718: PUSH
64719: LD_VAR 0 1
64723: PPUSH
64724: LD_VAR 0 5
64728: PPUSH
64729: CALL_OW 76
64733: ST_TO_ADDR
64734: GO 64756
// result := SortListByListDesc ( units , tmp ) ;
64736: LD_ADDR_VAR 0 3
64740: PUSH
64741: LD_VAR 0 1
64745: PPUSH
64746: LD_VAR 0 5
64750: PPUSH
64751: CALL_OW 77
64755: ST_TO_ADDR
// end ;
64756: LD_VAR 0 3
64760: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64761: LD_INT 0
64763: PPUSH
64764: PPUSH
// task := GetTaskList ( mech ) ;
64765: LD_ADDR_VAR 0 4
64769: PUSH
64770: LD_VAR 0 1
64774: PPUSH
64775: CALL_OW 437
64779: ST_TO_ADDR
// if not task then
64780: LD_VAR 0 4
64784: NOT
64785: IFFALSE 64789
// exit ;
64787: GO 64831
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64789: LD_ADDR_VAR 0 3
64793: PUSH
64794: LD_VAR 0 4
64798: PUSH
64799: LD_INT 1
64801: ARRAY
64802: PUSH
64803: LD_INT 1
64805: ARRAY
64806: PUSH
64807: LD_STRING r
64809: EQUAL
64810: PUSH
64811: LD_VAR 0 4
64815: PUSH
64816: LD_INT 1
64818: ARRAY
64819: PUSH
64820: LD_INT 4
64822: ARRAY
64823: PUSH
64824: LD_VAR 0 2
64828: EQUAL
64829: AND
64830: ST_TO_ADDR
// end ;
64831: LD_VAR 0 3
64835: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64836: LD_INT 0
64838: PPUSH
// SetDir ( unit , d ) ;
64839: LD_VAR 0 1
64843: PPUSH
64844: LD_VAR 0 4
64848: PPUSH
64849: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64853: LD_VAR 0 1
64857: PPUSH
64858: LD_VAR 0 2
64862: PPUSH
64863: LD_VAR 0 3
64867: PPUSH
64868: LD_VAR 0 5
64872: PPUSH
64873: CALL_OW 48
// end ;
64877: LD_VAR 0 6
64881: RET
// export function ToNaturalNumber ( number ) ; begin
64882: LD_INT 0
64884: PPUSH
// result := number div 1 ;
64885: LD_ADDR_VAR 0 2
64889: PUSH
64890: LD_VAR 0 1
64894: PUSH
64895: LD_INT 1
64897: DIV
64898: ST_TO_ADDR
// if number < 0 then
64899: LD_VAR 0 1
64903: PUSH
64904: LD_INT 0
64906: LESS
64907: IFFALSE 64917
// result := 0 ;
64909: LD_ADDR_VAR 0 2
64913: PUSH
64914: LD_INT 0
64916: ST_TO_ADDR
// end ;
64917: LD_VAR 0 2
64921: RET
// export function SortByClass ( units , class ) ; var un ; begin
64922: LD_INT 0
64924: PPUSH
64925: PPUSH
// if not units or not class then
64926: LD_VAR 0 1
64930: NOT
64931: PUSH
64932: LD_VAR 0 2
64936: NOT
64937: OR
64938: IFFALSE 64942
// exit ;
64940: GO 65037
// result := [ ] ;
64942: LD_ADDR_VAR 0 3
64946: PUSH
64947: EMPTY
64948: ST_TO_ADDR
// for un in units do
64949: LD_ADDR_VAR 0 4
64953: PUSH
64954: LD_VAR 0 1
64958: PUSH
64959: FOR_IN
64960: IFFALSE 65035
// if GetClass ( un ) = class then
64962: LD_VAR 0 4
64966: PPUSH
64967: CALL_OW 257
64971: PUSH
64972: LD_VAR 0 2
64976: EQUAL
64977: IFFALSE 65004
// result := Insert ( result , 1 , un ) else
64979: LD_ADDR_VAR 0 3
64983: PUSH
64984: LD_VAR 0 3
64988: PPUSH
64989: LD_INT 1
64991: PPUSH
64992: LD_VAR 0 4
64996: PPUSH
64997: CALL_OW 2
65001: ST_TO_ADDR
65002: GO 65033
// result := Replace ( result , result + 1 , un ) ;
65004: LD_ADDR_VAR 0 3
65008: PUSH
65009: LD_VAR 0 3
65013: PPUSH
65014: LD_VAR 0 3
65018: PUSH
65019: LD_INT 1
65021: PLUS
65022: PPUSH
65023: LD_VAR 0 4
65027: PPUSH
65028: CALL_OW 1
65032: ST_TO_ADDR
65033: GO 64959
65035: POP
65036: POP
// end ;
65037: LD_VAR 0 3
65041: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65042: LD_INT 0
65044: PPUSH
65045: PPUSH
65046: PPUSH
65047: PPUSH
65048: PPUSH
65049: PPUSH
65050: PPUSH
// result := [ ] ;
65051: LD_ADDR_VAR 0 4
65055: PUSH
65056: EMPTY
65057: ST_TO_ADDR
// if x - r < 0 then
65058: LD_VAR 0 1
65062: PUSH
65063: LD_VAR 0 3
65067: MINUS
65068: PUSH
65069: LD_INT 0
65071: LESS
65072: IFFALSE 65084
// min_x := 0 else
65074: LD_ADDR_VAR 0 8
65078: PUSH
65079: LD_INT 0
65081: ST_TO_ADDR
65082: GO 65100
// min_x := x - r ;
65084: LD_ADDR_VAR 0 8
65088: PUSH
65089: LD_VAR 0 1
65093: PUSH
65094: LD_VAR 0 3
65098: MINUS
65099: ST_TO_ADDR
// if y - r < 0 then
65100: LD_VAR 0 2
65104: PUSH
65105: LD_VAR 0 3
65109: MINUS
65110: PUSH
65111: LD_INT 0
65113: LESS
65114: IFFALSE 65126
// min_y := 0 else
65116: LD_ADDR_VAR 0 7
65120: PUSH
65121: LD_INT 0
65123: ST_TO_ADDR
65124: GO 65142
// min_y := y - r ;
65126: LD_ADDR_VAR 0 7
65130: PUSH
65131: LD_VAR 0 2
65135: PUSH
65136: LD_VAR 0 3
65140: MINUS
65141: ST_TO_ADDR
// max_x := x + r ;
65142: LD_ADDR_VAR 0 9
65146: PUSH
65147: LD_VAR 0 1
65151: PUSH
65152: LD_VAR 0 3
65156: PLUS
65157: ST_TO_ADDR
// max_y := y + r ;
65158: LD_ADDR_VAR 0 10
65162: PUSH
65163: LD_VAR 0 2
65167: PUSH
65168: LD_VAR 0 3
65172: PLUS
65173: ST_TO_ADDR
// for _x = min_x to max_x do
65174: LD_ADDR_VAR 0 5
65178: PUSH
65179: DOUBLE
65180: LD_VAR 0 8
65184: DEC
65185: ST_TO_ADDR
65186: LD_VAR 0 9
65190: PUSH
65191: FOR_TO
65192: IFFALSE 65293
// for _y = min_y to max_y do
65194: LD_ADDR_VAR 0 6
65198: PUSH
65199: DOUBLE
65200: LD_VAR 0 7
65204: DEC
65205: ST_TO_ADDR
65206: LD_VAR 0 10
65210: PUSH
65211: FOR_TO
65212: IFFALSE 65289
// begin if not ValidHex ( _x , _y ) then
65214: LD_VAR 0 5
65218: PPUSH
65219: LD_VAR 0 6
65223: PPUSH
65224: CALL_OW 488
65228: NOT
65229: IFFALSE 65233
// continue ;
65231: GO 65211
// if GetResourceTypeXY ( _x , _y ) then
65233: LD_VAR 0 5
65237: PPUSH
65238: LD_VAR 0 6
65242: PPUSH
65243: CALL_OW 283
65247: IFFALSE 65287
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65249: LD_ADDR_VAR 0 4
65253: PUSH
65254: LD_VAR 0 4
65258: PPUSH
65259: LD_VAR 0 4
65263: PUSH
65264: LD_INT 1
65266: PLUS
65267: PPUSH
65268: LD_VAR 0 5
65272: PUSH
65273: LD_VAR 0 6
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PPUSH
65282: CALL_OW 1
65286: ST_TO_ADDR
// end ;
65287: GO 65211
65289: POP
65290: POP
65291: GO 65191
65293: POP
65294: POP
// end ;
65295: LD_VAR 0 4
65299: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65300: LD_INT 0
65302: PPUSH
65303: PPUSH
65304: PPUSH
65305: PPUSH
65306: PPUSH
65307: PPUSH
65308: PPUSH
65309: PPUSH
// if not units then
65310: LD_VAR 0 1
65314: NOT
65315: IFFALSE 65319
// exit ;
65317: GO 65845
// result := UnitFilter ( units , [ f_ok ] ) ;
65319: LD_ADDR_VAR 0 3
65323: PUSH
65324: LD_VAR 0 1
65328: PPUSH
65329: LD_INT 50
65331: PUSH
65332: EMPTY
65333: LIST
65334: PPUSH
65335: CALL_OW 72
65339: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65340: LD_ADDR_VAR 0 8
65344: PUSH
65345: LD_VAR 0 1
65349: PUSH
65350: LD_INT 1
65352: ARRAY
65353: PPUSH
65354: CALL_OW 255
65358: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65359: LD_ADDR_VAR 0 10
65363: PUSH
65364: LD_INT 29
65366: PUSH
65367: LD_EXP 63
65371: PUSH
65372: LD_INT 49
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: LIST
65379: ST_TO_ADDR
// if not result then
65380: LD_VAR 0 3
65384: NOT
65385: IFFALSE 65389
// exit ;
65387: GO 65845
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65389: LD_ADDR_VAR 0 5
65393: PUSH
65394: LD_INT 81
65396: PUSH
65397: LD_VAR 0 8
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PPUSH
65406: CALL_OW 69
65410: ST_TO_ADDR
// for i in result do
65411: LD_ADDR_VAR 0 4
65415: PUSH
65416: LD_VAR 0 3
65420: PUSH
65421: FOR_IN
65422: IFFALSE 65843
// begin tag := GetTag ( i ) + 1 ;
65424: LD_ADDR_VAR 0 9
65428: PUSH
65429: LD_VAR 0 4
65433: PPUSH
65434: CALL_OW 110
65438: PUSH
65439: LD_INT 1
65441: PLUS
65442: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65443: LD_ADDR_VAR 0 7
65447: PUSH
65448: LD_VAR 0 4
65452: PPUSH
65453: CALL_OW 250
65457: PPUSH
65458: LD_VAR 0 4
65462: PPUSH
65463: CALL_OW 251
65467: PPUSH
65468: LD_INT 6
65470: PPUSH
65471: CALL 65042 0 3
65475: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65476: LD_VAR 0 4
65480: PPUSH
65481: CALL_OW 247
65485: PUSH
65486: LD_INT 2
65488: EQUAL
65489: PUSH
65490: LD_VAR 0 7
65494: AND
65495: PUSH
65496: LD_VAR 0 4
65500: PPUSH
65501: CALL_OW 264
65505: PUSH
65506: LD_VAR 0 10
65510: IN
65511: NOT
65512: AND
65513: IFFALSE 65552
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65515: LD_VAR 0 4
65519: PPUSH
65520: LD_VAR 0 7
65524: PUSH
65525: LD_INT 1
65527: ARRAY
65528: PUSH
65529: LD_INT 1
65531: ARRAY
65532: PPUSH
65533: LD_VAR 0 7
65537: PUSH
65538: LD_INT 1
65540: ARRAY
65541: PUSH
65542: LD_INT 2
65544: ARRAY
65545: PPUSH
65546: CALL_OW 116
65550: GO 65841
// if path > tag then
65552: LD_VAR 0 2
65556: PUSH
65557: LD_VAR 0 9
65561: GREATER
65562: IFFALSE 65770
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65564: LD_ADDR_VAR 0 6
65568: PUSH
65569: LD_VAR 0 5
65573: PPUSH
65574: LD_INT 91
65576: PUSH
65577: LD_VAR 0 4
65581: PUSH
65582: LD_INT 8
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: LIST
65589: PPUSH
65590: CALL_OW 72
65594: ST_TO_ADDR
// if nearEnemy then
65595: LD_VAR 0 6
65599: IFFALSE 65668
// begin if GetWeapon ( i ) = ru_time_lapser then
65601: LD_VAR 0 4
65605: PPUSH
65606: CALL_OW 264
65610: PUSH
65611: LD_INT 49
65613: EQUAL
65614: IFFALSE 65642
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65616: LD_VAR 0 4
65620: PPUSH
65621: LD_VAR 0 6
65625: PPUSH
65626: LD_VAR 0 4
65630: PPUSH
65631: CALL_OW 74
65635: PPUSH
65636: CALL_OW 112
65640: GO 65666
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65642: LD_VAR 0 4
65646: PPUSH
65647: LD_VAR 0 6
65651: PPUSH
65652: LD_VAR 0 4
65656: PPUSH
65657: CALL_OW 74
65661: PPUSH
65662: CALL_OW 115
// end else
65666: GO 65768
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65668: LD_VAR 0 4
65672: PPUSH
65673: LD_VAR 0 2
65677: PUSH
65678: LD_VAR 0 9
65682: ARRAY
65683: PUSH
65684: LD_INT 1
65686: ARRAY
65687: PPUSH
65688: LD_VAR 0 2
65692: PUSH
65693: LD_VAR 0 9
65697: ARRAY
65698: PUSH
65699: LD_INT 2
65701: ARRAY
65702: PPUSH
65703: CALL_OW 297
65707: PUSH
65708: LD_INT 6
65710: GREATER
65711: IFFALSE 65754
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65713: LD_VAR 0 4
65717: PPUSH
65718: LD_VAR 0 2
65722: PUSH
65723: LD_VAR 0 9
65727: ARRAY
65728: PUSH
65729: LD_INT 1
65731: ARRAY
65732: PPUSH
65733: LD_VAR 0 2
65737: PUSH
65738: LD_VAR 0 9
65742: ARRAY
65743: PUSH
65744: LD_INT 2
65746: ARRAY
65747: PPUSH
65748: CALL_OW 114
65752: GO 65768
// SetTag ( i , tag ) ;
65754: LD_VAR 0 4
65758: PPUSH
65759: LD_VAR 0 9
65763: PPUSH
65764: CALL_OW 109
// end else
65768: GO 65841
// if enemy then
65770: LD_VAR 0 5
65774: IFFALSE 65841
// begin if GetWeapon ( i ) = ru_time_lapser then
65776: LD_VAR 0 4
65780: PPUSH
65781: CALL_OW 264
65785: PUSH
65786: LD_INT 49
65788: EQUAL
65789: IFFALSE 65817
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65791: LD_VAR 0 4
65795: PPUSH
65796: LD_VAR 0 5
65800: PPUSH
65801: LD_VAR 0 4
65805: PPUSH
65806: CALL_OW 74
65810: PPUSH
65811: CALL_OW 112
65815: GO 65841
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65817: LD_VAR 0 4
65821: PPUSH
65822: LD_VAR 0 5
65826: PPUSH
65827: LD_VAR 0 4
65831: PPUSH
65832: CALL_OW 74
65836: PPUSH
65837: CALL_OW 115
// end ; end ;
65841: GO 65421
65843: POP
65844: POP
// end ;
65845: LD_VAR 0 3
65849: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65850: LD_INT 0
65852: PPUSH
65853: PPUSH
65854: PPUSH
// if not unit or IsInUnit ( unit ) then
65855: LD_VAR 0 1
65859: NOT
65860: PUSH
65861: LD_VAR 0 1
65865: PPUSH
65866: CALL_OW 310
65870: OR
65871: IFFALSE 65875
// exit ;
65873: GO 65966
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65875: LD_ADDR_VAR 0 4
65879: PUSH
65880: LD_VAR 0 1
65884: PPUSH
65885: CALL_OW 250
65889: PPUSH
65890: LD_VAR 0 2
65894: PPUSH
65895: LD_INT 1
65897: PPUSH
65898: CALL_OW 272
65902: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65903: LD_ADDR_VAR 0 5
65907: PUSH
65908: LD_VAR 0 1
65912: PPUSH
65913: CALL_OW 251
65917: PPUSH
65918: LD_VAR 0 2
65922: PPUSH
65923: LD_INT 1
65925: PPUSH
65926: CALL_OW 273
65930: ST_TO_ADDR
// if ValidHex ( x , y ) then
65931: LD_VAR 0 4
65935: PPUSH
65936: LD_VAR 0 5
65940: PPUSH
65941: CALL_OW 488
65945: IFFALSE 65966
// ComTurnXY ( unit , x , y ) ;
65947: LD_VAR 0 1
65951: PPUSH
65952: LD_VAR 0 4
65956: PPUSH
65957: LD_VAR 0 5
65961: PPUSH
65962: CALL_OW 118
// end ;
65966: LD_VAR 0 3
65970: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65971: LD_INT 0
65973: PPUSH
65974: PPUSH
// result := false ;
65975: LD_ADDR_VAR 0 3
65979: PUSH
65980: LD_INT 0
65982: ST_TO_ADDR
// if not units then
65983: LD_VAR 0 2
65987: NOT
65988: IFFALSE 65992
// exit ;
65990: GO 66037
// for i in units do
65992: LD_ADDR_VAR 0 4
65996: PUSH
65997: LD_VAR 0 2
66001: PUSH
66002: FOR_IN
66003: IFFALSE 66035
// if See ( side , i ) then
66005: LD_VAR 0 1
66009: PPUSH
66010: LD_VAR 0 4
66014: PPUSH
66015: CALL_OW 292
66019: IFFALSE 66033
// begin result := true ;
66021: LD_ADDR_VAR 0 3
66025: PUSH
66026: LD_INT 1
66028: ST_TO_ADDR
// exit ;
66029: POP
66030: POP
66031: GO 66037
// end ;
66033: GO 66002
66035: POP
66036: POP
// end ;
66037: LD_VAR 0 3
66041: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66042: LD_INT 0
66044: PPUSH
66045: PPUSH
66046: PPUSH
66047: PPUSH
// if not unit or not points then
66048: LD_VAR 0 1
66052: NOT
66053: PUSH
66054: LD_VAR 0 2
66058: NOT
66059: OR
66060: IFFALSE 66064
// exit ;
66062: GO 66154
// dist := 99999 ;
66064: LD_ADDR_VAR 0 5
66068: PUSH
66069: LD_INT 99999
66071: ST_TO_ADDR
// for i in points do
66072: LD_ADDR_VAR 0 4
66076: PUSH
66077: LD_VAR 0 2
66081: PUSH
66082: FOR_IN
66083: IFFALSE 66152
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66085: LD_ADDR_VAR 0 6
66089: PUSH
66090: LD_VAR 0 1
66094: PPUSH
66095: LD_VAR 0 4
66099: PUSH
66100: LD_INT 1
66102: ARRAY
66103: PPUSH
66104: LD_VAR 0 4
66108: PUSH
66109: LD_INT 2
66111: ARRAY
66112: PPUSH
66113: CALL_OW 297
66117: ST_TO_ADDR
// if tmpDist < dist then
66118: LD_VAR 0 6
66122: PUSH
66123: LD_VAR 0 5
66127: LESS
66128: IFFALSE 66150
// begin result := i ;
66130: LD_ADDR_VAR 0 3
66134: PUSH
66135: LD_VAR 0 4
66139: ST_TO_ADDR
// dist := tmpDist ;
66140: LD_ADDR_VAR 0 5
66144: PUSH
66145: LD_VAR 0 6
66149: ST_TO_ADDR
// end ; end ;
66150: GO 66082
66152: POP
66153: POP
// end ;
66154: LD_VAR 0 3
66158: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66159: LD_INT 0
66161: PPUSH
// uc_side := side ;
66162: LD_ADDR_OWVAR 20
66166: PUSH
66167: LD_VAR 0 1
66171: ST_TO_ADDR
// uc_nation := 3 ;
66172: LD_ADDR_OWVAR 21
66176: PUSH
66177: LD_INT 3
66179: ST_TO_ADDR
// vc_chassis := 25 ;
66180: LD_ADDR_OWVAR 37
66184: PUSH
66185: LD_INT 25
66187: ST_TO_ADDR
// vc_engine := engine_siberite ;
66188: LD_ADDR_OWVAR 39
66192: PUSH
66193: LD_INT 3
66195: ST_TO_ADDR
// vc_control := control_computer ;
66196: LD_ADDR_OWVAR 38
66200: PUSH
66201: LD_INT 3
66203: ST_TO_ADDR
// vc_weapon := 59 ;
66204: LD_ADDR_OWVAR 40
66208: PUSH
66209: LD_INT 59
66211: ST_TO_ADDR
// result := CreateVehicle ;
66212: LD_ADDR_VAR 0 5
66216: PUSH
66217: CALL_OW 45
66221: ST_TO_ADDR
// SetDir ( result , d ) ;
66222: LD_VAR 0 5
66226: PPUSH
66227: LD_VAR 0 4
66231: PPUSH
66232: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66236: LD_VAR 0 5
66240: PPUSH
66241: LD_VAR 0 2
66245: PPUSH
66246: LD_VAR 0 3
66250: PPUSH
66251: LD_INT 0
66253: PPUSH
66254: CALL_OW 48
// end ;
66258: LD_VAR 0 5
66262: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66263: LD_INT 0
66265: PPUSH
66266: PPUSH
66267: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66268: LD_ADDR_VAR 0 2
66272: PUSH
66273: LD_INT 0
66275: PUSH
66276: LD_INT 0
66278: PUSH
66279: LD_INT 0
66281: PUSH
66282: LD_INT 0
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66291: LD_VAR 0 1
66295: NOT
66296: PUSH
66297: LD_VAR 0 1
66301: PPUSH
66302: CALL_OW 264
66306: PUSH
66307: LD_INT 12
66309: PUSH
66310: LD_INT 51
66312: PUSH
66313: LD_INT 32
66315: PUSH
66316: LD_EXP 60
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: IN
66327: NOT
66328: OR
66329: IFFALSE 66333
// exit ;
66331: GO 66431
// for i := 1 to 3 do
66333: LD_ADDR_VAR 0 3
66337: PUSH
66338: DOUBLE
66339: LD_INT 1
66341: DEC
66342: ST_TO_ADDR
66343: LD_INT 3
66345: PUSH
66346: FOR_TO
66347: IFFALSE 66429
// begin tmp := GetCargo ( cargo , i ) ;
66349: LD_ADDR_VAR 0 4
66353: PUSH
66354: LD_VAR 0 1
66358: PPUSH
66359: LD_VAR 0 3
66363: PPUSH
66364: CALL_OW 289
66368: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66369: LD_ADDR_VAR 0 2
66373: PUSH
66374: LD_VAR 0 2
66378: PPUSH
66379: LD_VAR 0 3
66383: PPUSH
66384: LD_VAR 0 4
66388: PPUSH
66389: CALL_OW 1
66393: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66394: LD_ADDR_VAR 0 2
66398: PUSH
66399: LD_VAR 0 2
66403: PPUSH
66404: LD_INT 4
66406: PPUSH
66407: LD_VAR 0 2
66411: PUSH
66412: LD_INT 4
66414: ARRAY
66415: PUSH
66416: LD_VAR 0 4
66420: PLUS
66421: PPUSH
66422: CALL_OW 1
66426: ST_TO_ADDR
// end ;
66427: GO 66346
66429: POP
66430: POP
// end ;
66431: LD_VAR 0 2
66435: RET
// export function Length ( array ) ; begin
66436: LD_INT 0
66438: PPUSH
// result := array + 0 ;
66439: LD_ADDR_VAR 0 2
66443: PUSH
66444: LD_VAR 0 1
66448: PUSH
66449: LD_INT 0
66451: PLUS
66452: ST_TO_ADDR
// end ;
66453: LD_VAR 0 2
66457: RET
// export function PrepareArray ( array ) ; begin
66458: LD_INT 0
66460: PPUSH
// result := array diff 0 ;
66461: LD_ADDR_VAR 0 2
66465: PUSH
66466: LD_VAR 0 1
66470: PUSH
66471: LD_INT 0
66473: DIFF
66474: ST_TO_ADDR
// if not result [ 1 ] then
66475: LD_VAR 0 2
66479: PUSH
66480: LD_INT 1
66482: ARRAY
66483: NOT
66484: IFFALSE 66504
// result := Delete ( result , 1 ) ;
66486: LD_ADDR_VAR 0 2
66490: PUSH
66491: LD_VAR 0 2
66495: PPUSH
66496: LD_INT 1
66498: PPUSH
66499: CALL_OW 3
66503: ST_TO_ADDR
// end ; end_of_file
66504: LD_VAR 0 2
66508: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
66509: LD_INT 0
66511: PPUSH
// ar_miner := 81 ;
66512: LD_ADDR_EXP 66
66516: PUSH
66517: LD_INT 81
66519: ST_TO_ADDR
// ar_crane := 88 ;
66520: LD_ADDR_EXP 65
66524: PUSH
66525: LD_INT 88
66527: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
66528: LD_ADDR_EXP 60
66532: PUSH
66533: LD_INT 89
66535: ST_TO_ADDR
// us_hack := 99 ;
66536: LD_ADDR_EXP 61
66540: PUSH
66541: LD_INT 99
66543: ST_TO_ADDR
// us_artillery := 97 ;
66544: LD_ADDR_EXP 62
66548: PUSH
66549: LD_INT 97
66551: ST_TO_ADDR
// ar_bio_bomb := 91 ;
66552: LD_ADDR_EXP 63
66556: PUSH
66557: LD_INT 91
66559: ST_TO_ADDR
// ar_mortar := 92 ;
66560: LD_ADDR_EXP 64
66564: PUSH
66565: LD_INT 92
66567: ST_TO_ADDR
// ru_flamethrower := 93 ;
66568: LD_ADDR_EXP 67
66572: PUSH
66573: LD_INT 93
66575: ST_TO_ADDR
// ru_radar := 98 ;
66576: LD_ADDR_EXP 59
66580: PUSH
66581: LD_INT 98
66583: ST_TO_ADDR
// tech_Artillery := 80 ;
66584: LD_ADDR_EXP 68
66588: PUSH
66589: LD_INT 80
66591: ST_TO_ADDR
// tech_RadMat := 81 ;
66592: LD_ADDR_EXP 69
66596: PUSH
66597: LD_INT 81
66599: ST_TO_ADDR
// tech_BasicTools := 82 ;
66600: LD_ADDR_EXP 70
66604: PUSH
66605: LD_INT 82
66607: ST_TO_ADDR
// tech_Cargo := 83 ;
66608: LD_ADDR_EXP 71
66612: PUSH
66613: LD_INT 83
66615: ST_TO_ADDR
// tech_Track := 84 ;
66616: LD_ADDR_EXP 72
66620: PUSH
66621: LD_INT 84
66623: ST_TO_ADDR
// tech_Crane := 85 ;
66624: LD_ADDR_EXP 73
66628: PUSH
66629: LD_INT 85
66631: ST_TO_ADDR
// tech_Bulldozer := 86 ;
66632: LD_ADDR_EXP 74
66636: PUSH
66637: LD_INT 86
66639: ST_TO_ADDR
// tech_Hovercraft := 87 ;
66640: LD_ADDR_EXP 75
66644: PUSH
66645: LD_INT 87
66647: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
66648: LD_ADDR_EXP 76
66652: PUSH
66653: LD_INT 88
66655: ST_TO_ADDR
// end ;
66656: LD_VAR 0 1
66660: RET
// every 1 do
66661: GO 66663
66663: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
66664: CALL 66509 0 0
66668: END
// every 0 0$1 do
66669: GO 66671
66671: DISABLE
// begin enable ;
66672: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
66673: LD_STRING updateTimer(
66675: PUSH
66676: LD_OWVAR 1
66680: STR
66681: PUSH
66682: LD_STRING );
66684: STR
66685: PPUSH
66686: CALL_OW 559
// end ;
66690: END
// export function SOS_MapStart ( ) ; begin
66691: LD_INT 0
66693: PPUSH
// if streamModeActive then
66694: LD_EXP 77
66698: IFFALSE 66707
// DefineStreamItems ( true ) ;
66700: LD_INT 1
66702: PPUSH
66703: CALL 68361 0 1
// UpdateFactoryWaypoints ( ) ;
66707: CALL 81222 0 0
// UpdateWarehouseGatheringPoints ( ) ;
66711: CALL 81479 0 0
// end ;
66715: LD_VAR 0 1
66719: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66720: LD_INT 0
66722: PPUSH
// if p2 = 100 then
66723: LD_VAR 0 2
66727: PUSH
66728: LD_INT 100
66730: EQUAL
66731: IFFALSE 67734
// begin if not StreamModeActive then
66733: LD_EXP 77
66737: NOT
66738: IFFALSE 66748
// StreamModeActive := true ;
66740: LD_ADDR_EXP 77
66744: PUSH
66745: LD_INT 1
66747: ST_TO_ADDR
// if p3 = 0 then
66748: LD_VAR 0 3
66752: PUSH
66753: LD_INT 0
66755: EQUAL
66756: IFFALSE 66762
// InitStreamMode ;
66758: CALL 67897 0 0
// if p3 = 1 then
66762: LD_VAR 0 3
66766: PUSH
66767: LD_INT 1
66769: EQUAL
66770: IFFALSE 66780
// sRocket := true ;
66772: LD_ADDR_EXP 82
66776: PUSH
66777: LD_INT 1
66779: ST_TO_ADDR
// if p3 = 2 then
66780: LD_VAR 0 3
66784: PUSH
66785: LD_INT 2
66787: EQUAL
66788: IFFALSE 66798
// sSpeed := true ;
66790: LD_ADDR_EXP 81
66794: PUSH
66795: LD_INT 1
66797: ST_TO_ADDR
// if p3 = 3 then
66798: LD_VAR 0 3
66802: PUSH
66803: LD_INT 3
66805: EQUAL
66806: IFFALSE 66816
// sEngine := true ;
66808: LD_ADDR_EXP 83
66812: PUSH
66813: LD_INT 1
66815: ST_TO_ADDR
// if p3 = 4 then
66816: LD_VAR 0 3
66820: PUSH
66821: LD_INT 4
66823: EQUAL
66824: IFFALSE 66834
// sSpec := true ;
66826: LD_ADDR_EXP 80
66830: PUSH
66831: LD_INT 1
66833: ST_TO_ADDR
// if p3 = 5 then
66834: LD_VAR 0 3
66838: PUSH
66839: LD_INT 5
66841: EQUAL
66842: IFFALSE 66852
// sLevel := true ;
66844: LD_ADDR_EXP 84
66848: PUSH
66849: LD_INT 1
66851: ST_TO_ADDR
// if p3 = 6 then
66852: LD_VAR 0 3
66856: PUSH
66857: LD_INT 6
66859: EQUAL
66860: IFFALSE 66870
// sArmoury := true ;
66862: LD_ADDR_EXP 85
66866: PUSH
66867: LD_INT 1
66869: ST_TO_ADDR
// if p3 = 7 then
66870: LD_VAR 0 3
66874: PUSH
66875: LD_INT 7
66877: EQUAL
66878: IFFALSE 66888
// sRadar := true ;
66880: LD_ADDR_EXP 86
66884: PUSH
66885: LD_INT 1
66887: ST_TO_ADDR
// if p3 = 8 then
66888: LD_VAR 0 3
66892: PUSH
66893: LD_INT 8
66895: EQUAL
66896: IFFALSE 66906
// sBunker := true ;
66898: LD_ADDR_EXP 87
66902: PUSH
66903: LD_INT 1
66905: ST_TO_ADDR
// if p3 = 9 then
66906: LD_VAR 0 3
66910: PUSH
66911: LD_INT 9
66913: EQUAL
66914: IFFALSE 66924
// sHack := true ;
66916: LD_ADDR_EXP 88
66920: PUSH
66921: LD_INT 1
66923: ST_TO_ADDR
// if p3 = 10 then
66924: LD_VAR 0 3
66928: PUSH
66929: LD_INT 10
66931: EQUAL
66932: IFFALSE 66942
// sFire := true ;
66934: LD_ADDR_EXP 89
66938: PUSH
66939: LD_INT 1
66941: ST_TO_ADDR
// if p3 = 11 then
66942: LD_VAR 0 3
66946: PUSH
66947: LD_INT 11
66949: EQUAL
66950: IFFALSE 66960
// sRefresh := true ;
66952: LD_ADDR_EXP 90
66956: PUSH
66957: LD_INT 1
66959: ST_TO_ADDR
// if p3 = 12 then
66960: LD_VAR 0 3
66964: PUSH
66965: LD_INT 12
66967: EQUAL
66968: IFFALSE 66978
// sExp := true ;
66970: LD_ADDR_EXP 91
66974: PUSH
66975: LD_INT 1
66977: ST_TO_ADDR
// if p3 = 13 then
66978: LD_VAR 0 3
66982: PUSH
66983: LD_INT 13
66985: EQUAL
66986: IFFALSE 66996
// sDepot := true ;
66988: LD_ADDR_EXP 92
66992: PUSH
66993: LD_INT 1
66995: ST_TO_ADDR
// if p3 = 14 then
66996: LD_VAR 0 3
67000: PUSH
67001: LD_INT 14
67003: EQUAL
67004: IFFALSE 67014
// sFlag := true ;
67006: LD_ADDR_EXP 93
67010: PUSH
67011: LD_INT 1
67013: ST_TO_ADDR
// if p3 = 15 then
67014: LD_VAR 0 3
67018: PUSH
67019: LD_INT 15
67021: EQUAL
67022: IFFALSE 67032
// sKamikadze := true ;
67024: LD_ADDR_EXP 101
67028: PUSH
67029: LD_INT 1
67031: ST_TO_ADDR
// if p3 = 16 then
67032: LD_VAR 0 3
67036: PUSH
67037: LD_INT 16
67039: EQUAL
67040: IFFALSE 67050
// sTroll := true ;
67042: LD_ADDR_EXP 102
67046: PUSH
67047: LD_INT 1
67049: ST_TO_ADDR
// if p3 = 17 then
67050: LD_VAR 0 3
67054: PUSH
67055: LD_INT 17
67057: EQUAL
67058: IFFALSE 67068
// sSlow := true ;
67060: LD_ADDR_EXP 103
67064: PUSH
67065: LD_INT 1
67067: ST_TO_ADDR
// if p3 = 18 then
67068: LD_VAR 0 3
67072: PUSH
67073: LD_INT 18
67075: EQUAL
67076: IFFALSE 67086
// sLack := true ;
67078: LD_ADDR_EXP 104
67082: PUSH
67083: LD_INT 1
67085: ST_TO_ADDR
// if p3 = 19 then
67086: LD_VAR 0 3
67090: PUSH
67091: LD_INT 19
67093: EQUAL
67094: IFFALSE 67104
// sTank := true ;
67096: LD_ADDR_EXP 106
67100: PUSH
67101: LD_INT 1
67103: ST_TO_ADDR
// if p3 = 20 then
67104: LD_VAR 0 3
67108: PUSH
67109: LD_INT 20
67111: EQUAL
67112: IFFALSE 67122
// sRemote := true ;
67114: LD_ADDR_EXP 107
67118: PUSH
67119: LD_INT 1
67121: ST_TO_ADDR
// if p3 = 21 then
67122: LD_VAR 0 3
67126: PUSH
67127: LD_INT 21
67129: EQUAL
67130: IFFALSE 67140
// sPowell := true ;
67132: LD_ADDR_EXP 108
67136: PUSH
67137: LD_INT 1
67139: ST_TO_ADDR
// if p3 = 22 then
67140: LD_VAR 0 3
67144: PUSH
67145: LD_INT 22
67147: EQUAL
67148: IFFALSE 67158
// sTeleport := true ;
67150: LD_ADDR_EXP 111
67154: PUSH
67155: LD_INT 1
67157: ST_TO_ADDR
// if p3 = 23 then
67158: LD_VAR 0 3
67162: PUSH
67163: LD_INT 23
67165: EQUAL
67166: IFFALSE 67176
// sOilTower := true ;
67168: LD_ADDR_EXP 113
67172: PUSH
67173: LD_INT 1
67175: ST_TO_ADDR
// if p3 = 24 then
67176: LD_VAR 0 3
67180: PUSH
67181: LD_INT 24
67183: EQUAL
67184: IFFALSE 67194
// sShovel := true ;
67186: LD_ADDR_EXP 114
67190: PUSH
67191: LD_INT 1
67193: ST_TO_ADDR
// if p3 = 25 then
67194: LD_VAR 0 3
67198: PUSH
67199: LD_INT 25
67201: EQUAL
67202: IFFALSE 67212
// sSheik := true ;
67204: LD_ADDR_EXP 115
67208: PUSH
67209: LD_INT 1
67211: ST_TO_ADDR
// if p3 = 26 then
67212: LD_VAR 0 3
67216: PUSH
67217: LD_INT 26
67219: EQUAL
67220: IFFALSE 67230
// sEarthquake := true ;
67222: LD_ADDR_EXP 117
67226: PUSH
67227: LD_INT 1
67229: ST_TO_ADDR
// if p3 = 27 then
67230: LD_VAR 0 3
67234: PUSH
67235: LD_INT 27
67237: EQUAL
67238: IFFALSE 67248
// sAI := true ;
67240: LD_ADDR_EXP 118
67244: PUSH
67245: LD_INT 1
67247: ST_TO_ADDR
// if p3 = 28 then
67248: LD_VAR 0 3
67252: PUSH
67253: LD_INT 28
67255: EQUAL
67256: IFFALSE 67266
// sCargo := true ;
67258: LD_ADDR_EXP 121
67262: PUSH
67263: LD_INT 1
67265: ST_TO_ADDR
// if p3 = 29 then
67266: LD_VAR 0 3
67270: PUSH
67271: LD_INT 29
67273: EQUAL
67274: IFFALSE 67284
// sDLaser := true ;
67276: LD_ADDR_EXP 122
67280: PUSH
67281: LD_INT 1
67283: ST_TO_ADDR
// if p3 = 30 then
67284: LD_VAR 0 3
67288: PUSH
67289: LD_INT 30
67291: EQUAL
67292: IFFALSE 67302
// sExchange := true ;
67294: LD_ADDR_EXP 123
67298: PUSH
67299: LD_INT 1
67301: ST_TO_ADDR
// if p3 = 31 then
67302: LD_VAR 0 3
67306: PUSH
67307: LD_INT 31
67309: EQUAL
67310: IFFALSE 67320
// sFac := true ;
67312: LD_ADDR_EXP 124
67316: PUSH
67317: LD_INT 1
67319: ST_TO_ADDR
// if p3 = 32 then
67320: LD_VAR 0 3
67324: PUSH
67325: LD_INT 32
67327: EQUAL
67328: IFFALSE 67338
// sPower := true ;
67330: LD_ADDR_EXP 125
67334: PUSH
67335: LD_INT 1
67337: ST_TO_ADDR
// if p3 = 33 then
67338: LD_VAR 0 3
67342: PUSH
67343: LD_INT 33
67345: EQUAL
67346: IFFALSE 67356
// sRandom := true ;
67348: LD_ADDR_EXP 126
67352: PUSH
67353: LD_INT 1
67355: ST_TO_ADDR
// if p3 = 34 then
67356: LD_VAR 0 3
67360: PUSH
67361: LD_INT 34
67363: EQUAL
67364: IFFALSE 67374
// sShield := true ;
67366: LD_ADDR_EXP 127
67370: PUSH
67371: LD_INT 1
67373: ST_TO_ADDR
// if p3 = 35 then
67374: LD_VAR 0 3
67378: PUSH
67379: LD_INT 35
67381: EQUAL
67382: IFFALSE 67392
// sTime := true ;
67384: LD_ADDR_EXP 128
67388: PUSH
67389: LD_INT 1
67391: ST_TO_ADDR
// if p3 = 36 then
67392: LD_VAR 0 3
67396: PUSH
67397: LD_INT 36
67399: EQUAL
67400: IFFALSE 67410
// sTools := true ;
67402: LD_ADDR_EXP 129
67406: PUSH
67407: LD_INT 1
67409: ST_TO_ADDR
// if p3 = 101 then
67410: LD_VAR 0 3
67414: PUSH
67415: LD_INT 101
67417: EQUAL
67418: IFFALSE 67428
// sSold := true ;
67420: LD_ADDR_EXP 94
67424: PUSH
67425: LD_INT 1
67427: ST_TO_ADDR
// if p3 = 102 then
67428: LD_VAR 0 3
67432: PUSH
67433: LD_INT 102
67435: EQUAL
67436: IFFALSE 67446
// sDiff := true ;
67438: LD_ADDR_EXP 95
67442: PUSH
67443: LD_INT 1
67445: ST_TO_ADDR
// if p3 = 103 then
67446: LD_VAR 0 3
67450: PUSH
67451: LD_INT 103
67453: EQUAL
67454: IFFALSE 67464
// sFog := true ;
67456: LD_ADDR_EXP 98
67460: PUSH
67461: LD_INT 1
67463: ST_TO_ADDR
// if p3 = 104 then
67464: LD_VAR 0 3
67468: PUSH
67469: LD_INT 104
67471: EQUAL
67472: IFFALSE 67482
// sReset := true ;
67474: LD_ADDR_EXP 99
67478: PUSH
67479: LD_INT 1
67481: ST_TO_ADDR
// if p3 = 105 then
67482: LD_VAR 0 3
67486: PUSH
67487: LD_INT 105
67489: EQUAL
67490: IFFALSE 67500
// sSun := true ;
67492: LD_ADDR_EXP 100
67496: PUSH
67497: LD_INT 1
67499: ST_TO_ADDR
// if p3 = 106 then
67500: LD_VAR 0 3
67504: PUSH
67505: LD_INT 106
67507: EQUAL
67508: IFFALSE 67518
// sTiger := true ;
67510: LD_ADDR_EXP 96
67514: PUSH
67515: LD_INT 1
67517: ST_TO_ADDR
// if p3 = 107 then
67518: LD_VAR 0 3
67522: PUSH
67523: LD_INT 107
67525: EQUAL
67526: IFFALSE 67536
// sBomb := true ;
67528: LD_ADDR_EXP 97
67532: PUSH
67533: LD_INT 1
67535: ST_TO_ADDR
// if p3 = 108 then
67536: LD_VAR 0 3
67540: PUSH
67541: LD_INT 108
67543: EQUAL
67544: IFFALSE 67554
// sWound := true ;
67546: LD_ADDR_EXP 105
67550: PUSH
67551: LD_INT 1
67553: ST_TO_ADDR
// if p3 = 109 then
67554: LD_VAR 0 3
67558: PUSH
67559: LD_INT 109
67561: EQUAL
67562: IFFALSE 67572
// sBetray := true ;
67564: LD_ADDR_EXP 109
67568: PUSH
67569: LD_INT 1
67571: ST_TO_ADDR
// if p3 = 110 then
67572: LD_VAR 0 3
67576: PUSH
67577: LD_INT 110
67579: EQUAL
67580: IFFALSE 67590
// sContamin := true ;
67582: LD_ADDR_EXP 110
67586: PUSH
67587: LD_INT 1
67589: ST_TO_ADDR
// if p3 = 111 then
67590: LD_VAR 0 3
67594: PUSH
67595: LD_INT 111
67597: EQUAL
67598: IFFALSE 67608
// sOil := true ;
67600: LD_ADDR_EXP 112
67604: PUSH
67605: LD_INT 1
67607: ST_TO_ADDR
// if p3 = 112 then
67608: LD_VAR 0 3
67612: PUSH
67613: LD_INT 112
67615: EQUAL
67616: IFFALSE 67626
// sStu := true ;
67618: LD_ADDR_EXP 116
67622: PUSH
67623: LD_INT 1
67625: ST_TO_ADDR
// if p3 = 113 then
67626: LD_VAR 0 3
67630: PUSH
67631: LD_INT 113
67633: EQUAL
67634: IFFALSE 67644
// sBazooka := true ;
67636: LD_ADDR_EXP 119
67640: PUSH
67641: LD_INT 1
67643: ST_TO_ADDR
// if p3 = 114 then
67644: LD_VAR 0 3
67648: PUSH
67649: LD_INT 114
67651: EQUAL
67652: IFFALSE 67662
// sMortar := true ;
67654: LD_ADDR_EXP 120
67658: PUSH
67659: LD_INT 1
67661: ST_TO_ADDR
// if p3 = 115 then
67662: LD_VAR 0 3
67666: PUSH
67667: LD_INT 115
67669: EQUAL
67670: IFFALSE 67680
// sRanger := true ;
67672: LD_ADDR_EXP 130
67676: PUSH
67677: LD_INT 1
67679: ST_TO_ADDR
// if p3 = 116 then
67680: LD_VAR 0 3
67684: PUSH
67685: LD_INT 116
67687: EQUAL
67688: IFFALSE 67698
// sComputer := true ;
67690: LD_ADDR_EXP 131
67694: PUSH
67695: LD_INT 1
67697: ST_TO_ADDR
// if p3 = 117 then
67698: LD_VAR 0 3
67702: PUSH
67703: LD_INT 117
67705: EQUAL
67706: IFFALSE 67716
// s30 := true ;
67708: LD_ADDR_EXP 132
67712: PUSH
67713: LD_INT 1
67715: ST_TO_ADDR
// if p3 = 118 then
67716: LD_VAR 0 3
67720: PUSH
67721: LD_INT 118
67723: EQUAL
67724: IFFALSE 67734
// s60 := true ;
67726: LD_ADDR_EXP 133
67730: PUSH
67731: LD_INT 1
67733: ST_TO_ADDR
// end ; if p2 = 101 then
67734: LD_VAR 0 2
67738: PUSH
67739: LD_INT 101
67741: EQUAL
67742: IFFALSE 67870
// begin case p3 of 1 :
67744: LD_VAR 0 3
67748: PUSH
67749: LD_INT 1
67751: DOUBLE
67752: EQUAL
67753: IFTRUE 67757
67755: GO 67764
67757: POP
// hHackUnlimitedResources ; 2 :
67758: CALL 79968 0 0
67762: GO 67870
67764: LD_INT 2
67766: DOUBLE
67767: EQUAL
67768: IFTRUE 67772
67770: GO 67779
67772: POP
// hHackSetLevel10 ; 3 :
67773: CALL 80101 0 0
67777: GO 67870
67779: LD_INT 3
67781: DOUBLE
67782: EQUAL
67783: IFTRUE 67787
67785: GO 67794
67787: POP
// hHackSetLevel10YourUnits ; 4 :
67788: CALL 80186 0 0
67792: GO 67870
67794: LD_INT 4
67796: DOUBLE
67797: EQUAL
67798: IFTRUE 67802
67800: GO 67809
67802: POP
// hHackInvincible ; 5 :
67803: CALL 80634 0 0
67807: GO 67870
67809: LD_INT 5
67811: DOUBLE
67812: EQUAL
67813: IFTRUE 67817
67815: GO 67824
67817: POP
// hHackInvisible ; 6 :
67818: CALL 80745 0 0
67822: GO 67870
67824: LD_INT 6
67826: DOUBLE
67827: EQUAL
67828: IFTRUE 67832
67830: GO 67839
67832: POP
// hHackChangeYourSide ; 7 :
67833: CALL 80802 0 0
67837: GO 67870
67839: LD_INT 7
67841: DOUBLE
67842: EQUAL
67843: IFTRUE 67847
67845: GO 67854
67847: POP
// hHackChangeUnitSide ; 8 :
67848: CALL 80844 0 0
67852: GO 67870
67854: LD_INT 8
67856: DOUBLE
67857: EQUAL
67858: IFTRUE 67862
67860: GO 67869
67862: POP
// hHackFog ; end ;
67863: CALL 80945 0 0
67867: GO 67870
67869: POP
// end ; end ;
67870: LD_VAR 0 7
67874: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
67875: GO 67877
67877: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
67878: LD_STRING initStreamRollete();
67880: PPUSH
67881: CALL_OW 559
// InitStreamMode ;
67885: CALL 67897 0 0
// DefineStreamItems ( false ) ;
67889: LD_INT 0
67891: PPUSH
67892: CALL 68361 0 1
// end ;
67896: END
// function InitStreamMode ; begin
67897: LD_INT 0
67899: PPUSH
// streamModeActive := false ;
67900: LD_ADDR_EXP 77
67904: PUSH
67905: LD_INT 0
67907: ST_TO_ADDR
// normalCounter := 36 ;
67908: LD_ADDR_EXP 78
67912: PUSH
67913: LD_INT 36
67915: ST_TO_ADDR
// hardcoreCounter := 18 ;
67916: LD_ADDR_EXP 79
67920: PUSH
67921: LD_INT 18
67923: ST_TO_ADDR
// sRocket := false ;
67924: LD_ADDR_EXP 82
67928: PUSH
67929: LD_INT 0
67931: ST_TO_ADDR
// sSpeed := false ;
67932: LD_ADDR_EXP 81
67936: PUSH
67937: LD_INT 0
67939: ST_TO_ADDR
// sEngine := false ;
67940: LD_ADDR_EXP 83
67944: PUSH
67945: LD_INT 0
67947: ST_TO_ADDR
// sSpec := false ;
67948: LD_ADDR_EXP 80
67952: PUSH
67953: LD_INT 0
67955: ST_TO_ADDR
// sLevel := false ;
67956: LD_ADDR_EXP 84
67960: PUSH
67961: LD_INT 0
67963: ST_TO_ADDR
// sArmoury := false ;
67964: LD_ADDR_EXP 85
67968: PUSH
67969: LD_INT 0
67971: ST_TO_ADDR
// sRadar := false ;
67972: LD_ADDR_EXP 86
67976: PUSH
67977: LD_INT 0
67979: ST_TO_ADDR
// sBunker := false ;
67980: LD_ADDR_EXP 87
67984: PUSH
67985: LD_INT 0
67987: ST_TO_ADDR
// sHack := false ;
67988: LD_ADDR_EXP 88
67992: PUSH
67993: LD_INT 0
67995: ST_TO_ADDR
// sFire := false ;
67996: LD_ADDR_EXP 89
68000: PUSH
68001: LD_INT 0
68003: ST_TO_ADDR
// sRefresh := false ;
68004: LD_ADDR_EXP 90
68008: PUSH
68009: LD_INT 0
68011: ST_TO_ADDR
// sExp := false ;
68012: LD_ADDR_EXP 91
68016: PUSH
68017: LD_INT 0
68019: ST_TO_ADDR
// sDepot := false ;
68020: LD_ADDR_EXP 92
68024: PUSH
68025: LD_INT 0
68027: ST_TO_ADDR
// sFlag := false ;
68028: LD_ADDR_EXP 93
68032: PUSH
68033: LD_INT 0
68035: ST_TO_ADDR
// sKamikadze := false ;
68036: LD_ADDR_EXP 101
68040: PUSH
68041: LD_INT 0
68043: ST_TO_ADDR
// sTroll := false ;
68044: LD_ADDR_EXP 102
68048: PUSH
68049: LD_INT 0
68051: ST_TO_ADDR
// sSlow := false ;
68052: LD_ADDR_EXP 103
68056: PUSH
68057: LD_INT 0
68059: ST_TO_ADDR
// sLack := false ;
68060: LD_ADDR_EXP 104
68064: PUSH
68065: LD_INT 0
68067: ST_TO_ADDR
// sTank := false ;
68068: LD_ADDR_EXP 106
68072: PUSH
68073: LD_INT 0
68075: ST_TO_ADDR
// sRemote := false ;
68076: LD_ADDR_EXP 107
68080: PUSH
68081: LD_INT 0
68083: ST_TO_ADDR
// sPowell := false ;
68084: LD_ADDR_EXP 108
68088: PUSH
68089: LD_INT 0
68091: ST_TO_ADDR
// sTeleport := false ;
68092: LD_ADDR_EXP 111
68096: PUSH
68097: LD_INT 0
68099: ST_TO_ADDR
// sOilTower := false ;
68100: LD_ADDR_EXP 113
68104: PUSH
68105: LD_INT 0
68107: ST_TO_ADDR
// sShovel := false ;
68108: LD_ADDR_EXP 114
68112: PUSH
68113: LD_INT 0
68115: ST_TO_ADDR
// sSheik := false ;
68116: LD_ADDR_EXP 115
68120: PUSH
68121: LD_INT 0
68123: ST_TO_ADDR
// sEarthquake := false ;
68124: LD_ADDR_EXP 117
68128: PUSH
68129: LD_INT 0
68131: ST_TO_ADDR
// sAI := false ;
68132: LD_ADDR_EXP 118
68136: PUSH
68137: LD_INT 0
68139: ST_TO_ADDR
// sCargo := false ;
68140: LD_ADDR_EXP 121
68144: PUSH
68145: LD_INT 0
68147: ST_TO_ADDR
// sDLaser := false ;
68148: LD_ADDR_EXP 122
68152: PUSH
68153: LD_INT 0
68155: ST_TO_ADDR
// sExchange := false ;
68156: LD_ADDR_EXP 123
68160: PUSH
68161: LD_INT 0
68163: ST_TO_ADDR
// sFac := false ;
68164: LD_ADDR_EXP 124
68168: PUSH
68169: LD_INT 0
68171: ST_TO_ADDR
// sPower := false ;
68172: LD_ADDR_EXP 125
68176: PUSH
68177: LD_INT 0
68179: ST_TO_ADDR
// sRandom := false ;
68180: LD_ADDR_EXP 126
68184: PUSH
68185: LD_INT 0
68187: ST_TO_ADDR
// sShield := false ;
68188: LD_ADDR_EXP 127
68192: PUSH
68193: LD_INT 0
68195: ST_TO_ADDR
// sTime := false ;
68196: LD_ADDR_EXP 128
68200: PUSH
68201: LD_INT 0
68203: ST_TO_ADDR
// sTools := false ;
68204: LD_ADDR_EXP 129
68208: PUSH
68209: LD_INT 0
68211: ST_TO_ADDR
// sSold := false ;
68212: LD_ADDR_EXP 94
68216: PUSH
68217: LD_INT 0
68219: ST_TO_ADDR
// sDiff := false ;
68220: LD_ADDR_EXP 95
68224: PUSH
68225: LD_INT 0
68227: ST_TO_ADDR
// sFog := false ;
68228: LD_ADDR_EXP 98
68232: PUSH
68233: LD_INT 0
68235: ST_TO_ADDR
// sReset := false ;
68236: LD_ADDR_EXP 99
68240: PUSH
68241: LD_INT 0
68243: ST_TO_ADDR
// sSun := false ;
68244: LD_ADDR_EXP 100
68248: PUSH
68249: LD_INT 0
68251: ST_TO_ADDR
// sTiger := false ;
68252: LD_ADDR_EXP 96
68256: PUSH
68257: LD_INT 0
68259: ST_TO_ADDR
// sBomb := false ;
68260: LD_ADDR_EXP 97
68264: PUSH
68265: LD_INT 0
68267: ST_TO_ADDR
// sWound := false ;
68268: LD_ADDR_EXP 105
68272: PUSH
68273: LD_INT 0
68275: ST_TO_ADDR
// sBetray := false ;
68276: LD_ADDR_EXP 109
68280: PUSH
68281: LD_INT 0
68283: ST_TO_ADDR
// sContamin := false ;
68284: LD_ADDR_EXP 110
68288: PUSH
68289: LD_INT 0
68291: ST_TO_ADDR
// sOil := false ;
68292: LD_ADDR_EXP 112
68296: PUSH
68297: LD_INT 0
68299: ST_TO_ADDR
// sStu := false ;
68300: LD_ADDR_EXP 116
68304: PUSH
68305: LD_INT 0
68307: ST_TO_ADDR
// sBazooka := false ;
68308: LD_ADDR_EXP 119
68312: PUSH
68313: LD_INT 0
68315: ST_TO_ADDR
// sMortar := false ;
68316: LD_ADDR_EXP 120
68320: PUSH
68321: LD_INT 0
68323: ST_TO_ADDR
// sRanger := false ;
68324: LD_ADDR_EXP 130
68328: PUSH
68329: LD_INT 0
68331: ST_TO_ADDR
// sComputer := false ;
68332: LD_ADDR_EXP 131
68336: PUSH
68337: LD_INT 0
68339: ST_TO_ADDR
// s30 := false ;
68340: LD_ADDR_EXP 132
68344: PUSH
68345: LD_INT 0
68347: ST_TO_ADDR
// s60 := false ;
68348: LD_ADDR_EXP 133
68352: PUSH
68353: LD_INT 0
68355: ST_TO_ADDR
// end ;
68356: LD_VAR 0 1
68360: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
68361: LD_INT 0
68363: PPUSH
68364: PPUSH
68365: PPUSH
68366: PPUSH
68367: PPUSH
68368: PPUSH
68369: PPUSH
// result := [ ] ;
68370: LD_ADDR_VAR 0 2
68374: PUSH
68375: EMPTY
68376: ST_TO_ADDR
// if campaign_id = 1 then
68377: LD_OWVAR 69
68381: PUSH
68382: LD_INT 1
68384: EQUAL
68385: IFFALSE 71551
// begin case mission_number of 1 :
68387: LD_OWVAR 70
68391: PUSH
68392: LD_INT 1
68394: DOUBLE
68395: EQUAL
68396: IFTRUE 68400
68398: GO 68476
68400: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
68401: LD_ADDR_VAR 0 2
68405: PUSH
68406: LD_INT 2
68408: PUSH
68409: LD_INT 4
68411: PUSH
68412: LD_INT 11
68414: PUSH
68415: LD_INT 12
68417: PUSH
68418: LD_INT 15
68420: PUSH
68421: LD_INT 16
68423: PUSH
68424: LD_INT 22
68426: PUSH
68427: LD_INT 23
68429: PUSH
68430: LD_INT 26
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 101
68446: PUSH
68447: LD_INT 102
68449: PUSH
68450: LD_INT 106
68452: PUSH
68453: LD_INT 116
68455: PUSH
68456: LD_INT 117
68458: PUSH
68459: LD_INT 118
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: ST_TO_ADDR
68474: GO 71549
68476: LD_INT 2
68478: DOUBLE
68479: EQUAL
68480: IFTRUE 68484
68482: GO 68568
68484: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
68485: LD_ADDR_VAR 0 2
68489: PUSH
68490: LD_INT 2
68492: PUSH
68493: LD_INT 4
68495: PUSH
68496: LD_INT 11
68498: PUSH
68499: LD_INT 12
68501: PUSH
68502: LD_INT 15
68504: PUSH
68505: LD_INT 16
68507: PUSH
68508: LD_INT 22
68510: PUSH
68511: LD_INT 23
68513: PUSH
68514: LD_INT 26
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 101
68530: PUSH
68531: LD_INT 102
68533: PUSH
68534: LD_INT 105
68536: PUSH
68537: LD_INT 106
68539: PUSH
68540: LD_INT 108
68542: PUSH
68543: LD_INT 116
68545: PUSH
68546: LD_INT 117
68548: PUSH
68549: LD_INT 118
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: ST_TO_ADDR
68566: GO 71549
68568: LD_INT 3
68570: DOUBLE
68571: EQUAL
68572: IFTRUE 68576
68574: GO 68664
68576: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
68577: LD_ADDR_VAR 0 2
68581: PUSH
68582: LD_INT 2
68584: PUSH
68585: LD_INT 4
68587: PUSH
68588: LD_INT 5
68590: PUSH
68591: LD_INT 11
68593: PUSH
68594: LD_INT 12
68596: PUSH
68597: LD_INT 15
68599: PUSH
68600: LD_INT 16
68602: PUSH
68603: LD_INT 22
68605: PUSH
68606: LD_INT 26
68608: PUSH
68609: LD_INT 36
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 101
68626: PUSH
68627: LD_INT 102
68629: PUSH
68630: LD_INT 105
68632: PUSH
68633: LD_INT 106
68635: PUSH
68636: LD_INT 108
68638: PUSH
68639: LD_INT 116
68641: PUSH
68642: LD_INT 117
68644: PUSH
68645: LD_INT 118
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: ST_TO_ADDR
68662: GO 71549
68664: LD_INT 4
68666: DOUBLE
68667: EQUAL
68668: IFTRUE 68672
68670: GO 68768
68672: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
68673: LD_ADDR_VAR 0 2
68677: PUSH
68678: LD_INT 2
68680: PUSH
68681: LD_INT 4
68683: PUSH
68684: LD_INT 5
68686: PUSH
68687: LD_INT 8
68689: PUSH
68690: LD_INT 11
68692: PUSH
68693: LD_INT 12
68695: PUSH
68696: LD_INT 15
68698: PUSH
68699: LD_INT 16
68701: PUSH
68702: LD_INT 22
68704: PUSH
68705: LD_INT 23
68707: PUSH
68708: LD_INT 26
68710: PUSH
68711: LD_INT 36
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 101
68730: PUSH
68731: LD_INT 102
68733: PUSH
68734: LD_INT 105
68736: PUSH
68737: LD_INT 106
68739: PUSH
68740: LD_INT 108
68742: PUSH
68743: LD_INT 116
68745: PUSH
68746: LD_INT 117
68748: PUSH
68749: LD_INT 118
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: ST_TO_ADDR
68766: GO 71549
68768: LD_INT 5
68770: DOUBLE
68771: EQUAL
68772: IFTRUE 68776
68774: GO 68888
68776: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
68777: LD_ADDR_VAR 0 2
68781: PUSH
68782: LD_INT 2
68784: PUSH
68785: LD_INT 4
68787: PUSH
68788: LD_INT 5
68790: PUSH
68791: LD_INT 6
68793: PUSH
68794: LD_INT 8
68796: PUSH
68797: LD_INT 11
68799: PUSH
68800: LD_INT 12
68802: PUSH
68803: LD_INT 15
68805: PUSH
68806: LD_INT 16
68808: PUSH
68809: LD_INT 22
68811: PUSH
68812: LD_INT 23
68814: PUSH
68815: LD_INT 25
68817: PUSH
68818: LD_INT 26
68820: PUSH
68821: LD_INT 36
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 101
68842: PUSH
68843: LD_INT 102
68845: PUSH
68846: LD_INT 105
68848: PUSH
68849: LD_INT 106
68851: PUSH
68852: LD_INT 108
68854: PUSH
68855: LD_INT 109
68857: PUSH
68858: LD_INT 112
68860: PUSH
68861: LD_INT 116
68863: PUSH
68864: LD_INT 117
68866: PUSH
68867: LD_INT 118
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: ST_TO_ADDR
68886: GO 71549
68888: LD_INT 6
68890: DOUBLE
68891: EQUAL
68892: IFTRUE 68896
68894: GO 69028
68896: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
68897: LD_ADDR_VAR 0 2
68901: PUSH
68902: LD_INT 2
68904: PUSH
68905: LD_INT 4
68907: PUSH
68908: LD_INT 5
68910: PUSH
68911: LD_INT 6
68913: PUSH
68914: LD_INT 8
68916: PUSH
68917: LD_INT 11
68919: PUSH
68920: LD_INT 12
68922: PUSH
68923: LD_INT 15
68925: PUSH
68926: LD_INT 16
68928: PUSH
68929: LD_INT 20
68931: PUSH
68932: LD_INT 21
68934: PUSH
68935: LD_INT 22
68937: PUSH
68938: LD_INT 23
68940: PUSH
68941: LD_INT 25
68943: PUSH
68944: LD_INT 26
68946: PUSH
68947: LD_INT 30
68949: PUSH
68950: LD_INT 31
68952: PUSH
68953: LD_INT 32
68955: PUSH
68956: LD_INT 36
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 101
68982: PUSH
68983: LD_INT 102
68985: PUSH
68986: LD_INT 105
68988: PUSH
68989: LD_INT 106
68991: PUSH
68992: LD_INT 108
68994: PUSH
68995: LD_INT 109
68997: PUSH
68998: LD_INT 112
69000: PUSH
69001: LD_INT 116
69003: PUSH
69004: LD_INT 117
69006: PUSH
69007: LD_INT 118
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: ST_TO_ADDR
69026: GO 71549
69028: LD_INT 7
69030: DOUBLE
69031: EQUAL
69032: IFTRUE 69036
69034: GO 69148
69036: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
69037: LD_ADDR_VAR 0 2
69041: PUSH
69042: LD_INT 2
69044: PUSH
69045: LD_INT 4
69047: PUSH
69048: LD_INT 5
69050: PUSH
69051: LD_INT 7
69053: PUSH
69054: LD_INT 11
69056: PUSH
69057: LD_INT 12
69059: PUSH
69060: LD_INT 15
69062: PUSH
69063: LD_INT 16
69065: PUSH
69066: LD_INT 20
69068: PUSH
69069: LD_INT 21
69071: PUSH
69072: LD_INT 22
69074: PUSH
69075: LD_INT 23
69077: PUSH
69078: LD_INT 25
69080: PUSH
69081: LD_INT 26
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 101
69102: PUSH
69103: LD_INT 102
69105: PUSH
69106: LD_INT 103
69108: PUSH
69109: LD_INT 105
69111: PUSH
69112: LD_INT 106
69114: PUSH
69115: LD_INT 108
69117: PUSH
69118: LD_INT 112
69120: PUSH
69121: LD_INT 116
69123: PUSH
69124: LD_INT 117
69126: PUSH
69127: LD_INT 118
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: ST_TO_ADDR
69146: GO 71549
69148: LD_INT 8
69150: DOUBLE
69151: EQUAL
69152: IFTRUE 69156
69154: GO 69296
69156: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
69157: LD_ADDR_VAR 0 2
69161: PUSH
69162: LD_INT 2
69164: PUSH
69165: LD_INT 4
69167: PUSH
69168: LD_INT 5
69170: PUSH
69171: LD_INT 6
69173: PUSH
69174: LD_INT 7
69176: PUSH
69177: LD_INT 8
69179: PUSH
69180: LD_INT 11
69182: PUSH
69183: LD_INT 12
69185: PUSH
69186: LD_INT 15
69188: PUSH
69189: LD_INT 16
69191: PUSH
69192: LD_INT 20
69194: PUSH
69195: LD_INT 21
69197: PUSH
69198: LD_INT 22
69200: PUSH
69201: LD_INT 23
69203: PUSH
69204: LD_INT 25
69206: PUSH
69207: LD_INT 26
69209: PUSH
69210: LD_INT 30
69212: PUSH
69213: LD_INT 31
69215: PUSH
69216: LD_INT 32
69218: PUSH
69219: LD_INT 36
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 101
69246: PUSH
69247: LD_INT 102
69249: PUSH
69250: LD_INT 103
69252: PUSH
69253: LD_INT 105
69255: PUSH
69256: LD_INT 106
69258: PUSH
69259: LD_INT 108
69261: PUSH
69262: LD_INT 109
69264: PUSH
69265: LD_INT 112
69267: PUSH
69268: LD_INT 116
69270: PUSH
69271: LD_INT 117
69273: PUSH
69274: LD_INT 118
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: ST_TO_ADDR
69294: GO 71549
69296: LD_INT 9
69298: DOUBLE
69299: EQUAL
69300: IFTRUE 69304
69302: GO 69452
69304: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
69305: LD_ADDR_VAR 0 2
69309: PUSH
69310: LD_INT 2
69312: PUSH
69313: LD_INT 4
69315: PUSH
69316: LD_INT 5
69318: PUSH
69319: LD_INT 6
69321: PUSH
69322: LD_INT 7
69324: PUSH
69325: LD_INT 8
69327: PUSH
69328: LD_INT 11
69330: PUSH
69331: LD_INT 12
69333: PUSH
69334: LD_INT 15
69336: PUSH
69337: LD_INT 16
69339: PUSH
69340: LD_INT 20
69342: PUSH
69343: LD_INT 21
69345: PUSH
69346: LD_INT 22
69348: PUSH
69349: LD_INT 23
69351: PUSH
69352: LD_INT 25
69354: PUSH
69355: LD_INT 26
69357: PUSH
69358: LD_INT 28
69360: PUSH
69361: LD_INT 30
69363: PUSH
69364: LD_INT 31
69366: PUSH
69367: LD_INT 32
69369: PUSH
69370: LD_INT 36
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 101
69398: PUSH
69399: LD_INT 102
69401: PUSH
69402: LD_INT 103
69404: PUSH
69405: LD_INT 105
69407: PUSH
69408: LD_INT 106
69410: PUSH
69411: LD_INT 108
69413: PUSH
69414: LD_INT 109
69416: PUSH
69417: LD_INT 112
69419: PUSH
69420: LD_INT 114
69422: PUSH
69423: LD_INT 116
69425: PUSH
69426: LD_INT 117
69428: PUSH
69429: LD_INT 118
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: LIST
69436: LIST
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: ST_TO_ADDR
69450: GO 71549
69452: LD_INT 10
69454: DOUBLE
69455: EQUAL
69456: IFTRUE 69460
69458: GO 69656
69460: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
69461: LD_ADDR_VAR 0 2
69465: PUSH
69466: LD_INT 2
69468: PUSH
69469: LD_INT 4
69471: PUSH
69472: LD_INT 5
69474: PUSH
69475: LD_INT 6
69477: PUSH
69478: LD_INT 7
69480: PUSH
69481: LD_INT 8
69483: PUSH
69484: LD_INT 9
69486: PUSH
69487: LD_INT 10
69489: PUSH
69490: LD_INT 11
69492: PUSH
69493: LD_INT 12
69495: PUSH
69496: LD_INT 13
69498: PUSH
69499: LD_INT 14
69501: PUSH
69502: LD_INT 15
69504: PUSH
69505: LD_INT 16
69507: PUSH
69508: LD_INT 17
69510: PUSH
69511: LD_INT 18
69513: PUSH
69514: LD_INT 19
69516: PUSH
69517: LD_INT 20
69519: PUSH
69520: LD_INT 21
69522: PUSH
69523: LD_INT 22
69525: PUSH
69526: LD_INT 23
69528: PUSH
69529: LD_INT 24
69531: PUSH
69532: LD_INT 25
69534: PUSH
69535: LD_INT 26
69537: PUSH
69538: LD_INT 28
69540: PUSH
69541: LD_INT 30
69543: PUSH
69544: LD_INT 31
69546: PUSH
69547: LD_INT 32
69549: PUSH
69550: LD_INT 36
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 101
69586: PUSH
69587: LD_INT 102
69589: PUSH
69590: LD_INT 103
69592: PUSH
69593: LD_INT 104
69595: PUSH
69596: LD_INT 105
69598: PUSH
69599: LD_INT 106
69601: PUSH
69602: LD_INT 107
69604: PUSH
69605: LD_INT 108
69607: PUSH
69608: LD_INT 109
69610: PUSH
69611: LD_INT 110
69613: PUSH
69614: LD_INT 111
69616: PUSH
69617: LD_INT 112
69619: PUSH
69620: LD_INT 114
69622: PUSH
69623: LD_INT 116
69625: PUSH
69626: LD_INT 117
69628: PUSH
69629: LD_INT 118
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: ST_TO_ADDR
69654: GO 71549
69656: LD_INT 11
69658: DOUBLE
69659: EQUAL
69660: IFTRUE 69664
69662: GO 69868
69664: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
69665: LD_ADDR_VAR 0 2
69669: PUSH
69670: LD_INT 2
69672: PUSH
69673: LD_INT 3
69675: PUSH
69676: LD_INT 4
69678: PUSH
69679: LD_INT 5
69681: PUSH
69682: LD_INT 6
69684: PUSH
69685: LD_INT 7
69687: PUSH
69688: LD_INT 8
69690: PUSH
69691: LD_INT 9
69693: PUSH
69694: LD_INT 10
69696: PUSH
69697: LD_INT 11
69699: PUSH
69700: LD_INT 12
69702: PUSH
69703: LD_INT 13
69705: PUSH
69706: LD_INT 14
69708: PUSH
69709: LD_INT 15
69711: PUSH
69712: LD_INT 16
69714: PUSH
69715: LD_INT 17
69717: PUSH
69718: LD_INT 18
69720: PUSH
69721: LD_INT 19
69723: PUSH
69724: LD_INT 20
69726: PUSH
69727: LD_INT 21
69729: PUSH
69730: LD_INT 22
69732: PUSH
69733: LD_INT 23
69735: PUSH
69736: LD_INT 24
69738: PUSH
69739: LD_INT 25
69741: PUSH
69742: LD_INT 26
69744: PUSH
69745: LD_INT 28
69747: PUSH
69748: LD_INT 30
69750: PUSH
69751: LD_INT 31
69753: PUSH
69754: LD_INT 32
69756: PUSH
69757: LD_INT 34
69759: PUSH
69760: LD_INT 36
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 101
69798: PUSH
69799: LD_INT 102
69801: PUSH
69802: LD_INT 103
69804: PUSH
69805: LD_INT 104
69807: PUSH
69808: LD_INT 105
69810: PUSH
69811: LD_INT 106
69813: PUSH
69814: LD_INT 107
69816: PUSH
69817: LD_INT 108
69819: PUSH
69820: LD_INT 109
69822: PUSH
69823: LD_INT 110
69825: PUSH
69826: LD_INT 111
69828: PUSH
69829: LD_INT 112
69831: PUSH
69832: LD_INT 114
69834: PUSH
69835: LD_INT 116
69837: PUSH
69838: LD_INT 117
69840: PUSH
69841: LD_INT 118
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: ST_TO_ADDR
69866: GO 71549
69868: LD_INT 12
69870: DOUBLE
69871: EQUAL
69872: IFTRUE 69876
69874: GO 70096
69876: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
69877: LD_ADDR_VAR 0 2
69881: PUSH
69882: LD_INT 1
69884: PUSH
69885: LD_INT 2
69887: PUSH
69888: LD_INT 3
69890: PUSH
69891: LD_INT 4
69893: PUSH
69894: LD_INT 5
69896: PUSH
69897: LD_INT 6
69899: PUSH
69900: LD_INT 7
69902: PUSH
69903: LD_INT 8
69905: PUSH
69906: LD_INT 9
69908: PUSH
69909: LD_INT 10
69911: PUSH
69912: LD_INT 11
69914: PUSH
69915: LD_INT 12
69917: PUSH
69918: LD_INT 13
69920: PUSH
69921: LD_INT 14
69923: PUSH
69924: LD_INT 15
69926: PUSH
69927: LD_INT 16
69929: PUSH
69930: LD_INT 17
69932: PUSH
69933: LD_INT 18
69935: PUSH
69936: LD_INT 19
69938: PUSH
69939: LD_INT 20
69941: PUSH
69942: LD_INT 21
69944: PUSH
69945: LD_INT 22
69947: PUSH
69948: LD_INT 23
69950: PUSH
69951: LD_INT 24
69953: PUSH
69954: LD_INT 25
69956: PUSH
69957: LD_INT 26
69959: PUSH
69960: LD_INT 27
69962: PUSH
69963: LD_INT 28
69965: PUSH
69966: LD_INT 30
69968: PUSH
69969: LD_INT 31
69971: PUSH
69972: LD_INT 32
69974: PUSH
69975: LD_INT 33
69977: PUSH
69978: LD_INT 34
69980: PUSH
69981: LD_INT 36
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: LIST
70002: LIST
70003: LIST
70004: LIST
70005: LIST
70006: LIST
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 101
70022: PUSH
70023: LD_INT 102
70025: PUSH
70026: LD_INT 103
70028: PUSH
70029: LD_INT 104
70031: PUSH
70032: LD_INT 105
70034: PUSH
70035: LD_INT 106
70037: PUSH
70038: LD_INT 107
70040: PUSH
70041: LD_INT 108
70043: PUSH
70044: LD_INT 109
70046: PUSH
70047: LD_INT 110
70049: PUSH
70050: LD_INT 111
70052: PUSH
70053: LD_INT 112
70055: PUSH
70056: LD_INT 113
70058: PUSH
70059: LD_INT 114
70061: PUSH
70062: LD_INT 116
70064: PUSH
70065: LD_INT 117
70067: PUSH
70068: LD_INT 118
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: ST_TO_ADDR
70094: GO 71549
70096: LD_INT 13
70098: DOUBLE
70099: EQUAL
70100: IFTRUE 70104
70102: GO 70312
70104: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
70105: LD_ADDR_VAR 0 2
70109: PUSH
70110: LD_INT 1
70112: PUSH
70113: LD_INT 2
70115: PUSH
70116: LD_INT 3
70118: PUSH
70119: LD_INT 4
70121: PUSH
70122: LD_INT 5
70124: PUSH
70125: LD_INT 8
70127: PUSH
70128: LD_INT 9
70130: PUSH
70131: LD_INT 10
70133: PUSH
70134: LD_INT 11
70136: PUSH
70137: LD_INT 12
70139: PUSH
70140: LD_INT 14
70142: PUSH
70143: LD_INT 15
70145: PUSH
70146: LD_INT 16
70148: PUSH
70149: LD_INT 17
70151: PUSH
70152: LD_INT 18
70154: PUSH
70155: LD_INT 19
70157: PUSH
70158: LD_INT 20
70160: PUSH
70161: LD_INT 21
70163: PUSH
70164: LD_INT 22
70166: PUSH
70167: LD_INT 23
70169: PUSH
70170: LD_INT 24
70172: PUSH
70173: LD_INT 25
70175: PUSH
70176: LD_INT 26
70178: PUSH
70179: LD_INT 27
70181: PUSH
70182: LD_INT 28
70184: PUSH
70185: LD_INT 30
70187: PUSH
70188: LD_INT 31
70190: PUSH
70191: LD_INT 32
70193: PUSH
70194: LD_INT 33
70196: PUSH
70197: LD_INT 34
70199: PUSH
70200: LD_INT 36
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 101
70238: PUSH
70239: LD_INT 102
70241: PUSH
70242: LD_INT 103
70244: PUSH
70245: LD_INT 104
70247: PUSH
70248: LD_INT 105
70250: PUSH
70251: LD_INT 106
70253: PUSH
70254: LD_INT 107
70256: PUSH
70257: LD_INT 108
70259: PUSH
70260: LD_INT 109
70262: PUSH
70263: LD_INT 110
70265: PUSH
70266: LD_INT 111
70268: PUSH
70269: LD_INT 112
70271: PUSH
70272: LD_INT 113
70274: PUSH
70275: LD_INT 114
70277: PUSH
70278: LD_INT 116
70280: PUSH
70281: LD_INT 117
70283: PUSH
70284: LD_INT 118
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: ST_TO_ADDR
70310: GO 71549
70312: LD_INT 14
70314: DOUBLE
70315: EQUAL
70316: IFTRUE 70320
70318: GO 70544
70320: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
70321: LD_ADDR_VAR 0 2
70325: PUSH
70326: LD_INT 1
70328: PUSH
70329: LD_INT 2
70331: PUSH
70332: LD_INT 3
70334: PUSH
70335: LD_INT 4
70337: PUSH
70338: LD_INT 5
70340: PUSH
70341: LD_INT 6
70343: PUSH
70344: LD_INT 7
70346: PUSH
70347: LD_INT 8
70349: PUSH
70350: LD_INT 9
70352: PUSH
70353: LD_INT 10
70355: PUSH
70356: LD_INT 11
70358: PUSH
70359: LD_INT 12
70361: PUSH
70362: LD_INT 13
70364: PUSH
70365: LD_INT 14
70367: PUSH
70368: LD_INT 15
70370: PUSH
70371: LD_INT 16
70373: PUSH
70374: LD_INT 17
70376: PUSH
70377: LD_INT 18
70379: PUSH
70380: LD_INT 19
70382: PUSH
70383: LD_INT 20
70385: PUSH
70386: LD_INT 21
70388: PUSH
70389: LD_INT 22
70391: PUSH
70392: LD_INT 23
70394: PUSH
70395: LD_INT 24
70397: PUSH
70398: LD_INT 25
70400: PUSH
70401: LD_INT 26
70403: PUSH
70404: LD_INT 27
70406: PUSH
70407: LD_INT 28
70409: PUSH
70410: LD_INT 29
70412: PUSH
70413: LD_INT 30
70415: PUSH
70416: LD_INT 31
70418: PUSH
70419: LD_INT 32
70421: PUSH
70422: LD_INT 33
70424: PUSH
70425: LD_INT 34
70427: PUSH
70428: LD_INT 36
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 101
70470: PUSH
70471: LD_INT 102
70473: PUSH
70474: LD_INT 103
70476: PUSH
70477: LD_INT 104
70479: PUSH
70480: LD_INT 105
70482: PUSH
70483: LD_INT 106
70485: PUSH
70486: LD_INT 107
70488: PUSH
70489: LD_INT 108
70491: PUSH
70492: LD_INT 109
70494: PUSH
70495: LD_INT 110
70497: PUSH
70498: LD_INT 111
70500: PUSH
70501: LD_INT 112
70503: PUSH
70504: LD_INT 113
70506: PUSH
70507: LD_INT 114
70509: PUSH
70510: LD_INT 116
70512: PUSH
70513: LD_INT 117
70515: PUSH
70516: LD_INT 118
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: ST_TO_ADDR
70542: GO 71549
70544: LD_INT 15
70546: DOUBLE
70547: EQUAL
70548: IFTRUE 70552
70550: GO 70776
70552: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
70553: LD_ADDR_VAR 0 2
70557: PUSH
70558: LD_INT 1
70560: PUSH
70561: LD_INT 2
70563: PUSH
70564: LD_INT 3
70566: PUSH
70567: LD_INT 4
70569: PUSH
70570: LD_INT 5
70572: PUSH
70573: LD_INT 6
70575: PUSH
70576: LD_INT 7
70578: PUSH
70579: LD_INT 8
70581: PUSH
70582: LD_INT 9
70584: PUSH
70585: LD_INT 10
70587: PUSH
70588: LD_INT 11
70590: PUSH
70591: LD_INT 12
70593: PUSH
70594: LD_INT 13
70596: PUSH
70597: LD_INT 14
70599: PUSH
70600: LD_INT 15
70602: PUSH
70603: LD_INT 16
70605: PUSH
70606: LD_INT 17
70608: PUSH
70609: LD_INT 18
70611: PUSH
70612: LD_INT 19
70614: PUSH
70615: LD_INT 20
70617: PUSH
70618: LD_INT 21
70620: PUSH
70621: LD_INT 22
70623: PUSH
70624: LD_INT 23
70626: PUSH
70627: LD_INT 24
70629: PUSH
70630: LD_INT 25
70632: PUSH
70633: LD_INT 26
70635: PUSH
70636: LD_INT 27
70638: PUSH
70639: LD_INT 28
70641: PUSH
70642: LD_INT 29
70644: PUSH
70645: LD_INT 30
70647: PUSH
70648: LD_INT 31
70650: PUSH
70651: LD_INT 32
70653: PUSH
70654: LD_INT 33
70656: PUSH
70657: LD_INT 34
70659: PUSH
70660: LD_INT 36
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: PUSH
70700: LD_INT 101
70702: PUSH
70703: LD_INT 102
70705: PUSH
70706: LD_INT 103
70708: PUSH
70709: LD_INT 104
70711: PUSH
70712: LD_INT 105
70714: PUSH
70715: LD_INT 106
70717: PUSH
70718: LD_INT 107
70720: PUSH
70721: LD_INT 108
70723: PUSH
70724: LD_INT 109
70726: PUSH
70727: LD_INT 110
70729: PUSH
70730: LD_INT 111
70732: PUSH
70733: LD_INT 112
70735: PUSH
70736: LD_INT 113
70738: PUSH
70739: LD_INT 114
70741: PUSH
70742: LD_INT 116
70744: PUSH
70745: LD_INT 117
70747: PUSH
70748: LD_INT 118
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: ST_TO_ADDR
70774: GO 71549
70776: LD_INT 16
70778: DOUBLE
70779: EQUAL
70780: IFTRUE 70784
70782: GO 70920
70784: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
70785: LD_ADDR_VAR 0 2
70789: PUSH
70790: LD_INT 2
70792: PUSH
70793: LD_INT 4
70795: PUSH
70796: LD_INT 5
70798: PUSH
70799: LD_INT 7
70801: PUSH
70802: LD_INT 11
70804: PUSH
70805: LD_INT 12
70807: PUSH
70808: LD_INT 15
70810: PUSH
70811: LD_INT 16
70813: PUSH
70814: LD_INT 20
70816: PUSH
70817: LD_INT 21
70819: PUSH
70820: LD_INT 22
70822: PUSH
70823: LD_INT 23
70825: PUSH
70826: LD_INT 25
70828: PUSH
70829: LD_INT 26
70831: PUSH
70832: LD_INT 30
70834: PUSH
70835: LD_INT 31
70837: PUSH
70838: LD_INT 32
70840: PUSH
70841: LD_INT 33
70843: PUSH
70844: LD_INT 34
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: PUSH
70868: LD_INT 101
70870: PUSH
70871: LD_INT 102
70873: PUSH
70874: LD_INT 103
70876: PUSH
70877: LD_INT 106
70879: PUSH
70880: LD_INT 108
70882: PUSH
70883: LD_INT 112
70885: PUSH
70886: LD_INT 113
70888: PUSH
70889: LD_INT 114
70891: PUSH
70892: LD_INT 116
70894: PUSH
70895: LD_INT 117
70897: PUSH
70898: LD_INT 118
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: ST_TO_ADDR
70918: GO 71549
70920: LD_INT 17
70922: DOUBLE
70923: EQUAL
70924: IFTRUE 70928
70926: GO 71152
70928: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
70929: LD_ADDR_VAR 0 2
70933: PUSH
70934: LD_INT 1
70936: PUSH
70937: LD_INT 2
70939: PUSH
70940: LD_INT 3
70942: PUSH
70943: LD_INT 4
70945: PUSH
70946: LD_INT 5
70948: PUSH
70949: LD_INT 6
70951: PUSH
70952: LD_INT 7
70954: PUSH
70955: LD_INT 8
70957: PUSH
70958: LD_INT 9
70960: PUSH
70961: LD_INT 10
70963: PUSH
70964: LD_INT 11
70966: PUSH
70967: LD_INT 12
70969: PUSH
70970: LD_INT 13
70972: PUSH
70973: LD_INT 14
70975: PUSH
70976: LD_INT 15
70978: PUSH
70979: LD_INT 16
70981: PUSH
70982: LD_INT 17
70984: PUSH
70985: LD_INT 18
70987: PUSH
70988: LD_INT 19
70990: PUSH
70991: LD_INT 20
70993: PUSH
70994: LD_INT 21
70996: PUSH
70997: LD_INT 22
70999: PUSH
71000: LD_INT 23
71002: PUSH
71003: LD_INT 24
71005: PUSH
71006: LD_INT 25
71008: PUSH
71009: LD_INT 26
71011: PUSH
71012: LD_INT 27
71014: PUSH
71015: LD_INT 28
71017: PUSH
71018: LD_INT 29
71020: PUSH
71021: LD_INT 30
71023: PUSH
71024: LD_INT 31
71026: PUSH
71027: LD_INT 32
71029: PUSH
71030: LD_INT 33
71032: PUSH
71033: LD_INT 34
71035: PUSH
71036: LD_INT 36
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 101
71078: PUSH
71079: LD_INT 102
71081: PUSH
71082: LD_INT 103
71084: PUSH
71085: LD_INT 104
71087: PUSH
71088: LD_INT 105
71090: PUSH
71091: LD_INT 106
71093: PUSH
71094: LD_INT 107
71096: PUSH
71097: LD_INT 108
71099: PUSH
71100: LD_INT 109
71102: PUSH
71103: LD_INT 110
71105: PUSH
71106: LD_INT 111
71108: PUSH
71109: LD_INT 112
71111: PUSH
71112: LD_INT 113
71114: PUSH
71115: LD_INT 114
71117: PUSH
71118: LD_INT 116
71120: PUSH
71121: LD_INT 117
71123: PUSH
71124: LD_INT 118
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: LIST
71136: LIST
71137: LIST
71138: LIST
71139: LIST
71140: LIST
71141: LIST
71142: LIST
71143: LIST
71144: LIST
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: ST_TO_ADDR
71150: GO 71549
71152: LD_INT 18
71154: DOUBLE
71155: EQUAL
71156: IFTRUE 71160
71158: GO 71308
71160: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
71161: LD_ADDR_VAR 0 2
71165: PUSH
71166: LD_INT 2
71168: PUSH
71169: LD_INT 4
71171: PUSH
71172: LD_INT 5
71174: PUSH
71175: LD_INT 7
71177: PUSH
71178: LD_INT 11
71180: PUSH
71181: LD_INT 12
71183: PUSH
71184: LD_INT 15
71186: PUSH
71187: LD_INT 16
71189: PUSH
71190: LD_INT 20
71192: PUSH
71193: LD_INT 21
71195: PUSH
71196: LD_INT 22
71198: PUSH
71199: LD_INT 23
71201: PUSH
71202: LD_INT 25
71204: PUSH
71205: LD_INT 26
71207: PUSH
71208: LD_INT 30
71210: PUSH
71211: LD_INT 31
71213: PUSH
71214: LD_INT 32
71216: PUSH
71217: LD_INT 33
71219: PUSH
71220: LD_INT 34
71222: PUSH
71223: LD_INT 35
71225: PUSH
71226: LD_INT 36
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: LIST
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: PUSH
71252: LD_INT 101
71254: PUSH
71255: LD_INT 102
71257: PUSH
71258: LD_INT 103
71260: PUSH
71261: LD_INT 106
71263: PUSH
71264: LD_INT 108
71266: PUSH
71267: LD_INT 112
71269: PUSH
71270: LD_INT 113
71272: PUSH
71273: LD_INT 114
71275: PUSH
71276: LD_INT 115
71278: PUSH
71279: LD_INT 116
71281: PUSH
71282: LD_INT 117
71284: PUSH
71285: LD_INT 118
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: ST_TO_ADDR
71306: GO 71549
71308: LD_INT 19
71310: DOUBLE
71311: EQUAL
71312: IFTRUE 71316
71314: GO 71548
71316: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
71317: LD_ADDR_VAR 0 2
71321: PUSH
71322: LD_INT 1
71324: PUSH
71325: LD_INT 2
71327: PUSH
71328: LD_INT 3
71330: PUSH
71331: LD_INT 4
71333: PUSH
71334: LD_INT 5
71336: PUSH
71337: LD_INT 6
71339: PUSH
71340: LD_INT 7
71342: PUSH
71343: LD_INT 8
71345: PUSH
71346: LD_INT 9
71348: PUSH
71349: LD_INT 10
71351: PUSH
71352: LD_INT 11
71354: PUSH
71355: LD_INT 12
71357: PUSH
71358: LD_INT 13
71360: PUSH
71361: LD_INT 14
71363: PUSH
71364: LD_INT 15
71366: PUSH
71367: LD_INT 16
71369: PUSH
71370: LD_INT 17
71372: PUSH
71373: LD_INT 18
71375: PUSH
71376: LD_INT 19
71378: PUSH
71379: LD_INT 20
71381: PUSH
71382: LD_INT 21
71384: PUSH
71385: LD_INT 22
71387: PUSH
71388: LD_INT 23
71390: PUSH
71391: LD_INT 24
71393: PUSH
71394: LD_INT 25
71396: PUSH
71397: LD_INT 26
71399: PUSH
71400: LD_INT 27
71402: PUSH
71403: LD_INT 28
71405: PUSH
71406: LD_INT 29
71408: PUSH
71409: LD_INT 30
71411: PUSH
71412: LD_INT 31
71414: PUSH
71415: LD_INT 32
71417: PUSH
71418: LD_INT 33
71420: PUSH
71421: LD_INT 34
71423: PUSH
71424: LD_INT 35
71426: PUSH
71427: LD_INT 36
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 101
71470: PUSH
71471: LD_INT 102
71473: PUSH
71474: LD_INT 103
71476: PUSH
71477: LD_INT 104
71479: PUSH
71480: LD_INT 105
71482: PUSH
71483: LD_INT 106
71485: PUSH
71486: LD_INT 107
71488: PUSH
71489: LD_INT 108
71491: PUSH
71492: LD_INT 109
71494: PUSH
71495: LD_INT 110
71497: PUSH
71498: LD_INT 111
71500: PUSH
71501: LD_INT 112
71503: PUSH
71504: LD_INT 113
71506: PUSH
71507: LD_INT 114
71509: PUSH
71510: LD_INT 115
71512: PUSH
71513: LD_INT 116
71515: PUSH
71516: LD_INT 117
71518: PUSH
71519: LD_INT 118
71521: PUSH
71522: EMPTY
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: ST_TO_ADDR
71546: GO 71549
71548: POP
// end else
71549: GO 71780
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
71551: LD_ADDR_VAR 0 2
71555: PUSH
71556: LD_INT 1
71558: PUSH
71559: LD_INT 2
71561: PUSH
71562: LD_INT 3
71564: PUSH
71565: LD_INT 4
71567: PUSH
71568: LD_INT 5
71570: PUSH
71571: LD_INT 6
71573: PUSH
71574: LD_INT 7
71576: PUSH
71577: LD_INT 8
71579: PUSH
71580: LD_INT 9
71582: PUSH
71583: LD_INT 10
71585: PUSH
71586: LD_INT 11
71588: PUSH
71589: LD_INT 12
71591: PUSH
71592: LD_INT 13
71594: PUSH
71595: LD_INT 14
71597: PUSH
71598: LD_INT 15
71600: PUSH
71601: LD_INT 16
71603: PUSH
71604: LD_INT 17
71606: PUSH
71607: LD_INT 18
71609: PUSH
71610: LD_INT 19
71612: PUSH
71613: LD_INT 20
71615: PUSH
71616: LD_INT 21
71618: PUSH
71619: LD_INT 22
71621: PUSH
71622: LD_INT 23
71624: PUSH
71625: LD_INT 24
71627: PUSH
71628: LD_INT 25
71630: PUSH
71631: LD_INT 26
71633: PUSH
71634: LD_INT 27
71636: PUSH
71637: LD_INT 28
71639: PUSH
71640: LD_INT 29
71642: PUSH
71643: LD_INT 30
71645: PUSH
71646: LD_INT 31
71648: PUSH
71649: LD_INT 32
71651: PUSH
71652: LD_INT 33
71654: PUSH
71655: LD_INT 34
71657: PUSH
71658: LD_INT 35
71660: PUSH
71661: LD_INT 36
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: LIST
71681: LIST
71682: LIST
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: LIST
71693: LIST
71694: LIST
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: PUSH
71702: LD_INT 101
71704: PUSH
71705: LD_INT 102
71707: PUSH
71708: LD_INT 103
71710: PUSH
71711: LD_INT 104
71713: PUSH
71714: LD_INT 105
71716: PUSH
71717: LD_INT 106
71719: PUSH
71720: LD_INT 107
71722: PUSH
71723: LD_INT 108
71725: PUSH
71726: LD_INT 109
71728: PUSH
71729: LD_INT 110
71731: PUSH
71732: LD_INT 111
71734: PUSH
71735: LD_INT 112
71737: PUSH
71738: LD_INT 113
71740: PUSH
71741: LD_INT 114
71743: PUSH
71744: LD_INT 115
71746: PUSH
71747: LD_INT 116
71749: PUSH
71750: LD_INT 117
71752: PUSH
71753: LD_INT 118
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: ST_TO_ADDR
// if result then
71780: LD_VAR 0 2
71784: IFFALSE 72570
// begin normal :=  ;
71786: LD_ADDR_VAR 0 5
71790: PUSH
71791: LD_STRING 
71793: ST_TO_ADDR
// hardcore :=  ;
71794: LD_ADDR_VAR 0 6
71798: PUSH
71799: LD_STRING 
71801: ST_TO_ADDR
// active :=  ;
71802: LD_ADDR_VAR 0 7
71806: PUSH
71807: LD_STRING 
71809: ST_TO_ADDR
// for i = 1 to normalCounter do
71810: LD_ADDR_VAR 0 8
71814: PUSH
71815: DOUBLE
71816: LD_INT 1
71818: DEC
71819: ST_TO_ADDR
71820: LD_EXP 78
71824: PUSH
71825: FOR_TO
71826: IFFALSE 71927
// begin tmp := 0 ;
71828: LD_ADDR_VAR 0 3
71832: PUSH
71833: LD_STRING 0
71835: ST_TO_ADDR
// if result [ 1 ] then
71836: LD_VAR 0 2
71840: PUSH
71841: LD_INT 1
71843: ARRAY
71844: IFFALSE 71909
// if result [ 1 ] [ 1 ] = i then
71846: LD_VAR 0 2
71850: PUSH
71851: LD_INT 1
71853: ARRAY
71854: PUSH
71855: LD_INT 1
71857: ARRAY
71858: PUSH
71859: LD_VAR 0 8
71863: EQUAL
71864: IFFALSE 71909
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
71866: LD_ADDR_VAR 0 2
71870: PUSH
71871: LD_VAR 0 2
71875: PPUSH
71876: LD_INT 1
71878: PPUSH
71879: LD_VAR 0 2
71883: PUSH
71884: LD_INT 1
71886: ARRAY
71887: PPUSH
71888: LD_INT 1
71890: PPUSH
71891: CALL_OW 3
71895: PPUSH
71896: CALL_OW 1
71900: ST_TO_ADDR
// tmp := 1 ;
71901: LD_ADDR_VAR 0 3
71905: PUSH
71906: LD_STRING 1
71908: ST_TO_ADDR
// end ; normal := normal & tmp ;
71909: LD_ADDR_VAR 0 5
71913: PUSH
71914: LD_VAR 0 5
71918: PUSH
71919: LD_VAR 0 3
71923: STR
71924: ST_TO_ADDR
// end ;
71925: GO 71825
71927: POP
71928: POP
// for i = 1 to hardcoreCounter do
71929: LD_ADDR_VAR 0 8
71933: PUSH
71934: DOUBLE
71935: LD_INT 1
71937: DEC
71938: ST_TO_ADDR
71939: LD_EXP 79
71943: PUSH
71944: FOR_TO
71945: IFFALSE 72050
// begin tmp := 0 ;
71947: LD_ADDR_VAR 0 3
71951: PUSH
71952: LD_STRING 0
71954: ST_TO_ADDR
// if result [ 2 ] then
71955: LD_VAR 0 2
71959: PUSH
71960: LD_INT 2
71962: ARRAY
71963: IFFALSE 72032
// if result [ 2 ] [ 1 ] = 100 + i then
71965: LD_VAR 0 2
71969: PUSH
71970: LD_INT 2
71972: ARRAY
71973: PUSH
71974: LD_INT 1
71976: ARRAY
71977: PUSH
71978: LD_INT 100
71980: PUSH
71981: LD_VAR 0 8
71985: PLUS
71986: EQUAL
71987: IFFALSE 72032
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
71989: LD_ADDR_VAR 0 2
71993: PUSH
71994: LD_VAR 0 2
71998: PPUSH
71999: LD_INT 2
72001: PPUSH
72002: LD_VAR 0 2
72006: PUSH
72007: LD_INT 2
72009: ARRAY
72010: PPUSH
72011: LD_INT 1
72013: PPUSH
72014: CALL_OW 3
72018: PPUSH
72019: CALL_OW 1
72023: ST_TO_ADDR
// tmp := 1 ;
72024: LD_ADDR_VAR 0 3
72028: PUSH
72029: LD_STRING 1
72031: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
72032: LD_ADDR_VAR 0 6
72036: PUSH
72037: LD_VAR 0 6
72041: PUSH
72042: LD_VAR 0 3
72046: STR
72047: ST_TO_ADDR
// end ;
72048: GO 71944
72050: POP
72051: POP
// if isGameLoad then
72052: LD_VAR 0 1
72056: IFFALSE 72531
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
72058: LD_ADDR_VAR 0 4
72062: PUSH
72063: LD_EXP 82
72067: PUSH
72068: LD_EXP 81
72072: PUSH
72073: LD_EXP 83
72077: PUSH
72078: LD_EXP 80
72082: PUSH
72083: LD_EXP 84
72087: PUSH
72088: LD_EXP 85
72092: PUSH
72093: LD_EXP 86
72097: PUSH
72098: LD_EXP 87
72102: PUSH
72103: LD_EXP 88
72107: PUSH
72108: LD_EXP 89
72112: PUSH
72113: LD_EXP 90
72117: PUSH
72118: LD_EXP 91
72122: PUSH
72123: LD_EXP 92
72127: PUSH
72128: LD_EXP 93
72132: PUSH
72133: LD_EXP 101
72137: PUSH
72138: LD_EXP 102
72142: PUSH
72143: LD_EXP 103
72147: PUSH
72148: LD_EXP 104
72152: PUSH
72153: LD_EXP 106
72157: PUSH
72158: LD_EXP 107
72162: PUSH
72163: LD_EXP 108
72167: PUSH
72168: LD_EXP 111
72172: PUSH
72173: LD_EXP 113
72177: PUSH
72178: LD_EXP 114
72182: PUSH
72183: LD_EXP 115
72187: PUSH
72188: LD_EXP 117
72192: PUSH
72193: LD_EXP 118
72197: PUSH
72198: LD_EXP 121
72202: PUSH
72203: LD_EXP 122
72207: PUSH
72208: LD_EXP 123
72212: PUSH
72213: LD_EXP 124
72217: PUSH
72218: LD_EXP 125
72222: PUSH
72223: LD_EXP 126
72227: PUSH
72228: LD_EXP 127
72232: PUSH
72233: LD_EXP 128
72237: PUSH
72238: LD_EXP 129
72242: PUSH
72243: LD_EXP 94
72247: PUSH
72248: LD_EXP 95
72252: PUSH
72253: LD_EXP 98
72257: PUSH
72258: LD_EXP 99
72262: PUSH
72263: LD_EXP 100
72267: PUSH
72268: LD_EXP 96
72272: PUSH
72273: LD_EXP 97
72277: PUSH
72278: LD_EXP 105
72282: PUSH
72283: LD_EXP 109
72287: PUSH
72288: LD_EXP 110
72292: PUSH
72293: LD_EXP 112
72297: PUSH
72298: LD_EXP 116
72302: PUSH
72303: LD_EXP 119
72307: PUSH
72308: LD_EXP 120
72312: PUSH
72313: LD_EXP 130
72317: PUSH
72318: LD_EXP 131
72322: PUSH
72323: LD_EXP 132
72327: PUSH
72328: LD_EXP 133
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: LIST
72349: LIST
72350: LIST
72351: LIST
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: LIST
72357: LIST
72358: LIST
72359: LIST
72360: LIST
72361: LIST
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: LIST
72367: LIST
72368: LIST
72369: LIST
72370: LIST
72371: LIST
72372: LIST
72373: LIST
72374: LIST
72375: LIST
72376: LIST
72377: LIST
72378: LIST
72379: LIST
72380: LIST
72381: LIST
72382: LIST
72383: LIST
72384: LIST
72385: LIST
72386: LIST
72387: LIST
72388: ST_TO_ADDR
// tmp :=  ;
72389: LD_ADDR_VAR 0 3
72393: PUSH
72394: LD_STRING 
72396: ST_TO_ADDR
// for i = 1 to normalCounter do
72397: LD_ADDR_VAR 0 8
72401: PUSH
72402: DOUBLE
72403: LD_INT 1
72405: DEC
72406: ST_TO_ADDR
72407: LD_EXP 78
72411: PUSH
72412: FOR_TO
72413: IFFALSE 72449
// begin if flags [ i ] then
72415: LD_VAR 0 4
72419: PUSH
72420: LD_VAR 0 8
72424: ARRAY
72425: IFFALSE 72447
// tmp := tmp & i & ; ;
72427: LD_ADDR_VAR 0 3
72431: PUSH
72432: LD_VAR 0 3
72436: PUSH
72437: LD_VAR 0 8
72441: STR
72442: PUSH
72443: LD_STRING ;
72445: STR
72446: ST_TO_ADDR
// end ;
72447: GO 72412
72449: POP
72450: POP
// for i = 1 to hardcoreCounter do
72451: LD_ADDR_VAR 0 8
72455: PUSH
72456: DOUBLE
72457: LD_INT 1
72459: DEC
72460: ST_TO_ADDR
72461: LD_EXP 79
72465: PUSH
72466: FOR_TO
72467: IFFALSE 72513
// begin if flags [ normalCounter + i ] then
72469: LD_VAR 0 4
72473: PUSH
72474: LD_EXP 78
72478: PUSH
72479: LD_VAR 0 8
72483: PLUS
72484: ARRAY
72485: IFFALSE 72511
// tmp := tmp & ( 100 + i ) & ; ;
72487: LD_ADDR_VAR 0 3
72491: PUSH
72492: LD_VAR 0 3
72496: PUSH
72497: LD_INT 100
72499: PUSH
72500: LD_VAR 0 8
72504: PLUS
72505: STR
72506: PUSH
72507: LD_STRING ;
72509: STR
72510: ST_TO_ADDR
// end ;
72511: GO 72466
72513: POP
72514: POP
// if tmp then
72515: LD_VAR 0 3
72519: IFFALSE 72531
// active := tmp ;
72521: LD_ADDR_VAR 0 7
72525: PUSH
72526: LD_VAR 0 3
72530: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
72531: LD_STRING getStreamItemsFromMission("
72533: PUSH
72534: LD_VAR 0 5
72538: STR
72539: PUSH
72540: LD_STRING ","
72542: STR
72543: PUSH
72544: LD_VAR 0 6
72548: STR
72549: PUSH
72550: LD_STRING ","
72552: STR
72553: PUSH
72554: LD_VAR 0 7
72558: STR
72559: PUSH
72560: LD_STRING ")
72562: STR
72563: PPUSH
72564: CALL_OW 559
// end else
72568: GO 72577
// ToLua ( getStreamItemsFromMission("","","") ) ;
72570: LD_STRING getStreamItemsFromMission("","","")
72572: PPUSH
72573: CALL_OW 559
// end ;
72577: LD_VAR 0 2
72581: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
72582: LD_EXP 77
72586: PUSH
72587: LD_EXP 82
72591: AND
72592: IFFALSE 72716
72594: GO 72596
72596: DISABLE
72597: LD_INT 0
72599: PPUSH
72600: PPUSH
// begin enable ;
72601: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
72602: LD_ADDR_VAR 0 2
72606: PUSH
72607: LD_INT 22
72609: PUSH
72610: LD_OWVAR 2
72614: PUSH
72615: EMPTY
72616: LIST
72617: LIST
72618: PUSH
72619: LD_INT 2
72621: PUSH
72622: LD_INT 34
72624: PUSH
72625: LD_INT 7
72627: PUSH
72628: EMPTY
72629: LIST
72630: LIST
72631: PUSH
72632: LD_INT 34
72634: PUSH
72635: LD_INT 45
72637: PUSH
72638: EMPTY
72639: LIST
72640: LIST
72641: PUSH
72642: LD_INT 34
72644: PUSH
72645: LD_INT 28
72647: PUSH
72648: EMPTY
72649: LIST
72650: LIST
72651: PUSH
72652: LD_INT 34
72654: PUSH
72655: LD_INT 47
72657: PUSH
72658: EMPTY
72659: LIST
72660: LIST
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: PUSH
72669: EMPTY
72670: LIST
72671: LIST
72672: PPUSH
72673: CALL_OW 69
72677: ST_TO_ADDR
// if not tmp then
72678: LD_VAR 0 2
72682: NOT
72683: IFFALSE 72687
// exit ;
72685: GO 72716
// for i in tmp do
72687: LD_ADDR_VAR 0 1
72691: PUSH
72692: LD_VAR 0 2
72696: PUSH
72697: FOR_IN
72698: IFFALSE 72714
// begin SetLives ( i , 0 ) ;
72700: LD_VAR 0 1
72704: PPUSH
72705: LD_INT 0
72707: PPUSH
72708: CALL_OW 234
// end ;
72712: GO 72697
72714: POP
72715: POP
// end ;
72716: PPOPN 2
72718: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
72719: LD_EXP 77
72723: PUSH
72724: LD_EXP 83
72728: AND
72729: IFFALSE 72813
72731: GO 72733
72733: DISABLE
72734: LD_INT 0
72736: PPUSH
72737: PPUSH
// begin enable ;
72738: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
72739: LD_ADDR_VAR 0 2
72743: PUSH
72744: LD_INT 22
72746: PUSH
72747: LD_OWVAR 2
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PUSH
72756: LD_INT 32
72758: PUSH
72759: LD_INT 3
72761: PUSH
72762: EMPTY
72763: LIST
72764: LIST
72765: PUSH
72766: EMPTY
72767: LIST
72768: LIST
72769: PPUSH
72770: CALL_OW 69
72774: ST_TO_ADDR
// if not tmp then
72775: LD_VAR 0 2
72779: NOT
72780: IFFALSE 72784
// exit ;
72782: GO 72813
// for i in tmp do
72784: LD_ADDR_VAR 0 1
72788: PUSH
72789: LD_VAR 0 2
72793: PUSH
72794: FOR_IN
72795: IFFALSE 72811
// begin SetLives ( i , 0 ) ;
72797: LD_VAR 0 1
72801: PPUSH
72802: LD_INT 0
72804: PPUSH
72805: CALL_OW 234
// end ;
72809: GO 72794
72811: POP
72812: POP
// end ;
72813: PPOPN 2
72815: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
72816: LD_EXP 77
72820: PUSH
72821: LD_EXP 80
72825: AND
72826: IFFALSE 72919
72828: GO 72830
72830: DISABLE
72831: LD_INT 0
72833: PPUSH
// begin enable ;
72834: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
72835: LD_ADDR_VAR 0 1
72839: PUSH
72840: LD_INT 22
72842: PUSH
72843: LD_OWVAR 2
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: PUSH
72852: LD_INT 2
72854: PUSH
72855: LD_INT 25
72857: PUSH
72858: LD_INT 5
72860: PUSH
72861: EMPTY
72862: LIST
72863: LIST
72864: PUSH
72865: LD_INT 25
72867: PUSH
72868: LD_INT 9
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 25
72877: PUSH
72878: LD_INT 8
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: PUSH
72891: EMPTY
72892: LIST
72893: LIST
72894: PPUSH
72895: CALL_OW 69
72899: PUSH
72900: FOR_IN
72901: IFFALSE 72917
// begin SetClass ( i , 1 ) ;
72903: LD_VAR 0 1
72907: PPUSH
72908: LD_INT 1
72910: PPUSH
72911: CALL_OW 336
// end ;
72915: GO 72900
72917: POP
72918: POP
// end ;
72919: PPOPN 1
72921: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
72922: LD_EXP 77
72926: PUSH
72927: LD_EXP 81
72931: AND
72932: PUSH
72933: LD_OWVAR 65
72937: PUSH
72938: LD_INT 7
72940: LESS
72941: AND
72942: IFFALSE 72956
72944: GO 72946
72946: DISABLE
// begin enable ;
72947: ENABLE
// game_speed := 7 ;
72948: LD_ADDR_OWVAR 65
72952: PUSH
72953: LD_INT 7
72955: ST_TO_ADDR
// end ;
72956: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
72957: LD_EXP 77
72961: PUSH
72962: LD_EXP 84
72966: AND
72967: IFFALSE 73169
72969: GO 72971
72971: DISABLE
72972: LD_INT 0
72974: PPUSH
72975: PPUSH
72976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
72977: LD_ADDR_VAR 0 3
72981: PUSH
72982: LD_INT 81
72984: PUSH
72985: LD_OWVAR 2
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: LD_INT 21
72996: PUSH
72997: LD_INT 1
72999: PUSH
73000: EMPTY
73001: LIST
73002: LIST
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PPUSH
73008: CALL_OW 69
73012: ST_TO_ADDR
// if not tmp then
73013: LD_VAR 0 3
73017: NOT
73018: IFFALSE 73022
// exit ;
73020: GO 73169
// if tmp > 5 then
73022: LD_VAR 0 3
73026: PUSH
73027: LD_INT 5
73029: GREATER
73030: IFFALSE 73042
// k := 5 else
73032: LD_ADDR_VAR 0 2
73036: PUSH
73037: LD_INT 5
73039: ST_TO_ADDR
73040: GO 73052
// k := tmp ;
73042: LD_ADDR_VAR 0 2
73046: PUSH
73047: LD_VAR 0 3
73051: ST_TO_ADDR
// for i := 1 to k do
73052: LD_ADDR_VAR 0 1
73056: PUSH
73057: DOUBLE
73058: LD_INT 1
73060: DEC
73061: ST_TO_ADDR
73062: LD_VAR 0 2
73066: PUSH
73067: FOR_TO
73068: IFFALSE 73167
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
73070: LD_VAR 0 3
73074: PUSH
73075: LD_VAR 0 1
73079: ARRAY
73080: PPUSH
73081: LD_VAR 0 1
73085: PUSH
73086: LD_INT 4
73088: MOD
73089: PUSH
73090: LD_INT 1
73092: PLUS
73093: PPUSH
73094: CALL_OW 259
73098: PUSH
73099: LD_INT 10
73101: LESS
73102: IFFALSE 73165
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
73104: LD_VAR 0 3
73108: PUSH
73109: LD_VAR 0 1
73113: ARRAY
73114: PPUSH
73115: LD_VAR 0 1
73119: PUSH
73120: LD_INT 4
73122: MOD
73123: PUSH
73124: LD_INT 1
73126: PLUS
73127: PPUSH
73128: LD_VAR 0 3
73132: PUSH
73133: LD_VAR 0 1
73137: ARRAY
73138: PPUSH
73139: LD_VAR 0 1
73143: PUSH
73144: LD_INT 4
73146: MOD
73147: PUSH
73148: LD_INT 1
73150: PLUS
73151: PPUSH
73152: CALL_OW 259
73156: PUSH
73157: LD_INT 1
73159: PLUS
73160: PPUSH
73161: CALL_OW 237
73165: GO 73067
73167: POP
73168: POP
// end ;
73169: PPOPN 3
73171: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
73172: LD_EXP 77
73176: PUSH
73177: LD_EXP 85
73181: AND
73182: IFFALSE 73202
73184: GO 73186
73186: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
73187: LD_INT 4
73189: PPUSH
73190: LD_OWVAR 2
73194: PPUSH
73195: LD_INT 0
73197: PPUSH
73198: CALL_OW 324
73202: END
// every 0 0$1 trigger StreamModeActive and sShovel do
73203: LD_EXP 77
73207: PUSH
73208: LD_EXP 114
73212: AND
73213: IFFALSE 73233
73215: GO 73217
73217: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
73218: LD_INT 19
73220: PPUSH
73221: LD_OWVAR 2
73225: PPUSH
73226: LD_INT 0
73228: PPUSH
73229: CALL_OW 324
73233: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
73234: LD_EXP 77
73238: PUSH
73239: LD_EXP 86
73243: AND
73244: IFFALSE 73346
73246: GO 73248
73248: DISABLE
73249: LD_INT 0
73251: PPUSH
73252: PPUSH
// begin enable ;
73253: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
73254: LD_ADDR_VAR 0 2
73258: PUSH
73259: LD_INT 22
73261: PUSH
73262: LD_OWVAR 2
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: PUSH
73271: LD_INT 2
73273: PUSH
73274: LD_INT 34
73276: PUSH
73277: LD_INT 11
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: PUSH
73284: LD_INT 34
73286: PUSH
73287: LD_INT 30
73289: PUSH
73290: EMPTY
73291: LIST
73292: LIST
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: LIST
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: PPUSH
73303: CALL_OW 69
73307: ST_TO_ADDR
// if not tmp then
73308: LD_VAR 0 2
73312: NOT
73313: IFFALSE 73317
// exit ;
73315: GO 73346
// for i in tmp do
73317: LD_ADDR_VAR 0 1
73321: PUSH
73322: LD_VAR 0 2
73326: PUSH
73327: FOR_IN
73328: IFFALSE 73344
// begin SetLives ( i , 0 ) ;
73330: LD_VAR 0 1
73334: PPUSH
73335: LD_INT 0
73337: PPUSH
73338: CALL_OW 234
// end ;
73342: GO 73327
73344: POP
73345: POP
// end ;
73346: PPOPN 2
73348: END
// every 0 0$1 trigger StreamModeActive and sBunker do
73349: LD_EXP 77
73353: PUSH
73354: LD_EXP 87
73358: AND
73359: IFFALSE 73379
73361: GO 73363
73363: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
73364: LD_INT 32
73366: PPUSH
73367: LD_OWVAR 2
73371: PPUSH
73372: LD_INT 0
73374: PPUSH
73375: CALL_OW 324
73379: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
73380: LD_EXP 77
73384: PUSH
73385: LD_EXP 88
73389: AND
73390: IFFALSE 73571
73392: GO 73394
73394: DISABLE
73395: LD_INT 0
73397: PPUSH
73398: PPUSH
73399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
73400: LD_ADDR_VAR 0 2
73404: PUSH
73405: LD_INT 22
73407: PUSH
73408: LD_OWVAR 2
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: PUSH
73417: LD_INT 33
73419: PUSH
73420: LD_INT 3
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PPUSH
73431: CALL_OW 69
73435: ST_TO_ADDR
// if not tmp then
73436: LD_VAR 0 2
73440: NOT
73441: IFFALSE 73445
// exit ;
73443: GO 73571
// side := 0 ;
73445: LD_ADDR_VAR 0 3
73449: PUSH
73450: LD_INT 0
73452: ST_TO_ADDR
// for i := 1 to 8 do
73453: LD_ADDR_VAR 0 1
73457: PUSH
73458: DOUBLE
73459: LD_INT 1
73461: DEC
73462: ST_TO_ADDR
73463: LD_INT 8
73465: PUSH
73466: FOR_TO
73467: IFFALSE 73515
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
73469: LD_OWVAR 2
73473: PUSH
73474: LD_VAR 0 1
73478: NONEQUAL
73479: PUSH
73480: LD_OWVAR 2
73484: PPUSH
73485: LD_VAR 0 1
73489: PPUSH
73490: CALL_OW 81
73494: PUSH
73495: LD_INT 2
73497: EQUAL
73498: AND
73499: IFFALSE 73513
// begin side := i ;
73501: LD_ADDR_VAR 0 3
73505: PUSH
73506: LD_VAR 0 1
73510: ST_TO_ADDR
// break ;
73511: GO 73515
// end ;
73513: GO 73466
73515: POP
73516: POP
// if not side then
73517: LD_VAR 0 3
73521: NOT
73522: IFFALSE 73526
// exit ;
73524: GO 73571
// for i := 1 to tmp do
73526: LD_ADDR_VAR 0 1
73530: PUSH
73531: DOUBLE
73532: LD_INT 1
73534: DEC
73535: ST_TO_ADDR
73536: LD_VAR 0 2
73540: PUSH
73541: FOR_TO
73542: IFFALSE 73569
// if Prob ( 60 ) then
73544: LD_INT 60
73546: PPUSH
73547: CALL_OW 13
73551: IFFALSE 73567
// SetSide ( i , side ) ;
73553: LD_VAR 0 1
73557: PPUSH
73558: LD_VAR 0 3
73562: PPUSH
73563: CALL_OW 235
73567: GO 73541
73569: POP
73570: POP
// end ;
73571: PPOPN 3
73573: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
73574: LD_EXP 77
73578: PUSH
73579: LD_EXP 90
73583: AND
73584: IFFALSE 73703
73586: GO 73588
73588: DISABLE
73589: LD_INT 0
73591: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
73592: LD_ADDR_VAR 0 1
73596: PUSH
73597: LD_INT 22
73599: PUSH
73600: LD_OWVAR 2
73604: PUSH
73605: EMPTY
73606: LIST
73607: LIST
73608: PUSH
73609: LD_INT 21
73611: PUSH
73612: LD_INT 1
73614: PUSH
73615: EMPTY
73616: LIST
73617: LIST
73618: PUSH
73619: LD_INT 3
73621: PUSH
73622: LD_INT 23
73624: PUSH
73625: LD_INT 0
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: PUSH
73632: EMPTY
73633: LIST
73634: LIST
73635: PUSH
73636: EMPTY
73637: LIST
73638: LIST
73639: LIST
73640: PPUSH
73641: CALL_OW 69
73645: PUSH
73646: FOR_IN
73647: IFFALSE 73701
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
73649: LD_VAR 0 1
73653: PPUSH
73654: CALL_OW 257
73658: PUSH
73659: LD_INT 1
73661: PUSH
73662: LD_INT 2
73664: PUSH
73665: LD_INT 3
73667: PUSH
73668: LD_INT 4
73670: PUSH
73671: EMPTY
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: IN
73677: IFFALSE 73699
// SetClass ( un , rand ( 1 , 4 ) ) ;
73679: LD_VAR 0 1
73683: PPUSH
73684: LD_INT 1
73686: PPUSH
73687: LD_INT 4
73689: PPUSH
73690: CALL_OW 12
73694: PPUSH
73695: CALL_OW 336
73699: GO 73646
73701: POP
73702: POP
// end ;
73703: PPOPN 1
73705: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
73706: LD_EXP 77
73710: PUSH
73711: LD_EXP 89
73715: AND
73716: IFFALSE 73795
73718: GO 73720
73720: DISABLE
73721: LD_INT 0
73723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
73724: LD_ADDR_VAR 0 1
73728: PUSH
73729: LD_INT 22
73731: PUSH
73732: LD_OWVAR 2
73736: PUSH
73737: EMPTY
73738: LIST
73739: LIST
73740: PUSH
73741: LD_INT 21
73743: PUSH
73744: LD_INT 3
73746: PUSH
73747: EMPTY
73748: LIST
73749: LIST
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: PPUSH
73755: CALL_OW 69
73759: ST_TO_ADDR
// if not tmp then
73760: LD_VAR 0 1
73764: NOT
73765: IFFALSE 73769
// exit ;
73767: GO 73795
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
73769: LD_VAR 0 1
73773: PUSH
73774: LD_INT 1
73776: PPUSH
73777: LD_VAR 0 1
73781: PPUSH
73782: CALL_OW 12
73786: ARRAY
73787: PPUSH
73788: LD_INT 100
73790: PPUSH
73791: CALL_OW 234
// end ;
73795: PPOPN 1
73797: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
73798: LD_EXP 77
73802: PUSH
73803: LD_EXP 91
73807: AND
73808: IFFALSE 73906
73810: GO 73812
73812: DISABLE
73813: LD_INT 0
73815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73816: LD_ADDR_VAR 0 1
73820: PUSH
73821: LD_INT 22
73823: PUSH
73824: LD_OWVAR 2
73828: PUSH
73829: EMPTY
73830: LIST
73831: LIST
73832: PUSH
73833: LD_INT 21
73835: PUSH
73836: LD_INT 1
73838: PUSH
73839: EMPTY
73840: LIST
73841: LIST
73842: PUSH
73843: EMPTY
73844: LIST
73845: LIST
73846: PPUSH
73847: CALL_OW 69
73851: ST_TO_ADDR
// if not tmp then
73852: LD_VAR 0 1
73856: NOT
73857: IFFALSE 73861
// exit ;
73859: GO 73906
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
73861: LD_VAR 0 1
73865: PUSH
73866: LD_INT 1
73868: PPUSH
73869: LD_VAR 0 1
73873: PPUSH
73874: CALL_OW 12
73878: ARRAY
73879: PPUSH
73880: LD_INT 1
73882: PPUSH
73883: LD_INT 4
73885: PPUSH
73886: CALL_OW 12
73890: PPUSH
73891: LD_INT 3000
73893: PPUSH
73894: LD_INT 9000
73896: PPUSH
73897: CALL_OW 12
73901: PPUSH
73902: CALL_OW 492
// end ;
73906: PPOPN 1
73908: END
// every 0 0$1 trigger StreamModeActive and sDepot do
73909: LD_EXP 77
73913: PUSH
73914: LD_EXP 92
73918: AND
73919: IFFALSE 73939
73921: GO 73923
73923: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
73924: LD_INT 1
73926: PPUSH
73927: LD_OWVAR 2
73931: PPUSH
73932: LD_INT 0
73934: PPUSH
73935: CALL_OW 324
73939: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
73940: LD_EXP 77
73944: PUSH
73945: LD_EXP 93
73949: AND
73950: IFFALSE 74033
73952: GO 73954
73954: DISABLE
73955: LD_INT 0
73957: PPUSH
73958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
73959: LD_ADDR_VAR 0 2
73963: PUSH
73964: LD_INT 22
73966: PUSH
73967: LD_OWVAR 2
73971: PUSH
73972: EMPTY
73973: LIST
73974: LIST
73975: PUSH
73976: LD_INT 21
73978: PUSH
73979: LD_INT 3
73981: PUSH
73982: EMPTY
73983: LIST
73984: LIST
73985: PUSH
73986: EMPTY
73987: LIST
73988: LIST
73989: PPUSH
73990: CALL_OW 69
73994: ST_TO_ADDR
// if not tmp then
73995: LD_VAR 0 2
73999: NOT
74000: IFFALSE 74004
// exit ;
74002: GO 74033
// for i in tmp do
74004: LD_ADDR_VAR 0 1
74008: PUSH
74009: LD_VAR 0 2
74013: PUSH
74014: FOR_IN
74015: IFFALSE 74031
// SetBLevel ( i , 10 ) ;
74017: LD_VAR 0 1
74021: PPUSH
74022: LD_INT 10
74024: PPUSH
74025: CALL_OW 241
74029: GO 74014
74031: POP
74032: POP
// end ;
74033: PPOPN 2
74035: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
74036: LD_EXP 77
74040: PUSH
74041: LD_EXP 94
74045: AND
74046: IFFALSE 74157
74048: GO 74050
74050: DISABLE
74051: LD_INT 0
74053: PPUSH
74054: PPUSH
74055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74056: LD_ADDR_VAR 0 3
74060: PUSH
74061: LD_INT 22
74063: PUSH
74064: LD_OWVAR 2
74068: PUSH
74069: EMPTY
74070: LIST
74071: LIST
74072: PUSH
74073: LD_INT 25
74075: PUSH
74076: LD_INT 1
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: PUSH
74083: EMPTY
74084: LIST
74085: LIST
74086: PPUSH
74087: CALL_OW 69
74091: ST_TO_ADDR
// if not tmp then
74092: LD_VAR 0 3
74096: NOT
74097: IFFALSE 74101
// exit ;
74099: GO 74157
// un := tmp [ rand ( 1 , tmp ) ] ;
74101: LD_ADDR_VAR 0 2
74105: PUSH
74106: LD_VAR 0 3
74110: PUSH
74111: LD_INT 1
74113: PPUSH
74114: LD_VAR 0 3
74118: PPUSH
74119: CALL_OW 12
74123: ARRAY
74124: ST_TO_ADDR
// if Crawls ( un ) then
74125: LD_VAR 0 2
74129: PPUSH
74130: CALL_OW 318
74134: IFFALSE 74145
// ComWalk ( un ) ;
74136: LD_VAR 0 2
74140: PPUSH
74141: CALL_OW 138
// SetClass ( un , class_sniper ) ;
74145: LD_VAR 0 2
74149: PPUSH
74150: LD_INT 5
74152: PPUSH
74153: CALL_OW 336
// end ;
74157: PPOPN 3
74159: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
74160: LD_EXP 77
74164: PUSH
74165: LD_EXP 95
74169: AND
74170: PUSH
74171: LD_OWVAR 67
74175: PUSH
74176: LD_INT 4
74178: LESS
74179: AND
74180: IFFALSE 74199
74182: GO 74184
74184: DISABLE
// begin Difficulty := Difficulty + 1 ;
74185: LD_ADDR_OWVAR 67
74189: PUSH
74190: LD_OWVAR 67
74194: PUSH
74195: LD_INT 1
74197: PLUS
74198: ST_TO_ADDR
// end ;
74199: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
74200: LD_EXP 77
74204: PUSH
74205: LD_EXP 96
74209: AND
74210: IFFALSE 74313
74212: GO 74214
74214: DISABLE
74215: LD_INT 0
74217: PPUSH
// begin for i := 1 to 5 do
74218: LD_ADDR_VAR 0 1
74222: PUSH
74223: DOUBLE
74224: LD_INT 1
74226: DEC
74227: ST_TO_ADDR
74228: LD_INT 5
74230: PUSH
74231: FOR_TO
74232: IFFALSE 74311
// begin uc_nation := nation_nature ;
74234: LD_ADDR_OWVAR 21
74238: PUSH
74239: LD_INT 0
74241: ST_TO_ADDR
// uc_side := 0 ;
74242: LD_ADDR_OWVAR 20
74246: PUSH
74247: LD_INT 0
74249: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74250: LD_ADDR_OWVAR 29
74254: PUSH
74255: LD_INT 12
74257: PUSH
74258: LD_INT 12
74260: PUSH
74261: EMPTY
74262: LIST
74263: LIST
74264: ST_TO_ADDR
// hc_agressivity := 20 ;
74265: LD_ADDR_OWVAR 35
74269: PUSH
74270: LD_INT 20
74272: ST_TO_ADDR
// hc_class := class_tiger ;
74273: LD_ADDR_OWVAR 28
74277: PUSH
74278: LD_INT 14
74280: ST_TO_ADDR
// hc_gallery :=  ;
74281: LD_ADDR_OWVAR 33
74285: PUSH
74286: LD_STRING 
74288: ST_TO_ADDR
// hc_name :=  ;
74289: LD_ADDR_OWVAR 26
74293: PUSH
74294: LD_STRING 
74296: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
74297: CALL_OW 44
74301: PPUSH
74302: LD_INT 0
74304: PPUSH
74305: CALL_OW 51
// end ;
74309: GO 74231
74311: POP
74312: POP
// end ;
74313: PPOPN 1
74315: END
// every 0 0$1 trigger StreamModeActive and sBomb do
74316: LD_EXP 77
74320: PUSH
74321: LD_EXP 97
74325: AND
74326: IFFALSE 74335
74328: GO 74330
74330: DISABLE
// StreamSibBomb ;
74331: CALL 74336 0 0
74335: END
// export function StreamSibBomb ; var i , x , y ; begin
74336: LD_INT 0
74338: PPUSH
74339: PPUSH
74340: PPUSH
74341: PPUSH
// result := false ;
74342: LD_ADDR_VAR 0 1
74346: PUSH
74347: LD_INT 0
74349: ST_TO_ADDR
// for i := 1 to 16 do
74350: LD_ADDR_VAR 0 2
74354: PUSH
74355: DOUBLE
74356: LD_INT 1
74358: DEC
74359: ST_TO_ADDR
74360: LD_INT 16
74362: PUSH
74363: FOR_TO
74364: IFFALSE 74563
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74366: LD_ADDR_VAR 0 3
74370: PUSH
74371: LD_INT 10
74373: PUSH
74374: LD_INT 20
74376: PUSH
74377: LD_INT 30
74379: PUSH
74380: LD_INT 40
74382: PUSH
74383: LD_INT 50
74385: PUSH
74386: LD_INT 60
74388: PUSH
74389: LD_INT 70
74391: PUSH
74392: LD_INT 80
74394: PUSH
74395: LD_INT 90
74397: PUSH
74398: LD_INT 100
74400: PUSH
74401: LD_INT 110
74403: PUSH
74404: LD_INT 120
74406: PUSH
74407: LD_INT 130
74409: PUSH
74410: LD_INT 140
74412: PUSH
74413: LD_INT 150
74415: PUSH
74416: EMPTY
74417: LIST
74418: LIST
74419: LIST
74420: LIST
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: LIST
74427: LIST
74428: LIST
74429: LIST
74430: LIST
74431: LIST
74432: PUSH
74433: LD_INT 1
74435: PPUSH
74436: LD_INT 15
74438: PPUSH
74439: CALL_OW 12
74443: ARRAY
74444: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74445: LD_ADDR_VAR 0 4
74449: PUSH
74450: LD_INT 10
74452: PUSH
74453: LD_INT 20
74455: PUSH
74456: LD_INT 30
74458: PUSH
74459: LD_INT 40
74461: PUSH
74462: LD_INT 50
74464: PUSH
74465: LD_INT 60
74467: PUSH
74468: LD_INT 70
74470: PUSH
74471: LD_INT 80
74473: PUSH
74474: LD_INT 90
74476: PUSH
74477: LD_INT 100
74479: PUSH
74480: LD_INT 110
74482: PUSH
74483: LD_INT 120
74485: PUSH
74486: LD_INT 130
74488: PUSH
74489: LD_INT 140
74491: PUSH
74492: LD_INT 150
74494: PUSH
74495: EMPTY
74496: LIST
74497: LIST
74498: LIST
74499: LIST
74500: LIST
74501: LIST
74502: LIST
74503: LIST
74504: LIST
74505: LIST
74506: LIST
74507: LIST
74508: LIST
74509: LIST
74510: LIST
74511: PUSH
74512: LD_INT 1
74514: PPUSH
74515: LD_INT 15
74517: PPUSH
74518: CALL_OW 12
74522: ARRAY
74523: ST_TO_ADDR
// if ValidHex ( x , y ) then
74524: LD_VAR 0 3
74528: PPUSH
74529: LD_VAR 0 4
74533: PPUSH
74534: CALL_OW 488
74538: IFFALSE 74561
// begin result := [ x , y ] ;
74540: LD_ADDR_VAR 0 1
74544: PUSH
74545: LD_VAR 0 3
74549: PUSH
74550: LD_VAR 0 4
74554: PUSH
74555: EMPTY
74556: LIST
74557: LIST
74558: ST_TO_ADDR
// break ;
74559: GO 74563
// end ; end ;
74561: GO 74363
74563: POP
74564: POP
// if result then
74565: LD_VAR 0 1
74569: IFFALSE 74629
// begin ToLua ( playSibBomb() ) ;
74571: LD_STRING playSibBomb()
74573: PPUSH
74574: CALL_OW 559
// wait ( 0 0$14 ) ;
74578: LD_INT 490
74580: PPUSH
74581: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
74585: LD_VAR 0 1
74589: PUSH
74590: LD_INT 1
74592: ARRAY
74593: PPUSH
74594: LD_VAR 0 1
74598: PUSH
74599: LD_INT 2
74601: ARRAY
74602: PPUSH
74603: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
74607: LD_VAR 0 1
74611: PUSH
74612: LD_INT 1
74614: ARRAY
74615: PPUSH
74616: LD_VAR 0 1
74620: PUSH
74621: LD_INT 2
74623: ARRAY
74624: PPUSH
74625: CALL_OW 429
// end ; end ;
74629: LD_VAR 0 1
74633: RET
// every 0 0$1 trigger StreamModeActive and sReset do
74634: LD_EXP 77
74638: PUSH
74639: LD_EXP 99
74643: AND
74644: IFFALSE 74656
74646: GO 74648
74648: DISABLE
// YouLost (  ) ;
74649: LD_STRING 
74651: PPUSH
74652: CALL_OW 104
74656: END
// every 0 0$1 trigger StreamModeActive and sFog do
74657: LD_EXP 77
74661: PUSH
74662: LD_EXP 98
74666: AND
74667: IFFALSE 74681
74669: GO 74671
74671: DISABLE
// FogOff ( your_side ) ;
74672: LD_OWVAR 2
74676: PPUSH
74677: CALL_OW 344
74681: END
// every 0 0$1 trigger StreamModeActive and sSun do
74682: LD_EXP 77
74686: PUSH
74687: LD_EXP 100
74691: AND
74692: IFFALSE 74720
74694: GO 74696
74696: DISABLE
// begin solar_recharge_percent := 0 ;
74697: LD_ADDR_OWVAR 79
74701: PUSH
74702: LD_INT 0
74704: ST_TO_ADDR
// wait ( 5 5$00 ) ;
74705: LD_INT 10500
74707: PPUSH
74708: CALL_OW 67
// solar_recharge_percent := 100 ;
74712: LD_ADDR_OWVAR 79
74716: PUSH
74717: LD_INT 100
74719: ST_TO_ADDR
// end ;
74720: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
74721: LD_EXP 77
74725: PUSH
74726: LD_EXP 101
74730: AND
74731: IFFALSE 74970
74733: GO 74735
74735: DISABLE
74736: LD_INT 0
74738: PPUSH
74739: PPUSH
74740: PPUSH
// begin tmp := [ ] ;
74741: LD_ADDR_VAR 0 3
74745: PUSH
74746: EMPTY
74747: ST_TO_ADDR
// for i := 1 to 6 do
74748: LD_ADDR_VAR 0 1
74752: PUSH
74753: DOUBLE
74754: LD_INT 1
74756: DEC
74757: ST_TO_ADDR
74758: LD_INT 6
74760: PUSH
74761: FOR_TO
74762: IFFALSE 74867
// begin uc_nation := nation_nature ;
74764: LD_ADDR_OWVAR 21
74768: PUSH
74769: LD_INT 0
74771: ST_TO_ADDR
// uc_side := 0 ;
74772: LD_ADDR_OWVAR 20
74776: PUSH
74777: LD_INT 0
74779: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74780: LD_ADDR_OWVAR 29
74784: PUSH
74785: LD_INT 12
74787: PUSH
74788: LD_INT 12
74790: PUSH
74791: EMPTY
74792: LIST
74793: LIST
74794: ST_TO_ADDR
// hc_agressivity := 20 ;
74795: LD_ADDR_OWVAR 35
74799: PUSH
74800: LD_INT 20
74802: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
74803: LD_ADDR_OWVAR 28
74807: PUSH
74808: LD_INT 17
74810: ST_TO_ADDR
// hc_gallery :=  ;
74811: LD_ADDR_OWVAR 33
74815: PUSH
74816: LD_STRING 
74818: ST_TO_ADDR
// hc_name :=  ;
74819: LD_ADDR_OWVAR 26
74823: PUSH
74824: LD_STRING 
74826: ST_TO_ADDR
// un := CreateHuman ;
74827: LD_ADDR_VAR 0 2
74831: PUSH
74832: CALL_OW 44
74836: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
74837: LD_VAR 0 2
74841: PPUSH
74842: LD_INT 1
74844: PPUSH
74845: CALL_OW 51
// tmp := tmp ^ un ;
74849: LD_ADDR_VAR 0 3
74853: PUSH
74854: LD_VAR 0 3
74858: PUSH
74859: LD_VAR 0 2
74863: ADD
74864: ST_TO_ADDR
// end ;
74865: GO 74761
74867: POP
74868: POP
// repeat wait ( 0 0$1 ) ;
74869: LD_INT 35
74871: PPUSH
74872: CALL_OW 67
// for un in tmp do
74876: LD_ADDR_VAR 0 2
74880: PUSH
74881: LD_VAR 0 3
74885: PUSH
74886: FOR_IN
74887: IFFALSE 74961
// begin if IsDead ( un ) then
74889: LD_VAR 0 2
74893: PPUSH
74894: CALL_OW 301
74898: IFFALSE 74918
// begin tmp := tmp diff un ;
74900: LD_ADDR_VAR 0 3
74904: PUSH
74905: LD_VAR 0 3
74909: PUSH
74910: LD_VAR 0 2
74914: DIFF
74915: ST_TO_ADDR
// continue ;
74916: GO 74886
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
74918: LD_VAR 0 2
74922: PPUSH
74923: LD_INT 3
74925: PUSH
74926: LD_INT 22
74928: PUSH
74929: LD_INT 0
74931: PUSH
74932: EMPTY
74933: LIST
74934: LIST
74935: PUSH
74936: EMPTY
74937: LIST
74938: LIST
74939: PPUSH
74940: CALL_OW 69
74944: PPUSH
74945: LD_VAR 0 2
74949: PPUSH
74950: CALL_OW 74
74954: PPUSH
74955: CALL_OW 115
// end ;
74959: GO 74886
74961: POP
74962: POP
// until not tmp ;
74963: LD_VAR 0 3
74967: NOT
74968: IFFALSE 74869
// end ;
74970: PPOPN 3
74972: END
// every 0 0$1 trigger StreamModeActive and sTroll do
74973: LD_EXP 77
74977: PUSH
74978: LD_EXP 102
74982: AND
74983: IFFALSE 75037
74985: GO 74987
74987: DISABLE
// begin ToLua ( displayTroll(); ) ;
74988: LD_STRING displayTroll();
74990: PPUSH
74991: CALL_OW 559
// wait ( 3 3$00 ) ;
74995: LD_INT 6300
74997: PPUSH
74998: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75002: LD_STRING hideTroll();
75004: PPUSH
75005: CALL_OW 559
// wait ( 1 1$00 ) ;
75009: LD_INT 2100
75011: PPUSH
75012: CALL_OW 67
// ToLua ( displayTroll(); ) ;
75016: LD_STRING displayTroll();
75018: PPUSH
75019: CALL_OW 559
// wait ( 1 1$00 ) ;
75023: LD_INT 2100
75025: PPUSH
75026: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75030: LD_STRING hideTroll();
75032: PPUSH
75033: CALL_OW 559
// end ;
75037: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
75038: LD_EXP 77
75042: PUSH
75043: LD_EXP 103
75047: AND
75048: IFFALSE 75111
75050: GO 75052
75052: DISABLE
75053: LD_INT 0
75055: PPUSH
// begin p := 0 ;
75056: LD_ADDR_VAR 0 1
75060: PUSH
75061: LD_INT 0
75063: ST_TO_ADDR
// repeat game_speed := 1 ;
75064: LD_ADDR_OWVAR 65
75068: PUSH
75069: LD_INT 1
75071: ST_TO_ADDR
// wait ( 0 0$1 ) ;
75072: LD_INT 35
75074: PPUSH
75075: CALL_OW 67
// p := p + 1 ;
75079: LD_ADDR_VAR 0 1
75083: PUSH
75084: LD_VAR 0 1
75088: PUSH
75089: LD_INT 1
75091: PLUS
75092: ST_TO_ADDR
// until p >= 60 ;
75093: LD_VAR 0 1
75097: PUSH
75098: LD_INT 60
75100: GREATEREQUAL
75101: IFFALSE 75064
// game_speed := 4 ;
75103: LD_ADDR_OWVAR 65
75107: PUSH
75108: LD_INT 4
75110: ST_TO_ADDR
// end ;
75111: PPOPN 1
75113: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
75114: LD_EXP 77
75118: PUSH
75119: LD_EXP 104
75123: AND
75124: IFFALSE 75270
75126: GO 75128
75128: DISABLE
75129: LD_INT 0
75131: PPUSH
75132: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75133: LD_ADDR_VAR 0 1
75137: PUSH
75138: LD_INT 22
75140: PUSH
75141: LD_OWVAR 2
75145: PUSH
75146: EMPTY
75147: LIST
75148: LIST
75149: PUSH
75150: LD_INT 2
75152: PUSH
75153: LD_INT 30
75155: PUSH
75156: LD_INT 0
75158: PUSH
75159: EMPTY
75160: LIST
75161: LIST
75162: PUSH
75163: LD_INT 30
75165: PUSH
75166: LD_INT 1
75168: PUSH
75169: EMPTY
75170: LIST
75171: LIST
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: LIST
75177: PUSH
75178: EMPTY
75179: LIST
75180: LIST
75181: PPUSH
75182: CALL_OW 69
75186: ST_TO_ADDR
// if not depot then
75187: LD_VAR 0 1
75191: NOT
75192: IFFALSE 75196
// exit ;
75194: GO 75270
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
75196: LD_ADDR_VAR 0 2
75200: PUSH
75201: LD_VAR 0 1
75205: PUSH
75206: LD_INT 1
75208: PPUSH
75209: LD_VAR 0 1
75213: PPUSH
75214: CALL_OW 12
75218: ARRAY
75219: PPUSH
75220: CALL_OW 274
75224: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
75225: LD_VAR 0 2
75229: PPUSH
75230: LD_INT 1
75232: PPUSH
75233: LD_INT 0
75235: PPUSH
75236: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
75240: LD_VAR 0 2
75244: PPUSH
75245: LD_INT 2
75247: PPUSH
75248: LD_INT 0
75250: PPUSH
75251: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
75255: LD_VAR 0 2
75259: PPUSH
75260: LD_INT 3
75262: PPUSH
75263: LD_INT 0
75265: PPUSH
75266: CALL_OW 277
// end ;
75270: PPOPN 2
75272: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
75273: LD_EXP 77
75277: PUSH
75278: LD_EXP 105
75282: AND
75283: IFFALSE 75380
75285: GO 75287
75287: DISABLE
75288: LD_INT 0
75290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75291: LD_ADDR_VAR 0 1
75295: PUSH
75296: LD_INT 22
75298: PUSH
75299: LD_OWVAR 2
75303: PUSH
75304: EMPTY
75305: LIST
75306: LIST
75307: PUSH
75308: LD_INT 21
75310: PUSH
75311: LD_INT 1
75313: PUSH
75314: EMPTY
75315: LIST
75316: LIST
75317: PUSH
75318: LD_INT 3
75320: PUSH
75321: LD_INT 23
75323: PUSH
75324: LD_INT 0
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: PUSH
75331: EMPTY
75332: LIST
75333: LIST
75334: PUSH
75335: EMPTY
75336: LIST
75337: LIST
75338: LIST
75339: PPUSH
75340: CALL_OW 69
75344: ST_TO_ADDR
// if not tmp then
75345: LD_VAR 0 1
75349: NOT
75350: IFFALSE 75354
// exit ;
75352: GO 75380
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
75354: LD_VAR 0 1
75358: PUSH
75359: LD_INT 1
75361: PPUSH
75362: LD_VAR 0 1
75366: PPUSH
75367: CALL_OW 12
75371: ARRAY
75372: PPUSH
75373: LD_INT 200
75375: PPUSH
75376: CALL_OW 234
// end ;
75380: PPOPN 1
75382: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
75383: LD_EXP 77
75387: PUSH
75388: LD_EXP 106
75392: AND
75393: IFFALSE 75472
75395: GO 75397
75397: DISABLE
75398: LD_INT 0
75400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
75401: LD_ADDR_VAR 0 1
75405: PUSH
75406: LD_INT 22
75408: PUSH
75409: LD_OWVAR 2
75413: PUSH
75414: EMPTY
75415: LIST
75416: LIST
75417: PUSH
75418: LD_INT 21
75420: PUSH
75421: LD_INT 2
75423: PUSH
75424: EMPTY
75425: LIST
75426: LIST
75427: PUSH
75428: EMPTY
75429: LIST
75430: LIST
75431: PPUSH
75432: CALL_OW 69
75436: ST_TO_ADDR
// if not tmp then
75437: LD_VAR 0 1
75441: NOT
75442: IFFALSE 75446
// exit ;
75444: GO 75472
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
75446: LD_VAR 0 1
75450: PUSH
75451: LD_INT 1
75453: PPUSH
75454: LD_VAR 0 1
75458: PPUSH
75459: CALL_OW 12
75463: ARRAY
75464: PPUSH
75465: LD_INT 60
75467: PPUSH
75468: CALL_OW 234
// end ;
75472: PPOPN 1
75474: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
75475: LD_EXP 77
75479: PUSH
75480: LD_EXP 107
75484: AND
75485: IFFALSE 75584
75487: GO 75489
75489: DISABLE
75490: LD_INT 0
75492: PPUSH
75493: PPUSH
// begin enable ;
75494: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
75495: LD_ADDR_VAR 0 1
75499: PUSH
75500: LD_INT 22
75502: PUSH
75503: LD_OWVAR 2
75507: PUSH
75508: EMPTY
75509: LIST
75510: LIST
75511: PUSH
75512: LD_INT 61
75514: PUSH
75515: EMPTY
75516: LIST
75517: PUSH
75518: LD_INT 33
75520: PUSH
75521: LD_INT 2
75523: PUSH
75524: EMPTY
75525: LIST
75526: LIST
75527: PUSH
75528: EMPTY
75529: LIST
75530: LIST
75531: LIST
75532: PPUSH
75533: CALL_OW 69
75537: ST_TO_ADDR
// if not tmp then
75538: LD_VAR 0 1
75542: NOT
75543: IFFALSE 75547
// exit ;
75545: GO 75584
// for i in tmp do
75547: LD_ADDR_VAR 0 2
75551: PUSH
75552: LD_VAR 0 1
75556: PUSH
75557: FOR_IN
75558: IFFALSE 75582
// if IsControledBy ( i ) then
75560: LD_VAR 0 2
75564: PPUSH
75565: CALL_OW 312
75569: IFFALSE 75580
// ComUnlink ( i ) ;
75571: LD_VAR 0 2
75575: PPUSH
75576: CALL_OW 136
75580: GO 75557
75582: POP
75583: POP
// end ;
75584: PPOPN 2
75586: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
75587: LD_EXP 77
75591: PUSH
75592: LD_EXP 108
75596: AND
75597: IFFALSE 75737
75599: GO 75601
75601: DISABLE
75602: LD_INT 0
75604: PPUSH
75605: PPUSH
// begin ToLua ( displayPowell(); ) ;
75606: LD_STRING displayPowell();
75608: PPUSH
75609: CALL_OW 559
// uc_side := 0 ;
75613: LD_ADDR_OWVAR 20
75617: PUSH
75618: LD_INT 0
75620: ST_TO_ADDR
// uc_nation := 2 ;
75621: LD_ADDR_OWVAR 21
75625: PUSH
75626: LD_INT 2
75628: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
75629: LD_ADDR_OWVAR 37
75633: PUSH
75634: LD_INT 14
75636: ST_TO_ADDR
// vc_engine := engine_siberite ;
75637: LD_ADDR_OWVAR 39
75641: PUSH
75642: LD_INT 3
75644: ST_TO_ADDR
// vc_control := control_apeman ;
75645: LD_ADDR_OWVAR 38
75649: PUSH
75650: LD_INT 5
75652: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
75653: LD_ADDR_OWVAR 40
75657: PUSH
75658: LD_INT 29
75660: ST_TO_ADDR
// un := CreateVehicle ;
75661: LD_ADDR_VAR 0 2
75665: PUSH
75666: CALL_OW 45
75670: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75671: LD_VAR 0 2
75675: PPUSH
75676: LD_INT 1
75678: PPUSH
75679: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
75683: LD_INT 35
75685: PPUSH
75686: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
75690: LD_VAR 0 2
75694: PPUSH
75695: LD_INT 22
75697: PUSH
75698: LD_OWVAR 2
75702: PUSH
75703: EMPTY
75704: LIST
75705: LIST
75706: PPUSH
75707: CALL_OW 69
75711: PPUSH
75712: LD_VAR 0 2
75716: PPUSH
75717: CALL_OW 74
75721: PPUSH
75722: CALL_OW 115
// until IsDead ( un ) ;
75726: LD_VAR 0 2
75730: PPUSH
75731: CALL_OW 301
75735: IFFALSE 75683
// end ;
75737: PPOPN 2
75739: END
// every 0 0$1 trigger StreamModeActive and sStu do
75740: LD_EXP 77
75744: PUSH
75745: LD_EXP 116
75749: AND
75750: IFFALSE 75766
75752: GO 75754
75754: DISABLE
// begin ToLua ( displayStucuk(); ) ;
75755: LD_STRING displayStucuk();
75757: PPUSH
75758: CALL_OW 559
// ResetFog ;
75762: CALL_OW 335
// end ;
75766: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
75767: LD_EXP 77
75771: PUSH
75772: LD_EXP 109
75776: AND
75777: IFFALSE 75918
75779: GO 75781
75781: DISABLE
75782: LD_INT 0
75784: PPUSH
75785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75786: LD_ADDR_VAR 0 2
75790: PUSH
75791: LD_INT 22
75793: PUSH
75794: LD_OWVAR 2
75798: PUSH
75799: EMPTY
75800: LIST
75801: LIST
75802: PUSH
75803: LD_INT 21
75805: PUSH
75806: LD_INT 1
75808: PUSH
75809: EMPTY
75810: LIST
75811: LIST
75812: PUSH
75813: EMPTY
75814: LIST
75815: LIST
75816: PPUSH
75817: CALL_OW 69
75821: ST_TO_ADDR
// if not tmp then
75822: LD_VAR 0 2
75826: NOT
75827: IFFALSE 75831
// exit ;
75829: GO 75918
// un := tmp [ rand ( 1 , tmp ) ] ;
75831: LD_ADDR_VAR 0 1
75835: PUSH
75836: LD_VAR 0 2
75840: PUSH
75841: LD_INT 1
75843: PPUSH
75844: LD_VAR 0 2
75848: PPUSH
75849: CALL_OW 12
75853: ARRAY
75854: ST_TO_ADDR
// SetSide ( un , 0 ) ;
75855: LD_VAR 0 1
75859: PPUSH
75860: LD_INT 0
75862: PPUSH
75863: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
75867: LD_VAR 0 1
75871: PPUSH
75872: LD_OWVAR 3
75876: PUSH
75877: LD_VAR 0 1
75881: DIFF
75882: PPUSH
75883: LD_VAR 0 1
75887: PPUSH
75888: CALL_OW 74
75892: PPUSH
75893: CALL_OW 115
// wait ( 0 0$20 ) ;
75897: LD_INT 700
75899: PPUSH
75900: CALL_OW 67
// SetSide ( un , your_side ) ;
75904: LD_VAR 0 1
75908: PPUSH
75909: LD_OWVAR 2
75913: PPUSH
75914: CALL_OW 235
// end ;
75918: PPOPN 2
75920: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
75921: LD_EXP 77
75925: PUSH
75926: LD_EXP 110
75930: AND
75931: IFFALSE 76037
75933: GO 75935
75935: DISABLE
75936: LD_INT 0
75938: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75939: LD_ADDR_VAR 0 1
75943: PUSH
75944: LD_INT 22
75946: PUSH
75947: LD_OWVAR 2
75951: PUSH
75952: EMPTY
75953: LIST
75954: LIST
75955: PUSH
75956: LD_INT 2
75958: PUSH
75959: LD_INT 30
75961: PUSH
75962: LD_INT 0
75964: PUSH
75965: EMPTY
75966: LIST
75967: LIST
75968: PUSH
75969: LD_INT 30
75971: PUSH
75972: LD_INT 1
75974: PUSH
75975: EMPTY
75976: LIST
75977: LIST
75978: PUSH
75979: EMPTY
75980: LIST
75981: LIST
75982: LIST
75983: PUSH
75984: EMPTY
75985: LIST
75986: LIST
75987: PPUSH
75988: CALL_OW 69
75992: ST_TO_ADDR
// if not depot then
75993: LD_VAR 0 1
75997: NOT
75998: IFFALSE 76002
// exit ;
76000: GO 76037
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
76002: LD_VAR 0 1
76006: PUSH
76007: LD_INT 1
76009: ARRAY
76010: PPUSH
76011: CALL_OW 250
76015: PPUSH
76016: LD_VAR 0 1
76020: PUSH
76021: LD_INT 1
76023: ARRAY
76024: PPUSH
76025: CALL_OW 251
76029: PPUSH
76030: LD_INT 70
76032: PPUSH
76033: CALL_OW 495
// end ;
76037: PPOPN 1
76039: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
76040: LD_EXP 77
76044: PUSH
76045: LD_EXP 111
76049: AND
76050: IFFALSE 76261
76052: GO 76054
76054: DISABLE
76055: LD_INT 0
76057: PPUSH
76058: PPUSH
76059: PPUSH
76060: PPUSH
76061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76062: LD_ADDR_VAR 0 5
76066: PUSH
76067: LD_INT 22
76069: PUSH
76070: LD_OWVAR 2
76074: PUSH
76075: EMPTY
76076: LIST
76077: LIST
76078: PUSH
76079: LD_INT 21
76081: PUSH
76082: LD_INT 1
76084: PUSH
76085: EMPTY
76086: LIST
76087: LIST
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: PPUSH
76093: CALL_OW 69
76097: ST_TO_ADDR
// if not tmp then
76098: LD_VAR 0 5
76102: NOT
76103: IFFALSE 76107
// exit ;
76105: GO 76261
// for i in tmp do
76107: LD_ADDR_VAR 0 1
76111: PUSH
76112: LD_VAR 0 5
76116: PUSH
76117: FOR_IN
76118: IFFALSE 76259
// begin d := rand ( 0 , 5 ) ;
76120: LD_ADDR_VAR 0 4
76124: PUSH
76125: LD_INT 0
76127: PPUSH
76128: LD_INT 5
76130: PPUSH
76131: CALL_OW 12
76135: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
76136: LD_ADDR_VAR 0 2
76140: PUSH
76141: LD_VAR 0 1
76145: PPUSH
76146: CALL_OW 250
76150: PPUSH
76151: LD_VAR 0 4
76155: PPUSH
76156: LD_INT 3
76158: PPUSH
76159: LD_INT 12
76161: PPUSH
76162: CALL_OW 12
76166: PPUSH
76167: CALL_OW 272
76171: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
76172: LD_ADDR_VAR 0 3
76176: PUSH
76177: LD_VAR 0 1
76181: PPUSH
76182: CALL_OW 251
76186: PPUSH
76187: LD_VAR 0 4
76191: PPUSH
76192: LD_INT 3
76194: PPUSH
76195: LD_INT 12
76197: PPUSH
76198: CALL_OW 12
76202: PPUSH
76203: CALL_OW 273
76207: ST_TO_ADDR
// if ValidHex ( x , y ) then
76208: LD_VAR 0 2
76212: PPUSH
76213: LD_VAR 0 3
76217: PPUSH
76218: CALL_OW 488
76222: IFFALSE 76257
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
76224: LD_VAR 0 1
76228: PPUSH
76229: LD_VAR 0 2
76233: PPUSH
76234: LD_VAR 0 3
76238: PPUSH
76239: LD_INT 3
76241: PPUSH
76242: LD_INT 6
76244: PPUSH
76245: CALL_OW 12
76249: PPUSH
76250: LD_INT 1
76252: PPUSH
76253: CALL_OW 483
// end ;
76257: GO 76117
76259: POP
76260: POP
// end ;
76261: PPOPN 5
76263: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
76264: LD_EXP 77
76268: PUSH
76269: LD_EXP 112
76273: AND
76274: IFFALSE 76368
76276: GO 76278
76278: DISABLE
76279: LD_INT 0
76281: PPUSH
76282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
76283: LD_ADDR_VAR 0 2
76287: PUSH
76288: LD_INT 22
76290: PUSH
76291: LD_OWVAR 2
76295: PUSH
76296: EMPTY
76297: LIST
76298: LIST
76299: PUSH
76300: LD_INT 32
76302: PUSH
76303: LD_INT 1
76305: PUSH
76306: EMPTY
76307: LIST
76308: LIST
76309: PUSH
76310: LD_INT 21
76312: PUSH
76313: LD_INT 2
76315: PUSH
76316: EMPTY
76317: LIST
76318: LIST
76319: PUSH
76320: EMPTY
76321: LIST
76322: LIST
76323: LIST
76324: PPUSH
76325: CALL_OW 69
76329: ST_TO_ADDR
// if not tmp then
76330: LD_VAR 0 2
76334: NOT
76335: IFFALSE 76339
// exit ;
76337: GO 76368
// for i in tmp do
76339: LD_ADDR_VAR 0 1
76343: PUSH
76344: LD_VAR 0 2
76348: PUSH
76349: FOR_IN
76350: IFFALSE 76366
// SetFuel ( i , 0 ) ;
76352: LD_VAR 0 1
76356: PPUSH
76357: LD_INT 0
76359: PPUSH
76360: CALL_OW 240
76364: GO 76349
76366: POP
76367: POP
// end ;
76368: PPOPN 2
76370: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
76371: LD_EXP 77
76375: PUSH
76376: LD_EXP 113
76380: AND
76381: IFFALSE 76447
76383: GO 76385
76385: DISABLE
76386: LD_INT 0
76388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
76389: LD_ADDR_VAR 0 1
76393: PUSH
76394: LD_INT 22
76396: PUSH
76397: LD_OWVAR 2
76401: PUSH
76402: EMPTY
76403: LIST
76404: LIST
76405: PUSH
76406: LD_INT 30
76408: PUSH
76409: LD_INT 29
76411: PUSH
76412: EMPTY
76413: LIST
76414: LIST
76415: PUSH
76416: EMPTY
76417: LIST
76418: LIST
76419: PPUSH
76420: CALL_OW 69
76424: ST_TO_ADDR
// if not tmp then
76425: LD_VAR 0 1
76429: NOT
76430: IFFALSE 76434
// exit ;
76432: GO 76447
// DestroyUnit ( tmp [ 1 ] ) ;
76434: LD_VAR 0 1
76438: PUSH
76439: LD_INT 1
76441: ARRAY
76442: PPUSH
76443: CALL_OW 65
// end ;
76447: PPOPN 1
76449: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
76450: LD_EXP 77
76454: PUSH
76455: LD_EXP 115
76459: AND
76460: IFFALSE 76589
76462: GO 76464
76464: DISABLE
76465: LD_INT 0
76467: PPUSH
// begin uc_side := 0 ;
76468: LD_ADDR_OWVAR 20
76472: PUSH
76473: LD_INT 0
76475: ST_TO_ADDR
// uc_nation := nation_arabian ;
76476: LD_ADDR_OWVAR 21
76480: PUSH
76481: LD_INT 2
76483: ST_TO_ADDR
// hc_gallery :=  ;
76484: LD_ADDR_OWVAR 33
76488: PUSH
76489: LD_STRING 
76491: ST_TO_ADDR
// hc_name :=  ;
76492: LD_ADDR_OWVAR 26
76496: PUSH
76497: LD_STRING 
76499: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
76500: LD_INT 1
76502: PPUSH
76503: LD_INT 11
76505: PPUSH
76506: LD_INT 10
76508: PPUSH
76509: CALL_OW 380
// un := CreateHuman ;
76513: LD_ADDR_VAR 0 1
76517: PUSH
76518: CALL_OW 44
76522: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76523: LD_VAR 0 1
76527: PPUSH
76528: LD_INT 1
76530: PPUSH
76531: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
76535: LD_INT 35
76537: PPUSH
76538: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
76542: LD_VAR 0 1
76546: PPUSH
76547: LD_INT 22
76549: PUSH
76550: LD_OWVAR 2
76554: PUSH
76555: EMPTY
76556: LIST
76557: LIST
76558: PPUSH
76559: CALL_OW 69
76563: PPUSH
76564: LD_VAR 0 1
76568: PPUSH
76569: CALL_OW 74
76573: PPUSH
76574: CALL_OW 115
// until IsDead ( un ) ;
76578: LD_VAR 0 1
76582: PPUSH
76583: CALL_OW 301
76587: IFFALSE 76535
// end ;
76589: PPOPN 1
76591: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
76592: LD_EXP 77
76596: PUSH
76597: LD_EXP 117
76601: AND
76602: IFFALSE 76614
76604: GO 76606
76606: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
76607: LD_STRING earthquake(getX(game), 0, 32)
76609: PPUSH
76610: CALL_OW 559
76614: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
76615: LD_EXP 77
76619: PUSH
76620: LD_EXP 118
76624: AND
76625: IFFALSE 76716
76627: GO 76629
76629: DISABLE
76630: LD_INT 0
76632: PPUSH
// begin enable ;
76633: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
76634: LD_ADDR_VAR 0 1
76638: PUSH
76639: LD_INT 22
76641: PUSH
76642: LD_OWVAR 2
76646: PUSH
76647: EMPTY
76648: LIST
76649: LIST
76650: PUSH
76651: LD_INT 21
76653: PUSH
76654: LD_INT 2
76656: PUSH
76657: EMPTY
76658: LIST
76659: LIST
76660: PUSH
76661: LD_INT 33
76663: PUSH
76664: LD_INT 3
76666: PUSH
76667: EMPTY
76668: LIST
76669: LIST
76670: PUSH
76671: EMPTY
76672: LIST
76673: LIST
76674: LIST
76675: PPUSH
76676: CALL_OW 69
76680: ST_TO_ADDR
// if not tmp then
76681: LD_VAR 0 1
76685: NOT
76686: IFFALSE 76690
// exit ;
76688: GO 76716
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
76690: LD_VAR 0 1
76694: PUSH
76695: LD_INT 1
76697: PPUSH
76698: LD_VAR 0 1
76702: PPUSH
76703: CALL_OW 12
76707: ARRAY
76708: PPUSH
76709: LD_INT 1
76711: PPUSH
76712: CALL_OW 234
// end ;
76716: PPOPN 1
76718: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
76719: LD_EXP 77
76723: PUSH
76724: LD_EXP 119
76728: AND
76729: IFFALSE 76870
76731: GO 76733
76733: DISABLE
76734: LD_INT 0
76736: PPUSH
76737: PPUSH
76738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76739: LD_ADDR_VAR 0 3
76743: PUSH
76744: LD_INT 22
76746: PUSH
76747: LD_OWVAR 2
76751: PUSH
76752: EMPTY
76753: LIST
76754: LIST
76755: PUSH
76756: LD_INT 25
76758: PUSH
76759: LD_INT 1
76761: PUSH
76762: EMPTY
76763: LIST
76764: LIST
76765: PUSH
76766: EMPTY
76767: LIST
76768: LIST
76769: PPUSH
76770: CALL_OW 69
76774: ST_TO_ADDR
// if not tmp then
76775: LD_VAR 0 3
76779: NOT
76780: IFFALSE 76784
// exit ;
76782: GO 76870
// un := tmp [ rand ( 1 , tmp ) ] ;
76784: LD_ADDR_VAR 0 2
76788: PUSH
76789: LD_VAR 0 3
76793: PUSH
76794: LD_INT 1
76796: PPUSH
76797: LD_VAR 0 3
76801: PPUSH
76802: CALL_OW 12
76806: ARRAY
76807: ST_TO_ADDR
// if Crawls ( un ) then
76808: LD_VAR 0 2
76812: PPUSH
76813: CALL_OW 318
76817: IFFALSE 76828
// ComWalk ( un ) ;
76819: LD_VAR 0 2
76823: PPUSH
76824: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
76828: LD_VAR 0 2
76832: PPUSH
76833: LD_INT 9
76835: PPUSH
76836: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
76840: LD_INT 28
76842: PPUSH
76843: LD_OWVAR 2
76847: PPUSH
76848: LD_INT 2
76850: PPUSH
76851: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
76855: LD_INT 29
76857: PPUSH
76858: LD_OWVAR 2
76862: PPUSH
76863: LD_INT 2
76865: PPUSH
76866: CALL_OW 322
// end ;
76870: PPOPN 3
76872: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
76873: LD_EXP 77
76877: PUSH
76878: LD_EXP 120
76882: AND
76883: IFFALSE 76994
76885: GO 76887
76887: DISABLE
76888: LD_INT 0
76890: PPUSH
76891: PPUSH
76892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76893: LD_ADDR_VAR 0 3
76897: PUSH
76898: LD_INT 22
76900: PUSH
76901: LD_OWVAR 2
76905: PUSH
76906: EMPTY
76907: LIST
76908: LIST
76909: PUSH
76910: LD_INT 25
76912: PUSH
76913: LD_INT 1
76915: PUSH
76916: EMPTY
76917: LIST
76918: LIST
76919: PUSH
76920: EMPTY
76921: LIST
76922: LIST
76923: PPUSH
76924: CALL_OW 69
76928: ST_TO_ADDR
// if not tmp then
76929: LD_VAR 0 3
76933: NOT
76934: IFFALSE 76938
// exit ;
76936: GO 76994
// un := tmp [ rand ( 1 , tmp ) ] ;
76938: LD_ADDR_VAR 0 2
76942: PUSH
76943: LD_VAR 0 3
76947: PUSH
76948: LD_INT 1
76950: PPUSH
76951: LD_VAR 0 3
76955: PPUSH
76956: CALL_OW 12
76960: ARRAY
76961: ST_TO_ADDR
// if Crawls ( un ) then
76962: LD_VAR 0 2
76966: PPUSH
76967: CALL_OW 318
76971: IFFALSE 76982
// ComWalk ( un ) ;
76973: LD_VAR 0 2
76977: PPUSH
76978: CALL_OW 138
// SetClass ( un , class_mortar ) ;
76982: LD_VAR 0 2
76986: PPUSH
76987: LD_INT 8
76989: PPUSH
76990: CALL_OW 336
// end ;
76994: PPOPN 3
76996: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
76997: LD_EXP 77
77001: PUSH
77002: LD_EXP 121
77006: AND
77007: IFFALSE 77151
77009: GO 77011
77011: DISABLE
77012: LD_INT 0
77014: PPUSH
77015: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
77016: LD_ADDR_VAR 0 2
77020: PUSH
77021: LD_INT 22
77023: PUSH
77024: LD_OWVAR 2
77028: PUSH
77029: EMPTY
77030: LIST
77031: LIST
77032: PUSH
77033: LD_INT 21
77035: PUSH
77036: LD_INT 2
77038: PUSH
77039: EMPTY
77040: LIST
77041: LIST
77042: PUSH
77043: LD_INT 2
77045: PUSH
77046: LD_INT 34
77048: PUSH
77049: LD_INT 12
77051: PUSH
77052: EMPTY
77053: LIST
77054: LIST
77055: PUSH
77056: LD_INT 34
77058: PUSH
77059: LD_INT 51
77061: PUSH
77062: EMPTY
77063: LIST
77064: LIST
77065: PUSH
77066: LD_INT 34
77068: PUSH
77069: LD_INT 32
77071: PUSH
77072: EMPTY
77073: LIST
77074: LIST
77075: PUSH
77076: EMPTY
77077: LIST
77078: LIST
77079: LIST
77080: LIST
77081: PUSH
77082: EMPTY
77083: LIST
77084: LIST
77085: LIST
77086: PPUSH
77087: CALL_OW 69
77091: ST_TO_ADDR
// if not tmp then
77092: LD_VAR 0 2
77096: NOT
77097: IFFALSE 77101
// exit ;
77099: GO 77151
// for i in tmp do
77101: LD_ADDR_VAR 0 1
77105: PUSH
77106: LD_VAR 0 2
77110: PUSH
77111: FOR_IN
77112: IFFALSE 77149
// if GetCargo ( i , mat_artifact ) = 0 then
77114: LD_VAR 0 1
77118: PPUSH
77119: LD_INT 4
77121: PPUSH
77122: CALL_OW 289
77126: PUSH
77127: LD_INT 0
77129: EQUAL
77130: IFFALSE 77147
// SetCargo ( i , mat_siberit , 100 ) ;
77132: LD_VAR 0 1
77136: PPUSH
77137: LD_INT 3
77139: PPUSH
77140: LD_INT 100
77142: PPUSH
77143: CALL_OW 290
77147: GO 77111
77149: POP
77150: POP
// end ;
77151: PPOPN 2
77153: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
77154: LD_EXP 77
77158: PUSH
77159: LD_EXP 122
77163: AND
77164: IFFALSE 77347
77166: GO 77168
77168: DISABLE
77169: LD_INT 0
77171: PPUSH
77172: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77173: LD_ADDR_VAR 0 2
77177: PUSH
77178: LD_INT 22
77180: PUSH
77181: LD_OWVAR 2
77185: PUSH
77186: EMPTY
77187: LIST
77188: LIST
77189: PPUSH
77190: CALL_OW 69
77194: ST_TO_ADDR
// if not tmp then
77195: LD_VAR 0 2
77199: NOT
77200: IFFALSE 77204
// exit ;
77202: GO 77347
// for i := 1 to 2 do
77204: LD_ADDR_VAR 0 1
77208: PUSH
77209: DOUBLE
77210: LD_INT 1
77212: DEC
77213: ST_TO_ADDR
77214: LD_INT 2
77216: PUSH
77217: FOR_TO
77218: IFFALSE 77345
// begin uc_side := your_side ;
77220: LD_ADDR_OWVAR 20
77224: PUSH
77225: LD_OWVAR 2
77229: ST_TO_ADDR
// uc_nation := nation_american ;
77230: LD_ADDR_OWVAR 21
77234: PUSH
77235: LD_INT 1
77237: ST_TO_ADDR
// vc_chassis := us_morphling ;
77238: LD_ADDR_OWVAR 37
77242: PUSH
77243: LD_INT 5
77245: ST_TO_ADDR
// vc_engine := engine_siberite ;
77246: LD_ADDR_OWVAR 39
77250: PUSH
77251: LD_INT 3
77253: ST_TO_ADDR
// vc_control := control_computer ;
77254: LD_ADDR_OWVAR 38
77258: PUSH
77259: LD_INT 3
77261: ST_TO_ADDR
// vc_weapon := us_double_laser ;
77262: LD_ADDR_OWVAR 40
77266: PUSH
77267: LD_INT 10
77269: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
77270: LD_VAR 0 2
77274: PUSH
77275: LD_INT 1
77277: ARRAY
77278: PPUSH
77279: CALL_OW 310
77283: NOT
77284: IFFALSE 77331
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
77286: CALL_OW 45
77290: PPUSH
77291: LD_VAR 0 2
77295: PUSH
77296: LD_INT 1
77298: ARRAY
77299: PPUSH
77300: CALL_OW 250
77304: PPUSH
77305: LD_VAR 0 2
77309: PUSH
77310: LD_INT 1
77312: ARRAY
77313: PPUSH
77314: CALL_OW 251
77318: PPUSH
77319: LD_INT 12
77321: PPUSH
77322: LD_INT 1
77324: PPUSH
77325: CALL_OW 50
77329: GO 77343
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
77331: CALL_OW 45
77335: PPUSH
77336: LD_INT 1
77338: PPUSH
77339: CALL_OW 51
// end ;
77343: GO 77217
77345: POP
77346: POP
// end ;
77347: PPOPN 2
77349: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
77350: LD_EXP 77
77354: PUSH
77355: LD_EXP 123
77359: AND
77360: IFFALSE 77582
77362: GO 77364
77364: DISABLE
77365: LD_INT 0
77367: PPUSH
77368: PPUSH
77369: PPUSH
77370: PPUSH
77371: PPUSH
77372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77373: LD_ADDR_VAR 0 6
77377: PUSH
77378: LD_INT 22
77380: PUSH
77381: LD_OWVAR 2
77385: PUSH
77386: EMPTY
77387: LIST
77388: LIST
77389: PUSH
77390: LD_INT 21
77392: PUSH
77393: LD_INT 1
77395: PUSH
77396: EMPTY
77397: LIST
77398: LIST
77399: PUSH
77400: LD_INT 3
77402: PUSH
77403: LD_INT 23
77405: PUSH
77406: LD_INT 0
77408: PUSH
77409: EMPTY
77410: LIST
77411: LIST
77412: PUSH
77413: EMPTY
77414: LIST
77415: LIST
77416: PUSH
77417: EMPTY
77418: LIST
77419: LIST
77420: LIST
77421: PPUSH
77422: CALL_OW 69
77426: ST_TO_ADDR
// if not tmp then
77427: LD_VAR 0 6
77431: NOT
77432: IFFALSE 77436
// exit ;
77434: GO 77582
// s1 := rand ( 1 , 4 ) ;
77436: LD_ADDR_VAR 0 2
77440: PUSH
77441: LD_INT 1
77443: PPUSH
77444: LD_INT 4
77446: PPUSH
77447: CALL_OW 12
77451: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
77452: LD_ADDR_VAR 0 4
77456: PUSH
77457: LD_VAR 0 6
77461: PUSH
77462: LD_INT 1
77464: ARRAY
77465: PPUSH
77466: LD_VAR 0 2
77470: PPUSH
77471: CALL_OW 259
77475: ST_TO_ADDR
// if s1 = 1 then
77476: LD_VAR 0 2
77480: PUSH
77481: LD_INT 1
77483: EQUAL
77484: IFFALSE 77504
// s2 := rand ( 2 , 4 ) else
77486: LD_ADDR_VAR 0 3
77490: PUSH
77491: LD_INT 2
77493: PPUSH
77494: LD_INT 4
77496: PPUSH
77497: CALL_OW 12
77501: ST_TO_ADDR
77502: GO 77512
// s2 := 1 ;
77504: LD_ADDR_VAR 0 3
77508: PUSH
77509: LD_INT 1
77511: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
77512: LD_ADDR_VAR 0 5
77516: PUSH
77517: LD_VAR 0 6
77521: PUSH
77522: LD_INT 1
77524: ARRAY
77525: PPUSH
77526: LD_VAR 0 3
77530: PPUSH
77531: CALL_OW 259
77535: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
77536: LD_VAR 0 6
77540: PUSH
77541: LD_INT 1
77543: ARRAY
77544: PPUSH
77545: LD_VAR 0 2
77549: PPUSH
77550: LD_VAR 0 5
77554: PPUSH
77555: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
77559: LD_VAR 0 6
77563: PUSH
77564: LD_INT 1
77566: ARRAY
77567: PPUSH
77568: LD_VAR 0 3
77572: PPUSH
77573: LD_VAR 0 4
77577: PPUSH
77578: CALL_OW 237
// end ;
77582: PPOPN 6
77584: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
77585: LD_EXP 77
77589: PUSH
77590: LD_EXP 124
77594: AND
77595: IFFALSE 77674
77597: GO 77599
77599: DISABLE
77600: LD_INT 0
77602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
77603: LD_ADDR_VAR 0 1
77607: PUSH
77608: LD_INT 22
77610: PUSH
77611: LD_OWVAR 2
77615: PUSH
77616: EMPTY
77617: LIST
77618: LIST
77619: PUSH
77620: LD_INT 30
77622: PUSH
77623: LD_INT 3
77625: PUSH
77626: EMPTY
77627: LIST
77628: LIST
77629: PUSH
77630: EMPTY
77631: LIST
77632: LIST
77633: PPUSH
77634: CALL_OW 69
77638: ST_TO_ADDR
// if not tmp then
77639: LD_VAR 0 1
77643: NOT
77644: IFFALSE 77648
// exit ;
77646: GO 77674
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
77648: LD_VAR 0 1
77652: PUSH
77653: LD_INT 1
77655: PPUSH
77656: LD_VAR 0 1
77660: PPUSH
77661: CALL_OW 12
77665: ARRAY
77666: PPUSH
77667: LD_INT 1
77669: PPUSH
77670: CALL_OW 234
// end ;
77674: PPOPN 1
77676: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
77677: LD_EXP 77
77681: PUSH
77682: LD_EXP 125
77686: AND
77687: IFFALSE 77799
77689: GO 77691
77691: DISABLE
77692: LD_INT 0
77694: PPUSH
77695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
77696: LD_ADDR_VAR 0 2
77700: PUSH
77701: LD_INT 22
77703: PUSH
77704: LD_OWVAR 2
77708: PUSH
77709: EMPTY
77710: LIST
77711: LIST
77712: PUSH
77713: LD_INT 2
77715: PUSH
77716: LD_INT 30
77718: PUSH
77719: LD_INT 27
77721: PUSH
77722: EMPTY
77723: LIST
77724: LIST
77725: PUSH
77726: LD_INT 30
77728: PUSH
77729: LD_INT 26
77731: PUSH
77732: EMPTY
77733: LIST
77734: LIST
77735: PUSH
77736: LD_INT 30
77738: PUSH
77739: LD_INT 28
77741: PUSH
77742: EMPTY
77743: LIST
77744: LIST
77745: PUSH
77746: EMPTY
77747: LIST
77748: LIST
77749: LIST
77750: LIST
77751: PUSH
77752: EMPTY
77753: LIST
77754: LIST
77755: PPUSH
77756: CALL_OW 69
77760: ST_TO_ADDR
// if not tmp then
77761: LD_VAR 0 2
77765: NOT
77766: IFFALSE 77770
// exit ;
77768: GO 77799
// for i in tmp do
77770: LD_ADDR_VAR 0 1
77774: PUSH
77775: LD_VAR 0 2
77779: PUSH
77780: FOR_IN
77781: IFFALSE 77797
// SetLives ( i , 1 ) ;
77783: LD_VAR 0 1
77787: PPUSH
77788: LD_INT 1
77790: PPUSH
77791: CALL_OW 234
77795: GO 77780
77797: POP
77798: POP
// end ;
77799: PPOPN 2
77801: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
77802: LD_EXP 77
77806: PUSH
77807: LD_EXP 126
77811: AND
77812: IFFALSE 78099
77814: GO 77816
77816: DISABLE
77817: LD_INT 0
77819: PPUSH
77820: PPUSH
77821: PPUSH
// begin i := rand ( 1 , 7 ) ;
77822: LD_ADDR_VAR 0 1
77826: PUSH
77827: LD_INT 1
77829: PPUSH
77830: LD_INT 7
77832: PPUSH
77833: CALL_OW 12
77837: ST_TO_ADDR
// case i of 1 :
77838: LD_VAR 0 1
77842: PUSH
77843: LD_INT 1
77845: DOUBLE
77846: EQUAL
77847: IFTRUE 77851
77849: GO 77861
77851: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
77852: LD_STRING earthquake(getX(game), 0, 32)
77854: PPUSH
77855: CALL_OW 559
77859: GO 78099
77861: LD_INT 2
77863: DOUBLE
77864: EQUAL
77865: IFTRUE 77869
77867: GO 77883
77869: POP
// begin ToLua ( displayStucuk(); ) ;
77870: LD_STRING displayStucuk();
77872: PPUSH
77873: CALL_OW 559
// ResetFog ;
77877: CALL_OW 335
// end ; 3 :
77881: GO 78099
77883: LD_INT 3
77885: DOUBLE
77886: EQUAL
77887: IFTRUE 77891
77889: GO 77995
77891: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77892: LD_ADDR_VAR 0 2
77896: PUSH
77897: LD_INT 22
77899: PUSH
77900: LD_OWVAR 2
77904: PUSH
77905: EMPTY
77906: LIST
77907: LIST
77908: PUSH
77909: LD_INT 25
77911: PUSH
77912: LD_INT 1
77914: PUSH
77915: EMPTY
77916: LIST
77917: LIST
77918: PUSH
77919: EMPTY
77920: LIST
77921: LIST
77922: PPUSH
77923: CALL_OW 69
77927: ST_TO_ADDR
// if not tmp then
77928: LD_VAR 0 2
77932: NOT
77933: IFFALSE 77937
// exit ;
77935: GO 78099
// un := tmp [ rand ( 1 , tmp ) ] ;
77937: LD_ADDR_VAR 0 3
77941: PUSH
77942: LD_VAR 0 2
77946: PUSH
77947: LD_INT 1
77949: PPUSH
77950: LD_VAR 0 2
77954: PPUSH
77955: CALL_OW 12
77959: ARRAY
77960: ST_TO_ADDR
// if Crawls ( un ) then
77961: LD_VAR 0 3
77965: PPUSH
77966: CALL_OW 318
77970: IFFALSE 77981
// ComWalk ( un ) ;
77972: LD_VAR 0 3
77976: PPUSH
77977: CALL_OW 138
// SetClass ( un , class_mortar ) ;
77981: LD_VAR 0 3
77985: PPUSH
77986: LD_INT 8
77988: PPUSH
77989: CALL_OW 336
// end ; 4 :
77993: GO 78099
77995: LD_INT 4
77997: DOUBLE
77998: EQUAL
77999: IFTRUE 78003
78001: GO 78077
78003: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
78004: LD_ADDR_VAR 0 2
78008: PUSH
78009: LD_INT 22
78011: PUSH
78012: LD_OWVAR 2
78016: PUSH
78017: EMPTY
78018: LIST
78019: LIST
78020: PUSH
78021: LD_INT 30
78023: PUSH
78024: LD_INT 29
78026: PUSH
78027: EMPTY
78028: LIST
78029: LIST
78030: PUSH
78031: EMPTY
78032: LIST
78033: LIST
78034: PPUSH
78035: CALL_OW 69
78039: ST_TO_ADDR
// if not tmp then
78040: LD_VAR 0 2
78044: NOT
78045: IFFALSE 78049
// exit ;
78047: GO 78099
// CenterNowOnUnits ( tmp [ 1 ] ) ;
78049: LD_VAR 0 2
78053: PUSH
78054: LD_INT 1
78056: ARRAY
78057: PPUSH
78058: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
78062: LD_VAR 0 2
78066: PUSH
78067: LD_INT 1
78069: ARRAY
78070: PPUSH
78071: CALL_OW 65
// end ; 5 .. 7 :
78075: GO 78099
78077: LD_INT 5
78079: DOUBLE
78080: GREATEREQUAL
78081: IFFALSE 78089
78083: LD_INT 7
78085: DOUBLE
78086: LESSEQUAL
78087: IFTRUE 78091
78089: GO 78098
78091: POP
// StreamSibBomb ; end ;
78092: CALL 74336 0 0
78096: GO 78099
78098: POP
// end ;
78099: PPOPN 3
78101: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
78102: LD_EXP 77
78106: PUSH
78107: LD_EXP 127
78111: AND
78112: IFFALSE 78268
78114: GO 78116
78116: DISABLE
78117: LD_INT 0
78119: PPUSH
78120: PPUSH
78121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
78122: LD_ADDR_VAR 0 2
78126: PUSH
78127: LD_INT 81
78129: PUSH
78130: LD_OWVAR 2
78134: PUSH
78135: EMPTY
78136: LIST
78137: LIST
78138: PUSH
78139: LD_INT 2
78141: PUSH
78142: LD_INT 21
78144: PUSH
78145: LD_INT 1
78147: PUSH
78148: EMPTY
78149: LIST
78150: LIST
78151: PUSH
78152: LD_INT 21
78154: PUSH
78155: LD_INT 2
78157: PUSH
78158: EMPTY
78159: LIST
78160: LIST
78161: PUSH
78162: EMPTY
78163: LIST
78164: LIST
78165: LIST
78166: PUSH
78167: EMPTY
78168: LIST
78169: LIST
78170: PPUSH
78171: CALL_OW 69
78175: ST_TO_ADDR
// if not tmp then
78176: LD_VAR 0 2
78180: NOT
78181: IFFALSE 78185
// exit ;
78183: GO 78268
// p := 0 ;
78185: LD_ADDR_VAR 0 3
78189: PUSH
78190: LD_INT 0
78192: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78193: LD_INT 35
78195: PPUSH
78196: CALL_OW 67
// p := p + 1 ;
78200: LD_ADDR_VAR 0 3
78204: PUSH
78205: LD_VAR 0 3
78209: PUSH
78210: LD_INT 1
78212: PLUS
78213: ST_TO_ADDR
// for i in tmp do
78214: LD_ADDR_VAR 0 1
78218: PUSH
78219: LD_VAR 0 2
78223: PUSH
78224: FOR_IN
78225: IFFALSE 78256
// if GetLives ( i ) < 1000 then
78227: LD_VAR 0 1
78231: PPUSH
78232: CALL_OW 256
78236: PUSH
78237: LD_INT 1000
78239: LESS
78240: IFFALSE 78254
// SetLives ( i , 1000 ) ;
78242: LD_VAR 0 1
78246: PPUSH
78247: LD_INT 1000
78249: PPUSH
78250: CALL_OW 234
78254: GO 78224
78256: POP
78257: POP
// until p > 20 ;
78258: LD_VAR 0 3
78262: PUSH
78263: LD_INT 20
78265: GREATER
78266: IFFALSE 78193
// end ;
78268: PPOPN 3
78270: END
// every 0 0$1 trigger StreamModeActive and sTime do
78271: LD_EXP 77
78275: PUSH
78276: LD_EXP 128
78280: AND
78281: IFFALSE 78316
78283: GO 78285
78285: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
78286: LD_INT 28
78288: PPUSH
78289: LD_OWVAR 2
78293: PPUSH
78294: LD_INT 2
78296: PPUSH
78297: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
78301: LD_INT 30
78303: PPUSH
78304: LD_OWVAR 2
78308: PPUSH
78309: LD_INT 2
78311: PPUSH
78312: CALL_OW 322
// end ;
78316: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
78317: LD_EXP 77
78321: PUSH
78322: LD_EXP 129
78326: AND
78327: IFFALSE 78448
78329: GO 78331
78331: DISABLE
78332: LD_INT 0
78334: PPUSH
78335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78336: LD_ADDR_VAR 0 2
78340: PUSH
78341: LD_INT 22
78343: PUSH
78344: LD_OWVAR 2
78348: PUSH
78349: EMPTY
78350: LIST
78351: LIST
78352: PUSH
78353: LD_INT 21
78355: PUSH
78356: LD_INT 1
78358: PUSH
78359: EMPTY
78360: LIST
78361: LIST
78362: PUSH
78363: LD_INT 3
78365: PUSH
78366: LD_INT 23
78368: PUSH
78369: LD_INT 0
78371: PUSH
78372: EMPTY
78373: LIST
78374: LIST
78375: PUSH
78376: EMPTY
78377: LIST
78378: LIST
78379: PUSH
78380: EMPTY
78381: LIST
78382: LIST
78383: LIST
78384: PPUSH
78385: CALL_OW 69
78389: ST_TO_ADDR
// if not tmp then
78390: LD_VAR 0 2
78394: NOT
78395: IFFALSE 78399
// exit ;
78397: GO 78448
// for i in tmp do
78399: LD_ADDR_VAR 0 1
78403: PUSH
78404: LD_VAR 0 2
78408: PUSH
78409: FOR_IN
78410: IFFALSE 78446
// begin if Crawls ( i ) then
78412: LD_VAR 0 1
78416: PPUSH
78417: CALL_OW 318
78421: IFFALSE 78432
// ComWalk ( i ) ;
78423: LD_VAR 0 1
78427: PPUSH
78428: CALL_OW 138
// SetClass ( i , 2 ) ;
78432: LD_VAR 0 1
78436: PPUSH
78437: LD_INT 2
78439: PPUSH
78440: CALL_OW 336
// end ;
78444: GO 78409
78446: POP
78447: POP
// end ;
78448: PPOPN 2
78450: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
78451: LD_EXP 77
78455: PUSH
78456: LD_EXP 130
78460: AND
78461: IFFALSE 78749
78463: GO 78465
78465: DISABLE
78466: LD_INT 0
78468: PPUSH
78469: PPUSH
78470: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
78471: LD_OWVAR 2
78475: PPUSH
78476: LD_INT 9
78478: PPUSH
78479: LD_INT 1
78481: PPUSH
78482: LD_INT 1
78484: PPUSH
78485: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
78489: LD_INT 9
78491: PPUSH
78492: LD_OWVAR 2
78496: PPUSH
78497: CALL_OW 343
// uc_side := 9 ;
78501: LD_ADDR_OWVAR 20
78505: PUSH
78506: LD_INT 9
78508: ST_TO_ADDR
// uc_nation := 2 ;
78509: LD_ADDR_OWVAR 21
78513: PUSH
78514: LD_INT 2
78516: ST_TO_ADDR
// hc_name := Dark Warrior ;
78517: LD_ADDR_OWVAR 26
78521: PUSH
78522: LD_STRING Dark Warrior
78524: ST_TO_ADDR
// hc_gallery :=  ;
78525: LD_ADDR_OWVAR 33
78529: PUSH
78530: LD_STRING 
78532: ST_TO_ADDR
// hc_noskilllimit := true ;
78533: LD_ADDR_OWVAR 76
78537: PUSH
78538: LD_INT 1
78540: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
78541: LD_ADDR_OWVAR 31
78545: PUSH
78546: LD_INT 30
78548: PUSH
78549: LD_INT 30
78551: PUSH
78552: LD_INT 30
78554: PUSH
78555: LD_INT 30
78557: PUSH
78558: EMPTY
78559: LIST
78560: LIST
78561: LIST
78562: LIST
78563: ST_TO_ADDR
// un := CreateHuman ;
78564: LD_ADDR_VAR 0 3
78568: PUSH
78569: CALL_OW 44
78573: ST_TO_ADDR
// hc_noskilllimit := false ;
78574: LD_ADDR_OWVAR 76
78578: PUSH
78579: LD_INT 0
78581: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78582: LD_VAR 0 3
78586: PPUSH
78587: LD_INT 1
78589: PPUSH
78590: CALL_OW 51
// ToLua ( playRanger() ) ;
78594: LD_STRING playRanger()
78596: PPUSH
78597: CALL_OW 559
// p := 0 ;
78601: LD_ADDR_VAR 0 2
78605: PUSH
78606: LD_INT 0
78608: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78609: LD_INT 35
78611: PPUSH
78612: CALL_OW 67
// p := p + 1 ;
78616: LD_ADDR_VAR 0 2
78620: PUSH
78621: LD_VAR 0 2
78625: PUSH
78626: LD_INT 1
78628: PLUS
78629: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
78630: LD_VAR 0 3
78634: PPUSH
78635: CALL_OW 256
78639: PUSH
78640: LD_INT 1000
78642: LESS
78643: IFFALSE 78657
// SetLives ( un , 1000 ) ;
78645: LD_VAR 0 3
78649: PPUSH
78650: LD_INT 1000
78652: PPUSH
78653: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
78657: LD_VAR 0 3
78661: PPUSH
78662: LD_INT 81
78664: PUSH
78665: LD_OWVAR 2
78669: PUSH
78670: EMPTY
78671: LIST
78672: LIST
78673: PUSH
78674: LD_INT 91
78676: PUSH
78677: LD_VAR 0 3
78681: PUSH
78682: LD_INT 30
78684: PUSH
78685: EMPTY
78686: LIST
78687: LIST
78688: LIST
78689: PUSH
78690: EMPTY
78691: LIST
78692: LIST
78693: PPUSH
78694: CALL_OW 69
78698: PPUSH
78699: LD_VAR 0 3
78703: PPUSH
78704: CALL_OW 74
78708: PPUSH
78709: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
78713: LD_VAR 0 2
78717: PUSH
78718: LD_INT 80
78720: GREATER
78721: PUSH
78722: LD_VAR 0 3
78726: PPUSH
78727: CALL_OW 301
78731: OR
78732: IFFALSE 78609
// if un then
78734: LD_VAR 0 3
78738: IFFALSE 78749
// RemoveUnit ( un ) ;
78740: LD_VAR 0 3
78744: PPUSH
78745: CALL_OW 64
// end ;
78749: PPOPN 3
78751: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
78752: LD_EXP 131
78756: IFFALSE 78872
78758: GO 78760
78760: DISABLE
78761: LD_INT 0
78763: PPUSH
78764: PPUSH
78765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
78766: LD_ADDR_VAR 0 2
78770: PUSH
78771: LD_INT 81
78773: PUSH
78774: LD_OWVAR 2
78778: PUSH
78779: EMPTY
78780: LIST
78781: LIST
78782: PUSH
78783: LD_INT 21
78785: PUSH
78786: LD_INT 1
78788: PUSH
78789: EMPTY
78790: LIST
78791: LIST
78792: PUSH
78793: EMPTY
78794: LIST
78795: LIST
78796: PPUSH
78797: CALL_OW 69
78801: ST_TO_ADDR
// ToLua ( playComputer() ) ;
78802: LD_STRING playComputer()
78804: PPUSH
78805: CALL_OW 559
// if not tmp then
78809: LD_VAR 0 2
78813: NOT
78814: IFFALSE 78818
// exit ;
78816: GO 78872
// for i in tmp do
78818: LD_ADDR_VAR 0 1
78822: PUSH
78823: LD_VAR 0 2
78827: PUSH
78828: FOR_IN
78829: IFFALSE 78870
// for j := 1 to 4 do
78831: LD_ADDR_VAR 0 3
78835: PUSH
78836: DOUBLE
78837: LD_INT 1
78839: DEC
78840: ST_TO_ADDR
78841: LD_INT 4
78843: PUSH
78844: FOR_TO
78845: IFFALSE 78866
// SetSkill ( i , j , 10 ) ;
78847: LD_VAR 0 1
78851: PPUSH
78852: LD_VAR 0 3
78856: PPUSH
78857: LD_INT 10
78859: PPUSH
78860: CALL_OW 237
78864: GO 78844
78866: POP
78867: POP
78868: GO 78828
78870: POP
78871: POP
// end ;
78872: PPOPN 3
78874: END
// every 0 0$1 trigger s30 do var i , tmp ;
78875: LD_EXP 132
78879: IFFALSE 78948
78881: GO 78883
78883: DISABLE
78884: LD_INT 0
78886: PPUSH
78887: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78888: LD_ADDR_VAR 0 2
78892: PUSH
78893: LD_INT 22
78895: PUSH
78896: LD_OWVAR 2
78900: PUSH
78901: EMPTY
78902: LIST
78903: LIST
78904: PPUSH
78905: CALL_OW 69
78909: ST_TO_ADDR
// if not tmp then
78910: LD_VAR 0 2
78914: NOT
78915: IFFALSE 78919
// exit ;
78917: GO 78948
// for i in tmp do
78919: LD_ADDR_VAR 0 1
78923: PUSH
78924: LD_VAR 0 2
78928: PUSH
78929: FOR_IN
78930: IFFALSE 78946
// SetLives ( i , 300 ) ;
78932: LD_VAR 0 1
78936: PPUSH
78937: LD_INT 300
78939: PPUSH
78940: CALL_OW 234
78944: GO 78929
78946: POP
78947: POP
// end ;
78948: PPOPN 2
78950: END
// every 0 0$1 trigger s60 do var i , tmp ;
78951: LD_EXP 133
78955: IFFALSE 79024
78957: GO 78959
78959: DISABLE
78960: LD_INT 0
78962: PPUSH
78963: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78964: LD_ADDR_VAR 0 2
78968: PUSH
78969: LD_INT 22
78971: PUSH
78972: LD_OWVAR 2
78976: PUSH
78977: EMPTY
78978: LIST
78979: LIST
78980: PPUSH
78981: CALL_OW 69
78985: ST_TO_ADDR
// if not tmp then
78986: LD_VAR 0 2
78990: NOT
78991: IFFALSE 78995
// exit ;
78993: GO 79024
// for i in tmp do
78995: LD_ADDR_VAR 0 1
78999: PUSH
79000: LD_VAR 0 2
79004: PUSH
79005: FOR_IN
79006: IFFALSE 79022
// SetLives ( i , 600 ) ;
79008: LD_VAR 0 1
79012: PPUSH
79013: LD_INT 600
79015: PPUSH
79016: CALL_OW 234
79020: GO 79005
79022: POP
79023: POP
// end ;
79024: PPOPN 2
79026: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
79027: LD_INT 0
79029: PPUSH
// case cmd of 301 :
79030: LD_VAR 0 1
79034: PUSH
79035: LD_INT 301
79037: DOUBLE
79038: EQUAL
79039: IFTRUE 79043
79041: GO 79075
79043: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
79044: LD_VAR 0 6
79048: PPUSH
79049: LD_VAR 0 7
79053: PPUSH
79054: LD_VAR 0 8
79058: PPUSH
79059: LD_VAR 0 4
79063: PPUSH
79064: LD_VAR 0 5
79068: PPUSH
79069: CALL 80276 0 5
79073: GO 79196
79075: LD_INT 302
79077: DOUBLE
79078: EQUAL
79079: IFTRUE 79083
79081: GO 79120
79083: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
79084: LD_VAR 0 6
79088: PPUSH
79089: LD_VAR 0 7
79093: PPUSH
79094: LD_VAR 0 8
79098: PPUSH
79099: LD_VAR 0 9
79103: PPUSH
79104: LD_VAR 0 4
79108: PPUSH
79109: LD_VAR 0 5
79113: PPUSH
79114: CALL 80367 0 6
79118: GO 79196
79120: LD_INT 303
79122: DOUBLE
79123: EQUAL
79124: IFTRUE 79128
79126: GO 79165
79128: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
79129: LD_VAR 0 6
79133: PPUSH
79134: LD_VAR 0 7
79138: PPUSH
79139: LD_VAR 0 8
79143: PPUSH
79144: LD_VAR 0 9
79148: PPUSH
79149: LD_VAR 0 4
79153: PPUSH
79154: LD_VAR 0 5
79158: PPUSH
79159: CALL 79201 0 6
79163: GO 79196
79165: LD_INT 304
79167: DOUBLE
79168: EQUAL
79169: IFTRUE 79173
79171: GO 79195
79173: POP
// hHackTeleport ( unit , x , y ) ; end ;
79174: LD_VAR 0 2
79178: PPUSH
79179: LD_VAR 0 4
79183: PPUSH
79184: LD_VAR 0 5
79188: PPUSH
79189: CALL 80960 0 3
79193: GO 79196
79195: POP
// end ;
79196: LD_VAR 0 12
79200: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
79201: LD_INT 0
79203: PPUSH
79204: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
79205: LD_VAR 0 1
79209: PUSH
79210: LD_INT 1
79212: LESS
79213: PUSH
79214: LD_VAR 0 1
79218: PUSH
79219: LD_INT 3
79221: GREATER
79222: OR
79223: PUSH
79224: LD_VAR 0 5
79228: PPUSH
79229: LD_VAR 0 6
79233: PPUSH
79234: CALL_OW 428
79238: OR
79239: IFFALSE 79243
// exit ;
79241: GO 79963
// uc_side := your_side ;
79243: LD_ADDR_OWVAR 20
79247: PUSH
79248: LD_OWVAR 2
79252: ST_TO_ADDR
// uc_nation := nation ;
79253: LD_ADDR_OWVAR 21
79257: PUSH
79258: LD_VAR 0 1
79262: ST_TO_ADDR
// bc_level = 1 ;
79263: LD_ADDR_OWVAR 43
79267: PUSH
79268: LD_INT 1
79270: ST_TO_ADDR
// case btype of 1 :
79271: LD_VAR 0 2
79275: PUSH
79276: LD_INT 1
79278: DOUBLE
79279: EQUAL
79280: IFTRUE 79284
79282: GO 79295
79284: POP
// bc_type := b_depot ; 2 :
79285: LD_ADDR_OWVAR 42
79289: PUSH
79290: LD_INT 0
79292: ST_TO_ADDR
79293: GO 79907
79295: LD_INT 2
79297: DOUBLE
79298: EQUAL
79299: IFTRUE 79303
79301: GO 79314
79303: POP
// bc_type := b_warehouse ; 3 :
79304: LD_ADDR_OWVAR 42
79308: PUSH
79309: LD_INT 1
79311: ST_TO_ADDR
79312: GO 79907
79314: LD_INT 3
79316: DOUBLE
79317: EQUAL
79318: IFTRUE 79322
79320: GO 79333
79322: POP
// bc_type := b_lab ; 4 .. 9 :
79323: LD_ADDR_OWVAR 42
79327: PUSH
79328: LD_INT 6
79330: ST_TO_ADDR
79331: GO 79907
79333: LD_INT 4
79335: DOUBLE
79336: GREATEREQUAL
79337: IFFALSE 79345
79339: LD_INT 9
79341: DOUBLE
79342: LESSEQUAL
79343: IFTRUE 79347
79345: GO 79399
79347: POP
// begin bc_type := b_lab_half ;
79348: LD_ADDR_OWVAR 42
79352: PUSH
79353: LD_INT 7
79355: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
79356: LD_ADDR_OWVAR 44
79360: PUSH
79361: LD_INT 10
79363: PUSH
79364: LD_INT 11
79366: PUSH
79367: LD_INT 12
79369: PUSH
79370: LD_INT 15
79372: PUSH
79373: LD_INT 14
79375: PUSH
79376: LD_INT 13
79378: PUSH
79379: EMPTY
79380: LIST
79381: LIST
79382: LIST
79383: LIST
79384: LIST
79385: LIST
79386: PUSH
79387: LD_VAR 0 2
79391: PUSH
79392: LD_INT 3
79394: MINUS
79395: ARRAY
79396: ST_TO_ADDR
// end ; 10 .. 13 :
79397: GO 79907
79399: LD_INT 10
79401: DOUBLE
79402: GREATEREQUAL
79403: IFFALSE 79411
79405: LD_INT 13
79407: DOUBLE
79408: LESSEQUAL
79409: IFTRUE 79413
79411: GO 79490
79413: POP
// begin bc_type := b_lab_full ;
79414: LD_ADDR_OWVAR 42
79418: PUSH
79419: LD_INT 8
79421: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
79422: LD_ADDR_OWVAR 44
79426: PUSH
79427: LD_INT 10
79429: PUSH
79430: LD_INT 12
79432: PUSH
79433: LD_INT 14
79435: PUSH
79436: LD_INT 13
79438: PUSH
79439: EMPTY
79440: LIST
79441: LIST
79442: LIST
79443: LIST
79444: PUSH
79445: LD_VAR 0 2
79449: PUSH
79450: LD_INT 9
79452: MINUS
79453: ARRAY
79454: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
79455: LD_ADDR_OWVAR 45
79459: PUSH
79460: LD_INT 11
79462: PUSH
79463: LD_INT 15
79465: PUSH
79466: LD_INT 12
79468: PUSH
79469: LD_INT 15
79471: PUSH
79472: EMPTY
79473: LIST
79474: LIST
79475: LIST
79476: LIST
79477: PUSH
79478: LD_VAR 0 2
79482: PUSH
79483: LD_INT 9
79485: MINUS
79486: ARRAY
79487: ST_TO_ADDR
// end ; 14 :
79488: GO 79907
79490: LD_INT 14
79492: DOUBLE
79493: EQUAL
79494: IFTRUE 79498
79496: GO 79509
79498: POP
// bc_type := b_workshop ; 15 :
79499: LD_ADDR_OWVAR 42
79503: PUSH
79504: LD_INT 2
79506: ST_TO_ADDR
79507: GO 79907
79509: LD_INT 15
79511: DOUBLE
79512: EQUAL
79513: IFTRUE 79517
79515: GO 79528
79517: POP
// bc_type := b_factory ; 16 :
79518: LD_ADDR_OWVAR 42
79522: PUSH
79523: LD_INT 3
79525: ST_TO_ADDR
79526: GO 79907
79528: LD_INT 16
79530: DOUBLE
79531: EQUAL
79532: IFTRUE 79536
79534: GO 79547
79536: POP
// bc_type := b_ext_gun ; 17 :
79537: LD_ADDR_OWVAR 42
79541: PUSH
79542: LD_INT 17
79544: ST_TO_ADDR
79545: GO 79907
79547: LD_INT 17
79549: DOUBLE
79550: EQUAL
79551: IFTRUE 79555
79553: GO 79583
79555: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
79556: LD_ADDR_OWVAR 42
79560: PUSH
79561: LD_INT 19
79563: PUSH
79564: LD_INT 23
79566: PUSH
79567: LD_INT 19
79569: PUSH
79570: EMPTY
79571: LIST
79572: LIST
79573: LIST
79574: PUSH
79575: LD_VAR 0 1
79579: ARRAY
79580: ST_TO_ADDR
79581: GO 79907
79583: LD_INT 18
79585: DOUBLE
79586: EQUAL
79587: IFTRUE 79591
79589: GO 79602
79591: POP
// bc_type := b_ext_radar ; 19 :
79592: LD_ADDR_OWVAR 42
79596: PUSH
79597: LD_INT 20
79599: ST_TO_ADDR
79600: GO 79907
79602: LD_INT 19
79604: DOUBLE
79605: EQUAL
79606: IFTRUE 79610
79608: GO 79621
79610: POP
// bc_type := b_ext_radio ; 20 :
79611: LD_ADDR_OWVAR 42
79615: PUSH
79616: LD_INT 22
79618: ST_TO_ADDR
79619: GO 79907
79621: LD_INT 20
79623: DOUBLE
79624: EQUAL
79625: IFTRUE 79629
79627: GO 79640
79629: POP
// bc_type := b_ext_siberium ; 21 :
79630: LD_ADDR_OWVAR 42
79634: PUSH
79635: LD_INT 21
79637: ST_TO_ADDR
79638: GO 79907
79640: LD_INT 21
79642: DOUBLE
79643: EQUAL
79644: IFTRUE 79648
79646: GO 79659
79648: POP
// bc_type := b_ext_computer ; 22 :
79649: LD_ADDR_OWVAR 42
79653: PUSH
79654: LD_INT 24
79656: ST_TO_ADDR
79657: GO 79907
79659: LD_INT 22
79661: DOUBLE
79662: EQUAL
79663: IFTRUE 79667
79665: GO 79678
79667: POP
// bc_type := b_ext_track ; 23 :
79668: LD_ADDR_OWVAR 42
79672: PUSH
79673: LD_INT 16
79675: ST_TO_ADDR
79676: GO 79907
79678: LD_INT 23
79680: DOUBLE
79681: EQUAL
79682: IFTRUE 79686
79684: GO 79697
79686: POP
// bc_type := b_ext_laser ; 24 :
79687: LD_ADDR_OWVAR 42
79691: PUSH
79692: LD_INT 25
79694: ST_TO_ADDR
79695: GO 79907
79697: LD_INT 24
79699: DOUBLE
79700: EQUAL
79701: IFTRUE 79705
79703: GO 79716
79705: POP
// bc_type := b_control_tower ; 25 :
79706: LD_ADDR_OWVAR 42
79710: PUSH
79711: LD_INT 36
79713: ST_TO_ADDR
79714: GO 79907
79716: LD_INT 25
79718: DOUBLE
79719: EQUAL
79720: IFTRUE 79724
79722: GO 79735
79724: POP
// bc_type := b_breastwork ; 26 :
79725: LD_ADDR_OWVAR 42
79729: PUSH
79730: LD_INT 31
79732: ST_TO_ADDR
79733: GO 79907
79735: LD_INT 26
79737: DOUBLE
79738: EQUAL
79739: IFTRUE 79743
79741: GO 79754
79743: POP
// bc_type := b_bunker ; 27 :
79744: LD_ADDR_OWVAR 42
79748: PUSH
79749: LD_INT 32
79751: ST_TO_ADDR
79752: GO 79907
79754: LD_INT 27
79756: DOUBLE
79757: EQUAL
79758: IFTRUE 79762
79760: GO 79773
79762: POP
// bc_type := b_turret ; 28 :
79763: LD_ADDR_OWVAR 42
79767: PUSH
79768: LD_INT 33
79770: ST_TO_ADDR
79771: GO 79907
79773: LD_INT 28
79775: DOUBLE
79776: EQUAL
79777: IFTRUE 79781
79779: GO 79792
79781: POP
// bc_type := b_armoury ; 29 :
79782: LD_ADDR_OWVAR 42
79786: PUSH
79787: LD_INT 4
79789: ST_TO_ADDR
79790: GO 79907
79792: LD_INT 29
79794: DOUBLE
79795: EQUAL
79796: IFTRUE 79800
79798: GO 79811
79800: POP
// bc_type := b_barracks ; 30 :
79801: LD_ADDR_OWVAR 42
79805: PUSH
79806: LD_INT 5
79808: ST_TO_ADDR
79809: GO 79907
79811: LD_INT 30
79813: DOUBLE
79814: EQUAL
79815: IFTRUE 79819
79817: GO 79830
79819: POP
// bc_type := b_solar_power ; 31 :
79820: LD_ADDR_OWVAR 42
79824: PUSH
79825: LD_INT 27
79827: ST_TO_ADDR
79828: GO 79907
79830: LD_INT 31
79832: DOUBLE
79833: EQUAL
79834: IFTRUE 79838
79836: GO 79849
79838: POP
// bc_type := b_oil_power ; 32 :
79839: LD_ADDR_OWVAR 42
79843: PUSH
79844: LD_INT 26
79846: ST_TO_ADDR
79847: GO 79907
79849: LD_INT 32
79851: DOUBLE
79852: EQUAL
79853: IFTRUE 79857
79855: GO 79868
79857: POP
// bc_type := b_siberite_power ; 33 :
79858: LD_ADDR_OWVAR 42
79862: PUSH
79863: LD_INT 28
79865: ST_TO_ADDR
79866: GO 79907
79868: LD_INT 33
79870: DOUBLE
79871: EQUAL
79872: IFTRUE 79876
79874: GO 79887
79876: POP
// bc_type := b_oil_mine ; 34 :
79877: LD_ADDR_OWVAR 42
79881: PUSH
79882: LD_INT 29
79884: ST_TO_ADDR
79885: GO 79907
79887: LD_INT 34
79889: DOUBLE
79890: EQUAL
79891: IFTRUE 79895
79893: GO 79906
79895: POP
// bc_type := b_siberite_mine ; end ;
79896: LD_ADDR_OWVAR 42
79900: PUSH
79901: LD_INT 30
79903: ST_TO_ADDR
79904: GO 79907
79906: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
79907: LD_ADDR_VAR 0 8
79911: PUSH
79912: LD_VAR 0 5
79916: PPUSH
79917: LD_VAR 0 6
79921: PPUSH
79922: LD_VAR 0 3
79926: PPUSH
79927: CALL_OW 47
79931: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
79932: LD_OWVAR 42
79936: PUSH
79937: LD_INT 32
79939: PUSH
79940: LD_INT 33
79942: PUSH
79943: EMPTY
79944: LIST
79945: LIST
79946: IN
79947: IFFALSE 79963
// PlaceWeaponTurret ( b , weapon ) ;
79949: LD_VAR 0 8
79953: PPUSH
79954: LD_VAR 0 4
79958: PPUSH
79959: CALL_OW 431
// end ;
79963: LD_VAR 0 7
79967: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
79968: LD_INT 0
79970: PPUSH
79971: PPUSH
79972: PPUSH
79973: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79974: LD_ADDR_VAR 0 4
79978: PUSH
79979: LD_INT 22
79981: PUSH
79982: LD_OWVAR 2
79986: PUSH
79987: EMPTY
79988: LIST
79989: LIST
79990: PUSH
79991: LD_INT 2
79993: PUSH
79994: LD_INT 30
79996: PUSH
79997: LD_INT 0
79999: PUSH
80000: EMPTY
80001: LIST
80002: LIST
80003: PUSH
80004: LD_INT 30
80006: PUSH
80007: LD_INT 1
80009: PUSH
80010: EMPTY
80011: LIST
80012: LIST
80013: PUSH
80014: EMPTY
80015: LIST
80016: LIST
80017: LIST
80018: PUSH
80019: EMPTY
80020: LIST
80021: LIST
80022: PPUSH
80023: CALL_OW 69
80027: ST_TO_ADDR
// if not tmp then
80028: LD_VAR 0 4
80032: NOT
80033: IFFALSE 80037
// exit ;
80035: GO 80096
// for i in tmp do
80037: LD_ADDR_VAR 0 2
80041: PUSH
80042: LD_VAR 0 4
80046: PUSH
80047: FOR_IN
80048: IFFALSE 80094
// for j = 1 to 3 do
80050: LD_ADDR_VAR 0 3
80054: PUSH
80055: DOUBLE
80056: LD_INT 1
80058: DEC
80059: ST_TO_ADDR
80060: LD_INT 3
80062: PUSH
80063: FOR_TO
80064: IFFALSE 80090
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
80066: LD_VAR 0 2
80070: PPUSH
80071: CALL_OW 274
80075: PPUSH
80076: LD_VAR 0 3
80080: PPUSH
80081: LD_INT 99999
80083: PPUSH
80084: CALL_OW 277
80088: GO 80063
80090: POP
80091: POP
80092: GO 80047
80094: POP
80095: POP
// end ;
80096: LD_VAR 0 1
80100: RET
// export function hHackSetLevel10 ; var i , j ; begin
80101: LD_INT 0
80103: PPUSH
80104: PPUSH
80105: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80106: LD_ADDR_VAR 0 2
80110: PUSH
80111: LD_INT 21
80113: PUSH
80114: LD_INT 1
80116: PUSH
80117: EMPTY
80118: LIST
80119: LIST
80120: PPUSH
80121: CALL_OW 69
80125: PUSH
80126: FOR_IN
80127: IFFALSE 80179
// if IsSelected ( i ) then
80129: LD_VAR 0 2
80133: PPUSH
80134: CALL_OW 306
80138: IFFALSE 80177
// begin for j := 1 to 4 do
80140: LD_ADDR_VAR 0 3
80144: PUSH
80145: DOUBLE
80146: LD_INT 1
80148: DEC
80149: ST_TO_ADDR
80150: LD_INT 4
80152: PUSH
80153: FOR_TO
80154: IFFALSE 80175
// SetSkill ( i , j , 10 ) ;
80156: LD_VAR 0 2
80160: PPUSH
80161: LD_VAR 0 3
80165: PPUSH
80166: LD_INT 10
80168: PPUSH
80169: CALL_OW 237
80173: GO 80153
80175: POP
80176: POP
// end ;
80177: GO 80126
80179: POP
80180: POP
// end ;
80181: LD_VAR 0 1
80185: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
80186: LD_INT 0
80188: PPUSH
80189: PPUSH
80190: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
80191: LD_ADDR_VAR 0 2
80195: PUSH
80196: LD_INT 22
80198: PUSH
80199: LD_OWVAR 2
80203: PUSH
80204: EMPTY
80205: LIST
80206: LIST
80207: PUSH
80208: LD_INT 21
80210: PUSH
80211: LD_INT 1
80213: PUSH
80214: EMPTY
80215: LIST
80216: LIST
80217: PUSH
80218: EMPTY
80219: LIST
80220: LIST
80221: PPUSH
80222: CALL_OW 69
80226: PUSH
80227: FOR_IN
80228: IFFALSE 80269
// begin for j := 1 to 4 do
80230: LD_ADDR_VAR 0 3
80234: PUSH
80235: DOUBLE
80236: LD_INT 1
80238: DEC
80239: ST_TO_ADDR
80240: LD_INT 4
80242: PUSH
80243: FOR_TO
80244: IFFALSE 80265
// SetSkill ( i , j , 10 ) ;
80246: LD_VAR 0 2
80250: PPUSH
80251: LD_VAR 0 3
80255: PPUSH
80256: LD_INT 10
80258: PPUSH
80259: CALL_OW 237
80263: GO 80243
80265: POP
80266: POP
// end ;
80267: GO 80227
80269: POP
80270: POP
// end ;
80271: LD_VAR 0 1
80275: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
80276: LD_INT 0
80278: PPUSH
// uc_side := your_side ;
80279: LD_ADDR_OWVAR 20
80283: PUSH
80284: LD_OWVAR 2
80288: ST_TO_ADDR
// uc_nation := nation ;
80289: LD_ADDR_OWVAR 21
80293: PUSH
80294: LD_VAR 0 1
80298: ST_TO_ADDR
// InitHc ;
80299: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
80303: LD_INT 0
80305: PPUSH
80306: LD_VAR 0 2
80310: PPUSH
80311: LD_VAR 0 3
80315: PPUSH
80316: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
80320: LD_VAR 0 4
80324: PPUSH
80325: LD_VAR 0 5
80329: PPUSH
80330: CALL_OW 428
80334: PUSH
80335: LD_INT 0
80337: EQUAL
80338: IFFALSE 80362
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
80340: CALL_OW 44
80344: PPUSH
80345: LD_VAR 0 4
80349: PPUSH
80350: LD_VAR 0 5
80354: PPUSH
80355: LD_INT 1
80357: PPUSH
80358: CALL_OW 48
// end ;
80362: LD_VAR 0 6
80366: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
80367: LD_INT 0
80369: PPUSH
80370: PPUSH
// uc_side := your_side ;
80371: LD_ADDR_OWVAR 20
80375: PUSH
80376: LD_OWVAR 2
80380: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
80381: LD_VAR 0 1
80385: PUSH
80386: LD_INT 1
80388: PUSH
80389: LD_INT 2
80391: PUSH
80392: LD_INT 3
80394: PUSH
80395: LD_INT 4
80397: PUSH
80398: LD_INT 5
80400: PUSH
80401: EMPTY
80402: LIST
80403: LIST
80404: LIST
80405: LIST
80406: LIST
80407: IN
80408: IFFALSE 80420
// uc_nation := nation_american else
80410: LD_ADDR_OWVAR 21
80414: PUSH
80415: LD_INT 1
80417: ST_TO_ADDR
80418: GO 80463
// if chassis in [ 11 , 12 , 13 , 14 ] then
80420: LD_VAR 0 1
80424: PUSH
80425: LD_INT 11
80427: PUSH
80428: LD_INT 12
80430: PUSH
80431: LD_INT 13
80433: PUSH
80434: LD_INT 14
80436: PUSH
80437: EMPTY
80438: LIST
80439: LIST
80440: LIST
80441: LIST
80442: IN
80443: IFFALSE 80455
// uc_nation := nation_arabian else
80445: LD_ADDR_OWVAR 21
80449: PUSH
80450: LD_INT 2
80452: ST_TO_ADDR
80453: GO 80463
// uc_nation := nation_russian ;
80455: LD_ADDR_OWVAR 21
80459: PUSH
80460: LD_INT 3
80462: ST_TO_ADDR
// vc_chassis := chassis ;
80463: LD_ADDR_OWVAR 37
80467: PUSH
80468: LD_VAR 0 1
80472: ST_TO_ADDR
// vc_engine := engine ;
80473: LD_ADDR_OWVAR 39
80477: PUSH
80478: LD_VAR 0 2
80482: ST_TO_ADDR
// vc_control := control ;
80483: LD_ADDR_OWVAR 38
80487: PUSH
80488: LD_VAR 0 3
80492: ST_TO_ADDR
// vc_weapon := weapon ;
80493: LD_ADDR_OWVAR 40
80497: PUSH
80498: LD_VAR 0 4
80502: ST_TO_ADDR
// un := CreateVehicle ;
80503: LD_ADDR_VAR 0 8
80507: PUSH
80508: CALL_OW 45
80512: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
80513: LD_VAR 0 8
80517: PPUSH
80518: LD_INT 0
80520: PPUSH
80521: LD_INT 5
80523: PPUSH
80524: CALL_OW 12
80528: PPUSH
80529: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
80533: LD_VAR 0 8
80537: PPUSH
80538: LD_VAR 0 5
80542: PPUSH
80543: LD_VAR 0 6
80547: PPUSH
80548: LD_INT 1
80550: PPUSH
80551: CALL_OW 48
// end ;
80555: LD_VAR 0 7
80559: RET
// export hInvincible ; every 1 do
80560: GO 80562
80562: DISABLE
// hInvincible := [ ] ;
80563: LD_ADDR_EXP 134
80567: PUSH
80568: EMPTY
80569: ST_TO_ADDR
80570: END
// every 10 do var i ;
80571: GO 80573
80573: DISABLE
80574: LD_INT 0
80576: PPUSH
// begin enable ;
80577: ENABLE
// if not hInvincible then
80578: LD_EXP 134
80582: NOT
80583: IFFALSE 80587
// exit ;
80585: GO 80631
// for i in hInvincible do
80587: LD_ADDR_VAR 0 1
80591: PUSH
80592: LD_EXP 134
80596: PUSH
80597: FOR_IN
80598: IFFALSE 80629
// if GetLives ( i ) < 1000 then
80600: LD_VAR 0 1
80604: PPUSH
80605: CALL_OW 256
80609: PUSH
80610: LD_INT 1000
80612: LESS
80613: IFFALSE 80627
// SetLives ( i , 1000 ) ;
80615: LD_VAR 0 1
80619: PPUSH
80620: LD_INT 1000
80622: PPUSH
80623: CALL_OW 234
80627: GO 80597
80629: POP
80630: POP
// end ;
80631: PPOPN 1
80633: END
// export function hHackInvincible ; var i ; begin
80634: LD_INT 0
80636: PPUSH
80637: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
80638: LD_ADDR_VAR 0 2
80642: PUSH
80643: LD_INT 2
80645: PUSH
80646: LD_INT 21
80648: PUSH
80649: LD_INT 1
80651: PUSH
80652: EMPTY
80653: LIST
80654: LIST
80655: PUSH
80656: LD_INT 21
80658: PUSH
80659: LD_INT 2
80661: PUSH
80662: EMPTY
80663: LIST
80664: LIST
80665: PUSH
80666: EMPTY
80667: LIST
80668: LIST
80669: LIST
80670: PPUSH
80671: CALL_OW 69
80675: PUSH
80676: FOR_IN
80677: IFFALSE 80738
// if IsSelected ( i ) then
80679: LD_VAR 0 2
80683: PPUSH
80684: CALL_OW 306
80688: IFFALSE 80736
// begin if i in hInvincible then
80690: LD_VAR 0 2
80694: PUSH
80695: LD_EXP 134
80699: IN
80700: IFFALSE 80720
// hInvincible := hInvincible diff i else
80702: LD_ADDR_EXP 134
80706: PUSH
80707: LD_EXP 134
80711: PUSH
80712: LD_VAR 0 2
80716: DIFF
80717: ST_TO_ADDR
80718: GO 80736
// hInvincible := hInvincible union i ;
80720: LD_ADDR_EXP 134
80724: PUSH
80725: LD_EXP 134
80729: PUSH
80730: LD_VAR 0 2
80734: UNION
80735: ST_TO_ADDR
// end ;
80736: GO 80676
80738: POP
80739: POP
// end ;
80740: LD_VAR 0 1
80744: RET
// export function hHackInvisible ; var i , j ; begin
80745: LD_INT 0
80747: PPUSH
80748: PPUSH
80749: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80750: LD_ADDR_VAR 0 2
80754: PUSH
80755: LD_INT 21
80757: PUSH
80758: LD_INT 1
80760: PUSH
80761: EMPTY
80762: LIST
80763: LIST
80764: PPUSH
80765: CALL_OW 69
80769: PUSH
80770: FOR_IN
80771: IFFALSE 80795
// if IsSelected ( i ) then
80773: LD_VAR 0 2
80777: PPUSH
80778: CALL_OW 306
80782: IFFALSE 80793
// ComForceInvisible ( i ) ;
80784: LD_VAR 0 2
80788: PPUSH
80789: CALL_OW 496
80793: GO 80770
80795: POP
80796: POP
// end ;
80797: LD_VAR 0 1
80801: RET
// export function hHackChangeYourSide ; begin
80802: LD_INT 0
80804: PPUSH
// if your_side = 8 then
80805: LD_OWVAR 2
80809: PUSH
80810: LD_INT 8
80812: EQUAL
80813: IFFALSE 80825
// your_side := 0 else
80815: LD_ADDR_OWVAR 2
80819: PUSH
80820: LD_INT 0
80822: ST_TO_ADDR
80823: GO 80839
// your_side := your_side + 1 ;
80825: LD_ADDR_OWVAR 2
80829: PUSH
80830: LD_OWVAR 2
80834: PUSH
80835: LD_INT 1
80837: PLUS
80838: ST_TO_ADDR
// end ;
80839: LD_VAR 0 1
80843: RET
// export function hHackChangeUnitSide ; var i , j ; begin
80844: LD_INT 0
80846: PPUSH
80847: PPUSH
80848: PPUSH
// for i in all_units do
80849: LD_ADDR_VAR 0 2
80853: PUSH
80854: LD_OWVAR 3
80858: PUSH
80859: FOR_IN
80860: IFFALSE 80938
// if IsSelected ( i ) then
80862: LD_VAR 0 2
80866: PPUSH
80867: CALL_OW 306
80871: IFFALSE 80936
// begin j := GetSide ( i ) ;
80873: LD_ADDR_VAR 0 3
80877: PUSH
80878: LD_VAR 0 2
80882: PPUSH
80883: CALL_OW 255
80887: ST_TO_ADDR
// if j = 8 then
80888: LD_VAR 0 3
80892: PUSH
80893: LD_INT 8
80895: EQUAL
80896: IFFALSE 80908
// j := 0 else
80898: LD_ADDR_VAR 0 3
80902: PUSH
80903: LD_INT 0
80905: ST_TO_ADDR
80906: GO 80922
// j := j + 1 ;
80908: LD_ADDR_VAR 0 3
80912: PUSH
80913: LD_VAR 0 3
80917: PUSH
80918: LD_INT 1
80920: PLUS
80921: ST_TO_ADDR
// SetSide ( i , j ) ;
80922: LD_VAR 0 2
80926: PPUSH
80927: LD_VAR 0 3
80931: PPUSH
80932: CALL_OW 235
// end ;
80936: GO 80859
80938: POP
80939: POP
// end ;
80940: LD_VAR 0 1
80944: RET
// export function hHackFog ; begin
80945: LD_INT 0
80947: PPUSH
// FogOff ( true ) ;
80948: LD_INT 1
80950: PPUSH
80951: CALL_OW 344
// end ;
80955: LD_VAR 0 1
80959: RET
// export function hHackTeleport ( unit , x , y ) ; begin
80960: LD_INT 0
80962: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
80963: LD_VAR 0 1
80967: PPUSH
80968: LD_VAR 0 2
80972: PPUSH
80973: LD_VAR 0 3
80977: PPUSH
80978: LD_INT 1
80980: PPUSH
80981: LD_INT 1
80983: PPUSH
80984: CALL_OW 483
// CenterOnXY ( x , y ) ;
80988: LD_VAR 0 2
80992: PPUSH
80993: LD_VAR 0 3
80997: PPUSH
80998: CALL_OW 84
// end ;
81002: LD_VAR 0 4
81006: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
81007: LD_INT 0
81009: PPUSH
81010: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
81011: LD_VAR 0 1
81015: NOT
81016: PUSH
81017: LD_VAR 0 2
81021: PPUSH
81022: LD_VAR 0 3
81026: PPUSH
81027: CALL_OW 488
81031: NOT
81032: OR
81033: PUSH
81034: LD_VAR 0 1
81038: PPUSH
81039: CALL_OW 266
81043: PUSH
81044: LD_INT 3
81046: NONEQUAL
81047: PUSH
81048: LD_VAR 0 1
81052: PPUSH
81053: CALL_OW 247
81057: PUSH
81058: LD_INT 1
81060: EQUAL
81061: NOT
81062: AND
81063: OR
81064: IFFALSE 81068
// exit ;
81066: GO 81217
// if GetType ( factory ) = unit_human then
81068: LD_VAR 0 1
81072: PPUSH
81073: CALL_OW 247
81077: PUSH
81078: LD_INT 1
81080: EQUAL
81081: IFFALSE 81098
// factory := IsInUnit ( factory ) ;
81083: LD_ADDR_VAR 0 1
81087: PUSH
81088: LD_VAR 0 1
81092: PPUSH
81093: CALL_OW 310
81097: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
81098: LD_VAR 0 1
81102: PPUSH
81103: CALL_OW 266
81107: PUSH
81108: LD_INT 3
81110: NONEQUAL
81111: IFFALSE 81115
// exit ;
81113: GO 81217
// if HexInfo ( x , y ) = factory then
81115: LD_VAR 0 2
81119: PPUSH
81120: LD_VAR 0 3
81124: PPUSH
81125: CALL_OW 428
81129: PUSH
81130: LD_VAR 0 1
81134: EQUAL
81135: IFFALSE 81162
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
81137: LD_ADDR_EXP 135
81141: PUSH
81142: LD_EXP 135
81146: PPUSH
81147: LD_VAR 0 1
81151: PPUSH
81152: LD_INT 0
81154: PPUSH
81155: CALL_OW 1
81159: ST_TO_ADDR
81160: GO 81213
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
81162: LD_ADDR_EXP 135
81166: PUSH
81167: LD_EXP 135
81171: PPUSH
81172: LD_VAR 0 1
81176: PPUSH
81177: LD_VAR 0 1
81181: PPUSH
81182: CALL_OW 255
81186: PUSH
81187: LD_VAR 0 1
81191: PUSH
81192: LD_VAR 0 2
81196: PUSH
81197: LD_VAR 0 3
81201: PUSH
81202: EMPTY
81203: LIST
81204: LIST
81205: LIST
81206: LIST
81207: PPUSH
81208: CALL_OW 1
81212: ST_TO_ADDR
// UpdateFactoryWaypoints ;
81213: CALL 81222 0 0
// end ;
81217: LD_VAR 0 4
81221: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
81222: LD_INT 0
81224: PPUSH
81225: PPUSH
81226: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
81227: LD_STRING resetFactoryWaypoint();
81229: PPUSH
81230: CALL_OW 559
// if factoryWaypoints then
81234: LD_EXP 135
81238: IFFALSE 81364
// begin list := PrepareArray ( factoryWaypoints ) ;
81240: LD_ADDR_VAR 0 3
81244: PUSH
81245: LD_EXP 135
81249: PPUSH
81250: CALL 66458 0 1
81254: ST_TO_ADDR
// for i := 1 to list do
81255: LD_ADDR_VAR 0 2
81259: PUSH
81260: DOUBLE
81261: LD_INT 1
81263: DEC
81264: ST_TO_ADDR
81265: LD_VAR 0 3
81269: PUSH
81270: FOR_TO
81271: IFFALSE 81362
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
81273: LD_STRING setFactoryWaypointXY(
81275: PUSH
81276: LD_VAR 0 3
81280: PUSH
81281: LD_VAR 0 2
81285: ARRAY
81286: PUSH
81287: LD_INT 1
81289: ARRAY
81290: STR
81291: PUSH
81292: LD_STRING ,
81294: STR
81295: PUSH
81296: LD_VAR 0 3
81300: PUSH
81301: LD_VAR 0 2
81305: ARRAY
81306: PUSH
81307: LD_INT 2
81309: ARRAY
81310: STR
81311: PUSH
81312: LD_STRING ,
81314: STR
81315: PUSH
81316: LD_VAR 0 3
81320: PUSH
81321: LD_VAR 0 2
81325: ARRAY
81326: PUSH
81327: LD_INT 3
81329: ARRAY
81330: STR
81331: PUSH
81332: LD_STRING ,
81334: STR
81335: PUSH
81336: LD_VAR 0 3
81340: PUSH
81341: LD_VAR 0 2
81345: ARRAY
81346: PUSH
81347: LD_INT 4
81349: ARRAY
81350: STR
81351: PUSH
81352: LD_STRING )
81354: STR
81355: PPUSH
81356: CALL_OW 559
81360: GO 81270
81362: POP
81363: POP
// end ; end ;
81364: LD_VAR 0 1
81368: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
81369: LD_INT 0
81371: PPUSH
// if HexInfo ( x , y ) = warehouse then
81372: LD_VAR 0 2
81376: PPUSH
81377: LD_VAR 0 3
81381: PPUSH
81382: CALL_OW 428
81386: PUSH
81387: LD_VAR 0 1
81391: EQUAL
81392: IFFALSE 81419
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
81394: LD_ADDR_EXP 136
81398: PUSH
81399: LD_EXP 136
81403: PPUSH
81404: LD_VAR 0 1
81408: PPUSH
81409: LD_INT 0
81411: PPUSH
81412: CALL_OW 1
81416: ST_TO_ADDR
81417: GO 81470
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
81419: LD_ADDR_EXP 136
81423: PUSH
81424: LD_EXP 136
81428: PPUSH
81429: LD_VAR 0 1
81433: PPUSH
81434: LD_VAR 0 1
81438: PPUSH
81439: CALL_OW 255
81443: PUSH
81444: LD_VAR 0 1
81448: PUSH
81449: LD_VAR 0 2
81453: PUSH
81454: LD_VAR 0 3
81458: PUSH
81459: EMPTY
81460: LIST
81461: LIST
81462: LIST
81463: LIST
81464: PPUSH
81465: CALL_OW 1
81469: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
81470: CALL 81479 0 0
// end ;
81474: LD_VAR 0 4
81478: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
81479: LD_INT 0
81481: PPUSH
81482: PPUSH
81483: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
81484: LD_STRING resetWarehouseGatheringPoints();
81486: PPUSH
81487: CALL_OW 559
// if warehouseGatheringPoints then
81491: LD_EXP 136
81495: IFFALSE 81621
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
81497: LD_ADDR_VAR 0 3
81501: PUSH
81502: LD_EXP 136
81506: PPUSH
81507: CALL 66458 0 1
81511: ST_TO_ADDR
// for i := 1 to list do
81512: LD_ADDR_VAR 0 2
81516: PUSH
81517: DOUBLE
81518: LD_INT 1
81520: DEC
81521: ST_TO_ADDR
81522: LD_VAR 0 3
81526: PUSH
81527: FOR_TO
81528: IFFALSE 81619
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
81530: LD_STRING setWarehouseGatheringPointXY(
81532: PUSH
81533: LD_VAR 0 3
81537: PUSH
81538: LD_VAR 0 2
81542: ARRAY
81543: PUSH
81544: LD_INT 1
81546: ARRAY
81547: STR
81548: PUSH
81549: LD_STRING ,
81551: STR
81552: PUSH
81553: LD_VAR 0 3
81557: PUSH
81558: LD_VAR 0 2
81562: ARRAY
81563: PUSH
81564: LD_INT 2
81566: ARRAY
81567: STR
81568: PUSH
81569: LD_STRING ,
81571: STR
81572: PUSH
81573: LD_VAR 0 3
81577: PUSH
81578: LD_VAR 0 2
81582: ARRAY
81583: PUSH
81584: LD_INT 3
81586: ARRAY
81587: STR
81588: PUSH
81589: LD_STRING ,
81591: STR
81592: PUSH
81593: LD_VAR 0 3
81597: PUSH
81598: LD_VAR 0 2
81602: ARRAY
81603: PUSH
81604: LD_INT 4
81606: ARRAY
81607: STR
81608: PUSH
81609: LD_STRING )
81611: STR
81612: PPUSH
81613: CALL_OW 559
81617: GO 81527
81619: POP
81620: POP
// end ; end ;
81621: LD_VAR 0 1
81625: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
81626: LD_EXP 136
81630: IFFALSE 82317
81632: GO 81634
81634: DISABLE
81635: LD_INT 0
81637: PPUSH
81638: PPUSH
81639: PPUSH
81640: PPUSH
81641: PPUSH
81642: PPUSH
81643: PPUSH
81644: PPUSH
81645: PPUSH
// begin enable ;
81646: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
81647: LD_ADDR_VAR 0 3
81651: PUSH
81652: LD_EXP 136
81656: PPUSH
81657: CALL 66458 0 1
81661: ST_TO_ADDR
// if not list then
81662: LD_VAR 0 3
81666: NOT
81667: IFFALSE 81671
// exit ;
81669: GO 82317
// for i := 1 to list do
81671: LD_ADDR_VAR 0 1
81675: PUSH
81676: DOUBLE
81677: LD_INT 1
81679: DEC
81680: ST_TO_ADDR
81681: LD_VAR 0 3
81685: PUSH
81686: FOR_TO
81687: IFFALSE 82315
// begin depot := list [ i ] [ 2 ] ;
81689: LD_ADDR_VAR 0 8
81693: PUSH
81694: LD_VAR 0 3
81698: PUSH
81699: LD_VAR 0 1
81703: ARRAY
81704: PUSH
81705: LD_INT 2
81707: ARRAY
81708: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
81709: LD_ADDR_VAR 0 5
81713: PUSH
81714: LD_VAR 0 3
81718: PUSH
81719: LD_VAR 0 1
81723: ARRAY
81724: PUSH
81725: LD_INT 1
81727: ARRAY
81728: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
81729: LD_VAR 0 8
81733: PPUSH
81734: CALL_OW 301
81738: PUSH
81739: LD_VAR 0 5
81743: PUSH
81744: LD_VAR 0 8
81748: PPUSH
81749: CALL_OW 255
81753: NONEQUAL
81754: OR
81755: IFFALSE 81784
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
81757: LD_ADDR_EXP 136
81761: PUSH
81762: LD_EXP 136
81766: PPUSH
81767: LD_VAR 0 8
81771: PPUSH
81772: LD_INT 0
81774: PPUSH
81775: CALL_OW 1
81779: ST_TO_ADDR
// exit ;
81780: POP
81781: POP
81782: GO 82317
// end ; x := list [ i ] [ 3 ] ;
81784: LD_ADDR_VAR 0 6
81788: PUSH
81789: LD_VAR 0 3
81793: PUSH
81794: LD_VAR 0 1
81798: ARRAY
81799: PUSH
81800: LD_INT 3
81802: ARRAY
81803: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
81804: LD_ADDR_VAR 0 7
81808: PUSH
81809: LD_VAR 0 3
81813: PUSH
81814: LD_VAR 0 1
81818: ARRAY
81819: PUSH
81820: LD_INT 4
81822: ARRAY
81823: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
81824: LD_ADDR_VAR 0 9
81828: PUSH
81829: LD_VAR 0 6
81833: PPUSH
81834: LD_VAR 0 7
81838: PPUSH
81839: LD_INT 16
81841: PPUSH
81842: CALL 65042 0 3
81846: ST_TO_ADDR
// if not cratesNearbyPoint then
81847: LD_VAR 0 9
81851: NOT
81852: IFFALSE 81858
// exit ;
81854: POP
81855: POP
81856: GO 82317
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
81858: LD_ADDR_VAR 0 4
81862: PUSH
81863: LD_INT 22
81865: PUSH
81866: LD_VAR 0 5
81870: PUSH
81871: EMPTY
81872: LIST
81873: LIST
81874: PUSH
81875: LD_INT 3
81877: PUSH
81878: LD_INT 60
81880: PUSH
81881: EMPTY
81882: LIST
81883: PUSH
81884: EMPTY
81885: LIST
81886: LIST
81887: PUSH
81888: LD_INT 91
81890: PUSH
81891: LD_VAR 0 8
81895: PUSH
81896: LD_INT 6
81898: PUSH
81899: EMPTY
81900: LIST
81901: LIST
81902: LIST
81903: PUSH
81904: LD_INT 2
81906: PUSH
81907: LD_INT 25
81909: PUSH
81910: LD_INT 2
81912: PUSH
81913: EMPTY
81914: LIST
81915: LIST
81916: PUSH
81917: LD_INT 25
81919: PUSH
81920: LD_INT 16
81922: PUSH
81923: EMPTY
81924: LIST
81925: LIST
81926: PUSH
81927: EMPTY
81928: LIST
81929: LIST
81930: LIST
81931: PUSH
81932: EMPTY
81933: LIST
81934: LIST
81935: LIST
81936: LIST
81937: PPUSH
81938: CALL_OW 69
81942: PUSH
81943: LD_VAR 0 8
81947: PPUSH
81948: CALL_OW 313
81952: PPUSH
81953: LD_INT 3
81955: PUSH
81956: LD_INT 60
81958: PUSH
81959: EMPTY
81960: LIST
81961: PUSH
81962: EMPTY
81963: LIST
81964: LIST
81965: PUSH
81966: LD_INT 2
81968: PUSH
81969: LD_INT 25
81971: PUSH
81972: LD_INT 2
81974: PUSH
81975: EMPTY
81976: LIST
81977: LIST
81978: PUSH
81979: LD_INT 25
81981: PUSH
81982: LD_INT 16
81984: PUSH
81985: EMPTY
81986: LIST
81987: LIST
81988: PUSH
81989: EMPTY
81990: LIST
81991: LIST
81992: LIST
81993: PUSH
81994: EMPTY
81995: LIST
81996: LIST
81997: PPUSH
81998: CALL_OW 72
82002: UNION
82003: ST_TO_ADDR
// if tmp then
82004: LD_VAR 0 4
82008: IFFALSE 82088
// begin tmp := ShrinkArray ( tmp , 3 ) ;
82010: LD_ADDR_VAR 0 4
82014: PUSH
82015: LD_VAR 0 4
82019: PPUSH
82020: LD_INT 3
82022: PPUSH
82023: CALL 63009 0 2
82027: ST_TO_ADDR
// for j in tmp do
82028: LD_ADDR_VAR 0 2
82032: PUSH
82033: LD_VAR 0 4
82037: PUSH
82038: FOR_IN
82039: IFFALSE 82082
// begin if IsInUnit ( j ) then
82041: LD_VAR 0 2
82045: PPUSH
82046: CALL_OW 310
82050: IFFALSE 82061
// ComExit ( j ) ;
82052: LD_VAR 0 2
82056: PPUSH
82057: CALL 63092 0 1
// AddComCollect ( j , x , y ) ;
82061: LD_VAR 0 2
82065: PPUSH
82066: LD_VAR 0 6
82070: PPUSH
82071: LD_VAR 0 7
82075: PPUSH
82076: CALL_OW 177
// end ;
82080: GO 82038
82082: POP
82083: POP
// exit ;
82084: POP
82085: POP
82086: GO 82317
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
82088: LD_ADDR_VAR 0 4
82092: PUSH
82093: LD_INT 22
82095: PUSH
82096: LD_VAR 0 5
82100: PUSH
82101: EMPTY
82102: LIST
82103: LIST
82104: PUSH
82105: LD_INT 91
82107: PUSH
82108: LD_VAR 0 8
82112: PUSH
82113: LD_INT 8
82115: PUSH
82116: EMPTY
82117: LIST
82118: LIST
82119: LIST
82120: PUSH
82121: LD_INT 2
82123: PUSH
82124: LD_INT 34
82126: PUSH
82127: LD_INT 12
82129: PUSH
82130: EMPTY
82131: LIST
82132: LIST
82133: PUSH
82134: LD_INT 34
82136: PUSH
82137: LD_INT 51
82139: PUSH
82140: EMPTY
82141: LIST
82142: LIST
82143: PUSH
82144: LD_INT 34
82146: PUSH
82147: LD_INT 32
82149: PUSH
82150: EMPTY
82151: LIST
82152: LIST
82153: PUSH
82154: LD_INT 34
82156: PUSH
82157: LD_EXP 60
82161: PUSH
82162: EMPTY
82163: LIST
82164: LIST
82165: PUSH
82166: EMPTY
82167: LIST
82168: LIST
82169: LIST
82170: LIST
82171: LIST
82172: PUSH
82173: EMPTY
82174: LIST
82175: LIST
82176: LIST
82177: PPUSH
82178: CALL_OW 69
82182: ST_TO_ADDR
// if tmp then
82183: LD_VAR 0 4
82187: IFFALSE 82313
// begin for j in tmp do
82189: LD_ADDR_VAR 0 2
82193: PUSH
82194: LD_VAR 0 4
82198: PUSH
82199: FOR_IN
82200: IFFALSE 82311
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
82202: LD_VAR 0 2
82206: PPUSH
82207: CALL_OW 262
82211: PUSH
82212: LD_INT 3
82214: EQUAL
82215: PUSH
82216: LD_VAR 0 2
82220: PPUSH
82221: CALL_OW 261
82225: PUSH
82226: LD_INT 20
82228: GREATER
82229: OR
82230: PUSH
82231: LD_VAR 0 2
82235: PPUSH
82236: CALL_OW 314
82240: NOT
82241: AND
82242: PUSH
82243: LD_VAR 0 2
82247: PPUSH
82248: CALL_OW 263
82252: PUSH
82253: LD_INT 1
82255: NONEQUAL
82256: PUSH
82257: LD_VAR 0 2
82261: PPUSH
82262: CALL_OW 311
82266: OR
82267: AND
82268: IFFALSE 82309
// begin ComCollect ( j , x , y ) ;
82270: LD_VAR 0 2
82274: PPUSH
82275: LD_VAR 0 6
82279: PPUSH
82280: LD_VAR 0 7
82284: PPUSH
82285: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
82289: LD_VAR 0 2
82293: PPUSH
82294: LD_VAR 0 8
82298: PPUSH
82299: CALL_OW 172
// exit ;
82303: POP
82304: POP
82305: POP
82306: POP
82307: GO 82317
// end ;
82309: GO 82199
82311: POP
82312: POP
// end ; end ;
82313: GO 81686
82315: POP
82316: POP
// end ; end_of_file
82317: PPOPN 9
82319: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82320: LD_VAR 0 1
82324: PUSH
82325: LD_INT 200
82327: DOUBLE
82328: GREATEREQUAL
82329: IFFALSE 82337
82331: LD_INT 299
82333: DOUBLE
82334: LESSEQUAL
82335: IFTRUE 82339
82337: GO 82371
82339: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82340: LD_VAR 0 1
82344: PPUSH
82345: LD_VAR 0 2
82349: PPUSH
82350: LD_VAR 0 3
82354: PPUSH
82355: LD_VAR 0 4
82359: PPUSH
82360: LD_VAR 0 5
82364: PPUSH
82365: CALL 82861 0 5
82369: GO 82448
82371: LD_INT 300
82373: DOUBLE
82374: GREATEREQUAL
82375: IFFALSE 82383
82377: LD_INT 399
82379: DOUBLE
82380: LESSEQUAL
82381: IFTRUE 82385
82383: GO 82447
82385: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82386: LD_VAR 0 1
82390: PPUSH
82391: LD_VAR 0 2
82395: PPUSH
82396: LD_VAR 0 3
82400: PPUSH
82401: LD_VAR 0 4
82405: PPUSH
82406: LD_VAR 0 5
82410: PPUSH
82411: LD_VAR 0 6
82415: PPUSH
82416: LD_VAR 0 7
82420: PPUSH
82421: LD_VAR 0 8
82425: PPUSH
82426: LD_VAR 0 9
82430: PPUSH
82431: LD_VAR 0 10
82435: PPUSH
82436: LD_VAR 0 11
82440: PPUSH
82441: CALL 79027 0 11
82445: GO 82448
82447: POP
// end ;
82448: PPOPN 11
82450: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82451: LD_VAR 0 1
82455: PPUSH
82456: LD_VAR 0 2
82460: PPUSH
82461: LD_VAR 0 3
82465: PPUSH
82466: LD_VAR 0 4
82470: PPUSH
82471: LD_VAR 0 5
82475: PPUSH
82476: CALL 82597 0 5
// end ; end_of_file
82480: PPOPN 5
82482: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
82483: LD_INT 0
82485: PPUSH
82486: PPUSH
82487: PPUSH
82488: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
82489: LD_VAR 0 1
82493: PPUSH
82494: CALL_OW 264
82498: PUSH
82499: LD_EXP 63
82503: EQUAL
82504: IFFALSE 82576
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
82506: LD_INT 68
82508: PPUSH
82509: LD_VAR 0 1
82513: PPUSH
82514: CALL_OW 255
82518: PPUSH
82519: CALL_OW 321
82523: PUSH
82524: LD_INT 2
82526: EQUAL
82527: IFFALSE 82539
// eff := 70 else
82529: LD_ADDR_VAR 0 4
82533: PUSH
82534: LD_INT 70
82536: ST_TO_ADDR
82537: GO 82547
// eff := 30 ;
82539: LD_ADDR_VAR 0 4
82543: PUSH
82544: LD_INT 30
82546: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
82547: LD_VAR 0 1
82551: PPUSH
82552: CALL_OW 250
82556: PPUSH
82557: LD_VAR 0 1
82561: PPUSH
82562: CALL_OW 251
82566: PPUSH
82567: LD_VAR 0 4
82571: PPUSH
82572: CALL_OW 495
// end ; end ;
82576: LD_VAR 0 2
82580: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
82581: LD_INT 0
82583: PPUSH
// end ;
82584: LD_VAR 0 4
82588: RET
// export function SOS_Command ( cmd ) ; begin
82589: LD_INT 0
82591: PPUSH
// end ;
82592: LD_VAR 0 2
82596: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
82597: LD_INT 0
82599: PPUSH
// end ;
82600: LD_VAR 0 6
82604: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
82605: LD_INT 0
82607: PPUSH
82608: PPUSH
// if not vehicle or not factory then
82609: LD_VAR 0 1
82613: NOT
82614: PUSH
82615: LD_VAR 0 2
82619: NOT
82620: OR
82621: IFFALSE 82625
// exit ;
82623: GO 82856
// if factoryWaypoints >= factory then
82625: LD_EXP 135
82629: PUSH
82630: LD_VAR 0 2
82634: GREATEREQUAL
82635: IFFALSE 82856
// if factoryWaypoints [ factory ] then
82637: LD_EXP 135
82641: PUSH
82642: LD_VAR 0 2
82646: ARRAY
82647: IFFALSE 82856
// begin if GetControl ( vehicle ) = control_manual then
82649: LD_VAR 0 1
82653: PPUSH
82654: CALL_OW 263
82658: PUSH
82659: LD_INT 1
82661: EQUAL
82662: IFFALSE 82743
// begin driver := IsDrivenBy ( vehicle ) ;
82664: LD_ADDR_VAR 0 4
82668: PUSH
82669: LD_VAR 0 1
82673: PPUSH
82674: CALL_OW 311
82678: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
82679: LD_VAR 0 4
82683: PPUSH
82684: LD_EXP 135
82688: PUSH
82689: LD_VAR 0 2
82693: ARRAY
82694: PUSH
82695: LD_INT 3
82697: ARRAY
82698: PPUSH
82699: LD_EXP 135
82703: PUSH
82704: LD_VAR 0 2
82708: ARRAY
82709: PUSH
82710: LD_INT 4
82712: ARRAY
82713: PPUSH
82714: CALL_OW 171
// AddComExitVehicle ( driver ) ;
82718: LD_VAR 0 4
82722: PPUSH
82723: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
82727: LD_VAR 0 4
82731: PPUSH
82732: LD_VAR 0 2
82736: PPUSH
82737: CALL_OW 180
// end else
82741: GO 82856
// if GetControl ( vehicle ) = control_remote then
82743: LD_VAR 0 1
82747: PPUSH
82748: CALL_OW 263
82752: PUSH
82753: LD_INT 2
82755: EQUAL
82756: IFFALSE 82817
// begin wait ( 0 0$2 ) ;
82758: LD_INT 70
82760: PPUSH
82761: CALL_OW 67
// if Connect ( vehicle ) then
82765: LD_VAR 0 1
82769: PPUSH
82770: CALL 33403 0 1
82774: IFFALSE 82815
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
82776: LD_VAR 0 1
82780: PPUSH
82781: LD_EXP 135
82785: PUSH
82786: LD_VAR 0 2
82790: ARRAY
82791: PUSH
82792: LD_INT 3
82794: ARRAY
82795: PPUSH
82796: LD_EXP 135
82800: PUSH
82801: LD_VAR 0 2
82805: ARRAY
82806: PUSH
82807: LD_INT 4
82809: ARRAY
82810: PPUSH
82811: CALL_OW 171
// end else
82815: GO 82856
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
82817: LD_VAR 0 1
82821: PPUSH
82822: LD_EXP 135
82826: PUSH
82827: LD_VAR 0 2
82831: ARRAY
82832: PUSH
82833: LD_INT 3
82835: ARRAY
82836: PPUSH
82837: LD_EXP 135
82841: PUSH
82842: LD_VAR 0 2
82846: ARRAY
82847: PUSH
82848: LD_INT 4
82850: ARRAY
82851: PPUSH
82852: CALL_OW 171
// end ; end ;
82856: LD_VAR 0 3
82860: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
82861: LD_INT 0
82863: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
82864: LD_VAR 0 1
82868: PUSH
82869: LD_INT 250
82871: EQUAL
82872: PUSH
82873: LD_VAR 0 2
82877: PPUSH
82878: CALL_OW 264
82882: PUSH
82883: LD_EXP 66
82887: EQUAL
82888: AND
82889: IFFALSE 82910
// MinerPlaceMine ( unit , x , y ) ;
82891: LD_VAR 0 2
82895: PPUSH
82896: LD_VAR 0 4
82900: PPUSH
82901: LD_VAR 0 5
82905: PPUSH
82906: CALL 85309 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
82910: LD_VAR 0 1
82914: PUSH
82915: LD_INT 251
82917: EQUAL
82918: PUSH
82919: LD_VAR 0 2
82923: PPUSH
82924: CALL_OW 264
82928: PUSH
82929: LD_EXP 66
82933: EQUAL
82934: AND
82935: IFFALSE 82956
// MinerDetonateMine ( unit , x , y ) ;
82937: LD_VAR 0 2
82941: PPUSH
82942: LD_VAR 0 4
82946: PPUSH
82947: LD_VAR 0 5
82951: PPUSH
82952: CALL 85586 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
82956: LD_VAR 0 1
82960: PUSH
82961: LD_INT 252
82963: EQUAL
82964: PUSH
82965: LD_VAR 0 2
82969: PPUSH
82970: CALL_OW 264
82974: PUSH
82975: LD_EXP 66
82979: EQUAL
82980: AND
82981: IFFALSE 83002
// MinerCreateMinefield ( unit , x , y ) ;
82983: LD_VAR 0 2
82987: PPUSH
82988: LD_VAR 0 4
82992: PPUSH
82993: LD_VAR 0 5
82997: PPUSH
82998: CALL 86003 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
83002: LD_VAR 0 1
83006: PUSH
83007: LD_INT 253
83009: EQUAL
83010: PUSH
83011: LD_VAR 0 2
83015: PPUSH
83016: CALL_OW 257
83020: PUSH
83021: LD_INT 5
83023: EQUAL
83024: AND
83025: IFFALSE 83046
// ComBinocular ( unit , x , y ) ;
83027: LD_VAR 0 2
83031: PPUSH
83032: LD_VAR 0 4
83036: PPUSH
83037: LD_VAR 0 5
83041: PPUSH
83042: CALL 86374 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
83046: LD_VAR 0 1
83050: PUSH
83051: LD_INT 254
83053: EQUAL
83054: PUSH
83055: LD_VAR 0 2
83059: PPUSH
83060: CALL_OW 264
83064: PUSH
83065: LD_EXP 61
83069: EQUAL
83070: AND
83071: PUSH
83072: LD_VAR 0 3
83076: PPUSH
83077: CALL_OW 263
83081: PUSH
83082: LD_INT 3
83084: EQUAL
83085: AND
83086: IFFALSE 83102
// HackDestroyVehicle ( unit , selectedUnit ) ;
83088: LD_VAR 0 2
83092: PPUSH
83093: LD_VAR 0 3
83097: PPUSH
83098: CALL 84669 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
83102: LD_VAR 0 1
83106: PUSH
83107: LD_INT 255
83109: EQUAL
83110: PUSH
83111: LD_VAR 0 2
83115: PPUSH
83116: CALL_OW 264
83120: PUSH
83121: LD_INT 14
83123: PUSH
83124: LD_INT 53
83126: PUSH
83127: EMPTY
83128: LIST
83129: LIST
83130: IN
83131: AND
83132: PUSH
83133: LD_VAR 0 4
83137: PPUSH
83138: LD_VAR 0 5
83142: PPUSH
83143: CALL_OW 488
83147: AND
83148: IFFALSE 83172
// CutTreeXYR ( unit , x , y , 12 ) ;
83150: LD_VAR 0 2
83154: PPUSH
83155: LD_VAR 0 4
83159: PPUSH
83160: LD_VAR 0 5
83164: PPUSH
83165: LD_INT 12
83167: PPUSH
83168: CALL 83235 0 4
// if cmd = 256 then
83172: LD_VAR 0 1
83176: PUSH
83177: LD_INT 256
83179: EQUAL
83180: IFFALSE 83201
// SetFactoryWaypoint ( unit , x , y ) ;
83182: LD_VAR 0 2
83186: PPUSH
83187: LD_VAR 0 4
83191: PPUSH
83192: LD_VAR 0 5
83196: PPUSH
83197: CALL 81007 0 3
// if cmd = 257 then
83201: LD_VAR 0 1
83205: PUSH
83206: LD_INT 257
83208: EQUAL
83209: IFFALSE 83230
// SetWarehouseGatheringPoint ( unit , x , y ) ;
83211: LD_VAR 0 2
83215: PPUSH
83216: LD_VAR 0 4
83220: PPUSH
83221: LD_VAR 0 5
83225: PPUSH
83226: CALL 81369 0 3
// end ;
83230: LD_VAR 0 6
83234: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
83235: LD_INT 0
83237: PPUSH
83238: PPUSH
83239: PPUSH
83240: PPUSH
83241: PPUSH
83242: PPUSH
83243: PPUSH
83244: PPUSH
83245: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
83246: LD_VAR 0 1
83250: NOT
83251: PUSH
83252: LD_VAR 0 2
83256: PPUSH
83257: LD_VAR 0 3
83261: PPUSH
83262: CALL_OW 488
83266: NOT
83267: OR
83268: PUSH
83269: LD_VAR 0 4
83273: NOT
83274: OR
83275: IFFALSE 83279
// exit ;
83277: GO 83619
// list := [ ] ;
83279: LD_ADDR_VAR 0 13
83283: PUSH
83284: EMPTY
83285: ST_TO_ADDR
// if x - r < 0 then
83286: LD_VAR 0 2
83290: PUSH
83291: LD_VAR 0 4
83295: MINUS
83296: PUSH
83297: LD_INT 0
83299: LESS
83300: IFFALSE 83312
// min_x := 0 else
83302: LD_ADDR_VAR 0 7
83306: PUSH
83307: LD_INT 0
83309: ST_TO_ADDR
83310: GO 83328
// min_x := x - r ;
83312: LD_ADDR_VAR 0 7
83316: PUSH
83317: LD_VAR 0 2
83321: PUSH
83322: LD_VAR 0 4
83326: MINUS
83327: ST_TO_ADDR
// if y - r < 0 then
83328: LD_VAR 0 3
83332: PUSH
83333: LD_VAR 0 4
83337: MINUS
83338: PUSH
83339: LD_INT 0
83341: LESS
83342: IFFALSE 83354
// min_y := 0 else
83344: LD_ADDR_VAR 0 8
83348: PUSH
83349: LD_INT 0
83351: ST_TO_ADDR
83352: GO 83370
// min_y := y - r ;
83354: LD_ADDR_VAR 0 8
83358: PUSH
83359: LD_VAR 0 3
83363: PUSH
83364: LD_VAR 0 4
83368: MINUS
83369: ST_TO_ADDR
// max_x := x + r ;
83370: LD_ADDR_VAR 0 9
83374: PUSH
83375: LD_VAR 0 2
83379: PUSH
83380: LD_VAR 0 4
83384: PLUS
83385: ST_TO_ADDR
// max_y := y + r ;
83386: LD_ADDR_VAR 0 10
83390: PUSH
83391: LD_VAR 0 3
83395: PUSH
83396: LD_VAR 0 4
83400: PLUS
83401: ST_TO_ADDR
// for _x = min_x to max_x do
83402: LD_ADDR_VAR 0 11
83406: PUSH
83407: DOUBLE
83408: LD_VAR 0 7
83412: DEC
83413: ST_TO_ADDR
83414: LD_VAR 0 9
83418: PUSH
83419: FOR_TO
83420: IFFALSE 83537
// for _y = min_y to max_y do
83422: LD_ADDR_VAR 0 12
83426: PUSH
83427: DOUBLE
83428: LD_VAR 0 8
83432: DEC
83433: ST_TO_ADDR
83434: LD_VAR 0 10
83438: PUSH
83439: FOR_TO
83440: IFFALSE 83533
// begin if not ValidHex ( _x , _y ) then
83442: LD_VAR 0 11
83446: PPUSH
83447: LD_VAR 0 12
83451: PPUSH
83452: CALL_OW 488
83456: NOT
83457: IFFALSE 83461
// continue ;
83459: GO 83439
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
83461: LD_VAR 0 11
83465: PPUSH
83466: LD_VAR 0 12
83470: PPUSH
83471: CALL_OW 351
83475: PUSH
83476: LD_VAR 0 11
83480: PPUSH
83481: LD_VAR 0 12
83485: PPUSH
83486: CALL_OW 554
83490: AND
83491: IFFALSE 83531
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
83493: LD_ADDR_VAR 0 13
83497: PUSH
83498: LD_VAR 0 13
83502: PPUSH
83503: LD_VAR 0 13
83507: PUSH
83508: LD_INT 1
83510: PLUS
83511: PPUSH
83512: LD_VAR 0 11
83516: PUSH
83517: LD_VAR 0 12
83521: PUSH
83522: EMPTY
83523: LIST
83524: LIST
83525: PPUSH
83526: CALL_OW 2
83530: ST_TO_ADDR
// end ;
83531: GO 83439
83533: POP
83534: POP
83535: GO 83419
83537: POP
83538: POP
// if not list then
83539: LD_VAR 0 13
83543: NOT
83544: IFFALSE 83548
// exit ;
83546: GO 83619
// for i in list do
83548: LD_ADDR_VAR 0 6
83552: PUSH
83553: LD_VAR 0 13
83557: PUSH
83558: FOR_IN
83559: IFFALSE 83617
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
83561: LD_VAR 0 1
83565: PPUSH
83566: LD_STRING M
83568: PUSH
83569: LD_VAR 0 6
83573: PUSH
83574: LD_INT 1
83576: ARRAY
83577: PUSH
83578: LD_VAR 0 6
83582: PUSH
83583: LD_INT 2
83585: ARRAY
83586: PUSH
83587: LD_INT 0
83589: PUSH
83590: LD_INT 0
83592: PUSH
83593: LD_INT 0
83595: PUSH
83596: LD_INT 0
83598: PUSH
83599: EMPTY
83600: LIST
83601: LIST
83602: LIST
83603: LIST
83604: LIST
83605: LIST
83606: LIST
83607: PUSH
83608: EMPTY
83609: LIST
83610: PPUSH
83611: CALL_OW 447
83615: GO 83558
83617: POP
83618: POP
// end ;
83619: LD_VAR 0 5
83623: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
83624: LD_EXP 138
83628: NOT
83629: IFFALSE 83679
83631: GO 83633
83633: DISABLE
// begin initHack := true ;
83634: LD_ADDR_EXP 138
83638: PUSH
83639: LD_INT 1
83641: ST_TO_ADDR
// hackTanks := [ ] ;
83642: LD_ADDR_EXP 139
83646: PUSH
83647: EMPTY
83648: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
83649: LD_ADDR_EXP 140
83653: PUSH
83654: EMPTY
83655: ST_TO_ADDR
// hackLimit := 3 ;
83656: LD_ADDR_EXP 141
83660: PUSH
83661: LD_INT 3
83663: ST_TO_ADDR
// hackDist := 12 ;
83664: LD_ADDR_EXP 142
83668: PUSH
83669: LD_INT 12
83671: ST_TO_ADDR
// hackCounter := [ ] ;
83672: LD_ADDR_EXP 143
83676: PUSH
83677: EMPTY
83678: ST_TO_ADDR
// end ;
83679: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
83680: LD_EXP 138
83684: PUSH
83685: LD_INT 34
83687: PUSH
83688: LD_EXP 61
83692: PUSH
83693: EMPTY
83694: LIST
83695: LIST
83696: PPUSH
83697: CALL_OW 69
83701: AND
83702: IFFALSE 83957
83704: GO 83706
83706: DISABLE
83707: LD_INT 0
83709: PPUSH
83710: PPUSH
// begin enable ;
83711: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
83712: LD_ADDR_VAR 0 1
83716: PUSH
83717: LD_INT 34
83719: PUSH
83720: LD_EXP 61
83724: PUSH
83725: EMPTY
83726: LIST
83727: LIST
83728: PPUSH
83729: CALL_OW 69
83733: PUSH
83734: FOR_IN
83735: IFFALSE 83955
// begin if not i in hackTanks then
83737: LD_VAR 0 1
83741: PUSH
83742: LD_EXP 139
83746: IN
83747: NOT
83748: IFFALSE 83831
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
83750: LD_ADDR_EXP 139
83754: PUSH
83755: LD_EXP 139
83759: PPUSH
83760: LD_EXP 139
83764: PUSH
83765: LD_INT 1
83767: PLUS
83768: PPUSH
83769: LD_VAR 0 1
83773: PPUSH
83774: CALL_OW 1
83778: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
83779: LD_ADDR_EXP 140
83783: PUSH
83784: LD_EXP 140
83788: PPUSH
83789: LD_EXP 140
83793: PUSH
83794: LD_INT 1
83796: PLUS
83797: PPUSH
83798: EMPTY
83799: PPUSH
83800: CALL_OW 1
83804: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
83805: LD_ADDR_EXP 143
83809: PUSH
83810: LD_EXP 143
83814: PPUSH
83815: LD_EXP 143
83819: PUSH
83820: LD_INT 1
83822: PLUS
83823: PPUSH
83824: EMPTY
83825: PPUSH
83826: CALL_OW 1
83830: ST_TO_ADDR
// end ; if not IsOk ( i ) then
83831: LD_VAR 0 1
83835: PPUSH
83836: CALL_OW 302
83840: NOT
83841: IFFALSE 83854
// begin HackUnlinkAll ( i ) ;
83843: LD_VAR 0 1
83847: PPUSH
83848: CALL 83960 0 1
// continue ;
83852: GO 83734
// end ; HackCheckCapturedStatus ( i ) ;
83854: LD_VAR 0 1
83858: PPUSH
83859: CALL 84403 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
83863: LD_ADDR_VAR 0 2
83867: PUSH
83868: LD_INT 81
83870: PUSH
83871: LD_VAR 0 1
83875: PPUSH
83876: CALL_OW 255
83880: PUSH
83881: EMPTY
83882: LIST
83883: LIST
83884: PUSH
83885: LD_INT 33
83887: PUSH
83888: LD_INT 3
83890: PUSH
83891: EMPTY
83892: LIST
83893: LIST
83894: PUSH
83895: LD_INT 91
83897: PUSH
83898: LD_VAR 0 1
83902: PUSH
83903: LD_EXP 142
83907: PUSH
83908: EMPTY
83909: LIST
83910: LIST
83911: LIST
83912: PUSH
83913: LD_INT 50
83915: PUSH
83916: EMPTY
83917: LIST
83918: PUSH
83919: EMPTY
83920: LIST
83921: LIST
83922: LIST
83923: LIST
83924: PPUSH
83925: CALL_OW 69
83929: ST_TO_ADDR
// if not tmp then
83930: LD_VAR 0 2
83934: NOT
83935: IFFALSE 83939
// continue ;
83937: GO 83734
// HackLink ( i , tmp ) ;
83939: LD_VAR 0 1
83943: PPUSH
83944: LD_VAR 0 2
83948: PPUSH
83949: CALL 84096 0 2
// end ;
83953: GO 83734
83955: POP
83956: POP
// end ;
83957: PPOPN 2
83959: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
83960: LD_INT 0
83962: PPUSH
83963: PPUSH
83964: PPUSH
// if not hack in hackTanks then
83965: LD_VAR 0 1
83969: PUSH
83970: LD_EXP 139
83974: IN
83975: NOT
83976: IFFALSE 83980
// exit ;
83978: GO 84091
// index := GetElementIndex ( hackTanks , hack ) ;
83980: LD_ADDR_VAR 0 4
83984: PUSH
83985: LD_EXP 139
83989: PPUSH
83990: LD_VAR 0 1
83994: PPUSH
83995: CALL 30217 0 2
83999: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
84000: LD_EXP 140
84004: PUSH
84005: LD_VAR 0 4
84009: ARRAY
84010: IFFALSE 84091
// begin for i in hackTanksCaptured [ index ] do
84012: LD_ADDR_VAR 0 3
84016: PUSH
84017: LD_EXP 140
84021: PUSH
84022: LD_VAR 0 4
84026: ARRAY
84027: PUSH
84028: FOR_IN
84029: IFFALSE 84055
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
84031: LD_VAR 0 3
84035: PUSH
84036: LD_INT 1
84038: ARRAY
84039: PPUSH
84040: LD_VAR 0 3
84044: PUSH
84045: LD_INT 2
84047: ARRAY
84048: PPUSH
84049: CALL_OW 235
84053: GO 84028
84055: POP
84056: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
84057: LD_ADDR_EXP 140
84061: PUSH
84062: LD_EXP 140
84066: PPUSH
84067: LD_VAR 0 4
84071: PPUSH
84072: EMPTY
84073: PPUSH
84074: CALL_OW 1
84078: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
84079: LD_VAR 0 1
84083: PPUSH
84084: LD_INT 0
84086: PPUSH
84087: CALL_OW 505
// end ; end ;
84091: LD_VAR 0 2
84095: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
84096: LD_INT 0
84098: PPUSH
84099: PPUSH
84100: PPUSH
// if not hack in hackTanks or not vehicles then
84101: LD_VAR 0 1
84105: PUSH
84106: LD_EXP 139
84110: IN
84111: NOT
84112: PUSH
84113: LD_VAR 0 2
84117: NOT
84118: OR
84119: IFFALSE 84123
// exit ;
84121: GO 84398
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
84123: LD_ADDR_VAR 0 2
84127: PUSH
84128: LD_VAR 0 1
84132: PPUSH
84133: LD_VAR 0 2
84137: PPUSH
84138: LD_INT 1
84140: PPUSH
84141: LD_INT 1
84143: PPUSH
84144: CALL 30867 0 4
84148: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
84149: LD_ADDR_VAR 0 5
84153: PUSH
84154: LD_EXP 139
84158: PPUSH
84159: LD_VAR 0 1
84163: PPUSH
84164: CALL 30217 0 2
84168: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
84169: LD_EXP 140
84173: PUSH
84174: LD_VAR 0 5
84178: ARRAY
84179: PUSH
84180: LD_EXP 141
84184: LESS
84185: IFFALSE 84374
// begin for i := 1 to vehicles do
84187: LD_ADDR_VAR 0 4
84191: PUSH
84192: DOUBLE
84193: LD_INT 1
84195: DEC
84196: ST_TO_ADDR
84197: LD_VAR 0 2
84201: PUSH
84202: FOR_TO
84203: IFFALSE 84372
// begin if hackTanksCaptured [ index ] = hackLimit then
84205: LD_EXP 140
84209: PUSH
84210: LD_VAR 0 5
84214: ARRAY
84215: PUSH
84216: LD_EXP 141
84220: EQUAL
84221: IFFALSE 84225
// break ;
84223: GO 84372
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
84225: LD_ADDR_EXP 143
84229: PUSH
84230: LD_EXP 143
84234: PPUSH
84235: LD_VAR 0 5
84239: PPUSH
84240: LD_EXP 143
84244: PUSH
84245: LD_VAR 0 5
84249: ARRAY
84250: PUSH
84251: LD_INT 1
84253: PLUS
84254: PPUSH
84255: CALL_OW 1
84259: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
84260: LD_ADDR_EXP 140
84264: PUSH
84265: LD_EXP 140
84269: PPUSH
84270: LD_VAR 0 5
84274: PUSH
84275: LD_EXP 140
84279: PUSH
84280: LD_VAR 0 5
84284: ARRAY
84285: PUSH
84286: LD_INT 1
84288: PLUS
84289: PUSH
84290: EMPTY
84291: LIST
84292: LIST
84293: PPUSH
84294: LD_VAR 0 2
84298: PUSH
84299: LD_VAR 0 4
84303: ARRAY
84304: PUSH
84305: LD_VAR 0 2
84309: PUSH
84310: LD_VAR 0 4
84314: ARRAY
84315: PPUSH
84316: CALL_OW 255
84320: PUSH
84321: EMPTY
84322: LIST
84323: LIST
84324: PPUSH
84325: CALL 30432 0 3
84329: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
84330: LD_VAR 0 2
84334: PUSH
84335: LD_VAR 0 4
84339: ARRAY
84340: PPUSH
84341: LD_VAR 0 1
84345: PPUSH
84346: CALL_OW 255
84350: PPUSH
84351: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
84355: LD_VAR 0 2
84359: PUSH
84360: LD_VAR 0 4
84364: ARRAY
84365: PPUSH
84366: CALL_OW 141
// end ;
84370: GO 84202
84372: POP
84373: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
84374: LD_VAR 0 1
84378: PPUSH
84379: LD_EXP 140
84383: PUSH
84384: LD_VAR 0 5
84388: ARRAY
84389: PUSH
84390: LD_INT 0
84392: PLUS
84393: PPUSH
84394: CALL_OW 505
// end ;
84398: LD_VAR 0 3
84402: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
84403: LD_INT 0
84405: PPUSH
84406: PPUSH
84407: PPUSH
84408: PPUSH
// if not hack in hackTanks then
84409: LD_VAR 0 1
84413: PUSH
84414: LD_EXP 139
84418: IN
84419: NOT
84420: IFFALSE 84424
// exit ;
84422: GO 84664
// index := GetElementIndex ( hackTanks , hack ) ;
84424: LD_ADDR_VAR 0 4
84428: PUSH
84429: LD_EXP 139
84433: PPUSH
84434: LD_VAR 0 1
84438: PPUSH
84439: CALL 30217 0 2
84443: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
84444: LD_ADDR_VAR 0 3
84448: PUSH
84449: DOUBLE
84450: LD_EXP 140
84454: PUSH
84455: LD_VAR 0 4
84459: ARRAY
84460: INC
84461: ST_TO_ADDR
84462: LD_INT 1
84464: PUSH
84465: FOR_DOWNTO
84466: IFFALSE 84638
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
84468: LD_ADDR_VAR 0 5
84472: PUSH
84473: LD_EXP 140
84477: PUSH
84478: LD_VAR 0 4
84482: ARRAY
84483: PUSH
84484: LD_VAR 0 3
84488: ARRAY
84489: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
84490: LD_VAR 0 5
84494: PUSH
84495: LD_INT 1
84497: ARRAY
84498: PPUSH
84499: CALL_OW 302
84503: NOT
84504: PUSH
84505: LD_VAR 0 5
84509: PUSH
84510: LD_INT 1
84512: ARRAY
84513: PPUSH
84514: CALL_OW 255
84518: PUSH
84519: LD_VAR 0 1
84523: PPUSH
84524: CALL_OW 255
84528: NONEQUAL
84529: OR
84530: IFFALSE 84636
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
84532: LD_VAR 0 5
84536: PUSH
84537: LD_INT 1
84539: ARRAY
84540: PPUSH
84541: CALL_OW 305
84545: PUSH
84546: LD_VAR 0 5
84550: PUSH
84551: LD_INT 1
84553: ARRAY
84554: PPUSH
84555: CALL_OW 255
84559: PUSH
84560: LD_VAR 0 1
84564: PPUSH
84565: CALL_OW 255
84569: EQUAL
84570: AND
84571: IFFALSE 84595
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
84573: LD_VAR 0 5
84577: PUSH
84578: LD_INT 1
84580: ARRAY
84581: PPUSH
84582: LD_VAR 0 5
84586: PUSH
84587: LD_INT 2
84589: ARRAY
84590: PPUSH
84591: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
84595: LD_ADDR_EXP 140
84599: PUSH
84600: LD_EXP 140
84604: PPUSH
84605: LD_VAR 0 4
84609: PPUSH
84610: LD_EXP 140
84614: PUSH
84615: LD_VAR 0 4
84619: ARRAY
84620: PPUSH
84621: LD_VAR 0 3
84625: PPUSH
84626: CALL_OW 3
84630: PPUSH
84631: CALL_OW 1
84635: ST_TO_ADDR
// end ; end ;
84636: GO 84465
84638: POP
84639: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
84640: LD_VAR 0 1
84644: PPUSH
84645: LD_EXP 140
84649: PUSH
84650: LD_VAR 0 4
84654: ARRAY
84655: PUSH
84656: LD_INT 0
84658: PLUS
84659: PPUSH
84660: CALL_OW 505
// end ;
84664: LD_VAR 0 2
84668: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
84669: LD_INT 0
84671: PPUSH
84672: PPUSH
84673: PPUSH
84674: PPUSH
// if not hack in hackTanks then
84675: LD_VAR 0 1
84679: PUSH
84680: LD_EXP 139
84684: IN
84685: NOT
84686: IFFALSE 84690
// exit ;
84688: GO 84775
// index := GetElementIndex ( hackTanks , hack ) ;
84690: LD_ADDR_VAR 0 5
84694: PUSH
84695: LD_EXP 139
84699: PPUSH
84700: LD_VAR 0 1
84704: PPUSH
84705: CALL 30217 0 2
84709: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
84710: LD_ADDR_VAR 0 4
84714: PUSH
84715: DOUBLE
84716: LD_INT 1
84718: DEC
84719: ST_TO_ADDR
84720: LD_EXP 140
84724: PUSH
84725: LD_VAR 0 5
84729: ARRAY
84730: PUSH
84731: FOR_TO
84732: IFFALSE 84773
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
84734: LD_EXP 140
84738: PUSH
84739: LD_VAR 0 5
84743: ARRAY
84744: PUSH
84745: LD_VAR 0 4
84749: ARRAY
84750: PUSH
84751: LD_INT 1
84753: ARRAY
84754: PUSH
84755: LD_VAR 0 2
84759: EQUAL
84760: IFFALSE 84771
// KillUnit ( vehicle ) ;
84762: LD_VAR 0 2
84766: PPUSH
84767: CALL_OW 66
84771: GO 84731
84773: POP
84774: POP
// end ;
84775: LD_VAR 0 3
84779: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
84780: LD_EXP 144
84784: NOT
84785: IFFALSE 84820
84787: GO 84789
84789: DISABLE
// begin initMiner := true ;
84790: LD_ADDR_EXP 144
84794: PUSH
84795: LD_INT 1
84797: ST_TO_ADDR
// minersList := [ ] ;
84798: LD_ADDR_EXP 145
84802: PUSH
84803: EMPTY
84804: ST_TO_ADDR
// minerMinesList := [ ] ;
84805: LD_ADDR_EXP 146
84809: PUSH
84810: EMPTY
84811: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
84812: LD_ADDR_EXP 147
84816: PUSH
84817: LD_INT 5
84819: ST_TO_ADDR
// end ;
84820: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
84821: LD_EXP 144
84825: PUSH
84826: LD_INT 34
84828: PUSH
84829: LD_EXP 66
84833: PUSH
84834: EMPTY
84835: LIST
84836: LIST
84837: PPUSH
84838: CALL_OW 69
84842: AND
84843: IFFALSE 85306
84845: GO 84847
84847: DISABLE
84848: LD_INT 0
84850: PPUSH
84851: PPUSH
84852: PPUSH
84853: PPUSH
// begin enable ;
84854: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
84855: LD_ADDR_VAR 0 1
84859: PUSH
84860: LD_INT 34
84862: PUSH
84863: LD_EXP 66
84867: PUSH
84868: EMPTY
84869: LIST
84870: LIST
84871: PPUSH
84872: CALL_OW 69
84876: PUSH
84877: FOR_IN
84878: IFFALSE 84950
// begin if not i in minersList then
84880: LD_VAR 0 1
84884: PUSH
84885: LD_EXP 145
84889: IN
84890: NOT
84891: IFFALSE 84948
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
84893: LD_ADDR_EXP 145
84897: PUSH
84898: LD_EXP 145
84902: PPUSH
84903: LD_EXP 145
84907: PUSH
84908: LD_INT 1
84910: PLUS
84911: PPUSH
84912: LD_VAR 0 1
84916: PPUSH
84917: CALL_OW 1
84921: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
84922: LD_ADDR_EXP 146
84926: PUSH
84927: LD_EXP 146
84931: PPUSH
84932: LD_EXP 146
84936: PUSH
84937: LD_INT 1
84939: PLUS
84940: PPUSH
84941: EMPTY
84942: PPUSH
84943: CALL_OW 1
84947: ST_TO_ADDR
// end end ;
84948: GO 84877
84950: POP
84951: POP
// for i := minerMinesList downto 1 do
84952: LD_ADDR_VAR 0 1
84956: PUSH
84957: DOUBLE
84958: LD_EXP 146
84962: INC
84963: ST_TO_ADDR
84964: LD_INT 1
84966: PUSH
84967: FOR_DOWNTO
84968: IFFALSE 85304
// begin if IsLive ( minersList [ i ] ) then
84970: LD_EXP 145
84974: PUSH
84975: LD_VAR 0 1
84979: ARRAY
84980: PPUSH
84981: CALL_OW 300
84985: IFFALSE 85013
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
84987: LD_EXP 145
84991: PUSH
84992: LD_VAR 0 1
84996: ARRAY
84997: PPUSH
84998: LD_EXP 146
85002: PUSH
85003: LD_VAR 0 1
85007: ARRAY
85008: PPUSH
85009: CALL_OW 505
// if not minerMinesList [ i ] then
85013: LD_EXP 146
85017: PUSH
85018: LD_VAR 0 1
85022: ARRAY
85023: NOT
85024: IFFALSE 85028
// continue ;
85026: GO 84967
// for j := minerMinesList [ i ] downto 1 do
85028: LD_ADDR_VAR 0 2
85032: PUSH
85033: DOUBLE
85034: LD_EXP 146
85038: PUSH
85039: LD_VAR 0 1
85043: ARRAY
85044: INC
85045: ST_TO_ADDR
85046: LD_INT 1
85048: PUSH
85049: FOR_DOWNTO
85050: IFFALSE 85300
// begin side := GetSide ( minersList [ i ] ) ;
85052: LD_ADDR_VAR 0 3
85056: PUSH
85057: LD_EXP 145
85061: PUSH
85062: LD_VAR 0 1
85066: ARRAY
85067: PPUSH
85068: CALL_OW 255
85072: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
85073: LD_ADDR_VAR 0 4
85077: PUSH
85078: LD_EXP 146
85082: PUSH
85083: LD_VAR 0 1
85087: ARRAY
85088: PUSH
85089: LD_VAR 0 2
85093: ARRAY
85094: PUSH
85095: LD_INT 1
85097: ARRAY
85098: PPUSH
85099: LD_EXP 146
85103: PUSH
85104: LD_VAR 0 1
85108: ARRAY
85109: PUSH
85110: LD_VAR 0 2
85114: ARRAY
85115: PUSH
85116: LD_INT 2
85118: ARRAY
85119: PPUSH
85120: CALL_OW 428
85124: ST_TO_ADDR
// if not tmp then
85125: LD_VAR 0 4
85129: NOT
85130: IFFALSE 85134
// continue ;
85132: GO 85049
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
85134: LD_VAR 0 4
85138: PUSH
85139: LD_INT 81
85141: PUSH
85142: LD_VAR 0 3
85146: PUSH
85147: EMPTY
85148: LIST
85149: LIST
85150: PPUSH
85151: CALL_OW 69
85155: IN
85156: PUSH
85157: LD_EXP 146
85161: PUSH
85162: LD_VAR 0 1
85166: ARRAY
85167: PUSH
85168: LD_VAR 0 2
85172: ARRAY
85173: PUSH
85174: LD_INT 1
85176: ARRAY
85177: PPUSH
85178: LD_EXP 146
85182: PUSH
85183: LD_VAR 0 1
85187: ARRAY
85188: PUSH
85189: LD_VAR 0 2
85193: ARRAY
85194: PUSH
85195: LD_INT 2
85197: ARRAY
85198: PPUSH
85199: CALL_OW 458
85203: AND
85204: IFFALSE 85298
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
85206: LD_EXP 146
85210: PUSH
85211: LD_VAR 0 1
85215: ARRAY
85216: PUSH
85217: LD_VAR 0 2
85221: ARRAY
85222: PUSH
85223: LD_INT 1
85225: ARRAY
85226: PPUSH
85227: LD_EXP 146
85231: PUSH
85232: LD_VAR 0 1
85236: ARRAY
85237: PUSH
85238: LD_VAR 0 2
85242: ARRAY
85243: PUSH
85244: LD_INT 2
85246: ARRAY
85247: PPUSH
85248: LD_VAR 0 3
85252: PPUSH
85253: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
85257: LD_ADDR_EXP 146
85261: PUSH
85262: LD_EXP 146
85266: PPUSH
85267: LD_VAR 0 1
85271: PPUSH
85272: LD_EXP 146
85276: PUSH
85277: LD_VAR 0 1
85281: ARRAY
85282: PPUSH
85283: LD_VAR 0 2
85287: PPUSH
85288: CALL_OW 3
85292: PPUSH
85293: CALL_OW 1
85297: ST_TO_ADDR
// end ; end ;
85298: GO 85049
85300: POP
85301: POP
// end ;
85302: GO 84967
85304: POP
85305: POP
// end ;
85306: PPOPN 4
85308: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
85309: LD_INT 0
85311: PPUSH
85312: PPUSH
// result := false ;
85313: LD_ADDR_VAR 0 4
85317: PUSH
85318: LD_INT 0
85320: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
85321: LD_VAR 0 1
85325: PPUSH
85326: CALL_OW 264
85330: PUSH
85331: LD_EXP 66
85335: EQUAL
85336: NOT
85337: IFFALSE 85341
// exit ;
85339: GO 85581
// index := GetElementIndex ( minersList , unit ) ;
85341: LD_ADDR_VAR 0 5
85345: PUSH
85346: LD_EXP 145
85350: PPUSH
85351: LD_VAR 0 1
85355: PPUSH
85356: CALL 30217 0 2
85360: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
85361: LD_EXP 146
85365: PUSH
85366: LD_VAR 0 5
85370: ARRAY
85371: PUSH
85372: LD_EXP 147
85376: GREATEREQUAL
85377: IFFALSE 85381
// exit ;
85379: GO 85581
// ComMoveXY ( unit , x , y ) ;
85381: LD_VAR 0 1
85385: PPUSH
85386: LD_VAR 0 2
85390: PPUSH
85391: LD_VAR 0 3
85395: PPUSH
85396: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
85400: LD_INT 35
85402: PPUSH
85403: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
85407: LD_VAR 0 1
85411: PPUSH
85412: LD_VAR 0 2
85416: PPUSH
85417: LD_VAR 0 3
85421: PPUSH
85422: CALL 61503 0 3
85426: NOT
85427: PUSH
85428: LD_VAR 0 1
85432: PPUSH
85433: CALL_OW 314
85437: AND
85438: IFFALSE 85442
// exit ;
85440: GO 85581
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
85442: LD_VAR 0 2
85446: PPUSH
85447: LD_VAR 0 3
85451: PPUSH
85452: CALL_OW 428
85456: PUSH
85457: LD_VAR 0 1
85461: EQUAL
85462: PUSH
85463: LD_VAR 0 1
85467: PPUSH
85468: CALL_OW 314
85472: NOT
85473: AND
85474: IFFALSE 85400
// PlaySoundXY ( x , y , PlantMine ) ;
85476: LD_VAR 0 2
85480: PPUSH
85481: LD_VAR 0 3
85485: PPUSH
85486: LD_STRING PlantMine
85488: PPUSH
85489: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
85493: LD_VAR 0 2
85497: PPUSH
85498: LD_VAR 0 3
85502: PPUSH
85503: LD_VAR 0 1
85507: PPUSH
85508: CALL_OW 255
85512: PPUSH
85513: LD_INT 0
85515: PPUSH
85516: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
85520: LD_ADDR_EXP 146
85524: PUSH
85525: LD_EXP 146
85529: PPUSH
85530: LD_VAR 0 5
85534: PUSH
85535: LD_EXP 146
85539: PUSH
85540: LD_VAR 0 5
85544: ARRAY
85545: PUSH
85546: LD_INT 1
85548: PLUS
85549: PUSH
85550: EMPTY
85551: LIST
85552: LIST
85553: PPUSH
85554: LD_VAR 0 2
85558: PUSH
85559: LD_VAR 0 3
85563: PUSH
85564: EMPTY
85565: LIST
85566: LIST
85567: PPUSH
85568: CALL 30432 0 3
85572: ST_TO_ADDR
// result := true ;
85573: LD_ADDR_VAR 0 4
85577: PUSH
85578: LD_INT 1
85580: ST_TO_ADDR
// end ;
85581: LD_VAR 0 4
85585: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
85586: LD_INT 0
85588: PPUSH
85589: PPUSH
85590: PPUSH
// if not unit in minersList then
85591: LD_VAR 0 1
85595: PUSH
85596: LD_EXP 145
85600: IN
85601: NOT
85602: IFFALSE 85606
// exit ;
85604: GO 85998
// index := GetElementIndex ( minersList , unit ) ;
85606: LD_ADDR_VAR 0 6
85610: PUSH
85611: LD_EXP 145
85615: PPUSH
85616: LD_VAR 0 1
85620: PPUSH
85621: CALL 30217 0 2
85625: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
85626: LD_ADDR_VAR 0 5
85630: PUSH
85631: DOUBLE
85632: LD_EXP 146
85636: PUSH
85637: LD_VAR 0 6
85641: ARRAY
85642: INC
85643: ST_TO_ADDR
85644: LD_INT 1
85646: PUSH
85647: FOR_DOWNTO
85648: IFFALSE 85809
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
85650: LD_EXP 146
85654: PUSH
85655: LD_VAR 0 6
85659: ARRAY
85660: PUSH
85661: LD_VAR 0 5
85665: ARRAY
85666: PUSH
85667: LD_INT 1
85669: ARRAY
85670: PUSH
85671: LD_VAR 0 2
85675: EQUAL
85676: PUSH
85677: LD_EXP 146
85681: PUSH
85682: LD_VAR 0 6
85686: ARRAY
85687: PUSH
85688: LD_VAR 0 5
85692: ARRAY
85693: PUSH
85694: LD_INT 2
85696: ARRAY
85697: PUSH
85698: LD_VAR 0 3
85702: EQUAL
85703: AND
85704: IFFALSE 85807
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
85706: LD_EXP 146
85710: PUSH
85711: LD_VAR 0 6
85715: ARRAY
85716: PUSH
85717: LD_VAR 0 5
85721: ARRAY
85722: PUSH
85723: LD_INT 1
85725: ARRAY
85726: PPUSH
85727: LD_EXP 146
85731: PUSH
85732: LD_VAR 0 6
85736: ARRAY
85737: PUSH
85738: LD_VAR 0 5
85742: ARRAY
85743: PUSH
85744: LD_INT 2
85746: ARRAY
85747: PPUSH
85748: LD_VAR 0 1
85752: PPUSH
85753: CALL_OW 255
85757: PPUSH
85758: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
85762: LD_ADDR_EXP 146
85766: PUSH
85767: LD_EXP 146
85771: PPUSH
85772: LD_VAR 0 6
85776: PPUSH
85777: LD_EXP 146
85781: PUSH
85782: LD_VAR 0 6
85786: ARRAY
85787: PPUSH
85788: LD_VAR 0 5
85792: PPUSH
85793: CALL_OW 3
85797: PPUSH
85798: CALL_OW 1
85802: ST_TO_ADDR
// exit ;
85803: POP
85804: POP
85805: GO 85998
// end ; end ;
85807: GO 85647
85809: POP
85810: POP
// for i := minerMinesList [ index ] downto 1 do
85811: LD_ADDR_VAR 0 5
85815: PUSH
85816: DOUBLE
85817: LD_EXP 146
85821: PUSH
85822: LD_VAR 0 6
85826: ARRAY
85827: INC
85828: ST_TO_ADDR
85829: LD_INT 1
85831: PUSH
85832: FOR_DOWNTO
85833: IFFALSE 85996
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
85835: LD_EXP 146
85839: PUSH
85840: LD_VAR 0 6
85844: ARRAY
85845: PUSH
85846: LD_VAR 0 5
85850: ARRAY
85851: PUSH
85852: LD_INT 1
85854: ARRAY
85855: PPUSH
85856: LD_EXP 146
85860: PUSH
85861: LD_VAR 0 6
85865: ARRAY
85866: PUSH
85867: LD_VAR 0 5
85871: ARRAY
85872: PUSH
85873: LD_INT 2
85875: ARRAY
85876: PPUSH
85877: LD_VAR 0 2
85881: PPUSH
85882: LD_VAR 0 3
85886: PPUSH
85887: CALL_OW 298
85891: PUSH
85892: LD_INT 6
85894: LESS
85895: IFFALSE 85994
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
85897: LD_EXP 146
85901: PUSH
85902: LD_VAR 0 6
85906: ARRAY
85907: PUSH
85908: LD_VAR 0 5
85912: ARRAY
85913: PUSH
85914: LD_INT 1
85916: ARRAY
85917: PPUSH
85918: LD_EXP 146
85922: PUSH
85923: LD_VAR 0 6
85927: ARRAY
85928: PUSH
85929: LD_VAR 0 5
85933: ARRAY
85934: PUSH
85935: LD_INT 2
85937: ARRAY
85938: PPUSH
85939: LD_VAR 0 1
85943: PPUSH
85944: CALL_OW 255
85948: PPUSH
85949: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
85953: LD_ADDR_EXP 146
85957: PUSH
85958: LD_EXP 146
85962: PPUSH
85963: LD_VAR 0 6
85967: PPUSH
85968: LD_EXP 146
85972: PUSH
85973: LD_VAR 0 6
85977: ARRAY
85978: PPUSH
85979: LD_VAR 0 5
85983: PPUSH
85984: CALL_OW 3
85988: PPUSH
85989: CALL_OW 1
85993: ST_TO_ADDR
// end ; end ;
85994: GO 85832
85996: POP
85997: POP
// end ;
85998: LD_VAR 0 4
86002: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
86003: LD_INT 0
86005: PPUSH
86006: PPUSH
86007: PPUSH
86008: PPUSH
86009: PPUSH
86010: PPUSH
86011: PPUSH
86012: PPUSH
86013: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
86014: LD_VAR 0 1
86018: PPUSH
86019: CALL_OW 264
86023: PUSH
86024: LD_EXP 66
86028: EQUAL
86029: NOT
86030: PUSH
86031: LD_VAR 0 1
86035: PUSH
86036: LD_EXP 145
86040: IN
86041: NOT
86042: OR
86043: IFFALSE 86047
// exit ;
86045: GO 86369
// index := GetElementIndex ( minersList , unit ) ;
86047: LD_ADDR_VAR 0 6
86051: PUSH
86052: LD_EXP 145
86056: PPUSH
86057: LD_VAR 0 1
86061: PPUSH
86062: CALL 30217 0 2
86066: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
86067: LD_ADDR_VAR 0 8
86071: PUSH
86072: LD_EXP 147
86076: PUSH
86077: LD_EXP 146
86081: PUSH
86082: LD_VAR 0 6
86086: ARRAY
86087: MINUS
86088: ST_TO_ADDR
// if not minesFreeAmount then
86089: LD_VAR 0 8
86093: NOT
86094: IFFALSE 86098
// exit ;
86096: GO 86369
// tmp := [ ] ;
86098: LD_ADDR_VAR 0 7
86102: PUSH
86103: EMPTY
86104: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
86105: LD_ADDR_VAR 0 5
86109: PUSH
86110: DOUBLE
86111: LD_INT 1
86113: DEC
86114: ST_TO_ADDR
86115: LD_VAR 0 8
86119: PUSH
86120: FOR_TO
86121: IFFALSE 86316
// begin _d := rand ( 0 , 5 ) ;
86123: LD_ADDR_VAR 0 11
86127: PUSH
86128: LD_INT 0
86130: PPUSH
86131: LD_INT 5
86133: PPUSH
86134: CALL_OW 12
86138: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
86139: LD_ADDR_VAR 0 12
86143: PUSH
86144: LD_INT 2
86146: PPUSH
86147: LD_INT 6
86149: PPUSH
86150: CALL_OW 12
86154: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
86155: LD_ADDR_VAR 0 9
86159: PUSH
86160: LD_VAR 0 2
86164: PPUSH
86165: LD_VAR 0 11
86169: PPUSH
86170: LD_VAR 0 12
86174: PPUSH
86175: CALL_OW 272
86179: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
86180: LD_ADDR_VAR 0 10
86184: PUSH
86185: LD_VAR 0 3
86189: PPUSH
86190: LD_VAR 0 11
86194: PPUSH
86195: LD_VAR 0 12
86199: PPUSH
86200: CALL_OW 273
86204: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
86205: LD_VAR 0 9
86209: PPUSH
86210: LD_VAR 0 10
86214: PPUSH
86215: CALL_OW 488
86219: PUSH
86220: LD_VAR 0 9
86224: PUSH
86225: LD_VAR 0 10
86229: PUSH
86230: EMPTY
86231: LIST
86232: LIST
86233: PUSH
86234: LD_VAR 0 7
86238: IN
86239: NOT
86240: AND
86241: PUSH
86242: LD_VAR 0 9
86246: PPUSH
86247: LD_VAR 0 10
86251: PPUSH
86252: CALL_OW 458
86256: NOT
86257: AND
86258: IFFALSE 86300
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
86260: LD_ADDR_VAR 0 7
86264: PUSH
86265: LD_VAR 0 7
86269: PPUSH
86270: LD_VAR 0 7
86274: PUSH
86275: LD_INT 1
86277: PLUS
86278: PPUSH
86279: LD_VAR 0 9
86283: PUSH
86284: LD_VAR 0 10
86288: PUSH
86289: EMPTY
86290: LIST
86291: LIST
86292: PPUSH
86293: CALL_OW 1
86297: ST_TO_ADDR
86298: GO 86314
// i := i - 1 ;
86300: LD_ADDR_VAR 0 5
86304: PUSH
86305: LD_VAR 0 5
86309: PUSH
86310: LD_INT 1
86312: MINUS
86313: ST_TO_ADDR
// end ;
86314: GO 86120
86316: POP
86317: POP
// for i in tmp do
86318: LD_ADDR_VAR 0 5
86322: PUSH
86323: LD_VAR 0 7
86327: PUSH
86328: FOR_IN
86329: IFFALSE 86367
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
86331: LD_VAR 0 1
86335: PPUSH
86336: LD_VAR 0 5
86340: PUSH
86341: LD_INT 1
86343: ARRAY
86344: PPUSH
86345: LD_VAR 0 5
86349: PUSH
86350: LD_INT 2
86352: ARRAY
86353: PPUSH
86354: CALL 85309 0 3
86358: NOT
86359: IFFALSE 86365
// exit ;
86361: POP
86362: POP
86363: GO 86369
86365: GO 86328
86367: POP
86368: POP
// end ;
86369: LD_VAR 0 4
86373: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
86374: LD_INT 0
86376: PPUSH
86377: PPUSH
86378: PPUSH
86379: PPUSH
86380: PPUSH
86381: PPUSH
86382: PPUSH
// if not GetClass ( unit ) = class_sniper then
86383: LD_VAR 0 1
86387: PPUSH
86388: CALL_OW 257
86392: PUSH
86393: LD_INT 5
86395: EQUAL
86396: NOT
86397: IFFALSE 86401
// exit ;
86399: GO 86789
// dist := 8 ;
86401: LD_ADDR_VAR 0 5
86405: PUSH
86406: LD_INT 8
86408: ST_TO_ADDR
// viewRange := 12 ;
86409: LD_ADDR_VAR 0 7
86413: PUSH
86414: LD_INT 12
86416: ST_TO_ADDR
// side := GetSide ( unit ) ;
86417: LD_ADDR_VAR 0 6
86421: PUSH
86422: LD_VAR 0 1
86426: PPUSH
86427: CALL_OW 255
86431: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
86432: LD_INT 61
86434: PPUSH
86435: LD_VAR 0 6
86439: PPUSH
86440: CALL_OW 321
86444: PUSH
86445: LD_INT 2
86447: EQUAL
86448: IFFALSE 86458
// viewRange := 16 ;
86450: LD_ADDR_VAR 0 7
86454: PUSH
86455: LD_INT 16
86457: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
86458: LD_VAR 0 1
86462: PPUSH
86463: LD_VAR 0 2
86467: PPUSH
86468: LD_VAR 0 3
86472: PPUSH
86473: CALL_OW 297
86477: PUSH
86478: LD_VAR 0 5
86482: GREATER
86483: IFFALSE 86562
// begin ComMoveXY ( unit , x , y ) ;
86485: LD_VAR 0 1
86489: PPUSH
86490: LD_VAR 0 2
86494: PPUSH
86495: LD_VAR 0 3
86499: PPUSH
86500: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
86504: LD_INT 35
86506: PPUSH
86507: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
86511: LD_VAR 0 1
86515: PPUSH
86516: LD_VAR 0 2
86520: PPUSH
86521: LD_VAR 0 3
86525: PPUSH
86526: CALL 61503 0 3
86530: NOT
86531: IFFALSE 86535
// exit ;
86533: GO 86789
// until GetDistUnitXY ( unit , x , y ) < dist ;
86535: LD_VAR 0 1
86539: PPUSH
86540: LD_VAR 0 2
86544: PPUSH
86545: LD_VAR 0 3
86549: PPUSH
86550: CALL_OW 297
86554: PUSH
86555: LD_VAR 0 5
86559: LESS
86560: IFFALSE 86504
// end ; ComTurnXY ( unit , x , y ) ;
86562: LD_VAR 0 1
86566: PPUSH
86567: LD_VAR 0 2
86571: PPUSH
86572: LD_VAR 0 3
86576: PPUSH
86577: CALL_OW 118
// wait ( 5 ) ;
86581: LD_INT 5
86583: PPUSH
86584: CALL_OW 67
// _d := GetDir ( unit ) ;
86588: LD_ADDR_VAR 0 10
86592: PUSH
86593: LD_VAR 0 1
86597: PPUSH
86598: CALL_OW 254
86602: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
86603: LD_ADDR_VAR 0 8
86607: PUSH
86608: LD_VAR 0 1
86612: PPUSH
86613: CALL_OW 250
86617: PPUSH
86618: LD_VAR 0 10
86622: PPUSH
86623: LD_VAR 0 5
86627: PPUSH
86628: CALL_OW 272
86632: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
86633: LD_ADDR_VAR 0 9
86637: PUSH
86638: LD_VAR 0 1
86642: PPUSH
86643: CALL_OW 251
86647: PPUSH
86648: LD_VAR 0 10
86652: PPUSH
86653: LD_VAR 0 5
86657: PPUSH
86658: CALL_OW 273
86662: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
86663: LD_VAR 0 8
86667: PPUSH
86668: LD_VAR 0 9
86672: PPUSH
86673: CALL_OW 488
86677: NOT
86678: IFFALSE 86682
// exit ;
86680: GO 86789
// ComAnimCustom ( unit , 1 ) ;
86682: LD_VAR 0 1
86686: PPUSH
86687: LD_INT 1
86689: PPUSH
86690: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
86694: LD_VAR 0 8
86698: PPUSH
86699: LD_VAR 0 9
86703: PPUSH
86704: LD_VAR 0 6
86708: PPUSH
86709: LD_VAR 0 7
86713: PPUSH
86714: CALL_OW 330
// repeat wait ( 1 ) ;
86718: LD_INT 1
86720: PPUSH
86721: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
86725: LD_VAR 0 1
86729: PPUSH
86730: CALL_OW 316
86734: PUSH
86735: LD_VAR 0 1
86739: PPUSH
86740: CALL_OW 314
86744: OR
86745: PUSH
86746: LD_VAR 0 1
86750: PPUSH
86751: CALL_OW 302
86755: NOT
86756: OR
86757: PUSH
86758: LD_VAR 0 1
86762: PPUSH
86763: CALL_OW 301
86767: OR
86768: IFFALSE 86718
// RemoveSeeing ( _x , _y , side ) ;
86770: LD_VAR 0 8
86774: PPUSH
86775: LD_VAR 0 9
86779: PPUSH
86780: LD_VAR 0 6
86784: PPUSH
86785: CALL_OW 331
// end ; end_of_file
86789: LD_VAR 0 4
86793: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
86794: LD_VAR 0 1
86798: PPUSH
86799: LD_VAR 0 2
86803: PPUSH
86804: LD_VAR 0 3
86808: PPUSH
86809: LD_VAR 0 4
86813: PPUSH
86814: LD_VAR 0 5
86818: PPUSH
86819: LD_VAR 0 6
86823: PPUSH
86824: CALL 66720 0 6
// end ;
86828: PPOPN 6
86830: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
86831: LD_INT 0
86833: PPUSH
// begin if not units then
86834: LD_VAR 0 1
86838: NOT
86839: IFFALSE 86843
// exit ;
86841: GO 86843
// end ;
86843: PPOPN 7
86845: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
86846: CALL 66691 0 0
// end ;
86850: PPOPN 1
86852: END
