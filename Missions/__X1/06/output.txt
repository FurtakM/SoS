// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 63229 0 0
// Init ;
   8: CALL 62 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 26
// Difficulty := 3 ;
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 3
  25: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  26: LD_INT 1
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: CALL 6839 0 2
// PrepareArabian ;
  36: CALL 361 0 0
// PrepareRussian ;
  40: CALL 7686 0 0
// Action ;
  44: CALL 15411 0 0
// if debug then
  48: LD_EXP 1
  52: IFFALSE 61
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ;
  61: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 05_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 05_
  80: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_STRING 04_2_GaidarKilled
  88: PPUSH
  89: LD_INT 1
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_STRING 05_ConvoySavedCounter
 104: PPUSH
 105: LD_INT 0
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// bergkampfArrived := false ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// omarArrived := false ;
 121: LD_ADDR_EXP 6
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// outpostDestroyed := false ;
 129: LD_ADDR_EXP 4
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ruLoseCounter := 0 ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// rolfScriptBase := false ;
 145: LD_ADDR_EXP 9
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// omarScriptBase := false ;
 153: LD_ADDR_EXP 10
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// linkedWithRolf := 0 ;
 161: LD_ADDR_EXP 12
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 169: LD_ADDR_EXP 26
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// rolfDied := false ;
 177: LD_ADDR_EXP 13
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// leninSpotted := false ;
 185: LD_ADDR_EXP 14
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// mortarConstructed := false ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// rolfHasVehicles := false ;
 201: LD_ADDR_EXP 16
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// leninScriptBase := true ;
 209: LD_ADDR_EXP 11
 213: PUSH
 214: LD_INT 1
 216: ST_TO_ADDR
// rolfWantVehicles := false ;
 217: LD_ADDR_EXP 17
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omarWantVehicles := false ;
 225: LD_ADDR_EXP 18
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// omarHasVehicles := false ;
 233: LD_ADDR_EXP 22
 237: PUSH
 238: LD_INT 0
 240: ST_TO_ADDR
// escapeAllowed := false ;
 241: LD_ADDR_EXP 24
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 8 8$00 , 6 6$00 , 5 5$00 ] [ Difficulty ] ;
 249: LD_ADDR_EXP 19
 253: PUSH
 254: LD_INT 16800
 256: PUSH
 257: LD_INT 12600
 259: PUSH
 260: LD_INT 10500
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] ;
 274: LD_ADDR_EXP 20
 278: PUSH
 279: LD_INT 21000
 281: PUSH
 282: LD_INT 18900
 284: PUSH
 285: LD_INT 16800
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: PUSH
 293: LD_OWVAR 67
 297: ARRAY
 298: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 299: LD_ADDR_EXP 21
 303: PUSH
 304: LD_INT 4
 306: PUSH
 307: LD_INT 5
 309: PUSH
 310: LD_INT 6
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: PUSH
 318: LD_OWVAR 67
 322: ARRAY
 323: ST_TO_ADDR
// omarAttack := false ;
 324: LD_ADDR_EXP 23
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// disableAttackOnHeike := false ;
 332: LD_ADDR_EXP 27
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// escapeTimer := 4 4$00 ;
 340: LD_ADDR_EXP 25
 344: PUSH
 345: LD_INT 8400
 347: ST_TO_ADDR
// firstAttack := true ;
 348: LD_ADDR_EXP 28
 352: PUSH
 353: LD_INT 1
 355: ST_TO_ADDR
// end ; end_of_file
 356: LD_VAR 0 1
 360: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 361: LD_INT 0
 363: PPUSH
 364: PPUSH
 365: PPUSH
 366: PPUSH
 367: PPUSH
 368: PPUSH
 369: PPUSH
 370: PPUSH
 371: PPUSH
 372: PPUSH
 373: PPUSH
 374: PPUSH
// uc_nation := 2 ;
 375: LD_ADDR_OWVAR 21
 379: PUSH
 380: LD_INT 2
 382: ST_TO_ADDR
// uc_side := 5 ;
 383: LD_ADDR_OWVAR 20
 387: PUSH
 388: LD_INT 5
 390: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 391: LD_ADDR_EXP 37
 395: PUSH
 396: LD_STRING Abdul
 398: PPUSH
 399: LD_INT 0
 401: PPUSH
 402: LD_STRING 
 404: PPUSH
 405: CALL 24474 0 3
 409: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 410: LD_ADDR_EXP 39
 414: PUSH
 415: LD_STRING Omar
 417: PPUSH
 418: LD_INT 0
 420: PPUSH
 421: LD_STRING 
 423: PPUSH
 424: CALL 24474 0 3
 428: ST_TO_ADDR
// uc_side := 2 ;
 429: LD_ADDR_OWVAR 20
 433: PUSH
 434: LD_INT 2
 436: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 437: LD_ADDR_EXP 29
 441: PUSH
 442: LD_STRING Heike
 444: PPUSH
 445: LD_EXP 1
 449: NOT
 450: PPUSH
 451: LD_EXP 2
 455: PPUSH
 456: CALL 24474 0 3
 460: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 461: LD_ADDR_EXP 32
 465: PUSH
 466: LD_STRING Ibrahim
 468: PPUSH
 469: LD_EXP 1
 473: NOT
 474: PPUSH
 475: LD_EXP 2
 479: PPUSH
 480: CALL 24474 0 3
 484: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 485: LD_ADDR_EXP 30
 489: PUSH
 490: LD_STRING Givi
 492: PPUSH
 493: LD_EXP 1
 497: NOT
 498: PPUSH
 499: LD_EXP 2
 503: PPUSH
 504: CALL 24474 0 3
 508: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 509: LD_ADDR_EXP 33
 513: PUSH
 514: LD_STRING Kamil
 516: PPUSH
 517: LD_EXP 1
 521: NOT
 522: PPUSH
 523: LD_EXP 2
 527: PPUSH
 528: CALL 24474 0 3
 532: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 533: LD_ADDR_EXP 34
 537: PUSH
 538: LD_STRING Kaia
 540: PPUSH
 541: LD_EXP 1
 545: NOT
 546: PPUSH
 547: LD_EXP 2
 551: PPUSH
 552: CALL 24474 0 3
 556: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 557: LD_ADDR_EXP 35
 561: PUSH
 562: LD_STRING Sophia
 564: PPUSH
 565: LD_EXP 1
 569: NOT
 570: PPUSH
 571: LD_EXP 2
 575: PPUSH
 576: CALL 24474 0 3
 580: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 581: LD_ADDR_EXP 36
 585: PUSH
 586: LD_STRING Markov
 588: PPUSH
 589: LD_EXP 1
 593: NOT
 594: PPUSH
 595: LD_EXP 2
 599: PPUSH
 600: CALL 24474 0 3
 604: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 605: LD_ADDR_EXP 41
 609: PUSH
 610: LD_STRING Aviradze
 612: PPUSH
 613: LD_EXP 1
 617: NOT
 618: PPUSH
 619: LD_EXP 2
 623: PPUSH
 624: CALL 24474 0 3
 628: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 629: LD_ADDR_EXP 40
 633: PUSH
 634: LD_STRING Kurt
 636: PPUSH
 637: LD_EXP 1
 641: NOT
 642: PPUSH
 643: LD_EXP 2
 647: PPUSH
 648: CALL 24474 0 3
 652: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 653: LD_ADDR_EXP 31
 657: PUSH
 658: LD_STRING Mike
 660: PPUSH
 661: LD_EXP 1
 665: NOT
 666: PPUSH
 667: LD_EXP 2
 671: PPUSH
 672: CALL 24474 0 3
 676: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 677: LD_ADDR_EXP 38
 681: PUSH
 682: LD_STRING Olaf
 684: PPUSH
 685: LD_INT 0
 687: PPUSH
 688: LD_STRING 
 690: PPUSH
 691: CALL 24474 0 3
 695: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 696: LD_ADDR_EXP 44
 700: PUSH
 701: LD_STRING 05_others
 703: PPUSH
 704: CALL_OW 31
 708: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 709: LD_ADDR_EXP 45
 713: PUSH
 714: LD_STRING 05_apes
 716: PPUSH
 717: CALL_OW 31
 721: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 722: LD_ADDR_VAR 0 5
 726: PUSH
 727: LD_STRING 05_Radar
 729: PPUSH
 730: LD_EXP 1
 734: PPUSH
 735: CALL_OW 30
 739: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 740: LD_ADDR_VAR 0 6
 744: PUSH
 745: LD_STRING 05_RemoteControl
 747: PPUSH
 748: LD_EXP 1
 752: PPUSH
 753: CALL_OW 30
 757: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 758: LD_ADDR_VAR 0 7
 762: PUSH
 763: LD_STRING 05_DrugsTested
 765: PPUSH
 766: LD_EXP 1
 770: PPUSH
 771: CALL_OW 30
 775: ST_TO_ADDR
// if hasDrugs then
 776: LD_VAR 0 7
 780: IFFALSE 795
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 782: LD_INT 5
 784: PPUSH
 785: LD_INT 2
 787: PPUSH
 788: LD_INT 2
 790: PPUSH
 791: CALL_OW 322
// if hasRadar then
 795: LD_VAR 0 5
 799: IFFALSE 814
// SetTech ( tech_radar , 2 , state_researched ) ;
 801: LD_INT 6
 803: PPUSH
 804: LD_INT 2
 806: PPUSH
 807: LD_INT 2
 809: PPUSH
 810: CALL_OW 322
// if hasRemote then
 814: LD_VAR 0 6
 818: IFFALSE 833
// SetTech ( tech_remCont , 2 , state_researched ) ;
 820: LD_INT 15
 822: PPUSH
 823: LD_INT 2
 825: PPUSH
 826: LD_INT 2
 828: PPUSH
 829: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 833: LD_ADDR_VAR 0 12
 837: PUSH
 838: LD_INT 5
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL_OW 517
 848: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 849: LD_ADDR_VAR 0 2
 853: PUSH
 854: DOUBLE
 855: LD_INT 1
 857: DEC
 858: ST_TO_ADDR
 859: LD_VAR 0 12
 863: PUSH
 864: LD_INT 1
 866: ARRAY
 867: PUSH
 868: FOR_TO
 869: IFFALSE 946
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 871: LD_VAR 0 12
 875: PUSH
 876: LD_INT 1
 878: ARRAY
 879: PUSH
 880: LD_VAR 0 2
 884: ARRAY
 885: PPUSH
 886: LD_VAR 0 12
 890: PUSH
 891: LD_INT 2
 893: ARRAY
 894: PUSH
 895: LD_VAR 0 2
 899: ARRAY
 900: PPUSH
 901: CALL_OW 351
 905: IFFALSE 944
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 907: LD_VAR 0 12
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PUSH
 916: LD_VAR 0 2
 920: ARRAY
 921: PPUSH
 922: LD_VAR 0 12
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: PUSH
 931: LD_VAR 0 2
 935: ARRAY
 936: PPUSH
 937: LD_INT 2
 939: PPUSH
 940: CALL_OW 244
 944: GO 868
 946: POP
 947: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 948: LD_ADDR_VAR 0 4
 952: PUSH
 953: LD_INT 0
 955: PUSH
 956: LD_INT 206
 958: PUSH
 959: LD_INT 80
 961: PUSH
 962: LD_INT 1
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 32
 973: PUSH
 974: LD_INT 221
 976: PUSH
 977: LD_INT 95
 979: PUSH
 980: LD_INT 5
 982: PUSH
 983: LD_INT 23
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 32
 995: PUSH
 996: LD_INT 223
 998: PUSH
 999: LD_INT 88
1001: PUSH
1002: LD_INT 5
1004: PUSH
1005: LD_INT 24
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: PUSH
1015: LD_INT 32
1017: PUSH
1018: LD_INT 202
1020: PUSH
1021: LD_INT 64
1023: PUSH
1024: LD_INT 2
1026: PUSH
1027: LD_INT 25
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: PUSH
1037: LD_INT 3
1039: PUSH
1040: LD_INT 203
1042: PUSH
1043: LD_INT 91
1045: PUSH
1046: LD_INT 1
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: PUSH
1055: LD_INT 8
1057: PUSH
1058: LD_INT 217
1060: PUSH
1061: LD_INT 78
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: PUSH
1073: LD_INT 27
1075: PUSH
1076: LD_INT 220
1078: PUSH
1079: LD_INT 99
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 27
1093: PUSH
1094: LD_INT 220
1096: PUSH
1097: LD_INT 103
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 27
1111: PUSH
1112: LD_INT 216
1114: PUSH
1115: LD_INT 102
1117: PUSH
1118: LD_INT 1
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 17
1129: PUSH
1130: LD_INT 203
1132: PUSH
1133: LD_INT 94
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: PUSH
1145: LD_INT 23
1147: PUSH
1148: LD_INT 200
1150: PUSH
1151: LD_INT 88
1153: PUSH
1154: LD_INT 2
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 16
1165: PUSH
1166: LD_INT 199
1168: PUSH
1169: LD_INT 91
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 26
1183: PUSH
1184: LD_INT 197
1186: PUSH
1187: LD_INT 81
1189: PUSH
1190: LD_INT 1
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 26
1201: PUSH
1202: LD_INT 197
1204: PUSH
1205: LD_INT 78
1207: PUSH
1208: LD_INT 3
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: ST_TO_ADDR
// if hasRadar then
1233: LD_VAR 0 5
1237: IFFALSE 1281
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
1239: LD_ADDR_VAR 0 4
1243: PUSH
1244: LD_VAR 0 4
1248: PPUSH
1249: LD_VAR 0 4
1253: PUSH
1254: LD_INT 1
1256: PLUS
1257: PPUSH
1258: LD_INT 20
1260: PUSH
1261: LD_INT 203
1263: PUSH
1264: LD_INT 87
1266: PUSH
1267: LD_INT 3
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: PPUSH
1276: CALL_OW 1
1280: ST_TO_ADDR
// if hasRemote then
1281: LD_VAR 0 6
1285: IFFALSE 1329
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
1287: LD_ADDR_VAR 0 4
1291: PUSH
1292: LD_VAR 0 4
1296: PPUSH
1297: LD_VAR 0 4
1301: PUSH
1302: LD_INT 1
1304: PLUS
1305: PPUSH
1306: LD_INT 22
1308: PUSH
1309: LD_INT 207
1311: PUSH
1312: LD_INT 95
1314: PUSH
1315: LD_INT 5
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: PPUSH
1324: CALL_OW 1
1328: ST_TO_ADDR
// for i in base do
1329: LD_ADDR_VAR 0 2
1333: PUSH
1334: LD_VAR 0 4
1338: PUSH
1339: FOR_IN
1340: IFFALSE 1521
// begin bc_type := i [ 1 ] ;
1342: LD_ADDR_OWVAR 42
1346: PUSH
1347: LD_VAR 0 2
1351: PUSH
1352: LD_INT 1
1354: ARRAY
1355: ST_TO_ADDR
// bc_level := 3 ;
1356: LD_ADDR_OWVAR 43
1360: PUSH
1361: LD_INT 3
1363: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1364: LD_VAR 0 2
1368: PUSH
1369: LD_INT 1
1371: ARRAY
1372: PUSH
1373: LD_INT 8
1375: EQUAL
1376: IFFALSE 1411
// begin bc_kind1 := b_lab_weapon ;
1378: LD_ADDR_OWVAR 44
1382: PUSH
1383: LD_INT 10
1385: ST_TO_ADDR
// if hasRadar then
1386: LD_VAR 0 5
1390: IFFALSE 1402
// bc_kind2 := b_lab_opto else
1392: LD_ADDR_OWVAR 45
1396: PUSH
1397: LD_INT 15
1399: ST_TO_ADDR
1400: GO 1411
// bc_kind2 := - 1 ;
1402: LD_ADDR_OWVAR 45
1406: PUSH
1407: LD_INT 1
1409: NEG
1410: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1411: LD_ADDR_VAR 0 3
1415: PUSH
1416: LD_VAR 0 2
1420: PUSH
1421: LD_INT 2
1423: ARRAY
1424: PPUSH
1425: LD_VAR 0 2
1429: PUSH
1430: LD_INT 3
1432: ARRAY
1433: PPUSH
1434: LD_VAR 0 2
1438: PUSH
1439: LD_INT 4
1441: ARRAY
1442: PPUSH
1443: CALL_OW 47
1447: ST_TO_ADDR
// if i > 4 then
1448: LD_VAR 0 2
1452: PUSH
1453: LD_INT 4
1455: GREATER
1456: IFFALSE 1476
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1458: LD_VAR 0 3
1462: PPUSH
1463: LD_VAR 0 2
1467: PUSH
1468: LD_INT 5
1470: ARRAY
1471: PPUSH
1472: CALL_OW 431
// if i [ 1 ] = b_bunker then
1476: LD_VAR 0 2
1480: PUSH
1481: LD_INT 1
1483: ARRAY
1484: PUSH
1485: LD_INT 32
1487: EQUAL
1488: IFFALSE 1519
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1490: LD_ADDR_VAR 0 11
1494: PUSH
1495: LD_VAR 0 11
1499: PPUSH
1500: LD_VAR 0 11
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 3
1513: PPUSH
1514: CALL_OW 1
1518: ST_TO_ADDR
// end ;
1519: GO 1339
1521: POP
1522: POP
// depot := HexInfo ( 206 , 80 ) ;
1523: LD_ADDR_VAR 0 9
1527: PUSH
1528: LD_INT 206
1530: PPUSH
1531: LD_INT 80
1533: PPUSH
1534: CALL_OW 428
1538: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1539: LD_ADDR_VAR 0 8
1543: PUSH
1544: LD_INT 203
1546: PPUSH
1547: LD_INT 91
1549: PPUSH
1550: CALL_OW 428
1554: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1555: LD_ADDR_VAR 0 10
1559: PUSH
1560: LD_INT 217
1562: PPUSH
1563: LD_INT 78
1565: PPUSH
1566: CALL_OW 428
1570: ST_TO_ADDR
// arDepot := depot ;
1571: LD_ADDR_EXP 43
1575: PUSH
1576: LD_VAR 0 9
1580: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 ] [ Difficulty ] ) ;
1581: LD_VAR 0 9
1585: PPUSH
1586: CALL_OW 274
1590: PPUSH
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 360
1596: PUSH
1597: LD_INT 260
1599: PUSH
1600: LD_INT 160
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: LD_OWVAR 67
1612: ARRAY
1613: PPUSH
1614: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 130 ] [ Difficulty ] ) ;
1618: LD_VAR 0 9
1622: PPUSH
1623: CALL_OW 274
1627: PPUSH
1628: LD_INT 2
1630: PPUSH
1631: LD_INT 200
1633: PUSH
1634: LD_INT 170
1636: PUSH
1637: LD_INT 130
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: LD_OWVAR 67
1649: ARRAY
1650: PPUSH
1651: CALL_OW 277
// uc_nation := 2 ;
1655: LD_ADDR_OWVAR 21
1659: PUSH
1660: LD_INT 2
1662: ST_TO_ADDR
// uc_side := 2 ;
1663: LD_ADDR_OWVAR 20
1667: PUSH
1668: LD_INT 2
1670: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
1671: LD_INT 13
1673: PPUSH
1674: LD_INT 1
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: LD_INT 27
1682: PPUSH
1683: LD_INT 33
1685: PPUSH
1686: CALL 29338 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
1690: CALL_OW 45
1694: PPUSH
1695: LD_INT 190
1697: PPUSH
1698: LD_INT 64
1700: PPUSH
1701: LD_INT 5
1703: PPUSH
1704: LD_INT 0
1706: PPUSH
1707: CALL 63143 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
1711: LD_INT 13
1713: PPUSH
1714: LD_INT 1
1716: PPUSH
1717: LD_INT 1
1719: PPUSH
1720: LD_INT 25
1722: PPUSH
1723: LD_INT 22
1725: PPUSH
1726: CALL 29338 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
1730: CALL_OW 45
1734: PPUSH
1735: LD_INT 188
1737: PPUSH
1738: LD_INT 67
1740: PPUSH
1741: LD_INT 5
1743: PPUSH
1744: LD_INT 0
1746: PPUSH
1747: CALL 63143 0 5
// if hasRemote then
1751: LD_VAR 0 6
1755: IFFALSE 1837
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
1757: LD_INT 13
1759: PPUSH
1760: LD_INT 1
1762: PPUSH
1763: LD_INT 1
1765: PPUSH
1766: LD_INT 31
1768: PPUSH
1769: LD_INT 35
1771: PPUSH
1772: CALL 29338 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
1776: CALL_OW 45
1780: PPUSH
1781: LD_INT 191
1783: PPUSH
1784: LD_INT 71
1786: PPUSH
1787: LD_INT 5
1789: PPUSH
1790: LD_INT 0
1792: PPUSH
1793: CALL 63143 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
1797: LD_INT 14
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 2
1805: PPUSH
1806: LD_INT 27
1808: PPUSH
1809: LD_INT 55
1811: PPUSH
1812: CALL 29338 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
1816: CALL_OW 45
1820: PPUSH
1821: LD_INT 199
1823: PPUSH
1824: LD_INT 67
1826: PPUSH
1827: LD_INT 0
1829: PPUSH
1830: LD_INT 0
1832: PPUSH
1833: CALL 63143 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1837: LD_EXP 29
1841: PPUSH
1842: LD_INT 213
1844: PPUSH
1845: LD_INT 87
1847: PPUSH
1848: LD_INT 0
1850: PPUSH
1851: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1855: LD_EXP 29
1859: PPUSH
1860: LD_INT 214
1862: PPUSH
1863: LD_INT 87
1865: PPUSH
1866: CALL_OW 118
// if Kaia then
1870: LD_EXP 34
1874: IFFALSE 1909
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1876: LD_EXP 34
1880: PPUSH
1881: LD_INT 213
1883: PPUSH
1884: LD_INT 85
1886: PPUSH
1887: LD_INT 0
1889: PPUSH
1890: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1894: LD_EXP 34
1898: PPUSH
1899: LD_INT 215
1901: PPUSH
1902: LD_INT 87
1904: PPUSH
1905: CALL_OW 118
// end ; if Olaf and Kaia then
1909: LD_EXP 38
1913: PUSH
1914: LD_EXP 34
1918: AND
1919: IFFALSE 1956
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1921: LD_EXP 38
1925: PPUSH
1926: LD_INT 215
1928: PPUSH
1929: LD_INT 87
1931: PPUSH
1932: LD_INT 0
1934: PPUSH
1935: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1939: LD_EXP 38
1943: PPUSH
1944: LD_INT 213
1946: PPUSH
1947: LD_INT 85
1949: PPUSH
1950: CALL_OW 118
// end else
1954: GO 1976
// if Olaf then
1956: LD_EXP 38
1960: IFFALSE 1976
// PlaceHumanInUnit ( Olaf , factory ) ;
1962: LD_EXP 38
1966: PPUSH
1967: LD_VAR 0 8
1971: PPUSH
1972: CALL_OW 52
// if Givi then
1976: LD_EXP 30
1980: IFFALSE 2061
// begin if Kaia and Olaf then
1982: LD_EXP 34
1986: PUSH
1987: LD_EXP 38
1991: AND
1992: IFFALSE 2029
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
1994: LD_EXP 30
1998: PPUSH
1999: LD_INT 247
2001: PPUSH
2002: LD_INT 117
2004: PPUSH
2005: LD_INT 0
2007: PPUSH
2008: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2012: LD_EXP 30
2016: PPUSH
2017: LD_INT 248
2019: PPUSH
2020: LD_INT 118
2022: PPUSH
2023: CALL_OW 118
// end else
2027: GO 2061
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2029: LD_EXP 30
2033: PPUSH
2034: LD_INT 216
2036: PPUSH
2037: LD_INT 88
2039: PPUSH
2040: LD_INT 0
2042: PPUSH
2043: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2047: LD_EXP 30
2051: PPUSH
2052: LD_EXP 29
2056: PPUSH
2057: CALL_OW 119
// end ; end ; if Kurt then
2061: LD_EXP 40
2065: IFFALSE 2085
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2067: LD_EXP 40
2071: PPUSH
2072: LD_VAR 0 11
2076: PUSH
2077: LD_INT 2
2079: ARRAY
2080: PPUSH
2081: CALL_OW 52
// if Mike then
2085: LD_EXP 31
2089: IFFALSE 2109
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2091: LD_EXP 31
2095: PPUSH
2096: LD_VAR 0 11
2100: PUSH
2101: LD_INT 3
2103: ARRAY
2104: PPUSH
2105: CALL_OW 52
// if Kamil then
2109: LD_EXP 33
2113: IFFALSE 2175
// begin if Kaia and Olaf then
2115: LD_EXP 34
2119: PUSH
2120: LD_EXP 38
2124: AND
2125: IFFALSE 2143
// PlaceHumanInUnit ( Kamil , depot ) else
2127: LD_EXP 33
2131: PPUSH
2132: LD_VAR 0 9
2136: PPUSH
2137: CALL_OW 52
2141: GO 2175
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
2143: LD_EXP 33
2147: PPUSH
2148: LD_INT 213
2150: PPUSH
2151: LD_INT 87
2153: PPUSH
2154: LD_INT 0
2156: PPUSH
2157: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
2161: LD_EXP 33
2165: PPUSH
2166: LD_EXP 29
2170: PPUSH
2171: CALL_OW 119
// end ; end ; if Sophia then
2175: LD_EXP 35
2179: IFFALSE 2195
// PlaceHumanInUnit ( Sophia , depot ) ;
2181: LD_EXP 35
2185: PPUSH
2186: LD_VAR 0 9
2190: PPUSH
2191: CALL_OW 52
// if Aviradze then
2195: LD_EXP 41
2199: IFFALSE 2215
// PlaceHumanInUnit ( Aviradze , lab ) ;
2201: LD_EXP 41
2205: PPUSH
2206: LD_VAR 0 10
2210: PPUSH
2211: CALL_OW 52
// if Ibrahim then
2215: LD_EXP 32
2219: IFFALSE 2235
// PlaceHumanInUnit ( Ibrahim , lab ) ;
2221: LD_EXP 32
2225: PPUSH
2226: LD_VAR 0 10
2230: PPUSH
2231: CALL_OW 52
// if Markov then
2235: LD_EXP 36
2239: IFFALSE 2255
// PlaceHumanInUnit ( Markov , factory ) ;
2241: LD_EXP 36
2245: PPUSH
2246: LD_VAR 0 8
2250: PPUSH
2251: CALL_OW 52
// if heikeSecondSquad then
2255: LD_EXP 44
2259: IFFALSE 2299
// for i in heikeSecondSquad do
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_EXP 44
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2297
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
2274: LD_VAR 0 2
2278: PPUSH
2279: LD_INT 190
2281: PPUSH
2282: LD_INT 65
2284: PPUSH
2285: LD_INT 5
2287: PPUSH
2288: LD_INT 0
2290: PPUSH
2291: CALL_OW 50
2295: GO 2271
2297: POP
2298: POP
// if heikeApes then
2299: LD_EXP 45
2303: IFFALSE 2343
// for i in heikeApes do
2305: LD_ADDR_VAR 0 2
2309: PUSH
2310: LD_EXP 45
2314: PUSH
2315: FOR_IN
2316: IFFALSE 2341
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
2318: LD_VAR 0 2
2322: PPUSH
2323: LD_INT 190
2325: PPUSH
2326: LD_INT 70
2328: PPUSH
2329: LD_INT 5
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 50
2339: GO 2315
2341: POP
2342: POP
// end ;
2343: LD_VAR 0 1
2347: RET
// export function PrepareRolfSquad ; var i , j ; begin
2348: LD_INT 0
2350: PPUSH
2351: PPUSH
2352: PPUSH
// uc_side := 8 ;
2353: LD_ADDR_OWVAR 20
2357: PUSH
2358: LD_INT 8
2360: ST_TO_ADDR
// uc_nation := 2 ;
2361: LD_ADDR_OWVAR 21
2365: PUSH
2366: LD_INT 2
2368: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
2369: LD_ADDR_EXP 42
2373: PUSH
2374: LD_STRING Bergkamp
2376: PPUSH
2377: CALL_OW 25
2381: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
2382: LD_ADDR_EXP 46
2386: PUSH
2387: LD_EXP 42
2391: PUSH
2392: EMPTY
2393: LIST
2394: ST_TO_ADDR
// for i := 1 to 4 do
2395: LD_ADDR_VAR 0 2
2399: PUSH
2400: DOUBLE
2401: LD_INT 1
2403: DEC
2404: ST_TO_ADDR
2405: LD_INT 4
2407: PUSH
2408: FOR_TO
2409: IFFALSE 2489
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
2411: LD_ADDR_VAR 0 3
2415: PUSH
2416: DOUBLE
2417: LD_INT 1
2419: DEC
2420: ST_TO_ADDR
2421: LD_INT 5
2423: PUSH
2424: LD_INT 2
2426: PUSH
2427: LD_INT 3
2429: PUSH
2430: LD_INT 1
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: PUSH
2439: LD_VAR 0 2
2443: ARRAY
2444: PUSH
2445: FOR_TO
2446: IFFALSE 2485
// begin PrepareHuman ( false , i , 5 ) ;
2448: LD_INT 0
2450: PPUSH
2451: LD_VAR 0 2
2455: PPUSH
2456: LD_INT 5
2458: PPUSH
2459: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
2463: LD_ADDR_EXP 46
2467: PUSH
2468: LD_EXP 46
2472: PPUSH
2473: CALL_OW 44
2477: PPUSH
2478: CALL 61212 0 2
2482: ST_TO_ADDR
// end ;
2483: GO 2445
2485: POP
2486: POP
// end ;
2487: GO 2408
2489: POP
2490: POP
// if HexInfo ( 5 , 3 ) then
2491: LD_INT 5
2493: PPUSH
2494: LD_INT 3
2496: PPUSH
2497: CALL_OW 428
2501: IFFALSE 2518
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
2503: LD_INT 5
2505: PPUSH
2506: LD_INT 3
2508: PPUSH
2509: CALL_OW 428
2513: PPUSH
2514: CALL_OW 64
// for i in rolfSquad do
2518: LD_ADDR_VAR 0 2
2522: PUSH
2523: LD_EXP 46
2527: PUSH
2528: FOR_IN
2529: IFFALSE 2665
// begin uc_direction := 2 ;
2531: LD_ADDR_OWVAR 24
2535: PUSH
2536: LD_INT 2
2538: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
2539: LD_VAR 0 2
2543: PPUSH
2544: CALL_OW 257
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: IFFALSE 2626
// begin uc_side := 8 ;
2554: LD_ADDR_OWVAR 20
2558: PUSH
2559: LD_INT 8
2561: ST_TO_ADDR
// uc_nation := 2 ;
2562: LD_ADDR_OWVAR 21
2566: PUSH
2567: LD_INT 2
2569: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
2570: LD_INT 13
2572: PPUSH
2573: LD_INT 1
2575: PPUSH
2576: LD_INT 1
2578: PPUSH
2579: LD_INT 27
2581: PPUSH
2582: LD_INT 88
2584: PPUSH
2585: CALL 29338 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
2589: CALL_OW 45
2593: PPUSH
2594: LD_INT 11
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
2604: LD_VAR 0 2
2608: PPUSH
2609: LD_INT 5
2611: PPUSH
2612: LD_INT 3
2614: PPUSH
2615: CALL_OW 428
2619: PPUSH
2620: CALL_OW 52
// end else
2624: GO 2641
// PlaceUnitArea ( i , northSpawn , false ) ;
2626: LD_VAR 0 2
2630: PPUSH
2631: LD_INT 11
2633: PPUSH
2634: LD_INT 0
2636: PPUSH
2637: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
2641: LD_VAR 0 2
2645: PPUSH
2646: LD_INT 29
2648: PPUSH
2649: LD_INT 10
2651: PPUSH
2652: CALL_OW 111
// wait ( 0 0$2 ) ;
2656: LD_INT 70
2658: PPUSH
2659: CALL_OW 67
// end ;
2663: GO 2528
2665: POP
2666: POP
// wait ( 0 0$5 ) ;
2667: LD_INT 175
2669: PPUSH
2670: CALL_OW 67
// end ;
2674: LD_VAR 0 1
2678: RET
// export function PrepareRolfBase ; var i , tmp ; begin
2679: LD_INT 0
2681: PPUSH
2682: PPUSH
2683: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
2684: LD_EXP 42
2688: PPUSH
2689: LD_INT 94
2691: PPUSH
2692: LD_INT 63
2694: PPUSH
2695: CALL_OW 428
2699: PPUSH
2700: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
2704: LD_ADDR_VAR 0 3
2708: PUSH
2709: LD_INT 4
2711: PUSH
2712: LD_INT 82
2714: PUSH
2715: LD_INT 64
2717: PUSH
2718: LD_INT 1
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: PUSH
2727: LD_INT 31
2729: PUSH
2730: LD_INT 73
2732: PUSH
2733: LD_INT 58
2735: PUSH
2736: LD_INT 0
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: LIST
2743: LIST
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: ST_TO_ADDR
// for i in tmp do
2749: LD_ADDR_VAR 0 2
2753: PUSH
2754: LD_VAR 0 3
2758: PUSH
2759: FOR_IN
2760: IFFALSE 2824
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2762: LD_EXP 46
2766: PPUSH
2767: LD_INT 25
2769: PUSH
2770: LD_INT 2
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PPUSH
2777: CALL_OW 72
2781: PPUSH
2782: LD_VAR 0 2
2786: PUSH
2787: LD_INT 1
2789: ARRAY
2790: PPUSH
2791: LD_VAR 0 2
2795: PUSH
2796: LD_INT 2
2798: ARRAY
2799: PPUSH
2800: LD_VAR 0 2
2804: PUSH
2805: LD_INT 3
2807: ARRAY
2808: PPUSH
2809: LD_VAR 0 2
2813: PUSH
2814: LD_INT 4
2816: ARRAY
2817: PPUSH
2818: CALL_OW 205
2822: GO 2759
2824: POP
2825: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
2826: LD_EXP 46
2830: PUSH
2831: LD_INT 2
2833: ARRAY
2834: PPUSH
2835: LD_INT 63
2837: PPUSH
2838: LD_INT 42
2840: PPUSH
2841: CALL_OW 428
2845: PPUSH
2846: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
2850: LD_EXP 46
2854: PUSH
2855: LD_INT 3
2857: ARRAY
2858: PPUSH
2859: LD_INT 94
2861: PPUSH
2862: LD_INT 63
2864: PPUSH
2865: CALL_OW 428
2869: PPUSH
2870: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2874: LD_INT 35
2876: PPUSH
2877: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
2881: LD_EXP 46
2885: PPUSH
2886: LD_INT 25
2888: PUSH
2889: LD_INT 2
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: PUSH
2896: LD_INT 3
2898: PUSH
2899: LD_INT 60
2901: PUSH
2902: EMPTY
2903: LIST
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PPUSH
2913: CALL_OW 72
2917: IFFALSE 2874
// rolfScriptBase := true ;
2919: LD_ADDR_EXP 9
2923: PUSH
2924: LD_INT 1
2926: ST_TO_ADDR
// end ;
2927: LD_VAR 0 1
2931: RET
// every 0 0$1 trigger rolfScriptBase do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
2932: LD_EXP 9
2936: IFFALSE 3943
2938: GO 2940
2940: DISABLE
2941: LD_INT 0
2943: PPUSH
2944: PPUSH
2945: PPUSH
2946: PPUSH
2947: PPUSH
2948: PPUSH
2949: PPUSH
2950: PPUSH
2951: PPUSH
2952: PPUSH
// begin enable ;
2953: ENABLE
// if not rolfSquad then
2954: LD_EXP 46
2958: NOT
2959: IFFALSE 2963
// exit ;
2961: GO 3943
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
2963: LD_ADDR_VAR 0 9
2967: PUSH
2968: LD_INT 12
2970: PPUSH
2971: LD_INT 81
2973: PUSH
2974: LD_INT 8
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PPUSH
2981: CALL_OW 70
2985: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
2986: LD_ADDR_VAR 0 5
2990: PUSH
2991: LD_EXP 46
2995: PPUSH
2996: LD_INT 25
2998: PUSH
2999: LD_INT 1
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PPUSH
3006: CALL_OW 72
3010: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3011: LD_ADDR_VAR 0 6
3015: PUSH
3016: LD_EXP 46
3020: PPUSH
3021: LD_INT 25
3023: PUSH
3024: LD_INT 2
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PPUSH
3031: CALL_OW 72
3035: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
3036: LD_ADDR_VAR 0 8
3040: PUSH
3041: LD_EXP 46
3045: PPUSH
3046: LD_INT 25
3048: PUSH
3049: LD_INT 3
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: PPUSH
3056: CALL_OW 72
3060: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
3061: LD_ADDR_VAR 0 7
3065: PUSH
3066: LD_EXP 46
3070: PPUSH
3071: LD_INT 25
3073: PUSH
3074: LD_INT 4
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: PPUSH
3081: CALL_OW 72
3085: ST_TO_ADDR
// if sol then
3086: LD_VAR 0 5
3090: IFFALSE 3388
// for i in sol union Rolf do
3092: LD_ADDR_VAR 0 1
3096: PUSH
3097: LD_VAR 0 5
3101: PUSH
3102: LD_EXP 42
3106: UNION
3107: PUSH
3108: FOR_IN
3109: IFFALSE 3386
// if not IsInUnit ( i ) and not HasTask ( i ) then
3111: LD_VAR 0 1
3115: PPUSH
3116: CALL_OW 310
3120: NOT
3121: PUSH
3122: LD_VAR 0 1
3126: PPUSH
3127: CALL_OW 314
3131: NOT
3132: AND
3133: IFFALSE 3384
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
3135: LD_VAR 0 1
3139: PPUSH
3140: CALL_OW 256
3144: PUSH
3145: LD_INT 500
3147: LESS
3148: PUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: LD_INT 80
3156: PPUSH
3157: LD_INT 49
3159: PPUSH
3160: CALL_OW 297
3164: PUSH
3165: LD_INT 6
3167: GREATER
3168: AND
3169: IFFALSE 3188
// begin ComMoveXY ( i , 80 , 49 ) ;
3171: LD_VAR 0 1
3175: PPUSH
3176: LD_INT 80
3178: PPUSH
3179: LD_INT 49
3181: PPUSH
3182: CALL_OW 111
// continue ;
3186: GO 3108
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
3188: LD_ADDR_VAR 0 4
3192: PUSH
3193: LD_INT 22
3195: PUSH
3196: LD_INT 8
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 50
3205: PUSH
3206: EMPTY
3207: LIST
3208: PUSH
3209: LD_INT 2
3211: PUSH
3212: LD_INT 30
3214: PUSH
3215: LD_INT 4
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: LD_INT 30
3224: PUSH
3225: LD_INT 5
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: LD_INT 30
3234: PUSH
3235: LD_INT 32
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: LD_INT 30
3244: PUSH
3245: LD_INT 31
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: LIST
3263: PPUSH
3264: CALL_OW 69
3268: ST_TO_ADDR
// if tmp then
3269: LD_VAR 0 4
3273: IFFALSE 3384
// begin for b in tmp do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: LD_VAR 0 4
3284: PUSH
3285: FOR_IN
3286: IFFALSE 3382
// begin case GetBType ( b ) of b_armoury , b_barracks :
3288: LD_VAR 0 2
3292: PPUSH
3293: CALL_OW 266
3297: PUSH
3298: LD_INT 4
3300: DOUBLE
3301: EQUAL
3302: IFTRUE 3312
3304: LD_INT 5
3306: DOUBLE
3307: EQUAL
3308: IFTRUE 3312
3310: GO 3323
3312: POP
// p := 6 ; b_breastwork , b_bunker :
3313: LD_ADDR_VAR 0 3
3317: PUSH
3318: LD_INT 6
3320: ST_TO_ADDR
3321: GO 3349
3323: LD_INT 31
3325: DOUBLE
3326: EQUAL
3327: IFTRUE 3337
3329: LD_INT 32
3331: DOUBLE
3332: EQUAL
3333: IFTRUE 3337
3335: GO 3348
3337: POP
// p := 1 ; end ;
3338: LD_ADDR_VAR 0 3
3342: PUSH
3343: LD_INT 1
3345: ST_TO_ADDR
3346: GO 3349
3348: POP
// if UnitsInside ( b ) < p then
3349: LD_VAR 0 2
3353: PPUSH
3354: CALL_OW 313
3358: PUSH
3359: LD_VAR 0 3
3363: LESS
3364: IFFALSE 3380
// ComEnterUnit ( i , b ) ;
3366: LD_VAR 0 1
3370: PPUSH
3371: LD_VAR 0 2
3375: PPUSH
3376: CALL_OW 120
// end ;
3380: GO 3285
3382: POP
3383: POP
// end ; end ;
3384: GO 3108
3386: POP
3387: POP
// if sci then
3388: LD_VAR 0 7
3392: IFFALSE 3447
// for i in sci do
3394: LD_ADDR_VAR 0 1
3398: PUSH
3399: LD_VAR 0 7
3403: PUSH
3404: FOR_IN
3405: IFFALSE 3445
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
3407: LD_VAR 0 1
3411: PPUSH
3412: LD_INT 80
3414: PPUSH
3415: LD_INT 49
3417: PPUSH
3418: CALL_OW 297
3422: PUSH
3423: LD_INT 9
3425: GREATER
3426: IFFALSE 3443
// ComMoveXY ( i , 80 , 49 ) ;
3428: LD_VAR 0 1
3432: PPUSH
3433: LD_INT 80
3435: PPUSH
3436: LD_INT 49
3438: PPUSH
3439: CALL_OW 111
// end ;
3443: GO 3404
3445: POP
3446: POP
// if mech then
3447: LD_VAR 0 8
3451: IFFALSE 3665
// for i in mech do
3453: LD_ADDR_VAR 0 1
3457: PUSH
3458: LD_VAR 0 8
3462: PUSH
3463: FOR_IN
3464: IFFALSE 3663
// begin hasVehicle := IsInUnit ( i ) ;
3466: LD_ADDR_VAR 0 10
3470: PUSH
3471: LD_VAR 0 1
3475: PPUSH
3476: CALL_OW 310
3480: ST_TO_ADDR
// if enemyInBase then
3481: LD_VAR 0 9
3485: IFFALSE 3581
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
3487: LD_VAR 0 10
3491: PUSH
3492: LD_VAR 0 10
3496: PPUSH
3497: CALL_OW 256
3501: PUSH
3502: LD_INT 500
3504: GREATER
3505: AND
3506: IFFALSE 3534
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
3508: LD_VAR 0 10
3512: PPUSH
3513: LD_VAR 0 9
3517: PPUSH
3518: LD_VAR 0 10
3522: PPUSH
3523: CALL_OW 74
3527: PPUSH
3528: CALL_OW 115
3532: GO 3579
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
3534: LD_VAR 0 10
3538: PPUSH
3539: LD_INT 86
3541: PPUSH
3542: LD_INT 49
3544: PPUSH
3545: CALL_OW 297
3549: PUSH
3550: LD_INT 8
3552: GREATER
3553: IFFALSE 3579
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
3555: LD_VAR 0 10
3559: PPUSH
3560: LD_INT 86
3562: PPUSH
3563: LD_INT 49
3565: PPUSH
3566: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: CALL 62823 0 1
// end end else
3579: GO 3661
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
3581: LD_VAR 0 1
3585: PPUSH
3586: LD_INT 86
3588: PPUSH
3589: LD_INT 49
3591: PPUSH
3592: CALL_OW 297
3596: PUSH
3597: LD_INT 8
3599: GREATER
3600: IFFALSE 3619
// ComMoveXY ( i , 86 , 49 ) else
3602: LD_VAR 0 1
3606: PPUSH
3607: LD_INT 86
3609: PPUSH
3610: LD_INT 49
3612: PPUSH
3613: CALL_OW 111
3617: GO 3661
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
3619: LD_VAR 0 10
3623: PUSH
3624: LD_VAR 0 10
3628: PPUSH
3629: CALL_OW 256
3633: PUSH
3634: LD_INT 1000
3636: LESS
3637: AND
3638: IFFALSE 3661
// begin SetFuel ( hasVehicle , 100 ) ;
3640: LD_VAR 0 10
3644: PPUSH
3645: LD_INT 100
3647: PPUSH
3648: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
3652: LD_VAR 0 1
3656: PPUSH
3657: CALL 62703 0 1
// end ; end ; end ;
3661: GO 3463
3663: POP
3664: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3665: LD_ADDR_VAR 0 4
3669: PUSH
3670: LD_INT 12
3672: PPUSH
3673: LD_INT 3
3675: PUSH
3676: LD_INT 24
3678: PUSH
3679: LD_INT 1000
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: PUSH
3690: LD_INT 21
3692: PUSH
3693: LD_INT 3
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PPUSH
3704: CALL_OW 70
3708: ST_TO_ADDR
// if tmp and eng then
3709: LD_VAR 0 4
3713: PUSH
3714: LD_VAR 0 6
3718: AND
3719: IFFALSE 3825
// begin for i in eng do
3721: LD_ADDR_VAR 0 1
3725: PUSH
3726: LD_VAR 0 6
3730: PUSH
3731: FOR_IN
3732: IFFALSE 3823
// if IsInUnit ( i ) then
3734: LD_VAR 0 1
3738: PPUSH
3739: CALL_OW 310
3743: IFFALSE 3756
// ComExitBuilding ( i ) else
3745: LD_VAR 0 1
3749: PPUSH
3750: CALL_OW 122
3754: GO 3821
// if GetLives ( i ) = 1000 then
3756: LD_VAR 0 1
3760: PPUSH
3761: CALL_OW 256
3765: PUSH
3766: LD_INT 1000
3768: EQUAL
3769: IFFALSE 3791
// ComRepairBuilding ( i , tmp [ 1 ] ) else
3771: LD_VAR 0 1
3775: PPUSH
3776: LD_VAR 0 4
3780: PUSH
3781: LD_INT 1
3783: ARRAY
3784: PPUSH
3785: CALL_OW 130
3789: GO 3821
// if GetLives ( i ) < 700 then
3791: LD_VAR 0 1
3795: PPUSH
3796: CALL_OW 256
3800: PUSH
3801: LD_INT 700
3803: LESS
3804: IFFALSE 3821
// ComMoveXY ( i , 80 , 49 ) ;
3806: LD_VAR 0 1
3810: PPUSH
3811: LD_INT 80
3813: PPUSH
3814: LD_INT 49
3816: PPUSH
3817: CALL_OW 111
3821: GO 3731
3823: POP
3824: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
3825: LD_VAR 0 4
3829: NOT
3830: PUSH
3831: LD_VAR 0 6
3835: PPUSH
3836: LD_INT 3
3838: PUSH
3839: LD_INT 54
3841: PUSH
3842: EMPTY
3843: LIST
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: PPUSH
3849: CALL_OW 72
3853: AND
3854: IFFALSE 3943
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
3856: LD_ADDR_VAR 0 1
3860: PUSH
3861: LD_VAR 0 6
3865: PPUSH
3866: LD_INT 3
3868: PUSH
3869: LD_INT 54
3871: PUSH
3872: EMPTY
3873: LIST
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: PPUSH
3879: CALL_OW 72
3883: PUSH
3884: FOR_IN
3885: IFFALSE 3941
// if GetLives ( i ) < 1000 then
3887: LD_VAR 0 1
3891: PPUSH
3892: CALL_OW 256
3896: PUSH
3897: LD_INT 1000
3899: LESS
3900: IFFALSE 3919
// ComMoveXY ( i , 80 , 49 ) else
3902: LD_VAR 0 1
3906: PPUSH
3907: LD_INT 80
3909: PPUSH
3910: LD_INT 49
3912: PPUSH
3913: CALL_OW 111
3917: GO 3939
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
3919: LD_VAR 0 1
3923: PPUSH
3924: LD_INT 86
3926: PPUSH
3927: LD_INT 54
3929: PPUSH
3930: CALL_OW 428
3934: PPUSH
3935: CALL_OW 120
3939: GO 3884
3941: POP
3942: POP
// end ;
3943: PPOPN 10
3945: END
// export function PrepareOmarSquad ; var i , j , p ; begin
3946: LD_INT 0
3948: PPUSH
3949: PPUSH
3950: PPUSH
3951: PPUSH
// uc_side := 5 ;
3952: LD_ADDR_OWVAR 20
3956: PUSH
3957: LD_INT 5
3959: ST_TO_ADDR
// uc_nation := 2 ;
3960: LD_ADDR_OWVAR 21
3964: PUSH
3965: LD_INT 2
3967: ST_TO_ADDR
// omarSquad := [ ] ;
3968: LD_ADDR_EXP 47
3972: PUSH
3973: EMPTY
3974: ST_TO_ADDR
// for i := 1 to 4 do
3975: LD_ADDR_VAR 0 2
3979: PUSH
3980: DOUBLE
3981: LD_INT 1
3983: DEC
3984: ST_TO_ADDR
3985: LD_INT 4
3987: PUSH
3988: FOR_TO
3989: IFFALSE 4112
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
3991: LD_ADDR_VAR 0 3
3995: PUSH
3996: DOUBLE
3997: LD_INT 1
3999: DEC
4000: ST_TO_ADDR
4001: LD_INT 6
4003: PUSH
4004: LD_INT 2
4006: PUSH
4007: LD_INT 2
4009: PUSH
4010: LD_EXP 21
4014: PLUS
4015: PUSH
4016: LD_INT 2
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: PUSH
4025: LD_VAR 0 2
4029: ARRAY
4030: PUSH
4031: FOR_TO
4032: IFFALSE 4108
// begin PrepareHuman ( false , i , 5 ) ;
4034: LD_INT 0
4036: PPUSH
4037: LD_VAR 0 2
4041: PPUSH
4042: LD_INT 5
4044: PPUSH
4045: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
4049: LD_ADDR_EXP 47
4053: PUSH
4054: LD_EXP 47
4058: PPUSH
4059: CALL_OW 44
4063: PPUSH
4064: CALL 61212 0 2
4068: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
4069: LD_VAR 0 2
4073: PUSH
4074: LD_INT 1
4076: EQUAL
4077: PUSH
4078: LD_INT 50
4080: PPUSH
4081: CALL_OW 13
4085: AND
4086: IFFALSE 4106
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
4088: LD_EXP 47
4092: PUSH
4093: LD_EXP 47
4097: ARRAY
4098: PPUSH
4099: LD_INT 8
4101: PPUSH
4102: CALL_OW 336
// end ;
4106: GO 4031
4108: POP
4109: POP
// end ;
4110: GO 3988
4112: POP
4113: POP
// if HexInfo ( 340 , 205 ) then
4114: LD_INT 340
4116: PPUSH
4117: LD_INT 205
4119: PPUSH
4120: CALL_OW 428
4124: IFFALSE 4141
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
4126: LD_INT 340
4128: PPUSH
4129: LD_INT 205
4131: PPUSH
4132: CALL_OW 428
4136: PPUSH
4137: CALL_OW 64
// p := 0 ;
4141: LD_ADDR_VAR 0 4
4145: PUSH
4146: LD_INT 0
4148: ST_TO_ADDR
// for i in omarSquad do
4149: LD_ADDR_VAR 0 2
4153: PUSH
4154: LD_EXP 47
4158: PUSH
4159: FOR_IN
4160: IFFALSE 4361
// begin uc_direction := 4 ;
4162: LD_ADDR_OWVAR 24
4166: PUSH
4167: LD_INT 4
4169: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
4170: LD_VAR 0 2
4174: PPUSH
4175: CALL_OW 257
4179: PUSH
4180: LD_INT 3
4182: EQUAL
4183: PUSH
4184: LD_VAR 0 4
4188: PUSH
4189: LD_INT 2
4191: LESS
4192: AND
4193: IFFALSE 4322
// begin p := p + 1 ;
4195: LD_ADDR_VAR 0 4
4199: PUSH
4200: LD_VAR 0 4
4204: PUSH
4205: LD_INT 1
4207: PLUS
4208: ST_TO_ADDR
// uc_side := 5 ;
4209: LD_ADDR_OWVAR 20
4213: PUSH
4214: LD_INT 5
4216: ST_TO_ADDR
// if rand ( 0 , 1 ) then
4217: LD_INT 0
4219: PPUSH
4220: LD_INT 1
4222: PPUSH
4223: CALL_OW 12
4227: IFFALSE 4258
// begin uc_nation := 2 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 2
4236: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
4237: LD_INT 13
4239: PPUSH
4240: LD_INT 1
4242: PPUSH
4243: LD_INT 1
4245: PPUSH
4246: LD_INT 27
4248: PPUSH
4249: LD_INT 88
4251: PPUSH
4252: CALL 29338 0 5
// end else
4256: GO 4285
// begin uc_nation := 3 ;
4258: LD_ADDR_OWVAR 21
4262: PUSH
4263: LD_INT 3
4265: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
4266: LD_INT 22
4268: PPUSH
4269: LD_INT 1
4271: PPUSH
4272: LD_INT 1
4274: PPUSH
4275: LD_INT 45
4277: PPUSH
4278: LD_INT 88
4280: PPUSH
4281: CALL 29338 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
4285: CALL_OW 45
4289: PPUSH
4290: LD_INT 13
4292: PPUSH
4293: LD_INT 0
4295: PPUSH
4296: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
4300: LD_VAR 0 2
4304: PPUSH
4305: LD_INT 340
4307: PPUSH
4308: LD_INT 205
4310: PPUSH
4311: CALL_OW 428
4315: PPUSH
4316: CALL_OW 52
// end else
4320: GO 4337
// PlaceUnitArea ( i , southSpawn , false ) ;
4322: LD_VAR 0 2
4326: PPUSH
4327: LD_INT 13
4329: PPUSH
4330: LD_INT 0
4332: PPUSH
4333: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
4337: LD_VAR 0 2
4341: PPUSH
4342: LD_INT 333
4344: PPUSH
4345: LD_INT 210
4347: PPUSH
4348: CALL_OW 111
// wait ( 0 0$2 ) ;
4352: LD_INT 70
4354: PPUSH
4355: CALL_OW 67
// end ;
4359: GO 4159
4361: POP
4362: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
4363: LD_EXP 39
4367: PPUSH
4368: LD_INT 340
4370: PPUSH
4371: LD_INT 205
4373: PPUSH
4374: LD_INT 0
4376: PPUSH
4377: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
4381: LD_EXP 39
4385: PPUSH
4386: LD_INT 333
4388: PPUSH
4389: LD_INT 206
4391: PPUSH
4392: CALL_OW 111
// wait ( 0 0$2 ) ;
4396: LD_INT 70
4398: PPUSH
4399: CALL_OW 67
// ComHold ( omarSquad ) ;
4403: LD_EXP 47
4407: PPUSH
4408: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
4412: LD_EXP 39
4416: PUSH
4417: LD_EXP 47
4421: PPUSH
4422: LD_INT 2
4424: PUSH
4425: LD_INT 25
4427: PUSH
4428: LD_INT 1
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: PUSH
4435: LD_INT 25
4437: PUSH
4438: LD_INT 8
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: LIST
4449: PPUSH
4450: CALL_OW 72
4454: UNION
4455: PUSH
4456: LD_INT 22
4458: PUSH
4459: LD_INT 5
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: LD_INT 21
4468: PUSH
4469: LD_INT 2
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: UNION
4485: PPUSH
4486: LD_INT 315
4488: PPUSH
4489: LD_INT 214
4491: PPUSH
4492: CALL_OW 114
// wait ( 0 0$22 ) ;
4496: LD_INT 770
4498: PPUSH
4499: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
4503: LD_EXP 47
4507: PUSH
4508: LD_EXP 39
4512: UNION
4513: PPUSH
4514: LD_INT 329
4516: PPUSH
4517: LD_INT 231
4519: PPUSH
4520: CALL_OW 114
// end ;
4524: LD_VAR 0 1
4528: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4529: LD_EXP 10
4533: IFFALSE 5616
4535: GO 4537
4537: DISABLE
4538: LD_INT 0
4540: PPUSH
4541: PPUSH
4542: PPUSH
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
4547: PPUSH
4548: PPUSH
4549: PPUSH
4550: PPUSH
// begin enable ;
4551: ENABLE
// if not omarSquad then
4552: LD_EXP 47
4556: NOT
4557: IFFALSE 4561
// exit ;
4559: GO 5616
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
4561: LD_ADDR_VAR 0 10
4565: PUSH
4566: LD_INT 14
4568: PPUSH
4569: LD_INT 81
4571: PUSH
4572: LD_INT 5
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PPUSH
4579: CALL_OW 70
4583: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
4584: LD_ADDR_VAR 0 6
4588: PUSH
4589: LD_EXP 47
4593: PPUSH
4594: LD_INT 2
4596: PUSH
4597: LD_INT 25
4599: PUSH
4600: LD_INT 1
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 25
4609: PUSH
4610: LD_INT 8
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: LIST
4621: PPUSH
4622: CALL_OW 72
4626: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
4627: LD_ADDR_VAR 0 7
4631: PUSH
4632: LD_EXP 47
4636: PPUSH
4637: LD_INT 25
4639: PUSH
4640: LD_INT 2
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: PPUSH
4647: CALL_OW 72
4651: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
4652: LD_ADDR_VAR 0 9
4656: PUSH
4657: LD_EXP 47
4661: PPUSH
4662: LD_INT 25
4664: PUSH
4665: LD_INT 3
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: PPUSH
4672: CALL_OW 72
4676: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
4677: LD_ADDR_VAR 0 8
4681: PUSH
4682: LD_EXP 47
4686: PPUSH
4687: LD_INT 25
4689: PUSH
4690: LD_INT 4
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: PPUSH
4697: CALL_OW 72
4701: ST_TO_ADDR
// if sol then
4702: LD_VAR 0 6
4706: IFFALSE 5070
// for i in sol do
4708: LD_ADDR_VAR 0 1
4712: PUSH
4713: LD_VAR 0 6
4717: PUSH
4718: FOR_IN
4719: IFFALSE 5068
// if not HasTask ( i ) then
4721: LD_VAR 0 1
4725: PPUSH
4726: CALL_OW 314
4730: NOT
4731: IFFALSE 5066
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
4733: LD_VAR 0 1
4737: PPUSH
4738: CALL_OW 310
4742: NOT
4743: PUSH
4744: LD_VAR 0 1
4748: PPUSH
4749: CALL_OW 256
4753: PUSH
4754: LD_INT 500
4756: LESS
4757: AND
4758: PUSH
4759: LD_VAR 0 1
4763: PPUSH
4764: LD_INT 333
4766: PPUSH
4767: LD_INT 234
4769: PPUSH
4770: CALL_OW 297
4774: PUSH
4775: LD_INT 6
4777: GREATER
4778: AND
4779: IFFALSE 4798
// begin ComMoveXY ( i , 333 , 234 ) ;
4781: LD_VAR 0 1
4785: PPUSH
4786: LD_INT 333
4788: PPUSH
4789: LD_INT 234
4791: PPUSH
4792: CALL_OW 111
// continue ;
4796: GO 4718
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4798: LD_ADDR_VAR 0 5
4802: PUSH
4803: LD_INT 22
4805: PUSH
4806: LD_INT 5
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: LD_INT 58
4815: PUSH
4816: EMPTY
4817: LIST
4818: PUSH
4819: LD_INT 50
4821: PUSH
4822: EMPTY
4823: LIST
4824: PUSH
4825: LD_INT 2
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 32
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 30
4840: PUSH
4841: LD_INT 31
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: LIST
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: PPUSH
4859: CALL_OW 69
4863: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
4864: LD_VAR 0 5
4868: PUSH
4869: LD_VAR 0 1
4873: PPUSH
4874: CALL_OW 310
4878: PPUSH
4879: CALL_OW 266
4883: PUSH
4884: LD_INT 31
4886: NONEQUAL
4887: AND
4888: IFFALSE 4970
// begin for j in tmp do
4890: LD_ADDR_VAR 0 2
4894: PUSH
4895: LD_VAR 0 5
4899: PUSH
4900: FOR_IN
4901: IFFALSE 4966
// if GetTag ( j ) <> 1 then
4903: LD_VAR 0 2
4907: PPUSH
4908: CALL_OW 110
4912: PUSH
4913: LD_INT 1
4915: NONEQUAL
4916: IFFALSE 4964
// begin SetTag ( j , 1 ) ;
4918: LD_VAR 0 2
4922: PPUSH
4923: LD_INT 1
4925: PPUSH
4926: CALL_OW 109
// if IsInUnit ( i ) then
4930: LD_VAR 0 1
4934: PPUSH
4935: CALL_OW 310
4939: IFFALSE 4950
// ComExit ( i ) ;
4941: LD_VAR 0 1
4945: PPUSH
4946: CALL 61600 0 1
// AddComEnterUnit ( i , j ) ;
4950: LD_VAR 0 1
4954: PPUSH
4955: LD_VAR 0 2
4959: PPUSH
4960: CALL_OW 180
// end ;
4964: GO 4900
4966: POP
4967: POP
// end else
4968: GO 5066
// if not IsInUnit ( i ) then
4970: LD_VAR 0 1
4974: PPUSH
4975: CALL_OW 310
4979: NOT
4980: IFFALSE 5066
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
4982: LD_ADDR_VAR 0 5
4986: PUSH
4987: LD_INT 22
4989: PUSH
4990: LD_INT 5
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: LD_INT 50
4999: PUSH
5000: EMPTY
5001: LIST
5002: PUSH
5003: LD_INT 30
5005: PUSH
5006: LD_INT 4
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: LIST
5017: PPUSH
5018: CALL_OW 69
5022: ST_TO_ADDR
// if tmp then
5023: LD_VAR 0 5
5027: IFFALSE 5066
// if UnitsInside ( tmp [ 1 ] ) < 6 then
5029: LD_VAR 0 5
5033: PUSH
5034: LD_INT 1
5036: ARRAY
5037: PPUSH
5038: CALL_OW 313
5042: PUSH
5043: LD_INT 6
5045: LESS
5046: IFFALSE 5066
// ComEnterUnit ( i , tmp [ 1 ] ) ;
5048: LD_VAR 0 1
5052: PPUSH
5053: LD_VAR 0 5
5057: PUSH
5058: LD_INT 1
5060: ARRAY
5061: PPUSH
5062: CALL_OW 120
// end ; end ;
5066: GO 4718
5068: POP
5069: POP
// if sci then
5070: LD_VAR 0 8
5074: IFFALSE 5129
// for i in sci do
5076: LD_ADDR_VAR 0 1
5080: PUSH
5081: LD_VAR 0 8
5085: PUSH
5086: FOR_IN
5087: IFFALSE 5127
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
5089: LD_VAR 0 1
5093: PPUSH
5094: LD_INT 333
5096: PPUSH
5097: LD_INT 234
5099: PPUSH
5100: CALL_OW 297
5104: PUSH
5105: LD_INT 9
5107: GREATER
5108: IFFALSE 5125
// ComMoveXY ( i , 333 , 234 ) ;
5110: LD_VAR 0 1
5114: PPUSH
5115: LD_INT 333
5117: PPUSH
5118: LD_INT 234
5120: PPUSH
5121: CALL_OW 111
// end ;
5125: GO 5086
5127: POP
5128: POP
// if mech then
5129: LD_VAR 0 9
5133: IFFALSE 5338
// for i in mech do
5135: LD_ADDR_VAR 0 1
5139: PUSH
5140: LD_VAR 0 9
5144: PUSH
5145: FOR_IN
5146: IFFALSE 5336
// begin hasVehicle := IsInUnit ( i ) ;
5148: LD_ADDR_VAR 0 11
5152: PUSH
5153: LD_VAR 0 1
5157: PPUSH
5158: CALL_OW 310
5162: ST_TO_ADDR
// if enemyInBase then
5163: LD_VAR 0 10
5167: IFFALSE 5254
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
5169: LD_VAR 0 11
5173: PUSH
5174: LD_VAR 0 11
5178: PPUSH
5179: CALL_OW 256
5183: PUSH
5184: LD_INT 500
5186: GREATER
5187: AND
5188: IFFALSE 5216
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
5190: LD_VAR 0 11
5194: PPUSH
5195: LD_VAR 0 10
5199: PPUSH
5200: LD_VAR 0 11
5204: PPUSH
5205: CALL_OW 74
5209: PPUSH
5210: CALL_OW 115
5214: GO 5252
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
5216: LD_VAR 0 11
5220: PPUSH
5221: LD_INT 333
5223: PPUSH
5224: LD_INT 234
5226: PPUSH
5227: CALL_OW 297
5231: PUSH
5232: LD_INT 6
5234: GREATER
5235: IFFALSE 5252
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
5237: LD_VAR 0 11
5241: PPUSH
5242: LD_INT 333
5244: PPUSH
5245: LD_INT 234
5247: PPUSH
5248: CALL_OW 111
// end else
5252: GO 5334
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
5254: LD_VAR 0 1
5258: PPUSH
5259: LD_INT 333
5261: PPUSH
5262: LD_INT 234
5264: PPUSH
5265: CALL_OW 297
5269: PUSH
5270: LD_INT 6
5272: GREATER
5273: IFFALSE 5292
// ComMoveXY ( i , 333 , 234 ) else
5275: LD_VAR 0 1
5279: PPUSH
5280: LD_INT 333
5282: PPUSH
5283: LD_INT 234
5285: PPUSH
5286: CALL_OW 111
5290: GO 5334
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
5292: LD_VAR 0 11
5296: PUSH
5297: LD_VAR 0 11
5301: PPUSH
5302: CALL_OW 256
5306: PUSH
5307: LD_INT 1000
5309: LESS
5310: AND
5311: IFFALSE 5334
// begin SetFuel ( hasVehicle , 100 ) ;
5313: LD_VAR 0 11
5317: PPUSH
5318: LD_INT 100
5320: PPUSH
5321: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
5325: LD_VAR 0 1
5329: PPUSH
5330: CALL 62703 0 1
// end ; end ; end ;
5334: GO 5145
5336: POP
5337: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
5338: LD_ADDR_VAR 0 5
5342: PUSH
5343: LD_INT 14
5345: PPUSH
5346: LD_INT 3
5348: PUSH
5349: LD_INT 24
5351: PUSH
5352: LD_INT 1000
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PUSH
5363: LD_INT 21
5365: PUSH
5366: LD_INT 3
5368: PUSH
5369: EMPTY
5370: LIST
5371: LIST
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PPUSH
5377: CALL_OW 70
5381: ST_TO_ADDR
// if tmp and eng then
5382: LD_VAR 0 5
5386: PUSH
5387: LD_VAR 0 7
5391: AND
5392: IFFALSE 5498
// begin for i in eng do
5394: LD_ADDR_VAR 0 1
5398: PUSH
5399: LD_VAR 0 7
5403: PUSH
5404: FOR_IN
5405: IFFALSE 5496
// if IsInUnit ( i ) then
5407: LD_VAR 0 1
5411: PPUSH
5412: CALL_OW 310
5416: IFFALSE 5429
// ComExitBuilding ( i ) else
5418: LD_VAR 0 1
5422: PPUSH
5423: CALL_OW 122
5427: GO 5494
// if GetLives ( i ) = 1000 then
5429: LD_VAR 0 1
5433: PPUSH
5434: CALL_OW 256
5438: PUSH
5439: LD_INT 1000
5441: EQUAL
5442: IFFALSE 5464
// ComRepairBuilding ( i , tmp [ 1 ] ) else
5444: LD_VAR 0 1
5448: PPUSH
5449: LD_VAR 0 5
5453: PUSH
5454: LD_INT 1
5456: ARRAY
5457: PPUSH
5458: CALL_OW 130
5462: GO 5494
// if GetLives ( i ) < 700 then
5464: LD_VAR 0 1
5468: PPUSH
5469: CALL_OW 256
5473: PUSH
5474: LD_INT 700
5476: LESS
5477: IFFALSE 5494
// ComMoveXY ( i , 333 , 234 ) ;
5479: LD_VAR 0 1
5483: PPUSH
5484: LD_INT 333
5486: PPUSH
5487: LD_INT 234
5489: PPUSH
5490: CALL_OW 111
5494: GO 5404
5496: POP
5497: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5498: LD_VAR 0 5
5502: NOT
5503: PUSH
5504: LD_VAR 0 7
5508: PPUSH
5509: LD_INT 3
5511: PUSH
5512: LD_INT 54
5514: PUSH
5515: EMPTY
5516: LIST
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PPUSH
5522: CALL_OW 72
5526: AND
5527: IFFALSE 5616
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5529: LD_ADDR_VAR 0 1
5533: PUSH
5534: LD_VAR 0 7
5538: PPUSH
5539: LD_INT 3
5541: PUSH
5542: LD_INT 54
5544: PUSH
5545: EMPTY
5546: LIST
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: PPUSH
5552: CALL_OW 72
5556: PUSH
5557: FOR_IN
5558: IFFALSE 5614
// if GetLives ( i ) < 1000 then
5560: LD_VAR 0 1
5564: PPUSH
5565: CALL_OW 256
5569: PUSH
5570: LD_INT 1000
5572: LESS
5573: IFFALSE 5592
// ComMoveXY ( i , 333 , 234 ) else
5575: LD_VAR 0 1
5579: PPUSH
5580: LD_INT 333
5582: PPUSH
5583: LD_INT 234
5585: PPUSH
5586: CALL_OW 111
5590: GO 5612
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
5592: LD_VAR 0 1
5596: PPUSH
5597: LD_INT 341
5599: PPUSH
5600: LD_INT 232
5602: PPUSH
5603: CALL_OW 428
5607: PPUSH
5608: CALL_OW 120
5612: GO 5557
5614: POP
5615: POP
// end ;
5616: PPOPN 11
5618: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
5619: LD_EXP 39
5623: PPUSH
5624: CALL_OW 256
5628: PUSH
5629: LD_INT 1000
5631: LESS
5632: IFFALSE 5650
5634: GO 5636
5636: DISABLE
// begin enable ;
5637: ENABLE
// SetLives ( Omar , 1000 ) ;
5638: LD_EXP 39
5642: PPUSH
5643: LD_INT 1000
5645: PPUSH
5646: CALL_OW 234
// end ;
5650: END
// every 0 0$1 trigger omarAttack do var i , nearestPoint ;
5651: LD_EXP 23
5655: IFFALSE 6531
5657: GO 5659
5659: DISABLE
5660: LD_INT 0
5662: PPUSH
5663: PPUSH
// begin wait ( 0 0$25 ) ;
5664: LD_INT 875
5666: PPUSH
5667: CALL_OW 67
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
5671: LD_EXP 47
5675: PPUSH
5676: LD_INT 2
5678: PUSH
5679: LD_INT 25
5681: PUSH
5682: LD_INT 1
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 25
5691: PUSH
5692: LD_INT 8
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: LIST
5703: PPUSH
5704: CALL_OW 72
5708: PPUSH
5709: CALL_OW 122
// wait ( 0 0$3 ) ;
5713: LD_INT 105
5715: PPUSH
5716: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , 225 , 223 ) ;
5720: LD_EXP 47
5724: PUSH
5725: LD_EXP 39
5729: UNION
5730: PPUSH
5731: LD_INT 225
5733: PPUSH
5734: LD_INT 223
5736: PPUSH
5737: CALL_OW 174
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_type , unit_vehicle ] ] ] ) , 167 , 231 ) ;
5741: LD_INT 22
5743: PUSH
5744: LD_INT 5
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: PUSH
5751: LD_INT 2
5753: PUSH
5754: LD_INT 25
5756: PUSH
5757: LD_INT 1
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: PUSH
5764: LD_INT 25
5766: PUSH
5767: LD_INT 8
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PUSH
5774: LD_INT 21
5776: PUSH
5777: LD_INT 2
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PPUSH
5794: CALL_OW 69
5798: PPUSH
5799: LD_INT 167
5801: PPUSH
5802: LD_INT 231
5804: PPUSH
5805: CALL_OW 174
// AddComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 222 , 229 ) ;
5809: LD_EXP 47
5813: PPUSH
5814: LD_INT 25
5816: PUSH
5817: LD_INT 4
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 72
5828: PPUSH
5829: LD_INT 222
5831: PPUSH
5832: LD_INT 229
5834: PPUSH
5835: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5839: LD_INT 35
5841: PPUSH
5842: CALL_OW 67
// for i in omarSquad union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
5846: LD_ADDR_VAR 0 1
5850: PUSH
5851: LD_EXP 47
5855: PUSH
5856: LD_INT 22
5858: PUSH
5859: LD_INT 5
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: PUSH
5866: LD_INT 21
5868: PUSH
5869: LD_INT 2
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: PPUSH
5880: CALL_OW 69
5884: UNION
5885: PUSH
5886: FOR_IN
5887: IFFALSE 6522
// begin if IsDead ( i ) then
5889: LD_VAR 0 1
5893: PPUSH
5894: CALL_OW 301
5898: IFFALSE 5918
// begin omarSquad := omarSquad diff i ;
5900: LD_ADDR_EXP 47
5904: PUSH
5905: LD_EXP 47
5909: PUSH
5910: LD_VAR 0 1
5914: DIFF
5915: ST_TO_ADDR
// continue ;
5916: GO 5886
// end ; if GetClass ( i ) in [ 1 , 8 ] then
5918: LD_VAR 0 1
5922: PPUSH
5923: CALL_OW 257
5927: PUSH
5928: LD_INT 1
5930: PUSH
5931: LD_INT 8
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: IN
5938: IFFALSE 6132
// begin if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
5940: LD_VAR 0 1
5944: PPUSH
5945: CALL_OW 256
5949: PUSH
5950: LD_INT 700
5952: LESS
5953: PUSH
5954: LD_VAR 0 1
5958: PPUSH
5959: CALL_OW 110
5963: PUSH
5964: LD_INT 0
5966: EQUAL
5967: AND
5968: IFFALSE 5997
// begin SetTag ( i , 1 ) ;
5970: LD_VAR 0 1
5974: PPUSH
5975: LD_INT 1
5977: PPUSH
5978: CALL_OW 109
// ComMoveXY ( i , 222 , 229 ) ;
5982: LD_VAR 0 1
5986: PPUSH
5987: LD_INT 222
5989: PPUSH
5990: LD_INT 229
5992: PPUSH
5993: CALL_OW 111
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
5997: LD_VAR 0 1
6001: PPUSH
6002: CALL_OW 256
6006: PUSH
6007: LD_INT 1000
6009: EQUAL
6010: PUSH
6011: LD_VAR 0 1
6015: PPUSH
6016: CALL_OW 110
6020: PUSH
6021: LD_INT 1
6023: EQUAL
6024: AND
6025: IFFALSE 6039
// SetTag ( i , 0 ) ;
6027: LD_VAR 0 1
6031: PPUSH
6032: LD_INT 0
6034: PPUSH
6035: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and not HasTask ( i ) then
6039: LD_VAR 0 1
6043: PPUSH
6044: CALL_OW 110
6048: PUSH
6049: LD_INT 0
6051: EQUAL
6052: PUSH
6053: LD_VAR 0 1
6057: PPUSH
6058: CALL_OW 256
6062: PUSH
6063: LD_INT 700
6065: GREATEREQUAL
6066: AND
6067: PUSH
6068: LD_VAR 0 1
6072: PPUSH
6073: CALL_OW 314
6077: NOT
6078: AND
6079: IFFALSE 6132
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6081: LD_INT 18
6083: PPUSH
6084: LD_INT 22
6086: PUSH
6087: LD_INT 3
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PPUSH
6094: CALL_OW 70
6098: IFFALSE 6117
// ComAgressiveMove ( i , 167 , 231 ) else
6100: LD_VAR 0 1
6104: PPUSH
6105: LD_INT 167
6107: PPUSH
6108: LD_INT 231
6110: PPUSH
6111: CALL_OW 114
6115: GO 6132
// ComAgressiveMove ( i , 106 , 153 ) ;
6117: LD_VAR 0 1
6121: PPUSH
6122: LD_INT 106
6124: PPUSH
6125: LD_INT 153
6127: PPUSH
6128: CALL_OW 114
// end ; if GetType ( i ) = unit_vehicle then
6132: LD_VAR 0 1
6136: PPUSH
6137: CALL_OW 247
6141: PUSH
6142: LD_INT 2
6144: EQUAL
6145: IFFALSE 6520
// begin nearestPoint := [ 219 , 219 ] ;
6147: LD_ADDR_VAR 0 2
6151: PUSH
6152: LD_INT 219
6154: PUSH
6155: LD_INT 219
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: ST_TO_ADDR
// if GetDistUnitXY ( i , 156 , 202 ) < GetDistUnitXY ( i , 219 , 219 ) then
6162: LD_VAR 0 1
6166: PPUSH
6167: LD_INT 156
6169: PPUSH
6170: LD_INT 202
6172: PPUSH
6173: CALL_OW 297
6177: PUSH
6178: LD_VAR 0 1
6182: PPUSH
6183: LD_INT 219
6185: PPUSH
6186: LD_INT 219
6188: PPUSH
6189: CALL_OW 297
6193: LESS
6194: IFFALSE 6211
// nearestPoint := [ 156 , 202 ] ;
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: LD_INT 156
6203: PUSH
6204: LD_INT 202
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: ST_TO_ADDR
// if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
6211: LD_VAR 0 1
6215: PPUSH
6216: CALL_OW 256
6220: PUSH
6221: LD_INT 700
6223: LESS
6224: PUSH
6225: LD_VAR 0 1
6229: PPUSH
6230: CALL_OW 110
6234: PUSH
6235: LD_INT 0
6237: EQUAL
6238: AND
6239: IFFALSE 6280
// begin SetTag ( i , 1 ) ;
6241: LD_VAR 0 1
6245: PPUSH
6246: LD_INT 1
6248: PPUSH
6249: CALL_OW 109
// ComMoveXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) ;
6253: LD_VAR 0 1
6257: PPUSH
6258: LD_VAR 0 2
6262: PUSH
6263: LD_INT 1
6265: ARRAY
6266: PPUSH
6267: LD_VAR 0 2
6271: PUSH
6272: LD_INT 2
6274: ARRAY
6275: PPUSH
6276: CALL_OW 111
// end ; if GetLives ( i ) < 700 and GetTag ( i ) = 1 and IsDrivenBy ( i ) and GetDistUnitXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) < 10 then
6280: LD_VAR 0 1
6284: PPUSH
6285: CALL_OW 256
6289: PUSH
6290: LD_INT 700
6292: LESS
6293: PUSH
6294: LD_VAR 0 1
6298: PPUSH
6299: CALL_OW 110
6303: PUSH
6304: LD_INT 1
6306: EQUAL
6307: AND
6308: PUSH
6309: LD_VAR 0 1
6313: PPUSH
6314: CALL_OW 311
6318: AND
6319: PUSH
6320: LD_VAR 0 1
6324: PPUSH
6325: LD_VAR 0 2
6329: PUSH
6330: LD_INT 1
6332: ARRAY
6333: PPUSH
6334: LD_VAR 0 2
6338: PUSH
6339: LD_INT 2
6341: ARRAY
6342: PPUSH
6343: CALL_OW 297
6347: PUSH
6348: LD_INT 10
6350: LESS
6351: AND
6352: IFFALSE 6363
// ComRepairVehicleAndReturn ( i ) ;
6354: LD_VAR 0 1
6358: PPUSH
6359: CALL 62703 0 1
// if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
6363: LD_VAR 0 1
6367: PPUSH
6368: CALL_OW 256
6372: PUSH
6373: LD_INT 1000
6375: EQUAL
6376: PUSH
6377: LD_VAR 0 1
6381: PPUSH
6382: CALL_OW 110
6386: PUSH
6387: LD_INT 1
6389: EQUAL
6390: AND
6391: PUSH
6392: LD_VAR 0 1
6396: PPUSH
6397: CALL_OW 311
6401: AND
6402: IFFALSE 6416
// SetTag ( i , 0 ) ;
6404: LD_VAR 0 1
6408: PPUSH
6409: LD_INT 0
6411: PPUSH
6412: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and IsDrivenBy ( i ) and not HasTask ( i ) then
6416: LD_VAR 0 1
6420: PPUSH
6421: CALL_OW 110
6425: PUSH
6426: LD_INT 0
6428: EQUAL
6429: PUSH
6430: LD_VAR 0 1
6434: PPUSH
6435: CALL_OW 256
6439: PUSH
6440: LD_INT 700
6442: GREATEREQUAL
6443: AND
6444: PUSH
6445: LD_VAR 0 1
6449: PPUSH
6450: CALL_OW 311
6454: AND
6455: PUSH
6456: LD_VAR 0 1
6460: PPUSH
6461: CALL_OW 314
6465: NOT
6466: AND
6467: IFFALSE 6520
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6469: LD_INT 18
6471: PPUSH
6472: LD_INT 22
6474: PUSH
6475: LD_INT 3
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PPUSH
6482: CALL_OW 70
6486: IFFALSE 6505
// ComAgressiveMove ( i , 167 , 231 ) else
6488: LD_VAR 0 1
6492: PPUSH
6493: LD_INT 167
6495: PPUSH
6496: LD_INT 231
6498: PPUSH
6499: CALL_OW 114
6503: GO 6520
// ComAgressiveMove ( i , 106 , 153 ) ;
6505: LD_VAR 0 1
6509: PPUSH
6510: LD_INT 106
6512: PPUSH
6513: LD_INT 153
6515: PPUSH
6516: CALL_OW 114
// end ; end ;
6520: GO 5886
6522: POP
6523: POP
// until not omarSquad ;
6524: LD_EXP 47
6528: NOT
6529: IFFALSE 5839
// end ; end_of_file
6531: PPOPN 2
6533: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
6534: LD_INT 0
6536: PPUSH
// uc_side := side ;
6537: LD_ADDR_OWVAR 20
6541: PUSH
6542: LD_VAR 0 1
6546: ST_TO_ADDR
// uc_nation := nation ;
6547: LD_ADDR_OWVAR 21
6551: PUSH
6552: LD_VAR 0 2
6556: ST_TO_ADDR
// vc_chassis := chassis ;
6557: LD_ADDR_OWVAR 37
6561: PUSH
6562: LD_VAR 0 3
6566: ST_TO_ADDR
// vc_engine := engine ;
6567: LD_ADDR_OWVAR 39
6571: PUSH
6572: LD_VAR 0 4
6576: ST_TO_ADDR
// vc_control := control ;
6577: LD_ADDR_OWVAR 38
6581: PUSH
6582: LD_VAR 0 5
6586: ST_TO_ADDR
// vc_weapon := weapon ;
6587: LD_ADDR_OWVAR 40
6591: PUSH
6592: LD_VAR 0 6
6596: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6597: LD_ADDR_OWVAR 41
6601: PUSH
6602: LD_VAR 0 7
6606: ST_TO_ADDR
// result := CreateVehicle ;
6607: LD_ADDR_VAR 0 8
6611: PUSH
6612: CALL_OW 45
6616: ST_TO_ADDR
// end ;
6617: LD_VAR 0 8
6621: RET
// export function SayX ( units , ident ) ; var i ; begin
6622: LD_INT 0
6624: PPUSH
6625: PPUSH
// result := false ;
6626: LD_ADDR_VAR 0 3
6630: PUSH
6631: LD_INT 0
6633: ST_TO_ADDR
// if not units then
6634: LD_VAR 0 1
6638: NOT
6639: IFFALSE 6643
// exit ;
6641: GO 6697
// for i in units do
6643: LD_ADDR_VAR 0 4
6647: PUSH
6648: LD_VAR 0 1
6652: PUSH
6653: FOR_IN
6654: IFFALSE 6695
// if IsOk ( i ) then
6656: LD_VAR 0 4
6660: PPUSH
6661: CALL_OW 302
6665: IFFALSE 6693
// begin Say ( i , ident ) ;
6667: LD_VAR 0 4
6671: PPUSH
6672: LD_VAR 0 2
6676: PPUSH
6677: CALL_OW 88
// result := i ;
6681: LD_ADDR_VAR 0 3
6685: PUSH
6686: LD_VAR 0 4
6690: ST_TO_ADDR
// break ;
6691: GO 6695
// end ;
6693: GO 6653
6695: POP
6696: POP
// end ;
6697: LD_VAR 0 3
6701: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
6702: LD_INT 0
6704: PPUSH
6705: PPUSH
// InitUc ;
6706: CALL_OW 18
// InitHc ;
6710: CALL_OW 19
// uc_side := 0 ;
6714: LD_ADDR_OWVAR 20
6718: PUSH
6719: LD_INT 0
6721: ST_TO_ADDR
// uc_nation := 0 ;
6722: LD_ADDR_OWVAR 21
6726: PUSH
6727: LD_INT 0
6729: ST_TO_ADDR
// for i = 1 to amount do
6730: LD_ADDR_VAR 0 4
6734: PUSH
6735: DOUBLE
6736: LD_INT 1
6738: DEC
6739: ST_TO_ADDR
6740: LD_VAR 0 2
6744: PUSH
6745: FOR_TO
6746: IFFALSE 6828
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
6748: LD_ADDR_OWVAR 29
6752: PUSH
6753: LD_INT 9
6755: PPUSH
6756: LD_INT 12
6758: PPUSH
6759: CALL_OW 12
6763: PUSH
6764: LD_INT 9
6766: PPUSH
6767: LD_INT 12
6769: PPUSH
6770: CALL_OW 12
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
6779: LD_ADDR_OWVAR 35
6783: PUSH
6784: LD_INT 1
6786: NEG
6787: PPUSH
6788: LD_INT 1
6790: PPUSH
6791: CALL_OW 12
6795: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
6796: LD_INT 0
6798: PPUSH
6799: LD_INT 12
6801: PPUSH
6802: LD_INT 1
6804: PPUSH
6805: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
6809: CALL_OW 44
6813: PPUSH
6814: LD_VAR 0 1
6818: PPUSH
6819: LD_INT 0
6821: PPUSH
6822: CALL_OW 49
// end ;
6826: GO 6745
6828: POP
6829: POP
// InitHc ;
6830: CALL_OW 19
// end ;
6834: LD_VAR 0 3
6838: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
6839: LD_INT 0
6841: PPUSH
6842: PPUSH
// uc_side := 0 ;
6843: LD_ADDR_OWVAR 20
6847: PUSH
6848: LD_INT 0
6850: ST_TO_ADDR
// uc_nation := 0 ;
6851: LD_ADDR_OWVAR 21
6855: PUSH
6856: LD_INT 0
6858: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
6859: LD_INT 7
6861: PPUSH
6862: LD_INT 6
6864: PUSH
6865: LD_INT 5
6867: PUSH
6868: LD_INT 4
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: LIST
6875: PUSH
6876: LD_OWVAR 67
6880: ARRAY
6881: PPUSH
6882: CALL 6702 0 2
// for i = 1 to 2 do
6886: LD_ADDR_VAR 0 4
6890: PUSH
6891: DOUBLE
6892: LD_INT 1
6894: DEC
6895: ST_TO_ADDR
6896: LD_INT 2
6898: PUSH
6899: FOR_TO
6900: IFFALSE 6939
// begin vc_chassis := class_mastodont ;
6902: LD_ADDR_OWVAR 37
6906: PUSH
6907: LD_EXP 75
6911: ST_TO_ADDR
// vc_control := control_rider ;
6912: LD_ADDR_OWVAR 38
6916: PUSH
6917: LD_INT 4
6919: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
6920: CALL_OW 45
6924: PPUSH
6925: LD_VAR 0 1
6929: PPUSH
6930: LD_INT 0
6932: PPUSH
6933: CALL 60126 0 3
// end ;
6937: GO 6899
6939: POP
6940: POP
// for i := 1 to 4 do
6941: LD_ADDR_VAR 0 4
6945: PUSH
6946: DOUBLE
6947: LD_INT 1
6949: DEC
6950: ST_TO_ADDR
6951: LD_INT 4
6953: PUSH
6954: FOR_TO
6955: IFFALSE 6994
// begin hc_class := class_horse ;
6957: LD_ADDR_OWVAR 28
6961: PUSH
6962: LD_EXP 76
6966: ST_TO_ADDR
// hc_gallery :=  ;
6967: LD_ADDR_OWVAR 33
6971: PUSH
6972: LD_STRING 
6974: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
6975: CALL_OW 44
6979: PPUSH
6980: LD_VAR 0 1
6984: PPUSH
6985: LD_INT 0
6987: PPUSH
6988: CALL_OW 49
// end ;
6992: GO 6954
6994: POP
6995: POP
// for i = 1 to 5 do
6996: LD_ADDR_VAR 0 4
7000: PUSH
7001: DOUBLE
7002: LD_INT 1
7004: DEC
7005: ST_TO_ADDR
7006: LD_INT 5
7008: PUSH
7009: FOR_TO
7010: IFFALSE 7064
// begin hc_class = class_tiger ;
7012: LD_ADDR_OWVAR 28
7016: PUSH
7017: LD_INT 14
7019: ST_TO_ADDR
// hc_gallery =  ;
7020: LD_ADDR_OWVAR 33
7024: PUSH
7025: LD_STRING 
7027: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
7028: LD_ADDR_OWVAR 35
7032: PUSH
7033: LD_INT 7
7035: NEG
7036: PPUSH
7037: LD_INT 7
7039: PPUSH
7040: CALL_OW 12
7044: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
7045: CALL_OW 44
7049: PPUSH
7050: LD_VAR 0 1
7054: PPUSH
7055: LD_INT 0
7057: PPUSH
7058: CALL 60126 0 3
// end ;
7062: GO 7009
7064: POP
7065: POP
// for i := 1 to 4 do
7066: LD_ADDR_VAR 0 4
7070: PUSH
7071: DOUBLE
7072: LD_INT 1
7074: DEC
7075: ST_TO_ADDR
7076: LD_INT 4
7078: PUSH
7079: FOR_TO
7080: IFFALSE 7117
// begin hc_class := class_phororhacos ;
7082: LD_ADDR_OWVAR 28
7086: PUSH
7087: LD_INT 18
7089: ST_TO_ADDR
// hc_gallery :=  ;
7090: LD_ADDR_OWVAR 33
7094: PUSH
7095: LD_STRING 
7097: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7098: CALL_OW 44
7102: PPUSH
7103: LD_VAR 0 1
7107: PPUSH
7108: LD_INT 0
7110: PPUSH
7111: CALL_OW 49
// end ;
7115: GO 7079
7117: POP
7118: POP
// for i := 1 to 4 do
7119: LD_ADDR_VAR 0 4
7123: PUSH
7124: DOUBLE
7125: LD_INT 1
7127: DEC
7128: ST_TO_ADDR
7129: LD_INT 4
7131: PUSH
7132: FOR_TO
7133: IFFALSE 7170
// begin hc_class := class_baggie ;
7135: LD_ADDR_OWVAR 28
7139: PUSH
7140: LD_INT 13
7142: ST_TO_ADDR
// hc_gallery :=  ;
7143: LD_ADDR_OWVAR 33
7147: PUSH
7148: LD_STRING 
7150: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7151: CALL_OW 44
7155: PPUSH
7156: LD_VAR 0 1
7160: PPUSH
7161: LD_INT 0
7163: PPUSH
7164: CALL_OW 49
// end ;
7168: GO 7132
7170: POP
7171: POP
// for i := 1 to 7 do
7172: LD_ADDR_VAR 0 4
7176: PUSH
7177: DOUBLE
7178: LD_INT 1
7180: DEC
7181: ST_TO_ADDR
7182: LD_INT 7
7184: PUSH
7185: FOR_TO
7186: IFFALSE 7223
// begin hc_class := class_frog ;
7188: LD_ADDR_OWVAR 28
7192: PUSH
7193: LD_INT 19
7195: ST_TO_ADDR
// hc_gallery :=  ;
7196: LD_ADDR_OWVAR 33
7200: PUSH
7201: LD_STRING 
7203: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
7204: CALL_OW 44
7208: PPUSH
7209: LD_VAR 0 2
7213: PPUSH
7214: LD_INT 0
7216: PPUSH
7217: CALL_OW 49
// end ;
7221: GO 7185
7223: POP
7224: POP
// end ;
7225: LD_VAR 0 3
7229: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
7230: LD_INT 0
7232: PPUSH
7233: PPUSH
7234: PPUSH
// if not observer or not unit then
7235: LD_VAR 0 1
7239: NOT
7240: PUSH
7241: LD_VAR 0 2
7245: NOT
7246: OR
7247: IFFALSE 7251
// exit ;
7249: GO 7299
// if not See ( GetSide ( observer ) , unit ) then
7251: LD_VAR 0 1
7255: PPUSH
7256: CALL_OW 255
7260: PPUSH
7261: LD_VAR 0 2
7265: PPUSH
7266: CALL_OW 292
7270: NOT
7271: IFFALSE 7275
// exit ;
7273: GO 7299
// result := GetDistUnits ( observer , unit ) < 12 ;
7275: LD_ADDR_VAR 0 3
7279: PUSH
7280: LD_VAR 0 1
7284: PPUSH
7285: LD_VAR 0 2
7289: PPUSH
7290: CALL_OW 296
7294: PUSH
7295: LD_INT 12
7297: LESS
7298: ST_TO_ADDR
// end ;
7299: LD_VAR 0 3
7303: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
7304: LD_INT 0
7306: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
7307: LD_VAR 0 2
7311: PUSH
7312: LD_INT 1
7314: ARRAY
7315: PPUSH
7316: LD_VAR 0 2
7320: PUSH
7321: LD_INT 2
7323: ARRAY
7324: PPUSH
7325: CALL_OW 488
7329: PUSH
7330: LD_VAR 0 2
7334: PUSH
7335: LD_INT 1
7337: ARRAY
7338: PPUSH
7339: LD_VAR 0 2
7343: PUSH
7344: LD_INT 2
7346: ARRAY
7347: PPUSH
7348: CALL_OW 428
7352: PUSH
7353: LD_INT 0
7355: EQUAL
7356: AND
7357: IFFALSE 7391
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
7359: LD_VAR 0 1
7363: PPUSH
7364: LD_VAR 0 2
7368: PUSH
7369: LD_INT 1
7371: ARRAY
7372: PPUSH
7373: LD_VAR 0 2
7377: PUSH
7378: LD_INT 2
7380: ARRAY
7381: PPUSH
7382: LD_VAR 0 3
7386: PPUSH
7387: CALL_OW 48
// end ;
7391: LD_VAR 0 4
7395: RET
// export function ReverseArray ( array ) ; var i ; begin
7396: LD_INT 0
7398: PPUSH
7399: PPUSH
// if not array then
7400: LD_VAR 0 1
7404: NOT
7405: IFFALSE 7409
// exit ;
7407: GO 7467
// result := [ ] ;
7409: LD_ADDR_VAR 0 2
7413: PUSH
7414: EMPTY
7415: ST_TO_ADDR
// for i := 1 to array do
7416: LD_ADDR_VAR 0 3
7420: PUSH
7421: DOUBLE
7422: LD_INT 1
7424: DEC
7425: ST_TO_ADDR
7426: LD_VAR 0 1
7430: PUSH
7431: FOR_TO
7432: IFFALSE 7465
// result := Insert ( result , 1 , array [ i ] ) ;
7434: LD_ADDR_VAR 0 2
7438: PUSH
7439: LD_VAR 0 2
7443: PPUSH
7444: LD_INT 1
7446: PPUSH
7447: LD_VAR 0 1
7451: PUSH
7452: LD_VAR 0 3
7456: ARRAY
7457: PPUSH
7458: CALL_OW 2
7462: ST_TO_ADDR
7463: GO 7431
7465: POP
7466: POP
// end ;
7467: LD_VAR 0 2
7471: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
7472: LD_INT 0
7474: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
7475: LD_VAR 0 1
7479: PPUSH
7480: LD_VAR 0 2
7484: PPUSH
7485: LD_VAR 0 3
7489: PPUSH
7490: LD_VAR 0 4
7494: PPUSH
7495: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
7499: LD_VAR 0 1
7503: PPUSH
7504: LD_VAR 0 2
7508: PPUSH
7509: LD_VAR 0 3
7513: PPUSH
7514: CALL_OW 331
// end ;
7518: LD_VAR 0 5
7522: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
7523: LD_INT 0
7525: PPUSH
// if not units then
7526: LD_VAR 0 1
7530: NOT
7531: IFFALSE 7535
// exit ;
7533: GO 7618
// result := true ;
7535: LD_ADDR_VAR 0 4
7539: PUSH
7540: LD_INT 1
7542: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
7543: LD_VAR 0 1
7547: PPUSH
7548: LD_INT 26
7550: PUSH
7551: LD_INT 1
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PPUSH
7558: CALL_OW 72
7562: PUSH
7563: LD_INT 1
7565: ARRAY
7566: PPUSH
7567: LD_VAR 0 2
7571: PPUSH
7572: CALL_OW 88
7576: NOT
7577: IFFALSE 7618
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
7579: LD_ADDR_VAR 0 4
7583: PUSH
7584: LD_VAR 0 1
7588: PPUSH
7589: LD_INT 26
7591: PUSH
7592: LD_INT 2
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PPUSH
7599: CALL_OW 72
7603: PUSH
7604: LD_INT 1
7606: ARRAY
7607: PPUSH
7608: LD_VAR 0 3
7612: PPUSH
7613: CALL_OW 88
7617: ST_TO_ADDR
// end ;
7618: LD_VAR 0 4
7622: RET
// export function SeeGroup ( side , group ) ; var i ; begin
7623: LD_INT 0
7625: PPUSH
7626: PPUSH
// if not group then
7627: LD_VAR 0 2
7631: NOT
7632: IFFALSE 7636
// exit ;
7634: GO 7681
// for i in group do
7636: LD_ADDR_VAR 0 4
7640: PUSH
7641: LD_VAR 0 2
7645: PUSH
7646: FOR_IN
7647: IFFALSE 7679
// if See ( side , i ) then
7649: LD_VAR 0 1
7653: PPUSH
7654: LD_VAR 0 4
7658: PPUSH
7659: CALL_OW 292
7663: IFFALSE 7677
// begin result := true ;
7665: LD_ADDR_VAR 0 3
7669: PUSH
7670: LD_INT 1
7672: ST_TO_ADDR
// exit ;
7673: POP
7674: POP
7675: GO 7681
// end ;
7677: GO 7646
7679: POP
7680: POP
// end ; end_of_file
7681: LD_VAR 0 3
7685: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
7686: LD_INT 0
7688: PPUSH
7689: PPUSH
7690: PPUSH
7691: PPUSH
7692: PPUSH
7693: PPUSH
7694: PPUSH
// uc_side := 3 ;
7695: LD_ADDR_OWVAR 20
7699: PUSH
7700: LD_INT 3
7702: ST_TO_ADDR
// uc_nation := 3 ;
7703: LD_ADDR_OWVAR 21
7707: PUSH
7708: LD_INT 3
7710: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
7711: LD_ADDR_EXP 48
7715: PUSH
7716: LD_STRING Morozov
7718: PPUSH
7719: CALL_OW 25
7723: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
7724: LD_EXP 48
7728: PPUSH
7729: LD_INT 52
7731: PPUSH
7732: CALL_OW 52
// if not gaidarKilled then
7736: LD_EXP 7
7740: NOT
7741: IFFALSE 7774
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
7743: LD_ADDR_EXP 49
7747: PUSH
7748: LD_STRING Gaydar
7750: PPUSH
7751: LD_INT 0
7753: PPUSH
7754: LD_STRING 
7756: PPUSH
7757: CALL 24474 0 3
7761: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
7762: LD_EXP 49
7766: PPUSH
7767: LD_INT 52
7769: PPUSH
7770: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
7774: LD_INT 52
7776: PPUSH
7777: LD_STRING lenin
7779: PPUSH
7780: CALL_OW 500
// ruOutsiders := [ ] ;
7784: LD_ADDR_EXP 51
7788: PUSH
7789: EMPTY
7790: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
7791: LD_ADDR_EXP 53
7795: PUSH
7796: EMPTY
7797: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
7798: LD_ADDR_EXP 54
7802: PUSH
7803: EMPTY
7804: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
7805: LD_ADDR_EXP 55
7809: PUSH
7810: EMPTY
7811: ST_TO_ADDR
// ruAttackers := [ ] ;
7812: LD_ADDR_EXP 56
7816: PUSH
7817: EMPTY
7818: ST_TO_ADDR
// waveStrength := 0 ;
7819: LD_ADDR_EXP 57
7823: PUSH
7824: LD_INT 0
7826: ST_TO_ADDR
// if not gaidarKilled then
7827: LD_EXP 7
7831: NOT
7832: IFFALSE 7842
// waveStrength := 2 ;
7834: LD_ADDR_EXP 57
7838: PUSH
7839: LD_INT 2
7841: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
7842: LD_ADDR_VAR 0 7
7846: PUSH
7847: LD_INT 22
7849: PUSH
7850: LD_INT 3
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 21
7859: PUSH
7860: LD_INT 3
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: PPUSH
7871: CALL_OW 69
7875: ST_TO_ADDR
// for i in tmp do
7876: LD_ADDR_VAR 0 2
7880: PUSH
7881: LD_VAR 0 7
7885: PUSH
7886: FOR_IN
7887: IFFALSE 7920
// SetBLevel ( i , [ 5 , 5 , 6 ] [ Difficulty ] ) ;
7889: LD_VAR 0 2
7893: PPUSH
7894: LD_INT 5
7896: PUSH
7897: LD_INT 5
7899: PUSH
7900: LD_INT 6
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: LIST
7907: PUSH
7908: LD_OWVAR 67
7912: ARRAY
7913: PPUSH
7914: CALL_OW 241
7918: GO 7886
7920: POP
7921: POP
// for i := 1 to 3 do
7922: LD_ADDR_VAR 0 2
7926: PUSH
7927: DOUBLE
7928: LD_INT 1
7930: DEC
7931: ST_TO_ADDR
7932: LD_INT 3
7934: PUSH
7935: FOR_TO
7936: IFFALSE 7974
// begin PrepareHuman ( false , 1 , 0 ) ;
7938: LD_INT 0
7940: PPUSH
7941: LD_INT 1
7943: PPUSH
7944: LD_INT 0
7946: PPUSH
7947: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
7951: CALL_OW 44
7955: PPUSH
7956: LD_INT 75
7958: PPUSH
7959: LD_INT 49
7961: PPUSH
7962: LD_INT 3
7964: PPUSH
7965: LD_INT 0
7967: PPUSH
7968: CALL_OW 50
// end ;
7972: GO 7935
7974: POP
7975: POP
// for i := 1 to 4 do
7976: LD_ADDR_VAR 0 2
7980: PUSH
7981: DOUBLE
7982: LD_INT 1
7984: DEC
7985: ST_TO_ADDR
7986: LD_INT 4
7988: PUSH
7989: FOR_TO
7990: IFFALSE 8036
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
7992: LD_INT 0
7994: PPUSH
7995: LD_INT 1
7997: PPUSH
7998: LD_INT 2
8000: PPUSH
8001: CALL_OW 12
8005: PPUSH
8006: LD_INT 0
8008: PPUSH
8009: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
8013: CALL_OW 44
8017: PPUSH
8018: LD_INT 330
8020: PPUSH
8021: LD_INT 231
8023: PPUSH
8024: LD_INT 5
8026: PPUSH
8027: LD_INT 0
8029: PPUSH
8030: CALL_OW 50
// end ;
8034: GO 7989
8036: POP
8037: POP
// hc_class := 1 ;
8038: LD_ADDR_OWVAR 28
8042: PUSH
8043: LD_INT 1
8045: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
8046: CALL_OW 44
8050: PPUSH
8051: LD_INT 324
8053: PPUSH
8054: LD_INT 219
8056: PPUSH
8057: CALL_OW 428
8061: PPUSH
8062: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
8066: CALL_OW 44
8070: PPUSH
8071: LD_INT 316
8073: PPUSH
8074: LD_INT 223
8076: PPUSH
8077: CALL_OW 428
8081: PPUSH
8082: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
8086: LD_ADDR_VAR 0 7
8090: PUSH
8091: LD_INT 172
8093: PPUSH
8094: LD_INT 198
8096: PPUSH
8097: CALL_OW 428
8101: PPUSH
8102: CALL_OW 274
8106: PUSH
8107: LD_INT 189
8109: PPUSH
8110: LD_INT 156
8112: PPUSH
8113: CALL_OW 428
8117: PPUSH
8118: CALL_OW 274
8122: PUSH
8123: LD_INT 341
8125: PPUSH
8126: LD_INT 232
8128: PPUSH
8129: CALL_OW 428
8133: PPUSH
8134: CALL_OW 274
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: ST_TO_ADDR
// for i in tmp do
8144: LD_ADDR_VAR 0 2
8148: PUSH
8149: LD_VAR 0 7
8153: PUSH
8154: FOR_IN
8155: IFFALSE 8189
// begin SetResourceType ( i , mat_cans , 200 ) ;
8157: LD_VAR 0 2
8161: PPUSH
8162: LD_INT 1
8164: PPUSH
8165: LD_INT 200
8167: PPUSH
8168: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
8172: LD_VAR 0 2
8176: PPUSH
8177: LD_INT 2
8179: PPUSH
8180: LD_INT 200
8182: PPUSH
8183: CALL_OW 277
// end ;
8187: GO 8154
8189: POP
8190: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 177 , 114 ] , [ 138 , 96 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
8191: LD_ADDR_VAR 0 7
8195: PUSH
8196: LD_INT 198
8198: PUSH
8199: LD_INT 158
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 203
8208: PUSH
8209: LD_INT 166
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PUSH
8216: LD_INT 177
8218: PUSH
8219: LD_INT 114
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: PUSH
8226: LD_INT 138
8228: PUSH
8229: LD_INT 96
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: PUSH
8236: LD_INT 181
8238: PUSH
8239: LD_INT 209
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PUSH
8246: LD_INT 178
8248: PUSH
8249: LD_INT 196
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: PUSH
8256: LD_INT 181
8258: PUSH
8259: LD_INT 212
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: ST_TO_ADDR
// for i := 1 to tmp do
8275: LD_ADDR_VAR 0 2
8279: PUSH
8280: DOUBLE
8281: LD_INT 1
8283: DEC
8284: ST_TO_ADDR
8285: LD_VAR 0 7
8289: PUSH
8290: FOR_TO
8291: IFFALSE 8408
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
8293: LD_INT 0
8295: PPUSH
8296: LD_INT 1
8298: PPUSH
8299: LD_INT 4
8301: PUSH
8302: LD_INT 5
8304: PUSH
8305: LD_INT 6
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: LIST
8312: PUSH
8313: LD_OWVAR 67
8317: ARRAY
8318: PPUSH
8319: CALL_OW 380
// un := CreateHuman ;
8323: LD_ADDR_VAR 0 5
8327: PUSH
8328: CALL_OW 44
8332: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
8333: LD_ADDR_VAR 0 4
8337: PUSH
8338: LD_VAR 0 7
8342: PUSH
8343: LD_VAR 0 2
8347: ARRAY
8348: PUSH
8349: LD_INT 1
8351: ARRAY
8352: PPUSH
8353: LD_VAR 0 7
8357: PUSH
8358: LD_VAR 0 2
8362: ARRAY
8363: PUSH
8364: LD_INT 2
8366: ARRAY
8367: PPUSH
8368: CALL_OW 428
8372: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
8373: LD_VAR 0 5
8377: PPUSH
8378: LD_VAR 0 4
8382: PPUSH
8383: CALL 57046 0 1
8387: PPUSH
8388: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8392: LD_VAR 0 5
8396: PPUSH
8397: LD_VAR 0 4
8401: PPUSH
8402: CALL_OW 52
// end ;
8406: GO 8290
8408: POP
8409: POP
// for i := 1 to 3 do
8410: LD_ADDR_VAR 0 2
8414: PUSH
8415: DOUBLE
8416: LD_INT 1
8418: DEC
8419: ST_TO_ADDR
8420: LD_INT 3
8422: PUSH
8423: FOR_TO
8424: IFFALSE 8479
// begin InitHc ;
8426: CALL_OW 19
// uc_nation := 0 ;
8430: LD_ADDR_OWVAR 21
8434: PUSH
8435: LD_INT 0
8437: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
8438: LD_ADDR_OWVAR 28
8442: PUSH
8443: LD_INT 16
8445: ST_TO_ADDR
// un := CreateHuman ;
8446: LD_ADDR_VAR 0 5
8450: PUSH
8451: CALL_OW 44
8455: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
8456: LD_VAR 0 5
8460: PPUSH
8461: LD_INT 194
8463: PPUSH
8464: LD_INT 164
8466: PPUSH
8467: LD_INT 6
8469: PPUSH
8470: LD_INT 0
8472: PPUSH
8473: CALL_OW 50
// end ;
8477: GO 8423
8479: POP
8480: POP
// uc_nation := 3 ;
8481: LD_ADDR_OWVAR 21
8485: PUSH
8486: LD_INT 3
8488: ST_TO_ADDR
// if Difficulty > 1 then
8489: LD_OWVAR 67
8493: PUSH
8494: LD_INT 1
8496: GREATER
8497: IFFALSE 8753
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
8499: LD_INT 24
8501: PPUSH
8502: LD_INT 1
8504: PPUSH
8505: LD_INT 1
8507: PPUSH
8508: LD_INT 44
8510: PPUSH
8511: LD_INT 10
8513: PPUSH
8514: CALL 29338 0 5
// un := CreateVehicle ;
8518: LD_ADDR_VAR 0 5
8522: PUSH
8523: CALL_OW 45
8527: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 162 , 1 , false ) ;
8528: LD_VAR 0 5
8532: PPUSH
8533: LD_INT 199
8535: PPUSH
8536: LD_INT 162
8538: PPUSH
8539: LD_INT 1
8541: PPUSH
8542: LD_INT 0
8544: PPUSH
8545: CALL 63143 0 5
// ComHold ( un ) ;
8549: LD_VAR 0 5
8553: PPUSH
8554: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8558: LD_INT 0
8560: PPUSH
8561: LD_INT 3
8563: PPUSH
8564: LD_INT 4
8566: PPUSH
8567: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8571: CALL_OW 44
8575: PPUSH
8576: LD_VAR 0 5
8580: PPUSH
8581: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8585: LD_INT 24
8587: PPUSH
8588: LD_INT 1
8590: PPUSH
8591: LD_INT 1
8593: PPUSH
8594: LD_INT 45
8596: PPUSH
8597: LD_INT 10
8599: PPUSH
8600: CALL 29338 0 5
// un := CreateVehicle ;
8604: LD_ADDR_VAR 0 5
8608: PUSH
8609: CALL_OW 45
8613: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
8614: LD_VAR 0 5
8618: PPUSH
8619: LD_INT 129
8621: PPUSH
8622: LD_INT 93
8624: PPUSH
8625: LD_INT 1
8627: PPUSH
8628: LD_INT 0
8630: PPUSH
8631: CALL 63143 0 5
// ComHold ( un ) ;
8635: LD_VAR 0 5
8639: PPUSH
8640: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8644: LD_INT 0
8646: PPUSH
8647: LD_INT 3
8649: PPUSH
8650: LD_INT 4
8652: PPUSH
8653: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8657: CALL_OW 44
8661: PPUSH
8662: LD_VAR 0 5
8666: PPUSH
8667: CALL_OW 52
// bc_type := b_armoury ;
8671: LD_ADDR_OWVAR 42
8675: PUSH
8676: LD_INT 4
8678: ST_TO_ADDR
// bc_level := 6 ;
8679: LD_ADDR_OWVAR 43
8683: PUSH
8684: LD_INT 6
8686: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
8687: LD_INT 120
8689: PPUSH
8690: LD_INT 100
8692: PPUSH
8693: LD_INT 5
8695: PPUSH
8696: CALL_OW 47
// for i := 1 to 3 do
8700: LD_ADDR_VAR 0 2
8704: PUSH
8705: DOUBLE
8706: LD_INT 1
8708: DEC
8709: ST_TO_ADDR
8710: LD_INT 3
8712: PUSH
8713: FOR_TO
8714: IFFALSE 8751
// begin PrepareHuman ( false , 1 , 5 ) ;
8716: LD_INT 0
8718: PPUSH
8719: LD_INT 1
8721: PPUSH
8722: LD_INT 5
8724: PPUSH
8725: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
8729: CALL_OW 44
8733: PPUSH
8734: LD_INT 120
8736: PPUSH
8737: LD_INT 100
8739: PPUSH
8740: CALL_OW 428
8744: PPUSH
8745: CALL_OW 52
// end ;
8749: GO 8713
8751: POP
8752: POP
// end ; tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
8753: LD_ADDR_VAR 0 7
8757: PUSH
8758: LD_INT 135
8760: PUSH
8761: LD_INT 100
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: PUSH
8768: LD_INT 137
8770: PUSH
8771: LD_INT 92
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: ST_TO_ADDR
// for i := 1 to tmp do
8782: LD_ADDR_VAR 0 2
8786: PUSH
8787: DOUBLE
8788: LD_INT 1
8790: DEC
8791: ST_TO_ADDR
8792: LD_VAR 0 7
8796: PUSH
8797: FOR_TO
8798: IFFALSE 8964
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
8800: LD_INT 22
8802: PUSH
8803: LD_INT 22
8805: PUSH
8806: LD_INT 24
8808: PUSH
8809: LD_INT 24
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: PUSH
8818: LD_OWVAR 67
8822: PUSH
8823: LD_INT 0
8825: PPUSH
8826: LD_INT 1
8828: PPUSH
8829: CALL_OW 12
8833: PLUS
8834: ARRAY
8835: PPUSH
8836: LD_INT 1
8838: PPUSH
8839: LD_INT 1
8841: PPUSH
8842: LD_INT 44
8844: PPUSH
8845: LD_INT 25
8847: PPUSH
8848: CALL 29338 0 5
// veh := CreateVehicle ;
8852: LD_ADDR_VAR 0 6
8856: PUSH
8857: CALL_OW 45
8861: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8862: LD_VAR 0 6
8866: PPUSH
8867: LD_INT 2
8869: PPUSH
8870: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
8874: LD_VAR 0 6
8878: PPUSH
8879: LD_VAR 0 7
8883: PUSH
8884: LD_VAR 0 2
8888: ARRAY
8889: PUSH
8890: LD_INT 1
8892: ARRAY
8893: PPUSH
8894: LD_VAR 0 7
8898: PUSH
8899: LD_VAR 0 2
8903: ARRAY
8904: PUSH
8905: LD_INT 2
8907: ARRAY
8908: PPUSH
8909: LD_INT 0
8911: PPUSH
8912: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
8916: LD_INT 0
8918: PPUSH
8919: LD_INT 3
8921: PPUSH
8922: LD_INT 6
8924: PPUSH
8925: CALL_OW 380
// un := CreateHuman ;
8929: LD_ADDR_VAR 0 5
8933: PUSH
8934: CALL_OW 44
8938: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8939: LD_VAR 0 5
8943: PPUSH
8944: LD_VAR 0 6
8948: PPUSH
8949: CALL_OW 52
// ComHold ( veh ) ;
8953: LD_VAR 0 6
8957: PPUSH
8958: CALL_OW 140
// end ;
8962: GO 8797
8964: POP
8965: POP
// if Difficulty > 1 then
8966: LD_OWVAR 67
8970: PUSH
8971: LD_INT 1
8973: GREATER
8974: IFFALSE 9331
// begin tmp := [ 191 , 122 ] ;
8976: LD_ADDR_VAR 0 7
8980: PUSH
8981: LD_INT 191
8983: PUSH
8984: LD_INT 122
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
8991: LD_INT 24
8993: PPUSH
8994: LD_INT 1
8996: PPUSH
8997: LD_INT 1
8999: PPUSH
9000: LD_INT 44
9002: PPUSH
9003: LD_INT 30
9005: PPUSH
9006: CALL 29338 0 5
// ruBlockadeTank := CreateVehicle ;
9010: LD_ADDR_EXP 50
9014: PUSH
9015: CALL_OW 45
9019: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
9020: LD_EXP 50
9024: PPUSH
9025: LD_INT 2
9027: PPUSH
9028: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
9032: LD_EXP 50
9036: PPUSH
9037: LD_INT 191
9039: PPUSH
9040: LD_INT 122
9042: PPUSH
9043: LD_INT 0
9045: PPUSH
9046: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 ] [ Difficulty - 1 ] ) ;
9050: LD_INT 1
9052: PPUSH
9053: LD_INT 5
9055: PUSH
9056: LD_INT 6
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PUSH
9063: LD_OWVAR 67
9067: PUSH
9068: LD_INT 1
9070: MINUS
9071: ARRAY
9072: PPUSH
9073: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
9077: CALL_OW 44
9081: PPUSH
9082: LD_EXP 50
9086: PPUSH
9087: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
9091: LD_EXP 50
9095: PPUSH
9096: CALL_OW 140
// ruBlockadeSquad := [ ] ;
9100: LD_ADDR_EXP 52
9104: PUSH
9105: EMPTY
9106: ST_TO_ADDR
// for i := 1 to [ 3 , 4 ] [ Difficulty - 1 ] do
9107: LD_ADDR_VAR 0 2
9111: PUSH
9112: DOUBLE
9113: LD_INT 1
9115: DEC
9116: ST_TO_ADDR
9117: LD_INT 3
9119: PUSH
9120: LD_INT 4
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PUSH
9127: LD_OWVAR 67
9131: PUSH
9132: LD_INT 1
9134: MINUS
9135: ARRAY
9136: PUSH
9137: FOR_TO
9138: IFFALSE 9250
// begin PrepareHuman ( false , 1 , [ 5 , 6 ] [ Difficulty - 1 ] ) ;
9140: LD_INT 0
9142: PPUSH
9143: LD_INT 1
9145: PPUSH
9146: LD_INT 5
9148: PUSH
9149: LD_INT 6
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PUSH
9156: LD_OWVAR 67
9160: PUSH
9161: LD_INT 1
9163: MINUS
9164: ARRAY
9165: PPUSH
9166: CALL_OW 380
// un := CreateHuman ;
9170: LD_ADDR_VAR 0 5
9174: PUSH
9175: CALL_OW 44
9179: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
9180: LD_VAR 0 5
9184: PPUSH
9185: LD_INT 9
9187: PPUSH
9188: LD_INT 0
9190: PPUSH
9191: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
9195: LD_VAR 0 5
9199: PPUSH
9200: LD_INT 198
9202: PPUSH
9203: LD_INT 129
9205: PPUSH
9206: CALL_OW 118
// AddComCrawl ( un ) ;
9210: LD_VAR 0 5
9214: PPUSH
9215: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9219: LD_ADDR_EXP 52
9223: PUSH
9224: LD_EXP 52
9228: PPUSH
9229: LD_EXP 52
9233: PUSH
9234: LD_INT 1
9236: PLUS
9237: PPUSH
9238: LD_VAR 0 5
9242: PPUSH
9243: CALL_OW 1
9247: ST_TO_ADDR
// end ;
9248: GO 9137
9250: POP
9251: POP
// PrepareHuman ( false , 4 , 5 ) ;
9252: LD_INT 0
9254: PPUSH
9255: LD_INT 4
9257: PPUSH
9258: LD_INT 5
9260: PPUSH
9261: CALL_OW 380
// un := CreateHuman ;
9265: LD_ADDR_VAR 0 5
9269: PUSH
9270: CALL_OW 44
9274: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
9275: LD_VAR 0 5
9279: PPUSH
9280: LD_INT 179
9282: PPUSH
9283: LD_INT 113
9285: PPUSH
9286: LD_INT 0
9288: PPUSH
9289: CALL_OW 48
// ComHold ( un ) ;
9293: LD_VAR 0 5
9297: PPUSH
9298: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9302: LD_ADDR_EXP 52
9306: PUSH
9307: LD_EXP 52
9311: PPUSH
9312: LD_EXP 52
9316: PUSH
9317: LD_INT 1
9319: PLUS
9320: PPUSH
9321: LD_VAR 0 5
9325: PPUSH
9326: CALL_OW 1
9330: ST_TO_ADDR
// end ; tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
9331: LD_ADDR_VAR 0 7
9335: PUSH
9336: LD_INT 167
9338: PPUSH
9339: LD_INT 243
9341: PPUSH
9342: CALL_OW 428
9346: PPUSH
9347: CALL_OW 274
9351: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
9352: LD_VAR 0 7
9356: PPUSH
9357: LD_INT 1
9359: PPUSH
9360: LD_INT 1000
9362: PPUSH
9363: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
9367: LD_VAR 0 7
9371: PPUSH
9372: LD_INT 2
9374: PPUSH
9375: LD_INT 400
9377: PPUSH
9378: CALL_OW 277
// tmp := HexInfo ( 169 , 226 ) ;
9382: LD_ADDR_VAR 0 7
9386: PUSH
9387: LD_INT 169
9389: PPUSH
9390: LD_INT 226
9392: PPUSH
9393: CALL_OW 428
9397: ST_TO_ADDR
// for i := 1 to 3 do
9398: LD_ADDR_VAR 0 2
9402: PUSH
9403: DOUBLE
9404: LD_INT 1
9406: DEC
9407: ST_TO_ADDR
9408: LD_INT 3
9410: PUSH
9411: FOR_TO
9412: IFFALSE 9499
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
9414: LD_INT 0
9416: PPUSH
9417: LD_INT 1
9419: PPUSH
9420: LD_INT 4
9422: PUSH
9423: LD_INT 5
9425: PUSH
9426: LD_INT 5
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: LIST
9433: PUSH
9434: LD_OWVAR 67
9438: ARRAY
9439: PPUSH
9440: CALL_OW 380
// un := CreateHuman ;
9444: LD_ADDR_VAR 0 5
9448: PUSH
9449: CALL_OW 44
9453: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
9454: LD_VAR 0 5
9458: PPUSH
9459: LD_VAR 0 7
9463: PPUSH
9464: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9468: LD_ADDR_EXP 53
9472: PUSH
9473: LD_EXP 53
9477: PPUSH
9478: LD_EXP 53
9482: PUSH
9483: LD_INT 1
9485: PLUS
9486: PPUSH
9487: LD_VAR 0 5
9491: PPUSH
9492: CALL_OW 1
9496: ST_TO_ADDR
// end ;
9497: GO 9411
9499: POP
9500: POP
// tmp := [ [ 165 , 224 ] , [ 173 , 228 ] ] ;
9501: LD_ADDR_VAR 0 7
9505: PUSH
9506: LD_INT 165
9508: PUSH
9509: LD_INT 224
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: PUSH
9516: LD_INT 173
9518: PUSH
9519: LD_INT 228
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: ST_TO_ADDR
// for i := 1 to tmp do
9530: LD_ADDR_VAR 0 2
9534: PUSH
9535: DOUBLE
9536: LD_INT 1
9538: DEC
9539: ST_TO_ADDR
9540: LD_VAR 0 7
9544: PUSH
9545: FOR_TO
9546: IFFALSE 9663
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
9548: LD_INT 0
9550: PPUSH
9551: LD_INT 1
9553: PPUSH
9554: LD_INT 4
9556: PUSH
9557: LD_INT 5
9559: PUSH
9560: LD_INT 5
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: LIST
9567: PUSH
9568: LD_OWVAR 67
9572: ARRAY
9573: PPUSH
9574: CALL_OW 380
// un := CreateHuman ;
9578: LD_ADDR_VAR 0 5
9582: PUSH
9583: CALL_OW 44
9587: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
9588: LD_VAR 0 5
9592: PPUSH
9593: LD_VAR 0 7
9597: PUSH
9598: LD_VAR 0 2
9602: ARRAY
9603: PUSH
9604: LD_INT 1
9606: ARRAY
9607: PPUSH
9608: LD_VAR 0 7
9612: PUSH
9613: LD_VAR 0 2
9617: ARRAY
9618: PUSH
9619: LD_INT 2
9621: ARRAY
9622: PPUSH
9623: CALL_OW 428
9627: PPUSH
9628: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9632: LD_ADDR_EXP 53
9636: PUSH
9637: LD_EXP 53
9641: PPUSH
9642: LD_EXP 53
9646: PUSH
9647: LD_INT 1
9649: PLUS
9650: PPUSH
9651: LD_VAR 0 5
9655: PPUSH
9656: CALL_OW 1
9660: ST_TO_ADDR
// end ;
9661: GO 9545
9663: POP
9664: POP
// for i := 1 to 2 do
9665: LD_ADDR_VAR 0 2
9669: PUSH
9670: DOUBLE
9671: LD_INT 1
9673: DEC
9674: ST_TO_ADDR
9675: LD_INT 2
9677: PUSH
9678: FOR_TO
9679: IFFALSE 9734
// begin InitHc ;
9681: CALL_OW 19
// uc_nation := 0 ;
9685: LD_ADDR_OWVAR 21
9689: PUSH
9690: LD_INT 0
9692: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
9693: LD_ADDR_OWVAR 28
9697: PUSH
9698: LD_INT 16
9700: ST_TO_ADDR
// un := CreateHuman ;
9701: LD_ADDR_VAR 0 5
9705: PUSH
9706: CALL_OW 44
9710: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
9711: LD_VAR 0 5
9715: PPUSH
9716: LD_INT 166
9718: PPUSH
9719: LD_INT 233
9721: PPUSH
9722: LD_INT 2
9724: PPUSH
9725: LD_INT 0
9727: PPUSH
9728: CALL_OW 50
// end ;
9732: GO 9678
9734: POP
9735: POP
// uc_nation := 3 ;
9736: LD_ADDR_OWVAR 21
9740: PUSH
9741: LD_INT 3
9743: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
9744: LD_ADDR_VAR 0 7
9748: PUSH
9749: LD_INT 71
9751: PUSH
9752: LD_INT 52
9754: PUSH
9755: LD_INT 11
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: LIST
9762: ST_TO_ADDR
// for i in tmp do
9763: LD_ADDR_VAR 0 2
9767: PUSH
9768: LD_VAR 0 7
9772: PUSH
9773: FOR_IN
9774: IFFALSE 9818
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
9776: LD_VAR 0 2
9780: PPUSH
9781: CALL_OW 274
9785: PPUSH
9786: LD_INT 1
9788: PPUSH
9789: LD_INT 3000
9791: PPUSH
9792: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
9796: LD_VAR 0 2
9800: PPUSH
9801: CALL_OW 274
9805: PPUSH
9806: LD_INT 2
9808: PPUSH
9809: LD_INT 600
9811: PPUSH
9812: CALL_OW 277
// end ;
9816: GO 9773
9818: POP
9819: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
9820: LD_ADDR_VAR 0 7
9824: PUSH
9825: LD_INT 41
9827: PUSH
9828: LD_INT 57
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PUSH
9835: LD_INT 38
9837: PUSH
9838: LD_INT 55
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: PUSH
9845: LD_INT 50
9847: PUSH
9848: LD_INT 73
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: PUSH
9855: LD_INT 51
9857: PUSH
9858: LD_INT 65
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: LD_INT 82
9867: PUSH
9868: LD_INT 93
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 87
9877: PUSH
9878: LD_INT 100
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PUSH
9885: LD_INT 91
9887: PUSH
9888: LD_INT 109
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 84
9897: PUSH
9898: LD_INT 120
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PUSH
9905: LD_INT 113
9907: PUSH
9908: LD_INT 153
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PUSH
9915: LD_INT 123
9917: PUSH
9918: LD_INT 171
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PUSH
9925: LD_INT 125
9927: PUSH
9928: LD_INT 178
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PUSH
9935: LD_INT 125
9937: PUSH
9938: LD_INT 188
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PUSH
9945: LD_INT 125
9947: PUSH
9948: LD_INT 201
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PUSH
9955: LD_INT 33
9957: PUSH
9958: LD_INT 60
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PUSH
9965: LD_INT 76
9967: PUSH
9968: LD_INT 95
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PUSH
9975: LD_INT 84
9977: PUSH
9978: LD_INT 111
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PUSH
9985: LD_INT 112
9987: PUSH
9988: LD_INT 165
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: ST_TO_ADDR
// for i := 1 to tmp do
10014: LD_ADDR_VAR 0 2
10018: PUSH
10019: DOUBLE
10020: LD_INT 1
10022: DEC
10023: ST_TO_ADDR
10024: LD_VAR 0 7
10028: PUSH
10029: FOR_TO
10030: IFFALSE 10269
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10032: LD_ADDR_VAR 0 4
10036: PUSH
10037: LD_VAR 0 7
10041: PUSH
10042: LD_VAR 0 2
10046: ARRAY
10047: PUSH
10048: LD_INT 1
10050: ARRAY
10051: PPUSH
10052: LD_VAR 0 7
10056: PUSH
10057: LD_VAR 0 2
10061: ARRAY
10062: PUSH
10063: LD_INT 2
10065: ARRAY
10066: PPUSH
10067: CALL_OW 428
10071: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
10072: LD_VAR 0 4
10076: PPUSH
10077: CALL_OW 266
10081: PUSH
10082: LD_INT 4
10084: PUSH
10085: LD_INT 5
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: IN
10092: IFFALSE 10172
// begin for j := 1 to Difficulty do
10094: LD_ADDR_VAR 0 3
10098: PUSH
10099: DOUBLE
10100: LD_INT 1
10102: DEC
10103: ST_TO_ADDR
10104: LD_OWVAR 67
10108: PUSH
10109: FOR_TO
10110: IFFALSE 10168
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10112: LD_INT 0
10114: PPUSH
10115: LD_INT 1
10117: PPUSH
10118: LD_INT 4
10120: PUSH
10121: LD_INT 5
10123: PUSH
10124: LD_INT 5
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: LIST
10131: PUSH
10132: LD_OWVAR 67
10136: ARRAY
10137: PPUSH
10138: CALL_OW 380
// un := CreateHuman ;
10142: LD_ADDR_VAR 0 5
10146: PUSH
10147: CALL_OW 44
10151: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10152: LD_VAR 0 5
10156: PPUSH
10157: LD_VAR 0 4
10161: PPUSH
10162: CALL_OW 52
// end ;
10166: GO 10109
10168: POP
10169: POP
// end else
10170: GO 10238
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10172: LD_INT 0
10174: PPUSH
10175: LD_INT 1
10177: PPUSH
10178: LD_INT 4
10180: PUSH
10181: LD_INT 5
10183: PUSH
10184: LD_INT 5
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: LIST
10191: PUSH
10192: LD_OWVAR 67
10196: ARRAY
10197: PPUSH
10198: CALL_OW 380
// un := CreateHuman ;
10202: LD_ADDR_VAR 0 5
10206: PUSH
10207: CALL_OW 44
10211: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10212: LD_VAR 0 5
10216: PPUSH
10217: LD_VAR 0 4
10221: PPUSH
10222: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
10226: LD_VAR 0 5
10230: PPUSH
10231: LD_INT 9
10233: PPUSH
10234: CALL_OW 336
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10238: LD_ADDR_EXP 54
10242: PUSH
10243: LD_EXP 54
10247: PPUSH
10248: LD_EXP 54
10252: PUSH
10253: LD_INT 1
10255: PLUS
10256: PPUSH
10257: LD_VAR 0 5
10261: PPUSH
10262: CALL_OW 1
10266: ST_TO_ADDR
// end ;
10267: GO 10029
10269: POP
10270: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
10271: LD_ADDR_VAR 0 4
10275: PUSH
10276: LD_INT 10
10278: PPUSH
10279: LD_INT 22
10281: PUSH
10282: LD_INT 3
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 30
10291: PUSH
10292: LD_INT 32
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 58
10301: PUSH
10302: EMPTY
10303: LIST
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: PPUSH
10310: CALL_OW 70
10314: PUSH
10315: FOR_IN
10316: IFFALSE 10442
// begin if not Prob ( [ 40 , 50 , 75 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
10318: LD_INT 40
10320: PUSH
10321: LD_INT 50
10323: PUSH
10324: LD_INT 75
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: PUSH
10332: LD_OWVAR 67
10336: ARRAY
10337: PUSH
10338: LD_EXP 7
10342: PUSH
10343: LD_INT 10
10345: MUL
10346: MINUS
10347: PPUSH
10348: CALL_OW 13
10352: NOT
10353: IFFALSE 10357
// continue ;
10355: GO 10315
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10357: LD_INT 0
10359: PPUSH
10360: LD_INT 1
10362: PPUSH
10363: LD_INT 4
10365: PUSH
10366: LD_INT 5
10368: PUSH
10369: LD_INT 5
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: LIST
10376: PUSH
10377: LD_OWVAR 67
10381: ARRAY
10382: PPUSH
10383: CALL_OW 380
// un := CreateHuman ;
10387: LD_ADDR_VAR 0 5
10391: PUSH
10392: CALL_OW 44
10396: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10397: LD_VAR 0 5
10401: PPUSH
10402: LD_VAR 0 4
10406: PPUSH
10407: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10411: LD_ADDR_EXP 54
10415: PUSH
10416: LD_EXP 54
10420: PPUSH
10421: LD_EXP 54
10425: PUSH
10426: LD_INT 1
10428: PLUS
10429: PPUSH
10430: LD_VAR 0 5
10434: PPUSH
10435: CALL_OW 1
10439: ST_TO_ADDR
// end ;
10440: GO 10315
10442: POP
10443: POP
// for i := 1 to 5 do
10444: LD_ADDR_VAR 0 2
10448: PUSH
10449: DOUBLE
10450: LD_INT 1
10452: DEC
10453: ST_TO_ADDR
10454: LD_INT 5
10456: PUSH
10457: FOR_TO
10458: IFFALSE 10552
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10460: LD_INT 0
10462: PPUSH
10463: LD_INT 2
10465: PPUSH
10466: LD_INT 4
10468: PUSH
10469: LD_INT 5
10471: PUSH
10472: LD_INT 5
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: LIST
10479: PUSH
10480: LD_OWVAR 67
10484: ARRAY
10485: PPUSH
10486: CALL_OW 380
// un := CreateHuman ;
10490: LD_ADDR_VAR 0 5
10494: PUSH
10495: CALL_OW 44
10499: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
10500: LD_VAR 0 5
10504: PPUSH
10505: LD_INT 66
10507: PPUSH
10508: LD_INT 101
10510: PPUSH
10511: LD_INT 3
10513: PPUSH
10514: LD_INT 0
10516: PPUSH
10517: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10521: LD_ADDR_EXP 54
10525: PUSH
10526: LD_EXP 54
10530: PPUSH
10531: LD_EXP 54
10535: PUSH
10536: LD_INT 1
10538: PLUS
10539: PPUSH
10540: LD_VAR 0 5
10544: PPUSH
10545: CALL_OW 1
10549: ST_TO_ADDR
// end ;
10550: GO 10457
10552: POP
10553: POP
// tmp := [ ruFac1 , ruFac2 ] ;
10554: LD_ADDR_VAR 0 7
10558: PUSH
10559: LD_INT 72
10561: PUSH
10562: LD_INT 12
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: ST_TO_ADDR
// for i := 1 to tmp do
10569: LD_ADDR_VAR 0 2
10573: PUSH
10574: DOUBLE
10575: LD_INT 1
10577: DEC
10578: ST_TO_ADDR
10579: LD_VAR 0 7
10583: PUSH
10584: FOR_TO
10585: IFFALSE 10698
// for j := 1 to 6 do
10587: LD_ADDR_VAR 0 3
10591: PUSH
10592: DOUBLE
10593: LD_INT 1
10595: DEC
10596: ST_TO_ADDR
10597: LD_INT 6
10599: PUSH
10600: FOR_TO
10601: IFFALSE 10694
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10603: LD_INT 0
10605: PPUSH
10606: LD_INT 3
10608: PPUSH
10609: LD_INT 4
10611: PUSH
10612: LD_INT 5
10614: PUSH
10615: LD_INT 5
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: LIST
10622: PUSH
10623: LD_OWVAR 67
10627: ARRAY
10628: PPUSH
10629: CALL_OW 380
// un := CreateHuman ;
10633: LD_ADDR_VAR 0 5
10637: PUSH
10638: CALL_OW 44
10642: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
10643: LD_VAR 0 5
10647: PPUSH
10648: LD_VAR 0 7
10652: PUSH
10653: LD_VAR 0 2
10657: ARRAY
10658: PPUSH
10659: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10663: LD_ADDR_EXP 54
10667: PUSH
10668: LD_EXP 54
10672: PPUSH
10673: LD_EXP 54
10677: PUSH
10678: LD_INT 1
10680: PLUS
10681: PPUSH
10682: LD_VAR 0 5
10686: PPUSH
10687: CALL_OW 1
10691: ST_TO_ADDR
// end ;
10692: GO 10600
10694: POP
10695: POP
10696: GO 10584
10698: POP
10699: POP
// for i := 1 to 3 do
10700: LD_ADDR_VAR 0 2
10704: PUSH
10705: DOUBLE
10706: LD_INT 1
10708: DEC
10709: ST_TO_ADDR
10710: LD_INT 3
10712: PUSH
10713: FOR_TO
10714: IFFALSE 10799
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10716: LD_INT 0
10718: PPUSH
10719: LD_INT 4
10721: PPUSH
10722: LD_INT 4
10724: PUSH
10725: LD_INT 5
10727: PUSH
10728: LD_INT 5
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: LIST
10735: PUSH
10736: LD_OWVAR 67
10740: ARRAY
10741: PPUSH
10742: CALL_OW 380
// un := CreateHuman ;
10746: LD_ADDR_VAR 0 5
10750: PUSH
10751: CALL_OW 44
10755: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
10756: LD_VAR 0 5
10760: PPUSH
10761: LD_INT 17
10763: PPUSH
10764: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10768: LD_ADDR_EXP 54
10772: PUSH
10773: LD_EXP 54
10777: PPUSH
10778: LD_EXP 54
10782: PUSH
10783: LD_INT 1
10785: PLUS
10786: PPUSH
10787: LD_VAR 0 5
10791: PPUSH
10792: CALL_OW 1
10796: ST_TO_ADDR
// end ;
10797: GO 10713
10799: POP
10800: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
10801: LD_ADDR_VAR 0 2
10805: PUSH
10806: DOUBLE
10807: LD_INT 1
10809: DEC
10810: ST_TO_ADDR
10811: LD_INT 2
10813: PUSH
10814: LD_INT 3
10816: PUSH
10817: LD_INT 3
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: LIST
10824: PUSH
10825: LD_OWVAR 67
10829: ARRAY
10830: PUSH
10831: FOR_TO
10832: IFFALSE 10952
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
10834: LD_INT 22
10836: PPUSH
10837: LD_INT 1
10839: PPUSH
10840: LD_INT 1
10842: PPUSH
10843: LD_INT 52
10845: PPUSH
10846: LD_INT 100
10848: PPUSH
10849: CALL 29338 0 5
// veh := CreateVehicle ;
10853: LD_ADDR_VAR 0 6
10857: PUSH
10858: CALL_OW 45
10862: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
10863: LD_INT 0
10865: PPUSH
10866: LD_INT 3
10868: PPUSH
10869: LD_INT 4
10871: PPUSH
10872: CALL_OW 380
// un := CreateHuman ;
10876: LD_ADDR_VAR 0 5
10880: PUSH
10881: CALL_OW 44
10885: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
10886: LD_VAR 0 6
10890: PPUSH
10891: LD_INT 107
10893: PPUSH
10894: LD_INT 182
10896: PPUSH
10897: LD_INT 4
10899: PPUSH
10900: LD_INT 0
10902: PPUSH
10903: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10907: LD_VAR 0 5
10911: PPUSH
10912: LD_VAR 0 6
10916: PPUSH
10917: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10921: LD_ADDR_EXP 54
10925: PUSH
10926: LD_EXP 54
10930: PPUSH
10931: LD_EXP 54
10935: PUSH
10936: LD_INT 1
10938: PLUS
10939: PPUSH
10940: LD_VAR 0 5
10944: PPUSH
10945: CALL_OW 1
10949: ST_TO_ADDR
// end ;
10950: GO 10831
10952: POP
10953: POP
// InitHc ;
10954: CALL_OW 19
// for i := 1 to [ 6 , 8 , 10 ] [ Difficulty ] do
10958: LD_ADDR_VAR 0 2
10962: PUSH
10963: DOUBLE
10964: LD_INT 1
10966: DEC
10967: ST_TO_ADDR
10968: LD_INT 6
10970: PUSH
10971: LD_INT 8
10973: PUSH
10974: LD_INT 10
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: LIST
10981: PUSH
10982: LD_OWVAR 67
10986: ARRAY
10987: PUSH
10988: FOR_TO
10989: IFFALSE 11061
// begin uc_nation := 0 ;
10991: LD_ADDR_OWVAR 21
10995: PUSH
10996: LD_INT 0
10998: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
10999: LD_ADDR_OWVAR 28
11003: PUSH
11004: LD_INT 15
11006: ST_TO_ADDR
// un := CreateHuman ;
11007: LD_ADDR_VAR 0 5
11011: PUSH
11012: CALL_OW 44
11016: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
11017: LD_VAR 0 5
11021: PPUSH
11022: LD_INT 269
11024: PUSH
11025: LD_INT 300
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PUSH
11032: LD_VAR 0 2
11036: PUSH
11037: LD_INT 2
11039: MOD
11040: PUSH
11041: LD_INT 1
11043: PLUS
11044: ARRAY
11045: PPUSH
11046: LD_INT 182
11048: PPUSH
11049: LD_INT 4
11051: PPUSH
11052: LD_INT 0
11054: PPUSH
11055: CALL_OW 50
// end ;
11059: GO 10988
11061: POP
11062: POP
// uc_nation := 3 ;
11063: LD_ADDR_OWVAR 21
11067: PUSH
11068: LD_INT 3
11070: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
11071: LD_EXP 8
11075: PUSH
11076: LD_INT 10
11078: PUSH
11079: LD_INT 8
11081: PUSH
11082: LD_INT 6
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: LIST
11089: PUSH
11090: LD_OWVAR 67
11094: ARRAY
11095: LESS
11096: IFFALSE 11175
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
11098: LD_INT 21
11100: PPUSH
11101: LD_INT 1
11103: PPUSH
11104: LD_INT 1
11106: PPUSH
11107: LD_INT 51
11109: PPUSH
11110: LD_INT 12
11112: PPUSH
11113: CALL 29338 0 5
// veh := CreateVehicle ;
11117: LD_ADDR_VAR 0 6
11121: PUSH
11122: CALL_OW 45
11126: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
11127: LD_VAR 0 6
11131: PPUSH
11132: LD_INT 269
11134: PPUSH
11135: LD_INT 66
11137: PPUSH
11138: LD_INT 4
11140: PPUSH
11141: LD_INT 0
11143: PPUSH
11144: CALL 63143 0 5
// SetLives ( veh , 333 ) ;
11148: LD_VAR 0 6
11152: PPUSH
11153: LD_INT 333
11155: PPUSH
11156: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
11160: LD_VAR 0 6
11164: PPUSH
11165: LD_INT 2
11167: PPUSH
11168: LD_INT 100
11170: PPUSH
11171: CALL_OW 290
// end ; end ;
11175: LD_VAR 0 1
11179: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
11180: LD_EXP 50
11184: PUSH
11185: LD_EXP 50
11189: PPUSH
11190: CALL_OW 255
11194: PUSH
11195: LD_INT 3
11197: EQUAL
11198: AND
11199: IFFALSE 11362
11201: GO 11203
11203: DISABLE
11204: LD_INT 0
11206: PPUSH
// begin enable ;
11207: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
11208: LD_INT 81
11210: PUSH
11211: LD_INT 3
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PUSH
11218: LD_INT 91
11220: PUSH
11221: LD_EXP 50
11225: PUSH
11226: LD_INT 15
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: LIST
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PPUSH
11238: CALL_OW 69
11242: IFFALSE 11322
// begin if not IsDrivenBy ( ruBlockadeTank ) then
11244: LD_EXP 50
11248: PPUSH
11249: CALL_OW 311
11253: NOT
11254: IFFALSE 11320
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
11256: LD_ADDR_VAR 0 1
11260: PUSH
11261: LD_INT 22
11263: PUSH
11264: LD_INT 3
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 21
11273: PUSH
11274: LD_INT 1
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PPUSH
11285: CALL_OW 69
11289: PPUSH
11290: LD_EXP 50
11294: PPUSH
11295: CALL_OW 74
11299: ST_TO_ADDR
// if driver then
11300: LD_VAR 0 1
11304: IFFALSE 11320
// ComEnterUnit ( driver , ruBlockadeTank ) ;
11306: LD_VAR 0 1
11310: PPUSH
11311: LD_EXP 50
11315: PPUSH
11316: CALL_OW 120
// end ; exit ;
11320: GO 11362
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
11322: LD_EXP 50
11326: PPUSH
11327: CALL_OW 256
11331: PUSH
11332: LD_INT 1000
11334: LESS
11335: PUSH
11336: LD_EXP 50
11340: PPUSH
11341: CALL_OW 311
11345: AND
11346: IFFALSE 11362
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
11348: LD_EXP 50
11352: PPUSH
11353: CALL_OW 311
11357: PPUSH
11358: CALL 62703 0 1
// end ;
11362: PPOPN 1
11364: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
11365: LD_EXP 52
11369: PPUSH
11370: LD_INT 3
11372: PUSH
11373: LD_INT 24
11375: PUSH
11376: LD_INT 1000
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PPUSH
11387: CALL_OW 72
11391: PUSH
11392: LD_EXP 52
11396: PPUSH
11397: LD_INT 25
11399: PUSH
11400: LD_INT 4
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PUSH
11407: LD_INT 50
11409: PUSH
11410: EMPTY
11411: LIST
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PPUSH
11417: CALL_OW 72
11421: AND
11422: IFFALSE 11610
11424: GO 11426
11426: DISABLE
11427: LD_INT 0
11429: PPUSH
11430: PPUSH
11431: PPUSH
// begin enable ;
11432: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
11433: LD_ADDR_VAR 0 3
11437: PUSH
11438: LD_EXP 52
11442: PPUSH
11443: LD_INT 3
11445: PUSH
11446: LD_INT 24
11448: PUSH
11449: LD_INT 1000
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PPUSH
11460: CALL_OW 72
11464: PPUSH
11465: LD_INT 1
11467: PPUSH
11468: CALL 62943 0 2
11472: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
11473: LD_ADDR_VAR 0 2
11477: PUSH
11478: LD_EXP 52
11482: PPUSH
11483: LD_INT 25
11485: PUSH
11486: LD_INT 4
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 50
11495: PUSH
11496: EMPTY
11497: LIST
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PPUSH
11503: CALL_OW 72
11507: PUSH
11508: LD_INT 1
11510: ARRAY
11511: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
11512: LD_VAR 0 2
11516: PPUSH
11517: LD_VAR 0 3
11521: PUSH
11522: LD_INT 1
11524: ARRAY
11525: PPUSH
11526: CALL 58442 0 2
11530: NOT
11531: IFFALSE 11610
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
11533: LD_VAR 0 3
11537: PUSH
11538: LD_INT 1
11540: ARRAY
11541: PPUSH
11542: LD_INT 9
11544: PPUSH
11545: CALL_OW 308
11549: NOT
11550: IFFALSE 11568
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
11552: LD_VAR 0 3
11556: PUSH
11557: LD_INT 1
11559: ARRAY
11560: PPUSH
11561: LD_INT 9
11563: PPUSH
11564: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
11568: LD_VAR 0 2
11572: PPUSH
11573: LD_VAR 0 3
11577: PUSH
11578: LD_INT 1
11580: ARRAY
11581: PPUSH
11582: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
11586: LD_VAR 0 2
11590: PPUSH
11591: LD_INT 179
11593: PPUSH
11594: LD_INT 113
11596: PPUSH
11597: CALL_OW 171
// AddComHold ( sci ) ;
11601: LD_VAR 0 2
11605: PPUSH
11606: CALL_OW 200
// end ; end ;
11610: PPOPN 3
11612: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
11613: LD_INT 2
11615: PPUSH
11616: LD_INT 52
11618: PPUSH
11619: CALL_OW 292
11623: IFFALSE 11728
11625: GO 11627
11627: DISABLE
11628: LD_INT 0
11630: PPUSH
11631: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
11632: LD_ADDR_VAR 0 2
11636: PUSH
11637: LD_EXP 54
11641: PPUSH
11642: LD_INT 25
11644: PUSH
11645: LD_INT 1
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: LD_INT 50
11654: PUSH
11655: EMPTY
11656: LIST
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PPUSH
11662: CALL_OW 72
11666: ST_TO_ADDR
// if not tmp then
11667: LD_VAR 0 2
11671: NOT
11672: IFFALSE 11676
// exit ;
11674: GO 11728
// for i in tmp do
11676: LD_ADDR_VAR 0 1
11680: PUSH
11681: LD_VAR 0 2
11685: PUSH
11686: FOR_IN
11687: IFFALSE 11726
// begin if IsInUnit ( i ) then
11689: LD_VAR 0 1
11693: PPUSH
11694: CALL_OW 310
11698: IFFALSE 11709
// ComExitBuilding ( i ) ;
11700: LD_VAR 0 1
11704: PPUSH
11705: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
11709: LD_VAR 0 1
11713: PPUSH
11714: LD_INT 84
11716: PPUSH
11717: LD_INT 133
11719: PPUSH
11720: CALL_OW 174
// end ;
11724: GO 11686
11726: POP
11727: POP
// end ;
11728: PPOPN 2
11730: END
// every 0 0$1 trigger leninSpotted do var i , tmp , weapon ;
11731: LD_EXP 14
11735: IFFALSE 11884
11737: GO 11739
11739: DISABLE
11740: LD_INT 0
11742: PPUSH
11743: PPUSH
11744: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
11745: LD_ADDR_VAR 0 2
11749: PUSH
11750: LD_INT 72
11752: PUSH
11753: LD_INT 12
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket , ru_gun ] , [ ru_rocket , ru_heavy_gun ] ] [ Difficulty ] ;
11760: LD_ADDR_VAR 0 3
11764: PUSH
11765: LD_INT 44
11767: PUSH
11768: LD_INT 43
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 47
11777: PUSH
11778: LD_INT 44
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 47
11787: PUSH
11788: LD_INT 46
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: LIST
11799: PUSH
11800: LD_OWVAR 67
11804: ARRAY
11805: ST_TO_ADDR
// for i := 1 to 6 do
11806: LD_ADDR_VAR 0 1
11810: PUSH
11811: DOUBLE
11812: LD_INT 1
11814: DEC
11815: ST_TO_ADDR
11816: LD_INT 6
11818: PUSH
11819: FOR_TO
11820: IFFALSE 11882
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
11822: LD_VAR 0 2
11826: PPUSH
11827: LD_INT 22
11829: PUSH
11830: LD_INT 23
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PUSH
11837: LD_VAR 0 1
11841: PUSH
11842: LD_INT 2
11844: MOD
11845: PUSH
11846: LD_INT 1
11848: PLUS
11849: ARRAY
11850: PPUSH
11851: LD_INT 1
11853: PPUSH
11854: LD_INT 1
11856: PPUSH
11857: LD_VAR 0 3
11861: PUSH
11862: LD_VAR 0 1
11866: PUSH
11867: LD_INT 2
11869: MOD
11870: PUSH
11871: LD_INT 1
11873: PLUS
11874: ARRAY
11875: PPUSH
11876: CALL_OW 185
11880: GO 11819
11882: POP
11883: POP
// end ;
11884: PPOPN 3
11886: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
11887: LD_EXP 11
11891: IFFALSE 13040
11893: GO 11895
11895: DISABLE
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
// begin enable ;
11904: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
11905: LD_ADDR_VAR 0 6
11909: PUSH
11910: LD_INT 10
11912: PPUSH
11913: LD_INT 81
11915: PUSH
11916: LD_INT 3
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PPUSH
11923: CALL_OW 70
11927: ST_TO_ADDR
// if ruSpecialVehicleGroup then
11928: LD_EXP 55
11932: IFFALSE 12198
// begin for i in ruSpecialVehicleGroup do
11934: LD_ADDR_VAR 0 1
11938: PUSH
11939: LD_EXP 55
11943: PUSH
11944: FOR_IN
11945: IFFALSE 12196
// begin if enemyInBase then
11947: LD_VAR 0 6
11951: IFFALSE 12194
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
11953: LD_VAR 0 1
11957: PPUSH
11958: CALL_OW 256
11962: PUSH
11963: LD_INT 500
11965: GREATER
11966: PUSH
11967: LD_VAR 0 1
11971: PPUSH
11972: CALL_OW 110
11976: PUSH
11977: LD_INT 0
11979: EQUAL
11980: AND
11981: IFFALSE 12007
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
11983: LD_VAR 0 1
11987: PPUSH
11988: LD_VAR 0 6
11992: PPUSH
11993: LD_VAR 0 1
11997: PPUSH
11998: CALL_OW 74
12002: PPUSH
12003: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12007: LD_VAR 0 1
12011: PPUSH
12012: CALL_OW 256
12016: PUSH
12017: LD_INT 500
12019: LESSEQUAL
12020: PUSH
12021: LD_VAR 0 1
12025: PPUSH
12026: CALL_OW 110
12030: PUSH
12031: LD_INT 0
12033: EQUAL
12034: AND
12035: IFFALSE 12064
// begin SetTag ( i , 1 ) ;
12037: LD_VAR 0 1
12041: PPUSH
12042: LD_INT 1
12044: PPUSH
12045: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
12049: LD_VAR 0 1
12053: PPUSH
12054: LD_INT 83
12056: PPUSH
12057: LD_INT 134
12059: PPUSH
12060: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
12064: LD_VAR 0 1
12068: PPUSH
12069: CALL_OW 256
12073: PUSH
12074: LD_INT 1000
12076: LESS
12077: PUSH
12078: LD_VAR 0 1
12082: PPUSH
12083: CALL_OW 110
12087: PUSH
12088: LD_INT 1
12090: EQUAL
12091: AND
12092: PUSH
12093: LD_VAR 0 1
12097: PPUSH
12098: LD_INT 83
12100: PPUSH
12101: LD_INT 134
12103: PPUSH
12104: CALL_OW 297
12108: PUSH
12109: LD_INT 6
12111: LESS
12112: AND
12113: IFFALSE 12141
// begin SetFuel ( i , 100 ) ;
12115: LD_VAR 0 1
12119: PPUSH
12120: LD_INT 100
12122: PPUSH
12123: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12127: LD_VAR 0 1
12131: PPUSH
12132: CALL_OW 310
12136: PPUSH
12137: CALL 62823 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
12141: LD_VAR 0 1
12145: PPUSH
12146: CALL_OW 256
12150: PUSH
12151: LD_INT 1000
12153: EQUAL
12154: PUSH
12155: LD_VAR 0 1
12159: PPUSH
12160: CALL_OW 110
12164: PUSH
12165: LD_INT 1
12167: EQUAL
12168: AND
12169: PUSH
12170: LD_VAR 0 1
12174: PPUSH
12175: CALL_OW 311
12179: AND
12180: IFFALSE 12194
// SetTag ( i , 0 ) ;
12182: LD_VAR 0 1
12186: PPUSH
12187: LD_INT 0
12189: PPUSH
12190: CALL_OW 109
// end ; end ;
12194: GO 11944
12196: POP
12197: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
12198: LD_ADDR_VAR 0 5
12202: PUSH
12203: LD_EXP 54
12207: PPUSH
12208: LD_INT 25
12210: PUSH
12211: LD_INT 4
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PPUSH
12218: CALL_OW 72
12222: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12223: LD_ADDR_VAR 0 4
12227: PUSH
12228: LD_EXP 54
12232: PPUSH
12233: LD_INT 92
12235: PUSH
12236: LD_INT 92
12238: PUSH
12239: LD_INT 155
12241: PUSH
12242: LD_INT 12
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 3
12253: PUSH
12254: LD_INT 24
12256: PUSH
12257: LD_INT 1000
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PPUSH
12272: CALL_OW 72
12276: ST_TO_ADDR
// if sci then
12277: LD_VAR 0 5
12281: IFFALSE 12414
// begin if hurt then
12283: LD_VAR 0 4
12287: IFFALSE 12360
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12289: LD_VAR 0 5
12293: PPUSH
12294: LD_INT 3
12296: PUSH
12297: LD_INT 54
12299: PUSH
12300: EMPTY
12301: LIST
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PPUSH
12307: CALL_OW 72
12311: IFFALSE 12340
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
12313: LD_VAR 0 5
12317: PPUSH
12318: LD_INT 3
12320: PUSH
12321: LD_INT 54
12323: PUSH
12324: EMPTY
12325: LIST
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PPUSH
12331: CALL_OW 72
12335: PPUSH
12336: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
12340: LD_VAR 0 5
12344: PPUSH
12345: LD_VAR 0 4
12349: PUSH
12350: LD_INT 1
12352: ARRAY
12353: PPUSH
12354: CALL_OW 188
// end else
12358: GO 12414
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12360: LD_VAR 0 5
12364: PPUSH
12365: LD_INT 3
12367: PUSH
12368: LD_INT 54
12370: PUSH
12371: EMPTY
12372: LIST
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PPUSH
12378: CALL_OW 72
12382: IFFALSE 12414
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
12384: LD_VAR 0 5
12388: PPUSH
12389: LD_INT 3
12391: PUSH
12392: LD_INT 54
12394: PUSH
12395: EMPTY
12396: LIST
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PPUSH
12402: CALL_OW 72
12406: PPUSH
12407: LD_INT 17
12409: PPUSH
12410: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12414: LD_ADDR_VAR 0 3
12418: PUSH
12419: LD_INT 10
12421: PPUSH
12422: LD_INT 21
12424: PUSH
12425: LD_INT 3
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PUSH
12432: LD_INT 3
12434: PUSH
12435: LD_INT 24
12437: PUSH
12438: LD_INT 1000
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PPUSH
12453: CALL_OW 70
12457: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
12458: LD_ADDR_VAR 0 2
12462: PUSH
12463: LD_EXP 54
12467: PPUSH
12468: LD_INT 25
12470: PUSH
12471: LD_INT 2
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: PPUSH
12478: CALL_OW 72
12482: PUSH
12483: LD_INT 22
12485: PUSH
12486: LD_INT 3
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 34
12495: PUSH
12496: LD_INT 52
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PPUSH
12507: CALL_OW 69
12511: UNION
12512: ST_TO_ADDR
// if not tmp then
12513: LD_VAR 0 2
12517: NOT
12518: IFFALSE 12522
// exit ;
12520: GO 13040
// for i in tmp do
12522: LD_ADDR_VAR 0 1
12526: PUSH
12527: LD_VAR 0 2
12531: PUSH
12532: FOR_IN
12533: IFFALSE 13038
// begin if GetClass ( i ) = 2 then
12535: LD_VAR 0 1
12539: PPUSH
12540: CALL_OW 257
12544: PUSH
12545: LD_INT 2
12547: EQUAL
12548: IFFALSE 12771
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
12550: LD_VAR 0 1
12554: PPUSH
12555: CALL_OW 256
12559: PUSH
12560: LD_INT 1000
12562: EQUAL
12563: PUSH
12564: LD_VAR 0 1
12568: PPUSH
12569: CALL_OW 110
12573: PUSH
12574: LD_INT 1
12576: EQUAL
12577: AND
12578: IFFALSE 12592
// SetTag ( i , 0 ) ;
12580: LD_VAR 0 1
12584: PPUSH
12585: LD_INT 0
12587: PPUSH
12588: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12592: LD_VAR 0 1
12596: PPUSH
12597: CALL_OW 256
12601: PUSH
12602: LD_INT 500
12604: LESSEQUAL
12605: PUSH
12606: LD_VAR 0 1
12610: PPUSH
12611: CALL_OW 110
12615: PUSH
12616: LD_INT 0
12618: EQUAL
12619: AND
12620: IFFALSE 12649
// begin SetTag ( i , 1 ) ;
12622: LD_VAR 0 1
12626: PPUSH
12627: LD_INT 1
12629: PPUSH
12630: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
12634: LD_VAR 0 1
12638: PPUSH
12639: LD_INT 92
12641: PPUSH
12642: LD_INT 155
12644: PPUSH
12645: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
12649: LD_VAR 0 3
12653: PUSH
12654: LD_VAR 0 1
12658: PPUSH
12659: CALL_OW 256
12663: PUSH
12664: LD_INT 500
12666: GREATER
12667: AND
12668: PUSH
12669: LD_VAR 0 1
12673: PPUSH
12674: CALL_OW 110
12678: PUSH
12679: LD_INT 0
12681: EQUAL
12682: AND
12683: PUSH
12684: LD_VAR 0 1
12688: PPUSH
12689: CALL_OW 314
12693: NOT
12694: AND
12695: IFFALSE 12769
// begin if b then
12697: LD_VAR 0 3
12701: IFFALSE 12733
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
12703: LD_VAR 0 1
12707: PPUSH
12708: LD_VAR 0 3
12712: PUSH
12713: LD_INT 1
12715: PPUSH
12716: LD_VAR 0 3
12720: PPUSH
12721: CALL_OW 12
12725: ARRAY
12726: PPUSH
12727: CALL_OW 130
12731: GO 12769
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
12733: LD_VAR 0 1
12737: PPUSH
12738: LD_INT 94
12740: PPUSH
12741: LD_INT 165
12743: PPUSH
12744: CALL_OW 297
12748: PUSH
12749: LD_INT 8
12751: GREATER
12752: IFFALSE 12769
// ComMoveXY ( i , 94 , 165 ) ;
12754: LD_VAR 0 1
12758: PPUSH
12759: LD_INT 94
12761: PPUSH
12762: LD_INT 165
12764: PPUSH
12765: CALL_OW 111
// end ; end else
12769: GO 13036
// if GetWeapon ( i ) = ru_crane then
12771: LD_VAR 0 1
12775: PPUSH
12776: CALL_OW 264
12780: PUSH
12781: LD_INT 52
12783: EQUAL
12784: IFFALSE 13036
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
12786: LD_VAR 0 1
12790: PPUSH
12791: CALL_OW 256
12795: PUSH
12796: LD_INT 1000
12798: EQUAL
12799: PUSH
12800: LD_VAR 0 1
12804: PPUSH
12805: CALL_OW 110
12809: PUSH
12810: LD_INT 1
12812: EQUAL
12813: AND
12814: IFFALSE 12840
// begin SetTag ( i , 0 ) ;
12816: LD_VAR 0 1
12820: PPUSH
12821: LD_INT 0
12823: PPUSH
12824: CALL_OW 109
// SetFuel ( i , 100 ) ;
12828: LD_VAR 0 1
12832: PPUSH
12833: LD_INT 100
12835: PPUSH
12836: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12840: LD_VAR 0 1
12844: PPUSH
12845: CALL_OW 256
12849: PUSH
12850: LD_INT 500
12852: LESSEQUAL
12853: PUSH
12854: LD_VAR 0 1
12858: PPUSH
12859: CALL_OW 110
12863: PUSH
12864: LD_INT 0
12866: EQUAL
12867: AND
12868: IFFALSE 12911
// begin SetTag ( i , 1 ) ;
12870: LD_VAR 0 1
12874: PPUSH
12875: LD_INT 1
12877: PPUSH
12878: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
12882: LD_VAR 0 1
12886: PPUSH
12887: LD_INT 83
12889: PPUSH
12890: LD_INT 135
12892: PPUSH
12893: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12897: LD_VAR 0 1
12901: PPUSH
12902: CALL_OW 310
12906: PPUSH
12907: CALL 62823 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
12911: LD_VAR 0 1
12915: PPUSH
12916: CALL_OW 256
12920: PUSH
12921: LD_INT 500
12923: GREATER
12924: PUSH
12925: LD_VAR 0 1
12929: PPUSH
12930: CALL_OW 110
12934: PUSH
12935: LD_INT 0
12937: EQUAL
12938: AND
12939: PUSH
12940: LD_VAR 0 1
12944: PPUSH
12945: CALL_OW 311
12949: AND
12950: PUSH
12951: LD_VAR 0 1
12955: PPUSH
12956: CALL_OW 314
12960: NOT
12961: AND
12962: IFFALSE 13036
// begin if b then
12964: LD_VAR 0 3
12968: IFFALSE 13000
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
12970: LD_VAR 0 1
12974: PPUSH
12975: LD_VAR 0 3
12979: PUSH
12980: LD_INT 1
12982: PPUSH
12983: LD_VAR 0 3
12987: PPUSH
12988: CALL_OW 12
12992: ARRAY
12993: PPUSH
12994: CALL_OW 130
12998: GO 13036
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13000: LD_VAR 0 1
13004: PPUSH
13005: LD_INT 94
13007: PPUSH
13008: LD_INT 165
13010: PPUSH
13011: CALL_OW 297
13015: PUSH
13016: LD_INT 8
13018: GREATER
13019: IFFALSE 13036
// ComMoveXY ( i , 94 , 165 ) ;
13021: LD_VAR 0 1
13025: PPUSH
13026: LD_INT 94
13028: PPUSH
13029: LD_INT 165
13031: PPUSH
13032: CALL_OW 111
// end ; end ; end ;
13036: GO 12532
13038: POP
13039: POP
// end ;
13040: PPOPN 6
13042: END
// every 7 7$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp ;
13043: LD_EXP 23
13047: NOT
13048: PUSH
13049: LD_EXP 27
13053: NOT
13054: AND
13055: IFFALSE 13955
13057: GO 13059
13059: DISABLE
13060: LD_INT 0
13062: PPUSH
13063: PPUSH
13064: PPUSH
13065: PPUSH
// begin enable ;
13066: ENABLE
// if Prob ( [ 35 , 45 , 55 ] [ Difficulty ] ) then
13067: LD_INT 35
13069: PUSH
13070: LD_INT 45
13072: PUSH
13073: LD_INT 55
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: LIST
13080: PUSH
13081: LD_OWVAR 67
13085: ARRAY
13086: PPUSH
13087: CALL_OW 13
13091: IFFALSE 13107
// waveStrength := waveStrength + 1 ;
13093: LD_ADDR_EXP 57
13097: PUSH
13098: LD_EXP 57
13102: PUSH
13103: LD_INT 1
13105: PLUS
13106: ST_TO_ADDR
// if waveStrength > [ 4 , 5 , 6 ] [ Difficulty ] then
13107: LD_EXP 57
13111: PUSH
13112: LD_INT 4
13114: PUSH
13115: LD_INT 5
13117: PUSH
13118: LD_INT 6
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: LIST
13125: PUSH
13126: LD_OWVAR 67
13130: ARRAY
13131: GREATER
13132: IFFALSE 13165
// begin waveStrength := waveStrength + Difficulty ;
13134: LD_ADDR_EXP 57
13138: PUSH
13139: LD_EXP 57
13143: PUSH
13144: LD_OWVAR 67
13148: PLUS
13149: ST_TO_ADDR
// disableAttackOnHeike := true ;
13150: LD_ADDR_EXP 27
13154: PUSH
13155: LD_INT 1
13157: ST_TO_ADDR
// wait ( 3 3$00 ) ;
13158: LD_INT 6300
13160: PPUSH
13161: CALL_OW 67
// end ; if disableAttackOnHeike and Difficulty > 1 then
13165: LD_EXP 27
13169: PUSH
13170: LD_OWVAR 67
13174: PUSH
13175: LD_INT 1
13177: GREATER
13178: AND
13179: IFFALSE 13384
// begin for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
13181: LD_ADDR_VAR 0 1
13185: PUSH
13186: DOUBLE
13187: LD_INT 1
13189: DEC
13190: ST_TO_ADDR
13191: LD_INT 3
13193: PUSH
13194: LD_INT 3
13196: PUSH
13197: LD_INT 4
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: LIST
13204: PUSH
13205: LD_OWVAR 67
13209: ARRAY
13210: PUSH
13211: FOR_TO
13212: IFFALSE 13382
// begin InitHc ;
13214: CALL_OW 19
// InitVc ;
13218: CALL_OW 20
// uc_side := 3 ;
13222: LD_ADDR_OWVAR 20
13226: PUSH
13227: LD_INT 3
13229: ST_TO_ADDR
// uc_nation := 3 ;
13230: LD_ADDR_OWVAR 21
13234: PUSH
13235: LD_INT 3
13237: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
13238: LD_INT 0
13240: PPUSH
13241: LD_INT 1
13243: PPUSH
13244: LD_OWVAR 67
13248: PUSH
13249: LD_INT 2
13251: PLUS
13252: PPUSH
13253: CALL_OW 380
// un := CreateHuman ;
13257: LD_ADDR_VAR 0 2
13261: PUSH
13262: CALL_OW 44
13266: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
13267: LD_VAR 0 2
13271: PPUSH
13272: LD_INT 160
13274: PPUSH
13275: LD_INT 3
13277: PPUSH
13278: LD_INT 2
13280: PPUSH
13281: LD_INT 0
13283: PPUSH
13284: CALL 63143 0 5
// SetClass ( un , class_bazooker ) ;
13288: LD_VAR 0 2
13292: PPUSH
13293: LD_INT 9
13295: PPUSH
13296: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13300: LD_ADDR_EXP 56
13304: PUSH
13305: LD_EXP 56
13309: PPUSH
13310: LD_EXP 56
13314: PUSH
13315: LD_INT 1
13317: PLUS
13318: PPUSH
13319: LD_VAR 0 2
13323: PPUSH
13324: CALL_OW 1
13328: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13329: LD_VAR 0 2
13333: PPUSH
13334: LD_INT 177
13336: PPUSH
13337: LD_INT 17
13339: PPUSH
13340: CALL_OW 111
// wait ( 0 0$2 ) ;
13344: LD_INT 70
13346: PPUSH
13347: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13351: LD_ADDR_VAR 0 4
13355: PUSH
13356: LD_VAR 0 4
13360: PPUSH
13361: LD_VAR 0 4
13365: PUSH
13366: LD_INT 1
13368: PLUS
13369: PPUSH
13370: LD_VAR 0 2
13374: PPUSH
13375: CALL_OW 1
13379: ST_TO_ADDR
// end ;
13380: GO 13211
13382: POP
13383: POP
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] + waveStrength do
13384: LD_ADDR_VAR 0 1
13388: PUSH
13389: DOUBLE
13390: LD_INT 1
13392: DEC
13393: ST_TO_ADDR
13394: LD_INT 2
13396: PUSH
13397: LD_INT 3
13399: PUSH
13400: LD_INT 4
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: LIST
13407: PUSH
13408: LD_OWVAR 67
13412: ARRAY
13413: PUSH
13414: LD_EXP 57
13418: PLUS
13419: PUSH
13420: FOR_TO
13421: IFFALSE 13730
// begin InitHc ;
13423: CALL_OW 19
// InitVc ;
13427: CALL_OW 20
// uc_side := 3 ;
13431: LD_ADDR_OWVAR 20
13435: PUSH
13436: LD_INT 3
13438: ST_TO_ADDR
// uc_nation := 3 ;
13439: LD_ADDR_OWVAR 21
13443: PUSH
13444: LD_INT 3
13446: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
13447: LD_INT 22
13449: PUSH
13450: LD_INT 23
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 1
13459: PPUSH
13460: LD_INT 2
13462: PPUSH
13463: CALL_OW 12
13467: ARRAY
13468: PPUSH
13469: LD_INT 1
13471: PPUSH
13472: LD_INT 1
13474: PPUSH
13475: LD_INT 44
13477: PUSH
13478: LD_INT 45
13480: PUSH
13481: LD_INT 43
13483: PUSH
13484: LD_INT 42
13486: PUSH
13487: LD_INT 44
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: PUSH
13497: LD_INT 1
13499: PPUSH
13500: LD_INT 5
13502: PPUSH
13503: CALL_OW 12
13507: ARRAY
13508: PPUSH
13509: LD_INT 99
13511: PPUSH
13512: CALL 29338 0 5
// veh := CreateVehicle ;
13516: LD_ADDR_VAR 0 3
13520: PUSH
13521: CALL_OW 45
13525: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
13526: LD_VAR 0 3
13530: PPUSH
13531: LD_INT 160
13533: PPUSH
13534: LD_INT 3
13536: PPUSH
13537: LD_INT 2
13539: PPUSH
13540: LD_INT 0
13542: PPUSH
13543: CALL 63143 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
13547: LD_ADDR_EXP 56
13551: PUSH
13552: LD_EXP 56
13556: PPUSH
13557: LD_EXP 56
13561: PUSH
13562: LD_INT 1
13564: PLUS
13565: PPUSH
13566: LD_VAR 0 3
13570: PPUSH
13571: CALL_OW 1
13575: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
13576: LD_INT 0
13578: PPUSH
13579: LD_INT 3
13581: PPUSH
13582: LD_OWVAR 67
13586: PUSH
13587: LD_INT 2
13589: PLUS
13590: PPUSH
13591: CALL_OW 380
// un := CreateHuman ;
13595: LD_ADDR_VAR 0 2
13599: PUSH
13600: CALL_OW 44
13604: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13605: LD_VAR 0 2
13609: PPUSH
13610: LD_VAR 0 3
13614: PPUSH
13615: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13619: LD_ADDR_EXP 56
13623: PUSH
13624: LD_EXP 56
13628: PPUSH
13629: LD_EXP 56
13633: PUSH
13634: LD_INT 1
13636: PLUS
13637: PPUSH
13638: LD_VAR 0 2
13642: PPUSH
13643: CALL_OW 1
13647: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13648: LD_VAR 0 2
13652: PPUSH
13653: LD_INT 177
13655: PPUSH
13656: LD_INT 17
13658: PPUSH
13659: CALL_OW 111
// wait ( 0 0$2 ) ;
13663: LD_INT 70
13665: PPUSH
13666: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
13670: LD_ADDR_VAR 0 4
13674: PUSH
13675: LD_VAR 0 4
13679: PPUSH
13680: LD_VAR 0 4
13684: PUSH
13685: LD_INT 1
13687: PLUS
13688: PPUSH
13689: LD_VAR 0 3
13693: PPUSH
13694: CALL_OW 1
13698: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13699: LD_ADDR_VAR 0 4
13703: PUSH
13704: LD_VAR 0 4
13708: PPUSH
13709: LD_VAR 0 4
13713: PUSH
13714: LD_INT 1
13716: PLUS
13717: PPUSH
13718: LD_VAR 0 2
13722: PPUSH
13723: CALL_OW 1
13727: ST_TO_ADDR
// end ;
13728: GO 13420
13730: POP
13731: POP
// for i in tmp do
13732: LD_ADDR_VAR 0 1
13736: PUSH
13737: LD_VAR 0 4
13741: PUSH
13742: FOR_IN
13743: IFFALSE 13833
// begin if Prob ( 50 ) then
13745: LD_INT 50
13747: PPUSH
13748: CALL_OW 13
13752: IFFALSE 13771
// ComAgressiveMove ( i , 206 , 73 ) else
13754: LD_VAR 0 1
13758: PPUSH
13759: LD_INT 206
13761: PPUSH
13762: LD_INT 73
13764: PPUSH
13765: CALL_OW 114
13769: GO 13831
// begin ComAgressiveMove ( i , 206 , 73 ) ;
13771: LD_VAR 0 1
13775: PPUSH
13776: LD_INT 206
13778: PPUSH
13779: LD_INT 73
13781: PPUSH
13782: CALL_OW 114
// AddComAgressiveMove ( i , 257 , 105 ) ;
13786: LD_VAR 0 1
13790: PPUSH
13791: LD_INT 257
13793: PPUSH
13794: LD_INT 105
13796: PPUSH
13797: CALL_OW 174
// AddComAgressiveMove ( i , 227 , 97 ) ;
13801: LD_VAR 0 1
13805: PPUSH
13806: LD_INT 227
13808: PPUSH
13809: LD_INT 97
13811: PPUSH
13812: CALL_OW 174
// AddComAgressiveMove ( i , 206 , 73 ) ;
13816: LD_VAR 0 1
13820: PPUSH
13821: LD_INT 206
13823: PPUSH
13824: LD_INT 73
13826: PPUSH
13827: CALL_OW 174
// end ; end ;
13831: GO 13742
13833: POP
13834: POP
// repeat wait ( 0 0$1 ) ;
13835: LD_INT 35
13837: PPUSH
13838: CALL_OW 67
// for i in tmp do
13842: LD_ADDR_VAR 0 1
13846: PUSH
13847: LD_VAR 0 4
13851: PUSH
13852: FOR_IN
13853: IFFALSE 13932
// if IsDead ( i ) then
13855: LD_VAR 0 1
13859: PPUSH
13860: CALL_OW 301
13864: IFFALSE 13884
// tmp := tmp diff i else
13866: LD_ADDR_VAR 0 4
13870: PUSH
13871: LD_VAR 0 4
13875: PUSH
13876: LD_VAR 0 1
13880: DIFF
13881: ST_TO_ADDR
13882: GO 13930
// if not HasTask ( i ) then
13884: LD_VAR 0 1
13888: PPUSH
13889: CALL_OW 314
13893: NOT
13894: IFFALSE 13930
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
13896: LD_VAR 0 1
13900: PPUSH
13901: LD_INT 81
13903: PUSH
13904: LD_INT 3
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PPUSH
13911: CALL_OW 69
13915: PPUSH
13916: LD_VAR 0 1
13920: PPUSH
13921: CALL_OW 74
13925: PPUSH
13926: CALL_OW 115
13930: GO 13852
13932: POP
13933: POP
// until not tmp ;
13934: LD_VAR 0 4
13938: NOT
13939: IFFALSE 13835
// if firstAttack then
13941: LD_EXP 28
13945: IFFALSE 13955
// firstAttack := false ;
13947: LD_ADDR_EXP 28
13951: PUSH
13952: LD_INT 0
13954: ST_TO_ADDR
// end ;
13955: PPOPN 4
13957: END
// every 8 8$00 trigger not omarAttack and bergkampfArrived and not rolfHasVehicles do var i , un , veh , tmp ;
13958: LD_EXP 23
13962: NOT
13963: PUSH
13964: LD_EXP 3
13968: AND
13969: PUSH
13970: LD_EXP 16
13974: NOT
13975: AND
13976: IFFALSE 14808
13978: GO 13980
13980: DISABLE
13981: LD_INT 0
13983: PPUSH
13984: PPUSH
13985: PPUSH
13986: PPUSH
// begin enable ;
13987: ENABLE
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
13988: LD_ADDR_VAR 0 1
13992: PUSH
13993: DOUBLE
13994: LD_INT 1
13996: DEC
13997: ST_TO_ADDR
13998: LD_INT 1
14000: PUSH
14001: LD_INT 2
14003: PUSH
14004: LD_INT 2
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: LIST
14011: PUSH
14012: LD_OWVAR 67
14016: ARRAY
14017: PUSH
14018: FOR_TO
14019: IFFALSE 14320
// begin InitHc ;
14021: CALL_OW 19
// InitVc ;
14025: CALL_OW 20
// uc_side := 3 ;
14029: LD_ADDR_OWVAR 20
14033: PUSH
14034: LD_INT 3
14036: ST_TO_ADDR
// uc_nation := 3 ;
14037: LD_ADDR_OWVAR 21
14041: PUSH
14042: LD_INT 3
14044: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14045: LD_INT 22
14047: PUSH
14048: LD_INT 23
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PUSH
14055: LD_INT 1
14057: PPUSH
14058: LD_INT 2
14060: PPUSH
14061: CALL_OW 12
14065: ARRAY
14066: PPUSH
14067: LD_INT 1
14069: PPUSH
14070: LD_INT 1
14072: PPUSH
14073: LD_INT 44
14075: PUSH
14076: LD_INT 43
14078: PUSH
14079: LD_INT 42
14081: PUSH
14082: LD_INT 44
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: PUSH
14091: LD_INT 1
14093: PPUSH
14094: LD_INT 4
14096: PPUSH
14097: CALL_OW 12
14101: ARRAY
14102: PPUSH
14103: LD_INT 99
14105: PPUSH
14106: CALL 29338 0 5
// veh := CreateVehicle ;
14110: LD_ADDR_VAR 0 3
14114: PUSH
14115: CALL_OW 45
14119: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
14120: LD_VAR 0 3
14124: PPUSH
14125: LD_INT 5
14127: PPUSH
14128: LD_INT 3
14130: PPUSH
14131: LD_INT 2
14133: PPUSH
14134: LD_INT 0
14136: PPUSH
14137: CALL 63143 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14141: LD_ADDR_EXP 56
14145: PUSH
14146: LD_EXP 56
14150: PPUSH
14151: LD_EXP 56
14155: PUSH
14156: LD_INT 1
14158: PLUS
14159: PPUSH
14160: LD_VAR 0 3
14164: PPUSH
14165: CALL_OW 1
14169: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
14170: LD_INT 0
14172: PPUSH
14173: LD_INT 3
14175: PPUSH
14176: LD_OWVAR 67
14180: PPUSH
14181: CALL_OW 380
// un := CreateHuman ;
14185: LD_ADDR_VAR 0 2
14189: PUSH
14190: CALL_OW 44
14194: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14195: LD_VAR 0 2
14199: PPUSH
14200: LD_VAR 0 3
14204: PPUSH
14205: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14209: LD_ADDR_EXP 56
14213: PUSH
14214: LD_EXP 56
14218: PPUSH
14219: LD_EXP 56
14223: PUSH
14224: LD_INT 1
14226: PLUS
14227: PPUSH
14228: LD_VAR 0 2
14232: PPUSH
14233: CALL_OW 1
14237: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
14238: LD_VAR 0 2
14242: PPUSH
14243: LD_INT 23
14245: PPUSH
14246: LD_INT 7
14248: PPUSH
14249: CALL_OW 111
// wait ( 0 0$2 ) ;
14253: LD_INT 70
14255: PPUSH
14256: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14260: LD_ADDR_VAR 0 4
14264: PUSH
14265: LD_VAR 0 4
14269: PPUSH
14270: LD_VAR 0 4
14274: PUSH
14275: LD_INT 1
14277: PLUS
14278: PPUSH
14279: LD_VAR 0 3
14283: PPUSH
14284: CALL_OW 1
14288: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14289: LD_ADDR_VAR 0 4
14293: PUSH
14294: LD_VAR 0 4
14298: PPUSH
14299: LD_VAR 0 4
14303: PUSH
14304: LD_INT 1
14306: PLUS
14307: PPUSH
14308: LD_VAR 0 2
14312: PPUSH
14313: CALL_OW 1
14317: ST_TO_ADDR
// end ;
14318: GO 14018
14320: POP
14321: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + waveStrength do
14322: LD_ADDR_VAR 0 1
14326: PUSH
14327: DOUBLE
14328: LD_INT 1
14330: DEC
14331: ST_TO_ADDR
14332: LD_INT 2
14334: PUSH
14335: LD_INT 3
14337: PUSH
14338: LD_INT 3
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: LIST
14345: PUSH
14346: LD_OWVAR 67
14350: ARRAY
14351: PUSH
14352: LD_EXP 57
14356: PLUS
14357: PUSH
14358: FOR_TO
14359: IFFALSE 14668
// begin InitHc ;
14361: CALL_OW 19
// InitVc ;
14365: CALL_OW 20
// uc_side := 3 ;
14369: LD_ADDR_OWVAR 20
14373: PUSH
14374: LD_INT 3
14376: ST_TO_ADDR
// uc_nation := 3 ;
14377: LD_ADDR_OWVAR 21
14381: PUSH
14382: LD_INT 3
14384: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
14385: LD_INT 22
14387: PUSH
14388: LD_INT 23
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 1
14397: PPUSH
14398: LD_INT 2
14400: PPUSH
14401: CALL_OW 12
14405: ARRAY
14406: PPUSH
14407: LD_INT 1
14409: PPUSH
14410: LD_INT 1
14412: PPUSH
14413: LD_INT 44
14415: PUSH
14416: LD_INT 45
14418: PUSH
14419: LD_INT 43
14421: PUSH
14422: LD_INT 42
14424: PUSH
14425: LD_INT 44
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 1
14437: PPUSH
14438: LD_INT 5
14440: PPUSH
14441: CALL_OW 12
14445: ARRAY
14446: PPUSH
14447: LD_INT 99
14449: PPUSH
14450: CALL 29338 0 5
// veh := CreateVehicle ;
14454: LD_ADDR_VAR 0 3
14458: PUSH
14459: CALL_OW 45
14463: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
14464: LD_VAR 0 3
14468: PPUSH
14469: LD_INT 127
14471: PPUSH
14472: LD_INT 243
14474: PPUSH
14475: LD_INT 0
14477: PPUSH
14478: LD_INT 0
14480: PPUSH
14481: CALL 63143 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14485: LD_ADDR_EXP 56
14489: PUSH
14490: LD_EXP 56
14494: PPUSH
14495: LD_EXP 56
14499: PUSH
14500: LD_INT 1
14502: PLUS
14503: PPUSH
14504: LD_VAR 0 3
14508: PPUSH
14509: CALL_OW 1
14513: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14514: LD_INT 0
14516: PPUSH
14517: LD_INT 3
14519: PPUSH
14520: LD_OWVAR 67
14524: PUSH
14525: LD_INT 2
14527: PLUS
14528: PPUSH
14529: CALL_OW 380
// un := CreateHuman ;
14533: LD_ADDR_VAR 0 2
14537: PUSH
14538: CALL_OW 44
14542: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14543: LD_VAR 0 2
14547: PPUSH
14548: LD_VAR 0 3
14552: PPUSH
14553: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14557: LD_ADDR_EXP 56
14561: PUSH
14562: LD_EXP 56
14566: PPUSH
14567: LD_EXP 56
14571: PUSH
14572: LD_INT 1
14574: PLUS
14575: PPUSH
14576: LD_VAR 0 2
14580: PPUSH
14581: CALL_OW 1
14585: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
14586: LD_VAR 0 2
14590: PPUSH
14591: LD_INT 130
14593: PPUSH
14594: LD_INT 233
14596: PPUSH
14597: CALL_OW 111
// wait ( 0 0$2 ) ;
14601: LD_INT 70
14603: PPUSH
14604: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14608: LD_ADDR_VAR 0 4
14612: PUSH
14613: LD_VAR 0 4
14617: PPUSH
14618: LD_VAR 0 4
14622: PUSH
14623: LD_INT 1
14625: PLUS
14626: PPUSH
14627: LD_VAR 0 3
14631: PPUSH
14632: CALL_OW 1
14636: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14637: LD_ADDR_VAR 0 4
14641: PUSH
14642: LD_VAR 0 4
14646: PPUSH
14647: LD_VAR 0 4
14651: PUSH
14652: LD_INT 1
14654: PLUS
14655: PPUSH
14656: LD_VAR 0 2
14660: PPUSH
14661: CALL_OW 1
14665: ST_TO_ADDR
// end ;
14666: GO 14358
14668: POP
14669: POP
// for i in tmp do
14670: LD_ADDR_VAR 0 1
14674: PUSH
14675: LD_VAR 0 4
14679: PUSH
14680: FOR_IN
14681: IFFALSE 14700
// begin ComAgressiveMove ( i , 76 , 49 ) ;
14683: LD_VAR 0 1
14687: PPUSH
14688: LD_INT 76
14690: PPUSH
14691: LD_INT 49
14693: PPUSH
14694: CALL_OW 114
// end ;
14698: GO 14680
14700: POP
14701: POP
// repeat wait ( 0 0$1 ) ;
14702: LD_INT 35
14704: PPUSH
14705: CALL_OW 67
// for i in tmp do
14709: LD_ADDR_VAR 0 1
14713: PUSH
14714: LD_VAR 0 4
14718: PUSH
14719: FOR_IN
14720: IFFALSE 14799
// if IsDead ( i ) then
14722: LD_VAR 0 1
14726: PPUSH
14727: CALL_OW 301
14731: IFFALSE 14751
// tmp := tmp diff i else
14733: LD_ADDR_VAR 0 4
14737: PUSH
14738: LD_VAR 0 4
14742: PUSH
14743: LD_VAR 0 1
14747: DIFF
14748: ST_TO_ADDR
14749: GO 14797
// if not HasTask ( i ) then
14751: LD_VAR 0 1
14755: PPUSH
14756: CALL_OW 314
14760: NOT
14761: IFFALSE 14797
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
14763: LD_VAR 0 1
14767: PPUSH
14768: LD_INT 81
14770: PUSH
14771: LD_INT 3
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PPUSH
14778: CALL_OW 69
14782: PPUSH
14783: LD_VAR 0 1
14787: PPUSH
14788: CALL_OW 74
14792: PPUSH
14793: CALL_OW 115
14797: GO 14719
14799: POP
14800: POP
// until not tmp ;
14801: LD_VAR 0 4
14805: NOT
14806: IFFALSE 14702
// end ;
14808: PPOPN 4
14810: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
14811: LD_EXP 6
14815: IFFALSE 15286
14817: GO 14819
14819: DISABLE
14820: LD_INT 0
14822: PPUSH
14823: PPUSH
14824: PPUSH
14825: PPUSH
// begin wait ( 3 3$00 ) ;
14826: LD_INT 6300
14828: PPUSH
14829: CALL_OW 67
// for i := 1 to 3 do
14833: LD_ADDR_VAR 0 1
14837: PUSH
14838: DOUBLE
14839: LD_INT 1
14841: DEC
14842: ST_TO_ADDR
14843: LD_INT 3
14845: PUSH
14846: FOR_TO
14847: IFFALSE 15146
// begin InitHc ;
14849: CALL_OW 19
// InitVc ;
14853: CALL_OW 20
// uc_side := 3 ;
14857: LD_ADDR_OWVAR 20
14861: PUSH
14862: LD_INT 3
14864: ST_TO_ADDR
// uc_nation := 3 ;
14865: LD_ADDR_OWVAR 21
14869: PUSH
14870: LD_INT 3
14872: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14873: LD_INT 22
14875: PUSH
14876: LD_INT 23
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: LD_INT 1
14885: PPUSH
14886: LD_INT 2
14888: PPUSH
14889: CALL_OW 12
14893: ARRAY
14894: PPUSH
14895: LD_INT 1
14897: PPUSH
14898: LD_INT 1
14900: PPUSH
14901: LD_INT 44
14903: PUSH
14904: LD_INT 43
14906: PUSH
14907: LD_INT 42
14909: PUSH
14910: LD_INT 44
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 1
14921: PPUSH
14922: LD_INT 4
14924: PPUSH
14925: CALL_OW 12
14929: ARRAY
14930: PPUSH
14931: LD_INT 99
14933: PPUSH
14934: CALL 29338 0 5
// veh := CreateVehicle ;
14938: LD_ADDR_VAR 0 3
14942: PUSH
14943: CALL_OW 45
14947: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
14948: LD_VAR 0 3
14952: PPUSH
14953: LD_INT 293
14955: PPUSH
14956: LD_INT 246
14958: PPUSH
14959: LD_INT 5
14961: PPUSH
14962: LD_INT 0
14964: PPUSH
14965: CALL 63143 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14969: LD_ADDR_EXP 56
14973: PUSH
14974: LD_EXP 56
14978: PPUSH
14979: LD_EXP 56
14983: PUSH
14984: LD_INT 1
14986: PLUS
14987: PPUSH
14988: LD_VAR 0 3
14992: PPUSH
14993: CALL_OW 1
14997: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
14998: LD_INT 0
15000: PPUSH
15001: LD_INT 3
15003: PPUSH
15004: LD_INT 3
15006: PPUSH
15007: CALL_OW 380
// un := CreateHuman ;
15011: LD_ADDR_VAR 0 2
15015: PUSH
15016: CALL_OW 44
15020: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15021: LD_VAR 0 2
15025: PPUSH
15026: LD_VAR 0 3
15030: PPUSH
15031: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15035: LD_ADDR_EXP 56
15039: PUSH
15040: LD_EXP 56
15044: PPUSH
15045: LD_EXP 56
15049: PUSH
15050: LD_INT 1
15052: PLUS
15053: PPUSH
15054: LD_VAR 0 2
15058: PPUSH
15059: CALL_OW 1
15063: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
15064: LD_VAR 0 2
15068: PPUSH
15069: LD_INT 273
15071: PPUSH
15072: LD_INT 227
15074: PPUSH
15075: CALL_OW 111
// wait ( 0 0$2 ) ;
15079: LD_INT 70
15081: PPUSH
15082: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15086: LD_ADDR_VAR 0 4
15090: PUSH
15091: LD_VAR 0 4
15095: PPUSH
15096: LD_VAR 0 4
15100: PUSH
15101: LD_INT 1
15103: PLUS
15104: PPUSH
15105: LD_VAR 0 3
15109: PPUSH
15110: CALL_OW 1
15114: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15115: LD_ADDR_VAR 0 4
15119: PUSH
15120: LD_VAR 0 4
15124: PPUSH
15125: LD_VAR 0 4
15129: PUSH
15130: LD_INT 1
15132: PLUS
15133: PPUSH
15134: LD_VAR 0 2
15138: PPUSH
15139: CALL_OW 1
15143: ST_TO_ADDR
// end ;
15144: GO 14846
15146: POP
15147: POP
// for i in tmp do
15148: LD_ADDR_VAR 0 1
15152: PUSH
15153: LD_VAR 0 4
15157: PUSH
15158: FOR_IN
15159: IFFALSE 15178
// begin ComAgressiveMove ( i , 330 , 231 ) ;
15161: LD_VAR 0 1
15165: PPUSH
15166: LD_INT 330
15168: PPUSH
15169: LD_INT 231
15171: PPUSH
15172: CALL_OW 114
// end ;
15176: GO 15158
15178: POP
15179: POP
// repeat wait ( 0 0$1 ) ;
15180: LD_INT 35
15182: PPUSH
15183: CALL_OW 67
// for i in tmp do
15187: LD_ADDR_VAR 0 1
15191: PUSH
15192: LD_VAR 0 4
15196: PUSH
15197: FOR_IN
15198: IFFALSE 15277
// if IsDead ( i ) then
15200: LD_VAR 0 1
15204: PPUSH
15205: CALL_OW 301
15209: IFFALSE 15229
// tmp := tmp diff i else
15211: LD_ADDR_VAR 0 4
15215: PUSH
15216: LD_VAR 0 4
15220: PUSH
15221: LD_VAR 0 1
15225: DIFF
15226: ST_TO_ADDR
15227: GO 15275
// if not HasTask ( i ) then
15229: LD_VAR 0 1
15233: PPUSH
15234: CALL_OW 314
15238: NOT
15239: IFFALSE 15275
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15241: LD_VAR 0 1
15245: PPUSH
15246: LD_INT 81
15248: PUSH
15249: LD_INT 3
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PPUSH
15256: CALL_OW 69
15260: PPUSH
15261: LD_VAR 0 1
15265: PPUSH
15266: CALL_OW 74
15270: PPUSH
15271: CALL_OW 115
15275: GO 15197
15277: POP
15278: POP
// until not tmp ;
15279: LD_VAR 0 4
15283: NOT
15284: IFFALSE 15180
// end ;
15286: PPOPN 4
15288: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
15289: LD_INT 3
15291: PUSH
15292: LD_INT 22
15294: PUSH
15295: LD_INT 2
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 32
15308: PUSH
15309: LD_INT 1
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: PPUSH
15320: CALL_OW 69
15324: IFFALSE 15408
15326: GO 15328
15328: DISABLE
15329: LD_INT 0
15331: PPUSH
// begin enable ;
15332: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
15333: LD_ADDR_VAR 0 1
15337: PUSH
15338: LD_INT 3
15340: PUSH
15341: LD_INT 22
15343: PUSH
15344: LD_INT 2
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: LD_INT 32
15357: PUSH
15358: LD_INT 1
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PPUSH
15369: CALL_OW 69
15373: PUSH
15374: FOR_IN
15375: IFFALSE 15406
// if GetFuel ( i ) < 3 then
15377: LD_VAR 0 1
15381: PPUSH
15382: CALL_OW 261
15386: PUSH
15387: LD_INT 3
15389: LESS
15390: IFFALSE 15404
// SetFuel ( i , 3 ) ;
15392: LD_VAR 0 1
15396: PPUSH
15397: LD_INT 3
15399: PPUSH
15400: CALL_OW 240
15404: GO 15374
15406: POP
15407: POP
// end ; end_of_file
15408: PPOPN 1
15410: END
// export function Action ; begin
15411: LD_INT 0
15413: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
15414: LD_INT 2
15416: PPUSH
15417: LD_INT 4
15419: PPUSH
15420: CALL_OW 332
// Video ( true ) ;
15424: LD_INT 1
15426: PPUSH
15427: CALL 61184 0 1
// CenterNowOnXY ( 213 , 89 ) ;
15431: LD_INT 213
15433: PPUSH
15434: LD_INT 89
15436: PPUSH
15437: CALL_OW 86
// if not debug then
15441: LD_EXP 1
15445: NOT
15446: IFFALSE 15480
// begin if Kaia and Olaf then
15448: LD_EXP 34
15452: PUSH
15453: LD_EXP 38
15457: AND
15458: IFFALSE 15464
// SceneKaiaWithOlaf ;
15460: CALL 15503 0 0
// if Givi and Kamil then
15464: LD_EXP 30
15468: PUSH
15469: LD_EXP 33
15473: AND
15474: IFFALSE 15480
// SceneWithGiviAndKamil ;
15476: CALL 16074 0 0
// end ; Video ( false ) ;
15480: LD_INT 0
15482: PPUSH
15483: CALL 61184 0 1
// ChangeMissionObjectives ( M1 ) ;
15487: LD_STRING M1
15489: PPUSH
15490: CALL_OW 337
// SaveForQuickRestart ;
15494: CALL_OW 22
// end ;
15498: LD_VAR 0 1
15502: RET
// export function SceneKaiaWithOlaf ; begin
15503: LD_INT 0
15505: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
15506: LD_INT 22
15508: PUSH
15509: LD_INT 2
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 30
15518: PUSH
15519: LD_INT 3
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PPUSH
15530: CALL_OW 69
15534: PPUSH
15535: LD_INT 14
15537: PPUSH
15538: LD_INT 1
15540: PPUSH
15541: LD_INT 1
15543: PPUSH
15544: LD_INT 26
15546: PPUSH
15547: CALL_OW 125
// wait ( 0 0$1 ) ;
15551: LD_INT 35
15553: PPUSH
15554: CALL_OW 67
// Say ( Kaia , DK-06-Mem-1 ) ;
15558: LD_EXP 34
15562: PPUSH
15563: LD_STRING DK-06-Mem-1
15565: PPUSH
15566: CALL_OW 88
// Say ( Kaia , DK-06-Mem-2 ) ;
15570: LD_EXP 34
15574: PPUSH
15575: LD_STRING DK-06-Mem-2
15577: PPUSH
15578: CALL_OW 88
// Say ( Olaf , DO-06-Mem-3 ) ;
15582: LD_EXP 38
15586: PPUSH
15587: LD_STRING DO-06-Mem-3
15589: PPUSH
15590: CALL_OW 88
// Say ( Kaia , DK-06-Mem-4 ) ;
15594: LD_EXP 34
15598: PPUSH
15599: LD_STRING DK-06-Mem-4
15601: PPUSH
15602: CALL_OW 88
// Say ( Olaf , DO-06-Mem-5 ) ;
15606: LD_EXP 38
15610: PPUSH
15611: LD_STRING DO-06-Mem-5
15613: PPUSH
15614: CALL_OW 88
// wait ( 0 0$2 ) ;
15618: LD_INT 70
15620: PPUSH
15621: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
15625: LD_INT 22
15627: PUSH
15628: LD_INT 2
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: LD_INT 30
15637: PUSH
15638: LD_INT 3
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PPUSH
15649: CALL_OW 69
15653: PPUSH
15654: LD_INT 90
15656: PPUSH
15657: CALL_OW 329
// Say ( Olaf , DO-06-Mem-6 ) ;
15661: LD_EXP 38
15665: PPUSH
15666: LD_STRING DO-06-Mem-6
15668: PPUSH
15669: CALL_OW 88
// Say ( Kaia , DK-06-Mem-7 ) ;
15673: LD_EXP 34
15677: PPUSH
15678: LD_STRING DK-06-Mem-7
15680: PPUSH
15681: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
15685: LD_EXP 29
15689: PPUSH
15690: LD_EXP 34
15694: PPUSH
15695: CALL_OW 119
// Say ( Heike , DH-06-Mem-8 ) ;
15699: LD_EXP 29
15703: PPUSH
15704: LD_STRING DH-06-Mem-8
15706: PPUSH
15707: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
15711: LD_EXP 34
15715: PUSH
15716: LD_EXP 38
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PPUSH
15725: LD_EXP 29
15729: PPUSH
15730: CALL_OW 119
// Say ( Olaf , DO-06-Mem-9 ) ;
15734: LD_EXP 38
15738: PPUSH
15739: LD_STRING DO-06-Mem-9
15741: PPUSH
15742: CALL_OW 88
// Say ( Olaf , DO-06-Mem-10 ) ;
15746: LD_EXP 38
15750: PPUSH
15751: LD_STRING DO-06-Mem-10
15753: PPUSH
15754: CALL_OW 88
// Say ( Olaf , DO-06-Mem-11 ) ;
15758: LD_EXP 38
15762: PPUSH
15763: LD_STRING DO-06-Mem-11
15765: PPUSH
15766: CALL_OW 88
// Say ( Olaf , DO-06-Mem-12 ) ;
15770: LD_EXP 38
15774: PPUSH
15775: LD_STRING DO-06-Mem-12
15777: PPUSH
15778: CALL_OW 88
// Say ( Kaia , DK-06-Mem-13 ) ;
15782: LD_EXP 34
15786: PPUSH
15787: LD_STRING DK-06-Mem-13
15789: PPUSH
15790: CALL_OW 88
// Say ( Kaia , DK-06-Mem-14 ) ;
15794: LD_EXP 34
15798: PPUSH
15799: LD_STRING DK-06-Mem-14
15801: PPUSH
15802: CALL_OW 88
// Say ( Kaia , DK-06-Mem-15 ) ;
15806: LD_EXP 34
15810: PPUSH
15811: LD_STRING DK-06-Mem-15
15813: PPUSH
15814: CALL_OW 88
// Say ( Kaia , DK-06-Mem-16 ) ;
15818: LD_EXP 34
15822: PPUSH
15823: LD_STRING DK-06-Mem-16
15825: PPUSH
15826: CALL_OW 88
// Say ( Kaia , DK-06-Mem-17 ) ;
15830: LD_EXP 34
15834: PPUSH
15835: LD_STRING DK-06-Mem-17
15837: PPUSH
15838: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
15842: LD_EXP 38
15846: PPUSH
15847: LD_EXP 34
15851: PPUSH
15852: CALL_OW 119
// Say ( Olaf , DO-06-Mem-18 ) ;
15856: LD_EXP 38
15860: PPUSH
15861: LD_STRING DO-06-Mem-18
15863: PPUSH
15864: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
15868: LD_EXP 34
15872: PPUSH
15873: LD_EXP 38
15877: PPUSH
15878: CALL_OW 119
// Say ( Kaia , DK-06-Mem-19 ) ;
15882: LD_EXP 34
15886: PPUSH
15887: LD_STRING DK-06-Mem-19
15889: PPUSH
15890: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
15894: LD_EXP 38
15898: PPUSH
15899: LD_INT 214
15901: PPUSH
15902: LD_INT 86
15904: PPUSH
15905: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
15909: LD_EXP 38
15913: PPUSH
15914: LD_EXP 34
15918: PPUSH
15919: CALL_OW 179
// if Givi then
15923: LD_EXP 30
15927: IFFALSE 15958
// begin ComMoveXY ( Givi , 217 , 86 ) ;
15929: LD_EXP 30
15933: PPUSH
15934: LD_INT 217
15936: PPUSH
15937: LD_INT 86
15939: PPUSH
15940: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
15944: LD_EXP 30
15948: PPUSH
15949: LD_EXP 29
15953: PPUSH
15954: CALL_OW 179
// end ; if Kamil then
15958: LD_EXP 33
15962: IFFALSE 16002
// begin ComExit ( Kamil ) ;
15964: LD_EXP 33
15968: PPUSH
15969: CALL 61600 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
15973: LD_EXP 33
15977: PPUSH
15978: LD_INT 212
15980: PPUSH
15981: LD_INT 86
15983: PPUSH
15984: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
15988: LD_EXP 33
15992: PPUSH
15993: LD_EXP 29
15997: PPUSH
15998: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
16002: LD_INT 70
16004: PPUSH
16005: CALL_OW 67
// Say ( Heike , DH-06-Mem-20 ) ;
16009: LD_EXP 29
16013: PPUSH
16014: LD_STRING DH-06-Mem-20
16016: PPUSH
16017: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
16021: LD_EXP 38
16025: PPUSH
16026: LD_INT 215
16028: PPUSH
16029: LD_INT 87
16031: PPUSH
16032: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16036: LD_EXP 38
16040: PPUSH
16041: LD_EXP 34
16045: PPUSH
16046: CALL_OW 179
// Say ( Kaia , DK-06-Mem-21 ) ;
16050: LD_EXP 34
16054: PPUSH
16055: LD_STRING DK-06-Mem-21
16057: PPUSH
16058: CALL_OW 88
// wait ( 0 0$2 ) ;
16062: LD_INT 70
16064: PPUSH
16065: CALL_OW 67
// end ;
16069: LD_VAR 0 1
16073: RET
// export function SceneWithGiviAndKamil ; begin
16074: LD_INT 0
16076: PPUSH
// if Markov then
16077: LD_EXP 36
16081: IFFALSE 16132
// begin if IsInUnit ( Markov ) then
16083: LD_EXP 36
16087: PPUSH
16088: CALL_OW 310
16092: IFFALSE 16103
// ComExit ( Markov ) ;
16094: LD_EXP 36
16098: PPUSH
16099: CALL 61600 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
16103: LD_EXP 36
16107: PPUSH
16108: LD_INT 212
16110: PPUSH
16111: LD_INT 88
16113: PPUSH
16114: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
16118: LD_EXP 36
16122: PPUSH
16123: LD_EXP 29
16127: PPUSH
16128: CALL_OW 179
// end ; Say ( Givi , DG-06-Obj-1 ) ;
16132: LD_EXP 30
16136: PPUSH
16137: LD_STRING DG-06-Obj-1
16139: PPUSH
16140: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-2 ) ;
16144: LD_EXP 33
16148: PPUSH
16149: LD_STRING DKam-06-Obj-2
16151: PPUSH
16152: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
16156: LD_EXP 29
16160: PPUSH
16161: LD_EXP 33
16165: PPUSH
16166: CALL_OW 119
// Say ( Kamil , DKam-06-Obj-3 ) ;
16170: LD_EXP 33
16174: PPUSH
16175: LD_STRING DKam-06-Obj-3
16177: PPUSH
16178: CALL_OW 88
// Say ( Markov , DMar-06-Obj-4 ) ;
16182: LD_EXP 36
16186: PPUSH
16187: LD_STRING DMar-06-Obj-4
16189: PPUSH
16190: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-6 ) ;
16194: LD_EXP 33
16198: PPUSH
16199: LD_STRING DKam-06-Obj-6
16201: PPUSH
16202: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-7 ) ;
16206: LD_EXP 33
16210: PPUSH
16211: LD_STRING DKam-06-Obj-7
16213: PPUSH
16214: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-8 ) ;
16218: LD_EXP 33
16222: PPUSH
16223: LD_STRING DKam-06-Obj-8
16225: PPUSH
16226: CALL_OW 88
// Say ( Heike , DH-06-Obj-9 ) ;
16230: LD_EXP 29
16234: PPUSH
16235: LD_STRING DH-06-Obj-9
16237: PPUSH
16238: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-10 ) ;
16242: LD_EXP 33
16246: PPUSH
16247: LD_STRING DKam-06-Obj-10
16249: PPUSH
16250: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-11 ) ;
16254: LD_EXP 33
16258: PPUSH
16259: LD_STRING DKam-06-Obj-11
16261: PPUSH
16262: CALL_OW 88
// Say ( Markov , DMar-06-Obj-12 ) ;
16266: LD_EXP 36
16270: PPUSH
16271: LD_STRING DMar-06-Obj-12
16273: PPUSH
16274: CALL_OW 88
// Say ( Markov , DMar-06-Obj-13 ) ;
16278: LD_EXP 36
16282: PPUSH
16283: LD_STRING DMar-06-Obj-13
16285: PPUSH
16286: CALL_OW 88
// Say ( Markov , DMar-06-Obj-14 ) ;
16290: LD_EXP 36
16294: PPUSH
16295: LD_STRING DMar-06-Obj-14
16297: PPUSH
16298: CALL_OW 88
// Say ( Olaf , DO-06-Obj-15 ) ;
16302: LD_EXP 38
16306: PPUSH
16307: LD_STRING DO-06-Obj-15
16309: PPUSH
16310: CALL_OW 88
// Say ( Olaf , DO-06-Obj-16 ) ;
16314: LD_EXP 38
16318: PPUSH
16319: LD_STRING DO-06-Obj-16
16321: PPUSH
16322: CALL_OW 88
// Say ( Heike , DH-06-Obj-17 ) ;
16326: LD_EXP 29
16330: PPUSH
16331: LD_STRING DH-06-Obj-17
16333: PPUSH
16334: CALL_OW 88
// Say ( Olaf , DO-06-Obj-18 ) ;
16338: LD_EXP 38
16342: PPUSH
16343: LD_STRING DO-06-Obj-18
16345: PPUSH
16346: CALL_OW 88
// end ;
16350: LD_VAR 0 1
16354: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
16355: LD_INT 34
16357: PUSH
16358: LD_EXP 63
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PPUSH
16367: CALL_OW 69
16371: IFFALSE 16568
16373: GO 16375
16375: DISABLE
16376: LD_INT 0
16378: PPUSH
// begin wait ( 0 0$2 ) ;
16379: LD_INT 70
16381: PPUSH
16382: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
16386: LD_INT 34
16388: PUSH
16389: LD_EXP 63
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PPUSH
16398: CALL_OW 69
16402: PPUSH
16403: CALL_OW 87
// DialogueOn ;
16407: CALL_OW 6
// if Markov then
16411: LD_EXP 36
16415: IFFALSE 16443
// begin Say ( Markov , DMar-06-Grn-1 ) ;
16417: LD_EXP 36
16421: PPUSH
16422: LD_STRING DMar-06-Grn-1
16424: PPUSH
16425: CALL_OW 88
// Say ( Heike , DH-06-Grn-2 ) ;
16429: LD_EXP 29
16433: PPUSH
16434: LD_STRING DH-06-Grn-2
16436: PPUSH
16437: CALL_OW 88
// end else
16441: GO 16542
// if heikeSecondSquad then
16443: LD_EXP 44
16447: IFFALSE 16542
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16449: LD_ADDR_VAR 0 1
16453: PUSH
16454: LD_EXP 44
16458: PUSH
16459: LD_INT 1
16461: PPUSH
16462: LD_EXP 44
16466: PPUSH
16467: CALL_OW 12
16471: ARRAY
16472: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16473: LD_VAR 0 1
16477: PPUSH
16478: CALL_OW 258
16482: PUSH
16483: LD_INT 1
16485: DOUBLE
16486: EQUAL
16487: IFTRUE 16491
16489: GO 16506
16491: POP
// Say ( random , DArm-06-Grn-1 ) ; 2 :
16492: LD_VAR 0 1
16496: PPUSH
16497: LD_STRING DArm-06-Grn-1
16499: PPUSH
16500: CALL_OW 88
16504: GO 16530
16506: LD_INT 2
16508: DOUBLE
16509: EQUAL
16510: IFTRUE 16514
16512: GO 16529
16514: POP
// Say ( random , DArf-06-Grn-1 ) ; end ;
16515: LD_VAR 0 1
16519: PPUSH
16520: LD_STRING DArf-06-Grn-1
16522: PPUSH
16523: CALL_OW 88
16527: GO 16530
16529: POP
// Say ( Heike , DH-06-Grn-2 ) ;
16530: LD_EXP 29
16534: PPUSH
16535: LD_STRING DH-06-Grn-2
16537: PPUSH
16538: CALL_OW 88
// end ; DialogueOff ;
16542: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
16546: LD_STRING MortarConstructed
16548: PPUSH
16549: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
16553: LD_STRING SelfPropelledMortar
16555: PPUSH
16556: CALL_OW 339
// mortarConstructed := true ;
16560: LD_ADDR_EXP 15
16564: PUSH
16565: LD_INT 1
16567: ST_TO_ADDR
// end ;
16568: PPOPN 1
16570: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
16571: LD_INT 2
16573: PPUSH
16574: LD_INT 8
16576: PPUSH
16577: CALL_OW 294
16581: IFFALSE 16724
16583: GO 16585
16585: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
16586: LD_INT 200
16588: PPUSH
16589: LD_INT 162
16591: PPUSH
16592: LD_INT 2
16594: PPUSH
16595: LD_INT 6
16597: NEG
16598: PPUSH
16599: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
16603: LD_INT 200
16605: PPUSH
16606: LD_INT 162
16608: PPUSH
16609: LD_INT 2
16611: PPUSH
16612: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
16616: LD_INT 200
16618: PPUSH
16619: LD_INT 162
16621: PPUSH
16622: CALL_OW 84
// if not IsOk ( Kurt ) then
16626: LD_EXP 40
16630: PPUSH
16631: CALL_OW 302
16635: NOT
16636: IFFALSE 16640
// exit ;
16638: GO 16724
// Say ( Kurt , DKs-06-Otpst-2-1 ) ;
16640: LD_EXP 40
16644: PPUSH
16645: LD_STRING DKs-06-Otpst-2-1
16647: PPUSH
16648: CALL_OW 88
// Say ( Kaia , DK-06-Otpst-2-2 ) ;
16652: LD_EXP 34
16656: PPUSH
16657: LD_STRING DK-06-Otpst-2-2
16659: PPUSH
16660: CALL_OW 88
// Say ( Kurt , DKs-06-Otpst-2-3 ) ;
16664: LD_EXP 40
16668: PPUSH
16669: LD_STRING DKs-06-Otpst-2-3
16671: PPUSH
16672: CALL_OW 88
// Say ( Kurt , DKs-06-Otpst-2-4 ) ;
16676: LD_EXP 40
16680: PPUSH
16681: LD_STRING DKs-06-Otpst-2-4
16683: PPUSH
16684: CALL_OW 88
// Say ( Kurt , DKs-06-Otpst-2-5 ) ;
16688: LD_EXP 40
16692: PPUSH
16693: LD_STRING DKs-06-Otpst-2-5
16695: PPUSH
16696: CALL_OW 88
// Say ( Kamil , DKam-06-Otpst-2-6 ) ;
16700: LD_EXP 33
16704: PPUSH
16705: LD_STRING DKam-06-Otpst-2-6
16707: PPUSH
16708: CALL_OW 88
// Say ( Kurt , DKs-06-Otpst-2-7 ) ;
16712: LD_EXP 40
16716: PPUSH
16717: LD_STRING DKs-06-Otpst-2-7
16719: PPUSH
16720: CALL_OW 88
// end ;
16724: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
16725: LD_INT 8
16727: PPUSH
16728: LD_INT 22
16730: PUSH
16731: LD_INT 3
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 21
16740: PUSH
16741: LD_INT 3
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PPUSH
16752: CALL_OW 70
16756: NOT
16757: PUSH
16758: LD_EXP 3
16762: NOT
16763: AND
16764: IFFALSE 17014
16766: GO 16768
16768: DISABLE
16769: LD_INT 0
16771: PPUSH
// begin outpostDestroyed := true ;
16772: LD_ADDR_EXP 4
16776: PUSH
16777: LD_INT 1
16779: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
16780: LD_INT 22
16782: PUSH
16783: LD_INT 2
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 34
16792: PUSH
16793: LD_EXP 63
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 92
16804: PUSH
16805: LD_INT 195
16807: PUSH
16808: LD_INT 164
16810: PUSH
16811: LD_INT 12
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: LIST
16824: PPUSH
16825: CALL_OW 69
16829: NOT
16830: IFFALSE 16834
// exit ;
16832: GO 17014
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
16834: LD_EXP 30
16838: PPUSH
16839: CALL_OW 302
16843: NOT
16844: PUSH
16845: LD_EXP 34
16849: PPUSH
16850: CALL_OW 302
16854: NOT
16855: OR
16856: IFFALSE 16860
// exit ;
16858: GO 17014
// Say ( Givi , DG-06-Otpst-1-1 ) ;
16860: LD_EXP 30
16864: PPUSH
16865: LD_STRING DG-06-Otpst-1-1
16867: PPUSH
16868: CALL_OW 88
// Say ( Kaia , DK-06-Otpst-1-2 ) ;
16872: LD_EXP 34
16876: PPUSH
16877: LD_STRING DK-06-Otpst-1-2
16879: PPUSH
16880: CALL_OW 88
// if IsOk ( Markov ) then
16884: LD_EXP 36
16888: PPUSH
16889: CALL_OW 302
16893: IFFALSE 16921
// begin Say ( Markov , DMar-06-Otpst-1-3 ) ;
16895: LD_EXP 36
16899: PPUSH
16900: LD_STRING DMar-06-Otpst-1-3
16902: PPUSH
16903: CALL_OW 88
// Say ( Markov , DMar-06-Otpst-1-4 ) ;
16907: LD_EXP 36
16911: PPUSH
16912: LD_STRING DMar-06-Otpst-1-4
16914: PPUSH
16915: CALL_OW 88
// end else
16919: GO 17002
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16921: LD_ADDR_VAR 0 1
16925: PUSH
16926: LD_EXP 44
16930: PUSH
16931: LD_INT 1
16933: PPUSH
16934: LD_EXP 44
16938: PPUSH
16939: CALL_OW 12
16943: ARRAY
16944: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16945: LD_VAR 0 1
16949: PPUSH
16950: CALL_OW 258
16954: PUSH
16955: LD_INT 1
16957: DOUBLE
16958: EQUAL
16959: IFTRUE 16963
16961: GO 16978
16963: POP
// Say ( random , DArm-06-Otpst-1-a-3 ) ; 2 :
16964: LD_VAR 0 1
16968: PPUSH
16969: LD_STRING DArm-06-Otpst-1-a-3
16971: PPUSH
16972: CALL_OW 88
16976: GO 17002
16978: LD_INT 2
16980: DOUBLE
16981: EQUAL
16982: IFTRUE 16986
16984: GO 17001
16986: POP
// Say ( random , DArf-06-Otpst-1-a-3 ) ; end ;
16987: LD_VAR 0 1
16991: PPUSH
16992: LD_STRING DArf-06-Otpst-1-a-3
16994: PPUSH
16995: CALL_OW 88
16999: GO 17002
17001: POP
// end ; Say ( Givi , DG-06-Otpst-1-5 ) ;
17002: LD_EXP 30
17006: PPUSH
17007: LD_STRING DG-06-Otpst-1-5
17009: PPUSH
17010: CALL_OW 88
// end ;
17014: PPOPN 1
17016: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
17017: LD_EXP 34
17021: PPUSH
17022: CALL_OW 256
17026: PUSH
17027: LD_INT 10
17029: LESS
17030: IFFALSE 17144
17032: GO 17034
17034: DISABLE
// begin DialogueOn ;
17035: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17039: LD_EXP 34
17043: PPUSH
17044: CALL_OW 87
// ForceSay ( Kaia , DK-06-Dead-1 ) ;
17048: LD_EXP 34
17052: PPUSH
17053: LD_STRING DK-06-Dead-1
17055: PPUSH
17056: CALL_OW 91
// Say ( Heike , DH-06-Dead-2 ) ;
17060: LD_EXP 29
17064: PPUSH
17065: LD_STRING DH-06-Dead-2
17067: PPUSH
17068: CALL_OW 88
// ForceSay ( Kaia , DK-06-Dead-3 ) ;
17072: LD_EXP 34
17076: PPUSH
17077: LD_STRING DK-06-Dead-3
17079: PPUSH
17080: CALL_OW 91
// Say ( Heike , DH-06-Dead-4 ) ;
17084: LD_EXP 29
17088: PPUSH
17089: LD_STRING DH-06-Dead-4
17091: PPUSH
17092: CALL_OW 88
// if IsOk ( Mike ) then
17096: LD_EXP 31
17100: PPUSH
17101: CALL_OW 302
17105: IFFALSE 17131
// begin Say ( Mike , DM-06-Dead-5 ) ;
17107: LD_EXP 31
17111: PPUSH
17112: LD_STRING DM-06-Dead-5
17114: PPUSH
17115: CALL_OW 88
// Say ( Heike , DH-06-Dead-6 ) ;
17119: LD_EXP 29
17123: PPUSH
17124: LD_STRING DH-06-Dead-6
17126: PPUSH
17127: CALL_OW 88
// end ; DialogueOff ;
17131: CALL_OW 7
// KillUnit ( Kaia ) ;
17135: LD_EXP 34
17139: PPUSH
17140: CALL_OW 66
// end ;
17144: END
// every 0 0$1 trigger tick >= 10 10$20 or ruLoseCounter > 8 do var i , tmp , dep ;
17145: LD_OWVAR 1
17149: PUSH
17150: LD_INT 21700
17152: GREATEREQUAL
17153: PUSH
17154: LD_EXP 5
17158: PUSH
17159: LD_INT 8
17161: GREATER
17162: OR
17163: IFFALSE 17570
17165: GO 17167
17167: DISABLE
17168: LD_INT 0
17170: PPUSH
17171: PPUSH
17172: PPUSH
// begin PrepareRolfSquad ;
17173: CALL 2348 0 0
// dep := HexInfo ( 86 , 54 ) ;
17177: LD_ADDR_VAR 0 3
17181: PUSH
17182: LD_INT 86
17184: PPUSH
17185: LD_INT 54
17187: PPUSH
17188: CALL_OW 428
17192: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
17193: LD_VAR 0 3
17197: PPUSH
17198: CALL_OW 274
17202: PPUSH
17203: LD_INT 1
17205: PPUSH
17206: LD_INT 300
17208: PPUSH
17209: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
17213: LD_VAR 0 3
17217: PPUSH
17218: CALL_OW 274
17222: PPUSH
17223: LD_INT 2
17225: PPUSH
17226: LD_INT 300
17228: PPUSH
17229: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
17233: LD_EXP 46
17237: PPUSH
17238: LD_INT 79
17240: PPUSH
17241: LD_INT 52
17243: PPUSH
17244: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
17248: LD_INT 35
17250: PPUSH
17251: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
17255: LD_INT 12
17257: PPUSH
17258: LD_INT 22
17260: PUSH
17261: LD_INT 3
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 21
17270: PUSH
17271: LD_INT 1
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PPUSH
17282: CALL_OW 70
17286: NOT
17287: IFFALSE 17248
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
17289: LD_ADDR_VAR 0 2
17293: PUSH
17294: LD_INT 12
17296: PPUSH
17297: LD_INT 21
17299: PUSH
17300: LD_INT 3
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PPUSH
17307: CALL_OW 70
17311: ST_TO_ADDR
// for i in tmp do
17312: LD_ADDR_VAR 0 1
17316: PUSH
17317: LD_VAR 0 2
17321: PUSH
17322: FOR_IN
17323: IFFALSE 17339
// SetSide ( i , 8 ) ;
17325: LD_VAR 0 1
17329: PPUSH
17330: LD_INT 8
17332: PPUSH
17333: CALL_OW 235
17337: GO 17322
17339: POP
17340: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
17341: LD_INT 63
17343: PPUSH
17344: LD_INT 42
17346: PPUSH
17347: CALL_OW 428
17351: PPUSH
17352: LD_INT 320
17354: PPUSH
17355: CALL_OW 234
// wait ( 0 0$10 ) ;
17359: LD_INT 350
17361: PPUSH
17362: CALL_OW 67
// DialogueOn ;
17366: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
17370: LD_INT 8
17372: PPUSH
17373: LD_INT 2
17375: PPUSH
17376: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
17380: LD_INT 86
17382: PPUSH
17383: LD_INT 54
17385: PPUSH
17386: CALL_OW 428
17390: PPUSH
17391: LD_STRING antwerp
17393: PPUSH
17394: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
17398: LD_EXP 42
17402: PPUSH
17403: CALL_OW 87
// SayRadio ( Rolf , DRf-06-rast-1 ) ;
17407: LD_EXP 42
17411: PPUSH
17412: LD_STRING DRf-06-rast-1
17414: PPUSH
17415: CALL_OW 94
// Say ( Heike , DH-06-rast-2 ) ;
17419: LD_EXP 29
17423: PPUSH
17424: LD_STRING DH-06-rast-2
17426: PPUSH
17427: CALL_OW 88
// SayRadio ( Rolf , DRf-06-rast-3 ) ;
17431: LD_EXP 42
17435: PPUSH
17436: LD_STRING DRf-06-rast-3
17438: PPUSH
17439: CALL_OW 94
// SayRadio ( Rolf , DRf-06-rast-4 ) ;
17443: LD_EXP 42
17447: PPUSH
17448: LD_STRING DRf-06-rast-4
17450: PPUSH
17451: CALL_OW 94
// SayRadio ( Rolf , DRf-06-rast-5 ) ;
17455: LD_EXP 42
17459: PPUSH
17460: LD_STRING DRf-06-rast-5
17462: PPUSH
17463: CALL_OW 94
// if IsOk ( Aviradze ) then
17467: LD_EXP 41
17471: PPUSH
17472: CALL_OW 302
17476: IFFALSE 17535
// begin CenterNowOnUnits ( Aviradze ) ;
17478: LD_EXP 41
17482: PPUSH
17483: CALL_OW 87
// Say ( Aviradze , DA-06-rast-6 ) ;
17487: LD_EXP 41
17491: PPUSH
17492: LD_STRING DA-06-rast-6
17494: PPUSH
17495: CALL_OW 88
// Say ( Heike , DH-06-rast-7 ) ;
17499: LD_EXP 29
17503: PPUSH
17504: LD_STRING DH-06-rast-7
17506: PPUSH
17507: CALL_OW 88
// Say ( Givi , DG-06-rast-8 ) ;
17511: LD_EXP 30
17515: PPUSH
17516: LD_STRING DG-06-rast-8
17518: PPUSH
17519: CALL_OW 88
// Say ( Givi , DG-06-rast-9 ) ;
17523: LD_EXP 30
17527: PPUSH
17528: LD_STRING DG-06-rast-9
17530: PPUSH
17531: CALL_OW 88
// end ; Say ( Heike , DH-06-rast-10 ) ;
17535: LD_EXP 29
17539: PPUSH
17540: LD_STRING DH-06-rast-10
17542: PPUSH
17543: CALL_OW 88
// DialogueOff ;
17547: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
17551: LD_STRING M2
17553: PPUSH
17554: CALL_OW 337
// bergkampfArrived := true ;
17558: LD_ADDR_EXP 3
17562: PUSH
17563: LD_INT 1
17565: ST_TO_ADDR
// PrepareRolfBase ;
17566: CALL 2679 0 0
// end ;
17570: PPOPN 3
17572: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) do var i ;
17573: LD_INT 12
17575: PPUSH
17576: LD_INT 22
17578: PUSH
17579: LD_INT 2
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PPUSH
17586: CALL_OW 70
17590: PUSH
17591: LD_EXP 42
17595: PPUSH
17596: CALL_OW 302
17600: AND
17601: IFFALSE 18161
17603: GO 17605
17605: DISABLE
17606: LD_INT 0
17608: PPUSH
// begin DialogueOn ;
17609: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
17613: LD_EXP 42
17617: PPUSH
17618: CALL_OW 87
// if rolfSquad >= 10 then
17622: LD_EXP 46
17626: PUSH
17627: LD_INT 10
17629: GREATEREQUAL
17630: IFFALSE 17809
// begin linkedWithRolf := 2 ;
17632: LD_ADDR_EXP 12
17636: PUSH
17637: LD_INT 2
17639: ST_TO_ADDR
// Say ( Rolf , DRf-06-rast-11 ) ;
17640: LD_EXP 42
17644: PPUSH
17645: LD_STRING DRf-06-rast-11
17647: PPUSH
17648: CALL_OW 88
// Say ( Heike , DH-06-rast-12 ) ;
17652: LD_EXP 29
17656: PPUSH
17657: LD_STRING DH-06-rast-12
17659: PPUSH
17660: CALL_OW 88
// Say ( Rolf , DRf-06-rast-13 ) ;
17664: LD_EXP 42
17668: PPUSH
17669: LD_STRING DRf-06-rast-13
17671: PPUSH
17672: CALL_OW 88
// Say ( Heike , DH-06-rast-14 ) ;
17676: LD_EXP 29
17680: PPUSH
17681: LD_STRING DH-06-rast-14
17683: PPUSH
17684: CALL_OW 88
// Say ( Rolf , DRf-06-rast-15 ) ;
17688: LD_EXP 42
17692: PPUSH
17693: LD_STRING DRf-06-rast-15
17695: PPUSH
17696: CALL_OW 88
// Say ( Heike , DH-06-rast-16 ) ;
17700: LD_EXP 29
17704: PPUSH
17705: LD_STRING DH-06-rast-16
17707: PPUSH
17708: CALL_OW 88
// if IsOk ( Mike ) then
17712: LD_EXP 31
17716: PPUSH
17717: CALL_OW 302
17721: IFFALSE 17795
// begin Say ( Mike , DM-06-rast-17 ) ;
17723: LD_EXP 31
17727: PPUSH
17728: LD_STRING DM-06-rast-17
17730: PPUSH
17731: CALL_OW 88
// Say ( Heike , DH-06-rast-18 ) ;
17735: LD_EXP 29
17739: PPUSH
17740: LD_STRING DH-06-rast-18
17742: PPUSH
17743: CALL_OW 88
// Say ( Mike , DM-06-rast-19 ) ;
17747: LD_EXP 31
17751: PPUSH
17752: LD_STRING DM-06-rast-19
17754: PPUSH
17755: CALL_OW 88
// Say ( Heike , DH-06-rast-20 ) ;
17759: LD_EXP 29
17763: PPUSH
17764: LD_STRING DH-06-rast-20
17766: PPUSH
17767: CALL_OW 88
// Say ( Mike , DM-06-rast-21 ) ;
17771: LD_EXP 31
17775: PPUSH
17776: LD_STRING DM-06-rast-21
17778: PPUSH
17779: CALL_OW 88
// Say ( Heike , DH-06-rast-22 ) ;
17783: LD_EXP 29
17787: PPUSH
17788: LD_STRING DH-06-rast-22
17790: PPUSH
17791: CALL_OW 88
// end ; Say ( Heike , DH-06-rast-23 ) ;
17795: LD_EXP 29
17799: PPUSH
17800: LD_STRING DH-06-rast-23
17802: PPUSH
17803: CALL_OW 88
// end else
17807: GO 17959
// begin linkedWithRolf := 1 ;
17809: LD_ADDR_EXP 12
17813: PUSH
17814: LD_INT 1
17816: ST_TO_ADDR
// Say ( Rolf , DRf-06-rast-a-11 ) ;
17817: LD_EXP 42
17821: PPUSH
17822: LD_STRING DRf-06-rast-a-11
17824: PPUSH
17825: CALL_OW 88
// Say ( Heike , DH-06-rast-a-12 ) ;
17829: LD_EXP 29
17833: PPUSH
17834: LD_STRING DH-06-rast-a-12
17836: PPUSH
17837: CALL_OW 88
// if IsOk ( Kurt ) then
17841: LD_EXP 40
17845: PPUSH
17846: CALL_OW 302
17850: IFFALSE 17947
// begin Say ( Kurt , DKs-06-rast-a-13 ) ;
17852: LD_EXP 40
17856: PPUSH
17857: LD_STRING DKs-06-rast-a-13
17859: PPUSH
17860: CALL_OW 88
// Say ( Rolf , DRf-06-rast-a-14 ) ;
17864: LD_EXP 42
17868: PPUSH
17869: LD_STRING DRf-06-rast-a-14
17871: PPUSH
17872: CALL_OW 88
// Say ( Rolf , DRf-06-rast-a-15 ) ;
17876: LD_EXP 42
17880: PPUSH
17881: LD_STRING DRf-06-rast-a-15
17883: PPUSH
17884: CALL_OW 88
// Say ( Kurt , DKs-06-rast-a-16 ) ;
17888: LD_EXP 40
17892: PPUSH
17893: LD_STRING DKs-06-rast-a-16
17895: PPUSH
17896: CALL_OW 88
// if IsOk ( Givi ) then
17900: LD_EXP 30
17904: PPUSH
17905: CALL_OW 302
17909: IFFALSE 17947
// begin Say ( Givi , DG-06-rast-a-17 ) ;
17911: LD_EXP 30
17915: PPUSH
17916: LD_STRING DG-06-rast-a-17
17918: PPUSH
17919: CALL_OW 88
// Say ( Givi , DG-06-rast-a-18 ) ;
17923: LD_EXP 30
17927: PPUSH
17928: LD_STRING DG-06-rast-a-18
17930: PPUSH
17931: CALL_OW 88
// Say ( Kurt , DKs-06-rast-a-19 ) ;
17935: LD_EXP 40
17939: PPUSH
17940: LD_STRING DKs-06-rast-a-19
17942: PPUSH
17943: CALL_OW 88
// end ; end ; Say ( Heike , DH-06-rast-a-20 ) ;
17947: LD_EXP 29
17951: PPUSH
17952: LD_STRING DH-06-rast-a-20
17954: PPUSH
17955: CALL_OW 88
// end ; Say ( Rolf , DRf-06-rast-24 ) ;
17959: LD_EXP 42
17963: PPUSH
17964: LD_STRING DRf-06-rast-24
17966: PPUSH
17967: CALL_OW 88
// if IsOk ( Aviradze ) then
17971: LD_EXP 41
17975: PPUSH
17976: CALL_OW 302
17980: IFFALSE 18080
// begin Say ( Aviradze , DA-06-rast-25 ) ;
17982: LD_EXP 41
17986: PPUSH
17987: LD_STRING DA-06-rast-25
17989: PPUSH
17990: CALL_OW 88
// Say ( Heike , DH-06-rast-26 ) ;
17994: LD_EXP 29
17998: PPUSH
17999: LD_STRING DH-06-rast-26
18001: PPUSH
18002: CALL_OW 88
// Say ( Aviradze , DA-06-rast-27 ) ;
18006: LD_EXP 41
18010: PPUSH
18011: LD_STRING DA-06-rast-27
18013: PPUSH
18014: CALL_OW 88
// if IsOk ( Markov ) then
18018: LD_EXP 36
18022: PPUSH
18023: CALL_OW 302
18027: IFFALSE 18055
// begin Say ( Markov , DMar-06-rast-28 ) ;
18029: LD_EXP 36
18033: PPUSH
18034: LD_STRING DMar-06-rast-28
18036: PPUSH
18037: CALL_OW 88
// Say ( Markov , DMar-06-rast-29 ) ;
18041: LD_EXP 36
18045: PPUSH
18046: LD_STRING DMar-06-rast-29
18048: PPUSH
18049: CALL_OW 88
// end else
18053: GO 18078
// if IsOk ( Sophia ) then
18055: LD_EXP 35
18059: PPUSH
18060: CALL_OW 302
18064: IFFALSE 18078
// begin Say ( Sophia , DS-06-rast-28 ) ;
18066: LD_EXP 35
18070: PPUSH
18071: LD_STRING DS-06-rast-28
18073: PPUSH
18074: CALL_OW 88
// end ; end else
18078: GO 18103
// if IsOk ( Sophia ) then
18080: LD_EXP 35
18084: PPUSH
18085: CALL_OW 302
18089: IFFALSE 18103
// Say ( Sophia , DS-06-rast-29 ) ;
18091: LD_EXP 35
18095: PPUSH
18096: LD_STRING DS-06-rast-29
18098: PPUSH
18099: CALL_OW 88
// DialogueOff ;
18103: CALL_OW 7
// rolfScriptBase := false ;
18107: LD_ADDR_EXP 9
18111: PUSH
18112: LD_INT 0
18114: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
18115: LD_STRING M3
18117: PPUSH
18118: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
18122: LD_ADDR_VAR 0 1
18126: PUSH
18127: LD_INT 22
18129: PUSH
18130: LD_INT 8
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: CALL_OW 69
18141: PUSH
18142: FOR_IN
18143: IFFALSE 18159
// SetSide ( i , 2 ) ;
18145: LD_VAR 0 1
18149: PPUSH
18150: LD_INT 2
18152: PPUSH
18153: CALL_OW 235
18157: GO 18142
18159: POP
18160: POP
// end ;
18161: PPOPN 1
18163: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf do var random ;
18164: LD_EXP 3
18168: PUSH
18169: LD_EXP 42
18173: PPUSH
18174: CALL_OW 256
18178: PUSH
18179: LD_INT 400
18181: LESS
18182: AND
18183: PUSH
18184: LD_EXP 12
18188: NOT
18189: AND
18190: IFFALSE 18464
18192: GO 18194
18194: DISABLE
18195: LD_INT 0
18197: PPUSH
// begin DialogueOn ;
18198: CALL_OW 6
// SayRadio ( Rolf , DRf-06-rast-f-11 ) ;
18202: LD_EXP 42
18206: PPUSH
18207: LD_STRING DRf-06-rast-f-11
18209: PPUSH
18210: CALL_OW 94
// SayRadio ( Rolf , DRf-06-rast-f-12 ) ;
18214: LD_EXP 42
18218: PPUSH
18219: LD_STRING DRf-06-rast-f-12
18221: PPUSH
18222: CALL_OW 94
// SayRadio ( Rolf , DRf-06-rast-f-13 ) ;
18226: LD_EXP 42
18230: PPUSH
18231: LD_STRING DRf-06-rast-f-13
18233: PPUSH
18234: CALL_OW 94
// DialogueOff ;
18238: CALL_OW 7
// KillUnit ( Rolf ) ;
18242: LD_EXP 42
18246: PPUSH
18247: CALL_OW 66
// wait ( 0 0$1 ) ;
18251: LD_INT 35
18253: PPUSH
18254: CALL_OW 67
// if not IsOk ( Givi ) then
18258: LD_EXP 30
18262: PPUSH
18263: CALL_OW 302
18267: NOT
18268: IFFALSE 18272
// exit ;
18270: GO 18464
// DialogueOn ;
18272: CALL_OW 6
// Say ( Givi , DG-06-rast-f-14 ) ;
18276: LD_EXP 30
18280: PPUSH
18281: LD_STRING DG-06-rast-f-14
18283: PPUSH
18284: CALL_OW 88
// Say ( Givi , DG-06-rast-f-15 ) ;
18288: LD_EXP 30
18292: PPUSH
18293: LD_STRING DG-06-rast-f-15
18295: PPUSH
18296: CALL_OW 88
// if IsOk ( Kaia ) then
18300: LD_EXP 34
18304: PPUSH
18305: CALL_OW 302
18309: IFFALSE 18325
// Say ( Kaia , DK-06-rast-f-16 ) else
18311: LD_EXP 34
18315: PPUSH
18316: LD_STRING DK-06-rast-f-16
18318: PPUSH
18319: CALL_OW 88
18323: GO 18412
// if heikeSecondSquad then
18325: LD_EXP 44
18329: IFFALSE 18412
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
18331: LD_ADDR_VAR 0 1
18335: PUSH
18336: LD_EXP 44
18340: PUSH
18341: LD_INT 1
18343: PPUSH
18344: LD_EXP 44
18348: PPUSH
18349: CALL_OW 12
18353: ARRAY
18354: ST_TO_ADDR
// case GetSex ( random ) of 1 :
18355: LD_VAR 0 1
18359: PPUSH
18360: CALL_OW 258
18364: PUSH
18365: LD_INT 1
18367: DOUBLE
18368: EQUAL
18369: IFTRUE 18373
18371: GO 18388
18373: POP
// Say ( random , DArm-06-rast-f-a-16 ) ; 2 :
18374: LD_VAR 0 1
18378: PPUSH
18379: LD_STRING DArm-06-rast-f-a-16
18381: PPUSH
18382: CALL_OW 88
18386: GO 18412
18388: LD_INT 2
18390: DOUBLE
18391: EQUAL
18392: IFTRUE 18396
18394: GO 18411
18396: POP
// Say ( random , DArf-06-rast-f-a-16 ) ; end ;
18397: LD_VAR 0 1
18401: PPUSH
18402: LD_STRING DArf-06-rast-f-a-16
18404: PPUSH
18405: CALL_OW 88
18409: GO 18412
18411: POP
// end ; Say ( Givi , DG-06-rast-f-17 ) ;
18412: LD_EXP 30
18416: PPUSH
18417: LD_STRING DG-06-rast-f-17
18419: PPUSH
18420: CALL_OW 88
// Say ( Givi , DG-06-rast-f-18 ) ;
18424: LD_EXP 30
18428: PPUSH
18429: LD_STRING DG-06-rast-f-18
18431: PPUSH
18432: CALL_OW 88
// Say ( Givi , DG-06-rast-f-19 ) ;
18436: LD_EXP 30
18440: PPUSH
18441: LD_STRING DG-06-rast-f-19
18443: PPUSH
18444: CALL_OW 88
// Say ( Givi , DG-06-rast-f-20 ) ;
18448: LD_EXP 30
18452: PPUSH
18453: LD_STRING DG-06-rast-f-20
18455: PPUSH
18456: CALL_OW 88
// DialogueOff ;
18460: CALL_OW 7
// end ;
18464: PPOPN 1
18466: END
// every 0 0$1 trigger SeeArea ( 2 , ruMainBase ) do
18467: LD_INT 2
18469: PPUSH
18470: LD_INT 10
18472: PPUSH
18473: CALL_OW 294
18477: IFFALSE 18550
18479: GO 18481
18481: DISABLE
// begin Say ( Givi , DG-06-Len-1 ) ;
18482: LD_EXP 30
18486: PPUSH
18487: LD_STRING DG-06-Len-1
18489: PPUSH
18490: CALL_OW 88
// Say ( Kurt , DKs-06-Len-2 ) ;
18494: LD_EXP 40
18498: PPUSH
18499: LD_STRING DKs-06-Len-2
18501: PPUSH
18502: CALL_OW 88
// Say ( Kurt , DKs-06-Len-3 ) ;
18506: LD_EXP 40
18510: PPUSH
18511: LD_STRING DKs-06-Len-3
18513: PPUSH
18514: CALL_OW 88
// Say ( Heike , DH-06-Len-4 ) ;
18518: LD_EXP 29
18522: PPUSH
18523: LD_STRING DH-06-Len-4
18525: PPUSH
18526: CALL_OW 88
// Say ( Kaia , DK-06-Len-5 ) ;
18530: LD_EXP 34
18534: PPUSH
18535: LD_STRING DK-06-Len-5
18537: PPUSH
18538: CALL_OW 88
// leninSpotted := true ;
18542: LD_ADDR_EXP 14
18546: PUSH
18547: LD_INT 1
18549: ST_TO_ADDR
// end ;
18550: END
// every 0 0$1 trigger bergkampfArrived and tick > 16 16$00 do var i ;
18551: LD_EXP 3
18555: PUSH
18556: LD_OWVAR 1
18560: PUSH
18561: LD_INT 33600
18563: GREATER
18564: AND
18565: IFFALSE 18935
18567: GO 18569
18569: DISABLE
18570: LD_INT 0
18572: PPUSH
// begin wait ( 1 1$20 ) ;
18573: LD_INT 2800
18575: PPUSH
18576: CALL_OW 67
// PrepareOmarSquad ;
18580: CALL 3946 0 0
// repeat wait ( 0 0$1 ) ;
18584: LD_INT 35
18586: PPUSH
18587: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
18591: LD_INT 14
18593: PPUSH
18594: LD_INT 22
18596: PUSH
18597: LD_INT 3
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 2
18606: PUSH
18607: LD_INT 21
18609: PUSH
18610: LD_INT 1
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 59
18619: PUSH
18620: EMPTY
18621: LIST
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: LIST
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PPUSH
18632: CALL_OW 70
18636: NOT
18637: IFFALSE 18584
// for i in omarSquad do
18639: LD_ADDR_VAR 0 1
18643: PUSH
18644: LD_EXP 47
18648: PUSH
18649: FOR_IN
18650: IFFALSE 18681
// if GetLives ( i ) < 750 then
18652: LD_VAR 0 1
18656: PPUSH
18657: CALL_OW 256
18661: PUSH
18662: LD_INT 750
18664: LESS
18665: IFFALSE 18679
// SetLives ( i , 1000 ) ;
18667: LD_VAR 0 1
18671: PPUSH
18672: LD_INT 1000
18674: PPUSH
18675: CALL_OW 234
18679: GO 18649
18681: POP
18682: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
18683: LD_ADDR_VAR 0 1
18687: PUSH
18688: LD_INT 14
18690: PPUSH
18691: LD_INT 21
18693: PUSH
18694: LD_INT 3
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PPUSH
18701: CALL_OW 70
18705: PUSH
18706: FOR_IN
18707: IFFALSE 18723
// SetSide ( i , 5 ) ;
18709: LD_VAR 0 1
18713: PPUSH
18714: LD_INT 5
18716: PPUSH
18717: CALL_OW 235
18721: GO 18706
18723: POP
18724: POP
// wait ( 0 0$3 ) ;
18725: LD_INT 105
18727: PPUSH
18728: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
18732: LD_INT 5
18734: PPUSH
18735: LD_INT 2
18737: PPUSH
18738: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
18742: LD_EXP 39
18746: PPUSH
18747: CALL_OW 87
// DialogueOn ;
18751: CALL_OW 6
// SayRadio ( Omar , DOm-06-Veh-1 ) ;
18755: LD_EXP 39
18759: PPUSH
18760: LD_STRING DOm-06-Veh-1
18762: PPUSH
18763: CALL_OW 94
// SayRadio ( Omar , DOm-06-Veh-2 ) ;
18767: LD_EXP 39
18771: PPUSH
18772: LD_STRING DOm-06-Veh-2
18774: PPUSH
18775: CALL_OW 94
// SayRadio ( Omar , DOm-06-Veh-3 ) ;
18779: LD_EXP 39
18783: PPUSH
18784: LD_STRING DOm-06-Veh-3
18786: PPUSH
18787: CALL_OW 94
// if mortarConstructed then
18791: LD_EXP 15
18795: IFFALSE 18809
// SayRadio ( Omar , DOm-06-Veh-4 ) ;
18797: LD_EXP 39
18801: PPUSH
18802: LD_STRING DOm-06-Veh-4
18804: PPUSH
18805: CALL_OW 94
// Say ( Heike , DH-06-Veh-5 ) ;
18809: LD_EXP 29
18813: PPUSH
18814: LD_STRING DH-06-Veh-5
18816: PPUSH
18817: CALL_OW 88
// if IsOk ( Kurt ) then
18821: LD_EXP 40
18825: PPUSH
18826: CALL_OW 302
18830: IFFALSE 18880
// begin Say ( Kurt , DKs-06-Veh-6 ) ;
18832: LD_EXP 40
18836: PPUSH
18837: LD_STRING DKs-06-Veh-6
18839: PPUSH
18840: CALL_OW 88
// Say ( Kurt , DKs-06-Veh-7 ) ;
18844: LD_EXP 40
18848: PPUSH
18849: LD_STRING DKs-06-Veh-7
18851: PPUSH
18852: CALL_OW 88
// Say ( Givi , DG-06-Veh-8 ) ;
18856: LD_EXP 30
18860: PPUSH
18861: LD_STRING DG-06-Veh-8
18863: PPUSH
18864: CALL_OW 88
// Say ( Mike , DM-06-Veh-9 ) ;
18868: LD_EXP 31
18872: PPUSH
18873: LD_STRING DM-06-Veh-9
18875: PPUSH
18876: CALL_OW 88
// end ; DialogueOff ;
18880: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
18884: LD_STRING M4
18886: PPUSH
18887: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
18891: LD_EXP 39
18895: PPUSH
18896: LD_INT 341
18898: PPUSH
18899: LD_INT 232
18901: PPUSH
18902: CALL_OW 428
18906: PPUSH
18907: CALL_OW 120
// omarArrived := true ;
18911: LD_ADDR_EXP 6
18915: PUSH
18916: LD_INT 1
18918: ST_TO_ADDR
// omarScriptBase := true ;
18919: LD_ADDR_EXP 10
18923: PUSH
18924: LD_INT 1
18926: ST_TO_ADDR
// omarWantVehicles := true ;
18927: LD_ADDR_EXP 18
18931: PUSH
18932: LD_INT 1
18934: ST_TO_ADDR
// end ;
18935: PPOPN 1
18937: END
// every 0 0$1 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
18938: LD_EXP 42
18942: PPUSH
18943: CALL_OW 302
18947: PUSH
18948: LD_EXP 12
18952: AND
18953: PUSH
18954: LD_EXP 6
18958: AND
18959: IFFALSE 19056
18961: GO 18963
18963: DISABLE
// begin CenterNowOnUnits ( Rolf ) ;
18964: LD_EXP 42
18968: PPUSH
18969: CALL_OW 87
// DialogueOn ;
18973: CALL_OW 6
// Say ( Rolf , DRf-06-Veh-10 ) ;
18977: LD_EXP 42
18981: PPUSH
18982: LD_STRING DRf-06-Veh-10
18984: PPUSH
18985: CALL_OW 88
// Say ( Rolf , DRf-06-Veh-11 ) ;
18989: LD_EXP 42
18993: PPUSH
18994: LD_STRING DRf-06-Veh-11
18996: PPUSH
18997: CALL_OW 88
// Say ( Heike , DH-06-Veh-12 ) ;
19001: LD_EXP 29
19005: PPUSH
19006: LD_STRING DH-06-Veh-12
19008: PPUSH
19009: CALL_OW 88
// Say ( Heike , DH-06-Veh-13 ) ;
19013: LD_EXP 29
19017: PPUSH
19018: LD_STRING DH-06-Veh-13
19020: PPUSH
19021: CALL_OW 88
// Say ( Rolf , DRf-06-Veh-14 ) ;
19025: LD_EXP 42
19029: PPUSH
19030: LD_STRING DRf-06-Veh-14
19032: PPUSH
19033: CALL_OW 88
// DialogueOff ;
19037: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
19041: LD_STRING M5
19043: PPUSH
19044: CALL_OW 337
// rolfWantVehicles := true ;
19048: LD_ADDR_EXP 17
19052: PUSH
19053: LD_INT 1
19055: ST_TO_ADDR
// end ;
19056: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
19057: LD_EXP 18
19061: IFFALSE 19753
19063: GO 19065
19065: DISABLE
19066: LD_INT 0
19068: PPUSH
19069: PPUSH
19070: PPUSH
19071: PPUSH
19072: PPUSH
19073: PPUSH
// begin wait ( 0 0$3 ) ;
19074: LD_INT 105
19076: PPUSH
19077: CALL_OW 67
// Hint ( OmarVehicles ) ;
19081: LD_STRING OmarVehicles
19083: PPUSH
19084: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
19088: LD_INT 16
19090: PPUSH
19091: LD_INT 1
19093: PPUSH
19094: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
19098: LD_INT 35
19100: PPUSH
19101: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
19105: LD_ADDR_EXP 20
19109: PUSH
19110: LD_EXP 20
19114: PUSH
19115: LD_INT 35
19117: MINUS
19118: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
19119: LD_EXP 20
19123: PUSH
19124: LD_INT 0
19126: LESSEQUAL
19127: IFFALSE 19227
// begin display_strings := [ ] ;
19129: LD_ADDR_OWVAR 47
19133: PUSH
19134: EMPTY
19135: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
19136: LD_STRING M4a
19138: PPUSH
19139: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19143: LD_INT 16
19145: PPUSH
19146: LD_INT 0
19148: PPUSH
19149: CALL_OW 424
// DialogueOn ;
19153: CALL_OW 6
// SayRadio ( Omar , DOm-06-Veh-b-15 ) ;
19157: LD_EXP 39
19161: PPUSH
19162: LD_STRING DOm-06-Veh-b-15
19164: PPUSH
19165: CALL_OW 94
// Say ( Heike , DH-06-Veh-b-16 ) ;
19169: LD_EXP 29
19173: PPUSH
19174: LD_STRING DH-06-Veh-b-16
19176: PPUSH
19177: CALL_OW 88
// SayRadio ( Omar , DOm-06-Veh-b-17 ) ;
19181: LD_EXP 39
19185: PPUSH
19186: LD_STRING DOm-06-Veh-b-17
19188: PPUSH
19189: CALL_OW 94
// Say ( Kaia , DK-06-Veh-b-18 ) ;
19193: LD_EXP 34
19197: PPUSH
19198: LD_STRING DK-06-Veh-b-18
19200: PPUSH
19201: CALL_OW 88
// DialogueOff ;
19205: CALL_OW 7
// omarAttack := true ;
19209: LD_ADDR_EXP 23
19213: PUSH
19214: LD_INT 1
19216: ST_TO_ADDR
// omarScriptBase := false ;
19217: LD_ADDR_EXP 10
19221: PUSH
19222: LD_INT 0
19224: ST_TO_ADDR
// exit ;
19225: GO 19753
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19227: LD_EXP 21
19231: PUSH
19232: LD_INT 16
19234: PPUSH
19235: LD_INT 22
19237: PUSH
19238: LD_INT 2
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 21
19247: PUSH
19248: LD_INT 2
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 33
19257: PUSH
19258: LD_INT 1
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 58
19267: PUSH
19268: EMPTY
19269: LIST
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: PPUSH
19277: CALL_OW 70
19281: LESSEQUAL
19282: IFFALSE 19098
// omarWaitingForVehiclesTimer := 0 0$00 ;
19284: LD_ADDR_EXP 20
19288: PUSH
19289: LD_INT 0
19291: ST_TO_ADDR
// display_strings := [ ] ;
19292: LD_ADDR_OWVAR 47
19296: PUSH
19297: EMPTY
19298: ST_TO_ADDR
// DialogueOn ;
19299: CALL_OW 6
// SayRadio ( Omar , DOm-06-Veh-a-15 ) ;
19303: LD_EXP 39
19307: PPUSH
19308: LD_STRING DOm-06-Veh-a-15
19310: PPUSH
19311: CALL_OW 94
// Say ( Kaia , DK-06-Veh-a-16 ) ;
19315: LD_EXP 34
19319: PPUSH
19320: LD_STRING DK-06-Veh-a-16
19322: PPUSH
19323: CALL_OW 88
// DialogueOff ;
19327: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
19331: LD_STRING M4a
19333: PPUSH
19334: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19338: LD_INT 16
19340: PPUSH
19341: LD_INT 0
19343: PPUSH
19344: CALL_OW 424
// omarHasVehicles := true ;
19348: LD_ADDR_EXP 22
19352: PUSH
19353: LD_INT 1
19355: ST_TO_ADDR
// omarAttack := true ;
19356: LD_ADDR_EXP 23
19360: PUSH
19361: LD_INT 1
19363: ST_TO_ADDR
// omarScriptBase := false ;
19364: LD_ADDR_EXP 10
19368: PUSH
19369: LD_INT 0
19371: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19372: LD_ADDR_VAR 0 2
19376: PUSH
19377: LD_INT 16
19379: PPUSH
19380: LD_INT 22
19382: PUSH
19383: LD_INT 2
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 21
19392: PUSH
19393: LD_INT 2
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 33
19402: PUSH
19403: LD_INT 1
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 58
19412: PUSH
19413: EMPTY
19414: LIST
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: PPUSH
19422: CALL_OW 70
19426: ST_TO_ADDR
// for i in tmp do
19427: LD_ADDR_VAR 0 1
19431: PUSH
19432: LD_VAR 0 2
19436: PUSH
19437: FOR_IN
19438: IFFALSE 19466
// begin SetFuel ( i , 100 ) ;
19440: LD_VAR 0 1
19444: PPUSH
19445: LD_INT 100
19447: PPUSH
19448: CALL_OW 240
// SetSide ( i , 5 ) ;
19452: LD_VAR 0 1
19456: PPUSH
19457: LD_INT 5
19459: PPUSH
19460: CALL_OW 235
// end ;
19464: GO 19437
19466: POP
19467: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
19468: LD_ADDR_VAR 0 3
19472: PUSH
19473: LD_EXP 47
19477: PPUSH
19478: LD_INT 25
19480: PUSH
19481: LD_INT 2
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PPUSH
19488: CALL_OW 72
19492: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
19493: LD_ADDR_VAR 0 4
19497: PUSH
19498: LD_EXP 47
19502: PPUSH
19503: LD_INT 3
19505: PUSH
19506: LD_INT 55
19508: PUSH
19509: EMPTY
19510: LIST
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 25
19518: PUSH
19519: LD_INT 3
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PPUSH
19530: CALL_OW 72
19534: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
19535: LD_ADDR_VAR 0 5
19539: PUSH
19540: LD_INT 324
19542: PPUSH
19543: LD_INT 234
19545: PPUSH
19546: CALL_OW 428
19550: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
19551: LD_ADDR_VAR 0 6
19555: PUSH
19556: LD_INT 334
19558: PPUSH
19559: LD_INT 241
19561: PPUSH
19562: CALL_OW 428
19566: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
19567: LD_VAR 0 6
19571: PPUSH
19572: CALL_OW 313
19576: PPUSH
19577: CALL_OW 122
// if eng then
19581: LD_VAR 0 3
19585: IFFALSE 19693
// begin if eng + mech <= tmp then
19587: LD_VAR 0 3
19591: PUSH
19592: LD_VAR 0 4
19596: PLUS
19597: PUSH
19598: LD_VAR 0 2
19602: LESSEQUAL
19603: IFFALSE 19658
// begin ComEnterUnit ( eng , workshop ) ;
19605: LD_VAR 0 3
19609: PPUSH
19610: LD_VAR 0 5
19614: PPUSH
19615: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
19619: LD_VAR 0 3
19623: PPUSH
19624: LD_INT 3
19626: PPUSH
19627: CALL_OW 183
// AddComExitBuilding ( eng ) ;
19631: LD_VAR 0 3
19635: PPUSH
19636: CALL_OW 182
// mech := mech union eng ;
19640: LD_ADDR_VAR 0 4
19644: PUSH
19645: LD_VAR 0 4
19649: PUSH
19650: LD_VAR 0 3
19654: UNION
19655: ST_TO_ADDR
// end else
19656: GO 19693
// begin ComEnterUnit ( eng , armoury ) ;
19658: LD_VAR 0 3
19662: PPUSH
19663: LD_VAR 0 6
19667: PPUSH
19668: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
19672: LD_VAR 0 3
19676: PPUSH
19677: LD_INT 1
19679: PPUSH
19680: CALL_OW 183
// AddComExitBuilding ( eng ) ;
19684: LD_VAR 0 3
19688: PPUSH
19689: CALL_OW 182
// end ; end ; for i := 1 to tmp do
19693: LD_ADDR_VAR 0 1
19697: PUSH
19698: DOUBLE
19699: LD_INT 1
19701: DEC
19702: ST_TO_ADDR
19703: LD_VAR 0 2
19707: PUSH
19708: FOR_TO
19709: IFFALSE 19751
// if i <= mech then
19711: LD_VAR 0 1
19715: PUSH
19716: LD_VAR 0 4
19720: LESSEQUAL
19721: IFFALSE 19749
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
19723: LD_VAR 0 4
19727: PUSH
19728: LD_VAR 0 1
19732: ARRAY
19733: PPUSH
19734: LD_VAR 0 2
19738: PUSH
19739: LD_VAR 0 1
19743: ARRAY
19744: PPUSH
19745: CALL_OW 180
19749: GO 19708
19751: POP
19752: POP
// end ;
19753: PPOPN 6
19755: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i ;
19756: LD_EXP 42
19760: PPUSH
19761: CALL_OW 302
19765: PUSH
19766: LD_EXP 17
19770: AND
19771: IFFALSE 20219
19773: GO 19775
19775: DISABLE
19776: LD_INT 0
19778: PPUSH
// begin repeat wait ( 0 0$1 ) ;
19779: LD_INT 35
19781: PPUSH
19782: CALL_OW 67
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
19786: LD_ADDR_EXP 19
19790: PUSH
19791: LD_EXP 19
19795: PUSH
19796: LD_INT 35
19798: MINUS
19799: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 or omarAttack then
19800: LD_EXP 19
19804: PUSH
19805: LD_INT 0
19807: LESSEQUAL
19808: PUSH
19809: LD_EXP 23
19813: OR
19814: IFFALSE 20024
// begin display_strings := [ ] ;
19816: LD_ADDR_OWVAR 47
19820: PUSH
19821: EMPTY
19822: ST_TO_ADDR
// DialogueOn ;
19823: CALL_OW 6
// Say ( Rolf , DRf-06-Veh-b-19 ) ;
19827: LD_EXP 42
19831: PPUSH
19832: LD_STRING DRf-06-Veh-b-19
19834: PPUSH
19835: CALL_OW 88
// Say ( Rolf , DRf-06-Veh-b-20 ) ;
19839: LD_EXP 42
19843: PPUSH
19844: LD_STRING DRf-06-Veh-b-20
19846: PPUSH
19847: CALL_OW 88
// Say ( Heike , DH-06-Veh-b-21 ) ;
19851: LD_EXP 29
19855: PPUSH
19856: LD_STRING DH-06-Veh-b-21
19858: PPUSH
19859: CALL_OW 88
// if IsOk ( Givi ) then
19863: LD_EXP 30
19867: PPUSH
19868: CALL_OW 302
19872: IFFALSE 19910
// begin Say ( Givi , DG-06-Veh-b-22 ) ;
19874: LD_EXP 30
19878: PPUSH
19879: LD_STRING DG-06-Veh-b-22
19881: PPUSH
19882: CALL_OW 88
// Say ( Heike , DH-06-Veh-b-23 ) ;
19886: LD_EXP 29
19890: PPUSH
19891: LD_STRING DH-06-Veh-b-23
19893: PPUSH
19894: CALL_OW 88
// Say ( Givi , DG-06-Veh-b-24 ) ;
19898: LD_EXP 30
19902: PPUSH
19903: LD_STRING DG-06-Veh-b-24
19905: PPUSH
19906: CALL_OW 88
// end ; DialogueOff ;
19910: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
19914: LD_STRING M5a
19916: PPUSH
19917: CALL_OW 337
// for i in rolfSquad do
19921: LD_ADDR_VAR 0 1
19925: PUSH
19926: LD_EXP 46
19930: PUSH
19931: FOR_IN
19932: IFFALSE 19998
// begin SetSide ( i , 8 ) ;
19934: LD_VAR 0 1
19938: PPUSH
19939: LD_INT 8
19941: PPUSH
19942: CALL_OW 235
// if IsDriver ( i ) then
19946: LD_VAR 0 1
19950: PPUSH
19951: CALL 58818 0 1
19955: IFFALSE 19976
// SetSide ( IsInUnit ( i ) , 8 ) else
19957: LD_VAR 0 1
19961: PPUSH
19962: CALL_OW 310
19966: PPUSH
19967: LD_INT 8
19969: PPUSH
19970: CALL_OW 235
19974: GO 19996
// if IsInUnit ( i ) then
19976: LD_VAR 0 1
19980: PPUSH
19981: CALL_OW 310
19985: IFFALSE 19996
// ComExitBuilding ( i ) ;
19987: LD_VAR 0 1
19991: PPUSH
19992: CALL_OW 122
// end ;
19996: GO 19931
19998: POP
19999: POP
// wait ( 0 0$1 ) ;
20000: LD_INT 35
20002: PPUSH
20003: CALL_OW 67
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20007: LD_EXP 46
20011: PPUSH
20012: LD_INT 229
20014: PPUSH
20015: LD_INT 154
20017: PPUSH
20018: CALL_OW 114
// exit ;
20022: GO 20219
// end ; if IsDead ( Rolf ) then
20024: LD_EXP 42
20028: PPUSH
20029: CALL_OW 301
20033: IFFALSE 20044
// begin ChangeMissionObjectives ( M5a ) ;
20035: LD_STRING M5a
20037: PPUSH
20038: CALL_OW 337
// exit ;
20042: GO 20219
// end ; until UnitFilter ( rolfSquad , [ f_driving ] ) + 0 = rolfSquad + 0 ;
20044: LD_EXP 46
20048: PPUSH
20049: LD_INT 55
20051: PUSH
20052: EMPTY
20053: LIST
20054: PPUSH
20055: CALL_OW 72
20059: PUSH
20060: LD_INT 0
20062: PLUS
20063: PUSH
20064: LD_EXP 46
20068: PUSH
20069: LD_INT 0
20071: PLUS
20072: EQUAL
20073: IFFALSE 19779
// rolfWaitingForVehiclesTimer := 0 0$00 ;
20075: LD_ADDR_EXP 19
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
// display_strings := [ ] ;
20083: LD_ADDR_OWVAR 47
20087: PUSH
20088: EMPTY
20089: ST_TO_ADDR
// DialogueOn ;
20090: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
20094: LD_EXP 42
20098: PPUSH
20099: CALL_OW 87
// Say ( Rolf , DRf-06-Veh-a-17 ) ;
20103: LD_EXP 42
20107: PPUSH
20108: LD_STRING DRf-06-Veh-a-17
20110: PPUSH
20111: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
20115: LD_EXP 29
20119: PPUSH
20120: LD_STRING DH-08-Veh-a-18
20122: PPUSH
20123: CALL_OW 88
// Say ( Rolf , DRf-06-Veh-a-19 ) ;
20127: LD_EXP 42
20131: PPUSH
20132: LD_STRING DRf-06-Veh-a-19
20134: PPUSH
20135: CALL_OW 88
// DialogueOff ;
20139: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20143: LD_STRING M5a
20145: PPUSH
20146: CALL_OW 337
// rolfHasVehicles := true ;
20150: LD_ADDR_EXP 16
20154: PUSH
20155: LD_INT 1
20157: ST_TO_ADDR
// for i in rolfSquad do
20158: LD_ADDR_VAR 0 1
20162: PUSH
20163: LD_EXP 46
20167: PUSH
20168: FOR_IN
20169: IFFALSE 20202
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
20171: LD_VAR 0 1
20175: PPUSH
20176: CALL_OW 310
20180: PPUSH
20181: LD_INT 8
20183: PPUSH
20184: CALL_OW 235
// SetSide ( i , 8 ) ;
20188: LD_VAR 0 1
20192: PPUSH
20193: LD_INT 8
20195: PPUSH
20196: CALL_OW 235
// end ;
20200: GO 20168
20202: POP
20203: POP
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20204: LD_EXP 46
20208: PPUSH
20209: LD_INT 229
20211: PPUSH
20212: LD_INT 154
20214: PPUSH
20215: CALL_OW 114
// end ;
20219: PPOPN 1
20221: END
// every 0 0$1 trigger leninSpotted do
20222: LD_EXP 14
20226: IFFALSE 20314
20228: GO 20230
20230: DISABLE
// begin wait ( 0 0$10 ) ;
20231: LD_INT 350
20233: PPUSH
20234: CALL_OW 67
// DialogueOn ;
20238: CALL_OW 6
// Say ( Aviradze , DA-06-Transmission-1 ) ;
20242: LD_EXP 41
20246: PPUSH
20247: LD_STRING DA-06-Transmission-1
20249: PPUSH
20250: CALL_OW 88
// SayRadio ( Morozov , DMzw-06-Transmission-2 ) ;
20254: LD_EXP 48
20258: PPUSH
20259: LD_STRING DMzw-06-Transmission-2
20261: PPUSH
20262: CALL_OW 94
// if gaidarKilled then
20266: LD_EXP 7
20270: IFFALSE 20286
// SayRadio ( Morozov , DMzw-06-Transmission-3 ) else
20272: LD_EXP 48
20276: PPUSH
20277: LD_STRING DMzw-06-Transmission-3
20279: PPUSH
20280: CALL_OW 94
20284: GO 20298
// SayRadio ( Morozov , DMzw-06-Transmission-a-3 ) ;
20286: LD_EXP 48
20290: PPUSH
20291: LD_STRING DMzw-06-Transmission-a-3
20293: PPUSH
20294: CALL_OW 94
// Say ( Heike , DH-06-Transmission-4 ) ;
20298: LD_EXP 29
20302: PPUSH
20303: LD_STRING DH-06-Transmission-4
20305: PPUSH
20306: CALL_OW 88
// DialogueOff ;
20310: CALL_OW 7
// end ;
20314: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
20315: LD_INT 22
20317: PUSH
20318: LD_INT 3
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 25
20327: PUSH
20328: LD_INT 9
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 101
20337: PUSH
20338: LD_INT 2
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: LIST
20349: PPUSH
20350: CALL_OW 69
20354: PUSH
20355: LD_EXP 29
20359: PPUSH
20360: CALL_OW 302
20364: AND
20365: IFFALSE 20430
20367: GO 20369
20369: DISABLE
// begin CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
20370: LD_INT 22
20372: PUSH
20373: LD_INT 3
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 25
20382: PUSH
20383: LD_INT 9
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 101
20392: PUSH
20393: LD_INT 2
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: LIST
20404: PPUSH
20405: CALL_OW 69
20409: PUSH
20410: LD_INT 1
20412: ARRAY
20413: PPUSH
20414: CALL_OW 85
// Say ( Heike , DH-06-Rubazooka-1 ) ;
20418: LD_EXP 29
20422: PPUSH
20423: LD_STRING DH-06-Rubazooka-1
20425: PPUSH
20426: CALL_OW 88
// end ;
20430: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
20431: LD_INT 19
20433: PPUSH
20434: LD_INT 22
20436: PUSH
20437: LD_INT 3
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PPUSH
20444: CALL_OW 70
20448: PUSH
20449: LD_EXP 28
20453: AND
20454: IFFALSE 20505
20456: GO 20458
20458: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
20459: LD_INT 19
20461: PPUSH
20462: LD_INT 22
20464: PUSH
20465: LD_INT 3
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PPUSH
20472: CALL_OW 70
20476: PPUSH
20477: CALL_OW 85
// Say ( Heike , DH-06-Ruattfirst-1 ) ;
20481: LD_EXP 29
20485: PPUSH
20486: LD_STRING DH-06-Ruattfirst-1
20488: PPUSH
20489: CALL_OW 88
// Say ( Heike , DH-06-Ruattfirst-2 ) ;
20493: LD_EXP 29
20497: PPUSH
20498: LD_STRING DH-06-Ruattfirst-2
20500: PPUSH
20501: CALL_OW 88
// end ;
20505: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
20506: LD_INT 19
20508: PPUSH
20509: LD_INT 22
20511: PUSH
20512: LD_INT 3
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PPUSH
20519: CALL_OW 70
20523: PUSH
20524: LD_EXP 28
20528: NOT
20529: AND
20530: IFFALSE 20569
20532: GO 20534
20534: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
20535: LD_INT 19
20537: PPUSH
20538: LD_INT 22
20540: PUSH
20541: LD_INT 3
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PPUSH
20548: CALL_OW 70
20552: PPUSH
20553: CALL_OW 85
// Say ( Heike , DH-06-Ruattnext-1 ) ;
20557: LD_EXP 29
20561: PPUSH
20562: LD_STRING DH-06-Ruattnext-1
20564: PPUSH
20565: CALL_OW 88
// end ;
20569: END
// every 0 0$1 trigger GetResourceType ( GetBase ( arDepot ) , mat_oil ) < 31 and IsOk ( Givi ) do var vehicle , driver , live ;
20570: LD_EXP 43
20574: PPUSH
20575: CALL_OW 274
20579: PPUSH
20580: LD_INT 2
20582: PPUSH
20583: CALL_OW 275
20587: PUSH
20588: LD_INT 31
20590: LESS
20591: PUSH
20592: LD_EXP 30
20596: PPUSH
20597: CALL_OW 302
20601: AND
20602: IFFALSE 21152
20604: GO 20606
20606: DISABLE
20607: LD_INT 0
20609: PPUSH
20610: PPUSH
20611: PPUSH
// begin DialogueOn ;
20612: CALL_OW 6
// Say ( Heike , DH-06-Fuel-1 ) ;
20616: LD_EXP 29
20620: PPUSH
20621: LD_STRING DH-06-Fuel-1
20623: PPUSH
20624: CALL_OW 88
// Say ( Givi , DG-06-Fuel-2 ) ;
20628: LD_EXP 30
20632: PPUSH
20633: LD_STRING DG-06-Fuel-2
20635: PPUSH
20636: CALL_OW 88
// Say ( Givi , DG-06-Fuel-3 ) ;
20640: LD_EXP 30
20644: PPUSH
20645: LD_STRING DG-06-Fuel-3
20647: PPUSH
20648: CALL_OW 88
// Say ( Givi , DG-06-Fuel-4 ) ;
20652: LD_EXP 30
20656: PPUSH
20657: LD_STRING DG-06-Fuel-4
20659: PPUSH
20660: CALL_OW 88
// DialogueOff ;
20664: CALL_OW 7
// Query ( Oil ) ;
20668: LD_STRING Oil
20670: PPUSH
20671: CALL_OW 97
// SetAreaMapShow ( oilArea , 1 ) ;
20675: LD_INT 20
20677: PPUSH
20678: LD_INT 1
20680: PPUSH
20681: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
20685: LD_INT 35
20687: PPUSH
20688: CALL_OW 67
// until FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
20692: LD_INT 20
20694: PPUSH
20695: LD_INT 22
20697: PUSH
20698: LD_INT 2
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 33
20707: PUSH
20708: LD_INT 1
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 2
20717: PUSH
20718: LD_INT 34
20720: PUSH
20721: LD_INT 32
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 34
20730: PUSH
20731: LD_INT 51
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: LIST
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: PPUSH
20748: CALL_OW 70
20752: IFFALSE 20685
// SetAreaMapShow ( oilArea , 0 ) ;
20754: LD_INT 20
20756: PPUSH
20757: LD_INT 0
20759: PPUSH
20760: CALL_OW 424
// vehicle := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) [ 1 ] ;
20764: LD_ADDR_VAR 0 1
20768: PUSH
20769: LD_INT 20
20771: PPUSH
20772: LD_INT 22
20774: PUSH
20775: LD_INT 2
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 33
20784: PUSH
20785: LD_INT 1
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 2
20794: PUSH
20795: LD_INT 34
20797: PUSH
20798: LD_INT 32
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 34
20807: PUSH
20808: LD_INT 51
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: LIST
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: LIST
20824: PPUSH
20825: CALL_OW 70
20829: PUSH
20830: LD_INT 1
20832: ARRAY
20833: ST_TO_ADDR
// driver := IsDrivenBy ( vehicle ) ;
20834: LD_ADDR_VAR 0 2
20838: PUSH
20839: LD_VAR 0 1
20843: PPUSH
20844: CALL_OW 311
20848: ST_TO_ADDR
// live := GetLives ( vehicle ) ;
20849: LD_ADDR_VAR 0 3
20853: PUSH
20854: LD_VAR 0 1
20858: PPUSH
20859: CALL_OW 256
20863: ST_TO_ADDR
// RemoveUnit ( driver ) ;
20864: LD_VAR 0 2
20868: PPUSH
20869: CALL_OW 64
// RemoveUnit ( vehicle ) ;
20873: LD_VAR 0 1
20877: PPUSH
20878: CALL_OW 64
// wait ( rand ( 3 3$30 , 5 5$00 ) ) ;
20882: LD_INT 7350
20884: PPUSH
20885: LD_INT 10500
20887: PPUSH
20888: CALL_OW 12
20892: PPUSH
20893: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20897: LD_INT 35
20899: PPUSH
20900: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) ;
20904: LD_INT 22
20906: PUSH
20907: LD_INT 3
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 92
20916: PUSH
20917: LD_INT 261
20919: PUSH
20920: LD_INT 71
20922: PUSH
20923: LD_INT 12
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PPUSH
20936: CALL_OW 69
20940: NOT
20941: IFFALSE 20897
// uc_nation := GetNation ( vehicle ) ;
20943: LD_ADDR_OWVAR 21
20947: PUSH
20948: LD_VAR 0 1
20952: PPUSH
20953: CALL_OW 248
20957: ST_TO_ADDR
// uc_side := 2 ;
20958: LD_ADDR_OWVAR 20
20962: PUSH
20963: LD_INT 2
20965: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( vehicle ) , GetEngine ( vehicle ) , GetControl ( vehicle ) , GetWeapon ( vehicle ) , 66 ) ;
20966: LD_VAR 0 1
20970: PPUSH
20971: CALL_OW 265
20975: PPUSH
20976: LD_VAR 0 1
20980: PPUSH
20981: CALL_OW 262
20985: PPUSH
20986: LD_VAR 0 1
20990: PPUSH
20991: CALL_OW 263
20995: PPUSH
20996: LD_VAR 0 1
21000: PPUSH
21001: CALL_OW 264
21005: PPUSH
21006: LD_INT 66
21008: PPUSH
21009: CALL 29338 0 5
// vehicle := CreateVehicle ;
21013: LD_ADDR_VAR 0 1
21017: PUSH
21018: CALL_OW 45
21022: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
21023: LD_VAR 0 1
21027: PPUSH
21028: LD_INT 277
21030: PPUSH
21031: LD_INT 80
21033: PPUSH
21034: LD_INT 4
21036: PPUSH
21037: LD_INT 0
21039: PPUSH
21040: CALL 63143 0 5
// PlaceHumanInUnit ( driver , vehicle ) ;
21044: LD_VAR 0 2
21048: PPUSH
21049: LD_VAR 0 1
21053: PPUSH
21054: CALL_OW 52
// SetLives ( vehicle , live ) ;
21058: LD_VAR 0 1
21062: PPUSH
21063: LD_VAR 0 3
21067: PPUSH
21068: CALL_OW 234
// if Prob ( [ 70 , 60 , 50 ] [ Difficulty ] ) then
21072: LD_INT 70
21074: PUSH
21075: LD_INT 60
21077: PUSH
21078: LD_INT 50
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: LIST
21085: PUSH
21086: LD_OWVAR 67
21090: ARRAY
21091: PPUSH
21092: CALL_OW 13
21096: IFFALSE 21115
// SetCargo ( vehicle , mat_oil , 100 ) else
21098: LD_VAR 0 1
21102: PPUSH
21103: LD_INT 2
21105: PPUSH
21106: LD_INT 100
21108: PPUSH
21109: CALL_OW 290
21113: GO 21137
// if live > 333 then
21115: LD_VAR 0 3
21119: PUSH
21120: LD_INT 333
21122: GREATER
21123: IFFALSE 21137
// SetLives ( vehicle , 333 ) ;
21125: LD_VAR 0 1
21129: PPUSH
21130: LD_INT 333
21132: PPUSH
21133: CALL_OW 234
// ComMoveXY ( vehicle , 250 , 119 ) ;
21137: LD_VAR 0 1
21141: PPUSH
21142: LD_INT 250
21144: PPUSH
21145: LD_INT 119
21147: PPUSH
21148: CALL_OW 111
// end ;
21152: PPOPN 3
21154: END
// every 0 0$1 trigger leninSpotted and omarAttack do
21155: LD_EXP 14
21159: PUSH
21160: LD_EXP 23
21164: AND
21165: IFFALSE 21465
21167: GO 21169
21169: DISABLE
// begin wait ( 0 0$45 ) ;
21170: LD_INT 1575
21172: PPUSH
21173: CALL_OW 67
// DialogueOn ;
21177: CALL_OW 6
// SayRadio ( Shariff , DShar-06-End-1 ) ;
21181: LD_EXP 37
21185: PPUSH
21186: LD_STRING DShar-06-End-1
21188: PPUSH
21189: CALL_OW 94
// Say ( Heike , DH-06-End-2 ) ;
21193: LD_EXP 29
21197: PPUSH
21198: LD_STRING DH-06-End-2
21200: PPUSH
21201: CALL_OW 88
// SayRadio ( Shariff , DShar-06-End-3 ) ;
21205: LD_EXP 37
21209: PPUSH
21210: LD_STRING DShar-06-End-3
21212: PPUSH
21213: CALL_OW 94
// Say ( Heike , DH-06-End-4 ) ;
21217: LD_EXP 29
21221: PPUSH
21222: LD_STRING DH-06-End-4
21224: PPUSH
21225: CALL_OW 88
// SayRadio ( Shariff , DShar-06-End-5 ) ;
21229: LD_EXP 37
21233: PPUSH
21234: LD_STRING DShar-06-End-5
21236: PPUSH
21237: CALL_OW 94
// SayRadio ( Shariff , DShar-06-End-6 ) ;
21241: LD_EXP 37
21245: PPUSH
21246: LD_STRING DShar-06-End-6
21248: PPUSH
21249: CALL_OW 94
// dwait ( 0 0$2 ) ;
21253: LD_INT 70
21255: PPUSH
21256: CALL_OW 68
// Say ( Heike , DH-06-End-7 ) ;
21260: LD_EXP 29
21264: PPUSH
21265: LD_STRING DH-06-End-7
21267: PPUSH
21268: CALL_OW 88
// DialogueOff ;
21272: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
21276: LD_STRING M6
21278: PPUSH
21279: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
21283: LD_INT 17
21285: PPUSH
21286: LD_INT 1
21288: PPUSH
21289: CALL_OW 424
// escapeAllowed := true ;
21293: LD_ADDR_EXP 24
21297: PUSH
21298: LD_INT 1
21300: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21301: LD_INT 35
21303: PPUSH
21304: CALL_OW 67
// Say ( Kurt , DKs-06-End-8 ) ;
21308: LD_EXP 40
21312: PPUSH
21313: LD_STRING DKs-06-End-8
21315: PPUSH
21316: CALL_OW 88
// Say ( Kaia , DK-06-End-10 ) ;
21320: LD_EXP 34
21324: PPUSH
21325: LD_STRING DK-06-End-10
21327: PPUSH
21328: CALL_OW 88
// Say ( Kurt , DKs-06-End-9 ) ;
21332: LD_EXP 40
21336: PPUSH
21337: LD_STRING DKs-06-End-9
21339: PPUSH
21340: CALL_OW 88
// Say ( Markov , DMar-06-End-11 ) ;
21344: LD_EXP 36
21348: PPUSH
21349: LD_STRING DMar-06-End-11
21351: PPUSH
21352: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
21356: LD_STRING 05_DrugsTested
21358: PPUSH
21359: LD_EXP 1
21363: PPUSH
21364: CALL_OW 30
21368: IFFALSE 21382
// Say ( Mike , DM-06-End-12 ) ;
21370: LD_EXP 31
21374: PPUSH
21375: LD_STRING DM-06-End-12
21377: PPUSH
21378: CALL_OW 88
// Say ( Olaf , DO-06-End-13 ) ;
21382: LD_EXP 38
21386: PPUSH
21387: LD_STRING DO-06-End-13
21389: PPUSH
21390: CALL_OW 88
// if IsOk ( Sophia ) then
21394: LD_EXP 35
21398: PPUSH
21399: CALL_OW 302
21403: IFFALSE 21429
// begin Say ( Sophia , DS-06-End-15 ) ;
21405: LD_EXP 35
21409: PPUSH
21410: LD_STRING DS-06-End-15
21412: PPUSH
21413: CALL_OW 88
// Say ( Kaia , DK-06-End-16 ) ;
21417: LD_EXP 34
21421: PPUSH
21422: LD_STRING DK-06-End-16
21424: PPUSH
21425: CALL_OW 88
// end ; Say ( Givi , DG-06-End-17 ) ;
21429: LD_EXP 30
21433: PPUSH
21434: LD_STRING DG-06-End-17
21436: PPUSH
21437: CALL_OW 88
// Say ( Givi , DG-06-End-18 ) ;
21441: LD_EXP 30
21445: PPUSH
21446: LD_STRING DG-06-End-18
21448: PPUSH
21449: CALL_OW 88
// Say ( Givi , DG-06-End-19 ) ;
21453: LD_EXP 30
21457: PPUSH
21458: LD_STRING DG-06-End-19
21460: PPUSH
21461: CALL_OW 88
// end ;
21465: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
21466: LD_EXP 24
21470: IFFALSE 21598
21472: GO 21474
21474: DISABLE
21475: LD_INT 0
21477: PPUSH
21478: PPUSH
// begin enable ;
21479: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
21480: LD_ADDR_OWVAR 47
21484: PUSH
21485: LD_STRING #X106-2
21487: PUSH
21488: LD_EXP 25
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
21497: LD_ADDR_EXP 25
21501: PUSH
21502: LD_EXP 25
21506: PUSH
21507: LD_INT 35
21509: MINUS
21510: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
21511: LD_ADDR_VAR 0 2
21515: PUSH
21516: LD_INT 17
21518: PPUSH
21519: LD_INT 22
21521: PUSH
21522: LD_INT 2
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 21
21531: PUSH
21532: LD_INT 1
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 23
21541: PUSH
21542: LD_INT 2
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: LIST
21553: PPUSH
21554: CALL_OW 71
21558: ST_TO_ADDR
// if not outsiders then
21559: LD_VAR 0 2
21563: NOT
21564: IFFALSE 21581
// begin escapeAllowed := false ;
21566: LD_ADDR_EXP 24
21570: PUSH
21571: LD_INT 0
21573: ST_TO_ADDR
// disable ;
21574: DISABLE
// MissionWin ;
21575: CALL 21601 0 0
// exit ;
21579: GO 21598
// end ; if escapeTimer <= 0 0$00 then
21581: LD_EXP 25
21585: PUSH
21586: LD_INT 0
21588: LESSEQUAL
21589: IFFALSE 21598
// YouLost ( TimeOut ) ;
21591: LD_STRING TimeOut
21593: PPUSH
21594: CALL_OW 104
// end ;
21598: PPOPN 2
21600: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
21601: LD_INT 0
21603: PPUSH
21604: PPUSH
21605: PPUSH
21606: PPUSH
21607: PPUSH
// Say ( Heike , DH-06-End-20 ) ;
21608: LD_EXP 29
21612: PPUSH
21613: LD_STRING DH-06-End-20
21615: PPUSH
21616: CALL_OW 88
// if rolfDied then
21620: LD_EXP 13
21624: IFFALSE 21639
// AddMedal ( med1 , - 1 ) else
21626: LD_STRING med1
21628: PPUSH
21629: LD_INT 1
21631: NEG
21632: PPUSH
21633: CALL_OW 101
21637: GO 21649
// AddMedal ( med1 , 1 ) ;
21639: LD_STRING med1
21641: PPUSH
21642: LD_INT 1
21644: PPUSH
21645: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
21649: LD_EXP 22
21653: PUSH
21654: LD_EXP 16
21658: AND
21659: IFFALSE 21673
// AddMedal ( med2 , 1 ) else
21661: LD_STRING med2
21663: PPUSH
21664: LD_INT 1
21666: PPUSH
21667: CALL_OW 101
21671: GO 21722
// if omarHasVehicles then
21673: LD_EXP 22
21677: IFFALSE 21692
// AddMedal ( med2 , - 1 ) else
21679: LD_STRING med2
21681: PPUSH
21682: LD_INT 1
21684: NEG
21685: PPUSH
21686: CALL_OW 101
21690: GO 21722
// if rolfHasVehicles then
21692: LD_EXP 16
21696: IFFALSE 21711
// AddMedal ( med2 , - 2 ) else
21698: LD_STRING med2
21700: PPUSH
21701: LD_INT 2
21703: NEG
21704: PPUSH
21705: CALL_OW 101
21709: GO 21722
// AddMedal ( med2 , - 3 ) ;
21711: LD_STRING med2
21713: PPUSH
21714: LD_INT 3
21716: NEG
21717: PPUSH
21718: CALL_OW 101
// if ruLoseCounter >= [ 40 , 55 , 70 ] [ Difficulty ] and heikeLoseCounter = 0 then
21722: LD_EXP 5
21726: PUSH
21727: LD_INT 40
21729: PUSH
21730: LD_INT 55
21732: PUSH
21733: LD_INT 70
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: LIST
21740: PUSH
21741: LD_OWVAR 67
21745: ARRAY
21746: GREATEREQUAL
21747: PUSH
21748: LD_EXP 26
21752: PUSH
21753: LD_INT 0
21755: EQUAL
21756: AND
21757: IFFALSE 21771
// AddMedal ( med3 , 1 ) else
21759: LD_STRING med3
21761: PPUSH
21762: LD_INT 1
21764: PPUSH
21765: CALL_OW 101
21769: GO 21801
// if heikeLoseCounter then
21771: LD_EXP 26
21775: IFFALSE 21790
// AddMedal ( med3 , - 1 ) else
21777: LD_STRING med3
21779: PPUSH
21780: LD_INT 1
21782: NEG
21783: PPUSH
21784: CALL_OW 101
21788: GO 21801
// AddMedal ( med3 , - 2 ) ;
21790: LD_STRING med3
21792: PPUSH
21793: LD_INT 2
21795: NEG
21796: PPUSH
21797: CALL_OW 101
// GiveMedals ( MAIN ) ;
21801: LD_STRING MAIN
21803: PPUSH
21804: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
21808: LD_INT 22
21810: PUSH
21811: LD_INT 2
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 23
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 21
21830: PUSH
21831: LD_INT 1
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: LIST
21842: PPUSH
21843: CALL_OW 69
21847: PPUSH
21848: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
21852: LD_EXP 29
21856: PPUSH
21857: LD_STRING 06_Heike
21859: PPUSH
21860: CALL_OW 38
// if Aviradze then
21864: LD_EXP 41
21868: IFFALSE 21882
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
21870: LD_EXP 41
21874: PPUSH
21875: LD_STRING 06_Aviradze
21877: PPUSH
21878: CALL_OW 38
// if Ibrahim then
21882: LD_EXP 32
21886: IFFALSE 21900
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
21888: LD_EXP 32
21892: PPUSH
21893: LD_STRING 06_Ibrahim
21895: PPUSH
21896: CALL_OW 38
// if Kamil then
21900: LD_EXP 33
21904: IFFALSE 21918
// SaveCharacters ( Kamil , 06_Kamil ) ;
21906: LD_EXP 33
21910: PPUSH
21911: LD_STRING 06_Kamil
21913: PPUSH
21914: CALL_OW 38
// if Sophia then
21918: LD_EXP 35
21922: IFFALSE 21936
// SaveCharacters ( Sophia , 06_Sophia ) ;
21924: LD_EXP 35
21928: PPUSH
21929: LD_STRING 06_Sophia
21931: PPUSH
21932: CALL_OW 38
// if Kaia then
21936: LD_EXP 34
21940: IFFALSE 21954
// SaveCharacters ( Kaia , 06_Kaia ) ;
21942: LD_EXP 34
21946: PPUSH
21947: LD_STRING 06_Kaia
21949: PPUSH
21950: CALL_OW 38
// if Givi then
21954: LD_EXP 30
21958: IFFALSE 21972
// SaveCharacters ( Givi , 06_Givi ) ;
21960: LD_EXP 30
21964: PPUSH
21965: LD_STRING 06_Givi
21967: PPUSH
21968: CALL_OW 38
// if Mike then
21972: LD_EXP 31
21976: IFFALSE 21990
// SaveCharacters ( Mike , 06_Mike ) ;
21978: LD_EXP 31
21982: PPUSH
21983: LD_STRING 06_Mike
21985: PPUSH
21986: CALL_OW 38
// if Markov then
21990: LD_EXP 36
21994: IFFALSE 22008
// SaveCharacters ( Markov , 06_Markov ) ;
21996: LD_EXP 36
22000: PPUSH
22001: LD_STRING 06_Markov
22003: PPUSH
22004: CALL_OW 38
// if Kurt then
22008: LD_EXP 40
22012: IFFALSE 22026
// SaveCharacters ( Kurt , 06_Kurt ) ;
22014: LD_EXP 40
22018: PPUSH
22019: LD_STRING 06_Kurt
22021: PPUSH
22022: CALL_OW 38
// if heikeSecondSquad then
22026: LD_EXP 44
22030: IFFALSE 22044
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
22032: LD_EXP 44
22036: PPUSH
22037: LD_STRING 06_others
22039: PPUSH
22040: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
22044: LD_ADDR_VAR 0 3
22048: PUSH
22049: LD_INT 22
22051: PUSH
22052: LD_INT 2
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 23
22061: PUSH
22062: LD_INT 0
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PPUSH
22073: CALL_OW 69
22077: ST_TO_ADDR
// if tmp then
22078: LD_VAR 0 3
22082: IFFALSE 22096
// SaveCharacters ( tmp , 06_apes ) ;
22084: LD_VAR 0 3
22088: PPUSH
22089: LD_STRING 06_apes
22091: PPUSH
22092: CALL_OW 38
// if Rolf then
22096: LD_EXP 42
22100: IFFALSE 22114
// SaveCharacters ( Rolf , 06_Rolf ) ;
22102: LD_EXP 42
22106: PPUSH
22107: LD_STRING 06_Rolf
22109: PPUSH
22110: CALL_OW 38
// tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
22114: LD_ADDR_VAR 0 3
22118: PUSH
22119: LD_INT 17
22121: PPUSH
22122: LD_INT 21
22124: PUSH
22125: LD_INT 2
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PPUSH
22132: CALL_OW 70
22136: ST_TO_ADDR
// if tmp then
22137: LD_VAR 0 3
22141: IFFALSE 22435
// begin tmp2 := [ ] ;
22143: LD_ADDR_VAR 0 4
22147: PUSH
22148: EMPTY
22149: ST_TO_ADDR
// for i in tmp do
22150: LD_ADDR_VAR 0 2
22154: PUSH
22155: LD_VAR 0 3
22159: PUSH
22160: FOR_IN
22161: IFFALSE 22421
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
22163: LD_VAR 0 2
22167: PPUSH
22168: CALL_OW 264
22172: PUSH
22173: LD_INT 32
22175: PUSH
22176: LD_INT 12
22178: PUSH
22179: LD_INT 51
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: LIST
22186: IN
22187: IFFALSE 22324
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
22189: LD_ADDR_VAR 0 5
22193: PUSH
22194: LD_VAR 0 2
22198: PPUSH
22199: LD_INT 1
22201: PPUSH
22202: CALL_OW 289
22206: PUSH
22207: LD_VAR 0 2
22211: PPUSH
22212: LD_INT 2
22214: PPUSH
22215: CALL_OW 289
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
22224: LD_ADDR_VAR 0 4
22228: PUSH
22229: LD_VAR 0 4
22233: PPUSH
22234: LD_VAR 0 4
22238: PUSH
22239: LD_INT 1
22241: PLUS
22242: PPUSH
22243: LD_VAR 0 2
22247: PPUSH
22248: CALL_OW 265
22252: PUSH
22253: LD_VAR 0 2
22257: PPUSH
22258: CALL_OW 262
22262: PUSH
22263: LD_VAR 0 2
22267: PPUSH
22268: CALL_OW 263
22272: PUSH
22273: LD_VAR 0 2
22277: PPUSH
22278: CALL_OW 264
22282: PUSH
22283: LD_VAR 0 2
22287: PPUSH
22288: CALL_OW 248
22292: PUSH
22293: LD_VAR 0 2
22297: PPUSH
22298: CALL_OW 256
22302: PUSH
22303: LD_VAR 0 5
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: PPUSH
22317: CALL_OW 1
22321: ST_TO_ADDR
// end else
22322: GO 22419
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
22324: LD_ADDR_VAR 0 4
22328: PUSH
22329: LD_VAR 0 4
22333: PPUSH
22334: LD_VAR 0 4
22338: PUSH
22339: LD_INT 1
22341: PLUS
22342: PPUSH
22343: LD_VAR 0 2
22347: PPUSH
22348: CALL_OW 265
22352: PUSH
22353: LD_VAR 0 2
22357: PPUSH
22358: CALL_OW 262
22362: PUSH
22363: LD_VAR 0 2
22367: PPUSH
22368: CALL_OW 263
22372: PUSH
22373: LD_VAR 0 2
22377: PPUSH
22378: CALL_OW 264
22382: PUSH
22383: LD_VAR 0 2
22387: PPUSH
22388: CALL_OW 248
22392: PUSH
22393: LD_VAR 0 2
22397: PPUSH
22398: CALL_OW 256
22402: PUSH
22403: EMPTY
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: PPUSH
22414: CALL_OW 1
22418: ST_TO_ADDR
22419: GO 22160
22421: POP
22422: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
22423: LD_VAR 0 4
22427: PPUSH
22428: LD_STRING 06_Vehicles
22430: PPUSH
22431: CALL_OW 39
// end ; YouWin ;
22435: CALL_OW 103
// end ; end_of_file
22439: LD_VAR 0 1
22443: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
22444: LD_INT 0
22446: PPUSH
// begin if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
22447: LD_VAR 0 1
22451: PPUSH
22452: CALL_OW 255
22456: PUSH
22457: LD_INT 2
22459: EQUAL
22460: PUSH
22461: LD_OWVAR 52
22465: AND
22466: PUSH
22467: LD_VAR 0 1
22471: PPUSH
22472: CALL_OW 263
22476: PUSH
22477: LD_INT 1
22479: EQUAL
22480: AND
22481: IFFALSE 22536
// begin driver := IsDrivenBy ( vehicle ) ;
22483: LD_ADDR_VAR 0 3
22487: PUSH
22488: LD_VAR 0 1
22492: PPUSH
22493: CALL_OW 311
22497: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
22498: LD_VAR 0 1
22502: PPUSH
22503: LD_INT 211
22505: PPUSH
22506: LD_INT 101
22508: PPUSH
22509: CALL_OW 111
// AddComExitVehicle ( driver ) ;
22513: LD_VAR 0 3
22517: PPUSH
22518: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22522: LD_VAR 0 3
22526: PPUSH
22527: LD_VAR 0 2
22531: PPUSH
22532: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
22536: LD_VAR 0 1
22540: PPUSH
22541: CALL_OW 255
22545: PUSH
22546: LD_INT 3
22548: EQUAL
22549: IFFALSE 22580
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
22551: LD_ADDR_EXP 55
22555: PUSH
22556: LD_EXP 55
22560: PPUSH
22561: LD_EXP 55
22565: PUSH
22566: LD_INT 1
22568: PLUS
22569: PPUSH
22570: LD_VAR 0 1
22574: PPUSH
22575: CALL_OW 1
22579: ST_TO_ADDR
// end ;
22580: PPOPN 3
22582: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
22583: LD_VAR 0 1
22587: PPUSH
22588: CALL_OW 255
22592: PUSH
22593: LD_INT 8
22595: EQUAL
22596: PUSH
22597: LD_VAR 0 1
22601: PPUSH
22602: CALL_OW 266
22606: PUSH
22607: LD_INT 4
22609: EQUAL
22610: AND
22611: IFFALSE 22622
// ComUpgrade ( b ) ;
22613: LD_VAR 0 1
22617: PPUSH
22618: CALL_OW 146
// end ;
22622: PPOPN 1
22624: END
// on UnitDestroyed ( un ) do begin if un = Heike then
22625: LD_VAR 0 1
22629: PUSH
22630: LD_EXP 29
22634: EQUAL
22635: IFFALSE 22644
// YouLost ( Heike ) ;
22637: LD_STRING Heike
22639: PPUSH
22640: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
22644: LD_VAR 0 1
22648: PUSH
22649: LD_INT 22
22651: PUSH
22652: LD_INT 2
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 23
22661: PUSH
22662: LD_INT 2
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PPUSH
22673: CALL_OW 69
22677: IN
22678: IFFALSE 22694
// heikeLoseCounter := heikeLoseCounter + 1 ;
22680: LD_ADDR_EXP 26
22684: PUSH
22685: LD_EXP 26
22689: PUSH
22690: LD_INT 1
22692: PLUS
22693: ST_TO_ADDR
// if un = arDepot then
22694: LD_VAR 0 1
22698: PUSH
22699: LD_EXP 43
22703: EQUAL
22704: IFFALSE 22713
// YouLost ( Base ) ;
22706: LD_STRING Base
22708: PPUSH
22709: CALL_OW 104
// if un = Rolf then
22713: LD_VAR 0 1
22717: PUSH
22718: LD_EXP 42
22722: EQUAL
22723: IFFALSE 22733
// rolfDied := true ;
22725: LD_ADDR_EXP 13
22729: PUSH
22730: LD_INT 1
22732: ST_TO_ADDR
// if un in rolfSquad then
22733: LD_VAR 0 1
22737: PUSH
22738: LD_EXP 46
22742: IN
22743: IFFALSE 22761
// rolfSquad := rolfSquad diff un ;
22745: LD_ADDR_EXP 46
22749: PUSH
22750: LD_EXP 46
22754: PUSH
22755: LD_VAR 0 1
22759: DIFF
22760: ST_TO_ADDR
// if un in omarSquad then
22761: LD_VAR 0 1
22765: PUSH
22766: LD_EXP 47
22770: IN
22771: IFFALSE 22789
// omarSquad := omarSquad diff un ;
22773: LD_ADDR_EXP 47
22777: PUSH
22778: LD_EXP 47
22782: PUSH
22783: LD_VAR 0 1
22787: DIFF
22788: ST_TO_ADDR
// if GetSide ( un ) = 3 then
22789: LD_VAR 0 1
22793: PPUSH
22794: CALL_OW 255
22798: PUSH
22799: LD_INT 3
22801: EQUAL
22802: IFFALSE 22818
// ruLoseCounter := ruLoseCounter + 1 ;
22804: LD_ADDR_EXP 5
22808: PUSH
22809: LD_EXP 5
22813: PUSH
22814: LD_INT 1
22816: PLUS
22817: ST_TO_ADDR
// if un in ruAttackers then
22818: LD_VAR 0 1
22822: PUSH
22823: LD_EXP 56
22827: IN
22828: IFFALSE 22846
// ruAttackers := ruAttackers diff un ;
22830: LD_ADDR_EXP 56
22834: PUSH
22835: LD_EXP 56
22839: PUSH
22840: LD_VAR 0 1
22844: DIFF
22845: ST_TO_ADDR
// end ;
22846: PPOPN 1
22848: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
22849: LD_INT 0
22851: PPUSH
22852: PPUSH
22853: PPUSH
22854: PPUSH
// begin if GetSide ( un ) = 3 and not un in ruAttackers then
22855: LD_VAR 0 1
22859: PPUSH
22860: CALL_OW 255
22864: PUSH
22865: LD_INT 3
22867: EQUAL
22868: PUSH
22869: LD_VAR 0 1
22873: PUSH
22874: LD_EXP 56
22878: IN
22879: NOT
22880: AND
22881: IFFALSE 23377
// begin if not IsInArea ( un , ruMainBase ) then
22883: LD_VAR 0 1
22887: PPUSH
22888: LD_INT 10
22890: PPUSH
22891: CALL_OW 308
22895: NOT
22896: IFFALSE 22910
// ComMoveToArea ( un , ruMainBase ) ;
22898: LD_VAR 0 1
22902: PPUSH
22903: LD_INT 10
22905: PPUSH
22906: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
22910: LD_INT 35
22912: PPUSH
22913: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
22917: LD_VAR 0 1
22921: PPUSH
22922: CALL_OW 302
22926: NOT
22927: PUSH
22928: LD_VAR 0 1
22932: PPUSH
22933: LD_INT 10
22935: PPUSH
22936: CALL_OW 308
22940: OR
22941: IFFALSE 22910
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
22943: LD_ADDR_EXP 54
22947: PUSH
22948: LD_EXP 54
22952: PPUSH
22953: LD_EXP 54
22957: PUSH
22958: LD_INT 1
22960: PLUS
22961: PPUSH
22962: LD_VAR 0 1
22966: PPUSH
22967: CALL_OW 1
22971: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
22972: LD_ADDR_VAR 0 8
22976: PUSH
22977: LD_INT 72
22979: PUSH
22980: LD_INT 12
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: ST_TO_ADDR
// if tmp then
22987: LD_VAR 0 8
22991: IFFALSE 23106
// for i in tmp do
22993: LD_ADDR_VAR 0 5
22997: PUSH
22998: LD_VAR 0 8
23002: PUSH
23003: FOR_IN
23004: IFFALSE 23104
// if UnitsInside ( i ) < 6 then
23006: LD_VAR 0 5
23010: PPUSH
23011: CALL_OW 313
23015: PUSH
23016: LD_INT 6
23018: LESS
23019: IFFALSE 23102
// begin AddComEnterUnit ( un , i ) ;
23021: LD_VAR 0 1
23025: PPUSH
23026: LD_VAR 0 5
23030: PPUSH
23031: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
23035: LD_VAR 0 8
23039: PPUSH
23040: LD_INT 22
23042: PUSH
23043: LD_INT 23
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 1
23052: PPUSH
23053: LD_INT 2
23055: PPUSH
23056: CALL_OW 12
23060: ARRAY
23061: PPUSH
23062: LD_INT 1
23064: PPUSH
23065: LD_INT 1
23067: PPUSH
23068: LD_INT 44
23070: PUSH
23071: LD_INT 46
23073: PUSH
23074: LD_INT 47
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 1
23084: PPUSH
23085: LD_INT 3
23087: PPUSH
23088: CALL_OW 12
23092: ARRAY
23093: PPUSH
23094: CALL_OW 185
// exit ;
23098: POP
23099: POP
23100: GO 23377
// end ;
23102: GO 23003
23104: POP
23105: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23106: LD_ADDR_VAR 0 8
23110: PUSH
23111: LD_INT 10
23113: PPUSH
23114: LD_INT 22
23116: PUSH
23117: LD_INT 3
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 50
23126: PUSH
23127: EMPTY
23128: LIST
23129: PUSH
23130: LD_INT 2
23132: PUSH
23133: LD_INT 30
23135: PUSH
23136: LD_INT 4
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 30
23145: PUSH
23146: LD_INT 5
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 30
23155: PUSH
23156: LD_INT 32
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 30
23165: PUSH
23166: LD_INT 31
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: LIST
23184: PPUSH
23185: CALL_OW 70
23189: ST_TO_ADDR
// if not tmp then
23190: LD_VAR 0 8
23194: NOT
23195: IFFALSE 23214
// begin ComMoveXY ( un , 83 , 133 ) ;
23197: LD_VAR 0 1
23201: PPUSH
23202: LD_INT 83
23204: PPUSH
23205: LD_INT 133
23207: PPUSH
23208: CALL_OW 111
// exit ;
23212: GO 23377
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
23214: LD_ADDR_VAR 0 6
23218: PUSH
23219: LD_VAR 0 1
23223: PPUSH
23224: LD_VAR 0 8
23228: PPUSH
23229: LD_INT 1
23231: PPUSH
23232: LD_INT 1
23234: PPUSH
23235: CALL 29895 0 4
23239: PUSH
23240: FOR_IN
23241: IFFALSE 23375
// begin case GetBType ( b ) of b_armoury , b_barracks :
23243: LD_VAR 0 6
23247: PPUSH
23248: CALL_OW 266
23252: PUSH
23253: LD_INT 4
23255: DOUBLE
23256: EQUAL
23257: IFTRUE 23267
23259: LD_INT 5
23261: DOUBLE
23262: EQUAL
23263: IFTRUE 23267
23265: GO 23278
23267: POP
// p := 6 ; b_breastwork , b_bunker :
23268: LD_ADDR_VAR 0 7
23272: PUSH
23273: LD_INT 6
23275: ST_TO_ADDR
23276: GO 23304
23278: LD_INT 31
23280: DOUBLE
23281: EQUAL
23282: IFTRUE 23292
23284: LD_INT 32
23286: DOUBLE
23287: EQUAL
23288: IFTRUE 23292
23290: GO 23303
23292: POP
// p := 1 ; end ;
23293: LD_ADDR_VAR 0 7
23297: PUSH
23298: LD_INT 1
23300: ST_TO_ADDR
23301: GO 23304
23303: POP
// if UnitsInside ( b ) < p then
23304: LD_VAR 0 6
23308: PPUSH
23309: CALL_OW 313
23313: PUSH
23314: LD_VAR 0 7
23318: LESS
23319: IFFALSE 23373
// begin ComEnterUnit ( un , b ) ;
23321: LD_VAR 0 1
23325: PPUSH
23326: LD_VAR 0 6
23330: PPUSH
23331: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
23335: LD_VAR 0 6
23339: PPUSH
23340: CALL_OW 266
23344: PUSH
23345: LD_INT 4
23347: PUSH
23348: LD_INT 5
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: IN
23355: IFFALSE 23369
// AddComChangeProfession ( un , class_soldier ) ;
23357: LD_VAR 0 1
23361: PPUSH
23362: LD_INT 1
23364: PPUSH
23365: CALL_OW 183
// exit ;
23369: POP
23370: POP
23371: GO 23377
// end ; end ;
23373: GO 23240
23375: POP
23376: POP
// end ; end ;
23377: PPOPN 8
23379: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
23380: LD_INT 0
23382: PPUSH
23383: PPUSH
23384: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
23385: LD_VAR 0 2
23389: PPUSH
23390: CALL_OW 255
23394: PUSH
23395: LD_INT 3
23397: EQUAL
23398: PUSH
23399: LD_VAR 0 2
23403: PPUSH
23404: CALL_OW 257
23408: PUSH
23409: LD_INT 1
23411: EQUAL
23412: AND
23413: PUSH
23414: LD_VAR 0 2
23418: PUSH
23419: LD_EXP 54
23423: IN
23424: NOT
23425: AND
23426: IFFALSE 23739
// begin ComMoveToArea ( un , ruMainBase ) ;
23428: LD_VAR 0 2
23432: PPUSH
23433: LD_INT 10
23435: PPUSH
23436: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
23440: LD_INT 35
23442: PPUSH
23443: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
23447: LD_VAR 0 2
23451: PPUSH
23452: CALL_OW 302
23456: NOT
23457: PUSH
23458: LD_VAR 0 2
23462: PPUSH
23463: LD_INT 10
23465: PPUSH
23466: CALL_OW 308
23470: OR
23471: IFFALSE 23440
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
23473: LD_ADDR_EXP 54
23477: PUSH
23478: LD_EXP 54
23482: PPUSH
23483: LD_EXP 54
23487: PUSH
23488: LD_INT 1
23490: PLUS
23491: PPUSH
23492: LD_VAR 0 2
23496: PPUSH
23497: CALL_OW 1
23501: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23502: LD_ADDR_VAR 0 4
23506: PUSH
23507: LD_INT 10
23509: PPUSH
23510: LD_INT 22
23512: PUSH
23513: LD_INT 3
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 50
23522: PUSH
23523: EMPTY
23524: LIST
23525: PUSH
23526: LD_INT 2
23528: PUSH
23529: LD_INT 30
23531: PUSH
23532: LD_INT 4
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 30
23541: PUSH
23542: LD_INT 5
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 30
23551: PUSH
23552: LD_INT 32
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 30
23561: PUSH
23562: LD_INT 31
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: LIST
23580: PPUSH
23581: CALL_OW 70
23585: ST_TO_ADDR
// if not tmp then
23586: LD_VAR 0 4
23590: NOT
23591: IFFALSE 23610
// begin ComMoveXY ( un , 83 , 133 ) ;
23593: LD_VAR 0 2
23597: PPUSH
23598: LD_INT 83
23600: PPUSH
23601: LD_INT 133
23603: PPUSH
23604: CALL_OW 111
// exit ;
23608: GO 23988
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
23610: LD_ADDR_VAR 0 5
23614: PUSH
23615: LD_VAR 0 2
23619: PPUSH
23620: LD_VAR 0 4
23624: PPUSH
23625: LD_INT 1
23627: PPUSH
23628: LD_INT 1
23630: PPUSH
23631: CALL 29895 0 4
23635: PUSH
23636: FOR_IN
23637: IFFALSE 23737
// begin case GetBType ( b ) of b_armoury , b_barracks :
23639: LD_VAR 0 5
23643: PPUSH
23644: CALL_OW 266
23648: PUSH
23649: LD_INT 4
23651: DOUBLE
23652: EQUAL
23653: IFTRUE 23663
23655: LD_INT 5
23657: DOUBLE
23658: EQUAL
23659: IFTRUE 23663
23661: GO 23674
23663: POP
// p := 6 ; b_breastwork , b_bunker :
23664: LD_ADDR_VAR 0 3
23668: PUSH
23669: LD_INT 6
23671: ST_TO_ADDR
23672: GO 23700
23674: LD_INT 31
23676: DOUBLE
23677: EQUAL
23678: IFTRUE 23688
23680: LD_INT 32
23682: DOUBLE
23683: EQUAL
23684: IFTRUE 23688
23686: GO 23699
23688: POP
// p := 1 ; end ;
23689: LD_ADDR_VAR 0 3
23693: PUSH
23694: LD_INT 1
23696: ST_TO_ADDR
23697: GO 23700
23699: POP
// if UnitsInside ( b ) < p then
23700: LD_VAR 0 5
23704: PPUSH
23705: CALL_OW 313
23709: PUSH
23710: LD_VAR 0 3
23714: LESS
23715: IFFALSE 23735
// begin ComEnterUnit ( un , b ) ;
23717: LD_VAR 0 2
23721: PPUSH
23722: LD_VAR 0 5
23726: PPUSH
23727: CALL_OW 120
// exit ;
23731: POP
23732: POP
23733: GO 23988
// end ; end ;
23735: GO 23636
23737: POP
23738: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
23739: LD_VAR 0 2
23743: PUSH
23744: LD_EXP 54
23748: IN
23749: PUSH
23750: LD_VAR 0 2
23754: PPUSH
23755: CALL_OW 257
23759: PUSH
23760: LD_INT 1
23762: EQUAL
23763: AND
23764: IFFALSE 23988
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23766: LD_ADDR_VAR 0 4
23770: PUSH
23771: LD_INT 10
23773: PPUSH
23774: LD_INT 22
23776: PUSH
23777: LD_INT 3
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 50
23786: PUSH
23787: EMPTY
23788: LIST
23789: PUSH
23790: LD_INT 2
23792: PUSH
23793: LD_INT 30
23795: PUSH
23796: LD_INT 4
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 30
23805: PUSH
23806: LD_INT 5
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 30
23815: PUSH
23816: LD_INT 32
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 30
23825: PUSH
23826: LD_INT 31
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: LIST
23844: PPUSH
23845: CALL_OW 70
23849: ST_TO_ADDR
// if not tmp then
23850: LD_VAR 0 4
23854: NOT
23855: IFFALSE 23859
// exit ;
23857: GO 23988
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
23859: LD_ADDR_VAR 0 5
23863: PUSH
23864: LD_VAR 0 2
23868: PPUSH
23869: LD_VAR 0 4
23873: PPUSH
23874: LD_INT 1
23876: PPUSH
23877: LD_INT 1
23879: PPUSH
23880: CALL 29895 0 4
23884: PUSH
23885: FOR_IN
23886: IFFALSE 23986
// begin case GetBType ( b ) of b_armoury , b_barracks :
23888: LD_VAR 0 5
23892: PPUSH
23893: CALL_OW 266
23897: PUSH
23898: LD_INT 4
23900: DOUBLE
23901: EQUAL
23902: IFTRUE 23912
23904: LD_INT 5
23906: DOUBLE
23907: EQUAL
23908: IFTRUE 23912
23910: GO 23923
23912: POP
// p := 6 ; b_breastwork , b_bunker :
23913: LD_ADDR_VAR 0 3
23917: PUSH
23918: LD_INT 6
23920: ST_TO_ADDR
23921: GO 23949
23923: LD_INT 31
23925: DOUBLE
23926: EQUAL
23927: IFTRUE 23937
23929: LD_INT 32
23931: DOUBLE
23932: EQUAL
23933: IFTRUE 23937
23935: GO 23948
23937: POP
// p := 1 ; end ;
23938: LD_ADDR_VAR 0 3
23942: PUSH
23943: LD_INT 1
23945: ST_TO_ADDR
23946: GO 23949
23948: POP
// if UnitsInside ( b ) < p then
23949: LD_VAR 0 5
23953: PPUSH
23954: CALL_OW 313
23958: PUSH
23959: LD_VAR 0 3
23963: LESS
23964: IFFALSE 23984
// begin ComEnterUnit ( un , b ) ;
23966: LD_VAR 0 2
23970: PPUSH
23971: LD_VAR 0 5
23975: PPUSH
23976: CALL_OW 120
// exit ;
23980: POP
23981: POP
23982: GO 23988
// end ; end ;
23984: GO 23885
23986: POP
23987: POP
// end ; end ;
23988: PPOPN 5
23990: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
23991: LD_VAR 0 1
23995: PUSH
23996: LD_INT 2
23998: EQUAL
23999: PUSH
24000: LD_VAR 0 2
24004: PUSH
24005: LD_INT 5
24007: PUSH
24008: LD_INT 8
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: IN
24015: AND
24016: IFFALSE 24025
// YouLost ( FriendlyFire ) ;
24018: LD_STRING FriendlyFire
24020: PPUSH
24021: CALL_OW 104
// end ;
24025: PPOPN 2
24027: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
24028: LD_VAR 0 1
24032: PPUSH
24033: CALL_OW 255
24037: PUSH
24038: LD_INT 8
24040: EQUAL
24041: PUSH
24042: LD_VAR 0 1
24046: PPUSH
24047: CALL_OW 266
24051: PUSH
24052: LD_INT 5
24054: EQUAL
24055: AND
24056: IFFALSE 24070
// SetClass ( unit , class_mortar ) ;
24058: LD_VAR 0 2
24062: PPUSH
24063: LD_INT 8
24065: PPUSH
24066: CALL_OW 336
// end ; end_of_file
24070: PPOPN 2
24072: END
// every 0 0$30 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 ] [ Difficulty ] do
24073: LD_INT 6
24075: PPUSH
24076: LD_INT 1
24078: PPUSH
24079: CALL_OW 287
24083: PUSH
24084: LD_INT 300
24086: PUSH
24087: LD_INT 250
24089: PUSH
24090: LD_INT 200
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: LIST
24097: PUSH
24098: LD_OWVAR 67
24102: ARRAY
24103: LESS
24104: IFFALSE 24131
24106: GO 24108
24108: DISABLE
// begin enable ;
24109: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
24110: LD_INT 1
24112: PPUSH
24113: LD_INT 5
24115: PPUSH
24116: CALL_OW 12
24120: PPUSH
24121: LD_INT 6
24123: PPUSH
24124: LD_INT 1
24126: PPUSH
24127: CALL_OW 55
// end ; end_of_file
24131: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
24132: LD_EXP 18
24136: PUSH
24137: LD_EXP 20
24141: AND
24142: PUSH
24143: LD_EXP 17
24147: PUSH
24148: LD_EXP 19
24152: AND
24153: OR
24154: IFFALSE 24473
24156: GO 24158
24158: DISABLE
// begin enable ;
24159: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
24160: LD_EXP 18
24164: PUSH
24165: LD_EXP 20
24169: AND
24170: PUSH
24171: LD_EXP 17
24175: PUSH
24176: LD_EXP 19
24180: AND
24181: AND
24182: IFFALSE 24319
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
24184: LD_ADDR_OWVAR 47
24188: PUSH
24189: LD_STRING #X106-1a
24191: PUSH
24192: LD_EXP 21
24196: PUSH
24197: LD_INT 16
24199: PPUSH
24200: LD_INT 22
24202: PUSH
24203: LD_INT 2
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 21
24212: PUSH
24213: LD_INT 2
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 33
24222: PUSH
24223: LD_INT 1
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 58
24232: PUSH
24233: EMPTY
24234: LIST
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: PPUSH
24242: CALL_OW 70
24246: MINUS
24247: PPUSH
24248: CALL 63189 0 1
24252: PUSH
24253: LD_STRING #X106-3a
24255: PUSH
24256: LD_EXP 20
24260: PUSH
24261: LD_STRING #X106-1
24263: PUSH
24264: LD_EXP 46
24268: PUSH
24269: LD_INT 0
24271: PLUS
24272: PUSH
24273: LD_EXP 46
24277: PPUSH
24278: LD_INT 55
24280: PUSH
24281: EMPTY
24282: LIST
24283: PPUSH
24284: CALL_OW 72
24288: PUSH
24289: LD_INT 0
24291: PLUS
24292: MINUS
24293: PPUSH
24294: CALL 63189 0 1
24298: PUSH
24299: LD_STRING #X106-3
24301: PUSH
24302: LD_EXP 19
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: ST_TO_ADDR
// end else
24317: GO 24473
// if omarWantVehicles and omarWaitingForVehiclesTimer then
24319: LD_EXP 18
24323: PUSH
24324: LD_EXP 20
24328: AND
24329: IFFALSE 24416
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
24331: LD_ADDR_OWVAR 47
24335: PUSH
24336: LD_STRING #X106-1a
24338: PUSH
24339: LD_EXP 21
24343: PUSH
24344: LD_INT 16
24346: PPUSH
24347: LD_INT 22
24349: PUSH
24350: LD_INT 2
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 21
24359: PUSH
24360: LD_INT 2
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 33
24369: PUSH
24370: LD_INT 1
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 58
24379: PUSH
24380: EMPTY
24381: LIST
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: PPUSH
24389: CALL_OW 70
24393: MINUS
24394: PPUSH
24395: CALL 63189 0 1
24399: PUSH
24400: LD_STRING #X106-3a
24402: PUSH
24403: LD_EXP 20
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: ST_TO_ADDR
// end else
24414: GO 24473
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
24416: LD_ADDR_OWVAR 47
24420: PUSH
24421: LD_STRING #X106-1
24423: PUSH
24424: LD_EXP 46
24428: PUSH
24429: LD_INT 0
24431: PLUS
24432: PUSH
24433: LD_EXP 46
24437: PPUSH
24438: LD_INT 55
24440: PUSH
24441: EMPTY
24442: LIST
24443: PPUSH
24444: CALL_OW 72
24448: PUSH
24449: LD_INT 0
24451: PLUS
24452: MINUS
24453: PPUSH
24454: CALL 63189 0 1
24458: PUSH
24459: LD_STRING #X106-3
24461: PUSH
24462: LD_EXP 19
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: ST_TO_ADDR
// end ; end ; end_of_file
24473: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24474: LD_INT 0
24476: PPUSH
24477: PPUSH
// if exist_mode then
24478: LD_VAR 0 2
24482: IFFALSE 24507
// unit := CreateCharacter ( prefix & ident ) else
24484: LD_ADDR_VAR 0 5
24488: PUSH
24489: LD_VAR 0 3
24493: PUSH
24494: LD_VAR 0 1
24498: STR
24499: PPUSH
24500: CALL_OW 34
24504: ST_TO_ADDR
24505: GO 24522
// unit := NewCharacter ( ident ) ;
24507: LD_ADDR_VAR 0 5
24511: PUSH
24512: LD_VAR 0 1
24516: PPUSH
24517: CALL_OW 25
24521: ST_TO_ADDR
// result := unit ;
24522: LD_ADDR_VAR 0 4
24526: PUSH
24527: LD_VAR 0 5
24531: ST_TO_ADDR
// end ;
24532: LD_VAR 0 4
24536: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24537: LD_INT 0
24539: PPUSH
24540: PPUSH
// if not side or not nation then
24541: LD_VAR 0 1
24545: NOT
24546: PUSH
24547: LD_VAR 0 2
24551: NOT
24552: OR
24553: IFFALSE 24557
// exit ;
24555: GO 25325
// case nation of nation_american :
24557: LD_VAR 0 2
24561: PUSH
24562: LD_INT 1
24564: DOUBLE
24565: EQUAL
24566: IFTRUE 24570
24568: GO 24784
24570: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24571: LD_ADDR_VAR 0 4
24575: PUSH
24576: LD_INT 35
24578: PUSH
24579: LD_INT 45
24581: PUSH
24582: LD_INT 46
24584: PUSH
24585: LD_INT 47
24587: PUSH
24588: LD_INT 82
24590: PUSH
24591: LD_INT 83
24593: PUSH
24594: LD_INT 84
24596: PUSH
24597: LD_INT 85
24599: PUSH
24600: LD_INT 86
24602: PUSH
24603: LD_INT 1
24605: PUSH
24606: LD_INT 2
24608: PUSH
24609: LD_INT 6
24611: PUSH
24612: LD_INT 15
24614: PUSH
24615: LD_INT 16
24617: PUSH
24618: LD_INT 7
24620: PUSH
24621: LD_INT 12
24623: PUSH
24624: LD_INT 13
24626: PUSH
24627: LD_INT 10
24629: PUSH
24630: LD_INT 14
24632: PUSH
24633: LD_INT 20
24635: PUSH
24636: LD_INT 21
24638: PUSH
24639: LD_INT 22
24641: PUSH
24642: LD_INT 25
24644: PUSH
24645: LD_INT 32
24647: PUSH
24648: LD_INT 27
24650: PUSH
24651: LD_INT 36
24653: PUSH
24654: LD_INT 69
24656: PUSH
24657: LD_INT 39
24659: PUSH
24660: LD_INT 34
24662: PUSH
24663: LD_INT 40
24665: PUSH
24666: LD_INT 48
24668: PUSH
24669: LD_INT 49
24671: PUSH
24672: LD_INT 50
24674: PUSH
24675: LD_INT 51
24677: PUSH
24678: LD_INT 52
24680: PUSH
24681: LD_INT 53
24683: PUSH
24684: LD_INT 54
24686: PUSH
24687: LD_INT 55
24689: PUSH
24690: LD_INT 56
24692: PUSH
24693: LD_INT 57
24695: PUSH
24696: LD_INT 58
24698: PUSH
24699: LD_INT 59
24701: PUSH
24702: LD_INT 60
24704: PUSH
24705: LD_INT 61
24707: PUSH
24708: LD_INT 62
24710: PUSH
24711: LD_INT 80
24713: PUSH
24714: LD_INT 82
24716: PUSH
24717: LD_INT 83
24719: PUSH
24720: LD_INT 84
24722: PUSH
24723: LD_INT 85
24725: PUSH
24726: LD_INT 86
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: ST_TO_ADDR
24782: GO 25249
24784: LD_INT 2
24786: DOUBLE
24787: EQUAL
24788: IFTRUE 24792
24790: GO 25018
24792: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24793: LD_ADDR_VAR 0 4
24797: PUSH
24798: LD_INT 35
24800: PUSH
24801: LD_INT 45
24803: PUSH
24804: LD_INT 46
24806: PUSH
24807: LD_INT 47
24809: PUSH
24810: LD_INT 82
24812: PUSH
24813: LD_INT 83
24815: PUSH
24816: LD_INT 84
24818: PUSH
24819: LD_INT 85
24821: PUSH
24822: LD_INT 87
24824: PUSH
24825: LD_INT 70
24827: PUSH
24828: LD_INT 1
24830: PUSH
24831: LD_INT 11
24833: PUSH
24834: LD_INT 3
24836: PUSH
24837: LD_INT 4
24839: PUSH
24840: LD_INT 5
24842: PUSH
24843: LD_INT 6
24845: PUSH
24846: LD_INT 15
24848: PUSH
24849: LD_INT 18
24851: PUSH
24852: LD_INT 7
24854: PUSH
24855: LD_INT 17
24857: PUSH
24858: LD_INT 8
24860: PUSH
24861: LD_INT 20
24863: PUSH
24864: LD_INT 21
24866: PUSH
24867: LD_INT 22
24869: PUSH
24870: LD_INT 72
24872: PUSH
24873: LD_INT 26
24875: PUSH
24876: LD_INT 69
24878: PUSH
24879: LD_INT 39
24881: PUSH
24882: LD_INT 40
24884: PUSH
24885: LD_INT 41
24887: PUSH
24888: LD_INT 42
24890: PUSH
24891: LD_INT 43
24893: PUSH
24894: LD_INT 48
24896: PUSH
24897: LD_INT 49
24899: PUSH
24900: LD_INT 50
24902: PUSH
24903: LD_INT 51
24905: PUSH
24906: LD_INT 52
24908: PUSH
24909: LD_INT 53
24911: PUSH
24912: LD_INT 54
24914: PUSH
24915: LD_INT 55
24917: PUSH
24918: LD_INT 56
24920: PUSH
24921: LD_INT 60
24923: PUSH
24924: LD_INT 61
24926: PUSH
24927: LD_INT 62
24929: PUSH
24930: LD_INT 66
24932: PUSH
24933: LD_INT 67
24935: PUSH
24936: LD_INT 68
24938: PUSH
24939: LD_INT 81
24941: PUSH
24942: LD_INT 82
24944: PUSH
24945: LD_INT 83
24947: PUSH
24948: LD_INT 84
24950: PUSH
24951: LD_INT 85
24953: PUSH
24954: LD_INT 87
24956: PUSH
24957: LD_INT 88
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: ST_TO_ADDR
25016: GO 25249
25018: LD_INT 3
25020: DOUBLE
25021: EQUAL
25022: IFTRUE 25026
25024: GO 25248
25026: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25027: LD_ADDR_VAR 0 4
25031: PUSH
25032: LD_INT 46
25034: PUSH
25035: LD_INT 47
25037: PUSH
25038: LD_INT 1
25040: PUSH
25041: LD_INT 2
25043: PUSH
25044: LD_INT 82
25046: PUSH
25047: LD_INT 83
25049: PUSH
25050: LD_INT 84
25052: PUSH
25053: LD_INT 85
25055: PUSH
25056: LD_INT 86
25058: PUSH
25059: LD_INT 11
25061: PUSH
25062: LD_INT 9
25064: PUSH
25065: LD_INT 20
25067: PUSH
25068: LD_INT 19
25070: PUSH
25071: LD_INT 21
25073: PUSH
25074: LD_INT 24
25076: PUSH
25077: LD_INT 22
25079: PUSH
25080: LD_INT 25
25082: PUSH
25083: LD_INT 28
25085: PUSH
25086: LD_INT 29
25088: PUSH
25089: LD_INT 30
25091: PUSH
25092: LD_INT 31
25094: PUSH
25095: LD_INT 37
25097: PUSH
25098: LD_INT 38
25100: PUSH
25101: LD_INT 32
25103: PUSH
25104: LD_INT 27
25106: PUSH
25107: LD_INT 33
25109: PUSH
25110: LD_INT 69
25112: PUSH
25113: LD_INT 39
25115: PUSH
25116: LD_INT 34
25118: PUSH
25119: LD_INT 40
25121: PUSH
25122: LD_INT 71
25124: PUSH
25125: LD_INT 23
25127: PUSH
25128: LD_INT 44
25130: PUSH
25131: LD_INT 48
25133: PUSH
25134: LD_INT 49
25136: PUSH
25137: LD_INT 50
25139: PUSH
25140: LD_INT 51
25142: PUSH
25143: LD_INT 52
25145: PUSH
25146: LD_INT 53
25148: PUSH
25149: LD_INT 54
25151: PUSH
25152: LD_INT 55
25154: PUSH
25155: LD_INT 56
25157: PUSH
25158: LD_INT 57
25160: PUSH
25161: LD_INT 58
25163: PUSH
25164: LD_INT 59
25166: PUSH
25167: LD_INT 63
25169: PUSH
25170: LD_INT 64
25172: PUSH
25173: LD_INT 65
25175: PUSH
25176: LD_INT 82
25178: PUSH
25179: LD_INT 83
25181: PUSH
25182: LD_INT 84
25184: PUSH
25185: LD_INT 85
25187: PUSH
25188: LD_INT 86
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: ST_TO_ADDR
25246: GO 25249
25248: POP
// if state > - 1 and state < 3 then
25249: LD_VAR 0 3
25253: PUSH
25254: LD_INT 1
25256: NEG
25257: GREATER
25258: PUSH
25259: LD_VAR 0 3
25263: PUSH
25264: LD_INT 3
25266: LESS
25267: AND
25268: IFFALSE 25325
// for i in result do
25270: LD_ADDR_VAR 0 5
25274: PUSH
25275: LD_VAR 0 4
25279: PUSH
25280: FOR_IN
25281: IFFALSE 25323
// if GetTech ( i , side ) <> state then
25283: LD_VAR 0 5
25287: PPUSH
25288: LD_VAR 0 1
25292: PPUSH
25293: CALL_OW 321
25297: PUSH
25298: LD_VAR 0 3
25302: NONEQUAL
25303: IFFALSE 25321
// result := result diff i ;
25305: LD_ADDR_VAR 0 4
25309: PUSH
25310: LD_VAR 0 4
25314: PUSH
25315: LD_VAR 0 5
25319: DIFF
25320: ST_TO_ADDR
25321: GO 25280
25323: POP
25324: POP
// end ;
25325: LD_VAR 0 4
25329: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25330: LD_INT 0
25332: PPUSH
25333: PPUSH
25334: PPUSH
// result := true ;
25335: LD_ADDR_VAR 0 3
25339: PUSH
25340: LD_INT 1
25342: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25343: LD_ADDR_VAR 0 5
25347: PUSH
25348: LD_VAR 0 2
25352: PPUSH
25353: CALL_OW 480
25357: ST_TO_ADDR
// if not tmp then
25358: LD_VAR 0 5
25362: NOT
25363: IFFALSE 25367
// exit ;
25365: GO 25416
// for i in tmp do
25367: LD_ADDR_VAR 0 4
25371: PUSH
25372: LD_VAR 0 5
25376: PUSH
25377: FOR_IN
25378: IFFALSE 25414
// if GetTech ( i , side ) <> state_researched then
25380: LD_VAR 0 4
25384: PPUSH
25385: LD_VAR 0 1
25389: PPUSH
25390: CALL_OW 321
25394: PUSH
25395: LD_INT 2
25397: NONEQUAL
25398: IFFALSE 25412
// begin result := false ;
25400: LD_ADDR_VAR 0 3
25404: PUSH
25405: LD_INT 0
25407: ST_TO_ADDR
// exit ;
25408: POP
25409: POP
25410: GO 25416
// end ;
25412: GO 25377
25414: POP
25415: POP
// end ;
25416: LD_VAR 0 3
25420: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25421: LD_INT 0
25423: PPUSH
25424: PPUSH
25425: PPUSH
25426: PPUSH
25427: PPUSH
25428: PPUSH
25429: PPUSH
25430: PPUSH
25431: PPUSH
25432: PPUSH
25433: PPUSH
25434: PPUSH
25435: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25436: LD_VAR 0 1
25440: NOT
25441: PUSH
25442: LD_VAR 0 1
25446: PPUSH
25447: CALL_OW 257
25451: PUSH
25452: LD_INT 9
25454: NONEQUAL
25455: OR
25456: IFFALSE 25460
// exit ;
25458: GO 26033
// side := GetSide ( unit ) ;
25460: LD_ADDR_VAR 0 9
25464: PUSH
25465: LD_VAR 0 1
25469: PPUSH
25470: CALL_OW 255
25474: ST_TO_ADDR
// tech_space := tech_spacanom ;
25475: LD_ADDR_VAR 0 12
25479: PUSH
25480: LD_INT 29
25482: ST_TO_ADDR
// tech_time := tech_taurad ;
25483: LD_ADDR_VAR 0 13
25487: PUSH
25488: LD_INT 28
25490: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25491: LD_ADDR_VAR 0 11
25495: PUSH
25496: LD_VAR 0 1
25500: PPUSH
25501: CALL_OW 310
25505: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25506: LD_VAR 0 11
25510: PPUSH
25511: CALL_OW 247
25515: PUSH
25516: LD_INT 2
25518: EQUAL
25519: IFFALSE 25523
// exit ;
25521: GO 26033
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25523: LD_ADDR_VAR 0 8
25527: PUSH
25528: LD_INT 81
25530: PUSH
25531: LD_VAR 0 9
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 3
25542: PUSH
25543: LD_INT 21
25545: PUSH
25546: LD_INT 3
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PPUSH
25561: CALL_OW 69
25565: ST_TO_ADDR
// if not tmp then
25566: LD_VAR 0 8
25570: NOT
25571: IFFALSE 25575
// exit ;
25573: GO 26033
// if in_unit then
25575: LD_VAR 0 11
25579: IFFALSE 25603
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25581: LD_ADDR_VAR 0 10
25585: PUSH
25586: LD_VAR 0 8
25590: PPUSH
25591: LD_VAR 0 11
25595: PPUSH
25596: CALL_OW 74
25600: ST_TO_ADDR
25601: GO 25623
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25603: LD_ADDR_VAR 0 10
25607: PUSH
25608: LD_VAR 0 8
25612: PPUSH
25613: LD_VAR 0 1
25617: PPUSH
25618: CALL_OW 74
25622: ST_TO_ADDR
// if not enemy then
25623: LD_VAR 0 10
25627: NOT
25628: IFFALSE 25632
// exit ;
25630: GO 26033
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25632: LD_VAR 0 11
25636: PUSH
25637: LD_VAR 0 11
25641: PPUSH
25642: LD_VAR 0 10
25646: PPUSH
25647: CALL_OW 296
25651: PUSH
25652: LD_INT 13
25654: GREATER
25655: AND
25656: PUSH
25657: LD_VAR 0 1
25661: PPUSH
25662: LD_VAR 0 10
25666: PPUSH
25667: CALL_OW 296
25671: PUSH
25672: LD_INT 12
25674: GREATER
25675: OR
25676: IFFALSE 25680
// exit ;
25678: GO 26033
// missile := [ 1 ] ;
25680: LD_ADDR_VAR 0 14
25684: PUSH
25685: LD_INT 1
25687: PUSH
25688: EMPTY
25689: LIST
25690: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25691: LD_VAR 0 9
25695: PPUSH
25696: LD_VAR 0 12
25700: PPUSH
25701: CALL_OW 325
25705: IFFALSE 25734
// missile := Insert ( missile , missile + 1 , 2 ) ;
25707: LD_ADDR_VAR 0 14
25711: PUSH
25712: LD_VAR 0 14
25716: PPUSH
25717: LD_VAR 0 14
25721: PUSH
25722: LD_INT 1
25724: PLUS
25725: PPUSH
25726: LD_INT 2
25728: PPUSH
25729: CALL_OW 2
25733: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25734: LD_VAR 0 9
25738: PPUSH
25739: LD_VAR 0 13
25743: PPUSH
25744: CALL_OW 325
25748: PUSH
25749: LD_VAR 0 10
25753: PPUSH
25754: CALL_OW 255
25758: PPUSH
25759: LD_VAR 0 13
25763: PPUSH
25764: CALL_OW 325
25768: NOT
25769: AND
25770: IFFALSE 25799
// missile := Insert ( missile , missile + 1 , 3 ) ;
25772: LD_ADDR_VAR 0 14
25776: PUSH
25777: LD_VAR 0 14
25781: PPUSH
25782: LD_VAR 0 14
25786: PUSH
25787: LD_INT 1
25789: PLUS
25790: PPUSH
25791: LD_INT 3
25793: PPUSH
25794: CALL_OW 2
25798: ST_TO_ADDR
// if missile < 2 then
25799: LD_VAR 0 14
25803: PUSH
25804: LD_INT 2
25806: LESS
25807: IFFALSE 25811
// exit ;
25809: GO 26033
// x := GetX ( enemy ) ;
25811: LD_ADDR_VAR 0 4
25815: PUSH
25816: LD_VAR 0 10
25820: PPUSH
25821: CALL_OW 250
25825: ST_TO_ADDR
// y := GetY ( enemy ) ;
25826: LD_ADDR_VAR 0 5
25830: PUSH
25831: LD_VAR 0 10
25835: PPUSH
25836: CALL_OW 251
25840: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25841: LD_ADDR_VAR 0 6
25845: PUSH
25846: LD_VAR 0 4
25850: PUSH
25851: LD_INT 1
25853: NEG
25854: PPUSH
25855: LD_INT 1
25857: PPUSH
25858: CALL_OW 12
25862: PLUS
25863: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25864: LD_ADDR_VAR 0 7
25868: PUSH
25869: LD_VAR 0 5
25873: PUSH
25874: LD_INT 1
25876: NEG
25877: PPUSH
25878: LD_INT 1
25880: PPUSH
25881: CALL_OW 12
25885: PLUS
25886: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25887: LD_VAR 0 6
25891: PPUSH
25892: LD_VAR 0 7
25896: PPUSH
25897: CALL_OW 488
25901: NOT
25902: IFFALSE 25924
// begin _x := x ;
25904: LD_ADDR_VAR 0 6
25908: PUSH
25909: LD_VAR 0 4
25913: ST_TO_ADDR
// _y := y ;
25914: LD_ADDR_VAR 0 7
25918: PUSH
25919: LD_VAR 0 5
25923: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25924: LD_ADDR_VAR 0 3
25928: PUSH
25929: LD_INT 1
25931: PPUSH
25932: LD_VAR 0 14
25936: PPUSH
25937: CALL_OW 12
25941: ST_TO_ADDR
// case i of 1 :
25942: LD_VAR 0 3
25946: PUSH
25947: LD_INT 1
25949: DOUBLE
25950: EQUAL
25951: IFTRUE 25955
25953: GO 25972
25955: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25956: LD_VAR 0 1
25960: PPUSH
25961: LD_VAR 0 10
25965: PPUSH
25966: CALL_OW 115
25970: GO 26033
25972: LD_INT 2
25974: DOUBLE
25975: EQUAL
25976: IFTRUE 25980
25978: GO 26002
25980: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25981: LD_VAR 0 1
25985: PPUSH
25986: LD_VAR 0 6
25990: PPUSH
25991: LD_VAR 0 7
25995: PPUSH
25996: CALL_OW 153
26000: GO 26033
26002: LD_INT 3
26004: DOUBLE
26005: EQUAL
26006: IFTRUE 26010
26008: GO 26032
26010: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26011: LD_VAR 0 1
26015: PPUSH
26016: LD_VAR 0 6
26020: PPUSH
26021: LD_VAR 0 7
26025: PPUSH
26026: CALL_OW 154
26030: GO 26033
26032: POP
// end ;
26033: LD_VAR 0 2
26037: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26038: LD_INT 0
26040: PPUSH
26041: PPUSH
26042: PPUSH
26043: PPUSH
26044: PPUSH
26045: PPUSH
// if not unit or not building then
26046: LD_VAR 0 1
26050: NOT
26051: PUSH
26052: LD_VAR 0 2
26056: NOT
26057: OR
26058: IFFALSE 26062
// exit ;
26060: GO 26220
// x := GetX ( building ) ;
26062: LD_ADDR_VAR 0 5
26066: PUSH
26067: LD_VAR 0 2
26071: PPUSH
26072: CALL_OW 250
26076: ST_TO_ADDR
// y := GetY ( building ) ;
26077: LD_ADDR_VAR 0 6
26081: PUSH
26082: LD_VAR 0 2
26086: PPUSH
26087: CALL_OW 251
26091: ST_TO_ADDR
// for i = 0 to 5 do
26092: LD_ADDR_VAR 0 4
26096: PUSH
26097: DOUBLE
26098: LD_INT 0
26100: DEC
26101: ST_TO_ADDR
26102: LD_INT 5
26104: PUSH
26105: FOR_TO
26106: IFFALSE 26218
// begin _x := ShiftX ( x , i , 3 ) ;
26108: LD_ADDR_VAR 0 7
26112: PUSH
26113: LD_VAR 0 5
26117: PPUSH
26118: LD_VAR 0 4
26122: PPUSH
26123: LD_INT 3
26125: PPUSH
26126: CALL_OW 272
26130: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26131: LD_ADDR_VAR 0 8
26135: PUSH
26136: LD_VAR 0 6
26140: PPUSH
26141: LD_VAR 0 4
26145: PPUSH
26146: LD_INT 3
26148: PPUSH
26149: CALL_OW 273
26153: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26154: LD_VAR 0 7
26158: PPUSH
26159: LD_VAR 0 8
26163: PPUSH
26164: CALL_OW 488
26168: NOT
26169: IFFALSE 26173
// continue ;
26171: GO 26105
// if HexInfo ( _x , _y ) = 0 then
26173: LD_VAR 0 7
26177: PPUSH
26178: LD_VAR 0 8
26182: PPUSH
26183: CALL_OW 428
26187: PUSH
26188: LD_INT 0
26190: EQUAL
26191: IFFALSE 26216
// begin ComMoveXY ( unit , _x , _y ) ;
26193: LD_VAR 0 1
26197: PPUSH
26198: LD_VAR 0 7
26202: PPUSH
26203: LD_VAR 0 8
26207: PPUSH
26208: CALL_OW 111
// exit ;
26212: POP
26213: POP
26214: GO 26220
// end ; end ;
26216: GO 26105
26218: POP
26219: POP
// end ;
26220: LD_VAR 0 3
26224: RET
// export function ScanBase ( side , base_area ) ; begin
26225: LD_INT 0
26227: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26228: LD_ADDR_VAR 0 3
26232: PUSH
26233: LD_VAR 0 2
26237: PPUSH
26238: LD_INT 81
26240: PUSH
26241: LD_VAR 0 1
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PPUSH
26250: CALL_OW 70
26254: ST_TO_ADDR
// end ;
26255: LD_VAR 0 3
26259: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26260: LD_INT 0
26262: PPUSH
26263: PPUSH
26264: PPUSH
26265: PPUSH
// result := false ;
26266: LD_ADDR_VAR 0 2
26270: PUSH
26271: LD_INT 0
26273: ST_TO_ADDR
// side := GetSide ( unit ) ;
26274: LD_ADDR_VAR 0 3
26278: PUSH
26279: LD_VAR 0 1
26283: PPUSH
26284: CALL_OW 255
26288: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26289: LD_ADDR_VAR 0 4
26293: PUSH
26294: LD_VAR 0 1
26298: PPUSH
26299: CALL_OW 248
26303: ST_TO_ADDR
// case nat of 1 :
26304: LD_VAR 0 4
26308: PUSH
26309: LD_INT 1
26311: DOUBLE
26312: EQUAL
26313: IFTRUE 26317
26315: GO 26328
26317: POP
// tech := tech_lassight ; 2 :
26318: LD_ADDR_VAR 0 5
26322: PUSH
26323: LD_INT 12
26325: ST_TO_ADDR
26326: GO 26367
26328: LD_INT 2
26330: DOUBLE
26331: EQUAL
26332: IFTRUE 26336
26334: GO 26347
26336: POP
// tech := tech_mortar ; 3 :
26337: LD_ADDR_VAR 0 5
26341: PUSH
26342: LD_INT 41
26344: ST_TO_ADDR
26345: GO 26367
26347: LD_INT 3
26349: DOUBLE
26350: EQUAL
26351: IFTRUE 26355
26353: GO 26366
26355: POP
// tech := tech_bazooka ; end ;
26356: LD_ADDR_VAR 0 5
26360: PUSH
26361: LD_INT 44
26363: ST_TO_ADDR
26364: GO 26367
26366: POP
// if Researched ( side , tech ) then
26367: LD_VAR 0 3
26371: PPUSH
26372: LD_VAR 0 5
26376: PPUSH
26377: CALL_OW 325
26381: IFFALSE 26408
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26383: LD_ADDR_VAR 0 2
26387: PUSH
26388: LD_INT 5
26390: PUSH
26391: LD_INT 8
26393: PUSH
26394: LD_INT 9
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: LIST
26401: PUSH
26402: LD_VAR 0 4
26406: ARRAY
26407: ST_TO_ADDR
// end ;
26408: LD_VAR 0 2
26412: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26413: LD_INT 0
26415: PPUSH
26416: PPUSH
26417: PPUSH
// if not mines then
26418: LD_VAR 0 2
26422: NOT
26423: IFFALSE 26427
// exit ;
26425: GO 26571
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26427: LD_ADDR_VAR 0 5
26431: PUSH
26432: LD_INT 81
26434: PUSH
26435: LD_VAR 0 1
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 3
26446: PUSH
26447: LD_INT 21
26449: PUSH
26450: LD_INT 3
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PPUSH
26465: CALL_OW 69
26469: ST_TO_ADDR
// for i in mines do
26470: LD_ADDR_VAR 0 4
26474: PUSH
26475: LD_VAR 0 2
26479: PUSH
26480: FOR_IN
26481: IFFALSE 26569
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26483: LD_VAR 0 4
26487: PUSH
26488: LD_INT 1
26490: ARRAY
26491: PPUSH
26492: LD_VAR 0 4
26496: PUSH
26497: LD_INT 2
26499: ARRAY
26500: PPUSH
26501: CALL_OW 458
26505: NOT
26506: IFFALSE 26510
// continue ;
26508: GO 26480
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26510: LD_VAR 0 4
26514: PUSH
26515: LD_INT 1
26517: ARRAY
26518: PPUSH
26519: LD_VAR 0 4
26523: PUSH
26524: LD_INT 2
26526: ARRAY
26527: PPUSH
26528: CALL_OW 428
26532: PUSH
26533: LD_VAR 0 5
26537: IN
26538: IFFALSE 26567
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26540: LD_VAR 0 4
26544: PUSH
26545: LD_INT 1
26547: ARRAY
26548: PPUSH
26549: LD_VAR 0 4
26553: PUSH
26554: LD_INT 2
26556: ARRAY
26557: PPUSH
26558: LD_VAR 0 1
26562: PPUSH
26563: CALL_OW 456
// end ;
26567: GO 26480
26569: POP
26570: POP
// end ;
26571: LD_VAR 0 3
26575: RET
// export function Count ( array ) ; var i ; begin
26576: LD_INT 0
26578: PPUSH
26579: PPUSH
// result := 0 ;
26580: LD_ADDR_VAR 0 2
26584: PUSH
26585: LD_INT 0
26587: ST_TO_ADDR
// for i in array do
26588: LD_ADDR_VAR 0 3
26592: PUSH
26593: LD_VAR 0 1
26597: PUSH
26598: FOR_IN
26599: IFFALSE 26623
// if i then
26601: LD_VAR 0 3
26605: IFFALSE 26621
// result := result + 1 ;
26607: LD_ADDR_VAR 0 2
26611: PUSH
26612: LD_VAR 0 2
26616: PUSH
26617: LD_INT 1
26619: PLUS
26620: ST_TO_ADDR
26621: GO 26598
26623: POP
26624: POP
// end ;
26625: LD_VAR 0 2
26629: RET
// export function IsEmpty ( building ) ; begin
26630: LD_INT 0
26632: PPUSH
// if not building then
26633: LD_VAR 0 1
26637: NOT
26638: IFFALSE 26642
// exit ;
26640: GO 26685
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26642: LD_ADDR_VAR 0 2
26646: PUSH
26647: LD_VAR 0 1
26651: PUSH
26652: LD_INT 22
26654: PUSH
26655: LD_VAR 0 1
26659: PPUSH
26660: CALL_OW 255
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 58
26671: PUSH
26672: EMPTY
26673: LIST
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PPUSH
26679: CALL_OW 69
26683: IN
26684: ST_TO_ADDR
// end ;
26685: LD_VAR 0 2
26689: RET
// export function IsNotFull ( building ) ; begin
26690: LD_INT 0
26692: PPUSH
// if not building then
26693: LD_VAR 0 1
26697: NOT
26698: IFFALSE 26702
// exit ;
26700: GO 26721
// result := UnitsInside ( building ) < 6 ;
26702: LD_ADDR_VAR 0 2
26706: PUSH
26707: LD_VAR 0 1
26711: PPUSH
26712: CALL_OW 313
26716: PUSH
26717: LD_INT 6
26719: LESS
26720: ST_TO_ADDR
// end ;
26721: LD_VAR 0 2
26725: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26726: LD_INT 0
26728: PPUSH
26729: PPUSH
26730: PPUSH
26731: PPUSH
// tmp := [ ] ;
26732: LD_ADDR_VAR 0 3
26736: PUSH
26737: EMPTY
26738: ST_TO_ADDR
// list := [ ] ;
26739: LD_ADDR_VAR 0 5
26743: PUSH
26744: EMPTY
26745: ST_TO_ADDR
// for i = 16 to 25 do
26746: LD_ADDR_VAR 0 4
26750: PUSH
26751: DOUBLE
26752: LD_INT 16
26754: DEC
26755: ST_TO_ADDR
26756: LD_INT 25
26758: PUSH
26759: FOR_TO
26760: IFFALSE 26833
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26762: LD_ADDR_VAR 0 3
26766: PUSH
26767: LD_VAR 0 3
26771: PUSH
26772: LD_INT 22
26774: PUSH
26775: LD_VAR 0 1
26779: PPUSH
26780: CALL_OW 255
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 91
26791: PUSH
26792: LD_VAR 0 1
26796: PUSH
26797: LD_INT 6
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 30
26807: PUSH
26808: LD_VAR 0 4
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: LIST
26821: PUSH
26822: EMPTY
26823: LIST
26824: PPUSH
26825: CALL_OW 69
26829: ADD
26830: ST_TO_ADDR
26831: GO 26759
26833: POP
26834: POP
// for i = 1 to tmp do
26835: LD_ADDR_VAR 0 4
26839: PUSH
26840: DOUBLE
26841: LD_INT 1
26843: DEC
26844: ST_TO_ADDR
26845: LD_VAR 0 3
26849: PUSH
26850: FOR_TO
26851: IFFALSE 26939
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26853: LD_ADDR_VAR 0 5
26857: PUSH
26858: LD_VAR 0 5
26862: PUSH
26863: LD_VAR 0 3
26867: PUSH
26868: LD_VAR 0 4
26872: ARRAY
26873: PPUSH
26874: CALL_OW 266
26878: PUSH
26879: LD_VAR 0 3
26883: PUSH
26884: LD_VAR 0 4
26888: ARRAY
26889: PPUSH
26890: CALL_OW 250
26894: PUSH
26895: LD_VAR 0 3
26899: PUSH
26900: LD_VAR 0 4
26904: ARRAY
26905: PPUSH
26906: CALL_OW 251
26910: PUSH
26911: LD_VAR 0 3
26915: PUSH
26916: LD_VAR 0 4
26920: ARRAY
26921: PPUSH
26922: CALL_OW 254
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: PUSH
26933: EMPTY
26934: LIST
26935: ADD
26936: ST_TO_ADDR
26937: GO 26850
26939: POP
26940: POP
// result := list ;
26941: LD_ADDR_VAR 0 2
26945: PUSH
26946: LD_VAR 0 5
26950: ST_TO_ADDR
// end ;
26951: LD_VAR 0 2
26955: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26956: LD_INT 0
26958: PPUSH
26959: PPUSH
26960: PPUSH
26961: PPUSH
26962: PPUSH
26963: PPUSH
26964: PPUSH
// if not factory then
26965: LD_VAR 0 1
26969: NOT
26970: IFFALSE 26974
// exit ;
26972: GO 27567
// if control = control_apeman then
26974: LD_VAR 0 4
26978: PUSH
26979: LD_INT 5
26981: EQUAL
26982: IFFALSE 27091
// begin tmp := UnitsInside ( factory ) ;
26984: LD_ADDR_VAR 0 8
26988: PUSH
26989: LD_VAR 0 1
26993: PPUSH
26994: CALL_OW 313
26998: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26999: LD_VAR 0 8
27003: PPUSH
27004: LD_INT 25
27006: PUSH
27007: LD_INT 12
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PPUSH
27014: CALL_OW 72
27018: NOT
27019: IFFALSE 27029
// control := control_manual ;
27021: LD_ADDR_VAR 0 4
27025: PUSH
27026: LD_INT 1
27028: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27029: LD_ADDR_VAR 0 8
27033: PUSH
27034: LD_VAR 0 1
27038: PPUSH
27039: CALL 26726 0 1
27043: ST_TO_ADDR
// if tmp then
27044: LD_VAR 0 8
27048: IFFALSE 27091
// begin for i in tmp do
27050: LD_ADDR_VAR 0 7
27054: PUSH
27055: LD_VAR 0 8
27059: PUSH
27060: FOR_IN
27061: IFFALSE 27089
// if i [ 1 ] = b_ext_radio then
27063: LD_VAR 0 7
27067: PUSH
27068: LD_INT 1
27070: ARRAY
27071: PUSH
27072: LD_INT 22
27074: EQUAL
27075: IFFALSE 27087
// begin control := control_remote ;
27077: LD_ADDR_VAR 0 4
27081: PUSH
27082: LD_INT 2
27084: ST_TO_ADDR
// break ;
27085: GO 27089
// end ;
27087: GO 27060
27089: POP
27090: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27091: LD_VAR 0 1
27095: PPUSH
27096: LD_VAR 0 2
27100: PPUSH
27101: LD_VAR 0 3
27105: PPUSH
27106: LD_VAR 0 4
27110: PPUSH
27111: LD_VAR 0 5
27115: PPUSH
27116: CALL_OW 448
27120: IFFALSE 27155
// begin result := [ chassis , engine , control , weapon ] ;
27122: LD_ADDR_VAR 0 6
27126: PUSH
27127: LD_VAR 0 2
27131: PUSH
27132: LD_VAR 0 3
27136: PUSH
27137: LD_VAR 0 4
27141: PUSH
27142: LD_VAR 0 5
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: ST_TO_ADDR
// exit ;
27153: GO 27567
// end ; _chassis := AvailableChassisList ( factory ) ;
27155: LD_ADDR_VAR 0 9
27159: PUSH
27160: LD_VAR 0 1
27164: PPUSH
27165: CALL_OW 475
27169: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27170: LD_ADDR_VAR 0 11
27174: PUSH
27175: LD_VAR 0 1
27179: PPUSH
27180: CALL_OW 476
27184: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27185: LD_ADDR_VAR 0 12
27189: PUSH
27190: LD_VAR 0 1
27194: PPUSH
27195: CALL_OW 477
27199: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27200: LD_ADDR_VAR 0 10
27204: PUSH
27205: LD_VAR 0 1
27209: PPUSH
27210: CALL_OW 478
27214: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27215: LD_VAR 0 9
27219: NOT
27220: PUSH
27221: LD_VAR 0 11
27225: NOT
27226: OR
27227: PUSH
27228: LD_VAR 0 12
27232: NOT
27233: OR
27234: PUSH
27235: LD_VAR 0 10
27239: NOT
27240: OR
27241: IFFALSE 27276
// begin result := [ chassis , engine , control , weapon ] ;
27243: LD_ADDR_VAR 0 6
27247: PUSH
27248: LD_VAR 0 2
27252: PUSH
27253: LD_VAR 0 3
27257: PUSH
27258: LD_VAR 0 4
27262: PUSH
27263: LD_VAR 0 5
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: ST_TO_ADDR
// exit ;
27274: GO 27567
// end ; if not chassis in _chassis then
27276: LD_VAR 0 2
27280: PUSH
27281: LD_VAR 0 9
27285: IN
27286: NOT
27287: IFFALSE 27313
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27289: LD_ADDR_VAR 0 2
27293: PUSH
27294: LD_VAR 0 9
27298: PUSH
27299: LD_INT 1
27301: PPUSH
27302: LD_VAR 0 9
27306: PPUSH
27307: CALL_OW 12
27311: ARRAY
27312: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27313: LD_VAR 0 2
27317: PPUSH
27318: LD_VAR 0 3
27322: PPUSH
27323: CALL 27572 0 2
27327: NOT
27328: IFFALSE 27387
// repeat engine := _engine [ 1 ] ;
27330: LD_ADDR_VAR 0 3
27334: PUSH
27335: LD_VAR 0 11
27339: PUSH
27340: LD_INT 1
27342: ARRAY
27343: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27344: LD_ADDR_VAR 0 11
27348: PUSH
27349: LD_VAR 0 11
27353: PPUSH
27354: LD_INT 1
27356: PPUSH
27357: CALL_OW 3
27361: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27362: LD_VAR 0 2
27366: PPUSH
27367: LD_VAR 0 3
27371: PPUSH
27372: CALL 27572 0 2
27376: PUSH
27377: LD_VAR 0 11
27381: PUSH
27382: EMPTY
27383: EQUAL
27384: OR
27385: IFFALSE 27330
// if not control in _control then
27387: LD_VAR 0 4
27391: PUSH
27392: LD_VAR 0 12
27396: IN
27397: NOT
27398: IFFALSE 27424
// control := _control [ rand ( 1 , _control ) ] ;
27400: LD_ADDR_VAR 0 4
27404: PUSH
27405: LD_VAR 0 12
27409: PUSH
27410: LD_INT 1
27412: PPUSH
27413: LD_VAR 0 12
27417: PPUSH
27418: CALL_OW 12
27422: ARRAY
27423: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27424: LD_VAR 0 2
27428: PPUSH
27429: LD_VAR 0 5
27433: PPUSH
27434: CALL 27792 0 2
27438: NOT
27439: IFFALSE 27498
// repeat weapon := _weapon [ 1 ] ;
27441: LD_ADDR_VAR 0 5
27445: PUSH
27446: LD_VAR 0 10
27450: PUSH
27451: LD_INT 1
27453: ARRAY
27454: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27455: LD_ADDR_VAR 0 10
27459: PUSH
27460: LD_VAR 0 10
27464: PPUSH
27465: LD_INT 1
27467: PPUSH
27468: CALL_OW 3
27472: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27473: LD_VAR 0 2
27477: PPUSH
27478: LD_VAR 0 5
27482: PPUSH
27483: CALL 27792 0 2
27487: PUSH
27488: LD_VAR 0 10
27492: PUSH
27493: EMPTY
27494: EQUAL
27495: OR
27496: IFFALSE 27441
// result := [ ] ;
27498: LD_ADDR_VAR 0 6
27502: PUSH
27503: EMPTY
27504: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27505: LD_VAR 0 1
27509: PPUSH
27510: LD_VAR 0 2
27514: PPUSH
27515: LD_VAR 0 3
27519: PPUSH
27520: LD_VAR 0 4
27524: PPUSH
27525: LD_VAR 0 5
27529: PPUSH
27530: CALL_OW 448
27534: IFFALSE 27567
// result := [ chassis , engine , control , weapon ] ;
27536: LD_ADDR_VAR 0 6
27540: PUSH
27541: LD_VAR 0 2
27545: PUSH
27546: LD_VAR 0 3
27550: PUSH
27551: LD_VAR 0 4
27555: PUSH
27556: LD_VAR 0 5
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: ST_TO_ADDR
// end ;
27567: LD_VAR 0 6
27571: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27572: LD_INT 0
27574: PPUSH
// if not chassis or not engine then
27575: LD_VAR 0 1
27579: NOT
27580: PUSH
27581: LD_VAR 0 2
27585: NOT
27586: OR
27587: IFFALSE 27591
// exit ;
27589: GO 27787
// case engine of engine_solar :
27591: LD_VAR 0 2
27595: PUSH
27596: LD_INT 2
27598: DOUBLE
27599: EQUAL
27600: IFTRUE 27604
27602: GO 27642
27604: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27605: LD_ADDR_VAR 0 3
27609: PUSH
27610: LD_INT 11
27612: PUSH
27613: LD_INT 12
27615: PUSH
27616: LD_INT 13
27618: PUSH
27619: LD_INT 14
27621: PUSH
27622: LD_INT 1
27624: PUSH
27625: LD_INT 2
27627: PUSH
27628: LD_INT 3
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: ST_TO_ADDR
27640: GO 27771
27642: LD_INT 1
27644: DOUBLE
27645: EQUAL
27646: IFTRUE 27650
27648: GO 27712
27650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27651: LD_ADDR_VAR 0 3
27655: PUSH
27656: LD_INT 11
27658: PUSH
27659: LD_INT 12
27661: PUSH
27662: LD_INT 13
27664: PUSH
27665: LD_INT 14
27667: PUSH
27668: LD_INT 1
27670: PUSH
27671: LD_INT 2
27673: PUSH
27674: LD_INT 3
27676: PUSH
27677: LD_INT 4
27679: PUSH
27680: LD_INT 5
27682: PUSH
27683: LD_INT 21
27685: PUSH
27686: LD_INT 23
27688: PUSH
27689: LD_INT 22
27691: PUSH
27692: LD_INT 24
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: ST_TO_ADDR
27710: GO 27771
27712: LD_INT 3
27714: DOUBLE
27715: EQUAL
27716: IFTRUE 27720
27718: GO 27770
27720: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27721: LD_ADDR_VAR 0 3
27725: PUSH
27726: LD_INT 13
27728: PUSH
27729: LD_INT 14
27731: PUSH
27732: LD_INT 2
27734: PUSH
27735: LD_INT 3
27737: PUSH
27738: LD_INT 4
27740: PUSH
27741: LD_INT 5
27743: PUSH
27744: LD_INT 21
27746: PUSH
27747: LD_INT 22
27749: PUSH
27750: LD_INT 23
27752: PUSH
27753: LD_INT 24
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: ST_TO_ADDR
27768: GO 27771
27770: POP
// result := ( chassis in result ) ;
27771: LD_ADDR_VAR 0 3
27775: PUSH
27776: LD_VAR 0 1
27780: PUSH
27781: LD_VAR 0 3
27785: IN
27786: ST_TO_ADDR
// end ;
27787: LD_VAR 0 3
27791: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27792: LD_INT 0
27794: PPUSH
// if not chassis or not weapon then
27795: LD_VAR 0 1
27799: NOT
27800: PUSH
27801: LD_VAR 0 2
27805: NOT
27806: OR
27807: IFFALSE 27811
// exit ;
27809: GO 28873
// case weapon of us_machine_gun :
27811: LD_VAR 0 2
27815: PUSH
27816: LD_INT 2
27818: DOUBLE
27819: EQUAL
27820: IFTRUE 27824
27822: GO 27854
27824: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27825: LD_ADDR_VAR 0 3
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: LD_INT 2
27835: PUSH
27836: LD_INT 3
27838: PUSH
27839: LD_INT 4
27841: PUSH
27842: LD_INT 5
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: ST_TO_ADDR
27852: GO 28857
27854: LD_INT 3
27856: DOUBLE
27857: EQUAL
27858: IFTRUE 27862
27860: GO 27892
27862: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27863: LD_ADDR_VAR 0 3
27867: PUSH
27868: LD_INT 1
27870: PUSH
27871: LD_INT 2
27873: PUSH
27874: LD_INT 3
27876: PUSH
27877: LD_INT 4
27879: PUSH
27880: LD_INT 5
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: ST_TO_ADDR
27890: GO 28857
27892: LD_INT 11
27894: DOUBLE
27895: EQUAL
27896: IFTRUE 27900
27898: GO 27930
27900: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27901: LD_ADDR_VAR 0 3
27905: PUSH
27906: LD_INT 1
27908: PUSH
27909: LD_INT 2
27911: PUSH
27912: LD_INT 3
27914: PUSH
27915: LD_INT 4
27917: PUSH
27918: LD_INT 5
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: ST_TO_ADDR
27928: GO 28857
27930: LD_INT 4
27932: DOUBLE
27933: EQUAL
27934: IFTRUE 27938
27936: GO 27964
27938: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27939: LD_ADDR_VAR 0 3
27943: PUSH
27944: LD_INT 2
27946: PUSH
27947: LD_INT 3
27949: PUSH
27950: LD_INT 4
27952: PUSH
27953: LD_INT 5
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: ST_TO_ADDR
27962: GO 28857
27964: LD_INT 5
27966: DOUBLE
27967: EQUAL
27968: IFTRUE 27972
27970: GO 27998
27972: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27973: LD_ADDR_VAR 0 3
27977: PUSH
27978: LD_INT 2
27980: PUSH
27981: LD_INT 3
27983: PUSH
27984: LD_INT 4
27986: PUSH
27987: LD_INT 5
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: ST_TO_ADDR
27996: GO 28857
27998: LD_INT 9
28000: DOUBLE
28001: EQUAL
28002: IFTRUE 28006
28004: GO 28032
28006: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28007: LD_ADDR_VAR 0 3
28011: PUSH
28012: LD_INT 2
28014: PUSH
28015: LD_INT 3
28017: PUSH
28018: LD_INT 4
28020: PUSH
28021: LD_INT 5
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: ST_TO_ADDR
28030: GO 28857
28032: LD_INT 7
28034: DOUBLE
28035: EQUAL
28036: IFTRUE 28040
28038: GO 28066
28040: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28041: LD_ADDR_VAR 0 3
28045: PUSH
28046: LD_INT 2
28048: PUSH
28049: LD_INT 3
28051: PUSH
28052: LD_INT 4
28054: PUSH
28055: LD_INT 5
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: ST_TO_ADDR
28064: GO 28857
28066: LD_INT 12
28068: DOUBLE
28069: EQUAL
28070: IFTRUE 28074
28072: GO 28100
28074: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28075: LD_ADDR_VAR 0 3
28079: PUSH
28080: LD_INT 2
28082: PUSH
28083: LD_INT 3
28085: PUSH
28086: LD_INT 4
28088: PUSH
28089: LD_INT 5
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: ST_TO_ADDR
28098: GO 28857
28100: LD_INT 13
28102: DOUBLE
28103: EQUAL
28104: IFTRUE 28108
28106: GO 28134
28108: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28109: LD_ADDR_VAR 0 3
28113: PUSH
28114: LD_INT 2
28116: PUSH
28117: LD_INT 3
28119: PUSH
28120: LD_INT 4
28122: PUSH
28123: LD_INT 5
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: ST_TO_ADDR
28132: GO 28857
28134: LD_INT 14
28136: DOUBLE
28137: EQUAL
28138: IFTRUE 28142
28140: GO 28160
28142: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28143: LD_ADDR_VAR 0 3
28147: PUSH
28148: LD_INT 4
28150: PUSH
28151: LD_INT 5
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: ST_TO_ADDR
28158: GO 28857
28160: LD_INT 6
28162: DOUBLE
28163: EQUAL
28164: IFTRUE 28168
28166: GO 28186
28168: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28169: LD_ADDR_VAR 0 3
28173: PUSH
28174: LD_INT 4
28176: PUSH
28177: LD_INT 5
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: ST_TO_ADDR
28184: GO 28857
28186: LD_INT 10
28188: DOUBLE
28189: EQUAL
28190: IFTRUE 28194
28192: GO 28212
28194: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28195: LD_ADDR_VAR 0 3
28199: PUSH
28200: LD_INT 4
28202: PUSH
28203: LD_INT 5
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: ST_TO_ADDR
28210: GO 28857
28212: LD_INT 22
28214: DOUBLE
28215: EQUAL
28216: IFTRUE 28220
28218: GO 28246
28220: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28221: LD_ADDR_VAR 0 3
28225: PUSH
28226: LD_INT 11
28228: PUSH
28229: LD_INT 12
28231: PUSH
28232: LD_INT 13
28234: PUSH
28235: LD_INT 14
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: ST_TO_ADDR
28244: GO 28857
28246: LD_INT 23
28248: DOUBLE
28249: EQUAL
28250: IFTRUE 28254
28252: GO 28280
28254: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28255: LD_ADDR_VAR 0 3
28259: PUSH
28260: LD_INT 11
28262: PUSH
28263: LD_INT 12
28265: PUSH
28266: LD_INT 13
28268: PUSH
28269: LD_INT 14
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: ST_TO_ADDR
28278: GO 28857
28280: LD_INT 24
28282: DOUBLE
28283: EQUAL
28284: IFTRUE 28288
28286: GO 28314
28288: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28289: LD_ADDR_VAR 0 3
28293: PUSH
28294: LD_INT 11
28296: PUSH
28297: LD_INT 12
28299: PUSH
28300: LD_INT 13
28302: PUSH
28303: LD_INT 14
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: ST_TO_ADDR
28312: GO 28857
28314: LD_INT 30
28316: DOUBLE
28317: EQUAL
28318: IFTRUE 28322
28320: GO 28348
28322: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28323: LD_ADDR_VAR 0 3
28327: PUSH
28328: LD_INT 11
28330: PUSH
28331: LD_INT 12
28333: PUSH
28334: LD_INT 13
28336: PUSH
28337: LD_INT 14
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: ST_TO_ADDR
28346: GO 28857
28348: LD_INT 25
28350: DOUBLE
28351: EQUAL
28352: IFTRUE 28356
28354: GO 28374
28356: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28357: LD_ADDR_VAR 0 3
28361: PUSH
28362: LD_INT 13
28364: PUSH
28365: LD_INT 14
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: ST_TO_ADDR
28372: GO 28857
28374: LD_INT 27
28376: DOUBLE
28377: EQUAL
28378: IFTRUE 28382
28380: GO 28400
28382: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28383: LD_ADDR_VAR 0 3
28387: PUSH
28388: LD_INT 13
28390: PUSH
28391: LD_INT 14
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: ST_TO_ADDR
28398: GO 28857
28400: LD_EXP 63
28404: DOUBLE
28405: EQUAL
28406: IFTRUE 28410
28408: GO 28436
28410: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28411: LD_ADDR_VAR 0 3
28415: PUSH
28416: LD_INT 11
28418: PUSH
28419: LD_INT 12
28421: PUSH
28422: LD_INT 13
28424: PUSH
28425: LD_INT 14
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: ST_TO_ADDR
28434: GO 28857
28436: LD_INT 28
28438: DOUBLE
28439: EQUAL
28440: IFTRUE 28444
28442: GO 28462
28444: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28445: LD_ADDR_VAR 0 3
28449: PUSH
28450: LD_INT 13
28452: PUSH
28453: LD_INT 14
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: ST_TO_ADDR
28460: GO 28857
28462: LD_INT 29
28464: DOUBLE
28465: EQUAL
28466: IFTRUE 28470
28468: GO 28488
28470: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28471: LD_ADDR_VAR 0 3
28475: PUSH
28476: LD_INT 13
28478: PUSH
28479: LD_INT 14
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: ST_TO_ADDR
28486: GO 28857
28488: LD_INT 31
28490: DOUBLE
28491: EQUAL
28492: IFTRUE 28496
28494: GO 28514
28496: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28497: LD_ADDR_VAR 0 3
28501: PUSH
28502: LD_INT 13
28504: PUSH
28505: LD_INT 14
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: ST_TO_ADDR
28512: GO 28857
28514: LD_INT 26
28516: DOUBLE
28517: EQUAL
28518: IFTRUE 28522
28520: GO 28540
28522: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28523: LD_ADDR_VAR 0 3
28527: PUSH
28528: LD_INT 13
28530: PUSH
28531: LD_INT 14
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: ST_TO_ADDR
28538: GO 28857
28540: LD_INT 42
28542: DOUBLE
28543: EQUAL
28544: IFTRUE 28548
28546: GO 28574
28548: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28549: LD_ADDR_VAR 0 3
28553: PUSH
28554: LD_INT 21
28556: PUSH
28557: LD_INT 22
28559: PUSH
28560: LD_INT 23
28562: PUSH
28563: LD_INT 24
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: ST_TO_ADDR
28572: GO 28857
28574: LD_INT 43
28576: DOUBLE
28577: EQUAL
28578: IFTRUE 28582
28580: GO 28608
28582: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28583: LD_ADDR_VAR 0 3
28587: PUSH
28588: LD_INT 21
28590: PUSH
28591: LD_INT 22
28593: PUSH
28594: LD_INT 23
28596: PUSH
28597: LD_INT 24
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: ST_TO_ADDR
28606: GO 28857
28608: LD_INT 44
28610: DOUBLE
28611: EQUAL
28612: IFTRUE 28616
28614: GO 28642
28616: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28617: LD_ADDR_VAR 0 3
28621: PUSH
28622: LD_INT 21
28624: PUSH
28625: LD_INT 22
28627: PUSH
28628: LD_INT 23
28630: PUSH
28631: LD_INT 24
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: ST_TO_ADDR
28640: GO 28857
28642: LD_INT 45
28644: DOUBLE
28645: EQUAL
28646: IFTRUE 28650
28648: GO 28676
28650: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28651: LD_ADDR_VAR 0 3
28655: PUSH
28656: LD_INT 21
28658: PUSH
28659: LD_INT 22
28661: PUSH
28662: LD_INT 23
28664: PUSH
28665: LD_INT 24
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: ST_TO_ADDR
28674: GO 28857
28676: LD_INT 49
28678: DOUBLE
28679: EQUAL
28680: IFTRUE 28684
28682: GO 28710
28684: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28685: LD_ADDR_VAR 0 3
28689: PUSH
28690: LD_INT 21
28692: PUSH
28693: LD_INT 22
28695: PUSH
28696: LD_INT 23
28698: PUSH
28699: LD_INT 24
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: ST_TO_ADDR
28708: GO 28857
28710: LD_INT 51
28712: DOUBLE
28713: EQUAL
28714: IFTRUE 28718
28716: GO 28744
28718: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28719: LD_ADDR_VAR 0 3
28723: PUSH
28724: LD_INT 21
28726: PUSH
28727: LD_INT 22
28729: PUSH
28730: LD_INT 23
28732: PUSH
28733: LD_INT 24
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: ST_TO_ADDR
28742: GO 28857
28744: LD_INT 52
28746: DOUBLE
28747: EQUAL
28748: IFTRUE 28752
28750: GO 28778
28752: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28753: LD_ADDR_VAR 0 3
28757: PUSH
28758: LD_INT 21
28760: PUSH
28761: LD_INT 22
28763: PUSH
28764: LD_INT 23
28766: PUSH
28767: LD_INT 24
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: ST_TO_ADDR
28776: GO 28857
28778: LD_INT 53
28780: DOUBLE
28781: EQUAL
28782: IFTRUE 28786
28784: GO 28804
28786: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28787: LD_ADDR_VAR 0 3
28791: PUSH
28792: LD_INT 23
28794: PUSH
28795: LD_INT 24
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: ST_TO_ADDR
28802: GO 28857
28804: LD_INT 46
28806: DOUBLE
28807: EQUAL
28808: IFTRUE 28812
28810: GO 28830
28812: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28813: LD_ADDR_VAR 0 3
28817: PUSH
28818: LD_INT 23
28820: PUSH
28821: LD_INT 24
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: ST_TO_ADDR
28828: GO 28857
28830: LD_INT 47
28832: DOUBLE
28833: EQUAL
28834: IFTRUE 28838
28836: GO 28856
28838: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28839: LD_ADDR_VAR 0 3
28843: PUSH
28844: LD_INT 23
28846: PUSH
28847: LD_INT 24
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: ST_TO_ADDR
28854: GO 28857
28856: POP
// result := ( chassis in result ) ;
28857: LD_ADDR_VAR 0 3
28861: PUSH
28862: LD_VAR 0 1
28866: PUSH
28867: LD_VAR 0 3
28871: IN
28872: ST_TO_ADDR
// end ;
28873: LD_VAR 0 3
28877: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28878: LD_INT 0
28880: PPUSH
28881: PPUSH
28882: PPUSH
28883: PPUSH
28884: PPUSH
28885: PPUSH
28886: PPUSH
// result := array ;
28887: LD_ADDR_VAR 0 5
28891: PUSH
28892: LD_VAR 0 1
28896: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28897: LD_VAR 0 1
28901: NOT
28902: PUSH
28903: LD_VAR 0 2
28907: NOT
28908: OR
28909: PUSH
28910: LD_VAR 0 3
28914: NOT
28915: OR
28916: PUSH
28917: LD_VAR 0 2
28921: PUSH
28922: LD_VAR 0 1
28926: GREATER
28927: OR
28928: PUSH
28929: LD_VAR 0 3
28933: PUSH
28934: LD_VAR 0 1
28938: GREATER
28939: OR
28940: IFFALSE 28944
// exit ;
28942: GO 29240
// if direction then
28944: LD_VAR 0 4
28948: IFFALSE 29012
// begin d := 1 ;
28950: LD_ADDR_VAR 0 9
28954: PUSH
28955: LD_INT 1
28957: ST_TO_ADDR
// if i_from > i_to then
28958: LD_VAR 0 2
28962: PUSH
28963: LD_VAR 0 3
28967: GREATER
28968: IFFALSE 28994
// length := ( array - i_from ) + i_to else
28970: LD_ADDR_VAR 0 11
28974: PUSH
28975: LD_VAR 0 1
28979: PUSH
28980: LD_VAR 0 2
28984: MINUS
28985: PUSH
28986: LD_VAR 0 3
28990: PLUS
28991: ST_TO_ADDR
28992: GO 29010
// length := i_to - i_from ;
28994: LD_ADDR_VAR 0 11
28998: PUSH
28999: LD_VAR 0 3
29003: PUSH
29004: LD_VAR 0 2
29008: MINUS
29009: ST_TO_ADDR
// end else
29010: GO 29073
// begin d := - 1 ;
29012: LD_ADDR_VAR 0 9
29016: PUSH
29017: LD_INT 1
29019: NEG
29020: ST_TO_ADDR
// if i_from > i_to then
29021: LD_VAR 0 2
29025: PUSH
29026: LD_VAR 0 3
29030: GREATER
29031: IFFALSE 29051
// length := i_from - i_to else
29033: LD_ADDR_VAR 0 11
29037: PUSH
29038: LD_VAR 0 2
29042: PUSH
29043: LD_VAR 0 3
29047: MINUS
29048: ST_TO_ADDR
29049: GO 29073
// length := ( array - i_to ) + i_from ;
29051: LD_ADDR_VAR 0 11
29055: PUSH
29056: LD_VAR 0 1
29060: PUSH
29061: LD_VAR 0 3
29065: MINUS
29066: PUSH
29067: LD_VAR 0 2
29071: PLUS
29072: ST_TO_ADDR
// end ; if not length then
29073: LD_VAR 0 11
29077: NOT
29078: IFFALSE 29082
// exit ;
29080: GO 29240
// tmp := array ;
29082: LD_ADDR_VAR 0 10
29086: PUSH
29087: LD_VAR 0 1
29091: ST_TO_ADDR
// for i = 1 to length do
29092: LD_ADDR_VAR 0 6
29096: PUSH
29097: DOUBLE
29098: LD_INT 1
29100: DEC
29101: ST_TO_ADDR
29102: LD_VAR 0 11
29106: PUSH
29107: FOR_TO
29108: IFFALSE 29228
// begin for j = 1 to array do
29110: LD_ADDR_VAR 0 7
29114: PUSH
29115: DOUBLE
29116: LD_INT 1
29118: DEC
29119: ST_TO_ADDR
29120: LD_VAR 0 1
29124: PUSH
29125: FOR_TO
29126: IFFALSE 29214
// begin k := j + d ;
29128: LD_ADDR_VAR 0 8
29132: PUSH
29133: LD_VAR 0 7
29137: PUSH
29138: LD_VAR 0 9
29142: PLUS
29143: ST_TO_ADDR
// if k > array then
29144: LD_VAR 0 8
29148: PUSH
29149: LD_VAR 0 1
29153: GREATER
29154: IFFALSE 29164
// k := 1 ;
29156: LD_ADDR_VAR 0 8
29160: PUSH
29161: LD_INT 1
29163: ST_TO_ADDR
// if not k then
29164: LD_VAR 0 8
29168: NOT
29169: IFFALSE 29181
// k := array ;
29171: LD_ADDR_VAR 0 8
29175: PUSH
29176: LD_VAR 0 1
29180: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29181: LD_ADDR_VAR 0 10
29185: PUSH
29186: LD_VAR 0 10
29190: PPUSH
29191: LD_VAR 0 8
29195: PPUSH
29196: LD_VAR 0 1
29200: PUSH
29201: LD_VAR 0 7
29205: ARRAY
29206: PPUSH
29207: CALL_OW 1
29211: ST_TO_ADDR
// end ;
29212: GO 29125
29214: POP
29215: POP
// array := tmp ;
29216: LD_ADDR_VAR 0 1
29220: PUSH
29221: LD_VAR 0 10
29225: ST_TO_ADDR
// end ;
29226: GO 29107
29228: POP
29229: POP
// result := array ;
29230: LD_ADDR_VAR 0 5
29234: PUSH
29235: LD_VAR 0 1
29239: ST_TO_ADDR
// end ;
29240: LD_VAR 0 5
29244: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29245: LD_INT 0
29247: PPUSH
29248: PPUSH
// result := 0 ;
29249: LD_ADDR_VAR 0 3
29253: PUSH
29254: LD_INT 0
29256: ST_TO_ADDR
// if not array or not value in array then
29257: LD_VAR 0 1
29261: NOT
29262: PUSH
29263: LD_VAR 0 2
29267: PUSH
29268: LD_VAR 0 1
29272: IN
29273: NOT
29274: OR
29275: IFFALSE 29279
// exit ;
29277: GO 29333
// for i = 1 to array do
29279: LD_ADDR_VAR 0 4
29283: PUSH
29284: DOUBLE
29285: LD_INT 1
29287: DEC
29288: ST_TO_ADDR
29289: LD_VAR 0 1
29293: PUSH
29294: FOR_TO
29295: IFFALSE 29331
// if value = array [ i ] then
29297: LD_VAR 0 2
29301: PUSH
29302: LD_VAR 0 1
29306: PUSH
29307: LD_VAR 0 4
29311: ARRAY
29312: EQUAL
29313: IFFALSE 29329
// begin result := i ;
29315: LD_ADDR_VAR 0 3
29319: PUSH
29320: LD_VAR 0 4
29324: ST_TO_ADDR
// exit ;
29325: POP
29326: POP
29327: GO 29333
// end ;
29329: GO 29294
29331: POP
29332: POP
// end ;
29333: LD_VAR 0 3
29337: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29338: LD_INT 0
29340: PPUSH
// vc_chassis := chassis ;
29341: LD_ADDR_OWVAR 37
29345: PUSH
29346: LD_VAR 0 1
29350: ST_TO_ADDR
// vc_engine := engine ;
29351: LD_ADDR_OWVAR 39
29355: PUSH
29356: LD_VAR 0 2
29360: ST_TO_ADDR
// vc_control := control ;
29361: LD_ADDR_OWVAR 38
29365: PUSH
29366: LD_VAR 0 3
29370: ST_TO_ADDR
// vc_weapon := weapon ;
29371: LD_ADDR_OWVAR 40
29375: PUSH
29376: LD_VAR 0 4
29380: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29381: LD_ADDR_OWVAR 41
29385: PUSH
29386: LD_VAR 0 5
29390: ST_TO_ADDR
// end ;
29391: LD_VAR 0 6
29395: RET
// export function WantPlant ( unit ) ; var task ; begin
29396: LD_INT 0
29398: PPUSH
29399: PPUSH
// result := false ;
29400: LD_ADDR_VAR 0 2
29404: PUSH
29405: LD_INT 0
29407: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29408: LD_ADDR_VAR 0 3
29412: PUSH
29413: LD_VAR 0 1
29417: PPUSH
29418: CALL_OW 437
29422: ST_TO_ADDR
// if task then
29423: LD_VAR 0 3
29427: IFFALSE 29455
// if task [ 1 ] [ 1 ] = p then
29429: LD_VAR 0 3
29433: PUSH
29434: LD_INT 1
29436: ARRAY
29437: PUSH
29438: LD_INT 1
29440: ARRAY
29441: PUSH
29442: LD_STRING p
29444: EQUAL
29445: IFFALSE 29455
// result := true ;
29447: LD_ADDR_VAR 0 2
29451: PUSH
29452: LD_INT 1
29454: ST_TO_ADDR
// end ;
29455: LD_VAR 0 2
29459: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29460: LD_INT 0
29462: PPUSH
29463: PPUSH
29464: PPUSH
29465: PPUSH
// if pos < 1 then
29466: LD_VAR 0 2
29470: PUSH
29471: LD_INT 1
29473: LESS
29474: IFFALSE 29478
// exit ;
29476: GO 29781
// if pos = 1 then
29478: LD_VAR 0 2
29482: PUSH
29483: LD_INT 1
29485: EQUAL
29486: IFFALSE 29519
// result := Replace ( arr , pos [ 1 ] , value ) else
29488: LD_ADDR_VAR 0 4
29492: PUSH
29493: LD_VAR 0 1
29497: PPUSH
29498: LD_VAR 0 2
29502: PUSH
29503: LD_INT 1
29505: ARRAY
29506: PPUSH
29507: LD_VAR 0 3
29511: PPUSH
29512: CALL_OW 1
29516: ST_TO_ADDR
29517: GO 29781
// begin tmp := arr ;
29519: LD_ADDR_VAR 0 6
29523: PUSH
29524: LD_VAR 0 1
29528: ST_TO_ADDR
// s_arr := [ tmp ] ;
29529: LD_ADDR_VAR 0 7
29533: PUSH
29534: LD_VAR 0 6
29538: PUSH
29539: EMPTY
29540: LIST
29541: ST_TO_ADDR
// for i = 1 to pos - 1 do
29542: LD_ADDR_VAR 0 5
29546: PUSH
29547: DOUBLE
29548: LD_INT 1
29550: DEC
29551: ST_TO_ADDR
29552: LD_VAR 0 2
29556: PUSH
29557: LD_INT 1
29559: MINUS
29560: PUSH
29561: FOR_TO
29562: IFFALSE 29607
// begin tmp := tmp [ pos [ i ] ] ;
29564: LD_ADDR_VAR 0 6
29568: PUSH
29569: LD_VAR 0 6
29573: PUSH
29574: LD_VAR 0 2
29578: PUSH
29579: LD_VAR 0 5
29583: ARRAY
29584: ARRAY
29585: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29586: LD_ADDR_VAR 0 7
29590: PUSH
29591: LD_VAR 0 7
29595: PUSH
29596: LD_VAR 0 6
29600: PUSH
29601: EMPTY
29602: LIST
29603: ADD
29604: ST_TO_ADDR
// end ;
29605: GO 29561
29607: POP
29608: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29609: LD_ADDR_VAR 0 6
29613: PUSH
29614: LD_VAR 0 6
29618: PPUSH
29619: LD_VAR 0 2
29623: PUSH
29624: LD_VAR 0 2
29628: ARRAY
29629: PPUSH
29630: LD_VAR 0 3
29634: PPUSH
29635: CALL_OW 1
29639: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29640: LD_ADDR_VAR 0 7
29644: PUSH
29645: LD_VAR 0 7
29649: PPUSH
29650: LD_VAR 0 7
29654: PPUSH
29655: LD_VAR 0 6
29659: PPUSH
29660: CALL_OW 1
29664: ST_TO_ADDR
// for i = s_arr downto 2 do
29665: LD_ADDR_VAR 0 5
29669: PUSH
29670: DOUBLE
29671: LD_VAR 0 7
29675: INC
29676: ST_TO_ADDR
29677: LD_INT 2
29679: PUSH
29680: FOR_DOWNTO
29681: IFFALSE 29765
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29683: LD_ADDR_VAR 0 6
29687: PUSH
29688: LD_VAR 0 7
29692: PUSH
29693: LD_VAR 0 5
29697: PUSH
29698: LD_INT 1
29700: MINUS
29701: ARRAY
29702: PPUSH
29703: LD_VAR 0 2
29707: PUSH
29708: LD_VAR 0 5
29712: PUSH
29713: LD_INT 1
29715: MINUS
29716: ARRAY
29717: PPUSH
29718: LD_VAR 0 7
29722: PUSH
29723: LD_VAR 0 5
29727: ARRAY
29728: PPUSH
29729: CALL_OW 1
29733: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29734: LD_ADDR_VAR 0 7
29738: PUSH
29739: LD_VAR 0 7
29743: PPUSH
29744: LD_VAR 0 5
29748: PUSH
29749: LD_INT 1
29751: MINUS
29752: PPUSH
29753: LD_VAR 0 6
29757: PPUSH
29758: CALL_OW 1
29762: ST_TO_ADDR
// end ;
29763: GO 29680
29765: POP
29766: POP
// result := s_arr [ 1 ] ;
29767: LD_ADDR_VAR 0 4
29771: PUSH
29772: LD_VAR 0 7
29776: PUSH
29777: LD_INT 1
29779: ARRAY
29780: ST_TO_ADDR
// end ; end ;
29781: LD_VAR 0 4
29785: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29786: LD_INT 0
29788: PPUSH
29789: PPUSH
// if not list then
29790: LD_VAR 0 1
29794: NOT
29795: IFFALSE 29799
// exit ;
29797: GO 29890
// i := list [ pos1 ] ;
29799: LD_ADDR_VAR 0 5
29803: PUSH
29804: LD_VAR 0 1
29808: PUSH
29809: LD_VAR 0 2
29813: ARRAY
29814: ST_TO_ADDR
// if not i then
29815: LD_VAR 0 5
29819: NOT
29820: IFFALSE 29824
// exit ;
29822: GO 29890
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29824: LD_ADDR_VAR 0 1
29828: PUSH
29829: LD_VAR 0 1
29833: PPUSH
29834: LD_VAR 0 2
29838: PPUSH
29839: LD_VAR 0 1
29843: PUSH
29844: LD_VAR 0 3
29848: ARRAY
29849: PPUSH
29850: CALL_OW 1
29854: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29855: LD_ADDR_VAR 0 1
29859: PUSH
29860: LD_VAR 0 1
29864: PPUSH
29865: LD_VAR 0 3
29869: PPUSH
29870: LD_VAR 0 5
29874: PPUSH
29875: CALL_OW 1
29879: ST_TO_ADDR
// result := list ;
29880: LD_ADDR_VAR 0 4
29884: PUSH
29885: LD_VAR 0 1
29889: ST_TO_ADDR
// end ;
29890: LD_VAR 0 4
29894: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29895: LD_INT 0
29897: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29898: LD_ADDR_VAR 0 5
29902: PUSH
29903: LD_VAR 0 1
29907: PPUSH
29908: CALL_OW 250
29912: PPUSH
29913: LD_VAR 0 1
29917: PPUSH
29918: CALL_OW 251
29922: PPUSH
29923: LD_VAR 0 2
29927: PPUSH
29928: LD_VAR 0 3
29932: PPUSH
29933: LD_VAR 0 4
29937: PPUSH
29938: CALL 29948 0 5
29942: ST_TO_ADDR
// end ;
29943: LD_VAR 0 5
29947: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29948: LD_INT 0
29950: PPUSH
29951: PPUSH
29952: PPUSH
29953: PPUSH
// if not list then
29954: LD_VAR 0 3
29958: NOT
29959: IFFALSE 29963
// exit ;
29961: GO 30351
// result := [ ] ;
29963: LD_ADDR_VAR 0 6
29967: PUSH
29968: EMPTY
29969: ST_TO_ADDR
// for i in list do
29970: LD_ADDR_VAR 0 7
29974: PUSH
29975: LD_VAR 0 3
29979: PUSH
29980: FOR_IN
29981: IFFALSE 30183
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29983: LD_ADDR_VAR 0 9
29987: PUSH
29988: LD_VAR 0 7
29992: PPUSH
29993: LD_VAR 0 1
29997: PPUSH
29998: LD_VAR 0 2
30002: PPUSH
30003: CALL_OW 297
30007: ST_TO_ADDR
// if not result then
30008: LD_VAR 0 6
30012: NOT
30013: IFFALSE 30039
// result := [ [ i , tmp ] ] else
30015: LD_ADDR_VAR 0 6
30019: PUSH
30020: LD_VAR 0 7
30024: PUSH
30025: LD_VAR 0 9
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: EMPTY
30035: LIST
30036: ST_TO_ADDR
30037: GO 30181
// begin if result [ result ] [ 2 ] < tmp then
30039: LD_VAR 0 6
30043: PUSH
30044: LD_VAR 0 6
30048: ARRAY
30049: PUSH
30050: LD_INT 2
30052: ARRAY
30053: PUSH
30054: LD_VAR 0 9
30058: LESS
30059: IFFALSE 30101
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30061: LD_ADDR_VAR 0 6
30065: PUSH
30066: LD_VAR 0 6
30070: PPUSH
30071: LD_VAR 0 6
30075: PUSH
30076: LD_INT 1
30078: PLUS
30079: PPUSH
30080: LD_VAR 0 7
30084: PUSH
30085: LD_VAR 0 9
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PPUSH
30094: CALL_OW 2
30098: ST_TO_ADDR
30099: GO 30181
// for j = 1 to result do
30101: LD_ADDR_VAR 0 8
30105: PUSH
30106: DOUBLE
30107: LD_INT 1
30109: DEC
30110: ST_TO_ADDR
30111: LD_VAR 0 6
30115: PUSH
30116: FOR_TO
30117: IFFALSE 30179
// begin if tmp < result [ j ] [ 2 ] then
30119: LD_VAR 0 9
30123: PUSH
30124: LD_VAR 0 6
30128: PUSH
30129: LD_VAR 0 8
30133: ARRAY
30134: PUSH
30135: LD_INT 2
30137: ARRAY
30138: LESS
30139: IFFALSE 30177
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30141: LD_ADDR_VAR 0 6
30145: PUSH
30146: LD_VAR 0 6
30150: PPUSH
30151: LD_VAR 0 8
30155: PPUSH
30156: LD_VAR 0 7
30160: PUSH
30161: LD_VAR 0 9
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PPUSH
30170: CALL_OW 2
30174: ST_TO_ADDR
// break ;
30175: GO 30179
// end ; end ;
30177: GO 30116
30179: POP
30180: POP
// end ; end ;
30181: GO 29980
30183: POP
30184: POP
// if result and not asc then
30185: LD_VAR 0 6
30189: PUSH
30190: LD_VAR 0 4
30194: NOT
30195: AND
30196: IFFALSE 30271
// begin tmp := result ;
30198: LD_ADDR_VAR 0 9
30202: PUSH
30203: LD_VAR 0 6
30207: ST_TO_ADDR
// for i = tmp downto 1 do
30208: LD_ADDR_VAR 0 7
30212: PUSH
30213: DOUBLE
30214: LD_VAR 0 9
30218: INC
30219: ST_TO_ADDR
30220: LD_INT 1
30222: PUSH
30223: FOR_DOWNTO
30224: IFFALSE 30269
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30226: LD_ADDR_VAR 0 6
30230: PUSH
30231: LD_VAR 0 6
30235: PPUSH
30236: LD_VAR 0 9
30240: PUSH
30241: LD_VAR 0 7
30245: MINUS
30246: PUSH
30247: LD_INT 1
30249: PLUS
30250: PPUSH
30251: LD_VAR 0 9
30255: PUSH
30256: LD_VAR 0 7
30260: ARRAY
30261: PPUSH
30262: CALL_OW 1
30266: ST_TO_ADDR
30267: GO 30223
30269: POP
30270: POP
// end ; tmp := [ ] ;
30271: LD_ADDR_VAR 0 9
30275: PUSH
30276: EMPTY
30277: ST_TO_ADDR
// if mode then
30278: LD_VAR 0 5
30282: IFFALSE 30351
// begin for i = 1 to result do
30284: LD_ADDR_VAR 0 7
30288: PUSH
30289: DOUBLE
30290: LD_INT 1
30292: DEC
30293: ST_TO_ADDR
30294: LD_VAR 0 6
30298: PUSH
30299: FOR_TO
30300: IFFALSE 30339
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30302: LD_ADDR_VAR 0 9
30306: PUSH
30307: LD_VAR 0 9
30311: PPUSH
30312: LD_VAR 0 7
30316: PPUSH
30317: LD_VAR 0 6
30321: PUSH
30322: LD_VAR 0 7
30326: ARRAY
30327: PUSH
30328: LD_INT 1
30330: ARRAY
30331: PPUSH
30332: CALL_OW 1
30336: ST_TO_ADDR
30337: GO 30299
30339: POP
30340: POP
// result := tmp ;
30341: LD_ADDR_VAR 0 6
30345: PUSH
30346: LD_VAR 0 9
30350: ST_TO_ADDR
// end ; end ;
30351: LD_VAR 0 6
30355: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30356: LD_INT 0
30358: PPUSH
30359: PPUSH
30360: PPUSH
30361: PPUSH
30362: PPUSH
30363: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30364: LD_ADDR_VAR 0 5
30368: PUSH
30369: LD_INT 0
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: EMPTY
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: ST_TO_ADDR
// if not x or not y then
30386: LD_VAR 0 2
30390: NOT
30391: PUSH
30392: LD_VAR 0 3
30396: NOT
30397: OR
30398: IFFALSE 30402
// exit ;
30400: GO 32054
// if not range then
30402: LD_VAR 0 4
30406: NOT
30407: IFFALSE 30417
// range := 10 ;
30409: LD_ADDR_VAR 0 4
30413: PUSH
30414: LD_INT 10
30416: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30417: LD_ADDR_VAR 0 8
30421: PUSH
30422: LD_INT 81
30424: PUSH
30425: LD_VAR 0 1
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 92
30436: PUSH
30437: LD_VAR 0 2
30441: PUSH
30442: LD_VAR 0 3
30446: PUSH
30447: LD_VAR 0 4
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 3
30460: PUSH
30461: LD_INT 21
30463: PUSH
30464: LD_INT 3
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: LIST
30479: PPUSH
30480: CALL_OW 69
30484: ST_TO_ADDR
// if not tmp then
30485: LD_VAR 0 8
30489: NOT
30490: IFFALSE 30494
// exit ;
30492: GO 32054
// for i in tmp do
30494: LD_ADDR_VAR 0 6
30498: PUSH
30499: LD_VAR 0 8
30503: PUSH
30504: FOR_IN
30505: IFFALSE 32029
// begin points := [ 0 , 0 , 0 ] ;
30507: LD_ADDR_VAR 0 9
30511: PUSH
30512: LD_INT 0
30514: PUSH
30515: LD_INT 0
30517: PUSH
30518: LD_INT 0
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: LIST
30525: ST_TO_ADDR
// bpoints := 1 ;
30526: LD_ADDR_VAR 0 10
30530: PUSH
30531: LD_INT 1
30533: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30534: LD_VAR 0 6
30538: PPUSH
30539: CALL_OW 247
30543: PUSH
30544: LD_INT 1
30546: DOUBLE
30547: EQUAL
30548: IFTRUE 30552
30550: GO 31130
30552: POP
// begin if GetClass ( i ) = 1 then
30553: LD_VAR 0 6
30557: PPUSH
30558: CALL_OW 257
30562: PUSH
30563: LD_INT 1
30565: EQUAL
30566: IFFALSE 30587
// points := [ 10 , 5 , 3 ] ;
30568: LD_ADDR_VAR 0 9
30572: PUSH
30573: LD_INT 10
30575: PUSH
30576: LD_INT 5
30578: PUSH
30579: LD_INT 3
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: LIST
30586: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30587: LD_VAR 0 6
30591: PPUSH
30592: CALL_OW 257
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: LD_INT 3
30602: PUSH
30603: LD_INT 4
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: LIST
30610: IN
30611: IFFALSE 30632
// points := [ 3 , 2 , 1 ] ;
30613: LD_ADDR_VAR 0 9
30617: PUSH
30618: LD_INT 3
30620: PUSH
30621: LD_INT 2
30623: PUSH
30624: LD_INT 1
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: LIST
30631: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30632: LD_VAR 0 6
30636: PPUSH
30637: CALL_OW 257
30641: PUSH
30642: LD_INT 5
30644: EQUAL
30645: IFFALSE 30666
// points := [ 130 , 5 , 2 ] ;
30647: LD_ADDR_VAR 0 9
30651: PUSH
30652: LD_INT 130
30654: PUSH
30655: LD_INT 5
30657: PUSH
30658: LD_INT 2
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: LIST
30665: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30666: LD_VAR 0 6
30670: PPUSH
30671: CALL_OW 257
30675: PUSH
30676: LD_INT 8
30678: EQUAL
30679: IFFALSE 30700
// points := [ 35 , 35 , 30 ] ;
30681: LD_ADDR_VAR 0 9
30685: PUSH
30686: LD_INT 35
30688: PUSH
30689: LD_INT 35
30691: PUSH
30692: LD_INT 30
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: LIST
30699: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30700: LD_VAR 0 6
30704: PPUSH
30705: CALL_OW 257
30709: PUSH
30710: LD_INT 9
30712: EQUAL
30713: IFFALSE 30734
// points := [ 20 , 55 , 40 ] ;
30715: LD_ADDR_VAR 0 9
30719: PUSH
30720: LD_INT 20
30722: PUSH
30723: LD_INT 55
30725: PUSH
30726: LD_INT 40
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: LIST
30733: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30734: LD_VAR 0 6
30738: PPUSH
30739: CALL_OW 257
30743: PUSH
30744: LD_INT 12
30746: PUSH
30747: LD_INT 16
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: IN
30754: IFFALSE 30775
// points := [ 5 , 3 , 2 ] ;
30756: LD_ADDR_VAR 0 9
30760: PUSH
30761: LD_INT 5
30763: PUSH
30764: LD_INT 3
30766: PUSH
30767: LD_INT 2
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: LIST
30774: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30775: LD_VAR 0 6
30779: PPUSH
30780: CALL_OW 257
30784: PUSH
30785: LD_INT 17
30787: EQUAL
30788: IFFALSE 30809
// points := [ 100 , 50 , 75 ] ;
30790: LD_ADDR_VAR 0 9
30794: PUSH
30795: LD_INT 100
30797: PUSH
30798: LD_INT 50
30800: PUSH
30801: LD_INT 75
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: LIST
30808: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30809: LD_VAR 0 6
30813: PPUSH
30814: CALL_OW 257
30818: PUSH
30819: LD_INT 15
30821: EQUAL
30822: IFFALSE 30843
// points := [ 10 , 5 , 3 ] ;
30824: LD_ADDR_VAR 0 9
30828: PUSH
30829: LD_INT 10
30831: PUSH
30832: LD_INT 5
30834: PUSH
30835: LD_INT 3
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: LIST
30842: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30843: LD_VAR 0 6
30847: PPUSH
30848: CALL_OW 257
30852: PUSH
30853: LD_INT 14
30855: EQUAL
30856: IFFALSE 30877
// points := [ 10 , 0 , 0 ] ;
30858: LD_ADDR_VAR 0 9
30862: PUSH
30863: LD_INT 10
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: LD_INT 0
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: LIST
30876: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30877: LD_VAR 0 6
30881: PPUSH
30882: CALL_OW 257
30886: PUSH
30887: LD_INT 11
30889: EQUAL
30890: IFFALSE 30911
// points := [ 30 , 10 , 5 ] ;
30892: LD_ADDR_VAR 0 9
30896: PUSH
30897: LD_INT 30
30899: PUSH
30900: LD_INT 10
30902: PUSH
30903: LD_INT 5
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: LIST
30910: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30911: LD_VAR 0 1
30915: PPUSH
30916: LD_INT 5
30918: PPUSH
30919: CALL_OW 321
30923: PUSH
30924: LD_INT 2
30926: EQUAL
30927: IFFALSE 30944
// bpoints := bpoints * 1.8 ;
30929: LD_ADDR_VAR 0 10
30933: PUSH
30934: LD_VAR 0 10
30938: PUSH
30939: LD_REAL  1.80000000000000E+0000
30942: MUL
30943: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30944: LD_VAR 0 6
30948: PPUSH
30949: CALL_OW 257
30953: PUSH
30954: LD_INT 1
30956: PUSH
30957: LD_INT 2
30959: PUSH
30960: LD_INT 3
30962: PUSH
30963: LD_INT 4
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: IN
30972: PUSH
30973: LD_VAR 0 1
30977: PPUSH
30978: LD_INT 51
30980: PPUSH
30981: CALL_OW 321
30985: PUSH
30986: LD_INT 2
30988: EQUAL
30989: AND
30990: IFFALSE 31007
// bpoints := bpoints * 1.2 ;
30992: LD_ADDR_VAR 0 10
30996: PUSH
30997: LD_VAR 0 10
31001: PUSH
31002: LD_REAL  1.20000000000000E+0000
31005: MUL
31006: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31007: LD_VAR 0 6
31011: PPUSH
31012: CALL_OW 257
31016: PUSH
31017: LD_INT 5
31019: PUSH
31020: LD_INT 7
31022: PUSH
31023: LD_INT 9
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: LIST
31030: IN
31031: PUSH
31032: LD_VAR 0 1
31036: PPUSH
31037: LD_INT 52
31039: PPUSH
31040: CALL_OW 321
31044: PUSH
31045: LD_INT 2
31047: EQUAL
31048: AND
31049: IFFALSE 31066
// bpoints := bpoints * 1.5 ;
31051: LD_ADDR_VAR 0 10
31055: PUSH
31056: LD_VAR 0 10
31060: PUSH
31061: LD_REAL  1.50000000000000E+0000
31064: MUL
31065: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31066: LD_VAR 0 1
31070: PPUSH
31071: LD_INT 66
31073: PPUSH
31074: CALL_OW 321
31078: PUSH
31079: LD_INT 2
31081: EQUAL
31082: IFFALSE 31099
// bpoints := bpoints * 1.1 ;
31084: LD_ADDR_VAR 0 10
31088: PUSH
31089: LD_VAR 0 10
31093: PUSH
31094: LD_REAL  1.10000000000000E+0000
31097: MUL
31098: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31099: LD_ADDR_VAR 0 10
31103: PUSH
31104: LD_VAR 0 10
31108: PUSH
31109: LD_VAR 0 6
31113: PPUSH
31114: LD_INT 1
31116: PPUSH
31117: CALL_OW 259
31121: PUSH
31122: LD_REAL  1.15000000000000E+0000
31125: MUL
31126: MUL
31127: ST_TO_ADDR
// end ; unit_vehicle :
31128: GO 31958
31130: LD_INT 2
31132: DOUBLE
31133: EQUAL
31134: IFTRUE 31138
31136: GO 31946
31138: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31139: LD_VAR 0 6
31143: PPUSH
31144: CALL_OW 264
31148: PUSH
31149: LD_INT 2
31151: PUSH
31152: LD_INT 42
31154: PUSH
31155: LD_INT 24
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: LIST
31162: IN
31163: IFFALSE 31184
// points := [ 25 , 5 , 3 ] ;
31165: LD_ADDR_VAR 0 9
31169: PUSH
31170: LD_INT 25
31172: PUSH
31173: LD_INT 5
31175: PUSH
31176: LD_INT 3
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: LIST
31183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31184: LD_VAR 0 6
31188: PPUSH
31189: CALL_OW 264
31193: PUSH
31194: LD_INT 4
31196: PUSH
31197: LD_INT 43
31199: PUSH
31200: LD_INT 25
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: LIST
31207: IN
31208: IFFALSE 31229
// points := [ 40 , 15 , 5 ] ;
31210: LD_ADDR_VAR 0 9
31214: PUSH
31215: LD_INT 40
31217: PUSH
31218: LD_INT 15
31220: PUSH
31221: LD_INT 5
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: LIST
31228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31229: LD_VAR 0 6
31233: PPUSH
31234: CALL_OW 264
31238: PUSH
31239: LD_INT 3
31241: PUSH
31242: LD_INT 23
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: IN
31249: IFFALSE 31270
// points := [ 7 , 25 , 8 ] ;
31251: LD_ADDR_VAR 0 9
31255: PUSH
31256: LD_INT 7
31258: PUSH
31259: LD_INT 25
31261: PUSH
31262: LD_INT 8
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: LIST
31269: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31270: LD_VAR 0 6
31274: PPUSH
31275: CALL_OW 264
31279: PUSH
31280: LD_INT 5
31282: PUSH
31283: LD_INT 27
31285: PUSH
31286: LD_INT 44
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: LIST
31293: IN
31294: IFFALSE 31315
// points := [ 14 , 50 , 16 ] ;
31296: LD_ADDR_VAR 0 9
31300: PUSH
31301: LD_INT 14
31303: PUSH
31304: LD_INT 50
31306: PUSH
31307: LD_INT 16
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: LIST
31314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31315: LD_VAR 0 6
31319: PPUSH
31320: CALL_OW 264
31324: PUSH
31325: LD_INT 6
31327: PUSH
31328: LD_INT 46
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: IN
31335: IFFALSE 31356
// points := [ 32 , 120 , 70 ] ;
31337: LD_ADDR_VAR 0 9
31341: PUSH
31342: LD_INT 32
31344: PUSH
31345: LD_INT 120
31347: PUSH
31348: LD_INT 70
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: LIST
31355: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31356: LD_VAR 0 6
31360: PPUSH
31361: CALL_OW 264
31365: PUSH
31366: LD_INT 7
31368: PUSH
31369: LD_INT 28
31371: PUSH
31372: LD_INT 45
31374: PUSH
31375: LD_EXP 63
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: IN
31386: IFFALSE 31407
// points := [ 35 , 20 , 45 ] ;
31388: LD_ADDR_VAR 0 9
31392: PUSH
31393: LD_INT 35
31395: PUSH
31396: LD_INT 20
31398: PUSH
31399: LD_INT 45
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: LIST
31406: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31407: LD_VAR 0 6
31411: PPUSH
31412: CALL_OW 264
31416: PUSH
31417: LD_INT 47
31419: PUSH
31420: EMPTY
31421: LIST
31422: IN
31423: IFFALSE 31444
// points := [ 67 , 45 , 75 ] ;
31425: LD_ADDR_VAR 0 9
31429: PUSH
31430: LD_INT 67
31432: PUSH
31433: LD_INT 45
31435: PUSH
31436: LD_INT 75
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: LIST
31443: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31444: LD_VAR 0 6
31448: PPUSH
31449: CALL_OW 264
31453: PUSH
31454: LD_INT 26
31456: PUSH
31457: EMPTY
31458: LIST
31459: IN
31460: IFFALSE 31481
// points := [ 120 , 30 , 80 ] ;
31462: LD_ADDR_VAR 0 9
31466: PUSH
31467: LD_INT 120
31469: PUSH
31470: LD_INT 30
31472: PUSH
31473: LD_INT 80
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: LIST
31480: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31481: LD_VAR 0 6
31485: PPUSH
31486: CALL_OW 264
31490: PUSH
31491: LD_INT 22
31493: PUSH
31494: EMPTY
31495: LIST
31496: IN
31497: IFFALSE 31518
// points := [ 40 , 1 , 1 ] ;
31499: LD_ADDR_VAR 0 9
31503: PUSH
31504: LD_INT 40
31506: PUSH
31507: LD_INT 1
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: LIST
31517: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31518: LD_VAR 0 6
31522: PPUSH
31523: CALL_OW 264
31527: PUSH
31528: LD_INT 29
31530: PUSH
31531: EMPTY
31532: LIST
31533: IN
31534: IFFALSE 31555
// points := [ 70 , 200 , 400 ] ;
31536: LD_ADDR_VAR 0 9
31540: PUSH
31541: LD_INT 70
31543: PUSH
31544: LD_INT 200
31546: PUSH
31547: LD_INT 400
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: LIST
31554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31555: LD_VAR 0 6
31559: PPUSH
31560: CALL_OW 264
31564: PUSH
31565: LD_INT 14
31567: PUSH
31568: LD_INT 53
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: IN
31575: IFFALSE 31596
// points := [ 40 , 10 , 20 ] ;
31577: LD_ADDR_VAR 0 9
31581: PUSH
31582: LD_INT 40
31584: PUSH
31585: LD_INT 10
31587: PUSH
31588: LD_INT 20
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: LIST
31595: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31596: LD_VAR 0 6
31600: PPUSH
31601: CALL_OW 264
31605: PUSH
31606: LD_INT 9
31608: PUSH
31609: EMPTY
31610: LIST
31611: IN
31612: IFFALSE 31633
// points := [ 5 , 70 , 20 ] ;
31614: LD_ADDR_VAR 0 9
31618: PUSH
31619: LD_INT 5
31621: PUSH
31622: LD_INT 70
31624: PUSH
31625: LD_INT 20
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: LIST
31632: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31633: LD_VAR 0 6
31637: PPUSH
31638: CALL_OW 264
31642: PUSH
31643: LD_INT 10
31645: PUSH
31646: EMPTY
31647: LIST
31648: IN
31649: IFFALSE 31670
// points := [ 35 , 110 , 70 ] ;
31651: LD_ADDR_VAR 0 9
31655: PUSH
31656: LD_INT 35
31658: PUSH
31659: LD_INT 110
31661: PUSH
31662: LD_INT 70
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: LIST
31669: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31670: LD_VAR 0 6
31674: PPUSH
31675: CALL_OW 265
31679: PUSH
31680: LD_INT 25
31682: EQUAL
31683: IFFALSE 31704
// points := [ 80 , 65 , 100 ] ;
31685: LD_ADDR_VAR 0 9
31689: PUSH
31690: LD_INT 80
31692: PUSH
31693: LD_INT 65
31695: PUSH
31696: LD_INT 100
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: LIST
31703: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31704: LD_VAR 0 6
31708: PPUSH
31709: CALL_OW 263
31713: PUSH
31714: LD_INT 1
31716: EQUAL
31717: IFFALSE 31752
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31719: LD_ADDR_VAR 0 10
31723: PUSH
31724: LD_VAR 0 10
31728: PUSH
31729: LD_VAR 0 6
31733: PPUSH
31734: CALL_OW 311
31738: PPUSH
31739: LD_INT 3
31741: PPUSH
31742: CALL_OW 259
31746: PUSH
31747: LD_INT 4
31749: MUL
31750: MUL
31751: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31752: LD_VAR 0 6
31756: PPUSH
31757: CALL_OW 263
31761: PUSH
31762: LD_INT 2
31764: EQUAL
31765: IFFALSE 31816
// begin j := IsControledBy ( i ) ;
31767: LD_ADDR_VAR 0 7
31771: PUSH
31772: LD_VAR 0 6
31776: PPUSH
31777: CALL_OW 312
31781: ST_TO_ADDR
// if j then
31782: LD_VAR 0 7
31786: IFFALSE 31816
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31788: LD_ADDR_VAR 0 10
31792: PUSH
31793: LD_VAR 0 10
31797: PUSH
31798: LD_VAR 0 7
31802: PPUSH
31803: LD_INT 3
31805: PPUSH
31806: CALL_OW 259
31810: PUSH
31811: LD_INT 3
31813: MUL
31814: MUL
31815: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31816: LD_VAR 0 6
31820: PPUSH
31821: CALL_OW 264
31825: PUSH
31826: LD_INT 5
31828: PUSH
31829: LD_INT 6
31831: PUSH
31832: LD_INT 46
31834: PUSH
31835: LD_INT 44
31837: PUSH
31838: LD_INT 47
31840: PUSH
31841: LD_INT 45
31843: PUSH
31844: LD_INT 28
31846: PUSH
31847: LD_INT 7
31849: PUSH
31850: LD_INT 27
31852: PUSH
31853: LD_INT 29
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: IN
31868: PUSH
31869: LD_VAR 0 1
31873: PPUSH
31874: LD_INT 52
31876: PPUSH
31877: CALL_OW 321
31881: PUSH
31882: LD_INT 2
31884: EQUAL
31885: AND
31886: IFFALSE 31903
// bpoints := bpoints * 1.2 ;
31888: LD_ADDR_VAR 0 10
31892: PUSH
31893: LD_VAR 0 10
31897: PUSH
31898: LD_REAL  1.20000000000000E+0000
31901: MUL
31902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31903: LD_VAR 0 6
31907: PPUSH
31908: CALL_OW 264
31912: PUSH
31913: LD_INT 6
31915: PUSH
31916: LD_INT 46
31918: PUSH
31919: LD_INT 47
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: LIST
31926: IN
31927: IFFALSE 31944
// bpoints := bpoints * 1.2 ;
31929: LD_ADDR_VAR 0 10
31933: PUSH
31934: LD_VAR 0 10
31938: PUSH
31939: LD_REAL  1.20000000000000E+0000
31942: MUL
31943: ST_TO_ADDR
// end ; unit_building :
31944: GO 31958
31946: LD_INT 3
31948: DOUBLE
31949: EQUAL
31950: IFTRUE 31954
31952: GO 31957
31954: POP
// ; end ;
31955: GO 31958
31957: POP
// for j = 1 to 3 do
31958: LD_ADDR_VAR 0 7
31962: PUSH
31963: DOUBLE
31964: LD_INT 1
31966: DEC
31967: ST_TO_ADDR
31968: LD_INT 3
31970: PUSH
31971: FOR_TO
31972: IFFALSE 32025
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31974: LD_ADDR_VAR 0 5
31978: PUSH
31979: LD_VAR 0 5
31983: PPUSH
31984: LD_VAR 0 7
31988: PPUSH
31989: LD_VAR 0 5
31993: PUSH
31994: LD_VAR 0 7
31998: ARRAY
31999: PUSH
32000: LD_VAR 0 9
32004: PUSH
32005: LD_VAR 0 7
32009: ARRAY
32010: PUSH
32011: LD_VAR 0 10
32015: MUL
32016: PLUS
32017: PPUSH
32018: CALL_OW 1
32022: ST_TO_ADDR
32023: GO 31971
32025: POP
32026: POP
// end ;
32027: GO 30504
32029: POP
32030: POP
// result := Replace ( result , 4 , tmp ) ;
32031: LD_ADDR_VAR 0 5
32035: PUSH
32036: LD_VAR 0 5
32040: PPUSH
32041: LD_INT 4
32043: PPUSH
32044: LD_VAR 0 8
32048: PPUSH
32049: CALL_OW 1
32053: ST_TO_ADDR
// end ;
32054: LD_VAR 0 5
32058: RET
// export function DangerAtRange ( unit , range ) ; begin
32059: LD_INT 0
32061: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32062: LD_ADDR_VAR 0 3
32066: PUSH
32067: LD_VAR 0 1
32071: PPUSH
32072: CALL_OW 255
32076: PPUSH
32077: LD_VAR 0 1
32081: PPUSH
32082: CALL_OW 250
32086: PPUSH
32087: LD_VAR 0 1
32091: PPUSH
32092: CALL_OW 251
32096: PPUSH
32097: LD_VAR 0 2
32101: PPUSH
32102: CALL 30356 0 4
32106: ST_TO_ADDR
// end ;
32107: LD_VAR 0 3
32111: RET
// export function DangerInArea ( side , area ) ; begin
32112: LD_INT 0
32114: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32115: LD_ADDR_VAR 0 3
32119: PUSH
32120: LD_VAR 0 2
32124: PPUSH
32125: LD_INT 81
32127: PUSH
32128: LD_VAR 0 1
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PPUSH
32137: CALL_OW 70
32141: ST_TO_ADDR
// end ;
32142: LD_VAR 0 3
32146: RET
// export function IsExtension ( b ) ; begin
32147: LD_INT 0
32149: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32150: LD_ADDR_VAR 0 2
32154: PUSH
32155: LD_VAR 0 1
32159: PUSH
32160: LD_INT 23
32162: PUSH
32163: LD_INT 20
32165: PUSH
32166: LD_INT 22
32168: PUSH
32169: LD_INT 17
32171: PUSH
32172: LD_INT 24
32174: PUSH
32175: LD_INT 21
32177: PUSH
32178: LD_INT 19
32180: PUSH
32181: LD_INT 16
32183: PUSH
32184: LD_INT 25
32186: PUSH
32187: LD_INT 18
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: IN
32202: ST_TO_ADDR
// end ;
32203: LD_VAR 0 2
32207: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32208: LD_INT 0
32210: PPUSH
32211: PPUSH
32212: PPUSH
// result := [ ] ;
32213: LD_ADDR_VAR 0 4
32217: PUSH
32218: EMPTY
32219: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32220: LD_ADDR_VAR 0 5
32224: PUSH
32225: LD_VAR 0 2
32229: PPUSH
32230: LD_INT 21
32232: PUSH
32233: LD_INT 3
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PPUSH
32240: CALL_OW 70
32244: ST_TO_ADDR
// if not tmp then
32245: LD_VAR 0 5
32249: NOT
32250: IFFALSE 32254
// exit ;
32252: GO 32318
// if checkLink then
32254: LD_VAR 0 3
32258: IFFALSE 32308
// begin for i in tmp do
32260: LD_ADDR_VAR 0 6
32264: PUSH
32265: LD_VAR 0 5
32269: PUSH
32270: FOR_IN
32271: IFFALSE 32306
// if GetBase ( i ) <> base then
32273: LD_VAR 0 6
32277: PPUSH
32278: CALL_OW 274
32282: PUSH
32283: LD_VAR 0 1
32287: NONEQUAL
32288: IFFALSE 32304
// ComLinkToBase ( base , i ) ;
32290: LD_VAR 0 1
32294: PPUSH
32295: LD_VAR 0 6
32299: PPUSH
32300: CALL_OW 169
32304: GO 32270
32306: POP
32307: POP
// end ; result := tmp ;
32308: LD_ADDR_VAR 0 4
32312: PUSH
32313: LD_VAR 0 5
32317: ST_TO_ADDR
// end ;
32318: LD_VAR 0 4
32322: RET
// export function ComComplete ( units , b ) ; var i ; begin
32323: LD_INT 0
32325: PPUSH
32326: PPUSH
// if not units then
32327: LD_VAR 0 1
32331: NOT
32332: IFFALSE 32336
// exit ;
32334: GO 32426
// for i in units do
32336: LD_ADDR_VAR 0 4
32340: PUSH
32341: LD_VAR 0 1
32345: PUSH
32346: FOR_IN
32347: IFFALSE 32424
// if BuildingStatus ( b ) = bs_build then
32349: LD_VAR 0 2
32353: PPUSH
32354: CALL_OW 461
32358: PUSH
32359: LD_INT 1
32361: EQUAL
32362: IFFALSE 32422
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32364: LD_VAR 0 4
32368: PPUSH
32369: LD_STRING h
32371: PUSH
32372: LD_VAR 0 2
32376: PPUSH
32377: CALL_OW 250
32381: PUSH
32382: LD_VAR 0 2
32386: PPUSH
32387: CALL_OW 251
32391: PUSH
32392: LD_VAR 0 2
32396: PUSH
32397: LD_INT 0
32399: PUSH
32400: LD_INT 0
32402: PUSH
32403: LD_INT 0
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: PUSH
32415: EMPTY
32416: LIST
32417: PPUSH
32418: CALL_OW 446
32422: GO 32346
32424: POP
32425: POP
// end ;
32426: LD_VAR 0 3
32430: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32431: LD_INT 0
32433: PPUSH
32434: PPUSH
32435: PPUSH
32436: PPUSH
32437: PPUSH
32438: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
32439: LD_VAR 0 1
32443: NOT
32444: PUSH
32445: LD_VAR 0 1
32449: PPUSH
32450: CALL_OW 263
32454: PUSH
32455: LD_INT 2
32457: EQUAL
32458: NOT
32459: OR
32460: IFFALSE 32464
// exit ;
32462: GO 32780
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32464: LD_ADDR_VAR 0 6
32468: PUSH
32469: LD_INT 22
32471: PUSH
32472: LD_VAR 0 1
32476: PPUSH
32477: CALL_OW 255
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 2
32488: PUSH
32489: LD_INT 30
32491: PUSH
32492: LD_INT 36
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 34
32501: PUSH
32502: LD_INT 31
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: LIST
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PPUSH
32518: CALL_OW 69
32522: ST_TO_ADDR
// if not tmp then
32523: LD_VAR 0 6
32527: NOT
32528: IFFALSE 32532
// exit ;
32530: GO 32780
// result := [ ] ;
32532: LD_ADDR_VAR 0 2
32536: PUSH
32537: EMPTY
32538: ST_TO_ADDR
// for i in tmp do
32539: LD_ADDR_VAR 0 3
32543: PUSH
32544: LD_VAR 0 6
32548: PUSH
32549: FOR_IN
32550: IFFALSE 32621
// begin t := UnitsInside ( i ) ;
32552: LD_ADDR_VAR 0 4
32556: PUSH
32557: LD_VAR 0 3
32561: PPUSH
32562: CALL_OW 313
32566: ST_TO_ADDR
// if t then
32567: LD_VAR 0 4
32571: IFFALSE 32619
// for j in t do
32573: LD_ADDR_VAR 0 7
32577: PUSH
32578: LD_VAR 0 4
32582: PUSH
32583: FOR_IN
32584: IFFALSE 32617
// result := Insert ( result , result + 1 , j ) ;
32586: LD_ADDR_VAR 0 2
32590: PUSH
32591: LD_VAR 0 2
32595: PPUSH
32596: LD_VAR 0 2
32600: PUSH
32601: LD_INT 1
32603: PLUS
32604: PPUSH
32605: LD_VAR 0 7
32609: PPUSH
32610: CALL_OW 2
32614: ST_TO_ADDR
32615: GO 32583
32617: POP
32618: POP
// end ;
32619: GO 32549
32621: POP
32622: POP
// if not result then
32623: LD_VAR 0 2
32627: NOT
32628: IFFALSE 32632
// exit ;
32630: GO 32780
// mech := result [ 1 ] ;
32632: LD_ADDR_VAR 0 5
32636: PUSH
32637: LD_VAR 0 2
32641: PUSH
32642: LD_INT 1
32644: ARRAY
32645: ST_TO_ADDR
// if result > 1 then
32646: LD_VAR 0 2
32650: PUSH
32651: LD_INT 1
32653: GREATER
32654: IFFALSE 32766
// for i = 2 to result do
32656: LD_ADDR_VAR 0 3
32660: PUSH
32661: DOUBLE
32662: LD_INT 2
32664: DEC
32665: ST_TO_ADDR
32666: LD_VAR 0 2
32670: PUSH
32671: FOR_TO
32672: IFFALSE 32764
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32674: LD_ADDR_VAR 0 4
32678: PUSH
32679: LD_VAR 0 2
32683: PUSH
32684: LD_VAR 0 3
32688: ARRAY
32689: PPUSH
32690: LD_INT 3
32692: PPUSH
32693: CALL_OW 259
32697: PUSH
32698: LD_VAR 0 2
32702: PUSH
32703: LD_VAR 0 3
32707: ARRAY
32708: PPUSH
32709: CALL_OW 432
32713: MINUS
32714: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32715: LD_VAR 0 4
32719: PUSH
32720: LD_VAR 0 5
32724: PPUSH
32725: LD_INT 3
32727: PPUSH
32728: CALL_OW 259
32732: PUSH
32733: LD_VAR 0 5
32737: PPUSH
32738: CALL_OW 432
32742: MINUS
32743: GREATEREQUAL
32744: IFFALSE 32762
// mech := result [ i ] ;
32746: LD_ADDR_VAR 0 5
32750: PUSH
32751: LD_VAR 0 2
32755: PUSH
32756: LD_VAR 0 3
32760: ARRAY
32761: ST_TO_ADDR
// end ;
32762: GO 32671
32764: POP
32765: POP
// ComLinkTo ( vehicle , mech ) ;
32766: LD_VAR 0 1
32770: PPUSH
32771: LD_VAR 0 5
32775: PPUSH
32776: CALL_OW 135
// end ;
32780: LD_VAR 0 2
32784: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32785: LD_INT 0
32787: PPUSH
32788: PPUSH
32789: PPUSH
32790: PPUSH
32791: PPUSH
32792: PPUSH
32793: PPUSH
32794: PPUSH
32795: PPUSH
32796: PPUSH
32797: PPUSH
32798: PPUSH
32799: PPUSH
// result := [ ] ;
32800: LD_ADDR_VAR 0 7
32804: PUSH
32805: EMPTY
32806: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32807: LD_VAR 0 1
32811: PPUSH
32812: CALL_OW 266
32816: PUSH
32817: LD_INT 0
32819: PUSH
32820: LD_INT 1
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: IN
32827: NOT
32828: IFFALSE 32832
// exit ;
32830: GO 34466
// if name then
32832: LD_VAR 0 3
32836: IFFALSE 32852
// SetBName ( base_dep , name ) ;
32838: LD_VAR 0 1
32842: PPUSH
32843: LD_VAR 0 3
32847: PPUSH
32848: CALL_OW 500
// base := GetBase ( base_dep ) ;
32852: LD_ADDR_VAR 0 15
32856: PUSH
32857: LD_VAR 0 1
32861: PPUSH
32862: CALL_OW 274
32866: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32867: LD_ADDR_VAR 0 16
32871: PUSH
32872: LD_VAR 0 1
32876: PPUSH
32877: CALL_OW 255
32881: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32882: LD_ADDR_VAR 0 17
32886: PUSH
32887: LD_VAR 0 1
32891: PPUSH
32892: CALL_OW 248
32896: ST_TO_ADDR
// if sources then
32897: LD_VAR 0 5
32901: IFFALSE 32948
// for i = 1 to 3 do
32903: LD_ADDR_VAR 0 8
32907: PUSH
32908: DOUBLE
32909: LD_INT 1
32911: DEC
32912: ST_TO_ADDR
32913: LD_INT 3
32915: PUSH
32916: FOR_TO
32917: IFFALSE 32946
// AddResourceType ( base , i , sources [ i ] ) ;
32919: LD_VAR 0 15
32923: PPUSH
32924: LD_VAR 0 8
32928: PPUSH
32929: LD_VAR 0 5
32933: PUSH
32934: LD_VAR 0 8
32938: ARRAY
32939: PPUSH
32940: CALL_OW 276
32944: GO 32916
32946: POP
32947: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32948: LD_ADDR_VAR 0 18
32952: PUSH
32953: LD_VAR 0 15
32957: PPUSH
32958: LD_VAR 0 2
32962: PPUSH
32963: LD_INT 1
32965: PPUSH
32966: CALL 32208 0 3
32970: ST_TO_ADDR
// InitHc ;
32971: CALL_OW 19
// InitUc ;
32975: CALL_OW 18
// uc_side := side ;
32979: LD_ADDR_OWVAR 20
32983: PUSH
32984: LD_VAR 0 16
32988: ST_TO_ADDR
// uc_nation := nation ;
32989: LD_ADDR_OWVAR 21
32993: PUSH
32994: LD_VAR 0 17
32998: ST_TO_ADDR
// if buildings then
32999: LD_VAR 0 18
33003: IFFALSE 34325
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33005: LD_ADDR_VAR 0 19
33009: PUSH
33010: LD_VAR 0 18
33014: PPUSH
33015: LD_INT 2
33017: PUSH
33018: LD_INT 30
33020: PUSH
33021: LD_INT 29
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 30
33030: PUSH
33031: LD_INT 30
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: LIST
33042: PPUSH
33043: CALL_OW 72
33047: ST_TO_ADDR
// if tmp then
33048: LD_VAR 0 19
33052: IFFALSE 33100
// for i in tmp do
33054: LD_ADDR_VAR 0 8
33058: PUSH
33059: LD_VAR 0 19
33063: PUSH
33064: FOR_IN
33065: IFFALSE 33098
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33067: LD_VAR 0 8
33071: PPUSH
33072: CALL_OW 250
33076: PPUSH
33077: LD_VAR 0 8
33081: PPUSH
33082: CALL_OW 251
33086: PPUSH
33087: LD_VAR 0 16
33091: PPUSH
33092: CALL_OW 441
33096: GO 33064
33098: POP
33099: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33100: LD_VAR 0 18
33104: PPUSH
33105: LD_INT 2
33107: PUSH
33108: LD_INT 30
33110: PUSH
33111: LD_INT 32
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 30
33120: PUSH
33121: LD_INT 33
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: LIST
33132: PPUSH
33133: CALL_OW 72
33137: IFFALSE 33225
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33139: LD_ADDR_VAR 0 8
33143: PUSH
33144: LD_VAR 0 18
33148: PPUSH
33149: LD_INT 2
33151: PUSH
33152: LD_INT 30
33154: PUSH
33155: LD_INT 32
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 30
33164: PUSH
33165: LD_INT 33
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: LIST
33176: PPUSH
33177: CALL_OW 72
33181: PUSH
33182: FOR_IN
33183: IFFALSE 33223
// begin if not GetBWeapon ( i ) then
33185: LD_VAR 0 8
33189: PPUSH
33190: CALL_OW 269
33194: NOT
33195: IFFALSE 33221
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33197: LD_VAR 0 8
33201: PPUSH
33202: LD_VAR 0 8
33206: PPUSH
33207: LD_VAR 0 2
33211: PPUSH
33212: CALL 34471 0 2
33216: PPUSH
33217: CALL_OW 431
// end ;
33221: GO 33182
33223: POP
33224: POP
// end ; for i = 1 to personel do
33225: LD_ADDR_VAR 0 8
33229: PUSH
33230: DOUBLE
33231: LD_INT 1
33233: DEC
33234: ST_TO_ADDR
33235: LD_VAR 0 6
33239: PUSH
33240: FOR_TO
33241: IFFALSE 34305
// begin if i > 4 then
33243: LD_VAR 0 8
33247: PUSH
33248: LD_INT 4
33250: GREATER
33251: IFFALSE 33255
// break ;
33253: GO 34305
// case i of 1 :
33255: LD_VAR 0 8
33259: PUSH
33260: LD_INT 1
33262: DOUBLE
33263: EQUAL
33264: IFTRUE 33268
33266: GO 33348
33268: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33269: LD_ADDR_VAR 0 12
33273: PUSH
33274: LD_VAR 0 18
33278: PPUSH
33279: LD_INT 22
33281: PUSH
33282: LD_VAR 0 16
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 58
33293: PUSH
33294: EMPTY
33295: LIST
33296: PUSH
33297: LD_INT 2
33299: PUSH
33300: LD_INT 30
33302: PUSH
33303: LD_INT 32
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 30
33312: PUSH
33313: LD_INT 4
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 30
33322: PUSH
33323: LD_INT 5
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: LIST
33340: PPUSH
33341: CALL_OW 72
33345: ST_TO_ADDR
33346: GO 33570
33348: LD_INT 2
33350: DOUBLE
33351: EQUAL
33352: IFTRUE 33356
33354: GO 33418
33356: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33357: LD_ADDR_VAR 0 12
33361: PUSH
33362: LD_VAR 0 18
33366: PPUSH
33367: LD_INT 22
33369: PUSH
33370: LD_VAR 0 16
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 2
33381: PUSH
33382: LD_INT 30
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 30
33394: PUSH
33395: LD_INT 1
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: LIST
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PPUSH
33411: CALL_OW 72
33415: ST_TO_ADDR
33416: GO 33570
33418: LD_INT 3
33420: DOUBLE
33421: EQUAL
33422: IFTRUE 33426
33424: GO 33488
33426: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33427: LD_ADDR_VAR 0 12
33431: PUSH
33432: LD_VAR 0 18
33436: PPUSH
33437: LD_INT 22
33439: PUSH
33440: LD_VAR 0 16
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 2
33451: PUSH
33452: LD_INT 30
33454: PUSH
33455: LD_INT 2
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 30
33464: PUSH
33465: LD_INT 3
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: LIST
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PPUSH
33481: CALL_OW 72
33485: ST_TO_ADDR
33486: GO 33570
33488: LD_INT 4
33490: DOUBLE
33491: EQUAL
33492: IFTRUE 33496
33494: GO 33569
33496: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33497: LD_ADDR_VAR 0 12
33501: PUSH
33502: LD_VAR 0 18
33506: PPUSH
33507: LD_INT 22
33509: PUSH
33510: LD_VAR 0 16
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 2
33521: PUSH
33522: LD_INT 30
33524: PUSH
33525: LD_INT 6
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 30
33534: PUSH
33535: LD_INT 7
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 30
33544: PUSH
33545: LD_INT 8
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PPUSH
33562: CALL_OW 72
33566: ST_TO_ADDR
33567: GO 33570
33569: POP
// if i = 1 then
33570: LD_VAR 0 8
33574: PUSH
33575: LD_INT 1
33577: EQUAL
33578: IFFALSE 33689
// begin tmp := [ ] ;
33580: LD_ADDR_VAR 0 19
33584: PUSH
33585: EMPTY
33586: ST_TO_ADDR
// for j in f do
33587: LD_ADDR_VAR 0 9
33591: PUSH
33592: LD_VAR 0 12
33596: PUSH
33597: FOR_IN
33598: IFFALSE 33671
// if GetBType ( j ) = b_bunker then
33600: LD_VAR 0 9
33604: PPUSH
33605: CALL_OW 266
33609: PUSH
33610: LD_INT 32
33612: EQUAL
33613: IFFALSE 33640
// tmp := Insert ( tmp , 1 , j ) else
33615: LD_ADDR_VAR 0 19
33619: PUSH
33620: LD_VAR 0 19
33624: PPUSH
33625: LD_INT 1
33627: PPUSH
33628: LD_VAR 0 9
33632: PPUSH
33633: CALL_OW 2
33637: ST_TO_ADDR
33638: GO 33669
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33640: LD_ADDR_VAR 0 19
33644: PUSH
33645: LD_VAR 0 19
33649: PPUSH
33650: LD_VAR 0 19
33654: PUSH
33655: LD_INT 1
33657: PLUS
33658: PPUSH
33659: LD_VAR 0 9
33663: PPUSH
33664: CALL_OW 2
33668: ST_TO_ADDR
33669: GO 33597
33671: POP
33672: POP
// if tmp then
33673: LD_VAR 0 19
33677: IFFALSE 33689
// f := tmp ;
33679: LD_ADDR_VAR 0 12
33683: PUSH
33684: LD_VAR 0 19
33688: ST_TO_ADDR
// end ; x := personel [ i ] ;
33689: LD_ADDR_VAR 0 13
33693: PUSH
33694: LD_VAR 0 6
33698: PUSH
33699: LD_VAR 0 8
33703: ARRAY
33704: ST_TO_ADDR
// if x = - 1 then
33705: LD_VAR 0 13
33709: PUSH
33710: LD_INT 1
33712: NEG
33713: EQUAL
33714: IFFALSE 33923
// begin for j in f do
33716: LD_ADDR_VAR 0 9
33720: PUSH
33721: LD_VAR 0 12
33725: PUSH
33726: FOR_IN
33727: IFFALSE 33919
// repeat InitHc ;
33729: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33733: LD_VAR 0 9
33737: PPUSH
33738: CALL_OW 266
33742: PUSH
33743: LD_INT 5
33745: EQUAL
33746: IFFALSE 33816
// begin if UnitsInside ( j ) < 3 then
33748: LD_VAR 0 9
33752: PPUSH
33753: CALL_OW 313
33757: PUSH
33758: LD_INT 3
33760: LESS
33761: IFFALSE 33797
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33763: LD_INT 0
33765: PPUSH
33766: LD_INT 5
33768: PUSH
33769: LD_INT 8
33771: PUSH
33772: LD_INT 9
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: LIST
33779: PUSH
33780: LD_VAR 0 17
33784: ARRAY
33785: PPUSH
33786: LD_VAR 0 4
33790: PPUSH
33791: CALL_OW 380
33795: GO 33814
// PrepareHuman ( false , i , skill ) ;
33797: LD_INT 0
33799: PPUSH
33800: LD_VAR 0 8
33804: PPUSH
33805: LD_VAR 0 4
33809: PPUSH
33810: CALL_OW 380
// end else
33814: GO 33833
// PrepareHuman ( false , i , skill ) ;
33816: LD_INT 0
33818: PPUSH
33819: LD_VAR 0 8
33823: PPUSH
33824: LD_VAR 0 4
33828: PPUSH
33829: CALL_OW 380
// un := CreateHuman ;
33833: LD_ADDR_VAR 0 14
33837: PUSH
33838: CALL_OW 44
33842: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33843: LD_ADDR_VAR 0 7
33847: PUSH
33848: LD_VAR 0 7
33852: PPUSH
33853: LD_INT 1
33855: PPUSH
33856: LD_VAR 0 14
33860: PPUSH
33861: CALL_OW 2
33865: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33866: LD_VAR 0 14
33870: PPUSH
33871: LD_VAR 0 9
33875: PPUSH
33876: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33880: LD_VAR 0 9
33884: PPUSH
33885: CALL_OW 313
33889: PUSH
33890: LD_INT 6
33892: EQUAL
33893: PUSH
33894: LD_VAR 0 9
33898: PPUSH
33899: CALL_OW 266
33903: PUSH
33904: LD_INT 32
33906: PUSH
33907: LD_INT 31
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: IN
33914: OR
33915: IFFALSE 33729
33917: GO 33726
33919: POP
33920: POP
// end else
33921: GO 34303
// for j = 1 to x do
33923: LD_ADDR_VAR 0 9
33927: PUSH
33928: DOUBLE
33929: LD_INT 1
33931: DEC
33932: ST_TO_ADDR
33933: LD_VAR 0 13
33937: PUSH
33938: FOR_TO
33939: IFFALSE 34301
// begin InitHc ;
33941: CALL_OW 19
// if not f then
33945: LD_VAR 0 12
33949: NOT
33950: IFFALSE 34039
// begin PrepareHuman ( false , i , skill ) ;
33952: LD_INT 0
33954: PPUSH
33955: LD_VAR 0 8
33959: PPUSH
33960: LD_VAR 0 4
33964: PPUSH
33965: CALL_OW 380
// un := CreateHuman ;
33969: LD_ADDR_VAR 0 14
33973: PUSH
33974: CALL_OW 44
33978: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33979: LD_ADDR_VAR 0 7
33983: PUSH
33984: LD_VAR 0 7
33988: PPUSH
33989: LD_INT 1
33991: PPUSH
33992: LD_VAR 0 14
33996: PPUSH
33997: CALL_OW 2
34001: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34002: LD_VAR 0 14
34006: PPUSH
34007: LD_VAR 0 1
34011: PPUSH
34012: CALL_OW 250
34016: PPUSH
34017: LD_VAR 0 1
34021: PPUSH
34022: CALL_OW 251
34026: PPUSH
34027: LD_INT 10
34029: PPUSH
34030: LD_INT 0
34032: PPUSH
34033: CALL_OW 50
// continue ;
34037: GO 33938
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34039: LD_VAR 0 12
34043: PUSH
34044: LD_INT 1
34046: ARRAY
34047: PPUSH
34048: CALL_OW 313
34052: PUSH
34053: LD_VAR 0 12
34057: PUSH
34058: LD_INT 1
34060: ARRAY
34061: PPUSH
34062: CALL_OW 266
34066: PUSH
34067: LD_INT 32
34069: PUSH
34070: LD_INT 31
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: IN
34077: AND
34078: PUSH
34079: LD_VAR 0 12
34083: PUSH
34084: LD_INT 1
34086: ARRAY
34087: PPUSH
34088: CALL_OW 313
34092: PUSH
34093: LD_INT 6
34095: EQUAL
34096: OR
34097: IFFALSE 34117
// f := Delete ( f , 1 ) ;
34099: LD_ADDR_VAR 0 12
34103: PUSH
34104: LD_VAR 0 12
34108: PPUSH
34109: LD_INT 1
34111: PPUSH
34112: CALL_OW 3
34116: ST_TO_ADDR
// if not f then
34117: LD_VAR 0 12
34121: NOT
34122: IFFALSE 34140
// begin x := x + 2 ;
34124: LD_ADDR_VAR 0 13
34128: PUSH
34129: LD_VAR 0 13
34133: PUSH
34134: LD_INT 2
34136: PLUS
34137: ST_TO_ADDR
// continue ;
34138: GO 33938
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34140: LD_VAR 0 12
34144: PUSH
34145: LD_INT 1
34147: ARRAY
34148: PPUSH
34149: CALL_OW 266
34153: PUSH
34154: LD_INT 5
34156: EQUAL
34157: IFFALSE 34231
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34159: LD_VAR 0 12
34163: PUSH
34164: LD_INT 1
34166: ARRAY
34167: PPUSH
34168: CALL_OW 313
34172: PUSH
34173: LD_INT 3
34175: LESS
34176: IFFALSE 34212
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34178: LD_INT 0
34180: PPUSH
34181: LD_INT 5
34183: PUSH
34184: LD_INT 8
34186: PUSH
34187: LD_INT 9
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: LIST
34194: PUSH
34195: LD_VAR 0 17
34199: ARRAY
34200: PPUSH
34201: LD_VAR 0 4
34205: PPUSH
34206: CALL_OW 380
34210: GO 34229
// PrepareHuman ( false , i , skill ) ;
34212: LD_INT 0
34214: PPUSH
34215: LD_VAR 0 8
34219: PPUSH
34220: LD_VAR 0 4
34224: PPUSH
34225: CALL_OW 380
// end else
34229: GO 34248
// PrepareHuman ( false , i , skill ) ;
34231: LD_INT 0
34233: PPUSH
34234: LD_VAR 0 8
34238: PPUSH
34239: LD_VAR 0 4
34243: PPUSH
34244: CALL_OW 380
// un := CreateHuman ;
34248: LD_ADDR_VAR 0 14
34252: PUSH
34253: CALL_OW 44
34257: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34258: LD_ADDR_VAR 0 7
34262: PUSH
34263: LD_VAR 0 7
34267: PPUSH
34268: LD_INT 1
34270: PPUSH
34271: LD_VAR 0 14
34275: PPUSH
34276: CALL_OW 2
34280: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34281: LD_VAR 0 14
34285: PPUSH
34286: LD_VAR 0 12
34290: PUSH
34291: LD_INT 1
34293: ARRAY
34294: PPUSH
34295: CALL_OW 52
// end ;
34299: GO 33938
34301: POP
34302: POP
// end ;
34303: GO 33240
34305: POP
34306: POP
// result := result ^ buildings ;
34307: LD_ADDR_VAR 0 7
34311: PUSH
34312: LD_VAR 0 7
34316: PUSH
34317: LD_VAR 0 18
34321: ADD
34322: ST_TO_ADDR
// end else
34323: GO 34466
// begin for i = 1 to personel do
34325: LD_ADDR_VAR 0 8
34329: PUSH
34330: DOUBLE
34331: LD_INT 1
34333: DEC
34334: ST_TO_ADDR
34335: LD_VAR 0 6
34339: PUSH
34340: FOR_TO
34341: IFFALSE 34464
// begin if i > 4 then
34343: LD_VAR 0 8
34347: PUSH
34348: LD_INT 4
34350: GREATER
34351: IFFALSE 34355
// break ;
34353: GO 34464
// x := personel [ i ] ;
34355: LD_ADDR_VAR 0 13
34359: PUSH
34360: LD_VAR 0 6
34364: PUSH
34365: LD_VAR 0 8
34369: ARRAY
34370: ST_TO_ADDR
// if x = - 1 then
34371: LD_VAR 0 13
34375: PUSH
34376: LD_INT 1
34378: NEG
34379: EQUAL
34380: IFFALSE 34384
// continue ;
34382: GO 34340
// PrepareHuman ( false , i , skill ) ;
34384: LD_INT 0
34386: PPUSH
34387: LD_VAR 0 8
34391: PPUSH
34392: LD_VAR 0 4
34396: PPUSH
34397: CALL_OW 380
// un := CreateHuman ;
34401: LD_ADDR_VAR 0 14
34405: PUSH
34406: CALL_OW 44
34410: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34411: LD_VAR 0 14
34415: PPUSH
34416: LD_VAR 0 1
34420: PPUSH
34421: CALL_OW 250
34425: PPUSH
34426: LD_VAR 0 1
34430: PPUSH
34431: CALL_OW 251
34435: PPUSH
34436: LD_INT 10
34438: PPUSH
34439: LD_INT 0
34441: PPUSH
34442: CALL_OW 50
// result := result ^ un ;
34446: LD_ADDR_VAR 0 7
34450: PUSH
34451: LD_VAR 0 7
34455: PUSH
34456: LD_VAR 0 14
34460: ADD
34461: ST_TO_ADDR
// end ;
34462: GO 34340
34464: POP
34465: POP
// end ; end ;
34466: LD_VAR 0 7
34470: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34471: LD_INT 0
34473: PPUSH
34474: PPUSH
34475: PPUSH
34476: PPUSH
34477: PPUSH
34478: PPUSH
34479: PPUSH
34480: PPUSH
34481: PPUSH
34482: PPUSH
34483: PPUSH
34484: PPUSH
34485: PPUSH
34486: PPUSH
34487: PPUSH
34488: PPUSH
// result := false ;
34489: LD_ADDR_VAR 0 3
34493: PUSH
34494: LD_INT 0
34496: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34497: LD_VAR 0 1
34501: NOT
34502: PUSH
34503: LD_VAR 0 1
34507: PPUSH
34508: CALL_OW 266
34512: PUSH
34513: LD_INT 32
34515: PUSH
34516: LD_INT 33
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: IN
34523: NOT
34524: OR
34525: IFFALSE 34529
// exit ;
34527: GO 35638
// nat := GetNation ( tower ) ;
34529: LD_ADDR_VAR 0 12
34533: PUSH
34534: LD_VAR 0 1
34538: PPUSH
34539: CALL_OW 248
34543: ST_TO_ADDR
// side := GetSide ( tower ) ;
34544: LD_ADDR_VAR 0 16
34548: PUSH
34549: LD_VAR 0 1
34553: PPUSH
34554: CALL_OW 255
34558: ST_TO_ADDR
// x := GetX ( tower ) ;
34559: LD_ADDR_VAR 0 10
34563: PUSH
34564: LD_VAR 0 1
34568: PPUSH
34569: CALL_OW 250
34573: ST_TO_ADDR
// y := GetY ( tower ) ;
34574: LD_ADDR_VAR 0 11
34578: PUSH
34579: LD_VAR 0 1
34583: PPUSH
34584: CALL_OW 251
34588: ST_TO_ADDR
// if not x or not y then
34589: LD_VAR 0 10
34593: NOT
34594: PUSH
34595: LD_VAR 0 11
34599: NOT
34600: OR
34601: IFFALSE 34605
// exit ;
34603: GO 35638
// weapon := 0 ;
34605: LD_ADDR_VAR 0 18
34609: PUSH
34610: LD_INT 0
34612: ST_TO_ADDR
// fac_list := [ ] ;
34613: LD_ADDR_VAR 0 17
34617: PUSH
34618: EMPTY
34619: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34620: LD_ADDR_VAR 0 6
34624: PUSH
34625: LD_VAR 0 1
34629: PPUSH
34630: CALL_OW 274
34634: PPUSH
34635: LD_VAR 0 2
34639: PPUSH
34640: LD_INT 0
34642: PPUSH
34643: CALL 32208 0 3
34647: PPUSH
34648: LD_INT 30
34650: PUSH
34651: LD_INT 3
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PPUSH
34658: CALL_OW 72
34662: ST_TO_ADDR
// if not factories then
34663: LD_VAR 0 6
34667: NOT
34668: IFFALSE 34672
// exit ;
34670: GO 35638
// for i in factories do
34672: LD_ADDR_VAR 0 8
34676: PUSH
34677: LD_VAR 0 6
34681: PUSH
34682: FOR_IN
34683: IFFALSE 34708
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34685: LD_ADDR_VAR 0 17
34689: PUSH
34690: LD_VAR 0 17
34694: PUSH
34695: LD_VAR 0 8
34699: PPUSH
34700: CALL_OW 478
34704: UNION
34705: ST_TO_ADDR
34706: GO 34682
34708: POP
34709: POP
// if not fac_list then
34710: LD_VAR 0 17
34714: NOT
34715: IFFALSE 34719
// exit ;
34717: GO 35638
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34719: LD_ADDR_VAR 0 5
34723: PUSH
34724: LD_INT 4
34726: PUSH
34727: LD_INT 5
34729: PUSH
34730: LD_INT 9
34732: PUSH
34733: LD_INT 10
34735: PUSH
34736: LD_INT 6
34738: PUSH
34739: LD_INT 7
34741: PUSH
34742: LD_INT 11
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 27
34756: PUSH
34757: LD_INT 28
34759: PUSH
34760: LD_INT 26
34762: PUSH
34763: LD_INT 30
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 43
34774: PUSH
34775: LD_INT 44
34777: PUSH
34778: LD_INT 46
34780: PUSH
34781: LD_INT 45
34783: PUSH
34784: LD_INT 47
34786: PUSH
34787: LD_INT 49
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: LIST
34802: PUSH
34803: LD_VAR 0 12
34807: ARRAY
34808: ST_TO_ADDR
// list := list isect fac_list ;
34809: LD_ADDR_VAR 0 5
34813: PUSH
34814: LD_VAR 0 5
34818: PUSH
34819: LD_VAR 0 17
34823: ISECT
34824: ST_TO_ADDR
// if not list then
34825: LD_VAR 0 5
34829: NOT
34830: IFFALSE 34834
// exit ;
34832: GO 35638
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34834: LD_VAR 0 12
34838: PUSH
34839: LD_INT 3
34841: EQUAL
34842: PUSH
34843: LD_INT 49
34845: PUSH
34846: LD_VAR 0 5
34850: IN
34851: AND
34852: PUSH
34853: LD_INT 31
34855: PPUSH
34856: LD_VAR 0 16
34860: PPUSH
34861: CALL_OW 321
34865: PUSH
34866: LD_INT 2
34868: EQUAL
34869: AND
34870: IFFALSE 34930
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34872: LD_INT 22
34874: PUSH
34875: LD_VAR 0 16
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 35
34886: PUSH
34887: LD_INT 49
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 91
34896: PUSH
34897: LD_VAR 0 1
34901: PUSH
34902: LD_INT 10
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: LIST
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: LIST
34914: PPUSH
34915: CALL_OW 69
34919: NOT
34920: IFFALSE 34930
// weapon := ru_time_lapser ;
34922: LD_ADDR_VAR 0 18
34926: PUSH
34927: LD_INT 49
34929: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34930: LD_VAR 0 12
34934: PUSH
34935: LD_INT 1
34937: PUSH
34938: LD_INT 2
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: IN
34945: PUSH
34946: LD_INT 11
34948: PUSH
34949: LD_VAR 0 5
34953: IN
34954: PUSH
34955: LD_INT 30
34957: PUSH
34958: LD_VAR 0 5
34962: IN
34963: OR
34964: AND
34965: PUSH
34966: LD_INT 6
34968: PPUSH
34969: LD_VAR 0 16
34973: PPUSH
34974: CALL_OW 321
34978: PUSH
34979: LD_INT 2
34981: EQUAL
34982: AND
34983: IFFALSE 35148
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34985: LD_INT 22
34987: PUSH
34988: LD_VAR 0 16
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 2
34999: PUSH
35000: LD_INT 35
35002: PUSH
35003: LD_INT 11
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 35
35012: PUSH
35013: LD_INT 30
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 91
35027: PUSH
35028: LD_VAR 0 1
35032: PUSH
35033: LD_INT 18
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: LIST
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: LIST
35045: PPUSH
35046: CALL_OW 69
35050: NOT
35051: PUSH
35052: LD_INT 22
35054: PUSH
35055: LD_VAR 0 16
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: LD_INT 30
35069: PUSH
35070: LD_INT 32
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 30
35079: PUSH
35080: LD_INT 33
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 91
35094: PUSH
35095: LD_VAR 0 1
35099: PUSH
35100: LD_INT 12
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: LIST
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: LIST
35112: PUSH
35113: EMPTY
35114: LIST
35115: PPUSH
35116: CALL_OW 69
35120: PUSH
35121: LD_INT 2
35123: GREATER
35124: AND
35125: IFFALSE 35148
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35127: LD_ADDR_VAR 0 18
35131: PUSH
35132: LD_INT 11
35134: PUSH
35135: LD_INT 30
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_VAR 0 12
35146: ARRAY
35147: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35148: LD_VAR 0 18
35152: NOT
35153: PUSH
35154: LD_INT 40
35156: PPUSH
35157: LD_VAR 0 16
35161: PPUSH
35162: CALL_OW 321
35166: PUSH
35167: LD_INT 2
35169: EQUAL
35170: AND
35171: PUSH
35172: LD_INT 7
35174: PUSH
35175: LD_VAR 0 5
35179: IN
35180: PUSH
35181: LD_INT 28
35183: PUSH
35184: LD_VAR 0 5
35188: IN
35189: OR
35190: PUSH
35191: LD_INT 45
35193: PUSH
35194: LD_VAR 0 5
35198: IN
35199: OR
35200: AND
35201: IFFALSE 35455
// begin hex := GetHexInfo ( x , y ) ;
35203: LD_ADDR_VAR 0 4
35207: PUSH
35208: LD_VAR 0 10
35212: PPUSH
35213: LD_VAR 0 11
35217: PPUSH
35218: CALL_OW 546
35222: ST_TO_ADDR
// if hex [ 1 ] then
35223: LD_VAR 0 4
35227: PUSH
35228: LD_INT 1
35230: ARRAY
35231: IFFALSE 35235
// exit ;
35233: GO 35638
// height := hex [ 2 ] ;
35235: LD_ADDR_VAR 0 15
35239: PUSH
35240: LD_VAR 0 4
35244: PUSH
35245: LD_INT 2
35247: ARRAY
35248: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35249: LD_ADDR_VAR 0 14
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: LD_INT 2
35259: PUSH
35260: LD_INT 3
35262: PUSH
35263: LD_INT 5
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: ST_TO_ADDR
// for i in tmp do
35272: LD_ADDR_VAR 0 8
35276: PUSH
35277: LD_VAR 0 14
35281: PUSH
35282: FOR_IN
35283: IFFALSE 35453
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35285: LD_ADDR_VAR 0 9
35289: PUSH
35290: LD_VAR 0 10
35294: PPUSH
35295: LD_VAR 0 8
35299: PPUSH
35300: LD_INT 5
35302: PPUSH
35303: CALL_OW 272
35307: PUSH
35308: LD_VAR 0 11
35312: PPUSH
35313: LD_VAR 0 8
35317: PPUSH
35318: LD_INT 5
35320: PPUSH
35321: CALL_OW 273
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35330: LD_VAR 0 9
35334: PUSH
35335: LD_INT 1
35337: ARRAY
35338: PPUSH
35339: LD_VAR 0 9
35343: PUSH
35344: LD_INT 2
35346: ARRAY
35347: PPUSH
35348: CALL_OW 488
35352: IFFALSE 35451
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35354: LD_ADDR_VAR 0 4
35358: PUSH
35359: LD_VAR 0 9
35363: PUSH
35364: LD_INT 1
35366: ARRAY
35367: PPUSH
35368: LD_VAR 0 9
35372: PUSH
35373: LD_INT 2
35375: ARRAY
35376: PPUSH
35377: CALL_OW 546
35381: ST_TO_ADDR
// if hex [ 1 ] then
35382: LD_VAR 0 4
35386: PUSH
35387: LD_INT 1
35389: ARRAY
35390: IFFALSE 35394
// continue ;
35392: GO 35282
// h := hex [ 2 ] ;
35394: LD_ADDR_VAR 0 13
35398: PUSH
35399: LD_VAR 0 4
35403: PUSH
35404: LD_INT 2
35406: ARRAY
35407: ST_TO_ADDR
// if h + 7 < height then
35408: LD_VAR 0 13
35412: PUSH
35413: LD_INT 7
35415: PLUS
35416: PUSH
35417: LD_VAR 0 15
35421: LESS
35422: IFFALSE 35451
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35424: LD_ADDR_VAR 0 18
35428: PUSH
35429: LD_INT 7
35431: PUSH
35432: LD_INT 28
35434: PUSH
35435: LD_INT 45
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: LIST
35442: PUSH
35443: LD_VAR 0 12
35447: ARRAY
35448: ST_TO_ADDR
// break ;
35449: GO 35453
// end ; end ; end ;
35451: GO 35282
35453: POP
35454: POP
// end ; if not weapon then
35455: LD_VAR 0 18
35459: NOT
35460: IFFALSE 35520
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35462: LD_ADDR_VAR 0 5
35466: PUSH
35467: LD_VAR 0 5
35471: PUSH
35472: LD_INT 11
35474: PUSH
35475: LD_INT 30
35477: PUSH
35478: LD_INT 49
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: LIST
35485: DIFF
35486: ST_TO_ADDR
// if not list then
35487: LD_VAR 0 5
35491: NOT
35492: IFFALSE 35496
// exit ;
35494: GO 35638
// weapon := list [ rand ( 1 , list ) ] ;
35496: LD_ADDR_VAR 0 18
35500: PUSH
35501: LD_VAR 0 5
35505: PUSH
35506: LD_INT 1
35508: PPUSH
35509: LD_VAR 0 5
35513: PPUSH
35514: CALL_OW 12
35518: ARRAY
35519: ST_TO_ADDR
// end ; if weapon then
35520: LD_VAR 0 18
35524: IFFALSE 35638
// begin tmp := CostOfWeapon ( weapon ) ;
35526: LD_ADDR_VAR 0 14
35530: PUSH
35531: LD_VAR 0 18
35535: PPUSH
35536: CALL_OW 451
35540: ST_TO_ADDR
// j := GetBase ( tower ) ;
35541: LD_ADDR_VAR 0 9
35545: PUSH
35546: LD_VAR 0 1
35550: PPUSH
35551: CALL_OW 274
35555: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35556: LD_VAR 0 9
35560: PPUSH
35561: LD_INT 1
35563: PPUSH
35564: CALL_OW 275
35568: PUSH
35569: LD_VAR 0 14
35573: PUSH
35574: LD_INT 1
35576: ARRAY
35577: GREATEREQUAL
35578: PUSH
35579: LD_VAR 0 9
35583: PPUSH
35584: LD_INT 2
35586: PPUSH
35587: CALL_OW 275
35591: PUSH
35592: LD_VAR 0 14
35596: PUSH
35597: LD_INT 2
35599: ARRAY
35600: GREATEREQUAL
35601: AND
35602: PUSH
35603: LD_VAR 0 9
35607: PPUSH
35608: LD_INT 3
35610: PPUSH
35611: CALL_OW 275
35615: PUSH
35616: LD_VAR 0 14
35620: PUSH
35621: LD_INT 3
35623: ARRAY
35624: GREATEREQUAL
35625: AND
35626: IFFALSE 35638
// result := weapon ;
35628: LD_ADDR_VAR 0 3
35632: PUSH
35633: LD_VAR 0 18
35637: ST_TO_ADDR
// end ; end ;
35638: LD_VAR 0 3
35642: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35643: LD_INT 0
35645: PPUSH
35646: PPUSH
// result := true ;
35647: LD_ADDR_VAR 0 3
35651: PUSH
35652: LD_INT 1
35654: ST_TO_ADDR
// if array1 = array2 then
35655: LD_VAR 0 1
35659: PUSH
35660: LD_VAR 0 2
35664: EQUAL
35665: IFFALSE 35725
// begin for i = 1 to array1 do
35667: LD_ADDR_VAR 0 4
35671: PUSH
35672: DOUBLE
35673: LD_INT 1
35675: DEC
35676: ST_TO_ADDR
35677: LD_VAR 0 1
35681: PUSH
35682: FOR_TO
35683: IFFALSE 35721
// if array1 [ i ] <> array2 [ i ] then
35685: LD_VAR 0 1
35689: PUSH
35690: LD_VAR 0 4
35694: ARRAY
35695: PUSH
35696: LD_VAR 0 2
35700: PUSH
35701: LD_VAR 0 4
35705: ARRAY
35706: NONEQUAL
35707: IFFALSE 35719
// begin result := false ;
35709: LD_ADDR_VAR 0 3
35713: PUSH
35714: LD_INT 0
35716: ST_TO_ADDR
// break ;
35717: GO 35721
// end ;
35719: GO 35682
35721: POP
35722: POP
// end else
35723: GO 35733
// result := false ;
35725: LD_ADDR_VAR 0 3
35729: PUSH
35730: LD_INT 0
35732: ST_TO_ADDR
// end ;
35733: LD_VAR 0 3
35737: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35738: LD_INT 0
35740: PPUSH
35741: PPUSH
// if not array1 or not array2 then
35742: LD_VAR 0 1
35746: NOT
35747: PUSH
35748: LD_VAR 0 2
35752: NOT
35753: OR
35754: IFFALSE 35758
// exit ;
35756: GO 35822
// result := true ;
35758: LD_ADDR_VAR 0 3
35762: PUSH
35763: LD_INT 1
35765: ST_TO_ADDR
// for i = 1 to array1 do
35766: LD_ADDR_VAR 0 4
35770: PUSH
35771: DOUBLE
35772: LD_INT 1
35774: DEC
35775: ST_TO_ADDR
35776: LD_VAR 0 1
35780: PUSH
35781: FOR_TO
35782: IFFALSE 35820
// if array1 [ i ] <> array2 [ i ] then
35784: LD_VAR 0 1
35788: PUSH
35789: LD_VAR 0 4
35793: ARRAY
35794: PUSH
35795: LD_VAR 0 2
35799: PUSH
35800: LD_VAR 0 4
35804: ARRAY
35805: NONEQUAL
35806: IFFALSE 35818
// begin result := false ;
35808: LD_ADDR_VAR 0 3
35812: PUSH
35813: LD_INT 0
35815: ST_TO_ADDR
// break ;
35816: GO 35820
// end ;
35818: GO 35781
35820: POP
35821: POP
// end ;
35822: LD_VAR 0 3
35826: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35827: LD_INT 0
35829: PPUSH
35830: PPUSH
35831: PPUSH
// pom := GetBase ( fac ) ;
35832: LD_ADDR_VAR 0 5
35836: PUSH
35837: LD_VAR 0 1
35841: PPUSH
35842: CALL_OW 274
35846: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35847: LD_ADDR_VAR 0 4
35851: PUSH
35852: LD_VAR 0 2
35856: PUSH
35857: LD_INT 1
35859: ARRAY
35860: PPUSH
35861: LD_VAR 0 2
35865: PUSH
35866: LD_INT 2
35868: ARRAY
35869: PPUSH
35870: LD_VAR 0 2
35874: PUSH
35875: LD_INT 3
35877: ARRAY
35878: PPUSH
35879: LD_VAR 0 2
35883: PUSH
35884: LD_INT 4
35886: ARRAY
35887: PPUSH
35888: CALL_OW 449
35892: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35893: LD_ADDR_VAR 0 3
35897: PUSH
35898: LD_VAR 0 5
35902: PPUSH
35903: LD_INT 1
35905: PPUSH
35906: CALL_OW 275
35910: PUSH
35911: LD_VAR 0 4
35915: PUSH
35916: LD_INT 1
35918: ARRAY
35919: GREATEREQUAL
35920: PUSH
35921: LD_VAR 0 5
35925: PPUSH
35926: LD_INT 2
35928: PPUSH
35929: CALL_OW 275
35933: PUSH
35934: LD_VAR 0 4
35938: PUSH
35939: LD_INT 2
35941: ARRAY
35942: GREATEREQUAL
35943: AND
35944: PUSH
35945: LD_VAR 0 5
35949: PPUSH
35950: LD_INT 3
35952: PPUSH
35953: CALL_OW 275
35957: PUSH
35958: LD_VAR 0 4
35962: PUSH
35963: LD_INT 3
35965: ARRAY
35966: GREATEREQUAL
35967: AND
35968: ST_TO_ADDR
// end ;
35969: LD_VAR 0 3
35973: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35974: LD_INT 0
35976: PPUSH
35977: PPUSH
35978: PPUSH
35979: PPUSH
// pom := GetBase ( building ) ;
35980: LD_ADDR_VAR 0 3
35984: PUSH
35985: LD_VAR 0 1
35989: PPUSH
35990: CALL_OW 274
35994: ST_TO_ADDR
// if not pom then
35995: LD_VAR 0 3
35999: NOT
36000: IFFALSE 36004
// exit ;
36002: GO 36174
// btype := GetBType ( building ) ;
36004: LD_ADDR_VAR 0 5
36008: PUSH
36009: LD_VAR 0 1
36013: PPUSH
36014: CALL_OW 266
36018: ST_TO_ADDR
// if btype = b_armoury then
36019: LD_VAR 0 5
36023: PUSH
36024: LD_INT 4
36026: EQUAL
36027: IFFALSE 36037
// btype := b_barracks ;
36029: LD_ADDR_VAR 0 5
36033: PUSH
36034: LD_INT 5
36036: ST_TO_ADDR
// if btype = b_depot then
36037: LD_VAR 0 5
36041: PUSH
36042: LD_INT 0
36044: EQUAL
36045: IFFALSE 36055
// btype := b_warehouse ;
36047: LD_ADDR_VAR 0 5
36051: PUSH
36052: LD_INT 1
36054: ST_TO_ADDR
// if btype = b_workshop then
36055: LD_VAR 0 5
36059: PUSH
36060: LD_INT 2
36062: EQUAL
36063: IFFALSE 36073
// btype := b_factory ;
36065: LD_ADDR_VAR 0 5
36069: PUSH
36070: LD_INT 3
36072: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36073: LD_ADDR_VAR 0 4
36077: PUSH
36078: LD_VAR 0 5
36082: PPUSH
36083: LD_VAR 0 1
36087: PPUSH
36088: CALL_OW 248
36092: PPUSH
36093: CALL_OW 450
36097: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36098: LD_ADDR_VAR 0 2
36102: PUSH
36103: LD_VAR 0 3
36107: PPUSH
36108: LD_INT 1
36110: PPUSH
36111: CALL_OW 275
36115: PUSH
36116: LD_VAR 0 4
36120: PUSH
36121: LD_INT 1
36123: ARRAY
36124: GREATEREQUAL
36125: PUSH
36126: LD_VAR 0 3
36130: PPUSH
36131: LD_INT 2
36133: PPUSH
36134: CALL_OW 275
36138: PUSH
36139: LD_VAR 0 4
36143: PUSH
36144: LD_INT 2
36146: ARRAY
36147: GREATEREQUAL
36148: AND
36149: PUSH
36150: LD_VAR 0 3
36154: PPUSH
36155: LD_INT 3
36157: PPUSH
36158: CALL_OW 275
36162: PUSH
36163: LD_VAR 0 4
36167: PUSH
36168: LD_INT 3
36170: ARRAY
36171: GREATEREQUAL
36172: AND
36173: ST_TO_ADDR
// end ;
36174: LD_VAR 0 2
36178: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36179: LD_INT 0
36181: PPUSH
36182: PPUSH
36183: PPUSH
// pom := GetBase ( building ) ;
36184: LD_ADDR_VAR 0 4
36188: PUSH
36189: LD_VAR 0 1
36193: PPUSH
36194: CALL_OW 274
36198: ST_TO_ADDR
// if not pom then
36199: LD_VAR 0 4
36203: NOT
36204: IFFALSE 36208
// exit ;
36206: GO 36309
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36208: LD_ADDR_VAR 0 5
36212: PUSH
36213: LD_VAR 0 2
36217: PPUSH
36218: LD_VAR 0 1
36222: PPUSH
36223: CALL_OW 248
36227: PPUSH
36228: CALL_OW 450
36232: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36233: LD_ADDR_VAR 0 3
36237: PUSH
36238: LD_VAR 0 4
36242: PPUSH
36243: LD_INT 1
36245: PPUSH
36246: CALL_OW 275
36250: PUSH
36251: LD_VAR 0 5
36255: PUSH
36256: LD_INT 1
36258: ARRAY
36259: GREATEREQUAL
36260: PUSH
36261: LD_VAR 0 4
36265: PPUSH
36266: LD_INT 2
36268: PPUSH
36269: CALL_OW 275
36273: PUSH
36274: LD_VAR 0 5
36278: PUSH
36279: LD_INT 2
36281: ARRAY
36282: GREATEREQUAL
36283: AND
36284: PUSH
36285: LD_VAR 0 4
36289: PPUSH
36290: LD_INT 3
36292: PPUSH
36293: CALL_OW 275
36297: PUSH
36298: LD_VAR 0 5
36302: PUSH
36303: LD_INT 3
36305: ARRAY
36306: GREATEREQUAL
36307: AND
36308: ST_TO_ADDR
// end ;
36309: LD_VAR 0 3
36313: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36314: LD_INT 0
36316: PPUSH
36317: PPUSH
36318: PPUSH
36319: PPUSH
36320: PPUSH
36321: PPUSH
36322: PPUSH
36323: PPUSH
36324: PPUSH
36325: PPUSH
36326: PPUSH
// result := false ;
36327: LD_ADDR_VAR 0 8
36331: PUSH
36332: LD_INT 0
36334: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36335: LD_VAR 0 5
36339: NOT
36340: PUSH
36341: LD_VAR 0 1
36345: NOT
36346: OR
36347: PUSH
36348: LD_VAR 0 2
36352: NOT
36353: OR
36354: PUSH
36355: LD_VAR 0 3
36359: NOT
36360: OR
36361: IFFALSE 36365
// exit ;
36363: GO 37179
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36365: LD_ADDR_VAR 0 14
36369: PUSH
36370: LD_VAR 0 1
36374: PPUSH
36375: LD_VAR 0 2
36379: PPUSH
36380: LD_VAR 0 3
36384: PPUSH
36385: LD_VAR 0 4
36389: PPUSH
36390: LD_VAR 0 5
36394: PUSH
36395: LD_INT 1
36397: ARRAY
36398: PPUSH
36399: CALL_OW 248
36403: PPUSH
36404: LD_INT 0
36406: PPUSH
36407: CALL 38416 0 6
36411: ST_TO_ADDR
// if not hexes then
36412: LD_VAR 0 14
36416: NOT
36417: IFFALSE 36421
// exit ;
36419: GO 37179
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36421: LD_ADDR_VAR 0 17
36425: PUSH
36426: LD_VAR 0 5
36430: PPUSH
36431: LD_INT 22
36433: PUSH
36434: LD_VAR 0 13
36438: PPUSH
36439: CALL_OW 255
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 2
36450: PUSH
36451: LD_INT 30
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 30
36463: PUSH
36464: LD_INT 1
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: LIST
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PPUSH
36480: CALL_OW 72
36484: ST_TO_ADDR
// for i = 1 to hexes do
36485: LD_ADDR_VAR 0 9
36489: PUSH
36490: DOUBLE
36491: LD_INT 1
36493: DEC
36494: ST_TO_ADDR
36495: LD_VAR 0 14
36499: PUSH
36500: FOR_TO
36501: IFFALSE 37177
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36503: LD_ADDR_VAR 0 13
36507: PUSH
36508: LD_VAR 0 14
36512: PUSH
36513: LD_VAR 0 9
36517: ARRAY
36518: PUSH
36519: LD_INT 1
36521: ARRAY
36522: PPUSH
36523: LD_VAR 0 14
36527: PUSH
36528: LD_VAR 0 9
36532: ARRAY
36533: PUSH
36534: LD_INT 2
36536: ARRAY
36537: PPUSH
36538: CALL_OW 428
36542: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36543: LD_VAR 0 14
36547: PUSH
36548: LD_VAR 0 9
36552: ARRAY
36553: PUSH
36554: LD_INT 1
36556: ARRAY
36557: PPUSH
36558: LD_VAR 0 14
36562: PUSH
36563: LD_VAR 0 9
36567: ARRAY
36568: PUSH
36569: LD_INT 2
36571: ARRAY
36572: PPUSH
36573: CALL_OW 351
36577: PUSH
36578: LD_VAR 0 14
36582: PUSH
36583: LD_VAR 0 9
36587: ARRAY
36588: PUSH
36589: LD_INT 1
36591: ARRAY
36592: PPUSH
36593: LD_VAR 0 14
36597: PUSH
36598: LD_VAR 0 9
36602: ARRAY
36603: PUSH
36604: LD_INT 2
36606: ARRAY
36607: PPUSH
36608: CALL_OW 488
36612: NOT
36613: OR
36614: PUSH
36615: LD_VAR 0 13
36619: PPUSH
36620: CALL_OW 247
36624: PUSH
36625: LD_INT 3
36627: EQUAL
36628: OR
36629: IFFALSE 36635
// exit ;
36631: POP
36632: POP
36633: GO 37179
// if not tmp then
36635: LD_VAR 0 13
36639: NOT
36640: IFFALSE 36644
// continue ;
36642: GO 36500
// result := true ;
36644: LD_ADDR_VAR 0 8
36648: PUSH
36649: LD_INT 1
36651: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36652: LD_VAR 0 6
36656: PUSH
36657: LD_VAR 0 13
36661: PPUSH
36662: CALL_OW 247
36666: PUSH
36667: LD_INT 2
36669: EQUAL
36670: AND
36671: PUSH
36672: LD_VAR 0 13
36676: PPUSH
36677: CALL_OW 263
36681: PUSH
36682: LD_INT 1
36684: EQUAL
36685: AND
36686: IFFALSE 36850
// begin if IsDrivenBy ( tmp ) then
36688: LD_VAR 0 13
36692: PPUSH
36693: CALL_OW 311
36697: IFFALSE 36701
// continue ;
36699: GO 36500
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36701: LD_VAR 0 6
36705: PPUSH
36706: LD_INT 3
36708: PUSH
36709: LD_INT 60
36711: PUSH
36712: EMPTY
36713: LIST
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 3
36721: PUSH
36722: LD_INT 55
36724: PUSH
36725: EMPTY
36726: LIST
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PPUSH
36736: CALL_OW 72
36740: IFFALSE 36848
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36742: LD_ADDR_VAR 0 18
36746: PUSH
36747: LD_VAR 0 6
36751: PPUSH
36752: LD_INT 3
36754: PUSH
36755: LD_INT 60
36757: PUSH
36758: EMPTY
36759: LIST
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 3
36767: PUSH
36768: LD_INT 55
36770: PUSH
36771: EMPTY
36772: LIST
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PPUSH
36782: CALL_OW 72
36786: PUSH
36787: LD_INT 1
36789: ARRAY
36790: ST_TO_ADDR
// if IsInUnit ( driver ) then
36791: LD_VAR 0 18
36795: PPUSH
36796: CALL_OW 310
36800: IFFALSE 36811
// ComExit ( driver ) ;
36802: LD_VAR 0 18
36806: PPUSH
36807: CALL 61600 0 1
// AddComEnterUnit ( driver , tmp ) ;
36811: LD_VAR 0 18
36815: PPUSH
36816: LD_VAR 0 13
36820: PPUSH
36821: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36825: LD_VAR 0 18
36829: PPUSH
36830: LD_VAR 0 7
36834: PPUSH
36835: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36839: LD_VAR 0 18
36843: PPUSH
36844: CALL_OW 181
// end ; continue ;
36848: GO 36500
// end ; if not cleaners or not tmp in cleaners then
36850: LD_VAR 0 6
36854: NOT
36855: PUSH
36856: LD_VAR 0 13
36860: PUSH
36861: LD_VAR 0 6
36865: IN
36866: NOT
36867: OR
36868: IFFALSE 37175
// begin if dep then
36870: LD_VAR 0 17
36874: IFFALSE 37010
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36876: LD_ADDR_VAR 0 16
36880: PUSH
36881: LD_VAR 0 17
36885: PUSH
36886: LD_INT 1
36888: ARRAY
36889: PPUSH
36890: CALL_OW 250
36894: PPUSH
36895: LD_VAR 0 17
36899: PUSH
36900: LD_INT 1
36902: ARRAY
36903: PPUSH
36904: CALL_OW 254
36908: PPUSH
36909: LD_INT 5
36911: PPUSH
36912: CALL_OW 272
36916: PUSH
36917: LD_VAR 0 17
36921: PUSH
36922: LD_INT 1
36924: ARRAY
36925: PPUSH
36926: CALL_OW 251
36930: PPUSH
36931: LD_VAR 0 17
36935: PUSH
36936: LD_INT 1
36938: ARRAY
36939: PPUSH
36940: CALL_OW 254
36944: PPUSH
36945: LD_INT 5
36947: PPUSH
36948: CALL_OW 273
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36957: LD_VAR 0 16
36961: PUSH
36962: LD_INT 1
36964: ARRAY
36965: PPUSH
36966: LD_VAR 0 16
36970: PUSH
36971: LD_INT 2
36973: ARRAY
36974: PPUSH
36975: CALL_OW 488
36979: IFFALSE 37010
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36981: LD_VAR 0 13
36985: PPUSH
36986: LD_VAR 0 16
36990: PUSH
36991: LD_INT 1
36993: ARRAY
36994: PPUSH
36995: LD_VAR 0 16
36999: PUSH
37000: LD_INT 2
37002: ARRAY
37003: PPUSH
37004: CALL_OW 111
// continue ;
37008: GO 36500
// end ; end ; r := GetDir ( tmp ) ;
37010: LD_ADDR_VAR 0 15
37014: PUSH
37015: LD_VAR 0 13
37019: PPUSH
37020: CALL_OW 254
37024: ST_TO_ADDR
// if r = 5 then
37025: LD_VAR 0 15
37029: PUSH
37030: LD_INT 5
37032: EQUAL
37033: IFFALSE 37043
// r := 0 ;
37035: LD_ADDR_VAR 0 15
37039: PUSH
37040: LD_INT 0
37042: ST_TO_ADDR
// for j = r to 5 do
37043: LD_ADDR_VAR 0 10
37047: PUSH
37048: DOUBLE
37049: LD_VAR 0 15
37053: DEC
37054: ST_TO_ADDR
37055: LD_INT 5
37057: PUSH
37058: FOR_TO
37059: IFFALSE 37173
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37061: LD_ADDR_VAR 0 11
37065: PUSH
37066: LD_VAR 0 13
37070: PPUSH
37071: CALL_OW 250
37075: PPUSH
37076: LD_VAR 0 10
37080: PPUSH
37081: LD_INT 2
37083: PPUSH
37084: CALL_OW 272
37088: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37089: LD_ADDR_VAR 0 12
37093: PUSH
37094: LD_VAR 0 13
37098: PPUSH
37099: CALL_OW 251
37103: PPUSH
37104: LD_VAR 0 10
37108: PPUSH
37109: LD_INT 2
37111: PPUSH
37112: CALL_OW 273
37116: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37117: LD_VAR 0 11
37121: PPUSH
37122: LD_VAR 0 12
37126: PPUSH
37127: CALL_OW 488
37131: PUSH
37132: LD_VAR 0 11
37136: PPUSH
37137: LD_VAR 0 12
37141: PPUSH
37142: CALL_OW 428
37146: NOT
37147: AND
37148: IFFALSE 37171
// begin ComMoveXY ( tmp , _x , _y ) ;
37150: LD_VAR 0 13
37154: PPUSH
37155: LD_VAR 0 11
37159: PPUSH
37160: LD_VAR 0 12
37164: PPUSH
37165: CALL_OW 111
// break ;
37169: GO 37173
// end ; end ;
37171: GO 37058
37173: POP
37174: POP
// end ; end ;
37175: GO 36500
37177: POP
37178: POP
// end ;
37179: LD_VAR 0 8
37183: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37184: LD_INT 0
37186: PPUSH
// result := true ;
37187: LD_ADDR_VAR 0 3
37191: PUSH
37192: LD_INT 1
37194: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37195: LD_VAR 0 2
37199: PUSH
37200: LD_INT 24
37202: DOUBLE
37203: EQUAL
37204: IFTRUE 37214
37206: LD_INT 33
37208: DOUBLE
37209: EQUAL
37210: IFTRUE 37214
37212: GO 37239
37214: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37215: LD_ADDR_VAR 0 3
37219: PUSH
37220: LD_INT 32
37222: PPUSH
37223: LD_VAR 0 1
37227: PPUSH
37228: CALL_OW 321
37232: PUSH
37233: LD_INT 2
37235: EQUAL
37236: ST_TO_ADDR
37237: GO 37559
37239: LD_INT 20
37241: DOUBLE
37242: EQUAL
37243: IFTRUE 37247
37245: GO 37272
37247: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37248: LD_ADDR_VAR 0 3
37252: PUSH
37253: LD_INT 6
37255: PPUSH
37256: LD_VAR 0 1
37260: PPUSH
37261: CALL_OW 321
37265: PUSH
37266: LD_INT 2
37268: EQUAL
37269: ST_TO_ADDR
37270: GO 37559
37272: LD_INT 22
37274: DOUBLE
37275: EQUAL
37276: IFTRUE 37286
37278: LD_INT 36
37280: DOUBLE
37281: EQUAL
37282: IFTRUE 37286
37284: GO 37311
37286: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37287: LD_ADDR_VAR 0 3
37291: PUSH
37292: LD_INT 15
37294: PPUSH
37295: LD_VAR 0 1
37299: PPUSH
37300: CALL_OW 321
37304: PUSH
37305: LD_INT 2
37307: EQUAL
37308: ST_TO_ADDR
37309: GO 37559
37311: LD_INT 30
37313: DOUBLE
37314: EQUAL
37315: IFTRUE 37319
37317: GO 37344
37319: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37320: LD_ADDR_VAR 0 3
37324: PUSH
37325: LD_INT 20
37327: PPUSH
37328: LD_VAR 0 1
37332: PPUSH
37333: CALL_OW 321
37337: PUSH
37338: LD_INT 2
37340: EQUAL
37341: ST_TO_ADDR
37342: GO 37559
37344: LD_INT 28
37346: DOUBLE
37347: EQUAL
37348: IFTRUE 37358
37350: LD_INT 21
37352: DOUBLE
37353: EQUAL
37354: IFTRUE 37358
37356: GO 37383
37358: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37359: LD_ADDR_VAR 0 3
37363: PUSH
37364: LD_INT 21
37366: PPUSH
37367: LD_VAR 0 1
37371: PPUSH
37372: CALL_OW 321
37376: PUSH
37377: LD_INT 2
37379: EQUAL
37380: ST_TO_ADDR
37381: GO 37559
37383: LD_INT 16
37385: DOUBLE
37386: EQUAL
37387: IFTRUE 37391
37389: GO 37418
37391: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37392: LD_ADDR_VAR 0 3
37396: PUSH
37397: LD_EXP 70
37401: PPUSH
37402: LD_VAR 0 1
37406: PPUSH
37407: CALL_OW 321
37411: PUSH
37412: LD_INT 2
37414: EQUAL
37415: ST_TO_ADDR
37416: GO 37559
37418: LD_INT 19
37420: DOUBLE
37421: EQUAL
37422: IFTRUE 37432
37424: LD_INT 23
37426: DOUBLE
37427: EQUAL
37428: IFTRUE 37432
37430: GO 37459
37432: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37433: LD_ADDR_VAR 0 3
37437: PUSH
37438: LD_EXP 69
37442: PPUSH
37443: LD_VAR 0 1
37447: PPUSH
37448: CALL_OW 321
37452: PUSH
37453: LD_INT 2
37455: EQUAL
37456: ST_TO_ADDR
37457: GO 37559
37459: LD_INT 17
37461: DOUBLE
37462: EQUAL
37463: IFTRUE 37467
37465: GO 37492
37467: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37468: LD_ADDR_VAR 0 3
37472: PUSH
37473: LD_INT 39
37475: PPUSH
37476: LD_VAR 0 1
37480: PPUSH
37481: CALL_OW 321
37485: PUSH
37486: LD_INT 2
37488: EQUAL
37489: ST_TO_ADDR
37490: GO 37559
37492: LD_INT 18
37494: DOUBLE
37495: EQUAL
37496: IFTRUE 37500
37498: GO 37525
37500: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37501: LD_ADDR_VAR 0 3
37505: PUSH
37506: LD_INT 40
37508: PPUSH
37509: LD_VAR 0 1
37513: PPUSH
37514: CALL_OW 321
37518: PUSH
37519: LD_INT 2
37521: EQUAL
37522: ST_TO_ADDR
37523: GO 37559
37525: LD_INT 27
37527: DOUBLE
37528: EQUAL
37529: IFTRUE 37533
37531: GO 37558
37533: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37534: LD_ADDR_VAR 0 3
37538: PUSH
37539: LD_INT 35
37541: PPUSH
37542: LD_VAR 0 1
37546: PPUSH
37547: CALL_OW 321
37551: PUSH
37552: LD_INT 2
37554: EQUAL
37555: ST_TO_ADDR
37556: GO 37559
37558: POP
// end ;
37559: LD_VAR 0 3
37563: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37564: LD_INT 0
37566: PPUSH
37567: PPUSH
37568: PPUSH
37569: PPUSH
37570: PPUSH
37571: PPUSH
37572: PPUSH
37573: PPUSH
37574: PPUSH
37575: PPUSH
37576: PPUSH
// result := false ;
37577: LD_ADDR_VAR 0 6
37581: PUSH
37582: LD_INT 0
37584: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37585: LD_VAR 0 1
37589: NOT
37590: PUSH
37591: LD_VAR 0 1
37595: PPUSH
37596: CALL_OW 266
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: IN
37611: NOT
37612: OR
37613: PUSH
37614: LD_VAR 0 2
37618: NOT
37619: OR
37620: PUSH
37621: LD_VAR 0 5
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: LD_INT 2
37634: PUSH
37635: LD_INT 3
37637: PUSH
37638: LD_INT 4
37640: PUSH
37641: LD_INT 5
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: IN
37652: NOT
37653: OR
37654: PUSH
37655: LD_VAR 0 3
37659: PPUSH
37660: LD_VAR 0 4
37664: PPUSH
37665: CALL_OW 488
37669: NOT
37670: OR
37671: IFFALSE 37675
// exit ;
37673: GO 38411
// side := GetSide ( depot ) ;
37675: LD_ADDR_VAR 0 9
37679: PUSH
37680: LD_VAR 0 1
37684: PPUSH
37685: CALL_OW 255
37689: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37690: LD_VAR 0 9
37694: PPUSH
37695: LD_VAR 0 2
37699: PPUSH
37700: CALL 37184 0 2
37704: NOT
37705: IFFALSE 37709
// exit ;
37707: GO 38411
// pom := GetBase ( depot ) ;
37709: LD_ADDR_VAR 0 10
37713: PUSH
37714: LD_VAR 0 1
37718: PPUSH
37719: CALL_OW 274
37723: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37724: LD_ADDR_VAR 0 11
37728: PUSH
37729: LD_VAR 0 2
37733: PPUSH
37734: LD_VAR 0 1
37738: PPUSH
37739: CALL_OW 248
37743: PPUSH
37744: CALL_OW 450
37748: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37749: LD_VAR 0 10
37753: PPUSH
37754: LD_INT 1
37756: PPUSH
37757: CALL_OW 275
37761: PUSH
37762: LD_VAR 0 11
37766: PUSH
37767: LD_INT 1
37769: ARRAY
37770: GREATEREQUAL
37771: PUSH
37772: LD_VAR 0 10
37776: PPUSH
37777: LD_INT 2
37779: PPUSH
37780: CALL_OW 275
37784: PUSH
37785: LD_VAR 0 11
37789: PUSH
37790: LD_INT 2
37792: ARRAY
37793: GREATEREQUAL
37794: AND
37795: PUSH
37796: LD_VAR 0 10
37800: PPUSH
37801: LD_INT 3
37803: PPUSH
37804: CALL_OW 275
37808: PUSH
37809: LD_VAR 0 11
37813: PUSH
37814: LD_INT 3
37816: ARRAY
37817: GREATEREQUAL
37818: AND
37819: NOT
37820: IFFALSE 37824
// exit ;
37822: GO 38411
// if GetBType ( depot ) = b_depot then
37824: LD_VAR 0 1
37828: PPUSH
37829: CALL_OW 266
37833: PUSH
37834: LD_INT 0
37836: EQUAL
37837: IFFALSE 37849
// dist := 28 else
37839: LD_ADDR_VAR 0 14
37843: PUSH
37844: LD_INT 28
37846: ST_TO_ADDR
37847: GO 37857
// dist := 36 ;
37849: LD_ADDR_VAR 0 14
37853: PUSH
37854: LD_INT 36
37856: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37857: LD_VAR 0 1
37861: PPUSH
37862: LD_VAR 0 3
37866: PPUSH
37867: LD_VAR 0 4
37871: PPUSH
37872: CALL_OW 297
37876: PUSH
37877: LD_VAR 0 14
37881: GREATER
37882: IFFALSE 37886
// exit ;
37884: GO 38411
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37886: LD_ADDR_VAR 0 12
37890: PUSH
37891: LD_VAR 0 2
37895: PPUSH
37896: LD_VAR 0 3
37900: PPUSH
37901: LD_VAR 0 4
37905: PPUSH
37906: LD_VAR 0 5
37910: PPUSH
37911: LD_VAR 0 1
37915: PPUSH
37916: CALL_OW 248
37920: PPUSH
37921: LD_INT 0
37923: PPUSH
37924: CALL 38416 0 6
37928: ST_TO_ADDR
// if not hexes then
37929: LD_VAR 0 12
37933: NOT
37934: IFFALSE 37938
// exit ;
37936: GO 38411
// hex := GetHexInfo ( x , y ) ;
37938: LD_ADDR_VAR 0 15
37942: PUSH
37943: LD_VAR 0 3
37947: PPUSH
37948: LD_VAR 0 4
37952: PPUSH
37953: CALL_OW 546
37957: ST_TO_ADDR
// if hex [ 1 ] then
37958: LD_VAR 0 15
37962: PUSH
37963: LD_INT 1
37965: ARRAY
37966: IFFALSE 37970
// exit ;
37968: GO 38411
// height := hex [ 2 ] ;
37970: LD_ADDR_VAR 0 13
37974: PUSH
37975: LD_VAR 0 15
37979: PUSH
37980: LD_INT 2
37982: ARRAY
37983: ST_TO_ADDR
// for i = 1 to hexes do
37984: LD_ADDR_VAR 0 7
37988: PUSH
37989: DOUBLE
37990: LD_INT 1
37992: DEC
37993: ST_TO_ADDR
37994: LD_VAR 0 12
37998: PUSH
37999: FOR_TO
38000: IFFALSE 38330
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38002: LD_VAR 0 12
38006: PUSH
38007: LD_VAR 0 7
38011: ARRAY
38012: PUSH
38013: LD_INT 1
38015: ARRAY
38016: PPUSH
38017: LD_VAR 0 12
38021: PUSH
38022: LD_VAR 0 7
38026: ARRAY
38027: PUSH
38028: LD_INT 2
38030: ARRAY
38031: PPUSH
38032: CALL_OW 488
38036: NOT
38037: PUSH
38038: LD_VAR 0 12
38042: PUSH
38043: LD_VAR 0 7
38047: ARRAY
38048: PUSH
38049: LD_INT 1
38051: ARRAY
38052: PPUSH
38053: LD_VAR 0 12
38057: PUSH
38058: LD_VAR 0 7
38062: ARRAY
38063: PUSH
38064: LD_INT 2
38066: ARRAY
38067: PPUSH
38068: CALL_OW 428
38072: PUSH
38073: LD_INT 0
38075: GREATER
38076: OR
38077: PUSH
38078: LD_VAR 0 12
38082: PUSH
38083: LD_VAR 0 7
38087: ARRAY
38088: PUSH
38089: LD_INT 1
38091: ARRAY
38092: PPUSH
38093: LD_VAR 0 12
38097: PUSH
38098: LD_VAR 0 7
38102: ARRAY
38103: PUSH
38104: LD_INT 2
38106: ARRAY
38107: PPUSH
38108: CALL_OW 351
38112: OR
38113: IFFALSE 38119
// exit ;
38115: POP
38116: POP
38117: GO 38411
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38119: LD_ADDR_VAR 0 8
38123: PUSH
38124: LD_VAR 0 12
38128: PUSH
38129: LD_VAR 0 7
38133: ARRAY
38134: PUSH
38135: LD_INT 1
38137: ARRAY
38138: PPUSH
38139: LD_VAR 0 12
38143: PUSH
38144: LD_VAR 0 7
38148: ARRAY
38149: PUSH
38150: LD_INT 2
38152: ARRAY
38153: PPUSH
38154: CALL_OW 546
38158: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38159: LD_VAR 0 8
38163: PUSH
38164: LD_INT 1
38166: ARRAY
38167: PUSH
38168: LD_VAR 0 8
38172: PUSH
38173: LD_INT 2
38175: ARRAY
38176: PUSH
38177: LD_VAR 0 13
38181: PUSH
38182: LD_INT 2
38184: PLUS
38185: GREATER
38186: OR
38187: PUSH
38188: LD_VAR 0 8
38192: PUSH
38193: LD_INT 2
38195: ARRAY
38196: PUSH
38197: LD_VAR 0 13
38201: PUSH
38202: LD_INT 2
38204: MINUS
38205: LESS
38206: OR
38207: PUSH
38208: LD_VAR 0 8
38212: PUSH
38213: LD_INT 3
38215: ARRAY
38216: PUSH
38217: LD_INT 0
38219: PUSH
38220: LD_INT 8
38222: PUSH
38223: LD_INT 9
38225: PUSH
38226: LD_INT 10
38228: PUSH
38229: LD_INT 11
38231: PUSH
38232: LD_INT 12
38234: PUSH
38235: LD_INT 13
38237: PUSH
38238: LD_INT 16
38240: PUSH
38241: LD_INT 17
38243: PUSH
38244: LD_INT 18
38246: PUSH
38247: LD_INT 19
38249: PUSH
38250: LD_INT 20
38252: PUSH
38253: LD_INT 21
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: IN
38271: NOT
38272: OR
38273: PUSH
38274: LD_VAR 0 8
38278: PUSH
38279: LD_INT 5
38281: ARRAY
38282: NOT
38283: OR
38284: PUSH
38285: LD_VAR 0 8
38289: PUSH
38290: LD_INT 6
38292: ARRAY
38293: PUSH
38294: LD_INT 1
38296: PUSH
38297: LD_INT 2
38299: PUSH
38300: LD_INT 7
38302: PUSH
38303: LD_INT 9
38305: PUSH
38306: LD_INT 10
38308: PUSH
38309: LD_INT 11
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: IN
38320: NOT
38321: OR
38322: IFFALSE 38328
// exit ;
38324: POP
38325: POP
38326: GO 38411
// end ;
38328: GO 37999
38330: POP
38331: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38332: LD_VAR 0 9
38336: PPUSH
38337: LD_VAR 0 3
38341: PPUSH
38342: LD_VAR 0 4
38346: PPUSH
38347: LD_INT 20
38349: PPUSH
38350: CALL 30356 0 4
38354: PUSH
38355: LD_INT 4
38357: ARRAY
38358: IFFALSE 38362
// exit ;
38360: GO 38411
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38362: LD_VAR 0 2
38366: PUSH
38367: LD_INT 29
38369: PUSH
38370: LD_INT 30
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: IN
38377: PUSH
38378: LD_VAR 0 3
38382: PPUSH
38383: LD_VAR 0 4
38387: PPUSH
38388: LD_VAR 0 9
38392: PPUSH
38393: CALL_OW 440
38397: NOT
38398: AND
38399: IFFALSE 38403
// exit ;
38401: GO 38411
// result := true ;
38403: LD_ADDR_VAR 0 6
38407: PUSH
38408: LD_INT 1
38410: ST_TO_ADDR
// end ;
38411: LD_VAR 0 6
38415: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38416: LD_INT 0
38418: PPUSH
38419: PPUSH
38420: PPUSH
38421: PPUSH
38422: PPUSH
38423: PPUSH
38424: PPUSH
38425: PPUSH
38426: PPUSH
38427: PPUSH
38428: PPUSH
38429: PPUSH
38430: PPUSH
38431: PPUSH
38432: PPUSH
38433: PPUSH
38434: PPUSH
38435: PPUSH
38436: PPUSH
38437: PPUSH
38438: PPUSH
38439: PPUSH
38440: PPUSH
38441: PPUSH
38442: PPUSH
38443: PPUSH
38444: PPUSH
38445: PPUSH
38446: PPUSH
38447: PPUSH
38448: PPUSH
38449: PPUSH
38450: PPUSH
38451: PPUSH
38452: PPUSH
38453: PPUSH
38454: PPUSH
38455: PPUSH
38456: PPUSH
38457: PPUSH
38458: PPUSH
38459: PPUSH
38460: PPUSH
38461: PPUSH
38462: PPUSH
38463: PPUSH
38464: PPUSH
38465: PPUSH
38466: PPUSH
38467: PPUSH
38468: PPUSH
38469: PPUSH
38470: PPUSH
38471: PPUSH
38472: PPUSH
38473: PPUSH
38474: PPUSH
38475: PPUSH
// result = [ ] ;
38476: LD_ADDR_VAR 0 7
38480: PUSH
38481: EMPTY
38482: ST_TO_ADDR
// temp_list = [ ] ;
38483: LD_ADDR_VAR 0 9
38487: PUSH
38488: EMPTY
38489: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38490: LD_VAR 0 4
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: LD_INT 1
38500: PUSH
38501: LD_INT 2
38503: PUSH
38504: LD_INT 3
38506: PUSH
38507: LD_INT 4
38509: PUSH
38510: LD_INT 5
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: IN
38521: NOT
38522: PUSH
38523: LD_VAR 0 1
38527: PUSH
38528: LD_INT 0
38530: PUSH
38531: LD_INT 1
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: IN
38538: PUSH
38539: LD_VAR 0 5
38543: PUSH
38544: LD_INT 1
38546: PUSH
38547: LD_INT 2
38549: PUSH
38550: LD_INT 3
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: LIST
38557: IN
38558: NOT
38559: AND
38560: OR
38561: IFFALSE 38565
// exit ;
38563: GO 56956
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38565: LD_VAR 0 1
38569: PUSH
38570: LD_INT 6
38572: PUSH
38573: LD_INT 7
38575: PUSH
38576: LD_INT 8
38578: PUSH
38579: LD_INT 13
38581: PUSH
38582: LD_INT 12
38584: PUSH
38585: LD_INT 15
38587: PUSH
38588: LD_INT 11
38590: PUSH
38591: LD_INT 14
38593: PUSH
38594: LD_INT 10
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: IN
38608: IFFALSE 38618
// btype = b_lab ;
38610: LD_ADDR_VAR 0 1
38614: PUSH
38615: LD_INT 6
38617: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38618: LD_VAR 0 6
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: LD_INT 2
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: LIST
38636: IN
38637: NOT
38638: PUSH
38639: LD_VAR 0 1
38643: PUSH
38644: LD_INT 0
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: LD_INT 2
38652: PUSH
38653: LD_INT 3
38655: PUSH
38656: LD_INT 6
38658: PUSH
38659: LD_INT 36
38661: PUSH
38662: LD_INT 4
38664: PUSH
38665: LD_INT 5
38667: PUSH
38668: LD_INT 31
38670: PUSH
38671: LD_INT 32
38673: PUSH
38674: LD_INT 33
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: IN
38690: NOT
38691: PUSH
38692: LD_VAR 0 6
38696: PUSH
38697: LD_INT 1
38699: EQUAL
38700: AND
38701: OR
38702: PUSH
38703: LD_VAR 0 1
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: LD_INT 3
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: IN
38718: NOT
38719: PUSH
38720: LD_VAR 0 6
38724: PUSH
38725: LD_INT 2
38727: EQUAL
38728: AND
38729: OR
38730: IFFALSE 38740
// mode = 0 ;
38732: LD_ADDR_VAR 0 6
38736: PUSH
38737: LD_INT 0
38739: ST_TO_ADDR
// case mode of 0 :
38740: LD_VAR 0 6
38744: PUSH
38745: LD_INT 0
38747: DOUBLE
38748: EQUAL
38749: IFTRUE 38753
38751: GO 50206
38753: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38754: LD_ADDR_VAR 0 11
38758: PUSH
38759: LD_INT 0
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: LD_INT 1
38774: NEG
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 1
38782: PUSH
38783: LD_INT 0
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: NEG
38813: PUSH
38814: LD_INT 0
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 1
38835: NEG
38836: PUSH
38837: LD_INT 2
38839: NEG
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: LD_INT 2
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 1
38858: PUSH
38859: LD_INT 1
38861: NEG
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 1
38869: PUSH
38870: LD_INT 2
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: LD_INT 2
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: LD_INT 3
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: LD_INT 3
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 1
38920: NEG
38921: PUSH
38922: LD_INT 2
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38947: LD_ADDR_VAR 0 12
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 0
38964: PUSH
38965: LD_INT 1
38967: NEG
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 1
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: LD_INT 1
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 1
39005: NEG
39006: PUSH
39007: LD_INT 0
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 1
39016: NEG
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 1
39028: PUSH
39029: LD_INT 1
39031: NEG
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 2
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 1
39059: NEG
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 2
39070: NEG
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 2
39081: NEG
39082: PUSH
39083: LD_INT 1
39085: NEG
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 2
39093: NEG
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 3
39104: NEG
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 3
39115: NEG
39116: PUSH
39117: LD_INT 1
39119: NEG
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39143: LD_ADDR_VAR 0 13
39147: PUSH
39148: LD_INT 0
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: LD_INT 1
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 1
39171: PUSH
39172: LD_INT 0
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: LD_INT 1
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 1
39201: NEG
39202: PUSH
39203: LD_INT 0
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: NEG
39213: PUSH
39214: LD_INT 1
39216: NEG
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: LD_INT 2
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 2
39236: PUSH
39237: LD_INT 1
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 2
39246: PUSH
39247: LD_INT 2
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: LD_INT 2
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 2
39266: NEG
39267: PUSH
39268: LD_INT 1
39270: NEG
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 2
39278: NEG
39279: PUSH
39280: LD_INT 2
39282: NEG
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 2
39290: NEG
39291: PUSH
39292: LD_INT 3
39294: NEG
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 3
39302: NEG
39303: PUSH
39304: LD_INT 2
39306: NEG
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 3
39314: NEG
39315: PUSH
39316: LD_INT 3
39318: NEG
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39342: LD_ADDR_VAR 0 14
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: LD_INT 0
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 0
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: LD_INT 1
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 0
39390: PUSH
39391: LD_INT 1
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: LD_INT 1
39415: NEG
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 1
39423: NEG
39424: PUSH
39425: LD_INT 2
39427: NEG
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: LD_INT 2
39438: NEG
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: LD_INT 1
39449: NEG
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: LD_INT 2
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 0
39467: PUSH
39468: LD_INT 2
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 1
39477: NEG
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 1
39488: NEG
39489: PUSH
39490: LD_INT 3
39492: NEG
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 0
39500: PUSH
39501: LD_INT 3
39503: NEG
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 1
39511: PUSH
39512: LD_INT 2
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39538: LD_ADDR_VAR 0 15
39542: PUSH
39543: LD_INT 0
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: LD_INT 1
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 1
39566: PUSH
39567: LD_INT 0
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: LD_INT 1
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 1
39619: PUSH
39620: LD_INT 1
39622: NEG
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 2
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 1
39650: NEG
39651: PUSH
39652: LD_INT 1
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 2
39661: NEG
39662: PUSH
39663: LD_INT 0
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 2
39672: NEG
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 2
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 3
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 3
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39731: LD_ADDR_VAR 0 16
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 0
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 0
39779: PUSH
39780: LD_INT 1
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 1
39789: NEG
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 1
39800: NEG
39801: PUSH
39802: LD_INT 1
39804: NEG
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 1
39812: NEG
39813: PUSH
39814: LD_INT 2
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 2
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 2
39834: PUSH
39835: LD_INT 2
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: LD_INT 2
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 2
39854: NEG
39855: PUSH
39856: LD_INT 1
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 2
39866: NEG
39867: PUSH
39868: LD_INT 2
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 3
39878: PUSH
39879: LD_INT 2
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 3
39888: PUSH
39889: LD_INT 3
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 2
39898: PUSH
39899: LD_INT 3
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39924: LD_ADDR_VAR 0 17
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 0
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 0
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: LD_INT 1
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: LD_INT 1
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: LD_INT 2
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: LD_INT 2
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 1
40028: PUSH
40029: LD_INT 1
40031: NEG
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 2
40039: PUSH
40040: LD_INT 0
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 2
40049: PUSH
40050: LD_INT 1
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 2
40059: PUSH
40060: LD_INT 2
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: LD_INT 2
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: LD_INT 2
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 1
40089: NEG
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 2
40100: NEG
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 2
40111: NEG
40112: PUSH
40113: LD_INT 1
40115: NEG
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 2
40123: NEG
40124: PUSH
40125: LD_INT 2
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40154: LD_ADDR_VAR 0 18
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 0
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: LD_INT 0
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: LD_INT 1
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 0
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: NEG
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PUSH
40237: LD_INT 2
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: LD_INT 2
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: LD_INT 1
40261: NEG
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 2
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 2
40279: PUSH
40280: LD_INT 1
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 2
40289: PUSH
40290: LD_INT 2
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: LD_INT 2
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: LD_INT 2
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: LD_INT 1
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 2
40330: NEG
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 2
40341: NEG
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: LD_INT 2
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40384: LD_ADDR_VAR 0 19
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 0
40401: PUSH
40402: LD_INT 1
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: LD_INT 0
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: LD_INT 1
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: NEG
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 1
40453: NEG
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 1
40465: NEG
40466: PUSH
40467: LD_INT 2
40469: NEG
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 0
40477: PUSH
40478: LD_INT 2
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: PUSH
40489: LD_INT 1
40491: NEG
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 2
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 2
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 2
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: LD_INT 2
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 1
40549: NEG
40550: PUSH
40551: LD_INT 1
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 2
40560: NEG
40561: PUSH
40562: LD_INT 0
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 2
40571: NEG
40572: PUSH
40573: LD_INT 1
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 2
40583: NEG
40584: PUSH
40585: LD_INT 2
40587: NEG
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40614: LD_ADDR_VAR 0 20
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: LD_INT 1
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: LD_INT 1
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: NEG
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: LD_INT 2
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: LD_INT 2
40710: NEG
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 2
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 2
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 2
40749: PUSH
40750: LD_INT 2
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: LD_INT 2
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: LD_INT 2
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 1
40779: NEG
40780: PUSH
40781: LD_INT 1
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 2
40790: NEG
40791: PUSH
40792: LD_INT 0
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 2
40801: NEG
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 2
40813: NEG
40814: PUSH
40815: LD_INT 2
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40844: LD_ADDR_VAR 0 21
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: LD_INT 1
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: NEG
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: LD_INT 1
40917: NEG
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: LD_INT 2
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 0
40937: PUSH
40938: LD_INT 2
40940: NEG
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 2
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 2
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: LD_INT 1
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 2
41020: NEG
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 2
41031: NEG
41032: PUSH
41033: LD_INT 1
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 2
41043: NEG
41044: PUSH
41045: LD_INT 2
41047: NEG
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41074: LD_ADDR_VAR 0 22
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: LD_INT 1
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: LD_INT 2
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: LD_INT 2
41170: NEG
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: LD_INT 1
41181: NEG
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 2
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: LD_INT 1
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 2
41209: PUSH
41210: LD_INT 2
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 1
41219: PUSH
41220: LD_INT 2
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 1
41239: NEG
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 2
41261: NEG
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 2
41273: NEG
41274: PUSH
41275: LD_INT 2
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41304: LD_ADDR_VAR 0 23
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 0
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 0
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: LD_INT 2
41389: NEG
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: LD_INT 1
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 2
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 2
41439: PUSH
41440: LD_INT 2
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: LD_INT 2
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 2
41480: NEG
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 2
41491: NEG
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 2
41503: NEG
41504: PUSH
41505: LD_INT 2
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 2
41515: NEG
41516: PUSH
41517: LD_INT 3
41519: NEG
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: LD_INT 3
41531: NEG
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: LD_INT 2
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 2
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41584: LD_ADDR_VAR 0 24
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: LD_INT 0
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: LD_INT 1
41604: NEG
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 1
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: LD_INT 1
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: LD_INT 1
41657: NEG
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: LD_INT 2
41669: NEG
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 0
41677: PUSH
41678: LD_INT 2
41680: NEG
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 1
41688: PUSH
41689: LD_INT 1
41691: NEG
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 2
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 2
41719: PUSH
41720: LD_INT 2
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: LD_INT 2
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: LD_INT 2
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: LD_INT 1
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 2
41771: NEG
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 2
41783: NEG
41784: PUSH
41785: LD_INT 2
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: LD_INT 2
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: LD_INT 1
41809: NEG
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 3
41817: PUSH
41818: LD_INT 1
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 3
41827: PUSH
41828: LD_INT 2
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41860: LD_ADDR_VAR 0 25
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: LD_INT 1
41880: NEG
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: LD_INT 2
41945: NEG
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: LD_INT 2
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 2
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 2
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 2
41995: PUSH
41996: LD_INT 2
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 1
42005: PUSH
42006: LD_INT 2
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: LD_INT 2
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: NEG
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 2
42036: NEG
42037: PUSH
42038: LD_INT 0
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 2
42047: NEG
42048: PUSH
42049: LD_INT 1
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 2
42059: NEG
42060: PUSH
42061: LD_INT 2
42063: NEG
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 3
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 3
42081: PUSH
42082: LD_INT 2
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 2
42091: PUSH
42092: LD_INT 3
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: LD_INT 3
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42134: LD_ADDR_VAR 0 26
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: LD_INT 1
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: NEG
42216: PUSH
42217: LD_INT 2
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: LD_INT 2
42230: NEG
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: LD_INT 1
42241: NEG
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 2
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 2
42259: PUSH
42260: LD_INT 1
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 2
42269: PUSH
42270: LD_INT 2
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 1
42279: PUSH
42280: LD_INT 2
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: LD_INT 2
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 1
42299: NEG
42300: PUSH
42301: LD_INT 1
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 2
42310: NEG
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 2
42321: NEG
42322: PUSH
42323: LD_INT 1
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 2
42333: NEG
42334: PUSH
42335: LD_INT 2
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 2
42345: PUSH
42346: LD_INT 3
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: LD_INT 3
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: LD_INT 2
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 2
42376: NEG
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42410: LD_ADDR_VAR 0 27
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: LD_INT 1
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: LD_INT 1
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: NEG
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: NEG
42492: PUSH
42493: LD_INT 2
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 0
42503: PUSH
42504: LD_INT 2
42506: NEG
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 1
42514: PUSH
42515: LD_INT 1
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 2
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 2
42535: PUSH
42536: LD_INT 1
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: LD_INT 2
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 1
42555: PUSH
42556: LD_INT 2
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: LD_INT 2
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: NEG
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 2
42586: NEG
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 2
42597: NEG
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 2
42609: NEG
42610: PUSH
42611: LD_INT 2
42613: NEG
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 1
42621: NEG
42622: PUSH
42623: LD_INT 2
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 2
42632: NEG
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 3
42643: NEG
42644: PUSH
42645: LD_INT 1
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 3
42655: NEG
42656: PUSH
42657: LD_INT 2
42659: NEG
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42690: LD_ADDR_VAR 0 28
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: LD_INT 2
42775: NEG
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: LD_INT 2
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 2
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 2
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 2
42825: PUSH
42826: LD_INT 2
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: LD_INT 2
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_INT 2
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 2
42866: NEG
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 2
42877: NEG
42878: PUSH
42879: LD_INT 1
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 2
42889: NEG
42890: PUSH
42891: LD_INT 2
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 2
42901: NEG
42902: PUSH
42903: LD_INT 3
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: LD_INT 3
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 3
42925: NEG
42926: PUSH
42927: LD_INT 1
42929: NEG
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 3
42937: NEG
42938: PUSH
42939: LD_INT 2
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42972: LD_ADDR_VAR 0 29
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: LD_INT 0
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: LD_INT 1
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: LD_INT 2
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: LD_INT 2
43068: NEG
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: PUSH
43098: LD_INT 1
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: LD_INT 2
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: LD_INT 2
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 2
43138: NEG
43139: PUSH
43140: LD_INT 1
43142: NEG
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 2
43150: NEG
43151: PUSH
43152: LD_INT 2
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 2
43162: NEG
43163: PUSH
43164: LD_INT 3
43166: NEG
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 2
43174: PUSH
43175: LD_INT 1
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 3
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 1
43195: PUSH
43196: LD_INT 3
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: LD_INT 2
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 3
43216: NEG
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43251: LD_ADDR_VAR 0 30
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 1
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: LD_INT 2
43336: NEG
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: LD_INT 2
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: LD_INT 1
43358: NEG
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 2
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 2
43386: PUSH
43387: LD_INT 2
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: LD_INT 2
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 2
43417: NEG
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 2
43428: NEG
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: LD_INT 3
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: LD_INT 2
43455: NEG
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 3
43463: PUSH
43464: LD_INT 2
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 2
43473: PUSH
43474: LD_INT 3
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 2
43483: NEG
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 3
43494: NEG
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43529: LD_ADDR_VAR 0 31
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: LD_INT 1
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 2
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 2
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: PUSH
43654: LD_INT 2
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 2
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 2
43694: NEG
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 2
43706: NEG
43707: PUSH
43708: LD_INT 2
43710: NEG
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 2
43718: NEG
43719: PUSH
43720: LD_INT 3
43722: NEG
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 2
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 3
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: LD_INT 3
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: LD_INT 2
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 3
43772: NEG
43773: PUSH
43774: LD_INT 2
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43807: LD_ADDR_VAR 0 32
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: LD_INT 1
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: LD_INT 2
43903: NEG
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 2
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 2
43932: PUSH
43933: LD_INT 2
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: LD_INT 2
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 2
43984: NEG
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: LD_INT 3
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: LD_INT 2
44011: NEG
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 3
44019: PUSH
44020: LD_INT 2
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 2
44029: PUSH
44030: LD_INT 3
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 2
44039: NEG
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 3
44050: NEG
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44085: LD_ADDR_VAR 0 33
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: LD_INT 1
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: LD_INT 1
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: LD_INT 2
44170: NEG
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 2
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 2
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: LD_INT 2
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 2
44251: NEG
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: LD_INT 2
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 2
44275: NEG
44276: PUSH
44277: LD_INT 3
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 2
44287: PUSH
44288: LD_INT 1
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 3
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 1
44308: PUSH
44309: LD_INT 3
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 3
44329: NEG
44330: PUSH
44331: LD_INT 2
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44364: LD_ADDR_VAR 0 34
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: LD_INT 2
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 2
44479: PUSH
44480: LD_INT 1
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: LD_INT 2
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: LD_INT 2
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 2
44520: NEG
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 2
44531: NEG
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 2
44543: NEG
44544: PUSH
44545: LD_INT 2
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: LD_INT 3
44559: NEG
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: PUSH
44568: LD_INT 2
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 3
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: LD_INT 3
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 2
44598: NEG
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 3
44609: NEG
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44644: LD_ADDR_VAR 0 35
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 2
44735: NEG
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44756: LD_ADDR_VAR 0 36
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: LD_INT 2
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: LD_INT 2
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44868: LD_ADDR_VAR 0 37
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44980: LD_ADDR_VAR 0 38
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 2
45071: NEG
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45092: LD_ADDR_VAR 0 39
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: LD_INT 2
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45204: LD_ADDR_VAR 0 40
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45316: LD_ADDR_VAR 0 41
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 1
45385: NEG
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 2
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 2
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: LD_INT 2
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: LD_INT 2
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 2
45471: NEG
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 2
45482: NEG
45483: PUSH
45484: LD_INT 1
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: LD_INT 2
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: LD_INT 3
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: LD_INT 1
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 3
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 3
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 3
45549: PUSH
45550: LD_INT 2
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 3
45559: PUSH
45560: LD_INT 3
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 2
45569: PUSH
45570: LD_INT 3
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 3
45590: NEG
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 3
45601: NEG
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 3
45613: NEG
45614: PUSH
45615: LD_INT 2
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 3
45625: NEG
45626: PUSH
45627: LD_INT 3
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45666: LD_ADDR_VAR 0 42
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: LD_INT 2
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: LD_INT 2
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: LD_INT 2
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: LD_INT 2
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 2
45844: NEG
45845: PUSH
45846: LD_INT 2
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: LD_INT 3
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: LD_INT 3
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: LD_INT 3
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: PUSH
45892: LD_INT 2
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 3
45902: PUSH
45903: LD_INT 2
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 3
45912: PUSH
45913: LD_INT 3
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: LD_INT 3
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 3
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: LD_INT 3
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: LD_INT 2
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 3
45963: NEG
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 3
45975: NEG
45976: PUSH
45977: LD_INT 3
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46016: LD_ADDR_VAR 0 43
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: LD_INT 2
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: LD_INT 2
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: LD_INT 2
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 2
46182: NEG
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 2
46193: NEG
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: LD_INT 3
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: LD_INT 3
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 3
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 3
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: LD_INT 3
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: LD_INT 3
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 3
46312: NEG
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 3
46323: NEG
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46364: LD_ADDR_VAR 0 44
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 2
46488: PUSH
46489: LD_INT 2
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 2
46530: NEG
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: LD_INT 3
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 3
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 3
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 3
46597: PUSH
46598: LD_INT 2
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 3
46607: PUSH
46608: LD_INT 3
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: LD_INT 3
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 3
46638: NEG
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 3
46649: NEG
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 3
46661: NEG
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 3
46673: NEG
46674: PUSH
46675: LD_INT 3
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46714: LD_ADDR_VAR 0 45
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: NEG
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: LD_INT 2
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: LD_INT 2
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 2
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 2
46839: PUSH
46840: LD_INT 2
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: NEG
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 2
46892: NEG
46893: PUSH
46894: LD_INT 2
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: LD_INT 3
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: LD_INT 3
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: LD_INT 3
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 3
46950: PUSH
46951: LD_INT 2
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 3
46960: PUSH
46961: LD_INT 3
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 2
46970: PUSH
46971: LD_INT 3
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: LD_INT 3
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: LD_INT 3
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: LD_INT 2
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 3
47011: NEG
47012: PUSH
47013: LD_INT 2
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 3
47023: NEG
47024: PUSH
47025: LD_INT 3
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47064: LD_ADDR_VAR 0 46
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: LD_INT 2
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: LD_INT 2
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 2
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 2
47230: NEG
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 2
47241: NEG
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: LD_INT 3
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 3
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 3
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 3
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: LD_INT 3
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: LD_INT 3
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: LD_INT 2
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 2
47349: NEG
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 3
47360: NEG
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 3
47371: NEG
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47412: LD_ADDR_VAR 0 47
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: LD_INT 2
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 2
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 2
47527: NEG
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47563: LD_ADDR_VAR 0 48
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: LD_INT 2
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: LD_INT 2
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47710: LD_ADDR_VAR 0 49
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 2
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 2
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47854: LD_ADDR_VAR 0 50
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 2
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: LD_INT 2
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: LD_INT 2
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 2
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47998: LD_ADDR_VAR 0 51
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: LD_INT 2
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: LD_INT 2
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: NEG
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: NEG
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48145: LD_ADDR_VAR 0 52
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: LD_INT 2
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 2
48249: NEG
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: NEG
48261: PUSH
48262: LD_INT 1
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: LD_INT 2
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48296: LD_ADDR_VAR 0 53
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: LD_INT 2
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 2
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 2
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: LD_INT 2
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 2
48472: NEG
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 2
48483: NEG
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48526: LD_ADDR_VAR 0 54
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: NEG
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: LD_INT 2
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 2
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 2
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 2
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: PUSH
48662: LD_INT 2
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: LD_INT 2
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 2
48702: NEG
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: NEG
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 2
48725: NEG
48726: PUSH
48727: LD_INT 2
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48756: LD_ADDR_VAR 0 55
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: LD_INT 2
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: PUSH
48882: LD_INT 1
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: LD_INT 2
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 2
48932: NEG
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: NEG
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: NEG
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48986: LD_ADDR_VAR 0 56
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: NEG
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 2
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 2
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: LD_INT 2
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: LD_INT 2
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 2
49162: NEG
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 2
49173: NEG
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: NEG
49186: PUSH
49187: LD_INT 2
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49216: LD_ADDR_VAR 0 57
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: NEG
49298: PUSH
49299: LD_INT 2
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: LD_INT 2
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: LD_INT 2
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: LD_INT 2
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: NEG
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: NEG
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: NEG
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49446: LD_ADDR_VAR 0 58
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: LD_INT 2
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 2
49581: PUSH
49582: LD_INT 2
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: LD_INT 2
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: LD_INT 2
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: NEG
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: LD_INT 2
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49676: LD_ADDR_VAR 0 59
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49764: LD_ADDR_VAR 0 60
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49852: LD_ADDR_VAR 0 61
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: LD_INT 1
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49940: LD_ADDR_VAR 0 62
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50028: LD_ADDR_VAR 0 63
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50116: LD_ADDR_VAR 0 64
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: ST_TO_ADDR
// end ; 1 :
50204: GO 56101
50206: LD_INT 1
50208: DOUBLE
50209: EQUAL
50210: IFTRUE 50214
50212: GO 52837
50214: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50215: LD_ADDR_VAR 0 11
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: LD_INT 3
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 3
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: LD_INT 2
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: LIST
50258: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50259: LD_ADDR_VAR 0 12
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 3
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 3
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: LIST
50299: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50300: LD_ADDR_VAR 0 13
50304: PUSH
50305: LD_INT 3
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 3
50317: PUSH
50318: LD_INT 3
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: LD_INT 3
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: LIST
50339: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50340: LD_ADDR_VAR 0 14
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: LD_INT 3
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: LD_INT 3
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: LIST
50380: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50381: LD_ADDR_VAR 0 15
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 3
50399: NEG
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 3
50410: NEG
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: LIST
50424: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50425: LD_ADDR_VAR 0 16
50429: PUSH
50430: LD_INT 2
50432: NEG
50433: PUSH
50434: LD_INT 3
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 3
50444: NEG
50445: PUSH
50446: LD_INT 2
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 3
50456: NEG
50457: PUSH
50458: LD_INT 3
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: LIST
50470: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50471: LD_ADDR_VAR 0 17
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: LD_INT 3
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: LD_INT 3
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: LD_INT 2
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: LIST
50514: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50515: LD_ADDR_VAR 0 18
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 3
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 3
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: LIST
50555: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50556: LD_ADDR_VAR 0 19
50560: PUSH
50561: LD_INT 3
50563: PUSH
50564: LD_INT 2
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 3
50573: PUSH
50574: LD_INT 3
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: LD_INT 3
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: LIST
50595: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50596: LD_ADDR_VAR 0 20
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: LD_INT 3
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: LD_INT 3
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: LIST
50636: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50637: LD_ADDR_VAR 0 21
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 3
50655: NEG
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 3
50666: NEG
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: LIST
50680: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50681: LD_ADDR_VAR 0 22
50685: PUSH
50686: LD_INT 2
50688: NEG
50689: PUSH
50690: LD_INT 3
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 3
50700: NEG
50701: PUSH
50702: LD_INT 2
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 3
50712: NEG
50713: PUSH
50714: LD_INT 3
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: LIST
50726: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50727: LD_ADDR_VAR 0 23
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 3
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: LD_INT 4
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: LD_INT 3
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: LIST
50770: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50771: LD_ADDR_VAR 0 24
50775: PUSH
50776: LD_INT 3
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 3
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 4
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: LIST
50811: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50812: LD_ADDR_VAR 0 25
50816: PUSH
50817: LD_INT 3
50819: PUSH
50820: LD_INT 3
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 4
50829: PUSH
50830: LD_INT 3
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 3
50839: PUSH
50840: LD_INT 4
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: LIST
50851: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50852: LD_ADDR_VAR 0 26
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 3
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: LD_INT 4
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 3
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: LIST
50892: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50893: LD_ADDR_VAR 0 27
50897: PUSH
50898: LD_INT 3
50900: NEG
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 3
50911: NEG
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 4
50922: NEG
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: LIST
50936: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50937: LD_ADDR_VAR 0 28
50941: PUSH
50942: LD_INT 3
50944: NEG
50945: PUSH
50946: LD_INT 3
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 3
50956: NEG
50957: PUSH
50958: LD_INT 4
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 4
50968: NEG
50969: PUSH
50970: LD_INT 3
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: LIST
50982: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50983: LD_ADDR_VAR 0 29
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: LD_INT 3
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: LD_INT 3
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: LD_INT 2
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: LD_INT 4
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: LD_INT 4
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: LD_INT 3
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: LD_INT 5
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: LD_INT 5
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: LD_INT 4
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: LD_INT 6
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: LD_INT 6
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: LD_INT 5
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51138: LD_ADDR_VAR 0 30
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 3
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 3
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 3
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 4
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 4
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 4
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 5
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 5
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 5
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 6
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 6
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51281: LD_ADDR_VAR 0 31
51285: PUSH
51286: LD_INT 3
51288: PUSH
51289: LD_INT 2
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 3
51298: PUSH
51299: LD_INT 3
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 2
51308: PUSH
51309: LD_INT 3
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 4
51318: PUSH
51319: LD_INT 3
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 4
51328: PUSH
51329: LD_INT 4
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 3
51338: PUSH
51339: LD_INT 4
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 5
51348: PUSH
51349: LD_INT 4
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 5
51358: PUSH
51359: LD_INT 5
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 4
51368: PUSH
51369: LD_INT 5
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 6
51378: PUSH
51379: LD_INT 5
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 6
51388: PUSH
51389: LD_INT 6
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 5
51398: PUSH
51399: LD_INT 6
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51420: LD_ADDR_VAR 0 32
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 3
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 3
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: LD_INT 2
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: LD_INT 4
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: LD_INT 4
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: NEG
51479: PUSH
51480: LD_INT 3
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: LD_INT 5
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 0
51499: PUSH
51500: LD_INT 5
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: LD_INT 4
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: LD_INT 6
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: LD_INT 6
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: LD_INT 5
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51563: LD_ADDR_VAR 0 33
51567: PUSH
51568: LD_INT 2
51570: NEG
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 3
51581: NEG
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 3
51592: NEG
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 3
51604: NEG
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 4
51615: NEG
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 4
51626: NEG
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 4
51638: NEG
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 5
51649: NEG
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 5
51660: NEG
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 5
51672: NEG
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 6
51683: NEG
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 6
51694: NEG
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51718: LD_ADDR_VAR 0 34
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: LD_INT 3
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 3
51737: NEG
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 3
51749: NEG
51750: PUSH
51751: LD_INT 3
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 3
51761: NEG
51762: PUSH
51763: LD_INT 4
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 4
51773: NEG
51774: PUSH
51775: LD_INT 3
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 4
51785: NEG
51786: PUSH
51787: LD_INT 4
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 4
51797: NEG
51798: PUSH
51799: LD_INT 5
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 5
51809: NEG
51810: PUSH
51811: LD_INT 4
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 5
51821: NEG
51822: PUSH
51823: LD_INT 5
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 5
51833: NEG
51834: PUSH
51835: LD_INT 6
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 6
51845: NEG
51846: PUSH
51847: LD_INT 5
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 6
51857: NEG
51858: PUSH
51859: LD_INT 6
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51881: LD_ADDR_VAR 0 41
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: LD_INT 2
51891: NEG
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: LD_INT 3
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: LD_INT 2
51914: NEG
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: LIST
51924: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51925: LD_ADDR_VAR 0 42
51929: PUSH
51930: LD_INT 2
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 3
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: LIST
51965: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51966: LD_ADDR_VAR 0 43
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: LD_INT 2
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 3
51983: PUSH
51984: LD_INT 2
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 2
51993: PUSH
51994: LD_INT 3
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: LIST
52005: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52006: LD_ADDR_VAR 0 44
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: LD_INT 2
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 3
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: LIST
52046: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52047: LD_ADDR_VAR 0 45
52051: PUSH
52052: LD_INT 2
52054: NEG
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PUSH
52067: LD_INT 1
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 3
52076: NEG
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: LIST
52090: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52091: LD_ADDR_VAR 0 46
52095: PUSH
52096: LD_INT 2
52098: NEG
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: LD_INT 3
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 3
52122: NEG
52123: PUSH
52124: LD_INT 2
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: LIST
52136: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52137: LD_ADDR_VAR 0 47
52141: PUSH
52142: LD_INT 2
52144: NEG
52145: PUSH
52146: LD_INT 3
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: LD_INT 3
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52170: LD_ADDR_VAR 0 48
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: LD_INT 2
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 2
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52201: LD_ADDR_VAR 0 49
52205: PUSH
52206: LD_INT 3
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: LD_INT 2
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52230: LD_ADDR_VAR 0 50
52234: PUSH
52235: LD_INT 2
52237: PUSH
52238: LD_INT 3
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: LD_INT 3
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52259: LD_ADDR_VAR 0 51
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: NEG
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52290: LD_ADDR_VAR 0 52
52294: PUSH
52295: LD_INT 3
52297: NEG
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 3
52309: NEG
52310: PUSH
52311: LD_INT 2
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52323: LD_ADDR_VAR 0 53
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: LD_INT 3
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 3
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: LD_INT 2
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: LIST
52366: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52367: LD_ADDR_VAR 0 54
52371: PUSH
52372: LD_INT 2
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 3
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 3
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: LIST
52407: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52408: LD_ADDR_VAR 0 55
52412: PUSH
52413: LD_INT 3
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 3
52425: PUSH
52426: LD_INT 3
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: LD_INT 3
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: LIST
52447: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52448: LD_ADDR_VAR 0 56
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: LD_INT 3
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: LD_INT 3
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: LD_INT 2
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: LIST
52488: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52489: LD_ADDR_VAR 0 57
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 3
52507: NEG
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 3
52518: NEG
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: LIST
52532: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52533: LD_ADDR_VAR 0 58
52537: PUSH
52538: LD_INT 2
52540: NEG
52541: PUSH
52542: LD_INT 3
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 3
52552: NEG
52553: PUSH
52554: LD_INT 2
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 3
52564: NEG
52565: PUSH
52566: LD_INT 3
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: LIST
52578: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52579: LD_ADDR_VAR 0 59
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: LD_INT 2
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: LD_INT 2
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 1
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: LIST
52622: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52623: LD_ADDR_VAR 0 60
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: LIST
52663: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52664: LD_ADDR_VAR 0 61
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 2
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: LIST
52703: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52704: LD_ADDR_VAR 0 62
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: LD_INT 2
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: LD_INT 2
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: LIST
52744: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52745: LD_ADDR_VAR 0 63
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 2
52763: NEG
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 2
52774: NEG
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: LIST
52788: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52789: LD_ADDR_VAR 0 64
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 2
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: NEG
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 2
52820: NEG
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: LIST
52834: ST_TO_ADDR
// end ; 2 :
52835: GO 56101
52837: LD_INT 2
52839: DOUBLE
52840: EQUAL
52841: IFTRUE 52845
52843: GO 56100
52845: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52846: LD_ADDR_VAR 0 29
52850: PUSH
52851: LD_INT 4
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 4
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 5
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 5
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 4
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 3
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 3
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 3
52925: PUSH
52926: LD_INT 2
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 5
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 3
52946: PUSH
52947: LD_INT 3
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 3
52956: PUSH
52957: LD_INT 2
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 4
52966: PUSH
52967: LD_INT 3
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 4
52976: PUSH
52977: LD_INT 4
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 3
52986: PUSH
52987: LD_INT 4
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: LD_INT 3
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 2
53006: PUSH
53007: LD_INT 2
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 4
53016: PUSH
53017: LD_INT 2
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 2
53026: PUSH
53027: LD_INT 4
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 4
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: LD_INT 3
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: LD_INT 4
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: LD_INT 5
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: LD_INT 5
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: LD_INT 4
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: LD_INT 3
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: LD_INT 5
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 2
53118: NEG
53119: PUSH
53120: LD_INT 3
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 3
53129: NEG
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 3
53140: NEG
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: NEG
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 3
53174: NEG
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 4
53185: NEG
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 4
53196: NEG
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 4
53208: NEG
53209: PUSH
53210: LD_INT 2
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 2
53220: NEG
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 4
53231: NEG
53232: PUSH
53233: LD_INT 4
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 4
53243: NEG
53244: PUSH
53245: LD_INT 5
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 3
53255: NEG
53256: PUSH
53257: LD_INT 4
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 3
53267: NEG
53268: PUSH
53269: LD_INT 3
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 4
53279: NEG
53280: PUSH
53281: LD_INT 3
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 5
53291: NEG
53292: PUSH
53293: LD_INT 4
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 5
53303: NEG
53304: PUSH
53305: LD_INT 5
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 3
53315: NEG
53316: PUSH
53317: LD_INT 5
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 5
53327: NEG
53328: PUSH
53329: LD_INT 3
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53384: LD_ADDR_VAR 0 30
53388: PUSH
53389: LD_INT 4
53391: PUSH
53392: LD_INT 4
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 4
53401: PUSH
53402: LD_INT 3
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 5
53411: PUSH
53412: LD_INT 4
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 5
53421: PUSH
53422: LD_INT 5
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 4
53431: PUSH
53432: LD_INT 5
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 3
53441: PUSH
53442: LD_INT 4
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 3
53451: PUSH
53452: LD_INT 3
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 5
53461: PUSH
53462: LD_INT 3
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 3
53471: PUSH
53472: LD_INT 5
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: LD_INT 3
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: LD_INT 2
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: LD_INT 3
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: LD_INT 4
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: LD_INT 4
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: LD_INT 3
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: LD_INT 2
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: LD_INT 4
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 2
53563: NEG
53564: PUSH
53565: LD_INT 2
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 4
53574: NEG
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 4
53585: NEG
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 3
53597: NEG
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 3
53608: NEG
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 4
53619: NEG
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 5
53630: NEG
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 5
53641: NEG
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 5
53653: NEG
53654: PUSH
53655: LD_INT 2
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 3
53665: NEG
53666: PUSH
53667: LD_INT 2
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 3
53676: NEG
53677: PUSH
53678: LD_INT 3
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 3
53688: NEG
53689: PUSH
53690: LD_INT 4
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: LD_INT 3
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 2
53712: NEG
53713: PUSH
53714: LD_INT 2
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 3
53724: NEG
53725: PUSH
53726: LD_INT 2
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 4
53736: NEG
53737: PUSH
53738: LD_INT 3
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 4
53748: NEG
53749: PUSH
53750: LD_INT 4
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 2
53760: NEG
53761: PUSH
53762: LD_INT 4
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 4
53772: NEG
53773: PUSH
53774: LD_INT 2
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 4
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: LD_INT 5
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: LD_INT 4
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: LD_INT 3
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: LD_INT 3
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: LD_INT 4
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: LD_INT 5
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 2
53863: PUSH
53864: LD_INT 3
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 2
53874: NEG
53875: PUSH
53876: LD_INT 5
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53931: LD_ADDR_VAR 0 31
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: LD_INT 4
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: LD_INT 3
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: LD_INT 4
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: LD_INT 5
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: LD_INT 5
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: LD_INT 4
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: LD_INT 3
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: LD_INT 5
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 2
54020: NEG
54021: PUSH
54022: LD_INT 3
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 3
54031: NEG
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 3
54042: NEG
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 2
54065: NEG
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 3
54076: NEG
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 4
54087: NEG
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 4
54098: NEG
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 4
54110: NEG
54111: PUSH
54112: LD_INT 2
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 2
54122: NEG
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 4
54133: NEG
54134: PUSH
54135: LD_INT 4
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 4
54145: NEG
54146: PUSH
54147: LD_INT 5
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 3
54157: NEG
54158: PUSH
54159: LD_INT 4
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 3
54169: NEG
54170: PUSH
54171: LD_INT 3
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 4
54181: NEG
54182: PUSH
54183: LD_INT 3
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 5
54193: NEG
54194: PUSH
54195: LD_INT 4
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 5
54205: NEG
54206: PUSH
54207: LD_INT 5
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 3
54217: NEG
54218: PUSH
54219: LD_INT 5
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 5
54229: NEG
54230: PUSH
54231: LD_INT 3
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: LD_INT 3
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: LD_INT 4
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: LD_INT 3
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: LD_INT 2
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: LD_INT 2
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: LD_INT 3
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 4
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 2
54331: NEG
54332: PUSH
54333: LD_INT 4
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 4
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 4
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 5
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 5
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 4
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 3
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 3
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 3
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 5
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54481: LD_ADDR_VAR 0 32
54485: PUSH
54486: LD_INT 4
54488: NEG
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 4
54499: NEG
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 3
54511: NEG
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 3
54522: NEG
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 4
54533: NEG
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 5
54544: NEG
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 5
54555: NEG
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 5
54567: NEG
54568: PUSH
54569: LD_INT 2
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 3
54579: NEG
54580: PUSH
54581: LD_INT 2
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 3
54590: NEG
54591: PUSH
54592: LD_INT 3
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 3
54602: NEG
54603: PUSH
54604: LD_INT 4
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: LD_INT 3
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: NEG
54627: PUSH
54628: LD_INT 2
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 3
54638: NEG
54639: PUSH
54640: LD_INT 2
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 4
54650: NEG
54651: PUSH
54652: LD_INT 3
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 4
54662: NEG
54663: PUSH
54664: LD_INT 4
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 2
54674: NEG
54675: PUSH
54676: LD_INT 4
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 4
54686: NEG
54687: PUSH
54688: LD_INT 2
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: LD_INT 4
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 5
54712: NEG
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: LD_INT 4
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: LD_INT 3
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 3
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: LD_INT 4
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: LD_INT 5
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 2
54777: PUSH
54778: LD_INT 3
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: LD_INT 5
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 3
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 3
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 4
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 4
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 3
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 2
54872: PUSH
54873: LD_INT 2
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 4
54883: PUSH
54884: LD_INT 2
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 4
54893: PUSH
54894: LD_INT 4
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 4
54903: PUSH
54904: LD_INT 3
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 5
54913: PUSH
54914: LD_INT 4
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 5
54923: PUSH
54924: LD_INT 5
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 4
54933: PUSH
54934: LD_INT 5
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 3
54943: PUSH
54944: LD_INT 4
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 3
54953: PUSH
54954: LD_INT 3
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 5
54963: PUSH
54964: LD_INT 3
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 3
54973: PUSH
54974: LD_INT 5
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55028: LD_ADDR_VAR 0 33
55032: PUSH
55033: LD_INT 4
55035: NEG
55036: PUSH
55037: LD_INT 4
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 4
55047: NEG
55048: PUSH
55049: LD_INT 5
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 3
55059: NEG
55060: PUSH
55061: LD_INT 4
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 3
55071: NEG
55072: PUSH
55073: LD_INT 3
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 4
55083: NEG
55084: PUSH
55085: LD_INT 3
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 5
55095: NEG
55096: PUSH
55097: LD_INT 4
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 5
55107: NEG
55108: PUSH
55109: LD_INT 5
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 3
55119: NEG
55120: PUSH
55121: LD_INT 5
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 5
55131: NEG
55132: PUSH
55133: LD_INT 3
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: LD_INT 3
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: LD_INT 4
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: LD_INT 3
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: LD_INT 2
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: LD_INT 2
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: LD_INT 3
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: LD_INT 4
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 2
55233: NEG
55234: PUSH
55235: LD_INT 4
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 4
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 4
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 5
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 5
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 4
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 3
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 3
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 3
55317: PUSH
55318: LD_INT 2
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 5
55328: PUSH
55329: LD_INT 2
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 3
55338: PUSH
55339: LD_INT 3
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 3
55348: PUSH
55349: LD_INT 2
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 4
55358: PUSH
55359: LD_INT 3
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 4
55368: PUSH
55369: LD_INT 4
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 3
55378: PUSH
55379: LD_INT 4
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: PUSH
55389: LD_INT 3
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 2
55398: PUSH
55399: LD_INT 2
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 4
55408: PUSH
55409: LD_INT 2
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 2
55418: PUSH
55419: LD_INT 4
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: LD_INT 4
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: LD_INT 3
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: LD_INT 4
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: LD_INT 5
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: LD_INT 5
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: LD_INT 4
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: LD_INT 3
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: LD_INT 5
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: NEG
55511: PUSH
55512: LD_INT 3
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55566: LD_ADDR_VAR 0 34
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: LD_INT 4
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: LD_INT 5
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: PUSH
55596: LD_INT 4
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: LD_INT 3
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: LD_INT 3
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 4
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: LD_INT 5
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 2
55652: PUSH
55653: LD_INT 3
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: LD_INT 5
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 3
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 3
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 4
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 4
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 3
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 2
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 4
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 4
55768: PUSH
55769: LD_INT 4
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 4
55778: PUSH
55779: LD_INT 3
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 5
55788: PUSH
55789: LD_INT 4
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 5
55798: PUSH
55799: LD_INT 5
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 4
55808: PUSH
55809: LD_INT 5
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 3
55818: PUSH
55819: LD_INT 4
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 3
55828: PUSH
55829: LD_INT 3
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 5
55838: PUSH
55839: LD_INT 3
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 3
55848: PUSH
55849: LD_INT 5
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: LD_INT 3
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 2
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: LD_INT 3
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: LD_INT 4
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: LD_INT 4
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: LD_INT 3
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 2
55930: PUSH
55931: LD_INT 4
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 4
55951: NEG
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 4
55962: NEG
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 3
55974: NEG
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 3
55985: NEG
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 4
55996: NEG
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 5
56007: NEG
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 5
56018: NEG
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 5
56030: NEG
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 3
56042: NEG
56043: PUSH
56044: LD_INT 2
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: ST_TO_ADDR
// end ; end ;
56098: GO 56101
56100: POP
// case btype of b_depot , b_warehouse :
56101: LD_VAR 0 1
56105: PUSH
56106: LD_INT 0
56108: DOUBLE
56109: EQUAL
56110: IFTRUE 56120
56112: LD_INT 1
56114: DOUBLE
56115: EQUAL
56116: IFTRUE 56120
56118: GO 56321
56120: POP
// case nation of nation_american :
56121: LD_VAR 0 5
56125: PUSH
56126: LD_INT 1
56128: DOUBLE
56129: EQUAL
56130: IFTRUE 56134
56132: GO 56190
56134: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56135: LD_ADDR_VAR 0 9
56139: PUSH
56140: LD_VAR 0 11
56144: PUSH
56145: LD_VAR 0 12
56149: PUSH
56150: LD_VAR 0 13
56154: PUSH
56155: LD_VAR 0 14
56159: PUSH
56160: LD_VAR 0 15
56164: PUSH
56165: LD_VAR 0 16
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: PUSH
56178: LD_VAR 0 4
56182: PUSH
56183: LD_INT 1
56185: PLUS
56186: ARRAY
56187: ST_TO_ADDR
56188: GO 56319
56190: LD_INT 2
56192: DOUBLE
56193: EQUAL
56194: IFTRUE 56198
56196: GO 56254
56198: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56199: LD_ADDR_VAR 0 9
56203: PUSH
56204: LD_VAR 0 17
56208: PUSH
56209: LD_VAR 0 18
56213: PUSH
56214: LD_VAR 0 19
56218: PUSH
56219: LD_VAR 0 20
56223: PUSH
56224: LD_VAR 0 21
56228: PUSH
56229: LD_VAR 0 22
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: PUSH
56242: LD_VAR 0 4
56246: PUSH
56247: LD_INT 1
56249: PLUS
56250: ARRAY
56251: ST_TO_ADDR
56252: GO 56319
56254: LD_INT 3
56256: DOUBLE
56257: EQUAL
56258: IFTRUE 56262
56260: GO 56318
56262: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56263: LD_ADDR_VAR 0 9
56267: PUSH
56268: LD_VAR 0 23
56272: PUSH
56273: LD_VAR 0 24
56277: PUSH
56278: LD_VAR 0 25
56282: PUSH
56283: LD_VAR 0 26
56287: PUSH
56288: LD_VAR 0 27
56292: PUSH
56293: LD_VAR 0 28
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: PUSH
56306: LD_VAR 0 4
56310: PUSH
56311: LD_INT 1
56313: PLUS
56314: ARRAY
56315: ST_TO_ADDR
56316: GO 56319
56318: POP
56319: GO 56874
56321: LD_INT 2
56323: DOUBLE
56324: EQUAL
56325: IFTRUE 56335
56327: LD_INT 3
56329: DOUBLE
56330: EQUAL
56331: IFTRUE 56335
56333: GO 56391
56335: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56336: LD_ADDR_VAR 0 9
56340: PUSH
56341: LD_VAR 0 29
56345: PUSH
56346: LD_VAR 0 30
56350: PUSH
56351: LD_VAR 0 31
56355: PUSH
56356: LD_VAR 0 32
56360: PUSH
56361: LD_VAR 0 33
56365: PUSH
56366: LD_VAR 0 34
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: PUSH
56379: LD_VAR 0 4
56383: PUSH
56384: LD_INT 1
56386: PLUS
56387: ARRAY
56388: ST_TO_ADDR
56389: GO 56874
56391: LD_INT 16
56393: DOUBLE
56394: EQUAL
56395: IFTRUE 56453
56397: LD_INT 17
56399: DOUBLE
56400: EQUAL
56401: IFTRUE 56453
56403: LD_INT 18
56405: DOUBLE
56406: EQUAL
56407: IFTRUE 56453
56409: LD_INT 19
56411: DOUBLE
56412: EQUAL
56413: IFTRUE 56453
56415: LD_INT 22
56417: DOUBLE
56418: EQUAL
56419: IFTRUE 56453
56421: LD_INT 20
56423: DOUBLE
56424: EQUAL
56425: IFTRUE 56453
56427: LD_INT 21
56429: DOUBLE
56430: EQUAL
56431: IFTRUE 56453
56433: LD_INT 23
56435: DOUBLE
56436: EQUAL
56437: IFTRUE 56453
56439: LD_INT 24
56441: DOUBLE
56442: EQUAL
56443: IFTRUE 56453
56445: LD_INT 25
56447: DOUBLE
56448: EQUAL
56449: IFTRUE 56453
56451: GO 56509
56453: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56454: LD_ADDR_VAR 0 9
56458: PUSH
56459: LD_VAR 0 35
56463: PUSH
56464: LD_VAR 0 36
56468: PUSH
56469: LD_VAR 0 37
56473: PUSH
56474: LD_VAR 0 38
56478: PUSH
56479: LD_VAR 0 39
56483: PUSH
56484: LD_VAR 0 40
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: PUSH
56497: LD_VAR 0 4
56501: PUSH
56502: LD_INT 1
56504: PLUS
56505: ARRAY
56506: ST_TO_ADDR
56507: GO 56874
56509: LD_INT 6
56511: DOUBLE
56512: EQUAL
56513: IFTRUE 56565
56515: LD_INT 7
56517: DOUBLE
56518: EQUAL
56519: IFTRUE 56565
56521: LD_INT 8
56523: DOUBLE
56524: EQUAL
56525: IFTRUE 56565
56527: LD_INT 13
56529: DOUBLE
56530: EQUAL
56531: IFTRUE 56565
56533: LD_INT 12
56535: DOUBLE
56536: EQUAL
56537: IFTRUE 56565
56539: LD_INT 15
56541: DOUBLE
56542: EQUAL
56543: IFTRUE 56565
56545: LD_INT 11
56547: DOUBLE
56548: EQUAL
56549: IFTRUE 56565
56551: LD_INT 14
56553: DOUBLE
56554: EQUAL
56555: IFTRUE 56565
56557: LD_INT 10
56559: DOUBLE
56560: EQUAL
56561: IFTRUE 56565
56563: GO 56621
56565: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56566: LD_ADDR_VAR 0 9
56570: PUSH
56571: LD_VAR 0 41
56575: PUSH
56576: LD_VAR 0 42
56580: PUSH
56581: LD_VAR 0 43
56585: PUSH
56586: LD_VAR 0 44
56590: PUSH
56591: LD_VAR 0 45
56595: PUSH
56596: LD_VAR 0 46
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: PUSH
56609: LD_VAR 0 4
56613: PUSH
56614: LD_INT 1
56616: PLUS
56617: ARRAY
56618: ST_TO_ADDR
56619: GO 56874
56621: LD_INT 36
56623: DOUBLE
56624: EQUAL
56625: IFTRUE 56629
56627: GO 56685
56629: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56630: LD_ADDR_VAR 0 9
56634: PUSH
56635: LD_VAR 0 47
56639: PUSH
56640: LD_VAR 0 48
56644: PUSH
56645: LD_VAR 0 49
56649: PUSH
56650: LD_VAR 0 50
56654: PUSH
56655: LD_VAR 0 51
56659: PUSH
56660: LD_VAR 0 52
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: PUSH
56673: LD_VAR 0 4
56677: PUSH
56678: LD_INT 1
56680: PLUS
56681: ARRAY
56682: ST_TO_ADDR
56683: GO 56874
56685: LD_INT 4
56687: DOUBLE
56688: EQUAL
56689: IFTRUE 56711
56691: LD_INT 5
56693: DOUBLE
56694: EQUAL
56695: IFTRUE 56711
56697: LD_INT 34
56699: DOUBLE
56700: EQUAL
56701: IFTRUE 56711
56703: LD_INT 37
56705: DOUBLE
56706: EQUAL
56707: IFTRUE 56711
56709: GO 56767
56711: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56712: LD_ADDR_VAR 0 9
56716: PUSH
56717: LD_VAR 0 53
56721: PUSH
56722: LD_VAR 0 54
56726: PUSH
56727: LD_VAR 0 55
56731: PUSH
56732: LD_VAR 0 56
56736: PUSH
56737: LD_VAR 0 57
56741: PUSH
56742: LD_VAR 0 58
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: PUSH
56755: LD_VAR 0 4
56759: PUSH
56760: LD_INT 1
56762: PLUS
56763: ARRAY
56764: ST_TO_ADDR
56765: GO 56874
56767: LD_INT 31
56769: DOUBLE
56770: EQUAL
56771: IFTRUE 56817
56773: LD_INT 32
56775: DOUBLE
56776: EQUAL
56777: IFTRUE 56817
56779: LD_INT 33
56781: DOUBLE
56782: EQUAL
56783: IFTRUE 56817
56785: LD_INT 27
56787: DOUBLE
56788: EQUAL
56789: IFTRUE 56817
56791: LD_INT 26
56793: DOUBLE
56794: EQUAL
56795: IFTRUE 56817
56797: LD_INT 28
56799: DOUBLE
56800: EQUAL
56801: IFTRUE 56817
56803: LD_INT 29
56805: DOUBLE
56806: EQUAL
56807: IFTRUE 56817
56809: LD_INT 30
56811: DOUBLE
56812: EQUAL
56813: IFTRUE 56817
56815: GO 56873
56817: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56818: LD_ADDR_VAR 0 9
56822: PUSH
56823: LD_VAR 0 59
56827: PUSH
56828: LD_VAR 0 60
56832: PUSH
56833: LD_VAR 0 61
56837: PUSH
56838: LD_VAR 0 62
56842: PUSH
56843: LD_VAR 0 63
56847: PUSH
56848: LD_VAR 0 64
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: PUSH
56861: LD_VAR 0 4
56865: PUSH
56866: LD_INT 1
56868: PLUS
56869: ARRAY
56870: ST_TO_ADDR
56871: GO 56874
56873: POP
// temp_list2 = [ ] ;
56874: LD_ADDR_VAR 0 10
56878: PUSH
56879: EMPTY
56880: ST_TO_ADDR
// for i in temp_list do
56881: LD_ADDR_VAR 0 8
56885: PUSH
56886: LD_VAR 0 9
56890: PUSH
56891: FOR_IN
56892: IFFALSE 56944
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56894: LD_ADDR_VAR 0 10
56898: PUSH
56899: LD_VAR 0 10
56903: PUSH
56904: LD_VAR 0 8
56908: PUSH
56909: LD_INT 1
56911: ARRAY
56912: PUSH
56913: LD_VAR 0 2
56917: PLUS
56918: PUSH
56919: LD_VAR 0 8
56923: PUSH
56924: LD_INT 2
56926: ARRAY
56927: PUSH
56928: LD_VAR 0 3
56932: PLUS
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: EMPTY
56939: LIST
56940: ADD
56941: ST_TO_ADDR
56942: GO 56891
56944: POP
56945: POP
// result = temp_list2 ;
56946: LD_ADDR_VAR 0 7
56950: PUSH
56951: LD_VAR 0 10
56955: ST_TO_ADDR
// end ;
56956: LD_VAR 0 7
56960: RET
// export function EnemyInRange ( unit , dist ) ; begin
56961: LD_INT 0
56963: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56964: LD_ADDR_VAR 0 3
56968: PUSH
56969: LD_VAR 0 1
56973: PPUSH
56974: CALL_OW 255
56978: PPUSH
56979: LD_VAR 0 1
56983: PPUSH
56984: CALL_OW 250
56988: PPUSH
56989: LD_VAR 0 1
56993: PPUSH
56994: CALL_OW 251
56998: PPUSH
56999: LD_VAR 0 2
57003: PPUSH
57004: CALL 30356 0 4
57008: PUSH
57009: LD_INT 4
57011: ARRAY
57012: ST_TO_ADDR
// end ;
57013: LD_VAR 0 3
57017: RET
// export function PlayerSeeMe ( unit ) ; begin
57018: LD_INT 0
57020: PPUSH
// result := See ( your_side , unit ) ;
57021: LD_ADDR_VAR 0 2
57025: PUSH
57026: LD_OWVAR 2
57030: PPUSH
57031: LD_VAR 0 1
57035: PPUSH
57036: CALL_OW 292
57040: ST_TO_ADDR
// end ;
57041: LD_VAR 0 2
57045: RET
// export function ReverseDir ( unit ) ; begin
57046: LD_INT 0
57048: PPUSH
// if not unit then
57049: LD_VAR 0 1
57053: NOT
57054: IFFALSE 57058
// exit ;
57056: GO 57081
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57058: LD_ADDR_VAR 0 2
57062: PUSH
57063: LD_VAR 0 1
57067: PPUSH
57068: CALL_OW 254
57072: PUSH
57073: LD_INT 3
57075: PLUS
57076: PUSH
57077: LD_INT 6
57079: MOD
57080: ST_TO_ADDR
// end ;
57081: LD_VAR 0 2
57085: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57086: LD_INT 0
57088: PPUSH
57089: PPUSH
57090: PPUSH
57091: PPUSH
57092: PPUSH
// if not hexes then
57093: LD_VAR 0 2
57097: NOT
57098: IFFALSE 57102
// exit ;
57100: GO 57250
// dist := 9999 ;
57102: LD_ADDR_VAR 0 5
57106: PUSH
57107: LD_INT 9999
57109: ST_TO_ADDR
// for i = 1 to hexes do
57110: LD_ADDR_VAR 0 4
57114: PUSH
57115: DOUBLE
57116: LD_INT 1
57118: DEC
57119: ST_TO_ADDR
57120: LD_VAR 0 2
57124: PUSH
57125: FOR_TO
57126: IFFALSE 57238
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57128: LD_VAR 0 1
57132: PPUSH
57133: LD_VAR 0 2
57137: PUSH
57138: LD_VAR 0 4
57142: ARRAY
57143: PUSH
57144: LD_INT 1
57146: ARRAY
57147: PPUSH
57148: LD_VAR 0 2
57152: PUSH
57153: LD_VAR 0 4
57157: ARRAY
57158: PUSH
57159: LD_INT 2
57161: ARRAY
57162: PPUSH
57163: CALL_OW 297
57167: PUSH
57168: LD_VAR 0 5
57172: LESS
57173: IFFALSE 57236
// begin hex := hexes [ i ] ;
57175: LD_ADDR_VAR 0 7
57179: PUSH
57180: LD_VAR 0 2
57184: PUSH
57185: LD_VAR 0 4
57189: ARRAY
57190: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57191: LD_ADDR_VAR 0 5
57195: PUSH
57196: LD_VAR 0 1
57200: PPUSH
57201: LD_VAR 0 2
57205: PUSH
57206: LD_VAR 0 4
57210: ARRAY
57211: PUSH
57212: LD_INT 1
57214: ARRAY
57215: PPUSH
57216: LD_VAR 0 2
57220: PUSH
57221: LD_VAR 0 4
57225: ARRAY
57226: PUSH
57227: LD_INT 2
57229: ARRAY
57230: PPUSH
57231: CALL_OW 297
57235: ST_TO_ADDR
// end ; end ;
57236: GO 57125
57238: POP
57239: POP
// result := hex ;
57240: LD_ADDR_VAR 0 3
57244: PUSH
57245: LD_VAR 0 7
57249: ST_TO_ADDR
// end ;
57250: LD_VAR 0 3
57254: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57255: LD_INT 0
57257: PPUSH
57258: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57259: LD_VAR 0 1
57263: NOT
57264: PUSH
57265: LD_VAR 0 1
57269: PUSH
57270: LD_INT 21
57272: PUSH
57273: LD_INT 2
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 23
57282: PUSH
57283: LD_INT 2
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PPUSH
57294: CALL_OW 69
57298: IN
57299: NOT
57300: OR
57301: IFFALSE 57305
// exit ;
57303: GO 57352
// for i = 1 to 3 do
57305: LD_ADDR_VAR 0 3
57309: PUSH
57310: DOUBLE
57311: LD_INT 1
57313: DEC
57314: ST_TO_ADDR
57315: LD_INT 3
57317: PUSH
57318: FOR_TO
57319: IFFALSE 57350
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57321: LD_VAR 0 1
57325: PPUSH
57326: CALL_OW 250
57330: PPUSH
57331: LD_VAR 0 1
57335: PPUSH
57336: CALL_OW 251
57340: PPUSH
57341: LD_INT 1
57343: PPUSH
57344: CALL_OW 453
57348: GO 57318
57350: POP
57351: POP
// end ;
57352: LD_VAR 0 2
57356: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57357: LD_INT 0
57359: PPUSH
57360: PPUSH
57361: PPUSH
57362: PPUSH
57363: PPUSH
57364: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57365: LD_VAR 0 1
57369: NOT
57370: PUSH
57371: LD_VAR 0 2
57375: NOT
57376: OR
57377: PUSH
57378: LD_VAR 0 1
57382: PPUSH
57383: CALL_OW 314
57387: OR
57388: IFFALSE 57392
// exit ;
57390: GO 57833
// x := GetX ( enemy_unit ) ;
57392: LD_ADDR_VAR 0 7
57396: PUSH
57397: LD_VAR 0 2
57401: PPUSH
57402: CALL_OW 250
57406: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57407: LD_ADDR_VAR 0 8
57411: PUSH
57412: LD_VAR 0 2
57416: PPUSH
57417: CALL_OW 251
57421: ST_TO_ADDR
// if not x or not y then
57422: LD_VAR 0 7
57426: NOT
57427: PUSH
57428: LD_VAR 0 8
57432: NOT
57433: OR
57434: IFFALSE 57438
// exit ;
57436: GO 57833
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57438: LD_ADDR_VAR 0 6
57442: PUSH
57443: LD_VAR 0 7
57447: PPUSH
57448: LD_INT 0
57450: PPUSH
57451: LD_INT 4
57453: PPUSH
57454: CALL_OW 272
57458: PUSH
57459: LD_VAR 0 8
57463: PPUSH
57464: LD_INT 0
57466: PPUSH
57467: LD_INT 4
57469: PPUSH
57470: CALL_OW 273
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_VAR 0 7
57483: PPUSH
57484: LD_INT 1
57486: PPUSH
57487: LD_INT 4
57489: PPUSH
57490: CALL_OW 272
57494: PUSH
57495: LD_VAR 0 8
57499: PPUSH
57500: LD_INT 1
57502: PPUSH
57503: LD_INT 4
57505: PPUSH
57506: CALL_OW 273
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_VAR 0 7
57519: PPUSH
57520: LD_INT 2
57522: PPUSH
57523: LD_INT 4
57525: PPUSH
57526: CALL_OW 272
57530: PUSH
57531: LD_VAR 0 8
57535: PPUSH
57536: LD_INT 2
57538: PPUSH
57539: LD_INT 4
57541: PPUSH
57542: CALL_OW 273
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_VAR 0 7
57555: PPUSH
57556: LD_INT 3
57558: PPUSH
57559: LD_INT 4
57561: PPUSH
57562: CALL_OW 272
57566: PUSH
57567: LD_VAR 0 8
57571: PPUSH
57572: LD_INT 3
57574: PPUSH
57575: LD_INT 4
57577: PPUSH
57578: CALL_OW 273
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_VAR 0 7
57591: PPUSH
57592: LD_INT 4
57594: PPUSH
57595: LD_INT 4
57597: PPUSH
57598: CALL_OW 272
57602: PUSH
57603: LD_VAR 0 8
57607: PPUSH
57608: LD_INT 4
57610: PPUSH
57611: LD_INT 4
57613: PPUSH
57614: CALL_OW 273
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_VAR 0 7
57627: PPUSH
57628: LD_INT 5
57630: PPUSH
57631: LD_INT 4
57633: PPUSH
57634: CALL_OW 272
57638: PUSH
57639: LD_VAR 0 8
57643: PPUSH
57644: LD_INT 5
57646: PPUSH
57647: LD_INT 4
57649: PPUSH
57650: CALL_OW 273
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: ST_TO_ADDR
// for i = tmp downto 1 do
57667: LD_ADDR_VAR 0 4
57671: PUSH
57672: DOUBLE
57673: LD_VAR 0 6
57677: INC
57678: ST_TO_ADDR
57679: LD_INT 1
57681: PUSH
57682: FOR_DOWNTO
57683: IFFALSE 57784
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57685: LD_VAR 0 6
57689: PUSH
57690: LD_VAR 0 4
57694: ARRAY
57695: PUSH
57696: LD_INT 1
57698: ARRAY
57699: PPUSH
57700: LD_VAR 0 6
57704: PUSH
57705: LD_VAR 0 4
57709: ARRAY
57710: PUSH
57711: LD_INT 2
57713: ARRAY
57714: PPUSH
57715: CALL_OW 488
57719: NOT
57720: PUSH
57721: LD_VAR 0 6
57725: PUSH
57726: LD_VAR 0 4
57730: ARRAY
57731: PUSH
57732: LD_INT 1
57734: ARRAY
57735: PPUSH
57736: LD_VAR 0 6
57740: PUSH
57741: LD_VAR 0 4
57745: ARRAY
57746: PUSH
57747: LD_INT 2
57749: ARRAY
57750: PPUSH
57751: CALL_OW 428
57755: PUSH
57756: LD_INT 0
57758: NONEQUAL
57759: OR
57760: IFFALSE 57782
// tmp := Delete ( tmp , i ) ;
57762: LD_ADDR_VAR 0 6
57766: PUSH
57767: LD_VAR 0 6
57771: PPUSH
57772: LD_VAR 0 4
57776: PPUSH
57777: CALL_OW 3
57781: ST_TO_ADDR
57782: GO 57682
57784: POP
57785: POP
// j := GetClosestHex ( unit , tmp ) ;
57786: LD_ADDR_VAR 0 5
57790: PUSH
57791: LD_VAR 0 1
57795: PPUSH
57796: LD_VAR 0 6
57800: PPUSH
57801: CALL 57086 0 2
57805: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57806: LD_VAR 0 1
57810: PPUSH
57811: LD_VAR 0 5
57815: PUSH
57816: LD_INT 1
57818: ARRAY
57819: PPUSH
57820: LD_VAR 0 5
57824: PUSH
57825: LD_INT 2
57827: ARRAY
57828: PPUSH
57829: CALL_OW 111
// end ;
57833: LD_VAR 0 3
57837: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57838: LD_INT 0
57840: PPUSH
57841: PPUSH
57842: PPUSH
// uc_side = 0 ;
57843: LD_ADDR_OWVAR 20
57847: PUSH
57848: LD_INT 0
57850: ST_TO_ADDR
// uc_nation = 0 ;
57851: LD_ADDR_OWVAR 21
57855: PUSH
57856: LD_INT 0
57858: ST_TO_ADDR
// InitHc_All ( ) ;
57859: CALL_OW 584
// InitVc ;
57863: CALL_OW 20
// if mastodonts then
57867: LD_VAR 0 6
57871: IFFALSE 57938
// for i = 1 to mastodonts do
57873: LD_ADDR_VAR 0 11
57877: PUSH
57878: DOUBLE
57879: LD_INT 1
57881: DEC
57882: ST_TO_ADDR
57883: LD_VAR 0 6
57887: PUSH
57888: FOR_TO
57889: IFFALSE 57936
// begin vc_chassis := 31 ;
57891: LD_ADDR_OWVAR 37
57895: PUSH
57896: LD_INT 31
57898: ST_TO_ADDR
// vc_control := control_rider ;
57899: LD_ADDR_OWVAR 38
57903: PUSH
57904: LD_INT 4
57906: ST_TO_ADDR
// animal := CreateVehicle ;
57907: LD_ADDR_VAR 0 12
57911: PUSH
57912: CALL_OW 45
57916: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57917: LD_VAR 0 12
57921: PPUSH
57922: LD_VAR 0 8
57926: PPUSH
57927: LD_INT 0
57929: PPUSH
57930: CALL 60126 0 3
// end ;
57934: GO 57888
57936: POP
57937: POP
// if horses then
57938: LD_VAR 0 5
57942: IFFALSE 58009
// for i = 1 to horses do
57944: LD_ADDR_VAR 0 11
57948: PUSH
57949: DOUBLE
57950: LD_INT 1
57952: DEC
57953: ST_TO_ADDR
57954: LD_VAR 0 5
57958: PUSH
57959: FOR_TO
57960: IFFALSE 58007
// begin hc_class := 21 ;
57962: LD_ADDR_OWVAR 28
57966: PUSH
57967: LD_INT 21
57969: ST_TO_ADDR
// hc_gallery :=  ;
57970: LD_ADDR_OWVAR 33
57974: PUSH
57975: LD_STRING 
57977: ST_TO_ADDR
// animal := CreateHuman ;
57978: LD_ADDR_VAR 0 12
57982: PUSH
57983: CALL_OW 44
57987: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57988: LD_VAR 0 12
57992: PPUSH
57993: LD_VAR 0 8
57997: PPUSH
57998: LD_INT 0
58000: PPUSH
58001: CALL 60126 0 3
// end ;
58005: GO 57959
58007: POP
58008: POP
// if birds then
58009: LD_VAR 0 1
58013: IFFALSE 58080
// for i = 1 to birds do
58015: LD_ADDR_VAR 0 11
58019: PUSH
58020: DOUBLE
58021: LD_INT 1
58023: DEC
58024: ST_TO_ADDR
58025: LD_VAR 0 1
58029: PUSH
58030: FOR_TO
58031: IFFALSE 58078
// begin hc_class = 18 ;
58033: LD_ADDR_OWVAR 28
58037: PUSH
58038: LD_INT 18
58040: ST_TO_ADDR
// hc_gallery =  ;
58041: LD_ADDR_OWVAR 33
58045: PUSH
58046: LD_STRING 
58048: ST_TO_ADDR
// animal := CreateHuman ;
58049: LD_ADDR_VAR 0 12
58053: PUSH
58054: CALL_OW 44
58058: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58059: LD_VAR 0 12
58063: PPUSH
58064: LD_VAR 0 8
58068: PPUSH
58069: LD_INT 0
58071: PPUSH
58072: CALL 60126 0 3
// end ;
58076: GO 58030
58078: POP
58079: POP
// if tigers then
58080: LD_VAR 0 2
58084: IFFALSE 58168
// for i = 1 to tigers do
58086: LD_ADDR_VAR 0 11
58090: PUSH
58091: DOUBLE
58092: LD_INT 1
58094: DEC
58095: ST_TO_ADDR
58096: LD_VAR 0 2
58100: PUSH
58101: FOR_TO
58102: IFFALSE 58166
// begin hc_class = class_tiger ;
58104: LD_ADDR_OWVAR 28
58108: PUSH
58109: LD_INT 14
58111: ST_TO_ADDR
// hc_gallery =  ;
58112: LD_ADDR_OWVAR 33
58116: PUSH
58117: LD_STRING 
58119: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58120: LD_ADDR_OWVAR 35
58124: PUSH
58125: LD_INT 7
58127: NEG
58128: PPUSH
58129: LD_INT 7
58131: PPUSH
58132: CALL_OW 12
58136: ST_TO_ADDR
// animal := CreateHuman ;
58137: LD_ADDR_VAR 0 12
58141: PUSH
58142: CALL_OW 44
58146: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58147: LD_VAR 0 12
58151: PPUSH
58152: LD_VAR 0 8
58156: PPUSH
58157: LD_INT 0
58159: PPUSH
58160: CALL 60126 0 3
// end ;
58164: GO 58101
58166: POP
58167: POP
// if apemans then
58168: LD_VAR 0 3
58172: IFFALSE 58295
// for i = 1 to apemans do
58174: LD_ADDR_VAR 0 11
58178: PUSH
58179: DOUBLE
58180: LD_INT 1
58182: DEC
58183: ST_TO_ADDR
58184: LD_VAR 0 3
58188: PUSH
58189: FOR_TO
58190: IFFALSE 58293
// begin hc_class = class_apeman ;
58192: LD_ADDR_OWVAR 28
58196: PUSH
58197: LD_INT 12
58199: ST_TO_ADDR
// hc_gallery =  ;
58200: LD_ADDR_OWVAR 33
58204: PUSH
58205: LD_STRING 
58207: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58208: LD_ADDR_OWVAR 35
58212: PUSH
58213: LD_INT 2
58215: NEG
58216: PPUSH
58217: LD_INT 2
58219: PPUSH
58220: CALL_OW 12
58224: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58225: LD_ADDR_OWVAR 31
58229: PUSH
58230: LD_INT 1
58232: PPUSH
58233: LD_INT 3
58235: PPUSH
58236: CALL_OW 12
58240: PUSH
58241: LD_INT 1
58243: PPUSH
58244: LD_INT 3
58246: PPUSH
58247: CALL_OW 12
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: ST_TO_ADDR
// animal := CreateHuman ;
58264: LD_ADDR_VAR 0 12
58268: PUSH
58269: CALL_OW 44
58273: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58274: LD_VAR 0 12
58278: PPUSH
58279: LD_VAR 0 8
58283: PPUSH
58284: LD_INT 0
58286: PPUSH
58287: CALL 60126 0 3
// end ;
58291: GO 58189
58293: POP
58294: POP
// if enchidnas then
58295: LD_VAR 0 4
58299: IFFALSE 58366
// for i = 1 to enchidnas do
58301: LD_ADDR_VAR 0 11
58305: PUSH
58306: DOUBLE
58307: LD_INT 1
58309: DEC
58310: ST_TO_ADDR
58311: LD_VAR 0 4
58315: PUSH
58316: FOR_TO
58317: IFFALSE 58364
// begin hc_class = 13 ;
58319: LD_ADDR_OWVAR 28
58323: PUSH
58324: LD_INT 13
58326: ST_TO_ADDR
// hc_gallery =  ;
58327: LD_ADDR_OWVAR 33
58331: PUSH
58332: LD_STRING 
58334: ST_TO_ADDR
// animal := CreateHuman ;
58335: LD_ADDR_VAR 0 12
58339: PUSH
58340: CALL_OW 44
58344: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58345: LD_VAR 0 12
58349: PPUSH
58350: LD_VAR 0 8
58354: PPUSH
58355: LD_INT 0
58357: PPUSH
58358: CALL 60126 0 3
// end ;
58362: GO 58316
58364: POP
58365: POP
// if fishes then
58366: LD_VAR 0 7
58370: IFFALSE 58437
// for i = 1 to fishes do
58372: LD_ADDR_VAR 0 11
58376: PUSH
58377: DOUBLE
58378: LD_INT 1
58380: DEC
58381: ST_TO_ADDR
58382: LD_VAR 0 7
58386: PUSH
58387: FOR_TO
58388: IFFALSE 58435
// begin hc_class = 20 ;
58390: LD_ADDR_OWVAR 28
58394: PUSH
58395: LD_INT 20
58397: ST_TO_ADDR
// hc_gallery =  ;
58398: LD_ADDR_OWVAR 33
58402: PUSH
58403: LD_STRING 
58405: ST_TO_ADDR
// animal := CreateHuman ;
58406: LD_ADDR_VAR 0 12
58410: PUSH
58411: CALL_OW 44
58415: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58416: LD_VAR 0 12
58420: PPUSH
58421: LD_VAR 0 9
58425: PPUSH
58426: LD_INT 0
58428: PPUSH
58429: CALL 60126 0 3
// end ;
58433: GO 58387
58435: POP
58436: POP
// end ;
58437: LD_VAR 0 10
58441: RET
// export function WantHeal ( sci , unit ) ; begin
58442: LD_INT 0
58444: PPUSH
// if GetTaskList ( sci ) > 0 then
58445: LD_VAR 0 1
58449: PPUSH
58450: CALL_OW 437
58454: PUSH
58455: LD_INT 0
58457: GREATER
58458: IFFALSE 58528
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58460: LD_VAR 0 1
58464: PPUSH
58465: CALL_OW 437
58469: PUSH
58470: LD_INT 1
58472: ARRAY
58473: PUSH
58474: LD_INT 1
58476: ARRAY
58477: PUSH
58478: LD_STRING l
58480: EQUAL
58481: PUSH
58482: LD_VAR 0 1
58486: PPUSH
58487: CALL_OW 437
58491: PUSH
58492: LD_INT 1
58494: ARRAY
58495: PUSH
58496: LD_INT 4
58498: ARRAY
58499: PUSH
58500: LD_VAR 0 2
58504: EQUAL
58505: AND
58506: IFFALSE 58518
// result := true else
58508: LD_ADDR_VAR 0 3
58512: PUSH
58513: LD_INT 1
58515: ST_TO_ADDR
58516: GO 58526
// result := false ;
58518: LD_ADDR_VAR 0 3
58522: PUSH
58523: LD_INT 0
58525: ST_TO_ADDR
// end else
58526: GO 58536
// result := false ;
58528: LD_ADDR_VAR 0 3
58532: PUSH
58533: LD_INT 0
58535: ST_TO_ADDR
// end ;
58536: LD_VAR 0 3
58540: RET
// export function HealTarget ( sci ) ; begin
58541: LD_INT 0
58543: PPUSH
// if not sci then
58544: LD_VAR 0 1
58548: NOT
58549: IFFALSE 58553
// exit ;
58551: GO 58618
// result := 0 ;
58553: LD_ADDR_VAR 0 2
58557: PUSH
58558: LD_INT 0
58560: ST_TO_ADDR
// if GetTaskList ( sci ) then
58561: LD_VAR 0 1
58565: PPUSH
58566: CALL_OW 437
58570: IFFALSE 58618
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58572: LD_VAR 0 1
58576: PPUSH
58577: CALL_OW 437
58581: PUSH
58582: LD_INT 1
58584: ARRAY
58585: PUSH
58586: LD_INT 1
58588: ARRAY
58589: PUSH
58590: LD_STRING l
58592: EQUAL
58593: IFFALSE 58618
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58595: LD_ADDR_VAR 0 2
58599: PUSH
58600: LD_VAR 0 1
58604: PPUSH
58605: CALL_OW 437
58609: PUSH
58610: LD_INT 1
58612: ARRAY
58613: PUSH
58614: LD_INT 4
58616: ARRAY
58617: ST_TO_ADDR
// end ;
58618: LD_VAR 0 2
58622: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58623: LD_INT 0
58625: PPUSH
58626: PPUSH
58627: PPUSH
58628: PPUSH
// if not base_units then
58629: LD_VAR 0 1
58633: NOT
58634: IFFALSE 58638
// exit ;
58636: GO 58725
// result := false ;
58638: LD_ADDR_VAR 0 2
58642: PUSH
58643: LD_INT 0
58645: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58646: LD_ADDR_VAR 0 5
58650: PUSH
58651: LD_VAR 0 1
58655: PPUSH
58656: LD_INT 21
58658: PUSH
58659: LD_INT 3
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PPUSH
58666: CALL_OW 72
58670: ST_TO_ADDR
// if not tmp then
58671: LD_VAR 0 5
58675: NOT
58676: IFFALSE 58680
// exit ;
58678: GO 58725
// for i in tmp do
58680: LD_ADDR_VAR 0 3
58684: PUSH
58685: LD_VAR 0 5
58689: PUSH
58690: FOR_IN
58691: IFFALSE 58723
// begin result := EnemyInRange ( i , 22 ) ;
58693: LD_ADDR_VAR 0 2
58697: PUSH
58698: LD_VAR 0 3
58702: PPUSH
58703: LD_INT 22
58705: PPUSH
58706: CALL 56961 0 2
58710: ST_TO_ADDR
// if result then
58711: LD_VAR 0 2
58715: IFFALSE 58721
// exit ;
58717: POP
58718: POP
58719: GO 58725
// end ;
58721: GO 58690
58723: POP
58724: POP
// end ;
58725: LD_VAR 0 2
58729: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58730: LD_INT 0
58732: PPUSH
58733: PPUSH
// if not units then
58734: LD_VAR 0 1
58738: NOT
58739: IFFALSE 58743
// exit ;
58741: GO 58813
// result := [ ] ;
58743: LD_ADDR_VAR 0 3
58747: PUSH
58748: EMPTY
58749: ST_TO_ADDR
// for i in units do
58750: LD_ADDR_VAR 0 4
58754: PUSH
58755: LD_VAR 0 1
58759: PUSH
58760: FOR_IN
58761: IFFALSE 58811
// if GetTag ( i ) = tag then
58763: LD_VAR 0 4
58767: PPUSH
58768: CALL_OW 110
58772: PUSH
58773: LD_VAR 0 2
58777: EQUAL
58778: IFFALSE 58809
// result := Insert ( result , result + 1 , i ) ;
58780: LD_ADDR_VAR 0 3
58784: PUSH
58785: LD_VAR 0 3
58789: PPUSH
58790: LD_VAR 0 3
58794: PUSH
58795: LD_INT 1
58797: PLUS
58798: PPUSH
58799: LD_VAR 0 4
58803: PPUSH
58804: CALL_OW 2
58808: ST_TO_ADDR
58809: GO 58760
58811: POP
58812: POP
// end ;
58813: LD_VAR 0 3
58817: RET
// export function IsDriver ( un ) ; begin
58818: LD_INT 0
58820: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58821: LD_ADDR_VAR 0 2
58825: PUSH
58826: LD_VAR 0 1
58830: PUSH
58831: LD_INT 55
58833: PUSH
58834: EMPTY
58835: LIST
58836: PPUSH
58837: CALL_OW 69
58841: IN
58842: ST_TO_ADDR
// end ;
58843: LD_VAR 0 2
58847: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58848: LD_INT 0
58850: PPUSH
58851: PPUSH
// list := [ ] ;
58852: LD_ADDR_VAR 0 5
58856: PUSH
58857: EMPTY
58858: ST_TO_ADDR
// case d of 0 :
58859: LD_VAR 0 3
58863: PUSH
58864: LD_INT 0
58866: DOUBLE
58867: EQUAL
58868: IFTRUE 58872
58870: GO 59005
58872: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58873: LD_ADDR_VAR 0 5
58877: PUSH
58878: LD_VAR 0 1
58882: PUSH
58883: LD_INT 4
58885: MINUS
58886: PUSH
58887: LD_VAR 0 2
58891: PUSH
58892: LD_INT 4
58894: MINUS
58895: PUSH
58896: LD_INT 2
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: LIST
58903: PUSH
58904: LD_VAR 0 1
58908: PUSH
58909: LD_INT 3
58911: MINUS
58912: PUSH
58913: LD_VAR 0 2
58917: PUSH
58918: LD_INT 1
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: LIST
58925: PUSH
58926: LD_VAR 0 1
58930: PUSH
58931: LD_INT 4
58933: PLUS
58934: PUSH
58935: LD_VAR 0 2
58939: PUSH
58940: LD_INT 4
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: LIST
58947: PUSH
58948: LD_VAR 0 1
58952: PUSH
58953: LD_INT 3
58955: PLUS
58956: PUSH
58957: LD_VAR 0 2
58961: PUSH
58962: LD_INT 3
58964: PLUS
58965: PUSH
58966: LD_INT 5
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: LIST
58973: PUSH
58974: LD_VAR 0 1
58978: PUSH
58979: LD_VAR 0 2
58983: PUSH
58984: LD_INT 4
58986: PLUS
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: LIST
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: ST_TO_ADDR
// end ; 1 :
59003: GO 59703
59005: LD_INT 1
59007: DOUBLE
59008: EQUAL
59009: IFTRUE 59013
59011: GO 59146
59013: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59014: LD_ADDR_VAR 0 5
59018: PUSH
59019: LD_VAR 0 1
59023: PUSH
59024: LD_VAR 0 2
59028: PUSH
59029: LD_INT 4
59031: MINUS
59032: PUSH
59033: LD_INT 3
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: LIST
59040: PUSH
59041: LD_VAR 0 1
59045: PUSH
59046: LD_INT 3
59048: MINUS
59049: PUSH
59050: LD_VAR 0 2
59054: PUSH
59055: LD_INT 3
59057: MINUS
59058: PUSH
59059: LD_INT 2
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: LIST
59066: PUSH
59067: LD_VAR 0 1
59071: PUSH
59072: LD_INT 4
59074: MINUS
59075: PUSH
59076: LD_VAR 0 2
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: LIST
59088: PUSH
59089: LD_VAR 0 1
59093: PUSH
59094: LD_VAR 0 2
59098: PUSH
59099: LD_INT 3
59101: PLUS
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: LIST
59110: PUSH
59111: LD_VAR 0 1
59115: PUSH
59116: LD_INT 4
59118: PLUS
59119: PUSH
59120: LD_VAR 0 2
59124: PUSH
59125: LD_INT 4
59127: PLUS
59128: PUSH
59129: LD_INT 5
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: LIST
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: ST_TO_ADDR
// end ; 2 :
59144: GO 59703
59146: LD_INT 2
59148: DOUBLE
59149: EQUAL
59150: IFTRUE 59154
59152: GO 59283
59154: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59155: LD_ADDR_VAR 0 5
59159: PUSH
59160: LD_VAR 0 1
59164: PUSH
59165: LD_VAR 0 2
59169: PUSH
59170: LD_INT 3
59172: MINUS
59173: PUSH
59174: LD_INT 3
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: LIST
59181: PUSH
59182: LD_VAR 0 1
59186: PUSH
59187: LD_INT 4
59189: PLUS
59190: PUSH
59191: LD_VAR 0 2
59195: PUSH
59196: LD_INT 4
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: LIST
59203: PUSH
59204: LD_VAR 0 1
59208: PUSH
59209: LD_VAR 0 2
59213: PUSH
59214: LD_INT 4
59216: PLUS
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: LIST
59225: PUSH
59226: LD_VAR 0 1
59230: PUSH
59231: LD_INT 3
59233: MINUS
59234: PUSH
59235: LD_VAR 0 2
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: LIST
59247: PUSH
59248: LD_VAR 0 1
59252: PUSH
59253: LD_INT 4
59255: MINUS
59256: PUSH
59257: LD_VAR 0 2
59261: PUSH
59262: LD_INT 4
59264: MINUS
59265: PUSH
59266: LD_INT 2
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: LIST
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: ST_TO_ADDR
// end ; 3 :
59281: GO 59703
59283: LD_INT 3
59285: DOUBLE
59286: EQUAL
59287: IFTRUE 59291
59289: GO 59424
59291: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59292: LD_ADDR_VAR 0 5
59296: PUSH
59297: LD_VAR 0 1
59301: PUSH
59302: LD_INT 3
59304: PLUS
59305: PUSH
59306: LD_VAR 0 2
59310: PUSH
59311: LD_INT 4
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: LIST
59318: PUSH
59319: LD_VAR 0 1
59323: PUSH
59324: LD_INT 4
59326: PLUS
59327: PUSH
59328: LD_VAR 0 2
59332: PUSH
59333: LD_INT 4
59335: PLUS
59336: PUSH
59337: LD_INT 5
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: LIST
59344: PUSH
59345: LD_VAR 0 1
59349: PUSH
59350: LD_INT 4
59352: MINUS
59353: PUSH
59354: LD_VAR 0 2
59358: PUSH
59359: LD_INT 1
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: LIST
59366: PUSH
59367: LD_VAR 0 1
59371: PUSH
59372: LD_VAR 0 2
59376: PUSH
59377: LD_INT 4
59379: MINUS
59380: PUSH
59381: LD_INT 3
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: LIST
59388: PUSH
59389: LD_VAR 0 1
59393: PUSH
59394: LD_INT 3
59396: MINUS
59397: PUSH
59398: LD_VAR 0 2
59402: PUSH
59403: LD_INT 3
59405: MINUS
59406: PUSH
59407: LD_INT 2
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: LIST
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: ST_TO_ADDR
// end ; 4 :
59422: GO 59703
59424: LD_INT 4
59426: DOUBLE
59427: EQUAL
59428: IFTRUE 59432
59430: GO 59565
59432: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59433: LD_ADDR_VAR 0 5
59437: PUSH
59438: LD_VAR 0 1
59442: PUSH
59443: LD_VAR 0 2
59447: PUSH
59448: LD_INT 4
59450: PLUS
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: LIST
59459: PUSH
59460: LD_VAR 0 1
59464: PUSH
59465: LD_INT 3
59467: PLUS
59468: PUSH
59469: LD_VAR 0 2
59473: PUSH
59474: LD_INT 3
59476: PLUS
59477: PUSH
59478: LD_INT 5
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: LIST
59485: PUSH
59486: LD_VAR 0 1
59490: PUSH
59491: LD_INT 4
59493: PLUS
59494: PUSH
59495: LD_VAR 0 2
59499: PUSH
59500: LD_INT 4
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: LIST
59507: PUSH
59508: LD_VAR 0 1
59512: PUSH
59513: LD_VAR 0 2
59517: PUSH
59518: LD_INT 3
59520: MINUS
59521: PUSH
59522: LD_INT 3
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: LIST
59529: PUSH
59530: LD_VAR 0 1
59534: PUSH
59535: LD_INT 4
59537: MINUS
59538: PUSH
59539: LD_VAR 0 2
59543: PUSH
59544: LD_INT 4
59546: MINUS
59547: PUSH
59548: LD_INT 2
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: LIST
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: ST_TO_ADDR
// end ; 5 :
59563: GO 59703
59565: LD_INT 5
59567: DOUBLE
59568: EQUAL
59569: IFTRUE 59573
59571: GO 59702
59573: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59574: LD_ADDR_VAR 0 5
59578: PUSH
59579: LD_VAR 0 1
59583: PUSH
59584: LD_INT 4
59586: MINUS
59587: PUSH
59588: LD_VAR 0 2
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: LIST
59600: PUSH
59601: LD_VAR 0 1
59605: PUSH
59606: LD_VAR 0 2
59610: PUSH
59611: LD_INT 4
59613: MINUS
59614: PUSH
59615: LD_INT 3
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: LIST
59622: PUSH
59623: LD_VAR 0 1
59627: PUSH
59628: LD_INT 4
59630: PLUS
59631: PUSH
59632: LD_VAR 0 2
59636: PUSH
59637: LD_INT 4
59639: PLUS
59640: PUSH
59641: LD_INT 5
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: LIST
59648: PUSH
59649: LD_VAR 0 1
59653: PUSH
59654: LD_INT 3
59656: PLUS
59657: PUSH
59658: LD_VAR 0 2
59662: PUSH
59663: LD_INT 4
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: LIST
59670: PUSH
59671: LD_VAR 0 1
59675: PUSH
59676: LD_VAR 0 2
59680: PUSH
59681: LD_INT 3
59683: PLUS
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: LIST
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: ST_TO_ADDR
// end ; end ;
59700: GO 59703
59702: POP
// result := list ;
59703: LD_ADDR_VAR 0 4
59707: PUSH
59708: LD_VAR 0 5
59712: ST_TO_ADDR
// end ;
59713: LD_VAR 0 4
59717: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59718: LD_INT 0
59720: PPUSH
59721: PPUSH
59722: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59723: LD_VAR 0 1
59727: NOT
59728: PUSH
59729: LD_VAR 0 2
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: LD_INT 2
59739: PUSH
59740: LD_INT 3
59742: PUSH
59743: LD_INT 4
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: IN
59752: NOT
59753: OR
59754: IFFALSE 59758
// exit ;
59756: GO 59850
// tmp := [ ] ;
59758: LD_ADDR_VAR 0 5
59762: PUSH
59763: EMPTY
59764: ST_TO_ADDR
// for i in units do
59765: LD_ADDR_VAR 0 4
59769: PUSH
59770: LD_VAR 0 1
59774: PUSH
59775: FOR_IN
59776: IFFALSE 59819
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59778: LD_ADDR_VAR 0 5
59782: PUSH
59783: LD_VAR 0 5
59787: PPUSH
59788: LD_VAR 0 5
59792: PUSH
59793: LD_INT 1
59795: PLUS
59796: PPUSH
59797: LD_VAR 0 4
59801: PPUSH
59802: LD_VAR 0 2
59806: PPUSH
59807: CALL_OW 259
59811: PPUSH
59812: CALL_OW 2
59816: ST_TO_ADDR
59817: GO 59775
59819: POP
59820: POP
// if not tmp then
59821: LD_VAR 0 5
59825: NOT
59826: IFFALSE 59830
// exit ;
59828: GO 59850
// result := SortListByListDesc ( units , tmp ) ;
59830: LD_ADDR_VAR 0 3
59834: PUSH
59835: LD_VAR 0 1
59839: PPUSH
59840: LD_VAR 0 5
59844: PPUSH
59845: CALL_OW 77
59849: ST_TO_ADDR
// end ;
59850: LD_VAR 0 3
59854: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59855: LD_INT 0
59857: PPUSH
59858: PPUSH
59859: PPUSH
// result := false ;
59860: LD_ADDR_VAR 0 3
59864: PUSH
59865: LD_INT 0
59867: ST_TO_ADDR
// x := GetX ( building ) ;
59868: LD_ADDR_VAR 0 4
59872: PUSH
59873: LD_VAR 0 2
59877: PPUSH
59878: CALL_OW 250
59882: ST_TO_ADDR
// y := GetY ( building ) ;
59883: LD_ADDR_VAR 0 5
59887: PUSH
59888: LD_VAR 0 2
59892: PPUSH
59893: CALL_OW 251
59897: ST_TO_ADDR
// if not building or not x or not y then
59898: LD_VAR 0 2
59902: NOT
59903: PUSH
59904: LD_VAR 0 4
59908: NOT
59909: OR
59910: PUSH
59911: LD_VAR 0 5
59915: NOT
59916: OR
59917: IFFALSE 59921
// exit ;
59919: GO 60013
// if GetTaskList ( unit ) then
59921: LD_VAR 0 1
59925: PPUSH
59926: CALL_OW 437
59930: IFFALSE 60013
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59932: LD_STRING e
59934: PUSH
59935: LD_VAR 0 1
59939: PPUSH
59940: CALL_OW 437
59944: PUSH
59945: LD_INT 1
59947: ARRAY
59948: PUSH
59949: LD_INT 1
59951: ARRAY
59952: EQUAL
59953: PUSH
59954: LD_VAR 0 4
59958: PUSH
59959: LD_VAR 0 1
59963: PPUSH
59964: CALL_OW 437
59968: PUSH
59969: LD_INT 1
59971: ARRAY
59972: PUSH
59973: LD_INT 2
59975: ARRAY
59976: EQUAL
59977: AND
59978: PUSH
59979: LD_VAR 0 5
59983: PUSH
59984: LD_VAR 0 1
59988: PPUSH
59989: CALL_OW 437
59993: PUSH
59994: LD_INT 1
59996: ARRAY
59997: PUSH
59998: LD_INT 3
60000: ARRAY
60001: EQUAL
60002: AND
60003: IFFALSE 60013
// result := true end ;
60005: LD_ADDR_VAR 0 3
60009: PUSH
60010: LD_INT 1
60012: ST_TO_ADDR
// end ;
60013: LD_VAR 0 3
60017: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60018: LD_INT 0
60020: PPUSH
// result := false ;
60021: LD_ADDR_VAR 0 4
60025: PUSH
60026: LD_INT 0
60028: ST_TO_ADDR
// if GetTaskList ( unit ) then
60029: LD_VAR 0 1
60033: PPUSH
60034: CALL_OW 437
60038: IFFALSE 60121
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60040: LD_STRING M
60042: PUSH
60043: LD_VAR 0 1
60047: PPUSH
60048: CALL_OW 437
60052: PUSH
60053: LD_INT 1
60055: ARRAY
60056: PUSH
60057: LD_INT 1
60059: ARRAY
60060: EQUAL
60061: PUSH
60062: LD_VAR 0 2
60066: PUSH
60067: LD_VAR 0 1
60071: PPUSH
60072: CALL_OW 437
60076: PUSH
60077: LD_INT 1
60079: ARRAY
60080: PUSH
60081: LD_INT 2
60083: ARRAY
60084: EQUAL
60085: AND
60086: PUSH
60087: LD_VAR 0 3
60091: PUSH
60092: LD_VAR 0 1
60096: PPUSH
60097: CALL_OW 437
60101: PUSH
60102: LD_INT 1
60104: ARRAY
60105: PUSH
60106: LD_INT 3
60108: ARRAY
60109: EQUAL
60110: AND
60111: IFFALSE 60121
// result := true ;
60113: LD_ADDR_VAR 0 4
60117: PUSH
60118: LD_INT 1
60120: ST_TO_ADDR
// end ; end ;
60121: LD_VAR 0 4
60125: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60126: LD_INT 0
60128: PPUSH
60129: PPUSH
60130: PPUSH
60131: PPUSH
// if not unit or not area then
60132: LD_VAR 0 1
60136: NOT
60137: PUSH
60138: LD_VAR 0 2
60142: NOT
60143: OR
60144: IFFALSE 60148
// exit ;
60146: GO 60312
// tmp := AreaToList ( area , i ) ;
60148: LD_ADDR_VAR 0 6
60152: PUSH
60153: LD_VAR 0 2
60157: PPUSH
60158: LD_VAR 0 5
60162: PPUSH
60163: CALL_OW 517
60167: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60168: LD_ADDR_VAR 0 5
60172: PUSH
60173: DOUBLE
60174: LD_INT 1
60176: DEC
60177: ST_TO_ADDR
60178: LD_VAR 0 6
60182: PUSH
60183: LD_INT 1
60185: ARRAY
60186: PUSH
60187: FOR_TO
60188: IFFALSE 60310
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60190: LD_ADDR_VAR 0 7
60194: PUSH
60195: LD_VAR 0 6
60199: PUSH
60200: LD_INT 1
60202: ARRAY
60203: PUSH
60204: LD_VAR 0 5
60208: ARRAY
60209: PUSH
60210: LD_VAR 0 6
60214: PUSH
60215: LD_INT 2
60217: ARRAY
60218: PUSH
60219: LD_VAR 0 5
60223: ARRAY
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60229: LD_VAR 0 7
60233: PUSH
60234: LD_INT 1
60236: ARRAY
60237: PPUSH
60238: LD_VAR 0 7
60242: PUSH
60243: LD_INT 2
60245: ARRAY
60246: PPUSH
60247: CALL_OW 428
60251: PUSH
60252: LD_INT 0
60254: EQUAL
60255: IFFALSE 60308
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60257: LD_VAR 0 1
60261: PPUSH
60262: LD_VAR 0 7
60266: PUSH
60267: LD_INT 1
60269: ARRAY
60270: PPUSH
60271: LD_VAR 0 7
60275: PUSH
60276: LD_INT 2
60278: ARRAY
60279: PPUSH
60280: LD_VAR 0 3
60284: PPUSH
60285: CALL_OW 48
// result := IsPlaced ( unit ) ;
60289: LD_ADDR_VAR 0 4
60293: PUSH
60294: LD_VAR 0 1
60298: PPUSH
60299: CALL_OW 305
60303: ST_TO_ADDR
// exit ;
60304: POP
60305: POP
60306: GO 60312
// end ; end ;
60308: GO 60187
60310: POP
60311: POP
// end ;
60312: LD_VAR 0 4
60316: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60317: LD_INT 0
60319: PPUSH
60320: PPUSH
60321: PPUSH
// if not side or side > 8 then
60322: LD_VAR 0 1
60326: NOT
60327: PUSH
60328: LD_VAR 0 1
60332: PUSH
60333: LD_INT 8
60335: GREATER
60336: OR
60337: IFFALSE 60341
// exit ;
60339: GO 60528
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60341: LD_ADDR_VAR 0 4
60345: PUSH
60346: LD_INT 22
60348: PUSH
60349: LD_VAR 0 1
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 21
60360: PUSH
60361: LD_INT 3
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PPUSH
60372: CALL_OW 69
60376: ST_TO_ADDR
// if not tmp then
60377: LD_VAR 0 4
60381: NOT
60382: IFFALSE 60386
// exit ;
60384: GO 60528
// enable_addtolog := true ;
60386: LD_ADDR_OWVAR 81
60390: PUSH
60391: LD_INT 1
60393: ST_TO_ADDR
// AddToLog ( [ ) ;
60394: LD_STRING [
60396: PPUSH
60397: CALL_OW 561
// for i in tmp do
60401: LD_ADDR_VAR 0 3
60405: PUSH
60406: LD_VAR 0 4
60410: PUSH
60411: FOR_IN
60412: IFFALSE 60519
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60414: LD_STRING [
60416: PUSH
60417: LD_VAR 0 3
60421: PPUSH
60422: CALL_OW 266
60426: STR
60427: PUSH
60428: LD_STRING , 
60430: STR
60431: PUSH
60432: LD_VAR 0 3
60436: PPUSH
60437: CALL_OW 250
60441: STR
60442: PUSH
60443: LD_STRING , 
60445: STR
60446: PUSH
60447: LD_VAR 0 3
60451: PPUSH
60452: CALL_OW 251
60456: STR
60457: PUSH
60458: LD_STRING , 
60460: STR
60461: PUSH
60462: LD_VAR 0 3
60466: PPUSH
60467: CALL_OW 254
60471: STR
60472: PUSH
60473: LD_STRING , 
60475: STR
60476: PUSH
60477: LD_VAR 0 3
60481: PPUSH
60482: LD_INT 1
60484: PPUSH
60485: CALL_OW 268
60489: STR
60490: PUSH
60491: LD_STRING , 
60493: STR
60494: PUSH
60495: LD_VAR 0 3
60499: PPUSH
60500: LD_INT 2
60502: PPUSH
60503: CALL_OW 268
60507: STR
60508: PUSH
60509: LD_STRING ],
60511: STR
60512: PPUSH
60513: CALL_OW 561
// end ;
60517: GO 60411
60519: POP
60520: POP
// AddToLog ( ]; ) ;
60521: LD_STRING ];
60523: PPUSH
60524: CALL_OW 561
// end ;
60528: LD_VAR 0 2
60532: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60533: LD_INT 0
60535: PPUSH
60536: PPUSH
60537: PPUSH
60538: PPUSH
60539: PPUSH
// if not area or not rate or not max then
60540: LD_VAR 0 1
60544: NOT
60545: PUSH
60546: LD_VAR 0 2
60550: NOT
60551: OR
60552: PUSH
60553: LD_VAR 0 4
60557: NOT
60558: OR
60559: IFFALSE 60563
// exit ;
60561: GO 60755
// while 1 do
60563: LD_INT 1
60565: IFFALSE 60755
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60567: LD_ADDR_VAR 0 9
60571: PUSH
60572: LD_VAR 0 1
60576: PPUSH
60577: LD_INT 1
60579: PPUSH
60580: CALL_OW 287
60584: PUSH
60585: LD_INT 10
60587: MUL
60588: ST_TO_ADDR
// r := rate / 10 ;
60589: LD_ADDR_VAR 0 7
60593: PUSH
60594: LD_VAR 0 2
60598: PUSH
60599: LD_INT 10
60601: DIVREAL
60602: ST_TO_ADDR
// time := 1 1$00 ;
60603: LD_ADDR_VAR 0 8
60607: PUSH
60608: LD_INT 2100
60610: ST_TO_ADDR
// if amount < min then
60611: LD_VAR 0 9
60615: PUSH
60616: LD_VAR 0 3
60620: LESS
60621: IFFALSE 60639
// r := r * 2 else
60623: LD_ADDR_VAR 0 7
60627: PUSH
60628: LD_VAR 0 7
60632: PUSH
60633: LD_INT 2
60635: MUL
60636: ST_TO_ADDR
60637: GO 60665
// if amount > max then
60639: LD_VAR 0 9
60643: PUSH
60644: LD_VAR 0 4
60648: GREATER
60649: IFFALSE 60665
// r := r / 2 ;
60651: LD_ADDR_VAR 0 7
60655: PUSH
60656: LD_VAR 0 7
60660: PUSH
60661: LD_INT 2
60663: DIVREAL
60664: ST_TO_ADDR
// time := time / r ;
60665: LD_ADDR_VAR 0 8
60669: PUSH
60670: LD_VAR 0 8
60674: PUSH
60675: LD_VAR 0 7
60679: DIVREAL
60680: ST_TO_ADDR
// if time < 0 then
60681: LD_VAR 0 8
60685: PUSH
60686: LD_INT 0
60688: LESS
60689: IFFALSE 60706
// time := time * - 1 ;
60691: LD_ADDR_VAR 0 8
60695: PUSH
60696: LD_VAR 0 8
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: MUL
60705: ST_TO_ADDR
// wait ( time ) ;
60706: LD_VAR 0 8
60710: PPUSH
60711: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60715: LD_INT 35
60717: PPUSH
60718: LD_INT 875
60720: PPUSH
60721: CALL_OW 12
60725: PPUSH
60726: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60730: LD_INT 1
60732: PPUSH
60733: LD_INT 5
60735: PPUSH
60736: CALL_OW 12
60740: PPUSH
60741: LD_VAR 0 1
60745: PPUSH
60746: LD_INT 1
60748: PPUSH
60749: CALL_OW 55
// end ;
60753: GO 60563
// end ;
60755: LD_VAR 0 5
60759: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60760: LD_INT 0
60762: PPUSH
60763: PPUSH
60764: PPUSH
60765: PPUSH
60766: PPUSH
60767: PPUSH
60768: PPUSH
60769: PPUSH
// if not turrets or not factories then
60770: LD_VAR 0 1
60774: NOT
60775: PUSH
60776: LD_VAR 0 2
60780: NOT
60781: OR
60782: IFFALSE 60786
// exit ;
60784: GO 61093
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60786: LD_ADDR_VAR 0 10
60790: PUSH
60791: LD_INT 5
60793: PUSH
60794: LD_INT 6
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 2
60803: PUSH
60804: LD_INT 4
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 3
60813: PUSH
60814: LD_INT 5
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 24
60828: PUSH
60829: LD_INT 25
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 23
60838: PUSH
60839: LD_INT 27
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 42
60852: PUSH
60853: LD_INT 43
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 44
60862: PUSH
60863: LD_INT 46
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 45
60872: PUSH
60873: LD_INT 47
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: LIST
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: LIST
60889: ST_TO_ADDR
// result := [ ] ;
60890: LD_ADDR_VAR 0 3
60894: PUSH
60895: EMPTY
60896: ST_TO_ADDR
// for i in turrets do
60897: LD_ADDR_VAR 0 4
60901: PUSH
60902: LD_VAR 0 1
60906: PUSH
60907: FOR_IN
60908: IFFALSE 61091
// begin nat := GetNation ( i ) ;
60910: LD_ADDR_VAR 0 7
60914: PUSH
60915: LD_VAR 0 4
60919: PPUSH
60920: CALL_OW 248
60924: ST_TO_ADDR
// weapon := 0 ;
60925: LD_ADDR_VAR 0 8
60929: PUSH
60930: LD_INT 0
60932: ST_TO_ADDR
// if not nat then
60933: LD_VAR 0 7
60937: NOT
60938: IFFALSE 60942
// continue ;
60940: GO 60907
// for j in list [ nat ] do
60942: LD_ADDR_VAR 0 5
60946: PUSH
60947: LD_VAR 0 10
60951: PUSH
60952: LD_VAR 0 7
60956: ARRAY
60957: PUSH
60958: FOR_IN
60959: IFFALSE 61000
// if GetBWeapon ( i ) = j [ 1 ] then
60961: LD_VAR 0 4
60965: PPUSH
60966: CALL_OW 269
60970: PUSH
60971: LD_VAR 0 5
60975: PUSH
60976: LD_INT 1
60978: ARRAY
60979: EQUAL
60980: IFFALSE 60998
// begin weapon := j [ 2 ] ;
60982: LD_ADDR_VAR 0 8
60986: PUSH
60987: LD_VAR 0 5
60991: PUSH
60992: LD_INT 2
60994: ARRAY
60995: ST_TO_ADDR
// break ;
60996: GO 61000
// end ;
60998: GO 60958
61000: POP
61001: POP
// if not weapon then
61002: LD_VAR 0 8
61006: NOT
61007: IFFALSE 61011
// continue ;
61009: GO 60907
// for k in factories do
61011: LD_ADDR_VAR 0 6
61015: PUSH
61016: LD_VAR 0 2
61020: PUSH
61021: FOR_IN
61022: IFFALSE 61087
// begin weapons := AvailableWeaponList ( k ) ;
61024: LD_ADDR_VAR 0 9
61028: PUSH
61029: LD_VAR 0 6
61033: PPUSH
61034: CALL_OW 478
61038: ST_TO_ADDR
// if not weapons then
61039: LD_VAR 0 9
61043: NOT
61044: IFFALSE 61048
// continue ;
61046: GO 61021
// if weapon in weapons then
61048: LD_VAR 0 8
61052: PUSH
61053: LD_VAR 0 9
61057: IN
61058: IFFALSE 61085
// begin result := [ i , weapon ] ;
61060: LD_ADDR_VAR 0 3
61064: PUSH
61065: LD_VAR 0 4
61069: PUSH
61070: LD_VAR 0 8
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: ST_TO_ADDR
// exit ;
61079: POP
61080: POP
61081: POP
61082: POP
61083: GO 61093
// end ; end ;
61085: GO 61021
61087: POP
61088: POP
// end ;
61089: GO 60907
61091: POP
61092: POP
// end ;
61093: LD_VAR 0 3
61097: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61098: LD_INT 0
61100: PPUSH
// if not side or side > 8 then
61101: LD_VAR 0 3
61105: NOT
61106: PUSH
61107: LD_VAR 0 3
61111: PUSH
61112: LD_INT 8
61114: GREATER
61115: OR
61116: IFFALSE 61120
// exit ;
61118: GO 61179
// if not range then
61120: LD_VAR 0 4
61124: NOT
61125: IFFALSE 61136
// range := - 12 ;
61127: LD_ADDR_VAR 0 4
61131: PUSH
61132: LD_INT 12
61134: NEG
61135: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61136: LD_VAR 0 1
61140: PPUSH
61141: LD_VAR 0 2
61145: PPUSH
61146: LD_VAR 0 3
61150: PPUSH
61151: LD_VAR 0 4
61155: PPUSH
61156: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61160: LD_VAR 0 1
61164: PPUSH
61165: LD_VAR 0 2
61169: PPUSH
61170: LD_VAR 0 3
61174: PPUSH
61175: CALL_OW 331
// end ;
61179: LD_VAR 0 5
61183: RET
// export function Video ( mode ) ; begin
61184: LD_INT 0
61186: PPUSH
// ingame_video = mode ;
61187: LD_ADDR_OWVAR 52
61191: PUSH
61192: LD_VAR 0 1
61196: ST_TO_ADDR
// interface_hidden = mode ;
61197: LD_ADDR_OWVAR 54
61201: PUSH
61202: LD_VAR 0 1
61206: ST_TO_ADDR
// end ;
61207: LD_VAR 0 2
61211: RET
// export function Join ( array , element ) ; begin
61212: LD_INT 0
61214: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61215: LD_ADDR_VAR 0 3
61219: PUSH
61220: LD_VAR 0 1
61224: PPUSH
61225: LD_VAR 0 1
61229: PUSH
61230: LD_INT 1
61232: PLUS
61233: PPUSH
61234: LD_VAR 0 2
61238: PPUSH
61239: CALL_OW 1
61243: ST_TO_ADDR
// end ;
61244: LD_VAR 0 3
61248: RET
// export function JoinUnion ( array , element ) ; begin
61249: LD_INT 0
61251: PPUSH
// result := array union element ;
61252: LD_ADDR_VAR 0 3
61256: PUSH
61257: LD_VAR 0 1
61261: PUSH
61262: LD_VAR 0 2
61266: UNION
61267: ST_TO_ADDR
// end ;
61268: LD_VAR 0 3
61272: RET
// export function GetBehemoths ( side ) ; begin
61273: LD_INT 0
61275: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61276: LD_ADDR_VAR 0 2
61280: PUSH
61281: LD_INT 22
61283: PUSH
61284: LD_VAR 0 1
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 31
61295: PUSH
61296: LD_INT 25
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PPUSH
61307: CALL_OW 69
61311: ST_TO_ADDR
// end ;
61312: LD_VAR 0 2
61316: RET
// export function Shuffle ( array ) ; var i , index ; begin
61317: LD_INT 0
61319: PPUSH
61320: PPUSH
61321: PPUSH
// result := [ ] ;
61322: LD_ADDR_VAR 0 2
61326: PUSH
61327: EMPTY
61328: ST_TO_ADDR
// if not array then
61329: LD_VAR 0 1
61333: NOT
61334: IFFALSE 61338
// exit ;
61336: GO 61437
// Randomize ;
61338: CALL_OW 10
// for i = array downto 1 do
61342: LD_ADDR_VAR 0 3
61346: PUSH
61347: DOUBLE
61348: LD_VAR 0 1
61352: INC
61353: ST_TO_ADDR
61354: LD_INT 1
61356: PUSH
61357: FOR_DOWNTO
61358: IFFALSE 61435
// begin index := rand ( 1 , array ) ;
61360: LD_ADDR_VAR 0 4
61364: PUSH
61365: LD_INT 1
61367: PPUSH
61368: LD_VAR 0 1
61372: PPUSH
61373: CALL_OW 12
61377: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61378: LD_ADDR_VAR 0 2
61382: PUSH
61383: LD_VAR 0 2
61387: PPUSH
61388: LD_VAR 0 2
61392: PUSH
61393: LD_INT 1
61395: PLUS
61396: PPUSH
61397: LD_VAR 0 1
61401: PUSH
61402: LD_VAR 0 4
61406: ARRAY
61407: PPUSH
61408: CALL_OW 2
61412: ST_TO_ADDR
// array := Delete ( array , index ) ;
61413: LD_ADDR_VAR 0 1
61417: PUSH
61418: LD_VAR 0 1
61422: PPUSH
61423: LD_VAR 0 4
61427: PPUSH
61428: CALL_OW 3
61432: ST_TO_ADDR
// end ;
61433: GO 61357
61435: POP
61436: POP
// end ;
61437: LD_VAR 0 2
61441: RET
// export function GetBaseMaterials ( base ) ; begin
61442: LD_INT 0
61444: PPUSH
// result := [ 0 , 0 , 0 ] ;
61445: LD_ADDR_VAR 0 2
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: LIST
61463: ST_TO_ADDR
// if not base then
61464: LD_VAR 0 1
61468: NOT
61469: IFFALSE 61473
// exit ;
61471: GO 61522
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61473: LD_ADDR_VAR 0 2
61477: PUSH
61478: LD_VAR 0 1
61482: PPUSH
61483: LD_INT 1
61485: PPUSH
61486: CALL_OW 275
61490: PUSH
61491: LD_VAR 0 1
61495: PPUSH
61496: LD_INT 2
61498: PPUSH
61499: CALL_OW 275
61503: PUSH
61504: LD_VAR 0 1
61508: PPUSH
61509: LD_INT 3
61511: PPUSH
61512: CALL_OW 275
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: LIST
61521: ST_TO_ADDR
// end ;
61522: LD_VAR 0 2
61526: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61527: LD_INT 0
61529: PPUSH
61530: PPUSH
// result := array ;
61531: LD_ADDR_VAR 0 3
61535: PUSH
61536: LD_VAR 0 1
61540: ST_TO_ADDR
// if size > 0 then
61541: LD_VAR 0 2
61545: PUSH
61546: LD_INT 0
61548: GREATER
61549: IFFALSE 61595
// for i := array downto size do
61551: LD_ADDR_VAR 0 4
61555: PUSH
61556: DOUBLE
61557: LD_VAR 0 1
61561: INC
61562: ST_TO_ADDR
61563: LD_VAR 0 2
61567: PUSH
61568: FOR_DOWNTO
61569: IFFALSE 61593
// result := Delete ( result , result ) ;
61571: LD_ADDR_VAR 0 3
61575: PUSH
61576: LD_VAR 0 3
61580: PPUSH
61581: LD_VAR 0 3
61585: PPUSH
61586: CALL_OW 3
61590: ST_TO_ADDR
61591: GO 61568
61593: POP
61594: POP
// end ;
61595: LD_VAR 0 3
61599: RET
// export function ComExit ( unit ) ; var tmp ; begin
61600: LD_INT 0
61602: PPUSH
61603: PPUSH
// if not IsInUnit ( unit ) then
61604: LD_VAR 0 1
61608: PPUSH
61609: CALL_OW 310
61613: NOT
61614: IFFALSE 61618
// exit ;
61616: GO 61678
// tmp := IsInUnit ( unit ) ;
61618: LD_ADDR_VAR 0 3
61622: PUSH
61623: LD_VAR 0 1
61627: PPUSH
61628: CALL_OW 310
61632: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61633: LD_VAR 0 3
61637: PPUSH
61638: CALL_OW 247
61642: PUSH
61643: LD_INT 2
61645: EQUAL
61646: IFFALSE 61659
// ComExitVehicle ( unit ) else
61648: LD_VAR 0 1
61652: PPUSH
61653: CALL_OW 121
61657: GO 61668
// ComExitBuilding ( unit ) ;
61659: LD_VAR 0 1
61663: PPUSH
61664: CALL_OW 122
// result := tmp ;
61668: LD_ADDR_VAR 0 2
61672: PUSH
61673: LD_VAR 0 3
61677: ST_TO_ADDR
// end ;
61678: LD_VAR 0 2
61682: RET
// export function ComExitAll ( units ) ; var i ; begin
61683: LD_INT 0
61685: PPUSH
61686: PPUSH
// if not units then
61687: LD_VAR 0 1
61691: NOT
61692: IFFALSE 61696
// exit ;
61694: GO 61722
// for i in units do
61696: LD_ADDR_VAR 0 3
61700: PUSH
61701: LD_VAR 0 1
61705: PUSH
61706: FOR_IN
61707: IFFALSE 61720
// ComExit ( i ) ;
61709: LD_VAR 0 3
61713: PPUSH
61714: CALL 61600 0 1
61718: GO 61706
61720: POP
61721: POP
// end ;
61722: LD_VAR 0 2
61726: RET
// export function ResetHc ; begin
61727: LD_INT 0
61729: PPUSH
// InitHc ;
61730: CALL_OW 19
// hc_importance := 0 ;
61734: LD_ADDR_OWVAR 32
61738: PUSH
61739: LD_INT 0
61741: ST_TO_ADDR
// end ;
61742: LD_VAR 0 1
61746: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61747: LD_INT 0
61749: PPUSH
61750: PPUSH
61751: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61752: LD_ADDR_VAR 0 6
61756: PUSH
61757: LD_VAR 0 1
61761: PUSH
61762: LD_VAR 0 3
61766: PLUS
61767: PUSH
61768: LD_INT 2
61770: DIV
61771: ST_TO_ADDR
// if _x < 0 then
61772: LD_VAR 0 6
61776: PUSH
61777: LD_INT 0
61779: LESS
61780: IFFALSE 61797
// _x := _x * - 1 ;
61782: LD_ADDR_VAR 0 6
61786: PUSH
61787: LD_VAR 0 6
61791: PUSH
61792: LD_INT 1
61794: NEG
61795: MUL
61796: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61797: LD_ADDR_VAR 0 7
61801: PUSH
61802: LD_VAR 0 2
61806: PUSH
61807: LD_VAR 0 4
61811: PLUS
61812: PUSH
61813: LD_INT 2
61815: DIV
61816: ST_TO_ADDR
// if _y < 0 then
61817: LD_VAR 0 7
61821: PUSH
61822: LD_INT 0
61824: LESS
61825: IFFALSE 61842
// _y := _y * - 1 ;
61827: LD_ADDR_VAR 0 7
61831: PUSH
61832: LD_VAR 0 7
61836: PUSH
61837: LD_INT 1
61839: NEG
61840: MUL
61841: ST_TO_ADDR
// result := [ _x , _y ] ;
61842: LD_ADDR_VAR 0 5
61846: PUSH
61847: LD_VAR 0 6
61851: PUSH
61852: LD_VAR 0 7
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: ST_TO_ADDR
// end ;
61861: LD_VAR 0 5
61865: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61866: LD_INT 0
61868: PPUSH
61869: PPUSH
61870: PPUSH
61871: PPUSH
// task := GetTaskList ( unit ) ;
61872: LD_ADDR_VAR 0 7
61876: PUSH
61877: LD_VAR 0 1
61881: PPUSH
61882: CALL_OW 437
61886: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61887: LD_VAR 0 7
61891: NOT
61892: PUSH
61893: LD_VAR 0 1
61897: PPUSH
61898: LD_VAR 0 2
61902: PPUSH
61903: CALL_OW 308
61907: NOT
61908: AND
61909: IFFALSE 61913
// exit ;
61911: GO 62031
// if IsInArea ( unit , area ) then
61913: LD_VAR 0 1
61917: PPUSH
61918: LD_VAR 0 2
61922: PPUSH
61923: CALL_OW 308
61927: IFFALSE 61945
// begin ComMoveToArea ( unit , goAway ) ;
61929: LD_VAR 0 1
61933: PPUSH
61934: LD_VAR 0 3
61938: PPUSH
61939: CALL_OW 113
// exit ;
61943: GO 62031
// end ; if task [ 1 ] [ 1 ] <> M then
61945: LD_VAR 0 7
61949: PUSH
61950: LD_INT 1
61952: ARRAY
61953: PUSH
61954: LD_INT 1
61956: ARRAY
61957: PUSH
61958: LD_STRING M
61960: NONEQUAL
61961: IFFALSE 61965
// exit ;
61963: GO 62031
// x := task [ 1 ] [ 2 ] ;
61965: LD_ADDR_VAR 0 5
61969: PUSH
61970: LD_VAR 0 7
61974: PUSH
61975: LD_INT 1
61977: ARRAY
61978: PUSH
61979: LD_INT 2
61981: ARRAY
61982: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61983: LD_ADDR_VAR 0 6
61987: PUSH
61988: LD_VAR 0 7
61992: PUSH
61993: LD_INT 1
61995: ARRAY
61996: PUSH
61997: LD_INT 3
61999: ARRAY
62000: ST_TO_ADDR
// if InArea ( x , y , area ) then
62001: LD_VAR 0 5
62005: PPUSH
62006: LD_VAR 0 6
62010: PPUSH
62011: LD_VAR 0 2
62015: PPUSH
62016: CALL_OW 309
62020: IFFALSE 62031
// ComStop ( unit ) ;
62022: LD_VAR 0 1
62026: PPUSH
62027: CALL_OW 141
// end ;
62031: LD_VAR 0 4
62035: RET
// export function Abs ( value ) ; begin
62036: LD_INT 0
62038: PPUSH
// result := value ;
62039: LD_ADDR_VAR 0 2
62043: PUSH
62044: LD_VAR 0 1
62048: ST_TO_ADDR
// if value < 0 then
62049: LD_VAR 0 1
62053: PUSH
62054: LD_INT 0
62056: LESS
62057: IFFALSE 62074
// result := value * - 1 ;
62059: LD_ADDR_VAR 0 2
62063: PUSH
62064: LD_VAR 0 1
62068: PUSH
62069: LD_INT 1
62071: NEG
62072: MUL
62073: ST_TO_ADDR
// end ;
62074: LD_VAR 0 2
62078: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62079: LD_INT 0
62081: PPUSH
62082: PPUSH
62083: PPUSH
62084: PPUSH
62085: PPUSH
62086: PPUSH
62087: PPUSH
62088: PPUSH
// if not unit or not building then
62089: LD_VAR 0 1
62093: NOT
62094: PUSH
62095: LD_VAR 0 2
62099: NOT
62100: OR
62101: IFFALSE 62105
// exit ;
62103: GO 62331
// x := GetX ( building ) ;
62105: LD_ADDR_VAR 0 4
62109: PUSH
62110: LD_VAR 0 2
62114: PPUSH
62115: CALL_OW 250
62119: ST_TO_ADDR
// y := GetY ( building ) ;
62120: LD_ADDR_VAR 0 6
62124: PUSH
62125: LD_VAR 0 2
62129: PPUSH
62130: CALL_OW 251
62134: ST_TO_ADDR
// d := GetDir ( building ) ;
62135: LD_ADDR_VAR 0 8
62139: PUSH
62140: LD_VAR 0 2
62144: PPUSH
62145: CALL_OW 254
62149: ST_TO_ADDR
// r := 4 ;
62150: LD_ADDR_VAR 0 9
62154: PUSH
62155: LD_INT 4
62157: ST_TO_ADDR
// for i := 1 to 5 do
62158: LD_ADDR_VAR 0 10
62162: PUSH
62163: DOUBLE
62164: LD_INT 1
62166: DEC
62167: ST_TO_ADDR
62168: LD_INT 5
62170: PUSH
62171: FOR_TO
62172: IFFALSE 62329
// begin _x := ShiftX ( x , d , r + i ) ;
62174: LD_ADDR_VAR 0 5
62178: PUSH
62179: LD_VAR 0 4
62183: PPUSH
62184: LD_VAR 0 8
62188: PPUSH
62189: LD_VAR 0 9
62193: PUSH
62194: LD_VAR 0 10
62198: PLUS
62199: PPUSH
62200: CALL_OW 272
62204: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62205: LD_ADDR_VAR 0 7
62209: PUSH
62210: LD_VAR 0 6
62214: PPUSH
62215: LD_VAR 0 8
62219: PPUSH
62220: LD_VAR 0 9
62224: PUSH
62225: LD_VAR 0 10
62229: PLUS
62230: PPUSH
62231: CALL_OW 273
62235: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62236: LD_VAR 0 5
62240: PPUSH
62241: LD_VAR 0 7
62245: PPUSH
62246: CALL_OW 488
62250: PUSH
62251: LD_VAR 0 5
62255: PPUSH
62256: LD_VAR 0 7
62260: PPUSH
62261: CALL_OW 428
62265: PPUSH
62266: CALL_OW 247
62270: PUSH
62271: LD_INT 3
62273: PUSH
62274: LD_INT 2
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: IN
62281: NOT
62282: AND
62283: IFFALSE 62327
// begin ComMoveXY ( unit , _x , _y ) ;
62285: LD_VAR 0 1
62289: PPUSH
62290: LD_VAR 0 5
62294: PPUSH
62295: LD_VAR 0 7
62299: PPUSH
62300: CALL_OW 111
// result := [ _x , _y ] ;
62304: LD_ADDR_VAR 0 3
62308: PUSH
62309: LD_VAR 0 5
62313: PUSH
62314: LD_VAR 0 7
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: ST_TO_ADDR
// exit ;
62323: POP
62324: POP
62325: GO 62331
// end ; end ;
62327: GO 62171
62329: POP
62330: POP
// end ;
62331: LD_VAR 0 3
62335: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62336: LD_INT 0
62338: PPUSH
62339: PPUSH
62340: PPUSH
// result := 0 ;
62341: LD_ADDR_VAR 0 3
62345: PUSH
62346: LD_INT 0
62348: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62349: LD_VAR 0 1
62353: PUSH
62354: LD_INT 0
62356: LESS
62357: PUSH
62358: LD_VAR 0 1
62362: PUSH
62363: LD_INT 8
62365: GREATER
62366: OR
62367: PUSH
62368: LD_VAR 0 2
62372: PUSH
62373: LD_INT 0
62375: LESS
62376: OR
62377: PUSH
62378: LD_VAR 0 2
62382: PUSH
62383: LD_INT 8
62385: GREATER
62386: OR
62387: IFFALSE 62391
// exit ;
62389: GO 62466
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62391: LD_ADDR_VAR 0 4
62395: PUSH
62396: LD_INT 22
62398: PUSH
62399: LD_VAR 0 2
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PPUSH
62408: CALL_OW 69
62412: PUSH
62413: FOR_IN
62414: IFFALSE 62464
// begin un := UnitShoot ( i ) ;
62416: LD_ADDR_VAR 0 5
62420: PUSH
62421: LD_VAR 0 4
62425: PPUSH
62426: CALL_OW 504
62430: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62431: LD_VAR 0 5
62435: PPUSH
62436: CALL_OW 255
62440: PUSH
62441: LD_VAR 0 1
62445: EQUAL
62446: IFFALSE 62462
// begin result := un ;
62448: LD_ADDR_VAR 0 3
62452: PUSH
62453: LD_VAR 0 5
62457: ST_TO_ADDR
// exit ;
62458: POP
62459: POP
62460: GO 62466
// end ; end ;
62462: GO 62413
62464: POP
62465: POP
// end ;
62466: LD_VAR 0 3
62470: RET
// export function GetCargoBay ( units ) ; begin
62471: LD_INT 0
62473: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62474: LD_ADDR_VAR 0 2
62478: PUSH
62479: LD_VAR 0 1
62483: PPUSH
62484: LD_INT 2
62486: PUSH
62487: LD_INT 34
62489: PUSH
62490: LD_INT 12
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 34
62499: PUSH
62500: LD_INT 51
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 34
62509: PUSH
62510: LD_INT 32
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 34
62519: PUSH
62520: LD_EXP 59
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: PPUSH
62536: CALL_OW 72
62540: ST_TO_ADDR
// end ;
62541: LD_VAR 0 2
62545: RET
// export function Negate ( value ) ; begin
62546: LD_INT 0
62548: PPUSH
// result := not value ;
62549: LD_ADDR_VAR 0 2
62553: PUSH
62554: LD_VAR 0 1
62558: NOT
62559: ST_TO_ADDR
// end ;
62560: LD_VAR 0 2
62564: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
62565: LD_INT 0
62567: PPUSH
// if x1 = x2 then
62568: LD_VAR 0 1
62572: PUSH
62573: LD_VAR 0 3
62577: EQUAL
62578: IFFALSE 62612
// begin if y1 > y2 then
62580: LD_VAR 0 2
62584: PUSH
62585: LD_VAR 0 4
62589: GREATER
62590: IFFALSE 62602
// result := 0 else
62592: LD_ADDR_VAR 0 5
62596: PUSH
62597: LD_INT 0
62599: ST_TO_ADDR
62600: GO 62610
// result := 3 ;
62602: LD_ADDR_VAR 0 5
62606: PUSH
62607: LD_INT 3
62609: ST_TO_ADDR
// exit ;
62610: GO 62698
// end ; if y1 = y2 then
62612: LD_VAR 0 2
62616: PUSH
62617: LD_VAR 0 4
62621: EQUAL
62622: IFFALSE 62656
// begin if x1 > x2 then
62624: LD_VAR 0 1
62628: PUSH
62629: LD_VAR 0 3
62633: GREATER
62634: IFFALSE 62646
// result := 1 else
62636: LD_ADDR_VAR 0 5
62640: PUSH
62641: LD_INT 1
62643: ST_TO_ADDR
62644: GO 62654
// result := 4 ;
62646: LD_ADDR_VAR 0 5
62650: PUSH
62651: LD_INT 4
62653: ST_TO_ADDR
// exit ;
62654: GO 62698
// end ; if x1 > x2 and y1 > y2 then
62656: LD_VAR 0 1
62660: PUSH
62661: LD_VAR 0 3
62665: GREATER
62666: PUSH
62667: LD_VAR 0 2
62671: PUSH
62672: LD_VAR 0 4
62676: GREATER
62677: AND
62678: IFFALSE 62690
// result := 2 else
62680: LD_ADDR_VAR 0 5
62684: PUSH
62685: LD_INT 2
62687: ST_TO_ADDR
62688: GO 62698
// result := 5 ;
62690: LD_ADDR_VAR 0 5
62694: PUSH
62695: LD_INT 5
62697: ST_TO_ADDR
// end ;
62698: LD_VAR 0 5
62702: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62703: LD_INT 0
62705: PPUSH
62706: PPUSH
// if not driver or not IsInUnit ( driver ) then
62707: LD_VAR 0 1
62711: NOT
62712: PUSH
62713: LD_VAR 0 1
62717: PPUSH
62718: CALL_OW 310
62722: NOT
62723: OR
62724: IFFALSE 62728
// exit ;
62726: GO 62818
// vehicle := IsInUnit ( driver ) ;
62728: LD_ADDR_VAR 0 3
62732: PUSH
62733: LD_VAR 0 1
62737: PPUSH
62738: CALL_OW 310
62742: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62743: LD_VAR 0 1
62747: PPUSH
62748: LD_STRING \
62750: PUSH
62751: LD_INT 0
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: LD_INT 0
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: PUSH
62778: LD_STRING E
62780: PUSH
62781: LD_INT 0
62783: PUSH
62784: LD_INT 0
62786: PUSH
62787: LD_VAR 0 3
62791: PUSH
62792: LD_INT 0
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PPUSH
62814: CALL_OW 446
// end ;
62818: LD_VAR 0 2
62822: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62823: LD_INT 0
62825: PPUSH
62826: PPUSH
// if not driver or not IsInUnit ( driver ) then
62827: LD_VAR 0 1
62831: NOT
62832: PUSH
62833: LD_VAR 0 1
62837: PPUSH
62838: CALL_OW 310
62842: NOT
62843: OR
62844: IFFALSE 62848
// exit ;
62846: GO 62938
// vehicle := IsInUnit ( driver ) ;
62848: LD_ADDR_VAR 0 3
62852: PUSH
62853: LD_VAR 0 1
62857: PPUSH
62858: CALL_OW 310
62862: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62863: LD_VAR 0 1
62867: PPUSH
62868: LD_STRING \
62870: PUSH
62871: LD_INT 0
62873: PUSH
62874: LD_INT 0
62876: PUSH
62877: LD_INT 0
62879: PUSH
62880: LD_INT 0
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: LD_INT 0
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: PUSH
62898: LD_STRING E
62900: PUSH
62901: LD_INT 0
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: LD_VAR 0 3
62911: PUSH
62912: LD_INT 0
62914: PUSH
62915: LD_INT 0
62917: PUSH
62918: LD_INT 0
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PPUSH
62934: CALL_OW 447
// end ;
62938: LD_VAR 0 2
62942: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62943: LD_INT 0
62945: PPUSH
62946: PPUSH
62947: PPUSH
// tmp := [ ] ;
62948: LD_ADDR_VAR 0 5
62952: PUSH
62953: EMPTY
62954: ST_TO_ADDR
// for i in units do
62955: LD_ADDR_VAR 0 4
62959: PUSH
62960: LD_VAR 0 1
62964: PUSH
62965: FOR_IN
62966: IFFALSE 63004
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62968: LD_ADDR_VAR 0 5
62972: PUSH
62973: LD_VAR 0 5
62977: PPUSH
62978: LD_VAR 0 5
62982: PUSH
62983: LD_INT 1
62985: PLUS
62986: PPUSH
62987: LD_VAR 0 4
62991: PPUSH
62992: CALL_OW 256
62996: PPUSH
62997: CALL_OW 2
63001: ST_TO_ADDR
63002: GO 62965
63004: POP
63005: POP
// if not tmp then
63006: LD_VAR 0 5
63010: NOT
63011: IFFALSE 63015
// exit ;
63013: GO 63063
// if asc then
63015: LD_VAR 0 2
63019: IFFALSE 63043
// result := SortListByListAsc ( units , tmp ) else
63021: LD_ADDR_VAR 0 3
63025: PUSH
63026: LD_VAR 0 1
63030: PPUSH
63031: LD_VAR 0 5
63035: PPUSH
63036: CALL_OW 76
63040: ST_TO_ADDR
63041: GO 63063
// result := SortListByListDesc ( units , tmp ) ;
63043: LD_ADDR_VAR 0 3
63047: PUSH
63048: LD_VAR 0 1
63052: PPUSH
63053: LD_VAR 0 5
63057: PPUSH
63058: CALL_OW 77
63062: ST_TO_ADDR
// end ;
63063: LD_VAR 0 3
63067: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63068: LD_INT 0
63070: PPUSH
63071: PPUSH
// task := GetTaskList ( mech ) ;
63072: LD_ADDR_VAR 0 4
63076: PUSH
63077: LD_VAR 0 1
63081: PPUSH
63082: CALL_OW 437
63086: ST_TO_ADDR
// if not task then
63087: LD_VAR 0 4
63091: NOT
63092: IFFALSE 63096
// exit ;
63094: GO 63138
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63096: LD_ADDR_VAR 0 3
63100: PUSH
63101: LD_VAR 0 4
63105: PUSH
63106: LD_INT 1
63108: ARRAY
63109: PUSH
63110: LD_INT 1
63112: ARRAY
63113: PUSH
63114: LD_STRING r
63116: EQUAL
63117: PUSH
63118: LD_VAR 0 4
63122: PUSH
63123: LD_INT 1
63125: ARRAY
63126: PUSH
63127: LD_INT 4
63129: ARRAY
63130: PUSH
63131: LD_VAR 0 2
63135: EQUAL
63136: AND
63137: ST_TO_ADDR
// end ;
63138: LD_VAR 0 3
63142: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63143: LD_INT 0
63145: PPUSH
// SetDir ( unit , d ) ;
63146: LD_VAR 0 1
63150: PPUSH
63151: LD_VAR 0 4
63155: PPUSH
63156: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63160: LD_VAR 0 1
63164: PPUSH
63165: LD_VAR 0 2
63169: PPUSH
63170: LD_VAR 0 3
63174: PPUSH
63175: LD_VAR 0 5
63179: PPUSH
63180: CALL_OW 48
// end ;
63184: LD_VAR 0 6
63188: RET
// export function ToNaturalNumber ( number ) ; begin
63189: LD_INT 0
63191: PPUSH
// result := number div 1 ;
63192: LD_ADDR_VAR 0 2
63196: PUSH
63197: LD_VAR 0 1
63201: PUSH
63202: LD_INT 1
63204: DIV
63205: ST_TO_ADDR
// if number < 0 then
63206: LD_VAR 0 1
63210: PUSH
63211: LD_INT 0
63213: LESS
63214: IFFALSE 63224
// result := 0 ;
63216: LD_ADDR_VAR 0 2
63220: PUSH
63221: LD_INT 0
63223: ST_TO_ADDR
// end ; end_of_file
63224: LD_VAR 0 2
63228: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
63229: LD_INT 0
63231: PPUSH
// ar_miner := 81 ;
63232: LD_ADDR_EXP 65
63236: PUSH
63237: LD_INT 81
63239: ST_TO_ADDR
// ar_crane := 88 ;
63240: LD_ADDR_EXP 64
63244: PUSH
63245: LD_INT 88
63247: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
63248: LD_ADDR_EXP 59
63252: PUSH
63253: LD_INT 89
63255: ST_TO_ADDR
// us_hack := 99 ;
63256: LD_ADDR_EXP 60
63260: PUSH
63261: LD_INT 99
63263: ST_TO_ADDR
// us_artillery := 97 ;
63264: LD_ADDR_EXP 61
63268: PUSH
63269: LD_INT 97
63271: ST_TO_ADDR
// ar_bio_bomb := 91 ;
63272: LD_ADDR_EXP 62
63276: PUSH
63277: LD_INT 91
63279: ST_TO_ADDR
// ar_mortar := 92 ;
63280: LD_ADDR_EXP 63
63284: PUSH
63285: LD_INT 92
63287: ST_TO_ADDR
// ru_radar := 98 ;
63288: LD_ADDR_EXP 58
63292: PUSH
63293: LD_INT 98
63295: ST_TO_ADDR
// tech_Artillery := 80 ;
63296: LD_ADDR_EXP 66
63300: PUSH
63301: LD_INT 80
63303: ST_TO_ADDR
// tech_RadMat := 81 ;
63304: LD_ADDR_EXP 67
63308: PUSH
63309: LD_INT 81
63311: ST_TO_ADDR
// tech_BasicTools := 82 ;
63312: LD_ADDR_EXP 68
63316: PUSH
63317: LD_INT 82
63319: ST_TO_ADDR
// tech_Cargo := 83 ;
63320: LD_ADDR_EXP 69
63324: PUSH
63325: LD_INT 83
63327: ST_TO_ADDR
// tech_Track := 84 ;
63328: LD_ADDR_EXP 70
63332: PUSH
63333: LD_INT 84
63335: ST_TO_ADDR
// tech_Crane := 85 ;
63336: LD_ADDR_EXP 71
63340: PUSH
63341: LD_INT 85
63343: ST_TO_ADDR
// tech_Bulldozer := 86 ;
63344: LD_ADDR_EXP 72
63348: PUSH
63349: LD_INT 86
63351: ST_TO_ADDR
// tech_Hovercraft := 87 ;
63352: LD_ADDR_EXP 73
63356: PUSH
63357: LD_INT 87
63359: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
63360: LD_ADDR_EXP 74
63364: PUSH
63365: LD_INT 88
63367: ST_TO_ADDR
// class_mastodont := 31 ;
63368: LD_ADDR_EXP 75
63372: PUSH
63373: LD_INT 31
63375: ST_TO_ADDR
// class_horse := 21 ;
63376: LD_ADDR_EXP 76
63380: PUSH
63381: LD_INT 21
63383: ST_TO_ADDR
// end ;
63384: LD_VAR 0 1
63388: RET
// every 1 do
63389: GO 63391
63391: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
63392: CALL 63229 0 0
63396: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63397: LD_INT 0
63399: PPUSH
// if p2 = 100 then
63400: LD_VAR 0 2
63404: PUSH
63405: LD_INT 100
63407: EQUAL
63408: IFFALSE 64357
// begin if not StreamModeActive then
63410: LD_EXP 77
63414: NOT
63415: IFFALSE 63425
// StreamModeActive := true ;
63417: LD_ADDR_EXP 77
63421: PUSH
63422: LD_INT 1
63424: ST_TO_ADDR
// if p3 = 0 then
63425: LD_VAR 0 3
63429: PUSH
63430: LD_INT 0
63432: EQUAL
63433: IFFALSE 63439
// InitStreamMode ;
63435: CALL 64517 0 0
// if p3 = 1 then
63439: LD_VAR 0 3
63443: PUSH
63444: LD_INT 1
63446: EQUAL
63447: IFFALSE 63457
// sRocket := true ;
63449: LD_ADDR_EXP 82
63453: PUSH
63454: LD_INT 1
63456: ST_TO_ADDR
// if p3 = 2 then
63457: LD_VAR 0 3
63461: PUSH
63462: LD_INT 2
63464: EQUAL
63465: IFFALSE 63475
// sSpeed := true ;
63467: LD_ADDR_EXP 81
63471: PUSH
63472: LD_INT 1
63474: ST_TO_ADDR
// if p3 = 3 then
63475: LD_VAR 0 3
63479: PUSH
63480: LD_INT 3
63482: EQUAL
63483: IFFALSE 63493
// sEngine := true ;
63485: LD_ADDR_EXP 83
63489: PUSH
63490: LD_INT 1
63492: ST_TO_ADDR
// if p3 = 4 then
63493: LD_VAR 0 3
63497: PUSH
63498: LD_INT 4
63500: EQUAL
63501: IFFALSE 63511
// sSpec := true ;
63503: LD_ADDR_EXP 80
63507: PUSH
63508: LD_INT 1
63510: ST_TO_ADDR
// if p3 = 5 then
63511: LD_VAR 0 3
63515: PUSH
63516: LD_INT 5
63518: EQUAL
63519: IFFALSE 63529
// sLevel := true ;
63521: LD_ADDR_EXP 84
63525: PUSH
63526: LD_INT 1
63528: ST_TO_ADDR
// if p3 = 6 then
63529: LD_VAR 0 3
63533: PUSH
63534: LD_INT 6
63536: EQUAL
63537: IFFALSE 63547
// sArmoury := true ;
63539: LD_ADDR_EXP 85
63543: PUSH
63544: LD_INT 1
63546: ST_TO_ADDR
// if p3 = 7 then
63547: LD_VAR 0 3
63551: PUSH
63552: LD_INT 7
63554: EQUAL
63555: IFFALSE 63565
// sRadar := true ;
63557: LD_ADDR_EXP 86
63561: PUSH
63562: LD_INT 1
63564: ST_TO_ADDR
// if p3 = 8 then
63565: LD_VAR 0 3
63569: PUSH
63570: LD_INT 8
63572: EQUAL
63573: IFFALSE 63583
// sBunker := true ;
63575: LD_ADDR_EXP 87
63579: PUSH
63580: LD_INT 1
63582: ST_TO_ADDR
// if p3 = 9 then
63583: LD_VAR 0 3
63587: PUSH
63588: LD_INT 9
63590: EQUAL
63591: IFFALSE 63601
// sHack := true ;
63593: LD_ADDR_EXP 88
63597: PUSH
63598: LD_INT 1
63600: ST_TO_ADDR
// if p3 = 10 then
63601: LD_VAR 0 3
63605: PUSH
63606: LD_INT 10
63608: EQUAL
63609: IFFALSE 63619
// sFire := true ;
63611: LD_ADDR_EXP 89
63615: PUSH
63616: LD_INT 1
63618: ST_TO_ADDR
// if p3 = 11 then
63619: LD_VAR 0 3
63623: PUSH
63624: LD_INT 11
63626: EQUAL
63627: IFFALSE 63637
// sRefresh := true ;
63629: LD_ADDR_EXP 90
63633: PUSH
63634: LD_INT 1
63636: ST_TO_ADDR
// if p3 = 12 then
63637: LD_VAR 0 3
63641: PUSH
63642: LD_INT 12
63644: EQUAL
63645: IFFALSE 63655
// sExp := true ;
63647: LD_ADDR_EXP 91
63651: PUSH
63652: LD_INT 1
63654: ST_TO_ADDR
// if p3 = 13 then
63655: LD_VAR 0 3
63659: PUSH
63660: LD_INT 13
63662: EQUAL
63663: IFFALSE 63673
// sDepot := true ;
63665: LD_ADDR_EXP 92
63669: PUSH
63670: LD_INT 1
63672: ST_TO_ADDR
// if p3 = 14 then
63673: LD_VAR 0 3
63677: PUSH
63678: LD_INT 14
63680: EQUAL
63681: IFFALSE 63691
// sFlag := true ;
63683: LD_ADDR_EXP 93
63687: PUSH
63688: LD_INT 1
63690: ST_TO_ADDR
// if p3 = 15 then
63691: LD_VAR 0 3
63695: PUSH
63696: LD_INT 15
63698: EQUAL
63699: IFFALSE 63709
// sKamikadze := true ;
63701: LD_ADDR_EXP 101
63705: PUSH
63706: LD_INT 1
63708: ST_TO_ADDR
// if p3 = 16 then
63709: LD_VAR 0 3
63713: PUSH
63714: LD_INT 16
63716: EQUAL
63717: IFFALSE 63727
// sTroll := true ;
63719: LD_ADDR_EXP 102
63723: PUSH
63724: LD_INT 1
63726: ST_TO_ADDR
// if p3 = 17 then
63727: LD_VAR 0 3
63731: PUSH
63732: LD_INT 17
63734: EQUAL
63735: IFFALSE 63745
// sSlow := true ;
63737: LD_ADDR_EXP 103
63741: PUSH
63742: LD_INT 1
63744: ST_TO_ADDR
// if p3 = 18 then
63745: LD_VAR 0 3
63749: PUSH
63750: LD_INT 18
63752: EQUAL
63753: IFFALSE 63763
// sLack := true ;
63755: LD_ADDR_EXP 104
63759: PUSH
63760: LD_INT 1
63762: ST_TO_ADDR
// if p3 = 19 then
63763: LD_VAR 0 3
63767: PUSH
63768: LD_INT 19
63770: EQUAL
63771: IFFALSE 63781
// sTank := true ;
63773: LD_ADDR_EXP 106
63777: PUSH
63778: LD_INT 1
63780: ST_TO_ADDR
// if p3 = 20 then
63781: LD_VAR 0 3
63785: PUSH
63786: LD_INT 20
63788: EQUAL
63789: IFFALSE 63799
// sRemote := true ;
63791: LD_ADDR_EXP 107
63795: PUSH
63796: LD_INT 1
63798: ST_TO_ADDR
// if p3 = 21 then
63799: LD_VAR 0 3
63803: PUSH
63804: LD_INT 21
63806: EQUAL
63807: IFFALSE 63817
// sPowell := true ;
63809: LD_ADDR_EXP 108
63813: PUSH
63814: LD_INT 1
63816: ST_TO_ADDR
// if p3 = 22 then
63817: LD_VAR 0 3
63821: PUSH
63822: LD_INT 22
63824: EQUAL
63825: IFFALSE 63835
// sTeleport := true ;
63827: LD_ADDR_EXP 111
63831: PUSH
63832: LD_INT 1
63834: ST_TO_ADDR
// if p3 = 23 then
63835: LD_VAR 0 3
63839: PUSH
63840: LD_INT 23
63842: EQUAL
63843: IFFALSE 63853
// sOilTower := true ;
63845: LD_ADDR_EXP 113
63849: PUSH
63850: LD_INT 1
63852: ST_TO_ADDR
// if p3 = 24 then
63853: LD_VAR 0 3
63857: PUSH
63858: LD_INT 24
63860: EQUAL
63861: IFFALSE 63871
// sShovel := true ;
63863: LD_ADDR_EXP 114
63867: PUSH
63868: LD_INT 1
63870: ST_TO_ADDR
// if p3 = 25 then
63871: LD_VAR 0 3
63875: PUSH
63876: LD_INT 25
63878: EQUAL
63879: IFFALSE 63889
// sSheik := true ;
63881: LD_ADDR_EXP 115
63885: PUSH
63886: LD_INT 1
63888: ST_TO_ADDR
// if p3 = 26 then
63889: LD_VAR 0 3
63893: PUSH
63894: LD_INT 26
63896: EQUAL
63897: IFFALSE 63907
// sEarthquake := true ;
63899: LD_ADDR_EXP 117
63903: PUSH
63904: LD_INT 1
63906: ST_TO_ADDR
// if p3 = 27 then
63907: LD_VAR 0 3
63911: PUSH
63912: LD_INT 27
63914: EQUAL
63915: IFFALSE 63925
// sAI := true ;
63917: LD_ADDR_EXP 118
63921: PUSH
63922: LD_INT 1
63924: ST_TO_ADDR
// if p3 = 28 then
63925: LD_VAR 0 3
63929: PUSH
63930: LD_INT 28
63932: EQUAL
63933: IFFALSE 63943
// sCargo := true ;
63935: LD_ADDR_EXP 121
63939: PUSH
63940: LD_INT 1
63942: ST_TO_ADDR
// if p3 = 29 then
63943: LD_VAR 0 3
63947: PUSH
63948: LD_INT 29
63950: EQUAL
63951: IFFALSE 63961
// sDLaser := true ;
63953: LD_ADDR_EXP 122
63957: PUSH
63958: LD_INT 1
63960: ST_TO_ADDR
// if p3 = 30 then
63961: LD_VAR 0 3
63965: PUSH
63966: LD_INT 30
63968: EQUAL
63969: IFFALSE 63979
// sExchange := true ;
63971: LD_ADDR_EXP 123
63975: PUSH
63976: LD_INT 1
63978: ST_TO_ADDR
// if p3 = 31 then
63979: LD_VAR 0 3
63983: PUSH
63984: LD_INT 31
63986: EQUAL
63987: IFFALSE 63997
// sFac := true ;
63989: LD_ADDR_EXP 124
63993: PUSH
63994: LD_INT 1
63996: ST_TO_ADDR
// if p3 = 32 then
63997: LD_VAR 0 3
64001: PUSH
64002: LD_INT 32
64004: EQUAL
64005: IFFALSE 64015
// sPower := true ;
64007: LD_ADDR_EXP 125
64011: PUSH
64012: LD_INT 1
64014: ST_TO_ADDR
// if p3 = 33 then
64015: LD_VAR 0 3
64019: PUSH
64020: LD_INT 33
64022: EQUAL
64023: IFFALSE 64033
// sRandom := true ;
64025: LD_ADDR_EXP 126
64029: PUSH
64030: LD_INT 1
64032: ST_TO_ADDR
// if p3 = 34 then
64033: LD_VAR 0 3
64037: PUSH
64038: LD_INT 34
64040: EQUAL
64041: IFFALSE 64051
// sShield := true ;
64043: LD_ADDR_EXP 127
64047: PUSH
64048: LD_INT 1
64050: ST_TO_ADDR
// if p3 = 35 then
64051: LD_VAR 0 3
64055: PUSH
64056: LD_INT 35
64058: EQUAL
64059: IFFALSE 64069
// sTime := true ;
64061: LD_ADDR_EXP 128
64065: PUSH
64066: LD_INT 1
64068: ST_TO_ADDR
// if p3 = 36 then
64069: LD_VAR 0 3
64073: PUSH
64074: LD_INT 36
64076: EQUAL
64077: IFFALSE 64087
// sTools := true ;
64079: LD_ADDR_EXP 129
64083: PUSH
64084: LD_INT 1
64086: ST_TO_ADDR
// if p3 = 101 then
64087: LD_VAR 0 3
64091: PUSH
64092: LD_INT 101
64094: EQUAL
64095: IFFALSE 64105
// sSold := true ;
64097: LD_ADDR_EXP 94
64101: PUSH
64102: LD_INT 1
64104: ST_TO_ADDR
// if p3 = 102 then
64105: LD_VAR 0 3
64109: PUSH
64110: LD_INT 102
64112: EQUAL
64113: IFFALSE 64123
// sDiff := true ;
64115: LD_ADDR_EXP 95
64119: PUSH
64120: LD_INT 1
64122: ST_TO_ADDR
// if p3 = 103 then
64123: LD_VAR 0 3
64127: PUSH
64128: LD_INT 103
64130: EQUAL
64131: IFFALSE 64141
// sFog := true ;
64133: LD_ADDR_EXP 98
64137: PUSH
64138: LD_INT 1
64140: ST_TO_ADDR
// if p3 = 104 then
64141: LD_VAR 0 3
64145: PUSH
64146: LD_INT 104
64148: EQUAL
64149: IFFALSE 64159
// sReset := true ;
64151: LD_ADDR_EXP 99
64155: PUSH
64156: LD_INT 1
64158: ST_TO_ADDR
// if p3 = 105 then
64159: LD_VAR 0 3
64163: PUSH
64164: LD_INT 105
64166: EQUAL
64167: IFFALSE 64177
// sSun := true ;
64169: LD_ADDR_EXP 100
64173: PUSH
64174: LD_INT 1
64176: ST_TO_ADDR
// if p3 = 106 then
64177: LD_VAR 0 3
64181: PUSH
64182: LD_INT 106
64184: EQUAL
64185: IFFALSE 64195
// sTiger := true ;
64187: LD_ADDR_EXP 96
64191: PUSH
64192: LD_INT 1
64194: ST_TO_ADDR
// if p3 = 107 then
64195: LD_VAR 0 3
64199: PUSH
64200: LD_INT 107
64202: EQUAL
64203: IFFALSE 64213
// sBomb := true ;
64205: LD_ADDR_EXP 97
64209: PUSH
64210: LD_INT 1
64212: ST_TO_ADDR
// if p3 = 108 then
64213: LD_VAR 0 3
64217: PUSH
64218: LD_INT 108
64220: EQUAL
64221: IFFALSE 64231
// sWound := true ;
64223: LD_ADDR_EXP 105
64227: PUSH
64228: LD_INT 1
64230: ST_TO_ADDR
// if p3 = 109 then
64231: LD_VAR 0 3
64235: PUSH
64236: LD_INT 109
64238: EQUAL
64239: IFFALSE 64249
// sBetray := true ;
64241: LD_ADDR_EXP 109
64245: PUSH
64246: LD_INT 1
64248: ST_TO_ADDR
// if p3 = 110 then
64249: LD_VAR 0 3
64253: PUSH
64254: LD_INT 110
64256: EQUAL
64257: IFFALSE 64267
// sContamin := true ;
64259: LD_ADDR_EXP 110
64263: PUSH
64264: LD_INT 1
64266: ST_TO_ADDR
// if p3 = 111 then
64267: LD_VAR 0 3
64271: PUSH
64272: LD_INT 111
64274: EQUAL
64275: IFFALSE 64285
// sOil := true ;
64277: LD_ADDR_EXP 112
64281: PUSH
64282: LD_INT 1
64284: ST_TO_ADDR
// if p3 = 112 then
64285: LD_VAR 0 3
64289: PUSH
64290: LD_INT 112
64292: EQUAL
64293: IFFALSE 64303
// sStu := true ;
64295: LD_ADDR_EXP 116
64299: PUSH
64300: LD_INT 1
64302: ST_TO_ADDR
// if p3 = 113 then
64303: LD_VAR 0 3
64307: PUSH
64308: LD_INT 113
64310: EQUAL
64311: IFFALSE 64321
// sBazooka := true ;
64313: LD_ADDR_EXP 119
64317: PUSH
64318: LD_INT 1
64320: ST_TO_ADDR
// if p3 = 114 then
64321: LD_VAR 0 3
64325: PUSH
64326: LD_INT 114
64328: EQUAL
64329: IFFALSE 64339
// sMortar := true ;
64331: LD_ADDR_EXP 120
64335: PUSH
64336: LD_INT 1
64338: ST_TO_ADDR
// if p3 = 115 then
64339: LD_VAR 0 3
64343: PUSH
64344: LD_INT 115
64346: EQUAL
64347: IFFALSE 64357
// sRanger := true ;
64349: LD_ADDR_EXP 130
64353: PUSH
64354: LD_INT 1
64356: ST_TO_ADDR
// end ; if p2 = 101 then
64357: LD_VAR 0 2
64361: PUSH
64362: LD_INT 101
64364: EQUAL
64365: IFFALSE 64493
// begin case p3 of 1 :
64367: LD_VAR 0 3
64371: PUSH
64372: LD_INT 1
64374: DOUBLE
64375: EQUAL
64376: IFTRUE 64380
64378: GO 64387
64380: POP
// hHackUnlimitedResources ; 2 :
64381: CALL 75530 0 0
64385: GO 64493
64387: LD_INT 2
64389: DOUBLE
64390: EQUAL
64391: IFTRUE 64395
64393: GO 64402
64395: POP
// hHackSetLevel10 ; 3 :
64396: CALL 75663 0 0
64400: GO 64493
64402: LD_INT 3
64404: DOUBLE
64405: EQUAL
64406: IFTRUE 64410
64408: GO 64417
64410: POP
// hHackSetLevel10YourUnits ; 4 :
64411: CALL 75748 0 0
64415: GO 64493
64417: LD_INT 4
64419: DOUBLE
64420: EQUAL
64421: IFTRUE 64425
64423: GO 64432
64425: POP
// hHackInvincible ; 5 :
64426: CALL 76196 0 0
64430: GO 64493
64432: LD_INT 5
64434: DOUBLE
64435: EQUAL
64436: IFTRUE 64440
64438: GO 64447
64440: POP
// hHackInvisible ; 6 :
64441: CALL 76307 0 0
64445: GO 64493
64447: LD_INT 6
64449: DOUBLE
64450: EQUAL
64451: IFTRUE 64455
64453: GO 64462
64455: POP
// hHackChangeYourSide ; 7 :
64456: CALL 76364 0 0
64460: GO 64493
64462: LD_INT 7
64464: DOUBLE
64465: EQUAL
64466: IFTRUE 64470
64468: GO 64477
64470: POP
// hHackChangeUnitSide ; 8 :
64471: CALL 76406 0 0
64475: GO 64493
64477: LD_INT 8
64479: DOUBLE
64480: EQUAL
64481: IFTRUE 64485
64483: GO 64492
64485: POP
// hHackFog ; end ;
64486: CALL 76507 0 0
64490: GO 64493
64492: POP
// end ; end ;
64493: LD_VAR 0 7
64497: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
64498: GO 64500
64500: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
64501: LD_STRING initStreamRollete();
64503: PPUSH
64504: CALL_OW 559
// InitStreamMode ;
64508: CALL 64517 0 0
// DefineStreamItems ( ) ;
64512: CALL 64957 0 0
// end ;
64516: END
// function InitStreamMode ; begin
64517: LD_INT 0
64519: PPUSH
// streamModeActive := false ;
64520: LD_ADDR_EXP 77
64524: PUSH
64525: LD_INT 0
64527: ST_TO_ADDR
// normalCounter := 36 ;
64528: LD_ADDR_EXP 78
64532: PUSH
64533: LD_INT 36
64535: ST_TO_ADDR
// hardcoreCounter := 16 ;
64536: LD_ADDR_EXP 79
64540: PUSH
64541: LD_INT 16
64543: ST_TO_ADDR
// sRocket := false ;
64544: LD_ADDR_EXP 82
64548: PUSH
64549: LD_INT 0
64551: ST_TO_ADDR
// sSpeed := false ;
64552: LD_ADDR_EXP 81
64556: PUSH
64557: LD_INT 0
64559: ST_TO_ADDR
// sEngine := false ;
64560: LD_ADDR_EXP 83
64564: PUSH
64565: LD_INT 0
64567: ST_TO_ADDR
// sSpec := false ;
64568: LD_ADDR_EXP 80
64572: PUSH
64573: LD_INT 0
64575: ST_TO_ADDR
// sLevel := false ;
64576: LD_ADDR_EXP 84
64580: PUSH
64581: LD_INT 0
64583: ST_TO_ADDR
// sArmoury := false ;
64584: LD_ADDR_EXP 85
64588: PUSH
64589: LD_INT 0
64591: ST_TO_ADDR
// sRadar := false ;
64592: LD_ADDR_EXP 86
64596: PUSH
64597: LD_INT 0
64599: ST_TO_ADDR
// sBunker := false ;
64600: LD_ADDR_EXP 87
64604: PUSH
64605: LD_INT 0
64607: ST_TO_ADDR
// sHack := false ;
64608: LD_ADDR_EXP 88
64612: PUSH
64613: LD_INT 0
64615: ST_TO_ADDR
// sFire := false ;
64616: LD_ADDR_EXP 89
64620: PUSH
64621: LD_INT 0
64623: ST_TO_ADDR
// sRefresh := false ;
64624: LD_ADDR_EXP 90
64628: PUSH
64629: LD_INT 0
64631: ST_TO_ADDR
// sExp := false ;
64632: LD_ADDR_EXP 91
64636: PUSH
64637: LD_INT 0
64639: ST_TO_ADDR
// sDepot := false ;
64640: LD_ADDR_EXP 92
64644: PUSH
64645: LD_INT 0
64647: ST_TO_ADDR
// sFlag := false ;
64648: LD_ADDR_EXP 93
64652: PUSH
64653: LD_INT 0
64655: ST_TO_ADDR
// sKamikadze := false ;
64656: LD_ADDR_EXP 101
64660: PUSH
64661: LD_INT 0
64663: ST_TO_ADDR
// sTroll := false ;
64664: LD_ADDR_EXP 102
64668: PUSH
64669: LD_INT 0
64671: ST_TO_ADDR
// sSlow := false ;
64672: LD_ADDR_EXP 103
64676: PUSH
64677: LD_INT 0
64679: ST_TO_ADDR
// sLack := false ;
64680: LD_ADDR_EXP 104
64684: PUSH
64685: LD_INT 0
64687: ST_TO_ADDR
// sTank := false ;
64688: LD_ADDR_EXP 106
64692: PUSH
64693: LD_INT 0
64695: ST_TO_ADDR
// sRemote := false ;
64696: LD_ADDR_EXP 107
64700: PUSH
64701: LD_INT 0
64703: ST_TO_ADDR
// sPowell := false ;
64704: LD_ADDR_EXP 108
64708: PUSH
64709: LD_INT 0
64711: ST_TO_ADDR
// sTeleport := false ;
64712: LD_ADDR_EXP 111
64716: PUSH
64717: LD_INT 0
64719: ST_TO_ADDR
// sOilTower := false ;
64720: LD_ADDR_EXP 113
64724: PUSH
64725: LD_INT 0
64727: ST_TO_ADDR
// sShovel := false ;
64728: LD_ADDR_EXP 114
64732: PUSH
64733: LD_INT 0
64735: ST_TO_ADDR
// sSheik := false ;
64736: LD_ADDR_EXP 115
64740: PUSH
64741: LD_INT 0
64743: ST_TO_ADDR
// sEarthquake := false ;
64744: LD_ADDR_EXP 117
64748: PUSH
64749: LD_INT 0
64751: ST_TO_ADDR
// sAI := false ;
64752: LD_ADDR_EXP 118
64756: PUSH
64757: LD_INT 0
64759: ST_TO_ADDR
// sCargo := false ;
64760: LD_ADDR_EXP 121
64764: PUSH
64765: LD_INT 0
64767: ST_TO_ADDR
// sDLaser := false ;
64768: LD_ADDR_EXP 122
64772: PUSH
64773: LD_INT 0
64775: ST_TO_ADDR
// sExchange := false ;
64776: LD_ADDR_EXP 123
64780: PUSH
64781: LD_INT 0
64783: ST_TO_ADDR
// sFac := false ;
64784: LD_ADDR_EXP 124
64788: PUSH
64789: LD_INT 0
64791: ST_TO_ADDR
// sPower := false ;
64792: LD_ADDR_EXP 125
64796: PUSH
64797: LD_INT 0
64799: ST_TO_ADDR
// sRandom := false ;
64800: LD_ADDR_EXP 126
64804: PUSH
64805: LD_INT 0
64807: ST_TO_ADDR
// sShield := false ;
64808: LD_ADDR_EXP 127
64812: PUSH
64813: LD_INT 0
64815: ST_TO_ADDR
// sTime := false ;
64816: LD_ADDR_EXP 128
64820: PUSH
64821: LD_INT 0
64823: ST_TO_ADDR
// sTools := false ;
64824: LD_ADDR_EXP 129
64828: PUSH
64829: LD_INT 0
64831: ST_TO_ADDR
// sSold := false ;
64832: LD_ADDR_EXP 94
64836: PUSH
64837: LD_INT 0
64839: ST_TO_ADDR
// sDiff := false ;
64840: LD_ADDR_EXP 95
64844: PUSH
64845: LD_INT 0
64847: ST_TO_ADDR
// sFog := false ;
64848: LD_ADDR_EXP 98
64852: PUSH
64853: LD_INT 0
64855: ST_TO_ADDR
// sReset := false ;
64856: LD_ADDR_EXP 99
64860: PUSH
64861: LD_INT 0
64863: ST_TO_ADDR
// sSun := false ;
64864: LD_ADDR_EXP 100
64868: PUSH
64869: LD_INT 0
64871: ST_TO_ADDR
// sTiger := false ;
64872: LD_ADDR_EXP 96
64876: PUSH
64877: LD_INT 0
64879: ST_TO_ADDR
// sBomb := false ;
64880: LD_ADDR_EXP 97
64884: PUSH
64885: LD_INT 0
64887: ST_TO_ADDR
// sWound := false ;
64888: LD_ADDR_EXP 105
64892: PUSH
64893: LD_INT 0
64895: ST_TO_ADDR
// sBetray := false ;
64896: LD_ADDR_EXP 109
64900: PUSH
64901: LD_INT 0
64903: ST_TO_ADDR
// sContamin := false ;
64904: LD_ADDR_EXP 110
64908: PUSH
64909: LD_INT 0
64911: ST_TO_ADDR
// sOil := false ;
64912: LD_ADDR_EXP 112
64916: PUSH
64917: LD_INT 0
64919: ST_TO_ADDR
// sStu := false ;
64920: LD_ADDR_EXP 116
64924: PUSH
64925: LD_INT 0
64927: ST_TO_ADDR
// sBazooka := false ;
64928: LD_ADDR_EXP 119
64932: PUSH
64933: LD_INT 0
64935: ST_TO_ADDR
// sMortar := false ;
64936: LD_ADDR_EXP 120
64940: PUSH
64941: LD_INT 0
64943: ST_TO_ADDR
// sRanger := false ;
64944: LD_ADDR_EXP 130
64948: PUSH
64949: LD_INT 0
64951: ST_TO_ADDR
// end ;
64952: LD_VAR 0 1
64956: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
64957: LD_INT 0
64959: PPUSH
64960: PPUSH
64961: PPUSH
64962: PPUSH
64963: PPUSH
// result := [ ] ;
64964: LD_ADDR_VAR 0 1
64968: PUSH
64969: EMPTY
64970: ST_TO_ADDR
// if campaign_id = 1 then
64971: LD_OWVAR 69
64975: PUSH
64976: LD_INT 1
64978: EQUAL
64979: IFFALSE 67917
// begin case mission_number of 1 :
64981: LD_OWVAR 70
64985: PUSH
64986: LD_INT 1
64988: DOUBLE
64989: EQUAL
64990: IFTRUE 64994
64992: GO 65058
64994: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
64995: LD_ADDR_VAR 0 1
64999: PUSH
65000: LD_INT 2
65002: PUSH
65003: LD_INT 4
65005: PUSH
65006: LD_INT 11
65008: PUSH
65009: LD_INT 12
65011: PUSH
65012: LD_INT 15
65014: PUSH
65015: LD_INT 16
65017: PUSH
65018: LD_INT 22
65020: PUSH
65021: LD_INT 23
65023: PUSH
65024: LD_INT 26
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 101
65040: PUSH
65041: LD_INT 102
65043: PUSH
65044: LD_INT 106
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: LIST
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: ST_TO_ADDR
65056: GO 67915
65058: LD_INT 2
65060: DOUBLE
65061: EQUAL
65062: IFTRUE 65066
65064: GO 65138
65066: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
65067: LD_ADDR_VAR 0 1
65071: PUSH
65072: LD_INT 2
65074: PUSH
65075: LD_INT 4
65077: PUSH
65078: LD_INT 11
65080: PUSH
65081: LD_INT 12
65083: PUSH
65084: LD_INT 15
65086: PUSH
65087: LD_INT 16
65089: PUSH
65090: LD_INT 22
65092: PUSH
65093: LD_INT 23
65095: PUSH
65096: LD_INT 26
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 101
65112: PUSH
65113: LD_INT 102
65115: PUSH
65116: LD_INT 105
65118: PUSH
65119: LD_INT 106
65121: PUSH
65122: LD_INT 108
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: ST_TO_ADDR
65136: GO 67915
65138: LD_INT 3
65140: DOUBLE
65141: EQUAL
65142: IFTRUE 65146
65144: GO 65222
65146: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
65147: LD_ADDR_VAR 0 1
65151: PUSH
65152: LD_INT 2
65154: PUSH
65155: LD_INT 4
65157: PUSH
65158: LD_INT 5
65160: PUSH
65161: LD_INT 11
65163: PUSH
65164: LD_INT 12
65166: PUSH
65167: LD_INT 15
65169: PUSH
65170: LD_INT 16
65172: PUSH
65173: LD_INT 22
65175: PUSH
65176: LD_INT 26
65178: PUSH
65179: LD_INT 36
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 101
65196: PUSH
65197: LD_INT 102
65199: PUSH
65200: LD_INT 105
65202: PUSH
65203: LD_INT 106
65205: PUSH
65206: LD_INT 108
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: ST_TO_ADDR
65220: GO 67915
65222: LD_INT 4
65224: DOUBLE
65225: EQUAL
65226: IFTRUE 65230
65228: GO 65314
65230: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
65231: LD_ADDR_VAR 0 1
65235: PUSH
65236: LD_INT 2
65238: PUSH
65239: LD_INT 4
65241: PUSH
65242: LD_INT 5
65244: PUSH
65245: LD_INT 8
65247: PUSH
65248: LD_INT 11
65250: PUSH
65251: LD_INT 12
65253: PUSH
65254: LD_INT 15
65256: PUSH
65257: LD_INT 16
65259: PUSH
65260: LD_INT 22
65262: PUSH
65263: LD_INT 23
65265: PUSH
65266: LD_INT 26
65268: PUSH
65269: LD_INT 36
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 101
65288: PUSH
65289: LD_INT 102
65291: PUSH
65292: LD_INT 105
65294: PUSH
65295: LD_INT 106
65297: PUSH
65298: LD_INT 108
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: ST_TO_ADDR
65312: GO 67915
65314: LD_INT 5
65316: DOUBLE
65317: EQUAL
65318: IFTRUE 65322
65320: GO 65422
65322: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
65323: LD_ADDR_VAR 0 1
65327: PUSH
65328: LD_INT 2
65330: PUSH
65331: LD_INT 4
65333: PUSH
65334: LD_INT 5
65336: PUSH
65337: LD_INT 6
65339: PUSH
65340: LD_INT 8
65342: PUSH
65343: LD_INT 11
65345: PUSH
65346: LD_INT 12
65348: PUSH
65349: LD_INT 15
65351: PUSH
65352: LD_INT 16
65354: PUSH
65355: LD_INT 22
65357: PUSH
65358: LD_INT 23
65360: PUSH
65361: LD_INT 25
65363: PUSH
65364: LD_INT 26
65366: PUSH
65367: LD_INT 36
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 101
65388: PUSH
65389: LD_INT 102
65391: PUSH
65392: LD_INT 105
65394: PUSH
65395: LD_INT 106
65397: PUSH
65398: LD_INT 108
65400: PUSH
65401: LD_INT 109
65403: PUSH
65404: LD_INT 112
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: ST_TO_ADDR
65420: GO 67915
65422: LD_INT 6
65424: DOUBLE
65425: EQUAL
65426: IFTRUE 65430
65428: GO 65550
65430: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
65431: LD_ADDR_VAR 0 1
65435: PUSH
65436: LD_INT 2
65438: PUSH
65439: LD_INT 4
65441: PUSH
65442: LD_INT 5
65444: PUSH
65445: LD_INT 6
65447: PUSH
65448: LD_INT 8
65450: PUSH
65451: LD_INT 11
65453: PUSH
65454: LD_INT 12
65456: PUSH
65457: LD_INT 15
65459: PUSH
65460: LD_INT 16
65462: PUSH
65463: LD_INT 20
65465: PUSH
65466: LD_INT 21
65468: PUSH
65469: LD_INT 22
65471: PUSH
65472: LD_INT 23
65474: PUSH
65475: LD_INT 25
65477: PUSH
65478: LD_INT 26
65480: PUSH
65481: LD_INT 30
65483: PUSH
65484: LD_INT 31
65486: PUSH
65487: LD_INT 32
65489: PUSH
65490: LD_INT 36
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 101
65516: PUSH
65517: LD_INT 102
65519: PUSH
65520: LD_INT 105
65522: PUSH
65523: LD_INT 106
65525: PUSH
65526: LD_INT 108
65528: PUSH
65529: LD_INT 109
65531: PUSH
65532: LD_INT 112
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: ST_TO_ADDR
65548: GO 67915
65550: LD_INT 7
65552: DOUBLE
65553: EQUAL
65554: IFTRUE 65558
65556: GO 65658
65558: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
65559: LD_ADDR_VAR 0 1
65563: PUSH
65564: LD_INT 2
65566: PUSH
65567: LD_INT 4
65569: PUSH
65570: LD_INT 5
65572: PUSH
65573: LD_INT 7
65575: PUSH
65576: LD_INT 11
65578: PUSH
65579: LD_INT 12
65581: PUSH
65582: LD_INT 15
65584: PUSH
65585: LD_INT 16
65587: PUSH
65588: LD_INT 20
65590: PUSH
65591: LD_INT 21
65593: PUSH
65594: LD_INT 22
65596: PUSH
65597: LD_INT 23
65599: PUSH
65600: LD_INT 25
65602: PUSH
65603: LD_INT 26
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 101
65624: PUSH
65625: LD_INT 102
65627: PUSH
65628: LD_INT 103
65630: PUSH
65631: LD_INT 105
65633: PUSH
65634: LD_INT 106
65636: PUSH
65637: LD_INT 108
65639: PUSH
65640: LD_INT 112
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: ST_TO_ADDR
65656: GO 67915
65658: LD_INT 8
65660: DOUBLE
65661: EQUAL
65662: IFTRUE 65666
65664: GO 65794
65666: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
65667: LD_ADDR_VAR 0 1
65671: PUSH
65672: LD_INT 2
65674: PUSH
65675: LD_INT 4
65677: PUSH
65678: LD_INT 5
65680: PUSH
65681: LD_INT 6
65683: PUSH
65684: LD_INT 7
65686: PUSH
65687: LD_INT 8
65689: PUSH
65690: LD_INT 11
65692: PUSH
65693: LD_INT 12
65695: PUSH
65696: LD_INT 15
65698: PUSH
65699: LD_INT 16
65701: PUSH
65702: LD_INT 20
65704: PUSH
65705: LD_INT 21
65707: PUSH
65708: LD_INT 22
65710: PUSH
65711: LD_INT 23
65713: PUSH
65714: LD_INT 25
65716: PUSH
65717: LD_INT 26
65719: PUSH
65720: LD_INT 30
65722: PUSH
65723: LD_INT 31
65725: PUSH
65726: LD_INT 32
65728: PUSH
65729: LD_INT 36
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 101
65756: PUSH
65757: LD_INT 102
65759: PUSH
65760: LD_INT 103
65762: PUSH
65763: LD_INT 105
65765: PUSH
65766: LD_INT 106
65768: PUSH
65769: LD_INT 108
65771: PUSH
65772: LD_INT 109
65774: PUSH
65775: LD_INT 112
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: ST_TO_ADDR
65792: GO 67915
65794: LD_INT 9
65796: DOUBLE
65797: EQUAL
65798: IFTRUE 65802
65800: GO 65938
65802: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
65803: LD_ADDR_VAR 0 1
65807: PUSH
65808: LD_INT 2
65810: PUSH
65811: LD_INT 4
65813: PUSH
65814: LD_INT 5
65816: PUSH
65817: LD_INT 6
65819: PUSH
65820: LD_INT 7
65822: PUSH
65823: LD_INT 8
65825: PUSH
65826: LD_INT 11
65828: PUSH
65829: LD_INT 12
65831: PUSH
65832: LD_INT 15
65834: PUSH
65835: LD_INT 16
65837: PUSH
65838: LD_INT 20
65840: PUSH
65841: LD_INT 21
65843: PUSH
65844: LD_INT 22
65846: PUSH
65847: LD_INT 23
65849: PUSH
65850: LD_INT 25
65852: PUSH
65853: LD_INT 26
65855: PUSH
65856: LD_INT 28
65858: PUSH
65859: LD_INT 30
65861: PUSH
65862: LD_INT 31
65864: PUSH
65865: LD_INT 32
65867: PUSH
65868: LD_INT 36
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 101
65896: PUSH
65897: LD_INT 102
65899: PUSH
65900: LD_INT 103
65902: PUSH
65903: LD_INT 105
65905: PUSH
65906: LD_INT 106
65908: PUSH
65909: LD_INT 108
65911: PUSH
65912: LD_INT 109
65914: PUSH
65915: LD_INT 112
65917: PUSH
65918: LD_INT 114
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: ST_TO_ADDR
65936: GO 67915
65938: LD_INT 10
65940: DOUBLE
65941: EQUAL
65942: IFTRUE 65946
65944: GO 66130
65946: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
65947: LD_ADDR_VAR 0 1
65951: PUSH
65952: LD_INT 2
65954: PUSH
65955: LD_INT 4
65957: PUSH
65958: LD_INT 5
65960: PUSH
65961: LD_INT 6
65963: PUSH
65964: LD_INT 7
65966: PUSH
65967: LD_INT 8
65969: PUSH
65970: LD_INT 9
65972: PUSH
65973: LD_INT 10
65975: PUSH
65976: LD_INT 11
65978: PUSH
65979: LD_INT 12
65981: PUSH
65982: LD_INT 13
65984: PUSH
65985: LD_INT 14
65987: PUSH
65988: LD_INT 15
65990: PUSH
65991: LD_INT 16
65993: PUSH
65994: LD_INT 17
65996: PUSH
65997: LD_INT 18
65999: PUSH
66000: LD_INT 19
66002: PUSH
66003: LD_INT 20
66005: PUSH
66006: LD_INT 21
66008: PUSH
66009: LD_INT 22
66011: PUSH
66012: LD_INT 23
66014: PUSH
66015: LD_INT 24
66017: PUSH
66018: LD_INT 25
66020: PUSH
66021: LD_INT 26
66023: PUSH
66024: LD_INT 28
66026: PUSH
66027: LD_INT 30
66029: PUSH
66030: LD_INT 31
66032: PUSH
66033: LD_INT 32
66035: PUSH
66036: LD_INT 36
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 101
66072: PUSH
66073: LD_INT 102
66075: PUSH
66076: LD_INT 103
66078: PUSH
66079: LD_INT 104
66081: PUSH
66082: LD_INT 105
66084: PUSH
66085: LD_INT 106
66087: PUSH
66088: LD_INT 107
66090: PUSH
66091: LD_INT 108
66093: PUSH
66094: LD_INT 109
66096: PUSH
66097: LD_INT 110
66099: PUSH
66100: LD_INT 111
66102: PUSH
66103: LD_INT 112
66105: PUSH
66106: LD_INT 114
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: ST_TO_ADDR
66128: GO 67915
66130: LD_INT 11
66132: DOUBLE
66133: EQUAL
66134: IFTRUE 66138
66136: GO 66330
66138: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
66139: LD_ADDR_VAR 0 1
66143: PUSH
66144: LD_INT 2
66146: PUSH
66147: LD_INT 3
66149: PUSH
66150: LD_INT 4
66152: PUSH
66153: LD_INT 5
66155: PUSH
66156: LD_INT 6
66158: PUSH
66159: LD_INT 7
66161: PUSH
66162: LD_INT 8
66164: PUSH
66165: LD_INT 9
66167: PUSH
66168: LD_INT 10
66170: PUSH
66171: LD_INT 11
66173: PUSH
66174: LD_INT 12
66176: PUSH
66177: LD_INT 13
66179: PUSH
66180: LD_INT 14
66182: PUSH
66183: LD_INT 15
66185: PUSH
66186: LD_INT 16
66188: PUSH
66189: LD_INT 17
66191: PUSH
66192: LD_INT 18
66194: PUSH
66195: LD_INT 19
66197: PUSH
66198: LD_INT 20
66200: PUSH
66201: LD_INT 21
66203: PUSH
66204: LD_INT 22
66206: PUSH
66207: LD_INT 23
66209: PUSH
66210: LD_INT 24
66212: PUSH
66213: LD_INT 25
66215: PUSH
66216: LD_INT 26
66218: PUSH
66219: LD_INT 28
66221: PUSH
66222: LD_INT 30
66224: PUSH
66225: LD_INT 31
66227: PUSH
66228: LD_INT 32
66230: PUSH
66231: LD_INT 34
66233: PUSH
66234: LD_INT 36
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 101
66272: PUSH
66273: LD_INT 102
66275: PUSH
66276: LD_INT 103
66278: PUSH
66279: LD_INT 104
66281: PUSH
66282: LD_INT 105
66284: PUSH
66285: LD_INT 106
66287: PUSH
66288: LD_INT 107
66290: PUSH
66291: LD_INT 108
66293: PUSH
66294: LD_INT 109
66296: PUSH
66297: LD_INT 110
66299: PUSH
66300: LD_INT 111
66302: PUSH
66303: LD_INT 112
66305: PUSH
66306: LD_INT 114
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: ST_TO_ADDR
66328: GO 67915
66330: LD_INT 12
66332: DOUBLE
66333: EQUAL
66334: IFTRUE 66338
66336: GO 66546
66338: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
66339: LD_ADDR_VAR 0 1
66343: PUSH
66344: LD_INT 1
66346: PUSH
66347: LD_INT 2
66349: PUSH
66350: LD_INT 3
66352: PUSH
66353: LD_INT 4
66355: PUSH
66356: LD_INT 5
66358: PUSH
66359: LD_INT 6
66361: PUSH
66362: LD_INT 7
66364: PUSH
66365: LD_INT 8
66367: PUSH
66368: LD_INT 9
66370: PUSH
66371: LD_INT 10
66373: PUSH
66374: LD_INT 11
66376: PUSH
66377: LD_INT 12
66379: PUSH
66380: LD_INT 13
66382: PUSH
66383: LD_INT 14
66385: PUSH
66386: LD_INT 15
66388: PUSH
66389: LD_INT 16
66391: PUSH
66392: LD_INT 17
66394: PUSH
66395: LD_INT 18
66397: PUSH
66398: LD_INT 19
66400: PUSH
66401: LD_INT 20
66403: PUSH
66404: LD_INT 21
66406: PUSH
66407: LD_INT 22
66409: PUSH
66410: LD_INT 23
66412: PUSH
66413: LD_INT 24
66415: PUSH
66416: LD_INT 25
66418: PUSH
66419: LD_INT 26
66421: PUSH
66422: LD_INT 27
66424: PUSH
66425: LD_INT 28
66427: PUSH
66428: LD_INT 30
66430: PUSH
66431: LD_INT 31
66433: PUSH
66434: LD_INT 32
66436: PUSH
66437: LD_INT 33
66439: PUSH
66440: LD_INT 34
66442: PUSH
66443: LD_INT 36
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 101
66484: PUSH
66485: LD_INT 102
66487: PUSH
66488: LD_INT 103
66490: PUSH
66491: LD_INT 104
66493: PUSH
66494: LD_INT 105
66496: PUSH
66497: LD_INT 106
66499: PUSH
66500: LD_INT 107
66502: PUSH
66503: LD_INT 108
66505: PUSH
66506: LD_INT 109
66508: PUSH
66509: LD_INT 110
66511: PUSH
66512: LD_INT 111
66514: PUSH
66515: LD_INT 112
66517: PUSH
66518: LD_INT 113
66520: PUSH
66521: LD_INT 114
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: ST_TO_ADDR
66544: GO 67915
66546: LD_INT 13
66548: DOUBLE
66549: EQUAL
66550: IFTRUE 66554
66552: GO 66750
66554: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
66555: LD_ADDR_VAR 0 1
66559: PUSH
66560: LD_INT 1
66562: PUSH
66563: LD_INT 2
66565: PUSH
66566: LD_INT 3
66568: PUSH
66569: LD_INT 4
66571: PUSH
66572: LD_INT 5
66574: PUSH
66575: LD_INT 8
66577: PUSH
66578: LD_INT 9
66580: PUSH
66581: LD_INT 10
66583: PUSH
66584: LD_INT 11
66586: PUSH
66587: LD_INT 12
66589: PUSH
66590: LD_INT 14
66592: PUSH
66593: LD_INT 15
66595: PUSH
66596: LD_INT 16
66598: PUSH
66599: LD_INT 17
66601: PUSH
66602: LD_INT 18
66604: PUSH
66605: LD_INT 19
66607: PUSH
66608: LD_INT 20
66610: PUSH
66611: LD_INT 21
66613: PUSH
66614: LD_INT 22
66616: PUSH
66617: LD_INT 23
66619: PUSH
66620: LD_INT 24
66622: PUSH
66623: LD_INT 25
66625: PUSH
66626: LD_INT 26
66628: PUSH
66629: LD_INT 27
66631: PUSH
66632: LD_INT 28
66634: PUSH
66635: LD_INT 30
66637: PUSH
66638: LD_INT 31
66640: PUSH
66641: LD_INT 32
66643: PUSH
66644: LD_INT 33
66646: PUSH
66647: LD_INT 34
66649: PUSH
66650: LD_INT 36
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 101
66688: PUSH
66689: LD_INT 102
66691: PUSH
66692: LD_INT 103
66694: PUSH
66695: LD_INT 104
66697: PUSH
66698: LD_INT 105
66700: PUSH
66701: LD_INT 106
66703: PUSH
66704: LD_INT 107
66706: PUSH
66707: LD_INT 108
66709: PUSH
66710: LD_INT 109
66712: PUSH
66713: LD_INT 110
66715: PUSH
66716: LD_INT 111
66718: PUSH
66719: LD_INT 112
66721: PUSH
66722: LD_INT 113
66724: PUSH
66725: LD_INT 114
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: ST_TO_ADDR
66748: GO 67915
66750: LD_INT 14
66752: DOUBLE
66753: EQUAL
66754: IFTRUE 66758
66756: GO 66970
66758: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
66759: LD_ADDR_VAR 0 1
66763: PUSH
66764: LD_INT 1
66766: PUSH
66767: LD_INT 2
66769: PUSH
66770: LD_INT 3
66772: PUSH
66773: LD_INT 4
66775: PUSH
66776: LD_INT 5
66778: PUSH
66779: LD_INT 6
66781: PUSH
66782: LD_INT 7
66784: PUSH
66785: LD_INT 8
66787: PUSH
66788: LD_INT 9
66790: PUSH
66791: LD_INT 10
66793: PUSH
66794: LD_INT 11
66796: PUSH
66797: LD_INT 12
66799: PUSH
66800: LD_INT 13
66802: PUSH
66803: LD_INT 14
66805: PUSH
66806: LD_INT 15
66808: PUSH
66809: LD_INT 16
66811: PUSH
66812: LD_INT 17
66814: PUSH
66815: LD_INT 18
66817: PUSH
66818: LD_INT 19
66820: PUSH
66821: LD_INT 20
66823: PUSH
66824: LD_INT 21
66826: PUSH
66827: LD_INT 22
66829: PUSH
66830: LD_INT 23
66832: PUSH
66833: LD_INT 24
66835: PUSH
66836: LD_INT 25
66838: PUSH
66839: LD_INT 26
66841: PUSH
66842: LD_INT 27
66844: PUSH
66845: LD_INT 28
66847: PUSH
66848: LD_INT 29
66850: PUSH
66851: LD_INT 30
66853: PUSH
66854: LD_INT 31
66856: PUSH
66857: LD_INT 32
66859: PUSH
66860: LD_INT 33
66862: PUSH
66863: LD_INT 34
66865: PUSH
66866: LD_INT 36
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 101
66908: PUSH
66909: LD_INT 102
66911: PUSH
66912: LD_INT 103
66914: PUSH
66915: LD_INT 104
66917: PUSH
66918: LD_INT 105
66920: PUSH
66921: LD_INT 106
66923: PUSH
66924: LD_INT 107
66926: PUSH
66927: LD_INT 108
66929: PUSH
66930: LD_INT 109
66932: PUSH
66933: LD_INT 110
66935: PUSH
66936: LD_INT 111
66938: PUSH
66939: LD_INT 112
66941: PUSH
66942: LD_INT 113
66944: PUSH
66945: LD_INT 114
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: ST_TO_ADDR
66968: GO 67915
66970: LD_INT 15
66972: DOUBLE
66973: EQUAL
66974: IFTRUE 66978
66976: GO 67190
66978: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
66979: LD_ADDR_VAR 0 1
66983: PUSH
66984: LD_INT 1
66986: PUSH
66987: LD_INT 2
66989: PUSH
66990: LD_INT 3
66992: PUSH
66993: LD_INT 4
66995: PUSH
66996: LD_INT 5
66998: PUSH
66999: LD_INT 6
67001: PUSH
67002: LD_INT 7
67004: PUSH
67005: LD_INT 8
67007: PUSH
67008: LD_INT 9
67010: PUSH
67011: LD_INT 10
67013: PUSH
67014: LD_INT 11
67016: PUSH
67017: LD_INT 12
67019: PUSH
67020: LD_INT 13
67022: PUSH
67023: LD_INT 14
67025: PUSH
67026: LD_INT 15
67028: PUSH
67029: LD_INT 16
67031: PUSH
67032: LD_INT 17
67034: PUSH
67035: LD_INT 18
67037: PUSH
67038: LD_INT 19
67040: PUSH
67041: LD_INT 20
67043: PUSH
67044: LD_INT 21
67046: PUSH
67047: LD_INT 22
67049: PUSH
67050: LD_INT 23
67052: PUSH
67053: LD_INT 24
67055: PUSH
67056: LD_INT 25
67058: PUSH
67059: LD_INT 26
67061: PUSH
67062: LD_INT 27
67064: PUSH
67065: LD_INT 28
67067: PUSH
67068: LD_INT 29
67070: PUSH
67071: LD_INT 30
67073: PUSH
67074: LD_INT 31
67076: PUSH
67077: LD_INT 32
67079: PUSH
67080: LD_INT 33
67082: PUSH
67083: LD_INT 34
67085: PUSH
67086: LD_INT 36
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 101
67128: PUSH
67129: LD_INT 102
67131: PUSH
67132: LD_INT 103
67134: PUSH
67135: LD_INT 104
67137: PUSH
67138: LD_INT 105
67140: PUSH
67141: LD_INT 106
67143: PUSH
67144: LD_INT 107
67146: PUSH
67147: LD_INT 108
67149: PUSH
67150: LD_INT 109
67152: PUSH
67153: LD_INT 110
67155: PUSH
67156: LD_INT 111
67158: PUSH
67159: LD_INT 112
67161: PUSH
67162: LD_INT 113
67164: PUSH
67165: LD_INT 114
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: ST_TO_ADDR
67188: GO 67915
67190: LD_INT 16
67192: DOUBLE
67193: EQUAL
67194: IFTRUE 67198
67196: GO 67322
67198: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
67199: LD_ADDR_VAR 0 1
67203: PUSH
67204: LD_INT 2
67206: PUSH
67207: LD_INT 4
67209: PUSH
67210: LD_INT 5
67212: PUSH
67213: LD_INT 7
67215: PUSH
67216: LD_INT 11
67218: PUSH
67219: LD_INT 12
67221: PUSH
67222: LD_INT 15
67224: PUSH
67225: LD_INT 16
67227: PUSH
67228: LD_INT 20
67230: PUSH
67231: LD_INT 21
67233: PUSH
67234: LD_INT 22
67236: PUSH
67237: LD_INT 23
67239: PUSH
67240: LD_INT 25
67242: PUSH
67243: LD_INT 26
67245: PUSH
67246: LD_INT 30
67248: PUSH
67249: LD_INT 31
67251: PUSH
67252: LD_INT 32
67254: PUSH
67255: LD_INT 33
67257: PUSH
67258: LD_INT 34
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 101
67284: PUSH
67285: LD_INT 102
67287: PUSH
67288: LD_INT 103
67290: PUSH
67291: LD_INT 106
67293: PUSH
67294: LD_INT 108
67296: PUSH
67297: LD_INT 112
67299: PUSH
67300: LD_INT 113
67302: PUSH
67303: LD_INT 114
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: ST_TO_ADDR
67320: GO 67915
67322: LD_INT 17
67324: DOUBLE
67325: EQUAL
67326: IFTRUE 67330
67328: GO 67542
67330: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
67331: LD_ADDR_VAR 0 1
67335: PUSH
67336: LD_INT 1
67338: PUSH
67339: LD_INT 2
67341: PUSH
67342: LD_INT 3
67344: PUSH
67345: LD_INT 4
67347: PUSH
67348: LD_INT 5
67350: PUSH
67351: LD_INT 6
67353: PUSH
67354: LD_INT 7
67356: PUSH
67357: LD_INT 8
67359: PUSH
67360: LD_INT 9
67362: PUSH
67363: LD_INT 10
67365: PUSH
67366: LD_INT 11
67368: PUSH
67369: LD_INT 12
67371: PUSH
67372: LD_INT 13
67374: PUSH
67375: LD_INT 14
67377: PUSH
67378: LD_INT 15
67380: PUSH
67381: LD_INT 16
67383: PUSH
67384: LD_INT 17
67386: PUSH
67387: LD_INT 18
67389: PUSH
67390: LD_INT 19
67392: PUSH
67393: LD_INT 20
67395: PUSH
67396: LD_INT 21
67398: PUSH
67399: LD_INT 22
67401: PUSH
67402: LD_INT 23
67404: PUSH
67405: LD_INT 24
67407: PUSH
67408: LD_INT 25
67410: PUSH
67411: LD_INT 26
67413: PUSH
67414: LD_INT 27
67416: PUSH
67417: LD_INT 28
67419: PUSH
67420: LD_INT 29
67422: PUSH
67423: LD_INT 30
67425: PUSH
67426: LD_INT 31
67428: PUSH
67429: LD_INT 32
67431: PUSH
67432: LD_INT 33
67434: PUSH
67435: LD_INT 34
67437: PUSH
67438: LD_INT 36
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 101
67480: PUSH
67481: LD_INT 102
67483: PUSH
67484: LD_INT 103
67486: PUSH
67487: LD_INT 104
67489: PUSH
67490: LD_INT 105
67492: PUSH
67493: LD_INT 106
67495: PUSH
67496: LD_INT 107
67498: PUSH
67499: LD_INT 108
67501: PUSH
67502: LD_INT 109
67504: PUSH
67505: LD_INT 110
67507: PUSH
67508: LD_INT 111
67510: PUSH
67511: LD_INT 112
67513: PUSH
67514: LD_INT 113
67516: PUSH
67517: LD_INT 114
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: ST_TO_ADDR
67540: GO 67915
67542: LD_INT 18
67544: DOUBLE
67545: EQUAL
67546: IFTRUE 67550
67548: GO 67686
67550: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
67551: LD_ADDR_VAR 0 1
67555: PUSH
67556: LD_INT 2
67558: PUSH
67559: LD_INT 4
67561: PUSH
67562: LD_INT 5
67564: PUSH
67565: LD_INT 7
67567: PUSH
67568: LD_INT 11
67570: PUSH
67571: LD_INT 12
67573: PUSH
67574: LD_INT 15
67576: PUSH
67577: LD_INT 16
67579: PUSH
67580: LD_INT 20
67582: PUSH
67583: LD_INT 21
67585: PUSH
67586: LD_INT 22
67588: PUSH
67589: LD_INT 23
67591: PUSH
67592: LD_INT 25
67594: PUSH
67595: LD_INT 26
67597: PUSH
67598: LD_INT 30
67600: PUSH
67601: LD_INT 31
67603: PUSH
67604: LD_INT 32
67606: PUSH
67607: LD_INT 33
67609: PUSH
67610: LD_INT 34
67612: PUSH
67613: LD_INT 35
67615: PUSH
67616: LD_INT 36
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 101
67644: PUSH
67645: LD_INT 102
67647: PUSH
67648: LD_INT 103
67650: PUSH
67651: LD_INT 106
67653: PUSH
67654: LD_INT 108
67656: PUSH
67657: LD_INT 112
67659: PUSH
67660: LD_INT 113
67662: PUSH
67663: LD_INT 114
67665: PUSH
67666: LD_INT 115
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: ST_TO_ADDR
67684: GO 67915
67686: LD_INT 19
67688: DOUBLE
67689: EQUAL
67690: IFTRUE 67694
67692: GO 67914
67694: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
67695: LD_ADDR_VAR 0 1
67699: PUSH
67700: LD_INT 1
67702: PUSH
67703: LD_INT 2
67705: PUSH
67706: LD_INT 3
67708: PUSH
67709: LD_INT 4
67711: PUSH
67712: LD_INT 5
67714: PUSH
67715: LD_INT 6
67717: PUSH
67718: LD_INT 7
67720: PUSH
67721: LD_INT 8
67723: PUSH
67724: LD_INT 9
67726: PUSH
67727: LD_INT 10
67729: PUSH
67730: LD_INT 11
67732: PUSH
67733: LD_INT 12
67735: PUSH
67736: LD_INT 13
67738: PUSH
67739: LD_INT 14
67741: PUSH
67742: LD_INT 15
67744: PUSH
67745: LD_INT 16
67747: PUSH
67748: LD_INT 17
67750: PUSH
67751: LD_INT 18
67753: PUSH
67754: LD_INT 19
67756: PUSH
67757: LD_INT 20
67759: PUSH
67760: LD_INT 21
67762: PUSH
67763: LD_INT 22
67765: PUSH
67766: LD_INT 23
67768: PUSH
67769: LD_INT 24
67771: PUSH
67772: LD_INT 25
67774: PUSH
67775: LD_INT 26
67777: PUSH
67778: LD_INT 27
67780: PUSH
67781: LD_INT 28
67783: PUSH
67784: LD_INT 29
67786: PUSH
67787: LD_INT 30
67789: PUSH
67790: LD_INT 31
67792: PUSH
67793: LD_INT 32
67795: PUSH
67796: LD_INT 33
67798: PUSH
67799: LD_INT 34
67801: PUSH
67802: LD_INT 35
67804: PUSH
67805: LD_INT 36
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 101
67848: PUSH
67849: LD_INT 102
67851: PUSH
67852: LD_INT 103
67854: PUSH
67855: LD_INT 104
67857: PUSH
67858: LD_INT 105
67860: PUSH
67861: LD_INT 106
67863: PUSH
67864: LD_INT 107
67866: PUSH
67867: LD_INT 108
67869: PUSH
67870: LD_INT 109
67872: PUSH
67873: LD_INT 110
67875: PUSH
67876: LD_INT 111
67878: PUSH
67879: LD_INT 112
67881: PUSH
67882: LD_INT 113
67884: PUSH
67885: LD_INT 114
67887: PUSH
67888: LD_INT 115
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: ST_TO_ADDR
67912: GO 67915
67914: POP
// end else
67915: GO 68134
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
67917: LD_ADDR_VAR 0 1
67921: PUSH
67922: LD_INT 1
67924: PUSH
67925: LD_INT 2
67927: PUSH
67928: LD_INT 3
67930: PUSH
67931: LD_INT 4
67933: PUSH
67934: LD_INT 5
67936: PUSH
67937: LD_INT 6
67939: PUSH
67940: LD_INT 7
67942: PUSH
67943: LD_INT 8
67945: PUSH
67946: LD_INT 9
67948: PUSH
67949: LD_INT 10
67951: PUSH
67952: LD_INT 11
67954: PUSH
67955: LD_INT 12
67957: PUSH
67958: LD_INT 13
67960: PUSH
67961: LD_INT 14
67963: PUSH
67964: LD_INT 15
67966: PUSH
67967: LD_INT 16
67969: PUSH
67970: LD_INT 17
67972: PUSH
67973: LD_INT 18
67975: PUSH
67976: LD_INT 19
67978: PUSH
67979: LD_INT 20
67981: PUSH
67982: LD_INT 21
67984: PUSH
67985: LD_INT 22
67987: PUSH
67988: LD_INT 23
67990: PUSH
67991: LD_INT 24
67993: PUSH
67994: LD_INT 25
67996: PUSH
67997: LD_INT 26
67999: PUSH
68000: LD_INT 27
68002: PUSH
68003: LD_INT 28
68005: PUSH
68006: LD_INT 29
68008: PUSH
68009: LD_INT 30
68011: PUSH
68012: LD_INT 31
68014: PUSH
68015: LD_INT 32
68017: PUSH
68018: LD_INT 33
68020: PUSH
68021: LD_INT 34
68023: PUSH
68024: LD_INT 35
68026: PUSH
68027: LD_INT 36
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 101
68070: PUSH
68071: LD_INT 102
68073: PUSH
68074: LD_INT 103
68076: PUSH
68077: LD_INT 104
68079: PUSH
68080: LD_INT 105
68082: PUSH
68083: LD_INT 106
68085: PUSH
68086: LD_INT 107
68088: PUSH
68089: LD_INT 108
68091: PUSH
68092: LD_INT 109
68094: PUSH
68095: LD_INT 110
68097: PUSH
68098: LD_INT 111
68100: PUSH
68101: LD_INT 112
68103: PUSH
68104: LD_INT 113
68106: PUSH
68107: LD_INT 114
68109: PUSH
68110: LD_INT 115
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: ST_TO_ADDR
// if result then
68134: LD_VAR 0 1
68138: IFFALSE 68427
// begin normal :=  ;
68140: LD_ADDR_VAR 0 3
68144: PUSH
68145: LD_STRING 
68147: ST_TO_ADDR
// hardcore :=  ;
68148: LD_ADDR_VAR 0 4
68152: PUSH
68153: LD_STRING 
68155: ST_TO_ADDR
// for i = 1 to normalCounter do
68156: LD_ADDR_VAR 0 5
68160: PUSH
68161: DOUBLE
68162: LD_INT 1
68164: DEC
68165: ST_TO_ADDR
68166: LD_EXP 78
68170: PUSH
68171: FOR_TO
68172: IFFALSE 68273
// begin tmp := 0 ;
68174: LD_ADDR_VAR 0 2
68178: PUSH
68179: LD_STRING 0
68181: ST_TO_ADDR
// if result [ 1 ] then
68182: LD_VAR 0 1
68186: PUSH
68187: LD_INT 1
68189: ARRAY
68190: IFFALSE 68255
// if result [ 1 ] [ 1 ] = i then
68192: LD_VAR 0 1
68196: PUSH
68197: LD_INT 1
68199: ARRAY
68200: PUSH
68201: LD_INT 1
68203: ARRAY
68204: PUSH
68205: LD_VAR 0 5
68209: EQUAL
68210: IFFALSE 68255
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
68212: LD_ADDR_VAR 0 1
68216: PUSH
68217: LD_VAR 0 1
68221: PPUSH
68222: LD_INT 1
68224: PPUSH
68225: LD_VAR 0 1
68229: PUSH
68230: LD_INT 1
68232: ARRAY
68233: PPUSH
68234: LD_INT 1
68236: PPUSH
68237: CALL_OW 3
68241: PPUSH
68242: CALL_OW 1
68246: ST_TO_ADDR
// tmp := 1 ;
68247: LD_ADDR_VAR 0 2
68251: PUSH
68252: LD_STRING 1
68254: ST_TO_ADDR
// end ; normal := normal & tmp ;
68255: LD_ADDR_VAR 0 3
68259: PUSH
68260: LD_VAR 0 3
68264: PUSH
68265: LD_VAR 0 2
68269: STR
68270: ST_TO_ADDR
// end ;
68271: GO 68171
68273: POP
68274: POP
// for i = 1 to hardcoreCounter do
68275: LD_ADDR_VAR 0 5
68279: PUSH
68280: DOUBLE
68281: LD_INT 1
68283: DEC
68284: ST_TO_ADDR
68285: LD_EXP 79
68289: PUSH
68290: FOR_TO
68291: IFFALSE 68396
// begin tmp := 0 ;
68293: LD_ADDR_VAR 0 2
68297: PUSH
68298: LD_STRING 0
68300: ST_TO_ADDR
// if result [ 2 ] then
68301: LD_VAR 0 1
68305: PUSH
68306: LD_INT 2
68308: ARRAY
68309: IFFALSE 68378
// if result [ 2 ] [ 1 ] = 100 + i then
68311: LD_VAR 0 1
68315: PUSH
68316: LD_INT 2
68318: ARRAY
68319: PUSH
68320: LD_INT 1
68322: ARRAY
68323: PUSH
68324: LD_INT 100
68326: PUSH
68327: LD_VAR 0 5
68331: PLUS
68332: EQUAL
68333: IFFALSE 68378
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
68335: LD_ADDR_VAR 0 1
68339: PUSH
68340: LD_VAR 0 1
68344: PPUSH
68345: LD_INT 2
68347: PPUSH
68348: LD_VAR 0 1
68352: PUSH
68353: LD_INT 2
68355: ARRAY
68356: PPUSH
68357: LD_INT 1
68359: PPUSH
68360: CALL_OW 3
68364: PPUSH
68365: CALL_OW 1
68369: ST_TO_ADDR
// tmp := 1 ;
68370: LD_ADDR_VAR 0 2
68374: PUSH
68375: LD_STRING 1
68377: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
68378: LD_ADDR_VAR 0 4
68382: PUSH
68383: LD_VAR 0 4
68387: PUSH
68388: LD_VAR 0 2
68392: STR
68393: ST_TO_ADDR
// end ;
68394: GO 68290
68396: POP
68397: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
68398: LD_STRING getStreamItemsFromMission("
68400: PUSH
68401: LD_VAR 0 3
68405: STR
68406: PUSH
68407: LD_STRING ","
68409: STR
68410: PUSH
68411: LD_VAR 0 4
68415: STR
68416: PUSH
68417: LD_STRING ")
68419: STR
68420: PPUSH
68421: CALL_OW 559
// end else
68425: GO 68434
// ToLua ( getStreamItemsFromMission("","") ) ;
68427: LD_STRING getStreamItemsFromMission("","")
68429: PPUSH
68430: CALL_OW 559
// end ;
68434: LD_VAR 0 1
68438: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
68439: LD_EXP 77
68443: PUSH
68444: LD_EXP 82
68448: AND
68449: IFFALSE 68573
68451: GO 68453
68453: DISABLE
68454: LD_INT 0
68456: PPUSH
68457: PPUSH
// begin enable ;
68458: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
68459: LD_ADDR_VAR 0 2
68463: PUSH
68464: LD_INT 22
68466: PUSH
68467: LD_OWVAR 2
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 2
68478: PUSH
68479: LD_INT 34
68481: PUSH
68482: LD_INT 7
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 34
68491: PUSH
68492: LD_INT 45
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 34
68501: PUSH
68502: LD_INT 28
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 34
68511: PUSH
68512: LD_INT 47
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PPUSH
68530: CALL_OW 69
68534: ST_TO_ADDR
// if not tmp then
68535: LD_VAR 0 2
68539: NOT
68540: IFFALSE 68544
// exit ;
68542: GO 68573
// for i in tmp do
68544: LD_ADDR_VAR 0 1
68548: PUSH
68549: LD_VAR 0 2
68553: PUSH
68554: FOR_IN
68555: IFFALSE 68571
// begin SetLives ( i , 0 ) ;
68557: LD_VAR 0 1
68561: PPUSH
68562: LD_INT 0
68564: PPUSH
68565: CALL_OW 234
// end ;
68569: GO 68554
68571: POP
68572: POP
// end ;
68573: PPOPN 2
68575: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
68576: LD_EXP 77
68580: PUSH
68581: LD_EXP 83
68585: AND
68586: IFFALSE 68670
68588: GO 68590
68590: DISABLE
68591: LD_INT 0
68593: PPUSH
68594: PPUSH
// begin enable ;
68595: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
68596: LD_ADDR_VAR 0 2
68600: PUSH
68601: LD_INT 22
68603: PUSH
68604: LD_OWVAR 2
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 32
68615: PUSH
68616: LD_INT 3
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PPUSH
68627: CALL_OW 69
68631: ST_TO_ADDR
// if not tmp then
68632: LD_VAR 0 2
68636: NOT
68637: IFFALSE 68641
// exit ;
68639: GO 68670
// for i in tmp do
68641: LD_ADDR_VAR 0 1
68645: PUSH
68646: LD_VAR 0 2
68650: PUSH
68651: FOR_IN
68652: IFFALSE 68668
// begin SetLives ( i , 0 ) ;
68654: LD_VAR 0 1
68658: PPUSH
68659: LD_INT 0
68661: PPUSH
68662: CALL_OW 234
// end ;
68666: GO 68651
68668: POP
68669: POP
// end ;
68670: PPOPN 2
68672: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
68673: LD_EXP 77
68677: PUSH
68678: LD_EXP 80
68682: AND
68683: IFFALSE 68776
68685: GO 68687
68687: DISABLE
68688: LD_INT 0
68690: PPUSH
// begin enable ;
68691: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
68692: LD_ADDR_VAR 0 1
68696: PUSH
68697: LD_INT 22
68699: PUSH
68700: LD_OWVAR 2
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 2
68711: PUSH
68712: LD_INT 25
68714: PUSH
68715: LD_INT 5
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 25
68724: PUSH
68725: LD_INT 9
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 25
68734: PUSH
68735: LD_INT 8
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PPUSH
68752: CALL_OW 69
68756: PUSH
68757: FOR_IN
68758: IFFALSE 68774
// begin SetClass ( i , 1 ) ;
68760: LD_VAR 0 1
68764: PPUSH
68765: LD_INT 1
68767: PPUSH
68768: CALL_OW 336
// end ;
68772: GO 68757
68774: POP
68775: POP
// end ;
68776: PPOPN 1
68778: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
68779: LD_EXP 77
68783: PUSH
68784: LD_EXP 81
68788: AND
68789: PUSH
68790: LD_OWVAR 65
68794: PUSH
68795: LD_INT 7
68797: LESS
68798: AND
68799: IFFALSE 68813
68801: GO 68803
68803: DISABLE
// begin enable ;
68804: ENABLE
// game_speed := 7 ;
68805: LD_ADDR_OWVAR 65
68809: PUSH
68810: LD_INT 7
68812: ST_TO_ADDR
// end ;
68813: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
68814: LD_EXP 77
68818: PUSH
68819: LD_EXP 84
68823: AND
68824: IFFALSE 69026
68826: GO 68828
68828: DISABLE
68829: LD_INT 0
68831: PPUSH
68832: PPUSH
68833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
68834: LD_ADDR_VAR 0 3
68838: PUSH
68839: LD_INT 81
68841: PUSH
68842: LD_OWVAR 2
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 21
68853: PUSH
68854: LD_INT 1
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PPUSH
68865: CALL_OW 69
68869: ST_TO_ADDR
// if not tmp then
68870: LD_VAR 0 3
68874: NOT
68875: IFFALSE 68879
// exit ;
68877: GO 69026
// if tmp > 5 then
68879: LD_VAR 0 3
68883: PUSH
68884: LD_INT 5
68886: GREATER
68887: IFFALSE 68899
// k := 5 else
68889: LD_ADDR_VAR 0 2
68893: PUSH
68894: LD_INT 5
68896: ST_TO_ADDR
68897: GO 68909
// k := tmp ;
68899: LD_ADDR_VAR 0 2
68903: PUSH
68904: LD_VAR 0 3
68908: ST_TO_ADDR
// for i := 1 to k do
68909: LD_ADDR_VAR 0 1
68913: PUSH
68914: DOUBLE
68915: LD_INT 1
68917: DEC
68918: ST_TO_ADDR
68919: LD_VAR 0 2
68923: PUSH
68924: FOR_TO
68925: IFFALSE 69024
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
68927: LD_VAR 0 3
68931: PUSH
68932: LD_VAR 0 1
68936: ARRAY
68937: PPUSH
68938: LD_VAR 0 1
68942: PUSH
68943: LD_INT 4
68945: MOD
68946: PUSH
68947: LD_INT 1
68949: PLUS
68950: PPUSH
68951: CALL_OW 259
68955: PUSH
68956: LD_INT 10
68958: LESS
68959: IFFALSE 69022
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
68961: LD_VAR 0 3
68965: PUSH
68966: LD_VAR 0 1
68970: ARRAY
68971: PPUSH
68972: LD_VAR 0 1
68976: PUSH
68977: LD_INT 4
68979: MOD
68980: PUSH
68981: LD_INT 1
68983: PLUS
68984: PPUSH
68985: LD_VAR 0 3
68989: PUSH
68990: LD_VAR 0 1
68994: ARRAY
68995: PPUSH
68996: LD_VAR 0 1
69000: PUSH
69001: LD_INT 4
69003: MOD
69004: PUSH
69005: LD_INT 1
69007: PLUS
69008: PPUSH
69009: CALL_OW 259
69013: PUSH
69014: LD_INT 1
69016: PLUS
69017: PPUSH
69018: CALL_OW 237
69022: GO 68924
69024: POP
69025: POP
// end ;
69026: PPOPN 3
69028: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
69029: LD_EXP 77
69033: PUSH
69034: LD_EXP 85
69038: AND
69039: IFFALSE 69059
69041: GO 69043
69043: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
69044: LD_INT 4
69046: PPUSH
69047: LD_OWVAR 2
69051: PPUSH
69052: LD_INT 0
69054: PPUSH
69055: CALL_OW 324
69059: END
// every 0 0$1 trigger StreamModeActive and sShovel do
69060: LD_EXP 77
69064: PUSH
69065: LD_EXP 114
69069: AND
69070: IFFALSE 69090
69072: GO 69074
69074: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
69075: LD_INT 19
69077: PPUSH
69078: LD_OWVAR 2
69082: PPUSH
69083: LD_INT 0
69085: PPUSH
69086: CALL_OW 324
69090: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
69091: LD_EXP 77
69095: PUSH
69096: LD_EXP 86
69100: AND
69101: IFFALSE 69203
69103: GO 69105
69105: DISABLE
69106: LD_INT 0
69108: PPUSH
69109: PPUSH
// begin enable ;
69110: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
69111: LD_ADDR_VAR 0 2
69115: PUSH
69116: LD_INT 22
69118: PUSH
69119: LD_OWVAR 2
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 2
69130: PUSH
69131: LD_INT 34
69133: PUSH
69134: LD_INT 11
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 34
69143: PUSH
69144: LD_INT 30
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: LIST
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PPUSH
69160: CALL_OW 69
69164: ST_TO_ADDR
// if not tmp then
69165: LD_VAR 0 2
69169: NOT
69170: IFFALSE 69174
// exit ;
69172: GO 69203
// for i in tmp do
69174: LD_ADDR_VAR 0 1
69178: PUSH
69179: LD_VAR 0 2
69183: PUSH
69184: FOR_IN
69185: IFFALSE 69201
// begin SetLives ( i , 0 ) ;
69187: LD_VAR 0 1
69191: PPUSH
69192: LD_INT 0
69194: PPUSH
69195: CALL_OW 234
// end ;
69199: GO 69184
69201: POP
69202: POP
// end ;
69203: PPOPN 2
69205: END
// every 0 0$1 trigger StreamModeActive and sBunker do
69206: LD_EXP 77
69210: PUSH
69211: LD_EXP 87
69215: AND
69216: IFFALSE 69236
69218: GO 69220
69220: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
69221: LD_INT 32
69223: PPUSH
69224: LD_OWVAR 2
69228: PPUSH
69229: LD_INT 0
69231: PPUSH
69232: CALL_OW 324
69236: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
69237: LD_EXP 77
69241: PUSH
69242: LD_EXP 88
69246: AND
69247: IFFALSE 69428
69249: GO 69251
69251: DISABLE
69252: LD_INT 0
69254: PPUSH
69255: PPUSH
69256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
69257: LD_ADDR_VAR 0 2
69261: PUSH
69262: LD_INT 22
69264: PUSH
69265: LD_OWVAR 2
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 33
69276: PUSH
69277: LD_INT 3
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PPUSH
69288: CALL_OW 69
69292: ST_TO_ADDR
// if not tmp then
69293: LD_VAR 0 2
69297: NOT
69298: IFFALSE 69302
// exit ;
69300: GO 69428
// side := 0 ;
69302: LD_ADDR_VAR 0 3
69306: PUSH
69307: LD_INT 0
69309: ST_TO_ADDR
// for i := 1 to 8 do
69310: LD_ADDR_VAR 0 1
69314: PUSH
69315: DOUBLE
69316: LD_INT 1
69318: DEC
69319: ST_TO_ADDR
69320: LD_INT 8
69322: PUSH
69323: FOR_TO
69324: IFFALSE 69372
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
69326: LD_OWVAR 2
69330: PUSH
69331: LD_VAR 0 1
69335: NONEQUAL
69336: PUSH
69337: LD_OWVAR 2
69341: PPUSH
69342: LD_VAR 0 1
69346: PPUSH
69347: CALL_OW 81
69351: PUSH
69352: LD_INT 2
69354: EQUAL
69355: AND
69356: IFFALSE 69370
// begin side := i ;
69358: LD_ADDR_VAR 0 3
69362: PUSH
69363: LD_VAR 0 1
69367: ST_TO_ADDR
// break ;
69368: GO 69372
// end ;
69370: GO 69323
69372: POP
69373: POP
// if not side then
69374: LD_VAR 0 3
69378: NOT
69379: IFFALSE 69383
// exit ;
69381: GO 69428
// for i := 1 to tmp do
69383: LD_ADDR_VAR 0 1
69387: PUSH
69388: DOUBLE
69389: LD_INT 1
69391: DEC
69392: ST_TO_ADDR
69393: LD_VAR 0 2
69397: PUSH
69398: FOR_TO
69399: IFFALSE 69426
// if Prob ( 60 ) then
69401: LD_INT 60
69403: PPUSH
69404: CALL_OW 13
69408: IFFALSE 69424
// SetSide ( i , side ) ;
69410: LD_VAR 0 1
69414: PPUSH
69415: LD_VAR 0 3
69419: PPUSH
69420: CALL_OW 235
69424: GO 69398
69426: POP
69427: POP
// end ;
69428: PPOPN 3
69430: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
69431: LD_EXP 77
69435: PUSH
69436: LD_EXP 90
69440: AND
69441: IFFALSE 69560
69443: GO 69445
69445: DISABLE
69446: LD_INT 0
69448: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
69449: LD_ADDR_VAR 0 1
69453: PUSH
69454: LD_INT 22
69456: PUSH
69457: LD_OWVAR 2
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 21
69468: PUSH
69469: LD_INT 1
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 3
69478: PUSH
69479: LD_INT 23
69481: PUSH
69482: LD_INT 0
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: LIST
69497: PPUSH
69498: CALL_OW 69
69502: PUSH
69503: FOR_IN
69504: IFFALSE 69558
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
69506: LD_VAR 0 1
69510: PPUSH
69511: CALL_OW 257
69515: PUSH
69516: LD_INT 1
69518: PUSH
69519: LD_INT 2
69521: PUSH
69522: LD_INT 3
69524: PUSH
69525: LD_INT 4
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: IN
69534: IFFALSE 69556
// SetClass ( un , rand ( 1 , 4 ) ) ;
69536: LD_VAR 0 1
69540: PPUSH
69541: LD_INT 1
69543: PPUSH
69544: LD_INT 4
69546: PPUSH
69547: CALL_OW 12
69551: PPUSH
69552: CALL_OW 336
69556: GO 69503
69558: POP
69559: POP
// end ;
69560: PPOPN 1
69562: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
69563: LD_EXP 77
69567: PUSH
69568: LD_EXP 89
69572: AND
69573: IFFALSE 69652
69575: GO 69577
69577: DISABLE
69578: LD_INT 0
69580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69581: LD_ADDR_VAR 0 1
69585: PUSH
69586: LD_INT 22
69588: PUSH
69589: LD_OWVAR 2
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 21
69600: PUSH
69601: LD_INT 3
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PPUSH
69612: CALL_OW 69
69616: ST_TO_ADDR
// if not tmp then
69617: LD_VAR 0 1
69621: NOT
69622: IFFALSE 69626
// exit ;
69624: GO 69652
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
69626: LD_VAR 0 1
69630: PUSH
69631: LD_INT 1
69633: PPUSH
69634: LD_VAR 0 1
69638: PPUSH
69639: CALL_OW 12
69643: ARRAY
69644: PPUSH
69645: LD_INT 100
69647: PPUSH
69648: CALL_OW 234
// end ;
69652: PPOPN 1
69654: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
69655: LD_EXP 77
69659: PUSH
69660: LD_EXP 91
69664: AND
69665: IFFALSE 69763
69667: GO 69669
69669: DISABLE
69670: LD_INT 0
69672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69673: LD_ADDR_VAR 0 1
69677: PUSH
69678: LD_INT 22
69680: PUSH
69681: LD_OWVAR 2
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 21
69692: PUSH
69693: LD_INT 1
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PPUSH
69704: CALL_OW 69
69708: ST_TO_ADDR
// if not tmp then
69709: LD_VAR 0 1
69713: NOT
69714: IFFALSE 69718
// exit ;
69716: GO 69763
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
69718: LD_VAR 0 1
69722: PUSH
69723: LD_INT 1
69725: PPUSH
69726: LD_VAR 0 1
69730: PPUSH
69731: CALL_OW 12
69735: ARRAY
69736: PPUSH
69737: LD_INT 1
69739: PPUSH
69740: LD_INT 4
69742: PPUSH
69743: CALL_OW 12
69747: PPUSH
69748: LD_INT 3000
69750: PPUSH
69751: LD_INT 9000
69753: PPUSH
69754: CALL_OW 12
69758: PPUSH
69759: CALL_OW 492
// end ;
69763: PPOPN 1
69765: END
// every 0 0$1 trigger StreamModeActive and sDepot do
69766: LD_EXP 77
69770: PUSH
69771: LD_EXP 92
69775: AND
69776: IFFALSE 69796
69778: GO 69780
69780: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
69781: LD_INT 1
69783: PPUSH
69784: LD_OWVAR 2
69788: PPUSH
69789: LD_INT 0
69791: PPUSH
69792: CALL_OW 324
69796: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
69797: LD_EXP 77
69801: PUSH
69802: LD_EXP 93
69806: AND
69807: IFFALSE 69890
69809: GO 69811
69811: DISABLE
69812: LD_INT 0
69814: PPUSH
69815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69816: LD_ADDR_VAR 0 2
69820: PUSH
69821: LD_INT 22
69823: PUSH
69824: LD_OWVAR 2
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 21
69835: PUSH
69836: LD_INT 3
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PPUSH
69847: CALL_OW 69
69851: ST_TO_ADDR
// if not tmp then
69852: LD_VAR 0 2
69856: NOT
69857: IFFALSE 69861
// exit ;
69859: GO 69890
// for i in tmp do
69861: LD_ADDR_VAR 0 1
69865: PUSH
69866: LD_VAR 0 2
69870: PUSH
69871: FOR_IN
69872: IFFALSE 69888
// SetBLevel ( i , 10 ) ;
69874: LD_VAR 0 1
69878: PPUSH
69879: LD_INT 10
69881: PPUSH
69882: CALL_OW 241
69886: GO 69871
69888: POP
69889: POP
// end ;
69890: PPOPN 2
69892: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
69893: LD_EXP 77
69897: PUSH
69898: LD_EXP 94
69902: AND
69903: IFFALSE 70014
69905: GO 69907
69907: DISABLE
69908: LD_INT 0
69910: PPUSH
69911: PPUSH
69912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69913: LD_ADDR_VAR 0 3
69917: PUSH
69918: LD_INT 22
69920: PUSH
69921: LD_OWVAR 2
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 25
69932: PUSH
69933: LD_INT 1
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PPUSH
69944: CALL_OW 69
69948: ST_TO_ADDR
// if not tmp then
69949: LD_VAR 0 3
69953: NOT
69954: IFFALSE 69958
// exit ;
69956: GO 70014
// un := tmp [ rand ( 1 , tmp ) ] ;
69958: LD_ADDR_VAR 0 2
69962: PUSH
69963: LD_VAR 0 3
69967: PUSH
69968: LD_INT 1
69970: PPUSH
69971: LD_VAR 0 3
69975: PPUSH
69976: CALL_OW 12
69980: ARRAY
69981: ST_TO_ADDR
// if Crawls ( un ) then
69982: LD_VAR 0 2
69986: PPUSH
69987: CALL_OW 318
69991: IFFALSE 70002
// ComWalk ( un ) ;
69993: LD_VAR 0 2
69997: PPUSH
69998: CALL_OW 138
// SetClass ( un , class_sniper ) ;
70002: LD_VAR 0 2
70006: PPUSH
70007: LD_INT 5
70009: PPUSH
70010: CALL_OW 336
// end ;
70014: PPOPN 3
70016: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
70017: LD_EXP 77
70021: PUSH
70022: LD_EXP 95
70026: AND
70027: PUSH
70028: LD_OWVAR 67
70032: PUSH
70033: LD_INT 3
70035: LESS
70036: AND
70037: IFFALSE 70056
70039: GO 70041
70041: DISABLE
// Difficulty := Difficulty + 1 ;
70042: LD_ADDR_OWVAR 67
70046: PUSH
70047: LD_OWVAR 67
70051: PUSH
70052: LD_INT 1
70054: PLUS
70055: ST_TO_ADDR
70056: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
70057: LD_EXP 77
70061: PUSH
70062: LD_EXP 96
70066: AND
70067: IFFALSE 70170
70069: GO 70071
70071: DISABLE
70072: LD_INT 0
70074: PPUSH
// begin for i := 1 to 5 do
70075: LD_ADDR_VAR 0 1
70079: PUSH
70080: DOUBLE
70081: LD_INT 1
70083: DEC
70084: ST_TO_ADDR
70085: LD_INT 5
70087: PUSH
70088: FOR_TO
70089: IFFALSE 70168
// begin uc_nation := nation_nature ;
70091: LD_ADDR_OWVAR 21
70095: PUSH
70096: LD_INT 0
70098: ST_TO_ADDR
// uc_side := 0 ;
70099: LD_ADDR_OWVAR 20
70103: PUSH
70104: LD_INT 0
70106: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
70107: LD_ADDR_OWVAR 29
70111: PUSH
70112: LD_INT 12
70114: PUSH
70115: LD_INT 12
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: ST_TO_ADDR
// hc_agressivity := 20 ;
70122: LD_ADDR_OWVAR 35
70126: PUSH
70127: LD_INT 20
70129: ST_TO_ADDR
// hc_class := class_tiger ;
70130: LD_ADDR_OWVAR 28
70134: PUSH
70135: LD_INT 14
70137: ST_TO_ADDR
// hc_gallery :=  ;
70138: LD_ADDR_OWVAR 33
70142: PUSH
70143: LD_STRING 
70145: ST_TO_ADDR
// hc_name :=  ;
70146: LD_ADDR_OWVAR 26
70150: PUSH
70151: LD_STRING 
70153: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
70154: CALL_OW 44
70158: PPUSH
70159: LD_INT 0
70161: PPUSH
70162: CALL_OW 51
// end ;
70166: GO 70088
70168: POP
70169: POP
// end ;
70170: PPOPN 1
70172: END
// every 0 0$1 trigger StreamModeActive and sBomb do
70173: LD_EXP 77
70177: PUSH
70178: LD_EXP 97
70182: AND
70183: IFFALSE 70192
70185: GO 70187
70187: DISABLE
// StreamSibBomb ;
70188: CALL 70193 0 0
70192: END
// export function StreamSibBomb ; var i , x , y ; begin
70193: LD_INT 0
70195: PPUSH
70196: PPUSH
70197: PPUSH
70198: PPUSH
// result := false ;
70199: LD_ADDR_VAR 0 1
70203: PUSH
70204: LD_INT 0
70206: ST_TO_ADDR
// for i := 1 to 16 do
70207: LD_ADDR_VAR 0 2
70211: PUSH
70212: DOUBLE
70213: LD_INT 1
70215: DEC
70216: ST_TO_ADDR
70217: LD_INT 16
70219: PUSH
70220: FOR_TO
70221: IFFALSE 70420
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70223: LD_ADDR_VAR 0 3
70227: PUSH
70228: LD_INT 10
70230: PUSH
70231: LD_INT 20
70233: PUSH
70234: LD_INT 30
70236: PUSH
70237: LD_INT 40
70239: PUSH
70240: LD_INT 50
70242: PUSH
70243: LD_INT 60
70245: PUSH
70246: LD_INT 70
70248: PUSH
70249: LD_INT 80
70251: PUSH
70252: LD_INT 90
70254: PUSH
70255: LD_INT 100
70257: PUSH
70258: LD_INT 110
70260: PUSH
70261: LD_INT 120
70263: PUSH
70264: LD_INT 130
70266: PUSH
70267: LD_INT 140
70269: PUSH
70270: LD_INT 150
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 1
70292: PPUSH
70293: LD_INT 15
70295: PPUSH
70296: CALL_OW 12
70300: ARRAY
70301: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70302: LD_ADDR_VAR 0 4
70306: PUSH
70307: LD_INT 10
70309: PUSH
70310: LD_INT 20
70312: PUSH
70313: LD_INT 30
70315: PUSH
70316: LD_INT 40
70318: PUSH
70319: LD_INT 50
70321: PUSH
70322: LD_INT 60
70324: PUSH
70325: LD_INT 70
70327: PUSH
70328: LD_INT 80
70330: PUSH
70331: LD_INT 90
70333: PUSH
70334: LD_INT 100
70336: PUSH
70337: LD_INT 110
70339: PUSH
70340: LD_INT 120
70342: PUSH
70343: LD_INT 130
70345: PUSH
70346: LD_INT 140
70348: PUSH
70349: LD_INT 150
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 1
70371: PPUSH
70372: LD_INT 15
70374: PPUSH
70375: CALL_OW 12
70379: ARRAY
70380: ST_TO_ADDR
// if ValidHex ( x , y ) then
70381: LD_VAR 0 3
70385: PPUSH
70386: LD_VAR 0 4
70390: PPUSH
70391: CALL_OW 488
70395: IFFALSE 70418
// begin result := [ x , y ] ;
70397: LD_ADDR_VAR 0 1
70401: PUSH
70402: LD_VAR 0 3
70406: PUSH
70407: LD_VAR 0 4
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: ST_TO_ADDR
// break ;
70416: GO 70420
// end ; end ;
70418: GO 70220
70420: POP
70421: POP
// if result then
70422: LD_VAR 0 1
70426: IFFALSE 70486
// begin ToLua ( playSibBomb() ) ;
70428: LD_STRING playSibBomb()
70430: PPUSH
70431: CALL_OW 559
// wait ( 0 0$14 ) ;
70435: LD_INT 490
70437: PPUSH
70438: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
70442: LD_VAR 0 1
70446: PUSH
70447: LD_INT 1
70449: ARRAY
70450: PPUSH
70451: LD_VAR 0 1
70455: PUSH
70456: LD_INT 2
70458: ARRAY
70459: PPUSH
70460: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
70464: LD_VAR 0 1
70468: PUSH
70469: LD_INT 1
70471: ARRAY
70472: PPUSH
70473: LD_VAR 0 1
70477: PUSH
70478: LD_INT 2
70480: ARRAY
70481: PPUSH
70482: CALL_OW 429
// end ; end ;
70486: LD_VAR 0 1
70490: RET
// every 0 0$1 trigger StreamModeActive and sReset do
70491: LD_EXP 77
70495: PUSH
70496: LD_EXP 99
70500: AND
70501: IFFALSE 70513
70503: GO 70505
70505: DISABLE
// YouLost (  ) ;
70506: LD_STRING 
70508: PPUSH
70509: CALL_OW 104
70513: END
// every 0 0$1 trigger StreamModeActive and sFog do
70514: LD_EXP 77
70518: PUSH
70519: LD_EXP 98
70523: AND
70524: IFFALSE 70538
70526: GO 70528
70528: DISABLE
// FogOff ( your_side ) ;
70529: LD_OWVAR 2
70533: PPUSH
70534: CALL_OW 344
70538: END
// every 0 0$1 trigger StreamModeActive and sSun do
70539: LD_EXP 77
70543: PUSH
70544: LD_EXP 100
70548: AND
70549: IFFALSE 70577
70551: GO 70553
70553: DISABLE
// begin solar_recharge_percent := 0 ;
70554: LD_ADDR_OWVAR 79
70558: PUSH
70559: LD_INT 0
70561: ST_TO_ADDR
// wait ( 5 5$00 ) ;
70562: LD_INT 10500
70564: PPUSH
70565: CALL_OW 67
// solar_recharge_percent := 100 ;
70569: LD_ADDR_OWVAR 79
70573: PUSH
70574: LD_INT 100
70576: ST_TO_ADDR
// end ;
70577: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
70578: LD_EXP 77
70582: PUSH
70583: LD_EXP 101
70587: AND
70588: IFFALSE 70827
70590: GO 70592
70592: DISABLE
70593: LD_INT 0
70595: PPUSH
70596: PPUSH
70597: PPUSH
// begin tmp := [ ] ;
70598: LD_ADDR_VAR 0 3
70602: PUSH
70603: EMPTY
70604: ST_TO_ADDR
// for i := 1 to 6 do
70605: LD_ADDR_VAR 0 1
70609: PUSH
70610: DOUBLE
70611: LD_INT 1
70613: DEC
70614: ST_TO_ADDR
70615: LD_INT 6
70617: PUSH
70618: FOR_TO
70619: IFFALSE 70724
// begin uc_nation := nation_nature ;
70621: LD_ADDR_OWVAR 21
70625: PUSH
70626: LD_INT 0
70628: ST_TO_ADDR
// uc_side := 0 ;
70629: LD_ADDR_OWVAR 20
70633: PUSH
70634: LD_INT 0
70636: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
70637: LD_ADDR_OWVAR 29
70641: PUSH
70642: LD_INT 12
70644: PUSH
70645: LD_INT 12
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: ST_TO_ADDR
// hc_agressivity := 20 ;
70652: LD_ADDR_OWVAR 35
70656: PUSH
70657: LD_INT 20
70659: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
70660: LD_ADDR_OWVAR 28
70664: PUSH
70665: LD_INT 17
70667: ST_TO_ADDR
// hc_gallery :=  ;
70668: LD_ADDR_OWVAR 33
70672: PUSH
70673: LD_STRING 
70675: ST_TO_ADDR
// hc_name :=  ;
70676: LD_ADDR_OWVAR 26
70680: PUSH
70681: LD_STRING 
70683: ST_TO_ADDR
// un := CreateHuman ;
70684: LD_ADDR_VAR 0 2
70688: PUSH
70689: CALL_OW 44
70693: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
70694: LD_VAR 0 2
70698: PPUSH
70699: LD_INT 1
70701: PPUSH
70702: CALL_OW 51
// tmp := tmp ^ un ;
70706: LD_ADDR_VAR 0 3
70710: PUSH
70711: LD_VAR 0 3
70715: PUSH
70716: LD_VAR 0 2
70720: ADD
70721: ST_TO_ADDR
// end ;
70722: GO 70618
70724: POP
70725: POP
// repeat wait ( 0 0$1 ) ;
70726: LD_INT 35
70728: PPUSH
70729: CALL_OW 67
// for un in tmp do
70733: LD_ADDR_VAR 0 2
70737: PUSH
70738: LD_VAR 0 3
70742: PUSH
70743: FOR_IN
70744: IFFALSE 70818
// begin if IsDead ( un ) then
70746: LD_VAR 0 2
70750: PPUSH
70751: CALL_OW 301
70755: IFFALSE 70775
// begin tmp := tmp diff un ;
70757: LD_ADDR_VAR 0 3
70761: PUSH
70762: LD_VAR 0 3
70766: PUSH
70767: LD_VAR 0 2
70771: DIFF
70772: ST_TO_ADDR
// continue ;
70773: GO 70743
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
70775: LD_VAR 0 2
70779: PPUSH
70780: LD_INT 3
70782: PUSH
70783: LD_INT 22
70785: PUSH
70786: LD_INT 0
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PPUSH
70797: CALL_OW 69
70801: PPUSH
70802: LD_VAR 0 2
70806: PPUSH
70807: CALL_OW 74
70811: PPUSH
70812: CALL_OW 115
// end ;
70816: GO 70743
70818: POP
70819: POP
// until not tmp ;
70820: LD_VAR 0 3
70824: NOT
70825: IFFALSE 70726
// end ;
70827: PPOPN 3
70829: END
// every 0 0$1 trigger StreamModeActive and sTroll do
70830: LD_EXP 77
70834: PUSH
70835: LD_EXP 102
70839: AND
70840: IFFALSE 70894
70842: GO 70844
70844: DISABLE
// begin ToLua ( displayTroll(); ) ;
70845: LD_STRING displayTroll();
70847: PPUSH
70848: CALL_OW 559
// wait ( 3 3$00 ) ;
70852: LD_INT 6300
70854: PPUSH
70855: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70859: LD_STRING hideTroll();
70861: PPUSH
70862: CALL_OW 559
// wait ( 1 1$00 ) ;
70866: LD_INT 2100
70868: PPUSH
70869: CALL_OW 67
// ToLua ( displayTroll(); ) ;
70873: LD_STRING displayTroll();
70875: PPUSH
70876: CALL_OW 559
// wait ( 1 1$00 ) ;
70880: LD_INT 2100
70882: PPUSH
70883: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70887: LD_STRING hideTroll();
70889: PPUSH
70890: CALL_OW 559
// end ;
70894: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
70895: LD_EXP 77
70899: PUSH
70900: LD_EXP 103
70904: AND
70905: IFFALSE 70968
70907: GO 70909
70909: DISABLE
70910: LD_INT 0
70912: PPUSH
// begin p := 0 ;
70913: LD_ADDR_VAR 0 1
70917: PUSH
70918: LD_INT 0
70920: ST_TO_ADDR
// repeat game_speed := 1 ;
70921: LD_ADDR_OWVAR 65
70925: PUSH
70926: LD_INT 1
70928: ST_TO_ADDR
// wait ( 0 0$1 ) ;
70929: LD_INT 35
70931: PPUSH
70932: CALL_OW 67
// p := p + 1 ;
70936: LD_ADDR_VAR 0 1
70940: PUSH
70941: LD_VAR 0 1
70945: PUSH
70946: LD_INT 1
70948: PLUS
70949: ST_TO_ADDR
// until p >= 60 ;
70950: LD_VAR 0 1
70954: PUSH
70955: LD_INT 60
70957: GREATEREQUAL
70958: IFFALSE 70921
// game_speed := 4 ;
70960: LD_ADDR_OWVAR 65
70964: PUSH
70965: LD_INT 4
70967: ST_TO_ADDR
// end ;
70968: PPOPN 1
70970: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
70971: LD_EXP 77
70975: PUSH
70976: LD_EXP 104
70980: AND
70981: IFFALSE 71127
70983: GO 70985
70985: DISABLE
70986: LD_INT 0
70988: PPUSH
70989: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70990: LD_ADDR_VAR 0 1
70994: PUSH
70995: LD_INT 22
70997: PUSH
70998: LD_OWVAR 2
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: PUSH
71007: LD_INT 2
71009: PUSH
71010: LD_INT 30
71012: PUSH
71013: LD_INT 0
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 30
71022: PUSH
71023: LD_INT 1
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: LIST
71034: PUSH
71035: EMPTY
71036: LIST
71037: LIST
71038: PPUSH
71039: CALL_OW 69
71043: ST_TO_ADDR
// if not depot then
71044: LD_VAR 0 1
71048: NOT
71049: IFFALSE 71053
// exit ;
71051: GO 71127
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
71053: LD_ADDR_VAR 0 2
71057: PUSH
71058: LD_VAR 0 1
71062: PUSH
71063: LD_INT 1
71065: PPUSH
71066: LD_VAR 0 1
71070: PPUSH
71071: CALL_OW 12
71075: ARRAY
71076: PPUSH
71077: CALL_OW 274
71081: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
71082: LD_VAR 0 2
71086: PPUSH
71087: LD_INT 1
71089: PPUSH
71090: LD_INT 0
71092: PPUSH
71093: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
71097: LD_VAR 0 2
71101: PPUSH
71102: LD_INT 2
71104: PPUSH
71105: LD_INT 0
71107: PPUSH
71108: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
71112: LD_VAR 0 2
71116: PPUSH
71117: LD_INT 3
71119: PPUSH
71120: LD_INT 0
71122: PPUSH
71123: CALL_OW 277
// end ;
71127: PPOPN 2
71129: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
71130: LD_EXP 77
71134: PUSH
71135: LD_EXP 105
71139: AND
71140: IFFALSE 71237
71142: GO 71144
71144: DISABLE
71145: LD_INT 0
71147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71148: LD_ADDR_VAR 0 1
71152: PUSH
71153: LD_INT 22
71155: PUSH
71156: LD_OWVAR 2
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: PUSH
71165: LD_INT 21
71167: PUSH
71168: LD_INT 1
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PUSH
71175: LD_INT 3
71177: PUSH
71178: LD_INT 23
71180: PUSH
71181: LD_INT 0
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: LIST
71196: PPUSH
71197: CALL_OW 69
71201: ST_TO_ADDR
// if not tmp then
71202: LD_VAR 0 1
71206: NOT
71207: IFFALSE 71211
// exit ;
71209: GO 71237
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
71211: LD_VAR 0 1
71215: PUSH
71216: LD_INT 1
71218: PPUSH
71219: LD_VAR 0 1
71223: PPUSH
71224: CALL_OW 12
71228: ARRAY
71229: PPUSH
71230: LD_INT 200
71232: PPUSH
71233: CALL_OW 234
// end ;
71237: PPOPN 1
71239: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
71240: LD_EXP 77
71244: PUSH
71245: LD_EXP 106
71249: AND
71250: IFFALSE 71329
71252: GO 71254
71254: DISABLE
71255: LD_INT 0
71257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
71258: LD_ADDR_VAR 0 1
71262: PUSH
71263: LD_INT 22
71265: PUSH
71266: LD_OWVAR 2
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: LD_INT 21
71277: PUSH
71278: LD_INT 2
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PPUSH
71289: CALL_OW 69
71293: ST_TO_ADDR
// if not tmp then
71294: LD_VAR 0 1
71298: NOT
71299: IFFALSE 71303
// exit ;
71301: GO 71329
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
71303: LD_VAR 0 1
71307: PUSH
71308: LD_INT 1
71310: PPUSH
71311: LD_VAR 0 1
71315: PPUSH
71316: CALL_OW 12
71320: ARRAY
71321: PPUSH
71322: LD_INT 60
71324: PPUSH
71325: CALL_OW 234
// end ;
71329: PPOPN 1
71331: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
71332: LD_EXP 77
71336: PUSH
71337: LD_EXP 107
71341: AND
71342: IFFALSE 71441
71344: GO 71346
71346: DISABLE
71347: LD_INT 0
71349: PPUSH
71350: PPUSH
// begin enable ;
71351: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
71352: LD_ADDR_VAR 0 1
71356: PUSH
71357: LD_INT 22
71359: PUSH
71360: LD_OWVAR 2
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 61
71371: PUSH
71372: EMPTY
71373: LIST
71374: PUSH
71375: LD_INT 33
71377: PUSH
71378: LD_INT 2
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: LIST
71389: PPUSH
71390: CALL_OW 69
71394: ST_TO_ADDR
// if not tmp then
71395: LD_VAR 0 1
71399: NOT
71400: IFFALSE 71404
// exit ;
71402: GO 71441
// for i in tmp do
71404: LD_ADDR_VAR 0 2
71408: PUSH
71409: LD_VAR 0 1
71413: PUSH
71414: FOR_IN
71415: IFFALSE 71439
// if IsControledBy ( i ) then
71417: LD_VAR 0 2
71421: PPUSH
71422: CALL_OW 312
71426: IFFALSE 71437
// ComUnlink ( i ) ;
71428: LD_VAR 0 2
71432: PPUSH
71433: CALL_OW 136
71437: GO 71414
71439: POP
71440: POP
// end ;
71441: PPOPN 2
71443: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
71444: LD_EXP 77
71448: PUSH
71449: LD_EXP 108
71453: AND
71454: IFFALSE 71594
71456: GO 71458
71458: DISABLE
71459: LD_INT 0
71461: PPUSH
71462: PPUSH
// begin ToLua ( displayPowell(); ) ;
71463: LD_STRING displayPowell();
71465: PPUSH
71466: CALL_OW 559
// uc_side := 0 ;
71470: LD_ADDR_OWVAR 20
71474: PUSH
71475: LD_INT 0
71477: ST_TO_ADDR
// uc_nation := 2 ;
71478: LD_ADDR_OWVAR 21
71482: PUSH
71483: LD_INT 2
71485: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
71486: LD_ADDR_OWVAR 37
71490: PUSH
71491: LD_INT 14
71493: ST_TO_ADDR
// vc_engine := engine_siberite ;
71494: LD_ADDR_OWVAR 39
71498: PUSH
71499: LD_INT 3
71501: ST_TO_ADDR
// vc_control := control_apeman ;
71502: LD_ADDR_OWVAR 38
71506: PUSH
71507: LD_INT 5
71509: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
71510: LD_ADDR_OWVAR 40
71514: PUSH
71515: LD_INT 29
71517: ST_TO_ADDR
// un := CreateVehicle ;
71518: LD_ADDR_VAR 0 2
71522: PUSH
71523: CALL_OW 45
71527: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71528: LD_VAR 0 2
71532: PPUSH
71533: LD_INT 1
71535: PPUSH
71536: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71540: LD_INT 35
71542: PPUSH
71543: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71547: LD_VAR 0 2
71551: PPUSH
71552: LD_INT 22
71554: PUSH
71555: LD_OWVAR 2
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PPUSH
71564: CALL_OW 69
71568: PPUSH
71569: LD_VAR 0 2
71573: PPUSH
71574: CALL_OW 74
71578: PPUSH
71579: CALL_OW 115
// until IsDead ( un ) ;
71583: LD_VAR 0 2
71587: PPUSH
71588: CALL_OW 301
71592: IFFALSE 71540
// end ;
71594: PPOPN 2
71596: END
// every 0 0$1 trigger StreamModeActive and sStu do
71597: LD_EXP 77
71601: PUSH
71602: LD_EXP 116
71606: AND
71607: IFFALSE 71623
71609: GO 71611
71611: DISABLE
// begin ToLua ( displayStucuk(); ) ;
71612: LD_STRING displayStucuk();
71614: PPUSH
71615: CALL_OW 559
// ResetFog ;
71619: CALL_OW 335
// end ;
71623: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
71624: LD_EXP 77
71628: PUSH
71629: LD_EXP 109
71633: AND
71634: IFFALSE 71775
71636: GO 71638
71638: DISABLE
71639: LD_INT 0
71641: PPUSH
71642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71643: LD_ADDR_VAR 0 2
71647: PUSH
71648: LD_INT 22
71650: PUSH
71651: LD_OWVAR 2
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 21
71662: PUSH
71663: LD_INT 1
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PPUSH
71674: CALL_OW 69
71678: ST_TO_ADDR
// if not tmp then
71679: LD_VAR 0 2
71683: NOT
71684: IFFALSE 71688
// exit ;
71686: GO 71775
// un := tmp [ rand ( 1 , tmp ) ] ;
71688: LD_ADDR_VAR 0 1
71692: PUSH
71693: LD_VAR 0 2
71697: PUSH
71698: LD_INT 1
71700: PPUSH
71701: LD_VAR 0 2
71705: PPUSH
71706: CALL_OW 12
71710: ARRAY
71711: ST_TO_ADDR
// SetSide ( un , 0 ) ;
71712: LD_VAR 0 1
71716: PPUSH
71717: LD_INT 0
71719: PPUSH
71720: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
71724: LD_VAR 0 1
71728: PPUSH
71729: LD_OWVAR 3
71733: PUSH
71734: LD_VAR 0 1
71738: DIFF
71739: PPUSH
71740: LD_VAR 0 1
71744: PPUSH
71745: CALL_OW 74
71749: PPUSH
71750: CALL_OW 115
// wait ( 0 0$20 ) ;
71754: LD_INT 700
71756: PPUSH
71757: CALL_OW 67
// SetSide ( un , your_side ) ;
71761: LD_VAR 0 1
71765: PPUSH
71766: LD_OWVAR 2
71770: PPUSH
71771: CALL_OW 235
// end ;
71775: PPOPN 2
71777: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
71778: LD_EXP 77
71782: PUSH
71783: LD_EXP 110
71787: AND
71788: IFFALSE 71894
71790: GO 71792
71792: DISABLE
71793: LD_INT 0
71795: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71796: LD_ADDR_VAR 0 1
71800: PUSH
71801: LD_INT 22
71803: PUSH
71804: LD_OWVAR 2
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: PUSH
71813: LD_INT 2
71815: PUSH
71816: LD_INT 30
71818: PUSH
71819: LD_INT 0
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PUSH
71826: LD_INT 30
71828: PUSH
71829: LD_INT 1
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PUSH
71836: EMPTY
71837: LIST
71838: LIST
71839: LIST
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: PPUSH
71845: CALL_OW 69
71849: ST_TO_ADDR
// if not depot then
71850: LD_VAR 0 1
71854: NOT
71855: IFFALSE 71859
// exit ;
71857: GO 71894
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
71859: LD_VAR 0 1
71863: PUSH
71864: LD_INT 1
71866: ARRAY
71867: PPUSH
71868: CALL_OW 250
71872: PPUSH
71873: LD_VAR 0 1
71877: PUSH
71878: LD_INT 1
71880: ARRAY
71881: PPUSH
71882: CALL_OW 251
71886: PPUSH
71887: LD_INT 70
71889: PPUSH
71890: CALL_OW 495
// end ;
71894: PPOPN 1
71896: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
71897: LD_EXP 77
71901: PUSH
71902: LD_EXP 111
71906: AND
71907: IFFALSE 72118
71909: GO 71911
71911: DISABLE
71912: LD_INT 0
71914: PPUSH
71915: PPUSH
71916: PPUSH
71917: PPUSH
71918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71919: LD_ADDR_VAR 0 5
71923: PUSH
71924: LD_INT 22
71926: PUSH
71927: LD_OWVAR 2
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PUSH
71936: LD_INT 21
71938: PUSH
71939: LD_INT 1
71941: PUSH
71942: EMPTY
71943: LIST
71944: LIST
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PPUSH
71950: CALL_OW 69
71954: ST_TO_ADDR
// if not tmp then
71955: LD_VAR 0 5
71959: NOT
71960: IFFALSE 71964
// exit ;
71962: GO 72118
// for i in tmp do
71964: LD_ADDR_VAR 0 1
71968: PUSH
71969: LD_VAR 0 5
71973: PUSH
71974: FOR_IN
71975: IFFALSE 72116
// begin d := rand ( 0 , 5 ) ;
71977: LD_ADDR_VAR 0 4
71981: PUSH
71982: LD_INT 0
71984: PPUSH
71985: LD_INT 5
71987: PPUSH
71988: CALL_OW 12
71992: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
71993: LD_ADDR_VAR 0 2
71997: PUSH
71998: LD_VAR 0 1
72002: PPUSH
72003: CALL_OW 250
72007: PPUSH
72008: LD_VAR 0 4
72012: PPUSH
72013: LD_INT 3
72015: PPUSH
72016: LD_INT 12
72018: PPUSH
72019: CALL_OW 12
72023: PPUSH
72024: CALL_OW 272
72028: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
72029: LD_ADDR_VAR 0 3
72033: PUSH
72034: LD_VAR 0 1
72038: PPUSH
72039: CALL_OW 251
72043: PPUSH
72044: LD_VAR 0 4
72048: PPUSH
72049: LD_INT 3
72051: PPUSH
72052: LD_INT 12
72054: PPUSH
72055: CALL_OW 12
72059: PPUSH
72060: CALL_OW 273
72064: ST_TO_ADDR
// if ValidHex ( x , y ) then
72065: LD_VAR 0 2
72069: PPUSH
72070: LD_VAR 0 3
72074: PPUSH
72075: CALL_OW 488
72079: IFFALSE 72114
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
72081: LD_VAR 0 1
72085: PPUSH
72086: LD_VAR 0 2
72090: PPUSH
72091: LD_VAR 0 3
72095: PPUSH
72096: LD_INT 3
72098: PPUSH
72099: LD_INT 6
72101: PPUSH
72102: CALL_OW 12
72106: PPUSH
72107: LD_INT 1
72109: PPUSH
72110: CALL_OW 483
// end ;
72114: GO 71974
72116: POP
72117: POP
// end ;
72118: PPOPN 5
72120: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
72121: LD_EXP 77
72125: PUSH
72126: LD_EXP 112
72130: AND
72131: IFFALSE 72225
72133: GO 72135
72135: DISABLE
72136: LD_INT 0
72138: PPUSH
72139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
72140: LD_ADDR_VAR 0 2
72144: PUSH
72145: LD_INT 22
72147: PUSH
72148: LD_OWVAR 2
72152: PUSH
72153: EMPTY
72154: LIST
72155: LIST
72156: PUSH
72157: LD_INT 32
72159: PUSH
72160: LD_INT 1
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: PUSH
72167: LD_INT 21
72169: PUSH
72170: LD_INT 2
72172: PUSH
72173: EMPTY
72174: LIST
72175: LIST
72176: PUSH
72177: EMPTY
72178: LIST
72179: LIST
72180: LIST
72181: PPUSH
72182: CALL_OW 69
72186: ST_TO_ADDR
// if not tmp then
72187: LD_VAR 0 2
72191: NOT
72192: IFFALSE 72196
// exit ;
72194: GO 72225
// for i in tmp do
72196: LD_ADDR_VAR 0 1
72200: PUSH
72201: LD_VAR 0 2
72205: PUSH
72206: FOR_IN
72207: IFFALSE 72223
// SetFuel ( i , 0 ) ;
72209: LD_VAR 0 1
72213: PPUSH
72214: LD_INT 0
72216: PPUSH
72217: CALL_OW 240
72221: GO 72206
72223: POP
72224: POP
// end ;
72225: PPOPN 2
72227: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
72228: LD_EXP 77
72232: PUSH
72233: LD_EXP 113
72237: AND
72238: IFFALSE 72304
72240: GO 72242
72242: DISABLE
72243: LD_INT 0
72245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72246: LD_ADDR_VAR 0 1
72250: PUSH
72251: LD_INT 22
72253: PUSH
72254: LD_OWVAR 2
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: PUSH
72263: LD_INT 30
72265: PUSH
72266: LD_INT 29
72268: PUSH
72269: EMPTY
72270: LIST
72271: LIST
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PPUSH
72277: CALL_OW 69
72281: ST_TO_ADDR
// if not tmp then
72282: LD_VAR 0 1
72286: NOT
72287: IFFALSE 72291
// exit ;
72289: GO 72304
// DestroyUnit ( tmp [ 1 ] ) ;
72291: LD_VAR 0 1
72295: PUSH
72296: LD_INT 1
72298: ARRAY
72299: PPUSH
72300: CALL_OW 65
// end ;
72304: PPOPN 1
72306: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
72307: LD_EXP 77
72311: PUSH
72312: LD_EXP 115
72316: AND
72317: IFFALSE 72446
72319: GO 72321
72321: DISABLE
72322: LD_INT 0
72324: PPUSH
// begin uc_side := 0 ;
72325: LD_ADDR_OWVAR 20
72329: PUSH
72330: LD_INT 0
72332: ST_TO_ADDR
// uc_nation := nation_arabian ;
72333: LD_ADDR_OWVAR 21
72337: PUSH
72338: LD_INT 2
72340: ST_TO_ADDR
// hc_gallery :=  ;
72341: LD_ADDR_OWVAR 33
72345: PUSH
72346: LD_STRING 
72348: ST_TO_ADDR
// hc_name :=  ;
72349: LD_ADDR_OWVAR 26
72353: PUSH
72354: LD_STRING 
72356: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
72357: LD_INT 1
72359: PPUSH
72360: LD_INT 11
72362: PPUSH
72363: LD_INT 10
72365: PPUSH
72366: CALL_OW 380
// un := CreateHuman ;
72370: LD_ADDR_VAR 0 1
72374: PUSH
72375: CALL_OW 44
72379: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72380: LD_VAR 0 1
72384: PPUSH
72385: LD_INT 1
72387: PPUSH
72388: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72392: LD_INT 35
72394: PPUSH
72395: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72399: LD_VAR 0 1
72403: PPUSH
72404: LD_INT 22
72406: PUSH
72407: LD_OWVAR 2
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: PPUSH
72416: CALL_OW 69
72420: PPUSH
72421: LD_VAR 0 1
72425: PPUSH
72426: CALL_OW 74
72430: PPUSH
72431: CALL_OW 115
// until IsDead ( un ) ;
72435: LD_VAR 0 1
72439: PPUSH
72440: CALL_OW 301
72444: IFFALSE 72392
// end ;
72446: PPOPN 1
72448: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
72449: LD_EXP 77
72453: PUSH
72454: LD_EXP 117
72458: AND
72459: IFFALSE 72471
72461: GO 72463
72463: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
72464: LD_STRING earthquake(getX(game), 0, 32)
72466: PPUSH
72467: CALL_OW 559
72471: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
72472: LD_EXP 77
72476: PUSH
72477: LD_EXP 118
72481: AND
72482: IFFALSE 72573
72484: GO 72486
72486: DISABLE
72487: LD_INT 0
72489: PPUSH
// begin enable ;
72490: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
72491: LD_ADDR_VAR 0 1
72495: PUSH
72496: LD_INT 22
72498: PUSH
72499: LD_OWVAR 2
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: PUSH
72508: LD_INT 21
72510: PUSH
72511: LD_INT 2
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 33
72520: PUSH
72521: LD_INT 3
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: PUSH
72528: EMPTY
72529: LIST
72530: LIST
72531: LIST
72532: PPUSH
72533: CALL_OW 69
72537: ST_TO_ADDR
// if not tmp then
72538: LD_VAR 0 1
72542: NOT
72543: IFFALSE 72547
// exit ;
72545: GO 72573
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72547: LD_VAR 0 1
72551: PUSH
72552: LD_INT 1
72554: PPUSH
72555: LD_VAR 0 1
72559: PPUSH
72560: CALL_OW 12
72564: ARRAY
72565: PPUSH
72566: LD_INT 1
72568: PPUSH
72569: CALL_OW 234
// end ;
72573: PPOPN 1
72575: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
72576: LD_EXP 77
72580: PUSH
72581: LD_EXP 119
72585: AND
72586: IFFALSE 72727
72588: GO 72590
72590: DISABLE
72591: LD_INT 0
72593: PPUSH
72594: PPUSH
72595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72596: LD_ADDR_VAR 0 3
72600: PUSH
72601: LD_INT 22
72603: PUSH
72604: LD_OWVAR 2
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: LD_INT 25
72615: PUSH
72616: LD_INT 1
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PPUSH
72627: CALL_OW 69
72631: ST_TO_ADDR
// if not tmp then
72632: LD_VAR 0 3
72636: NOT
72637: IFFALSE 72641
// exit ;
72639: GO 72727
// un := tmp [ rand ( 1 , tmp ) ] ;
72641: LD_ADDR_VAR 0 2
72645: PUSH
72646: LD_VAR 0 3
72650: PUSH
72651: LD_INT 1
72653: PPUSH
72654: LD_VAR 0 3
72658: PPUSH
72659: CALL_OW 12
72663: ARRAY
72664: ST_TO_ADDR
// if Crawls ( un ) then
72665: LD_VAR 0 2
72669: PPUSH
72670: CALL_OW 318
72674: IFFALSE 72685
// ComWalk ( un ) ;
72676: LD_VAR 0 2
72680: PPUSH
72681: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
72685: LD_VAR 0 2
72689: PPUSH
72690: LD_INT 9
72692: PPUSH
72693: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
72697: LD_INT 28
72699: PPUSH
72700: LD_OWVAR 2
72704: PPUSH
72705: LD_INT 2
72707: PPUSH
72708: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
72712: LD_INT 29
72714: PPUSH
72715: LD_OWVAR 2
72719: PPUSH
72720: LD_INT 2
72722: PPUSH
72723: CALL_OW 322
// end ;
72727: PPOPN 3
72729: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
72730: LD_EXP 77
72734: PUSH
72735: LD_EXP 120
72739: AND
72740: IFFALSE 72851
72742: GO 72744
72744: DISABLE
72745: LD_INT 0
72747: PPUSH
72748: PPUSH
72749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72750: LD_ADDR_VAR 0 3
72754: PUSH
72755: LD_INT 22
72757: PUSH
72758: LD_OWVAR 2
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PUSH
72767: LD_INT 25
72769: PUSH
72770: LD_INT 1
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: PPUSH
72781: CALL_OW 69
72785: ST_TO_ADDR
// if not tmp then
72786: LD_VAR 0 3
72790: NOT
72791: IFFALSE 72795
// exit ;
72793: GO 72851
// un := tmp [ rand ( 1 , tmp ) ] ;
72795: LD_ADDR_VAR 0 2
72799: PUSH
72800: LD_VAR 0 3
72804: PUSH
72805: LD_INT 1
72807: PPUSH
72808: LD_VAR 0 3
72812: PPUSH
72813: CALL_OW 12
72817: ARRAY
72818: ST_TO_ADDR
// if Crawls ( un ) then
72819: LD_VAR 0 2
72823: PPUSH
72824: CALL_OW 318
72828: IFFALSE 72839
// ComWalk ( un ) ;
72830: LD_VAR 0 2
72834: PPUSH
72835: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72839: LD_VAR 0 2
72843: PPUSH
72844: LD_INT 8
72846: PPUSH
72847: CALL_OW 336
// end ;
72851: PPOPN 3
72853: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
72854: LD_EXP 77
72858: PUSH
72859: LD_EXP 121
72863: AND
72864: IFFALSE 73008
72866: GO 72868
72868: DISABLE
72869: LD_INT 0
72871: PPUSH
72872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
72873: LD_ADDR_VAR 0 2
72877: PUSH
72878: LD_INT 22
72880: PUSH
72881: LD_OWVAR 2
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: PUSH
72890: LD_INT 21
72892: PUSH
72893: LD_INT 2
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: PUSH
72900: LD_INT 2
72902: PUSH
72903: LD_INT 34
72905: PUSH
72906: LD_INT 12
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: PUSH
72913: LD_INT 34
72915: PUSH
72916: LD_INT 51
72918: PUSH
72919: EMPTY
72920: LIST
72921: LIST
72922: PUSH
72923: LD_INT 34
72925: PUSH
72926: LD_INT 32
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: LIST
72937: LIST
72938: PUSH
72939: EMPTY
72940: LIST
72941: LIST
72942: LIST
72943: PPUSH
72944: CALL_OW 69
72948: ST_TO_ADDR
// if not tmp then
72949: LD_VAR 0 2
72953: NOT
72954: IFFALSE 72958
// exit ;
72956: GO 73008
// for i in tmp do
72958: LD_ADDR_VAR 0 1
72962: PUSH
72963: LD_VAR 0 2
72967: PUSH
72968: FOR_IN
72969: IFFALSE 73006
// if GetCargo ( i , mat_artifact ) = 0 then
72971: LD_VAR 0 1
72975: PPUSH
72976: LD_INT 4
72978: PPUSH
72979: CALL_OW 289
72983: PUSH
72984: LD_INT 0
72986: EQUAL
72987: IFFALSE 73004
// SetCargo ( i , mat_siberit , 100 ) ;
72989: LD_VAR 0 1
72993: PPUSH
72994: LD_INT 3
72996: PPUSH
72997: LD_INT 100
72999: PPUSH
73000: CALL_OW 290
73004: GO 72968
73006: POP
73007: POP
// end ;
73008: PPOPN 2
73010: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
73011: LD_EXP 77
73015: PUSH
73016: LD_EXP 122
73020: AND
73021: IFFALSE 73204
73023: GO 73025
73025: DISABLE
73026: LD_INT 0
73028: PPUSH
73029: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73030: LD_ADDR_VAR 0 2
73034: PUSH
73035: LD_INT 22
73037: PUSH
73038: LD_OWVAR 2
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: PPUSH
73047: CALL_OW 69
73051: ST_TO_ADDR
// if not tmp then
73052: LD_VAR 0 2
73056: NOT
73057: IFFALSE 73061
// exit ;
73059: GO 73204
// for i := 1 to 2 do
73061: LD_ADDR_VAR 0 1
73065: PUSH
73066: DOUBLE
73067: LD_INT 1
73069: DEC
73070: ST_TO_ADDR
73071: LD_INT 2
73073: PUSH
73074: FOR_TO
73075: IFFALSE 73202
// begin uc_side := your_side ;
73077: LD_ADDR_OWVAR 20
73081: PUSH
73082: LD_OWVAR 2
73086: ST_TO_ADDR
// uc_nation := nation_american ;
73087: LD_ADDR_OWVAR 21
73091: PUSH
73092: LD_INT 1
73094: ST_TO_ADDR
// vc_chassis := us_morphling ;
73095: LD_ADDR_OWVAR 37
73099: PUSH
73100: LD_INT 5
73102: ST_TO_ADDR
// vc_engine := engine_siberite ;
73103: LD_ADDR_OWVAR 39
73107: PUSH
73108: LD_INT 3
73110: ST_TO_ADDR
// vc_control := control_computer ;
73111: LD_ADDR_OWVAR 38
73115: PUSH
73116: LD_INT 3
73118: ST_TO_ADDR
// vc_weapon := us_double_laser ;
73119: LD_ADDR_OWVAR 40
73123: PUSH
73124: LD_INT 10
73126: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
73127: LD_VAR 0 2
73131: PUSH
73132: LD_INT 1
73134: ARRAY
73135: PPUSH
73136: CALL_OW 310
73140: NOT
73141: IFFALSE 73188
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
73143: CALL_OW 45
73147: PPUSH
73148: LD_VAR 0 2
73152: PUSH
73153: LD_INT 1
73155: ARRAY
73156: PPUSH
73157: CALL_OW 250
73161: PPUSH
73162: LD_VAR 0 2
73166: PUSH
73167: LD_INT 1
73169: ARRAY
73170: PPUSH
73171: CALL_OW 251
73175: PPUSH
73176: LD_INT 12
73178: PPUSH
73179: LD_INT 1
73181: PPUSH
73182: CALL_OW 50
73186: GO 73200
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
73188: CALL_OW 45
73192: PPUSH
73193: LD_INT 1
73195: PPUSH
73196: CALL_OW 51
// end ;
73200: GO 73074
73202: POP
73203: POP
// end ;
73204: PPOPN 2
73206: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
73207: LD_EXP 77
73211: PUSH
73212: LD_EXP 123
73216: AND
73217: IFFALSE 73439
73219: GO 73221
73221: DISABLE
73222: LD_INT 0
73224: PPUSH
73225: PPUSH
73226: PPUSH
73227: PPUSH
73228: PPUSH
73229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73230: LD_ADDR_VAR 0 6
73234: PUSH
73235: LD_INT 22
73237: PUSH
73238: LD_OWVAR 2
73242: PUSH
73243: EMPTY
73244: LIST
73245: LIST
73246: PUSH
73247: LD_INT 21
73249: PUSH
73250: LD_INT 1
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: PUSH
73257: LD_INT 3
73259: PUSH
73260: LD_INT 23
73262: PUSH
73263: LD_INT 0
73265: PUSH
73266: EMPTY
73267: LIST
73268: LIST
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: PUSH
73274: EMPTY
73275: LIST
73276: LIST
73277: LIST
73278: PPUSH
73279: CALL_OW 69
73283: ST_TO_ADDR
// if not tmp then
73284: LD_VAR 0 6
73288: NOT
73289: IFFALSE 73293
// exit ;
73291: GO 73439
// s1 := rand ( 1 , 4 ) ;
73293: LD_ADDR_VAR 0 2
73297: PUSH
73298: LD_INT 1
73300: PPUSH
73301: LD_INT 4
73303: PPUSH
73304: CALL_OW 12
73308: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
73309: LD_ADDR_VAR 0 4
73313: PUSH
73314: LD_VAR 0 6
73318: PUSH
73319: LD_INT 1
73321: ARRAY
73322: PPUSH
73323: LD_VAR 0 2
73327: PPUSH
73328: CALL_OW 259
73332: ST_TO_ADDR
// if s1 = 1 then
73333: LD_VAR 0 2
73337: PUSH
73338: LD_INT 1
73340: EQUAL
73341: IFFALSE 73361
// s2 := rand ( 2 , 4 ) else
73343: LD_ADDR_VAR 0 3
73347: PUSH
73348: LD_INT 2
73350: PPUSH
73351: LD_INT 4
73353: PPUSH
73354: CALL_OW 12
73358: ST_TO_ADDR
73359: GO 73369
// s2 := 1 ;
73361: LD_ADDR_VAR 0 3
73365: PUSH
73366: LD_INT 1
73368: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
73369: LD_ADDR_VAR 0 5
73373: PUSH
73374: LD_VAR 0 6
73378: PUSH
73379: LD_INT 1
73381: ARRAY
73382: PPUSH
73383: LD_VAR 0 3
73387: PPUSH
73388: CALL_OW 259
73392: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
73393: LD_VAR 0 6
73397: PUSH
73398: LD_INT 1
73400: ARRAY
73401: PPUSH
73402: LD_VAR 0 2
73406: PPUSH
73407: LD_VAR 0 5
73411: PPUSH
73412: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
73416: LD_VAR 0 6
73420: PUSH
73421: LD_INT 1
73423: ARRAY
73424: PPUSH
73425: LD_VAR 0 3
73429: PPUSH
73430: LD_VAR 0 4
73434: PPUSH
73435: CALL_OW 237
// end ;
73439: PPOPN 6
73441: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
73442: LD_EXP 77
73446: PUSH
73447: LD_EXP 124
73451: AND
73452: IFFALSE 73531
73454: GO 73456
73456: DISABLE
73457: LD_INT 0
73459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
73460: LD_ADDR_VAR 0 1
73464: PUSH
73465: LD_INT 22
73467: PUSH
73468: LD_OWVAR 2
73472: PUSH
73473: EMPTY
73474: LIST
73475: LIST
73476: PUSH
73477: LD_INT 30
73479: PUSH
73480: LD_INT 3
73482: PUSH
73483: EMPTY
73484: LIST
73485: LIST
73486: PUSH
73487: EMPTY
73488: LIST
73489: LIST
73490: PPUSH
73491: CALL_OW 69
73495: ST_TO_ADDR
// if not tmp then
73496: LD_VAR 0 1
73500: NOT
73501: IFFALSE 73505
// exit ;
73503: GO 73531
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
73505: LD_VAR 0 1
73509: PUSH
73510: LD_INT 1
73512: PPUSH
73513: LD_VAR 0 1
73517: PPUSH
73518: CALL_OW 12
73522: ARRAY
73523: PPUSH
73524: LD_INT 1
73526: PPUSH
73527: CALL_OW 234
// end ;
73531: PPOPN 1
73533: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
73534: LD_EXP 77
73538: PUSH
73539: LD_EXP 125
73543: AND
73544: IFFALSE 73656
73546: GO 73548
73548: DISABLE
73549: LD_INT 0
73551: PPUSH
73552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
73553: LD_ADDR_VAR 0 2
73557: PUSH
73558: LD_INT 22
73560: PUSH
73561: LD_OWVAR 2
73565: PUSH
73566: EMPTY
73567: LIST
73568: LIST
73569: PUSH
73570: LD_INT 2
73572: PUSH
73573: LD_INT 30
73575: PUSH
73576: LD_INT 27
73578: PUSH
73579: EMPTY
73580: LIST
73581: LIST
73582: PUSH
73583: LD_INT 30
73585: PUSH
73586: LD_INT 26
73588: PUSH
73589: EMPTY
73590: LIST
73591: LIST
73592: PUSH
73593: LD_INT 30
73595: PUSH
73596: LD_INT 28
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: PUSH
73603: EMPTY
73604: LIST
73605: LIST
73606: LIST
73607: LIST
73608: PUSH
73609: EMPTY
73610: LIST
73611: LIST
73612: PPUSH
73613: CALL_OW 69
73617: ST_TO_ADDR
// if not tmp then
73618: LD_VAR 0 2
73622: NOT
73623: IFFALSE 73627
// exit ;
73625: GO 73656
// for i in tmp do
73627: LD_ADDR_VAR 0 1
73631: PUSH
73632: LD_VAR 0 2
73636: PUSH
73637: FOR_IN
73638: IFFALSE 73654
// SetLives ( i , 1 ) ;
73640: LD_VAR 0 1
73644: PPUSH
73645: LD_INT 1
73647: PPUSH
73648: CALL_OW 234
73652: GO 73637
73654: POP
73655: POP
// end ;
73656: PPOPN 2
73658: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
73659: LD_EXP 77
73663: PUSH
73664: LD_EXP 126
73668: AND
73669: IFFALSE 73943
73671: GO 73673
73673: DISABLE
73674: LD_INT 0
73676: PPUSH
73677: PPUSH
73678: PPUSH
// begin i := rand ( 1 , 7 ) ;
73679: LD_ADDR_VAR 0 1
73683: PUSH
73684: LD_INT 1
73686: PPUSH
73687: LD_INT 7
73689: PPUSH
73690: CALL_OW 12
73694: ST_TO_ADDR
// case i of 1 :
73695: LD_VAR 0 1
73699: PUSH
73700: LD_INT 1
73702: DOUBLE
73703: EQUAL
73704: IFTRUE 73708
73706: GO 73718
73708: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
73709: LD_STRING earthquake(getX(game), 0, 32)
73711: PPUSH
73712: CALL_OW 559
73716: GO 73943
73718: LD_INT 2
73720: DOUBLE
73721: EQUAL
73722: IFTRUE 73726
73724: GO 73740
73726: POP
// begin ToLua ( displayStucuk(); ) ;
73727: LD_STRING displayStucuk();
73729: PPUSH
73730: CALL_OW 559
// ResetFog ;
73734: CALL_OW 335
// end ; 3 :
73738: GO 73943
73740: LD_INT 3
73742: DOUBLE
73743: EQUAL
73744: IFTRUE 73748
73746: GO 73852
73748: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73749: LD_ADDR_VAR 0 2
73753: PUSH
73754: LD_INT 22
73756: PUSH
73757: LD_OWVAR 2
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: PUSH
73766: LD_INT 25
73768: PUSH
73769: LD_INT 1
73771: PUSH
73772: EMPTY
73773: LIST
73774: LIST
73775: PUSH
73776: EMPTY
73777: LIST
73778: LIST
73779: PPUSH
73780: CALL_OW 69
73784: ST_TO_ADDR
// if not tmp then
73785: LD_VAR 0 2
73789: NOT
73790: IFFALSE 73794
// exit ;
73792: GO 73943
// un := tmp [ rand ( 1 , tmp ) ] ;
73794: LD_ADDR_VAR 0 3
73798: PUSH
73799: LD_VAR 0 2
73803: PUSH
73804: LD_INT 1
73806: PPUSH
73807: LD_VAR 0 2
73811: PPUSH
73812: CALL_OW 12
73816: ARRAY
73817: ST_TO_ADDR
// if Crawls ( un ) then
73818: LD_VAR 0 3
73822: PPUSH
73823: CALL_OW 318
73827: IFFALSE 73838
// ComWalk ( un ) ;
73829: LD_VAR 0 3
73833: PPUSH
73834: CALL_OW 138
// SetClass ( un , class_mortar ) ;
73838: LD_VAR 0 3
73842: PPUSH
73843: LD_INT 8
73845: PPUSH
73846: CALL_OW 336
// end ; 4 :
73850: GO 73943
73852: LD_INT 4
73854: DOUBLE
73855: EQUAL
73856: IFTRUE 73860
73858: GO 73921
73860: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73861: LD_ADDR_VAR 0 2
73865: PUSH
73866: LD_INT 22
73868: PUSH
73869: LD_OWVAR 2
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: PUSH
73878: LD_INT 30
73880: PUSH
73881: LD_INT 29
73883: PUSH
73884: EMPTY
73885: LIST
73886: LIST
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: PPUSH
73892: CALL_OW 69
73896: ST_TO_ADDR
// if not tmp then
73897: LD_VAR 0 2
73901: NOT
73902: IFFALSE 73906
// exit ;
73904: GO 73943
// DestroyUnit ( tmp [ 1 ] ) ;
73906: LD_VAR 0 2
73910: PUSH
73911: LD_INT 1
73913: ARRAY
73914: PPUSH
73915: CALL_OW 65
// end ; 5 .. 7 :
73919: GO 73943
73921: LD_INT 5
73923: DOUBLE
73924: GREATEREQUAL
73925: IFFALSE 73933
73927: LD_INT 7
73929: DOUBLE
73930: LESSEQUAL
73931: IFTRUE 73935
73933: GO 73942
73935: POP
// StreamSibBomb ; end ;
73936: CALL 70193 0 0
73940: GO 73943
73942: POP
// end ;
73943: PPOPN 3
73945: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
73946: LD_EXP 77
73950: PUSH
73951: LD_EXP 127
73955: AND
73956: IFFALSE 74112
73958: GO 73960
73960: DISABLE
73961: LD_INT 0
73963: PPUSH
73964: PPUSH
73965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
73966: LD_ADDR_VAR 0 2
73970: PUSH
73971: LD_INT 81
73973: PUSH
73974: LD_OWVAR 2
73978: PUSH
73979: EMPTY
73980: LIST
73981: LIST
73982: PUSH
73983: LD_INT 2
73985: PUSH
73986: LD_INT 21
73988: PUSH
73989: LD_INT 1
73991: PUSH
73992: EMPTY
73993: LIST
73994: LIST
73995: PUSH
73996: LD_INT 21
73998: PUSH
73999: LD_INT 2
74001: PUSH
74002: EMPTY
74003: LIST
74004: LIST
74005: PUSH
74006: EMPTY
74007: LIST
74008: LIST
74009: LIST
74010: PUSH
74011: EMPTY
74012: LIST
74013: LIST
74014: PPUSH
74015: CALL_OW 69
74019: ST_TO_ADDR
// if not tmp then
74020: LD_VAR 0 2
74024: NOT
74025: IFFALSE 74029
// exit ;
74027: GO 74112
// p := 0 ;
74029: LD_ADDR_VAR 0 3
74033: PUSH
74034: LD_INT 0
74036: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74037: LD_INT 35
74039: PPUSH
74040: CALL_OW 67
// p := p + 1 ;
74044: LD_ADDR_VAR 0 3
74048: PUSH
74049: LD_VAR 0 3
74053: PUSH
74054: LD_INT 1
74056: PLUS
74057: ST_TO_ADDR
// for i in tmp do
74058: LD_ADDR_VAR 0 1
74062: PUSH
74063: LD_VAR 0 2
74067: PUSH
74068: FOR_IN
74069: IFFALSE 74100
// if GetLives ( i ) < 1000 then
74071: LD_VAR 0 1
74075: PPUSH
74076: CALL_OW 256
74080: PUSH
74081: LD_INT 1000
74083: LESS
74084: IFFALSE 74098
// SetLives ( i , 1000 ) ;
74086: LD_VAR 0 1
74090: PPUSH
74091: LD_INT 1000
74093: PPUSH
74094: CALL_OW 234
74098: GO 74068
74100: POP
74101: POP
// until p > 20 ;
74102: LD_VAR 0 3
74106: PUSH
74107: LD_INT 20
74109: GREATER
74110: IFFALSE 74037
// end ;
74112: PPOPN 3
74114: END
// every 0 0$1 trigger StreamModeActive and sTime do
74115: LD_EXP 77
74119: PUSH
74120: LD_EXP 128
74124: AND
74125: IFFALSE 74160
74127: GO 74129
74129: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
74130: LD_INT 28
74132: PPUSH
74133: LD_OWVAR 2
74137: PPUSH
74138: LD_INT 2
74140: PPUSH
74141: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
74145: LD_INT 30
74147: PPUSH
74148: LD_OWVAR 2
74152: PPUSH
74153: LD_INT 2
74155: PPUSH
74156: CALL_OW 322
// end ;
74160: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
74161: LD_EXP 77
74165: PUSH
74166: LD_EXP 129
74170: AND
74171: IFFALSE 74292
74173: GO 74175
74175: DISABLE
74176: LD_INT 0
74178: PPUSH
74179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74180: LD_ADDR_VAR 0 2
74184: PUSH
74185: LD_INT 22
74187: PUSH
74188: LD_OWVAR 2
74192: PUSH
74193: EMPTY
74194: LIST
74195: LIST
74196: PUSH
74197: LD_INT 21
74199: PUSH
74200: LD_INT 1
74202: PUSH
74203: EMPTY
74204: LIST
74205: LIST
74206: PUSH
74207: LD_INT 3
74209: PUSH
74210: LD_INT 23
74212: PUSH
74213: LD_INT 0
74215: PUSH
74216: EMPTY
74217: LIST
74218: LIST
74219: PUSH
74220: EMPTY
74221: LIST
74222: LIST
74223: PUSH
74224: EMPTY
74225: LIST
74226: LIST
74227: LIST
74228: PPUSH
74229: CALL_OW 69
74233: ST_TO_ADDR
// if not tmp then
74234: LD_VAR 0 2
74238: NOT
74239: IFFALSE 74243
// exit ;
74241: GO 74292
// for i in tmp do
74243: LD_ADDR_VAR 0 1
74247: PUSH
74248: LD_VAR 0 2
74252: PUSH
74253: FOR_IN
74254: IFFALSE 74290
// begin if Crawls ( i ) then
74256: LD_VAR 0 1
74260: PPUSH
74261: CALL_OW 318
74265: IFFALSE 74276
// ComWalk ( i ) ;
74267: LD_VAR 0 1
74271: PPUSH
74272: CALL_OW 138
// SetClass ( i , 2 ) ;
74276: LD_VAR 0 1
74280: PPUSH
74281: LD_INT 2
74283: PPUSH
74284: CALL_OW 336
// end ;
74288: GO 74253
74290: POP
74291: POP
// end ;
74292: PPOPN 2
74294: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
74295: LD_EXP 77
74299: PUSH
74300: LD_EXP 130
74304: AND
74305: IFFALSE 74586
74307: GO 74309
74309: DISABLE
74310: LD_INT 0
74312: PPUSH
74313: PPUSH
74314: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
74315: LD_OWVAR 2
74319: PPUSH
74320: LD_INT 9
74322: PPUSH
74323: LD_INT 1
74325: PPUSH
74326: LD_INT 1
74328: PPUSH
74329: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
74333: LD_INT 9
74335: PPUSH
74336: LD_OWVAR 2
74340: PPUSH
74341: CALL_OW 343
// uc_side := 9 ;
74345: LD_ADDR_OWVAR 20
74349: PUSH
74350: LD_INT 9
74352: ST_TO_ADDR
// uc_nation := 2 ;
74353: LD_ADDR_OWVAR 21
74357: PUSH
74358: LD_INT 2
74360: ST_TO_ADDR
// hc_name := Dark Warrior ;
74361: LD_ADDR_OWVAR 26
74365: PUSH
74366: LD_STRING Dark Warrior
74368: ST_TO_ADDR
// hc_gallery :=  ;
74369: LD_ADDR_OWVAR 33
74373: PUSH
74374: LD_STRING 
74376: ST_TO_ADDR
// hc_noskilllimit := true ;
74377: LD_ADDR_OWVAR 76
74381: PUSH
74382: LD_INT 1
74384: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
74385: LD_ADDR_OWVAR 31
74389: PUSH
74390: LD_INT 30
74392: PUSH
74393: LD_INT 30
74395: PUSH
74396: LD_INT 30
74398: PUSH
74399: LD_INT 30
74401: PUSH
74402: EMPTY
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: ST_TO_ADDR
// un := CreateHuman ;
74408: LD_ADDR_VAR 0 3
74412: PUSH
74413: CALL_OW 44
74417: ST_TO_ADDR
// hc_noskilllimit := false ;
74418: LD_ADDR_OWVAR 76
74422: PUSH
74423: LD_INT 0
74425: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74426: LD_VAR 0 3
74430: PPUSH
74431: LD_INT 1
74433: PPUSH
74434: CALL_OW 51
// p := 0 ;
74438: LD_ADDR_VAR 0 2
74442: PUSH
74443: LD_INT 0
74445: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74446: LD_INT 35
74448: PPUSH
74449: CALL_OW 67
// p := p + 1 ;
74453: LD_ADDR_VAR 0 2
74457: PUSH
74458: LD_VAR 0 2
74462: PUSH
74463: LD_INT 1
74465: PLUS
74466: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
74467: LD_VAR 0 3
74471: PPUSH
74472: CALL_OW 256
74476: PUSH
74477: LD_INT 1000
74479: LESS
74480: IFFALSE 74494
// SetLives ( un , 1000 ) ;
74482: LD_VAR 0 3
74486: PPUSH
74487: LD_INT 1000
74489: PPUSH
74490: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
74494: LD_VAR 0 3
74498: PPUSH
74499: LD_INT 81
74501: PUSH
74502: LD_OWVAR 2
74506: PUSH
74507: EMPTY
74508: LIST
74509: LIST
74510: PUSH
74511: LD_INT 91
74513: PUSH
74514: LD_VAR 0 3
74518: PUSH
74519: LD_INT 30
74521: PUSH
74522: EMPTY
74523: LIST
74524: LIST
74525: LIST
74526: PUSH
74527: EMPTY
74528: LIST
74529: LIST
74530: PPUSH
74531: CALL_OW 69
74535: PPUSH
74536: LD_VAR 0 3
74540: PPUSH
74541: CALL_OW 74
74545: PPUSH
74546: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
74550: LD_VAR 0 2
74554: PUSH
74555: LD_INT 60
74557: GREATER
74558: PUSH
74559: LD_VAR 0 3
74563: PPUSH
74564: CALL_OW 301
74568: OR
74569: IFFALSE 74446
// if un then
74571: LD_VAR 0 3
74575: IFFALSE 74586
// RemoveUnit ( un ) ;
74577: LD_VAR 0 3
74581: PPUSH
74582: CALL_OW 64
// end ;
74586: PPOPN 3
74588: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
74589: LD_INT 0
74591: PPUSH
// case cmd of 301 :
74592: LD_VAR 0 1
74596: PUSH
74597: LD_INT 301
74599: DOUBLE
74600: EQUAL
74601: IFTRUE 74605
74603: GO 74637
74605: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
74606: LD_VAR 0 6
74610: PPUSH
74611: LD_VAR 0 7
74615: PPUSH
74616: LD_VAR 0 8
74620: PPUSH
74621: LD_VAR 0 4
74625: PPUSH
74626: LD_VAR 0 5
74630: PPUSH
74631: CALL 75838 0 5
74635: GO 74758
74637: LD_INT 302
74639: DOUBLE
74640: EQUAL
74641: IFTRUE 74645
74643: GO 74682
74645: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
74646: LD_VAR 0 6
74650: PPUSH
74651: LD_VAR 0 7
74655: PPUSH
74656: LD_VAR 0 8
74660: PPUSH
74661: LD_VAR 0 9
74665: PPUSH
74666: LD_VAR 0 4
74670: PPUSH
74671: LD_VAR 0 5
74675: PPUSH
74676: CALL 75929 0 6
74680: GO 74758
74682: LD_INT 303
74684: DOUBLE
74685: EQUAL
74686: IFTRUE 74690
74688: GO 74727
74690: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
74691: LD_VAR 0 6
74695: PPUSH
74696: LD_VAR 0 7
74700: PPUSH
74701: LD_VAR 0 8
74705: PPUSH
74706: LD_VAR 0 9
74710: PPUSH
74711: LD_VAR 0 4
74715: PPUSH
74716: LD_VAR 0 5
74720: PPUSH
74721: CALL 74763 0 6
74725: GO 74758
74727: LD_INT 304
74729: DOUBLE
74730: EQUAL
74731: IFTRUE 74735
74733: GO 74757
74735: POP
// hHackTeleport ( unit , x , y ) ; end ;
74736: LD_VAR 0 2
74740: PPUSH
74741: LD_VAR 0 4
74745: PPUSH
74746: LD_VAR 0 5
74750: PPUSH
74751: CALL 76522 0 3
74755: GO 74758
74757: POP
// end ;
74758: LD_VAR 0 12
74762: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
74763: LD_INT 0
74765: PPUSH
74766: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
74767: LD_VAR 0 1
74771: PUSH
74772: LD_INT 1
74774: LESS
74775: PUSH
74776: LD_VAR 0 1
74780: PUSH
74781: LD_INT 3
74783: GREATER
74784: OR
74785: PUSH
74786: LD_VAR 0 5
74790: PPUSH
74791: LD_VAR 0 6
74795: PPUSH
74796: CALL_OW 428
74800: OR
74801: IFFALSE 74805
// exit ;
74803: GO 75525
// uc_side := your_side ;
74805: LD_ADDR_OWVAR 20
74809: PUSH
74810: LD_OWVAR 2
74814: ST_TO_ADDR
// uc_nation := nation ;
74815: LD_ADDR_OWVAR 21
74819: PUSH
74820: LD_VAR 0 1
74824: ST_TO_ADDR
// bc_level = 1 ;
74825: LD_ADDR_OWVAR 43
74829: PUSH
74830: LD_INT 1
74832: ST_TO_ADDR
// case btype of 1 :
74833: LD_VAR 0 2
74837: PUSH
74838: LD_INT 1
74840: DOUBLE
74841: EQUAL
74842: IFTRUE 74846
74844: GO 74857
74846: POP
// bc_type := b_depot ; 2 :
74847: LD_ADDR_OWVAR 42
74851: PUSH
74852: LD_INT 0
74854: ST_TO_ADDR
74855: GO 75469
74857: LD_INT 2
74859: DOUBLE
74860: EQUAL
74861: IFTRUE 74865
74863: GO 74876
74865: POP
// bc_type := b_warehouse ; 3 :
74866: LD_ADDR_OWVAR 42
74870: PUSH
74871: LD_INT 1
74873: ST_TO_ADDR
74874: GO 75469
74876: LD_INT 3
74878: DOUBLE
74879: EQUAL
74880: IFTRUE 74884
74882: GO 74895
74884: POP
// bc_type := b_lab ; 4 .. 9 :
74885: LD_ADDR_OWVAR 42
74889: PUSH
74890: LD_INT 6
74892: ST_TO_ADDR
74893: GO 75469
74895: LD_INT 4
74897: DOUBLE
74898: GREATEREQUAL
74899: IFFALSE 74907
74901: LD_INT 9
74903: DOUBLE
74904: LESSEQUAL
74905: IFTRUE 74909
74907: GO 74961
74909: POP
// begin bc_type := b_lab_half ;
74910: LD_ADDR_OWVAR 42
74914: PUSH
74915: LD_INT 7
74917: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
74918: LD_ADDR_OWVAR 44
74922: PUSH
74923: LD_INT 10
74925: PUSH
74926: LD_INT 11
74928: PUSH
74929: LD_INT 12
74931: PUSH
74932: LD_INT 15
74934: PUSH
74935: LD_INT 14
74937: PUSH
74938: LD_INT 13
74940: PUSH
74941: EMPTY
74942: LIST
74943: LIST
74944: LIST
74945: LIST
74946: LIST
74947: LIST
74948: PUSH
74949: LD_VAR 0 2
74953: PUSH
74954: LD_INT 3
74956: MINUS
74957: ARRAY
74958: ST_TO_ADDR
// end ; 10 .. 13 :
74959: GO 75469
74961: LD_INT 10
74963: DOUBLE
74964: GREATEREQUAL
74965: IFFALSE 74973
74967: LD_INT 13
74969: DOUBLE
74970: LESSEQUAL
74971: IFTRUE 74975
74973: GO 75052
74975: POP
// begin bc_type := b_lab_full ;
74976: LD_ADDR_OWVAR 42
74980: PUSH
74981: LD_INT 8
74983: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
74984: LD_ADDR_OWVAR 44
74988: PUSH
74989: LD_INT 10
74991: PUSH
74992: LD_INT 12
74994: PUSH
74995: LD_INT 14
74997: PUSH
74998: LD_INT 13
75000: PUSH
75001: EMPTY
75002: LIST
75003: LIST
75004: LIST
75005: LIST
75006: PUSH
75007: LD_VAR 0 2
75011: PUSH
75012: LD_INT 9
75014: MINUS
75015: ARRAY
75016: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
75017: LD_ADDR_OWVAR 45
75021: PUSH
75022: LD_INT 11
75024: PUSH
75025: LD_INT 15
75027: PUSH
75028: LD_INT 12
75030: PUSH
75031: LD_INT 15
75033: PUSH
75034: EMPTY
75035: LIST
75036: LIST
75037: LIST
75038: LIST
75039: PUSH
75040: LD_VAR 0 2
75044: PUSH
75045: LD_INT 9
75047: MINUS
75048: ARRAY
75049: ST_TO_ADDR
// end ; 14 :
75050: GO 75469
75052: LD_INT 14
75054: DOUBLE
75055: EQUAL
75056: IFTRUE 75060
75058: GO 75071
75060: POP
// bc_type := b_workshop ; 15 :
75061: LD_ADDR_OWVAR 42
75065: PUSH
75066: LD_INT 2
75068: ST_TO_ADDR
75069: GO 75469
75071: LD_INT 15
75073: DOUBLE
75074: EQUAL
75075: IFTRUE 75079
75077: GO 75090
75079: POP
// bc_type := b_factory ; 16 :
75080: LD_ADDR_OWVAR 42
75084: PUSH
75085: LD_INT 3
75087: ST_TO_ADDR
75088: GO 75469
75090: LD_INT 16
75092: DOUBLE
75093: EQUAL
75094: IFTRUE 75098
75096: GO 75109
75098: POP
// bc_type := b_ext_gun ; 17 :
75099: LD_ADDR_OWVAR 42
75103: PUSH
75104: LD_INT 17
75106: ST_TO_ADDR
75107: GO 75469
75109: LD_INT 17
75111: DOUBLE
75112: EQUAL
75113: IFTRUE 75117
75115: GO 75145
75117: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
75118: LD_ADDR_OWVAR 42
75122: PUSH
75123: LD_INT 19
75125: PUSH
75126: LD_INT 23
75128: PUSH
75129: LD_INT 19
75131: PUSH
75132: EMPTY
75133: LIST
75134: LIST
75135: LIST
75136: PUSH
75137: LD_VAR 0 1
75141: ARRAY
75142: ST_TO_ADDR
75143: GO 75469
75145: LD_INT 18
75147: DOUBLE
75148: EQUAL
75149: IFTRUE 75153
75151: GO 75164
75153: POP
// bc_type := b_ext_radar ; 19 :
75154: LD_ADDR_OWVAR 42
75158: PUSH
75159: LD_INT 20
75161: ST_TO_ADDR
75162: GO 75469
75164: LD_INT 19
75166: DOUBLE
75167: EQUAL
75168: IFTRUE 75172
75170: GO 75183
75172: POP
// bc_type := b_ext_radio ; 20 :
75173: LD_ADDR_OWVAR 42
75177: PUSH
75178: LD_INT 22
75180: ST_TO_ADDR
75181: GO 75469
75183: LD_INT 20
75185: DOUBLE
75186: EQUAL
75187: IFTRUE 75191
75189: GO 75202
75191: POP
// bc_type := b_ext_siberium ; 21 :
75192: LD_ADDR_OWVAR 42
75196: PUSH
75197: LD_INT 21
75199: ST_TO_ADDR
75200: GO 75469
75202: LD_INT 21
75204: DOUBLE
75205: EQUAL
75206: IFTRUE 75210
75208: GO 75221
75210: POP
// bc_type := b_ext_computer ; 22 :
75211: LD_ADDR_OWVAR 42
75215: PUSH
75216: LD_INT 24
75218: ST_TO_ADDR
75219: GO 75469
75221: LD_INT 22
75223: DOUBLE
75224: EQUAL
75225: IFTRUE 75229
75227: GO 75240
75229: POP
// bc_type := b_ext_track ; 23 :
75230: LD_ADDR_OWVAR 42
75234: PUSH
75235: LD_INT 16
75237: ST_TO_ADDR
75238: GO 75469
75240: LD_INT 23
75242: DOUBLE
75243: EQUAL
75244: IFTRUE 75248
75246: GO 75259
75248: POP
// bc_type := b_ext_laser ; 24 :
75249: LD_ADDR_OWVAR 42
75253: PUSH
75254: LD_INT 25
75256: ST_TO_ADDR
75257: GO 75469
75259: LD_INT 24
75261: DOUBLE
75262: EQUAL
75263: IFTRUE 75267
75265: GO 75278
75267: POP
// bc_type := b_control_tower ; 25 :
75268: LD_ADDR_OWVAR 42
75272: PUSH
75273: LD_INT 36
75275: ST_TO_ADDR
75276: GO 75469
75278: LD_INT 25
75280: DOUBLE
75281: EQUAL
75282: IFTRUE 75286
75284: GO 75297
75286: POP
// bc_type := b_breastwork ; 26 :
75287: LD_ADDR_OWVAR 42
75291: PUSH
75292: LD_INT 31
75294: ST_TO_ADDR
75295: GO 75469
75297: LD_INT 26
75299: DOUBLE
75300: EQUAL
75301: IFTRUE 75305
75303: GO 75316
75305: POP
// bc_type := b_bunker ; 27 :
75306: LD_ADDR_OWVAR 42
75310: PUSH
75311: LD_INT 32
75313: ST_TO_ADDR
75314: GO 75469
75316: LD_INT 27
75318: DOUBLE
75319: EQUAL
75320: IFTRUE 75324
75322: GO 75335
75324: POP
// bc_type := b_turret ; 28 :
75325: LD_ADDR_OWVAR 42
75329: PUSH
75330: LD_INT 33
75332: ST_TO_ADDR
75333: GO 75469
75335: LD_INT 28
75337: DOUBLE
75338: EQUAL
75339: IFTRUE 75343
75341: GO 75354
75343: POP
// bc_type := b_armoury ; 29 :
75344: LD_ADDR_OWVAR 42
75348: PUSH
75349: LD_INT 4
75351: ST_TO_ADDR
75352: GO 75469
75354: LD_INT 29
75356: DOUBLE
75357: EQUAL
75358: IFTRUE 75362
75360: GO 75373
75362: POP
// bc_type := b_barracks ; 30 :
75363: LD_ADDR_OWVAR 42
75367: PUSH
75368: LD_INT 5
75370: ST_TO_ADDR
75371: GO 75469
75373: LD_INT 30
75375: DOUBLE
75376: EQUAL
75377: IFTRUE 75381
75379: GO 75392
75381: POP
// bc_type := b_solar_power ; 31 :
75382: LD_ADDR_OWVAR 42
75386: PUSH
75387: LD_INT 27
75389: ST_TO_ADDR
75390: GO 75469
75392: LD_INT 31
75394: DOUBLE
75395: EQUAL
75396: IFTRUE 75400
75398: GO 75411
75400: POP
// bc_type := b_oil_power ; 32 :
75401: LD_ADDR_OWVAR 42
75405: PUSH
75406: LD_INT 26
75408: ST_TO_ADDR
75409: GO 75469
75411: LD_INT 32
75413: DOUBLE
75414: EQUAL
75415: IFTRUE 75419
75417: GO 75430
75419: POP
// bc_type := b_siberite_power ; 33 :
75420: LD_ADDR_OWVAR 42
75424: PUSH
75425: LD_INT 28
75427: ST_TO_ADDR
75428: GO 75469
75430: LD_INT 33
75432: DOUBLE
75433: EQUAL
75434: IFTRUE 75438
75436: GO 75449
75438: POP
// bc_type := b_oil_mine ; 34 :
75439: LD_ADDR_OWVAR 42
75443: PUSH
75444: LD_INT 29
75446: ST_TO_ADDR
75447: GO 75469
75449: LD_INT 34
75451: DOUBLE
75452: EQUAL
75453: IFTRUE 75457
75455: GO 75468
75457: POP
// bc_type := b_siberite_mine ; end ;
75458: LD_ADDR_OWVAR 42
75462: PUSH
75463: LD_INT 30
75465: ST_TO_ADDR
75466: GO 75469
75468: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
75469: LD_ADDR_VAR 0 8
75473: PUSH
75474: LD_VAR 0 5
75478: PPUSH
75479: LD_VAR 0 6
75483: PPUSH
75484: LD_VAR 0 3
75488: PPUSH
75489: CALL_OW 47
75493: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
75494: LD_OWVAR 42
75498: PUSH
75499: LD_INT 32
75501: PUSH
75502: LD_INT 33
75504: PUSH
75505: EMPTY
75506: LIST
75507: LIST
75508: IN
75509: IFFALSE 75525
// PlaceWeaponTurret ( b , weapon ) ;
75511: LD_VAR 0 8
75515: PPUSH
75516: LD_VAR 0 4
75520: PPUSH
75521: CALL_OW 431
// end ;
75525: LD_VAR 0 7
75529: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
75530: LD_INT 0
75532: PPUSH
75533: PPUSH
75534: PPUSH
75535: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75536: LD_ADDR_VAR 0 4
75540: PUSH
75541: LD_INT 22
75543: PUSH
75544: LD_OWVAR 2
75548: PUSH
75549: EMPTY
75550: LIST
75551: LIST
75552: PUSH
75553: LD_INT 2
75555: PUSH
75556: LD_INT 30
75558: PUSH
75559: LD_INT 0
75561: PUSH
75562: EMPTY
75563: LIST
75564: LIST
75565: PUSH
75566: LD_INT 30
75568: PUSH
75569: LD_INT 1
75571: PUSH
75572: EMPTY
75573: LIST
75574: LIST
75575: PUSH
75576: EMPTY
75577: LIST
75578: LIST
75579: LIST
75580: PUSH
75581: EMPTY
75582: LIST
75583: LIST
75584: PPUSH
75585: CALL_OW 69
75589: ST_TO_ADDR
// if not tmp then
75590: LD_VAR 0 4
75594: NOT
75595: IFFALSE 75599
// exit ;
75597: GO 75658
// for i in tmp do
75599: LD_ADDR_VAR 0 2
75603: PUSH
75604: LD_VAR 0 4
75608: PUSH
75609: FOR_IN
75610: IFFALSE 75656
// for j = 1 to 3 do
75612: LD_ADDR_VAR 0 3
75616: PUSH
75617: DOUBLE
75618: LD_INT 1
75620: DEC
75621: ST_TO_ADDR
75622: LD_INT 3
75624: PUSH
75625: FOR_TO
75626: IFFALSE 75652
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
75628: LD_VAR 0 2
75632: PPUSH
75633: CALL_OW 274
75637: PPUSH
75638: LD_VAR 0 3
75642: PPUSH
75643: LD_INT 99999
75645: PPUSH
75646: CALL_OW 277
75650: GO 75625
75652: POP
75653: POP
75654: GO 75609
75656: POP
75657: POP
// end ;
75658: LD_VAR 0 1
75662: RET
// export function hHackSetLevel10 ; var i , j ; begin
75663: LD_INT 0
75665: PPUSH
75666: PPUSH
75667: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75668: LD_ADDR_VAR 0 2
75672: PUSH
75673: LD_INT 21
75675: PUSH
75676: LD_INT 1
75678: PUSH
75679: EMPTY
75680: LIST
75681: LIST
75682: PPUSH
75683: CALL_OW 69
75687: PUSH
75688: FOR_IN
75689: IFFALSE 75741
// if IsSelected ( i ) then
75691: LD_VAR 0 2
75695: PPUSH
75696: CALL_OW 306
75700: IFFALSE 75739
// begin for j := 1 to 4 do
75702: LD_ADDR_VAR 0 3
75706: PUSH
75707: DOUBLE
75708: LD_INT 1
75710: DEC
75711: ST_TO_ADDR
75712: LD_INT 4
75714: PUSH
75715: FOR_TO
75716: IFFALSE 75737
// SetSkill ( i , j , 10 ) ;
75718: LD_VAR 0 2
75722: PPUSH
75723: LD_VAR 0 3
75727: PPUSH
75728: LD_INT 10
75730: PPUSH
75731: CALL_OW 237
75735: GO 75715
75737: POP
75738: POP
// end ;
75739: GO 75688
75741: POP
75742: POP
// end ;
75743: LD_VAR 0 1
75747: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
75748: LD_INT 0
75750: PPUSH
75751: PPUSH
75752: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
75753: LD_ADDR_VAR 0 2
75757: PUSH
75758: LD_INT 22
75760: PUSH
75761: LD_OWVAR 2
75765: PUSH
75766: EMPTY
75767: LIST
75768: LIST
75769: PUSH
75770: LD_INT 21
75772: PUSH
75773: LD_INT 1
75775: PUSH
75776: EMPTY
75777: LIST
75778: LIST
75779: PUSH
75780: EMPTY
75781: LIST
75782: LIST
75783: PPUSH
75784: CALL_OW 69
75788: PUSH
75789: FOR_IN
75790: IFFALSE 75831
// begin for j := 1 to 4 do
75792: LD_ADDR_VAR 0 3
75796: PUSH
75797: DOUBLE
75798: LD_INT 1
75800: DEC
75801: ST_TO_ADDR
75802: LD_INT 4
75804: PUSH
75805: FOR_TO
75806: IFFALSE 75827
// SetSkill ( i , j , 10 ) ;
75808: LD_VAR 0 2
75812: PPUSH
75813: LD_VAR 0 3
75817: PPUSH
75818: LD_INT 10
75820: PPUSH
75821: CALL_OW 237
75825: GO 75805
75827: POP
75828: POP
// end ;
75829: GO 75789
75831: POP
75832: POP
// end ;
75833: LD_VAR 0 1
75837: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
75838: LD_INT 0
75840: PPUSH
// uc_side := your_side ;
75841: LD_ADDR_OWVAR 20
75845: PUSH
75846: LD_OWVAR 2
75850: ST_TO_ADDR
// uc_nation := nation ;
75851: LD_ADDR_OWVAR 21
75855: PUSH
75856: LD_VAR 0 1
75860: ST_TO_ADDR
// InitHc ;
75861: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
75865: LD_INT 0
75867: PPUSH
75868: LD_VAR 0 2
75872: PPUSH
75873: LD_VAR 0 3
75877: PPUSH
75878: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
75882: LD_VAR 0 4
75886: PPUSH
75887: LD_VAR 0 5
75891: PPUSH
75892: CALL_OW 428
75896: PUSH
75897: LD_INT 0
75899: EQUAL
75900: IFFALSE 75924
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
75902: CALL_OW 44
75906: PPUSH
75907: LD_VAR 0 4
75911: PPUSH
75912: LD_VAR 0 5
75916: PPUSH
75917: LD_INT 1
75919: PPUSH
75920: CALL_OW 48
// end ;
75924: LD_VAR 0 6
75928: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
75929: LD_INT 0
75931: PPUSH
75932: PPUSH
// uc_side := your_side ;
75933: LD_ADDR_OWVAR 20
75937: PUSH
75938: LD_OWVAR 2
75942: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
75943: LD_VAR 0 1
75947: PUSH
75948: LD_INT 1
75950: PUSH
75951: LD_INT 2
75953: PUSH
75954: LD_INT 3
75956: PUSH
75957: LD_INT 4
75959: PUSH
75960: LD_INT 5
75962: PUSH
75963: EMPTY
75964: LIST
75965: LIST
75966: LIST
75967: LIST
75968: LIST
75969: IN
75970: IFFALSE 75982
// uc_nation := nation_american else
75972: LD_ADDR_OWVAR 21
75976: PUSH
75977: LD_INT 1
75979: ST_TO_ADDR
75980: GO 76025
// if chassis in [ 11 , 12 , 13 , 14 ] then
75982: LD_VAR 0 1
75986: PUSH
75987: LD_INT 11
75989: PUSH
75990: LD_INT 12
75992: PUSH
75993: LD_INT 13
75995: PUSH
75996: LD_INT 14
75998: PUSH
75999: EMPTY
76000: LIST
76001: LIST
76002: LIST
76003: LIST
76004: IN
76005: IFFALSE 76017
// uc_nation := nation_arabian else
76007: LD_ADDR_OWVAR 21
76011: PUSH
76012: LD_INT 2
76014: ST_TO_ADDR
76015: GO 76025
// uc_nation := nation_russian ;
76017: LD_ADDR_OWVAR 21
76021: PUSH
76022: LD_INT 3
76024: ST_TO_ADDR
// vc_chassis := chassis ;
76025: LD_ADDR_OWVAR 37
76029: PUSH
76030: LD_VAR 0 1
76034: ST_TO_ADDR
// vc_engine := engine ;
76035: LD_ADDR_OWVAR 39
76039: PUSH
76040: LD_VAR 0 2
76044: ST_TO_ADDR
// vc_control := control ;
76045: LD_ADDR_OWVAR 38
76049: PUSH
76050: LD_VAR 0 3
76054: ST_TO_ADDR
// vc_weapon := weapon ;
76055: LD_ADDR_OWVAR 40
76059: PUSH
76060: LD_VAR 0 4
76064: ST_TO_ADDR
// un := CreateVehicle ;
76065: LD_ADDR_VAR 0 8
76069: PUSH
76070: CALL_OW 45
76074: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
76075: LD_VAR 0 8
76079: PPUSH
76080: LD_INT 0
76082: PPUSH
76083: LD_INT 5
76085: PPUSH
76086: CALL_OW 12
76090: PPUSH
76091: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
76095: LD_VAR 0 8
76099: PPUSH
76100: LD_VAR 0 5
76104: PPUSH
76105: LD_VAR 0 6
76109: PPUSH
76110: LD_INT 1
76112: PPUSH
76113: CALL_OW 48
// end ;
76117: LD_VAR 0 7
76121: RET
// export hInvincible ; every 1 do
76122: GO 76124
76124: DISABLE
// hInvincible := [ ] ;
76125: LD_ADDR_EXP 131
76129: PUSH
76130: EMPTY
76131: ST_TO_ADDR
76132: END
// every 10 do var i ;
76133: GO 76135
76135: DISABLE
76136: LD_INT 0
76138: PPUSH
// begin enable ;
76139: ENABLE
// if not hInvincible then
76140: LD_EXP 131
76144: NOT
76145: IFFALSE 76149
// exit ;
76147: GO 76193
// for i in hInvincible do
76149: LD_ADDR_VAR 0 1
76153: PUSH
76154: LD_EXP 131
76158: PUSH
76159: FOR_IN
76160: IFFALSE 76191
// if GetLives ( i ) < 1000 then
76162: LD_VAR 0 1
76166: PPUSH
76167: CALL_OW 256
76171: PUSH
76172: LD_INT 1000
76174: LESS
76175: IFFALSE 76189
// SetLives ( i , 1000 ) ;
76177: LD_VAR 0 1
76181: PPUSH
76182: LD_INT 1000
76184: PPUSH
76185: CALL_OW 234
76189: GO 76159
76191: POP
76192: POP
// end ;
76193: PPOPN 1
76195: END
// export function hHackInvincible ; var i ; begin
76196: LD_INT 0
76198: PPUSH
76199: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
76200: LD_ADDR_VAR 0 2
76204: PUSH
76205: LD_INT 2
76207: PUSH
76208: LD_INT 21
76210: PUSH
76211: LD_INT 1
76213: PUSH
76214: EMPTY
76215: LIST
76216: LIST
76217: PUSH
76218: LD_INT 21
76220: PUSH
76221: LD_INT 2
76223: PUSH
76224: EMPTY
76225: LIST
76226: LIST
76227: PUSH
76228: EMPTY
76229: LIST
76230: LIST
76231: LIST
76232: PPUSH
76233: CALL_OW 69
76237: PUSH
76238: FOR_IN
76239: IFFALSE 76300
// if IsSelected ( i ) then
76241: LD_VAR 0 2
76245: PPUSH
76246: CALL_OW 306
76250: IFFALSE 76298
// begin if i in hInvincible then
76252: LD_VAR 0 2
76256: PUSH
76257: LD_EXP 131
76261: IN
76262: IFFALSE 76282
// hInvincible := hInvincible diff i else
76264: LD_ADDR_EXP 131
76268: PUSH
76269: LD_EXP 131
76273: PUSH
76274: LD_VAR 0 2
76278: DIFF
76279: ST_TO_ADDR
76280: GO 76298
// hInvincible := hInvincible union i ;
76282: LD_ADDR_EXP 131
76286: PUSH
76287: LD_EXP 131
76291: PUSH
76292: LD_VAR 0 2
76296: UNION
76297: ST_TO_ADDR
// end ;
76298: GO 76238
76300: POP
76301: POP
// end ;
76302: LD_VAR 0 1
76306: RET
// export function hHackInvisible ; var i , j ; begin
76307: LD_INT 0
76309: PPUSH
76310: PPUSH
76311: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
76312: LD_ADDR_VAR 0 2
76316: PUSH
76317: LD_INT 21
76319: PUSH
76320: LD_INT 1
76322: PUSH
76323: EMPTY
76324: LIST
76325: LIST
76326: PPUSH
76327: CALL_OW 69
76331: PUSH
76332: FOR_IN
76333: IFFALSE 76357
// if IsSelected ( i ) then
76335: LD_VAR 0 2
76339: PPUSH
76340: CALL_OW 306
76344: IFFALSE 76355
// ComForceInvisible ( i ) ;
76346: LD_VAR 0 2
76350: PPUSH
76351: CALL_OW 496
76355: GO 76332
76357: POP
76358: POP
// end ;
76359: LD_VAR 0 1
76363: RET
// export function hHackChangeYourSide ; begin
76364: LD_INT 0
76366: PPUSH
// if your_side = 8 then
76367: LD_OWVAR 2
76371: PUSH
76372: LD_INT 8
76374: EQUAL
76375: IFFALSE 76387
// your_side := 0 else
76377: LD_ADDR_OWVAR 2
76381: PUSH
76382: LD_INT 0
76384: ST_TO_ADDR
76385: GO 76401
// your_side := your_side + 1 ;
76387: LD_ADDR_OWVAR 2
76391: PUSH
76392: LD_OWVAR 2
76396: PUSH
76397: LD_INT 1
76399: PLUS
76400: ST_TO_ADDR
// end ;
76401: LD_VAR 0 1
76405: RET
// export function hHackChangeUnitSide ; var i , j ; begin
76406: LD_INT 0
76408: PPUSH
76409: PPUSH
76410: PPUSH
// for i in all_units do
76411: LD_ADDR_VAR 0 2
76415: PUSH
76416: LD_OWVAR 3
76420: PUSH
76421: FOR_IN
76422: IFFALSE 76500
// if IsSelected ( i ) then
76424: LD_VAR 0 2
76428: PPUSH
76429: CALL_OW 306
76433: IFFALSE 76498
// begin j := GetSide ( i ) ;
76435: LD_ADDR_VAR 0 3
76439: PUSH
76440: LD_VAR 0 2
76444: PPUSH
76445: CALL_OW 255
76449: ST_TO_ADDR
// if j = 8 then
76450: LD_VAR 0 3
76454: PUSH
76455: LD_INT 8
76457: EQUAL
76458: IFFALSE 76470
// j := 0 else
76460: LD_ADDR_VAR 0 3
76464: PUSH
76465: LD_INT 0
76467: ST_TO_ADDR
76468: GO 76484
// j := j + 1 ;
76470: LD_ADDR_VAR 0 3
76474: PUSH
76475: LD_VAR 0 3
76479: PUSH
76480: LD_INT 1
76482: PLUS
76483: ST_TO_ADDR
// SetSide ( i , j ) ;
76484: LD_VAR 0 2
76488: PPUSH
76489: LD_VAR 0 3
76493: PPUSH
76494: CALL_OW 235
// end ;
76498: GO 76421
76500: POP
76501: POP
// end ;
76502: LD_VAR 0 1
76506: RET
// export function hHackFog ; begin
76507: LD_INT 0
76509: PPUSH
// FogOff ( true ) ;
76510: LD_INT 1
76512: PPUSH
76513: CALL_OW 344
// end ;
76517: LD_VAR 0 1
76521: RET
// export function hHackTeleport ( unit , x , y ) ; begin
76522: LD_INT 0
76524: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
76525: LD_VAR 0 1
76529: PPUSH
76530: LD_VAR 0 2
76534: PPUSH
76535: LD_VAR 0 3
76539: PPUSH
76540: LD_INT 1
76542: PPUSH
76543: LD_INT 1
76545: PPUSH
76546: CALL_OW 483
// CenterOnXY ( x , y ) ;
76550: LD_VAR 0 2
76554: PPUSH
76555: LD_VAR 0 3
76559: PPUSH
76560: CALL_OW 84
// end ; end_of_file
76564: LD_VAR 0 4
76568: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76569: LD_VAR 0 1
76573: PUSH
76574: LD_INT 200
76576: DOUBLE
76577: GREATEREQUAL
76578: IFFALSE 76586
76580: LD_INT 299
76582: DOUBLE
76583: LESSEQUAL
76584: IFTRUE 76588
76586: GO 76620
76588: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76589: LD_VAR 0 1
76593: PPUSH
76594: LD_VAR 0 2
76598: PPUSH
76599: LD_VAR 0 3
76603: PPUSH
76604: LD_VAR 0 4
76608: PPUSH
76609: LD_VAR 0 5
76613: PPUSH
76614: CALL 76864 0 5
76618: GO 76697
76620: LD_INT 300
76622: DOUBLE
76623: GREATEREQUAL
76624: IFFALSE 76632
76626: LD_INT 399
76628: DOUBLE
76629: LESSEQUAL
76630: IFTRUE 76634
76632: GO 76696
76634: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76635: LD_VAR 0 1
76639: PPUSH
76640: LD_VAR 0 2
76644: PPUSH
76645: LD_VAR 0 3
76649: PPUSH
76650: LD_VAR 0 4
76654: PPUSH
76655: LD_VAR 0 5
76659: PPUSH
76660: LD_VAR 0 6
76664: PPUSH
76665: LD_VAR 0 7
76669: PPUSH
76670: LD_VAR 0 8
76674: PPUSH
76675: LD_VAR 0 9
76679: PPUSH
76680: LD_VAR 0 10
76684: PPUSH
76685: LD_VAR 0 11
76689: PPUSH
76690: CALL 74589 0 11
76694: GO 76697
76696: POP
// end ;
76697: PPOPN 11
76699: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76700: LD_VAR 0 1
76704: PPUSH
76705: LD_VAR 0 2
76709: PPUSH
76710: LD_VAR 0 3
76714: PPUSH
76715: LD_VAR 0 4
76719: PPUSH
76720: LD_VAR 0 5
76724: PPUSH
76725: CALL 76846 0 5
// end ; end_of_file
76729: PPOPN 5
76731: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
76732: LD_INT 0
76734: PPUSH
76735: PPUSH
76736: PPUSH
76737: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
76738: LD_VAR 0 1
76742: PPUSH
76743: CALL_OW 264
76747: PUSH
76748: LD_EXP 62
76752: EQUAL
76753: IFFALSE 76825
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
76755: LD_INT 68
76757: PPUSH
76758: LD_VAR 0 1
76762: PPUSH
76763: CALL_OW 255
76767: PPUSH
76768: CALL_OW 321
76772: PUSH
76773: LD_INT 2
76775: EQUAL
76776: IFFALSE 76788
// eff := 70 else
76778: LD_ADDR_VAR 0 4
76782: PUSH
76783: LD_INT 70
76785: ST_TO_ADDR
76786: GO 76796
// eff := 30 ;
76788: LD_ADDR_VAR 0 4
76792: PUSH
76793: LD_INT 30
76795: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
76796: LD_VAR 0 1
76800: PPUSH
76801: CALL_OW 250
76805: PPUSH
76806: LD_VAR 0 1
76810: PPUSH
76811: CALL_OW 251
76815: PPUSH
76816: LD_VAR 0 4
76820: PPUSH
76821: CALL_OW 495
// end ; end ;
76825: LD_VAR 0 2
76829: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
76830: LD_INT 0
76832: PPUSH
// end ;
76833: LD_VAR 0 4
76837: RET
// export function SOS_Command ( cmd ) ; begin
76838: LD_INT 0
76840: PPUSH
// end ;
76841: LD_VAR 0 2
76845: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
76846: LD_INT 0
76848: PPUSH
// if cmd = 121 then
76849: LD_VAR 0 1
76853: PUSH
76854: LD_INT 121
76856: EQUAL
76857: IFFALSE 76859
// end ;
76859: LD_VAR 0 6
76863: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
76864: LD_INT 0
76866: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
76867: LD_VAR 0 1
76871: PUSH
76872: LD_INT 250
76874: EQUAL
76875: PUSH
76876: LD_VAR 0 2
76880: PPUSH
76881: CALL_OW 264
76885: PUSH
76886: LD_EXP 65
76890: EQUAL
76891: AND
76892: IFFALSE 76913
// MinerPlaceMine ( unit , x , y ) ;
76894: LD_VAR 0 2
76898: PPUSH
76899: LD_VAR 0 4
76903: PPUSH
76904: LD_VAR 0 5
76908: PPUSH
76909: CALL 79262 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
76913: LD_VAR 0 1
76917: PUSH
76918: LD_INT 251
76920: EQUAL
76921: PUSH
76922: LD_VAR 0 2
76926: PPUSH
76927: CALL_OW 264
76931: PUSH
76932: LD_EXP 65
76936: EQUAL
76937: AND
76938: IFFALSE 76959
// MinerDetonateMine ( unit , x , y ) ;
76940: LD_VAR 0 2
76944: PPUSH
76945: LD_VAR 0 4
76949: PPUSH
76950: LD_VAR 0 5
76954: PPUSH
76955: CALL 79539 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
76959: LD_VAR 0 1
76963: PUSH
76964: LD_INT 252
76966: EQUAL
76967: PUSH
76968: LD_VAR 0 2
76972: PPUSH
76973: CALL_OW 264
76977: PUSH
76978: LD_EXP 65
76982: EQUAL
76983: AND
76984: IFFALSE 77005
// MinerCreateMinefield ( unit , x , y ) ;
76986: LD_VAR 0 2
76990: PPUSH
76991: LD_VAR 0 4
76995: PPUSH
76996: LD_VAR 0 5
77000: PPUSH
77001: CALL 79956 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
77005: LD_VAR 0 1
77009: PUSH
77010: LD_INT 253
77012: EQUAL
77013: PUSH
77014: LD_VAR 0 2
77018: PPUSH
77019: CALL_OW 257
77023: PUSH
77024: LD_INT 5
77026: EQUAL
77027: AND
77028: IFFALSE 77049
// ComBinocular ( unit , x , y ) ;
77030: LD_VAR 0 2
77034: PPUSH
77035: LD_VAR 0 4
77039: PPUSH
77040: LD_VAR 0 5
77044: PPUSH
77045: CALL 80327 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
77049: LD_VAR 0 1
77053: PUSH
77054: LD_INT 254
77056: EQUAL
77057: PUSH
77058: LD_VAR 0 2
77062: PPUSH
77063: CALL_OW 264
77067: PUSH
77068: LD_EXP 60
77072: EQUAL
77073: AND
77074: PUSH
77075: LD_VAR 0 3
77079: PPUSH
77080: CALL_OW 263
77084: PUSH
77085: LD_INT 3
77087: EQUAL
77088: AND
77089: IFFALSE 77105
// HackDestroyVehicle ( unit , selectedUnit ) ;
77091: LD_VAR 0 2
77095: PPUSH
77096: LD_VAR 0 3
77100: PPUSH
77101: CALL 78622 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
77105: LD_VAR 0 1
77109: PUSH
77110: LD_INT 255
77112: EQUAL
77113: PUSH
77114: LD_VAR 0 2
77118: PPUSH
77119: CALL_OW 264
77123: PUSH
77124: LD_INT 14
77126: PUSH
77127: LD_INT 53
77129: PUSH
77130: EMPTY
77131: LIST
77132: LIST
77133: IN
77134: AND
77135: PUSH
77136: LD_VAR 0 4
77140: PPUSH
77141: LD_VAR 0 5
77145: PPUSH
77146: CALL_OW 488
77150: AND
77151: IFFALSE 77175
// CutTreeXYR ( unit , x , y , 12 ) ;
77153: LD_VAR 0 2
77157: PPUSH
77158: LD_VAR 0 4
77162: PPUSH
77163: LD_VAR 0 5
77167: PPUSH
77168: LD_INT 12
77170: PPUSH
77171: CALL 77188 0 4
// end ;
77175: LD_VAR 0 6
77179: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
77180: LD_INT 0
77182: PPUSH
// end ;
77183: LD_VAR 0 4
77187: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
77188: LD_INT 0
77190: PPUSH
77191: PPUSH
77192: PPUSH
77193: PPUSH
77194: PPUSH
77195: PPUSH
77196: PPUSH
77197: PPUSH
77198: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
77199: LD_VAR 0 1
77203: NOT
77204: PUSH
77205: LD_VAR 0 2
77209: PPUSH
77210: LD_VAR 0 3
77214: PPUSH
77215: CALL_OW 488
77219: NOT
77220: OR
77221: PUSH
77222: LD_VAR 0 4
77226: NOT
77227: OR
77228: IFFALSE 77232
// exit ;
77230: GO 77572
// list := [ ] ;
77232: LD_ADDR_VAR 0 13
77236: PUSH
77237: EMPTY
77238: ST_TO_ADDR
// if x - r < 0 then
77239: LD_VAR 0 2
77243: PUSH
77244: LD_VAR 0 4
77248: MINUS
77249: PUSH
77250: LD_INT 0
77252: LESS
77253: IFFALSE 77265
// min_x := 0 else
77255: LD_ADDR_VAR 0 7
77259: PUSH
77260: LD_INT 0
77262: ST_TO_ADDR
77263: GO 77281
// min_x := x - r ;
77265: LD_ADDR_VAR 0 7
77269: PUSH
77270: LD_VAR 0 2
77274: PUSH
77275: LD_VAR 0 4
77279: MINUS
77280: ST_TO_ADDR
// if y - r < 0 then
77281: LD_VAR 0 3
77285: PUSH
77286: LD_VAR 0 4
77290: MINUS
77291: PUSH
77292: LD_INT 0
77294: LESS
77295: IFFALSE 77307
// min_y := 0 else
77297: LD_ADDR_VAR 0 8
77301: PUSH
77302: LD_INT 0
77304: ST_TO_ADDR
77305: GO 77323
// min_y := y - r ;
77307: LD_ADDR_VAR 0 8
77311: PUSH
77312: LD_VAR 0 3
77316: PUSH
77317: LD_VAR 0 4
77321: MINUS
77322: ST_TO_ADDR
// max_x := x + r ;
77323: LD_ADDR_VAR 0 9
77327: PUSH
77328: LD_VAR 0 2
77332: PUSH
77333: LD_VAR 0 4
77337: PLUS
77338: ST_TO_ADDR
// max_y := y + r ;
77339: LD_ADDR_VAR 0 10
77343: PUSH
77344: LD_VAR 0 3
77348: PUSH
77349: LD_VAR 0 4
77353: PLUS
77354: ST_TO_ADDR
// for _x = min_x to max_x do
77355: LD_ADDR_VAR 0 11
77359: PUSH
77360: DOUBLE
77361: LD_VAR 0 7
77365: DEC
77366: ST_TO_ADDR
77367: LD_VAR 0 9
77371: PUSH
77372: FOR_TO
77373: IFFALSE 77490
// for _y = min_y to max_y do
77375: LD_ADDR_VAR 0 12
77379: PUSH
77380: DOUBLE
77381: LD_VAR 0 8
77385: DEC
77386: ST_TO_ADDR
77387: LD_VAR 0 10
77391: PUSH
77392: FOR_TO
77393: IFFALSE 77486
// begin if not ValidHex ( _x , _y ) then
77395: LD_VAR 0 11
77399: PPUSH
77400: LD_VAR 0 12
77404: PPUSH
77405: CALL_OW 488
77409: NOT
77410: IFFALSE 77414
// continue ;
77412: GO 77392
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
77414: LD_VAR 0 11
77418: PPUSH
77419: LD_VAR 0 12
77423: PPUSH
77424: CALL_OW 351
77428: PUSH
77429: LD_VAR 0 11
77433: PPUSH
77434: LD_VAR 0 12
77438: PPUSH
77439: CALL_OW 554
77443: AND
77444: IFFALSE 77484
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
77446: LD_ADDR_VAR 0 13
77450: PUSH
77451: LD_VAR 0 13
77455: PPUSH
77456: LD_VAR 0 13
77460: PUSH
77461: LD_INT 1
77463: PLUS
77464: PPUSH
77465: LD_VAR 0 11
77469: PUSH
77470: LD_VAR 0 12
77474: PUSH
77475: EMPTY
77476: LIST
77477: LIST
77478: PPUSH
77479: CALL_OW 2
77483: ST_TO_ADDR
// end ;
77484: GO 77392
77486: POP
77487: POP
77488: GO 77372
77490: POP
77491: POP
// if not list then
77492: LD_VAR 0 13
77496: NOT
77497: IFFALSE 77501
// exit ;
77499: GO 77572
// for i in list do
77501: LD_ADDR_VAR 0 6
77505: PUSH
77506: LD_VAR 0 13
77510: PUSH
77511: FOR_IN
77512: IFFALSE 77570
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
77514: LD_VAR 0 1
77518: PPUSH
77519: LD_STRING M
77521: PUSH
77522: LD_VAR 0 6
77526: PUSH
77527: LD_INT 1
77529: ARRAY
77530: PUSH
77531: LD_VAR 0 6
77535: PUSH
77536: LD_INT 2
77538: ARRAY
77539: PUSH
77540: LD_INT 0
77542: PUSH
77543: LD_INT 0
77545: PUSH
77546: LD_INT 0
77548: PUSH
77549: LD_INT 0
77551: PUSH
77552: EMPTY
77553: LIST
77554: LIST
77555: LIST
77556: LIST
77557: LIST
77558: LIST
77559: LIST
77560: PUSH
77561: EMPTY
77562: LIST
77563: PPUSH
77564: CALL_OW 447
77568: GO 77511
77570: POP
77571: POP
// end ;
77572: LD_VAR 0 5
77576: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
77577: LD_EXP 134
77581: NOT
77582: IFFALSE 77632
77584: GO 77586
77586: DISABLE
// begin initHack := true ;
77587: LD_ADDR_EXP 134
77591: PUSH
77592: LD_INT 1
77594: ST_TO_ADDR
// hackTanks := [ ] ;
77595: LD_ADDR_EXP 135
77599: PUSH
77600: EMPTY
77601: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
77602: LD_ADDR_EXP 136
77606: PUSH
77607: EMPTY
77608: ST_TO_ADDR
// hackLimit := 3 ;
77609: LD_ADDR_EXP 137
77613: PUSH
77614: LD_INT 3
77616: ST_TO_ADDR
// hackDist := 12 ;
77617: LD_ADDR_EXP 138
77621: PUSH
77622: LD_INT 12
77624: ST_TO_ADDR
// hackCounter := [ ] ;
77625: LD_ADDR_EXP 139
77629: PUSH
77630: EMPTY
77631: ST_TO_ADDR
// end ;
77632: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
77633: LD_EXP 134
77637: PUSH
77638: LD_INT 34
77640: PUSH
77641: LD_EXP 60
77645: PUSH
77646: EMPTY
77647: LIST
77648: LIST
77649: PPUSH
77650: CALL_OW 69
77654: AND
77655: IFFALSE 77910
77657: GO 77659
77659: DISABLE
77660: LD_INT 0
77662: PPUSH
77663: PPUSH
// begin enable ;
77664: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
77665: LD_ADDR_VAR 0 1
77669: PUSH
77670: LD_INT 34
77672: PUSH
77673: LD_EXP 60
77677: PUSH
77678: EMPTY
77679: LIST
77680: LIST
77681: PPUSH
77682: CALL_OW 69
77686: PUSH
77687: FOR_IN
77688: IFFALSE 77908
// begin if not i in hackTanks then
77690: LD_VAR 0 1
77694: PUSH
77695: LD_EXP 135
77699: IN
77700: NOT
77701: IFFALSE 77784
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
77703: LD_ADDR_EXP 135
77707: PUSH
77708: LD_EXP 135
77712: PPUSH
77713: LD_EXP 135
77717: PUSH
77718: LD_INT 1
77720: PLUS
77721: PPUSH
77722: LD_VAR 0 1
77726: PPUSH
77727: CALL_OW 1
77731: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
77732: LD_ADDR_EXP 136
77736: PUSH
77737: LD_EXP 136
77741: PPUSH
77742: LD_EXP 136
77746: PUSH
77747: LD_INT 1
77749: PLUS
77750: PPUSH
77751: EMPTY
77752: PPUSH
77753: CALL_OW 1
77757: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
77758: LD_ADDR_EXP 139
77762: PUSH
77763: LD_EXP 139
77767: PPUSH
77768: LD_EXP 139
77772: PUSH
77773: LD_INT 1
77775: PLUS
77776: PPUSH
77777: EMPTY
77778: PPUSH
77779: CALL_OW 1
77783: ST_TO_ADDR
// end ; if not IsOk ( i ) then
77784: LD_VAR 0 1
77788: PPUSH
77789: CALL_OW 302
77793: NOT
77794: IFFALSE 77807
// begin HackUnlinkAll ( i ) ;
77796: LD_VAR 0 1
77800: PPUSH
77801: CALL 77913 0 1
// continue ;
77805: GO 77687
// end ; HackCheckCapturedStatus ( i ) ;
77807: LD_VAR 0 1
77811: PPUSH
77812: CALL 78356 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
77816: LD_ADDR_VAR 0 2
77820: PUSH
77821: LD_INT 81
77823: PUSH
77824: LD_VAR 0 1
77828: PPUSH
77829: CALL_OW 255
77833: PUSH
77834: EMPTY
77835: LIST
77836: LIST
77837: PUSH
77838: LD_INT 33
77840: PUSH
77841: LD_INT 3
77843: PUSH
77844: EMPTY
77845: LIST
77846: LIST
77847: PUSH
77848: LD_INT 91
77850: PUSH
77851: LD_VAR 0 1
77855: PUSH
77856: LD_EXP 138
77860: PUSH
77861: EMPTY
77862: LIST
77863: LIST
77864: LIST
77865: PUSH
77866: LD_INT 50
77868: PUSH
77869: EMPTY
77870: LIST
77871: PUSH
77872: EMPTY
77873: LIST
77874: LIST
77875: LIST
77876: LIST
77877: PPUSH
77878: CALL_OW 69
77882: ST_TO_ADDR
// if not tmp then
77883: LD_VAR 0 2
77887: NOT
77888: IFFALSE 77892
// continue ;
77890: GO 77687
// HackLink ( i , tmp ) ;
77892: LD_VAR 0 1
77896: PPUSH
77897: LD_VAR 0 2
77901: PPUSH
77902: CALL 78049 0 2
// end ;
77906: GO 77687
77908: POP
77909: POP
// end ;
77910: PPOPN 2
77912: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
77913: LD_INT 0
77915: PPUSH
77916: PPUSH
77917: PPUSH
// if not hack in hackTanks then
77918: LD_VAR 0 1
77922: PUSH
77923: LD_EXP 135
77927: IN
77928: NOT
77929: IFFALSE 77933
// exit ;
77931: GO 78044
// index := GetElementIndex ( hackTanks , hack ) ;
77933: LD_ADDR_VAR 0 4
77937: PUSH
77938: LD_EXP 135
77942: PPUSH
77943: LD_VAR 0 1
77947: PPUSH
77948: CALL 29245 0 2
77952: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
77953: LD_EXP 136
77957: PUSH
77958: LD_VAR 0 4
77962: ARRAY
77963: IFFALSE 78044
// begin for i in hackTanksCaptured [ index ] do
77965: LD_ADDR_VAR 0 3
77969: PUSH
77970: LD_EXP 136
77974: PUSH
77975: LD_VAR 0 4
77979: ARRAY
77980: PUSH
77981: FOR_IN
77982: IFFALSE 78008
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
77984: LD_VAR 0 3
77988: PUSH
77989: LD_INT 1
77991: ARRAY
77992: PPUSH
77993: LD_VAR 0 3
77997: PUSH
77998: LD_INT 2
78000: ARRAY
78001: PPUSH
78002: CALL_OW 235
78006: GO 77981
78008: POP
78009: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
78010: LD_ADDR_EXP 136
78014: PUSH
78015: LD_EXP 136
78019: PPUSH
78020: LD_VAR 0 4
78024: PPUSH
78025: EMPTY
78026: PPUSH
78027: CALL_OW 1
78031: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
78032: LD_VAR 0 1
78036: PPUSH
78037: LD_INT 0
78039: PPUSH
78040: CALL_OW 505
// end ; end ;
78044: LD_VAR 0 2
78048: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
78049: LD_INT 0
78051: PPUSH
78052: PPUSH
78053: PPUSH
// if not hack in hackTanks or not vehicles then
78054: LD_VAR 0 1
78058: PUSH
78059: LD_EXP 135
78063: IN
78064: NOT
78065: PUSH
78066: LD_VAR 0 2
78070: NOT
78071: OR
78072: IFFALSE 78076
// exit ;
78074: GO 78351
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
78076: LD_ADDR_VAR 0 2
78080: PUSH
78081: LD_VAR 0 1
78085: PPUSH
78086: LD_VAR 0 2
78090: PPUSH
78091: LD_INT 1
78093: PPUSH
78094: LD_INT 1
78096: PPUSH
78097: CALL 29895 0 4
78101: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
78102: LD_ADDR_VAR 0 5
78106: PUSH
78107: LD_EXP 135
78111: PPUSH
78112: LD_VAR 0 1
78116: PPUSH
78117: CALL 29245 0 2
78121: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
78122: LD_EXP 136
78126: PUSH
78127: LD_VAR 0 5
78131: ARRAY
78132: PUSH
78133: LD_EXP 137
78137: LESS
78138: IFFALSE 78327
// begin for i := 1 to vehicles do
78140: LD_ADDR_VAR 0 4
78144: PUSH
78145: DOUBLE
78146: LD_INT 1
78148: DEC
78149: ST_TO_ADDR
78150: LD_VAR 0 2
78154: PUSH
78155: FOR_TO
78156: IFFALSE 78325
// begin if hackTanksCaptured [ index ] = hackLimit then
78158: LD_EXP 136
78162: PUSH
78163: LD_VAR 0 5
78167: ARRAY
78168: PUSH
78169: LD_EXP 137
78173: EQUAL
78174: IFFALSE 78178
// break ;
78176: GO 78325
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
78178: LD_ADDR_EXP 139
78182: PUSH
78183: LD_EXP 139
78187: PPUSH
78188: LD_VAR 0 5
78192: PPUSH
78193: LD_EXP 139
78197: PUSH
78198: LD_VAR 0 5
78202: ARRAY
78203: PUSH
78204: LD_INT 1
78206: PLUS
78207: PPUSH
78208: CALL_OW 1
78212: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
78213: LD_ADDR_EXP 136
78217: PUSH
78218: LD_EXP 136
78222: PPUSH
78223: LD_VAR 0 5
78227: PUSH
78228: LD_EXP 136
78232: PUSH
78233: LD_VAR 0 5
78237: ARRAY
78238: PUSH
78239: LD_INT 1
78241: PLUS
78242: PUSH
78243: EMPTY
78244: LIST
78245: LIST
78246: PPUSH
78247: LD_VAR 0 2
78251: PUSH
78252: LD_VAR 0 4
78256: ARRAY
78257: PUSH
78258: LD_VAR 0 2
78262: PUSH
78263: LD_VAR 0 4
78267: ARRAY
78268: PPUSH
78269: CALL_OW 255
78273: PUSH
78274: EMPTY
78275: LIST
78276: LIST
78277: PPUSH
78278: CALL 29460 0 3
78282: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
78283: LD_VAR 0 2
78287: PUSH
78288: LD_VAR 0 4
78292: ARRAY
78293: PPUSH
78294: LD_VAR 0 1
78298: PPUSH
78299: CALL_OW 255
78303: PPUSH
78304: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
78308: LD_VAR 0 2
78312: PUSH
78313: LD_VAR 0 4
78317: ARRAY
78318: PPUSH
78319: CALL_OW 141
// end ;
78323: GO 78155
78325: POP
78326: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78327: LD_VAR 0 1
78331: PPUSH
78332: LD_EXP 136
78336: PUSH
78337: LD_VAR 0 5
78341: ARRAY
78342: PUSH
78343: LD_INT 0
78345: PLUS
78346: PPUSH
78347: CALL_OW 505
// end ;
78351: LD_VAR 0 3
78355: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
78356: LD_INT 0
78358: PPUSH
78359: PPUSH
78360: PPUSH
78361: PPUSH
// if not hack in hackTanks then
78362: LD_VAR 0 1
78366: PUSH
78367: LD_EXP 135
78371: IN
78372: NOT
78373: IFFALSE 78377
// exit ;
78375: GO 78617
// index := GetElementIndex ( hackTanks , hack ) ;
78377: LD_ADDR_VAR 0 4
78381: PUSH
78382: LD_EXP 135
78386: PPUSH
78387: LD_VAR 0 1
78391: PPUSH
78392: CALL 29245 0 2
78396: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
78397: LD_ADDR_VAR 0 3
78401: PUSH
78402: DOUBLE
78403: LD_EXP 136
78407: PUSH
78408: LD_VAR 0 4
78412: ARRAY
78413: INC
78414: ST_TO_ADDR
78415: LD_INT 1
78417: PUSH
78418: FOR_DOWNTO
78419: IFFALSE 78591
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
78421: LD_ADDR_VAR 0 5
78425: PUSH
78426: LD_EXP 136
78430: PUSH
78431: LD_VAR 0 4
78435: ARRAY
78436: PUSH
78437: LD_VAR 0 3
78441: ARRAY
78442: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
78443: LD_VAR 0 5
78447: PUSH
78448: LD_INT 1
78450: ARRAY
78451: PPUSH
78452: CALL_OW 302
78456: NOT
78457: PUSH
78458: LD_VAR 0 5
78462: PUSH
78463: LD_INT 1
78465: ARRAY
78466: PPUSH
78467: CALL_OW 255
78471: PUSH
78472: LD_VAR 0 1
78476: PPUSH
78477: CALL_OW 255
78481: NONEQUAL
78482: OR
78483: IFFALSE 78589
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
78485: LD_VAR 0 5
78489: PUSH
78490: LD_INT 1
78492: ARRAY
78493: PPUSH
78494: CALL_OW 305
78498: PUSH
78499: LD_VAR 0 5
78503: PUSH
78504: LD_INT 1
78506: ARRAY
78507: PPUSH
78508: CALL_OW 255
78512: PUSH
78513: LD_VAR 0 1
78517: PPUSH
78518: CALL_OW 255
78522: EQUAL
78523: AND
78524: IFFALSE 78548
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
78526: LD_VAR 0 5
78530: PUSH
78531: LD_INT 1
78533: ARRAY
78534: PPUSH
78535: LD_VAR 0 5
78539: PUSH
78540: LD_INT 2
78542: ARRAY
78543: PPUSH
78544: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
78548: LD_ADDR_EXP 136
78552: PUSH
78553: LD_EXP 136
78557: PPUSH
78558: LD_VAR 0 4
78562: PPUSH
78563: LD_EXP 136
78567: PUSH
78568: LD_VAR 0 4
78572: ARRAY
78573: PPUSH
78574: LD_VAR 0 3
78578: PPUSH
78579: CALL_OW 3
78583: PPUSH
78584: CALL_OW 1
78588: ST_TO_ADDR
// end ; end ;
78589: GO 78418
78591: POP
78592: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78593: LD_VAR 0 1
78597: PPUSH
78598: LD_EXP 136
78602: PUSH
78603: LD_VAR 0 4
78607: ARRAY
78608: PUSH
78609: LD_INT 0
78611: PLUS
78612: PPUSH
78613: CALL_OW 505
// end ;
78617: LD_VAR 0 2
78621: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
78622: LD_INT 0
78624: PPUSH
78625: PPUSH
78626: PPUSH
78627: PPUSH
// if not hack in hackTanks then
78628: LD_VAR 0 1
78632: PUSH
78633: LD_EXP 135
78637: IN
78638: NOT
78639: IFFALSE 78643
// exit ;
78641: GO 78728
// index := GetElementIndex ( hackTanks , hack ) ;
78643: LD_ADDR_VAR 0 5
78647: PUSH
78648: LD_EXP 135
78652: PPUSH
78653: LD_VAR 0 1
78657: PPUSH
78658: CALL 29245 0 2
78662: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
78663: LD_ADDR_VAR 0 4
78667: PUSH
78668: DOUBLE
78669: LD_INT 1
78671: DEC
78672: ST_TO_ADDR
78673: LD_EXP 136
78677: PUSH
78678: LD_VAR 0 5
78682: ARRAY
78683: PUSH
78684: FOR_TO
78685: IFFALSE 78726
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
78687: LD_EXP 136
78691: PUSH
78692: LD_VAR 0 5
78696: ARRAY
78697: PUSH
78698: LD_VAR 0 4
78702: ARRAY
78703: PUSH
78704: LD_INT 1
78706: ARRAY
78707: PUSH
78708: LD_VAR 0 2
78712: EQUAL
78713: IFFALSE 78724
// KillUnit ( vehicle ) ;
78715: LD_VAR 0 2
78719: PPUSH
78720: CALL_OW 66
78724: GO 78684
78726: POP
78727: POP
// end ;
78728: LD_VAR 0 3
78732: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
78733: LD_EXP 140
78737: NOT
78738: IFFALSE 78773
78740: GO 78742
78742: DISABLE
// begin initMiner := true ;
78743: LD_ADDR_EXP 140
78747: PUSH
78748: LD_INT 1
78750: ST_TO_ADDR
// minersList := [ ] ;
78751: LD_ADDR_EXP 141
78755: PUSH
78756: EMPTY
78757: ST_TO_ADDR
// minerMinesList := [ ] ;
78758: LD_ADDR_EXP 142
78762: PUSH
78763: EMPTY
78764: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
78765: LD_ADDR_EXP 143
78769: PUSH
78770: LD_INT 5
78772: ST_TO_ADDR
// end ;
78773: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
78774: LD_EXP 140
78778: PUSH
78779: LD_INT 34
78781: PUSH
78782: LD_EXP 65
78786: PUSH
78787: EMPTY
78788: LIST
78789: LIST
78790: PPUSH
78791: CALL_OW 69
78795: AND
78796: IFFALSE 79259
78798: GO 78800
78800: DISABLE
78801: LD_INT 0
78803: PPUSH
78804: PPUSH
78805: PPUSH
78806: PPUSH
// begin enable ;
78807: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
78808: LD_ADDR_VAR 0 1
78812: PUSH
78813: LD_INT 34
78815: PUSH
78816: LD_EXP 65
78820: PUSH
78821: EMPTY
78822: LIST
78823: LIST
78824: PPUSH
78825: CALL_OW 69
78829: PUSH
78830: FOR_IN
78831: IFFALSE 78903
// begin if not i in minersList then
78833: LD_VAR 0 1
78837: PUSH
78838: LD_EXP 141
78842: IN
78843: NOT
78844: IFFALSE 78901
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
78846: LD_ADDR_EXP 141
78850: PUSH
78851: LD_EXP 141
78855: PPUSH
78856: LD_EXP 141
78860: PUSH
78861: LD_INT 1
78863: PLUS
78864: PPUSH
78865: LD_VAR 0 1
78869: PPUSH
78870: CALL_OW 1
78874: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
78875: LD_ADDR_EXP 142
78879: PUSH
78880: LD_EXP 142
78884: PPUSH
78885: LD_EXP 142
78889: PUSH
78890: LD_INT 1
78892: PLUS
78893: PPUSH
78894: EMPTY
78895: PPUSH
78896: CALL_OW 1
78900: ST_TO_ADDR
// end end ;
78901: GO 78830
78903: POP
78904: POP
// for i := minerMinesList downto 1 do
78905: LD_ADDR_VAR 0 1
78909: PUSH
78910: DOUBLE
78911: LD_EXP 142
78915: INC
78916: ST_TO_ADDR
78917: LD_INT 1
78919: PUSH
78920: FOR_DOWNTO
78921: IFFALSE 79257
// begin if IsLive ( minersList [ i ] ) then
78923: LD_EXP 141
78927: PUSH
78928: LD_VAR 0 1
78932: ARRAY
78933: PPUSH
78934: CALL_OW 300
78938: IFFALSE 78966
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
78940: LD_EXP 141
78944: PUSH
78945: LD_VAR 0 1
78949: ARRAY
78950: PPUSH
78951: LD_EXP 142
78955: PUSH
78956: LD_VAR 0 1
78960: ARRAY
78961: PPUSH
78962: CALL_OW 505
// if not minerMinesList [ i ] then
78966: LD_EXP 142
78970: PUSH
78971: LD_VAR 0 1
78975: ARRAY
78976: NOT
78977: IFFALSE 78981
// continue ;
78979: GO 78920
// for j := minerMinesList [ i ] downto 1 do
78981: LD_ADDR_VAR 0 2
78985: PUSH
78986: DOUBLE
78987: LD_EXP 142
78991: PUSH
78992: LD_VAR 0 1
78996: ARRAY
78997: INC
78998: ST_TO_ADDR
78999: LD_INT 1
79001: PUSH
79002: FOR_DOWNTO
79003: IFFALSE 79253
// begin side := GetSide ( minersList [ i ] ) ;
79005: LD_ADDR_VAR 0 3
79009: PUSH
79010: LD_EXP 141
79014: PUSH
79015: LD_VAR 0 1
79019: ARRAY
79020: PPUSH
79021: CALL_OW 255
79025: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
79026: LD_ADDR_VAR 0 4
79030: PUSH
79031: LD_EXP 142
79035: PUSH
79036: LD_VAR 0 1
79040: ARRAY
79041: PUSH
79042: LD_VAR 0 2
79046: ARRAY
79047: PUSH
79048: LD_INT 1
79050: ARRAY
79051: PPUSH
79052: LD_EXP 142
79056: PUSH
79057: LD_VAR 0 1
79061: ARRAY
79062: PUSH
79063: LD_VAR 0 2
79067: ARRAY
79068: PUSH
79069: LD_INT 2
79071: ARRAY
79072: PPUSH
79073: CALL_OW 428
79077: ST_TO_ADDR
// if not tmp then
79078: LD_VAR 0 4
79082: NOT
79083: IFFALSE 79087
// continue ;
79085: GO 79002
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
79087: LD_VAR 0 4
79091: PUSH
79092: LD_INT 81
79094: PUSH
79095: LD_VAR 0 3
79099: PUSH
79100: EMPTY
79101: LIST
79102: LIST
79103: PPUSH
79104: CALL_OW 69
79108: IN
79109: PUSH
79110: LD_EXP 142
79114: PUSH
79115: LD_VAR 0 1
79119: ARRAY
79120: PUSH
79121: LD_VAR 0 2
79125: ARRAY
79126: PUSH
79127: LD_INT 1
79129: ARRAY
79130: PPUSH
79131: LD_EXP 142
79135: PUSH
79136: LD_VAR 0 1
79140: ARRAY
79141: PUSH
79142: LD_VAR 0 2
79146: ARRAY
79147: PUSH
79148: LD_INT 2
79150: ARRAY
79151: PPUSH
79152: CALL_OW 458
79156: AND
79157: IFFALSE 79251
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
79159: LD_EXP 142
79163: PUSH
79164: LD_VAR 0 1
79168: ARRAY
79169: PUSH
79170: LD_VAR 0 2
79174: ARRAY
79175: PUSH
79176: LD_INT 1
79178: ARRAY
79179: PPUSH
79180: LD_EXP 142
79184: PUSH
79185: LD_VAR 0 1
79189: ARRAY
79190: PUSH
79191: LD_VAR 0 2
79195: ARRAY
79196: PUSH
79197: LD_INT 2
79199: ARRAY
79200: PPUSH
79201: LD_VAR 0 3
79205: PPUSH
79206: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
79210: LD_ADDR_EXP 142
79214: PUSH
79215: LD_EXP 142
79219: PPUSH
79220: LD_VAR 0 1
79224: PPUSH
79225: LD_EXP 142
79229: PUSH
79230: LD_VAR 0 1
79234: ARRAY
79235: PPUSH
79236: LD_VAR 0 2
79240: PPUSH
79241: CALL_OW 3
79245: PPUSH
79246: CALL_OW 1
79250: ST_TO_ADDR
// end ; end ;
79251: GO 79002
79253: POP
79254: POP
// end ;
79255: GO 78920
79257: POP
79258: POP
// end ;
79259: PPOPN 4
79261: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
79262: LD_INT 0
79264: PPUSH
79265: PPUSH
// result := false ;
79266: LD_ADDR_VAR 0 4
79270: PUSH
79271: LD_INT 0
79273: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
79274: LD_VAR 0 1
79278: PPUSH
79279: CALL_OW 264
79283: PUSH
79284: LD_EXP 65
79288: EQUAL
79289: NOT
79290: IFFALSE 79294
// exit ;
79292: GO 79534
// index := GetElementIndex ( minersList , unit ) ;
79294: LD_ADDR_VAR 0 5
79298: PUSH
79299: LD_EXP 141
79303: PPUSH
79304: LD_VAR 0 1
79308: PPUSH
79309: CALL 29245 0 2
79313: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
79314: LD_EXP 142
79318: PUSH
79319: LD_VAR 0 5
79323: ARRAY
79324: PUSH
79325: LD_EXP 143
79329: GREATEREQUAL
79330: IFFALSE 79334
// exit ;
79332: GO 79534
// ComMoveXY ( unit , x , y ) ;
79334: LD_VAR 0 1
79338: PPUSH
79339: LD_VAR 0 2
79343: PPUSH
79344: LD_VAR 0 3
79348: PPUSH
79349: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
79353: LD_INT 35
79355: PPUSH
79356: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
79360: LD_VAR 0 1
79364: PPUSH
79365: LD_VAR 0 2
79369: PPUSH
79370: LD_VAR 0 3
79374: PPUSH
79375: CALL 60018 0 3
79379: NOT
79380: PUSH
79381: LD_VAR 0 1
79385: PPUSH
79386: CALL_OW 314
79390: AND
79391: IFFALSE 79395
// exit ;
79393: GO 79534
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
79395: LD_VAR 0 2
79399: PPUSH
79400: LD_VAR 0 3
79404: PPUSH
79405: CALL_OW 428
79409: PUSH
79410: LD_VAR 0 1
79414: EQUAL
79415: PUSH
79416: LD_VAR 0 1
79420: PPUSH
79421: CALL_OW 314
79425: NOT
79426: AND
79427: IFFALSE 79353
// PlaySoundXY ( x , y , PlantMine ) ;
79429: LD_VAR 0 2
79433: PPUSH
79434: LD_VAR 0 3
79438: PPUSH
79439: LD_STRING PlantMine
79441: PPUSH
79442: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
79446: LD_VAR 0 2
79450: PPUSH
79451: LD_VAR 0 3
79455: PPUSH
79456: LD_VAR 0 1
79460: PPUSH
79461: CALL_OW 255
79465: PPUSH
79466: LD_INT 0
79468: PPUSH
79469: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
79473: LD_ADDR_EXP 142
79477: PUSH
79478: LD_EXP 142
79482: PPUSH
79483: LD_VAR 0 5
79487: PUSH
79488: LD_EXP 142
79492: PUSH
79493: LD_VAR 0 5
79497: ARRAY
79498: PUSH
79499: LD_INT 1
79501: PLUS
79502: PUSH
79503: EMPTY
79504: LIST
79505: LIST
79506: PPUSH
79507: LD_VAR 0 2
79511: PUSH
79512: LD_VAR 0 3
79516: PUSH
79517: EMPTY
79518: LIST
79519: LIST
79520: PPUSH
79521: CALL 29460 0 3
79525: ST_TO_ADDR
// result := true ;
79526: LD_ADDR_VAR 0 4
79530: PUSH
79531: LD_INT 1
79533: ST_TO_ADDR
// end ;
79534: LD_VAR 0 4
79538: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
79539: LD_INT 0
79541: PPUSH
79542: PPUSH
79543: PPUSH
// if not unit in minersList then
79544: LD_VAR 0 1
79548: PUSH
79549: LD_EXP 141
79553: IN
79554: NOT
79555: IFFALSE 79559
// exit ;
79557: GO 79951
// index := GetElementIndex ( minersList , unit ) ;
79559: LD_ADDR_VAR 0 6
79563: PUSH
79564: LD_EXP 141
79568: PPUSH
79569: LD_VAR 0 1
79573: PPUSH
79574: CALL 29245 0 2
79578: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
79579: LD_ADDR_VAR 0 5
79583: PUSH
79584: DOUBLE
79585: LD_EXP 142
79589: PUSH
79590: LD_VAR 0 6
79594: ARRAY
79595: INC
79596: ST_TO_ADDR
79597: LD_INT 1
79599: PUSH
79600: FOR_DOWNTO
79601: IFFALSE 79762
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
79603: LD_EXP 142
79607: PUSH
79608: LD_VAR 0 6
79612: ARRAY
79613: PUSH
79614: LD_VAR 0 5
79618: ARRAY
79619: PUSH
79620: LD_INT 1
79622: ARRAY
79623: PUSH
79624: LD_VAR 0 2
79628: EQUAL
79629: PUSH
79630: LD_EXP 142
79634: PUSH
79635: LD_VAR 0 6
79639: ARRAY
79640: PUSH
79641: LD_VAR 0 5
79645: ARRAY
79646: PUSH
79647: LD_INT 2
79649: ARRAY
79650: PUSH
79651: LD_VAR 0 3
79655: EQUAL
79656: AND
79657: IFFALSE 79760
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
79659: LD_EXP 142
79663: PUSH
79664: LD_VAR 0 6
79668: ARRAY
79669: PUSH
79670: LD_VAR 0 5
79674: ARRAY
79675: PUSH
79676: LD_INT 1
79678: ARRAY
79679: PPUSH
79680: LD_EXP 142
79684: PUSH
79685: LD_VAR 0 6
79689: ARRAY
79690: PUSH
79691: LD_VAR 0 5
79695: ARRAY
79696: PUSH
79697: LD_INT 2
79699: ARRAY
79700: PPUSH
79701: LD_VAR 0 1
79705: PPUSH
79706: CALL_OW 255
79710: PPUSH
79711: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
79715: LD_ADDR_EXP 142
79719: PUSH
79720: LD_EXP 142
79724: PPUSH
79725: LD_VAR 0 6
79729: PPUSH
79730: LD_EXP 142
79734: PUSH
79735: LD_VAR 0 6
79739: ARRAY
79740: PPUSH
79741: LD_VAR 0 5
79745: PPUSH
79746: CALL_OW 3
79750: PPUSH
79751: CALL_OW 1
79755: ST_TO_ADDR
// exit ;
79756: POP
79757: POP
79758: GO 79951
// end ; end ;
79760: GO 79600
79762: POP
79763: POP
// for i := minerMinesList [ index ] downto 1 do
79764: LD_ADDR_VAR 0 5
79768: PUSH
79769: DOUBLE
79770: LD_EXP 142
79774: PUSH
79775: LD_VAR 0 6
79779: ARRAY
79780: INC
79781: ST_TO_ADDR
79782: LD_INT 1
79784: PUSH
79785: FOR_DOWNTO
79786: IFFALSE 79949
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
79788: LD_EXP 142
79792: PUSH
79793: LD_VAR 0 6
79797: ARRAY
79798: PUSH
79799: LD_VAR 0 5
79803: ARRAY
79804: PUSH
79805: LD_INT 1
79807: ARRAY
79808: PPUSH
79809: LD_EXP 142
79813: PUSH
79814: LD_VAR 0 6
79818: ARRAY
79819: PUSH
79820: LD_VAR 0 5
79824: ARRAY
79825: PUSH
79826: LD_INT 2
79828: ARRAY
79829: PPUSH
79830: LD_VAR 0 2
79834: PPUSH
79835: LD_VAR 0 3
79839: PPUSH
79840: CALL_OW 298
79844: PUSH
79845: LD_INT 6
79847: LESS
79848: IFFALSE 79947
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
79850: LD_EXP 142
79854: PUSH
79855: LD_VAR 0 6
79859: ARRAY
79860: PUSH
79861: LD_VAR 0 5
79865: ARRAY
79866: PUSH
79867: LD_INT 1
79869: ARRAY
79870: PPUSH
79871: LD_EXP 142
79875: PUSH
79876: LD_VAR 0 6
79880: ARRAY
79881: PUSH
79882: LD_VAR 0 5
79886: ARRAY
79887: PUSH
79888: LD_INT 2
79890: ARRAY
79891: PPUSH
79892: LD_VAR 0 1
79896: PPUSH
79897: CALL_OW 255
79901: PPUSH
79902: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
79906: LD_ADDR_EXP 142
79910: PUSH
79911: LD_EXP 142
79915: PPUSH
79916: LD_VAR 0 6
79920: PPUSH
79921: LD_EXP 142
79925: PUSH
79926: LD_VAR 0 6
79930: ARRAY
79931: PPUSH
79932: LD_VAR 0 5
79936: PPUSH
79937: CALL_OW 3
79941: PPUSH
79942: CALL_OW 1
79946: ST_TO_ADDR
// end ; end ;
79947: GO 79785
79949: POP
79950: POP
// end ;
79951: LD_VAR 0 4
79955: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
79956: LD_INT 0
79958: PPUSH
79959: PPUSH
79960: PPUSH
79961: PPUSH
79962: PPUSH
79963: PPUSH
79964: PPUSH
79965: PPUSH
79966: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
79967: LD_VAR 0 1
79971: PPUSH
79972: CALL_OW 264
79976: PUSH
79977: LD_EXP 65
79981: EQUAL
79982: NOT
79983: PUSH
79984: LD_VAR 0 1
79988: PUSH
79989: LD_EXP 141
79993: IN
79994: NOT
79995: OR
79996: IFFALSE 80000
// exit ;
79998: GO 80322
// index := GetElementIndex ( minersList , unit ) ;
80000: LD_ADDR_VAR 0 6
80004: PUSH
80005: LD_EXP 141
80009: PPUSH
80010: LD_VAR 0 1
80014: PPUSH
80015: CALL 29245 0 2
80019: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
80020: LD_ADDR_VAR 0 8
80024: PUSH
80025: LD_EXP 143
80029: PUSH
80030: LD_EXP 142
80034: PUSH
80035: LD_VAR 0 6
80039: ARRAY
80040: MINUS
80041: ST_TO_ADDR
// if not minesFreeAmount then
80042: LD_VAR 0 8
80046: NOT
80047: IFFALSE 80051
// exit ;
80049: GO 80322
// tmp := [ ] ;
80051: LD_ADDR_VAR 0 7
80055: PUSH
80056: EMPTY
80057: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
80058: LD_ADDR_VAR 0 5
80062: PUSH
80063: DOUBLE
80064: LD_INT 1
80066: DEC
80067: ST_TO_ADDR
80068: LD_VAR 0 8
80072: PUSH
80073: FOR_TO
80074: IFFALSE 80269
// begin _d := rand ( 0 , 5 ) ;
80076: LD_ADDR_VAR 0 11
80080: PUSH
80081: LD_INT 0
80083: PPUSH
80084: LD_INT 5
80086: PPUSH
80087: CALL_OW 12
80091: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
80092: LD_ADDR_VAR 0 12
80096: PUSH
80097: LD_INT 2
80099: PPUSH
80100: LD_INT 6
80102: PPUSH
80103: CALL_OW 12
80107: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
80108: LD_ADDR_VAR 0 9
80112: PUSH
80113: LD_VAR 0 2
80117: PPUSH
80118: LD_VAR 0 11
80122: PPUSH
80123: LD_VAR 0 12
80127: PPUSH
80128: CALL_OW 272
80132: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
80133: LD_ADDR_VAR 0 10
80137: PUSH
80138: LD_VAR 0 3
80142: PPUSH
80143: LD_VAR 0 11
80147: PPUSH
80148: LD_VAR 0 12
80152: PPUSH
80153: CALL_OW 273
80157: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
80158: LD_VAR 0 9
80162: PPUSH
80163: LD_VAR 0 10
80167: PPUSH
80168: CALL_OW 488
80172: PUSH
80173: LD_VAR 0 9
80177: PUSH
80178: LD_VAR 0 10
80182: PUSH
80183: EMPTY
80184: LIST
80185: LIST
80186: PUSH
80187: LD_VAR 0 7
80191: IN
80192: NOT
80193: AND
80194: PUSH
80195: LD_VAR 0 9
80199: PPUSH
80200: LD_VAR 0 10
80204: PPUSH
80205: CALL_OW 458
80209: NOT
80210: AND
80211: IFFALSE 80253
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
80213: LD_ADDR_VAR 0 7
80217: PUSH
80218: LD_VAR 0 7
80222: PPUSH
80223: LD_VAR 0 7
80227: PUSH
80228: LD_INT 1
80230: PLUS
80231: PPUSH
80232: LD_VAR 0 9
80236: PUSH
80237: LD_VAR 0 10
80241: PUSH
80242: EMPTY
80243: LIST
80244: LIST
80245: PPUSH
80246: CALL_OW 1
80250: ST_TO_ADDR
80251: GO 80267
// i := i - 1 ;
80253: LD_ADDR_VAR 0 5
80257: PUSH
80258: LD_VAR 0 5
80262: PUSH
80263: LD_INT 1
80265: MINUS
80266: ST_TO_ADDR
// end ;
80267: GO 80073
80269: POP
80270: POP
// for i in tmp do
80271: LD_ADDR_VAR 0 5
80275: PUSH
80276: LD_VAR 0 7
80280: PUSH
80281: FOR_IN
80282: IFFALSE 80320
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
80284: LD_VAR 0 1
80288: PPUSH
80289: LD_VAR 0 5
80293: PUSH
80294: LD_INT 1
80296: ARRAY
80297: PPUSH
80298: LD_VAR 0 5
80302: PUSH
80303: LD_INT 2
80305: ARRAY
80306: PPUSH
80307: CALL 79262 0 3
80311: NOT
80312: IFFALSE 80318
// exit ;
80314: POP
80315: POP
80316: GO 80322
80318: GO 80281
80320: POP
80321: POP
// end ;
80322: LD_VAR 0 4
80326: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
80327: LD_INT 0
80329: PPUSH
80330: PPUSH
80331: PPUSH
80332: PPUSH
80333: PPUSH
80334: PPUSH
80335: PPUSH
// if not GetClass ( unit ) = class_sniper then
80336: LD_VAR 0 1
80340: PPUSH
80341: CALL_OW 257
80345: PUSH
80346: LD_INT 5
80348: EQUAL
80349: NOT
80350: IFFALSE 80354
// exit ;
80352: GO 80742
// dist := 8 ;
80354: LD_ADDR_VAR 0 5
80358: PUSH
80359: LD_INT 8
80361: ST_TO_ADDR
// viewRange := 12 ;
80362: LD_ADDR_VAR 0 7
80366: PUSH
80367: LD_INT 12
80369: ST_TO_ADDR
// side := GetSide ( unit ) ;
80370: LD_ADDR_VAR 0 6
80374: PUSH
80375: LD_VAR 0 1
80379: PPUSH
80380: CALL_OW 255
80384: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
80385: LD_INT 61
80387: PPUSH
80388: LD_VAR 0 6
80392: PPUSH
80393: CALL_OW 321
80397: PUSH
80398: LD_INT 2
80400: EQUAL
80401: IFFALSE 80411
// viewRange := 16 ;
80403: LD_ADDR_VAR 0 7
80407: PUSH
80408: LD_INT 16
80410: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
80411: LD_VAR 0 1
80415: PPUSH
80416: LD_VAR 0 2
80420: PPUSH
80421: LD_VAR 0 3
80425: PPUSH
80426: CALL_OW 297
80430: PUSH
80431: LD_VAR 0 5
80435: GREATER
80436: IFFALSE 80515
// begin ComMoveXY ( unit , x , y ) ;
80438: LD_VAR 0 1
80442: PPUSH
80443: LD_VAR 0 2
80447: PPUSH
80448: LD_VAR 0 3
80452: PPUSH
80453: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
80457: LD_INT 35
80459: PPUSH
80460: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
80464: LD_VAR 0 1
80468: PPUSH
80469: LD_VAR 0 2
80473: PPUSH
80474: LD_VAR 0 3
80478: PPUSH
80479: CALL 60018 0 3
80483: NOT
80484: IFFALSE 80488
// exit ;
80486: GO 80742
// until GetDistUnitXY ( unit , x , y ) < dist ;
80488: LD_VAR 0 1
80492: PPUSH
80493: LD_VAR 0 2
80497: PPUSH
80498: LD_VAR 0 3
80502: PPUSH
80503: CALL_OW 297
80507: PUSH
80508: LD_VAR 0 5
80512: LESS
80513: IFFALSE 80457
// end ; ComTurnXY ( unit , x , y ) ;
80515: LD_VAR 0 1
80519: PPUSH
80520: LD_VAR 0 2
80524: PPUSH
80525: LD_VAR 0 3
80529: PPUSH
80530: CALL_OW 118
// wait ( 5 ) ;
80534: LD_INT 5
80536: PPUSH
80537: CALL_OW 67
// _d := GetDir ( unit ) ;
80541: LD_ADDR_VAR 0 10
80545: PUSH
80546: LD_VAR 0 1
80550: PPUSH
80551: CALL_OW 254
80555: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
80556: LD_ADDR_VAR 0 8
80560: PUSH
80561: LD_VAR 0 1
80565: PPUSH
80566: CALL_OW 250
80570: PPUSH
80571: LD_VAR 0 10
80575: PPUSH
80576: LD_VAR 0 5
80580: PPUSH
80581: CALL_OW 272
80585: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
80586: LD_ADDR_VAR 0 9
80590: PUSH
80591: LD_VAR 0 1
80595: PPUSH
80596: CALL_OW 251
80600: PPUSH
80601: LD_VAR 0 10
80605: PPUSH
80606: LD_VAR 0 5
80610: PPUSH
80611: CALL_OW 273
80615: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80616: LD_VAR 0 8
80620: PPUSH
80621: LD_VAR 0 9
80625: PPUSH
80626: CALL_OW 488
80630: NOT
80631: IFFALSE 80635
// exit ;
80633: GO 80742
// ComAnimCustom ( unit , 1 ) ;
80635: LD_VAR 0 1
80639: PPUSH
80640: LD_INT 1
80642: PPUSH
80643: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
80647: LD_VAR 0 8
80651: PPUSH
80652: LD_VAR 0 9
80656: PPUSH
80657: LD_VAR 0 6
80661: PPUSH
80662: LD_VAR 0 7
80666: PPUSH
80667: CALL_OW 330
// repeat wait ( 1 ) ;
80671: LD_INT 1
80673: PPUSH
80674: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
80678: LD_VAR 0 1
80682: PPUSH
80683: CALL_OW 316
80687: PUSH
80688: LD_VAR 0 1
80692: PPUSH
80693: CALL_OW 314
80697: OR
80698: PUSH
80699: LD_VAR 0 1
80703: PPUSH
80704: CALL_OW 302
80708: NOT
80709: OR
80710: PUSH
80711: LD_VAR 0 1
80715: PPUSH
80716: CALL_OW 301
80720: OR
80721: IFFALSE 80671
// RemoveSeeing ( _x , _y , side ) ;
80723: LD_VAR 0 8
80727: PPUSH
80728: LD_VAR 0 9
80732: PPUSH
80733: LD_VAR 0 6
80737: PPUSH
80738: CALL_OW 331
// end ; end_of_file
80742: LD_VAR 0 4
80746: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80747: LD_VAR 0 1
80751: PPUSH
80752: LD_VAR 0 2
80756: PPUSH
80757: LD_VAR 0 3
80761: PPUSH
80762: LD_VAR 0 4
80766: PPUSH
80767: LD_VAR 0 5
80771: PPUSH
80772: LD_VAR 0 6
80776: PPUSH
80777: CALL 63397 0 6
// end ;
80781: PPOPN 6
80783: END
