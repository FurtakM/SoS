// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 10248 0 2
// PrepareArabian ;
  32: CALL 501 0 0
// PrepareRussian ;
  36: CALL 11039 0 0
// Action ;
  40: CALL 19230 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin , buildingsFromPrev , gameActive , rolfAttack , collectedOil ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// buildingsFromPrev := LoadVariable ( 05_Buildings , [ ] ) ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_STRING 05_Buildings
 116: PPUSH
 117: EMPTY
 118: PPUSH
 119: CALL_OW 30
 123: ST_TO_ADDR
// bergkampfArrived := false ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// omarArrived := false ;
 132: LD_ADDR_EXP 6
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// outpostDestroyed := false ;
 140: LD_ADDR_EXP 4
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// ruLoseCounter := 0 ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// rolfScriptBase := false ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// omarScriptBase := false ;
 164: LD_ADDR_EXP 10
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// linkedWithRolf := 0 ;
 172: LD_ADDR_EXP 12
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 180: LD_ADDR_EXP 26
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// rolfDied := false ;
 188: LD_ADDR_EXP 13
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// leninSpotted := false ;
 196: LD_ADDR_EXP 14
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// mortarConstructed := false ;
 204: LD_ADDR_EXP 15
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// rolfHasVehicles := false ;
 212: LD_ADDR_EXP 16
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// leninScriptBase := true ;
 220: LD_ADDR_EXP 11
 224: PUSH
 225: LD_INT 1
 227: ST_TO_ADDR
// rolfWantVehicles := false ;
 228: LD_ADDR_EXP 17
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// omarWantVehicles := false ;
 236: LD_ADDR_EXP 18
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// omarHasVehicles := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// escapeAllowed := false ;
 252: LD_ADDR_EXP 24
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 19
 264: PUSH
 265: LD_INT 31500
 267: PUSH
 268: LD_INT 28350
 270: PUSH
 271: LD_INT 25900
 273: PUSH
 274: LD_INT 24150
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 289: LD_ADDR_EXP 20
 293: PUSH
 294: LD_INT 31500
 296: PUSH
 297: LD_INT 28350
 299: PUSH
 300: LD_INT 25900
 302: PUSH
 303: LD_INT 24150
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: LD_OWVAR 67
 316: ARRAY
 317: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 318: LD_ADDR_EXP 21
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: LD_INT 5
 328: PUSH
 329: LD_INT 6
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_OWVAR 67
 345: ARRAY
 346: ST_TO_ADDR
// omarAttack := false ;
 347: LD_ADDR_EXP 23
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// disableAttackOnHeike := false ;
 355: LD_ADDR_EXP 27
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// escapeTimer := 8 8$30 ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 17850
 370: ST_TO_ADDR
// firstAttack := true ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// canRolfJoin := true ;
 379: LD_ADDR_EXP 29
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// gameActive := false ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 0
 394: ST_TO_ADDR
// rolfAttack := false ;
 395: LD_ADDR_EXP 32
 399: PUSH
 400: LD_INT 0
 402: ST_TO_ADDR
// collectedOil := 0 ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 0
 410: ST_TO_ADDR
// end ;
 411: LD_VAR 0 1
 415: RET
// every 0 0$2 trigger GetSide ( Rolf ) = 2 and IsOk ( Rolf ) and not omarArrived do
 416: LD_EXP 47
 420: PPUSH
 421: CALL_OW 255
 425: PUSH
 426: LD_INT 2
 428: EQUAL
 429: PUSH
 430: LD_EXP 47
 434: PPUSH
 435: CALL_OW 302
 439: AND
 440: PUSH
 441: LD_EXP 6
 445: NOT
 446: AND
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_ROLF ) ;
 452: LD_STRING ACH_ROLF
 454: PPUSH
 455: CALL_OW 543
 459: END
// every 0 0$2 trigger collectedOil >= 300 do
 460: LD_EXP 33
 464: PUSH
 465: LD_INT 300
 467: GREATEREQUAL
 468: IFFALSE 480
 470: GO 472
 472: DISABLE
// SetAchievement ( ACH_OIL ) ;
 473: LD_STRING ACH_OIL
 475: PPUSH
 476: CALL_OW 543
 480: END
// every 0 0$2 trigger IsDead ( ruLenin ) do
 481: LD_INT 52
 483: PPUSH
 484: CALL_OW 301
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_LENIN ) ; end_of_file
 493: LD_STRING ACH_LENIN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , veh , tmp , limiter ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
 506: PPUSH
 507: PPUSH
 508: PPUSH
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
 515: PPUSH
 516: PPUSH
// uc_nation := 2 ;
 517: LD_ADDR_OWVAR 21
 521: PUSH
 522: LD_INT 2
 524: ST_TO_ADDR
// uc_side := 5 ;
 525: LD_ADDR_OWVAR 20
 529: PUSH
 530: LD_INT 5
 532: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 533: LD_ADDR_EXP 42
 537: PUSH
 538: LD_STRING Abdul
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: LD_STRING 
 546: PPUSH
 547: CALL 29443 0 3
 551: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 552: LD_ADDR_EXP 44
 556: PUSH
 557: LD_STRING Omar
 559: PPUSH
 560: LD_INT 0
 562: PPUSH
 563: LD_STRING 
 565: PPUSH
 566: CALL 29443 0 3
 570: ST_TO_ADDR
// uc_side := 2 ;
 571: LD_ADDR_OWVAR 20
 575: PUSH
 576: LD_INT 2
 578: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 579: LD_ADDR_EXP 34
 583: PUSH
 584: LD_STRING Heike
 586: PPUSH
 587: LD_EXP 1
 591: NOT
 592: PPUSH
 593: LD_EXP 2
 597: PPUSH
 598: CALL 29443 0 3
 602: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 603: LD_ADDR_EXP 37
 607: PUSH
 608: LD_STRING Ibrahim
 610: PPUSH
 611: LD_EXP 1
 615: NOT
 616: PPUSH
 617: LD_EXP 2
 621: PPUSH
 622: CALL 29443 0 3
 626: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 627: LD_ADDR_EXP 35
 631: PUSH
 632: LD_STRING Givi
 634: PPUSH
 635: LD_EXP 1
 639: NOT
 640: PPUSH
 641: LD_EXP 2
 645: PPUSH
 646: CALL 29443 0 3
 650: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 651: LD_ADDR_EXP 38
 655: PUSH
 656: LD_STRING Kamil
 658: PPUSH
 659: LD_EXP 1
 663: NOT
 664: PPUSH
 665: LD_EXP 2
 669: PPUSH
 670: CALL 29443 0 3
 674: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 675: LD_ADDR_EXP 39
 679: PUSH
 680: LD_STRING Kaia
 682: PPUSH
 683: LD_EXP 1
 687: NOT
 688: PPUSH
 689: LD_EXP 2
 693: PPUSH
 694: CALL 29443 0 3
 698: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 699: LD_ADDR_EXP 40
 703: PUSH
 704: LD_STRING Sophia
 706: PPUSH
 707: LD_EXP 1
 711: NOT
 712: PPUSH
 713: LD_EXP 2
 717: PPUSH
 718: CALL 29443 0 3
 722: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 723: LD_ADDR_EXP 41
 727: PUSH
 728: LD_STRING Markov
 730: PPUSH
 731: LD_EXP 1
 735: NOT
 736: PPUSH
 737: LD_EXP 2
 741: PPUSH
 742: CALL 29443 0 3
 746: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 747: LD_ADDR_EXP 46
 751: PUSH
 752: LD_STRING Aviradze
 754: PPUSH
 755: LD_EXP 1
 759: NOT
 760: PPUSH
 761: LD_EXP 2
 765: PPUSH
 766: CALL 29443 0 3
 770: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 771: LD_ADDR_EXP 45
 775: PUSH
 776: LD_STRING Kurt
 778: PPUSH
 779: LD_EXP 1
 783: NOT
 784: PPUSH
 785: LD_EXP 2
 789: PPUSH
 790: CALL 29443 0 3
 794: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 795: LD_ADDR_EXP 36
 799: PUSH
 800: LD_STRING Mike
 802: PPUSH
 803: LD_EXP 1
 807: NOT
 808: PPUSH
 809: LD_EXP 2
 813: PPUSH
 814: CALL 29443 0 3
 818: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 819: LD_ADDR_EXP 43
 823: PUSH
 824: LD_STRING Olaf
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_STRING 
 832: PPUSH
 833: CALL 29443 0 3
 837: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 838: LD_ADDR_EXP 49
 842: PUSH
 843: LD_STRING 05_others
 845: PPUSH
 846: CALL_OW 31
 850: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 851: LD_ADDR_EXP 50
 855: PUSH
 856: LD_STRING 05_apes
 858: PPUSH
 859: CALL_OW 31
 863: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_STRING 05_Radar
 871: PPUSH
 872: LD_EXP 1
 876: PPUSH
 877: CALL_OW 30
 881: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 882: LD_ADDR_VAR 0 6
 886: PUSH
 887: LD_STRING 05_RemoteControl
 889: PPUSH
 890: LD_EXP 1
 894: PPUSH
 895: CALL_OW 30
 899: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 900: LD_ADDR_VAR 0 7
 904: PUSH
 905: LD_STRING 05_DrugsTested
 907: PPUSH
 908: LD_EXP 1
 912: PPUSH
 913: CALL_OW 30
 917: ST_TO_ADDR
// if hasDrugs then
 918: LD_VAR 0 7
 922: IFFALSE 937
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 924: LD_INT 5
 926: PPUSH
 927: LD_INT 2
 929: PPUSH
 930: LD_INT 2
 932: PPUSH
 933: CALL_OW 322
// if hasRadar then
 937: LD_VAR 0 5
 941: IFFALSE 956
// SetTech ( tech_radar , 2 , state_researched ) ;
 943: LD_INT 6
 945: PPUSH
 946: LD_INT 2
 948: PPUSH
 949: LD_INT 2
 951: PPUSH
 952: CALL_OW 322
// if hasRemote then
 956: LD_VAR 0 6
 960: IFFALSE 975
// SetTech ( tech_remCont , 2 , state_researched ) ;
 962: LD_INT 15
 964: PPUSH
 965: LD_INT 2
 967: PPUSH
 968: LD_INT 2
 970: PPUSH
 971: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 975: LD_ADDR_VAR 0 13
 979: PUSH
 980: LD_INT 5
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 517
 990: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 991: LD_ADDR_VAR 0 2
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 13
1005: PUSH
1006: LD_INT 1
1008: ARRAY
1009: PUSH
1010: FOR_TO
1011: IFFALSE 1088
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
1013: LD_VAR 0 13
1017: PUSH
1018: LD_INT 1
1020: ARRAY
1021: PUSH
1022: LD_VAR 0 2
1026: ARRAY
1027: PPUSH
1028: LD_VAR 0 13
1032: PUSH
1033: LD_INT 2
1035: ARRAY
1036: PUSH
1037: LD_VAR 0 2
1041: ARRAY
1042: PPUSH
1043: CALL_OW 351
1047: IFFALSE 1086
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
1049: LD_VAR 0 13
1053: PUSH
1054: LD_INT 1
1056: ARRAY
1057: PUSH
1058: LD_VAR 0 2
1062: ARRAY
1063: PPUSH
1064: LD_VAR 0 13
1068: PUSH
1069: LD_INT 2
1071: ARRAY
1072: PUSH
1073: LD_VAR 0 2
1077: ARRAY
1078: PPUSH
1079: LD_INT 2
1081: PPUSH
1082: CALL_OW 244
1086: GO 1010
1088: POP
1089: POP
// base := [ ] ;
1090: LD_ADDR_VAR 0 4
1094: PUSH
1095: EMPTY
1096: ST_TO_ADDR
// if debug then
1097: LD_EXP 1
1101: IFFALSE 1151
// begin base := [ [ b_warehouse , 51 , 77 , 1 , nation_russian , 3 , 0 , 0 , 0 ] , ] ;
1103: LD_ADDR_VAR 0 4
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 51
1113: PUSH
1114: LD_INT 77
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 3
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: LD_INT 0
1128: PUSH
1129: LD_INT 0
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: ST_TO_ADDR
// end else
1149: GO 1167
// if buildingsFromPrev then
1151: LD_EXP 30
1155: IFFALSE 1167
// base := buildingsFromPrev ;
1157: LD_ADDR_VAR 0 4
1161: PUSH
1162: LD_EXP 30
1166: ST_TO_ADDR
// if base then
1167: LD_VAR 0 4
1171: IFFALSE 1369
// for i := 1 to base do
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: DOUBLE
1179: LD_INT 1
1181: DEC
1182: ST_TO_ADDR
1183: LD_VAR 0 4
1187: PUSH
1188: FOR_TO
1189: IFFALSE 1367
// base := Replace ( base , i , [ base [ i ] [ 1 ] , base [ i ] [ 2 ] + 155 , base [ i ] [ 3 ] + 3 , base [ i ] [ 4 ] , base [ i ] [ 5 ] , base [ i ] [ 6 ] , base [ i ] [ 7 ] , base [ i ] [ 8 ] , base [ i ] [ 9 ] ] ) ;
1191: LD_ADDR_VAR 0 4
1195: PUSH
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_VAR 0 2
1205: PPUSH
1206: LD_VAR 0 4
1210: PUSH
1211: LD_VAR 0 2
1215: ARRAY
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_VAR 0 2
1230: ARRAY
1231: PUSH
1232: LD_INT 2
1234: ARRAY
1235: PUSH
1236: LD_INT 155
1238: PLUS
1239: PUSH
1240: LD_VAR 0 4
1244: PUSH
1245: LD_VAR 0 2
1249: ARRAY
1250: PUSH
1251: LD_INT 3
1253: ARRAY
1254: PUSH
1255: LD_INT 3
1257: PLUS
1258: PUSH
1259: LD_VAR 0 4
1263: PUSH
1264: LD_VAR 0 2
1268: ARRAY
1269: PUSH
1270: LD_INT 4
1272: ARRAY
1273: PUSH
1274: LD_VAR 0 4
1278: PUSH
1279: LD_VAR 0 2
1283: ARRAY
1284: PUSH
1285: LD_INT 5
1287: ARRAY
1288: PUSH
1289: LD_VAR 0 4
1293: PUSH
1294: LD_VAR 0 2
1298: ARRAY
1299: PUSH
1300: LD_INT 6
1302: ARRAY
1303: PUSH
1304: LD_VAR 0 4
1308: PUSH
1309: LD_VAR 0 2
1313: ARRAY
1314: PUSH
1315: LD_INT 7
1317: ARRAY
1318: PUSH
1319: LD_VAR 0 4
1323: PUSH
1324: LD_VAR 0 2
1328: ARRAY
1329: PUSH
1330: LD_INT 8
1332: ARRAY
1333: PUSH
1334: LD_VAR 0 4
1338: PUSH
1339: LD_VAR 0 2
1343: ARRAY
1344: PUSH
1345: LD_INT 9
1347: ARRAY
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: PPUSH
1360: CALL_OW 1
1364: ST_TO_ADDR
1365: GO 1188
1367: POP
1368: POP
// base := base ^ [ [ b_depot , 206 , 80 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_bunker , 221 , 95 , 5 , nation_arabian , 3 , 0 , 0 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , nation_arabian , 3 , 0 , 0 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , nation_arabian , 3 , 0 , 0 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_lab_full , 217 , 78 , 4 , nation_arabian , 3 , b_lab_weapon , 0 , 0 ] , [ b_solar_power , 220 , 99 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 103 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 216 , 102 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_gun , 203 , 94 , 0 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_track , 199 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 81 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 78 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ] ;
1369: LD_ADDR_VAR 0 4
1373: PUSH
1374: LD_VAR 0 4
1378: PUSH
1379: LD_INT 0
1381: PUSH
1382: LD_INT 206
1384: PUSH
1385: LD_INT 80
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 2
1393: PUSH
1394: LD_INT 3
1396: PUSH
1397: LD_INT 0
1399: PUSH
1400: LD_INT 0
1402: PUSH
1403: LD_INT 0
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 32
1419: PUSH
1420: LD_INT 221
1422: PUSH
1423: LD_INT 95
1425: PUSH
1426: LD_INT 5
1428: PUSH
1429: LD_INT 2
1431: PUSH
1432: LD_INT 3
1434: PUSH
1435: LD_INT 0
1437: PUSH
1438: LD_INT 0
1440: PUSH
1441: LD_INT 23
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 32
1457: PUSH
1458: LD_INT 223
1460: PUSH
1461: LD_INT 88
1463: PUSH
1464: LD_INT 5
1466: PUSH
1467: LD_INT 2
1469: PUSH
1470: LD_INT 3
1472: PUSH
1473: LD_INT 0
1475: PUSH
1476: LD_INT 0
1478: PUSH
1479: LD_INT 24
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: PUSH
1493: LD_INT 32
1495: PUSH
1496: LD_INT 202
1498: PUSH
1499: LD_INT 64
1501: PUSH
1502: LD_INT 2
1504: PUSH
1505: LD_INT 2
1507: PUSH
1508: LD_INT 3
1510: PUSH
1511: LD_INT 0
1513: PUSH
1514: LD_INT 0
1516: PUSH
1517: LD_INT 25
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 3
1533: PUSH
1534: LD_INT 203
1536: PUSH
1537: LD_INT 91
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 3
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: LD_INT 0
1554: PUSH
1555: LD_INT 0
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 8
1571: PUSH
1572: LD_INT 217
1574: PUSH
1575: LD_INT 78
1577: PUSH
1578: LD_INT 4
1580: PUSH
1581: LD_INT 2
1583: PUSH
1584: LD_INT 3
1586: PUSH
1587: LD_INT 10
1589: PUSH
1590: LD_INT 0
1592: PUSH
1593: LD_INT 0
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 27
1609: PUSH
1610: LD_INT 220
1612: PUSH
1613: LD_INT 99
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 2
1621: PUSH
1622: LD_INT 3
1624: PUSH
1625: LD_INT 0
1627: PUSH
1628: LD_INT 0
1630: PUSH
1631: LD_INT 0
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 27
1647: PUSH
1648: LD_INT 220
1650: PUSH
1651: LD_INT 103
1653: PUSH
1654: LD_INT 1
1656: PUSH
1657: LD_INT 2
1659: PUSH
1660: LD_INT 3
1662: PUSH
1663: LD_INT 0
1665: PUSH
1666: LD_INT 0
1668: PUSH
1669: LD_INT 0
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: PUSH
1683: LD_INT 27
1685: PUSH
1686: LD_INT 216
1688: PUSH
1689: LD_INT 102
1691: PUSH
1692: LD_INT 1
1694: PUSH
1695: LD_INT 2
1697: PUSH
1698: LD_INT 3
1700: PUSH
1701: LD_INT 0
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: LD_INT 0
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 17
1723: PUSH
1724: LD_INT 203
1726: PUSH
1727: LD_INT 94
1729: PUSH
1730: LD_INT 0
1732: PUSH
1733: LD_INT 2
1735: PUSH
1736: LD_INT 3
1738: PUSH
1739: LD_INT 0
1741: PUSH
1742: LD_INT 0
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: LD_INT 23
1761: PUSH
1762: LD_INT 200
1764: PUSH
1765: LD_INT 88
1767: PUSH
1768: LD_INT 2
1770: PUSH
1771: LD_INT 2
1773: PUSH
1774: LD_INT 3
1776: PUSH
1777: LD_INT 0
1779: PUSH
1780: LD_INT 0
1782: PUSH
1783: LD_INT 0
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 16
1799: PUSH
1800: LD_INT 199
1802: PUSH
1803: LD_INT 91
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: LD_INT 2
1811: PUSH
1812: LD_INT 3
1814: PUSH
1815: LD_INT 0
1817: PUSH
1818: LD_INT 0
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 26
1837: PUSH
1838: LD_INT 197
1840: PUSH
1841: LD_INT 81
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 2
1849: PUSH
1850: LD_INT 3
1852: PUSH
1853: LD_INT 0
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 0
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 26
1875: PUSH
1876: LD_INT 197
1878: PUSH
1879: LD_INT 78
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: LD_INT 3
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: LD_INT 0
1896: PUSH
1897: LD_INT 0
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: ADD
1927: ST_TO_ADDR
// if hasRadar then
1928: LD_VAR 0 5
1932: IFFALSE 1996
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1934: LD_ADDR_VAR 0 4
1938: PUSH
1939: LD_VAR 0 4
1943: PPUSH
1944: LD_VAR 0 4
1948: PUSH
1949: LD_INT 1
1951: PLUS
1952: PPUSH
1953: LD_INT 20
1955: PUSH
1956: LD_INT 203
1958: PUSH
1959: LD_INT 87
1961: PUSH
1962: LD_INT 3
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: LD_INT 3
1970: PUSH
1971: LD_INT 0
1973: PUSH
1974: LD_INT 0
1976: PUSH
1977: LD_INT 0
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 1
1995: ST_TO_ADDR
// if hasRemote then
1996: LD_VAR 0 6
2000: IFFALSE 2064
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
2002: LD_ADDR_VAR 0 4
2006: PUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_VAR 0 4
2016: PUSH
2017: LD_INT 1
2019: PLUS
2020: PPUSH
2021: LD_INT 22
2023: PUSH
2024: LD_INT 207
2026: PUSH
2027: LD_INT 95
2029: PUSH
2030: LD_INT 5
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 3
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: LD_INT 0
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: PPUSH
2059: CALL_OW 1
2063: ST_TO_ADDR
// for i in base do
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: LD_VAR 0 4
2073: PUSH
2074: FOR_IN
2075: IFFALSE 2429
// begin if HexInfo ( i [ 2 ] , i [ 3 ] ) then
2077: LD_VAR 0 2
2081: PUSH
2082: LD_INT 2
2084: ARRAY
2085: PPUSH
2086: LD_VAR 0 2
2090: PUSH
2091: LD_INT 3
2093: ARRAY
2094: PPUSH
2095: CALL_OW 428
2099: IFFALSE 2103
// continue ;
2101: GO 2074
// uc_nation := i [ 5 ] ;
2103: LD_ADDR_OWVAR 21
2107: PUSH
2108: LD_VAR 0 2
2112: PUSH
2113: LD_INT 5
2115: ARRAY
2116: ST_TO_ADDR
// InitBc ;
2117: CALL_OW 21
// bc_type := i [ 1 ] ;
2121: LD_ADDR_OWVAR 42
2125: PUSH
2126: LD_VAR 0 2
2130: PUSH
2131: LD_INT 1
2133: ARRAY
2134: ST_TO_ADDR
// bc_level := i [ 6 ] ;
2135: LD_ADDR_OWVAR 43
2139: PUSH
2140: LD_VAR 0 2
2144: PUSH
2145: LD_INT 6
2147: ARRAY
2148: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2149: LD_ADDR_OWVAR 44
2153: PUSH
2154: LD_INT 9
2156: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2157: LD_ADDR_OWVAR 45
2161: PUSH
2162: LD_INT 9
2164: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 5 ] = nation_arabian and not i [ 8 ] then
2165: LD_VAR 0 2
2169: PUSH
2170: LD_INT 1
2172: ARRAY
2173: PUSH
2174: LD_INT 8
2176: EQUAL
2177: PUSH
2178: LD_VAR 0 2
2182: PUSH
2183: LD_INT 5
2185: ARRAY
2186: PUSH
2187: LD_INT 2
2189: EQUAL
2190: AND
2191: PUSH
2192: LD_VAR 0 2
2196: PUSH
2197: LD_INT 8
2199: ARRAY
2200: NOT
2201: AND
2202: IFFALSE 2236
// begin bc_kind1 := b_lab_weapon ;
2204: LD_ADDR_OWVAR 44
2208: PUSH
2209: LD_INT 10
2211: ST_TO_ADDR
// if hasRadar then
2212: LD_VAR 0 5
2216: IFFALSE 2228
// bc_kind2 := b_lab_opto else
2218: LD_ADDR_OWVAR 45
2222: PUSH
2223: LD_INT 15
2225: ST_TO_ADDR
2226: GO 2236
// bc_kind2 := b_lab_basic ;
2228: LD_ADDR_OWVAR 45
2232: PUSH
2233: LD_INT 9
2235: ST_TO_ADDR
// end ; if i [ 1 ] in [ b_lab_half , b_lab_full ] and i [ 7 ] then
2236: LD_VAR 0 2
2240: PUSH
2241: LD_INT 1
2243: ARRAY
2244: PUSH
2245: LD_INT 7
2247: PUSH
2248: LD_INT 8
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: IN
2255: PUSH
2256: LD_VAR 0 2
2260: PUSH
2261: LD_INT 7
2263: ARRAY
2264: AND
2265: IFFALSE 2281
// bc_kind1 := i [ 7 ] ;
2267: LD_ADDR_OWVAR 44
2271: PUSH
2272: LD_VAR 0 2
2276: PUSH
2277: LD_INT 7
2279: ARRAY
2280: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 8 ] then
2281: LD_VAR 0 2
2285: PUSH
2286: LD_INT 1
2288: ARRAY
2289: PUSH
2290: LD_INT 8
2292: EQUAL
2293: PUSH
2294: LD_VAR 0 2
2298: PUSH
2299: LD_INT 8
2301: ARRAY
2302: AND
2303: IFFALSE 2319
// bc_kind1 := i [ 8 ] ;
2305: LD_ADDR_OWVAR 44
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_INT 8
2317: ARRAY
2318: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2319: LD_ADDR_VAR 0 3
2323: PUSH
2324: LD_VAR 0 2
2328: PUSH
2329: LD_INT 2
2331: ARRAY
2332: PPUSH
2333: LD_VAR 0 2
2337: PUSH
2338: LD_INT 3
2340: ARRAY
2341: PPUSH
2342: LD_VAR 0 2
2346: PUSH
2347: LD_INT 4
2349: ARRAY
2350: PPUSH
2351: CALL_OW 47
2355: ST_TO_ADDR
// if i [ 9 ] then
2356: LD_VAR 0 2
2360: PUSH
2361: LD_INT 9
2363: ARRAY
2364: IFFALSE 2384
// PlaceWeaponTurret ( b , i [ 9 ] ) ;
2366: LD_VAR 0 3
2370: PPUSH
2371: LD_VAR 0 2
2375: PUSH
2376: LD_INT 9
2378: ARRAY
2379: PPUSH
2380: CALL_OW 431
// if i [ 1 ] = b_bunker then
2384: LD_VAR 0 2
2388: PUSH
2389: LD_INT 1
2391: ARRAY
2392: PUSH
2393: LD_INT 32
2395: EQUAL
2396: IFFALSE 2427
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
2398: LD_ADDR_VAR 0 11
2402: PUSH
2403: LD_VAR 0 11
2407: PPUSH
2408: LD_VAR 0 11
2412: PUSH
2413: LD_INT 1
2415: PLUS
2416: PPUSH
2417: LD_VAR 0 3
2421: PPUSH
2422: CALL_OW 1
2426: ST_TO_ADDR
// end ;
2427: GO 2074
2429: POP
2430: POP
// depot := HexInfo ( 206 , 80 ) ;
2431: LD_ADDR_VAR 0 9
2435: PUSH
2436: LD_INT 206
2438: PPUSH
2439: LD_INT 80
2441: PPUSH
2442: CALL_OW 428
2446: ST_TO_ADDR
// factory := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) ;
2447: LD_ADDR_VAR 0 8
2451: PUSH
2452: LD_INT 22
2454: PUSH
2455: LD_INT 2
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PUSH
2462: LD_INT 30
2464: PUSH
2465: LD_INT 3
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PPUSH
2476: CALL_OW 69
2480: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2481: LD_ADDR_VAR 0 10
2485: PUSH
2486: LD_INT 22
2488: PUSH
2489: LD_INT 2
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 2
2498: PUSH
2499: LD_INT 30
2501: PUSH
2502: LD_INT 6
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: PUSH
2509: LD_INT 30
2511: PUSH
2512: LD_INT 7
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: PUSH
2519: LD_INT 30
2521: PUSH
2522: LD_INT 8
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PPUSH
2539: CALL_OW 69
2543: ST_TO_ADDR
// arDepot := depot ;
2544: LD_ADDR_EXP 48
2548: PUSH
2549: LD_VAR 0 9
2553: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 190 , 150 ] [ Difficulty ] ) ;
2554: LD_VAR 0 9
2558: PPUSH
2559: CALL_OW 274
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 360
2569: PUSH
2570: LD_INT 260
2572: PUSH
2573: LD_INT 190
2575: PUSH
2576: LD_INT 150
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: PUSH
2585: LD_OWVAR 67
2589: ARRAY
2590: PPUSH
2591: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 150 , 120 ] [ Difficulty ] ) ;
2595: LD_VAR 0 9
2599: PPUSH
2600: CALL_OW 274
2604: PPUSH
2605: LD_INT 2
2607: PPUSH
2608: LD_INT 200
2610: PUSH
2611: LD_INT 170
2613: PUSH
2614: LD_INT 150
2616: PUSH
2617: LD_INT 120
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: PUSH
2626: LD_OWVAR 67
2630: ARRAY
2631: PPUSH
2632: CALL_OW 277
// uc_nation := 2 ;
2636: LD_ADDR_OWVAR 21
2640: PUSH
2641: LD_INT 2
2643: ST_TO_ADDR
// uc_side := 2 ;
2644: LD_ADDR_OWVAR 20
2648: PUSH
2649: LD_INT 2
2651: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
2652: LD_INT 13
2654: PPUSH
2655: LD_INT 1
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: LD_INT 27
2663: PPUSH
2664: LD_INT 33
2666: PPUSH
2667: CALL 34283 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
2671: CALL_OW 45
2675: PPUSH
2676: LD_INT 190
2678: PPUSH
2679: LD_INT 64
2681: PPUSH
2682: LD_INT 5
2684: PPUSH
2685: LD_INT 0
2687: PPUSH
2688: CALL 69285 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
2692: LD_INT 13
2694: PPUSH
2695: LD_INT 1
2697: PPUSH
2698: LD_INT 1
2700: PPUSH
2701: LD_INT 25
2703: PPUSH
2704: LD_INT 22
2706: PPUSH
2707: CALL 34283 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
2711: CALL_OW 45
2715: PPUSH
2716: LD_INT 188
2718: PPUSH
2719: LD_INT 67
2721: PPUSH
2722: LD_INT 5
2724: PPUSH
2725: LD_INT 0
2727: PPUSH
2728: CALL 69285 0 5
// PlaceUnitXY ( Heike , 213 , 87 , false ) ;
2732: LD_EXP 34
2736: PPUSH
2737: LD_INT 213
2739: PPUSH
2740: LD_INT 87
2742: PPUSH
2743: LD_INT 0
2745: PPUSH
2746: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
2750: LD_EXP 34
2754: PPUSH
2755: LD_INT 214
2757: PPUSH
2758: LD_INT 87
2760: PPUSH
2761: CALL_OW 118
// if Kaia then
2765: LD_EXP 39
2769: IFFALSE 2804
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
2771: LD_EXP 39
2775: PPUSH
2776: LD_INT 213
2778: PPUSH
2779: LD_INT 85
2781: PPUSH
2782: LD_INT 0
2784: PPUSH
2785: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
2789: LD_EXP 39
2793: PPUSH
2794: LD_INT 215
2796: PPUSH
2797: LD_INT 87
2799: PPUSH
2800: CALL_OW 118
// end ; if Olaf and Kaia then
2804: LD_EXP 43
2808: PUSH
2809: LD_EXP 39
2813: AND
2814: IFFALSE 2851
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
2816: LD_EXP 43
2820: PPUSH
2821: LD_INT 215
2823: PPUSH
2824: LD_INT 87
2826: PPUSH
2827: LD_INT 0
2829: PPUSH
2830: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
2834: LD_EXP 43
2838: PPUSH
2839: LD_INT 213
2841: PPUSH
2842: LD_INT 85
2844: PPUSH
2845: CALL_OW 118
// end else
2849: GO 2871
// if Olaf then
2851: LD_EXP 43
2855: IFFALSE 2871
// PlaceHumanInUnit ( Olaf , factory ) ;
2857: LD_EXP 43
2861: PPUSH
2862: LD_VAR 0 8
2866: PPUSH
2867: CALL_OW 52
// if Givi then
2871: LD_EXP 35
2875: IFFALSE 2956
// begin if Kaia and Olaf then
2877: LD_EXP 39
2881: PUSH
2882: LD_EXP 43
2886: AND
2887: IFFALSE 2924
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2889: LD_EXP 35
2893: PPUSH
2894: LD_INT 247
2896: PPUSH
2897: LD_INT 117
2899: PPUSH
2900: LD_INT 0
2902: PPUSH
2903: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2907: LD_EXP 35
2911: PPUSH
2912: LD_INT 248
2914: PPUSH
2915: LD_INT 118
2917: PPUSH
2918: CALL_OW 118
// end else
2922: GO 2956
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2924: LD_EXP 35
2928: PPUSH
2929: LD_INT 216
2931: PPUSH
2932: LD_INT 88
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2942: LD_EXP 35
2946: PPUSH
2947: LD_EXP 34
2951: PPUSH
2952: CALL_OW 119
// end ; end ; if Kurt then
2956: LD_EXP 45
2960: IFFALSE 2980
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2962: LD_EXP 45
2966: PPUSH
2967: LD_VAR 0 11
2971: PUSH
2972: LD_INT 2
2974: ARRAY
2975: PPUSH
2976: CALL_OW 52
// if Mike then
2980: LD_EXP 36
2984: IFFALSE 3004
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2986: LD_EXP 36
2990: PPUSH
2991: LD_VAR 0 11
2995: PUSH
2996: LD_INT 3
2998: ARRAY
2999: PPUSH
3000: CALL_OW 52
// if Kamil then
3004: LD_EXP 38
3008: IFFALSE 3070
// begin if Kaia and Olaf then
3010: LD_EXP 39
3014: PUSH
3015: LD_EXP 43
3019: AND
3020: IFFALSE 3038
// PlaceHumanInUnit ( Kamil , depot ) else
3022: LD_EXP 38
3026: PPUSH
3027: LD_VAR 0 9
3031: PPUSH
3032: CALL_OW 52
3036: GO 3070
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
3038: LD_EXP 38
3042: PPUSH
3043: LD_INT 213
3045: PPUSH
3046: LD_INT 87
3048: PPUSH
3049: LD_INT 0
3051: PPUSH
3052: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
3056: LD_EXP 38
3060: PPUSH
3061: LD_EXP 34
3065: PPUSH
3066: CALL_OW 119
// end ; end ; if Sophia then
3070: LD_EXP 40
3074: IFFALSE 3090
// PlaceHumanInUnit ( Sophia , depot ) ;
3076: LD_EXP 40
3080: PPUSH
3081: LD_VAR 0 9
3085: PPUSH
3086: CALL_OW 52
// if Aviradze then
3090: LD_EXP 46
3094: IFFALSE 3143
// if lab then
3096: LD_VAR 0 10
3100: IFFALSE 3122
// PlaceHumanInUnit ( Aviradze , lab [ 1 ] ) else
3102: LD_EXP 46
3106: PPUSH
3107: LD_VAR 0 10
3111: PUSH
3112: LD_INT 1
3114: ARRAY
3115: PPUSH
3116: CALL_OW 52
3120: GO 3143
// PlaceUnitXYR ( Aviradze , 210 , 87 , 3 , false ) ;
3122: LD_EXP 46
3126: PPUSH
3127: LD_INT 210
3129: PPUSH
3130: LD_INT 87
3132: PPUSH
3133: LD_INT 3
3135: PPUSH
3136: LD_INT 0
3138: PPUSH
3139: CALL_OW 50
// if Ibrahim then
3143: LD_EXP 37
3147: IFFALSE 3196
// if lab then
3149: LD_VAR 0 10
3153: IFFALSE 3175
// PlaceHumanInUnit ( Ibrahim , lab [ 1 ] ) else
3155: LD_EXP 37
3159: PPUSH
3160: LD_VAR 0 10
3164: PUSH
3165: LD_INT 1
3167: ARRAY
3168: PPUSH
3169: CALL_OW 52
3173: GO 3196
// PlaceUnitXYR ( Ibrahim , 210 , 87 , 3 , false ) ;
3175: LD_EXP 37
3179: PPUSH
3180: LD_INT 210
3182: PPUSH
3183: LD_INT 87
3185: PPUSH
3186: LD_INT 3
3188: PPUSH
3189: LD_INT 0
3191: PPUSH
3192: CALL_OW 50
// if Markov then
3196: LD_EXP 41
3200: IFFALSE 3249
// if factory then
3202: LD_VAR 0 8
3206: IFFALSE 3228
// PlaceHumanInUnit ( Markov , factory [ 1 ] ) else
3208: LD_EXP 41
3212: PPUSH
3213: LD_VAR 0 8
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: CALL_OW 52
3226: GO 3249
// PlaceUnitXYR ( Markov , 210 , 87 , 3 , false ) ;
3228: LD_EXP 41
3232: PPUSH
3233: LD_INT 210
3235: PPUSH
3236: LD_INT 87
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: LD_INT 0
3244: PPUSH
3245: CALL_OW 50
// if heikeSecondSquad then
3249: LD_EXP 49
3253: IFFALSE 3293
// for i in heikeSecondSquad do
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: LD_EXP 49
3264: PUSH
3265: FOR_IN
3266: IFFALSE 3291
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
3268: LD_VAR 0 2
3272: PPUSH
3273: LD_INT 190
3275: PPUSH
3276: LD_INT 65
3278: PPUSH
3279: LD_INT 5
3281: PPUSH
3282: LD_INT 0
3284: PPUSH
3285: CALL_OW 50
3289: GO 3265
3291: POP
3292: POP
// if heikeApes then
3293: LD_EXP 50
3297: IFFALSE 3337
// for i in heikeApes do
3299: LD_ADDR_VAR 0 2
3303: PUSH
3304: LD_EXP 50
3308: PUSH
3309: FOR_IN
3310: IFFALSE 3335
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
3312: LD_VAR 0 2
3316: PPUSH
3317: LD_INT 190
3319: PPUSH
3320: LD_INT 70
3322: PPUSH
3323: LD_INT 5
3325: PPUSH
3326: LD_INT 0
3328: PPUSH
3329: CALL_OW 50
3333: GO 3309
3335: POP
3336: POP
// tmp := LoadVariable ( 05_Vehicles , [ ] ) ;
3337: LD_ADDR_VAR 0 13
3341: PUSH
3342: LD_STRING 05_Vehicles
3344: PPUSH
3345: EMPTY
3346: PPUSH
3347: CALL_OW 30
3351: ST_TO_ADDR
// if tmp then
3352: LD_VAR 0 13
3356: IFFALSE 3526
// begin limiter := 10 ;
3358: LD_ADDR_VAR 0 14
3362: PUSH
3363: LD_INT 10
3365: ST_TO_ADDR
// for i in tmp do
3366: LD_ADDR_VAR 0 2
3370: PUSH
3371: LD_VAR 0 13
3375: PUSH
3376: FOR_IN
3377: IFFALSE 3524
// begin limiter := Dec ( limiter ) ;
3379: LD_ADDR_VAR 0 14
3383: PUSH
3384: LD_VAR 0 14
3388: PPUSH
3389: CALL 68528 0 1
3393: ST_TO_ADDR
// if limiter = 0 then
3394: LD_VAR 0 14
3398: PUSH
3399: LD_INT 0
3401: EQUAL
3402: IFFALSE 3406
// break ;
3404: GO 3524
// uc_side := 2 ;
3406: LD_ADDR_OWVAR 20
3410: PUSH
3411: LD_INT 2
3413: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
3414: LD_ADDR_OWVAR 21
3418: PUSH
3419: LD_VAR 0 2
3423: PUSH
3424: LD_INT 5
3426: ARRAY
3427: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 20 ) ;
3428: LD_VAR 0 2
3432: PUSH
3433: LD_INT 1
3435: ARRAY
3436: PPUSH
3437: LD_VAR 0 2
3441: PUSH
3442: LD_INT 2
3444: ARRAY
3445: PPUSH
3446: LD_VAR 0 2
3450: PUSH
3451: LD_INT 3
3453: ARRAY
3454: PPUSH
3455: LD_VAR 0 2
3459: PUSH
3460: LD_INT 4
3462: ARRAY
3463: PPUSH
3464: LD_INT 20
3466: PPUSH
3467: CALL 34283 0 5
// veh := CreateVehicle ;
3471: LD_ADDR_VAR 0 12
3475: PUSH
3476: CALL_OW 45
3480: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
3481: LD_VAR 0 12
3485: PPUSH
3486: LD_INT 0
3488: PPUSH
3489: LD_INT 5
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: CALL_OW 233
// PlaceUnitXYR ( veh , 252 , 111 , 8 , false ) ;
3501: LD_VAR 0 12
3505: PPUSH
3506: LD_INT 252
3508: PPUSH
3509: LD_INT 111
3511: PPUSH
3512: LD_INT 8
3514: PPUSH
3515: LD_INT 0
3517: PPUSH
3518: CALL_OW 50
// end ;
3522: GO 3376
3524: POP
3525: POP
// end ; end ;
3526: LD_VAR 0 1
3530: RET
// export function PrepareRolfSquad ; var i , j ; begin
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
3535: PPUSH
// uc_side := 8 ;
3536: LD_ADDR_OWVAR 20
3540: PUSH
3541: LD_INT 8
3543: ST_TO_ADDR
// uc_nation := 2 ;
3544: LD_ADDR_OWVAR 21
3548: PUSH
3549: LD_INT 2
3551: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
3552: LD_ADDR_EXP 47
3556: PUSH
3557: LD_STRING Bergkamp
3559: PPUSH
3560: CALL_OW 25
3564: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
3565: LD_ADDR_EXP 51
3569: PUSH
3570: LD_EXP 47
3574: PUSH
3575: EMPTY
3576: LIST
3577: ST_TO_ADDR
// for i := 1 to 4 do
3578: LD_ADDR_VAR 0 2
3582: PUSH
3583: DOUBLE
3584: LD_INT 1
3586: DEC
3587: ST_TO_ADDR
3588: LD_INT 4
3590: PUSH
3591: FOR_TO
3592: IFFALSE 3672
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
3594: LD_ADDR_VAR 0 3
3598: PUSH
3599: DOUBLE
3600: LD_INT 1
3602: DEC
3603: ST_TO_ADDR
3604: LD_INT 5
3606: PUSH
3607: LD_INT 2
3609: PUSH
3610: LD_INT 3
3612: PUSH
3613: LD_INT 1
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_VAR 0 2
3626: ARRAY
3627: PUSH
3628: FOR_TO
3629: IFFALSE 3668
// begin PrepareHuman ( false , i , 5 ) ;
3631: LD_INT 0
3633: PPUSH
3634: LD_VAR 0 2
3638: PPUSH
3639: LD_INT 5
3641: PPUSH
3642: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
3646: LD_ADDR_EXP 51
3650: PUSH
3651: LD_EXP 51
3655: PPUSH
3656: CALL_OW 44
3660: PPUSH
3661: CALL 67145 0 2
3665: ST_TO_ADDR
// end ;
3666: GO 3628
3668: POP
3669: POP
// end ;
3670: GO 3591
3672: POP
3673: POP
// if HexInfo ( 5 , 3 ) then
3674: LD_INT 5
3676: PPUSH
3677: LD_INT 3
3679: PPUSH
3680: CALL_OW 428
3684: IFFALSE 3701
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
3686: LD_INT 5
3688: PPUSH
3689: LD_INT 3
3691: PPUSH
3692: CALL_OW 428
3696: PPUSH
3697: CALL_OW 64
// for i in rolfSquad do
3701: LD_ADDR_VAR 0 2
3705: PUSH
3706: LD_EXP 51
3710: PUSH
3711: FOR_IN
3712: IFFALSE 3848
// begin uc_direction := 2 ;
3714: LD_ADDR_OWVAR 24
3718: PUSH
3719: LD_INT 2
3721: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
3722: LD_VAR 0 2
3726: PPUSH
3727: CALL_OW 257
3731: PUSH
3732: LD_INT 3
3734: EQUAL
3735: IFFALSE 3809
// begin uc_side := 8 ;
3737: LD_ADDR_OWVAR 20
3741: PUSH
3742: LD_INT 8
3744: ST_TO_ADDR
// uc_nation := 2 ;
3745: LD_ADDR_OWVAR 21
3749: PUSH
3750: LD_INT 2
3752: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
3753: LD_INT 13
3755: PPUSH
3756: LD_INT 1
3758: PPUSH
3759: LD_INT 1
3761: PPUSH
3762: LD_INT 27
3764: PPUSH
3765: LD_INT 88
3767: PPUSH
3768: CALL 34283 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
3772: CALL_OW 45
3776: PPUSH
3777: LD_INT 11
3779: PPUSH
3780: LD_INT 0
3782: PPUSH
3783: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_INT 5
3794: PPUSH
3795: LD_INT 3
3797: PPUSH
3798: CALL_OW 428
3802: PPUSH
3803: CALL_OW 52
// end else
3807: GO 3824
// PlaceUnitArea ( i , northSpawn , false ) ;
3809: LD_VAR 0 2
3813: PPUSH
3814: LD_INT 11
3816: PPUSH
3817: LD_INT 0
3819: PPUSH
3820: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
3824: LD_VAR 0 2
3828: PPUSH
3829: LD_INT 29
3831: PPUSH
3832: LD_INT 10
3834: PPUSH
3835: CALL_OW 111
// wait ( 0 0$2 ) ;
3839: LD_INT 70
3841: PPUSH
3842: CALL_OW 67
// end ;
3846: GO 3711
3848: POP
3849: POP
// wait ( 0 0$5 ) ;
3850: LD_INT 175
3852: PPUSH
3853: CALL_OW 67
// end ;
3857: LD_VAR 0 1
3861: RET
// export function PrepareRolfBase ; var i , tmp ; begin
3862: LD_INT 0
3864: PPUSH
3865: PPUSH
3866: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
3867: LD_EXP 47
3871: PPUSH
3872: LD_INT 94
3874: PPUSH
3875: LD_INT 63
3877: PPUSH
3878: CALL_OW 428
3882: PPUSH
3883: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
3887: LD_ADDR_VAR 0 3
3891: PUSH
3892: LD_INT 4
3894: PUSH
3895: LD_INT 82
3897: PUSH
3898: LD_INT 64
3900: PUSH
3901: LD_INT 1
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 31
3912: PUSH
3913: LD_INT 73
3915: PUSH
3916: LD_INT 58
3918: PUSH
3919: LD_INT 0
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: ST_TO_ADDR
// for i in tmp do
3932: LD_ADDR_VAR 0 2
3936: PUSH
3937: LD_VAR 0 3
3941: PUSH
3942: FOR_IN
3943: IFFALSE 4007
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3945: LD_EXP 51
3949: PPUSH
3950: LD_INT 25
3952: PUSH
3953: LD_INT 2
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PPUSH
3960: CALL_OW 72
3964: PPUSH
3965: LD_VAR 0 2
3969: PUSH
3970: LD_INT 1
3972: ARRAY
3973: PPUSH
3974: LD_VAR 0 2
3978: PUSH
3979: LD_INT 2
3981: ARRAY
3982: PPUSH
3983: LD_VAR 0 2
3987: PUSH
3988: LD_INT 3
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 2
3996: PUSH
3997: LD_INT 4
3999: ARRAY
4000: PPUSH
4001: CALL_OW 205
4005: GO 3942
4007: POP
4008: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
4009: LD_EXP 51
4013: PUSH
4014: LD_INT 2
4016: ARRAY
4017: PPUSH
4018: LD_INT 63
4020: PPUSH
4021: LD_INT 42
4023: PPUSH
4024: CALL_OW 428
4028: PPUSH
4029: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
4033: LD_EXP 51
4037: PUSH
4038: LD_INT 3
4040: ARRAY
4041: PPUSH
4042: LD_INT 94
4044: PPUSH
4045: LD_INT 63
4047: PPUSH
4048: CALL_OW 428
4052: PPUSH
4053: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4057: LD_INT 35
4059: PPUSH
4060: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
4064: LD_EXP 51
4068: PPUSH
4069: LD_INT 25
4071: PUSH
4072: LD_INT 2
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 3
4081: PUSH
4082: LD_INT 60
4084: PUSH
4085: EMPTY
4086: LIST
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PPUSH
4096: CALL_OW 72
4100: IFFALSE 4057
// rolfScriptBase := true ;
4102: LD_ADDR_EXP 9
4106: PUSH
4107: LD_INT 1
4109: ST_TO_ADDR
// end ;
4110: LD_VAR 0 1
4114: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4115: LD_EXP 9
4119: PUSH
4120: LD_EXP 47
4124: PPUSH
4125: CALL_OW 255
4129: PUSH
4130: LD_INT 8
4132: EQUAL
4133: AND
4134: IFFALSE 5141
4136: GO 4138
4138: DISABLE
4139: LD_INT 0
4141: PPUSH
4142: PPUSH
4143: PPUSH
4144: PPUSH
4145: PPUSH
4146: PPUSH
4147: PPUSH
4148: PPUSH
4149: PPUSH
4150: PPUSH
// begin enable ;
4151: ENABLE
// if not rolfSquad then
4152: LD_EXP 51
4156: NOT
4157: IFFALSE 4161
// exit ;
4159: GO 5141
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
4161: LD_ADDR_VAR 0 9
4165: PUSH
4166: LD_INT 12
4168: PPUSH
4169: LD_INT 81
4171: PUSH
4172: LD_INT 8
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 70
4183: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
4184: LD_ADDR_VAR 0 5
4188: PUSH
4189: LD_EXP 51
4193: PPUSH
4194: LD_INT 25
4196: PUSH
4197: LD_INT 1
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PPUSH
4204: CALL_OW 72
4208: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
4209: LD_ADDR_VAR 0 6
4213: PUSH
4214: LD_EXP 51
4218: PPUSH
4219: LD_INT 25
4221: PUSH
4222: LD_INT 2
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PPUSH
4229: CALL_OW 72
4233: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
4234: LD_ADDR_VAR 0 8
4238: PUSH
4239: LD_EXP 51
4243: PPUSH
4244: LD_INT 25
4246: PUSH
4247: LD_INT 3
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: PPUSH
4254: CALL_OW 72
4258: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
4259: LD_ADDR_VAR 0 7
4263: PUSH
4264: LD_EXP 51
4268: PPUSH
4269: LD_INT 25
4271: PUSH
4272: LD_INT 4
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PPUSH
4279: CALL_OW 72
4283: ST_TO_ADDR
// if sol then
4284: LD_VAR 0 5
4288: IFFALSE 4586
// for i in sol union Rolf do
4290: LD_ADDR_VAR 0 1
4294: PUSH
4295: LD_VAR 0 5
4299: PUSH
4300: LD_EXP 47
4304: UNION
4305: PUSH
4306: FOR_IN
4307: IFFALSE 4584
// if not IsInUnit ( i ) and not HasTask ( i ) then
4309: LD_VAR 0 1
4313: PPUSH
4314: CALL_OW 310
4318: NOT
4319: PUSH
4320: LD_VAR 0 1
4324: PPUSH
4325: CALL_OW 314
4329: NOT
4330: AND
4331: IFFALSE 4582
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
4333: LD_VAR 0 1
4337: PPUSH
4338: CALL_OW 256
4342: PUSH
4343: LD_INT 500
4345: LESS
4346: PUSH
4347: LD_VAR 0 1
4351: PPUSH
4352: LD_INT 80
4354: PPUSH
4355: LD_INT 49
4357: PPUSH
4358: CALL_OW 297
4362: PUSH
4363: LD_INT 6
4365: GREATER
4366: AND
4367: IFFALSE 4386
// begin ComMoveXY ( i , 80 , 49 ) ;
4369: LD_VAR 0 1
4373: PPUSH
4374: LD_INT 80
4376: PPUSH
4377: LD_INT 49
4379: PPUSH
4380: CALL_OW 111
// continue ;
4384: GO 4306
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4386: LD_ADDR_VAR 0 4
4390: PUSH
4391: LD_INT 22
4393: PUSH
4394: LD_INT 8
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: LD_INT 50
4403: PUSH
4404: EMPTY
4405: LIST
4406: PUSH
4407: LD_INT 2
4409: PUSH
4410: LD_INT 30
4412: PUSH
4413: LD_INT 4
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 30
4422: PUSH
4423: LD_INT 5
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PUSH
4430: LD_INT 30
4432: PUSH
4433: LD_INT 32
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PUSH
4440: LD_INT 30
4442: PUSH
4443: LD_INT 31
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 69
4466: ST_TO_ADDR
// if tmp then
4467: LD_VAR 0 4
4471: IFFALSE 4582
// begin for b in tmp do
4473: LD_ADDR_VAR 0 2
4477: PUSH
4478: LD_VAR 0 4
4482: PUSH
4483: FOR_IN
4484: IFFALSE 4580
// begin case GetBType ( b ) of b_armoury , b_barracks :
4486: LD_VAR 0 2
4490: PPUSH
4491: CALL_OW 266
4495: PUSH
4496: LD_INT 4
4498: DOUBLE
4499: EQUAL
4500: IFTRUE 4510
4502: LD_INT 5
4504: DOUBLE
4505: EQUAL
4506: IFTRUE 4510
4508: GO 4521
4510: POP
// p := 6 ; b_breastwork , b_bunker :
4511: LD_ADDR_VAR 0 3
4515: PUSH
4516: LD_INT 6
4518: ST_TO_ADDR
4519: GO 4547
4521: LD_INT 31
4523: DOUBLE
4524: EQUAL
4525: IFTRUE 4535
4527: LD_INT 32
4529: DOUBLE
4530: EQUAL
4531: IFTRUE 4535
4533: GO 4546
4535: POP
// p := 1 ; end ;
4536: LD_ADDR_VAR 0 3
4540: PUSH
4541: LD_INT 1
4543: ST_TO_ADDR
4544: GO 4547
4546: POP
// if UnitsInside ( b ) < p then
4547: LD_VAR 0 2
4551: PPUSH
4552: CALL_OW 313
4556: PUSH
4557: LD_VAR 0 3
4561: LESS
4562: IFFALSE 4578
// ComEnterUnit ( i , b ) ;
4564: LD_VAR 0 1
4568: PPUSH
4569: LD_VAR 0 2
4573: PPUSH
4574: CALL_OW 120
// end ;
4578: GO 4483
4580: POP
4581: POP
// end ; end ;
4582: GO 4306
4584: POP
4585: POP
// if sci then
4586: LD_VAR 0 7
4590: IFFALSE 4645
// for i in sci do
4592: LD_ADDR_VAR 0 1
4596: PUSH
4597: LD_VAR 0 7
4601: PUSH
4602: FOR_IN
4603: IFFALSE 4643
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
4605: LD_VAR 0 1
4609: PPUSH
4610: LD_INT 80
4612: PPUSH
4613: LD_INT 49
4615: PPUSH
4616: CALL_OW 297
4620: PUSH
4621: LD_INT 9
4623: GREATER
4624: IFFALSE 4641
// ComMoveXY ( i , 80 , 49 ) ;
4626: LD_VAR 0 1
4630: PPUSH
4631: LD_INT 80
4633: PPUSH
4634: LD_INT 49
4636: PPUSH
4637: CALL_OW 111
// end ;
4641: GO 4602
4643: POP
4644: POP
// if mech then
4645: LD_VAR 0 8
4649: IFFALSE 4863
// for i in mech do
4651: LD_ADDR_VAR 0 1
4655: PUSH
4656: LD_VAR 0 8
4660: PUSH
4661: FOR_IN
4662: IFFALSE 4861
// begin hasVehicle := IsInUnit ( i ) ;
4664: LD_ADDR_VAR 0 10
4668: PUSH
4669: LD_VAR 0 1
4673: PPUSH
4674: CALL_OW 310
4678: ST_TO_ADDR
// if enemyInBase then
4679: LD_VAR 0 9
4683: IFFALSE 4779
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4685: LD_VAR 0 10
4689: PUSH
4690: LD_VAR 0 10
4694: PPUSH
4695: CALL_OW 256
4699: PUSH
4700: LD_INT 500
4702: GREATER
4703: AND
4704: IFFALSE 4732
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4706: LD_VAR 0 10
4710: PPUSH
4711: LD_VAR 0 9
4715: PPUSH
4716: LD_VAR 0 10
4720: PPUSH
4721: CALL_OW 74
4725: PPUSH
4726: CALL_OW 115
4730: GO 4777
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
4732: LD_VAR 0 10
4736: PPUSH
4737: LD_INT 86
4739: PPUSH
4740: LD_INT 49
4742: PPUSH
4743: CALL_OW 297
4747: PUSH
4748: LD_INT 8
4750: GREATER
4751: IFFALSE 4777
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
4753: LD_VAR 0 10
4757: PPUSH
4758: LD_INT 86
4760: PPUSH
4761: LD_INT 49
4763: PPUSH
4764: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
4768: LD_VAR 0 1
4772: PPUSH
4773: CALL 68965 0 1
// end end else
4777: GO 4859
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
4779: LD_VAR 0 1
4783: PPUSH
4784: LD_INT 86
4786: PPUSH
4787: LD_INT 49
4789: PPUSH
4790: CALL_OW 297
4794: PUSH
4795: LD_INT 8
4797: GREATER
4798: IFFALSE 4817
// ComMoveXY ( i , 86 , 49 ) else
4800: LD_VAR 0 1
4804: PPUSH
4805: LD_INT 86
4807: PPUSH
4808: LD_INT 49
4810: PPUSH
4811: CALL_OW 111
4815: GO 4859
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4817: LD_VAR 0 10
4821: PUSH
4822: LD_VAR 0 10
4826: PPUSH
4827: CALL_OW 256
4831: PUSH
4832: LD_INT 1000
4834: LESS
4835: AND
4836: IFFALSE 4859
// begin SetFuel ( hasVehicle , 100 ) ;
4838: LD_VAR 0 10
4842: PPUSH
4843: LD_INT 100
4845: PPUSH
4846: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4850: LD_VAR 0 1
4854: PPUSH
4855: CALL 68845 0 1
// end ; end ; end ;
4859: GO 4661
4861: POP
4862: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4863: LD_ADDR_VAR 0 4
4867: PUSH
4868: LD_INT 12
4870: PPUSH
4871: LD_INT 3
4873: PUSH
4874: LD_INT 24
4876: PUSH
4877: LD_INT 1000
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 21
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 70
4906: ST_TO_ADDR
// if tmp and eng then
4907: LD_VAR 0 4
4911: PUSH
4912: LD_VAR 0 6
4916: AND
4917: IFFALSE 5023
// begin for i in eng do
4919: LD_ADDR_VAR 0 1
4923: PUSH
4924: LD_VAR 0 6
4928: PUSH
4929: FOR_IN
4930: IFFALSE 5021
// if IsInUnit ( i ) then
4932: LD_VAR 0 1
4936: PPUSH
4937: CALL_OW 310
4941: IFFALSE 4954
// ComExitBuilding ( i ) else
4943: LD_VAR 0 1
4947: PPUSH
4948: CALL_OW 122
4952: GO 5019
// if GetLives ( i ) = 1000 then
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 256
4963: PUSH
4964: LD_INT 1000
4966: EQUAL
4967: IFFALSE 4989
// ComRepairBuilding ( i , tmp [ 1 ] ) else
4969: LD_VAR 0 1
4973: PPUSH
4974: LD_VAR 0 4
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PPUSH
4983: CALL_OW 130
4987: GO 5019
// if GetLives ( i ) < 700 then
4989: LD_VAR 0 1
4993: PPUSH
4994: CALL_OW 256
4998: PUSH
4999: LD_INT 700
5001: LESS
5002: IFFALSE 5019
// ComMoveXY ( i , 80 , 49 ) ;
5004: LD_VAR 0 1
5008: PPUSH
5009: LD_INT 80
5011: PPUSH
5012: LD_INT 49
5014: PPUSH
5015: CALL_OW 111
5019: GO 4929
5021: POP
5022: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5023: LD_VAR 0 4
5027: NOT
5028: PUSH
5029: LD_VAR 0 6
5033: PPUSH
5034: LD_INT 3
5036: PUSH
5037: LD_INT 54
5039: PUSH
5040: EMPTY
5041: LIST
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PPUSH
5047: CALL_OW 72
5051: AND
5052: IFFALSE 5141
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5054: LD_ADDR_VAR 0 1
5058: PUSH
5059: LD_VAR 0 6
5063: PPUSH
5064: LD_INT 3
5066: PUSH
5067: LD_INT 54
5069: PUSH
5070: EMPTY
5071: LIST
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PPUSH
5077: CALL_OW 72
5081: PUSH
5082: FOR_IN
5083: IFFALSE 5139
// if GetLives ( i ) < 1000 then
5085: LD_VAR 0 1
5089: PPUSH
5090: CALL_OW 256
5094: PUSH
5095: LD_INT 1000
5097: LESS
5098: IFFALSE 5117
// ComMoveXY ( i , 80 , 49 ) else
5100: LD_VAR 0 1
5104: PPUSH
5105: LD_INT 80
5107: PPUSH
5108: LD_INT 49
5110: PPUSH
5111: CALL_OW 111
5115: GO 5137
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
5117: LD_VAR 0 1
5121: PPUSH
5122: LD_INT 86
5124: PPUSH
5125: LD_INT 54
5127: PPUSH
5128: CALL_OW 428
5132: PPUSH
5133: CALL_OW 120
5137: GO 5082
5139: POP
5140: POP
// end ;
5141: PPOPN 10
5143: END
// export function PrepareOmarSquad ; var i , j , p ; begin
5144: LD_INT 0
5146: PPUSH
5147: PPUSH
5148: PPUSH
5149: PPUSH
// uc_side := 5 ;
5150: LD_ADDR_OWVAR 20
5154: PUSH
5155: LD_INT 5
5157: ST_TO_ADDR
// uc_nation := 2 ;
5158: LD_ADDR_OWVAR 21
5162: PUSH
5163: LD_INT 2
5165: ST_TO_ADDR
// omarSquad := [ ] ;
5166: LD_ADDR_EXP 52
5170: PUSH
5171: EMPTY
5172: ST_TO_ADDR
// for i := 1 to 4 do
5173: LD_ADDR_VAR 0 2
5177: PUSH
5178: DOUBLE
5179: LD_INT 1
5181: DEC
5182: ST_TO_ADDR
5183: LD_INT 4
5185: PUSH
5186: FOR_TO
5187: IFFALSE 5310
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
5189: LD_ADDR_VAR 0 3
5193: PUSH
5194: DOUBLE
5195: LD_INT 1
5197: DEC
5198: ST_TO_ADDR
5199: LD_INT 6
5201: PUSH
5202: LD_INT 2
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: LD_EXP 21
5212: PLUS
5213: PUSH
5214: LD_INT 2
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: PUSH
5223: LD_VAR 0 2
5227: ARRAY
5228: PUSH
5229: FOR_TO
5230: IFFALSE 5306
// begin PrepareHuman ( false , i , 5 ) ;
5232: LD_INT 0
5234: PPUSH
5235: LD_VAR 0 2
5239: PPUSH
5240: LD_INT 5
5242: PPUSH
5243: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
5247: LD_ADDR_EXP 52
5251: PUSH
5252: LD_EXP 52
5256: PPUSH
5257: CALL_OW 44
5261: PPUSH
5262: CALL 67145 0 2
5266: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
5267: LD_VAR 0 2
5271: PUSH
5272: LD_INT 1
5274: EQUAL
5275: PUSH
5276: LD_INT 50
5278: PPUSH
5279: CALL_OW 13
5283: AND
5284: IFFALSE 5304
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
5286: LD_EXP 52
5290: PUSH
5291: LD_EXP 52
5295: ARRAY
5296: PPUSH
5297: LD_INT 8
5299: PPUSH
5300: CALL_OW 336
// end ;
5304: GO 5229
5306: POP
5307: POP
// end ;
5308: GO 5186
5310: POP
5311: POP
// if HexInfo ( 340 , 205 ) then
5312: LD_INT 340
5314: PPUSH
5315: LD_INT 205
5317: PPUSH
5318: CALL_OW 428
5322: IFFALSE 5339
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
5324: LD_INT 340
5326: PPUSH
5327: LD_INT 205
5329: PPUSH
5330: CALL_OW 428
5334: PPUSH
5335: CALL_OW 64
// p := 0 ;
5339: LD_ADDR_VAR 0 4
5343: PUSH
5344: LD_INT 0
5346: ST_TO_ADDR
// for i in omarSquad do
5347: LD_ADDR_VAR 0 2
5351: PUSH
5352: LD_EXP 52
5356: PUSH
5357: FOR_IN
5358: IFFALSE 5559
// begin uc_direction := 4 ;
5360: LD_ADDR_OWVAR 24
5364: PUSH
5365: LD_INT 4
5367: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
5368: LD_VAR 0 2
5372: PPUSH
5373: CALL_OW 257
5377: PUSH
5378: LD_INT 3
5380: EQUAL
5381: PUSH
5382: LD_VAR 0 4
5386: PUSH
5387: LD_INT 2
5389: LESS
5390: AND
5391: IFFALSE 5520
// begin p := p + 1 ;
5393: LD_ADDR_VAR 0 4
5397: PUSH
5398: LD_VAR 0 4
5402: PUSH
5403: LD_INT 1
5405: PLUS
5406: ST_TO_ADDR
// uc_side := 5 ;
5407: LD_ADDR_OWVAR 20
5411: PUSH
5412: LD_INT 5
5414: ST_TO_ADDR
// if rand ( 0 , 1 ) then
5415: LD_INT 0
5417: PPUSH
5418: LD_INT 1
5420: PPUSH
5421: CALL_OW 12
5425: IFFALSE 5456
// begin uc_nation := 2 ;
5427: LD_ADDR_OWVAR 21
5431: PUSH
5432: LD_INT 2
5434: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
5435: LD_INT 13
5437: PPUSH
5438: LD_INT 1
5440: PPUSH
5441: LD_INT 1
5443: PPUSH
5444: LD_INT 27
5446: PPUSH
5447: LD_INT 88
5449: PPUSH
5450: CALL 34283 0 5
// end else
5454: GO 5483
// begin uc_nation := 3 ;
5456: LD_ADDR_OWVAR 21
5460: PUSH
5461: LD_INT 3
5463: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
5464: LD_INT 22
5466: PPUSH
5467: LD_INT 1
5469: PPUSH
5470: LD_INT 1
5472: PPUSH
5473: LD_INT 45
5475: PPUSH
5476: LD_INT 88
5478: PPUSH
5479: CALL 34283 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
5483: CALL_OW 45
5487: PPUSH
5488: LD_INT 13
5490: PPUSH
5491: LD_INT 0
5493: PPUSH
5494: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
5498: LD_VAR 0 2
5502: PPUSH
5503: LD_INT 340
5505: PPUSH
5506: LD_INT 205
5508: PPUSH
5509: CALL_OW 428
5513: PPUSH
5514: CALL_OW 52
// end else
5518: GO 5535
// PlaceUnitArea ( i , southSpawn , false ) ;
5520: LD_VAR 0 2
5524: PPUSH
5525: LD_INT 13
5527: PPUSH
5528: LD_INT 0
5530: PPUSH
5531: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
5535: LD_VAR 0 2
5539: PPUSH
5540: LD_INT 333
5542: PPUSH
5543: LD_INT 210
5545: PPUSH
5546: CALL_OW 111
// wait ( 0 0$2 ) ;
5550: LD_INT 70
5552: PPUSH
5553: CALL_OW 67
// end ;
5557: GO 5357
5559: POP
5560: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
5561: LD_EXP 44
5565: PPUSH
5566: LD_INT 340
5568: PPUSH
5569: LD_INT 205
5571: PPUSH
5572: LD_INT 0
5574: PPUSH
5575: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
5579: LD_EXP 44
5583: PPUSH
5584: LD_INT 333
5586: PPUSH
5587: LD_INT 206
5589: PPUSH
5590: CALL_OW 111
// wait ( 0 0$2 ) ;
5594: LD_INT 70
5596: PPUSH
5597: CALL_OW 67
// ComHold ( omarSquad ) ;
5601: LD_EXP 52
5605: PPUSH
5606: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
5610: LD_EXP 44
5614: PUSH
5615: LD_EXP 52
5619: PPUSH
5620: LD_INT 2
5622: PUSH
5623: LD_INT 25
5625: PUSH
5626: LD_INT 1
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 25
5635: PUSH
5636: LD_INT 8
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: PPUSH
5648: CALL_OW 72
5652: UNION
5653: PUSH
5654: LD_INT 22
5656: PUSH
5657: LD_INT 5
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: PUSH
5664: LD_INT 21
5666: PUSH
5667: LD_INT 2
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PPUSH
5678: CALL_OW 69
5682: UNION
5683: PPUSH
5684: LD_INT 315
5686: PPUSH
5687: LD_INT 214
5689: PPUSH
5690: CALL_OW 114
// wait ( 0 0$22 ) ;
5694: LD_INT 770
5696: PPUSH
5697: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
5701: LD_EXP 52
5705: PUSH
5706: LD_EXP 44
5710: UNION
5711: PPUSH
5712: LD_INT 329
5714: PPUSH
5715: LD_INT 231
5717: PPUSH
5718: CALL_OW 114
// end ;
5722: LD_VAR 0 1
5726: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
5727: LD_EXP 10
5731: IFFALSE 6814
5733: GO 5735
5735: DISABLE
5736: LD_INT 0
5738: PPUSH
5739: PPUSH
5740: PPUSH
5741: PPUSH
5742: PPUSH
5743: PPUSH
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
// begin enable ;
5749: ENABLE
// if not omarSquad then
5750: LD_EXP 52
5754: NOT
5755: IFFALSE 5759
// exit ;
5757: GO 6814
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
5759: LD_ADDR_VAR 0 10
5763: PUSH
5764: LD_INT 14
5766: PPUSH
5767: LD_INT 81
5769: PUSH
5770: LD_INT 5
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PPUSH
5777: CALL_OW 70
5781: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
5782: LD_ADDR_VAR 0 6
5786: PUSH
5787: LD_EXP 52
5791: PPUSH
5792: LD_INT 2
5794: PUSH
5795: LD_INT 25
5797: PUSH
5798: LD_INT 1
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PUSH
5805: LD_INT 25
5807: PUSH
5808: LD_INT 8
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: LIST
5819: PPUSH
5820: CALL_OW 72
5824: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
5825: LD_ADDR_VAR 0 7
5829: PUSH
5830: LD_EXP 52
5834: PPUSH
5835: LD_INT 25
5837: PUSH
5838: LD_INT 2
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PPUSH
5845: CALL_OW 72
5849: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
5850: LD_ADDR_VAR 0 9
5854: PUSH
5855: LD_EXP 52
5859: PPUSH
5860: LD_INT 25
5862: PUSH
5863: LD_INT 3
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 72
5874: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
5875: LD_ADDR_VAR 0 8
5879: PUSH
5880: LD_EXP 52
5884: PPUSH
5885: LD_INT 25
5887: PUSH
5888: LD_INT 4
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 72
5899: ST_TO_ADDR
// if sol then
5900: LD_VAR 0 6
5904: IFFALSE 6268
// for i in sol do
5906: LD_ADDR_VAR 0 1
5910: PUSH
5911: LD_VAR 0 6
5915: PUSH
5916: FOR_IN
5917: IFFALSE 6266
// if not HasTask ( i ) then
5919: LD_VAR 0 1
5923: PPUSH
5924: CALL_OW 314
5928: NOT
5929: IFFALSE 6264
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
5931: LD_VAR 0 1
5935: PPUSH
5936: CALL_OW 310
5940: NOT
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: CALL_OW 256
5951: PUSH
5952: LD_INT 500
5954: LESS
5955: AND
5956: PUSH
5957: LD_VAR 0 1
5961: PPUSH
5962: LD_INT 333
5964: PPUSH
5965: LD_INT 234
5967: PPUSH
5968: CALL_OW 297
5972: PUSH
5973: LD_INT 6
5975: GREATER
5976: AND
5977: IFFALSE 5996
// begin ComMoveXY ( i , 333 , 234 ) ;
5979: LD_VAR 0 1
5983: PPUSH
5984: LD_INT 333
5986: PPUSH
5987: LD_INT 234
5989: PPUSH
5990: CALL_OW 111
// continue ;
5994: GO 5916
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
5996: LD_ADDR_VAR 0 5
6000: PUSH
6001: LD_INT 22
6003: PUSH
6004: LD_INT 5
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 58
6013: PUSH
6014: EMPTY
6015: LIST
6016: PUSH
6017: LD_INT 50
6019: PUSH
6020: EMPTY
6021: LIST
6022: PUSH
6023: LD_INT 2
6025: PUSH
6026: LD_INT 30
6028: PUSH
6029: LD_INT 32
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 30
6038: PUSH
6039: LD_INT 31
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: PPUSH
6057: CALL_OW 69
6061: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
6062: LD_VAR 0 5
6066: PUSH
6067: LD_VAR 0 1
6071: PPUSH
6072: CALL_OW 310
6076: PPUSH
6077: CALL_OW 266
6081: PUSH
6082: LD_INT 31
6084: NONEQUAL
6085: AND
6086: IFFALSE 6168
// begin for j in tmp do
6088: LD_ADDR_VAR 0 2
6092: PUSH
6093: LD_VAR 0 5
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6164
// if GetTag ( j ) <> 1 then
6101: LD_VAR 0 2
6105: PPUSH
6106: CALL_OW 110
6110: PUSH
6111: LD_INT 1
6113: NONEQUAL
6114: IFFALSE 6162
// begin SetTag ( j , 1 ) ;
6116: LD_VAR 0 2
6120: PPUSH
6121: LD_INT 1
6123: PPUSH
6124: CALL_OW 109
// if IsInUnit ( i ) then
6128: LD_VAR 0 1
6132: PPUSH
6133: CALL_OW 310
6137: IFFALSE 6148
// ComExit ( i ) ;
6139: LD_VAR 0 1
6143: PPUSH
6144: CALL 67543 0 1
// AddComEnterUnit ( i , j ) ;
6148: LD_VAR 0 1
6152: PPUSH
6153: LD_VAR 0 2
6157: PPUSH
6158: CALL_OW 180
// end ;
6162: GO 6098
6164: POP
6165: POP
// end else
6166: GO 6264
// if not IsInUnit ( i ) then
6168: LD_VAR 0 1
6172: PPUSH
6173: CALL_OW 310
6177: NOT
6178: IFFALSE 6264
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
6180: LD_ADDR_VAR 0 5
6184: PUSH
6185: LD_INT 22
6187: PUSH
6188: LD_INT 5
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: LD_INT 50
6197: PUSH
6198: EMPTY
6199: LIST
6200: PUSH
6201: LD_INT 30
6203: PUSH
6204: LD_INT 4
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: PPUSH
6216: CALL_OW 69
6220: ST_TO_ADDR
// if tmp then
6221: LD_VAR 0 5
6225: IFFALSE 6264
// if UnitsInside ( tmp [ 1 ] ) < 6 then
6227: LD_VAR 0 5
6231: PUSH
6232: LD_INT 1
6234: ARRAY
6235: PPUSH
6236: CALL_OW 313
6240: PUSH
6241: LD_INT 6
6243: LESS
6244: IFFALSE 6264
// ComEnterUnit ( i , tmp [ 1 ] ) ;
6246: LD_VAR 0 1
6250: PPUSH
6251: LD_VAR 0 5
6255: PUSH
6256: LD_INT 1
6258: ARRAY
6259: PPUSH
6260: CALL_OW 120
// end ; end ;
6264: GO 5916
6266: POP
6267: POP
// if sci then
6268: LD_VAR 0 8
6272: IFFALSE 6327
// for i in sci do
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: LD_VAR 0 8
6283: PUSH
6284: FOR_IN
6285: IFFALSE 6325
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
6287: LD_VAR 0 1
6291: PPUSH
6292: LD_INT 333
6294: PPUSH
6295: LD_INT 234
6297: PPUSH
6298: CALL_OW 297
6302: PUSH
6303: LD_INT 9
6305: GREATER
6306: IFFALSE 6323
// ComMoveXY ( i , 333 , 234 ) ;
6308: LD_VAR 0 1
6312: PPUSH
6313: LD_INT 333
6315: PPUSH
6316: LD_INT 234
6318: PPUSH
6319: CALL_OW 111
// end ;
6323: GO 6284
6325: POP
6326: POP
// if mech then
6327: LD_VAR 0 9
6331: IFFALSE 6536
// for i in mech do
6333: LD_ADDR_VAR 0 1
6337: PUSH
6338: LD_VAR 0 9
6342: PUSH
6343: FOR_IN
6344: IFFALSE 6534
// begin hasVehicle := IsInUnit ( i ) ;
6346: LD_ADDR_VAR 0 11
6350: PUSH
6351: LD_VAR 0 1
6355: PPUSH
6356: CALL_OW 310
6360: ST_TO_ADDR
// if enemyInBase then
6361: LD_VAR 0 10
6365: IFFALSE 6452
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
6367: LD_VAR 0 11
6371: PUSH
6372: LD_VAR 0 11
6376: PPUSH
6377: CALL_OW 256
6381: PUSH
6382: LD_INT 500
6384: GREATER
6385: AND
6386: IFFALSE 6414
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
6388: LD_VAR 0 11
6392: PPUSH
6393: LD_VAR 0 10
6397: PPUSH
6398: LD_VAR 0 11
6402: PPUSH
6403: CALL_OW 74
6407: PPUSH
6408: CALL_OW 115
6412: GO 6450
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
6414: LD_VAR 0 11
6418: PPUSH
6419: LD_INT 333
6421: PPUSH
6422: LD_INT 234
6424: PPUSH
6425: CALL_OW 297
6429: PUSH
6430: LD_INT 6
6432: GREATER
6433: IFFALSE 6450
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
6435: LD_VAR 0 11
6439: PPUSH
6440: LD_INT 333
6442: PPUSH
6443: LD_INT 234
6445: PPUSH
6446: CALL_OW 111
// end else
6450: GO 6532
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
6452: LD_VAR 0 1
6456: PPUSH
6457: LD_INT 333
6459: PPUSH
6460: LD_INT 234
6462: PPUSH
6463: CALL_OW 297
6467: PUSH
6468: LD_INT 6
6470: GREATER
6471: IFFALSE 6490
// ComMoveXY ( i , 333 , 234 ) else
6473: LD_VAR 0 1
6477: PPUSH
6478: LD_INT 333
6480: PPUSH
6481: LD_INT 234
6483: PPUSH
6484: CALL_OW 111
6488: GO 6532
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
6490: LD_VAR 0 11
6494: PUSH
6495: LD_VAR 0 11
6499: PPUSH
6500: CALL_OW 256
6504: PUSH
6505: LD_INT 1000
6507: LESS
6508: AND
6509: IFFALSE 6532
// begin SetFuel ( hasVehicle , 100 ) ;
6511: LD_VAR 0 11
6515: PPUSH
6516: LD_INT 100
6518: PPUSH
6519: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
6523: LD_VAR 0 1
6527: PPUSH
6528: CALL 68845 0 1
// end ; end ; end ;
6532: GO 6343
6534: POP
6535: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6536: LD_ADDR_VAR 0 5
6540: PUSH
6541: LD_INT 14
6543: PPUSH
6544: LD_INT 3
6546: PUSH
6547: LD_INT 24
6549: PUSH
6550: LD_INT 1000
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 21
6563: PUSH
6564: LD_INT 3
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PPUSH
6575: CALL_OW 70
6579: ST_TO_ADDR
// if tmp and eng then
6580: LD_VAR 0 5
6584: PUSH
6585: LD_VAR 0 7
6589: AND
6590: IFFALSE 6696
// begin for i in eng do
6592: LD_ADDR_VAR 0 1
6596: PUSH
6597: LD_VAR 0 7
6601: PUSH
6602: FOR_IN
6603: IFFALSE 6694
// if IsInUnit ( i ) then
6605: LD_VAR 0 1
6609: PPUSH
6610: CALL_OW 310
6614: IFFALSE 6627
// ComExitBuilding ( i ) else
6616: LD_VAR 0 1
6620: PPUSH
6621: CALL_OW 122
6625: GO 6692
// if GetLives ( i ) = 1000 then
6627: LD_VAR 0 1
6631: PPUSH
6632: CALL_OW 256
6636: PUSH
6637: LD_INT 1000
6639: EQUAL
6640: IFFALSE 6662
// ComRepairBuilding ( i , tmp [ 1 ] ) else
6642: LD_VAR 0 1
6646: PPUSH
6647: LD_VAR 0 5
6651: PUSH
6652: LD_INT 1
6654: ARRAY
6655: PPUSH
6656: CALL_OW 130
6660: GO 6692
// if GetLives ( i ) < 700 then
6662: LD_VAR 0 1
6666: PPUSH
6667: CALL_OW 256
6671: PUSH
6672: LD_INT 700
6674: LESS
6675: IFFALSE 6692
// ComMoveXY ( i , 333 , 234 ) ;
6677: LD_VAR 0 1
6681: PPUSH
6682: LD_INT 333
6684: PPUSH
6685: LD_INT 234
6687: PPUSH
6688: CALL_OW 111
6692: GO 6602
6694: POP
6695: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
6696: LD_VAR 0 5
6700: NOT
6701: PUSH
6702: LD_VAR 0 7
6706: PPUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 54
6712: PUSH
6713: EMPTY
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PPUSH
6720: CALL_OW 72
6724: AND
6725: IFFALSE 6814
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6727: LD_ADDR_VAR 0 1
6731: PUSH
6732: LD_VAR 0 7
6736: PPUSH
6737: LD_INT 3
6739: PUSH
6740: LD_INT 54
6742: PUSH
6743: EMPTY
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PPUSH
6750: CALL_OW 72
6754: PUSH
6755: FOR_IN
6756: IFFALSE 6812
// if GetLives ( i ) < 1000 then
6758: LD_VAR 0 1
6762: PPUSH
6763: CALL_OW 256
6767: PUSH
6768: LD_INT 1000
6770: LESS
6771: IFFALSE 6790
// ComMoveXY ( i , 333 , 234 ) else
6773: LD_VAR 0 1
6777: PPUSH
6778: LD_INT 333
6780: PPUSH
6781: LD_INT 234
6783: PPUSH
6784: CALL_OW 111
6788: GO 6810
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
6790: LD_VAR 0 1
6794: PPUSH
6795: LD_INT 341
6797: PPUSH
6798: LD_INT 232
6800: PPUSH
6801: CALL_OW 428
6805: PPUSH
6806: CALL_OW 120
6810: GO 6755
6812: POP
6813: POP
// end ;
6814: PPOPN 11
6816: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
6817: LD_EXP 44
6821: PPUSH
6822: CALL_OW 256
6826: PUSH
6827: LD_INT 1000
6829: LESS
6830: IFFALSE 6848
6832: GO 6834
6834: DISABLE
// begin enable ;
6835: ENABLE
// SetLives ( Omar , 1000 ) ;
6836: LD_EXP 44
6840: PPUSH
6841: LD_INT 1000
6843: PPUSH
6844: CALL_OW 234
// end ;
6848: END
// every 0 0$1 trigger GetLives ( Rolf ) < 1000 and rolfAttack do
6849: LD_EXP 47
6853: PPUSH
6854: CALL_OW 256
6858: PUSH
6859: LD_INT 1000
6861: LESS
6862: PUSH
6863: LD_EXP 32
6867: AND
6868: IFFALSE 6886
6870: GO 6872
6872: DISABLE
// begin enable ;
6873: ENABLE
// SetLives ( Rolf , 1000 ) ;
6874: LD_EXP 47
6878: PPUSH
6879: LD_INT 1000
6881: PPUSH
6882: CALL_OW 234
// end ;
6886: END
// every 0 0$1 trigger rolfAttack do var i , tmp , mech , path , tag , rolfCoords ;
6887: LD_EXP 32
6891: IFFALSE 7571
6893: GO 6895
6895: DISABLE
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
// begin path := [ [ 215 , 162 ] , [ 195 , 163 ] , [ 174 , 162 ] , [ 145 , 163 ] , [ 127 , 163 ] ] ;
6904: LD_ADDR_VAR 0 4
6908: PUSH
6909: LD_INT 215
6911: PUSH
6912: LD_INT 162
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 195
6921: PUSH
6922: LD_INT 163
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: LD_INT 174
6931: PUSH
6932: LD_INT 162
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 145
6941: PUSH
6942: LD_INT 163
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 127
6951: PUSH
6952: LD_INT 163
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: ST_TO_ADDR
// rolfCoords := [ 221 , 161 ] ;
6966: LD_ADDR_VAR 0 6
6970: PUSH
6971: LD_INT 221
6973: PUSH
6974: LD_INT 161
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: ST_TO_ADDR
// tmp := Rolf union rolfSquad ;
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: LD_EXP 47
6990: PUSH
6991: LD_EXP 51
6995: UNION
6996: ST_TO_ADDR
// if not tmp then
6997: LD_VAR 0 2
7001: NOT
7002: IFFALSE 7006
// exit ;
7004: GO 7571
// ComMoveXY ( tmp , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7006: LD_VAR 0 2
7010: PPUSH
7011: LD_VAR 0 6
7015: PUSH
7016: LD_INT 1
7018: ARRAY
7019: PPUSH
7020: LD_VAR 0 6
7024: PUSH
7025: LD_INT 2
7027: ARRAY
7028: PPUSH
7029: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7033: LD_INT 35
7035: PPUSH
7036: CALL_OW 67
// tmp := UnitFilter ( rolfSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
7040: LD_ADDR_VAR 0 2
7044: PUSH
7045: LD_EXP 51
7049: PPUSH
7050: LD_INT 3
7052: PUSH
7053: LD_INT 55
7055: PUSH
7056: EMPTY
7057: LIST
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: LD_INT 25
7068: PUSH
7069: LD_INT 1
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 25
7078: PUSH
7079: LD_INT 8
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PPUSH
7095: CALL_OW 72
7099: ST_TO_ADDR
// if tmp then
7100: LD_VAR 0 2
7104: IFFALSE 7257
// begin for i in tmp do
7106: LD_ADDR_VAR 0 1
7110: PUSH
7111: LD_VAR 0 2
7115: PUSH
7116: FOR_IN
7117: IFFALSE 7255
// begin tag := GetTag ( i ) ;
7119: LD_ADDR_VAR 0 5
7123: PUSH
7124: LD_VAR 0 1
7128: PPUSH
7129: CALL_OW 110
7133: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
7134: LD_VAR 0 1
7138: PPUSH
7139: CALL_OW 256
7143: PUSH
7144: LD_INT 800
7146: LESS
7147: PUSH
7148: LD_VAR 0 5
7152: PUSH
7153: LD_INT 101
7155: LESS
7156: AND
7157: IFFALSE 7200
// begin SetTag ( i , 101 ) ;
7159: LD_VAR 0 1
7163: PPUSH
7164: LD_INT 101
7166: PPUSH
7167: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7171: LD_VAR 0 1
7175: PPUSH
7176: LD_VAR 0 6
7180: PUSH
7181: LD_INT 1
7183: ARRAY
7184: PPUSH
7185: LD_VAR 0 6
7189: PUSH
7190: LD_INT 2
7192: ARRAY
7193: PPUSH
7194: CALL_OW 111
// end else
7198: GO 7253
// if tag = 101 then
7200: LD_VAR 0 5
7204: PUSH
7205: LD_INT 101
7207: EQUAL
7208: IFFALSE 7239
// begin if GetLives ( i ) = 1000 then
7210: LD_VAR 0 1
7214: PPUSH
7215: CALL_OW 256
7219: PUSH
7220: LD_INT 1000
7222: EQUAL
7223: IFFALSE 7237
// SetTag ( i , 0 ) ;
7225: LD_VAR 0 1
7229: PPUSH
7230: LD_INT 0
7232: PPUSH
7233: CALL_OW 109
// end else
7237: GO 7253
// AgressiveMove ( i , path ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_VAR 0 4
7248: PPUSH
7249: CALL 69749 0 2
// end ;
7253: GO 7116
7255: POP
7256: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
7257: LD_ADDR_VAR 0 2
7261: PUSH
7262: LD_INT 22
7264: PUSH
7265: LD_INT 8
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 21
7274: PUSH
7275: LD_INT 2
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: LD_INT 3
7284: PUSH
7285: LD_INT 34
7287: PUSH
7288: LD_INT 32
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: LIST
7303: PPUSH
7304: CALL_OW 69
7308: ST_TO_ADDR
// if not tmp then
7309: LD_VAR 0 2
7313: NOT
7314: IFFALSE 7318
// continue ;
7316: GO 7033
// for i in tmp do
7318: LD_ADDR_VAR 0 1
7322: PUSH
7323: LD_VAR 0 2
7327: PUSH
7328: FOR_IN
7329: IFFALSE 7562
// begin mech := IsDrivenBy ( i ) ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 311
7345: ST_TO_ADDR
// if not mech then
7346: LD_VAR 0 3
7350: NOT
7351: IFFALSE 7355
// continue ;
7353: GO 7328
// tag := GetTag ( i ) ;
7355: LD_ADDR_VAR 0 5
7359: PUSH
7360: LD_VAR 0 1
7364: PPUSH
7365: CALL_OW 110
7369: ST_TO_ADDR
// if GetLives ( i ) >= 600 and tag < 101 then
7370: LD_VAR 0 1
7374: PPUSH
7375: CALL_OW 256
7379: PUSH
7380: LD_INT 600
7382: GREATEREQUAL
7383: PUSH
7384: LD_VAR 0 5
7388: PUSH
7389: LD_INT 101
7391: LESS
7392: AND
7393: IFFALSE 7409
// AgressiveMove ( i , path ) ;
7395: LD_VAR 0 1
7399: PPUSH
7400: LD_VAR 0 4
7404: PPUSH
7405: CALL 69749 0 2
// if GetLives ( i ) < 600 and tag < 101 then
7409: LD_VAR 0 1
7413: PPUSH
7414: CALL_OW 256
7418: PUSH
7419: LD_INT 600
7421: LESS
7422: PUSH
7423: LD_VAR 0 5
7427: PUSH
7428: LD_INT 101
7430: LESS
7431: AND
7432: IFFALSE 7473
// begin SetTag ( i , 101 ) ;
7434: LD_VAR 0 1
7438: PPUSH
7439: LD_INT 101
7441: PPUSH
7442: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7446: LD_VAR 0 1
7450: PPUSH
7451: LD_VAR 0 6
7455: PUSH
7456: LD_INT 1
7458: ARRAY
7459: PPUSH
7460: LD_VAR 0 6
7464: PUSH
7465: LD_INT 2
7467: ARRAY
7468: PPUSH
7469: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) < 9 and mech then
7473: LD_VAR 0 5
7477: PUSH
7478: LD_INT 101
7480: EQUAL
7481: PUSH
7482: LD_VAR 0 1
7486: PPUSH
7487: LD_VAR 0 6
7491: PUSH
7492: LD_INT 1
7494: ARRAY
7495: PPUSH
7496: LD_VAR 0 6
7500: PUSH
7501: LD_INT 2
7503: ARRAY
7504: PPUSH
7505: CALL_OW 297
7509: PUSH
7510: LD_INT 9
7512: LESS
7513: AND
7514: PUSH
7515: LD_VAR 0 3
7519: AND
7520: IFFALSE 7560
// begin if GetLives ( i ) < 1000 then
7522: LD_VAR 0 1
7526: PPUSH
7527: CALL_OW 256
7531: PUSH
7532: LD_INT 1000
7534: LESS
7535: IFFALSE 7548
// AddComRepairVehicleAndReturn ( mech ) else
7537: LD_VAR 0 3
7541: PPUSH
7542: CALL 68965 0 1
7546: GO 7560
// SetTag ( i , 0 ) ;
7548: LD_VAR 0 1
7552: PPUSH
7553: LD_INT 0
7555: PPUSH
7556: CALL_OW 109
// end ; end ;
7560: GO 7328
7562: POP
7563: POP
// until not tmp ;
7564: LD_VAR 0 2
7568: NOT
7569: IFFALSE 7033
// end ;
7571: PPOPN 6
7573: END
// every 0 0$1 trigger omarAttack do var i , cargo , tmp , tag , mech , x , path , omarAttackCoords ;
7574: LD_EXP 23
7578: IFFALSE 8883
7580: GO 7582
7582: DISABLE
7583: LD_INT 0
7585: PPUSH
7586: PPUSH
7587: PPUSH
7588: PPUSH
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
// begin path := [ [ 209 , 221 ] , [ 190 , 220 ] , [ 177 , 220 ] , [ 168 , 223 ] , [ 150 , 206 ] ] ;
7593: LD_ADDR_VAR 0 7
7597: PUSH
7598: LD_INT 209
7600: PUSH
7601: LD_INT 221
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 190
7610: PUSH
7611: LD_INT 220
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: LD_INT 177
7620: PUSH
7621: LD_INT 220
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 168
7630: PUSH
7631: LD_INT 223
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 150
7640: PUSH
7641: LD_INT 206
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: ST_TO_ADDR
// omarAttackCoords := [ 219 , 225 , 0 ] ;
7655: LD_ADDR_VAR 0 8
7659: PUSH
7660: LD_INT 219
7662: PUSH
7663: LD_INT 225
7665: PUSH
7666: LD_INT 0
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: ST_TO_ADDR
// for i := 1 to 2 do
7674: LD_ADDR_VAR 0 1
7678: PUSH
7679: DOUBLE
7680: LD_INT 1
7682: DEC
7683: ST_TO_ADDR
7684: LD_INT 2
7686: PUSH
7687: FOR_TO
7688: IFFALSE 7837
// begin uc_side := 5 ;
7690: LD_ADDR_OWVAR 20
7694: PUSH
7695: LD_INT 5
7697: ST_TO_ADDR
// uc_nation := 2 ;
7698: LD_ADDR_OWVAR 21
7702: PUSH
7703: LD_INT 2
7705: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
7706: LD_INT 14
7708: PPUSH
7709: LD_INT 1
7711: PPUSH
7712: LD_INT 1
7714: PPUSH
7715: LD_INT 32
7717: PPUSH
7718: LD_INT 80
7720: PPUSH
7721: CALL 34283 0 5
// cargo := Join ( cargo , CreateVehicle ) ;
7725: LD_ADDR_VAR 0 2
7729: PUSH
7730: LD_VAR 0 2
7734: PPUSH
7735: CALL_OW 45
7739: PPUSH
7740: CALL 67145 0 2
7744: ST_TO_ADDR
// SetDir ( cargo [ i ] , 4 ) ;
7745: LD_VAR 0 2
7749: PUSH
7750: LD_VAR 0 1
7754: ARRAY
7755: PPUSH
7756: LD_INT 4
7758: PPUSH
7759: CALL_OW 233
// PlaceUnitArea ( cargo [ i ] , omarVehiclesArea , false ) ;
7763: LD_VAR 0 2
7767: PUSH
7768: LD_VAR 0 1
7772: ARRAY
7773: PPUSH
7774: LD_INT 16
7776: PPUSH
7777: LD_INT 0
7779: PPUSH
7780: CALL_OW 49
// PrepareMechanic ( false , 4 ) ;
7784: LD_INT 0
7786: PPUSH
7787: LD_INT 4
7789: PPUSH
7790: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo [ i ] ) ;
7794: CALL_OW 44
7798: PPUSH
7799: LD_VAR 0 2
7803: PUSH
7804: LD_VAR 0 1
7808: ARRAY
7809: PPUSH
7810: CALL_OW 52
// ComMoveXY ( cargo [ i ] , 337 , 232 ) ;
7814: LD_VAR 0 2
7818: PUSH
7819: LD_VAR 0 1
7823: ARRAY
7824: PPUSH
7825: LD_INT 337
7827: PPUSH
7828: LD_INT 232
7830: PPUSH
7831: CALL_OW 111
// end ;
7835: GO 7687
7837: POP
7838: POP
// wait ( 0 0$25 ) ;
7839: LD_INT 875
7841: PPUSH
7842: CALL_OW 67
// for i := 1 to 2 do
7846: LD_ADDR_VAR 0 1
7850: PUSH
7851: DOUBLE
7852: LD_INT 1
7854: DEC
7855: ST_TO_ADDR
7856: LD_INT 2
7858: PUSH
7859: FOR_TO
7860: IFFALSE 7885
// SetCargo ( cargo [ i ] , mat_oil , 100 ) ;
7862: LD_VAR 0 2
7866: PUSH
7867: LD_VAR 0 1
7871: ARRAY
7872: PPUSH
7873: LD_INT 2
7875: PPUSH
7876: LD_INT 100
7878: PPUSH
7879: CALL_OW 290
7883: GO 7859
7885: POP
7886: POP
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
7887: LD_EXP 52
7891: PPUSH
7892: LD_INT 2
7894: PUSH
7895: LD_INT 25
7897: PUSH
7898: LD_INT 1
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 25
7907: PUSH
7908: LD_INT 8
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: LIST
7919: PPUSH
7920: CALL_OW 72
7924: PPUSH
7925: CALL_OW 122
// wait ( 0 0$3 ) ;
7929: LD_INT 105
7931: PPUSH
7932: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
7936: LD_EXP 52
7940: PUSH
7941: LD_EXP 44
7945: UNION
7946: PPUSH
7947: LD_VAR 0 8
7951: PUSH
7952: LD_INT 1
7954: ARRAY
7955: PPUSH
7956: LD_VAR 0 8
7960: PUSH
7961: LD_INT 2
7963: ARRAY
7964: PPUSH
7965: CALL_OW 174
// wait ( 0 0$3 ) ;
7969: LD_INT 105
7971: PPUSH
7972: CALL_OW 67
// AddComMoveXY ( cargo , 218 , 217 ) ;
7976: LD_VAR 0 2
7980: PPUSH
7981: LD_INT 218
7983: PPUSH
7984: LD_INT 217
7986: PPUSH
7987: CALL_OW 171
// wait ( 1 1$00 ) ;
7991: LD_INT 2100
7993: PPUSH
7994: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7998: LD_INT 35
8000: PPUSH
8001: CALL_OW 67
// if omarAttackCoords [ 3 ] = 0 then
8005: LD_VAR 0 8
8009: PUSH
8010: LD_INT 3
8012: ARRAY
8013: PUSH
8014: LD_INT 0
8016: EQUAL
8017: IFFALSE 8122
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 168 , 229 , 12 ] ] ) = 0 then
8019: LD_INT 22
8021: PUSH
8022: LD_INT 3
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: LD_INT 92
8031: PUSH
8032: LD_INT 168
8034: PUSH
8035: LD_INT 229
8037: PUSH
8038: LD_INT 12
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PPUSH
8051: CALL_OW 69
8055: PUSH
8056: LD_INT 0
8058: EQUAL
8059: IFFALSE 8122
// begin omarAttackCoords := [ 167 , 222 , 1 ] ;
8061: LD_ADDR_VAR 0 8
8065: PUSH
8066: LD_INT 167
8068: PUSH
8069: LD_INT 222
8071: PUSH
8072: LD_INT 1
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: ST_TO_ADDR
// AddComMoveXY ( Omar ^ cargo ^ UnitFilter ( omarSquad , [ f_class , 4 ] ) , 167 , 222 ) ;
8080: LD_EXP 44
8084: PUSH
8085: LD_VAR 0 2
8089: ADD
8090: PUSH
8091: LD_EXP 52
8095: PPUSH
8096: LD_INT 25
8098: PUSH
8099: LD_INT 4
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 72
8110: ADD
8111: PPUSH
8112: LD_INT 167
8114: PPUSH
8115: LD_INT 222
8117: PPUSH
8118: CALL_OW 171
// end ; tmp := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
8122: LD_ADDR_VAR 0 3
8126: PUSH
8127: LD_EXP 52
8131: PPUSH
8132: LD_INT 3
8134: PUSH
8135: LD_INT 55
8137: PUSH
8138: EMPTY
8139: LIST
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 2
8147: PUSH
8148: LD_INT 25
8150: PUSH
8151: LD_INT 1
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 25
8160: PUSH
8161: LD_INT 8
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PPUSH
8177: CALL_OW 72
8181: ST_TO_ADDR
// if tmp then
8182: LD_VAR 0 3
8186: IFFALSE 8399
// begin for i in tmp do
8188: LD_ADDR_VAR 0 1
8192: PUSH
8193: LD_VAR 0 3
8197: PUSH
8198: FOR_IN
8199: IFFALSE 8397
// begin tag := GetTag ( i ) ;
8201: LD_ADDR_VAR 0 4
8205: PUSH
8206: LD_VAR 0 1
8210: PPUSH
8211: CALL_OW 110
8215: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
8216: LD_VAR 0 1
8220: PPUSH
8221: CALL_OW 256
8225: PUSH
8226: LD_INT 800
8228: LESS
8229: PUSH
8230: LD_VAR 0 4
8234: PUSH
8235: LD_INT 101
8237: LESS
8238: AND
8239: IFFALSE 8282
// begin SetTag ( i , 101 ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_INT 101
8248: PPUSH
8249: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8253: LD_VAR 0 1
8257: PPUSH
8258: LD_VAR 0 8
8262: PUSH
8263: LD_INT 1
8265: ARRAY
8266: PPUSH
8267: LD_VAR 0 8
8271: PUSH
8272: LD_INT 2
8274: ARRAY
8275: PPUSH
8276: CALL_OW 111
// end else
8280: GO 8395
// if tag = 101 then
8282: LD_VAR 0 4
8286: PUSH
8287: LD_INT 101
8289: EQUAL
8290: IFFALSE 8381
// begin if GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) > 10 then
8292: LD_VAR 0 1
8296: PPUSH
8297: LD_VAR 0 8
8301: PUSH
8302: LD_INT 1
8304: ARRAY
8305: PPUSH
8306: LD_VAR 0 8
8310: PUSH
8311: LD_INT 2
8313: ARRAY
8314: PPUSH
8315: CALL_OW 297
8319: PUSH
8320: LD_INT 10
8322: GREATER
8323: IFFALSE 8352
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8325: LD_VAR 0 1
8329: PPUSH
8330: LD_VAR 0 8
8334: PUSH
8335: LD_INT 1
8337: ARRAY
8338: PPUSH
8339: LD_VAR 0 8
8343: PUSH
8344: LD_INT 2
8346: ARRAY
8347: PPUSH
8348: CALL_OW 111
// if GetLives ( i ) = 1000 then
8352: LD_VAR 0 1
8356: PPUSH
8357: CALL_OW 256
8361: PUSH
8362: LD_INT 1000
8364: EQUAL
8365: IFFALSE 8379
// SetTag ( i , 0 ) ;
8367: LD_VAR 0 1
8371: PPUSH
8372: LD_INT 0
8374: PPUSH
8375: CALL_OW 109
// end else
8379: GO 8395
// AgressiveMove ( i , path ) ;
8381: LD_VAR 0 1
8385: PPUSH
8386: LD_VAR 0 7
8390: PPUSH
8391: CALL 69749 0 2
// end ;
8395: GO 8198
8397: POP
8398: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
8399: LD_ADDR_VAR 0 3
8403: PUSH
8404: LD_INT 22
8406: PUSH
8407: LD_INT 5
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 21
8416: PUSH
8417: LD_INT 2
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PUSH
8424: LD_INT 3
8426: PUSH
8427: LD_INT 34
8429: PUSH
8430: LD_INT 32
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 69
8450: ST_TO_ADDR
// if not tmp then
8451: LD_VAR 0 3
8455: NOT
8456: IFFALSE 8460
// continue ;
8458: GO 7998
// for i in tmp do
8460: LD_ADDR_VAR 0 1
8464: PUSH
8465: LD_VAR 0 3
8469: PUSH
8470: FOR_IN
8471: IFFALSE 8874
// begin mech := IsDrivenBy ( i ) ;
8473: LD_ADDR_VAR 0 5
8477: PUSH
8478: LD_VAR 0 1
8482: PPUSH
8483: CALL_OW 311
8487: ST_TO_ADDR
// if not mech then
8488: LD_VAR 0 5
8492: NOT
8493: IFFALSE 8497
// continue ;
8495: GO 8470
// tag := GetTag ( i ) ;
8497: LD_ADDR_VAR 0 4
8501: PUSH
8502: LD_VAR 0 1
8506: PPUSH
8507: CALL_OW 110
8511: ST_TO_ADDR
// if GetFuel ( i ) > 90 and tag = 102 then
8512: LD_VAR 0 1
8516: PPUSH
8517: CALL_OW 261
8521: PUSH
8522: LD_INT 90
8524: GREATER
8525: PUSH
8526: LD_VAR 0 4
8530: PUSH
8531: LD_INT 102
8533: EQUAL
8534: AND
8535: IFFALSE 8551
// SetTag ( i , 0 ) else
8537: LD_VAR 0 1
8541: PPUSH
8542: LD_INT 0
8544: PPUSH
8545: CALL_OW 109
8549: GO 8647
// if GetTag ( i ) = 102 then
8551: LD_VAR 0 1
8555: PPUSH
8556: CALL_OW 110
8560: PUSH
8561: LD_INT 102
8563: EQUAL
8564: IFFALSE 8647
// begin x := rand ( 1 , 2 ) ;
8566: LD_ADDR_VAR 0 6
8570: PUSH
8571: LD_INT 1
8573: PPUSH
8574: LD_INT 2
8576: PPUSH
8577: CALL_OW 12
8581: ST_TO_ADDR
// AddComMoveUnit ( i , cargo [ x ] ) ;
8582: LD_VAR 0 1
8586: PPUSH
8587: LD_VAR 0 2
8591: PUSH
8592: LD_VAR 0 6
8596: ARRAY
8597: PPUSH
8598: CALL_OW 172
// if GetCargo ( cargo [ x ] , mat_oil ) < 20 then
8602: LD_VAR 0 2
8606: PUSH
8607: LD_VAR 0 6
8611: ARRAY
8612: PPUSH
8613: LD_INT 2
8615: PPUSH
8616: CALL_OW 289
8620: PUSH
8621: LD_INT 20
8623: LESS
8624: IFFALSE 8647
// SetCargo ( cargo [ x ] , mat_oil , 100 ) ;
8626: LD_VAR 0 2
8630: PUSH
8631: LD_VAR 0 6
8635: ARRAY
8636: PPUSH
8637: LD_INT 2
8639: PPUSH
8640: LD_INT 100
8642: PPUSH
8643: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and tag < 101 then
8647: LD_VAR 0 1
8651: PPUSH
8652: CALL_OW 256
8656: PUSH
8657: LD_INT 600
8659: GREATEREQUAL
8660: PUSH
8661: LD_VAR 0 4
8665: PUSH
8666: LD_INT 101
8668: LESS
8669: AND
8670: IFFALSE 8686
// AgressiveMove ( i , path ) ;
8672: LD_VAR 0 1
8676: PPUSH
8677: LD_VAR 0 7
8681: PPUSH
8682: CALL 69749 0 2
// if GetLives ( i ) < 600 and tag < 101 then
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 256
8695: PUSH
8696: LD_INT 600
8698: LESS
8699: PUSH
8700: LD_VAR 0 4
8704: PUSH
8705: LD_INT 101
8707: LESS
8708: AND
8709: IFFALSE 8750
// begin SetTag ( i , 101 ) ;
8711: LD_VAR 0 1
8715: PPUSH
8716: LD_INT 101
8718: PPUSH
8719: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8723: LD_VAR 0 1
8727: PPUSH
8728: LD_VAR 0 8
8732: PUSH
8733: LD_INT 1
8735: ARRAY
8736: PPUSH
8737: LD_VAR 0 8
8741: PUSH
8742: LD_INT 2
8744: ARRAY
8745: PPUSH
8746: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) < 9 and mech then
8750: LD_VAR 0 4
8754: PUSH
8755: LD_INT 101
8757: EQUAL
8758: PUSH
8759: LD_VAR 0 1
8763: PPUSH
8764: LD_VAR 0 8
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_VAR 0 8
8777: PUSH
8778: LD_INT 2
8780: ARRAY
8781: PPUSH
8782: CALL_OW 297
8786: PUSH
8787: LD_INT 9
8789: LESS
8790: AND
8791: PUSH
8792: LD_VAR 0 5
8796: AND
8797: IFFALSE 8872
// begin if GetLives ( i ) < 1000 then
8799: LD_VAR 0 1
8803: PPUSH
8804: CALL_OW 256
8808: PUSH
8809: LD_INT 1000
8811: LESS
8812: IFFALSE 8825
// AddComRepairVehicleAndReturn ( mech ) else
8814: LD_VAR 0 5
8818: PPUSH
8819: CALL 68965 0 1
8823: GO 8872
// if GetFuel ( i ) <= 50 and cargo then
8825: LD_VAR 0 1
8829: PPUSH
8830: CALL_OW 261
8834: PUSH
8835: LD_INT 50
8837: LESSEQUAL
8838: PUSH
8839: LD_VAR 0 2
8843: AND
8844: IFFALSE 8860
// SetTag ( i , 102 ) else
8846: LD_VAR 0 1
8850: PPUSH
8851: LD_INT 102
8853: PPUSH
8854: CALL_OW 109
8858: GO 8872
// SetTag ( i , 0 ) ;
8860: LD_VAR 0 1
8864: PPUSH
8865: LD_INT 0
8867: PPUSH
8868: CALL_OW 109
// end ; end ;
8872: GO 8470
8874: POP
8875: POP
// until not tmp ;
8876: LD_VAR 0 3
8880: NOT
8881: IFFALSE 7998
// end ;
8883: PPOPN 8
8885: END
// export function GoForOil ; var i , tmp , data , chance , vehicle , needOil , heikeInConvoy , success ; begin
8886: LD_INT 0
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
8892: PPUSH
8893: PPUSH
8894: PPUSH
8895: PPUSH
8896: PPUSH
// SetAreaMapShow ( oilArea , 1 ) ;
8897: LD_INT 20
8899: PPUSH
8900: LD_INT 1
8902: PPUSH
8903: CALL_OW 424
// repeat wait ( 0 0$5 ) ;
8907: LD_INT 175
8909: PPUSH
8910: CALL_OW 67
// heikeInConvoy := false ;
8914: LD_ADDR_VAR 0 8
8918: PUSH
8919: LD_INT 0
8921: ST_TO_ADDR
// needOil := false ;
8922: LD_ADDR_VAR 0 7
8926: PUSH
8927: LD_INT 0
8929: ST_TO_ADDR
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] ] ) ;
8930: LD_ADDR_VAR 0 3
8934: PUSH
8935: LD_INT 20
8937: PPUSH
8938: LD_INT 22
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 3
8950: PUSH
8951: LD_INT 2
8953: PUSH
8954: LD_INT 34
8956: PUSH
8957: LD_INT 88
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PUSH
8964: LD_INT 34
8966: PUSH
8967: LD_INT 31
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: LD_INT 33
8985: PUSH
8986: LD_INT 1
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: LIST
8997: PPUSH
8998: CALL_OW 70
9002: ST_TO_ADDR
// for i in tmp do
9003: LD_ADDR_VAR 0 2
9007: PUSH
9008: LD_VAR 0 3
9012: PUSH
9013: FOR_IN
9014: IFFALSE 9099
// begin if IsDrivenBy ( i ) = Heike then
9016: LD_VAR 0 2
9020: PPUSH
9021: CALL_OW 311
9025: PUSH
9026: LD_EXP 34
9030: EQUAL
9031: IFFALSE 9050
// begin heikeInConvoy := true ;
9033: LD_ADDR_VAR 0 8
9037: PUSH
9038: LD_INT 1
9040: ST_TO_ADDR
// Query ( QHeikeConvoy ) ;
9041: LD_STRING QHeikeConvoy
9043: PPUSH
9044: CALL_OW 97
// break ;
9048: GO 9099
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 10 then
9050: LD_VAR 0 2
9054: PPUSH
9055: CALL_OW 262
9059: PUSH
9060: LD_INT 1
9062: EQUAL
9063: PUSH
9064: LD_VAR 0 2
9068: PPUSH
9069: CALL_OW 261
9073: PUSH
9074: LD_INT 10
9076: LESS
9077: AND
9078: IFFALSE 9097
// begin needOil := true ;
9080: LD_ADDR_VAR 0 7
9084: PUSH
9085: LD_INT 1
9087: ST_TO_ADDR
// Query ( QNeedOil ) ;
9088: LD_STRING QNeedOil
9090: PPUSH
9091: CALL_OW 97
// break ;
9095: GO 9099
// end ; end ;
9097: GO 9013
9099: POP
9100: POP
// if not needOil and not heikeInConvoy and UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
9101: LD_VAR 0 7
9105: NOT
9106: PUSH
9107: LD_VAR 0 8
9111: NOT
9112: AND
9113: PUSH
9114: LD_VAR 0 3
9118: PPUSH
9119: LD_INT 2
9121: PUSH
9122: LD_INT 34
9124: PUSH
9125: LD_INT 32
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 34
9134: PUSH
9135: LD_INT 51
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: PPUSH
9147: CALL_OW 72
9151: AND
9152: IFFALSE 9169
// if Query ( QConvoy ) = 1 then
9154: LD_STRING QConvoy
9156: PPUSH
9157: CALL_OW 97
9161: PUSH
9162: LD_INT 1
9164: EQUAL
9165: IFFALSE 9169
// break ;
9167: GO 9173
// until false ;
9169: LD_INT 0
9171: IFFALSE 8907
// SetAreaMapShow ( oilArea , 0 ) ;
9173: LD_INT 20
9175: PPUSH
9176: LD_INT 0
9178: PPUSH
9179: CALL_OW 424
// data := [ ] ;
9183: LD_ADDR_VAR 0 4
9187: PUSH
9188: EMPTY
9189: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
9190: LD_ADDR_VAR 0 5
9194: PUSH
9195: LD_INT 60
9197: PUSH
9198: LD_INT 50
9200: PUSH
9201: LD_INT 40
9203: PUSH
9204: LD_INT 30
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: PUSH
9213: LD_OWVAR 67
9217: ARRAY
9218: ST_TO_ADDR
// for i in tmp do
9219: LD_ADDR_VAR 0 2
9223: PUSH
9224: LD_VAR 0 3
9228: PUSH
9229: FOR_IN
9230: IFFALSE 9327
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , GetFuel ( i ) , ] ) ;
9232: LD_ADDR_VAR 0 4
9236: PUSH
9237: LD_VAR 0 4
9241: PPUSH
9242: LD_VAR 0 2
9246: PUSH
9247: LD_VAR 0 2
9251: PPUSH
9252: CALL_OW 311
9256: PUSH
9257: LD_VAR 0 2
9261: PPUSH
9262: CALL_OW 256
9266: PUSH
9267: LD_VAR 0 2
9271: PPUSH
9272: CALL_OW 261
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: PPUSH
9283: CALL 67145 0 2
9287: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
9288: LD_VAR 0 2
9292: PPUSH
9293: CALL_OW 311
9297: PPUSH
9298: CALL_OW 64
// RemoveUnit ( i ) ;
9302: LD_VAR 0 2
9306: PPUSH
9307: CALL_OW 64
// chance := chance + 20 ;
9311: LD_ADDR_VAR 0 5
9315: PUSH
9316: LD_VAR 0 5
9320: PUSH
9321: LD_INT 20
9323: PLUS
9324: ST_TO_ADDR
// end ;
9325: GO 9229
9327: POP
9328: POP
// wait ( rand ( 0 0$45 , 2 2$30 ) ) ;
9329: LD_INT 1575
9331: PPUSH
9332: LD_INT 5250
9334: PPUSH
9335: CALL_OW 12
9339: PPUSH
9340: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9344: LD_INT 35
9346: PPUSH
9347: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
9351: LD_INT 22
9353: PUSH
9354: LD_INT 3
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: PUSH
9361: LD_INT 92
9363: PUSH
9364: LD_INT 261
9366: PUSH
9367: LD_INT 71
9369: PUSH
9370: LD_INT 12
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PPUSH
9383: CALL_OW 69
9387: NOT
9388: PUSH
9389: LD_INT 277
9391: PPUSH
9392: LD_INT 80
9394: PPUSH
9395: CALL_OW 428
9399: NOT
9400: AND
9401: IFFALSE 9344
// for i in data do
9403: LD_ADDR_VAR 0 2
9407: PUSH
9408: LD_VAR 0 4
9412: PUSH
9413: FOR_IN
9414: IFFALSE 9815
// begin uc_nation := GetNation ( i [ 1 ] ) ;
9416: LD_ADDR_OWVAR 21
9420: PUSH
9421: LD_VAR 0 2
9425: PUSH
9426: LD_INT 1
9428: ARRAY
9429: PPUSH
9430: CALL_OW 248
9434: ST_TO_ADDR
// uc_side := 2 ;
9435: LD_ADDR_OWVAR 20
9439: PUSH
9440: LD_INT 2
9442: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
9443: LD_VAR 0 2
9447: PUSH
9448: LD_INT 1
9450: ARRAY
9451: PPUSH
9452: CALL_OW 265
9456: PPUSH
9457: LD_VAR 0 2
9461: PUSH
9462: LD_INT 1
9464: ARRAY
9465: PPUSH
9466: CALL_OW 262
9470: PPUSH
9471: LD_VAR 0 2
9475: PUSH
9476: LD_INT 1
9478: ARRAY
9479: PPUSH
9480: CALL_OW 263
9484: PPUSH
9485: LD_VAR 0 2
9489: PUSH
9490: LD_INT 1
9492: ARRAY
9493: PPUSH
9494: CALL_OW 264
9498: PPUSH
9499: LD_INT 66
9501: PPUSH
9502: CALL 34283 0 5
// vehicle := CreateVehicle ;
9506: LD_ADDR_VAR 0 6
9510: PUSH
9511: CALL_OW 45
9515: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
9516: LD_VAR 0 6
9520: PPUSH
9521: LD_INT 277
9523: PPUSH
9524: LD_INT 80
9526: PPUSH
9527: LD_INT 4
9529: PPUSH
9530: LD_INT 0
9532: PPUSH
9533: CALL 69285 0 5
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
9537: LD_VAR 0 2
9541: PUSH
9542: LD_INT 2
9544: ARRAY
9545: PPUSH
9546: LD_VAR 0 6
9550: PPUSH
9551: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
9555: LD_VAR 0 6
9559: PPUSH
9560: LD_VAR 0 2
9564: PUSH
9565: LD_INT 3
9567: ARRAY
9568: PPUSH
9569: CALL_OW 234
// success := Prob ( chance ) ;
9573: LD_ADDR_VAR 0 9
9577: PUSH
9578: LD_VAR 0 5
9582: PPUSH
9583: CALL_OW 13
9587: ST_TO_ADDR
// if success then
9588: LD_VAR 0 9
9592: IFFALSE 9674
// begin if GetEngine ( vehicle ) = engine_combustion then
9594: LD_VAR 0 6
9598: PPUSH
9599: CALL_OW 262
9603: PUSH
9604: LD_INT 1
9606: EQUAL
9607: IFFALSE 9621
// SetFuel ( vehicle , 90 ) ;
9609: LD_VAR 0 6
9613: PPUSH
9614: LD_INT 90
9616: PPUSH
9617: CALL_OW 240
// if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
9621: LD_VAR 0 6
9625: PPUSH
9626: CALL_OW 264
9630: PUSH
9631: LD_INT 32
9633: PUSH
9634: LD_INT 51
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: IN
9641: IFFALSE 9672
// begin collectedOil := collectedOil + 100 ;
9643: LD_ADDR_EXP 33
9647: PUSH
9648: LD_EXP 33
9652: PUSH
9653: LD_INT 100
9655: PLUS
9656: ST_TO_ADDR
// SetCargo ( vehicle , mat_oil , 100 ) ;
9657: LD_VAR 0 6
9661: PPUSH
9662: LD_INT 2
9664: PPUSH
9665: LD_INT 100
9667: PPUSH
9668: CALL_OW 290
// end ; end else
9672: GO 9746
// begin if i [ 3 ] > 333 then
9674: LD_VAR 0 2
9678: PUSH
9679: LD_INT 3
9681: ARRAY
9682: PUSH
9683: LD_INT 333
9685: GREATER
9686: IFFALSE 9700
// SetLives ( vehicle , 333 ) ;
9688: LD_VAR 0 6
9692: PPUSH
9693: LD_INT 333
9695: PPUSH
9696: CALL_OW 234
// if i [ 4 ] > 20 then
9700: LD_VAR 0 2
9704: PUSH
9705: LD_INT 4
9707: ARRAY
9708: PUSH
9709: LD_INT 20
9711: GREATER
9712: IFFALSE 9728
// SetFuel ( vehicle , 20 ) else
9714: LD_VAR 0 6
9718: PPUSH
9719: LD_INT 20
9721: PPUSH
9722: CALL_OW 240
9726: GO 9746
// SetFuel ( vehicle , i [ 4 ] ) ;
9728: LD_VAR 0 6
9732: PPUSH
9733: LD_VAR 0 2
9737: PUSH
9738: LD_INT 4
9740: ARRAY
9741: PPUSH
9742: CALL_OW 240
// end ; ComMoveXY ( vehicle , 250 , 119 ) ;
9746: LD_VAR 0 6
9750: PPUSH
9751: LD_INT 250
9753: PPUSH
9754: LD_INT 119
9756: PPUSH
9757: CALL_OW 111
// AddComMoveXY ( vehicle , 211 , 80 ) ;
9761: LD_VAR 0 6
9765: PPUSH
9766: LD_INT 211
9768: PPUSH
9769: LD_INT 80
9771: PPUSH
9772: CALL_OW 171
// repeat wait ( 0 0$5 ) ;
9776: LD_INT 175
9778: PPUSH
9779: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_placed ] ] ) ;
9783: LD_INT 20
9785: PPUSH
9786: LD_INT 22
9788: PUSH
9789: LD_INT 2
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: LD_INT 52
9798: PUSH
9799: EMPTY
9800: LIST
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PPUSH
9806: CALL_OW 70
9810: NOT
9811: IFFALSE 9776
// end ;
9813: GO 9413
9815: POP
9816: POP
// wait ( 0 0$10 ) ;
9817: LD_INT 350
9819: PPUSH
9820: CALL_OW 67
// GoForOil ;
9824: CALL 8886 0 0
// end ;
9828: LD_VAR 0 1
9832: RET
// every 0 0$2 trigger FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do var i ;
9833: LD_INT 22
9835: PPUSH
9836: LD_INT 21
9838: PUSH
9839: LD_INT 2
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 22
9848: PUSH
9849: LD_INT 5
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 58
9858: PUSH
9859: EMPTY
9860: LIST
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: LIST
9866: PPUSH
9867: CALL_OW 70
9871: IFFALSE 9940
9873: GO 9875
9875: DISABLE
9876: LD_INT 0
9878: PPUSH
// begin enable ;
9879: ENABLE
// for i in FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do
9880: LD_ADDR_VAR 0 1
9884: PUSH
9885: LD_INT 22
9887: PPUSH
9888: LD_INT 21
9890: PUSH
9891: LD_INT 2
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: LD_INT 22
9900: PUSH
9901: LD_INT 5
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PUSH
9908: LD_INT 58
9910: PUSH
9911: EMPTY
9912: LIST
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: LIST
9918: PPUSH
9919: CALL_OW 70
9923: PUSH
9924: FOR_IN
9925: IFFALSE 9938
// KillUnit ( i ) ;
9927: LD_VAR 0 1
9931: PPUSH
9932: CALL_OW 66
9936: GO 9924
9938: POP
9939: POP
// end ; end_of_file
9940: PPOPN 1
9942: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
9943: LD_INT 0
9945: PPUSH
// uc_side := side ;
9946: LD_ADDR_OWVAR 20
9950: PUSH
9951: LD_VAR 0 1
9955: ST_TO_ADDR
// uc_nation := nation ;
9956: LD_ADDR_OWVAR 21
9960: PUSH
9961: LD_VAR 0 2
9965: ST_TO_ADDR
// vc_chassis := chassis ;
9966: LD_ADDR_OWVAR 37
9970: PUSH
9971: LD_VAR 0 3
9975: ST_TO_ADDR
// vc_engine := engine ;
9976: LD_ADDR_OWVAR 39
9980: PUSH
9981: LD_VAR 0 4
9985: ST_TO_ADDR
// vc_control := control ;
9986: LD_ADDR_OWVAR 38
9990: PUSH
9991: LD_VAR 0 5
9995: ST_TO_ADDR
// vc_weapon := weapon ;
9996: LD_ADDR_OWVAR 40
10000: PUSH
10001: LD_VAR 0 6
10005: ST_TO_ADDR
// vc_fuel_battery := fuel ;
10006: LD_ADDR_OWVAR 41
10010: PUSH
10011: LD_VAR 0 7
10015: ST_TO_ADDR
// result := CreateVehicle ;
10016: LD_ADDR_VAR 0 8
10020: PUSH
10021: CALL_OW 45
10025: ST_TO_ADDR
// end ;
10026: LD_VAR 0 8
10030: RET
// export function SayX ( units , ident ) ; var i ; begin
10031: LD_INT 0
10033: PPUSH
10034: PPUSH
// result := false ;
10035: LD_ADDR_VAR 0 3
10039: PUSH
10040: LD_INT 0
10042: ST_TO_ADDR
// if not units then
10043: LD_VAR 0 1
10047: NOT
10048: IFFALSE 10052
// exit ;
10050: GO 10106
// for i in units do
10052: LD_ADDR_VAR 0 4
10056: PUSH
10057: LD_VAR 0 1
10061: PUSH
10062: FOR_IN
10063: IFFALSE 10104
// if IsOk ( i ) then
10065: LD_VAR 0 4
10069: PPUSH
10070: CALL_OW 302
10074: IFFALSE 10102
// begin Say ( i , ident ) ;
10076: LD_VAR 0 4
10080: PPUSH
10081: LD_VAR 0 2
10085: PPUSH
10086: CALL_OW 88
// result := i ;
10090: LD_ADDR_VAR 0 3
10094: PUSH
10095: LD_VAR 0 4
10099: ST_TO_ADDR
// break ;
10100: GO 10104
// end ;
10102: GO 10062
10104: POP
10105: POP
// end ;
10106: LD_VAR 0 3
10110: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
10111: LD_INT 0
10113: PPUSH
10114: PPUSH
// InitUc ;
10115: CALL_OW 18
// InitHc ;
10119: CALL_OW 19
// uc_side := 0 ;
10123: LD_ADDR_OWVAR 20
10127: PUSH
10128: LD_INT 0
10130: ST_TO_ADDR
// uc_nation := 0 ;
10131: LD_ADDR_OWVAR 21
10135: PUSH
10136: LD_INT 0
10138: ST_TO_ADDR
// for i = 1 to amount do
10139: LD_ADDR_VAR 0 4
10143: PUSH
10144: DOUBLE
10145: LD_INT 1
10147: DEC
10148: ST_TO_ADDR
10149: LD_VAR 0 2
10153: PUSH
10154: FOR_TO
10155: IFFALSE 10237
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
10157: LD_ADDR_OWVAR 29
10161: PUSH
10162: LD_INT 9
10164: PPUSH
10165: LD_INT 12
10167: PPUSH
10168: CALL_OW 12
10172: PUSH
10173: LD_INT 9
10175: PPUSH
10176: LD_INT 12
10178: PPUSH
10179: CALL_OW 12
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
10188: LD_ADDR_OWVAR 35
10192: PUSH
10193: LD_INT 1
10195: NEG
10196: PPUSH
10197: LD_INT 1
10199: PPUSH
10200: CALL_OW 12
10204: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
10205: LD_INT 0
10207: PPUSH
10208: LD_INT 12
10210: PPUSH
10211: LD_INT 1
10213: PPUSH
10214: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
10218: CALL_OW 44
10222: PPUSH
10223: LD_VAR 0 1
10227: PPUSH
10228: LD_INT 0
10230: PPUSH
10231: CALL_OW 49
// end ;
10235: GO 10154
10237: POP
10238: POP
// InitHc ;
10239: CALL_OW 19
// end ;
10243: LD_VAR 0 3
10247: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
10248: LD_INT 0
10250: PPUSH
10251: PPUSH
// uc_side := 0 ;
10252: LD_ADDR_OWVAR 20
10256: PUSH
10257: LD_INT 0
10259: ST_TO_ADDR
// uc_nation := 0 ;
10260: LD_ADDR_OWVAR 21
10264: PUSH
10265: LD_INT 0
10267: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
10268: LD_INT 7
10270: PPUSH
10271: LD_INT 6
10273: PUSH
10274: LD_INT 5
10276: PUSH
10277: LD_INT 4
10279: PUSH
10280: LD_INT 3
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: PUSH
10289: LD_OWVAR 67
10293: ARRAY
10294: PPUSH
10295: CALL 10111 0 2
// for i = 1 to 2 do
10299: LD_ADDR_VAR 0 4
10303: PUSH
10304: DOUBLE
10305: LD_INT 1
10307: DEC
10308: ST_TO_ADDR
10309: LD_INT 2
10311: PUSH
10312: FOR_TO
10313: IFFALSE 10350
// begin vc_chassis := class_mastodont ;
10315: LD_ADDR_OWVAR 37
10319: PUSH
10320: LD_INT 31
10322: ST_TO_ADDR
// vc_control := control_rider ;
10323: LD_ADDR_OWVAR 38
10327: PUSH
10328: LD_INT 4
10330: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
10331: CALL_OW 45
10335: PPUSH
10336: LD_VAR 0 1
10340: PPUSH
10341: LD_INT 0
10343: PPUSH
10344: CALL 66050 0 3
// end ;
10348: GO 10312
10350: POP
10351: POP
// InitHc ;
10352: CALL_OW 19
// for i := 1 to 3 do
10356: LD_ADDR_VAR 0 4
10360: PUSH
10361: DOUBLE
10362: LD_INT 1
10364: DEC
10365: ST_TO_ADDR
10366: LD_INT 3
10368: PUSH
10369: FOR_TO
10370: IFFALSE 10407
// begin hc_class := class_horse ;
10372: LD_ADDR_OWVAR 28
10376: PUSH
10377: LD_INT 21
10379: ST_TO_ADDR
// hc_gallery :=  ;
10380: LD_ADDR_OWVAR 33
10384: PUSH
10385: LD_STRING 
10387: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10388: CALL_OW 44
10392: PPUSH
10393: LD_VAR 0 1
10397: PPUSH
10398: LD_INT 0
10400: PPUSH
10401: CALL_OW 49
// end ;
10405: GO 10369
10407: POP
10408: POP
// InitHc ;
10409: CALL_OW 19
// for i = 1 to 3 do
10413: LD_ADDR_VAR 0 4
10417: PUSH
10418: DOUBLE
10419: LD_INT 1
10421: DEC
10422: ST_TO_ADDR
10423: LD_INT 3
10425: PUSH
10426: FOR_TO
10427: IFFALSE 10481
// begin hc_class = class_tiger ;
10429: LD_ADDR_OWVAR 28
10433: PUSH
10434: LD_INT 14
10436: ST_TO_ADDR
// hc_gallery =  ;
10437: LD_ADDR_OWVAR 33
10441: PUSH
10442: LD_STRING 
10444: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
10445: LD_ADDR_OWVAR 35
10449: PUSH
10450: LD_INT 7
10452: NEG
10453: PPUSH
10454: LD_INT 7
10456: PPUSH
10457: CALL_OW 12
10461: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
10462: CALL_OW 44
10466: PPUSH
10467: LD_VAR 0 1
10471: PPUSH
10472: LD_INT 0
10474: PPUSH
10475: CALL 66050 0 3
// end ;
10479: GO 10426
10481: POP
10482: POP
// InitHc ;
10483: CALL_OW 19
// for i := 1 to 4 do
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: DOUBLE
10493: LD_INT 1
10495: DEC
10496: ST_TO_ADDR
10497: LD_INT 4
10499: PUSH
10500: FOR_TO
10501: IFFALSE 10538
// begin hc_class := class_phororhacos ;
10503: LD_ADDR_OWVAR 28
10507: PUSH
10508: LD_INT 18
10510: ST_TO_ADDR
// hc_gallery :=  ;
10511: LD_ADDR_OWVAR 33
10515: PUSH
10516: LD_STRING 
10518: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10519: CALL_OW 44
10523: PPUSH
10524: LD_VAR 0 1
10528: PPUSH
10529: LD_INT 0
10531: PPUSH
10532: CALL_OW 49
// end ;
10536: GO 10500
10538: POP
10539: POP
// InitHc ;
10540: CALL_OW 19
// for i := 1 to 4 do
10544: LD_ADDR_VAR 0 4
10548: PUSH
10549: DOUBLE
10550: LD_INT 1
10552: DEC
10553: ST_TO_ADDR
10554: LD_INT 4
10556: PUSH
10557: FOR_TO
10558: IFFALSE 10595
// begin hc_class := class_baggie ;
10560: LD_ADDR_OWVAR 28
10564: PUSH
10565: LD_INT 13
10567: ST_TO_ADDR
// hc_gallery :=  ;
10568: LD_ADDR_OWVAR 33
10572: PUSH
10573: LD_STRING 
10575: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10576: CALL_OW 44
10580: PPUSH
10581: LD_VAR 0 1
10585: PPUSH
10586: LD_INT 0
10588: PPUSH
10589: CALL_OW 49
// end ;
10593: GO 10557
10595: POP
10596: POP
// InitHc ;
10597: CALL_OW 19
// for i := 1 to 7 do
10601: LD_ADDR_VAR 0 4
10605: PUSH
10606: DOUBLE
10607: LD_INT 1
10609: DEC
10610: ST_TO_ADDR
10611: LD_INT 7
10613: PUSH
10614: FOR_TO
10615: IFFALSE 10652
// begin hc_class := class_frog ;
10617: LD_ADDR_OWVAR 28
10621: PUSH
10622: LD_INT 19
10624: ST_TO_ADDR
// hc_gallery :=  ;
10625: LD_ADDR_OWVAR 33
10629: PUSH
10630: LD_STRING 
10632: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
10633: CALL_OW 44
10637: PPUSH
10638: LD_VAR 0 2
10642: PPUSH
10643: LD_INT 0
10645: PPUSH
10646: CALL_OW 49
// end ;
10650: GO 10614
10652: POP
10653: POP
// end ;
10654: LD_VAR 0 3
10658: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
10659: LD_INT 0
10661: PPUSH
10662: PPUSH
10663: PPUSH
// if not observer or not unit then
10664: LD_VAR 0 1
10668: NOT
10669: PUSH
10670: LD_VAR 0 2
10674: NOT
10675: OR
10676: IFFALSE 10680
// exit ;
10678: GO 10728
// if not See ( GetSide ( observer ) , unit ) then
10680: LD_VAR 0 1
10684: PPUSH
10685: CALL_OW 255
10689: PPUSH
10690: LD_VAR 0 2
10694: PPUSH
10695: CALL_OW 292
10699: NOT
10700: IFFALSE 10704
// exit ;
10702: GO 10728
// result := GetDistUnits ( observer , unit ) < 12 ;
10704: LD_ADDR_VAR 0 3
10708: PUSH
10709: LD_VAR 0 1
10713: PPUSH
10714: LD_VAR 0 2
10718: PPUSH
10719: CALL_OW 296
10723: PUSH
10724: LD_INT 12
10726: LESS
10727: ST_TO_ADDR
// end ;
10728: LD_VAR 0 3
10732: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
10733: LD_INT 0
10735: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
10736: LD_VAR 0 2
10740: PUSH
10741: LD_INT 1
10743: ARRAY
10744: PPUSH
10745: LD_VAR 0 2
10749: PUSH
10750: LD_INT 2
10752: ARRAY
10753: PPUSH
10754: CALL_OW 488
10758: PUSH
10759: LD_VAR 0 2
10763: PUSH
10764: LD_INT 1
10766: ARRAY
10767: PPUSH
10768: LD_VAR 0 2
10772: PUSH
10773: LD_INT 2
10775: ARRAY
10776: PPUSH
10777: CALL_OW 428
10781: PUSH
10782: LD_INT 0
10784: EQUAL
10785: AND
10786: IFFALSE 10820
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
10788: LD_VAR 0 1
10792: PPUSH
10793: LD_VAR 0 2
10797: PUSH
10798: LD_INT 1
10800: ARRAY
10801: PPUSH
10802: LD_VAR 0 2
10806: PUSH
10807: LD_INT 2
10809: ARRAY
10810: PPUSH
10811: LD_VAR 0 3
10815: PPUSH
10816: CALL_OW 48
// end ;
10820: LD_VAR 0 4
10824: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
10825: LD_INT 0
10827: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
10828: LD_VAR 0 1
10832: PPUSH
10833: LD_VAR 0 2
10837: PPUSH
10838: LD_VAR 0 3
10842: PPUSH
10843: LD_VAR 0 4
10847: PPUSH
10848: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
10852: LD_VAR 0 1
10856: PPUSH
10857: LD_VAR 0 2
10861: PPUSH
10862: LD_VAR 0 3
10866: PPUSH
10867: CALL_OW 331
// end ;
10871: LD_VAR 0 5
10875: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
10876: LD_INT 0
10878: PPUSH
// if not units then
10879: LD_VAR 0 1
10883: NOT
10884: IFFALSE 10888
// exit ;
10886: GO 10971
// result := true ;
10888: LD_ADDR_VAR 0 4
10892: PUSH
10893: LD_INT 1
10895: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
10896: LD_VAR 0 1
10900: PPUSH
10901: LD_INT 26
10903: PUSH
10904: LD_INT 1
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PPUSH
10911: CALL_OW 72
10915: PUSH
10916: LD_INT 1
10918: ARRAY
10919: PPUSH
10920: LD_VAR 0 2
10924: PPUSH
10925: CALL_OW 88
10929: NOT
10930: IFFALSE 10971
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
10932: LD_ADDR_VAR 0 4
10936: PUSH
10937: LD_VAR 0 1
10941: PPUSH
10942: LD_INT 26
10944: PUSH
10945: LD_INT 2
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PPUSH
10952: CALL_OW 72
10956: PUSH
10957: LD_INT 1
10959: ARRAY
10960: PPUSH
10961: LD_VAR 0 3
10965: PPUSH
10966: CALL_OW 88
10970: ST_TO_ADDR
// end ;
10971: LD_VAR 0 4
10975: RET
// export function SeeGroup ( side , group ) ; var i ; begin
10976: LD_INT 0
10978: PPUSH
10979: PPUSH
// if not group then
10980: LD_VAR 0 2
10984: NOT
10985: IFFALSE 10989
// exit ;
10987: GO 11034
// for i in group do
10989: LD_ADDR_VAR 0 4
10993: PUSH
10994: LD_VAR 0 2
10998: PUSH
10999: FOR_IN
11000: IFFALSE 11032
// if See ( side , i ) then
11002: LD_VAR 0 1
11006: PPUSH
11007: LD_VAR 0 4
11011: PPUSH
11012: CALL_OW 292
11016: IFFALSE 11030
// begin result := true ;
11018: LD_ADDR_VAR 0 3
11022: PUSH
11023: LD_INT 1
11025: ST_TO_ADDR
// exit ;
11026: POP
11027: POP
11028: GO 11034
// end ;
11030: GO 10999
11032: POP
11033: POP
// end ; end_of_file
11034: LD_VAR 0 3
11038: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
11039: LD_INT 0
11041: PPUSH
11042: PPUSH
11043: PPUSH
11044: PPUSH
11045: PPUSH
11046: PPUSH
11047: PPUSH
// uc_side := 3 ;
11048: LD_ADDR_OWVAR 20
11052: PUSH
11053: LD_INT 3
11055: ST_TO_ADDR
// uc_nation := 3 ;
11056: LD_ADDR_OWVAR 21
11060: PUSH
11061: LD_INT 3
11063: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
11064: LD_ADDR_EXP 53
11068: PUSH
11069: LD_STRING Morozov
11071: PPUSH
11072: CALL_OW 25
11076: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
11077: LD_EXP 53
11081: PPUSH
11082: LD_INT 52
11084: PPUSH
11085: CALL_OW 52
// if not gaidarKilled then
11089: LD_EXP 7
11093: NOT
11094: IFFALSE 11127
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
11096: LD_ADDR_EXP 54
11100: PUSH
11101: LD_STRING Gaydar
11103: PPUSH
11104: LD_INT 0
11106: PPUSH
11107: LD_STRING 
11109: PPUSH
11110: CALL 29443 0 3
11114: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
11115: LD_EXP 54
11119: PPUSH
11120: LD_INT 52
11122: PPUSH
11123: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
11127: LD_INT 52
11129: PPUSH
11130: LD_STRING lenin
11132: PPUSH
11133: CALL_OW 500
// ruOutsiders := [ ] ;
11137: LD_ADDR_EXP 56
11141: PUSH
11142: EMPTY
11143: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
11144: LD_ADDR_EXP 58
11148: PUSH
11149: EMPTY
11150: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
11151: LD_ADDR_EXP 59
11155: PUSH
11156: EMPTY
11157: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
11158: LD_ADDR_EXP 60
11162: PUSH
11163: EMPTY
11164: ST_TO_ADDR
// ruAttackers := [ ] ;
11165: LD_ADDR_EXP 61
11169: PUSH
11170: EMPTY
11171: ST_TO_ADDR
// waveStrength := 0 ;
11172: LD_ADDR_EXP 62
11176: PUSH
11177: LD_INT 0
11179: ST_TO_ADDR
// if not gaidarKilled then
11180: LD_EXP 7
11184: NOT
11185: IFFALSE 11195
// waveStrength := 2 ;
11187: LD_ADDR_EXP 62
11191: PUSH
11192: LD_INT 2
11194: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
11195: LD_ADDR_VAR 0 7
11199: PUSH
11200: LD_INT 22
11202: PUSH
11203: LD_INT 3
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: LD_INT 21
11212: PUSH
11213: LD_INT 3
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PPUSH
11224: CALL_OW 69
11228: ST_TO_ADDR
// for i in tmp do
11229: LD_ADDR_VAR 0 2
11233: PUSH
11234: LD_VAR 0 7
11238: PUSH
11239: FOR_IN
11240: IFFALSE 11277
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
11242: LD_VAR 0 2
11246: PPUSH
11247: LD_INT 5
11249: PUSH
11250: LD_INT 6
11252: PUSH
11253: LD_INT 7
11255: PUSH
11256: LD_INT 8
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: PUSH
11265: LD_OWVAR 67
11269: ARRAY
11270: PPUSH
11271: CALL_OW 241
11275: GO 11239
11277: POP
11278: POP
// for i := 1 to 3 do
11279: LD_ADDR_VAR 0 2
11283: PUSH
11284: DOUBLE
11285: LD_INT 1
11287: DEC
11288: ST_TO_ADDR
11289: LD_INT 3
11291: PUSH
11292: FOR_TO
11293: IFFALSE 11331
// begin PrepareHuman ( false , 1 , 0 ) ;
11295: LD_INT 0
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: LD_INT 0
11303: PPUSH
11304: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
11308: CALL_OW 44
11312: PPUSH
11313: LD_INT 75
11315: PPUSH
11316: LD_INT 49
11318: PPUSH
11319: LD_INT 3
11321: PPUSH
11322: LD_INT 0
11324: PPUSH
11325: CALL_OW 50
// end ;
11329: GO 11292
11331: POP
11332: POP
// for i := 1 to 4 do
11333: LD_ADDR_VAR 0 2
11337: PUSH
11338: DOUBLE
11339: LD_INT 1
11341: DEC
11342: ST_TO_ADDR
11343: LD_INT 4
11345: PUSH
11346: FOR_TO
11347: IFFALSE 11393
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
11349: LD_INT 0
11351: PPUSH
11352: LD_INT 1
11354: PPUSH
11355: LD_INT 2
11357: PPUSH
11358: CALL_OW 12
11362: PPUSH
11363: LD_INT 0
11365: PPUSH
11366: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
11370: CALL_OW 44
11374: PPUSH
11375: LD_INT 330
11377: PPUSH
11378: LD_INT 231
11380: PPUSH
11381: LD_INT 5
11383: PPUSH
11384: LD_INT 0
11386: PPUSH
11387: CALL_OW 50
// end ;
11391: GO 11346
11393: POP
11394: POP
// hc_class := 1 ;
11395: LD_ADDR_OWVAR 28
11399: PUSH
11400: LD_INT 1
11402: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
11403: CALL_OW 44
11407: PPUSH
11408: LD_INT 324
11410: PPUSH
11411: LD_INT 219
11413: PPUSH
11414: CALL_OW 428
11418: PPUSH
11419: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
11423: CALL_OW 44
11427: PPUSH
11428: LD_INT 316
11430: PPUSH
11431: LD_INT 223
11433: PPUSH
11434: CALL_OW 428
11438: PPUSH
11439: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
11443: LD_ADDR_VAR 0 7
11447: PUSH
11448: LD_INT 172
11450: PPUSH
11451: LD_INT 198
11453: PPUSH
11454: CALL_OW 428
11458: PPUSH
11459: CALL_OW 274
11463: PUSH
11464: LD_INT 189
11466: PPUSH
11467: LD_INT 156
11469: PPUSH
11470: CALL_OW 428
11474: PPUSH
11475: CALL_OW 274
11479: PUSH
11480: LD_INT 341
11482: PPUSH
11483: LD_INT 232
11485: PPUSH
11486: CALL_OW 428
11490: PPUSH
11491: CALL_OW 274
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: LIST
11500: ST_TO_ADDR
// for i in tmp do
11501: LD_ADDR_VAR 0 2
11505: PUSH
11506: LD_VAR 0 7
11510: PUSH
11511: FOR_IN
11512: IFFALSE 11546
// begin SetResourceType ( i , mat_cans , 200 ) ;
11514: LD_VAR 0 2
11518: PPUSH
11519: LD_INT 1
11521: PPUSH
11522: LD_INT 200
11524: PPUSH
11525: CALL_OW 277
// SetResourceType ( i , mat_oil , 300 ) ;
11529: LD_VAR 0 2
11533: PPUSH
11534: LD_INT 2
11536: PPUSH
11537: LD_INT 300
11539: PPUSH
11540: CALL_OW 277
// end ;
11544: GO 11511
11546: POP
11547: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
11548: LD_ADDR_VAR 0 7
11552: PUSH
11553: LD_INT 177
11555: PUSH
11556: LD_INT 114
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 138
11565: PUSH
11566: LD_INT 96
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: ST_TO_ADDR
// for i := 1 to tmp do
11577: LD_ADDR_VAR 0 2
11581: PUSH
11582: DOUBLE
11583: LD_INT 1
11585: DEC
11586: ST_TO_ADDR
11587: LD_VAR 0 7
11591: PUSH
11592: FOR_TO
11593: IFFALSE 11676
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
11595: LD_INT 0
11597: PPUSH
11598: LD_INT 9
11600: PPUSH
11601: LD_INT 6
11603: PPUSH
11604: CALL_OW 380
// un := CreateHuman ;
11608: LD_ADDR_VAR 0 5
11612: PUSH
11613: CALL_OW 44
11617: ST_TO_ADDR
// SetDir ( un , 2 ) ;
11618: LD_VAR 0 5
11622: PPUSH
11623: LD_INT 2
11625: PPUSH
11626: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
11630: LD_VAR 0 5
11634: PPUSH
11635: LD_VAR 0 7
11639: PUSH
11640: LD_VAR 0 2
11644: ARRAY
11645: PUSH
11646: LD_INT 1
11648: ARRAY
11649: PPUSH
11650: LD_VAR 0 7
11654: PUSH
11655: LD_VAR 0 2
11659: ARRAY
11660: PUSH
11661: LD_INT 2
11663: ARRAY
11664: PPUSH
11665: CALL_OW 428
11669: PPUSH
11670: CALL_OW 52
// end ;
11674: GO 11592
11676: POP
11677: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
11678: LD_ADDR_VAR 0 7
11682: PUSH
11683: LD_INT 198
11685: PUSH
11686: LD_INT 158
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 203
11695: PUSH
11696: LD_INT 166
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 181
11705: PUSH
11706: LD_INT 209
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 178
11715: PUSH
11716: LD_INT 196
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 181
11725: PUSH
11726: LD_INT 212
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: ST_TO_ADDR
// for i := 1 to tmp do
11740: LD_ADDR_VAR 0 2
11744: PUSH
11745: DOUBLE
11746: LD_INT 1
11748: DEC
11749: ST_TO_ADDR
11750: LD_VAR 0 7
11754: PUSH
11755: FOR_TO
11756: IFFALSE 11877
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
11758: LD_INT 0
11760: PPUSH
11761: LD_INT 1
11763: PPUSH
11764: LD_INT 4
11766: PUSH
11767: LD_INT 5
11769: PUSH
11770: LD_INT 6
11772: PUSH
11773: LD_INT 7
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: PUSH
11782: LD_OWVAR 67
11786: ARRAY
11787: PPUSH
11788: CALL_OW 380
// un := CreateHuman ;
11792: LD_ADDR_VAR 0 5
11796: PUSH
11797: CALL_OW 44
11801: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
11802: LD_ADDR_VAR 0 4
11806: PUSH
11807: LD_VAR 0 7
11811: PUSH
11812: LD_VAR 0 2
11816: ARRAY
11817: PUSH
11818: LD_INT 1
11820: ARRAY
11821: PPUSH
11822: LD_VAR 0 7
11826: PUSH
11827: LD_VAR 0 2
11831: ARRAY
11832: PUSH
11833: LD_INT 2
11835: ARRAY
11836: PPUSH
11837: CALL_OW 428
11841: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
11842: LD_VAR 0 5
11846: PPUSH
11847: LD_VAR 0 4
11851: PPUSH
11852: CALL 62381 0 1
11856: PPUSH
11857: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
11861: LD_VAR 0 5
11865: PPUSH
11866: LD_VAR 0 4
11870: PPUSH
11871: CALL_OW 52
// end ;
11875: GO 11755
11877: POP
11878: POP
// for i := 1 to 3 do
11879: LD_ADDR_VAR 0 2
11883: PUSH
11884: DOUBLE
11885: LD_INT 1
11887: DEC
11888: ST_TO_ADDR
11889: LD_INT 3
11891: PUSH
11892: FOR_TO
11893: IFFALSE 11948
// begin InitHc ;
11895: CALL_OW 19
// uc_nation := 0 ;
11899: LD_ADDR_OWVAR 21
11903: PUSH
11904: LD_INT 0
11906: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
11907: LD_ADDR_OWVAR 28
11911: PUSH
11912: LD_INT 16
11914: ST_TO_ADDR
// un := CreateHuman ;
11915: LD_ADDR_VAR 0 5
11919: PUSH
11920: CALL_OW 44
11924: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
11925: LD_VAR 0 5
11929: PPUSH
11930: LD_INT 194
11932: PPUSH
11933: LD_INT 164
11935: PPUSH
11936: LD_INT 6
11938: PPUSH
11939: LD_INT 0
11941: PPUSH
11942: CALL_OW 50
// end ;
11946: GO 11892
11948: POP
11949: POP
// uc_nation := 3 ;
11950: LD_ADDR_OWVAR 21
11954: PUSH
11955: LD_INT 3
11957: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
11958: LD_INT 24
11960: PPUSH
11961: LD_INT 1
11963: PPUSH
11964: LD_INT 1
11966: PPUSH
11967: LD_INT 44
11969: PPUSH
11970: LD_INT 10
11972: PPUSH
11973: CALL 34283 0 5
// un := CreateVehicle ;
11977: LD_ADDR_VAR 0 5
11981: PUSH
11982: CALL_OW 45
11986: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 166 , 1 , false ) ;
11987: LD_VAR 0 5
11991: PPUSH
11992: LD_INT 199
11994: PPUSH
11995: LD_INT 166
11997: PPUSH
11998: LD_INT 1
12000: PPUSH
12001: LD_INT 0
12003: PPUSH
12004: CALL 69285 0 5
// ComHold ( un ) ;
12008: LD_VAR 0 5
12012: PPUSH
12013: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
12017: LD_INT 0
12019: PPUSH
12020: LD_INT 3
12022: PPUSH
12023: LD_INT 4
12025: PPUSH
12026: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12030: CALL_OW 44
12034: PPUSH
12035: LD_VAR 0 5
12039: PPUSH
12040: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12044: LD_INT 24
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: LD_INT 1
12052: PPUSH
12053: LD_INT 45
12055: PPUSH
12056: LD_INT 10
12058: PPUSH
12059: CALL 34283 0 5
// un := CreateVehicle ;
12063: LD_ADDR_VAR 0 5
12067: PUSH
12068: CALL_OW 45
12072: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
12073: LD_VAR 0 5
12077: PPUSH
12078: LD_INT 129
12080: PPUSH
12081: LD_INT 93
12083: PPUSH
12084: LD_INT 1
12086: PPUSH
12087: LD_INT 0
12089: PPUSH
12090: CALL 69285 0 5
// ComHold ( un ) ;
12094: LD_VAR 0 5
12098: PPUSH
12099: CALL_OW 140
// if Difficulty > 1 then
12103: LD_OWVAR 67
12107: PUSH
12108: LD_INT 1
12110: GREATER
12111: IFFALSE 12199
// begin PrepareHuman ( false , 3 , 4 ) ;
12113: LD_INT 0
12115: PPUSH
12116: LD_INT 3
12118: PPUSH
12119: LD_INT 4
12121: PPUSH
12122: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12126: CALL_OW 44
12130: PPUSH
12131: LD_VAR 0 5
12135: PPUSH
12136: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12140: LD_INT 24
12142: PPUSH
12143: LD_INT 1
12145: PPUSH
12146: LD_INT 1
12148: PPUSH
12149: LD_INT 45
12151: PPUSH
12152: LD_INT 10
12154: PPUSH
12155: CALL 34283 0 5
// un := CreateVehicle ;
12159: LD_ADDR_VAR 0 5
12163: PUSH
12164: CALL_OW 45
12168: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
12169: LD_VAR 0 5
12173: PPUSH
12174: LD_INT 200
12176: PPUSH
12177: LD_INT 173
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: LD_INT 0
12185: PPUSH
12186: CALL 69285 0 5
// ComHold ( un ) ;
12190: LD_VAR 0 5
12194: PPUSH
12195: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
12199: LD_INT 0
12201: PPUSH
12202: LD_INT 3
12204: PPUSH
12205: LD_INT 4
12207: PPUSH
12208: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12212: CALL_OW 44
12216: PPUSH
12217: LD_VAR 0 5
12221: PPUSH
12222: CALL_OW 52
// bc_type := b_armoury ;
12226: LD_ADDR_OWVAR 42
12230: PUSH
12231: LD_INT 4
12233: ST_TO_ADDR
// if Difficulty > 1 then
12234: LD_OWVAR 67
12238: PUSH
12239: LD_INT 1
12241: GREATER
12242: IFFALSE 12252
// bc_type := b_barracks ;
12244: LD_ADDR_OWVAR 42
12248: PUSH
12249: LD_INT 5
12251: ST_TO_ADDR
// bc_level := 6 ;
12252: LD_ADDR_OWVAR 43
12256: PUSH
12257: LD_INT 6
12259: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
12260: LD_INT 120
12262: PPUSH
12263: LD_INT 100
12265: PPUSH
12266: LD_INT 5
12268: PPUSH
12269: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
12273: LD_ADDR_VAR 0 2
12277: PUSH
12278: DOUBLE
12279: LD_INT 1
12281: DEC
12282: ST_TO_ADDR
12283: LD_INT 3
12285: PUSH
12286: LD_INT 3
12288: PUSH
12289: LD_INT 4
12291: PUSH
12292: LD_INT 4
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: PUSH
12301: LD_OWVAR 67
12305: ARRAY
12306: PUSH
12307: FOR_TO
12308: IFFALSE 12366
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
12310: LD_INT 0
12312: PPUSH
12313: LD_INT 1
12315: PUSH
12316: LD_INT 1
12318: PUSH
12319: LD_INT 9
12321: PUSH
12322: LD_INT 9
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: PUSH
12331: LD_OWVAR 67
12335: ARRAY
12336: PPUSH
12337: LD_INT 5
12339: PPUSH
12340: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
12344: CALL_OW 44
12348: PPUSH
12349: LD_INT 120
12351: PPUSH
12352: LD_INT 100
12354: PPUSH
12355: CALL_OW 428
12359: PPUSH
12360: CALL_OW 52
// end ;
12364: GO 12307
12366: POP
12367: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
12368: LD_ADDR_VAR 0 7
12372: PUSH
12373: LD_INT 135
12375: PUSH
12376: LD_INT 100
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 137
12385: PUSH
12386: LD_INT 92
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: ST_TO_ADDR
// for i := 1 to tmp do
12397: LD_ADDR_VAR 0 2
12401: PUSH
12402: DOUBLE
12403: LD_INT 1
12405: DEC
12406: ST_TO_ADDR
12407: LD_VAR 0 7
12411: PUSH
12412: FOR_TO
12413: IFFALSE 12583
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
12415: LD_INT 22
12417: PUSH
12418: LD_INT 22
12420: PUSH
12421: LD_INT 24
12423: PUSH
12424: LD_INT 24
12426: PUSH
12427: LD_INT 24
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: PUSH
12437: LD_OWVAR 67
12441: PUSH
12442: LD_INT 0
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: CALL_OW 12
12452: PLUS
12453: ARRAY
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: LD_INT 1
12460: PPUSH
12461: LD_INT 44
12463: PPUSH
12464: LD_INT 25
12466: PPUSH
12467: CALL 34283 0 5
// veh := CreateVehicle ;
12471: LD_ADDR_VAR 0 6
12475: PUSH
12476: CALL_OW 45
12480: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12481: LD_VAR 0 6
12485: PPUSH
12486: LD_INT 2
12488: PPUSH
12489: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
12493: LD_VAR 0 6
12497: PPUSH
12498: LD_VAR 0 7
12502: PUSH
12503: LD_VAR 0 2
12507: ARRAY
12508: PUSH
12509: LD_INT 1
12511: ARRAY
12512: PPUSH
12513: LD_VAR 0 7
12517: PUSH
12518: LD_VAR 0 2
12522: ARRAY
12523: PUSH
12524: LD_INT 2
12526: ARRAY
12527: PPUSH
12528: LD_INT 0
12530: PPUSH
12531: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
12535: LD_INT 0
12537: PPUSH
12538: LD_INT 3
12540: PPUSH
12541: LD_INT 6
12543: PPUSH
12544: CALL_OW 380
// un := CreateHuman ;
12548: LD_ADDR_VAR 0 5
12552: PUSH
12553: CALL_OW 44
12557: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12558: LD_VAR 0 5
12562: PPUSH
12563: LD_VAR 0 6
12567: PPUSH
12568: CALL_OW 52
// ComHold ( veh ) ;
12572: LD_VAR 0 6
12576: PPUSH
12577: CALL_OW 140
// end ;
12581: GO 12412
12583: POP
12584: POP
// tmp := [ 191 , 122 ] ;
12585: LD_ADDR_VAR 0 7
12589: PUSH
12590: LD_INT 191
12592: PUSH
12593: LD_INT 122
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
12600: LD_INT 24
12602: PPUSH
12603: LD_INT 1
12605: PPUSH
12606: LD_INT 1
12608: PPUSH
12609: LD_INT 44
12611: PPUSH
12612: LD_INT 30
12614: PPUSH
12615: CALL 34283 0 5
// ruBlockadeTank := CreateVehicle ;
12619: LD_ADDR_EXP 55
12623: PUSH
12624: CALL_OW 45
12628: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
12629: LD_EXP 55
12633: PPUSH
12634: LD_INT 2
12636: PPUSH
12637: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
12641: LD_EXP 55
12645: PPUSH
12646: LD_INT 191
12648: PPUSH
12649: LD_INT 122
12651: PPUSH
12652: LD_INT 0
12654: PPUSH
12655: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
12659: LD_INT 1
12661: PPUSH
12662: LD_INT 5
12664: PUSH
12665: LD_INT 6
12667: PUSH
12668: LD_INT 7
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: LIST
12675: PUSH
12676: LD_OWVAR 67
12680: PUSH
12681: LD_INT 1
12683: MINUS
12684: ARRAY
12685: PPUSH
12686: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
12690: CALL_OW 44
12694: PPUSH
12695: LD_EXP 55
12699: PPUSH
12700: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
12704: LD_EXP 55
12708: PPUSH
12709: CALL_OW 140
// ruBlockadeSquad := [ ] ;
12713: LD_ADDR_EXP 57
12717: PUSH
12718: EMPTY
12719: ST_TO_ADDR
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
12720: LD_ADDR_VAR 0 2
12724: PUSH
12725: DOUBLE
12726: LD_INT 1
12728: DEC
12729: ST_TO_ADDR
12730: LD_INT 2
12732: PUSH
12733: LD_INT 2
12735: PUSH
12736: LD_INT 3
12738: PUSH
12739: LD_INT 3
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: LD_OWVAR 67
12752: ARRAY
12753: PUSH
12754: FOR_TO
12755: IFFALSE 12871
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
12757: LD_INT 0
12759: PPUSH
12760: LD_INT 1
12762: PPUSH
12763: LD_INT 4
12765: PUSH
12766: LD_INT 5
12768: PUSH
12769: LD_INT 6
12771: PUSH
12772: LD_INT 7
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: PUSH
12781: LD_OWVAR 67
12785: ARRAY
12786: PPUSH
12787: CALL_OW 380
// un := CreateHuman ;
12791: LD_ADDR_VAR 0 5
12795: PUSH
12796: CALL_OW 44
12800: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
12801: LD_VAR 0 5
12805: PPUSH
12806: LD_INT 9
12808: PPUSH
12809: LD_INT 0
12811: PPUSH
12812: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
12816: LD_VAR 0 5
12820: PPUSH
12821: LD_INT 198
12823: PPUSH
12824: LD_INT 129
12826: PPUSH
12827: CALL_OW 118
// AddComCrawl ( un ) ;
12831: LD_VAR 0 5
12835: PPUSH
12836: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12840: LD_ADDR_EXP 57
12844: PUSH
12845: LD_EXP 57
12849: PPUSH
12850: LD_EXP 57
12854: PUSH
12855: LD_INT 1
12857: PLUS
12858: PPUSH
12859: LD_VAR 0 5
12863: PPUSH
12864: CALL_OW 1
12868: ST_TO_ADDR
// end ;
12869: GO 12754
12871: POP
12872: POP
// PrepareHuman ( false , 4 , 5 ) ;
12873: LD_INT 0
12875: PPUSH
12876: LD_INT 4
12878: PPUSH
12879: LD_INT 5
12881: PPUSH
12882: CALL_OW 380
// un := CreateHuman ;
12886: LD_ADDR_VAR 0 5
12890: PUSH
12891: CALL_OW 44
12895: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
12896: LD_VAR 0 5
12900: PPUSH
12901: LD_INT 179
12903: PPUSH
12904: LD_INT 113
12906: PPUSH
12907: LD_INT 0
12909: PPUSH
12910: CALL_OW 48
// ComHold ( un ) ;
12914: LD_VAR 0 5
12918: PPUSH
12919: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12923: LD_ADDR_EXP 57
12927: PUSH
12928: LD_EXP 57
12932: PPUSH
12933: LD_EXP 57
12937: PUSH
12938: LD_INT 1
12940: PLUS
12941: PPUSH
12942: LD_VAR 0 5
12946: PPUSH
12947: CALL_OW 1
12951: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
12952: LD_ADDR_VAR 0 7
12956: PUSH
12957: LD_INT 167
12959: PPUSH
12960: LD_INT 243
12962: PPUSH
12963: CALL_OW 428
12967: PPUSH
12968: CALL_OW 274
12972: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
12973: LD_VAR 0 7
12977: PPUSH
12978: LD_INT 1
12980: PPUSH
12981: LD_INT 1000
12983: PPUSH
12984: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
12988: LD_VAR 0 7
12992: PPUSH
12993: LD_INT 2
12995: PPUSH
12996: LD_INT 400
12998: PPUSH
12999: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
13003: LD_ADDR_VAR 0 7
13007: PUSH
13008: LD_INT 169
13010: PPUSH
13011: LD_INT 229
13013: PPUSH
13014: CALL_OW 428
13018: ST_TO_ADDR
// for i := 1 to 3 do
13019: LD_ADDR_VAR 0 2
13023: PUSH
13024: DOUBLE
13025: LD_INT 1
13027: DEC
13028: ST_TO_ADDR
13029: LD_INT 3
13031: PUSH
13032: FOR_TO
13033: IFFALSE 13124
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13035: LD_INT 0
13037: PPUSH
13038: LD_INT 1
13040: PPUSH
13041: LD_INT 4
13043: PUSH
13044: LD_INT 5
13046: PUSH
13047: LD_INT 5
13049: PUSH
13050: LD_INT 6
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: PUSH
13059: LD_OWVAR 67
13063: ARRAY
13064: PPUSH
13065: CALL_OW 380
// un := CreateHuman ;
13069: LD_ADDR_VAR 0 5
13073: PUSH
13074: CALL_OW 44
13078: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
13079: LD_VAR 0 5
13083: PPUSH
13084: LD_VAR 0 7
13088: PPUSH
13089: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13093: LD_ADDR_EXP 58
13097: PUSH
13098: LD_EXP 58
13102: PPUSH
13103: LD_EXP 58
13107: PUSH
13108: LD_INT 1
13110: PLUS
13111: PPUSH
13112: LD_VAR 0 5
13116: PPUSH
13117: CALL_OW 1
13121: ST_TO_ADDR
// end ;
13122: GO 13032
13124: POP
13125: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
13126: LD_ADDR_VAR 0 7
13130: PUSH
13131: LD_INT 165
13133: PUSH
13134: LD_INT 227
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 173
13143: PUSH
13144: LD_INT 231
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: ST_TO_ADDR
// for i := 1 to tmp do
13155: LD_ADDR_VAR 0 2
13159: PUSH
13160: DOUBLE
13161: LD_INT 1
13163: DEC
13164: ST_TO_ADDR
13165: LD_VAR 0 7
13169: PUSH
13170: FOR_TO
13171: IFFALSE 13292
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13173: LD_INT 0
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: LD_INT 4
13181: PUSH
13182: LD_INT 5
13184: PUSH
13185: LD_INT 5
13187: PUSH
13188: LD_INT 6
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: PUSH
13197: LD_OWVAR 67
13201: ARRAY
13202: PPUSH
13203: CALL_OW 380
// un := CreateHuman ;
13207: LD_ADDR_VAR 0 5
13211: PUSH
13212: CALL_OW 44
13216: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
13217: LD_VAR 0 5
13221: PPUSH
13222: LD_VAR 0 7
13226: PUSH
13227: LD_VAR 0 2
13231: ARRAY
13232: PUSH
13233: LD_INT 1
13235: ARRAY
13236: PPUSH
13237: LD_VAR 0 7
13241: PUSH
13242: LD_VAR 0 2
13246: ARRAY
13247: PUSH
13248: LD_INT 2
13250: ARRAY
13251: PPUSH
13252: CALL_OW 428
13256: PPUSH
13257: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13261: LD_ADDR_EXP 58
13265: PUSH
13266: LD_EXP 58
13270: PPUSH
13271: LD_EXP 58
13275: PUSH
13276: LD_INT 1
13278: PLUS
13279: PPUSH
13280: LD_VAR 0 5
13284: PPUSH
13285: CALL_OW 1
13289: ST_TO_ADDR
// end ;
13290: GO 13170
13292: POP
13293: POP
// for i := 1 to 2 do
13294: LD_ADDR_VAR 0 2
13298: PUSH
13299: DOUBLE
13300: LD_INT 1
13302: DEC
13303: ST_TO_ADDR
13304: LD_INT 2
13306: PUSH
13307: FOR_TO
13308: IFFALSE 13363
// begin InitHc ;
13310: CALL_OW 19
// uc_nation := 0 ;
13314: LD_ADDR_OWVAR 21
13318: PUSH
13319: LD_INT 0
13321: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
13322: LD_ADDR_OWVAR 28
13326: PUSH
13327: LD_INT 16
13329: ST_TO_ADDR
// un := CreateHuman ;
13330: LD_ADDR_VAR 0 5
13334: PUSH
13335: CALL_OW 44
13339: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
13340: LD_VAR 0 5
13344: PPUSH
13345: LD_INT 166
13347: PPUSH
13348: LD_INT 233
13350: PPUSH
13351: LD_INT 2
13353: PPUSH
13354: LD_INT 0
13356: PPUSH
13357: CALL_OW 50
// end ;
13361: GO 13307
13363: POP
13364: POP
// uc_nation := 3 ;
13365: LD_ADDR_OWVAR 21
13369: PUSH
13370: LD_INT 3
13372: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
13373: LD_ADDR_VAR 0 7
13377: PUSH
13378: LD_INT 71
13380: PUSH
13381: LD_INT 52
13383: PUSH
13384: LD_INT 11
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: ST_TO_ADDR
// for i in tmp do
13392: LD_ADDR_VAR 0 2
13396: PUSH
13397: LD_VAR 0 7
13401: PUSH
13402: FOR_IN
13403: IFFALSE 13447
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
13405: LD_VAR 0 2
13409: PPUSH
13410: CALL_OW 274
13414: PPUSH
13415: LD_INT 1
13417: PPUSH
13418: LD_INT 3000
13420: PPUSH
13421: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
13425: LD_VAR 0 2
13429: PPUSH
13430: CALL_OW 274
13434: PPUSH
13435: LD_INT 2
13437: PPUSH
13438: LD_INT 600
13440: PPUSH
13441: CALL_OW 277
// end ;
13445: GO 13402
13447: POP
13448: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
13449: LD_ADDR_VAR 0 7
13453: PUSH
13454: LD_INT 41
13456: PUSH
13457: LD_INT 57
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 38
13466: PUSH
13467: LD_INT 55
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 50
13476: PUSH
13477: LD_INT 73
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 51
13486: PUSH
13487: LD_INT 65
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 82
13496: PUSH
13497: LD_INT 93
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 87
13506: PUSH
13507: LD_INT 100
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 91
13516: PUSH
13517: LD_INT 109
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 84
13526: PUSH
13527: LD_INT 120
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 113
13536: PUSH
13537: LD_INT 153
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 123
13546: PUSH
13547: LD_INT 171
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 125
13556: PUSH
13557: LD_INT 178
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 125
13566: PUSH
13567: LD_INT 188
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 125
13576: PUSH
13577: LD_INT 201
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 33
13586: PUSH
13587: LD_INT 60
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 76
13596: PUSH
13597: LD_INT 95
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 84
13606: PUSH
13607: LD_INT 111
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 112
13616: PUSH
13617: LD_INT 165
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: ST_TO_ADDR
// for i := 1 to tmp do
13643: LD_ADDR_VAR 0 2
13647: PUSH
13648: DOUBLE
13649: LD_INT 1
13651: DEC
13652: ST_TO_ADDR
13653: LD_VAR 0 7
13657: PUSH
13658: FOR_TO
13659: IFFALSE 13906
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
13661: LD_ADDR_VAR 0 4
13665: PUSH
13666: LD_VAR 0 7
13670: PUSH
13671: LD_VAR 0 2
13675: ARRAY
13676: PUSH
13677: LD_INT 1
13679: ARRAY
13680: PPUSH
13681: LD_VAR 0 7
13685: PUSH
13686: LD_VAR 0 2
13690: ARRAY
13691: PUSH
13692: LD_INT 2
13694: ARRAY
13695: PPUSH
13696: CALL_OW 428
13700: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
13701: LD_VAR 0 4
13705: PPUSH
13706: CALL_OW 266
13710: PUSH
13711: LD_INT 4
13713: PUSH
13714: LD_INT 5
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: IN
13721: IFFALSE 13817
// begin for j := 1 to Difficulty do
13723: LD_ADDR_VAR 0 3
13727: PUSH
13728: DOUBLE
13729: LD_INT 1
13731: DEC
13732: ST_TO_ADDR
13733: LD_OWVAR 67
13737: PUSH
13738: FOR_TO
13739: IFFALSE 13813
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13741: LD_INT 0
13743: PPUSH
13744: LD_INT 1
13746: PPUSH
13747: LD_INT 4
13749: PUSH
13750: LD_INT 5
13752: PUSH
13753: LD_INT 5
13755: PUSH
13756: LD_INT 6
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: PUSH
13765: LD_OWVAR 67
13769: ARRAY
13770: PPUSH
13771: CALL_OW 380
// un := CreateHuman ;
13775: LD_ADDR_VAR 0 5
13779: PUSH
13780: CALL_OW 44
13784: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13785: LD_VAR 0 5
13789: PPUSH
13790: LD_VAR 0 4
13794: PPUSH
13795: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
13799: LD_VAR 0 5
13803: PPUSH
13804: LD_INT 9
13806: PPUSH
13807: CALL_OW 336
// end ;
13811: GO 13738
13813: POP
13814: POP
// end else
13815: GO 13875
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13817: LD_INT 0
13819: PPUSH
13820: LD_INT 1
13822: PPUSH
13823: LD_INT 4
13825: PUSH
13826: LD_INT 5
13828: PUSH
13829: LD_INT 5
13831: PUSH
13832: LD_INT 6
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: PUSH
13841: LD_OWVAR 67
13845: ARRAY
13846: PPUSH
13847: CALL_OW 380
// un := CreateHuman ;
13851: LD_ADDR_VAR 0 5
13855: PUSH
13856: CALL_OW 44
13860: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13861: LD_VAR 0 5
13865: PPUSH
13866: LD_VAR 0 4
13870: PPUSH
13871: CALL_OW 52
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13875: LD_ADDR_EXP 59
13879: PUSH
13880: LD_EXP 59
13884: PPUSH
13885: LD_EXP 59
13889: PUSH
13890: LD_INT 1
13892: PLUS
13893: PPUSH
13894: LD_VAR 0 5
13898: PPUSH
13899: CALL_OW 1
13903: ST_TO_ADDR
// end ;
13904: GO 13658
13906: POP
13907: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
13908: LD_ADDR_VAR 0 4
13912: PUSH
13913: LD_INT 10
13915: PPUSH
13916: LD_INT 22
13918: PUSH
13919: LD_INT 3
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: LD_INT 30
13928: PUSH
13929: LD_INT 32
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 58
13938: PUSH
13939: EMPTY
13940: LIST
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: LIST
13946: PPUSH
13947: CALL_OW 70
13951: PUSH
13952: FOR_IN
13953: IFFALSE 14087
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
13955: LD_INT 40
13957: PUSH
13958: LD_INT 50
13960: PUSH
13961: LD_INT 75
13963: PUSH
13964: LD_INT 80
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: PUSH
13973: LD_OWVAR 67
13977: ARRAY
13978: PUSH
13979: LD_EXP 7
13983: PUSH
13984: LD_INT 10
13986: MUL
13987: MINUS
13988: PPUSH
13989: CALL_OW 13
13993: NOT
13994: IFFALSE 13998
// continue ;
13996: GO 13952
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13998: LD_INT 0
14000: PPUSH
14001: LD_INT 1
14003: PPUSH
14004: LD_INT 4
14006: PUSH
14007: LD_INT 5
14009: PUSH
14010: LD_INT 5
14012: PUSH
14013: LD_INT 6
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: PUSH
14022: LD_OWVAR 67
14026: ARRAY
14027: PPUSH
14028: CALL_OW 380
// un := CreateHuman ;
14032: LD_ADDR_VAR 0 5
14036: PUSH
14037: CALL_OW 44
14041: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
14042: LD_VAR 0 5
14046: PPUSH
14047: LD_VAR 0 4
14051: PPUSH
14052: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14056: LD_ADDR_EXP 59
14060: PUSH
14061: LD_EXP 59
14065: PPUSH
14066: LD_EXP 59
14070: PUSH
14071: LD_INT 1
14073: PLUS
14074: PPUSH
14075: LD_VAR 0 5
14079: PPUSH
14080: CALL_OW 1
14084: ST_TO_ADDR
// end ;
14085: GO 13952
14087: POP
14088: POP
// for i := 1 to 5 do
14089: LD_ADDR_VAR 0 2
14093: PUSH
14094: DOUBLE
14095: LD_INT 1
14097: DEC
14098: ST_TO_ADDR
14099: LD_INT 5
14101: PUSH
14102: FOR_TO
14103: IFFALSE 14201
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14105: LD_INT 0
14107: PPUSH
14108: LD_INT 2
14110: PPUSH
14111: LD_INT 4
14113: PUSH
14114: LD_INT 5
14116: PUSH
14117: LD_INT 5
14119: PUSH
14120: LD_INT 6
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: PUSH
14129: LD_OWVAR 67
14133: ARRAY
14134: PPUSH
14135: CALL_OW 380
// un := CreateHuman ;
14139: LD_ADDR_VAR 0 5
14143: PUSH
14144: CALL_OW 44
14148: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
14149: LD_VAR 0 5
14153: PPUSH
14154: LD_INT 66
14156: PPUSH
14157: LD_INT 101
14159: PPUSH
14160: LD_INT 3
14162: PPUSH
14163: LD_INT 0
14165: PPUSH
14166: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14170: LD_ADDR_EXP 59
14174: PUSH
14175: LD_EXP 59
14179: PPUSH
14180: LD_EXP 59
14184: PUSH
14185: LD_INT 1
14187: PLUS
14188: PPUSH
14189: LD_VAR 0 5
14193: PPUSH
14194: CALL_OW 1
14198: ST_TO_ADDR
// end ;
14199: GO 14102
14201: POP
14202: POP
// tmp := [ ruFac1 , ruFac2 ] ;
14203: LD_ADDR_VAR 0 7
14207: PUSH
14208: LD_INT 72
14210: PUSH
14211: LD_INT 12
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: ST_TO_ADDR
// for i := 1 to tmp do
14218: LD_ADDR_VAR 0 2
14222: PUSH
14223: DOUBLE
14224: LD_INT 1
14226: DEC
14227: ST_TO_ADDR
14228: LD_VAR 0 7
14232: PUSH
14233: FOR_TO
14234: IFFALSE 14351
// for j := 1 to 6 do
14236: LD_ADDR_VAR 0 3
14240: PUSH
14241: DOUBLE
14242: LD_INT 1
14244: DEC
14245: ST_TO_ADDR
14246: LD_INT 6
14248: PUSH
14249: FOR_TO
14250: IFFALSE 14347
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14252: LD_INT 0
14254: PPUSH
14255: LD_INT 3
14257: PPUSH
14258: LD_INT 4
14260: PUSH
14261: LD_INT 5
14263: PUSH
14264: LD_INT 5
14266: PUSH
14267: LD_INT 6
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: PUSH
14276: LD_OWVAR 67
14280: ARRAY
14281: PPUSH
14282: CALL_OW 380
// un := CreateHuman ;
14286: LD_ADDR_VAR 0 5
14290: PUSH
14291: CALL_OW 44
14295: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
14296: LD_VAR 0 5
14300: PPUSH
14301: LD_VAR 0 7
14305: PUSH
14306: LD_VAR 0 2
14310: ARRAY
14311: PPUSH
14312: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14316: LD_ADDR_EXP 59
14320: PUSH
14321: LD_EXP 59
14325: PPUSH
14326: LD_EXP 59
14330: PUSH
14331: LD_INT 1
14333: PLUS
14334: PPUSH
14335: LD_VAR 0 5
14339: PPUSH
14340: CALL_OW 1
14344: ST_TO_ADDR
// end ;
14345: GO 14249
14347: POP
14348: POP
14349: GO 14233
14351: POP
14352: POP
// for i := 1 to 3 do
14353: LD_ADDR_VAR 0 2
14357: PUSH
14358: DOUBLE
14359: LD_INT 1
14361: DEC
14362: ST_TO_ADDR
14363: LD_INT 3
14365: PUSH
14366: FOR_TO
14367: IFFALSE 14456
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14369: LD_INT 0
14371: PPUSH
14372: LD_INT 4
14374: PPUSH
14375: LD_INT 4
14377: PUSH
14378: LD_INT 5
14380: PUSH
14381: LD_INT 5
14383: PUSH
14384: LD_INT 6
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: PUSH
14393: LD_OWVAR 67
14397: ARRAY
14398: PPUSH
14399: CALL_OW 380
// un := CreateHuman ;
14403: LD_ADDR_VAR 0 5
14407: PUSH
14408: CALL_OW 44
14412: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
14413: LD_VAR 0 5
14417: PPUSH
14418: LD_INT 17
14420: PPUSH
14421: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14425: LD_ADDR_EXP 59
14429: PUSH
14430: LD_EXP 59
14434: PPUSH
14435: LD_EXP 59
14439: PUSH
14440: LD_INT 1
14442: PLUS
14443: PPUSH
14444: LD_VAR 0 5
14448: PPUSH
14449: CALL_OW 1
14453: ST_TO_ADDR
// end ;
14454: GO 14366
14456: POP
14457: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
14458: LD_ADDR_VAR 0 2
14462: PUSH
14463: DOUBLE
14464: LD_INT 1
14466: DEC
14467: ST_TO_ADDR
14468: LD_INT 2
14470: PUSH
14471: LD_INT 3
14473: PUSH
14474: LD_INT 3
14476: PUSH
14477: LD_INT 3
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: PUSH
14486: LD_OWVAR 67
14490: ARRAY
14491: PUSH
14492: FOR_TO
14493: IFFALSE 14613
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
14495: LD_INT 22
14497: PPUSH
14498: LD_INT 1
14500: PPUSH
14501: LD_INT 1
14503: PPUSH
14504: LD_INT 52
14506: PPUSH
14507: LD_INT 100
14509: PPUSH
14510: CALL 34283 0 5
// veh := CreateVehicle ;
14514: LD_ADDR_VAR 0 6
14518: PUSH
14519: CALL_OW 45
14523: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
14524: LD_INT 0
14526: PPUSH
14527: LD_INT 3
14529: PPUSH
14530: LD_INT 4
14532: PPUSH
14533: CALL_OW 380
// un := CreateHuman ;
14537: LD_ADDR_VAR 0 5
14541: PUSH
14542: CALL_OW 44
14546: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
14547: LD_VAR 0 6
14551: PPUSH
14552: LD_INT 107
14554: PPUSH
14555: LD_INT 182
14557: PPUSH
14558: LD_INT 4
14560: PPUSH
14561: LD_INT 0
14563: PPUSH
14564: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
14568: LD_VAR 0 5
14572: PPUSH
14573: LD_VAR 0 6
14577: PPUSH
14578: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14582: LD_ADDR_EXP 59
14586: PUSH
14587: LD_EXP 59
14591: PPUSH
14592: LD_EXP 59
14596: PUSH
14597: LD_INT 1
14599: PLUS
14600: PPUSH
14601: LD_VAR 0 5
14605: PPUSH
14606: CALL_OW 1
14610: ST_TO_ADDR
// end ;
14611: GO 14492
14613: POP
14614: POP
// InitHc ;
14615: CALL_OW 19
// for i := 1 to [ 3 , 5 , 6 , 8 ] [ Difficulty ] do
14619: LD_ADDR_VAR 0 2
14623: PUSH
14624: DOUBLE
14625: LD_INT 1
14627: DEC
14628: ST_TO_ADDR
14629: LD_INT 3
14631: PUSH
14632: LD_INT 5
14634: PUSH
14635: LD_INT 6
14637: PUSH
14638: LD_INT 8
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: PUSH
14647: LD_OWVAR 67
14651: ARRAY
14652: PUSH
14653: FOR_TO
14654: IFFALSE 14749
// begin uc_nation := 0 ;
14656: LD_ADDR_OWVAR 21
14660: PUSH
14661: LD_INT 0
14663: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
14664: LD_ADDR_OWVAR 28
14668: PUSH
14669: LD_INT 15
14671: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
14672: LD_ADDR_OWVAR 31
14676: PUSH
14677: LD_INT 3
14679: PUSH
14680: LD_INT 0
14682: PUSH
14683: LD_INT 0
14685: PUSH
14686: LD_INT 0
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: ST_TO_ADDR
// un := CreateHuman ;
14695: LD_ADDR_VAR 0 5
14699: PUSH
14700: CALL_OW 44
14704: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
14705: LD_VAR 0 5
14709: PPUSH
14710: LD_INT 269
14712: PUSH
14713: LD_INT 300
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: LD_VAR 0 2
14724: PUSH
14725: LD_INT 2
14727: MOD
14728: PUSH
14729: LD_INT 1
14731: PLUS
14732: ARRAY
14733: PPUSH
14734: LD_INT 182
14736: PPUSH
14737: LD_INT 4
14739: PPUSH
14740: LD_INT 0
14742: PPUSH
14743: CALL_OW 50
// end ;
14747: GO 14653
14749: POP
14750: POP
// uc_nation := 3 ;
14751: LD_ADDR_OWVAR 21
14755: PUSH
14756: LD_INT 3
14758: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14759: LD_EXP 8
14763: PUSH
14764: LD_INT 10
14766: PUSH
14767: LD_INT 8
14769: PUSH
14770: LD_INT 6
14772: PUSH
14773: LD_INT 5
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: PUSH
14782: LD_OWVAR 67
14786: ARRAY
14787: LESS
14788: IFFALSE 14867
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
14790: LD_INT 21
14792: PPUSH
14793: LD_INT 1
14795: PPUSH
14796: LD_INT 1
14798: PPUSH
14799: LD_INT 51
14801: PPUSH
14802: LD_INT 12
14804: PPUSH
14805: CALL 34283 0 5
// veh := CreateVehicle ;
14809: LD_ADDR_VAR 0 6
14813: PUSH
14814: CALL_OW 45
14818: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
14819: LD_VAR 0 6
14823: PPUSH
14824: LD_INT 269
14826: PPUSH
14827: LD_INT 66
14829: PPUSH
14830: LD_INT 4
14832: PPUSH
14833: LD_INT 0
14835: PPUSH
14836: CALL 69285 0 5
// SetLives ( veh , 333 ) ;
14840: LD_VAR 0 6
14844: PPUSH
14845: LD_INT 333
14847: PPUSH
14848: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
14852: LD_VAR 0 6
14856: PPUSH
14857: LD_INT 2
14859: PPUSH
14860: LD_INT 100
14862: PPUSH
14863: CALL_OW 290
// end ; end ;
14867: LD_VAR 0 1
14871: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
14872: LD_EXP 55
14876: PUSH
14877: LD_EXP 55
14881: PPUSH
14882: CALL_OW 255
14886: PUSH
14887: LD_INT 3
14889: EQUAL
14890: AND
14891: IFFALSE 15054
14893: GO 14895
14895: DISABLE
14896: LD_INT 0
14898: PPUSH
// begin enable ;
14899: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
14900: LD_INT 81
14902: PUSH
14903: LD_INT 3
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: LD_INT 91
14912: PUSH
14913: LD_EXP 55
14917: PUSH
14918: LD_INT 15
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: LIST
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PPUSH
14930: CALL_OW 69
14934: IFFALSE 15014
// begin if not IsDrivenBy ( ruBlockadeTank ) then
14936: LD_EXP 55
14940: PPUSH
14941: CALL_OW 311
14945: NOT
14946: IFFALSE 15012
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
14948: LD_ADDR_VAR 0 1
14952: PUSH
14953: LD_INT 22
14955: PUSH
14956: LD_INT 3
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: LD_INT 21
14965: PUSH
14966: LD_INT 1
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PPUSH
14977: CALL_OW 69
14981: PPUSH
14982: LD_EXP 55
14986: PPUSH
14987: CALL_OW 74
14991: ST_TO_ADDR
// if driver then
14992: LD_VAR 0 1
14996: IFFALSE 15012
// ComEnterUnit ( driver , ruBlockadeTank ) ;
14998: LD_VAR 0 1
15002: PPUSH
15003: LD_EXP 55
15007: PPUSH
15008: CALL_OW 120
// end ; exit ;
15012: GO 15054
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
15014: LD_EXP 55
15018: PPUSH
15019: CALL_OW 256
15023: PUSH
15024: LD_INT 1000
15026: LESS
15027: PUSH
15028: LD_EXP 55
15032: PPUSH
15033: CALL_OW 311
15037: AND
15038: IFFALSE 15054
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
15040: LD_EXP 55
15044: PPUSH
15045: CALL_OW 311
15049: PPUSH
15050: CALL 68845 0 1
// end ;
15054: PPOPN 1
15056: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
15057: LD_EXP 57
15061: PPUSH
15062: LD_INT 3
15064: PUSH
15065: LD_INT 24
15067: PUSH
15068: LD_INT 1000
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PPUSH
15079: CALL_OW 72
15083: PUSH
15084: LD_EXP 57
15088: PPUSH
15089: LD_INT 25
15091: PUSH
15092: LD_INT 4
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: LD_INT 50
15101: PUSH
15102: EMPTY
15103: LIST
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PPUSH
15109: CALL_OW 72
15113: AND
15114: IFFALSE 15302
15116: GO 15118
15118: DISABLE
15119: LD_INT 0
15121: PPUSH
15122: PPUSH
15123: PPUSH
// begin enable ;
15124: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
15125: LD_ADDR_VAR 0 3
15129: PUSH
15130: LD_EXP 57
15134: PPUSH
15135: LD_INT 3
15137: PUSH
15138: LD_INT 24
15140: PUSH
15141: LD_INT 1000
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PPUSH
15152: CALL_OW 72
15156: PPUSH
15157: LD_INT 1
15159: PPUSH
15160: CALL 69085 0 2
15164: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
15165: LD_ADDR_VAR 0 2
15169: PUSH
15170: LD_EXP 57
15174: PPUSH
15175: LD_INT 25
15177: PUSH
15178: LD_INT 4
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 50
15187: PUSH
15188: EMPTY
15189: LIST
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PPUSH
15195: CALL_OW 72
15199: PUSH
15200: LD_INT 1
15202: ARRAY
15203: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
15204: LD_VAR 0 2
15208: PPUSH
15209: LD_VAR 0 3
15213: PUSH
15214: LD_INT 1
15216: ARRAY
15217: PPUSH
15218: CALL 64426 0 2
15222: NOT
15223: IFFALSE 15302
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
15225: LD_VAR 0 3
15229: PUSH
15230: LD_INT 1
15232: ARRAY
15233: PPUSH
15234: LD_INT 9
15236: PPUSH
15237: CALL_OW 308
15241: NOT
15242: IFFALSE 15260
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
15244: LD_VAR 0 3
15248: PUSH
15249: LD_INT 1
15251: ARRAY
15252: PPUSH
15253: LD_INT 9
15255: PPUSH
15256: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
15260: LD_VAR 0 2
15264: PPUSH
15265: LD_VAR 0 3
15269: PUSH
15270: LD_INT 1
15272: ARRAY
15273: PPUSH
15274: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
15278: LD_VAR 0 2
15282: PPUSH
15283: LD_INT 179
15285: PPUSH
15286: LD_INT 113
15288: PPUSH
15289: CALL_OW 171
// AddComHold ( sci ) ;
15293: LD_VAR 0 2
15297: PPUSH
15298: CALL_OW 200
// end ; end ;
15302: PPOPN 3
15304: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
15305: LD_INT 2
15307: PPUSH
15308: LD_INT 52
15310: PPUSH
15311: CALL_OW 292
15315: IFFALSE 15420
15317: GO 15319
15319: DISABLE
15320: LD_INT 0
15322: PPUSH
15323: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
15324: LD_ADDR_VAR 0 2
15328: PUSH
15329: LD_EXP 59
15333: PPUSH
15334: LD_INT 25
15336: PUSH
15337: LD_INT 1
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 50
15346: PUSH
15347: EMPTY
15348: LIST
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PPUSH
15354: CALL_OW 72
15358: ST_TO_ADDR
// if not tmp then
15359: LD_VAR 0 2
15363: NOT
15364: IFFALSE 15368
// exit ;
15366: GO 15420
// for i in tmp do
15368: LD_ADDR_VAR 0 1
15372: PUSH
15373: LD_VAR 0 2
15377: PUSH
15378: FOR_IN
15379: IFFALSE 15418
// begin if IsInUnit ( i ) then
15381: LD_VAR 0 1
15385: PPUSH
15386: CALL_OW 310
15390: IFFALSE 15401
// ComExitBuilding ( i ) ;
15392: LD_VAR 0 1
15396: PPUSH
15397: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
15401: LD_VAR 0 1
15405: PPUSH
15406: LD_INT 84
15408: PPUSH
15409: LD_INT 133
15411: PPUSH
15412: CALL_OW 174
// end ;
15416: GO 15378
15418: POP
15419: POP
// end ;
15420: PPOPN 2
15422: END
// every 0 0$10 trigger leninSpotted do var i , tmp , weapon ;
15423: LD_EXP 14
15427: IFFALSE 15608
15429: GO 15431
15431: DISABLE
15432: LD_INT 0
15434: PPUSH
15435: PPUSH
15436: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
15437: LD_ADDR_VAR 0 2
15441: PUSH
15442: LD_INT 72
15444: PUSH
15445: LD_INT 12
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
15452: LD_ADDR_VAR 0 3
15456: PUSH
15457: LD_INT 44
15459: PUSH
15460: LD_INT 43
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 45
15469: PUSH
15470: LD_INT 44
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 45
15479: PUSH
15480: LD_INT 46
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 45
15489: PUSH
15490: LD_INT 46
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: PUSH
15503: LD_OWVAR 67
15507: ARRAY
15508: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
15509: LD_ADDR_VAR 0 1
15513: PUSH
15514: DOUBLE
15515: LD_INT 1
15517: DEC
15518: ST_TO_ADDR
15519: LD_INT 1
15521: PUSH
15522: LD_INT 2
15524: PUSH
15525: LD_INT 2
15527: PUSH
15528: LD_INT 3
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: PUSH
15537: LD_OWVAR 67
15541: ARRAY
15542: PUSH
15543: FOR_TO
15544: IFFALSE 15606
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
15546: LD_VAR 0 2
15550: PPUSH
15551: LD_INT 22
15553: PUSH
15554: LD_INT 23
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_VAR 0 1
15565: PUSH
15566: LD_INT 2
15568: MOD
15569: PUSH
15570: LD_INT 1
15572: PLUS
15573: ARRAY
15574: PPUSH
15575: LD_INT 1
15577: PPUSH
15578: LD_INT 1
15580: PPUSH
15581: LD_VAR 0 3
15585: PUSH
15586: LD_VAR 0 1
15590: PUSH
15591: LD_INT 2
15593: MOD
15594: PUSH
15595: LD_INT 1
15597: PLUS
15598: ARRAY
15599: PPUSH
15600: CALL_OW 185
15604: GO 15543
15606: POP
15607: POP
// end ;
15608: PPOPN 3
15610: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
15611: LD_EXP 11
15615: IFFALSE 16764
15617: GO 15619
15619: DISABLE
15620: LD_INT 0
15622: PPUSH
15623: PPUSH
15624: PPUSH
15625: PPUSH
15626: PPUSH
15627: PPUSH
// begin enable ;
15628: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
15629: LD_ADDR_VAR 0 6
15633: PUSH
15634: LD_INT 10
15636: PPUSH
15637: LD_INT 81
15639: PUSH
15640: LD_INT 3
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PPUSH
15647: CALL_OW 70
15651: ST_TO_ADDR
// if ruSpecialVehicleGroup then
15652: LD_EXP 60
15656: IFFALSE 15922
// begin for i in ruSpecialVehicleGroup do
15658: LD_ADDR_VAR 0 1
15662: PUSH
15663: LD_EXP 60
15667: PUSH
15668: FOR_IN
15669: IFFALSE 15920
// begin if enemyInBase then
15671: LD_VAR 0 6
15675: IFFALSE 15918
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
15677: LD_VAR 0 1
15681: PPUSH
15682: CALL_OW 256
15686: PUSH
15687: LD_INT 500
15689: GREATER
15690: PUSH
15691: LD_VAR 0 1
15695: PPUSH
15696: CALL_OW 110
15700: PUSH
15701: LD_INT 0
15703: EQUAL
15704: AND
15705: IFFALSE 15731
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
15707: LD_VAR 0 1
15711: PPUSH
15712: LD_VAR 0 6
15716: PPUSH
15717: LD_VAR 0 1
15721: PPUSH
15722: CALL_OW 74
15726: PPUSH
15727: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15731: LD_VAR 0 1
15735: PPUSH
15736: CALL_OW 256
15740: PUSH
15741: LD_INT 500
15743: LESSEQUAL
15744: PUSH
15745: LD_VAR 0 1
15749: PPUSH
15750: CALL_OW 110
15754: PUSH
15755: LD_INT 0
15757: EQUAL
15758: AND
15759: IFFALSE 15788
// begin SetTag ( i , 1 ) ;
15761: LD_VAR 0 1
15765: PPUSH
15766: LD_INT 1
15768: PPUSH
15769: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
15773: LD_VAR 0 1
15777: PPUSH
15778: LD_INT 83
15780: PPUSH
15781: LD_INT 134
15783: PPUSH
15784: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
15788: LD_VAR 0 1
15792: PPUSH
15793: CALL_OW 256
15797: PUSH
15798: LD_INT 1000
15800: LESS
15801: PUSH
15802: LD_VAR 0 1
15806: PPUSH
15807: CALL_OW 110
15811: PUSH
15812: LD_INT 1
15814: EQUAL
15815: AND
15816: PUSH
15817: LD_VAR 0 1
15821: PPUSH
15822: LD_INT 83
15824: PPUSH
15825: LD_INT 134
15827: PPUSH
15828: CALL_OW 297
15832: PUSH
15833: LD_INT 6
15835: LESS
15836: AND
15837: IFFALSE 15865
// begin SetFuel ( i , 100 ) ;
15839: LD_VAR 0 1
15843: PPUSH
15844: LD_INT 100
15846: PPUSH
15847: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
15851: LD_VAR 0 1
15855: PPUSH
15856: CALL_OW 310
15860: PPUSH
15861: CALL 68965 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
15865: LD_VAR 0 1
15869: PPUSH
15870: CALL_OW 256
15874: PUSH
15875: LD_INT 1000
15877: EQUAL
15878: PUSH
15879: LD_VAR 0 1
15883: PPUSH
15884: CALL_OW 110
15888: PUSH
15889: LD_INT 1
15891: EQUAL
15892: AND
15893: PUSH
15894: LD_VAR 0 1
15898: PPUSH
15899: CALL_OW 311
15903: AND
15904: IFFALSE 15918
// SetTag ( i , 0 ) ;
15906: LD_VAR 0 1
15910: PPUSH
15911: LD_INT 0
15913: PPUSH
15914: CALL_OW 109
// end ; end ;
15918: GO 15668
15920: POP
15921: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
15922: LD_ADDR_VAR 0 5
15926: PUSH
15927: LD_EXP 59
15931: PPUSH
15932: LD_INT 25
15934: PUSH
15935: LD_INT 4
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 72
15946: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15947: LD_ADDR_VAR 0 4
15951: PUSH
15952: LD_EXP 59
15956: PPUSH
15957: LD_INT 92
15959: PUSH
15960: LD_INT 92
15962: PUSH
15963: LD_INT 155
15965: PUSH
15966: LD_INT 12
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 3
15977: PUSH
15978: LD_INT 24
15980: PUSH
15981: LD_INT 1000
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PPUSH
15996: CALL_OW 72
16000: ST_TO_ADDR
// if sci then
16001: LD_VAR 0 5
16005: IFFALSE 16138
// begin if hurt then
16007: LD_VAR 0 4
16011: IFFALSE 16084
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16013: LD_VAR 0 5
16017: PPUSH
16018: LD_INT 3
16020: PUSH
16021: LD_INT 54
16023: PUSH
16024: EMPTY
16025: LIST
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PPUSH
16031: CALL_OW 72
16035: IFFALSE 16064
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
16037: LD_VAR 0 5
16041: PPUSH
16042: LD_INT 3
16044: PUSH
16045: LD_INT 54
16047: PUSH
16048: EMPTY
16049: LIST
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PPUSH
16055: CALL_OW 72
16059: PPUSH
16060: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
16064: LD_VAR 0 5
16068: PPUSH
16069: LD_VAR 0 4
16073: PUSH
16074: LD_INT 1
16076: ARRAY
16077: PPUSH
16078: CALL_OW 188
// end else
16082: GO 16138
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16084: LD_VAR 0 5
16088: PPUSH
16089: LD_INT 3
16091: PUSH
16092: LD_INT 54
16094: PUSH
16095: EMPTY
16096: LIST
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PPUSH
16102: CALL_OW 72
16106: IFFALSE 16138
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
16108: LD_VAR 0 5
16112: PPUSH
16113: LD_INT 3
16115: PUSH
16116: LD_INT 54
16118: PUSH
16119: EMPTY
16120: LIST
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PPUSH
16126: CALL_OW 72
16130: PPUSH
16131: LD_INT 17
16133: PPUSH
16134: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16138: LD_ADDR_VAR 0 3
16142: PUSH
16143: LD_INT 10
16145: PPUSH
16146: LD_INT 21
16148: PUSH
16149: LD_INT 3
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 3
16158: PUSH
16159: LD_INT 24
16161: PUSH
16162: LD_INT 1000
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PPUSH
16177: CALL_OW 70
16181: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
16182: LD_ADDR_VAR 0 2
16186: PUSH
16187: LD_EXP 59
16191: PPUSH
16192: LD_INT 25
16194: PUSH
16195: LD_INT 2
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PPUSH
16202: CALL_OW 72
16206: PUSH
16207: LD_INT 22
16209: PUSH
16210: LD_INT 3
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 34
16219: PUSH
16220: LD_INT 52
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PPUSH
16231: CALL_OW 69
16235: UNION
16236: ST_TO_ADDR
// if not tmp then
16237: LD_VAR 0 2
16241: NOT
16242: IFFALSE 16246
// exit ;
16244: GO 16764
// for i in tmp do
16246: LD_ADDR_VAR 0 1
16250: PUSH
16251: LD_VAR 0 2
16255: PUSH
16256: FOR_IN
16257: IFFALSE 16762
// begin if GetClass ( i ) = 2 then
16259: LD_VAR 0 1
16263: PPUSH
16264: CALL_OW 257
16268: PUSH
16269: LD_INT 2
16271: EQUAL
16272: IFFALSE 16495
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16274: LD_VAR 0 1
16278: PPUSH
16279: CALL_OW 256
16283: PUSH
16284: LD_INT 1000
16286: EQUAL
16287: PUSH
16288: LD_VAR 0 1
16292: PPUSH
16293: CALL_OW 110
16297: PUSH
16298: LD_INT 1
16300: EQUAL
16301: AND
16302: IFFALSE 16316
// SetTag ( i , 0 ) ;
16304: LD_VAR 0 1
16308: PPUSH
16309: LD_INT 0
16311: PPUSH
16312: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16316: LD_VAR 0 1
16320: PPUSH
16321: CALL_OW 256
16325: PUSH
16326: LD_INT 500
16328: LESSEQUAL
16329: PUSH
16330: LD_VAR 0 1
16334: PPUSH
16335: CALL_OW 110
16339: PUSH
16340: LD_INT 0
16342: EQUAL
16343: AND
16344: IFFALSE 16373
// begin SetTag ( i , 1 ) ;
16346: LD_VAR 0 1
16350: PPUSH
16351: LD_INT 1
16353: PPUSH
16354: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
16358: LD_VAR 0 1
16362: PPUSH
16363: LD_INT 92
16365: PPUSH
16366: LD_INT 155
16368: PPUSH
16369: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
16373: LD_VAR 0 3
16377: PUSH
16378: LD_VAR 0 1
16382: PPUSH
16383: CALL_OW 256
16387: PUSH
16388: LD_INT 500
16390: GREATER
16391: AND
16392: PUSH
16393: LD_VAR 0 1
16397: PPUSH
16398: CALL_OW 110
16402: PUSH
16403: LD_INT 0
16405: EQUAL
16406: AND
16407: PUSH
16408: LD_VAR 0 1
16412: PPUSH
16413: CALL_OW 314
16417: NOT
16418: AND
16419: IFFALSE 16493
// begin if b then
16421: LD_VAR 0 3
16425: IFFALSE 16457
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16427: LD_VAR 0 1
16431: PPUSH
16432: LD_VAR 0 3
16436: PUSH
16437: LD_INT 1
16439: PPUSH
16440: LD_VAR 0 3
16444: PPUSH
16445: CALL_OW 12
16449: ARRAY
16450: PPUSH
16451: CALL_OW 130
16455: GO 16493
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16457: LD_VAR 0 1
16461: PPUSH
16462: LD_INT 94
16464: PPUSH
16465: LD_INT 165
16467: PPUSH
16468: CALL_OW 297
16472: PUSH
16473: LD_INT 8
16475: GREATER
16476: IFFALSE 16493
// ComMoveXY ( i , 94 , 165 ) ;
16478: LD_VAR 0 1
16482: PPUSH
16483: LD_INT 94
16485: PPUSH
16486: LD_INT 165
16488: PPUSH
16489: CALL_OW 111
// end ; end else
16493: GO 16760
// if GetWeapon ( i ) = ru_crane then
16495: LD_VAR 0 1
16499: PPUSH
16500: CALL_OW 264
16504: PUSH
16505: LD_INT 52
16507: EQUAL
16508: IFFALSE 16760
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16510: LD_VAR 0 1
16514: PPUSH
16515: CALL_OW 256
16519: PUSH
16520: LD_INT 1000
16522: EQUAL
16523: PUSH
16524: LD_VAR 0 1
16528: PPUSH
16529: CALL_OW 110
16533: PUSH
16534: LD_INT 1
16536: EQUAL
16537: AND
16538: IFFALSE 16564
// begin SetTag ( i , 0 ) ;
16540: LD_VAR 0 1
16544: PPUSH
16545: LD_INT 0
16547: PPUSH
16548: CALL_OW 109
// SetFuel ( i , 100 ) ;
16552: LD_VAR 0 1
16556: PPUSH
16557: LD_INT 100
16559: PPUSH
16560: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16564: LD_VAR 0 1
16568: PPUSH
16569: CALL_OW 256
16573: PUSH
16574: LD_INT 500
16576: LESSEQUAL
16577: PUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL_OW 110
16587: PUSH
16588: LD_INT 0
16590: EQUAL
16591: AND
16592: IFFALSE 16635
// begin SetTag ( i , 1 ) ;
16594: LD_VAR 0 1
16598: PPUSH
16599: LD_INT 1
16601: PPUSH
16602: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
16606: LD_VAR 0 1
16610: PPUSH
16611: LD_INT 83
16613: PPUSH
16614: LD_INT 135
16616: PPUSH
16617: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
16621: LD_VAR 0 1
16625: PPUSH
16626: CALL_OW 310
16630: PPUSH
16631: CALL 68965 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
16635: LD_VAR 0 1
16639: PPUSH
16640: CALL_OW 256
16644: PUSH
16645: LD_INT 500
16647: GREATER
16648: PUSH
16649: LD_VAR 0 1
16653: PPUSH
16654: CALL_OW 110
16658: PUSH
16659: LD_INT 0
16661: EQUAL
16662: AND
16663: PUSH
16664: LD_VAR 0 1
16668: PPUSH
16669: CALL_OW 311
16673: AND
16674: PUSH
16675: LD_VAR 0 1
16679: PPUSH
16680: CALL_OW 314
16684: NOT
16685: AND
16686: IFFALSE 16760
// begin if b then
16688: LD_VAR 0 3
16692: IFFALSE 16724
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16694: LD_VAR 0 1
16698: PPUSH
16699: LD_VAR 0 3
16703: PUSH
16704: LD_INT 1
16706: PPUSH
16707: LD_VAR 0 3
16711: PPUSH
16712: CALL_OW 12
16716: ARRAY
16717: PPUSH
16718: CALL_OW 130
16722: GO 16760
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16724: LD_VAR 0 1
16728: PPUSH
16729: LD_INT 94
16731: PPUSH
16732: LD_INT 165
16734: PPUSH
16735: CALL_OW 297
16739: PUSH
16740: LD_INT 8
16742: GREATER
16743: IFFALSE 16760
// ComMoveXY ( i , 94 , 165 ) ;
16745: LD_VAR 0 1
16749: PPUSH
16750: LD_INT 94
16752: PPUSH
16753: LD_INT 165
16755: PPUSH
16756: CALL_OW 111
// end ; end ; end ;
16760: GO 16256
16762: POP
16763: POP
// end ;
16764: PPOPN 6
16766: END
// every 10 10$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp , tmp2 ;
16767: LD_EXP 23
16771: NOT
16772: PUSH
16773: LD_EXP 27
16777: NOT
16778: AND
16779: IFFALSE 17694
16781: GO 16783
16783: DISABLE
16784: LD_INT 0
16786: PPUSH
16787: PPUSH
16788: PPUSH
16789: PPUSH
16790: PPUSH
// begin enable ;
16791: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
16792: LD_INT 35
16794: PUSH
16795: LD_INT 45
16797: PUSH
16798: LD_INT 55
16800: PUSH
16801: LD_INT 60
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: PUSH
16810: LD_OWVAR 67
16814: ARRAY
16815: PPUSH
16816: CALL_OW 13
16820: IFFALSE 16836
// waveStrength := waveStrength + 1 ;
16822: LD_ADDR_EXP 62
16826: PUSH
16827: LD_EXP 62
16831: PUSH
16832: LD_INT 1
16834: PLUS
16835: ST_TO_ADDR
// if waveStrength > [ 2 , 3 , 4 , 4 ] [ Difficulty ] then
16836: LD_EXP 62
16840: PUSH
16841: LD_INT 2
16843: PUSH
16844: LD_INT 3
16846: PUSH
16847: LD_INT 4
16849: PUSH
16850: LD_INT 4
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: PUSH
16859: LD_OWVAR 67
16863: ARRAY
16864: GREATER
16865: IFFALSE 16897
// begin waveStrength := waveStrength + 2 ;
16867: LD_ADDR_EXP 62
16871: PUSH
16872: LD_EXP 62
16876: PUSH
16877: LD_INT 2
16879: PLUS
16880: ST_TO_ADDR
// disableAttackOnHeike := true ;
16881: LD_ADDR_EXP 27
16885: PUSH
16886: LD_INT 1
16888: ST_TO_ADDR
// disable ;
16889: DISABLE
// wait ( 3 3$00 ) ;
16890: LD_INT 6300
16892: PPUSH
16893: CALL_OW 67
// end ; for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
16897: LD_ADDR_VAR 0 1
16901: PUSH
16902: DOUBLE
16903: LD_INT 1
16905: DEC
16906: ST_TO_ADDR
16907: LD_INT 2
16909: PUSH
16910: LD_INT 2
16912: PUSH
16913: LD_INT 3
16915: PUSH
16916: LD_INT 4
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: PUSH
16925: LD_OWVAR 67
16929: ARRAY
16930: PUSH
16931: FOR_TO
16932: IFFALSE 17093
// begin InitHc ;
16934: CALL_OW 19
// InitVc ;
16938: CALL_OW 20
// uc_side := 3 ;
16942: LD_ADDR_OWVAR 20
16946: PUSH
16947: LD_INT 3
16949: ST_TO_ADDR
// uc_nation := 3 ;
16950: LD_ADDR_OWVAR 21
16954: PUSH
16955: LD_INT 3
16957: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
16958: LD_INT 0
16960: PPUSH
16961: LD_INT 1
16963: PPUSH
16964: LD_OWVAR 67
16968: PUSH
16969: LD_INT 2
16971: PLUS
16972: PPUSH
16973: CALL_OW 380
// un := CreateHuman ;
16977: LD_ADDR_VAR 0 2
16981: PUSH
16982: CALL_OW 44
16986: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
16987: LD_VAR 0 2
16991: PPUSH
16992: LD_INT 160
16994: PPUSH
16995: LD_INT 3
16997: PPUSH
16998: LD_INT 2
17000: PPUSH
17001: LD_INT 0
17003: PPUSH
17004: CALL 69285 0 5
// SetClass ( un , class_bazooker ) ;
17008: LD_VAR 0 2
17012: PPUSH
17013: LD_INT 9
17015: PPUSH
17016: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17020: LD_ADDR_EXP 61
17024: PUSH
17025: LD_EXP 61
17029: PPUSH
17030: LD_EXP 61
17034: PUSH
17035: LD_INT 1
17037: PLUS
17038: PPUSH
17039: LD_VAR 0 2
17043: PPUSH
17044: CALL_OW 1
17048: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17049: LD_VAR 0 2
17053: PPUSH
17054: LD_INT 177
17056: PPUSH
17057: LD_INT 17
17059: PPUSH
17060: CALL_OW 111
// wait ( 0 0$2 ) ;
17064: LD_INT 70
17066: PPUSH
17067: CALL_OW 67
// tmp2 := Join ( tmp2 , un ) ;
17071: LD_ADDR_VAR 0 5
17075: PUSH
17076: LD_VAR 0 5
17080: PPUSH
17081: LD_VAR 0 2
17085: PPUSH
17086: CALL 67145 0 2
17090: ST_TO_ADDR
// end ;
17091: GO 16931
17093: POP
17094: POP
// AddComAgressiveMove ( tmp2 , 196 , 53 ) ;
17095: LD_VAR 0 5
17099: PPUSH
17100: LD_INT 196
17102: PPUSH
17103: LD_INT 53
17105: PPUSH
17106: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 199 , 62 ) ;
17110: LD_VAR 0 5
17114: PPUSH
17115: LD_INT 199
17117: PPUSH
17118: LD_INT 62
17120: PPUSH
17121: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 205 , 75 ) ;
17125: LD_VAR 0 5
17129: PPUSH
17130: LD_INT 205
17132: PPUSH
17133: LD_INT 75
17135: PPUSH
17136: CALL_OW 174
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + waveStrength do
17140: LD_ADDR_VAR 0 1
17144: PUSH
17145: DOUBLE
17146: LD_INT 1
17148: DEC
17149: ST_TO_ADDR
17150: LD_INT 2
17152: PUSH
17153: LD_INT 3
17155: PUSH
17156: LD_INT 3
17158: PUSH
17159: LD_INT 4
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: PUSH
17168: LD_OWVAR 67
17172: ARRAY
17173: PUSH
17174: LD_EXP 62
17178: PLUS
17179: PUSH
17180: FOR_TO
17181: IFFALSE 17490
// begin InitHc ;
17183: CALL_OW 19
// InitVc ;
17187: CALL_OW 20
// uc_side := 3 ;
17191: LD_ADDR_OWVAR 20
17195: PUSH
17196: LD_INT 3
17198: ST_TO_ADDR
// uc_nation := 3 ;
17199: LD_ADDR_OWVAR 21
17203: PUSH
17204: LD_INT 3
17206: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
17207: LD_INT 22
17209: PUSH
17210: LD_INT 23
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 1
17219: PPUSH
17220: LD_INT 2
17222: PPUSH
17223: CALL_OW 12
17227: ARRAY
17228: PPUSH
17229: LD_INT 1
17231: PPUSH
17232: LD_INT 1
17234: PPUSH
17235: LD_INT 44
17237: PUSH
17238: LD_INT 45
17240: PUSH
17241: LD_INT 43
17243: PUSH
17244: LD_INT 42
17246: PUSH
17247: LD_INT 44
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 1
17259: PPUSH
17260: LD_INT 5
17262: PPUSH
17263: CALL_OW 12
17267: ARRAY
17268: PPUSH
17269: LD_INT 99
17271: PPUSH
17272: CALL 34283 0 5
// veh := CreateVehicle ;
17276: LD_ADDR_VAR 0 3
17280: PUSH
17281: CALL_OW 45
17285: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
17286: LD_VAR 0 3
17290: PPUSH
17291: LD_INT 160
17293: PPUSH
17294: LD_INT 3
17296: PPUSH
17297: LD_INT 2
17299: PPUSH
17300: LD_INT 0
17302: PPUSH
17303: CALL 69285 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17307: LD_ADDR_EXP 61
17311: PUSH
17312: LD_EXP 61
17316: PPUSH
17317: LD_EXP 61
17321: PUSH
17322: LD_INT 1
17324: PLUS
17325: PPUSH
17326: LD_VAR 0 3
17330: PPUSH
17331: CALL_OW 1
17335: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
17336: LD_INT 0
17338: PPUSH
17339: LD_INT 3
17341: PPUSH
17342: LD_OWVAR 67
17346: PUSH
17347: LD_INT 2
17349: PLUS
17350: PPUSH
17351: CALL_OW 380
// un := CreateHuman ;
17355: LD_ADDR_VAR 0 2
17359: PUSH
17360: CALL_OW 44
17364: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17365: LD_VAR 0 2
17369: PPUSH
17370: LD_VAR 0 3
17374: PPUSH
17375: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17379: LD_ADDR_EXP 61
17383: PUSH
17384: LD_EXP 61
17388: PPUSH
17389: LD_EXP 61
17393: PUSH
17394: LD_INT 1
17396: PLUS
17397: PPUSH
17398: LD_VAR 0 2
17402: PPUSH
17403: CALL_OW 1
17407: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17408: LD_VAR 0 2
17412: PPUSH
17413: LD_INT 177
17415: PPUSH
17416: LD_INT 17
17418: PPUSH
17419: CALL_OW 111
// wait ( 0 0$2 ) ;
17423: LD_INT 70
17425: PPUSH
17426: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17430: LD_ADDR_VAR 0 4
17434: PUSH
17435: LD_VAR 0 4
17439: PPUSH
17440: LD_VAR 0 4
17444: PUSH
17445: LD_INT 1
17447: PLUS
17448: PPUSH
17449: LD_VAR 0 3
17453: PPUSH
17454: CALL_OW 1
17458: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17459: LD_ADDR_VAR 0 4
17463: PUSH
17464: LD_VAR 0 4
17468: PPUSH
17469: LD_VAR 0 4
17473: PUSH
17474: LD_INT 1
17476: PLUS
17477: PPUSH
17478: LD_VAR 0 2
17482: PPUSH
17483: CALL_OW 1
17487: ST_TO_ADDR
// end ;
17488: GO 17180
17490: POP
17491: POP
// for i in tmp do
17492: LD_ADDR_VAR 0 1
17496: PUSH
17497: LD_VAR 0 4
17501: PUSH
17502: FOR_IN
17503: IFFALSE 17584
// AgressiveMove ( i , [ [ 206 , 37 ] , [ 239 , 53 ] , [ 260 , 67 ] , [ 263 , 79 ] , [ 257 , 105 ] , [ 227 , 97 ] ] ) ;
17505: LD_VAR 0 1
17509: PPUSH
17510: LD_INT 206
17512: PUSH
17513: LD_INT 37
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 239
17522: PUSH
17523: LD_INT 53
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 260
17532: PUSH
17533: LD_INT 67
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 263
17542: PUSH
17543: LD_INT 79
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 257
17552: PUSH
17553: LD_INT 105
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 227
17562: PUSH
17563: LD_INT 97
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: PPUSH
17578: CALL 69749 0 2
17582: GO 17502
17584: POP
17585: POP
// repeat wait ( 0 0$2 ) ;
17586: LD_INT 70
17588: PPUSH
17589: CALL_OW 67
// for i in tmp do
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_VAR 0 4
17602: PUSH
17603: FOR_IN
17604: IFFALSE 17671
// if IsDead ( i ) then
17606: LD_VAR 0 1
17610: PPUSH
17611: CALL_OW 301
17615: IFFALSE 17635
// tmp := tmp diff i else
17617: LD_ADDR_VAR 0 4
17621: PUSH
17622: LD_VAR 0 4
17626: PUSH
17627: LD_VAR 0 1
17631: DIFF
17632: ST_TO_ADDR
17633: GO 17669
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
17635: LD_VAR 0 1
17639: PPUSH
17640: LD_INT 81
17642: PUSH
17643: LD_INT 3
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PPUSH
17650: CALL_OW 69
17654: PPUSH
17655: LD_VAR 0 1
17659: PPUSH
17660: CALL_OW 74
17664: PPUSH
17665: CALL_OW 115
17669: GO 17603
17671: POP
17672: POP
// until not tmp ;
17673: LD_VAR 0 4
17677: NOT
17678: IFFALSE 17586
// if firstAttack then
17680: LD_EXP 28
17684: IFFALSE 17694
// firstAttack := false ;
17686: LD_ADDR_EXP 28
17690: PUSH
17691: LD_INT 0
17693: ST_TO_ADDR
// end ;
17694: PPOPN 5
17696: END
// every 12 12$00 + 3 3$00 trigger not omarAttack and not rolfAttack and bergkampfArrived and not disableAttackOnHeike do var i , un , veh , tmp ;
17697: LD_EXP 23
17701: NOT
17702: PUSH
17703: LD_EXP 32
17707: NOT
17708: AND
17709: PUSH
17710: LD_EXP 3
17714: AND
17715: PUSH
17716: LD_EXP 27
17720: NOT
17721: AND
17722: IFFALSE 18639
17724: GO 17726
17726: DISABLE
17727: LD_INT 0
17729: PPUSH
17730: PPUSH
17731: PPUSH
17732: PPUSH
// begin enable ;
17733: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
17734: LD_ADDR_VAR 0 1
17738: PUSH
17739: DOUBLE
17740: LD_INT 1
17742: DEC
17743: ST_TO_ADDR
17744: LD_INT 1
17746: PUSH
17747: LD_INT 2
17749: PUSH
17750: LD_INT 2
17752: PUSH
17753: LD_INT 3
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: PUSH
17762: LD_OWVAR 67
17766: ARRAY
17767: PUSH
17768: FOR_TO
17769: IFFALSE 18070
// begin InitHc ;
17771: CALL_OW 19
// InitVc ;
17775: CALL_OW 20
// uc_side := 3 ;
17779: LD_ADDR_OWVAR 20
17783: PUSH
17784: LD_INT 3
17786: ST_TO_ADDR
// uc_nation := 3 ;
17787: LD_ADDR_OWVAR 21
17791: PUSH
17792: LD_INT 3
17794: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
17795: LD_INT 22
17797: PUSH
17798: LD_INT 23
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 1
17807: PPUSH
17808: LD_INT 2
17810: PPUSH
17811: CALL_OW 12
17815: ARRAY
17816: PPUSH
17817: LD_INT 1
17819: PPUSH
17820: LD_INT 1
17822: PPUSH
17823: LD_INT 44
17825: PUSH
17826: LD_INT 43
17828: PUSH
17829: LD_INT 42
17831: PUSH
17832: LD_INT 44
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 1
17843: PPUSH
17844: LD_INT 4
17846: PPUSH
17847: CALL_OW 12
17851: ARRAY
17852: PPUSH
17853: LD_INT 99
17855: PPUSH
17856: CALL 34283 0 5
// veh := CreateVehicle ;
17860: LD_ADDR_VAR 0 3
17864: PUSH
17865: CALL_OW 45
17869: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
17870: LD_VAR 0 3
17874: PPUSH
17875: LD_INT 5
17877: PPUSH
17878: LD_INT 3
17880: PPUSH
17881: LD_INT 2
17883: PPUSH
17884: LD_INT 0
17886: PPUSH
17887: CALL 69285 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17891: LD_ADDR_EXP 61
17895: PUSH
17896: LD_EXP 61
17900: PPUSH
17901: LD_EXP 61
17905: PUSH
17906: LD_INT 1
17908: PLUS
17909: PPUSH
17910: LD_VAR 0 3
17914: PPUSH
17915: CALL_OW 1
17919: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
17920: LD_INT 0
17922: PPUSH
17923: LD_INT 3
17925: PPUSH
17926: LD_OWVAR 67
17930: PPUSH
17931: CALL_OW 380
// un := CreateHuman ;
17935: LD_ADDR_VAR 0 2
17939: PUSH
17940: CALL_OW 44
17944: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17945: LD_VAR 0 2
17949: PPUSH
17950: LD_VAR 0 3
17954: PPUSH
17955: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17959: LD_ADDR_EXP 61
17963: PUSH
17964: LD_EXP 61
17968: PPUSH
17969: LD_EXP 61
17973: PUSH
17974: LD_INT 1
17976: PLUS
17977: PPUSH
17978: LD_VAR 0 2
17982: PPUSH
17983: CALL_OW 1
17987: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
17988: LD_VAR 0 2
17992: PPUSH
17993: LD_INT 23
17995: PPUSH
17996: LD_INT 7
17998: PPUSH
17999: CALL_OW 111
// wait ( 0 0$2 ) ;
18003: LD_INT 70
18005: PPUSH
18006: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18010: LD_ADDR_VAR 0 4
18014: PUSH
18015: LD_VAR 0 4
18019: PPUSH
18020: LD_VAR 0 4
18024: PUSH
18025: LD_INT 1
18027: PLUS
18028: PPUSH
18029: LD_VAR 0 3
18033: PPUSH
18034: CALL_OW 1
18038: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18039: LD_ADDR_VAR 0 4
18043: PUSH
18044: LD_VAR 0 4
18048: PPUSH
18049: LD_VAR 0 4
18053: PUSH
18054: LD_INT 1
18056: PLUS
18057: PPUSH
18058: LD_VAR 0 2
18062: PPUSH
18063: CALL_OW 1
18067: ST_TO_ADDR
// end ;
18068: GO 17768
18070: POP
18071: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
18072: LD_ADDR_VAR 0 1
18076: PUSH
18077: DOUBLE
18078: LD_INT 1
18080: DEC
18081: ST_TO_ADDR
18082: LD_INT 2
18084: PUSH
18085: LD_INT 3
18087: PUSH
18088: LD_INT 3
18090: PUSH
18091: LD_INT 4
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: PUSH
18100: LD_OWVAR 67
18104: ARRAY
18105: PUSH
18106: FOR_TO
18107: IFFALSE 18416
// begin InitHc ;
18109: CALL_OW 19
// InitVc ;
18113: CALL_OW 20
// uc_side := 3 ;
18117: LD_ADDR_OWVAR 20
18121: PUSH
18122: LD_INT 3
18124: ST_TO_ADDR
// uc_nation := 3 ;
18125: LD_ADDR_OWVAR 21
18129: PUSH
18130: LD_INT 3
18132: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
18133: LD_INT 22
18135: PUSH
18136: LD_INT 23
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 1
18145: PPUSH
18146: LD_INT 2
18148: PPUSH
18149: CALL_OW 12
18153: ARRAY
18154: PPUSH
18155: LD_INT 1
18157: PPUSH
18158: LD_INT 1
18160: PPUSH
18161: LD_INT 44
18163: PUSH
18164: LD_INT 45
18166: PUSH
18167: LD_INT 43
18169: PUSH
18170: LD_INT 42
18172: PUSH
18173: LD_INT 44
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 1
18185: PPUSH
18186: LD_INT 5
18188: PPUSH
18189: CALL_OW 12
18193: ARRAY
18194: PPUSH
18195: LD_INT 99
18197: PPUSH
18198: CALL 34283 0 5
// veh := CreateVehicle ;
18202: LD_ADDR_VAR 0 3
18206: PUSH
18207: CALL_OW 45
18211: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
18212: LD_VAR 0 3
18216: PPUSH
18217: LD_INT 127
18219: PPUSH
18220: LD_INT 243
18222: PPUSH
18223: LD_INT 0
18225: PPUSH
18226: LD_INT 0
18228: PPUSH
18229: CALL 69285 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18233: LD_ADDR_EXP 61
18237: PUSH
18238: LD_EXP 61
18242: PPUSH
18243: LD_EXP 61
18247: PUSH
18248: LD_INT 1
18250: PLUS
18251: PPUSH
18252: LD_VAR 0 3
18256: PPUSH
18257: CALL_OW 1
18261: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
18262: LD_INT 0
18264: PPUSH
18265: LD_INT 3
18267: PPUSH
18268: LD_OWVAR 67
18272: PUSH
18273: LD_INT 2
18275: PLUS
18276: PPUSH
18277: CALL_OW 380
// un := CreateHuman ;
18281: LD_ADDR_VAR 0 2
18285: PUSH
18286: CALL_OW 44
18290: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18291: LD_VAR 0 2
18295: PPUSH
18296: LD_VAR 0 3
18300: PPUSH
18301: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18305: LD_ADDR_EXP 61
18309: PUSH
18310: LD_EXP 61
18314: PPUSH
18315: LD_EXP 61
18319: PUSH
18320: LD_INT 1
18322: PLUS
18323: PPUSH
18324: LD_VAR 0 2
18328: PPUSH
18329: CALL_OW 1
18333: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
18334: LD_VAR 0 2
18338: PPUSH
18339: LD_INT 130
18341: PPUSH
18342: LD_INT 233
18344: PPUSH
18345: CALL_OW 111
// wait ( 0 0$2 ) ;
18349: LD_INT 70
18351: PPUSH
18352: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18356: LD_ADDR_VAR 0 4
18360: PUSH
18361: LD_VAR 0 4
18365: PPUSH
18366: LD_VAR 0 4
18370: PUSH
18371: LD_INT 1
18373: PLUS
18374: PPUSH
18375: LD_VAR 0 3
18379: PPUSH
18380: CALL_OW 1
18384: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18385: LD_ADDR_VAR 0 4
18389: PUSH
18390: LD_VAR 0 4
18394: PPUSH
18395: LD_VAR 0 4
18399: PUSH
18400: LD_INT 1
18402: PLUS
18403: PPUSH
18404: LD_VAR 0 2
18408: PPUSH
18409: CALL_OW 1
18413: ST_TO_ADDR
// end ;
18414: GO 18106
18416: POP
18417: POP
// for i in tmp do
18418: LD_ADDR_VAR 0 1
18422: PUSH
18423: LD_VAR 0 4
18427: PUSH
18428: FOR_IN
18429: IFFALSE 18543
// AgressiveMove ( i , [ [ 130 , 229 ] , [ 137 , 216 ] , [ 142 , 194 ] , [ 140 , 169 ] , [ 146 , 162 ] , [ 174 , 161 ] , [ 158 , 134 ] , [ 136 , 107 ] , [ 115 , 89 ] ] ) ;
18431: LD_VAR 0 1
18435: PPUSH
18436: LD_INT 130
18438: PUSH
18439: LD_INT 229
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 137
18448: PUSH
18449: LD_INT 216
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 142
18458: PUSH
18459: LD_INT 194
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 140
18468: PUSH
18469: LD_INT 169
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 146
18478: PUSH
18479: LD_INT 162
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 174
18488: PUSH
18489: LD_INT 161
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 158
18498: PUSH
18499: LD_INT 134
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 136
18508: PUSH
18509: LD_INT 107
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 115
18518: PUSH
18519: LD_INT 89
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: PPUSH
18537: CALL 69749 0 2
18541: GO 18428
18543: POP
18544: POP
// repeat wait ( 0 0$2 ) ;
18545: LD_INT 70
18547: PPUSH
18548: CALL_OW 67
// for i in tmp do
18552: LD_ADDR_VAR 0 1
18556: PUSH
18557: LD_VAR 0 4
18561: PUSH
18562: FOR_IN
18563: IFFALSE 18630
// if IsDead ( i ) then
18565: LD_VAR 0 1
18569: PPUSH
18570: CALL_OW 301
18574: IFFALSE 18594
// tmp := tmp diff i else
18576: LD_ADDR_VAR 0 4
18580: PUSH
18581: LD_VAR 0 4
18585: PUSH
18586: LD_VAR 0 1
18590: DIFF
18591: ST_TO_ADDR
18592: GO 18628
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18594: LD_VAR 0 1
18598: PPUSH
18599: LD_INT 81
18601: PUSH
18602: LD_INT 3
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PPUSH
18609: CALL_OW 69
18613: PPUSH
18614: LD_VAR 0 1
18618: PPUSH
18619: CALL_OW 74
18623: PPUSH
18624: CALL_OW 115
18628: GO 18562
18630: POP
18631: POP
// until not tmp ;
18632: LD_VAR 0 4
18636: NOT
18637: IFFALSE 18545
// end ;
18639: PPOPN 4
18641: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
18642: LD_EXP 6
18646: IFFALSE 19105
18648: GO 18650
18650: DISABLE
18651: LD_INT 0
18653: PPUSH
18654: PPUSH
18655: PPUSH
18656: PPUSH
// begin wait ( 3 3$00 ) ;
18657: LD_INT 6300
18659: PPUSH
18660: CALL_OW 67
// for i := 1 to 3 do
18664: LD_ADDR_VAR 0 1
18668: PUSH
18669: DOUBLE
18670: LD_INT 1
18672: DEC
18673: ST_TO_ADDR
18674: LD_INT 3
18676: PUSH
18677: FOR_TO
18678: IFFALSE 18977
// begin InitHc ;
18680: CALL_OW 19
// InitVc ;
18684: CALL_OW 20
// uc_side := 3 ;
18688: LD_ADDR_OWVAR 20
18692: PUSH
18693: LD_INT 3
18695: ST_TO_ADDR
// uc_nation := 3 ;
18696: LD_ADDR_OWVAR 21
18700: PUSH
18701: LD_INT 3
18703: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
18704: LD_INT 22
18706: PUSH
18707: LD_INT 23
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 1
18716: PPUSH
18717: LD_INT 2
18719: PPUSH
18720: CALL_OW 12
18724: ARRAY
18725: PPUSH
18726: LD_INT 1
18728: PPUSH
18729: LD_INT 1
18731: PPUSH
18732: LD_INT 44
18734: PUSH
18735: LD_INT 43
18737: PUSH
18738: LD_INT 42
18740: PUSH
18741: LD_INT 44
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 1
18752: PPUSH
18753: LD_INT 4
18755: PPUSH
18756: CALL_OW 12
18760: ARRAY
18761: PPUSH
18762: LD_INT 99
18764: PPUSH
18765: CALL 34283 0 5
// veh := CreateVehicle ;
18769: LD_ADDR_VAR 0 3
18773: PUSH
18774: CALL_OW 45
18778: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
18779: LD_VAR 0 3
18783: PPUSH
18784: LD_INT 293
18786: PPUSH
18787: LD_INT 246
18789: PPUSH
18790: LD_INT 5
18792: PPUSH
18793: LD_INT 0
18795: PPUSH
18796: CALL 69285 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18800: LD_ADDR_EXP 61
18804: PUSH
18805: LD_EXP 61
18809: PPUSH
18810: LD_EXP 61
18814: PUSH
18815: LD_INT 1
18817: PLUS
18818: PPUSH
18819: LD_VAR 0 3
18823: PPUSH
18824: CALL_OW 1
18828: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
18829: LD_INT 0
18831: PPUSH
18832: LD_INT 3
18834: PPUSH
18835: LD_INT 3
18837: PPUSH
18838: CALL_OW 380
// un := CreateHuman ;
18842: LD_ADDR_VAR 0 2
18846: PUSH
18847: CALL_OW 44
18851: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18852: LD_VAR 0 2
18856: PPUSH
18857: LD_VAR 0 3
18861: PPUSH
18862: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18866: LD_ADDR_EXP 61
18870: PUSH
18871: LD_EXP 61
18875: PPUSH
18876: LD_EXP 61
18880: PUSH
18881: LD_INT 1
18883: PLUS
18884: PPUSH
18885: LD_VAR 0 2
18889: PPUSH
18890: CALL_OW 1
18894: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
18895: LD_VAR 0 2
18899: PPUSH
18900: LD_INT 273
18902: PPUSH
18903: LD_INT 227
18905: PPUSH
18906: CALL_OW 111
// wait ( 0 0$2 ) ;
18910: LD_INT 70
18912: PPUSH
18913: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18917: LD_ADDR_VAR 0 4
18921: PUSH
18922: LD_VAR 0 4
18926: PPUSH
18927: LD_VAR 0 4
18931: PUSH
18932: LD_INT 1
18934: PLUS
18935: PPUSH
18936: LD_VAR 0 3
18940: PPUSH
18941: CALL_OW 1
18945: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18946: LD_ADDR_VAR 0 4
18950: PUSH
18951: LD_VAR 0 4
18955: PPUSH
18956: LD_VAR 0 4
18960: PUSH
18961: LD_INT 1
18963: PLUS
18964: PPUSH
18965: LD_VAR 0 2
18969: PPUSH
18970: CALL_OW 1
18974: ST_TO_ADDR
// end ;
18975: GO 18677
18977: POP
18978: POP
// for i in tmp do
18979: LD_ADDR_VAR 0 1
18983: PUSH
18984: LD_VAR 0 4
18988: PUSH
18989: FOR_IN
18990: IFFALSE 19009
// ComAgressiveMove ( i , 330 , 231 ) ;
18992: LD_VAR 0 1
18996: PPUSH
18997: LD_INT 330
18999: PPUSH
19000: LD_INT 231
19002: PPUSH
19003: CALL_OW 114
19007: GO 18989
19009: POP
19010: POP
// repeat wait ( 0 0$2 ) ;
19011: LD_INT 70
19013: PPUSH
19014: CALL_OW 67
// for i in tmp do
19018: LD_ADDR_VAR 0 1
19022: PUSH
19023: LD_VAR 0 4
19027: PUSH
19028: FOR_IN
19029: IFFALSE 19096
// if IsDead ( i ) then
19031: LD_VAR 0 1
19035: PPUSH
19036: CALL_OW 301
19040: IFFALSE 19060
// tmp := tmp diff i else
19042: LD_ADDR_VAR 0 4
19046: PUSH
19047: LD_VAR 0 4
19051: PUSH
19052: LD_VAR 0 1
19056: DIFF
19057: ST_TO_ADDR
19058: GO 19094
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
19060: LD_VAR 0 1
19064: PPUSH
19065: LD_INT 81
19067: PUSH
19068: LD_INT 3
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PPUSH
19075: CALL_OW 69
19079: PPUSH
19080: LD_VAR 0 1
19084: PPUSH
19085: CALL_OW 74
19089: PPUSH
19090: CALL_OW 115
19094: GO 19028
19096: POP
19097: POP
// until not tmp ;
19098: LD_VAR 0 4
19102: NOT
19103: IFFALSE 19011
// end ;
19105: PPOPN 4
19107: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19108: LD_INT 3
19110: PUSH
19111: LD_INT 22
19113: PUSH
19114: LD_INT 2
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 32
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PPUSH
19139: CALL_OW 69
19143: IFFALSE 19227
19145: GO 19147
19147: DISABLE
19148: LD_INT 0
19150: PPUSH
// begin enable ;
19151: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19152: LD_ADDR_VAR 0 1
19156: PUSH
19157: LD_INT 3
19159: PUSH
19160: LD_INT 22
19162: PUSH
19163: LD_INT 2
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 32
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PPUSH
19188: CALL_OW 69
19192: PUSH
19193: FOR_IN
19194: IFFALSE 19225
// if GetFuel ( i ) < 3 then
19196: LD_VAR 0 1
19200: PPUSH
19201: CALL_OW 261
19205: PUSH
19206: LD_INT 3
19208: LESS
19209: IFFALSE 19223
// SetFuel ( i , 3 ) ;
19211: LD_VAR 0 1
19215: PPUSH
19216: LD_INT 3
19218: PPUSH
19219: CALL_OW 240
19223: GO 19193
19225: POP
19226: POP
// end ; end_of_file
19227: PPOPN 1
19229: END
// export function Action ; begin
19230: LD_INT 0
19232: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
19233: LD_INT 2
19235: PPUSH
19236: LD_INT 4
19238: PPUSH
19239: CALL_OW 332
// Video ( true ) ;
19243: LD_INT 1
19245: PPUSH
19246: CALL 67117 0 1
// music_nat := 3 ;
19250: LD_ADDR_OWVAR 71
19254: PUSH
19255: LD_INT 3
19257: ST_TO_ADDR
// music_class := music_recon ;
19258: LD_ADDR_OWVAR 72
19262: PUSH
19263: LD_INT 3
19265: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
19266: LD_INT 213
19268: PPUSH
19269: LD_INT 89
19271: PPUSH
19272: CALL_OW 86
// if Kaia and Olaf then
19276: LD_EXP 39
19280: PUSH
19281: LD_EXP 43
19285: AND
19286: IFFALSE 19292
// SceneKaiaWithOlaf ;
19288: CALL 19370 0 0
// if Givi and Kamil then
19292: LD_EXP 35
19296: PUSH
19297: LD_EXP 38
19301: AND
19302: IFFALSE 19308
// SceneWithGiviAndKamil ;
19304: CALL 19941 0 0
// tick := 0 ;
19308: LD_ADDR_OWVAR 1
19312: PUSH
19313: LD_INT 0
19315: ST_TO_ADDR
// wait ( 3 ) ;
19316: LD_INT 3
19318: PPUSH
19319: CALL_OW 67
// Video ( false ) ;
19323: LD_INT 0
19325: PPUSH
19326: CALL 67117 0 1
// ChangeMissionObjectives ( M1 ) ;
19330: LD_STRING M1
19332: PPUSH
19333: CALL_OW 337
// music_nat := music_auto ;
19337: LD_ADDR_OWVAR 71
19341: PUSH
19342: LD_INT 0
19344: ST_TO_ADDR
// music_class := music_auto ;
19345: LD_ADDR_OWVAR 72
19349: PUSH
19350: LD_INT 0
19352: ST_TO_ADDR
// SaveForQuickRestart ;
19353: CALL_OW 22
// gameActive := true ;
19357: LD_ADDR_EXP 31
19361: PUSH
19362: LD_INT 1
19364: ST_TO_ADDR
// end ;
19365: LD_VAR 0 1
19369: RET
// export function SceneKaiaWithOlaf ; begin
19370: LD_INT 0
19372: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
19373: LD_INT 22
19375: PUSH
19376: LD_INT 2
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 30
19385: PUSH
19386: LD_INT 3
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PPUSH
19397: CALL_OW 69
19401: PPUSH
19402: LD_INT 14
19404: PPUSH
19405: LD_INT 1
19407: PPUSH
19408: LD_INT 1
19410: PPUSH
19411: LD_INT 26
19413: PPUSH
19414: CALL_OW 125
// wait ( 0 0$1 ) ;
19418: LD_INT 35
19420: PPUSH
19421: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
19425: LD_EXP 39
19429: PPUSH
19430: LD_STRING DK-Mem-1
19432: PPUSH
19433: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
19437: LD_EXP 39
19441: PPUSH
19442: LD_STRING DK-Mem-2
19444: PPUSH
19445: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
19449: LD_EXP 43
19453: PPUSH
19454: LD_STRING DO-Mem-3
19456: PPUSH
19457: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
19461: LD_EXP 39
19465: PPUSH
19466: LD_STRING DK-Mem-4
19468: PPUSH
19469: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
19473: LD_EXP 43
19477: PPUSH
19478: LD_STRING DO-Mem-5
19480: PPUSH
19481: CALL_OW 88
// wait ( 0 0$2 ) ;
19485: LD_INT 70
19487: PPUSH
19488: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
19492: LD_INT 22
19494: PUSH
19495: LD_INT 2
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 30
19504: PUSH
19505: LD_INT 3
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PPUSH
19516: CALL_OW 69
19520: PPUSH
19521: LD_INT 90
19523: PPUSH
19524: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
19528: LD_EXP 43
19532: PPUSH
19533: LD_STRING DO-Mem-6
19535: PPUSH
19536: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
19540: LD_EXP 39
19544: PPUSH
19545: LD_STRING DK-Mem-7
19547: PPUSH
19548: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
19552: LD_EXP 34
19556: PPUSH
19557: LD_EXP 39
19561: PPUSH
19562: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
19566: LD_EXP 34
19570: PPUSH
19571: LD_STRING DH-Mem-8
19573: PPUSH
19574: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
19578: LD_EXP 39
19582: PUSH
19583: LD_EXP 43
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PPUSH
19592: LD_EXP 34
19596: PPUSH
19597: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
19601: LD_EXP 43
19605: PPUSH
19606: LD_STRING DO-Mem-9
19608: PPUSH
19609: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
19613: LD_EXP 43
19617: PPUSH
19618: LD_STRING DO-Mem-10
19620: PPUSH
19621: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
19625: LD_EXP 43
19629: PPUSH
19630: LD_STRING DO-Mem-11
19632: PPUSH
19633: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
19637: LD_EXP 43
19641: PPUSH
19642: LD_STRING DO-Mem-12
19644: PPUSH
19645: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
19649: LD_EXP 39
19653: PPUSH
19654: LD_STRING DK-Mem-13
19656: PPUSH
19657: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
19661: LD_EXP 39
19665: PPUSH
19666: LD_STRING DK-Mem-14
19668: PPUSH
19669: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
19673: LD_EXP 39
19677: PPUSH
19678: LD_STRING DK-Mem-15
19680: PPUSH
19681: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
19685: LD_EXP 39
19689: PPUSH
19690: LD_STRING DK-Mem-16
19692: PPUSH
19693: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
19697: LD_EXP 39
19701: PPUSH
19702: LD_STRING DK-Mem-17
19704: PPUSH
19705: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
19709: LD_EXP 43
19713: PPUSH
19714: LD_EXP 39
19718: PPUSH
19719: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
19723: LD_EXP 43
19727: PPUSH
19728: LD_STRING DO-Mem-18
19730: PPUSH
19731: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
19735: LD_EXP 39
19739: PPUSH
19740: LD_EXP 43
19744: PPUSH
19745: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
19749: LD_EXP 39
19753: PPUSH
19754: LD_STRING DK-Mem-19
19756: PPUSH
19757: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
19761: LD_EXP 43
19765: PPUSH
19766: LD_INT 214
19768: PPUSH
19769: LD_INT 86
19771: PPUSH
19772: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19776: LD_EXP 43
19780: PPUSH
19781: LD_EXP 39
19785: PPUSH
19786: CALL_OW 179
// if Givi then
19790: LD_EXP 35
19794: IFFALSE 19825
// begin ComMoveXY ( Givi , 217 , 86 ) ;
19796: LD_EXP 35
19800: PPUSH
19801: LD_INT 217
19803: PPUSH
19804: LD_INT 86
19806: PPUSH
19807: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
19811: LD_EXP 35
19815: PPUSH
19816: LD_EXP 34
19820: PPUSH
19821: CALL_OW 179
// end ; if Kamil then
19825: LD_EXP 38
19829: IFFALSE 19869
// begin ComExit ( Kamil ) ;
19831: LD_EXP 38
19835: PPUSH
19836: CALL 67543 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
19840: LD_EXP 38
19844: PPUSH
19845: LD_INT 212
19847: PPUSH
19848: LD_INT 86
19850: PPUSH
19851: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
19855: LD_EXP 38
19859: PPUSH
19860: LD_EXP 34
19864: PPUSH
19865: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
19869: LD_INT 70
19871: PPUSH
19872: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
19876: LD_EXP 34
19880: PPUSH
19881: LD_STRING DH-Mem-20
19883: PPUSH
19884: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
19888: LD_EXP 43
19892: PPUSH
19893: LD_INT 215
19895: PPUSH
19896: LD_INT 87
19898: PPUSH
19899: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19903: LD_EXP 43
19907: PPUSH
19908: LD_EXP 39
19912: PPUSH
19913: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
19917: LD_EXP 39
19921: PPUSH
19922: LD_STRING DK-Mem-21
19924: PPUSH
19925: CALL_OW 88
// wait ( 0 0$2 ) ;
19929: LD_INT 70
19931: PPUSH
19932: CALL_OW 67
// end ;
19936: LD_VAR 0 1
19940: RET
// export function SceneWithGiviAndKamil ; var p ; begin
19941: LD_INT 0
19943: PPUSH
19944: PPUSH
// if Markov then
19945: LD_EXP 41
19949: IFFALSE 20067
// begin p := 0 ;
19951: LD_ADDR_VAR 0 2
19955: PUSH
19956: LD_INT 0
19958: ST_TO_ADDR
// if IsInUnit ( Markov ) then
19959: LD_EXP 41
19963: PPUSH
19964: CALL_OW 310
19968: IFFALSE 19979
// ComExit ( Markov ) ;
19970: LD_EXP 41
19974: PPUSH
19975: CALL 67543 0 1
// wait ( 0 0$1 ) ;
19979: LD_INT 35
19981: PPUSH
19982: CALL_OW 67
// ComMoveXY ( Markov , 212 , 88 ) ;
19986: LD_EXP 41
19990: PPUSH
19991: LD_INT 212
19993: PPUSH
19994: LD_INT 88
19996: PPUSH
19997: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20001: LD_INT 35
20003: PPUSH
20004: CALL_OW 67
// p := Inc ( p ) ;
20008: LD_ADDR_VAR 0 2
20012: PUSH
20013: LD_VAR 0 2
20017: PPUSH
20018: CALL 68506 0 1
20022: ST_TO_ADDR
// until GetDistUnits ( Markov , Heike ) < 6 or p > 12 ;
20023: LD_EXP 41
20027: PPUSH
20028: LD_EXP 34
20032: PPUSH
20033: CALL_OW 296
20037: PUSH
20038: LD_INT 6
20040: LESS
20041: PUSH
20042: LD_VAR 0 2
20046: PUSH
20047: LD_INT 12
20049: GREATER
20050: OR
20051: IFFALSE 20001
// AddComTurnUnit ( Markov , Heike ) ;
20053: LD_EXP 41
20057: PPUSH
20058: LD_EXP 34
20062: PPUSH
20063: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
20067: LD_EXP 35
20071: PPUSH
20072: LD_STRING DG-Obj-1
20074: PPUSH
20075: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
20079: LD_EXP 38
20083: PPUSH
20084: LD_STRING DKam-Obj-2
20086: PPUSH
20087: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
20091: LD_EXP 34
20095: PPUSH
20096: LD_EXP 38
20100: PPUSH
20101: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
20105: LD_EXP 38
20109: PPUSH
20110: LD_STRING DKam-Obj-3
20112: PPUSH
20113: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
20117: LD_EXP 41
20121: PPUSH
20122: LD_STRING DMar-Obj-4
20124: PPUSH
20125: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
20129: LD_EXP 38
20133: PPUSH
20134: LD_STRING DKam-Obj-6
20136: PPUSH
20137: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
20141: LD_EXP 38
20145: PPUSH
20146: LD_STRING DKam-Obj-7
20148: PPUSH
20149: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
20153: LD_EXP 38
20157: PPUSH
20158: LD_STRING DKam-Obj-8
20160: PPUSH
20161: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
20165: LD_EXP 34
20169: PPUSH
20170: LD_STRING DH-Obj-9
20172: PPUSH
20173: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
20177: LD_EXP 38
20181: PPUSH
20182: LD_STRING DKam-Obj-10
20184: PPUSH
20185: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
20189: LD_EXP 38
20193: PPUSH
20194: LD_STRING DKam-Obj-11
20196: PPUSH
20197: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
20201: LD_EXP 41
20205: PPUSH
20206: LD_STRING DMar-Obj-12
20208: PPUSH
20209: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
20213: LD_EXP 41
20217: PPUSH
20218: LD_STRING DMar-Obj-13
20220: PPUSH
20221: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
20225: LD_EXP 41
20229: PPUSH
20230: LD_STRING DMar-Obj-14
20232: PPUSH
20233: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
20237: LD_EXP 43
20241: PPUSH
20242: LD_STRING DO-Obj-15
20244: PPUSH
20245: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
20249: LD_EXP 43
20253: PPUSH
20254: LD_STRING DO-Obj-16
20256: PPUSH
20257: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
20261: LD_EXP 34
20265: PPUSH
20266: LD_STRING DH-Obj-17
20268: PPUSH
20269: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
20273: LD_EXP 43
20277: PPUSH
20278: LD_STRING DO-Obj-18
20280: PPUSH
20281: CALL_OW 88
// end ;
20285: LD_VAR 0 1
20289: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
20290: LD_INT 34
20292: PUSH
20293: LD_INT 92
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PPUSH
20300: CALL_OW 69
20304: IFFALSE 20499
20306: GO 20308
20308: DISABLE
20309: LD_INT 0
20311: PPUSH
// begin wait ( 0 0$2 ) ;
20312: LD_INT 70
20314: PPUSH
20315: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
20319: LD_INT 34
20321: PUSH
20322: LD_INT 92
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PPUSH
20329: CALL_OW 69
20333: PPUSH
20334: CALL_OW 87
// DialogueOn ;
20338: CALL_OW 6
// if Markov then
20342: LD_EXP 41
20346: IFFALSE 20374
// begin Say ( Markov , DMar-Grn-1 ) ;
20348: LD_EXP 41
20352: PPUSH
20353: LD_STRING DMar-Grn-1
20355: PPUSH
20356: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
20360: LD_EXP 34
20364: PPUSH
20365: LD_STRING DH-Grn-2
20367: PPUSH
20368: CALL_OW 88
// end else
20372: GO 20473
// if heikeSecondSquad then
20374: LD_EXP 49
20378: IFFALSE 20473
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20380: LD_ADDR_VAR 0 1
20384: PUSH
20385: LD_EXP 49
20389: PUSH
20390: LD_INT 1
20392: PPUSH
20393: LD_EXP 49
20397: PPUSH
20398: CALL_OW 12
20402: ARRAY
20403: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20404: LD_VAR 0 1
20408: PPUSH
20409: CALL_OW 258
20413: PUSH
20414: LD_INT 1
20416: DOUBLE
20417: EQUAL
20418: IFTRUE 20422
20420: GO 20437
20422: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
20423: LD_VAR 0 1
20427: PPUSH
20428: LD_STRING DArm-Grn-1
20430: PPUSH
20431: CALL_OW 88
20435: GO 20461
20437: LD_INT 2
20439: DOUBLE
20440: EQUAL
20441: IFTRUE 20445
20443: GO 20460
20445: POP
// Say ( random , DArf-Grn-1 ) ; end ;
20446: LD_VAR 0 1
20450: PPUSH
20451: LD_STRING DArf-Grn-1
20453: PPUSH
20454: CALL_OW 88
20458: GO 20461
20460: POP
// Say ( Heike , DH-Grn-2 ) ;
20461: LD_EXP 34
20465: PPUSH
20466: LD_STRING DH-Grn-2
20468: PPUSH
20469: CALL_OW 88
// end ; DialogueOff ;
20473: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
20477: LD_STRING MortarConstructed
20479: PPUSH
20480: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
20484: LD_STRING SelfPropelledMortar
20486: PPUSH
20487: CALL_OW 339
// mortarConstructed := true ;
20491: LD_ADDR_EXP 15
20495: PUSH
20496: LD_INT 1
20498: ST_TO_ADDR
// end ;
20499: PPOPN 1
20501: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
20502: LD_INT 2
20504: PPUSH
20505: LD_INT 8
20507: PPUSH
20508: CALL_OW 294
20512: IFFALSE 20655
20514: GO 20516
20516: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
20517: LD_INT 200
20519: PPUSH
20520: LD_INT 162
20522: PPUSH
20523: LD_INT 2
20525: PPUSH
20526: LD_INT 6
20528: NEG
20529: PPUSH
20530: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
20534: LD_INT 200
20536: PPUSH
20537: LD_INT 162
20539: PPUSH
20540: LD_INT 2
20542: PPUSH
20543: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
20547: LD_INT 200
20549: PPUSH
20550: LD_INT 162
20552: PPUSH
20553: CALL_OW 84
// if not IsOk ( Kurt ) then
20557: LD_EXP 45
20561: PPUSH
20562: CALL_OW 302
20566: NOT
20567: IFFALSE 20571
// exit ;
20569: GO 20655
// Say ( Kurt , DKs-Otpst-2-1 ) ;
20571: LD_EXP 45
20575: PPUSH
20576: LD_STRING DKs-Otpst-2-1
20578: PPUSH
20579: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
20583: LD_EXP 39
20587: PPUSH
20588: LD_STRING DK-Otpst-2-2
20590: PPUSH
20591: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
20595: LD_EXP 45
20599: PPUSH
20600: LD_STRING DKs-Otpst-2-3
20602: PPUSH
20603: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
20607: LD_EXP 45
20611: PPUSH
20612: LD_STRING DKs-Otpst-2-4
20614: PPUSH
20615: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
20619: LD_EXP 45
20623: PPUSH
20624: LD_STRING DKs-Otpst-2-5
20626: PPUSH
20627: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
20631: LD_EXP 38
20635: PPUSH
20636: LD_STRING DKam-Otpst-2-6
20638: PPUSH
20639: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
20643: LD_EXP 45
20647: PPUSH
20648: LD_STRING DKs-Otpst-2-7
20650: PPUSH
20651: CALL_OW 88
// end ;
20655: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
20656: LD_INT 8
20658: PPUSH
20659: LD_INT 22
20661: PUSH
20662: LD_INT 3
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 21
20671: PUSH
20672: LD_INT 3
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PPUSH
20683: CALL_OW 70
20687: NOT
20688: PUSH
20689: LD_EXP 3
20693: NOT
20694: AND
20695: IFFALSE 20943
20697: GO 20699
20699: DISABLE
20700: LD_INT 0
20702: PPUSH
// begin outpostDestroyed := true ;
20703: LD_ADDR_EXP 4
20707: PUSH
20708: LD_INT 1
20710: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
20711: LD_INT 22
20713: PUSH
20714: LD_INT 2
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 34
20723: PUSH
20724: LD_INT 92
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 92
20733: PUSH
20734: LD_INT 195
20736: PUSH
20737: LD_INT 164
20739: PUSH
20740: LD_INT 12
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: PPUSH
20754: CALL_OW 69
20758: NOT
20759: IFFALSE 20763
// exit ;
20761: GO 20943
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
20763: LD_EXP 35
20767: PPUSH
20768: CALL_OW 302
20772: NOT
20773: PUSH
20774: LD_EXP 39
20778: PPUSH
20779: CALL_OW 302
20783: NOT
20784: OR
20785: IFFALSE 20789
// exit ;
20787: GO 20943
// Say ( Givi , DG-Otpst-1-1 ) ;
20789: LD_EXP 35
20793: PPUSH
20794: LD_STRING DG-Otpst-1-1
20796: PPUSH
20797: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
20801: LD_EXP 39
20805: PPUSH
20806: LD_STRING DK-Otpst-1-2
20808: PPUSH
20809: CALL_OW 88
// if IsOk ( Markov ) then
20813: LD_EXP 41
20817: PPUSH
20818: CALL_OW 302
20822: IFFALSE 20850
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
20824: LD_EXP 41
20828: PPUSH
20829: LD_STRING DMar-Otpst-1-3
20831: PPUSH
20832: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
20836: LD_EXP 41
20840: PPUSH
20841: LD_STRING DMar-Otpst-1-4
20843: PPUSH
20844: CALL_OW 88
// end else
20848: GO 20931
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20850: LD_ADDR_VAR 0 1
20854: PUSH
20855: LD_EXP 49
20859: PUSH
20860: LD_INT 1
20862: PPUSH
20863: LD_EXP 49
20867: PPUSH
20868: CALL_OW 12
20872: ARRAY
20873: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20874: LD_VAR 0 1
20878: PPUSH
20879: CALL_OW 258
20883: PUSH
20884: LD_INT 1
20886: DOUBLE
20887: EQUAL
20888: IFTRUE 20892
20890: GO 20907
20892: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
20893: LD_VAR 0 1
20897: PPUSH
20898: LD_STRING DArm-Otpst-1-a-3
20900: PPUSH
20901: CALL_OW 88
20905: GO 20931
20907: LD_INT 2
20909: DOUBLE
20910: EQUAL
20911: IFTRUE 20915
20913: GO 20930
20915: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
20916: LD_VAR 0 1
20920: PPUSH
20921: LD_STRING DArf-Otpst-1-a-3
20923: PPUSH
20924: CALL_OW 88
20928: GO 20931
20930: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
20931: LD_EXP 35
20935: PPUSH
20936: LD_STRING DG-Otpst-1-5
20938: PPUSH
20939: CALL_OW 88
// end ;
20943: PPOPN 1
20945: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
20946: LD_EXP 39
20950: PPUSH
20951: CALL_OW 256
20955: PUSH
20956: LD_INT 10
20958: LESS
20959: IFFALSE 21073
20961: GO 20963
20963: DISABLE
// begin DialogueOn ;
20964: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
20968: LD_EXP 39
20972: PPUSH
20973: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
20977: LD_EXP 39
20981: PPUSH
20982: LD_STRING DK-Dead-1
20984: PPUSH
20985: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
20989: LD_EXP 34
20993: PPUSH
20994: LD_STRING DH-Dead-2
20996: PPUSH
20997: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
21001: LD_EXP 39
21005: PPUSH
21006: LD_STRING DK-Dead-3
21008: PPUSH
21009: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
21013: LD_EXP 34
21017: PPUSH
21018: LD_STRING DH-Dead-4
21020: PPUSH
21021: CALL_OW 88
// if IsOk ( Mike ) then
21025: LD_EXP 36
21029: PPUSH
21030: CALL_OW 302
21034: IFFALSE 21060
// begin Say ( Mike , DM-Dead-5 ) ;
21036: LD_EXP 36
21040: PPUSH
21041: LD_STRING DM-Dead-5
21043: PPUSH
21044: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
21048: LD_EXP 34
21052: PPUSH
21053: LD_STRING DH-Dead-6
21055: PPUSH
21056: CALL_OW 88
// end ; DialogueOff ;
21060: CALL_OW 7
// KillUnit ( Kaia ) ;
21064: LD_EXP 39
21068: PPUSH
21069: CALL_OW 66
// end ;
21073: END
// every 0 0$1 trigger tick >= 15 15$00 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
21074: LD_OWVAR 1
21078: PUSH
21079: LD_INT 31500
21081: GREATEREQUAL
21082: PUSH
21083: LD_EXP 5
21087: PUSH
21088: LD_INT 5
21090: GREATER
21091: OR
21092: PUSH
21093: LD_INT 22
21095: PUSH
21096: LD_INT 2
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 92
21105: PUSH
21106: LD_INT 103
21108: PUSH
21109: LD_INT 81
21111: PUSH
21112: LD_INT 20
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PPUSH
21125: CALL_OW 69
21129: OR
21130: IFFALSE 21570
21132: GO 21134
21134: DISABLE
21135: LD_INT 0
21137: PPUSH
21138: PPUSH
21139: PPUSH
// begin PrepareRolfSquad ;
21140: CALL 3531 0 0
// dep := HexInfo ( 86 , 54 ) ;
21144: LD_ADDR_VAR 0 3
21148: PUSH
21149: LD_INT 86
21151: PPUSH
21152: LD_INT 54
21154: PPUSH
21155: CALL_OW 428
21159: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
21160: LD_VAR 0 3
21164: PPUSH
21165: CALL_OW 274
21169: PPUSH
21170: LD_INT 1
21172: PPUSH
21173: LD_INT 300
21175: PPUSH
21176: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
21180: LD_VAR 0 3
21184: PPUSH
21185: CALL_OW 274
21189: PPUSH
21190: LD_INT 2
21192: PPUSH
21193: LD_INT 300
21195: PPUSH
21196: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
21200: LD_EXP 51
21204: PPUSH
21205: LD_INT 79
21207: PPUSH
21208: LD_INT 52
21210: PPUSH
21211: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
21215: LD_INT 35
21217: PPUSH
21218: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( rolfSquad , [ f_not , [ f_hastask ] ] ) , 79 , 52 ) ;
21222: LD_EXP 51
21226: PPUSH
21227: LD_INT 3
21229: PUSH
21230: LD_INT 60
21232: PUSH
21233: EMPTY
21234: LIST
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PPUSH
21240: CALL_OW 72
21244: PPUSH
21245: LD_INT 79
21247: PPUSH
21248: LD_INT 52
21250: PPUSH
21251: CALL_OW 114
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
21255: LD_INT 12
21257: PPUSH
21258: LD_INT 22
21260: PUSH
21261: LD_INT 3
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 21
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PPUSH
21282: CALL_OW 70
21286: NOT
21287: IFFALSE 21215
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
21289: LD_ADDR_VAR 0 2
21293: PUSH
21294: LD_INT 12
21296: PPUSH
21297: LD_INT 21
21299: PUSH
21300: LD_INT 3
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PPUSH
21307: CALL_OW 70
21311: ST_TO_ADDR
// for i in tmp do
21312: LD_ADDR_VAR 0 1
21316: PUSH
21317: LD_VAR 0 2
21321: PUSH
21322: FOR_IN
21323: IFFALSE 21339
// SetSide ( i , 8 ) ;
21325: LD_VAR 0 1
21329: PPUSH
21330: LD_INT 8
21332: PPUSH
21333: CALL_OW 235
21337: GO 21322
21339: POP
21340: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
21341: LD_INT 63
21343: PPUSH
21344: LD_INT 42
21346: PPUSH
21347: CALL_OW 428
21351: PPUSH
21352: LD_INT 320
21354: PPUSH
21355: CALL_OW 234
// wait ( 0 0$10 ) ;
21359: LD_INT 350
21361: PPUSH
21362: CALL_OW 67
// DialogueOn ;
21366: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
21370: LD_INT 8
21372: PPUSH
21373: LD_INT 2
21375: PPUSH
21376: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
21380: LD_INT 86
21382: PPUSH
21383: LD_INT 54
21385: PPUSH
21386: CALL_OW 428
21390: PPUSH
21391: LD_STRING antwerp
21393: PPUSH
21394: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
21398: LD_EXP 47
21402: PPUSH
21403: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
21407: LD_EXP 47
21411: PPUSH
21412: LD_STRING DRf-rast-1
21414: PPUSH
21415: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
21419: LD_EXP 34
21423: PPUSH
21424: LD_STRING DH-rast-2
21426: PPUSH
21427: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
21431: LD_EXP 47
21435: PPUSH
21436: LD_STRING DRf-rast-3
21438: PPUSH
21439: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
21443: LD_EXP 47
21447: PPUSH
21448: LD_STRING DRf-rast-4
21450: PPUSH
21451: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
21455: LD_EXP 47
21459: PPUSH
21460: LD_STRING DRf-rast-5
21462: PPUSH
21463: CALL_OW 94
// if IsOk ( Aviradze ) then
21467: LD_EXP 46
21471: PPUSH
21472: CALL_OW 302
21476: IFFALSE 21535
// begin CenterNowOnUnits ( Aviradze ) ;
21478: LD_EXP 46
21482: PPUSH
21483: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
21487: LD_EXP 46
21491: PPUSH
21492: LD_STRING DA-rast-6
21494: PPUSH
21495: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
21499: LD_EXP 34
21503: PPUSH
21504: LD_STRING DH-rast-7
21506: PPUSH
21507: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
21511: LD_EXP 35
21515: PPUSH
21516: LD_STRING DG-rast-8
21518: PPUSH
21519: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
21523: LD_EXP 35
21527: PPUSH
21528: LD_STRING DG-rast-9
21530: PPUSH
21531: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
21535: LD_EXP 34
21539: PPUSH
21540: LD_STRING DH-rast-10
21542: PPUSH
21543: CALL_OW 88
// DialogueOff ;
21547: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
21551: LD_STRING M2
21553: PPUSH
21554: CALL_OW 337
// bergkampfArrived := true ;
21558: LD_ADDR_EXP 3
21562: PUSH
21563: LD_INT 1
21565: ST_TO_ADDR
// PrepareRolfBase ;
21566: CALL 3862 0 0
// end ;
21570: PPOPN 3
21572: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
21573: LD_INT 12
21575: PPUSH
21576: LD_INT 22
21578: PUSH
21579: LD_INT 2
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PPUSH
21586: CALL_OW 70
21590: PUSH
21591: LD_EXP 47
21595: PPUSH
21596: CALL_OW 302
21600: AND
21601: PUSH
21602: LD_EXP 29
21606: AND
21607: IFFALSE 22167
21609: GO 21611
21611: DISABLE
21612: LD_INT 0
21614: PPUSH
// begin rolfScriptBase := false ;
21615: LD_ADDR_EXP 9
21619: PUSH
21620: LD_INT 0
21622: ST_TO_ADDR
// DialogueOn ;
21623: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
21627: LD_EXP 47
21631: PPUSH
21632: CALL_OW 87
// if rolfSquad >= 10 then
21636: LD_EXP 51
21640: PUSH
21641: LD_INT 10
21643: GREATEREQUAL
21644: IFFALSE 21823
// begin linkedWithRolf := 2 ;
21646: LD_ADDR_EXP 12
21650: PUSH
21651: LD_INT 2
21653: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
21654: LD_EXP 47
21658: PPUSH
21659: LD_STRING DRf-rast-11
21661: PPUSH
21662: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
21666: LD_EXP 34
21670: PPUSH
21671: LD_STRING DH-rast-12
21673: PPUSH
21674: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
21678: LD_EXP 47
21682: PPUSH
21683: LD_STRING DRf-rast-13
21685: PPUSH
21686: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
21690: LD_EXP 34
21694: PPUSH
21695: LD_STRING DH-rast-14
21697: PPUSH
21698: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
21702: LD_EXP 47
21706: PPUSH
21707: LD_STRING DRf-rast-15
21709: PPUSH
21710: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
21714: LD_EXP 34
21718: PPUSH
21719: LD_STRING DH-rast-16
21721: PPUSH
21722: CALL_OW 88
// if IsOk ( Mike ) then
21726: LD_EXP 36
21730: PPUSH
21731: CALL_OW 302
21735: IFFALSE 21809
// begin Say ( Mike , DM-rast-17 ) ;
21737: LD_EXP 36
21741: PPUSH
21742: LD_STRING DM-rast-17
21744: PPUSH
21745: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
21749: LD_EXP 34
21753: PPUSH
21754: LD_STRING DH-rast-18
21756: PPUSH
21757: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
21761: LD_EXP 36
21765: PPUSH
21766: LD_STRING DM-rast-19
21768: PPUSH
21769: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
21773: LD_EXP 34
21777: PPUSH
21778: LD_STRING DH-rast-20
21780: PPUSH
21781: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
21785: LD_EXP 36
21789: PPUSH
21790: LD_STRING DM-rast-21
21792: PPUSH
21793: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
21797: LD_EXP 34
21801: PPUSH
21802: LD_STRING DH-rast-22
21804: PPUSH
21805: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
21809: LD_EXP 34
21813: PPUSH
21814: LD_STRING DH-rast-23
21816: PPUSH
21817: CALL_OW 88
// end else
21821: GO 21973
// begin linkedWithRolf := 1 ;
21823: LD_ADDR_EXP 12
21827: PUSH
21828: LD_INT 1
21830: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
21831: LD_EXP 47
21835: PPUSH
21836: LD_STRING DRf-rast-a-11
21838: PPUSH
21839: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
21843: LD_EXP 34
21847: PPUSH
21848: LD_STRING DH-rast-a-12
21850: PPUSH
21851: CALL_OW 88
// if IsOk ( Kurt ) then
21855: LD_EXP 45
21859: PPUSH
21860: CALL_OW 302
21864: IFFALSE 21961
// begin Say ( Kurt , DKs-rast-a-13 ) ;
21866: LD_EXP 45
21870: PPUSH
21871: LD_STRING DKs-rast-a-13
21873: PPUSH
21874: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
21878: LD_EXP 47
21882: PPUSH
21883: LD_STRING DRf-rast-a-14
21885: PPUSH
21886: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
21890: LD_EXP 47
21894: PPUSH
21895: LD_STRING DRf-rast-a-15
21897: PPUSH
21898: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
21902: LD_EXP 45
21906: PPUSH
21907: LD_STRING DKs-rast-a-16
21909: PPUSH
21910: CALL_OW 88
// if IsOk ( Givi ) then
21914: LD_EXP 35
21918: PPUSH
21919: CALL_OW 302
21923: IFFALSE 21961
// begin Say ( Givi , DG-rast-a-17 ) ;
21925: LD_EXP 35
21929: PPUSH
21930: LD_STRING DG-rast-a-17
21932: PPUSH
21933: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
21937: LD_EXP 35
21941: PPUSH
21942: LD_STRING DG-rast-a-18
21944: PPUSH
21945: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
21949: LD_EXP 45
21953: PPUSH
21954: LD_STRING DKs-rast-a-19
21956: PPUSH
21957: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
21961: LD_EXP 34
21965: PPUSH
21966: LD_STRING DH-rast-a-20
21968: PPUSH
21969: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
21973: LD_EXP 47
21977: PPUSH
21978: LD_STRING DRf-rast-24
21980: PPUSH
21981: CALL_OW 88
// if IsOk ( Aviradze ) then
21985: LD_EXP 46
21989: PPUSH
21990: CALL_OW 302
21994: IFFALSE 22094
// begin Say ( Aviradze , DA-rast-25 ) ;
21996: LD_EXP 46
22000: PPUSH
22001: LD_STRING DA-rast-25
22003: PPUSH
22004: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
22008: LD_EXP 34
22012: PPUSH
22013: LD_STRING DH-rast-26
22015: PPUSH
22016: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
22020: LD_EXP 46
22024: PPUSH
22025: LD_STRING DA-rast-27
22027: PPUSH
22028: CALL_OW 88
// if IsOk ( Markov ) then
22032: LD_EXP 41
22036: PPUSH
22037: CALL_OW 302
22041: IFFALSE 22069
// begin Say ( Markov , DMar-rast-28 ) ;
22043: LD_EXP 41
22047: PPUSH
22048: LD_STRING DMar-rast-28
22050: PPUSH
22051: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
22055: LD_EXP 41
22059: PPUSH
22060: LD_STRING DMar-rast-29
22062: PPUSH
22063: CALL_OW 88
// end else
22067: GO 22092
// if IsOk ( Sophia ) then
22069: LD_EXP 40
22073: PPUSH
22074: CALL_OW 302
22078: IFFALSE 22092
// begin Say ( Sophia , DS-rast-28 ) ;
22080: LD_EXP 40
22084: PPUSH
22085: LD_STRING DS-rast-28
22087: PPUSH
22088: CALL_OW 88
// end ; end else
22092: GO 22117
// if IsOk ( Sophia ) then
22094: LD_EXP 40
22098: PPUSH
22099: CALL_OW 302
22103: IFFALSE 22117
// Say ( Sophia , DS-rast-29 ) ;
22105: LD_EXP 40
22109: PPUSH
22110: LD_STRING DS-rast-29
22112: PPUSH
22113: CALL_OW 88
// DialogueOff ;
22117: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
22121: LD_STRING M3
22123: PPUSH
22124: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
22128: LD_ADDR_VAR 0 1
22132: PUSH
22133: LD_INT 22
22135: PUSH
22136: LD_INT 8
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PPUSH
22143: CALL_OW 69
22147: PUSH
22148: FOR_IN
22149: IFFALSE 22165
// SetSide ( i , 2 ) ;
22151: LD_VAR 0 1
22155: PPUSH
22156: LD_INT 2
22158: PPUSH
22159: CALL_OW 235
22163: GO 22148
22165: POP
22166: POP
// end ;
22167: PPOPN 1
22169: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
22170: LD_EXP 23
22174: PUSH
22175: LD_EXP 12
22179: NOT
22180: AND
22181: PUSH
22182: LD_EXP 29
22186: AND
22187: IFFALSE 22278
22189: GO 22191
22191: DISABLE
22192: LD_INT 0
22194: PPUSH
// begin canRolfJoin := false ;
22195: LD_ADDR_EXP 29
22199: PUSH
22200: LD_INT 0
22202: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
22203: LD_STRING M3
22205: PPUSH
22206: CALL_OW 337
// for i in rolfSquad do
22210: LD_ADDR_VAR 0 1
22214: PUSH
22215: LD_EXP 51
22219: PUSH
22220: FOR_IN
22221: IFFALSE 22276
// begin ComExit ( i ) ;
22223: LD_VAR 0 1
22227: PPUSH
22228: CALL 67543 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
22232: LD_VAR 0 1
22236: PPUSH
22237: LD_INT 147
22239: PPUSH
22240: LD_INT 162
22242: PPUSH
22243: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
22247: LD_VAR 0 1
22251: PPUSH
22252: LD_INT 1050
22254: PPUSH
22255: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
22259: LD_VAR 0 1
22263: PPUSH
22264: LD_INT 103
22266: PPUSH
22267: LD_INT 162
22269: PPUSH
22270: CALL_OW 174
// end ;
22274: GO 22220
22276: POP
22277: POP
// end ;
22278: PPOPN 1
22280: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
22281: LD_EXP 3
22285: PUSH
22286: LD_EXP 47
22290: PPUSH
22291: CALL_OW 256
22295: PUSH
22296: LD_INT 400
22298: LESS
22299: AND
22300: PUSH
22301: LD_EXP 12
22305: NOT
22306: AND
22307: PUSH
22308: LD_EXP 29
22312: AND
22313: IFFALSE 22587
22315: GO 22317
22317: DISABLE
22318: LD_INT 0
22320: PPUSH
// begin DialogueOn ;
22321: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
22325: LD_EXP 47
22329: PPUSH
22330: LD_STRING DRf-rast-f-11
22332: PPUSH
22333: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
22337: LD_EXP 47
22341: PPUSH
22342: LD_STRING DRf-rast-f-12
22344: PPUSH
22345: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
22349: LD_EXP 47
22353: PPUSH
22354: LD_STRING DRf-rast-f-13
22356: PPUSH
22357: CALL_OW 94
// DialogueOff ;
22361: CALL_OW 7
// KillUnit ( Rolf ) ;
22365: LD_EXP 47
22369: PPUSH
22370: CALL_OW 66
// wait ( 0 0$1 ) ;
22374: LD_INT 35
22376: PPUSH
22377: CALL_OW 67
// if not IsOk ( Givi ) then
22381: LD_EXP 35
22385: PPUSH
22386: CALL_OW 302
22390: NOT
22391: IFFALSE 22395
// exit ;
22393: GO 22587
// DialogueOn ;
22395: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
22399: LD_EXP 35
22403: PPUSH
22404: LD_STRING DG-rast-f-14
22406: PPUSH
22407: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
22411: LD_EXP 35
22415: PPUSH
22416: LD_STRING DG-rast-f-15
22418: PPUSH
22419: CALL_OW 88
// if IsOk ( Kaia ) then
22423: LD_EXP 39
22427: PPUSH
22428: CALL_OW 302
22432: IFFALSE 22448
// Say ( Kaia , DK-rast-f-16 ) else
22434: LD_EXP 39
22438: PPUSH
22439: LD_STRING DK-rast-f-16
22441: PPUSH
22442: CALL_OW 88
22446: GO 22535
// if heikeSecondSquad then
22448: LD_EXP 49
22452: IFFALSE 22535
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
22454: LD_ADDR_VAR 0 1
22458: PUSH
22459: LD_EXP 49
22463: PUSH
22464: LD_INT 1
22466: PPUSH
22467: LD_EXP 49
22471: PPUSH
22472: CALL_OW 12
22476: ARRAY
22477: ST_TO_ADDR
// case GetSex ( random ) of 1 :
22478: LD_VAR 0 1
22482: PPUSH
22483: CALL_OW 258
22487: PUSH
22488: LD_INT 1
22490: DOUBLE
22491: EQUAL
22492: IFTRUE 22496
22494: GO 22511
22496: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
22497: LD_VAR 0 1
22501: PPUSH
22502: LD_STRING DArm-rast-f-a-16
22504: PPUSH
22505: CALL_OW 88
22509: GO 22535
22511: LD_INT 2
22513: DOUBLE
22514: EQUAL
22515: IFTRUE 22519
22517: GO 22534
22519: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
22520: LD_VAR 0 1
22524: PPUSH
22525: LD_STRING DArf-rast-f-a-16
22527: PPUSH
22528: CALL_OW 88
22532: GO 22535
22534: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
22535: LD_EXP 35
22539: PPUSH
22540: LD_STRING DG-rast-f-17
22542: PPUSH
22543: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
22547: LD_EXP 35
22551: PPUSH
22552: LD_STRING DG-rast-f-18
22554: PPUSH
22555: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
22559: LD_EXP 35
22563: PPUSH
22564: LD_STRING DG-rast-f-19
22566: PPUSH
22567: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
22571: LD_EXP 35
22575: PPUSH
22576: LD_STRING DG-rast-f-20
22578: PPUSH
22579: CALL_OW 88
// DialogueOff ;
22583: CALL_OW 7
// end ;
22587: PPOPN 1
22589: END
// every 0 0$1 trigger gameActive and SeeArea ( 2 , ruMainBase ) do
22590: LD_EXP 31
22594: PUSH
22595: LD_INT 2
22597: PPUSH
22598: LD_INT 10
22600: PPUSH
22601: CALL_OW 294
22605: AND
22606: IFFALSE 22679
22608: GO 22610
22610: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
22611: LD_EXP 35
22615: PPUSH
22616: LD_STRING DG-Len-1
22618: PPUSH
22619: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
22623: LD_EXP 45
22627: PPUSH
22628: LD_STRING DKs-Len-2
22630: PPUSH
22631: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
22635: LD_EXP 45
22639: PPUSH
22640: LD_STRING DKs-Len-3
22642: PPUSH
22643: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
22647: LD_EXP 34
22651: PPUSH
22652: LD_STRING DH-Len-4
22654: PPUSH
22655: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
22659: LD_EXP 39
22663: PPUSH
22664: LD_STRING DK-Len-5
22666: PPUSH
22667: CALL_OW 88
// leninSpotted := true ;
22671: LD_ADDR_EXP 14
22675: PUSH
22676: LD_INT 1
22678: ST_TO_ADDR
// end ;
22679: END
// every 0 0$1 trigger debug or ( bergkampfArrived and tick > [ 32 32$00 , 30 30$00 , 28 28$00 , 26 26$00 ] [ Difficulty ] ) do var i , tmp , inOmarBase , heikeNearbyOmar ;
22680: LD_EXP 1
22684: PUSH
22685: LD_EXP 3
22689: PUSH
22690: LD_OWVAR 1
22694: PUSH
22695: LD_INT 67200
22697: PUSH
22698: LD_INT 63000
22700: PUSH
22701: LD_INT 58800
22703: PUSH
22704: LD_INT 54600
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: PUSH
22713: LD_OWVAR 67
22717: ARRAY
22718: GREATER
22719: AND
22720: OR
22721: IFFALSE 23458
22723: GO 22725
22725: DISABLE
22726: LD_INT 0
22728: PPUSH
22729: PPUSH
22730: PPUSH
22731: PPUSH
// begin PrepareOmarSquad ;
22732: CALL 5144 0 0
// repeat wait ( 0 0$1 ) ;
22736: LD_INT 35
22738: PPUSH
22739: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
22743: LD_INT 14
22745: PPUSH
22746: LD_INT 22
22748: PUSH
22749: LD_INT 3
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 21
22761: PUSH
22762: LD_INT 1
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 59
22771: PUSH
22772: EMPTY
22773: LIST
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: LIST
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PPUSH
22784: CALL_OW 70
22788: NOT
22789: IFFALSE 22736
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
22791: LD_ADDR_VAR 0 2
22795: PUSH
22796: LD_INT 14
22798: PPUSH
22799: LD_INT 22
22801: PUSH
22802: LD_INT 2
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PPUSH
22809: CALL_OW 70
22813: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
22814: LD_ADDR_VAR 0 3
22818: PUSH
22819: LD_VAR 0 2
22823: PUSH
22824: LD_INT 0
22826: GREATER
22827: ST_TO_ADDR
// heikeNearbyOmar := IsInArea ( Heike , ruOmarBase ) ;
22828: LD_ADDR_VAR 0 4
22832: PUSH
22833: LD_EXP 34
22837: PPUSH
22838: LD_INT 14
22840: PPUSH
22841: CALL_OW 308
22845: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
22846: LD_VAR 0 2
22850: PPUSH
22851: LD_INT 21
22853: PUSH
22854: LD_INT 3
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PPUSH
22861: CALL_OW 72
22865: IFFALSE 22970
// begin if heikeNearbyOmar then
22867: LD_VAR 0 4
22871: IFFALSE 22887
// Say ( Omar , DOm-Base-1b ) else
22873: LD_EXP 44
22877: PPUSH
22878: LD_STRING DOm-Base-1b
22880: PPUSH
22881: CALL_OW 88
22885: GO 22899
// SayRadio ( Omar , DOm-Base-1br ) ;
22887: LD_EXP 44
22891: PPUSH
22892: LD_STRING DOm-Base-1br
22894: PPUSH
22895: CALL_OW 94
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
22899: LD_ADDR_VAR 0 1
22903: PUSH
22904: LD_VAR 0 2
22908: PPUSH
22909: LD_INT 21
22911: PUSH
22912: LD_INT 3
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PPUSH
22919: CALL_OW 72
22923: PUSH
22924: FOR_IN
22925: IFFALSE 22966
// begin if UnitsInside ( i ) then
22927: LD_VAR 0 1
22931: PPUSH
22932: CALL_OW 313
22936: IFFALSE 22952
// ComExitBuilding ( UnitsInside ( i ) ) ;
22938: LD_VAR 0 1
22942: PPUSH
22943: CALL_OW 313
22947: PPUSH
22948: CALL_OW 122
// SetSide ( i , 5 ) ;
22952: LD_VAR 0 1
22956: PPUSH
22957: LD_INT 5
22959: PPUSH
22960: CALL_OW 235
// end ;
22964: GO 22924
22966: POP
22967: POP
// end else
22968: GO 23063
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
22970: LD_VAR 0 2
22974: PPUSH
22975: LD_INT 21
22977: PUSH
22978: LD_INT 2
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PPUSH
22985: CALL_OW 72
22989: IFFALSE 23025
// begin if heikeNearbyOmar then
22991: LD_VAR 0 4
22995: IFFALSE 23011
// Say ( Omar , DOm-Base-1v ) else
22997: LD_EXP 44
23001: PPUSH
23002: LD_STRING DOm-Base-1v
23004: PPUSH
23005: CALL_OW 88
23009: GO 23023
// SayRadio ( Omar , DOm-Base-1vr ) end else
23011: LD_EXP 44
23015: PPUSH
23016: LD_STRING DOm-Base-1vr
23018: PPUSH
23019: CALL_OW 94
23023: GO 23063
// if inOmarBase then
23025: LD_VAR 0 3
23029: IFFALSE 23063
// begin if heikeNearbyOmar then
23031: LD_VAR 0 4
23035: IFFALSE 23051
// Say ( Omar , DOm-Base-1h ) else
23037: LD_EXP 44
23041: PPUSH
23042: LD_STRING DOm-Base-1h
23044: PPUSH
23045: CALL_OW 88
23049: GO 23063
// SayRadio ( Omar , DOm-Base-1hr ) end ;
23051: LD_EXP 44
23055: PPUSH
23056: LD_STRING DOm-Base-1hr
23058: PPUSH
23059: CALL_OW 94
// for i in omarSquad do
23063: LD_ADDR_VAR 0 1
23067: PUSH
23068: LD_EXP 52
23072: PUSH
23073: FOR_IN
23074: IFFALSE 23105
// if GetLives ( i ) < 750 then
23076: LD_VAR 0 1
23080: PPUSH
23081: CALL_OW 256
23085: PUSH
23086: LD_INT 750
23088: LESS
23089: IFFALSE 23103
// SetLives ( i , 1000 ) ;
23091: LD_VAR 0 1
23095: PPUSH
23096: LD_INT 1000
23098: PPUSH
23099: CALL_OW 234
23103: GO 23073
23105: POP
23106: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
23107: LD_ADDR_VAR 0 1
23111: PUSH
23112: LD_INT 14
23114: PPUSH
23115: LD_INT 21
23117: PUSH
23118: LD_INT 3
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PPUSH
23125: CALL_OW 70
23129: PUSH
23130: FOR_IN
23131: IFFALSE 23147
// SetSide ( i , 5 ) ;
23133: LD_VAR 0 1
23137: PPUSH
23138: LD_INT 5
23140: PPUSH
23141: CALL_OW 235
23145: GO 23130
23147: POP
23148: POP
// wait ( 0 0$3 ) ;
23149: LD_INT 105
23151: PPUSH
23152: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
23156: LD_INT 5
23158: PPUSH
23159: LD_INT 2
23161: PPUSH
23162: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
23166: LD_EXP 44
23170: PPUSH
23171: CALL_OW 87
// DialogueOn ;
23175: CALL_OW 6
// if heikeNearbyOmar then
23179: LD_VAR 0 4
23183: IFFALSE 23241
// begin Say ( Omar , DOm-Veh-1a ) ;
23185: LD_EXP 44
23189: PPUSH
23190: LD_STRING DOm-Veh-1a
23192: PPUSH
23193: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
23197: LD_EXP 44
23201: PPUSH
23202: LD_STRING DOm-Veh-2a
23204: PPUSH
23205: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
23209: LD_EXP 44
23213: PPUSH
23214: LD_STRING DOm-Veh-3a
23216: PPUSH
23217: CALL_OW 88
// if mortarConstructed then
23221: LD_EXP 15
23225: IFFALSE 23239
// Say ( Omar , DOm-Veh-4a ) ;
23227: LD_EXP 44
23231: PPUSH
23232: LD_STRING DOm-Veh-4a
23234: PPUSH
23235: CALL_OW 88
// end else
23239: GO 23295
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
23241: LD_EXP 44
23245: PPUSH
23246: LD_STRING DOm-Veh-1
23248: PPUSH
23249: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
23253: LD_EXP 44
23257: PPUSH
23258: LD_STRING DOm-Veh-2
23260: PPUSH
23261: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
23265: LD_EXP 44
23269: PPUSH
23270: LD_STRING DOm-Veh-3
23272: PPUSH
23273: CALL_OW 94
// if mortarConstructed then
23277: LD_EXP 15
23281: IFFALSE 23295
// SayRadio ( Omar , DOm-Veh-4 ) ;
23283: LD_EXP 44
23287: PPUSH
23288: LD_STRING DOm-Veh-4
23290: PPUSH
23291: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
23295: LD_EXP 34
23299: PPUSH
23300: LD_STRING DH-Veh-5
23302: PPUSH
23303: CALL_OW 88
// if IsOk ( Kurt ) then
23307: LD_EXP 45
23311: PPUSH
23312: CALL_OW 302
23316: IFFALSE 23366
// begin Say ( Kurt , DKs-Veh-6 ) ;
23318: LD_EXP 45
23322: PPUSH
23323: LD_STRING DKs-Veh-6
23325: PPUSH
23326: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
23330: LD_EXP 45
23334: PPUSH
23335: LD_STRING DKs-Veh-7
23337: PPUSH
23338: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
23342: LD_EXP 35
23346: PPUSH
23347: LD_STRING DG-Veh-8
23349: PPUSH
23350: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
23354: LD_EXP 36
23358: PPUSH
23359: LD_STRING DM-Veh-9
23361: PPUSH
23362: CALL_OW 88
// end ; DialogueOff ;
23366: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23370: LD_STRING M4
23372: PPUSH
23373: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
23377: LD_EXP 44
23381: PPUSH
23382: LD_INT 341
23384: PPUSH
23385: LD_INT 232
23387: PPUSH
23388: CALL_OW 428
23392: PPUSH
23393: CALL_OW 120
// omarArrived := true ;
23397: LD_ADDR_EXP 6
23401: PUSH
23402: LD_INT 1
23404: ST_TO_ADDR
// omarScriptBase := true ;
23405: LD_ADDR_EXP 10
23409: PUSH
23410: LD_INT 1
23412: ST_TO_ADDR
// omarWantVehicles := true ;
23413: LD_ADDR_EXP 18
23417: PUSH
23418: LD_INT 1
23420: ST_TO_ADDR
// if debug then
23421: LD_EXP 1
23425: IFFALSE 23458
// begin wait ( 0 0$25 ) ;
23427: LD_INT 875
23429: PPUSH
23430: CALL_OW 67
// omarScriptBase := false ;
23434: LD_ADDR_EXP 10
23438: PUSH
23439: LD_INT 0
23441: ST_TO_ADDR
// omarWantVehicles := false ;
23442: LD_ADDR_EXP 18
23446: PUSH
23447: LD_INT 0
23449: ST_TO_ADDR
// omarAttack := true ;
23450: LD_ADDR_EXP 23
23454: PUSH
23455: LD_INT 1
23457: ST_TO_ADDR
// end ; end ;
23458: PPOPN 4
23460: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
23461: LD_INT 10
23463: PPUSH
23464: LD_INT 22
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PPUSH
23474: CALL_OW 70
23478: PUSH
23479: LD_EXP 6
23483: AND
23484: PUSH
23485: LD_EXP 44
23489: PPUSH
23490: CALL_OW 302
23494: AND
23495: PUSH
23496: LD_EXP 23
23500: NOT
23501: AND
23502: IFFALSE 23519
23504: GO 23506
23506: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
23507: LD_EXP 44
23511: PPUSH
23512: LD_STRING DOm-Lenin
23514: PPUSH
23515: CALL_OW 94
23519: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
23520: LD_EXP 47
23524: PPUSH
23525: CALL_OW 302
23529: PUSH
23530: LD_EXP 12
23534: AND
23535: PUSH
23536: LD_EXP 6
23540: AND
23541: IFFALSE 23645
23543: GO 23545
23545: DISABLE
// begin wait ( 1 1$00 ) ;
23546: LD_INT 2100
23548: PPUSH
23549: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
23553: LD_EXP 47
23557: PPUSH
23558: CALL_OW 87
// DialogueOn ;
23562: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
23566: LD_EXP 47
23570: PPUSH
23571: LD_STRING DRf-Veh-10
23573: PPUSH
23574: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
23578: LD_EXP 47
23582: PPUSH
23583: LD_STRING DRf-Veh-11
23585: PPUSH
23586: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
23590: LD_EXP 34
23594: PPUSH
23595: LD_STRING DH-Veh-12
23597: PPUSH
23598: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
23602: LD_EXP 34
23606: PPUSH
23607: LD_STRING DH-Veh-13
23609: PPUSH
23610: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
23614: LD_EXP 47
23618: PPUSH
23619: LD_STRING DRf-Veh-14
23621: PPUSH
23622: CALL_OW 88
// DialogueOff ;
23626: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
23630: LD_STRING M5
23632: PPUSH
23633: CALL_OW 337
// rolfWantVehicles := true ;
23637: LD_ADDR_EXP 17
23641: PUSH
23642: LD_INT 1
23644: ST_TO_ADDR
// end ;
23645: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
23646: LD_EXP 18
23650: IFFALSE 24413
23652: GO 23654
23654: DISABLE
23655: LD_INT 0
23657: PPUSH
23658: PPUSH
23659: PPUSH
23660: PPUSH
23661: PPUSH
23662: PPUSH
// begin wait ( 0 0$3 ) ;
23663: LD_INT 105
23665: PPUSH
23666: CALL_OW 67
// Hint ( OmarVehicles ) ;
23670: LD_STRING OmarVehicles
23672: PPUSH
23673: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
23677: LD_INT 16
23679: PPUSH
23680: LD_INT 1
23682: PPUSH
23683: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
23687: LD_INT 35
23689: PPUSH
23690: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
23694: LD_ADDR_EXP 20
23698: PUSH
23699: LD_EXP 20
23703: PUSH
23704: LD_INT 35
23706: MINUS
23707: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
23708: LD_EXP 20
23712: PUSH
23713: LD_INT 0
23715: LESSEQUAL
23716: IFFALSE 23816
// begin display_strings := [ ] ;
23718: LD_ADDR_OWVAR 47
23722: PUSH
23723: EMPTY
23724: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
23725: LD_STRING M4a
23727: PPUSH
23728: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23732: LD_INT 16
23734: PPUSH
23735: LD_INT 0
23737: PPUSH
23738: CALL_OW 424
// DialogueOn ;
23742: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
23746: LD_EXP 44
23750: PPUSH
23751: LD_STRING DOm-Veh-b-15
23753: PPUSH
23754: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
23758: LD_EXP 34
23762: PPUSH
23763: LD_STRING DH-Veh-b-16
23765: PPUSH
23766: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
23770: LD_EXP 44
23774: PPUSH
23775: LD_STRING DOm-Veh-b-17
23777: PPUSH
23778: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
23782: LD_EXP 39
23786: PPUSH
23787: LD_STRING DK-Veh-b-18
23789: PPUSH
23790: CALL_OW 88
// DialogueOff ;
23794: CALL_OW 7
// omarAttack := true ;
23798: LD_ADDR_EXP 23
23802: PUSH
23803: LD_INT 1
23805: ST_TO_ADDR
// omarScriptBase := false ;
23806: LD_ADDR_EXP 10
23810: PUSH
23811: LD_INT 0
23813: ST_TO_ADDR
// exit ;
23814: GO 24413
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
23816: LD_EXP 21
23820: PUSH
23821: LD_INT 16
23823: PPUSH
23824: LD_INT 22
23826: PUSH
23827: LD_INT 2
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 21
23836: PUSH
23837: LD_INT 2
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 3
23846: PUSH
23847: LD_INT 2
23849: PUSH
23850: LD_INT 34
23852: PUSH
23853: LD_INT 32
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 34
23862: PUSH
23863: LD_INT 88
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 34
23872: PUSH
23873: LD_INT 31
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 33
23892: PUSH
23893: LD_INT 1
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 58
23902: PUSH
23903: EMPTY
23904: LIST
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: PPUSH
23913: CALL_OW 70
23917: LESSEQUAL
23918: IFFALSE 23687
// omarWaitingForVehiclesTimer := 0 0$00 ;
23920: LD_ADDR_EXP 20
23924: PUSH
23925: LD_INT 0
23927: ST_TO_ADDR
// display_strings := [ ] ;
23928: LD_ADDR_OWVAR 47
23932: PUSH
23933: EMPTY
23934: ST_TO_ADDR
// DialogueOn ;
23935: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
23939: LD_EXP 44
23943: PPUSH
23944: LD_STRING DOm-Veh-a-15
23946: PPUSH
23947: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
23951: LD_EXP 39
23955: PPUSH
23956: LD_STRING DK-Veh-a-16
23958: PPUSH
23959: CALL_OW 88
// DialogueOff ;
23963: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
23967: LD_STRING M4a
23969: PPUSH
23970: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23974: LD_INT 16
23976: PPUSH
23977: LD_INT 0
23979: PPUSH
23980: CALL_OW 424
// omarHasVehicles := true ;
23984: LD_ADDR_EXP 22
23988: PUSH
23989: LD_INT 1
23991: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23992: LD_INT 35
23994: PPUSH
23995: CALL_OW 67
// until rolfWaitingForVehiclesTimer = 0 0$00 ;
23999: LD_EXP 19
24003: PUSH
24004: LD_INT 0
24006: EQUAL
24007: IFFALSE 23992
// wait ( 1 1$00 ) ;
24009: LD_INT 2100
24011: PPUSH
24012: CALL_OW 67
// omarAttack := true ;
24016: LD_ADDR_EXP 23
24020: PUSH
24021: LD_INT 1
24023: ST_TO_ADDR
// omarScriptBase := false ;
24024: LD_ADDR_EXP 10
24028: PUSH
24029: LD_INT 0
24031: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
24032: LD_ADDR_VAR 0 2
24036: PUSH
24037: LD_INT 16
24039: PPUSH
24040: LD_INT 22
24042: PUSH
24043: LD_INT 2
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 21
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 33
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 58
24072: PUSH
24073: EMPTY
24074: LIST
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: PPUSH
24082: CALL_OW 70
24086: ST_TO_ADDR
// for i in tmp do
24087: LD_ADDR_VAR 0 1
24091: PUSH
24092: LD_VAR 0 2
24096: PUSH
24097: FOR_IN
24098: IFFALSE 24126
// begin SetFuel ( i , 100 ) ;
24100: LD_VAR 0 1
24104: PPUSH
24105: LD_INT 100
24107: PPUSH
24108: CALL_OW 240
// SetSide ( i , 5 ) ;
24112: LD_VAR 0 1
24116: PPUSH
24117: LD_INT 5
24119: PPUSH
24120: CALL_OW 235
// end ;
24124: GO 24097
24126: POP
24127: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
24128: LD_ADDR_VAR 0 3
24132: PUSH
24133: LD_EXP 52
24137: PPUSH
24138: LD_INT 25
24140: PUSH
24141: LD_INT 2
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PPUSH
24148: CALL_OW 72
24152: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
24153: LD_ADDR_VAR 0 4
24157: PUSH
24158: LD_EXP 52
24162: PPUSH
24163: LD_INT 3
24165: PUSH
24166: LD_INT 55
24168: PUSH
24169: EMPTY
24170: LIST
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 25
24178: PUSH
24179: LD_INT 3
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PPUSH
24190: CALL_OW 72
24194: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
24195: LD_ADDR_VAR 0 5
24199: PUSH
24200: LD_INT 324
24202: PPUSH
24203: LD_INT 234
24205: PPUSH
24206: CALL_OW 428
24210: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
24211: LD_ADDR_VAR 0 6
24215: PUSH
24216: LD_INT 334
24218: PPUSH
24219: LD_INT 241
24221: PPUSH
24222: CALL_OW 428
24226: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
24227: LD_VAR 0 6
24231: PPUSH
24232: CALL_OW 313
24236: PPUSH
24237: CALL_OW 122
// if eng then
24241: LD_VAR 0 3
24245: IFFALSE 24353
// begin if eng + mech <= tmp then
24247: LD_VAR 0 3
24251: PUSH
24252: LD_VAR 0 4
24256: PLUS
24257: PUSH
24258: LD_VAR 0 2
24262: LESSEQUAL
24263: IFFALSE 24318
// begin ComEnterUnit ( eng , workshop ) ;
24265: LD_VAR 0 3
24269: PPUSH
24270: LD_VAR 0 5
24274: PPUSH
24275: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
24279: LD_VAR 0 3
24283: PPUSH
24284: LD_INT 3
24286: PPUSH
24287: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24291: LD_VAR 0 3
24295: PPUSH
24296: CALL_OW 182
// mech := mech union eng ;
24300: LD_ADDR_VAR 0 4
24304: PUSH
24305: LD_VAR 0 4
24309: PUSH
24310: LD_VAR 0 3
24314: UNION
24315: ST_TO_ADDR
// end else
24316: GO 24353
// begin ComEnterUnit ( eng , armoury ) ;
24318: LD_VAR 0 3
24322: PPUSH
24323: LD_VAR 0 6
24327: PPUSH
24328: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
24332: LD_VAR 0 3
24336: PPUSH
24337: LD_INT 1
24339: PPUSH
24340: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24344: LD_VAR 0 3
24348: PPUSH
24349: CALL_OW 182
// end ; end ; for i := 1 to tmp do
24353: LD_ADDR_VAR 0 1
24357: PUSH
24358: DOUBLE
24359: LD_INT 1
24361: DEC
24362: ST_TO_ADDR
24363: LD_VAR 0 2
24367: PUSH
24368: FOR_TO
24369: IFFALSE 24411
// if i <= mech then
24371: LD_VAR 0 1
24375: PUSH
24376: LD_VAR 0 4
24380: LESSEQUAL
24381: IFFALSE 24409
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
24383: LD_VAR 0 4
24387: PUSH
24388: LD_VAR 0 1
24392: ARRAY
24393: PPUSH
24394: LD_VAR 0 2
24398: PUSH
24399: LD_VAR 0 1
24403: ARRAY
24404: PPUSH
24405: CALL_OW 180
24409: GO 24368
24411: POP
24412: POP
// end ;
24413: PPOPN 6
24415: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i , hasBadWeapons ;
24416: LD_EXP 47
24420: PPUSH
24421: CALL_OW 302
24425: PUSH
24426: LD_EXP 17
24430: AND
24431: IFFALSE 25055
24433: GO 24435
24435: DISABLE
24436: LD_INT 0
24438: PPUSH
24439: PPUSH
// begin repeat wait ( 0 0$1 ) ;
24440: LD_INT 35
24442: PPUSH
24443: CALL_OW 67
// hasBadWeapons := false ;
24447: LD_ADDR_VAR 0 2
24451: PUSH
24452: LD_INT 0
24454: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
24455: LD_ADDR_EXP 19
24459: PUSH
24460: LD_EXP 19
24464: PUSH
24465: LD_INT 35
24467: MINUS
24468: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 then
24469: LD_EXP 19
24473: PUSH
24474: LD_INT 0
24476: LESSEQUAL
24477: IFFALSE 24739
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
24479: LD_ADDR_EXP 19
24483: PUSH
24484: LD_INT 0
24486: ST_TO_ADDR
// display_strings := [ ] ;
24487: LD_ADDR_OWVAR 47
24491: PUSH
24492: EMPTY
24493: ST_TO_ADDR
// DialogueOn ;
24494: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
24498: LD_EXP 47
24502: PPUSH
24503: LD_STRING DRf-Veh-b-19
24505: PPUSH
24506: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
24510: LD_EXP 47
24514: PPUSH
24515: LD_STRING DRf-Veh-b-20
24517: PPUSH
24518: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
24522: LD_EXP 34
24526: PPUSH
24527: LD_STRING DH-Veh-b-21
24529: PPUSH
24530: CALL_OW 88
// if IsOk ( Givi ) then
24534: LD_EXP 35
24538: PPUSH
24539: CALL_OW 302
24543: IFFALSE 24581
// begin Say ( Givi , DG-Veh-b-22 ) ;
24545: LD_EXP 35
24549: PPUSH
24550: LD_STRING DG-Veh-b-22
24552: PPUSH
24553: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
24557: LD_EXP 34
24561: PPUSH
24562: LD_STRING DH-Veh-b-23
24564: PPUSH
24565: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
24569: LD_EXP 35
24573: PPUSH
24574: LD_STRING DG-Veh-b-24
24576: PPUSH
24577: CALL_OW 88
// end ; DialogueOff ;
24581: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24585: LD_STRING M5a
24587: PPUSH
24588: CALL_OW 337
// for i in rolfSquad do
24592: LD_ADDR_VAR 0 1
24596: PUSH
24597: LD_EXP 51
24601: PUSH
24602: FOR_IN
24603: IFFALSE 24720
// begin SetSide ( i , 8 ) ;
24605: LD_VAR 0 1
24609: PPUSH
24610: LD_INT 8
24612: PPUSH
24613: CALL_OW 235
// if IsDriver ( i ) then
24617: LD_VAR 0 1
24621: PPUSH
24622: CALL 64749 0 1
24626: IFFALSE 24698
// begin if not GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24628: LD_VAR 0 1
24632: PPUSH
24633: CALL_OW 310
24637: PPUSH
24638: CALL_OW 264
24642: PUSH
24643: LD_INT 51
24645: PUSH
24646: LD_INT 52
24648: PUSH
24649: LD_INT 32
24651: PUSH
24652: LD_INT 88
24654: PUSH
24655: LD_INT 31
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: IN
24665: NOT
24666: IFFALSE 24687
// SetSide ( IsInUnit ( i ) , 8 ) else
24668: LD_VAR 0 1
24672: PPUSH
24673: CALL_OW 310
24677: PPUSH
24678: LD_INT 8
24680: PPUSH
24681: CALL_OW 235
24685: GO 24696
// ComExitVehicle ( i ) ;
24687: LD_VAR 0 1
24691: PPUSH
24692: CALL_OW 121
// end else
24696: GO 24718
// if IsInUnit ( i ) then
24698: LD_VAR 0 1
24702: PPUSH
24703: CALL_OW 310
24707: IFFALSE 24718
// ComExitBuilding ( i ) ;
24709: LD_VAR 0 1
24713: PPUSH
24714: CALL_OW 122
// end ;
24718: GO 24602
24720: POP
24721: POP
// wait ( 0 0$10 ) ;
24722: LD_INT 350
24724: PPUSH
24725: CALL_OW 67
// rolfAttack := true ;
24729: LD_ADDR_EXP 32
24733: PUSH
24734: LD_INT 1
24736: ST_TO_ADDR
// exit ;
24737: GO 25055
// end ; if IsDead ( Rolf ) then
24739: LD_EXP 47
24743: PPUSH
24744: CALL_OW 301
24748: IFFALSE 24759
// begin ChangeMissionObjectives ( M5a ) ;
24750: LD_STRING M5a
24752: PPUSH
24753: CALL_OW 337
// exit ;
24757: GO 25055
// end ; if Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) then
24759: LD_EXP 51
24763: PPUSH
24764: LD_INT 55
24766: PUSH
24767: EMPTY
24768: LIST
24769: PPUSH
24770: CALL_OW 72
24774: PPUSH
24775: CALL 31545 0 1
24779: PUSH
24780: LD_EXP 51
24784: PPUSH
24785: CALL 31545 0 1
24789: EQUAL
24790: IFFALSE 24907
// begin for i in UnitFilter ( rolfSquad , [ f_driving ] ) do
24792: LD_ADDR_VAR 0 1
24796: PUSH
24797: LD_EXP 51
24801: PPUSH
24802: LD_INT 55
24804: PUSH
24805: EMPTY
24806: LIST
24807: PPUSH
24808: CALL_OW 72
24812: PUSH
24813: FOR_IN
24814: IFFALSE 24874
// if GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24816: LD_VAR 0 1
24820: PPUSH
24821: CALL_OW 310
24825: PPUSH
24826: CALL_OW 264
24830: PUSH
24831: LD_INT 51
24833: PUSH
24834: LD_INT 52
24836: PUSH
24837: LD_INT 32
24839: PUSH
24840: LD_INT 88
24842: PUSH
24843: LD_INT 31
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: IN
24853: IFFALSE 24872
// begin hasBadWeapons := true ;
24855: LD_ADDR_VAR 0 2
24859: PUSH
24860: LD_INT 1
24862: ST_TO_ADDR
// Query ( QBadWeapon ) ;
24863: LD_STRING QBadWeapon
24865: PPUSH
24866: CALL_OW 97
// break ;
24870: GO 24874
// end ;
24872: GO 24813
24874: POP
24875: POP
// if not hasBadWeapons then
24876: LD_VAR 0 2
24880: NOT
24881: IFFALSE 24907
// if Query ( QRolf ) = 1 then
24883: LD_STRING QRolf
24885: PPUSH
24886: CALL_OW 97
24890: PUSH
24891: LD_INT 1
24893: EQUAL
24894: IFFALSE 24900
// break else
24896: GO 24911
24898: GO 24907
// wait ( 0 0$15 ) ;
24900: LD_INT 525
24902: PPUSH
24903: CALL_OW 67
// end ; until false ;
24907: LD_INT 0
24909: IFFALSE 24440
// rolfWaitingForVehiclesTimer := 0 0$00 ;
24911: LD_ADDR_EXP 19
24915: PUSH
24916: LD_INT 0
24918: ST_TO_ADDR
// display_strings := [ ] ;
24919: LD_ADDR_OWVAR 47
24923: PUSH
24924: EMPTY
24925: ST_TO_ADDR
// DialogueOn ;
24926: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
24930: LD_EXP 47
24934: PPUSH
24935: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
24939: LD_EXP 47
24943: PPUSH
24944: LD_STRING DRf-Veh-a-17
24946: PPUSH
24947: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
24951: LD_EXP 34
24955: PPUSH
24956: LD_STRING DH-08-Veh-a-18
24958: PPUSH
24959: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
24963: LD_EXP 47
24967: PPUSH
24968: LD_STRING DRf-Veh-a-19
24970: PPUSH
24971: CALL_OW 88
// DialogueOff ;
24975: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24979: LD_STRING M5a
24981: PPUSH
24982: CALL_OW 337
// rolfHasVehicles := true ;
24986: LD_ADDR_EXP 16
24990: PUSH
24991: LD_INT 1
24993: ST_TO_ADDR
// for i in rolfSquad do
24994: LD_ADDR_VAR 0 1
24998: PUSH
24999: LD_EXP 51
25003: PUSH
25004: FOR_IN
25005: IFFALSE 25038
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
25007: LD_VAR 0 1
25011: PPUSH
25012: CALL_OW 310
25016: PPUSH
25017: LD_INT 8
25019: PPUSH
25020: CALL_OW 235
// SetSide ( i , 8 ) ;
25024: LD_VAR 0 1
25028: PPUSH
25029: LD_INT 8
25031: PPUSH
25032: CALL_OW 235
// end ;
25036: GO 25004
25038: POP
25039: POP
// wait ( 0 0$10 ) ;
25040: LD_INT 350
25042: PPUSH
25043: CALL_OW 67
// rolfAttack := true ;
25047: LD_ADDR_EXP 32
25051: PUSH
25052: LD_INT 1
25054: ST_TO_ADDR
// end ;
25055: PPOPN 2
25057: END
// every 0 0$1 trigger rolfAttack and omarAttack do
25058: LD_EXP 32
25062: PUSH
25063: LD_EXP 23
25067: AND
25068: IFFALSE 25080
25070: GO 25072
25072: DISABLE
// ChangeMissionObjectives ( M6a ) ;
25073: LD_STRING M6a
25075: PPUSH
25076: CALL_OW 337
25080: END
// every 0 0$1 trigger leninSpotted do
25081: LD_EXP 14
25085: IFFALSE 25173
25087: GO 25089
25089: DISABLE
// begin wait ( 0 0$10 ) ;
25090: LD_INT 350
25092: PPUSH
25093: CALL_OW 67
// DialogueOn ;
25097: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
25101: LD_EXP 46
25105: PPUSH
25106: LD_STRING DA-Transmission-1
25108: PPUSH
25109: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
25113: LD_EXP 53
25117: PPUSH
25118: LD_STRING DMzw-Transmission-2
25120: PPUSH
25121: CALL_OW 94
// if gaidarKilled then
25125: LD_EXP 7
25129: IFFALSE 25145
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
25131: LD_EXP 53
25135: PPUSH
25136: LD_STRING DMzw-Transmission-3
25138: PPUSH
25139: CALL_OW 94
25143: GO 25157
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
25145: LD_EXP 53
25149: PPUSH
25150: LD_STRING DMzw-Transmission-a-3
25152: PPUSH
25153: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
25157: LD_EXP 34
25161: PPUSH
25162: LD_STRING DH-Transmission-4
25164: PPUSH
25165: CALL_OW 88
// DialogueOff ;
25169: CALL_OW 7
// end ;
25173: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
25174: LD_INT 22
25176: PUSH
25177: LD_INT 3
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 25
25186: PUSH
25187: LD_INT 9
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 101
25196: PUSH
25197: LD_INT 2
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: LIST
25208: PPUSH
25209: CALL_OW 69
25213: PUSH
25214: LD_EXP 34
25218: PPUSH
25219: CALL_OW 302
25223: AND
25224: IFFALSE 25304
25226: GO 25228
25228: DISABLE
// begin wait ( 0 0$3 ) ;
25229: LD_INT 105
25231: PPUSH
25232: CALL_OW 67
// DialogueOn ;
25236: CALL_OW 6
// CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
25240: LD_INT 22
25242: PUSH
25243: LD_INT 3
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 25
25252: PUSH
25253: LD_INT 9
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 101
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: LIST
25274: PPUSH
25275: CALL_OW 69
25279: PUSH
25280: LD_INT 1
25282: ARRAY
25283: PPUSH
25284: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
25288: LD_EXP 34
25292: PPUSH
25293: LD_STRING DH-Rubazooka-1
25295: PPUSH
25296: CALL_OW 88
// DialogueOff ;
25300: CALL_OW 7
// end ;
25304: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
25305: LD_INT 19
25307: PPUSH
25308: LD_INT 22
25310: PUSH
25311: LD_INT 3
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PPUSH
25318: CALL_OW 70
25322: PUSH
25323: LD_EXP 28
25327: AND
25328: IFFALSE 25387
25330: GO 25332
25332: DISABLE
// begin DialogueOn ;
25333: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25337: LD_INT 19
25339: PPUSH
25340: LD_INT 22
25342: PUSH
25343: LD_INT 3
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PPUSH
25350: CALL_OW 70
25354: PPUSH
25355: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
25359: LD_EXP 34
25363: PPUSH
25364: LD_STRING DH-Ruattfirst-1
25366: PPUSH
25367: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
25371: LD_EXP 34
25375: PPUSH
25376: LD_STRING DH-Ruattfirst-2
25378: PPUSH
25379: CALL_OW 88
// DialogueOff ;
25383: CALL_OW 7
// end ;
25387: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
25388: LD_INT 19
25390: PPUSH
25391: LD_INT 22
25393: PUSH
25394: LD_INT 3
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PPUSH
25401: CALL_OW 70
25405: PUSH
25406: LD_EXP 28
25410: NOT
25411: AND
25412: IFFALSE 25459
25414: GO 25416
25416: DISABLE
// begin DialogueOn ;
25417: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25421: LD_INT 19
25423: PPUSH
25424: LD_INT 22
25426: PUSH
25427: LD_INT 3
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PPUSH
25434: CALL_OW 70
25438: PPUSH
25439: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
25443: LD_EXP 34
25447: PPUSH
25448: LD_STRING DH-Ruattnext-1
25450: PPUSH
25451: CALL_OW 88
// DialogueOff ;
25455: CALL_OW 7
// end ;
25459: END
// every 0 0$3 trigger IsDead ( Morozov ) and IsOk ( Omar ) do
25460: LD_EXP 53
25464: PPUSH
25465: CALL_OW 301
25469: PUSH
25470: LD_EXP 44
25474: PPUSH
25475: CALL_OW 302
25479: AND
25480: IFFALSE 25497
25482: GO 25484
25484: DISABLE
// SayRadio ( Omar , DOm-Morozov ) ;
25485: LD_EXP 44
25489: PPUSH
25490: LD_STRING DOm-Morozov
25492: PPUSH
25493: CALL_OW 94
25497: END
// every 0 0$1 trigger gameActive and GetResourceType ( GetBase ( arDepot ) , mat_oil ) <= 30 do
25498: LD_EXP 31
25502: PUSH
25503: LD_EXP 48
25507: PPUSH
25508: CALL_OW 274
25512: PPUSH
25513: LD_INT 2
25515: PPUSH
25516: CALL_OW 275
25520: PUSH
25521: LD_INT 30
25523: LESSEQUAL
25524: AND
25525: IFFALSE 25615
25527: GO 25529
25529: DISABLE
// begin wait ( 0 0$10 ) ;
25530: LD_INT 350
25532: PPUSH
25533: CALL_OW 67
// DialogueOn ;
25537: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
25541: LD_EXP 34
25545: PPUSH
25546: LD_STRING DH-Fuel-1
25548: PPUSH
25549: CALL_OW 88
// if IsOk ( Givi ) then
25553: LD_EXP 35
25557: PPUSH
25558: CALL_OW 302
25562: IFFALSE 25600
// begin Say ( Givi , DG-Fuel-2 ) ;
25564: LD_EXP 35
25568: PPUSH
25569: LD_STRING DG-Fuel-2
25571: PPUSH
25572: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
25576: LD_EXP 35
25580: PPUSH
25581: LD_STRING DG-Fuel-3
25583: PPUSH
25584: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
25588: LD_EXP 35
25592: PPUSH
25593: LD_STRING DG-Fuel-4
25595: PPUSH
25596: CALL_OW 88
// end ; DialogueOff ;
25600: CALL_OW 7
// Query ( QOil ) ;
25604: LD_STRING QOil
25606: PPUSH
25607: CALL_OW 97
// GoForOil ( ) ;
25611: CALL 8886 0 0
// end ;
25615: END
// every 0 0$1 trigger leninSpotted and omarAttack and rolfAttack do
25616: LD_EXP 14
25620: PUSH
25621: LD_EXP 23
25625: AND
25626: PUSH
25627: LD_EXP 32
25631: AND
25632: IFFALSE 25973
25634: GO 25636
25636: DISABLE
// begin if IsDead ( Morozov ) then
25637: LD_EXP 53
25641: PPUSH
25642: CALL_OW 301
25646: IFFALSE 25657
// wait ( 1 1$45 ) else
25648: LD_INT 3675
25650: PPUSH
25651: CALL_OW 67
25655: GO 25685
// wait ( [ 9 9$30 , 8 8$00 , 7 7$40 , 6 6$30 ] [ Difficulty ] ) ;
25657: LD_INT 19950
25659: PUSH
25660: LD_INT 16800
25662: PUSH
25663: LD_INT 16100
25665: PUSH
25666: LD_INT 13650
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: PUSH
25675: LD_OWVAR 67
25679: ARRAY
25680: PPUSH
25681: CALL_OW 67
// DialogueOn ;
25685: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
25689: LD_EXP 42
25693: PPUSH
25694: LD_STRING DShar-End-1
25696: PPUSH
25697: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
25701: LD_EXP 34
25705: PPUSH
25706: LD_STRING DH-End-2
25708: PPUSH
25709: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
25713: LD_EXP 42
25717: PPUSH
25718: LD_STRING DShar-End-3
25720: PPUSH
25721: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
25725: LD_EXP 34
25729: PPUSH
25730: LD_STRING DH-End-4
25732: PPUSH
25733: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
25737: LD_EXP 42
25741: PPUSH
25742: LD_STRING DShar-End-5
25744: PPUSH
25745: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
25749: LD_EXP 42
25753: PPUSH
25754: LD_STRING DShar-End-6
25756: PPUSH
25757: CALL_OW 94
// dwait ( 0 0$2 ) ;
25761: LD_INT 70
25763: PPUSH
25764: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
25768: LD_EXP 34
25772: PPUSH
25773: LD_STRING DH-End-7
25775: PPUSH
25776: CALL_OW 88
// DialogueOff ;
25780: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
25784: LD_STRING M6
25786: PPUSH
25787: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
25791: LD_INT 17
25793: PPUSH
25794: LD_INT 1
25796: PPUSH
25797: CALL_OW 424
// escapeAllowed := true ;
25801: LD_ADDR_EXP 24
25805: PUSH
25806: LD_INT 1
25808: ST_TO_ADDR
// wait ( 0 0$2 ) ;
25809: LD_INT 70
25811: PPUSH
25812: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
25816: LD_EXP 45
25820: PPUSH
25821: LD_STRING DKs-End-8
25823: PPUSH
25824: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
25828: LD_EXP 39
25832: PPUSH
25833: LD_STRING DK-End-10
25835: PPUSH
25836: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
25840: LD_EXP 45
25844: PPUSH
25845: LD_STRING DKs-End-9
25847: PPUSH
25848: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
25852: LD_EXP 41
25856: PPUSH
25857: LD_STRING DMar-End-11
25859: PPUSH
25860: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
25864: LD_STRING 05_DrugsTested
25866: PPUSH
25867: LD_EXP 1
25871: PPUSH
25872: CALL_OW 30
25876: IFFALSE 25890
// Say ( Mike , DM-End-12 ) ;
25878: LD_EXP 36
25882: PPUSH
25883: LD_STRING DM-End-12
25885: PPUSH
25886: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
25890: LD_EXP 43
25894: PPUSH
25895: LD_STRING DO-End-13
25897: PPUSH
25898: CALL_OW 88
// if IsOk ( Sophia ) then
25902: LD_EXP 40
25906: PPUSH
25907: CALL_OW 302
25911: IFFALSE 25937
// begin Say ( Sophia , DS-End-15 ) ;
25913: LD_EXP 40
25917: PPUSH
25918: LD_STRING DS-End-15
25920: PPUSH
25921: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
25925: LD_EXP 39
25929: PPUSH
25930: LD_STRING DK-End-16
25932: PPUSH
25933: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
25937: LD_EXP 35
25941: PPUSH
25942: LD_STRING DG-End-17
25944: PPUSH
25945: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
25949: LD_EXP 35
25953: PPUSH
25954: LD_STRING DG-End-18
25956: PPUSH
25957: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
25961: LD_EXP 35
25965: PPUSH
25966: LD_STRING DG-End-19
25968: PPUSH
25969: CALL_OW 88
// end ;
25973: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
25974: LD_EXP 24
25978: IFFALSE 26117
25980: GO 25982
25982: DISABLE
25983: LD_INT 0
25985: PPUSH
25986: PPUSH
// begin repeat wait ( 0 0$1 ) ;
25987: LD_INT 35
25989: PPUSH
25990: CALL_OW 67
// display_strings := [ #X106-2 , escapeTimer ] ;
25994: LD_ADDR_OWVAR 47
25998: PUSH
25999: LD_STRING #X106-2
26001: PUSH
26002: LD_EXP 25
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
26011: LD_ADDR_EXP 25
26015: PUSH
26016: LD_EXP 25
26020: PUSH
26021: LD_INT 35
26023: MINUS
26024: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
26025: LD_ADDR_VAR 0 2
26029: PUSH
26030: LD_INT 17
26032: PPUSH
26033: LD_INT 22
26035: PUSH
26036: LD_INT 2
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 21
26045: PUSH
26046: LD_INT 1
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 23
26055: PUSH
26056: LD_INT 2
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: LIST
26067: PPUSH
26068: CALL_OW 71
26072: ST_TO_ADDR
// if not outsiders then
26073: LD_VAR 0 2
26077: NOT
26078: IFFALSE 26094
// begin escapeAllowed := false ;
26080: LD_ADDR_EXP 24
26084: PUSH
26085: LD_INT 0
26087: ST_TO_ADDR
// MissionWin ;
26088: CALL 26120 0 0
// exit ;
26092: GO 26117
// end ; if escapeTimer <= 0 0$00 then
26094: LD_EXP 25
26098: PUSH
26099: LD_INT 0
26101: LESSEQUAL
26102: IFFALSE 26113
// begin YouLost ( TimeOut ) ;
26104: LD_STRING TimeOut
26106: PPUSH
26107: CALL_OW 104
// exit ;
26111: GO 26117
// end ; until false ;
26113: LD_INT 0
26115: IFFALSE 25987
// end ;
26117: PPOPN 2
26119: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
26120: LD_INT 0
26122: PPUSH
26123: PPUSH
26124: PPUSH
26125: PPUSH
26126: PPUSH
// if tick <= 55 55$00 then
26127: LD_OWVAR 1
26131: PUSH
26132: LD_INT 115500
26134: LESSEQUAL
26135: IFFALSE 26144
// SetAchievement ( ACH_HSPEED_6 ) ;
26137: LD_STRING ACH_HSPEED_6
26139: PPUSH
26140: CALL_OW 543
// Say ( Heike , DH-End-20 ) ;
26144: LD_EXP 34
26148: PPUSH
26149: LD_STRING DH-End-20
26151: PPUSH
26152: CALL_OW 88
// if rolfDied then
26156: LD_EXP 13
26160: IFFALSE 26175
// AddMedal ( med1 , - 1 ) else
26162: LD_STRING med1
26164: PPUSH
26165: LD_INT 1
26167: NEG
26168: PPUSH
26169: CALL_OW 101
26173: GO 26205
// if not canRolfJoin then
26175: LD_EXP 29
26179: NOT
26180: IFFALSE 26195
// AddMedal ( med1 , - 2 ) else
26182: LD_STRING med1
26184: PPUSH
26185: LD_INT 2
26187: NEG
26188: PPUSH
26189: CALL_OW 101
26193: GO 26205
// AddMedal ( med1 , 1 ) ;
26195: LD_STRING med1
26197: PPUSH
26198: LD_INT 1
26200: PPUSH
26201: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
26205: LD_EXP 22
26209: PUSH
26210: LD_EXP 16
26214: AND
26215: IFFALSE 26229
// AddMedal ( med2 , 1 ) else
26217: LD_STRING med2
26219: PPUSH
26220: LD_INT 1
26222: PPUSH
26223: CALL_OW 101
26227: GO 26278
// if omarHasVehicles then
26229: LD_EXP 22
26233: IFFALSE 26248
// AddMedal ( med2 , - 1 ) else
26235: LD_STRING med2
26237: PPUSH
26238: LD_INT 1
26240: NEG
26241: PPUSH
26242: CALL_OW 101
26246: GO 26278
// if rolfHasVehicles then
26248: LD_EXP 16
26252: IFFALSE 26267
// AddMedal ( med2 , - 2 ) else
26254: LD_STRING med2
26256: PPUSH
26257: LD_INT 2
26259: NEG
26260: PPUSH
26261: CALL_OW 101
26265: GO 26278
// AddMedal ( med2 , - 3 ) ;
26267: LD_STRING med2
26269: PPUSH
26270: LD_INT 3
26272: NEG
26273: PPUSH
26274: CALL_OW 101
// if ruLoseCounter >= [ 20 , 30 , 40 , 50 ] [ Difficulty ] and heikeLoseCounter = 0 then
26278: LD_EXP 5
26282: PUSH
26283: LD_INT 20
26285: PUSH
26286: LD_INT 30
26288: PUSH
26289: LD_INT 40
26291: PUSH
26292: LD_INT 50
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: PUSH
26301: LD_OWVAR 67
26305: ARRAY
26306: GREATEREQUAL
26307: PUSH
26308: LD_EXP 26
26312: PUSH
26313: LD_INT 0
26315: EQUAL
26316: AND
26317: IFFALSE 26331
// AddMedal ( med3 , 1 ) else
26319: LD_STRING med3
26321: PPUSH
26322: LD_INT 1
26324: PPUSH
26325: CALL_OW 101
26329: GO 26361
// if heikeLoseCounter then
26331: LD_EXP 26
26335: IFFALSE 26350
// AddMedal ( med3 , - 2 ) else
26337: LD_STRING med3
26339: PPUSH
26340: LD_INT 2
26342: NEG
26343: PPUSH
26344: CALL_OW 101
26348: GO 26361
// AddMedal ( med3 , - 1 ) ;
26350: LD_STRING med3
26352: PPUSH
26353: LD_INT 1
26355: NEG
26356: PPUSH
26357: CALL_OW 101
// GiveMedals ( MAIN ) ;
26361: LD_STRING MAIN
26363: PPUSH
26364: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
26368: LD_INT 22
26370: PUSH
26371: LD_INT 2
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 23
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 21
26390: PUSH
26391: LD_INT 1
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: LIST
26402: PPUSH
26403: CALL_OW 69
26407: PPUSH
26408: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
26412: LD_EXP 34
26416: PPUSH
26417: LD_STRING 06_Heike
26419: PPUSH
26420: CALL_OW 38
// if Aviradze then
26424: LD_EXP 46
26428: IFFALSE 26442
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
26430: LD_EXP 46
26434: PPUSH
26435: LD_STRING 06_Aviradze
26437: PPUSH
26438: CALL_OW 38
// if Ibrahim then
26442: LD_EXP 37
26446: IFFALSE 26460
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
26448: LD_EXP 37
26452: PPUSH
26453: LD_STRING 06_Ibrahim
26455: PPUSH
26456: CALL_OW 38
// if Kamil then
26460: LD_EXP 38
26464: IFFALSE 26478
// SaveCharacters ( Kamil , 06_Kamil ) ;
26466: LD_EXP 38
26470: PPUSH
26471: LD_STRING 06_Kamil
26473: PPUSH
26474: CALL_OW 38
// if Sophia then
26478: LD_EXP 40
26482: IFFALSE 26496
// SaveCharacters ( Sophia , 06_Sophia ) ;
26484: LD_EXP 40
26488: PPUSH
26489: LD_STRING 06_Sophia
26491: PPUSH
26492: CALL_OW 38
// if Kaia then
26496: LD_EXP 39
26500: IFFALSE 26514
// SaveCharacters ( Kaia , 06_Kaia ) ;
26502: LD_EXP 39
26506: PPUSH
26507: LD_STRING 06_Kaia
26509: PPUSH
26510: CALL_OW 38
// if Givi then
26514: LD_EXP 35
26518: IFFALSE 26532
// SaveCharacters ( Givi , 06_Givi ) ;
26520: LD_EXP 35
26524: PPUSH
26525: LD_STRING 06_Givi
26527: PPUSH
26528: CALL_OW 38
// if Olaf then
26532: LD_EXP 43
26536: IFFALSE 26550
// SaveCharacters ( Olaf , 06_Olaf ) ;
26538: LD_EXP 43
26542: PPUSH
26543: LD_STRING 06_Olaf
26545: PPUSH
26546: CALL_OW 38
// if Mike then
26550: LD_EXP 36
26554: IFFALSE 26568
// SaveCharacters ( Mike , 06_Mike ) ;
26556: LD_EXP 36
26560: PPUSH
26561: LD_STRING 06_Mike
26563: PPUSH
26564: CALL_OW 38
// if Markov then
26568: LD_EXP 41
26572: IFFALSE 26586
// SaveCharacters ( Markov , 06_Markov ) ;
26574: LD_EXP 41
26578: PPUSH
26579: LD_STRING 06_Markov
26581: PPUSH
26582: CALL_OW 38
// if Kurt then
26586: LD_EXP 45
26590: IFFALSE 26604
// SaveCharacters ( Kurt , 06_Kurt ) ;
26592: LD_EXP 45
26596: PPUSH
26597: LD_STRING 06_Kurt
26599: PPUSH
26600: CALL_OW 38
// if heikeSecondSquad then
26604: LD_EXP 49
26608: IFFALSE 26622
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
26610: LD_EXP 49
26614: PPUSH
26615: LD_STRING 06_others
26617: PPUSH
26618: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
26622: LD_ADDR_VAR 0 3
26626: PUSH
26627: LD_INT 22
26629: PUSH
26630: LD_INT 2
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 23
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PPUSH
26651: CALL_OW 69
26655: ST_TO_ADDR
// if tmp then
26656: LD_VAR 0 3
26660: IFFALSE 26674
// SaveCharacters ( tmp , 06_apes ) ;
26662: LD_VAR 0 3
26666: PPUSH
26667: LD_STRING 06_apes
26669: PPUSH
26670: CALL_OW 38
// if Rolf then
26674: LD_EXP 47
26678: IFFALSE 26729
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
26680: LD_EXP 47
26684: PPUSH
26685: LD_STRING 06_Rolf
26687: PPUSH
26688: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
26692: LD_STRING enableBioCharacter(BIO_ROLF)
26694: PPUSH
26695: CALL_OW 559
// if rolfSquad diff Rolf then
26699: LD_EXP 51
26703: PUSH
26704: LD_EXP 47
26708: DIFF
26709: IFFALSE 26729
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
26711: LD_EXP 51
26715: PUSH
26716: LD_EXP 47
26720: DIFF
26721: PPUSH
26722: LD_STRING 06_RolfSquad
26724: PPUSH
26725: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
26729: LD_ADDR_VAR 0 3
26733: PUSH
26734: LD_INT 17
26736: PPUSH
26737: LD_INT 21
26739: PUSH
26740: LD_INT 2
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PPUSH
26747: CALL_OW 70
26751: ST_TO_ADDR
// if tmp then
26752: LD_VAR 0 3
26756: IFFALSE 27050
// begin tmp2 := [ ] ;
26758: LD_ADDR_VAR 0 4
26762: PUSH
26763: EMPTY
26764: ST_TO_ADDR
// for i in tmp do
26765: LD_ADDR_VAR 0 2
26769: PUSH
26770: LD_VAR 0 3
26774: PUSH
26775: FOR_IN
26776: IFFALSE 27036
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
26778: LD_VAR 0 2
26782: PPUSH
26783: CALL_OW 264
26787: PUSH
26788: LD_INT 32
26790: PUSH
26791: LD_INT 12
26793: PUSH
26794: LD_INT 51
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: LIST
26801: IN
26802: IFFALSE 26939
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
26804: LD_ADDR_VAR 0 5
26808: PUSH
26809: LD_VAR 0 2
26813: PPUSH
26814: LD_INT 1
26816: PPUSH
26817: CALL_OW 289
26821: PUSH
26822: LD_VAR 0 2
26826: PPUSH
26827: LD_INT 2
26829: PPUSH
26830: CALL_OW 289
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
26839: LD_ADDR_VAR 0 4
26843: PUSH
26844: LD_VAR 0 4
26848: PPUSH
26849: LD_VAR 0 4
26853: PUSH
26854: LD_INT 1
26856: PLUS
26857: PPUSH
26858: LD_VAR 0 2
26862: PPUSH
26863: CALL_OW 265
26867: PUSH
26868: LD_VAR 0 2
26872: PPUSH
26873: CALL_OW 262
26877: PUSH
26878: LD_VAR 0 2
26882: PPUSH
26883: CALL_OW 263
26887: PUSH
26888: LD_VAR 0 2
26892: PPUSH
26893: CALL_OW 264
26897: PUSH
26898: LD_VAR 0 2
26902: PPUSH
26903: CALL_OW 248
26907: PUSH
26908: LD_VAR 0 2
26912: PPUSH
26913: CALL_OW 256
26917: PUSH
26918: LD_VAR 0 5
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: PPUSH
26932: CALL_OW 1
26936: ST_TO_ADDR
// end else
26937: GO 27034
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
26939: LD_ADDR_VAR 0 4
26943: PUSH
26944: LD_VAR 0 4
26948: PPUSH
26949: LD_VAR 0 4
26953: PUSH
26954: LD_INT 1
26956: PLUS
26957: PPUSH
26958: LD_VAR 0 2
26962: PPUSH
26963: CALL_OW 265
26967: PUSH
26968: LD_VAR 0 2
26972: PPUSH
26973: CALL_OW 262
26977: PUSH
26978: LD_VAR 0 2
26982: PPUSH
26983: CALL_OW 263
26987: PUSH
26988: LD_VAR 0 2
26992: PPUSH
26993: CALL_OW 264
26997: PUSH
26998: LD_VAR 0 2
27002: PPUSH
27003: CALL_OW 248
27007: PUSH
27008: LD_VAR 0 2
27012: PPUSH
27013: CALL_OW 256
27017: PUSH
27018: EMPTY
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: PPUSH
27029: CALL_OW 1
27033: ST_TO_ADDR
27034: GO 26775
27036: POP
27037: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
27038: LD_VAR 0 4
27042: PPUSH
27043: LD_STRING 06_Vehicles
27045: PPUSH
27046: CALL_OW 39
// end ; YouWin ;
27050: CALL_OW 103
// end ; end_of_file
27054: LD_VAR 0 1
27058: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
27059: LD_INT 0
27061: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
27062: LD_VAR 0 1
27066: PPUSH
27067: LD_VAR 0 2
27071: PPUSH
27072: CALL 87760 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
27076: LD_VAR 0 1
27080: PPUSH
27081: CALL_OW 255
27085: PUSH
27086: LD_INT 2
27088: EQUAL
27089: PUSH
27090: LD_OWVAR 52
27094: AND
27095: PUSH
27096: LD_VAR 0 1
27100: PPUSH
27101: CALL_OW 263
27105: PUSH
27106: LD_INT 1
27108: EQUAL
27109: AND
27110: IFFALSE 27165
// begin driver := IsDrivenBy ( vehicle ) ;
27112: LD_ADDR_VAR 0 3
27116: PUSH
27117: LD_VAR 0 1
27121: PPUSH
27122: CALL_OW 311
27126: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
27127: LD_VAR 0 1
27131: PPUSH
27132: LD_INT 211
27134: PPUSH
27135: LD_INT 101
27137: PPUSH
27138: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27142: LD_VAR 0 3
27146: PPUSH
27147: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27151: LD_VAR 0 3
27155: PPUSH
27156: LD_VAR 0 2
27160: PPUSH
27161: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
27165: LD_VAR 0 1
27169: PPUSH
27170: CALL_OW 255
27174: PUSH
27175: LD_INT 3
27177: EQUAL
27178: IFFALSE 27209
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
27180: LD_ADDR_EXP 60
27184: PUSH
27185: LD_EXP 60
27189: PPUSH
27190: LD_EXP 60
27194: PUSH
27195: LD_INT 1
27197: PLUS
27198: PPUSH
27199: LD_VAR 0 1
27203: PPUSH
27204: CALL_OW 1
27208: ST_TO_ADDR
// end ;
27209: PPOPN 3
27211: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
27212: LD_VAR 0 1
27216: PPUSH
27217: CALL_OW 255
27221: PUSH
27222: LD_INT 8
27224: EQUAL
27225: PUSH
27226: LD_VAR 0 1
27230: PPUSH
27231: CALL_OW 266
27235: PUSH
27236: LD_INT 4
27238: EQUAL
27239: AND
27240: IFFALSE 27251
// ComUpgrade ( b ) ;
27242: LD_VAR 0 1
27246: PPUSH
27247: CALL_OW 146
// end ;
27251: PPOPN 1
27253: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
27254: LD_VAR 0 1
27258: PPUSH
27259: CALL 87640 0 1
// if un = Heike then
27263: LD_VAR 0 1
27267: PUSH
27268: LD_EXP 34
27272: EQUAL
27273: IFFALSE 27282
// YouLost ( Heike ) ;
27275: LD_STRING Heike
27277: PPUSH
27278: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
27282: LD_VAR 0 1
27286: PUSH
27287: LD_INT 22
27289: PUSH
27290: LD_INT 2
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 21
27299: PUSH
27300: LD_INT 1
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 23
27309: PUSH
27310: LD_INT 2
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: LIST
27321: PPUSH
27322: CALL_OW 69
27326: IN
27327: IFFALSE 27343
// heikeLoseCounter := heikeLoseCounter + 1 ;
27329: LD_ADDR_EXP 26
27333: PUSH
27334: LD_EXP 26
27338: PUSH
27339: LD_INT 1
27341: PLUS
27342: ST_TO_ADDR
// if un = arDepot then
27343: LD_VAR 0 1
27347: PUSH
27348: LD_EXP 48
27352: EQUAL
27353: IFFALSE 27362
// YouLost ( Base ) ;
27355: LD_STRING Base
27357: PPUSH
27358: CALL_OW 104
// if un = Rolf then
27362: LD_VAR 0 1
27366: PUSH
27367: LD_EXP 47
27371: EQUAL
27372: IFFALSE 27382
// rolfDied := true ;
27374: LD_ADDR_EXP 13
27378: PUSH
27379: LD_INT 1
27381: ST_TO_ADDR
// if un in rolfSquad then
27382: LD_VAR 0 1
27386: PUSH
27387: LD_EXP 51
27391: IN
27392: IFFALSE 27410
// rolfSquad := rolfSquad diff un ;
27394: LD_ADDR_EXP 51
27398: PUSH
27399: LD_EXP 51
27403: PUSH
27404: LD_VAR 0 1
27408: DIFF
27409: ST_TO_ADDR
// if un in omarSquad then
27410: LD_VAR 0 1
27414: PUSH
27415: LD_EXP 52
27419: IN
27420: IFFALSE 27438
// omarSquad := omarSquad diff un ;
27422: LD_ADDR_EXP 52
27426: PUSH
27427: LD_EXP 52
27431: PUSH
27432: LD_VAR 0 1
27436: DIFF
27437: ST_TO_ADDR
// if GetSide ( un ) = 3 then
27438: LD_VAR 0 1
27442: PPUSH
27443: CALL_OW 255
27447: PUSH
27448: LD_INT 3
27450: EQUAL
27451: IFFALSE 27467
// ruLoseCounter := ruLoseCounter + 1 ;
27453: LD_ADDR_EXP 5
27457: PUSH
27458: LD_EXP 5
27462: PUSH
27463: LD_INT 1
27465: PLUS
27466: ST_TO_ADDR
// if un in ruAttackers then
27467: LD_VAR 0 1
27471: PUSH
27472: LD_EXP 61
27476: IN
27477: IFFALSE 27495
// ruAttackers := ruAttackers diff un ;
27479: LD_ADDR_EXP 61
27483: PUSH
27484: LD_EXP 61
27488: PUSH
27489: LD_VAR 0 1
27493: DIFF
27494: ST_TO_ADDR
// end ;
27495: PPOPN 1
27497: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) in [ 5 , 8 ] and GetLives ( unit ) < 1000 then
27498: LD_VAR 0 2
27502: PPUSH
27503: CALL_OW 255
27507: PUSH
27508: LD_INT 5
27510: PUSH
27511: LD_INT 8
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: IN
27518: PUSH
27519: LD_VAR 0 2
27523: PPUSH
27524: CALL_OW 256
27528: PUSH
27529: LD_INT 1000
27531: LESS
27532: AND
27533: IFFALSE 27547
// SetLives ( unit , 1000 ) ;
27535: LD_VAR 0 2
27539: PPUSH
27540: LD_INT 1000
27542: PPUSH
27543: CALL_OW 234
// end ;
27547: PPOPN 2
27549: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
27550: LD_INT 0
27552: PPUSH
27553: PPUSH
27554: PPUSH
27555: PPUSH
// begin if GetSide ( vehicle ) = 8 and rolfAttack then
27556: LD_VAR 0 2
27560: PPUSH
27561: CALL_OW 255
27565: PUSH
27566: LD_INT 8
27568: EQUAL
27569: PUSH
27570: LD_EXP 32
27574: AND
27575: IFFALSE 27592
// ComMoveXY ( un , 221 , 161 ) ;
27577: LD_VAR 0 1
27581: PPUSH
27582: LD_INT 221
27584: PPUSH
27585: LD_INT 161
27587: PPUSH
27588: CALL_OW 111
// if GetSide ( vehicle ) = 5 and omarAttack then
27592: LD_VAR 0 2
27596: PPUSH
27597: CALL_OW 255
27601: PUSH
27602: LD_INT 5
27604: EQUAL
27605: PUSH
27606: LD_EXP 23
27610: AND
27611: IFFALSE 27720
// begin ComMoveXY ( un , 333 , 233 ) ;
27613: LD_VAR 0 1
27617: PPUSH
27618: LD_INT 333
27620: PPUSH
27621: LD_INT 233
27623: PPUSH
27624: CALL_OW 111
// if not HexInfo ( 334 , 241 ) or not GetBType ( HexInfo ( 334 , 241 ) ) = b_armoury then
27628: LD_INT 334
27630: PPUSH
27631: LD_INT 241
27633: PPUSH
27634: CALL_OW 428
27638: NOT
27639: PUSH
27640: LD_INT 334
27642: PPUSH
27643: LD_INT 241
27645: PPUSH
27646: CALL_OW 428
27650: PPUSH
27651: CALL_OW 266
27655: PUSH
27656: LD_INT 4
27658: EQUAL
27659: NOT
27660: OR
27661: IFFALSE 27665
// exit ;
27663: GO 28245
// AddComEnterUnit ( un , HexInfo ( 334 , 241 ) ) ;
27665: LD_VAR 0 1
27669: PPUSH
27670: LD_INT 334
27672: PPUSH
27673: LD_INT 241
27675: PPUSH
27676: CALL_OW 428
27680: PPUSH
27681: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
27685: LD_VAR 0 1
27689: PPUSH
27690: LD_INT 1
27692: PPUSH
27693: CALL_OW 183
// AddComExitBuilding ( un ) ;
27697: LD_VAR 0 1
27701: PPUSH
27702: CALL_OW 182
// AddComMoveUnit ( un , Omar ) ;
27706: LD_VAR 0 1
27710: PPUSH
27711: LD_EXP 44
27715: PPUSH
27716: CALL_OW 172
// end ; if GetSide ( un ) = 3 and not un in ruAttackers then
27720: LD_VAR 0 1
27724: PPUSH
27725: CALL_OW 255
27729: PUSH
27730: LD_INT 3
27732: EQUAL
27733: PUSH
27734: LD_VAR 0 1
27738: PUSH
27739: LD_EXP 61
27743: IN
27744: NOT
27745: AND
27746: IFFALSE 28245
// begin if not IsInArea ( un , ruMainBase ) then
27748: LD_VAR 0 1
27752: PPUSH
27753: LD_INT 10
27755: PPUSH
27756: CALL_OW 308
27760: NOT
27761: IFFALSE 27778
// ComMoveXY ( un , 62 , 98 ) ;
27763: LD_VAR 0 1
27767: PPUSH
27768: LD_INT 62
27770: PPUSH
27771: LD_INT 98
27773: PPUSH
27774: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27778: LD_INT 35
27780: PPUSH
27781: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
27785: LD_VAR 0 1
27789: PPUSH
27790: CALL_OW 302
27794: NOT
27795: PUSH
27796: LD_VAR 0 1
27800: PPUSH
27801: LD_INT 10
27803: PPUSH
27804: CALL_OW 308
27808: OR
27809: IFFALSE 27778
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
27811: LD_ADDR_EXP 59
27815: PUSH
27816: LD_EXP 59
27820: PPUSH
27821: LD_EXP 59
27825: PUSH
27826: LD_INT 1
27828: PLUS
27829: PPUSH
27830: LD_VAR 0 1
27834: PPUSH
27835: CALL_OW 1
27839: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
27840: LD_ADDR_VAR 0 8
27844: PUSH
27845: LD_INT 72
27847: PUSH
27848: LD_INT 12
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: ST_TO_ADDR
// if tmp then
27855: LD_VAR 0 8
27859: IFFALSE 27974
// for i in tmp do
27861: LD_ADDR_VAR 0 5
27865: PUSH
27866: LD_VAR 0 8
27870: PUSH
27871: FOR_IN
27872: IFFALSE 27972
// if UnitsInside ( i ) < 6 then
27874: LD_VAR 0 5
27878: PPUSH
27879: CALL_OW 313
27883: PUSH
27884: LD_INT 6
27886: LESS
27887: IFFALSE 27970
// begin AddComEnterUnit ( un , i ) ;
27889: LD_VAR 0 1
27893: PPUSH
27894: LD_VAR 0 5
27898: PPUSH
27899: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
27903: LD_VAR 0 8
27907: PPUSH
27908: LD_INT 22
27910: PUSH
27911: LD_INT 23
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 1
27920: PPUSH
27921: LD_INT 2
27923: PPUSH
27924: CALL_OW 12
27928: ARRAY
27929: PPUSH
27930: LD_INT 1
27932: PPUSH
27933: LD_INT 1
27935: PPUSH
27936: LD_INT 44
27938: PUSH
27939: LD_INT 46
27941: PUSH
27942: LD_INT 47
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 1
27952: PPUSH
27953: LD_INT 3
27955: PPUSH
27956: CALL_OW 12
27960: ARRAY
27961: PPUSH
27962: CALL_OW 185
// exit ;
27966: POP
27967: POP
27968: GO 28245
// end ;
27970: GO 27871
27972: POP
27973: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
27974: LD_ADDR_VAR 0 8
27978: PUSH
27979: LD_INT 10
27981: PPUSH
27982: LD_INT 22
27984: PUSH
27985: LD_INT 3
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 50
27994: PUSH
27995: EMPTY
27996: LIST
27997: PUSH
27998: LD_INT 2
28000: PUSH
28001: LD_INT 30
28003: PUSH
28004: LD_INT 4
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 30
28013: PUSH
28014: LD_INT 5
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 30
28023: PUSH
28024: LD_INT 32
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 30
28033: PUSH
28034: LD_INT 31
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: LIST
28052: PPUSH
28053: CALL_OW 70
28057: ST_TO_ADDR
// if not tmp then
28058: LD_VAR 0 8
28062: NOT
28063: IFFALSE 28082
// begin ComMoveXY ( un , 83 , 133 ) ;
28065: LD_VAR 0 1
28069: PPUSH
28070: LD_INT 83
28072: PPUSH
28073: LD_INT 133
28075: PPUSH
28076: CALL_OW 111
// exit ;
28080: GO 28245
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28082: LD_ADDR_VAR 0 6
28086: PUSH
28087: LD_VAR 0 1
28091: PPUSH
28092: LD_VAR 0 8
28096: PPUSH
28097: LD_INT 1
28099: PPUSH
28100: LD_INT 1
28102: PPUSH
28103: CALL 34840 0 4
28107: PUSH
28108: FOR_IN
28109: IFFALSE 28243
// begin case GetBType ( b ) of b_armoury , b_barracks :
28111: LD_VAR 0 6
28115: PPUSH
28116: CALL_OW 266
28120: PUSH
28121: LD_INT 4
28123: DOUBLE
28124: EQUAL
28125: IFTRUE 28135
28127: LD_INT 5
28129: DOUBLE
28130: EQUAL
28131: IFTRUE 28135
28133: GO 28146
28135: POP
// p := 6 ; b_breastwork , b_bunker :
28136: LD_ADDR_VAR 0 7
28140: PUSH
28141: LD_INT 6
28143: ST_TO_ADDR
28144: GO 28172
28146: LD_INT 31
28148: DOUBLE
28149: EQUAL
28150: IFTRUE 28160
28152: LD_INT 32
28154: DOUBLE
28155: EQUAL
28156: IFTRUE 28160
28158: GO 28171
28160: POP
// p := 1 ; end ;
28161: LD_ADDR_VAR 0 7
28165: PUSH
28166: LD_INT 1
28168: ST_TO_ADDR
28169: GO 28172
28171: POP
// if UnitsInside ( b ) < p then
28172: LD_VAR 0 6
28176: PPUSH
28177: CALL_OW 313
28181: PUSH
28182: LD_VAR 0 7
28186: LESS
28187: IFFALSE 28241
// begin ComEnterUnit ( un , b ) ;
28189: LD_VAR 0 1
28193: PPUSH
28194: LD_VAR 0 6
28198: PPUSH
28199: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
28203: LD_VAR 0 6
28207: PPUSH
28208: CALL_OW 266
28212: PUSH
28213: LD_INT 4
28215: PUSH
28216: LD_INT 5
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: IN
28223: IFFALSE 28237
// AddComChangeProfession ( un , class_soldier ) ;
28225: LD_VAR 0 1
28229: PPUSH
28230: LD_INT 1
28232: PPUSH
28233: CALL_OW 183
// exit ;
28237: POP
28238: POP
28239: GO 28245
// end ; end ;
28241: GO 28108
28243: POP
28244: POP
// end ; end ;
28245: PPOPN 8
28247: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
28248: LD_INT 0
28250: PPUSH
28251: PPUSH
28252: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
28253: LD_VAR 0 2
28257: PPUSH
28258: CALL_OW 255
28262: PUSH
28263: LD_INT 3
28265: EQUAL
28266: PUSH
28267: LD_VAR 0 2
28271: PPUSH
28272: CALL_OW 257
28276: PUSH
28277: LD_INT 1
28279: EQUAL
28280: AND
28281: PUSH
28282: LD_VAR 0 2
28286: PUSH
28287: LD_EXP 59
28291: IN
28292: NOT
28293: AND
28294: IFFALSE 28607
// begin ComMoveToArea ( un , ruMainBase ) ;
28296: LD_VAR 0 2
28300: PPUSH
28301: LD_INT 10
28303: PPUSH
28304: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
28308: LD_INT 35
28310: PPUSH
28311: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
28315: LD_VAR 0 2
28319: PPUSH
28320: CALL_OW 302
28324: NOT
28325: PUSH
28326: LD_VAR 0 2
28330: PPUSH
28331: LD_INT 10
28333: PPUSH
28334: CALL_OW 308
28338: OR
28339: IFFALSE 28308
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
28341: LD_ADDR_EXP 59
28345: PUSH
28346: LD_EXP 59
28350: PPUSH
28351: LD_EXP 59
28355: PUSH
28356: LD_INT 1
28358: PLUS
28359: PPUSH
28360: LD_VAR 0 2
28364: PPUSH
28365: CALL_OW 1
28369: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28370: LD_ADDR_VAR 0 4
28374: PUSH
28375: LD_INT 10
28377: PPUSH
28378: LD_INT 22
28380: PUSH
28381: LD_INT 3
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 50
28390: PUSH
28391: EMPTY
28392: LIST
28393: PUSH
28394: LD_INT 2
28396: PUSH
28397: LD_INT 30
28399: PUSH
28400: LD_INT 4
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 30
28409: PUSH
28410: LD_INT 5
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 30
28419: PUSH
28420: LD_INT 32
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 30
28429: PUSH
28430: LD_INT 31
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: LIST
28448: PPUSH
28449: CALL_OW 70
28453: ST_TO_ADDR
// if not tmp then
28454: LD_VAR 0 4
28458: NOT
28459: IFFALSE 28478
// begin ComMoveXY ( un , 83 , 133 ) ;
28461: LD_VAR 0 2
28465: PPUSH
28466: LD_INT 83
28468: PPUSH
28469: LD_INT 133
28471: PPUSH
28472: CALL_OW 111
// exit ;
28476: GO 28856
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28478: LD_ADDR_VAR 0 5
28482: PUSH
28483: LD_VAR 0 2
28487: PPUSH
28488: LD_VAR 0 4
28492: PPUSH
28493: LD_INT 1
28495: PPUSH
28496: LD_INT 1
28498: PPUSH
28499: CALL 34840 0 4
28503: PUSH
28504: FOR_IN
28505: IFFALSE 28605
// begin case GetBType ( b ) of b_armoury , b_barracks :
28507: LD_VAR 0 5
28511: PPUSH
28512: CALL_OW 266
28516: PUSH
28517: LD_INT 4
28519: DOUBLE
28520: EQUAL
28521: IFTRUE 28531
28523: LD_INT 5
28525: DOUBLE
28526: EQUAL
28527: IFTRUE 28531
28529: GO 28542
28531: POP
// p := 6 ; b_breastwork , b_bunker :
28532: LD_ADDR_VAR 0 3
28536: PUSH
28537: LD_INT 6
28539: ST_TO_ADDR
28540: GO 28568
28542: LD_INT 31
28544: DOUBLE
28545: EQUAL
28546: IFTRUE 28556
28548: LD_INT 32
28550: DOUBLE
28551: EQUAL
28552: IFTRUE 28556
28554: GO 28567
28556: POP
// p := 1 ; end ;
28557: LD_ADDR_VAR 0 3
28561: PUSH
28562: LD_INT 1
28564: ST_TO_ADDR
28565: GO 28568
28567: POP
// if UnitsInside ( b ) < p then
28568: LD_VAR 0 5
28572: PPUSH
28573: CALL_OW 313
28577: PUSH
28578: LD_VAR 0 3
28582: LESS
28583: IFFALSE 28603
// begin ComEnterUnit ( un , b ) ;
28585: LD_VAR 0 2
28589: PPUSH
28590: LD_VAR 0 5
28594: PPUSH
28595: CALL_OW 120
// exit ;
28599: POP
28600: POP
28601: GO 28856
// end ; end ;
28603: GO 28504
28605: POP
28606: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
28607: LD_VAR 0 2
28611: PUSH
28612: LD_EXP 59
28616: IN
28617: PUSH
28618: LD_VAR 0 2
28622: PPUSH
28623: CALL_OW 257
28627: PUSH
28628: LD_INT 1
28630: EQUAL
28631: AND
28632: IFFALSE 28856
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28634: LD_ADDR_VAR 0 4
28638: PUSH
28639: LD_INT 10
28641: PPUSH
28642: LD_INT 22
28644: PUSH
28645: LD_INT 3
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 50
28654: PUSH
28655: EMPTY
28656: LIST
28657: PUSH
28658: LD_INT 2
28660: PUSH
28661: LD_INT 30
28663: PUSH
28664: LD_INT 4
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 30
28673: PUSH
28674: LD_INT 5
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 30
28683: PUSH
28684: LD_INT 32
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 30
28693: PUSH
28694: LD_INT 31
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: LIST
28712: PPUSH
28713: CALL_OW 70
28717: ST_TO_ADDR
// if not tmp then
28718: LD_VAR 0 4
28722: NOT
28723: IFFALSE 28727
// exit ;
28725: GO 28856
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
28727: LD_ADDR_VAR 0 5
28731: PUSH
28732: LD_VAR 0 2
28736: PPUSH
28737: LD_VAR 0 4
28741: PPUSH
28742: LD_INT 1
28744: PPUSH
28745: LD_INT 1
28747: PPUSH
28748: CALL 34840 0 4
28752: PUSH
28753: FOR_IN
28754: IFFALSE 28854
// begin case GetBType ( b ) of b_armoury , b_barracks :
28756: LD_VAR 0 5
28760: PPUSH
28761: CALL_OW 266
28765: PUSH
28766: LD_INT 4
28768: DOUBLE
28769: EQUAL
28770: IFTRUE 28780
28772: LD_INT 5
28774: DOUBLE
28775: EQUAL
28776: IFTRUE 28780
28778: GO 28791
28780: POP
// p := 6 ; b_breastwork , b_bunker :
28781: LD_ADDR_VAR 0 3
28785: PUSH
28786: LD_INT 6
28788: ST_TO_ADDR
28789: GO 28817
28791: LD_INT 31
28793: DOUBLE
28794: EQUAL
28795: IFTRUE 28805
28797: LD_INT 32
28799: DOUBLE
28800: EQUAL
28801: IFTRUE 28805
28803: GO 28816
28805: POP
// p := 1 ; end ;
28806: LD_ADDR_VAR 0 3
28810: PUSH
28811: LD_INT 1
28813: ST_TO_ADDR
28814: GO 28817
28816: POP
// if UnitsInside ( b ) < p then
28817: LD_VAR 0 5
28821: PPUSH
28822: CALL_OW 313
28826: PUSH
28827: LD_VAR 0 3
28831: LESS
28832: IFFALSE 28852
// begin ComEnterUnit ( un , b ) ;
28834: LD_VAR 0 2
28838: PPUSH
28839: LD_VAR 0 5
28843: PPUSH
28844: CALL_OW 120
// exit ;
28848: POP
28849: POP
28850: GO 28856
// end ; end ;
28852: GO 28753
28854: POP
28855: POP
// end ; end ;
28856: PPOPN 5
28858: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
28859: LD_VAR 0 1
28863: PUSH
28864: LD_INT 2
28866: EQUAL
28867: PUSH
28868: LD_VAR 0 2
28872: PUSH
28873: LD_INT 5
28875: PUSH
28876: LD_INT 8
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: IN
28883: AND
28884: IFFALSE 28893
// YouLost ( FriendlyFire ) ;
28886: LD_STRING FriendlyFire
28888: PPUSH
28889: CALL_OW 104
// end ;
28893: PPOPN 2
28895: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
28896: LD_VAR 0 1
28900: PPUSH
28901: CALL_OW 255
28905: PUSH
28906: LD_INT 8
28908: EQUAL
28909: PUSH
28910: LD_VAR 0 1
28914: PPUSH
28915: CALL_OW 266
28919: PUSH
28920: LD_INT 5
28922: EQUAL
28923: AND
28924: IFFALSE 28938
// SetClass ( unit , class_mortar ) ;
28926: LD_VAR 0 2
28930: PPUSH
28931: LD_INT 8
28933: PPUSH
28934: CALL_OW 336
// end ; end_of_file
28938: PPOPN 2
28940: END
// every 0 0$35 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 20 , 18 , 16 , 12 ] [ Difficulty ] do
28941: LD_INT 6
28943: PPUSH
28944: LD_INT 1
28946: PPUSH
28947: CALL_OW 287
28951: PUSH
28952: LD_INT 20
28954: PUSH
28955: LD_INT 18
28957: PUSH
28958: LD_INT 16
28960: PUSH
28961: LD_INT 12
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: PUSH
28970: LD_OWVAR 67
28974: ARRAY
28975: LESS
28976: IFFALSE 29003
28978: GO 28980
28980: DISABLE
// begin enable ;
28981: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
28982: LD_INT 1
28984: PPUSH
28985: LD_INT 5
28987: PPUSH
28988: CALL_OW 12
28992: PPUSH
28993: LD_INT 6
28995: PPUSH
28996: LD_INT 1
28998: PPUSH
28999: CALL_OW 55
// end ;
29003: END
// every 0 0$25 trigger Prob ( 50 ) and tick < [ 28 28$00 , 27 27$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] and GetResourceArea ( southCrates , mat_cans ) < 10 do
29004: LD_INT 50
29006: PPUSH
29007: CALL_OW 13
29011: PUSH
29012: LD_OWVAR 1
29016: PUSH
29017: LD_INT 58800
29019: PUSH
29020: LD_INT 56700
29022: PUSH
29023: LD_INT 54600
29025: PUSH
29026: LD_INT 52500
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: PUSH
29035: LD_OWVAR 67
29039: ARRAY
29040: LESS
29041: AND
29042: PUSH
29043: LD_INT 21
29045: PPUSH
29046: LD_INT 1
29048: PPUSH
29049: CALL_OW 287
29053: PUSH
29054: LD_INT 10
29056: LESS
29057: AND
29058: IFFALSE 29100
29060: GO 29062
29062: DISABLE
// begin enable ;
29063: ENABLE
// wait ( rand ( 0 0$1 , 0 0$10 ) ) ;
29064: LD_INT 35
29066: PPUSH
29067: LD_INT 350
29069: PPUSH
29070: CALL_OW 12
29074: PPUSH
29075: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , southCrates , true ) ;
29079: LD_INT 1
29081: PPUSH
29082: LD_INT 5
29084: PPUSH
29085: CALL_OW 12
29089: PPUSH
29090: LD_INT 21
29092: PPUSH
29093: LD_INT 1
29095: PPUSH
29096: CALL_OW 55
// end ; end_of_file
29100: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
29101: LD_EXP 18
29105: PUSH
29106: LD_EXP 20
29110: AND
29111: PUSH
29112: LD_EXP 17
29116: PUSH
29117: LD_EXP 19
29121: AND
29122: OR
29123: IFFALSE 29442
29125: GO 29127
29127: DISABLE
// begin enable ;
29128: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
29129: LD_EXP 18
29133: PUSH
29134: LD_EXP 20
29138: AND
29139: PUSH
29140: LD_EXP 17
29144: PUSH
29145: LD_EXP 19
29149: AND
29150: AND
29151: IFFALSE 29288
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29153: LD_ADDR_OWVAR 47
29157: PUSH
29158: LD_STRING #X106-1a
29160: PUSH
29161: LD_EXP 21
29165: PUSH
29166: LD_INT 16
29168: PPUSH
29169: LD_INT 22
29171: PUSH
29172: LD_INT 2
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 21
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 33
29191: PUSH
29192: LD_INT 1
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 58
29201: PUSH
29202: EMPTY
29203: LIST
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: PPUSH
29211: CALL_OW 70
29215: MINUS
29216: PPUSH
29217: CALL 69331 0 1
29221: PUSH
29222: LD_STRING #X106-3a
29224: PUSH
29225: LD_EXP 20
29229: PUSH
29230: LD_STRING #X106-1
29232: PUSH
29233: LD_EXP 51
29237: PUSH
29238: LD_INT 0
29240: PLUS
29241: PUSH
29242: LD_EXP 51
29246: PPUSH
29247: LD_INT 55
29249: PUSH
29250: EMPTY
29251: LIST
29252: PPUSH
29253: CALL_OW 72
29257: PUSH
29258: LD_INT 0
29260: PLUS
29261: MINUS
29262: PPUSH
29263: CALL 69331 0 1
29267: PUSH
29268: LD_STRING #X106-3
29270: PUSH
29271: LD_EXP 19
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: ST_TO_ADDR
// end else
29286: GO 29442
// if omarWantVehicles and omarWaitingForVehiclesTimer then
29288: LD_EXP 18
29292: PUSH
29293: LD_EXP 20
29297: AND
29298: IFFALSE 29385
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
29300: LD_ADDR_OWVAR 47
29304: PUSH
29305: LD_STRING #X106-1a
29307: PUSH
29308: LD_EXP 21
29312: PUSH
29313: LD_INT 16
29315: PPUSH
29316: LD_INT 22
29318: PUSH
29319: LD_INT 2
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 21
29328: PUSH
29329: LD_INT 2
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 33
29338: PUSH
29339: LD_INT 1
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 58
29348: PUSH
29349: EMPTY
29350: LIST
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: PPUSH
29358: CALL_OW 70
29362: MINUS
29363: PPUSH
29364: CALL 69331 0 1
29368: PUSH
29369: LD_STRING #X106-3a
29371: PUSH
29372: LD_EXP 20
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: ST_TO_ADDR
// end else
29383: GO 29442
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29385: LD_ADDR_OWVAR 47
29389: PUSH
29390: LD_STRING #X106-1
29392: PUSH
29393: LD_EXP 51
29397: PUSH
29398: LD_INT 0
29400: PLUS
29401: PUSH
29402: LD_EXP 51
29406: PPUSH
29407: LD_INT 55
29409: PUSH
29410: EMPTY
29411: LIST
29412: PPUSH
29413: CALL_OW 72
29417: PUSH
29418: LD_INT 0
29420: PLUS
29421: MINUS
29422: PPUSH
29423: CALL 69331 0 1
29427: PUSH
29428: LD_STRING #X106-3
29430: PUSH
29431: LD_EXP 19
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: ST_TO_ADDR
// end ; end ; end_of_file
29442: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29443: LD_INT 0
29445: PPUSH
29446: PPUSH
// if exist_mode then
29447: LD_VAR 0 2
29451: IFFALSE 29476
// unit := CreateCharacter ( prefix & ident ) else
29453: LD_ADDR_VAR 0 5
29457: PUSH
29458: LD_VAR 0 3
29462: PUSH
29463: LD_VAR 0 1
29467: STR
29468: PPUSH
29469: CALL_OW 34
29473: ST_TO_ADDR
29474: GO 29491
// unit := NewCharacter ( ident ) ;
29476: LD_ADDR_VAR 0 5
29480: PUSH
29481: LD_VAR 0 1
29485: PPUSH
29486: CALL_OW 25
29490: ST_TO_ADDR
// result := unit ;
29491: LD_ADDR_VAR 0 4
29495: PUSH
29496: LD_VAR 0 5
29500: ST_TO_ADDR
// end ;
29501: LD_VAR 0 4
29505: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29506: LD_INT 0
29508: PPUSH
29509: PPUSH
// if not side or not nation then
29510: LD_VAR 0 1
29514: NOT
29515: PUSH
29516: LD_VAR 0 2
29520: NOT
29521: OR
29522: IFFALSE 29526
// exit ;
29524: GO 30294
// case nation of nation_american :
29526: LD_VAR 0 2
29530: PUSH
29531: LD_INT 1
29533: DOUBLE
29534: EQUAL
29535: IFTRUE 29539
29537: GO 29753
29539: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29540: LD_ADDR_VAR 0 4
29544: PUSH
29545: LD_INT 35
29547: PUSH
29548: LD_INT 45
29550: PUSH
29551: LD_INT 46
29553: PUSH
29554: LD_INT 47
29556: PUSH
29557: LD_INT 82
29559: PUSH
29560: LD_INT 83
29562: PUSH
29563: LD_INT 84
29565: PUSH
29566: LD_INT 85
29568: PUSH
29569: LD_INT 86
29571: PUSH
29572: LD_INT 1
29574: PUSH
29575: LD_INT 2
29577: PUSH
29578: LD_INT 6
29580: PUSH
29581: LD_INT 15
29583: PUSH
29584: LD_INT 16
29586: PUSH
29587: LD_INT 7
29589: PUSH
29590: LD_INT 12
29592: PUSH
29593: LD_INT 13
29595: PUSH
29596: LD_INT 10
29598: PUSH
29599: LD_INT 14
29601: PUSH
29602: LD_INT 20
29604: PUSH
29605: LD_INT 21
29607: PUSH
29608: LD_INT 22
29610: PUSH
29611: LD_INT 25
29613: PUSH
29614: LD_INT 32
29616: PUSH
29617: LD_INT 27
29619: PUSH
29620: LD_INT 36
29622: PUSH
29623: LD_INT 69
29625: PUSH
29626: LD_INT 39
29628: PUSH
29629: LD_INT 34
29631: PUSH
29632: LD_INT 40
29634: PUSH
29635: LD_INT 48
29637: PUSH
29638: LD_INT 49
29640: PUSH
29641: LD_INT 50
29643: PUSH
29644: LD_INT 51
29646: PUSH
29647: LD_INT 52
29649: PUSH
29650: LD_INT 53
29652: PUSH
29653: LD_INT 54
29655: PUSH
29656: LD_INT 55
29658: PUSH
29659: LD_INT 56
29661: PUSH
29662: LD_INT 57
29664: PUSH
29665: LD_INT 58
29667: PUSH
29668: LD_INT 59
29670: PUSH
29671: LD_INT 60
29673: PUSH
29674: LD_INT 61
29676: PUSH
29677: LD_INT 62
29679: PUSH
29680: LD_INT 80
29682: PUSH
29683: LD_INT 82
29685: PUSH
29686: LD_INT 83
29688: PUSH
29689: LD_INT 84
29691: PUSH
29692: LD_INT 85
29694: PUSH
29695: LD_INT 86
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: ST_TO_ADDR
29751: GO 30218
29753: LD_INT 2
29755: DOUBLE
29756: EQUAL
29757: IFTRUE 29761
29759: GO 29987
29761: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29762: LD_ADDR_VAR 0 4
29766: PUSH
29767: LD_INT 35
29769: PUSH
29770: LD_INT 45
29772: PUSH
29773: LD_INT 46
29775: PUSH
29776: LD_INT 47
29778: PUSH
29779: LD_INT 82
29781: PUSH
29782: LD_INT 83
29784: PUSH
29785: LD_INT 84
29787: PUSH
29788: LD_INT 85
29790: PUSH
29791: LD_INT 87
29793: PUSH
29794: LD_INT 70
29796: PUSH
29797: LD_INT 1
29799: PUSH
29800: LD_INT 11
29802: PUSH
29803: LD_INT 3
29805: PUSH
29806: LD_INT 4
29808: PUSH
29809: LD_INT 5
29811: PUSH
29812: LD_INT 6
29814: PUSH
29815: LD_INT 15
29817: PUSH
29818: LD_INT 18
29820: PUSH
29821: LD_INT 7
29823: PUSH
29824: LD_INT 17
29826: PUSH
29827: LD_INT 8
29829: PUSH
29830: LD_INT 20
29832: PUSH
29833: LD_INT 21
29835: PUSH
29836: LD_INT 22
29838: PUSH
29839: LD_INT 72
29841: PUSH
29842: LD_INT 26
29844: PUSH
29845: LD_INT 69
29847: PUSH
29848: LD_INT 39
29850: PUSH
29851: LD_INT 40
29853: PUSH
29854: LD_INT 41
29856: PUSH
29857: LD_INT 42
29859: PUSH
29860: LD_INT 43
29862: PUSH
29863: LD_INT 48
29865: PUSH
29866: LD_INT 49
29868: PUSH
29869: LD_INT 50
29871: PUSH
29872: LD_INT 51
29874: PUSH
29875: LD_INT 52
29877: PUSH
29878: LD_INT 53
29880: PUSH
29881: LD_INT 54
29883: PUSH
29884: LD_INT 55
29886: PUSH
29887: LD_INT 56
29889: PUSH
29890: LD_INT 60
29892: PUSH
29893: LD_INT 61
29895: PUSH
29896: LD_INT 62
29898: PUSH
29899: LD_INT 66
29901: PUSH
29902: LD_INT 67
29904: PUSH
29905: LD_INT 68
29907: PUSH
29908: LD_INT 81
29910: PUSH
29911: LD_INT 82
29913: PUSH
29914: LD_INT 83
29916: PUSH
29917: LD_INT 84
29919: PUSH
29920: LD_INT 85
29922: PUSH
29923: LD_INT 87
29925: PUSH
29926: LD_INT 88
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: ST_TO_ADDR
29985: GO 30218
29987: LD_INT 3
29989: DOUBLE
29990: EQUAL
29991: IFTRUE 29995
29993: GO 30217
29995: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29996: LD_ADDR_VAR 0 4
30000: PUSH
30001: LD_INT 46
30003: PUSH
30004: LD_INT 47
30006: PUSH
30007: LD_INT 1
30009: PUSH
30010: LD_INT 2
30012: PUSH
30013: LD_INT 82
30015: PUSH
30016: LD_INT 83
30018: PUSH
30019: LD_INT 84
30021: PUSH
30022: LD_INT 85
30024: PUSH
30025: LD_INT 86
30027: PUSH
30028: LD_INT 11
30030: PUSH
30031: LD_INT 9
30033: PUSH
30034: LD_INT 20
30036: PUSH
30037: LD_INT 19
30039: PUSH
30040: LD_INT 21
30042: PUSH
30043: LD_INT 24
30045: PUSH
30046: LD_INT 22
30048: PUSH
30049: LD_INT 25
30051: PUSH
30052: LD_INT 28
30054: PUSH
30055: LD_INT 29
30057: PUSH
30058: LD_INT 30
30060: PUSH
30061: LD_INT 31
30063: PUSH
30064: LD_INT 37
30066: PUSH
30067: LD_INT 38
30069: PUSH
30070: LD_INT 32
30072: PUSH
30073: LD_INT 27
30075: PUSH
30076: LD_INT 33
30078: PUSH
30079: LD_INT 69
30081: PUSH
30082: LD_INT 39
30084: PUSH
30085: LD_INT 34
30087: PUSH
30088: LD_INT 40
30090: PUSH
30091: LD_INT 71
30093: PUSH
30094: LD_INT 23
30096: PUSH
30097: LD_INT 44
30099: PUSH
30100: LD_INT 48
30102: PUSH
30103: LD_INT 49
30105: PUSH
30106: LD_INT 50
30108: PUSH
30109: LD_INT 51
30111: PUSH
30112: LD_INT 52
30114: PUSH
30115: LD_INT 53
30117: PUSH
30118: LD_INT 54
30120: PUSH
30121: LD_INT 55
30123: PUSH
30124: LD_INT 56
30126: PUSH
30127: LD_INT 57
30129: PUSH
30130: LD_INT 58
30132: PUSH
30133: LD_INT 59
30135: PUSH
30136: LD_INT 63
30138: PUSH
30139: LD_INT 64
30141: PUSH
30142: LD_INT 65
30144: PUSH
30145: LD_INT 82
30147: PUSH
30148: LD_INT 83
30150: PUSH
30151: LD_INT 84
30153: PUSH
30154: LD_INT 85
30156: PUSH
30157: LD_INT 86
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: ST_TO_ADDR
30215: GO 30218
30217: POP
// if state > - 1 and state < 3 then
30218: LD_VAR 0 3
30222: PUSH
30223: LD_INT 1
30225: NEG
30226: GREATER
30227: PUSH
30228: LD_VAR 0 3
30232: PUSH
30233: LD_INT 3
30235: LESS
30236: AND
30237: IFFALSE 30294
// for i in result do
30239: LD_ADDR_VAR 0 5
30243: PUSH
30244: LD_VAR 0 4
30248: PUSH
30249: FOR_IN
30250: IFFALSE 30292
// if GetTech ( i , side ) <> state then
30252: LD_VAR 0 5
30256: PPUSH
30257: LD_VAR 0 1
30261: PPUSH
30262: CALL_OW 321
30266: PUSH
30267: LD_VAR 0 3
30271: NONEQUAL
30272: IFFALSE 30290
// result := result diff i ;
30274: LD_ADDR_VAR 0 4
30278: PUSH
30279: LD_VAR 0 4
30283: PUSH
30284: LD_VAR 0 5
30288: DIFF
30289: ST_TO_ADDR
30290: GO 30249
30292: POP
30293: POP
// end ;
30294: LD_VAR 0 4
30298: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30299: LD_INT 0
30301: PPUSH
30302: PPUSH
30303: PPUSH
// result := true ;
30304: LD_ADDR_VAR 0 3
30308: PUSH
30309: LD_INT 1
30311: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30312: LD_ADDR_VAR 0 5
30316: PUSH
30317: LD_VAR 0 2
30321: PPUSH
30322: CALL_OW 480
30326: ST_TO_ADDR
// if not tmp then
30327: LD_VAR 0 5
30331: NOT
30332: IFFALSE 30336
// exit ;
30334: GO 30385
// for i in tmp do
30336: LD_ADDR_VAR 0 4
30340: PUSH
30341: LD_VAR 0 5
30345: PUSH
30346: FOR_IN
30347: IFFALSE 30383
// if GetTech ( i , side ) <> state_researched then
30349: LD_VAR 0 4
30353: PPUSH
30354: LD_VAR 0 1
30358: PPUSH
30359: CALL_OW 321
30363: PUSH
30364: LD_INT 2
30366: NONEQUAL
30367: IFFALSE 30381
// begin result := false ;
30369: LD_ADDR_VAR 0 3
30373: PUSH
30374: LD_INT 0
30376: ST_TO_ADDR
// exit ;
30377: POP
30378: POP
30379: GO 30385
// end ;
30381: GO 30346
30383: POP
30384: POP
// end ;
30385: LD_VAR 0 3
30389: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30390: LD_INT 0
30392: PPUSH
30393: PPUSH
30394: PPUSH
30395: PPUSH
30396: PPUSH
30397: PPUSH
30398: PPUSH
30399: PPUSH
30400: PPUSH
30401: PPUSH
30402: PPUSH
30403: PPUSH
30404: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30405: LD_VAR 0 1
30409: NOT
30410: PUSH
30411: LD_VAR 0 1
30415: PPUSH
30416: CALL_OW 257
30420: PUSH
30421: LD_INT 9
30423: NONEQUAL
30424: OR
30425: IFFALSE 30429
// exit ;
30427: GO 31002
// side := GetSide ( unit ) ;
30429: LD_ADDR_VAR 0 9
30433: PUSH
30434: LD_VAR 0 1
30438: PPUSH
30439: CALL_OW 255
30443: ST_TO_ADDR
// tech_space := tech_spacanom ;
30444: LD_ADDR_VAR 0 12
30448: PUSH
30449: LD_INT 29
30451: ST_TO_ADDR
// tech_time := tech_taurad ;
30452: LD_ADDR_VAR 0 13
30456: PUSH
30457: LD_INT 28
30459: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30460: LD_ADDR_VAR 0 11
30464: PUSH
30465: LD_VAR 0 1
30469: PPUSH
30470: CALL_OW 310
30474: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30475: LD_VAR 0 11
30479: PPUSH
30480: CALL_OW 247
30484: PUSH
30485: LD_INT 2
30487: EQUAL
30488: IFFALSE 30492
// exit ;
30490: GO 31002
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30492: LD_ADDR_VAR 0 8
30496: PUSH
30497: LD_INT 81
30499: PUSH
30500: LD_VAR 0 9
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 3
30511: PUSH
30512: LD_INT 21
30514: PUSH
30515: LD_INT 3
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PPUSH
30530: CALL_OW 69
30534: ST_TO_ADDR
// if not tmp then
30535: LD_VAR 0 8
30539: NOT
30540: IFFALSE 30544
// exit ;
30542: GO 31002
// if in_unit then
30544: LD_VAR 0 11
30548: IFFALSE 30572
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30550: LD_ADDR_VAR 0 10
30554: PUSH
30555: LD_VAR 0 8
30559: PPUSH
30560: LD_VAR 0 11
30564: PPUSH
30565: CALL_OW 74
30569: ST_TO_ADDR
30570: GO 30592
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30572: LD_ADDR_VAR 0 10
30576: PUSH
30577: LD_VAR 0 8
30581: PPUSH
30582: LD_VAR 0 1
30586: PPUSH
30587: CALL_OW 74
30591: ST_TO_ADDR
// if not enemy then
30592: LD_VAR 0 10
30596: NOT
30597: IFFALSE 30601
// exit ;
30599: GO 31002
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30601: LD_VAR 0 11
30605: PUSH
30606: LD_VAR 0 11
30610: PPUSH
30611: LD_VAR 0 10
30615: PPUSH
30616: CALL_OW 296
30620: PUSH
30621: LD_INT 13
30623: GREATER
30624: AND
30625: PUSH
30626: LD_VAR 0 1
30630: PPUSH
30631: LD_VAR 0 10
30635: PPUSH
30636: CALL_OW 296
30640: PUSH
30641: LD_INT 12
30643: GREATER
30644: OR
30645: IFFALSE 30649
// exit ;
30647: GO 31002
// missile := [ 1 ] ;
30649: LD_ADDR_VAR 0 14
30653: PUSH
30654: LD_INT 1
30656: PUSH
30657: EMPTY
30658: LIST
30659: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30660: LD_VAR 0 9
30664: PPUSH
30665: LD_VAR 0 12
30669: PPUSH
30670: CALL_OW 325
30674: IFFALSE 30703
// missile := Replace ( missile , missile + 1 , 2 ) ;
30676: LD_ADDR_VAR 0 14
30680: PUSH
30681: LD_VAR 0 14
30685: PPUSH
30686: LD_VAR 0 14
30690: PUSH
30691: LD_INT 1
30693: PLUS
30694: PPUSH
30695: LD_INT 2
30697: PPUSH
30698: CALL_OW 1
30702: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30703: LD_VAR 0 9
30707: PPUSH
30708: LD_VAR 0 13
30712: PPUSH
30713: CALL_OW 325
30717: PUSH
30718: LD_VAR 0 10
30722: PPUSH
30723: CALL_OW 255
30727: PPUSH
30728: LD_VAR 0 13
30732: PPUSH
30733: CALL_OW 325
30737: NOT
30738: AND
30739: IFFALSE 30768
// missile := Replace ( missile , missile + 1 , 3 ) ;
30741: LD_ADDR_VAR 0 14
30745: PUSH
30746: LD_VAR 0 14
30750: PPUSH
30751: LD_VAR 0 14
30755: PUSH
30756: LD_INT 1
30758: PLUS
30759: PPUSH
30760: LD_INT 3
30762: PPUSH
30763: CALL_OW 1
30767: ST_TO_ADDR
// if missile < 2 then
30768: LD_VAR 0 14
30772: PUSH
30773: LD_INT 2
30775: LESS
30776: IFFALSE 30780
// exit ;
30778: GO 31002
// x := GetX ( enemy ) ;
30780: LD_ADDR_VAR 0 4
30784: PUSH
30785: LD_VAR 0 10
30789: PPUSH
30790: CALL_OW 250
30794: ST_TO_ADDR
// y := GetY ( enemy ) ;
30795: LD_ADDR_VAR 0 5
30799: PUSH
30800: LD_VAR 0 10
30804: PPUSH
30805: CALL_OW 251
30809: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30810: LD_ADDR_VAR 0 6
30814: PUSH
30815: LD_VAR 0 4
30819: PUSH
30820: LD_INT 1
30822: NEG
30823: PPUSH
30824: LD_INT 1
30826: PPUSH
30827: CALL_OW 12
30831: PLUS
30832: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30833: LD_ADDR_VAR 0 7
30837: PUSH
30838: LD_VAR 0 5
30842: PUSH
30843: LD_INT 1
30845: NEG
30846: PPUSH
30847: LD_INT 1
30849: PPUSH
30850: CALL_OW 12
30854: PLUS
30855: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30856: LD_VAR 0 6
30860: PPUSH
30861: LD_VAR 0 7
30865: PPUSH
30866: CALL_OW 488
30870: NOT
30871: IFFALSE 30893
// begin _x := x ;
30873: LD_ADDR_VAR 0 6
30877: PUSH
30878: LD_VAR 0 4
30882: ST_TO_ADDR
// _y := y ;
30883: LD_ADDR_VAR 0 7
30887: PUSH
30888: LD_VAR 0 5
30892: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30893: LD_ADDR_VAR 0 3
30897: PUSH
30898: LD_INT 1
30900: PPUSH
30901: LD_VAR 0 14
30905: PPUSH
30906: CALL_OW 12
30910: ST_TO_ADDR
// case i of 1 :
30911: LD_VAR 0 3
30915: PUSH
30916: LD_INT 1
30918: DOUBLE
30919: EQUAL
30920: IFTRUE 30924
30922: GO 30941
30924: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30925: LD_VAR 0 1
30929: PPUSH
30930: LD_VAR 0 10
30934: PPUSH
30935: CALL_OW 115
30939: GO 31002
30941: LD_INT 2
30943: DOUBLE
30944: EQUAL
30945: IFTRUE 30949
30947: GO 30971
30949: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30950: LD_VAR 0 1
30954: PPUSH
30955: LD_VAR 0 6
30959: PPUSH
30960: LD_VAR 0 7
30964: PPUSH
30965: CALL_OW 153
30969: GO 31002
30971: LD_INT 3
30973: DOUBLE
30974: EQUAL
30975: IFTRUE 30979
30977: GO 31001
30979: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30980: LD_VAR 0 1
30984: PPUSH
30985: LD_VAR 0 6
30989: PPUSH
30990: LD_VAR 0 7
30994: PPUSH
30995: CALL_OW 154
30999: GO 31002
31001: POP
// end ;
31002: LD_VAR 0 2
31006: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31007: LD_INT 0
31009: PPUSH
31010: PPUSH
31011: PPUSH
31012: PPUSH
31013: PPUSH
31014: PPUSH
// if not unit or not building then
31015: LD_VAR 0 1
31019: NOT
31020: PUSH
31021: LD_VAR 0 2
31025: NOT
31026: OR
31027: IFFALSE 31031
// exit ;
31029: GO 31189
// x := GetX ( building ) ;
31031: LD_ADDR_VAR 0 5
31035: PUSH
31036: LD_VAR 0 2
31040: PPUSH
31041: CALL_OW 250
31045: ST_TO_ADDR
// y := GetY ( building ) ;
31046: LD_ADDR_VAR 0 6
31050: PUSH
31051: LD_VAR 0 2
31055: PPUSH
31056: CALL_OW 251
31060: ST_TO_ADDR
// for i = 0 to 5 do
31061: LD_ADDR_VAR 0 4
31065: PUSH
31066: DOUBLE
31067: LD_INT 0
31069: DEC
31070: ST_TO_ADDR
31071: LD_INT 5
31073: PUSH
31074: FOR_TO
31075: IFFALSE 31187
// begin _x := ShiftX ( x , i , 3 ) ;
31077: LD_ADDR_VAR 0 7
31081: PUSH
31082: LD_VAR 0 5
31086: PPUSH
31087: LD_VAR 0 4
31091: PPUSH
31092: LD_INT 3
31094: PPUSH
31095: CALL_OW 272
31099: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31100: LD_ADDR_VAR 0 8
31104: PUSH
31105: LD_VAR 0 6
31109: PPUSH
31110: LD_VAR 0 4
31114: PPUSH
31115: LD_INT 3
31117: PPUSH
31118: CALL_OW 273
31122: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31123: LD_VAR 0 7
31127: PPUSH
31128: LD_VAR 0 8
31132: PPUSH
31133: CALL_OW 488
31137: NOT
31138: IFFALSE 31142
// continue ;
31140: GO 31074
// if HexInfo ( _x , _y ) = 0 then
31142: LD_VAR 0 7
31146: PPUSH
31147: LD_VAR 0 8
31151: PPUSH
31152: CALL_OW 428
31156: PUSH
31157: LD_INT 0
31159: EQUAL
31160: IFFALSE 31185
// begin ComMoveXY ( unit , _x , _y ) ;
31162: LD_VAR 0 1
31166: PPUSH
31167: LD_VAR 0 7
31171: PPUSH
31172: LD_VAR 0 8
31176: PPUSH
31177: CALL_OW 111
// exit ;
31181: POP
31182: POP
31183: GO 31189
// end ; end ;
31185: GO 31074
31187: POP
31188: POP
// end ;
31189: LD_VAR 0 3
31193: RET
// export function ScanBase ( side , base_area ) ; begin
31194: LD_INT 0
31196: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31197: LD_ADDR_VAR 0 3
31201: PUSH
31202: LD_VAR 0 2
31206: PPUSH
31207: LD_INT 81
31209: PUSH
31210: LD_VAR 0 1
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PPUSH
31219: CALL_OW 70
31223: ST_TO_ADDR
// end ;
31224: LD_VAR 0 3
31228: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31229: LD_INT 0
31231: PPUSH
31232: PPUSH
31233: PPUSH
31234: PPUSH
// result := false ;
31235: LD_ADDR_VAR 0 2
31239: PUSH
31240: LD_INT 0
31242: ST_TO_ADDR
// side := GetSide ( unit ) ;
31243: LD_ADDR_VAR 0 3
31247: PUSH
31248: LD_VAR 0 1
31252: PPUSH
31253: CALL_OW 255
31257: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31258: LD_ADDR_VAR 0 4
31262: PUSH
31263: LD_VAR 0 1
31267: PPUSH
31268: CALL_OW 248
31272: ST_TO_ADDR
// case nat of 1 :
31273: LD_VAR 0 4
31277: PUSH
31278: LD_INT 1
31280: DOUBLE
31281: EQUAL
31282: IFTRUE 31286
31284: GO 31297
31286: POP
// tech := tech_lassight ; 2 :
31287: LD_ADDR_VAR 0 5
31291: PUSH
31292: LD_INT 12
31294: ST_TO_ADDR
31295: GO 31336
31297: LD_INT 2
31299: DOUBLE
31300: EQUAL
31301: IFTRUE 31305
31303: GO 31316
31305: POP
// tech := tech_mortar ; 3 :
31306: LD_ADDR_VAR 0 5
31310: PUSH
31311: LD_INT 41
31313: ST_TO_ADDR
31314: GO 31336
31316: LD_INT 3
31318: DOUBLE
31319: EQUAL
31320: IFTRUE 31324
31322: GO 31335
31324: POP
// tech := tech_bazooka ; end ;
31325: LD_ADDR_VAR 0 5
31329: PUSH
31330: LD_INT 44
31332: ST_TO_ADDR
31333: GO 31336
31335: POP
// if Researched ( side , tech ) then
31336: LD_VAR 0 3
31340: PPUSH
31341: LD_VAR 0 5
31345: PPUSH
31346: CALL_OW 325
31350: IFFALSE 31377
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31352: LD_ADDR_VAR 0 2
31356: PUSH
31357: LD_INT 5
31359: PUSH
31360: LD_INT 8
31362: PUSH
31363: LD_INT 9
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: LIST
31370: PUSH
31371: LD_VAR 0 4
31375: ARRAY
31376: ST_TO_ADDR
// end ;
31377: LD_VAR 0 2
31381: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31382: LD_INT 0
31384: PPUSH
31385: PPUSH
31386: PPUSH
// if not mines then
31387: LD_VAR 0 2
31391: NOT
31392: IFFALSE 31396
// exit ;
31394: GO 31540
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31396: LD_ADDR_VAR 0 5
31400: PUSH
31401: LD_INT 81
31403: PUSH
31404: LD_VAR 0 1
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 3
31415: PUSH
31416: LD_INT 21
31418: PUSH
31419: LD_INT 3
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PPUSH
31434: CALL_OW 69
31438: ST_TO_ADDR
// for i in mines do
31439: LD_ADDR_VAR 0 4
31443: PUSH
31444: LD_VAR 0 2
31448: PUSH
31449: FOR_IN
31450: IFFALSE 31538
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31452: LD_VAR 0 4
31456: PUSH
31457: LD_INT 1
31459: ARRAY
31460: PPUSH
31461: LD_VAR 0 4
31465: PUSH
31466: LD_INT 2
31468: ARRAY
31469: PPUSH
31470: CALL_OW 458
31474: NOT
31475: IFFALSE 31479
// continue ;
31477: GO 31449
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31479: LD_VAR 0 4
31483: PUSH
31484: LD_INT 1
31486: ARRAY
31487: PPUSH
31488: LD_VAR 0 4
31492: PUSH
31493: LD_INT 2
31495: ARRAY
31496: PPUSH
31497: CALL_OW 428
31501: PUSH
31502: LD_VAR 0 5
31506: IN
31507: IFFALSE 31536
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31509: LD_VAR 0 4
31513: PUSH
31514: LD_INT 1
31516: ARRAY
31517: PPUSH
31518: LD_VAR 0 4
31522: PUSH
31523: LD_INT 2
31525: ARRAY
31526: PPUSH
31527: LD_VAR 0 1
31531: PPUSH
31532: CALL_OW 456
// end ;
31536: GO 31449
31538: POP
31539: POP
// end ;
31540: LD_VAR 0 3
31544: RET
// export function Count ( array ) ; begin
31545: LD_INT 0
31547: PPUSH
// result := array + 0 ;
31548: LD_ADDR_VAR 0 2
31552: PUSH
31553: LD_VAR 0 1
31557: PUSH
31558: LD_INT 0
31560: PLUS
31561: ST_TO_ADDR
// end ;
31562: LD_VAR 0 2
31566: RET
// export function IsEmpty ( building ) ; begin
31567: LD_INT 0
31569: PPUSH
// if not building then
31570: LD_VAR 0 1
31574: NOT
31575: IFFALSE 31579
// exit ;
31577: GO 31622
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31579: LD_ADDR_VAR 0 2
31583: PUSH
31584: LD_VAR 0 1
31588: PUSH
31589: LD_INT 22
31591: PUSH
31592: LD_VAR 0 1
31596: PPUSH
31597: CALL_OW 255
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 58
31608: PUSH
31609: EMPTY
31610: LIST
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PPUSH
31616: CALL_OW 69
31620: IN
31621: ST_TO_ADDR
// end ;
31622: LD_VAR 0 2
31626: RET
// export function IsNotFull ( building ) ; var places ; begin
31627: LD_INT 0
31629: PPUSH
31630: PPUSH
// if not building then
31631: LD_VAR 0 1
31635: NOT
31636: IFFALSE 31640
// exit ;
31638: GO 31668
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31640: LD_ADDR_VAR 0 2
31644: PUSH
31645: LD_VAR 0 1
31649: PPUSH
31650: LD_INT 3
31652: PUSH
31653: LD_INT 62
31655: PUSH
31656: EMPTY
31657: LIST
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PPUSH
31663: CALL_OW 72
31667: ST_TO_ADDR
// end ;
31668: LD_VAR 0 2
31672: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31673: LD_INT 0
31675: PPUSH
31676: PPUSH
31677: PPUSH
31678: PPUSH
// tmp := [ ] ;
31679: LD_ADDR_VAR 0 3
31683: PUSH
31684: EMPTY
31685: ST_TO_ADDR
// list := [ ] ;
31686: LD_ADDR_VAR 0 5
31690: PUSH
31691: EMPTY
31692: ST_TO_ADDR
// for i = 16 to 25 do
31693: LD_ADDR_VAR 0 4
31697: PUSH
31698: DOUBLE
31699: LD_INT 16
31701: DEC
31702: ST_TO_ADDR
31703: LD_INT 25
31705: PUSH
31706: FOR_TO
31707: IFFALSE 31780
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31709: LD_ADDR_VAR 0 3
31713: PUSH
31714: LD_VAR 0 3
31718: PUSH
31719: LD_INT 22
31721: PUSH
31722: LD_VAR 0 1
31726: PPUSH
31727: CALL_OW 255
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 91
31738: PUSH
31739: LD_VAR 0 1
31743: PUSH
31744: LD_INT 6
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 30
31754: PUSH
31755: LD_VAR 0 4
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: LIST
31768: PUSH
31769: EMPTY
31770: LIST
31771: PPUSH
31772: CALL_OW 69
31776: ADD
31777: ST_TO_ADDR
31778: GO 31706
31780: POP
31781: POP
// for i = 1 to tmp do
31782: LD_ADDR_VAR 0 4
31786: PUSH
31787: DOUBLE
31788: LD_INT 1
31790: DEC
31791: ST_TO_ADDR
31792: LD_VAR 0 3
31796: PUSH
31797: FOR_TO
31798: IFFALSE 31886
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31800: LD_ADDR_VAR 0 5
31804: PUSH
31805: LD_VAR 0 5
31809: PUSH
31810: LD_VAR 0 3
31814: PUSH
31815: LD_VAR 0 4
31819: ARRAY
31820: PPUSH
31821: CALL_OW 266
31825: PUSH
31826: LD_VAR 0 3
31830: PUSH
31831: LD_VAR 0 4
31835: ARRAY
31836: PPUSH
31837: CALL_OW 250
31841: PUSH
31842: LD_VAR 0 3
31846: PUSH
31847: LD_VAR 0 4
31851: ARRAY
31852: PPUSH
31853: CALL_OW 251
31857: PUSH
31858: LD_VAR 0 3
31862: PUSH
31863: LD_VAR 0 4
31867: ARRAY
31868: PPUSH
31869: CALL_OW 254
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: PUSH
31880: EMPTY
31881: LIST
31882: ADD
31883: ST_TO_ADDR
31884: GO 31797
31886: POP
31887: POP
// result := list ;
31888: LD_ADDR_VAR 0 2
31892: PUSH
31893: LD_VAR 0 5
31897: ST_TO_ADDR
// end ;
31898: LD_VAR 0 2
31902: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31903: LD_INT 0
31905: PPUSH
31906: PPUSH
31907: PPUSH
31908: PPUSH
31909: PPUSH
31910: PPUSH
31911: PPUSH
// if not factory then
31912: LD_VAR 0 1
31916: NOT
31917: IFFALSE 31921
// exit ;
31919: GO 32514
// if control = control_apeman then
31921: LD_VAR 0 4
31925: PUSH
31926: LD_INT 5
31928: EQUAL
31929: IFFALSE 32038
// begin tmp := UnitsInside ( factory ) ;
31931: LD_ADDR_VAR 0 8
31935: PUSH
31936: LD_VAR 0 1
31940: PPUSH
31941: CALL_OW 313
31945: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31946: LD_VAR 0 8
31950: PPUSH
31951: LD_INT 25
31953: PUSH
31954: LD_INT 12
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PPUSH
31961: CALL_OW 72
31965: NOT
31966: IFFALSE 31976
// control := control_manual ;
31968: LD_ADDR_VAR 0 4
31972: PUSH
31973: LD_INT 1
31975: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31976: LD_ADDR_VAR 0 8
31980: PUSH
31981: LD_VAR 0 1
31985: PPUSH
31986: CALL 31673 0 1
31990: ST_TO_ADDR
// if tmp then
31991: LD_VAR 0 8
31995: IFFALSE 32038
// begin for i in tmp do
31997: LD_ADDR_VAR 0 7
32001: PUSH
32002: LD_VAR 0 8
32006: PUSH
32007: FOR_IN
32008: IFFALSE 32036
// if i [ 1 ] = b_ext_radio then
32010: LD_VAR 0 7
32014: PUSH
32015: LD_INT 1
32017: ARRAY
32018: PUSH
32019: LD_INT 22
32021: EQUAL
32022: IFFALSE 32034
// begin control := control_remote ;
32024: LD_ADDR_VAR 0 4
32028: PUSH
32029: LD_INT 2
32031: ST_TO_ADDR
// break ;
32032: GO 32036
// end ;
32034: GO 32007
32036: POP
32037: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32038: LD_VAR 0 1
32042: PPUSH
32043: LD_VAR 0 2
32047: PPUSH
32048: LD_VAR 0 3
32052: PPUSH
32053: LD_VAR 0 4
32057: PPUSH
32058: LD_VAR 0 5
32062: PPUSH
32063: CALL_OW 448
32067: IFFALSE 32102
// begin result := [ chassis , engine , control , weapon ] ;
32069: LD_ADDR_VAR 0 6
32073: PUSH
32074: LD_VAR 0 2
32078: PUSH
32079: LD_VAR 0 3
32083: PUSH
32084: LD_VAR 0 4
32088: PUSH
32089: LD_VAR 0 5
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: ST_TO_ADDR
// exit ;
32100: GO 32514
// end ; _chassis := AvailableChassisList ( factory ) ;
32102: LD_ADDR_VAR 0 9
32106: PUSH
32107: LD_VAR 0 1
32111: PPUSH
32112: CALL_OW 475
32116: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32117: LD_ADDR_VAR 0 11
32121: PUSH
32122: LD_VAR 0 1
32126: PPUSH
32127: CALL_OW 476
32131: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32132: LD_ADDR_VAR 0 12
32136: PUSH
32137: LD_VAR 0 1
32141: PPUSH
32142: CALL_OW 477
32146: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32147: LD_ADDR_VAR 0 10
32151: PUSH
32152: LD_VAR 0 1
32156: PPUSH
32157: CALL_OW 478
32161: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32162: LD_VAR 0 9
32166: NOT
32167: PUSH
32168: LD_VAR 0 11
32172: NOT
32173: OR
32174: PUSH
32175: LD_VAR 0 12
32179: NOT
32180: OR
32181: PUSH
32182: LD_VAR 0 10
32186: NOT
32187: OR
32188: IFFALSE 32223
// begin result := [ chassis , engine , control , weapon ] ;
32190: LD_ADDR_VAR 0 6
32194: PUSH
32195: LD_VAR 0 2
32199: PUSH
32200: LD_VAR 0 3
32204: PUSH
32205: LD_VAR 0 4
32209: PUSH
32210: LD_VAR 0 5
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: ST_TO_ADDR
// exit ;
32221: GO 32514
// end ; if not chassis in _chassis then
32223: LD_VAR 0 2
32227: PUSH
32228: LD_VAR 0 9
32232: IN
32233: NOT
32234: IFFALSE 32260
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32236: LD_ADDR_VAR 0 2
32240: PUSH
32241: LD_VAR 0 9
32245: PUSH
32246: LD_INT 1
32248: PPUSH
32249: LD_VAR 0 9
32253: PPUSH
32254: CALL_OW 12
32258: ARRAY
32259: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32260: LD_VAR 0 2
32264: PPUSH
32265: LD_VAR 0 3
32269: PPUSH
32270: CALL 32519 0 2
32274: NOT
32275: IFFALSE 32334
// repeat engine := _engine [ 1 ] ;
32277: LD_ADDR_VAR 0 3
32281: PUSH
32282: LD_VAR 0 11
32286: PUSH
32287: LD_INT 1
32289: ARRAY
32290: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32291: LD_ADDR_VAR 0 11
32295: PUSH
32296: LD_VAR 0 11
32300: PPUSH
32301: LD_INT 1
32303: PPUSH
32304: CALL_OW 3
32308: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32309: LD_VAR 0 2
32313: PPUSH
32314: LD_VAR 0 3
32318: PPUSH
32319: CALL 32519 0 2
32323: PUSH
32324: LD_VAR 0 11
32328: PUSH
32329: EMPTY
32330: EQUAL
32331: OR
32332: IFFALSE 32277
// if not control in _control then
32334: LD_VAR 0 4
32338: PUSH
32339: LD_VAR 0 12
32343: IN
32344: NOT
32345: IFFALSE 32371
// control := _control [ rand ( 1 , _control ) ] ;
32347: LD_ADDR_VAR 0 4
32351: PUSH
32352: LD_VAR 0 12
32356: PUSH
32357: LD_INT 1
32359: PPUSH
32360: LD_VAR 0 12
32364: PPUSH
32365: CALL_OW 12
32369: ARRAY
32370: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32371: LD_VAR 0 2
32375: PPUSH
32376: LD_VAR 0 5
32380: PPUSH
32381: CALL 32739 0 2
32385: NOT
32386: IFFALSE 32445
// repeat weapon := _weapon [ 1 ] ;
32388: LD_ADDR_VAR 0 5
32392: PUSH
32393: LD_VAR 0 10
32397: PUSH
32398: LD_INT 1
32400: ARRAY
32401: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32402: LD_ADDR_VAR 0 10
32406: PUSH
32407: LD_VAR 0 10
32411: PPUSH
32412: LD_INT 1
32414: PPUSH
32415: CALL_OW 3
32419: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32420: LD_VAR 0 2
32424: PPUSH
32425: LD_VAR 0 5
32429: PPUSH
32430: CALL 32739 0 2
32434: PUSH
32435: LD_VAR 0 10
32439: PUSH
32440: EMPTY
32441: EQUAL
32442: OR
32443: IFFALSE 32388
// result := [ ] ;
32445: LD_ADDR_VAR 0 6
32449: PUSH
32450: EMPTY
32451: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32452: LD_VAR 0 1
32456: PPUSH
32457: LD_VAR 0 2
32461: PPUSH
32462: LD_VAR 0 3
32466: PPUSH
32467: LD_VAR 0 4
32471: PPUSH
32472: LD_VAR 0 5
32476: PPUSH
32477: CALL_OW 448
32481: IFFALSE 32514
// result := [ chassis , engine , control , weapon ] ;
32483: LD_ADDR_VAR 0 6
32487: PUSH
32488: LD_VAR 0 2
32492: PUSH
32493: LD_VAR 0 3
32497: PUSH
32498: LD_VAR 0 4
32502: PUSH
32503: LD_VAR 0 5
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: ST_TO_ADDR
// end ;
32514: LD_VAR 0 6
32518: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32519: LD_INT 0
32521: PPUSH
// if not chassis or not engine then
32522: LD_VAR 0 1
32526: NOT
32527: PUSH
32528: LD_VAR 0 2
32532: NOT
32533: OR
32534: IFFALSE 32538
// exit ;
32536: GO 32734
// case engine of engine_solar :
32538: LD_VAR 0 2
32542: PUSH
32543: LD_INT 2
32545: DOUBLE
32546: EQUAL
32547: IFTRUE 32551
32549: GO 32589
32551: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32552: LD_ADDR_VAR 0 3
32556: PUSH
32557: LD_INT 11
32559: PUSH
32560: LD_INT 12
32562: PUSH
32563: LD_INT 13
32565: PUSH
32566: LD_INT 14
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: LD_INT 2
32574: PUSH
32575: LD_INT 3
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: ST_TO_ADDR
32587: GO 32718
32589: LD_INT 1
32591: DOUBLE
32592: EQUAL
32593: IFTRUE 32597
32595: GO 32659
32597: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32598: LD_ADDR_VAR 0 3
32602: PUSH
32603: LD_INT 11
32605: PUSH
32606: LD_INT 12
32608: PUSH
32609: LD_INT 13
32611: PUSH
32612: LD_INT 14
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: LD_INT 2
32620: PUSH
32621: LD_INT 3
32623: PUSH
32624: LD_INT 4
32626: PUSH
32627: LD_INT 5
32629: PUSH
32630: LD_INT 21
32632: PUSH
32633: LD_INT 23
32635: PUSH
32636: LD_INT 22
32638: PUSH
32639: LD_INT 24
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: ST_TO_ADDR
32657: GO 32718
32659: LD_INT 3
32661: DOUBLE
32662: EQUAL
32663: IFTRUE 32667
32665: GO 32717
32667: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32668: LD_ADDR_VAR 0 3
32672: PUSH
32673: LD_INT 13
32675: PUSH
32676: LD_INT 14
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: LD_INT 3
32684: PUSH
32685: LD_INT 4
32687: PUSH
32688: LD_INT 5
32690: PUSH
32691: LD_INT 21
32693: PUSH
32694: LD_INT 22
32696: PUSH
32697: LD_INT 23
32699: PUSH
32700: LD_INT 24
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: ST_TO_ADDR
32715: GO 32718
32717: POP
// result := ( chassis in result ) ;
32718: LD_ADDR_VAR 0 3
32722: PUSH
32723: LD_VAR 0 1
32727: PUSH
32728: LD_VAR 0 3
32732: IN
32733: ST_TO_ADDR
// end ;
32734: LD_VAR 0 3
32738: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32739: LD_INT 0
32741: PPUSH
// if not chassis or not weapon then
32742: LD_VAR 0 1
32746: NOT
32747: PUSH
32748: LD_VAR 0 2
32752: NOT
32753: OR
32754: IFFALSE 32758
// exit ;
32756: GO 33818
// case weapon of us_machine_gun :
32758: LD_VAR 0 2
32762: PUSH
32763: LD_INT 2
32765: DOUBLE
32766: EQUAL
32767: IFTRUE 32771
32769: GO 32801
32771: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32772: LD_ADDR_VAR 0 3
32776: PUSH
32777: LD_INT 1
32779: PUSH
32780: LD_INT 2
32782: PUSH
32783: LD_INT 3
32785: PUSH
32786: LD_INT 4
32788: PUSH
32789: LD_INT 5
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: ST_TO_ADDR
32799: GO 33802
32801: LD_INT 3
32803: DOUBLE
32804: EQUAL
32805: IFTRUE 32809
32807: GO 32839
32809: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32810: LD_ADDR_VAR 0 3
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: LD_INT 2
32820: PUSH
32821: LD_INT 3
32823: PUSH
32824: LD_INT 4
32826: PUSH
32827: LD_INT 5
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: ST_TO_ADDR
32837: GO 33802
32839: LD_INT 11
32841: DOUBLE
32842: EQUAL
32843: IFTRUE 32847
32845: GO 32877
32847: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32848: LD_ADDR_VAR 0 3
32852: PUSH
32853: LD_INT 1
32855: PUSH
32856: LD_INT 2
32858: PUSH
32859: LD_INT 3
32861: PUSH
32862: LD_INT 4
32864: PUSH
32865: LD_INT 5
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: ST_TO_ADDR
32875: GO 33802
32877: LD_INT 4
32879: DOUBLE
32880: EQUAL
32881: IFTRUE 32885
32883: GO 32911
32885: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32886: LD_ADDR_VAR 0 3
32890: PUSH
32891: LD_INT 2
32893: PUSH
32894: LD_INT 3
32896: PUSH
32897: LD_INT 4
32899: PUSH
32900: LD_INT 5
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: ST_TO_ADDR
32909: GO 33802
32911: LD_INT 5
32913: DOUBLE
32914: EQUAL
32915: IFTRUE 32919
32917: GO 32945
32919: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32920: LD_ADDR_VAR 0 3
32924: PUSH
32925: LD_INT 2
32927: PUSH
32928: LD_INT 3
32930: PUSH
32931: LD_INT 4
32933: PUSH
32934: LD_INT 5
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: ST_TO_ADDR
32943: GO 33802
32945: LD_INT 9
32947: DOUBLE
32948: EQUAL
32949: IFTRUE 32953
32951: GO 32979
32953: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32954: LD_ADDR_VAR 0 3
32958: PUSH
32959: LD_INT 2
32961: PUSH
32962: LD_INT 3
32964: PUSH
32965: LD_INT 4
32967: PUSH
32968: LD_INT 5
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: ST_TO_ADDR
32977: GO 33802
32979: LD_INT 7
32981: DOUBLE
32982: EQUAL
32983: IFTRUE 32987
32985: GO 33013
32987: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32988: LD_ADDR_VAR 0 3
32992: PUSH
32993: LD_INT 2
32995: PUSH
32996: LD_INT 3
32998: PUSH
32999: LD_INT 4
33001: PUSH
33002: LD_INT 5
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: ST_TO_ADDR
33011: GO 33802
33013: LD_INT 12
33015: DOUBLE
33016: EQUAL
33017: IFTRUE 33021
33019: GO 33047
33021: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33022: LD_ADDR_VAR 0 3
33026: PUSH
33027: LD_INT 2
33029: PUSH
33030: LD_INT 3
33032: PUSH
33033: LD_INT 4
33035: PUSH
33036: LD_INT 5
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: ST_TO_ADDR
33045: GO 33802
33047: LD_INT 13
33049: DOUBLE
33050: EQUAL
33051: IFTRUE 33055
33053: GO 33081
33055: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33056: LD_ADDR_VAR 0 3
33060: PUSH
33061: LD_INT 2
33063: PUSH
33064: LD_INT 3
33066: PUSH
33067: LD_INT 4
33069: PUSH
33070: LD_INT 5
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: ST_TO_ADDR
33079: GO 33802
33081: LD_INT 14
33083: DOUBLE
33084: EQUAL
33085: IFTRUE 33089
33087: GO 33107
33089: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33090: LD_ADDR_VAR 0 3
33094: PUSH
33095: LD_INT 4
33097: PUSH
33098: LD_INT 5
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: ST_TO_ADDR
33105: GO 33802
33107: LD_INT 6
33109: DOUBLE
33110: EQUAL
33111: IFTRUE 33115
33113: GO 33133
33115: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33116: LD_ADDR_VAR 0 3
33120: PUSH
33121: LD_INT 4
33123: PUSH
33124: LD_INT 5
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: ST_TO_ADDR
33131: GO 33802
33133: LD_INT 10
33135: DOUBLE
33136: EQUAL
33137: IFTRUE 33141
33139: GO 33159
33141: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33142: LD_ADDR_VAR 0 3
33146: PUSH
33147: LD_INT 4
33149: PUSH
33150: LD_INT 5
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: ST_TO_ADDR
33157: GO 33802
33159: LD_INT 22
33161: DOUBLE
33162: EQUAL
33163: IFTRUE 33167
33165: GO 33193
33167: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33168: LD_ADDR_VAR 0 3
33172: PUSH
33173: LD_INT 11
33175: PUSH
33176: LD_INT 12
33178: PUSH
33179: LD_INT 13
33181: PUSH
33182: LD_INT 14
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: ST_TO_ADDR
33191: GO 33802
33193: LD_INT 23
33195: DOUBLE
33196: EQUAL
33197: IFTRUE 33201
33199: GO 33227
33201: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33202: LD_ADDR_VAR 0 3
33206: PUSH
33207: LD_INT 11
33209: PUSH
33210: LD_INT 12
33212: PUSH
33213: LD_INT 13
33215: PUSH
33216: LD_INT 14
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: ST_TO_ADDR
33225: GO 33802
33227: LD_INT 24
33229: DOUBLE
33230: EQUAL
33231: IFTRUE 33235
33233: GO 33261
33235: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33236: LD_ADDR_VAR 0 3
33240: PUSH
33241: LD_INT 11
33243: PUSH
33244: LD_INT 12
33246: PUSH
33247: LD_INT 13
33249: PUSH
33250: LD_INT 14
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: ST_TO_ADDR
33259: GO 33802
33261: LD_INT 30
33263: DOUBLE
33264: EQUAL
33265: IFTRUE 33269
33267: GO 33295
33269: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33270: LD_ADDR_VAR 0 3
33274: PUSH
33275: LD_INT 11
33277: PUSH
33278: LD_INT 12
33280: PUSH
33281: LD_INT 13
33283: PUSH
33284: LD_INT 14
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: ST_TO_ADDR
33293: GO 33802
33295: LD_INT 25
33297: DOUBLE
33298: EQUAL
33299: IFTRUE 33303
33301: GO 33321
33303: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33304: LD_ADDR_VAR 0 3
33308: PUSH
33309: LD_INT 13
33311: PUSH
33312: LD_INT 14
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: ST_TO_ADDR
33319: GO 33802
33321: LD_INT 27
33323: DOUBLE
33324: EQUAL
33325: IFTRUE 33329
33327: GO 33347
33329: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33330: LD_ADDR_VAR 0 3
33334: PUSH
33335: LD_INT 13
33337: PUSH
33338: LD_INT 14
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: ST_TO_ADDR
33345: GO 33802
33347: LD_INT 92
33349: DOUBLE
33350: EQUAL
33351: IFTRUE 33355
33353: GO 33381
33355: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33356: LD_ADDR_VAR 0 3
33360: PUSH
33361: LD_INT 11
33363: PUSH
33364: LD_INT 12
33366: PUSH
33367: LD_INT 13
33369: PUSH
33370: LD_INT 14
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: ST_TO_ADDR
33379: GO 33802
33381: LD_INT 28
33383: DOUBLE
33384: EQUAL
33385: IFTRUE 33389
33387: GO 33407
33389: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33390: LD_ADDR_VAR 0 3
33394: PUSH
33395: LD_INT 13
33397: PUSH
33398: LD_INT 14
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: ST_TO_ADDR
33405: GO 33802
33407: LD_INT 29
33409: DOUBLE
33410: EQUAL
33411: IFTRUE 33415
33413: GO 33433
33415: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33416: LD_ADDR_VAR 0 3
33420: PUSH
33421: LD_INT 13
33423: PUSH
33424: LD_INT 14
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: ST_TO_ADDR
33431: GO 33802
33433: LD_INT 31
33435: DOUBLE
33436: EQUAL
33437: IFTRUE 33441
33439: GO 33459
33441: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33442: LD_ADDR_VAR 0 3
33446: PUSH
33447: LD_INT 13
33449: PUSH
33450: LD_INT 14
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: ST_TO_ADDR
33457: GO 33802
33459: LD_INT 26
33461: DOUBLE
33462: EQUAL
33463: IFTRUE 33467
33465: GO 33485
33467: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33468: LD_ADDR_VAR 0 3
33472: PUSH
33473: LD_INT 13
33475: PUSH
33476: LD_INT 14
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: ST_TO_ADDR
33483: GO 33802
33485: LD_INT 42
33487: DOUBLE
33488: EQUAL
33489: IFTRUE 33493
33491: GO 33519
33493: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33494: LD_ADDR_VAR 0 3
33498: PUSH
33499: LD_INT 21
33501: PUSH
33502: LD_INT 22
33504: PUSH
33505: LD_INT 23
33507: PUSH
33508: LD_INT 24
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: ST_TO_ADDR
33517: GO 33802
33519: LD_INT 43
33521: DOUBLE
33522: EQUAL
33523: IFTRUE 33527
33525: GO 33553
33527: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33528: LD_ADDR_VAR 0 3
33532: PUSH
33533: LD_INT 21
33535: PUSH
33536: LD_INT 22
33538: PUSH
33539: LD_INT 23
33541: PUSH
33542: LD_INT 24
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: ST_TO_ADDR
33551: GO 33802
33553: LD_INT 44
33555: DOUBLE
33556: EQUAL
33557: IFTRUE 33561
33559: GO 33587
33561: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33562: LD_ADDR_VAR 0 3
33566: PUSH
33567: LD_INT 21
33569: PUSH
33570: LD_INT 22
33572: PUSH
33573: LD_INT 23
33575: PUSH
33576: LD_INT 24
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: ST_TO_ADDR
33585: GO 33802
33587: LD_INT 45
33589: DOUBLE
33590: EQUAL
33591: IFTRUE 33595
33593: GO 33621
33595: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33596: LD_ADDR_VAR 0 3
33600: PUSH
33601: LD_INT 21
33603: PUSH
33604: LD_INT 22
33606: PUSH
33607: LD_INT 23
33609: PUSH
33610: LD_INT 24
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: ST_TO_ADDR
33619: GO 33802
33621: LD_INT 49
33623: DOUBLE
33624: EQUAL
33625: IFTRUE 33629
33627: GO 33655
33629: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33630: LD_ADDR_VAR 0 3
33634: PUSH
33635: LD_INT 21
33637: PUSH
33638: LD_INT 22
33640: PUSH
33641: LD_INT 23
33643: PUSH
33644: LD_INT 24
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: ST_TO_ADDR
33653: GO 33802
33655: LD_INT 51
33657: DOUBLE
33658: EQUAL
33659: IFTRUE 33663
33661: GO 33689
33663: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33664: LD_ADDR_VAR 0 3
33668: PUSH
33669: LD_INT 21
33671: PUSH
33672: LD_INT 22
33674: PUSH
33675: LD_INT 23
33677: PUSH
33678: LD_INT 24
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: ST_TO_ADDR
33687: GO 33802
33689: LD_INT 52
33691: DOUBLE
33692: EQUAL
33693: IFTRUE 33697
33695: GO 33723
33697: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33698: LD_ADDR_VAR 0 3
33702: PUSH
33703: LD_INT 21
33705: PUSH
33706: LD_INT 22
33708: PUSH
33709: LD_INT 23
33711: PUSH
33712: LD_INT 24
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: ST_TO_ADDR
33721: GO 33802
33723: LD_INT 53
33725: DOUBLE
33726: EQUAL
33727: IFTRUE 33731
33729: GO 33749
33731: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33732: LD_ADDR_VAR 0 3
33736: PUSH
33737: LD_INT 23
33739: PUSH
33740: LD_INT 24
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: ST_TO_ADDR
33747: GO 33802
33749: LD_INT 46
33751: DOUBLE
33752: EQUAL
33753: IFTRUE 33757
33755: GO 33775
33757: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33758: LD_ADDR_VAR 0 3
33762: PUSH
33763: LD_INT 23
33765: PUSH
33766: LD_INT 24
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: ST_TO_ADDR
33773: GO 33802
33775: LD_INT 47
33777: DOUBLE
33778: EQUAL
33779: IFTRUE 33783
33781: GO 33801
33783: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33784: LD_ADDR_VAR 0 3
33788: PUSH
33789: LD_INT 23
33791: PUSH
33792: LD_INT 24
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: ST_TO_ADDR
33799: GO 33802
33801: POP
// result := ( chassis in result ) ;
33802: LD_ADDR_VAR 0 3
33806: PUSH
33807: LD_VAR 0 1
33811: PUSH
33812: LD_VAR 0 3
33816: IN
33817: ST_TO_ADDR
// end ;
33818: LD_VAR 0 3
33822: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33823: LD_INT 0
33825: PPUSH
33826: PPUSH
33827: PPUSH
33828: PPUSH
33829: PPUSH
33830: PPUSH
33831: PPUSH
// result := array ;
33832: LD_ADDR_VAR 0 5
33836: PUSH
33837: LD_VAR 0 1
33841: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33842: LD_VAR 0 1
33846: NOT
33847: PUSH
33848: LD_VAR 0 2
33852: NOT
33853: OR
33854: PUSH
33855: LD_VAR 0 3
33859: NOT
33860: OR
33861: PUSH
33862: LD_VAR 0 2
33866: PUSH
33867: LD_VAR 0 1
33871: GREATER
33872: OR
33873: PUSH
33874: LD_VAR 0 3
33878: PUSH
33879: LD_VAR 0 1
33883: GREATER
33884: OR
33885: IFFALSE 33889
// exit ;
33887: GO 34185
// if direction then
33889: LD_VAR 0 4
33893: IFFALSE 33957
// begin d := 1 ;
33895: LD_ADDR_VAR 0 9
33899: PUSH
33900: LD_INT 1
33902: ST_TO_ADDR
// if i_from > i_to then
33903: LD_VAR 0 2
33907: PUSH
33908: LD_VAR 0 3
33912: GREATER
33913: IFFALSE 33939
// length := ( array - i_from ) + i_to else
33915: LD_ADDR_VAR 0 11
33919: PUSH
33920: LD_VAR 0 1
33924: PUSH
33925: LD_VAR 0 2
33929: MINUS
33930: PUSH
33931: LD_VAR 0 3
33935: PLUS
33936: ST_TO_ADDR
33937: GO 33955
// length := i_to - i_from ;
33939: LD_ADDR_VAR 0 11
33943: PUSH
33944: LD_VAR 0 3
33948: PUSH
33949: LD_VAR 0 2
33953: MINUS
33954: ST_TO_ADDR
// end else
33955: GO 34018
// begin d := - 1 ;
33957: LD_ADDR_VAR 0 9
33961: PUSH
33962: LD_INT 1
33964: NEG
33965: ST_TO_ADDR
// if i_from > i_to then
33966: LD_VAR 0 2
33970: PUSH
33971: LD_VAR 0 3
33975: GREATER
33976: IFFALSE 33996
// length := i_from - i_to else
33978: LD_ADDR_VAR 0 11
33982: PUSH
33983: LD_VAR 0 2
33987: PUSH
33988: LD_VAR 0 3
33992: MINUS
33993: ST_TO_ADDR
33994: GO 34018
// length := ( array - i_to ) + i_from ;
33996: LD_ADDR_VAR 0 11
34000: PUSH
34001: LD_VAR 0 1
34005: PUSH
34006: LD_VAR 0 3
34010: MINUS
34011: PUSH
34012: LD_VAR 0 2
34016: PLUS
34017: ST_TO_ADDR
// end ; if not length then
34018: LD_VAR 0 11
34022: NOT
34023: IFFALSE 34027
// exit ;
34025: GO 34185
// tmp := array ;
34027: LD_ADDR_VAR 0 10
34031: PUSH
34032: LD_VAR 0 1
34036: ST_TO_ADDR
// for i = 1 to length do
34037: LD_ADDR_VAR 0 6
34041: PUSH
34042: DOUBLE
34043: LD_INT 1
34045: DEC
34046: ST_TO_ADDR
34047: LD_VAR 0 11
34051: PUSH
34052: FOR_TO
34053: IFFALSE 34173
// begin for j = 1 to array do
34055: LD_ADDR_VAR 0 7
34059: PUSH
34060: DOUBLE
34061: LD_INT 1
34063: DEC
34064: ST_TO_ADDR
34065: LD_VAR 0 1
34069: PUSH
34070: FOR_TO
34071: IFFALSE 34159
// begin k := j + d ;
34073: LD_ADDR_VAR 0 8
34077: PUSH
34078: LD_VAR 0 7
34082: PUSH
34083: LD_VAR 0 9
34087: PLUS
34088: ST_TO_ADDR
// if k > array then
34089: LD_VAR 0 8
34093: PUSH
34094: LD_VAR 0 1
34098: GREATER
34099: IFFALSE 34109
// k := 1 ;
34101: LD_ADDR_VAR 0 8
34105: PUSH
34106: LD_INT 1
34108: ST_TO_ADDR
// if not k then
34109: LD_VAR 0 8
34113: NOT
34114: IFFALSE 34126
// k := array ;
34116: LD_ADDR_VAR 0 8
34120: PUSH
34121: LD_VAR 0 1
34125: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34126: LD_ADDR_VAR 0 10
34130: PUSH
34131: LD_VAR 0 10
34135: PPUSH
34136: LD_VAR 0 8
34140: PPUSH
34141: LD_VAR 0 1
34145: PUSH
34146: LD_VAR 0 7
34150: ARRAY
34151: PPUSH
34152: CALL_OW 1
34156: ST_TO_ADDR
// end ;
34157: GO 34070
34159: POP
34160: POP
// array := tmp ;
34161: LD_ADDR_VAR 0 1
34165: PUSH
34166: LD_VAR 0 10
34170: ST_TO_ADDR
// end ;
34171: GO 34052
34173: POP
34174: POP
// result := array ;
34175: LD_ADDR_VAR 0 5
34179: PUSH
34180: LD_VAR 0 1
34184: ST_TO_ADDR
// end ;
34185: LD_VAR 0 5
34189: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34190: LD_INT 0
34192: PPUSH
34193: PPUSH
// result := 0 ;
34194: LD_ADDR_VAR 0 3
34198: PUSH
34199: LD_INT 0
34201: ST_TO_ADDR
// if not array or not value in array then
34202: LD_VAR 0 1
34206: NOT
34207: PUSH
34208: LD_VAR 0 2
34212: PUSH
34213: LD_VAR 0 1
34217: IN
34218: NOT
34219: OR
34220: IFFALSE 34224
// exit ;
34222: GO 34278
// for i = 1 to array do
34224: LD_ADDR_VAR 0 4
34228: PUSH
34229: DOUBLE
34230: LD_INT 1
34232: DEC
34233: ST_TO_ADDR
34234: LD_VAR 0 1
34238: PUSH
34239: FOR_TO
34240: IFFALSE 34276
// if value = array [ i ] then
34242: LD_VAR 0 2
34246: PUSH
34247: LD_VAR 0 1
34251: PUSH
34252: LD_VAR 0 4
34256: ARRAY
34257: EQUAL
34258: IFFALSE 34274
// begin result := i ;
34260: LD_ADDR_VAR 0 3
34264: PUSH
34265: LD_VAR 0 4
34269: ST_TO_ADDR
// exit ;
34270: POP
34271: POP
34272: GO 34278
// end ;
34274: GO 34239
34276: POP
34277: POP
// end ;
34278: LD_VAR 0 3
34282: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34283: LD_INT 0
34285: PPUSH
// vc_chassis := chassis ;
34286: LD_ADDR_OWVAR 37
34290: PUSH
34291: LD_VAR 0 1
34295: ST_TO_ADDR
// vc_engine := engine ;
34296: LD_ADDR_OWVAR 39
34300: PUSH
34301: LD_VAR 0 2
34305: ST_TO_ADDR
// vc_control := control ;
34306: LD_ADDR_OWVAR 38
34310: PUSH
34311: LD_VAR 0 3
34315: ST_TO_ADDR
// vc_weapon := weapon ;
34316: LD_ADDR_OWVAR 40
34320: PUSH
34321: LD_VAR 0 4
34325: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34326: LD_ADDR_OWVAR 41
34330: PUSH
34331: LD_VAR 0 5
34335: ST_TO_ADDR
// end ;
34336: LD_VAR 0 6
34340: RET
// export function WantPlant ( unit ) ; var task ; begin
34341: LD_INT 0
34343: PPUSH
34344: PPUSH
// result := false ;
34345: LD_ADDR_VAR 0 2
34349: PUSH
34350: LD_INT 0
34352: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34353: LD_ADDR_VAR 0 3
34357: PUSH
34358: LD_VAR 0 1
34362: PPUSH
34363: CALL_OW 437
34367: ST_TO_ADDR
// if task then
34368: LD_VAR 0 3
34372: IFFALSE 34400
// if task [ 1 ] [ 1 ] = p then
34374: LD_VAR 0 3
34378: PUSH
34379: LD_INT 1
34381: ARRAY
34382: PUSH
34383: LD_INT 1
34385: ARRAY
34386: PUSH
34387: LD_STRING p
34389: EQUAL
34390: IFFALSE 34400
// result := true ;
34392: LD_ADDR_VAR 0 2
34396: PUSH
34397: LD_INT 1
34399: ST_TO_ADDR
// end ;
34400: LD_VAR 0 2
34404: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34405: LD_INT 0
34407: PPUSH
34408: PPUSH
34409: PPUSH
34410: PPUSH
// if pos < 1 then
34411: LD_VAR 0 2
34415: PUSH
34416: LD_INT 1
34418: LESS
34419: IFFALSE 34423
// exit ;
34421: GO 34726
// if pos = 1 then
34423: LD_VAR 0 2
34427: PUSH
34428: LD_INT 1
34430: EQUAL
34431: IFFALSE 34464
// result := Replace ( arr , pos [ 1 ] , value ) else
34433: LD_ADDR_VAR 0 4
34437: PUSH
34438: LD_VAR 0 1
34442: PPUSH
34443: LD_VAR 0 2
34447: PUSH
34448: LD_INT 1
34450: ARRAY
34451: PPUSH
34452: LD_VAR 0 3
34456: PPUSH
34457: CALL_OW 1
34461: ST_TO_ADDR
34462: GO 34726
// begin tmp := arr ;
34464: LD_ADDR_VAR 0 6
34468: PUSH
34469: LD_VAR 0 1
34473: ST_TO_ADDR
// s_arr := [ tmp ] ;
34474: LD_ADDR_VAR 0 7
34478: PUSH
34479: LD_VAR 0 6
34483: PUSH
34484: EMPTY
34485: LIST
34486: ST_TO_ADDR
// for i = 1 to pos - 1 do
34487: LD_ADDR_VAR 0 5
34491: PUSH
34492: DOUBLE
34493: LD_INT 1
34495: DEC
34496: ST_TO_ADDR
34497: LD_VAR 0 2
34501: PUSH
34502: LD_INT 1
34504: MINUS
34505: PUSH
34506: FOR_TO
34507: IFFALSE 34552
// begin tmp := tmp [ pos [ i ] ] ;
34509: LD_ADDR_VAR 0 6
34513: PUSH
34514: LD_VAR 0 6
34518: PUSH
34519: LD_VAR 0 2
34523: PUSH
34524: LD_VAR 0 5
34528: ARRAY
34529: ARRAY
34530: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34531: LD_ADDR_VAR 0 7
34535: PUSH
34536: LD_VAR 0 7
34540: PUSH
34541: LD_VAR 0 6
34545: PUSH
34546: EMPTY
34547: LIST
34548: ADD
34549: ST_TO_ADDR
// end ;
34550: GO 34506
34552: POP
34553: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34554: LD_ADDR_VAR 0 6
34558: PUSH
34559: LD_VAR 0 6
34563: PPUSH
34564: LD_VAR 0 2
34568: PUSH
34569: LD_VAR 0 2
34573: ARRAY
34574: PPUSH
34575: LD_VAR 0 3
34579: PPUSH
34580: CALL_OW 1
34584: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34585: LD_ADDR_VAR 0 7
34589: PUSH
34590: LD_VAR 0 7
34594: PPUSH
34595: LD_VAR 0 7
34599: PPUSH
34600: LD_VAR 0 6
34604: PPUSH
34605: CALL_OW 1
34609: ST_TO_ADDR
// for i = s_arr downto 2 do
34610: LD_ADDR_VAR 0 5
34614: PUSH
34615: DOUBLE
34616: LD_VAR 0 7
34620: INC
34621: ST_TO_ADDR
34622: LD_INT 2
34624: PUSH
34625: FOR_DOWNTO
34626: IFFALSE 34710
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34628: LD_ADDR_VAR 0 6
34632: PUSH
34633: LD_VAR 0 7
34637: PUSH
34638: LD_VAR 0 5
34642: PUSH
34643: LD_INT 1
34645: MINUS
34646: ARRAY
34647: PPUSH
34648: LD_VAR 0 2
34652: PUSH
34653: LD_VAR 0 5
34657: PUSH
34658: LD_INT 1
34660: MINUS
34661: ARRAY
34662: PPUSH
34663: LD_VAR 0 7
34667: PUSH
34668: LD_VAR 0 5
34672: ARRAY
34673: PPUSH
34674: CALL_OW 1
34678: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34679: LD_ADDR_VAR 0 7
34683: PUSH
34684: LD_VAR 0 7
34688: PPUSH
34689: LD_VAR 0 5
34693: PUSH
34694: LD_INT 1
34696: MINUS
34697: PPUSH
34698: LD_VAR 0 6
34702: PPUSH
34703: CALL_OW 1
34707: ST_TO_ADDR
// end ;
34708: GO 34625
34710: POP
34711: POP
// result := s_arr [ 1 ] ;
34712: LD_ADDR_VAR 0 4
34716: PUSH
34717: LD_VAR 0 7
34721: PUSH
34722: LD_INT 1
34724: ARRAY
34725: ST_TO_ADDR
// end ; end ;
34726: LD_VAR 0 4
34730: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34731: LD_INT 0
34733: PPUSH
34734: PPUSH
// if not list then
34735: LD_VAR 0 1
34739: NOT
34740: IFFALSE 34744
// exit ;
34742: GO 34835
// i := list [ pos1 ] ;
34744: LD_ADDR_VAR 0 5
34748: PUSH
34749: LD_VAR 0 1
34753: PUSH
34754: LD_VAR 0 2
34758: ARRAY
34759: ST_TO_ADDR
// if not i then
34760: LD_VAR 0 5
34764: NOT
34765: IFFALSE 34769
// exit ;
34767: GO 34835
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34769: LD_ADDR_VAR 0 1
34773: PUSH
34774: LD_VAR 0 1
34778: PPUSH
34779: LD_VAR 0 2
34783: PPUSH
34784: LD_VAR 0 1
34788: PUSH
34789: LD_VAR 0 3
34793: ARRAY
34794: PPUSH
34795: CALL_OW 1
34799: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34800: LD_ADDR_VAR 0 1
34804: PUSH
34805: LD_VAR 0 1
34809: PPUSH
34810: LD_VAR 0 3
34814: PPUSH
34815: LD_VAR 0 5
34819: PPUSH
34820: CALL_OW 1
34824: ST_TO_ADDR
// result := list ;
34825: LD_ADDR_VAR 0 4
34829: PUSH
34830: LD_VAR 0 1
34834: ST_TO_ADDR
// end ;
34835: LD_VAR 0 4
34839: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34840: LD_INT 0
34842: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34843: LD_ADDR_VAR 0 5
34847: PUSH
34848: LD_VAR 0 1
34852: PPUSH
34853: CALL_OW 250
34857: PPUSH
34858: LD_VAR 0 1
34862: PPUSH
34863: CALL_OW 251
34867: PPUSH
34868: LD_VAR 0 2
34872: PPUSH
34873: LD_VAR 0 3
34877: PPUSH
34878: LD_VAR 0 4
34882: PPUSH
34883: CALL 35261 0 5
34887: ST_TO_ADDR
// end ;
34888: LD_VAR 0 5
34892: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34893: LD_INT 0
34895: PPUSH
34896: PPUSH
34897: PPUSH
34898: PPUSH
// if not list or not unit then
34899: LD_VAR 0 2
34903: NOT
34904: PUSH
34905: LD_VAR 0 1
34909: NOT
34910: OR
34911: IFFALSE 34915
// exit ;
34913: GO 35256
// result := [ ] ;
34915: LD_ADDR_VAR 0 5
34919: PUSH
34920: EMPTY
34921: ST_TO_ADDR
// for i in list do
34922: LD_ADDR_VAR 0 6
34926: PUSH
34927: LD_VAR 0 2
34931: PUSH
34932: FOR_IN
34933: IFFALSE 35151
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34935: LD_ADDR_VAR 0 8
34939: PUSH
34940: LD_VAR 0 1
34944: PPUSH
34945: LD_VAR 0 6
34949: PUSH
34950: LD_INT 1
34952: ARRAY
34953: PPUSH
34954: LD_VAR 0 6
34958: PUSH
34959: LD_INT 2
34961: ARRAY
34962: PPUSH
34963: CALL_OW 297
34967: ST_TO_ADDR
// if not Count ( result ) then
34968: LD_VAR 0 5
34972: PPUSH
34973: CALL 31545 0 1
34977: NOT
34978: IFFALSE 35011
// begin result := Join ( result , [ i , tmp ] ) ;
34980: LD_ADDR_VAR 0 5
34984: PUSH
34985: LD_VAR 0 5
34989: PPUSH
34990: LD_VAR 0 6
34994: PUSH
34995: LD_VAR 0 8
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PPUSH
35004: CALL 67145 0 2
35008: ST_TO_ADDR
// continue ;
35009: GO 34932
// end ; if result [ result ] [ 2 ] <= tmp then
35011: LD_VAR 0 5
35015: PUSH
35016: LD_VAR 0 5
35020: ARRAY
35021: PUSH
35022: LD_INT 2
35024: ARRAY
35025: PUSH
35026: LD_VAR 0 8
35030: LESSEQUAL
35031: IFFALSE 35064
// result := Join ( result , [ i , tmp ] ) else
35033: LD_ADDR_VAR 0 5
35037: PUSH
35038: LD_VAR 0 5
35042: PPUSH
35043: LD_VAR 0 6
35047: PUSH
35048: LD_VAR 0 8
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PPUSH
35057: CALL 67145 0 2
35061: ST_TO_ADDR
35062: GO 35149
// begin for j := 1 to Count ( result ) do
35064: LD_ADDR_VAR 0 7
35068: PUSH
35069: DOUBLE
35070: LD_INT 1
35072: DEC
35073: ST_TO_ADDR
35074: LD_VAR 0 5
35078: PPUSH
35079: CALL 31545 0 1
35083: PUSH
35084: FOR_TO
35085: IFFALSE 35147
// begin if tmp < result [ j ] [ 2 ] then
35087: LD_VAR 0 8
35091: PUSH
35092: LD_VAR 0 5
35096: PUSH
35097: LD_VAR 0 7
35101: ARRAY
35102: PUSH
35103: LD_INT 2
35105: ARRAY
35106: LESS
35107: IFFALSE 35145
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35109: LD_ADDR_VAR 0 5
35113: PUSH
35114: LD_VAR 0 5
35118: PPUSH
35119: LD_VAR 0 7
35123: PPUSH
35124: LD_VAR 0 6
35128: PUSH
35129: LD_VAR 0 8
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PPUSH
35138: CALL_OW 2
35142: ST_TO_ADDR
// break ;
35143: GO 35147
// end ; end ;
35145: GO 35084
35147: POP
35148: POP
// end ; end ;
35149: GO 34932
35151: POP
35152: POP
// if result and not asc then
35153: LD_VAR 0 5
35157: PUSH
35158: LD_VAR 0 3
35162: NOT
35163: AND
35164: IFFALSE 35181
// result := ReverseArray ( result ) ;
35166: LD_ADDR_VAR 0 5
35170: PUSH
35171: LD_VAR 0 5
35175: PPUSH
35176: CALL 62421 0 1
35180: ST_TO_ADDR
// tmp := [ ] ;
35181: LD_ADDR_VAR 0 8
35185: PUSH
35186: EMPTY
35187: ST_TO_ADDR
// if mode then
35188: LD_VAR 0 4
35192: IFFALSE 35256
// begin for i := 1 to result do
35194: LD_ADDR_VAR 0 6
35198: PUSH
35199: DOUBLE
35200: LD_INT 1
35202: DEC
35203: ST_TO_ADDR
35204: LD_VAR 0 5
35208: PUSH
35209: FOR_TO
35210: IFFALSE 35244
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35212: LD_ADDR_VAR 0 8
35216: PUSH
35217: LD_VAR 0 8
35221: PPUSH
35222: LD_VAR 0 5
35226: PUSH
35227: LD_VAR 0 6
35231: ARRAY
35232: PUSH
35233: LD_INT 1
35235: ARRAY
35236: PPUSH
35237: CALL 67145 0 2
35241: ST_TO_ADDR
35242: GO 35209
35244: POP
35245: POP
// result := tmp ;
35246: LD_ADDR_VAR 0 5
35250: PUSH
35251: LD_VAR 0 8
35255: ST_TO_ADDR
// end ; end ;
35256: LD_VAR 0 5
35260: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35261: LD_INT 0
35263: PPUSH
35264: PPUSH
35265: PPUSH
35266: PPUSH
// if not list then
35267: LD_VAR 0 3
35271: NOT
35272: IFFALSE 35276
// exit ;
35274: GO 35664
// result := [ ] ;
35276: LD_ADDR_VAR 0 6
35280: PUSH
35281: EMPTY
35282: ST_TO_ADDR
// for i in list do
35283: LD_ADDR_VAR 0 7
35287: PUSH
35288: LD_VAR 0 3
35292: PUSH
35293: FOR_IN
35294: IFFALSE 35496
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35296: LD_ADDR_VAR 0 9
35300: PUSH
35301: LD_VAR 0 7
35305: PPUSH
35306: LD_VAR 0 1
35310: PPUSH
35311: LD_VAR 0 2
35315: PPUSH
35316: CALL_OW 297
35320: ST_TO_ADDR
// if not result then
35321: LD_VAR 0 6
35325: NOT
35326: IFFALSE 35352
// result := [ [ i , tmp ] ] else
35328: LD_ADDR_VAR 0 6
35332: PUSH
35333: LD_VAR 0 7
35337: PUSH
35338: LD_VAR 0 9
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: EMPTY
35348: LIST
35349: ST_TO_ADDR
35350: GO 35494
// begin if result [ result ] [ 2 ] < tmp then
35352: LD_VAR 0 6
35356: PUSH
35357: LD_VAR 0 6
35361: ARRAY
35362: PUSH
35363: LD_INT 2
35365: ARRAY
35366: PUSH
35367: LD_VAR 0 9
35371: LESS
35372: IFFALSE 35414
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35374: LD_ADDR_VAR 0 6
35378: PUSH
35379: LD_VAR 0 6
35383: PPUSH
35384: LD_VAR 0 6
35388: PUSH
35389: LD_INT 1
35391: PLUS
35392: PPUSH
35393: LD_VAR 0 7
35397: PUSH
35398: LD_VAR 0 9
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PPUSH
35407: CALL_OW 2
35411: ST_TO_ADDR
35412: GO 35494
// for j = 1 to result do
35414: LD_ADDR_VAR 0 8
35418: PUSH
35419: DOUBLE
35420: LD_INT 1
35422: DEC
35423: ST_TO_ADDR
35424: LD_VAR 0 6
35428: PUSH
35429: FOR_TO
35430: IFFALSE 35492
// begin if tmp < result [ j ] [ 2 ] then
35432: LD_VAR 0 9
35436: PUSH
35437: LD_VAR 0 6
35441: PUSH
35442: LD_VAR 0 8
35446: ARRAY
35447: PUSH
35448: LD_INT 2
35450: ARRAY
35451: LESS
35452: IFFALSE 35490
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35454: LD_ADDR_VAR 0 6
35458: PUSH
35459: LD_VAR 0 6
35463: PPUSH
35464: LD_VAR 0 8
35468: PPUSH
35469: LD_VAR 0 7
35473: PUSH
35474: LD_VAR 0 9
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PPUSH
35483: CALL_OW 2
35487: ST_TO_ADDR
// break ;
35488: GO 35492
// end ; end ;
35490: GO 35429
35492: POP
35493: POP
// end ; end ;
35494: GO 35293
35496: POP
35497: POP
// if result and not asc then
35498: LD_VAR 0 6
35502: PUSH
35503: LD_VAR 0 4
35507: NOT
35508: AND
35509: IFFALSE 35584
// begin tmp := result ;
35511: LD_ADDR_VAR 0 9
35515: PUSH
35516: LD_VAR 0 6
35520: ST_TO_ADDR
// for i = tmp downto 1 do
35521: LD_ADDR_VAR 0 7
35525: PUSH
35526: DOUBLE
35527: LD_VAR 0 9
35531: INC
35532: ST_TO_ADDR
35533: LD_INT 1
35535: PUSH
35536: FOR_DOWNTO
35537: IFFALSE 35582
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35539: LD_ADDR_VAR 0 6
35543: PUSH
35544: LD_VAR 0 6
35548: PPUSH
35549: LD_VAR 0 9
35553: PUSH
35554: LD_VAR 0 7
35558: MINUS
35559: PUSH
35560: LD_INT 1
35562: PLUS
35563: PPUSH
35564: LD_VAR 0 9
35568: PUSH
35569: LD_VAR 0 7
35573: ARRAY
35574: PPUSH
35575: CALL_OW 1
35579: ST_TO_ADDR
35580: GO 35536
35582: POP
35583: POP
// end ; tmp := [ ] ;
35584: LD_ADDR_VAR 0 9
35588: PUSH
35589: EMPTY
35590: ST_TO_ADDR
// if mode then
35591: LD_VAR 0 5
35595: IFFALSE 35664
// begin for i = 1 to result do
35597: LD_ADDR_VAR 0 7
35601: PUSH
35602: DOUBLE
35603: LD_INT 1
35605: DEC
35606: ST_TO_ADDR
35607: LD_VAR 0 6
35611: PUSH
35612: FOR_TO
35613: IFFALSE 35652
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35615: LD_ADDR_VAR 0 9
35619: PUSH
35620: LD_VAR 0 9
35624: PPUSH
35625: LD_VAR 0 7
35629: PPUSH
35630: LD_VAR 0 6
35634: PUSH
35635: LD_VAR 0 7
35639: ARRAY
35640: PUSH
35641: LD_INT 1
35643: ARRAY
35644: PPUSH
35645: CALL_OW 1
35649: ST_TO_ADDR
35650: GO 35612
35652: POP
35653: POP
// result := tmp ;
35654: LD_ADDR_VAR 0 6
35658: PUSH
35659: LD_VAR 0 9
35663: ST_TO_ADDR
// end ; end ;
35664: LD_VAR 0 6
35668: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35669: LD_INT 0
35671: PPUSH
35672: PPUSH
35673: PPUSH
35674: PPUSH
35675: PPUSH
35676: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35677: LD_ADDR_VAR 0 5
35681: PUSH
35682: LD_INT 0
35684: PUSH
35685: LD_INT 0
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: EMPTY
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: ST_TO_ADDR
// if not x or not y then
35699: LD_VAR 0 2
35703: NOT
35704: PUSH
35705: LD_VAR 0 3
35709: NOT
35710: OR
35711: IFFALSE 35715
// exit ;
35713: GO 37365
// if not range then
35715: LD_VAR 0 4
35719: NOT
35720: IFFALSE 35730
// range := 10 ;
35722: LD_ADDR_VAR 0 4
35726: PUSH
35727: LD_INT 10
35729: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35730: LD_ADDR_VAR 0 8
35734: PUSH
35735: LD_INT 81
35737: PUSH
35738: LD_VAR 0 1
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 92
35749: PUSH
35750: LD_VAR 0 2
35754: PUSH
35755: LD_VAR 0 3
35759: PUSH
35760: LD_VAR 0 4
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 3
35773: PUSH
35774: LD_INT 21
35776: PUSH
35777: LD_INT 3
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: LIST
35792: PPUSH
35793: CALL_OW 69
35797: ST_TO_ADDR
// if not tmp then
35798: LD_VAR 0 8
35802: NOT
35803: IFFALSE 35807
// exit ;
35805: GO 37365
// for i in tmp do
35807: LD_ADDR_VAR 0 6
35811: PUSH
35812: LD_VAR 0 8
35816: PUSH
35817: FOR_IN
35818: IFFALSE 37340
// begin points := [ 0 , 0 , 0 ] ;
35820: LD_ADDR_VAR 0 9
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: LD_INT 0
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: LIST
35838: ST_TO_ADDR
// bpoints := 1 ;
35839: LD_ADDR_VAR 0 10
35843: PUSH
35844: LD_INT 1
35846: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35847: LD_VAR 0 6
35851: PPUSH
35852: CALL_OW 247
35856: PUSH
35857: LD_INT 1
35859: DOUBLE
35860: EQUAL
35861: IFTRUE 35865
35863: GO 36443
35865: POP
// begin if GetClass ( i ) = 1 then
35866: LD_VAR 0 6
35870: PPUSH
35871: CALL_OW 257
35875: PUSH
35876: LD_INT 1
35878: EQUAL
35879: IFFALSE 35900
// points := [ 10 , 5 , 3 ] ;
35881: LD_ADDR_VAR 0 9
35885: PUSH
35886: LD_INT 10
35888: PUSH
35889: LD_INT 5
35891: PUSH
35892: LD_INT 3
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: LIST
35899: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35900: LD_VAR 0 6
35904: PPUSH
35905: CALL_OW 257
35909: PUSH
35910: LD_INT 2
35912: PUSH
35913: LD_INT 3
35915: PUSH
35916: LD_INT 4
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: LIST
35923: IN
35924: IFFALSE 35945
// points := [ 3 , 2 , 1 ] ;
35926: LD_ADDR_VAR 0 9
35930: PUSH
35931: LD_INT 3
35933: PUSH
35934: LD_INT 2
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: LIST
35944: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35945: LD_VAR 0 6
35949: PPUSH
35950: CALL_OW 257
35954: PUSH
35955: LD_INT 5
35957: EQUAL
35958: IFFALSE 35979
// points := [ 130 , 5 , 2 ] ;
35960: LD_ADDR_VAR 0 9
35964: PUSH
35965: LD_INT 130
35967: PUSH
35968: LD_INT 5
35970: PUSH
35971: LD_INT 2
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: LIST
35978: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35979: LD_VAR 0 6
35983: PPUSH
35984: CALL_OW 257
35988: PUSH
35989: LD_INT 8
35991: EQUAL
35992: IFFALSE 36013
// points := [ 35 , 35 , 30 ] ;
35994: LD_ADDR_VAR 0 9
35998: PUSH
35999: LD_INT 35
36001: PUSH
36002: LD_INT 35
36004: PUSH
36005: LD_INT 30
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: LIST
36012: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36013: LD_VAR 0 6
36017: PPUSH
36018: CALL_OW 257
36022: PUSH
36023: LD_INT 9
36025: EQUAL
36026: IFFALSE 36047
// points := [ 20 , 55 , 40 ] ;
36028: LD_ADDR_VAR 0 9
36032: PUSH
36033: LD_INT 20
36035: PUSH
36036: LD_INT 55
36038: PUSH
36039: LD_INT 40
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: LIST
36046: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36047: LD_VAR 0 6
36051: PPUSH
36052: CALL_OW 257
36056: PUSH
36057: LD_INT 12
36059: PUSH
36060: LD_INT 16
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: IN
36067: IFFALSE 36088
// points := [ 5 , 3 , 2 ] ;
36069: LD_ADDR_VAR 0 9
36073: PUSH
36074: LD_INT 5
36076: PUSH
36077: LD_INT 3
36079: PUSH
36080: LD_INT 2
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: LIST
36087: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36088: LD_VAR 0 6
36092: PPUSH
36093: CALL_OW 257
36097: PUSH
36098: LD_INT 17
36100: EQUAL
36101: IFFALSE 36122
// points := [ 100 , 50 , 75 ] ;
36103: LD_ADDR_VAR 0 9
36107: PUSH
36108: LD_INT 100
36110: PUSH
36111: LD_INT 50
36113: PUSH
36114: LD_INT 75
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36122: LD_VAR 0 6
36126: PPUSH
36127: CALL_OW 257
36131: PUSH
36132: LD_INT 15
36134: EQUAL
36135: IFFALSE 36156
// points := [ 10 , 5 , 3 ] ;
36137: LD_ADDR_VAR 0 9
36141: PUSH
36142: LD_INT 10
36144: PUSH
36145: LD_INT 5
36147: PUSH
36148: LD_INT 3
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: LIST
36155: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36156: LD_VAR 0 6
36160: PPUSH
36161: CALL_OW 257
36165: PUSH
36166: LD_INT 14
36168: EQUAL
36169: IFFALSE 36190
// points := [ 10 , 0 , 0 ] ;
36171: LD_ADDR_VAR 0 9
36175: PUSH
36176: LD_INT 10
36178: PUSH
36179: LD_INT 0
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: LIST
36189: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36190: LD_VAR 0 6
36194: PPUSH
36195: CALL_OW 257
36199: PUSH
36200: LD_INT 11
36202: EQUAL
36203: IFFALSE 36224
// points := [ 30 , 10 , 5 ] ;
36205: LD_ADDR_VAR 0 9
36209: PUSH
36210: LD_INT 30
36212: PUSH
36213: LD_INT 10
36215: PUSH
36216: LD_INT 5
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: LIST
36223: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36224: LD_VAR 0 1
36228: PPUSH
36229: LD_INT 5
36231: PPUSH
36232: CALL_OW 321
36236: PUSH
36237: LD_INT 2
36239: EQUAL
36240: IFFALSE 36257
// bpoints := bpoints * 1.8 ;
36242: LD_ADDR_VAR 0 10
36246: PUSH
36247: LD_VAR 0 10
36251: PUSH
36252: LD_REAL  1.80000000000000E+0000
36255: MUL
36256: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36257: LD_VAR 0 6
36261: PPUSH
36262: CALL_OW 257
36266: PUSH
36267: LD_INT 1
36269: PUSH
36270: LD_INT 2
36272: PUSH
36273: LD_INT 3
36275: PUSH
36276: LD_INT 4
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: IN
36285: PUSH
36286: LD_VAR 0 1
36290: PPUSH
36291: LD_INT 51
36293: PPUSH
36294: CALL_OW 321
36298: PUSH
36299: LD_INT 2
36301: EQUAL
36302: AND
36303: IFFALSE 36320
// bpoints := bpoints * 1.2 ;
36305: LD_ADDR_VAR 0 10
36309: PUSH
36310: LD_VAR 0 10
36314: PUSH
36315: LD_REAL  1.20000000000000E+0000
36318: MUL
36319: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36320: LD_VAR 0 6
36324: PPUSH
36325: CALL_OW 257
36329: PUSH
36330: LD_INT 5
36332: PUSH
36333: LD_INT 7
36335: PUSH
36336: LD_INT 9
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: LIST
36343: IN
36344: PUSH
36345: LD_VAR 0 1
36349: PPUSH
36350: LD_INT 52
36352: PPUSH
36353: CALL_OW 321
36357: PUSH
36358: LD_INT 2
36360: EQUAL
36361: AND
36362: IFFALSE 36379
// bpoints := bpoints * 1.5 ;
36364: LD_ADDR_VAR 0 10
36368: PUSH
36369: LD_VAR 0 10
36373: PUSH
36374: LD_REAL  1.50000000000000E+0000
36377: MUL
36378: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36379: LD_VAR 0 1
36383: PPUSH
36384: LD_INT 66
36386: PPUSH
36387: CALL_OW 321
36391: PUSH
36392: LD_INT 2
36394: EQUAL
36395: IFFALSE 36412
// bpoints := bpoints * 1.1 ;
36397: LD_ADDR_VAR 0 10
36401: PUSH
36402: LD_VAR 0 10
36406: PUSH
36407: LD_REAL  1.10000000000000E+0000
36410: MUL
36411: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36412: LD_ADDR_VAR 0 10
36416: PUSH
36417: LD_VAR 0 10
36421: PUSH
36422: LD_VAR 0 6
36426: PPUSH
36427: LD_INT 1
36429: PPUSH
36430: CALL_OW 259
36434: PUSH
36435: LD_REAL  1.15000000000000E+0000
36438: MUL
36439: MUL
36440: ST_TO_ADDR
// end ; unit_vehicle :
36441: GO 37269
36443: LD_INT 2
36445: DOUBLE
36446: EQUAL
36447: IFTRUE 36451
36449: GO 37257
36451: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36452: LD_VAR 0 6
36456: PPUSH
36457: CALL_OW 264
36461: PUSH
36462: LD_INT 2
36464: PUSH
36465: LD_INT 42
36467: PUSH
36468: LD_INT 24
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: LIST
36475: IN
36476: IFFALSE 36497
// points := [ 25 , 5 , 3 ] ;
36478: LD_ADDR_VAR 0 9
36482: PUSH
36483: LD_INT 25
36485: PUSH
36486: LD_INT 5
36488: PUSH
36489: LD_INT 3
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: LIST
36496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36497: LD_VAR 0 6
36501: PPUSH
36502: CALL_OW 264
36506: PUSH
36507: LD_INT 4
36509: PUSH
36510: LD_INT 43
36512: PUSH
36513: LD_INT 25
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: LIST
36520: IN
36521: IFFALSE 36542
// points := [ 40 , 15 , 5 ] ;
36523: LD_ADDR_VAR 0 9
36527: PUSH
36528: LD_INT 40
36530: PUSH
36531: LD_INT 15
36533: PUSH
36534: LD_INT 5
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: LIST
36541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36542: LD_VAR 0 6
36546: PPUSH
36547: CALL_OW 264
36551: PUSH
36552: LD_INT 3
36554: PUSH
36555: LD_INT 23
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: IN
36562: IFFALSE 36583
// points := [ 7 , 25 , 8 ] ;
36564: LD_ADDR_VAR 0 9
36568: PUSH
36569: LD_INT 7
36571: PUSH
36572: LD_INT 25
36574: PUSH
36575: LD_INT 8
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: LIST
36582: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36583: LD_VAR 0 6
36587: PPUSH
36588: CALL_OW 264
36592: PUSH
36593: LD_INT 5
36595: PUSH
36596: LD_INT 27
36598: PUSH
36599: LD_INT 44
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: LIST
36606: IN
36607: IFFALSE 36628
// points := [ 14 , 50 , 16 ] ;
36609: LD_ADDR_VAR 0 9
36613: PUSH
36614: LD_INT 14
36616: PUSH
36617: LD_INT 50
36619: PUSH
36620: LD_INT 16
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: LIST
36627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36628: LD_VAR 0 6
36632: PPUSH
36633: CALL_OW 264
36637: PUSH
36638: LD_INT 6
36640: PUSH
36641: LD_INT 46
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: IN
36648: IFFALSE 36669
// points := [ 32 , 120 , 70 ] ;
36650: LD_ADDR_VAR 0 9
36654: PUSH
36655: LD_INT 32
36657: PUSH
36658: LD_INT 120
36660: PUSH
36661: LD_INT 70
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: LIST
36668: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36669: LD_VAR 0 6
36673: PPUSH
36674: CALL_OW 264
36678: PUSH
36679: LD_INT 7
36681: PUSH
36682: LD_INT 28
36684: PUSH
36685: LD_INT 45
36687: PUSH
36688: LD_INT 92
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: IN
36697: IFFALSE 36718
// points := [ 35 , 20 , 45 ] ;
36699: LD_ADDR_VAR 0 9
36703: PUSH
36704: LD_INT 35
36706: PUSH
36707: LD_INT 20
36709: PUSH
36710: LD_INT 45
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: LIST
36717: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36718: LD_VAR 0 6
36722: PPUSH
36723: CALL_OW 264
36727: PUSH
36728: LD_INT 47
36730: PUSH
36731: EMPTY
36732: LIST
36733: IN
36734: IFFALSE 36755
// points := [ 67 , 45 , 75 ] ;
36736: LD_ADDR_VAR 0 9
36740: PUSH
36741: LD_INT 67
36743: PUSH
36744: LD_INT 45
36746: PUSH
36747: LD_INT 75
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: LIST
36754: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36755: LD_VAR 0 6
36759: PPUSH
36760: CALL_OW 264
36764: PUSH
36765: LD_INT 26
36767: PUSH
36768: EMPTY
36769: LIST
36770: IN
36771: IFFALSE 36792
// points := [ 120 , 30 , 80 ] ;
36773: LD_ADDR_VAR 0 9
36777: PUSH
36778: LD_INT 120
36780: PUSH
36781: LD_INT 30
36783: PUSH
36784: LD_INT 80
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: LIST
36791: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36792: LD_VAR 0 6
36796: PPUSH
36797: CALL_OW 264
36801: PUSH
36802: LD_INT 22
36804: PUSH
36805: EMPTY
36806: LIST
36807: IN
36808: IFFALSE 36829
// points := [ 40 , 1 , 1 ] ;
36810: LD_ADDR_VAR 0 9
36814: PUSH
36815: LD_INT 40
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: LIST
36828: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36829: LD_VAR 0 6
36833: PPUSH
36834: CALL_OW 264
36838: PUSH
36839: LD_INT 29
36841: PUSH
36842: EMPTY
36843: LIST
36844: IN
36845: IFFALSE 36866
// points := [ 70 , 200 , 400 ] ;
36847: LD_ADDR_VAR 0 9
36851: PUSH
36852: LD_INT 70
36854: PUSH
36855: LD_INT 200
36857: PUSH
36858: LD_INT 400
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: LIST
36865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36866: LD_VAR 0 6
36870: PPUSH
36871: CALL_OW 264
36875: PUSH
36876: LD_INT 14
36878: PUSH
36879: LD_INT 53
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: IN
36886: IFFALSE 36907
// points := [ 40 , 10 , 20 ] ;
36888: LD_ADDR_VAR 0 9
36892: PUSH
36893: LD_INT 40
36895: PUSH
36896: LD_INT 10
36898: PUSH
36899: LD_INT 20
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: LIST
36906: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36907: LD_VAR 0 6
36911: PPUSH
36912: CALL_OW 264
36916: PUSH
36917: LD_INT 9
36919: PUSH
36920: EMPTY
36921: LIST
36922: IN
36923: IFFALSE 36944
// points := [ 5 , 70 , 20 ] ;
36925: LD_ADDR_VAR 0 9
36929: PUSH
36930: LD_INT 5
36932: PUSH
36933: LD_INT 70
36935: PUSH
36936: LD_INT 20
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: LIST
36943: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36944: LD_VAR 0 6
36948: PPUSH
36949: CALL_OW 264
36953: PUSH
36954: LD_INT 10
36956: PUSH
36957: EMPTY
36958: LIST
36959: IN
36960: IFFALSE 36981
// points := [ 35 , 110 , 70 ] ;
36962: LD_ADDR_VAR 0 9
36966: PUSH
36967: LD_INT 35
36969: PUSH
36970: LD_INT 110
36972: PUSH
36973: LD_INT 70
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: LIST
36980: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36981: LD_VAR 0 6
36985: PPUSH
36986: CALL_OW 265
36990: PUSH
36991: LD_INT 25
36993: EQUAL
36994: IFFALSE 37015
// points := [ 80 , 65 , 100 ] ;
36996: LD_ADDR_VAR 0 9
37000: PUSH
37001: LD_INT 80
37003: PUSH
37004: LD_INT 65
37006: PUSH
37007: LD_INT 100
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: LIST
37014: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37015: LD_VAR 0 6
37019: PPUSH
37020: CALL_OW 263
37024: PUSH
37025: LD_INT 1
37027: EQUAL
37028: IFFALSE 37063
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37030: LD_ADDR_VAR 0 10
37034: PUSH
37035: LD_VAR 0 10
37039: PUSH
37040: LD_VAR 0 6
37044: PPUSH
37045: CALL_OW 311
37049: PPUSH
37050: LD_INT 3
37052: PPUSH
37053: CALL_OW 259
37057: PUSH
37058: LD_INT 4
37060: MUL
37061: MUL
37062: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37063: LD_VAR 0 6
37067: PPUSH
37068: CALL_OW 263
37072: PUSH
37073: LD_INT 2
37075: EQUAL
37076: IFFALSE 37127
// begin j := IsControledBy ( i ) ;
37078: LD_ADDR_VAR 0 7
37082: PUSH
37083: LD_VAR 0 6
37087: PPUSH
37088: CALL_OW 312
37092: ST_TO_ADDR
// if j then
37093: LD_VAR 0 7
37097: IFFALSE 37127
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37099: LD_ADDR_VAR 0 10
37103: PUSH
37104: LD_VAR 0 10
37108: PUSH
37109: LD_VAR 0 7
37113: PPUSH
37114: LD_INT 3
37116: PPUSH
37117: CALL_OW 259
37121: PUSH
37122: LD_INT 3
37124: MUL
37125: MUL
37126: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37127: LD_VAR 0 6
37131: PPUSH
37132: CALL_OW 264
37136: PUSH
37137: LD_INT 5
37139: PUSH
37140: LD_INT 6
37142: PUSH
37143: LD_INT 46
37145: PUSH
37146: LD_INT 44
37148: PUSH
37149: LD_INT 47
37151: PUSH
37152: LD_INT 45
37154: PUSH
37155: LD_INT 28
37157: PUSH
37158: LD_INT 7
37160: PUSH
37161: LD_INT 27
37163: PUSH
37164: LD_INT 29
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: IN
37179: PUSH
37180: LD_VAR 0 1
37184: PPUSH
37185: LD_INT 52
37187: PPUSH
37188: CALL_OW 321
37192: PUSH
37193: LD_INT 2
37195: EQUAL
37196: AND
37197: IFFALSE 37214
// bpoints := bpoints * 1.2 ;
37199: LD_ADDR_VAR 0 10
37203: PUSH
37204: LD_VAR 0 10
37208: PUSH
37209: LD_REAL  1.20000000000000E+0000
37212: MUL
37213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37214: LD_VAR 0 6
37218: PPUSH
37219: CALL_OW 264
37223: PUSH
37224: LD_INT 6
37226: PUSH
37227: LD_INT 46
37229: PUSH
37230: LD_INT 47
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: LIST
37237: IN
37238: IFFALSE 37255
// bpoints := bpoints * 1.2 ;
37240: LD_ADDR_VAR 0 10
37244: PUSH
37245: LD_VAR 0 10
37249: PUSH
37250: LD_REAL  1.20000000000000E+0000
37253: MUL
37254: ST_TO_ADDR
// end ; unit_building :
37255: GO 37269
37257: LD_INT 3
37259: DOUBLE
37260: EQUAL
37261: IFTRUE 37265
37263: GO 37268
37265: POP
// ; end ;
37266: GO 37269
37268: POP
// for j = 1 to 3 do
37269: LD_ADDR_VAR 0 7
37273: PUSH
37274: DOUBLE
37275: LD_INT 1
37277: DEC
37278: ST_TO_ADDR
37279: LD_INT 3
37281: PUSH
37282: FOR_TO
37283: IFFALSE 37336
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37285: LD_ADDR_VAR 0 5
37289: PUSH
37290: LD_VAR 0 5
37294: PPUSH
37295: LD_VAR 0 7
37299: PPUSH
37300: LD_VAR 0 5
37304: PUSH
37305: LD_VAR 0 7
37309: ARRAY
37310: PUSH
37311: LD_VAR 0 9
37315: PUSH
37316: LD_VAR 0 7
37320: ARRAY
37321: PUSH
37322: LD_VAR 0 10
37326: MUL
37327: PLUS
37328: PPUSH
37329: CALL_OW 1
37333: ST_TO_ADDR
37334: GO 37282
37336: POP
37337: POP
// end ;
37338: GO 35817
37340: POP
37341: POP
// result := Replace ( result , 4 , tmp ) ;
37342: LD_ADDR_VAR 0 5
37346: PUSH
37347: LD_VAR 0 5
37351: PPUSH
37352: LD_INT 4
37354: PPUSH
37355: LD_VAR 0 8
37359: PPUSH
37360: CALL_OW 1
37364: ST_TO_ADDR
// end ;
37365: LD_VAR 0 5
37369: RET
// export function DangerAtRange ( unit , range ) ; begin
37370: LD_INT 0
37372: PPUSH
// if not unit then
37373: LD_VAR 0 1
37377: NOT
37378: IFFALSE 37382
// exit ;
37380: GO 37427
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37382: LD_ADDR_VAR 0 3
37386: PUSH
37387: LD_VAR 0 1
37391: PPUSH
37392: CALL_OW 255
37396: PPUSH
37397: LD_VAR 0 1
37401: PPUSH
37402: CALL_OW 250
37406: PPUSH
37407: LD_VAR 0 1
37411: PPUSH
37412: CALL_OW 251
37416: PPUSH
37417: LD_VAR 0 2
37421: PPUSH
37422: CALL 35669 0 4
37426: ST_TO_ADDR
// end ;
37427: LD_VAR 0 3
37431: RET
// export function DangerInArea ( side , area ) ; begin
37432: LD_INT 0
37434: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37435: LD_ADDR_VAR 0 3
37439: PUSH
37440: LD_VAR 0 2
37444: PPUSH
37445: LD_INT 81
37447: PUSH
37448: LD_VAR 0 1
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PPUSH
37457: CALL_OW 70
37461: ST_TO_ADDR
// end ;
37462: LD_VAR 0 3
37466: RET
// export function IsExtension ( b ) ; begin
37467: LD_INT 0
37469: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37470: LD_ADDR_VAR 0 2
37474: PUSH
37475: LD_VAR 0 1
37479: PUSH
37480: LD_INT 23
37482: PUSH
37483: LD_INT 20
37485: PUSH
37486: LD_INT 22
37488: PUSH
37489: LD_INT 17
37491: PUSH
37492: LD_INT 24
37494: PUSH
37495: LD_INT 21
37497: PUSH
37498: LD_INT 19
37500: PUSH
37501: LD_INT 16
37503: PUSH
37504: LD_INT 25
37506: PUSH
37507: LD_INT 18
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: IN
37522: ST_TO_ADDR
// end ;
37523: LD_VAR 0 2
37527: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37528: LD_INT 0
37530: PPUSH
37531: PPUSH
37532: PPUSH
// result := [ ] ;
37533: LD_ADDR_VAR 0 4
37537: PUSH
37538: EMPTY
37539: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37540: LD_ADDR_VAR 0 5
37544: PUSH
37545: LD_VAR 0 2
37549: PPUSH
37550: LD_INT 21
37552: PUSH
37553: LD_INT 3
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PPUSH
37560: CALL_OW 70
37564: ST_TO_ADDR
// if not tmp then
37565: LD_VAR 0 5
37569: NOT
37570: IFFALSE 37574
// exit ;
37572: GO 37638
// if checkLink then
37574: LD_VAR 0 3
37578: IFFALSE 37628
// begin for i in tmp do
37580: LD_ADDR_VAR 0 6
37584: PUSH
37585: LD_VAR 0 5
37589: PUSH
37590: FOR_IN
37591: IFFALSE 37626
// if GetBase ( i ) <> base then
37593: LD_VAR 0 6
37597: PPUSH
37598: CALL_OW 274
37602: PUSH
37603: LD_VAR 0 1
37607: NONEQUAL
37608: IFFALSE 37624
// ComLinkToBase ( base , i ) ;
37610: LD_VAR 0 1
37614: PPUSH
37615: LD_VAR 0 6
37619: PPUSH
37620: CALL_OW 169
37624: GO 37590
37626: POP
37627: POP
// end ; result := tmp ;
37628: LD_ADDR_VAR 0 4
37632: PUSH
37633: LD_VAR 0 5
37637: ST_TO_ADDR
// end ;
37638: LD_VAR 0 4
37642: RET
// export function ComComplete ( units , b ) ; var i ; begin
37643: LD_INT 0
37645: PPUSH
37646: PPUSH
// if not units then
37647: LD_VAR 0 1
37651: NOT
37652: IFFALSE 37656
// exit ;
37654: GO 37746
// for i in units do
37656: LD_ADDR_VAR 0 4
37660: PUSH
37661: LD_VAR 0 1
37665: PUSH
37666: FOR_IN
37667: IFFALSE 37744
// if BuildingStatus ( b ) = bs_build then
37669: LD_VAR 0 2
37673: PPUSH
37674: CALL_OW 461
37678: PUSH
37679: LD_INT 1
37681: EQUAL
37682: IFFALSE 37742
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37684: LD_VAR 0 4
37688: PPUSH
37689: LD_STRING h
37691: PUSH
37692: LD_VAR 0 2
37696: PPUSH
37697: CALL_OW 250
37701: PUSH
37702: LD_VAR 0 2
37706: PPUSH
37707: CALL_OW 251
37711: PUSH
37712: LD_VAR 0 2
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: LD_INT 0
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: PUSH
37735: EMPTY
37736: LIST
37737: PPUSH
37738: CALL_OW 446
37742: GO 37666
37744: POP
37745: POP
// end ;
37746: LD_VAR 0 3
37750: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37751: LD_INT 0
37753: PPUSH
37754: PPUSH
37755: PPUSH
37756: PPUSH
37757: PPUSH
37758: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37759: LD_VAR 0 1
37763: NOT
37764: PUSH
37765: LD_VAR 0 1
37769: PPUSH
37770: CALL_OW 263
37774: PUSH
37775: LD_INT 2
37777: NONEQUAL
37778: OR
37779: IFFALSE 37783
// exit ;
37781: GO 38099
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37783: LD_ADDR_VAR 0 6
37787: PUSH
37788: LD_INT 22
37790: PUSH
37791: LD_VAR 0 1
37795: PPUSH
37796: CALL_OW 255
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 2
37807: PUSH
37808: LD_INT 30
37810: PUSH
37811: LD_INT 36
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 34
37820: PUSH
37821: LD_INT 31
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: LIST
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PPUSH
37837: CALL_OW 69
37841: ST_TO_ADDR
// if not tmp then
37842: LD_VAR 0 6
37846: NOT
37847: IFFALSE 37851
// exit ;
37849: GO 38099
// result := [ ] ;
37851: LD_ADDR_VAR 0 2
37855: PUSH
37856: EMPTY
37857: ST_TO_ADDR
// for i in tmp do
37858: LD_ADDR_VAR 0 3
37862: PUSH
37863: LD_VAR 0 6
37867: PUSH
37868: FOR_IN
37869: IFFALSE 37940
// begin t := UnitsInside ( i ) ;
37871: LD_ADDR_VAR 0 4
37875: PUSH
37876: LD_VAR 0 3
37880: PPUSH
37881: CALL_OW 313
37885: ST_TO_ADDR
// if t then
37886: LD_VAR 0 4
37890: IFFALSE 37938
// for j in t do
37892: LD_ADDR_VAR 0 7
37896: PUSH
37897: LD_VAR 0 4
37901: PUSH
37902: FOR_IN
37903: IFFALSE 37936
// result := Replace ( result , result + 1 , j ) ;
37905: LD_ADDR_VAR 0 2
37909: PUSH
37910: LD_VAR 0 2
37914: PPUSH
37915: LD_VAR 0 2
37919: PUSH
37920: LD_INT 1
37922: PLUS
37923: PPUSH
37924: LD_VAR 0 7
37928: PPUSH
37929: CALL_OW 1
37933: ST_TO_ADDR
37934: GO 37902
37936: POP
37937: POP
// end ;
37938: GO 37868
37940: POP
37941: POP
// if not result then
37942: LD_VAR 0 2
37946: NOT
37947: IFFALSE 37951
// exit ;
37949: GO 38099
// mech := result [ 1 ] ;
37951: LD_ADDR_VAR 0 5
37955: PUSH
37956: LD_VAR 0 2
37960: PUSH
37961: LD_INT 1
37963: ARRAY
37964: ST_TO_ADDR
// if result > 1 then
37965: LD_VAR 0 2
37969: PUSH
37970: LD_INT 1
37972: GREATER
37973: IFFALSE 38085
// begin for i = 2 to result do
37975: LD_ADDR_VAR 0 3
37979: PUSH
37980: DOUBLE
37981: LD_INT 2
37983: DEC
37984: ST_TO_ADDR
37985: LD_VAR 0 2
37989: PUSH
37990: FOR_TO
37991: IFFALSE 38083
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37993: LD_ADDR_VAR 0 4
37997: PUSH
37998: LD_VAR 0 2
38002: PUSH
38003: LD_VAR 0 3
38007: ARRAY
38008: PPUSH
38009: LD_INT 3
38011: PPUSH
38012: CALL_OW 259
38016: PUSH
38017: LD_VAR 0 2
38021: PUSH
38022: LD_VAR 0 3
38026: ARRAY
38027: PPUSH
38028: CALL_OW 432
38032: MINUS
38033: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38034: LD_VAR 0 4
38038: PUSH
38039: LD_VAR 0 5
38043: PPUSH
38044: LD_INT 3
38046: PPUSH
38047: CALL_OW 259
38051: PUSH
38052: LD_VAR 0 5
38056: PPUSH
38057: CALL_OW 432
38061: MINUS
38062: GREATEREQUAL
38063: IFFALSE 38081
// mech := result [ i ] ;
38065: LD_ADDR_VAR 0 5
38069: PUSH
38070: LD_VAR 0 2
38074: PUSH
38075: LD_VAR 0 3
38079: ARRAY
38080: ST_TO_ADDR
// end ;
38081: GO 37990
38083: POP
38084: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38085: LD_VAR 0 1
38089: PPUSH
38090: LD_VAR 0 5
38094: PPUSH
38095: CALL_OW 135
// end ;
38099: LD_VAR 0 2
38103: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38104: LD_INT 0
38106: PPUSH
38107: PPUSH
38108: PPUSH
38109: PPUSH
38110: PPUSH
38111: PPUSH
38112: PPUSH
38113: PPUSH
38114: PPUSH
38115: PPUSH
38116: PPUSH
38117: PPUSH
38118: PPUSH
// result := [ ] ;
38119: LD_ADDR_VAR 0 7
38123: PUSH
38124: EMPTY
38125: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38126: LD_VAR 0 1
38130: PPUSH
38131: CALL_OW 266
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: LD_INT 1
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: IN
38146: NOT
38147: IFFALSE 38151
// exit ;
38149: GO 39785
// if name then
38151: LD_VAR 0 3
38155: IFFALSE 38171
// SetBName ( base_dep , name ) ;
38157: LD_VAR 0 1
38161: PPUSH
38162: LD_VAR 0 3
38166: PPUSH
38167: CALL_OW 500
// base := GetBase ( base_dep ) ;
38171: LD_ADDR_VAR 0 15
38175: PUSH
38176: LD_VAR 0 1
38180: PPUSH
38181: CALL_OW 274
38185: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38186: LD_ADDR_VAR 0 16
38190: PUSH
38191: LD_VAR 0 1
38195: PPUSH
38196: CALL_OW 255
38200: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38201: LD_ADDR_VAR 0 17
38205: PUSH
38206: LD_VAR 0 1
38210: PPUSH
38211: CALL_OW 248
38215: ST_TO_ADDR
// if sources then
38216: LD_VAR 0 5
38220: IFFALSE 38267
// for i = 1 to 3 do
38222: LD_ADDR_VAR 0 8
38226: PUSH
38227: DOUBLE
38228: LD_INT 1
38230: DEC
38231: ST_TO_ADDR
38232: LD_INT 3
38234: PUSH
38235: FOR_TO
38236: IFFALSE 38265
// AddResourceType ( base , i , sources [ i ] ) ;
38238: LD_VAR 0 15
38242: PPUSH
38243: LD_VAR 0 8
38247: PPUSH
38248: LD_VAR 0 5
38252: PUSH
38253: LD_VAR 0 8
38257: ARRAY
38258: PPUSH
38259: CALL_OW 276
38263: GO 38235
38265: POP
38266: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38267: LD_ADDR_VAR 0 18
38271: PUSH
38272: LD_VAR 0 15
38276: PPUSH
38277: LD_VAR 0 2
38281: PPUSH
38282: LD_INT 1
38284: PPUSH
38285: CALL 37528 0 3
38289: ST_TO_ADDR
// InitHc ;
38290: CALL_OW 19
// InitUc ;
38294: CALL_OW 18
// uc_side := side ;
38298: LD_ADDR_OWVAR 20
38302: PUSH
38303: LD_VAR 0 16
38307: ST_TO_ADDR
// uc_nation := nation ;
38308: LD_ADDR_OWVAR 21
38312: PUSH
38313: LD_VAR 0 17
38317: ST_TO_ADDR
// if buildings then
38318: LD_VAR 0 18
38322: IFFALSE 39644
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38324: LD_ADDR_VAR 0 19
38328: PUSH
38329: LD_VAR 0 18
38333: PPUSH
38334: LD_INT 2
38336: PUSH
38337: LD_INT 30
38339: PUSH
38340: LD_INT 29
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 30
38349: PUSH
38350: LD_INT 30
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: LIST
38361: PPUSH
38362: CALL_OW 72
38366: ST_TO_ADDR
// if tmp then
38367: LD_VAR 0 19
38371: IFFALSE 38419
// for i in tmp do
38373: LD_ADDR_VAR 0 8
38377: PUSH
38378: LD_VAR 0 19
38382: PUSH
38383: FOR_IN
38384: IFFALSE 38417
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38386: LD_VAR 0 8
38390: PPUSH
38391: CALL_OW 250
38395: PPUSH
38396: LD_VAR 0 8
38400: PPUSH
38401: CALL_OW 251
38405: PPUSH
38406: LD_VAR 0 16
38410: PPUSH
38411: CALL_OW 441
38415: GO 38383
38417: POP
38418: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38419: LD_VAR 0 18
38423: PPUSH
38424: LD_INT 2
38426: PUSH
38427: LD_INT 30
38429: PUSH
38430: LD_INT 32
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 30
38439: PUSH
38440: LD_INT 33
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: LIST
38451: PPUSH
38452: CALL_OW 72
38456: IFFALSE 38544
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38458: LD_ADDR_VAR 0 8
38462: PUSH
38463: LD_VAR 0 18
38467: PPUSH
38468: LD_INT 2
38470: PUSH
38471: LD_INT 30
38473: PUSH
38474: LD_INT 32
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 30
38483: PUSH
38484: LD_INT 33
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: LIST
38495: PPUSH
38496: CALL_OW 72
38500: PUSH
38501: FOR_IN
38502: IFFALSE 38542
// begin if not GetBWeapon ( i ) then
38504: LD_VAR 0 8
38508: PPUSH
38509: CALL_OW 269
38513: NOT
38514: IFFALSE 38540
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38516: LD_VAR 0 8
38520: PPUSH
38521: LD_VAR 0 8
38525: PPUSH
38526: LD_VAR 0 2
38530: PPUSH
38531: CALL 39790 0 2
38535: PPUSH
38536: CALL_OW 431
// end ;
38540: GO 38501
38542: POP
38543: POP
// end ; for i = 1 to personel do
38544: LD_ADDR_VAR 0 8
38548: PUSH
38549: DOUBLE
38550: LD_INT 1
38552: DEC
38553: ST_TO_ADDR
38554: LD_VAR 0 6
38558: PUSH
38559: FOR_TO
38560: IFFALSE 39624
// begin if i > 4 then
38562: LD_VAR 0 8
38566: PUSH
38567: LD_INT 4
38569: GREATER
38570: IFFALSE 38574
// break ;
38572: GO 39624
// case i of 1 :
38574: LD_VAR 0 8
38578: PUSH
38579: LD_INT 1
38581: DOUBLE
38582: EQUAL
38583: IFTRUE 38587
38585: GO 38667
38587: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38588: LD_ADDR_VAR 0 12
38592: PUSH
38593: LD_VAR 0 18
38597: PPUSH
38598: LD_INT 22
38600: PUSH
38601: LD_VAR 0 16
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 58
38612: PUSH
38613: EMPTY
38614: LIST
38615: PUSH
38616: LD_INT 2
38618: PUSH
38619: LD_INT 30
38621: PUSH
38622: LD_INT 32
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 30
38631: PUSH
38632: LD_INT 4
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 30
38641: PUSH
38642: LD_INT 5
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: LIST
38659: PPUSH
38660: CALL_OW 72
38664: ST_TO_ADDR
38665: GO 38889
38667: LD_INT 2
38669: DOUBLE
38670: EQUAL
38671: IFTRUE 38675
38673: GO 38737
38675: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38676: LD_ADDR_VAR 0 12
38680: PUSH
38681: LD_VAR 0 18
38685: PPUSH
38686: LD_INT 22
38688: PUSH
38689: LD_VAR 0 16
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: LD_INT 30
38703: PUSH
38704: LD_INT 0
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 30
38713: PUSH
38714: LD_INT 1
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: LIST
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PPUSH
38730: CALL_OW 72
38734: ST_TO_ADDR
38735: GO 38889
38737: LD_INT 3
38739: DOUBLE
38740: EQUAL
38741: IFTRUE 38745
38743: GO 38807
38745: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38746: LD_ADDR_VAR 0 12
38750: PUSH
38751: LD_VAR 0 18
38755: PPUSH
38756: LD_INT 22
38758: PUSH
38759: LD_VAR 0 16
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 2
38770: PUSH
38771: LD_INT 30
38773: PUSH
38774: LD_INT 2
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 30
38783: PUSH
38784: LD_INT 3
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: LIST
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PPUSH
38800: CALL_OW 72
38804: ST_TO_ADDR
38805: GO 38889
38807: LD_INT 4
38809: DOUBLE
38810: EQUAL
38811: IFTRUE 38815
38813: GO 38888
38815: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38816: LD_ADDR_VAR 0 12
38820: PUSH
38821: LD_VAR 0 18
38825: PPUSH
38826: LD_INT 22
38828: PUSH
38829: LD_VAR 0 16
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 2
38840: PUSH
38841: LD_INT 30
38843: PUSH
38844: LD_INT 6
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 30
38853: PUSH
38854: LD_INT 7
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 30
38863: PUSH
38864: LD_INT 8
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PPUSH
38881: CALL_OW 72
38885: ST_TO_ADDR
38886: GO 38889
38888: POP
// if i = 1 then
38889: LD_VAR 0 8
38893: PUSH
38894: LD_INT 1
38896: EQUAL
38897: IFFALSE 39008
// begin tmp := [ ] ;
38899: LD_ADDR_VAR 0 19
38903: PUSH
38904: EMPTY
38905: ST_TO_ADDR
// for j in f do
38906: LD_ADDR_VAR 0 9
38910: PUSH
38911: LD_VAR 0 12
38915: PUSH
38916: FOR_IN
38917: IFFALSE 38990
// if GetBType ( j ) = b_bunker then
38919: LD_VAR 0 9
38923: PPUSH
38924: CALL_OW 266
38928: PUSH
38929: LD_INT 32
38931: EQUAL
38932: IFFALSE 38959
// tmp := Insert ( tmp , 1 , j ) else
38934: LD_ADDR_VAR 0 19
38938: PUSH
38939: LD_VAR 0 19
38943: PPUSH
38944: LD_INT 1
38946: PPUSH
38947: LD_VAR 0 9
38951: PPUSH
38952: CALL_OW 2
38956: ST_TO_ADDR
38957: GO 38988
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38959: LD_ADDR_VAR 0 19
38963: PUSH
38964: LD_VAR 0 19
38968: PPUSH
38969: LD_VAR 0 19
38973: PUSH
38974: LD_INT 1
38976: PLUS
38977: PPUSH
38978: LD_VAR 0 9
38982: PPUSH
38983: CALL_OW 2
38987: ST_TO_ADDR
38988: GO 38916
38990: POP
38991: POP
// if tmp then
38992: LD_VAR 0 19
38996: IFFALSE 39008
// f := tmp ;
38998: LD_ADDR_VAR 0 12
39002: PUSH
39003: LD_VAR 0 19
39007: ST_TO_ADDR
// end ; x := personel [ i ] ;
39008: LD_ADDR_VAR 0 13
39012: PUSH
39013: LD_VAR 0 6
39017: PUSH
39018: LD_VAR 0 8
39022: ARRAY
39023: ST_TO_ADDR
// if x = - 1 then
39024: LD_VAR 0 13
39028: PUSH
39029: LD_INT 1
39031: NEG
39032: EQUAL
39033: IFFALSE 39242
// begin for j in f do
39035: LD_ADDR_VAR 0 9
39039: PUSH
39040: LD_VAR 0 12
39044: PUSH
39045: FOR_IN
39046: IFFALSE 39238
// repeat InitHc ;
39048: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39052: LD_VAR 0 9
39056: PPUSH
39057: CALL_OW 266
39061: PUSH
39062: LD_INT 5
39064: EQUAL
39065: IFFALSE 39135
// begin if UnitsInside ( j ) < 3 then
39067: LD_VAR 0 9
39071: PPUSH
39072: CALL_OW 313
39076: PUSH
39077: LD_INT 3
39079: LESS
39080: IFFALSE 39116
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39082: LD_INT 0
39084: PPUSH
39085: LD_INT 5
39087: PUSH
39088: LD_INT 8
39090: PUSH
39091: LD_INT 9
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: LIST
39098: PUSH
39099: LD_VAR 0 17
39103: ARRAY
39104: PPUSH
39105: LD_VAR 0 4
39109: PPUSH
39110: CALL_OW 380
39114: GO 39133
// PrepareHuman ( false , i , skill ) ;
39116: LD_INT 0
39118: PPUSH
39119: LD_VAR 0 8
39123: PPUSH
39124: LD_VAR 0 4
39128: PPUSH
39129: CALL_OW 380
// end else
39133: GO 39152
// PrepareHuman ( false , i , skill ) ;
39135: LD_INT 0
39137: PPUSH
39138: LD_VAR 0 8
39142: PPUSH
39143: LD_VAR 0 4
39147: PPUSH
39148: CALL_OW 380
// un := CreateHuman ;
39152: LD_ADDR_VAR 0 14
39156: PUSH
39157: CALL_OW 44
39161: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39162: LD_ADDR_VAR 0 7
39166: PUSH
39167: LD_VAR 0 7
39171: PPUSH
39172: LD_INT 1
39174: PPUSH
39175: LD_VAR 0 14
39179: PPUSH
39180: CALL_OW 2
39184: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39185: LD_VAR 0 14
39189: PPUSH
39190: LD_VAR 0 9
39194: PPUSH
39195: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39199: LD_VAR 0 9
39203: PPUSH
39204: CALL_OW 313
39208: PUSH
39209: LD_INT 6
39211: EQUAL
39212: PUSH
39213: LD_VAR 0 9
39217: PPUSH
39218: CALL_OW 266
39222: PUSH
39223: LD_INT 32
39225: PUSH
39226: LD_INT 31
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: IN
39233: OR
39234: IFFALSE 39048
39236: GO 39045
39238: POP
39239: POP
// end else
39240: GO 39622
// for j = 1 to x do
39242: LD_ADDR_VAR 0 9
39246: PUSH
39247: DOUBLE
39248: LD_INT 1
39250: DEC
39251: ST_TO_ADDR
39252: LD_VAR 0 13
39256: PUSH
39257: FOR_TO
39258: IFFALSE 39620
// begin InitHc ;
39260: CALL_OW 19
// if not f then
39264: LD_VAR 0 12
39268: NOT
39269: IFFALSE 39358
// begin PrepareHuman ( false , i , skill ) ;
39271: LD_INT 0
39273: PPUSH
39274: LD_VAR 0 8
39278: PPUSH
39279: LD_VAR 0 4
39283: PPUSH
39284: CALL_OW 380
// un := CreateHuman ;
39288: LD_ADDR_VAR 0 14
39292: PUSH
39293: CALL_OW 44
39297: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39298: LD_ADDR_VAR 0 7
39302: PUSH
39303: LD_VAR 0 7
39307: PPUSH
39308: LD_INT 1
39310: PPUSH
39311: LD_VAR 0 14
39315: PPUSH
39316: CALL_OW 2
39320: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39321: LD_VAR 0 14
39325: PPUSH
39326: LD_VAR 0 1
39330: PPUSH
39331: CALL_OW 250
39335: PPUSH
39336: LD_VAR 0 1
39340: PPUSH
39341: CALL_OW 251
39345: PPUSH
39346: LD_INT 10
39348: PPUSH
39349: LD_INT 0
39351: PPUSH
39352: CALL_OW 50
// continue ;
39356: GO 39257
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39358: LD_VAR 0 12
39362: PUSH
39363: LD_INT 1
39365: ARRAY
39366: PPUSH
39367: CALL_OW 313
39371: PUSH
39372: LD_VAR 0 12
39376: PUSH
39377: LD_INT 1
39379: ARRAY
39380: PPUSH
39381: CALL_OW 266
39385: PUSH
39386: LD_INT 32
39388: PUSH
39389: LD_INT 31
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: IN
39396: AND
39397: PUSH
39398: LD_VAR 0 12
39402: PUSH
39403: LD_INT 1
39405: ARRAY
39406: PPUSH
39407: CALL_OW 313
39411: PUSH
39412: LD_INT 6
39414: EQUAL
39415: OR
39416: IFFALSE 39436
// f := Delete ( f , 1 ) ;
39418: LD_ADDR_VAR 0 12
39422: PUSH
39423: LD_VAR 0 12
39427: PPUSH
39428: LD_INT 1
39430: PPUSH
39431: CALL_OW 3
39435: ST_TO_ADDR
// if not f then
39436: LD_VAR 0 12
39440: NOT
39441: IFFALSE 39459
// begin x := x + 2 ;
39443: LD_ADDR_VAR 0 13
39447: PUSH
39448: LD_VAR 0 13
39452: PUSH
39453: LD_INT 2
39455: PLUS
39456: ST_TO_ADDR
// continue ;
39457: GO 39257
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39459: LD_VAR 0 12
39463: PUSH
39464: LD_INT 1
39466: ARRAY
39467: PPUSH
39468: CALL_OW 266
39472: PUSH
39473: LD_INT 5
39475: EQUAL
39476: IFFALSE 39550
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39478: LD_VAR 0 12
39482: PUSH
39483: LD_INT 1
39485: ARRAY
39486: PPUSH
39487: CALL_OW 313
39491: PUSH
39492: LD_INT 3
39494: LESS
39495: IFFALSE 39531
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39497: LD_INT 0
39499: PPUSH
39500: LD_INT 5
39502: PUSH
39503: LD_INT 8
39505: PUSH
39506: LD_INT 9
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: LIST
39513: PUSH
39514: LD_VAR 0 17
39518: ARRAY
39519: PPUSH
39520: LD_VAR 0 4
39524: PPUSH
39525: CALL_OW 380
39529: GO 39548
// PrepareHuman ( false , i , skill ) ;
39531: LD_INT 0
39533: PPUSH
39534: LD_VAR 0 8
39538: PPUSH
39539: LD_VAR 0 4
39543: PPUSH
39544: CALL_OW 380
// end else
39548: GO 39567
// PrepareHuman ( false , i , skill ) ;
39550: LD_INT 0
39552: PPUSH
39553: LD_VAR 0 8
39557: PPUSH
39558: LD_VAR 0 4
39562: PPUSH
39563: CALL_OW 380
// un := CreateHuman ;
39567: LD_ADDR_VAR 0 14
39571: PUSH
39572: CALL_OW 44
39576: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39577: LD_ADDR_VAR 0 7
39581: PUSH
39582: LD_VAR 0 7
39586: PPUSH
39587: LD_INT 1
39589: PPUSH
39590: LD_VAR 0 14
39594: PPUSH
39595: CALL_OW 2
39599: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39600: LD_VAR 0 14
39604: PPUSH
39605: LD_VAR 0 12
39609: PUSH
39610: LD_INT 1
39612: ARRAY
39613: PPUSH
39614: CALL_OW 52
// end ;
39618: GO 39257
39620: POP
39621: POP
// end ;
39622: GO 38559
39624: POP
39625: POP
// result := result ^ buildings ;
39626: LD_ADDR_VAR 0 7
39630: PUSH
39631: LD_VAR 0 7
39635: PUSH
39636: LD_VAR 0 18
39640: ADD
39641: ST_TO_ADDR
// end else
39642: GO 39785
// begin for i = 1 to personel do
39644: LD_ADDR_VAR 0 8
39648: PUSH
39649: DOUBLE
39650: LD_INT 1
39652: DEC
39653: ST_TO_ADDR
39654: LD_VAR 0 6
39658: PUSH
39659: FOR_TO
39660: IFFALSE 39783
// begin if i > 4 then
39662: LD_VAR 0 8
39666: PUSH
39667: LD_INT 4
39669: GREATER
39670: IFFALSE 39674
// break ;
39672: GO 39783
// x := personel [ i ] ;
39674: LD_ADDR_VAR 0 13
39678: PUSH
39679: LD_VAR 0 6
39683: PUSH
39684: LD_VAR 0 8
39688: ARRAY
39689: ST_TO_ADDR
// if x = - 1 then
39690: LD_VAR 0 13
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: EQUAL
39699: IFFALSE 39703
// continue ;
39701: GO 39659
// PrepareHuman ( false , i , skill ) ;
39703: LD_INT 0
39705: PPUSH
39706: LD_VAR 0 8
39710: PPUSH
39711: LD_VAR 0 4
39715: PPUSH
39716: CALL_OW 380
// un := CreateHuman ;
39720: LD_ADDR_VAR 0 14
39724: PUSH
39725: CALL_OW 44
39729: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39730: LD_VAR 0 14
39734: PPUSH
39735: LD_VAR 0 1
39739: PPUSH
39740: CALL_OW 250
39744: PPUSH
39745: LD_VAR 0 1
39749: PPUSH
39750: CALL_OW 251
39754: PPUSH
39755: LD_INT 10
39757: PPUSH
39758: LD_INT 0
39760: PPUSH
39761: CALL_OW 50
// result := result ^ un ;
39765: LD_ADDR_VAR 0 7
39769: PUSH
39770: LD_VAR 0 7
39774: PUSH
39775: LD_VAR 0 14
39779: ADD
39780: ST_TO_ADDR
// end ;
39781: GO 39659
39783: POP
39784: POP
// end ; end ;
39785: LD_VAR 0 7
39789: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39790: LD_INT 0
39792: PPUSH
39793: PPUSH
39794: PPUSH
39795: PPUSH
39796: PPUSH
39797: PPUSH
39798: PPUSH
39799: PPUSH
39800: PPUSH
39801: PPUSH
39802: PPUSH
39803: PPUSH
39804: PPUSH
39805: PPUSH
39806: PPUSH
39807: PPUSH
// result := false ;
39808: LD_ADDR_VAR 0 3
39812: PUSH
39813: LD_INT 0
39815: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39816: LD_VAR 0 1
39820: NOT
39821: PUSH
39822: LD_VAR 0 1
39826: PPUSH
39827: CALL_OW 266
39831: PUSH
39832: LD_INT 32
39834: PUSH
39835: LD_INT 33
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: IN
39842: NOT
39843: OR
39844: IFFALSE 39848
// exit ;
39846: GO 40957
// nat := GetNation ( tower ) ;
39848: LD_ADDR_VAR 0 12
39852: PUSH
39853: LD_VAR 0 1
39857: PPUSH
39858: CALL_OW 248
39862: ST_TO_ADDR
// side := GetSide ( tower ) ;
39863: LD_ADDR_VAR 0 16
39867: PUSH
39868: LD_VAR 0 1
39872: PPUSH
39873: CALL_OW 255
39877: ST_TO_ADDR
// x := GetX ( tower ) ;
39878: LD_ADDR_VAR 0 10
39882: PUSH
39883: LD_VAR 0 1
39887: PPUSH
39888: CALL_OW 250
39892: ST_TO_ADDR
// y := GetY ( tower ) ;
39893: LD_ADDR_VAR 0 11
39897: PUSH
39898: LD_VAR 0 1
39902: PPUSH
39903: CALL_OW 251
39907: ST_TO_ADDR
// if not x or not y then
39908: LD_VAR 0 10
39912: NOT
39913: PUSH
39914: LD_VAR 0 11
39918: NOT
39919: OR
39920: IFFALSE 39924
// exit ;
39922: GO 40957
// weapon := 0 ;
39924: LD_ADDR_VAR 0 18
39928: PUSH
39929: LD_INT 0
39931: ST_TO_ADDR
// fac_list := [ ] ;
39932: LD_ADDR_VAR 0 17
39936: PUSH
39937: EMPTY
39938: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39939: LD_ADDR_VAR 0 6
39943: PUSH
39944: LD_VAR 0 1
39948: PPUSH
39949: CALL_OW 274
39953: PPUSH
39954: LD_VAR 0 2
39958: PPUSH
39959: LD_INT 0
39961: PPUSH
39962: CALL 37528 0 3
39966: PPUSH
39967: LD_INT 30
39969: PUSH
39970: LD_INT 3
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PPUSH
39977: CALL_OW 72
39981: ST_TO_ADDR
// if not factories then
39982: LD_VAR 0 6
39986: NOT
39987: IFFALSE 39991
// exit ;
39989: GO 40957
// for i in factories do
39991: LD_ADDR_VAR 0 8
39995: PUSH
39996: LD_VAR 0 6
40000: PUSH
40001: FOR_IN
40002: IFFALSE 40027
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40004: LD_ADDR_VAR 0 17
40008: PUSH
40009: LD_VAR 0 17
40013: PUSH
40014: LD_VAR 0 8
40018: PPUSH
40019: CALL_OW 478
40023: UNION
40024: ST_TO_ADDR
40025: GO 40001
40027: POP
40028: POP
// if not fac_list then
40029: LD_VAR 0 17
40033: NOT
40034: IFFALSE 40038
// exit ;
40036: GO 40957
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40038: LD_ADDR_VAR 0 5
40042: PUSH
40043: LD_INT 4
40045: PUSH
40046: LD_INT 5
40048: PUSH
40049: LD_INT 9
40051: PUSH
40052: LD_INT 10
40054: PUSH
40055: LD_INT 6
40057: PUSH
40058: LD_INT 7
40060: PUSH
40061: LD_INT 11
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 27
40075: PUSH
40076: LD_INT 28
40078: PUSH
40079: LD_INT 26
40081: PUSH
40082: LD_INT 30
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 43
40093: PUSH
40094: LD_INT 44
40096: PUSH
40097: LD_INT 46
40099: PUSH
40100: LD_INT 45
40102: PUSH
40103: LD_INT 47
40105: PUSH
40106: LD_INT 49
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: LIST
40121: PUSH
40122: LD_VAR 0 12
40126: ARRAY
40127: ST_TO_ADDR
// list := list isect fac_list ;
40128: LD_ADDR_VAR 0 5
40132: PUSH
40133: LD_VAR 0 5
40137: PUSH
40138: LD_VAR 0 17
40142: ISECT
40143: ST_TO_ADDR
// if not list then
40144: LD_VAR 0 5
40148: NOT
40149: IFFALSE 40153
// exit ;
40151: GO 40957
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40153: LD_VAR 0 12
40157: PUSH
40158: LD_INT 3
40160: EQUAL
40161: PUSH
40162: LD_INT 49
40164: PUSH
40165: LD_VAR 0 5
40169: IN
40170: AND
40171: PUSH
40172: LD_INT 31
40174: PPUSH
40175: LD_VAR 0 16
40179: PPUSH
40180: CALL_OW 321
40184: PUSH
40185: LD_INT 2
40187: EQUAL
40188: AND
40189: IFFALSE 40249
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40191: LD_INT 22
40193: PUSH
40194: LD_VAR 0 16
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 35
40205: PUSH
40206: LD_INT 49
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 91
40215: PUSH
40216: LD_VAR 0 1
40220: PUSH
40221: LD_INT 10
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: LIST
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: LIST
40233: PPUSH
40234: CALL_OW 69
40238: NOT
40239: IFFALSE 40249
// weapon := ru_time_lapser ;
40241: LD_ADDR_VAR 0 18
40245: PUSH
40246: LD_INT 49
40248: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40249: LD_VAR 0 12
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: LD_INT 2
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: IN
40264: PUSH
40265: LD_INT 11
40267: PUSH
40268: LD_VAR 0 5
40272: IN
40273: PUSH
40274: LD_INT 30
40276: PUSH
40277: LD_VAR 0 5
40281: IN
40282: OR
40283: AND
40284: PUSH
40285: LD_INT 6
40287: PPUSH
40288: LD_VAR 0 16
40292: PPUSH
40293: CALL_OW 321
40297: PUSH
40298: LD_INT 2
40300: EQUAL
40301: AND
40302: IFFALSE 40467
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40304: LD_INT 22
40306: PUSH
40307: LD_VAR 0 16
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: LD_INT 35
40321: PUSH
40322: LD_INT 11
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 35
40331: PUSH
40332: LD_INT 30
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 91
40346: PUSH
40347: LD_VAR 0 1
40351: PUSH
40352: LD_INT 18
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: LIST
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: LIST
40364: PPUSH
40365: CALL_OW 69
40369: NOT
40370: PUSH
40371: LD_INT 22
40373: PUSH
40374: LD_VAR 0 16
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 2
40385: PUSH
40386: LD_INT 30
40388: PUSH
40389: LD_INT 32
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 30
40398: PUSH
40399: LD_INT 33
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 91
40413: PUSH
40414: LD_VAR 0 1
40418: PUSH
40419: LD_INT 12
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: LIST
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: LIST
40431: PUSH
40432: EMPTY
40433: LIST
40434: PPUSH
40435: CALL_OW 69
40439: PUSH
40440: LD_INT 2
40442: GREATER
40443: AND
40444: IFFALSE 40467
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40446: LD_ADDR_VAR 0 18
40450: PUSH
40451: LD_INT 11
40453: PUSH
40454: LD_INT 30
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_VAR 0 12
40465: ARRAY
40466: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40467: LD_VAR 0 18
40471: NOT
40472: PUSH
40473: LD_INT 40
40475: PPUSH
40476: LD_VAR 0 16
40480: PPUSH
40481: CALL_OW 321
40485: PUSH
40486: LD_INT 2
40488: EQUAL
40489: AND
40490: PUSH
40491: LD_INT 7
40493: PUSH
40494: LD_VAR 0 5
40498: IN
40499: PUSH
40500: LD_INT 28
40502: PUSH
40503: LD_VAR 0 5
40507: IN
40508: OR
40509: PUSH
40510: LD_INT 45
40512: PUSH
40513: LD_VAR 0 5
40517: IN
40518: OR
40519: AND
40520: IFFALSE 40774
// begin hex := GetHexInfo ( x , y ) ;
40522: LD_ADDR_VAR 0 4
40526: PUSH
40527: LD_VAR 0 10
40531: PPUSH
40532: LD_VAR 0 11
40536: PPUSH
40537: CALL_OW 546
40541: ST_TO_ADDR
// if hex [ 1 ] then
40542: LD_VAR 0 4
40546: PUSH
40547: LD_INT 1
40549: ARRAY
40550: IFFALSE 40554
// exit ;
40552: GO 40957
// height := hex [ 2 ] ;
40554: LD_ADDR_VAR 0 15
40558: PUSH
40559: LD_VAR 0 4
40563: PUSH
40564: LD_INT 2
40566: ARRAY
40567: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40568: LD_ADDR_VAR 0 14
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: LD_INT 2
40578: PUSH
40579: LD_INT 3
40581: PUSH
40582: LD_INT 5
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: ST_TO_ADDR
// for i in tmp do
40591: LD_ADDR_VAR 0 8
40595: PUSH
40596: LD_VAR 0 14
40600: PUSH
40601: FOR_IN
40602: IFFALSE 40772
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40604: LD_ADDR_VAR 0 9
40608: PUSH
40609: LD_VAR 0 10
40613: PPUSH
40614: LD_VAR 0 8
40618: PPUSH
40619: LD_INT 5
40621: PPUSH
40622: CALL_OW 272
40626: PUSH
40627: LD_VAR 0 11
40631: PPUSH
40632: LD_VAR 0 8
40636: PPUSH
40637: LD_INT 5
40639: PPUSH
40640: CALL_OW 273
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40649: LD_VAR 0 9
40653: PUSH
40654: LD_INT 1
40656: ARRAY
40657: PPUSH
40658: LD_VAR 0 9
40662: PUSH
40663: LD_INT 2
40665: ARRAY
40666: PPUSH
40667: CALL_OW 488
40671: IFFALSE 40770
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40673: LD_ADDR_VAR 0 4
40677: PUSH
40678: LD_VAR 0 9
40682: PUSH
40683: LD_INT 1
40685: ARRAY
40686: PPUSH
40687: LD_VAR 0 9
40691: PUSH
40692: LD_INT 2
40694: ARRAY
40695: PPUSH
40696: CALL_OW 546
40700: ST_TO_ADDR
// if hex [ 1 ] then
40701: LD_VAR 0 4
40705: PUSH
40706: LD_INT 1
40708: ARRAY
40709: IFFALSE 40713
// continue ;
40711: GO 40601
// h := hex [ 2 ] ;
40713: LD_ADDR_VAR 0 13
40717: PUSH
40718: LD_VAR 0 4
40722: PUSH
40723: LD_INT 2
40725: ARRAY
40726: ST_TO_ADDR
// if h + 7 < height then
40727: LD_VAR 0 13
40731: PUSH
40732: LD_INT 7
40734: PLUS
40735: PUSH
40736: LD_VAR 0 15
40740: LESS
40741: IFFALSE 40770
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40743: LD_ADDR_VAR 0 18
40747: PUSH
40748: LD_INT 7
40750: PUSH
40751: LD_INT 28
40753: PUSH
40754: LD_INT 45
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: LIST
40761: PUSH
40762: LD_VAR 0 12
40766: ARRAY
40767: ST_TO_ADDR
// break ;
40768: GO 40772
// end ; end ; end ;
40770: GO 40601
40772: POP
40773: POP
// end ; if not weapon then
40774: LD_VAR 0 18
40778: NOT
40779: IFFALSE 40839
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40781: LD_ADDR_VAR 0 5
40785: PUSH
40786: LD_VAR 0 5
40790: PUSH
40791: LD_INT 11
40793: PUSH
40794: LD_INT 30
40796: PUSH
40797: LD_INT 49
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: LIST
40804: DIFF
40805: ST_TO_ADDR
// if not list then
40806: LD_VAR 0 5
40810: NOT
40811: IFFALSE 40815
// exit ;
40813: GO 40957
// weapon := list [ rand ( 1 , list ) ] ;
40815: LD_ADDR_VAR 0 18
40819: PUSH
40820: LD_VAR 0 5
40824: PUSH
40825: LD_INT 1
40827: PPUSH
40828: LD_VAR 0 5
40832: PPUSH
40833: CALL_OW 12
40837: ARRAY
40838: ST_TO_ADDR
// end ; if weapon then
40839: LD_VAR 0 18
40843: IFFALSE 40957
// begin tmp := CostOfWeapon ( weapon ) ;
40845: LD_ADDR_VAR 0 14
40849: PUSH
40850: LD_VAR 0 18
40854: PPUSH
40855: CALL_OW 451
40859: ST_TO_ADDR
// j := GetBase ( tower ) ;
40860: LD_ADDR_VAR 0 9
40864: PUSH
40865: LD_VAR 0 1
40869: PPUSH
40870: CALL_OW 274
40874: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40875: LD_VAR 0 9
40879: PPUSH
40880: LD_INT 1
40882: PPUSH
40883: CALL_OW 275
40887: PUSH
40888: LD_VAR 0 14
40892: PUSH
40893: LD_INT 1
40895: ARRAY
40896: GREATEREQUAL
40897: PUSH
40898: LD_VAR 0 9
40902: PPUSH
40903: LD_INT 2
40905: PPUSH
40906: CALL_OW 275
40910: PUSH
40911: LD_VAR 0 14
40915: PUSH
40916: LD_INT 2
40918: ARRAY
40919: GREATEREQUAL
40920: AND
40921: PUSH
40922: LD_VAR 0 9
40926: PPUSH
40927: LD_INT 3
40929: PPUSH
40930: CALL_OW 275
40934: PUSH
40935: LD_VAR 0 14
40939: PUSH
40940: LD_INT 3
40942: ARRAY
40943: GREATEREQUAL
40944: AND
40945: IFFALSE 40957
// result := weapon ;
40947: LD_ADDR_VAR 0 3
40951: PUSH
40952: LD_VAR 0 18
40956: ST_TO_ADDR
// end ; end ;
40957: LD_VAR 0 3
40961: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40962: LD_INT 0
40964: PPUSH
40965: PPUSH
// result := true ;
40966: LD_ADDR_VAR 0 3
40970: PUSH
40971: LD_INT 1
40973: ST_TO_ADDR
// if array1 = array2 then
40974: LD_VAR 0 1
40978: PUSH
40979: LD_VAR 0 2
40983: EQUAL
40984: IFFALSE 41044
// begin for i = 1 to array1 do
40986: LD_ADDR_VAR 0 4
40990: PUSH
40991: DOUBLE
40992: LD_INT 1
40994: DEC
40995: ST_TO_ADDR
40996: LD_VAR 0 1
41000: PUSH
41001: FOR_TO
41002: IFFALSE 41040
// if array1 [ i ] <> array2 [ i ] then
41004: LD_VAR 0 1
41008: PUSH
41009: LD_VAR 0 4
41013: ARRAY
41014: PUSH
41015: LD_VAR 0 2
41019: PUSH
41020: LD_VAR 0 4
41024: ARRAY
41025: NONEQUAL
41026: IFFALSE 41038
// begin result := false ;
41028: LD_ADDR_VAR 0 3
41032: PUSH
41033: LD_INT 0
41035: ST_TO_ADDR
// break ;
41036: GO 41040
// end ;
41038: GO 41001
41040: POP
41041: POP
// end else
41042: GO 41052
// result := false ;
41044: LD_ADDR_VAR 0 3
41048: PUSH
41049: LD_INT 0
41051: ST_TO_ADDR
// end ;
41052: LD_VAR 0 3
41056: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41057: LD_INT 0
41059: PPUSH
41060: PPUSH
// if not array1 or not array2 then
41061: LD_VAR 0 1
41065: NOT
41066: PUSH
41067: LD_VAR 0 2
41071: NOT
41072: OR
41073: IFFALSE 41077
// exit ;
41075: GO 41141
// result := true ;
41077: LD_ADDR_VAR 0 3
41081: PUSH
41082: LD_INT 1
41084: ST_TO_ADDR
// for i = 1 to array1 do
41085: LD_ADDR_VAR 0 4
41089: PUSH
41090: DOUBLE
41091: LD_INT 1
41093: DEC
41094: ST_TO_ADDR
41095: LD_VAR 0 1
41099: PUSH
41100: FOR_TO
41101: IFFALSE 41139
// if array1 [ i ] <> array2 [ i ] then
41103: LD_VAR 0 1
41107: PUSH
41108: LD_VAR 0 4
41112: ARRAY
41113: PUSH
41114: LD_VAR 0 2
41118: PUSH
41119: LD_VAR 0 4
41123: ARRAY
41124: NONEQUAL
41125: IFFALSE 41137
// begin result := false ;
41127: LD_ADDR_VAR 0 3
41131: PUSH
41132: LD_INT 0
41134: ST_TO_ADDR
// break ;
41135: GO 41139
// end ;
41137: GO 41100
41139: POP
41140: POP
// end ;
41141: LD_VAR 0 3
41145: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41146: LD_INT 0
41148: PPUSH
41149: PPUSH
41150: PPUSH
// pom := GetBase ( fac ) ;
41151: LD_ADDR_VAR 0 5
41155: PUSH
41156: LD_VAR 0 1
41160: PPUSH
41161: CALL_OW 274
41165: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41166: LD_ADDR_VAR 0 4
41170: PUSH
41171: LD_VAR 0 2
41175: PUSH
41176: LD_INT 1
41178: ARRAY
41179: PPUSH
41180: LD_VAR 0 2
41184: PUSH
41185: LD_INT 2
41187: ARRAY
41188: PPUSH
41189: LD_VAR 0 2
41193: PUSH
41194: LD_INT 3
41196: ARRAY
41197: PPUSH
41198: LD_VAR 0 2
41202: PUSH
41203: LD_INT 4
41205: ARRAY
41206: PPUSH
41207: CALL_OW 449
41211: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41212: LD_ADDR_VAR 0 3
41216: PUSH
41217: LD_VAR 0 5
41221: PPUSH
41222: LD_INT 1
41224: PPUSH
41225: CALL_OW 275
41229: PUSH
41230: LD_VAR 0 4
41234: PUSH
41235: LD_INT 1
41237: ARRAY
41238: GREATEREQUAL
41239: PUSH
41240: LD_VAR 0 5
41244: PPUSH
41245: LD_INT 2
41247: PPUSH
41248: CALL_OW 275
41252: PUSH
41253: LD_VAR 0 4
41257: PUSH
41258: LD_INT 2
41260: ARRAY
41261: GREATEREQUAL
41262: AND
41263: PUSH
41264: LD_VAR 0 5
41268: PPUSH
41269: LD_INT 3
41271: PPUSH
41272: CALL_OW 275
41276: PUSH
41277: LD_VAR 0 4
41281: PUSH
41282: LD_INT 3
41284: ARRAY
41285: GREATEREQUAL
41286: AND
41287: ST_TO_ADDR
// end ;
41288: LD_VAR 0 3
41292: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41293: LD_INT 0
41295: PPUSH
41296: PPUSH
41297: PPUSH
41298: PPUSH
// pom := GetBase ( building ) ;
41299: LD_ADDR_VAR 0 3
41303: PUSH
41304: LD_VAR 0 1
41308: PPUSH
41309: CALL_OW 274
41313: ST_TO_ADDR
// if not pom then
41314: LD_VAR 0 3
41318: NOT
41319: IFFALSE 41323
// exit ;
41321: GO 41493
// btype := GetBType ( building ) ;
41323: LD_ADDR_VAR 0 5
41327: PUSH
41328: LD_VAR 0 1
41332: PPUSH
41333: CALL_OW 266
41337: ST_TO_ADDR
// if btype = b_armoury then
41338: LD_VAR 0 5
41342: PUSH
41343: LD_INT 4
41345: EQUAL
41346: IFFALSE 41356
// btype := b_barracks ;
41348: LD_ADDR_VAR 0 5
41352: PUSH
41353: LD_INT 5
41355: ST_TO_ADDR
// if btype = b_depot then
41356: LD_VAR 0 5
41360: PUSH
41361: LD_INT 0
41363: EQUAL
41364: IFFALSE 41374
// btype := b_warehouse ;
41366: LD_ADDR_VAR 0 5
41370: PUSH
41371: LD_INT 1
41373: ST_TO_ADDR
// if btype = b_workshop then
41374: LD_VAR 0 5
41378: PUSH
41379: LD_INT 2
41381: EQUAL
41382: IFFALSE 41392
// btype := b_factory ;
41384: LD_ADDR_VAR 0 5
41388: PUSH
41389: LD_INT 3
41391: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41392: LD_ADDR_VAR 0 4
41396: PUSH
41397: LD_VAR 0 5
41401: PPUSH
41402: LD_VAR 0 1
41406: PPUSH
41407: CALL_OW 248
41411: PPUSH
41412: CALL_OW 450
41416: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41417: LD_ADDR_VAR 0 2
41421: PUSH
41422: LD_VAR 0 3
41426: PPUSH
41427: LD_INT 1
41429: PPUSH
41430: CALL_OW 275
41434: PUSH
41435: LD_VAR 0 4
41439: PUSH
41440: LD_INT 1
41442: ARRAY
41443: GREATEREQUAL
41444: PUSH
41445: LD_VAR 0 3
41449: PPUSH
41450: LD_INT 2
41452: PPUSH
41453: CALL_OW 275
41457: PUSH
41458: LD_VAR 0 4
41462: PUSH
41463: LD_INT 2
41465: ARRAY
41466: GREATEREQUAL
41467: AND
41468: PUSH
41469: LD_VAR 0 3
41473: PPUSH
41474: LD_INT 3
41476: PPUSH
41477: CALL_OW 275
41481: PUSH
41482: LD_VAR 0 4
41486: PUSH
41487: LD_INT 3
41489: ARRAY
41490: GREATEREQUAL
41491: AND
41492: ST_TO_ADDR
// end ;
41493: LD_VAR 0 2
41497: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41498: LD_INT 0
41500: PPUSH
41501: PPUSH
41502: PPUSH
// pom := GetBase ( building ) ;
41503: LD_ADDR_VAR 0 4
41507: PUSH
41508: LD_VAR 0 1
41512: PPUSH
41513: CALL_OW 274
41517: ST_TO_ADDR
// if not pom then
41518: LD_VAR 0 4
41522: NOT
41523: IFFALSE 41527
// exit ;
41525: GO 41628
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41527: LD_ADDR_VAR 0 5
41531: PUSH
41532: LD_VAR 0 2
41536: PPUSH
41537: LD_VAR 0 1
41541: PPUSH
41542: CALL_OW 248
41546: PPUSH
41547: CALL_OW 450
41551: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41552: LD_ADDR_VAR 0 3
41556: PUSH
41557: LD_VAR 0 4
41561: PPUSH
41562: LD_INT 1
41564: PPUSH
41565: CALL_OW 275
41569: PUSH
41570: LD_VAR 0 5
41574: PUSH
41575: LD_INT 1
41577: ARRAY
41578: GREATEREQUAL
41579: PUSH
41580: LD_VAR 0 4
41584: PPUSH
41585: LD_INT 2
41587: PPUSH
41588: CALL_OW 275
41592: PUSH
41593: LD_VAR 0 5
41597: PUSH
41598: LD_INT 2
41600: ARRAY
41601: GREATEREQUAL
41602: AND
41603: PUSH
41604: LD_VAR 0 4
41608: PPUSH
41609: LD_INT 3
41611: PPUSH
41612: CALL_OW 275
41616: PUSH
41617: LD_VAR 0 5
41621: PUSH
41622: LD_INT 3
41624: ARRAY
41625: GREATEREQUAL
41626: AND
41627: ST_TO_ADDR
// end ;
41628: LD_VAR 0 3
41632: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41633: LD_INT 0
41635: PPUSH
41636: PPUSH
41637: PPUSH
41638: PPUSH
41639: PPUSH
41640: PPUSH
41641: PPUSH
41642: PPUSH
41643: PPUSH
41644: PPUSH
41645: PPUSH
// result := false ;
41646: LD_ADDR_VAR 0 8
41650: PUSH
41651: LD_INT 0
41653: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41654: LD_VAR 0 5
41658: NOT
41659: PUSH
41660: LD_VAR 0 1
41664: NOT
41665: OR
41666: PUSH
41667: LD_VAR 0 2
41671: NOT
41672: OR
41673: PUSH
41674: LD_VAR 0 3
41678: NOT
41679: OR
41680: IFFALSE 41684
// exit ;
41682: GO 42498
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41684: LD_ADDR_VAR 0 14
41688: PUSH
41689: LD_VAR 0 1
41693: PPUSH
41694: LD_VAR 0 2
41698: PPUSH
41699: LD_VAR 0 3
41703: PPUSH
41704: LD_VAR 0 4
41708: PPUSH
41709: LD_VAR 0 5
41713: PUSH
41714: LD_INT 1
41716: ARRAY
41717: PPUSH
41718: CALL_OW 248
41722: PPUSH
41723: LD_INT 0
41725: PPUSH
41726: CALL 43751 0 6
41730: ST_TO_ADDR
// if not hexes then
41731: LD_VAR 0 14
41735: NOT
41736: IFFALSE 41740
// exit ;
41738: GO 42498
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41740: LD_ADDR_VAR 0 17
41744: PUSH
41745: LD_VAR 0 5
41749: PPUSH
41750: LD_INT 22
41752: PUSH
41753: LD_VAR 0 13
41757: PPUSH
41758: CALL_OW 255
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 2
41769: PUSH
41770: LD_INT 30
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 30
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: LIST
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PPUSH
41799: CALL_OW 72
41803: ST_TO_ADDR
// for i = 1 to hexes do
41804: LD_ADDR_VAR 0 9
41808: PUSH
41809: DOUBLE
41810: LD_INT 1
41812: DEC
41813: ST_TO_ADDR
41814: LD_VAR 0 14
41818: PUSH
41819: FOR_TO
41820: IFFALSE 42496
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41822: LD_ADDR_VAR 0 13
41826: PUSH
41827: LD_VAR 0 14
41831: PUSH
41832: LD_VAR 0 9
41836: ARRAY
41837: PUSH
41838: LD_INT 1
41840: ARRAY
41841: PPUSH
41842: LD_VAR 0 14
41846: PUSH
41847: LD_VAR 0 9
41851: ARRAY
41852: PUSH
41853: LD_INT 2
41855: ARRAY
41856: PPUSH
41857: CALL_OW 428
41861: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41862: LD_VAR 0 14
41866: PUSH
41867: LD_VAR 0 9
41871: ARRAY
41872: PUSH
41873: LD_INT 1
41875: ARRAY
41876: PPUSH
41877: LD_VAR 0 14
41881: PUSH
41882: LD_VAR 0 9
41886: ARRAY
41887: PUSH
41888: LD_INT 2
41890: ARRAY
41891: PPUSH
41892: CALL_OW 351
41896: PUSH
41897: LD_VAR 0 14
41901: PUSH
41902: LD_VAR 0 9
41906: ARRAY
41907: PUSH
41908: LD_INT 1
41910: ARRAY
41911: PPUSH
41912: LD_VAR 0 14
41916: PUSH
41917: LD_VAR 0 9
41921: ARRAY
41922: PUSH
41923: LD_INT 2
41925: ARRAY
41926: PPUSH
41927: CALL_OW 488
41931: NOT
41932: OR
41933: PUSH
41934: LD_VAR 0 13
41938: PPUSH
41939: CALL_OW 247
41943: PUSH
41944: LD_INT 3
41946: EQUAL
41947: OR
41948: IFFALSE 41954
// exit ;
41950: POP
41951: POP
41952: GO 42498
// if not tmp then
41954: LD_VAR 0 13
41958: NOT
41959: IFFALSE 41963
// continue ;
41961: GO 41819
// result := true ;
41963: LD_ADDR_VAR 0 8
41967: PUSH
41968: LD_INT 1
41970: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41971: LD_VAR 0 6
41975: PUSH
41976: LD_VAR 0 13
41980: PPUSH
41981: CALL_OW 247
41985: PUSH
41986: LD_INT 2
41988: EQUAL
41989: AND
41990: PUSH
41991: LD_VAR 0 13
41995: PPUSH
41996: CALL_OW 263
42000: PUSH
42001: LD_INT 1
42003: EQUAL
42004: AND
42005: IFFALSE 42169
// begin if IsDrivenBy ( tmp ) then
42007: LD_VAR 0 13
42011: PPUSH
42012: CALL_OW 311
42016: IFFALSE 42020
// continue ;
42018: GO 41819
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42020: LD_VAR 0 6
42024: PPUSH
42025: LD_INT 3
42027: PUSH
42028: LD_INT 60
42030: PUSH
42031: EMPTY
42032: LIST
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 3
42040: PUSH
42041: LD_INT 55
42043: PUSH
42044: EMPTY
42045: LIST
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PPUSH
42055: CALL_OW 72
42059: IFFALSE 42167
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42061: LD_ADDR_VAR 0 18
42065: PUSH
42066: LD_VAR 0 6
42070: PPUSH
42071: LD_INT 3
42073: PUSH
42074: LD_INT 60
42076: PUSH
42077: EMPTY
42078: LIST
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 3
42086: PUSH
42087: LD_INT 55
42089: PUSH
42090: EMPTY
42091: LIST
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PPUSH
42101: CALL_OW 72
42105: PUSH
42106: LD_INT 1
42108: ARRAY
42109: ST_TO_ADDR
// if IsInUnit ( driver ) then
42110: LD_VAR 0 18
42114: PPUSH
42115: CALL_OW 310
42119: IFFALSE 42130
// ComExit ( driver ) ;
42121: LD_VAR 0 18
42125: PPUSH
42126: CALL 67543 0 1
// AddComEnterUnit ( driver , tmp ) ;
42130: LD_VAR 0 18
42134: PPUSH
42135: LD_VAR 0 13
42139: PPUSH
42140: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42144: LD_VAR 0 18
42148: PPUSH
42149: LD_VAR 0 7
42153: PPUSH
42154: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42158: LD_VAR 0 18
42162: PPUSH
42163: CALL_OW 181
// end ; continue ;
42167: GO 41819
// end ; if not cleaners or not tmp in cleaners then
42169: LD_VAR 0 6
42173: NOT
42174: PUSH
42175: LD_VAR 0 13
42179: PUSH
42180: LD_VAR 0 6
42184: IN
42185: NOT
42186: OR
42187: IFFALSE 42494
// begin if dep then
42189: LD_VAR 0 17
42193: IFFALSE 42329
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42195: LD_ADDR_VAR 0 16
42199: PUSH
42200: LD_VAR 0 17
42204: PUSH
42205: LD_INT 1
42207: ARRAY
42208: PPUSH
42209: CALL_OW 250
42213: PPUSH
42214: LD_VAR 0 17
42218: PUSH
42219: LD_INT 1
42221: ARRAY
42222: PPUSH
42223: CALL_OW 254
42227: PPUSH
42228: LD_INT 5
42230: PPUSH
42231: CALL_OW 272
42235: PUSH
42236: LD_VAR 0 17
42240: PUSH
42241: LD_INT 1
42243: ARRAY
42244: PPUSH
42245: CALL_OW 251
42249: PPUSH
42250: LD_VAR 0 17
42254: PUSH
42255: LD_INT 1
42257: ARRAY
42258: PPUSH
42259: CALL_OW 254
42263: PPUSH
42264: LD_INT 5
42266: PPUSH
42267: CALL_OW 273
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42276: LD_VAR 0 16
42280: PUSH
42281: LD_INT 1
42283: ARRAY
42284: PPUSH
42285: LD_VAR 0 16
42289: PUSH
42290: LD_INT 2
42292: ARRAY
42293: PPUSH
42294: CALL_OW 488
42298: IFFALSE 42329
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42300: LD_VAR 0 13
42304: PPUSH
42305: LD_VAR 0 16
42309: PUSH
42310: LD_INT 1
42312: ARRAY
42313: PPUSH
42314: LD_VAR 0 16
42318: PUSH
42319: LD_INT 2
42321: ARRAY
42322: PPUSH
42323: CALL_OW 111
// continue ;
42327: GO 41819
// end ; end ; r := GetDir ( tmp ) ;
42329: LD_ADDR_VAR 0 15
42333: PUSH
42334: LD_VAR 0 13
42338: PPUSH
42339: CALL_OW 254
42343: ST_TO_ADDR
// if r = 5 then
42344: LD_VAR 0 15
42348: PUSH
42349: LD_INT 5
42351: EQUAL
42352: IFFALSE 42362
// r := 0 ;
42354: LD_ADDR_VAR 0 15
42358: PUSH
42359: LD_INT 0
42361: ST_TO_ADDR
// for j = r to 5 do
42362: LD_ADDR_VAR 0 10
42366: PUSH
42367: DOUBLE
42368: LD_VAR 0 15
42372: DEC
42373: ST_TO_ADDR
42374: LD_INT 5
42376: PUSH
42377: FOR_TO
42378: IFFALSE 42492
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42380: LD_ADDR_VAR 0 11
42384: PUSH
42385: LD_VAR 0 13
42389: PPUSH
42390: CALL_OW 250
42394: PPUSH
42395: LD_VAR 0 10
42399: PPUSH
42400: LD_INT 2
42402: PPUSH
42403: CALL_OW 272
42407: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42408: LD_ADDR_VAR 0 12
42412: PUSH
42413: LD_VAR 0 13
42417: PPUSH
42418: CALL_OW 251
42422: PPUSH
42423: LD_VAR 0 10
42427: PPUSH
42428: LD_INT 2
42430: PPUSH
42431: CALL_OW 273
42435: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42436: LD_VAR 0 11
42440: PPUSH
42441: LD_VAR 0 12
42445: PPUSH
42446: CALL_OW 488
42450: PUSH
42451: LD_VAR 0 11
42455: PPUSH
42456: LD_VAR 0 12
42460: PPUSH
42461: CALL_OW 428
42465: NOT
42466: AND
42467: IFFALSE 42490
// begin ComMoveXY ( tmp , _x , _y ) ;
42469: LD_VAR 0 13
42473: PPUSH
42474: LD_VAR 0 11
42478: PPUSH
42479: LD_VAR 0 12
42483: PPUSH
42484: CALL_OW 111
// break ;
42488: GO 42492
// end ; end ;
42490: GO 42377
42492: POP
42493: POP
// end ; end ;
42494: GO 41819
42496: POP
42497: POP
// end ;
42498: LD_VAR 0 8
42502: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42503: LD_INT 0
42505: PPUSH
// result := true ;
42506: LD_ADDR_VAR 0 3
42510: PUSH
42511: LD_INT 1
42513: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42514: LD_VAR 0 2
42518: PUSH
42519: LD_INT 24
42521: DOUBLE
42522: EQUAL
42523: IFTRUE 42533
42525: LD_INT 33
42527: DOUBLE
42528: EQUAL
42529: IFTRUE 42533
42531: GO 42558
42533: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42534: LD_ADDR_VAR 0 3
42538: PUSH
42539: LD_INT 32
42541: PPUSH
42542: LD_VAR 0 1
42546: PPUSH
42547: CALL_OW 321
42551: PUSH
42552: LD_INT 2
42554: EQUAL
42555: ST_TO_ADDR
42556: GO 42874
42558: LD_INT 20
42560: DOUBLE
42561: EQUAL
42562: IFTRUE 42566
42564: GO 42591
42566: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42567: LD_ADDR_VAR 0 3
42571: PUSH
42572: LD_INT 6
42574: PPUSH
42575: LD_VAR 0 1
42579: PPUSH
42580: CALL_OW 321
42584: PUSH
42585: LD_INT 2
42587: EQUAL
42588: ST_TO_ADDR
42589: GO 42874
42591: LD_INT 22
42593: DOUBLE
42594: EQUAL
42595: IFTRUE 42605
42597: LD_INT 36
42599: DOUBLE
42600: EQUAL
42601: IFTRUE 42605
42603: GO 42630
42605: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42606: LD_ADDR_VAR 0 3
42610: PUSH
42611: LD_INT 15
42613: PPUSH
42614: LD_VAR 0 1
42618: PPUSH
42619: CALL_OW 321
42623: PUSH
42624: LD_INT 2
42626: EQUAL
42627: ST_TO_ADDR
42628: GO 42874
42630: LD_INT 30
42632: DOUBLE
42633: EQUAL
42634: IFTRUE 42638
42636: GO 42663
42638: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42639: LD_ADDR_VAR 0 3
42643: PUSH
42644: LD_INT 20
42646: PPUSH
42647: LD_VAR 0 1
42651: PPUSH
42652: CALL_OW 321
42656: PUSH
42657: LD_INT 2
42659: EQUAL
42660: ST_TO_ADDR
42661: GO 42874
42663: LD_INT 28
42665: DOUBLE
42666: EQUAL
42667: IFTRUE 42677
42669: LD_INT 21
42671: DOUBLE
42672: EQUAL
42673: IFTRUE 42677
42675: GO 42702
42677: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42678: LD_ADDR_VAR 0 3
42682: PUSH
42683: LD_INT 21
42685: PPUSH
42686: LD_VAR 0 1
42690: PPUSH
42691: CALL_OW 321
42695: PUSH
42696: LD_INT 2
42698: EQUAL
42699: ST_TO_ADDR
42700: GO 42874
42702: LD_INT 16
42704: DOUBLE
42705: EQUAL
42706: IFTRUE 42710
42708: GO 42735
42710: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42711: LD_ADDR_VAR 0 3
42715: PUSH
42716: LD_INT 84
42718: PPUSH
42719: LD_VAR 0 1
42723: PPUSH
42724: CALL_OW 321
42728: PUSH
42729: LD_INT 2
42731: EQUAL
42732: ST_TO_ADDR
42733: GO 42874
42735: LD_INT 19
42737: DOUBLE
42738: EQUAL
42739: IFTRUE 42749
42741: LD_INT 23
42743: DOUBLE
42744: EQUAL
42745: IFTRUE 42749
42747: GO 42774
42749: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42750: LD_ADDR_VAR 0 3
42754: PUSH
42755: LD_INT 83
42757: PPUSH
42758: LD_VAR 0 1
42762: PPUSH
42763: CALL_OW 321
42767: PUSH
42768: LD_INT 2
42770: EQUAL
42771: ST_TO_ADDR
42772: GO 42874
42774: LD_INT 17
42776: DOUBLE
42777: EQUAL
42778: IFTRUE 42782
42780: GO 42807
42782: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42783: LD_ADDR_VAR 0 3
42787: PUSH
42788: LD_INT 39
42790: PPUSH
42791: LD_VAR 0 1
42795: PPUSH
42796: CALL_OW 321
42800: PUSH
42801: LD_INT 2
42803: EQUAL
42804: ST_TO_ADDR
42805: GO 42874
42807: LD_INT 18
42809: DOUBLE
42810: EQUAL
42811: IFTRUE 42815
42813: GO 42840
42815: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42816: LD_ADDR_VAR 0 3
42820: PUSH
42821: LD_INT 40
42823: PPUSH
42824: LD_VAR 0 1
42828: PPUSH
42829: CALL_OW 321
42833: PUSH
42834: LD_INT 2
42836: EQUAL
42837: ST_TO_ADDR
42838: GO 42874
42840: LD_INT 27
42842: DOUBLE
42843: EQUAL
42844: IFTRUE 42848
42846: GO 42873
42848: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42849: LD_ADDR_VAR 0 3
42853: PUSH
42854: LD_INT 35
42856: PPUSH
42857: LD_VAR 0 1
42861: PPUSH
42862: CALL_OW 321
42866: PUSH
42867: LD_INT 2
42869: EQUAL
42870: ST_TO_ADDR
42871: GO 42874
42873: POP
// end ;
42874: LD_VAR 0 3
42878: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42879: LD_INT 0
42881: PPUSH
42882: PPUSH
42883: PPUSH
42884: PPUSH
42885: PPUSH
42886: PPUSH
42887: PPUSH
42888: PPUSH
42889: PPUSH
42890: PPUSH
42891: PPUSH
// result := false ;
42892: LD_ADDR_VAR 0 6
42896: PUSH
42897: LD_INT 0
42899: ST_TO_ADDR
// if btype = b_depot then
42900: LD_VAR 0 2
42904: PUSH
42905: LD_INT 0
42907: EQUAL
42908: IFFALSE 42920
// begin result := true ;
42910: LD_ADDR_VAR 0 6
42914: PUSH
42915: LD_INT 1
42917: ST_TO_ADDR
// exit ;
42918: GO 43746
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42920: LD_VAR 0 1
42924: NOT
42925: PUSH
42926: LD_VAR 0 1
42930: PPUSH
42931: CALL_OW 266
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 1
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: IN
42946: NOT
42947: OR
42948: PUSH
42949: LD_VAR 0 2
42953: NOT
42954: OR
42955: PUSH
42956: LD_VAR 0 5
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: LD_INT 2
42969: PUSH
42970: LD_INT 3
42972: PUSH
42973: LD_INT 4
42975: PUSH
42976: LD_INT 5
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: IN
42987: NOT
42988: OR
42989: PUSH
42990: LD_VAR 0 3
42994: PPUSH
42995: LD_VAR 0 4
42999: PPUSH
43000: CALL_OW 488
43004: NOT
43005: OR
43006: IFFALSE 43010
// exit ;
43008: GO 43746
// side := GetSide ( depot ) ;
43010: LD_ADDR_VAR 0 9
43014: PUSH
43015: LD_VAR 0 1
43019: PPUSH
43020: CALL_OW 255
43024: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43025: LD_VAR 0 9
43029: PPUSH
43030: LD_VAR 0 2
43034: PPUSH
43035: CALL 42503 0 2
43039: NOT
43040: IFFALSE 43044
// exit ;
43042: GO 43746
// pom := GetBase ( depot ) ;
43044: LD_ADDR_VAR 0 10
43048: PUSH
43049: LD_VAR 0 1
43053: PPUSH
43054: CALL_OW 274
43058: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43059: LD_ADDR_VAR 0 11
43063: PUSH
43064: LD_VAR 0 2
43068: PPUSH
43069: LD_VAR 0 1
43073: PPUSH
43074: CALL_OW 248
43078: PPUSH
43079: CALL_OW 450
43083: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43084: LD_VAR 0 10
43088: PPUSH
43089: LD_INT 1
43091: PPUSH
43092: CALL_OW 275
43096: PUSH
43097: LD_VAR 0 11
43101: PUSH
43102: LD_INT 1
43104: ARRAY
43105: GREATEREQUAL
43106: PUSH
43107: LD_VAR 0 10
43111: PPUSH
43112: LD_INT 2
43114: PPUSH
43115: CALL_OW 275
43119: PUSH
43120: LD_VAR 0 11
43124: PUSH
43125: LD_INT 2
43127: ARRAY
43128: GREATEREQUAL
43129: AND
43130: PUSH
43131: LD_VAR 0 10
43135: PPUSH
43136: LD_INT 3
43138: PPUSH
43139: CALL_OW 275
43143: PUSH
43144: LD_VAR 0 11
43148: PUSH
43149: LD_INT 3
43151: ARRAY
43152: GREATEREQUAL
43153: AND
43154: NOT
43155: IFFALSE 43159
// exit ;
43157: GO 43746
// if GetBType ( depot ) = b_depot then
43159: LD_VAR 0 1
43163: PPUSH
43164: CALL_OW 266
43168: PUSH
43169: LD_INT 0
43171: EQUAL
43172: IFFALSE 43184
// dist := 28 else
43174: LD_ADDR_VAR 0 14
43178: PUSH
43179: LD_INT 28
43181: ST_TO_ADDR
43182: GO 43192
// dist := 36 ;
43184: LD_ADDR_VAR 0 14
43188: PUSH
43189: LD_INT 36
43191: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43192: LD_VAR 0 1
43196: PPUSH
43197: LD_VAR 0 3
43201: PPUSH
43202: LD_VAR 0 4
43206: PPUSH
43207: CALL_OW 297
43211: PUSH
43212: LD_VAR 0 14
43216: GREATER
43217: IFFALSE 43221
// exit ;
43219: GO 43746
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43221: LD_ADDR_VAR 0 12
43225: PUSH
43226: LD_VAR 0 2
43230: PPUSH
43231: LD_VAR 0 3
43235: PPUSH
43236: LD_VAR 0 4
43240: PPUSH
43241: LD_VAR 0 5
43245: PPUSH
43246: LD_VAR 0 1
43250: PPUSH
43251: CALL_OW 248
43255: PPUSH
43256: LD_INT 0
43258: PPUSH
43259: CALL 43751 0 6
43263: ST_TO_ADDR
// if not hexes then
43264: LD_VAR 0 12
43268: NOT
43269: IFFALSE 43273
// exit ;
43271: GO 43746
// hex := GetHexInfo ( x , y ) ;
43273: LD_ADDR_VAR 0 15
43277: PUSH
43278: LD_VAR 0 3
43282: PPUSH
43283: LD_VAR 0 4
43287: PPUSH
43288: CALL_OW 546
43292: ST_TO_ADDR
// if hex [ 1 ] then
43293: LD_VAR 0 15
43297: PUSH
43298: LD_INT 1
43300: ARRAY
43301: IFFALSE 43305
// exit ;
43303: GO 43746
// height := hex [ 2 ] ;
43305: LD_ADDR_VAR 0 13
43309: PUSH
43310: LD_VAR 0 15
43314: PUSH
43315: LD_INT 2
43317: ARRAY
43318: ST_TO_ADDR
// for i = 1 to hexes do
43319: LD_ADDR_VAR 0 7
43323: PUSH
43324: DOUBLE
43325: LD_INT 1
43327: DEC
43328: ST_TO_ADDR
43329: LD_VAR 0 12
43333: PUSH
43334: FOR_TO
43335: IFFALSE 43665
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43337: LD_VAR 0 12
43341: PUSH
43342: LD_VAR 0 7
43346: ARRAY
43347: PUSH
43348: LD_INT 1
43350: ARRAY
43351: PPUSH
43352: LD_VAR 0 12
43356: PUSH
43357: LD_VAR 0 7
43361: ARRAY
43362: PUSH
43363: LD_INT 2
43365: ARRAY
43366: PPUSH
43367: CALL_OW 488
43371: NOT
43372: PUSH
43373: LD_VAR 0 12
43377: PUSH
43378: LD_VAR 0 7
43382: ARRAY
43383: PUSH
43384: LD_INT 1
43386: ARRAY
43387: PPUSH
43388: LD_VAR 0 12
43392: PUSH
43393: LD_VAR 0 7
43397: ARRAY
43398: PUSH
43399: LD_INT 2
43401: ARRAY
43402: PPUSH
43403: CALL_OW 428
43407: PUSH
43408: LD_INT 0
43410: GREATER
43411: OR
43412: PUSH
43413: LD_VAR 0 12
43417: PUSH
43418: LD_VAR 0 7
43422: ARRAY
43423: PUSH
43424: LD_INT 1
43426: ARRAY
43427: PPUSH
43428: LD_VAR 0 12
43432: PUSH
43433: LD_VAR 0 7
43437: ARRAY
43438: PUSH
43439: LD_INT 2
43441: ARRAY
43442: PPUSH
43443: CALL_OW 351
43447: OR
43448: IFFALSE 43454
// exit ;
43450: POP
43451: POP
43452: GO 43746
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43454: LD_ADDR_VAR 0 8
43458: PUSH
43459: LD_VAR 0 12
43463: PUSH
43464: LD_VAR 0 7
43468: ARRAY
43469: PUSH
43470: LD_INT 1
43472: ARRAY
43473: PPUSH
43474: LD_VAR 0 12
43478: PUSH
43479: LD_VAR 0 7
43483: ARRAY
43484: PUSH
43485: LD_INT 2
43487: ARRAY
43488: PPUSH
43489: CALL_OW 546
43493: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43494: LD_VAR 0 8
43498: PUSH
43499: LD_INT 1
43501: ARRAY
43502: PUSH
43503: LD_VAR 0 8
43507: PUSH
43508: LD_INT 2
43510: ARRAY
43511: PUSH
43512: LD_VAR 0 13
43516: PUSH
43517: LD_INT 2
43519: PLUS
43520: GREATER
43521: OR
43522: PUSH
43523: LD_VAR 0 8
43527: PUSH
43528: LD_INT 2
43530: ARRAY
43531: PUSH
43532: LD_VAR 0 13
43536: PUSH
43537: LD_INT 2
43539: MINUS
43540: LESS
43541: OR
43542: PUSH
43543: LD_VAR 0 8
43547: PUSH
43548: LD_INT 3
43550: ARRAY
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: LD_INT 8
43557: PUSH
43558: LD_INT 9
43560: PUSH
43561: LD_INT 10
43563: PUSH
43564: LD_INT 11
43566: PUSH
43567: LD_INT 12
43569: PUSH
43570: LD_INT 13
43572: PUSH
43573: LD_INT 16
43575: PUSH
43576: LD_INT 17
43578: PUSH
43579: LD_INT 18
43581: PUSH
43582: LD_INT 19
43584: PUSH
43585: LD_INT 20
43587: PUSH
43588: LD_INT 21
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: IN
43606: NOT
43607: OR
43608: PUSH
43609: LD_VAR 0 8
43613: PUSH
43614: LD_INT 5
43616: ARRAY
43617: NOT
43618: OR
43619: PUSH
43620: LD_VAR 0 8
43624: PUSH
43625: LD_INT 6
43627: ARRAY
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: LD_INT 7
43637: PUSH
43638: LD_INT 9
43640: PUSH
43641: LD_INT 10
43643: PUSH
43644: LD_INT 11
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: IN
43655: NOT
43656: OR
43657: IFFALSE 43663
// exit ;
43659: POP
43660: POP
43661: GO 43746
// end ;
43663: GO 43334
43665: POP
43666: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43667: LD_VAR 0 9
43671: PPUSH
43672: LD_VAR 0 3
43676: PPUSH
43677: LD_VAR 0 4
43681: PPUSH
43682: LD_INT 20
43684: PPUSH
43685: CALL 35669 0 4
43689: PUSH
43690: LD_INT 4
43692: ARRAY
43693: IFFALSE 43697
// exit ;
43695: GO 43746
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43697: LD_VAR 0 2
43701: PUSH
43702: LD_INT 29
43704: PUSH
43705: LD_INT 30
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: IN
43712: PUSH
43713: LD_VAR 0 3
43717: PPUSH
43718: LD_VAR 0 4
43722: PPUSH
43723: LD_VAR 0 9
43727: PPUSH
43728: CALL_OW 440
43732: NOT
43733: AND
43734: IFFALSE 43738
// exit ;
43736: GO 43746
// result := true ;
43738: LD_ADDR_VAR 0 6
43742: PUSH
43743: LD_INT 1
43745: ST_TO_ADDR
// end ;
43746: LD_VAR 0 6
43750: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43751: LD_INT 0
43753: PPUSH
43754: PPUSH
43755: PPUSH
43756: PPUSH
43757: PPUSH
43758: PPUSH
43759: PPUSH
43760: PPUSH
43761: PPUSH
43762: PPUSH
43763: PPUSH
43764: PPUSH
43765: PPUSH
43766: PPUSH
43767: PPUSH
43768: PPUSH
43769: PPUSH
43770: PPUSH
43771: PPUSH
43772: PPUSH
43773: PPUSH
43774: PPUSH
43775: PPUSH
43776: PPUSH
43777: PPUSH
43778: PPUSH
43779: PPUSH
43780: PPUSH
43781: PPUSH
43782: PPUSH
43783: PPUSH
43784: PPUSH
43785: PPUSH
43786: PPUSH
43787: PPUSH
43788: PPUSH
43789: PPUSH
43790: PPUSH
43791: PPUSH
43792: PPUSH
43793: PPUSH
43794: PPUSH
43795: PPUSH
43796: PPUSH
43797: PPUSH
43798: PPUSH
43799: PPUSH
43800: PPUSH
43801: PPUSH
43802: PPUSH
43803: PPUSH
43804: PPUSH
43805: PPUSH
43806: PPUSH
43807: PPUSH
43808: PPUSH
43809: PPUSH
43810: PPUSH
// result = [ ] ;
43811: LD_ADDR_VAR 0 7
43815: PUSH
43816: EMPTY
43817: ST_TO_ADDR
// temp_list = [ ] ;
43818: LD_ADDR_VAR 0 9
43822: PUSH
43823: EMPTY
43824: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43825: LD_VAR 0 4
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 2
43838: PUSH
43839: LD_INT 3
43841: PUSH
43842: LD_INT 4
43844: PUSH
43845: LD_INT 5
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: IN
43856: NOT
43857: PUSH
43858: LD_VAR 0 1
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: IN
43873: PUSH
43874: LD_VAR 0 5
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: LD_INT 2
43884: PUSH
43885: LD_INT 3
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: LIST
43892: IN
43893: NOT
43894: AND
43895: OR
43896: IFFALSE 43900
// exit ;
43898: GO 62291
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43900: LD_VAR 0 1
43904: PUSH
43905: LD_INT 6
43907: PUSH
43908: LD_INT 7
43910: PUSH
43911: LD_INT 8
43913: PUSH
43914: LD_INT 13
43916: PUSH
43917: LD_INT 12
43919: PUSH
43920: LD_INT 15
43922: PUSH
43923: LD_INT 11
43925: PUSH
43926: LD_INT 14
43928: PUSH
43929: LD_INT 10
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: IN
43943: IFFALSE 43953
// btype = b_lab ;
43945: LD_ADDR_VAR 0 1
43949: PUSH
43950: LD_INT 6
43952: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43953: LD_VAR 0 6
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: LD_INT 2
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: LIST
43971: IN
43972: NOT
43973: PUSH
43974: LD_VAR 0 1
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: LD_INT 3
43990: PUSH
43991: LD_INT 6
43993: PUSH
43994: LD_INT 36
43996: PUSH
43997: LD_INT 4
43999: PUSH
44000: LD_INT 5
44002: PUSH
44003: LD_INT 31
44005: PUSH
44006: LD_INT 32
44008: PUSH
44009: LD_INT 33
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: IN
44025: NOT
44026: PUSH
44027: LD_VAR 0 6
44031: PUSH
44032: LD_INT 1
44034: EQUAL
44035: AND
44036: OR
44037: PUSH
44038: LD_VAR 0 1
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: LD_INT 3
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: IN
44053: NOT
44054: PUSH
44055: LD_VAR 0 6
44059: PUSH
44060: LD_INT 2
44062: EQUAL
44063: AND
44064: OR
44065: IFFALSE 44075
// mode = 0 ;
44067: LD_ADDR_VAR 0 6
44071: PUSH
44072: LD_INT 0
44074: ST_TO_ADDR
// case mode of 0 :
44075: LD_VAR 0 6
44079: PUSH
44080: LD_INT 0
44082: DOUBLE
44083: EQUAL
44084: IFTRUE 44088
44086: GO 55541
44088: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44089: LD_ADDR_VAR 0 11
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 1
44109: NEG
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: NEG
44171: PUSH
44172: LD_INT 2
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 2
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: LD_INT 3
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 3
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: LD_INT 2
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44282: LD_ADDR_VAR 0 12
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 2
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 2
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 2
44405: NEG
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 2
44416: NEG
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: NEG
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 3
44439: NEG
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 3
44450: NEG
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44478: LD_ADDR_VAR 0 13
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: NEG
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: LD_INT 2
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: LD_INT 2
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 2
44613: NEG
44614: PUSH
44615: LD_INT 2
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 2
44625: NEG
44626: PUSH
44627: LD_INT 3
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 3
44637: NEG
44638: PUSH
44639: LD_INT 2
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 3
44649: NEG
44650: PUSH
44651: LD_INT 3
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44677: LD_ADDR_VAR 0 14
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: LD_INT 1
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: LD_INT 2
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: LD_INT 2
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 1
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: PUSH
44793: LD_INT 2
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: LD_INT 2
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: LD_INT 3
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 3
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: LD_INT 2
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44873: LD_ADDR_VAR 0 15
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 2
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 2
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 2
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 3
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 3
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45066: LD_ADDR_VAR 0 16
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 2
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 2
45169: PUSH
45170: LD_INT 2
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: LD_INT 2
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: NEG
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 2
45201: NEG
45202: PUSH
45203: LD_INT 2
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 3
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 3
45223: PUSH
45224: LD_INT 3
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: LD_INT 3
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45259: LD_ADDR_VAR 0 17
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: LD_INT 1
45332: NEG
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: LD_INT 2
45344: NEG
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 2
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: LD_INT 2
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 2
45458: NEG
45459: PUSH
45460: LD_INT 2
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45489: LD_ADDR_VAR 0 18
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: LD_INT 2
45574: NEG
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 2
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 2
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: NEG
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: NEG
45689: PUSH
45690: LD_INT 2
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45719: LD_ADDR_VAR 0 19
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 2
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 2
45895: NEG
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 2
45918: NEG
45919: PUSH
45920: LD_INT 2
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45949: LD_ADDR_VAR 0 20
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: NEG
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: LD_INT 2
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: LD_INT 2
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: LD_INT 2
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46179: LD_ADDR_VAR 0 21
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: LD_INT 2
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: LD_INT 2
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 2
46378: NEG
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46409: LD_ADDR_VAR 0 22
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: LD_INT 2
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: LD_INT 2
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: LD_INT 2
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 2
46585: NEG
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: NEG
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 2
46608: NEG
46609: PUSH
46610: LD_INT 2
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46639: LD_ADDR_VAR 0 23
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: LD_INT 2
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 2
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 2
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: LD_INT 2
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 2
46815: NEG
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: LD_INT 1
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 2
46838: NEG
46839: PUSH
46840: LD_INT 2
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 2
46850: NEG
46851: PUSH
46852: LD_INT 3
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: LD_INT 3
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 2
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46919: LD_ADDR_VAR 0 24
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: LD_INT 2
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 2
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 2
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 2
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: NEG
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 2
47118: NEG
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: LD_INT 2
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 3
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 3
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47195: LD_ADDR_VAR 0 25
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 0
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: LD_INT 2
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 2
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: LD_INT 2
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 2
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 2
47371: NEG
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: NEG
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 2
47394: NEG
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 3
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 3
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: LD_INT 3
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: LD_INT 3
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47469: LD_ADDR_VAR 0 26
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: LD_INT 1
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: LD_INT 2
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: LD_INT 2
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 2
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 2
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: LD_INT 2
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 2
47645: NEG
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 2
47656: NEG
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: LD_INT 2
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: PUSH
47681: LD_INT 3
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 3
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 2
47711: NEG
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47745: LD_ADDR_VAR 0 27
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 2
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 2
47944: NEG
47945: PUSH
47946: LD_INT 2
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: LD_INT 2
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 2
47967: NEG
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 3
47978: NEG
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 3
47990: NEG
47991: PUSH
47992: LD_INT 2
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48025: LD_ADDR_VAR 0 28
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: LD_INT 2
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: LD_INT 2
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 2
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 2
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 2
48160: PUSH
48161: LD_INT 2
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 2
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: NEG
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 2
48224: NEG
48225: PUSH
48226: LD_INT 2
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: NEG
48237: PUSH
48238: LD_INT 3
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: LD_INT 3
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 3
48260: NEG
48261: PUSH
48262: LD_INT 1
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 3
48272: NEG
48273: PUSH
48274: LD_INT 2
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48307: LD_ADDR_VAR 0 29
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: NEG
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: LD_INT 2
48403: NEG
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 2
48473: NEG
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 2
48485: NEG
48486: PUSH
48487: LD_INT 2
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 2
48497: NEG
48498: PUSH
48499: LD_INT 3
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 3
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: LD_INT 3
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 2
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 3
48551: NEG
48552: PUSH
48553: LD_INT 2
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48586: LD_ADDR_VAR 0 30
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: LD_INT 1
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 0
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: LD_INT 2
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: LD_INT 2
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: LD_INT 2
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 2
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 2
48752: NEG
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 2
48763: NEG
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: LD_INT 3
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: LD_INT 2
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 3
48798: PUSH
48799: LD_INT 2
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 2
48808: PUSH
48809: LD_INT 3
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 2
48818: NEG
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 3
48829: NEG
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48864: LD_ADDR_VAR 0 31
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: LD_INT 2
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 2
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: LD_INT 2
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: LD_INT 2
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: LD_INT 2
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 2
49029: NEG
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: NEG
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 2
49053: NEG
49054: PUSH
49055: LD_INT 3
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 3
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: LD_INT 3
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: LD_INT 2
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 3
49107: NEG
49108: PUSH
49109: LD_INT 2
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49142: LD_ADDR_VAR 0 32
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: LD_INT 2
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: LD_INT 2
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: LD_INT 2
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: NEG
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 2
49308: NEG
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: NEG
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: LD_INT 3
49335: NEG
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: LD_INT 2
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 3
49354: PUSH
49355: LD_INT 2
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: LD_INT 3
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 3
49385: NEG
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49420: LD_ADDR_VAR 0 33
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: LD_INT 2
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 2
49575: NEG
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 2
49586: NEG
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 2
49598: NEG
49599: PUSH
49600: LD_INT 2
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: LD_INT 3
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 3
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 3
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: LD_INT 2
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 3
49664: NEG
49665: PUSH
49666: LD_INT 2
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49699: LD_ADDR_VAR 0 34
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: LD_INT 2
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: LD_INT 2
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: LD_INT 2
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: LD_INT 2
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 2
49855: NEG
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 2
49866: NEG
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 2
49878: NEG
49879: PUSH
49880: LD_INT 2
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: LD_INT 3
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 3
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: LD_INT 3
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 3
49944: NEG
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49979: LD_ADDR_VAR 0 35
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 2
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50091: LD_ADDR_VAR 0 36
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: LD_INT 2
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50203: LD_ADDR_VAR 0 37
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: LD_INT 1
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50315: LD_ADDR_VAR 0 38
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 0
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 2
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 2
50406: NEG
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50427: LD_ADDR_VAR 0 39
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: LD_INT 2
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: LD_INT 2
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50539: LD_ADDR_VAR 0 40
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50651: LD_ADDR_VAR 0 41
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 2
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 2
50775: PUSH
50776: LD_INT 2
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: NEG
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: NEG
50830: PUSH
50831: LD_INT 2
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 2
50841: NEG
50842: PUSH
50843: LD_INT 3
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 2
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 3
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 3
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 3
50884: PUSH
50885: LD_INT 2
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 3
50894: PUSH
50895: LD_INT 3
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: LD_INT 3
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 2
50914: NEG
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 3
50925: NEG
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 3
50936: NEG
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 3
50948: NEG
50949: PUSH
50950: LD_INT 2
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 3
50960: NEG
50961: PUSH
50962: LD_INT 3
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51001: LD_ADDR_VAR 0 42
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 2
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 2
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 2
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: LD_INT 2
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 2
51167: NEG
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 2
51179: NEG
51180: PUSH
51181: LD_INT 2
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: LD_INT 3
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: LD_INT 3
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: LD_INT 3
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: PUSH
51227: LD_INT 2
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 3
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 3
51247: PUSH
51248: LD_INT 3
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 2
51257: PUSH
51258: LD_INT 3
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: LD_INT 3
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: LD_INT 3
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 1
51287: NEG
51288: PUSH
51289: LD_INT 2
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 3
51298: NEG
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 3
51310: NEG
51311: PUSH
51312: LD_INT 3
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51351: LD_ADDR_VAR 0 43
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: NEG
51433: PUSH
51434: LD_INT 2
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: LD_INT 2
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 2
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: LD_INT 2
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: LD_INT 2
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 1
51506: NEG
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 2
51517: NEG
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: LD_INT 1
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: LD_INT 3
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: LD_INT 3
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: LD_INT 2
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 2
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 3
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 3
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: LD_INT 3
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: LD_INT 3
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: LD_INT 2
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 2
51636: NEG
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 3
51647: NEG
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 3
51658: NEG
51659: PUSH
51660: LD_INT 1
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51699: LD_ADDR_VAR 0 44
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: LD_INT 1
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 1
51768: NEG
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: LD_INT 2
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 2
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 2
51823: PUSH
51824: LD_INT 2
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: LD_INT 2
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 2
51854: NEG
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 2
51865: NEG
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 2
51877: NEG
51878: PUSH
51879: LD_INT 2
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 2
51889: NEG
51890: PUSH
51891: LD_INT 3
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 3
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 3
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 3
51932: PUSH
51933: LD_INT 2
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 3
51942: PUSH
51943: LD_INT 3
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: LD_INT 3
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 2
51962: NEG
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 3
51973: NEG
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 3
51984: NEG
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 3
51996: NEG
51997: PUSH
51998: LD_INT 2
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 3
52008: NEG
52009: PUSH
52010: LD_INT 3
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52049: LD_ADDR_VAR 0 45
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: LD_INT 2
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: LD_INT 2
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 2
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 2
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 2
52215: NEG
52216: PUSH
52217: LD_INT 1
52219: NEG
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: LD_INT 2
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 2
52239: NEG
52240: PUSH
52241: LD_INT 3
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: LD_INT 3
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: LD_INT 3
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: LD_INT 2
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 3
52285: PUSH
52286: LD_INT 2
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 3
52295: PUSH
52296: LD_INT 3
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 2
52305: PUSH
52306: LD_INT 3
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: LD_INT 3
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 3
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 2
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 3
52346: NEG
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 3
52358: NEG
52359: PUSH
52360: LD_INT 3
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52399: LD_ADDR_VAR 0 46
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: LD_INT 2
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 2
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: LD_INT 2
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: LD_INT 2
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 2
52565: NEG
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: NEG
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: LD_INT 3
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: LD_INT 3
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 2
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 3
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 3
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: LD_INT 3
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 3
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: LD_INT 2
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 2
52684: NEG
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 3
52695: NEG
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 3
52706: NEG
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52747: LD_ADDR_VAR 0 47
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: LD_INT 2
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: LD_INT 2
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: NEG
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52898: LD_ADDR_VAR 0 48
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 2
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 2
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 2
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 2
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53045: LD_ADDR_VAR 0 49
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: LD_INT 1
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 2
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 2
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 2
53157: PUSH
53158: LD_INT 2
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: LD_INT 2
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53189: LD_ADDR_VAR 0 50
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 2
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: LD_INT 2
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53333: LD_ADDR_VAR 0 51
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: LD_INT 2
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 2
53445: NEG
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53480: LD_ADDR_VAR 0 52
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: NEG
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 2
53607: NEG
53608: PUSH
53609: LD_INT 2
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53631: LD_ADDR_VAR 0 53
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: LD_INT 2
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 2
53766: PUSH
53767: LD_INT 2
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: LD_INT 2
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: LD_INT 2
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 2
53807: NEG
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 2
53818: NEG
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53861: LD_ADDR_VAR 0 54
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: LD_INT 2
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 2
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 2
54037: NEG
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 2
54048: NEG
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 2
54060: NEG
54061: PUSH
54062: LD_INT 2
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54091: LD_ADDR_VAR 0 55
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: LD_INT 2
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 2
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 2
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 2
54226: PUSH
54227: LD_INT 2
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: NEG
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: LD_INT 2
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54321: LD_ADDR_VAR 0 56
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: LD_INT 1
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: LD_INT 2
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 2
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 2
54456: PUSH
54457: LD_INT 2
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: LD_INT 2
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 2
54497: NEG
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 2
54508: NEG
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 2
54520: NEG
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54551: LD_ADDR_VAR 0 57
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: LD_INT 2
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 2
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 2
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 2
54686: PUSH
54687: LD_INT 2
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 2
54727: NEG
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 2
54738: NEG
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: NEG
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54781: LD_ADDR_VAR 0 58
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: LD_INT 2
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 2
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 2
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: LD_INT 2
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: NEG
54981: PUSH
54982: LD_INT 2
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55011: LD_ADDR_VAR 0 59
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55099: LD_ADDR_VAR 0 60
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55187: LD_ADDR_VAR 0 61
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55275: LD_ADDR_VAR 0 62
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 1
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55363: LD_ADDR_VAR 0 63
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55451: LD_ADDR_VAR 0 64
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: NEG
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: ST_TO_ADDR
// end ; 1 :
55539: GO 61436
55541: LD_INT 1
55543: DOUBLE
55544: EQUAL
55545: IFTRUE 55549
55547: GO 58172
55549: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55550: LD_ADDR_VAR 0 11
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: LD_INT 3
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: LD_INT 3
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: LIST
55593: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55594: LD_ADDR_VAR 0 12
55598: PUSH
55599: LD_INT 2
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 3
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 3
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: LIST
55634: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55635: LD_ADDR_VAR 0 13
55639: PUSH
55640: LD_INT 3
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 3
55652: PUSH
55653: LD_INT 3
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: LD_INT 3
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: LIST
55674: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55675: LD_ADDR_VAR 0 14
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: LD_INT 3
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 3
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: LD_INT 2
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: LIST
55715: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55716: LD_ADDR_VAR 0 15
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 3
55734: NEG
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 3
55745: NEG
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: LIST
55759: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55760: LD_ADDR_VAR 0 16
55764: PUSH
55765: LD_INT 2
55767: NEG
55768: PUSH
55769: LD_INT 3
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 3
55779: NEG
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 3
55791: NEG
55792: PUSH
55793: LD_INT 3
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: LIST
55805: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55806: LD_ADDR_VAR 0 17
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 3
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 3
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: LD_INT 2
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: LIST
55849: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55850: LD_ADDR_VAR 0 18
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 3
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 3
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: LIST
55890: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55891: LD_ADDR_VAR 0 19
55895: PUSH
55896: LD_INT 3
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 3
55908: PUSH
55909: LD_INT 3
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: LD_INT 3
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: LIST
55930: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55931: LD_ADDR_VAR 0 20
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 3
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: LD_INT 2
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: LIST
55971: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55972: LD_ADDR_VAR 0 21
55976: PUSH
55977: LD_INT 2
55979: NEG
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 3
55990: NEG
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 3
56001: NEG
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: LIST
56015: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56016: LD_ADDR_VAR 0 22
56020: PUSH
56021: LD_INT 2
56023: NEG
56024: PUSH
56025: LD_INT 3
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 3
56035: NEG
56036: PUSH
56037: LD_INT 2
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 3
56047: NEG
56048: PUSH
56049: LD_INT 3
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: LIST
56061: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56062: LD_ADDR_VAR 0 23
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 3
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: LD_INT 4
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: LD_INT 3
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: LIST
56105: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56106: LD_ADDR_VAR 0 24
56110: PUSH
56111: LD_INT 3
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 3
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 4
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: LIST
56146: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56147: LD_ADDR_VAR 0 25
56151: PUSH
56152: LD_INT 3
56154: PUSH
56155: LD_INT 3
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 4
56164: PUSH
56165: LD_INT 3
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 3
56174: PUSH
56175: LD_INT 4
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: LIST
56186: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56187: LD_ADDR_VAR 0 26
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: LD_INT 3
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 4
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: LD_INT 3
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: LIST
56227: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56228: LD_ADDR_VAR 0 27
56232: PUSH
56233: LD_INT 3
56235: NEG
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 3
56246: NEG
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 4
56257: NEG
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: LIST
56271: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56272: LD_ADDR_VAR 0 28
56276: PUSH
56277: LD_INT 3
56279: NEG
56280: PUSH
56281: LD_INT 3
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 3
56291: NEG
56292: PUSH
56293: LD_INT 4
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 4
56303: NEG
56304: PUSH
56305: LD_INT 3
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: LIST
56317: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56318: LD_ADDR_VAR 0 29
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 3
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 3
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: LD_INT 4
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: LD_INT 4
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: LD_INT 3
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: LD_INT 5
56397: NEG
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: LD_INT 5
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: LD_INT 4
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: LD_INT 6
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: LD_INT 6
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: LD_INT 5
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56473: LD_ADDR_VAR 0 30
56477: PUSH
56478: LD_INT 2
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 3
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 3
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 3
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 4
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 4
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 4
56542: PUSH
56543: LD_INT 1
56545: NEG
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 5
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 5
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 5
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 6
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 6
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56616: LD_ADDR_VAR 0 31
56620: PUSH
56621: LD_INT 3
56623: PUSH
56624: LD_INT 2
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 3
56633: PUSH
56634: LD_INT 3
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 2
56643: PUSH
56644: LD_INT 3
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 4
56653: PUSH
56654: LD_INT 3
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 4
56663: PUSH
56664: LD_INT 4
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 3
56673: PUSH
56674: LD_INT 4
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 5
56683: PUSH
56684: LD_INT 4
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 5
56693: PUSH
56694: LD_INT 5
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 4
56703: PUSH
56704: LD_INT 5
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 6
56713: PUSH
56714: LD_INT 5
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 6
56723: PUSH
56724: LD_INT 6
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 5
56733: PUSH
56734: LD_INT 6
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56755: LD_ADDR_VAR 0 32
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: LD_INT 3
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: LD_INT 3
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: LD_INT 2
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: LD_INT 4
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: LD_INT 4
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: NEG
56814: PUSH
56815: LD_INT 3
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: LD_INT 5
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: LD_INT 5
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: LD_INT 4
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: LD_INT 6
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: LD_INT 6
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: LD_INT 5
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56898: LD_ADDR_VAR 0 33
56902: PUSH
56903: LD_INT 2
56905: NEG
56906: PUSH
56907: LD_INT 1
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 3
56916: NEG
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 3
56927: NEG
56928: PUSH
56929: LD_INT 1
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 3
56939: NEG
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 4
56950: NEG
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 4
56961: NEG
56962: PUSH
56963: LD_INT 1
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 4
56973: NEG
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 5
56984: NEG
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 5
56995: NEG
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 5
57007: NEG
57008: PUSH
57009: LD_INT 1
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 6
57018: NEG
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 6
57029: NEG
57030: PUSH
57031: LD_INT 1
57033: NEG
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57053: LD_ADDR_VAR 0 34
57057: PUSH
57058: LD_INT 2
57060: NEG
57061: PUSH
57062: LD_INT 3
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 3
57072: NEG
57073: PUSH
57074: LD_INT 2
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 3
57084: NEG
57085: PUSH
57086: LD_INT 3
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 3
57096: NEG
57097: PUSH
57098: LD_INT 4
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 4
57108: NEG
57109: PUSH
57110: LD_INT 3
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 4
57120: NEG
57121: PUSH
57122: LD_INT 4
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 4
57132: NEG
57133: PUSH
57134: LD_INT 5
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 5
57144: NEG
57145: PUSH
57146: LD_INT 4
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 5
57156: NEG
57157: PUSH
57158: LD_INT 5
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 5
57168: NEG
57169: PUSH
57170: LD_INT 6
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 6
57180: NEG
57181: PUSH
57182: LD_INT 5
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 6
57192: NEG
57193: PUSH
57194: LD_INT 6
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57216: LD_ADDR_VAR 0 41
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: LD_INT 3
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: LD_INT 2
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: LIST
57259: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57260: LD_ADDR_VAR 0 42
57264: PUSH
57265: LD_INT 2
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 2
57277: PUSH
57278: LD_INT 1
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 3
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: LIST
57300: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57301: LD_ADDR_VAR 0 43
57305: PUSH
57306: LD_INT 2
57308: PUSH
57309: LD_INT 2
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 3
57318: PUSH
57319: LD_INT 2
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: LD_INT 3
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: LIST
57340: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57341: LD_ADDR_VAR 0 44
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: LD_INT 2
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: LD_INT 3
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: LD_INT 2
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: LIST
57381: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57382: LD_ADDR_VAR 0 45
57386: PUSH
57387: LD_INT 2
57389: NEG
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 2
57400: NEG
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 3
57411: NEG
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: LIST
57425: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57426: LD_ADDR_VAR 0 46
57430: PUSH
57431: LD_INT 2
57433: NEG
57434: PUSH
57435: LD_INT 2
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 2
57445: NEG
57446: PUSH
57447: LD_INT 3
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 3
57457: NEG
57458: PUSH
57459: LD_INT 2
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: LIST
57471: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57472: LD_ADDR_VAR 0 47
57476: PUSH
57477: LD_INT 2
57479: NEG
57480: PUSH
57481: LD_INT 3
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: LD_INT 3
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57505: LD_ADDR_VAR 0 48
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: LD_INT 2
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 2
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57536: LD_ADDR_VAR 0 49
57540: PUSH
57541: LD_INT 3
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 3
57553: PUSH
57554: LD_INT 2
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57565: LD_ADDR_VAR 0 50
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: LD_INT 3
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: LD_INT 3
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57594: LD_ADDR_VAR 0 51
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57625: LD_ADDR_VAR 0 52
57629: PUSH
57630: LD_INT 3
57632: NEG
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 3
57644: NEG
57645: PUSH
57646: LD_INT 2
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57658: LD_ADDR_VAR 0 53
57662: PUSH
57663: LD_INT 1
57665: NEG
57666: PUSH
57667: LD_INT 3
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: LD_INT 3
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 1
57688: PUSH
57689: LD_INT 2
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: LIST
57701: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57702: LD_ADDR_VAR 0 54
57706: PUSH
57707: LD_INT 2
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 3
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 3
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: LIST
57742: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57743: LD_ADDR_VAR 0 55
57747: PUSH
57748: LD_INT 3
57750: PUSH
57751: LD_INT 2
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 3
57760: PUSH
57761: LD_INT 3
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: LD_INT 3
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: LIST
57782: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57783: LD_ADDR_VAR 0 56
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: LD_INT 3
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 3
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: LIST
57823: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57824: LD_ADDR_VAR 0 57
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 3
57842: NEG
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 3
57853: NEG
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: LIST
57867: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57868: LD_ADDR_VAR 0 58
57872: PUSH
57873: LD_INT 2
57875: NEG
57876: PUSH
57877: LD_INT 3
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 3
57887: NEG
57888: PUSH
57889: LD_INT 2
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 3
57899: NEG
57900: PUSH
57901: LD_INT 3
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: LIST
57913: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57914: LD_ADDR_VAR 0 59
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: LD_INT 2
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: LD_INT 2
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: LIST
57957: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57958: LD_ADDR_VAR 0 60
57962: PUSH
57963: LD_INT 1
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 2
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: LIST
57998: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57999: LD_ADDR_VAR 0 61
58003: PUSH
58004: LD_INT 2
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: LD_INT 2
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: LIST
58038: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58039: LD_ADDR_VAR 0 62
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: LD_INT 2
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: LD_INT 2
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: LIST
58079: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58080: LD_ADDR_VAR 0 63
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 2
58098: NEG
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: NEG
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: LIST
58123: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58124: LD_ADDR_VAR 0 64
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: LD_INT 2
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 2
58143: NEG
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 2
58155: NEG
58156: PUSH
58157: LD_INT 2
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: LIST
58169: ST_TO_ADDR
// end ; 2 :
58170: GO 61436
58172: LD_INT 2
58174: DOUBLE
58175: EQUAL
58176: IFTRUE 58180
58178: GO 61435
58180: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58181: LD_ADDR_VAR 0 29
58185: PUSH
58186: LD_INT 4
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 4
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 5
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 5
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 4
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 3
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 3
58249: PUSH
58250: LD_INT 1
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 3
58260: PUSH
58261: LD_INT 2
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 5
58271: PUSH
58272: LD_INT 2
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 3
58281: PUSH
58282: LD_INT 3
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 3
58291: PUSH
58292: LD_INT 2
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 4
58301: PUSH
58302: LD_INT 3
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 4
58311: PUSH
58312: LD_INT 4
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 3
58321: PUSH
58322: LD_INT 4
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 2
58331: PUSH
58332: LD_INT 3
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 2
58341: PUSH
58342: LD_INT 2
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 4
58351: PUSH
58352: LD_INT 2
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 2
58361: PUSH
58362: LD_INT 4
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: LD_INT 4
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: LD_INT 3
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 4
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: PUSH
58402: LD_INT 5
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: LD_INT 5
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: LD_INT 4
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: LD_INT 3
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 2
58443: PUSH
58444: LD_INT 5
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 2
58453: NEG
58454: PUSH
58455: LD_INT 3
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 3
58464: NEG
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 3
58475: NEG
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 2
58487: NEG
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 2
58498: NEG
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 3
58509: NEG
58510: PUSH
58511: LD_INT 1
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 4
58520: NEG
58521: PUSH
58522: LD_INT 0
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 4
58531: NEG
58532: PUSH
58533: LD_INT 1
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 4
58543: NEG
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: LD_INT 2
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 4
58566: NEG
58567: PUSH
58568: LD_INT 4
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 4
58578: NEG
58579: PUSH
58580: LD_INT 5
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 3
58590: NEG
58591: PUSH
58592: LD_INT 4
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 3
58602: NEG
58603: PUSH
58604: LD_INT 3
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 4
58614: NEG
58615: PUSH
58616: LD_INT 3
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 5
58626: NEG
58627: PUSH
58628: LD_INT 4
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 5
58638: NEG
58639: PUSH
58640: LD_INT 5
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 3
58650: NEG
58651: PUSH
58652: LD_INT 5
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 5
58662: NEG
58663: PUSH
58664: LD_INT 3
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58719: LD_ADDR_VAR 0 30
58723: PUSH
58724: LD_INT 4
58726: PUSH
58727: LD_INT 4
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 4
58736: PUSH
58737: LD_INT 3
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 5
58746: PUSH
58747: LD_INT 4
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 5
58756: PUSH
58757: LD_INT 5
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 4
58766: PUSH
58767: LD_INT 5
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 3
58776: PUSH
58777: LD_INT 4
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 3
58786: PUSH
58787: LD_INT 3
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 5
58796: PUSH
58797: LD_INT 3
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 3
58806: PUSH
58807: LD_INT 5
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 0
58826: PUSH
58827: LD_INT 2
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 1
58836: PUSH
58837: LD_INT 3
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: LD_INT 4
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: LD_INT 4
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: LD_INT 3
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: LD_INT 2
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 2
58888: PUSH
58889: LD_INT 4
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 2
58898: NEG
58899: PUSH
58900: LD_INT 2
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 4
58909: NEG
58910: PUSH
58911: LD_INT 0
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 4
58920: NEG
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 3
58932: NEG
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 3
58943: NEG
58944: PUSH
58945: LD_INT 1
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 4
58954: NEG
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 5
58965: NEG
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 5
58976: NEG
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 5
58988: NEG
58989: PUSH
58990: LD_INT 2
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 3
59000: NEG
59001: PUSH
59002: LD_INT 2
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 3
59011: NEG
59012: PUSH
59013: LD_INT 3
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 3
59023: NEG
59024: PUSH
59025: LD_INT 4
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 2
59035: NEG
59036: PUSH
59037: LD_INT 3
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 2
59047: NEG
59048: PUSH
59049: LD_INT 2
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 3
59059: NEG
59060: PUSH
59061: LD_INT 2
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 4
59071: NEG
59072: PUSH
59073: LD_INT 3
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 4
59083: NEG
59084: PUSH
59085: LD_INT 4
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 2
59095: NEG
59096: PUSH
59097: LD_INT 4
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 4
59107: NEG
59108: PUSH
59109: LD_INT 2
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: LD_INT 4
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: LD_INT 5
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: LD_INT 4
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: LD_INT 3
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 0
59163: PUSH
59164: LD_INT 3
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: LD_INT 4
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: LD_INT 5
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 2
59198: PUSH
59199: LD_INT 3
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 2
59209: NEG
59210: PUSH
59211: LD_INT 5
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59266: LD_ADDR_VAR 0 31
59270: PUSH
59271: LD_INT 0
59273: PUSH
59274: LD_INT 4
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: LD_INT 3
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 1
59293: PUSH
59294: LD_INT 4
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: LD_INT 5
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: LD_INT 5
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: LD_INT 4
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: LD_INT 3
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: LD_INT 5
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 2
59355: NEG
59356: PUSH
59357: LD_INT 3
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 3
59366: NEG
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 3
59377: NEG
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 2
59389: NEG
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 2
59400: NEG
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 3
59411: NEG
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 4
59422: NEG
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 4
59433: NEG
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 4
59445: NEG
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 2
59457: NEG
59458: PUSH
59459: LD_INT 2
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 4
59468: NEG
59469: PUSH
59470: LD_INT 4
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 4
59480: NEG
59481: PUSH
59482: LD_INT 5
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 3
59492: NEG
59493: PUSH
59494: LD_INT 4
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 3
59504: NEG
59505: PUSH
59506: LD_INT 3
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 4
59516: NEG
59517: PUSH
59518: LD_INT 3
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 5
59528: NEG
59529: PUSH
59530: LD_INT 4
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 5
59540: NEG
59541: PUSH
59542: LD_INT 5
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 3
59552: NEG
59553: PUSH
59554: LD_INT 5
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 5
59564: NEG
59565: PUSH
59566: LD_INT 3
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: LD_INT 3
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: LD_INT 4
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: LD_INT 3
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: LD_INT 2
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: LD_INT 2
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 1
59631: NEG
59632: PUSH
59633: LD_INT 3
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: LD_INT 4
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 2
59655: PUSH
59656: LD_INT 2
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 2
59666: NEG
59667: PUSH
59668: LD_INT 4
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 4
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 4
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 5
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 5
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 4
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 3
59729: PUSH
59730: LD_INT 0
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 3
59739: PUSH
59740: LD_INT 1
59742: NEG
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 3
59750: PUSH
59751: LD_INT 2
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 5
59761: PUSH
59762: LD_INT 2
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59816: LD_ADDR_VAR 0 32
59820: PUSH
59821: LD_INT 4
59823: NEG
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 4
59834: NEG
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 3
59846: NEG
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 3
59857: NEG
59858: PUSH
59859: LD_INT 1
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 4
59868: NEG
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 5
59879: NEG
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 5
59890: NEG
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 5
59902: NEG
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 3
59914: NEG
59915: PUSH
59916: LD_INT 2
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 3
59925: NEG
59926: PUSH
59927: LD_INT 3
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 3
59937: NEG
59938: PUSH
59939: LD_INT 4
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 2
59949: NEG
59950: PUSH
59951: LD_INT 3
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 2
59961: NEG
59962: PUSH
59963: LD_INT 2
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 3
59973: NEG
59974: PUSH
59975: LD_INT 2
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 4
59985: NEG
59986: PUSH
59987: LD_INT 3
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 4
59997: NEG
59998: PUSH
59999: LD_INT 4
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 2
60009: NEG
60010: PUSH
60011: LD_INT 4
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 4
60021: NEG
60022: PUSH
60023: LD_INT 2
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 0
60033: PUSH
60034: LD_INT 4
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: LD_INT 5
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: LD_INT 4
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: LD_INT 3
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: LD_INT 3
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 1
60088: NEG
60089: PUSH
60090: LD_INT 4
60092: NEG
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 1
60100: NEG
60101: PUSH
60102: LD_INT 5
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 2
60112: PUSH
60113: LD_INT 3
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 2
60123: NEG
60124: PUSH
60125: LD_INT 5
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 3
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 3
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 4
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 4
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 3
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 2
60186: PUSH
60187: LD_INT 0
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 2
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 2
60207: PUSH
60208: LD_INT 2
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 4
60218: PUSH
60219: LD_INT 2
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 4
60228: PUSH
60229: LD_INT 4
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 4
60238: PUSH
60239: LD_INT 3
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 5
60248: PUSH
60249: LD_INT 4
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 5
60258: PUSH
60259: LD_INT 5
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 4
60268: PUSH
60269: LD_INT 5
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 3
60278: PUSH
60279: LD_INT 4
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 3
60288: PUSH
60289: LD_INT 3
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 5
60298: PUSH
60299: LD_INT 3
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 3
60308: PUSH
60309: LD_INT 5
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60363: LD_ADDR_VAR 0 33
60367: PUSH
60368: LD_INT 4
60370: NEG
60371: PUSH
60372: LD_INT 4
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 4
60382: NEG
60383: PUSH
60384: LD_INT 5
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 3
60394: NEG
60395: PUSH
60396: LD_INT 4
60398: NEG
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 3
60406: NEG
60407: PUSH
60408: LD_INT 3
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 4
60418: NEG
60419: PUSH
60420: LD_INT 3
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 5
60430: NEG
60431: PUSH
60432: LD_INT 4
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 5
60442: NEG
60443: PUSH
60444: LD_INT 5
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 3
60454: NEG
60455: PUSH
60456: LD_INT 5
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 5
60466: NEG
60467: PUSH
60468: LD_INT 3
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: LD_INT 3
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: LD_INT 4
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: LD_INT 3
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 2
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: LD_INT 2
60525: NEG
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: NEG
60534: PUSH
60535: LD_INT 3
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 1
60545: NEG
60546: PUSH
60547: LD_INT 4
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 2
60557: PUSH
60558: LD_INT 2
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 2
60568: NEG
60569: PUSH
60570: LD_INT 4
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 4
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 4
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 5
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 5
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 4
60621: PUSH
60622: LD_INT 1
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 3
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 3
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 3
60652: PUSH
60653: LD_INT 2
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 5
60663: PUSH
60664: LD_INT 2
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 3
60673: PUSH
60674: LD_INT 3
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 3
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 4
60693: PUSH
60694: LD_INT 3
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 4
60703: PUSH
60704: LD_INT 4
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 3
60713: PUSH
60714: LD_INT 4
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: LD_INT 3
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: LD_INT 2
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 4
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 2
60753: PUSH
60754: LD_INT 4
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: LD_INT 4
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 0
60773: PUSH
60774: LD_INT 3
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: PUSH
60784: LD_INT 4
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: PUSH
60794: LD_INT 5
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: LD_INT 5
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: LD_INT 4
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: NEG
60825: PUSH
60826: LD_INT 3
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 2
60835: PUSH
60836: LD_INT 5
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 2
60845: NEG
60846: PUSH
60847: LD_INT 3
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60901: LD_ADDR_VAR 0 34
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: LD_INT 4
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: LD_INT 5
60922: NEG
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: LD_INT 4
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: LD_INT 3
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: LD_INT 3
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 1
60963: NEG
60964: PUSH
60965: LD_INT 4
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 1
60975: NEG
60976: PUSH
60977: LD_INT 5
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 2
60987: PUSH
60988: LD_INT 3
60990: NEG
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 2
60998: NEG
60999: PUSH
61000: LD_INT 5
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 3
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 3
61020: PUSH
61021: LD_INT 1
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 4
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 4
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 3
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 2
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 2
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 2
61082: PUSH
61083: LD_INT 2
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 4
61093: PUSH
61094: LD_INT 2
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 4
61103: PUSH
61104: LD_INT 4
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 4
61113: PUSH
61114: LD_INT 3
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 5
61123: PUSH
61124: LD_INT 4
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 5
61133: PUSH
61134: LD_INT 5
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 4
61143: PUSH
61144: LD_INT 5
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 3
61153: PUSH
61154: LD_INT 4
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 3
61163: PUSH
61164: LD_INT 3
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 5
61173: PUSH
61174: LD_INT 3
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 3
61183: PUSH
61184: LD_INT 5
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: LD_INT 3
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: LD_INT 2
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 1
61213: PUSH
61214: LD_INT 3
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 1
61223: PUSH
61224: LD_INT 4
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: LD_INT 4
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 1
61243: NEG
61244: PUSH
61245: LD_INT 3
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 1
61254: NEG
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 2
61265: PUSH
61266: LD_INT 4
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 2
61275: NEG
61276: PUSH
61277: LD_INT 2
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 4
61286: NEG
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 4
61297: NEG
61298: PUSH
61299: LD_INT 1
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 3
61309: NEG
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 3
61320: NEG
61321: PUSH
61322: LD_INT 1
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 4
61331: NEG
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 5
61342: NEG
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 5
61353: NEG
61354: PUSH
61355: LD_INT 1
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 5
61365: NEG
61366: PUSH
61367: LD_INT 2
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 3
61377: NEG
61378: PUSH
61379: LD_INT 2
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: ST_TO_ADDR
// end ; end ;
61433: GO 61436
61435: POP
// case btype of b_depot , b_warehouse :
61436: LD_VAR 0 1
61440: PUSH
61441: LD_INT 0
61443: DOUBLE
61444: EQUAL
61445: IFTRUE 61455
61447: LD_INT 1
61449: DOUBLE
61450: EQUAL
61451: IFTRUE 61455
61453: GO 61656
61455: POP
// case nation of nation_american :
61456: LD_VAR 0 5
61460: PUSH
61461: LD_INT 1
61463: DOUBLE
61464: EQUAL
61465: IFTRUE 61469
61467: GO 61525
61469: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61470: LD_ADDR_VAR 0 9
61474: PUSH
61475: LD_VAR 0 11
61479: PUSH
61480: LD_VAR 0 12
61484: PUSH
61485: LD_VAR 0 13
61489: PUSH
61490: LD_VAR 0 14
61494: PUSH
61495: LD_VAR 0 15
61499: PUSH
61500: LD_VAR 0 16
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: PUSH
61513: LD_VAR 0 4
61517: PUSH
61518: LD_INT 1
61520: PLUS
61521: ARRAY
61522: ST_TO_ADDR
61523: GO 61654
61525: LD_INT 2
61527: DOUBLE
61528: EQUAL
61529: IFTRUE 61533
61531: GO 61589
61533: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61534: LD_ADDR_VAR 0 9
61538: PUSH
61539: LD_VAR 0 17
61543: PUSH
61544: LD_VAR 0 18
61548: PUSH
61549: LD_VAR 0 19
61553: PUSH
61554: LD_VAR 0 20
61558: PUSH
61559: LD_VAR 0 21
61563: PUSH
61564: LD_VAR 0 22
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: PUSH
61577: LD_VAR 0 4
61581: PUSH
61582: LD_INT 1
61584: PLUS
61585: ARRAY
61586: ST_TO_ADDR
61587: GO 61654
61589: LD_INT 3
61591: DOUBLE
61592: EQUAL
61593: IFTRUE 61597
61595: GO 61653
61597: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61598: LD_ADDR_VAR 0 9
61602: PUSH
61603: LD_VAR 0 23
61607: PUSH
61608: LD_VAR 0 24
61612: PUSH
61613: LD_VAR 0 25
61617: PUSH
61618: LD_VAR 0 26
61622: PUSH
61623: LD_VAR 0 27
61627: PUSH
61628: LD_VAR 0 28
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: PUSH
61641: LD_VAR 0 4
61645: PUSH
61646: LD_INT 1
61648: PLUS
61649: ARRAY
61650: ST_TO_ADDR
61651: GO 61654
61653: POP
61654: GO 62209
61656: LD_INT 2
61658: DOUBLE
61659: EQUAL
61660: IFTRUE 61670
61662: LD_INT 3
61664: DOUBLE
61665: EQUAL
61666: IFTRUE 61670
61668: GO 61726
61670: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61671: LD_ADDR_VAR 0 9
61675: PUSH
61676: LD_VAR 0 29
61680: PUSH
61681: LD_VAR 0 30
61685: PUSH
61686: LD_VAR 0 31
61690: PUSH
61691: LD_VAR 0 32
61695: PUSH
61696: LD_VAR 0 33
61700: PUSH
61701: LD_VAR 0 34
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: PUSH
61714: LD_VAR 0 4
61718: PUSH
61719: LD_INT 1
61721: PLUS
61722: ARRAY
61723: ST_TO_ADDR
61724: GO 62209
61726: LD_INT 16
61728: DOUBLE
61729: EQUAL
61730: IFTRUE 61788
61732: LD_INT 17
61734: DOUBLE
61735: EQUAL
61736: IFTRUE 61788
61738: LD_INT 18
61740: DOUBLE
61741: EQUAL
61742: IFTRUE 61788
61744: LD_INT 19
61746: DOUBLE
61747: EQUAL
61748: IFTRUE 61788
61750: LD_INT 22
61752: DOUBLE
61753: EQUAL
61754: IFTRUE 61788
61756: LD_INT 20
61758: DOUBLE
61759: EQUAL
61760: IFTRUE 61788
61762: LD_INT 21
61764: DOUBLE
61765: EQUAL
61766: IFTRUE 61788
61768: LD_INT 23
61770: DOUBLE
61771: EQUAL
61772: IFTRUE 61788
61774: LD_INT 24
61776: DOUBLE
61777: EQUAL
61778: IFTRUE 61788
61780: LD_INT 25
61782: DOUBLE
61783: EQUAL
61784: IFTRUE 61788
61786: GO 61844
61788: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61789: LD_ADDR_VAR 0 9
61793: PUSH
61794: LD_VAR 0 35
61798: PUSH
61799: LD_VAR 0 36
61803: PUSH
61804: LD_VAR 0 37
61808: PUSH
61809: LD_VAR 0 38
61813: PUSH
61814: LD_VAR 0 39
61818: PUSH
61819: LD_VAR 0 40
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: PUSH
61832: LD_VAR 0 4
61836: PUSH
61837: LD_INT 1
61839: PLUS
61840: ARRAY
61841: ST_TO_ADDR
61842: GO 62209
61844: LD_INT 6
61846: DOUBLE
61847: EQUAL
61848: IFTRUE 61900
61850: LD_INT 7
61852: DOUBLE
61853: EQUAL
61854: IFTRUE 61900
61856: LD_INT 8
61858: DOUBLE
61859: EQUAL
61860: IFTRUE 61900
61862: LD_INT 13
61864: DOUBLE
61865: EQUAL
61866: IFTRUE 61900
61868: LD_INT 12
61870: DOUBLE
61871: EQUAL
61872: IFTRUE 61900
61874: LD_INT 15
61876: DOUBLE
61877: EQUAL
61878: IFTRUE 61900
61880: LD_INT 11
61882: DOUBLE
61883: EQUAL
61884: IFTRUE 61900
61886: LD_INT 14
61888: DOUBLE
61889: EQUAL
61890: IFTRUE 61900
61892: LD_INT 10
61894: DOUBLE
61895: EQUAL
61896: IFTRUE 61900
61898: GO 61956
61900: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61901: LD_ADDR_VAR 0 9
61905: PUSH
61906: LD_VAR 0 41
61910: PUSH
61911: LD_VAR 0 42
61915: PUSH
61916: LD_VAR 0 43
61920: PUSH
61921: LD_VAR 0 44
61925: PUSH
61926: LD_VAR 0 45
61930: PUSH
61931: LD_VAR 0 46
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: PUSH
61944: LD_VAR 0 4
61948: PUSH
61949: LD_INT 1
61951: PLUS
61952: ARRAY
61953: ST_TO_ADDR
61954: GO 62209
61956: LD_INT 36
61958: DOUBLE
61959: EQUAL
61960: IFTRUE 61964
61962: GO 62020
61964: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61965: LD_ADDR_VAR 0 9
61969: PUSH
61970: LD_VAR 0 47
61974: PUSH
61975: LD_VAR 0 48
61979: PUSH
61980: LD_VAR 0 49
61984: PUSH
61985: LD_VAR 0 50
61989: PUSH
61990: LD_VAR 0 51
61994: PUSH
61995: LD_VAR 0 52
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: PUSH
62008: LD_VAR 0 4
62012: PUSH
62013: LD_INT 1
62015: PLUS
62016: ARRAY
62017: ST_TO_ADDR
62018: GO 62209
62020: LD_INT 4
62022: DOUBLE
62023: EQUAL
62024: IFTRUE 62046
62026: LD_INT 5
62028: DOUBLE
62029: EQUAL
62030: IFTRUE 62046
62032: LD_INT 34
62034: DOUBLE
62035: EQUAL
62036: IFTRUE 62046
62038: LD_INT 37
62040: DOUBLE
62041: EQUAL
62042: IFTRUE 62046
62044: GO 62102
62046: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62047: LD_ADDR_VAR 0 9
62051: PUSH
62052: LD_VAR 0 53
62056: PUSH
62057: LD_VAR 0 54
62061: PUSH
62062: LD_VAR 0 55
62066: PUSH
62067: LD_VAR 0 56
62071: PUSH
62072: LD_VAR 0 57
62076: PUSH
62077: LD_VAR 0 58
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: PUSH
62090: LD_VAR 0 4
62094: PUSH
62095: LD_INT 1
62097: PLUS
62098: ARRAY
62099: ST_TO_ADDR
62100: GO 62209
62102: LD_INT 31
62104: DOUBLE
62105: EQUAL
62106: IFTRUE 62152
62108: LD_INT 32
62110: DOUBLE
62111: EQUAL
62112: IFTRUE 62152
62114: LD_INT 33
62116: DOUBLE
62117: EQUAL
62118: IFTRUE 62152
62120: LD_INT 27
62122: DOUBLE
62123: EQUAL
62124: IFTRUE 62152
62126: LD_INT 26
62128: DOUBLE
62129: EQUAL
62130: IFTRUE 62152
62132: LD_INT 28
62134: DOUBLE
62135: EQUAL
62136: IFTRUE 62152
62138: LD_INT 29
62140: DOUBLE
62141: EQUAL
62142: IFTRUE 62152
62144: LD_INT 30
62146: DOUBLE
62147: EQUAL
62148: IFTRUE 62152
62150: GO 62208
62152: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62153: LD_ADDR_VAR 0 9
62157: PUSH
62158: LD_VAR 0 59
62162: PUSH
62163: LD_VAR 0 60
62167: PUSH
62168: LD_VAR 0 61
62172: PUSH
62173: LD_VAR 0 62
62177: PUSH
62178: LD_VAR 0 63
62182: PUSH
62183: LD_VAR 0 64
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: PUSH
62196: LD_VAR 0 4
62200: PUSH
62201: LD_INT 1
62203: PLUS
62204: ARRAY
62205: ST_TO_ADDR
62206: GO 62209
62208: POP
// temp_list2 = [ ] ;
62209: LD_ADDR_VAR 0 10
62213: PUSH
62214: EMPTY
62215: ST_TO_ADDR
// for i in temp_list do
62216: LD_ADDR_VAR 0 8
62220: PUSH
62221: LD_VAR 0 9
62225: PUSH
62226: FOR_IN
62227: IFFALSE 62279
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62229: LD_ADDR_VAR 0 10
62233: PUSH
62234: LD_VAR 0 10
62238: PUSH
62239: LD_VAR 0 8
62243: PUSH
62244: LD_INT 1
62246: ARRAY
62247: PUSH
62248: LD_VAR 0 2
62252: PLUS
62253: PUSH
62254: LD_VAR 0 8
62258: PUSH
62259: LD_INT 2
62261: ARRAY
62262: PUSH
62263: LD_VAR 0 3
62267: PLUS
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: EMPTY
62274: LIST
62275: ADD
62276: ST_TO_ADDR
62277: GO 62226
62279: POP
62280: POP
// result = temp_list2 ;
62281: LD_ADDR_VAR 0 7
62285: PUSH
62286: LD_VAR 0 10
62290: ST_TO_ADDR
// end ;
62291: LD_VAR 0 7
62295: RET
// export function EnemyInRange ( unit , dist ) ; begin
62296: LD_INT 0
62298: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62299: LD_ADDR_VAR 0 3
62303: PUSH
62304: LD_VAR 0 1
62308: PPUSH
62309: CALL_OW 255
62313: PPUSH
62314: LD_VAR 0 1
62318: PPUSH
62319: CALL_OW 250
62323: PPUSH
62324: LD_VAR 0 1
62328: PPUSH
62329: CALL_OW 251
62333: PPUSH
62334: LD_VAR 0 2
62338: PPUSH
62339: CALL 35669 0 4
62343: PUSH
62344: LD_INT 4
62346: ARRAY
62347: ST_TO_ADDR
// end ;
62348: LD_VAR 0 3
62352: RET
// export function PlayerSeeMe ( unit ) ; begin
62353: LD_INT 0
62355: PPUSH
// result := See ( your_side , unit ) ;
62356: LD_ADDR_VAR 0 2
62360: PUSH
62361: LD_OWVAR 2
62365: PPUSH
62366: LD_VAR 0 1
62370: PPUSH
62371: CALL_OW 292
62375: ST_TO_ADDR
// end ;
62376: LD_VAR 0 2
62380: RET
// export function ReverseDir ( unit ) ; begin
62381: LD_INT 0
62383: PPUSH
// if not unit then
62384: LD_VAR 0 1
62388: NOT
62389: IFFALSE 62393
// exit ;
62391: GO 62416
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62393: LD_ADDR_VAR 0 2
62397: PUSH
62398: LD_VAR 0 1
62402: PPUSH
62403: CALL_OW 254
62407: PUSH
62408: LD_INT 3
62410: PLUS
62411: PUSH
62412: LD_INT 6
62414: MOD
62415: ST_TO_ADDR
// end ;
62416: LD_VAR 0 2
62420: RET
// export function ReverseArray ( array ) ; var i ; begin
62421: LD_INT 0
62423: PPUSH
62424: PPUSH
// if not array then
62425: LD_VAR 0 1
62429: NOT
62430: IFFALSE 62434
// exit ;
62432: GO 62489
// result := [ ] ;
62434: LD_ADDR_VAR 0 2
62438: PUSH
62439: EMPTY
62440: ST_TO_ADDR
// for i := array downto 1 do
62441: LD_ADDR_VAR 0 3
62445: PUSH
62446: DOUBLE
62447: LD_VAR 0 1
62451: INC
62452: ST_TO_ADDR
62453: LD_INT 1
62455: PUSH
62456: FOR_DOWNTO
62457: IFFALSE 62487
// result := Join ( result , array [ i ] ) ;
62459: LD_ADDR_VAR 0 2
62463: PUSH
62464: LD_VAR 0 2
62468: PPUSH
62469: LD_VAR 0 1
62473: PUSH
62474: LD_VAR 0 3
62478: ARRAY
62479: PPUSH
62480: CALL 67145 0 2
62484: ST_TO_ADDR
62485: GO 62456
62487: POP
62488: POP
// end ;
62489: LD_VAR 0 2
62493: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62494: LD_INT 0
62496: PPUSH
62497: PPUSH
62498: PPUSH
62499: PPUSH
62500: PPUSH
62501: PPUSH
// if not unit or not hexes then
62502: LD_VAR 0 1
62506: NOT
62507: PUSH
62508: LD_VAR 0 2
62512: NOT
62513: OR
62514: IFFALSE 62518
// exit ;
62516: GO 62641
// dist := 9999 ;
62518: LD_ADDR_VAR 0 5
62522: PUSH
62523: LD_INT 9999
62525: ST_TO_ADDR
// for i = 1 to hexes do
62526: LD_ADDR_VAR 0 4
62530: PUSH
62531: DOUBLE
62532: LD_INT 1
62534: DEC
62535: ST_TO_ADDR
62536: LD_VAR 0 2
62540: PUSH
62541: FOR_TO
62542: IFFALSE 62629
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62544: LD_ADDR_VAR 0 6
62548: PUSH
62549: LD_VAR 0 1
62553: PPUSH
62554: LD_VAR 0 2
62558: PUSH
62559: LD_VAR 0 4
62563: ARRAY
62564: PUSH
62565: LD_INT 1
62567: ARRAY
62568: PPUSH
62569: LD_VAR 0 2
62573: PUSH
62574: LD_VAR 0 4
62578: ARRAY
62579: PUSH
62580: LD_INT 2
62582: ARRAY
62583: PPUSH
62584: CALL_OW 297
62588: ST_TO_ADDR
// if tdist < dist then
62589: LD_VAR 0 6
62593: PUSH
62594: LD_VAR 0 5
62598: LESS
62599: IFFALSE 62627
// begin hex := hexes [ i ] ;
62601: LD_ADDR_VAR 0 8
62605: PUSH
62606: LD_VAR 0 2
62610: PUSH
62611: LD_VAR 0 4
62615: ARRAY
62616: ST_TO_ADDR
// dist := tdist ;
62617: LD_ADDR_VAR 0 5
62621: PUSH
62622: LD_VAR 0 6
62626: ST_TO_ADDR
// end ; end ;
62627: GO 62541
62629: POP
62630: POP
// result := hex ;
62631: LD_ADDR_VAR 0 3
62635: PUSH
62636: LD_VAR 0 8
62640: ST_TO_ADDR
// end ;
62641: LD_VAR 0 3
62645: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62646: LD_INT 0
62648: PPUSH
62649: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62650: LD_VAR 0 1
62654: NOT
62655: PUSH
62656: LD_VAR 0 1
62660: PUSH
62661: LD_INT 21
62663: PUSH
62664: LD_INT 2
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 23
62673: PUSH
62674: LD_INT 2
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PPUSH
62685: CALL_OW 69
62689: IN
62690: NOT
62691: OR
62692: IFFALSE 62696
// exit ;
62694: GO 62743
// for i = 1 to 3 do
62696: LD_ADDR_VAR 0 3
62700: PUSH
62701: DOUBLE
62702: LD_INT 1
62704: DEC
62705: ST_TO_ADDR
62706: LD_INT 3
62708: PUSH
62709: FOR_TO
62710: IFFALSE 62741
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62712: LD_VAR 0 1
62716: PPUSH
62717: CALL_OW 250
62721: PPUSH
62722: LD_VAR 0 1
62726: PPUSH
62727: CALL_OW 251
62731: PPUSH
62732: LD_INT 1
62734: PPUSH
62735: CALL_OW 453
62739: GO 62709
62741: POP
62742: POP
// end ;
62743: LD_VAR 0 2
62747: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62748: LD_INT 0
62750: PPUSH
62751: PPUSH
62752: PPUSH
62753: PPUSH
62754: PPUSH
62755: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62756: LD_VAR 0 1
62760: NOT
62761: PUSH
62762: LD_VAR 0 2
62766: NOT
62767: OR
62768: PUSH
62769: LD_VAR 0 1
62773: PPUSH
62774: CALL_OW 314
62778: OR
62779: IFFALSE 62783
// exit ;
62781: GO 63250
// if GetLives ( i ) < 250 then
62783: LD_VAR 0 4
62787: PPUSH
62788: CALL_OW 256
62792: PUSH
62793: LD_INT 250
62795: LESS
62796: IFFALSE 62809
// begin ComAutodestruct ( i ) ;
62798: LD_VAR 0 4
62802: PPUSH
62803: CALL 62646 0 1
// exit ;
62807: GO 63250
// end ; x := GetX ( enemy_unit ) ;
62809: LD_ADDR_VAR 0 7
62813: PUSH
62814: LD_VAR 0 2
62818: PPUSH
62819: CALL_OW 250
62823: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62824: LD_ADDR_VAR 0 8
62828: PUSH
62829: LD_VAR 0 2
62833: PPUSH
62834: CALL_OW 251
62838: ST_TO_ADDR
// if not x or not y then
62839: LD_VAR 0 7
62843: NOT
62844: PUSH
62845: LD_VAR 0 8
62849: NOT
62850: OR
62851: IFFALSE 62855
// exit ;
62853: GO 63250
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62855: LD_ADDR_VAR 0 6
62859: PUSH
62860: LD_VAR 0 7
62864: PPUSH
62865: LD_INT 0
62867: PPUSH
62868: LD_INT 4
62870: PPUSH
62871: CALL_OW 272
62875: PUSH
62876: LD_VAR 0 8
62880: PPUSH
62881: LD_INT 0
62883: PPUSH
62884: LD_INT 4
62886: PPUSH
62887: CALL_OW 273
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_VAR 0 7
62900: PPUSH
62901: LD_INT 1
62903: PPUSH
62904: LD_INT 4
62906: PPUSH
62907: CALL_OW 272
62911: PUSH
62912: LD_VAR 0 8
62916: PPUSH
62917: LD_INT 1
62919: PPUSH
62920: LD_INT 4
62922: PPUSH
62923: CALL_OW 273
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_VAR 0 7
62936: PPUSH
62937: LD_INT 2
62939: PPUSH
62940: LD_INT 4
62942: PPUSH
62943: CALL_OW 272
62947: PUSH
62948: LD_VAR 0 8
62952: PPUSH
62953: LD_INT 2
62955: PPUSH
62956: LD_INT 4
62958: PPUSH
62959: CALL_OW 273
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_VAR 0 7
62972: PPUSH
62973: LD_INT 3
62975: PPUSH
62976: LD_INT 4
62978: PPUSH
62979: CALL_OW 272
62983: PUSH
62984: LD_VAR 0 8
62988: PPUSH
62989: LD_INT 3
62991: PPUSH
62992: LD_INT 4
62994: PPUSH
62995: CALL_OW 273
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_VAR 0 7
63008: PPUSH
63009: LD_INT 4
63011: PPUSH
63012: LD_INT 4
63014: PPUSH
63015: CALL_OW 272
63019: PUSH
63020: LD_VAR 0 8
63024: PPUSH
63025: LD_INT 4
63027: PPUSH
63028: LD_INT 4
63030: PPUSH
63031: CALL_OW 273
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_VAR 0 7
63044: PPUSH
63045: LD_INT 5
63047: PPUSH
63048: LD_INT 4
63050: PPUSH
63051: CALL_OW 272
63055: PUSH
63056: LD_VAR 0 8
63060: PPUSH
63061: LD_INT 5
63063: PPUSH
63064: LD_INT 4
63066: PPUSH
63067: CALL_OW 273
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: ST_TO_ADDR
// for i = tmp downto 1 do
63084: LD_ADDR_VAR 0 4
63088: PUSH
63089: DOUBLE
63090: LD_VAR 0 6
63094: INC
63095: ST_TO_ADDR
63096: LD_INT 1
63098: PUSH
63099: FOR_DOWNTO
63100: IFFALSE 63201
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63102: LD_VAR 0 6
63106: PUSH
63107: LD_VAR 0 4
63111: ARRAY
63112: PUSH
63113: LD_INT 1
63115: ARRAY
63116: PPUSH
63117: LD_VAR 0 6
63121: PUSH
63122: LD_VAR 0 4
63126: ARRAY
63127: PUSH
63128: LD_INT 2
63130: ARRAY
63131: PPUSH
63132: CALL_OW 488
63136: NOT
63137: PUSH
63138: LD_VAR 0 6
63142: PUSH
63143: LD_VAR 0 4
63147: ARRAY
63148: PUSH
63149: LD_INT 1
63151: ARRAY
63152: PPUSH
63153: LD_VAR 0 6
63157: PUSH
63158: LD_VAR 0 4
63162: ARRAY
63163: PUSH
63164: LD_INT 2
63166: ARRAY
63167: PPUSH
63168: CALL_OW 428
63172: PUSH
63173: LD_INT 0
63175: NONEQUAL
63176: OR
63177: IFFALSE 63199
// tmp := Delete ( tmp , i ) ;
63179: LD_ADDR_VAR 0 6
63183: PUSH
63184: LD_VAR 0 6
63188: PPUSH
63189: LD_VAR 0 4
63193: PPUSH
63194: CALL_OW 3
63198: ST_TO_ADDR
63199: GO 63099
63201: POP
63202: POP
// j := GetClosestHex ( unit , tmp ) ;
63203: LD_ADDR_VAR 0 5
63207: PUSH
63208: LD_VAR 0 1
63212: PPUSH
63213: LD_VAR 0 6
63217: PPUSH
63218: CALL 62494 0 2
63222: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63223: LD_VAR 0 1
63227: PPUSH
63228: LD_VAR 0 5
63232: PUSH
63233: LD_INT 1
63235: ARRAY
63236: PPUSH
63237: LD_VAR 0 5
63241: PUSH
63242: LD_INT 2
63244: ARRAY
63245: PPUSH
63246: CALL_OW 111
// end ;
63250: LD_VAR 0 3
63254: RET
// export function PrepareApemanSoldier ( ) ; begin
63255: LD_INT 0
63257: PPUSH
// uc_nation := 0 ;
63258: LD_ADDR_OWVAR 21
63262: PUSH
63263: LD_INT 0
63265: ST_TO_ADDR
// hc_sex := sex_male ;
63266: LD_ADDR_OWVAR 27
63270: PUSH
63271: LD_INT 1
63273: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63274: LD_ADDR_OWVAR 28
63278: PUSH
63279: LD_INT 15
63281: ST_TO_ADDR
// hc_gallery :=  ;
63282: LD_ADDR_OWVAR 33
63286: PUSH
63287: LD_STRING 
63289: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63290: LD_ADDR_OWVAR 31
63294: PUSH
63295: LD_INT 0
63297: PPUSH
63298: LD_INT 3
63300: PPUSH
63301: CALL_OW 12
63305: PUSH
63306: LD_INT 0
63308: PPUSH
63309: LD_INT 3
63311: PPUSH
63312: CALL_OW 12
63316: PUSH
63317: LD_INT 0
63319: PUSH
63320: LD_INT 0
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: ST_TO_ADDR
// end ;
63329: LD_VAR 0 1
63333: RET
// export function PrepareApemanEngineer ( ) ; begin
63334: LD_INT 0
63336: PPUSH
// uc_nation := 0 ;
63337: LD_ADDR_OWVAR 21
63341: PUSH
63342: LD_INT 0
63344: ST_TO_ADDR
// hc_sex := sex_male ;
63345: LD_ADDR_OWVAR 27
63349: PUSH
63350: LD_INT 1
63352: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63353: LD_ADDR_OWVAR 28
63357: PUSH
63358: LD_INT 16
63360: ST_TO_ADDR
// hc_gallery :=  ;
63361: LD_ADDR_OWVAR 33
63365: PUSH
63366: LD_STRING 
63368: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63369: LD_ADDR_OWVAR 31
63373: PUSH
63374: LD_INT 0
63376: PPUSH
63377: LD_INT 3
63379: PPUSH
63380: CALL_OW 12
63384: PUSH
63385: LD_INT 0
63387: PPUSH
63388: LD_INT 3
63390: PPUSH
63391: CALL_OW 12
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: ST_TO_ADDR
// end ;
63408: LD_VAR 0 1
63412: RET
// export function PrepareApeman ( agressivity ) ; begin
63413: LD_INT 0
63415: PPUSH
// uc_side := 0 ;
63416: LD_ADDR_OWVAR 20
63420: PUSH
63421: LD_INT 0
63423: ST_TO_ADDR
// uc_nation := 0 ;
63424: LD_ADDR_OWVAR 21
63428: PUSH
63429: LD_INT 0
63431: ST_TO_ADDR
// hc_sex := sex_male ;
63432: LD_ADDR_OWVAR 27
63436: PUSH
63437: LD_INT 1
63439: ST_TO_ADDR
// hc_class := class_apeman ;
63440: LD_ADDR_OWVAR 28
63444: PUSH
63445: LD_INT 12
63447: ST_TO_ADDR
// hc_gallery :=  ;
63448: LD_ADDR_OWVAR 33
63452: PUSH
63453: LD_STRING 
63455: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63456: LD_ADDR_OWVAR 35
63460: PUSH
63461: LD_VAR 0 1
63465: NEG
63466: PPUSH
63467: LD_VAR 0 1
63471: PPUSH
63472: CALL_OW 12
63476: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63477: LD_ADDR_OWVAR 31
63481: PUSH
63482: LD_INT 0
63484: PPUSH
63485: LD_INT 3
63487: PPUSH
63488: CALL_OW 12
63492: PUSH
63493: LD_INT 0
63495: PPUSH
63496: LD_INT 3
63498: PPUSH
63499: CALL_OW 12
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: LD_INT 0
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: ST_TO_ADDR
// end ;
63516: LD_VAR 0 2
63520: RET
// export function PrepareTiger ( agressivity ) ; begin
63521: LD_INT 0
63523: PPUSH
// uc_side := 0 ;
63524: LD_ADDR_OWVAR 20
63528: PUSH
63529: LD_INT 0
63531: ST_TO_ADDR
// uc_nation := 0 ;
63532: LD_ADDR_OWVAR 21
63536: PUSH
63537: LD_INT 0
63539: ST_TO_ADDR
// hc_class := class_tiger ;
63540: LD_ADDR_OWVAR 28
63544: PUSH
63545: LD_INT 14
63547: ST_TO_ADDR
// hc_gallery :=  ;
63548: LD_ADDR_OWVAR 33
63552: PUSH
63553: LD_STRING 
63555: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63556: LD_ADDR_OWVAR 35
63560: PUSH
63561: LD_VAR 0 1
63565: NEG
63566: PPUSH
63567: LD_VAR 0 1
63571: PPUSH
63572: CALL_OW 12
63576: ST_TO_ADDR
// end ;
63577: LD_VAR 0 2
63581: RET
// export function PrepareEnchidna ( ) ; begin
63582: LD_INT 0
63584: PPUSH
// uc_side := 0 ;
63585: LD_ADDR_OWVAR 20
63589: PUSH
63590: LD_INT 0
63592: ST_TO_ADDR
// uc_nation := 0 ;
63593: LD_ADDR_OWVAR 21
63597: PUSH
63598: LD_INT 0
63600: ST_TO_ADDR
// hc_class := class_baggie ;
63601: LD_ADDR_OWVAR 28
63605: PUSH
63606: LD_INT 13
63608: ST_TO_ADDR
// hc_gallery :=  ;
63609: LD_ADDR_OWVAR 33
63613: PUSH
63614: LD_STRING 
63616: ST_TO_ADDR
// end ;
63617: LD_VAR 0 1
63621: RET
// export function PrepareFrog ( ) ; begin
63622: LD_INT 0
63624: PPUSH
// uc_side := 0 ;
63625: LD_ADDR_OWVAR 20
63629: PUSH
63630: LD_INT 0
63632: ST_TO_ADDR
// uc_nation := 0 ;
63633: LD_ADDR_OWVAR 21
63637: PUSH
63638: LD_INT 0
63640: ST_TO_ADDR
// hc_class := class_frog ;
63641: LD_ADDR_OWVAR 28
63645: PUSH
63646: LD_INT 19
63648: ST_TO_ADDR
// hc_gallery :=  ;
63649: LD_ADDR_OWVAR 33
63653: PUSH
63654: LD_STRING 
63656: ST_TO_ADDR
// end ;
63657: LD_VAR 0 1
63661: RET
// export function PrepareFish ( ) ; begin
63662: LD_INT 0
63664: PPUSH
// uc_side := 0 ;
63665: LD_ADDR_OWVAR 20
63669: PUSH
63670: LD_INT 0
63672: ST_TO_ADDR
// uc_nation := 0 ;
63673: LD_ADDR_OWVAR 21
63677: PUSH
63678: LD_INT 0
63680: ST_TO_ADDR
// hc_class := class_fish ;
63681: LD_ADDR_OWVAR 28
63685: PUSH
63686: LD_INT 20
63688: ST_TO_ADDR
// hc_gallery :=  ;
63689: LD_ADDR_OWVAR 33
63693: PUSH
63694: LD_STRING 
63696: ST_TO_ADDR
// end ;
63697: LD_VAR 0 1
63701: RET
// export function PrepareBird ( ) ; begin
63702: LD_INT 0
63704: PPUSH
// uc_side := 0 ;
63705: LD_ADDR_OWVAR 20
63709: PUSH
63710: LD_INT 0
63712: ST_TO_ADDR
// uc_nation := 0 ;
63713: LD_ADDR_OWVAR 21
63717: PUSH
63718: LD_INT 0
63720: ST_TO_ADDR
// hc_class := class_phororhacos ;
63721: LD_ADDR_OWVAR 28
63725: PUSH
63726: LD_INT 18
63728: ST_TO_ADDR
// hc_gallery :=  ;
63729: LD_ADDR_OWVAR 33
63733: PUSH
63734: LD_STRING 
63736: ST_TO_ADDR
// end ;
63737: LD_VAR 0 1
63741: RET
// export function PrepareHorse ( ) ; begin
63742: LD_INT 0
63744: PPUSH
// uc_side := 0 ;
63745: LD_ADDR_OWVAR 20
63749: PUSH
63750: LD_INT 0
63752: ST_TO_ADDR
// uc_nation := 0 ;
63753: LD_ADDR_OWVAR 21
63757: PUSH
63758: LD_INT 0
63760: ST_TO_ADDR
// hc_class := class_horse ;
63761: LD_ADDR_OWVAR 28
63765: PUSH
63766: LD_INT 21
63768: ST_TO_ADDR
// hc_gallery :=  ;
63769: LD_ADDR_OWVAR 33
63773: PUSH
63774: LD_STRING 
63776: ST_TO_ADDR
// end ;
63777: LD_VAR 0 1
63781: RET
// export function PrepareMastodont ( ) ; begin
63782: LD_INT 0
63784: PPUSH
// uc_side := 0 ;
63785: LD_ADDR_OWVAR 20
63789: PUSH
63790: LD_INT 0
63792: ST_TO_ADDR
// uc_nation := 0 ;
63793: LD_ADDR_OWVAR 21
63797: PUSH
63798: LD_INT 0
63800: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63801: LD_ADDR_OWVAR 37
63805: PUSH
63806: LD_INT 31
63808: ST_TO_ADDR
// vc_control := control_rider ;
63809: LD_ADDR_OWVAR 38
63813: PUSH
63814: LD_INT 4
63816: ST_TO_ADDR
// end ;
63817: LD_VAR 0 1
63821: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63822: LD_INT 0
63824: PPUSH
63825: PPUSH
63826: PPUSH
// uc_side = 0 ;
63827: LD_ADDR_OWVAR 20
63831: PUSH
63832: LD_INT 0
63834: ST_TO_ADDR
// uc_nation = 0 ;
63835: LD_ADDR_OWVAR 21
63839: PUSH
63840: LD_INT 0
63842: ST_TO_ADDR
// InitHc_All ( ) ;
63843: CALL_OW 584
// InitVc ;
63847: CALL_OW 20
// if mastodonts then
63851: LD_VAR 0 6
63855: IFFALSE 63922
// for i = 1 to mastodonts do
63857: LD_ADDR_VAR 0 11
63861: PUSH
63862: DOUBLE
63863: LD_INT 1
63865: DEC
63866: ST_TO_ADDR
63867: LD_VAR 0 6
63871: PUSH
63872: FOR_TO
63873: IFFALSE 63920
// begin vc_chassis := 31 ;
63875: LD_ADDR_OWVAR 37
63879: PUSH
63880: LD_INT 31
63882: ST_TO_ADDR
// vc_control := control_rider ;
63883: LD_ADDR_OWVAR 38
63887: PUSH
63888: LD_INT 4
63890: ST_TO_ADDR
// animal := CreateVehicle ;
63891: LD_ADDR_VAR 0 12
63895: PUSH
63896: CALL_OW 45
63900: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63901: LD_VAR 0 12
63905: PPUSH
63906: LD_VAR 0 8
63910: PPUSH
63911: LD_INT 0
63913: PPUSH
63914: CALL 66050 0 3
// end ;
63918: GO 63872
63920: POP
63921: POP
// if horses then
63922: LD_VAR 0 5
63926: IFFALSE 63993
// for i = 1 to horses do
63928: LD_ADDR_VAR 0 11
63932: PUSH
63933: DOUBLE
63934: LD_INT 1
63936: DEC
63937: ST_TO_ADDR
63938: LD_VAR 0 5
63942: PUSH
63943: FOR_TO
63944: IFFALSE 63991
// begin hc_class := 21 ;
63946: LD_ADDR_OWVAR 28
63950: PUSH
63951: LD_INT 21
63953: ST_TO_ADDR
// hc_gallery :=  ;
63954: LD_ADDR_OWVAR 33
63958: PUSH
63959: LD_STRING 
63961: ST_TO_ADDR
// animal := CreateHuman ;
63962: LD_ADDR_VAR 0 12
63966: PUSH
63967: CALL_OW 44
63971: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63972: LD_VAR 0 12
63976: PPUSH
63977: LD_VAR 0 8
63981: PPUSH
63982: LD_INT 0
63984: PPUSH
63985: CALL 66050 0 3
// end ;
63989: GO 63943
63991: POP
63992: POP
// if birds then
63993: LD_VAR 0 1
63997: IFFALSE 64064
// for i = 1 to birds do
63999: LD_ADDR_VAR 0 11
64003: PUSH
64004: DOUBLE
64005: LD_INT 1
64007: DEC
64008: ST_TO_ADDR
64009: LD_VAR 0 1
64013: PUSH
64014: FOR_TO
64015: IFFALSE 64062
// begin hc_class := 18 ;
64017: LD_ADDR_OWVAR 28
64021: PUSH
64022: LD_INT 18
64024: ST_TO_ADDR
// hc_gallery =  ;
64025: LD_ADDR_OWVAR 33
64029: PUSH
64030: LD_STRING 
64032: ST_TO_ADDR
// animal := CreateHuman ;
64033: LD_ADDR_VAR 0 12
64037: PUSH
64038: CALL_OW 44
64042: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64043: LD_VAR 0 12
64047: PPUSH
64048: LD_VAR 0 8
64052: PPUSH
64053: LD_INT 0
64055: PPUSH
64056: CALL 66050 0 3
// end ;
64060: GO 64014
64062: POP
64063: POP
// if tigers then
64064: LD_VAR 0 2
64068: IFFALSE 64152
// for i = 1 to tigers do
64070: LD_ADDR_VAR 0 11
64074: PUSH
64075: DOUBLE
64076: LD_INT 1
64078: DEC
64079: ST_TO_ADDR
64080: LD_VAR 0 2
64084: PUSH
64085: FOR_TO
64086: IFFALSE 64150
// begin hc_class = class_tiger ;
64088: LD_ADDR_OWVAR 28
64092: PUSH
64093: LD_INT 14
64095: ST_TO_ADDR
// hc_gallery =  ;
64096: LD_ADDR_OWVAR 33
64100: PUSH
64101: LD_STRING 
64103: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64104: LD_ADDR_OWVAR 35
64108: PUSH
64109: LD_INT 7
64111: NEG
64112: PPUSH
64113: LD_INT 7
64115: PPUSH
64116: CALL_OW 12
64120: ST_TO_ADDR
// animal := CreateHuman ;
64121: LD_ADDR_VAR 0 12
64125: PUSH
64126: CALL_OW 44
64130: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64131: LD_VAR 0 12
64135: PPUSH
64136: LD_VAR 0 8
64140: PPUSH
64141: LD_INT 0
64143: PPUSH
64144: CALL 66050 0 3
// end ;
64148: GO 64085
64150: POP
64151: POP
// if apemans then
64152: LD_VAR 0 3
64156: IFFALSE 64279
// for i = 1 to apemans do
64158: LD_ADDR_VAR 0 11
64162: PUSH
64163: DOUBLE
64164: LD_INT 1
64166: DEC
64167: ST_TO_ADDR
64168: LD_VAR 0 3
64172: PUSH
64173: FOR_TO
64174: IFFALSE 64277
// begin hc_class = class_apeman ;
64176: LD_ADDR_OWVAR 28
64180: PUSH
64181: LD_INT 12
64183: ST_TO_ADDR
// hc_gallery =  ;
64184: LD_ADDR_OWVAR 33
64188: PUSH
64189: LD_STRING 
64191: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64192: LD_ADDR_OWVAR 35
64196: PUSH
64197: LD_INT 2
64199: NEG
64200: PPUSH
64201: LD_INT 2
64203: PPUSH
64204: CALL_OW 12
64208: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64209: LD_ADDR_OWVAR 31
64213: PUSH
64214: LD_INT 1
64216: PPUSH
64217: LD_INT 3
64219: PPUSH
64220: CALL_OW 12
64224: PUSH
64225: LD_INT 1
64227: PPUSH
64228: LD_INT 3
64230: PPUSH
64231: CALL_OW 12
64235: PUSH
64236: LD_INT 0
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: ST_TO_ADDR
// animal := CreateHuman ;
64248: LD_ADDR_VAR 0 12
64252: PUSH
64253: CALL_OW 44
64257: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64258: LD_VAR 0 12
64262: PPUSH
64263: LD_VAR 0 8
64267: PPUSH
64268: LD_INT 0
64270: PPUSH
64271: CALL 66050 0 3
// end ;
64275: GO 64173
64277: POP
64278: POP
// if enchidnas then
64279: LD_VAR 0 4
64283: IFFALSE 64350
// for i = 1 to enchidnas do
64285: LD_ADDR_VAR 0 11
64289: PUSH
64290: DOUBLE
64291: LD_INT 1
64293: DEC
64294: ST_TO_ADDR
64295: LD_VAR 0 4
64299: PUSH
64300: FOR_TO
64301: IFFALSE 64348
// begin hc_class = 13 ;
64303: LD_ADDR_OWVAR 28
64307: PUSH
64308: LD_INT 13
64310: ST_TO_ADDR
// hc_gallery =  ;
64311: LD_ADDR_OWVAR 33
64315: PUSH
64316: LD_STRING 
64318: ST_TO_ADDR
// animal := CreateHuman ;
64319: LD_ADDR_VAR 0 12
64323: PUSH
64324: CALL_OW 44
64328: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64329: LD_VAR 0 12
64333: PPUSH
64334: LD_VAR 0 8
64338: PPUSH
64339: LD_INT 0
64341: PPUSH
64342: CALL 66050 0 3
// end ;
64346: GO 64300
64348: POP
64349: POP
// if fishes then
64350: LD_VAR 0 7
64354: IFFALSE 64421
// for i = 1 to fishes do
64356: LD_ADDR_VAR 0 11
64360: PUSH
64361: DOUBLE
64362: LD_INT 1
64364: DEC
64365: ST_TO_ADDR
64366: LD_VAR 0 7
64370: PUSH
64371: FOR_TO
64372: IFFALSE 64419
// begin hc_class = 20 ;
64374: LD_ADDR_OWVAR 28
64378: PUSH
64379: LD_INT 20
64381: ST_TO_ADDR
// hc_gallery =  ;
64382: LD_ADDR_OWVAR 33
64386: PUSH
64387: LD_STRING 
64389: ST_TO_ADDR
// animal := CreateHuman ;
64390: LD_ADDR_VAR 0 12
64394: PUSH
64395: CALL_OW 44
64399: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64400: LD_VAR 0 12
64404: PPUSH
64405: LD_VAR 0 9
64409: PPUSH
64410: LD_INT 0
64412: PPUSH
64413: CALL 66050 0 3
// end ;
64417: GO 64371
64419: POP
64420: POP
// end ;
64421: LD_VAR 0 10
64425: RET
// export function WantHeal ( sci , unit ) ; begin
64426: LD_INT 0
64428: PPUSH
// if GetTaskList ( sci ) > 0 then
64429: LD_VAR 0 1
64433: PPUSH
64434: CALL_OW 437
64438: PUSH
64439: LD_INT 0
64441: GREATER
64442: IFFALSE 64512
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64444: LD_VAR 0 1
64448: PPUSH
64449: CALL_OW 437
64453: PUSH
64454: LD_INT 1
64456: ARRAY
64457: PUSH
64458: LD_INT 1
64460: ARRAY
64461: PUSH
64462: LD_STRING l
64464: EQUAL
64465: PUSH
64466: LD_VAR 0 1
64470: PPUSH
64471: CALL_OW 437
64475: PUSH
64476: LD_INT 1
64478: ARRAY
64479: PUSH
64480: LD_INT 4
64482: ARRAY
64483: PUSH
64484: LD_VAR 0 2
64488: EQUAL
64489: AND
64490: IFFALSE 64502
// result := true else
64492: LD_ADDR_VAR 0 3
64496: PUSH
64497: LD_INT 1
64499: ST_TO_ADDR
64500: GO 64510
// result := false ;
64502: LD_ADDR_VAR 0 3
64506: PUSH
64507: LD_INT 0
64509: ST_TO_ADDR
// end else
64510: GO 64520
// result := false ;
64512: LD_ADDR_VAR 0 3
64516: PUSH
64517: LD_INT 0
64519: ST_TO_ADDR
// end ;
64520: LD_VAR 0 3
64524: RET
// export function HealTarget ( sci ) ; begin
64525: LD_INT 0
64527: PPUSH
// if not sci then
64528: LD_VAR 0 1
64532: NOT
64533: IFFALSE 64537
// exit ;
64535: GO 64602
// result := 0 ;
64537: LD_ADDR_VAR 0 2
64541: PUSH
64542: LD_INT 0
64544: ST_TO_ADDR
// if GetTaskList ( sci ) then
64545: LD_VAR 0 1
64549: PPUSH
64550: CALL_OW 437
64554: IFFALSE 64602
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64556: LD_VAR 0 1
64560: PPUSH
64561: CALL_OW 437
64565: PUSH
64566: LD_INT 1
64568: ARRAY
64569: PUSH
64570: LD_INT 1
64572: ARRAY
64573: PUSH
64574: LD_STRING l
64576: EQUAL
64577: IFFALSE 64602
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64579: LD_ADDR_VAR 0 2
64583: PUSH
64584: LD_VAR 0 1
64588: PPUSH
64589: CALL_OW 437
64593: PUSH
64594: LD_INT 1
64596: ARRAY
64597: PUSH
64598: LD_INT 4
64600: ARRAY
64601: ST_TO_ADDR
// end ;
64602: LD_VAR 0 2
64606: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64607: LD_INT 0
64609: PPUSH
64610: PPUSH
64611: PPUSH
64612: PPUSH
// if not base_units then
64613: LD_VAR 0 1
64617: NOT
64618: IFFALSE 64622
// exit ;
64620: GO 64709
// result := false ;
64622: LD_ADDR_VAR 0 2
64626: PUSH
64627: LD_INT 0
64629: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64630: LD_ADDR_VAR 0 5
64634: PUSH
64635: LD_VAR 0 1
64639: PPUSH
64640: LD_INT 21
64642: PUSH
64643: LD_INT 3
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PPUSH
64650: CALL_OW 72
64654: ST_TO_ADDR
// if not tmp then
64655: LD_VAR 0 5
64659: NOT
64660: IFFALSE 64664
// exit ;
64662: GO 64709
// for i in tmp do
64664: LD_ADDR_VAR 0 3
64668: PUSH
64669: LD_VAR 0 5
64673: PUSH
64674: FOR_IN
64675: IFFALSE 64707
// begin result := EnemyInRange ( i , 22 ) ;
64677: LD_ADDR_VAR 0 2
64681: PUSH
64682: LD_VAR 0 3
64686: PPUSH
64687: LD_INT 22
64689: PPUSH
64690: CALL 62296 0 2
64694: ST_TO_ADDR
// if result then
64695: LD_VAR 0 2
64699: IFFALSE 64705
// exit ;
64701: POP
64702: POP
64703: GO 64709
// end ;
64705: GO 64674
64707: POP
64708: POP
// end ;
64709: LD_VAR 0 2
64713: RET
// export function FilterByTag ( units , tag ) ; begin
64714: LD_INT 0
64716: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64717: LD_ADDR_VAR 0 3
64721: PUSH
64722: LD_VAR 0 1
64726: PPUSH
64727: LD_INT 120
64729: PUSH
64730: LD_VAR 0 2
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PPUSH
64739: CALL_OW 72
64743: ST_TO_ADDR
// end ;
64744: LD_VAR 0 3
64748: RET
// export function IsDriver ( un ) ; begin
64749: LD_INT 0
64751: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64752: LD_ADDR_VAR 0 2
64756: PUSH
64757: LD_VAR 0 1
64761: PUSH
64762: LD_INT 55
64764: PUSH
64765: EMPTY
64766: LIST
64767: PPUSH
64768: CALL_OW 69
64772: IN
64773: ST_TO_ADDR
// end ;
64774: LD_VAR 0 2
64778: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64779: LD_INT 0
64781: PPUSH
64782: PPUSH
// list := [ ] ;
64783: LD_ADDR_VAR 0 5
64787: PUSH
64788: EMPTY
64789: ST_TO_ADDR
// case d of 0 :
64790: LD_VAR 0 3
64794: PUSH
64795: LD_INT 0
64797: DOUBLE
64798: EQUAL
64799: IFTRUE 64803
64801: GO 64936
64803: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64804: LD_ADDR_VAR 0 5
64808: PUSH
64809: LD_VAR 0 1
64813: PUSH
64814: LD_INT 4
64816: MINUS
64817: PUSH
64818: LD_VAR 0 2
64822: PUSH
64823: LD_INT 4
64825: MINUS
64826: PUSH
64827: LD_INT 2
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: LIST
64834: PUSH
64835: LD_VAR 0 1
64839: PUSH
64840: LD_INT 3
64842: MINUS
64843: PUSH
64844: LD_VAR 0 2
64848: PUSH
64849: LD_INT 1
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: LIST
64856: PUSH
64857: LD_VAR 0 1
64861: PUSH
64862: LD_INT 4
64864: PLUS
64865: PUSH
64866: LD_VAR 0 2
64870: PUSH
64871: LD_INT 4
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: LIST
64878: PUSH
64879: LD_VAR 0 1
64883: PUSH
64884: LD_INT 3
64886: PLUS
64887: PUSH
64888: LD_VAR 0 2
64892: PUSH
64893: LD_INT 3
64895: PLUS
64896: PUSH
64897: LD_INT 5
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: LIST
64904: PUSH
64905: LD_VAR 0 1
64909: PUSH
64910: LD_VAR 0 2
64914: PUSH
64915: LD_INT 4
64917: PLUS
64918: PUSH
64919: LD_INT 0
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: LIST
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: ST_TO_ADDR
// end ; 1 :
64934: GO 65634
64936: LD_INT 1
64938: DOUBLE
64939: EQUAL
64940: IFTRUE 64944
64942: GO 65077
64944: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64945: LD_ADDR_VAR 0 5
64949: PUSH
64950: LD_VAR 0 1
64954: PUSH
64955: LD_VAR 0 2
64959: PUSH
64960: LD_INT 4
64962: MINUS
64963: PUSH
64964: LD_INT 3
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: LIST
64971: PUSH
64972: LD_VAR 0 1
64976: PUSH
64977: LD_INT 3
64979: MINUS
64980: PUSH
64981: LD_VAR 0 2
64985: PUSH
64986: LD_INT 3
64988: MINUS
64989: PUSH
64990: LD_INT 2
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: LIST
64997: PUSH
64998: LD_VAR 0 1
65002: PUSH
65003: LD_INT 4
65005: MINUS
65006: PUSH
65007: LD_VAR 0 2
65011: PUSH
65012: LD_INT 1
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: LIST
65019: PUSH
65020: LD_VAR 0 1
65024: PUSH
65025: LD_VAR 0 2
65029: PUSH
65030: LD_INT 3
65032: PLUS
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: LIST
65041: PUSH
65042: LD_VAR 0 1
65046: PUSH
65047: LD_INT 4
65049: PLUS
65050: PUSH
65051: LD_VAR 0 2
65055: PUSH
65056: LD_INT 4
65058: PLUS
65059: PUSH
65060: LD_INT 5
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: LIST
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: ST_TO_ADDR
// end ; 2 :
65075: GO 65634
65077: LD_INT 2
65079: DOUBLE
65080: EQUAL
65081: IFTRUE 65085
65083: GO 65214
65085: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65086: LD_ADDR_VAR 0 5
65090: PUSH
65091: LD_VAR 0 1
65095: PUSH
65096: LD_VAR 0 2
65100: PUSH
65101: LD_INT 3
65103: MINUS
65104: PUSH
65105: LD_INT 3
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: LIST
65112: PUSH
65113: LD_VAR 0 1
65117: PUSH
65118: LD_INT 4
65120: PLUS
65121: PUSH
65122: LD_VAR 0 2
65126: PUSH
65127: LD_INT 4
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: LIST
65134: PUSH
65135: LD_VAR 0 1
65139: PUSH
65140: LD_VAR 0 2
65144: PUSH
65145: LD_INT 4
65147: PLUS
65148: PUSH
65149: LD_INT 0
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: LIST
65156: PUSH
65157: LD_VAR 0 1
65161: PUSH
65162: LD_INT 3
65164: MINUS
65165: PUSH
65166: LD_VAR 0 2
65170: PUSH
65171: LD_INT 1
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: LIST
65178: PUSH
65179: LD_VAR 0 1
65183: PUSH
65184: LD_INT 4
65186: MINUS
65187: PUSH
65188: LD_VAR 0 2
65192: PUSH
65193: LD_INT 4
65195: MINUS
65196: PUSH
65197: LD_INT 2
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: LIST
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: ST_TO_ADDR
// end ; 3 :
65212: GO 65634
65214: LD_INT 3
65216: DOUBLE
65217: EQUAL
65218: IFTRUE 65222
65220: GO 65355
65222: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65223: LD_ADDR_VAR 0 5
65227: PUSH
65228: LD_VAR 0 1
65232: PUSH
65233: LD_INT 3
65235: PLUS
65236: PUSH
65237: LD_VAR 0 2
65241: PUSH
65242: LD_INT 4
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: LIST
65249: PUSH
65250: LD_VAR 0 1
65254: PUSH
65255: LD_INT 4
65257: PLUS
65258: PUSH
65259: LD_VAR 0 2
65263: PUSH
65264: LD_INT 4
65266: PLUS
65267: PUSH
65268: LD_INT 5
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: LIST
65275: PUSH
65276: LD_VAR 0 1
65280: PUSH
65281: LD_INT 4
65283: MINUS
65284: PUSH
65285: LD_VAR 0 2
65289: PUSH
65290: LD_INT 1
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: LIST
65297: PUSH
65298: LD_VAR 0 1
65302: PUSH
65303: LD_VAR 0 2
65307: PUSH
65308: LD_INT 4
65310: MINUS
65311: PUSH
65312: LD_INT 3
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: LIST
65319: PUSH
65320: LD_VAR 0 1
65324: PUSH
65325: LD_INT 3
65327: MINUS
65328: PUSH
65329: LD_VAR 0 2
65333: PUSH
65334: LD_INT 3
65336: MINUS
65337: PUSH
65338: LD_INT 2
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: LIST
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: ST_TO_ADDR
// end ; 4 :
65353: GO 65634
65355: LD_INT 4
65357: DOUBLE
65358: EQUAL
65359: IFTRUE 65363
65361: GO 65496
65363: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65364: LD_ADDR_VAR 0 5
65368: PUSH
65369: LD_VAR 0 1
65373: PUSH
65374: LD_VAR 0 2
65378: PUSH
65379: LD_INT 4
65381: PLUS
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: LIST
65390: PUSH
65391: LD_VAR 0 1
65395: PUSH
65396: LD_INT 3
65398: PLUS
65399: PUSH
65400: LD_VAR 0 2
65404: PUSH
65405: LD_INT 3
65407: PLUS
65408: PUSH
65409: LD_INT 5
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: LIST
65416: PUSH
65417: LD_VAR 0 1
65421: PUSH
65422: LD_INT 4
65424: PLUS
65425: PUSH
65426: LD_VAR 0 2
65430: PUSH
65431: LD_INT 4
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: LIST
65438: PUSH
65439: LD_VAR 0 1
65443: PUSH
65444: LD_VAR 0 2
65448: PUSH
65449: LD_INT 3
65451: MINUS
65452: PUSH
65453: LD_INT 3
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: LIST
65460: PUSH
65461: LD_VAR 0 1
65465: PUSH
65466: LD_INT 4
65468: MINUS
65469: PUSH
65470: LD_VAR 0 2
65474: PUSH
65475: LD_INT 4
65477: MINUS
65478: PUSH
65479: LD_INT 2
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: LIST
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: ST_TO_ADDR
// end ; 5 :
65494: GO 65634
65496: LD_INT 5
65498: DOUBLE
65499: EQUAL
65500: IFTRUE 65504
65502: GO 65633
65504: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65505: LD_ADDR_VAR 0 5
65509: PUSH
65510: LD_VAR 0 1
65514: PUSH
65515: LD_INT 4
65517: MINUS
65518: PUSH
65519: LD_VAR 0 2
65523: PUSH
65524: LD_INT 1
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: LIST
65531: PUSH
65532: LD_VAR 0 1
65536: PUSH
65537: LD_VAR 0 2
65541: PUSH
65542: LD_INT 4
65544: MINUS
65545: PUSH
65546: LD_INT 3
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: LIST
65553: PUSH
65554: LD_VAR 0 1
65558: PUSH
65559: LD_INT 4
65561: PLUS
65562: PUSH
65563: LD_VAR 0 2
65567: PUSH
65568: LD_INT 4
65570: PLUS
65571: PUSH
65572: LD_INT 5
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: LIST
65579: PUSH
65580: LD_VAR 0 1
65584: PUSH
65585: LD_INT 3
65587: PLUS
65588: PUSH
65589: LD_VAR 0 2
65593: PUSH
65594: LD_INT 4
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: LIST
65601: PUSH
65602: LD_VAR 0 1
65606: PUSH
65607: LD_VAR 0 2
65611: PUSH
65612: LD_INT 3
65614: PLUS
65615: PUSH
65616: LD_INT 0
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: LIST
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: ST_TO_ADDR
// end ; end ;
65631: GO 65634
65633: POP
// result := list ;
65634: LD_ADDR_VAR 0 4
65638: PUSH
65639: LD_VAR 0 5
65643: ST_TO_ADDR
// end ;
65644: LD_VAR 0 4
65648: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65649: LD_INT 0
65651: PPUSH
65652: PPUSH
65653: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65654: LD_VAR 0 1
65658: NOT
65659: PUSH
65660: LD_VAR 0 2
65664: PUSH
65665: LD_INT 1
65667: PUSH
65668: LD_INT 2
65670: PUSH
65671: LD_INT 3
65673: PUSH
65674: LD_INT 4
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: IN
65683: NOT
65684: OR
65685: IFFALSE 65689
// exit ;
65687: GO 65772
// tmp := [ ] ;
65689: LD_ADDR_VAR 0 5
65693: PUSH
65694: EMPTY
65695: ST_TO_ADDR
// for i in units do
65696: LD_ADDR_VAR 0 4
65700: PUSH
65701: LD_VAR 0 1
65705: PUSH
65706: FOR_IN
65707: IFFALSE 65741
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65709: LD_ADDR_VAR 0 5
65713: PUSH
65714: LD_VAR 0 5
65718: PPUSH
65719: LD_VAR 0 4
65723: PPUSH
65724: LD_VAR 0 2
65728: PPUSH
65729: CALL_OW 259
65733: PPUSH
65734: CALL 67145 0 2
65738: ST_TO_ADDR
65739: GO 65706
65741: POP
65742: POP
// if not tmp then
65743: LD_VAR 0 5
65747: NOT
65748: IFFALSE 65752
// exit ;
65750: GO 65772
// result := SortListByListDesc ( units , tmp ) ;
65752: LD_ADDR_VAR 0 3
65756: PUSH
65757: LD_VAR 0 1
65761: PPUSH
65762: LD_VAR 0 5
65766: PPUSH
65767: CALL_OW 77
65771: ST_TO_ADDR
// end ;
65772: LD_VAR 0 3
65776: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65777: LD_INT 0
65779: PPUSH
65780: PPUSH
65781: PPUSH
// result := false ;
65782: LD_ADDR_VAR 0 3
65786: PUSH
65787: LD_INT 0
65789: ST_TO_ADDR
// if not building then
65790: LD_VAR 0 2
65794: NOT
65795: IFFALSE 65799
// exit ;
65797: GO 65937
// x := GetX ( building ) ;
65799: LD_ADDR_VAR 0 4
65803: PUSH
65804: LD_VAR 0 2
65808: PPUSH
65809: CALL_OW 250
65813: ST_TO_ADDR
// y := GetY ( building ) ;
65814: LD_ADDR_VAR 0 5
65818: PUSH
65819: LD_VAR 0 2
65823: PPUSH
65824: CALL_OW 251
65828: ST_TO_ADDR
// if not x or not y then
65829: LD_VAR 0 4
65833: NOT
65834: PUSH
65835: LD_VAR 0 5
65839: NOT
65840: OR
65841: IFFALSE 65845
// exit ;
65843: GO 65937
// if GetTaskList ( unit ) then
65845: LD_VAR 0 1
65849: PPUSH
65850: CALL_OW 437
65854: IFFALSE 65937
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65856: LD_STRING e
65858: PUSH
65859: LD_VAR 0 1
65863: PPUSH
65864: CALL_OW 437
65868: PUSH
65869: LD_INT 1
65871: ARRAY
65872: PUSH
65873: LD_INT 1
65875: ARRAY
65876: EQUAL
65877: PUSH
65878: LD_VAR 0 4
65882: PUSH
65883: LD_VAR 0 1
65887: PPUSH
65888: CALL_OW 437
65892: PUSH
65893: LD_INT 1
65895: ARRAY
65896: PUSH
65897: LD_INT 2
65899: ARRAY
65900: EQUAL
65901: AND
65902: PUSH
65903: LD_VAR 0 5
65907: PUSH
65908: LD_VAR 0 1
65912: PPUSH
65913: CALL_OW 437
65917: PUSH
65918: LD_INT 1
65920: ARRAY
65921: PUSH
65922: LD_INT 3
65924: ARRAY
65925: EQUAL
65926: AND
65927: IFFALSE 65937
// result := true end ;
65929: LD_ADDR_VAR 0 3
65933: PUSH
65934: LD_INT 1
65936: ST_TO_ADDR
// end ;
65937: LD_VAR 0 3
65941: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65942: LD_INT 0
65944: PPUSH
// result := false ;
65945: LD_ADDR_VAR 0 4
65949: PUSH
65950: LD_INT 0
65952: ST_TO_ADDR
// if GetTaskList ( unit ) then
65953: LD_VAR 0 1
65957: PPUSH
65958: CALL_OW 437
65962: IFFALSE 66045
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65964: LD_STRING M
65966: PUSH
65967: LD_VAR 0 1
65971: PPUSH
65972: CALL_OW 437
65976: PUSH
65977: LD_INT 1
65979: ARRAY
65980: PUSH
65981: LD_INT 1
65983: ARRAY
65984: EQUAL
65985: PUSH
65986: LD_VAR 0 2
65990: PUSH
65991: LD_VAR 0 1
65995: PPUSH
65996: CALL_OW 437
66000: PUSH
66001: LD_INT 1
66003: ARRAY
66004: PUSH
66005: LD_INT 2
66007: ARRAY
66008: EQUAL
66009: AND
66010: PUSH
66011: LD_VAR 0 3
66015: PUSH
66016: LD_VAR 0 1
66020: PPUSH
66021: CALL_OW 437
66025: PUSH
66026: LD_INT 1
66028: ARRAY
66029: PUSH
66030: LD_INT 3
66032: ARRAY
66033: EQUAL
66034: AND
66035: IFFALSE 66045
// result := true ;
66037: LD_ADDR_VAR 0 4
66041: PUSH
66042: LD_INT 1
66044: ST_TO_ADDR
// end ; end ;
66045: LD_VAR 0 4
66049: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66050: LD_INT 0
66052: PPUSH
66053: PPUSH
66054: PPUSH
66055: PPUSH
// if not unit or not area then
66056: LD_VAR 0 1
66060: NOT
66061: PUSH
66062: LD_VAR 0 2
66066: NOT
66067: OR
66068: IFFALSE 66072
// exit ;
66070: GO 66248
// tmp := AreaToList ( area , i ) ;
66072: LD_ADDR_VAR 0 6
66076: PUSH
66077: LD_VAR 0 2
66081: PPUSH
66082: LD_VAR 0 5
66086: PPUSH
66087: CALL_OW 517
66091: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66092: LD_ADDR_VAR 0 5
66096: PUSH
66097: DOUBLE
66098: LD_INT 1
66100: DEC
66101: ST_TO_ADDR
66102: LD_VAR 0 6
66106: PUSH
66107: LD_INT 1
66109: ARRAY
66110: PUSH
66111: FOR_TO
66112: IFFALSE 66246
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66114: LD_ADDR_VAR 0 7
66118: PUSH
66119: LD_VAR 0 6
66123: PUSH
66124: LD_INT 1
66126: ARRAY
66127: PUSH
66128: LD_VAR 0 5
66132: ARRAY
66133: PUSH
66134: LD_VAR 0 6
66138: PUSH
66139: LD_INT 2
66141: ARRAY
66142: PUSH
66143: LD_VAR 0 5
66147: ARRAY
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66153: LD_INT 92
66155: PUSH
66156: LD_VAR 0 7
66160: PUSH
66161: LD_INT 1
66163: ARRAY
66164: PUSH
66165: LD_VAR 0 7
66169: PUSH
66170: LD_INT 2
66172: ARRAY
66173: PUSH
66174: LD_INT 2
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: PPUSH
66183: CALL_OW 69
66187: PUSH
66188: LD_INT 0
66190: EQUAL
66191: IFFALSE 66244
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66193: LD_VAR 0 1
66197: PPUSH
66198: LD_VAR 0 7
66202: PUSH
66203: LD_INT 1
66205: ARRAY
66206: PPUSH
66207: LD_VAR 0 7
66211: PUSH
66212: LD_INT 2
66214: ARRAY
66215: PPUSH
66216: LD_VAR 0 3
66220: PPUSH
66221: CALL_OW 48
// result := IsPlaced ( unit ) ;
66225: LD_ADDR_VAR 0 4
66229: PUSH
66230: LD_VAR 0 1
66234: PPUSH
66235: CALL_OW 305
66239: ST_TO_ADDR
// exit ;
66240: POP
66241: POP
66242: GO 66248
// end ; end ;
66244: GO 66111
66246: POP
66247: POP
// end ;
66248: LD_VAR 0 4
66252: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66253: LD_INT 0
66255: PPUSH
66256: PPUSH
66257: PPUSH
// if not side or side > 8 then
66258: LD_VAR 0 1
66262: NOT
66263: PUSH
66264: LD_VAR 0 1
66268: PUSH
66269: LD_INT 8
66271: GREATER
66272: OR
66273: IFFALSE 66277
// exit ;
66275: GO 66464
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66277: LD_ADDR_VAR 0 4
66281: PUSH
66282: LD_INT 22
66284: PUSH
66285: LD_VAR 0 1
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 21
66296: PUSH
66297: LD_INT 3
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PPUSH
66308: CALL_OW 69
66312: ST_TO_ADDR
// if not tmp then
66313: LD_VAR 0 4
66317: NOT
66318: IFFALSE 66322
// exit ;
66320: GO 66464
// enable_addtolog := true ;
66322: LD_ADDR_OWVAR 81
66326: PUSH
66327: LD_INT 1
66329: ST_TO_ADDR
// AddToLog ( [ ) ;
66330: LD_STRING [
66332: PPUSH
66333: CALL_OW 561
// for i in tmp do
66337: LD_ADDR_VAR 0 3
66341: PUSH
66342: LD_VAR 0 4
66346: PUSH
66347: FOR_IN
66348: IFFALSE 66455
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66350: LD_STRING [
66352: PUSH
66353: LD_VAR 0 3
66357: PPUSH
66358: CALL_OW 266
66362: STR
66363: PUSH
66364: LD_STRING , 
66366: STR
66367: PUSH
66368: LD_VAR 0 3
66372: PPUSH
66373: CALL_OW 250
66377: STR
66378: PUSH
66379: LD_STRING , 
66381: STR
66382: PUSH
66383: LD_VAR 0 3
66387: PPUSH
66388: CALL_OW 251
66392: STR
66393: PUSH
66394: LD_STRING , 
66396: STR
66397: PUSH
66398: LD_VAR 0 3
66402: PPUSH
66403: CALL_OW 254
66407: STR
66408: PUSH
66409: LD_STRING , 
66411: STR
66412: PUSH
66413: LD_VAR 0 3
66417: PPUSH
66418: LD_INT 1
66420: PPUSH
66421: CALL_OW 268
66425: STR
66426: PUSH
66427: LD_STRING , 
66429: STR
66430: PUSH
66431: LD_VAR 0 3
66435: PPUSH
66436: LD_INT 2
66438: PPUSH
66439: CALL_OW 268
66443: STR
66444: PUSH
66445: LD_STRING ],
66447: STR
66448: PPUSH
66449: CALL_OW 561
// end ;
66453: GO 66347
66455: POP
66456: POP
// AddToLog ( ]; ) ;
66457: LD_STRING ];
66459: PPUSH
66460: CALL_OW 561
// end ;
66464: LD_VAR 0 2
66468: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66469: LD_INT 0
66471: PPUSH
66472: PPUSH
66473: PPUSH
66474: PPUSH
66475: PPUSH
// if not area or not rate or not max then
66476: LD_VAR 0 1
66480: NOT
66481: PUSH
66482: LD_VAR 0 2
66486: NOT
66487: OR
66488: PUSH
66489: LD_VAR 0 4
66493: NOT
66494: OR
66495: IFFALSE 66499
// exit ;
66497: GO 66688
// while 1 do
66499: LD_INT 1
66501: IFFALSE 66688
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66503: LD_ADDR_VAR 0 9
66507: PUSH
66508: LD_VAR 0 1
66512: PPUSH
66513: LD_INT 1
66515: PPUSH
66516: CALL_OW 287
66520: PUSH
66521: LD_INT 10
66523: MUL
66524: ST_TO_ADDR
// r := rate / 10 ;
66525: LD_ADDR_VAR 0 7
66529: PUSH
66530: LD_VAR 0 2
66534: PUSH
66535: LD_INT 10
66537: DIVREAL
66538: ST_TO_ADDR
// time := 1 1$00 ;
66539: LD_ADDR_VAR 0 8
66543: PUSH
66544: LD_INT 2100
66546: ST_TO_ADDR
// if amount < min then
66547: LD_VAR 0 9
66551: PUSH
66552: LD_VAR 0 3
66556: LESS
66557: IFFALSE 66575
// r := r * 2 else
66559: LD_ADDR_VAR 0 7
66563: PUSH
66564: LD_VAR 0 7
66568: PUSH
66569: LD_INT 2
66571: MUL
66572: ST_TO_ADDR
66573: GO 66601
// if amount > max then
66575: LD_VAR 0 9
66579: PUSH
66580: LD_VAR 0 4
66584: GREATER
66585: IFFALSE 66601
// r := r / 2 ;
66587: LD_ADDR_VAR 0 7
66591: PUSH
66592: LD_VAR 0 7
66596: PUSH
66597: LD_INT 2
66599: DIVREAL
66600: ST_TO_ADDR
// time := time / r ;
66601: LD_ADDR_VAR 0 8
66605: PUSH
66606: LD_VAR 0 8
66610: PUSH
66611: LD_VAR 0 7
66615: DIVREAL
66616: ST_TO_ADDR
// if time < 0 then
66617: LD_VAR 0 8
66621: PUSH
66622: LD_INT 0
66624: LESS
66625: IFFALSE 66642
// time := time * - 1 ;
66627: LD_ADDR_VAR 0 8
66631: PUSH
66632: LD_VAR 0 8
66636: PUSH
66637: LD_INT 1
66639: NEG
66640: MUL
66641: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66642: LD_VAR 0 8
66646: PUSH
66647: LD_INT 35
66649: PPUSH
66650: LD_INT 875
66652: PPUSH
66653: CALL_OW 12
66657: PLUS
66658: PPUSH
66659: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66663: LD_INT 1
66665: PPUSH
66666: LD_INT 5
66668: PPUSH
66669: CALL_OW 12
66673: PPUSH
66674: LD_VAR 0 1
66678: PPUSH
66679: LD_INT 1
66681: PPUSH
66682: CALL_OW 55
// end ;
66686: GO 66499
// end ;
66688: LD_VAR 0 5
66692: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66693: LD_INT 0
66695: PPUSH
66696: PPUSH
66697: PPUSH
66698: PPUSH
66699: PPUSH
66700: PPUSH
66701: PPUSH
66702: PPUSH
// if not turrets or not factories then
66703: LD_VAR 0 1
66707: NOT
66708: PUSH
66709: LD_VAR 0 2
66713: NOT
66714: OR
66715: IFFALSE 66719
// exit ;
66717: GO 67026
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66719: LD_ADDR_VAR 0 10
66723: PUSH
66724: LD_INT 5
66726: PUSH
66727: LD_INT 6
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 2
66736: PUSH
66737: LD_INT 4
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 3
66746: PUSH
66747: LD_INT 5
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 24
66761: PUSH
66762: LD_INT 25
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 23
66771: PUSH
66772: LD_INT 27
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 42
66785: PUSH
66786: LD_INT 43
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 44
66795: PUSH
66796: LD_INT 46
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 45
66805: PUSH
66806: LD_INT 47
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: LIST
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: LIST
66822: ST_TO_ADDR
// result := [ ] ;
66823: LD_ADDR_VAR 0 3
66827: PUSH
66828: EMPTY
66829: ST_TO_ADDR
// for i in turrets do
66830: LD_ADDR_VAR 0 4
66834: PUSH
66835: LD_VAR 0 1
66839: PUSH
66840: FOR_IN
66841: IFFALSE 67024
// begin nat := GetNation ( i ) ;
66843: LD_ADDR_VAR 0 7
66847: PUSH
66848: LD_VAR 0 4
66852: PPUSH
66853: CALL_OW 248
66857: ST_TO_ADDR
// weapon := 0 ;
66858: LD_ADDR_VAR 0 8
66862: PUSH
66863: LD_INT 0
66865: ST_TO_ADDR
// if not nat then
66866: LD_VAR 0 7
66870: NOT
66871: IFFALSE 66875
// continue ;
66873: GO 66840
// for j in list [ nat ] do
66875: LD_ADDR_VAR 0 5
66879: PUSH
66880: LD_VAR 0 10
66884: PUSH
66885: LD_VAR 0 7
66889: ARRAY
66890: PUSH
66891: FOR_IN
66892: IFFALSE 66933
// if GetBWeapon ( i ) = j [ 1 ] then
66894: LD_VAR 0 4
66898: PPUSH
66899: CALL_OW 269
66903: PUSH
66904: LD_VAR 0 5
66908: PUSH
66909: LD_INT 1
66911: ARRAY
66912: EQUAL
66913: IFFALSE 66931
// begin weapon := j [ 2 ] ;
66915: LD_ADDR_VAR 0 8
66919: PUSH
66920: LD_VAR 0 5
66924: PUSH
66925: LD_INT 2
66927: ARRAY
66928: ST_TO_ADDR
// break ;
66929: GO 66933
// end ;
66931: GO 66891
66933: POP
66934: POP
// if not weapon then
66935: LD_VAR 0 8
66939: NOT
66940: IFFALSE 66944
// continue ;
66942: GO 66840
// for k in factories do
66944: LD_ADDR_VAR 0 6
66948: PUSH
66949: LD_VAR 0 2
66953: PUSH
66954: FOR_IN
66955: IFFALSE 67020
// begin weapons := AvailableWeaponList ( k ) ;
66957: LD_ADDR_VAR 0 9
66961: PUSH
66962: LD_VAR 0 6
66966: PPUSH
66967: CALL_OW 478
66971: ST_TO_ADDR
// if not weapons then
66972: LD_VAR 0 9
66976: NOT
66977: IFFALSE 66981
// continue ;
66979: GO 66954
// if weapon in weapons then
66981: LD_VAR 0 8
66985: PUSH
66986: LD_VAR 0 9
66990: IN
66991: IFFALSE 67018
// begin result := [ i , weapon ] ;
66993: LD_ADDR_VAR 0 3
66997: PUSH
66998: LD_VAR 0 4
67002: PUSH
67003: LD_VAR 0 8
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: ST_TO_ADDR
// exit ;
67012: POP
67013: POP
67014: POP
67015: POP
67016: GO 67026
// end ; end ;
67018: GO 66954
67020: POP
67021: POP
// end ;
67022: GO 66840
67024: POP
67025: POP
// end ;
67026: LD_VAR 0 3
67030: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67031: LD_INT 0
67033: PPUSH
// if not side or side > 8 then
67034: LD_VAR 0 3
67038: NOT
67039: PUSH
67040: LD_VAR 0 3
67044: PUSH
67045: LD_INT 8
67047: GREATER
67048: OR
67049: IFFALSE 67053
// exit ;
67051: GO 67112
// if not range then
67053: LD_VAR 0 4
67057: NOT
67058: IFFALSE 67069
// range := - 12 ;
67060: LD_ADDR_VAR 0 4
67064: PUSH
67065: LD_INT 12
67067: NEG
67068: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67069: LD_VAR 0 1
67073: PPUSH
67074: LD_VAR 0 2
67078: PPUSH
67079: LD_VAR 0 3
67083: PPUSH
67084: LD_VAR 0 4
67088: PPUSH
67089: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67093: LD_VAR 0 1
67097: PPUSH
67098: LD_VAR 0 2
67102: PPUSH
67103: LD_VAR 0 3
67107: PPUSH
67108: CALL_OW 331
// end ;
67112: LD_VAR 0 5
67116: RET
// export function Video ( mode ) ; begin
67117: LD_INT 0
67119: PPUSH
// ingame_video = mode ;
67120: LD_ADDR_OWVAR 52
67124: PUSH
67125: LD_VAR 0 1
67129: ST_TO_ADDR
// interface_hidden = mode ;
67130: LD_ADDR_OWVAR 54
67134: PUSH
67135: LD_VAR 0 1
67139: ST_TO_ADDR
// end ;
67140: LD_VAR 0 2
67144: RET
// export function Join ( array , element ) ; begin
67145: LD_INT 0
67147: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67148: LD_ADDR_VAR 0 3
67152: PUSH
67153: LD_VAR 0 1
67157: PPUSH
67158: LD_VAR 0 1
67162: PUSH
67163: LD_INT 1
67165: PLUS
67166: PPUSH
67167: LD_VAR 0 2
67171: PPUSH
67172: CALL_OW 1
67176: ST_TO_ADDR
// end ;
67177: LD_VAR 0 3
67181: RET
// export function JoinUnion ( array , element ) ; begin
67182: LD_INT 0
67184: PPUSH
// result := array union element ;
67185: LD_ADDR_VAR 0 3
67189: PUSH
67190: LD_VAR 0 1
67194: PUSH
67195: LD_VAR 0 2
67199: UNION
67200: ST_TO_ADDR
// end ;
67201: LD_VAR 0 3
67205: RET
// export function GetBehemoths ( side ) ; begin
67206: LD_INT 0
67208: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67209: LD_ADDR_VAR 0 2
67213: PUSH
67214: LD_INT 22
67216: PUSH
67217: LD_VAR 0 1
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 31
67228: PUSH
67229: LD_INT 25
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PPUSH
67240: CALL_OW 69
67244: ST_TO_ADDR
// end ;
67245: LD_VAR 0 2
67249: RET
// export function Shuffle ( array ) ; var i , index ; begin
67250: LD_INT 0
67252: PPUSH
67253: PPUSH
67254: PPUSH
// result := [ ] ;
67255: LD_ADDR_VAR 0 2
67259: PUSH
67260: EMPTY
67261: ST_TO_ADDR
// if not array then
67262: LD_VAR 0 1
67266: NOT
67267: IFFALSE 67271
// exit ;
67269: GO 67370
// Randomize ;
67271: CALL_OW 10
// for i = array downto 1 do
67275: LD_ADDR_VAR 0 3
67279: PUSH
67280: DOUBLE
67281: LD_VAR 0 1
67285: INC
67286: ST_TO_ADDR
67287: LD_INT 1
67289: PUSH
67290: FOR_DOWNTO
67291: IFFALSE 67368
// begin index := rand ( 1 , array ) ;
67293: LD_ADDR_VAR 0 4
67297: PUSH
67298: LD_INT 1
67300: PPUSH
67301: LD_VAR 0 1
67305: PPUSH
67306: CALL_OW 12
67310: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67311: LD_ADDR_VAR 0 2
67315: PUSH
67316: LD_VAR 0 2
67320: PPUSH
67321: LD_VAR 0 2
67325: PUSH
67326: LD_INT 1
67328: PLUS
67329: PPUSH
67330: LD_VAR 0 1
67334: PUSH
67335: LD_VAR 0 4
67339: ARRAY
67340: PPUSH
67341: CALL_OW 2
67345: ST_TO_ADDR
// array := Delete ( array , index ) ;
67346: LD_ADDR_VAR 0 1
67350: PUSH
67351: LD_VAR 0 1
67355: PPUSH
67356: LD_VAR 0 4
67360: PPUSH
67361: CALL_OW 3
67365: ST_TO_ADDR
// end ;
67366: GO 67290
67368: POP
67369: POP
// end ;
67370: LD_VAR 0 2
67374: RET
// export function GetBaseMaterials ( base ) ; begin
67375: LD_INT 0
67377: PPUSH
// result := [ 0 , 0 , 0 ] ;
67378: LD_ADDR_VAR 0 2
67382: PUSH
67383: LD_INT 0
67385: PUSH
67386: LD_INT 0
67388: PUSH
67389: LD_INT 0
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: LIST
67396: ST_TO_ADDR
// if not base then
67397: LD_VAR 0 1
67401: NOT
67402: IFFALSE 67406
// exit ;
67404: GO 67455
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67406: LD_ADDR_VAR 0 2
67410: PUSH
67411: LD_VAR 0 1
67415: PPUSH
67416: LD_INT 1
67418: PPUSH
67419: CALL_OW 275
67423: PUSH
67424: LD_VAR 0 1
67428: PPUSH
67429: LD_INT 2
67431: PPUSH
67432: CALL_OW 275
67436: PUSH
67437: LD_VAR 0 1
67441: PPUSH
67442: LD_INT 3
67444: PPUSH
67445: CALL_OW 275
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: LIST
67454: ST_TO_ADDR
// end ;
67455: LD_VAR 0 2
67459: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67460: LD_INT 0
67462: PPUSH
67463: PPUSH
// result := array ;
67464: LD_ADDR_VAR 0 3
67468: PUSH
67469: LD_VAR 0 1
67473: ST_TO_ADDR
// if size >= result then
67474: LD_VAR 0 2
67478: PUSH
67479: LD_VAR 0 3
67483: GREATEREQUAL
67484: IFFALSE 67488
// exit ;
67486: GO 67538
// if size then
67488: LD_VAR 0 2
67492: IFFALSE 67538
// for i := array downto size do
67494: LD_ADDR_VAR 0 4
67498: PUSH
67499: DOUBLE
67500: LD_VAR 0 1
67504: INC
67505: ST_TO_ADDR
67506: LD_VAR 0 2
67510: PUSH
67511: FOR_DOWNTO
67512: IFFALSE 67536
// result := Delete ( result , result ) ;
67514: LD_ADDR_VAR 0 3
67518: PUSH
67519: LD_VAR 0 3
67523: PPUSH
67524: LD_VAR 0 3
67528: PPUSH
67529: CALL_OW 3
67533: ST_TO_ADDR
67534: GO 67511
67536: POP
67537: POP
// end ;
67538: LD_VAR 0 3
67542: RET
// export function ComExit ( unit ) ; var tmp ; begin
67543: LD_INT 0
67545: PPUSH
67546: PPUSH
// if not IsInUnit ( unit ) then
67547: LD_VAR 0 1
67551: PPUSH
67552: CALL_OW 310
67556: NOT
67557: IFFALSE 67561
// exit ;
67559: GO 67621
// tmp := IsInUnit ( unit ) ;
67561: LD_ADDR_VAR 0 3
67565: PUSH
67566: LD_VAR 0 1
67570: PPUSH
67571: CALL_OW 310
67575: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67576: LD_VAR 0 3
67580: PPUSH
67581: CALL_OW 247
67585: PUSH
67586: LD_INT 2
67588: EQUAL
67589: IFFALSE 67602
// ComExitVehicle ( unit ) else
67591: LD_VAR 0 1
67595: PPUSH
67596: CALL_OW 121
67600: GO 67611
// ComExitBuilding ( unit ) ;
67602: LD_VAR 0 1
67606: PPUSH
67607: CALL_OW 122
// result := tmp ;
67611: LD_ADDR_VAR 0 2
67615: PUSH
67616: LD_VAR 0 3
67620: ST_TO_ADDR
// end ;
67621: LD_VAR 0 2
67625: RET
// export function ComExitAll ( units ) ; var i ; begin
67626: LD_INT 0
67628: PPUSH
67629: PPUSH
// if not units then
67630: LD_VAR 0 1
67634: NOT
67635: IFFALSE 67639
// exit ;
67637: GO 67665
// for i in units do
67639: LD_ADDR_VAR 0 3
67643: PUSH
67644: LD_VAR 0 1
67648: PUSH
67649: FOR_IN
67650: IFFALSE 67663
// ComExit ( i ) ;
67652: LD_VAR 0 3
67656: PPUSH
67657: CALL 67543 0 1
67661: GO 67649
67663: POP
67664: POP
// end ;
67665: LD_VAR 0 2
67669: RET
// export function ResetHc ; begin
67670: LD_INT 0
67672: PPUSH
// InitHc ;
67673: CALL_OW 19
// hc_importance := 0 ;
67677: LD_ADDR_OWVAR 32
67681: PUSH
67682: LD_INT 0
67684: ST_TO_ADDR
// end ;
67685: LD_VAR 0 1
67689: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67690: LD_INT 0
67692: PPUSH
67693: PPUSH
67694: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67695: LD_ADDR_VAR 0 6
67699: PUSH
67700: LD_VAR 0 1
67704: PUSH
67705: LD_VAR 0 3
67709: PLUS
67710: PUSH
67711: LD_INT 2
67713: DIV
67714: ST_TO_ADDR
// if _x < 0 then
67715: LD_VAR 0 6
67719: PUSH
67720: LD_INT 0
67722: LESS
67723: IFFALSE 67740
// _x := _x * - 1 ;
67725: LD_ADDR_VAR 0 6
67729: PUSH
67730: LD_VAR 0 6
67734: PUSH
67735: LD_INT 1
67737: NEG
67738: MUL
67739: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67740: LD_ADDR_VAR 0 7
67744: PUSH
67745: LD_VAR 0 2
67749: PUSH
67750: LD_VAR 0 4
67754: PLUS
67755: PUSH
67756: LD_INT 2
67758: DIV
67759: ST_TO_ADDR
// if _y < 0 then
67760: LD_VAR 0 7
67764: PUSH
67765: LD_INT 0
67767: LESS
67768: IFFALSE 67785
// _y := _y * - 1 ;
67770: LD_ADDR_VAR 0 7
67774: PUSH
67775: LD_VAR 0 7
67779: PUSH
67780: LD_INT 1
67782: NEG
67783: MUL
67784: ST_TO_ADDR
// result := [ _x , _y ] ;
67785: LD_ADDR_VAR 0 5
67789: PUSH
67790: LD_VAR 0 6
67794: PUSH
67795: LD_VAR 0 7
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: ST_TO_ADDR
// end ;
67804: LD_VAR 0 5
67808: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67809: LD_INT 0
67811: PPUSH
67812: PPUSH
67813: PPUSH
67814: PPUSH
// task := GetTaskList ( unit ) ;
67815: LD_ADDR_VAR 0 7
67819: PUSH
67820: LD_VAR 0 1
67824: PPUSH
67825: CALL_OW 437
67829: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67830: LD_VAR 0 7
67834: NOT
67835: PUSH
67836: LD_VAR 0 1
67840: PPUSH
67841: LD_VAR 0 2
67845: PPUSH
67846: CALL_OW 308
67850: NOT
67851: AND
67852: IFFALSE 67856
// exit ;
67854: GO 67974
// if IsInArea ( unit , area ) then
67856: LD_VAR 0 1
67860: PPUSH
67861: LD_VAR 0 2
67865: PPUSH
67866: CALL_OW 308
67870: IFFALSE 67888
// begin ComMoveToArea ( unit , goAway ) ;
67872: LD_VAR 0 1
67876: PPUSH
67877: LD_VAR 0 3
67881: PPUSH
67882: CALL_OW 113
// exit ;
67886: GO 67974
// end ; if task [ 1 ] [ 1 ] <> M then
67888: LD_VAR 0 7
67892: PUSH
67893: LD_INT 1
67895: ARRAY
67896: PUSH
67897: LD_INT 1
67899: ARRAY
67900: PUSH
67901: LD_STRING M
67903: NONEQUAL
67904: IFFALSE 67908
// exit ;
67906: GO 67974
// x := task [ 1 ] [ 2 ] ;
67908: LD_ADDR_VAR 0 5
67912: PUSH
67913: LD_VAR 0 7
67917: PUSH
67918: LD_INT 1
67920: ARRAY
67921: PUSH
67922: LD_INT 2
67924: ARRAY
67925: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67926: LD_ADDR_VAR 0 6
67930: PUSH
67931: LD_VAR 0 7
67935: PUSH
67936: LD_INT 1
67938: ARRAY
67939: PUSH
67940: LD_INT 3
67942: ARRAY
67943: ST_TO_ADDR
// if InArea ( x , y , area ) then
67944: LD_VAR 0 5
67948: PPUSH
67949: LD_VAR 0 6
67953: PPUSH
67954: LD_VAR 0 2
67958: PPUSH
67959: CALL_OW 309
67963: IFFALSE 67974
// ComStop ( unit ) ;
67965: LD_VAR 0 1
67969: PPUSH
67970: CALL_OW 141
// end ;
67974: LD_VAR 0 4
67978: RET
// export function Abs ( value ) ; begin
67979: LD_INT 0
67981: PPUSH
// result := value ;
67982: LD_ADDR_VAR 0 2
67986: PUSH
67987: LD_VAR 0 1
67991: ST_TO_ADDR
// if value < 0 then
67992: LD_VAR 0 1
67996: PUSH
67997: LD_INT 0
67999: LESS
68000: IFFALSE 68017
// result := value * - 1 ;
68002: LD_ADDR_VAR 0 2
68006: PUSH
68007: LD_VAR 0 1
68011: PUSH
68012: LD_INT 1
68014: NEG
68015: MUL
68016: ST_TO_ADDR
// end ;
68017: LD_VAR 0 2
68021: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68022: LD_INT 0
68024: PPUSH
68025: PPUSH
68026: PPUSH
68027: PPUSH
68028: PPUSH
68029: PPUSH
68030: PPUSH
68031: PPUSH
// if not unit or not building then
68032: LD_VAR 0 1
68036: NOT
68037: PUSH
68038: LD_VAR 0 2
68042: NOT
68043: OR
68044: IFFALSE 68048
// exit ;
68046: GO 68274
// x := GetX ( building ) ;
68048: LD_ADDR_VAR 0 4
68052: PUSH
68053: LD_VAR 0 2
68057: PPUSH
68058: CALL_OW 250
68062: ST_TO_ADDR
// y := GetY ( building ) ;
68063: LD_ADDR_VAR 0 6
68067: PUSH
68068: LD_VAR 0 2
68072: PPUSH
68073: CALL_OW 251
68077: ST_TO_ADDR
// d := GetDir ( building ) ;
68078: LD_ADDR_VAR 0 8
68082: PUSH
68083: LD_VAR 0 2
68087: PPUSH
68088: CALL_OW 254
68092: ST_TO_ADDR
// r := 4 ;
68093: LD_ADDR_VAR 0 9
68097: PUSH
68098: LD_INT 4
68100: ST_TO_ADDR
// for i := 1 to 5 do
68101: LD_ADDR_VAR 0 10
68105: PUSH
68106: DOUBLE
68107: LD_INT 1
68109: DEC
68110: ST_TO_ADDR
68111: LD_INT 5
68113: PUSH
68114: FOR_TO
68115: IFFALSE 68272
// begin _x := ShiftX ( x , d , r + i ) ;
68117: LD_ADDR_VAR 0 5
68121: PUSH
68122: LD_VAR 0 4
68126: PPUSH
68127: LD_VAR 0 8
68131: PPUSH
68132: LD_VAR 0 9
68136: PUSH
68137: LD_VAR 0 10
68141: PLUS
68142: PPUSH
68143: CALL_OW 272
68147: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68148: LD_ADDR_VAR 0 7
68152: PUSH
68153: LD_VAR 0 6
68157: PPUSH
68158: LD_VAR 0 8
68162: PPUSH
68163: LD_VAR 0 9
68167: PUSH
68168: LD_VAR 0 10
68172: PLUS
68173: PPUSH
68174: CALL_OW 273
68178: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68179: LD_VAR 0 5
68183: PPUSH
68184: LD_VAR 0 7
68188: PPUSH
68189: CALL_OW 488
68193: PUSH
68194: LD_VAR 0 5
68198: PPUSH
68199: LD_VAR 0 7
68203: PPUSH
68204: CALL_OW 428
68208: PPUSH
68209: CALL_OW 247
68213: PUSH
68214: LD_INT 3
68216: PUSH
68217: LD_INT 2
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: IN
68224: NOT
68225: AND
68226: IFFALSE 68270
// begin ComMoveXY ( unit , _x , _y ) ;
68228: LD_VAR 0 1
68232: PPUSH
68233: LD_VAR 0 5
68237: PPUSH
68238: LD_VAR 0 7
68242: PPUSH
68243: CALL_OW 111
// result := [ _x , _y ] ;
68247: LD_ADDR_VAR 0 3
68251: PUSH
68252: LD_VAR 0 5
68256: PUSH
68257: LD_VAR 0 7
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: ST_TO_ADDR
// exit ;
68266: POP
68267: POP
68268: GO 68274
// end ; end ;
68270: GO 68114
68272: POP
68273: POP
// end ;
68274: LD_VAR 0 3
68278: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68279: LD_INT 0
68281: PPUSH
68282: PPUSH
68283: PPUSH
// result := 0 ;
68284: LD_ADDR_VAR 0 3
68288: PUSH
68289: LD_INT 0
68291: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68292: LD_VAR 0 1
68296: PUSH
68297: LD_INT 0
68299: LESS
68300: PUSH
68301: LD_VAR 0 1
68305: PUSH
68306: LD_INT 8
68308: GREATER
68309: OR
68310: PUSH
68311: LD_VAR 0 2
68315: PUSH
68316: LD_INT 0
68318: LESS
68319: OR
68320: PUSH
68321: LD_VAR 0 2
68325: PUSH
68326: LD_INT 8
68328: GREATER
68329: OR
68330: IFFALSE 68334
// exit ;
68332: GO 68409
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68334: LD_ADDR_VAR 0 4
68338: PUSH
68339: LD_INT 22
68341: PUSH
68342: LD_VAR 0 2
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PPUSH
68351: CALL_OW 69
68355: PUSH
68356: FOR_IN
68357: IFFALSE 68407
// begin un := UnitShoot ( i ) ;
68359: LD_ADDR_VAR 0 5
68363: PUSH
68364: LD_VAR 0 4
68368: PPUSH
68369: CALL_OW 504
68373: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68374: LD_VAR 0 5
68378: PPUSH
68379: CALL_OW 255
68383: PUSH
68384: LD_VAR 0 1
68388: EQUAL
68389: IFFALSE 68405
// begin result := un ;
68391: LD_ADDR_VAR 0 3
68395: PUSH
68396: LD_VAR 0 5
68400: ST_TO_ADDR
// exit ;
68401: POP
68402: POP
68403: GO 68409
// end ; end ;
68405: GO 68356
68407: POP
68408: POP
// end ;
68409: LD_VAR 0 3
68413: RET
// export function GetCargoBay ( units ) ; begin
68414: LD_INT 0
68416: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68417: LD_ADDR_VAR 0 2
68421: PUSH
68422: LD_VAR 0 1
68426: PPUSH
68427: LD_INT 2
68429: PUSH
68430: LD_INT 34
68432: PUSH
68433: LD_INT 12
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 34
68442: PUSH
68443: LD_INT 51
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 34
68452: PUSH
68453: LD_INT 32
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: LD_INT 34
68462: PUSH
68463: LD_INT 89
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: PPUSH
68477: CALL_OW 72
68481: ST_TO_ADDR
// end ;
68482: LD_VAR 0 2
68486: RET
// export function Negate ( value ) ; begin
68487: LD_INT 0
68489: PPUSH
// result := not value ;
68490: LD_ADDR_VAR 0 2
68494: PUSH
68495: LD_VAR 0 1
68499: NOT
68500: ST_TO_ADDR
// end ;
68501: LD_VAR 0 2
68505: RET
// export function Inc ( value ) ; begin
68506: LD_INT 0
68508: PPUSH
// result := value + 1 ;
68509: LD_ADDR_VAR 0 2
68513: PUSH
68514: LD_VAR 0 1
68518: PUSH
68519: LD_INT 1
68521: PLUS
68522: ST_TO_ADDR
// end ;
68523: LD_VAR 0 2
68527: RET
// export function Dec ( value ) ; begin
68528: LD_INT 0
68530: PPUSH
// result := value - 1 ;
68531: LD_ADDR_VAR 0 2
68535: PUSH
68536: LD_VAR 0 1
68540: PUSH
68541: LD_INT 1
68543: MINUS
68544: ST_TO_ADDR
// end ;
68545: LD_VAR 0 2
68549: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68550: LD_INT 0
68552: PPUSH
68553: PPUSH
68554: PPUSH
68555: PPUSH
68556: PPUSH
68557: PPUSH
68558: PPUSH
68559: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68560: LD_VAR 0 1
68564: PPUSH
68565: LD_VAR 0 2
68569: PPUSH
68570: CALL_OW 488
68574: NOT
68575: PUSH
68576: LD_VAR 0 3
68580: PPUSH
68581: LD_VAR 0 4
68585: PPUSH
68586: CALL_OW 488
68590: NOT
68591: OR
68592: IFFALSE 68605
// begin result := - 1 ;
68594: LD_ADDR_VAR 0 5
68598: PUSH
68599: LD_INT 1
68601: NEG
68602: ST_TO_ADDR
// exit ;
68603: GO 68840
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68605: LD_ADDR_VAR 0 12
68609: PUSH
68610: LD_VAR 0 1
68614: PPUSH
68615: LD_VAR 0 2
68619: PPUSH
68620: LD_VAR 0 3
68624: PPUSH
68625: LD_VAR 0 4
68629: PPUSH
68630: CALL 67690 0 4
68634: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68635: LD_ADDR_VAR 0 11
68639: PUSH
68640: LD_VAR 0 1
68644: PPUSH
68645: LD_VAR 0 2
68649: PPUSH
68650: LD_VAR 0 12
68654: PUSH
68655: LD_INT 1
68657: ARRAY
68658: PPUSH
68659: LD_VAR 0 12
68663: PUSH
68664: LD_INT 2
68666: ARRAY
68667: PPUSH
68668: CALL_OW 298
68672: ST_TO_ADDR
// distance := 9999 ;
68673: LD_ADDR_VAR 0 10
68677: PUSH
68678: LD_INT 9999
68680: ST_TO_ADDR
// for i := 0 to 5 do
68681: LD_ADDR_VAR 0 6
68685: PUSH
68686: DOUBLE
68687: LD_INT 0
68689: DEC
68690: ST_TO_ADDR
68691: LD_INT 5
68693: PUSH
68694: FOR_TO
68695: IFFALSE 68838
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68697: LD_ADDR_VAR 0 7
68701: PUSH
68702: LD_VAR 0 1
68706: PPUSH
68707: LD_VAR 0 6
68711: PPUSH
68712: LD_VAR 0 11
68716: PPUSH
68717: CALL_OW 272
68721: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68722: LD_ADDR_VAR 0 8
68726: PUSH
68727: LD_VAR 0 2
68731: PPUSH
68732: LD_VAR 0 6
68736: PPUSH
68737: LD_VAR 0 11
68741: PPUSH
68742: CALL_OW 273
68746: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68747: LD_VAR 0 7
68751: PPUSH
68752: LD_VAR 0 8
68756: PPUSH
68757: CALL_OW 488
68761: NOT
68762: IFFALSE 68766
// continue ;
68764: GO 68694
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68766: LD_ADDR_VAR 0 9
68770: PUSH
68771: LD_VAR 0 12
68775: PUSH
68776: LD_INT 1
68778: ARRAY
68779: PPUSH
68780: LD_VAR 0 12
68784: PUSH
68785: LD_INT 2
68787: ARRAY
68788: PPUSH
68789: LD_VAR 0 7
68793: PPUSH
68794: LD_VAR 0 8
68798: PPUSH
68799: CALL_OW 298
68803: ST_TO_ADDR
// if tmp < distance then
68804: LD_VAR 0 9
68808: PUSH
68809: LD_VAR 0 10
68813: LESS
68814: IFFALSE 68836
// begin result := i ;
68816: LD_ADDR_VAR 0 5
68820: PUSH
68821: LD_VAR 0 6
68825: ST_TO_ADDR
// distance := tmp ;
68826: LD_ADDR_VAR 0 10
68830: PUSH
68831: LD_VAR 0 9
68835: ST_TO_ADDR
// end ; end ;
68836: GO 68694
68838: POP
68839: POP
// end ;
68840: LD_VAR 0 5
68844: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68845: LD_INT 0
68847: PPUSH
68848: PPUSH
// if not driver or not IsInUnit ( driver ) then
68849: LD_VAR 0 1
68853: NOT
68854: PUSH
68855: LD_VAR 0 1
68859: PPUSH
68860: CALL_OW 310
68864: NOT
68865: OR
68866: IFFALSE 68870
// exit ;
68868: GO 68960
// vehicle := IsInUnit ( driver ) ;
68870: LD_ADDR_VAR 0 3
68874: PUSH
68875: LD_VAR 0 1
68879: PPUSH
68880: CALL_OW 310
68884: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68885: LD_VAR 0 1
68889: PPUSH
68890: LD_STRING \
68892: PUSH
68893: LD_INT 0
68895: PUSH
68896: LD_INT 0
68898: PUSH
68899: LD_INT 0
68901: PUSH
68902: LD_INT 0
68904: PUSH
68905: LD_INT 0
68907: PUSH
68908: LD_INT 0
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: PUSH
68920: LD_STRING E
68922: PUSH
68923: LD_INT 0
68925: PUSH
68926: LD_INT 0
68928: PUSH
68929: LD_VAR 0 3
68933: PUSH
68934: LD_INT 0
68936: PUSH
68937: LD_INT 0
68939: PUSH
68940: LD_INT 0
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PPUSH
68956: CALL_OW 446
// end ;
68960: LD_VAR 0 2
68964: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68965: LD_INT 0
68967: PPUSH
68968: PPUSH
// if not driver or not IsInUnit ( driver ) then
68969: LD_VAR 0 1
68973: NOT
68974: PUSH
68975: LD_VAR 0 1
68979: PPUSH
68980: CALL_OW 310
68984: NOT
68985: OR
68986: IFFALSE 68990
// exit ;
68988: GO 69080
// vehicle := IsInUnit ( driver ) ;
68990: LD_ADDR_VAR 0 3
68994: PUSH
68995: LD_VAR 0 1
68999: PPUSH
69000: CALL_OW 310
69004: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69005: LD_VAR 0 1
69009: PPUSH
69010: LD_STRING \
69012: PUSH
69013: LD_INT 0
69015: PUSH
69016: LD_INT 0
69018: PUSH
69019: LD_INT 0
69021: PUSH
69022: LD_INT 0
69024: PUSH
69025: LD_INT 0
69027: PUSH
69028: LD_INT 0
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: PUSH
69040: LD_STRING E
69042: PUSH
69043: LD_INT 0
69045: PUSH
69046: LD_INT 0
69048: PUSH
69049: LD_VAR 0 3
69053: PUSH
69054: LD_INT 0
69056: PUSH
69057: LD_INT 0
69059: PUSH
69060: LD_INT 0
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PPUSH
69076: CALL_OW 447
// end ;
69080: LD_VAR 0 2
69084: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69085: LD_INT 0
69087: PPUSH
69088: PPUSH
69089: PPUSH
// tmp := [ ] ;
69090: LD_ADDR_VAR 0 5
69094: PUSH
69095: EMPTY
69096: ST_TO_ADDR
// for i in units do
69097: LD_ADDR_VAR 0 4
69101: PUSH
69102: LD_VAR 0 1
69106: PUSH
69107: FOR_IN
69108: IFFALSE 69146
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69110: LD_ADDR_VAR 0 5
69114: PUSH
69115: LD_VAR 0 5
69119: PPUSH
69120: LD_VAR 0 5
69124: PUSH
69125: LD_INT 1
69127: PLUS
69128: PPUSH
69129: LD_VAR 0 4
69133: PPUSH
69134: CALL_OW 256
69138: PPUSH
69139: CALL_OW 2
69143: ST_TO_ADDR
69144: GO 69107
69146: POP
69147: POP
// if not tmp then
69148: LD_VAR 0 5
69152: NOT
69153: IFFALSE 69157
// exit ;
69155: GO 69205
// if asc then
69157: LD_VAR 0 2
69161: IFFALSE 69185
// result := SortListByListAsc ( units , tmp ) else
69163: LD_ADDR_VAR 0 3
69167: PUSH
69168: LD_VAR 0 1
69172: PPUSH
69173: LD_VAR 0 5
69177: PPUSH
69178: CALL_OW 76
69182: ST_TO_ADDR
69183: GO 69205
// result := SortListByListDesc ( units , tmp ) ;
69185: LD_ADDR_VAR 0 3
69189: PUSH
69190: LD_VAR 0 1
69194: PPUSH
69195: LD_VAR 0 5
69199: PPUSH
69200: CALL_OW 77
69204: ST_TO_ADDR
// end ;
69205: LD_VAR 0 3
69209: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69210: LD_INT 0
69212: PPUSH
69213: PPUSH
// task := GetTaskList ( mech ) ;
69214: LD_ADDR_VAR 0 4
69218: PUSH
69219: LD_VAR 0 1
69223: PPUSH
69224: CALL_OW 437
69228: ST_TO_ADDR
// if not task then
69229: LD_VAR 0 4
69233: NOT
69234: IFFALSE 69238
// exit ;
69236: GO 69280
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69238: LD_ADDR_VAR 0 3
69242: PUSH
69243: LD_VAR 0 4
69247: PUSH
69248: LD_INT 1
69250: ARRAY
69251: PUSH
69252: LD_INT 1
69254: ARRAY
69255: PUSH
69256: LD_STRING r
69258: EQUAL
69259: PUSH
69260: LD_VAR 0 4
69264: PUSH
69265: LD_INT 1
69267: ARRAY
69268: PUSH
69269: LD_INT 4
69271: ARRAY
69272: PUSH
69273: LD_VAR 0 2
69277: EQUAL
69278: AND
69279: ST_TO_ADDR
// end ;
69280: LD_VAR 0 3
69284: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69285: LD_INT 0
69287: PPUSH
// SetDir ( unit , d ) ;
69288: LD_VAR 0 1
69292: PPUSH
69293: LD_VAR 0 4
69297: PPUSH
69298: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69302: LD_VAR 0 1
69306: PPUSH
69307: LD_VAR 0 2
69311: PPUSH
69312: LD_VAR 0 3
69316: PPUSH
69317: LD_VAR 0 5
69321: PPUSH
69322: CALL_OW 48
// end ;
69326: LD_VAR 0 6
69330: RET
// export function ToNaturalNumber ( number ) ; begin
69331: LD_INT 0
69333: PPUSH
// result := number div 1 ;
69334: LD_ADDR_VAR 0 2
69338: PUSH
69339: LD_VAR 0 1
69343: PUSH
69344: LD_INT 1
69346: DIV
69347: ST_TO_ADDR
// if number < 0 then
69348: LD_VAR 0 1
69352: PUSH
69353: LD_INT 0
69355: LESS
69356: IFFALSE 69366
// result := 0 ;
69358: LD_ADDR_VAR 0 2
69362: PUSH
69363: LD_INT 0
69365: ST_TO_ADDR
// end ;
69366: LD_VAR 0 2
69370: RET
// export function SortByClass ( units , class ) ; var un ; begin
69371: LD_INT 0
69373: PPUSH
69374: PPUSH
// if not units or not class then
69375: LD_VAR 0 1
69379: NOT
69380: PUSH
69381: LD_VAR 0 2
69385: NOT
69386: OR
69387: IFFALSE 69391
// exit ;
69389: GO 69486
// result := [ ] ;
69391: LD_ADDR_VAR 0 3
69395: PUSH
69396: EMPTY
69397: ST_TO_ADDR
// for un in units do
69398: LD_ADDR_VAR 0 4
69402: PUSH
69403: LD_VAR 0 1
69407: PUSH
69408: FOR_IN
69409: IFFALSE 69484
// if GetClass ( un ) = class then
69411: LD_VAR 0 4
69415: PPUSH
69416: CALL_OW 257
69420: PUSH
69421: LD_VAR 0 2
69425: EQUAL
69426: IFFALSE 69453
// result := Insert ( result , 1 , un ) else
69428: LD_ADDR_VAR 0 3
69432: PUSH
69433: LD_VAR 0 3
69437: PPUSH
69438: LD_INT 1
69440: PPUSH
69441: LD_VAR 0 4
69445: PPUSH
69446: CALL_OW 2
69450: ST_TO_ADDR
69451: GO 69482
// result := Replace ( result , result + 1 , un ) ;
69453: LD_ADDR_VAR 0 3
69457: PUSH
69458: LD_VAR 0 3
69462: PPUSH
69463: LD_VAR 0 3
69467: PUSH
69468: LD_INT 1
69470: PLUS
69471: PPUSH
69472: LD_VAR 0 4
69476: PPUSH
69477: CALL_OW 1
69481: ST_TO_ADDR
69482: GO 69408
69484: POP
69485: POP
// end ;
69486: LD_VAR 0 3
69490: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69491: LD_INT 0
69493: PPUSH
69494: PPUSH
69495: PPUSH
69496: PPUSH
69497: PPUSH
69498: PPUSH
69499: PPUSH
// result := [ ] ;
69500: LD_ADDR_VAR 0 4
69504: PUSH
69505: EMPTY
69506: ST_TO_ADDR
// if x - r < 0 then
69507: LD_VAR 0 1
69511: PUSH
69512: LD_VAR 0 3
69516: MINUS
69517: PUSH
69518: LD_INT 0
69520: LESS
69521: IFFALSE 69533
// min_x := 0 else
69523: LD_ADDR_VAR 0 8
69527: PUSH
69528: LD_INT 0
69530: ST_TO_ADDR
69531: GO 69549
// min_x := x - r ;
69533: LD_ADDR_VAR 0 8
69537: PUSH
69538: LD_VAR 0 1
69542: PUSH
69543: LD_VAR 0 3
69547: MINUS
69548: ST_TO_ADDR
// if y - r < 0 then
69549: LD_VAR 0 2
69553: PUSH
69554: LD_VAR 0 3
69558: MINUS
69559: PUSH
69560: LD_INT 0
69562: LESS
69563: IFFALSE 69575
// min_y := 0 else
69565: LD_ADDR_VAR 0 7
69569: PUSH
69570: LD_INT 0
69572: ST_TO_ADDR
69573: GO 69591
// min_y := y - r ;
69575: LD_ADDR_VAR 0 7
69579: PUSH
69580: LD_VAR 0 2
69584: PUSH
69585: LD_VAR 0 3
69589: MINUS
69590: ST_TO_ADDR
// max_x := x + r ;
69591: LD_ADDR_VAR 0 9
69595: PUSH
69596: LD_VAR 0 1
69600: PUSH
69601: LD_VAR 0 3
69605: PLUS
69606: ST_TO_ADDR
// max_y := y + r ;
69607: LD_ADDR_VAR 0 10
69611: PUSH
69612: LD_VAR 0 2
69616: PUSH
69617: LD_VAR 0 3
69621: PLUS
69622: ST_TO_ADDR
// for _x = min_x to max_x do
69623: LD_ADDR_VAR 0 5
69627: PUSH
69628: DOUBLE
69629: LD_VAR 0 8
69633: DEC
69634: ST_TO_ADDR
69635: LD_VAR 0 9
69639: PUSH
69640: FOR_TO
69641: IFFALSE 69742
// for _y = min_y to max_y do
69643: LD_ADDR_VAR 0 6
69647: PUSH
69648: DOUBLE
69649: LD_VAR 0 7
69653: DEC
69654: ST_TO_ADDR
69655: LD_VAR 0 10
69659: PUSH
69660: FOR_TO
69661: IFFALSE 69738
// begin if not ValidHex ( _x , _y ) then
69663: LD_VAR 0 5
69667: PPUSH
69668: LD_VAR 0 6
69672: PPUSH
69673: CALL_OW 488
69677: NOT
69678: IFFALSE 69682
// continue ;
69680: GO 69660
// if GetResourceTypeXY ( _x , _y ) then
69682: LD_VAR 0 5
69686: PPUSH
69687: LD_VAR 0 6
69691: PPUSH
69692: CALL_OW 283
69696: IFFALSE 69736
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69698: LD_ADDR_VAR 0 4
69702: PUSH
69703: LD_VAR 0 4
69707: PPUSH
69708: LD_VAR 0 4
69712: PUSH
69713: LD_INT 1
69715: PLUS
69716: PPUSH
69717: LD_VAR 0 5
69721: PUSH
69722: LD_VAR 0 6
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PPUSH
69731: CALL_OW 1
69735: ST_TO_ADDR
// end ;
69736: GO 69660
69738: POP
69739: POP
69740: GO 69640
69742: POP
69743: POP
// end ;
69744: LD_VAR 0 4
69748: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69749: LD_INT 0
69751: PPUSH
69752: PPUSH
69753: PPUSH
69754: PPUSH
69755: PPUSH
69756: PPUSH
69757: PPUSH
69758: PPUSH
// if not units then
69759: LD_VAR 0 1
69763: NOT
69764: IFFALSE 69768
// exit ;
69766: GO 70292
// result := UnitFilter ( units , [ f_ok ] ) ;
69768: LD_ADDR_VAR 0 3
69772: PUSH
69773: LD_VAR 0 1
69777: PPUSH
69778: LD_INT 50
69780: PUSH
69781: EMPTY
69782: LIST
69783: PPUSH
69784: CALL_OW 72
69788: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69789: LD_ADDR_VAR 0 8
69793: PUSH
69794: LD_VAR 0 1
69798: PUSH
69799: LD_INT 1
69801: ARRAY
69802: PPUSH
69803: CALL_OW 255
69807: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69808: LD_ADDR_VAR 0 10
69812: PUSH
69813: LD_INT 29
69815: PUSH
69816: LD_INT 91
69818: PUSH
69819: LD_INT 49
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: LIST
69826: ST_TO_ADDR
// if not result then
69827: LD_VAR 0 3
69831: NOT
69832: IFFALSE 69836
// exit ;
69834: GO 70292
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69836: LD_ADDR_VAR 0 5
69840: PUSH
69841: LD_INT 81
69843: PUSH
69844: LD_VAR 0 8
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PPUSH
69853: CALL_OW 69
69857: ST_TO_ADDR
// for i in result do
69858: LD_ADDR_VAR 0 4
69862: PUSH
69863: LD_VAR 0 3
69867: PUSH
69868: FOR_IN
69869: IFFALSE 70290
// begin tag := GetTag ( i ) + 1 ;
69871: LD_ADDR_VAR 0 9
69875: PUSH
69876: LD_VAR 0 4
69880: PPUSH
69881: CALL_OW 110
69885: PUSH
69886: LD_INT 1
69888: PLUS
69889: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69890: LD_ADDR_VAR 0 7
69894: PUSH
69895: LD_VAR 0 4
69899: PPUSH
69900: CALL_OW 250
69904: PPUSH
69905: LD_VAR 0 4
69909: PPUSH
69910: CALL_OW 251
69914: PPUSH
69915: LD_INT 6
69917: PPUSH
69918: CALL 69491 0 3
69922: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69923: LD_VAR 0 4
69927: PPUSH
69928: CALL_OW 247
69932: PUSH
69933: LD_INT 2
69935: EQUAL
69936: PUSH
69937: LD_VAR 0 7
69941: AND
69942: PUSH
69943: LD_VAR 0 4
69947: PPUSH
69948: CALL_OW 264
69952: PUSH
69953: LD_VAR 0 10
69957: IN
69958: NOT
69959: AND
69960: IFFALSE 69999
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69962: LD_VAR 0 4
69966: PPUSH
69967: LD_VAR 0 7
69971: PUSH
69972: LD_INT 1
69974: ARRAY
69975: PUSH
69976: LD_INT 1
69978: ARRAY
69979: PPUSH
69980: LD_VAR 0 7
69984: PUSH
69985: LD_INT 1
69987: ARRAY
69988: PUSH
69989: LD_INT 2
69991: ARRAY
69992: PPUSH
69993: CALL_OW 116
69997: GO 70288
// if path > tag then
69999: LD_VAR 0 2
70003: PUSH
70004: LD_VAR 0 9
70008: GREATER
70009: IFFALSE 70217
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70011: LD_ADDR_VAR 0 6
70015: PUSH
70016: LD_VAR 0 5
70020: PPUSH
70021: LD_INT 91
70023: PUSH
70024: LD_VAR 0 4
70028: PUSH
70029: LD_INT 8
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: LIST
70036: PPUSH
70037: CALL_OW 72
70041: ST_TO_ADDR
// if nearEnemy then
70042: LD_VAR 0 6
70046: IFFALSE 70115
// begin if GetWeapon ( i ) = ru_time_lapser then
70048: LD_VAR 0 4
70052: PPUSH
70053: CALL_OW 264
70057: PUSH
70058: LD_INT 49
70060: EQUAL
70061: IFFALSE 70089
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70063: LD_VAR 0 4
70067: PPUSH
70068: LD_VAR 0 6
70072: PPUSH
70073: LD_VAR 0 4
70077: PPUSH
70078: CALL_OW 74
70082: PPUSH
70083: CALL_OW 112
70087: GO 70113
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70089: LD_VAR 0 4
70093: PPUSH
70094: LD_VAR 0 6
70098: PPUSH
70099: LD_VAR 0 4
70103: PPUSH
70104: CALL_OW 74
70108: PPUSH
70109: CALL 71217 0 2
// end else
70113: GO 70215
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70115: LD_VAR 0 4
70119: PPUSH
70120: LD_VAR 0 2
70124: PUSH
70125: LD_VAR 0 9
70129: ARRAY
70130: PUSH
70131: LD_INT 1
70133: ARRAY
70134: PPUSH
70135: LD_VAR 0 2
70139: PUSH
70140: LD_VAR 0 9
70144: ARRAY
70145: PUSH
70146: LD_INT 2
70148: ARRAY
70149: PPUSH
70150: CALL_OW 297
70154: PUSH
70155: LD_INT 6
70157: GREATER
70158: IFFALSE 70201
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70160: LD_VAR 0 4
70164: PPUSH
70165: LD_VAR 0 2
70169: PUSH
70170: LD_VAR 0 9
70174: ARRAY
70175: PUSH
70176: LD_INT 1
70178: ARRAY
70179: PPUSH
70180: LD_VAR 0 2
70184: PUSH
70185: LD_VAR 0 9
70189: ARRAY
70190: PUSH
70191: LD_INT 2
70193: ARRAY
70194: PPUSH
70195: CALL_OW 114
70199: GO 70215
// SetTag ( i , tag ) ;
70201: LD_VAR 0 4
70205: PPUSH
70206: LD_VAR 0 9
70210: PPUSH
70211: CALL_OW 109
// end else
70215: GO 70288
// if enemy then
70217: LD_VAR 0 5
70221: IFFALSE 70288
// begin if GetWeapon ( i ) = ru_time_lapser then
70223: LD_VAR 0 4
70227: PPUSH
70228: CALL_OW 264
70232: PUSH
70233: LD_INT 49
70235: EQUAL
70236: IFFALSE 70264
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70238: LD_VAR 0 4
70242: PPUSH
70243: LD_VAR 0 5
70247: PPUSH
70248: LD_VAR 0 4
70252: PPUSH
70253: CALL_OW 74
70257: PPUSH
70258: CALL_OW 112
70262: GO 70288
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70264: LD_VAR 0 4
70268: PPUSH
70269: LD_VAR 0 5
70273: PPUSH
70274: LD_VAR 0 4
70278: PPUSH
70279: CALL_OW 74
70283: PPUSH
70284: CALL 71217 0 2
// end ; end ;
70288: GO 69868
70290: POP
70291: POP
// end ;
70292: LD_VAR 0 3
70296: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70297: LD_INT 0
70299: PPUSH
70300: PPUSH
70301: PPUSH
// if not unit or IsInUnit ( unit ) then
70302: LD_VAR 0 1
70306: NOT
70307: PUSH
70308: LD_VAR 0 1
70312: PPUSH
70313: CALL_OW 310
70317: OR
70318: IFFALSE 70322
// exit ;
70320: GO 70413
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70322: LD_ADDR_VAR 0 4
70326: PUSH
70327: LD_VAR 0 1
70331: PPUSH
70332: CALL_OW 250
70336: PPUSH
70337: LD_VAR 0 2
70341: PPUSH
70342: LD_INT 1
70344: PPUSH
70345: CALL_OW 272
70349: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70350: LD_ADDR_VAR 0 5
70354: PUSH
70355: LD_VAR 0 1
70359: PPUSH
70360: CALL_OW 251
70364: PPUSH
70365: LD_VAR 0 2
70369: PPUSH
70370: LD_INT 1
70372: PPUSH
70373: CALL_OW 273
70377: ST_TO_ADDR
// if ValidHex ( x , y ) then
70378: LD_VAR 0 4
70382: PPUSH
70383: LD_VAR 0 5
70387: PPUSH
70388: CALL_OW 488
70392: IFFALSE 70413
// ComTurnXY ( unit , x , y ) ;
70394: LD_VAR 0 1
70398: PPUSH
70399: LD_VAR 0 4
70403: PPUSH
70404: LD_VAR 0 5
70408: PPUSH
70409: CALL_OW 118
// end ;
70413: LD_VAR 0 3
70417: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70418: LD_INT 0
70420: PPUSH
70421: PPUSH
// result := false ;
70422: LD_ADDR_VAR 0 3
70426: PUSH
70427: LD_INT 0
70429: ST_TO_ADDR
// if not units then
70430: LD_VAR 0 2
70434: NOT
70435: IFFALSE 70439
// exit ;
70437: GO 70484
// for i in units do
70439: LD_ADDR_VAR 0 4
70443: PUSH
70444: LD_VAR 0 2
70448: PUSH
70449: FOR_IN
70450: IFFALSE 70482
// if See ( side , i ) then
70452: LD_VAR 0 1
70456: PPUSH
70457: LD_VAR 0 4
70461: PPUSH
70462: CALL_OW 292
70466: IFFALSE 70480
// begin result := true ;
70468: LD_ADDR_VAR 0 3
70472: PUSH
70473: LD_INT 1
70475: ST_TO_ADDR
// exit ;
70476: POP
70477: POP
70478: GO 70484
// end ;
70480: GO 70449
70482: POP
70483: POP
// end ;
70484: LD_VAR 0 3
70488: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70489: LD_INT 0
70491: PPUSH
70492: PPUSH
70493: PPUSH
70494: PPUSH
// if not unit or not points then
70495: LD_VAR 0 1
70499: NOT
70500: PUSH
70501: LD_VAR 0 2
70505: NOT
70506: OR
70507: IFFALSE 70511
// exit ;
70509: GO 70601
// dist := 99999 ;
70511: LD_ADDR_VAR 0 5
70515: PUSH
70516: LD_INT 99999
70518: ST_TO_ADDR
// for i in points do
70519: LD_ADDR_VAR 0 4
70523: PUSH
70524: LD_VAR 0 2
70528: PUSH
70529: FOR_IN
70530: IFFALSE 70599
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70532: LD_ADDR_VAR 0 6
70536: PUSH
70537: LD_VAR 0 1
70541: PPUSH
70542: LD_VAR 0 4
70546: PUSH
70547: LD_INT 1
70549: ARRAY
70550: PPUSH
70551: LD_VAR 0 4
70555: PUSH
70556: LD_INT 2
70558: ARRAY
70559: PPUSH
70560: CALL_OW 297
70564: ST_TO_ADDR
// if tmpDist < dist then
70565: LD_VAR 0 6
70569: PUSH
70570: LD_VAR 0 5
70574: LESS
70575: IFFALSE 70597
// begin result := i ;
70577: LD_ADDR_VAR 0 3
70581: PUSH
70582: LD_VAR 0 4
70586: ST_TO_ADDR
// dist := tmpDist ;
70587: LD_ADDR_VAR 0 5
70591: PUSH
70592: LD_VAR 0 6
70596: ST_TO_ADDR
// end ; end ;
70597: GO 70529
70599: POP
70600: POP
// end ;
70601: LD_VAR 0 3
70605: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70606: LD_INT 0
70608: PPUSH
// uc_side := side ;
70609: LD_ADDR_OWVAR 20
70613: PUSH
70614: LD_VAR 0 1
70618: ST_TO_ADDR
// uc_nation := 3 ;
70619: LD_ADDR_OWVAR 21
70623: PUSH
70624: LD_INT 3
70626: ST_TO_ADDR
// vc_chassis := 25 ;
70627: LD_ADDR_OWVAR 37
70631: PUSH
70632: LD_INT 25
70634: ST_TO_ADDR
// vc_engine := engine_siberite ;
70635: LD_ADDR_OWVAR 39
70639: PUSH
70640: LD_INT 3
70642: ST_TO_ADDR
// vc_control := control_computer ;
70643: LD_ADDR_OWVAR 38
70647: PUSH
70648: LD_INT 3
70650: ST_TO_ADDR
// vc_weapon := 59 ;
70651: LD_ADDR_OWVAR 40
70655: PUSH
70656: LD_INT 59
70658: ST_TO_ADDR
// result := CreateVehicle ;
70659: LD_ADDR_VAR 0 5
70663: PUSH
70664: CALL_OW 45
70668: ST_TO_ADDR
// SetDir ( result , d ) ;
70669: LD_VAR 0 5
70673: PPUSH
70674: LD_VAR 0 4
70678: PPUSH
70679: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70683: LD_VAR 0 5
70687: PPUSH
70688: LD_VAR 0 2
70692: PPUSH
70693: LD_VAR 0 3
70697: PPUSH
70698: LD_INT 0
70700: PPUSH
70701: CALL_OW 48
// end ;
70705: LD_VAR 0 5
70709: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70710: LD_INT 0
70712: PPUSH
70713: PPUSH
70714: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70715: LD_ADDR_VAR 0 2
70719: PUSH
70720: LD_INT 0
70722: PUSH
70723: LD_INT 0
70725: PUSH
70726: LD_INT 0
70728: PUSH
70729: LD_INT 0
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70738: LD_VAR 0 1
70742: NOT
70743: PUSH
70744: LD_VAR 0 1
70748: PPUSH
70749: CALL_OW 264
70753: PUSH
70754: LD_INT 12
70756: PUSH
70757: LD_INT 51
70759: PUSH
70760: LD_INT 32
70762: PUSH
70763: LD_INT 89
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: IN
70772: NOT
70773: OR
70774: IFFALSE 70778
// exit ;
70776: GO 70876
// for i := 1 to 3 do
70778: LD_ADDR_VAR 0 3
70782: PUSH
70783: DOUBLE
70784: LD_INT 1
70786: DEC
70787: ST_TO_ADDR
70788: LD_INT 3
70790: PUSH
70791: FOR_TO
70792: IFFALSE 70874
// begin tmp := GetCargo ( cargo , i ) ;
70794: LD_ADDR_VAR 0 4
70798: PUSH
70799: LD_VAR 0 1
70803: PPUSH
70804: LD_VAR 0 3
70808: PPUSH
70809: CALL_OW 289
70813: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70814: LD_ADDR_VAR 0 2
70818: PUSH
70819: LD_VAR 0 2
70823: PPUSH
70824: LD_VAR 0 3
70828: PPUSH
70829: LD_VAR 0 4
70833: PPUSH
70834: CALL_OW 1
70838: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70839: LD_ADDR_VAR 0 2
70843: PUSH
70844: LD_VAR 0 2
70848: PPUSH
70849: LD_INT 4
70851: PPUSH
70852: LD_VAR 0 2
70856: PUSH
70857: LD_INT 4
70859: ARRAY
70860: PUSH
70861: LD_VAR 0 4
70865: PLUS
70866: PPUSH
70867: CALL_OW 1
70871: ST_TO_ADDR
// end ;
70872: GO 70791
70874: POP
70875: POP
// end ;
70876: LD_VAR 0 2
70880: RET
// export function Length ( array ) ; begin
70881: LD_INT 0
70883: PPUSH
// result := array + 0 ;
70884: LD_ADDR_VAR 0 2
70888: PUSH
70889: LD_VAR 0 1
70893: PUSH
70894: LD_INT 0
70896: PLUS
70897: ST_TO_ADDR
// end ;
70898: LD_VAR 0 2
70902: RET
// export function PrepareArray ( array ) ; begin
70903: LD_INT 0
70905: PPUSH
// result := array diff 0 ;
70906: LD_ADDR_VAR 0 2
70910: PUSH
70911: LD_VAR 0 1
70915: PUSH
70916: LD_INT 0
70918: DIFF
70919: ST_TO_ADDR
// if not result [ 1 ] then
70920: LD_VAR 0 2
70924: PUSH
70925: LD_INT 1
70927: ARRAY
70928: NOT
70929: IFFALSE 70949
// result := Delete ( result , 1 ) ;
70931: LD_ADDR_VAR 0 2
70935: PUSH
70936: LD_VAR 0 2
70940: PPUSH
70941: LD_INT 1
70943: PPUSH
70944: CALL_OW 3
70948: ST_TO_ADDR
// end ;
70949: LD_VAR 0 2
70953: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70954: LD_INT 0
70956: PPUSH
70957: PPUSH
70958: PPUSH
70959: PPUSH
// sibRocketRange := 25 ;
70960: LD_ADDR_VAR 0 6
70964: PUSH
70965: LD_INT 25
70967: ST_TO_ADDR
// result := false ;
70968: LD_ADDR_VAR 0 4
70972: PUSH
70973: LD_INT 0
70975: ST_TO_ADDR
// for i := 0 to 5 do
70976: LD_ADDR_VAR 0 5
70980: PUSH
70981: DOUBLE
70982: LD_INT 0
70984: DEC
70985: ST_TO_ADDR
70986: LD_INT 5
70988: PUSH
70989: FOR_TO
70990: IFFALSE 71057
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70992: LD_VAR 0 1
70996: PPUSH
70997: LD_VAR 0 5
71001: PPUSH
71002: LD_VAR 0 6
71006: PPUSH
71007: CALL_OW 272
71011: PPUSH
71012: LD_VAR 0 2
71016: PPUSH
71017: LD_VAR 0 5
71021: PPUSH
71022: LD_VAR 0 6
71026: PPUSH
71027: CALL_OW 273
71031: PPUSH
71032: LD_VAR 0 3
71036: PPUSH
71037: CALL_OW 309
71041: IFFALSE 71055
// begin result := true ;
71043: LD_ADDR_VAR 0 4
71047: PUSH
71048: LD_INT 1
71050: ST_TO_ADDR
// exit ;
71051: POP
71052: POP
71053: GO 71059
// end ;
71055: GO 70989
71057: POP
71058: POP
// end ;
71059: LD_VAR 0 4
71063: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71064: LD_INT 0
71066: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71067: LD_VAR 0 1
71071: PPUSH
71072: LD_VAR 0 2
71076: PPUSH
71077: LD_INT 0
71079: PPUSH
71080: LD_INT 0
71082: PPUSH
71083: LD_INT 1
71085: PPUSH
71086: LD_INT 0
71088: PPUSH
71089: CALL_OW 587
// end ;
71093: LD_VAR 0 3
71097: RET
// export function CenterOnNow ( unit ) ; begin
71098: LD_INT 0
71100: PPUSH
// result := IsInUnit ( unit ) ;
71101: LD_ADDR_VAR 0 2
71105: PUSH
71106: LD_VAR 0 1
71110: PPUSH
71111: CALL_OW 310
71115: ST_TO_ADDR
// if not result then
71116: LD_VAR 0 2
71120: NOT
71121: IFFALSE 71133
// result := unit ;
71123: LD_ADDR_VAR 0 2
71127: PUSH
71128: LD_VAR 0 1
71132: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71133: LD_VAR 0 1
71137: PPUSH
71138: CALL_OW 87
// end ;
71142: LD_VAR 0 2
71146: RET
// export function ComMoveHex ( unit , hex ) ; begin
71147: LD_INT 0
71149: PPUSH
// if not hex then
71150: LD_VAR 0 2
71154: NOT
71155: IFFALSE 71159
// exit ;
71157: GO 71212
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71159: LD_VAR 0 2
71163: PUSH
71164: LD_INT 1
71166: ARRAY
71167: PPUSH
71168: LD_VAR 0 2
71172: PUSH
71173: LD_INT 2
71175: ARRAY
71176: PPUSH
71177: CALL_OW 428
71181: IFFALSE 71185
// exit ;
71183: GO 71212
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71185: LD_VAR 0 1
71189: PPUSH
71190: LD_VAR 0 2
71194: PUSH
71195: LD_INT 1
71197: ARRAY
71198: PPUSH
71199: LD_VAR 0 2
71203: PUSH
71204: LD_INT 2
71206: ARRAY
71207: PPUSH
71208: CALL_OW 111
// end ;
71212: LD_VAR 0 3
71216: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71217: LD_INT 0
71219: PPUSH
71220: PPUSH
71221: PPUSH
// if not unit or not enemy then
71222: LD_VAR 0 1
71226: NOT
71227: PUSH
71228: LD_VAR 0 2
71232: NOT
71233: OR
71234: IFFALSE 71238
// exit ;
71236: GO 71362
// x := GetX ( enemy ) ;
71238: LD_ADDR_VAR 0 4
71242: PUSH
71243: LD_VAR 0 2
71247: PPUSH
71248: CALL_OW 250
71252: ST_TO_ADDR
// y := GetY ( enemy ) ;
71253: LD_ADDR_VAR 0 5
71257: PUSH
71258: LD_VAR 0 2
71262: PPUSH
71263: CALL_OW 251
71267: ST_TO_ADDR
// if ValidHex ( x , y ) then
71268: LD_VAR 0 4
71272: PPUSH
71273: LD_VAR 0 5
71277: PPUSH
71278: CALL_OW 488
71282: IFFALSE 71362
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
71284: LD_VAR 0 2
71288: PPUSH
71289: CALL_OW 247
71293: PUSH
71294: LD_INT 3
71296: PUSH
71297: LD_INT 2
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: IN
71304: PUSH
71305: LD_VAR 0 1
71309: PPUSH
71310: CALL_OW 255
71314: PPUSH
71315: LD_VAR 0 2
71319: PPUSH
71320: CALL_OW 292
71324: AND
71325: IFFALSE 71343
// ComAttackUnit ( unit , enemy ) else
71327: LD_VAR 0 1
71331: PPUSH
71332: LD_VAR 0 2
71336: PPUSH
71337: CALL_OW 115
71341: GO 71362
// ComAgressiveMove ( unit , x , y ) ;
71343: LD_VAR 0 1
71347: PPUSH
71348: LD_VAR 0 4
71352: PPUSH
71353: LD_VAR 0 5
71357: PPUSH
71358: CALL_OW 114
// end ;
71362: LD_VAR 0 3
71366: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
71367: LD_INT 0
71369: PPUSH
71370: PPUSH
71371: PPUSH
// list := AreaToList ( area , 0 ) ;
71372: LD_ADDR_VAR 0 5
71376: PUSH
71377: LD_VAR 0 1
71381: PPUSH
71382: LD_INT 0
71384: PPUSH
71385: CALL_OW 517
71389: ST_TO_ADDR
// if not list then
71390: LD_VAR 0 5
71394: NOT
71395: IFFALSE 71399
// exit ;
71397: GO 71529
// if all then
71399: LD_VAR 0 2
71403: IFFALSE 71491
// begin for i := 1 to list [ 1 ] do
71405: LD_ADDR_VAR 0 4
71409: PUSH
71410: DOUBLE
71411: LD_INT 1
71413: DEC
71414: ST_TO_ADDR
71415: LD_VAR 0 5
71419: PUSH
71420: LD_INT 1
71422: ARRAY
71423: PUSH
71424: FOR_TO
71425: IFFALSE 71487
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
71427: LD_ADDR_VAR 0 3
71431: PUSH
71432: LD_VAR 0 3
71436: PPUSH
71437: LD_VAR 0 3
71441: PUSH
71442: LD_INT 1
71444: PLUS
71445: PPUSH
71446: LD_VAR 0 5
71450: PUSH
71451: LD_INT 1
71453: ARRAY
71454: PUSH
71455: LD_VAR 0 4
71459: ARRAY
71460: PUSH
71461: LD_VAR 0 5
71465: PUSH
71466: LD_INT 2
71468: ARRAY
71469: PUSH
71470: LD_VAR 0 4
71474: ARRAY
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PPUSH
71480: CALL_OW 1
71484: ST_TO_ADDR
71485: GO 71424
71487: POP
71488: POP
// exit ;
71489: GO 71529
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
71491: LD_ADDR_VAR 0 3
71495: PUSH
71496: LD_VAR 0 5
71500: PUSH
71501: LD_INT 1
71503: ARRAY
71504: PUSH
71505: LD_INT 1
71507: ARRAY
71508: PUSH
71509: LD_VAR 0 5
71513: PUSH
71514: LD_INT 2
71516: ARRAY
71517: PUSH
71518: LD_INT 1
71520: ARRAY
71521: PUSH
71522: EMPTY
71523: LIST
71524: LIST
71525: PUSH
71526: EMPTY
71527: LIST
71528: ST_TO_ADDR
// end ;
71529: LD_VAR 0 3
71533: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
71534: LD_INT 0
71536: PPUSH
71537: PPUSH
// list := AreaToList ( area , 0 ) ;
71538: LD_ADDR_VAR 0 4
71542: PUSH
71543: LD_VAR 0 1
71547: PPUSH
71548: LD_INT 0
71550: PPUSH
71551: CALL_OW 517
71555: ST_TO_ADDR
// if not list then
71556: LD_VAR 0 4
71560: NOT
71561: IFFALSE 71565
// exit ;
71563: GO 71606
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
71565: LD_ADDR_VAR 0 3
71569: PUSH
71570: LD_VAR 0 4
71574: PUSH
71575: LD_INT 1
71577: ARRAY
71578: PUSH
71579: LD_INT 1
71581: ARRAY
71582: PUSH
71583: LD_VAR 0 4
71587: PUSH
71588: LD_INT 2
71590: ARRAY
71591: PUSH
71592: LD_INT 1
71594: ARRAY
71595: PUSH
71596: LD_VAR 0 2
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: LIST
71605: ST_TO_ADDR
// end ;
71606: LD_VAR 0 3
71610: RET
// export function First ( array ) ; begin
71611: LD_INT 0
71613: PPUSH
// if not array then
71614: LD_VAR 0 1
71618: NOT
71619: IFFALSE 71623
// exit ;
71621: GO 71637
// result := array [ 1 ] ;
71623: LD_ADDR_VAR 0 2
71627: PUSH
71628: LD_VAR 0 1
71632: PUSH
71633: LD_INT 1
71635: ARRAY
71636: ST_TO_ADDR
// end ;
71637: LD_VAR 0 2
71641: RET
// export function Last ( array ) ; begin
71642: LD_INT 0
71644: PPUSH
// if not array then
71645: LD_VAR 0 1
71649: NOT
71650: IFFALSE 71654
// exit ;
71652: GO 71670
// result := array [ array ] ;
71654: LD_ADDR_VAR 0 2
71658: PUSH
71659: LD_VAR 0 1
71663: PUSH
71664: LD_VAR 0 1
71668: ARRAY
71669: ST_TO_ADDR
// end ; end_of_file end_of_file
71670: LD_VAR 0 2
71674: RET
// export globalGameSaveCounter ; every 0 0$1 do
71675: GO 71677
71677: DISABLE
// begin enable ;
71678: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
71679: LD_STRING updateTimer(
71681: PUSH
71682: LD_OWVAR 1
71686: STR
71687: PUSH
71688: LD_STRING );
71690: STR
71691: PPUSH
71692: CALL_OW 559
// end ;
71696: END
// every 0 0$1 do
71697: GO 71699
71699: DISABLE
// begin globalGameSaveCounter := 0 ;
71700: LD_ADDR_EXP 63
71704: PUSH
71705: LD_INT 0
71707: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
71708: LD_STRING setGameSaveCounter(0)
71710: PPUSH
71711: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
71715: LD_STRING initStreamRollete();
71717: PPUSH
71718: CALL_OW 559
// InitStreamMode ;
71722: CALL 73048 0 0
// DefineStreamItems ( false ) ;
71726: LD_INT 0
71728: PPUSH
71729: CALL 73512 0 1
// end ;
71733: END
// export function SOS_MapStart ( ) ; begin
71734: LD_INT 0
71736: PPUSH
// if streamModeActive then
71737: LD_EXP 64
71741: IFFALSE 71750
// DefineStreamItems ( true ) ;
71743: LD_INT 1
71745: PPUSH
71746: CALL 73512 0 1
// UpdateLuaVariables ( ) ;
71750: CALL 71767 0 0
// UpdateFactoryWaypoints ( ) ;
71754: CALL 86381 0 0
// UpdateWarehouseGatheringPoints ( ) ;
71758: CALL 86638 0 0
// end ;
71762: LD_VAR 0 1
71766: RET
// function UpdateLuaVariables ( ) ; begin
71767: LD_INT 0
71769: PPUSH
// if globalGameSaveCounter then
71770: LD_EXP 63
71774: IFFALSE 71808
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
71776: LD_ADDR_EXP 63
71780: PUSH
71781: LD_EXP 63
71785: PPUSH
71786: CALL 68506 0 1
71790: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
71791: LD_STRING setGameSaveCounter(
71793: PUSH
71794: LD_EXP 63
71798: STR
71799: PUSH
71800: LD_STRING )
71802: STR
71803: PPUSH
71804: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
71808: LD_STRING setGameDifficulty(
71810: PUSH
71811: LD_OWVAR 67
71815: STR
71816: PUSH
71817: LD_STRING )
71819: STR
71820: PPUSH
71821: CALL_OW 559
// end ;
71825: LD_VAR 0 1
71829: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
71830: LD_INT 0
71832: PPUSH
// if p2 = stream_mode then
71833: LD_VAR 0 2
71837: PUSH
71838: LD_INT 100
71840: EQUAL
71841: IFFALSE 72844
// begin if not StreamModeActive then
71843: LD_EXP 64
71847: NOT
71848: IFFALSE 71858
// StreamModeActive := true ;
71850: LD_ADDR_EXP 64
71854: PUSH
71855: LD_INT 1
71857: ST_TO_ADDR
// if p3 = 0 then
71858: LD_VAR 0 3
71862: PUSH
71863: LD_INT 0
71865: EQUAL
71866: IFFALSE 71872
// InitStreamMode ;
71868: CALL 73048 0 0
// if p3 = 1 then
71872: LD_VAR 0 3
71876: PUSH
71877: LD_INT 1
71879: EQUAL
71880: IFFALSE 71890
// sRocket := true ;
71882: LD_ADDR_EXP 69
71886: PUSH
71887: LD_INT 1
71889: ST_TO_ADDR
// if p3 = 2 then
71890: LD_VAR 0 3
71894: PUSH
71895: LD_INT 2
71897: EQUAL
71898: IFFALSE 71908
// sSpeed := true ;
71900: LD_ADDR_EXP 68
71904: PUSH
71905: LD_INT 1
71907: ST_TO_ADDR
// if p3 = 3 then
71908: LD_VAR 0 3
71912: PUSH
71913: LD_INT 3
71915: EQUAL
71916: IFFALSE 71926
// sEngine := true ;
71918: LD_ADDR_EXP 70
71922: PUSH
71923: LD_INT 1
71925: ST_TO_ADDR
// if p3 = 4 then
71926: LD_VAR 0 3
71930: PUSH
71931: LD_INT 4
71933: EQUAL
71934: IFFALSE 71944
// sSpec := true ;
71936: LD_ADDR_EXP 67
71940: PUSH
71941: LD_INT 1
71943: ST_TO_ADDR
// if p3 = 5 then
71944: LD_VAR 0 3
71948: PUSH
71949: LD_INT 5
71951: EQUAL
71952: IFFALSE 71962
// sLevel := true ;
71954: LD_ADDR_EXP 71
71958: PUSH
71959: LD_INT 1
71961: ST_TO_ADDR
// if p3 = 6 then
71962: LD_VAR 0 3
71966: PUSH
71967: LD_INT 6
71969: EQUAL
71970: IFFALSE 71980
// sArmoury := true ;
71972: LD_ADDR_EXP 72
71976: PUSH
71977: LD_INT 1
71979: ST_TO_ADDR
// if p3 = 7 then
71980: LD_VAR 0 3
71984: PUSH
71985: LD_INT 7
71987: EQUAL
71988: IFFALSE 71998
// sRadar := true ;
71990: LD_ADDR_EXP 73
71994: PUSH
71995: LD_INT 1
71997: ST_TO_ADDR
// if p3 = 8 then
71998: LD_VAR 0 3
72002: PUSH
72003: LD_INT 8
72005: EQUAL
72006: IFFALSE 72016
// sBunker := true ;
72008: LD_ADDR_EXP 74
72012: PUSH
72013: LD_INT 1
72015: ST_TO_ADDR
// if p3 = 9 then
72016: LD_VAR 0 3
72020: PUSH
72021: LD_INT 9
72023: EQUAL
72024: IFFALSE 72034
// sHack := true ;
72026: LD_ADDR_EXP 75
72030: PUSH
72031: LD_INT 1
72033: ST_TO_ADDR
// if p3 = 10 then
72034: LD_VAR 0 3
72038: PUSH
72039: LD_INT 10
72041: EQUAL
72042: IFFALSE 72052
// sFire := true ;
72044: LD_ADDR_EXP 76
72048: PUSH
72049: LD_INT 1
72051: ST_TO_ADDR
// if p3 = 11 then
72052: LD_VAR 0 3
72056: PUSH
72057: LD_INT 11
72059: EQUAL
72060: IFFALSE 72070
// sRefresh := true ;
72062: LD_ADDR_EXP 77
72066: PUSH
72067: LD_INT 1
72069: ST_TO_ADDR
// if p3 = 12 then
72070: LD_VAR 0 3
72074: PUSH
72075: LD_INT 12
72077: EQUAL
72078: IFFALSE 72088
// sExp := true ;
72080: LD_ADDR_EXP 78
72084: PUSH
72085: LD_INT 1
72087: ST_TO_ADDR
// if p3 = 13 then
72088: LD_VAR 0 3
72092: PUSH
72093: LD_INT 13
72095: EQUAL
72096: IFFALSE 72106
// sDepot := true ;
72098: LD_ADDR_EXP 79
72102: PUSH
72103: LD_INT 1
72105: ST_TO_ADDR
// if p3 = 14 then
72106: LD_VAR 0 3
72110: PUSH
72111: LD_INT 14
72113: EQUAL
72114: IFFALSE 72124
// sFlag := true ;
72116: LD_ADDR_EXP 80
72120: PUSH
72121: LD_INT 1
72123: ST_TO_ADDR
// if p3 = 15 then
72124: LD_VAR 0 3
72128: PUSH
72129: LD_INT 15
72131: EQUAL
72132: IFFALSE 72142
// sKamikadze := true ;
72134: LD_ADDR_EXP 88
72138: PUSH
72139: LD_INT 1
72141: ST_TO_ADDR
// if p3 = 16 then
72142: LD_VAR 0 3
72146: PUSH
72147: LD_INT 16
72149: EQUAL
72150: IFFALSE 72160
// sTroll := true ;
72152: LD_ADDR_EXP 89
72156: PUSH
72157: LD_INT 1
72159: ST_TO_ADDR
// if p3 = 17 then
72160: LD_VAR 0 3
72164: PUSH
72165: LD_INT 17
72167: EQUAL
72168: IFFALSE 72178
// sSlow := true ;
72170: LD_ADDR_EXP 90
72174: PUSH
72175: LD_INT 1
72177: ST_TO_ADDR
// if p3 = 18 then
72178: LD_VAR 0 3
72182: PUSH
72183: LD_INT 18
72185: EQUAL
72186: IFFALSE 72196
// sLack := true ;
72188: LD_ADDR_EXP 91
72192: PUSH
72193: LD_INT 1
72195: ST_TO_ADDR
// if p3 = 19 then
72196: LD_VAR 0 3
72200: PUSH
72201: LD_INT 19
72203: EQUAL
72204: IFFALSE 72214
// sTank := true ;
72206: LD_ADDR_EXP 93
72210: PUSH
72211: LD_INT 1
72213: ST_TO_ADDR
// if p3 = 20 then
72214: LD_VAR 0 3
72218: PUSH
72219: LD_INT 20
72221: EQUAL
72222: IFFALSE 72232
// sRemote := true ;
72224: LD_ADDR_EXP 94
72228: PUSH
72229: LD_INT 1
72231: ST_TO_ADDR
// if p3 = 21 then
72232: LD_VAR 0 3
72236: PUSH
72237: LD_INT 21
72239: EQUAL
72240: IFFALSE 72250
// sPowell := true ;
72242: LD_ADDR_EXP 95
72246: PUSH
72247: LD_INT 1
72249: ST_TO_ADDR
// if p3 = 22 then
72250: LD_VAR 0 3
72254: PUSH
72255: LD_INT 22
72257: EQUAL
72258: IFFALSE 72268
// sTeleport := true ;
72260: LD_ADDR_EXP 98
72264: PUSH
72265: LD_INT 1
72267: ST_TO_ADDR
// if p3 = 23 then
72268: LD_VAR 0 3
72272: PUSH
72273: LD_INT 23
72275: EQUAL
72276: IFFALSE 72286
// sOilTower := true ;
72278: LD_ADDR_EXP 100
72282: PUSH
72283: LD_INT 1
72285: ST_TO_ADDR
// if p3 = 24 then
72286: LD_VAR 0 3
72290: PUSH
72291: LD_INT 24
72293: EQUAL
72294: IFFALSE 72304
// sShovel := true ;
72296: LD_ADDR_EXP 101
72300: PUSH
72301: LD_INT 1
72303: ST_TO_ADDR
// if p3 = 25 then
72304: LD_VAR 0 3
72308: PUSH
72309: LD_INT 25
72311: EQUAL
72312: IFFALSE 72322
// sSheik := true ;
72314: LD_ADDR_EXP 102
72318: PUSH
72319: LD_INT 1
72321: ST_TO_ADDR
// if p3 = 26 then
72322: LD_VAR 0 3
72326: PUSH
72327: LD_INT 26
72329: EQUAL
72330: IFFALSE 72340
// sEarthquake := true ;
72332: LD_ADDR_EXP 104
72336: PUSH
72337: LD_INT 1
72339: ST_TO_ADDR
// if p3 = 27 then
72340: LD_VAR 0 3
72344: PUSH
72345: LD_INT 27
72347: EQUAL
72348: IFFALSE 72358
// sAI := true ;
72350: LD_ADDR_EXP 105
72354: PUSH
72355: LD_INT 1
72357: ST_TO_ADDR
// if p3 = 28 then
72358: LD_VAR 0 3
72362: PUSH
72363: LD_INT 28
72365: EQUAL
72366: IFFALSE 72376
// sCargo := true ;
72368: LD_ADDR_EXP 108
72372: PUSH
72373: LD_INT 1
72375: ST_TO_ADDR
// if p3 = 29 then
72376: LD_VAR 0 3
72380: PUSH
72381: LD_INT 29
72383: EQUAL
72384: IFFALSE 72394
// sDLaser := true ;
72386: LD_ADDR_EXP 109
72390: PUSH
72391: LD_INT 1
72393: ST_TO_ADDR
// if p3 = 30 then
72394: LD_VAR 0 3
72398: PUSH
72399: LD_INT 30
72401: EQUAL
72402: IFFALSE 72412
// sExchange := true ;
72404: LD_ADDR_EXP 110
72408: PUSH
72409: LD_INT 1
72411: ST_TO_ADDR
// if p3 = 31 then
72412: LD_VAR 0 3
72416: PUSH
72417: LD_INT 31
72419: EQUAL
72420: IFFALSE 72430
// sFac := true ;
72422: LD_ADDR_EXP 111
72426: PUSH
72427: LD_INT 1
72429: ST_TO_ADDR
// if p3 = 32 then
72430: LD_VAR 0 3
72434: PUSH
72435: LD_INT 32
72437: EQUAL
72438: IFFALSE 72448
// sPower := true ;
72440: LD_ADDR_EXP 112
72444: PUSH
72445: LD_INT 1
72447: ST_TO_ADDR
// if p3 = 33 then
72448: LD_VAR 0 3
72452: PUSH
72453: LD_INT 33
72455: EQUAL
72456: IFFALSE 72466
// sRandom := true ;
72458: LD_ADDR_EXP 113
72462: PUSH
72463: LD_INT 1
72465: ST_TO_ADDR
// if p3 = 34 then
72466: LD_VAR 0 3
72470: PUSH
72471: LD_INT 34
72473: EQUAL
72474: IFFALSE 72484
// sShield := true ;
72476: LD_ADDR_EXP 114
72480: PUSH
72481: LD_INT 1
72483: ST_TO_ADDR
// if p3 = 35 then
72484: LD_VAR 0 3
72488: PUSH
72489: LD_INT 35
72491: EQUAL
72492: IFFALSE 72502
// sTime := true ;
72494: LD_ADDR_EXP 115
72498: PUSH
72499: LD_INT 1
72501: ST_TO_ADDR
// if p3 = 36 then
72502: LD_VAR 0 3
72506: PUSH
72507: LD_INT 36
72509: EQUAL
72510: IFFALSE 72520
// sTools := true ;
72512: LD_ADDR_EXP 116
72516: PUSH
72517: LD_INT 1
72519: ST_TO_ADDR
// if p3 = 101 then
72520: LD_VAR 0 3
72524: PUSH
72525: LD_INT 101
72527: EQUAL
72528: IFFALSE 72538
// sSold := true ;
72530: LD_ADDR_EXP 81
72534: PUSH
72535: LD_INT 1
72537: ST_TO_ADDR
// if p3 = 102 then
72538: LD_VAR 0 3
72542: PUSH
72543: LD_INT 102
72545: EQUAL
72546: IFFALSE 72556
// sDiff := true ;
72548: LD_ADDR_EXP 82
72552: PUSH
72553: LD_INT 1
72555: ST_TO_ADDR
// if p3 = 103 then
72556: LD_VAR 0 3
72560: PUSH
72561: LD_INT 103
72563: EQUAL
72564: IFFALSE 72574
// sFog := true ;
72566: LD_ADDR_EXP 85
72570: PUSH
72571: LD_INT 1
72573: ST_TO_ADDR
// if p3 = 104 then
72574: LD_VAR 0 3
72578: PUSH
72579: LD_INT 104
72581: EQUAL
72582: IFFALSE 72592
// sReset := true ;
72584: LD_ADDR_EXP 86
72588: PUSH
72589: LD_INT 1
72591: ST_TO_ADDR
// if p3 = 105 then
72592: LD_VAR 0 3
72596: PUSH
72597: LD_INT 105
72599: EQUAL
72600: IFFALSE 72610
// sSun := true ;
72602: LD_ADDR_EXP 87
72606: PUSH
72607: LD_INT 1
72609: ST_TO_ADDR
// if p3 = 106 then
72610: LD_VAR 0 3
72614: PUSH
72615: LD_INT 106
72617: EQUAL
72618: IFFALSE 72628
// sTiger := true ;
72620: LD_ADDR_EXP 83
72624: PUSH
72625: LD_INT 1
72627: ST_TO_ADDR
// if p3 = 107 then
72628: LD_VAR 0 3
72632: PUSH
72633: LD_INT 107
72635: EQUAL
72636: IFFALSE 72646
// sBomb := true ;
72638: LD_ADDR_EXP 84
72642: PUSH
72643: LD_INT 1
72645: ST_TO_ADDR
// if p3 = 108 then
72646: LD_VAR 0 3
72650: PUSH
72651: LD_INT 108
72653: EQUAL
72654: IFFALSE 72664
// sWound := true ;
72656: LD_ADDR_EXP 92
72660: PUSH
72661: LD_INT 1
72663: ST_TO_ADDR
// if p3 = 109 then
72664: LD_VAR 0 3
72668: PUSH
72669: LD_INT 109
72671: EQUAL
72672: IFFALSE 72682
// sBetray := true ;
72674: LD_ADDR_EXP 96
72678: PUSH
72679: LD_INT 1
72681: ST_TO_ADDR
// if p3 = 110 then
72682: LD_VAR 0 3
72686: PUSH
72687: LD_INT 110
72689: EQUAL
72690: IFFALSE 72700
// sContamin := true ;
72692: LD_ADDR_EXP 97
72696: PUSH
72697: LD_INT 1
72699: ST_TO_ADDR
// if p3 = 111 then
72700: LD_VAR 0 3
72704: PUSH
72705: LD_INT 111
72707: EQUAL
72708: IFFALSE 72718
// sOil := true ;
72710: LD_ADDR_EXP 99
72714: PUSH
72715: LD_INT 1
72717: ST_TO_ADDR
// if p3 = 112 then
72718: LD_VAR 0 3
72722: PUSH
72723: LD_INT 112
72725: EQUAL
72726: IFFALSE 72736
// sStu := true ;
72728: LD_ADDR_EXP 103
72732: PUSH
72733: LD_INT 1
72735: ST_TO_ADDR
// if p3 = 113 then
72736: LD_VAR 0 3
72740: PUSH
72741: LD_INT 113
72743: EQUAL
72744: IFFALSE 72754
// sBazooka := true ;
72746: LD_ADDR_EXP 106
72750: PUSH
72751: LD_INT 1
72753: ST_TO_ADDR
// if p3 = 114 then
72754: LD_VAR 0 3
72758: PUSH
72759: LD_INT 114
72761: EQUAL
72762: IFFALSE 72772
// sMortar := true ;
72764: LD_ADDR_EXP 107
72768: PUSH
72769: LD_INT 1
72771: ST_TO_ADDR
// if p3 = 115 then
72772: LD_VAR 0 3
72776: PUSH
72777: LD_INT 115
72779: EQUAL
72780: IFFALSE 72790
// sRanger := true ;
72782: LD_ADDR_EXP 117
72786: PUSH
72787: LD_INT 1
72789: ST_TO_ADDR
// if p3 = 116 then
72790: LD_VAR 0 3
72794: PUSH
72795: LD_INT 116
72797: EQUAL
72798: IFFALSE 72808
// sComputer := true ;
72800: LD_ADDR_EXP 118
72804: PUSH
72805: LD_INT 1
72807: ST_TO_ADDR
// if p3 = 117 then
72808: LD_VAR 0 3
72812: PUSH
72813: LD_INT 117
72815: EQUAL
72816: IFFALSE 72826
// s30 := true ;
72818: LD_ADDR_EXP 119
72822: PUSH
72823: LD_INT 1
72825: ST_TO_ADDR
// if p3 = 118 then
72826: LD_VAR 0 3
72830: PUSH
72831: LD_INT 118
72833: EQUAL
72834: IFFALSE 72844
// s60 := true ;
72836: LD_ADDR_EXP 120
72840: PUSH
72841: LD_INT 1
72843: ST_TO_ADDR
// end ; if p2 = hack_mode then
72844: LD_VAR 0 2
72848: PUSH
72849: LD_INT 101
72851: EQUAL
72852: IFFALSE 72980
// begin case p3 of 1 :
72854: LD_VAR 0 3
72858: PUSH
72859: LD_INT 1
72861: DOUBLE
72862: EQUAL
72863: IFTRUE 72867
72865: GO 72874
72867: POP
// hHackUnlimitedResources ; 2 :
72868: CALL 85127 0 0
72872: GO 72980
72874: LD_INT 2
72876: DOUBLE
72877: EQUAL
72878: IFTRUE 72882
72880: GO 72889
72882: POP
// hHackSetLevel10 ; 3 :
72883: CALL 85260 0 0
72887: GO 72980
72889: LD_INT 3
72891: DOUBLE
72892: EQUAL
72893: IFTRUE 72897
72895: GO 72904
72897: POP
// hHackSetLevel10YourUnits ; 4 :
72898: CALL 85345 0 0
72902: GO 72980
72904: LD_INT 4
72906: DOUBLE
72907: EQUAL
72908: IFTRUE 72912
72910: GO 72919
72912: POP
// hHackInvincible ; 5 :
72913: CALL 85793 0 0
72917: GO 72980
72919: LD_INT 5
72921: DOUBLE
72922: EQUAL
72923: IFTRUE 72927
72925: GO 72934
72927: POP
// hHackInvisible ; 6 :
72928: CALL 85904 0 0
72932: GO 72980
72934: LD_INT 6
72936: DOUBLE
72937: EQUAL
72938: IFTRUE 72942
72940: GO 72949
72942: POP
// hHackChangeYourSide ; 7 :
72943: CALL 85961 0 0
72947: GO 72980
72949: LD_INT 7
72951: DOUBLE
72952: EQUAL
72953: IFTRUE 72957
72955: GO 72964
72957: POP
// hHackChangeUnitSide ; 8 :
72958: CALL 86003 0 0
72962: GO 72980
72964: LD_INT 8
72966: DOUBLE
72967: EQUAL
72968: IFTRUE 72972
72970: GO 72979
72972: POP
// hHackFog ; end ;
72973: CALL 86104 0 0
72977: GO 72980
72979: POP
// end ; if p2 = game_save_mode then
72980: LD_VAR 0 2
72984: PUSH
72985: LD_INT 102
72987: EQUAL
72988: IFFALSE 73043
// begin if p3 = 1 then
72990: LD_VAR 0 3
72994: PUSH
72995: LD_INT 1
72997: EQUAL
72998: IFFALSE 73010
// globalGameSaveCounter := p4 ;
73000: LD_ADDR_EXP 63
73004: PUSH
73005: LD_VAR 0 4
73009: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
73010: LD_VAR 0 3
73014: PUSH
73015: LD_INT 2
73017: EQUAL
73018: PUSH
73019: LD_EXP 63
73023: AND
73024: IFFALSE 73043
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
73026: LD_STRING setGameSaveCounter(
73028: PUSH
73029: LD_EXP 63
73033: STR
73034: PUSH
73035: LD_STRING )
73037: STR
73038: PPUSH
73039: CALL_OW 559
// end ; end ;
73043: LD_VAR 0 7
73047: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
73048: LD_INT 0
73050: PPUSH
// streamModeActive := false ;
73051: LD_ADDR_EXP 64
73055: PUSH
73056: LD_INT 0
73058: ST_TO_ADDR
// normalCounter := 36 ;
73059: LD_ADDR_EXP 65
73063: PUSH
73064: LD_INT 36
73066: ST_TO_ADDR
// hardcoreCounter := 18 ;
73067: LD_ADDR_EXP 66
73071: PUSH
73072: LD_INT 18
73074: ST_TO_ADDR
// sRocket := false ;
73075: LD_ADDR_EXP 69
73079: PUSH
73080: LD_INT 0
73082: ST_TO_ADDR
// sSpeed := false ;
73083: LD_ADDR_EXP 68
73087: PUSH
73088: LD_INT 0
73090: ST_TO_ADDR
// sEngine := false ;
73091: LD_ADDR_EXP 70
73095: PUSH
73096: LD_INT 0
73098: ST_TO_ADDR
// sSpec := false ;
73099: LD_ADDR_EXP 67
73103: PUSH
73104: LD_INT 0
73106: ST_TO_ADDR
// sLevel := false ;
73107: LD_ADDR_EXP 71
73111: PUSH
73112: LD_INT 0
73114: ST_TO_ADDR
// sArmoury := false ;
73115: LD_ADDR_EXP 72
73119: PUSH
73120: LD_INT 0
73122: ST_TO_ADDR
// sRadar := false ;
73123: LD_ADDR_EXP 73
73127: PUSH
73128: LD_INT 0
73130: ST_TO_ADDR
// sBunker := false ;
73131: LD_ADDR_EXP 74
73135: PUSH
73136: LD_INT 0
73138: ST_TO_ADDR
// sHack := false ;
73139: LD_ADDR_EXP 75
73143: PUSH
73144: LD_INT 0
73146: ST_TO_ADDR
// sFire := false ;
73147: LD_ADDR_EXP 76
73151: PUSH
73152: LD_INT 0
73154: ST_TO_ADDR
// sRefresh := false ;
73155: LD_ADDR_EXP 77
73159: PUSH
73160: LD_INT 0
73162: ST_TO_ADDR
// sExp := false ;
73163: LD_ADDR_EXP 78
73167: PUSH
73168: LD_INT 0
73170: ST_TO_ADDR
// sDepot := false ;
73171: LD_ADDR_EXP 79
73175: PUSH
73176: LD_INT 0
73178: ST_TO_ADDR
// sFlag := false ;
73179: LD_ADDR_EXP 80
73183: PUSH
73184: LD_INT 0
73186: ST_TO_ADDR
// sKamikadze := false ;
73187: LD_ADDR_EXP 88
73191: PUSH
73192: LD_INT 0
73194: ST_TO_ADDR
// sTroll := false ;
73195: LD_ADDR_EXP 89
73199: PUSH
73200: LD_INT 0
73202: ST_TO_ADDR
// sSlow := false ;
73203: LD_ADDR_EXP 90
73207: PUSH
73208: LD_INT 0
73210: ST_TO_ADDR
// sLack := false ;
73211: LD_ADDR_EXP 91
73215: PUSH
73216: LD_INT 0
73218: ST_TO_ADDR
// sTank := false ;
73219: LD_ADDR_EXP 93
73223: PUSH
73224: LD_INT 0
73226: ST_TO_ADDR
// sRemote := false ;
73227: LD_ADDR_EXP 94
73231: PUSH
73232: LD_INT 0
73234: ST_TO_ADDR
// sPowell := false ;
73235: LD_ADDR_EXP 95
73239: PUSH
73240: LD_INT 0
73242: ST_TO_ADDR
// sTeleport := false ;
73243: LD_ADDR_EXP 98
73247: PUSH
73248: LD_INT 0
73250: ST_TO_ADDR
// sOilTower := false ;
73251: LD_ADDR_EXP 100
73255: PUSH
73256: LD_INT 0
73258: ST_TO_ADDR
// sShovel := false ;
73259: LD_ADDR_EXP 101
73263: PUSH
73264: LD_INT 0
73266: ST_TO_ADDR
// sSheik := false ;
73267: LD_ADDR_EXP 102
73271: PUSH
73272: LD_INT 0
73274: ST_TO_ADDR
// sEarthquake := false ;
73275: LD_ADDR_EXP 104
73279: PUSH
73280: LD_INT 0
73282: ST_TO_ADDR
// sAI := false ;
73283: LD_ADDR_EXP 105
73287: PUSH
73288: LD_INT 0
73290: ST_TO_ADDR
// sCargo := false ;
73291: LD_ADDR_EXP 108
73295: PUSH
73296: LD_INT 0
73298: ST_TO_ADDR
// sDLaser := false ;
73299: LD_ADDR_EXP 109
73303: PUSH
73304: LD_INT 0
73306: ST_TO_ADDR
// sExchange := false ;
73307: LD_ADDR_EXP 110
73311: PUSH
73312: LD_INT 0
73314: ST_TO_ADDR
// sFac := false ;
73315: LD_ADDR_EXP 111
73319: PUSH
73320: LD_INT 0
73322: ST_TO_ADDR
// sPower := false ;
73323: LD_ADDR_EXP 112
73327: PUSH
73328: LD_INT 0
73330: ST_TO_ADDR
// sRandom := false ;
73331: LD_ADDR_EXP 113
73335: PUSH
73336: LD_INT 0
73338: ST_TO_ADDR
// sShield := false ;
73339: LD_ADDR_EXP 114
73343: PUSH
73344: LD_INT 0
73346: ST_TO_ADDR
// sTime := false ;
73347: LD_ADDR_EXP 115
73351: PUSH
73352: LD_INT 0
73354: ST_TO_ADDR
// sTools := false ;
73355: LD_ADDR_EXP 116
73359: PUSH
73360: LD_INT 0
73362: ST_TO_ADDR
// sSold := false ;
73363: LD_ADDR_EXP 81
73367: PUSH
73368: LD_INT 0
73370: ST_TO_ADDR
// sDiff := false ;
73371: LD_ADDR_EXP 82
73375: PUSH
73376: LD_INT 0
73378: ST_TO_ADDR
// sFog := false ;
73379: LD_ADDR_EXP 85
73383: PUSH
73384: LD_INT 0
73386: ST_TO_ADDR
// sReset := false ;
73387: LD_ADDR_EXP 86
73391: PUSH
73392: LD_INT 0
73394: ST_TO_ADDR
// sSun := false ;
73395: LD_ADDR_EXP 87
73399: PUSH
73400: LD_INT 0
73402: ST_TO_ADDR
// sTiger := false ;
73403: LD_ADDR_EXP 83
73407: PUSH
73408: LD_INT 0
73410: ST_TO_ADDR
// sBomb := false ;
73411: LD_ADDR_EXP 84
73415: PUSH
73416: LD_INT 0
73418: ST_TO_ADDR
// sWound := false ;
73419: LD_ADDR_EXP 92
73423: PUSH
73424: LD_INT 0
73426: ST_TO_ADDR
// sBetray := false ;
73427: LD_ADDR_EXP 96
73431: PUSH
73432: LD_INT 0
73434: ST_TO_ADDR
// sContamin := false ;
73435: LD_ADDR_EXP 97
73439: PUSH
73440: LD_INT 0
73442: ST_TO_ADDR
// sOil := false ;
73443: LD_ADDR_EXP 99
73447: PUSH
73448: LD_INT 0
73450: ST_TO_ADDR
// sStu := false ;
73451: LD_ADDR_EXP 103
73455: PUSH
73456: LD_INT 0
73458: ST_TO_ADDR
// sBazooka := false ;
73459: LD_ADDR_EXP 106
73463: PUSH
73464: LD_INT 0
73466: ST_TO_ADDR
// sMortar := false ;
73467: LD_ADDR_EXP 107
73471: PUSH
73472: LD_INT 0
73474: ST_TO_ADDR
// sRanger := false ;
73475: LD_ADDR_EXP 117
73479: PUSH
73480: LD_INT 0
73482: ST_TO_ADDR
// sComputer := false ;
73483: LD_ADDR_EXP 118
73487: PUSH
73488: LD_INT 0
73490: ST_TO_ADDR
// s30 := false ;
73491: LD_ADDR_EXP 119
73495: PUSH
73496: LD_INT 0
73498: ST_TO_ADDR
// s60 := false ;
73499: LD_ADDR_EXP 120
73503: PUSH
73504: LD_INT 0
73506: ST_TO_ADDR
// end ;
73507: LD_VAR 0 1
73511: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
73512: LD_INT 0
73514: PPUSH
73515: PPUSH
73516: PPUSH
73517: PPUSH
73518: PPUSH
73519: PPUSH
73520: PPUSH
// result := [ ] ;
73521: LD_ADDR_VAR 0 2
73525: PUSH
73526: EMPTY
73527: ST_TO_ADDR
// if campaign_id = 1 then
73528: LD_OWVAR 69
73532: PUSH
73533: LD_INT 1
73535: EQUAL
73536: IFFALSE 76702
// begin case mission_number of 1 :
73538: LD_OWVAR 70
73542: PUSH
73543: LD_INT 1
73545: DOUBLE
73546: EQUAL
73547: IFTRUE 73551
73549: GO 73627
73551: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
73552: LD_ADDR_VAR 0 2
73556: PUSH
73557: LD_INT 2
73559: PUSH
73560: LD_INT 4
73562: PUSH
73563: LD_INT 11
73565: PUSH
73566: LD_INT 12
73568: PUSH
73569: LD_INT 15
73571: PUSH
73572: LD_INT 16
73574: PUSH
73575: LD_INT 22
73577: PUSH
73578: LD_INT 23
73580: PUSH
73581: LD_INT 26
73583: PUSH
73584: EMPTY
73585: LIST
73586: LIST
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: LIST
73593: LIST
73594: PUSH
73595: LD_INT 101
73597: PUSH
73598: LD_INT 102
73600: PUSH
73601: LD_INT 106
73603: PUSH
73604: LD_INT 116
73606: PUSH
73607: LD_INT 117
73609: PUSH
73610: LD_INT 118
73612: PUSH
73613: EMPTY
73614: LIST
73615: LIST
73616: LIST
73617: LIST
73618: LIST
73619: LIST
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: ST_TO_ADDR
73625: GO 76700
73627: LD_INT 2
73629: DOUBLE
73630: EQUAL
73631: IFTRUE 73635
73633: GO 73719
73635: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
73636: LD_ADDR_VAR 0 2
73640: PUSH
73641: LD_INT 2
73643: PUSH
73644: LD_INT 4
73646: PUSH
73647: LD_INT 11
73649: PUSH
73650: LD_INT 12
73652: PUSH
73653: LD_INT 15
73655: PUSH
73656: LD_INT 16
73658: PUSH
73659: LD_INT 22
73661: PUSH
73662: LD_INT 23
73664: PUSH
73665: LD_INT 26
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: PUSH
73679: LD_INT 101
73681: PUSH
73682: LD_INT 102
73684: PUSH
73685: LD_INT 105
73687: PUSH
73688: LD_INT 106
73690: PUSH
73691: LD_INT 108
73693: PUSH
73694: LD_INT 116
73696: PUSH
73697: LD_INT 117
73699: PUSH
73700: LD_INT 118
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: LIST
73707: LIST
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: ST_TO_ADDR
73717: GO 76700
73719: LD_INT 3
73721: DOUBLE
73722: EQUAL
73723: IFTRUE 73727
73725: GO 73815
73727: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
73728: LD_ADDR_VAR 0 2
73732: PUSH
73733: LD_INT 2
73735: PUSH
73736: LD_INT 4
73738: PUSH
73739: LD_INT 5
73741: PUSH
73742: LD_INT 11
73744: PUSH
73745: LD_INT 12
73747: PUSH
73748: LD_INT 15
73750: PUSH
73751: LD_INT 16
73753: PUSH
73754: LD_INT 22
73756: PUSH
73757: LD_INT 26
73759: PUSH
73760: LD_INT 36
73762: PUSH
73763: EMPTY
73764: LIST
73765: LIST
73766: LIST
73767: LIST
73768: LIST
73769: LIST
73770: LIST
73771: LIST
73772: LIST
73773: LIST
73774: PUSH
73775: LD_INT 101
73777: PUSH
73778: LD_INT 102
73780: PUSH
73781: LD_INT 105
73783: PUSH
73784: LD_INT 106
73786: PUSH
73787: LD_INT 108
73789: PUSH
73790: LD_INT 116
73792: PUSH
73793: LD_INT 117
73795: PUSH
73796: LD_INT 118
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: LIST
73803: LIST
73804: LIST
73805: LIST
73806: LIST
73807: LIST
73808: PUSH
73809: EMPTY
73810: LIST
73811: LIST
73812: ST_TO_ADDR
73813: GO 76700
73815: LD_INT 4
73817: DOUBLE
73818: EQUAL
73819: IFTRUE 73823
73821: GO 73919
73823: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
73824: LD_ADDR_VAR 0 2
73828: PUSH
73829: LD_INT 2
73831: PUSH
73832: LD_INT 4
73834: PUSH
73835: LD_INT 5
73837: PUSH
73838: LD_INT 8
73840: PUSH
73841: LD_INT 11
73843: PUSH
73844: LD_INT 12
73846: PUSH
73847: LD_INT 15
73849: PUSH
73850: LD_INT 16
73852: PUSH
73853: LD_INT 22
73855: PUSH
73856: LD_INT 23
73858: PUSH
73859: LD_INT 26
73861: PUSH
73862: LD_INT 36
73864: PUSH
73865: EMPTY
73866: LIST
73867: LIST
73868: LIST
73869: LIST
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: LIST
73875: LIST
73876: LIST
73877: LIST
73878: PUSH
73879: LD_INT 101
73881: PUSH
73882: LD_INT 102
73884: PUSH
73885: LD_INT 105
73887: PUSH
73888: LD_INT 106
73890: PUSH
73891: LD_INT 108
73893: PUSH
73894: LD_INT 116
73896: PUSH
73897: LD_INT 117
73899: PUSH
73900: LD_INT 118
73902: PUSH
73903: EMPTY
73904: LIST
73905: LIST
73906: LIST
73907: LIST
73908: LIST
73909: LIST
73910: LIST
73911: LIST
73912: PUSH
73913: EMPTY
73914: LIST
73915: LIST
73916: ST_TO_ADDR
73917: GO 76700
73919: LD_INT 5
73921: DOUBLE
73922: EQUAL
73923: IFTRUE 73927
73925: GO 74039
73927: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
73928: LD_ADDR_VAR 0 2
73932: PUSH
73933: LD_INT 2
73935: PUSH
73936: LD_INT 4
73938: PUSH
73939: LD_INT 5
73941: PUSH
73942: LD_INT 6
73944: PUSH
73945: LD_INT 8
73947: PUSH
73948: LD_INT 11
73950: PUSH
73951: LD_INT 12
73953: PUSH
73954: LD_INT 15
73956: PUSH
73957: LD_INT 16
73959: PUSH
73960: LD_INT 22
73962: PUSH
73963: LD_INT 23
73965: PUSH
73966: LD_INT 25
73968: PUSH
73969: LD_INT 26
73971: PUSH
73972: LD_INT 36
73974: PUSH
73975: EMPTY
73976: LIST
73977: LIST
73978: LIST
73979: LIST
73980: LIST
73981: LIST
73982: LIST
73983: LIST
73984: LIST
73985: LIST
73986: LIST
73987: LIST
73988: LIST
73989: LIST
73990: PUSH
73991: LD_INT 101
73993: PUSH
73994: LD_INT 102
73996: PUSH
73997: LD_INT 105
73999: PUSH
74000: LD_INT 106
74002: PUSH
74003: LD_INT 108
74005: PUSH
74006: LD_INT 109
74008: PUSH
74009: LD_INT 112
74011: PUSH
74012: LD_INT 116
74014: PUSH
74015: LD_INT 117
74017: PUSH
74018: LD_INT 118
74020: PUSH
74021: EMPTY
74022: LIST
74023: LIST
74024: LIST
74025: LIST
74026: LIST
74027: LIST
74028: LIST
74029: LIST
74030: LIST
74031: LIST
74032: PUSH
74033: EMPTY
74034: LIST
74035: LIST
74036: ST_TO_ADDR
74037: GO 76700
74039: LD_INT 6
74041: DOUBLE
74042: EQUAL
74043: IFTRUE 74047
74045: GO 74179
74047: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
74048: LD_ADDR_VAR 0 2
74052: PUSH
74053: LD_INT 2
74055: PUSH
74056: LD_INT 4
74058: PUSH
74059: LD_INT 5
74061: PUSH
74062: LD_INT 6
74064: PUSH
74065: LD_INT 8
74067: PUSH
74068: LD_INT 11
74070: PUSH
74071: LD_INT 12
74073: PUSH
74074: LD_INT 15
74076: PUSH
74077: LD_INT 16
74079: PUSH
74080: LD_INT 20
74082: PUSH
74083: LD_INT 21
74085: PUSH
74086: LD_INT 22
74088: PUSH
74089: LD_INT 23
74091: PUSH
74092: LD_INT 25
74094: PUSH
74095: LD_INT 26
74097: PUSH
74098: LD_INT 30
74100: PUSH
74101: LD_INT 31
74103: PUSH
74104: LD_INT 32
74106: PUSH
74107: LD_INT 36
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: PUSH
74131: LD_INT 101
74133: PUSH
74134: LD_INT 102
74136: PUSH
74137: LD_INT 105
74139: PUSH
74140: LD_INT 106
74142: PUSH
74143: LD_INT 108
74145: PUSH
74146: LD_INT 109
74148: PUSH
74149: LD_INT 112
74151: PUSH
74152: LD_INT 116
74154: PUSH
74155: LD_INT 117
74157: PUSH
74158: LD_INT 118
74160: PUSH
74161: EMPTY
74162: LIST
74163: LIST
74164: LIST
74165: LIST
74166: LIST
74167: LIST
74168: LIST
74169: LIST
74170: LIST
74171: LIST
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: ST_TO_ADDR
74177: GO 76700
74179: LD_INT 7
74181: DOUBLE
74182: EQUAL
74183: IFTRUE 74187
74185: GO 74299
74187: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
74188: LD_ADDR_VAR 0 2
74192: PUSH
74193: LD_INT 2
74195: PUSH
74196: LD_INT 4
74198: PUSH
74199: LD_INT 5
74201: PUSH
74202: LD_INT 7
74204: PUSH
74205: LD_INT 11
74207: PUSH
74208: LD_INT 12
74210: PUSH
74211: LD_INT 15
74213: PUSH
74214: LD_INT 16
74216: PUSH
74217: LD_INT 20
74219: PUSH
74220: LD_INT 21
74222: PUSH
74223: LD_INT 22
74225: PUSH
74226: LD_INT 23
74228: PUSH
74229: LD_INT 25
74231: PUSH
74232: LD_INT 26
74234: PUSH
74235: EMPTY
74236: LIST
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: PUSH
74251: LD_INT 101
74253: PUSH
74254: LD_INT 102
74256: PUSH
74257: LD_INT 103
74259: PUSH
74260: LD_INT 105
74262: PUSH
74263: LD_INT 106
74265: PUSH
74266: LD_INT 108
74268: PUSH
74269: LD_INT 112
74271: PUSH
74272: LD_INT 116
74274: PUSH
74275: LD_INT 117
74277: PUSH
74278: LD_INT 118
74280: PUSH
74281: EMPTY
74282: LIST
74283: LIST
74284: LIST
74285: LIST
74286: LIST
74287: LIST
74288: LIST
74289: LIST
74290: LIST
74291: LIST
74292: PUSH
74293: EMPTY
74294: LIST
74295: LIST
74296: ST_TO_ADDR
74297: GO 76700
74299: LD_INT 8
74301: DOUBLE
74302: EQUAL
74303: IFTRUE 74307
74305: GO 74447
74307: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
74308: LD_ADDR_VAR 0 2
74312: PUSH
74313: LD_INT 2
74315: PUSH
74316: LD_INT 4
74318: PUSH
74319: LD_INT 5
74321: PUSH
74322: LD_INT 6
74324: PUSH
74325: LD_INT 7
74327: PUSH
74328: LD_INT 8
74330: PUSH
74331: LD_INT 11
74333: PUSH
74334: LD_INT 12
74336: PUSH
74337: LD_INT 15
74339: PUSH
74340: LD_INT 16
74342: PUSH
74343: LD_INT 20
74345: PUSH
74346: LD_INT 21
74348: PUSH
74349: LD_INT 22
74351: PUSH
74352: LD_INT 23
74354: PUSH
74355: LD_INT 25
74357: PUSH
74358: LD_INT 26
74360: PUSH
74361: LD_INT 30
74363: PUSH
74364: LD_INT 31
74366: PUSH
74367: LD_INT 32
74369: PUSH
74370: LD_INT 36
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: LIST
74377: LIST
74378: LIST
74379: LIST
74380: LIST
74381: LIST
74382: LIST
74383: LIST
74384: LIST
74385: LIST
74386: LIST
74387: LIST
74388: LIST
74389: LIST
74390: LIST
74391: LIST
74392: LIST
74393: LIST
74394: PUSH
74395: LD_INT 101
74397: PUSH
74398: LD_INT 102
74400: PUSH
74401: LD_INT 103
74403: PUSH
74404: LD_INT 105
74406: PUSH
74407: LD_INT 106
74409: PUSH
74410: LD_INT 108
74412: PUSH
74413: LD_INT 109
74415: PUSH
74416: LD_INT 112
74418: PUSH
74419: LD_INT 116
74421: PUSH
74422: LD_INT 117
74424: PUSH
74425: LD_INT 118
74427: PUSH
74428: EMPTY
74429: LIST
74430: LIST
74431: LIST
74432: LIST
74433: LIST
74434: LIST
74435: LIST
74436: LIST
74437: LIST
74438: LIST
74439: LIST
74440: PUSH
74441: EMPTY
74442: LIST
74443: LIST
74444: ST_TO_ADDR
74445: GO 76700
74447: LD_INT 9
74449: DOUBLE
74450: EQUAL
74451: IFTRUE 74455
74453: GO 74603
74455: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
74456: LD_ADDR_VAR 0 2
74460: PUSH
74461: LD_INT 2
74463: PUSH
74464: LD_INT 4
74466: PUSH
74467: LD_INT 5
74469: PUSH
74470: LD_INT 6
74472: PUSH
74473: LD_INT 7
74475: PUSH
74476: LD_INT 8
74478: PUSH
74479: LD_INT 11
74481: PUSH
74482: LD_INT 12
74484: PUSH
74485: LD_INT 15
74487: PUSH
74488: LD_INT 16
74490: PUSH
74491: LD_INT 20
74493: PUSH
74494: LD_INT 21
74496: PUSH
74497: LD_INT 22
74499: PUSH
74500: LD_INT 23
74502: PUSH
74503: LD_INT 25
74505: PUSH
74506: LD_INT 26
74508: PUSH
74509: LD_INT 28
74511: PUSH
74512: LD_INT 30
74514: PUSH
74515: LD_INT 31
74517: PUSH
74518: LD_INT 32
74520: PUSH
74521: LD_INT 36
74523: PUSH
74524: EMPTY
74525: LIST
74526: LIST
74527: LIST
74528: LIST
74529: LIST
74530: LIST
74531: LIST
74532: LIST
74533: LIST
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: LIST
74539: LIST
74540: LIST
74541: LIST
74542: LIST
74543: LIST
74544: LIST
74545: LIST
74546: PUSH
74547: LD_INT 101
74549: PUSH
74550: LD_INT 102
74552: PUSH
74553: LD_INT 103
74555: PUSH
74556: LD_INT 105
74558: PUSH
74559: LD_INT 106
74561: PUSH
74562: LD_INT 108
74564: PUSH
74565: LD_INT 109
74567: PUSH
74568: LD_INT 112
74570: PUSH
74571: LD_INT 114
74573: PUSH
74574: LD_INT 116
74576: PUSH
74577: LD_INT 117
74579: PUSH
74580: LD_INT 118
74582: PUSH
74583: EMPTY
74584: LIST
74585: LIST
74586: LIST
74587: LIST
74588: LIST
74589: LIST
74590: LIST
74591: LIST
74592: LIST
74593: LIST
74594: LIST
74595: LIST
74596: PUSH
74597: EMPTY
74598: LIST
74599: LIST
74600: ST_TO_ADDR
74601: GO 76700
74603: LD_INT 10
74605: DOUBLE
74606: EQUAL
74607: IFTRUE 74611
74609: GO 74807
74611: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
74612: LD_ADDR_VAR 0 2
74616: PUSH
74617: LD_INT 2
74619: PUSH
74620: LD_INT 4
74622: PUSH
74623: LD_INT 5
74625: PUSH
74626: LD_INT 6
74628: PUSH
74629: LD_INT 7
74631: PUSH
74632: LD_INT 8
74634: PUSH
74635: LD_INT 9
74637: PUSH
74638: LD_INT 10
74640: PUSH
74641: LD_INT 11
74643: PUSH
74644: LD_INT 12
74646: PUSH
74647: LD_INT 13
74649: PUSH
74650: LD_INT 14
74652: PUSH
74653: LD_INT 15
74655: PUSH
74656: LD_INT 16
74658: PUSH
74659: LD_INT 17
74661: PUSH
74662: LD_INT 18
74664: PUSH
74665: LD_INT 19
74667: PUSH
74668: LD_INT 20
74670: PUSH
74671: LD_INT 21
74673: PUSH
74674: LD_INT 22
74676: PUSH
74677: LD_INT 23
74679: PUSH
74680: LD_INT 24
74682: PUSH
74683: LD_INT 25
74685: PUSH
74686: LD_INT 26
74688: PUSH
74689: LD_INT 28
74691: PUSH
74692: LD_INT 30
74694: PUSH
74695: LD_INT 31
74697: PUSH
74698: LD_INT 32
74700: PUSH
74701: LD_INT 36
74703: PUSH
74704: EMPTY
74705: LIST
74706: LIST
74707: LIST
74708: LIST
74709: LIST
74710: LIST
74711: LIST
74712: LIST
74713: LIST
74714: LIST
74715: LIST
74716: LIST
74717: LIST
74718: LIST
74719: LIST
74720: LIST
74721: LIST
74722: LIST
74723: LIST
74724: LIST
74725: LIST
74726: LIST
74727: LIST
74728: LIST
74729: LIST
74730: LIST
74731: LIST
74732: LIST
74733: LIST
74734: PUSH
74735: LD_INT 101
74737: PUSH
74738: LD_INT 102
74740: PUSH
74741: LD_INT 103
74743: PUSH
74744: LD_INT 104
74746: PUSH
74747: LD_INT 105
74749: PUSH
74750: LD_INT 106
74752: PUSH
74753: LD_INT 107
74755: PUSH
74756: LD_INT 108
74758: PUSH
74759: LD_INT 109
74761: PUSH
74762: LD_INT 110
74764: PUSH
74765: LD_INT 111
74767: PUSH
74768: LD_INT 112
74770: PUSH
74771: LD_INT 114
74773: PUSH
74774: LD_INT 116
74776: PUSH
74777: LD_INT 117
74779: PUSH
74780: LD_INT 118
74782: PUSH
74783: EMPTY
74784: LIST
74785: LIST
74786: LIST
74787: LIST
74788: LIST
74789: LIST
74790: LIST
74791: LIST
74792: LIST
74793: LIST
74794: LIST
74795: LIST
74796: LIST
74797: LIST
74798: LIST
74799: LIST
74800: PUSH
74801: EMPTY
74802: LIST
74803: LIST
74804: ST_TO_ADDR
74805: GO 76700
74807: LD_INT 11
74809: DOUBLE
74810: EQUAL
74811: IFTRUE 74815
74813: GO 75019
74815: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
74816: LD_ADDR_VAR 0 2
74820: PUSH
74821: LD_INT 2
74823: PUSH
74824: LD_INT 3
74826: PUSH
74827: LD_INT 4
74829: PUSH
74830: LD_INT 5
74832: PUSH
74833: LD_INT 6
74835: PUSH
74836: LD_INT 7
74838: PUSH
74839: LD_INT 8
74841: PUSH
74842: LD_INT 9
74844: PUSH
74845: LD_INT 10
74847: PUSH
74848: LD_INT 11
74850: PUSH
74851: LD_INT 12
74853: PUSH
74854: LD_INT 13
74856: PUSH
74857: LD_INT 14
74859: PUSH
74860: LD_INT 15
74862: PUSH
74863: LD_INT 16
74865: PUSH
74866: LD_INT 17
74868: PUSH
74869: LD_INT 18
74871: PUSH
74872: LD_INT 19
74874: PUSH
74875: LD_INT 20
74877: PUSH
74878: LD_INT 21
74880: PUSH
74881: LD_INT 22
74883: PUSH
74884: LD_INT 23
74886: PUSH
74887: LD_INT 24
74889: PUSH
74890: LD_INT 25
74892: PUSH
74893: LD_INT 26
74895: PUSH
74896: LD_INT 28
74898: PUSH
74899: LD_INT 30
74901: PUSH
74902: LD_INT 31
74904: PUSH
74905: LD_INT 32
74907: PUSH
74908: LD_INT 34
74910: PUSH
74911: LD_INT 36
74913: PUSH
74914: EMPTY
74915: LIST
74916: LIST
74917: LIST
74918: LIST
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: LIST
74927: LIST
74928: LIST
74929: LIST
74930: LIST
74931: LIST
74932: LIST
74933: LIST
74934: LIST
74935: LIST
74936: LIST
74937: LIST
74938: LIST
74939: LIST
74940: LIST
74941: LIST
74942: LIST
74943: LIST
74944: LIST
74945: LIST
74946: PUSH
74947: LD_INT 101
74949: PUSH
74950: LD_INT 102
74952: PUSH
74953: LD_INT 103
74955: PUSH
74956: LD_INT 104
74958: PUSH
74959: LD_INT 105
74961: PUSH
74962: LD_INT 106
74964: PUSH
74965: LD_INT 107
74967: PUSH
74968: LD_INT 108
74970: PUSH
74971: LD_INT 109
74973: PUSH
74974: LD_INT 110
74976: PUSH
74977: LD_INT 111
74979: PUSH
74980: LD_INT 112
74982: PUSH
74983: LD_INT 114
74985: PUSH
74986: LD_INT 116
74988: PUSH
74989: LD_INT 117
74991: PUSH
74992: LD_INT 118
74994: PUSH
74995: EMPTY
74996: LIST
74997: LIST
74998: LIST
74999: LIST
75000: LIST
75001: LIST
75002: LIST
75003: LIST
75004: LIST
75005: LIST
75006: LIST
75007: LIST
75008: LIST
75009: LIST
75010: LIST
75011: LIST
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: ST_TO_ADDR
75017: GO 76700
75019: LD_INT 12
75021: DOUBLE
75022: EQUAL
75023: IFTRUE 75027
75025: GO 75247
75027: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
75028: LD_ADDR_VAR 0 2
75032: PUSH
75033: LD_INT 1
75035: PUSH
75036: LD_INT 2
75038: PUSH
75039: LD_INT 3
75041: PUSH
75042: LD_INT 4
75044: PUSH
75045: LD_INT 5
75047: PUSH
75048: LD_INT 6
75050: PUSH
75051: LD_INT 7
75053: PUSH
75054: LD_INT 8
75056: PUSH
75057: LD_INT 9
75059: PUSH
75060: LD_INT 10
75062: PUSH
75063: LD_INT 11
75065: PUSH
75066: LD_INT 12
75068: PUSH
75069: LD_INT 13
75071: PUSH
75072: LD_INT 14
75074: PUSH
75075: LD_INT 15
75077: PUSH
75078: LD_INT 16
75080: PUSH
75081: LD_INT 17
75083: PUSH
75084: LD_INT 18
75086: PUSH
75087: LD_INT 19
75089: PUSH
75090: LD_INT 20
75092: PUSH
75093: LD_INT 21
75095: PUSH
75096: LD_INT 22
75098: PUSH
75099: LD_INT 23
75101: PUSH
75102: LD_INT 24
75104: PUSH
75105: LD_INT 25
75107: PUSH
75108: LD_INT 26
75110: PUSH
75111: LD_INT 27
75113: PUSH
75114: LD_INT 28
75116: PUSH
75117: LD_INT 30
75119: PUSH
75120: LD_INT 31
75122: PUSH
75123: LD_INT 32
75125: PUSH
75126: LD_INT 33
75128: PUSH
75129: LD_INT 34
75131: PUSH
75132: LD_INT 36
75134: PUSH
75135: EMPTY
75136: LIST
75137: LIST
75138: LIST
75139: LIST
75140: LIST
75141: LIST
75142: LIST
75143: LIST
75144: LIST
75145: LIST
75146: LIST
75147: LIST
75148: LIST
75149: LIST
75150: LIST
75151: LIST
75152: LIST
75153: LIST
75154: LIST
75155: LIST
75156: LIST
75157: LIST
75158: LIST
75159: LIST
75160: LIST
75161: LIST
75162: LIST
75163: LIST
75164: LIST
75165: LIST
75166: LIST
75167: LIST
75168: LIST
75169: LIST
75170: PUSH
75171: LD_INT 101
75173: PUSH
75174: LD_INT 102
75176: PUSH
75177: LD_INT 103
75179: PUSH
75180: LD_INT 104
75182: PUSH
75183: LD_INT 105
75185: PUSH
75186: LD_INT 106
75188: PUSH
75189: LD_INT 107
75191: PUSH
75192: LD_INT 108
75194: PUSH
75195: LD_INT 109
75197: PUSH
75198: LD_INT 110
75200: PUSH
75201: LD_INT 111
75203: PUSH
75204: LD_INT 112
75206: PUSH
75207: LD_INT 113
75209: PUSH
75210: LD_INT 114
75212: PUSH
75213: LD_INT 116
75215: PUSH
75216: LD_INT 117
75218: PUSH
75219: LD_INT 118
75221: PUSH
75222: EMPTY
75223: LIST
75224: LIST
75225: LIST
75226: LIST
75227: LIST
75228: LIST
75229: LIST
75230: LIST
75231: LIST
75232: LIST
75233: LIST
75234: LIST
75235: LIST
75236: LIST
75237: LIST
75238: LIST
75239: LIST
75240: PUSH
75241: EMPTY
75242: LIST
75243: LIST
75244: ST_TO_ADDR
75245: GO 76700
75247: LD_INT 13
75249: DOUBLE
75250: EQUAL
75251: IFTRUE 75255
75253: GO 75463
75255: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
75256: LD_ADDR_VAR 0 2
75260: PUSH
75261: LD_INT 1
75263: PUSH
75264: LD_INT 2
75266: PUSH
75267: LD_INT 3
75269: PUSH
75270: LD_INT 4
75272: PUSH
75273: LD_INT 5
75275: PUSH
75276: LD_INT 8
75278: PUSH
75279: LD_INT 9
75281: PUSH
75282: LD_INT 10
75284: PUSH
75285: LD_INT 11
75287: PUSH
75288: LD_INT 12
75290: PUSH
75291: LD_INT 14
75293: PUSH
75294: LD_INT 15
75296: PUSH
75297: LD_INT 16
75299: PUSH
75300: LD_INT 17
75302: PUSH
75303: LD_INT 18
75305: PUSH
75306: LD_INT 19
75308: PUSH
75309: LD_INT 20
75311: PUSH
75312: LD_INT 21
75314: PUSH
75315: LD_INT 22
75317: PUSH
75318: LD_INT 23
75320: PUSH
75321: LD_INT 24
75323: PUSH
75324: LD_INT 25
75326: PUSH
75327: LD_INT 26
75329: PUSH
75330: LD_INT 27
75332: PUSH
75333: LD_INT 28
75335: PUSH
75336: LD_INT 30
75338: PUSH
75339: LD_INT 31
75341: PUSH
75342: LD_INT 32
75344: PUSH
75345: LD_INT 33
75347: PUSH
75348: LD_INT 34
75350: PUSH
75351: LD_INT 36
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: LIST
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: LIST
75375: LIST
75376: LIST
75377: LIST
75378: LIST
75379: LIST
75380: LIST
75381: LIST
75382: LIST
75383: LIST
75384: LIST
75385: LIST
75386: PUSH
75387: LD_INT 101
75389: PUSH
75390: LD_INT 102
75392: PUSH
75393: LD_INT 103
75395: PUSH
75396: LD_INT 104
75398: PUSH
75399: LD_INT 105
75401: PUSH
75402: LD_INT 106
75404: PUSH
75405: LD_INT 107
75407: PUSH
75408: LD_INT 108
75410: PUSH
75411: LD_INT 109
75413: PUSH
75414: LD_INT 110
75416: PUSH
75417: LD_INT 111
75419: PUSH
75420: LD_INT 112
75422: PUSH
75423: LD_INT 113
75425: PUSH
75426: LD_INT 114
75428: PUSH
75429: LD_INT 116
75431: PUSH
75432: LD_INT 117
75434: PUSH
75435: LD_INT 118
75437: PUSH
75438: EMPTY
75439: LIST
75440: LIST
75441: LIST
75442: LIST
75443: LIST
75444: LIST
75445: LIST
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: LIST
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: PUSH
75457: EMPTY
75458: LIST
75459: LIST
75460: ST_TO_ADDR
75461: GO 76700
75463: LD_INT 14
75465: DOUBLE
75466: EQUAL
75467: IFTRUE 75471
75469: GO 75695
75471: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
75472: LD_ADDR_VAR 0 2
75476: PUSH
75477: LD_INT 1
75479: PUSH
75480: LD_INT 2
75482: PUSH
75483: LD_INT 3
75485: PUSH
75486: LD_INT 4
75488: PUSH
75489: LD_INT 5
75491: PUSH
75492: LD_INT 6
75494: PUSH
75495: LD_INT 7
75497: PUSH
75498: LD_INT 8
75500: PUSH
75501: LD_INT 9
75503: PUSH
75504: LD_INT 10
75506: PUSH
75507: LD_INT 11
75509: PUSH
75510: LD_INT 12
75512: PUSH
75513: LD_INT 13
75515: PUSH
75516: LD_INT 14
75518: PUSH
75519: LD_INT 15
75521: PUSH
75522: LD_INT 16
75524: PUSH
75525: LD_INT 17
75527: PUSH
75528: LD_INT 18
75530: PUSH
75531: LD_INT 19
75533: PUSH
75534: LD_INT 20
75536: PUSH
75537: LD_INT 21
75539: PUSH
75540: LD_INT 22
75542: PUSH
75543: LD_INT 23
75545: PUSH
75546: LD_INT 24
75548: PUSH
75549: LD_INT 25
75551: PUSH
75552: LD_INT 26
75554: PUSH
75555: LD_INT 27
75557: PUSH
75558: LD_INT 28
75560: PUSH
75561: LD_INT 29
75563: PUSH
75564: LD_INT 30
75566: PUSH
75567: LD_INT 31
75569: PUSH
75570: LD_INT 32
75572: PUSH
75573: LD_INT 33
75575: PUSH
75576: LD_INT 34
75578: PUSH
75579: LD_INT 36
75581: PUSH
75582: EMPTY
75583: LIST
75584: LIST
75585: LIST
75586: LIST
75587: LIST
75588: LIST
75589: LIST
75590: LIST
75591: LIST
75592: LIST
75593: LIST
75594: LIST
75595: LIST
75596: LIST
75597: LIST
75598: LIST
75599: LIST
75600: LIST
75601: LIST
75602: LIST
75603: LIST
75604: LIST
75605: LIST
75606: LIST
75607: LIST
75608: LIST
75609: LIST
75610: LIST
75611: LIST
75612: LIST
75613: LIST
75614: LIST
75615: LIST
75616: LIST
75617: LIST
75618: PUSH
75619: LD_INT 101
75621: PUSH
75622: LD_INT 102
75624: PUSH
75625: LD_INT 103
75627: PUSH
75628: LD_INT 104
75630: PUSH
75631: LD_INT 105
75633: PUSH
75634: LD_INT 106
75636: PUSH
75637: LD_INT 107
75639: PUSH
75640: LD_INT 108
75642: PUSH
75643: LD_INT 109
75645: PUSH
75646: LD_INT 110
75648: PUSH
75649: LD_INT 111
75651: PUSH
75652: LD_INT 112
75654: PUSH
75655: LD_INT 113
75657: PUSH
75658: LD_INT 114
75660: PUSH
75661: LD_INT 116
75663: PUSH
75664: LD_INT 117
75666: PUSH
75667: LD_INT 118
75669: PUSH
75670: EMPTY
75671: LIST
75672: LIST
75673: LIST
75674: LIST
75675: LIST
75676: LIST
75677: LIST
75678: LIST
75679: LIST
75680: LIST
75681: LIST
75682: LIST
75683: LIST
75684: LIST
75685: LIST
75686: LIST
75687: LIST
75688: PUSH
75689: EMPTY
75690: LIST
75691: LIST
75692: ST_TO_ADDR
75693: GO 76700
75695: LD_INT 15
75697: DOUBLE
75698: EQUAL
75699: IFTRUE 75703
75701: GO 75927
75703: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
75704: LD_ADDR_VAR 0 2
75708: PUSH
75709: LD_INT 1
75711: PUSH
75712: LD_INT 2
75714: PUSH
75715: LD_INT 3
75717: PUSH
75718: LD_INT 4
75720: PUSH
75721: LD_INT 5
75723: PUSH
75724: LD_INT 6
75726: PUSH
75727: LD_INT 7
75729: PUSH
75730: LD_INT 8
75732: PUSH
75733: LD_INT 9
75735: PUSH
75736: LD_INT 10
75738: PUSH
75739: LD_INT 11
75741: PUSH
75742: LD_INT 12
75744: PUSH
75745: LD_INT 13
75747: PUSH
75748: LD_INT 14
75750: PUSH
75751: LD_INT 15
75753: PUSH
75754: LD_INT 16
75756: PUSH
75757: LD_INT 17
75759: PUSH
75760: LD_INT 18
75762: PUSH
75763: LD_INT 19
75765: PUSH
75766: LD_INT 20
75768: PUSH
75769: LD_INT 21
75771: PUSH
75772: LD_INT 22
75774: PUSH
75775: LD_INT 23
75777: PUSH
75778: LD_INT 24
75780: PUSH
75781: LD_INT 25
75783: PUSH
75784: LD_INT 26
75786: PUSH
75787: LD_INT 27
75789: PUSH
75790: LD_INT 28
75792: PUSH
75793: LD_INT 29
75795: PUSH
75796: LD_INT 30
75798: PUSH
75799: LD_INT 31
75801: PUSH
75802: LD_INT 32
75804: PUSH
75805: LD_INT 33
75807: PUSH
75808: LD_INT 34
75810: PUSH
75811: LD_INT 36
75813: PUSH
75814: EMPTY
75815: LIST
75816: LIST
75817: LIST
75818: LIST
75819: LIST
75820: LIST
75821: LIST
75822: LIST
75823: LIST
75824: LIST
75825: LIST
75826: LIST
75827: LIST
75828: LIST
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: LIST
75834: LIST
75835: LIST
75836: LIST
75837: LIST
75838: LIST
75839: LIST
75840: LIST
75841: LIST
75842: LIST
75843: LIST
75844: LIST
75845: LIST
75846: LIST
75847: LIST
75848: LIST
75849: LIST
75850: PUSH
75851: LD_INT 101
75853: PUSH
75854: LD_INT 102
75856: PUSH
75857: LD_INT 103
75859: PUSH
75860: LD_INT 104
75862: PUSH
75863: LD_INT 105
75865: PUSH
75866: LD_INT 106
75868: PUSH
75869: LD_INT 107
75871: PUSH
75872: LD_INT 108
75874: PUSH
75875: LD_INT 109
75877: PUSH
75878: LD_INT 110
75880: PUSH
75881: LD_INT 111
75883: PUSH
75884: LD_INT 112
75886: PUSH
75887: LD_INT 113
75889: PUSH
75890: LD_INT 114
75892: PUSH
75893: LD_INT 116
75895: PUSH
75896: LD_INT 117
75898: PUSH
75899: LD_INT 118
75901: PUSH
75902: EMPTY
75903: LIST
75904: LIST
75905: LIST
75906: LIST
75907: LIST
75908: LIST
75909: LIST
75910: LIST
75911: LIST
75912: LIST
75913: LIST
75914: LIST
75915: LIST
75916: LIST
75917: LIST
75918: LIST
75919: LIST
75920: PUSH
75921: EMPTY
75922: LIST
75923: LIST
75924: ST_TO_ADDR
75925: GO 76700
75927: LD_INT 16
75929: DOUBLE
75930: EQUAL
75931: IFTRUE 75935
75933: GO 76071
75935: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
75936: LD_ADDR_VAR 0 2
75940: PUSH
75941: LD_INT 2
75943: PUSH
75944: LD_INT 4
75946: PUSH
75947: LD_INT 5
75949: PUSH
75950: LD_INT 7
75952: PUSH
75953: LD_INT 11
75955: PUSH
75956: LD_INT 12
75958: PUSH
75959: LD_INT 15
75961: PUSH
75962: LD_INT 16
75964: PUSH
75965: LD_INT 20
75967: PUSH
75968: LD_INT 21
75970: PUSH
75971: LD_INT 22
75973: PUSH
75974: LD_INT 23
75976: PUSH
75977: LD_INT 25
75979: PUSH
75980: LD_INT 26
75982: PUSH
75983: LD_INT 30
75985: PUSH
75986: LD_INT 31
75988: PUSH
75989: LD_INT 32
75991: PUSH
75992: LD_INT 33
75994: PUSH
75995: LD_INT 34
75997: PUSH
75998: EMPTY
75999: LIST
76000: LIST
76001: LIST
76002: LIST
76003: LIST
76004: LIST
76005: LIST
76006: LIST
76007: LIST
76008: LIST
76009: LIST
76010: LIST
76011: LIST
76012: LIST
76013: LIST
76014: LIST
76015: LIST
76016: LIST
76017: LIST
76018: PUSH
76019: LD_INT 101
76021: PUSH
76022: LD_INT 102
76024: PUSH
76025: LD_INT 103
76027: PUSH
76028: LD_INT 106
76030: PUSH
76031: LD_INT 108
76033: PUSH
76034: LD_INT 112
76036: PUSH
76037: LD_INT 113
76039: PUSH
76040: LD_INT 114
76042: PUSH
76043: LD_INT 116
76045: PUSH
76046: LD_INT 117
76048: PUSH
76049: LD_INT 118
76051: PUSH
76052: EMPTY
76053: LIST
76054: LIST
76055: LIST
76056: LIST
76057: LIST
76058: LIST
76059: LIST
76060: LIST
76061: LIST
76062: LIST
76063: LIST
76064: PUSH
76065: EMPTY
76066: LIST
76067: LIST
76068: ST_TO_ADDR
76069: GO 76700
76071: LD_INT 17
76073: DOUBLE
76074: EQUAL
76075: IFTRUE 76079
76077: GO 76303
76079: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
76080: LD_ADDR_VAR 0 2
76084: PUSH
76085: LD_INT 1
76087: PUSH
76088: LD_INT 2
76090: PUSH
76091: LD_INT 3
76093: PUSH
76094: LD_INT 4
76096: PUSH
76097: LD_INT 5
76099: PUSH
76100: LD_INT 6
76102: PUSH
76103: LD_INT 7
76105: PUSH
76106: LD_INT 8
76108: PUSH
76109: LD_INT 9
76111: PUSH
76112: LD_INT 10
76114: PUSH
76115: LD_INT 11
76117: PUSH
76118: LD_INT 12
76120: PUSH
76121: LD_INT 13
76123: PUSH
76124: LD_INT 14
76126: PUSH
76127: LD_INT 15
76129: PUSH
76130: LD_INT 16
76132: PUSH
76133: LD_INT 17
76135: PUSH
76136: LD_INT 18
76138: PUSH
76139: LD_INT 19
76141: PUSH
76142: LD_INT 20
76144: PUSH
76145: LD_INT 21
76147: PUSH
76148: LD_INT 22
76150: PUSH
76151: LD_INT 23
76153: PUSH
76154: LD_INT 24
76156: PUSH
76157: LD_INT 25
76159: PUSH
76160: LD_INT 26
76162: PUSH
76163: LD_INT 27
76165: PUSH
76166: LD_INT 28
76168: PUSH
76169: LD_INT 29
76171: PUSH
76172: LD_INT 30
76174: PUSH
76175: LD_INT 31
76177: PUSH
76178: LD_INT 32
76180: PUSH
76181: LD_INT 33
76183: PUSH
76184: LD_INT 34
76186: PUSH
76187: LD_INT 36
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: LIST
76194: LIST
76195: LIST
76196: LIST
76197: LIST
76198: LIST
76199: LIST
76200: LIST
76201: LIST
76202: LIST
76203: LIST
76204: LIST
76205: LIST
76206: LIST
76207: LIST
76208: LIST
76209: LIST
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: LIST
76215: LIST
76216: LIST
76217: LIST
76218: LIST
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: LIST
76224: LIST
76225: LIST
76226: PUSH
76227: LD_INT 101
76229: PUSH
76230: LD_INT 102
76232: PUSH
76233: LD_INT 103
76235: PUSH
76236: LD_INT 104
76238: PUSH
76239: LD_INT 105
76241: PUSH
76242: LD_INT 106
76244: PUSH
76245: LD_INT 107
76247: PUSH
76248: LD_INT 108
76250: PUSH
76251: LD_INT 109
76253: PUSH
76254: LD_INT 110
76256: PUSH
76257: LD_INT 111
76259: PUSH
76260: LD_INT 112
76262: PUSH
76263: LD_INT 113
76265: PUSH
76266: LD_INT 114
76268: PUSH
76269: LD_INT 116
76271: PUSH
76272: LD_INT 117
76274: PUSH
76275: LD_INT 118
76277: PUSH
76278: EMPTY
76279: LIST
76280: LIST
76281: LIST
76282: LIST
76283: LIST
76284: LIST
76285: LIST
76286: LIST
76287: LIST
76288: LIST
76289: LIST
76290: LIST
76291: LIST
76292: LIST
76293: LIST
76294: LIST
76295: LIST
76296: PUSH
76297: EMPTY
76298: LIST
76299: LIST
76300: ST_TO_ADDR
76301: GO 76700
76303: LD_INT 18
76305: DOUBLE
76306: EQUAL
76307: IFTRUE 76311
76309: GO 76459
76311: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
76312: LD_ADDR_VAR 0 2
76316: PUSH
76317: LD_INT 2
76319: PUSH
76320: LD_INT 4
76322: PUSH
76323: LD_INT 5
76325: PUSH
76326: LD_INT 7
76328: PUSH
76329: LD_INT 11
76331: PUSH
76332: LD_INT 12
76334: PUSH
76335: LD_INT 15
76337: PUSH
76338: LD_INT 16
76340: PUSH
76341: LD_INT 20
76343: PUSH
76344: LD_INT 21
76346: PUSH
76347: LD_INT 22
76349: PUSH
76350: LD_INT 23
76352: PUSH
76353: LD_INT 25
76355: PUSH
76356: LD_INT 26
76358: PUSH
76359: LD_INT 30
76361: PUSH
76362: LD_INT 31
76364: PUSH
76365: LD_INT 32
76367: PUSH
76368: LD_INT 33
76370: PUSH
76371: LD_INT 34
76373: PUSH
76374: LD_INT 35
76376: PUSH
76377: LD_INT 36
76379: PUSH
76380: EMPTY
76381: LIST
76382: LIST
76383: LIST
76384: LIST
76385: LIST
76386: LIST
76387: LIST
76388: LIST
76389: LIST
76390: LIST
76391: LIST
76392: LIST
76393: LIST
76394: LIST
76395: LIST
76396: LIST
76397: LIST
76398: LIST
76399: LIST
76400: LIST
76401: LIST
76402: PUSH
76403: LD_INT 101
76405: PUSH
76406: LD_INT 102
76408: PUSH
76409: LD_INT 103
76411: PUSH
76412: LD_INT 106
76414: PUSH
76415: LD_INT 108
76417: PUSH
76418: LD_INT 112
76420: PUSH
76421: LD_INT 113
76423: PUSH
76424: LD_INT 114
76426: PUSH
76427: LD_INT 115
76429: PUSH
76430: LD_INT 116
76432: PUSH
76433: LD_INT 117
76435: PUSH
76436: LD_INT 118
76438: PUSH
76439: EMPTY
76440: LIST
76441: LIST
76442: LIST
76443: LIST
76444: LIST
76445: LIST
76446: LIST
76447: LIST
76448: LIST
76449: LIST
76450: LIST
76451: LIST
76452: PUSH
76453: EMPTY
76454: LIST
76455: LIST
76456: ST_TO_ADDR
76457: GO 76700
76459: LD_INT 19
76461: DOUBLE
76462: EQUAL
76463: IFTRUE 76467
76465: GO 76699
76467: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
76468: LD_ADDR_VAR 0 2
76472: PUSH
76473: LD_INT 1
76475: PUSH
76476: LD_INT 2
76478: PUSH
76479: LD_INT 3
76481: PUSH
76482: LD_INT 4
76484: PUSH
76485: LD_INT 5
76487: PUSH
76488: LD_INT 6
76490: PUSH
76491: LD_INT 7
76493: PUSH
76494: LD_INT 8
76496: PUSH
76497: LD_INT 9
76499: PUSH
76500: LD_INT 10
76502: PUSH
76503: LD_INT 11
76505: PUSH
76506: LD_INT 12
76508: PUSH
76509: LD_INT 13
76511: PUSH
76512: LD_INT 14
76514: PUSH
76515: LD_INT 15
76517: PUSH
76518: LD_INT 16
76520: PUSH
76521: LD_INT 17
76523: PUSH
76524: LD_INT 18
76526: PUSH
76527: LD_INT 19
76529: PUSH
76530: LD_INT 20
76532: PUSH
76533: LD_INT 21
76535: PUSH
76536: LD_INT 22
76538: PUSH
76539: LD_INT 23
76541: PUSH
76542: LD_INT 24
76544: PUSH
76545: LD_INT 25
76547: PUSH
76548: LD_INT 26
76550: PUSH
76551: LD_INT 27
76553: PUSH
76554: LD_INT 28
76556: PUSH
76557: LD_INT 29
76559: PUSH
76560: LD_INT 30
76562: PUSH
76563: LD_INT 31
76565: PUSH
76566: LD_INT 32
76568: PUSH
76569: LD_INT 33
76571: PUSH
76572: LD_INT 34
76574: PUSH
76575: LD_INT 35
76577: PUSH
76578: LD_INT 36
76580: PUSH
76581: EMPTY
76582: LIST
76583: LIST
76584: LIST
76585: LIST
76586: LIST
76587: LIST
76588: LIST
76589: LIST
76590: LIST
76591: LIST
76592: LIST
76593: LIST
76594: LIST
76595: LIST
76596: LIST
76597: LIST
76598: LIST
76599: LIST
76600: LIST
76601: LIST
76602: LIST
76603: LIST
76604: LIST
76605: LIST
76606: LIST
76607: LIST
76608: LIST
76609: LIST
76610: LIST
76611: LIST
76612: LIST
76613: LIST
76614: LIST
76615: LIST
76616: LIST
76617: LIST
76618: PUSH
76619: LD_INT 101
76621: PUSH
76622: LD_INT 102
76624: PUSH
76625: LD_INT 103
76627: PUSH
76628: LD_INT 104
76630: PUSH
76631: LD_INT 105
76633: PUSH
76634: LD_INT 106
76636: PUSH
76637: LD_INT 107
76639: PUSH
76640: LD_INT 108
76642: PUSH
76643: LD_INT 109
76645: PUSH
76646: LD_INT 110
76648: PUSH
76649: LD_INT 111
76651: PUSH
76652: LD_INT 112
76654: PUSH
76655: LD_INT 113
76657: PUSH
76658: LD_INT 114
76660: PUSH
76661: LD_INT 115
76663: PUSH
76664: LD_INT 116
76666: PUSH
76667: LD_INT 117
76669: PUSH
76670: LD_INT 118
76672: PUSH
76673: EMPTY
76674: LIST
76675: LIST
76676: LIST
76677: LIST
76678: LIST
76679: LIST
76680: LIST
76681: LIST
76682: LIST
76683: LIST
76684: LIST
76685: LIST
76686: LIST
76687: LIST
76688: LIST
76689: LIST
76690: LIST
76691: LIST
76692: PUSH
76693: EMPTY
76694: LIST
76695: LIST
76696: ST_TO_ADDR
76697: GO 76700
76699: POP
// end else
76700: GO 76931
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
76702: LD_ADDR_VAR 0 2
76706: PUSH
76707: LD_INT 1
76709: PUSH
76710: LD_INT 2
76712: PUSH
76713: LD_INT 3
76715: PUSH
76716: LD_INT 4
76718: PUSH
76719: LD_INT 5
76721: PUSH
76722: LD_INT 6
76724: PUSH
76725: LD_INT 7
76727: PUSH
76728: LD_INT 8
76730: PUSH
76731: LD_INT 9
76733: PUSH
76734: LD_INT 10
76736: PUSH
76737: LD_INT 11
76739: PUSH
76740: LD_INT 12
76742: PUSH
76743: LD_INT 13
76745: PUSH
76746: LD_INT 14
76748: PUSH
76749: LD_INT 15
76751: PUSH
76752: LD_INT 16
76754: PUSH
76755: LD_INT 17
76757: PUSH
76758: LD_INT 18
76760: PUSH
76761: LD_INT 19
76763: PUSH
76764: LD_INT 20
76766: PUSH
76767: LD_INT 21
76769: PUSH
76770: LD_INT 22
76772: PUSH
76773: LD_INT 23
76775: PUSH
76776: LD_INT 24
76778: PUSH
76779: LD_INT 25
76781: PUSH
76782: LD_INT 26
76784: PUSH
76785: LD_INT 27
76787: PUSH
76788: LD_INT 28
76790: PUSH
76791: LD_INT 29
76793: PUSH
76794: LD_INT 30
76796: PUSH
76797: LD_INT 31
76799: PUSH
76800: LD_INT 32
76802: PUSH
76803: LD_INT 33
76805: PUSH
76806: LD_INT 34
76808: PUSH
76809: LD_INT 35
76811: PUSH
76812: LD_INT 36
76814: PUSH
76815: EMPTY
76816: LIST
76817: LIST
76818: LIST
76819: LIST
76820: LIST
76821: LIST
76822: LIST
76823: LIST
76824: LIST
76825: LIST
76826: LIST
76827: LIST
76828: LIST
76829: LIST
76830: LIST
76831: LIST
76832: LIST
76833: LIST
76834: LIST
76835: LIST
76836: LIST
76837: LIST
76838: LIST
76839: LIST
76840: LIST
76841: LIST
76842: LIST
76843: LIST
76844: LIST
76845: LIST
76846: LIST
76847: LIST
76848: LIST
76849: LIST
76850: LIST
76851: LIST
76852: PUSH
76853: LD_INT 101
76855: PUSH
76856: LD_INT 102
76858: PUSH
76859: LD_INT 103
76861: PUSH
76862: LD_INT 104
76864: PUSH
76865: LD_INT 105
76867: PUSH
76868: LD_INT 106
76870: PUSH
76871: LD_INT 107
76873: PUSH
76874: LD_INT 108
76876: PUSH
76877: LD_INT 109
76879: PUSH
76880: LD_INT 110
76882: PUSH
76883: LD_INT 111
76885: PUSH
76886: LD_INT 112
76888: PUSH
76889: LD_INT 113
76891: PUSH
76892: LD_INT 114
76894: PUSH
76895: LD_INT 115
76897: PUSH
76898: LD_INT 116
76900: PUSH
76901: LD_INT 117
76903: PUSH
76904: LD_INT 118
76906: PUSH
76907: EMPTY
76908: LIST
76909: LIST
76910: LIST
76911: LIST
76912: LIST
76913: LIST
76914: LIST
76915: LIST
76916: LIST
76917: LIST
76918: LIST
76919: LIST
76920: LIST
76921: LIST
76922: LIST
76923: LIST
76924: LIST
76925: LIST
76926: PUSH
76927: EMPTY
76928: LIST
76929: LIST
76930: ST_TO_ADDR
// if result then
76931: LD_VAR 0 2
76935: IFFALSE 77721
// begin normal :=  ;
76937: LD_ADDR_VAR 0 5
76941: PUSH
76942: LD_STRING 
76944: ST_TO_ADDR
// hardcore :=  ;
76945: LD_ADDR_VAR 0 6
76949: PUSH
76950: LD_STRING 
76952: ST_TO_ADDR
// active :=  ;
76953: LD_ADDR_VAR 0 7
76957: PUSH
76958: LD_STRING 
76960: ST_TO_ADDR
// for i = 1 to normalCounter do
76961: LD_ADDR_VAR 0 8
76965: PUSH
76966: DOUBLE
76967: LD_INT 1
76969: DEC
76970: ST_TO_ADDR
76971: LD_EXP 65
76975: PUSH
76976: FOR_TO
76977: IFFALSE 77078
// begin tmp := 0 ;
76979: LD_ADDR_VAR 0 3
76983: PUSH
76984: LD_STRING 0
76986: ST_TO_ADDR
// if result [ 1 ] then
76987: LD_VAR 0 2
76991: PUSH
76992: LD_INT 1
76994: ARRAY
76995: IFFALSE 77060
// if result [ 1 ] [ 1 ] = i then
76997: LD_VAR 0 2
77001: PUSH
77002: LD_INT 1
77004: ARRAY
77005: PUSH
77006: LD_INT 1
77008: ARRAY
77009: PUSH
77010: LD_VAR 0 8
77014: EQUAL
77015: IFFALSE 77060
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
77017: LD_ADDR_VAR 0 2
77021: PUSH
77022: LD_VAR 0 2
77026: PPUSH
77027: LD_INT 1
77029: PPUSH
77030: LD_VAR 0 2
77034: PUSH
77035: LD_INT 1
77037: ARRAY
77038: PPUSH
77039: LD_INT 1
77041: PPUSH
77042: CALL_OW 3
77046: PPUSH
77047: CALL_OW 1
77051: ST_TO_ADDR
// tmp := 1 ;
77052: LD_ADDR_VAR 0 3
77056: PUSH
77057: LD_STRING 1
77059: ST_TO_ADDR
// end ; normal := normal & tmp ;
77060: LD_ADDR_VAR 0 5
77064: PUSH
77065: LD_VAR 0 5
77069: PUSH
77070: LD_VAR 0 3
77074: STR
77075: ST_TO_ADDR
// end ;
77076: GO 76976
77078: POP
77079: POP
// for i = 1 to hardcoreCounter do
77080: LD_ADDR_VAR 0 8
77084: PUSH
77085: DOUBLE
77086: LD_INT 1
77088: DEC
77089: ST_TO_ADDR
77090: LD_EXP 66
77094: PUSH
77095: FOR_TO
77096: IFFALSE 77201
// begin tmp := 0 ;
77098: LD_ADDR_VAR 0 3
77102: PUSH
77103: LD_STRING 0
77105: ST_TO_ADDR
// if result [ 2 ] then
77106: LD_VAR 0 2
77110: PUSH
77111: LD_INT 2
77113: ARRAY
77114: IFFALSE 77183
// if result [ 2 ] [ 1 ] = 100 + i then
77116: LD_VAR 0 2
77120: PUSH
77121: LD_INT 2
77123: ARRAY
77124: PUSH
77125: LD_INT 1
77127: ARRAY
77128: PUSH
77129: LD_INT 100
77131: PUSH
77132: LD_VAR 0 8
77136: PLUS
77137: EQUAL
77138: IFFALSE 77183
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
77140: LD_ADDR_VAR 0 2
77144: PUSH
77145: LD_VAR 0 2
77149: PPUSH
77150: LD_INT 2
77152: PPUSH
77153: LD_VAR 0 2
77157: PUSH
77158: LD_INT 2
77160: ARRAY
77161: PPUSH
77162: LD_INT 1
77164: PPUSH
77165: CALL_OW 3
77169: PPUSH
77170: CALL_OW 1
77174: ST_TO_ADDR
// tmp := 1 ;
77175: LD_ADDR_VAR 0 3
77179: PUSH
77180: LD_STRING 1
77182: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
77183: LD_ADDR_VAR 0 6
77187: PUSH
77188: LD_VAR 0 6
77192: PUSH
77193: LD_VAR 0 3
77197: STR
77198: ST_TO_ADDR
// end ;
77199: GO 77095
77201: POP
77202: POP
// if isGameLoad then
77203: LD_VAR 0 1
77207: IFFALSE 77682
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
77209: LD_ADDR_VAR 0 4
77213: PUSH
77214: LD_EXP 69
77218: PUSH
77219: LD_EXP 68
77223: PUSH
77224: LD_EXP 70
77228: PUSH
77229: LD_EXP 67
77233: PUSH
77234: LD_EXP 71
77238: PUSH
77239: LD_EXP 72
77243: PUSH
77244: LD_EXP 73
77248: PUSH
77249: LD_EXP 74
77253: PUSH
77254: LD_EXP 75
77258: PUSH
77259: LD_EXP 76
77263: PUSH
77264: LD_EXP 77
77268: PUSH
77269: LD_EXP 78
77273: PUSH
77274: LD_EXP 79
77278: PUSH
77279: LD_EXP 80
77283: PUSH
77284: LD_EXP 88
77288: PUSH
77289: LD_EXP 89
77293: PUSH
77294: LD_EXP 90
77298: PUSH
77299: LD_EXP 91
77303: PUSH
77304: LD_EXP 93
77308: PUSH
77309: LD_EXP 94
77313: PUSH
77314: LD_EXP 95
77318: PUSH
77319: LD_EXP 98
77323: PUSH
77324: LD_EXP 100
77328: PUSH
77329: LD_EXP 101
77333: PUSH
77334: LD_EXP 102
77338: PUSH
77339: LD_EXP 104
77343: PUSH
77344: LD_EXP 105
77348: PUSH
77349: LD_EXP 108
77353: PUSH
77354: LD_EXP 109
77358: PUSH
77359: LD_EXP 110
77363: PUSH
77364: LD_EXP 111
77368: PUSH
77369: LD_EXP 112
77373: PUSH
77374: LD_EXP 113
77378: PUSH
77379: LD_EXP 114
77383: PUSH
77384: LD_EXP 115
77388: PUSH
77389: LD_EXP 116
77393: PUSH
77394: LD_EXP 81
77398: PUSH
77399: LD_EXP 82
77403: PUSH
77404: LD_EXP 85
77408: PUSH
77409: LD_EXP 86
77413: PUSH
77414: LD_EXP 87
77418: PUSH
77419: LD_EXP 83
77423: PUSH
77424: LD_EXP 84
77428: PUSH
77429: LD_EXP 92
77433: PUSH
77434: LD_EXP 96
77438: PUSH
77439: LD_EXP 97
77443: PUSH
77444: LD_EXP 99
77448: PUSH
77449: LD_EXP 103
77453: PUSH
77454: LD_EXP 106
77458: PUSH
77459: LD_EXP 107
77463: PUSH
77464: LD_EXP 117
77468: PUSH
77469: LD_EXP 118
77473: PUSH
77474: LD_EXP 119
77478: PUSH
77479: LD_EXP 120
77483: PUSH
77484: EMPTY
77485: LIST
77486: LIST
77487: LIST
77488: LIST
77489: LIST
77490: LIST
77491: LIST
77492: LIST
77493: LIST
77494: LIST
77495: LIST
77496: LIST
77497: LIST
77498: LIST
77499: LIST
77500: LIST
77501: LIST
77502: LIST
77503: LIST
77504: LIST
77505: LIST
77506: LIST
77507: LIST
77508: LIST
77509: LIST
77510: LIST
77511: LIST
77512: LIST
77513: LIST
77514: LIST
77515: LIST
77516: LIST
77517: LIST
77518: LIST
77519: LIST
77520: LIST
77521: LIST
77522: LIST
77523: LIST
77524: LIST
77525: LIST
77526: LIST
77527: LIST
77528: LIST
77529: LIST
77530: LIST
77531: LIST
77532: LIST
77533: LIST
77534: LIST
77535: LIST
77536: LIST
77537: LIST
77538: LIST
77539: ST_TO_ADDR
// tmp :=  ;
77540: LD_ADDR_VAR 0 3
77544: PUSH
77545: LD_STRING 
77547: ST_TO_ADDR
// for i = 1 to normalCounter do
77548: LD_ADDR_VAR 0 8
77552: PUSH
77553: DOUBLE
77554: LD_INT 1
77556: DEC
77557: ST_TO_ADDR
77558: LD_EXP 65
77562: PUSH
77563: FOR_TO
77564: IFFALSE 77600
// begin if flags [ i ] then
77566: LD_VAR 0 4
77570: PUSH
77571: LD_VAR 0 8
77575: ARRAY
77576: IFFALSE 77598
// tmp := tmp & i & ; ;
77578: LD_ADDR_VAR 0 3
77582: PUSH
77583: LD_VAR 0 3
77587: PUSH
77588: LD_VAR 0 8
77592: STR
77593: PUSH
77594: LD_STRING ;
77596: STR
77597: ST_TO_ADDR
// end ;
77598: GO 77563
77600: POP
77601: POP
// for i = 1 to hardcoreCounter do
77602: LD_ADDR_VAR 0 8
77606: PUSH
77607: DOUBLE
77608: LD_INT 1
77610: DEC
77611: ST_TO_ADDR
77612: LD_EXP 66
77616: PUSH
77617: FOR_TO
77618: IFFALSE 77664
// begin if flags [ normalCounter + i ] then
77620: LD_VAR 0 4
77624: PUSH
77625: LD_EXP 65
77629: PUSH
77630: LD_VAR 0 8
77634: PLUS
77635: ARRAY
77636: IFFALSE 77662
// tmp := tmp & ( 100 + i ) & ; ;
77638: LD_ADDR_VAR 0 3
77642: PUSH
77643: LD_VAR 0 3
77647: PUSH
77648: LD_INT 100
77650: PUSH
77651: LD_VAR 0 8
77655: PLUS
77656: STR
77657: PUSH
77658: LD_STRING ;
77660: STR
77661: ST_TO_ADDR
// end ;
77662: GO 77617
77664: POP
77665: POP
// if tmp then
77666: LD_VAR 0 3
77670: IFFALSE 77682
// active := tmp ;
77672: LD_ADDR_VAR 0 7
77676: PUSH
77677: LD_VAR 0 3
77681: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
77682: LD_STRING getStreamItemsFromMission("
77684: PUSH
77685: LD_VAR 0 5
77689: STR
77690: PUSH
77691: LD_STRING ","
77693: STR
77694: PUSH
77695: LD_VAR 0 6
77699: STR
77700: PUSH
77701: LD_STRING ","
77703: STR
77704: PUSH
77705: LD_VAR 0 7
77709: STR
77710: PUSH
77711: LD_STRING ")
77713: STR
77714: PPUSH
77715: CALL_OW 559
// end else
77719: GO 77728
// ToLua ( getStreamItemsFromMission("","","") ) ;
77721: LD_STRING getStreamItemsFromMission("","","")
77723: PPUSH
77724: CALL_OW 559
// end ;
77728: LD_VAR 0 2
77732: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
77733: LD_EXP 64
77737: PUSH
77738: LD_EXP 69
77742: AND
77743: IFFALSE 77867
77745: GO 77747
77747: DISABLE
77748: LD_INT 0
77750: PPUSH
77751: PPUSH
// begin enable ;
77752: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
77753: LD_ADDR_VAR 0 2
77757: PUSH
77758: LD_INT 22
77760: PUSH
77761: LD_OWVAR 2
77765: PUSH
77766: EMPTY
77767: LIST
77768: LIST
77769: PUSH
77770: LD_INT 2
77772: PUSH
77773: LD_INT 34
77775: PUSH
77776: LD_INT 7
77778: PUSH
77779: EMPTY
77780: LIST
77781: LIST
77782: PUSH
77783: LD_INT 34
77785: PUSH
77786: LD_INT 45
77788: PUSH
77789: EMPTY
77790: LIST
77791: LIST
77792: PUSH
77793: LD_INT 34
77795: PUSH
77796: LD_INT 28
77798: PUSH
77799: EMPTY
77800: LIST
77801: LIST
77802: PUSH
77803: LD_INT 34
77805: PUSH
77806: LD_INT 47
77808: PUSH
77809: EMPTY
77810: LIST
77811: LIST
77812: PUSH
77813: EMPTY
77814: LIST
77815: LIST
77816: LIST
77817: LIST
77818: LIST
77819: PUSH
77820: EMPTY
77821: LIST
77822: LIST
77823: PPUSH
77824: CALL_OW 69
77828: ST_TO_ADDR
// if not tmp then
77829: LD_VAR 0 2
77833: NOT
77834: IFFALSE 77838
// exit ;
77836: GO 77867
// for i in tmp do
77838: LD_ADDR_VAR 0 1
77842: PUSH
77843: LD_VAR 0 2
77847: PUSH
77848: FOR_IN
77849: IFFALSE 77865
// begin SetLives ( i , 0 ) ;
77851: LD_VAR 0 1
77855: PPUSH
77856: LD_INT 0
77858: PPUSH
77859: CALL_OW 234
// end ;
77863: GO 77848
77865: POP
77866: POP
// end ;
77867: PPOPN 2
77869: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
77870: LD_EXP 64
77874: PUSH
77875: LD_EXP 70
77879: AND
77880: IFFALSE 77964
77882: GO 77884
77884: DISABLE
77885: LD_INT 0
77887: PPUSH
77888: PPUSH
// begin enable ;
77889: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
77890: LD_ADDR_VAR 0 2
77894: PUSH
77895: LD_INT 22
77897: PUSH
77898: LD_OWVAR 2
77902: PUSH
77903: EMPTY
77904: LIST
77905: LIST
77906: PUSH
77907: LD_INT 32
77909: PUSH
77910: LD_INT 3
77912: PUSH
77913: EMPTY
77914: LIST
77915: LIST
77916: PUSH
77917: EMPTY
77918: LIST
77919: LIST
77920: PPUSH
77921: CALL_OW 69
77925: ST_TO_ADDR
// if not tmp then
77926: LD_VAR 0 2
77930: NOT
77931: IFFALSE 77935
// exit ;
77933: GO 77964
// for i in tmp do
77935: LD_ADDR_VAR 0 1
77939: PUSH
77940: LD_VAR 0 2
77944: PUSH
77945: FOR_IN
77946: IFFALSE 77962
// begin SetLives ( i , 0 ) ;
77948: LD_VAR 0 1
77952: PPUSH
77953: LD_INT 0
77955: PPUSH
77956: CALL_OW 234
// end ;
77960: GO 77945
77962: POP
77963: POP
// end ;
77964: PPOPN 2
77966: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
77967: LD_EXP 64
77971: PUSH
77972: LD_EXP 67
77976: AND
77977: IFFALSE 78070
77979: GO 77981
77981: DISABLE
77982: LD_INT 0
77984: PPUSH
// begin enable ;
77985: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
77986: LD_ADDR_VAR 0 1
77990: PUSH
77991: LD_INT 22
77993: PUSH
77994: LD_OWVAR 2
77998: PUSH
77999: EMPTY
78000: LIST
78001: LIST
78002: PUSH
78003: LD_INT 2
78005: PUSH
78006: LD_INT 25
78008: PUSH
78009: LD_INT 5
78011: PUSH
78012: EMPTY
78013: LIST
78014: LIST
78015: PUSH
78016: LD_INT 25
78018: PUSH
78019: LD_INT 9
78021: PUSH
78022: EMPTY
78023: LIST
78024: LIST
78025: PUSH
78026: LD_INT 25
78028: PUSH
78029: LD_INT 8
78031: PUSH
78032: EMPTY
78033: LIST
78034: LIST
78035: PUSH
78036: EMPTY
78037: LIST
78038: LIST
78039: LIST
78040: LIST
78041: PUSH
78042: EMPTY
78043: LIST
78044: LIST
78045: PPUSH
78046: CALL_OW 69
78050: PUSH
78051: FOR_IN
78052: IFFALSE 78068
// begin SetClass ( i , 1 ) ;
78054: LD_VAR 0 1
78058: PPUSH
78059: LD_INT 1
78061: PPUSH
78062: CALL_OW 336
// end ;
78066: GO 78051
78068: POP
78069: POP
// end ;
78070: PPOPN 1
78072: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
78073: LD_EXP 64
78077: PUSH
78078: LD_EXP 68
78082: AND
78083: PUSH
78084: LD_OWVAR 65
78088: PUSH
78089: LD_INT 7
78091: LESS
78092: AND
78093: IFFALSE 78107
78095: GO 78097
78097: DISABLE
// begin enable ;
78098: ENABLE
// game_speed := 7 ;
78099: LD_ADDR_OWVAR 65
78103: PUSH
78104: LD_INT 7
78106: ST_TO_ADDR
// end ;
78107: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
78108: LD_EXP 64
78112: PUSH
78113: LD_EXP 71
78117: AND
78118: IFFALSE 78320
78120: GO 78122
78122: DISABLE
78123: LD_INT 0
78125: PPUSH
78126: PPUSH
78127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
78128: LD_ADDR_VAR 0 3
78132: PUSH
78133: LD_INT 81
78135: PUSH
78136: LD_OWVAR 2
78140: PUSH
78141: EMPTY
78142: LIST
78143: LIST
78144: PUSH
78145: LD_INT 21
78147: PUSH
78148: LD_INT 1
78150: PUSH
78151: EMPTY
78152: LIST
78153: LIST
78154: PUSH
78155: EMPTY
78156: LIST
78157: LIST
78158: PPUSH
78159: CALL_OW 69
78163: ST_TO_ADDR
// if not tmp then
78164: LD_VAR 0 3
78168: NOT
78169: IFFALSE 78173
// exit ;
78171: GO 78320
// if tmp > 5 then
78173: LD_VAR 0 3
78177: PUSH
78178: LD_INT 5
78180: GREATER
78181: IFFALSE 78193
// k := 5 else
78183: LD_ADDR_VAR 0 2
78187: PUSH
78188: LD_INT 5
78190: ST_TO_ADDR
78191: GO 78203
// k := tmp ;
78193: LD_ADDR_VAR 0 2
78197: PUSH
78198: LD_VAR 0 3
78202: ST_TO_ADDR
// for i := 1 to k do
78203: LD_ADDR_VAR 0 1
78207: PUSH
78208: DOUBLE
78209: LD_INT 1
78211: DEC
78212: ST_TO_ADDR
78213: LD_VAR 0 2
78217: PUSH
78218: FOR_TO
78219: IFFALSE 78318
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
78221: LD_VAR 0 3
78225: PUSH
78226: LD_VAR 0 1
78230: ARRAY
78231: PPUSH
78232: LD_VAR 0 1
78236: PUSH
78237: LD_INT 4
78239: MOD
78240: PUSH
78241: LD_INT 1
78243: PLUS
78244: PPUSH
78245: CALL_OW 259
78249: PUSH
78250: LD_INT 10
78252: LESS
78253: IFFALSE 78316
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
78255: LD_VAR 0 3
78259: PUSH
78260: LD_VAR 0 1
78264: ARRAY
78265: PPUSH
78266: LD_VAR 0 1
78270: PUSH
78271: LD_INT 4
78273: MOD
78274: PUSH
78275: LD_INT 1
78277: PLUS
78278: PPUSH
78279: LD_VAR 0 3
78283: PUSH
78284: LD_VAR 0 1
78288: ARRAY
78289: PPUSH
78290: LD_VAR 0 1
78294: PUSH
78295: LD_INT 4
78297: MOD
78298: PUSH
78299: LD_INT 1
78301: PLUS
78302: PPUSH
78303: CALL_OW 259
78307: PUSH
78308: LD_INT 1
78310: PLUS
78311: PPUSH
78312: CALL_OW 237
78316: GO 78218
78318: POP
78319: POP
// end ;
78320: PPOPN 3
78322: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
78323: LD_EXP 64
78327: PUSH
78328: LD_EXP 72
78332: AND
78333: IFFALSE 78353
78335: GO 78337
78337: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
78338: LD_INT 4
78340: PPUSH
78341: LD_OWVAR 2
78345: PPUSH
78346: LD_INT 0
78348: PPUSH
78349: CALL_OW 324
78353: END
// every 0 0$1 trigger StreamModeActive and sShovel do
78354: LD_EXP 64
78358: PUSH
78359: LD_EXP 101
78363: AND
78364: IFFALSE 78384
78366: GO 78368
78368: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
78369: LD_INT 19
78371: PPUSH
78372: LD_OWVAR 2
78376: PPUSH
78377: LD_INT 0
78379: PPUSH
78380: CALL_OW 324
78384: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
78385: LD_EXP 64
78389: PUSH
78390: LD_EXP 73
78394: AND
78395: IFFALSE 78497
78397: GO 78399
78399: DISABLE
78400: LD_INT 0
78402: PPUSH
78403: PPUSH
// begin enable ;
78404: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
78405: LD_ADDR_VAR 0 2
78409: PUSH
78410: LD_INT 22
78412: PUSH
78413: LD_OWVAR 2
78417: PUSH
78418: EMPTY
78419: LIST
78420: LIST
78421: PUSH
78422: LD_INT 2
78424: PUSH
78425: LD_INT 34
78427: PUSH
78428: LD_INT 11
78430: PUSH
78431: EMPTY
78432: LIST
78433: LIST
78434: PUSH
78435: LD_INT 34
78437: PUSH
78438: LD_INT 30
78440: PUSH
78441: EMPTY
78442: LIST
78443: LIST
78444: PUSH
78445: EMPTY
78446: LIST
78447: LIST
78448: LIST
78449: PUSH
78450: EMPTY
78451: LIST
78452: LIST
78453: PPUSH
78454: CALL_OW 69
78458: ST_TO_ADDR
// if not tmp then
78459: LD_VAR 0 2
78463: NOT
78464: IFFALSE 78468
// exit ;
78466: GO 78497
// for i in tmp do
78468: LD_ADDR_VAR 0 1
78472: PUSH
78473: LD_VAR 0 2
78477: PUSH
78478: FOR_IN
78479: IFFALSE 78495
// begin SetLives ( i , 0 ) ;
78481: LD_VAR 0 1
78485: PPUSH
78486: LD_INT 0
78488: PPUSH
78489: CALL_OW 234
// end ;
78493: GO 78478
78495: POP
78496: POP
// end ;
78497: PPOPN 2
78499: END
// every 0 0$1 trigger StreamModeActive and sBunker do
78500: LD_EXP 64
78504: PUSH
78505: LD_EXP 74
78509: AND
78510: IFFALSE 78530
78512: GO 78514
78514: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
78515: LD_INT 32
78517: PPUSH
78518: LD_OWVAR 2
78522: PPUSH
78523: LD_INT 0
78525: PPUSH
78526: CALL_OW 324
78530: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
78531: LD_EXP 64
78535: PUSH
78536: LD_EXP 75
78540: AND
78541: IFFALSE 78722
78543: GO 78545
78545: DISABLE
78546: LD_INT 0
78548: PPUSH
78549: PPUSH
78550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
78551: LD_ADDR_VAR 0 2
78555: PUSH
78556: LD_INT 22
78558: PUSH
78559: LD_OWVAR 2
78563: PUSH
78564: EMPTY
78565: LIST
78566: LIST
78567: PUSH
78568: LD_INT 33
78570: PUSH
78571: LD_INT 3
78573: PUSH
78574: EMPTY
78575: LIST
78576: LIST
78577: PUSH
78578: EMPTY
78579: LIST
78580: LIST
78581: PPUSH
78582: CALL_OW 69
78586: ST_TO_ADDR
// if not tmp then
78587: LD_VAR 0 2
78591: NOT
78592: IFFALSE 78596
// exit ;
78594: GO 78722
// side := 0 ;
78596: LD_ADDR_VAR 0 3
78600: PUSH
78601: LD_INT 0
78603: ST_TO_ADDR
// for i := 1 to 8 do
78604: LD_ADDR_VAR 0 1
78608: PUSH
78609: DOUBLE
78610: LD_INT 1
78612: DEC
78613: ST_TO_ADDR
78614: LD_INT 8
78616: PUSH
78617: FOR_TO
78618: IFFALSE 78666
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
78620: LD_OWVAR 2
78624: PUSH
78625: LD_VAR 0 1
78629: NONEQUAL
78630: PUSH
78631: LD_OWVAR 2
78635: PPUSH
78636: LD_VAR 0 1
78640: PPUSH
78641: CALL_OW 81
78645: PUSH
78646: LD_INT 2
78648: EQUAL
78649: AND
78650: IFFALSE 78664
// begin side := i ;
78652: LD_ADDR_VAR 0 3
78656: PUSH
78657: LD_VAR 0 1
78661: ST_TO_ADDR
// break ;
78662: GO 78666
// end ;
78664: GO 78617
78666: POP
78667: POP
// if not side then
78668: LD_VAR 0 3
78672: NOT
78673: IFFALSE 78677
// exit ;
78675: GO 78722
// for i := 1 to tmp do
78677: LD_ADDR_VAR 0 1
78681: PUSH
78682: DOUBLE
78683: LD_INT 1
78685: DEC
78686: ST_TO_ADDR
78687: LD_VAR 0 2
78691: PUSH
78692: FOR_TO
78693: IFFALSE 78720
// if Prob ( 60 ) then
78695: LD_INT 60
78697: PPUSH
78698: CALL_OW 13
78702: IFFALSE 78718
// SetSide ( i , side ) ;
78704: LD_VAR 0 1
78708: PPUSH
78709: LD_VAR 0 3
78713: PPUSH
78714: CALL_OW 235
78718: GO 78692
78720: POP
78721: POP
// end ;
78722: PPOPN 3
78724: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
78725: LD_EXP 64
78729: PUSH
78730: LD_EXP 77
78734: AND
78735: IFFALSE 78854
78737: GO 78739
78739: DISABLE
78740: LD_INT 0
78742: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
78743: LD_ADDR_VAR 0 1
78747: PUSH
78748: LD_INT 22
78750: PUSH
78751: LD_OWVAR 2
78755: PUSH
78756: EMPTY
78757: LIST
78758: LIST
78759: PUSH
78760: LD_INT 21
78762: PUSH
78763: LD_INT 1
78765: PUSH
78766: EMPTY
78767: LIST
78768: LIST
78769: PUSH
78770: LD_INT 3
78772: PUSH
78773: LD_INT 23
78775: PUSH
78776: LD_INT 0
78778: PUSH
78779: EMPTY
78780: LIST
78781: LIST
78782: PUSH
78783: EMPTY
78784: LIST
78785: LIST
78786: PUSH
78787: EMPTY
78788: LIST
78789: LIST
78790: LIST
78791: PPUSH
78792: CALL_OW 69
78796: PUSH
78797: FOR_IN
78798: IFFALSE 78852
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
78800: LD_VAR 0 1
78804: PPUSH
78805: CALL_OW 257
78809: PUSH
78810: LD_INT 1
78812: PUSH
78813: LD_INT 2
78815: PUSH
78816: LD_INT 3
78818: PUSH
78819: LD_INT 4
78821: PUSH
78822: EMPTY
78823: LIST
78824: LIST
78825: LIST
78826: LIST
78827: IN
78828: IFFALSE 78850
// SetClass ( un , rand ( 1 , 4 ) ) ;
78830: LD_VAR 0 1
78834: PPUSH
78835: LD_INT 1
78837: PPUSH
78838: LD_INT 4
78840: PPUSH
78841: CALL_OW 12
78845: PPUSH
78846: CALL_OW 336
78850: GO 78797
78852: POP
78853: POP
// end ;
78854: PPOPN 1
78856: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
78857: LD_EXP 64
78861: PUSH
78862: LD_EXP 76
78866: AND
78867: IFFALSE 78946
78869: GO 78871
78871: DISABLE
78872: LD_INT 0
78874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78875: LD_ADDR_VAR 0 1
78879: PUSH
78880: LD_INT 22
78882: PUSH
78883: LD_OWVAR 2
78887: PUSH
78888: EMPTY
78889: LIST
78890: LIST
78891: PUSH
78892: LD_INT 21
78894: PUSH
78895: LD_INT 3
78897: PUSH
78898: EMPTY
78899: LIST
78900: LIST
78901: PUSH
78902: EMPTY
78903: LIST
78904: LIST
78905: PPUSH
78906: CALL_OW 69
78910: ST_TO_ADDR
// if not tmp then
78911: LD_VAR 0 1
78915: NOT
78916: IFFALSE 78920
// exit ;
78918: GO 78946
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
78920: LD_VAR 0 1
78924: PUSH
78925: LD_INT 1
78927: PPUSH
78928: LD_VAR 0 1
78932: PPUSH
78933: CALL_OW 12
78937: ARRAY
78938: PPUSH
78939: LD_INT 100
78941: PPUSH
78942: CALL_OW 234
// end ;
78946: PPOPN 1
78948: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
78949: LD_EXP 64
78953: PUSH
78954: LD_EXP 78
78958: AND
78959: IFFALSE 79057
78961: GO 78963
78963: DISABLE
78964: LD_INT 0
78966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
78967: LD_ADDR_VAR 0 1
78971: PUSH
78972: LD_INT 22
78974: PUSH
78975: LD_OWVAR 2
78979: PUSH
78980: EMPTY
78981: LIST
78982: LIST
78983: PUSH
78984: LD_INT 21
78986: PUSH
78987: LD_INT 1
78989: PUSH
78990: EMPTY
78991: LIST
78992: LIST
78993: PUSH
78994: EMPTY
78995: LIST
78996: LIST
78997: PPUSH
78998: CALL_OW 69
79002: ST_TO_ADDR
// if not tmp then
79003: LD_VAR 0 1
79007: NOT
79008: IFFALSE 79012
// exit ;
79010: GO 79057
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
79012: LD_VAR 0 1
79016: PUSH
79017: LD_INT 1
79019: PPUSH
79020: LD_VAR 0 1
79024: PPUSH
79025: CALL_OW 12
79029: ARRAY
79030: PPUSH
79031: LD_INT 1
79033: PPUSH
79034: LD_INT 4
79036: PPUSH
79037: CALL_OW 12
79041: PPUSH
79042: LD_INT 3000
79044: PPUSH
79045: LD_INT 9000
79047: PPUSH
79048: CALL_OW 12
79052: PPUSH
79053: CALL_OW 492
// end ;
79057: PPOPN 1
79059: END
// every 0 0$1 trigger StreamModeActive and sDepot do
79060: LD_EXP 64
79064: PUSH
79065: LD_EXP 79
79069: AND
79070: IFFALSE 79090
79072: GO 79074
79074: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
79075: LD_INT 1
79077: PPUSH
79078: LD_OWVAR 2
79082: PPUSH
79083: LD_INT 0
79085: PPUSH
79086: CALL_OW 324
79090: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
79091: LD_EXP 64
79095: PUSH
79096: LD_EXP 80
79100: AND
79101: IFFALSE 79184
79103: GO 79105
79105: DISABLE
79106: LD_INT 0
79108: PPUSH
79109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
79110: LD_ADDR_VAR 0 2
79114: PUSH
79115: LD_INT 22
79117: PUSH
79118: LD_OWVAR 2
79122: PUSH
79123: EMPTY
79124: LIST
79125: LIST
79126: PUSH
79127: LD_INT 21
79129: PUSH
79130: LD_INT 3
79132: PUSH
79133: EMPTY
79134: LIST
79135: LIST
79136: PUSH
79137: EMPTY
79138: LIST
79139: LIST
79140: PPUSH
79141: CALL_OW 69
79145: ST_TO_ADDR
// if not tmp then
79146: LD_VAR 0 2
79150: NOT
79151: IFFALSE 79155
// exit ;
79153: GO 79184
// for i in tmp do
79155: LD_ADDR_VAR 0 1
79159: PUSH
79160: LD_VAR 0 2
79164: PUSH
79165: FOR_IN
79166: IFFALSE 79182
// SetBLevel ( i , 10 ) ;
79168: LD_VAR 0 1
79172: PPUSH
79173: LD_INT 10
79175: PPUSH
79176: CALL_OW 241
79180: GO 79165
79182: POP
79183: POP
// end ;
79184: PPOPN 2
79186: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
79187: LD_EXP 64
79191: PUSH
79192: LD_EXP 81
79196: AND
79197: IFFALSE 79308
79199: GO 79201
79201: DISABLE
79202: LD_INT 0
79204: PPUSH
79205: PPUSH
79206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79207: LD_ADDR_VAR 0 3
79211: PUSH
79212: LD_INT 22
79214: PUSH
79215: LD_OWVAR 2
79219: PUSH
79220: EMPTY
79221: LIST
79222: LIST
79223: PUSH
79224: LD_INT 25
79226: PUSH
79227: LD_INT 1
79229: PUSH
79230: EMPTY
79231: LIST
79232: LIST
79233: PUSH
79234: EMPTY
79235: LIST
79236: LIST
79237: PPUSH
79238: CALL_OW 69
79242: ST_TO_ADDR
// if not tmp then
79243: LD_VAR 0 3
79247: NOT
79248: IFFALSE 79252
// exit ;
79250: GO 79308
// un := tmp [ rand ( 1 , tmp ) ] ;
79252: LD_ADDR_VAR 0 2
79256: PUSH
79257: LD_VAR 0 3
79261: PUSH
79262: LD_INT 1
79264: PPUSH
79265: LD_VAR 0 3
79269: PPUSH
79270: CALL_OW 12
79274: ARRAY
79275: ST_TO_ADDR
// if Crawls ( un ) then
79276: LD_VAR 0 2
79280: PPUSH
79281: CALL_OW 318
79285: IFFALSE 79296
// ComWalk ( un ) ;
79287: LD_VAR 0 2
79291: PPUSH
79292: CALL_OW 138
// SetClass ( un , class_sniper ) ;
79296: LD_VAR 0 2
79300: PPUSH
79301: LD_INT 5
79303: PPUSH
79304: CALL_OW 336
// end ;
79308: PPOPN 3
79310: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
79311: LD_EXP 64
79315: PUSH
79316: LD_EXP 82
79320: AND
79321: PUSH
79322: LD_OWVAR 67
79326: PUSH
79327: LD_INT 4
79329: LESS
79330: AND
79331: IFFALSE 79350
79333: GO 79335
79335: DISABLE
// begin Difficulty := Difficulty + 1 ;
79336: LD_ADDR_OWVAR 67
79340: PUSH
79341: LD_OWVAR 67
79345: PUSH
79346: LD_INT 1
79348: PLUS
79349: ST_TO_ADDR
// end ;
79350: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
79351: LD_EXP 64
79355: PUSH
79356: LD_EXP 83
79360: AND
79361: IFFALSE 79464
79363: GO 79365
79365: DISABLE
79366: LD_INT 0
79368: PPUSH
// begin for i := 1 to 5 do
79369: LD_ADDR_VAR 0 1
79373: PUSH
79374: DOUBLE
79375: LD_INT 1
79377: DEC
79378: ST_TO_ADDR
79379: LD_INT 5
79381: PUSH
79382: FOR_TO
79383: IFFALSE 79462
// begin uc_nation := nation_nature ;
79385: LD_ADDR_OWVAR 21
79389: PUSH
79390: LD_INT 0
79392: ST_TO_ADDR
// uc_side := 0 ;
79393: LD_ADDR_OWVAR 20
79397: PUSH
79398: LD_INT 0
79400: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
79401: LD_ADDR_OWVAR 29
79405: PUSH
79406: LD_INT 12
79408: PUSH
79409: LD_INT 12
79411: PUSH
79412: EMPTY
79413: LIST
79414: LIST
79415: ST_TO_ADDR
// hc_agressivity := 20 ;
79416: LD_ADDR_OWVAR 35
79420: PUSH
79421: LD_INT 20
79423: ST_TO_ADDR
// hc_class := class_tiger ;
79424: LD_ADDR_OWVAR 28
79428: PUSH
79429: LD_INT 14
79431: ST_TO_ADDR
// hc_gallery :=  ;
79432: LD_ADDR_OWVAR 33
79436: PUSH
79437: LD_STRING 
79439: ST_TO_ADDR
// hc_name :=  ;
79440: LD_ADDR_OWVAR 26
79444: PUSH
79445: LD_STRING 
79447: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
79448: CALL_OW 44
79452: PPUSH
79453: LD_INT 0
79455: PPUSH
79456: CALL_OW 51
// end ;
79460: GO 79382
79462: POP
79463: POP
// end ;
79464: PPOPN 1
79466: END
// every 0 0$1 trigger StreamModeActive and sBomb do
79467: LD_EXP 64
79471: PUSH
79472: LD_EXP 84
79476: AND
79477: IFFALSE 79486
79479: GO 79481
79481: DISABLE
// StreamSibBomb ;
79482: CALL 79487 0 0
79486: END
// export function StreamSibBomb ; var i , x , y ; begin
79487: LD_INT 0
79489: PPUSH
79490: PPUSH
79491: PPUSH
79492: PPUSH
// result := false ;
79493: LD_ADDR_VAR 0 1
79497: PUSH
79498: LD_INT 0
79500: ST_TO_ADDR
// for i := 1 to 16 do
79501: LD_ADDR_VAR 0 2
79505: PUSH
79506: DOUBLE
79507: LD_INT 1
79509: DEC
79510: ST_TO_ADDR
79511: LD_INT 16
79513: PUSH
79514: FOR_TO
79515: IFFALSE 79714
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
79517: LD_ADDR_VAR 0 3
79521: PUSH
79522: LD_INT 10
79524: PUSH
79525: LD_INT 20
79527: PUSH
79528: LD_INT 30
79530: PUSH
79531: LD_INT 40
79533: PUSH
79534: LD_INT 50
79536: PUSH
79537: LD_INT 60
79539: PUSH
79540: LD_INT 70
79542: PUSH
79543: LD_INT 80
79545: PUSH
79546: LD_INT 90
79548: PUSH
79549: LD_INT 100
79551: PUSH
79552: LD_INT 110
79554: PUSH
79555: LD_INT 120
79557: PUSH
79558: LD_INT 130
79560: PUSH
79561: LD_INT 140
79563: PUSH
79564: LD_INT 150
79566: PUSH
79567: EMPTY
79568: LIST
79569: LIST
79570: LIST
79571: LIST
79572: LIST
79573: LIST
79574: LIST
79575: LIST
79576: LIST
79577: LIST
79578: LIST
79579: LIST
79580: LIST
79581: LIST
79582: LIST
79583: PUSH
79584: LD_INT 1
79586: PPUSH
79587: LD_INT 15
79589: PPUSH
79590: CALL_OW 12
79594: ARRAY
79595: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
79596: LD_ADDR_VAR 0 4
79600: PUSH
79601: LD_INT 10
79603: PUSH
79604: LD_INT 20
79606: PUSH
79607: LD_INT 30
79609: PUSH
79610: LD_INT 40
79612: PUSH
79613: LD_INT 50
79615: PUSH
79616: LD_INT 60
79618: PUSH
79619: LD_INT 70
79621: PUSH
79622: LD_INT 80
79624: PUSH
79625: LD_INT 90
79627: PUSH
79628: LD_INT 100
79630: PUSH
79631: LD_INT 110
79633: PUSH
79634: LD_INT 120
79636: PUSH
79637: LD_INT 130
79639: PUSH
79640: LD_INT 140
79642: PUSH
79643: LD_INT 150
79645: PUSH
79646: EMPTY
79647: LIST
79648: LIST
79649: LIST
79650: LIST
79651: LIST
79652: LIST
79653: LIST
79654: LIST
79655: LIST
79656: LIST
79657: LIST
79658: LIST
79659: LIST
79660: LIST
79661: LIST
79662: PUSH
79663: LD_INT 1
79665: PPUSH
79666: LD_INT 15
79668: PPUSH
79669: CALL_OW 12
79673: ARRAY
79674: ST_TO_ADDR
// if ValidHex ( x , y ) then
79675: LD_VAR 0 3
79679: PPUSH
79680: LD_VAR 0 4
79684: PPUSH
79685: CALL_OW 488
79689: IFFALSE 79712
// begin result := [ x , y ] ;
79691: LD_ADDR_VAR 0 1
79695: PUSH
79696: LD_VAR 0 3
79700: PUSH
79701: LD_VAR 0 4
79705: PUSH
79706: EMPTY
79707: LIST
79708: LIST
79709: ST_TO_ADDR
// break ;
79710: GO 79714
// end ; end ;
79712: GO 79514
79714: POP
79715: POP
// if result then
79716: LD_VAR 0 1
79720: IFFALSE 79780
// begin ToLua ( playSibBomb() ) ;
79722: LD_STRING playSibBomb()
79724: PPUSH
79725: CALL_OW 559
// wait ( 0 0$14 ) ;
79729: LD_INT 490
79731: PPUSH
79732: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
79736: LD_VAR 0 1
79740: PUSH
79741: LD_INT 1
79743: ARRAY
79744: PPUSH
79745: LD_VAR 0 1
79749: PUSH
79750: LD_INT 2
79752: ARRAY
79753: PPUSH
79754: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
79758: LD_VAR 0 1
79762: PUSH
79763: LD_INT 1
79765: ARRAY
79766: PPUSH
79767: LD_VAR 0 1
79771: PUSH
79772: LD_INT 2
79774: ARRAY
79775: PPUSH
79776: CALL_OW 429
// end ; end ;
79780: LD_VAR 0 1
79784: RET
// every 0 0$1 trigger StreamModeActive and sReset do
79785: LD_EXP 64
79789: PUSH
79790: LD_EXP 86
79794: AND
79795: IFFALSE 79807
79797: GO 79799
79799: DISABLE
// YouLost (  ) ;
79800: LD_STRING 
79802: PPUSH
79803: CALL_OW 104
79807: END
// every 0 0$1 trigger StreamModeActive and sFog do
79808: LD_EXP 64
79812: PUSH
79813: LD_EXP 85
79817: AND
79818: IFFALSE 79832
79820: GO 79822
79822: DISABLE
// FogOff ( your_side ) ;
79823: LD_OWVAR 2
79827: PPUSH
79828: CALL_OW 344
79832: END
// every 0 0$1 trigger StreamModeActive and sSun do
79833: LD_EXP 64
79837: PUSH
79838: LD_EXP 87
79842: AND
79843: IFFALSE 79871
79845: GO 79847
79847: DISABLE
// begin solar_recharge_percent := 0 ;
79848: LD_ADDR_OWVAR 79
79852: PUSH
79853: LD_INT 0
79855: ST_TO_ADDR
// wait ( 5 5$00 ) ;
79856: LD_INT 10500
79858: PPUSH
79859: CALL_OW 67
// solar_recharge_percent := 100 ;
79863: LD_ADDR_OWVAR 79
79867: PUSH
79868: LD_INT 100
79870: ST_TO_ADDR
// end ;
79871: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
79872: LD_EXP 64
79876: PUSH
79877: LD_EXP 88
79881: AND
79882: IFFALSE 80121
79884: GO 79886
79886: DISABLE
79887: LD_INT 0
79889: PPUSH
79890: PPUSH
79891: PPUSH
// begin tmp := [ ] ;
79892: LD_ADDR_VAR 0 3
79896: PUSH
79897: EMPTY
79898: ST_TO_ADDR
// for i := 1 to 6 do
79899: LD_ADDR_VAR 0 1
79903: PUSH
79904: DOUBLE
79905: LD_INT 1
79907: DEC
79908: ST_TO_ADDR
79909: LD_INT 6
79911: PUSH
79912: FOR_TO
79913: IFFALSE 80018
// begin uc_nation := nation_nature ;
79915: LD_ADDR_OWVAR 21
79919: PUSH
79920: LD_INT 0
79922: ST_TO_ADDR
// uc_side := 0 ;
79923: LD_ADDR_OWVAR 20
79927: PUSH
79928: LD_INT 0
79930: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
79931: LD_ADDR_OWVAR 29
79935: PUSH
79936: LD_INT 12
79938: PUSH
79939: LD_INT 12
79941: PUSH
79942: EMPTY
79943: LIST
79944: LIST
79945: ST_TO_ADDR
// hc_agressivity := 20 ;
79946: LD_ADDR_OWVAR 35
79950: PUSH
79951: LD_INT 20
79953: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
79954: LD_ADDR_OWVAR 28
79958: PUSH
79959: LD_INT 17
79961: ST_TO_ADDR
// hc_gallery :=  ;
79962: LD_ADDR_OWVAR 33
79966: PUSH
79967: LD_STRING 
79969: ST_TO_ADDR
// hc_name :=  ;
79970: LD_ADDR_OWVAR 26
79974: PUSH
79975: LD_STRING 
79977: ST_TO_ADDR
// un := CreateHuman ;
79978: LD_ADDR_VAR 0 2
79982: PUSH
79983: CALL_OW 44
79987: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
79988: LD_VAR 0 2
79992: PPUSH
79993: LD_INT 1
79995: PPUSH
79996: CALL_OW 51
// tmp := tmp ^ un ;
80000: LD_ADDR_VAR 0 3
80004: PUSH
80005: LD_VAR 0 3
80009: PUSH
80010: LD_VAR 0 2
80014: ADD
80015: ST_TO_ADDR
// end ;
80016: GO 79912
80018: POP
80019: POP
// repeat wait ( 0 0$1 ) ;
80020: LD_INT 35
80022: PPUSH
80023: CALL_OW 67
// for un in tmp do
80027: LD_ADDR_VAR 0 2
80031: PUSH
80032: LD_VAR 0 3
80036: PUSH
80037: FOR_IN
80038: IFFALSE 80112
// begin if IsDead ( un ) then
80040: LD_VAR 0 2
80044: PPUSH
80045: CALL_OW 301
80049: IFFALSE 80069
// begin tmp := tmp diff un ;
80051: LD_ADDR_VAR 0 3
80055: PUSH
80056: LD_VAR 0 3
80060: PUSH
80061: LD_VAR 0 2
80065: DIFF
80066: ST_TO_ADDR
// continue ;
80067: GO 80037
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
80069: LD_VAR 0 2
80073: PPUSH
80074: LD_INT 3
80076: PUSH
80077: LD_INT 22
80079: PUSH
80080: LD_INT 0
80082: PUSH
80083: EMPTY
80084: LIST
80085: LIST
80086: PUSH
80087: EMPTY
80088: LIST
80089: LIST
80090: PPUSH
80091: CALL_OW 69
80095: PPUSH
80096: LD_VAR 0 2
80100: PPUSH
80101: CALL_OW 74
80105: PPUSH
80106: CALL_OW 115
// end ;
80110: GO 80037
80112: POP
80113: POP
// until not tmp ;
80114: LD_VAR 0 3
80118: NOT
80119: IFFALSE 80020
// end ;
80121: PPOPN 3
80123: END
// every 0 0$1 trigger StreamModeActive and sTroll do
80124: LD_EXP 64
80128: PUSH
80129: LD_EXP 89
80133: AND
80134: IFFALSE 80188
80136: GO 80138
80138: DISABLE
// begin ToLua ( displayTroll(); ) ;
80139: LD_STRING displayTroll();
80141: PPUSH
80142: CALL_OW 559
// wait ( 3 3$00 ) ;
80146: LD_INT 6300
80148: PPUSH
80149: CALL_OW 67
// ToLua ( hideTroll(); ) ;
80153: LD_STRING hideTroll();
80155: PPUSH
80156: CALL_OW 559
// wait ( 1 1$00 ) ;
80160: LD_INT 2100
80162: PPUSH
80163: CALL_OW 67
// ToLua ( displayTroll(); ) ;
80167: LD_STRING displayTroll();
80169: PPUSH
80170: CALL_OW 559
// wait ( 1 1$00 ) ;
80174: LD_INT 2100
80176: PPUSH
80177: CALL_OW 67
// ToLua ( hideTroll(); ) ;
80181: LD_STRING hideTroll();
80183: PPUSH
80184: CALL_OW 559
// end ;
80188: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
80189: LD_EXP 64
80193: PUSH
80194: LD_EXP 90
80198: AND
80199: IFFALSE 80262
80201: GO 80203
80203: DISABLE
80204: LD_INT 0
80206: PPUSH
// begin p := 0 ;
80207: LD_ADDR_VAR 0 1
80211: PUSH
80212: LD_INT 0
80214: ST_TO_ADDR
// repeat game_speed := 1 ;
80215: LD_ADDR_OWVAR 65
80219: PUSH
80220: LD_INT 1
80222: ST_TO_ADDR
// wait ( 0 0$1 ) ;
80223: LD_INT 35
80225: PPUSH
80226: CALL_OW 67
// p := p + 1 ;
80230: LD_ADDR_VAR 0 1
80234: PUSH
80235: LD_VAR 0 1
80239: PUSH
80240: LD_INT 1
80242: PLUS
80243: ST_TO_ADDR
// until p >= 60 ;
80244: LD_VAR 0 1
80248: PUSH
80249: LD_INT 60
80251: GREATEREQUAL
80252: IFFALSE 80215
// game_speed := 4 ;
80254: LD_ADDR_OWVAR 65
80258: PUSH
80259: LD_INT 4
80261: ST_TO_ADDR
// end ;
80262: PPOPN 1
80264: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
80265: LD_EXP 64
80269: PUSH
80270: LD_EXP 91
80274: AND
80275: IFFALSE 80421
80277: GO 80279
80279: DISABLE
80280: LD_INT 0
80282: PPUSH
80283: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80284: LD_ADDR_VAR 0 1
80288: PUSH
80289: LD_INT 22
80291: PUSH
80292: LD_OWVAR 2
80296: PUSH
80297: EMPTY
80298: LIST
80299: LIST
80300: PUSH
80301: LD_INT 2
80303: PUSH
80304: LD_INT 30
80306: PUSH
80307: LD_INT 0
80309: PUSH
80310: EMPTY
80311: LIST
80312: LIST
80313: PUSH
80314: LD_INT 30
80316: PUSH
80317: LD_INT 1
80319: PUSH
80320: EMPTY
80321: LIST
80322: LIST
80323: PUSH
80324: EMPTY
80325: LIST
80326: LIST
80327: LIST
80328: PUSH
80329: EMPTY
80330: LIST
80331: LIST
80332: PPUSH
80333: CALL_OW 69
80337: ST_TO_ADDR
// if not depot then
80338: LD_VAR 0 1
80342: NOT
80343: IFFALSE 80347
// exit ;
80345: GO 80421
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
80347: LD_ADDR_VAR 0 2
80351: PUSH
80352: LD_VAR 0 1
80356: PUSH
80357: LD_INT 1
80359: PPUSH
80360: LD_VAR 0 1
80364: PPUSH
80365: CALL_OW 12
80369: ARRAY
80370: PPUSH
80371: CALL_OW 274
80375: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
80376: LD_VAR 0 2
80380: PPUSH
80381: LD_INT 1
80383: PPUSH
80384: LD_INT 0
80386: PPUSH
80387: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
80391: LD_VAR 0 2
80395: PPUSH
80396: LD_INT 2
80398: PPUSH
80399: LD_INT 0
80401: PPUSH
80402: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
80406: LD_VAR 0 2
80410: PPUSH
80411: LD_INT 3
80413: PPUSH
80414: LD_INT 0
80416: PPUSH
80417: CALL_OW 277
// end ;
80421: PPOPN 2
80423: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
80424: LD_EXP 64
80428: PUSH
80429: LD_EXP 92
80433: AND
80434: IFFALSE 80531
80436: GO 80438
80438: DISABLE
80439: LD_INT 0
80441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
80442: LD_ADDR_VAR 0 1
80446: PUSH
80447: LD_INT 22
80449: PUSH
80450: LD_OWVAR 2
80454: PUSH
80455: EMPTY
80456: LIST
80457: LIST
80458: PUSH
80459: LD_INT 21
80461: PUSH
80462: LD_INT 1
80464: PUSH
80465: EMPTY
80466: LIST
80467: LIST
80468: PUSH
80469: LD_INT 3
80471: PUSH
80472: LD_INT 23
80474: PUSH
80475: LD_INT 0
80477: PUSH
80478: EMPTY
80479: LIST
80480: LIST
80481: PUSH
80482: EMPTY
80483: LIST
80484: LIST
80485: PUSH
80486: EMPTY
80487: LIST
80488: LIST
80489: LIST
80490: PPUSH
80491: CALL_OW 69
80495: ST_TO_ADDR
// if not tmp then
80496: LD_VAR 0 1
80500: NOT
80501: IFFALSE 80505
// exit ;
80503: GO 80531
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
80505: LD_VAR 0 1
80509: PUSH
80510: LD_INT 1
80512: PPUSH
80513: LD_VAR 0 1
80517: PPUSH
80518: CALL_OW 12
80522: ARRAY
80523: PPUSH
80524: LD_INT 200
80526: PPUSH
80527: CALL_OW 234
// end ;
80531: PPOPN 1
80533: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
80534: LD_EXP 64
80538: PUSH
80539: LD_EXP 93
80543: AND
80544: IFFALSE 80623
80546: GO 80548
80548: DISABLE
80549: LD_INT 0
80551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
80552: LD_ADDR_VAR 0 1
80556: PUSH
80557: LD_INT 22
80559: PUSH
80560: LD_OWVAR 2
80564: PUSH
80565: EMPTY
80566: LIST
80567: LIST
80568: PUSH
80569: LD_INT 21
80571: PUSH
80572: LD_INT 2
80574: PUSH
80575: EMPTY
80576: LIST
80577: LIST
80578: PUSH
80579: EMPTY
80580: LIST
80581: LIST
80582: PPUSH
80583: CALL_OW 69
80587: ST_TO_ADDR
// if not tmp then
80588: LD_VAR 0 1
80592: NOT
80593: IFFALSE 80597
// exit ;
80595: GO 80623
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
80597: LD_VAR 0 1
80601: PUSH
80602: LD_INT 1
80604: PPUSH
80605: LD_VAR 0 1
80609: PPUSH
80610: CALL_OW 12
80614: ARRAY
80615: PPUSH
80616: LD_INT 60
80618: PPUSH
80619: CALL_OW 234
// end ;
80623: PPOPN 1
80625: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
80626: LD_EXP 64
80630: PUSH
80631: LD_EXP 94
80635: AND
80636: IFFALSE 80735
80638: GO 80640
80640: DISABLE
80641: LD_INT 0
80643: PPUSH
80644: PPUSH
// begin enable ;
80645: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
80646: LD_ADDR_VAR 0 1
80650: PUSH
80651: LD_INT 22
80653: PUSH
80654: LD_OWVAR 2
80658: PUSH
80659: EMPTY
80660: LIST
80661: LIST
80662: PUSH
80663: LD_INT 61
80665: PUSH
80666: EMPTY
80667: LIST
80668: PUSH
80669: LD_INT 33
80671: PUSH
80672: LD_INT 2
80674: PUSH
80675: EMPTY
80676: LIST
80677: LIST
80678: PUSH
80679: EMPTY
80680: LIST
80681: LIST
80682: LIST
80683: PPUSH
80684: CALL_OW 69
80688: ST_TO_ADDR
// if not tmp then
80689: LD_VAR 0 1
80693: NOT
80694: IFFALSE 80698
// exit ;
80696: GO 80735
// for i in tmp do
80698: LD_ADDR_VAR 0 2
80702: PUSH
80703: LD_VAR 0 1
80707: PUSH
80708: FOR_IN
80709: IFFALSE 80733
// if IsControledBy ( i ) then
80711: LD_VAR 0 2
80715: PPUSH
80716: CALL_OW 312
80720: IFFALSE 80731
// ComUnlink ( i ) ;
80722: LD_VAR 0 2
80726: PPUSH
80727: CALL_OW 136
80731: GO 80708
80733: POP
80734: POP
// end ;
80735: PPOPN 2
80737: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
80738: LD_EXP 64
80742: PUSH
80743: LD_EXP 95
80747: AND
80748: IFFALSE 80888
80750: GO 80752
80752: DISABLE
80753: LD_INT 0
80755: PPUSH
80756: PPUSH
// begin ToLua ( displayPowell(); ) ;
80757: LD_STRING displayPowell();
80759: PPUSH
80760: CALL_OW 559
// uc_side := 0 ;
80764: LD_ADDR_OWVAR 20
80768: PUSH
80769: LD_INT 0
80771: ST_TO_ADDR
// uc_nation := 2 ;
80772: LD_ADDR_OWVAR 21
80776: PUSH
80777: LD_INT 2
80779: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
80780: LD_ADDR_OWVAR 37
80784: PUSH
80785: LD_INT 14
80787: ST_TO_ADDR
// vc_engine := engine_siberite ;
80788: LD_ADDR_OWVAR 39
80792: PUSH
80793: LD_INT 3
80795: ST_TO_ADDR
// vc_control := control_apeman ;
80796: LD_ADDR_OWVAR 38
80800: PUSH
80801: LD_INT 5
80803: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
80804: LD_ADDR_OWVAR 40
80808: PUSH
80809: LD_INT 29
80811: ST_TO_ADDR
// un := CreateVehicle ;
80812: LD_ADDR_VAR 0 2
80816: PUSH
80817: CALL_OW 45
80821: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80822: LD_VAR 0 2
80826: PPUSH
80827: LD_INT 1
80829: PPUSH
80830: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80834: LD_INT 35
80836: PPUSH
80837: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80841: LD_VAR 0 2
80845: PPUSH
80846: LD_INT 22
80848: PUSH
80849: LD_OWVAR 2
80853: PUSH
80854: EMPTY
80855: LIST
80856: LIST
80857: PPUSH
80858: CALL_OW 69
80862: PPUSH
80863: LD_VAR 0 2
80867: PPUSH
80868: CALL_OW 74
80872: PPUSH
80873: CALL_OW 115
// until IsDead ( un ) ;
80877: LD_VAR 0 2
80881: PPUSH
80882: CALL_OW 301
80886: IFFALSE 80834
// end ;
80888: PPOPN 2
80890: END
// every 0 0$1 trigger StreamModeActive and sStu do
80891: LD_EXP 64
80895: PUSH
80896: LD_EXP 103
80900: AND
80901: IFFALSE 80917
80903: GO 80905
80905: DISABLE
// begin ToLua ( displayStucuk(); ) ;
80906: LD_STRING displayStucuk();
80908: PPUSH
80909: CALL_OW 559
// ResetFog ;
80913: CALL_OW 335
// end ;
80917: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
80918: LD_EXP 64
80922: PUSH
80923: LD_EXP 96
80927: AND
80928: IFFALSE 81069
80930: GO 80932
80932: DISABLE
80933: LD_INT 0
80935: PPUSH
80936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80937: LD_ADDR_VAR 0 2
80941: PUSH
80942: LD_INT 22
80944: PUSH
80945: LD_OWVAR 2
80949: PUSH
80950: EMPTY
80951: LIST
80952: LIST
80953: PUSH
80954: LD_INT 21
80956: PUSH
80957: LD_INT 1
80959: PUSH
80960: EMPTY
80961: LIST
80962: LIST
80963: PUSH
80964: EMPTY
80965: LIST
80966: LIST
80967: PPUSH
80968: CALL_OW 69
80972: ST_TO_ADDR
// if not tmp then
80973: LD_VAR 0 2
80977: NOT
80978: IFFALSE 80982
// exit ;
80980: GO 81069
// un := tmp [ rand ( 1 , tmp ) ] ;
80982: LD_ADDR_VAR 0 1
80986: PUSH
80987: LD_VAR 0 2
80991: PUSH
80992: LD_INT 1
80994: PPUSH
80995: LD_VAR 0 2
80999: PPUSH
81000: CALL_OW 12
81004: ARRAY
81005: ST_TO_ADDR
// SetSide ( un , 0 ) ;
81006: LD_VAR 0 1
81010: PPUSH
81011: LD_INT 0
81013: PPUSH
81014: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
81018: LD_VAR 0 1
81022: PPUSH
81023: LD_OWVAR 3
81027: PUSH
81028: LD_VAR 0 1
81032: DIFF
81033: PPUSH
81034: LD_VAR 0 1
81038: PPUSH
81039: CALL_OW 74
81043: PPUSH
81044: CALL_OW 115
// wait ( 0 0$20 ) ;
81048: LD_INT 700
81050: PPUSH
81051: CALL_OW 67
// SetSide ( un , your_side ) ;
81055: LD_VAR 0 1
81059: PPUSH
81060: LD_OWVAR 2
81064: PPUSH
81065: CALL_OW 235
// end ;
81069: PPOPN 2
81071: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
81072: LD_EXP 64
81076: PUSH
81077: LD_EXP 97
81081: AND
81082: IFFALSE 81188
81084: GO 81086
81086: DISABLE
81087: LD_INT 0
81089: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81090: LD_ADDR_VAR 0 1
81094: PUSH
81095: LD_INT 22
81097: PUSH
81098: LD_OWVAR 2
81102: PUSH
81103: EMPTY
81104: LIST
81105: LIST
81106: PUSH
81107: LD_INT 2
81109: PUSH
81110: LD_INT 30
81112: PUSH
81113: LD_INT 0
81115: PUSH
81116: EMPTY
81117: LIST
81118: LIST
81119: PUSH
81120: LD_INT 30
81122: PUSH
81123: LD_INT 1
81125: PUSH
81126: EMPTY
81127: LIST
81128: LIST
81129: PUSH
81130: EMPTY
81131: LIST
81132: LIST
81133: LIST
81134: PUSH
81135: EMPTY
81136: LIST
81137: LIST
81138: PPUSH
81139: CALL_OW 69
81143: ST_TO_ADDR
// if not depot then
81144: LD_VAR 0 1
81148: NOT
81149: IFFALSE 81153
// exit ;
81151: GO 81188
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
81153: LD_VAR 0 1
81157: PUSH
81158: LD_INT 1
81160: ARRAY
81161: PPUSH
81162: CALL_OW 250
81166: PPUSH
81167: LD_VAR 0 1
81171: PUSH
81172: LD_INT 1
81174: ARRAY
81175: PPUSH
81176: CALL_OW 251
81180: PPUSH
81181: LD_INT 70
81183: PPUSH
81184: CALL_OW 495
// end ;
81188: PPOPN 1
81190: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
81191: LD_EXP 64
81195: PUSH
81196: LD_EXP 98
81200: AND
81201: IFFALSE 81412
81203: GO 81205
81205: DISABLE
81206: LD_INT 0
81208: PPUSH
81209: PPUSH
81210: PPUSH
81211: PPUSH
81212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81213: LD_ADDR_VAR 0 5
81217: PUSH
81218: LD_INT 22
81220: PUSH
81221: LD_OWVAR 2
81225: PUSH
81226: EMPTY
81227: LIST
81228: LIST
81229: PUSH
81230: LD_INT 21
81232: PUSH
81233: LD_INT 1
81235: PUSH
81236: EMPTY
81237: LIST
81238: LIST
81239: PUSH
81240: EMPTY
81241: LIST
81242: LIST
81243: PPUSH
81244: CALL_OW 69
81248: ST_TO_ADDR
// if not tmp then
81249: LD_VAR 0 5
81253: NOT
81254: IFFALSE 81258
// exit ;
81256: GO 81412
// for i in tmp do
81258: LD_ADDR_VAR 0 1
81262: PUSH
81263: LD_VAR 0 5
81267: PUSH
81268: FOR_IN
81269: IFFALSE 81410
// begin d := rand ( 0 , 5 ) ;
81271: LD_ADDR_VAR 0 4
81275: PUSH
81276: LD_INT 0
81278: PPUSH
81279: LD_INT 5
81281: PPUSH
81282: CALL_OW 12
81286: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
81287: LD_ADDR_VAR 0 2
81291: PUSH
81292: LD_VAR 0 1
81296: PPUSH
81297: CALL_OW 250
81301: PPUSH
81302: LD_VAR 0 4
81306: PPUSH
81307: LD_INT 3
81309: PPUSH
81310: LD_INT 12
81312: PPUSH
81313: CALL_OW 12
81317: PPUSH
81318: CALL_OW 272
81322: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
81323: LD_ADDR_VAR 0 3
81327: PUSH
81328: LD_VAR 0 1
81332: PPUSH
81333: CALL_OW 251
81337: PPUSH
81338: LD_VAR 0 4
81342: PPUSH
81343: LD_INT 3
81345: PPUSH
81346: LD_INT 12
81348: PPUSH
81349: CALL_OW 12
81353: PPUSH
81354: CALL_OW 273
81358: ST_TO_ADDR
// if ValidHex ( x , y ) then
81359: LD_VAR 0 2
81363: PPUSH
81364: LD_VAR 0 3
81368: PPUSH
81369: CALL_OW 488
81373: IFFALSE 81408
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
81375: LD_VAR 0 1
81379: PPUSH
81380: LD_VAR 0 2
81384: PPUSH
81385: LD_VAR 0 3
81389: PPUSH
81390: LD_INT 3
81392: PPUSH
81393: LD_INT 6
81395: PPUSH
81396: CALL_OW 12
81400: PPUSH
81401: LD_INT 1
81403: PPUSH
81404: CALL_OW 483
// end ;
81408: GO 81268
81410: POP
81411: POP
// end ;
81412: PPOPN 5
81414: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
81415: LD_EXP 64
81419: PUSH
81420: LD_EXP 99
81424: AND
81425: IFFALSE 81519
81427: GO 81429
81429: DISABLE
81430: LD_INT 0
81432: PPUSH
81433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
81434: LD_ADDR_VAR 0 2
81438: PUSH
81439: LD_INT 22
81441: PUSH
81442: LD_OWVAR 2
81446: PUSH
81447: EMPTY
81448: LIST
81449: LIST
81450: PUSH
81451: LD_INT 32
81453: PUSH
81454: LD_INT 1
81456: PUSH
81457: EMPTY
81458: LIST
81459: LIST
81460: PUSH
81461: LD_INT 21
81463: PUSH
81464: LD_INT 2
81466: PUSH
81467: EMPTY
81468: LIST
81469: LIST
81470: PUSH
81471: EMPTY
81472: LIST
81473: LIST
81474: LIST
81475: PPUSH
81476: CALL_OW 69
81480: ST_TO_ADDR
// if not tmp then
81481: LD_VAR 0 2
81485: NOT
81486: IFFALSE 81490
// exit ;
81488: GO 81519
// for i in tmp do
81490: LD_ADDR_VAR 0 1
81494: PUSH
81495: LD_VAR 0 2
81499: PUSH
81500: FOR_IN
81501: IFFALSE 81517
// SetFuel ( i , 0 ) ;
81503: LD_VAR 0 1
81507: PPUSH
81508: LD_INT 0
81510: PPUSH
81511: CALL_OW 240
81515: GO 81500
81517: POP
81518: POP
// end ;
81519: PPOPN 2
81521: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
81522: LD_EXP 64
81526: PUSH
81527: LD_EXP 100
81531: AND
81532: IFFALSE 81598
81534: GO 81536
81536: DISABLE
81537: LD_INT 0
81539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
81540: LD_ADDR_VAR 0 1
81544: PUSH
81545: LD_INT 22
81547: PUSH
81548: LD_OWVAR 2
81552: PUSH
81553: EMPTY
81554: LIST
81555: LIST
81556: PUSH
81557: LD_INT 30
81559: PUSH
81560: LD_INT 29
81562: PUSH
81563: EMPTY
81564: LIST
81565: LIST
81566: PUSH
81567: EMPTY
81568: LIST
81569: LIST
81570: PPUSH
81571: CALL_OW 69
81575: ST_TO_ADDR
// if not tmp then
81576: LD_VAR 0 1
81580: NOT
81581: IFFALSE 81585
// exit ;
81583: GO 81598
// DestroyUnit ( tmp [ 1 ] ) ;
81585: LD_VAR 0 1
81589: PUSH
81590: LD_INT 1
81592: ARRAY
81593: PPUSH
81594: CALL_OW 65
// end ;
81598: PPOPN 1
81600: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
81601: LD_EXP 64
81605: PUSH
81606: LD_EXP 102
81610: AND
81611: IFFALSE 81740
81613: GO 81615
81615: DISABLE
81616: LD_INT 0
81618: PPUSH
// begin uc_side := 0 ;
81619: LD_ADDR_OWVAR 20
81623: PUSH
81624: LD_INT 0
81626: ST_TO_ADDR
// uc_nation := nation_arabian ;
81627: LD_ADDR_OWVAR 21
81631: PUSH
81632: LD_INT 2
81634: ST_TO_ADDR
// hc_gallery :=  ;
81635: LD_ADDR_OWVAR 33
81639: PUSH
81640: LD_STRING 
81642: ST_TO_ADDR
// hc_name :=  ;
81643: LD_ADDR_OWVAR 26
81647: PUSH
81648: LD_STRING 
81650: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
81651: LD_INT 1
81653: PPUSH
81654: LD_INT 11
81656: PPUSH
81657: LD_INT 10
81659: PPUSH
81660: CALL_OW 380
// un := CreateHuman ;
81664: LD_ADDR_VAR 0 1
81668: PUSH
81669: CALL_OW 44
81673: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
81674: LD_VAR 0 1
81678: PPUSH
81679: LD_INT 1
81681: PPUSH
81682: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
81686: LD_INT 35
81688: PPUSH
81689: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
81693: LD_VAR 0 1
81697: PPUSH
81698: LD_INT 22
81700: PUSH
81701: LD_OWVAR 2
81705: PUSH
81706: EMPTY
81707: LIST
81708: LIST
81709: PPUSH
81710: CALL_OW 69
81714: PPUSH
81715: LD_VAR 0 1
81719: PPUSH
81720: CALL_OW 74
81724: PPUSH
81725: CALL_OW 115
// until IsDead ( un ) ;
81729: LD_VAR 0 1
81733: PPUSH
81734: CALL_OW 301
81738: IFFALSE 81686
// end ;
81740: PPOPN 1
81742: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
81743: LD_EXP 64
81747: PUSH
81748: LD_EXP 104
81752: AND
81753: IFFALSE 81765
81755: GO 81757
81757: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
81758: LD_STRING earthquake(getX(game), 0, 32)
81760: PPUSH
81761: CALL_OW 559
81765: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
81766: LD_EXP 64
81770: PUSH
81771: LD_EXP 105
81775: AND
81776: IFFALSE 81867
81778: GO 81780
81780: DISABLE
81781: LD_INT 0
81783: PPUSH
// begin enable ;
81784: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
81785: LD_ADDR_VAR 0 1
81789: PUSH
81790: LD_INT 22
81792: PUSH
81793: LD_OWVAR 2
81797: PUSH
81798: EMPTY
81799: LIST
81800: LIST
81801: PUSH
81802: LD_INT 21
81804: PUSH
81805: LD_INT 2
81807: PUSH
81808: EMPTY
81809: LIST
81810: LIST
81811: PUSH
81812: LD_INT 33
81814: PUSH
81815: LD_INT 3
81817: PUSH
81818: EMPTY
81819: LIST
81820: LIST
81821: PUSH
81822: EMPTY
81823: LIST
81824: LIST
81825: LIST
81826: PPUSH
81827: CALL_OW 69
81831: ST_TO_ADDR
// if not tmp then
81832: LD_VAR 0 1
81836: NOT
81837: IFFALSE 81841
// exit ;
81839: GO 81867
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
81841: LD_VAR 0 1
81845: PUSH
81846: LD_INT 1
81848: PPUSH
81849: LD_VAR 0 1
81853: PPUSH
81854: CALL_OW 12
81858: ARRAY
81859: PPUSH
81860: LD_INT 1
81862: PPUSH
81863: CALL_OW 234
// end ;
81867: PPOPN 1
81869: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
81870: LD_EXP 64
81874: PUSH
81875: LD_EXP 106
81879: AND
81880: IFFALSE 82021
81882: GO 81884
81884: DISABLE
81885: LD_INT 0
81887: PPUSH
81888: PPUSH
81889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81890: LD_ADDR_VAR 0 3
81894: PUSH
81895: LD_INT 22
81897: PUSH
81898: LD_OWVAR 2
81902: PUSH
81903: EMPTY
81904: LIST
81905: LIST
81906: PUSH
81907: LD_INT 25
81909: PUSH
81910: LD_INT 1
81912: PUSH
81913: EMPTY
81914: LIST
81915: LIST
81916: PUSH
81917: EMPTY
81918: LIST
81919: LIST
81920: PPUSH
81921: CALL_OW 69
81925: ST_TO_ADDR
// if not tmp then
81926: LD_VAR 0 3
81930: NOT
81931: IFFALSE 81935
// exit ;
81933: GO 82021
// un := tmp [ rand ( 1 , tmp ) ] ;
81935: LD_ADDR_VAR 0 2
81939: PUSH
81940: LD_VAR 0 3
81944: PUSH
81945: LD_INT 1
81947: PPUSH
81948: LD_VAR 0 3
81952: PPUSH
81953: CALL_OW 12
81957: ARRAY
81958: ST_TO_ADDR
// if Crawls ( un ) then
81959: LD_VAR 0 2
81963: PPUSH
81964: CALL_OW 318
81968: IFFALSE 81979
// ComWalk ( un ) ;
81970: LD_VAR 0 2
81974: PPUSH
81975: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
81979: LD_VAR 0 2
81983: PPUSH
81984: LD_INT 9
81986: PPUSH
81987: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
81991: LD_INT 28
81993: PPUSH
81994: LD_OWVAR 2
81998: PPUSH
81999: LD_INT 2
82001: PPUSH
82002: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
82006: LD_INT 29
82008: PPUSH
82009: LD_OWVAR 2
82013: PPUSH
82014: LD_INT 2
82016: PPUSH
82017: CALL_OW 322
// end ;
82021: PPOPN 3
82023: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
82024: LD_EXP 64
82028: PUSH
82029: LD_EXP 107
82033: AND
82034: IFFALSE 82145
82036: GO 82038
82038: DISABLE
82039: LD_INT 0
82041: PPUSH
82042: PPUSH
82043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82044: LD_ADDR_VAR 0 3
82048: PUSH
82049: LD_INT 22
82051: PUSH
82052: LD_OWVAR 2
82056: PUSH
82057: EMPTY
82058: LIST
82059: LIST
82060: PUSH
82061: LD_INT 25
82063: PUSH
82064: LD_INT 1
82066: PUSH
82067: EMPTY
82068: LIST
82069: LIST
82070: PUSH
82071: EMPTY
82072: LIST
82073: LIST
82074: PPUSH
82075: CALL_OW 69
82079: ST_TO_ADDR
// if not tmp then
82080: LD_VAR 0 3
82084: NOT
82085: IFFALSE 82089
// exit ;
82087: GO 82145
// un := tmp [ rand ( 1 , tmp ) ] ;
82089: LD_ADDR_VAR 0 2
82093: PUSH
82094: LD_VAR 0 3
82098: PUSH
82099: LD_INT 1
82101: PPUSH
82102: LD_VAR 0 3
82106: PPUSH
82107: CALL_OW 12
82111: ARRAY
82112: ST_TO_ADDR
// if Crawls ( un ) then
82113: LD_VAR 0 2
82117: PPUSH
82118: CALL_OW 318
82122: IFFALSE 82133
// ComWalk ( un ) ;
82124: LD_VAR 0 2
82128: PPUSH
82129: CALL_OW 138
// SetClass ( un , class_mortar ) ;
82133: LD_VAR 0 2
82137: PPUSH
82138: LD_INT 8
82140: PPUSH
82141: CALL_OW 336
// end ;
82145: PPOPN 3
82147: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
82148: LD_EXP 64
82152: PUSH
82153: LD_EXP 108
82157: AND
82158: IFFALSE 82302
82160: GO 82162
82162: DISABLE
82163: LD_INT 0
82165: PPUSH
82166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
82167: LD_ADDR_VAR 0 2
82171: PUSH
82172: LD_INT 22
82174: PUSH
82175: LD_OWVAR 2
82179: PUSH
82180: EMPTY
82181: LIST
82182: LIST
82183: PUSH
82184: LD_INT 21
82186: PUSH
82187: LD_INT 2
82189: PUSH
82190: EMPTY
82191: LIST
82192: LIST
82193: PUSH
82194: LD_INT 2
82196: PUSH
82197: LD_INT 34
82199: PUSH
82200: LD_INT 12
82202: PUSH
82203: EMPTY
82204: LIST
82205: LIST
82206: PUSH
82207: LD_INT 34
82209: PUSH
82210: LD_INT 51
82212: PUSH
82213: EMPTY
82214: LIST
82215: LIST
82216: PUSH
82217: LD_INT 34
82219: PUSH
82220: LD_INT 32
82222: PUSH
82223: EMPTY
82224: LIST
82225: LIST
82226: PUSH
82227: EMPTY
82228: LIST
82229: LIST
82230: LIST
82231: LIST
82232: PUSH
82233: EMPTY
82234: LIST
82235: LIST
82236: LIST
82237: PPUSH
82238: CALL_OW 69
82242: ST_TO_ADDR
// if not tmp then
82243: LD_VAR 0 2
82247: NOT
82248: IFFALSE 82252
// exit ;
82250: GO 82302
// for i in tmp do
82252: LD_ADDR_VAR 0 1
82256: PUSH
82257: LD_VAR 0 2
82261: PUSH
82262: FOR_IN
82263: IFFALSE 82300
// if GetCargo ( i , mat_artifact ) = 0 then
82265: LD_VAR 0 1
82269: PPUSH
82270: LD_INT 4
82272: PPUSH
82273: CALL_OW 289
82277: PUSH
82278: LD_INT 0
82280: EQUAL
82281: IFFALSE 82298
// SetCargo ( i , mat_siberit , 100 ) ;
82283: LD_VAR 0 1
82287: PPUSH
82288: LD_INT 3
82290: PPUSH
82291: LD_INT 100
82293: PPUSH
82294: CALL_OW 290
82298: GO 82262
82300: POP
82301: POP
// end ;
82302: PPOPN 2
82304: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
82305: LD_EXP 64
82309: PUSH
82310: LD_EXP 109
82314: AND
82315: IFFALSE 82498
82317: GO 82319
82319: DISABLE
82320: LD_INT 0
82322: PPUSH
82323: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82324: LD_ADDR_VAR 0 2
82328: PUSH
82329: LD_INT 22
82331: PUSH
82332: LD_OWVAR 2
82336: PUSH
82337: EMPTY
82338: LIST
82339: LIST
82340: PPUSH
82341: CALL_OW 69
82345: ST_TO_ADDR
// if not tmp then
82346: LD_VAR 0 2
82350: NOT
82351: IFFALSE 82355
// exit ;
82353: GO 82498
// for i := 1 to 2 do
82355: LD_ADDR_VAR 0 1
82359: PUSH
82360: DOUBLE
82361: LD_INT 1
82363: DEC
82364: ST_TO_ADDR
82365: LD_INT 2
82367: PUSH
82368: FOR_TO
82369: IFFALSE 82496
// begin uc_side := your_side ;
82371: LD_ADDR_OWVAR 20
82375: PUSH
82376: LD_OWVAR 2
82380: ST_TO_ADDR
// uc_nation := nation_american ;
82381: LD_ADDR_OWVAR 21
82385: PUSH
82386: LD_INT 1
82388: ST_TO_ADDR
// vc_chassis := us_morphling ;
82389: LD_ADDR_OWVAR 37
82393: PUSH
82394: LD_INT 5
82396: ST_TO_ADDR
// vc_engine := engine_siberite ;
82397: LD_ADDR_OWVAR 39
82401: PUSH
82402: LD_INT 3
82404: ST_TO_ADDR
// vc_control := control_computer ;
82405: LD_ADDR_OWVAR 38
82409: PUSH
82410: LD_INT 3
82412: ST_TO_ADDR
// vc_weapon := us_double_laser ;
82413: LD_ADDR_OWVAR 40
82417: PUSH
82418: LD_INT 10
82420: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
82421: LD_VAR 0 2
82425: PUSH
82426: LD_INT 1
82428: ARRAY
82429: PPUSH
82430: CALL_OW 310
82434: NOT
82435: IFFALSE 82482
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
82437: CALL_OW 45
82441: PPUSH
82442: LD_VAR 0 2
82446: PUSH
82447: LD_INT 1
82449: ARRAY
82450: PPUSH
82451: CALL_OW 250
82455: PPUSH
82456: LD_VAR 0 2
82460: PUSH
82461: LD_INT 1
82463: ARRAY
82464: PPUSH
82465: CALL_OW 251
82469: PPUSH
82470: LD_INT 12
82472: PPUSH
82473: LD_INT 1
82475: PPUSH
82476: CALL_OW 50
82480: GO 82494
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
82482: CALL_OW 45
82486: PPUSH
82487: LD_INT 1
82489: PPUSH
82490: CALL_OW 51
// end ;
82494: GO 82368
82496: POP
82497: POP
// end ;
82498: PPOPN 2
82500: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
82501: LD_EXP 64
82505: PUSH
82506: LD_EXP 110
82510: AND
82511: IFFALSE 82733
82513: GO 82515
82515: DISABLE
82516: LD_INT 0
82518: PPUSH
82519: PPUSH
82520: PPUSH
82521: PPUSH
82522: PPUSH
82523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82524: LD_ADDR_VAR 0 6
82528: PUSH
82529: LD_INT 22
82531: PUSH
82532: LD_OWVAR 2
82536: PUSH
82537: EMPTY
82538: LIST
82539: LIST
82540: PUSH
82541: LD_INT 21
82543: PUSH
82544: LD_INT 1
82546: PUSH
82547: EMPTY
82548: LIST
82549: LIST
82550: PUSH
82551: LD_INT 3
82553: PUSH
82554: LD_INT 23
82556: PUSH
82557: LD_INT 0
82559: PUSH
82560: EMPTY
82561: LIST
82562: LIST
82563: PUSH
82564: EMPTY
82565: LIST
82566: LIST
82567: PUSH
82568: EMPTY
82569: LIST
82570: LIST
82571: LIST
82572: PPUSH
82573: CALL_OW 69
82577: ST_TO_ADDR
// if not tmp then
82578: LD_VAR 0 6
82582: NOT
82583: IFFALSE 82587
// exit ;
82585: GO 82733
// s1 := rand ( 1 , 4 ) ;
82587: LD_ADDR_VAR 0 2
82591: PUSH
82592: LD_INT 1
82594: PPUSH
82595: LD_INT 4
82597: PPUSH
82598: CALL_OW 12
82602: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
82603: LD_ADDR_VAR 0 4
82607: PUSH
82608: LD_VAR 0 6
82612: PUSH
82613: LD_INT 1
82615: ARRAY
82616: PPUSH
82617: LD_VAR 0 2
82621: PPUSH
82622: CALL_OW 259
82626: ST_TO_ADDR
// if s1 = 1 then
82627: LD_VAR 0 2
82631: PUSH
82632: LD_INT 1
82634: EQUAL
82635: IFFALSE 82655
// s2 := rand ( 2 , 4 ) else
82637: LD_ADDR_VAR 0 3
82641: PUSH
82642: LD_INT 2
82644: PPUSH
82645: LD_INT 4
82647: PPUSH
82648: CALL_OW 12
82652: ST_TO_ADDR
82653: GO 82663
// s2 := 1 ;
82655: LD_ADDR_VAR 0 3
82659: PUSH
82660: LD_INT 1
82662: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
82663: LD_ADDR_VAR 0 5
82667: PUSH
82668: LD_VAR 0 6
82672: PUSH
82673: LD_INT 1
82675: ARRAY
82676: PPUSH
82677: LD_VAR 0 3
82681: PPUSH
82682: CALL_OW 259
82686: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
82687: LD_VAR 0 6
82691: PUSH
82692: LD_INT 1
82694: ARRAY
82695: PPUSH
82696: LD_VAR 0 2
82700: PPUSH
82701: LD_VAR 0 5
82705: PPUSH
82706: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
82710: LD_VAR 0 6
82714: PUSH
82715: LD_INT 1
82717: ARRAY
82718: PPUSH
82719: LD_VAR 0 3
82723: PPUSH
82724: LD_VAR 0 4
82728: PPUSH
82729: CALL_OW 237
// end ;
82733: PPOPN 6
82735: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
82736: LD_EXP 64
82740: PUSH
82741: LD_EXP 111
82745: AND
82746: IFFALSE 82825
82748: GO 82750
82750: DISABLE
82751: LD_INT 0
82753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
82754: LD_ADDR_VAR 0 1
82758: PUSH
82759: LD_INT 22
82761: PUSH
82762: LD_OWVAR 2
82766: PUSH
82767: EMPTY
82768: LIST
82769: LIST
82770: PUSH
82771: LD_INT 30
82773: PUSH
82774: LD_INT 3
82776: PUSH
82777: EMPTY
82778: LIST
82779: LIST
82780: PUSH
82781: EMPTY
82782: LIST
82783: LIST
82784: PPUSH
82785: CALL_OW 69
82789: ST_TO_ADDR
// if not tmp then
82790: LD_VAR 0 1
82794: NOT
82795: IFFALSE 82799
// exit ;
82797: GO 82825
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
82799: LD_VAR 0 1
82803: PUSH
82804: LD_INT 1
82806: PPUSH
82807: LD_VAR 0 1
82811: PPUSH
82812: CALL_OW 12
82816: ARRAY
82817: PPUSH
82818: LD_INT 1
82820: PPUSH
82821: CALL_OW 234
// end ;
82825: PPOPN 1
82827: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
82828: LD_EXP 64
82832: PUSH
82833: LD_EXP 112
82837: AND
82838: IFFALSE 82950
82840: GO 82842
82842: DISABLE
82843: LD_INT 0
82845: PPUSH
82846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
82847: LD_ADDR_VAR 0 2
82851: PUSH
82852: LD_INT 22
82854: PUSH
82855: LD_OWVAR 2
82859: PUSH
82860: EMPTY
82861: LIST
82862: LIST
82863: PUSH
82864: LD_INT 2
82866: PUSH
82867: LD_INT 30
82869: PUSH
82870: LD_INT 27
82872: PUSH
82873: EMPTY
82874: LIST
82875: LIST
82876: PUSH
82877: LD_INT 30
82879: PUSH
82880: LD_INT 26
82882: PUSH
82883: EMPTY
82884: LIST
82885: LIST
82886: PUSH
82887: LD_INT 30
82889: PUSH
82890: LD_INT 28
82892: PUSH
82893: EMPTY
82894: LIST
82895: LIST
82896: PUSH
82897: EMPTY
82898: LIST
82899: LIST
82900: LIST
82901: LIST
82902: PUSH
82903: EMPTY
82904: LIST
82905: LIST
82906: PPUSH
82907: CALL_OW 69
82911: ST_TO_ADDR
// if not tmp then
82912: LD_VAR 0 2
82916: NOT
82917: IFFALSE 82921
// exit ;
82919: GO 82950
// for i in tmp do
82921: LD_ADDR_VAR 0 1
82925: PUSH
82926: LD_VAR 0 2
82930: PUSH
82931: FOR_IN
82932: IFFALSE 82948
// SetLives ( i , 1 ) ;
82934: LD_VAR 0 1
82938: PPUSH
82939: LD_INT 1
82941: PPUSH
82942: CALL_OW 234
82946: GO 82931
82948: POP
82949: POP
// end ;
82950: PPOPN 2
82952: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
82953: LD_EXP 64
82957: PUSH
82958: LD_EXP 113
82962: AND
82963: IFFALSE 83250
82965: GO 82967
82967: DISABLE
82968: LD_INT 0
82970: PPUSH
82971: PPUSH
82972: PPUSH
// begin i := rand ( 1 , 7 ) ;
82973: LD_ADDR_VAR 0 1
82977: PUSH
82978: LD_INT 1
82980: PPUSH
82981: LD_INT 7
82983: PPUSH
82984: CALL_OW 12
82988: ST_TO_ADDR
// case i of 1 :
82989: LD_VAR 0 1
82993: PUSH
82994: LD_INT 1
82996: DOUBLE
82997: EQUAL
82998: IFTRUE 83002
83000: GO 83012
83002: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
83003: LD_STRING earthquake(getX(game), 0, 32)
83005: PPUSH
83006: CALL_OW 559
83010: GO 83250
83012: LD_INT 2
83014: DOUBLE
83015: EQUAL
83016: IFTRUE 83020
83018: GO 83034
83020: POP
// begin ToLua ( displayStucuk(); ) ;
83021: LD_STRING displayStucuk();
83023: PPUSH
83024: CALL_OW 559
// ResetFog ;
83028: CALL_OW 335
// end ; 3 :
83032: GO 83250
83034: LD_INT 3
83036: DOUBLE
83037: EQUAL
83038: IFTRUE 83042
83040: GO 83146
83042: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
83043: LD_ADDR_VAR 0 2
83047: PUSH
83048: LD_INT 22
83050: PUSH
83051: LD_OWVAR 2
83055: PUSH
83056: EMPTY
83057: LIST
83058: LIST
83059: PUSH
83060: LD_INT 25
83062: PUSH
83063: LD_INT 1
83065: PUSH
83066: EMPTY
83067: LIST
83068: LIST
83069: PUSH
83070: EMPTY
83071: LIST
83072: LIST
83073: PPUSH
83074: CALL_OW 69
83078: ST_TO_ADDR
// if not tmp then
83079: LD_VAR 0 2
83083: NOT
83084: IFFALSE 83088
// exit ;
83086: GO 83250
// un := tmp [ rand ( 1 , tmp ) ] ;
83088: LD_ADDR_VAR 0 3
83092: PUSH
83093: LD_VAR 0 2
83097: PUSH
83098: LD_INT 1
83100: PPUSH
83101: LD_VAR 0 2
83105: PPUSH
83106: CALL_OW 12
83110: ARRAY
83111: ST_TO_ADDR
// if Crawls ( un ) then
83112: LD_VAR 0 3
83116: PPUSH
83117: CALL_OW 318
83121: IFFALSE 83132
// ComWalk ( un ) ;
83123: LD_VAR 0 3
83127: PPUSH
83128: CALL_OW 138
// SetClass ( un , class_mortar ) ;
83132: LD_VAR 0 3
83136: PPUSH
83137: LD_INT 8
83139: PPUSH
83140: CALL_OW 336
// end ; 4 :
83144: GO 83250
83146: LD_INT 4
83148: DOUBLE
83149: EQUAL
83150: IFTRUE 83154
83152: GO 83228
83154: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
83155: LD_ADDR_VAR 0 2
83159: PUSH
83160: LD_INT 22
83162: PUSH
83163: LD_OWVAR 2
83167: PUSH
83168: EMPTY
83169: LIST
83170: LIST
83171: PUSH
83172: LD_INT 30
83174: PUSH
83175: LD_INT 29
83177: PUSH
83178: EMPTY
83179: LIST
83180: LIST
83181: PUSH
83182: EMPTY
83183: LIST
83184: LIST
83185: PPUSH
83186: CALL_OW 69
83190: ST_TO_ADDR
// if not tmp then
83191: LD_VAR 0 2
83195: NOT
83196: IFFALSE 83200
// exit ;
83198: GO 83250
// CenterNowOnUnits ( tmp [ 1 ] ) ;
83200: LD_VAR 0 2
83204: PUSH
83205: LD_INT 1
83207: ARRAY
83208: PPUSH
83209: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
83213: LD_VAR 0 2
83217: PUSH
83218: LD_INT 1
83220: ARRAY
83221: PPUSH
83222: CALL_OW 65
// end ; 5 .. 7 :
83226: GO 83250
83228: LD_INT 5
83230: DOUBLE
83231: GREATEREQUAL
83232: IFFALSE 83240
83234: LD_INT 7
83236: DOUBLE
83237: LESSEQUAL
83238: IFTRUE 83242
83240: GO 83249
83242: POP
// StreamSibBomb ; end ;
83243: CALL 79487 0 0
83247: GO 83250
83249: POP
// end ;
83250: PPOPN 3
83252: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
83253: LD_EXP 64
83257: PUSH
83258: LD_EXP 114
83262: AND
83263: IFFALSE 83419
83265: GO 83267
83267: DISABLE
83268: LD_INT 0
83270: PPUSH
83271: PPUSH
83272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
83273: LD_ADDR_VAR 0 2
83277: PUSH
83278: LD_INT 81
83280: PUSH
83281: LD_OWVAR 2
83285: PUSH
83286: EMPTY
83287: LIST
83288: LIST
83289: PUSH
83290: LD_INT 2
83292: PUSH
83293: LD_INT 21
83295: PUSH
83296: LD_INT 1
83298: PUSH
83299: EMPTY
83300: LIST
83301: LIST
83302: PUSH
83303: LD_INT 21
83305: PUSH
83306: LD_INT 2
83308: PUSH
83309: EMPTY
83310: LIST
83311: LIST
83312: PUSH
83313: EMPTY
83314: LIST
83315: LIST
83316: LIST
83317: PUSH
83318: EMPTY
83319: LIST
83320: LIST
83321: PPUSH
83322: CALL_OW 69
83326: ST_TO_ADDR
// if not tmp then
83327: LD_VAR 0 2
83331: NOT
83332: IFFALSE 83336
// exit ;
83334: GO 83419
// p := 0 ;
83336: LD_ADDR_VAR 0 3
83340: PUSH
83341: LD_INT 0
83343: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
83344: LD_INT 35
83346: PPUSH
83347: CALL_OW 67
// p := p + 1 ;
83351: LD_ADDR_VAR 0 3
83355: PUSH
83356: LD_VAR 0 3
83360: PUSH
83361: LD_INT 1
83363: PLUS
83364: ST_TO_ADDR
// for i in tmp do
83365: LD_ADDR_VAR 0 1
83369: PUSH
83370: LD_VAR 0 2
83374: PUSH
83375: FOR_IN
83376: IFFALSE 83407
// if GetLives ( i ) < 1000 then
83378: LD_VAR 0 1
83382: PPUSH
83383: CALL_OW 256
83387: PUSH
83388: LD_INT 1000
83390: LESS
83391: IFFALSE 83405
// SetLives ( i , 1000 ) ;
83393: LD_VAR 0 1
83397: PPUSH
83398: LD_INT 1000
83400: PPUSH
83401: CALL_OW 234
83405: GO 83375
83407: POP
83408: POP
// until p > 20 ;
83409: LD_VAR 0 3
83413: PUSH
83414: LD_INT 20
83416: GREATER
83417: IFFALSE 83344
// end ;
83419: PPOPN 3
83421: END
// every 0 0$1 trigger StreamModeActive and sTime do
83422: LD_EXP 64
83426: PUSH
83427: LD_EXP 115
83431: AND
83432: IFFALSE 83467
83434: GO 83436
83436: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
83437: LD_INT 28
83439: PPUSH
83440: LD_OWVAR 2
83444: PPUSH
83445: LD_INT 2
83447: PPUSH
83448: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
83452: LD_INT 30
83454: PPUSH
83455: LD_OWVAR 2
83459: PPUSH
83460: LD_INT 2
83462: PPUSH
83463: CALL_OW 322
// end ;
83467: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
83468: LD_EXP 64
83472: PUSH
83473: LD_EXP 116
83477: AND
83478: IFFALSE 83599
83480: GO 83482
83482: DISABLE
83483: LD_INT 0
83485: PPUSH
83486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
83487: LD_ADDR_VAR 0 2
83491: PUSH
83492: LD_INT 22
83494: PUSH
83495: LD_OWVAR 2
83499: PUSH
83500: EMPTY
83501: LIST
83502: LIST
83503: PUSH
83504: LD_INT 21
83506: PUSH
83507: LD_INT 1
83509: PUSH
83510: EMPTY
83511: LIST
83512: LIST
83513: PUSH
83514: LD_INT 3
83516: PUSH
83517: LD_INT 23
83519: PUSH
83520: LD_INT 0
83522: PUSH
83523: EMPTY
83524: LIST
83525: LIST
83526: PUSH
83527: EMPTY
83528: LIST
83529: LIST
83530: PUSH
83531: EMPTY
83532: LIST
83533: LIST
83534: LIST
83535: PPUSH
83536: CALL_OW 69
83540: ST_TO_ADDR
// if not tmp then
83541: LD_VAR 0 2
83545: NOT
83546: IFFALSE 83550
// exit ;
83548: GO 83599
// for i in tmp do
83550: LD_ADDR_VAR 0 1
83554: PUSH
83555: LD_VAR 0 2
83559: PUSH
83560: FOR_IN
83561: IFFALSE 83597
// begin if Crawls ( i ) then
83563: LD_VAR 0 1
83567: PPUSH
83568: CALL_OW 318
83572: IFFALSE 83583
// ComWalk ( i ) ;
83574: LD_VAR 0 1
83578: PPUSH
83579: CALL_OW 138
// SetClass ( i , 2 ) ;
83583: LD_VAR 0 1
83587: PPUSH
83588: LD_INT 2
83590: PPUSH
83591: CALL_OW 336
// end ;
83595: GO 83560
83597: POP
83598: POP
// end ;
83599: PPOPN 2
83601: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
83602: LD_EXP 64
83606: PUSH
83607: LD_EXP 117
83611: AND
83612: IFFALSE 83900
83614: GO 83616
83616: DISABLE
83617: LD_INT 0
83619: PPUSH
83620: PPUSH
83621: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
83622: LD_OWVAR 2
83626: PPUSH
83627: LD_INT 9
83629: PPUSH
83630: LD_INT 1
83632: PPUSH
83633: LD_INT 1
83635: PPUSH
83636: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
83640: LD_INT 9
83642: PPUSH
83643: LD_OWVAR 2
83647: PPUSH
83648: CALL_OW 343
// uc_side := 9 ;
83652: LD_ADDR_OWVAR 20
83656: PUSH
83657: LD_INT 9
83659: ST_TO_ADDR
// uc_nation := 2 ;
83660: LD_ADDR_OWVAR 21
83664: PUSH
83665: LD_INT 2
83667: ST_TO_ADDR
// hc_name := Dark Warrior ;
83668: LD_ADDR_OWVAR 26
83672: PUSH
83673: LD_STRING Dark Warrior
83675: ST_TO_ADDR
// hc_gallery :=  ;
83676: LD_ADDR_OWVAR 33
83680: PUSH
83681: LD_STRING 
83683: ST_TO_ADDR
// hc_noskilllimit := true ;
83684: LD_ADDR_OWVAR 76
83688: PUSH
83689: LD_INT 1
83691: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
83692: LD_ADDR_OWVAR 31
83696: PUSH
83697: LD_INT 30
83699: PUSH
83700: LD_INT 30
83702: PUSH
83703: LD_INT 30
83705: PUSH
83706: LD_INT 30
83708: PUSH
83709: EMPTY
83710: LIST
83711: LIST
83712: LIST
83713: LIST
83714: ST_TO_ADDR
// un := CreateHuman ;
83715: LD_ADDR_VAR 0 3
83719: PUSH
83720: CALL_OW 44
83724: ST_TO_ADDR
// hc_noskilllimit := false ;
83725: LD_ADDR_OWVAR 76
83729: PUSH
83730: LD_INT 0
83732: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
83733: LD_VAR 0 3
83737: PPUSH
83738: LD_INT 1
83740: PPUSH
83741: CALL_OW 51
// ToLua ( playRanger() ) ;
83745: LD_STRING playRanger()
83747: PPUSH
83748: CALL_OW 559
// p := 0 ;
83752: LD_ADDR_VAR 0 2
83756: PUSH
83757: LD_INT 0
83759: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
83760: LD_INT 35
83762: PPUSH
83763: CALL_OW 67
// p := p + 1 ;
83767: LD_ADDR_VAR 0 2
83771: PUSH
83772: LD_VAR 0 2
83776: PUSH
83777: LD_INT 1
83779: PLUS
83780: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
83781: LD_VAR 0 3
83785: PPUSH
83786: CALL_OW 256
83790: PUSH
83791: LD_INT 1000
83793: LESS
83794: IFFALSE 83808
// SetLives ( un , 1000 ) ;
83796: LD_VAR 0 3
83800: PPUSH
83801: LD_INT 1000
83803: PPUSH
83804: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
83808: LD_VAR 0 3
83812: PPUSH
83813: LD_INT 81
83815: PUSH
83816: LD_OWVAR 2
83820: PUSH
83821: EMPTY
83822: LIST
83823: LIST
83824: PUSH
83825: LD_INT 91
83827: PUSH
83828: LD_VAR 0 3
83832: PUSH
83833: LD_INT 30
83835: PUSH
83836: EMPTY
83837: LIST
83838: LIST
83839: LIST
83840: PUSH
83841: EMPTY
83842: LIST
83843: LIST
83844: PPUSH
83845: CALL_OW 69
83849: PPUSH
83850: LD_VAR 0 3
83854: PPUSH
83855: CALL_OW 74
83859: PPUSH
83860: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
83864: LD_VAR 0 2
83868: PUSH
83869: LD_INT 80
83871: GREATER
83872: PUSH
83873: LD_VAR 0 3
83877: PPUSH
83878: CALL_OW 301
83882: OR
83883: IFFALSE 83760
// if un then
83885: LD_VAR 0 3
83889: IFFALSE 83900
// RemoveUnit ( un ) ;
83891: LD_VAR 0 3
83895: PPUSH
83896: CALL_OW 64
// end ;
83900: PPOPN 3
83902: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
83903: LD_EXP 118
83907: IFFALSE 84023
83909: GO 83911
83911: DISABLE
83912: LD_INT 0
83914: PPUSH
83915: PPUSH
83916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
83917: LD_ADDR_VAR 0 2
83921: PUSH
83922: LD_INT 81
83924: PUSH
83925: LD_OWVAR 2
83929: PUSH
83930: EMPTY
83931: LIST
83932: LIST
83933: PUSH
83934: LD_INT 21
83936: PUSH
83937: LD_INT 1
83939: PUSH
83940: EMPTY
83941: LIST
83942: LIST
83943: PUSH
83944: EMPTY
83945: LIST
83946: LIST
83947: PPUSH
83948: CALL_OW 69
83952: ST_TO_ADDR
// ToLua ( playComputer() ) ;
83953: LD_STRING playComputer()
83955: PPUSH
83956: CALL_OW 559
// if not tmp then
83960: LD_VAR 0 2
83964: NOT
83965: IFFALSE 83969
// exit ;
83967: GO 84023
// for i in tmp do
83969: LD_ADDR_VAR 0 1
83973: PUSH
83974: LD_VAR 0 2
83978: PUSH
83979: FOR_IN
83980: IFFALSE 84021
// for j := 1 to 4 do
83982: LD_ADDR_VAR 0 3
83986: PUSH
83987: DOUBLE
83988: LD_INT 1
83990: DEC
83991: ST_TO_ADDR
83992: LD_INT 4
83994: PUSH
83995: FOR_TO
83996: IFFALSE 84017
// SetSkill ( i , j , 10 ) ;
83998: LD_VAR 0 1
84002: PPUSH
84003: LD_VAR 0 3
84007: PPUSH
84008: LD_INT 10
84010: PPUSH
84011: CALL_OW 237
84015: GO 83995
84017: POP
84018: POP
84019: GO 83979
84021: POP
84022: POP
// end ;
84023: PPOPN 3
84025: END
// every 0 0$1 trigger s30 do var i , tmp ;
84026: LD_EXP 119
84030: IFFALSE 84099
84032: GO 84034
84034: DISABLE
84035: LD_INT 0
84037: PPUSH
84038: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84039: LD_ADDR_VAR 0 2
84043: PUSH
84044: LD_INT 22
84046: PUSH
84047: LD_OWVAR 2
84051: PUSH
84052: EMPTY
84053: LIST
84054: LIST
84055: PPUSH
84056: CALL_OW 69
84060: ST_TO_ADDR
// if not tmp then
84061: LD_VAR 0 2
84065: NOT
84066: IFFALSE 84070
// exit ;
84068: GO 84099
// for i in tmp do
84070: LD_ADDR_VAR 0 1
84074: PUSH
84075: LD_VAR 0 2
84079: PUSH
84080: FOR_IN
84081: IFFALSE 84097
// SetLives ( i , 300 ) ;
84083: LD_VAR 0 1
84087: PPUSH
84088: LD_INT 300
84090: PPUSH
84091: CALL_OW 234
84095: GO 84080
84097: POP
84098: POP
// end ;
84099: PPOPN 2
84101: END
// every 0 0$1 trigger s60 do var i , tmp ;
84102: LD_EXP 120
84106: IFFALSE 84175
84108: GO 84110
84110: DISABLE
84111: LD_INT 0
84113: PPUSH
84114: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84115: LD_ADDR_VAR 0 2
84119: PUSH
84120: LD_INT 22
84122: PUSH
84123: LD_OWVAR 2
84127: PUSH
84128: EMPTY
84129: LIST
84130: LIST
84131: PPUSH
84132: CALL_OW 69
84136: ST_TO_ADDR
// if not tmp then
84137: LD_VAR 0 2
84141: NOT
84142: IFFALSE 84146
// exit ;
84144: GO 84175
// for i in tmp do
84146: LD_ADDR_VAR 0 1
84150: PUSH
84151: LD_VAR 0 2
84155: PUSH
84156: FOR_IN
84157: IFFALSE 84173
// SetLives ( i , 600 ) ;
84159: LD_VAR 0 1
84163: PPUSH
84164: LD_INT 600
84166: PPUSH
84167: CALL_OW 234
84171: GO 84156
84173: POP
84174: POP
// end ;
84175: PPOPN 2
84177: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
84178: LD_INT 0
84180: PPUSH
// case cmd of 301 :
84181: LD_VAR 0 1
84185: PUSH
84186: LD_INT 301
84188: DOUBLE
84189: EQUAL
84190: IFTRUE 84194
84192: GO 84226
84194: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
84195: LD_VAR 0 6
84199: PPUSH
84200: LD_VAR 0 7
84204: PPUSH
84205: LD_VAR 0 8
84209: PPUSH
84210: LD_VAR 0 4
84214: PPUSH
84215: LD_VAR 0 5
84219: PPUSH
84220: CALL 85435 0 5
84224: GO 84347
84226: LD_INT 302
84228: DOUBLE
84229: EQUAL
84230: IFTRUE 84234
84232: GO 84271
84234: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
84235: LD_VAR 0 6
84239: PPUSH
84240: LD_VAR 0 7
84244: PPUSH
84245: LD_VAR 0 8
84249: PPUSH
84250: LD_VAR 0 9
84254: PPUSH
84255: LD_VAR 0 4
84259: PPUSH
84260: LD_VAR 0 5
84264: PPUSH
84265: CALL 85526 0 6
84269: GO 84347
84271: LD_INT 303
84273: DOUBLE
84274: EQUAL
84275: IFTRUE 84279
84277: GO 84316
84279: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
84280: LD_VAR 0 6
84284: PPUSH
84285: LD_VAR 0 7
84289: PPUSH
84290: LD_VAR 0 8
84294: PPUSH
84295: LD_VAR 0 9
84299: PPUSH
84300: LD_VAR 0 4
84304: PPUSH
84305: LD_VAR 0 5
84309: PPUSH
84310: CALL 84352 0 6
84314: GO 84347
84316: LD_INT 304
84318: DOUBLE
84319: EQUAL
84320: IFTRUE 84324
84322: GO 84346
84324: POP
// hHackTeleport ( unit , x , y ) ; end ;
84325: LD_VAR 0 2
84329: PPUSH
84330: LD_VAR 0 4
84334: PPUSH
84335: LD_VAR 0 5
84339: PPUSH
84340: CALL 86119 0 3
84344: GO 84347
84346: POP
// end ;
84347: LD_VAR 0 12
84351: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
84352: LD_INT 0
84354: PPUSH
84355: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
84356: LD_VAR 0 1
84360: PUSH
84361: LD_INT 1
84363: LESS
84364: PUSH
84365: LD_VAR 0 1
84369: PUSH
84370: LD_INT 3
84372: GREATER
84373: OR
84374: PUSH
84375: LD_VAR 0 5
84379: PPUSH
84380: LD_VAR 0 6
84384: PPUSH
84385: CALL_OW 428
84389: OR
84390: IFFALSE 84394
// exit ;
84392: GO 85122
// uc_side := your_side ;
84394: LD_ADDR_OWVAR 20
84398: PUSH
84399: LD_OWVAR 2
84403: ST_TO_ADDR
// uc_nation := nation ;
84404: LD_ADDR_OWVAR 21
84408: PUSH
84409: LD_VAR 0 1
84413: ST_TO_ADDR
// bc_level = 1 ;
84414: LD_ADDR_OWVAR 43
84418: PUSH
84419: LD_INT 1
84421: ST_TO_ADDR
// case btype of 1 :
84422: LD_VAR 0 2
84426: PUSH
84427: LD_INT 1
84429: DOUBLE
84430: EQUAL
84431: IFTRUE 84435
84433: GO 84446
84435: POP
// bc_type := b_depot ; 2 :
84436: LD_ADDR_OWVAR 42
84440: PUSH
84441: LD_INT 0
84443: ST_TO_ADDR
84444: GO 85066
84446: LD_INT 2
84448: DOUBLE
84449: EQUAL
84450: IFTRUE 84454
84452: GO 84465
84454: POP
// bc_type := b_warehouse ; 3 :
84455: LD_ADDR_OWVAR 42
84459: PUSH
84460: LD_INT 1
84462: ST_TO_ADDR
84463: GO 85066
84465: LD_INT 3
84467: DOUBLE
84468: EQUAL
84469: IFTRUE 84473
84471: GO 84484
84473: POP
// bc_type := b_lab ; 4 .. 9 :
84474: LD_ADDR_OWVAR 42
84478: PUSH
84479: LD_INT 6
84481: ST_TO_ADDR
84482: GO 85066
84484: LD_INT 4
84486: DOUBLE
84487: GREATEREQUAL
84488: IFFALSE 84496
84490: LD_INT 9
84492: DOUBLE
84493: LESSEQUAL
84494: IFTRUE 84498
84496: GO 84558
84498: POP
// begin bc_type := b_lab_half ;
84499: LD_ADDR_OWVAR 42
84503: PUSH
84504: LD_INT 7
84506: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
84507: LD_ADDR_OWVAR 44
84511: PUSH
84512: LD_INT 10
84514: PUSH
84515: LD_INT 11
84517: PUSH
84518: LD_INT 12
84520: PUSH
84521: LD_INT 15
84523: PUSH
84524: LD_INT 14
84526: PUSH
84527: LD_INT 13
84529: PUSH
84530: EMPTY
84531: LIST
84532: LIST
84533: LIST
84534: LIST
84535: LIST
84536: LIST
84537: PUSH
84538: LD_VAR 0 2
84542: PUSH
84543: LD_INT 3
84545: MINUS
84546: ARRAY
84547: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
84548: LD_ADDR_OWVAR 45
84552: PUSH
84553: LD_INT 9
84555: ST_TO_ADDR
// end ; 10 .. 13 :
84556: GO 85066
84558: LD_INT 10
84560: DOUBLE
84561: GREATEREQUAL
84562: IFFALSE 84570
84564: LD_INT 13
84566: DOUBLE
84567: LESSEQUAL
84568: IFTRUE 84572
84570: GO 84649
84572: POP
// begin bc_type := b_lab_full ;
84573: LD_ADDR_OWVAR 42
84577: PUSH
84578: LD_INT 8
84580: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
84581: LD_ADDR_OWVAR 44
84585: PUSH
84586: LD_INT 10
84588: PUSH
84589: LD_INT 12
84591: PUSH
84592: LD_INT 14
84594: PUSH
84595: LD_INT 13
84597: PUSH
84598: EMPTY
84599: LIST
84600: LIST
84601: LIST
84602: LIST
84603: PUSH
84604: LD_VAR 0 2
84608: PUSH
84609: LD_INT 9
84611: MINUS
84612: ARRAY
84613: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
84614: LD_ADDR_OWVAR 45
84618: PUSH
84619: LD_INT 11
84621: PUSH
84622: LD_INT 15
84624: PUSH
84625: LD_INT 12
84627: PUSH
84628: LD_INT 15
84630: PUSH
84631: EMPTY
84632: LIST
84633: LIST
84634: LIST
84635: LIST
84636: PUSH
84637: LD_VAR 0 2
84641: PUSH
84642: LD_INT 9
84644: MINUS
84645: ARRAY
84646: ST_TO_ADDR
// end ; 14 :
84647: GO 85066
84649: LD_INT 14
84651: DOUBLE
84652: EQUAL
84653: IFTRUE 84657
84655: GO 84668
84657: POP
// bc_type := b_workshop ; 15 :
84658: LD_ADDR_OWVAR 42
84662: PUSH
84663: LD_INT 2
84665: ST_TO_ADDR
84666: GO 85066
84668: LD_INT 15
84670: DOUBLE
84671: EQUAL
84672: IFTRUE 84676
84674: GO 84687
84676: POP
// bc_type := b_factory ; 16 :
84677: LD_ADDR_OWVAR 42
84681: PUSH
84682: LD_INT 3
84684: ST_TO_ADDR
84685: GO 85066
84687: LD_INT 16
84689: DOUBLE
84690: EQUAL
84691: IFTRUE 84695
84693: GO 84706
84695: POP
// bc_type := b_ext_gun ; 17 :
84696: LD_ADDR_OWVAR 42
84700: PUSH
84701: LD_INT 17
84703: ST_TO_ADDR
84704: GO 85066
84706: LD_INT 17
84708: DOUBLE
84709: EQUAL
84710: IFTRUE 84714
84712: GO 84742
84714: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
84715: LD_ADDR_OWVAR 42
84719: PUSH
84720: LD_INT 19
84722: PUSH
84723: LD_INT 23
84725: PUSH
84726: LD_INT 19
84728: PUSH
84729: EMPTY
84730: LIST
84731: LIST
84732: LIST
84733: PUSH
84734: LD_VAR 0 1
84738: ARRAY
84739: ST_TO_ADDR
84740: GO 85066
84742: LD_INT 18
84744: DOUBLE
84745: EQUAL
84746: IFTRUE 84750
84748: GO 84761
84750: POP
// bc_type := b_ext_radar ; 19 :
84751: LD_ADDR_OWVAR 42
84755: PUSH
84756: LD_INT 20
84758: ST_TO_ADDR
84759: GO 85066
84761: LD_INT 19
84763: DOUBLE
84764: EQUAL
84765: IFTRUE 84769
84767: GO 84780
84769: POP
// bc_type := b_ext_radio ; 20 :
84770: LD_ADDR_OWVAR 42
84774: PUSH
84775: LD_INT 22
84777: ST_TO_ADDR
84778: GO 85066
84780: LD_INT 20
84782: DOUBLE
84783: EQUAL
84784: IFTRUE 84788
84786: GO 84799
84788: POP
// bc_type := b_ext_siberium ; 21 :
84789: LD_ADDR_OWVAR 42
84793: PUSH
84794: LD_INT 21
84796: ST_TO_ADDR
84797: GO 85066
84799: LD_INT 21
84801: DOUBLE
84802: EQUAL
84803: IFTRUE 84807
84805: GO 84818
84807: POP
// bc_type := b_ext_computer ; 22 :
84808: LD_ADDR_OWVAR 42
84812: PUSH
84813: LD_INT 24
84815: ST_TO_ADDR
84816: GO 85066
84818: LD_INT 22
84820: DOUBLE
84821: EQUAL
84822: IFTRUE 84826
84824: GO 84837
84826: POP
// bc_type := b_ext_track ; 23 :
84827: LD_ADDR_OWVAR 42
84831: PUSH
84832: LD_INT 16
84834: ST_TO_ADDR
84835: GO 85066
84837: LD_INT 23
84839: DOUBLE
84840: EQUAL
84841: IFTRUE 84845
84843: GO 84856
84845: POP
// bc_type := b_ext_laser ; 24 :
84846: LD_ADDR_OWVAR 42
84850: PUSH
84851: LD_INT 25
84853: ST_TO_ADDR
84854: GO 85066
84856: LD_INT 24
84858: DOUBLE
84859: EQUAL
84860: IFTRUE 84864
84862: GO 84875
84864: POP
// bc_type := b_control_tower ; 25 :
84865: LD_ADDR_OWVAR 42
84869: PUSH
84870: LD_INT 36
84872: ST_TO_ADDR
84873: GO 85066
84875: LD_INT 25
84877: DOUBLE
84878: EQUAL
84879: IFTRUE 84883
84881: GO 84894
84883: POP
// bc_type := b_breastwork ; 26 :
84884: LD_ADDR_OWVAR 42
84888: PUSH
84889: LD_INT 31
84891: ST_TO_ADDR
84892: GO 85066
84894: LD_INT 26
84896: DOUBLE
84897: EQUAL
84898: IFTRUE 84902
84900: GO 84913
84902: POP
// bc_type := b_bunker ; 27 :
84903: LD_ADDR_OWVAR 42
84907: PUSH
84908: LD_INT 32
84910: ST_TO_ADDR
84911: GO 85066
84913: LD_INT 27
84915: DOUBLE
84916: EQUAL
84917: IFTRUE 84921
84919: GO 84932
84921: POP
// bc_type := b_turret ; 28 :
84922: LD_ADDR_OWVAR 42
84926: PUSH
84927: LD_INT 33
84929: ST_TO_ADDR
84930: GO 85066
84932: LD_INT 28
84934: DOUBLE
84935: EQUAL
84936: IFTRUE 84940
84938: GO 84951
84940: POP
// bc_type := b_armoury ; 29 :
84941: LD_ADDR_OWVAR 42
84945: PUSH
84946: LD_INT 4
84948: ST_TO_ADDR
84949: GO 85066
84951: LD_INT 29
84953: DOUBLE
84954: EQUAL
84955: IFTRUE 84959
84957: GO 84970
84959: POP
// bc_type := b_barracks ; 30 :
84960: LD_ADDR_OWVAR 42
84964: PUSH
84965: LD_INT 5
84967: ST_TO_ADDR
84968: GO 85066
84970: LD_INT 30
84972: DOUBLE
84973: EQUAL
84974: IFTRUE 84978
84976: GO 84989
84978: POP
// bc_type := b_solar_power ; 31 :
84979: LD_ADDR_OWVAR 42
84983: PUSH
84984: LD_INT 27
84986: ST_TO_ADDR
84987: GO 85066
84989: LD_INT 31
84991: DOUBLE
84992: EQUAL
84993: IFTRUE 84997
84995: GO 85008
84997: POP
// bc_type := b_oil_power ; 32 :
84998: LD_ADDR_OWVAR 42
85002: PUSH
85003: LD_INT 26
85005: ST_TO_ADDR
85006: GO 85066
85008: LD_INT 32
85010: DOUBLE
85011: EQUAL
85012: IFTRUE 85016
85014: GO 85027
85016: POP
// bc_type := b_siberite_power ; 33 :
85017: LD_ADDR_OWVAR 42
85021: PUSH
85022: LD_INT 28
85024: ST_TO_ADDR
85025: GO 85066
85027: LD_INT 33
85029: DOUBLE
85030: EQUAL
85031: IFTRUE 85035
85033: GO 85046
85035: POP
// bc_type := b_oil_mine ; 34 :
85036: LD_ADDR_OWVAR 42
85040: PUSH
85041: LD_INT 29
85043: ST_TO_ADDR
85044: GO 85066
85046: LD_INT 34
85048: DOUBLE
85049: EQUAL
85050: IFTRUE 85054
85052: GO 85065
85054: POP
// bc_type := b_siberite_mine ; end ;
85055: LD_ADDR_OWVAR 42
85059: PUSH
85060: LD_INT 30
85062: ST_TO_ADDR
85063: GO 85066
85065: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
85066: LD_ADDR_VAR 0 8
85070: PUSH
85071: LD_VAR 0 5
85075: PPUSH
85076: LD_VAR 0 6
85080: PPUSH
85081: LD_VAR 0 3
85085: PPUSH
85086: CALL_OW 47
85090: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
85091: LD_OWVAR 42
85095: PUSH
85096: LD_INT 32
85098: PUSH
85099: LD_INT 33
85101: PUSH
85102: EMPTY
85103: LIST
85104: LIST
85105: IN
85106: IFFALSE 85122
// PlaceWeaponTurret ( b , weapon ) ;
85108: LD_VAR 0 8
85112: PPUSH
85113: LD_VAR 0 4
85117: PPUSH
85118: CALL_OW 431
// end ;
85122: LD_VAR 0 7
85126: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
85127: LD_INT 0
85129: PPUSH
85130: PPUSH
85131: PPUSH
85132: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
85133: LD_ADDR_VAR 0 4
85137: PUSH
85138: LD_INT 22
85140: PUSH
85141: LD_OWVAR 2
85145: PUSH
85146: EMPTY
85147: LIST
85148: LIST
85149: PUSH
85150: LD_INT 2
85152: PUSH
85153: LD_INT 30
85155: PUSH
85156: LD_INT 0
85158: PUSH
85159: EMPTY
85160: LIST
85161: LIST
85162: PUSH
85163: LD_INT 30
85165: PUSH
85166: LD_INT 1
85168: PUSH
85169: EMPTY
85170: LIST
85171: LIST
85172: PUSH
85173: EMPTY
85174: LIST
85175: LIST
85176: LIST
85177: PUSH
85178: EMPTY
85179: LIST
85180: LIST
85181: PPUSH
85182: CALL_OW 69
85186: ST_TO_ADDR
// if not tmp then
85187: LD_VAR 0 4
85191: NOT
85192: IFFALSE 85196
// exit ;
85194: GO 85255
// for i in tmp do
85196: LD_ADDR_VAR 0 2
85200: PUSH
85201: LD_VAR 0 4
85205: PUSH
85206: FOR_IN
85207: IFFALSE 85253
// for j = 1 to 3 do
85209: LD_ADDR_VAR 0 3
85213: PUSH
85214: DOUBLE
85215: LD_INT 1
85217: DEC
85218: ST_TO_ADDR
85219: LD_INT 3
85221: PUSH
85222: FOR_TO
85223: IFFALSE 85249
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
85225: LD_VAR 0 2
85229: PPUSH
85230: CALL_OW 274
85234: PPUSH
85235: LD_VAR 0 3
85239: PPUSH
85240: LD_INT 99999
85242: PPUSH
85243: CALL_OW 277
85247: GO 85222
85249: POP
85250: POP
85251: GO 85206
85253: POP
85254: POP
// end ;
85255: LD_VAR 0 1
85259: RET
// export function hHackSetLevel10 ; var i , j ; begin
85260: LD_INT 0
85262: PPUSH
85263: PPUSH
85264: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
85265: LD_ADDR_VAR 0 2
85269: PUSH
85270: LD_INT 21
85272: PUSH
85273: LD_INT 1
85275: PUSH
85276: EMPTY
85277: LIST
85278: LIST
85279: PPUSH
85280: CALL_OW 69
85284: PUSH
85285: FOR_IN
85286: IFFALSE 85338
// if IsSelected ( i ) then
85288: LD_VAR 0 2
85292: PPUSH
85293: CALL_OW 306
85297: IFFALSE 85336
// begin for j := 1 to 4 do
85299: LD_ADDR_VAR 0 3
85303: PUSH
85304: DOUBLE
85305: LD_INT 1
85307: DEC
85308: ST_TO_ADDR
85309: LD_INT 4
85311: PUSH
85312: FOR_TO
85313: IFFALSE 85334
// SetSkill ( i , j , 10 ) ;
85315: LD_VAR 0 2
85319: PPUSH
85320: LD_VAR 0 3
85324: PPUSH
85325: LD_INT 10
85327: PPUSH
85328: CALL_OW 237
85332: GO 85312
85334: POP
85335: POP
// end ;
85336: GO 85285
85338: POP
85339: POP
// end ;
85340: LD_VAR 0 1
85344: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
85345: LD_INT 0
85347: PPUSH
85348: PPUSH
85349: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
85350: LD_ADDR_VAR 0 2
85354: PUSH
85355: LD_INT 22
85357: PUSH
85358: LD_OWVAR 2
85362: PUSH
85363: EMPTY
85364: LIST
85365: LIST
85366: PUSH
85367: LD_INT 21
85369: PUSH
85370: LD_INT 1
85372: PUSH
85373: EMPTY
85374: LIST
85375: LIST
85376: PUSH
85377: EMPTY
85378: LIST
85379: LIST
85380: PPUSH
85381: CALL_OW 69
85385: PUSH
85386: FOR_IN
85387: IFFALSE 85428
// begin for j := 1 to 4 do
85389: LD_ADDR_VAR 0 3
85393: PUSH
85394: DOUBLE
85395: LD_INT 1
85397: DEC
85398: ST_TO_ADDR
85399: LD_INT 4
85401: PUSH
85402: FOR_TO
85403: IFFALSE 85424
// SetSkill ( i , j , 10 ) ;
85405: LD_VAR 0 2
85409: PPUSH
85410: LD_VAR 0 3
85414: PPUSH
85415: LD_INT 10
85417: PPUSH
85418: CALL_OW 237
85422: GO 85402
85424: POP
85425: POP
// end ;
85426: GO 85386
85428: POP
85429: POP
// end ;
85430: LD_VAR 0 1
85434: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
85435: LD_INT 0
85437: PPUSH
// uc_side := your_side ;
85438: LD_ADDR_OWVAR 20
85442: PUSH
85443: LD_OWVAR 2
85447: ST_TO_ADDR
// uc_nation := nation ;
85448: LD_ADDR_OWVAR 21
85452: PUSH
85453: LD_VAR 0 1
85457: ST_TO_ADDR
// InitHc ;
85458: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
85462: LD_INT 0
85464: PPUSH
85465: LD_VAR 0 2
85469: PPUSH
85470: LD_VAR 0 3
85474: PPUSH
85475: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
85479: LD_VAR 0 4
85483: PPUSH
85484: LD_VAR 0 5
85488: PPUSH
85489: CALL_OW 428
85493: PUSH
85494: LD_INT 0
85496: EQUAL
85497: IFFALSE 85521
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
85499: CALL_OW 44
85503: PPUSH
85504: LD_VAR 0 4
85508: PPUSH
85509: LD_VAR 0 5
85513: PPUSH
85514: LD_INT 1
85516: PPUSH
85517: CALL_OW 48
// end ;
85521: LD_VAR 0 6
85525: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
85526: LD_INT 0
85528: PPUSH
85529: PPUSH
// uc_side := your_side ;
85530: LD_ADDR_OWVAR 20
85534: PUSH
85535: LD_OWVAR 2
85539: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
85540: LD_VAR 0 1
85544: PUSH
85545: LD_INT 1
85547: PUSH
85548: LD_INT 2
85550: PUSH
85551: LD_INT 3
85553: PUSH
85554: LD_INT 4
85556: PUSH
85557: LD_INT 5
85559: PUSH
85560: EMPTY
85561: LIST
85562: LIST
85563: LIST
85564: LIST
85565: LIST
85566: IN
85567: IFFALSE 85579
// uc_nation := nation_american else
85569: LD_ADDR_OWVAR 21
85573: PUSH
85574: LD_INT 1
85576: ST_TO_ADDR
85577: GO 85622
// if chassis in [ 11 , 12 , 13 , 14 ] then
85579: LD_VAR 0 1
85583: PUSH
85584: LD_INT 11
85586: PUSH
85587: LD_INT 12
85589: PUSH
85590: LD_INT 13
85592: PUSH
85593: LD_INT 14
85595: PUSH
85596: EMPTY
85597: LIST
85598: LIST
85599: LIST
85600: LIST
85601: IN
85602: IFFALSE 85614
// uc_nation := nation_arabian else
85604: LD_ADDR_OWVAR 21
85608: PUSH
85609: LD_INT 2
85611: ST_TO_ADDR
85612: GO 85622
// uc_nation := nation_russian ;
85614: LD_ADDR_OWVAR 21
85618: PUSH
85619: LD_INT 3
85621: ST_TO_ADDR
// vc_chassis := chassis ;
85622: LD_ADDR_OWVAR 37
85626: PUSH
85627: LD_VAR 0 1
85631: ST_TO_ADDR
// vc_engine := engine ;
85632: LD_ADDR_OWVAR 39
85636: PUSH
85637: LD_VAR 0 2
85641: ST_TO_ADDR
// vc_control := control ;
85642: LD_ADDR_OWVAR 38
85646: PUSH
85647: LD_VAR 0 3
85651: ST_TO_ADDR
// vc_weapon := weapon ;
85652: LD_ADDR_OWVAR 40
85656: PUSH
85657: LD_VAR 0 4
85661: ST_TO_ADDR
// un := CreateVehicle ;
85662: LD_ADDR_VAR 0 8
85666: PUSH
85667: CALL_OW 45
85671: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
85672: LD_VAR 0 8
85676: PPUSH
85677: LD_INT 0
85679: PPUSH
85680: LD_INT 5
85682: PPUSH
85683: CALL_OW 12
85687: PPUSH
85688: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
85692: LD_VAR 0 8
85696: PPUSH
85697: LD_VAR 0 5
85701: PPUSH
85702: LD_VAR 0 6
85706: PPUSH
85707: LD_INT 1
85709: PPUSH
85710: CALL_OW 48
// end ;
85714: LD_VAR 0 7
85718: RET
// export hInvincible ; every 1 do
85719: GO 85721
85721: DISABLE
// hInvincible := [ ] ;
85722: LD_ADDR_EXP 121
85726: PUSH
85727: EMPTY
85728: ST_TO_ADDR
85729: END
// every 10 do var i ;
85730: GO 85732
85732: DISABLE
85733: LD_INT 0
85735: PPUSH
// begin enable ;
85736: ENABLE
// if not hInvincible then
85737: LD_EXP 121
85741: NOT
85742: IFFALSE 85746
// exit ;
85744: GO 85790
// for i in hInvincible do
85746: LD_ADDR_VAR 0 1
85750: PUSH
85751: LD_EXP 121
85755: PUSH
85756: FOR_IN
85757: IFFALSE 85788
// if GetLives ( i ) < 1000 then
85759: LD_VAR 0 1
85763: PPUSH
85764: CALL_OW 256
85768: PUSH
85769: LD_INT 1000
85771: LESS
85772: IFFALSE 85786
// SetLives ( i , 1000 ) ;
85774: LD_VAR 0 1
85778: PPUSH
85779: LD_INT 1000
85781: PPUSH
85782: CALL_OW 234
85786: GO 85756
85788: POP
85789: POP
// end ;
85790: PPOPN 1
85792: END
// export function hHackInvincible ; var i ; begin
85793: LD_INT 0
85795: PPUSH
85796: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
85797: LD_ADDR_VAR 0 2
85801: PUSH
85802: LD_INT 2
85804: PUSH
85805: LD_INT 21
85807: PUSH
85808: LD_INT 1
85810: PUSH
85811: EMPTY
85812: LIST
85813: LIST
85814: PUSH
85815: LD_INT 21
85817: PUSH
85818: LD_INT 2
85820: PUSH
85821: EMPTY
85822: LIST
85823: LIST
85824: PUSH
85825: EMPTY
85826: LIST
85827: LIST
85828: LIST
85829: PPUSH
85830: CALL_OW 69
85834: PUSH
85835: FOR_IN
85836: IFFALSE 85897
// if IsSelected ( i ) then
85838: LD_VAR 0 2
85842: PPUSH
85843: CALL_OW 306
85847: IFFALSE 85895
// begin if i in hInvincible then
85849: LD_VAR 0 2
85853: PUSH
85854: LD_EXP 121
85858: IN
85859: IFFALSE 85879
// hInvincible := hInvincible diff i else
85861: LD_ADDR_EXP 121
85865: PUSH
85866: LD_EXP 121
85870: PUSH
85871: LD_VAR 0 2
85875: DIFF
85876: ST_TO_ADDR
85877: GO 85895
// hInvincible := hInvincible union i ;
85879: LD_ADDR_EXP 121
85883: PUSH
85884: LD_EXP 121
85888: PUSH
85889: LD_VAR 0 2
85893: UNION
85894: ST_TO_ADDR
// end ;
85895: GO 85835
85897: POP
85898: POP
// end ;
85899: LD_VAR 0 1
85903: RET
// export function hHackInvisible ; var i , j ; begin
85904: LD_INT 0
85906: PPUSH
85907: PPUSH
85908: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
85909: LD_ADDR_VAR 0 2
85913: PUSH
85914: LD_INT 21
85916: PUSH
85917: LD_INT 1
85919: PUSH
85920: EMPTY
85921: LIST
85922: LIST
85923: PPUSH
85924: CALL_OW 69
85928: PUSH
85929: FOR_IN
85930: IFFALSE 85954
// if IsSelected ( i ) then
85932: LD_VAR 0 2
85936: PPUSH
85937: CALL_OW 306
85941: IFFALSE 85952
// ComForceInvisible ( i ) ;
85943: LD_VAR 0 2
85947: PPUSH
85948: CALL_OW 496
85952: GO 85929
85954: POP
85955: POP
// end ;
85956: LD_VAR 0 1
85960: RET
// export function hHackChangeYourSide ; begin
85961: LD_INT 0
85963: PPUSH
// if your_side = 8 then
85964: LD_OWVAR 2
85968: PUSH
85969: LD_INT 8
85971: EQUAL
85972: IFFALSE 85984
// your_side := 0 else
85974: LD_ADDR_OWVAR 2
85978: PUSH
85979: LD_INT 0
85981: ST_TO_ADDR
85982: GO 85998
// your_side := your_side + 1 ;
85984: LD_ADDR_OWVAR 2
85988: PUSH
85989: LD_OWVAR 2
85993: PUSH
85994: LD_INT 1
85996: PLUS
85997: ST_TO_ADDR
// end ;
85998: LD_VAR 0 1
86002: RET
// export function hHackChangeUnitSide ; var i , j ; begin
86003: LD_INT 0
86005: PPUSH
86006: PPUSH
86007: PPUSH
// for i in all_units do
86008: LD_ADDR_VAR 0 2
86012: PUSH
86013: LD_OWVAR 3
86017: PUSH
86018: FOR_IN
86019: IFFALSE 86097
// if IsSelected ( i ) then
86021: LD_VAR 0 2
86025: PPUSH
86026: CALL_OW 306
86030: IFFALSE 86095
// begin j := GetSide ( i ) ;
86032: LD_ADDR_VAR 0 3
86036: PUSH
86037: LD_VAR 0 2
86041: PPUSH
86042: CALL_OW 255
86046: ST_TO_ADDR
// if j = 8 then
86047: LD_VAR 0 3
86051: PUSH
86052: LD_INT 8
86054: EQUAL
86055: IFFALSE 86067
// j := 0 else
86057: LD_ADDR_VAR 0 3
86061: PUSH
86062: LD_INT 0
86064: ST_TO_ADDR
86065: GO 86081
// j := j + 1 ;
86067: LD_ADDR_VAR 0 3
86071: PUSH
86072: LD_VAR 0 3
86076: PUSH
86077: LD_INT 1
86079: PLUS
86080: ST_TO_ADDR
// SetSide ( i , j ) ;
86081: LD_VAR 0 2
86085: PPUSH
86086: LD_VAR 0 3
86090: PPUSH
86091: CALL_OW 235
// end ;
86095: GO 86018
86097: POP
86098: POP
// end ;
86099: LD_VAR 0 1
86103: RET
// export function hHackFog ; begin
86104: LD_INT 0
86106: PPUSH
// FogOff ( true ) ;
86107: LD_INT 1
86109: PPUSH
86110: CALL_OW 344
// end ;
86114: LD_VAR 0 1
86118: RET
// export function hHackTeleport ( unit , x , y ) ; begin
86119: LD_INT 0
86121: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
86122: LD_VAR 0 1
86126: PPUSH
86127: LD_VAR 0 2
86131: PPUSH
86132: LD_VAR 0 3
86136: PPUSH
86137: LD_INT 1
86139: PPUSH
86140: LD_INT 1
86142: PPUSH
86143: CALL_OW 483
// CenterOnXY ( x , y ) ;
86147: LD_VAR 0 2
86151: PPUSH
86152: LD_VAR 0 3
86156: PPUSH
86157: CALL_OW 84
// end ;
86161: LD_VAR 0 4
86165: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
86166: LD_INT 0
86168: PPUSH
86169: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
86170: LD_VAR 0 1
86174: NOT
86175: PUSH
86176: LD_VAR 0 2
86180: PPUSH
86181: LD_VAR 0 3
86185: PPUSH
86186: CALL_OW 488
86190: NOT
86191: OR
86192: PUSH
86193: LD_VAR 0 1
86197: PPUSH
86198: CALL_OW 266
86202: PUSH
86203: LD_INT 3
86205: NONEQUAL
86206: PUSH
86207: LD_VAR 0 1
86211: PPUSH
86212: CALL_OW 247
86216: PUSH
86217: LD_INT 1
86219: EQUAL
86220: NOT
86221: AND
86222: OR
86223: IFFALSE 86227
// exit ;
86225: GO 86376
// if GetType ( factory ) = unit_human then
86227: LD_VAR 0 1
86231: PPUSH
86232: CALL_OW 247
86236: PUSH
86237: LD_INT 1
86239: EQUAL
86240: IFFALSE 86257
// factory := IsInUnit ( factory ) ;
86242: LD_ADDR_VAR 0 1
86246: PUSH
86247: LD_VAR 0 1
86251: PPUSH
86252: CALL_OW 310
86256: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
86257: LD_VAR 0 1
86261: PPUSH
86262: CALL_OW 266
86266: PUSH
86267: LD_INT 3
86269: NONEQUAL
86270: IFFALSE 86274
// exit ;
86272: GO 86376
// if HexInfo ( x , y ) = factory then
86274: LD_VAR 0 2
86278: PPUSH
86279: LD_VAR 0 3
86283: PPUSH
86284: CALL_OW 428
86288: PUSH
86289: LD_VAR 0 1
86293: EQUAL
86294: IFFALSE 86321
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
86296: LD_ADDR_EXP 122
86300: PUSH
86301: LD_EXP 122
86305: PPUSH
86306: LD_VAR 0 1
86310: PPUSH
86311: LD_INT 0
86313: PPUSH
86314: CALL_OW 1
86318: ST_TO_ADDR
86319: GO 86372
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
86321: LD_ADDR_EXP 122
86325: PUSH
86326: LD_EXP 122
86330: PPUSH
86331: LD_VAR 0 1
86335: PPUSH
86336: LD_VAR 0 1
86340: PPUSH
86341: CALL_OW 255
86345: PUSH
86346: LD_VAR 0 1
86350: PUSH
86351: LD_VAR 0 2
86355: PUSH
86356: LD_VAR 0 3
86360: PUSH
86361: EMPTY
86362: LIST
86363: LIST
86364: LIST
86365: LIST
86366: PPUSH
86367: CALL_OW 1
86371: ST_TO_ADDR
// UpdateFactoryWaypoints ;
86372: CALL 86381 0 0
// end ;
86376: LD_VAR 0 4
86380: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
86381: LD_INT 0
86383: PPUSH
86384: PPUSH
86385: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
86386: LD_STRING resetFactoryWaypoint();
86388: PPUSH
86389: CALL_OW 559
// if factoryWaypoints then
86393: LD_EXP 122
86397: IFFALSE 86523
// begin list := PrepareArray ( factoryWaypoints ) ;
86399: LD_ADDR_VAR 0 3
86403: PUSH
86404: LD_EXP 122
86408: PPUSH
86409: CALL 70903 0 1
86413: ST_TO_ADDR
// for i := 1 to list do
86414: LD_ADDR_VAR 0 2
86418: PUSH
86419: DOUBLE
86420: LD_INT 1
86422: DEC
86423: ST_TO_ADDR
86424: LD_VAR 0 3
86428: PUSH
86429: FOR_TO
86430: IFFALSE 86521
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
86432: LD_STRING setFactoryWaypointXY(
86434: PUSH
86435: LD_VAR 0 3
86439: PUSH
86440: LD_VAR 0 2
86444: ARRAY
86445: PUSH
86446: LD_INT 1
86448: ARRAY
86449: STR
86450: PUSH
86451: LD_STRING ,
86453: STR
86454: PUSH
86455: LD_VAR 0 3
86459: PUSH
86460: LD_VAR 0 2
86464: ARRAY
86465: PUSH
86466: LD_INT 2
86468: ARRAY
86469: STR
86470: PUSH
86471: LD_STRING ,
86473: STR
86474: PUSH
86475: LD_VAR 0 3
86479: PUSH
86480: LD_VAR 0 2
86484: ARRAY
86485: PUSH
86486: LD_INT 3
86488: ARRAY
86489: STR
86490: PUSH
86491: LD_STRING ,
86493: STR
86494: PUSH
86495: LD_VAR 0 3
86499: PUSH
86500: LD_VAR 0 2
86504: ARRAY
86505: PUSH
86506: LD_INT 4
86508: ARRAY
86509: STR
86510: PUSH
86511: LD_STRING )
86513: STR
86514: PPUSH
86515: CALL_OW 559
86519: GO 86429
86521: POP
86522: POP
// end ; end ;
86523: LD_VAR 0 1
86527: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
86528: LD_INT 0
86530: PPUSH
// if HexInfo ( x , y ) = warehouse then
86531: LD_VAR 0 2
86535: PPUSH
86536: LD_VAR 0 3
86540: PPUSH
86541: CALL_OW 428
86545: PUSH
86546: LD_VAR 0 1
86550: EQUAL
86551: IFFALSE 86578
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
86553: LD_ADDR_EXP 123
86557: PUSH
86558: LD_EXP 123
86562: PPUSH
86563: LD_VAR 0 1
86567: PPUSH
86568: LD_INT 0
86570: PPUSH
86571: CALL_OW 1
86575: ST_TO_ADDR
86576: GO 86629
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
86578: LD_ADDR_EXP 123
86582: PUSH
86583: LD_EXP 123
86587: PPUSH
86588: LD_VAR 0 1
86592: PPUSH
86593: LD_VAR 0 1
86597: PPUSH
86598: CALL_OW 255
86602: PUSH
86603: LD_VAR 0 1
86607: PUSH
86608: LD_VAR 0 2
86612: PUSH
86613: LD_VAR 0 3
86617: PUSH
86618: EMPTY
86619: LIST
86620: LIST
86621: LIST
86622: LIST
86623: PPUSH
86624: CALL_OW 1
86628: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
86629: CALL 86638 0 0
// end ;
86633: LD_VAR 0 4
86637: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
86638: LD_INT 0
86640: PPUSH
86641: PPUSH
86642: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
86643: LD_STRING resetWarehouseGatheringPoints();
86645: PPUSH
86646: CALL_OW 559
// if warehouseGatheringPoints then
86650: LD_EXP 123
86654: IFFALSE 86780
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
86656: LD_ADDR_VAR 0 3
86660: PUSH
86661: LD_EXP 123
86665: PPUSH
86666: CALL 70903 0 1
86670: ST_TO_ADDR
// for i := 1 to list do
86671: LD_ADDR_VAR 0 2
86675: PUSH
86676: DOUBLE
86677: LD_INT 1
86679: DEC
86680: ST_TO_ADDR
86681: LD_VAR 0 3
86685: PUSH
86686: FOR_TO
86687: IFFALSE 86778
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
86689: LD_STRING setWarehouseGatheringPointXY(
86691: PUSH
86692: LD_VAR 0 3
86696: PUSH
86697: LD_VAR 0 2
86701: ARRAY
86702: PUSH
86703: LD_INT 1
86705: ARRAY
86706: STR
86707: PUSH
86708: LD_STRING ,
86710: STR
86711: PUSH
86712: LD_VAR 0 3
86716: PUSH
86717: LD_VAR 0 2
86721: ARRAY
86722: PUSH
86723: LD_INT 2
86725: ARRAY
86726: STR
86727: PUSH
86728: LD_STRING ,
86730: STR
86731: PUSH
86732: LD_VAR 0 3
86736: PUSH
86737: LD_VAR 0 2
86741: ARRAY
86742: PUSH
86743: LD_INT 3
86745: ARRAY
86746: STR
86747: PUSH
86748: LD_STRING ,
86750: STR
86751: PUSH
86752: LD_VAR 0 3
86756: PUSH
86757: LD_VAR 0 2
86761: ARRAY
86762: PUSH
86763: LD_INT 4
86765: ARRAY
86766: STR
86767: PUSH
86768: LD_STRING )
86770: STR
86771: PPUSH
86772: CALL_OW 559
86776: GO 86686
86778: POP
86779: POP
// end ; end ;
86780: LD_VAR 0 1
86784: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
86785: LD_EXP 123
86789: IFFALSE 87474
86791: GO 86793
86793: DISABLE
86794: LD_INT 0
86796: PPUSH
86797: PPUSH
86798: PPUSH
86799: PPUSH
86800: PPUSH
86801: PPUSH
86802: PPUSH
86803: PPUSH
86804: PPUSH
// begin enable ;
86805: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
86806: LD_ADDR_VAR 0 3
86810: PUSH
86811: LD_EXP 123
86815: PPUSH
86816: CALL 70903 0 1
86820: ST_TO_ADDR
// if not list then
86821: LD_VAR 0 3
86825: NOT
86826: IFFALSE 86830
// exit ;
86828: GO 87474
// for i := 1 to list do
86830: LD_ADDR_VAR 0 1
86834: PUSH
86835: DOUBLE
86836: LD_INT 1
86838: DEC
86839: ST_TO_ADDR
86840: LD_VAR 0 3
86844: PUSH
86845: FOR_TO
86846: IFFALSE 87472
// begin depot := list [ i ] [ 2 ] ;
86848: LD_ADDR_VAR 0 8
86852: PUSH
86853: LD_VAR 0 3
86857: PUSH
86858: LD_VAR 0 1
86862: ARRAY
86863: PUSH
86864: LD_INT 2
86866: ARRAY
86867: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
86868: LD_ADDR_VAR 0 5
86872: PUSH
86873: LD_VAR 0 3
86877: PUSH
86878: LD_VAR 0 1
86882: ARRAY
86883: PUSH
86884: LD_INT 1
86886: ARRAY
86887: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
86888: LD_VAR 0 8
86892: PPUSH
86893: CALL_OW 301
86897: PUSH
86898: LD_VAR 0 5
86902: PUSH
86903: LD_VAR 0 8
86907: PPUSH
86908: CALL_OW 255
86912: NONEQUAL
86913: OR
86914: IFFALSE 86943
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
86916: LD_ADDR_EXP 123
86920: PUSH
86921: LD_EXP 123
86925: PPUSH
86926: LD_VAR 0 8
86930: PPUSH
86931: LD_INT 0
86933: PPUSH
86934: CALL_OW 1
86938: ST_TO_ADDR
// exit ;
86939: POP
86940: POP
86941: GO 87474
// end ; x := list [ i ] [ 3 ] ;
86943: LD_ADDR_VAR 0 6
86947: PUSH
86948: LD_VAR 0 3
86952: PUSH
86953: LD_VAR 0 1
86957: ARRAY
86958: PUSH
86959: LD_INT 3
86961: ARRAY
86962: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
86963: LD_ADDR_VAR 0 7
86967: PUSH
86968: LD_VAR 0 3
86972: PUSH
86973: LD_VAR 0 1
86977: ARRAY
86978: PUSH
86979: LD_INT 4
86981: ARRAY
86982: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
86983: LD_ADDR_VAR 0 9
86987: PUSH
86988: LD_VAR 0 6
86992: PPUSH
86993: LD_VAR 0 7
86997: PPUSH
86998: LD_INT 16
87000: PPUSH
87001: CALL 69491 0 3
87005: ST_TO_ADDR
// if not cratesNearbyPoint then
87006: LD_VAR 0 9
87010: NOT
87011: IFFALSE 87017
// exit ;
87013: POP
87014: POP
87015: GO 87474
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
87017: LD_ADDR_VAR 0 4
87021: PUSH
87022: LD_INT 22
87024: PUSH
87025: LD_VAR 0 5
87029: PUSH
87030: EMPTY
87031: LIST
87032: LIST
87033: PUSH
87034: LD_INT 3
87036: PUSH
87037: LD_INT 60
87039: PUSH
87040: EMPTY
87041: LIST
87042: PUSH
87043: EMPTY
87044: LIST
87045: LIST
87046: PUSH
87047: LD_INT 91
87049: PUSH
87050: LD_VAR 0 8
87054: PUSH
87055: LD_INT 6
87057: PUSH
87058: EMPTY
87059: LIST
87060: LIST
87061: LIST
87062: PUSH
87063: LD_INT 2
87065: PUSH
87066: LD_INT 25
87068: PUSH
87069: LD_INT 2
87071: PUSH
87072: EMPTY
87073: LIST
87074: LIST
87075: PUSH
87076: LD_INT 25
87078: PUSH
87079: LD_INT 16
87081: PUSH
87082: EMPTY
87083: LIST
87084: LIST
87085: PUSH
87086: EMPTY
87087: LIST
87088: LIST
87089: LIST
87090: PUSH
87091: EMPTY
87092: LIST
87093: LIST
87094: LIST
87095: LIST
87096: PPUSH
87097: CALL_OW 69
87101: PUSH
87102: LD_VAR 0 8
87106: PPUSH
87107: CALL_OW 313
87111: PPUSH
87112: LD_INT 3
87114: PUSH
87115: LD_INT 60
87117: PUSH
87118: EMPTY
87119: LIST
87120: PUSH
87121: EMPTY
87122: LIST
87123: LIST
87124: PUSH
87125: LD_INT 2
87127: PUSH
87128: LD_INT 25
87130: PUSH
87131: LD_INT 2
87133: PUSH
87134: EMPTY
87135: LIST
87136: LIST
87137: PUSH
87138: LD_INT 25
87140: PUSH
87141: LD_INT 16
87143: PUSH
87144: EMPTY
87145: LIST
87146: LIST
87147: PUSH
87148: EMPTY
87149: LIST
87150: LIST
87151: LIST
87152: PUSH
87153: EMPTY
87154: LIST
87155: LIST
87156: PPUSH
87157: CALL_OW 72
87161: UNION
87162: ST_TO_ADDR
// if tmp then
87163: LD_VAR 0 4
87167: IFFALSE 87247
// begin tmp := ShrinkArray ( tmp , 3 ) ;
87169: LD_ADDR_VAR 0 4
87173: PUSH
87174: LD_VAR 0 4
87178: PPUSH
87179: LD_INT 3
87181: PPUSH
87182: CALL 67460 0 2
87186: ST_TO_ADDR
// for j in tmp do
87187: LD_ADDR_VAR 0 2
87191: PUSH
87192: LD_VAR 0 4
87196: PUSH
87197: FOR_IN
87198: IFFALSE 87241
// begin if IsInUnit ( j ) then
87200: LD_VAR 0 2
87204: PPUSH
87205: CALL_OW 310
87209: IFFALSE 87220
// ComExit ( j ) ;
87211: LD_VAR 0 2
87215: PPUSH
87216: CALL 67543 0 1
// AddComCollect ( j , x , y ) ;
87220: LD_VAR 0 2
87224: PPUSH
87225: LD_VAR 0 6
87229: PPUSH
87230: LD_VAR 0 7
87234: PPUSH
87235: CALL_OW 177
// end ;
87239: GO 87197
87241: POP
87242: POP
// exit ;
87243: POP
87244: POP
87245: GO 87474
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
87247: LD_ADDR_VAR 0 4
87251: PUSH
87252: LD_INT 22
87254: PUSH
87255: LD_VAR 0 5
87259: PUSH
87260: EMPTY
87261: LIST
87262: LIST
87263: PUSH
87264: LD_INT 91
87266: PUSH
87267: LD_VAR 0 8
87271: PUSH
87272: LD_INT 8
87274: PUSH
87275: EMPTY
87276: LIST
87277: LIST
87278: LIST
87279: PUSH
87280: LD_INT 2
87282: PUSH
87283: LD_INT 34
87285: PUSH
87286: LD_INT 12
87288: PUSH
87289: EMPTY
87290: LIST
87291: LIST
87292: PUSH
87293: LD_INT 34
87295: PUSH
87296: LD_INT 51
87298: PUSH
87299: EMPTY
87300: LIST
87301: LIST
87302: PUSH
87303: LD_INT 34
87305: PUSH
87306: LD_INT 32
87308: PUSH
87309: EMPTY
87310: LIST
87311: LIST
87312: PUSH
87313: LD_INT 34
87315: PUSH
87316: LD_INT 89
87318: PUSH
87319: EMPTY
87320: LIST
87321: LIST
87322: PUSH
87323: EMPTY
87324: LIST
87325: LIST
87326: LIST
87327: LIST
87328: LIST
87329: PUSH
87330: EMPTY
87331: LIST
87332: LIST
87333: LIST
87334: PPUSH
87335: CALL_OW 69
87339: ST_TO_ADDR
// if tmp then
87340: LD_VAR 0 4
87344: IFFALSE 87470
// begin for j in tmp do
87346: LD_ADDR_VAR 0 2
87350: PUSH
87351: LD_VAR 0 4
87355: PUSH
87356: FOR_IN
87357: IFFALSE 87468
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
87359: LD_VAR 0 2
87363: PPUSH
87364: CALL_OW 262
87368: PUSH
87369: LD_INT 3
87371: EQUAL
87372: PUSH
87373: LD_VAR 0 2
87377: PPUSH
87378: CALL_OW 261
87382: PUSH
87383: LD_INT 20
87385: GREATER
87386: OR
87387: PUSH
87388: LD_VAR 0 2
87392: PPUSH
87393: CALL_OW 314
87397: NOT
87398: AND
87399: PUSH
87400: LD_VAR 0 2
87404: PPUSH
87405: CALL_OW 263
87409: PUSH
87410: LD_INT 1
87412: NONEQUAL
87413: PUSH
87414: LD_VAR 0 2
87418: PPUSH
87419: CALL_OW 311
87423: OR
87424: AND
87425: IFFALSE 87466
// begin ComCollect ( j , x , y ) ;
87427: LD_VAR 0 2
87431: PPUSH
87432: LD_VAR 0 6
87436: PPUSH
87437: LD_VAR 0 7
87441: PPUSH
87442: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
87446: LD_VAR 0 2
87450: PPUSH
87451: LD_VAR 0 8
87455: PPUSH
87456: CALL_OW 172
// exit ;
87460: POP
87461: POP
87462: POP
87463: POP
87464: GO 87474
// end ;
87466: GO 87356
87468: POP
87469: POP
// end ; end ;
87470: GO 86845
87472: POP
87473: POP
// end ; end_of_file
87474: PPOPN 9
87476: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
87477: LD_VAR 0 1
87481: PUSH
87482: LD_INT 200
87484: DOUBLE
87485: GREATEREQUAL
87486: IFFALSE 87494
87488: LD_INT 299
87490: DOUBLE
87491: LESSEQUAL
87492: IFTRUE 87496
87494: GO 87528
87496: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
87497: LD_VAR 0 1
87501: PPUSH
87502: LD_VAR 0 2
87506: PPUSH
87507: LD_VAR 0 3
87511: PPUSH
87512: LD_VAR 0 4
87516: PPUSH
87517: LD_VAR 0 5
87521: PPUSH
87522: CALL 88016 0 5
87526: GO 87605
87528: LD_INT 300
87530: DOUBLE
87531: GREATEREQUAL
87532: IFFALSE 87540
87534: LD_INT 399
87536: DOUBLE
87537: LESSEQUAL
87538: IFTRUE 87542
87540: GO 87604
87542: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
87543: LD_VAR 0 1
87547: PPUSH
87548: LD_VAR 0 2
87552: PPUSH
87553: LD_VAR 0 3
87557: PPUSH
87558: LD_VAR 0 4
87562: PPUSH
87563: LD_VAR 0 5
87567: PPUSH
87568: LD_VAR 0 6
87572: PPUSH
87573: LD_VAR 0 7
87577: PPUSH
87578: LD_VAR 0 8
87582: PPUSH
87583: LD_VAR 0 9
87587: PPUSH
87588: LD_VAR 0 10
87592: PPUSH
87593: LD_VAR 0 11
87597: PPUSH
87598: CALL 84178 0 11
87602: GO 87605
87604: POP
// end ;
87605: PPOPN 11
87607: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
87608: LD_VAR 0 1
87612: PPUSH
87613: LD_VAR 0 2
87617: PPUSH
87618: LD_VAR 0 3
87622: PPUSH
87623: LD_VAR 0 4
87627: PPUSH
87628: LD_VAR 0 5
87632: PPUSH
87633: CALL 87752 0 5
// end ; end_of_file
87637: PPOPN 5
87639: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
87640: LD_INT 0
87642: PPUSH
87643: PPUSH
87644: PPUSH
87645: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
87646: LD_VAR 0 1
87650: PPUSH
87651: CALL_OW 264
87655: PUSH
87656: LD_INT 91
87658: EQUAL
87659: IFFALSE 87731
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
87661: LD_INT 68
87663: PPUSH
87664: LD_VAR 0 1
87668: PPUSH
87669: CALL_OW 255
87673: PPUSH
87674: CALL_OW 321
87678: PUSH
87679: LD_INT 2
87681: EQUAL
87682: IFFALSE 87694
// eff := 70 else
87684: LD_ADDR_VAR 0 4
87688: PUSH
87689: LD_INT 70
87691: ST_TO_ADDR
87692: GO 87702
// eff := 30 ;
87694: LD_ADDR_VAR 0 4
87698: PUSH
87699: LD_INT 30
87701: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
87702: LD_VAR 0 1
87706: PPUSH
87707: CALL_OW 250
87711: PPUSH
87712: LD_VAR 0 1
87716: PPUSH
87717: CALL_OW 251
87721: PPUSH
87722: LD_VAR 0 4
87726: PPUSH
87727: CALL_OW 495
// end ; end ;
87731: LD_VAR 0 2
87735: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
87736: LD_INT 0
87738: PPUSH
// end ;
87739: LD_VAR 0 4
87743: RET
// export function SOS_Command ( cmd ) ; begin
87744: LD_INT 0
87746: PPUSH
// end ;
87747: LD_VAR 0 2
87751: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
87752: LD_INT 0
87754: PPUSH
// end ;
87755: LD_VAR 0 6
87759: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
87760: LD_INT 0
87762: PPUSH
87763: PPUSH
// if not vehicle or not factory then
87764: LD_VAR 0 1
87768: NOT
87769: PUSH
87770: LD_VAR 0 2
87774: NOT
87775: OR
87776: IFFALSE 87780
// exit ;
87778: GO 88011
// if factoryWaypoints >= factory then
87780: LD_EXP 122
87784: PUSH
87785: LD_VAR 0 2
87789: GREATEREQUAL
87790: IFFALSE 88011
// if factoryWaypoints [ factory ] then
87792: LD_EXP 122
87796: PUSH
87797: LD_VAR 0 2
87801: ARRAY
87802: IFFALSE 88011
// begin if GetControl ( vehicle ) = control_manual then
87804: LD_VAR 0 1
87808: PPUSH
87809: CALL_OW 263
87813: PUSH
87814: LD_INT 1
87816: EQUAL
87817: IFFALSE 87898
// begin driver := IsDrivenBy ( vehicle ) ;
87819: LD_ADDR_VAR 0 4
87823: PUSH
87824: LD_VAR 0 1
87828: PPUSH
87829: CALL_OW 311
87833: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87834: LD_VAR 0 4
87838: PPUSH
87839: LD_EXP 122
87843: PUSH
87844: LD_VAR 0 2
87848: ARRAY
87849: PUSH
87850: LD_INT 3
87852: ARRAY
87853: PPUSH
87854: LD_EXP 122
87858: PUSH
87859: LD_VAR 0 2
87863: ARRAY
87864: PUSH
87865: LD_INT 4
87867: ARRAY
87868: PPUSH
87869: CALL_OW 171
// AddComExitVehicle ( driver ) ;
87873: LD_VAR 0 4
87877: PPUSH
87878: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
87882: LD_VAR 0 4
87886: PPUSH
87887: LD_VAR 0 2
87891: PPUSH
87892: CALL_OW 180
// end else
87896: GO 88011
// if GetControl ( vehicle ) = control_remote then
87898: LD_VAR 0 1
87902: PPUSH
87903: CALL_OW 263
87907: PUSH
87908: LD_INT 2
87910: EQUAL
87911: IFFALSE 87972
// begin wait ( 0 0$2 ) ;
87913: LD_INT 70
87915: PPUSH
87916: CALL_OW 67
// if Connect ( vehicle ) then
87920: LD_VAR 0 1
87924: PPUSH
87925: CALL 37751 0 1
87929: IFFALSE 87970
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87931: LD_VAR 0 1
87935: PPUSH
87936: LD_EXP 122
87940: PUSH
87941: LD_VAR 0 2
87945: ARRAY
87946: PUSH
87947: LD_INT 3
87949: ARRAY
87950: PPUSH
87951: LD_EXP 122
87955: PUSH
87956: LD_VAR 0 2
87960: ARRAY
87961: PUSH
87962: LD_INT 4
87964: ARRAY
87965: PPUSH
87966: CALL_OW 171
// end else
87970: GO 88011
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87972: LD_VAR 0 1
87976: PPUSH
87977: LD_EXP 122
87981: PUSH
87982: LD_VAR 0 2
87986: ARRAY
87987: PUSH
87988: LD_INT 3
87990: ARRAY
87991: PPUSH
87992: LD_EXP 122
87996: PUSH
87997: LD_VAR 0 2
88001: ARRAY
88002: PUSH
88003: LD_INT 4
88005: ARRAY
88006: PPUSH
88007: CALL_OW 171
// end ; end ;
88011: LD_VAR 0 3
88015: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
88016: LD_INT 0
88018: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
88019: LD_VAR 0 1
88023: PUSH
88024: LD_INT 250
88026: EQUAL
88027: PUSH
88028: LD_VAR 0 2
88032: PPUSH
88033: CALL_OW 264
88037: PUSH
88038: LD_INT 81
88040: EQUAL
88041: AND
88042: IFFALSE 88063
// MinerPlaceMine ( unit , x , y ) ;
88044: LD_VAR 0 2
88048: PPUSH
88049: LD_VAR 0 4
88053: PPUSH
88054: LD_VAR 0 5
88058: PPUSH
88059: CALL 91053 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
88063: LD_VAR 0 1
88067: PUSH
88068: LD_INT 251
88070: EQUAL
88071: PUSH
88072: LD_VAR 0 2
88076: PPUSH
88077: CALL_OW 264
88081: PUSH
88082: LD_INT 81
88084: EQUAL
88085: AND
88086: IFFALSE 88107
// MinerDetonateMine ( unit , x , y ) ;
88088: LD_VAR 0 2
88092: PPUSH
88093: LD_VAR 0 4
88097: PPUSH
88098: LD_VAR 0 5
88102: PPUSH
88103: CALL 91328 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
88107: LD_VAR 0 1
88111: PUSH
88112: LD_INT 252
88114: EQUAL
88115: PUSH
88116: LD_VAR 0 2
88120: PPUSH
88121: CALL_OW 264
88125: PUSH
88126: LD_INT 81
88128: EQUAL
88129: AND
88130: IFFALSE 88151
// MinerCreateMinefield ( unit , x , y ) ;
88132: LD_VAR 0 2
88136: PPUSH
88137: LD_VAR 0 4
88141: PPUSH
88142: LD_VAR 0 5
88146: PPUSH
88147: CALL 91745 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
88151: LD_VAR 0 1
88155: PUSH
88156: LD_INT 253
88158: EQUAL
88159: PUSH
88160: LD_VAR 0 2
88164: PPUSH
88165: CALL_OW 257
88169: PUSH
88170: LD_INT 5
88172: EQUAL
88173: AND
88174: IFFALSE 88195
// ComBinocular ( unit , x , y ) ;
88176: LD_VAR 0 2
88180: PPUSH
88181: LD_VAR 0 4
88185: PPUSH
88186: LD_VAR 0 5
88190: PPUSH
88191: CALL 92114 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
88195: LD_VAR 0 1
88199: PUSH
88200: LD_INT 254
88202: EQUAL
88203: PUSH
88204: LD_VAR 0 2
88208: PPUSH
88209: CALL_OW 264
88213: PUSH
88214: LD_INT 99
88216: EQUAL
88217: AND
88218: PUSH
88219: LD_VAR 0 3
88223: PPUSH
88224: CALL_OW 263
88228: PUSH
88229: LD_INT 3
88231: EQUAL
88232: AND
88233: IFFALSE 88249
// HackDestroyVehicle ( unit , selectedUnit ) ;
88235: LD_VAR 0 2
88239: PPUSH
88240: LD_VAR 0 3
88244: PPUSH
88245: CALL 90417 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
88249: LD_VAR 0 1
88253: PUSH
88254: LD_INT 255
88256: EQUAL
88257: PUSH
88258: LD_VAR 0 2
88262: PPUSH
88263: CALL_OW 264
88267: PUSH
88268: LD_INT 14
88270: PUSH
88271: LD_INT 53
88273: PUSH
88274: EMPTY
88275: LIST
88276: LIST
88277: IN
88278: AND
88279: PUSH
88280: LD_VAR 0 4
88284: PPUSH
88285: LD_VAR 0 5
88289: PPUSH
88290: CALL_OW 488
88294: AND
88295: IFFALSE 88319
// CutTreeXYR ( unit , x , y , 12 ) ;
88297: LD_VAR 0 2
88301: PPUSH
88302: LD_VAR 0 4
88306: PPUSH
88307: LD_VAR 0 5
88311: PPUSH
88312: LD_INT 12
88314: PPUSH
88315: CALL 88414 0 4
// if cmd = 256 then
88319: LD_VAR 0 1
88323: PUSH
88324: LD_INT 256
88326: EQUAL
88327: IFFALSE 88348
// SetFactoryWaypoint ( unit , x , y ) ;
88329: LD_VAR 0 2
88333: PPUSH
88334: LD_VAR 0 4
88338: PPUSH
88339: LD_VAR 0 5
88343: PPUSH
88344: CALL 86166 0 3
// if cmd = 257 then
88348: LD_VAR 0 1
88352: PUSH
88353: LD_INT 257
88355: EQUAL
88356: IFFALSE 88377
// SetWarehouseGatheringPoint ( unit , x , y ) ;
88358: LD_VAR 0 2
88362: PPUSH
88363: LD_VAR 0 4
88367: PPUSH
88368: LD_VAR 0 5
88372: PPUSH
88373: CALL 86528 0 3
// if cmd = 258 then
88377: LD_VAR 0 1
88381: PUSH
88382: LD_INT 258
88384: EQUAL
88385: IFFALSE 88409
// BurnTreeXYR ( unit , x , y , 8 ) ;
88387: LD_VAR 0 2
88391: PPUSH
88392: LD_VAR 0 4
88396: PPUSH
88397: LD_VAR 0 5
88401: PPUSH
88402: LD_INT 8
88404: PPUSH
88405: CALL 88808 0 4
// end ;
88409: LD_VAR 0 6
88413: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
88414: LD_INT 0
88416: PPUSH
88417: PPUSH
88418: PPUSH
88419: PPUSH
88420: PPUSH
88421: PPUSH
88422: PPUSH
88423: PPUSH
88424: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
88425: LD_VAR 0 1
88429: PPUSH
88430: CALL_OW 302
88434: NOT
88435: PUSH
88436: LD_VAR 0 2
88440: PPUSH
88441: LD_VAR 0 3
88445: PPUSH
88446: CALL_OW 488
88450: NOT
88451: OR
88452: PUSH
88453: LD_VAR 0 4
88457: NOT
88458: OR
88459: IFFALSE 88463
// exit ;
88461: GO 88803
// list := [ ] ;
88463: LD_ADDR_VAR 0 13
88467: PUSH
88468: EMPTY
88469: ST_TO_ADDR
// if x - r < 0 then
88470: LD_VAR 0 2
88474: PUSH
88475: LD_VAR 0 4
88479: MINUS
88480: PUSH
88481: LD_INT 0
88483: LESS
88484: IFFALSE 88496
// min_x := 0 else
88486: LD_ADDR_VAR 0 7
88490: PUSH
88491: LD_INT 0
88493: ST_TO_ADDR
88494: GO 88512
// min_x := x - r ;
88496: LD_ADDR_VAR 0 7
88500: PUSH
88501: LD_VAR 0 2
88505: PUSH
88506: LD_VAR 0 4
88510: MINUS
88511: ST_TO_ADDR
// if y - r < 0 then
88512: LD_VAR 0 3
88516: PUSH
88517: LD_VAR 0 4
88521: MINUS
88522: PUSH
88523: LD_INT 0
88525: LESS
88526: IFFALSE 88538
// min_y := 0 else
88528: LD_ADDR_VAR 0 8
88532: PUSH
88533: LD_INT 0
88535: ST_TO_ADDR
88536: GO 88554
// min_y := y - r ;
88538: LD_ADDR_VAR 0 8
88542: PUSH
88543: LD_VAR 0 3
88547: PUSH
88548: LD_VAR 0 4
88552: MINUS
88553: ST_TO_ADDR
// max_x := x + r ;
88554: LD_ADDR_VAR 0 9
88558: PUSH
88559: LD_VAR 0 2
88563: PUSH
88564: LD_VAR 0 4
88568: PLUS
88569: ST_TO_ADDR
// max_y := y + r ;
88570: LD_ADDR_VAR 0 10
88574: PUSH
88575: LD_VAR 0 3
88579: PUSH
88580: LD_VAR 0 4
88584: PLUS
88585: ST_TO_ADDR
// for _x = min_x to max_x do
88586: LD_ADDR_VAR 0 11
88590: PUSH
88591: DOUBLE
88592: LD_VAR 0 7
88596: DEC
88597: ST_TO_ADDR
88598: LD_VAR 0 9
88602: PUSH
88603: FOR_TO
88604: IFFALSE 88721
// for _y = min_y to max_y do
88606: LD_ADDR_VAR 0 12
88610: PUSH
88611: DOUBLE
88612: LD_VAR 0 8
88616: DEC
88617: ST_TO_ADDR
88618: LD_VAR 0 10
88622: PUSH
88623: FOR_TO
88624: IFFALSE 88717
// begin if not ValidHex ( _x , _y ) then
88626: LD_VAR 0 11
88630: PPUSH
88631: LD_VAR 0 12
88635: PPUSH
88636: CALL_OW 488
88640: NOT
88641: IFFALSE 88645
// continue ;
88643: GO 88623
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
88645: LD_VAR 0 11
88649: PPUSH
88650: LD_VAR 0 12
88654: PPUSH
88655: CALL_OW 351
88659: PUSH
88660: LD_VAR 0 11
88664: PPUSH
88665: LD_VAR 0 12
88669: PPUSH
88670: CALL_OW 554
88674: AND
88675: IFFALSE 88715
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
88677: LD_ADDR_VAR 0 13
88681: PUSH
88682: LD_VAR 0 13
88686: PPUSH
88687: LD_VAR 0 13
88691: PUSH
88692: LD_INT 1
88694: PLUS
88695: PPUSH
88696: LD_VAR 0 11
88700: PUSH
88701: LD_VAR 0 12
88705: PUSH
88706: EMPTY
88707: LIST
88708: LIST
88709: PPUSH
88710: CALL_OW 2
88714: ST_TO_ADDR
// end ;
88715: GO 88623
88717: POP
88718: POP
88719: GO 88603
88721: POP
88722: POP
// if not list then
88723: LD_VAR 0 13
88727: NOT
88728: IFFALSE 88732
// exit ;
88730: GO 88803
// for i in list do
88732: LD_ADDR_VAR 0 6
88736: PUSH
88737: LD_VAR 0 13
88741: PUSH
88742: FOR_IN
88743: IFFALSE 88801
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
88745: LD_VAR 0 1
88749: PPUSH
88750: LD_STRING M
88752: PUSH
88753: LD_VAR 0 6
88757: PUSH
88758: LD_INT 1
88760: ARRAY
88761: PUSH
88762: LD_VAR 0 6
88766: PUSH
88767: LD_INT 2
88769: ARRAY
88770: PUSH
88771: LD_INT 0
88773: PUSH
88774: LD_INT 0
88776: PUSH
88777: LD_INT 0
88779: PUSH
88780: LD_INT 0
88782: PUSH
88783: EMPTY
88784: LIST
88785: LIST
88786: LIST
88787: LIST
88788: LIST
88789: LIST
88790: LIST
88791: PUSH
88792: EMPTY
88793: LIST
88794: PPUSH
88795: CALL_OW 447
88799: GO 88742
88801: POP
88802: POP
// end ;
88803: LD_VAR 0 5
88807: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
88808: LD_INT 0
88810: PPUSH
88811: PPUSH
88812: PPUSH
88813: PPUSH
88814: PPUSH
88815: PPUSH
88816: PPUSH
88817: PPUSH
88818: PPUSH
88819: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
88820: LD_VAR 0 1
88824: PPUSH
88825: CALL_OW 302
88829: NOT
88830: PUSH
88831: LD_VAR 0 2
88835: PPUSH
88836: LD_VAR 0 3
88840: PPUSH
88841: CALL_OW 488
88845: NOT
88846: OR
88847: PUSH
88848: LD_VAR 0 4
88852: NOT
88853: OR
88854: IFFALSE 88858
// exit ;
88856: GO 89371
// list := [ ] ;
88858: LD_ADDR_VAR 0 13
88862: PUSH
88863: EMPTY
88864: ST_TO_ADDR
// if x - r < 0 then
88865: LD_VAR 0 2
88869: PUSH
88870: LD_VAR 0 4
88874: MINUS
88875: PUSH
88876: LD_INT 0
88878: LESS
88879: IFFALSE 88891
// min_x := 0 else
88881: LD_ADDR_VAR 0 7
88885: PUSH
88886: LD_INT 0
88888: ST_TO_ADDR
88889: GO 88907
// min_x := x - r ;
88891: LD_ADDR_VAR 0 7
88895: PUSH
88896: LD_VAR 0 2
88900: PUSH
88901: LD_VAR 0 4
88905: MINUS
88906: ST_TO_ADDR
// if y - r < 0 then
88907: LD_VAR 0 3
88911: PUSH
88912: LD_VAR 0 4
88916: MINUS
88917: PUSH
88918: LD_INT 0
88920: LESS
88921: IFFALSE 88933
// min_y := 0 else
88923: LD_ADDR_VAR 0 8
88927: PUSH
88928: LD_INT 0
88930: ST_TO_ADDR
88931: GO 88949
// min_y := y - r ;
88933: LD_ADDR_VAR 0 8
88937: PUSH
88938: LD_VAR 0 3
88942: PUSH
88943: LD_VAR 0 4
88947: MINUS
88948: ST_TO_ADDR
// max_x := x + r ;
88949: LD_ADDR_VAR 0 9
88953: PUSH
88954: LD_VAR 0 2
88958: PUSH
88959: LD_VAR 0 4
88963: PLUS
88964: ST_TO_ADDR
// max_y := y + r ;
88965: LD_ADDR_VAR 0 10
88969: PUSH
88970: LD_VAR 0 3
88974: PUSH
88975: LD_VAR 0 4
88979: PLUS
88980: ST_TO_ADDR
// for _x = min_x to max_x do
88981: LD_ADDR_VAR 0 11
88985: PUSH
88986: DOUBLE
88987: LD_VAR 0 7
88991: DEC
88992: ST_TO_ADDR
88993: LD_VAR 0 9
88997: PUSH
88998: FOR_TO
88999: IFFALSE 89116
// for _y = min_y to max_y do
89001: LD_ADDR_VAR 0 12
89005: PUSH
89006: DOUBLE
89007: LD_VAR 0 8
89011: DEC
89012: ST_TO_ADDR
89013: LD_VAR 0 10
89017: PUSH
89018: FOR_TO
89019: IFFALSE 89112
// begin if not ValidHex ( _x , _y ) then
89021: LD_VAR 0 11
89025: PPUSH
89026: LD_VAR 0 12
89030: PPUSH
89031: CALL_OW 488
89035: NOT
89036: IFFALSE 89040
// continue ;
89038: GO 89018
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
89040: LD_VAR 0 11
89044: PPUSH
89045: LD_VAR 0 12
89049: PPUSH
89050: CALL_OW 351
89054: PUSH
89055: LD_VAR 0 11
89059: PPUSH
89060: LD_VAR 0 12
89064: PPUSH
89065: CALL_OW 554
89069: AND
89070: IFFALSE 89110
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
89072: LD_ADDR_VAR 0 13
89076: PUSH
89077: LD_VAR 0 13
89081: PPUSH
89082: LD_VAR 0 13
89086: PUSH
89087: LD_INT 1
89089: PLUS
89090: PPUSH
89091: LD_VAR 0 11
89095: PUSH
89096: LD_VAR 0 12
89100: PUSH
89101: EMPTY
89102: LIST
89103: LIST
89104: PPUSH
89105: CALL_OW 2
89109: ST_TO_ADDR
// end ;
89110: GO 89018
89112: POP
89113: POP
89114: GO 88998
89116: POP
89117: POP
// if not list then
89118: LD_VAR 0 13
89122: NOT
89123: IFFALSE 89127
// exit ;
89125: GO 89371
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
89127: LD_ADDR_VAR 0 13
89131: PUSH
89132: LD_VAR 0 1
89136: PPUSH
89137: LD_VAR 0 13
89141: PPUSH
89142: LD_INT 1
89144: PPUSH
89145: LD_INT 1
89147: PPUSH
89148: CALL 34893 0 4
89152: ST_TO_ADDR
// ComStop ( flame ) ;
89153: LD_VAR 0 1
89157: PPUSH
89158: CALL_OW 141
// for i in list do
89162: LD_ADDR_VAR 0 6
89166: PUSH
89167: LD_VAR 0 13
89171: PUSH
89172: FOR_IN
89173: IFFALSE 89204
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
89175: LD_VAR 0 1
89179: PPUSH
89180: LD_VAR 0 6
89184: PUSH
89185: LD_INT 1
89187: ARRAY
89188: PPUSH
89189: LD_VAR 0 6
89193: PUSH
89194: LD_INT 2
89196: ARRAY
89197: PPUSH
89198: CALL_OW 176
89202: GO 89172
89204: POP
89205: POP
// repeat wait ( 0 0$1 ) ;
89206: LD_INT 35
89208: PPUSH
89209: CALL_OW 67
// task := GetTaskList ( flame ) ;
89213: LD_ADDR_VAR 0 14
89217: PUSH
89218: LD_VAR 0 1
89222: PPUSH
89223: CALL_OW 437
89227: ST_TO_ADDR
// if not task then
89228: LD_VAR 0 14
89232: NOT
89233: IFFALSE 89237
// exit ;
89235: GO 89371
// if task [ 1 ] [ 1 ] <> | then
89237: LD_VAR 0 14
89241: PUSH
89242: LD_INT 1
89244: ARRAY
89245: PUSH
89246: LD_INT 1
89248: ARRAY
89249: PUSH
89250: LD_STRING |
89252: NONEQUAL
89253: IFFALSE 89257
// exit ;
89255: GO 89371
// _x := task [ 1 ] [ 2 ] ;
89257: LD_ADDR_VAR 0 11
89261: PUSH
89262: LD_VAR 0 14
89266: PUSH
89267: LD_INT 1
89269: ARRAY
89270: PUSH
89271: LD_INT 2
89273: ARRAY
89274: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
89275: LD_ADDR_VAR 0 12
89279: PUSH
89280: LD_VAR 0 14
89284: PUSH
89285: LD_INT 1
89287: ARRAY
89288: PUSH
89289: LD_INT 3
89291: ARRAY
89292: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
89293: LD_VAR 0 11
89297: PPUSH
89298: LD_VAR 0 12
89302: PPUSH
89303: CALL_OW 351
89307: NOT
89308: PUSH
89309: LD_VAR 0 11
89313: PPUSH
89314: LD_VAR 0 12
89318: PPUSH
89319: CALL_OW 554
89323: NOT
89324: OR
89325: IFFALSE 89359
// begin task := Delete ( task , 1 ) ;
89327: LD_ADDR_VAR 0 14
89331: PUSH
89332: LD_VAR 0 14
89336: PPUSH
89337: LD_INT 1
89339: PPUSH
89340: CALL_OW 3
89344: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
89345: LD_VAR 0 1
89349: PPUSH
89350: LD_VAR 0 14
89354: PPUSH
89355: CALL_OW 446
// end ; until not HasTask ( flame ) ;
89359: LD_VAR 0 1
89363: PPUSH
89364: CALL_OW 314
89368: NOT
89369: IFFALSE 89206
// end ;
89371: LD_VAR 0 5
89375: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
89376: LD_EXP 125
89380: NOT
89381: IFFALSE 89431
89383: GO 89385
89385: DISABLE
// begin initHack := true ;
89386: LD_ADDR_EXP 125
89390: PUSH
89391: LD_INT 1
89393: ST_TO_ADDR
// hackTanks := [ ] ;
89394: LD_ADDR_EXP 126
89398: PUSH
89399: EMPTY
89400: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
89401: LD_ADDR_EXP 127
89405: PUSH
89406: EMPTY
89407: ST_TO_ADDR
// hackLimit := 3 ;
89408: LD_ADDR_EXP 128
89412: PUSH
89413: LD_INT 3
89415: ST_TO_ADDR
// hackDist := 12 ;
89416: LD_ADDR_EXP 129
89420: PUSH
89421: LD_INT 12
89423: ST_TO_ADDR
// hackCounter := [ ] ;
89424: LD_ADDR_EXP 130
89428: PUSH
89429: EMPTY
89430: ST_TO_ADDR
// end ;
89431: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
89432: LD_EXP 125
89436: PUSH
89437: LD_INT 34
89439: PUSH
89440: LD_INT 99
89442: PUSH
89443: EMPTY
89444: LIST
89445: LIST
89446: PPUSH
89447: CALL_OW 69
89451: AND
89452: IFFALSE 89705
89454: GO 89456
89456: DISABLE
89457: LD_INT 0
89459: PPUSH
89460: PPUSH
// begin enable ;
89461: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
89462: LD_ADDR_VAR 0 1
89466: PUSH
89467: LD_INT 34
89469: PUSH
89470: LD_INT 99
89472: PUSH
89473: EMPTY
89474: LIST
89475: LIST
89476: PPUSH
89477: CALL_OW 69
89481: PUSH
89482: FOR_IN
89483: IFFALSE 89703
// begin if not i in hackTanks then
89485: LD_VAR 0 1
89489: PUSH
89490: LD_EXP 126
89494: IN
89495: NOT
89496: IFFALSE 89579
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
89498: LD_ADDR_EXP 126
89502: PUSH
89503: LD_EXP 126
89507: PPUSH
89508: LD_EXP 126
89512: PUSH
89513: LD_INT 1
89515: PLUS
89516: PPUSH
89517: LD_VAR 0 1
89521: PPUSH
89522: CALL_OW 1
89526: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
89527: LD_ADDR_EXP 127
89531: PUSH
89532: LD_EXP 127
89536: PPUSH
89537: LD_EXP 127
89541: PUSH
89542: LD_INT 1
89544: PLUS
89545: PPUSH
89546: EMPTY
89547: PPUSH
89548: CALL_OW 1
89552: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
89553: LD_ADDR_EXP 130
89557: PUSH
89558: LD_EXP 130
89562: PPUSH
89563: LD_EXP 130
89567: PUSH
89568: LD_INT 1
89570: PLUS
89571: PPUSH
89572: EMPTY
89573: PPUSH
89574: CALL_OW 1
89578: ST_TO_ADDR
// end ; if not IsOk ( i ) then
89579: LD_VAR 0 1
89583: PPUSH
89584: CALL_OW 302
89588: NOT
89589: IFFALSE 89602
// begin HackUnlinkAll ( i ) ;
89591: LD_VAR 0 1
89595: PPUSH
89596: CALL 89708 0 1
// continue ;
89600: GO 89482
// end ; HackCheckCapturedStatus ( i ) ;
89602: LD_VAR 0 1
89606: PPUSH
89607: CALL 90151 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
89611: LD_ADDR_VAR 0 2
89615: PUSH
89616: LD_INT 81
89618: PUSH
89619: LD_VAR 0 1
89623: PPUSH
89624: CALL_OW 255
89628: PUSH
89629: EMPTY
89630: LIST
89631: LIST
89632: PUSH
89633: LD_INT 33
89635: PUSH
89636: LD_INT 3
89638: PUSH
89639: EMPTY
89640: LIST
89641: LIST
89642: PUSH
89643: LD_INT 91
89645: PUSH
89646: LD_VAR 0 1
89650: PUSH
89651: LD_EXP 129
89655: PUSH
89656: EMPTY
89657: LIST
89658: LIST
89659: LIST
89660: PUSH
89661: LD_INT 50
89663: PUSH
89664: EMPTY
89665: LIST
89666: PUSH
89667: EMPTY
89668: LIST
89669: LIST
89670: LIST
89671: LIST
89672: PPUSH
89673: CALL_OW 69
89677: ST_TO_ADDR
// if not tmp then
89678: LD_VAR 0 2
89682: NOT
89683: IFFALSE 89687
// continue ;
89685: GO 89482
// HackLink ( i , tmp ) ;
89687: LD_VAR 0 1
89691: PPUSH
89692: LD_VAR 0 2
89696: PPUSH
89697: CALL 89844 0 2
// end ;
89701: GO 89482
89703: POP
89704: POP
// end ;
89705: PPOPN 2
89707: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
89708: LD_INT 0
89710: PPUSH
89711: PPUSH
89712: PPUSH
// if not hack in hackTanks then
89713: LD_VAR 0 1
89717: PUSH
89718: LD_EXP 126
89722: IN
89723: NOT
89724: IFFALSE 89728
// exit ;
89726: GO 89839
// index := GetElementIndex ( hackTanks , hack ) ;
89728: LD_ADDR_VAR 0 4
89732: PUSH
89733: LD_EXP 126
89737: PPUSH
89738: LD_VAR 0 1
89742: PPUSH
89743: CALL 34190 0 2
89747: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
89748: LD_EXP 127
89752: PUSH
89753: LD_VAR 0 4
89757: ARRAY
89758: IFFALSE 89839
// begin for i in hackTanksCaptured [ index ] do
89760: LD_ADDR_VAR 0 3
89764: PUSH
89765: LD_EXP 127
89769: PUSH
89770: LD_VAR 0 4
89774: ARRAY
89775: PUSH
89776: FOR_IN
89777: IFFALSE 89803
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
89779: LD_VAR 0 3
89783: PUSH
89784: LD_INT 1
89786: ARRAY
89787: PPUSH
89788: LD_VAR 0 3
89792: PUSH
89793: LD_INT 2
89795: ARRAY
89796: PPUSH
89797: CALL_OW 235
89801: GO 89776
89803: POP
89804: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
89805: LD_ADDR_EXP 127
89809: PUSH
89810: LD_EXP 127
89814: PPUSH
89815: LD_VAR 0 4
89819: PPUSH
89820: EMPTY
89821: PPUSH
89822: CALL_OW 1
89826: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
89827: LD_VAR 0 1
89831: PPUSH
89832: LD_INT 0
89834: PPUSH
89835: CALL_OW 505
// end ; end ;
89839: LD_VAR 0 2
89843: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
89844: LD_INT 0
89846: PPUSH
89847: PPUSH
89848: PPUSH
// if not hack in hackTanks or not vehicles then
89849: LD_VAR 0 1
89853: PUSH
89854: LD_EXP 126
89858: IN
89859: NOT
89860: PUSH
89861: LD_VAR 0 2
89865: NOT
89866: OR
89867: IFFALSE 89871
// exit ;
89869: GO 90146
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
89871: LD_ADDR_VAR 0 2
89875: PUSH
89876: LD_VAR 0 1
89880: PPUSH
89881: LD_VAR 0 2
89885: PPUSH
89886: LD_INT 1
89888: PPUSH
89889: LD_INT 1
89891: PPUSH
89892: CALL 34840 0 4
89896: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
89897: LD_ADDR_VAR 0 5
89901: PUSH
89902: LD_EXP 126
89906: PPUSH
89907: LD_VAR 0 1
89911: PPUSH
89912: CALL 34190 0 2
89916: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
89917: LD_EXP 127
89921: PUSH
89922: LD_VAR 0 5
89926: ARRAY
89927: PUSH
89928: LD_EXP 128
89932: LESS
89933: IFFALSE 90122
// begin for i := 1 to vehicles do
89935: LD_ADDR_VAR 0 4
89939: PUSH
89940: DOUBLE
89941: LD_INT 1
89943: DEC
89944: ST_TO_ADDR
89945: LD_VAR 0 2
89949: PUSH
89950: FOR_TO
89951: IFFALSE 90120
// begin if hackTanksCaptured [ index ] = hackLimit then
89953: LD_EXP 127
89957: PUSH
89958: LD_VAR 0 5
89962: ARRAY
89963: PUSH
89964: LD_EXP 128
89968: EQUAL
89969: IFFALSE 89973
// break ;
89971: GO 90120
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
89973: LD_ADDR_EXP 130
89977: PUSH
89978: LD_EXP 130
89982: PPUSH
89983: LD_VAR 0 5
89987: PPUSH
89988: LD_EXP 130
89992: PUSH
89993: LD_VAR 0 5
89997: ARRAY
89998: PUSH
89999: LD_INT 1
90001: PLUS
90002: PPUSH
90003: CALL_OW 1
90007: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
90008: LD_ADDR_EXP 127
90012: PUSH
90013: LD_EXP 127
90017: PPUSH
90018: LD_VAR 0 5
90022: PUSH
90023: LD_EXP 127
90027: PUSH
90028: LD_VAR 0 5
90032: ARRAY
90033: PUSH
90034: LD_INT 1
90036: PLUS
90037: PUSH
90038: EMPTY
90039: LIST
90040: LIST
90041: PPUSH
90042: LD_VAR 0 2
90046: PUSH
90047: LD_VAR 0 4
90051: ARRAY
90052: PUSH
90053: LD_VAR 0 2
90057: PUSH
90058: LD_VAR 0 4
90062: ARRAY
90063: PPUSH
90064: CALL_OW 255
90068: PUSH
90069: EMPTY
90070: LIST
90071: LIST
90072: PPUSH
90073: CALL 34405 0 3
90077: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
90078: LD_VAR 0 2
90082: PUSH
90083: LD_VAR 0 4
90087: ARRAY
90088: PPUSH
90089: LD_VAR 0 1
90093: PPUSH
90094: CALL_OW 255
90098: PPUSH
90099: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
90103: LD_VAR 0 2
90107: PUSH
90108: LD_VAR 0 4
90112: ARRAY
90113: PPUSH
90114: CALL_OW 141
// end ;
90118: GO 89950
90120: POP
90121: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
90122: LD_VAR 0 1
90126: PPUSH
90127: LD_EXP 127
90131: PUSH
90132: LD_VAR 0 5
90136: ARRAY
90137: PUSH
90138: LD_INT 0
90140: PLUS
90141: PPUSH
90142: CALL_OW 505
// end ;
90146: LD_VAR 0 3
90150: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
90151: LD_INT 0
90153: PPUSH
90154: PPUSH
90155: PPUSH
90156: PPUSH
// if not hack in hackTanks then
90157: LD_VAR 0 1
90161: PUSH
90162: LD_EXP 126
90166: IN
90167: NOT
90168: IFFALSE 90172
// exit ;
90170: GO 90412
// index := GetElementIndex ( hackTanks , hack ) ;
90172: LD_ADDR_VAR 0 4
90176: PUSH
90177: LD_EXP 126
90181: PPUSH
90182: LD_VAR 0 1
90186: PPUSH
90187: CALL 34190 0 2
90191: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
90192: LD_ADDR_VAR 0 3
90196: PUSH
90197: DOUBLE
90198: LD_EXP 127
90202: PUSH
90203: LD_VAR 0 4
90207: ARRAY
90208: INC
90209: ST_TO_ADDR
90210: LD_INT 1
90212: PUSH
90213: FOR_DOWNTO
90214: IFFALSE 90386
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
90216: LD_ADDR_VAR 0 5
90220: PUSH
90221: LD_EXP 127
90225: PUSH
90226: LD_VAR 0 4
90230: ARRAY
90231: PUSH
90232: LD_VAR 0 3
90236: ARRAY
90237: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
90238: LD_VAR 0 5
90242: PUSH
90243: LD_INT 1
90245: ARRAY
90246: PPUSH
90247: CALL_OW 302
90251: NOT
90252: PUSH
90253: LD_VAR 0 5
90257: PUSH
90258: LD_INT 1
90260: ARRAY
90261: PPUSH
90262: CALL_OW 255
90266: PUSH
90267: LD_VAR 0 1
90271: PPUSH
90272: CALL_OW 255
90276: NONEQUAL
90277: OR
90278: IFFALSE 90384
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
90280: LD_VAR 0 5
90284: PUSH
90285: LD_INT 1
90287: ARRAY
90288: PPUSH
90289: CALL_OW 305
90293: PUSH
90294: LD_VAR 0 5
90298: PUSH
90299: LD_INT 1
90301: ARRAY
90302: PPUSH
90303: CALL_OW 255
90307: PUSH
90308: LD_VAR 0 1
90312: PPUSH
90313: CALL_OW 255
90317: EQUAL
90318: AND
90319: IFFALSE 90343
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
90321: LD_VAR 0 5
90325: PUSH
90326: LD_INT 1
90328: ARRAY
90329: PPUSH
90330: LD_VAR 0 5
90334: PUSH
90335: LD_INT 2
90337: ARRAY
90338: PPUSH
90339: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
90343: LD_ADDR_EXP 127
90347: PUSH
90348: LD_EXP 127
90352: PPUSH
90353: LD_VAR 0 4
90357: PPUSH
90358: LD_EXP 127
90362: PUSH
90363: LD_VAR 0 4
90367: ARRAY
90368: PPUSH
90369: LD_VAR 0 3
90373: PPUSH
90374: CALL_OW 3
90378: PPUSH
90379: CALL_OW 1
90383: ST_TO_ADDR
// end ; end ;
90384: GO 90213
90386: POP
90387: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
90388: LD_VAR 0 1
90392: PPUSH
90393: LD_EXP 127
90397: PUSH
90398: LD_VAR 0 4
90402: ARRAY
90403: PUSH
90404: LD_INT 0
90406: PLUS
90407: PPUSH
90408: CALL_OW 505
// end ;
90412: LD_VAR 0 2
90416: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
90417: LD_INT 0
90419: PPUSH
90420: PPUSH
90421: PPUSH
90422: PPUSH
// if not hack in hackTanks then
90423: LD_VAR 0 1
90427: PUSH
90428: LD_EXP 126
90432: IN
90433: NOT
90434: IFFALSE 90438
// exit ;
90436: GO 90523
// index := GetElementIndex ( hackTanks , hack ) ;
90438: LD_ADDR_VAR 0 5
90442: PUSH
90443: LD_EXP 126
90447: PPUSH
90448: LD_VAR 0 1
90452: PPUSH
90453: CALL 34190 0 2
90457: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
90458: LD_ADDR_VAR 0 4
90462: PUSH
90463: DOUBLE
90464: LD_INT 1
90466: DEC
90467: ST_TO_ADDR
90468: LD_EXP 127
90472: PUSH
90473: LD_VAR 0 5
90477: ARRAY
90478: PUSH
90479: FOR_TO
90480: IFFALSE 90521
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
90482: LD_EXP 127
90486: PUSH
90487: LD_VAR 0 5
90491: ARRAY
90492: PUSH
90493: LD_VAR 0 4
90497: ARRAY
90498: PUSH
90499: LD_INT 1
90501: ARRAY
90502: PUSH
90503: LD_VAR 0 2
90507: EQUAL
90508: IFFALSE 90519
// KillUnit ( vehicle ) ;
90510: LD_VAR 0 2
90514: PPUSH
90515: CALL_OW 66
90519: GO 90479
90521: POP
90522: POP
// end ;
90523: LD_VAR 0 3
90527: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
90528: LD_EXP 131
90532: NOT
90533: IFFALSE 90568
90535: GO 90537
90537: DISABLE
// begin initMiner := true ;
90538: LD_ADDR_EXP 131
90542: PUSH
90543: LD_INT 1
90545: ST_TO_ADDR
// minersList := [ ] ;
90546: LD_ADDR_EXP 132
90550: PUSH
90551: EMPTY
90552: ST_TO_ADDR
// minerMinesList := [ ] ;
90553: LD_ADDR_EXP 133
90557: PUSH
90558: EMPTY
90559: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
90560: LD_ADDR_EXP 134
90564: PUSH
90565: LD_INT 5
90567: ST_TO_ADDR
// end ;
90568: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
90569: LD_EXP 131
90573: PUSH
90574: LD_INT 34
90576: PUSH
90577: LD_INT 81
90579: PUSH
90580: EMPTY
90581: LIST
90582: LIST
90583: PPUSH
90584: CALL_OW 69
90588: AND
90589: IFFALSE 91050
90591: GO 90593
90593: DISABLE
90594: LD_INT 0
90596: PPUSH
90597: PPUSH
90598: PPUSH
90599: PPUSH
// begin enable ;
90600: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
90601: LD_ADDR_VAR 0 1
90605: PUSH
90606: LD_INT 34
90608: PUSH
90609: LD_INT 81
90611: PUSH
90612: EMPTY
90613: LIST
90614: LIST
90615: PPUSH
90616: CALL_OW 69
90620: PUSH
90621: FOR_IN
90622: IFFALSE 90694
// begin if not i in minersList then
90624: LD_VAR 0 1
90628: PUSH
90629: LD_EXP 132
90633: IN
90634: NOT
90635: IFFALSE 90692
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
90637: LD_ADDR_EXP 132
90641: PUSH
90642: LD_EXP 132
90646: PPUSH
90647: LD_EXP 132
90651: PUSH
90652: LD_INT 1
90654: PLUS
90655: PPUSH
90656: LD_VAR 0 1
90660: PPUSH
90661: CALL_OW 1
90665: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
90666: LD_ADDR_EXP 133
90670: PUSH
90671: LD_EXP 133
90675: PPUSH
90676: LD_EXP 133
90680: PUSH
90681: LD_INT 1
90683: PLUS
90684: PPUSH
90685: EMPTY
90686: PPUSH
90687: CALL_OW 1
90691: ST_TO_ADDR
// end end ;
90692: GO 90621
90694: POP
90695: POP
// for i := minerMinesList downto 1 do
90696: LD_ADDR_VAR 0 1
90700: PUSH
90701: DOUBLE
90702: LD_EXP 133
90706: INC
90707: ST_TO_ADDR
90708: LD_INT 1
90710: PUSH
90711: FOR_DOWNTO
90712: IFFALSE 91048
// begin if IsLive ( minersList [ i ] ) then
90714: LD_EXP 132
90718: PUSH
90719: LD_VAR 0 1
90723: ARRAY
90724: PPUSH
90725: CALL_OW 300
90729: IFFALSE 90757
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
90731: LD_EXP 132
90735: PUSH
90736: LD_VAR 0 1
90740: ARRAY
90741: PPUSH
90742: LD_EXP 133
90746: PUSH
90747: LD_VAR 0 1
90751: ARRAY
90752: PPUSH
90753: CALL_OW 505
// if not minerMinesList [ i ] then
90757: LD_EXP 133
90761: PUSH
90762: LD_VAR 0 1
90766: ARRAY
90767: NOT
90768: IFFALSE 90772
// continue ;
90770: GO 90711
// for j := minerMinesList [ i ] downto 1 do
90772: LD_ADDR_VAR 0 2
90776: PUSH
90777: DOUBLE
90778: LD_EXP 133
90782: PUSH
90783: LD_VAR 0 1
90787: ARRAY
90788: INC
90789: ST_TO_ADDR
90790: LD_INT 1
90792: PUSH
90793: FOR_DOWNTO
90794: IFFALSE 91044
// begin side := GetSide ( minersList [ i ] ) ;
90796: LD_ADDR_VAR 0 3
90800: PUSH
90801: LD_EXP 132
90805: PUSH
90806: LD_VAR 0 1
90810: ARRAY
90811: PPUSH
90812: CALL_OW 255
90816: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
90817: LD_ADDR_VAR 0 4
90821: PUSH
90822: LD_EXP 133
90826: PUSH
90827: LD_VAR 0 1
90831: ARRAY
90832: PUSH
90833: LD_VAR 0 2
90837: ARRAY
90838: PUSH
90839: LD_INT 1
90841: ARRAY
90842: PPUSH
90843: LD_EXP 133
90847: PUSH
90848: LD_VAR 0 1
90852: ARRAY
90853: PUSH
90854: LD_VAR 0 2
90858: ARRAY
90859: PUSH
90860: LD_INT 2
90862: ARRAY
90863: PPUSH
90864: CALL_OW 428
90868: ST_TO_ADDR
// if not tmp then
90869: LD_VAR 0 4
90873: NOT
90874: IFFALSE 90878
// continue ;
90876: GO 90793
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
90878: LD_VAR 0 4
90882: PUSH
90883: LD_INT 81
90885: PUSH
90886: LD_VAR 0 3
90890: PUSH
90891: EMPTY
90892: LIST
90893: LIST
90894: PPUSH
90895: CALL_OW 69
90899: IN
90900: PUSH
90901: LD_EXP 133
90905: PUSH
90906: LD_VAR 0 1
90910: ARRAY
90911: PUSH
90912: LD_VAR 0 2
90916: ARRAY
90917: PUSH
90918: LD_INT 1
90920: ARRAY
90921: PPUSH
90922: LD_EXP 133
90926: PUSH
90927: LD_VAR 0 1
90931: ARRAY
90932: PUSH
90933: LD_VAR 0 2
90937: ARRAY
90938: PUSH
90939: LD_INT 2
90941: ARRAY
90942: PPUSH
90943: CALL_OW 458
90947: AND
90948: IFFALSE 91042
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
90950: LD_EXP 133
90954: PUSH
90955: LD_VAR 0 1
90959: ARRAY
90960: PUSH
90961: LD_VAR 0 2
90965: ARRAY
90966: PUSH
90967: LD_INT 1
90969: ARRAY
90970: PPUSH
90971: LD_EXP 133
90975: PUSH
90976: LD_VAR 0 1
90980: ARRAY
90981: PUSH
90982: LD_VAR 0 2
90986: ARRAY
90987: PUSH
90988: LD_INT 2
90990: ARRAY
90991: PPUSH
90992: LD_VAR 0 3
90996: PPUSH
90997: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
91001: LD_ADDR_EXP 133
91005: PUSH
91006: LD_EXP 133
91010: PPUSH
91011: LD_VAR 0 1
91015: PPUSH
91016: LD_EXP 133
91020: PUSH
91021: LD_VAR 0 1
91025: ARRAY
91026: PPUSH
91027: LD_VAR 0 2
91031: PPUSH
91032: CALL_OW 3
91036: PPUSH
91037: CALL_OW 1
91041: ST_TO_ADDR
// end ; end ;
91042: GO 90793
91044: POP
91045: POP
// end ;
91046: GO 90711
91048: POP
91049: POP
// end ;
91050: PPOPN 4
91052: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
91053: LD_INT 0
91055: PPUSH
91056: PPUSH
// result := false ;
91057: LD_ADDR_VAR 0 4
91061: PUSH
91062: LD_INT 0
91064: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
91065: LD_VAR 0 1
91069: PPUSH
91070: CALL_OW 264
91074: PUSH
91075: LD_INT 81
91077: EQUAL
91078: NOT
91079: IFFALSE 91083
// exit ;
91081: GO 91323
// index := GetElementIndex ( minersList , unit ) ;
91083: LD_ADDR_VAR 0 5
91087: PUSH
91088: LD_EXP 132
91092: PPUSH
91093: LD_VAR 0 1
91097: PPUSH
91098: CALL 34190 0 2
91102: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
91103: LD_EXP 133
91107: PUSH
91108: LD_VAR 0 5
91112: ARRAY
91113: PUSH
91114: LD_EXP 134
91118: GREATEREQUAL
91119: IFFALSE 91123
// exit ;
91121: GO 91323
// ComMoveXY ( unit , x , y ) ;
91123: LD_VAR 0 1
91127: PPUSH
91128: LD_VAR 0 2
91132: PPUSH
91133: LD_VAR 0 3
91137: PPUSH
91138: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
91142: LD_INT 35
91144: PPUSH
91145: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
91149: LD_VAR 0 1
91153: PPUSH
91154: LD_VAR 0 2
91158: PPUSH
91159: LD_VAR 0 3
91163: PPUSH
91164: CALL 65942 0 3
91168: NOT
91169: PUSH
91170: LD_VAR 0 1
91174: PPUSH
91175: CALL_OW 314
91179: AND
91180: IFFALSE 91184
// exit ;
91182: GO 91323
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
91184: LD_VAR 0 2
91188: PPUSH
91189: LD_VAR 0 3
91193: PPUSH
91194: CALL_OW 428
91198: PUSH
91199: LD_VAR 0 1
91203: EQUAL
91204: PUSH
91205: LD_VAR 0 1
91209: PPUSH
91210: CALL_OW 314
91214: NOT
91215: AND
91216: IFFALSE 91142
// PlaySoundXY ( x , y , PlantMine ) ;
91218: LD_VAR 0 2
91222: PPUSH
91223: LD_VAR 0 3
91227: PPUSH
91228: LD_STRING PlantMine
91230: PPUSH
91231: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
91235: LD_VAR 0 2
91239: PPUSH
91240: LD_VAR 0 3
91244: PPUSH
91245: LD_VAR 0 1
91249: PPUSH
91250: CALL_OW 255
91254: PPUSH
91255: LD_INT 0
91257: PPUSH
91258: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
91262: LD_ADDR_EXP 133
91266: PUSH
91267: LD_EXP 133
91271: PPUSH
91272: LD_VAR 0 5
91276: PUSH
91277: LD_EXP 133
91281: PUSH
91282: LD_VAR 0 5
91286: ARRAY
91287: PUSH
91288: LD_INT 1
91290: PLUS
91291: PUSH
91292: EMPTY
91293: LIST
91294: LIST
91295: PPUSH
91296: LD_VAR 0 2
91300: PUSH
91301: LD_VAR 0 3
91305: PUSH
91306: EMPTY
91307: LIST
91308: LIST
91309: PPUSH
91310: CALL 34405 0 3
91314: ST_TO_ADDR
// result := true ;
91315: LD_ADDR_VAR 0 4
91319: PUSH
91320: LD_INT 1
91322: ST_TO_ADDR
// end ;
91323: LD_VAR 0 4
91327: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
91328: LD_INT 0
91330: PPUSH
91331: PPUSH
91332: PPUSH
// if not unit in minersList then
91333: LD_VAR 0 1
91337: PUSH
91338: LD_EXP 132
91342: IN
91343: NOT
91344: IFFALSE 91348
// exit ;
91346: GO 91740
// index := GetElementIndex ( minersList , unit ) ;
91348: LD_ADDR_VAR 0 6
91352: PUSH
91353: LD_EXP 132
91357: PPUSH
91358: LD_VAR 0 1
91362: PPUSH
91363: CALL 34190 0 2
91367: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
91368: LD_ADDR_VAR 0 5
91372: PUSH
91373: DOUBLE
91374: LD_EXP 133
91378: PUSH
91379: LD_VAR 0 6
91383: ARRAY
91384: INC
91385: ST_TO_ADDR
91386: LD_INT 1
91388: PUSH
91389: FOR_DOWNTO
91390: IFFALSE 91551
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
91392: LD_EXP 133
91396: PUSH
91397: LD_VAR 0 6
91401: ARRAY
91402: PUSH
91403: LD_VAR 0 5
91407: ARRAY
91408: PUSH
91409: LD_INT 1
91411: ARRAY
91412: PUSH
91413: LD_VAR 0 2
91417: EQUAL
91418: PUSH
91419: LD_EXP 133
91423: PUSH
91424: LD_VAR 0 6
91428: ARRAY
91429: PUSH
91430: LD_VAR 0 5
91434: ARRAY
91435: PUSH
91436: LD_INT 2
91438: ARRAY
91439: PUSH
91440: LD_VAR 0 3
91444: EQUAL
91445: AND
91446: IFFALSE 91549
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
91448: LD_EXP 133
91452: PUSH
91453: LD_VAR 0 6
91457: ARRAY
91458: PUSH
91459: LD_VAR 0 5
91463: ARRAY
91464: PUSH
91465: LD_INT 1
91467: ARRAY
91468: PPUSH
91469: LD_EXP 133
91473: PUSH
91474: LD_VAR 0 6
91478: ARRAY
91479: PUSH
91480: LD_VAR 0 5
91484: ARRAY
91485: PUSH
91486: LD_INT 2
91488: ARRAY
91489: PPUSH
91490: LD_VAR 0 1
91494: PPUSH
91495: CALL_OW 255
91499: PPUSH
91500: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
91504: LD_ADDR_EXP 133
91508: PUSH
91509: LD_EXP 133
91513: PPUSH
91514: LD_VAR 0 6
91518: PPUSH
91519: LD_EXP 133
91523: PUSH
91524: LD_VAR 0 6
91528: ARRAY
91529: PPUSH
91530: LD_VAR 0 5
91534: PPUSH
91535: CALL_OW 3
91539: PPUSH
91540: CALL_OW 1
91544: ST_TO_ADDR
// exit ;
91545: POP
91546: POP
91547: GO 91740
// end ; end ;
91549: GO 91389
91551: POP
91552: POP
// for i := minerMinesList [ index ] downto 1 do
91553: LD_ADDR_VAR 0 5
91557: PUSH
91558: DOUBLE
91559: LD_EXP 133
91563: PUSH
91564: LD_VAR 0 6
91568: ARRAY
91569: INC
91570: ST_TO_ADDR
91571: LD_INT 1
91573: PUSH
91574: FOR_DOWNTO
91575: IFFALSE 91738
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
91577: LD_EXP 133
91581: PUSH
91582: LD_VAR 0 6
91586: ARRAY
91587: PUSH
91588: LD_VAR 0 5
91592: ARRAY
91593: PUSH
91594: LD_INT 1
91596: ARRAY
91597: PPUSH
91598: LD_EXP 133
91602: PUSH
91603: LD_VAR 0 6
91607: ARRAY
91608: PUSH
91609: LD_VAR 0 5
91613: ARRAY
91614: PUSH
91615: LD_INT 2
91617: ARRAY
91618: PPUSH
91619: LD_VAR 0 2
91623: PPUSH
91624: LD_VAR 0 3
91628: PPUSH
91629: CALL_OW 298
91633: PUSH
91634: LD_INT 6
91636: LESS
91637: IFFALSE 91736
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
91639: LD_EXP 133
91643: PUSH
91644: LD_VAR 0 6
91648: ARRAY
91649: PUSH
91650: LD_VAR 0 5
91654: ARRAY
91655: PUSH
91656: LD_INT 1
91658: ARRAY
91659: PPUSH
91660: LD_EXP 133
91664: PUSH
91665: LD_VAR 0 6
91669: ARRAY
91670: PUSH
91671: LD_VAR 0 5
91675: ARRAY
91676: PUSH
91677: LD_INT 2
91679: ARRAY
91680: PPUSH
91681: LD_VAR 0 1
91685: PPUSH
91686: CALL_OW 255
91690: PPUSH
91691: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
91695: LD_ADDR_EXP 133
91699: PUSH
91700: LD_EXP 133
91704: PPUSH
91705: LD_VAR 0 6
91709: PPUSH
91710: LD_EXP 133
91714: PUSH
91715: LD_VAR 0 6
91719: ARRAY
91720: PPUSH
91721: LD_VAR 0 5
91725: PPUSH
91726: CALL_OW 3
91730: PPUSH
91731: CALL_OW 1
91735: ST_TO_ADDR
// end ; end ;
91736: GO 91574
91738: POP
91739: POP
// end ;
91740: LD_VAR 0 4
91744: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
91745: LD_INT 0
91747: PPUSH
91748: PPUSH
91749: PPUSH
91750: PPUSH
91751: PPUSH
91752: PPUSH
91753: PPUSH
91754: PPUSH
91755: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
91756: LD_VAR 0 1
91760: PPUSH
91761: CALL_OW 264
91765: PUSH
91766: LD_INT 81
91768: EQUAL
91769: NOT
91770: PUSH
91771: LD_VAR 0 1
91775: PUSH
91776: LD_EXP 132
91780: IN
91781: NOT
91782: OR
91783: IFFALSE 91787
// exit ;
91785: GO 92109
// index := GetElementIndex ( minersList , unit ) ;
91787: LD_ADDR_VAR 0 6
91791: PUSH
91792: LD_EXP 132
91796: PPUSH
91797: LD_VAR 0 1
91801: PPUSH
91802: CALL 34190 0 2
91806: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
91807: LD_ADDR_VAR 0 8
91811: PUSH
91812: LD_EXP 134
91816: PUSH
91817: LD_EXP 133
91821: PUSH
91822: LD_VAR 0 6
91826: ARRAY
91827: MINUS
91828: ST_TO_ADDR
// if not minesFreeAmount then
91829: LD_VAR 0 8
91833: NOT
91834: IFFALSE 91838
// exit ;
91836: GO 92109
// tmp := [ ] ;
91838: LD_ADDR_VAR 0 7
91842: PUSH
91843: EMPTY
91844: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
91845: LD_ADDR_VAR 0 5
91849: PUSH
91850: DOUBLE
91851: LD_INT 1
91853: DEC
91854: ST_TO_ADDR
91855: LD_VAR 0 8
91859: PUSH
91860: FOR_TO
91861: IFFALSE 92056
// begin _d := rand ( 0 , 5 ) ;
91863: LD_ADDR_VAR 0 11
91867: PUSH
91868: LD_INT 0
91870: PPUSH
91871: LD_INT 5
91873: PPUSH
91874: CALL_OW 12
91878: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
91879: LD_ADDR_VAR 0 12
91883: PUSH
91884: LD_INT 2
91886: PPUSH
91887: LD_INT 6
91889: PPUSH
91890: CALL_OW 12
91894: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
91895: LD_ADDR_VAR 0 9
91899: PUSH
91900: LD_VAR 0 2
91904: PPUSH
91905: LD_VAR 0 11
91909: PPUSH
91910: LD_VAR 0 12
91914: PPUSH
91915: CALL_OW 272
91919: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
91920: LD_ADDR_VAR 0 10
91924: PUSH
91925: LD_VAR 0 3
91929: PPUSH
91930: LD_VAR 0 11
91934: PPUSH
91935: LD_VAR 0 12
91939: PPUSH
91940: CALL_OW 273
91944: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
91945: LD_VAR 0 9
91949: PPUSH
91950: LD_VAR 0 10
91954: PPUSH
91955: CALL_OW 488
91959: PUSH
91960: LD_VAR 0 9
91964: PUSH
91965: LD_VAR 0 10
91969: PUSH
91970: EMPTY
91971: LIST
91972: LIST
91973: PUSH
91974: LD_VAR 0 7
91978: IN
91979: NOT
91980: AND
91981: PUSH
91982: LD_VAR 0 9
91986: PPUSH
91987: LD_VAR 0 10
91991: PPUSH
91992: CALL_OW 458
91996: NOT
91997: AND
91998: IFFALSE 92040
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
92000: LD_ADDR_VAR 0 7
92004: PUSH
92005: LD_VAR 0 7
92009: PPUSH
92010: LD_VAR 0 7
92014: PUSH
92015: LD_INT 1
92017: PLUS
92018: PPUSH
92019: LD_VAR 0 9
92023: PUSH
92024: LD_VAR 0 10
92028: PUSH
92029: EMPTY
92030: LIST
92031: LIST
92032: PPUSH
92033: CALL_OW 1
92037: ST_TO_ADDR
92038: GO 92054
// i := i - 1 ;
92040: LD_ADDR_VAR 0 5
92044: PUSH
92045: LD_VAR 0 5
92049: PUSH
92050: LD_INT 1
92052: MINUS
92053: ST_TO_ADDR
// end ;
92054: GO 91860
92056: POP
92057: POP
// for i in tmp do
92058: LD_ADDR_VAR 0 5
92062: PUSH
92063: LD_VAR 0 7
92067: PUSH
92068: FOR_IN
92069: IFFALSE 92107
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
92071: LD_VAR 0 1
92075: PPUSH
92076: LD_VAR 0 5
92080: PUSH
92081: LD_INT 1
92083: ARRAY
92084: PPUSH
92085: LD_VAR 0 5
92089: PUSH
92090: LD_INT 2
92092: ARRAY
92093: PPUSH
92094: CALL 91053 0 3
92098: NOT
92099: IFFALSE 92105
// exit ;
92101: POP
92102: POP
92103: GO 92109
92105: GO 92068
92107: POP
92108: POP
// end ;
92109: LD_VAR 0 4
92113: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
92114: LD_INT 0
92116: PPUSH
92117: PPUSH
92118: PPUSH
92119: PPUSH
92120: PPUSH
92121: PPUSH
92122: PPUSH
// if not GetClass ( unit ) = class_sniper then
92123: LD_VAR 0 1
92127: PPUSH
92128: CALL_OW 257
92132: PUSH
92133: LD_INT 5
92135: EQUAL
92136: NOT
92137: IFFALSE 92141
// exit ;
92139: GO 92529
// dist := 8 ;
92141: LD_ADDR_VAR 0 5
92145: PUSH
92146: LD_INT 8
92148: ST_TO_ADDR
// viewRange := 12 ;
92149: LD_ADDR_VAR 0 7
92153: PUSH
92154: LD_INT 12
92156: ST_TO_ADDR
// side := GetSide ( unit ) ;
92157: LD_ADDR_VAR 0 6
92161: PUSH
92162: LD_VAR 0 1
92166: PPUSH
92167: CALL_OW 255
92171: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
92172: LD_INT 61
92174: PPUSH
92175: LD_VAR 0 6
92179: PPUSH
92180: CALL_OW 321
92184: PUSH
92185: LD_INT 2
92187: EQUAL
92188: IFFALSE 92198
// viewRange := 16 ;
92190: LD_ADDR_VAR 0 7
92194: PUSH
92195: LD_INT 16
92197: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
92198: LD_VAR 0 1
92202: PPUSH
92203: LD_VAR 0 2
92207: PPUSH
92208: LD_VAR 0 3
92212: PPUSH
92213: CALL_OW 297
92217: PUSH
92218: LD_VAR 0 5
92222: GREATER
92223: IFFALSE 92302
// begin ComMoveXY ( unit , x , y ) ;
92225: LD_VAR 0 1
92229: PPUSH
92230: LD_VAR 0 2
92234: PPUSH
92235: LD_VAR 0 3
92239: PPUSH
92240: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
92244: LD_INT 35
92246: PPUSH
92247: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
92251: LD_VAR 0 1
92255: PPUSH
92256: LD_VAR 0 2
92260: PPUSH
92261: LD_VAR 0 3
92265: PPUSH
92266: CALL 65942 0 3
92270: NOT
92271: IFFALSE 92275
// exit ;
92273: GO 92529
// until GetDistUnitXY ( unit , x , y ) < dist ;
92275: LD_VAR 0 1
92279: PPUSH
92280: LD_VAR 0 2
92284: PPUSH
92285: LD_VAR 0 3
92289: PPUSH
92290: CALL_OW 297
92294: PUSH
92295: LD_VAR 0 5
92299: LESS
92300: IFFALSE 92244
// end ; ComTurnXY ( unit , x , y ) ;
92302: LD_VAR 0 1
92306: PPUSH
92307: LD_VAR 0 2
92311: PPUSH
92312: LD_VAR 0 3
92316: PPUSH
92317: CALL_OW 118
// wait ( 5 ) ;
92321: LD_INT 5
92323: PPUSH
92324: CALL_OW 67
// _d := GetDir ( unit ) ;
92328: LD_ADDR_VAR 0 10
92332: PUSH
92333: LD_VAR 0 1
92337: PPUSH
92338: CALL_OW 254
92342: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
92343: LD_ADDR_VAR 0 8
92347: PUSH
92348: LD_VAR 0 1
92352: PPUSH
92353: CALL_OW 250
92357: PPUSH
92358: LD_VAR 0 10
92362: PPUSH
92363: LD_VAR 0 5
92367: PPUSH
92368: CALL_OW 272
92372: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
92373: LD_ADDR_VAR 0 9
92377: PUSH
92378: LD_VAR 0 1
92382: PPUSH
92383: CALL_OW 251
92387: PPUSH
92388: LD_VAR 0 10
92392: PPUSH
92393: LD_VAR 0 5
92397: PPUSH
92398: CALL_OW 273
92402: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
92403: LD_VAR 0 8
92407: PPUSH
92408: LD_VAR 0 9
92412: PPUSH
92413: CALL_OW 488
92417: NOT
92418: IFFALSE 92422
// exit ;
92420: GO 92529
// ComAnimCustom ( unit , 1 ) ;
92422: LD_VAR 0 1
92426: PPUSH
92427: LD_INT 1
92429: PPUSH
92430: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
92434: LD_VAR 0 8
92438: PPUSH
92439: LD_VAR 0 9
92443: PPUSH
92444: LD_VAR 0 6
92448: PPUSH
92449: LD_VAR 0 7
92453: PPUSH
92454: CALL_OW 330
// repeat wait ( 1 ) ;
92458: LD_INT 1
92460: PPUSH
92461: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
92465: LD_VAR 0 1
92469: PPUSH
92470: CALL_OW 316
92474: PUSH
92475: LD_VAR 0 1
92479: PPUSH
92480: CALL_OW 314
92484: OR
92485: PUSH
92486: LD_VAR 0 1
92490: PPUSH
92491: CALL_OW 302
92495: NOT
92496: OR
92497: PUSH
92498: LD_VAR 0 1
92502: PPUSH
92503: CALL_OW 301
92507: OR
92508: IFFALSE 92458
// RemoveSeeing ( _x , _y , side ) ;
92510: LD_VAR 0 8
92514: PPUSH
92515: LD_VAR 0 9
92519: PPUSH
92520: LD_VAR 0 6
92524: PPUSH
92525: CALL_OW 331
// end ; end_of_file
92529: LD_VAR 0 4
92533: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
92534: LD_VAR 0 1
92538: PPUSH
92539: LD_VAR 0 2
92543: PPUSH
92544: LD_VAR 0 3
92548: PPUSH
92549: LD_VAR 0 4
92553: PPUSH
92554: LD_VAR 0 5
92558: PPUSH
92559: LD_VAR 0 6
92563: PPUSH
92564: CALL 71830 0 6
// end ;
92568: PPOPN 6
92570: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
92571: LD_INT 0
92573: PPUSH
// begin if not units then
92574: LD_VAR 0 1
92578: NOT
92579: IFFALSE 92583
// exit ;
92581: GO 92583
// end ;
92583: PPOPN 7
92585: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
92586: CALL 71734 0 0
// end ;
92590: PPOPN 1
92592: END
